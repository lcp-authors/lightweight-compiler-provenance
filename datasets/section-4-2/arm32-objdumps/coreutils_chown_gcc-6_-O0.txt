
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

00010fe0 <.init>:
   10fe0:	push	{r3, lr}
   10fe4:	bl	113ac <__assert_fail@plt+0x4c>
   10fe8:	pop	{r3, pc}

Disassembly of section .plt:

00010fec <fstatfs64@plt-0x14>:
   10fec:	push	{lr}		; (str lr, [sp, #-4]!)
   10ff0:	ldr	lr, [pc, #4]	; 10ffc <fstatfs64@plt-0x4>
   10ff4:	add	lr, pc, lr
   10ff8:	ldr	pc, [lr, #8]!
   10ffc:	andeq	r0, r2, r4

00011000 <fstatfs64@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #32, 20	; 0x20000
   11008:	ldr	pc, [ip, #4]!

0001100c <calloc@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #126976	; 0x1f000
   11014:	ldr	pc, [ip, #4092]!	; 0xffc

00011018 <endgrent@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #126976	; 0x1f000
   11020:	ldr	pc, [ip, #4084]!	; 0xff4

00011024 <fputs_unlocked@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #126976	; 0x1f000
   1102c:	ldr	pc, [ip, #4076]!	; 0xfec

00011030 <raise@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #126976	; 0x1f000
   11038:	ldr	pc, [ip, #4068]!	; 0xfe4

0001103c <getpwnam@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #126976	; 0x1f000
   11044:	ldr	pc, [ip, #4060]!	; 0xfdc

00011048 <strcmp@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #126976	; 0x1f000
   11050:	ldr	pc, [ip, #4052]!	; 0xfd4

00011054 <getpwuid@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #126976	; 0x1f000
   1105c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011060 <printf@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #126976	; 0x1f000
   11068:	ldr	pc, [ip, #4036]!	; 0xfc4

0001106c <fflush@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #126976	; 0x1f000
   11074:	ldr	pc, [ip, #4028]!	; 0xfbc

00011078 <memmove@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #126976	; 0x1f000
   11080:	ldr	pc, [ip, #4020]!	; 0xfb4

00011084 <free@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #126976	; 0x1f000
   1108c:	ldr	pc, [ip, #4012]!	; 0xfac

00011090 <_exit@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #126976	; 0x1f000
   11098:	ldr	pc, [ip, #4004]!	; 0xfa4

0001109c <memcpy@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #126976	; 0x1f000
   110a4:	ldr	pc, [ip, #3996]!	; 0xf9c

000110a8 <mbsinit@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #126976	; 0x1f000
   110b0:	ldr	pc, [ip, #3988]!	; 0xf94

000110b4 <memcmp@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #126976	; 0x1f000
   110bc:	ldr	pc, [ip, #3980]!	; 0xf8c

000110c0 <stpcpy@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #126976	; 0x1f000
   110c8:	ldr	pc, [ip, #3972]!	; 0xf84

000110cc <fputc_unlocked@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #126976	; 0x1f000
   110d4:	ldr	pc, [ip, #3964]!	; 0xf7c

000110d8 <realloc@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #126976	; 0x1f000
   110e0:	ldr	pc, [ip, #3956]!	; 0xf74

000110e4 <textdomain@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #126976	; 0x1f000
   110ec:	ldr	pc, [ip, #3948]!	; 0xf6c

000110f0 <__fxstatat64@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #126976	; 0x1f000
   110f8:	ldr	pc, [ip, #3940]!	; 0xf64

000110fc <iswprint@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #126976	; 0x1f000
   11104:	ldr	pc, [ip, #3932]!	; 0xf5c

00011108 <__fxstat64@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #126976	; 0x1f000
   11110:	ldr	pc, [ip, #3924]!	; 0xf54

00011114 <fwrite@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #126976	; 0x1f000
   1111c:	ldr	pc, [ip, #3916]!	; 0xf4c

00011120 <lseek64@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #126976	; 0x1f000
   11128:	ldr	pc, [ip, #3908]!	; 0xf44

0001112c <__ctype_get_mb_cur_max@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #126976	; 0x1f000
   11134:	ldr	pc, [ip, #3900]!	; 0xf3c

00011138 <strcpy@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #126976	; 0x1f000
   11140:	ldr	pc, [ip, #3892]!	; 0xf34

00011144 <__fpending@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #126976	; 0x1f000
   1114c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011150 <ferror_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #126976	; 0x1f000
   11158:	ldr	pc, [ip, #3876]!	; 0xf24

0001115c <mbrtowc@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #126976	; 0x1f000
   11164:	ldr	pc, [ip, #3868]!	; 0xf1c

00011168 <error@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #126976	; 0x1f000
   11170:	ldr	pc, [ip, #3860]!	; 0xf14

00011174 <open64@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #126976	; 0x1f000
   1117c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011180 <malloc@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #126976	; 0x1f000
   11188:	ldr	pc, [ip, #3844]!	; 0xf04

0001118c <__libc_start_main@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #126976	; 0x1f000
   11194:	ldr	pc, [ip, #3836]!	; 0xefc

00011198 <__freading@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #126976	; 0x1f000
   111a0:	ldr	pc, [ip, #3828]!	; 0xef4

000111a4 <__gmon_start__@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #126976	; 0x1f000
   111ac:	ldr	pc, [ip, #3820]!	; 0xeec

000111b0 <getopt_long@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #126976	; 0x1f000
   111b8:	ldr	pc, [ip, #3812]!	; 0xee4

000111bc <__ctype_b_loc@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #126976	; 0x1f000
   111c4:	ldr	pc, [ip, #3804]!	; 0xedc

000111c8 <exit@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #126976	; 0x1f000
   111d0:	ldr	pc, [ip, #3796]!	; 0xed4

000111d4 <gettext@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #126976	; 0x1f000
   111dc:	ldr	pc, [ip, #3788]!	; 0xecc

000111e0 <strtoul@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #126976	; 0x1f000
   111e8:	ldr	pc, [ip, #3780]!	; 0xec4

000111ec <strlen@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #126976	; 0x1f000
   111f4:	ldr	pc, [ip, #3772]!	; 0xebc

000111f8 <strchr@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #126976	; 0x1f000
   11200:	ldr	pc, [ip, #3764]!	; 0xeb4

00011204 <openat64@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #126976	; 0x1f000
   1120c:	ldr	pc, [ip, #3756]!	; 0xeac

00011210 <fchown@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #126976	; 0x1f000
   11218:	ldr	pc, [ip, #3748]!	; 0xea4

0001121c <fprintf@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #126976	; 0x1f000
   11224:	ldr	pc, [ip, #3740]!	; 0xe9c

00011228 <__errno_location@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #126976	; 0x1f000
   11230:	ldr	pc, [ip, #3732]!	; 0xe94

00011234 <__cxa_atexit@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #126976	; 0x1f000
   1123c:	ldr	pc, [ip, #3724]!	; 0xe8c

00011240 <memset@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #126976	; 0x1f000
   11248:	ldr	pc, [ip, #3716]!	; 0xe84

0001124c <fileno@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #126976	; 0x1f000
   11254:	ldr	pc, [ip, #3708]!	; 0xe7c

00011258 <fclose@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #126976	; 0x1f000
   11260:	ldr	pc, [ip, #3700]!	; 0xe74

00011264 <fseeko64@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #126976	; 0x1f000
   1126c:	ldr	pc, [ip, #3692]!	; 0xe6c

00011270 <fcntl64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #126976	; 0x1f000
   11278:	ldr	pc, [ip, #3684]!	; 0xe64

0001127c <setlocale@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #126976	; 0x1f000
   11284:	ldr	pc, [ip, #3676]!	; 0xe5c

00011288 <endpwent@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #126976	; 0x1f000
   11290:	ldr	pc, [ip, #3668]!	; 0xe54

00011294 <strrchr@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #126976	; 0x1f000
   1129c:	ldr	pc, [ip, #3660]!	; 0xe4c

000112a0 <nl_langinfo@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #126976	; 0x1f000
   112a8:	ldr	pc, [ip, #3652]!	; 0xe44

000112ac <readdir64@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #126976	; 0x1f000
   112b4:	ldr	pc, [ip, #3644]!	; 0xe3c

000112b8 <fdopendir@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #126976	; 0x1f000
   112c0:	ldr	pc, [ip, #3636]!	; 0xe34

000112c4 <dirfd@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #126976	; 0x1f000
   112cc:	ldr	pc, [ip, #3628]!	; 0xe2c

000112d0 <fchdir@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #126976	; 0x1f000
   112d8:	ldr	pc, [ip, #3620]!	; 0xe24

000112dc <qsort@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #126976	; 0x1f000
   112e4:	ldr	pc, [ip, #3612]!	; 0xe1c

000112e8 <fchownat@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #126976	; 0x1f000
   112f0:	ldr	pc, [ip, #3604]!	; 0xe14

000112f4 <bindtextdomain@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #126976	; 0x1f000
   112fc:	ldr	pc, [ip, #3596]!	; 0xe0c

00011300 <__xstat64@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #126976	; 0x1f000
   11308:	ldr	pc, [ip, #3588]!	; 0xe04

0001130c <strncmp@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #126976	; 0x1f000
   11314:	ldr	pc, [ip, #3580]!	; 0xdfc

00011318 <abort@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #126976	; 0x1f000
   11320:	ldr	pc, [ip, #3572]!	; 0xdf4

00011324 <close@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #126976	; 0x1f000
   1132c:	ldr	pc, [ip, #3564]!	; 0xdec

00011330 <__lxstat64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #126976	; 0x1f000
   11338:	ldr	pc, [ip, #3556]!	; 0xde4

0001133c <closedir@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #126976	; 0x1f000
   11344:	ldr	pc, [ip, #3548]!	; 0xddc

00011348 <getgrgid@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #126976	; 0x1f000
   11350:	ldr	pc, [ip, #3540]!	; 0xdd4

00011354 <getgrnam@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #126976	; 0x1f000
   1135c:	ldr	pc, [ip, #3532]!	; 0xdcc

00011360 <__assert_fail@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #126976	; 0x1f000
   11368:	ldr	pc, [ip, #3524]!	; 0xdc4

Disassembly of section .text:

00011370 <.text>:
   11370:	mov	fp, #0
   11374:	mov	lr, #0
   11378:	pop	{r1}		; (ldr r1, [sp], #4)
   1137c:	mov	r2, sp
   11380:	push	{r2}		; (str r2, [sp, #-4]!)
   11384:	push	{r0}		; (str r0, [sp, #-4]!)
   11388:	ldr	ip, [pc, #16]	; 113a0 <__assert_fail@plt+0x40>
   1138c:	push	{ip}		; (str ip, [sp, #-4]!)
   11390:	ldr	r0, [pc, #12]	; 113a4 <__assert_fail@plt+0x44>
   11394:	ldr	r3, [pc, #12]	; 113a8 <__assert_fail@plt+0x48>
   11398:	bl	1118c <__libc_start_main@plt>
   1139c:	bl	11318 <abort@plt>
   113a0:	andeq	lr, r1, r8, asr #29
   113a4:	andeq	r1, r1, r0, lsr #17
   113a8:	andeq	lr, r1, r8, ror #28
   113ac:	ldr	r3, [pc, #20]	; 113c8 <__assert_fail@plt+0x68>
   113b0:	ldr	r2, [pc, #20]	; 113cc <__assert_fail@plt+0x6c>
   113b4:	add	r3, pc, r3
   113b8:	ldr	r2, [r3, r2]
   113bc:	cmp	r2, #0
   113c0:	bxeq	lr
   113c4:	b	111a4 <__gmon_start__@plt>
   113c8:	andeq	pc, r1, r4, asr #24
   113cc:	andeq	r0, r0, r0, lsr r1
   113d0:	ldr	r3, [pc, #28]	; 113f4 <__assert_fail@plt+0x94>
   113d4:	ldr	r0, [pc, #28]	; 113f8 <__assert_fail@plt+0x98>
   113d8:	sub	r3, r3, r0
   113dc:	cmp	r3, #6
   113e0:	bxls	lr
   113e4:	ldr	r3, [pc, #16]	; 113fc <__assert_fail@plt+0x9c>
   113e8:	cmp	r3, #0
   113ec:	bxeq	lr
   113f0:	bx	r3
   113f4:	muleq	r3, r3, r1
   113f8:	muleq	r3, r0, r1
   113fc:	andeq	r0, r0, r0
   11400:	ldr	r1, [pc, #36]	; 1142c <__assert_fail@plt+0xcc>
   11404:	ldr	r0, [pc, #36]	; 11430 <__assert_fail@plt+0xd0>
   11408:	sub	r1, r1, r0
   1140c:	asr	r1, r1, #2
   11410:	add	r1, r1, r1, lsr #31
   11414:	asrs	r1, r1, #1
   11418:	bxeq	lr
   1141c:	ldr	r3, [pc, #16]	; 11434 <__assert_fail@plt+0xd4>
   11420:	cmp	r3, #0
   11424:	bxeq	lr
   11428:	bx	r3
   1142c:	muleq	r3, r0, r1
   11430:	muleq	r3, r0, r1
   11434:	andeq	r0, r0, r0
   11438:	push	{r4, lr}
   1143c:	ldr	r4, [pc, #24]	; 1145c <__assert_fail@plt+0xfc>
   11440:	ldrb	r3, [r4]
   11444:	cmp	r3, #0
   11448:	popne	{r4, pc}
   1144c:	bl	113d0 <__assert_fail@plt+0x70>
   11450:	mov	r3, #1
   11454:	strb	r3, [r4]
   11458:	pop	{r4, pc}
   1145c:	andeq	r1, r3, ip, lsr #3
   11460:	ldr	r0, [pc, #40]	; 11490 <__assert_fail@plt+0x130>
   11464:	ldr	r3, [r0]
   11468:	cmp	r3, #0
   1146c:	bne	11474 <__assert_fail@plt+0x114>
   11470:	b	11400 <__assert_fail@plt+0xa0>
   11474:	ldr	r3, [pc, #24]	; 11494 <__assert_fail@plt+0x134>
   11478:	cmp	r3, #0
   1147c:	beq	11470 <__assert_fail@plt+0x110>
   11480:	push	{r4, lr}
   11484:	blx	r3
   11488:	pop	{r4, lr}
   1148c:	b	11400 <__assert_fail@plt+0xa0>
   11490:	andeq	r0, r3, r4, lsl pc
   11494:	andeq	r0, r0, r0
   11498:	push	{fp, lr}
   1149c:	add	fp, sp, #4
   114a0:	sub	sp, sp, #80	; 0x50
   114a4:	str	r0, [fp, #-80]	; 0xffffffb0
   114a8:	ldr	r3, [pc, #348]	; 1160c <__assert_fail@plt+0x2ac>
   114ac:	sub	ip, fp, #72	; 0x48
   114b0:	mov	lr, r3
   114b4:	ldm	lr!, {r0, r1, r2, r3}
   114b8:	stmia	ip!, {r0, r1, r2, r3}
   114bc:	ldm	lr!, {r0, r1, r2, r3}
   114c0:	stmia	ip!, {r0, r1, r2, r3}
   114c4:	ldm	lr!, {r0, r1, r2, r3}
   114c8:	stmia	ip!, {r0, r1, r2, r3}
   114cc:	ldm	lr, {r0, r1}
   114d0:	stm	ip, {r0, r1}
   114d4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   114d8:	str	r3, [fp, #-8]
   114dc:	sub	r3, fp, #72	; 0x48
   114e0:	str	r3, [fp, #-12]
   114e4:	b	114f4 <__assert_fail@plt+0x194>
   114e8:	ldr	r3, [fp, #-12]
   114ec:	add	r3, r3, #8
   114f0:	str	r3, [fp, #-12]
   114f4:	ldr	r3, [fp, #-12]
   114f8:	ldr	r3, [r3]
   114fc:	cmp	r3, #0
   11500:	beq	11524 <__assert_fail@plt+0x1c4>
   11504:	ldr	r3, [fp, #-12]
   11508:	ldr	r3, [r3]
   1150c:	mov	r1, r3
   11510:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11514:	bl	11048 <strcmp@plt>
   11518:	mov	r3, r0
   1151c:	cmp	r3, #0
   11520:	bne	114e8 <__assert_fail@plt+0x188>
   11524:	ldr	r3, [fp, #-12]
   11528:	ldr	r3, [r3, #4]
   1152c:	cmp	r3, #0
   11530:	beq	11540 <__assert_fail@plt+0x1e0>
   11534:	ldr	r3, [fp, #-12]
   11538:	ldr	r3, [r3, #4]
   1153c:	str	r3, [fp, #-8]
   11540:	ldr	r0, [pc, #200]	; 11610 <__assert_fail@plt+0x2b0>
   11544:	bl	111d4 <gettext@plt>
   11548:	mov	r3, r0
   1154c:	ldr	r2, [pc, #192]	; 11614 <__assert_fail@plt+0x2b4>
   11550:	ldr	r1, [pc, #192]	; 11618 <__assert_fail@plt+0x2b8>
   11554:	mov	r0, r3
   11558:	bl	11060 <printf@plt>
   1155c:	mov	r1, #0
   11560:	mov	r0, #5
   11564:	bl	1127c <setlocale@plt>
   11568:	str	r0, [fp, #-16]
   1156c:	ldr	r3, [fp, #-16]
   11570:	cmp	r3, #0
   11574:	beq	115b4 <__assert_fail@plt+0x254>
   11578:	mov	r2, #3
   1157c:	ldr	r1, [pc, #152]	; 1161c <__assert_fail@plt+0x2bc>
   11580:	ldr	r0, [fp, #-16]
   11584:	bl	1130c <strncmp@plt>
   11588:	mov	r3, r0
   1158c:	cmp	r3, #0
   11590:	beq	115b4 <__assert_fail@plt+0x254>
   11594:	ldr	r0, [pc, #132]	; 11620 <__assert_fail@plt+0x2c0>
   11598:	bl	111d4 <gettext@plt>
   1159c:	mov	r2, r0
   115a0:	ldr	r3, [pc, #124]	; 11624 <__assert_fail@plt+0x2c4>
   115a4:	ldr	r3, [r3]
   115a8:	mov	r1, r3
   115ac:	mov	r0, r2
   115b0:	bl	11024 <fputs_unlocked@plt>
   115b4:	ldr	r0, [pc, #108]	; 11628 <__assert_fail@plt+0x2c8>
   115b8:	bl	111d4 <gettext@plt>
   115bc:	mov	r3, r0
   115c0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   115c4:	ldr	r1, [pc, #72]	; 11614 <__assert_fail@plt+0x2b4>
   115c8:	mov	r0, r3
   115cc:	bl	11060 <printf@plt>
   115d0:	ldr	r0, [pc, #84]	; 1162c <__assert_fail@plt+0x2cc>
   115d4:	bl	111d4 <gettext@plt>
   115d8:	ldr	r2, [fp, #-8]
   115dc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   115e0:	cmp	r2, r3
   115e4:	bne	115f0 <__assert_fail@plt+0x290>
   115e8:	ldr	r3, [pc, #64]	; 11630 <__assert_fail@plt+0x2d0>
   115ec:	b	115f4 <__assert_fail@plt+0x294>
   115f0:	ldr	r3, [pc, #60]	; 11634 <__assert_fail@plt+0x2d4>
   115f4:	mov	r2, r3
   115f8:	ldr	r1, [fp, #-8]
   115fc:	bl	11060 <printf@plt>
   11600:	nop			; (mov r0, r0)
   11604:	sub	sp, fp, #4
   11608:	pop	{fp, pc}
   1160c:	strheq	pc, [r1], -ip	; <UNPREDICTABLE>
   11610:	andeq	lr, r1, r8, asr #30
   11614:	andeq	lr, r1, r0, ror #30
   11618:	andeq	lr, r1, r8, lsl #31
   1161c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11620:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   11624:	andeq	r1, r3, r4, lsr #3
   11628:	andeq	lr, r1, r4, ror #31
   1162c:	andeq	pc, r1, r0
   11630:	andeq	pc, r1, r4, lsr r0	; <UNPREDICTABLE>
   11634:	andeq	pc, r1, r0, asr #32
   11638:	push	{r4, fp, lr}
   1163c:	add	fp, sp, #8
   11640:	sub	sp, sp, #12
   11644:	str	r0, [fp, #-16]
   11648:	ldr	r3, [fp, #-16]
   1164c:	cmp	r3, #0
   11650:	beq	11680 <__assert_fail@plt+0x320>
   11654:	ldr	r3, [pc, #504]	; 11854 <__assert_fail@plt+0x4f4>
   11658:	ldr	r4, [r3]
   1165c:	ldr	r0, [pc, #500]	; 11858 <__assert_fail@plt+0x4f8>
   11660:	bl	111d4 <gettext@plt>
   11664:	mov	r1, r0
   11668:	ldr	r3, [pc, #492]	; 1185c <__assert_fail@plt+0x4fc>
   1166c:	ldr	r3, [r3]
   11670:	mov	r2, r3
   11674:	mov	r0, r4
   11678:	bl	1121c <fprintf@plt>
   1167c:	b	1184c <__assert_fail@plt+0x4ec>
   11680:	ldr	r0, [pc, #472]	; 11860 <__assert_fail@plt+0x500>
   11684:	bl	111d4 <gettext@plt>
   11688:	ldr	r3, [pc, #460]	; 1185c <__assert_fail@plt+0x4fc>
   1168c:	ldr	r1, [r3]
   11690:	ldr	r3, [pc, #452]	; 1185c <__assert_fail@plt+0x4fc>
   11694:	ldr	r3, [r3]
   11698:	mov	r2, r3
   1169c:	bl	11060 <printf@plt>
   116a0:	ldr	r0, [pc, #444]	; 11864 <__assert_fail@plt+0x504>
   116a4:	bl	111d4 <gettext@plt>
   116a8:	mov	r2, r0
   116ac:	ldr	r3, [pc, #436]	; 11868 <__assert_fail@plt+0x508>
   116b0:	ldr	r3, [r3]
   116b4:	mov	r1, r3
   116b8:	mov	r0, r2
   116bc:	bl	11024 <fputs_unlocked@plt>
   116c0:	ldr	r0, [pc, #420]	; 1186c <__assert_fail@plt+0x50c>
   116c4:	bl	111d4 <gettext@plt>
   116c8:	mov	r2, r0
   116cc:	ldr	r3, [pc, #404]	; 11868 <__assert_fail@plt+0x508>
   116d0:	ldr	r3, [r3]
   116d4:	mov	r1, r3
   116d8:	mov	r0, r2
   116dc:	bl	11024 <fputs_unlocked@plt>
   116e0:	ldr	r0, [pc, #392]	; 11870 <__assert_fail@plt+0x510>
   116e4:	bl	111d4 <gettext@plt>
   116e8:	mov	r2, r0
   116ec:	ldr	r3, [pc, #372]	; 11868 <__assert_fail@plt+0x508>
   116f0:	ldr	r3, [r3]
   116f4:	mov	r1, r3
   116f8:	mov	r0, r2
   116fc:	bl	11024 <fputs_unlocked@plt>
   11700:	ldr	r0, [pc, #364]	; 11874 <__assert_fail@plt+0x514>
   11704:	bl	111d4 <gettext@plt>
   11708:	mov	r2, r0
   1170c:	ldr	r3, [pc, #340]	; 11868 <__assert_fail@plt+0x508>
   11710:	ldr	r3, [r3]
   11714:	mov	r1, r3
   11718:	mov	r0, r2
   1171c:	bl	11024 <fputs_unlocked@plt>
   11720:	ldr	r0, [pc, #336]	; 11878 <__assert_fail@plt+0x518>
   11724:	bl	111d4 <gettext@plt>
   11728:	mov	r2, r0
   1172c:	ldr	r3, [pc, #308]	; 11868 <__assert_fail@plt+0x508>
   11730:	ldr	r3, [r3]
   11734:	mov	r1, r3
   11738:	mov	r0, r2
   1173c:	bl	11024 <fputs_unlocked@plt>
   11740:	ldr	r0, [pc, #308]	; 1187c <__assert_fail@plt+0x51c>
   11744:	bl	111d4 <gettext@plt>
   11748:	mov	r2, r0
   1174c:	ldr	r3, [pc, #276]	; 11868 <__assert_fail@plt+0x508>
   11750:	ldr	r3, [r3]
   11754:	mov	r1, r3
   11758:	mov	r0, r2
   1175c:	bl	11024 <fputs_unlocked@plt>
   11760:	ldr	r0, [pc, #280]	; 11880 <__assert_fail@plt+0x520>
   11764:	bl	111d4 <gettext@plt>
   11768:	mov	r2, r0
   1176c:	ldr	r3, [pc, #244]	; 11868 <__assert_fail@plt+0x508>
   11770:	ldr	r3, [r3]
   11774:	mov	r1, r3
   11778:	mov	r0, r2
   1177c:	bl	11024 <fputs_unlocked@plt>
   11780:	ldr	r0, [pc, #252]	; 11884 <__assert_fail@plt+0x524>
   11784:	bl	111d4 <gettext@plt>
   11788:	mov	r2, r0
   1178c:	ldr	r3, [pc, #212]	; 11868 <__assert_fail@plt+0x508>
   11790:	ldr	r3, [r3]
   11794:	mov	r1, r3
   11798:	mov	r0, r2
   1179c:	bl	11024 <fputs_unlocked@plt>
   117a0:	ldr	r0, [pc, #224]	; 11888 <__assert_fail@plt+0x528>
   117a4:	bl	111d4 <gettext@plt>
   117a8:	mov	r2, r0
   117ac:	ldr	r3, [pc, #180]	; 11868 <__assert_fail@plt+0x508>
   117b0:	ldr	r3, [r3]
   117b4:	mov	r1, r3
   117b8:	mov	r0, r2
   117bc:	bl	11024 <fputs_unlocked@plt>
   117c0:	ldr	r0, [pc, #196]	; 1188c <__assert_fail@plt+0x52c>
   117c4:	bl	111d4 <gettext@plt>
   117c8:	mov	r2, r0
   117cc:	ldr	r3, [pc, #148]	; 11868 <__assert_fail@plt+0x508>
   117d0:	ldr	r3, [r3]
   117d4:	mov	r1, r3
   117d8:	mov	r0, r2
   117dc:	bl	11024 <fputs_unlocked@plt>
   117e0:	ldr	r0, [pc, #168]	; 11890 <__assert_fail@plt+0x530>
   117e4:	bl	111d4 <gettext@plt>
   117e8:	mov	r2, r0
   117ec:	ldr	r3, [pc, #116]	; 11868 <__assert_fail@plt+0x508>
   117f0:	ldr	r3, [r3]
   117f4:	mov	r1, r3
   117f8:	mov	r0, r2
   117fc:	bl	11024 <fputs_unlocked@plt>
   11800:	ldr	r0, [pc, #140]	; 11894 <__assert_fail@plt+0x534>
   11804:	bl	111d4 <gettext@plt>
   11808:	mov	r2, r0
   1180c:	ldr	r3, [pc, #84]	; 11868 <__assert_fail@plt+0x508>
   11810:	ldr	r3, [r3]
   11814:	mov	r1, r3
   11818:	mov	r0, r2
   1181c:	bl	11024 <fputs_unlocked@plt>
   11820:	ldr	r0, [pc, #112]	; 11898 <__assert_fail@plt+0x538>
   11824:	bl	111d4 <gettext@plt>
   11828:	ldr	r3, [pc, #44]	; 1185c <__assert_fail@plt+0x4fc>
   1182c:	ldr	r1, [r3]
   11830:	ldr	r3, [pc, #36]	; 1185c <__assert_fail@plt+0x4fc>
   11834:	ldr	r2, [r3]
   11838:	ldr	r3, [pc, #28]	; 1185c <__assert_fail@plt+0x4fc>
   1183c:	ldr	r3, [r3]
   11840:	bl	11060 <printf@plt>
   11844:	ldr	r0, [pc, #80]	; 1189c <__assert_fail@plt+0x53c>
   11848:	bl	11498 <__assert_fail@plt+0x138>
   1184c:	ldr	r0, [fp, #-16]
   11850:	bl	111c8 <exit@plt>
   11854:	andeq	r1, r3, r0, lsr #3
   11858:	andeq	pc, r1, r4, ror #4
   1185c:	ldrdeq	r1, [r3], -r0
   11860:	andeq	pc, r1, ip, lsl #5
   11864:	strdeq	pc, [r1], -r0
   11868:	andeq	r1, r3, r4, lsr #3
   1186c:	andeq	pc, r1, r4, lsl #7
   11870:	andeq	pc, r1, r0, asr r4	; <UNPREDICTABLE>
   11874:	andeq	pc, r1, r8, lsr r5	; <UNPREDICTABLE>
   11878:			; <UNDEFINED> instruction: 0x0001f5b0
   1187c:	andeq	pc, r1, r4, lsl #14
   11880:	andeq	pc, r1, r4, lsl #15
   11884:	andeq	pc, r1, r0, lsl #16
   11888:	andeq	pc, r1, r8, asr #16
   1188c:	andeq	pc, r1, ip, lsl sl	; <UNPREDICTABLE>
   11890:	andeq	pc, r1, ip, asr #20
   11894:	andeq	pc, r1, r4, lsl #21
   11898:	andeq	pc, r1, r4, asr #22
   1189c:	andeq	pc, r1, r0, lsl ip	; <UNPREDICTABLE>
   118a0:	push	{r4, r5, fp, lr}
   118a4:	add	fp, sp, #12
   118a8:	sub	sp, sp, #200	; 0xc8
   118ac:	str	r0, [fp, #-192]	; 0xffffff40
   118b0:	str	r1, [fp, #-196]	; 0xffffff3c
   118b4:	mov	r3, #0
   118b8:	strb	r3, [fp, #-13]
   118bc:	mvn	r3, #0
   118c0:	str	r3, [fp, #-44]	; 0xffffffd4
   118c4:	mvn	r3, #0
   118c8:	str	r3, [fp, #-48]	; 0xffffffd0
   118cc:	mvn	r3, #0
   118d0:	str	r3, [fp, #-52]	; 0xffffffcc
   118d4:	mvn	r3, #0
   118d8:	str	r3, [fp, #-56]	; 0xffffffc8
   118dc:	mov	r3, #16
   118e0:	str	r3, [fp, #-20]	; 0xffffffec
   118e4:	mvn	r3, #0
   118e8:	str	r3, [fp, #-24]	; 0xffffffe8
   118ec:	ldr	r3, [fp, #-196]	; 0xffffff3c
   118f0:	ldr	r3, [r3]
   118f4:	mov	r0, r3
   118f8:	bl	18650 <__assert_fail@plt+0x72f0>
   118fc:	ldr	r1, [pc, #1468]	; 11ec0 <__assert_fail@plt+0xb60>
   11900:	mov	r0, #6
   11904:	bl	1127c <setlocale@plt>
   11908:	ldr	r1, [pc, #1460]	; 11ec4 <__assert_fail@plt+0xb64>
   1190c:	ldr	r0, [pc, #1460]	; 11ec8 <__assert_fail@plt+0xb68>
   11910:	bl	112f4 <bindtextdomain@plt>
   11914:	ldr	r0, [pc, #1452]	; 11ec8 <__assert_fail@plt+0xb68>
   11918:	bl	110e4 <textdomain@plt>
   1191c:	ldr	r0, [pc, #1448]	; 11ecc <__assert_fail@plt+0xb6c>
   11920:	bl	1eecc <__assert_fail@plt+0xdb6c>
   11924:	sub	r3, fp, #80	; 0x50
   11928:	mov	r0, r3
   1192c:	bl	11f20 <__assert_fail@plt+0xbc0>
   11930:	b	11b2c <__assert_fail@plt+0x7cc>
   11934:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11938:	cmp	r3, #102	; 0x66
   1193c:	beq	11ac4 <__assert_fail@plt+0x764>
   11940:	cmp	r3, #102	; 0x66
   11944:	bgt	11990 <__assert_fail@plt+0x630>
   11948:	cmp	r3, #76	; 0x4c
   1194c:	beq	119f4 <__assert_fail@plt+0x694>
   11950:	cmp	r3, #76	; 0x4c
   11954:	bgt	11974 <__assert_fail@plt+0x614>
   11958:	cmn	r3, #2
   1195c:	beq	11adc <__assert_fail@plt+0x77c>
   11960:	cmp	r3, #72	; 0x48
   11964:	beq	119e8 <__assert_fail@plt+0x688>
   11968:	cmn	r3, #3
   1196c:	beq	11ae4 <__assert_fail@plt+0x784>
   11970:	b	11b24 <__assert_fail@plt+0x7c4>
   11974:	cmp	r3, #82	; 0x52
   11978:	beq	11aac <__assert_fail@plt+0x74c>
   1197c:	cmp	r3, #99	; 0x63
   11980:	beq	11ab8 <__assert_fail@plt+0x758>
   11984:	cmp	r3, #80	; 0x50
   11988:	beq	11a00 <__assert_fail@plt+0x6a0>
   1198c:	b	11b24 <__assert_fail@plt+0x7c4>
   11990:	ldr	r2, [pc, #1336]	; 11ed0 <__assert_fail@plt+0xb70>
   11994:	cmp	r3, r2
   11998:	beq	11a50 <__assert_fail@plt+0x6f0>
   1199c:	ldr	r2, [pc, #1324]	; 11ed0 <__assert_fail@plt+0xb70>
   119a0:	cmp	r3, r2
   119a4:	bgt	119c4 <__assert_fail@plt+0x664>
   119a8:	cmp	r3, #118	; 0x76
   119ac:	beq	11ad0 <__assert_fail@plt+0x770>
   119b0:	cmp	r3, #256	; 0x100
   119b4:	beq	11a18 <__assert_fail@plt+0x6b8>
   119b8:	cmp	r3, #104	; 0x68
   119bc:	beq	11a0c <__assert_fail@plt+0x6ac>
   119c0:	b	11b24 <__assert_fail@plt+0x7c4>
   119c4:	ldr	r2, [pc, #1288]	; 11ed4 <__assert_fail@plt+0xb74>
   119c8:	cmp	r3, r2
   119cc:	beq	11a30 <__assert_fail@plt+0x6d0>
   119d0:	ldr	r2, [pc, #1276]	; 11ed4 <__assert_fail@plt+0xb74>
   119d4:	cmp	r3, r2
   119d8:	blt	11a24 <__assert_fail@plt+0x6c4>
   119dc:	cmp	r3, #260	; 0x104
   119e0:	beq	11a3c <__assert_fail@plt+0x6dc>
   119e4:	b	11b24 <__assert_fail@plt+0x7c4>
   119e8:	mov	r3, #17
   119ec:	str	r3, [fp, #-20]	; 0xffffffec
   119f0:	b	11b2c <__assert_fail@plt+0x7cc>
   119f4:	mov	r3, #2
   119f8:	str	r3, [fp, #-20]	; 0xffffffec
   119fc:	b	11b2c <__assert_fail@plt+0x7cc>
   11a00:	mov	r3, #16
   11a04:	str	r3, [fp, #-20]	; 0xffffffec
   11a08:	b	11b2c <__assert_fail@plt+0x7cc>
   11a0c:	mov	r3, #0
   11a10:	str	r3, [fp, #-24]	; 0xffffffe8
   11a14:	b	11b2c <__assert_fail@plt+0x7cc>
   11a18:	mov	r3, #1
   11a1c:	str	r3, [fp, #-24]	; 0xffffffe8
   11a20:	b	11b2c <__assert_fail@plt+0x7cc>
   11a24:	mov	r3, #0
   11a28:	strb	r3, [fp, #-13]
   11a2c:	b	11b2c <__assert_fail@plt+0x7cc>
   11a30:	mov	r3, #1
   11a34:	strb	r3, [fp, #-13]
   11a38:	b	11b2c <__assert_fail@plt+0x7cc>
   11a3c:	ldr	r3, [pc, #1172]	; 11ed8 <__assert_fail@plt+0xb78>
   11a40:	ldr	r3, [r3]
   11a44:	ldr	r2, [pc, #1168]	; 11edc <__assert_fail@plt+0xb7c>
   11a48:	str	r3, [r2]
   11a4c:	b	11b2c <__assert_fail@plt+0x7cc>
   11a50:	ldr	r3, [pc, #1152]	; 11ed8 <__assert_fail@plt+0xb78>
   11a54:	ldr	r0, [r3]
   11a58:	sub	r2, fp, #56	; 0x38
   11a5c:	sub	r1, fp, #52	; 0x34
   11a60:	mov	r3, #0
   11a64:	str	r3, [sp]
   11a68:	mov	r3, #0
   11a6c:	bl	1b2a8 <__assert_fail@plt+0x9f48>
   11a70:	str	r0, [fp, #-32]	; 0xffffffe0
   11a74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a78:	cmp	r3, #0
   11a7c:	beq	11b2c <__assert_fail@plt+0x7cc>
   11a80:	ldr	r3, [pc, #1104]	; 11ed8 <__assert_fail@plt+0xb78>
   11a84:	ldr	r3, [r3]
   11a88:	mov	r0, r3
   11a8c:	bl	1ad80 <__assert_fail@plt+0x9a20>
   11a90:	mov	r3, r0
   11a94:	str	r3, [sp]
   11a98:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11a9c:	ldr	r2, [pc, #1084]	; 11ee0 <__assert_fail@plt+0xb80>
   11aa0:	mov	r1, #0
   11aa4:	mov	r0, #1
   11aa8:	bl	11168 <error@plt>
   11aac:	mov	r3, #1
   11ab0:	strb	r3, [fp, #-76]	; 0xffffffb4
   11ab4:	b	11b2c <__assert_fail@plt+0x7cc>
   11ab8:	mov	r3, #1
   11abc:	str	r3, [fp, #-80]	; 0xffffffb0
   11ac0:	b	11b2c <__assert_fail@plt+0x7cc>
   11ac4:	mov	r3, #1
   11ac8:	strb	r3, [fp, #-67]	; 0xffffffbd
   11acc:	b	11b2c <__assert_fail@plt+0x7cc>
   11ad0:	mov	r3, #0
   11ad4:	str	r3, [fp, #-80]	; 0xffffffb0
   11ad8:	b	11b2c <__assert_fail@plt+0x7cc>
   11adc:	mov	r0, #0
   11ae0:	bl	11638 <__assert_fail@plt+0x2d8>
   11ae4:	ldr	r3, [pc, #1016]	; 11ee4 <__assert_fail@plt+0xb84>
   11ae8:	ldr	r0, [r3]
   11aec:	ldr	r3, [pc, #1012]	; 11ee8 <__assert_fail@plt+0xb88>
   11af0:	ldr	r2, [r3]
   11af4:	mov	r3, #0
   11af8:	str	r3, [sp, #8]
   11afc:	ldr	r3, [pc, #1000]	; 11eec <__assert_fail@plt+0xb8c>
   11b00:	str	r3, [sp, #4]
   11b04:	ldr	r3, [pc, #996]	; 11ef0 <__assert_fail@plt+0xb90>
   11b08:	str	r3, [sp]
   11b0c:	mov	r3, r2
   11b10:	ldr	r2, [pc, #988]	; 11ef4 <__assert_fail@plt+0xb94>
   11b14:	ldr	r1, [pc, #988]	; 11ef8 <__assert_fail@plt+0xb98>
   11b18:	bl	1ba3c <__assert_fail@plt+0xa6dc>
   11b1c:	mov	r0, #0
   11b20:	bl	111c8 <exit@plt>
   11b24:	mov	r0, #1
   11b28:	bl	11638 <__assert_fail@plt+0x2d8>
   11b2c:	mov	r3, #0
   11b30:	str	r3, [sp]
   11b34:	ldr	r3, [pc, #960]	; 11efc <__assert_fail@plt+0xb9c>
   11b38:	ldr	r2, [pc, #960]	; 11f00 <__assert_fail@plt+0xba0>
   11b3c:	ldr	r1, [fp, #-196]	; 0xffffff3c
   11b40:	ldr	r0, [fp, #-192]	; 0xffffff40
   11b44:	bl	111b0 <getopt_long@plt>
   11b48:	str	r0, [fp, #-28]	; 0xffffffe4
   11b4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b50:	cmn	r3, #1
   11b54:	bne	11934 <__assert_fail@plt+0x5d4>
   11b58:	ldrb	r3, [fp, #-76]	; 0xffffffb4
   11b5c:	cmp	r3, #0
   11b60:	beq	11ba4 <__assert_fail@plt+0x844>
   11b64:	ldr	r3, [fp, #-20]	; 0xffffffec
   11b68:	cmp	r3, #16
   11b6c:	bne	11bac <__assert_fail@plt+0x84c>
   11b70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b74:	cmp	r3, #1
   11b78:	bne	11b98 <__assert_fail@plt+0x838>
   11b7c:	ldr	r0, [pc, #896]	; 11f04 <__assert_fail@plt+0xba4>
   11b80:	bl	111d4 <gettext@plt>
   11b84:	mov	r3, r0
   11b88:	mov	r2, r3
   11b8c:	mov	r1, #0
   11b90:	mov	r0, #1
   11b94:	bl	11168 <error@plt>
   11b98:	mov	r3, #0
   11b9c:	str	r3, [fp, #-24]	; 0xffffffe8
   11ba0:	b	11bac <__assert_fail@plt+0x84c>
   11ba4:	mov	r3, #16
   11ba8:	str	r3, [fp, #-20]	; 0xffffffec
   11bac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11bb0:	cmp	r3, #0
   11bb4:	movne	r3, #1
   11bb8:	moveq	r3, #0
   11bbc:	uxtb	r3, r3
   11bc0:	strb	r3, [fp, #-68]	; 0xffffffbc
   11bc4:	ldr	r3, [pc, #828]	; 11f08 <__assert_fail@plt+0xba8>
   11bc8:	ldr	r3, [r3]
   11bcc:	ldr	r2, [fp, #-192]	; 0xffffff40
   11bd0:	sub	r2, r2, r3
   11bd4:	ldr	r3, [pc, #768]	; 11edc <__assert_fail@plt+0xb7c>
   11bd8:	ldr	r3, [r3]
   11bdc:	cmp	r3, #0
   11be0:	beq	11bec <__assert_fail@plt+0x88c>
   11be4:	mov	r3, #1
   11be8:	b	11bf0 <__assert_fail@plt+0x890>
   11bec:	mov	r3, #2
   11bf0:	cmp	r2, r3
   11bf4:	bge	11c74 <__assert_fail@plt+0x914>
   11bf8:	ldr	r3, [pc, #776]	; 11f08 <__assert_fail@plt+0xba8>
   11bfc:	ldr	r3, [r3]
   11c00:	ldr	r2, [fp, #-192]	; 0xffffff40
   11c04:	cmp	r2, r3
   11c08:	bgt	11c2c <__assert_fail@plt+0x8cc>
   11c0c:	ldr	r0, [pc, #760]	; 11f0c <__assert_fail@plt+0xbac>
   11c10:	bl	111d4 <gettext@plt>
   11c14:	mov	r3, r0
   11c18:	mov	r2, r3
   11c1c:	mov	r1, #0
   11c20:	mov	r0, #0
   11c24:	bl	11168 <error@plt>
   11c28:	b	11c6c <__assert_fail@plt+0x90c>
   11c2c:	ldr	r0, [pc, #732]	; 11f10 <__assert_fail@plt+0xbb0>
   11c30:	bl	111d4 <gettext@plt>
   11c34:	mov	r4, r0
   11c38:	ldr	r3, [fp, #-192]	; 0xffffff40
   11c3c:	sub	r3, r3, #-1073741823	; 0xc0000001
   11c40:	lsl	r3, r3, #2
   11c44:	ldr	r2, [fp, #-196]	; 0xffffff3c
   11c48:	add	r3, r2, r3
   11c4c:	ldr	r3, [r3]
   11c50:	mov	r0, r3
   11c54:	bl	1ad80 <__assert_fail@plt+0x9a20>
   11c58:	mov	r3, r0
   11c5c:	mov	r2, r4
   11c60:	mov	r1, #0
   11c64:	mov	r0, #0
   11c68:	bl	11168 <error@plt>
   11c6c:	mov	r0, #1
   11c70:	bl	11638 <__assert_fail@plt+0x2d8>
   11c74:	ldr	r3, [pc, #608]	; 11edc <__assert_fail@plt+0xb7c>
   11c78:	ldr	r3, [r3]
   11c7c:	cmp	r3, #0
   11c80:	beq	11d24 <__assert_fail@plt+0x9c4>
   11c84:	ldr	r3, [pc, #592]	; 11edc <__assert_fail@plt+0xb7c>
   11c88:	ldr	r3, [r3]
   11c8c:	sub	r2, fp, #188	; 0xbc
   11c90:	mov	r1, r2
   11c94:	mov	r0, r3
   11c98:	bl	1eee4 <__assert_fail@plt+0xdb84>
   11c9c:	mov	r3, r0
   11ca0:	cmp	r3, #0
   11ca4:	beq	11ce8 <__assert_fail@plt+0x988>
   11ca8:	bl	11228 <__errno_location@plt>
   11cac:	mov	r3, r0
   11cb0:	ldr	r4, [r3]
   11cb4:	ldr	r0, [pc, #600]	; 11f14 <__assert_fail@plt+0xbb4>
   11cb8:	bl	111d4 <gettext@plt>
   11cbc:	mov	r5, r0
   11cc0:	ldr	r3, [pc, #532]	; 11edc <__assert_fail@plt+0xb7c>
   11cc4:	ldr	r3, [r3]
   11cc8:	mov	r1, r3
   11ccc:	mov	r0, #4
   11cd0:	bl	1a988 <__assert_fail@plt+0x9628>
   11cd4:	mov	r3, r0
   11cd8:	mov	r2, r5
   11cdc:	mov	r1, r4
   11ce0:	mov	r0, #1
   11ce4:	bl	11168 <error@plt>
   11ce8:	ldr	r3, [fp, #-164]	; 0xffffff5c
   11cec:	str	r3, [fp, #-44]	; 0xffffffd4
   11cf0:	ldr	r3, [fp, #-160]	; 0xffffff60
   11cf4:	str	r3, [fp, #-48]	; 0xffffffd0
   11cf8:	ldr	r3, [fp, #-164]	; 0xffffff5c
   11cfc:	mov	r0, r3
   11d00:	bl	12038 <__assert_fail@plt+0xcd8>
   11d04:	mov	r3, r0
   11d08:	str	r3, [fp, #-64]	; 0xffffffc0
   11d0c:	ldr	r3, [fp, #-160]	; 0xffffff60
   11d10:	mov	r0, r3
   11d14:	bl	11fd0 <__assert_fail@plt+0xc70>
   11d18:	mov	r3, r0
   11d1c:	str	r3, [fp, #-60]	; 0xffffffc4
   11d20:	b	11de8 <__assert_fail@plt+0xa88>
   11d24:	ldr	r3, [pc, #476]	; 11f08 <__assert_fail@plt+0xba8>
   11d28:	ldr	r3, [r3]
   11d2c:	lsl	r3, r3, #2
   11d30:	ldr	r2, [fp, #-196]	; 0xffffff3c
   11d34:	add	r3, r2, r3
   11d38:	ldr	r0, [r3]
   11d3c:	sub	r3, fp, #80	; 0x50
   11d40:	add	ip, r3, #16
   11d44:	sub	r2, fp, #48	; 0x30
   11d48:	sub	r1, fp, #44	; 0x2c
   11d4c:	sub	r3, fp, #80	; 0x50
   11d50:	add	r3, r3, #20
   11d54:	str	r3, [sp]
   11d58:	mov	r3, ip
   11d5c:	bl	1b2a8 <__assert_fail@plt+0x9f48>
   11d60:	str	r0, [fp, #-36]	; 0xffffffdc
   11d64:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11d68:	cmp	r3, #0
   11d6c:	beq	11dac <__assert_fail@plt+0xa4c>
   11d70:	ldr	r3, [pc, #400]	; 11f08 <__assert_fail@plt+0xba8>
   11d74:	ldr	r3, [r3]
   11d78:	lsl	r3, r3, #2
   11d7c:	ldr	r2, [fp, #-196]	; 0xffffff3c
   11d80:	add	r3, r2, r3
   11d84:	ldr	r3, [r3]
   11d88:	mov	r0, r3
   11d8c:	bl	1ad80 <__assert_fail@plt+0x9a20>
   11d90:	mov	r3, r0
   11d94:	str	r3, [sp]
   11d98:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11d9c:	ldr	r2, [pc, #316]	; 11ee0 <__assert_fail@plt+0xb80>
   11da0:	mov	r1, #0
   11da4:	mov	r0, #1
   11da8:	bl	11168 <error@plt>
   11dac:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11db0:	cmp	r3, #0
   11db4:	bne	11dd4 <__assert_fail@plt+0xa74>
   11db8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11dbc:	cmp	r3, #0
   11dc0:	beq	11dd4 <__assert_fail@plt+0xa74>
   11dc4:	ldr	r0, [pc, #244]	; 11ec0 <__assert_fail@plt+0xb60>
   11dc8:	bl	1c668 <__assert_fail@plt+0xb308>
   11dcc:	mov	r3, r0
   11dd0:	str	r3, [fp, #-64]	; 0xffffffc0
   11dd4:	ldr	r3, [pc, #300]	; 11f08 <__assert_fail@plt+0xba8>
   11dd8:	ldr	r3, [r3]
   11ddc:	add	r3, r3, #1
   11de0:	ldr	r2, [pc, #288]	; 11f08 <__assert_fail@plt+0xba8>
   11de4:	str	r3, [r2]
   11de8:	ldrb	r3, [fp, #-76]	; 0xffffffb4
   11dec:	cmp	r3, #0
   11df0:	beq	11e54 <__assert_fail@plt+0xaf4>
   11df4:	ldrb	r3, [fp, #-13]
   11df8:	cmp	r3, #0
   11dfc:	beq	11e54 <__assert_fail@plt+0xaf4>
   11e00:	ldr	r0, [pc, #272]	; 11f18 <__assert_fail@plt+0xbb8>
   11e04:	bl	1adac <__assert_fail@plt+0x9a4c>
   11e08:	mov	r3, r0
   11e0c:	str	r3, [fp, #-72]	; 0xffffffb8
   11e10:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11e14:	cmp	r3, #0
   11e18:	bne	11e54 <__assert_fail@plt+0xaf4>
   11e1c:	bl	11228 <__errno_location@plt>
   11e20:	mov	r3, r0
   11e24:	ldr	r4, [r3]
   11e28:	ldr	r0, [pc, #228]	; 11f14 <__assert_fail@plt+0xbb4>
   11e2c:	bl	111d4 <gettext@plt>
   11e30:	mov	r5, r0
   11e34:	ldr	r1, [pc, #224]	; 11f1c <__assert_fail@plt+0xbbc>
   11e38:	mov	r0, #4
   11e3c:	bl	1a988 <__assert_fail@plt+0x9628>
   11e40:	mov	r3, r0
   11e44:	mov	r2, r5
   11e48:	mov	r1, r4
   11e4c:	mov	r0, #1
   11e50:	bl	11168 <error@plt>
   11e54:	ldr	r3, [fp, #-20]	; 0xffffffec
   11e58:	orr	r3, r3, #1024	; 0x400
   11e5c:	str	r3, [fp, #-20]	; 0xffffffec
   11e60:	ldr	r3, [pc, #160]	; 11f08 <__assert_fail@plt+0xba8>
   11e64:	ldr	r3, [r3]
   11e68:	lsl	r3, r3, #2
   11e6c:	ldr	r2, [fp, #-196]	; 0xffffff3c
   11e70:	add	r0, r2, r3
   11e74:	ldr	ip, [fp, #-44]	; 0xffffffd4
   11e78:	ldr	lr, [fp, #-48]	; 0xffffffd0
   11e7c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11e80:	ldr	r2, [fp, #-56]	; 0xffffffc8
   11e84:	sub	r1, fp, #80	; 0x50
   11e88:	str	r1, [sp, #8]
   11e8c:	str	r2, [sp, #4]
   11e90:	str	r3, [sp]
   11e94:	mov	r3, lr
   11e98:	mov	r2, ip
   11e9c:	ldr	r1, [fp, #-20]	; 0xffffffec
   11ea0:	bl	1309c <__assert_fail@plt+0x1d3c>
   11ea4:	mov	r3, r0
   11ea8:	strb	r3, [fp, #-37]	; 0xffffffdb
   11eac:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11eb0:	eor	r3, r3, #1
   11eb4:	uxtb	r3, r3
   11eb8:	mov	r0, r3
   11ebc:	bl	111c8 <exit@plt>
   11ec0:	andeq	pc, r1, r0, asr #32
   11ec4:	andeq	pc, r1, r8, lsl ip	; <UNPREDICTABLE>
   11ec8:	andeq	pc, r1, r8, asr r0	; <UNPREDICTABLE>
   11ecc:	andeq	r3, r1, r8, asr #6
   11ed0:	andeq	r0, r0, r1, lsl #2
   11ed4:	andeq	r0, r0, r3, lsl #2
   11ed8:	andeq	r1, r3, r8, lsr #3
   11edc:			; <UNDEFINED> instruction: 0x000311b0
   11ee0:	andeq	pc, r1, r0, lsr ip	; <UNPREDICTABLE>
   11ee4:	andeq	r1, r3, r4, lsr #3
   11ee8:	andeq	r1, r3, ip, lsr r1
   11eec:	andeq	pc, r1, r8, lsr ip	; <UNPREDICTABLE>
   11ef0:	andeq	pc, r1, r8, asr #24
   11ef4:	andeq	lr, r1, r8, lsl #31
   11ef8:	andeq	pc, r1, r0, lsl ip	; <UNPREDICTABLE>
   11efc:	andeq	pc, r1, r4, lsl #3
   11f00:	andeq	pc, r1, r8, asr ip	; <UNPREDICTABLE>
   11f04:	andeq	pc, r1, r4, ror #24
   11f08:	muleq	r3, r8, r1
   11f0c:	muleq	r1, r0, ip
   11f10:	andeq	pc, r1, r0, lsr #25
   11f14:			; <UNDEFINED> instruction: 0x0001fcbc
   11f18:			; <UNDEFINED> instruction: 0x000311b8
   11f1c:	ldrdeq	pc, [r1], -ip
   11f20:	push	{fp}		; (str fp, [sp, #-4]!)
   11f24:	add	fp, sp, #0
   11f28:	sub	sp, sp, #12
   11f2c:	str	r0, [fp, #-8]
   11f30:	ldr	r3, [fp, #-8]
   11f34:	mov	r2, #2
   11f38:	str	r2, [r3]
   11f3c:	ldr	r3, [fp, #-8]
   11f40:	mov	r2, #0
   11f44:	str	r2, [r3, #8]
   11f48:	ldr	r3, [fp, #-8]
   11f4c:	mov	r2, #1
   11f50:	strb	r2, [r3, #12]
   11f54:	ldr	r3, [fp, #-8]
   11f58:	mov	r2, #0
   11f5c:	strb	r2, [r3, #4]
   11f60:	ldr	r3, [fp, #-8]
   11f64:	mov	r2, #0
   11f68:	strb	r2, [r3, #13]
   11f6c:	ldr	r3, [fp, #-8]
   11f70:	mov	r2, #0
   11f74:	str	r2, [r3, #16]
   11f78:	ldr	r3, [fp, #-8]
   11f7c:	mov	r2, #0
   11f80:	str	r2, [r3, #20]
   11f84:	nop			; (mov r0, r0)
   11f88:	add	sp, fp, #0
   11f8c:	pop	{fp}		; (ldr fp, [sp], #4)
   11f90:	bx	lr
   11f94:	push	{fp, lr}
   11f98:	add	fp, sp, #4
   11f9c:	sub	sp, sp, #8
   11fa0:	str	r0, [fp, #-8]
   11fa4:	ldr	r3, [fp, #-8]
   11fa8:	ldr	r3, [r3, #16]
   11fac:	mov	r0, r3
   11fb0:	bl	1347c <__assert_fail@plt+0x211c>
   11fb4:	ldr	r3, [fp, #-8]
   11fb8:	ldr	r3, [r3, #20]
   11fbc:	mov	r0, r3
   11fc0:	bl	1347c <__assert_fail@plt+0x211c>
   11fc4:	nop			; (mov r0, r0)
   11fc8:	sub	sp, fp, #4
   11fcc:	pop	{fp, pc}
   11fd0:	push	{fp, lr}
   11fd4:	add	fp, sp, #4
   11fd8:	sub	sp, sp, #40	; 0x28
   11fdc:	str	r0, [fp, #-40]	; 0xffffffd8
   11fe0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11fe4:	bl	11348 <getgrgid@plt>
   11fe8:	str	r0, [fp, #-8]
   11fec:	ldr	r3, [fp, #-8]
   11ff0:	cmp	r3, #0
   11ff4:	beq	12004 <__assert_fail@plt+0xca4>
   11ff8:	ldr	r3, [fp, #-8]
   11ffc:	ldr	r3, [r3]
   12000:	b	12020 <__assert_fail@plt+0xcc0>
   12004:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12008:	mov	r0, r3
   1200c:	mov	r1, #0
   12010:	sub	r3, fp, #32
   12014:	mov	r2, r3
   12018:	bl	18484 <__assert_fail@plt+0x7124>
   1201c:	mov	r3, r0
   12020:	mov	r0, r3
   12024:	bl	1c668 <__assert_fail@plt+0xb308>
   12028:	mov	r3, r0
   1202c:	mov	r0, r3
   12030:	sub	sp, fp, #4
   12034:	pop	{fp, pc}
   12038:	push	{fp, lr}
   1203c:	add	fp, sp, #4
   12040:	sub	sp, sp, #40	; 0x28
   12044:	str	r0, [fp, #-40]	; 0xffffffd8
   12048:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1204c:	bl	11054 <getpwuid@plt>
   12050:	str	r0, [fp, #-8]
   12054:	ldr	r3, [fp, #-8]
   12058:	cmp	r3, #0
   1205c:	beq	1206c <__assert_fail@plt+0xd0c>
   12060:	ldr	r3, [fp, #-8]
   12064:	ldr	r3, [r3]
   12068:	b	12088 <__assert_fail@plt+0xd28>
   1206c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12070:	mov	r0, r3
   12074:	mov	r1, #0
   12078:	sub	r3, fp, #32
   1207c:	mov	r2, r3
   12080:	bl	18484 <__assert_fail@plt+0x7124>
   12084:	mov	r3, r0
   12088:	mov	r0, r3
   1208c:	bl	1c668 <__assert_fail@plt+0xb308>
   12090:	mov	r3, r0
   12094:	mov	r0, r3
   12098:	sub	sp, fp, #4
   1209c:	pop	{fp, pc}
   120a0:	push	{r4, fp, lr}
   120a4:	add	fp, sp, #8
   120a8:	sub	sp, sp, #20
   120ac:	str	r0, [fp, #-24]	; 0xffffffe8
   120b0:	str	r1, [fp, #-28]	; 0xffffffe4
   120b4:	mov	r3, #0
   120b8:	str	r3, [fp, #-16]
   120bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   120c0:	cmp	r3, #0
   120c4:	beq	1214c <__assert_fail@plt+0xdec>
   120c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   120cc:	cmp	r3, #0
   120d0:	beq	12138 <__assert_fail@plt+0xdd8>
   120d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   120d8:	bl	111ec <strlen@plt>
   120dc:	mov	r4, r0
   120e0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   120e4:	bl	111ec <strlen@plt>
   120e8:	mov	r3, r0
   120ec:	add	r3, r4, r3
   120f0:	add	r3, r3, #2
   120f4:	mov	r0, r3
   120f8:	bl	1bb88 <__assert_fail@plt+0xa828>
   120fc:	mov	r3, r0
   12100:	str	r3, [fp, #-16]
   12104:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12108:	ldr	r0, [fp, #-16]
   1210c:	bl	110c0 <stpcpy@plt>
   12110:	mov	r2, r0
   12114:	ldr	r3, [pc, #92]	; 12178 <__assert_fail@plt+0xe18>
   12118:	mov	r1, r2
   1211c:	ldrh	r3, [r3]
   12120:	strh	r3, [r1]
   12124:	add	r3, r2, #1
   12128:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1212c:	mov	r0, r3
   12130:	bl	11138 <strcpy@plt>
   12134:	b	12168 <__assert_fail@plt+0xe08>
   12138:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1213c:	bl	1c668 <__assert_fail@plt+0xb308>
   12140:	mov	r3, r0
   12144:	str	r3, [fp, #-16]
   12148:	b	12168 <__assert_fail@plt+0xe08>
   1214c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12150:	cmp	r3, #0
   12154:	beq	12168 <__assert_fail@plt+0xe08>
   12158:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1215c:	bl	1c668 <__assert_fail@plt+0xb308>
   12160:	mov	r3, r0
   12164:	str	r3, [fp, #-16]
   12168:	ldr	r3, [fp, #-16]
   1216c:	mov	r0, r3
   12170:	sub	sp, fp, #8
   12174:	pop	{r4, fp, pc}
   12178:	andeq	pc, r1, r0, ror #25
   1217c:	push	{r4, fp, lr}
   12180:	add	fp, sp, #8
   12184:	sub	sp, sp, #36	; 0x24
   12188:	str	r0, [fp, #-32]	; 0xffffffe0
   1218c:	str	r1, [fp, #-36]	; 0xffffffdc
   12190:	str	r2, [fp, #-40]	; 0xffffffd8
   12194:	str	r3, [fp, #-44]	; 0xffffffd4
   12198:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1219c:	cmp	r3, #1
   121a0:	bne	121d0 <__assert_fail@plt+0xe70>
   121a4:	ldr	r0, [pc, #544]	; 123cc <__assert_fail@plt+0x106c>
   121a8:	bl	111d4 <gettext@plt>
   121ac:	mov	r4, r0
   121b0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   121b4:	mov	r0, #4
   121b8:	bl	1a988 <__assert_fail@plt+0x9628>
   121bc:	mov	r3, r0
   121c0:	mov	r1, r3
   121c4:	mov	r0, r4
   121c8:	bl	11060 <printf@plt>
   121cc:	b	123c4 <__assert_fail@plt+0x1064>
   121d0:	ldr	r1, [fp, #8]
   121d4:	ldr	r0, [fp, #4]
   121d8:	bl	120a0 <__assert_fail@plt+0xd40>
   121dc:	str	r0, [fp, #-24]	; 0xffffffe8
   121e0:	ldr	r3, [fp, #4]
   121e4:	cmp	r3, #0
   121e8:	beq	121f4 <__assert_fail@plt+0xe94>
   121ec:	ldr	r2, [fp, #-40]	; 0xffffffd8
   121f0:	b	121f8 <__assert_fail@plt+0xe98>
   121f4:	mov	r2, #0
   121f8:	ldr	r3, [fp, #8]
   121fc:	cmp	r3, #0
   12200:	beq	1220c <__assert_fail@plt+0xeac>
   12204:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12208:	b	12210 <__assert_fail@plt+0xeb0>
   1220c:	mov	r3, #0
   12210:	mov	r1, r3
   12214:	mov	r0, r2
   12218:	bl	120a0 <__assert_fail@plt+0xd40>
   1221c:	str	r0, [fp, #-20]	; 0xffffffec
   12220:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12224:	cmp	r3, #3
   12228:	beq	12288 <__assert_fail@plt+0xf28>
   1222c:	cmp	r3, #4
   12230:	beq	12344 <__assert_fail@plt+0xfe4>
   12234:	cmp	r3, #2
   12238:	bne	12390 <__assert_fail@plt+0x1030>
   1223c:	ldr	r3, [fp, #4]
   12240:	cmp	r3, #0
   12244:	beq	12258 <__assert_fail@plt+0xef8>
   12248:	ldr	r0, [pc, #384]	; 123d0 <__assert_fail@plt+0x1070>
   1224c:	bl	111d4 <gettext@plt>
   12250:	mov	r3, r0
   12254:	b	12280 <__assert_fail@plt+0xf20>
   12258:	ldr	r3, [fp, #8]
   1225c:	cmp	r3, #0
   12260:	beq	12274 <__assert_fail@plt+0xf14>
   12264:	ldr	r0, [pc, #360]	; 123d4 <__assert_fail@plt+0x1074>
   12268:	bl	111d4 <gettext@plt>
   1226c:	mov	r3, r0
   12270:	b	12280 <__assert_fail@plt+0xf20>
   12274:	ldr	r0, [pc, #348]	; 123d8 <__assert_fail@plt+0x1078>
   12278:	bl	111d4 <gettext@plt>
   1227c:	mov	r3, r0
   12280:	str	r3, [fp, #-16]
   12284:	b	12394 <__assert_fail@plt+0x1034>
   12288:	ldr	r3, [fp, #-20]	; 0xffffffec
   1228c:	cmp	r3, #0
   12290:	beq	122e0 <__assert_fail@plt+0xf80>
   12294:	ldr	r3, [fp, #4]
   12298:	cmp	r3, #0
   1229c:	beq	122b0 <__assert_fail@plt+0xf50>
   122a0:	ldr	r0, [pc, #308]	; 123dc <__assert_fail@plt+0x107c>
   122a4:	bl	111d4 <gettext@plt>
   122a8:	mov	r3, r0
   122ac:	b	122d8 <__assert_fail@plt+0xf78>
   122b0:	ldr	r3, [fp, #8]
   122b4:	cmp	r3, #0
   122b8:	beq	122cc <__assert_fail@plt+0xf6c>
   122bc:	ldr	r0, [pc, #284]	; 123e0 <__assert_fail@plt+0x1080>
   122c0:	bl	111d4 <gettext@plt>
   122c4:	mov	r3, r0
   122c8:	b	122d8 <__assert_fail@plt+0xf78>
   122cc:	ldr	r0, [pc, #272]	; 123e4 <__assert_fail@plt+0x1084>
   122d0:	bl	111d4 <gettext@plt>
   122d4:	mov	r3, r0
   122d8:	str	r3, [fp, #-16]
   122dc:	b	12394 <__assert_fail@plt+0x1034>
   122e0:	ldr	r3, [fp, #4]
   122e4:	cmp	r3, #0
   122e8:	beq	122fc <__assert_fail@plt+0xf9c>
   122ec:	ldr	r0, [pc, #244]	; 123e8 <__assert_fail@plt+0x1088>
   122f0:	bl	111d4 <gettext@plt>
   122f4:	mov	r3, r0
   122f8:	b	12324 <__assert_fail@plt+0xfc4>
   122fc:	ldr	r3, [fp, #8]
   12300:	cmp	r3, #0
   12304:	beq	12318 <__assert_fail@plt+0xfb8>
   12308:	ldr	r0, [pc, #220]	; 123ec <__assert_fail@plt+0x108c>
   1230c:	bl	111d4 <gettext@plt>
   12310:	mov	r3, r0
   12314:	b	12324 <__assert_fail@plt+0xfc4>
   12318:	ldr	r0, [pc, #196]	; 123e4 <__assert_fail@plt+0x1084>
   1231c:	bl	111d4 <gettext@plt>
   12320:	mov	r3, r0
   12324:	str	r3, [fp, #-16]
   12328:	ldr	r0, [fp, #-20]	; 0xffffffec
   1232c:	bl	1347c <__assert_fail@plt+0x211c>
   12330:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12334:	str	r3, [fp, #-20]	; 0xffffffec
   12338:	mov	r3, #0
   1233c:	str	r3, [fp, #-24]	; 0xffffffe8
   12340:	b	12394 <__assert_fail@plt+0x1034>
   12344:	ldr	r3, [fp, #4]
   12348:	cmp	r3, #0
   1234c:	beq	12360 <__assert_fail@plt+0x1000>
   12350:	ldr	r0, [pc, #152]	; 123f0 <__assert_fail@plt+0x1090>
   12354:	bl	111d4 <gettext@plt>
   12358:	mov	r3, r0
   1235c:	b	12388 <__assert_fail@plt+0x1028>
   12360:	ldr	r3, [fp, #8]
   12364:	cmp	r3, #0
   12368:	beq	1237c <__assert_fail@plt+0x101c>
   1236c:	ldr	r0, [pc, #128]	; 123f4 <__assert_fail@plt+0x1094>
   12370:	bl	111d4 <gettext@plt>
   12374:	mov	r3, r0
   12378:	b	12388 <__assert_fail@plt+0x1028>
   1237c:	ldr	r0, [pc, #116]	; 123f8 <__assert_fail@plt+0x1098>
   12380:	bl	111d4 <gettext@plt>
   12384:	mov	r3, r0
   12388:	str	r3, [fp, #-16]
   1238c:	b	12394 <__assert_fail@plt+0x1034>
   12390:	bl	11318 <abort@plt>
   12394:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12398:	mov	r0, #4
   1239c:	bl	1a988 <__assert_fail@plt+0x9628>
   123a0:	mov	r1, r0
   123a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   123a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   123ac:	ldr	r0, [fp, #-16]
   123b0:	bl	11060 <printf@plt>
   123b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   123b8:	bl	1347c <__assert_fail@plt+0x211c>
   123bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   123c0:	bl	1347c <__assert_fail@plt+0x211c>
   123c4:	sub	sp, fp, #8
   123c8:	pop	{r4, fp, pc}
   123cc:	andeq	pc, r1, r4, ror #25
   123d0:	andeq	pc, r1, ip, lsl sp	; <UNPREDICTABLE>
   123d4:	andeq	pc, r1, r4, asr #26
   123d8:	andeq	pc, r1, r8, ror #26
   123dc:	andeq	pc, r1, r8, lsl #27
   123e0:			; <UNDEFINED> instruction: 0x0001fdb8
   123e4:	andeq	pc, r1, r4, ror #27
   123e8:	andeq	pc, r1, r8, lsl #28
   123ec:	andeq	pc, r1, r0, lsr lr	; <UNPREDICTABLE>
   123f0:	andeq	pc, r1, r4, asr lr	; <UNPREDICTABLE>
   123f4:	andeq	pc, r1, r4, ror lr	; <UNPREDICTABLE>
   123f8:	muleq	r1, r0, lr
   123fc:	push	{fp, lr}
   12400:	add	fp, sp, #4
   12404:	sub	sp, sp, #136	; 0x88
   12408:	str	r0, [fp, #-128]	; 0xffffff80
   1240c:	str	r1, [fp, #-132]	; 0xffffff7c
   12410:	str	r2, [fp, #-136]	; 0xffffff78
   12414:	str	r3, [fp, #-140]	; 0xffffff74
   12418:	mov	r3, #2
   1241c:	str	r3, [fp, #-8]
   12420:	mov	r3, #2304	; 0x900
   12424:	str	r3, [fp, #-12]
   12428:	ldr	r3, [fp, #8]
   1242c:	cmn	r3, #1
   12430:	bne	12448 <__assert_fail@plt+0x10e8>
   12434:	ldr	r3, [fp, #12]
   12438:	cmn	r3, #1
   1243c:	bne	12448 <__assert_fail@plt+0x10e8>
   12440:	mov	r3, #5
   12444:	b	12634 <__assert_fail@plt+0x12d4>
   12448:	ldr	r3, [fp, #-136]	; 0xffffff78
   1244c:	ldr	r3, [r3, #16]
   12450:	and	r3, r3, #61440	; 0xf000
   12454:	cmp	r3, #32768	; 0x8000
   12458:	beq	12488 <__assert_fail@plt+0x1128>
   1245c:	ldr	r3, [fp, #-136]	; 0xffffff78
   12460:	ldr	r3, [r3, #16]
   12464:	and	r3, r3, #61440	; 0xf000
   12468:	cmp	r3, #16384	; 0x4000
   1246c:	bne	12480 <__assert_fail@plt+0x1120>
   12470:	ldr	r3, [fp, #-12]
   12474:	orr	r3, r3, #16384	; 0x4000
   12478:	str	r3, [fp, #-12]
   1247c:	b	12488 <__assert_fail@plt+0x1128>
   12480:	mov	r3, #5
   12484:	b	12634 <__assert_fail@plt+0x12d4>
   12488:	ldr	r2, [fp, #-12]
   1248c:	ldr	r1, [fp, #-132]	; 0xffffff7c
   12490:	ldr	r0, [fp, #-128]	; 0xffffff80
   12494:	bl	11204 <openat64@plt>
   12498:	str	r0, [fp, #-16]
   1249c:	ldr	r3, [fp, #-16]
   124a0:	cmp	r3, #0
   124a4:	bge	1251c <__assert_fail@plt+0x11bc>
   124a8:	bl	11228 <__errno_location@plt>
   124ac:	mov	r3, r0
   124b0:	ldr	r3, [r3]
   124b4:	cmp	r3, #13
   124b8:	bne	124f8 <__assert_fail@plt+0x1198>
   124bc:	ldr	r3, [fp, #-136]	; 0xffffff78
   124c0:	ldr	r3, [r3, #16]
   124c4:	and	r3, r3, #61440	; 0xf000
   124c8:	cmp	r3, #32768	; 0x8000
   124cc:	bne	124f8 <__assert_fail@plt+0x1198>
   124d0:	ldr	r3, [fp, #-12]
   124d4:	orr	r3, r3, #1
   124d8:	mov	r2, r3
   124dc:	ldr	r1, [fp, #-132]	; 0xffffff7c
   124e0:	ldr	r0, [fp, #-128]	; 0xffffff80
   124e4:	bl	11204 <openat64@plt>
   124e8:	str	r0, [fp, #-16]
   124ec:	ldr	r3, [fp, #-16]
   124f0:	cmp	r3, #0
   124f4:	bge	1251c <__assert_fail@plt+0x11bc>
   124f8:	bl	11228 <__errno_location@plt>
   124fc:	mov	r3, r0
   12500:	ldr	r3, [r3]
   12504:	cmp	r3, #13
   12508:	bne	12514 <__assert_fail@plt+0x11b4>
   1250c:	mov	r3, #5
   12510:	b	12634 <__assert_fail@plt+0x12d4>
   12514:	mov	r3, #6
   12518:	b	12634 <__assert_fail@plt+0x12d4>
   1251c:	sub	r3, fp, #124	; 0x7c
   12520:	mov	r1, r3
   12524:	ldr	r0, [fp, #-16]
   12528:	bl	1eef4 <__assert_fail@plt+0xdb94>
   1252c:	mov	r3, r0
   12530:	cmp	r3, #0
   12534:	beq	12544 <__assert_fail@plt+0x11e4>
   12538:	mov	r3, #6
   1253c:	str	r3, [fp, #-8]
   12540:	b	12608 <__assert_fail@plt+0x12a8>
   12544:	ldr	r3, [fp, #-136]	; 0xffffff78
   12548:	ldrd	r0, [r3, #96]	; 0x60
   1254c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12550:	cmp	r1, r3
   12554:	cmpeq	r0, r2
   12558:	bne	12574 <__assert_fail@plt+0x1214>
   1255c:	ldr	r3, [fp, #-136]	; 0xffffff78
   12560:	ldrd	r0, [r3]
   12564:	ldrd	r2, [fp, #-124]	; 0xffffff84
   12568:	cmp	r1, r3
   1256c:	cmpeq	r0, r2
   12570:	beq	12580 <__assert_fail@plt+0x1220>
   12574:	mov	r3, #4
   12578:	str	r3, [fp, #-8]
   1257c:	b	12608 <__assert_fail@plt+0x12a8>
   12580:	ldr	r3, [fp, #8]
   12584:	cmn	r3, #1
   12588:	beq	1259c <__assert_fail@plt+0x123c>
   1258c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12590:	ldr	r3, [fp, #8]
   12594:	cmp	r2, r3
   12598:	bne	12608 <__assert_fail@plt+0x12a8>
   1259c:	ldr	r3, [fp, #12]
   125a0:	cmn	r3, #1
   125a4:	beq	125b8 <__assert_fail@plt+0x1258>
   125a8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   125ac:	ldr	r3, [fp, #12]
   125b0:	cmp	r2, r3
   125b4:	bne	12608 <__assert_fail@plt+0x12a8>
   125b8:	ldr	r2, [fp, #4]
   125bc:	ldr	r1, [fp, #-140]	; 0xffffff74
   125c0:	ldr	r0, [fp, #-16]
   125c4:	bl	11210 <fchown@plt>
   125c8:	mov	r3, r0
   125cc:	cmp	r3, #0
   125d0:	bne	12600 <__assert_fail@plt+0x12a0>
   125d4:	ldr	r0, [fp, #-16]
   125d8:	bl	11324 <close@plt>
   125dc:	mov	r3, r0
   125e0:	cmp	r3, #0
   125e4:	bne	125f0 <__assert_fail@plt+0x1290>
   125e8:	mov	r3, #2
   125ec:	b	125f4 <__assert_fail@plt+0x1294>
   125f0:	mov	r3, #6
   125f4:	str	r3, [fp, #-8]
   125f8:	ldr	r3, [fp, #-8]
   125fc:	b	12634 <__assert_fail@plt+0x12d4>
   12600:	mov	r3, #6
   12604:	str	r3, [fp, #-8]
   12608:	bl	11228 <__errno_location@plt>
   1260c:	mov	r3, r0
   12610:	ldr	r3, [r3]
   12614:	str	r3, [fp, #-20]	; 0xffffffec
   12618:	ldr	r0, [fp, #-16]
   1261c:	bl	11324 <close@plt>
   12620:	bl	11228 <__errno_location@plt>
   12624:	mov	r2, r0
   12628:	ldr	r3, [fp, #-20]	; 0xffffffec
   1262c:	str	r3, [r2]
   12630:	ldr	r3, [fp, #-8]
   12634:	mov	r0, r3
   12638:	sub	sp, fp, #4
   1263c:	pop	{fp, pc}
   12640:	push	{r4, r5, fp, lr}
   12644:	add	fp, sp, #12
   12648:	sub	sp, sp, #176	; 0xb0
   1264c:	str	r0, [fp, #-160]	; 0xffffff60
   12650:	str	r1, [fp, #-164]	; 0xffffff5c
   12654:	str	r2, [fp, #-168]	; 0xffffff58
   12658:	str	r3, [fp, #-172]	; 0xffffff54
   1265c:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12660:	ldr	r3, [r3, #28]
   12664:	str	r3, [fp, #-24]	; 0xffffffe8
   12668:	ldr	r3, [fp, #-164]	; 0xffffff5c
   1266c:	ldr	r3, [r3, #24]
   12670:	str	r3, [fp, #-28]	; 0xffffffe4
   12674:	mov	r3, #1
   12678:	strb	r3, [fp, #-17]	; 0xffffffef
   1267c:	mov	r3, #1
   12680:	strb	r3, [fp, #-19]	; 0xffffffed
   12684:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12688:	ldrh	r3, [r3, #56]	; 0x38
   1268c:	sub	r3, r3, #1
   12690:	cmp	r3, #9
   12694:	ldrls	pc, [pc, r3, lsl #2]
   12698:	b	129b4 <__assert_fail@plt+0x1654>
   1269c:	andeq	r2, r1, r4, asr #13
   126a0:	andeq	r2, r1, r4, ror #18
   126a4:			; <UNDEFINED> instruction: 0x000129b4
   126a8:	andeq	r2, r1, ip, lsl #18
   126ac:			; <UNDEFINED> instruction: 0x000129b4
   126b0:	andeq	r2, r1, r0, lsl #16
   126b4:			; <UNDEFINED> instruction: 0x000128bc
   126b8:			; <UNDEFINED> instruction: 0x000129b4
   126bc:			; <UNDEFINED> instruction: 0x000129b4
   126c0:	andeq	r2, r1, r0, lsr #16
   126c4:	ldr	r3, [fp, #12]
   126c8:	ldrb	r3, [r3, #4]
   126cc:	cmp	r3, #0
   126d0:	beq	129bc <__assert_fail@plt+0x165c>
   126d4:	ldr	r3, [fp, #12]
   126d8:	ldr	r3, [r3, #8]
   126dc:	cmp	r3, #0
   126e0:	beq	127f8 <__assert_fail@plt+0x1498>
   126e4:	ldr	r3, [fp, #-164]	; 0xffffff5c
   126e8:	ldrd	r0, [r3, #160]	; 0xa0
   126ec:	ldr	r3, [fp, #12]
   126f0:	ldr	r3, [r3, #8]
   126f4:	ldrd	r2, [r3]
   126f8:	cmp	r1, r3
   126fc:	cmpeq	r0, r2
   12700:	bne	127f8 <__assert_fail@plt+0x1498>
   12704:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12708:	ldrd	r0, [r3, #64]	; 0x40
   1270c:	ldr	r3, [fp, #12]
   12710:	ldr	r3, [r3, #8]
   12714:	ldrd	r2, [r3, #8]
   12718:	cmp	r1, r3
   1271c:	cmpeq	r0, r2
   12720:	bne	127f8 <__assert_fail@plt+0x1498>
   12724:	ldr	r1, [pc, #2372]	; 13070 <__assert_fail@plt+0x1d10>
   12728:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1272c:	bl	11048 <strcmp@plt>
   12730:	mov	r3, r0
   12734:	cmp	r3, #0
   12738:	bne	1276c <__assert_fail@plt+0x140c>
   1273c:	ldr	r0, [pc, #2352]	; 13074 <__assert_fail@plt+0x1d14>
   12740:	bl	111d4 <gettext@plt>
   12744:	mov	r4, r0
   12748:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1274c:	mov	r0, #4
   12750:	bl	1a988 <__assert_fail@plt+0x9628>
   12754:	mov	r3, r0
   12758:	mov	r2, r4
   1275c:	mov	r1, #0
   12760:	mov	r0, #0
   12764:	bl	11168 <error@plt>
   12768:	b	127b8 <__assert_fail@plt+0x1458>
   1276c:	ldr	r0, [pc, #2308]	; 13078 <__assert_fail@plt+0x1d18>
   12770:	bl	111d4 <gettext@plt>
   12774:	mov	r4, r0
   12778:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1277c:	mov	r1, #4
   12780:	mov	r0, #0
   12784:	bl	1a8ec <__assert_fail@plt+0x958c>
   12788:	mov	r5, r0
   1278c:	ldr	r2, [pc, #2268]	; 13070 <__assert_fail@plt+0x1d10>
   12790:	mov	r1, #4
   12794:	mov	r0, #1
   12798:	bl	1a8ec <__assert_fail@plt+0x958c>
   1279c:	mov	r3, r0
   127a0:	str	r3, [sp]
   127a4:	mov	r3, r5
   127a8:	mov	r2, r4
   127ac:	mov	r1, #0
   127b0:	mov	r0, #0
   127b4:	bl	11168 <error@plt>
   127b8:	ldr	r0, [pc, #2236]	; 1307c <__assert_fail@plt+0x1d1c>
   127bc:	bl	111d4 <gettext@plt>
   127c0:	mov	r3, r0
   127c4:	mov	r2, r3
   127c8:	mov	r1, #0
   127cc:	mov	r0, #0
   127d0:	bl	11168 <error@plt>
   127d4:	mov	r2, #4
   127d8:	ldr	r1, [fp, #-164]	; 0xffffff5c
   127dc:	ldr	r0, [fp, #-160]	; 0xffffff60
   127e0:	bl	14e44 <__assert_fail@plt+0x3ae4>
   127e4:	ldr	r0, [fp, #-160]	; 0xffffff60
   127e8:	bl	146d0 <__assert_fail@plt+0x3370>
   127ec:	str	r0, [fp, #-32]	; 0xffffffe0
   127f0:	mov	r3, #0
   127f4:	b	13064 <__assert_fail@plt+0x1d04>
   127f8:	mov	r3, #1
   127fc:	b	13064 <__assert_fail@plt+0x1d04>
   12800:	ldr	r3, [fp, #12]
   12804:	ldrb	r3, [r3, #4]
   12808:	eor	r3, r3, #1
   1280c:	uxtb	r3, r3
   12810:	cmp	r3, #0
   12814:	beq	129c4 <__assert_fail@plt+0x1664>
   12818:	mov	r3, #1
   1281c:	b	13064 <__assert_fail@plt+0x1d04>
   12820:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12824:	ldr	r3, [r3, #48]	; 0x30
   12828:	cmp	r3, #0
   1282c:	bne	12864 <__assert_fail@plt+0x1504>
   12830:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12834:	ldr	r3, [r3, #16]
   12838:	cmp	r3, #0
   1283c:	bne	12864 <__assert_fail@plt+0x1504>
   12840:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12844:	mov	r2, #1
   12848:	str	r2, [r3, #16]
   1284c:	mov	r2, #1
   12850:	ldr	r1, [fp, #-164]	; 0xffffff5c
   12854:	ldr	r0, [fp, #-160]	; 0xffffff60
   12858:	bl	14e44 <__assert_fail@plt+0x3ae4>
   1285c:	mov	r3, #1
   12860:	b	13064 <__assert_fail@plt+0x1d04>
   12864:	ldr	r3, [fp, #12]
   12868:	ldrb	r3, [r3, #13]
   1286c:	eor	r3, r3, #1
   12870:	uxtb	r3, r3
   12874:	cmp	r3, #0
   12878:	beq	128b0 <__assert_fail@plt+0x1550>
   1287c:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12880:	ldr	r4, [r3, #32]
   12884:	ldr	r0, [pc, #2036]	; 13080 <__assert_fail@plt+0x1d20>
   12888:	bl	111d4 <gettext@plt>
   1288c:	mov	r5, r0
   12890:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12894:	mov	r0, #4
   12898:	bl	1a988 <__assert_fail@plt+0x9628>
   1289c:	mov	r3, r0
   128a0:	mov	r2, r5
   128a4:	mov	r1, r4
   128a8:	mov	r0, #0
   128ac:	bl	11168 <error@plt>
   128b0:	mov	r3, #0
   128b4:	strb	r3, [fp, #-17]	; 0xffffffef
   128b8:	b	129d0 <__assert_fail@plt+0x1670>
   128bc:	ldr	r3, [fp, #12]
   128c0:	ldrb	r3, [r3, #13]
   128c4:	eor	r3, r3, #1
   128c8:	uxtb	r3, r3
   128cc:	cmp	r3, #0
   128d0:	beq	12900 <__assert_fail@plt+0x15a0>
   128d4:	ldr	r3, [fp, #-164]	; 0xffffff5c
   128d8:	ldr	r4, [r3, #32]
   128dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   128e0:	mov	r1, #3
   128e4:	mov	r0, #0
   128e8:	bl	1ab10 <__assert_fail@plt+0x97b0>
   128ec:	mov	r3, r0
   128f0:	ldr	r2, [pc, #1932]	; 13084 <__assert_fail@plt+0x1d24>
   128f4:	mov	r1, r4
   128f8:	mov	r0, #0
   128fc:	bl	11168 <error@plt>
   12900:	mov	r3, #0
   12904:	strb	r3, [fp, #-17]	; 0xffffffef
   12908:	b	129d0 <__assert_fail@plt+0x1670>
   1290c:	ldr	r3, [fp, #12]
   12910:	ldrb	r3, [r3, #13]
   12914:	eor	r3, r3, #1
   12918:	uxtb	r3, r3
   1291c:	cmp	r3, #0
   12920:	beq	12958 <__assert_fail@plt+0x15f8>
   12924:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12928:	ldr	r4, [r3, #32]
   1292c:	ldr	r0, [pc, #1876]	; 13088 <__assert_fail@plt+0x1d28>
   12930:	bl	111d4 <gettext@plt>
   12934:	mov	r5, r0
   12938:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1293c:	mov	r0, #4
   12940:	bl	1a988 <__assert_fail@plt+0x9628>
   12944:	mov	r3, r0
   12948:	mov	r2, r5
   1294c:	mov	r1, r4
   12950:	mov	r0, #0
   12954:	bl	11168 <error@plt>
   12958:	mov	r3, #0
   1295c:	strb	r3, [fp, #-17]	; 0xffffffef
   12960:	b	129d0 <__assert_fail@plt+0x1670>
   12964:	ldr	r1, [fp, #-164]	; 0xffffff5c
   12968:	ldr	r0, [fp, #-160]	; 0xffffff60
   1296c:	bl	1c768 <__assert_fail@plt+0xb408>
   12970:	mov	r3, r0
   12974:	cmp	r3, #0
   12978:	beq	129cc <__assert_fail@plt+0x166c>
   1297c:	ldr	r0, [pc, #1800]	; 1308c <__assert_fail@plt+0x1d2c>
   12980:	bl	111d4 <gettext@plt>
   12984:	mov	r4, r0
   12988:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1298c:	mov	r1, #3
   12990:	mov	r0, #0
   12994:	bl	1ab10 <__assert_fail@plt+0x97b0>
   12998:	mov	r3, r0
   1299c:	mov	r2, r4
   129a0:	mov	r1, #0
   129a4:	mov	r0, #0
   129a8:	bl	11168 <error@plt>
   129ac:	mov	r3, #0
   129b0:	b	13064 <__assert_fail@plt+0x1d04>
   129b4:	nop			; (mov r0, r0)
   129b8:	b	129d0 <__assert_fail@plt+0x1670>
   129bc:	nop			; (mov r0, r0)
   129c0:	b	129d0 <__assert_fail@plt+0x1670>
   129c4:	nop			; (mov r0, r0)
   129c8:	b	129d0 <__assert_fail@plt+0x1670>
   129cc:	nop			; (mov r0, r0)
   129d0:	ldrb	r3, [fp, #-17]	; 0xffffffef
   129d4:	eor	r3, r3, #1
   129d8:	uxtb	r3, r3
   129dc:	cmp	r3, #0
   129e0:	beq	129f8 <__assert_fail@plt+0x1698>
   129e4:	mov	r3, #0
   129e8:	strb	r3, [fp, #-18]	; 0xffffffee
   129ec:	mov	r3, #0
   129f0:	str	r3, [fp, #-16]
   129f4:	b	12b7c <__assert_fail@plt+0x181c>
   129f8:	ldr	r3, [fp, #4]
   129fc:	cmn	r3, #1
   12a00:	bne	12a60 <__assert_fail@plt+0x1700>
   12a04:	ldr	r3, [fp, #8]
   12a08:	cmn	r3, #1
   12a0c:	bne	12a60 <__assert_fail@plt+0x1700>
   12a10:	ldr	r3, [fp, #12]
   12a14:	ldr	r3, [r3]
   12a18:	cmp	r3, #2
   12a1c:	bne	12a60 <__assert_fail@plt+0x1700>
   12a20:	ldr	r3, [fp, #12]
   12a24:	ldr	r3, [r3, #8]
   12a28:	cmp	r3, #0
   12a2c:	bne	12a60 <__assert_fail@plt+0x1700>
   12a30:	ldr	r3, [fp, #12]
   12a34:	ldrb	r3, [r3, #12]
   12a38:	eor	r3, r3, #1
   12a3c:	uxtb	r3, r3
   12a40:	cmp	r3, #0
   12a44:	beq	12a60 <__assert_fail@plt+0x1700>
   12a48:	mov	r3, #1
   12a4c:	strb	r3, [fp, #-18]	; 0xffffffee
   12a50:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12a54:	add	r3, r3, #64	; 0x40
   12a58:	str	r3, [fp, #-16]
   12a5c:	b	12b7c <__assert_fail@plt+0x181c>
   12a60:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12a64:	add	r3, r3, #64	; 0x40
   12a68:	str	r3, [fp, #-16]
   12a6c:	ldr	r3, [fp, #12]
   12a70:	ldrb	r3, [r3, #12]
   12a74:	cmp	r3, #0
   12a78:	beq	12b14 <__assert_fail@plt+0x17b4>
   12a7c:	ldr	r3, [fp, #-16]
   12a80:	ldr	r3, [r3, #16]
   12a84:	and	r3, r3, #61440	; 0xf000
   12a88:	cmp	r3, #40960	; 0xa000
   12a8c:	bne	12b14 <__assert_fail@plt+0x17b4>
   12a90:	ldr	r3, [fp, #-160]	; 0xffffff60
   12a94:	ldr	r0, [r3, #32]
   12a98:	sub	r2, fp, #156	; 0x9c
   12a9c:	mov	r3, #0
   12aa0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12aa4:	bl	1ef14 <__assert_fail@plt+0xdbb4>
   12aa8:	mov	r3, r0
   12aac:	cmp	r3, #0
   12ab0:	beq	12b0c <__assert_fail@plt+0x17ac>
   12ab4:	ldr	r3, [fp, #12]
   12ab8:	ldrb	r3, [r3, #13]
   12abc:	eor	r3, r3, #1
   12ac0:	uxtb	r3, r3
   12ac4:	cmp	r3, #0
   12ac8:	beq	12b04 <__assert_fail@plt+0x17a4>
   12acc:	bl	11228 <__errno_location@plt>
   12ad0:	mov	r3, r0
   12ad4:	ldr	r4, [r3]
   12ad8:	ldr	r0, [pc, #1456]	; 13090 <__assert_fail@plt+0x1d30>
   12adc:	bl	111d4 <gettext@plt>
   12ae0:	mov	r5, r0
   12ae4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12ae8:	mov	r0, #4
   12aec:	bl	1a988 <__assert_fail@plt+0x9628>
   12af0:	mov	r3, r0
   12af4:	mov	r2, r5
   12af8:	mov	r1, r4
   12afc:	mov	r0, #0
   12b00:	bl	11168 <error@plt>
   12b04:	mov	r3, #0
   12b08:	strb	r3, [fp, #-17]	; 0xffffffef
   12b0c:	sub	r3, fp, #156	; 0x9c
   12b10:	str	r3, [fp, #-16]
   12b14:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12b18:	cmp	r3, #0
   12b1c:	beq	12b68 <__assert_fail@plt+0x1808>
   12b20:	ldr	r3, [fp, #4]
   12b24:	cmn	r3, #1
   12b28:	beq	12b40 <__assert_fail@plt+0x17e0>
   12b2c:	ldr	r3, [fp, #-16]
   12b30:	ldr	r2, [r3, #24]
   12b34:	ldr	r3, [fp, #4]
   12b38:	cmp	r2, r3
   12b3c:	bne	12b68 <__assert_fail@plt+0x1808>
   12b40:	ldr	r3, [fp, #8]
   12b44:	cmn	r3, #1
   12b48:	beq	12b60 <__assert_fail@plt+0x1800>
   12b4c:	ldr	r3, [fp, #-16]
   12b50:	ldr	r2, [r3, #28]
   12b54:	ldr	r3, [fp, #8]
   12b58:	cmp	r2, r3
   12b5c:	bne	12b68 <__assert_fail@plt+0x1808>
   12b60:	mov	r3, #1
   12b64:	b	12b6c <__assert_fail@plt+0x180c>
   12b68:	mov	r3, #0
   12b6c:	strb	r3, [fp, #-18]	; 0xffffffee
   12b70:	ldrb	r3, [fp, #-18]	; 0xffffffee
   12b74:	and	r3, r3, #1
   12b78:	strb	r3, [fp, #-18]	; 0xffffffee
   12b7c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12b80:	cmp	r3, #0
   12b84:	beq	12cd0 <__assert_fail@plt+0x1970>
   12b88:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12b8c:	ldrh	r3, [r3, #56]	; 0x38
   12b90:	cmp	r3, #1
   12b94:	beq	12bc8 <__assert_fail@plt+0x1868>
   12b98:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12b9c:	ldrh	r3, [r3, #56]	; 0x38
   12ba0:	cmp	r3, #2
   12ba4:	beq	12bc8 <__assert_fail@plt+0x1868>
   12ba8:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12bac:	ldrh	r3, [r3, #56]	; 0x38
   12bb0:	cmp	r3, #6
   12bb4:	beq	12bc8 <__assert_fail@plt+0x1868>
   12bb8:	ldr	r3, [fp, #-164]	; 0xffffff5c
   12bbc:	ldrh	r3, [r3, #56]	; 0x38
   12bc0:	cmp	r3, #4
   12bc4:	bne	12cd0 <__assert_fail@plt+0x1970>
   12bc8:	ldr	r3, [fp, #12]
   12bcc:	ldr	r3, [r3, #8]
   12bd0:	cmp	r3, #0
   12bd4:	beq	12cd0 <__assert_fail@plt+0x1970>
   12bd8:	ldr	r3, [fp, #-16]
   12bdc:	ldrd	r0, [r3, #96]	; 0x60
   12be0:	ldr	r3, [fp, #12]
   12be4:	ldr	r3, [r3, #8]
   12be8:	ldrd	r2, [r3]
   12bec:	cmp	r1, r3
   12bf0:	cmpeq	r0, r2
   12bf4:	bne	12cd0 <__assert_fail@plt+0x1970>
   12bf8:	ldr	r3, [fp, #-16]
   12bfc:	ldrd	r0, [r3]
   12c00:	ldr	r3, [fp, #12]
   12c04:	ldr	r3, [r3, #8]
   12c08:	ldrd	r2, [r3, #8]
   12c0c:	cmp	r1, r3
   12c10:	cmpeq	r0, r2
   12c14:	bne	12cd0 <__assert_fail@plt+0x1970>
   12c18:	ldr	r1, [pc, #1104]	; 13070 <__assert_fail@plt+0x1d10>
   12c1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12c20:	bl	11048 <strcmp@plt>
   12c24:	mov	r3, r0
   12c28:	cmp	r3, #0
   12c2c:	bne	12c60 <__assert_fail@plt+0x1900>
   12c30:	ldr	r0, [pc, #1084]	; 13074 <__assert_fail@plt+0x1d14>
   12c34:	bl	111d4 <gettext@plt>
   12c38:	mov	r4, r0
   12c3c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12c40:	mov	r0, #4
   12c44:	bl	1a988 <__assert_fail@plt+0x9628>
   12c48:	mov	r3, r0
   12c4c:	mov	r2, r4
   12c50:	mov	r1, #0
   12c54:	mov	r0, #0
   12c58:	bl	11168 <error@plt>
   12c5c:	b	12cac <__assert_fail@plt+0x194c>
   12c60:	ldr	r0, [pc, #1040]	; 13078 <__assert_fail@plt+0x1d18>
   12c64:	bl	111d4 <gettext@plt>
   12c68:	mov	r4, r0
   12c6c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12c70:	mov	r1, #4
   12c74:	mov	r0, #0
   12c78:	bl	1a8ec <__assert_fail@plt+0x958c>
   12c7c:	mov	r5, r0
   12c80:	ldr	r2, [pc, #1000]	; 13070 <__assert_fail@plt+0x1d10>
   12c84:	mov	r1, #4
   12c88:	mov	r0, #1
   12c8c:	bl	1a8ec <__assert_fail@plt+0x958c>
   12c90:	mov	r3, r0
   12c94:	str	r3, [sp]
   12c98:	mov	r3, r5
   12c9c:	mov	r2, r4
   12ca0:	mov	r1, #0
   12ca4:	mov	r0, #0
   12ca8:	bl	11168 <error@plt>
   12cac:	ldr	r0, [pc, #968]	; 1307c <__assert_fail@plt+0x1d1c>
   12cb0:	bl	111d4 <gettext@plt>
   12cb4:	mov	r3, r0
   12cb8:	mov	r2, r3
   12cbc:	mov	r1, #0
   12cc0:	mov	r0, #0
   12cc4:	bl	11168 <error@plt>
   12cc8:	mov	r3, #0
   12ccc:	b	13064 <__assert_fail@plt+0x1d04>
   12cd0:	ldrb	r3, [fp, #-18]	; 0xffffffee
   12cd4:	cmp	r3, #0
   12cd8:	beq	12e9c <__assert_fail@plt+0x1b3c>
   12cdc:	ldr	r3, [fp, #12]
   12ce0:	ldrb	r3, [r3, #12]
   12ce4:	eor	r3, r3, #1
   12ce8:	uxtb	r3, r3
   12cec:	cmp	r3, #0
   12cf0:	beq	12d5c <__assert_fail@plt+0x19fc>
   12cf4:	ldr	r3, [fp, #-160]	; 0xffffff60
   12cf8:	ldr	r0, [r3, #32]
   12cfc:	ldr	r3, [fp, #-172]	; 0xffffff54
   12d00:	ldr	r2, [fp, #-168]	; 0xffffff58
   12d04:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12d08:	bl	1329c <__assert_fail@plt+0x1f3c>
   12d0c:	mov	r3, r0
   12d10:	cmp	r3, #0
   12d14:	moveq	r3, #1
   12d18:	movne	r3, #0
   12d1c:	strb	r3, [fp, #-17]	; 0xffffffef
   12d20:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12d24:	eor	r3, r3, #1
   12d28:	uxtb	r3, r3
   12d2c:	cmp	r3, #0
   12d30:	beq	12e10 <__assert_fail@plt+0x1ab0>
   12d34:	bl	11228 <__errno_location@plt>
   12d38:	mov	r3, r0
   12d3c:	ldr	r3, [r3]
   12d40:	cmp	r3, #95	; 0x5f
   12d44:	bne	12e10 <__assert_fail@plt+0x1ab0>
   12d48:	mov	r3, #1
   12d4c:	strb	r3, [fp, #-17]	; 0xffffffef
   12d50:	mov	r3, #0
   12d54:	strb	r3, [fp, #-19]	; 0xffffffed
   12d58:	b	12e10 <__assert_fail@plt+0x1ab0>
   12d5c:	ldr	r3, [fp, #-160]	; 0xffffff60
   12d60:	ldr	r0, [r3, #32]
   12d64:	ldr	r3, [fp, #8]
   12d68:	str	r3, [sp, #8]
   12d6c:	ldr	r3, [fp, #4]
   12d70:	str	r3, [sp, #4]
   12d74:	ldr	r3, [fp, #-172]	; 0xffffff54
   12d78:	str	r3, [sp]
   12d7c:	ldr	r3, [fp, #-168]	; 0xffffff58
   12d80:	ldr	r2, [fp, #-16]
   12d84:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12d88:	bl	123fc <__assert_fail@plt+0x109c>
   12d8c:	str	r0, [fp, #-36]	; 0xffffffdc
   12d90:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d94:	sub	r3, r3, #2
   12d98:	cmp	r3, #4
   12d9c:	ldrls	pc, [pc, r3, lsl #2]
   12da0:	b	12e08 <__assert_fail@plt+0x1aa8>
   12da4:	andeq	r2, r1, ip, lsl #28
   12da8:	strdeq	r2, [r1], -r4
   12dac:	strdeq	r2, [r1], -r4
   12db0:			; <UNDEFINED> instruction: 0x00012db8
   12db4:	andeq	r2, r1, r8, ror #27
   12db8:	ldr	r3, [fp, #-160]	; 0xffffff60
   12dbc:	ldr	r0, [r3, #32]
   12dc0:	ldr	r3, [fp, #-172]	; 0xffffff54
   12dc4:	ldr	r2, [fp, #-168]	; 0xffffff58
   12dc8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12dcc:	bl	13254 <__assert_fail@plt+0x1ef4>
   12dd0:	mov	r3, r0
   12dd4:	cmp	r3, #0
   12dd8:	moveq	r3, #1
   12ddc:	movne	r3, #0
   12de0:	strb	r3, [fp, #-17]	; 0xffffffef
   12de4:	b	12e10 <__assert_fail@plt+0x1ab0>
   12de8:	mov	r3, #0
   12dec:	strb	r3, [fp, #-17]	; 0xffffffef
   12df0:	b	12e10 <__assert_fail@plt+0x1ab0>
   12df4:	mov	r3, #0
   12df8:	strb	r3, [fp, #-18]	; 0xffffffee
   12dfc:	mov	r3, #0
   12e00:	strb	r3, [fp, #-17]	; 0xffffffef
   12e04:	b	12e10 <__assert_fail@plt+0x1ab0>
   12e08:	bl	11318 <abort@plt>
   12e0c:	nop			; (mov r0, r0)
   12e10:	ldrb	r3, [fp, #-18]	; 0xffffffee
   12e14:	cmp	r3, #0
   12e18:	beq	12e9c <__assert_fail@plt+0x1b3c>
   12e1c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12e20:	eor	r3, r3, #1
   12e24:	uxtb	r3, r3
   12e28:	cmp	r3, #0
   12e2c:	beq	12e9c <__assert_fail@plt+0x1b3c>
   12e30:	ldr	r3, [fp, #12]
   12e34:	ldrb	r3, [r3, #13]
   12e38:	eor	r3, r3, #1
   12e3c:	uxtb	r3, r3
   12e40:	cmp	r3, #0
   12e44:	beq	12e9c <__assert_fail@plt+0x1b3c>
   12e48:	bl	11228 <__errno_location@plt>
   12e4c:	mov	r3, r0
   12e50:	ldr	r4, [r3]
   12e54:	ldr	r3, [fp, #-168]	; 0xffffff58
   12e58:	cmn	r3, #1
   12e5c:	beq	12e70 <__assert_fail@plt+0x1b10>
   12e60:	ldr	r0, [pc, #556]	; 13094 <__assert_fail@plt+0x1d34>
   12e64:	bl	111d4 <gettext@plt>
   12e68:	mov	r5, r0
   12e6c:	b	12e7c <__assert_fail@plt+0x1b1c>
   12e70:	ldr	r0, [pc, #544]	; 13098 <__assert_fail@plt+0x1d38>
   12e74:	bl	111d4 <gettext@plt>
   12e78:	mov	r5, r0
   12e7c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12e80:	mov	r0, #4
   12e84:	bl	1a988 <__assert_fail@plt+0x9628>
   12e88:	mov	r3, r0
   12e8c:	mov	r2, r5
   12e90:	mov	r1, r4
   12e94:	mov	r0, #0
   12e98:	bl	11168 <error@plt>
   12e9c:	ldr	r3, [fp, #12]
   12ea0:	ldr	r3, [r3]
   12ea4:	cmp	r3, #2
   12ea8:	beq	13038 <__assert_fail@plt+0x1cd8>
   12eac:	ldrb	r3, [fp, #-18]	; 0xffffffee
   12eb0:	cmp	r3, #0
   12eb4:	beq	12f18 <__assert_fail@plt+0x1bb8>
   12eb8:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12ebc:	cmp	r3, #0
   12ec0:	beq	12f18 <__assert_fail@plt+0x1bb8>
   12ec4:	ldrb	r3, [fp, #-19]	; 0xffffffed
   12ec8:	cmp	r3, #0
   12ecc:	beq	12f18 <__assert_fail@plt+0x1bb8>
   12ed0:	ldr	r3, [fp, #-168]	; 0xffffff58
   12ed4:	cmn	r3, #1
   12ed8:	beq	12ef0 <__assert_fail@plt+0x1b90>
   12edc:	ldr	r3, [fp, #-16]
   12ee0:	ldr	r2, [r3, #24]
   12ee4:	ldr	r3, [fp, #-168]	; 0xffffff58
   12ee8:	cmp	r2, r3
   12eec:	bne	12f10 <__assert_fail@plt+0x1bb0>
   12ef0:	ldr	r3, [fp, #-172]	; 0xffffff54
   12ef4:	cmn	r3, #1
   12ef8:	beq	12f18 <__assert_fail@plt+0x1bb8>
   12efc:	ldr	r3, [fp, #-16]
   12f00:	ldr	r2, [r3, #28]
   12f04:	ldr	r3, [fp, #-172]	; 0xffffff54
   12f08:	cmp	r2, r3
   12f0c:	beq	12f18 <__assert_fail@plt+0x1bb8>
   12f10:	mov	r3, #1
   12f14:	b	12f1c <__assert_fail@plt+0x1bbc>
   12f18:	mov	r3, #0
   12f1c:	strb	r3, [fp, #-37]	; 0xffffffdb
   12f20:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   12f24:	and	r3, r3, #1
   12f28:	strb	r3, [fp, #-37]	; 0xffffffdb
   12f2c:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   12f30:	cmp	r3, #0
   12f34:	bne	12f48 <__assert_fail@plt+0x1be8>
   12f38:	ldr	r3, [fp, #12]
   12f3c:	ldr	r3, [r3]
   12f40:	cmp	r3, #0
   12f44:	bne	13038 <__assert_fail@plt+0x1cd8>
   12f48:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12f4c:	eor	r3, r3, #1
   12f50:	uxtb	r3, r3
   12f54:	cmp	r3, #0
   12f58:	beq	12f64 <__assert_fail@plt+0x1c04>
   12f5c:	mov	r3, #3
   12f60:	b	12fa0 <__assert_fail@plt+0x1c40>
   12f64:	ldrb	r3, [fp, #-19]	; 0xffffffed
   12f68:	eor	r3, r3, #1
   12f6c:	uxtb	r3, r3
   12f70:	cmp	r3, #0
   12f74:	beq	12f80 <__assert_fail@plt+0x1c20>
   12f78:	mov	r3, #1
   12f7c:	b	12fa0 <__assert_fail@plt+0x1c40>
   12f80:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   12f84:	eor	r3, r3, #1
   12f88:	uxtb	r3, r3
   12f8c:	cmp	r3, #0
   12f90:	beq	12f9c <__assert_fail@plt+0x1c3c>
   12f94:	mov	r3, #4
   12f98:	b	12fa0 <__assert_fail@plt+0x1c40>
   12f9c:	mov	r3, #2
   12fa0:	str	r3, [fp, #-44]	; 0xffffffd4
   12fa4:	ldr	r3, [fp, #-16]
   12fa8:	cmp	r3, #0
   12fac:	beq	12fc8 <__assert_fail@plt+0x1c68>
   12fb0:	ldr	r3, [fp, #-16]
   12fb4:	ldr	r3, [r3, #24]
   12fb8:	mov	r0, r3
   12fbc:	bl	12038 <__assert_fail@plt+0xcd8>
   12fc0:	mov	r3, r0
   12fc4:	b	12fcc <__assert_fail@plt+0x1c6c>
   12fc8:	mov	r3, #0
   12fcc:	str	r3, [fp, #-48]	; 0xffffffd0
   12fd0:	ldr	r3, [fp, #-16]
   12fd4:	cmp	r3, #0
   12fd8:	beq	12ff4 <__assert_fail@plt+0x1c94>
   12fdc:	ldr	r3, [fp, #-16]
   12fe0:	ldr	r3, [r3, #28]
   12fe4:	mov	r0, r3
   12fe8:	bl	11fd0 <__assert_fail@plt+0xc70>
   12fec:	mov	r3, r0
   12ff0:	b	12ff8 <__assert_fail@plt+0x1c98>
   12ff4:	mov	r3, #0
   12ff8:	str	r3, [fp, #-52]	; 0xffffffcc
   12ffc:	ldr	r3, [fp, #12]
   13000:	ldr	r3, [r3, #16]
   13004:	ldr	r2, [fp, #12]
   13008:	ldr	r2, [r2, #20]
   1300c:	str	r2, [sp, #4]
   13010:	str	r3, [sp]
   13014:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13018:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1301c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13020:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13024:	bl	1217c <__assert_fail@plt+0xe1c>
   13028:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1302c:	bl	1347c <__assert_fail@plt+0x211c>
   13030:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13034:	bl	1347c <__assert_fail@plt+0x211c>
   13038:	ldr	r3, [fp, #12]
   1303c:	ldrb	r3, [r3, #4]
   13040:	eor	r3, r3, #1
   13044:	uxtb	r3, r3
   13048:	cmp	r3, #0
   1304c:	beq	13060 <__assert_fail@plt+0x1d00>
   13050:	mov	r2, #4
   13054:	ldr	r1, [fp, #-164]	; 0xffffff5c
   13058:	ldr	r0, [fp, #-160]	; 0xffffff60
   1305c:	bl	14e44 <__assert_fail@plt+0x3ae4>
   13060:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13064:	mov	r0, r3
   13068:	sub	sp, fp, #12
   1306c:	pop	{r4, r5, fp, pc}
   13070:	andeq	pc, r1, ip, lsr #29
   13074:			; <UNDEFINED> instruction: 0x0001feb0
   13078:	andeq	pc, r1, r0, ror #29
   1307c:	andeq	pc, r1, ip, lsl pc	; <UNPREDICTABLE>
   13080:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   13084:	andeq	pc, r1, r4, ror #30
   13088:	andeq	pc, r1, r8, ror #30
   1308c:	andeq	pc, r1, r4, lsl #31
   13090:	andeq	r0, r2, r0, asr #32
   13094:	andeq	r0, r2, r8, asr r0
   13098:	andeq	r0, r2, r4, ror r0
   1309c:	push	{r4, fp, lr}
   130a0:	add	fp, sp, #8
   130a4:	sub	sp, sp, #52	; 0x34
   130a8:	str	r0, [fp, #-32]	; 0xffffffe0
   130ac:	str	r1, [fp, #-36]	; 0xffffffdc
   130b0:	str	r2, [fp, #-40]	; 0xffffffd8
   130b4:	str	r3, [fp, #-44]	; 0xffffffd4
   130b8:	mov	r3, #1
   130bc:	strb	r3, [fp, #-13]
   130c0:	ldr	r3, [fp, #4]
   130c4:	cmn	r3, #1
   130c8:	bne	130f8 <__assert_fail@plt+0x1d98>
   130cc:	ldr	r3, [fp, #8]
   130d0:	cmn	r3, #1
   130d4:	bne	130f8 <__assert_fail@plt+0x1d98>
   130d8:	ldr	r3, [fp, #12]
   130dc:	ldrb	r3, [r3, #12]
   130e0:	cmp	r3, #0
   130e4:	bne	130f8 <__assert_fail@plt+0x1d98>
   130e8:	ldr	r3, [fp, #12]
   130ec:	ldr	r3, [r3]
   130f0:	cmp	r3, #2
   130f4:	beq	13100 <__assert_fail@plt+0x1da0>
   130f8:	mov	r3, #0
   130fc:	b	13104 <__assert_fail@plt+0x1da4>
   13100:	mov	r3, #8
   13104:	str	r3, [fp, #-20]	; 0xffffffec
   13108:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1310c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13110:	orr	r3, r2, r3
   13114:	mov	r2, #0
   13118:	mov	r1, r3
   1311c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13120:	bl	1c6e0 <__assert_fail@plt+0xb380>
   13124:	mov	r3, r0
   13128:	str	r3, [fp, #-24]	; 0xffffffe8
   1312c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13130:	bl	146d0 <__assert_fail@plt+0x3370>
   13134:	str	r0, [fp, #-28]	; 0xffffffe4
   13138:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1313c:	cmp	r3, #0
   13140:	bne	131a4 <__assert_fail@plt+0x1e44>
   13144:	bl	11228 <__errno_location@plt>
   13148:	mov	r3, r0
   1314c:	ldr	r3, [r3]
   13150:	cmp	r3, #0
   13154:	beq	131f4 <__assert_fail@plt+0x1e94>
   13158:	ldr	r3, [fp, #12]
   1315c:	ldrb	r3, [r3, #13]
   13160:	eor	r3, r3, #1
   13164:	uxtb	r3, r3
   13168:	cmp	r3, #0
   1316c:	beq	13198 <__assert_fail@plt+0x1e38>
   13170:	bl	11228 <__errno_location@plt>
   13174:	mov	r3, r0
   13178:	ldr	r4, [r3]
   1317c:	ldr	r0, [pc, #200]	; 1324c <__assert_fail@plt+0x1eec>
   13180:	bl	111d4 <gettext@plt>
   13184:	mov	r3, r0
   13188:	mov	r2, r3
   1318c:	mov	r1, r4
   13190:	mov	r0, #0
   13194:	bl	11168 <error@plt>
   13198:	mov	r3, #0
   1319c:	strb	r3, [fp, #-13]
   131a0:	b	131f4 <__assert_fail@plt+0x1e94>
   131a4:	ldr	r3, [fp, #12]
   131a8:	str	r3, [sp, #8]
   131ac:	ldr	r3, [fp, #8]
   131b0:	str	r3, [sp, #4]
   131b4:	ldr	r3, [fp, #4]
   131b8:	str	r3, [sp]
   131bc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   131c0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   131c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   131c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   131cc:	bl	12640 <__assert_fail@plt+0x12e0>
   131d0:	mov	r3, r0
   131d4:	mov	r2, r3
   131d8:	ldrb	r3, [fp, #-13]
   131dc:	and	r3, r3, r2
   131e0:	cmp	r3, #0
   131e4:	movne	r3, #1
   131e8:	moveq	r3, #0
   131ec:	strb	r3, [fp, #-13]
   131f0:	b	1312c <__assert_fail@plt+0x1dcc>
   131f4:	nop			; (mov r0, r0)
   131f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   131fc:	bl	141a4 <__assert_fail@plt+0x2e44>
   13200:	mov	r3, r0
   13204:	cmp	r3, #0
   13208:	beq	1323c <__assert_fail@plt+0x1edc>
   1320c:	bl	11228 <__errno_location@plt>
   13210:	mov	r3, r0
   13214:	ldr	r4, [r3]
   13218:	ldr	r0, [pc, #48]	; 13250 <__assert_fail@plt+0x1ef0>
   1321c:	bl	111d4 <gettext@plt>
   13220:	mov	r3, r0
   13224:	mov	r2, r3
   13228:	mov	r1, r4
   1322c:	mov	r0, #0
   13230:	bl	11168 <error@plt>
   13234:	mov	r3, #0
   13238:	strb	r3, [fp, #-13]
   1323c:	ldrb	r3, [fp, #-13]
   13240:	mov	r0, r3
   13244:	sub	sp, fp, #8
   13248:	pop	{r4, fp, pc}
   1324c:	andeq	r0, r2, ip, lsl #1
   13250:	muleq	r2, ip, r0
   13254:	push	{fp, lr}
   13258:	add	fp, sp, #4
   1325c:	sub	sp, sp, #24
   13260:	str	r0, [fp, #-8]
   13264:	str	r1, [fp, #-12]
   13268:	str	r2, [fp, #-16]
   1326c:	str	r3, [fp, #-20]	; 0xffffffec
   13270:	mov	r3, #0
   13274:	str	r3, [sp]
   13278:	ldr	r3, [fp, #-20]	; 0xffffffec
   1327c:	ldr	r2, [fp, #-16]
   13280:	ldr	r1, [fp, #-12]
   13284:	ldr	r0, [fp, #-8]
   13288:	bl	112e8 <fchownat@plt>
   1328c:	mov	r3, r0
   13290:	mov	r0, r3
   13294:	sub	sp, fp, #4
   13298:	pop	{fp, pc}
   1329c:	push	{fp, lr}
   132a0:	add	fp, sp, #4
   132a4:	sub	sp, sp, #24
   132a8:	str	r0, [fp, #-8]
   132ac:	str	r1, [fp, #-12]
   132b0:	str	r2, [fp, #-16]
   132b4:	str	r3, [fp, #-20]	; 0xffffffec
   132b8:	mov	r3, #256	; 0x100
   132bc:	str	r3, [sp]
   132c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   132c4:	ldr	r2, [fp, #-16]
   132c8:	ldr	r1, [fp, #-12]
   132cc:	ldr	r0, [fp, #-8]
   132d0:	bl	112e8 <fchownat@plt>
   132d4:	mov	r3, r0
   132d8:	mov	r0, r3
   132dc:	sub	sp, fp, #4
   132e0:	pop	{fp, pc}
   132e4:	push	{fp}		; (str fp, [sp, #-4]!)
   132e8:	add	fp, sp, #0
   132ec:	sub	sp, sp, #12
   132f0:	str	r0, [fp, #-8]
   132f4:	ldr	r2, [pc, #20]	; 13310 <__assert_fail@plt+0x1fb0>
   132f8:	ldr	r3, [fp, #-8]
   132fc:	str	r3, [r2]
   13300:	nop			; (mov r0, r0)
   13304:	add	sp, fp, #0
   13308:	pop	{fp}		; (ldr fp, [sp], #4)
   1330c:	bx	lr
   13310:	andeq	r1, r3, r8, asr #3
   13314:	push	{fp}		; (str fp, [sp, #-4]!)
   13318:	add	fp, sp, #0
   1331c:	sub	sp, sp, #12
   13320:	mov	r3, r0
   13324:	strb	r3, [fp, #-5]
   13328:	ldr	r2, [pc, #20]	; 13344 <__assert_fail@plt+0x1fe4>
   1332c:	ldrb	r3, [fp, #-5]
   13330:	strb	r3, [r2]
   13334:	nop			; (mov r0, r0)
   13338:	add	sp, fp, #0
   1333c:	pop	{fp}		; (ldr fp, [sp], #4)
   13340:	bx	lr
   13344:	andeq	r1, r3, ip, asr #3
   13348:	push	{r4, fp, lr}
   1334c:	add	fp, sp, #8
   13350:	sub	sp, sp, #20
   13354:	ldr	r3, [pc, #256]	; 1345c <__assert_fail@plt+0x20fc>
   13358:	ldr	r3, [r3]
   1335c:	mov	r0, r3
   13360:	bl	1d58c <__assert_fail@plt+0xc22c>
   13364:	mov	r3, r0
   13368:	cmp	r3, #0
   1336c:	beq	13424 <__assert_fail@plt+0x20c4>
   13370:	ldr	r3, [pc, #232]	; 13460 <__assert_fail@plt+0x2100>
   13374:	ldrb	r3, [r3]
   13378:	eor	r3, r3, #1
   1337c:	uxtb	r3, r3
   13380:	cmp	r3, #0
   13384:	bne	1339c <__assert_fail@plt+0x203c>
   13388:	bl	11228 <__errno_location@plt>
   1338c:	mov	r3, r0
   13390:	ldr	r3, [r3]
   13394:	cmp	r3, #32
   13398:	beq	13424 <__assert_fail@plt+0x20c4>
   1339c:	ldr	r0, [pc, #192]	; 13464 <__assert_fail@plt+0x2104>
   133a0:	bl	111d4 <gettext@plt>
   133a4:	str	r0, [fp, #-16]
   133a8:	ldr	r3, [pc, #184]	; 13468 <__assert_fail@plt+0x2108>
   133ac:	ldr	r3, [r3]
   133b0:	cmp	r3, #0
   133b4:	beq	133f8 <__assert_fail@plt+0x2098>
   133b8:	bl	11228 <__errno_location@plt>
   133bc:	mov	r3, r0
   133c0:	ldr	r4, [r3]
   133c4:	ldr	r3, [pc, #156]	; 13468 <__assert_fail@plt+0x2108>
   133c8:	ldr	r3, [r3]
   133cc:	mov	r0, r3
   133d0:	bl	1aab0 <__assert_fail@plt+0x9750>
   133d4:	mov	r2, r0
   133d8:	ldr	r3, [fp, #-16]
   133dc:	str	r3, [sp]
   133e0:	mov	r3, r2
   133e4:	ldr	r2, [pc, #128]	; 1346c <__assert_fail@plt+0x210c>
   133e8:	mov	r1, r4
   133ec:	mov	r0, #0
   133f0:	bl	11168 <error@plt>
   133f4:	b	13414 <__assert_fail@plt+0x20b4>
   133f8:	bl	11228 <__errno_location@plt>
   133fc:	mov	r3, r0
   13400:	ldr	r1, [r3]
   13404:	ldr	r3, [fp, #-16]
   13408:	ldr	r2, [pc, #96]	; 13470 <__assert_fail@plt+0x2110>
   1340c:	mov	r0, #0
   13410:	bl	11168 <error@plt>
   13414:	ldr	r3, [pc, #88]	; 13474 <__assert_fail@plt+0x2114>
   13418:	ldr	r3, [r3]
   1341c:	mov	r0, r3
   13420:	bl	11090 <_exit@plt>
   13424:	ldr	r3, [pc, #76]	; 13478 <__assert_fail@plt+0x2118>
   13428:	ldr	r3, [r3]
   1342c:	mov	r0, r3
   13430:	bl	1d58c <__assert_fail@plt+0xc22c>
   13434:	mov	r3, r0
   13438:	cmp	r3, #0
   1343c:	beq	13450 <__assert_fail@plt+0x20f0>
   13440:	ldr	r3, [pc, #44]	; 13474 <__assert_fail@plt+0x2114>
   13444:	ldr	r3, [r3]
   13448:	mov	r0, r3
   1344c:	bl	11090 <_exit@plt>
   13450:	nop			; (mov r0, r0)
   13454:	sub	sp, fp, #8
   13458:	pop	{r4, fp, pc}
   1345c:	andeq	r1, r3, r4, lsr #3
   13460:	andeq	r1, r3, ip, asr #3
   13464:	andeq	r0, r2, r0, asr #1
   13468:	andeq	r1, r3, r8, asr #3
   1346c:	andeq	r0, r2, ip, asr #1
   13470:	ldrdeq	r0, [r2], -r4
   13474:	andeq	r1, r3, r0, asr #2
   13478:	andeq	r1, r3, r0, lsr #3
   1347c:	push	{r4, fp, lr}
   13480:	add	fp, sp, #8
   13484:	sub	sp, sp, #20
   13488:	str	r0, [fp, #-24]	; 0xffffffe8
   1348c:	bl	11228 <__errno_location@plt>
   13490:	mov	r3, r0
   13494:	ldr	r3, [r3]
   13498:	str	r3, [fp, #-20]	; 0xffffffec
   1349c:	bl	11228 <__errno_location@plt>
   134a0:	mov	r3, r0
   134a4:	ldr	r3, [r3]
   134a8:	str	r3, [fp, #-16]
   134ac:	bl	11228 <__errno_location@plt>
   134b0:	mov	r2, r0
   134b4:	mov	r3, #0
   134b8:	str	r3, [r2]
   134bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   134c0:	bl	11084 <free@plt>
   134c4:	bl	11228 <__errno_location@plt>
   134c8:	mov	r4, r0
   134cc:	bl	11228 <__errno_location@plt>
   134d0:	mov	r3, r0
   134d4:	ldr	r3, [r3]
   134d8:	cmp	r3, #0
   134dc:	moveq	r3, #1
   134e0:	movne	r3, #0
   134e4:	uxtb	r3, r3
   134e8:	lsl	r3, r3, #2
   134ec:	sub	r2, fp, #12
   134f0:	add	r3, r2, r3
   134f4:	ldr	r3, [r3, #-8]
   134f8:	str	r3, [r4]
   134fc:	nop			; (mov r0, r0)
   13500:	sub	sp, fp, #8
   13504:	pop	{r4, fp, pc}
   13508:	push	{fp}		; (str fp, [sp, #-4]!)
   1350c:	add	fp, sp, #0
   13510:	sub	sp, sp, #20
   13514:	str	r0, [fp, #-16]
   13518:	str	r1, [fp, #-20]	; 0xffffffec
   1351c:	ldr	r3, [fp, #-16]
   13520:	str	r3, [fp, #-8]
   13524:	ldr	r3, [fp, #-20]	; 0xffffffec
   13528:	str	r3, [fp, #-12]
   1352c:	ldr	r3, [fp, #-8]
   13530:	ldrd	r0, [r3, #8]
   13534:	ldr	r3, [fp, #-12]
   13538:	ldrd	r2, [r3, #8]
   1353c:	cmp	r1, r3
   13540:	cmpeq	r0, r2
   13544:	bne	1356c <__assert_fail@plt+0x220c>
   13548:	ldr	r3, [fp, #-8]
   1354c:	ldrd	r0, [r3]
   13550:	ldr	r3, [fp, #-12]
   13554:	ldrd	r2, [r3]
   13558:	cmp	r1, r3
   1355c:	cmpeq	r0, r2
   13560:	bne	1356c <__assert_fail@plt+0x220c>
   13564:	mov	r3, #1
   13568:	b	13570 <__assert_fail@plt+0x2210>
   1356c:	mov	r3, #0
   13570:	and	r3, r3, #1
   13574:	uxtb	r3, r3
   13578:	mov	r0, r3
   1357c:	add	sp, fp, #0
   13580:	pop	{fp}		; (ldr fp, [sp], #4)
   13584:	bx	lr
   13588:	push	{fp, lr}
   1358c:	add	fp, sp, #4
   13590:	sub	sp, sp, #16
   13594:	str	r0, [fp, #-16]
   13598:	str	r1, [fp, #-20]	; 0xffffffec
   1359c:	ldr	r3, [fp, #-16]
   135a0:	str	r3, [fp, #-8]
   135a4:	ldr	r3, [fp, #-8]
   135a8:	ldrd	r0, [r3, #8]
   135ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   135b0:	mov	r2, r3
   135b4:	mov	r3, #0
   135b8:	bl	1ecf4 <__assert_fail@plt+0xd994>
   135bc:	mov	r3, r2
   135c0:	mov	r0, r3
   135c4:	sub	sp, fp, #4
   135c8:	pop	{fp, pc}
   135cc:	push	{fp, lr}
   135d0:	add	fp, sp, #4
   135d4:	sub	sp, sp, #16
   135d8:	str	r0, [fp, #-8]
   135dc:	ldr	r3, [fp, #-8]
   135e0:	ldr	r2, [r3, #48]	; 0x30
   135e4:	ldr	r3, [pc, #156]	; 13688 <__assert_fail@plt+0x2328>
   135e8:	and	r3, r3, r2
   135ec:	cmp	r3, #0
   135f0:	beq	13638 <__assert_fail@plt+0x22d8>
   135f4:	ldr	r3, [pc, #144]	; 1368c <__assert_fail@plt+0x232c>
   135f8:	str	r3, [sp]
   135fc:	ldr	r3, [pc, #140]	; 13690 <__assert_fail@plt+0x2330>
   13600:	ldr	r2, [pc, #140]	; 13694 <__assert_fail@plt+0x2334>
   13604:	mov	r1, #0
   13608:	mov	r0, #31
   1360c:	bl	172b8 <__assert_fail@plt+0x5f58>
   13610:	mov	r3, r0
   13614:	mov	r2, r3
   13618:	ldr	r3, [fp, #-8]
   1361c:	str	r2, [r3, #56]	; 0x38
   13620:	ldr	r3, [fp, #-8]
   13624:	ldr	r3, [r3, #56]	; 0x38
   13628:	cmp	r3, #0
   1362c:	bne	13678 <__assert_fail@plt+0x2318>
   13630:	mov	r3, #0
   13634:	b	1367c <__assert_fail@plt+0x231c>
   13638:	mov	r0, #32
   1363c:	bl	1d06c <__assert_fail@plt+0xbd0c>
   13640:	mov	r3, r0
   13644:	mov	r2, r3
   13648:	ldr	r3, [fp, #-8]
   1364c:	str	r2, [r3, #56]	; 0x38
   13650:	ldr	r3, [fp, #-8]
   13654:	ldr	r3, [r3, #56]	; 0x38
   13658:	cmp	r3, #0
   1365c:	bne	13668 <__assert_fail@plt+0x2308>
   13660:	mov	r3, #0
   13664:	b	1367c <__assert_fail@plt+0x231c>
   13668:	ldr	r3, [fp, #-8]
   1366c:	ldr	r3, [r3, #56]	; 0x38
   13670:	mov	r0, r3
   13674:	bl	1d6b0 <__assert_fail@plt+0xc350>
   13678:	mov	r3, #1
   1367c:	mov	r0, r3
   13680:	sub	sp, fp, #4
   13684:	pop	{fp, pc}
   13688:	andeq	r0, r0, r2, lsl #2
   1368c:	andeq	r3, r1, ip, ror r4
   13690:	andeq	r3, r1, r8, lsl #10
   13694:	andeq	r3, r1, r8, lsl #11
   13698:	push	{fp, lr}
   1369c:	add	fp, sp, #4
   136a0:	sub	sp, sp, #24
   136a4:	str	r0, [fp, #-24]	; 0xffffffe8
   136a8:	str	r1, [fp, #-28]	; 0xffffffe4
   136ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   136b0:	ldr	r2, [r3, #48]	; 0x30
   136b4:	ldr	r3, [pc, #280]	; 137d4 <__assert_fail@plt+0x2474>
   136b8:	and	r3, r3, r2
   136bc:	cmp	r3, #0
   136c0:	beq	13784 <__assert_fail@plt+0x2424>
   136c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   136c8:	add	r3, r3, #64	; 0x40
   136cc:	str	r3, [fp, #-8]
   136d0:	mov	r0, #24
   136d4:	bl	1d06c <__assert_fail@plt+0xbd0c>
   136d8:	mov	r3, r0
   136dc:	str	r3, [fp, #-12]
   136e0:	ldr	r3, [fp, #-12]
   136e4:	cmp	r3, #0
   136e8:	bne	136f4 <__assert_fail@plt+0x2394>
   136ec:	mov	r3, #0
   136f0:	b	137c8 <__assert_fail@plt+0x2468>
   136f4:	ldr	r3, [fp, #-8]
   136f8:	ldrd	r2, [r3]
   136fc:	ldr	r1, [fp, #-12]
   13700:	strd	r2, [r1]
   13704:	ldr	r3, [fp, #-8]
   13708:	ldrd	r2, [r3, #96]	; 0x60
   1370c:	ldr	r1, [fp, #-12]
   13710:	strd	r2, [r1, #8]
   13714:	ldr	r3, [fp, #-12]
   13718:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1371c:	str	r2, [r3, #16]
   13720:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13724:	ldr	r3, [r3, #56]	; 0x38
   13728:	ldr	r1, [fp, #-12]
   1372c:	mov	r0, r3
   13730:	bl	18000 <__assert_fail@plt+0x6ca0>
   13734:	str	r0, [fp, #-16]
   13738:	ldr	r2, [fp, #-16]
   1373c:	ldr	r3, [fp, #-12]
   13740:	cmp	r2, r3
   13744:	beq	137c4 <__assert_fail@plt+0x2464>
   13748:	ldr	r0, [fp, #-12]
   1374c:	bl	1347c <__assert_fail@plt+0x211c>
   13750:	ldr	r3, [fp, #-16]
   13754:	cmp	r3, #0
   13758:	bne	13764 <__assert_fail@plt+0x2404>
   1375c:	mov	r3, #0
   13760:	b	137c8 <__assert_fail@plt+0x2468>
   13764:	ldr	r3, [fp, #-16]
   13768:	ldr	r2, [r3, #16]
   1376c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13770:	str	r2, [r3]
   13774:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13778:	mov	r2, #2
   1377c:	strh	r2, [r3, #56]	; 0x38
   13780:	b	137c4 <__assert_fail@plt+0x2464>
   13784:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13788:	ldr	r2, [r3, #56]	; 0x38
   1378c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13790:	add	r3, r3, #64	; 0x40
   13794:	mov	r1, r3
   13798:	mov	r0, r2
   1379c:	bl	1d6f0 <__assert_fail@plt+0xc390>
   137a0:	mov	r3, r0
   137a4:	cmp	r3, #0
   137a8:	beq	137c4 <__assert_fail@plt+0x2464>
   137ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   137b0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   137b4:	str	r2, [r3]
   137b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   137bc:	mov	r2, #2
   137c0:	strh	r2, [r3, #56]	; 0x38
   137c4:	mov	r3, #1
   137c8:	mov	r0, r3
   137cc:	sub	sp, fp, #4
   137d0:	pop	{fp, pc}
   137d4:	andeq	r0, r0, r2, lsl #2
   137d8:	push	{fp, lr}
   137dc:	add	fp, sp, #4
   137e0:	sub	sp, sp, #48	; 0x30
   137e4:	str	r0, [fp, #-48]	; 0xffffffd0
   137e8:	str	r1, [fp, #-52]	; 0xffffffcc
   137ec:	ldr	r3, [fp, #-52]	; 0xffffffcc
   137f0:	add	r3, r3, #64	; 0x40
   137f4:	str	r3, [fp, #-8]
   137f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   137fc:	ldr	r2, [r3, #48]	; 0x30
   13800:	ldr	r3, [pc, #268]	; 13914 <__assert_fail@plt+0x25b4>
   13804:	and	r3, r3, r2
   13808:	cmp	r3, #0
   1380c:	beq	13860 <__assert_fail@plt+0x2500>
   13810:	ldr	r3, [fp, #-8]
   13814:	ldrd	r2, [r3]
   13818:	strd	r2, [fp, #-44]	; 0xffffffd4
   1381c:	ldr	r3, [fp, #-8]
   13820:	ldrd	r2, [r3, #96]	; 0x60
   13824:	strd	r2, [fp, #-36]	; 0xffffffdc
   13828:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1382c:	ldr	r3, [r3, #56]	; 0x38
   13830:	sub	r2, fp, #44	; 0x2c
   13834:	mov	r1, r2
   13838:	mov	r0, r3
   1383c:	bl	18064 <__assert_fail@plt+0x6d04>
   13840:	str	r0, [fp, #-12]
   13844:	ldr	r3, [fp, #-12]
   13848:	cmp	r3, #0
   1384c:	bne	13854 <__assert_fail@plt+0x24f4>
   13850:	bl	11318 <abort@plt>
   13854:	ldr	r0, [fp, #-12]
   13858:	bl	1347c <__assert_fail@plt+0x211c>
   1385c:	b	13908 <__assert_fail@plt+0x25a8>
   13860:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13864:	ldr	r3, [r3, #4]
   13868:	str	r3, [fp, #-16]
   1386c:	ldr	r3, [fp, #-16]
   13870:	cmp	r3, #0
   13874:	beq	13908 <__assert_fail@plt+0x25a8>
   13878:	ldr	r3, [fp, #-16]
   1387c:	ldr	r3, [r3, #48]	; 0x30
   13880:	cmp	r3, #0
   13884:	blt	13908 <__assert_fail@plt+0x25a8>
   13888:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1388c:	ldr	r3, [r3, #56]	; 0x38
   13890:	ldrd	r2, [r3, #16]
   13894:	orrs	r3, r2, r3
   13898:	bne	138a0 <__assert_fail@plt+0x2540>
   1389c:	bl	11318 <abort@plt>
   138a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   138a4:	ldr	r3, [r3, #56]	; 0x38
   138a8:	ldrd	r0, [r3]
   138ac:	ldr	r3, [fp, #-8]
   138b0:	ldrd	r2, [r3, #96]	; 0x60
   138b4:	cmp	r1, r3
   138b8:	cmpeq	r0, r2
   138bc:	bne	13908 <__assert_fail@plt+0x25a8>
   138c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   138c4:	ldr	r3, [r3, #56]	; 0x38
   138c8:	ldrd	r0, [r3, #8]
   138cc:	ldr	r3, [fp, #-8]
   138d0:	ldrd	r2, [r3]
   138d4:	cmp	r1, r3
   138d8:	cmpeq	r0, r2
   138dc:	bne	13908 <__assert_fail@plt+0x25a8>
   138e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   138e4:	ldr	r1, [r3, #56]	; 0x38
   138e8:	ldr	r3, [fp, #-16]
   138ec:	ldrd	r2, [r3, #64]	; 0x40
   138f0:	strd	r2, [r1, #8]
   138f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   138f8:	ldr	r1, [r3, #56]	; 0x38
   138fc:	ldr	r3, [fp, #-16]
   13900:	ldrd	r2, [r3, #160]	; 0xa0
   13904:	strd	r2, [r1]
   13908:	nop			; (mov r0, r0)
   1390c:	sub	sp, fp, #4
   13910:	pop	{fp, pc}
   13914:	andeq	r0, r0, r2, lsl #2
   13918:	push	{fp, lr}
   1391c:	add	fp, sp, #4
   13920:	sub	sp, sp, #8
   13924:	str	r0, [fp, #-8]
   13928:	ldr	r3, [fp, #-8]
   1392c:	ldr	r2, [r3, #48]	; 0x30
   13930:	ldr	r3, [pc, #72]	; 13980 <__assert_fail@plt+0x2620>
   13934:	and	r3, r3, r2
   13938:	cmp	r3, #0
   1393c:	beq	13964 <__assert_fail@plt+0x2604>
   13940:	ldr	r3, [fp, #-8]
   13944:	ldr	r3, [r3, #56]	; 0x38
   13948:	cmp	r3, #0
   1394c:	beq	13974 <__assert_fail@plt+0x2614>
   13950:	ldr	r3, [fp, #-8]
   13954:	ldr	r3, [r3, #56]	; 0x38
   13958:	mov	r0, r3
   1395c:	bl	17594 <__assert_fail@plt+0x6234>
   13960:	b	13974 <__assert_fail@plt+0x2614>
   13964:	ldr	r3, [fp, #-8]
   13968:	ldr	r3, [r3, #56]	; 0x38
   1396c:	mov	r0, r3
   13970:	bl	1347c <__assert_fail@plt+0x211c>
   13974:	nop			; (mov r0, r0)
   13978:	sub	sp, fp, #4
   1397c:	pop	{fp, pc}
   13980:	andeq	r0, r0, r2, lsl #2
   13984:	push	{fp, lr}
   13988:	add	fp, sp, #4
   1398c:	sub	sp, sp, #16
   13990:	str	r0, [fp, #-16]
   13994:	b	139b8 <__assert_fail@plt+0x2658>
   13998:	ldr	r0, [fp, #-16]
   1399c:	bl	183e0 <__assert_fail@plt+0x7080>
   139a0:	str	r0, [fp, #-8]
   139a4:	ldr	r3, [fp, #-8]
   139a8:	cmp	r3, #0
   139ac:	blt	139b8 <__assert_fail@plt+0x2658>
   139b0:	ldr	r0, [fp, #-8]
   139b4:	bl	11324 <close@plt>
   139b8:	ldr	r0, [fp, #-16]
   139bc:	bl	182f8 <__assert_fail@plt+0x6f98>
   139c0:	mov	r3, r0
   139c4:	eor	r3, r3, #1
   139c8:	uxtb	r3, r3
   139cc:	cmp	r3, #0
   139d0:	bne	13998 <__assert_fail@plt+0x2638>
   139d4:	nop			; (mov r0, r0)
   139d8:	sub	sp, fp, #4
   139dc:	pop	{fp, pc}
   139e0:	push	{fp, lr}
   139e4:	add	fp, sp, #4
   139e8:	sub	sp, sp, #8
   139ec:	str	r0, [fp, #-8]
   139f0:	mov	r3, r1
   139f4:	strb	r3, [fp, #-9]
   139f8:	ldr	r3, [fp, #-8]
   139fc:	ldrh	r3, [r3, #56]	; 0x38
   13a00:	cmp	r3, #11
   13a04:	beq	13a0c <__assert_fail@plt+0x26ac>
   13a08:	bl	11318 <abort@plt>
   13a0c:	ldrb	r3, [fp, #-9]
   13a10:	cmp	r3, #0
   13a14:	beq	13a24 <__assert_fail@plt+0x26c4>
   13a18:	mov	r2, #2
   13a1c:	mov	r3, #0
   13a20:	b	13a2c <__assert_fail@plt+0x26cc>
   13a24:	mov	r2, #1
   13a28:	mov	r3, #0
   13a2c:	ldr	r1, [fp, #-8]
   13a30:	strd	r2, [r1, #112]	; 0x70
   13a34:	nop			; (mov r0, r0)
   13a38:	sub	sp, fp, #4
   13a3c:	pop	{fp, pc}
   13a40:	push	{fp, lr}
   13a44:	add	fp, sp, #4
   13a48:	sub	sp, sp, #24
   13a4c:	str	r0, [fp, #-16]
   13a50:	str	r1, [fp, #-20]	; 0xffffffec
   13a54:	mov	r3, r2
   13a58:	strb	r3, [fp, #-21]	; 0xffffffeb
   13a5c:	ldr	r3, [fp, #-16]
   13a60:	ldr	r3, [r3, #32]
   13a64:	str	r3, [fp, #-8]
   13a68:	ldr	r2, [fp, #-8]
   13a6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a70:	cmp	r2, r3
   13a74:	bne	13a88 <__assert_fail@plt+0x2728>
   13a78:	ldr	r3, [fp, #-8]
   13a7c:	cmn	r3, #100	; 0x64
   13a80:	beq	13a88 <__assert_fail@plt+0x2728>
   13a84:	bl	11318 <abort@plt>
   13a88:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   13a8c:	cmp	r3, #0
   13a90:	beq	13ac4 <__assert_fail@plt+0x2764>
   13a94:	ldr	r3, [fp, #-16]
   13a98:	add	r3, r3, #60	; 0x3c
   13a9c:	ldr	r1, [fp, #-8]
   13aa0:	mov	r0, r3
   13aa4:	bl	18320 <__assert_fail@plt+0x6fc0>
   13aa8:	str	r0, [fp, #-12]
   13aac:	ldr	r3, [fp, #-12]
   13ab0:	cmp	r3, #0
   13ab4:	blt	13aec <__assert_fail@plt+0x278c>
   13ab8:	ldr	r0, [fp, #-12]
   13abc:	bl	11324 <close@plt>
   13ac0:	b	13aec <__assert_fail@plt+0x278c>
   13ac4:	ldr	r3, [fp, #-16]
   13ac8:	ldr	r3, [r3, #48]	; 0x30
   13acc:	and	r3, r3, #4
   13ad0:	cmp	r3, #0
   13ad4:	bne	13aec <__assert_fail@plt+0x278c>
   13ad8:	ldr	r3, [fp, #-8]
   13adc:	cmp	r3, #0
   13ae0:	blt	13aec <__assert_fail@plt+0x278c>
   13ae4:	ldr	r0, [fp, #-8]
   13ae8:	bl	11324 <close@plt>
   13aec:	ldr	r3, [fp, #-16]
   13af0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13af4:	str	r2, [r3, #32]
   13af8:	nop			; (mov r0, r0)
   13afc:	sub	sp, fp, #4
   13b00:	pop	{fp, pc}
   13b04:	push	{fp, lr}
   13b08:	add	fp, sp, #4
   13b0c:	sub	sp, sp, #16
   13b10:	str	r0, [fp, #-16]
   13b14:	ldr	r3, [fp, #-16]
   13b18:	ldr	r3, [r3, #48]	; 0x30
   13b1c:	and	r3, r3, #4
   13b20:	cmp	r3, #0
   13b24:	bne	13bb4 <__assert_fail@plt+0x2854>
   13b28:	ldr	r3, [fp, #-16]
   13b2c:	ldr	r3, [r3, #48]	; 0x30
   13b30:	and	r3, r3, #512	; 0x200
   13b34:	cmp	r3, #0
   13b38:	beq	13b74 <__assert_fail@plt+0x2814>
   13b3c:	ldr	r3, [fp, #-16]
   13b40:	ldr	r3, [r3, #48]	; 0x30
   13b44:	and	r3, r3, #512	; 0x200
   13b48:	cmp	r3, #0
   13b4c:	bne	13b5c <__assert_fail@plt+0x27fc>
   13b50:	ldr	r3, [fp, #-16]
   13b54:	ldr	r3, [r3, #28]
   13b58:	b	13b60 <__assert_fail@plt+0x2800>
   13b5c:	mvn	r3, #99	; 0x63
   13b60:	mov	r2, #1
   13b64:	mov	r1, r3
   13b68:	ldr	r0, [fp, #-16]
   13b6c:	bl	13a40 <__assert_fail@plt+0x26e0>
   13b70:	b	13bb4 <__assert_fail@plt+0x2854>
   13b74:	ldr	r3, [fp, #-16]
   13b78:	ldr	r3, [r3, #48]	; 0x30
   13b7c:	and	r3, r3, #512	; 0x200
   13b80:	cmp	r3, #0
   13b84:	bne	13b94 <__assert_fail@plt+0x2834>
   13b88:	ldr	r3, [fp, #-16]
   13b8c:	ldr	r3, [r3, #28]
   13b90:	b	13b98 <__assert_fail@plt+0x2838>
   13b94:	mvn	r3, #99	; 0x63
   13b98:	mov	r0, r3
   13b9c:	bl	112d0 <fchdir@plt>
   13ba0:	mov	r3, r0
   13ba4:	cmp	r3, #0
   13ba8:	beq	13bb4 <__assert_fail@plt+0x2854>
   13bac:	mov	r3, #1
   13bb0:	b	13bb8 <__assert_fail@plt+0x2858>
   13bb4:	mov	r3, #0
   13bb8:	str	r3, [fp, #-8]
   13bbc:	ldr	r3, [fp, #-16]
   13bc0:	add	r3, r3, #60	; 0x3c
   13bc4:	mov	r0, r3
   13bc8:	bl	13984 <__assert_fail@plt+0x2624>
   13bcc:	ldr	r3, [fp, #-8]
   13bd0:	mov	r0, r3
   13bd4:	sub	sp, fp, #4
   13bd8:	pop	{fp, pc}
   13bdc:	push	{fp, lr}
   13be0:	add	fp, sp, #4
   13be4:	sub	sp, sp, #16
   13be8:	str	r0, [fp, #-16]
   13bec:	str	r1, [fp, #-20]	; 0xffffffec
   13bf0:	ldr	r3, [fp, #-16]
   13bf4:	ldr	r3, [r3, #48]	; 0x30
   13bf8:	and	r3, r3, #16
   13bfc:	cmp	r3, #0
   13c00:	beq	13c0c <__assert_fail@plt+0x28ac>
   13c04:	ldr	r3, [pc, #96]	; 13c6c <__assert_fail@plt+0x290c>
   13c08:	b	13c10 <__assert_fail@plt+0x28b0>
   13c0c:	ldr	r3, [pc, #92]	; 13c70 <__assert_fail@plt+0x2910>
   13c10:	str	r3, [fp, #-8]
   13c14:	ldr	r3, [fp, #-16]
   13c18:	ldr	r3, [r3, #48]	; 0x30
   13c1c:	and	r3, r3, #512	; 0x200
   13c20:	cmp	r3, #0
   13c24:	beq	13c48 <__assert_fail@plt+0x28e8>
   13c28:	ldr	r3, [fp, #-16]
   13c2c:	ldr	r3, [r3, #32]
   13c30:	ldr	r2, [fp, #-8]
   13c34:	ldr	r1, [fp, #-20]	; 0xffffffec
   13c38:	mov	r0, r3
   13c3c:	bl	18518 <__assert_fail@plt+0x71b8>
   13c40:	mov	r3, r0
   13c44:	b	13c58 <__assert_fail@plt+0x28f8>
   13c48:	ldr	r1, [fp, #-8]
   13c4c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13c50:	bl	1dc84 <__assert_fail@plt+0xc924>
   13c54:	mov	r3, r0
   13c58:	str	r3, [fp, #-12]
   13c5c:	ldr	r3, [fp, #-12]
   13c60:	mov	r0, r3
   13c64:	sub	sp, fp, #4
   13c68:	pop	{fp, pc}
   13c6c:	andeq	ip, r8, r0, lsl #18
   13c70:	andeq	r4, r8, r0, lsl #18
   13c74:	push	{r4, r5, r6, r7, r8, fp, lr}
   13c78:	add	fp, sp, #24
   13c7c:	sub	sp, sp, #36	; 0x24
   13c80:	str	r0, [fp, #-56]	; 0xffffffc8
   13c84:	mov	r7, r1
   13c88:	str	r2, [fp, #-60]	; 0xffffffc4
   13c8c:	mov	r3, #0
   13c90:	str	r3, [fp, #-32]	; 0xffffffe0
   13c94:	mov	r3, #0
   13c98:	str	r3, [fp, #-36]	; 0xffffffdc
   13c9c:	bic	r3, r7, #4080	; 0xff0
   13ca0:	bic	r3, r3, #15
   13ca4:	cmp	r3, #0
   13ca8:	beq	13cc4 <__assert_fail@plt+0x2964>
   13cac:	bl	11228 <__errno_location@plt>
   13cb0:	mov	r2, r0
   13cb4:	mov	r3, #22
   13cb8:	str	r3, [r2]
   13cbc:	mov	r3, #0
   13cc0:	b	140d8 <__assert_fail@plt+0x2d78>
   13cc4:	and	r3, r7, #4
   13cc8:	cmp	r3, #0
   13ccc:	beq	13cf4 <__assert_fail@plt+0x2994>
   13cd0:	and	r3, r7, #512	; 0x200
   13cd4:	cmp	r3, #0
   13cd8:	beq	13cf4 <__assert_fail@plt+0x2994>
   13cdc:	bl	11228 <__errno_location@plt>
   13ce0:	mov	r2, r0
   13ce4:	mov	r3, #22
   13ce8:	str	r3, [r2]
   13cec:	mov	r3, #0
   13cf0:	b	140d8 <__assert_fail@plt+0x2d78>
   13cf4:	and	r3, r7, #18
   13cf8:	cmp	r3, #0
   13cfc:	bne	13d18 <__assert_fail@plt+0x29b8>
   13d00:	bl	11228 <__errno_location@plt>
   13d04:	mov	r2, r0
   13d08:	mov	r3, #22
   13d0c:	str	r3, [r2]
   13d10:	mov	r3, #0
   13d14:	b	140d8 <__assert_fail@plt+0x2d78>
   13d18:	mov	r1, #96	; 0x60
   13d1c:	mov	r0, #1
   13d20:	bl	1cfa8 <__assert_fail@plt+0xbc48>
   13d24:	mov	r3, r0
   13d28:	mov	r4, r3
   13d2c:	cmp	r4, #0
   13d30:	bne	13d3c <__assert_fail@plt+0x29dc>
   13d34:	mov	r3, #0
   13d38:	b	140d8 <__assert_fail@plt+0x2d78>
   13d3c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13d40:	str	r3, [r4, #44]	; 0x2c
   13d44:	str	r7, [r4, #48]	; 0x30
   13d48:	ldr	r3, [r4, #48]	; 0x30
   13d4c:	and	r3, r3, #2
   13d50:	cmp	r3, #0
   13d54:	beq	13d70 <__assert_fail@plt+0x2a10>
   13d58:	ldr	r3, [r4, #48]	; 0x30
   13d5c:	orr	r3, r3, #4
   13d60:	str	r3, [r4, #48]	; 0x30
   13d64:	ldr	r3, [r4, #48]	; 0x30
   13d68:	bic	r3, r3, #512	; 0x200
   13d6c:	str	r3, [r4, #48]	; 0x30
   13d70:	mvn	r3, #99	; 0x63
   13d74:	str	r3, [r4, #32]
   13d78:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13d7c:	bl	163e8 <__assert_fail@plt+0x5088>
   13d80:	str	r0, [fp, #-44]	; 0xffffffd4
   13d84:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13d88:	cmp	r3, #4096	; 0x1000
   13d8c:	movcs	r3, r3
   13d90:	movcc	r3, #4096	; 0x1000
   13d94:	mov	r1, r3
   13d98:	mov	r0, r4
   13d9c:	bl	161c0 <__assert_fail@plt+0x4e60>
   13da0:	mov	r3, r0
   13da4:	eor	r3, r3, #1
   13da8:	uxtb	r3, r3
   13dac:	cmp	r3, #0
   13db0:	bne	140c8 <__assert_fail@plt+0x2d68>
   13db4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13db8:	ldr	r3, [r3]
   13dbc:	cmp	r3, #0
   13dc0:	beq	13df0 <__assert_fail@plt+0x2a90>
   13dc4:	mov	r2, #0
   13dc8:	ldr	r1, [pc, #788]	; 140e4 <__assert_fail@plt+0x2d84>
   13dcc:	mov	r0, r4
   13dd0:	bl	160bc <__assert_fail@plt+0x4d5c>
   13dd4:	str	r0, [fp, #-32]	; 0xffffffe0
   13dd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13ddc:	cmp	r3, #0
   13de0:	beq	140b4 <__assert_fail@plt+0x2d54>
   13de4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13de8:	mvn	r2, #0
   13dec:	str	r2, [r3, #48]	; 0x30
   13df0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13df4:	cmp	r3, #0
   13df8:	beq	13e0c <__assert_fail@plt+0x2aac>
   13dfc:	ldr	r3, [r4, #48]	; 0x30
   13e00:	and	r3, r3, #1024	; 0x400
   13e04:	cmp	r3, #0
   13e08:	beq	13e14 <__assert_fail@plt+0x2ab4>
   13e0c:	mov	r3, #1
   13e10:	b	13e18 <__assert_fail@plt+0x2ab8>
   13e14:	mov	r3, #0
   13e18:	strb	r3, [fp, #-45]	; 0xffffffd3
   13e1c:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   13e20:	and	r3, r3, #1
   13e24:	strb	r3, [fp, #-45]	; 0xffffffd3
   13e28:	mov	r6, #0
   13e2c:	mov	r8, #0
   13e30:	b	13f90 <__assert_fail@plt+0x2c30>
   13e34:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13e38:	ldr	r3, [r3]
   13e3c:	mov	r0, r3
   13e40:	bl	111ec <strlen@plt>
   13e44:	str	r0, [fp, #-40]	; 0xffffffd8
   13e48:	and	r3, r7, #2048	; 0x800
   13e4c:	cmp	r3, #0
   13e50:	bne	13ec0 <__assert_fail@plt+0x2b60>
   13e54:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13e58:	ldr	r3, [r3]
   13e5c:	str	r3, [fp, #-52]	; 0xffffffcc
   13e60:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13e64:	cmp	r3, #2
   13e68:	bls	13ec0 <__assert_fail@plt+0x2b60>
   13e6c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13e70:	sub	r3, r3, #1
   13e74:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13e78:	add	r3, r2, r3
   13e7c:	ldrb	r3, [r3]
   13e80:	cmp	r3, #47	; 0x2f
   13e84:	bne	13ec0 <__assert_fail@plt+0x2b60>
   13e88:	b	13e98 <__assert_fail@plt+0x2b38>
   13e8c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13e90:	sub	r3, r3, #1
   13e94:	str	r3, [fp, #-40]	; 0xffffffd8
   13e98:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13e9c:	cmp	r3, #1
   13ea0:	bls	13ec0 <__assert_fail@plt+0x2b60>
   13ea4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13ea8:	sub	r3, r3, #2
   13eac:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13eb0:	add	r3, r2, r3
   13eb4:	ldrb	r3, [r3]
   13eb8:	cmp	r3, #47	; 0x2f
   13ebc:	beq	13e8c <__assert_fail@plt+0x2b2c>
   13ec0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13ec4:	ldr	r3, [r3]
   13ec8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13ecc:	mov	r1, r3
   13ed0:	mov	r0, r4
   13ed4:	bl	160bc <__assert_fail@plt+0x4d5c>
   13ed8:	mov	r5, r0
   13edc:	cmp	r5, #0
   13ee0:	beq	1408c <__assert_fail@plt+0x2d2c>
   13ee4:	mov	r3, #0
   13ee8:	str	r3, [r5, #48]	; 0x30
   13eec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13ef0:	str	r3, [r5, #4]
   13ef4:	add	r3, r5, #168	; 0xa8
   13ef8:	str	r3, [r5, #24]
   13efc:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   13f00:	cmp	r3, #0
   13f04:	beq	13f28 <__assert_fail@plt+0x2bc8>
   13f08:	cmp	r6, #0
   13f0c:	beq	13f28 <__assert_fail@plt+0x2bc8>
   13f10:	mov	r3, #11
   13f14:	strh	r3, [r5, #56]	; 0x38
   13f18:	mov	r1, #1
   13f1c:	mov	r0, r5
   13f20:	bl	139e0 <__assert_fail@plt+0x2680>
   13f24:	b	13f40 <__assert_fail@plt+0x2be0>
   13f28:	mov	r2, #0
   13f2c:	mov	r1, r5
   13f30:	mov	r0, r4
   13f34:	bl	15d44 <__assert_fail@plt+0x49e4>
   13f38:	mov	r3, r0
   13f3c:	strh	r3, [r5, #56]	; 0x38
   13f40:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13f44:	cmp	r3, #0
   13f48:	beq	13f58 <__assert_fail@plt+0x2bf8>
   13f4c:	str	r6, [r5, #8]
   13f50:	mov	r6, r5
   13f54:	b	13f80 <__assert_fail@plt+0x2c20>
   13f58:	mov	r3, #0
   13f5c:	str	r3, [r5, #8]
   13f60:	cmp	r6, #0
   13f64:	bne	13f74 <__assert_fail@plt+0x2c14>
   13f68:	mov	r6, r5
   13f6c:	str	r6, [fp, #-36]	; 0xffffffdc
   13f70:	b	13f80 <__assert_fail@plt+0x2c20>
   13f74:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13f78:	str	r5, [r3, #8]
   13f7c:	str	r5, [fp, #-36]	; 0xffffffdc
   13f80:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13f84:	add	r3, r3, #4
   13f88:	str	r3, [fp, #-56]	; 0xffffffc8
   13f8c:	add	r8, r8, #1
   13f90:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13f94:	ldr	r3, [r3]
   13f98:	cmp	r3, #0
   13f9c:	bne	13e34 <__assert_fail@plt+0x2ad4>
   13fa0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13fa4:	cmp	r3, #0
   13fa8:	beq	13fc8 <__assert_fail@plt+0x2c68>
   13fac:	cmp	r8, #1
   13fb0:	bls	13fc8 <__assert_fail@plt+0x2c68>
   13fb4:	mov	r2, r8
   13fb8:	mov	r1, r6
   13fbc:	mov	r0, r4
   13fc0:	bl	15f74 <__assert_fail@plt+0x4c14>
   13fc4:	mov	r6, r0
   13fc8:	mov	r2, #0
   13fcc:	ldr	r1, [pc, #272]	; 140e4 <__assert_fail@plt+0x2d84>
   13fd0:	mov	r0, r4
   13fd4:	bl	160bc <__assert_fail@plt+0x4d5c>
   13fd8:	mov	r3, r0
   13fdc:	str	r3, [r4]
   13fe0:	ldr	r3, [r4]
   13fe4:	cmp	r3, #0
   13fe8:	beq	14094 <__assert_fail@plt+0x2d34>
   13fec:	ldr	r3, [r4]
   13ff0:	str	r6, [r3, #8]
   13ff4:	ldr	r3, [r4]
   13ff8:	mov	r2, #9
   13ffc:	strh	r2, [r3, #56]	; 0x38
   14000:	ldr	r3, [r4]
   14004:	mov	r2, #1
   14008:	str	r2, [r3, #48]	; 0x30
   1400c:	mov	r0, r4
   14010:	bl	135cc <__assert_fail@plt+0x226c>
   14014:	mov	r3, r0
   14018:	eor	r3, r3, #1
   1401c:	uxtb	r3, r3
   14020:	cmp	r3, #0
   14024:	bne	1409c <__assert_fail@plt+0x2d3c>
   14028:	ldr	r3, [r4, #48]	; 0x30
   1402c:	and	r3, r3, #4
   14030:	cmp	r3, #0
   14034:	bne	14074 <__assert_fail@plt+0x2d14>
   14038:	ldr	r3, [r4, #48]	; 0x30
   1403c:	and	r3, r3, #512	; 0x200
   14040:	cmp	r3, #0
   14044:	bne	14074 <__assert_fail@plt+0x2d14>
   14048:	ldr	r1, [pc, #152]	; 140e8 <__assert_fail@plt+0x2d88>
   1404c:	mov	r0, r4
   14050:	bl	13bdc <__assert_fail@plt+0x287c>
   14054:	mov	r3, r0
   14058:	str	r3, [r4, #28]
   1405c:	ldr	r3, [r4, #28]
   14060:	cmp	r3, #0
   14064:	bge	14074 <__assert_fail@plt+0x2d14>
   14068:	ldr	r3, [r4, #48]	; 0x30
   1406c:	orr	r3, r3, #4
   14070:	str	r3, [r4, #48]	; 0x30
   14074:	add	r3, r4, #60	; 0x3c
   14078:	mvn	r1, #0
   1407c:	mov	r0, r3
   14080:	bl	18270 <__assert_fail@plt+0x6f10>
   14084:	mov	r3, r4
   14088:	b	140d8 <__assert_fail@plt+0x2d78>
   1408c:	nop			; (mov r0, r0)
   14090:	b	140a0 <__assert_fail@plt+0x2d40>
   14094:	nop			; (mov r0, r0)
   14098:	b	140a0 <__assert_fail@plt+0x2d40>
   1409c:	nop			; (mov r0, r0)
   140a0:	mov	r0, r6
   140a4:	bl	16178 <__assert_fail@plt+0x4e18>
   140a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   140ac:	bl	1347c <__assert_fail@plt+0x211c>
   140b0:	b	140b8 <__assert_fail@plt+0x2d58>
   140b4:	nop			; (mov r0, r0)
   140b8:	ldr	r3, [r4, #24]
   140bc:	mov	r0, r3
   140c0:	bl	1347c <__assert_fail@plt+0x211c>
   140c4:	b	140cc <__assert_fail@plt+0x2d6c>
   140c8:	nop			; (mov r0, r0)
   140cc:	mov	r0, r4
   140d0:	bl	1347c <__assert_fail@plt+0x211c>
   140d4:	mov	r3, #0
   140d8:	mov	r0, r3
   140dc:	sub	sp, fp, #24
   140e0:	pop	{r4, r5, r6, r7, r8, fp, pc}
   140e4:	ldrdeq	r0, [r2], -r8
   140e8:	ldrdeq	r0, [r2], -ip
   140ec:	push	{r4, r5, r6, fp, lr}
   140f0:	add	fp, sp, #16
   140f4:	sub	sp, sp, #12
   140f8:	str	r0, [fp, #-24]	; 0xffffffe8
   140fc:	mov	r4, r1
   14100:	ldr	r3, [r4, #52]	; 0x34
   14104:	str	r3, [r4, #40]	; 0x28
   14108:	ldr	r6, [r4, #40]	; 0x28
   1410c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14110:	ldr	r3, [r3, #24]
   14114:	add	r1, r4, #168	; 0xa8
   14118:	add	r2, r6, #1
   1411c:	mov	r0, r3
   14120:	bl	11078 <memmove@plt>
   14124:	add	r3, r4, #168	; 0xa8
   14128:	mov	r1, #47	; 0x2f
   1412c:	mov	r0, r3
   14130:	bl	11294 <strrchr@plt>
   14134:	mov	r5, r0
   14138:	cmp	r5, #0
   1413c:	beq	14184 <__assert_fail@plt+0x2e24>
   14140:	add	r3, r4, #168	; 0xa8
   14144:	cmp	r3, r5
   14148:	bne	1415c <__assert_fail@plt+0x2dfc>
   1414c:	add	r3, r5, #1
   14150:	ldrb	r3, [r3]
   14154:	cmp	r3, #0
   14158:	beq	14184 <__assert_fail@plt+0x2e24>
   1415c:	add	r5, r5, #1
   14160:	mov	r0, r5
   14164:	bl	111ec <strlen@plt>
   14168:	mov	r6, r0
   1416c:	add	r3, r4, #168	; 0xa8
   14170:	add	r2, r6, #1
   14174:	mov	r1, r5
   14178:	mov	r0, r3
   1417c:	bl	11078 <memmove@plt>
   14180:	str	r6, [r4, #52]	; 0x34
   14184:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14188:	ldr	r3, [r3, #24]
   1418c:	str	r3, [r4, #28]
   14190:	ldr	r3, [r4, #28]
   14194:	str	r3, [r4, #24]
   14198:	nop			; (mov r0, r0)
   1419c:	sub	sp, fp, #16
   141a0:	pop	{r4, r5, r6, fp, pc}
   141a4:	push	{r4, r5, fp, lr}
   141a8:	add	fp, sp, #12
   141ac:	sub	sp, sp, #16
   141b0:	str	r0, [fp, #-24]	; 0xffffffe8
   141b4:	mov	r3, #0
   141b8:	str	r3, [fp, #-16]
   141bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   141c0:	ldr	r3, [r3]
   141c4:	cmp	r3, #0
   141c8:	beq	14214 <__assert_fail@plt+0x2eb4>
   141cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   141d0:	ldr	r4, [r3]
   141d4:	b	14200 <__assert_fail@plt+0x2ea0>
   141d8:	mov	r5, r4
   141dc:	ldr	r3, [r4, #8]
   141e0:	cmp	r3, #0
   141e4:	beq	141f0 <__assert_fail@plt+0x2e90>
   141e8:	ldr	r3, [r4, #8]
   141ec:	b	141f4 <__assert_fail@plt+0x2e94>
   141f0:	ldr	r3, [r4, #4]
   141f4:	mov	r4, r3
   141f8:	mov	r0, r5
   141fc:	bl	1347c <__assert_fail@plt+0x211c>
   14200:	ldr	r3, [r4, #48]	; 0x30
   14204:	cmp	r3, #0
   14208:	bge	141d8 <__assert_fail@plt+0x2e78>
   1420c:	mov	r0, r4
   14210:	bl	1347c <__assert_fail@plt+0x211c>
   14214:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14218:	ldr	r3, [r3, #4]
   1421c:	cmp	r3, #0
   14220:	beq	14234 <__assert_fail@plt+0x2ed4>
   14224:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14228:	ldr	r3, [r3, #4]
   1422c:	mov	r0, r3
   14230:	bl	16178 <__assert_fail@plt+0x4e18>
   14234:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14238:	ldr	r3, [r3, #8]
   1423c:	mov	r0, r3
   14240:	bl	1347c <__assert_fail@plt+0x211c>
   14244:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14248:	ldr	r3, [r3, #24]
   1424c:	mov	r0, r3
   14250:	bl	1347c <__assert_fail@plt+0x211c>
   14254:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14258:	ldr	r3, [r3, #48]	; 0x30
   1425c:	and	r3, r3, #512	; 0x200
   14260:	cmp	r3, #0
   14264:	beq	142a8 <__assert_fail@plt+0x2f48>
   14268:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1426c:	ldr	r3, [r3, #32]
   14270:	cmp	r3, #0
   14274:	blt	14320 <__assert_fail@plt+0x2fc0>
   14278:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1427c:	ldr	r3, [r3, #32]
   14280:	mov	r0, r3
   14284:	bl	11324 <close@plt>
   14288:	mov	r3, r0
   1428c:	cmp	r3, #0
   14290:	beq	14320 <__assert_fail@plt+0x2fc0>
   14294:	bl	11228 <__errno_location@plt>
   14298:	mov	r3, r0
   1429c:	ldr	r3, [r3]
   142a0:	str	r3, [fp, #-16]
   142a4:	b	14320 <__assert_fail@plt+0x2fc0>
   142a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   142ac:	ldr	r3, [r3, #48]	; 0x30
   142b0:	and	r3, r3, #4
   142b4:	cmp	r3, #0
   142b8:	bne	14320 <__assert_fail@plt+0x2fc0>
   142bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   142c0:	ldr	r3, [r3, #28]
   142c4:	mov	r0, r3
   142c8:	bl	112d0 <fchdir@plt>
   142cc:	mov	r3, r0
   142d0:	cmp	r3, #0
   142d4:	beq	142e8 <__assert_fail@plt+0x2f88>
   142d8:	bl	11228 <__errno_location@plt>
   142dc:	mov	r3, r0
   142e0:	ldr	r3, [r3]
   142e4:	str	r3, [fp, #-16]
   142e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   142ec:	ldr	r3, [r3, #28]
   142f0:	mov	r0, r3
   142f4:	bl	11324 <close@plt>
   142f8:	mov	r3, r0
   142fc:	cmp	r3, #0
   14300:	beq	14320 <__assert_fail@plt+0x2fc0>
   14304:	ldr	r3, [fp, #-16]
   14308:	cmp	r3, #0
   1430c:	bne	14320 <__assert_fail@plt+0x2fc0>
   14310:	bl	11228 <__errno_location@plt>
   14314:	mov	r3, r0
   14318:	ldr	r3, [r3]
   1431c:	str	r3, [fp, #-16]
   14320:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14324:	add	r3, r3, #60	; 0x3c
   14328:	mov	r0, r3
   1432c:	bl	13984 <__assert_fail@plt+0x2624>
   14330:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14334:	ldr	r3, [r3, #52]	; 0x34
   14338:	cmp	r3, #0
   1433c:	beq	14350 <__assert_fail@plt+0x2ff0>
   14340:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14344:	ldr	r3, [r3, #52]	; 0x34
   14348:	mov	r0, r3
   1434c:	bl	17594 <__assert_fail@plt+0x6234>
   14350:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14354:	bl	13918 <__assert_fail@plt+0x25b8>
   14358:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1435c:	bl	1347c <__assert_fail@plt+0x211c>
   14360:	ldr	r3, [fp, #-16]
   14364:	cmp	r3, #0
   14368:	beq	14384 <__assert_fail@plt+0x3024>
   1436c:	bl	11228 <__errno_location@plt>
   14370:	mov	r2, r0
   14374:	ldr	r3, [fp, #-16]
   14378:	str	r3, [r2]
   1437c:	mvn	r3, #0
   14380:	b	14388 <__assert_fail@plt+0x3028>
   14384:	mov	r3, #0
   14388:	mov	r0, r3
   1438c:	sub	sp, fp, #12
   14390:	pop	{r4, r5, fp, pc}
   14394:	push	{fp, lr}
   14398:	add	fp, sp, #4
   1439c:	sub	sp, sp, #24
   143a0:	str	r0, [fp, #-24]	; 0xffffffe8
   143a4:	str	r1, [fp, #-28]	; 0xffffffe4
   143a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   143ac:	str	r3, [fp, #-8]
   143b0:	ldr	r3, [fp, #-8]
   143b4:	ldrd	r2, [r3]
   143b8:	strd	r2, [fp, #-20]	; 0xffffffec
   143bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   143c0:	mov	r2, r3
   143c4:	mov	r3, #0
   143c8:	ldrd	r0, [fp, #-20]	; 0xffffffec
   143cc:	bl	1ecf4 <__assert_fail@plt+0xd994>
   143d0:	mov	r3, r2
   143d4:	mov	r0, r3
   143d8:	sub	sp, fp, #4
   143dc:	pop	{fp, pc}
   143e0:	push	{fp}		; (str fp, [sp, #-4]!)
   143e4:	add	fp, sp, #0
   143e8:	sub	sp, sp, #20
   143ec:	str	r0, [fp, #-16]
   143f0:	str	r1, [fp, #-20]	; 0xffffffec
   143f4:	ldr	r3, [fp, #-16]
   143f8:	str	r3, [fp, #-8]
   143fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14400:	str	r3, [fp, #-12]
   14404:	ldr	r3, [fp, #-8]
   14408:	ldrd	r0, [r3]
   1440c:	ldr	r3, [fp, #-12]
   14410:	ldrd	r2, [r3]
   14414:	cmp	r1, r3
   14418:	cmpeq	r0, r2
   1441c:	moveq	r3, #1
   14420:	movne	r3, #0
   14424:	uxtb	r3, r3
   14428:	mov	r0, r3
   1442c:	add	sp, fp, #0
   14430:	pop	{fp}		; (ldr fp, [sp], #4)
   14434:	bx	lr
   14438:	push	{fp, lr}
   1443c:	add	fp, sp, #4
   14440:	sub	sp, sp, #136	; 0x88
   14444:	str	r0, [fp, #-128]	; 0xffffff80
   14448:	str	r1, [fp, #-132]	; 0xffffff7c
   1444c:	ldr	r3, [fp, #-128]	; 0xffffff80
   14450:	ldr	r3, [r3, #44]	; 0x2c
   14454:	str	r3, [fp, #-12]
   14458:	ldr	r3, [fp, #-12]
   1445c:	ldr	r3, [r3, #52]	; 0x34
   14460:	str	r3, [fp, #-8]
   14464:	ldr	r3, [fp, #-12]
   14468:	ldr	r3, [r3, #48]	; 0x30
   1446c:	and	r3, r3, #512	; 0x200
   14470:	cmp	r3, #0
   14474:	bne	14480 <__assert_fail@plt+0x3120>
   14478:	mov	r3, #0
   1447c:	b	145b8 <__assert_fail@plt+0x3258>
   14480:	ldr	r3, [fp, #-8]
   14484:	cmp	r3, #0
   14488:	bne	144c4 <__assert_fail@plt+0x3164>
   1448c:	ldr	r3, [pc, #304]	; 145c4 <__assert_fail@plt+0x3264>
   14490:	str	r3, [sp]
   14494:	ldr	r3, [pc, #300]	; 145c8 <__assert_fail@plt+0x3268>
   14498:	ldr	r2, [pc, #300]	; 145cc <__assert_fail@plt+0x326c>
   1449c:	mov	r1, #0
   144a0:	mov	r0, #13
   144a4:	bl	172b8 <__assert_fail@plt+0x5f58>
   144a8:	mov	r3, r0
   144ac:	mov	r2, r3
   144b0:	ldr	r3, [fp, #-12]
   144b4:	str	r2, [r3, #52]	; 0x34
   144b8:	ldr	r3, [fp, #-12]
   144bc:	ldr	r3, [r3, #52]	; 0x34
   144c0:	str	r3, [fp, #-8]
   144c4:	ldr	r3, [fp, #-8]
   144c8:	cmp	r3, #0
   144cc:	beq	14508 <__assert_fail@plt+0x31a8>
   144d0:	ldr	r3, [fp, #-128]	; 0xffffff80
   144d4:	ldrd	r2, [r3, #64]	; 0x40
   144d8:	strd	r2, [fp, #-124]	; 0xffffff84
   144dc:	sub	r3, fp, #124	; 0x7c
   144e0:	mov	r1, r3
   144e4:	ldr	r0, [fp, #-8]
   144e8:	bl	16a6c <__assert_fail@plt+0x570c>
   144ec:	str	r0, [fp, #-16]
   144f0:	ldr	r3, [fp, #-16]
   144f4:	cmp	r3, #0
   144f8:	beq	14508 <__assert_fail@plt+0x31a8>
   144fc:	ldr	r3, [fp, #-16]
   14500:	ldr	r3, [r3, #8]
   14504:	b	145b8 <__assert_fail@plt+0x3258>
   14508:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1450c:	cmp	r3, #0
   14510:	blt	14530 <__assert_fail@plt+0x31d0>
   14514:	sub	r3, fp, #108	; 0x6c
   14518:	mov	r1, r3
   1451c:	ldr	r0, [fp, #-132]	; 0xffffff7c
   14520:	bl	11000 <fstatfs64@plt>
   14524:	mov	r3, r0
   14528:	cmp	r3, #0
   1452c:	beq	14538 <__assert_fail@plt+0x31d8>
   14530:	mov	r3, #0
   14534:	b	145b8 <__assert_fail@plt+0x3258>
   14538:	ldr	r3, [fp, #-8]
   1453c:	cmp	r3, #0
   14540:	beq	145b4 <__assert_fail@plt+0x3254>
   14544:	mov	r0, #16
   14548:	bl	1d06c <__assert_fail@plt+0xbd0c>
   1454c:	mov	r3, r0
   14550:	str	r3, [fp, #-20]	; 0xffffffec
   14554:	ldr	r3, [fp, #-20]	; 0xffffffec
   14558:	cmp	r3, #0
   1455c:	beq	145b4 <__assert_fail@plt+0x3254>
   14560:	ldr	r3, [fp, #-128]	; 0xffffff80
   14564:	ldrd	r2, [r3, #64]	; 0x40
   14568:	ldr	r1, [fp, #-20]	; 0xffffffec
   1456c:	strd	r2, [r1]
   14570:	ldr	r2, [fp, #-108]	; 0xffffff94
   14574:	ldr	r3, [fp, #-20]	; 0xffffffec
   14578:	str	r2, [r3, #8]
   1457c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14580:	ldr	r0, [fp, #-8]
   14584:	bl	18000 <__assert_fail@plt+0x6ca0>
   14588:	str	r0, [fp, #-16]
   1458c:	ldr	r3, [fp, #-16]
   14590:	cmp	r3, #0
   14594:	beq	145ac <__assert_fail@plt+0x324c>
   14598:	ldr	r2, [fp, #-16]
   1459c:	ldr	r3, [fp, #-20]	; 0xffffffec
   145a0:	cmp	r2, r3
   145a4:	beq	145b4 <__assert_fail@plt+0x3254>
   145a8:	bl	11318 <abort@plt>
   145ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   145b0:	bl	1347c <__assert_fail@plt+0x211c>
   145b4:	ldr	r3, [fp, #-108]	; 0xffffff94
   145b8:	mov	r0, r3
   145bc:	sub	sp, fp, #4
   145c0:	pop	{fp, pc}
   145c4:	andeq	r3, r1, ip, ror r4
   145c8:	andeq	r4, r1, r0, ror #7
   145cc:	muleq	r1, r4, r3
   145d0:	push	{fp, lr}
   145d4:	add	fp, sp, #4
   145d8:	sub	sp, sp, #8
   145dc:	str	r0, [fp, #-8]
   145e0:	str	r1, [fp, #-12]
   145e4:	ldr	r1, [fp, #-12]
   145e8:	ldr	r0, [fp, #-8]
   145ec:	bl	14438 <__assert_fail@plt+0x30d8>
   145f0:	mov	r3, r0
   145f4:	ldr	r2, [pc, #52]	; 14630 <__assert_fail@plt+0x32d0>
   145f8:	cmp	r3, r2
   145fc:	beq	14618 <__assert_fail@plt+0x32b8>
   14600:	ldr	r2, [pc, #44]	; 14634 <__assert_fail@plt+0x32d4>
   14604:	cmp	r3, r2
   14608:	beq	14618 <__assert_fail@plt+0x32b8>
   1460c:	ldr	r2, [pc, #36]	; 14638 <__assert_fail@plt+0x32d8>
   14610:	cmp	r3, r2
   14614:	bne	14620 <__assert_fail@plt+0x32c0>
   14618:	mov	r3, #0
   1461c:	b	14624 <__assert_fail@plt+0x32c4>
   14620:	mov	r3, #1
   14624:	mov	r0, r3
   14628:	sub	sp, fp, #4
   1462c:	pop	{fp, pc}
   14630:	andeq	r6, r0, r9, ror #18
   14634:			; <UNDEFINED> instruction: 0x01021994
   14638:			; <UNDEFINED> instruction: 0xff534d42
   1463c:	push	{fp, lr}
   14640:	add	fp, sp, #4
   14644:	sub	sp, sp, #8
   14648:	str	r0, [fp, #-8]
   1464c:	str	r1, [fp, #-12]
   14650:	ldr	r1, [fp, #-12]
   14654:	ldr	r0, [fp, #-8]
   14658:	bl	14438 <__assert_fail@plt+0x30d8>
   1465c:	mov	r3, r0
   14660:	ldr	r2, [pc, #88]	; 146c0 <__assert_fail@plt+0x3360>
   14664:	cmp	r3, r2
   14668:	beq	146a8 <__assert_fail@plt+0x3348>
   1466c:	ldr	r2, [pc, #76]	; 146c0 <__assert_fail@plt+0x3360>
   14670:	cmp	r3, r2
   14674:	bgt	14690 <__assert_fail@plt+0x3330>
   14678:	ldr	r2, [pc, #68]	; 146c4 <__assert_fail@plt+0x3364>
   1467c:	cmp	r3, r2
   14680:	beq	146a8 <__assert_fail@plt+0x3348>
   14684:	cmp	r3, #0
   14688:	beq	146a8 <__assert_fail@plt+0x3348>
   1468c:	b	146b0 <__assert_fail@plt+0x3350>
   14690:	ldr	r2, [pc, #48]	; 146c8 <__assert_fail@plt+0x3368>
   14694:	cmp	r3, r2
   14698:	beq	146a8 <__assert_fail@plt+0x3348>
   1469c:	ldr	r2, [pc, #40]	; 146cc <__assert_fail@plt+0x336c>
   146a0:	cmp	r3, r2
   146a4:	bne	146b0 <__assert_fail@plt+0x3350>
   146a8:	mov	r3, #0
   146ac:	b	146b4 <__assert_fail@plt+0x3354>
   146b0:	mov	r3, #1
   146b4:	mov	r0, r3
   146b8:	sub	sp, fp, #4
   146bc:	pop	{fp, pc}
   146c0:	andeq	r6, r0, r9, ror #18
   146c4:			; <UNDEFINED> instruction: 0xff534d42
   146c8:	andeq	r9, r0, r0, lsr #31
   146cc:	movtpl	r4, #24911	; 0x614f
   146d0:	push	{r4, r5, r6, r7, fp, lr}
   146d4:	add	fp, sp, #20
   146d8:	mov	r5, r0
   146dc:	ldr	r3, [r5]
   146e0:	cmp	r3, #0
   146e4:	beq	146f8 <__assert_fail@plt+0x3398>
   146e8:	ldr	r3, [r5, #48]	; 0x30
   146ec:	and	r3, r3, #8192	; 0x2000
   146f0:	cmp	r3, #0
   146f4:	beq	14700 <__assert_fail@plt+0x33a0>
   146f8:	mov	r3, #0
   146fc:	b	14e34 <__assert_fail@plt+0x3ad4>
   14700:	ldr	r4, [r5]
   14704:	ldrh	r6, [r4, #60]	; 0x3c
   14708:	mov	r3, #3
   1470c:	strh	r3, [r4, #60]	; 0x3c
   14710:	cmp	r6, #1
   14714:	bne	14738 <__assert_fail@plt+0x33d8>
   14718:	mov	r2, #0
   1471c:	mov	r1, r4
   14720:	mov	r0, r5
   14724:	bl	15d44 <__assert_fail@plt+0x49e4>
   14728:	mov	r3, r0
   1472c:	strh	r3, [r4, #56]	; 0x38
   14730:	mov	r3, r4
   14734:	b	14e34 <__assert_fail@plt+0x3ad4>
   14738:	cmp	r6, #2
   1473c:	bne	147dc <__assert_fail@plt+0x347c>
   14740:	ldrh	r3, [r4, #56]	; 0x38
   14744:	cmp	r3, #12
   14748:	beq	14758 <__assert_fail@plt+0x33f8>
   1474c:	ldrh	r3, [r4, #56]	; 0x38
   14750:	cmp	r3, #13
   14754:	bne	147dc <__assert_fail@plt+0x347c>
   14758:	mov	r2, #1
   1475c:	mov	r1, r4
   14760:	mov	r0, r5
   14764:	bl	15d44 <__assert_fail@plt+0x49e4>
   14768:	mov	r3, r0
   1476c:	strh	r3, [r4, #56]	; 0x38
   14770:	ldrh	r3, [r4, #56]	; 0x38
   14774:	cmp	r3, #1
   14778:	bne	14b8c <__assert_fail@plt+0x382c>
   1477c:	ldr	r3, [r5, #48]	; 0x30
   14780:	and	r3, r3, #4
   14784:	cmp	r3, #0
   14788:	bne	14b8c <__assert_fail@plt+0x382c>
   1478c:	ldr	r1, [pc, #1704]	; 14e3c <__assert_fail@plt+0x3adc>
   14790:	mov	r0, r5
   14794:	bl	13bdc <__assert_fail@plt+0x287c>
   14798:	mov	r3, r0
   1479c:	str	r3, [r4, #36]	; 0x24
   147a0:	ldr	r3, [r4, #36]	; 0x24
   147a4:	cmp	r3, #0
   147a8:	bge	147c8 <__assert_fail@plt+0x3468>
   147ac:	bl	11228 <__errno_location@plt>
   147b0:	mov	r3, r0
   147b4:	ldr	r3, [r3]
   147b8:	str	r3, [r4, #32]
   147bc:	mov	r3, #7
   147c0:	strh	r3, [r4, #56]	; 0x38
   147c4:	b	14b8c <__assert_fail@plt+0x382c>
   147c8:	ldrh	r3, [r4, #58]	; 0x3a
   147cc:	orr	r3, r3, #2
   147d0:	uxth	r3, r3
   147d4:	strh	r3, [r4, #58]	; 0x3a
   147d8:	b	14b8c <__assert_fail@plt+0x382c>
   147dc:	ldrh	r3, [r4, #56]	; 0x38
   147e0:	cmp	r3, #1
   147e4:	bne	14994 <__assert_fail@plt+0x3634>
   147e8:	cmp	r6, #4
   147ec:	beq	14814 <__assert_fail@plt+0x34b4>
   147f0:	ldr	r3, [r5, #48]	; 0x30
   147f4:	and	r3, r3, #64	; 0x40
   147f8:	cmp	r3, #0
   147fc:	beq	1486c <__assert_fail@plt+0x350c>
   14800:	ldrd	r0, [r4, #64]	; 0x40
   14804:	ldrd	r2, [r5, #16]
   14808:	cmp	r1, r3
   1480c:	cmpeq	r0, r2
   14810:	beq	1486c <__assert_fail@plt+0x350c>
   14814:	ldrh	r3, [r4, #58]	; 0x3a
   14818:	and	r3, r3, #2
   1481c:	cmp	r3, #0
   14820:	beq	14830 <__assert_fail@plt+0x34d0>
   14824:	ldr	r3, [r4, #36]	; 0x24
   14828:	mov	r0, r3
   1482c:	bl	11324 <close@plt>
   14830:	ldr	r3, [r5, #4]
   14834:	cmp	r3, #0
   14838:	beq	14850 <__assert_fail@plt+0x34f0>
   1483c:	ldr	r3, [r5, #4]
   14840:	mov	r0, r3
   14844:	bl	16178 <__assert_fail@plt+0x4e18>
   14848:	mov	r3, #0
   1484c:	str	r3, [r5, #4]
   14850:	mov	r3, #6
   14854:	strh	r3, [r4, #56]	; 0x38
   14858:	mov	r1, r4
   1485c:	mov	r0, r5
   14860:	bl	137d8 <__assert_fail@plt+0x2478>
   14864:	mov	r3, r4
   14868:	b	14e34 <__assert_fail@plt+0x3ad4>
   1486c:	ldr	r3, [r5, #4]
   14870:	cmp	r3, #0
   14874:	beq	148a8 <__assert_fail@plt+0x3548>
   14878:	ldr	r3, [r5, #48]	; 0x30
   1487c:	and	r3, r3, #4096	; 0x1000
   14880:	cmp	r3, #0
   14884:	beq	148a8 <__assert_fail@plt+0x3548>
   14888:	ldr	r3, [r5, #48]	; 0x30
   1488c:	bic	r3, r3, #4096	; 0x1000
   14890:	str	r3, [r5, #48]	; 0x30
   14894:	ldr	r3, [r5, #4]
   14898:	mov	r0, r3
   1489c:	bl	16178 <__assert_fail@plt+0x4e18>
   148a0:	mov	r3, #0
   148a4:	str	r3, [r5, #4]
   148a8:	ldr	r3, [r5, #4]
   148ac:	cmp	r3, #0
   148b0:	beq	14918 <__assert_fail@plt+0x35b8>
   148b4:	ldr	r3, [r4, #24]
   148b8:	mvn	r2, #0
   148bc:	mov	r1, r4
   148c0:	mov	r0, r5
   148c4:	bl	16460 <__assert_fail@plt+0x5100>
   148c8:	mov	r3, r0
   148cc:	cmp	r3, #0
   148d0:	beq	14984 <__assert_fail@plt+0x3624>
   148d4:	bl	11228 <__errno_location@plt>
   148d8:	mov	r3, r0
   148dc:	ldr	r3, [r3]
   148e0:	str	r3, [r4, #32]
   148e4:	ldrh	r3, [r4, #58]	; 0x3a
   148e8:	orr	r3, r3, #1
   148ec:	uxth	r3, r3
   148f0:	strh	r3, [r4, #58]	; 0x3a
   148f4:	ldr	r4, [r5, #4]
   148f8:	b	1490c <__assert_fail@plt+0x35ac>
   148fc:	ldr	r3, [r4, #4]
   14900:	ldr	r3, [r3, #24]
   14904:	str	r3, [r4, #24]
   14908:	ldr	r4, [r4, #8]
   1490c:	cmp	r4, #0
   14910:	bne	148fc <__assert_fail@plt+0x359c>
   14914:	b	14984 <__assert_fail@plt+0x3624>
   14918:	mov	r1, #3
   1491c:	mov	r0, r5
   14920:	bl	1520c <__assert_fail@plt+0x3eac>
   14924:	mov	r3, r0
   14928:	str	r3, [r5, #4]
   1492c:	ldr	r3, [r5, #4]
   14930:	cmp	r3, #0
   14934:	bne	14984 <__assert_fail@plt+0x3624>
   14938:	ldr	r3, [r5, #48]	; 0x30
   1493c:	and	r3, r3, #8192	; 0x2000
   14940:	cmp	r3, #0
   14944:	beq	14950 <__assert_fail@plt+0x35f0>
   14948:	mov	r3, #0
   1494c:	b	14e34 <__assert_fail@plt+0x3ad4>
   14950:	ldr	r3, [r4, #32]
   14954:	cmp	r3, #0
   14958:	beq	14970 <__assert_fail@plt+0x3610>
   1495c:	ldrh	r3, [r4, #56]	; 0x38
   14960:	cmp	r3, #4
   14964:	beq	14970 <__assert_fail@plt+0x3610>
   14968:	mov	r3, #7
   1496c:	strh	r3, [r4, #56]	; 0x38
   14970:	mov	r1, r4
   14974:	mov	r0, r5
   14978:	bl	137d8 <__assert_fail@plt+0x2478>
   1497c:	mov	r3, r4
   14980:	b	14e34 <__assert_fail@plt+0x3ad4>
   14984:	ldr	r4, [r5, #4]
   14988:	mov	r3, #0
   1498c:	str	r3, [r5, #4]
   14990:	b	14b1c <__assert_fail@plt+0x37bc>
   14994:	mov	r6, r4
   14998:	ldr	r3, [r4, #8]
   1499c:	cmp	r3, #0
   149a0:	bne	14a0c <__assert_fail@plt+0x36ac>
   149a4:	ldr	r3, [r4, #4]
   149a8:	ldr	r3, [r3, #12]
   149ac:	cmp	r3, #0
   149b0:	beq	14a0c <__assert_fail@plt+0x36ac>
   149b4:	ldr	r4, [r6, #4]
   149b8:	str	r4, [r5]
   149bc:	ldr	r2, [r5, #24]
   149c0:	ldr	r3, [r4, #40]	; 0x28
   149c4:	add	r3, r2, r3
   149c8:	mov	r2, #0
   149cc:	strb	r2, [r3]
   149d0:	mov	r1, #3
   149d4:	mov	r0, r5
   149d8:	bl	1520c <__assert_fail@plt+0x3eac>
   149dc:	mov	r4, r0
   149e0:	cmp	r4, #0
   149e4:	bne	14a00 <__assert_fail@plt+0x36a0>
   149e8:	ldr	r3, [r5, #48]	; 0x30
   149ec:	and	r3, r3, #8192	; 0x2000
   149f0:	cmp	r3, #0
   149f4:	beq	14c40 <__assert_fail@plt+0x38e0>
   149f8:	mov	r3, #0
   149fc:	b	14e34 <__assert_fail@plt+0x3ad4>
   14a00:	mov	r0, r6
   14a04:	bl	1347c <__assert_fail@plt+0x211c>
   14a08:	b	14b1c <__assert_fail@plt+0x37bc>
   14a0c:	ldr	r4, [r4, #8]
   14a10:	cmp	r4, #0
   14a14:	beq	14c44 <__assert_fail@plt+0x38e4>
   14a18:	str	r4, [r5]
   14a1c:	mov	r0, r6
   14a20:	bl	1347c <__assert_fail@plt+0x211c>
   14a24:	ldr	r3, [r4, #48]	; 0x30
   14a28:	cmp	r3, #0
   14a2c:	bne	14a78 <__assert_fail@plt+0x3718>
   14a30:	mov	r0, r5
   14a34:	bl	13b04 <__assert_fail@plt+0x27a4>
   14a38:	mov	r3, r0
   14a3c:	cmp	r3, #0
   14a40:	beq	14a58 <__assert_fail@plt+0x36f8>
   14a44:	ldr	r3, [r5, #48]	; 0x30
   14a48:	orr	r3, r3, #8192	; 0x2000
   14a4c:	str	r3, [r5, #48]	; 0x30
   14a50:	mov	r3, #0
   14a54:	b	14e34 <__assert_fail@plt+0x3ad4>
   14a58:	mov	r0, r5
   14a5c:	bl	13918 <__assert_fail@plt+0x25b8>
   14a60:	mov	r1, r4
   14a64:	mov	r0, r5
   14a68:	bl	140ec <__assert_fail@plt+0x2d8c>
   14a6c:	mov	r0, r5
   14a70:	bl	135cc <__assert_fail@plt+0x226c>
   14a74:	b	14b90 <__assert_fail@plt+0x3830>
   14a78:	ldrh	r3, [r4, #60]	; 0x3c
   14a7c:	cmp	r3, #4
   14a80:	bne	14a88 <__assert_fail@plt+0x3728>
   14a84:	b	14994 <__assert_fail@plt+0x3634>
   14a88:	ldrh	r3, [r4, #60]	; 0x3c
   14a8c:	cmp	r3, #2
   14a90:	bne	14b1c <__assert_fail@plt+0x37bc>
   14a94:	mov	r2, #1
   14a98:	mov	r1, r4
   14a9c:	mov	r0, r5
   14aa0:	bl	15d44 <__assert_fail@plt+0x49e4>
   14aa4:	mov	r3, r0
   14aa8:	strh	r3, [r4, #56]	; 0x38
   14aac:	ldrh	r3, [r4, #56]	; 0x38
   14ab0:	cmp	r3, #1
   14ab4:	bne	14b14 <__assert_fail@plt+0x37b4>
   14ab8:	ldr	r3, [r5, #48]	; 0x30
   14abc:	and	r3, r3, #4
   14ac0:	cmp	r3, #0
   14ac4:	bne	14b14 <__assert_fail@plt+0x37b4>
   14ac8:	ldr	r1, [pc, #876]	; 14e3c <__assert_fail@plt+0x3adc>
   14acc:	mov	r0, r5
   14ad0:	bl	13bdc <__assert_fail@plt+0x287c>
   14ad4:	mov	r3, r0
   14ad8:	str	r3, [r4, #36]	; 0x24
   14adc:	ldr	r3, [r4, #36]	; 0x24
   14ae0:	cmp	r3, #0
   14ae4:	bge	14b04 <__assert_fail@plt+0x37a4>
   14ae8:	bl	11228 <__errno_location@plt>
   14aec:	mov	r3, r0
   14af0:	ldr	r3, [r3]
   14af4:	str	r3, [r4, #32]
   14af8:	mov	r3, #7
   14afc:	strh	r3, [r4, #56]	; 0x38
   14b00:	b	14b14 <__assert_fail@plt+0x37b4>
   14b04:	ldrh	r3, [r4, #58]	; 0x3a
   14b08:	orr	r3, r3, #2
   14b0c:	uxth	r3, r3
   14b10:	strh	r3, [r4, #58]	; 0x3a
   14b14:	mov	r3, #3
   14b18:	strh	r3, [r4, #60]	; 0x3c
   14b1c:	ldr	r2, [r5, #24]
   14b20:	ldr	r3, [r4, #4]
   14b24:	ldr	r1, [r3, #28]
   14b28:	ldr	r3, [r4, #4]
   14b2c:	ldr	r3, [r3, #40]	; 0x28
   14b30:	sub	r3, r3, #1
   14b34:	add	r3, r1, r3
   14b38:	ldrb	r3, [r3]
   14b3c:	cmp	r3, #47	; 0x2f
   14b40:	bne	14b54 <__assert_fail@plt+0x37f4>
   14b44:	ldr	r3, [r4, #4]
   14b48:	ldr	r3, [r3, #40]	; 0x28
   14b4c:	sub	r3, r3, #1
   14b50:	b	14b5c <__assert_fail@plt+0x37fc>
   14b54:	ldr	r3, [r4, #4]
   14b58:	ldr	r3, [r3, #40]	; 0x28
   14b5c:	add	r6, r2, r3
   14b60:	mov	r3, r6
   14b64:	add	r6, r3, #1
   14b68:	mov	r2, #47	; 0x2f
   14b6c:	strb	r2, [r3]
   14b70:	add	r1, r4, #168	; 0xa8
   14b74:	ldr	r3, [r4, #52]	; 0x34
   14b78:	add	r3, r3, #1
   14b7c:	mov	r2, r3
   14b80:	mov	r0, r6
   14b84:	bl	11078 <memmove@plt>
   14b88:	b	14b90 <__assert_fail@plt+0x3830>
   14b8c:	nop			; (mov r0, r0)
   14b90:	str	r4, [r5]
   14b94:	ldrh	r3, [r4, #56]	; 0x38
   14b98:	cmp	r3, #11
   14b9c:	bne	14be0 <__assert_fail@plt+0x3880>
   14ba0:	ldrd	r2, [r4, #112]	; 0x70
   14ba4:	cmp	r3, #0
   14ba8:	cmpeq	r2, #2
   14bac:	bne	14bcc <__assert_fail@plt+0x386c>
   14bb0:	mov	r2, #0
   14bb4:	mov	r1, r4
   14bb8:	mov	r0, r5
   14bbc:	bl	15d44 <__assert_fail@plt+0x49e4>
   14bc0:	mov	r3, r0
   14bc4:	strh	r3, [r4, #56]	; 0x38
   14bc8:	b	14be0 <__assert_fail@plt+0x3880>
   14bcc:	ldrd	r2, [r4, #112]	; 0x70
   14bd0:	cmp	r3, #0
   14bd4:	cmpeq	r2, #1
   14bd8:	beq	14be0 <__assert_fail@plt+0x3880>
   14bdc:	bl	11318 <abort@plt>
   14be0:	ldrh	r3, [r4, #56]	; 0x38
   14be4:	cmp	r3, #1
   14be8:	bne	14c38 <__assert_fail@plt+0x38d8>
   14bec:	ldr	r3, [r4, #48]	; 0x30
   14bf0:	cmp	r3, #0
   14bf4:	bne	14c00 <__assert_fail@plt+0x38a0>
   14bf8:	ldrd	r2, [r4, #64]	; 0x40
   14bfc:	strd	r2, [r5, #16]
   14c00:	mov	r1, r4
   14c04:	mov	r0, r5
   14c08:	bl	13698 <__assert_fail@plt+0x2338>
   14c0c:	mov	r3, r0
   14c10:	eor	r3, r3, #1
   14c14:	uxtb	r3, r3
   14c18:	cmp	r3, #0
   14c1c:	beq	14c38 <__assert_fail@plt+0x38d8>
   14c20:	bl	11228 <__errno_location@plt>
   14c24:	mov	r2, r0
   14c28:	mov	r3, #12
   14c2c:	str	r3, [r2]
   14c30:	mov	r3, #0
   14c34:	b	14e34 <__assert_fail@plt+0x3ad4>
   14c38:	mov	r3, r4
   14c3c:	b	14e34 <__assert_fail@plt+0x3ad4>
   14c40:	nop			; (mov r0, r0)
   14c44:	ldr	r4, [r6, #4]
   14c48:	str	r4, [r5]
   14c4c:	mov	r0, r6
   14c50:	bl	1347c <__assert_fail@plt+0x211c>
   14c54:	ldr	r3, [r4, #48]	; 0x30
   14c58:	cmn	r3, #1
   14c5c:	bne	14c88 <__assert_fail@plt+0x3928>
   14c60:	mov	r0, r4
   14c64:	bl	1347c <__assert_fail@plt+0x211c>
   14c68:	bl	11228 <__errno_location@plt>
   14c6c:	mov	r2, r0
   14c70:	mov	r3, #0
   14c74:	str	r3, [r2]
   14c78:	mov	r3, #0
   14c7c:	str	r3, [r5]
   14c80:	mov	r3, #0
   14c84:	b	14e34 <__assert_fail@plt+0x3ad4>
   14c88:	ldrh	r3, [r4, #56]	; 0x38
   14c8c:	cmp	r3, #11
   14c90:	bne	14c98 <__assert_fail@plt+0x3938>
   14c94:	bl	11318 <abort@plt>
   14c98:	ldr	r2, [r5, #24]
   14c9c:	ldr	r3, [r4, #40]	; 0x28
   14ca0:	add	r3, r2, r3
   14ca4:	mov	r2, #0
   14ca8:	strb	r2, [r3]
   14cac:	ldr	r3, [r4, #48]	; 0x30
   14cb0:	cmp	r3, #0
   14cb4:	bne	14cec <__assert_fail@plt+0x398c>
   14cb8:	mov	r0, r5
   14cbc:	bl	13b04 <__assert_fail@plt+0x27a4>
   14cc0:	mov	r3, r0
   14cc4:	cmp	r3, #0
   14cc8:	beq	14dd8 <__assert_fail@plt+0x3a78>
   14ccc:	bl	11228 <__errno_location@plt>
   14cd0:	mov	r3, r0
   14cd4:	ldr	r3, [r3]
   14cd8:	str	r3, [r4, #32]
   14cdc:	ldr	r3, [r5, #48]	; 0x30
   14ce0:	orr	r3, r3, #8192	; 0x2000
   14ce4:	str	r3, [r5, #48]	; 0x30
   14ce8:	b	14dd8 <__assert_fail@plt+0x3a78>
   14cec:	ldrh	r3, [r4, #58]	; 0x3a
   14cf0:	and	r3, r3, #2
   14cf4:	cmp	r3, #0
   14cf8:	beq	14d8c <__assert_fail@plt+0x3a2c>
   14cfc:	ldr	r3, [r5, #48]	; 0x30
   14d00:	and	r3, r3, #4
   14d04:	cmp	r3, #0
   14d08:	bne	14d7c <__assert_fail@plt+0x3a1c>
   14d0c:	ldr	r3, [r5, #48]	; 0x30
   14d10:	and	r3, r3, #512	; 0x200
   14d14:	cmp	r3, #0
   14d18:	beq	14d38 <__assert_fail@plt+0x39d8>
   14d1c:	ldr	r3, [r4, #36]	; 0x24
   14d20:	mov	r2, #1
   14d24:	mov	r1, r3
   14d28:	mov	r0, r5
   14d2c:	bl	13a40 <__assert_fail@plt+0x26e0>
   14d30:	mov	r3, #0
   14d34:	b	14d58 <__assert_fail@plt+0x39f8>
   14d38:	ldr	r3, [r4, #36]	; 0x24
   14d3c:	mov	r0, r3
   14d40:	bl	112d0 <fchdir@plt>
   14d44:	mov	r3, r0
   14d48:	cmp	r3, #0
   14d4c:	movne	r3, #1
   14d50:	moveq	r3, #0
   14d54:	uxtb	r3, r3
   14d58:	cmp	r3, #0
   14d5c:	beq	14d7c <__assert_fail@plt+0x3a1c>
   14d60:	bl	11228 <__errno_location@plt>
   14d64:	mov	r3, r0
   14d68:	ldr	r3, [r3]
   14d6c:	str	r3, [r4, #32]
   14d70:	ldr	r3, [r5, #48]	; 0x30
   14d74:	orr	r3, r3, #8192	; 0x2000
   14d78:	str	r3, [r5, #48]	; 0x30
   14d7c:	ldr	r3, [r4, #36]	; 0x24
   14d80:	mov	r0, r3
   14d84:	bl	11324 <close@plt>
   14d88:	b	14dd8 <__assert_fail@plt+0x3a78>
   14d8c:	ldrh	r3, [r4, #58]	; 0x3a
   14d90:	and	r3, r3, #1
   14d94:	cmp	r3, #0
   14d98:	bne	14dd8 <__assert_fail@plt+0x3a78>
   14d9c:	ldr	r1, [r4, #4]
   14da0:	ldr	r3, [pc, #152]	; 14e40 <__assert_fail@plt+0x3ae0>
   14da4:	mvn	r2, #0
   14da8:	mov	r0, r5
   14dac:	bl	16460 <__assert_fail@plt+0x5100>
   14db0:	mov	r3, r0
   14db4:	cmp	r3, #0
   14db8:	beq	14dd8 <__assert_fail@plt+0x3a78>
   14dbc:	bl	11228 <__errno_location@plt>
   14dc0:	mov	r3, r0
   14dc4:	ldr	r3, [r3]
   14dc8:	str	r3, [r4, #32]
   14dcc:	ldr	r3, [r5, #48]	; 0x30
   14dd0:	orr	r3, r3, #8192	; 0x2000
   14dd4:	str	r3, [r5, #48]	; 0x30
   14dd8:	ldrh	r3, [r4, #56]	; 0x38
   14ddc:	cmp	r3, #2
   14de0:	beq	14e18 <__assert_fail@plt+0x3ab8>
   14de4:	ldr	r3, [r4, #32]
   14de8:	cmp	r3, #0
   14dec:	beq	14df8 <__assert_fail@plt+0x3a98>
   14df0:	mov	r3, #7
   14df4:	b	14dfc <__assert_fail@plt+0x3a9c>
   14df8:	mov	r3, #6
   14dfc:	strh	r3, [r4, #56]	; 0x38
   14e00:	ldr	r3, [r4, #32]
   14e04:	cmp	r3, #0
   14e08:	bne	14e18 <__assert_fail@plt+0x3ab8>
   14e0c:	mov	r1, r4
   14e10:	mov	r0, r5
   14e14:	bl	137d8 <__assert_fail@plt+0x2478>
   14e18:	ldr	r3, [r5, #48]	; 0x30
   14e1c:	and	r3, r3, #8192	; 0x2000
   14e20:	cmp	r3, #0
   14e24:	bne	14e30 <__assert_fail@plt+0x3ad0>
   14e28:	mov	r3, r4
   14e2c:	b	14e34 <__assert_fail@plt+0x3ad4>
   14e30:	mov	r3, #0
   14e34:	mov	r0, r3
   14e38:	pop	{r4, r5, r6, r7, fp, pc}
   14e3c:	ldrdeq	r0, [r2], -ip
   14e40:	andeq	r0, r2, r0, ror #1
   14e44:	push	{fp, lr}
   14e48:	add	fp, sp, #4
   14e4c:	sub	sp, sp, #16
   14e50:	str	r0, [fp, #-8]
   14e54:	str	r1, [fp, #-12]
   14e58:	str	r2, [fp, #-16]
   14e5c:	ldr	r3, [fp, #-16]
   14e60:	cmp	r3, #0
   14e64:	beq	14eb0 <__assert_fail@plt+0x3b50>
   14e68:	ldr	r3, [fp, #-16]
   14e6c:	cmp	r3, #1
   14e70:	beq	14eb0 <__assert_fail@plt+0x3b50>
   14e74:	ldr	r3, [fp, #-16]
   14e78:	cmp	r3, #2
   14e7c:	beq	14eb0 <__assert_fail@plt+0x3b50>
   14e80:	ldr	r3, [fp, #-16]
   14e84:	cmp	r3, #3
   14e88:	beq	14eb0 <__assert_fail@plt+0x3b50>
   14e8c:	ldr	r3, [fp, #-16]
   14e90:	cmp	r3, #4
   14e94:	beq	14eb0 <__assert_fail@plt+0x3b50>
   14e98:	bl	11228 <__errno_location@plt>
   14e9c:	mov	r2, r0
   14ea0:	mov	r3, #22
   14ea4:	str	r3, [r2]
   14ea8:	mov	r3, #1
   14eac:	b	14ec4 <__assert_fail@plt+0x3b64>
   14eb0:	ldr	r3, [fp, #-16]
   14eb4:	uxth	r2, r3
   14eb8:	ldr	r3, [fp, #-12]
   14ebc:	strh	r2, [r3, #60]	; 0x3c
   14ec0:	mov	r3, #0
   14ec4:	mov	r0, r3
   14ec8:	sub	sp, fp, #4
   14ecc:	pop	{fp, pc}
   14ed0:	push	{r4, r5, fp, lr}
   14ed4:	add	fp, sp, #12
   14ed8:	sub	sp, sp, #16
   14edc:	mov	r4, r0
   14ee0:	str	r1, [fp, #-24]	; 0xffffffe8
   14ee4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ee8:	cmp	r3, #0
   14eec:	beq	14f14 <__assert_fail@plt+0x3bb4>
   14ef0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ef4:	cmp	r3, #4096	; 0x1000
   14ef8:	beq	14f14 <__assert_fail@plt+0x3bb4>
   14efc:	bl	11228 <__errno_location@plt>
   14f00:	mov	r2, r0
   14f04:	mov	r3, #22
   14f08:	str	r3, [r2]
   14f0c:	mov	r3, #0
   14f10:	b	150a8 <__assert_fail@plt+0x3d48>
   14f14:	ldr	r5, [r4]
   14f18:	bl	11228 <__errno_location@plt>
   14f1c:	mov	r2, r0
   14f20:	mov	r3, #0
   14f24:	str	r3, [r2]
   14f28:	ldr	r3, [r4, #48]	; 0x30
   14f2c:	and	r3, r3, #8192	; 0x2000
   14f30:	cmp	r3, #0
   14f34:	beq	14f40 <__assert_fail@plt+0x3be0>
   14f38:	mov	r3, #0
   14f3c:	b	150a8 <__assert_fail@plt+0x3d48>
   14f40:	ldrh	r3, [r5, #56]	; 0x38
   14f44:	cmp	r3, #9
   14f48:	bne	14f54 <__assert_fail@plt+0x3bf4>
   14f4c:	ldr	r3, [r5, #8]
   14f50:	b	150a8 <__assert_fail@plt+0x3d48>
   14f54:	ldrh	r3, [r5, #56]	; 0x38
   14f58:	cmp	r3, #1
   14f5c:	beq	14f68 <__assert_fail@plt+0x3c08>
   14f60:	mov	r3, #0
   14f64:	b	150a8 <__assert_fail@plt+0x3d48>
   14f68:	ldr	r3, [r4, #4]
   14f6c:	cmp	r3, #0
   14f70:	beq	14f80 <__assert_fail@plt+0x3c20>
   14f74:	ldr	r3, [r4, #4]
   14f78:	mov	r0, r3
   14f7c:	bl	16178 <__assert_fail@plt+0x4e18>
   14f80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14f84:	cmp	r3, #4096	; 0x1000
   14f88:	bne	14fa4 <__assert_fail@plt+0x3c44>
   14f8c:	ldr	r3, [r4, #48]	; 0x30
   14f90:	orr	r3, r3, #4096	; 0x1000
   14f94:	str	r3, [r4, #48]	; 0x30
   14f98:	mov	r3, #2
   14f9c:	str	r3, [fp, #-24]	; 0xffffffe8
   14fa0:	b	14fac <__assert_fail@plt+0x3c4c>
   14fa4:	mov	r3, #1
   14fa8:	str	r3, [fp, #-24]	; 0xffffffe8
   14fac:	ldr	r3, [r5, #48]	; 0x30
   14fb0:	cmp	r3, #0
   14fb4:	bne	14fd8 <__assert_fail@plt+0x3c78>
   14fb8:	ldr	r3, [r5, #24]
   14fbc:	ldrb	r3, [r3]
   14fc0:	cmp	r3, #47	; 0x2f
   14fc4:	beq	14fd8 <__assert_fail@plt+0x3c78>
   14fc8:	ldr	r3, [r4, #48]	; 0x30
   14fcc:	and	r3, r3, #4
   14fd0:	cmp	r3, #0
   14fd4:	beq	14ff4 <__assert_fail@plt+0x3c94>
   14fd8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14fdc:	mov	r0, r4
   14fe0:	bl	1520c <__assert_fail@plt+0x3eac>
   14fe4:	mov	r3, r0
   14fe8:	str	r3, [r4, #4]
   14fec:	ldr	r3, [r4, #4]
   14ff0:	b	150a8 <__assert_fail@plt+0x3d48>
   14ff4:	ldr	r1, [pc, #184]	; 150b4 <__assert_fail@plt+0x3d54>
   14ff8:	mov	r0, r4
   14ffc:	bl	13bdc <__assert_fail@plt+0x287c>
   15000:	str	r0, [fp, #-16]
   15004:	ldr	r3, [fp, #-16]
   15008:	cmp	r3, #0
   1500c:	bge	15020 <__assert_fail@plt+0x3cc0>
   15010:	mov	r3, #0
   15014:	str	r3, [r4, #4]
   15018:	mov	r3, #0
   1501c:	b	150a8 <__assert_fail@plt+0x3d48>
   15020:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15024:	mov	r0, r4
   15028:	bl	1520c <__assert_fail@plt+0x3eac>
   1502c:	mov	r3, r0
   15030:	str	r3, [r4, #4]
   15034:	ldr	r3, [r4, #48]	; 0x30
   15038:	and	r3, r3, #512	; 0x200
   1503c:	cmp	r3, #0
   15040:	beq	15058 <__assert_fail@plt+0x3cf8>
   15044:	mov	r2, #1
   15048:	ldr	r1, [fp, #-16]
   1504c:	mov	r0, r4
   15050:	bl	13a40 <__assert_fail@plt+0x26e0>
   15054:	b	150a4 <__assert_fail@plt+0x3d44>
   15058:	ldr	r0, [fp, #-16]
   1505c:	bl	112d0 <fchdir@plt>
   15060:	mov	r3, r0
   15064:	cmp	r3, #0
   15068:	beq	1509c <__assert_fail@plt+0x3d3c>
   1506c:	bl	11228 <__errno_location@plt>
   15070:	mov	r3, r0
   15074:	ldr	r3, [r3]
   15078:	str	r3, [fp, #-20]	; 0xffffffec
   1507c:	ldr	r0, [fp, #-16]
   15080:	bl	11324 <close@plt>
   15084:	bl	11228 <__errno_location@plt>
   15088:	mov	r2, r0
   1508c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15090:	str	r3, [r2]
   15094:	mov	r3, #0
   15098:	b	150a8 <__assert_fail@plt+0x3d48>
   1509c:	ldr	r0, [fp, #-16]
   150a0:	bl	11324 <close@plt>
   150a4:	ldr	r3, [r4, #4]
   150a8:	mov	r0, r3
   150ac:	sub	sp, fp, #12
   150b0:	pop	{r4, r5, fp, pc}
   150b4:	ldrdeq	r0, [r2], -ip
   150b8:	push	{fp}		; (str fp, [sp, #-4]!)
   150bc:	add	fp, sp, #0
   150c0:	sub	sp, sp, #12
   150c4:	str	r0, [fp, #-8]
   150c8:	str	r1, [fp, #-12]
   150cc:	ldr	r3, [fp, #-8]
   150d0:	ldr	r3, [r3]
   150d4:	ldrd	r0, [r3, #160]	; 0xa0
   150d8:	ldr	r3, [fp, #-12]
   150dc:	ldr	r3, [r3]
   150e0:	ldrd	r2, [r3, #160]	; 0xa0
   150e4:	cmp	r1, r3
   150e8:	cmpeq	r0, r2
   150ec:	movhi	r3, #1
   150f0:	movls	r3, #0
   150f4:	uxtb	r3, r3
   150f8:	mov	ip, r3
   150fc:	ldr	r3, [fp, #-8]
   15100:	ldr	r3, [r3]
   15104:	ldrd	r0, [r3, #160]	; 0xa0
   15108:	ldr	r3, [fp, #-12]
   1510c:	ldr	r3, [r3]
   15110:	ldrd	r2, [r3, #160]	; 0xa0
   15114:	cmp	r1, r3
   15118:	cmpeq	r0, r2
   1511c:	movcc	r3, #1
   15120:	movcs	r3, #0
   15124:	uxtb	r3, r3
   15128:	sub	r3, ip, r3
   1512c:	mov	r0, r3
   15130:	add	sp, fp, #0
   15134:	pop	{fp}		; (ldr fp, [sp], #4)
   15138:	bx	lr
   1513c:	push	{fp}		; (str fp, [sp, #-4]!)
   15140:	add	fp, sp, #0
   15144:	sub	sp, sp, #20
   15148:	str	r0, [fp, #-16]
   1514c:	str	r1, [fp, #-20]	; 0xffffffec
   15150:	ldr	r3, [fp, #-20]	; 0xffffffec
   15154:	sub	r3, r3, #1
   15158:	cmp	r3, #11
   1515c:	ldrls	pc, [pc, r3, lsl #2]
   15160:	b	151e8 <__assert_fail@plt+0x3e88>
   15164:			; <UNDEFINED> instruction: 0x000151b8
   15168:	andeq	r5, r1, r0, lsr #3
   1516c:	andeq	r5, r1, r8, ror #3
   15170:	andeq	r5, r1, ip, lsr #3
   15174:	andeq	r5, r1, r8, ror #3
   15178:	muleq	r1, r4, r1
   1517c:	andeq	r5, r1, r8, ror #3
   15180:	ldrdeq	r5, [r1], -r0
   15184:	andeq	r5, r1, r8, ror #3
   15188:	andeq	r5, r1, r4, asr #3
   1518c:	andeq	r5, r1, r8, ror #3
   15190:	ldrdeq	r5, [r1], -ip
   15194:	mov	r3, #24576	; 0x6000
   15198:	str	r3, [fp, #-8]
   1519c:	b	151f0 <__assert_fail@plt+0x3e90>
   151a0:	mov	r3, #8192	; 0x2000
   151a4:	str	r3, [fp, #-8]
   151a8:	b	151f0 <__assert_fail@plt+0x3e90>
   151ac:	mov	r3, #16384	; 0x4000
   151b0:	str	r3, [fp, #-8]
   151b4:	b	151f0 <__assert_fail@plt+0x3e90>
   151b8:	mov	r3, #4096	; 0x1000
   151bc:	str	r3, [fp, #-8]
   151c0:	b	151f0 <__assert_fail@plt+0x3e90>
   151c4:	mov	r3, #40960	; 0xa000
   151c8:	str	r3, [fp, #-8]
   151cc:	b	151f0 <__assert_fail@plt+0x3e90>
   151d0:	mov	r3, #32768	; 0x8000
   151d4:	str	r3, [fp, #-8]
   151d8:	b	151f0 <__assert_fail@plt+0x3e90>
   151dc:	mov	r3, #49152	; 0xc000
   151e0:	str	r3, [fp, #-8]
   151e4:	b	151f0 <__assert_fail@plt+0x3e90>
   151e8:	mov	r3, #0
   151ec:	str	r3, [fp, #-8]
   151f0:	ldr	r3, [fp, #-16]
   151f4:	ldr	r2, [fp, #-8]
   151f8:	str	r2, [r3, #16]
   151fc:	nop			; (mov r0, r0)
   15200:	add	sp, fp, #0
   15204:	pop	{fp}		; (ldr fp, [sp], #4)
   15208:	bx	lr
   1520c:	push	{r4, r5, r6, r7, fp, lr}
   15210:	add	fp, sp, #20
   15214:	sub	sp, sp, #80	; 0x50
   15218:	mov	r4, r0
   1521c:	str	r1, [fp, #-96]	; 0xffffffa0
   15220:	ldr	r3, [r4]
   15224:	str	r3, [fp, #-44]	; 0xffffffd4
   15228:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1522c:	ldr	r3, [r3, #12]
   15230:	cmp	r3, #0
   15234:	movne	r3, #1
   15238:	moveq	r3, #0
   1523c:	strb	r3, [fp, #-45]	; 0xffffffd3
   15240:	mov	r3, #0
   15244:	strb	r3, [fp, #-37]	; 0xffffffdb
   15248:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   1524c:	cmp	r3, #0
   15250:	beq	152cc <__assert_fail@plt+0x3f6c>
   15254:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15258:	ldr	r3, [r3, #12]
   1525c:	str	r3, [fp, #-52]	; 0xffffffcc
   15260:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15264:	bl	112c4 <dirfd@plt>
   15268:	mov	r3, r0
   1526c:	str	r3, [fp, #-92]	; 0xffffffa4
   15270:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15274:	cmp	r3, #0
   15278:	bge	15430 <__assert_fail@plt+0x40d0>
   1527c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15280:	ldr	r3, [r3, #12]
   15284:	mov	r0, r3
   15288:	bl	1133c <closedir@plt>
   1528c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15290:	mov	r2, #0
   15294:	str	r2, [r3, #12]
   15298:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1529c:	cmp	r3, #3
   152a0:	bne	152c4 <__assert_fail@plt+0x3f64>
   152a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   152a8:	mov	r2, #4
   152ac:	strh	r2, [r3, #56]	; 0x38
   152b0:	bl	11228 <__errno_location@plt>
   152b4:	mov	r3, r0
   152b8:	ldr	r2, [r3]
   152bc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   152c0:	str	r2, [r3, #32]
   152c4:	mov	r3, #0
   152c8:	b	15d24 <__assert_fail@plt+0x49c4>
   152cc:	ldr	r3, [r4, #48]	; 0x30
   152d0:	and	r3, r3, #4
   152d4:	cmp	r3, #0
   152d8:	bne	152f4 <__assert_fail@plt+0x3f94>
   152dc:	ldr	r3, [r4, #48]	; 0x30
   152e0:	and	r3, r3, #512	; 0x200
   152e4:	cmp	r3, #0
   152e8:	beq	152f4 <__assert_fail@plt+0x3f94>
   152ec:	ldr	r0, [r4, #32]
   152f0:	b	152f8 <__assert_fail@plt+0x3f98>
   152f4:	mvn	r0, #99	; 0x63
   152f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   152fc:	ldr	r1, [r3, #24]
   15300:	ldr	r3, [r4, #48]	; 0x30
   15304:	and	r3, r3, #16
   15308:	cmp	r3, #0
   1530c:	beq	15338 <__assert_fail@plt+0x3fd8>
   15310:	ldr	r3, [r4, #48]	; 0x30
   15314:	and	r3, r3, #1
   15318:	cmp	r3, #0
   1531c:	beq	15330 <__assert_fail@plt+0x3fd0>
   15320:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15324:	ldr	r3, [r3, #48]	; 0x30
   15328:	cmp	r3, #0
   1532c:	beq	15338 <__assert_fail@plt+0x3fd8>
   15330:	mov	r2, #32768	; 0x8000
   15334:	b	1533c <__assert_fail@plt+0x3fdc>
   15338:	mov	r2, #0
   1533c:	sub	r3, fp, #92	; 0x5c
   15340:	bl	1859c <__assert_fail@plt+0x723c>
   15344:	mov	r3, r0
   15348:	mov	r2, r3
   1534c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15350:	str	r2, [r3, #12]
   15354:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15358:	ldr	r3, [r3, #12]
   1535c:	cmp	r3, #0
   15360:	bne	15398 <__assert_fail@plt+0x4038>
   15364:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15368:	cmp	r3, #3
   1536c:	bne	15390 <__assert_fail@plt+0x4030>
   15370:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15374:	mov	r2, #4
   15378:	strh	r2, [r3, #56]	; 0x38
   1537c:	bl	11228 <__errno_location@plt>
   15380:	mov	r3, r0
   15384:	ldr	r2, [r3]
   15388:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1538c:	str	r2, [r3, #32]
   15390:	mov	r3, #0
   15394:	b	15d24 <__assert_fail@plt+0x49c4>
   15398:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1539c:	ldrh	r3, [r3, #56]	; 0x38
   153a0:	cmp	r3, #11
   153a4:	bne	153cc <__assert_fail@plt+0x406c>
   153a8:	mov	r2, #0
   153ac:	ldr	r1, [fp, #-44]	; 0xffffffd4
   153b0:	mov	r0, r4
   153b4:	bl	15d44 <__assert_fail@plt+0x49e4>
   153b8:	mov	r3, r0
   153bc:	mov	r2, r3
   153c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   153c4:	strh	r2, [r3, #56]	; 0x38
   153c8:	b	15430 <__assert_fail@plt+0x40d0>
   153cc:	ldr	r3, [r4, #48]	; 0x30
   153d0:	and	r3, r3, #256	; 0x100
   153d4:	cmp	r3, #0
   153d8:	beq	15430 <__assert_fail@plt+0x40d0>
   153dc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   153e0:	mov	r0, r4
   153e4:	bl	137d8 <__assert_fail@plt+0x2478>
   153e8:	mov	r2, #0
   153ec:	ldr	r1, [fp, #-44]	; 0xffffffd4
   153f0:	mov	r0, r4
   153f4:	bl	15d44 <__assert_fail@plt+0x49e4>
   153f8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   153fc:	mov	r0, r4
   15400:	bl	13698 <__assert_fail@plt+0x2338>
   15404:	mov	r3, r0
   15408:	eor	r3, r3, #1
   1540c:	uxtb	r3, r3
   15410:	cmp	r3, #0
   15414:	beq	15430 <__assert_fail@plt+0x40d0>
   15418:	bl	11228 <__errno_location@plt>
   1541c:	mov	r2, r0
   15420:	mov	r3, #12
   15424:	str	r3, [r2]
   15428:	mov	r3, #0
   1542c:	b	15d24 <__assert_fail@plt+0x49c4>
   15430:	ldr	r3, [r4, #44]	; 0x2c
   15434:	cmp	r3, #0
   15438:	beq	15444 <__assert_fail@plt+0x40e4>
   1543c:	mvn	r3, #0
   15440:	b	15448 <__assert_fail@plt+0x40e8>
   15444:	ldr	r3, [pc, #2276]	; 15d30 <__assert_fail@plt+0x49d0>
   15448:	str	r3, [fp, #-56]	; 0xffffffc8
   1544c:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   15450:	cmp	r3, #0
   15454:	beq	15464 <__assert_fail@plt+0x4104>
   15458:	mov	r3, #1
   1545c:	strb	r3, [fp, #-25]	; 0xffffffe7
   15460:	b	15600 <__assert_fail@plt+0x42a0>
   15464:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15468:	cmp	r3, #2
   1546c:	beq	154d4 <__assert_fail@plt+0x4174>
   15470:	ldr	r3, [r4, #48]	; 0x30
   15474:	and	r3, r3, #8
   15478:	cmp	r3, #0
   1547c:	beq	154cc <__assert_fail@plt+0x416c>
   15480:	ldr	r3, [r4, #48]	; 0x30
   15484:	and	r3, r3, #16
   15488:	cmp	r3, #0
   1548c:	beq	154cc <__assert_fail@plt+0x416c>
   15490:	ldr	r3, [r4, #48]	; 0x30
   15494:	and	r3, r3, #32
   15498:	cmp	r3, #0
   1549c:	bne	154cc <__assert_fail@plt+0x416c>
   154a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154a4:	ldr	r3, [r3, #84]	; 0x54
   154a8:	cmp	r3, #2
   154ac:	bne	154cc <__assert_fail@plt+0x416c>
   154b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   154b4:	mov	r1, r3
   154b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   154bc:	bl	1463c <__assert_fail@plt+0x32dc>
   154c0:	mov	r3, r0
   154c4:	cmp	r3, #0
   154c8:	bne	154d4 <__assert_fail@plt+0x4174>
   154cc:	mov	r3, #1
   154d0:	b	154d8 <__assert_fail@plt+0x4178>
   154d4:	mov	r3, #0
   154d8:	strb	r3, [fp, #-25]	; 0xffffffe7
   154dc:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   154e0:	and	r3, r3, #1
   154e4:	strb	r3, [fp, #-25]	; 0xffffffe7
   154e8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   154ec:	cmp	r3, #0
   154f0:	bne	15500 <__assert_fail@plt+0x41a0>
   154f4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   154f8:	cmp	r3, #3
   154fc:	bne	15600 <__assert_fail@plt+0x42a0>
   15500:	ldr	r3, [r4, #48]	; 0x30
   15504:	and	r3, r3, #512	; 0x200
   15508:	cmp	r3, #0
   1550c:	beq	1552c <__assert_fail@plt+0x41cc>
   15510:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15514:	mov	r2, #3
   15518:	ldr	r1, [pc, #2068]	; 15d34 <__assert_fail@plt+0x49d4>
   1551c:	mov	r0, r3
   15520:	bl	1d904 <__assert_fail@plt+0xc5a4>
   15524:	mov	r3, r0
   15528:	str	r3, [fp, #-92]	; 0xffffffa4
   1552c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15530:	cmp	r3, #0
   15534:	blt	15558 <__assert_fail@plt+0x41f8>
   15538:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1553c:	mov	r3, #0
   15540:	ldr	r1, [fp, #-44]	; 0xffffffd4
   15544:	mov	r0, r4
   15548:	bl	16460 <__assert_fail@plt+0x5100>
   1554c:	mov	r3, r0
   15550:	cmp	r3, #0
   15554:	beq	155f8 <__assert_fail@plt+0x4298>
   15558:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1555c:	cmp	r3, #0
   15560:	beq	15584 <__assert_fail@plt+0x4224>
   15564:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15568:	cmp	r3, #3
   1556c:	bne	15584 <__assert_fail@plt+0x4224>
   15570:	bl	11228 <__errno_location@plt>
   15574:	mov	r3, r0
   15578:	ldr	r2, [r3]
   1557c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15580:	str	r2, [r3, #32]
   15584:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15588:	ldrh	r3, [r3, #58]	; 0x3a
   1558c:	orr	r3, r3, #1
   15590:	uxth	r2, r3
   15594:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15598:	strh	r2, [r3, #58]	; 0x3a
   1559c:	mov	r3, #0
   155a0:	strb	r3, [fp, #-25]	; 0xffffffe7
   155a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   155a8:	ldr	r3, [r3, #12]
   155ac:	mov	r0, r3
   155b0:	bl	1133c <closedir@plt>
   155b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   155b8:	mov	r2, #0
   155bc:	str	r2, [r3, #12]
   155c0:	ldr	r3, [r4, #48]	; 0x30
   155c4:	and	r3, r3, #512	; 0x200
   155c8:	cmp	r3, #0
   155cc:	beq	155e8 <__assert_fail@plt+0x4288>
   155d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   155d4:	cmp	r3, #0
   155d8:	blt	155e8 <__assert_fail@plt+0x4288>
   155dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   155e0:	mov	r0, r3
   155e4:	bl	11324 <close@plt>
   155e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   155ec:	mov	r2, #0
   155f0:	str	r2, [r3, #12]
   155f4:	b	15600 <__assert_fail@plt+0x42a0>
   155f8:	mov	r3, #1
   155fc:	strb	r3, [fp, #-25]	; 0xffffffe7
   15600:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15604:	ldr	r2, [r3, #28]
   15608:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1560c:	ldr	r3, [r3, #40]	; 0x28
   15610:	sub	r3, r3, #1
   15614:	add	r3, r2, r3
   15618:	ldrb	r3, [r3]
   1561c:	cmp	r3, #47	; 0x2f
   15620:	bne	15634 <__assert_fail@plt+0x42d4>
   15624:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15628:	ldr	r3, [r3, #40]	; 0x28
   1562c:	sub	r3, r3, #1
   15630:	b	1563c <__assert_fail@plt+0x42dc>
   15634:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15638:	ldr	r3, [r3, #40]	; 0x28
   1563c:	str	r3, [fp, #-60]	; 0xffffffc4
   15640:	ldr	r3, [r4, #48]	; 0x30
   15644:	and	r3, r3, #4
   15648:	cmp	r3, #0
   1564c:	beq	15678 <__assert_fail@plt+0x4318>
   15650:	ldr	r2, [r4, #24]
   15654:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15658:	add	r3, r2, r3
   1565c:	str	r3, [fp, #-36]	; 0xffffffdc
   15660:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15664:	add	r2, r3, #1
   15668:	str	r2, [fp, #-36]	; 0xffffffdc
   1566c:	mov	r2, #47	; 0x2f
   15670:	strb	r2, [r3]
   15674:	b	15680 <__assert_fail@plt+0x4320>
   15678:	mov	r3, #0
   1567c:	str	r3, [fp, #-36]	; 0xffffffdc
   15680:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15684:	add	r3, r3, #1
   15688:	str	r3, [fp, #-60]	; 0xffffffc4
   1568c:	ldr	r2, [r4, #36]	; 0x24
   15690:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15694:	sub	r3, r2, r3
   15698:	str	r3, [fp, #-32]	; 0xffffffe0
   1569c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   156a0:	ldr	r3, [r3, #48]	; 0x30
   156a4:	add	r3, r3, #1
   156a8:	str	r3, [fp, #-64]	; 0xffffffc0
   156ac:	mov	r3, #0
   156b0:	strb	r3, [fp, #-26]	; 0xffffffe6
   156b4:	mov	r7, #0
   156b8:	mov	r3, #0
   156bc:	str	r3, [fp, #-24]	; 0xffffffe8
   156c0:	mov	r6, #0
   156c4:	b	15b14 <__assert_fail@plt+0x47b4>
   156c8:	bl	11228 <__errno_location@plt>
   156cc:	mov	r2, r0
   156d0:	mov	r3, #0
   156d4:	str	r3, [r2]
   156d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   156dc:	ldr	r3, [r3, #12]
   156e0:	mov	r0, r3
   156e4:	bl	112ac <readdir64@plt>
   156e8:	str	r0, [fp, #-68]	; 0xffffffbc
   156ec:	ldr	r3, [fp, #-68]	; 0xffffffbc
   156f0:	cmp	r3, #0
   156f4:	bne	1574c <__assert_fail@plt+0x43ec>
   156f8:	bl	11228 <__errno_location@plt>
   156fc:	mov	r3, r0
   15700:	ldr	r3, [r3]
   15704:	cmp	r3, #0
   15708:	beq	15b28 <__assert_fail@plt+0x47c8>
   1570c:	bl	11228 <__errno_location@plt>
   15710:	mov	r3, r0
   15714:	ldr	r2, [r3]
   15718:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1571c:	str	r2, [r3, #32]
   15720:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   15724:	cmp	r3, #0
   15728:	bne	15734 <__assert_fail@plt+0x43d4>
   1572c:	cmp	r6, #0
   15730:	beq	1573c <__assert_fail@plt+0x43dc>
   15734:	mov	r2, #7
   15738:	b	15740 <__assert_fail@plt+0x43e0>
   1573c:	mov	r2, #4
   15740:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15744:	strh	r2, [r3, #56]	; 0x38
   15748:	b	15b28 <__assert_fail@plt+0x47c8>
   1574c:	ldr	r3, [r4, #48]	; 0x30
   15750:	and	r3, r3, #32
   15754:	cmp	r3, #0
   15758:	bne	157a0 <__assert_fail@plt+0x4440>
   1575c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15760:	ldrb	r3, [r3, #19]
   15764:	cmp	r3, #46	; 0x2e
   15768:	bne	157a0 <__assert_fail@plt+0x4440>
   1576c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15770:	ldrb	r3, [r3, #20]
   15774:	cmp	r3, #0
   15778:	beq	15b14 <__assert_fail@plt+0x47b4>
   1577c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15780:	ldrb	r3, [r3, #20]
   15784:	cmp	r3, #46	; 0x2e
   15788:	bne	157a0 <__assert_fail@plt+0x4440>
   1578c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15790:	ldrb	r3, [r3, #21]
   15794:	cmp	r3, #0
   15798:	bne	157a0 <__assert_fail@plt+0x4440>
   1579c:	b	15b14 <__assert_fail@plt+0x47b4>
   157a0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   157a4:	add	r3, r3, #19
   157a8:	mov	r0, r3
   157ac:	bl	111ec <strlen@plt>
   157b0:	str	r0, [fp, #-72]	; 0xffffffb8
   157b4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   157b8:	add	r3, r3, #19
   157bc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   157c0:	mov	r1, r3
   157c4:	mov	r0, r4
   157c8:	bl	160bc <__assert_fail@plt+0x4d5c>
   157cc:	mov	r5, r0
   157d0:	cmp	r5, #0
   157d4:	beq	15824 <__assert_fail@plt+0x44c4>
   157d8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   157dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   157e0:	cmp	r2, r3
   157e4:	bcc	158dc <__assert_fail@plt+0x457c>
   157e8:	ldr	r3, [r4, #24]
   157ec:	str	r3, [fp, #-76]	; 0xffffffb4
   157f0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   157f4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   157f8:	add	r3, r2, r3
   157fc:	add	r3, r3, #1
   15800:	mov	r1, r3
   15804:	mov	r0, r4
   15808:	bl	161c0 <__assert_fail@plt+0x4e60>
   1580c:	mov	r3, r0
   15810:	eor	r3, r3, #1
   15814:	uxtb	r3, r3
   15818:	cmp	r3, #0
   1581c:	beq	15894 <__assert_fail@plt+0x4534>
   15820:	b	15828 <__assert_fail@plt+0x44c8>
   15824:	nop			; (mov r0, r0)
   15828:	bl	11228 <__errno_location@plt>
   1582c:	mov	r3, r0
   15830:	ldr	r3, [r3]
   15834:	str	r3, [fp, #-88]	; 0xffffffa8
   15838:	mov	r0, r5
   1583c:	bl	1347c <__assert_fail@plt+0x211c>
   15840:	mov	r0, r7
   15844:	bl	16178 <__assert_fail@plt+0x4e18>
   15848:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1584c:	ldr	r3, [r3, #12]
   15850:	mov	r0, r3
   15854:	bl	1133c <closedir@plt>
   15858:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1585c:	mov	r2, #0
   15860:	str	r2, [r3, #12]
   15864:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15868:	mov	r2, #7
   1586c:	strh	r2, [r3, #56]	; 0x38
   15870:	ldr	r3, [r4, #48]	; 0x30
   15874:	orr	r3, r3, #8192	; 0x2000
   15878:	str	r3, [r4, #48]	; 0x30
   1587c:	bl	11228 <__errno_location@plt>
   15880:	mov	r2, r0
   15884:	ldr	r3, [fp, #-88]	; 0xffffffa8
   15888:	str	r3, [r2]
   1588c:	mov	r3, #0
   15890:	b	15d24 <__assert_fail@plt+0x49c4>
   15894:	ldr	r2, [r4, #24]
   15898:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1589c:	cmp	r2, r3
   158a0:	beq	158cc <__assert_fail@plt+0x456c>
   158a4:	mov	r3, #1
   158a8:	strb	r3, [fp, #-26]	; 0xffffffe6
   158ac:	ldr	r3, [r4, #48]	; 0x30
   158b0:	and	r3, r3, #4
   158b4:	cmp	r3, #0
   158b8:	beq	158cc <__assert_fail@plt+0x456c>
   158bc:	ldr	r2, [r4, #24]
   158c0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   158c4:	add	r3, r2, r3
   158c8:	str	r3, [fp, #-36]	; 0xffffffdc
   158cc:	ldr	r2, [r4, #36]	; 0x24
   158d0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   158d4:	sub	r3, r2, r3
   158d8:	str	r3, [fp, #-32]	; 0xffffffe0
   158dc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   158e0:	ldr	r3, [fp, #-72]	; 0xffffffb8
   158e4:	add	r3, r2, r3
   158e8:	str	r3, [fp, #-80]	; 0xffffffb0
   158ec:	ldr	r2, [fp, #-80]	; 0xffffffb0
   158f0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   158f4:	cmp	r2, r3
   158f8:	bcs	15958 <__assert_fail@plt+0x45f8>
   158fc:	mov	r0, r5
   15900:	bl	1347c <__assert_fail@plt+0x211c>
   15904:	mov	r0, r7
   15908:	bl	16178 <__assert_fail@plt+0x4e18>
   1590c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15910:	ldr	r3, [r3, #12]
   15914:	mov	r0, r3
   15918:	bl	1133c <closedir@plt>
   1591c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15920:	mov	r2, #0
   15924:	str	r2, [r3, #12]
   15928:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1592c:	mov	r2, #7
   15930:	strh	r2, [r3, #56]	; 0x38
   15934:	ldr	r3, [r4, #48]	; 0x30
   15938:	orr	r3, r3, #8192	; 0x2000
   1593c:	str	r3, [r4, #48]	; 0x30
   15940:	bl	11228 <__errno_location@plt>
   15944:	mov	r2, r0
   15948:	mov	r3, #36	; 0x24
   1594c:	str	r3, [r2]
   15950:	mov	r3, #0
   15954:	b	15d24 <__assert_fail@plt+0x49c4>
   15958:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1595c:	str	r3, [r5, #48]	; 0x30
   15960:	ldr	r3, [r4]
   15964:	str	r3, [r5, #4]
   15968:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1596c:	str	r3, [r5, #40]	; 0x28
   15970:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15974:	ldrd	r2, [r3]
   15978:	strd	r2, [r5, #160]	; 0xa0
   1597c:	ldr	r3, [r4, #48]	; 0x30
   15980:	and	r3, r3, #4
   15984:	cmp	r3, #0
   15988:	beq	159b0 <__assert_fail@plt+0x4650>
   1598c:	ldr	r3, [r5, #28]
   15990:	str	r3, [r5, #24]
   15994:	add	r1, r5, #168	; 0xa8
   15998:	ldr	r3, [r5, #52]	; 0x34
   1599c:	add	r3, r3, #1
   159a0:	mov	r2, r3
   159a4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   159a8:	bl	11078 <memmove@plt>
   159ac:	b	159b8 <__assert_fail@plt+0x4658>
   159b0:	add	r3, r5, #168	; 0xa8
   159b4:	str	r3, [r5, #24]
   159b8:	ldr	r3, [r4, #44]	; 0x2c
   159bc:	cmp	r3, #0
   159c0:	beq	159d4 <__assert_fail@plt+0x4674>
   159c4:	ldr	r3, [r4, #48]	; 0x30
   159c8:	and	r3, r3, #1024	; 0x400
   159cc:	cmp	r3, #0
   159d0:	beq	15a94 <__assert_fail@plt+0x4734>
   159d4:	ldr	r3, [r4, #48]	; 0x30
   159d8:	and	r3, r3, #8
   159dc:	cmp	r3, #0
   159e0:	beq	15a2c <__assert_fail@plt+0x46cc>
   159e4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   159e8:	ldrb	r3, [r3, #18]
   159ec:	cmp	r3, #0
   159f0:	beq	15a2c <__assert_fail@plt+0x46cc>
   159f4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   159f8:	ldrb	r3, [r3, #18]
   159fc:	cmp	r3, #4
   15a00:	beq	15a2c <__assert_fail@plt+0x46cc>
   15a04:	ldr	r3, [r4, #48]	; 0x30
   15a08:	and	r3, r3, #16
   15a0c:	cmp	r3, #0
   15a10:	bne	15a24 <__assert_fail@plt+0x46c4>
   15a14:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15a18:	ldrb	r3, [r3, #18]
   15a1c:	cmp	r3, #10
   15a20:	beq	15a2c <__assert_fail@plt+0x46cc>
   15a24:	mov	r3, #1
   15a28:	b	15a30 <__assert_fail@plt+0x46d0>
   15a2c:	mov	r3, #0
   15a30:	strb	r3, [fp, #-81]	; 0xffffffaf
   15a34:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   15a38:	and	r3, r3, #1
   15a3c:	strb	r3, [fp, #-81]	; 0xffffffaf
   15a40:	mov	r3, #11
   15a44:	strh	r3, [r5, #56]	; 0x38
   15a48:	add	r2, r5, #64	; 0x40
   15a4c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15a50:	ldrb	r3, [r3, #18]
   15a54:	mov	r1, r3
   15a58:	mov	r0, r2
   15a5c:	bl	1513c <__assert_fail@plt+0x3ddc>
   15a60:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   15a64:	cmp	r3, #0
   15a68:	movne	r3, #1
   15a6c:	moveq	r3, #0
   15a70:	uxtb	r3, r3
   15a74:	eor	r3, r3, #1
   15a78:	uxtb	r3, r3
   15a7c:	and	r3, r3, #1
   15a80:	uxtb	r3, r3
   15a84:	mov	r1, r3
   15a88:	mov	r0, r5
   15a8c:	bl	139e0 <__assert_fail@plt+0x2680>
   15a90:	b	15aac <__assert_fail@plt+0x474c>
   15a94:	mov	r2, #0
   15a98:	mov	r1, r5
   15a9c:	mov	r0, r4
   15aa0:	bl	15d44 <__assert_fail@plt+0x49e4>
   15aa4:	mov	r3, r0
   15aa8:	strh	r3, [r5, #56]	; 0x38
   15aac:	mov	r3, #0
   15ab0:	str	r3, [r5, #8]
   15ab4:	cmp	r7, #0
   15ab8:	bne	15ac8 <__assert_fail@plt+0x4768>
   15abc:	str	r5, [fp, #-24]	; 0xffffffe8
   15ac0:	ldr	r7, [fp, #-24]	; 0xffffffe8
   15ac4:	b	15ad4 <__assert_fail@plt+0x4774>
   15ac8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15acc:	str	r5, [r3, #8]
   15ad0:	str	r5, [fp, #-24]	; 0xffffffe8
   15ad4:	ldr	r3, [pc, #604]	; 15d38 <__assert_fail@plt+0x49d8>
   15ad8:	cmp	r6, r3
   15adc:	bne	15b04 <__assert_fail@plt+0x47a4>
   15ae0:	ldr	r3, [r4, #44]	; 0x2c
   15ae4:	cmp	r3, #0
   15ae8:	bne	15b04 <__assert_fail@plt+0x47a4>
   15aec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15af0:	mov	r1, r3
   15af4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15af8:	bl	145d0 <__assert_fail@plt+0x3270>
   15afc:	mov	r3, r0
   15b00:	strb	r3, [fp, #-37]	; 0xffffffdb
   15b04:	add	r6, r6, #1
   15b08:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15b0c:	cmp	r3, r6
   15b10:	bls	15b5c <__assert_fail@plt+0x47fc>
   15b14:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15b18:	ldr	r3, [r3, #12]
   15b1c:	cmp	r3, #0
   15b20:	bne	156c8 <__assert_fail@plt+0x4368>
   15b24:	b	15b2c <__assert_fail@plt+0x47cc>
   15b28:	nop			; (mov r0, r0)
   15b2c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15b30:	ldr	r3, [r3, #12]
   15b34:	cmp	r3, #0
   15b38:	beq	15b60 <__assert_fail@plt+0x4800>
   15b3c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15b40:	ldr	r3, [r3, #12]
   15b44:	mov	r0, r3
   15b48:	bl	1133c <closedir@plt>
   15b4c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15b50:	mov	r2, #0
   15b54:	str	r2, [r3, #12]
   15b58:	b	15b60 <__assert_fail@plt+0x4800>
   15b5c:	nop			; (mov r0, r0)
   15b60:	ldrb	r3, [fp, #-26]	; 0xffffffe6
   15b64:	cmp	r3, #0
   15b68:	beq	15b78 <__assert_fail@plt+0x4818>
   15b6c:	mov	r1, r7
   15b70:	mov	r0, r4
   15b74:	bl	162ac <__assert_fail@plt+0x4f4c>
   15b78:	ldr	r3, [r4, #48]	; 0x30
   15b7c:	and	r3, r3, #4
   15b80:	cmp	r3, #0
   15b84:	beq	15bb8 <__assert_fail@plt+0x4858>
   15b88:	ldr	r2, [r4, #36]	; 0x24
   15b8c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15b90:	cmp	r2, r3
   15b94:	beq	15ba0 <__assert_fail@plt+0x4840>
   15b98:	cmp	r6, #0
   15b9c:	bne	15bac <__assert_fail@plt+0x484c>
   15ba0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15ba4:	sub	r3, r3, #1
   15ba8:	str	r3, [fp, #-36]	; 0xffffffdc
   15bac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15bb0:	mov	r2, #0
   15bb4:	strb	r2, [r3]
   15bb8:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   15bbc:	eor	r3, r3, #1
   15bc0:	uxtb	r3, r3
   15bc4:	cmp	r3, #0
   15bc8:	beq	15c78 <__assert_fail@plt+0x4918>
   15bcc:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15bd0:	cmp	r3, #0
   15bd4:	beq	15c78 <__assert_fail@plt+0x4918>
   15bd8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15bdc:	cmp	r3, #1
   15be0:	beq	15bec <__assert_fail@plt+0x488c>
   15be4:	cmp	r6, #0
   15be8:	bne	15c78 <__assert_fail@plt+0x4918>
   15bec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15bf0:	ldr	r3, [r3, #48]	; 0x30
   15bf4:	cmp	r3, #0
   15bf8:	bne	15c1c <__assert_fail@plt+0x48bc>
   15bfc:	mov	r0, r4
   15c00:	bl	13b04 <__assert_fail@plt+0x27a4>
   15c04:	mov	r3, r0
   15c08:	cmp	r3, #0
   15c0c:	movne	r3, #1
   15c10:	moveq	r3, #0
   15c14:	uxtb	r3, r3
   15c18:	b	15c48 <__assert_fail@plt+0x48e8>
   15c1c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15c20:	ldr	r1, [r3, #4]
   15c24:	ldr	r3, [pc, #272]	; 15d3c <__assert_fail@plt+0x49dc>
   15c28:	mvn	r2, #0
   15c2c:	mov	r0, r4
   15c30:	bl	16460 <__assert_fail@plt+0x5100>
   15c34:	mov	r3, r0
   15c38:	cmp	r3, #0
   15c3c:	movne	r3, #1
   15c40:	moveq	r3, #0
   15c44:	uxtb	r3, r3
   15c48:	cmp	r3, #0
   15c4c:	beq	15c78 <__assert_fail@plt+0x4918>
   15c50:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15c54:	mov	r2, #7
   15c58:	strh	r2, [r3, #56]	; 0x38
   15c5c:	ldr	r3, [r4, #48]	; 0x30
   15c60:	orr	r3, r3, #8192	; 0x2000
   15c64:	str	r3, [r4, #48]	; 0x30
   15c68:	mov	r0, r7
   15c6c:	bl	16178 <__assert_fail@plt+0x4e18>
   15c70:	mov	r3, #0
   15c74:	b	15d24 <__assert_fail@plt+0x49c4>
   15c78:	cmp	r6, #0
   15c7c:	bne	15cc8 <__assert_fail@plt+0x4968>
   15c80:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15c84:	cmp	r3, #3
   15c88:	bne	15cb8 <__assert_fail@plt+0x4958>
   15c8c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15c90:	ldrh	r3, [r3, #56]	; 0x38
   15c94:	cmp	r3, #4
   15c98:	beq	15cb8 <__assert_fail@plt+0x4958>
   15c9c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15ca0:	ldrh	r3, [r3, #56]	; 0x38
   15ca4:	cmp	r3, #7
   15ca8:	beq	15cb8 <__assert_fail@plt+0x4958>
   15cac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15cb0:	mov	r2, #6
   15cb4:	strh	r2, [r3, #56]	; 0x38
   15cb8:	mov	r0, r7
   15cbc:	bl	16178 <__assert_fail@plt+0x4e18>
   15cc0:	mov	r3, #0
   15cc4:	b	15d24 <__assert_fail@plt+0x49c4>
   15cc8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   15ccc:	cmp	r3, #0
   15cd0:	beq	15cf8 <__assert_fail@plt+0x4998>
   15cd4:	ldr	r3, [pc, #100]	; 15d40 <__assert_fail@plt+0x49e0>
   15cd8:	str	r3, [r4, #44]	; 0x2c
   15cdc:	mov	r2, r6
   15ce0:	mov	r1, r7
   15ce4:	mov	r0, r4
   15ce8:	bl	15f74 <__assert_fail@plt+0x4c14>
   15cec:	mov	r7, r0
   15cf0:	mov	r3, #0
   15cf4:	str	r3, [r4, #44]	; 0x2c
   15cf8:	ldr	r3, [r4, #44]	; 0x2c
   15cfc:	cmp	r3, #0
   15d00:	beq	15d20 <__assert_fail@plt+0x49c0>
   15d04:	cmp	r6, #1
   15d08:	bls	15d20 <__assert_fail@plt+0x49c0>
   15d0c:	mov	r2, r6
   15d10:	mov	r1, r7
   15d14:	mov	r0, r4
   15d18:	bl	15f74 <__assert_fail@plt+0x4c14>
   15d1c:	mov	r7, r0
   15d20:	mov	r3, r7
   15d24:	mov	r0, r3
   15d28:	sub	sp, fp, #20
   15d2c:	pop	{r4, r5, r6, r7, fp, pc}
   15d30:	andeq	r8, r1, r0, lsr #13
   15d34:	andeq	r0, r0, r6, lsl #8
   15d38:	andeq	r2, r0, r0, lsl r7
   15d3c:	andeq	r0, r2, r0, ror #1
   15d40:	strheq	r5, [r1], -r8
   15d44:	push	{r4, fp, lr}
   15d48:	add	fp, sp, #8
   15d4c:	sub	sp, sp, #20
   15d50:	str	r0, [fp, #-24]	; 0xffffffe8
   15d54:	mov	r4, r1
   15d58:	mov	r3, r2
   15d5c:	strb	r3, [fp, #-25]	; 0xffffffe7
   15d60:	add	r3, r4, #64	; 0x40
   15d64:	str	r3, [fp, #-16]
   15d68:	ldr	r3, [r4, #48]	; 0x30
   15d6c:	cmp	r3, #0
   15d70:	bne	15d90 <__assert_fail@plt+0x4a30>
   15d74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d78:	ldr	r3, [r3, #48]	; 0x30
   15d7c:	and	r3, r3, #1
   15d80:	cmp	r3, #0
   15d84:	beq	15d90 <__assert_fail@plt+0x4a30>
   15d88:	mov	r3, #1
   15d8c:	strb	r3, [fp, #-25]	; 0xffffffe7
   15d90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d94:	ldr	r3, [r3, #48]	; 0x30
   15d98:	and	r3, r3, #2
   15d9c:	cmp	r3, #0
   15da0:	bne	15db0 <__assert_fail@plt+0x4a50>
   15da4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15da8:	cmp	r3, #0
   15dac:	beq	15e28 <__assert_fail@plt+0x4ac8>
   15db0:	ldr	r3, [r4, #24]
   15db4:	ldr	r1, [fp, #-16]
   15db8:	mov	r0, r3
   15dbc:	bl	1eee4 <__assert_fail@plt+0xdb84>
   15dc0:	mov	r3, r0
   15dc4:	cmp	r3, #0
   15dc8:	beq	15e74 <__assert_fail@plt+0x4b14>
   15dcc:	bl	11228 <__errno_location@plt>
   15dd0:	mov	r3, r0
   15dd4:	ldr	r3, [r3]
   15dd8:	cmp	r3, #2
   15ddc:	bne	15e14 <__assert_fail@plt+0x4ab4>
   15de0:	ldr	r3, [r4, #24]
   15de4:	ldr	r1, [fp, #-16]
   15de8:	mov	r0, r3
   15dec:	bl	1ef04 <__assert_fail@plt+0xdba4>
   15df0:	mov	r3, r0
   15df4:	cmp	r3, #0
   15df8:	bne	15e14 <__assert_fail@plt+0x4ab4>
   15dfc:	bl	11228 <__errno_location@plt>
   15e00:	mov	r2, r0
   15e04:	mov	r3, #0
   15e08:	str	r3, [r2]
   15e0c:	mov	r3, #13
   15e10:	b	15f18 <__assert_fail@plt+0x4bb8>
   15e14:	bl	11228 <__errno_location@plt>
   15e18:	mov	r3, r0
   15e1c:	ldr	r3, [r3]
   15e20:	str	r3, [r4, #32]
   15e24:	b	15e5c <__assert_fail@plt+0x4afc>
   15e28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15e2c:	ldr	r0, [r3, #32]
   15e30:	ldr	r1, [r4, #24]
   15e34:	mov	r3, #256	; 0x100
   15e38:	ldr	r2, [fp, #-16]
   15e3c:	bl	1ef14 <__assert_fail@plt+0xdbb4>
   15e40:	mov	r3, r0
   15e44:	cmp	r3, #0
   15e48:	beq	15e74 <__assert_fail@plt+0x4b14>
   15e4c:	bl	11228 <__errno_location@plt>
   15e50:	mov	r3, r0
   15e54:	ldr	r3, [r3]
   15e58:	str	r3, [r4, #32]
   15e5c:	mov	r2, #104	; 0x68
   15e60:	mov	r1, #0
   15e64:	ldr	r0, [fp, #-16]
   15e68:	bl	11240 <memset@plt>
   15e6c:	mov	r3, #10
   15e70:	b	15f18 <__assert_fail@plt+0x4bb8>
   15e74:	ldr	r3, [fp, #-16]
   15e78:	ldr	r3, [r3, #16]
   15e7c:	and	r3, r3, #61440	; 0xf000
   15e80:	cmp	r3, #16384	; 0x4000
   15e84:	bne	15edc <__assert_fail@plt+0x4b7c>
   15e88:	ldrb	r3, [r4, #168]	; 0xa8
   15e8c:	cmp	r3, #46	; 0x2e
   15e90:	bne	15ed4 <__assert_fail@plt+0x4b74>
   15e94:	ldrb	r3, [r4, #169]	; 0xa9
   15e98:	cmp	r3, #0
   15e9c:	beq	15eb8 <__assert_fail@plt+0x4b58>
   15ea0:	ldrb	r3, [r4, #169]	; 0xa9
   15ea4:	cmp	r3, #46	; 0x2e
   15ea8:	bne	15ed4 <__assert_fail@plt+0x4b74>
   15eac:	ldrb	r3, [r4, #170]	; 0xaa
   15eb0:	cmp	r3, #0
   15eb4:	bne	15ed4 <__assert_fail@plt+0x4b74>
   15eb8:	ldr	r3, [r4, #48]	; 0x30
   15ebc:	cmp	r3, #0
   15ec0:	bne	15ecc <__assert_fail@plt+0x4b6c>
   15ec4:	mov	r3, #1
   15ec8:	b	15f18 <__assert_fail@plt+0x4bb8>
   15ecc:	mov	r3, #5
   15ed0:	b	15f18 <__assert_fail@plt+0x4bb8>
   15ed4:	mov	r3, #1
   15ed8:	b	15f18 <__assert_fail@plt+0x4bb8>
   15edc:	ldr	r3, [fp, #-16]
   15ee0:	ldr	r3, [r3, #16]
   15ee4:	and	r3, r3, #61440	; 0xf000
   15ee8:	cmp	r3, #40960	; 0xa000
   15eec:	bne	15ef8 <__assert_fail@plt+0x4b98>
   15ef0:	mov	r3, #12
   15ef4:	b	15f18 <__assert_fail@plt+0x4bb8>
   15ef8:	ldr	r3, [fp, #-16]
   15efc:	ldr	r3, [r3, #16]
   15f00:	and	r3, r3, #61440	; 0xf000
   15f04:	cmp	r3, #32768	; 0x8000
   15f08:	bne	15f14 <__assert_fail@plt+0x4bb4>
   15f0c:	mov	r3, #8
   15f10:	b	15f18 <__assert_fail@plt+0x4bb8>
   15f14:	mov	r3, #3
   15f18:	mov	r0, r3
   15f1c:	sub	sp, fp, #8
   15f20:	pop	{r4, fp, pc}
   15f24:	push	{fp, lr}
   15f28:	add	fp, sp, #4
   15f2c:	sub	sp, sp, #16
   15f30:	str	r0, [fp, #-16]
   15f34:	str	r1, [fp, #-20]	; 0xffffffec
   15f38:	ldr	r3, [fp, #-16]
   15f3c:	str	r3, [fp, #-8]
   15f40:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f44:	str	r3, [fp, #-12]
   15f48:	ldr	r3, [fp, #-8]
   15f4c:	ldr	r3, [r3]
   15f50:	ldr	r3, [r3, #44]	; 0x2c
   15f54:	ldr	r3, [r3, #44]	; 0x2c
   15f58:	ldr	r1, [fp, #-12]
   15f5c:	ldr	r0, [fp, #-8]
   15f60:	blx	r3
   15f64:	mov	r3, r0
   15f68:	mov	r0, r3
   15f6c:	sub	sp, fp, #4
   15f70:	pop	{fp, pc}
   15f74:	push	{r4, r5, r6, fp, lr}
   15f78:	add	fp, sp, #16
   15f7c:	sub	sp, sp, #28
   15f80:	str	r0, [fp, #-40]	; 0xffffffd8
   15f84:	str	r1, [fp, #-44]	; 0xffffffd4
   15f88:	mov	r5, r2
   15f8c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15f90:	ldr	r3, [r3, #44]	; 0x2c
   15f94:	str	r3, [fp, #-24]	; 0xffffffe8
   15f98:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15f9c:	ldr	r3, [r3, #40]	; 0x28
   15fa0:	cmp	r3, r5
   15fa4:	bcs	16030 <__assert_fail@plt+0x4cd0>
   15fa8:	add	r2, r5, #40	; 0x28
   15fac:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15fb0:	str	r2, [r3, #40]	; 0x28
   15fb4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15fb8:	ldr	r3, [r3, #40]	; 0x28
   15fbc:	cmn	r3, #-1073741823	; 0xc0000001
   15fc0:	bhi	15ff4 <__assert_fail@plt+0x4c94>
   15fc4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15fc8:	ldr	r2, [r3, #8]
   15fcc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15fd0:	ldr	r3, [r3, #40]	; 0x28
   15fd4:	lsl	r3, r3, #2
   15fd8:	mov	r1, r3
   15fdc:	mov	r0, r2
   15fe0:	bl	1d114 <__assert_fail@plt+0xbdb4>
   15fe4:	str	r0, [fp, #-28]	; 0xffffffe4
   15fe8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15fec:	cmp	r3, #0
   15ff0:	bne	16024 <__assert_fail@plt+0x4cc4>
   15ff4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15ff8:	ldr	r3, [r3, #8]
   15ffc:	mov	r0, r3
   16000:	bl	1347c <__assert_fail@plt+0x211c>
   16004:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16008:	mov	r2, #0
   1600c:	str	r2, [r3, #8]
   16010:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16014:	mov	r2, #0
   16018:	str	r2, [r3, #40]	; 0x28
   1601c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16020:	b	160b0 <__assert_fail@plt+0x4d50>
   16024:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16028:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1602c:	str	r2, [r3, #8]
   16030:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16034:	ldr	r4, [r3, #8]
   16038:	ldr	r6, [fp, #-44]	; 0xffffffd4
   1603c:	b	16050 <__assert_fail@plt+0x4cf0>
   16040:	mov	r3, r4
   16044:	add	r4, r3, #4
   16048:	str	r6, [r3]
   1604c:	ldr	r6, [r6, #8]
   16050:	cmp	r6, #0
   16054:	bne	16040 <__assert_fail@plt+0x4ce0>
   16058:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1605c:	ldr	r0, [r3, #8]
   16060:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16064:	mov	r2, #4
   16068:	mov	r1, r5
   1606c:	bl	112dc <qsort@plt>
   16070:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16074:	ldr	r4, [r3, #8]
   16078:	ldr	r3, [r4]
   1607c:	str	r3, [fp, #-44]	; 0xffffffd4
   16080:	b	16094 <__assert_fail@plt+0x4d34>
   16084:	ldr	r3, [r4]
   16088:	ldr	r2, [r4, #4]
   1608c:	str	r2, [r3, #8]
   16090:	add	r4, r4, #4
   16094:	sub	r5, r5, #1
   16098:	cmp	r5, #0
   1609c:	bne	16084 <__assert_fail@plt+0x4d24>
   160a0:	ldr	r3, [r4]
   160a4:	mov	r2, #0
   160a8:	str	r2, [r3, #8]
   160ac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   160b0:	mov	r0, r3
   160b4:	sub	sp, fp, #16
   160b8:	pop	{r4, r5, r6, fp, pc}
   160bc:	push	{r4, r5, fp, lr}
   160c0:	add	fp, sp, #12
   160c4:	sub	sp, sp, #16
   160c8:	str	r0, [fp, #-24]	; 0xffffffe8
   160cc:	str	r1, [fp, #-28]	; 0xffffffe4
   160d0:	mov	r5, r2
   160d4:	add	r3, r5, #176	; 0xb0
   160d8:	bic	r3, r3, #7
   160dc:	str	r3, [fp, #-16]
   160e0:	ldr	r0, [fp, #-16]
   160e4:	bl	1d06c <__assert_fail@plt+0xbd0c>
   160e8:	mov	r3, r0
   160ec:	mov	r4, r3
   160f0:	cmp	r4, #0
   160f4:	bne	16100 <__assert_fail@plt+0x4da0>
   160f8:	mov	r3, #0
   160fc:	b	1616c <__assert_fail@plt+0x4e0c>
   16100:	add	r3, r4, #168	; 0xa8
   16104:	mov	r2, r5
   16108:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1610c:	mov	r0, r3
   16110:	bl	1109c <memcpy@plt>
   16114:	add	r3, r4, r5
   16118:	mov	r2, #0
   1611c:	strb	r2, [r3, #168]	; 0xa8
   16120:	str	r5, [r4, #52]	; 0x34
   16124:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16128:	str	r3, [r4, #44]	; 0x2c
   1612c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16130:	ldr	r3, [r3, #24]
   16134:	str	r3, [r4, #28]
   16138:	mov	r3, #0
   1613c:	str	r3, [r4, #32]
   16140:	mov	r3, #0
   16144:	str	r3, [r4, #12]
   16148:	mov	r3, #0
   1614c:	strh	r3, [r4, #58]	; 0x3a
   16150:	mov	r3, #3
   16154:	strh	r3, [r4, #60]	; 0x3c
   16158:	mov	r3, #0
   1615c:	str	r3, [r4, #16]
   16160:	mov	r3, #0
   16164:	str	r3, [r4, #20]
   16168:	mov	r3, r4
   1616c:	mov	r0, r3
   16170:	sub	sp, fp, #12
   16174:	pop	{r4, r5, fp, pc}
   16178:	push	{r4, r5, fp, lr}
   1617c:	add	fp, sp, #12
   16180:	mov	r5, r0
   16184:	b	161ac <__assert_fail@plt+0x4e4c>
   16188:	ldr	r5, [r5, #8]
   1618c:	ldr	r3, [r4, #12]
   16190:	cmp	r3, #0
   16194:	beq	161a4 <__assert_fail@plt+0x4e44>
   16198:	ldr	r3, [r4, #12]
   1619c:	mov	r0, r3
   161a0:	bl	1133c <closedir@plt>
   161a4:	mov	r0, r4
   161a8:	bl	1347c <__assert_fail@plt+0x211c>
   161ac:	mov	r4, r5
   161b0:	cmp	r4, #0
   161b4:	bne	16188 <__assert_fail@plt+0x4e28>
   161b8:	nop			; (mov r0, r0)
   161bc:	pop	{r4, r5, fp, pc}
   161c0:	push	{fp, lr}
   161c4:	add	fp, sp, #4
   161c8:	sub	sp, sp, #16
   161cc:	str	r0, [fp, #-16]
   161d0:	str	r1, [fp, #-20]	; 0xffffffec
   161d4:	ldr	r3, [fp, #-16]
   161d8:	ldr	r2, [r3, #36]	; 0x24
   161dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   161e0:	add	r3, r2, r3
   161e4:	add	r3, r3, #256	; 0x100
   161e8:	str	r3, [fp, #-8]
   161ec:	ldr	r3, [fp, #-16]
   161f0:	ldr	r2, [r3, #36]	; 0x24
   161f4:	ldr	r3, [fp, #-8]
   161f8:	cmp	r2, r3
   161fc:	bls	16234 <__assert_fail@plt+0x4ed4>
   16200:	ldr	r3, [fp, #-16]
   16204:	ldr	r3, [r3, #24]
   16208:	mov	r0, r3
   1620c:	bl	1347c <__assert_fail@plt+0x211c>
   16210:	ldr	r3, [fp, #-16]
   16214:	mov	r2, #0
   16218:	str	r2, [r3, #24]
   1621c:	bl	11228 <__errno_location@plt>
   16220:	mov	r2, r0
   16224:	mov	r3, #36	; 0x24
   16228:	str	r3, [r2]
   1622c:	mov	r3, #0
   16230:	b	162a0 <__assert_fail@plt+0x4f40>
   16234:	ldr	r3, [fp, #-16]
   16238:	ldr	r2, [fp, #-8]
   1623c:	str	r2, [r3, #36]	; 0x24
   16240:	ldr	r3, [fp, #-16]
   16244:	ldr	r2, [r3, #24]
   16248:	ldr	r3, [fp, #-16]
   1624c:	ldr	r3, [r3, #36]	; 0x24
   16250:	mov	r1, r3
   16254:	mov	r0, r2
   16258:	bl	1d114 <__assert_fail@plt+0xbdb4>
   1625c:	str	r0, [fp, #-12]
   16260:	ldr	r3, [fp, #-12]
   16264:	cmp	r3, #0
   16268:	bne	16290 <__assert_fail@plt+0x4f30>
   1626c:	ldr	r3, [fp, #-16]
   16270:	ldr	r3, [r3, #24]
   16274:	mov	r0, r3
   16278:	bl	1347c <__assert_fail@plt+0x211c>
   1627c:	ldr	r3, [fp, #-16]
   16280:	mov	r2, #0
   16284:	str	r2, [r3, #24]
   16288:	mov	r3, #0
   1628c:	b	162a0 <__assert_fail@plt+0x4f40>
   16290:	ldr	r3, [fp, #-16]
   16294:	ldr	r2, [fp, #-12]
   16298:	str	r2, [r3, #24]
   1629c:	mov	r3, #1
   162a0:	mov	r0, r3
   162a4:	sub	sp, fp, #4
   162a8:	pop	{fp, pc}
   162ac:	push	{fp}		; (str fp, [sp, #-4]!)
   162b0:	add	fp, sp, #0
   162b4:	sub	sp, sp, #20
   162b8:	str	r0, [fp, #-16]
   162bc:	str	r1, [fp, #-20]	; 0xffffffec
   162c0:	ldr	r3, [fp, #-16]
   162c4:	ldr	r3, [r3, #24]
   162c8:	str	r3, [fp, #-12]
   162cc:	ldr	r3, [fp, #-16]
   162d0:	ldr	r3, [r3, #4]
   162d4:	str	r3, [fp, #-8]
   162d8:	b	16338 <__assert_fail@plt+0x4fd8>
   162dc:	ldr	r3, [fp, #-8]
   162e0:	ldr	r2, [r3, #24]
   162e4:	ldr	r3, [fp, #-8]
   162e8:	add	r3, r3, #168	; 0xa8
   162ec:	cmp	r2, r3
   162f0:	beq	16320 <__assert_fail@plt+0x4fc0>
   162f4:	ldr	r3, [fp, #-8]
   162f8:	ldr	r3, [r3, #24]
   162fc:	mov	r2, r3
   16300:	ldr	r3, [fp, #-8]
   16304:	ldr	r3, [r3, #28]
   16308:	sub	r3, r2, r3
   1630c:	mov	r2, r3
   16310:	ldr	r3, [fp, #-12]
   16314:	add	r2, r3, r2
   16318:	ldr	r3, [fp, #-8]
   1631c:	str	r2, [r3, #24]
   16320:	ldr	r3, [fp, #-8]
   16324:	ldr	r2, [fp, #-12]
   16328:	str	r2, [r3, #28]
   1632c:	ldr	r3, [fp, #-8]
   16330:	ldr	r3, [r3, #8]
   16334:	str	r3, [fp, #-8]
   16338:	ldr	r3, [fp, #-8]
   1633c:	cmp	r3, #0
   16340:	bne	162dc <__assert_fail@plt+0x4f7c>
   16344:	ldr	r3, [fp, #-20]	; 0xffffffec
   16348:	str	r3, [fp, #-8]
   1634c:	b	163c8 <__assert_fail@plt+0x5068>
   16350:	ldr	r3, [fp, #-8]
   16354:	ldr	r2, [r3, #24]
   16358:	ldr	r3, [fp, #-8]
   1635c:	add	r3, r3, #168	; 0xa8
   16360:	cmp	r2, r3
   16364:	beq	16394 <__assert_fail@plt+0x5034>
   16368:	ldr	r3, [fp, #-8]
   1636c:	ldr	r3, [r3, #24]
   16370:	mov	r2, r3
   16374:	ldr	r3, [fp, #-8]
   16378:	ldr	r3, [r3, #28]
   1637c:	sub	r3, r2, r3
   16380:	mov	r2, r3
   16384:	ldr	r3, [fp, #-12]
   16388:	add	r2, r3, r2
   1638c:	ldr	r3, [fp, #-8]
   16390:	str	r2, [r3, #24]
   16394:	ldr	r3, [fp, #-8]
   16398:	ldr	r2, [fp, #-12]
   1639c:	str	r2, [r3, #28]
   163a0:	ldr	r3, [fp, #-8]
   163a4:	ldr	r3, [r3, #8]
   163a8:	cmp	r3, #0
   163ac:	beq	163bc <__assert_fail@plt+0x505c>
   163b0:	ldr	r3, [fp, #-8]
   163b4:	ldr	r3, [r3, #8]
   163b8:	b	163c4 <__assert_fail@plt+0x5064>
   163bc:	ldr	r3, [fp, #-8]
   163c0:	ldr	r3, [r3, #4]
   163c4:	str	r3, [fp, #-8]
   163c8:	ldr	r3, [fp, #-8]
   163cc:	ldr	r3, [r3, #48]	; 0x30
   163d0:	cmp	r3, #0
   163d4:	bge	16350 <__assert_fail@plt+0x4ff0>
   163d8:	nop			; (mov r0, r0)
   163dc:	add	sp, fp, #0
   163e0:	pop	{fp}		; (ldr fp, [sp], #4)
   163e4:	bx	lr
   163e8:	push	{fp, lr}
   163ec:	add	fp, sp, #4
   163f0:	sub	sp, sp, #16
   163f4:	str	r0, [fp, #-16]
   163f8:	mov	r3, #0
   163fc:	str	r3, [fp, #-8]
   16400:	b	1643c <__assert_fail@plt+0x50dc>
   16404:	ldr	r3, [fp, #-16]
   16408:	ldr	r3, [r3]
   1640c:	mov	r0, r3
   16410:	bl	111ec <strlen@plt>
   16414:	str	r0, [fp, #-12]
   16418:	ldr	r2, [fp, #-12]
   1641c:	ldr	r3, [fp, #-8]
   16420:	cmp	r2, r3
   16424:	bls	16430 <__assert_fail@plt+0x50d0>
   16428:	ldr	r3, [fp, #-12]
   1642c:	str	r3, [fp, #-8]
   16430:	ldr	r3, [fp, #-16]
   16434:	add	r3, r3, #4
   16438:	str	r3, [fp, #-16]
   1643c:	ldr	r3, [fp, #-16]
   16440:	ldr	r3, [r3]
   16444:	cmp	r3, #0
   16448:	bne	16404 <__assert_fail@plt+0x50a4>
   1644c:	ldr	r3, [fp, #-8]
   16450:	add	r3, r3, #1
   16454:	mov	r0, r3
   16458:	sub	sp, fp, #4
   1645c:	pop	{fp, pc}
   16460:	push	{fp, lr}
   16464:	add	fp, sp, #4
   16468:	sub	sp, sp, #144	; 0x90
   1646c:	str	r0, [fp, #-136]	; 0xffffff78
   16470:	str	r1, [fp, #-140]	; 0xffffff74
   16474:	str	r2, [fp, #-144]	; 0xffffff70
   16478:	str	r3, [fp, #-148]	; 0xffffff6c
   1647c:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16480:	cmp	r3, #0
   16484:	beq	164a8 <__assert_fail@plt+0x5148>
   16488:	ldr	r1, [pc, #632]	; 16708 <__assert_fail@plt+0x53a8>
   1648c:	ldr	r0, [fp, #-148]	; 0xffffff6c
   16490:	bl	11048 <strcmp@plt>
   16494:	mov	r3, r0
   16498:	cmp	r3, #0
   1649c:	bne	164a8 <__assert_fail@plt+0x5148>
   164a0:	mov	r3, #1
   164a4:	b	164ac <__assert_fail@plt+0x514c>
   164a8:	mov	r3, #0
   164ac:	strb	r3, [fp, #-13]
   164b0:	ldrb	r3, [fp, #-13]
   164b4:	and	r3, r3, #1
   164b8:	strb	r3, [fp, #-13]
   164bc:	ldr	r3, [fp, #-136]	; 0xffffff78
   164c0:	ldr	r3, [r3, #48]	; 0x30
   164c4:	and	r3, r3, #4
   164c8:	cmp	r3, #0
   164cc:	beq	16500 <__assert_fail@plt+0x51a0>
   164d0:	ldr	r3, [fp, #-136]	; 0xffffff78
   164d4:	ldr	r3, [r3, #48]	; 0x30
   164d8:	and	r3, r3, #512	; 0x200
   164dc:	cmp	r3, #0
   164e0:	beq	164f8 <__assert_fail@plt+0x5198>
   164e4:	ldr	r3, [fp, #-144]	; 0xffffff70
   164e8:	cmp	r3, #0
   164ec:	blt	164f8 <__assert_fail@plt+0x5198>
   164f0:	ldr	r0, [fp, #-144]	; 0xffffff70
   164f4:	bl	11324 <close@plt>
   164f8:	mov	r3, #0
   164fc:	b	166fc <__assert_fail@plt+0x539c>
   16500:	ldr	r3, [fp, #-144]	; 0xffffff70
   16504:	cmp	r3, #0
   16508:	bge	16580 <__assert_fail@plt+0x5220>
   1650c:	ldrb	r3, [fp, #-13]
   16510:	cmp	r3, #0
   16514:	beq	16580 <__assert_fail@plt+0x5220>
   16518:	ldr	r3, [fp, #-136]	; 0xffffff78
   1651c:	ldr	r3, [r3, #48]	; 0x30
   16520:	and	r3, r3, #512	; 0x200
   16524:	cmp	r3, #0
   16528:	beq	16580 <__assert_fail@plt+0x5220>
   1652c:	ldr	r3, [fp, #-136]	; 0xffffff78
   16530:	add	r3, r3, #60	; 0x3c
   16534:	mov	r0, r3
   16538:	bl	182f8 <__assert_fail@plt+0x6f98>
   1653c:	mov	r3, r0
   16540:	eor	r3, r3, #1
   16544:	uxtb	r3, r3
   16548:	cmp	r3, #0
   1654c:	beq	16580 <__assert_fail@plt+0x5220>
   16550:	ldr	r3, [fp, #-136]	; 0xffffff78
   16554:	add	r3, r3, #60	; 0x3c
   16558:	mov	r0, r3
   1655c:	bl	183e0 <__assert_fail@plt+0x7080>
   16560:	str	r0, [fp, #-20]	; 0xffffffec
   16564:	ldr	r3, [fp, #-20]	; 0xffffffec
   16568:	cmp	r3, #0
   1656c:	blt	16580 <__assert_fail@plt+0x5220>
   16570:	ldr	r3, [fp, #-20]	; 0xffffffec
   16574:	str	r3, [fp, #-144]	; 0xffffff70
   16578:	mov	r3, #0
   1657c:	str	r3, [fp, #-148]	; 0xffffff6c
   16580:	ldr	r3, [fp, #-144]	; 0xffffff70
   16584:	str	r3, [fp, #-12]
   16588:	ldr	r3, [fp, #-144]	; 0xffffff70
   1658c:	cmp	r3, #0
   16590:	bge	165b8 <__assert_fail@plt+0x5258>
   16594:	ldr	r1, [fp, #-148]	; 0xffffff6c
   16598:	ldr	r0, [fp, #-136]	; 0xffffff78
   1659c:	bl	13bdc <__assert_fail@plt+0x287c>
   165a0:	str	r0, [fp, #-12]
   165a4:	ldr	r3, [fp, #-12]
   165a8:	cmp	r3, #0
   165ac:	bge	165b8 <__assert_fail@plt+0x5258>
   165b0:	mvn	r3, #0
   165b4:	b	166fc <__assert_fail@plt+0x539c>
   165b8:	ldr	r3, [fp, #-136]	; 0xffffff78
   165bc:	ldr	r3, [r3, #48]	; 0x30
   165c0:	and	r3, r3, #2
   165c4:	cmp	r3, #0
   165c8:	bne	165f0 <__assert_fail@plt+0x5290>
   165cc:	ldr	r3, [fp, #-148]	; 0xffffff6c
   165d0:	cmp	r3, #0
   165d4:	beq	16668 <__assert_fail@plt+0x5308>
   165d8:	ldr	r1, [pc, #296]	; 16708 <__assert_fail@plt+0x53a8>
   165dc:	ldr	r0, [fp, #-148]	; 0xffffff6c
   165e0:	bl	11048 <strcmp@plt>
   165e4:	mov	r3, r0
   165e8:	cmp	r3, #0
   165ec:	bne	16668 <__assert_fail@plt+0x5308>
   165f0:	sub	r3, fp, #132	; 0x84
   165f4:	mov	r1, r3
   165f8:	ldr	r0, [fp, #-12]
   165fc:	bl	1eef4 <__assert_fail@plt+0xdb94>
   16600:	mov	r3, r0
   16604:	cmp	r3, #0
   16608:	beq	16618 <__assert_fail@plt+0x52b8>
   1660c:	mvn	r3, #0
   16610:	str	r3, [fp, #-8]
   16614:	b	166c4 <__assert_fail@plt+0x5364>
   16618:	ldr	r3, [fp, #-140]	; 0xffffff74
   1661c:	ldrd	r0, [r3, #64]	; 0x40
   16620:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   16624:	cmp	r1, r3
   16628:	cmpeq	r0, r2
   1662c:	bne	16648 <__assert_fail@plt+0x52e8>
   16630:	ldr	r3, [fp, #-140]	; 0xffffff74
   16634:	ldrd	r0, [r3, #160]	; 0xa0
   16638:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1663c:	cmp	r1, r3
   16640:	cmpeq	r0, r2
   16644:	beq	16668 <__assert_fail@plt+0x5308>
   16648:	bl	11228 <__errno_location@plt>
   1664c:	mov	r2, r0
   16650:	mov	r3, #2
   16654:	str	r3, [r2]
   16658:	mvn	r3, #0
   1665c:	str	r3, [fp, #-8]
   16660:	nop			; (mov r0, r0)
   16664:	b	166c4 <__assert_fail@plt+0x5364>
   16668:	ldr	r3, [fp, #-136]	; 0xffffff78
   1666c:	ldr	r3, [r3, #48]	; 0x30
   16670:	and	r3, r3, #512	; 0x200
   16674:	cmp	r3, #0
   16678:	beq	166b8 <__assert_fail@plt+0x5358>
   1667c:	ldrb	r3, [fp, #-13]
   16680:	cmp	r3, #0
   16684:	movne	r3, #1
   16688:	moveq	r3, #0
   1668c:	uxtb	r3, r3
   16690:	eor	r3, r3, #1
   16694:	uxtb	r3, r3
   16698:	and	r3, r3, #1
   1669c:	uxtb	r3, r3
   166a0:	mov	r2, r3
   166a4:	ldr	r1, [fp, #-12]
   166a8:	ldr	r0, [fp, #-136]	; 0xffffff78
   166ac:	bl	13a40 <__assert_fail@plt+0x26e0>
   166b0:	mov	r3, #0
   166b4:	b	166fc <__assert_fail@plt+0x539c>
   166b8:	ldr	r0, [fp, #-12]
   166bc:	bl	112d0 <fchdir@plt>
   166c0:	str	r0, [fp, #-8]
   166c4:	ldr	r3, [fp, #-144]	; 0xffffff70
   166c8:	cmp	r3, #0
   166cc:	bge	166f8 <__assert_fail@plt+0x5398>
   166d0:	bl	11228 <__errno_location@plt>
   166d4:	mov	r3, r0
   166d8:	ldr	r3, [r3]
   166dc:	str	r3, [fp, #-24]	; 0xffffffe8
   166e0:	ldr	r0, [fp, #-12]
   166e4:	bl	11324 <close@plt>
   166e8:	bl	11228 <__errno_location@plt>
   166ec:	mov	r2, r0
   166f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166f4:	str	r3, [r2]
   166f8:	ldr	r3, [fp, #-8]
   166fc:	mov	r0, r3
   16700:	sub	sp, fp, #4
   16704:	pop	{fp, pc}
   16708:	andeq	r0, r2, r0, ror #1
   1670c:	andeq	r0, r0, r0
   16710:	push	{fp}		; (str fp, [sp, #-4]!)
   16714:	add	fp, sp, #0
   16718:	sub	sp, sp, #12
   1671c:	str	r0, [fp, #-8]
   16720:	ldr	r3, [fp, #-8]
   16724:	ldr	r3, [r3, #8]
   16728:	mov	r0, r3
   1672c:	add	sp, fp, #0
   16730:	pop	{fp}		; (ldr fp, [sp], #4)
   16734:	bx	lr
   16738:	push	{fp}		; (str fp, [sp, #-4]!)
   1673c:	add	fp, sp, #0
   16740:	sub	sp, sp, #12
   16744:	str	r0, [fp, #-8]
   16748:	ldr	r3, [fp, #-8]
   1674c:	ldr	r3, [r3, #12]
   16750:	mov	r0, r3
   16754:	add	sp, fp, #0
   16758:	pop	{fp}		; (ldr fp, [sp], #4)
   1675c:	bx	lr
   16760:	push	{fp}		; (str fp, [sp, #-4]!)
   16764:	add	fp, sp, #0
   16768:	sub	sp, sp, #12
   1676c:	str	r0, [fp, #-8]
   16770:	ldr	r3, [fp, #-8]
   16774:	ldr	r3, [r3, #16]
   16778:	mov	r0, r3
   1677c:	add	sp, fp, #0
   16780:	pop	{fp}		; (ldr fp, [sp], #4)
   16784:	bx	lr
   16788:	push	{fp}		; (str fp, [sp, #-4]!)
   1678c:	add	fp, sp, #0
   16790:	sub	sp, sp, #28
   16794:	str	r0, [fp, #-24]	; 0xffffffe8
   16798:	mov	r3, #0
   1679c:	str	r3, [fp, #-12]
   167a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167a4:	ldr	r3, [r3]
   167a8:	str	r3, [fp, #-8]
   167ac:	b	1681c <__assert_fail@plt+0x54bc>
   167b0:	ldr	r3, [fp, #-8]
   167b4:	ldr	r3, [r3]
   167b8:	cmp	r3, #0
   167bc:	beq	16810 <__assert_fail@plt+0x54b0>
   167c0:	ldr	r3, [fp, #-8]
   167c4:	str	r3, [fp, #-16]
   167c8:	mov	r3, #1
   167cc:	str	r3, [fp, #-20]	; 0xffffffec
   167d0:	b	167e0 <__assert_fail@plt+0x5480>
   167d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   167d8:	add	r3, r3, #1
   167dc:	str	r3, [fp, #-20]	; 0xffffffec
   167e0:	ldr	r3, [fp, #-16]
   167e4:	ldr	r3, [r3, #4]
   167e8:	str	r3, [fp, #-16]
   167ec:	ldr	r3, [fp, #-16]
   167f0:	cmp	r3, #0
   167f4:	bne	167d4 <__assert_fail@plt+0x5474>
   167f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   167fc:	ldr	r3, [fp, #-12]
   16800:	cmp	r2, r3
   16804:	bls	16810 <__assert_fail@plt+0x54b0>
   16808:	ldr	r3, [fp, #-20]	; 0xffffffec
   1680c:	str	r3, [fp, #-12]
   16810:	ldr	r3, [fp, #-8]
   16814:	add	r3, r3, #8
   16818:	str	r3, [fp, #-8]
   1681c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16820:	ldr	r2, [r3, #4]
   16824:	ldr	r3, [fp, #-8]
   16828:	cmp	r2, r3
   1682c:	bhi	167b0 <__assert_fail@plt+0x5450>
   16830:	ldr	r3, [fp, #-12]
   16834:	mov	r0, r3
   16838:	add	sp, fp, #0
   1683c:	pop	{fp}		; (ldr fp, [sp], #4)
   16840:	bx	lr
   16844:	push	{fp}		; (str fp, [sp, #-4]!)
   16848:	add	fp, sp, #0
   1684c:	sub	sp, sp, #28
   16850:	str	r0, [fp, #-24]	; 0xffffffe8
   16854:	mov	r3, #0
   16858:	str	r3, [fp, #-12]
   1685c:	mov	r3, #0
   16860:	str	r3, [fp, #-16]
   16864:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16868:	ldr	r3, [r3]
   1686c:	str	r3, [fp, #-8]
   16870:	b	168d8 <__assert_fail@plt+0x5578>
   16874:	ldr	r3, [fp, #-8]
   16878:	ldr	r3, [r3]
   1687c:	cmp	r3, #0
   16880:	beq	168cc <__assert_fail@plt+0x556c>
   16884:	ldr	r3, [fp, #-8]
   16888:	str	r3, [fp, #-20]	; 0xffffffec
   1688c:	ldr	r3, [fp, #-12]
   16890:	add	r3, r3, #1
   16894:	str	r3, [fp, #-12]
   16898:	ldr	r3, [fp, #-16]
   1689c:	add	r3, r3, #1
   168a0:	str	r3, [fp, #-16]
   168a4:	b	168b4 <__assert_fail@plt+0x5554>
   168a8:	ldr	r3, [fp, #-16]
   168ac:	add	r3, r3, #1
   168b0:	str	r3, [fp, #-16]
   168b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   168b8:	ldr	r3, [r3, #4]
   168bc:	str	r3, [fp, #-20]	; 0xffffffec
   168c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   168c4:	cmp	r3, #0
   168c8:	bne	168a8 <__assert_fail@plt+0x5548>
   168cc:	ldr	r3, [fp, #-8]
   168d0:	add	r3, r3, #8
   168d4:	str	r3, [fp, #-8]
   168d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168dc:	ldr	r2, [r3, #4]
   168e0:	ldr	r3, [fp, #-8]
   168e4:	cmp	r2, r3
   168e8:	bhi	16874 <__assert_fail@plt+0x5514>
   168ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168f0:	ldr	r2, [r3, #12]
   168f4:	ldr	r3, [fp, #-12]
   168f8:	cmp	r2, r3
   168fc:	bne	1691c <__assert_fail@plt+0x55bc>
   16900:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16904:	ldr	r2, [r3, #16]
   16908:	ldr	r3, [fp, #-16]
   1690c:	cmp	r2, r3
   16910:	bne	1691c <__assert_fail@plt+0x55bc>
   16914:	mov	r3, #1
   16918:	b	16920 <__assert_fail@plt+0x55c0>
   1691c:	mov	r3, #0
   16920:	mov	r0, r3
   16924:	add	sp, fp, #0
   16928:	pop	{fp}		; (ldr fp, [sp], #4)
   1692c:	bx	lr
   16930:	push	{fp, lr}
   16934:	add	fp, sp, #4
   16938:	sub	sp, sp, #32
   1693c:	str	r0, [fp, #-24]	; 0xffffffe8
   16940:	str	r1, [fp, #-28]	; 0xffffffe4
   16944:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16948:	bl	16760 <__assert_fail@plt+0x5400>
   1694c:	str	r0, [fp, #-8]
   16950:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16954:	bl	16710 <__assert_fail@plt+0x53b0>
   16958:	str	r0, [fp, #-12]
   1695c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16960:	bl	16738 <__assert_fail@plt+0x53d8>
   16964:	str	r0, [fp, #-16]
   16968:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1696c:	bl	16788 <__assert_fail@plt+0x5428>
   16970:	str	r0, [fp, #-20]	; 0xffffffec
   16974:	ldr	r2, [fp, #-8]
   16978:	ldr	r1, [pc, #112]	; 169f0 <__assert_fail@plt+0x5690>
   1697c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16980:	bl	1121c <fprintf@plt>
   16984:	ldr	r2, [fp, #-12]
   16988:	ldr	r1, [pc, #100]	; 169f4 <__assert_fail@plt+0x5694>
   1698c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16990:	bl	1121c <fprintf@plt>
   16994:	ldr	r3, [fp, #-16]
   16998:	vmov	s15, r3
   1699c:	vcvt.f64.u32	d7, s15
   169a0:	vldr	d6, [pc, #64]	; 169e8 <__assert_fail@plt+0x5688>
   169a4:	vmul.f64	d5, d7, d6
   169a8:	ldr	r3, [fp, #-12]
   169ac:	vmov	s15, r3
   169b0:	vcvt.f64.u32	d6, s15
   169b4:	vdiv.f64	d7, d5, d6
   169b8:	vstr	d7, [sp]
   169bc:	ldr	r2, [fp, #-16]
   169c0:	ldr	r1, [pc, #48]	; 169f8 <__assert_fail@plt+0x5698>
   169c4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   169c8:	bl	1121c <fprintf@plt>
   169cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   169d0:	ldr	r1, [pc, #36]	; 169fc <__assert_fail@plt+0x569c>
   169d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   169d8:	bl	1121c <fprintf@plt>
   169dc:	nop			; (mov r0, r0)
   169e0:	sub	sp, fp, #4
   169e4:	pop	{fp, pc}
   169e8:	andeq	r0, r0, r0
   169ec:	subsmi	r0, r9, r0
   169f0:	strdeq	r0, [r2], -r8
   169f4:	andeq	r0, r2, r0, lsl r1
   169f8:	andeq	r0, r2, r8, lsr #2
   169fc:	andeq	r0, r2, ip, asr #2
   16a00:	push	{fp, lr}
   16a04:	add	fp, sp, #4
   16a08:	sub	sp, sp, #16
   16a0c:	str	r0, [fp, #-16]
   16a10:	str	r1, [fp, #-20]	; 0xffffffec
   16a14:	ldr	r3, [fp, #-16]
   16a18:	ldr	r3, [r3, #24]
   16a1c:	ldr	r2, [fp, #-16]
   16a20:	ldr	r2, [r2, #8]
   16a24:	mov	r1, r2
   16a28:	ldr	r0, [fp, #-20]	; 0xffffffec
   16a2c:	blx	r3
   16a30:	str	r0, [fp, #-8]
   16a34:	ldr	r3, [fp, #-16]
   16a38:	ldr	r2, [r3, #8]
   16a3c:	ldr	r3, [fp, #-8]
   16a40:	cmp	r2, r3
   16a44:	bhi	16a4c <__assert_fail@plt+0x56ec>
   16a48:	bl	11318 <abort@plt>
   16a4c:	ldr	r3, [fp, #-16]
   16a50:	ldr	r2, [r3]
   16a54:	ldr	r3, [fp, #-8]
   16a58:	lsl	r3, r3, #3
   16a5c:	add	r3, r2, r3
   16a60:	mov	r0, r3
   16a64:	sub	sp, fp, #4
   16a68:	pop	{fp, pc}
   16a6c:	push	{fp, lr}
   16a70:	add	fp, sp, #4
   16a74:	sub	sp, sp, #16
   16a78:	str	r0, [fp, #-16]
   16a7c:	str	r1, [fp, #-20]	; 0xffffffec
   16a80:	ldr	r1, [fp, #-20]	; 0xffffffec
   16a84:	ldr	r0, [fp, #-16]
   16a88:	bl	16a00 <__assert_fail@plt+0x56a0>
   16a8c:	str	r0, [fp, #-12]
   16a90:	ldr	r3, [fp, #-12]
   16a94:	ldr	r3, [r3]
   16a98:	cmp	r3, #0
   16a9c:	bne	16aa8 <__assert_fail@plt+0x5748>
   16aa0:	mov	r3, #0
   16aa4:	b	16b18 <__assert_fail@plt+0x57b8>
   16aa8:	ldr	r3, [fp, #-12]
   16aac:	str	r3, [fp, #-8]
   16ab0:	b	16b08 <__assert_fail@plt+0x57a8>
   16ab4:	ldr	r3, [fp, #-8]
   16ab8:	ldr	r2, [r3]
   16abc:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ac0:	cmp	r2, r3
   16ac4:	beq	16af0 <__assert_fail@plt+0x5790>
   16ac8:	ldr	r3, [fp, #-16]
   16acc:	ldr	r3, [r3, #28]
   16ad0:	ldr	r2, [fp, #-8]
   16ad4:	ldr	r2, [r2]
   16ad8:	mov	r1, r2
   16adc:	ldr	r0, [fp, #-20]	; 0xffffffec
   16ae0:	blx	r3
   16ae4:	mov	r3, r0
   16ae8:	cmp	r3, #0
   16aec:	beq	16afc <__assert_fail@plt+0x579c>
   16af0:	ldr	r3, [fp, #-8]
   16af4:	ldr	r3, [r3]
   16af8:	b	16b18 <__assert_fail@plt+0x57b8>
   16afc:	ldr	r3, [fp, #-8]
   16b00:	ldr	r3, [r3, #4]
   16b04:	str	r3, [fp, #-8]
   16b08:	ldr	r3, [fp, #-8]
   16b0c:	cmp	r3, #0
   16b10:	bne	16ab4 <__assert_fail@plt+0x5754>
   16b14:	mov	r3, #0
   16b18:	mov	r0, r3
   16b1c:	sub	sp, fp, #4
   16b20:	pop	{fp, pc}
   16b24:	push	{fp, lr}
   16b28:	add	fp, sp, #4
   16b2c:	sub	sp, sp, #16
   16b30:	str	r0, [fp, #-16]
   16b34:	ldr	r3, [fp, #-16]
   16b38:	ldr	r3, [r3, #16]
   16b3c:	cmp	r3, #0
   16b40:	bne	16b4c <__assert_fail@plt+0x57ec>
   16b44:	mov	r3, #0
   16b48:	b	16b9c <__assert_fail@plt+0x583c>
   16b4c:	ldr	r3, [fp, #-16]
   16b50:	ldr	r3, [r3]
   16b54:	str	r3, [fp, #-8]
   16b58:	ldr	r3, [fp, #-16]
   16b5c:	ldr	r2, [r3, #4]
   16b60:	ldr	r3, [fp, #-8]
   16b64:	cmp	r2, r3
   16b68:	bhi	16b70 <__assert_fail@plt+0x5810>
   16b6c:	bl	11318 <abort@plt>
   16b70:	ldr	r3, [fp, #-8]
   16b74:	ldr	r3, [r3]
   16b78:	cmp	r3, #0
   16b7c:	beq	16b8c <__assert_fail@plt+0x582c>
   16b80:	ldr	r3, [fp, #-8]
   16b84:	ldr	r3, [r3]
   16b88:	b	16b9c <__assert_fail@plt+0x583c>
   16b8c:	ldr	r3, [fp, #-8]
   16b90:	add	r3, r3, #8
   16b94:	str	r3, [fp, #-8]
   16b98:	b	16b58 <__assert_fail@plt+0x57f8>
   16b9c:	mov	r0, r3
   16ba0:	sub	sp, fp, #4
   16ba4:	pop	{fp, pc}
   16ba8:	push	{fp, lr}
   16bac:	add	fp, sp, #4
   16bb0:	sub	sp, sp, #16
   16bb4:	str	r0, [fp, #-16]
   16bb8:	str	r1, [fp, #-20]	; 0xffffffec
   16bbc:	ldr	r1, [fp, #-20]	; 0xffffffec
   16bc0:	ldr	r0, [fp, #-16]
   16bc4:	bl	16a00 <__assert_fail@plt+0x56a0>
   16bc8:	str	r0, [fp, #-8]
   16bcc:	ldr	r3, [fp, #-8]
   16bd0:	str	r3, [fp, #-12]
   16bd4:	ldr	r3, [fp, #-12]
   16bd8:	ldr	r2, [r3]
   16bdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   16be0:	cmp	r2, r3
   16be4:	bne	16c08 <__assert_fail@plt+0x58a8>
   16be8:	ldr	r3, [fp, #-12]
   16bec:	ldr	r3, [r3, #4]
   16bf0:	cmp	r3, #0
   16bf4:	beq	16c08 <__assert_fail@plt+0x58a8>
   16bf8:	ldr	r3, [fp, #-12]
   16bfc:	ldr	r3, [r3, #4]
   16c00:	ldr	r3, [r3]
   16c04:	b	16c64 <__assert_fail@plt+0x5904>
   16c08:	ldr	r3, [fp, #-12]
   16c0c:	ldr	r3, [r3, #4]
   16c10:	str	r3, [fp, #-12]
   16c14:	ldr	r3, [fp, #-12]
   16c18:	cmp	r3, #0
   16c1c:	bne	16bd4 <__assert_fail@plt+0x5874>
   16c20:	b	16c40 <__assert_fail@plt+0x58e0>
   16c24:	ldr	r3, [fp, #-8]
   16c28:	ldr	r3, [r3]
   16c2c:	cmp	r3, #0
   16c30:	beq	16c40 <__assert_fail@plt+0x58e0>
   16c34:	ldr	r3, [fp, #-8]
   16c38:	ldr	r3, [r3]
   16c3c:	b	16c64 <__assert_fail@plt+0x5904>
   16c40:	ldr	r3, [fp, #-8]
   16c44:	add	r3, r3, #8
   16c48:	str	r3, [fp, #-8]
   16c4c:	ldr	r3, [fp, #-16]
   16c50:	ldr	r3, [r3, #4]
   16c54:	ldr	r2, [fp, #-8]
   16c58:	cmp	r2, r3
   16c5c:	bcc	16c24 <__assert_fail@plt+0x58c4>
   16c60:	mov	r3, #0
   16c64:	mov	r0, r3
   16c68:	sub	sp, fp, #4
   16c6c:	pop	{fp, pc}
   16c70:	push	{fp}		; (str fp, [sp, #-4]!)
   16c74:	add	fp, sp, #0
   16c78:	sub	sp, sp, #36	; 0x24
   16c7c:	str	r0, [fp, #-24]	; 0xffffffe8
   16c80:	str	r1, [fp, #-28]	; 0xffffffe4
   16c84:	str	r2, [fp, #-32]	; 0xffffffe0
   16c88:	mov	r3, #0
   16c8c:	str	r3, [fp, #-8]
   16c90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c94:	ldr	r3, [r3]
   16c98:	str	r3, [fp, #-12]
   16c9c:	b	16d1c <__assert_fail@plt+0x59bc>
   16ca0:	ldr	r3, [fp, #-12]
   16ca4:	ldr	r3, [r3]
   16ca8:	cmp	r3, #0
   16cac:	beq	16d10 <__assert_fail@plt+0x59b0>
   16cb0:	ldr	r3, [fp, #-12]
   16cb4:	str	r3, [fp, #-16]
   16cb8:	b	16d04 <__assert_fail@plt+0x59a4>
   16cbc:	ldr	r2, [fp, #-8]
   16cc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16cc4:	cmp	r2, r3
   16cc8:	bcc	16cd4 <__assert_fail@plt+0x5974>
   16ccc:	ldr	r3, [fp, #-8]
   16cd0:	b	16d34 <__assert_fail@plt+0x59d4>
   16cd4:	ldr	r3, [fp, #-8]
   16cd8:	add	r2, r3, #1
   16cdc:	str	r2, [fp, #-8]
   16ce0:	lsl	r3, r3, #2
   16ce4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16ce8:	add	r3, r2, r3
   16cec:	ldr	r2, [fp, #-16]
   16cf0:	ldr	r2, [r2]
   16cf4:	str	r2, [r3]
   16cf8:	ldr	r3, [fp, #-16]
   16cfc:	ldr	r3, [r3, #4]
   16d00:	str	r3, [fp, #-16]
   16d04:	ldr	r3, [fp, #-16]
   16d08:	cmp	r3, #0
   16d0c:	bne	16cbc <__assert_fail@plt+0x595c>
   16d10:	ldr	r3, [fp, #-12]
   16d14:	add	r3, r3, #8
   16d18:	str	r3, [fp, #-12]
   16d1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d20:	ldr	r2, [r3, #4]
   16d24:	ldr	r3, [fp, #-12]
   16d28:	cmp	r2, r3
   16d2c:	bhi	16ca0 <__assert_fail@plt+0x5940>
   16d30:	ldr	r3, [fp, #-8]
   16d34:	mov	r0, r3
   16d38:	add	sp, fp, #0
   16d3c:	pop	{fp}		; (ldr fp, [sp], #4)
   16d40:	bx	lr
   16d44:	push	{fp, lr}
   16d48:	add	fp, sp, #4
   16d4c:	sub	sp, sp, #32
   16d50:	str	r0, [fp, #-24]	; 0xffffffe8
   16d54:	str	r1, [fp, #-28]	; 0xffffffe4
   16d58:	str	r2, [fp, #-32]	; 0xffffffe0
   16d5c:	mov	r3, #0
   16d60:	str	r3, [fp, #-8]
   16d64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d68:	ldr	r3, [r3]
   16d6c:	str	r3, [fp, #-12]
   16d70:	b	16df4 <__assert_fail@plt+0x5a94>
   16d74:	ldr	r3, [fp, #-12]
   16d78:	ldr	r3, [r3]
   16d7c:	cmp	r3, #0
   16d80:	beq	16de8 <__assert_fail@plt+0x5a88>
   16d84:	ldr	r3, [fp, #-12]
   16d88:	str	r3, [fp, #-16]
   16d8c:	b	16ddc <__assert_fail@plt+0x5a7c>
   16d90:	ldr	r3, [fp, #-16]
   16d94:	ldr	r2, [r3]
   16d98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16d9c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16da0:	mov	r0, r2
   16da4:	blx	r3
   16da8:	mov	r3, r0
   16dac:	eor	r3, r3, #1
   16db0:	uxtb	r3, r3
   16db4:	cmp	r3, #0
   16db8:	beq	16dc4 <__assert_fail@plt+0x5a64>
   16dbc:	ldr	r3, [fp, #-8]
   16dc0:	b	16e0c <__assert_fail@plt+0x5aac>
   16dc4:	ldr	r3, [fp, #-8]
   16dc8:	add	r3, r3, #1
   16dcc:	str	r3, [fp, #-8]
   16dd0:	ldr	r3, [fp, #-16]
   16dd4:	ldr	r3, [r3, #4]
   16dd8:	str	r3, [fp, #-16]
   16ddc:	ldr	r3, [fp, #-16]
   16de0:	cmp	r3, #0
   16de4:	bne	16d90 <__assert_fail@plt+0x5a30>
   16de8:	ldr	r3, [fp, #-12]
   16dec:	add	r3, r3, #8
   16df0:	str	r3, [fp, #-12]
   16df4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16df8:	ldr	r2, [r3, #4]
   16dfc:	ldr	r3, [fp, #-12]
   16e00:	cmp	r2, r3
   16e04:	bhi	16d74 <__assert_fail@plt+0x5a14>
   16e08:	ldr	r3, [fp, #-8]
   16e0c:	mov	r0, r3
   16e10:	sub	sp, fp, #4
   16e14:	pop	{fp, pc}
   16e18:	push	{fp, lr}
   16e1c:	add	fp, sp, #4
   16e20:	sub	sp, sp, #16
   16e24:	str	r0, [fp, #-16]
   16e28:	str	r1, [fp, #-20]	; 0xffffffec
   16e2c:	mov	r3, #0
   16e30:	str	r3, [fp, #-8]
   16e34:	b	16e70 <__assert_fail@plt+0x5b10>
   16e38:	ldr	r2, [fp, #-8]
   16e3c:	mov	r3, r2
   16e40:	lsl	r3, r3, #5
   16e44:	sub	r2, r3, r2
   16e48:	ldrb	r3, [fp, #-9]
   16e4c:	add	r3, r2, r3
   16e50:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e54:	mov	r0, r3
   16e58:	bl	1ea94 <__assert_fail@plt+0xd734>
   16e5c:	mov	r3, r1
   16e60:	str	r3, [fp, #-8]
   16e64:	ldr	r3, [fp, #-16]
   16e68:	add	r3, r3, #1
   16e6c:	str	r3, [fp, #-16]
   16e70:	ldr	r3, [fp, #-16]
   16e74:	ldrb	r3, [r3]
   16e78:	strb	r3, [fp, #-9]
   16e7c:	ldrb	r3, [fp, #-9]
   16e80:	cmp	r3, #0
   16e84:	bne	16e38 <__assert_fail@plt+0x5ad8>
   16e88:	ldr	r3, [fp, #-8]
   16e8c:	mov	r0, r3
   16e90:	sub	sp, fp, #4
   16e94:	pop	{fp, pc}
   16e98:	push	{fp, lr}
   16e9c:	add	fp, sp, #4
   16ea0:	sub	sp, sp, #16
   16ea4:	str	r0, [fp, #-16]
   16ea8:	mov	r3, #3
   16eac:	str	r3, [fp, #-8]
   16eb0:	ldr	r3, [fp, #-8]
   16eb4:	ldr	r2, [fp, #-8]
   16eb8:	mul	r3, r2, r3
   16ebc:	str	r3, [fp, #-12]
   16ec0:	b	16ef0 <__assert_fail@plt+0x5b90>
   16ec4:	ldr	r3, [fp, #-8]
   16ec8:	add	r3, r3, #1
   16ecc:	str	r3, [fp, #-8]
   16ed0:	ldr	r3, [fp, #-8]
   16ed4:	lsl	r3, r3, #2
   16ed8:	ldr	r2, [fp, #-12]
   16edc:	add	r3, r2, r3
   16ee0:	str	r3, [fp, #-12]
   16ee4:	ldr	r3, [fp, #-8]
   16ee8:	add	r3, r3, #1
   16eec:	str	r3, [fp, #-8]
   16ef0:	ldr	r2, [fp, #-12]
   16ef4:	ldr	r3, [fp, #-16]
   16ef8:	cmp	r2, r3
   16efc:	bcs	16f1c <__assert_fail@plt+0x5bbc>
   16f00:	ldr	r3, [fp, #-16]
   16f04:	ldr	r1, [fp, #-8]
   16f08:	mov	r0, r3
   16f0c:	bl	1ea94 <__assert_fail@plt+0xd734>
   16f10:	mov	r3, r1
   16f14:	cmp	r3, #0
   16f18:	bne	16ec4 <__assert_fail@plt+0x5b64>
   16f1c:	ldr	r3, [fp, #-16]
   16f20:	ldr	r1, [fp, #-8]
   16f24:	mov	r0, r3
   16f28:	bl	1ea94 <__assert_fail@plt+0xd734>
   16f2c:	mov	r3, r1
   16f30:	cmp	r3, #0
   16f34:	movne	r3, #1
   16f38:	moveq	r3, #0
   16f3c:	uxtb	r3, r3
   16f40:	mov	r0, r3
   16f44:	sub	sp, fp, #4
   16f48:	pop	{fp, pc}
   16f4c:	push	{fp, lr}
   16f50:	add	fp, sp, #4
   16f54:	sub	sp, sp, #8
   16f58:	str	r0, [fp, #-8]
   16f5c:	ldr	r3, [fp, #-8]
   16f60:	cmp	r3, #9
   16f64:	bhi	16f70 <__assert_fail@plt+0x5c10>
   16f68:	mov	r3, #10
   16f6c:	str	r3, [fp, #-8]
   16f70:	ldr	r3, [fp, #-8]
   16f74:	orr	r3, r3, #1
   16f78:	str	r3, [fp, #-8]
   16f7c:	b	16f8c <__assert_fail@plt+0x5c2c>
   16f80:	ldr	r3, [fp, #-8]
   16f84:	add	r3, r3, #2
   16f88:	str	r3, [fp, #-8]
   16f8c:	ldr	r3, [fp, #-8]
   16f90:	cmn	r3, #1
   16f94:	beq	16fb4 <__assert_fail@plt+0x5c54>
   16f98:	ldr	r0, [fp, #-8]
   16f9c:	bl	16e98 <__assert_fail@plt+0x5b38>
   16fa0:	mov	r3, r0
   16fa4:	eor	r3, r3, #1
   16fa8:	uxtb	r3, r3
   16fac:	cmp	r3, #0
   16fb0:	bne	16f80 <__assert_fail@plt+0x5c20>
   16fb4:	ldr	r3, [fp, #-8]
   16fb8:	mov	r0, r3
   16fbc:	sub	sp, fp, #4
   16fc0:	pop	{fp, pc}
   16fc4:	push	{fp, lr}
   16fc8:	add	fp, sp, #4
   16fcc:	sub	sp, sp, #8
   16fd0:	str	r0, [fp, #-8]
   16fd4:	ldr	r3, [fp, #-8]
   16fd8:	ldr	r2, [pc, #32]	; 17000 <__assert_fail@plt+0x5ca0>
   16fdc:	mov	ip, r3
   16fe0:	mov	lr, r2
   16fe4:	ldm	lr!, {r0, r1, r2, r3}
   16fe8:	stmia	ip!, {r0, r1, r2, r3}
   16fec:	ldr	r3, [lr]
   16ff0:	str	r3, [ip]
   16ff4:	nop			; (mov r0, r0)
   16ff8:	sub	sp, fp, #4
   16ffc:	pop	{fp, pc}
   17000:	andeq	r0, r2, r4, ror #1
   17004:	push	{fp, lr}
   17008:	add	fp, sp, #4
   1700c:	sub	sp, sp, #16
   17010:	str	r0, [fp, #-16]
   17014:	str	r1, [fp, #-20]	; 0xffffffec
   17018:	ldr	r3, [fp, #-16]
   1701c:	mov	r1, #3
   17020:	mov	r0, r3
   17024:	bl	1d374 <__assert_fail@plt+0xc014>
   17028:	str	r0, [fp, #-8]
   1702c:	ldr	r3, [fp, #-8]
   17030:	ldr	r1, [fp, #-20]	; 0xffffffec
   17034:	mov	r0, r3
   17038:	bl	1ea94 <__assert_fail@plt+0xd734>
   1703c:	mov	r3, r1
   17040:	mov	r0, r3
   17044:	sub	sp, fp, #4
   17048:	pop	{fp, pc}
   1704c:	push	{fp}		; (str fp, [sp, #-4]!)
   17050:	add	fp, sp, #0
   17054:	sub	sp, sp, #12
   17058:	str	r0, [fp, #-8]
   1705c:	str	r1, [fp, #-12]
   17060:	ldr	r2, [fp, #-8]
   17064:	ldr	r3, [fp, #-12]
   17068:	cmp	r2, r3
   1706c:	moveq	r3, #1
   17070:	movne	r3, #0
   17074:	uxtb	r3, r3
   17078:	mov	r0, r3
   1707c:	add	sp, fp, #0
   17080:	pop	{fp}		; (ldr fp, [sp], #4)
   17084:	bx	lr
   17088:	push	{fp}		; (str fp, [sp, #-4]!)
   1708c:	add	fp, sp, #0
   17090:	sub	sp, sp, #20
   17094:	str	r0, [fp, #-16]
   17098:	ldr	r3, [fp, #-16]
   1709c:	ldr	r3, [r3, #20]
   170a0:	str	r3, [fp, #-8]
   170a4:	ldr	r3, [fp, #-8]
   170a8:	ldr	r2, [pc, #268]	; 171bc <__assert_fail@plt+0x5e5c>
   170ac:	cmp	r3, r2
   170b0:	bne	170bc <__assert_fail@plt+0x5d5c>
   170b4:	mov	r3, #1
   170b8:	b	171a8 <__assert_fail@plt+0x5e48>
   170bc:	ldr	r3, [pc, #252]	; 171c0 <__assert_fail@plt+0x5e60>
   170c0:	str	r3, [fp, #-12]
   170c4:	ldr	r3, [fp, #-8]
   170c8:	vldr	s14, [r3, #8]
   170cc:	vldr	s15, [fp, #-12]
   170d0:	vcmpe.f32	s14, s15
   170d4:	vmrs	APSR_nzcv, fpscr
   170d8:	ble	17198 <__assert_fail@plt+0x5e38>
   170dc:	ldr	r3, [fp, #-8]
   170e0:	vldr	s14, [r3, #8]
   170e4:	vldr	s13, [pc, #204]	; 171b8 <__assert_fail@plt+0x5e58>
   170e8:	vldr	s15, [fp, #-12]
   170ec:	vsub.f32	s15, s13, s15
   170f0:	vcmpe.f32	s14, s15
   170f4:	vmrs	APSR_nzcv, fpscr
   170f8:	bpl	17198 <__assert_fail@plt+0x5e38>
   170fc:	vldr	s15, [fp, #-12]
   17100:	vldr	s14, [pc, #176]	; 171b8 <__assert_fail@plt+0x5e58>
   17104:	vadd.f32	s14, s15, s14
   17108:	ldr	r3, [fp, #-8]
   1710c:	vldr	s15, [r3, #12]
   17110:	vcmpe.f32	s14, s15
   17114:	vmrs	APSR_nzcv, fpscr
   17118:	bpl	17198 <__assert_fail@plt+0x5e38>
   1711c:	ldr	r3, [fp, #-8]
   17120:	vldr	s15, [r3]
   17124:	vcmpe.f32	s15, #0.0
   17128:	vmrs	APSR_nzcv, fpscr
   1712c:	blt	17198 <__assert_fail@plt+0x5e38>
   17130:	ldr	r3, [fp, #-8]
   17134:	vldr	s14, [r3]
   17138:	vldr	s15, [fp, #-12]
   1713c:	vadd.f32	s14, s14, s15
   17140:	ldr	r3, [fp, #-8]
   17144:	vldr	s15, [r3, #4]
   17148:	vcmpe.f32	s14, s15
   1714c:	vmrs	APSR_nzcv, fpscr
   17150:	bpl	17198 <__assert_fail@plt+0x5e38>
   17154:	ldr	r3, [fp, #-8]
   17158:	vldr	s15, [r3, #4]
   1715c:	vldr	s14, [pc, #84]	; 171b8 <__assert_fail@plt+0x5e58>
   17160:	vcmpe.f32	s15, s14
   17164:	vmrs	APSR_nzcv, fpscr
   17168:	bhi	17198 <__assert_fail@plt+0x5e38>
   1716c:	ldr	r3, [fp, #-8]
   17170:	vldr	s14, [r3]
   17174:	vldr	s15, [fp, #-12]
   17178:	vadd.f32	s14, s14, s15
   1717c:	ldr	r3, [fp, #-8]
   17180:	vldr	s15, [r3, #8]
   17184:	vcmpe.f32	s14, s15
   17188:	vmrs	APSR_nzcv, fpscr
   1718c:	bpl	17198 <__assert_fail@plt+0x5e38>
   17190:	mov	r3, #1
   17194:	b	171a8 <__assert_fail@plt+0x5e48>
   17198:	ldr	r3, [fp, #-16]
   1719c:	ldr	r2, [pc, #24]	; 171bc <__assert_fail@plt+0x5e5c>
   171a0:	str	r2, [r3, #20]
   171a4:	mov	r3, #0
   171a8:	mov	r0, r3
   171ac:	add	sp, fp, #0
   171b0:	pop	{fp}		; (ldr fp, [sp], #4)
   171b4:	bx	lr
   171b8:	svccc	0x00800000
   171bc:	andeq	r0, r2, r4, ror #1
   171c0:	stclcc	12, cr12, [ip, #820]	; 0x334
   171c4:	push	{r4, r5, r6, r7, fp, lr}
   171c8:	add	fp, sp, #20
   171cc:	sub	sp, sp, #16
   171d0:	str	r0, [fp, #-32]	; 0xffffffe0
   171d4:	str	r1, [fp, #-36]	; 0xffffffdc
   171d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   171dc:	ldrb	r3, [r3, #16]
   171e0:	eor	r3, r3, #1
   171e4:	uxtb	r3, r3
   171e8:	cmp	r3, #0
   171ec:	beq	17238 <__assert_fail@plt+0x5ed8>
   171f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   171f4:	vmov	s15, r3
   171f8:	vcvt.f32.u32	s13, s15
   171fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17200:	vldr	s14, [r3, #8]
   17204:	vdiv.f32	s15, s13, s14
   17208:	vstr	s15, [fp, #-24]	; 0xffffffe8
   1720c:	vldr	s15, [fp, #-24]	; 0xffffffe8
   17210:	vldr	s14, [pc, #156]	; 172b4 <__assert_fail@plt+0x5f54>
   17214:	vcmpe.f32	s15, s14
   17218:	vmrs	APSR_nzcv, fpscr
   1721c:	blt	17228 <__assert_fail@plt+0x5ec8>
   17220:	mov	r3, #0
   17224:	b	172a8 <__assert_fail@plt+0x5f48>
   17228:	vldr	s15, [fp, #-24]	; 0xffffffe8
   1722c:	vcvt.u32.f32	s15, s15
   17230:	vmov	r3, s15
   17234:	str	r3, [fp, #-32]	; 0xffffffe0
   17238:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1723c:	bl	16f4c <__assert_fail@plt+0x5bec>
   17240:	str	r0, [fp, #-32]	; 0xffffffe0
   17244:	mov	r1, #0
   17248:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1724c:	mov	r2, r3
   17250:	mov	r3, #0
   17254:	lsl	r5, r3, #2
   17258:	orr	r5, r5, r2, lsr #30
   1725c:	lsl	r4, r2, #2
   17260:	mov	r6, r5
   17264:	mov	r7, #0
   17268:	cmp	r6, #0
   1726c:	beq	17274 <__assert_fail@plt+0x5f14>
   17270:	mov	r1, #1
   17274:	cmp	r4, #0
   17278:	bge	17280 <__assert_fail@plt+0x5f20>
   1727c:	mov	r1, #1
   17280:	mov	r3, r4
   17284:	str	r3, [fp, #-28]	; 0xffffffe4
   17288:	mov	r3, r1
   1728c:	and	r3, r3, #1
   17290:	uxtb	r3, r3
   17294:	cmp	r3, #0
   17298:	beq	172a4 <__assert_fail@plt+0x5f44>
   1729c:	mov	r3, #0
   172a0:	b	172a8 <__assert_fail@plt+0x5f48>
   172a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   172a8:	mov	r0, r3
   172ac:	sub	sp, fp, #20
   172b0:	pop	{r4, r5, r6, r7, fp, pc}
   172b4:	svcmi	0x00800000
   172b8:	push	{fp, lr}
   172bc:	add	fp, sp, #4
   172c0:	sub	sp, sp, #24
   172c4:	str	r0, [fp, #-16]
   172c8:	str	r1, [fp, #-20]	; 0xffffffec
   172cc:	str	r2, [fp, #-24]	; 0xffffffe8
   172d0:	str	r3, [fp, #-28]	; 0xffffffe4
   172d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172d8:	cmp	r3, #0
   172dc:	bne	172e8 <__assert_fail@plt+0x5f88>
   172e0:	ldr	r3, [pc, #364]	; 17454 <__assert_fail@plt+0x60f4>
   172e4:	str	r3, [fp, #-24]	; 0xffffffe8
   172e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   172ec:	cmp	r3, #0
   172f0:	bne	172fc <__assert_fail@plt+0x5f9c>
   172f4:	ldr	r3, [pc, #348]	; 17458 <__assert_fail@plt+0x60f8>
   172f8:	str	r3, [fp, #-28]	; 0xffffffe4
   172fc:	mov	r0, #40	; 0x28
   17300:	bl	1d06c <__assert_fail@plt+0xbd0c>
   17304:	mov	r3, r0
   17308:	str	r3, [fp, #-8]
   1730c:	ldr	r3, [fp, #-8]
   17310:	cmp	r3, #0
   17314:	bne	17320 <__assert_fail@plt+0x5fc0>
   17318:	mov	r3, #0
   1731c:	b	17448 <__assert_fail@plt+0x60e8>
   17320:	ldr	r3, [fp, #-20]	; 0xffffffec
   17324:	cmp	r3, #0
   17328:	bne	17334 <__assert_fail@plt+0x5fd4>
   1732c:	ldr	r3, [pc, #296]	; 1745c <__assert_fail@plt+0x60fc>
   17330:	str	r3, [fp, #-20]	; 0xffffffec
   17334:	ldr	r3, [fp, #-8]
   17338:	ldr	r2, [fp, #-20]	; 0xffffffec
   1733c:	str	r2, [r3, #20]
   17340:	ldr	r0, [fp, #-8]
   17344:	bl	17088 <__assert_fail@plt+0x5d28>
   17348:	mov	r3, r0
   1734c:	eor	r3, r3, #1
   17350:	uxtb	r3, r3
   17354:	cmp	r3, #0
   17358:	bne	17428 <__assert_fail@plt+0x60c8>
   1735c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17360:	ldr	r0, [fp, #-16]
   17364:	bl	171c4 <__assert_fail@plt+0x5e64>
   17368:	mov	r2, r0
   1736c:	ldr	r3, [fp, #-8]
   17370:	str	r2, [r3, #8]
   17374:	ldr	r3, [fp, #-8]
   17378:	ldr	r3, [r3, #8]
   1737c:	cmp	r3, #0
   17380:	beq	17430 <__assert_fail@plt+0x60d0>
   17384:	ldr	r3, [fp, #-8]
   17388:	ldr	r3, [r3, #8]
   1738c:	mov	r1, #8
   17390:	mov	r0, r3
   17394:	bl	1cfa8 <__assert_fail@plt+0xbc48>
   17398:	mov	r3, r0
   1739c:	mov	r2, r3
   173a0:	ldr	r3, [fp, #-8]
   173a4:	str	r2, [r3]
   173a8:	ldr	r3, [fp, #-8]
   173ac:	ldr	r3, [r3]
   173b0:	cmp	r3, #0
   173b4:	beq	17438 <__assert_fail@plt+0x60d8>
   173b8:	ldr	r3, [fp, #-8]
   173bc:	ldr	r2, [r3]
   173c0:	ldr	r3, [fp, #-8]
   173c4:	ldr	r3, [r3, #8]
   173c8:	lsl	r3, r3, #3
   173cc:	add	r2, r2, r3
   173d0:	ldr	r3, [fp, #-8]
   173d4:	str	r2, [r3, #4]
   173d8:	ldr	r3, [fp, #-8]
   173dc:	mov	r2, #0
   173e0:	str	r2, [r3, #12]
   173e4:	ldr	r3, [fp, #-8]
   173e8:	mov	r2, #0
   173ec:	str	r2, [r3, #16]
   173f0:	ldr	r3, [fp, #-8]
   173f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   173f8:	str	r2, [r3, #24]
   173fc:	ldr	r3, [fp, #-8]
   17400:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17404:	str	r2, [r3, #28]
   17408:	ldr	r3, [fp, #-8]
   1740c:	ldr	r2, [fp, #4]
   17410:	str	r2, [r3, #32]
   17414:	ldr	r3, [fp, #-8]
   17418:	mov	r2, #0
   1741c:	str	r2, [r3, #36]	; 0x24
   17420:	ldr	r3, [fp, #-8]
   17424:	b	17448 <__assert_fail@plt+0x60e8>
   17428:	nop			; (mov r0, r0)
   1742c:	b	1743c <__assert_fail@plt+0x60dc>
   17430:	nop			; (mov r0, r0)
   17434:	b	1743c <__assert_fail@plt+0x60dc>
   17438:	nop			; (mov r0, r0)
   1743c:	ldr	r0, [fp, #-8]
   17440:	bl	1347c <__assert_fail@plt+0x211c>
   17444:	mov	r3, #0
   17448:	mov	r0, r3
   1744c:	sub	sp, fp, #4
   17450:	pop	{fp, pc}
   17454:	andeq	r7, r1, r4
   17458:	andeq	r7, r1, ip, asr #32
   1745c:	andeq	r0, r2, r4, ror #1
   17460:	push	{fp, lr}
   17464:	add	fp, sp, #4
   17468:	sub	sp, sp, #24
   1746c:	str	r0, [fp, #-24]	; 0xffffffe8
   17470:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17474:	ldr	r3, [r3]
   17478:	str	r3, [fp, #-8]
   1747c:	b	1755c <__assert_fail@plt+0x61fc>
   17480:	ldr	r3, [fp, #-8]
   17484:	ldr	r3, [r3]
   17488:	cmp	r3, #0
   1748c:	beq	17550 <__assert_fail@plt+0x61f0>
   17490:	ldr	r3, [fp, #-8]
   17494:	ldr	r3, [r3, #4]
   17498:	str	r3, [fp, #-12]
   1749c:	b	17504 <__assert_fail@plt+0x61a4>
   174a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174a4:	ldr	r3, [r3, #32]
   174a8:	cmp	r3, #0
   174ac:	beq	174c8 <__assert_fail@plt+0x6168>
   174b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174b4:	ldr	r3, [r3, #32]
   174b8:	ldr	r2, [fp, #-12]
   174bc:	ldr	r2, [r2]
   174c0:	mov	r0, r2
   174c4:	blx	r3
   174c8:	ldr	r3, [fp, #-12]
   174cc:	mov	r2, #0
   174d0:	str	r2, [r3]
   174d4:	ldr	r3, [fp, #-12]
   174d8:	ldr	r3, [r3, #4]
   174dc:	str	r3, [fp, #-16]
   174e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174e4:	ldr	r2, [r3, #36]	; 0x24
   174e8:	ldr	r3, [fp, #-12]
   174ec:	str	r2, [r3, #4]
   174f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174f4:	ldr	r2, [fp, #-12]
   174f8:	str	r2, [r3, #36]	; 0x24
   174fc:	ldr	r3, [fp, #-16]
   17500:	str	r3, [fp, #-12]
   17504:	ldr	r3, [fp, #-12]
   17508:	cmp	r3, #0
   1750c:	bne	174a0 <__assert_fail@plt+0x6140>
   17510:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17514:	ldr	r3, [r3, #32]
   17518:	cmp	r3, #0
   1751c:	beq	17538 <__assert_fail@plt+0x61d8>
   17520:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17524:	ldr	r3, [r3, #32]
   17528:	ldr	r2, [fp, #-8]
   1752c:	ldr	r2, [r2]
   17530:	mov	r0, r2
   17534:	blx	r3
   17538:	ldr	r3, [fp, #-8]
   1753c:	mov	r2, #0
   17540:	str	r2, [r3]
   17544:	ldr	r3, [fp, #-8]
   17548:	mov	r2, #0
   1754c:	str	r2, [r3, #4]
   17550:	ldr	r3, [fp, #-8]
   17554:	add	r3, r3, #8
   17558:	str	r3, [fp, #-8]
   1755c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17560:	ldr	r2, [r3, #4]
   17564:	ldr	r3, [fp, #-8]
   17568:	cmp	r2, r3
   1756c:	bhi	17480 <__assert_fail@plt+0x6120>
   17570:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17574:	mov	r2, #0
   17578:	str	r2, [r3, #12]
   1757c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17580:	mov	r2, #0
   17584:	str	r2, [r3, #16]
   17588:	nop			; (mov r0, r0)
   1758c:	sub	sp, fp, #4
   17590:	pop	{fp, pc}
   17594:	push	{fp, lr}
   17598:	add	fp, sp, #4
   1759c:	sub	sp, sp, #24
   175a0:	str	r0, [fp, #-24]	; 0xffffffe8
   175a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175a8:	ldr	r3, [r3, #32]
   175ac:	cmp	r3, #0
   175b0:	beq	17640 <__assert_fail@plt+0x62e0>
   175b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175b8:	ldr	r3, [r3, #16]
   175bc:	cmp	r3, #0
   175c0:	beq	17640 <__assert_fail@plt+0x62e0>
   175c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175c8:	ldr	r3, [r3]
   175cc:	str	r3, [fp, #-8]
   175d0:	b	1762c <__assert_fail@plt+0x62cc>
   175d4:	ldr	r3, [fp, #-8]
   175d8:	ldr	r3, [r3]
   175dc:	cmp	r3, #0
   175e0:	beq	17620 <__assert_fail@plt+0x62c0>
   175e4:	ldr	r3, [fp, #-8]
   175e8:	str	r3, [fp, #-12]
   175ec:	b	17614 <__assert_fail@plt+0x62b4>
   175f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175f4:	ldr	r3, [r3, #32]
   175f8:	ldr	r2, [fp, #-12]
   175fc:	ldr	r2, [r2]
   17600:	mov	r0, r2
   17604:	blx	r3
   17608:	ldr	r3, [fp, #-12]
   1760c:	ldr	r3, [r3, #4]
   17610:	str	r3, [fp, #-12]
   17614:	ldr	r3, [fp, #-12]
   17618:	cmp	r3, #0
   1761c:	bne	175f0 <__assert_fail@plt+0x6290>
   17620:	ldr	r3, [fp, #-8]
   17624:	add	r3, r3, #8
   17628:	str	r3, [fp, #-8]
   1762c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17630:	ldr	r2, [r3, #4]
   17634:	ldr	r3, [fp, #-8]
   17638:	cmp	r2, r3
   1763c:	bhi	175d4 <__assert_fail@plt+0x6274>
   17640:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17644:	ldr	r3, [r3]
   17648:	str	r3, [fp, #-8]
   1764c:	b	17694 <__assert_fail@plt+0x6334>
   17650:	ldr	r3, [fp, #-8]
   17654:	ldr	r3, [r3, #4]
   17658:	str	r3, [fp, #-12]
   1765c:	b	1767c <__assert_fail@plt+0x631c>
   17660:	ldr	r3, [fp, #-12]
   17664:	ldr	r3, [r3, #4]
   17668:	str	r3, [fp, #-16]
   1766c:	ldr	r0, [fp, #-12]
   17670:	bl	1347c <__assert_fail@plt+0x211c>
   17674:	ldr	r3, [fp, #-16]
   17678:	str	r3, [fp, #-12]
   1767c:	ldr	r3, [fp, #-12]
   17680:	cmp	r3, #0
   17684:	bne	17660 <__assert_fail@plt+0x6300>
   17688:	ldr	r3, [fp, #-8]
   1768c:	add	r3, r3, #8
   17690:	str	r3, [fp, #-8]
   17694:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17698:	ldr	r2, [r3, #4]
   1769c:	ldr	r3, [fp, #-8]
   176a0:	cmp	r2, r3
   176a4:	bhi	17650 <__assert_fail@plt+0x62f0>
   176a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176ac:	ldr	r3, [r3, #36]	; 0x24
   176b0:	str	r3, [fp, #-12]
   176b4:	b	176d4 <__assert_fail@plt+0x6374>
   176b8:	ldr	r3, [fp, #-12]
   176bc:	ldr	r3, [r3, #4]
   176c0:	str	r3, [fp, #-16]
   176c4:	ldr	r0, [fp, #-12]
   176c8:	bl	1347c <__assert_fail@plt+0x211c>
   176cc:	ldr	r3, [fp, #-16]
   176d0:	str	r3, [fp, #-12]
   176d4:	ldr	r3, [fp, #-12]
   176d8:	cmp	r3, #0
   176dc:	bne	176b8 <__assert_fail@plt+0x6358>
   176e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176e4:	ldr	r3, [r3]
   176e8:	mov	r0, r3
   176ec:	bl	1347c <__assert_fail@plt+0x211c>
   176f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   176f4:	bl	1347c <__assert_fail@plt+0x211c>
   176f8:	nop			; (mov r0, r0)
   176fc:	sub	sp, fp, #4
   17700:	pop	{fp, pc}
   17704:	push	{fp, lr}
   17708:	add	fp, sp, #4
   1770c:	sub	sp, sp, #16
   17710:	str	r0, [fp, #-16]
   17714:	ldr	r3, [fp, #-16]
   17718:	ldr	r3, [r3, #36]	; 0x24
   1771c:	cmp	r3, #0
   17720:	beq	17744 <__assert_fail@plt+0x63e4>
   17724:	ldr	r3, [fp, #-16]
   17728:	ldr	r3, [r3, #36]	; 0x24
   1772c:	str	r3, [fp, #-8]
   17730:	ldr	r3, [fp, #-8]
   17734:	ldr	r2, [r3, #4]
   17738:	ldr	r3, [fp, #-16]
   1773c:	str	r2, [r3, #36]	; 0x24
   17740:	b	17754 <__assert_fail@plt+0x63f4>
   17744:	mov	r0, #8
   17748:	bl	1d06c <__assert_fail@plt+0xbd0c>
   1774c:	mov	r3, r0
   17750:	str	r3, [fp, #-8]
   17754:	ldr	r3, [fp, #-8]
   17758:	mov	r0, r3
   1775c:	sub	sp, fp, #4
   17760:	pop	{fp, pc}
   17764:	push	{fp}		; (str fp, [sp, #-4]!)
   17768:	add	fp, sp, #0
   1776c:	sub	sp, sp, #12
   17770:	str	r0, [fp, #-8]
   17774:	str	r1, [fp, #-12]
   17778:	ldr	r3, [fp, #-12]
   1777c:	mov	r2, #0
   17780:	str	r2, [r3]
   17784:	ldr	r3, [fp, #-8]
   17788:	ldr	r2, [r3, #36]	; 0x24
   1778c:	ldr	r3, [fp, #-12]
   17790:	str	r2, [r3, #4]
   17794:	ldr	r3, [fp, #-8]
   17798:	ldr	r2, [fp, #-12]
   1779c:	str	r2, [r3, #36]	; 0x24
   177a0:	nop			; (mov r0, r0)
   177a4:	add	sp, fp, #0
   177a8:	pop	{fp}		; (ldr fp, [sp], #4)
   177ac:	bx	lr
   177b0:	push	{fp, lr}
   177b4:	add	fp, sp, #4
   177b8:	sub	sp, sp, #40	; 0x28
   177bc:	str	r0, [fp, #-32]	; 0xffffffe0
   177c0:	str	r1, [fp, #-36]	; 0xffffffdc
   177c4:	str	r2, [fp, #-40]	; 0xffffffd8
   177c8:	strb	r3, [fp, #-41]	; 0xffffffd7
   177cc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   177d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   177d4:	bl	16a00 <__assert_fail@plt+0x56a0>
   177d8:	str	r0, [fp, #-12]
   177dc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   177e0:	ldr	r2, [fp, #-12]
   177e4:	str	r2, [r3]
   177e8:	ldr	r3, [fp, #-12]
   177ec:	ldr	r3, [r3]
   177f0:	cmp	r3, #0
   177f4:	bne	17800 <__assert_fail@plt+0x64a0>
   177f8:	mov	r3, #0
   177fc:	b	17960 <__assert_fail@plt+0x6600>
   17800:	ldr	r3, [fp, #-12]
   17804:	ldr	r2, [r3]
   17808:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1780c:	cmp	r2, r3
   17810:	beq	1783c <__assert_fail@plt+0x64dc>
   17814:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17818:	ldr	r3, [r3, #28]
   1781c:	ldr	r2, [fp, #-12]
   17820:	ldr	r2, [r2]
   17824:	mov	r1, r2
   17828:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1782c:	blx	r3
   17830:	mov	r3, r0
   17834:	cmp	r3, #0
   17838:	beq	178a4 <__assert_fail@plt+0x6544>
   1783c:	ldr	r3, [fp, #-12]
   17840:	ldr	r3, [r3]
   17844:	str	r3, [fp, #-24]	; 0xffffffe8
   17848:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1784c:	cmp	r3, #0
   17850:	beq	1789c <__assert_fail@plt+0x653c>
   17854:	ldr	r3, [fp, #-12]
   17858:	ldr	r3, [r3, #4]
   1785c:	cmp	r3, #0
   17860:	beq	17890 <__assert_fail@plt+0x6530>
   17864:	ldr	r3, [fp, #-12]
   17868:	ldr	r3, [r3, #4]
   1786c:	str	r3, [fp, #-28]	; 0xffffffe4
   17870:	ldr	r3, [fp, #-12]
   17874:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17878:	ldm	r2, {r0, r1}
   1787c:	stm	r3, {r0, r1}
   17880:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17884:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17888:	bl	17764 <__assert_fail@plt+0x6404>
   1788c:	b	1789c <__assert_fail@plt+0x653c>
   17890:	ldr	r3, [fp, #-12]
   17894:	mov	r2, #0
   17898:	str	r2, [r3]
   1789c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178a0:	b	17960 <__assert_fail@plt+0x6600>
   178a4:	ldr	r3, [fp, #-12]
   178a8:	str	r3, [fp, #-8]
   178ac:	b	1794c <__assert_fail@plt+0x65ec>
   178b0:	ldr	r3, [fp, #-8]
   178b4:	ldr	r3, [r3, #4]
   178b8:	ldr	r2, [r3]
   178bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   178c0:	cmp	r2, r3
   178c4:	beq	178f4 <__assert_fail@plt+0x6594>
   178c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   178cc:	ldr	r3, [r3, #28]
   178d0:	ldr	r2, [fp, #-8]
   178d4:	ldr	r2, [r2, #4]
   178d8:	ldr	r2, [r2]
   178dc:	mov	r1, r2
   178e0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   178e4:	blx	r3
   178e8:	mov	r3, r0
   178ec:	cmp	r3, #0
   178f0:	beq	17940 <__assert_fail@plt+0x65e0>
   178f4:	ldr	r3, [fp, #-8]
   178f8:	ldr	r3, [r3, #4]
   178fc:	ldr	r3, [r3]
   17900:	str	r3, [fp, #-16]
   17904:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   17908:	cmp	r3, #0
   1790c:	beq	17938 <__assert_fail@plt+0x65d8>
   17910:	ldr	r3, [fp, #-8]
   17914:	ldr	r3, [r3, #4]
   17918:	str	r3, [fp, #-20]	; 0xffffffec
   1791c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17920:	ldr	r2, [r3, #4]
   17924:	ldr	r3, [fp, #-8]
   17928:	str	r2, [r3, #4]
   1792c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17930:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17934:	bl	17764 <__assert_fail@plt+0x6404>
   17938:	ldr	r3, [fp, #-16]
   1793c:	b	17960 <__assert_fail@plt+0x6600>
   17940:	ldr	r3, [fp, #-8]
   17944:	ldr	r3, [r3, #4]
   17948:	str	r3, [fp, #-8]
   1794c:	ldr	r3, [fp, #-8]
   17950:	ldr	r3, [r3, #4]
   17954:	cmp	r3, #0
   17958:	bne	178b0 <__assert_fail@plt+0x6550>
   1795c:	mov	r3, #0
   17960:	mov	r0, r3
   17964:	sub	sp, fp, #4
   17968:	pop	{fp, pc}
   1796c:	push	{fp, lr}
   17970:	add	fp, sp, #4
   17974:	sub	sp, sp, #40	; 0x28
   17978:	str	r0, [fp, #-32]	; 0xffffffe0
   1797c:	str	r1, [fp, #-36]	; 0xffffffdc
   17980:	mov	r3, r2
   17984:	strb	r3, [fp, #-37]	; 0xffffffdb
   17988:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1798c:	ldr	r3, [r3]
   17990:	str	r3, [fp, #-8]
   17994:	b	17b34 <__assert_fail@plt+0x67d4>
   17998:	ldr	r3, [fp, #-8]
   1799c:	ldr	r3, [r3]
   179a0:	cmp	r3, #0
   179a4:	beq	17b28 <__assert_fail@plt+0x67c8>
   179a8:	ldr	r3, [fp, #-8]
   179ac:	ldr	r3, [r3, #4]
   179b0:	str	r3, [fp, #-12]
   179b4:	b	17a44 <__assert_fail@plt+0x66e4>
   179b8:	ldr	r3, [fp, #-12]
   179bc:	ldr	r3, [r3]
   179c0:	str	r3, [fp, #-16]
   179c4:	ldr	r1, [fp, #-16]
   179c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   179cc:	bl	16a00 <__assert_fail@plt+0x56a0>
   179d0:	str	r0, [fp, #-20]	; 0xffffffec
   179d4:	ldr	r3, [fp, #-12]
   179d8:	ldr	r3, [r3, #4]
   179dc:	str	r3, [fp, #-24]	; 0xffffffe8
   179e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   179e4:	ldr	r3, [r3]
   179e8:	cmp	r3, #0
   179ec:	beq	17a10 <__assert_fail@plt+0x66b0>
   179f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   179f4:	ldr	r2, [r3, #4]
   179f8:	ldr	r3, [fp, #-12]
   179fc:	str	r2, [r3, #4]
   17a00:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a04:	ldr	r2, [fp, #-12]
   17a08:	str	r2, [r3, #4]
   17a0c:	b	17a3c <__assert_fail@plt+0x66dc>
   17a10:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a14:	ldr	r2, [fp, #-16]
   17a18:	str	r2, [r3]
   17a1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a20:	ldr	r3, [r3, #12]
   17a24:	add	r2, r3, #1
   17a28:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a2c:	str	r2, [r3, #12]
   17a30:	ldr	r1, [fp, #-12]
   17a34:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17a38:	bl	17764 <__assert_fail@plt+0x6404>
   17a3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a40:	str	r3, [fp, #-12]
   17a44:	ldr	r3, [fp, #-12]
   17a48:	cmp	r3, #0
   17a4c:	bne	179b8 <__assert_fail@plt+0x6658>
   17a50:	ldr	r3, [fp, #-8]
   17a54:	ldr	r3, [r3]
   17a58:	str	r3, [fp, #-16]
   17a5c:	ldr	r3, [fp, #-8]
   17a60:	mov	r2, #0
   17a64:	str	r2, [r3, #4]
   17a68:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   17a6c:	cmp	r3, #0
   17a70:	bne	17b24 <__assert_fail@plt+0x67c4>
   17a74:	ldr	r1, [fp, #-16]
   17a78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17a7c:	bl	16a00 <__assert_fail@plt+0x56a0>
   17a80:	str	r0, [fp, #-20]	; 0xffffffec
   17a84:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a88:	ldr	r3, [r3]
   17a8c:	cmp	r3, #0
   17a90:	beq	17ae0 <__assert_fail@plt+0x6780>
   17a94:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17a98:	bl	17704 <__assert_fail@plt+0x63a4>
   17a9c:	str	r0, [fp, #-28]	; 0xffffffe4
   17aa0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17aa4:	cmp	r3, #0
   17aa8:	bne	17ab4 <__assert_fail@plt+0x6754>
   17aac:	mov	r3, #0
   17ab0:	b	17b4c <__assert_fail@plt+0x67ec>
   17ab4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17ab8:	ldr	r2, [fp, #-16]
   17abc:	str	r2, [r3]
   17ac0:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ac4:	ldr	r2, [r3, #4]
   17ac8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17acc:	str	r2, [r3, #4]
   17ad0:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ad4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17ad8:	str	r2, [r3, #4]
   17adc:	b	17b00 <__assert_fail@plt+0x67a0>
   17ae0:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ae4:	ldr	r2, [fp, #-16]
   17ae8:	str	r2, [r3]
   17aec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17af0:	ldr	r3, [r3, #12]
   17af4:	add	r2, r3, #1
   17af8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17afc:	str	r2, [r3, #12]
   17b00:	ldr	r3, [fp, #-8]
   17b04:	mov	r2, #0
   17b08:	str	r2, [r3]
   17b0c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17b10:	ldr	r3, [r3, #12]
   17b14:	sub	r2, r3, #1
   17b18:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17b1c:	str	r2, [r3, #12]
   17b20:	b	17b28 <__assert_fail@plt+0x67c8>
   17b24:	nop			; (mov r0, r0)
   17b28:	ldr	r3, [fp, #-8]
   17b2c:	add	r3, r3, #8
   17b30:	str	r3, [fp, #-8]
   17b34:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17b38:	ldr	r2, [r3, #4]
   17b3c:	ldr	r3, [fp, #-8]
   17b40:	cmp	r2, r3
   17b44:	bhi	17998 <__assert_fail@plt+0x6638>
   17b48:	mov	r3, #1
   17b4c:	mov	r0, r3
   17b50:	sub	sp, fp, #4
   17b54:	pop	{fp, pc}
   17b58:	push	{fp, lr}
   17b5c:	add	fp, sp, #4
   17b60:	sub	sp, sp, #56	; 0x38
   17b64:	str	r0, [fp, #-56]	; 0xffffffc8
   17b68:	str	r1, [fp, #-60]	; 0xffffffc4
   17b6c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17b70:	ldr	r3, [r3, #20]
   17b74:	mov	r1, r3
   17b78:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17b7c:	bl	171c4 <__assert_fail@plt+0x5e64>
   17b80:	str	r0, [fp, #-8]
   17b84:	ldr	r3, [fp, #-8]
   17b88:	cmp	r3, #0
   17b8c:	bne	17b98 <__assert_fail@plt+0x6838>
   17b90:	mov	r3, #0
   17b94:	b	17d74 <__assert_fail@plt+0x6a14>
   17b98:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17b9c:	ldr	r2, [r3, #8]
   17ba0:	ldr	r3, [fp, #-8]
   17ba4:	cmp	r2, r3
   17ba8:	bne	17bb4 <__assert_fail@plt+0x6854>
   17bac:	mov	r3, #1
   17bb0:	b	17d74 <__assert_fail@plt+0x6a14>
   17bb4:	sub	r3, fp, #52	; 0x34
   17bb8:	str	r3, [fp, #-12]
   17bbc:	mov	r1, #8
   17bc0:	ldr	r0, [fp, #-8]
   17bc4:	bl	1cfa8 <__assert_fail@plt+0xbc48>
   17bc8:	mov	r3, r0
   17bcc:	mov	r2, r3
   17bd0:	ldr	r3, [fp, #-12]
   17bd4:	str	r2, [r3]
   17bd8:	ldr	r3, [fp, #-12]
   17bdc:	ldr	r3, [r3]
   17be0:	cmp	r3, #0
   17be4:	bne	17bf0 <__assert_fail@plt+0x6890>
   17be8:	mov	r3, #0
   17bec:	b	17d74 <__assert_fail@plt+0x6a14>
   17bf0:	ldr	r3, [fp, #-12]
   17bf4:	ldr	r2, [fp, #-8]
   17bf8:	str	r2, [r3, #8]
   17bfc:	ldr	r3, [fp, #-12]
   17c00:	ldr	r2, [r3]
   17c04:	ldr	r3, [fp, #-8]
   17c08:	lsl	r3, r3, #3
   17c0c:	add	r2, r2, r3
   17c10:	ldr	r3, [fp, #-12]
   17c14:	str	r2, [r3, #4]
   17c18:	ldr	r3, [fp, #-12]
   17c1c:	mov	r2, #0
   17c20:	str	r2, [r3, #12]
   17c24:	ldr	r3, [fp, #-12]
   17c28:	mov	r2, #0
   17c2c:	str	r2, [r3, #16]
   17c30:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17c34:	ldr	r2, [r3, #20]
   17c38:	ldr	r3, [fp, #-12]
   17c3c:	str	r2, [r3, #20]
   17c40:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17c44:	ldr	r2, [r3, #24]
   17c48:	ldr	r3, [fp, #-12]
   17c4c:	str	r2, [r3, #24]
   17c50:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17c54:	ldr	r2, [r3, #28]
   17c58:	ldr	r3, [fp, #-12]
   17c5c:	str	r2, [r3, #28]
   17c60:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17c64:	ldr	r2, [r3, #32]
   17c68:	ldr	r3, [fp, #-12]
   17c6c:	str	r2, [r3, #32]
   17c70:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17c74:	ldr	r2, [r3, #36]	; 0x24
   17c78:	ldr	r3, [fp, #-12]
   17c7c:	str	r2, [r3, #36]	; 0x24
   17c80:	mov	r2, #0
   17c84:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17c88:	ldr	r0, [fp, #-12]
   17c8c:	bl	1796c <__assert_fail@plt+0x660c>
   17c90:	mov	r3, r0
   17c94:	cmp	r3, #0
   17c98:	beq	17d04 <__assert_fail@plt+0x69a4>
   17c9c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17ca0:	ldr	r3, [r3]
   17ca4:	mov	r0, r3
   17ca8:	bl	1347c <__assert_fail@plt+0x211c>
   17cac:	ldr	r3, [fp, #-12]
   17cb0:	ldr	r2, [r3]
   17cb4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17cb8:	str	r2, [r3]
   17cbc:	ldr	r3, [fp, #-12]
   17cc0:	ldr	r2, [r3, #4]
   17cc4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17cc8:	str	r2, [r3, #4]
   17ccc:	ldr	r3, [fp, #-12]
   17cd0:	ldr	r2, [r3, #8]
   17cd4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17cd8:	str	r2, [r3, #8]
   17cdc:	ldr	r3, [fp, #-12]
   17ce0:	ldr	r2, [r3, #12]
   17ce4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17ce8:	str	r2, [r3, #12]
   17cec:	ldr	r3, [fp, #-12]
   17cf0:	ldr	r2, [r3, #36]	; 0x24
   17cf4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17cf8:	str	r2, [r3, #36]	; 0x24
   17cfc:	mov	r3, #1
   17d00:	b	17d74 <__assert_fail@plt+0x6a14>
   17d04:	ldr	r3, [fp, #-12]
   17d08:	ldr	r2, [r3, #36]	; 0x24
   17d0c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17d10:	str	r2, [r3, #36]	; 0x24
   17d14:	mov	r2, #1
   17d18:	ldr	r1, [fp, #-12]
   17d1c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17d20:	bl	1796c <__assert_fail@plt+0x660c>
   17d24:	mov	r3, r0
   17d28:	eor	r3, r3, #1
   17d2c:	uxtb	r3, r3
   17d30:	cmp	r3, #0
   17d34:	bne	17d5c <__assert_fail@plt+0x69fc>
   17d38:	mov	r2, #0
   17d3c:	ldr	r1, [fp, #-12]
   17d40:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17d44:	bl	1796c <__assert_fail@plt+0x660c>
   17d48:	mov	r3, r0
   17d4c:	eor	r3, r3, #1
   17d50:	uxtb	r3, r3
   17d54:	cmp	r3, #0
   17d58:	beq	17d60 <__assert_fail@plt+0x6a00>
   17d5c:	bl	11318 <abort@plt>
   17d60:	ldr	r3, [fp, #-12]
   17d64:	ldr	r3, [r3]
   17d68:	mov	r0, r3
   17d6c:	bl	1347c <__assert_fail@plt+0x211c>
   17d70:	mov	r3, #0
   17d74:	mov	r0, r3
   17d78:	sub	sp, fp, #4
   17d7c:	pop	{fp, pc}
   17d80:	push	{fp, lr}
   17d84:	add	fp, sp, #4
   17d88:	sub	sp, sp, #40	; 0x28
   17d8c:	str	r0, [fp, #-32]	; 0xffffffe0
   17d90:	str	r1, [fp, #-36]	; 0xffffffdc
   17d94:	str	r2, [fp, #-40]	; 0xffffffd8
   17d98:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17d9c:	cmp	r3, #0
   17da0:	bne	17da8 <__assert_fail@plt+0x6a48>
   17da4:	bl	11318 <abort@plt>
   17da8:	sub	r2, fp, #24
   17dac:	mov	r3, #0
   17db0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17db4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17db8:	bl	177b0 <__assert_fail@plt+0x6450>
   17dbc:	str	r0, [fp, #-8]
   17dc0:	ldr	r3, [fp, #-8]
   17dc4:	cmp	r3, #0
   17dc8:	beq	17dec <__assert_fail@plt+0x6a8c>
   17dcc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17dd0:	cmp	r3, #0
   17dd4:	beq	17de4 <__assert_fail@plt+0x6a84>
   17dd8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17ddc:	ldr	r2, [fp, #-8]
   17de0:	str	r2, [r3]
   17de4:	mov	r3, #0
   17de8:	b	17ff0 <__assert_fail@plt+0x6c90>
   17dec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17df0:	ldr	r3, [r3, #12]
   17df4:	vmov	s15, r3
   17df8:	vcvt.f32.u32	s14, s15
   17dfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e00:	ldr	r3, [r3, #20]
   17e04:	vldr	s13, [r3, #8]
   17e08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e0c:	ldr	r3, [r3, #8]
   17e10:	vmov	s15, r3
   17e14:	vcvt.f32.u32	s15, s15
   17e18:	vmul.f32	s15, s13, s15
   17e1c:	vcmpe.f32	s14, s15
   17e20:	vmrs	APSR_nzcv, fpscr
   17e24:	ble	17f44 <__assert_fail@plt+0x6be4>
   17e28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17e2c:	bl	17088 <__assert_fail@plt+0x5d28>
   17e30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e34:	ldr	r3, [r3, #12]
   17e38:	vmov	s15, r3
   17e3c:	vcvt.f32.u32	s14, s15
   17e40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e44:	ldr	r3, [r3, #20]
   17e48:	vldr	s13, [r3, #8]
   17e4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e50:	ldr	r3, [r3, #8]
   17e54:	vmov	s15, r3
   17e58:	vcvt.f32.u32	s15, s15
   17e5c:	vmul.f32	s15, s13, s15
   17e60:	vcmpe.f32	s14, s15
   17e64:	vmrs	APSR_nzcv, fpscr
   17e68:	ble	17f44 <__assert_fail@plt+0x6be4>
   17e6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e70:	ldr	r3, [r3, #20]
   17e74:	str	r3, [fp, #-12]
   17e78:	ldr	r3, [fp, #-12]
   17e7c:	ldrb	r3, [r3, #16]
   17e80:	cmp	r3, #0
   17e84:	beq	17ea8 <__assert_fail@plt+0x6b48>
   17e88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17e8c:	ldr	r3, [r3, #8]
   17e90:	vmov	s15, r3
   17e94:	vcvt.f32.u32	s14, s15
   17e98:	ldr	r3, [fp, #-12]
   17e9c:	vldr	s15, [r3, #12]
   17ea0:	vmul.f32	s15, s14, s15
   17ea4:	b	17ed0 <__assert_fail@plt+0x6b70>
   17ea8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17eac:	ldr	r3, [r3, #8]
   17eb0:	vmov	s15, r3
   17eb4:	vcvt.f32.u32	s14, s15
   17eb8:	ldr	r3, [fp, #-12]
   17ebc:	vldr	s15, [r3, #12]
   17ec0:	vmul.f32	s14, s14, s15
   17ec4:	ldr	r3, [fp, #-12]
   17ec8:	vldr	s15, [r3, #8]
   17ecc:	vmul.f32	s15, s14, s15
   17ed0:	vstr	s15, [fp, #-16]
   17ed4:	vldr	s15, [fp, #-16]
   17ed8:	vldr	s14, [pc, #284]	; 17ffc <__assert_fail@plt+0x6c9c>
   17edc:	vcmpe.f32	s15, s14
   17ee0:	vmrs	APSR_nzcv, fpscr
   17ee4:	blt	17ef0 <__assert_fail@plt+0x6b90>
   17ee8:	mvn	r3, #0
   17eec:	b	17ff0 <__assert_fail@plt+0x6c90>
   17ef0:	vldr	s15, [fp, #-16]
   17ef4:	vcvt.u32.f32	s15, s15
   17ef8:	vmov	r1, s15
   17efc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17f00:	bl	17b58 <__assert_fail@plt+0x67f8>
   17f04:	mov	r3, r0
   17f08:	eor	r3, r3, #1
   17f0c:	uxtb	r3, r3
   17f10:	cmp	r3, #0
   17f14:	beq	17f20 <__assert_fail@plt+0x6bc0>
   17f18:	mvn	r3, #0
   17f1c:	b	17ff0 <__assert_fail@plt+0x6c90>
   17f20:	sub	r2, fp, #24
   17f24:	mov	r3, #0
   17f28:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17f2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17f30:	bl	177b0 <__assert_fail@plt+0x6450>
   17f34:	mov	r3, r0
   17f38:	cmp	r3, #0
   17f3c:	beq	17f44 <__assert_fail@plt+0x6be4>
   17f40:	bl	11318 <abort@plt>
   17f44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f48:	ldr	r3, [r3]
   17f4c:	cmp	r3, #0
   17f50:	beq	17fb8 <__assert_fail@plt+0x6c58>
   17f54:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17f58:	bl	17704 <__assert_fail@plt+0x63a4>
   17f5c:	str	r0, [fp, #-20]	; 0xffffffec
   17f60:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f64:	cmp	r3, #0
   17f68:	bne	17f74 <__assert_fail@plt+0x6c14>
   17f6c:	mvn	r3, #0
   17f70:	b	17ff0 <__assert_fail@plt+0x6c90>
   17f74:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f78:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17f7c:	str	r2, [r3]
   17f80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f84:	ldr	r2, [r3, #4]
   17f88:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f8c:	str	r2, [r3, #4]
   17f90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f94:	ldr	r2, [fp, #-20]	; 0xffffffec
   17f98:	str	r2, [r3, #4]
   17f9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fa0:	ldr	r3, [r3, #16]
   17fa4:	add	r2, r3, #1
   17fa8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fac:	str	r2, [r3, #16]
   17fb0:	mov	r3, #1
   17fb4:	b	17ff0 <__assert_fail@plt+0x6c90>
   17fb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17fbc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17fc0:	str	r2, [r3]
   17fc4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fc8:	ldr	r3, [r3, #16]
   17fcc:	add	r2, r3, #1
   17fd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fd4:	str	r2, [r3, #16]
   17fd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fdc:	ldr	r3, [r3, #12]
   17fe0:	add	r2, r3, #1
   17fe4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fe8:	str	r2, [r3, #12]
   17fec:	mov	r3, #1
   17ff0:	mov	r0, r3
   17ff4:	sub	sp, fp, #4
   17ff8:	pop	{fp, pc}
   17ffc:	svcmi	0x00800000
   18000:	push	{fp, lr}
   18004:	add	fp, sp, #4
   18008:	sub	sp, sp, #16
   1800c:	str	r0, [fp, #-16]
   18010:	str	r1, [fp, #-20]	; 0xffffffec
   18014:	sub	r3, fp, #12
   18018:	mov	r2, r3
   1801c:	ldr	r1, [fp, #-20]	; 0xffffffec
   18020:	ldr	r0, [fp, #-16]
   18024:	bl	17d80 <__assert_fail@plt+0x6a20>
   18028:	str	r0, [fp, #-8]
   1802c:	ldr	r3, [fp, #-8]
   18030:	cmn	r3, #1
   18034:	beq	18054 <__assert_fail@plt+0x6cf4>
   18038:	ldr	r3, [fp, #-8]
   1803c:	cmp	r3, #0
   18040:	bne	1804c <__assert_fail@plt+0x6cec>
   18044:	ldr	r3, [fp, #-12]
   18048:	b	18058 <__assert_fail@plt+0x6cf8>
   1804c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18050:	b	18058 <__assert_fail@plt+0x6cf8>
   18054:	mov	r3, #0
   18058:	mov	r0, r3
   1805c:	sub	sp, fp, #4
   18060:	pop	{fp, pc}
   18064:	push	{fp, lr}
   18068:	add	fp, sp, #4
   1806c:	sub	sp, sp, #32
   18070:	str	r0, [fp, #-32]	; 0xffffffe0
   18074:	str	r1, [fp, #-36]	; 0xffffffdc
   18078:	sub	r2, fp, #28
   1807c:	mov	r3, #1
   18080:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18084:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18088:	bl	177b0 <__assert_fail@plt+0x6450>
   1808c:	str	r0, [fp, #-12]
   18090:	ldr	r3, [fp, #-12]
   18094:	cmp	r3, #0
   18098:	bne	180a4 <__assert_fail@plt+0x6d44>
   1809c:	mov	r3, #0
   180a0:	b	18234 <__assert_fail@plt+0x6ed4>
   180a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   180a8:	ldr	r3, [r3, #16]
   180ac:	sub	r2, r3, #1
   180b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   180b4:	str	r2, [r3, #16]
   180b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   180bc:	ldr	r3, [r3]
   180c0:	cmp	r3, #0
   180c4:	bne	18230 <__assert_fail@plt+0x6ed0>
   180c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   180cc:	ldr	r3, [r3, #12]
   180d0:	sub	r2, r3, #1
   180d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   180d8:	str	r2, [r3, #12]
   180dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   180e0:	ldr	r3, [r3, #12]
   180e4:	vmov	s15, r3
   180e8:	vcvt.f32.u32	s14, s15
   180ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   180f0:	ldr	r3, [r3, #20]
   180f4:	vldr	s13, [r3]
   180f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   180fc:	ldr	r3, [r3, #8]
   18100:	vmov	s15, r3
   18104:	vcvt.f32.u32	s15, s15
   18108:	vmul.f32	s15, s13, s15
   1810c:	vcmpe.f32	s14, s15
   18110:	vmrs	APSR_nzcv, fpscr
   18114:	bpl	18230 <__assert_fail@plt+0x6ed0>
   18118:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1811c:	bl	17088 <__assert_fail@plt+0x5d28>
   18120:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18124:	ldr	r3, [r3, #12]
   18128:	vmov	s15, r3
   1812c:	vcvt.f32.u32	s14, s15
   18130:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18134:	ldr	r3, [r3, #20]
   18138:	vldr	s13, [r3]
   1813c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18140:	ldr	r3, [r3, #8]
   18144:	vmov	s15, r3
   18148:	vcvt.f32.u32	s15, s15
   1814c:	vmul.f32	s15, s13, s15
   18150:	vcmpe.f32	s14, s15
   18154:	vmrs	APSR_nzcv, fpscr
   18158:	bpl	18230 <__assert_fail@plt+0x6ed0>
   1815c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18160:	ldr	r3, [r3, #20]
   18164:	str	r3, [fp, #-16]
   18168:	ldr	r3, [fp, #-16]
   1816c:	ldrb	r3, [r3, #16]
   18170:	cmp	r3, #0
   18174:	beq	1819c <__assert_fail@plt+0x6e3c>
   18178:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1817c:	ldr	r3, [r3, #8]
   18180:	vmov	s15, r3
   18184:	vcvt.f32.u32	s14, s15
   18188:	ldr	r3, [fp, #-16]
   1818c:	vldr	s15, [r3, #4]
   18190:	vmul.f32	s15, s14, s15
   18194:	vcvt.u32.f32	s15, s15
   18198:	b	181c8 <__assert_fail@plt+0x6e68>
   1819c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   181a0:	ldr	r3, [r3, #8]
   181a4:	vmov	s15, r3
   181a8:	vcvt.f32.u32	s14, s15
   181ac:	ldr	r3, [fp, #-16]
   181b0:	vldr	s15, [r3, #4]
   181b4:	vmul.f32	s14, s14, s15
   181b8:	ldr	r3, [fp, #-16]
   181bc:	vldr	s15, [r3, #8]
   181c0:	vmul.f32	s15, s14, s15
   181c4:	vcvt.u32.f32	s15, s15
   181c8:	vstr	s15, [fp, #-20]	; 0xffffffec
   181cc:	ldr	r1, [fp, #-20]	; 0xffffffec
   181d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   181d4:	bl	17b58 <__assert_fail@plt+0x67f8>
   181d8:	mov	r3, r0
   181dc:	eor	r3, r3, #1
   181e0:	uxtb	r3, r3
   181e4:	cmp	r3, #0
   181e8:	beq	18230 <__assert_fail@plt+0x6ed0>
   181ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   181f0:	ldr	r3, [r3, #36]	; 0x24
   181f4:	str	r3, [fp, #-8]
   181f8:	b	18218 <__assert_fail@plt+0x6eb8>
   181fc:	ldr	r3, [fp, #-8]
   18200:	ldr	r3, [r3, #4]
   18204:	str	r3, [fp, #-24]	; 0xffffffe8
   18208:	ldr	r0, [fp, #-8]
   1820c:	bl	1347c <__assert_fail@plt+0x211c>
   18210:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18214:	str	r3, [fp, #-8]
   18218:	ldr	r3, [fp, #-8]
   1821c:	cmp	r3, #0
   18220:	bne	181fc <__assert_fail@plt+0x6e9c>
   18224:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18228:	mov	r2, #0
   1822c:	str	r2, [r3, #36]	; 0x24
   18230:	ldr	r3, [fp, #-12]
   18234:	mov	r0, r3
   18238:	sub	sp, fp, #4
   1823c:	pop	{fp, pc}
   18240:	push	{fp, lr}
   18244:	add	fp, sp, #4
   18248:	sub	sp, sp, #8
   1824c:	str	r0, [fp, #-8]
   18250:	str	r1, [fp, #-12]
   18254:	ldr	r1, [fp, #-12]
   18258:	ldr	r0, [fp, #-8]
   1825c:	bl	18064 <__assert_fail@plt+0x6d04>
   18260:	mov	r3, r0
   18264:	mov	r0, r3
   18268:	sub	sp, fp, #4
   1826c:	pop	{fp, pc}
   18270:	push	{fp}		; (str fp, [sp, #-4]!)
   18274:	add	fp, sp, #0
   18278:	sub	sp, sp, #20
   1827c:	str	r0, [fp, #-16]
   18280:	str	r1, [fp, #-20]	; 0xffffffec
   18284:	ldr	r3, [fp, #-16]
   18288:	mov	r2, #1
   1828c:	strb	r2, [r3, #28]
   18290:	ldr	r3, [fp, #-16]
   18294:	mov	r2, #0
   18298:	str	r2, [r3, #20]
   1829c:	ldr	r3, [fp, #-16]
   182a0:	mov	r2, #0
   182a4:	str	r2, [r3, #24]
   182a8:	mov	r3, #0
   182ac:	str	r3, [fp, #-8]
   182b0:	b	182d0 <__assert_fail@plt+0x6f70>
   182b4:	ldr	r3, [fp, #-16]
   182b8:	ldr	r2, [fp, #-8]
   182bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   182c0:	str	r1, [r3, r2, lsl #2]
   182c4:	ldr	r3, [fp, #-8]
   182c8:	add	r3, r3, #1
   182cc:	str	r3, [fp, #-8]
   182d0:	ldr	r3, [fp, #-8]
   182d4:	cmp	r3, #3
   182d8:	ble	182b4 <__assert_fail@plt+0x6f54>
   182dc:	ldr	r3, [fp, #-16]
   182e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   182e4:	str	r2, [r3, #16]
   182e8:	nop			; (mov r0, r0)
   182ec:	add	sp, fp, #0
   182f0:	pop	{fp}		; (ldr fp, [sp], #4)
   182f4:	bx	lr
   182f8:	push	{fp}		; (str fp, [sp, #-4]!)
   182fc:	add	fp, sp, #0
   18300:	sub	sp, sp, #12
   18304:	str	r0, [fp, #-8]
   18308:	ldr	r3, [fp, #-8]
   1830c:	ldrb	r3, [r3, #28]
   18310:	mov	r0, r3
   18314:	add	sp, fp, #0
   18318:	pop	{fp}		; (ldr fp, [sp], #4)
   1831c:	bx	lr
   18320:	push	{fp}		; (str fp, [sp, #-4]!)
   18324:	add	fp, sp, #0
   18328:	sub	sp, sp, #20
   1832c:	str	r0, [fp, #-16]
   18330:	str	r1, [fp, #-20]	; 0xffffffec
   18334:	ldr	r3, [fp, #-16]
   18338:	ldr	r3, [r3, #20]
   1833c:	ldr	r2, [fp, #-16]
   18340:	ldrb	r2, [r2, #28]
   18344:	eor	r2, r2, #1
   18348:	uxtb	r2, r2
   1834c:	add	r3, r3, r2
   18350:	and	r3, r3, #3
   18354:	str	r3, [fp, #-8]
   18358:	ldr	r3, [fp, #-16]
   1835c:	ldr	r2, [fp, #-8]
   18360:	ldr	r3, [r3, r2, lsl #2]
   18364:	str	r3, [fp, #-12]
   18368:	ldr	r3, [fp, #-16]
   1836c:	ldr	r2, [fp, #-8]
   18370:	ldr	r1, [fp, #-20]	; 0xffffffec
   18374:	str	r1, [r3, r2, lsl #2]
   18378:	ldr	r3, [fp, #-16]
   1837c:	ldr	r2, [fp, #-8]
   18380:	str	r2, [r3, #20]
   18384:	ldr	r3, [fp, #-16]
   18388:	ldr	r2, [r3, #24]
   1838c:	ldr	r3, [fp, #-8]
   18390:	cmp	r2, r3
   18394:	bne	183c0 <__assert_fail@plt+0x7060>
   18398:	ldr	r3, [fp, #-16]
   1839c:	ldr	r3, [r3, #24]
   183a0:	ldr	r2, [fp, #-16]
   183a4:	ldrb	r2, [r2, #28]
   183a8:	eor	r2, r2, #1
   183ac:	uxtb	r2, r2
   183b0:	add	r3, r3, r2
   183b4:	and	r2, r3, #3
   183b8:	ldr	r3, [fp, #-16]
   183bc:	str	r2, [r3, #24]
   183c0:	ldr	r3, [fp, #-16]
   183c4:	mov	r2, #0
   183c8:	strb	r2, [r3, #28]
   183cc:	ldr	r3, [fp, #-12]
   183d0:	mov	r0, r3
   183d4:	add	sp, fp, #0
   183d8:	pop	{fp}		; (ldr fp, [sp], #4)
   183dc:	bx	lr
   183e0:	push	{fp, lr}
   183e4:	add	fp, sp, #4
   183e8:	sub	sp, sp, #16
   183ec:	str	r0, [fp, #-16]
   183f0:	ldr	r0, [fp, #-16]
   183f4:	bl	182f8 <__assert_fail@plt+0x6f98>
   183f8:	mov	r3, r0
   183fc:	cmp	r3, #0
   18400:	beq	18408 <__assert_fail@plt+0x70a8>
   18404:	bl	11318 <abort@plt>
   18408:	ldr	r3, [fp, #-16]
   1840c:	ldr	r2, [r3, #20]
   18410:	ldr	r3, [fp, #-16]
   18414:	ldr	r3, [r3, r2, lsl #2]
   18418:	str	r3, [fp, #-8]
   1841c:	ldr	r3, [fp, #-16]
   18420:	ldr	r2, [r3, #20]
   18424:	ldr	r3, [fp, #-16]
   18428:	ldr	r1, [r3, #16]
   1842c:	ldr	r3, [fp, #-16]
   18430:	str	r1, [r3, r2, lsl #2]
   18434:	ldr	r3, [fp, #-16]
   18438:	ldr	r2, [r3, #20]
   1843c:	ldr	r3, [fp, #-16]
   18440:	ldr	r3, [r3, #24]
   18444:	cmp	r2, r3
   18448:	bne	1845c <__assert_fail@plt+0x70fc>
   1844c:	ldr	r3, [fp, #-16]
   18450:	mov	r2, #1
   18454:	strb	r2, [r3, #28]
   18458:	b	18474 <__assert_fail@plt+0x7114>
   1845c:	ldr	r3, [fp, #-16]
   18460:	ldr	r3, [r3, #20]
   18464:	add	r3, r3, #3
   18468:	and	r2, r3, #3
   1846c:	ldr	r3, [fp, #-16]
   18470:	str	r2, [r3, #20]
   18474:	ldr	r3, [fp, #-8]
   18478:	mov	r0, r3
   1847c:	sub	sp, fp, #4
   18480:	pop	{fp, pc}
   18484:	push	{fp, lr}
   18488:	add	fp, sp, #4
   1848c:	sub	sp, sp, #24
   18490:	strd	r0, [fp, #-20]	; 0xffffffec
   18494:	str	r2, [fp, #-24]	; 0xffffffe8
   18498:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1849c:	add	r3, r3, #20
   184a0:	str	r3, [fp, #-8]
   184a4:	ldr	r3, [fp, #-8]
   184a8:	mov	r2, #0
   184ac:	strb	r2, [r3]
   184b0:	ldr	r3, [fp, #-8]
   184b4:	sub	r3, r3, #1
   184b8:	str	r3, [fp, #-8]
   184bc:	ldrd	r0, [fp, #-20]	; 0xffffffec
   184c0:	mov	r2, #10
   184c4:	mov	r3, #0
   184c8:	bl	1ecf4 <__assert_fail@plt+0xd994>
   184cc:	uxtb	r3, r2
   184d0:	add	r3, r3, #48	; 0x30
   184d4:	uxtb	r2, r3
   184d8:	ldr	r3, [fp, #-8]
   184dc:	strb	r2, [r3]
   184e0:	ldrd	r0, [fp, #-20]	; 0xffffffec
   184e4:	mov	r2, #10
   184e8:	mov	r3, #0
   184ec:	bl	1ecf4 <__assert_fail@plt+0xd994>
   184f0:	mov	r2, r0
   184f4:	mov	r3, r1
   184f8:	strd	r2, [fp, #-20]	; 0xffffffec
   184fc:	ldrd	r2, [fp, #-20]	; 0xffffffec
   18500:	orrs	r3, r2, r3
   18504:	bne	184b0 <__assert_fail@plt+0x7150>
   18508:	ldr	r3, [fp, #-8]
   1850c:	mov	r0, r3
   18510:	sub	sp, fp, #4
   18514:	pop	{fp, pc}
   18518:	push	{r2, r3}
   1851c:	push	{fp, lr}
   18520:	add	fp, sp, #4
   18524:	sub	sp, sp, #16
   18528:	str	r0, [fp, #-16]
   1852c:	str	r1, [fp, #-20]	; 0xffffffec
   18530:	mov	r3, #0
   18534:	str	r3, [fp, #-8]
   18538:	ldr	r3, [fp, #4]
   1853c:	and	r3, r3, #64	; 0x40
   18540:	cmp	r3, #0
   18544:	beq	18564 <__assert_fail@plt+0x7204>
   18548:	add	r3, fp, #8
   1854c:	str	r3, [fp, #-12]
   18550:	ldr	r3, [fp, #-12]
   18554:	add	r2, r3, #4
   18558:	str	r2, [fp, #-12]
   1855c:	ldr	r3, [r3]
   18560:	str	r3, [fp, #-8]
   18564:	ldr	r3, [fp, #-8]
   18568:	ldr	r2, [fp, #4]
   1856c:	ldr	r1, [fp, #-20]	; 0xffffffec
   18570:	ldr	r0, [fp, #-16]
   18574:	bl	11204 <openat64@plt>
   18578:	mov	r3, r0
   1857c:	mov	r0, r3
   18580:	bl	1ae0c <__assert_fail@plt+0x9aac>
   18584:	mov	r3, r0
   18588:	mov	r0, r3
   1858c:	sub	sp, fp, #4
   18590:	pop	{fp, lr}
   18594:	add	sp, sp, #8
   18598:	bx	lr
   1859c:	push	{fp, lr}
   185a0:	add	fp, sp, #4
   185a4:	sub	sp, sp, #32
   185a8:	str	r0, [fp, #-24]	; 0xffffffe8
   185ac:	str	r1, [fp, #-28]	; 0xffffffe4
   185b0:	str	r2, [fp, #-32]	; 0xffffffe0
   185b4:	str	r3, [fp, #-36]	; 0xffffffdc
   185b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   185bc:	orr	r3, r3, #540672	; 0x84000
   185c0:	orr	r3, r3, #2304	; 0x900
   185c4:	str	r3, [fp, #-8]
   185c8:	ldr	r2, [fp, #-8]
   185cc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   185d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   185d4:	bl	18518 <__assert_fail@plt+0x71b8>
   185d8:	str	r0, [fp, #-12]
   185dc:	ldr	r3, [fp, #-12]
   185e0:	cmp	r3, #0
   185e4:	bge	185f0 <__assert_fail@plt+0x7290>
   185e8:	mov	r3, #0
   185ec:	b	18644 <__assert_fail@plt+0x72e4>
   185f0:	ldr	r0, [fp, #-12]
   185f4:	bl	112b8 <fdopendir@plt>
   185f8:	str	r0, [fp, #-16]
   185fc:	ldr	r3, [fp, #-16]
   18600:	cmp	r3, #0
   18604:	beq	18618 <__assert_fail@plt+0x72b8>
   18608:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1860c:	ldr	r2, [fp, #-12]
   18610:	str	r2, [r3]
   18614:	b	18640 <__assert_fail@plt+0x72e0>
   18618:	bl	11228 <__errno_location@plt>
   1861c:	mov	r3, r0
   18620:	ldr	r3, [r3]
   18624:	str	r3, [fp, #-20]	; 0xffffffec
   18628:	ldr	r0, [fp, #-12]
   1862c:	bl	11324 <close@plt>
   18630:	bl	11228 <__errno_location@plt>
   18634:	mov	r2, r0
   18638:	ldr	r3, [fp, #-20]	; 0xffffffec
   1863c:	str	r3, [r2]
   18640:	ldr	r3, [fp, #-16]
   18644:	mov	r0, r3
   18648:	sub	sp, fp, #4
   1864c:	pop	{fp, pc}
   18650:	push	{fp, lr}
   18654:	add	fp, sp, #4
   18658:	sub	sp, sp, #16
   1865c:	str	r0, [fp, #-16]
   18660:	ldr	r3, [fp, #-16]
   18664:	cmp	r3, #0
   18668:	bne	18688 <__assert_fail@plt+0x7328>
   1866c:	ldr	r3, [pc, #220]	; 18750 <__assert_fail@plt+0x73f0>
   18670:	ldr	r3, [r3]
   18674:	mov	r2, #55	; 0x37
   18678:	mov	r1, #1
   1867c:	ldr	r0, [pc, #208]	; 18754 <__assert_fail@plt+0x73f4>
   18680:	bl	11114 <fwrite@plt>
   18684:	bl	11318 <abort@plt>
   18688:	mov	r1, #47	; 0x2f
   1868c:	ldr	r0, [fp, #-16]
   18690:	bl	11294 <strrchr@plt>
   18694:	str	r0, [fp, #-8]
   18698:	ldr	r3, [fp, #-8]
   1869c:	cmp	r3, #0
   186a0:	beq	186b0 <__assert_fail@plt+0x7350>
   186a4:	ldr	r3, [fp, #-8]
   186a8:	add	r3, r3, #1
   186ac:	b	186b4 <__assert_fail@plt+0x7354>
   186b0:	ldr	r3, [fp, #-16]
   186b4:	str	r3, [fp, #-12]
   186b8:	ldr	r2, [fp, #-12]
   186bc:	ldr	r3, [fp, #-16]
   186c0:	sub	r3, r2, r3
   186c4:	cmp	r3, #6
   186c8:	ble	1872c <__assert_fail@plt+0x73cc>
   186cc:	ldr	r3, [fp, #-12]
   186d0:	sub	r3, r3, #7
   186d4:	mov	r2, #7
   186d8:	ldr	r1, [pc, #120]	; 18758 <__assert_fail@plt+0x73f8>
   186dc:	mov	r0, r3
   186e0:	bl	1130c <strncmp@plt>
   186e4:	mov	r3, r0
   186e8:	cmp	r3, #0
   186ec:	bne	1872c <__assert_fail@plt+0x73cc>
   186f0:	ldr	r3, [fp, #-12]
   186f4:	str	r3, [fp, #-16]
   186f8:	mov	r2, #3
   186fc:	ldr	r1, [pc, #88]	; 1875c <__assert_fail@plt+0x73fc>
   18700:	ldr	r0, [fp, #-12]
   18704:	bl	1130c <strncmp@plt>
   18708:	mov	r3, r0
   1870c:	cmp	r3, #0
   18710:	bne	1872c <__assert_fail@plt+0x73cc>
   18714:	ldr	r3, [fp, #-12]
   18718:	add	r3, r3, #3
   1871c:	str	r3, [fp, #-16]
   18720:	ldr	r2, [pc, #56]	; 18760 <__assert_fail@plt+0x7400>
   18724:	ldr	r3, [fp, #-16]
   18728:	str	r3, [r2]
   1872c:	ldr	r2, [pc, #48]	; 18764 <__assert_fail@plt+0x7404>
   18730:	ldr	r3, [fp, #-16]
   18734:	str	r3, [r2]
   18738:	ldr	r2, [pc, #40]	; 18768 <__assert_fail@plt+0x7408>
   1873c:	ldr	r3, [fp, #-16]
   18740:	str	r3, [r2]
   18744:	nop			; (mov r0, r0)
   18748:	sub	sp, fp, #4
   1874c:	pop	{fp, pc}
   18750:	andeq	r1, r3, r0, lsr #3
   18754:	andeq	r0, r2, r4, ror #2
   18758:	muleq	r2, ip, r1
   1875c:	andeq	r0, r2, r4, lsr #3
   18760:	muleq	r3, r0, r1
   18764:	ldrdeq	r1, [r3], -r0
   18768:	muleq	r3, r4, r1
   1876c:	push	{fp, lr}
   18770:	add	fp, sp, #4
   18774:	sub	sp, sp, #16
   18778:	str	r0, [fp, #-16]
   1877c:	bl	11228 <__errno_location@plt>
   18780:	mov	r3, r0
   18784:	ldr	r3, [r3]
   18788:	str	r3, [fp, #-8]
   1878c:	ldr	r3, [fp, #-16]
   18790:	cmp	r3, #0
   18794:	beq	187a0 <__assert_fail@plt+0x7440>
   18798:	ldr	r3, [fp, #-16]
   1879c:	b	187a4 <__assert_fail@plt+0x7444>
   187a0:	ldr	r3, [pc, #48]	; 187d8 <__assert_fail@plt+0x7478>
   187a4:	mov	r1, #48	; 0x30
   187a8:	mov	r0, r3
   187ac:	bl	1c580 <__assert_fail@plt+0xb220>
   187b0:	mov	r3, r0
   187b4:	str	r3, [fp, #-12]
   187b8:	bl	11228 <__errno_location@plt>
   187bc:	mov	r2, r0
   187c0:	ldr	r3, [fp, #-8]
   187c4:	str	r3, [r2]
   187c8:	ldr	r3, [fp, #-12]
   187cc:	mov	r0, r3
   187d0:	sub	sp, fp, #4
   187d4:	pop	{fp, pc}
   187d8:	ldrdeq	r1, [r3], -r4
   187dc:	push	{fp}		; (str fp, [sp, #-4]!)
   187e0:	add	fp, sp, #0
   187e4:	sub	sp, sp, #12
   187e8:	str	r0, [fp, #-8]
   187ec:	ldr	r3, [fp, #-8]
   187f0:	cmp	r3, #0
   187f4:	beq	18800 <__assert_fail@plt+0x74a0>
   187f8:	ldr	r3, [fp, #-8]
   187fc:	b	18804 <__assert_fail@plt+0x74a4>
   18800:	ldr	r3, [pc, #16]	; 18818 <__assert_fail@plt+0x74b8>
   18804:	ldr	r3, [r3]
   18808:	mov	r0, r3
   1880c:	add	sp, fp, #0
   18810:	pop	{fp}		; (ldr fp, [sp], #4)
   18814:	bx	lr
   18818:	ldrdeq	r1, [r3], -r4
   1881c:	push	{fp}		; (str fp, [sp, #-4]!)
   18820:	add	fp, sp, #0
   18824:	sub	sp, sp, #12
   18828:	str	r0, [fp, #-8]
   1882c:	str	r1, [fp, #-12]
   18830:	ldr	r3, [fp, #-8]
   18834:	cmp	r3, #0
   18838:	beq	18844 <__assert_fail@plt+0x74e4>
   1883c:	ldr	r3, [fp, #-8]
   18840:	b	18848 <__assert_fail@plt+0x74e8>
   18844:	ldr	r3, [pc, #20]	; 18860 <__assert_fail@plt+0x7500>
   18848:	ldr	r2, [fp, #-12]
   1884c:	str	r2, [r3]
   18850:	nop			; (mov r0, r0)
   18854:	add	sp, fp, #0
   18858:	pop	{fp}		; (ldr fp, [sp], #4)
   1885c:	bx	lr
   18860:	ldrdeq	r1, [r3], -r4
   18864:	push	{fp}		; (str fp, [sp, #-4]!)
   18868:	add	fp, sp, #0
   1886c:	sub	sp, sp, #36	; 0x24
   18870:	str	r0, [fp, #-24]	; 0xffffffe8
   18874:	mov	r3, r1
   18878:	str	r2, [fp, #-32]	; 0xffffffe0
   1887c:	strb	r3, [fp, #-25]	; 0xffffffe7
   18880:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   18884:	strb	r3, [fp, #-5]
   18888:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1888c:	cmp	r3, #0
   18890:	beq	1889c <__assert_fail@plt+0x753c>
   18894:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18898:	b	188a0 <__assert_fail@plt+0x7540>
   1889c:	ldr	r3, [pc, #124]	; 18920 <__assert_fail@plt+0x75c0>
   188a0:	add	r2, r3, #8
   188a4:	ldrb	r3, [fp, #-5]
   188a8:	lsr	r3, r3, #5
   188ac:	uxtb	r3, r3
   188b0:	lsl	r3, r3, #2
   188b4:	add	r3, r2, r3
   188b8:	str	r3, [fp, #-12]
   188bc:	ldrb	r3, [fp, #-5]
   188c0:	and	r3, r3, #31
   188c4:	str	r3, [fp, #-16]
   188c8:	ldr	r3, [fp, #-12]
   188cc:	ldr	r2, [r3]
   188d0:	ldr	r3, [fp, #-16]
   188d4:	lsr	r3, r2, r3
   188d8:	and	r3, r3, #1
   188dc:	str	r3, [fp, #-20]	; 0xffffffec
   188e0:	ldr	r3, [fp, #-12]
   188e4:	ldr	r3, [r3]
   188e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   188ec:	and	r1, r2, #1
   188f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   188f4:	eor	r1, r1, r2
   188f8:	ldr	r2, [fp, #-16]
   188fc:	lsl	r2, r1, r2
   18900:	eor	r2, r2, r3
   18904:	ldr	r3, [fp, #-12]
   18908:	str	r2, [r3]
   1890c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18910:	mov	r0, r3
   18914:	add	sp, fp, #0
   18918:	pop	{fp}		; (ldr fp, [sp], #4)
   1891c:	bx	lr
   18920:	ldrdeq	r1, [r3], -r4
   18924:	push	{fp}		; (str fp, [sp, #-4]!)
   18928:	add	fp, sp, #0
   1892c:	sub	sp, sp, #20
   18930:	str	r0, [fp, #-16]
   18934:	str	r1, [fp, #-20]	; 0xffffffec
   18938:	ldr	r3, [fp, #-16]
   1893c:	cmp	r3, #0
   18940:	bne	1894c <__assert_fail@plt+0x75ec>
   18944:	ldr	r3, [pc, #44]	; 18978 <__assert_fail@plt+0x7618>
   18948:	str	r3, [fp, #-16]
   1894c:	ldr	r3, [fp, #-16]
   18950:	ldr	r3, [r3, #4]
   18954:	str	r3, [fp, #-8]
   18958:	ldr	r3, [fp, #-16]
   1895c:	ldr	r2, [fp, #-20]	; 0xffffffec
   18960:	str	r2, [r3, #4]
   18964:	ldr	r3, [fp, #-8]
   18968:	mov	r0, r3
   1896c:	add	sp, fp, #0
   18970:	pop	{fp}		; (ldr fp, [sp], #4)
   18974:	bx	lr
   18978:	ldrdeq	r1, [r3], -r4
   1897c:	push	{fp, lr}
   18980:	add	fp, sp, #4
   18984:	sub	sp, sp, #16
   18988:	str	r0, [fp, #-8]
   1898c:	str	r1, [fp, #-12]
   18990:	str	r2, [fp, #-16]
   18994:	ldr	r3, [fp, #-8]
   18998:	cmp	r3, #0
   1899c:	bne	189a8 <__assert_fail@plt+0x7648>
   189a0:	ldr	r3, [pc, #76]	; 189f4 <__assert_fail@plt+0x7694>
   189a4:	str	r3, [fp, #-8]
   189a8:	ldr	r3, [fp, #-8]
   189ac:	mov	r2, #10
   189b0:	str	r2, [r3]
   189b4:	ldr	r3, [fp, #-12]
   189b8:	cmp	r3, #0
   189bc:	beq	189cc <__assert_fail@plt+0x766c>
   189c0:	ldr	r3, [fp, #-16]
   189c4:	cmp	r3, #0
   189c8:	bne	189d0 <__assert_fail@plt+0x7670>
   189cc:	bl	11318 <abort@plt>
   189d0:	ldr	r3, [fp, #-8]
   189d4:	ldr	r2, [fp, #-12]
   189d8:	str	r2, [r3, #40]	; 0x28
   189dc:	ldr	r3, [fp, #-8]
   189e0:	ldr	r2, [fp, #-16]
   189e4:	str	r2, [r3, #44]	; 0x2c
   189e8:	nop			; (mov r0, r0)
   189ec:	sub	sp, fp, #4
   189f0:	pop	{fp, pc}
   189f4:	ldrdeq	r1, [r3], -r4
   189f8:	push	{fp, lr}
   189fc:	add	fp, sp, #4
   18a00:	sub	sp, sp, #56	; 0x38
   18a04:	str	r0, [fp, #-56]	; 0xffffffc8
   18a08:	str	r1, [fp, #-60]	; 0xffffffc4
   18a0c:	sub	r3, fp, #52	; 0x34
   18a10:	mov	r2, #48	; 0x30
   18a14:	mov	r1, #0
   18a18:	mov	r0, r3
   18a1c:	bl	11240 <memset@plt>
   18a20:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18a24:	cmp	r3, #10
   18a28:	bne	18a30 <__assert_fail@plt+0x76d0>
   18a2c:	bl	11318 <abort@plt>
   18a30:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18a34:	str	r3, [fp, #-52]	; 0xffffffcc
   18a38:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18a3c:	mov	lr, r3
   18a40:	sub	ip, fp, #52	; 0x34
   18a44:	ldm	ip!, {r0, r1, r2, r3}
   18a48:	stmia	lr!, {r0, r1, r2, r3}
   18a4c:	ldm	ip!, {r0, r1, r2, r3}
   18a50:	stmia	lr!, {r0, r1, r2, r3}
   18a54:	ldm	ip, {r0, r1, r2, r3}
   18a58:	stm	lr, {r0, r1, r2, r3}
   18a5c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18a60:	sub	sp, fp, #4
   18a64:	pop	{fp, pc}
   18a68:	push	{fp, lr}
   18a6c:	add	fp, sp, #4
   18a70:	sub	sp, sp, #16
   18a74:	str	r0, [fp, #-16]
   18a78:	str	r1, [fp, #-20]	; 0xffffffec
   18a7c:	ldr	r0, [fp, #-16]
   18a80:	bl	111d4 <gettext@plt>
   18a84:	str	r0, [fp, #-8]
   18a88:	ldr	r2, [fp, #-8]
   18a8c:	ldr	r3, [fp, #-16]
   18a90:	cmp	r2, r3
   18a94:	beq	18aa0 <__assert_fail@plt+0x7740>
   18a98:	ldr	r3, [fp, #-8]
   18a9c:	b	18b30 <__assert_fail@plt+0x77d0>
   18aa0:	bl	1dfc8 <__assert_fail@plt+0xcc68>
   18aa4:	str	r0, [fp, #-12]
   18aa8:	ldr	r1, [pc, #140]	; 18b3c <__assert_fail@plt+0x77dc>
   18aac:	ldr	r0, [fp, #-12]
   18ab0:	bl	1d4f4 <__assert_fail@plt+0xc194>
   18ab4:	mov	r3, r0
   18ab8:	cmp	r3, #0
   18abc:	bne	18ae0 <__assert_fail@plt+0x7780>
   18ac0:	ldr	r3, [fp, #-16]
   18ac4:	ldrb	r3, [r3]
   18ac8:	cmp	r3, #96	; 0x60
   18acc:	bne	18ad8 <__assert_fail@plt+0x7778>
   18ad0:	ldr	r3, [pc, #104]	; 18b40 <__assert_fail@plt+0x77e0>
   18ad4:	b	18b30 <__assert_fail@plt+0x77d0>
   18ad8:	ldr	r3, [pc, #100]	; 18b44 <__assert_fail@plt+0x77e4>
   18adc:	b	18b30 <__assert_fail@plt+0x77d0>
   18ae0:	ldr	r1, [pc, #96]	; 18b48 <__assert_fail@plt+0x77e8>
   18ae4:	ldr	r0, [fp, #-12]
   18ae8:	bl	1d4f4 <__assert_fail@plt+0xc194>
   18aec:	mov	r3, r0
   18af0:	cmp	r3, #0
   18af4:	bne	18b18 <__assert_fail@plt+0x77b8>
   18af8:	ldr	r3, [fp, #-16]
   18afc:	ldrb	r3, [r3]
   18b00:	cmp	r3, #96	; 0x60
   18b04:	bne	18b10 <__assert_fail@plt+0x77b0>
   18b08:	ldr	r3, [pc, #60]	; 18b4c <__assert_fail@plt+0x77ec>
   18b0c:	b	18b30 <__assert_fail@plt+0x77d0>
   18b10:	ldr	r3, [pc, #56]	; 18b50 <__assert_fail@plt+0x77f0>
   18b14:	b	18b30 <__assert_fail@plt+0x77d0>
   18b18:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b1c:	cmp	r3, #9
   18b20:	bne	18b2c <__assert_fail@plt+0x77cc>
   18b24:	ldr	r3, [pc, #40]	; 18b54 <__assert_fail@plt+0x77f4>
   18b28:	b	18b30 <__assert_fail@plt+0x77d0>
   18b2c:	ldr	r3, [pc, #36]	; 18b58 <__assert_fail@plt+0x77f8>
   18b30:	mov	r0, r3
   18b34:	sub	sp, fp, #4
   18b38:	pop	{fp, pc}
   18b3c:	andeq	r0, r2, r4, ror #4
   18b40:	andeq	r0, r2, ip, ror #4
   18b44:	andeq	r0, r2, r0, ror r2
   18b48:	andeq	r0, r2, r4, ror r2
   18b4c:	andeq	r0, r2, ip, ror r2
   18b50:	andeq	r0, r2, r0, lsl #5
   18b54:	andeq	r0, r2, r4, lsl #5
   18b58:	andeq	r0, r2, r8, lsl #5
   18b5c:	push	{r4, fp, lr}
   18b60:	add	fp, sp, #8
   18b64:	sub	sp, sp, #116	; 0x74
   18b68:	str	r0, [fp, #-88]	; 0xffffffa8
   18b6c:	str	r1, [fp, #-92]	; 0xffffffa4
   18b70:	str	r2, [fp, #-96]	; 0xffffffa0
   18b74:	str	r3, [fp, #-100]	; 0xffffff9c
   18b78:	mov	r3, #0
   18b7c:	str	r3, [fp, #-20]	; 0xffffffec
   18b80:	mov	r3, #0
   18b84:	str	r3, [fp, #-24]	; 0xffffffe8
   18b88:	mov	r3, #0
   18b8c:	str	r3, [fp, #-28]	; 0xffffffe4
   18b90:	mov	r3, #0
   18b94:	str	r3, [fp, #-32]	; 0xffffffe0
   18b98:	mov	r3, #0
   18b9c:	strb	r3, [fp, #-33]	; 0xffffffdf
   18ba0:	bl	1112c <__ctype_get_mb_cur_max@plt>
   18ba4:	mov	r3, r0
   18ba8:	cmp	r3, #1
   18bac:	moveq	r3, #1
   18bb0:	movne	r3, #0
   18bb4:	strb	r3, [fp, #-57]	; 0xffffffc7
   18bb8:	ldr	r3, [fp, #8]
   18bbc:	and	r3, r3, #2
   18bc0:	cmp	r3, #0
   18bc4:	movne	r3, #1
   18bc8:	moveq	r3, #0
   18bcc:	strb	r3, [fp, #-34]	; 0xffffffde
   18bd0:	mov	r3, #0
   18bd4:	strb	r3, [fp, #-35]	; 0xffffffdd
   18bd8:	mov	r3, #0
   18bdc:	strb	r3, [fp, #-36]	; 0xffffffdc
   18be0:	mov	r3, #1
   18be4:	strb	r3, [fp, #-37]	; 0xffffffdb
   18be8:	ldr	r3, [fp, #4]
   18bec:	cmp	r3, #10
   18bf0:	ldrls	pc, [pc, r3, lsl #2]
   18bf4:	b	18dfc <__assert_fail@plt+0x7a9c>
   18bf8:	strdeq	r8, [r1], -r0
   18bfc:	andeq	r8, r1, ip, ror #26
   18c00:	muleq	r1, r0, sp
   18c04:	andeq	r8, r1, r4, ror #26
   18c08:	andeq	r8, r1, r4, ror sp
   18c0c:	andeq	r8, r1, r4, lsr ip
   18c10:	andeq	r8, r1, r4, lsr #24
   18c14:	muleq	r1, r4, ip
   18c18:	andeq	r8, r1, r8, lsr #25
   18c1c:	andeq	r8, r1, r8, lsr #25
   18c20:	andeq	r8, r1, r8, lsr #25
   18c24:	mov	r3, #5
   18c28:	str	r3, [fp, #4]
   18c2c:	mov	r3, #1
   18c30:	strb	r3, [fp, #-34]	; 0xffffffde
   18c34:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18c38:	eor	r3, r3, #1
   18c3c:	uxtb	r3, r3
   18c40:	cmp	r3, #0
   18c44:	beq	18c78 <__assert_fail@plt+0x7918>
   18c48:	ldr	r2, [fp, #-20]	; 0xffffffec
   18c4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18c50:	cmp	r2, r3
   18c54:	bcs	18c6c <__assert_fail@plt+0x790c>
   18c58:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18c5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c60:	add	r3, r2, r3
   18c64:	mov	r2, #34	; 0x22
   18c68:	strb	r2, [r3]
   18c6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c70:	add	r3, r3, #1
   18c74:	str	r3, [fp, #-20]	; 0xffffffec
   18c78:	mov	r3, #1
   18c7c:	strb	r3, [fp, #-33]	; 0xffffffdf
   18c80:	ldr	r3, [pc, #3872]	; 19ba8 <__assert_fail@plt+0x8848>
   18c84:	str	r3, [fp, #-28]	; 0xffffffe4
   18c88:	mov	r3, #1
   18c8c:	str	r3, [fp, #-32]	; 0xffffffe0
   18c90:	b	18e00 <__assert_fail@plt+0x7aa0>
   18c94:	mov	r3, #1
   18c98:	strb	r3, [fp, #-33]	; 0xffffffdf
   18c9c:	mov	r3, #0
   18ca0:	strb	r3, [fp, #-34]	; 0xffffffde
   18ca4:	b	18e00 <__assert_fail@plt+0x7aa0>
   18ca8:	ldr	r3, [fp, #4]
   18cac:	cmp	r3, #10
   18cb0:	beq	18cd4 <__assert_fail@plt+0x7974>
   18cb4:	ldr	r1, [fp, #4]
   18cb8:	ldr	r0, [pc, #3820]	; 19bac <__assert_fail@plt+0x884c>
   18cbc:	bl	18a68 <__assert_fail@plt+0x7708>
   18cc0:	str	r0, [fp, #16]
   18cc4:	ldr	r1, [fp, #4]
   18cc8:	ldr	r0, [pc, #3808]	; 19bb0 <__assert_fail@plt+0x8850>
   18ccc:	bl	18a68 <__assert_fail@plt+0x7708>
   18cd0:	str	r0, [fp, #20]
   18cd4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18cd8:	eor	r3, r3, #1
   18cdc:	uxtb	r3, r3
   18ce0:	cmp	r3, #0
   18ce4:	beq	18d44 <__assert_fail@plt+0x79e4>
   18ce8:	ldr	r3, [fp, #16]
   18cec:	str	r3, [fp, #-28]	; 0xffffffe4
   18cf0:	b	18d34 <__assert_fail@plt+0x79d4>
   18cf4:	ldr	r2, [fp, #-20]	; 0xffffffec
   18cf8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18cfc:	cmp	r2, r3
   18d00:	bcs	18d1c <__assert_fail@plt+0x79bc>
   18d04:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18d08:	ldr	r3, [fp, #-20]	; 0xffffffec
   18d0c:	add	r3, r2, r3
   18d10:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18d14:	ldrb	r2, [r2]
   18d18:	strb	r2, [r3]
   18d1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18d20:	add	r3, r3, #1
   18d24:	str	r3, [fp, #-20]	; 0xffffffec
   18d28:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18d2c:	add	r3, r3, #1
   18d30:	str	r3, [fp, #-28]	; 0xffffffe4
   18d34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18d38:	ldrb	r3, [r3]
   18d3c:	cmp	r3, #0
   18d40:	bne	18cf4 <__assert_fail@plt+0x7994>
   18d44:	mov	r3, #1
   18d48:	strb	r3, [fp, #-33]	; 0xffffffdf
   18d4c:	ldr	r3, [fp, #20]
   18d50:	str	r3, [fp, #-28]	; 0xffffffe4
   18d54:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18d58:	bl	111ec <strlen@plt>
   18d5c:	str	r0, [fp, #-32]	; 0xffffffe0
   18d60:	b	18e00 <__assert_fail@plt+0x7aa0>
   18d64:	mov	r3, #1
   18d68:	strb	r3, [fp, #-33]	; 0xffffffdf
   18d6c:	mov	r3, #1
   18d70:	strb	r3, [fp, #-34]	; 0xffffffde
   18d74:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18d78:	eor	r3, r3, #1
   18d7c:	uxtb	r3, r3
   18d80:	cmp	r3, #0
   18d84:	beq	18d90 <__assert_fail@plt+0x7a30>
   18d88:	mov	r3, #1
   18d8c:	strb	r3, [fp, #-33]	; 0xffffffdf
   18d90:	mov	r3, #2
   18d94:	str	r3, [fp, #4]
   18d98:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18d9c:	eor	r3, r3, #1
   18da0:	uxtb	r3, r3
   18da4:	cmp	r3, #0
   18da8:	beq	18ddc <__assert_fail@plt+0x7a7c>
   18dac:	ldr	r2, [fp, #-20]	; 0xffffffec
   18db0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18db4:	cmp	r2, r3
   18db8:	bcs	18dd0 <__assert_fail@plt+0x7a70>
   18dbc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18dc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18dc4:	add	r3, r2, r3
   18dc8:	mov	r2, #39	; 0x27
   18dcc:	strb	r2, [r3]
   18dd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18dd4:	add	r3, r3, #1
   18dd8:	str	r3, [fp, #-20]	; 0xffffffec
   18ddc:	ldr	r3, [pc, #3532]	; 19bb0 <__assert_fail@plt+0x8850>
   18de0:	str	r3, [fp, #-28]	; 0xffffffe4
   18de4:	mov	r3, #1
   18de8:	str	r3, [fp, #-32]	; 0xffffffe0
   18dec:	b	18e00 <__assert_fail@plt+0x7aa0>
   18df0:	mov	r3, #0
   18df4:	strb	r3, [fp, #-34]	; 0xffffffde
   18df8:	b	18e00 <__assert_fail@plt+0x7aa0>
   18dfc:	bl	11318 <abort@plt>
   18e00:	mov	r3, #0
   18e04:	str	r3, [fp, #-16]
   18e08:	b	19f98 <__assert_fail@plt+0x8c38>
   18e0c:	mov	r3, #0
   18e10:	strb	r3, [fp, #-40]	; 0xffffffd8
   18e14:	mov	r3, #0
   18e18:	strb	r3, [fp, #-41]	; 0xffffffd7
   18e1c:	mov	r3, #0
   18e20:	strb	r3, [fp, #-42]	; 0xffffffd6
   18e24:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   18e28:	cmp	r3, #0
   18e2c:	beq	18ec8 <__assert_fail@plt+0x7b68>
   18e30:	ldr	r3, [fp, #4]
   18e34:	cmp	r3, #2
   18e38:	beq	18ec8 <__assert_fail@plt+0x7b68>
   18e3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18e40:	cmp	r3, #0
   18e44:	beq	18ec8 <__assert_fail@plt+0x7b68>
   18e48:	ldr	r2, [fp, #-16]
   18e4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18e50:	add	r4, r2, r3
   18e54:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18e58:	cmn	r3, #1
   18e5c:	bne	18e80 <__assert_fail@plt+0x7b20>
   18e60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18e64:	cmp	r3, #1
   18e68:	bls	18e80 <__assert_fail@plt+0x7b20>
   18e6c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   18e70:	bl	111ec <strlen@plt>
   18e74:	str	r0, [fp, #-100]	; 0xffffff9c
   18e78:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18e7c:	b	18e84 <__assert_fail@plt+0x7b24>
   18e80:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18e84:	cmp	r4, r3
   18e88:	bhi	18ec8 <__assert_fail@plt+0x7b68>
   18e8c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18e90:	ldr	r3, [fp, #-16]
   18e94:	add	r3, r2, r3
   18e98:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18e9c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18ea0:	mov	r0, r3
   18ea4:	bl	110b4 <memcmp@plt>
   18ea8:	mov	r3, r0
   18eac:	cmp	r3, #0
   18eb0:	bne	18ec8 <__assert_fail@plt+0x7b68>
   18eb4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18eb8:	cmp	r3, #0
   18ebc:	bne	1a154 <__assert_fail@plt+0x8df4>
   18ec0:	mov	r3, #1
   18ec4:	strb	r3, [fp, #-40]	; 0xffffffd8
   18ec8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18ecc:	ldr	r3, [fp, #-16]
   18ed0:	add	r3, r2, r3
   18ed4:	ldrb	r3, [r3]
   18ed8:	strb	r3, [fp, #-38]	; 0xffffffda
   18edc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   18ee0:	cmp	r3, #126	; 0x7e
   18ee4:	ldrls	pc, [pc, r3, lsl #2]
   18ee8:	b	19714 <__assert_fail@plt+0x83b4>
   18eec:	andeq	r9, r1, r8, ror #1
   18ef0:	andeq	r9, r1, r4, lsl r7
   18ef4:	andeq	r9, r1, r4, lsl r7
   18ef8:	andeq	r9, r1, r4, lsl r7
   18efc:	andeq	r9, r1, r4, lsl r7
   18f00:	andeq	r9, r1, r4, lsl r7
   18f04:	andeq	r9, r1, r4, lsl r7
   18f08:	ldrdeq	r9, [r1], -r8
   18f0c:	andeq	r9, r1, r4, ror #9
   18f10:	andeq	r9, r1, r4, lsl r5
   18f14:	strdeq	r9, [r1], -ip
   18f18:	andeq	r9, r1, r0, lsr #10
   18f1c:	strdeq	r9, [r1], -r0
   18f20:	andeq	r9, r1, r8, lsl #10
   18f24:	andeq	r9, r1, r4, lsl r7
   18f28:	andeq	r9, r1, r4, lsl r7
   18f2c:	andeq	r9, r1, r4, lsl r7
   18f30:	andeq	r9, r1, r4, lsl r7
   18f34:	andeq	r9, r1, r4, lsl r7
   18f38:	andeq	r9, r1, r4, lsl r7
   18f3c:	andeq	r9, r1, r4, lsl r7
   18f40:	andeq	r9, r1, r4, lsl r7
   18f44:	andeq	r9, r1, r4, lsl r7
   18f48:	andeq	r9, r1, r4, lsl r7
   18f4c:	andeq	r9, r1, r4, lsl r7
   18f50:	andeq	r9, r1, r4, lsl r7
   18f54:	andeq	r9, r1, r4, lsl r7
   18f58:	andeq	r9, r1, r4, lsl r7
   18f5c:	andeq	r9, r1, r4, lsl r7
   18f60:	andeq	r9, r1, r4, lsl r7
   18f64:	andeq	r9, r1, r4, lsl r7
   18f68:	andeq	r9, r1, r4, lsl r7
   18f6c:	strdeq	r9, [r1], -r8
   18f70:	andeq	r9, r1, r0, lsl #12
   18f74:	andeq	r9, r1, r0, lsl #12
   18f78:	andeq	r9, r1, ip, ror #11
   18f7c:	andeq	r9, r1, r0, lsl #12
   18f80:	andeq	r9, r1, r8, lsl #14
   18f84:	andeq	r9, r1, r0, lsl #12
   18f88:	andeq	r9, r1, ip, lsl r6
   18f8c:	andeq	r9, r1, r0, lsl #12
   18f90:	andeq	r9, r1, r0, lsl #12
   18f94:	andeq	r9, r1, r0, lsl #12
   18f98:	andeq	r9, r1, r8, lsl #14
   18f9c:	andeq	r9, r1, r8, lsl #14
   18fa0:	andeq	r9, r1, r8, lsl #14
   18fa4:	andeq	r9, r1, r8, lsl #14
   18fa8:	andeq	r9, r1, r8, lsl #14
   18fac:	andeq	r9, r1, r8, lsl #14
   18fb0:	andeq	r9, r1, r8, lsl #14
   18fb4:	andeq	r9, r1, r8, lsl #14
   18fb8:	andeq	r9, r1, r8, lsl #14
   18fbc:	andeq	r9, r1, r8, lsl #14
   18fc0:	andeq	r9, r1, r8, lsl #14
   18fc4:	andeq	r9, r1, r8, lsl #14
   18fc8:	andeq	r9, r1, r8, lsl #14
   18fcc:	andeq	r9, r1, r8, lsl #14
   18fd0:	andeq	r9, r1, r8, lsl #14
   18fd4:	andeq	r9, r1, r8, lsl #14
   18fd8:	andeq	r9, r1, r0, lsl #12
   18fdc:	andeq	r9, r1, r0, lsl #12
   18fe0:	andeq	r9, r1, r0, lsl #12
   18fe4:	andeq	r9, r1, r0, lsl #12
   18fe8:	andeq	r9, r1, r8, asr #5
   18fec:	andeq	r9, r1, r4, lsl r7
   18ff0:	andeq	r9, r1, r8, lsl #14
   18ff4:	andeq	r9, r1, r8, lsl #14
   18ff8:	andeq	r9, r1, r8, lsl #14
   18ffc:	andeq	r9, r1, r8, lsl #14
   19000:	andeq	r9, r1, r8, lsl #14
   19004:	andeq	r9, r1, r8, lsl #14
   19008:	andeq	r9, r1, r8, lsl #14
   1900c:	andeq	r9, r1, r8, lsl #14
   19010:	andeq	r9, r1, r8, lsl #14
   19014:	andeq	r9, r1, r8, lsl #14
   19018:	andeq	r9, r1, r8, lsl #14
   1901c:	andeq	r9, r1, r8, lsl #14
   19020:	andeq	r9, r1, r8, lsl #14
   19024:	andeq	r9, r1, r8, lsl #14
   19028:	andeq	r9, r1, r8, lsl #14
   1902c:	andeq	r9, r1, r8, lsl #14
   19030:	andeq	r9, r1, r8, lsl #14
   19034:	andeq	r9, r1, r8, lsl #14
   19038:	andeq	r9, r1, r8, lsl #14
   1903c:	andeq	r9, r1, r8, lsl #14
   19040:	andeq	r9, r1, r8, lsl #14
   19044:	andeq	r9, r1, r8, lsl #14
   19048:	andeq	r9, r1, r8, lsl #14
   1904c:	andeq	r9, r1, r8, lsl #14
   19050:	andeq	r9, r1, r8, lsl #14
   19054:	andeq	r9, r1, r8, lsl #14
   19058:	andeq	r9, r1, r0, lsl #12
   1905c:	andeq	r9, r1, ip, lsr #10
   19060:	andeq	r9, r1, r8, lsl #14
   19064:	andeq	r9, r1, r0, lsl #12
   19068:	andeq	r9, r1, r8, lsl #14
   1906c:	andeq	r9, r1, r0, lsl #12
   19070:	andeq	r9, r1, r8, lsl #14
   19074:	andeq	r9, r1, r8, lsl #14
   19078:	andeq	r9, r1, r8, lsl #14
   1907c:	andeq	r9, r1, r8, lsl #14
   19080:	andeq	r9, r1, r8, lsl #14
   19084:	andeq	r9, r1, r8, lsl #14
   19088:	andeq	r9, r1, r8, lsl #14
   1908c:	andeq	r9, r1, r8, lsl #14
   19090:	andeq	r9, r1, r8, lsl #14
   19094:	andeq	r9, r1, r8, lsl #14
   19098:	andeq	r9, r1, r8, lsl #14
   1909c:	andeq	r9, r1, r8, lsl #14
   190a0:	andeq	r9, r1, r8, lsl #14
   190a4:	andeq	r9, r1, r8, lsl #14
   190a8:	andeq	r9, r1, r8, lsl #14
   190ac:	andeq	r9, r1, r8, lsl #14
   190b0:	andeq	r9, r1, r8, lsl #14
   190b4:	andeq	r9, r1, r8, lsl #14
   190b8:	andeq	r9, r1, r8, lsl #14
   190bc:	andeq	r9, r1, r8, lsl #14
   190c0:	andeq	r9, r1, r8, lsl #14
   190c4:	andeq	r9, r1, r8, lsl #14
   190c8:	andeq	r9, r1, r8, lsl #14
   190cc:	andeq	r9, r1, r8, lsl #14
   190d0:	andeq	r9, r1, r8, lsl #14
   190d4:	andeq	r9, r1, r8, lsl #14
   190d8:	andeq	r9, r1, r4, lsr #11
   190dc:	andeq	r9, r1, r0, lsl #12
   190e0:	andeq	r9, r1, r4, lsr #11
   190e4:	andeq	r9, r1, ip, ror #11
   190e8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   190ec:	cmp	r3, #0
   190f0:	beq	192b4 <__assert_fail@plt+0x7f54>
   190f4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   190f8:	cmp	r3, #0
   190fc:	bne	1a15c <__assert_fail@plt+0x8dfc>
   19100:	mov	r3, #1
   19104:	strb	r3, [fp, #-41]	; 0xffffffd7
   19108:	ldr	r3, [fp, #4]
   1910c:	cmp	r3, #2
   19110:	bne	191c0 <__assert_fail@plt+0x7e60>
   19114:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19118:	eor	r3, r3, #1
   1911c:	uxtb	r3, r3
   19120:	cmp	r3, #0
   19124:	beq	191c0 <__assert_fail@plt+0x7e60>
   19128:	ldr	r2, [fp, #-20]	; 0xffffffec
   1912c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19130:	cmp	r2, r3
   19134:	bcs	1914c <__assert_fail@plt+0x7dec>
   19138:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1913c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19140:	add	r3, r2, r3
   19144:	mov	r2, #39	; 0x27
   19148:	strb	r2, [r3]
   1914c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19150:	add	r3, r3, #1
   19154:	str	r3, [fp, #-20]	; 0xffffffec
   19158:	ldr	r2, [fp, #-20]	; 0xffffffec
   1915c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19160:	cmp	r2, r3
   19164:	bcs	1917c <__assert_fail@plt+0x7e1c>
   19168:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1916c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19170:	add	r3, r2, r3
   19174:	mov	r2, #36	; 0x24
   19178:	strb	r2, [r3]
   1917c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19180:	add	r3, r3, #1
   19184:	str	r3, [fp, #-20]	; 0xffffffec
   19188:	ldr	r2, [fp, #-20]	; 0xffffffec
   1918c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19190:	cmp	r2, r3
   19194:	bcs	191ac <__assert_fail@plt+0x7e4c>
   19198:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1919c:	ldr	r3, [fp, #-20]	; 0xffffffec
   191a0:	add	r3, r2, r3
   191a4:	mov	r2, #39	; 0x27
   191a8:	strb	r2, [r3]
   191ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   191b0:	add	r3, r3, #1
   191b4:	str	r3, [fp, #-20]	; 0xffffffec
   191b8:	mov	r3, #1
   191bc:	strb	r3, [fp, #-35]	; 0xffffffdd
   191c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   191c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   191c8:	cmp	r2, r3
   191cc:	bcs	191e4 <__assert_fail@plt+0x7e84>
   191d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   191d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   191d8:	add	r3, r2, r3
   191dc:	mov	r2, #92	; 0x5c
   191e0:	strb	r2, [r3]
   191e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   191e8:	add	r3, r3, #1
   191ec:	str	r3, [fp, #-20]	; 0xffffffec
   191f0:	ldr	r3, [fp, #4]
   191f4:	cmp	r3, #2
   191f8:	beq	192a8 <__assert_fail@plt+0x7f48>
   191fc:	ldr	r3, [fp, #-16]
   19200:	add	r2, r3, #1
   19204:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19208:	cmp	r2, r3
   1920c:	bcs	192a8 <__assert_fail@plt+0x7f48>
   19210:	ldr	r3, [fp, #-16]
   19214:	add	r3, r3, #1
   19218:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1921c:	add	r3, r2, r3
   19220:	ldrb	r3, [r3]
   19224:	cmp	r3, #47	; 0x2f
   19228:	bls	192a8 <__assert_fail@plt+0x7f48>
   1922c:	ldr	r3, [fp, #-16]
   19230:	add	r3, r3, #1
   19234:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19238:	add	r3, r2, r3
   1923c:	ldrb	r3, [r3]
   19240:	cmp	r3, #57	; 0x39
   19244:	bhi	192a8 <__assert_fail@plt+0x7f48>
   19248:	ldr	r2, [fp, #-20]	; 0xffffffec
   1924c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19250:	cmp	r2, r3
   19254:	bcs	1926c <__assert_fail@plt+0x7f0c>
   19258:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1925c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19260:	add	r3, r2, r3
   19264:	mov	r2, #48	; 0x30
   19268:	strb	r2, [r3]
   1926c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19270:	add	r3, r3, #1
   19274:	str	r3, [fp, #-20]	; 0xffffffec
   19278:	ldr	r2, [fp, #-20]	; 0xffffffec
   1927c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19280:	cmp	r2, r3
   19284:	bcs	1929c <__assert_fail@plt+0x7f3c>
   19288:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1928c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19290:	add	r3, r2, r3
   19294:	mov	r2, #48	; 0x30
   19298:	strb	r2, [r3]
   1929c:	ldr	r3, [fp, #-20]	; 0xffffffec
   192a0:	add	r3, r3, #1
   192a4:	str	r3, [fp, #-20]	; 0xffffffec
   192a8:	mov	r3, #48	; 0x30
   192ac:	strb	r3, [fp, #-38]	; 0xffffffda
   192b0:	b	19cf0 <__assert_fail@plt+0x8990>
   192b4:	ldr	r3, [fp, #8]
   192b8:	and	r3, r3, #1
   192bc:	cmp	r3, #0
   192c0:	beq	19cf0 <__assert_fail@plt+0x8990>
   192c4:	b	19f8c <__assert_fail@plt+0x8c2c>
   192c8:	ldr	r3, [fp, #4]
   192cc:	cmp	r3, #2
   192d0:	beq	192e0 <__assert_fail@plt+0x7f80>
   192d4:	cmp	r3, #5
   192d8:	beq	192f0 <__assert_fail@plt+0x7f90>
   192dc:	b	194d4 <__assert_fail@plt+0x8174>
   192e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   192e4:	cmp	r3, #0
   192e8:	beq	194c8 <__assert_fail@plt+0x8168>
   192ec:	b	1a198 <__assert_fail@plt+0x8e38>
   192f0:	ldr	r3, [fp, #8]
   192f4:	and	r3, r3, #4
   192f8:	cmp	r3, #0
   192fc:	beq	194d0 <__assert_fail@plt+0x8170>
   19300:	ldr	r3, [fp, #-16]
   19304:	add	r2, r3, #2
   19308:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1930c:	cmp	r2, r3
   19310:	bcs	194d0 <__assert_fail@plt+0x8170>
   19314:	ldr	r3, [fp, #-16]
   19318:	add	r3, r3, #1
   1931c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19320:	add	r3, r2, r3
   19324:	ldrb	r3, [r3]
   19328:	cmp	r3, #63	; 0x3f
   1932c:	bne	194d0 <__assert_fail@plt+0x8170>
   19330:	ldr	r3, [fp, #-16]
   19334:	add	r3, r3, #2
   19338:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1933c:	add	r3, r2, r3
   19340:	ldrb	r3, [r3]
   19344:	sub	r3, r3, #33	; 0x21
   19348:	cmp	r3, #29
   1934c:	ldrls	pc, [pc, r3, lsl #2]
   19350:	b	194c0 <__assert_fail@plt+0x8160>
   19354:	andeq	r9, r1, ip, asr #7
   19358:	andeq	r9, r1, r0, asr #9
   1935c:	andeq	r9, r1, r0, asr #9
   19360:	andeq	r9, r1, r0, asr #9
   19364:	andeq	r9, r1, r0, asr #9
   19368:	andeq	r9, r1, r0, asr #9
   1936c:	andeq	r9, r1, ip, asr #7
   19370:	andeq	r9, r1, ip, asr #7
   19374:	andeq	r9, r1, ip, asr #7
   19378:	andeq	r9, r1, r0, asr #9
   1937c:	andeq	r9, r1, r0, asr #9
   19380:	andeq	r9, r1, r0, asr #9
   19384:	andeq	r9, r1, ip, asr #7
   19388:	andeq	r9, r1, r0, asr #9
   1938c:	andeq	r9, r1, ip, asr #7
   19390:	andeq	r9, r1, r0, asr #9
   19394:	andeq	r9, r1, r0, asr #9
   19398:	andeq	r9, r1, r0, asr #9
   1939c:	andeq	r9, r1, r0, asr #9
   193a0:	andeq	r9, r1, r0, asr #9
   193a4:	andeq	r9, r1, r0, asr #9
   193a8:	andeq	r9, r1, r0, asr #9
   193ac:	andeq	r9, r1, r0, asr #9
   193b0:	andeq	r9, r1, r0, asr #9
   193b4:	andeq	r9, r1, r0, asr #9
   193b8:	andeq	r9, r1, r0, asr #9
   193bc:	andeq	r9, r1, r0, asr #9
   193c0:	andeq	r9, r1, ip, asr #7
   193c4:	andeq	r9, r1, ip, asr #7
   193c8:	andeq	r9, r1, ip, asr #7
   193cc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   193d0:	cmp	r3, #0
   193d4:	bne	1a164 <__assert_fail@plt+0x8e04>
   193d8:	ldr	r3, [fp, #-16]
   193dc:	add	r3, r3, #2
   193e0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   193e4:	add	r3, r2, r3
   193e8:	ldrb	r3, [r3]
   193ec:	strb	r3, [fp, #-38]	; 0xffffffda
   193f0:	ldr	r3, [fp, #-16]
   193f4:	add	r3, r3, #2
   193f8:	str	r3, [fp, #-16]
   193fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   19400:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19404:	cmp	r2, r3
   19408:	bcs	19420 <__assert_fail@plt+0x80c0>
   1940c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19410:	ldr	r3, [fp, #-20]	; 0xffffffec
   19414:	add	r3, r2, r3
   19418:	mov	r2, #63	; 0x3f
   1941c:	strb	r2, [r3]
   19420:	ldr	r3, [fp, #-20]	; 0xffffffec
   19424:	add	r3, r3, #1
   19428:	str	r3, [fp, #-20]	; 0xffffffec
   1942c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19430:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19434:	cmp	r2, r3
   19438:	bcs	19450 <__assert_fail@plt+0x80f0>
   1943c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19440:	ldr	r3, [fp, #-20]	; 0xffffffec
   19444:	add	r3, r2, r3
   19448:	mov	r2, #34	; 0x22
   1944c:	strb	r2, [r3]
   19450:	ldr	r3, [fp, #-20]	; 0xffffffec
   19454:	add	r3, r3, #1
   19458:	str	r3, [fp, #-20]	; 0xffffffec
   1945c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19460:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19464:	cmp	r2, r3
   19468:	bcs	19480 <__assert_fail@plt+0x8120>
   1946c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19470:	ldr	r3, [fp, #-20]	; 0xffffffec
   19474:	add	r3, r2, r3
   19478:	mov	r2, #34	; 0x22
   1947c:	strb	r2, [r3]
   19480:	ldr	r3, [fp, #-20]	; 0xffffffec
   19484:	add	r3, r3, #1
   19488:	str	r3, [fp, #-20]	; 0xffffffec
   1948c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19490:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19494:	cmp	r2, r3
   19498:	bcs	194b0 <__assert_fail@plt+0x8150>
   1949c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   194a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   194a4:	add	r3, r2, r3
   194a8:	mov	r2, #63	; 0x3f
   194ac:	strb	r2, [r3]
   194b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   194b4:	add	r3, r3, #1
   194b8:	str	r3, [fp, #-20]	; 0xffffffec
   194bc:	b	194c4 <__assert_fail@plt+0x8164>
   194c0:	nop			; (mov r0, r0)
   194c4:	b	194d0 <__assert_fail@plt+0x8170>
   194c8:	nop			; (mov r0, r0)
   194cc:	b	19d1c <__assert_fail@plt+0x89bc>
   194d0:	nop			; (mov r0, r0)
   194d4:	b	19d1c <__assert_fail@plt+0x89bc>
   194d8:	mov	r3, #97	; 0x61
   194dc:	strb	r3, [fp, #-39]	; 0xffffffd9
   194e0:	b	1958c <__assert_fail@plt+0x822c>
   194e4:	mov	r3, #98	; 0x62
   194e8:	strb	r3, [fp, #-39]	; 0xffffffd9
   194ec:	b	1958c <__assert_fail@plt+0x822c>
   194f0:	mov	r3, #102	; 0x66
   194f4:	strb	r3, [fp, #-39]	; 0xffffffd9
   194f8:	b	1958c <__assert_fail@plt+0x822c>
   194fc:	mov	r3, #110	; 0x6e
   19500:	strb	r3, [fp, #-39]	; 0xffffffd9
   19504:	b	19574 <__assert_fail@plt+0x8214>
   19508:	mov	r3, #114	; 0x72
   1950c:	strb	r3, [fp, #-39]	; 0xffffffd9
   19510:	b	19574 <__assert_fail@plt+0x8214>
   19514:	mov	r3, #116	; 0x74
   19518:	strb	r3, [fp, #-39]	; 0xffffffd9
   1951c:	b	19574 <__assert_fail@plt+0x8214>
   19520:	mov	r3, #118	; 0x76
   19524:	strb	r3, [fp, #-39]	; 0xffffffd9
   19528:	b	1958c <__assert_fail@plt+0x822c>
   1952c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19530:	strb	r3, [fp, #-39]	; 0xffffffd9
   19534:	ldr	r3, [fp, #4]
   19538:	cmp	r3, #2
   1953c:	bne	19550 <__assert_fail@plt+0x81f0>
   19540:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19544:	cmp	r3, #0
   19548:	beq	19ea4 <__assert_fail@plt+0x8b44>
   1954c:	b	1a198 <__assert_fail@plt+0x8e38>
   19550:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19554:	cmp	r3, #0
   19558:	beq	19574 <__assert_fail@plt+0x8214>
   1955c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19560:	cmp	r3, #0
   19564:	beq	19574 <__assert_fail@plt+0x8214>
   19568:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1956c:	cmp	r3, #0
   19570:	bne	19eac <__assert_fail@plt+0x8b4c>
   19574:	ldr	r3, [fp, #4]
   19578:	cmp	r3, #2
   1957c:	bne	1958c <__assert_fail@plt+0x822c>
   19580:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19584:	cmp	r3, #0
   19588:	bne	1a16c <__assert_fail@plt+0x8e0c>
   1958c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19590:	cmp	r3, #0
   19594:	beq	19cf8 <__assert_fail@plt+0x8998>
   19598:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   1959c:	strb	r3, [fp, #-38]	; 0xffffffda
   195a0:	b	19da4 <__assert_fail@plt+0x8a44>
   195a4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   195a8:	cmn	r3, #1
   195ac:	bne	195d0 <__assert_fail@plt+0x8270>
   195b0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   195b4:	add	r3, r3, #1
   195b8:	ldrb	r3, [r3]
   195bc:	cmp	r3, #0
   195c0:	movne	r3, #1
   195c4:	moveq	r3, #0
   195c8:	uxtb	r3, r3
   195cc:	b	195e4 <__assert_fail@plt+0x8284>
   195d0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   195d4:	cmp	r3, #1
   195d8:	movne	r3, #1
   195dc:	moveq	r3, #0
   195e0:	uxtb	r3, r3
   195e4:	cmp	r3, #0
   195e8:	bne	19d00 <__assert_fail@plt+0x89a0>
   195ec:	ldr	r3, [fp, #-16]
   195f0:	cmp	r3, #0
   195f4:	bne	19d08 <__assert_fail@plt+0x89a8>
   195f8:	mov	r3, #1
   195fc:	strb	r3, [fp, #-42]	; 0xffffffd6
   19600:	ldr	r3, [fp, #4]
   19604:	cmp	r3, #2
   19608:	bne	19d10 <__assert_fail@plt+0x89b0>
   1960c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19610:	cmp	r3, #0
   19614:	beq	19d10 <__assert_fail@plt+0x89b0>
   19618:	b	1a198 <__assert_fail@plt+0x8e38>
   1961c:	mov	r3, #1
   19620:	strb	r3, [fp, #-36]	; 0xffffffdc
   19624:	mov	r3, #1
   19628:	strb	r3, [fp, #-42]	; 0xffffffd6
   1962c:	ldr	r3, [fp, #4]
   19630:	cmp	r3, #2
   19634:	bne	19d18 <__assert_fail@plt+0x89b8>
   19638:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1963c:	cmp	r3, #0
   19640:	bne	1a174 <__assert_fail@plt+0x8e14>
   19644:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19648:	cmp	r3, #0
   1964c:	beq	1966c <__assert_fail@plt+0x830c>
   19650:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19654:	cmp	r3, #0
   19658:	bne	1966c <__assert_fail@plt+0x830c>
   1965c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19660:	str	r3, [fp, #-24]	; 0xffffffe8
   19664:	mov	r3, #0
   19668:	str	r3, [fp, #-92]	; 0xffffffa4
   1966c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19670:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19674:	cmp	r2, r3
   19678:	bcs	19690 <__assert_fail@plt+0x8330>
   1967c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19680:	ldr	r3, [fp, #-20]	; 0xffffffec
   19684:	add	r3, r2, r3
   19688:	mov	r2, #39	; 0x27
   1968c:	strb	r2, [r3]
   19690:	ldr	r3, [fp, #-20]	; 0xffffffec
   19694:	add	r3, r3, #1
   19698:	str	r3, [fp, #-20]	; 0xffffffec
   1969c:	ldr	r2, [fp, #-20]	; 0xffffffec
   196a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   196a4:	cmp	r2, r3
   196a8:	bcs	196c0 <__assert_fail@plt+0x8360>
   196ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   196b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   196b4:	add	r3, r2, r3
   196b8:	mov	r2, #92	; 0x5c
   196bc:	strb	r2, [r3]
   196c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   196c4:	add	r3, r3, #1
   196c8:	str	r3, [fp, #-20]	; 0xffffffec
   196cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   196d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   196d4:	cmp	r2, r3
   196d8:	bcs	196f0 <__assert_fail@plt+0x8390>
   196dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   196e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   196e4:	add	r3, r2, r3
   196e8:	mov	r2, #39	; 0x27
   196ec:	strb	r2, [r3]
   196f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   196f4:	add	r3, r3, #1
   196f8:	str	r3, [fp, #-20]	; 0xffffffec
   196fc:	mov	r3, #0
   19700:	strb	r3, [fp, #-35]	; 0xffffffdd
   19704:	b	19d18 <__assert_fail@plt+0x89b8>
   19708:	mov	r3, #1
   1970c:	strb	r3, [fp, #-42]	; 0xffffffd6
   19710:	b	19d1c <__assert_fail@plt+0x89bc>
   19714:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   19718:	cmp	r3, #0
   1971c:	beq	1975c <__assert_fail@plt+0x83fc>
   19720:	mov	r3, #1
   19724:	str	r3, [fp, #-48]	; 0xffffffd0
   19728:	bl	111bc <__ctype_b_loc@plt>
   1972c:	mov	r3, r0
   19730:	ldr	r2, [r3]
   19734:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19738:	lsl	r3, r3, #1
   1973c:	add	r3, r2, r3
   19740:	ldrh	r3, [r3]
   19744:	and	r3, r3, #16384	; 0x4000
   19748:	cmp	r3, #0
   1974c:	movne	r3, #1
   19750:	moveq	r3, #0
   19754:	strb	r3, [fp, #-49]	; 0xffffffcf
   19758:	b	199a8 <__assert_fail@plt+0x8648>
   1975c:	sub	r3, fp, #76	; 0x4c
   19760:	mov	r2, #8
   19764:	mov	r1, #0
   19768:	mov	r0, r3
   1976c:	bl	11240 <memset@plt>
   19770:	mov	r3, #0
   19774:	str	r3, [fp, #-48]	; 0xffffffd0
   19778:	mov	r3, #1
   1977c:	strb	r3, [fp, #-49]	; 0xffffffcf
   19780:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19784:	cmn	r3, #1
   19788:	bne	19798 <__assert_fail@plt+0x8438>
   1978c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   19790:	bl	111ec <strlen@plt>
   19794:	str	r0, [fp, #-100]	; 0xffffff9c
   19798:	ldr	r2, [fp, #-16]
   1979c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   197a0:	add	r3, r2, r3
   197a4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   197a8:	add	r1, r2, r3
   197ac:	ldr	r2, [fp, #-16]
   197b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   197b4:	add	r3, r2, r3
   197b8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   197bc:	sub	r2, r2, r3
   197c0:	sub	r3, fp, #76	; 0x4c
   197c4:	sub	r0, fp, #80	; 0x50
   197c8:	bl	1e024 <__assert_fail@plt+0xccc4>
   197cc:	str	r0, [fp, #-64]	; 0xffffffc0
   197d0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   197d4:	cmp	r3, #0
   197d8:	beq	1999c <__assert_fail@plt+0x863c>
   197dc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   197e0:	cmn	r3, #1
   197e4:	bne	197f4 <__assert_fail@plt+0x8494>
   197e8:	mov	r3, #0
   197ec:	strb	r3, [fp, #-49]	; 0xffffffcf
   197f0:	b	199a8 <__assert_fail@plt+0x8648>
   197f4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   197f8:	cmn	r3, #2
   197fc:	bne	19854 <__assert_fail@plt+0x84f4>
   19800:	mov	r3, #0
   19804:	strb	r3, [fp, #-49]	; 0xffffffcf
   19808:	b	19818 <__assert_fail@plt+0x84b8>
   1980c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19810:	add	r3, r3, #1
   19814:	str	r3, [fp, #-48]	; 0xffffffd0
   19818:	ldr	r2, [fp, #-16]
   1981c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19820:	add	r2, r2, r3
   19824:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19828:	cmp	r2, r3
   1982c:	bcs	199a4 <__assert_fail@plt+0x8644>
   19830:	ldr	r2, [fp, #-16]
   19834:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19838:	add	r3, r2, r3
   1983c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19840:	add	r3, r2, r3
   19844:	ldrb	r3, [r3]
   19848:	cmp	r3, #0
   1984c:	bne	1980c <__assert_fail@plt+0x84ac>
   19850:	b	199a4 <__assert_fail@plt+0x8644>
   19854:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19858:	cmp	r3, #0
   1985c:	beq	19950 <__assert_fail@plt+0x85f0>
   19860:	ldr	r3, [fp, #4]
   19864:	cmp	r3, #2
   19868:	bne	19950 <__assert_fail@plt+0x85f0>
   1986c:	mov	r3, #1
   19870:	str	r3, [fp, #-56]	; 0xffffffc8
   19874:	b	19940 <__assert_fail@plt+0x85e0>
   19878:	ldr	r2, [fp, #-16]
   1987c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19880:	add	r2, r2, r3
   19884:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19888:	add	r3, r2, r3
   1988c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19890:	add	r3, r2, r3
   19894:	ldrb	r3, [r3]
   19898:	sub	r3, r3, #91	; 0x5b
   1989c:	cmp	r3, #33	; 0x21
   198a0:	ldrls	pc, [pc, r3, lsl #2]
   198a4:	b	19930 <__assert_fail@plt+0x85d0>
   198a8:	andeq	sl, r1, ip, ror r1
   198ac:	andeq	sl, r1, ip, ror r1
   198b0:	andeq	r9, r1, r0, lsr r9
   198b4:	andeq	sl, r1, ip, ror r1
   198b8:	andeq	r9, r1, r0, lsr r9
   198bc:	andeq	sl, r1, ip, ror r1
   198c0:	andeq	r9, r1, r0, lsr r9
   198c4:	andeq	r9, r1, r0, lsr r9
   198c8:	andeq	r9, r1, r0, lsr r9
   198cc:	andeq	r9, r1, r0, lsr r9
   198d0:	andeq	r9, r1, r0, lsr r9
   198d4:	andeq	r9, r1, r0, lsr r9
   198d8:	andeq	r9, r1, r0, lsr r9
   198dc:	andeq	r9, r1, r0, lsr r9
   198e0:	andeq	r9, r1, r0, lsr r9
   198e4:	andeq	r9, r1, r0, lsr r9
   198e8:	andeq	r9, r1, r0, lsr r9
   198ec:	andeq	r9, r1, r0, lsr r9
   198f0:	andeq	r9, r1, r0, lsr r9
   198f4:	andeq	r9, r1, r0, lsr r9
   198f8:	andeq	r9, r1, r0, lsr r9
   198fc:	andeq	r9, r1, r0, lsr r9
   19900:	andeq	r9, r1, r0, lsr r9
   19904:	andeq	r9, r1, r0, lsr r9
   19908:	andeq	r9, r1, r0, lsr r9
   1990c:	andeq	r9, r1, r0, lsr r9
   19910:	andeq	r9, r1, r0, lsr r9
   19914:	andeq	r9, r1, r0, lsr r9
   19918:	andeq	r9, r1, r0, lsr r9
   1991c:	andeq	r9, r1, r0, lsr r9
   19920:	andeq	r9, r1, r0, lsr r9
   19924:	andeq	r9, r1, r0, lsr r9
   19928:	andeq	r9, r1, r0, lsr r9
   1992c:	andeq	sl, r1, ip, ror r1
   19930:	nop			; (mov r0, r0)
   19934:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19938:	add	r3, r3, #1
   1993c:	str	r3, [fp, #-56]	; 0xffffffc8
   19940:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19944:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19948:	cmp	r2, r3
   1994c:	bcc	19878 <__assert_fail@plt+0x8518>
   19950:	ldr	r3, [fp, #-80]	; 0xffffffb0
   19954:	mov	r0, r3
   19958:	bl	110fc <iswprint@plt>
   1995c:	mov	r3, r0
   19960:	cmp	r3, #0
   19964:	bne	19970 <__assert_fail@plt+0x8610>
   19968:	mov	r3, #0
   1996c:	strb	r3, [fp, #-49]	; 0xffffffcf
   19970:	ldr	r2, [fp, #-48]	; 0xffffffd0
   19974:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19978:	add	r3, r2, r3
   1997c:	str	r3, [fp, #-48]	; 0xffffffd0
   19980:	sub	r3, fp, #76	; 0x4c
   19984:	mov	r0, r3
   19988:	bl	110a8 <mbsinit@plt>
   1998c:	mov	r3, r0
   19990:	cmp	r3, #0
   19994:	beq	19798 <__assert_fail@plt+0x8438>
   19998:	b	199a8 <__assert_fail@plt+0x8648>
   1999c:	nop			; (mov r0, r0)
   199a0:	b	199a8 <__assert_fail@plt+0x8648>
   199a4:	nop			; (mov r0, r0)
   199a8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   199ac:	strb	r3, [fp, #-42]	; 0xffffffd6
   199b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   199b4:	cmp	r3, #1
   199b8:	bhi	199dc <__assert_fail@plt+0x867c>
   199bc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   199c0:	cmp	r3, #0
   199c4:	beq	19d1c <__assert_fail@plt+0x89bc>
   199c8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   199cc:	eor	r3, r3, #1
   199d0:	uxtb	r3, r3
   199d4:	cmp	r3, #0
   199d8:	beq	19d1c <__assert_fail@plt+0x89bc>
   199dc:	ldr	r2, [fp, #-16]
   199e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   199e4:	add	r3, r2, r3
   199e8:	str	r3, [fp, #-68]	; 0xffffffbc
   199ec:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   199f0:	cmp	r3, #0
   199f4:	beq	19bb4 <__assert_fail@plt+0x8854>
   199f8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   199fc:	eor	r3, r3, #1
   19a00:	uxtb	r3, r3
   19a04:	cmp	r3, #0
   19a08:	beq	19bb4 <__assert_fail@plt+0x8854>
   19a0c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19a10:	cmp	r3, #0
   19a14:	bne	1a184 <__assert_fail@plt+0x8e24>
   19a18:	mov	r3, #1
   19a1c:	strb	r3, [fp, #-41]	; 0xffffffd7
   19a20:	ldr	r3, [fp, #4]
   19a24:	cmp	r3, #2
   19a28:	bne	19ad8 <__assert_fail@plt+0x8778>
   19a2c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19a30:	eor	r3, r3, #1
   19a34:	uxtb	r3, r3
   19a38:	cmp	r3, #0
   19a3c:	beq	19ad8 <__assert_fail@plt+0x8778>
   19a40:	ldr	r2, [fp, #-20]	; 0xffffffec
   19a44:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19a48:	cmp	r2, r3
   19a4c:	bcs	19a64 <__assert_fail@plt+0x8704>
   19a50:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19a54:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a58:	add	r3, r2, r3
   19a5c:	mov	r2, #39	; 0x27
   19a60:	strb	r2, [r3]
   19a64:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a68:	add	r3, r3, #1
   19a6c:	str	r3, [fp, #-20]	; 0xffffffec
   19a70:	ldr	r2, [fp, #-20]	; 0xffffffec
   19a74:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19a78:	cmp	r2, r3
   19a7c:	bcs	19a94 <__assert_fail@plt+0x8734>
   19a80:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19a84:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a88:	add	r3, r2, r3
   19a8c:	mov	r2, #36	; 0x24
   19a90:	strb	r2, [r3]
   19a94:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a98:	add	r3, r3, #1
   19a9c:	str	r3, [fp, #-20]	; 0xffffffec
   19aa0:	ldr	r2, [fp, #-20]	; 0xffffffec
   19aa4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19aa8:	cmp	r2, r3
   19aac:	bcs	19ac4 <__assert_fail@plt+0x8764>
   19ab0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19ab4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ab8:	add	r3, r2, r3
   19abc:	mov	r2, #39	; 0x27
   19ac0:	strb	r2, [r3]
   19ac4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ac8:	add	r3, r3, #1
   19acc:	str	r3, [fp, #-20]	; 0xffffffec
   19ad0:	mov	r3, #1
   19ad4:	strb	r3, [fp, #-35]	; 0xffffffdd
   19ad8:	ldr	r2, [fp, #-20]	; 0xffffffec
   19adc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19ae0:	cmp	r2, r3
   19ae4:	bcs	19afc <__assert_fail@plt+0x879c>
   19ae8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19aec:	ldr	r3, [fp, #-20]	; 0xffffffec
   19af0:	add	r3, r2, r3
   19af4:	mov	r2, #92	; 0x5c
   19af8:	strb	r2, [r3]
   19afc:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b00:	add	r3, r3, #1
   19b04:	str	r3, [fp, #-20]	; 0xffffffec
   19b08:	ldr	r2, [fp, #-20]	; 0xffffffec
   19b0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19b10:	cmp	r2, r3
   19b14:	bcs	19b3c <__assert_fail@plt+0x87dc>
   19b18:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19b1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b20:	add	r3, r2, r3
   19b24:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19b28:	lsr	r2, r2, #6
   19b2c:	uxtb	r2, r2
   19b30:	add	r2, r2, #48	; 0x30
   19b34:	uxtb	r2, r2
   19b38:	strb	r2, [r3]
   19b3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b40:	add	r3, r3, #1
   19b44:	str	r3, [fp, #-20]	; 0xffffffec
   19b48:	ldr	r2, [fp, #-20]	; 0xffffffec
   19b4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19b50:	cmp	r2, r3
   19b54:	bcs	19b84 <__assert_fail@plt+0x8824>
   19b58:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19b5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b60:	add	r3, r2, r3
   19b64:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19b68:	lsr	r2, r2, #3
   19b6c:	uxtb	r2, r2
   19b70:	and	r2, r2, #7
   19b74:	uxtb	r2, r2
   19b78:	add	r2, r2, #48	; 0x30
   19b7c:	uxtb	r2, r2
   19b80:	strb	r2, [r3]
   19b84:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b88:	add	r3, r3, #1
   19b8c:	str	r3, [fp, #-20]	; 0xffffffec
   19b90:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19b94:	and	r3, r3, #7
   19b98:	uxtb	r3, r3
   19b9c:	add	r3, r3, #48	; 0x30
   19ba0:	strb	r3, [fp, #-38]	; 0xffffffda
   19ba4:	b	19bf8 <__assert_fail@plt+0x8898>
   19ba8:	andeq	r0, r2, r4, lsl #5
   19bac:	andeq	r0, r2, ip, lsl #5
   19bb0:	andeq	r0, r2, r8, lsl #5
   19bb4:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   19bb8:	cmp	r3, #0
   19bbc:	beq	19bf8 <__assert_fail@plt+0x8898>
   19bc0:	ldr	r2, [fp, #-20]	; 0xffffffec
   19bc4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19bc8:	cmp	r2, r3
   19bcc:	bcs	19be4 <__assert_fail@plt+0x8884>
   19bd0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19bd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19bd8:	add	r3, r2, r3
   19bdc:	mov	r2, #92	; 0x5c
   19be0:	strb	r2, [r3]
   19be4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19be8:	add	r3, r3, #1
   19bec:	str	r3, [fp, #-20]	; 0xffffffec
   19bf0:	mov	r3, #0
   19bf4:	strb	r3, [fp, #-40]	; 0xffffffd8
   19bf8:	ldr	r3, [fp, #-16]
   19bfc:	add	r2, r3, #1
   19c00:	ldr	r3, [fp, #-68]	; 0xffffffbc
   19c04:	cmp	r2, r3
   19c08:	bcs	19ce8 <__assert_fail@plt+0x8988>
   19c0c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19c10:	cmp	r3, #0
   19c14:	beq	19c94 <__assert_fail@plt+0x8934>
   19c18:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   19c1c:	eor	r3, r3, #1
   19c20:	uxtb	r3, r3
   19c24:	cmp	r3, #0
   19c28:	beq	19c94 <__assert_fail@plt+0x8934>
   19c2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19c30:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19c34:	cmp	r2, r3
   19c38:	bcs	19c50 <__assert_fail@plt+0x88f0>
   19c3c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19c40:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c44:	add	r3, r2, r3
   19c48:	mov	r2, #39	; 0x27
   19c4c:	strb	r2, [r3]
   19c50:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c54:	add	r3, r3, #1
   19c58:	str	r3, [fp, #-20]	; 0xffffffec
   19c5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19c60:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19c64:	cmp	r2, r3
   19c68:	bcs	19c80 <__assert_fail@plt+0x8920>
   19c6c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19c70:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c74:	add	r3, r2, r3
   19c78:	mov	r2, #39	; 0x27
   19c7c:	strb	r2, [r3]
   19c80:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c84:	add	r3, r3, #1
   19c88:	str	r3, [fp, #-20]	; 0xffffffec
   19c8c:	mov	r3, #0
   19c90:	strb	r3, [fp, #-35]	; 0xffffffdd
   19c94:	ldr	r2, [fp, #-20]	; 0xffffffec
   19c98:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19c9c:	cmp	r2, r3
   19ca0:	bcs	19cb8 <__assert_fail@plt+0x8958>
   19ca4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19ca8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19cac:	add	r3, r2, r3
   19cb0:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19cb4:	strb	r2, [r3]
   19cb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19cbc:	add	r3, r3, #1
   19cc0:	str	r3, [fp, #-20]	; 0xffffffec
   19cc4:	ldr	r3, [fp, #-16]
   19cc8:	add	r3, r3, #1
   19ccc:	str	r3, [fp, #-16]
   19cd0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19cd4:	ldr	r3, [fp, #-16]
   19cd8:	add	r3, r2, r3
   19cdc:	ldrb	r3, [r3]
   19ce0:	strb	r3, [fp, #-38]	; 0xffffffda
   19ce4:	b	199ec <__assert_fail@plt+0x868c>
   19ce8:	nop			; (mov r0, r0)
   19cec:	b	19eb8 <__assert_fail@plt+0x8b58>
   19cf0:	nop			; (mov r0, r0)
   19cf4:	b	19d1c <__assert_fail@plt+0x89bc>
   19cf8:	nop			; (mov r0, r0)
   19cfc:	b	19d1c <__assert_fail@plt+0x89bc>
   19d00:	nop			; (mov r0, r0)
   19d04:	b	19d1c <__assert_fail@plt+0x89bc>
   19d08:	nop			; (mov r0, r0)
   19d0c:	b	19d1c <__assert_fail@plt+0x89bc>
   19d10:	nop			; (mov r0, r0)
   19d14:	b	19d1c <__assert_fail@plt+0x89bc>
   19d18:	nop			; (mov r0, r0)
   19d1c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19d20:	eor	r3, r3, #1
   19d24:	uxtb	r3, r3
   19d28:	cmp	r3, #0
   19d2c:	bne	19d3c <__assert_fail@plt+0x89dc>
   19d30:	ldr	r3, [fp, #4]
   19d34:	cmp	r3, #2
   19d38:	bne	19d50 <__assert_fail@plt+0x89f0>
   19d3c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19d40:	eor	r3, r3, #1
   19d44:	uxtb	r3, r3
   19d48:	cmp	r3, #0
   19d4c:	bne	19d90 <__assert_fail@plt+0x8a30>
   19d50:	ldr	r3, [fp, #12]
   19d54:	cmp	r3, #0
   19d58:	beq	19d90 <__assert_fail@plt+0x8a30>
   19d5c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19d60:	lsr	r3, r3, #5
   19d64:	uxtb	r3, r3
   19d68:	lsl	r3, r3, #2
   19d6c:	ldr	r2, [fp, #12]
   19d70:	add	r3, r2, r3
   19d74:	ldr	r2, [r3]
   19d78:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19d7c:	and	r3, r3, #31
   19d80:	lsr	r3, r2, r3
   19d84:	and	r3, r3, #1
   19d88:	cmp	r3, #0
   19d8c:	bne	19da4 <__assert_fail@plt+0x8a44>
   19d90:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   19d94:	eor	r3, r3, #1
   19d98:	uxtb	r3, r3
   19d9c:	cmp	r3, #0
   19da0:	bne	19eb4 <__assert_fail@plt+0x8b54>
   19da4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19da8:	cmp	r3, #0
   19dac:	bne	1a18c <__assert_fail@plt+0x8e2c>
   19db0:	mov	r3, #1
   19db4:	strb	r3, [fp, #-41]	; 0xffffffd7
   19db8:	ldr	r3, [fp, #4]
   19dbc:	cmp	r3, #2
   19dc0:	bne	19e70 <__assert_fail@plt+0x8b10>
   19dc4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19dc8:	eor	r3, r3, #1
   19dcc:	uxtb	r3, r3
   19dd0:	cmp	r3, #0
   19dd4:	beq	19e70 <__assert_fail@plt+0x8b10>
   19dd8:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ddc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19de0:	cmp	r2, r3
   19de4:	bcs	19dfc <__assert_fail@plt+0x8a9c>
   19de8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19dec:	ldr	r3, [fp, #-20]	; 0xffffffec
   19df0:	add	r3, r2, r3
   19df4:	mov	r2, #39	; 0x27
   19df8:	strb	r2, [r3]
   19dfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e00:	add	r3, r3, #1
   19e04:	str	r3, [fp, #-20]	; 0xffffffec
   19e08:	ldr	r2, [fp, #-20]	; 0xffffffec
   19e0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19e10:	cmp	r2, r3
   19e14:	bcs	19e2c <__assert_fail@plt+0x8acc>
   19e18:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19e1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e20:	add	r3, r2, r3
   19e24:	mov	r2, #36	; 0x24
   19e28:	strb	r2, [r3]
   19e2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e30:	add	r3, r3, #1
   19e34:	str	r3, [fp, #-20]	; 0xffffffec
   19e38:	ldr	r2, [fp, #-20]	; 0xffffffec
   19e3c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19e40:	cmp	r2, r3
   19e44:	bcs	19e5c <__assert_fail@plt+0x8afc>
   19e48:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19e4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e50:	add	r3, r2, r3
   19e54:	mov	r2, #39	; 0x27
   19e58:	strb	r2, [r3]
   19e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e60:	add	r3, r3, #1
   19e64:	str	r3, [fp, #-20]	; 0xffffffec
   19e68:	mov	r3, #1
   19e6c:	strb	r3, [fp, #-35]	; 0xffffffdd
   19e70:	ldr	r2, [fp, #-20]	; 0xffffffec
   19e74:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19e78:	cmp	r2, r3
   19e7c:	bcs	19e94 <__assert_fail@plt+0x8b34>
   19e80:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19e84:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e88:	add	r3, r2, r3
   19e8c:	mov	r2, #92	; 0x5c
   19e90:	strb	r2, [r3]
   19e94:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e98:	add	r3, r3, #1
   19e9c:	str	r3, [fp, #-20]	; 0xffffffec
   19ea0:	b	19eb8 <__assert_fail@plt+0x8b58>
   19ea4:	nop			; (mov r0, r0)
   19ea8:	b	19eb8 <__assert_fail@plt+0x8b58>
   19eac:	nop			; (mov r0, r0)
   19eb0:	b	19eb8 <__assert_fail@plt+0x8b58>
   19eb4:	nop			; (mov r0, r0)
   19eb8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19ebc:	cmp	r3, #0
   19ec0:	beq	19f40 <__assert_fail@plt+0x8be0>
   19ec4:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   19ec8:	eor	r3, r3, #1
   19ecc:	uxtb	r3, r3
   19ed0:	cmp	r3, #0
   19ed4:	beq	19f40 <__assert_fail@plt+0x8be0>
   19ed8:	ldr	r2, [fp, #-20]	; 0xffffffec
   19edc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19ee0:	cmp	r2, r3
   19ee4:	bcs	19efc <__assert_fail@plt+0x8b9c>
   19ee8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19eec:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ef0:	add	r3, r2, r3
   19ef4:	mov	r2, #39	; 0x27
   19ef8:	strb	r2, [r3]
   19efc:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f00:	add	r3, r3, #1
   19f04:	str	r3, [fp, #-20]	; 0xffffffec
   19f08:	ldr	r2, [fp, #-20]	; 0xffffffec
   19f0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19f10:	cmp	r2, r3
   19f14:	bcs	19f2c <__assert_fail@plt+0x8bcc>
   19f18:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19f1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f20:	add	r3, r2, r3
   19f24:	mov	r2, #39	; 0x27
   19f28:	strb	r2, [r3]
   19f2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f30:	add	r3, r3, #1
   19f34:	str	r3, [fp, #-20]	; 0xffffffec
   19f38:	mov	r3, #0
   19f3c:	strb	r3, [fp, #-35]	; 0xffffffdd
   19f40:	ldr	r2, [fp, #-20]	; 0xffffffec
   19f44:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19f48:	cmp	r2, r3
   19f4c:	bcs	19f64 <__assert_fail@plt+0x8c04>
   19f50:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19f54:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f58:	add	r3, r2, r3
   19f5c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19f60:	strb	r2, [r3]
   19f64:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f68:	add	r3, r3, #1
   19f6c:	str	r3, [fp, #-20]	; 0xffffffec
   19f70:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   19f74:	eor	r3, r3, #1
   19f78:	uxtb	r3, r3
   19f7c:	cmp	r3, #0
   19f80:	beq	19f8c <__assert_fail@plt+0x8c2c>
   19f84:	mov	r3, #0
   19f88:	strb	r3, [fp, #-37]	; 0xffffffdb
   19f8c:	ldr	r3, [fp, #-16]
   19f90:	add	r3, r3, #1
   19f94:	str	r3, [fp, #-16]
   19f98:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19f9c:	cmn	r3, #1
   19fa0:	bne	19fc8 <__assert_fail@plt+0x8c68>
   19fa4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19fa8:	ldr	r3, [fp, #-16]
   19fac:	add	r3, r2, r3
   19fb0:	ldrb	r3, [r3]
   19fb4:	cmp	r3, #0
   19fb8:	movne	r3, #1
   19fbc:	moveq	r3, #0
   19fc0:	uxtb	r3, r3
   19fc4:	b	19fe0 <__assert_fail@plt+0x8c80>
   19fc8:	ldr	r2, [fp, #-16]
   19fcc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19fd0:	cmp	r2, r3
   19fd4:	movne	r3, #1
   19fd8:	moveq	r3, #0
   19fdc:	uxtb	r3, r3
   19fe0:	cmp	r3, #0
   19fe4:	bne	18e0c <__assert_fail@plt+0x7aac>
   19fe8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19fec:	cmp	r3, #0
   19ff0:	bne	1a00c <__assert_fail@plt+0x8cac>
   19ff4:	ldr	r3, [fp, #4]
   19ff8:	cmp	r3, #2
   19ffc:	bne	1a00c <__assert_fail@plt+0x8cac>
   1a000:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a004:	cmp	r3, #0
   1a008:	bne	1a194 <__assert_fail@plt+0x8e34>
   1a00c:	ldr	r3, [fp, #4]
   1a010:	cmp	r3, #2
   1a014:	bne	1a0b4 <__assert_fail@plt+0x8d54>
   1a018:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a01c:	eor	r3, r3, #1
   1a020:	uxtb	r3, r3
   1a024:	cmp	r3, #0
   1a028:	beq	1a0b4 <__assert_fail@plt+0x8d54>
   1a02c:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   1a030:	cmp	r3, #0
   1a034:	beq	1a0b4 <__assert_fail@plt+0x8d54>
   1a038:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1a03c:	cmp	r3, #0
   1a040:	beq	1a088 <__assert_fail@plt+0x8d28>
   1a044:	ldr	r3, [fp, #20]
   1a048:	str	r3, [sp, #16]
   1a04c:	ldr	r3, [fp, #16]
   1a050:	str	r3, [sp, #12]
   1a054:	ldr	r3, [fp, #12]
   1a058:	str	r3, [sp, #8]
   1a05c:	ldr	r3, [fp, #8]
   1a060:	str	r3, [sp, #4]
   1a064:	mov	r3, #5
   1a068:	str	r3, [sp]
   1a06c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a070:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a074:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a078:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1a07c:	bl	18b5c <__assert_fail@plt+0x77fc>
   1a080:	mov	r3, r0
   1a084:	b	1a1fc <__assert_fail@plt+0x8e9c>
   1a088:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a08c:	cmp	r3, #0
   1a090:	bne	1a0b4 <__assert_fail@plt+0x8d54>
   1a094:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a098:	cmp	r3, #0
   1a09c:	beq	1a0b4 <__assert_fail@plt+0x8d54>
   1a0a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a0a4:	str	r3, [fp, #-92]	; 0xffffffa4
   1a0a8:	mov	r3, #0
   1a0ac:	str	r3, [fp, #-20]	; 0xffffffec
   1a0b0:	b	18be8 <__assert_fail@plt+0x7888>
   1a0b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a0b8:	cmp	r3, #0
   1a0bc:	beq	1a128 <__assert_fail@plt+0x8dc8>
   1a0c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a0c4:	eor	r3, r3, #1
   1a0c8:	uxtb	r3, r3
   1a0cc:	cmp	r3, #0
   1a0d0:	beq	1a128 <__assert_fail@plt+0x8dc8>
   1a0d4:	b	1a118 <__assert_fail@plt+0x8db8>
   1a0d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a0dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a0e0:	cmp	r2, r3
   1a0e4:	bcs	1a100 <__assert_fail@plt+0x8da0>
   1a0e8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a0ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0f0:	add	r3, r2, r3
   1a0f4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a0f8:	ldrb	r2, [r2]
   1a0fc:	strb	r2, [r3]
   1a100:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a104:	add	r3, r3, #1
   1a108:	str	r3, [fp, #-20]	; 0xffffffec
   1a10c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a110:	add	r3, r3, #1
   1a114:	str	r3, [fp, #-28]	; 0xffffffe4
   1a118:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a11c:	ldrb	r3, [r3]
   1a120:	cmp	r3, #0
   1a124:	bne	1a0d8 <__assert_fail@plt+0x8d78>
   1a128:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a12c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a130:	cmp	r2, r3
   1a134:	bcs	1a14c <__assert_fail@plt+0x8dec>
   1a138:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a13c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a140:	add	r3, r2, r3
   1a144:	mov	r2, #0
   1a148:	strb	r2, [r3]
   1a14c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a150:	b	1a1fc <__assert_fail@plt+0x8e9c>
   1a154:	nop			; (mov r0, r0)
   1a158:	b	1a198 <__assert_fail@plt+0x8e38>
   1a15c:	nop			; (mov r0, r0)
   1a160:	b	1a198 <__assert_fail@plt+0x8e38>
   1a164:	nop			; (mov r0, r0)
   1a168:	b	1a198 <__assert_fail@plt+0x8e38>
   1a16c:	nop			; (mov r0, r0)
   1a170:	b	1a198 <__assert_fail@plt+0x8e38>
   1a174:	nop			; (mov r0, r0)
   1a178:	b	1a198 <__assert_fail@plt+0x8e38>
   1a17c:	nop			; (mov r0, r0)
   1a180:	b	1a198 <__assert_fail@plt+0x8e38>
   1a184:	nop			; (mov r0, r0)
   1a188:	b	1a198 <__assert_fail@plt+0x8e38>
   1a18c:	nop			; (mov r0, r0)
   1a190:	b	1a198 <__assert_fail@plt+0x8e38>
   1a194:	nop			; (mov r0, r0)
   1a198:	ldr	r3, [fp, #4]
   1a19c:	cmp	r3, #2
   1a1a0:	bne	1a1b8 <__assert_fail@plt+0x8e58>
   1a1a4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1a1a8:	cmp	r3, #0
   1a1ac:	beq	1a1b8 <__assert_fail@plt+0x8e58>
   1a1b0:	mov	r3, #4
   1a1b4:	str	r3, [fp, #4]
   1a1b8:	ldr	r3, [fp, #8]
   1a1bc:	bic	r3, r3, #2
   1a1c0:	ldr	r2, [fp, #20]
   1a1c4:	str	r2, [sp, #16]
   1a1c8:	ldr	r2, [fp, #16]
   1a1cc:	str	r2, [sp, #12]
   1a1d0:	mov	r2, #0
   1a1d4:	str	r2, [sp, #8]
   1a1d8:	str	r3, [sp, #4]
   1a1dc:	ldr	r3, [fp, #4]
   1a1e0:	str	r3, [sp]
   1a1e4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a1e8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a1ec:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1a1f0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1a1f4:	bl	18b5c <__assert_fail@plt+0x77fc>
   1a1f8:	mov	r3, r0
   1a1fc:	mov	r0, r3
   1a200:	sub	sp, fp, #8
   1a204:	pop	{r4, fp, pc}
   1a208:	push	{fp, lr}
   1a20c:	add	fp, sp, #4
   1a210:	sub	sp, sp, #56	; 0x38
   1a214:	str	r0, [fp, #-24]	; 0xffffffe8
   1a218:	str	r1, [fp, #-28]	; 0xffffffe4
   1a21c:	str	r2, [fp, #-32]	; 0xffffffe0
   1a220:	str	r3, [fp, #-36]	; 0xffffffdc
   1a224:	ldr	r3, [fp, #4]
   1a228:	cmp	r3, #0
   1a22c:	beq	1a238 <__assert_fail@plt+0x8ed8>
   1a230:	ldr	r3, [fp, #4]
   1a234:	b	1a23c <__assert_fail@plt+0x8edc>
   1a238:	ldr	r3, [pc, #132]	; 1a2c4 <__assert_fail@plt+0x8f64>
   1a23c:	str	r3, [fp, #-8]
   1a240:	bl	11228 <__errno_location@plt>
   1a244:	mov	r3, r0
   1a248:	ldr	r3, [r3]
   1a24c:	str	r3, [fp, #-12]
   1a250:	ldr	r3, [fp, #-8]
   1a254:	ldr	r3, [r3]
   1a258:	ldr	r2, [fp, #-8]
   1a25c:	ldr	r2, [r2, #4]
   1a260:	ldr	r1, [fp, #-8]
   1a264:	add	r1, r1, #8
   1a268:	ldr	r0, [fp, #-8]
   1a26c:	ldr	r0, [r0, #40]	; 0x28
   1a270:	ldr	ip, [fp, #-8]
   1a274:	ldr	ip, [ip, #44]	; 0x2c
   1a278:	str	ip, [sp, #16]
   1a27c:	str	r0, [sp, #12]
   1a280:	str	r1, [sp, #8]
   1a284:	str	r2, [sp, #4]
   1a288:	str	r3, [sp]
   1a28c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a290:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a294:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1a298:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a29c:	bl	18b5c <__assert_fail@plt+0x77fc>
   1a2a0:	str	r0, [fp, #-16]
   1a2a4:	bl	11228 <__errno_location@plt>
   1a2a8:	mov	r2, r0
   1a2ac:	ldr	r3, [fp, #-12]
   1a2b0:	str	r3, [r2]
   1a2b4:	ldr	r3, [fp, #-16]
   1a2b8:	mov	r0, r3
   1a2bc:	sub	sp, fp, #4
   1a2c0:	pop	{fp, pc}
   1a2c4:	ldrdeq	r1, [r3], -r4
   1a2c8:	push	{fp, lr}
   1a2cc:	add	fp, sp, #4
   1a2d0:	sub	sp, sp, #16
   1a2d4:	str	r0, [fp, #-8]
   1a2d8:	str	r1, [fp, #-12]
   1a2dc:	str	r2, [fp, #-16]
   1a2e0:	ldr	r3, [fp, #-16]
   1a2e4:	mov	r2, #0
   1a2e8:	ldr	r1, [fp, #-12]
   1a2ec:	ldr	r0, [fp, #-8]
   1a2f0:	bl	1a304 <__assert_fail@plt+0x8fa4>
   1a2f4:	mov	r3, r0
   1a2f8:	mov	r0, r3
   1a2fc:	sub	sp, fp, #4
   1a300:	pop	{fp, pc}
   1a304:	push	{fp, lr}
   1a308:	add	fp, sp, #4
   1a30c:	sub	sp, sp, #64	; 0x40
   1a310:	str	r0, [fp, #-32]	; 0xffffffe0
   1a314:	str	r1, [fp, #-36]	; 0xffffffdc
   1a318:	str	r2, [fp, #-40]	; 0xffffffd8
   1a31c:	str	r3, [fp, #-44]	; 0xffffffd4
   1a320:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a324:	cmp	r3, #0
   1a328:	beq	1a334 <__assert_fail@plt+0x8fd4>
   1a32c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a330:	b	1a338 <__assert_fail@plt+0x8fd8>
   1a334:	ldr	r3, [pc, #292]	; 1a460 <__assert_fail@plt+0x9100>
   1a338:	str	r3, [fp, #-8]
   1a33c:	bl	11228 <__errno_location@plt>
   1a340:	mov	r3, r0
   1a344:	ldr	r3, [r3]
   1a348:	str	r3, [fp, #-12]
   1a34c:	ldr	r3, [fp, #-8]
   1a350:	ldr	r3, [r3, #4]
   1a354:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a358:	cmp	r2, #0
   1a35c:	moveq	r2, #1
   1a360:	movne	r2, #0
   1a364:	uxtb	r2, r2
   1a368:	orr	r3, r3, r2
   1a36c:	str	r3, [fp, #-16]
   1a370:	ldr	r3, [fp, #-8]
   1a374:	ldr	r3, [r3]
   1a378:	ldr	r2, [fp, #-8]
   1a37c:	add	r2, r2, #8
   1a380:	ldr	r1, [fp, #-8]
   1a384:	ldr	r1, [r1, #40]	; 0x28
   1a388:	ldr	r0, [fp, #-8]
   1a38c:	ldr	r0, [r0, #44]	; 0x2c
   1a390:	str	r0, [sp, #16]
   1a394:	str	r1, [sp, #12]
   1a398:	str	r2, [sp, #8]
   1a39c:	ldr	r2, [fp, #-16]
   1a3a0:	str	r2, [sp, #4]
   1a3a4:	str	r3, [sp]
   1a3a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a3ac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a3b0:	mov	r1, #0
   1a3b4:	mov	r0, #0
   1a3b8:	bl	18b5c <__assert_fail@plt+0x77fc>
   1a3bc:	mov	r3, r0
   1a3c0:	add	r3, r3, #1
   1a3c4:	str	r3, [fp, #-20]	; 0xffffffec
   1a3c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a3cc:	bl	1bbf0 <__assert_fail@plt+0xa890>
   1a3d0:	mov	r3, r0
   1a3d4:	str	r3, [fp, #-24]	; 0xffffffe8
   1a3d8:	ldr	r3, [fp, #-8]
   1a3dc:	ldr	r3, [r3]
   1a3e0:	ldr	r2, [fp, #-8]
   1a3e4:	add	r2, r2, #8
   1a3e8:	ldr	r1, [fp, #-8]
   1a3ec:	ldr	r1, [r1, #40]	; 0x28
   1a3f0:	ldr	r0, [fp, #-8]
   1a3f4:	ldr	r0, [r0, #44]	; 0x2c
   1a3f8:	str	r0, [sp, #16]
   1a3fc:	str	r1, [sp, #12]
   1a400:	str	r2, [sp, #8]
   1a404:	ldr	r2, [fp, #-16]
   1a408:	str	r2, [sp, #4]
   1a40c:	str	r3, [sp]
   1a410:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a414:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a418:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a41c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a420:	bl	18b5c <__assert_fail@plt+0x77fc>
   1a424:	bl	11228 <__errno_location@plt>
   1a428:	mov	r2, r0
   1a42c:	ldr	r3, [fp, #-12]
   1a430:	str	r3, [r2]
   1a434:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a438:	cmp	r3, #0
   1a43c:	beq	1a450 <__assert_fail@plt+0x90f0>
   1a440:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a444:	sub	r2, r3, #1
   1a448:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a44c:	str	r2, [r3]
   1a450:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a454:	mov	r0, r3
   1a458:	sub	sp, fp, #4
   1a45c:	pop	{fp, pc}
   1a460:	ldrdeq	r1, [r3], -r4
   1a464:	push	{fp, lr}
   1a468:	add	fp, sp, #4
   1a46c:	sub	sp, sp, #8
   1a470:	ldr	r3, [pc, #196]	; 1a53c <__assert_fail@plt+0x91dc>
   1a474:	ldr	r3, [r3]
   1a478:	str	r3, [fp, #-12]
   1a47c:	mov	r3, #1
   1a480:	str	r3, [fp, #-8]
   1a484:	b	1a4b0 <__assert_fail@plt+0x9150>
   1a488:	ldr	r3, [fp, #-8]
   1a48c:	lsl	r3, r3, #3
   1a490:	ldr	r2, [fp, #-12]
   1a494:	add	r3, r2, r3
   1a498:	ldr	r3, [r3, #4]
   1a49c:	mov	r0, r3
   1a4a0:	bl	1347c <__assert_fail@plt+0x211c>
   1a4a4:	ldr	r3, [fp, #-8]
   1a4a8:	add	r3, r3, #1
   1a4ac:	str	r3, [fp, #-8]
   1a4b0:	ldr	r3, [pc, #136]	; 1a540 <__assert_fail@plt+0x91e0>
   1a4b4:	ldr	r3, [r3]
   1a4b8:	ldr	r2, [fp, #-8]
   1a4bc:	cmp	r2, r3
   1a4c0:	blt	1a488 <__assert_fail@plt+0x9128>
   1a4c4:	ldr	r3, [fp, #-12]
   1a4c8:	ldr	r3, [r3, #4]
   1a4cc:	ldr	r2, [pc, #112]	; 1a544 <__assert_fail@plt+0x91e4>
   1a4d0:	cmp	r3, r2
   1a4d4:	beq	1a500 <__assert_fail@plt+0x91a0>
   1a4d8:	ldr	r3, [fp, #-12]
   1a4dc:	ldr	r3, [r3, #4]
   1a4e0:	mov	r0, r3
   1a4e4:	bl	1347c <__assert_fail@plt+0x211c>
   1a4e8:	ldr	r3, [pc, #88]	; 1a548 <__assert_fail@plt+0x91e8>
   1a4ec:	mov	r2, #256	; 0x100
   1a4f0:	str	r2, [r3]
   1a4f4:	ldr	r3, [pc, #76]	; 1a548 <__assert_fail@plt+0x91e8>
   1a4f8:	ldr	r2, [pc, #68]	; 1a544 <__assert_fail@plt+0x91e4>
   1a4fc:	str	r2, [r3, #4]
   1a500:	ldr	r3, [fp, #-12]
   1a504:	ldr	r2, [pc, #60]	; 1a548 <__assert_fail@plt+0x91e8>
   1a508:	cmp	r3, r2
   1a50c:	beq	1a524 <__assert_fail@plt+0x91c4>
   1a510:	ldr	r0, [fp, #-12]
   1a514:	bl	1347c <__assert_fail@plt+0x211c>
   1a518:	ldr	r3, [pc, #28]	; 1a53c <__assert_fail@plt+0x91dc>
   1a51c:	ldr	r2, [pc, #36]	; 1a548 <__assert_fail@plt+0x91e8>
   1a520:	str	r2, [r3]
   1a524:	ldr	r3, [pc, #20]	; 1a540 <__assert_fail@plt+0x91e0>
   1a528:	mov	r2, #1
   1a52c:	str	r2, [r3]
   1a530:	nop			; (mov r0, r0)
   1a534:	sub	sp, fp, #4
   1a538:	pop	{fp, pc}
   1a53c:	andeq	r1, r3, r0, asr r1
   1a540:	andeq	r1, r3, r4, asr #2
   1a544:	andeq	r1, r3, r4, lsl #4
   1a548:	andeq	r1, r3, r8, asr #2
   1a54c:	push	{r4, fp, lr}
   1a550:	add	fp, sp, #8
   1a554:	sub	sp, sp, #84	; 0x54
   1a558:	str	r0, [fp, #-56]	; 0xffffffc8
   1a55c:	str	r1, [fp, #-60]	; 0xffffffc4
   1a560:	str	r2, [fp, #-64]	; 0xffffffc0
   1a564:	str	r3, [fp, #-68]	; 0xffffffbc
   1a568:	bl	11228 <__errno_location@plt>
   1a56c:	mov	r3, r0
   1a570:	ldr	r3, [r3]
   1a574:	str	r3, [fp, #-24]	; 0xffffffe8
   1a578:	ldr	r3, [pc, #640]	; 1a800 <__assert_fail@plt+0x94a0>
   1a57c:	ldr	r3, [r3]
   1a580:	str	r3, [fp, #-16]
   1a584:	mvn	r3, #-2147483648	; 0x80000000
   1a588:	str	r3, [fp, #-28]	; 0xffffffe4
   1a58c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a590:	cmp	r3, #0
   1a594:	blt	1a5a8 <__assert_fail@plt+0x9248>
   1a598:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1a59c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a5a0:	cmp	r2, r3
   1a5a4:	blt	1a5ac <__assert_fail@plt+0x924c>
   1a5a8:	bl	11318 <abort@plt>
   1a5ac:	ldr	r3, [pc, #592]	; 1a804 <__assert_fail@plt+0x94a4>
   1a5b0:	ldr	r2, [r3]
   1a5b4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a5b8:	cmp	r2, r3
   1a5bc:	bgt	1a690 <__assert_fail@plt+0x9330>
   1a5c0:	ldr	r3, [fp, #-16]
   1a5c4:	ldr	r2, [pc, #572]	; 1a808 <__assert_fail@plt+0x94a8>
   1a5c8:	cmp	r3, r2
   1a5cc:	moveq	r3, #1
   1a5d0:	movne	r3, #0
   1a5d4:	strb	r3, [fp, #-29]	; 0xffffffe3
   1a5d8:	ldr	r3, [pc, #548]	; 1a804 <__assert_fail@plt+0x94a4>
   1a5dc:	ldr	r3, [r3]
   1a5e0:	str	r3, [fp, #-48]	; 0xffffffd0
   1a5e4:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1a5e8:	cmp	r3, #0
   1a5ec:	beq	1a5f8 <__assert_fail@plt+0x9298>
   1a5f0:	mov	r0, #0
   1a5f4:	b	1a5fc <__assert_fail@plt+0x929c>
   1a5f8:	ldr	r0, [fp, #-16]
   1a5fc:	ldr	r3, [pc, #512]	; 1a804 <__assert_fail@plt+0x94a4>
   1a600:	ldr	r3, [r3]
   1a604:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1a608:	sub	r3, r2, r3
   1a60c:	add	r2, r3, #1
   1a610:	sub	r1, fp, #48	; 0x30
   1a614:	mov	r3, #8
   1a618:	str	r3, [sp]
   1a61c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a620:	bl	1bf10 <__assert_fail@plt+0xabb0>
   1a624:	str	r0, [fp, #-16]
   1a628:	ldr	r2, [pc, #464]	; 1a800 <__assert_fail@plt+0x94a0>
   1a62c:	ldr	r3, [fp, #-16]
   1a630:	str	r3, [r2]
   1a634:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1a638:	cmp	r3, #0
   1a63c:	beq	1a650 <__assert_fail@plt+0x92f0>
   1a640:	ldr	r3, [fp, #-16]
   1a644:	ldr	r2, [pc, #444]	; 1a808 <__assert_fail@plt+0x94a8>
   1a648:	ldm	r2, {r0, r1}
   1a64c:	stm	r3, {r0, r1}
   1a650:	ldr	r3, [pc, #428]	; 1a804 <__assert_fail@plt+0x94a4>
   1a654:	ldr	r3, [r3]
   1a658:	lsl	r3, r3, #3
   1a65c:	ldr	r2, [fp, #-16]
   1a660:	add	r0, r2, r3
   1a664:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a668:	ldr	r3, [pc, #404]	; 1a804 <__assert_fail@plt+0x94a4>
   1a66c:	ldr	r3, [r3]
   1a670:	sub	r3, r2, r3
   1a674:	lsl	r3, r3, #3
   1a678:	mov	r2, r3
   1a67c:	mov	r1, #0
   1a680:	bl	11240 <memset@plt>
   1a684:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a688:	ldr	r2, [pc, #372]	; 1a804 <__assert_fail@plt+0x94a4>
   1a68c:	str	r3, [r2]
   1a690:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a694:	lsl	r3, r3, #3
   1a698:	ldr	r2, [fp, #-16]
   1a69c:	add	r3, r2, r3
   1a6a0:	ldr	r3, [r3]
   1a6a4:	str	r3, [fp, #-36]	; 0xffffffdc
   1a6a8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a6ac:	lsl	r3, r3, #3
   1a6b0:	ldr	r2, [fp, #-16]
   1a6b4:	add	r3, r2, r3
   1a6b8:	ldr	r3, [r3, #4]
   1a6bc:	str	r3, [fp, #-20]	; 0xffffffec
   1a6c0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a6c4:	ldr	r3, [r3, #4]
   1a6c8:	orr	r3, r3, #1
   1a6cc:	str	r3, [fp, #-40]	; 0xffffffd8
   1a6d0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a6d4:	ldr	r3, [r3]
   1a6d8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a6dc:	add	r2, r2, #8
   1a6e0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1a6e4:	ldr	r1, [r1, #40]	; 0x28
   1a6e8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a6ec:	ldr	r0, [r0, #44]	; 0x2c
   1a6f0:	str	r0, [sp, #16]
   1a6f4:	str	r1, [sp, #12]
   1a6f8:	str	r2, [sp, #8]
   1a6fc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a700:	str	r2, [sp, #4]
   1a704:	str	r3, [sp]
   1a708:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1a70c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1a710:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a714:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a718:	bl	18b5c <__assert_fail@plt+0x77fc>
   1a71c:	str	r0, [fp, #-44]	; 0xffffffd4
   1a720:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1a724:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a728:	cmp	r2, r3
   1a72c:	bhi	1a7e0 <__assert_fail@plt+0x9480>
   1a730:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a734:	lsl	r3, r3, #3
   1a738:	ldr	r2, [fp, #-16]
   1a73c:	add	r3, r2, r3
   1a740:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1a744:	add	r2, r2, #1
   1a748:	str	r2, [fp, #-36]	; 0xffffffdc
   1a74c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1a750:	str	r2, [r3]
   1a754:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a758:	ldr	r2, [pc, #172]	; 1a80c <__assert_fail@plt+0x94ac>
   1a75c:	cmp	r3, r2
   1a760:	beq	1a76c <__assert_fail@plt+0x940c>
   1a764:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a768:	bl	1347c <__assert_fail@plt+0x211c>
   1a76c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a770:	lsl	r3, r3, #3
   1a774:	ldr	r2, [fp, #-16]
   1a778:	add	r4, r2, r3
   1a77c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a780:	bl	1bbf0 <__assert_fail@plt+0xa890>
   1a784:	mov	r3, r0
   1a788:	str	r3, [fp, #-20]	; 0xffffffec
   1a78c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a790:	str	r3, [r4, #4]
   1a794:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a798:	ldr	r3, [r3]
   1a79c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a7a0:	add	r2, r2, #8
   1a7a4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1a7a8:	ldr	r1, [r1, #40]	; 0x28
   1a7ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a7b0:	ldr	r0, [r0, #44]	; 0x2c
   1a7b4:	str	r0, [sp, #16]
   1a7b8:	str	r1, [sp, #12]
   1a7bc:	str	r2, [sp, #8]
   1a7c0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a7c4:	str	r2, [sp, #4]
   1a7c8:	str	r3, [sp]
   1a7cc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1a7d0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1a7d4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a7d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a7dc:	bl	18b5c <__assert_fail@plt+0x77fc>
   1a7e0:	bl	11228 <__errno_location@plt>
   1a7e4:	mov	r2, r0
   1a7e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a7ec:	str	r3, [r2]
   1a7f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a7f4:	mov	r0, r3
   1a7f8:	sub	sp, fp, #8
   1a7fc:	pop	{r4, fp, pc}
   1a800:	andeq	r1, r3, r0, asr r1
   1a804:	andeq	r1, r3, r4, asr #2
   1a808:	andeq	r1, r3, r8, asr #2
   1a80c:	andeq	r1, r3, r4, lsl #4
   1a810:	push	{fp, lr}
   1a814:	add	fp, sp, #4
   1a818:	sub	sp, sp, #8
   1a81c:	str	r0, [fp, #-8]
   1a820:	str	r1, [fp, #-12]
   1a824:	ldr	r3, [pc, #28]	; 1a848 <__assert_fail@plt+0x94e8>
   1a828:	mvn	r2, #0
   1a82c:	ldr	r1, [fp, #-12]
   1a830:	ldr	r0, [fp, #-8]
   1a834:	bl	1a54c <__assert_fail@plt+0x91ec>
   1a838:	mov	r3, r0
   1a83c:	mov	r0, r3
   1a840:	sub	sp, fp, #4
   1a844:	pop	{fp, pc}
   1a848:	ldrdeq	r1, [r3], -r4
   1a84c:	push	{fp, lr}
   1a850:	add	fp, sp, #4
   1a854:	sub	sp, sp, #16
   1a858:	str	r0, [fp, #-8]
   1a85c:	str	r1, [fp, #-12]
   1a860:	str	r2, [fp, #-16]
   1a864:	ldr	r3, [pc, #28]	; 1a888 <__assert_fail@plt+0x9528>
   1a868:	ldr	r2, [fp, #-16]
   1a86c:	ldr	r1, [fp, #-12]
   1a870:	ldr	r0, [fp, #-8]
   1a874:	bl	1a54c <__assert_fail@plt+0x91ec>
   1a878:	mov	r3, r0
   1a87c:	mov	r0, r3
   1a880:	sub	sp, fp, #4
   1a884:	pop	{fp, pc}
   1a888:	ldrdeq	r1, [r3], -r4
   1a88c:	push	{fp, lr}
   1a890:	add	fp, sp, #4
   1a894:	sub	sp, sp, #8
   1a898:	str	r0, [fp, #-8]
   1a89c:	ldr	r1, [fp, #-8]
   1a8a0:	mov	r0, #0
   1a8a4:	bl	1a810 <__assert_fail@plt+0x94b0>
   1a8a8:	mov	r3, r0
   1a8ac:	mov	r0, r3
   1a8b0:	sub	sp, fp, #4
   1a8b4:	pop	{fp, pc}
   1a8b8:	push	{fp, lr}
   1a8bc:	add	fp, sp, #4
   1a8c0:	sub	sp, sp, #8
   1a8c4:	str	r0, [fp, #-8]
   1a8c8:	str	r1, [fp, #-12]
   1a8cc:	ldr	r2, [fp, #-12]
   1a8d0:	ldr	r1, [fp, #-8]
   1a8d4:	mov	r0, #0
   1a8d8:	bl	1a84c <__assert_fail@plt+0x94ec>
   1a8dc:	mov	r3, r0
   1a8e0:	mov	r0, r3
   1a8e4:	sub	sp, fp, #4
   1a8e8:	pop	{fp, pc}
   1a8ec:	push	{fp, lr}
   1a8f0:	add	fp, sp, #4
   1a8f4:	sub	sp, sp, #64	; 0x40
   1a8f8:	str	r0, [fp, #-56]	; 0xffffffc8
   1a8fc:	str	r1, [fp, #-60]	; 0xffffffc4
   1a900:	str	r2, [fp, #-64]	; 0xffffffc0
   1a904:	sub	r3, fp, #52	; 0x34
   1a908:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1a90c:	mov	r0, r3
   1a910:	bl	189f8 <__assert_fail@plt+0x7698>
   1a914:	sub	r3, fp, #52	; 0x34
   1a918:	mvn	r2, #0
   1a91c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1a920:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a924:	bl	1a54c <__assert_fail@plt+0x91ec>
   1a928:	mov	r3, r0
   1a92c:	mov	r0, r3
   1a930:	sub	sp, fp, #4
   1a934:	pop	{fp, pc}
   1a938:	push	{fp, lr}
   1a93c:	add	fp, sp, #4
   1a940:	sub	sp, sp, #64	; 0x40
   1a944:	str	r0, [fp, #-56]	; 0xffffffc8
   1a948:	str	r1, [fp, #-60]	; 0xffffffc4
   1a94c:	str	r2, [fp, #-64]	; 0xffffffc0
   1a950:	str	r3, [fp, #-68]	; 0xffffffbc
   1a954:	sub	r3, fp, #52	; 0x34
   1a958:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1a95c:	mov	r0, r3
   1a960:	bl	189f8 <__assert_fail@plt+0x7698>
   1a964:	sub	r3, fp, #52	; 0x34
   1a968:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a96c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1a970:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a974:	bl	1a54c <__assert_fail@plt+0x91ec>
   1a978:	mov	r3, r0
   1a97c:	mov	r0, r3
   1a980:	sub	sp, fp, #4
   1a984:	pop	{fp, pc}
   1a988:	push	{fp, lr}
   1a98c:	add	fp, sp, #4
   1a990:	sub	sp, sp, #8
   1a994:	str	r0, [fp, #-8]
   1a998:	str	r1, [fp, #-12]
   1a99c:	ldr	r2, [fp, #-12]
   1a9a0:	ldr	r1, [fp, #-8]
   1a9a4:	mov	r0, #0
   1a9a8:	bl	1a8ec <__assert_fail@plt+0x958c>
   1a9ac:	mov	r3, r0
   1a9b0:	mov	r0, r3
   1a9b4:	sub	sp, fp, #4
   1a9b8:	pop	{fp, pc}
   1a9bc:	push	{fp, lr}
   1a9c0:	add	fp, sp, #4
   1a9c4:	sub	sp, sp, #16
   1a9c8:	str	r0, [fp, #-8]
   1a9cc:	str	r1, [fp, #-12]
   1a9d0:	str	r2, [fp, #-16]
   1a9d4:	ldr	r3, [fp, #-16]
   1a9d8:	ldr	r2, [fp, #-12]
   1a9dc:	ldr	r1, [fp, #-8]
   1a9e0:	mov	r0, #0
   1a9e4:	bl	1a938 <__assert_fail@plt+0x95d8>
   1a9e8:	mov	r3, r0
   1a9ec:	mov	r0, r3
   1a9f0:	sub	sp, fp, #4
   1a9f4:	pop	{fp, pc}
   1a9f8:	push	{fp, lr}
   1a9fc:	add	fp, sp, #4
   1aa00:	sub	sp, sp, #64	; 0x40
   1aa04:	str	r0, [fp, #-56]	; 0xffffffc8
   1aa08:	str	r1, [fp, #-60]	; 0xffffffc4
   1aa0c:	mov	r3, r2
   1aa10:	strb	r3, [fp, #-61]	; 0xffffffc3
   1aa14:	ldr	r3, [pc, #84]	; 1aa70 <__assert_fail@plt+0x9710>
   1aa18:	sub	ip, fp, #52	; 0x34
   1aa1c:	mov	lr, r3
   1aa20:	ldm	lr!, {r0, r1, r2, r3}
   1aa24:	stmia	ip!, {r0, r1, r2, r3}
   1aa28:	ldm	lr!, {r0, r1, r2, r3}
   1aa2c:	stmia	ip!, {r0, r1, r2, r3}
   1aa30:	ldm	lr, {r0, r1, r2, r3}
   1aa34:	stm	ip, {r0, r1, r2, r3}
   1aa38:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   1aa3c:	sub	r3, fp, #52	; 0x34
   1aa40:	mov	r2, #1
   1aa44:	mov	r0, r3
   1aa48:	bl	18864 <__assert_fail@plt+0x7504>
   1aa4c:	sub	r3, fp, #52	; 0x34
   1aa50:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1aa54:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1aa58:	mov	r0, #0
   1aa5c:	bl	1a54c <__assert_fail@plt+0x91ec>
   1aa60:	mov	r3, r0
   1aa64:	mov	r0, r3
   1aa68:	sub	sp, fp, #4
   1aa6c:	pop	{fp, pc}
   1aa70:	ldrdeq	r1, [r3], -r4
   1aa74:	push	{fp, lr}
   1aa78:	add	fp, sp, #4
   1aa7c:	sub	sp, sp, #8
   1aa80:	str	r0, [fp, #-8]
   1aa84:	mov	r3, r1
   1aa88:	strb	r3, [fp, #-9]
   1aa8c:	ldrb	r3, [fp, #-9]
   1aa90:	mov	r2, r3
   1aa94:	mvn	r1, #0
   1aa98:	ldr	r0, [fp, #-8]
   1aa9c:	bl	1a9f8 <__assert_fail@plt+0x9698>
   1aaa0:	mov	r3, r0
   1aaa4:	mov	r0, r3
   1aaa8:	sub	sp, fp, #4
   1aaac:	pop	{fp, pc}
   1aab0:	push	{fp, lr}
   1aab4:	add	fp, sp, #4
   1aab8:	sub	sp, sp, #8
   1aabc:	str	r0, [fp, #-8]
   1aac0:	mov	r1, #58	; 0x3a
   1aac4:	ldr	r0, [fp, #-8]
   1aac8:	bl	1aa74 <__assert_fail@plt+0x9714>
   1aacc:	mov	r3, r0
   1aad0:	mov	r0, r3
   1aad4:	sub	sp, fp, #4
   1aad8:	pop	{fp, pc}
   1aadc:	push	{fp, lr}
   1aae0:	add	fp, sp, #4
   1aae4:	sub	sp, sp, #8
   1aae8:	str	r0, [fp, #-8]
   1aaec:	str	r1, [fp, #-12]
   1aaf0:	mov	r2, #58	; 0x3a
   1aaf4:	ldr	r1, [fp, #-12]
   1aaf8:	ldr	r0, [fp, #-8]
   1aafc:	bl	1a9f8 <__assert_fail@plt+0x9698>
   1ab00:	mov	r3, r0
   1ab04:	mov	r0, r3
   1ab08:	sub	sp, fp, #4
   1ab0c:	pop	{fp, pc}
   1ab10:	push	{fp, lr}
   1ab14:	add	fp, sp, #4
   1ab18:	sub	sp, sp, #112	; 0x70
   1ab1c:	str	r0, [fp, #-56]	; 0xffffffc8
   1ab20:	str	r1, [fp, #-60]	; 0xffffffc4
   1ab24:	str	r2, [fp, #-64]	; 0xffffffc0
   1ab28:	sub	r3, fp, #116	; 0x74
   1ab2c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1ab30:	mov	r0, r3
   1ab34:	bl	189f8 <__assert_fail@plt+0x7698>
   1ab38:	sub	ip, fp, #52	; 0x34
   1ab3c:	sub	lr, fp, #116	; 0x74
   1ab40:	ldm	lr!, {r0, r1, r2, r3}
   1ab44:	stmia	ip!, {r0, r1, r2, r3}
   1ab48:	ldm	lr!, {r0, r1, r2, r3}
   1ab4c:	stmia	ip!, {r0, r1, r2, r3}
   1ab50:	ldm	lr, {r0, r1, r2, r3}
   1ab54:	stm	ip, {r0, r1, r2, r3}
   1ab58:	sub	r3, fp, #52	; 0x34
   1ab5c:	mov	r2, #1
   1ab60:	mov	r1, #58	; 0x3a
   1ab64:	mov	r0, r3
   1ab68:	bl	18864 <__assert_fail@plt+0x7504>
   1ab6c:	sub	r3, fp, #52	; 0x34
   1ab70:	mvn	r2, #0
   1ab74:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1ab78:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ab7c:	bl	1a54c <__assert_fail@plt+0x91ec>
   1ab80:	mov	r3, r0
   1ab84:	mov	r0, r3
   1ab88:	sub	sp, fp, #4
   1ab8c:	pop	{fp, pc}
   1ab90:	push	{fp, lr}
   1ab94:	add	fp, sp, #4
   1ab98:	sub	sp, sp, #24
   1ab9c:	str	r0, [fp, #-8]
   1aba0:	str	r1, [fp, #-12]
   1aba4:	str	r2, [fp, #-16]
   1aba8:	str	r3, [fp, #-20]	; 0xffffffec
   1abac:	mvn	r3, #0
   1abb0:	str	r3, [sp]
   1abb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1abb8:	ldr	r2, [fp, #-16]
   1abbc:	ldr	r1, [fp, #-12]
   1abc0:	ldr	r0, [fp, #-8]
   1abc4:	bl	1abd8 <__assert_fail@plt+0x9878>
   1abc8:	mov	r3, r0
   1abcc:	mov	r0, r3
   1abd0:	sub	sp, fp, #4
   1abd4:	pop	{fp, pc}
   1abd8:	push	{fp, lr}
   1abdc:	add	fp, sp, #4
   1abe0:	sub	sp, sp, #64	; 0x40
   1abe4:	str	r0, [fp, #-56]	; 0xffffffc8
   1abe8:	str	r1, [fp, #-60]	; 0xffffffc4
   1abec:	str	r2, [fp, #-64]	; 0xffffffc0
   1abf0:	str	r3, [fp, #-68]	; 0xffffffbc
   1abf4:	ldr	r3, [pc, #84]	; 1ac50 <__assert_fail@plt+0x98f0>
   1abf8:	sub	ip, fp, #52	; 0x34
   1abfc:	mov	lr, r3
   1ac00:	ldm	lr!, {r0, r1, r2, r3}
   1ac04:	stmia	ip!, {r0, r1, r2, r3}
   1ac08:	ldm	lr!, {r0, r1, r2, r3}
   1ac0c:	stmia	ip!, {r0, r1, r2, r3}
   1ac10:	ldm	lr, {r0, r1, r2, r3}
   1ac14:	stm	ip, {r0, r1, r2, r3}
   1ac18:	sub	r3, fp, #52	; 0x34
   1ac1c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1ac20:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1ac24:	mov	r0, r3
   1ac28:	bl	1897c <__assert_fail@plt+0x761c>
   1ac2c:	sub	r3, fp, #52	; 0x34
   1ac30:	ldr	r2, [fp, #4]
   1ac34:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1ac38:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ac3c:	bl	1a54c <__assert_fail@plt+0x91ec>
   1ac40:	mov	r3, r0
   1ac44:	mov	r0, r3
   1ac48:	sub	sp, fp, #4
   1ac4c:	pop	{fp, pc}
   1ac50:	ldrdeq	r1, [r3], -r4
   1ac54:	push	{fp, lr}
   1ac58:	add	fp, sp, #4
   1ac5c:	sub	sp, sp, #16
   1ac60:	str	r0, [fp, #-8]
   1ac64:	str	r1, [fp, #-12]
   1ac68:	str	r2, [fp, #-16]
   1ac6c:	ldr	r3, [fp, #-16]
   1ac70:	ldr	r2, [fp, #-12]
   1ac74:	ldr	r1, [fp, #-8]
   1ac78:	mov	r0, #0
   1ac7c:	bl	1ab90 <__assert_fail@plt+0x9830>
   1ac80:	mov	r3, r0
   1ac84:	mov	r0, r3
   1ac88:	sub	sp, fp, #4
   1ac8c:	pop	{fp, pc}
   1ac90:	push	{fp, lr}
   1ac94:	add	fp, sp, #4
   1ac98:	sub	sp, sp, #24
   1ac9c:	str	r0, [fp, #-8]
   1aca0:	str	r1, [fp, #-12]
   1aca4:	str	r2, [fp, #-16]
   1aca8:	str	r3, [fp, #-20]	; 0xffffffec
   1acac:	ldr	r3, [fp, #-20]	; 0xffffffec
   1acb0:	str	r3, [sp]
   1acb4:	ldr	r3, [fp, #-16]
   1acb8:	ldr	r2, [fp, #-12]
   1acbc:	ldr	r1, [fp, #-8]
   1acc0:	mov	r0, #0
   1acc4:	bl	1abd8 <__assert_fail@plt+0x9878>
   1acc8:	mov	r3, r0
   1accc:	mov	r0, r3
   1acd0:	sub	sp, fp, #4
   1acd4:	pop	{fp, pc}
   1acd8:	push	{fp, lr}
   1acdc:	add	fp, sp, #4
   1ace0:	sub	sp, sp, #16
   1ace4:	str	r0, [fp, #-8]
   1ace8:	str	r1, [fp, #-12]
   1acec:	str	r2, [fp, #-16]
   1acf0:	ldr	r3, [pc, #28]	; 1ad14 <__assert_fail@plt+0x99b4>
   1acf4:	ldr	r2, [fp, #-16]
   1acf8:	ldr	r1, [fp, #-12]
   1acfc:	ldr	r0, [fp, #-8]
   1ad00:	bl	1a54c <__assert_fail@plt+0x91ec>
   1ad04:	mov	r3, r0
   1ad08:	mov	r0, r3
   1ad0c:	sub	sp, fp, #4
   1ad10:	pop	{fp, pc}
   1ad14:	andeq	r1, r3, r4, asr r1
   1ad18:	push	{fp, lr}
   1ad1c:	add	fp, sp, #4
   1ad20:	sub	sp, sp, #8
   1ad24:	str	r0, [fp, #-8]
   1ad28:	str	r1, [fp, #-12]
   1ad2c:	ldr	r2, [fp, #-12]
   1ad30:	ldr	r1, [fp, #-8]
   1ad34:	mov	r0, #0
   1ad38:	bl	1acd8 <__assert_fail@plt+0x9978>
   1ad3c:	mov	r3, r0
   1ad40:	mov	r0, r3
   1ad44:	sub	sp, fp, #4
   1ad48:	pop	{fp, pc}
   1ad4c:	push	{fp, lr}
   1ad50:	add	fp, sp, #4
   1ad54:	sub	sp, sp, #8
   1ad58:	str	r0, [fp, #-8]
   1ad5c:	str	r1, [fp, #-12]
   1ad60:	mvn	r2, #0
   1ad64:	ldr	r1, [fp, #-12]
   1ad68:	ldr	r0, [fp, #-8]
   1ad6c:	bl	1acd8 <__assert_fail@plt+0x9978>
   1ad70:	mov	r3, r0
   1ad74:	mov	r0, r3
   1ad78:	sub	sp, fp, #4
   1ad7c:	pop	{fp, pc}
   1ad80:	push	{fp, lr}
   1ad84:	add	fp, sp, #4
   1ad88:	sub	sp, sp, #8
   1ad8c:	str	r0, [fp, #-8]
   1ad90:	ldr	r1, [fp, #-8]
   1ad94:	mov	r0, #0
   1ad98:	bl	1ad4c <__assert_fail@plt+0x99ec>
   1ad9c:	mov	r3, r0
   1ada0:	mov	r0, r3
   1ada4:	sub	sp, fp, #4
   1ada8:	pop	{fp, pc}
   1adac:	push	{fp, lr}
   1adb0:	add	fp, sp, #4
   1adb4:	sub	sp, sp, #112	; 0x70
   1adb8:	str	r0, [fp, #-112]	; 0xffffff90
   1adbc:	sub	r3, fp, #108	; 0x6c
   1adc0:	mov	r1, r3
   1adc4:	ldr	r0, [pc, #60]	; 1ae08 <__assert_fail@plt+0x9aa8>
   1adc8:	bl	1ef04 <__assert_fail@plt+0xdba4>
   1adcc:	mov	r3, r0
   1add0:	cmp	r3, #0
   1add4:	beq	1ade0 <__assert_fail@plt+0x9a80>
   1add8:	mov	r3, #0
   1addc:	b	1adfc <__assert_fail@plt+0x9a9c>
   1ade0:	ldrd	r2, [fp, #-12]
   1ade4:	ldr	r1, [fp, #-112]	; 0xffffff90
   1ade8:	strd	r2, [r1]
   1adec:	ldrd	r2, [fp, #-108]	; 0xffffff94
   1adf0:	ldr	r1, [fp, #-112]	; 0xffffff90
   1adf4:	strd	r2, [r1, #8]
   1adf8:	ldr	r3, [fp, #-112]	; 0xffffff90
   1adfc:	mov	r0, r3
   1ae00:	sub	sp, fp, #4
   1ae04:	pop	{fp, pc}
   1ae08:	muleq	r2, r0, r2
   1ae0c:	push	{fp, lr}
   1ae10:	add	fp, sp, #4
   1ae14:	sub	sp, sp, #16
   1ae18:	str	r0, [fp, #-16]
   1ae1c:	ldr	r3, [fp, #-16]
   1ae20:	cmp	r3, #0
   1ae24:	blt	1ae70 <__assert_fail@plt+0x9b10>
   1ae28:	ldr	r3, [fp, #-16]
   1ae2c:	cmp	r3, #2
   1ae30:	bgt	1ae70 <__assert_fail@plt+0x9b10>
   1ae34:	ldr	r0, [fp, #-16]
   1ae38:	bl	1e180 <__assert_fail@plt+0xce20>
   1ae3c:	str	r0, [fp, #-8]
   1ae40:	bl	11228 <__errno_location@plt>
   1ae44:	mov	r3, r0
   1ae48:	ldr	r3, [r3]
   1ae4c:	str	r3, [fp, #-12]
   1ae50:	ldr	r0, [fp, #-16]
   1ae54:	bl	11324 <close@plt>
   1ae58:	bl	11228 <__errno_location@plt>
   1ae5c:	mov	r2, r0
   1ae60:	ldr	r3, [fp, #-12]
   1ae64:	str	r3, [r2]
   1ae68:	ldr	r3, [fp, #-8]
   1ae6c:	str	r3, [fp, #-16]
   1ae70:	ldr	r3, [fp, #-16]
   1ae74:	mov	r0, r3
   1ae78:	sub	sp, fp, #4
   1ae7c:	pop	{fp, pc}
   1ae80:	push	{fp, lr}
   1ae84:	add	fp, sp, #4
   1ae88:	sub	sp, sp, #96	; 0x60
   1ae8c:	str	r0, [fp, #-80]	; 0xffffffb0
   1ae90:	str	r1, [fp, #-84]	; 0xffffffac
   1ae94:	str	r2, [fp, #-88]	; 0xffffffa8
   1ae98:	str	r3, [fp, #-92]	; 0xffffffa4
   1ae9c:	mov	r3, #0
   1aea0:	str	r3, [fp, #-16]
   1aea4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1aea8:	ldr	r3, [r3]
   1aeac:	str	r3, [fp, #-20]	; 0xffffffec
   1aeb0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1aeb4:	cmp	r3, #0
   1aeb8:	beq	1aec8 <__assert_fail@plt+0x9b68>
   1aebc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1aec0:	ldr	r3, [r3]
   1aec4:	b	1aecc <__assert_fail@plt+0x9b6c>
   1aec8:	mvn	r3, #0
   1aecc:	str	r3, [fp, #-24]	; 0xffffffe8
   1aed0:	mov	r3, #0
   1aed4:	str	r3, [fp, #-8]
   1aed8:	ldr	r3, [fp, #4]
   1aedc:	cmp	r3, #0
   1aee0:	beq	1aef0 <__assert_fail@plt+0x9b90>
   1aee4:	ldr	r3, [fp, #4]
   1aee8:	mov	r2, #0
   1aeec:	str	r2, [r3]
   1aef0:	ldr	r3, [fp, #8]
   1aef4:	cmp	r3, #0
   1aef8:	beq	1af08 <__assert_fail@plt+0x9ba8>
   1aefc:	ldr	r3, [fp, #8]
   1af00:	mov	r2, #0
   1af04:	str	r2, [r3]
   1af08:	mov	r3, #0
   1af0c:	str	r3, [fp, #-12]
   1af10:	ldr	r3, [fp, #-84]	; 0xffffffac
   1af14:	cmp	r3, #0
   1af18:	bne	1af40 <__assert_fail@plt+0x9be0>
   1af1c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1af20:	ldrb	r3, [r3]
   1af24:	cmp	r3, #0
   1af28:	beq	1af8c <__assert_fail@plt+0x9c2c>
   1af2c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1af30:	bl	1c668 <__assert_fail@plt+0xb308>
   1af34:	mov	r3, r0
   1af38:	str	r3, [fp, #-12]
   1af3c:	b	1af8c <__assert_fail@plt+0x9c2c>
   1af40:	ldr	r2, [fp, #-84]	; 0xffffffac
   1af44:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1af48:	sub	r3, r2, r3
   1af4c:	str	r3, [fp, #-28]	; 0xffffffe4
   1af50:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1af54:	cmp	r3, #0
   1af58:	beq	1af8c <__assert_fail@plt+0x9c2c>
   1af5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1af60:	add	r3, r3, #1
   1af64:	mov	r1, r3
   1af68:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1af6c:	bl	1c5c0 <__assert_fail@plt+0xb260>
   1af70:	mov	r3, r0
   1af74:	str	r3, [fp, #-12]
   1af78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1af7c:	ldr	r2, [fp, #-12]
   1af80:	add	r3, r2, r3
   1af84:	mov	r2, #0
   1af88:	strb	r2, [r3]
   1af8c:	ldr	r3, [fp, #-84]	; 0xffffffac
   1af90:	cmp	r3, #0
   1af94:	beq	1afb8 <__assert_fail@plt+0x9c58>
   1af98:	ldr	r3, [fp, #-84]	; 0xffffffac
   1af9c:	add	r3, r3, #1
   1afa0:	ldrb	r3, [r3]
   1afa4:	cmp	r3, #0
   1afa8:	beq	1afb8 <__assert_fail@plt+0x9c58>
   1afac:	ldr	r3, [fp, #-84]	; 0xffffffac
   1afb0:	add	r3, r3, #1
   1afb4:	b	1afbc <__assert_fail@plt+0x9c5c>
   1afb8:	mov	r3, #0
   1afbc:	str	r3, [fp, #-32]	; 0xffffffe0
   1afc0:	ldr	r3, [fp, #-12]
   1afc4:	cmp	r3, #0
   1afc8:	beq	1b12c <__assert_fail@plt+0x9dcc>
   1afcc:	ldr	r3, [fp, #-12]
   1afd0:	ldrb	r3, [r3]
   1afd4:	cmp	r3, #43	; 0x2b
   1afd8:	beq	1afec <__assert_fail@plt+0x9c8c>
   1afdc:	ldr	r0, [fp, #-12]
   1afe0:	bl	1103c <getpwnam@plt>
   1afe4:	mov	r3, r0
   1afe8:	b	1aff0 <__assert_fail@plt+0x9c90>
   1afec:	mov	r3, #0
   1aff0:	str	r3, [fp, #-36]	; 0xffffffdc
   1aff4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1aff8:	cmp	r3, #0
   1affc:	bne	1b0a4 <__assert_fail@plt+0x9d44>
   1b000:	ldr	r3, [fp, #-84]	; 0xffffffac
   1b004:	cmp	r3, #0
   1b008:	beq	1b020 <__assert_fail@plt+0x9cc0>
   1b00c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b010:	cmp	r3, #0
   1b014:	bne	1b020 <__assert_fail@plt+0x9cc0>
   1b018:	mov	r3, #1
   1b01c:	b	1b024 <__assert_fail@plt+0x9cc4>
   1b020:	mov	r3, #0
   1b024:	strb	r3, [fp, #-37]	; 0xffffffdb
   1b028:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1b02c:	and	r3, r3, #1
   1b030:	strb	r3, [fp, #-37]	; 0xffffffdb
   1b034:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1b038:	cmp	r3, #0
   1b03c:	beq	1b050 <__assert_fail@plt+0x9cf0>
   1b040:	ldr	r3, [pc, #592]	; 1b298 <__assert_fail@plt+0x9f38>
   1b044:	ldr	r3, [r3]
   1b048:	str	r3, [fp, #-8]
   1b04c:	b	1b128 <__assert_fail@plt+0x9dc8>
   1b050:	sub	r2, fp, #48	; 0x30
   1b054:	ldr	r3, [pc, #576]	; 1b29c <__assert_fail@plt+0x9f3c>
   1b058:	str	r3, [sp]
   1b05c:	mov	r3, r2
   1b060:	mov	r2, #10
   1b064:	mov	r1, #0
   1b068:	ldr	r0, [fp, #-12]
   1b06c:	bl	1c970 <__assert_fail@plt+0xb610>
   1b070:	mov	r3, r0
   1b074:	cmp	r3, #0
   1b078:	bne	1b094 <__assert_fail@plt+0x9d34>
   1b07c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b080:	cmn	r3, #1
   1b084:	beq	1b094 <__assert_fail@plt+0x9d34>
   1b088:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b08c:	str	r3, [fp, #-20]	; 0xffffffec
   1b090:	b	1b128 <__assert_fail@plt+0x9dc8>
   1b094:	ldr	r3, [pc, #516]	; 1b2a0 <__assert_fail@plt+0x9f40>
   1b098:	ldr	r3, [r3]
   1b09c:	str	r3, [fp, #-8]
   1b0a0:	b	1b128 <__assert_fail@plt+0x9dc8>
   1b0a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b0a8:	ldr	r3, [r3, #8]
   1b0ac:	str	r3, [fp, #-20]	; 0xffffffec
   1b0b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b0b4:	cmp	r3, #0
   1b0b8:	bne	1b128 <__assert_fail@plt+0x9dc8>
   1b0bc:	ldr	r3, [fp, #-84]	; 0xffffffac
   1b0c0:	cmp	r3, #0
   1b0c4:	beq	1b128 <__assert_fail@plt+0x9dc8>
   1b0c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b0cc:	ldr	r3, [r3, #12]
   1b0d0:	str	r3, [fp, #-24]	; 0xffffffe8
   1b0d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b0d8:	bl	11348 <getgrgid@plt>
   1b0dc:	str	r0, [fp, #-44]	; 0xffffffd4
   1b0e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b0e4:	cmp	r3, #0
   1b0e8:	beq	1b0f8 <__assert_fail@plt+0x9d98>
   1b0ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b0f0:	ldr	r3, [r3]
   1b0f4:	b	1b114 <__assert_fail@plt+0x9db4>
   1b0f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b0fc:	mov	r0, r3
   1b100:	mov	r1, #0
   1b104:	sub	r3, fp, #72	; 0x48
   1b108:	mov	r2, r3
   1b10c:	bl	18484 <__assert_fail@plt+0x7124>
   1b110:	mov	r3, r0
   1b114:	mov	r0, r3
   1b118:	bl	1c668 <__assert_fail@plt+0xb308>
   1b11c:	mov	r3, r0
   1b120:	str	r3, [fp, #-16]
   1b124:	bl	11018 <endgrent@plt>
   1b128:	bl	11288 <endpwent@plt>
   1b12c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b130:	cmp	r3, #0
   1b134:	beq	1b1ec <__assert_fail@plt+0x9e8c>
   1b138:	ldr	r3, [fp, #-8]
   1b13c:	cmp	r3, #0
   1b140:	bne	1b1ec <__assert_fail@plt+0x9e8c>
   1b144:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b148:	ldrb	r3, [r3]
   1b14c:	cmp	r3, #43	; 0x2b
   1b150:	beq	1b164 <__assert_fail@plt+0x9e04>
   1b154:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b158:	bl	11354 <getgrnam@plt>
   1b15c:	mov	r3, r0
   1b160:	b	1b168 <__assert_fail@plt+0x9e08>
   1b164:	mov	r3, #0
   1b168:	str	r3, [fp, #-44]	; 0xffffffd4
   1b16c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b170:	cmp	r3, #0
   1b174:	bne	1b1cc <__assert_fail@plt+0x9e6c>
   1b178:	sub	r2, fp, #76	; 0x4c
   1b17c:	ldr	r3, [pc, #280]	; 1b29c <__assert_fail@plt+0x9f3c>
   1b180:	str	r3, [sp]
   1b184:	mov	r3, r2
   1b188:	mov	r2, #10
   1b18c:	mov	r1, #0
   1b190:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b194:	bl	1c970 <__assert_fail@plt+0xb610>
   1b198:	mov	r3, r0
   1b19c:	cmp	r3, #0
   1b1a0:	bne	1b1bc <__assert_fail@plt+0x9e5c>
   1b1a4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1b1a8:	cmn	r3, #1
   1b1ac:	beq	1b1bc <__assert_fail@plt+0x9e5c>
   1b1b0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1b1b4:	str	r3, [fp, #-24]	; 0xffffffe8
   1b1b8:	b	1b1d8 <__assert_fail@plt+0x9e78>
   1b1bc:	ldr	r3, [pc, #224]	; 1b2a4 <__assert_fail@plt+0x9f44>
   1b1c0:	ldr	r3, [r3]
   1b1c4:	str	r3, [fp, #-8]
   1b1c8:	b	1b1d8 <__assert_fail@plt+0x9e78>
   1b1cc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b1d0:	ldr	r3, [r3, #8]
   1b1d4:	str	r3, [fp, #-24]	; 0xffffffe8
   1b1d8:	bl	11018 <endgrent@plt>
   1b1dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b1e0:	bl	1c668 <__assert_fail@plt+0xb308>
   1b1e4:	mov	r3, r0
   1b1e8:	str	r3, [fp, #-16]
   1b1ec:	ldr	r3, [fp, #-8]
   1b1f0:	cmp	r3, #0
   1b1f4:	bne	1b25c <__assert_fail@plt+0x9efc>
   1b1f8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1b1fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b200:	str	r2, [r3]
   1b204:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b208:	cmp	r3, #0
   1b20c:	beq	1b21c <__assert_fail@plt+0x9ebc>
   1b210:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b214:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b218:	str	r2, [r3]
   1b21c:	ldr	r3, [fp, #4]
   1b220:	cmp	r3, #0
   1b224:	beq	1b23c <__assert_fail@plt+0x9edc>
   1b228:	ldr	r3, [fp, #4]
   1b22c:	ldr	r2, [fp, #-12]
   1b230:	str	r2, [r3]
   1b234:	mov	r3, #0
   1b238:	str	r3, [fp, #-12]
   1b23c:	ldr	r3, [fp, #8]
   1b240:	cmp	r3, #0
   1b244:	beq	1b25c <__assert_fail@plt+0x9efc>
   1b248:	ldr	r3, [fp, #8]
   1b24c:	ldr	r2, [fp, #-16]
   1b250:	str	r2, [r3]
   1b254:	mov	r3, #0
   1b258:	str	r3, [fp, #-16]
   1b25c:	ldr	r0, [fp, #-12]
   1b260:	bl	1347c <__assert_fail@plt+0x211c>
   1b264:	ldr	r0, [fp, #-16]
   1b268:	bl	1347c <__assert_fail@plt+0x211c>
   1b26c:	ldr	r3, [fp, #-8]
   1b270:	cmp	r3, #0
   1b274:	beq	1b288 <__assert_fail@plt+0x9f28>
   1b278:	ldr	r0, [fp, #-8]
   1b27c:	bl	111d4 <gettext@plt>
   1b280:	mov	r3, r0
   1b284:	b	1b28c <__assert_fail@plt+0x9f2c>
   1b288:	mov	r3, #0
   1b28c:	mov	r0, r3
   1b290:	sub	sp, fp, #4
   1b294:	pop	{fp, pc}
   1b298:	andeq	r1, r3, r4, lsl #3
   1b29c:	muleq	r2, r4, r2
   1b2a0:	andeq	r1, r3, r8, lsl #3
   1b2a4:	andeq	r1, r3, ip, lsl #3
   1b2a8:	push	{fp, lr}
   1b2ac:	add	fp, sp, #4
   1b2b0:	sub	sp, sp, #40	; 0x28
   1b2b4:	str	r0, [fp, #-24]	; 0xffffffe8
   1b2b8:	str	r1, [fp, #-28]	; 0xffffffe4
   1b2bc:	str	r2, [fp, #-32]	; 0xffffffe0
   1b2c0:	str	r3, [fp, #-36]	; 0xffffffdc
   1b2c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b2c8:	cmp	r3, #0
   1b2cc:	beq	1b2e4 <__assert_fail@plt+0x9f84>
   1b2d0:	mov	r1, #58	; 0x3a
   1b2d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b2d8:	bl	111f8 <strchr@plt>
   1b2dc:	mov	r3, r0
   1b2e0:	b	1b2e8 <__assert_fail@plt+0x9f88>
   1b2e4:	mov	r3, #0
   1b2e8:	str	r3, [fp, #-12]
   1b2ec:	ldr	r3, [fp, #4]
   1b2f0:	str	r3, [sp, #4]
   1b2f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b2f8:	str	r3, [sp]
   1b2fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b300:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b304:	ldr	r1, [fp, #-12]
   1b308:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b30c:	bl	1ae80 <__assert_fail@plt+0x9b20>
   1b310:	str	r0, [fp, #-8]
   1b314:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b318:	cmp	r3, #0
   1b31c:	beq	1b38c <__assert_fail@plt+0xa02c>
   1b320:	ldr	r3, [fp, #-12]
   1b324:	cmp	r3, #0
   1b328:	bne	1b38c <__assert_fail@plt+0xa02c>
   1b32c:	ldr	r3, [fp, #-8]
   1b330:	cmp	r3, #0
   1b334:	beq	1b38c <__assert_fail@plt+0xa02c>
   1b338:	mov	r1, #46	; 0x2e
   1b33c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b340:	bl	111f8 <strchr@plt>
   1b344:	str	r0, [fp, #-16]
   1b348:	ldr	r3, [fp, #-16]
   1b34c:	cmp	r3, #0
   1b350:	beq	1b38c <__assert_fail@plt+0xa02c>
   1b354:	ldr	r3, [fp, #4]
   1b358:	str	r3, [sp, #4]
   1b35c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b360:	str	r3, [sp]
   1b364:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b368:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b36c:	ldr	r1, [fp, #-16]
   1b370:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b374:	bl	1ae80 <__assert_fail@plt+0x9b20>
   1b378:	mov	r3, r0
   1b37c:	cmp	r3, #0
   1b380:	bne	1b38c <__assert_fail@plt+0xa02c>
   1b384:	mov	r3, #0
   1b388:	str	r3, [fp, #-8]
   1b38c:	ldr	r3, [fp, #-8]
   1b390:	mov	r0, r3
   1b394:	sub	sp, fp, #4
   1b398:	pop	{fp, pc}
   1b39c:	push	{r4, r5, r6, r7, fp, lr}
   1b3a0:	add	fp, sp, #20
   1b3a4:	sub	sp, sp, #48	; 0x30
   1b3a8:	str	r0, [fp, #-24]	; 0xffffffe8
   1b3ac:	str	r1, [fp, #-28]	; 0xffffffe4
   1b3b0:	str	r2, [fp, #-32]	; 0xffffffe0
   1b3b4:	str	r3, [fp, #-36]	; 0xffffffdc
   1b3b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b3bc:	cmp	r3, #0
   1b3c0:	beq	1b3e4 <__assert_fail@plt+0xa084>
   1b3c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b3c8:	str	r3, [sp]
   1b3cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b3d0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b3d4:	ldr	r1, [pc, #1260]	; 1b8c8 <__assert_fail@plt+0xa568>
   1b3d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b3dc:	bl	1121c <fprintf@plt>
   1b3e0:	b	1b3f8 <__assert_fail@plt+0xa098>
   1b3e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b3e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b3ec:	ldr	r1, [pc, #1240]	; 1b8cc <__assert_fail@plt+0xa56c>
   1b3f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b3f4:	bl	1121c <fprintf@plt>
   1b3f8:	ldr	r0, [pc, #1232]	; 1b8d0 <__assert_fail@plt+0xa570>
   1b3fc:	bl	111d4 <gettext@plt>
   1b400:	mov	r2, r0
   1b404:	ldr	r3, [pc, #1224]	; 1b8d4 <__assert_fail@plt+0xa574>
   1b408:	ldr	r1, [pc, #1224]	; 1b8d8 <__assert_fail@plt+0xa578>
   1b40c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b410:	bl	1121c <fprintf@plt>
   1b414:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b418:	mov	r0, #10
   1b41c:	bl	110cc <fputc_unlocked@plt>
   1b420:	ldr	r0, [pc, #1204]	; 1b8dc <__assert_fail@plt+0xa57c>
   1b424:	bl	111d4 <gettext@plt>
   1b428:	mov	r3, r0
   1b42c:	ldr	r2, [pc, #1196]	; 1b8e0 <__assert_fail@plt+0xa580>
   1b430:	mov	r1, r3
   1b434:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b438:	bl	1121c <fprintf@plt>
   1b43c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b440:	mov	r0, #10
   1b444:	bl	110cc <fputc_unlocked@plt>
   1b448:	ldr	r3, [fp, #8]
   1b44c:	cmp	r3, #9
   1b450:	ldrls	pc, [pc, r3, lsl #2]
   1b454:	b	1b810 <__assert_fail@plt+0xa4b0>
   1b458:			; <UNDEFINED> instruction: 0x0001b8b8
   1b45c:	andeq	fp, r1, r0, lsl #9
   1b460:	andeq	fp, r1, r4, lsr #9
   1b464:	ldrdeq	fp, [r1], -r0
   1b468:	andeq	fp, r1, r0, lsl r5
   1b46c:	andeq	fp, r1, r8, ror #10
   1b470:	ldrdeq	fp, [r1], -r0
   1b474:	andeq	fp, r1, r8, asr #12
   1b478:	ldrdeq	fp, [r1], -r0
   1b47c:	andeq	fp, r1, r8, ror #14
   1b480:	ldr	r0, [pc, #1116]	; 1b8e4 <__assert_fail@plt+0xa584>
   1b484:	bl	111d4 <gettext@plt>
   1b488:	mov	r1, r0
   1b48c:	ldr	r3, [fp, #4]
   1b490:	ldr	r3, [r3]
   1b494:	mov	r2, r3
   1b498:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b49c:	bl	1121c <fprintf@plt>
   1b4a0:	b	1b8bc <__assert_fail@plt+0xa55c>
   1b4a4:	ldr	r0, [pc, #1084]	; 1b8e8 <__assert_fail@plt+0xa588>
   1b4a8:	bl	111d4 <gettext@plt>
   1b4ac:	mov	r1, r0
   1b4b0:	ldr	r3, [fp, #4]
   1b4b4:	ldr	r2, [r3]
   1b4b8:	ldr	r3, [fp, #4]
   1b4bc:	add	r3, r3, #4
   1b4c0:	ldr	r3, [r3]
   1b4c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b4c8:	bl	1121c <fprintf@plt>
   1b4cc:	b	1b8bc <__assert_fail@plt+0xa55c>
   1b4d0:	ldr	r0, [pc, #1044]	; 1b8ec <__assert_fail@plt+0xa58c>
   1b4d4:	bl	111d4 <gettext@plt>
   1b4d8:	ldr	r3, [fp, #4]
   1b4dc:	ldr	r2, [r3]
   1b4e0:	ldr	r3, [fp, #4]
   1b4e4:	add	r3, r3, #4
   1b4e8:	ldr	r1, [r3]
   1b4ec:	ldr	r3, [fp, #4]
   1b4f0:	add	r3, r3, #8
   1b4f4:	ldr	r3, [r3]
   1b4f8:	str	r3, [sp]
   1b4fc:	mov	r3, r1
   1b500:	mov	r1, r0
   1b504:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b508:	bl	1121c <fprintf@plt>
   1b50c:	b	1b8bc <__assert_fail@plt+0xa55c>
   1b510:	ldr	r0, [pc, #984]	; 1b8f0 <__assert_fail@plt+0xa590>
   1b514:	bl	111d4 <gettext@plt>
   1b518:	mov	ip, r0
   1b51c:	ldr	r3, [fp, #4]
   1b520:	ldr	r1, [r3]
   1b524:	ldr	r3, [fp, #4]
   1b528:	add	r3, r3, #4
   1b52c:	ldr	r0, [r3]
   1b530:	ldr	r3, [fp, #4]
   1b534:	add	r3, r3, #8
   1b538:	ldr	r3, [r3]
   1b53c:	ldr	r2, [fp, #4]
   1b540:	add	r2, r2, #12
   1b544:	ldr	r2, [r2]
   1b548:	str	r2, [sp, #4]
   1b54c:	str	r3, [sp]
   1b550:	mov	r3, r0
   1b554:	mov	r2, r1
   1b558:	mov	r1, ip
   1b55c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b560:	bl	1121c <fprintf@plt>
   1b564:	b	1b8bc <__assert_fail@plt+0xa55c>
   1b568:	ldr	r0, [pc, #900]	; 1b8f4 <__assert_fail@plt+0xa594>
   1b56c:	bl	111d4 <gettext@plt>
   1b570:	mov	lr, r0
   1b574:	ldr	r3, [fp, #4]
   1b578:	ldr	r0, [r3]
   1b57c:	ldr	r3, [fp, #4]
   1b580:	add	r3, r3, #4
   1b584:	ldr	ip, [r3]
   1b588:	ldr	r3, [fp, #4]
   1b58c:	add	r3, r3, #8
   1b590:	ldr	r3, [r3]
   1b594:	ldr	r2, [fp, #4]
   1b598:	add	r2, r2, #12
   1b59c:	ldr	r2, [r2]
   1b5a0:	ldr	r1, [fp, #4]
   1b5a4:	add	r1, r1, #16
   1b5a8:	ldr	r1, [r1]
   1b5ac:	str	r1, [sp, #8]
   1b5b0:	str	r2, [sp, #4]
   1b5b4:	str	r3, [sp]
   1b5b8:	mov	r3, ip
   1b5bc:	mov	r2, r0
   1b5c0:	mov	r1, lr
   1b5c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b5c8:	bl	1121c <fprintf@plt>
   1b5cc:	b	1b8bc <__assert_fail@plt+0xa55c>
   1b5d0:	ldr	r0, [pc, #800]	; 1b8f8 <__assert_fail@plt+0xa598>
   1b5d4:	bl	111d4 <gettext@plt>
   1b5d8:	mov	r4, r0
   1b5dc:	ldr	r3, [fp, #4]
   1b5e0:	ldr	ip, [r3]
   1b5e4:	ldr	r3, [fp, #4]
   1b5e8:	add	r3, r3, #4
   1b5ec:	ldr	lr, [r3]
   1b5f0:	ldr	r3, [fp, #4]
   1b5f4:	add	r3, r3, #8
   1b5f8:	ldr	r3, [r3]
   1b5fc:	ldr	r2, [fp, #4]
   1b600:	add	r2, r2, #12
   1b604:	ldr	r2, [r2]
   1b608:	ldr	r1, [fp, #4]
   1b60c:	add	r1, r1, #16
   1b610:	ldr	r1, [r1]
   1b614:	ldr	r0, [fp, #4]
   1b618:	add	r0, r0, #20
   1b61c:	ldr	r0, [r0]
   1b620:	str	r0, [sp, #12]
   1b624:	str	r1, [sp, #8]
   1b628:	str	r2, [sp, #4]
   1b62c:	str	r3, [sp]
   1b630:	mov	r3, lr
   1b634:	mov	r2, ip
   1b638:	mov	r1, r4
   1b63c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b640:	bl	1121c <fprintf@plt>
   1b644:	b	1b8bc <__assert_fail@plt+0xa55c>
   1b648:	ldr	r0, [pc, #684]	; 1b8fc <__assert_fail@plt+0xa59c>
   1b64c:	bl	111d4 <gettext@plt>
   1b650:	mov	r5, r0
   1b654:	ldr	r3, [fp, #4]
   1b658:	ldr	lr, [r3]
   1b65c:	ldr	r3, [fp, #4]
   1b660:	add	r3, r3, #4
   1b664:	ldr	r4, [r3]
   1b668:	ldr	r3, [fp, #4]
   1b66c:	add	r3, r3, #8
   1b670:	ldr	r3, [r3]
   1b674:	ldr	r2, [fp, #4]
   1b678:	add	r2, r2, #12
   1b67c:	ldr	r2, [r2]
   1b680:	ldr	r1, [fp, #4]
   1b684:	add	r1, r1, #16
   1b688:	ldr	r1, [r1]
   1b68c:	ldr	r0, [fp, #4]
   1b690:	add	r0, r0, #20
   1b694:	ldr	r0, [r0]
   1b698:	ldr	ip, [fp, #4]
   1b69c:	add	ip, ip, #24
   1b6a0:	ldr	ip, [ip]
   1b6a4:	str	ip, [sp, #16]
   1b6a8:	str	r0, [sp, #12]
   1b6ac:	str	r1, [sp, #8]
   1b6b0:	str	r2, [sp, #4]
   1b6b4:	str	r3, [sp]
   1b6b8:	mov	r3, r4
   1b6bc:	mov	r2, lr
   1b6c0:	mov	r1, r5
   1b6c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b6c8:	bl	1121c <fprintf@plt>
   1b6cc:	b	1b8bc <__assert_fail@plt+0xa55c>
   1b6d0:	ldr	r0, [pc, #552]	; 1b900 <__assert_fail@plt+0xa5a0>
   1b6d4:	bl	111d4 <gettext@plt>
   1b6d8:	mov	r6, r0
   1b6dc:	ldr	r3, [fp, #4]
   1b6e0:	ldr	r4, [r3]
   1b6e4:	ldr	r3, [fp, #4]
   1b6e8:	add	r3, r3, #4
   1b6ec:	ldr	r5, [r3]
   1b6f0:	ldr	r3, [fp, #4]
   1b6f4:	add	r3, r3, #8
   1b6f8:	ldr	r3, [r3]
   1b6fc:	ldr	r2, [fp, #4]
   1b700:	add	r2, r2, #12
   1b704:	ldr	r2, [r2]
   1b708:	ldr	r1, [fp, #4]
   1b70c:	add	r1, r1, #16
   1b710:	ldr	r1, [r1]
   1b714:	ldr	r0, [fp, #4]
   1b718:	add	r0, r0, #20
   1b71c:	ldr	r0, [r0]
   1b720:	ldr	ip, [fp, #4]
   1b724:	add	ip, ip, #24
   1b728:	ldr	ip, [ip]
   1b72c:	ldr	lr, [fp, #4]
   1b730:	add	lr, lr, #28
   1b734:	ldr	lr, [lr]
   1b738:	str	lr, [sp, #20]
   1b73c:	str	ip, [sp, #16]
   1b740:	str	r0, [sp, #12]
   1b744:	str	r1, [sp, #8]
   1b748:	str	r2, [sp, #4]
   1b74c:	str	r3, [sp]
   1b750:	mov	r3, r5
   1b754:	mov	r2, r4
   1b758:	mov	r1, r6
   1b75c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b760:	bl	1121c <fprintf@plt>
   1b764:	b	1b8bc <__assert_fail@plt+0xa55c>
   1b768:	ldr	r0, [pc, #404]	; 1b904 <__assert_fail@plt+0xa5a4>
   1b76c:	bl	111d4 <gettext@plt>
   1b770:	mov	r7, r0
   1b774:	ldr	r3, [fp, #4]
   1b778:	ldr	r5, [r3]
   1b77c:	ldr	r3, [fp, #4]
   1b780:	add	r3, r3, #4
   1b784:	ldr	r6, [r3]
   1b788:	ldr	r3, [fp, #4]
   1b78c:	add	r3, r3, #8
   1b790:	ldr	r3, [r3]
   1b794:	ldr	r2, [fp, #4]
   1b798:	add	r2, r2, #12
   1b79c:	ldr	r2, [r2]
   1b7a0:	ldr	r1, [fp, #4]
   1b7a4:	add	r1, r1, #16
   1b7a8:	ldr	r1, [r1]
   1b7ac:	ldr	r0, [fp, #4]
   1b7b0:	add	r0, r0, #20
   1b7b4:	ldr	r0, [r0]
   1b7b8:	ldr	ip, [fp, #4]
   1b7bc:	add	ip, ip, #24
   1b7c0:	ldr	ip, [ip]
   1b7c4:	ldr	lr, [fp, #4]
   1b7c8:	add	lr, lr, #28
   1b7cc:	ldr	lr, [lr]
   1b7d0:	ldr	r4, [fp, #4]
   1b7d4:	add	r4, r4, #32
   1b7d8:	ldr	r4, [r4]
   1b7dc:	str	r4, [sp, #24]
   1b7e0:	str	lr, [sp, #20]
   1b7e4:	str	ip, [sp, #16]
   1b7e8:	str	r0, [sp, #12]
   1b7ec:	str	r1, [sp, #8]
   1b7f0:	str	r2, [sp, #4]
   1b7f4:	str	r3, [sp]
   1b7f8:	mov	r3, r6
   1b7fc:	mov	r2, r5
   1b800:	mov	r1, r7
   1b804:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b808:	bl	1121c <fprintf@plt>
   1b80c:	b	1b8bc <__assert_fail@plt+0xa55c>
   1b810:	ldr	r0, [pc, #240]	; 1b908 <__assert_fail@plt+0xa5a8>
   1b814:	bl	111d4 <gettext@plt>
   1b818:	mov	r7, r0
   1b81c:	ldr	r3, [fp, #4]
   1b820:	ldr	r5, [r3]
   1b824:	ldr	r3, [fp, #4]
   1b828:	add	r3, r3, #4
   1b82c:	ldr	r6, [r3]
   1b830:	ldr	r3, [fp, #4]
   1b834:	add	r3, r3, #8
   1b838:	ldr	r3, [r3]
   1b83c:	ldr	r2, [fp, #4]
   1b840:	add	r2, r2, #12
   1b844:	ldr	r2, [r2]
   1b848:	ldr	r1, [fp, #4]
   1b84c:	add	r1, r1, #16
   1b850:	ldr	r1, [r1]
   1b854:	ldr	r0, [fp, #4]
   1b858:	add	r0, r0, #20
   1b85c:	ldr	r0, [r0]
   1b860:	ldr	ip, [fp, #4]
   1b864:	add	ip, ip, #24
   1b868:	ldr	ip, [ip]
   1b86c:	ldr	lr, [fp, #4]
   1b870:	add	lr, lr, #28
   1b874:	ldr	lr, [lr]
   1b878:	ldr	r4, [fp, #4]
   1b87c:	add	r4, r4, #32
   1b880:	ldr	r4, [r4]
   1b884:	str	r4, [sp, #24]
   1b888:	str	lr, [sp, #20]
   1b88c:	str	ip, [sp, #16]
   1b890:	str	r0, [sp, #12]
   1b894:	str	r1, [sp, #8]
   1b898:	str	r2, [sp, #4]
   1b89c:	str	r3, [sp]
   1b8a0:	mov	r3, r6
   1b8a4:	mov	r2, r5
   1b8a8:	mov	r1, r7
   1b8ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b8b0:	bl	1121c <fprintf@plt>
   1b8b4:	b	1b8bc <__assert_fail@plt+0xa55c>
   1b8b8:	nop			; (mov r0, r0)
   1b8bc:	nop			; (mov r0, r0)
   1b8c0:	sub	sp, fp, #20
   1b8c4:	pop	{r4, r5, r6, r7, fp, pc}
   1b8c8:	andeq	r0, r2, r8, asr #5
   1b8cc:	ldrdeq	r0, [r2], -r4
   1b8d0:	ldrdeq	r0, [r2], -ip
   1b8d4:	andeq	r0, r0, r6, ror #15
   1b8d8:	andeq	r0, r2, ip, ror #11
   1b8dc:	andeq	r0, r2, r0, ror #5
   1b8e0:	andeq	r0, r2, ip, lsl #7
   1b8e4:			; <UNDEFINED> instruction: 0x000203b0
   1b8e8:	andeq	r0, r2, r0, asr #7
   1b8ec:	ldrdeq	r0, [r2], -r8
   1b8f0:	strdeq	r0, [r2], -r4
   1b8f4:	andeq	r0, r2, r4, lsl r4
   1b8f8:	andeq	r0, r2, r8, lsr r4
   1b8fc:	andeq	r0, r2, r0, ror #8
   1b900:	andeq	r0, r2, ip, lsl #9
   1b904:			; <UNDEFINED> instruction: 0x000204bc
   1b908:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1b90c:	push	{fp, lr}
   1b910:	add	fp, sp, #4
   1b914:	sub	sp, sp, #32
   1b918:	str	r0, [fp, #-16]
   1b91c:	str	r1, [fp, #-20]	; 0xffffffec
   1b920:	str	r2, [fp, #-24]	; 0xffffffe8
   1b924:	str	r3, [fp, #-28]	; 0xffffffe4
   1b928:	mov	r3, #0
   1b92c:	str	r3, [fp, #-8]
   1b930:	b	1b940 <__assert_fail@plt+0xa5e0>
   1b934:	ldr	r3, [fp, #-8]
   1b938:	add	r3, r3, #1
   1b93c:	str	r3, [fp, #-8]
   1b940:	ldr	r3, [fp, #-8]
   1b944:	lsl	r3, r3, #2
   1b948:	ldr	r2, [fp, #4]
   1b94c:	add	r3, r2, r3
   1b950:	ldr	r3, [r3]
   1b954:	cmp	r3, #0
   1b958:	bne	1b934 <__assert_fail@plt+0xa5d4>
   1b95c:	ldr	r3, [fp, #-8]
   1b960:	str	r3, [sp, #4]
   1b964:	ldr	r3, [fp, #4]
   1b968:	str	r3, [sp]
   1b96c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b970:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b974:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b978:	ldr	r0, [fp, #-16]
   1b97c:	bl	1b39c <__assert_fail@plt+0xa03c>
   1b980:	nop			; (mov r0, r0)
   1b984:	sub	sp, fp, #4
   1b988:	pop	{fp, pc}
   1b98c:	push	{fp, lr}
   1b990:	add	fp, sp, #4
   1b994:	sub	sp, sp, #72	; 0x48
   1b998:	str	r0, [fp, #-56]	; 0xffffffc8
   1b99c:	str	r1, [fp, #-60]	; 0xffffffc4
   1b9a0:	str	r2, [fp, #-64]	; 0xffffffc0
   1b9a4:	str	r3, [fp, #-68]	; 0xffffffbc
   1b9a8:	mov	r3, #0
   1b9ac:	str	r3, [fp, #-8]
   1b9b0:	b	1b9c0 <__assert_fail@plt+0xa660>
   1b9b4:	ldr	r3, [fp, #-8]
   1b9b8:	add	r3, r3, #1
   1b9bc:	str	r3, [fp, #-8]
   1b9c0:	ldr	r3, [fp, #-8]
   1b9c4:	cmp	r3, #9
   1b9c8:	bhi	1ba0c <__assert_fail@plt+0xa6ac>
   1b9cc:	ldr	r3, [fp, #4]
   1b9d0:	add	r2, r3, #4
   1b9d4:	str	r2, [fp, #4]
   1b9d8:	ldr	r2, [r3]
   1b9dc:	ldr	r3, [fp, #-8]
   1b9e0:	lsl	r3, r3, #2
   1b9e4:	sub	r1, fp, #4
   1b9e8:	add	r3, r1, r3
   1b9ec:	str	r2, [r3, #-44]	; 0xffffffd4
   1b9f0:	ldr	r3, [fp, #-8]
   1b9f4:	lsl	r3, r3, #2
   1b9f8:	sub	r2, fp, #4
   1b9fc:	add	r3, r2, r3
   1ba00:	ldr	r3, [r3, #-44]	; 0xffffffd4
   1ba04:	cmp	r3, #0
   1ba08:	bne	1b9b4 <__assert_fail@plt+0xa654>
   1ba0c:	ldr	r3, [fp, #-8]
   1ba10:	str	r3, [sp, #4]
   1ba14:	sub	r3, fp, #48	; 0x30
   1ba18:	str	r3, [sp]
   1ba1c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1ba20:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1ba24:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1ba28:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ba2c:	bl	1b39c <__assert_fail@plt+0xa03c>
   1ba30:	nop			; (mov r0, r0)
   1ba34:	sub	sp, fp, #4
   1ba38:	pop	{fp, pc}
   1ba3c:	push	{r3}		; (str r3, [sp, #-4]!)
   1ba40:	push	{fp, lr}
   1ba44:	add	fp, sp, #4
   1ba48:	sub	sp, sp, #36	; 0x24
   1ba4c:	str	r0, [fp, #-20]	; 0xffffffec
   1ba50:	str	r1, [fp, #-24]	; 0xffffffe8
   1ba54:	str	r2, [fp, #-28]	; 0xffffffe4
   1ba58:	add	r3, fp, #8
   1ba5c:	str	r3, [fp, #-12]
   1ba60:	ldr	r3, [fp, #-12]
   1ba64:	str	r3, [sp]
   1ba68:	ldr	r3, [fp, #4]
   1ba6c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1ba70:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ba74:	ldr	r0, [fp, #-20]	; 0xffffffec
   1ba78:	bl	1b98c <__assert_fail@plt+0xa62c>
   1ba7c:	nop			; (mov r0, r0)
   1ba80:	sub	sp, fp, #4
   1ba84:	pop	{fp, lr}
   1ba88:	add	sp, sp, #4
   1ba8c:	bx	lr
   1ba90:	push	{fp, lr}
   1ba94:	add	fp, sp, #4
   1ba98:	ldr	r3, [pc, #96]	; 1bb00 <__assert_fail@plt+0xa7a0>
   1ba9c:	ldr	r3, [r3]
   1baa0:	mov	r1, r3
   1baa4:	mov	r0, #10
   1baa8:	bl	110cc <fputc_unlocked@plt>
   1baac:	ldr	r0, [pc, #80]	; 1bb04 <__assert_fail@plt+0xa7a4>
   1bab0:	bl	111d4 <gettext@plt>
   1bab4:	mov	r3, r0
   1bab8:	ldr	r1, [pc, #72]	; 1bb08 <__assert_fail@plt+0xa7a8>
   1babc:	mov	r0, r3
   1bac0:	bl	11060 <printf@plt>
   1bac4:	ldr	r0, [pc, #64]	; 1bb0c <__assert_fail@plt+0xa7ac>
   1bac8:	bl	111d4 <gettext@plt>
   1bacc:	mov	r3, r0
   1bad0:	ldr	r2, [pc, #56]	; 1bb10 <__assert_fail@plt+0xa7b0>
   1bad4:	ldr	r1, [pc, #56]	; 1bb14 <__assert_fail@plt+0xa7b4>
   1bad8:	mov	r0, r3
   1badc:	bl	11060 <printf@plt>
   1bae0:	ldr	r0, [pc, #48]	; 1bb18 <__assert_fail@plt+0xa7b8>
   1bae4:	bl	111d4 <gettext@plt>
   1bae8:	mov	r3, r0
   1baec:	ldr	r1, [pc, #40]	; 1bb1c <__assert_fail@plt+0xa7bc>
   1baf0:	mov	r0, r3
   1baf4:	bl	11060 <printf@plt>
   1baf8:	nop			; (mov r0, r0)
   1bafc:	pop	{fp, pc}
   1bb00:	andeq	r1, r3, r4, lsr #3
   1bb04:	andeq	r0, r2, ip, lsr #10
   1bb08:	andeq	r0, r2, r0, asr #10
   1bb0c:	andeq	r0, r2, r8, asr r5
   1bb10:	andeq	r0, r2, ip, ror #10
   1bb14:	muleq	r2, r4, r5
   1bb18:	andeq	r0, r2, r4, lsr #11
   1bb1c:	andeq	r0, r2, ip, asr #11
   1bb20:	push	{fp, lr}
   1bb24:	add	fp, sp, #4
   1bb28:	sub	sp, sp, #16
   1bb2c:	str	r0, [fp, #-8]
   1bb30:	str	r1, [fp, #-12]
   1bb34:	str	r2, [fp, #-16]
   1bb38:	ldr	r2, [fp, #-16]
   1bb3c:	ldr	r1, [fp, #-12]
   1bb40:	ldr	r0, [fp, #-8]
   1bb44:	bl	1bcb0 <__assert_fail@plt+0xa950>
   1bb48:	mov	r3, r0
   1bb4c:	mov	r0, r3
   1bb50:	sub	sp, fp, #4
   1bb54:	pop	{fp, pc}
   1bb58:	push	{fp, lr}
   1bb5c:	add	fp, sp, #4
   1bb60:	sub	sp, sp, #8
   1bb64:	str	r0, [fp, #-8]
   1bb68:	ldr	r3, [fp, #-8]
   1bb6c:	cmp	r3, #0
   1bb70:	bne	1bb78 <__assert_fail@plt+0xa818>
   1bb74:	bl	1c6a4 <__assert_fail@plt+0xb344>
   1bb78:	ldr	r3, [fp, #-8]
   1bb7c:	mov	r0, r3
   1bb80:	sub	sp, fp, #4
   1bb84:	pop	{fp, pc}
   1bb88:	push	{fp, lr}
   1bb8c:	add	fp, sp, #4
   1bb90:	sub	sp, sp, #8
   1bb94:	str	r0, [fp, #-8]
   1bb98:	ldr	r0, [fp, #-8]
   1bb9c:	bl	1d06c <__assert_fail@plt+0xbd0c>
   1bba0:	mov	r3, r0
   1bba4:	mov	r0, r3
   1bba8:	bl	1bb58 <__assert_fail@plt+0xa7f8>
   1bbac:	mov	r3, r0
   1bbb0:	mov	r0, r3
   1bbb4:	sub	sp, fp, #4
   1bbb8:	pop	{fp, pc}
   1bbbc:	push	{fp, lr}
   1bbc0:	add	fp, sp, #4
   1bbc4:	sub	sp, sp, #8
   1bbc8:	str	r0, [fp, #-8]
   1bbcc:	ldr	r0, [fp, #-8]
   1bbd0:	bl	1deb0 <__assert_fail@plt+0xcb50>
   1bbd4:	mov	r3, r0
   1bbd8:	mov	r0, r3
   1bbdc:	bl	1bb58 <__assert_fail@plt+0xa7f8>
   1bbe0:	mov	r3, r0
   1bbe4:	mov	r0, r3
   1bbe8:	sub	sp, fp, #4
   1bbec:	pop	{fp, pc}
   1bbf0:	push	{fp, lr}
   1bbf4:	add	fp, sp, #4
   1bbf8:	sub	sp, sp, #8
   1bbfc:	str	r0, [fp, #-8]
   1bc00:	ldr	r0, [fp, #-8]
   1bc04:	bl	1bb88 <__assert_fail@plt+0xa828>
   1bc08:	mov	r3, r0
   1bc0c:	mov	r0, r3
   1bc10:	sub	sp, fp, #4
   1bc14:	pop	{fp, pc}
   1bc18:	push	{fp, lr}
   1bc1c:	add	fp, sp, #4
   1bc20:	sub	sp, sp, #16
   1bc24:	str	r0, [fp, #-16]
   1bc28:	str	r1, [fp, #-20]	; 0xffffffec
   1bc2c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bc30:	ldr	r0, [fp, #-16]
   1bc34:	bl	1d114 <__assert_fail@plt+0xbdb4>
   1bc38:	str	r0, [fp, #-8]
   1bc3c:	ldr	r3, [fp, #-8]
   1bc40:	cmp	r3, #0
   1bc44:	bne	1bc64 <__assert_fail@plt+0xa904>
   1bc48:	ldr	r3, [fp, #-16]
   1bc4c:	cmp	r3, #0
   1bc50:	beq	1bc60 <__assert_fail@plt+0xa900>
   1bc54:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc58:	cmp	r3, #0
   1bc5c:	beq	1bc64 <__assert_fail@plt+0xa904>
   1bc60:	bl	1c6a4 <__assert_fail@plt+0xb344>
   1bc64:	ldr	r3, [fp, #-8]
   1bc68:	mov	r0, r3
   1bc6c:	sub	sp, fp, #4
   1bc70:	pop	{fp, pc}
   1bc74:	push	{fp, lr}
   1bc78:	add	fp, sp, #4
   1bc7c:	sub	sp, sp, #8
   1bc80:	str	r0, [fp, #-8]
   1bc84:	str	r1, [fp, #-12]
   1bc88:	ldr	r1, [fp, #-12]
   1bc8c:	ldr	r0, [fp, #-8]
   1bc90:	bl	1dedc <__assert_fail@plt+0xcb7c>
   1bc94:	mov	r3, r0
   1bc98:	mov	r0, r3
   1bc9c:	bl	1bb58 <__assert_fail@plt+0xa7f8>
   1bca0:	mov	r3, r0
   1bca4:	mov	r0, r3
   1bca8:	sub	sp, fp, #4
   1bcac:	pop	{fp, pc}
   1bcb0:	push	{fp, lr}
   1bcb4:	add	fp, sp, #4
   1bcb8:	sub	sp, sp, #24
   1bcbc:	str	r0, [fp, #-16]
   1bcc0:	str	r1, [fp, #-20]	; 0xffffffec
   1bcc4:	str	r2, [fp, #-24]	; 0xffffffe8
   1bcc8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bccc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bcd0:	ldr	r0, [fp, #-16]
   1bcd4:	bl	1e0d0 <__assert_fail@plt+0xcd70>
   1bcd8:	str	r0, [fp, #-8]
   1bcdc:	ldr	r3, [fp, #-8]
   1bce0:	cmp	r3, #0
   1bce4:	bne	1bd10 <__assert_fail@plt+0xa9b0>
   1bce8:	ldr	r3, [fp, #-16]
   1bcec:	cmp	r3, #0
   1bcf0:	beq	1bd0c <__assert_fail@plt+0xa9ac>
   1bcf4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bcf8:	cmp	r3, #0
   1bcfc:	beq	1bd10 <__assert_fail@plt+0xa9b0>
   1bd00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bd04:	cmp	r3, #0
   1bd08:	beq	1bd10 <__assert_fail@plt+0xa9b0>
   1bd0c:	bl	1c6a4 <__assert_fail@plt+0xb344>
   1bd10:	ldr	r3, [fp, #-8]
   1bd14:	mov	r0, r3
   1bd18:	sub	sp, fp, #4
   1bd1c:	pop	{fp, pc}
   1bd20:	push	{fp, lr}
   1bd24:	add	fp, sp, #4
   1bd28:	sub	sp, sp, #16
   1bd2c:	str	r0, [fp, #-8]
   1bd30:	str	r1, [fp, #-12]
   1bd34:	str	r2, [fp, #-16]
   1bd38:	ldr	r2, [fp, #-16]
   1bd3c:	ldr	r1, [fp, #-12]
   1bd40:	ldr	r0, [fp, #-8]
   1bd44:	bl	1df64 <__assert_fail@plt+0xcc04>
   1bd48:	mov	r3, r0
   1bd4c:	mov	r0, r3
   1bd50:	bl	1bb58 <__assert_fail@plt+0xa7f8>
   1bd54:	mov	r3, r0
   1bd58:	mov	r0, r3
   1bd5c:	sub	sp, fp, #4
   1bd60:	pop	{fp, pc}
   1bd64:	push	{fp, lr}
   1bd68:	add	fp, sp, #4
   1bd6c:	sub	sp, sp, #8
   1bd70:	str	r0, [fp, #-8]
   1bd74:	str	r1, [fp, #-12]
   1bd78:	ldr	r2, [fp, #-12]
   1bd7c:	ldr	r1, [fp, #-8]
   1bd80:	mov	r0, #0
   1bd84:	bl	1bcb0 <__assert_fail@plt+0xa950>
   1bd88:	mov	r3, r0
   1bd8c:	mov	r0, r3
   1bd90:	sub	sp, fp, #4
   1bd94:	pop	{fp, pc}
   1bd98:	push	{fp, lr}
   1bd9c:	add	fp, sp, #4
   1bda0:	sub	sp, sp, #8
   1bda4:	str	r0, [fp, #-8]
   1bda8:	str	r1, [fp, #-12]
   1bdac:	ldr	r2, [fp, #-12]
   1bdb0:	ldr	r1, [fp, #-8]
   1bdb4:	mov	r0, #0
   1bdb8:	bl	1bd20 <__assert_fail@plt+0xa9c0>
   1bdbc:	mov	r3, r0
   1bdc0:	mov	r0, r3
   1bdc4:	sub	sp, fp, #4
   1bdc8:	pop	{fp, pc}
   1bdcc:	push	{fp, lr}
   1bdd0:	add	fp, sp, #4
   1bdd4:	sub	sp, sp, #8
   1bdd8:	str	r0, [fp, #-8]
   1bddc:	str	r1, [fp, #-12]
   1bde0:	mov	r2, #1
   1bde4:	ldr	r1, [fp, #-12]
   1bde8:	ldr	r0, [fp, #-8]
   1bdec:	bl	1be00 <__assert_fail@plt+0xaaa0>
   1bdf0:	mov	r3, r0
   1bdf4:	mov	r0, r3
   1bdf8:	sub	sp, fp, #4
   1bdfc:	pop	{fp, pc}
   1be00:	push	{fp, lr}
   1be04:	add	fp, sp, #4
   1be08:	sub	sp, sp, #24
   1be0c:	str	r0, [fp, #-16]
   1be10:	str	r1, [fp, #-20]	; 0xffffffec
   1be14:	str	r2, [fp, #-24]	; 0xffffffe8
   1be18:	ldr	r3, [fp, #-20]	; 0xffffffec
   1be1c:	ldr	r3, [r3]
   1be20:	str	r3, [fp, #-8]
   1be24:	ldr	r3, [fp, #-16]
   1be28:	cmp	r3, #0
   1be2c:	bne	1be78 <__assert_fail@plt+0xab18>
   1be30:	ldr	r3, [fp, #-8]
   1be34:	cmp	r3, #0
   1be38:	bne	1bedc <__assert_fail@plt+0xab7c>
   1be3c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1be40:	mov	r0, #64	; 0x40
   1be44:	bl	1e8a8 <__assert_fail@plt+0xd548>
   1be48:	mov	r3, r0
   1be4c:	str	r3, [fp, #-8]
   1be50:	ldr	r3, [fp, #-8]
   1be54:	cmp	r3, #0
   1be58:	moveq	r3, #1
   1be5c:	movne	r3, #0
   1be60:	uxtb	r3, r3
   1be64:	mov	r2, r3
   1be68:	ldr	r3, [fp, #-8]
   1be6c:	add	r3, r2, r3
   1be70:	str	r3, [fp, #-8]
   1be74:	b	1bedc <__assert_fail@plt+0xab7c>
   1be78:	ldr	r3, [fp, #-8]
   1be7c:	lsr	r3, r3, #1
   1be80:	add	r3, r3, #1
   1be84:	mvn	r2, r3
   1be88:	ldr	r3, [fp, #-8]
   1be8c:	cmp	r2, r3
   1be90:	bcs	1beb4 <__assert_fail@plt+0xab54>
   1be94:	ldr	r3, [fp, #-8]
   1be98:	lsr	r2, r3, #1
   1be9c:	ldr	r3, [fp, #-8]
   1bea0:	add	r3, r2, r3
   1bea4:	add	r3, r3, #1
   1bea8:	str	r3, [fp, #-8]
   1beac:	mov	r3, #1
   1beb0:	b	1bed0 <__assert_fail@plt+0xab70>
   1beb4:	ldr	r3, [fp, #-8]
   1beb8:	lsr	r2, r3, #1
   1bebc:	ldr	r3, [fp, #-8]
   1bec0:	add	r3, r2, r3
   1bec4:	add	r3, r3, #1
   1bec8:	str	r3, [fp, #-8]
   1becc:	mov	r3, #0
   1bed0:	cmp	r3, #0
   1bed4:	beq	1bedc <__assert_fail@plt+0xab7c>
   1bed8:	bl	1c6a4 <__assert_fail@plt+0xb344>
   1bedc:	ldr	r3, [fp, #-8]
   1bee0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bee4:	mov	r1, r3
   1bee8:	ldr	r0, [fp, #-16]
   1beec:	bl	1bcb0 <__assert_fail@plt+0xa950>
   1bef0:	str	r0, [fp, #-16]
   1bef4:	ldr	r2, [fp, #-8]
   1bef8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1befc:	str	r2, [r3]
   1bf00:	ldr	r3, [fp, #-16]
   1bf04:	mov	r0, r3
   1bf08:	sub	sp, fp, #4
   1bf0c:	pop	{fp, pc}
   1bf10:	push	{fp, lr}
   1bf14:	add	fp, sp, #4
   1bf18:	sub	sp, sp, #32
   1bf1c:	str	r0, [fp, #-24]	; 0xffffffe8
   1bf20:	str	r1, [fp, #-28]	; 0xffffffe4
   1bf24:	str	r2, [fp, #-32]	; 0xffffffe0
   1bf28:	str	r3, [fp, #-36]	; 0xffffffdc
   1bf2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bf30:	ldr	r3, [r3]
   1bf34:	str	r3, [fp, #-8]
   1bf38:	ldr	r3, [fp, #-8]
   1bf3c:	asr	r3, r3, #1
   1bf40:	cmp	r3, #0
   1bf44:	bge	1bf6c <__assert_fail@plt+0xac0c>
   1bf48:	ldr	r3, [fp, #-8]
   1bf4c:	asr	r3, r3, #1
   1bf50:	rsb	r2, r3, #-2147483648	; 0x80000000
   1bf54:	ldr	r3, [fp, #-8]
   1bf58:	cmp	r2, r3
   1bf5c:	movgt	r3, #1
   1bf60:	movle	r3, #0
   1bf64:	uxtb	r3, r3
   1bf68:	b	1bfc0 <__assert_fail@plt+0xac60>
   1bf6c:	ldr	r3, [fp, #-8]
   1bf70:	cmp	r3, #0
   1bf74:	bge	1bf9c <__assert_fail@plt+0xac3c>
   1bf78:	ldr	r3, [fp, #-8]
   1bf7c:	asr	r2, r3, #1
   1bf80:	ldr	r3, [fp, #-8]
   1bf84:	rsb	r3, r3, #-2147483648	; 0x80000000
   1bf88:	cmp	r2, r3
   1bf8c:	movlt	r3, #1
   1bf90:	movge	r3, #0
   1bf94:	uxtb	r3, r3
   1bf98:	b	1bfc0 <__assert_fail@plt+0xac60>
   1bf9c:	ldr	r3, [fp, #-8]
   1bfa0:	asr	r2, r3, #1
   1bfa4:	mvn	r3, #-2147483648	; 0x80000000
   1bfa8:	sub	r3, r3, r2
   1bfac:	ldr	r2, [fp, #-8]
   1bfb0:	cmp	r3, r2
   1bfb4:	movlt	r3, #1
   1bfb8:	movge	r3, #0
   1bfbc:	uxtb	r3, r3
   1bfc0:	cmp	r3, #0
   1bfc4:	beq	1bfe8 <__assert_fail@plt+0xac88>
   1bfc8:	ldr	r3, [fp, #-8]
   1bfcc:	asr	r3, r3, #1
   1bfd0:	mov	r2, r3
   1bfd4:	ldr	r3, [fp, #-8]
   1bfd8:	add	r3, r2, r3
   1bfdc:	str	r3, [fp, #-16]
   1bfe0:	mov	r3, #1
   1bfe4:	b	1c004 <__assert_fail@plt+0xaca4>
   1bfe8:	ldr	r3, [fp, #-8]
   1bfec:	asr	r3, r3, #1
   1bff0:	mov	r2, r3
   1bff4:	ldr	r3, [fp, #-8]
   1bff8:	add	r3, r2, r3
   1bffc:	str	r3, [fp, #-16]
   1c000:	mov	r3, #0
   1c004:	cmp	r3, #0
   1c008:	beq	1c014 <__assert_fail@plt+0xacb4>
   1c00c:	mvn	r3, #-2147483648	; 0x80000000
   1c010:	str	r3, [fp, #-16]
   1c014:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c018:	cmp	r3, #0
   1c01c:	blt	1c038 <__assert_fail@plt+0xacd8>
   1c020:	ldr	r3, [fp, #-16]
   1c024:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1c028:	cmp	r2, r3
   1c02c:	bge	1c038 <__assert_fail@plt+0xacd8>
   1c030:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c034:	str	r3, [fp, #-16]
   1c038:	ldr	r3, [fp, #4]
   1c03c:	cmp	r3, #0
   1c040:	bge	1c0d0 <__assert_fail@plt+0xad70>
   1c044:	ldr	r3, [fp, #-16]
   1c048:	cmp	r3, #0
   1c04c:	bge	1c07c <__assert_fail@plt+0xad1c>
   1c050:	ldr	r1, [fp, #4]
   1c054:	mvn	r0, #-2147483648	; 0x80000000
   1c058:	bl	1eab4 <__assert_fail@plt+0xd754>
   1c05c:	mov	r3, r0
   1c060:	mov	r2, r3
   1c064:	ldr	r3, [fp, #-16]
   1c068:	cmp	r2, r3
   1c06c:	movgt	r3, #1
   1c070:	movle	r3, #0
   1c074:	uxtb	r3, r3
   1c078:	b	1c170 <__assert_fail@plt+0xae10>
   1c07c:	ldr	r3, [fp, #4]
   1c080:	cmn	r3, #1
   1c084:	bne	1c0a4 <__assert_fail@plt+0xad44>
   1c088:	ldr	r3, [fp, #-16]
   1c08c:	add	r3, r3, #-2147483648	; 0x80000000
   1c090:	cmp	r3, #0
   1c094:	movgt	r3, #1
   1c098:	movle	r3, #0
   1c09c:	uxtb	r3, r3
   1c0a0:	b	1c170 <__assert_fail@plt+0xae10>
   1c0a4:	ldr	r1, [fp, #4]
   1c0a8:	mov	r0, #-2147483648	; 0x80000000
   1c0ac:	bl	1eab4 <__assert_fail@plt+0xd754>
   1c0b0:	mov	r3, r0
   1c0b4:	mov	r2, r3
   1c0b8:	ldr	r3, [fp, #-16]
   1c0bc:	cmp	r2, r3
   1c0c0:	movlt	r3, #1
   1c0c4:	movge	r3, #0
   1c0c8:	uxtb	r3, r3
   1c0cc:	b	1c170 <__assert_fail@plt+0xae10>
   1c0d0:	ldr	r3, [fp, #4]
   1c0d4:	cmp	r3, #0
   1c0d8:	beq	1c16c <__assert_fail@plt+0xae0c>
   1c0dc:	ldr	r3, [fp, #-16]
   1c0e0:	cmp	r3, #0
   1c0e4:	bge	1c140 <__assert_fail@plt+0xade0>
   1c0e8:	ldr	r3, [fp, #-16]
   1c0ec:	cmn	r3, #1
   1c0f0:	bne	1c110 <__assert_fail@plt+0xadb0>
   1c0f4:	ldr	r3, [fp, #4]
   1c0f8:	add	r3, r3, #-2147483648	; 0x80000000
   1c0fc:	cmp	r3, #0
   1c100:	movgt	r3, #1
   1c104:	movle	r3, #0
   1c108:	uxtb	r3, r3
   1c10c:	b	1c170 <__assert_fail@plt+0xae10>
   1c110:	ldr	r3, [fp, #-16]
   1c114:	mov	r1, r3
   1c118:	mov	r0, #-2147483648	; 0x80000000
   1c11c:	bl	1eab4 <__assert_fail@plt+0xd754>
   1c120:	mov	r3, r0
   1c124:	mov	r2, r3
   1c128:	ldr	r3, [fp, #4]
   1c12c:	cmp	r2, r3
   1c130:	movlt	r3, #1
   1c134:	movge	r3, #0
   1c138:	uxtb	r3, r3
   1c13c:	b	1c170 <__assert_fail@plt+0xae10>
   1c140:	ldr	r1, [fp, #4]
   1c144:	mvn	r0, #-2147483648	; 0x80000000
   1c148:	bl	1eab4 <__assert_fail@plt+0xd754>
   1c14c:	mov	r3, r0
   1c150:	mov	r2, r3
   1c154:	ldr	r3, [fp, #-16]
   1c158:	cmp	r2, r3
   1c15c:	movlt	r3, #1
   1c160:	movge	r3, #0
   1c164:	uxtb	r3, r3
   1c168:	b	1c170 <__assert_fail@plt+0xae10>
   1c16c:	mov	r3, #0
   1c170:	cmp	r3, #0
   1c174:	beq	1c194 <__assert_fail@plt+0xae34>
   1c178:	ldr	r3, [fp, #-16]
   1c17c:	mov	r2, r3
   1c180:	ldr	r3, [fp, #4]
   1c184:	mul	r3, r3, r2
   1c188:	str	r3, [fp, #-20]	; 0xffffffec
   1c18c:	mov	r3, #1
   1c190:	b	1c1ac <__assert_fail@plt+0xae4c>
   1c194:	ldr	r3, [fp, #-16]
   1c198:	mov	r2, r3
   1c19c:	ldr	r3, [fp, #4]
   1c1a0:	mul	r3, r3, r2
   1c1a4:	str	r3, [fp, #-20]	; 0xffffffec
   1c1a8:	mov	r3, #0
   1c1ac:	cmp	r3, #0
   1c1b0:	beq	1c1bc <__assert_fail@plt+0xae5c>
   1c1b4:	mvn	r3, #-2147483648	; 0x80000000
   1c1b8:	b	1c1d4 <__assert_fail@plt+0xae74>
   1c1bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c1c0:	cmp	r3, #63	; 0x3f
   1c1c4:	bgt	1c1d0 <__assert_fail@plt+0xae70>
   1c1c8:	mov	r3, #64	; 0x40
   1c1cc:	b	1c1d4 <__assert_fail@plt+0xae74>
   1c1d0:	mov	r3, #0
   1c1d4:	str	r3, [fp, #-12]
   1c1d8:	ldr	r3, [fp, #-12]
   1c1dc:	cmp	r3, #0
   1c1e0:	beq	1c21c <__assert_fail@plt+0xaebc>
   1c1e4:	ldr	r1, [fp, #4]
   1c1e8:	ldr	r0, [fp, #-12]
   1c1ec:	bl	1eab4 <__assert_fail@plt+0xd754>
   1c1f0:	mov	r3, r0
   1c1f4:	str	r3, [fp, #-16]
   1c1f8:	ldr	r3, [fp, #-12]
   1c1fc:	ldr	r1, [fp, #4]
   1c200:	mov	r0, r3
   1c204:	bl	1ecd4 <__assert_fail@plt+0xd974>
   1c208:	mov	r3, r1
   1c20c:	mov	r2, r3
   1c210:	ldr	r3, [fp, #-12]
   1c214:	sub	r3, r3, r2
   1c218:	str	r3, [fp, #-20]	; 0xffffffec
   1c21c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c220:	cmp	r3, #0
   1c224:	bne	1c234 <__assert_fail@plt+0xaed4>
   1c228:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c22c:	mov	r2, #0
   1c230:	str	r2, [r3]
   1c234:	ldr	r2, [fp, #-16]
   1c238:	ldr	r3, [fp, #-8]
   1c23c:	sub	r2, r2, r3
   1c240:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c244:	cmp	r2, r3
   1c248:	bge	1c480 <__assert_fail@plt+0xb120>
   1c24c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c250:	cmp	r3, #0
   1c254:	bge	1c278 <__assert_fail@plt+0xaf18>
   1c258:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c25c:	rsb	r2, r3, #-2147483648	; 0x80000000
   1c260:	ldr	r3, [fp, #-8]
   1c264:	cmp	r2, r3
   1c268:	movgt	r3, #1
   1c26c:	movle	r3, #0
   1c270:	uxtb	r3, r3
   1c274:	b	1c2c4 <__assert_fail@plt+0xaf64>
   1c278:	ldr	r3, [fp, #-8]
   1c27c:	cmp	r3, #0
   1c280:	bge	1c2a4 <__assert_fail@plt+0xaf44>
   1c284:	ldr	r3, [fp, #-8]
   1c288:	rsb	r2, r3, #-2147483648	; 0x80000000
   1c28c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c290:	cmp	r2, r3
   1c294:	movgt	r3, #1
   1c298:	movle	r3, #0
   1c29c:	uxtb	r3, r3
   1c2a0:	b	1c2c4 <__assert_fail@plt+0xaf64>
   1c2a4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1c2a8:	mvn	r3, #-2147483648	; 0x80000000
   1c2ac:	sub	r3, r3, r2
   1c2b0:	ldr	r2, [fp, #-8]
   1c2b4:	cmp	r3, r2
   1c2b8:	movlt	r3, #1
   1c2bc:	movge	r3, #0
   1c2c0:	uxtb	r3, r3
   1c2c4:	cmp	r3, #0
   1c2c8:	beq	1c2e0 <__assert_fail@plt+0xaf80>
   1c2cc:	ldr	r2, [fp, #-8]
   1c2d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c2d4:	add	r3, r2, r3
   1c2d8:	str	r3, [fp, #-16]
   1c2dc:	b	1c47c <__assert_fail@plt+0xb11c>
   1c2e0:	ldr	r2, [fp, #-8]
   1c2e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c2e8:	add	r3, r2, r3
   1c2ec:	str	r3, [fp, #-16]
   1c2f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c2f4:	cmp	r3, #0
   1c2f8:	blt	1c30c <__assert_fail@plt+0xafac>
   1c2fc:	ldr	r3, [fp, #-16]
   1c300:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1c304:	cmp	r2, r3
   1c308:	blt	1c47c <__assert_fail@plt+0xb11c>
   1c30c:	ldr	r3, [fp, #4]
   1c310:	cmp	r3, #0
   1c314:	bge	1c3a4 <__assert_fail@plt+0xb044>
   1c318:	ldr	r3, [fp, #-16]
   1c31c:	cmp	r3, #0
   1c320:	bge	1c350 <__assert_fail@plt+0xaff0>
   1c324:	ldr	r1, [fp, #4]
   1c328:	mvn	r0, #-2147483648	; 0x80000000
   1c32c:	bl	1eab4 <__assert_fail@plt+0xd754>
   1c330:	mov	r3, r0
   1c334:	mov	r2, r3
   1c338:	ldr	r3, [fp, #-16]
   1c33c:	cmp	r2, r3
   1c340:	movgt	r3, #1
   1c344:	movle	r3, #0
   1c348:	uxtb	r3, r3
   1c34c:	b	1c444 <__assert_fail@plt+0xb0e4>
   1c350:	ldr	r3, [fp, #4]
   1c354:	cmn	r3, #1
   1c358:	bne	1c378 <__assert_fail@plt+0xb018>
   1c35c:	ldr	r3, [fp, #-16]
   1c360:	add	r3, r3, #-2147483648	; 0x80000000
   1c364:	cmp	r3, #0
   1c368:	movgt	r3, #1
   1c36c:	movle	r3, #0
   1c370:	uxtb	r3, r3
   1c374:	b	1c444 <__assert_fail@plt+0xb0e4>
   1c378:	ldr	r1, [fp, #4]
   1c37c:	mov	r0, #-2147483648	; 0x80000000
   1c380:	bl	1eab4 <__assert_fail@plt+0xd754>
   1c384:	mov	r3, r0
   1c388:	mov	r2, r3
   1c38c:	ldr	r3, [fp, #-16]
   1c390:	cmp	r2, r3
   1c394:	movlt	r3, #1
   1c398:	movge	r3, #0
   1c39c:	uxtb	r3, r3
   1c3a0:	b	1c444 <__assert_fail@plt+0xb0e4>
   1c3a4:	ldr	r3, [fp, #4]
   1c3a8:	cmp	r3, #0
   1c3ac:	beq	1c440 <__assert_fail@plt+0xb0e0>
   1c3b0:	ldr	r3, [fp, #-16]
   1c3b4:	cmp	r3, #0
   1c3b8:	bge	1c414 <__assert_fail@plt+0xb0b4>
   1c3bc:	ldr	r3, [fp, #-16]
   1c3c0:	cmn	r3, #1
   1c3c4:	bne	1c3e4 <__assert_fail@plt+0xb084>
   1c3c8:	ldr	r3, [fp, #4]
   1c3cc:	add	r3, r3, #-2147483648	; 0x80000000
   1c3d0:	cmp	r3, #0
   1c3d4:	movgt	r3, #1
   1c3d8:	movle	r3, #0
   1c3dc:	uxtb	r3, r3
   1c3e0:	b	1c444 <__assert_fail@plt+0xb0e4>
   1c3e4:	ldr	r3, [fp, #-16]
   1c3e8:	mov	r1, r3
   1c3ec:	mov	r0, #-2147483648	; 0x80000000
   1c3f0:	bl	1eab4 <__assert_fail@plt+0xd754>
   1c3f4:	mov	r3, r0
   1c3f8:	mov	r2, r3
   1c3fc:	ldr	r3, [fp, #4]
   1c400:	cmp	r2, r3
   1c404:	movlt	r3, #1
   1c408:	movge	r3, #0
   1c40c:	uxtb	r3, r3
   1c410:	b	1c444 <__assert_fail@plt+0xb0e4>
   1c414:	ldr	r1, [fp, #4]
   1c418:	mvn	r0, #-2147483648	; 0x80000000
   1c41c:	bl	1eab4 <__assert_fail@plt+0xd754>
   1c420:	mov	r3, r0
   1c424:	mov	r2, r3
   1c428:	ldr	r3, [fp, #-16]
   1c42c:	cmp	r2, r3
   1c430:	movlt	r3, #1
   1c434:	movge	r3, #0
   1c438:	uxtb	r3, r3
   1c43c:	b	1c444 <__assert_fail@plt+0xb0e4>
   1c440:	mov	r3, #0
   1c444:	cmp	r3, #0
   1c448:	beq	1c464 <__assert_fail@plt+0xb104>
   1c44c:	ldr	r3, [fp, #-16]
   1c450:	mov	r2, r3
   1c454:	ldr	r3, [fp, #4]
   1c458:	mul	r3, r3, r2
   1c45c:	str	r3, [fp, #-20]	; 0xffffffec
   1c460:	b	1c47c <__assert_fail@plt+0xb11c>
   1c464:	ldr	r3, [fp, #-16]
   1c468:	mov	r2, r3
   1c46c:	ldr	r3, [fp, #4]
   1c470:	mul	r3, r3, r2
   1c474:	str	r3, [fp, #-20]	; 0xffffffec
   1c478:	b	1c480 <__assert_fail@plt+0xb120>
   1c47c:	bl	1c6a4 <__assert_fail@plt+0xb344>
   1c480:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c484:	mov	r1, r3
   1c488:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c48c:	bl	1bc18 <__assert_fail@plt+0xa8b8>
   1c490:	str	r0, [fp, #-24]	; 0xffffffe8
   1c494:	ldr	r2, [fp, #-16]
   1c498:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c49c:	str	r2, [r3]
   1c4a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c4a4:	mov	r0, r3
   1c4a8:	sub	sp, fp, #4
   1c4ac:	pop	{fp, pc}
   1c4b0:	push	{fp, lr}
   1c4b4:	add	fp, sp, #4
   1c4b8:	sub	sp, sp, #8
   1c4bc:	str	r0, [fp, #-8]
   1c4c0:	mov	r1, #1
   1c4c4:	ldr	r0, [fp, #-8]
   1c4c8:	bl	1c508 <__assert_fail@plt+0xb1a8>
   1c4cc:	mov	r3, r0
   1c4d0:	mov	r0, r3
   1c4d4:	sub	sp, fp, #4
   1c4d8:	pop	{fp, pc}
   1c4dc:	push	{fp, lr}
   1c4e0:	add	fp, sp, #4
   1c4e4:	sub	sp, sp, #8
   1c4e8:	str	r0, [fp, #-8]
   1c4ec:	mov	r1, #1
   1c4f0:	ldr	r0, [fp, #-8]
   1c4f4:	bl	1c544 <__assert_fail@plt+0xb1e4>
   1c4f8:	mov	r3, r0
   1c4fc:	mov	r0, r3
   1c500:	sub	sp, fp, #4
   1c504:	pop	{fp, pc}
   1c508:	push	{fp, lr}
   1c50c:	add	fp, sp, #4
   1c510:	sub	sp, sp, #8
   1c514:	str	r0, [fp, #-8]
   1c518:	str	r1, [fp, #-12]
   1c51c:	ldr	r1, [fp, #-12]
   1c520:	ldr	r0, [fp, #-8]
   1c524:	bl	1cfa8 <__assert_fail@plt+0xbc48>
   1c528:	mov	r3, r0
   1c52c:	mov	r0, r3
   1c530:	bl	1bb58 <__assert_fail@plt+0xa7f8>
   1c534:	mov	r3, r0
   1c538:	mov	r0, r3
   1c53c:	sub	sp, fp, #4
   1c540:	pop	{fp, pc}
   1c544:	push	{fp, lr}
   1c548:	add	fp, sp, #4
   1c54c:	sub	sp, sp, #8
   1c550:	str	r0, [fp, #-8]
   1c554:	str	r1, [fp, #-12]
   1c558:	ldr	r1, [fp, #-12]
   1c55c:	ldr	r0, [fp, #-8]
   1c560:	bl	1df2c <__assert_fail@plt+0xcbcc>
   1c564:	mov	r3, r0
   1c568:	mov	r0, r3
   1c56c:	bl	1bb58 <__assert_fail@plt+0xa7f8>
   1c570:	mov	r3, r0
   1c574:	mov	r0, r3
   1c578:	sub	sp, fp, #4
   1c57c:	pop	{fp, pc}
   1c580:	push	{fp, lr}
   1c584:	add	fp, sp, #4
   1c588:	sub	sp, sp, #8
   1c58c:	str	r0, [fp, #-8]
   1c590:	str	r1, [fp, #-12]
   1c594:	ldr	r0, [fp, #-12]
   1c598:	bl	1bb88 <__assert_fail@plt+0xa828>
   1c59c:	mov	r3, r0
   1c5a0:	ldr	r2, [fp, #-12]
   1c5a4:	ldr	r1, [fp, #-8]
   1c5a8:	mov	r0, r3
   1c5ac:	bl	1109c <memcpy@plt>
   1c5b0:	mov	r3, r0
   1c5b4:	mov	r0, r3
   1c5b8:	sub	sp, fp, #4
   1c5bc:	pop	{fp, pc}
   1c5c0:	push	{fp, lr}
   1c5c4:	add	fp, sp, #4
   1c5c8:	sub	sp, sp, #8
   1c5cc:	str	r0, [fp, #-8]
   1c5d0:	str	r1, [fp, #-12]
   1c5d4:	ldr	r0, [fp, #-12]
   1c5d8:	bl	1bbbc <__assert_fail@plt+0xa85c>
   1c5dc:	mov	r3, r0
   1c5e0:	mov	r0, r3
   1c5e4:	ldr	r3, [fp, #-12]
   1c5e8:	mov	r2, r3
   1c5ec:	ldr	r1, [fp, #-8]
   1c5f0:	bl	1109c <memcpy@plt>
   1c5f4:	mov	r3, r0
   1c5f8:	mov	r0, r3
   1c5fc:	sub	sp, fp, #4
   1c600:	pop	{fp, pc}
   1c604:	push	{fp, lr}
   1c608:	add	fp, sp, #4
   1c60c:	sub	sp, sp, #16
   1c610:	str	r0, [fp, #-16]
   1c614:	str	r1, [fp, #-20]	; 0xffffffec
   1c618:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c61c:	add	r3, r3, #1
   1c620:	mov	r0, r3
   1c624:	bl	1bbbc <__assert_fail@plt+0xa85c>
   1c628:	mov	r3, r0
   1c62c:	str	r3, [fp, #-8]
   1c630:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c634:	ldr	r2, [fp, #-8]
   1c638:	add	r3, r2, r3
   1c63c:	mov	r2, #0
   1c640:	strb	r2, [r3]
   1c644:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c648:	mov	r2, r3
   1c64c:	ldr	r1, [fp, #-16]
   1c650:	ldr	r0, [fp, #-8]
   1c654:	bl	1109c <memcpy@plt>
   1c658:	mov	r3, r0
   1c65c:	mov	r0, r3
   1c660:	sub	sp, fp, #4
   1c664:	pop	{fp, pc}
   1c668:	push	{fp, lr}
   1c66c:	add	fp, sp, #4
   1c670:	sub	sp, sp, #8
   1c674:	str	r0, [fp, #-8]
   1c678:	ldr	r0, [fp, #-8]
   1c67c:	bl	111ec <strlen@plt>
   1c680:	mov	r3, r0
   1c684:	add	r3, r3, #1
   1c688:	mov	r1, r3
   1c68c:	ldr	r0, [fp, #-8]
   1c690:	bl	1c580 <__assert_fail@plt+0xb220>
   1c694:	mov	r3, r0
   1c698:	mov	r0, r3
   1c69c:	sub	sp, fp, #4
   1c6a0:	pop	{fp, pc}
   1c6a4:	push	{r4, r5, fp, lr}
   1c6a8:	add	fp, sp, #12
   1c6ac:	ldr	r3, [pc, #32]	; 1c6d4 <__assert_fail@plt+0xb374>
   1c6b0:	ldr	r4, [r3]
   1c6b4:	ldr	r0, [pc, #28]	; 1c6d8 <__assert_fail@plt+0xb378>
   1c6b8:	bl	111d4 <gettext@plt>
   1c6bc:	mov	r3, r0
   1c6c0:	ldr	r2, [pc, #20]	; 1c6dc <__assert_fail@plt+0xb37c>
   1c6c4:	mov	r1, #0
   1c6c8:	mov	r0, r4
   1c6cc:	bl	11168 <error@plt>
   1c6d0:	bl	11318 <abort@plt>
   1c6d4:	andeq	r1, r3, r0, asr #2
   1c6d8:	andeq	r0, r2, ip, lsl r6
   1c6dc:	andeq	r0, r2, r0, lsr r6
   1c6e0:	push	{fp, lr}
   1c6e4:	add	fp, sp, #4
   1c6e8:	sub	sp, sp, #24
   1c6ec:	str	r0, [fp, #-16]
   1c6f0:	str	r1, [fp, #-20]	; 0xffffffec
   1c6f4:	str	r2, [fp, #-24]	; 0xffffffe8
   1c6f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c6fc:	orr	r3, r3, #512	; 0x200
   1c700:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c704:	mov	r1, r3
   1c708:	ldr	r0, [fp, #-16]
   1c70c:	bl	13c74 <__assert_fail@plt+0x2914>
   1c710:	str	r0, [fp, #-8]
   1c714:	ldr	r3, [fp, #-8]
   1c718:	cmp	r3, #0
   1c71c:	bne	1c74c <__assert_fail@plt+0xb3ec>
   1c720:	bl	11228 <__errno_location@plt>
   1c724:	mov	r3, r0
   1c728:	ldr	r3, [r3]
   1c72c:	cmp	r3, #22
   1c730:	bne	1c748 <__assert_fail@plt+0xb3e8>
   1c734:	ldr	r3, [pc, #32]	; 1c75c <__assert_fail@plt+0xb3fc>
   1c738:	mov	r2, #41	; 0x29
   1c73c:	ldr	r1, [pc, #28]	; 1c760 <__assert_fail@plt+0xb400>
   1c740:	ldr	r0, [pc, #28]	; 1c764 <__assert_fail@plt+0xb404>
   1c744:	bl	11360 <__assert_fail@plt>
   1c748:	bl	1c6a4 <__assert_fail@plt+0xb344>
   1c74c:	ldr	r3, [fp, #-8]
   1c750:	mov	r0, r3
   1c754:	sub	sp, fp, #4
   1c758:	pop	{fp, pc}
   1c75c:	andeq	r0, r2, r0, asr r6
   1c760:	andeq	r0, r2, r4, lsr r6
   1c764:	andeq	r0, r2, r0, asr #12
   1c768:	push	{fp}		; (str fp, [sp, #-4]!)
   1c76c:	add	fp, sp, #0
   1c770:	sub	sp, sp, #12
   1c774:	str	r0, [fp, #-8]
   1c778:	str	r1, [fp, #-12]
   1c77c:	ldr	r3, [fp, #-8]
   1c780:	ldr	r3, [r3, #48]	; 0x30
   1c784:	and	r3, r3, #16
   1c788:	cmp	r3, #0
   1c78c:	beq	1c7a4 <__assert_fail@plt+0xb444>
   1c790:	ldr	r3, [fp, #-8]
   1c794:	ldr	r3, [r3, #48]	; 0x30
   1c798:	and	r3, r3, #1
   1c79c:	cmp	r3, #0
   1c7a0:	beq	1c7dc <__assert_fail@plt+0xb47c>
   1c7a4:	ldr	r3, [fp, #-8]
   1c7a8:	ldr	r3, [r3, #48]	; 0x30
   1c7ac:	and	r3, r3, #16
   1c7b0:	cmp	r3, #0
   1c7b4:	beq	1c7e4 <__assert_fail@plt+0xb484>
   1c7b8:	ldr	r3, [fp, #-8]
   1c7bc:	ldr	r3, [r3, #48]	; 0x30
   1c7c0:	and	r3, r3, #1
   1c7c4:	cmp	r3, #0
   1c7c8:	beq	1c7e4 <__assert_fail@plt+0xb484>
   1c7cc:	ldr	r3, [fp, #-12]
   1c7d0:	ldr	r3, [r3, #48]	; 0x30
   1c7d4:	cmp	r3, #0
   1c7d8:	beq	1c7e4 <__assert_fail@plt+0xb484>
   1c7dc:	mov	r3, #1
   1c7e0:	b	1c7e8 <__assert_fail@plt+0xb488>
   1c7e4:	mov	r3, #0
   1c7e8:	and	r3, r3, #1
   1c7ec:	uxtb	r3, r3
   1c7f0:	mov	r0, r3
   1c7f4:	add	sp, fp, #0
   1c7f8:	pop	{fp}		; (ldr fp, [sp], #4)
   1c7fc:	bx	lr
   1c800:	push	{fp, lr}
   1c804:	add	fp, sp, #4
   1c808:	sub	sp, sp, #16
   1c80c:	str	r0, [fp, #-16]
   1c810:	str	r1, [fp, #-20]	; 0xffffffec
   1c814:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c818:	cmp	r3, #0
   1c81c:	bge	1c850 <__assert_fail@plt+0xb4f0>
   1c820:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c824:	mov	r0, #0
   1c828:	bl	1eab4 <__assert_fail@plt+0xd754>
   1c82c:	mov	r3, r0
   1c830:	mov	r2, r3
   1c834:	ldr	r3, [fp, #-16]
   1c838:	ldr	r3, [r3]
   1c83c:	cmp	r2, r3
   1c840:	movcc	r3, #1
   1c844:	movcs	r3, #0
   1c848:	uxtb	r3, r3
   1c84c:	b	1c898 <__assert_fail@plt+0xb538>
   1c850:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c854:	cmp	r3, #0
   1c858:	beq	1c88c <__assert_fail@plt+0xb52c>
   1c85c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c860:	mov	r1, r3
   1c864:	mvn	r0, #0
   1c868:	bl	1e8a8 <__assert_fail@plt+0xd548>
   1c86c:	mov	r3, r0
   1c870:	mov	r2, r3
   1c874:	ldr	r3, [fp, #-16]
   1c878:	ldr	r3, [r3]
   1c87c:	cmp	r2, r3
   1c880:	bcs	1c88c <__assert_fail@plt+0xb52c>
   1c884:	mov	r3, #1
   1c888:	b	1c890 <__assert_fail@plt+0xb530>
   1c88c:	mov	r3, #0
   1c890:	and	r3, r3, #1
   1c894:	uxtb	r3, r3
   1c898:	cmp	r3, #0
   1c89c:	beq	1c8bc <__assert_fail@plt+0xb55c>
   1c8a0:	ldr	r3, [fp, #-16]
   1c8a4:	ldr	r3, [r3]
   1c8a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c8ac:	mul	r3, r2, r3
   1c8b0:	str	r3, [fp, #-8]
   1c8b4:	mov	r3, #1
   1c8b8:	b	1c8d4 <__assert_fail@plt+0xb574>
   1c8bc:	ldr	r3, [fp, #-16]
   1c8c0:	ldr	r3, [r3]
   1c8c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c8c8:	mul	r3, r2, r3
   1c8cc:	str	r3, [fp, #-8]
   1c8d0:	mov	r3, #0
   1c8d4:	cmp	r3, #0
   1c8d8:	beq	1c8f0 <__assert_fail@plt+0xb590>
   1c8dc:	ldr	r3, [fp, #-16]
   1c8e0:	mvn	r2, #0
   1c8e4:	str	r2, [r3]
   1c8e8:	mov	r3, #1
   1c8ec:	b	1c900 <__assert_fail@plt+0xb5a0>
   1c8f0:	ldr	r2, [fp, #-8]
   1c8f4:	ldr	r3, [fp, #-16]
   1c8f8:	str	r2, [r3]
   1c8fc:	mov	r3, #0
   1c900:	mov	r0, r3
   1c904:	sub	sp, fp, #4
   1c908:	pop	{fp, pc}
   1c90c:	push	{fp, lr}
   1c910:	add	fp, sp, #4
   1c914:	sub	sp, sp, #24
   1c918:	str	r0, [fp, #-16]
   1c91c:	str	r1, [fp, #-20]	; 0xffffffec
   1c920:	str	r2, [fp, #-24]	; 0xffffffe8
   1c924:	mov	r3, #0
   1c928:	str	r3, [fp, #-8]
   1c92c:	b	1c94c <__assert_fail@plt+0xb5ec>
   1c930:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c934:	ldr	r0, [fp, #-16]
   1c938:	bl	1c800 <__assert_fail@plt+0xb4a0>
   1c93c:	mov	r2, r0
   1c940:	ldr	r3, [fp, #-8]
   1c944:	orr	r3, r3, r2
   1c948:	str	r3, [fp, #-8]
   1c94c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c950:	sub	r2, r3, #1
   1c954:	str	r2, [fp, #-24]	; 0xffffffe8
   1c958:	cmp	r3, #0
   1c95c:	bne	1c930 <__assert_fail@plt+0xb5d0>
   1c960:	ldr	r3, [fp, #-8]
   1c964:	mov	r0, r3
   1c968:	sub	sp, fp, #4
   1c96c:	pop	{fp, pc}
   1c970:	push	{fp, lr}
   1c974:	add	fp, sp, #4
   1c978:	sub	sp, sp, #56	; 0x38
   1c97c:	str	r0, [fp, #-48]	; 0xffffffd0
   1c980:	str	r1, [fp, #-52]	; 0xffffffcc
   1c984:	str	r2, [fp, #-56]	; 0xffffffc8
   1c988:	str	r3, [fp, #-60]	; 0xffffffc4
   1c98c:	mov	r3, #0
   1c990:	str	r3, [fp, #-8]
   1c994:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1c998:	cmp	r3, #0
   1c99c:	blt	1c9ac <__assert_fail@plt+0xb64c>
   1c9a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1c9a4:	cmp	r3, #36	; 0x24
   1c9a8:	ble	1c9c0 <__assert_fail@plt+0xb660>
   1c9ac:	ldr	r3, [pc, #1512]	; 1cf9c <__assert_fail@plt+0xbc3c>
   1c9b0:	mov	r2, #85	; 0x55
   1c9b4:	ldr	r1, [pc, #1508]	; 1cfa0 <__assert_fail@plt+0xbc40>
   1c9b8:	ldr	r0, [pc, #1508]	; 1cfa4 <__assert_fail@plt+0xbc44>
   1c9bc:	bl	11360 <__assert_fail@plt>
   1c9c0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1c9c4:	cmp	r3, #0
   1c9c8:	bne	1c9d4 <__assert_fail@plt+0xb674>
   1c9cc:	sub	r3, fp, #36	; 0x24
   1c9d0:	b	1c9d8 <__assert_fail@plt+0xb678>
   1c9d4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1c9d8:	str	r3, [fp, #-32]	; 0xffffffe0
   1c9dc:	bl	11228 <__errno_location@plt>
   1c9e0:	mov	r2, r0
   1c9e4:	mov	r3, #0
   1c9e8:	str	r3, [r2]
   1c9ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1c9f0:	str	r3, [fp, #-12]
   1c9f4:	ldr	r3, [fp, #-12]
   1c9f8:	ldrb	r3, [r3]
   1c9fc:	strb	r3, [fp, #-13]
   1ca00:	b	1ca1c <__assert_fail@plt+0xb6bc>
   1ca04:	ldr	r3, [fp, #-12]
   1ca08:	add	r3, r3, #1
   1ca0c:	str	r3, [fp, #-12]
   1ca10:	ldr	r3, [fp, #-12]
   1ca14:	ldrb	r3, [r3]
   1ca18:	strb	r3, [fp, #-13]
   1ca1c:	bl	111bc <__ctype_b_loc@plt>
   1ca20:	mov	r3, r0
   1ca24:	ldr	r2, [r3]
   1ca28:	ldrb	r3, [fp, #-13]
   1ca2c:	lsl	r3, r3, #1
   1ca30:	add	r3, r2, r3
   1ca34:	ldrh	r3, [r3]
   1ca38:	and	r3, r3, #8192	; 0x2000
   1ca3c:	cmp	r3, #0
   1ca40:	bne	1ca04 <__assert_fail@plt+0xb6a4>
   1ca44:	ldrb	r3, [fp, #-13]
   1ca48:	cmp	r3, #45	; 0x2d
   1ca4c:	bne	1ca58 <__assert_fail@plt+0xb6f8>
   1ca50:	mov	r3, #4
   1ca54:	b	1cf90 <__assert_fail@plt+0xbc30>
   1ca58:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ca5c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1ca60:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ca64:	bl	111e0 <strtoul@plt>
   1ca68:	mov	r3, r0
   1ca6c:	str	r3, [fp, #-40]	; 0xffffffd8
   1ca70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ca74:	ldr	r2, [r3]
   1ca78:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1ca7c:	cmp	r2, r3
   1ca80:	bne	1cadc <__assert_fail@plt+0xb77c>
   1ca84:	ldr	r3, [fp, #4]
   1ca88:	cmp	r3, #0
   1ca8c:	beq	1cad4 <__assert_fail@plt+0xb774>
   1ca90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ca94:	ldr	r3, [r3]
   1ca98:	ldrb	r3, [r3]
   1ca9c:	cmp	r3, #0
   1caa0:	beq	1cad4 <__assert_fail@plt+0xb774>
   1caa4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1caa8:	ldr	r3, [r3]
   1caac:	ldrb	r3, [r3]
   1cab0:	mov	r1, r3
   1cab4:	ldr	r0, [fp, #4]
   1cab8:	bl	111f8 <strchr@plt>
   1cabc:	mov	r3, r0
   1cac0:	cmp	r3, #0
   1cac4:	beq	1cad4 <__assert_fail@plt+0xb774>
   1cac8:	mov	r3, #1
   1cacc:	str	r3, [fp, #-40]	; 0xffffffd8
   1cad0:	b	1cb14 <__assert_fail@plt+0xb7b4>
   1cad4:	mov	r3, #4
   1cad8:	b	1cf90 <__assert_fail@plt+0xbc30>
   1cadc:	bl	11228 <__errno_location@plt>
   1cae0:	mov	r3, r0
   1cae4:	ldr	r3, [r3]
   1cae8:	cmp	r3, #0
   1caec:	beq	1cb14 <__assert_fail@plt+0xb7b4>
   1caf0:	bl	11228 <__errno_location@plt>
   1caf4:	mov	r3, r0
   1caf8:	ldr	r3, [r3]
   1cafc:	cmp	r3, #34	; 0x22
   1cb00:	beq	1cb0c <__assert_fail@plt+0xb7ac>
   1cb04:	mov	r3, #4
   1cb08:	b	1cf90 <__assert_fail@plt+0xbc30>
   1cb0c:	mov	r3, #1
   1cb10:	str	r3, [fp, #-8]
   1cb14:	ldr	r3, [fp, #4]
   1cb18:	cmp	r3, #0
   1cb1c:	bne	1cb34 <__assert_fail@plt+0xb7d4>
   1cb20:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1cb24:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1cb28:	str	r2, [r3]
   1cb2c:	ldr	r3, [fp, #-8]
   1cb30:	b	1cf90 <__assert_fail@plt+0xbc30>
   1cb34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cb38:	ldr	r3, [r3]
   1cb3c:	ldrb	r3, [r3]
   1cb40:	cmp	r3, #0
   1cb44:	beq	1cf80 <__assert_fail@plt+0xbc20>
   1cb48:	mov	r3, #1024	; 0x400
   1cb4c:	str	r3, [fp, #-20]	; 0xffffffec
   1cb50:	mov	r3, #1
   1cb54:	str	r3, [fp, #-24]	; 0xffffffe8
   1cb58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cb5c:	ldr	r3, [r3]
   1cb60:	ldrb	r3, [r3]
   1cb64:	mov	r1, r3
   1cb68:	ldr	r0, [fp, #4]
   1cb6c:	bl	111f8 <strchr@plt>
   1cb70:	mov	r3, r0
   1cb74:	cmp	r3, #0
   1cb78:	bne	1cb94 <__assert_fail@plt+0xb834>
   1cb7c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1cb80:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1cb84:	str	r2, [r3]
   1cb88:	ldr	r3, [fp, #-8]
   1cb8c:	orr	r3, r3, #2
   1cb90:	b	1cf90 <__assert_fail@plt+0xbc30>
   1cb94:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cb98:	ldr	r3, [r3]
   1cb9c:	ldrb	r3, [r3]
   1cba0:	sub	r3, r3, #69	; 0x45
   1cba4:	cmp	r3, #47	; 0x2f
   1cba8:	ldrls	pc, [pc, r3, lsl #2]
   1cbac:	b	1ccf8 <__assert_fail@plt+0xb998>
   1cbb0:	andeq	ip, r1, r0, ror ip
   1cbb4:	strdeq	ip, [r1], -r8
   1cbb8:	andeq	ip, r1, r0, ror ip
   1cbbc:	strdeq	ip, [r1], -r8
   1cbc0:	strdeq	ip, [r1], -r8
   1cbc4:	strdeq	ip, [r1], -r8
   1cbc8:	andeq	ip, r1, r0, ror ip
   1cbcc:	strdeq	ip, [r1], -r8
   1cbd0:	andeq	ip, r1, r0, ror ip
   1cbd4:	strdeq	ip, [r1], -r8
   1cbd8:	strdeq	ip, [r1], -r8
   1cbdc:	andeq	ip, r1, r0, ror ip
   1cbe0:	strdeq	ip, [r1], -r8
   1cbe4:	strdeq	ip, [r1], -r8
   1cbe8:	strdeq	ip, [r1], -r8
   1cbec:	andeq	ip, r1, r0, ror ip
   1cbf0:	strdeq	ip, [r1], -r8
   1cbf4:	strdeq	ip, [r1], -r8
   1cbf8:	strdeq	ip, [r1], -r8
   1cbfc:	strdeq	ip, [r1], -r8
   1cc00:	andeq	ip, r1, r0, ror ip
   1cc04:	andeq	ip, r1, r0, ror ip
   1cc08:	strdeq	ip, [r1], -r8
   1cc0c:	strdeq	ip, [r1], -r8
   1cc10:	strdeq	ip, [r1], -r8
   1cc14:	strdeq	ip, [r1], -r8
   1cc18:	strdeq	ip, [r1], -r8
   1cc1c:	strdeq	ip, [r1], -r8
   1cc20:	strdeq	ip, [r1], -r8
   1cc24:	strdeq	ip, [r1], -r8
   1cc28:	strdeq	ip, [r1], -r8
   1cc2c:	strdeq	ip, [r1], -r8
   1cc30:	strdeq	ip, [r1], -r8
   1cc34:	strdeq	ip, [r1], -r8
   1cc38:	andeq	ip, r1, r0, ror ip
   1cc3c:	strdeq	ip, [r1], -r8
   1cc40:	strdeq	ip, [r1], -r8
   1cc44:	strdeq	ip, [r1], -r8
   1cc48:	andeq	ip, r1, r0, ror ip
   1cc4c:	strdeq	ip, [r1], -r8
   1cc50:	andeq	ip, r1, r0, ror ip
   1cc54:	strdeq	ip, [r1], -r8
   1cc58:	strdeq	ip, [r1], -r8
   1cc5c:	strdeq	ip, [r1], -r8
   1cc60:	strdeq	ip, [r1], -r8
   1cc64:	strdeq	ip, [r1], -r8
   1cc68:	strdeq	ip, [r1], -r8
   1cc6c:	andeq	ip, r1, r0, ror ip
   1cc70:	mov	r1, #48	; 0x30
   1cc74:	ldr	r0, [fp, #4]
   1cc78:	bl	111f8 <strchr@plt>
   1cc7c:	mov	r3, r0
   1cc80:	cmp	r3, #0
   1cc84:	beq	1ccf8 <__assert_fail@plt+0xb998>
   1cc88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cc8c:	ldr	r3, [r3]
   1cc90:	add	r3, r3, #1
   1cc94:	ldrb	r3, [r3]
   1cc98:	cmp	r3, #68	; 0x44
   1cc9c:	beq	1ccdc <__assert_fail@plt+0xb97c>
   1cca0:	cmp	r3, #105	; 0x69
   1cca4:	beq	1ccb4 <__assert_fail@plt+0xb954>
   1cca8:	cmp	r3, #66	; 0x42
   1ccac:	beq	1ccdc <__assert_fail@plt+0xb97c>
   1ccb0:	b	1ccf8 <__assert_fail@plt+0xb998>
   1ccb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ccb8:	ldr	r3, [r3]
   1ccbc:	add	r3, r3, #2
   1ccc0:	ldrb	r3, [r3]
   1ccc4:	cmp	r3, #66	; 0x42
   1ccc8:	bne	1ccf4 <__assert_fail@plt+0xb994>
   1cccc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ccd0:	add	r3, r3, #2
   1ccd4:	str	r3, [fp, #-24]	; 0xffffffe8
   1ccd8:	b	1ccf4 <__assert_fail@plt+0xb994>
   1ccdc:	mov	r3, #1000	; 0x3e8
   1cce0:	str	r3, [fp, #-20]	; 0xffffffec
   1cce4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cce8:	add	r3, r3, #1
   1ccec:	str	r3, [fp, #-24]	; 0xffffffe8
   1ccf0:	b	1ccf8 <__assert_fail@plt+0xb998>
   1ccf4:	nop			; (mov r0, r0)
   1ccf8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ccfc:	ldr	r3, [r3]
   1cd00:	ldrb	r3, [r3]
   1cd04:	sub	r3, r3, #66	; 0x42
   1cd08:	cmp	r3, #53	; 0x35
   1cd0c:	ldrls	pc, [pc, r3, lsl #2]
   1cd10:	b	1cf20 <__assert_fail@plt+0xbbc0>
   1cd14:	andeq	ip, r1, r4, lsl #28
   1cd18:	andeq	ip, r1, r0, lsr #30
   1cd1c:	andeq	ip, r1, r0, lsr #30
   1cd20:	andeq	ip, r1, r8, lsr #28
   1cd24:	andeq	ip, r1, r0, lsr #30
   1cd28:	andeq	ip, r1, r4, asr #28
   1cd2c:	andeq	ip, r1, r0, lsr #30
   1cd30:	andeq	ip, r1, r0, lsr #30
   1cd34:	andeq	ip, r1, r0, lsr #30
   1cd38:	andeq	ip, r1, r0, ror #28
   1cd3c:	andeq	ip, r1, r0, lsr #30
   1cd40:	andeq	ip, r1, ip, ror lr
   1cd44:	andeq	ip, r1, r0, lsr #30
   1cd48:	andeq	ip, r1, r0, lsr #30
   1cd4c:	muleq	r1, r8, lr
   1cd50:	andeq	ip, r1, r0, lsr #30
   1cd54:	andeq	ip, r1, r0, lsr #30
   1cd58:	andeq	ip, r1, r0, lsr #30
   1cd5c:			; <UNDEFINED> instruction: 0x0001ceb4
   1cd60:	andeq	ip, r1, r0, lsr #30
   1cd64:	andeq	ip, r1, r0, lsr #30
   1cd68:	andeq	ip, r1, r0, lsr #30
   1cd6c:	andeq	ip, r1, r0, lsr #30
   1cd70:	andeq	ip, r1, r8, ror #29
   1cd74:	andeq	ip, r1, r4, lsl #30
   1cd78:	andeq	ip, r1, r0, lsr #30
   1cd7c:	andeq	ip, r1, r0, lsr #30
   1cd80:	andeq	ip, r1, r0, lsr #30
   1cd84:	andeq	ip, r1, r0, lsr #30
   1cd88:	andeq	ip, r1, r0, lsr #30
   1cd8c:	andeq	ip, r1, r0, lsr #30
   1cd90:	andeq	ip, r1, r0, lsr #30
   1cd94:	andeq	ip, r1, ip, ror #27
   1cd98:	andeq	ip, r1, ip, lsl lr
   1cd9c:	andeq	ip, r1, r0, lsr #30
   1cda0:	andeq	ip, r1, r0, lsr #30
   1cda4:	andeq	ip, r1, r0, lsr #30
   1cda8:	andeq	ip, r1, r4, asr #28
   1cdac:	andeq	ip, r1, r0, lsr #30
   1cdb0:	andeq	ip, r1, r0, lsr #30
   1cdb4:	andeq	ip, r1, r0, lsr #30
   1cdb8:	andeq	ip, r1, r0, ror #28
   1cdbc:	andeq	ip, r1, r0, lsr #30
   1cdc0:	andeq	ip, r1, ip, ror lr
   1cdc4:	andeq	ip, r1, r0, lsr #30
   1cdc8:	andeq	ip, r1, r0, lsr #30
   1cdcc:	andeq	ip, r1, r0, lsr #30
   1cdd0:	andeq	ip, r1, r0, lsr #30
   1cdd4:	andeq	ip, r1, r0, lsr #30
   1cdd8:	andeq	ip, r1, r0, lsr #30
   1cddc:			; <UNDEFINED> instruction: 0x0001ceb4
   1cde0:	andeq	ip, r1, r0, lsr #30
   1cde4:	andeq	ip, r1, r0, lsr #30
   1cde8:	ldrdeq	ip, [r1], -r0
   1cdec:	sub	r3, fp, #40	; 0x28
   1cdf0:	mov	r1, #512	; 0x200
   1cdf4:	mov	r0, r3
   1cdf8:	bl	1c800 <__assert_fail@plt+0xb4a0>
   1cdfc:	str	r0, [fp, #-28]	; 0xffffffe4
   1ce00:	b	1cf38 <__assert_fail@plt+0xbbd8>
   1ce04:	sub	r3, fp, #40	; 0x28
   1ce08:	mov	r1, #1024	; 0x400
   1ce0c:	mov	r0, r3
   1ce10:	bl	1c800 <__assert_fail@plt+0xb4a0>
   1ce14:	str	r0, [fp, #-28]	; 0xffffffe4
   1ce18:	b	1cf38 <__assert_fail@plt+0xbbd8>
   1ce1c:	mov	r3, #0
   1ce20:	str	r3, [fp, #-28]	; 0xffffffe4
   1ce24:	b	1cf38 <__assert_fail@plt+0xbbd8>
   1ce28:	sub	r3, fp, #40	; 0x28
   1ce2c:	mov	r2, #6
   1ce30:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ce34:	mov	r0, r3
   1ce38:	bl	1c90c <__assert_fail@plt+0xb5ac>
   1ce3c:	str	r0, [fp, #-28]	; 0xffffffe4
   1ce40:	b	1cf38 <__assert_fail@plt+0xbbd8>
   1ce44:	sub	r3, fp, #40	; 0x28
   1ce48:	mov	r2, #3
   1ce4c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ce50:	mov	r0, r3
   1ce54:	bl	1c90c <__assert_fail@plt+0xb5ac>
   1ce58:	str	r0, [fp, #-28]	; 0xffffffe4
   1ce5c:	b	1cf38 <__assert_fail@plt+0xbbd8>
   1ce60:	sub	r3, fp, #40	; 0x28
   1ce64:	mov	r2, #1
   1ce68:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ce6c:	mov	r0, r3
   1ce70:	bl	1c90c <__assert_fail@plt+0xb5ac>
   1ce74:	str	r0, [fp, #-28]	; 0xffffffe4
   1ce78:	b	1cf38 <__assert_fail@plt+0xbbd8>
   1ce7c:	sub	r3, fp, #40	; 0x28
   1ce80:	mov	r2, #2
   1ce84:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ce88:	mov	r0, r3
   1ce8c:	bl	1c90c <__assert_fail@plt+0xb5ac>
   1ce90:	str	r0, [fp, #-28]	; 0xffffffe4
   1ce94:	b	1cf38 <__assert_fail@plt+0xbbd8>
   1ce98:	sub	r3, fp, #40	; 0x28
   1ce9c:	mov	r2, #5
   1cea0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cea4:	mov	r0, r3
   1cea8:	bl	1c90c <__assert_fail@plt+0xb5ac>
   1ceac:	str	r0, [fp, #-28]	; 0xffffffe4
   1ceb0:	b	1cf38 <__assert_fail@plt+0xbbd8>
   1ceb4:	sub	r3, fp, #40	; 0x28
   1ceb8:	mov	r2, #4
   1cebc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cec0:	mov	r0, r3
   1cec4:	bl	1c90c <__assert_fail@plt+0xb5ac>
   1cec8:	str	r0, [fp, #-28]	; 0xffffffe4
   1cecc:	b	1cf38 <__assert_fail@plt+0xbbd8>
   1ced0:	sub	r3, fp, #40	; 0x28
   1ced4:	mov	r1, #2
   1ced8:	mov	r0, r3
   1cedc:	bl	1c800 <__assert_fail@plt+0xb4a0>
   1cee0:	str	r0, [fp, #-28]	; 0xffffffe4
   1cee4:	b	1cf38 <__assert_fail@plt+0xbbd8>
   1cee8:	sub	r3, fp, #40	; 0x28
   1ceec:	mov	r2, #8
   1cef0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cef4:	mov	r0, r3
   1cef8:	bl	1c90c <__assert_fail@plt+0xb5ac>
   1cefc:	str	r0, [fp, #-28]	; 0xffffffe4
   1cf00:	b	1cf38 <__assert_fail@plt+0xbbd8>
   1cf04:	sub	r3, fp, #40	; 0x28
   1cf08:	mov	r2, #7
   1cf0c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cf10:	mov	r0, r3
   1cf14:	bl	1c90c <__assert_fail@plt+0xb5ac>
   1cf18:	str	r0, [fp, #-28]	; 0xffffffe4
   1cf1c:	b	1cf38 <__assert_fail@plt+0xbbd8>
   1cf20:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1cf24:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1cf28:	str	r2, [r3]
   1cf2c:	ldr	r3, [fp, #-8]
   1cf30:	orr	r3, r3, #2
   1cf34:	b	1cf90 <__assert_fail@plt+0xbc30>
   1cf38:	ldr	r2, [fp, #-8]
   1cf3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cf40:	orr	r3, r2, r3
   1cf44:	str	r3, [fp, #-8]
   1cf48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cf4c:	ldr	r2, [r3]
   1cf50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cf54:	add	r2, r2, r3
   1cf58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cf5c:	str	r2, [r3]
   1cf60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cf64:	ldr	r3, [r3]
   1cf68:	ldrb	r3, [r3]
   1cf6c:	cmp	r3, #0
   1cf70:	beq	1cf80 <__assert_fail@plt+0xbc20>
   1cf74:	ldr	r3, [fp, #-8]
   1cf78:	orr	r3, r3, #2
   1cf7c:	str	r3, [fp, #-8]
   1cf80:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1cf84:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1cf88:	str	r2, [r3]
   1cf8c:	ldr	r3, [fp, #-8]
   1cf90:	mov	r0, r3
   1cf94:	sub	sp, fp, #4
   1cf98:	pop	{fp, pc}
   1cf9c:	muleq	r2, r4, r6
   1cfa0:	andeq	r0, r2, ip, asr r6
   1cfa4:	andeq	r0, r2, ip, ror #12
   1cfa8:	push	{r4, r5, fp, lr}
   1cfac:	add	fp, sp, #12
   1cfb0:	sub	sp, sp, #16
   1cfb4:	str	r0, [fp, #-24]	; 0xffffffe8
   1cfb8:	str	r1, [fp, #-28]	; 0xffffffe4
   1cfbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cfc0:	cmp	r3, #0
   1cfc4:	beq	1cfd4 <__assert_fail@plt+0xbc74>
   1cfc8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cfcc:	cmp	r3, #0
   1cfd0:	bne	1cfe4 <__assert_fail@plt+0xbc84>
   1cfd4:	mov	r3, #1
   1cfd8:	str	r3, [fp, #-28]	; 0xffffffe4
   1cfdc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cfe0:	str	r3, [fp, #-24]	; 0xffffffe8
   1cfe4:	mov	r1, #0
   1cfe8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1cfec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cff0:	umull	r2, r3, r2, r3
   1cff4:	mov	r4, r3
   1cff8:	mov	r5, #0
   1cffc:	cmp	r4, #0
   1d000:	beq	1d008 <__assert_fail@plt+0xbca8>
   1d004:	mov	r1, #1
   1d008:	cmp	r2, #0
   1d00c:	bge	1d014 <__assert_fail@plt+0xbcb4>
   1d010:	mov	r1, #1
   1d014:	mov	r3, r2
   1d018:	str	r3, [fp, #-20]	; 0xffffffec
   1d01c:	mov	r3, r1
   1d020:	and	r3, r3, #1
   1d024:	uxtb	r3, r3
   1d028:	cmp	r3, #0
   1d02c:	beq	1d048 <__assert_fail@plt+0xbce8>
   1d030:	bl	11228 <__errno_location@plt>
   1d034:	mov	r2, r0
   1d038:	mov	r3, #12
   1d03c:	str	r3, [r2]
   1d040:	mov	r3, #0
   1d044:	b	1d060 <__assert_fail@plt+0xbd00>
   1d048:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1d04c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d050:	bl	1100c <calloc@plt>
   1d054:	mov	r3, r0
   1d058:	str	r3, [fp, #-16]
   1d05c:	ldr	r3, [fp, #-16]
   1d060:	mov	r0, r3
   1d064:	sub	sp, fp, #12
   1d068:	pop	{r4, r5, fp, pc}
   1d06c:	push	{r4, r5, fp, lr}
   1d070:	add	fp, sp, #12
   1d074:	sub	sp, sp, #16
   1d078:	str	r0, [fp, #-24]	; 0xffffffe8
   1d07c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d080:	cmp	r3, #0
   1d084:	bne	1d090 <__assert_fail@plt+0xbd30>
   1d088:	mov	r3, #1
   1d08c:	str	r3, [fp, #-24]	; 0xffffffe8
   1d090:	mov	r1, #0
   1d094:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d098:	mov	r2, r3
   1d09c:	mov	r3, #0
   1d0a0:	mov	r4, r3
   1d0a4:	mov	r5, #0
   1d0a8:	cmp	r4, #0
   1d0ac:	beq	1d0b4 <__assert_fail@plt+0xbd54>
   1d0b0:	mov	r1, #1
   1d0b4:	cmp	r2, #0
   1d0b8:	bge	1d0c0 <__assert_fail@plt+0xbd60>
   1d0bc:	mov	r1, #1
   1d0c0:	mov	r3, r2
   1d0c4:	str	r3, [fp, #-20]	; 0xffffffec
   1d0c8:	mov	r3, r1
   1d0cc:	and	r3, r3, #1
   1d0d0:	uxtb	r3, r3
   1d0d4:	cmp	r3, #0
   1d0d8:	beq	1d0f4 <__assert_fail@plt+0xbd94>
   1d0dc:	bl	11228 <__errno_location@plt>
   1d0e0:	mov	r2, r0
   1d0e4:	mov	r3, #12
   1d0e8:	str	r3, [r2]
   1d0ec:	mov	r3, #0
   1d0f0:	b	1d108 <__assert_fail@plt+0xbda8>
   1d0f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d0f8:	bl	11180 <malloc@plt>
   1d0fc:	mov	r3, r0
   1d100:	str	r3, [fp, #-16]
   1d104:	ldr	r3, [fp, #-16]
   1d108:	mov	r0, r3
   1d10c:	sub	sp, fp, #12
   1d110:	pop	{r4, r5, fp, pc}
   1d114:	push	{r4, r5, fp, lr}
   1d118:	add	fp, sp, #12
   1d11c:	sub	sp, sp, #16
   1d120:	str	r0, [fp, #-24]	; 0xffffffe8
   1d124:	str	r1, [fp, #-28]	; 0xffffffe4
   1d128:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d12c:	cmp	r3, #0
   1d130:	bne	1d144 <__assert_fail@plt+0xbde4>
   1d134:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1d138:	bl	1d06c <__assert_fail@plt+0xbd0c>
   1d13c:	mov	r3, r0
   1d140:	b	1d1d8 <__assert_fail@plt+0xbe78>
   1d144:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1d148:	cmp	r3, #0
   1d14c:	bne	1d160 <__assert_fail@plt+0xbe00>
   1d150:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d154:	bl	1347c <__assert_fail@plt+0x211c>
   1d158:	mov	r3, #0
   1d15c:	b	1d1d8 <__assert_fail@plt+0xbe78>
   1d160:	mov	r1, #0
   1d164:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1d168:	mov	r2, r3
   1d16c:	mov	r3, #0
   1d170:	mov	r4, r3
   1d174:	mov	r5, #0
   1d178:	cmp	r4, #0
   1d17c:	beq	1d184 <__assert_fail@plt+0xbe24>
   1d180:	mov	r1, #1
   1d184:	cmp	r2, #0
   1d188:	bge	1d190 <__assert_fail@plt+0xbe30>
   1d18c:	mov	r1, #1
   1d190:	mov	r3, r2
   1d194:	str	r3, [fp, #-20]	; 0xffffffec
   1d198:	mov	r3, r1
   1d19c:	and	r3, r3, #1
   1d1a0:	uxtb	r3, r3
   1d1a4:	cmp	r3, #0
   1d1a8:	beq	1d1c4 <__assert_fail@plt+0xbe64>
   1d1ac:	bl	11228 <__errno_location@plt>
   1d1b0:	mov	r2, r0
   1d1b4:	mov	r3, #12
   1d1b8:	str	r3, [r2]
   1d1bc:	mov	r3, #0
   1d1c0:	b	1d1d8 <__assert_fail@plt+0xbe78>
   1d1c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1d1c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d1cc:	bl	110d8 <realloc@plt>
   1d1d0:	str	r0, [fp, #-16]
   1d1d4:	ldr	r3, [fp, #-16]
   1d1d8:	mov	r0, r3
   1d1dc:	sub	sp, fp, #12
   1d1e0:	pop	{r4, r5, fp, pc}
   1d1e4:	push	{r4, r5, r6, r7, fp}
   1d1e8:	add	fp, sp, #16
   1d1ec:	sub	sp, sp, #20
   1d1f0:	strd	r0, [fp, #-28]	; 0xffffffe4
   1d1f4:	str	r2, [fp, #-32]	; 0xffffffe0
   1d1f8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1d1fc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1d200:	sub	ip, r1, #32
   1d204:	rsb	r0, r1, #32
   1d208:	lsl	r7, r3, r1
   1d20c:	orr	r7, r7, r2, lsl ip
   1d210:	orr	r7, r7, r2, lsr r0
   1d214:	lsl	r6, r2, r1
   1d218:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1d21c:	rsb	r1, r1, #0
   1d220:	and	r1, r1, #63	; 0x3f
   1d224:	rsb	ip, r1, #32
   1d228:	sub	r0, r1, #32
   1d22c:	lsr	r4, r2, r1
   1d230:	orr	r4, r4, r3, lsl ip
   1d234:	orr	r4, r4, r3, lsr r0
   1d238:	lsr	r5, r3, r1
   1d23c:	orr	r4, r4, r6
   1d240:	orr	r5, r5, r7
   1d244:	mov	r2, r4
   1d248:	mov	r3, r5
   1d24c:	mov	r0, r2
   1d250:	mov	r1, r3
   1d254:	sub	sp, fp, #16
   1d258:	pop	{r4, r5, r6, r7, fp}
   1d25c:	bx	lr
   1d260:	push	{r4, r5, r6, r7, fp}
   1d264:	add	fp, sp, #16
   1d268:	sub	sp, sp, #20
   1d26c:	strd	r0, [fp, #-28]	; 0xffffffe4
   1d270:	str	r2, [fp, #-32]	; 0xffffffe0
   1d274:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1d278:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1d27c:	rsb	ip, r1, #32
   1d280:	sub	r0, r1, #32
   1d284:	lsr	r6, r2, r1
   1d288:	orr	r6, r6, r3, lsl ip
   1d28c:	orr	r6, r6, r3, lsr r0
   1d290:	lsr	r7, r3, r1
   1d294:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1d298:	rsb	r1, r1, #0
   1d29c:	and	r1, r1, #63	; 0x3f
   1d2a0:	sub	ip, r1, #32
   1d2a4:	rsb	r0, r1, #32
   1d2a8:	lsl	r5, r3, r1
   1d2ac:	orr	r5, r5, r2, lsl ip
   1d2b0:	orr	r5, r5, r2, lsr r0
   1d2b4:	lsl	r4, r2, r1
   1d2b8:	orr	r4, r4, r6
   1d2bc:	orr	r5, r5, r7
   1d2c0:	mov	r2, r4
   1d2c4:	mov	r3, r5
   1d2c8:	mov	r0, r2
   1d2cc:	mov	r1, r3
   1d2d0:	sub	sp, fp, #16
   1d2d4:	pop	{r4, r5, r6, r7, fp}
   1d2d8:	bx	lr
   1d2dc:	push	{fp}		; (str fp, [sp, #-4]!)
   1d2e0:	add	fp, sp, #0
   1d2e4:	sub	sp, sp, #12
   1d2e8:	str	r0, [fp, #-8]
   1d2ec:	str	r1, [fp, #-12]
   1d2f0:	ldr	r2, [fp, #-8]
   1d2f4:	ldr	r3, [fp, #-12]
   1d2f8:	rsb	r3, r3, #32
   1d2fc:	ror	r3, r2, r3
   1d300:	mov	r0, r3
   1d304:	add	sp, fp, #0
   1d308:	pop	{fp}		; (ldr fp, [sp], #4)
   1d30c:	bx	lr
   1d310:	push	{fp}		; (str fp, [sp, #-4]!)
   1d314:	add	fp, sp, #0
   1d318:	sub	sp, sp, #12
   1d31c:	str	r0, [fp, #-8]
   1d320:	str	r1, [fp, #-12]
   1d324:	ldr	r2, [fp, #-8]
   1d328:	ldr	r3, [fp, #-12]
   1d32c:	ror	r3, r2, r3
   1d330:	mov	r0, r3
   1d334:	add	sp, fp, #0
   1d338:	pop	{fp}		; (ldr fp, [sp], #4)
   1d33c:	bx	lr
   1d340:	push	{fp}		; (str fp, [sp, #-4]!)
   1d344:	add	fp, sp, #0
   1d348:	sub	sp, sp, #12
   1d34c:	str	r0, [fp, #-8]
   1d350:	str	r1, [fp, #-12]
   1d354:	ldr	r2, [fp, #-8]
   1d358:	ldr	r3, [fp, #-12]
   1d35c:	rsb	r3, r3, #32
   1d360:	ror	r3, r2, r3
   1d364:	mov	r0, r3
   1d368:	add	sp, fp, #0
   1d36c:	pop	{fp}		; (ldr fp, [sp], #4)
   1d370:	bx	lr
   1d374:	push	{fp}		; (str fp, [sp, #-4]!)
   1d378:	add	fp, sp, #0
   1d37c:	sub	sp, sp, #12
   1d380:	str	r0, [fp, #-8]
   1d384:	str	r1, [fp, #-12]
   1d388:	ldr	r2, [fp, #-8]
   1d38c:	ldr	r3, [fp, #-12]
   1d390:	ror	r3, r2, r3
   1d394:	mov	r0, r3
   1d398:	add	sp, fp, #0
   1d39c:	pop	{fp}		; (ldr fp, [sp], #4)
   1d3a0:	bx	lr
   1d3a4:	push	{fp}		; (str fp, [sp, #-4]!)
   1d3a8:	add	fp, sp, #0
   1d3ac:	sub	sp, sp, #12
   1d3b0:	mov	r3, r0
   1d3b4:	str	r1, [fp, #-12]
   1d3b8:	strh	r3, [fp, #-6]
   1d3bc:	ldrh	r2, [fp, #-6]
   1d3c0:	ldr	r3, [fp, #-12]
   1d3c4:	lsl	r3, r2, r3
   1d3c8:	uxth	r2, r3
   1d3cc:	ldrh	r1, [fp, #-6]
   1d3d0:	ldr	r3, [fp, #-12]
   1d3d4:	rsb	r3, r3, #16
   1d3d8:	lsr	r3, r1, r3
   1d3dc:	uxth	r3, r3
   1d3e0:	orr	r3, r2, r3
   1d3e4:	uxth	r3, r3
   1d3e8:	mov	r0, r3
   1d3ec:	add	sp, fp, #0
   1d3f0:	pop	{fp}		; (ldr fp, [sp], #4)
   1d3f4:	bx	lr
   1d3f8:	push	{fp}		; (str fp, [sp, #-4]!)
   1d3fc:	add	fp, sp, #0
   1d400:	sub	sp, sp, #12
   1d404:	mov	r3, r0
   1d408:	str	r1, [fp, #-12]
   1d40c:	strh	r3, [fp, #-6]
   1d410:	ldrh	r2, [fp, #-6]
   1d414:	ldr	r3, [fp, #-12]
   1d418:	lsr	r3, r2, r3
   1d41c:	uxth	r2, r3
   1d420:	ldrh	r1, [fp, #-6]
   1d424:	ldr	r3, [fp, #-12]
   1d428:	rsb	r3, r3, #16
   1d42c:	lsl	r3, r1, r3
   1d430:	uxth	r3, r3
   1d434:	orr	r3, r2, r3
   1d438:	uxth	r3, r3
   1d43c:	mov	r0, r3
   1d440:	add	sp, fp, #0
   1d444:	pop	{fp}		; (ldr fp, [sp], #4)
   1d448:	bx	lr
   1d44c:	push	{fp}		; (str fp, [sp, #-4]!)
   1d450:	add	fp, sp, #0
   1d454:	sub	sp, sp, #12
   1d458:	mov	r3, r0
   1d45c:	str	r1, [fp, #-12]
   1d460:	strb	r3, [fp, #-5]
   1d464:	ldrb	r2, [fp, #-5]
   1d468:	ldr	r3, [fp, #-12]
   1d46c:	lsl	r3, r2, r3
   1d470:	uxtb	r2, r3
   1d474:	ldrb	r1, [fp, #-5]
   1d478:	ldr	r3, [fp, #-12]
   1d47c:	rsb	r3, r3, #8
   1d480:	lsr	r3, r1, r3
   1d484:	uxtb	r3, r3
   1d488:	orr	r3, r2, r3
   1d48c:	uxtb	r3, r3
   1d490:	mov	r0, r3
   1d494:	add	sp, fp, #0
   1d498:	pop	{fp}		; (ldr fp, [sp], #4)
   1d49c:	bx	lr
   1d4a0:	push	{fp}		; (str fp, [sp, #-4]!)
   1d4a4:	add	fp, sp, #0
   1d4a8:	sub	sp, sp, #12
   1d4ac:	mov	r3, r0
   1d4b0:	str	r1, [fp, #-12]
   1d4b4:	strb	r3, [fp, #-5]
   1d4b8:	ldrb	r2, [fp, #-5]
   1d4bc:	ldr	r3, [fp, #-12]
   1d4c0:	lsr	r3, r2, r3
   1d4c4:	uxtb	r2, r3
   1d4c8:	ldrb	r1, [fp, #-5]
   1d4cc:	ldr	r3, [fp, #-12]
   1d4d0:	rsb	r3, r3, #8
   1d4d4:	lsl	r3, r1, r3
   1d4d8:	uxtb	r3, r3
   1d4dc:	orr	r3, r2, r3
   1d4e0:	uxtb	r3, r3
   1d4e4:	mov	r0, r3
   1d4e8:	add	sp, fp, #0
   1d4ec:	pop	{fp}		; (ldr fp, [sp], #4)
   1d4f0:	bx	lr
   1d4f4:	push	{r4, r5, fp, lr}
   1d4f8:	add	fp, sp, #12
   1d4fc:	sub	sp, sp, #16
   1d500:	str	r0, [fp, #-24]	; 0xffffffe8
   1d504:	str	r1, [fp, #-28]	; 0xffffffe4
   1d508:	ldr	r5, [fp, #-24]	; 0xffffffe8
   1d50c:	ldr	r4, [fp, #-28]	; 0xffffffe4
   1d510:	cmp	r5, r4
   1d514:	bne	1d520 <__assert_fail@plt+0xc1c0>
   1d518:	mov	r3, #0
   1d51c:	b	1d580 <__assert_fail@plt+0xc220>
   1d520:	ldrb	r3, [r5]
   1d524:	mov	r0, r3
   1d528:	bl	1e624 <__assert_fail@plt+0xd2c4>
   1d52c:	mov	r3, r0
   1d530:	strb	r3, [fp, #-13]
   1d534:	ldrb	r3, [r4]
   1d538:	mov	r0, r3
   1d53c:	bl	1e624 <__assert_fail@plt+0xd2c4>
   1d540:	mov	r3, r0
   1d544:	strb	r3, [fp, #-14]
   1d548:	ldrb	r3, [fp, #-13]
   1d54c:	cmp	r3, #0
   1d550:	beq	1d570 <__assert_fail@plt+0xc210>
   1d554:	add	r5, r5, #1
   1d558:	add	r4, r4, #1
   1d55c:	ldrb	r2, [fp, #-13]
   1d560:	ldrb	r3, [fp, #-14]
   1d564:	cmp	r2, r3
   1d568:	beq	1d520 <__assert_fail@plt+0xc1c0>
   1d56c:	b	1d574 <__assert_fail@plt+0xc214>
   1d570:	nop			; (mov r0, r0)
   1d574:	ldrb	r2, [fp, #-13]
   1d578:	ldrb	r3, [fp, #-14]
   1d57c:	sub	r3, r2, r3
   1d580:	mov	r0, r3
   1d584:	sub	sp, fp, #12
   1d588:	pop	{r4, r5, fp, pc}
   1d58c:	push	{fp, lr}
   1d590:	add	fp, sp, #4
   1d594:	sub	sp, sp, #16
   1d598:	str	r0, [fp, #-16]
   1d59c:	ldr	r0, [fp, #-16]
   1d5a0:	bl	11144 <__fpending@plt>
   1d5a4:	mov	r3, r0
   1d5a8:	cmp	r3, #0
   1d5ac:	movne	r3, #1
   1d5b0:	moveq	r3, #0
   1d5b4:	strb	r3, [fp, #-5]
   1d5b8:	ldr	r0, [fp, #-16]
   1d5bc:	bl	11150 <ferror_unlocked@plt>
   1d5c0:	mov	r3, r0
   1d5c4:	cmp	r3, #0
   1d5c8:	movne	r3, #1
   1d5cc:	moveq	r3, #0
   1d5d0:	strb	r3, [fp, #-6]
   1d5d4:	ldr	r0, [fp, #-16]
   1d5d8:	bl	1d80c <__assert_fail@plt+0xc4ac>
   1d5dc:	mov	r3, r0
   1d5e0:	cmp	r3, #0
   1d5e4:	movne	r3, #1
   1d5e8:	moveq	r3, #0
   1d5ec:	strb	r3, [fp, #-7]
   1d5f0:	ldrb	r3, [fp, #-6]
   1d5f4:	cmp	r3, #0
   1d5f8:	bne	1d628 <__assert_fail@plt+0xc2c8>
   1d5fc:	ldrb	r3, [fp, #-7]
   1d600:	cmp	r3, #0
   1d604:	beq	1d654 <__assert_fail@plt+0xc2f4>
   1d608:	ldrb	r3, [fp, #-5]
   1d60c:	cmp	r3, #0
   1d610:	bne	1d628 <__assert_fail@plt+0xc2c8>
   1d614:	bl	11228 <__errno_location@plt>
   1d618:	mov	r3, r0
   1d61c:	ldr	r3, [r3]
   1d620:	cmp	r3, #9
   1d624:	beq	1d654 <__assert_fail@plt+0xc2f4>
   1d628:	ldrb	r3, [fp, #-7]
   1d62c:	eor	r3, r3, #1
   1d630:	uxtb	r3, r3
   1d634:	cmp	r3, #0
   1d638:	beq	1d64c <__assert_fail@plt+0xc2ec>
   1d63c:	bl	11228 <__errno_location@plt>
   1d640:	mov	r2, r0
   1d644:	mov	r3, #0
   1d648:	str	r3, [r2]
   1d64c:	mvn	r3, #0
   1d650:	b	1d658 <__assert_fail@plt+0xc2f8>
   1d654:	mov	r3, #0
   1d658:	mov	r0, r3
   1d65c:	sub	sp, fp, #4
   1d660:	pop	{fp, pc}
   1d664:	push	{fp}		; (str fp, [sp, #-4]!)
   1d668:	add	fp, sp, #0
   1d66c:	sub	sp, sp, #12
   1d670:	strd	r0, [fp, #-12]
   1d674:	ldrd	r2, [fp, #-12]
   1d678:	subs	r0, r2, #1
   1d67c:	sbc	r1, r3, #0
   1d680:	ldrd	r2, [fp, #-12]
   1d684:	and	r2, r2, r0
   1d688:	and	r3, r3, r1
   1d68c:	orr	r3, r2, r3
   1d690:	cmp	r3, #0
   1d694:	moveq	r3, #1
   1d698:	movne	r3, #0
   1d69c:	uxtb	r3, r3
   1d6a0:	mov	r0, r3
   1d6a4:	add	sp, fp, #0
   1d6a8:	pop	{fp}		; (ldr fp, [sp], #4)
   1d6ac:	bx	lr
   1d6b0:	push	{fp}		; (str fp, [sp, #-4]!)
   1d6b4:	add	fp, sp, #0
   1d6b8:	sub	sp, sp, #12
   1d6bc:	str	r0, [fp, #-8]
   1d6c0:	ldr	r1, [fp, #-8]
   1d6c4:	mov	r2, #0
   1d6c8:	mov	r3, #0
   1d6cc:	strd	r2, [r1, #16]
   1d6d0:	ldr	r3, [fp, #-8]
   1d6d4:	ldr	r2, [pc, #16]	; 1d6ec <__assert_fail@plt+0xc38c>
   1d6d8:	str	r2, [r3, #24]
   1d6dc:	nop			; (mov r0, r0)
   1d6e0:	add	sp, fp, #0
   1d6e4:	pop	{fp}		; (ldr fp, [sp], #4)
   1d6e8:	bx	lr
   1d6ec:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1d6f0:	push	{fp, lr}
   1d6f4:	add	fp, sp, #4
   1d6f8:	sub	sp, sp, #8
   1d6fc:	str	r0, [fp, #-8]
   1d700:	str	r1, [fp, #-12]
   1d704:	ldr	r3, [fp, #-8]
   1d708:	ldr	r3, [r3, #24]
   1d70c:	ldr	r2, [pc, #232]	; 1d7fc <__assert_fail@plt+0xc49c>
   1d710:	cmp	r3, r2
   1d714:	beq	1d72c <__assert_fail@plt+0xc3cc>
   1d718:	ldr	r3, [pc, #224]	; 1d800 <__assert_fail@plt+0xc4a0>
   1d71c:	mov	r2, #60	; 0x3c
   1d720:	ldr	r1, [pc, #220]	; 1d804 <__assert_fail@plt+0xc4a4>
   1d724:	ldr	r0, [pc, #220]	; 1d808 <__assert_fail@plt+0xc4a8>
   1d728:	bl	11360 <__assert_fail@plt>
   1d72c:	ldr	r3, [fp, #-8]
   1d730:	ldrd	r2, [r3, #16]
   1d734:	orrs	r3, r2, r3
   1d738:	beq	1d77c <__assert_fail@plt+0xc41c>
   1d73c:	ldr	r3, [fp, #-12]
   1d740:	ldrd	r0, [r3, #96]	; 0x60
   1d744:	ldr	r3, [fp, #-8]
   1d748:	ldrd	r2, [r3]
   1d74c:	cmp	r1, r3
   1d750:	cmpeq	r0, r2
   1d754:	bne	1d77c <__assert_fail@plt+0xc41c>
   1d758:	ldr	r3, [fp, #-12]
   1d75c:	ldrd	r0, [r3]
   1d760:	ldr	r3, [fp, #-8]
   1d764:	ldrd	r2, [r3, #8]
   1d768:	cmp	r1, r3
   1d76c:	cmpeq	r0, r2
   1d770:	bne	1d77c <__assert_fail@plt+0xc41c>
   1d774:	mov	r3, #1
   1d778:	b	1d7f0 <__assert_fail@plt+0xc490>
   1d77c:	ldr	r3, [fp, #-8]
   1d780:	ldrd	r2, [r3, #16]
   1d784:	adds	r2, r2, #1
   1d788:	adc	r3, r3, #0
   1d78c:	ldr	r1, [fp, #-8]
   1d790:	strd	r2, [r1, #16]
   1d794:	ldr	r3, [fp, #-8]
   1d798:	ldrd	r2, [r3, #16]
   1d79c:	mov	r0, r2
   1d7a0:	mov	r1, r3
   1d7a4:	bl	1d664 <__assert_fail@plt+0xc304>
   1d7a8:	mov	r3, r0
   1d7ac:	cmp	r3, #0
   1d7b0:	beq	1d7ec <__assert_fail@plt+0xc48c>
   1d7b4:	ldr	r3, [fp, #-8]
   1d7b8:	ldrd	r2, [r3, #16]
   1d7bc:	orrs	r3, r2, r3
   1d7c0:	bne	1d7cc <__assert_fail@plt+0xc46c>
   1d7c4:	mov	r3, #1
   1d7c8:	b	1d7f0 <__assert_fail@plt+0xc490>
   1d7cc:	ldr	r3, [fp, #-12]
   1d7d0:	ldrd	r2, [r3]
   1d7d4:	ldr	r1, [fp, #-8]
   1d7d8:	strd	r2, [r1, #8]
   1d7dc:	ldr	r3, [fp, #-12]
   1d7e0:	ldrd	r2, [r3, #96]	; 0x60
   1d7e4:	ldr	r1, [fp, #-8]
   1d7e8:	strd	r2, [r1]
   1d7ec:	mov	r3, #0
   1d7f0:	mov	r0, r3
   1d7f4:	sub	sp, fp, #4
   1d7f8:	pop	{fp, pc}
   1d7fc:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1d800:	andeq	r0, r2, ip, asr #13
   1d804:	andeq	r0, r2, r0, lsr #13
   1d808:			; <UNDEFINED> instruction: 0x000206b4
   1d80c:	push	{fp, lr}
   1d810:	add	fp, sp, #4
   1d814:	sub	sp, sp, #32
   1d818:	str	r0, [fp, #-24]	; 0xffffffe8
   1d81c:	mov	r3, #0
   1d820:	str	r3, [fp, #-8]
   1d824:	mov	r3, #0
   1d828:	str	r3, [fp, #-12]
   1d82c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d830:	bl	1124c <fileno@plt>
   1d834:	str	r0, [fp, #-16]
   1d838:	ldr	r3, [fp, #-16]
   1d83c:	cmp	r3, #0
   1d840:	bge	1d854 <__assert_fail@plt+0xc4f4>
   1d844:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d848:	bl	11258 <fclose@plt>
   1d84c:	mov	r3, r0
   1d850:	b	1d8f8 <__assert_fail@plt+0xc598>
   1d854:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d858:	bl	11198 <__freading@plt>
   1d85c:	mov	r3, r0
   1d860:	cmp	r3, #0
   1d864:	beq	1d8a0 <__assert_fail@plt+0xc540>
   1d868:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d86c:	bl	1124c <fileno@plt>
   1d870:	mov	r1, r0
   1d874:	mov	r3, #1
   1d878:	str	r3, [sp]
   1d87c:	mov	r2, #0
   1d880:	mov	r3, #0
   1d884:	mov	r0, r1
   1d888:	bl	11120 <lseek64@plt>
   1d88c:	mvn	r2, #0
   1d890:	mvn	r3, #0
   1d894:	cmp	r1, r3
   1d898:	cmpeq	r0, r2
   1d89c:	beq	1d8c4 <__assert_fail@plt+0xc564>
   1d8a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d8a4:	bl	1dd48 <__assert_fail@plt+0xc9e8>
   1d8a8:	mov	r3, r0
   1d8ac:	cmp	r3, #0
   1d8b0:	beq	1d8c4 <__assert_fail@plt+0xc564>
   1d8b4:	bl	11228 <__errno_location@plt>
   1d8b8:	mov	r3, r0
   1d8bc:	ldr	r3, [r3]
   1d8c0:	str	r3, [fp, #-8]
   1d8c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d8c8:	bl	11258 <fclose@plt>
   1d8cc:	str	r0, [fp, #-12]
   1d8d0:	ldr	r3, [fp, #-8]
   1d8d4:	cmp	r3, #0
   1d8d8:	beq	1d8f4 <__assert_fail@plt+0xc594>
   1d8dc:	bl	11228 <__errno_location@plt>
   1d8e0:	mov	r2, r0
   1d8e4:	ldr	r3, [fp, #-8]
   1d8e8:	str	r3, [r2]
   1d8ec:	mvn	r3, #0
   1d8f0:	str	r3, [fp, #-12]
   1d8f4:	ldr	r3, [fp, #-12]
   1d8f8:	mov	r0, r3
   1d8fc:	sub	sp, fp, #4
   1d900:	pop	{fp, pc}
   1d904:	push	{r1, r2, r3}
   1d908:	push	{fp, lr}
   1d90c:	add	fp, sp, #4
   1d910:	sub	sp, sp, #36	; 0x24
   1d914:	str	r0, [fp, #-36]	; 0xffffffdc
   1d918:	mvn	r3, #0
   1d91c:	str	r3, [fp, #-12]
   1d920:	add	r3, fp, #8
   1d924:	str	r3, [fp, #-32]	; 0xffffffe0
   1d928:	ldr	r3, [fp, #4]
   1d92c:	cmp	r3, #0
   1d930:	beq	1d944 <__assert_fail@plt+0xc5e4>
   1d934:	ldr	r2, [pc, #432]	; 1daec <__assert_fail@plt+0xc78c>
   1d938:	cmp	r3, r2
   1d93c:	beq	1d96c <__assert_fail@plt+0xc60c>
   1d940:	b	1d994 <__assert_fail@plt+0xc634>
   1d944:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d948:	add	r2, r3, #4
   1d94c:	str	r2, [fp, #-32]	; 0xffffffe0
   1d950:	ldr	r3, [r3]
   1d954:	str	r3, [fp, #-16]
   1d958:	ldr	r1, [fp, #-16]
   1d95c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d960:	bl	1db04 <__assert_fail@plt+0xc7a4>
   1d964:	str	r0, [fp, #-12]
   1d968:	b	1dad4 <__assert_fail@plt+0xc774>
   1d96c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d970:	add	r2, r3, #4
   1d974:	str	r2, [fp, #-32]	; 0xffffffe0
   1d978:	ldr	r3, [r3]
   1d97c:	str	r3, [fp, #-20]	; 0xffffffec
   1d980:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d984:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d988:	bl	1db3c <__assert_fail@plt+0xc7dc>
   1d98c:	str	r0, [fp, #-12]
   1d990:	b	1dad4 <__assert_fail@plt+0xc774>
   1d994:	ldr	r3, [fp, #4]
   1d998:	cmp	r3, #11
   1d99c:	beq	1da64 <__assert_fail@plt+0xc704>
   1d9a0:	cmp	r3, #11
   1d9a4:	bgt	1da04 <__assert_fail@plt+0xc6a4>
   1d9a8:	cmp	r3, #3
   1d9ac:	beq	1da64 <__assert_fail@plt+0xc704>
   1d9b0:	cmp	r3, #3
   1d9b4:	bgt	1d9d4 <__assert_fail@plt+0xc674>
   1d9b8:	cmp	r3, #1
   1d9bc:	beq	1da64 <__assert_fail@plt+0xc704>
   1d9c0:	cmp	r3, #1
   1d9c4:	bgt	1da78 <__assert_fail@plt+0xc718>
   1d9c8:	cmp	r3, #0
   1d9cc:	beq	1da78 <__assert_fail@plt+0xc718>
   1d9d0:	b	1daa4 <__assert_fail@plt+0xc744>
   1d9d4:	cmp	r3, #8
   1d9d8:	beq	1da78 <__assert_fail@plt+0xc718>
   1d9dc:	cmp	r3, #8
   1d9e0:	bgt	1d9f0 <__assert_fail@plt+0xc690>
   1d9e4:	cmp	r3, #4
   1d9e8:	beq	1da78 <__assert_fail@plt+0xc718>
   1d9ec:	b	1daa4 <__assert_fail@plt+0xc744>
   1d9f0:	cmp	r3, #9
   1d9f4:	beq	1da64 <__assert_fail@plt+0xc704>
   1d9f8:	cmp	r3, #10
   1d9fc:	beq	1da78 <__assert_fail@plt+0xc718>
   1da00:	b	1daa4 <__assert_fail@plt+0xc744>
   1da04:	ldr	r2, [pc, #228]	; 1daf0 <__assert_fail@plt+0xc790>
   1da08:	cmp	r3, r2
   1da0c:	bgt	1da40 <__assert_fail@plt+0xc6e0>
   1da10:	ldr	r2, [pc, #212]	; 1daec <__assert_fail@plt+0xc78c>
   1da14:	cmp	r3, r2
   1da18:	bge	1da78 <__assert_fail@plt+0xc718>
   1da1c:	ldr	r2, [pc, #208]	; 1daf4 <__assert_fail@plt+0xc794>
   1da20:	cmp	r3, r2
   1da24:	beq	1da64 <__assert_fail@plt+0xc704>
   1da28:	ldr	r2, [pc, #200]	; 1daf8 <__assert_fail@plt+0xc798>
   1da2c:	cmp	r3, r2
   1da30:	beq	1da78 <__assert_fail@plt+0xc718>
   1da34:	cmp	r3, #1024	; 0x400
   1da38:	beq	1da78 <__assert_fail@plt+0xc718>
   1da3c:	b	1daa4 <__assert_fail@plt+0xc744>
   1da40:	ldr	r2, [pc, #180]	; 1dafc <__assert_fail@plt+0xc79c>
   1da44:	cmp	r3, r2
   1da48:	beq	1da78 <__assert_fail@plt+0xc718>
   1da4c:	ldr	r2, [pc, #168]	; 1dafc <__assert_fail@plt+0xc79c>
   1da50:	cmp	r3, r2
   1da54:	blt	1da64 <__assert_fail@plt+0xc704>
   1da58:	ldr	r2, [pc, #160]	; 1db00 <__assert_fail@plt+0xc7a0>
   1da5c:	cmp	r3, r2
   1da60:	bne	1daa4 <__assert_fail@plt+0xc744>
   1da64:	ldr	r1, [fp, #4]
   1da68:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1da6c:	bl	11270 <fcntl64@plt>
   1da70:	str	r0, [fp, #-12]
   1da74:	b	1dad0 <__assert_fail@plt+0xc770>
   1da78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1da7c:	add	r2, r3, #4
   1da80:	str	r2, [fp, #-32]	; 0xffffffe0
   1da84:	ldr	r3, [r3]
   1da88:	str	r3, [fp, #-24]	; 0xffffffe8
   1da8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1da90:	ldr	r1, [fp, #4]
   1da94:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1da98:	bl	11270 <fcntl64@plt>
   1da9c:	str	r0, [fp, #-12]
   1daa0:	b	1dad0 <__assert_fail@plt+0xc770>
   1daa4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1daa8:	add	r2, r3, #4
   1daac:	str	r2, [fp, #-32]	; 0xffffffe0
   1dab0:	ldr	r3, [r3]
   1dab4:	str	r3, [fp, #-28]	; 0xffffffe4
   1dab8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1dabc:	ldr	r1, [fp, #4]
   1dac0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1dac4:	bl	11270 <fcntl64@plt>
   1dac8:	str	r0, [fp, #-12]
   1dacc:	nop			; (mov r0, r0)
   1dad0:	nop			; (mov r0, r0)
   1dad4:	ldr	r3, [fp, #-12]
   1dad8:	mov	r0, r3
   1dadc:	sub	sp, fp, #4
   1dae0:	pop	{fp, lr}
   1dae4:	add	sp, sp, #12
   1dae8:	bx	lr
   1daec:	andeq	r0, r0, r6, lsl #8
   1daf0:	andeq	r0, r0, r7, lsl #8
   1daf4:	andeq	r0, r0, r1, lsl #8
   1daf8:	andeq	r0, r0, r2, lsl #8
   1dafc:	andeq	r0, r0, r9, lsl #8
   1db00:	andeq	r0, r0, sl, lsl #8
   1db04:	push	{fp, lr}
   1db08:	add	fp, sp, #4
   1db0c:	sub	sp, sp, #16
   1db10:	str	r0, [fp, #-16]
   1db14:	str	r1, [fp, #-20]	; 0xffffffec
   1db18:	ldr	r2, [fp, #-20]	; 0xffffffec
   1db1c:	mov	r1, #0
   1db20:	ldr	r0, [fp, #-16]
   1db24:	bl	11270 <fcntl64@plt>
   1db28:	str	r0, [fp, #-8]
   1db2c:	ldr	r3, [fp, #-8]
   1db30:	mov	r0, r3
   1db34:	sub	sp, fp, #4
   1db38:	pop	{fp, pc}
   1db3c:	push	{fp, lr}
   1db40:	add	fp, sp, #4
   1db44:	sub	sp, sp, #24
   1db48:	str	r0, [fp, #-24]	; 0xffffffe8
   1db4c:	str	r1, [fp, #-28]	; 0xffffffe4
   1db50:	ldr	r3, [pc, #292]	; 1dc7c <__assert_fail@plt+0xc91c>
   1db54:	ldr	r3, [r3]
   1db58:	cmp	r3, #0
   1db5c:	blt	1dbd0 <__assert_fail@plt+0xc870>
   1db60:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1db64:	ldr	r1, [pc, #276]	; 1dc80 <__assert_fail@plt+0xc920>
   1db68:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1db6c:	bl	11270 <fcntl64@plt>
   1db70:	str	r0, [fp, #-8]
   1db74:	ldr	r3, [fp, #-8]
   1db78:	cmp	r3, #0
   1db7c:	bge	1db94 <__assert_fail@plt+0xc834>
   1db80:	bl	11228 <__errno_location@plt>
   1db84:	mov	r3, r0
   1db88:	ldr	r3, [r3]
   1db8c:	cmp	r3, #22
   1db90:	beq	1dba4 <__assert_fail@plt+0xc844>
   1db94:	ldr	r3, [pc, #224]	; 1dc7c <__assert_fail@plt+0xc91c>
   1db98:	mov	r2, #1
   1db9c:	str	r2, [r3]
   1dba0:	b	1dbe0 <__assert_fail@plt+0xc880>
   1dba4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1dba8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1dbac:	bl	1db04 <__assert_fail@plt+0xc7a4>
   1dbb0:	str	r0, [fp, #-8]
   1dbb4:	ldr	r3, [fp, #-8]
   1dbb8:	cmp	r3, #0
   1dbbc:	blt	1dbe0 <__assert_fail@plt+0xc880>
   1dbc0:	ldr	r3, [pc, #180]	; 1dc7c <__assert_fail@plt+0xc91c>
   1dbc4:	mvn	r2, #0
   1dbc8:	str	r2, [r3]
   1dbcc:	b	1dbe0 <__assert_fail@plt+0xc880>
   1dbd0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1dbd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1dbd8:	bl	1db04 <__assert_fail@plt+0xc7a4>
   1dbdc:	str	r0, [fp, #-8]
   1dbe0:	ldr	r3, [fp, #-8]
   1dbe4:	cmp	r3, #0
   1dbe8:	blt	1dc6c <__assert_fail@plt+0xc90c>
   1dbec:	ldr	r3, [pc, #136]	; 1dc7c <__assert_fail@plt+0xc91c>
   1dbf0:	ldr	r3, [r3]
   1dbf4:	cmn	r3, #1
   1dbf8:	bne	1dc6c <__assert_fail@plt+0xc90c>
   1dbfc:	mov	r1, #1
   1dc00:	ldr	r0, [fp, #-8]
   1dc04:	bl	11270 <fcntl64@plt>
   1dc08:	str	r0, [fp, #-12]
   1dc0c:	ldr	r3, [fp, #-12]
   1dc10:	cmp	r3, #0
   1dc14:	blt	1dc3c <__assert_fail@plt+0xc8dc>
   1dc18:	ldr	r3, [fp, #-12]
   1dc1c:	orr	r3, r3, #1
   1dc20:	mov	r2, r3
   1dc24:	mov	r1, #2
   1dc28:	ldr	r0, [fp, #-8]
   1dc2c:	bl	11270 <fcntl64@plt>
   1dc30:	mov	r3, r0
   1dc34:	cmn	r3, #1
   1dc38:	bne	1dc6c <__assert_fail@plt+0xc90c>
   1dc3c:	bl	11228 <__errno_location@plt>
   1dc40:	mov	r3, r0
   1dc44:	ldr	r3, [r3]
   1dc48:	str	r3, [fp, #-16]
   1dc4c:	ldr	r0, [fp, #-8]
   1dc50:	bl	11324 <close@plt>
   1dc54:	bl	11228 <__errno_location@plt>
   1dc58:	mov	r2, r0
   1dc5c:	ldr	r3, [fp, #-16]
   1dc60:	str	r3, [r2]
   1dc64:	mvn	r3, #0
   1dc68:	str	r3, [fp, #-8]
   1dc6c:	ldr	r3, [fp, #-8]
   1dc70:	mov	r0, r3
   1dc74:	sub	sp, fp, #4
   1dc78:	pop	{fp, pc}
   1dc7c:	andeq	r1, r3, r4, lsl #6
   1dc80:	andeq	r0, r0, r6, lsl #8
   1dc84:	push	{r1, r2, r3}
   1dc88:	push	{fp, lr}
   1dc8c:	add	fp, sp, #4
   1dc90:	sub	sp, sp, #20
   1dc94:	str	r0, [fp, #-20]	; 0xffffffec
   1dc98:	mov	r3, #0
   1dc9c:	str	r3, [fp, #-12]
   1dca0:	ldr	r3, [fp, #4]
   1dca4:	and	r3, r3, #64	; 0x40
   1dca8:	cmp	r3, #0
   1dcac:	beq	1dccc <__assert_fail@plt+0xc96c>
   1dcb0:	add	r3, fp, #8
   1dcb4:	str	r3, [fp, #-16]
   1dcb8:	ldr	r3, [fp, #-16]
   1dcbc:	add	r2, r3, #4
   1dcc0:	str	r2, [fp, #-16]
   1dcc4:	ldr	r3, [r3]
   1dcc8:	str	r3, [fp, #-12]
   1dccc:	ldr	r2, [fp, #-12]
   1dcd0:	ldr	r1, [fp, #4]
   1dcd4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1dcd8:	bl	11174 <open64@plt>
   1dcdc:	mov	r3, r0
   1dce0:	mov	r0, r3
   1dce4:	bl	1ae0c <__assert_fail@plt+0x9aac>
   1dce8:	mov	r3, r0
   1dcec:	mov	r0, r3
   1dcf0:	sub	sp, fp, #4
   1dcf4:	pop	{fp, lr}
   1dcf8:	add	sp, sp, #12
   1dcfc:	bx	lr
   1dd00:	push	{fp, lr}
   1dd04:	add	fp, sp, #4
   1dd08:	sub	sp, sp, #16
   1dd0c:	str	r0, [fp, #-8]
   1dd10:	ldr	r3, [fp, #-8]
   1dd14:	ldr	r3, [r3]
   1dd18:	and	r3, r3, #256	; 0x100
   1dd1c:	cmp	r3, #0
   1dd20:	beq	1dd3c <__assert_fail@plt+0xc9dc>
   1dd24:	mov	r3, #1
   1dd28:	str	r3, [sp]
   1dd2c:	mov	r2, #0
   1dd30:	mov	r3, #0
   1dd34:	ldr	r0, [fp, #-8]
   1dd38:	bl	1dda8 <__assert_fail@plt+0xca48>
   1dd3c:	nop			; (mov r0, r0)
   1dd40:	sub	sp, fp, #4
   1dd44:	pop	{fp, pc}
   1dd48:	push	{fp, lr}
   1dd4c:	add	fp, sp, #4
   1dd50:	sub	sp, sp, #8
   1dd54:	str	r0, [fp, #-8]
   1dd58:	ldr	r3, [fp, #-8]
   1dd5c:	cmp	r3, #0
   1dd60:	beq	1dd78 <__assert_fail@plt+0xca18>
   1dd64:	ldr	r0, [fp, #-8]
   1dd68:	bl	11198 <__freading@plt>
   1dd6c:	mov	r3, r0
   1dd70:	cmp	r3, #0
   1dd74:	bne	1dd88 <__assert_fail@plt+0xca28>
   1dd78:	ldr	r0, [fp, #-8]
   1dd7c:	bl	1106c <fflush@plt>
   1dd80:	mov	r3, r0
   1dd84:	b	1dd9c <__assert_fail@plt+0xca3c>
   1dd88:	ldr	r0, [fp, #-8]
   1dd8c:	bl	1dd00 <__assert_fail@plt+0xc9a0>
   1dd90:	ldr	r0, [fp, #-8]
   1dd94:	bl	1106c <fflush@plt>
   1dd98:	mov	r3, r0
   1dd9c:	mov	r0, r3
   1dda0:	sub	sp, fp, #4
   1dda4:	pop	{fp, pc}
   1dda8:	push	{fp, lr}
   1ddac:	add	fp, sp, #4
   1ddb0:	sub	sp, sp, #32
   1ddb4:	str	r0, [fp, #-16]
   1ddb8:	strd	r2, [fp, #-28]	; 0xffffffe4
   1ddbc:	ldr	r3, [fp, #-16]
   1ddc0:	ldr	r2, [r3, #8]
   1ddc4:	ldr	r3, [fp, #-16]
   1ddc8:	ldr	r3, [r3, #4]
   1ddcc:	cmp	r2, r3
   1ddd0:	bne	1de68 <__assert_fail@plt+0xcb08>
   1ddd4:	ldr	r3, [fp, #-16]
   1ddd8:	ldr	r2, [r3, #20]
   1dddc:	ldr	r3, [fp, #-16]
   1dde0:	ldr	r3, [r3, #16]
   1dde4:	cmp	r2, r3
   1dde8:	bne	1de68 <__assert_fail@plt+0xcb08>
   1ddec:	ldr	r3, [fp, #-16]
   1ddf0:	ldr	r3, [r3, #36]	; 0x24
   1ddf4:	cmp	r3, #0
   1ddf8:	bne	1de68 <__assert_fail@plt+0xcb08>
   1ddfc:	ldr	r0, [fp, #-16]
   1de00:	bl	1124c <fileno@plt>
   1de04:	mov	r1, r0
   1de08:	ldr	r3, [fp, #4]
   1de0c:	str	r3, [sp]
   1de10:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1de14:	mov	r0, r1
   1de18:	bl	11120 <lseek64@plt>
   1de1c:	strd	r0, [fp, #-12]
   1de20:	ldrd	r2, [fp, #-12]
   1de24:	mvn	r0, #0
   1de28:	mvn	r1, #0
   1de2c:	cmp	r3, r1
   1de30:	cmpeq	r2, r0
   1de34:	bne	1de40 <__assert_fail@plt+0xcae0>
   1de38:	mvn	r3, #0
   1de3c:	b	1de80 <__assert_fail@plt+0xcb20>
   1de40:	ldr	r3, [fp, #-16]
   1de44:	ldr	r3, [r3]
   1de48:	bic	r2, r3, #16
   1de4c:	ldr	r3, [fp, #-16]
   1de50:	str	r2, [r3]
   1de54:	ldr	r1, [fp, #-16]
   1de58:	ldrd	r2, [fp, #-12]
   1de5c:	strd	r2, [r1, #80]	; 0x50
   1de60:	mov	r3, #0
   1de64:	b	1de80 <__assert_fail@plt+0xcb20>
   1de68:	ldr	r3, [fp, #4]
   1de6c:	str	r3, [sp]
   1de70:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1de74:	ldr	r0, [fp, #-16]
   1de78:	bl	11264 <fseeko64@plt>
   1de7c:	mov	r3, r0
   1de80:	mov	r0, r3
   1de84:	sub	sp, fp, #4
   1de88:	pop	{fp, pc}
   1de8c:	push	{fp, lr}
   1de90:	add	fp, sp, #4
   1de94:	bl	11228 <__errno_location@plt>
   1de98:	mov	r2, r0
   1de9c:	mov	r3, #12
   1dea0:	str	r3, [r2]
   1dea4:	mov	r3, #0
   1dea8:	mov	r0, r3
   1deac:	pop	{fp, pc}
   1deb0:	push	{fp, lr}
   1deb4:	add	fp, sp, #4
   1deb8:	sub	sp, sp, #8
   1debc:	str	r0, [fp, #-8]
   1dec0:	ldr	r3, [fp, #-8]
   1dec4:	mov	r0, r3
   1dec8:	bl	1d06c <__assert_fail@plt+0xbd0c>
   1decc:	mov	r3, r0
   1ded0:	mov	r0, r3
   1ded4:	sub	sp, fp, #4
   1ded8:	pop	{fp, pc}
   1dedc:	push	{fp, lr}
   1dee0:	add	fp, sp, #4
   1dee4:	sub	sp, sp, #8
   1dee8:	str	r0, [fp, #-8]
   1deec:	str	r1, [fp, #-12]
   1def0:	ldr	r3, [fp, #-12]
   1def4:	cmp	r3, #0
   1def8:	moveq	r3, #1
   1defc:	movne	r3, #0
   1df00:	uxtb	r3, r3
   1df04:	mov	r2, r3
   1df08:	ldr	r3, [fp, #-12]
   1df0c:	orr	r3, r2, r3
   1df10:	mov	r1, r3
   1df14:	ldr	r0, [fp, #-8]
   1df18:	bl	1d114 <__assert_fail@plt+0xbdb4>
   1df1c:	mov	r3, r0
   1df20:	mov	r0, r3
   1df24:	sub	sp, fp, #4
   1df28:	pop	{fp, pc}
   1df2c:	push	{fp, lr}
   1df30:	add	fp, sp, #4
   1df34:	sub	sp, sp, #8
   1df38:	str	r0, [fp, #-8]
   1df3c:	str	r1, [fp, #-12]
   1df40:	ldr	r3, [fp, #-8]
   1df44:	ldr	r2, [fp, #-12]
   1df48:	mov	r1, r2
   1df4c:	mov	r0, r3
   1df50:	bl	1cfa8 <__assert_fail@plt+0xbc48>
   1df54:	mov	r3, r0
   1df58:	mov	r0, r3
   1df5c:	sub	sp, fp, #4
   1df60:	pop	{fp, pc}
   1df64:	push	{fp, lr}
   1df68:	add	fp, sp, #4
   1df6c:	sub	sp, sp, #16
   1df70:	str	r0, [fp, #-8]
   1df74:	str	r1, [fp, #-12]
   1df78:	str	r2, [fp, #-16]
   1df7c:	ldr	r3, [fp, #-12]
   1df80:	cmp	r3, #0
   1df84:	beq	1df94 <__assert_fail@plt+0xcc34>
   1df88:	ldr	r3, [fp, #-16]
   1df8c:	cmp	r3, #0
   1df90:	bne	1dfa4 <__assert_fail@plt+0xcc44>
   1df94:	mov	r3, #1
   1df98:	str	r3, [fp, #-16]
   1df9c:	ldr	r3, [fp, #-16]
   1dfa0:	str	r3, [fp, #-12]
   1dfa4:	ldr	r3, [fp, #-12]
   1dfa8:	ldr	r2, [fp, #-16]
   1dfac:	mov	r1, r3
   1dfb0:	ldr	r0, [fp, #-8]
   1dfb4:	bl	1e0d0 <__assert_fail@plt+0xcd70>
   1dfb8:	mov	r3, r0
   1dfbc:	mov	r0, r3
   1dfc0:	sub	sp, fp, #4
   1dfc4:	pop	{fp, pc}
   1dfc8:	push	{fp, lr}
   1dfcc:	add	fp, sp, #4
   1dfd0:	sub	sp, sp, #8
   1dfd4:	mov	r0, #14
   1dfd8:	bl	112a0 <nl_langinfo@plt>
   1dfdc:	str	r0, [fp, #-8]
   1dfe0:	ldr	r3, [fp, #-8]
   1dfe4:	cmp	r3, #0
   1dfe8:	bne	1dff4 <__assert_fail@plt+0xcc94>
   1dfec:	ldr	r3, [pc, #40]	; 1e01c <__assert_fail@plt+0xccbc>
   1dff0:	str	r3, [fp, #-8]
   1dff4:	ldr	r3, [fp, #-8]
   1dff8:	ldrb	r3, [r3]
   1dffc:	cmp	r3, #0
   1e000:	bne	1e00c <__assert_fail@plt+0xccac>
   1e004:	ldr	r3, [pc, #20]	; 1e020 <__assert_fail@plt+0xccc0>
   1e008:	str	r3, [fp, #-8]
   1e00c:	ldr	r3, [fp, #-8]
   1e010:	mov	r0, r3
   1e014:	sub	sp, fp, #4
   1e018:	pop	{fp, pc}
   1e01c:	ldrdeq	r0, [r2], -r8
   1e020:	ldrdeq	r0, [r2], -ip
   1e024:	push	{fp, lr}
   1e028:	add	fp, sp, #4
   1e02c:	sub	sp, sp, #32
   1e030:	str	r0, [fp, #-24]	; 0xffffffe8
   1e034:	str	r1, [fp, #-28]	; 0xffffffe4
   1e038:	str	r2, [fp, #-32]	; 0xffffffe0
   1e03c:	str	r3, [fp, #-36]	; 0xffffffdc
   1e040:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e044:	cmp	r3, #0
   1e048:	bne	1e054 <__assert_fail@plt+0xccf4>
   1e04c:	sub	r3, fp, #16
   1e050:	str	r3, [fp, #-24]	; 0xffffffe8
   1e054:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1e058:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1e05c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1e060:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1e064:	bl	1115c <mbrtowc@plt>
   1e068:	str	r0, [fp, #-8]
   1e06c:	ldr	r3, [fp, #-8]
   1e070:	cmn	r3, #3
   1e074:	bls	1e0c0 <__assert_fail@plt+0xcd60>
   1e078:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e07c:	cmp	r3, #0
   1e080:	beq	1e0c0 <__assert_fail@plt+0xcd60>
   1e084:	mov	r0, #0
   1e088:	bl	1e6a4 <__assert_fail@plt+0xd344>
   1e08c:	mov	r3, r0
   1e090:	eor	r3, r3, #1
   1e094:	uxtb	r3, r3
   1e098:	cmp	r3, #0
   1e09c:	beq	1e0c0 <__assert_fail@plt+0xcd60>
   1e0a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1e0a4:	ldrb	r3, [r3]
   1e0a8:	strb	r3, [fp, #-9]
   1e0ac:	ldrb	r2, [fp, #-9]
   1e0b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e0b4:	str	r2, [r3]
   1e0b8:	mov	r3, #1
   1e0bc:	b	1e0c4 <__assert_fail@plt+0xcd64>
   1e0c0:	ldr	r3, [fp, #-8]
   1e0c4:	mov	r0, r3
   1e0c8:	sub	sp, fp, #4
   1e0cc:	pop	{fp, pc}
   1e0d0:	push	{fp, lr}
   1e0d4:	add	fp, sp, #4
   1e0d8:	sub	sp, sp, #24
   1e0dc:	str	r0, [fp, #-16]
   1e0e0:	str	r1, [fp, #-20]	; 0xffffffec
   1e0e4:	str	r2, [fp, #-24]	; 0xffffffe8
   1e0e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e0ec:	cmp	r3, #0
   1e0f0:	beq	1e12c <__assert_fail@plt+0xcdcc>
   1e0f4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1e0f8:	mvn	r0, #0
   1e0fc:	bl	1e8a8 <__assert_fail@plt+0xd548>
   1e100:	mov	r3, r0
   1e104:	mov	r2, r3
   1e108:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e10c:	cmp	r2, r3
   1e110:	bcs	1e12c <__assert_fail@plt+0xcdcc>
   1e114:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e118:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1e11c:	mul	r3, r2, r3
   1e120:	str	r3, [fp, #-8]
   1e124:	mov	r3, #1
   1e128:	b	1e140 <__assert_fail@plt+0xcde0>
   1e12c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e130:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1e134:	mul	r3, r2, r3
   1e138:	str	r3, [fp, #-8]
   1e13c:	mov	r3, #0
   1e140:	cmp	r3, #0
   1e144:	beq	1e160 <__assert_fail@plt+0xce00>
   1e148:	bl	11228 <__errno_location@plt>
   1e14c:	mov	r2, r0
   1e150:	mov	r3, #12
   1e154:	str	r3, [r2]
   1e158:	mov	r3, #0
   1e15c:	b	1e174 <__assert_fail@plt+0xce14>
   1e160:	ldr	r3, [fp, #-8]
   1e164:	mov	r1, r3
   1e168:	ldr	r0, [fp, #-16]
   1e16c:	bl	1d114 <__assert_fail@plt+0xbdb4>
   1e170:	mov	r3, r0
   1e174:	mov	r0, r3
   1e178:	sub	sp, fp, #4
   1e17c:	pop	{fp, pc}
   1e180:	push	{fp, lr}
   1e184:	add	fp, sp, #4
   1e188:	sub	sp, sp, #8
   1e18c:	str	r0, [fp, #-8]
   1e190:	mov	r2, #3
   1e194:	mov	r1, #0
   1e198:	ldr	r0, [fp, #-8]
   1e19c:	bl	1d904 <__assert_fail@plt+0xc5a4>
   1e1a0:	mov	r3, r0
   1e1a4:	mov	r0, r3
   1e1a8:	sub	sp, fp, #4
   1e1ac:	pop	{fp, pc}
   1e1b0:	push	{fp}		; (str fp, [sp, #-4]!)
   1e1b4:	add	fp, sp, #0
   1e1b8:	sub	sp, sp, #12
   1e1bc:	str	r0, [fp, #-8]
   1e1c0:	ldr	r3, [fp, #-8]
   1e1c4:	cmp	r3, #90	; 0x5a
   1e1c8:	bgt	1e1e4 <__assert_fail@plt+0xce84>
   1e1cc:	cmp	r3, #65	; 0x41
   1e1d0:	bge	1e1f0 <__assert_fail@plt+0xce90>
   1e1d4:	sub	r3, r3, #48	; 0x30
   1e1d8:	cmp	r3, #9
   1e1dc:	bhi	1e1f8 <__assert_fail@plt+0xce98>
   1e1e0:	b	1e1f0 <__assert_fail@plt+0xce90>
   1e1e4:	sub	r3, r3, #97	; 0x61
   1e1e8:	cmp	r3, #25
   1e1ec:	bhi	1e1f8 <__assert_fail@plt+0xce98>
   1e1f0:	mov	r3, #1
   1e1f4:	b	1e1fc <__assert_fail@plt+0xce9c>
   1e1f8:	mov	r3, #0
   1e1fc:	mov	r0, r3
   1e200:	add	sp, fp, #0
   1e204:	pop	{fp}		; (ldr fp, [sp], #4)
   1e208:	bx	lr
   1e20c:	push	{fp}		; (str fp, [sp, #-4]!)
   1e210:	add	fp, sp, #0
   1e214:	sub	sp, sp, #12
   1e218:	str	r0, [fp, #-8]
   1e21c:	ldr	r3, [fp, #-8]
   1e220:	cmp	r3, #65	; 0x41
   1e224:	blt	1e244 <__assert_fail@plt+0xcee4>
   1e228:	cmp	r3, #90	; 0x5a
   1e22c:	ble	1e23c <__assert_fail@plt+0xcedc>
   1e230:	sub	r3, r3, #97	; 0x61
   1e234:	cmp	r3, #25
   1e238:	bhi	1e244 <__assert_fail@plt+0xcee4>
   1e23c:	mov	r3, #1
   1e240:	b	1e248 <__assert_fail@plt+0xcee8>
   1e244:	mov	r3, #0
   1e248:	mov	r0, r3
   1e24c:	add	sp, fp, #0
   1e250:	pop	{fp}		; (ldr fp, [sp], #4)
   1e254:	bx	lr
   1e258:	push	{fp}		; (str fp, [sp, #-4]!)
   1e25c:	add	fp, sp, #0
   1e260:	sub	sp, sp, #12
   1e264:	str	r0, [fp, #-8]
   1e268:	ldr	r3, [fp, #-8]
   1e26c:	add	r3, r3, #0
   1e270:	cmp	r3, #127	; 0x7f
   1e274:	bhi	1e280 <__assert_fail@plt+0xcf20>
   1e278:	mov	r3, #1
   1e27c:	b	1e284 <__assert_fail@plt+0xcf24>
   1e280:	mov	r3, #0
   1e284:	mov	r0, r3
   1e288:	add	sp, fp, #0
   1e28c:	pop	{fp}		; (ldr fp, [sp], #4)
   1e290:	bx	lr
   1e294:	push	{fp}		; (str fp, [sp, #-4]!)
   1e298:	add	fp, sp, #0
   1e29c:	sub	sp, sp, #12
   1e2a0:	str	r0, [fp, #-8]
   1e2a4:	ldr	r3, [fp, #-8]
   1e2a8:	cmp	r3, #32
   1e2ac:	beq	1e2bc <__assert_fail@plt+0xcf5c>
   1e2b0:	ldr	r3, [fp, #-8]
   1e2b4:	cmp	r3, #9
   1e2b8:	bne	1e2c4 <__assert_fail@plt+0xcf64>
   1e2bc:	mov	r3, #1
   1e2c0:	b	1e2c8 <__assert_fail@plt+0xcf68>
   1e2c4:	mov	r3, #0
   1e2c8:	and	r3, r3, #1
   1e2cc:	uxtb	r3, r3
   1e2d0:	mov	r0, r3
   1e2d4:	add	sp, fp, #0
   1e2d8:	pop	{fp}		; (ldr fp, [sp], #4)
   1e2dc:	bx	lr
   1e2e0:	push	{fp}		; (str fp, [sp, #-4]!)
   1e2e4:	add	fp, sp, #0
   1e2e8:	sub	sp, sp, #12
   1e2ec:	str	r0, [fp, #-8]
   1e2f0:	ldr	r3, [fp, #-8]
   1e2f4:	cmp	r3, #0
   1e2f8:	blt	1e314 <__assert_fail@plt+0xcfb4>
   1e2fc:	cmp	r3, #31
   1e300:	ble	1e30c <__assert_fail@plt+0xcfac>
   1e304:	cmp	r3, #127	; 0x7f
   1e308:	bne	1e314 <__assert_fail@plt+0xcfb4>
   1e30c:	mov	r3, #1
   1e310:	b	1e318 <__assert_fail@plt+0xcfb8>
   1e314:	mov	r3, #0
   1e318:	mov	r0, r3
   1e31c:	add	sp, fp, #0
   1e320:	pop	{fp}		; (ldr fp, [sp], #4)
   1e324:	bx	lr
   1e328:	push	{fp}		; (str fp, [sp, #-4]!)
   1e32c:	add	fp, sp, #0
   1e330:	sub	sp, sp, #12
   1e334:	str	r0, [fp, #-8]
   1e338:	ldr	r3, [fp, #-8]
   1e33c:	sub	r3, r3, #48	; 0x30
   1e340:	cmp	r3, #9
   1e344:	bhi	1e350 <__assert_fail@plt+0xcff0>
   1e348:	mov	r3, #1
   1e34c:	b	1e354 <__assert_fail@plt+0xcff4>
   1e350:	mov	r3, #0
   1e354:	mov	r0, r3
   1e358:	add	sp, fp, #0
   1e35c:	pop	{fp}		; (ldr fp, [sp], #4)
   1e360:	bx	lr
   1e364:	push	{fp}		; (str fp, [sp, #-4]!)
   1e368:	add	fp, sp, #0
   1e36c:	sub	sp, sp, #12
   1e370:	str	r0, [fp, #-8]
   1e374:	ldr	r3, [fp, #-8]
   1e378:	sub	r3, r3, #33	; 0x21
   1e37c:	cmp	r3, #93	; 0x5d
   1e380:	bhi	1e38c <__assert_fail@plt+0xd02c>
   1e384:	mov	r3, #1
   1e388:	b	1e390 <__assert_fail@plt+0xd030>
   1e38c:	mov	r3, #0
   1e390:	mov	r0, r3
   1e394:	add	sp, fp, #0
   1e398:	pop	{fp}		; (ldr fp, [sp], #4)
   1e39c:	bx	lr
   1e3a0:	push	{fp}		; (str fp, [sp, #-4]!)
   1e3a4:	add	fp, sp, #0
   1e3a8:	sub	sp, sp, #12
   1e3ac:	str	r0, [fp, #-8]
   1e3b0:	ldr	r3, [fp, #-8]
   1e3b4:	sub	r3, r3, #97	; 0x61
   1e3b8:	cmp	r3, #25
   1e3bc:	bhi	1e3c8 <__assert_fail@plt+0xd068>
   1e3c0:	mov	r3, #1
   1e3c4:	b	1e3cc <__assert_fail@plt+0xd06c>
   1e3c8:	mov	r3, #0
   1e3cc:	mov	r0, r3
   1e3d0:	add	sp, fp, #0
   1e3d4:	pop	{fp}		; (ldr fp, [sp], #4)
   1e3d8:	bx	lr
   1e3dc:	push	{fp}		; (str fp, [sp, #-4]!)
   1e3e0:	add	fp, sp, #0
   1e3e4:	sub	sp, sp, #12
   1e3e8:	str	r0, [fp, #-8]
   1e3ec:	ldr	r3, [fp, #-8]
   1e3f0:	sub	r3, r3, #32
   1e3f4:	cmp	r3, #94	; 0x5e
   1e3f8:	bhi	1e404 <__assert_fail@plt+0xd0a4>
   1e3fc:	mov	r3, #1
   1e400:	b	1e408 <__assert_fail@plt+0xd0a8>
   1e404:	mov	r3, #0
   1e408:	mov	r0, r3
   1e40c:	add	sp, fp, #0
   1e410:	pop	{fp}		; (ldr fp, [sp], #4)
   1e414:	bx	lr
   1e418:	push	{fp}		; (str fp, [sp, #-4]!)
   1e41c:	add	fp, sp, #0
   1e420:	sub	sp, sp, #12
   1e424:	str	r0, [fp, #-8]
   1e428:	ldr	r3, [fp, #-8]
   1e42c:	cmp	r3, #64	; 0x40
   1e430:	bgt	1e44c <__assert_fail@plt+0xd0ec>
   1e434:	cmp	r3, #58	; 0x3a
   1e438:	bge	1e468 <__assert_fail@plt+0xd108>
   1e43c:	sub	r3, r3, #33	; 0x21
   1e440:	cmp	r3, #14
   1e444:	bhi	1e470 <__assert_fail@plt+0xd110>
   1e448:	b	1e468 <__assert_fail@plt+0xd108>
   1e44c:	cmp	r3, #91	; 0x5b
   1e450:	blt	1e470 <__assert_fail@plt+0xd110>
   1e454:	cmp	r3, #96	; 0x60
   1e458:	ble	1e468 <__assert_fail@plt+0xd108>
   1e45c:	sub	r3, r3, #123	; 0x7b
   1e460:	cmp	r3, #3
   1e464:	bhi	1e470 <__assert_fail@plt+0xd110>
   1e468:	mov	r3, #1
   1e46c:	b	1e474 <__assert_fail@plt+0xd114>
   1e470:	mov	r3, #0
   1e474:	mov	r0, r3
   1e478:	add	sp, fp, #0
   1e47c:	pop	{fp}		; (ldr fp, [sp], #4)
   1e480:	bx	lr
   1e484:	push	{fp}		; (str fp, [sp, #-4]!)
   1e488:	add	fp, sp, #0
   1e48c:	sub	sp, sp, #12
   1e490:	str	r0, [fp, #-8]
   1e494:	ldr	r3, [fp, #-8]
   1e498:	cmp	r3, #9
   1e49c:	blt	1e4b8 <__assert_fail@plt+0xd158>
   1e4a0:	cmp	r3, #13
   1e4a4:	ble	1e4b0 <__assert_fail@plt+0xd150>
   1e4a8:	cmp	r3, #32
   1e4ac:	bne	1e4b8 <__assert_fail@plt+0xd158>
   1e4b0:	mov	r3, #1
   1e4b4:	b	1e4bc <__assert_fail@plt+0xd15c>
   1e4b8:	mov	r3, #0
   1e4bc:	mov	r0, r3
   1e4c0:	add	sp, fp, #0
   1e4c4:	pop	{fp}		; (ldr fp, [sp], #4)
   1e4c8:	bx	lr
   1e4cc:	push	{fp}		; (str fp, [sp, #-4]!)
   1e4d0:	add	fp, sp, #0
   1e4d4:	sub	sp, sp, #12
   1e4d8:	str	r0, [fp, #-8]
   1e4dc:	ldr	r3, [fp, #-8]
   1e4e0:	sub	r3, r3, #65	; 0x41
   1e4e4:	cmp	r3, #25
   1e4e8:	bhi	1e4f4 <__assert_fail@plt+0xd194>
   1e4ec:	mov	r3, #1
   1e4f0:	b	1e4f8 <__assert_fail@plt+0xd198>
   1e4f4:	mov	r3, #0
   1e4f8:	mov	r0, r3
   1e4fc:	add	sp, fp, #0
   1e500:	pop	{fp}		; (ldr fp, [sp], #4)
   1e504:	bx	lr
   1e508:	push	{fp}		; (str fp, [sp, #-4]!)
   1e50c:	add	fp, sp, #0
   1e510:	sub	sp, sp, #12
   1e514:	str	r0, [fp, #-8]
   1e518:	ldr	r3, [fp, #-8]
   1e51c:	sub	r3, r3, #48	; 0x30
   1e520:	cmp	r3, #54	; 0x36
   1e524:	addls	pc, pc, r3, lsl #2
   1e528:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e52c:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e530:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e534:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e538:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e53c:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e540:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e544:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e548:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e54c:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e550:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e554:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e558:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e55c:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e560:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e564:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e568:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e56c:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e570:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e574:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e578:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e57c:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e580:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e584:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e588:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e58c:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e590:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e594:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e598:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e59c:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5a0:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5a4:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5a8:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5ac:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5b0:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5b4:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5b8:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5bc:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5c0:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5c4:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5c8:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5cc:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5d0:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5d4:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5d8:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5dc:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5e0:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5e4:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5e8:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5ec:	b	1e610 <__assert_fail@plt+0xd2b0>
   1e5f0:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e5f4:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e5f8:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e5fc:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e600:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e604:	b	1e608 <__assert_fail@plt+0xd2a8>
   1e608:	mov	r3, #1
   1e60c:	b	1e614 <__assert_fail@plt+0xd2b4>
   1e610:	mov	r3, #0
   1e614:	mov	r0, r3
   1e618:	add	sp, fp, #0
   1e61c:	pop	{fp}		; (ldr fp, [sp], #4)
   1e620:	bx	lr
   1e624:	push	{fp}		; (str fp, [sp, #-4]!)
   1e628:	add	fp, sp, #0
   1e62c:	sub	sp, sp, #12
   1e630:	str	r0, [fp, #-8]
   1e634:	ldr	r3, [fp, #-8]
   1e638:	sub	r3, r3, #65	; 0x41
   1e63c:	cmp	r3, #25
   1e640:	bhi	1e650 <__assert_fail@plt+0xd2f0>
   1e644:	ldr	r3, [fp, #-8]
   1e648:	add	r3, r3, #32
   1e64c:	b	1e654 <__assert_fail@plt+0xd2f4>
   1e650:	ldr	r3, [fp, #-8]
   1e654:	mov	r0, r3
   1e658:	add	sp, fp, #0
   1e65c:	pop	{fp}		; (ldr fp, [sp], #4)
   1e660:	bx	lr
   1e664:	push	{fp}		; (str fp, [sp, #-4]!)
   1e668:	add	fp, sp, #0
   1e66c:	sub	sp, sp, #12
   1e670:	str	r0, [fp, #-8]
   1e674:	ldr	r3, [fp, #-8]
   1e678:	sub	r3, r3, #97	; 0x61
   1e67c:	cmp	r3, #25
   1e680:	bhi	1e690 <__assert_fail@plt+0xd330>
   1e684:	ldr	r3, [fp, #-8]
   1e688:	sub	r3, r3, #32
   1e68c:	b	1e694 <__assert_fail@plt+0xd334>
   1e690:	ldr	r3, [fp, #-8]
   1e694:	mov	r0, r3
   1e698:	add	sp, fp, #0
   1e69c:	pop	{fp}		; (ldr fp, [sp], #4)
   1e6a0:	bx	lr
   1e6a4:	push	{fp, lr}
   1e6a8:	add	fp, sp, #4
   1e6ac:	sub	sp, sp, #272	; 0x110
   1e6b0:	str	r0, [fp, #-272]	; 0xfffffef0
   1e6b4:	sub	r3, fp, #264	; 0x108
   1e6b8:	ldr	r2, [pc, #116]	; 1e734 <__assert_fail@plt+0xd3d4>
   1e6bc:	mov	r1, r3
   1e6c0:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1e6c4:	bl	1e848 <__assert_fail@plt+0xd4e8>
   1e6c8:	mov	r3, r0
   1e6cc:	cmp	r3, #0
   1e6d0:	beq	1e6dc <__assert_fail@plt+0xd37c>
   1e6d4:	mov	r3, #0
   1e6d8:	b	1e728 <__assert_fail@plt+0xd3c8>
   1e6dc:	sub	r3, fp, #264	; 0x108
   1e6e0:	ldr	r1, [pc, #80]	; 1e738 <__assert_fail@plt+0xd3d8>
   1e6e4:	mov	r0, r3
   1e6e8:	bl	11048 <strcmp@plt>
   1e6ec:	mov	r3, r0
   1e6f0:	cmp	r3, #0
   1e6f4:	beq	1e71c <__assert_fail@plt+0xd3bc>
   1e6f8:	sub	r3, fp, #264	; 0x108
   1e6fc:	ldr	r1, [pc, #56]	; 1e73c <__assert_fail@plt+0xd3dc>
   1e700:	mov	r0, r3
   1e704:	bl	11048 <strcmp@plt>
   1e708:	mov	r3, r0
   1e70c:	cmp	r3, #0
   1e710:	beq	1e71c <__assert_fail@plt+0xd3bc>
   1e714:	mov	r3, #1
   1e718:	b	1e720 <__assert_fail@plt+0xd3c0>
   1e71c:	mov	r3, #0
   1e720:	and	r3, r3, #1
   1e724:	uxtb	r3, r3
   1e728:	mov	r0, r3
   1e72c:	sub	sp, fp, #4
   1e730:	pop	{fp, pc}
   1e734:	andeq	r0, r0, r1, lsl #2
   1e738:	andeq	r0, r2, r4, ror #13
   1e73c:	andeq	r0, r2, r8, ror #13
   1e740:	push	{fp, lr}
   1e744:	add	fp, sp, #4
   1e748:	sub	sp, sp, #16
   1e74c:	str	r0, [fp, #-16]
   1e750:	mov	r1, #0
   1e754:	ldr	r0, [fp, #-16]
   1e758:	bl	1127c <setlocale@plt>
   1e75c:	str	r0, [fp, #-8]
   1e760:	ldr	r3, [fp, #-8]
   1e764:	mov	r0, r3
   1e768:	sub	sp, fp, #4
   1e76c:	pop	{fp, pc}
   1e770:	push	{fp, lr}
   1e774:	add	fp, sp, #4
   1e778:	sub	sp, sp, #24
   1e77c:	str	r0, [fp, #-16]
   1e780:	str	r1, [fp, #-20]	; 0xffffffec
   1e784:	str	r2, [fp, #-24]	; 0xffffffe8
   1e788:	ldr	r0, [fp, #-16]
   1e78c:	bl	1e740 <__assert_fail@plt+0xd3e0>
   1e790:	str	r0, [fp, #-8]
   1e794:	ldr	r3, [fp, #-8]
   1e798:	cmp	r3, #0
   1e79c:	bne	1e7c0 <__assert_fail@plt+0xd460>
   1e7a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e7a4:	cmp	r3, #0
   1e7a8:	beq	1e7b8 <__assert_fail@plt+0xd458>
   1e7ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e7b0:	mov	r2, #0
   1e7b4:	strb	r2, [r3]
   1e7b8:	mov	r3, #22
   1e7bc:	b	1e83c <__assert_fail@plt+0xd4dc>
   1e7c0:	ldr	r0, [fp, #-8]
   1e7c4:	bl	111ec <strlen@plt>
   1e7c8:	str	r0, [fp, #-12]
   1e7cc:	ldr	r2, [fp, #-12]
   1e7d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e7d4:	cmp	r2, r3
   1e7d8:	bcs	1e7fc <__assert_fail@plt+0xd49c>
   1e7dc:	ldr	r3, [fp, #-12]
   1e7e0:	add	r3, r3, #1
   1e7e4:	mov	r2, r3
   1e7e8:	ldr	r1, [fp, #-8]
   1e7ec:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e7f0:	bl	1109c <memcpy@plt>
   1e7f4:	mov	r3, #0
   1e7f8:	b	1e83c <__assert_fail@plt+0xd4dc>
   1e7fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e800:	cmp	r3, #0
   1e804:	beq	1e838 <__assert_fail@plt+0xd4d8>
   1e808:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e80c:	sub	r3, r3, #1
   1e810:	mov	r2, r3
   1e814:	ldr	r1, [fp, #-8]
   1e818:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e81c:	bl	1109c <memcpy@plt>
   1e820:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e824:	sub	r3, r3, #1
   1e828:	ldr	r2, [fp, #-20]	; 0xffffffec
   1e82c:	add	r3, r2, r3
   1e830:	mov	r2, #0
   1e834:	strb	r2, [r3]
   1e838:	mov	r3, #34	; 0x22
   1e83c:	mov	r0, r3
   1e840:	sub	sp, fp, #4
   1e844:	pop	{fp, pc}
   1e848:	push	{fp, lr}
   1e84c:	add	fp, sp, #4
   1e850:	sub	sp, sp, #16
   1e854:	str	r0, [fp, #-8]
   1e858:	str	r1, [fp, #-12]
   1e85c:	str	r2, [fp, #-16]
   1e860:	ldr	r2, [fp, #-16]
   1e864:	ldr	r1, [fp, #-12]
   1e868:	ldr	r0, [fp, #-8]
   1e86c:	bl	1e770 <__assert_fail@plt+0xd410>
   1e870:	mov	r3, r0
   1e874:	mov	r0, r3
   1e878:	sub	sp, fp, #4
   1e87c:	pop	{fp, pc}
   1e880:	push	{fp, lr}
   1e884:	add	fp, sp, #4
   1e888:	sub	sp, sp, #8
   1e88c:	str	r0, [fp, #-8]
   1e890:	ldr	r0, [fp, #-8]
   1e894:	bl	1e740 <__assert_fail@plt+0xd3e0>
   1e898:	mov	r3, r0
   1e89c:	mov	r0, r3
   1e8a0:	sub	sp, fp, #4
   1e8a4:	pop	{fp, pc}
   1e8a8:	subs	r2, r1, #1
   1e8ac:	bxeq	lr
   1e8b0:	bcc	1ea88 <__assert_fail@plt+0xd728>
   1e8b4:	cmp	r0, r1
   1e8b8:	bls	1ea6c <__assert_fail@plt+0xd70c>
   1e8bc:	tst	r1, r2
   1e8c0:	beq	1ea78 <__assert_fail@plt+0xd718>
   1e8c4:	clz	r3, r0
   1e8c8:	clz	r2, r1
   1e8cc:	sub	r3, r2, r3
   1e8d0:	rsbs	r3, r3, #31
   1e8d4:	addne	r3, r3, r3, lsl #1
   1e8d8:	mov	r2, #0
   1e8dc:	addne	pc, pc, r3, lsl #2
   1e8e0:	nop			; (mov r0, r0)
   1e8e4:	cmp	r0, r1, lsl #31
   1e8e8:	adc	r2, r2, r2
   1e8ec:	subcs	r0, r0, r1, lsl #31
   1e8f0:	cmp	r0, r1, lsl #30
   1e8f4:	adc	r2, r2, r2
   1e8f8:	subcs	r0, r0, r1, lsl #30
   1e8fc:	cmp	r0, r1, lsl #29
   1e900:	adc	r2, r2, r2
   1e904:	subcs	r0, r0, r1, lsl #29
   1e908:	cmp	r0, r1, lsl #28
   1e90c:	adc	r2, r2, r2
   1e910:	subcs	r0, r0, r1, lsl #28
   1e914:	cmp	r0, r1, lsl #27
   1e918:	adc	r2, r2, r2
   1e91c:	subcs	r0, r0, r1, lsl #27
   1e920:	cmp	r0, r1, lsl #26
   1e924:	adc	r2, r2, r2
   1e928:	subcs	r0, r0, r1, lsl #26
   1e92c:	cmp	r0, r1, lsl #25
   1e930:	adc	r2, r2, r2
   1e934:	subcs	r0, r0, r1, lsl #25
   1e938:	cmp	r0, r1, lsl #24
   1e93c:	adc	r2, r2, r2
   1e940:	subcs	r0, r0, r1, lsl #24
   1e944:	cmp	r0, r1, lsl #23
   1e948:	adc	r2, r2, r2
   1e94c:	subcs	r0, r0, r1, lsl #23
   1e950:	cmp	r0, r1, lsl #22
   1e954:	adc	r2, r2, r2
   1e958:	subcs	r0, r0, r1, lsl #22
   1e95c:	cmp	r0, r1, lsl #21
   1e960:	adc	r2, r2, r2
   1e964:	subcs	r0, r0, r1, lsl #21
   1e968:	cmp	r0, r1, lsl #20
   1e96c:	adc	r2, r2, r2
   1e970:	subcs	r0, r0, r1, lsl #20
   1e974:	cmp	r0, r1, lsl #19
   1e978:	adc	r2, r2, r2
   1e97c:	subcs	r0, r0, r1, lsl #19
   1e980:	cmp	r0, r1, lsl #18
   1e984:	adc	r2, r2, r2
   1e988:	subcs	r0, r0, r1, lsl #18
   1e98c:	cmp	r0, r1, lsl #17
   1e990:	adc	r2, r2, r2
   1e994:	subcs	r0, r0, r1, lsl #17
   1e998:	cmp	r0, r1, lsl #16
   1e99c:	adc	r2, r2, r2
   1e9a0:	subcs	r0, r0, r1, lsl #16
   1e9a4:	cmp	r0, r1, lsl #15
   1e9a8:	adc	r2, r2, r2
   1e9ac:	subcs	r0, r0, r1, lsl #15
   1e9b0:	cmp	r0, r1, lsl #14
   1e9b4:	adc	r2, r2, r2
   1e9b8:	subcs	r0, r0, r1, lsl #14
   1e9bc:	cmp	r0, r1, lsl #13
   1e9c0:	adc	r2, r2, r2
   1e9c4:	subcs	r0, r0, r1, lsl #13
   1e9c8:	cmp	r0, r1, lsl #12
   1e9cc:	adc	r2, r2, r2
   1e9d0:	subcs	r0, r0, r1, lsl #12
   1e9d4:	cmp	r0, r1, lsl #11
   1e9d8:	adc	r2, r2, r2
   1e9dc:	subcs	r0, r0, r1, lsl #11
   1e9e0:	cmp	r0, r1, lsl #10
   1e9e4:	adc	r2, r2, r2
   1e9e8:	subcs	r0, r0, r1, lsl #10
   1e9ec:	cmp	r0, r1, lsl #9
   1e9f0:	adc	r2, r2, r2
   1e9f4:	subcs	r0, r0, r1, lsl #9
   1e9f8:	cmp	r0, r1, lsl #8
   1e9fc:	adc	r2, r2, r2
   1ea00:	subcs	r0, r0, r1, lsl #8
   1ea04:	cmp	r0, r1, lsl #7
   1ea08:	adc	r2, r2, r2
   1ea0c:	subcs	r0, r0, r1, lsl #7
   1ea10:	cmp	r0, r1, lsl #6
   1ea14:	adc	r2, r2, r2
   1ea18:	subcs	r0, r0, r1, lsl #6
   1ea1c:	cmp	r0, r1, lsl #5
   1ea20:	adc	r2, r2, r2
   1ea24:	subcs	r0, r0, r1, lsl #5
   1ea28:	cmp	r0, r1, lsl #4
   1ea2c:	adc	r2, r2, r2
   1ea30:	subcs	r0, r0, r1, lsl #4
   1ea34:	cmp	r0, r1, lsl #3
   1ea38:	adc	r2, r2, r2
   1ea3c:	subcs	r0, r0, r1, lsl #3
   1ea40:	cmp	r0, r1, lsl #2
   1ea44:	adc	r2, r2, r2
   1ea48:	subcs	r0, r0, r1, lsl #2
   1ea4c:	cmp	r0, r1, lsl #1
   1ea50:	adc	r2, r2, r2
   1ea54:	subcs	r0, r0, r1, lsl #1
   1ea58:	cmp	r0, r1
   1ea5c:	adc	r2, r2, r2
   1ea60:	subcs	r0, r0, r1
   1ea64:	mov	r0, r2
   1ea68:	bx	lr
   1ea6c:	moveq	r0, #1
   1ea70:	movne	r0, #0
   1ea74:	bx	lr
   1ea78:	clz	r2, r1
   1ea7c:	rsb	r2, r2, #31
   1ea80:	lsr	r0, r0, r2
   1ea84:	bx	lr
   1ea88:	cmp	r0, #0
   1ea8c:	mvnne	r0, #0
   1ea90:	b	1ed30 <__assert_fail@plt+0xd9d0>
   1ea94:	cmp	r1, #0
   1ea98:	beq	1ea88 <__assert_fail@plt+0xd728>
   1ea9c:	push	{r0, r1, lr}
   1eaa0:	bl	1e8a8 <__assert_fail@plt+0xd548>
   1eaa4:	pop	{r1, r2, lr}
   1eaa8:	mul	r3, r2, r0
   1eaac:	sub	r1, r1, r3
   1eab0:	bx	lr
   1eab4:	cmp	r1, #0
   1eab8:	beq	1ecc4 <__assert_fail@plt+0xd964>
   1eabc:	eor	ip, r0, r1
   1eac0:	rsbmi	r1, r1, #0
   1eac4:	subs	r2, r1, #1
   1eac8:	beq	1ec90 <__assert_fail@plt+0xd930>
   1eacc:	movs	r3, r0
   1ead0:	rsbmi	r3, r0, #0
   1ead4:	cmp	r3, r1
   1ead8:	bls	1ec9c <__assert_fail@plt+0xd93c>
   1eadc:	tst	r1, r2
   1eae0:	beq	1ecac <__assert_fail@plt+0xd94c>
   1eae4:	clz	r2, r3
   1eae8:	clz	r0, r1
   1eaec:	sub	r2, r0, r2
   1eaf0:	rsbs	r2, r2, #31
   1eaf4:	addne	r2, r2, r2, lsl #1
   1eaf8:	mov	r0, #0
   1eafc:	addne	pc, pc, r2, lsl #2
   1eb00:	nop			; (mov r0, r0)
   1eb04:	cmp	r3, r1, lsl #31
   1eb08:	adc	r0, r0, r0
   1eb0c:	subcs	r3, r3, r1, lsl #31
   1eb10:	cmp	r3, r1, lsl #30
   1eb14:	adc	r0, r0, r0
   1eb18:	subcs	r3, r3, r1, lsl #30
   1eb1c:	cmp	r3, r1, lsl #29
   1eb20:	adc	r0, r0, r0
   1eb24:	subcs	r3, r3, r1, lsl #29
   1eb28:	cmp	r3, r1, lsl #28
   1eb2c:	adc	r0, r0, r0
   1eb30:	subcs	r3, r3, r1, lsl #28
   1eb34:	cmp	r3, r1, lsl #27
   1eb38:	adc	r0, r0, r0
   1eb3c:	subcs	r3, r3, r1, lsl #27
   1eb40:	cmp	r3, r1, lsl #26
   1eb44:	adc	r0, r0, r0
   1eb48:	subcs	r3, r3, r1, lsl #26
   1eb4c:	cmp	r3, r1, lsl #25
   1eb50:	adc	r0, r0, r0
   1eb54:	subcs	r3, r3, r1, lsl #25
   1eb58:	cmp	r3, r1, lsl #24
   1eb5c:	adc	r0, r0, r0
   1eb60:	subcs	r3, r3, r1, lsl #24
   1eb64:	cmp	r3, r1, lsl #23
   1eb68:	adc	r0, r0, r0
   1eb6c:	subcs	r3, r3, r1, lsl #23
   1eb70:	cmp	r3, r1, lsl #22
   1eb74:	adc	r0, r0, r0
   1eb78:	subcs	r3, r3, r1, lsl #22
   1eb7c:	cmp	r3, r1, lsl #21
   1eb80:	adc	r0, r0, r0
   1eb84:	subcs	r3, r3, r1, lsl #21
   1eb88:	cmp	r3, r1, lsl #20
   1eb8c:	adc	r0, r0, r0
   1eb90:	subcs	r3, r3, r1, lsl #20
   1eb94:	cmp	r3, r1, lsl #19
   1eb98:	adc	r0, r0, r0
   1eb9c:	subcs	r3, r3, r1, lsl #19
   1eba0:	cmp	r3, r1, lsl #18
   1eba4:	adc	r0, r0, r0
   1eba8:	subcs	r3, r3, r1, lsl #18
   1ebac:	cmp	r3, r1, lsl #17
   1ebb0:	adc	r0, r0, r0
   1ebb4:	subcs	r3, r3, r1, lsl #17
   1ebb8:	cmp	r3, r1, lsl #16
   1ebbc:	adc	r0, r0, r0
   1ebc0:	subcs	r3, r3, r1, lsl #16
   1ebc4:	cmp	r3, r1, lsl #15
   1ebc8:	adc	r0, r0, r0
   1ebcc:	subcs	r3, r3, r1, lsl #15
   1ebd0:	cmp	r3, r1, lsl #14
   1ebd4:	adc	r0, r0, r0
   1ebd8:	subcs	r3, r3, r1, lsl #14
   1ebdc:	cmp	r3, r1, lsl #13
   1ebe0:	adc	r0, r0, r0
   1ebe4:	subcs	r3, r3, r1, lsl #13
   1ebe8:	cmp	r3, r1, lsl #12
   1ebec:	adc	r0, r0, r0
   1ebf0:	subcs	r3, r3, r1, lsl #12
   1ebf4:	cmp	r3, r1, lsl #11
   1ebf8:	adc	r0, r0, r0
   1ebfc:	subcs	r3, r3, r1, lsl #11
   1ec00:	cmp	r3, r1, lsl #10
   1ec04:	adc	r0, r0, r0
   1ec08:	subcs	r3, r3, r1, lsl #10
   1ec0c:	cmp	r3, r1, lsl #9
   1ec10:	adc	r0, r0, r0
   1ec14:	subcs	r3, r3, r1, lsl #9
   1ec18:	cmp	r3, r1, lsl #8
   1ec1c:	adc	r0, r0, r0
   1ec20:	subcs	r3, r3, r1, lsl #8
   1ec24:	cmp	r3, r1, lsl #7
   1ec28:	adc	r0, r0, r0
   1ec2c:	subcs	r3, r3, r1, lsl #7
   1ec30:	cmp	r3, r1, lsl #6
   1ec34:	adc	r0, r0, r0
   1ec38:	subcs	r3, r3, r1, lsl #6
   1ec3c:	cmp	r3, r1, lsl #5
   1ec40:	adc	r0, r0, r0
   1ec44:	subcs	r3, r3, r1, lsl #5
   1ec48:	cmp	r3, r1, lsl #4
   1ec4c:	adc	r0, r0, r0
   1ec50:	subcs	r3, r3, r1, lsl #4
   1ec54:	cmp	r3, r1, lsl #3
   1ec58:	adc	r0, r0, r0
   1ec5c:	subcs	r3, r3, r1, lsl #3
   1ec60:	cmp	r3, r1, lsl #2
   1ec64:	adc	r0, r0, r0
   1ec68:	subcs	r3, r3, r1, lsl #2
   1ec6c:	cmp	r3, r1, lsl #1
   1ec70:	adc	r0, r0, r0
   1ec74:	subcs	r3, r3, r1, lsl #1
   1ec78:	cmp	r3, r1
   1ec7c:	adc	r0, r0, r0
   1ec80:	subcs	r3, r3, r1
   1ec84:	cmp	ip, #0
   1ec88:	rsbmi	r0, r0, #0
   1ec8c:	bx	lr
   1ec90:	teq	ip, r0
   1ec94:	rsbmi	r0, r0, #0
   1ec98:	bx	lr
   1ec9c:	movcc	r0, #0
   1eca0:	asreq	r0, ip, #31
   1eca4:	orreq	r0, r0, #1
   1eca8:	bx	lr
   1ecac:	clz	r2, r1
   1ecb0:	rsb	r2, r2, #31
   1ecb4:	cmp	ip, #0
   1ecb8:	lsr	r0, r3, r2
   1ecbc:	rsbmi	r0, r0, #0
   1ecc0:	bx	lr
   1ecc4:	cmp	r0, #0
   1ecc8:	mvngt	r0, #-2147483648	; 0x80000000
   1eccc:	movlt	r0, #-2147483648	; 0x80000000
   1ecd0:	b	1ed30 <__assert_fail@plt+0xd9d0>
   1ecd4:	cmp	r1, #0
   1ecd8:	beq	1ecc4 <__assert_fail@plt+0xd964>
   1ecdc:	push	{r0, r1, lr}
   1ece0:	bl	1eabc <__assert_fail@plt+0xd75c>
   1ece4:	pop	{r1, r2, lr}
   1ece8:	mul	r3, r2, r0
   1ecec:	sub	r1, r1, r3
   1ecf0:	bx	lr
   1ecf4:	cmp	r3, #0
   1ecf8:	cmpeq	r2, #0
   1ecfc:	bne	1ed14 <__assert_fail@plt+0xd9b4>
   1ed00:	cmp	r1, #0
   1ed04:	cmpeq	r0, #0
   1ed08:	mvnne	r1, #0
   1ed0c:	mvnne	r0, #0
   1ed10:	b	1ed30 <__assert_fail@plt+0xd9d0>
   1ed14:	sub	sp, sp, #8
   1ed18:	push	{sp, lr}
   1ed1c:	bl	1ed40 <__assert_fail@plt+0xd9e0>
   1ed20:	ldr	lr, [sp, #4]
   1ed24:	add	sp, sp, #8
   1ed28:	pop	{r2, r3}
   1ed2c:	bx	lr
   1ed30:	push	{r1, lr}
   1ed34:	mov	r0, #8
   1ed38:	bl	11030 <raise@plt>
   1ed3c:	pop	{r1, pc}
   1ed40:	cmp	r1, r3
   1ed44:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ed48:	cmpeq	r0, r2
   1ed4c:	mov	r4, r0
   1ed50:	mov	r5, r1
   1ed54:	ldr	r9, [sp, #28]
   1ed58:	movcc	r0, #0
   1ed5c:	movcc	r1, #0
   1ed60:	bcc	1ee58 <__assert_fail@plt+0xdaf8>
   1ed64:	cmp	r3, #0
   1ed68:	clzeq	ip, r2
   1ed6c:	clzne	ip, r3
   1ed70:	addeq	ip, ip, #32
   1ed74:	cmp	r5, #0
   1ed78:	clzeq	r1, r4
   1ed7c:	addeq	r1, r1, #32
   1ed80:	clzne	r1, r5
   1ed84:	sub	ip, ip, r1
   1ed88:	sub	lr, ip, #32
   1ed8c:	lsl	r7, r3, ip
   1ed90:	rsb	r8, ip, #32
   1ed94:	orr	r7, r7, r2, lsl lr
   1ed98:	orr	r7, r7, r2, lsr r8
   1ed9c:	lsl	r6, r2, ip
   1eda0:	cmp	r5, r7
   1eda4:	cmpeq	r4, r6
   1eda8:	movcc	r0, #0
   1edac:	movcc	r1, #0
   1edb0:	bcc	1edcc <__assert_fail@plt+0xda6c>
   1edb4:	mov	r3, #1
   1edb8:	subs	r4, r4, r6
   1edbc:	lsl	r1, r3, lr
   1edc0:	lsl	r0, r3, ip
   1edc4:	orr	r1, r1, r3, lsr r8
   1edc8:	sbc	r5, r5, r7
   1edcc:	cmp	ip, #0
   1edd0:	beq	1ee58 <__assert_fail@plt+0xdaf8>
   1edd4:	lsrs	r3, r7, #1
   1edd8:	rrx	r2, r6
   1eddc:	mov	r6, ip
   1ede0:	b	1ee04 <__assert_fail@plt+0xdaa4>
   1ede4:	subs	r4, r4, r2
   1ede8:	sbc	r5, r5, r3
   1edec:	adds	r4, r4, r4
   1edf0:	adc	r5, r5, r5
   1edf4:	adds	r4, r4, #1
   1edf8:	adc	r5, r5, #0
   1edfc:	subs	r6, r6, #1
   1ee00:	beq	1ee20 <__assert_fail@plt+0xdac0>
   1ee04:	cmp	r5, r3
   1ee08:	cmpeq	r4, r2
   1ee0c:	bcs	1ede4 <__assert_fail@plt+0xda84>
   1ee10:	adds	r4, r4, r4
   1ee14:	adc	r5, r5, r5
   1ee18:	subs	r6, r6, #1
   1ee1c:	bne	1ee04 <__assert_fail@plt+0xdaa4>
   1ee20:	lsr	r6, r4, ip
   1ee24:	lsr	r7, r5, ip
   1ee28:	orr	r6, r6, r5, lsl r8
   1ee2c:	adds	r2, r0, r4
   1ee30:	orr	r6, r6, r5, lsr lr
   1ee34:	adc	r3, r1, r5
   1ee38:	lsl	r1, r7, ip
   1ee3c:	orr	r1, r1, r6, lsl lr
   1ee40:	lsl	r0, r6, ip
   1ee44:	orr	r1, r1, r6, lsr r8
   1ee48:	subs	r0, r2, r0
   1ee4c:	mov	r4, r6
   1ee50:	mov	r5, r7
   1ee54:	sbc	r1, r3, r1
   1ee58:	cmp	r9, #0
   1ee5c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1ee60:	strd	r4, [r9]
   1ee64:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ee68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ee6c:	mov	r7, r0
   1ee70:	ldr	r6, [pc, #72]	; 1eec0 <__assert_fail@plt+0xdb60>
   1ee74:	ldr	r5, [pc, #72]	; 1eec4 <__assert_fail@plt+0xdb64>
   1ee78:	add	r6, pc, r6
   1ee7c:	add	r5, pc, r5
   1ee80:	sub	r6, r6, r5
   1ee84:	mov	r8, r1
   1ee88:	mov	r9, r2
   1ee8c:	bl	10fe0 <fstatfs64@plt-0x20>
   1ee90:	asrs	r6, r6, #2
   1ee94:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ee98:	mov	r4, #0
   1ee9c:	add	r4, r4, #1
   1eea0:	ldr	r3, [r5], #4
   1eea4:	mov	r2, r9
   1eea8:	mov	r1, r8
   1eeac:	mov	r0, r7
   1eeb0:	blx	r3
   1eeb4:	cmp	r6, r4
   1eeb8:	bne	1ee9c <__assert_fail@plt+0xdb3c>
   1eebc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1eec0:	muleq	r1, r0, r0
   1eec4:	andeq	r2, r1, r8, lsl #1
   1eec8:	bx	lr
   1eecc:	ldr	r3, [pc, #12]	; 1eee0 <__assert_fail@plt+0xdb80>
   1eed0:	mov	r1, #0
   1eed4:	add	r3, pc, r3
   1eed8:	ldr	r2, [r3]
   1eedc:	b	11234 <__cxa_atexit@plt>
   1eee0:	andeq	r2, r1, ip, asr r2
   1eee4:	mov	r2, r1
   1eee8:	mov	r1, r0
   1eeec:	mov	r0, #3
   1eef0:	b	11300 <__xstat64@plt>
   1eef4:	mov	r2, r1
   1eef8:	mov	r1, r0
   1eefc:	mov	r0, #3
   1ef00:	b	11108 <__fxstat64@plt>
   1ef04:	mov	r2, r1
   1ef08:	mov	r1, r0
   1ef0c:	mov	r0, #3
   1ef10:	b	11330 <__lxstat64@plt>
   1ef14:	push	{lr}		; (str lr, [sp, #-4]!)
   1ef18:	sub	sp, sp, #12
   1ef1c:	str	r3, [sp]
   1ef20:	mov	r3, r2
   1ef24:	mov	r2, r1
   1ef28:	mov	r1, r0
   1ef2c:	mov	r0, #3
   1ef30:	bl	110f0 <__fxstatat64@plt>
   1ef34:	add	sp, sp, #12
   1ef38:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0001ef3c <.fini>:
   1ef3c:	push	{r3, lr}
   1ef40:	pop	{r3, pc}
