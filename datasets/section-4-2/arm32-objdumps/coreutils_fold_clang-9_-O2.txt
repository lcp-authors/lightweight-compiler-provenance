
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010e08 <.init>:
   10e08:	push	{r3, lr}
   10e0c:	bl	110d4 <__assert_fail@plt+0x48>
   10e10:	pop	{r3, pc}

Disassembly of section .plt:

00010e14 <calloc@plt-0x14>:
   10e14:	push	{lr}		; (str lr, [sp, #-4]!)
   10e18:	ldr	lr, [pc, #4]	; 10e24 <calloc@plt-0x4>
   10e1c:	add	lr, pc, lr
   10e20:	ldr	pc, [lr, #8]!
   10e24:	ldrdeq	r6, [r1], -ip

00010e28 <calloc@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #476]!	; 0x1dc

00010e34 <fputs_unlocked@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #468]!	; 0x1d4

00010e40 <raise@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #460]!	; 0x1cc

00010e4c <strcmp@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #452]!	; 0x1c4

00010e58 <posix_fadvise64@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #444]!	; 0x1bc

00010e64 <fflush@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #436]!	; 0x1b4

00010e70 <memmove@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #428]!	; 0x1ac

00010e7c <free@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #420]!	; 0x1a4

00010e88 <_exit@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #412]!	; 0x19c

00010e94 <memcpy@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #404]!	; 0x194

00010ea0 <__strtoull_internal@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #396]!	; 0x18c

00010eac <mbsinit@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #388]!	; 0x184

00010eb8 <fwrite_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #380]!	; 0x17c

00010ec4 <dcgettext@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #372]!	; 0x174

00010ed0 <realloc@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #364]!	; 0x16c

00010edc <textdomain@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #356]!	; 0x164

00010ee8 <iswprint@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #348]!	; 0x15c

00010ef4 <fwrite@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #340]!	; 0x154

00010f00 <lseek64@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #332]!	; 0x14c

00010f0c <__ctype_get_mb_cur_max@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #324]!	; 0x144

00010f18 <__fpending@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #316]!	; 0x13c

00010f24 <mbrtowc@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #308]!	; 0x134

00010f30 <error@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #300]!	; 0x12c

00010f3c <malloc@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #292]!	; 0x124

00010f48 <__libc_start_main@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #284]!	; 0x11c

00010f54 <__freading@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #276]!	; 0x114

00010f60 <__gmon_start__@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #268]!	; 0x10c

00010f6c <getopt_long@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #260]!	; 0x104

00010f78 <__ctype_b_loc@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #252]!	; 0xfc

00010f84 <exit@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #244]!	; 0xf4

00010f90 <bcmp@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #236]!	; 0xec

00010f9c <strlen@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #228]!	; 0xe4

00010fa8 <strchr@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #220]!	; 0xdc

00010fb4 <__errno_location@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #212]!	; 0xd4

00010fc0 <__cxa_atexit@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #204]!	; 0xcc

00010fcc <memset@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #196]!	; 0xc4

00010fd8 <__printf_chk@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #188]!	; 0xbc

00010fe4 <fileno@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #180]!	; 0xb4

00010ff0 <__fprintf_chk@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #172]!	; 0xac

00010ffc <fclose@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #164]!	; 0xa4

00011008 <fseeko64@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #156]!	; 0x9c

00011014 <__uflow@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #90112	; 0x16000
   1101c:	ldr	pc, [ip, #148]!	; 0x94

00011020 <__overflow@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #90112	; 0x16000
   11028:	ldr	pc, [ip, #140]!	; 0x8c

0001102c <setlocale@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #90112	; 0x16000
   11034:	ldr	pc, [ip, #132]!	; 0x84

00011038 <strrchr@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #90112	; 0x16000
   11040:	ldr	pc, [ip, #124]!	; 0x7c

00011044 <nl_langinfo@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #90112	; 0x16000
   1104c:	ldr	pc, [ip, #116]!	; 0x74

00011050 <clearerr_unlocked@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #90112	; 0x16000
   11058:	ldr	pc, [ip, #108]!	; 0x6c

0001105c <fopen64@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #90112	; 0x16000
   11064:	ldr	pc, [ip, #100]!	; 0x64

00011068 <bindtextdomain@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #90112	; 0x16000
   11070:	ldr	pc, [ip, #92]!	; 0x5c

00011074 <strncmp@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #90112	; 0x16000
   1107c:	ldr	pc, [ip, #84]!	; 0x54

00011080 <abort@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #90112	; 0x16000
   11088:	ldr	pc, [ip, #76]!	; 0x4c

0001108c <__assert_fail@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #90112	; 0x16000
   11094:	ldr	pc, [ip, #68]!	; 0x44

Disassembly of section .text:

00011098 <.text>:
   11098:	mov	fp, #0
   1109c:	mov	lr, #0
   110a0:	pop	{r1}		; (ldr r1, [sp], #4)
   110a4:	mov	r2, sp
   110a8:	push	{r2}		; (str r2, [sp, #-4]!)
   110ac:	push	{r0}		; (str r0, [sp, #-4]!)
   110b0:	ldr	ip, [pc, #16]	; 110c8 <__assert_fail@plt+0x3c>
   110b4:	push	{ip}		; (str ip, [sp, #-4]!)
   110b8:	ldr	r0, [pc, #12]	; 110cc <__assert_fail@plt+0x40>
   110bc:	ldr	r3, [pc, #12]	; 110d0 <__assert_fail@plt+0x44>
   110c0:	bl	10f48 <__libc_start_main@plt>
   110c4:	bl	11080 <abort@plt>
   110c8:	muleq	r1, r0, sl
   110cc:	andeq	r1, r1, r0, lsr #8
   110d0:	andeq	r5, r1, r0, lsr sl
   110d4:	ldr	r3, [pc, #20]	; 110f0 <__assert_fail@plt+0x64>
   110d8:	ldr	r2, [pc, #20]	; 110f4 <__assert_fail@plt+0x68>
   110dc:	add	r3, pc, r3
   110e0:	ldr	r2, [r3, r2]
   110e4:	cmp	r2, #0
   110e8:	bxeq	lr
   110ec:	b	10f60 <__gmon_start__@plt>
   110f0:	andeq	r5, r1, ip, lsl pc
   110f4:	ldrdeq	r0, [r0], -ip
   110f8:	ldr	r0, [pc, #24]	; 11118 <__assert_fail@plt+0x8c>
   110fc:	ldr	r3, [pc, #24]	; 1111c <__assert_fail@plt+0x90>
   11100:	cmp	r3, r0
   11104:	bxeq	lr
   11108:	ldr	r3, [pc, #16]	; 11120 <__assert_fail@plt+0x94>
   1110c:	cmp	r3, #0
   11110:	bxeq	lr
   11114:	bx	r3
   11118:	andeq	r7, r2, r0, lsr r1
   1111c:	andeq	r7, r2, r0, lsr r1
   11120:	andeq	r0, r0, r0
   11124:	ldr	r0, [pc, #36]	; 11150 <__assert_fail@plt+0xc4>
   11128:	ldr	r1, [pc, #36]	; 11154 <__assert_fail@plt+0xc8>
   1112c:	sub	r1, r1, r0
   11130:	asr	r1, r1, #2
   11134:	add	r1, r1, r1, lsr #31
   11138:	asrs	r1, r1, #1
   1113c:	bxeq	lr
   11140:	ldr	r3, [pc, #16]	; 11158 <__assert_fail@plt+0xcc>
   11144:	cmp	r3, #0
   11148:	bxeq	lr
   1114c:	bx	r3
   11150:	andeq	r7, r2, r0, lsr r1
   11154:	andeq	r7, r2, r0, lsr r1
   11158:	andeq	r0, r0, r0
   1115c:	push	{r4, lr}
   11160:	ldr	r4, [pc, #24]	; 11180 <__assert_fail@plt+0xf4>
   11164:	ldrb	r3, [r4]
   11168:	cmp	r3, #0
   1116c:	popne	{r4, pc}
   11170:	bl	110f8 <__assert_fail@plt+0x6c>
   11174:	mov	r3, #1
   11178:	strb	r3, [r4]
   1117c:	pop	{r4, pc}
   11180:	andeq	r7, r2, r4, asr r1
   11184:	b	11124 <__assert_fail@plt+0x98>
   11188:	push	{fp, lr}
   1118c:	mov	fp, sp
   11190:	sub	sp, sp, #56	; 0x38
   11194:	mov	r4, r0
   11198:	cmp	r0, #0
   1119c:	bne	113dc <__assert_fail@plt+0x350>
   111a0:	movw	r1, #23267	; 0x5ae3
   111a4:	mov	r0, #0
   111a8:	mov	r2, #5
   111ac:	movt	r1, #1
   111b0:	bl	10ec4 <dcgettext@plt>
   111b4:	mov	r1, r0
   111b8:	movw	r0, #29036	; 0x716c
   111bc:	movt	r0, #2
   111c0:	ldr	r2, [r0]
   111c4:	mov	r0, #1
   111c8:	bl	10fd8 <__printf_chk@plt>
   111cc:	movw	r1, #23300	; 0x5b04
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	movt	r1, #1
   111dc:	bl	10ec4 <dcgettext@plt>
   111e0:	movw	r7, #29004	; 0x714c
   111e4:	movt	r7, #2
   111e8:	ldr	r1, [r7]
   111ec:	bl	10e34 <fputs_unlocked@plt>
   111f0:	movw	r1, #23691	; 0x5c8b
   111f4:	mov	r0, #0
   111f8:	mov	r2, #5
   111fc:	movt	r1, #1
   11200:	bl	10ec4 <dcgettext@plt>
   11204:	ldr	r1, [r7]
   11208:	bl	10e34 <fputs_unlocked@plt>
   1120c:	movw	r1, #23747	; 0x5cc3
   11210:	mov	r0, #0
   11214:	mov	r2, #5
   11218:	movt	r1, #1
   1121c:	bl	10ec4 <dcgettext@plt>
   11220:	ldr	r1, [r7]
   11224:	bl	10e34 <fputs_unlocked@plt>
   11228:	movw	r1, #23360	; 0x5b40
   1122c:	mov	r0, #0
   11230:	mov	r2, #5
   11234:	movt	r1, #1
   11238:	bl	10ec4 <dcgettext@plt>
   1123c:	ldr	r1, [r7]
   11240:	bl	10e34 <fputs_unlocked@plt>
   11244:	movw	r1, #23507	; 0x5bd3
   11248:	mov	r0, #0
   1124c:	mov	r2, #5
   11250:	movt	r1, #1
   11254:	bl	10ec4 <dcgettext@plt>
   11258:	ldr	r1, [r7]
   1125c:	bl	10e34 <fputs_unlocked@plt>
   11260:	movw	r1, #23552	; 0x5c00
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10ec4 <dcgettext@plt>
   11274:	ldr	r1, [r7]
   11278:	bl	10e34 <fputs_unlocked@plt>
   1127c:	movw	r0, #24304	; 0x5ef0
   11280:	mov	r2, #48	; 0x30
   11284:	mov	r6, sp
   11288:	movw	r5, #23606	; 0x5c36
   1128c:	movt	r0, #1
   11290:	movt	r5, #1
   11294:	add	r1, r0, #32
   11298:	add	r3, r0, #16
   1129c:	vld1.64	{d18-d19}, [r0], r2
   112a0:	vld1.64	{d16-d17}, [r1]
   112a4:	vld1.64	{d20-d21}, [r3]
   112a8:	vldr	d22, [r0]
   112ac:	add	r1, r6, #32
   112b0:	add	r0, r6, #16
   112b4:	vst1.64	{d16-d17}, [r1]
   112b8:	movw	r1, #23822	; 0x5d0e
   112bc:	vst1.64	{d20-d21}, [r0]
   112c0:	mov	r0, r6
   112c4:	movt	r1, #1
   112c8:	vst1.64	{d18-d19}, [r0], r2
   112cc:	vstr	d22, [r0]
   112d0:	mov	r0, r5
   112d4:	bl	10e4c <strcmp@plt>
   112d8:	cmp	r0, #0
   112dc:	ldrne	r1, [r6, #8]!
   112e0:	cmpne	r1, #0
   112e4:	bne	112d0 <__assert_fail@plt+0x244>
   112e8:	movw	r1, #23917	; 0x5d6d
   112ec:	ldr	r6, [r6, #4]
   112f0:	mov	r0, #0
   112f4:	mov	r2, #5
   112f8:	movt	r1, #1
   112fc:	bl	10ec4 <dcgettext@plt>
   11300:	movw	r2, #23661	; 0x5c6d
   11304:	movw	r3, #23940	; 0x5d84
   11308:	mov	r1, r0
   1130c:	mov	r0, #1
   11310:	movt	r2, #1
   11314:	movt	r3, #1
   11318:	bl	10fd8 <__printf_chk@plt>
   1131c:	cmp	r6, #0
   11320:	mov	r0, #5
   11324:	mov	r1, #0
   11328:	moveq	r6, r5
   1132c:	bl	1102c <setlocale@plt>
   11330:	cmp	r0, #0
   11334:	beq	1136c <__assert_fail@plt+0x2e0>
   11338:	movw	r1, #23980	; 0x5dac
   1133c:	mov	r2, #3
   11340:	movt	r1, #1
   11344:	bl	11074 <strncmp@plt>
   11348:	cmp	r0, #0
   1134c:	beq	1136c <__assert_fail@plt+0x2e0>
   11350:	movw	r1, #23984	; 0x5db0
   11354:	mov	r0, #0
   11358:	mov	r2, #5
   1135c:	movt	r1, #1
   11360:	bl	10ec4 <dcgettext@plt>
   11364:	ldr	r1, [r7]
   11368:	bl	10e34 <fputs_unlocked@plt>
   1136c:	movw	r1, #24055	; 0x5df7
   11370:	mov	r0, #0
   11374:	mov	r2, #5
   11378:	movt	r1, #1
   1137c:	bl	10ec4 <dcgettext@plt>
   11380:	movw	r2, #23940	; 0x5d84
   11384:	mov	r1, r0
   11388:	mov	r0, #1
   1138c:	mov	r3, r5
   11390:	movt	r2, #1
   11394:	bl	10fd8 <__printf_chk@plt>
   11398:	movw	r1, #24082	; 0x5e12
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	movt	r1, #1
   113a8:	bl	10ec4 <dcgettext@plt>
   113ac:	mov	r1, r0
   113b0:	movw	r0, #23850	; 0x5d2a
   113b4:	movw	r3, #24132	; 0x5e44
   113b8:	cmp	r6, r5
   113bc:	mov	r2, r6
   113c0:	movt	r0, #1
   113c4:	movt	r3, #1
   113c8:	moveq	r3, r0
   113cc:	mov	r0, #1
   113d0:	bl	10fd8 <__printf_chk@plt>
   113d4:	mov	r0, r4
   113d8:	bl	10f84 <exit@plt>
   113dc:	movw	r0, #28992	; 0x7140
   113e0:	movw	r1, #23228	; 0x5abc
   113e4:	mov	r2, #5
   113e8:	movt	r0, #2
   113ec:	movt	r1, #1
   113f0:	ldr	r5, [r0]
   113f4:	mov	r0, #0
   113f8:	bl	10ec4 <dcgettext@plt>
   113fc:	mov	r2, r0
   11400:	movw	r0, #29036	; 0x716c
   11404:	mov	r1, #1
   11408:	movt	r0, #2
   1140c:	ldr	r3, [r0]
   11410:	mov	r0, r5
   11414:	bl	10ff0 <__fprintf_chk@plt>
   11418:	mov	r0, r4
   1141c:	bl	10f84 <exit@plt>
   11420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11424:	add	fp, sp, #28
   11428:	sub	sp, sp, #28
   1142c:	mov	r4, r0
   11430:	ldr	r0, [r1]
   11434:	mov	r5, r1
   11438:	bl	11de0 <__assert_fail@plt+0xd54>
   1143c:	movw	r1, #24132	; 0x5e44
   11440:	mov	r0, #6
   11444:	movt	r1, #1
   11448:	bl	1102c <setlocale@plt>
   1144c:	movw	r6, #23665	; 0x5c71
   11450:	movw	r1, #23611	; 0x5c3b
   11454:	movt	r6, #1
   11458:	movt	r1, #1
   1145c:	mov	r0, r6
   11460:	bl	11068 <bindtextdomain@plt>
   11464:	mov	r0, r6
   11468:	bl	10edc <textdomain@plt>
   1146c:	movw	r0, #6936	; 0x1b18
   11470:	movt	r0, #1
   11474:	bl	15a94 <__assert_fail@plt+0x4a08>
   11478:	movw	r0, #29016	; 0x7158
   1147c:	mov	r8, #0
   11480:	movw	r2, #24168	; 0x5e68
   11484:	movw	r3, #24204	; 0x5e8c
   11488:	mov	r1, r5
   1148c:	movt	r0, #2
   11490:	movt	r2, #1
   11494:	movt	r3, #1
   11498:	str	r8, [sp]
   1149c:	strb	r8, [r0]
   114a0:	movw	r0, #29017	; 0x7159
   114a4:	movt	r0, #2
   114a8:	strb	r8, [r0]
   114ac:	movw	r0, #29018	; 0x715a
   114b0:	movt	r0, #2
   114b4:	strb	r8, [r0]
   114b8:	mov	r0, r4
   114bc:	bl	10f6c <getopt_long@plt>
   114c0:	mov	r7, #80	; 0x50
   114c4:	cmn	r0, #1
   114c8:	beq	115c4 <__assert_fail@plt+0x538>
   114cc:	movw	r9, #29008	; 0x7150
   114d0:	movw	sl, #24168	; 0x5e68
   114d4:	movw	r6, #24204	; 0x5e8c
   114d8:	movt	r9, #2
   114dc:	movt	sl, #1
   114e0:	movt	r6, #1
   114e4:	b	1155c <__assert_fail@plt+0x4d0>
   114e8:	add	r7, sp, #26
   114ec:	strb	r8, [sp, #27]
   114f0:	strb	r0, [sp, #26]
   114f4:	str	r7, [r9]
   114f8:	movw	r1, #23635	; 0x5c53
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	movt	r1, #1
   11508:	bl	10ec4 <dcgettext@plt>
   1150c:	mvn	r1, #9
   11510:	mov	r2, #1
   11514:	mov	r3, #0
   11518:	stm	sp, {r1, r8}
   1151c:	movw	r1, #24132	; 0x5e44
   11520:	str	r0, [sp, #12]
   11524:	mov	r0, r7
   11528:	str	r8, [sp, #16]
   1152c:	movt	r1, #1
   11530:	str	r1, [sp, #8]
   11534:	bl	148ac <__assert_fail@plt+0x3820>
   11538:	mov	r7, r0
   1153c:	mov	r0, r4
   11540:	mov	r1, r5
   11544:	mov	r2, sl
   11548:	mov	r3, r6
   1154c:	str	r8, [sp]
   11550:	bl	10f6c <getopt_long@plt>
   11554:	cmn	r0, #1
   11558:	beq	115c4 <__assert_fail@plt+0x538>
   1155c:	sub	r1, r0, #48	; 0x30
   11560:	cmp	r1, #10
   11564:	bcs	1157c <__assert_fail@plt+0x4f0>
   11568:	ldr	r1, [r9]
   1156c:	cmp	r1, #0
   11570:	beq	114e8 <__assert_fail@plt+0x45c>
   11574:	sub	r7, r1, #1
   11578:	b	114f4 <__assert_fail@plt+0x468>
   1157c:	cmp	r0, #114	; 0x72
   11580:	ble	1159c <__assert_fail@plt+0x510>
   11584:	cmp	r0, #115	; 0x73
   11588:	beq	115b0 <__assert_fail@plt+0x524>
   1158c:	cmp	r0, #119	; 0x77
   11590:	bne	116b4 <__assert_fail@plt+0x628>
   11594:	ldr	r7, [r9]
   11598:	b	114f8 <__assert_fail@plt+0x46c>
   1159c:	cmp	r0, #98	; 0x62
   115a0:	bne	11654 <__assert_fail@plt+0x5c8>
   115a4:	movw	r0, #29017	; 0x7159
   115a8:	movt	r0, #2
   115ac:	b	115b8 <__assert_fail@plt+0x52c>
   115b0:	movw	r0, #29018	; 0x715a
   115b4:	movt	r0, #2
   115b8:	mov	r1, #1
   115bc:	strb	r1, [r0]
   115c0:	b	1153c <__assert_fail@plt+0x4b0>
   115c4:	movw	r0, #28984	; 0x7138
   115c8:	movt	r0, #2
   115cc:	ldr	r0, [r0]
   115d0:	cmp	r0, r4
   115d4:	bne	115f0 <__assert_fail@plt+0x564>
   115d8:	movw	r0, #24460	; 0x5f8c
   115dc:	mov	r1, r7
   115e0:	movt	r0, #1
   115e4:	bl	116d4 <__assert_fail@plt+0x648>
   115e8:	mov	r6, r0
   115ec:	b	1161c <__assert_fail@plt+0x590>
   115f0:	mov	r6, #1
   115f4:	bge	1161c <__assert_fail@plt+0x590>
   115f8:	add	r5, r5, r0, lsl #2
   115fc:	sub	r4, r4, r0
   11600:	mov	r6, #1
   11604:	ldr	r0, [r5], #4
   11608:	mov	r1, r7
   1160c:	bl	116d4 <__assert_fail@plt+0x648>
   11610:	and	r6, r6, r0
   11614:	subs	r4, r4, #1
   11618:	bne	11604 <__assert_fail@plt+0x578>
   1161c:	movw	r0, #29016	; 0x7158
   11620:	movt	r0, #2
   11624:	ldrb	r0, [r0]
   11628:	cmp	r0, #1
   1162c:	bne	11648 <__assert_fail@plt+0x5bc>
   11630:	movw	r0, #29000	; 0x7148
   11634:	movt	r0, #2
   11638:	ldr	r0, [r0]
   1163c:	bl	11c40 <__assert_fail@plt+0xbb4>
   11640:	cmn	r0, #1
   11644:	beq	116bc <__assert_fail@plt+0x630>
   11648:	eor	r0, r6, #1
   1164c:	sub	sp, fp, #28
   11650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11654:	cmn	r0, #3
   11658:	beq	1166c <__assert_fail@plt+0x5e0>
   1165c:	cmn	r0, #2
   11660:	bne	116b4 <__assert_fail@plt+0x628>
   11664:	mov	r0, #0
   11668:	bl	11188 <__assert_fail@plt+0xfc>
   1166c:	movw	r0, #28904	; 0x70e8
   11670:	movw	r2, #23675	; 0x5c7b
   11674:	mov	r1, #0
   11678:	movt	r0, #2
   1167c:	movt	r2, #1
   11680:	str	r1, [sp, #4]
   11684:	movw	r1, #23606	; 0x5c36
   11688:	movt	r1, #1
   1168c:	ldr	r3, [r0]
   11690:	movw	r0, #29004	; 0x714c
   11694:	str	r2, [sp]
   11698:	movw	r2, #23661	; 0x5c6d
   1169c:	movt	r0, #2
   116a0:	movt	r2, #1
   116a4:	ldr	r0, [r0]
   116a8:	bl	14004 <__assert_fail@plt+0x2f78>
   116ac:	mov	r0, #0
   116b0:	bl	10f84 <exit@plt>
   116b4:	mov	r0, #1
   116b8:	bl	11188 <__assert_fail@plt+0xfc>
   116bc:	bl	10fb4 <__errno_location@plt>
   116c0:	ldr	r1, [r0]
   116c4:	movw	r2, #24460	; 0x5f8c
   116c8:	mov	r0, #1
   116cc:	movt	r2, #1
   116d0:	bl	10f30 <error@plt>
   116d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116d8:	add	fp, sp, #28
   116dc:	sub	sp, sp, #20
   116e0:	str	r1, [sp, #16]
   116e4:	movw	r1, #24460	; 0x5f8c
   116e8:	mov	r6, r0
   116ec:	movt	r1, #1
   116f0:	bl	10e4c <strcmp@plt>
   116f4:	cmp	r0, #0
   116f8:	beq	11a78 <__assert_fail@plt+0x9ec>
   116fc:	movw	r1, #24385	; 0x5f41
   11700:	mov	r0, r6
   11704:	movt	r1, #1
   11708:	bl	1105c <fopen64@plt>
   1170c:	cmp	r0, #0
   11710:	beq	11a9c <__assert_fail@plt+0xa10>
   11714:	mov	r1, #2
   11718:	str	r6, [sp, #4]
   1171c:	str	r0, [sp, #8]
   11720:	bl	11c04 <__assert_fail@plt+0xb78>
   11724:	b	11754 <__assert_fail@plt+0x6c8>
   11728:	movw	r0, #29020	; 0x715c
   1172c:	mov	r1, #10
   11730:	mov	r2, r5
   11734:	movt	r0, #2
   11738:	ldr	r0, [r0]
   1173c:	strb	r1, [r0, r7]
   11740:	movw	r1, #29004	; 0x714c
   11744:	movt	r1, #2
   11748:	ldr	r3, [r1]
   1174c:	mov	r1, #1
   11750:	bl	10eb8 <fwrite_unlocked@plt>
   11754:	mov	r7, #0
   11758:	mov	sl, #0
   1175c:	ldr	r0, [sp, #8]
   11760:	ldr	r2, [r0, #4]
   11764:	ldr	r1, [r0, #8]
   11768:	cmp	r2, r1
   1176c:	bcs	119e4 <__assert_fail@plt+0x958>
   11770:	add	r1, r2, #1
   11774:	str	r1, [r0, #4]
   11778:	ldrb	r0, [r2]
   1177c:	str	r0, [sp, #12]
   11780:	movw	r0, #29024	; 0x7160
   11784:	add	r5, r7, #1
   11788:	movt	r0, #2
   1178c:	ldr	r0, [r0]
   11790:	cmp	r5, r0
   11794:	bcc	117b8 <__assert_fail@plt+0x72c>
   11798:	movw	r0, #29020	; 0x715c
   1179c:	movw	r1, #29024	; 0x7160
   117a0:	movt	r0, #2
   117a4:	movt	r1, #2
   117a8:	mov	r4, r0
   117ac:	ldr	r0, [r0]
   117b0:	bl	1436c <__assert_fail@plt+0x32e0>
   117b4:	str	r0, [r4]
   117b8:	ldr	r0, [sp, #12]
   117bc:	cmp	r0, #10
   117c0:	bne	117cc <__assert_fail@plt+0x740>
   117c4:	b	11728 <__assert_fail@plt+0x69c>
   117c8:	mov	r7, r8
   117cc:	movw	r0, #29017	; 0x7159
   117d0:	movt	r0, #2
   117d4:	ldrb	r0, [r0]
   117d8:	cmp	r0, #0
   117dc:	bne	11800 <__assert_fail@plt+0x774>
   117e0:	ldr	r0, [sp, #12]
   117e4:	uxtb	r0, r0
   117e8:	cmp	r0, #8
   117ec:	beq	1198c <__assert_fail@plt+0x900>
   117f0:	cmp	r0, #9
   117f4:	beq	11998 <__assert_fail@plt+0x90c>
   117f8:	cmp	r0, #13
   117fc:	beq	119c4 <__assert_fail@plt+0x938>
   11800:	add	sl, sl, #1
   11804:	ldr	r0, [sp, #16]
   11808:	cmp	sl, r0
   1180c:	bls	119c8 <__assert_fail@plt+0x93c>
   11810:	movw	r0, #29020	; 0x715c
   11814:	movt	r0, #2
   11818:	ldr	r5, [r0]
   1181c:	movw	r0, #29018	; 0x715a
   11820:	movt	r0, #2
   11824:	ldrb	r0, [r0]
   11828:	cmp	r0, #1
   1182c:	bne	11954 <__assert_fail@plt+0x8c8>
   11830:	add	r0, r5, r7
   11834:	mov	r9, #0
   11838:	sub	r4, r0, #1
   1183c:	adds	r0, r7, r9
   11840:	beq	11954 <__assert_fail@plt+0x8c8>
   11844:	mov	r6, r9
   11848:	bl	10f78 <__ctype_b_loc@plt>
   1184c:	ldrb	r1, [r4, r9]
   11850:	ldr	r0, [r0]
   11854:	sub	r9, r9, #1
   11858:	ldrb	r0, [r0, r1, lsl #1]
   1185c:	tst	r0, #1
   11860:	beq	1183c <__assert_fail@plt+0x7b0>
   11864:	movw	r4, #29004	; 0x714c
   11868:	add	r0, r7, r9
   1186c:	mov	r1, #1
   11870:	movt	r4, #2
   11874:	add	r2, r0, #1
   11878:	mov	r0, r5
   1187c:	ldr	r3, [r4]
   11880:	bl	10eb8 <fwrite_unlocked@plt>
   11884:	ldr	r0, [r4]
   11888:	ldr	r1, [r0, #20]
   1188c:	ldr	r2, [r0, #24]
   11890:	cmp	r1, r2
   11894:	bcs	119a8 <__assert_fail@plt+0x91c>
   11898:	add	r2, r1, #1
   1189c:	str	r2, [r0, #20]
   118a0:	mov	r0, #10
   118a4:	strb	r0, [r1]
   118a8:	movw	r0, #29020	; 0x715c
   118ac:	mvn	r8, r9
   118b0:	movt	r0, #2
   118b4:	mov	r2, r8
   118b8:	ldr	r5, [r0]
   118bc:	add	r0, r5, r7
   118c0:	add	r0, r0, r9
   118c4:	add	r1, r0, #1
   118c8:	mov	r0, r5
   118cc:	bl	10e70 <memmove@plt>
   118d0:	mov	r7, #0
   118d4:	cmn	r9, #1
   118d8:	mov	sl, #0
   118dc:	beq	117cc <__assert_fail@plt+0x740>
   118e0:	movw	r0, #29017	; 0x7159
   118e4:	mov	r1, #0
   118e8:	mov	sl, #0
   118ec:	movt	r0, #2
   118f0:	ldrb	r0, [r0]
   118f4:	cmp	r0, #0
   118f8:	beq	11914 <__assert_fail@plt+0x888>
   118fc:	add	sl, sl, #1
   11900:	sub	r1, r1, #1
   11904:	cmp	r6, r1
   11908:	beq	117c8 <__assert_fail@plt+0x73c>
   1190c:	cmp	r0, #0
   11910:	bne	118fc <__assert_fail@plt+0x870>
   11914:	ldrb	r2, [r5, -r1]
   11918:	cmp	r2, #13
   1191c:	beq	1193c <__assert_fail@plt+0x8b0>
   11920:	cmp	r2, #9
   11924:	beq	11944 <__assert_fail@plt+0x8b8>
   11928:	cmp	r2, #8
   1192c:	bne	118fc <__assert_fail@plt+0x870>
   11930:	cmp	sl, #0
   11934:	subne	sl, sl, #1
   11938:	b	11900 <__assert_fail@plt+0x874>
   1193c:	mov	sl, #0
   11940:	b	11900 <__assert_fail@plt+0x874>
   11944:	and	r2, sl, #7
   11948:	sub	r2, sl, r2
   1194c:	add	sl, r2, #8
   11950:	b	11900 <__assert_fail@plt+0x874>
   11954:	cmp	r7, #0
   11958:	beq	119b4 <__assert_fail@plt+0x928>
   1195c:	mov	r0, #10
   11960:	add	r2, r7, #1
   11964:	mov	r1, #1
   11968:	strb	r0, [r5, r7]
   1196c:	movw	r0, #29004	; 0x714c
   11970:	movt	r0, #2
   11974:	ldr	r3, [r0]
   11978:	mov	r0, r5
   1197c:	bl	10eb8 <fwrite_unlocked@plt>
   11980:	mov	r7, #0
   11984:	mov	sl, #0
   11988:	b	117cc <__assert_fail@plt+0x740>
   1198c:	cmp	sl, #0
   11990:	subne	sl, sl, #1
   11994:	b	11804 <__assert_fail@plt+0x778>
   11998:	and	r0, sl, #7
   1199c:	sub	r0, sl, r0
   119a0:	add	sl, r0, #8
   119a4:	b	11804 <__assert_fail@plt+0x778>
   119a8:	mov	r1, #10
   119ac:	bl	11020 <__overflow@plt>
   119b0:	b	118a8 <__assert_fail@plt+0x81c>
   119b4:	ldr	r0, [sp, #12]
   119b8:	mov	r7, #1
   119bc:	strb	r0, [r5]
   119c0:	b	1175c <__assert_fail@plt+0x6d0>
   119c4:	mov	sl, #0
   119c8:	movw	r0, #29020	; 0x715c
   119cc:	ldr	r1, [sp, #12]
   119d0:	movt	r0, #2
   119d4:	ldr	r0, [r0]
   119d8:	strb	r1, [r0, r7]
   119dc:	add	r7, r7, #1
   119e0:	b	1175c <__assert_fail@plt+0x6d0>
   119e4:	bl	11014 <__uflow@plt>
   119e8:	cmn	r0, #1
   119ec:	bne	1177c <__assert_fail@plt+0x6f0>
   119f0:	bl	10fb4 <__errno_location@plt>
   119f4:	ldr	r5, [sp, #8]
   119f8:	mov	r8, r0
   119fc:	ldr	r4, [r0]
   11a00:	cmp	r7, #0
   11a04:	ldrb	r0, [r5]
   11a08:	lsl	r6, r0, #26
   11a0c:	beq	11a34 <__assert_fail@plt+0x9a8>
   11a10:	movw	r0, #29004	; 0x714c
   11a14:	mov	r1, #1
   11a18:	mov	r2, r7
   11a1c:	movt	r0, #2
   11a20:	ldr	r3, [r0]
   11a24:	movw	r0, #29020	; 0x715c
   11a28:	movt	r0, #2
   11a2c:	ldr	r0, [r0]
   11a30:	bl	10eb8 <fwrite_unlocked@plt>
   11a34:	and	r4, r4, r6, asr #31
   11a38:	ldr	r6, [sp, #4]
   11a3c:	movw	r1, #24460	; 0x5f8c
   11a40:	movt	r1, #1
   11a44:	mov	r0, r6
   11a48:	bl	10e4c <strcmp@plt>
   11a4c:	cmp	r0, #0
   11a50:	beq	11aa8 <__assert_fail@plt+0xa1c>
   11a54:	mov	r0, r5
   11a58:	bl	11c40 <__assert_fail@plt+0xbb4>
   11a5c:	cmp	r4, #0
   11a60:	bne	11a6c <__assert_fail@plt+0x9e0>
   11a64:	cmp	r0, #0
   11a68:	ldrne	r4, [r8]
   11a6c:	cmp	r4, #0
   11a70:	bne	11ab8 <__assert_fail@plt+0xa2c>
   11a74:	b	11ae8 <__assert_fail@plt+0xa5c>
   11a78:	movw	r0, #29016	; 0x7158
   11a7c:	mov	r1, #1
   11a80:	movt	r0, #2
   11a84:	strb	r1, [r0]
   11a88:	movw	r0, #29000	; 0x7148
   11a8c:	movt	r0, #2
   11a90:	ldr	r0, [r0]
   11a94:	cmp	r0, #0
   11a98:	bne	11714 <__assert_fail@plt+0x688>
   11a9c:	bl	10fb4 <__errno_location@plt>
   11aa0:	ldr	r4, [r0]
   11aa4:	b	11ab8 <__assert_fail@plt+0xa2c>
   11aa8:	mov	r0, r5
   11aac:	bl	11050 <clearerr_unlocked@plt>
   11ab0:	cmp	r4, #0
   11ab4:	beq	11ae8 <__assert_fail@plt+0xa5c>
   11ab8:	mov	r0, #0
   11abc:	mov	r1, #3
   11ac0:	mov	r2, r6
   11ac4:	mov	r5, #0
   11ac8:	bl	13788 <__assert_fail@plt+0x26fc>
   11acc:	movw	r2, #24391	; 0x5f47
   11ad0:	mov	r3, r0
   11ad4:	mov	r0, #0
   11ad8:	mov	r1, r4
   11adc:	movt	r2, #1
   11ae0:	bl	10f30 <error@plt>
   11ae4:	b	11aec <__assert_fail@plt+0xa60>
   11ae8:	mov	r5, #1
   11aec:	mov	r0, r5
   11af0:	sub	sp, fp, #28
   11af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11af8:	movw	r1, #29028	; 0x7164
   11afc:	movt	r1, #2
   11b00:	str	r0, [r1]
   11b04:	bx	lr
   11b08:	movw	r1, #29032	; 0x7168
   11b0c:	movt	r1, #2
   11b10:	strb	r0, [r1]
   11b14:	bx	lr
   11b18:	push	{r4, r5, r6, sl, fp, lr}
   11b1c:	add	fp, sp, #16
   11b20:	sub	sp, sp, #8
   11b24:	movw	r0, #29004	; 0x714c
   11b28:	movt	r0, #2
   11b2c:	ldr	r0, [r0]
   11b30:	bl	1562c <__assert_fail@plt+0x45a0>
   11b34:	cmp	r0, #0
   11b38:	beq	11b60 <__assert_fail@plt+0xad4>
   11b3c:	movw	r0, #29032	; 0x7168
   11b40:	movt	r0, #2
   11b44:	ldrb	r0, [r0]
   11b48:	cmp	r0, #0
   11b4c:	beq	11b80 <__assert_fail@plt+0xaf4>
   11b50:	bl	10fb4 <__errno_location@plt>
   11b54:	ldr	r0, [r0]
   11b58:	cmp	r0, #32
   11b5c:	bne	11b80 <__assert_fail@plt+0xaf4>
   11b60:	movw	r0, #28992	; 0x7140
   11b64:	movt	r0, #2
   11b68:	ldr	r0, [r0]
   11b6c:	bl	1562c <__assert_fail@plt+0x45a0>
   11b70:	cmp	r0, #0
   11b74:	subeq	sp, fp, #16
   11b78:	popeq	{r4, r5, r6, sl, fp, pc}
   11b7c:	b	11bf0 <__assert_fail@plt+0xb64>
   11b80:	movw	r1, #24375	; 0x5f37
   11b84:	mov	r0, #0
   11b88:	mov	r2, #5
   11b8c:	movt	r1, #1
   11b90:	bl	10ec4 <dcgettext@plt>
   11b94:	mov	r4, r0
   11b98:	movw	r0, #29028	; 0x7164
   11b9c:	movt	r0, #2
   11ba0:	ldr	r6, [r0]
   11ba4:	bl	10fb4 <__errno_location@plt>
   11ba8:	ldr	r5, [r0]
   11bac:	cmp	r6, #0
   11bb0:	bne	11bcc <__assert_fail@plt+0xb40>
   11bb4:	movw	r2, #24391	; 0x5f47
   11bb8:	mov	r0, #0
   11bbc:	mov	r1, r5
   11bc0:	mov	r3, r4
   11bc4:	movt	r2, #1
   11bc8:	b	11bec <__assert_fail@plt+0xb60>
   11bcc:	mov	r0, r6
   11bd0:	bl	136ac <__assert_fail@plt+0x2620>
   11bd4:	movw	r2, #24387	; 0x5f43
   11bd8:	mov	r3, r0
   11bdc:	str	r4, [sp]
   11be0:	mov	r0, #0
   11be4:	mov	r1, r5
   11be8:	movt	r2, #1
   11bec:	bl	10f30 <error@plt>
   11bf0:	movw	r0, #28908	; 0x70ec
   11bf4:	movt	r0, #2
   11bf8:	ldr	r0, [r0]
   11bfc:	bl	10e88 <_exit@plt>
   11c00:	b	10e58 <posix_fadvise64@plt>
   11c04:	cmp	r0, #0
   11c08:	bxeq	lr
   11c0c:	push	{r4, sl, fp, lr}
   11c10:	add	fp, sp, #8
   11c14:	sub	sp, sp, #16
   11c18:	mov	r4, r1
   11c1c:	bl	10fe4 <fileno@plt>
   11c20:	mov	r1, #0
   11c24:	mov	r2, #0
   11c28:	mov	r3, #0
   11c2c:	str	r1, [sp]
   11c30:	stmib	sp, {r1, r4}
   11c34:	bl	10e58 <posix_fadvise64@plt>
   11c38:	sub	sp, fp, #8
   11c3c:	pop	{r4, sl, fp, pc}
   11c40:	push	{r4, r5, r6, sl, fp, lr}
   11c44:	add	fp, sp, #16
   11c48:	sub	sp, sp, #8
   11c4c:	mov	r4, r0
   11c50:	bl	10fe4 <fileno@plt>
   11c54:	cmn	r0, #1
   11c58:	ble	11ccc <__assert_fail@plt+0xc40>
   11c5c:	mov	r0, r4
   11c60:	bl	10f54 <__freading@plt>
   11c64:	cmp	r0, #0
   11c68:	beq	11c94 <__assert_fail@plt+0xc08>
   11c6c:	mov	r0, r4
   11c70:	bl	10fe4 <fileno@plt>
   11c74:	mov	r1, #1
   11c78:	mov	r2, #0
   11c7c:	mov	r3, #0
   11c80:	str	r1, [sp]
   11c84:	bl	10f00 <lseek64@plt>
   11c88:	and	r0, r0, r1
   11c8c:	cmn	r0, #1
   11c90:	beq	11ccc <__assert_fail@plt+0xc40>
   11c94:	mov	r0, r4
   11c98:	bl	11cdc <__assert_fail@plt+0xc50>
   11c9c:	cmp	r0, #0
   11ca0:	beq	11ccc <__assert_fail@plt+0xc40>
   11ca4:	bl	10fb4 <__errno_location@plt>
   11ca8:	ldr	r6, [r0]
   11cac:	mov	r5, r0
   11cb0:	mov	r0, r4
   11cb4:	bl	10ffc <fclose@plt>
   11cb8:	cmp	r6, #0
   11cbc:	strne	r6, [r5]
   11cc0:	mvnne	r0, #0
   11cc4:	sub	sp, fp, #16
   11cc8:	pop	{r4, r5, r6, sl, fp, pc}
   11ccc:	mov	r0, r4
   11cd0:	sub	sp, fp, #16
   11cd4:	pop	{r4, r5, r6, sl, fp, lr}
   11cd8:	b	10ffc <fclose@plt>
   11cdc:	push	{r4, sl, fp, lr}
   11ce0:	add	fp, sp, #8
   11ce4:	sub	sp, sp, #8
   11ce8:	mov	r4, r0
   11cec:	cmp	r0, #0
   11cf0:	beq	11d28 <__assert_fail@plt+0xc9c>
   11cf4:	mov	r0, r4
   11cf8:	bl	10f54 <__freading@plt>
   11cfc:	cmp	r0, #0
   11d00:	beq	11d28 <__assert_fail@plt+0xc9c>
   11d04:	ldrb	r0, [r4, #1]
   11d08:	tst	r0, #1
   11d0c:	beq	11d28 <__assert_fail@plt+0xc9c>
   11d10:	mov	r0, #1
   11d14:	mov	r2, #0
   11d18:	mov	r3, #0
   11d1c:	str	r0, [sp]
   11d20:	mov	r0, r4
   11d24:	bl	11d38 <__assert_fail@plt+0xcac>
   11d28:	mov	r0, r4
   11d2c:	sub	sp, fp, #8
   11d30:	pop	{r4, sl, fp, lr}
   11d34:	b	10e64 <fflush@plt>
   11d38:	push	{r4, r5, r6, r7, fp, lr}
   11d3c:	add	fp, sp, #16
   11d40:	sub	sp, sp, #8
   11d44:	mov	r4, r0
   11d48:	ldr	r0, [r0, #4]
   11d4c:	mov	r5, r3
   11d50:	mov	r6, r2
   11d54:	ldr	r1, [r4, #8]
   11d58:	cmp	r1, r0
   11d5c:	bne	11d78 <__assert_fail@plt+0xcec>
   11d60:	ldrd	r0, [r4, #16]
   11d64:	cmp	r1, r0
   11d68:	bne	11d78 <__assert_fail@plt+0xcec>
   11d6c:	ldr	r0, [r4, #36]	; 0x24
   11d70:	cmp	r0, #0
   11d74:	beq	11d90 <__assert_fail@plt+0xd04>
   11d78:	mov	r0, r4
   11d7c:	mov	r2, r6
   11d80:	mov	r3, r5
   11d84:	sub	sp, fp, #16
   11d88:	pop	{r4, r5, r6, r7, fp, lr}
   11d8c:	b	11008 <fseeko64@plt>
   11d90:	ldr	r7, [fp, #8]
   11d94:	mov	r0, r4
   11d98:	bl	10fe4 <fileno@plt>
   11d9c:	mov	r2, r6
   11da0:	mov	r3, r5
   11da4:	str	r7, [sp]
   11da8:	bl	10f00 <lseek64@plt>
   11dac:	and	r2, r0, r1
   11db0:	cmn	r2, #1
   11db4:	beq	11dd4 <__assert_fail@plt+0xd48>
   11db8:	strd	r0, [r4, #80]	; 0x50
   11dbc:	ldr	r0, [r4]
   11dc0:	bic	r0, r0, #16
   11dc4:	str	r0, [r4]
   11dc8:	mov	r0, #0
   11dcc:	sub	sp, fp, #16
   11dd0:	pop	{r4, r5, r6, r7, fp, pc}
   11dd4:	mvn	r0, #0
   11dd8:	sub	sp, fp, #16
   11ddc:	pop	{r4, r5, r6, r7, fp, pc}
   11de0:	push	{r4, r5, fp, lr}
   11de4:	add	fp, sp, #8
   11de8:	cmp	r0, #0
   11dec:	beq	11e80 <__assert_fail@plt+0xdf4>
   11df0:	mov	r1, #47	; 0x2f
   11df4:	mov	r4, r0
   11df8:	bl	11038 <strrchr@plt>
   11dfc:	cmp	r0, #0
   11e00:	mov	r5, r4
   11e04:	addne	r5, r0, #1
   11e08:	sub	r0, r5, r4
   11e0c:	cmp	r0, #7
   11e10:	blt	11e64 <__assert_fail@plt+0xdd8>
   11e14:	movw	r1, #24450	; 0x5f82
   11e18:	sub	r0, r5, #7
   11e1c:	mov	r2, #7
   11e20:	movt	r1, #1
   11e24:	bl	11074 <strncmp@plt>
   11e28:	cmp	r0, #0
   11e2c:	bne	11e64 <__assert_fail@plt+0xdd8>
   11e30:	movw	r1, #24458	; 0x5f8a
   11e34:	mov	r0, r5
   11e38:	mov	r2, #3
   11e3c:	movt	r1, #1
   11e40:	bl	11074 <strncmp@plt>
   11e44:	cmp	r0, #0
   11e48:	beq	11e54 <__assert_fail@plt+0xdc8>
   11e4c:	mov	r4, r5
   11e50:	b	11e64 <__assert_fail@plt+0xdd8>
   11e54:	movw	r0, #28976	; 0x7130
   11e58:	add	r4, r5, #3
   11e5c:	movt	r0, #2
   11e60:	str	r4, [r0]
   11e64:	movw	r0, #28980	; 0x7134
   11e68:	movt	r0, #2
   11e6c:	str	r4, [r0]
   11e70:	movw	r0, #29036	; 0x716c
   11e74:	movt	r0, #2
   11e78:	str	r4, [r0]
   11e7c:	pop	{r4, r5, fp, pc}
   11e80:	movw	r0, #28992	; 0x7140
   11e84:	mov	r1, #55	; 0x37
   11e88:	mov	r2, #1
   11e8c:	movt	r0, #2
   11e90:	ldr	r3, [r0]
   11e94:	movw	r0, #24394	; 0x5f4a
   11e98:	movt	r0, #1
   11e9c:	bl	10ef4 <fwrite@plt>
   11ea0:	bl	11080 <abort@plt>
   11ea4:	push	{r4, r5, r6, sl, fp, lr}
   11ea8:	add	fp, sp, #16
   11eac:	mov	r4, r0
   11eb0:	movw	r0, #29040	; 0x7170
   11eb4:	movt	r0, #2
   11eb8:	cmp	r4, #0
   11ebc:	moveq	r4, r0
   11ec0:	bl	10fb4 <__errno_location@plt>
   11ec4:	ldr	r6, [r0]
   11ec8:	mov	r5, r0
   11ecc:	mov	r0, r4
   11ed0:	mov	r1, #48	; 0x30
   11ed4:	bl	14698 <__assert_fail@plt+0x360c>
   11ed8:	str	r6, [r5]
   11edc:	pop	{r4, r5, r6, sl, fp, pc}
   11ee0:	movw	r1, #29040	; 0x7170
   11ee4:	cmp	r0, #0
   11ee8:	movt	r1, #2
   11eec:	movne	r1, r0
   11ef0:	ldr	r0, [r1]
   11ef4:	bx	lr
   11ef8:	movw	r2, #29040	; 0x7170
   11efc:	cmp	r0, #0
   11f00:	movt	r2, #2
   11f04:	movne	r2, r0
   11f08:	str	r1, [r2]
   11f0c:	bx	lr
   11f10:	movw	r3, #29040	; 0x7170
   11f14:	cmp	r0, #0
   11f18:	and	r2, r2, #1
   11f1c:	movt	r3, #2
   11f20:	movne	r3, r0
   11f24:	ubfx	r0, r1, #5, #3
   11f28:	and	r1, r1, #31
   11f2c:	add	ip, r3, r0, lsl #2
   11f30:	mov	r0, #1
   11f34:	ldr	r3, [ip, #8]
   11f38:	and	r0, r0, r3, lsr r1
   11f3c:	eor	r2, r0, r2
   11f40:	eor	r1, r3, r2, lsl r1
   11f44:	str	r1, [ip, #8]
   11f48:	bx	lr
   11f4c:	movw	r2, #29040	; 0x7170
   11f50:	cmp	r0, #0
   11f54:	movt	r2, #2
   11f58:	movne	r2, r0
   11f5c:	ldr	r0, [r2, #4]
   11f60:	str	r1, [r2, #4]
   11f64:	bx	lr
   11f68:	push	{fp, lr}
   11f6c:	mov	fp, sp
   11f70:	movw	r3, #29040	; 0x7170
   11f74:	cmp	r0, #0
   11f78:	movt	r3, #2
   11f7c:	movne	r3, r0
   11f80:	cmp	r1, #0
   11f84:	mov	r0, #10
   11f88:	cmpne	r2, #0
   11f8c:	str	r0, [r3]
   11f90:	bne	11f98 <__assert_fail@plt+0xf0c>
   11f94:	bl	11080 <abort@plt>
   11f98:	str	r1, [r3, #40]	; 0x28
   11f9c:	str	r2, [r3, #44]	; 0x2c
   11fa0:	pop	{fp, pc}
   11fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fa8:	add	fp, sp, #28
   11fac:	sub	sp, sp, #20
   11fb0:	mov	r7, r0
   11fb4:	ldr	r0, [fp, #8]
   11fb8:	movw	r5, #29040	; 0x7170
   11fbc:	mov	r8, r3
   11fc0:	mov	r9, r2
   11fc4:	mov	sl, r1
   11fc8:	movt	r5, #2
   11fcc:	cmp	r0, #0
   11fd0:	movne	r5, r0
   11fd4:	bl	10fb4 <__errno_location@plt>
   11fd8:	ldr	r2, [r5, #40]	; 0x28
   11fdc:	ldr	r3, [r5, #44]	; 0x2c
   11fe0:	mov	r4, r0
   11fe4:	ldm	r5, {r0, r1}
   11fe8:	add	r5, r5, #8
   11fec:	ldr	r6, [r4]
   11ff0:	stm	sp, {r0, r1, r5}
   11ff4:	mov	r0, r7
   11ff8:	mov	r1, sl
   11ffc:	str	r2, [sp, #12]
   12000:	str	r3, [sp, #16]
   12004:	mov	r2, r9
   12008:	mov	r3, r8
   1200c:	bl	1201c <__assert_fail@plt+0xf90>
   12010:	str	r6, [r4]
   12014:	sub	sp, fp, #28
   12018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1201c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12020:	add	fp, sp, #28
   12024:	sub	sp, sp, #156	; 0x9c
   12028:	mov	r5, r0
   1202c:	add	r0, r2, #1
   12030:	mov	r6, r1
   12034:	mov	sl, r3
   12038:	str	r2, [fp, #-80]	; 0xffffffb0
   1203c:	str	r0, [sp, #72]	; 0x48
   12040:	ldr	r0, [fp, #12]
   12044:	and	r1, r0, #1
   12048:	str	r1, [sp, #36]	; 0x24
   1204c:	and	r1, r0, #4
   12050:	str	r1, [sp, #32]
   12054:	ubfx	r9, r0, #1, #1
   12058:	bl	10f0c <__ctype_get_mb_cur_max@plt>
   1205c:	str	r0, [sp, #40]	; 0x28
   12060:	ldr	r0, [fp, #24]
   12064:	ldr	r7, [fp, #8]
   12068:	mov	r1, #0
   1206c:	str	r5, [fp, #-84]	; 0xffffffac
   12070:	str	r1, [fp, #-56]	; 0xffffffc8
   12074:	mov	r1, #0
   12078:	str	r1, [sp, #60]	; 0x3c
   1207c:	mov	r1, #1
   12080:	str	r1, [fp, #-48]	; 0xffffffd0
   12084:	str	r0, [sp, #80]	; 0x50
   12088:	ldr	r0, [fp, #20]
   1208c:	str	r0, [sp, #76]	; 0x4c
   12090:	mov	r0, #0
   12094:	str	r0, [sp, #56]	; 0x38
   12098:	mov	r0, #0
   1209c:	str	r0, [fp, #-88]	; 0xffffffa8
   120a0:	mov	r0, #0
   120a4:	str	r0, [fp, #-72]	; 0xffffffb8
   120a8:	mov	r0, #0
   120ac:	cmp	r7, #10
   120b0:	bhi	13044 <__assert_fail@plt+0x1fb8>
   120b4:	add	r1, pc, #24
   120b8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   120bc:	mov	r4, r6
   120c0:	mov	r8, #0
   120c4:	mov	r2, #1
   120c8:	mov	r3, #0
   120cc:	mov	lr, sl
   120d0:	ldr	pc, [r1, r7, lsl #2]
   120d4:	muleq	r1, r8, r1
   120d8:	andeq	r2, r1, ip, ror #3
   120dc:	andeq	r2, r1, ip, lsr #3
   120e0:	muleq	r1, r0, r1
   120e4:	andeq	r2, r1, r0, ror #3
   120e8:	andeq	r2, r1, r4, lsl r2
   120ec:			; <UNDEFINED> instruction: 0x000121bc
   120f0:	muleq	r1, r8, r2
   120f4:	andeq	r2, r1, r0, lsl #2
   120f8:	andeq	r2, r1, r0, lsl #2
   120fc:	andeq	r2, r1, r8, lsr #2
   12100:	movw	r0, #24540	; 0x5fdc
   12104:	mov	r1, r7
   12108:	movt	r0, #1
   1210c:	bl	13a4c <__assert_fail@plt+0x29c0>
   12110:	str	r0, [sp, #76]	; 0x4c
   12114:	movw	r0, #24542	; 0x5fde
   12118:	mov	r1, r7
   1211c:	movt	r0, #1
   12120:	bl	13a4c <__assert_fail@plt+0x29c0>
   12124:	str	r0, [sp, #80]	; 0x50
   12128:	mov	r8, #0
   1212c:	tst	r9, #1
   12130:	bne	12168 <__assert_fail@plt+0x10dc>
   12134:	ldr	r0, [sp, #76]	; 0x4c
   12138:	ldrb	r0, [r0]
   1213c:	cmp	r0, #0
   12140:	beq	12168 <__assert_fail@plt+0x10dc>
   12144:	ldr	r1, [sp, #76]	; 0x4c
   12148:	mov	r8, #0
   1214c:	add	r1, r1, #1
   12150:	cmp	r8, r4
   12154:	strbcc	r0, [r5, r8]
   12158:	ldrb	r0, [r1, r8]
   1215c:	add	r8, r8, #1
   12160:	cmp	r0, #0
   12164:	bne	12150 <__assert_fail@plt+0x10c4>
   12168:	ldr	r6, [sp, #80]	; 0x50
   1216c:	mov	r0, r6
   12170:	bl	10f9c <strlen@plt>
   12174:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12178:	str	r0, [fp, #-72]	; 0xffffffb8
   1217c:	str	r6, [fp, #-88]	; 0xffffffa8
   12180:	mov	r2, #1
   12184:	mov	r3, r9
   12188:	mov	lr, sl
   1218c:	b	12298 <__assert_fail@plt+0x120c>
   12190:	mov	r0, #1
   12194:	b	121ec <__assert_fail@plt+0x1160>
   12198:	mov	r7, #0
   1219c:	mov	r8, #0
   121a0:	mov	r2, r0
   121a4:	mov	r3, #0
   121a8:	b	12298 <__assert_fail@plt+0x120c>
   121ac:	tst	r9, #1
   121b0:	bne	121ec <__assert_fail@plt+0x1160>
   121b4:	mov	r2, r0
   121b8:	b	12244 <__assert_fail@plt+0x11b8>
   121bc:	mov	r0, #1
   121c0:	mov	r8, #0
   121c4:	mov	r7, #5
   121c8:	mov	r2, #1
   121cc:	str	r0, [fp, #-72]	; 0xffffffb8
   121d0:	movw	r0, #24538	; 0x5fda
   121d4:	movt	r0, #1
   121d8:	str	r0, [fp, #-88]	; 0xffffffa8
   121dc:	b	1220c <__assert_fail@plt+0x1180>
   121e0:	mov	r2, #1
   121e4:	tst	r9, #1
   121e8:	beq	12244 <__assert_fail@plt+0x11b8>
   121ec:	mov	r1, #1
   121f0:	mov	r8, #0
   121f4:	mov	r7, #2
   121f8:	mov	r2, r0
   121fc:	str	r1, [fp, #-72]	; 0xffffffb8
   12200:	movw	r1, #24542	; 0x5fde
   12204:	movt	r1, #1
   12208:	str	r1, [fp, #-88]	; 0xffffffa8
   1220c:	mov	r3, #1
   12210:	b	12298 <__assert_fail@plt+0x120c>
   12214:	tst	r9, #1
   12218:	beq	12268 <__assert_fail@plt+0x11dc>
   1221c:	mov	r0, #1
   12220:	mov	r8, #0
   12224:	mov	r2, #1
   12228:	mov	r3, #1
   1222c:	mov	r7, #5
   12230:	str	r0, [fp, #-72]	; 0xffffffb8
   12234:	movw	r0, #24538	; 0x5fda
   12238:	movt	r0, #1
   1223c:	str	r0, [fp, #-88]	; 0xffffffa8
   12240:	b	12298 <__assert_fail@plt+0x120c>
   12244:	cmp	r4, #0
   12248:	mov	r8, #1
   1224c:	mov	r3, #0
   12250:	mov	r7, #2
   12254:	movne	r0, #39	; 0x27
   12258:	strbne	r0, [r5]
   1225c:	movw	r0, #24542	; 0x5fde
   12260:	movt	r0, #1
   12264:	b	1228c <__assert_fail@plt+0x1200>
   12268:	cmp	r4, #0
   1226c:	mov	r8, #1
   12270:	mov	r2, #1
   12274:	mov	r7, #5
   12278:	mov	r3, #0
   1227c:	movne	r0, #34	; 0x22
   12280:	strbne	r0, [r5]
   12284:	movw	r0, #24538	; 0x5fda
   12288:	movt	r0, #1
   1228c:	str	r0, [fp, #-88]	; 0xffffffa8
   12290:	mov	r0, #1
   12294:	str	r0, [fp, #-72]	; 0xffffffb8
   12298:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1229c:	eor	r6, r3, #1
   122a0:	str	r7, [fp, #-68]	; 0xffffffbc
   122a4:	str	r3, [fp, #-76]	; 0xffffffb4
   122a8:	str	r2, [sp, #84]	; 0x54
   122ac:	str	r6, [sp, #92]	; 0x5c
   122b0:	cmp	r0, #0
   122b4:	movwne	r0, #1
   122b8:	and	r1, r0, r3
   122bc:	and	r1, r2, r1
   122c0:	str	r1, [sp, #48]	; 0x30
   122c4:	sub	r1, r7, #2
   122c8:	clz	r1, r1
   122cc:	lsr	r1, r1, #5
   122d0:	and	r1, r1, r3
   122d4:	str	r1, [sp, #64]	; 0x40
   122d8:	subs	r1, r7, #2
   122dc:	mov	r7, #0
   122e0:	movwne	r1, #1
   122e4:	orr	r6, r1, r6
   122e8:	and	r1, r1, r2
   122ec:	and	r0, r0, r1
   122f0:	str	r6, [sp, #68]	; 0x44
   122f4:	str	r0, [fp, #-60]	; 0xffffffc4
   122f8:	orr	r0, r1, r3
   122fc:	ldr	r1, [fp, #16]
   12300:	eor	r0, r0, #1
   12304:	clz	r1, r1
   12308:	lsr	r1, r1, #5
   1230c:	orr	r0, r1, r0
   12310:	str	r0, [fp, #-64]	; 0xffffffc0
   12314:	eor	r0, r2, #1
   12318:	str	r0, [sp, #52]	; 0x34
   1231c:	cmn	lr, #1
   12320:	beq	12330 <__assert_fail@plt+0x12a4>
   12324:	cmp	r7, lr
   12328:	bne	1233c <__assert_fail@plt+0x12b0>
   1232c:	b	12e84 <__assert_fail@plt+0x1df8>
   12330:	ldrb	r0, [ip, r7]
   12334:	cmp	r0, #0
   12338:	beq	12e8c <__assert_fail@plt+0x1e00>
   1233c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12340:	mov	sl, #0
   12344:	cmp	r0, #0
   12348:	beq	12380 <__assert_fail@plt+0x12f4>
   1234c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12350:	add	r5, r7, r0
   12354:	cmp	r0, #2
   12358:	bcc	12374 <__assert_fail@plt+0x12e8>
   1235c:	cmn	lr, #1
   12360:	bne	12374 <__assert_fail@plt+0x12e8>
   12364:	mov	r0, ip
   12368:	bl	10f9c <strlen@plt>
   1236c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12370:	mov	lr, r0
   12374:	cmp	r5, lr
   12378:	bls	12388 <__assert_fail@plt+0x12fc>
   1237c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12380:	mov	r0, #0
   12384:	b	123d4 <__assert_fail@plt+0x1348>
   12388:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1238c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12390:	add	r0, ip, r7
   12394:	mov	r6, r4
   12398:	mov	r4, lr
   1239c:	bl	10f90 <bcmp@plt>
   123a0:	ldr	r2, [sp, #92]	; 0x5c
   123a4:	cmp	r0, #0
   123a8:	ldr	r5, [fp, #-84]	; 0xffffffac
   123ac:	mov	r1, r0
   123b0:	movwne	r1, #1
   123b4:	orr	r1, r1, r2
   123b8:	tst	r1, #1
   123bc:	beq	12f14 <__assert_fail@plt+0x1e88>
   123c0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   123c4:	clz	r0, r0
   123c8:	mov	lr, r4
   123cc:	mov	r4, r6
   123d0:	lsr	r0, r0, #5
   123d4:	str	r0, [fp, #-52]	; 0xffffffcc
   123d8:	ldrb	r6, [ip, r7]
   123dc:	cmp	r6, #126	; 0x7e
   123e0:	bhi	12910 <__assert_fail@plt+0x1884>
   123e4:	add	r3, pc, #16
   123e8:	mov	r9, #1
   123ec:	mov	r2, #110	; 0x6e
   123f0:	mov	r0, #97	; 0x61
   123f4:	mov	r1, #0
   123f8:	ldr	pc, [r3, r6, lsl #2]
   123fc:	andeq	r2, r1, r0, ror r7
   12400:	andeq	r2, r1, r0, lsl r9
   12404:	andeq	r2, r1, r0, lsl r9
   12408:	andeq	r2, r1, r0, lsl r9
   1240c:	andeq	r2, r1, r0, lsl r9
   12410:	andeq	r2, r1, r0, lsl r9
   12414:	andeq	r2, r1, r0, lsl r9
   12418:	andeq	r2, r1, ip, ror #19
   1241c:	andeq	r2, r1, r0, asr r7
   12420:	andeq	r2, r1, r8, asr #14
   12424:	andeq	r2, r1, ip, asr r7
   12428:	andeq	r2, r1, r8, ror r8
   1242c:	andeq	r2, r1, r0, asr #14
   12430:	andeq	r2, r1, r8, asr r7
   12434:	andeq	r2, r1, r0, lsl r9
   12438:	andeq	r2, r1, r0, lsl r9
   1243c:	andeq	r2, r1, r0, lsl r9
   12440:	andeq	r2, r1, r0, lsl r9
   12444:	andeq	r2, r1, r0, lsl r9
   12448:	andeq	r2, r1, r0, lsl r9
   1244c:	andeq	r2, r1, r0, lsl r9
   12450:	andeq	r2, r1, r0, lsl r9
   12454:	andeq	r2, r1, r0, lsl r9
   12458:	andeq	r2, r1, r0, lsl r9
   1245c:	andeq	r2, r1, r0, lsl r9
   12460:	andeq	r2, r1, r0, lsl r9
   12464:	andeq	r2, r1, r0, lsl r9
   12468:	andeq	r2, r1, r0, lsl r9
   1246c:	andeq	r2, r1, r0, lsl r9
   12470:	andeq	r2, r1, r0, lsl r9
   12474:	andeq	r2, r1, r0, lsl r9
   12478:	andeq	r2, r1, r0, lsl r9
   1247c:	strdeq	r2, [r1], -r4
   12480:	strdeq	r2, [r1], -r8
   12484:	strdeq	r2, [r1], -r8
   12488:	andeq	r2, r1, r0, ror #13
   1248c:	strdeq	r2, [r1], -r8
   12490:	strdeq	r2, [r1], -r8
   12494:	strdeq	r2, [r1], -r8
   12498:	andeq	r2, r1, r0, lsl #17
   1249c:	strdeq	r2, [r1], -r8
   124a0:	strdeq	r2, [r1], -r8
   124a4:	strdeq	r2, [r1], -r8
   124a8:	strdeq	r2, [r1], -r8
   124ac:	strdeq	r2, [r1], -r8
   124b0:	strdeq	r2, [r1], -r8
   124b4:	strdeq	r2, [r1], -r8
   124b8:	strdeq	r2, [r1], -r8
   124bc:	strdeq	r2, [r1], -r8
   124c0:	strdeq	r2, [r1], -r8
   124c4:	strdeq	r2, [r1], -r8
   124c8:	strdeq	r2, [r1], -r8
   124cc:	strdeq	r2, [r1], -r8
   124d0:	strdeq	r2, [r1], -r8
   124d4:	strdeq	r2, [r1], -r8
   124d8:	strdeq	r2, [r1], -r8
   124dc:	strdeq	r2, [r1], -r8
   124e0:	strdeq	r2, [r1], -r8
   124e4:	strdeq	r2, [r1], -r8
   124e8:	strdeq	r2, [r1], -r8
   124ec:	strdeq	r2, [r1], -r8
   124f0:	strdeq	r2, [r1], -r8
   124f4:	strdeq	r2, [r1], -r8
   124f8:	andeq	r2, r1, r8, asr #16
   124fc:	andeq	r2, r1, r0, lsl r9
   12500:	strdeq	r2, [r1], -r8
   12504:	strdeq	r2, [r1], -r8
   12508:	strdeq	r2, [r1], -r8
   1250c:	strdeq	r2, [r1], -r8
   12510:	strdeq	r2, [r1], -r8
   12514:	strdeq	r2, [r1], -r8
   12518:	strdeq	r2, [r1], -r8
   1251c:	strdeq	r2, [r1], -r8
   12520:	strdeq	r2, [r1], -r8
   12524:	strdeq	r2, [r1], -r8
   12528:	strdeq	r2, [r1], -r8
   1252c:	strdeq	r2, [r1], -r8
   12530:	strdeq	r2, [r1], -r8
   12534:	strdeq	r2, [r1], -r8
   12538:	strdeq	r2, [r1], -r8
   1253c:	strdeq	r2, [r1], -r8
   12540:	strdeq	r2, [r1], -r8
   12544:	strdeq	r2, [r1], -r8
   12548:	strdeq	r2, [r1], -r8
   1254c:	strdeq	r2, [r1], -r8
   12550:	strdeq	r2, [r1], -r8
   12554:	strdeq	r2, [r1], -r8
   12558:	strdeq	r2, [r1], -r8
   1255c:	strdeq	r2, [r1], -r8
   12560:	strdeq	r2, [r1], -r8
   12564:	strdeq	r2, [r1], -r8
   12568:	strdeq	r2, [r1], -r8
   1256c:	andeq	r2, r1, r0, lsr #14
   12570:	strdeq	r2, [r1], -r8
   12574:	strdeq	r2, [r1], -r8
   12578:	strdeq	r2, [r1], -r8
   1257c:	strdeq	r2, [r1], -r8
   12580:	strdeq	r2, [r1], -r8
   12584:	strdeq	r2, [r1], -r8
   12588:	strdeq	r2, [r1], -r8
   1258c:	strdeq	r2, [r1], -r8
   12590:	strdeq	r2, [r1], -r8
   12594:	strdeq	r2, [r1], -r8
   12598:	strdeq	r2, [r1], -r8
   1259c:	strdeq	r2, [r1], -r8
   125a0:	strdeq	r2, [r1], -r8
   125a4:	strdeq	r2, [r1], -r8
   125a8:	strdeq	r2, [r1], -r8
   125ac:	strdeq	r2, [r1], -r8
   125b0:	strdeq	r2, [r1], -r8
   125b4:	strdeq	r2, [r1], -r8
   125b8:	strdeq	r2, [r1], -r8
   125bc:	strdeq	r2, [r1], -r8
   125c0:	strdeq	r2, [r1], -r8
   125c4:	strdeq	r2, [r1], -r8
   125c8:	strdeq	r2, [r1], -r8
   125cc:	strdeq	r2, [r1], -r8
   125d0:	strdeq	r2, [r1], -r8
   125d4:	strdeq	r2, [r1], -r8
   125d8:	strdeq	r2, [r1], -r8
   125dc:	strdeq	r2, [r1], -r8
   125e0:	strdeq	r2, [r1], -r8
   125e4:	strdeq	r2, [r1], -r8
   125e8:			; <UNDEFINED> instruction: 0x000126b4
   125ec:	strdeq	r2, [r1], -r8
   125f0:			; <UNDEFINED> instruction: 0x000126b4
   125f4:	andeq	r2, r1, r0, ror #13
   125f8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   125fc:	tst	r0, #1
   12600:	bne	1262c <__assert_fail@plt+0x15a0>
   12604:	ldr	r1, [fp, #16]
   12608:	ubfx	r0, r6, #5, #3
   1260c:	mov	r2, #1
   12610:	ldr	r0, [r1, r0, lsl #2]
   12614:	and	r1, r6, #31
   12618:	tst	r0, r2, lsl r1
   1261c:	beq	1262c <__assert_fail@plt+0x15a0>
   12620:	mov	r0, r6
   12624:	mov	r1, r9
   12628:	b	12640 <__assert_fail@plt+0x15b4>
   1262c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12630:	mov	r1, r9
   12634:	cmp	r0, #0
   12638:	mov	r0, r6
   1263c:	beq	12980 <__assert_fail@plt+0x18f4>
   12640:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12644:	tst	r2, #1
   12648:	bne	12f50 <__assert_fail@plt+0x1ec4>
   1264c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12650:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12654:	subs	r2, r2, #2
   12658:	movwne	r2, #1
   1265c:	orr	r2, r2, r3
   12660:	tst	r2, #1
   12664:	bne	126a0 <__assert_fail@plt+0x1614>
   12668:	cmp	r8, r4
   1266c:	movcc	r2, #39	; 0x27
   12670:	strbcc	r2, [r5, r8]
   12674:	add	r2, r8, #1
   12678:	cmp	r2, r4
   1267c:	movcc	r3, #36	; 0x24
   12680:	strbcc	r3, [r5, r2]
   12684:	add	r2, r8, #2
   12688:	add	r8, r8, #3
   1268c:	cmp	r2, r4
   12690:	movcc	r3, #39	; 0x27
   12694:	strbcc	r3, [r5, r2]
   12698:	mov	r2, #1
   1269c:	str	r2, [fp, #-56]	; 0xffffffc8
   126a0:	cmp	r8, r4
   126a4:	movcc	r2, #92	; 0x5c
   126a8:	strbcc	r2, [r5, r8]
   126ac:	add	r8, r8, #1
   126b0:	b	129c4 <__assert_fail@plt+0x1938>
   126b4:	cmp	lr, #1
   126b8:	beq	126e0 <__assert_fail@plt+0x1654>
   126bc:	mov	r9, #0
   126c0:	cmn	lr, #1
   126c4:	bne	126ec <__assert_fail@plt+0x1660>
   126c8:	ldrb	r0, [ip, #1]
   126cc:	cmp	r0, #0
   126d0:	beq	126e0 <__assert_fail@plt+0x1654>
   126d4:	mvn	lr, #0
   126d8:	mov	sl, #0
   126dc:	b	125f8 <__assert_fail@plt+0x156c>
   126e0:	mov	r9, #0
   126e4:	cmp	r7, #0
   126e8:	beq	126f4 <__assert_fail@plt+0x1668>
   126ec:	mov	sl, #0
   126f0:	b	125f8 <__assert_fail@plt+0x156c>
   126f4:	mov	r1, #1
   126f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   126fc:	cmp	r0, #2
   12700:	bne	12718 <__assert_fail@plt+0x168c>
   12704:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12708:	mov	r9, r1
   1270c:	tst	r0, #1
   12710:	beq	125f8 <__assert_fail@plt+0x156c>
   12714:	b	12f50 <__assert_fail@plt+0x1ec4>
   12718:	mov	r9, r1
   1271c:	b	125f8 <__assert_fail@plt+0x156c>
   12720:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12724:	cmp	r0, #2
   12728:	bne	12964 <__assert_fail@plt+0x18d8>
   1272c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12730:	tst	r0, #1
   12734:	bne	12f50 <__assert_fail@plt+0x1ec4>
   12738:	mov	sl, #0
   1273c:	b	12978 <__assert_fail@plt+0x18ec>
   12740:	mov	r0, #102	; 0x66
   12744:	b	129ec <__assert_fail@plt+0x1960>
   12748:	mov	r2, #116	; 0x74
   1274c:	b	1275c <__assert_fail@plt+0x16d0>
   12750:	mov	r0, #98	; 0x62
   12754:	b	129ec <__assert_fail@plt+0x1960>
   12758:	mov	r2, #114	; 0x72
   1275c:	ldr	r0, [sp, #68]	; 0x44
   12760:	tst	r0, #1
   12764:	mov	r0, r2
   12768:	bne	129ec <__assert_fail@plt+0x1960>
   1276c:	b	12f50 <__assert_fail@plt+0x1ec4>
   12770:	ldr	r0, [sp, #84]	; 0x54
   12774:	tst	r0, #1
   12778:	beq	12a08 <__assert_fail@plt+0x197c>
   1277c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12780:	tst	r0, #1
   12784:	bne	1303c <__assert_fail@plt+0x1fb0>
   12788:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1278c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12790:	subs	r0, r0, #2
   12794:	movwne	r0, #1
   12798:	orr	r0, r0, r1
   1279c:	tst	r0, #1
   127a0:	bne	127dc <__assert_fail@plt+0x1750>
   127a4:	cmp	r8, r4
   127a8:	movcc	r0, #39	; 0x27
   127ac:	strbcc	r0, [r5, r8]
   127b0:	add	r0, r8, #1
   127b4:	cmp	r0, r4
   127b8:	movcc	r1, #36	; 0x24
   127bc:	strbcc	r1, [r5, r0]
   127c0:	add	r0, r8, #2
   127c4:	add	r8, r8, #3
   127c8:	cmp	r0, r4
   127cc:	movcc	r1, #39	; 0x27
   127d0:	strbcc	r1, [r5, r0]
   127d4:	mov	r0, #1
   127d8:	str	r0, [fp, #-56]	; 0xffffffc8
   127dc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   127e0:	cmp	r8, r4
   127e4:	mov	r9, #0
   127e8:	mov	sl, #1
   127ec:	mov	r6, #48	; 0x30
   127f0:	movcc	r0, #92	; 0x5c
   127f4:	strbcc	r0, [r5, r8]
   127f8:	add	r0, r8, #1
   127fc:	cmp	r1, #2
   12800:	beq	12bd0 <__assert_fail@plt+0x1b44>
   12804:	add	r1, r7, #1
   12808:	cmp	r1, lr
   1280c:	bcs	12bd0 <__assert_fail@plt+0x1b44>
   12810:	ldrb	r1, [ip, r1]
   12814:	sub	r1, r1, #48	; 0x30
   12818:	uxtb	r1, r1
   1281c:	cmp	r1, #9
   12820:	bhi	12bd0 <__assert_fail@plt+0x1b44>
   12824:	cmp	r0, r4
   12828:	movcc	r1, #48	; 0x30
   1282c:	strbcc	r1, [r5, r0]
   12830:	add	r0, r8, #2
   12834:	add	r8, r8, #3
   12838:	cmp	r0, r4
   1283c:	movcc	r1, #48	; 0x30
   12840:	strbcc	r1, [r5, r0]
   12844:	b	125f8 <__assert_fail@plt+0x156c>
   12848:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1284c:	mov	sl, #0
   12850:	mov	r6, #63	; 0x3f
   12854:	cmp	r0, #5
   12858:	beq	12bd8 <__assert_fail@plt+0x1b4c>
   1285c:	cmp	r0, #2
   12860:	bne	12c80 <__assert_fail@plt+0x1bf4>
   12864:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12868:	mov	r9, #0
   1286c:	tst	r0, #1
   12870:	beq	125f8 <__assert_fail@plt+0x156c>
   12874:	b	12f50 <__assert_fail@plt+0x1ec4>
   12878:	mov	r0, #118	; 0x76
   1287c:	b	129ec <__assert_fail@plt+0x1960>
   12880:	mov	r0, #1
   12884:	mov	r6, #39	; 0x27
   12888:	str	r0, [sp, #60]	; 0x3c
   1288c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12890:	cmp	r0, #2
   12894:	bne	12a24 <__assert_fail@plt+0x1998>
   12898:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1289c:	tst	r0, #1
   128a0:	bne	12f50 <__assert_fail@plt+0x1ec4>
   128a4:	ldr	r2, [sp, #56]	; 0x38
   128a8:	clz	r1, r4
   128ac:	mov	sl, #0
   128b0:	mov	r9, #1
   128b4:	lsr	r1, r1, #5
   128b8:	cmp	r2, #0
   128bc:	mov	r0, r2
   128c0:	movwne	r0, #1
   128c4:	orrs	r0, r0, r1
   128c8:	moveq	r2, r4
   128cc:	moveq	r4, r0
   128d0:	cmp	r8, r4
   128d4:	str	r2, [sp, #56]	; 0x38
   128d8:	movcc	r0, #39	; 0x27
   128dc:	strbcc	r0, [r5, r8]
   128e0:	add	r0, r8, #1
   128e4:	cmp	r0, r4
   128e8:	movcc	r1, #92	; 0x5c
   128ec:	strbcc	r1, [r5, r0]
   128f0:	add	r0, r8, #2
   128f4:	add	r8, r8, #3
   128f8:	cmp	r0, r4
   128fc:	movcc	r1, #39	; 0x27
   12900:	strbcc	r1, [r5, r0]
   12904:	mov	r0, #0
   12908:	str	r0, [fp, #-56]	; 0xffffffc8
   1290c:	b	125f8 <__assert_fail@plt+0x156c>
   12910:	ldr	r0, [sp, #40]	; 0x28
   12914:	str	r4, [sp, #88]	; 0x58
   12918:	cmp	r0, #1
   1291c:	bne	12a2c <__assert_fail@plt+0x19a0>
   12920:	str	lr, [sp, #28]
   12924:	bl	10f78 <__ctype_b_loc@plt>
   12928:	ldr	r0, [r0]
   1292c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12930:	mov	r2, #1
   12934:	add	r0, r0, r6, lsl #1
   12938:	ldrb	r0, [r0, #1]
   1293c:	ubfx	r9, r0, #6, #1
   12940:	ldr	r0, [sp, #52]	; 0x34
   12944:	cmp	r2, #1
   12948:	orr	r0, r9, r0
   1294c:	bhi	12c88 <__assert_fail@plt+0x1bfc>
   12950:	tst	r0, #1
   12954:	beq	12c88 <__assert_fail@plt+0x1bfc>
   12958:	ldr	lr, [sp, #28]
   1295c:	ldr	r4, [sp, #88]	; 0x58
   12960:	b	125f8 <__assert_fail@plt+0x156c>
   12964:	ldr	r1, [sp, #48]	; 0x30
   12968:	mov	sl, #0
   1296c:	mov	r0, #92	; 0x5c
   12970:	cmp	r1, #0
   12974:	beq	129ec <__assert_fail@plt+0x1960>
   12978:	mov	r6, #92	; 0x5c
   1297c:	mov	r9, #0
   12980:	cmp	sl, #0
   12984:	bne	129bc <__assert_fail@plt+0x1930>
   12988:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1298c:	tst	r0, #1
   12990:	beq	129bc <__assert_fail@plt+0x1930>
   12994:	cmp	r8, r4
   12998:	movcc	r0, #39	; 0x27
   1299c:	strbcc	r0, [r5, r8]
   129a0:	add	r0, r8, #1
   129a4:	add	r8, r8, #2
   129a8:	cmp	r0, r4
   129ac:	movcc	r1, #39	; 0x27
   129b0:	strbcc	r1, [r5, r0]
   129b4:	mov	r0, #0
   129b8:	str	r0, [fp, #-56]	; 0xffffffc8
   129bc:	mov	r1, r9
   129c0:	mov	r0, r6
   129c4:	cmp	r8, r4
   129c8:	strbcc	r0, [r5, r8]
   129cc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   129d0:	add	r8, r8, #1
   129d4:	and	r0, r0, r1
   129d8:	str	r0, [fp, #-48]	; 0xffffffd0
   129dc:	add	r7, r7, #1
   129e0:	cmn	lr, #1
   129e4:	bne	12324 <__assert_fail@plt+0x1298>
   129e8:	b	12330 <__assert_fail@plt+0x12a4>
   129ec:	ldr	r1, [sp, #84]	; 0x54
   129f0:	mov	sl, #0
   129f4:	mov	r9, #0
   129f8:	tst	r1, #1
   129fc:	mov	r1, #0
   12a00:	beq	125f8 <__assert_fail@plt+0x156c>
   12a04:	b	12640 <__assert_fail@plt+0x15b4>
   12a08:	ldr	r0, [sp, #36]	; 0x24
   12a0c:	mov	r6, #0
   12a10:	mov	sl, #0
   12a14:	mov	r9, #0
   12a18:	cmp	r0, #0
   12a1c:	beq	125f8 <__assert_fail@plt+0x156c>
   12a20:	b	129dc <__assert_fail@plt+0x1950>
   12a24:	mov	r9, #1
   12a28:	b	125f8 <__assert_fail@plt+0x156c>
   12a2c:	mov	r0, #0
   12a30:	cmn	lr, #1
   12a34:	sub	r4, fp, #40	; 0x28
   12a38:	str	r0, [fp, #-36]	; 0xffffffdc
   12a3c:	str	r0, [fp, #-40]	; 0xffffffd8
   12a40:	bne	12a54 <__assert_fail@plt+0x19c8>
   12a44:	mov	r0, ip
   12a48:	bl	10f9c <strlen@plt>
   12a4c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12a50:	mov	lr, r0
   12a54:	ldr	r0, [sp, #72]	; 0x48
   12a58:	mov	r9, #1
   12a5c:	mov	r2, #0
   12a60:	str	lr, [sp, #28]
   12a64:	add	r0, r0, r7
   12a68:	str	r0, [sp, #20]
   12a6c:	b	12ab0 <__assert_fail@plt+0x1a24>
   12a70:	ldr	r5, [sp, #44]	; 0x2c
   12a74:	add	r5, r0, r5
   12a78:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12a7c:	bl	10ee8 <iswprint@plt>
   12a80:	cmp	r0, #0
   12a84:	sub	r4, fp, #40	; 0x28
   12a88:	movwne	r0, #1
   12a8c:	and	r9, r9, r0
   12a90:	mov	r0, r4
   12a94:	bl	10eac <mbsinit@plt>
   12a98:	mov	r2, r5
   12a9c:	ldr	lr, [sp, #28]
   12aa0:	ldr	r5, [fp, #-84]	; 0xffffffac
   12aa4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12aa8:	cmp	r0, #0
   12aac:	bne	12940 <__assert_fail@plt+0x18b4>
   12ab0:	add	r0, r2, r7
   12ab4:	str	r2, [sp, #44]	; 0x2c
   12ab8:	mov	r3, r4
   12abc:	add	r1, ip, r0
   12ac0:	str	r0, [sp, #24]
   12ac4:	sub	r2, lr, r0
   12ac8:	sub	r0, fp, #44	; 0x2c
   12acc:	bl	15710 <__assert_fail@plt+0x4684>
   12ad0:	cmp	r0, #0
   12ad4:	beq	12e78 <__assert_fail@plt+0x1dec>
   12ad8:	cmn	r0, #1
   12adc:	beq	12e34 <__assert_fail@plt+0x1da8>
   12ae0:	ldr	lr, [sp, #28]
   12ae4:	cmn	r0, #2
   12ae8:	beq	12e3c <__assert_fail@plt+0x1db0>
   12aec:	ldr	r2, [sp, #64]	; 0x40
   12af0:	ldr	r4, [sp, #88]	; 0x58
   12af4:	ldr	ip, [sp, #84]	; 0x54
   12af8:	cmp	r0, #2
   12afc:	mov	r1, #0
   12b00:	movwcc	r1, #1
   12b04:	eor	r2, r2, #1
   12b08:	orrs	r1, r2, r1
   12b0c:	bne	12a70 <__assert_fail@plt+0x19e4>
   12b10:	ldr	r1, [sp, #44]	; 0x2c
   12b14:	ldr	r2, [sp, #20]
   12b18:	add	r1, r2, r1
   12b1c:	sub	r2, r0, #1
   12b20:	b	12b30 <__assert_fail@plt+0x1aa4>
   12b24:	add	r1, r1, #1
   12b28:	subs	r2, r2, #1
   12b2c:	beq	12a70 <__assert_fail@plt+0x19e4>
   12b30:	ldrb	r3, [r1]
   12b34:	sub	r3, r3, #91	; 0x5b
   12b38:	cmp	r3, #33	; 0x21
   12b3c:	bhi	12b24 <__assert_fail@plt+0x1a98>
   12b40:	add	r5, pc, #0
   12b44:	ldr	pc, [r5, r3, lsl #2]
   12b48:	andeq	r2, r1, ip, lsr #30
   12b4c:	andeq	r2, r1, ip, lsr #30
   12b50:	andeq	r2, r1, r4, lsr #22
   12b54:	andeq	r2, r1, ip, lsr #30
   12b58:	andeq	r2, r1, r4, lsr #22
   12b5c:	andeq	r2, r1, ip, lsr #30
   12b60:	andeq	r2, r1, r4, lsr #22
   12b64:	andeq	r2, r1, r4, lsr #22
   12b68:	andeq	r2, r1, r4, lsr #22
   12b6c:	andeq	r2, r1, r4, lsr #22
   12b70:	andeq	r2, r1, r4, lsr #22
   12b74:	andeq	r2, r1, r4, lsr #22
   12b78:	andeq	r2, r1, r4, lsr #22
   12b7c:	andeq	r2, r1, r4, lsr #22
   12b80:	andeq	r2, r1, r4, lsr #22
   12b84:	andeq	r2, r1, r4, lsr #22
   12b88:	andeq	r2, r1, r4, lsr #22
   12b8c:	andeq	r2, r1, r4, lsr #22
   12b90:	andeq	r2, r1, r4, lsr #22
   12b94:	andeq	r2, r1, r4, lsr #22
   12b98:	andeq	r2, r1, r4, lsr #22
   12b9c:	andeq	r2, r1, r4, lsr #22
   12ba0:	andeq	r2, r1, r4, lsr #22
   12ba4:	andeq	r2, r1, r4, lsr #22
   12ba8:	andeq	r2, r1, r4, lsr #22
   12bac:	andeq	r2, r1, r4, lsr #22
   12bb0:	andeq	r2, r1, r4, lsr #22
   12bb4:	andeq	r2, r1, r4, lsr #22
   12bb8:	andeq	r2, r1, r4, lsr #22
   12bbc:	andeq	r2, r1, r4, lsr #22
   12bc0:	andeq	r2, r1, r4, lsr #22
   12bc4:	andeq	r2, r1, r4, lsr #22
   12bc8:	andeq	r2, r1, r4, lsr #22
   12bcc:	andeq	r2, r1, ip, lsr #30
   12bd0:	mov	r8, r0
   12bd4:	b	125f8 <__assert_fail@plt+0x156c>
   12bd8:	ldr	r0, [sp, #32]
   12bdc:	cmp	r0, #0
   12be0:	beq	12c80 <__assert_fail@plt+0x1bf4>
   12be4:	add	r0, r7, #2
   12be8:	cmp	r0, lr
   12bec:	bcs	12c80 <__assert_fail@plt+0x1bf4>
   12bf0:	add	r1, r7, ip
   12bf4:	ldrb	r1, [r1, #1]
   12bf8:	cmp	r1, #63	; 0x3f
   12bfc:	bne	12c80 <__assert_fail@plt+0x1bf4>
   12c00:	ldrb	r9, [ip, r0]
   12c04:	sub	r2, r9, #33	; 0x21
   12c08:	cmp	r2, #29
   12c0c:	bhi	12c80 <__assert_fail@plt+0x1bf4>
   12c10:	movw	r1, #20929	; 0x51c1
   12c14:	mov	r3, #1
   12c18:	movt	r1, #14336	; 0x3800
   12c1c:	tst	r1, r3, lsl r2
   12c20:	beq	12c80 <__assert_fail@plt+0x1bf4>
   12c24:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12c28:	tst	r1, #1
   12c2c:	bne	12f50 <__assert_fail@plt+0x1ec4>
   12c30:	cmp	r8, r4
   12c34:	add	r2, r8, #1
   12c38:	mov	r6, r9
   12c3c:	mov	r7, r0
   12c40:	mov	r9, #0
   12c44:	movcc	r1, #63	; 0x3f
   12c48:	strbcc	r1, [r5, r8]
   12c4c:	cmp	r2, r4
   12c50:	movcc	r1, #34	; 0x22
   12c54:	strbcc	r1, [r5, r2]
   12c58:	add	r2, r8, #2
   12c5c:	cmp	r2, r4
   12c60:	movcc	r1, #34	; 0x22
   12c64:	strbcc	r1, [r5, r2]
   12c68:	add	r2, r8, #3
   12c6c:	add	r8, r8, #4
   12c70:	cmp	r2, r4
   12c74:	movcc	r1, #63	; 0x3f
   12c78:	strbcc	r1, [r5, r2]
   12c7c:	b	125f8 <__assert_fail@plt+0x156c>
   12c80:	mov	r9, #0
   12c84:	b	125f8 <__assert_fail@plt+0x156c>
   12c88:	ldr	lr, [sp, #28]
   12c8c:	ldr	r4, [fp, #-56]	; 0xffffffc8
   12c90:	add	r1, r2, r7
   12c94:	mov	r2, #0
   12c98:	str	r1, [sp, #44]	; 0x2c
   12c9c:	tst	r0, #1
   12ca0:	bne	12dbc <__assert_fail@plt+0x1d30>
   12ca4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12ca8:	tst	r1, #1
   12cac:	bne	12f4c <__assert_fail@plt+0x1ec0>
   12cb0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12cb4:	subs	r2, r1, #2
   12cb8:	movwne	r2, #1
   12cbc:	orr	r2, r2, r4
   12cc0:	tst	r2, #1
   12cc4:	bne	12d08 <__assert_fail@plt+0x1c7c>
   12cc8:	ldr	r1, [sp, #88]	; 0x58
   12ccc:	add	r2, r8, #1
   12cd0:	mov	r4, #1
   12cd4:	cmp	r8, r1
   12cd8:	movcc	r1, #39	; 0x27
   12cdc:	strbcc	r1, [r5, r8]
   12ce0:	ldr	r1, [sp, #88]	; 0x58
   12ce4:	cmp	r2, r1
   12ce8:	movcc	r1, #36	; 0x24
   12cec:	strbcc	r1, [r5, r2]
   12cf0:	ldr	r1, [sp, #88]	; 0x58
   12cf4:	add	r2, r8, #2
   12cf8:	add	r8, r8, #3
   12cfc:	cmp	r2, r1
   12d00:	movcc	r1, #39	; 0x27
   12d04:	strbcc	r1, [r5, r2]
   12d08:	ldr	r1, [sp, #88]	; 0x58
   12d0c:	add	r2, r8, #1
   12d10:	cmp	r8, r1
   12d14:	movcc	r1, #92	; 0x5c
   12d18:	strbcc	r1, [r5, r8]
   12d1c:	ldr	r1, [sp, #88]	; 0x58
   12d20:	cmp	r2, r1
   12d24:	bcs	12d38 <__assert_fail@plt+0x1cac>
   12d28:	uxtb	r3, r6
   12d2c:	mov	r1, #48	; 0x30
   12d30:	orr	r3, r1, r3, lsr #6
   12d34:	strb	r3, [r5, r2]
   12d38:	ldr	r1, [sp, #88]	; 0x58
   12d3c:	add	r2, r8, #2
   12d40:	add	r8, r8, #3
   12d44:	cmp	r2, r1
   12d48:	lsrcc	r3, r6, #3
   12d4c:	movcc	r1, #6
   12d50:	bficc	r3, r1, #3, #29
   12d54:	mov	r1, #6
   12d58:	bfi	r6, r1, #3, #29
   12d5c:	strbcc	r3, [r5, r2]
   12d60:	mov	r2, #1
   12d64:	b	12de4 <__assert_fail@plt+0x1d58>
   12d68:	ldr	r1, [sp, #88]	; 0x58
   12d6c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12d70:	ldr	r4, [sp, #88]	; 0x58
   12d74:	cmp	r8, r1
   12d78:	movcc	r1, #39	; 0x27
   12d7c:	strbcc	r1, [r5, r8]
   12d80:	add	r1, r8, #1
   12d84:	add	r8, r8, #2
   12d88:	cmp	r1, r4
   12d8c:	movcc	r4, #39	; 0x27
   12d90:	strbcc	r4, [r5, r1]
   12d94:	mov	r4, #0
   12d98:	ldr	r1, [sp, #88]	; 0x58
   12d9c:	cmp	r8, r1
   12da0:	ldr	r1, [sp, #72]	; 0x48
   12da4:	strbcc	r6, [r5, r8]
   12da8:	add	r8, r8, #1
   12dac:	ldrb	r6, [r1, r7]
   12db0:	mov	r7, r3
   12db4:	tst	r0, #1
   12db8:	beq	12ca4 <__assert_fail@plt+0x1c18>
   12dbc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12dc0:	tst	r1, #1
   12dc4:	beq	12ddc <__assert_fail@plt+0x1d50>
   12dc8:	ldr	r1, [sp, #88]	; 0x58
   12dcc:	cmp	r8, r1
   12dd0:	movcc	r1, #92	; 0x5c
   12dd4:	strbcc	r1, [r5, r8]
   12dd8:	add	r8, r8, #1
   12ddc:	mov	r1, #0
   12de0:	str	r1, [fp, #-52]	; 0xffffffcc
   12de4:	ldr	r1, [sp, #44]	; 0x2c
   12de8:	add	r3, r7, #1
   12dec:	and	sl, r2, #1
   12df0:	cmp	r1, r3
   12df4:	bls	12e18 <__assert_fail@plt+0x1d8c>
   12df8:	cmp	sl, #0
   12dfc:	mvn	r5, r4
   12e00:	movwne	sl, #1
   12e04:	orr	r5, r5, sl
   12e08:	tst	r5, #1
   12e0c:	beq	12d68 <__assert_fail@plt+0x1cdc>
   12e10:	ldr	r5, [fp, #-84]	; 0xffffffac
   12e14:	b	12d98 <__assert_fail@plt+0x1d0c>
   12e18:	str	r4, [fp, #-56]	; 0xffffffc8
   12e1c:	ldr	r4, [sp, #88]	; 0x58
   12e20:	cmp	sl, #0
   12e24:	movwne	sl, #1
   12e28:	cmp	sl, #0
   12e2c:	beq	12988 <__assert_fail@plt+0x18fc>
   12e30:	b	129bc <__assert_fail@plt+0x1930>
   12e34:	mov	r9, #0
   12e38:	b	12e78 <__assert_fail@plt+0x1dec>
   12e3c:	ldr	r0, [sp, #24]
   12e40:	mov	r9, #0
   12e44:	cmp	lr, r0
   12e48:	bls	12e78 <__assert_fail@plt+0x1dec>
   12e4c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12e50:	ldr	r2, [sp, #44]	; 0x2c
   12e54:	add	r0, ip, r7
   12e58:	ldrb	r1, [r0, r2]
   12e5c:	cmp	r1, #0
   12e60:	beq	12940 <__assert_fail@plt+0x18b4>
   12e64:	add	r2, r2, #1
   12e68:	add	r1, r7, r2
   12e6c:	cmp	r1, lr
   12e70:	bcc	12e58 <__assert_fail@plt+0x1dcc>
   12e74:	b	12940 <__assert_fail@plt+0x18b4>
   12e78:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12e7c:	ldr	r2, [sp, #44]	; 0x2c
   12e80:	b	12940 <__assert_fail@plt+0x18b4>
   12e84:	mov	lr, r7
   12e88:	b	12e90 <__assert_fail@plt+0x1e04>
   12e8c:	mvn	lr, #0
   12e90:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12e94:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12e98:	eor	r0, r1, #2
   12e9c:	orr	r0, r0, r8
   12ea0:	clz	r0, r0
   12ea4:	lsr	r0, r0, #5
   12ea8:	tst	r2, r0
   12eac:	bne	12f50 <__assert_fail@plt+0x1ec4>
   12eb0:	subs	r0, r1, #2
   12eb4:	movwne	r0, #1
   12eb8:	orr	r0, r2, r0
   12ebc:	tst	r0, #1
   12ec0:	ldreq	r0, [sp, #60]	; 0x3c
   12ec4:	eoreq	r0, r0, #1
   12ec8:	tsteq	r0, #1
   12ecc:	bne	12fe4 <__assert_fail@plt+0x1f58>
   12ed0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12ed4:	mov	sl, lr
   12ed8:	tst	r0, #1
   12edc:	bne	12fb0 <__assert_fail@plt+0x1f24>
   12ee0:	ldr	r6, [sp, #56]	; 0x38
   12ee4:	mov	r9, #0
   12ee8:	cmp	r6, #0
   12eec:	beq	12fdc <__assert_fail@plt+0x1f50>
   12ef0:	ldr	r0, [sp, #84]	; 0x54
   12ef4:	mov	r1, #0
   12ef8:	mov	r7, #2
   12efc:	cmp	r4, #0
   12f00:	str	r1, [fp, #-48]	; 0xffffffd0
   12f04:	mov	r1, #0
   12f08:	str	r1, [fp, #-76]	; 0xffffffb4
   12f0c:	beq	120ac <__assert_fail@plt+0x1020>
   12f10:	b	12fe4 <__assert_fail@plt+0x1f58>
   12f14:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f18:	ldr	r1, [fp, #12]
   12f1c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12f20:	mov	lr, r4
   12f24:	mov	r4, r6
   12f28:	b	12f70 <__assert_fail@plt+0x1ee4>
   12f2c:	tst	ip, #1
   12f30:	ldr	r5, [fp, #-84]	; 0xffffffac
   12f34:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f38:	ldr	r1, [fp, #12]
   12f3c:	mov	r0, #2
   12f40:	movwne	r0, #4
   12f44:	mov	r2, r0
   12f48:	b	12f70 <__assert_fail@plt+0x1ee4>
   12f4c:	ldr	r4, [sp, #88]	; 0x58
   12f50:	ldr	r1, [sp, #84]	; 0x54
   12f54:	mov	r0, #2
   12f58:	tst	r1, #1
   12f5c:	movwne	r0, #4
   12f60:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12f64:	ldr	r1, [fp, #12]
   12f68:	cmp	r2, #2
   12f6c:	moveq	r2, r0
   12f70:	mov	r0, #0
   12f74:	bic	r1, r1, #2
   12f78:	str	r2, [sp]
   12f7c:	mov	r2, ip
   12f80:	mov	r3, lr
   12f84:	str	r0, [sp, #8]
   12f88:	ldr	r0, [sp, #76]	; 0x4c
   12f8c:	str	r1, [sp, #4]
   12f90:	mov	r1, r4
   12f94:	str	r0, [sp, #12]
   12f98:	ldr	r0, [sp, #80]	; 0x50
   12f9c:	str	r0, [sp, #16]
   12fa0:	mov	r0, r5
   12fa4:	bl	1201c <__assert_fail@plt+0xf90>
   12fa8:	mov	r8, r0
   12fac:	b	13030 <__assert_fail@plt+0x1fa4>
   12fb0:	mov	r0, #5
   12fb4:	ldr	r1, [sp, #56]	; 0x38
   12fb8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12fbc:	mov	r3, sl
   12fc0:	str	r0, [sp]
   12fc4:	ldr	r0, [fp, #12]
   12fc8:	str	r0, [sp, #4]
   12fcc:	ldr	r0, [fp, #16]
   12fd0:	str	r0, [sp, #8]
   12fd4:	ldr	r0, [sp, #76]	; 0x4c
   12fd8:	b	12f94 <__assert_fail@plt+0x1f08>
   12fdc:	mov	r0, #0
   12fe0:	str	r0, [fp, #-76]	; 0xffffffb4
   12fe4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12fe8:	cmp	r1, #0
   12fec:	beq	13024 <__assert_fail@plt+0x1f98>
   12ff0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12ff4:	tst	r0, #1
   12ff8:	bne	13024 <__assert_fail@plt+0x1f98>
   12ffc:	ldrb	r0, [r1]
   13000:	cmp	r0, #0
   13004:	beq	13024 <__assert_fail@plt+0x1f98>
   13008:	add	r1, r1, #1
   1300c:	cmp	r8, r4
   13010:	strbcc	r0, [r5, r8]
   13014:	add	r8, r8, #1
   13018:	ldrb	r0, [r1], #1
   1301c:	cmp	r0, #0
   13020:	bne	1300c <__assert_fail@plt+0x1f80>
   13024:	cmp	r8, r4
   13028:	movcc	r0, #0
   1302c:	strbcc	r0, [r5, r8]
   13030:	mov	r0, r8
   13034:	sub	sp, fp, #28
   13038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1303c:	mov	r0, #4
   13040:	b	12f60 <__assert_fail@plt+0x1ed4>
   13044:	bl	11080 <abort@plt>
   13048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1304c:	add	fp, sp, #28
   13050:	sub	sp, sp, #28
   13054:	movw	r5, #29040	; 0x7170
   13058:	cmp	r2, #0
   1305c:	mov	r4, r1
   13060:	mov	r7, r0
   13064:	str	r0, [sp, #20]
   13068:	movt	r5, #2
   1306c:	movne	r5, r2
   13070:	bl	10fb4 <__errno_location@plt>
   13074:	mov	sl, r0
   13078:	ldr	r2, [r5, #40]	; 0x28
   1307c:	ldr	r3, [r5, #44]	; 0x2c
   13080:	ldm	r5, {r0, r1}
   13084:	orr	r8, r1, #1
   13088:	add	r9, r5, #8
   1308c:	mov	r1, #0
   13090:	ldr	r6, [sl]
   13094:	stm	sp, {r0, r8, r9}
   13098:	mov	r0, #0
   1309c:	str	r2, [sp, #12]
   130a0:	str	r3, [sp, #16]
   130a4:	mov	r2, r7
   130a8:	mov	r3, r4
   130ac:	str	r6, [sp, #24]
   130b0:	mov	r6, r4
   130b4:	bl	1201c <__assert_fail@plt+0xf90>
   130b8:	add	r7, r0, #1
   130bc:	mov	r0, r7
   130c0:	bl	14268 <__assert_fail@plt+0x31dc>
   130c4:	mov	r4, r0
   130c8:	ldr	r0, [r5]
   130cc:	ldr	r2, [r5, #44]	; 0x2c
   130d0:	ldr	r1, [r5, #40]	; 0x28
   130d4:	mov	r3, r6
   130d8:	stm	sp, {r0, r8, r9}
   130dc:	str	r2, [sp, #16]
   130e0:	ldr	r2, [sp, #20]
   130e4:	str	r1, [sp, #12]
   130e8:	mov	r0, r4
   130ec:	mov	r1, r7
   130f0:	bl	1201c <__assert_fail@plt+0xf90>
   130f4:	ldr	r0, [sp, #24]
   130f8:	str	r0, [sl]
   130fc:	mov	r0, r4
   13100:	sub	sp, fp, #28
   13104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1310c:	add	fp, sp, #28
   13110:	sub	sp, sp, #36	; 0x24
   13114:	movw	r8, #29040	; 0x7170
   13118:	cmp	r3, #0
   1311c:	mov	r4, r2
   13120:	str	r2, [sp, #24]
   13124:	mov	r5, r1
   13128:	mov	r6, r0
   1312c:	str	r0, [sp, #20]
   13130:	movt	r8, #2
   13134:	movne	r8, r3
   13138:	bl	10fb4 <__errno_location@plt>
   1313c:	str	r0, [sp, #28]
   13140:	ldr	r1, [r8, #40]	; 0x28
   13144:	ldr	r2, [r8, #44]	; 0x2c
   13148:	ldr	r7, [r0]
   1314c:	cmp	r4, #0
   13150:	add	sl, r8, #8
   13154:	mov	r0, #0
   13158:	ldm	r8, {r3, r9}
   1315c:	orreq	r9, r9, #1
   13160:	stm	sp, {r3, r9, sl}
   13164:	str	r1, [sp, #12]
   13168:	str	r2, [sp, #16]
   1316c:	mov	r1, #0
   13170:	mov	r2, r6
   13174:	mov	r3, r5
   13178:	str	r7, [sp, #32]
   1317c:	mov	r7, r5
   13180:	bl	1201c <__assert_fail@plt+0xf90>
   13184:	add	r4, r0, #1
   13188:	mov	r5, r0
   1318c:	mov	r0, r4
   13190:	bl	14268 <__assert_fail@plt+0x31dc>
   13194:	mov	r6, r0
   13198:	ldr	r0, [r8]
   1319c:	ldr	r2, [r8, #44]	; 0x2c
   131a0:	ldr	r1, [r8, #40]	; 0x28
   131a4:	mov	r3, r7
   131a8:	stm	sp, {r0, r9, sl}
   131ac:	str	r2, [sp, #16]
   131b0:	ldr	r2, [sp, #20]
   131b4:	str	r1, [sp, #12]
   131b8:	mov	r0, r6
   131bc:	mov	r1, r4
   131c0:	bl	1201c <__assert_fail@plt+0xf90>
   131c4:	ldr	r0, [sp, #24]
   131c8:	ldr	r1, [sp, #32]
   131cc:	ldr	r2, [sp, #28]
   131d0:	cmp	r0, #0
   131d4:	str	r1, [r2]
   131d8:	strne	r5, [r0]
   131dc:	mov	r0, r6
   131e0:	sub	sp, fp, #28
   131e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   131ec:	add	fp, sp, #24
   131f0:	movw	r5, #28916	; 0x70f4
   131f4:	movw	r8, #28912	; 0x70f0
   131f8:	movt	r5, #2
   131fc:	movt	r8, #2
   13200:	ldr	r0, [r5]
   13204:	ldr	r4, [r8]
   13208:	cmp	r0, #2
   1320c:	blt	13238 <__assert_fail@plt+0x21ac>
   13210:	add	r7, r4, #12
   13214:	mov	r6, #0
   13218:	ldr	r0, [r7, r6, lsl #3]
   1321c:	bl	156b0 <__assert_fail@plt+0x4624>
   13220:	ldr	r1, [r5]
   13224:	add	r2, r6, #2
   13228:	add	r0, r6, #1
   1322c:	mov	r6, r0
   13230:	cmp	r2, r1
   13234:	blt	13218 <__assert_fail@plt+0x218c>
   13238:	ldr	r0, [r4, #4]
   1323c:	movw	r9, #29088	; 0x71a0
   13240:	movw	r7, #28920	; 0x70f8
   13244:	movt	r9, #2
   13248:	movt	r7, #2
   1324c:	cmp	r0, r9
   13250:	beq	13260 <__assert_fail@plt+0x21d4>
   13254:	bl	156b0 <__assert_fail@plt+0x4624>
   13258:	mov	r0, #256	; 0x100
   1325c:	stm	r7, {r0, r9}
   13260:	cmp	r4, r7
   13264:	beq	13274 <__assert_fail@plt+0x21e8>
   13268:	mov	r0, r4
   1326c:	bl	156b0 <__assert_fail@plt+0x4624>
   13270:	str	r7, [r8]
   13274:	mov	r0, #1
   13278:	str	r0, [r5]
   1327c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13280:	movw	r3, #29040	; 0x7170
   13284:	mvn	r2, #0
   13288:	movt	r3, #2
   1328c:	b	13290 <__assert_fail@plt+0x2204>
   13290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13294:	add	fp, sp, #28
   13298:	sub	sp, sp, #44	; 0x2c
   1329c:	mov	r7, r3
   132a0:	str	r2, [sp, #36]	; 0x24
   132a4:	str	r1, [sp, #32]
   132a8:	mov	r5, r0
   132ac:	bl	10fb4 <__errno_location@plt>
   132b0:	cmp	r5, #0
   132b4:	bmi	13424 <__assert_fail@plt+0x2398>
   132b8:	cmn	r5, #-2147483647	; 0x80000001
   132bc:	beq	13424 <__assert_fail@plt+0x2398>
   132c0:	movw	r8, #28916	; 0x70f4
   132c4:	movw	r4, #28912	; 0x70f0
   132c8:	str	r0, [sp, #28]
   132cc:	ldr	r0, [r0]
   132d0:	movt	r8, #2
   132d4:	movt	r4, #2
   132d8:	ldr	r1, [r8]
   132dc:	ldr	r6, [r4]
   132e0:	str	r0, [sp, #24]
   132e4:	cmp	r1, r5
   132e8:	ble	132f4 <__assert_fail@plt+0x2268>
   132ec:	mov	sl, r6
   132f0:	b	13360 <__assert_fail@plt+0x22d4>
   132f4:	movw	r9, #28920	; 0x70f8
   132f8:	mov	r0, #8
   132fc:	str	r1, [fp, #-32]	; 0xffffffe0
   13300:	sub	r1, r5, r1
   13304:	mvn	r3, #-2147483648	; 0x80000000
   13308:	movt	r9, #2
   1330c:	str	r0, [sp]
   13310:	add	r2, r1, #1
   13314:	sub	r1, fp, #32
   13318:	subs	r0, r6, r9
   1331c:	movne	r0, r6
   13320:	bl	14468 <__assert_fail@plt+0x33dc>
   13324:	mov	sl, r0
   13328:	cmp	r6, r9
   1332c:	str	r0, [r4]
   13330:	bne	1333c <__assert_fail@plt+0x22b0>
   13334:	ldrd	r0, [r9]
   13338:	stm	sl, {r0, r1}
   1333c:	ldr	r1, [r8]
   13340:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13344:	add	r0, sl, r1, lsl #3
   13348:	sub	r1, r2, r1
   1334c:	lsl	r2, r1, #3
   13350:	mov	r1, #0
   13354:	bl	10fcc <memset@plt>
   13358:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1335c:	str	r0, [r8]
   13360:	mov	r9, sl
   13364:	ldm	r7, {r0, r1}
   13368:	orr	r8, r1, #1
   1336c:	add	r1, r7, #8
   13370:	ldr	r2, [r7, #40]	; 0x28
   13374:	ldr	r3, [r7, #44]	; 0x2c
   13378:	ldr	r6, [r9, r5, lsl #3]!
   1337c:	str	r1, [sp, #20]
   13380:	ldr	r4, [r9, #4]!
   13384:	stm	sp, {r0, r8}
   13388:	add	r0, sp, #8
   1338c:	stm	r0, {r1, r2, r3}
   13390:	ldr	r2, [sp, #32]
   13394:	ldr	r3, [sp, #36]	; 0x24
   13398:	mov	r1, r6
   1339c:	mov	r0, r4
   133a0:	bl	1201c <__assert_fail@plt+0xf90>
   133a4:	cmp	r6, r0
   133a8:	bhi	1340c <__assert_fail@plt+0x2380>
   133ac:	add	r6, r0, #1
   133b0:	movw	r0, #29088	; 0x71a0
   133b4:	movt	r0, #2
   133b8:	str	r6, [sl, r5, lsl #3]
   133bc:	cmp	r4, r0
   133c0:	beq	133cc <__assert_fail@plt+0x2340>
   133c4:	mov	r0, r4
   133c8:	bl	156b0 <__assert_fail@plt+0x4624>
   133cc:	mov	r0, r6
   133d0:	bl	14268 <__assert_fail@plt+0x31dc>
   133d4:	str	r0, [r9]
   133d8:	mov	r4, r0
   133dc:	add	r3, sp, #8
   133e0:	ldr	r0, [r7]
   133e4:	ldr	r1, [r7, #40]	; 0x28
   133e8:	ldr	r2, [r7, #44]	; 0x2c
   133ec:	stm	sp, {r0, r8}
   133f0:	ldr	r0, [sp, #20]
   133f4:	stm	r3, {r0, r1, r2}
   133f8:	ldr	r2, [sp, #32]
   133fc:	ldr	r3, [sp, #36]	; 0x24
   13400:	mov	r0, r4
   13404:	mov	r1, r6
   13408:	bl	1201c <__assert_fail@plt+0xf90>
   1340c:	ldr	r0, [sp, #28]
   13410:	ldr	r1, [sp, #24]
   13414:	str	r1, [r0]
   13418:	mov	r0, r4
   1341c:	sub	sp, fp, #28
   13420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13424:	bl	11080 <abort@plt>
   13428:	movw	r3, #29040	; 0x7170
   1342c:	movt	r3, #2
   13430:	b	13290 <__assert_fail@plt+0x2204>
   13434:	movw	r3, #29040	; 0x7170
   13438:	mov	r1, r0
   1343c:	mov	r0, #0
   13440:	mvn	r2, #0
   13444:	movt	r3, #2
   13448:	b	13290 <__assert_fail@plt+0x2204>
   1344c:	movw	r3, #29040	; 0x7170
   13450:	mov	r2, r1
   13454:	mov	r1, r0
   13458:	mov	r0, #0
   1345c:	movt	r3, #2
   13460:	b	13290 <__assert_fail@plt+0x2204>
   13464:	push	{fp, lr}
   13468:	mov	fp, sp
   1346c:	sub	sp, sp, #48	; 0x30
   13470:	vmov.i32	q8, #0	; 0x00000000
   13474:	mov	ip, #32
   13478:	mov	r3, sp
   1347c:	mov	lr, r2
   13480:	cmp	r1, #10
   13484:	add	r2, r3, #16
   13488:	vst1.64	{d16-d17}, [r3], ip
   1348c:	vst1.64	{d16-d17}, [r2]
   13490:	vst1.64	{d16-d17}, [r3]
   13494:	beq	134b4 <__assert_fail@plt+0x2428>
   13498:	str	r1, [sp]
   1349c:	mov	r3, sp
   134a0:	mov	r1, lr
   134a4:	mvn	r2, #0
   134a8:	bl	13290 <__assert_fail@plt+0x2204>
   134ac:	mov	sp, fp
   134b0:	pop	{fp, pc}
   134b4:	bl	11080 <abort@plt>
   134b8:	push	{r4, sl, fp, lr}
   134bc:	add	fp, sp, #8
   134c0:	sub	sp, sp, #48	; 0x30
   134c4:	vmov.i32	q8, #0	; 0x00000000
   134c8:	mov	ip, r3
   134cc:	mov	r3, sp
   134d0:	mov	lr, #32
   134d4:	cmp	r1, #10
   134d8:	add	r4, r3, #16
   134dc:	vst1.64	{d16-d17}, [r3], lr
   134e0:	vst1.64	{d16-d17}, [r4]
   134e4:	vst1.64	{d16-d17}, [r3]
   134e8:	beq	13508 <__assert_fail@plt+0x247c>
   134ec:	str	r1, [sp]
   134f0:	mov	r1, r2
   134f4:	mov	r3, sp
   134f8:	mov	r2, ip
   134fc:	bl	13290 <__assert_fail@plt+0x2204>
   13500:	sub	sp, fp, #8
   13504:	pop	{r4, sl, fp, pc}
   13508:	bl	11080 <abort@plt>
   1350c:	push	{fp, lr}
   13510:	mov	fp, sp
   13514:	sub	sp, sp, #48	; 0x30
   13518:	vmov.i32	q8, #0	; 0x00000000
   1351c:	mov	r3, sp
   13520:	mov	ip, #32
   13524:	cmp	r0, #10
   13528:	add	r2, r3, #16
   1352c:	vst1.64	{d16-d17}, [r3], ip
   13530:	vst1.64	{d16-d17}, [r2]
   13534:	vst1.64	{d16-d17}, [r3]
   13538:	beq	13558 <__assert_fail@plt+0x24cc>
   1353c:	str	r0, [sp]
   13540:	mov	r3, sp
   13544:	mov	r0, #0
   13548:	mvn	r2, #0
   1354c:	bl	13290 <__assert_fail@plt+0x2204>
   13550:	mov	sp, fp
   13554:	pop	{fp, pc}
   13558:	bl	11080 <abort@plt>
   1355c:	push	{fp, lr}
   13560:	mov	fp, sp
   13564:	sub	sp, sp, #48	; 0x30
   13568:	vmov.i32	q8, #0	; 0x00000000
   1356c:	mov	r3, sp
   13570:	mov	ip, #32
   13574:	cmp	r0, #10
   13578:	add	lr, r3, #16
   1357c:	vst1.64	{d16-d17}, [r3], ip
   13580:	vst1.64	{d16-d17}, [lr]
   13584:	vst1.64	{d16-d17}, [r3]
   13588:	beq	135a4 <__assert_fail@plt+0x2518>
   1358c:	str	r0, [sp]
   13590:	mov	r3, sp
   13594:	mov	r0, #0
   13598:	bl	13290 <__assert_fail@plt+0x2204>
   1359c:	mov	sp, fp
   135a0:	pop	{fp, pc}
   135a4:	bl	11080 <abort@plt>
   135a8:	push	{r4, sl, fp, lr}
   135ac:	add	fp, sp, #8
   135b0:	sub	sp, sp, #48	; 0x30
   135b4:	mov	lr, r0
   135b8:	movw	r0, #29040	; 0x7170
   135bc:	mov	ip, r1
   135c0:	mov	r1, #32
   135c4:	mov	r4, #1
   135c8:	movt	r0, #2
   135cc:	add	r3, r0, #16
   135d0:	vld1.64	{d16-d17}, [r0], r1
   135d4:	vld1.64	{d20-d21}, [r0]
   135d8:	vld1.64	{d18-d19}, [r3]
   135dc:	mov	r3, sp
   135e0:	add	r0, r3, #32
   135e4:	add	r1, r3, #16
   135e8:	vst1.64	{d20-d21}, [r0]
   135ec:	mov	r0, #28
   135f0:	vst1.64	{d18-d19}, [r1]
   135f4:	mov	r1, r3
   135f8:	and	r0, r0, r2, lsr #3
   135fc:	and	r2, r2, #31
   13600:	vst1.64	{d16-d17}, [r1], r0
   13604:	ldr	r0, [r1, #8]
   13608:	bic	r4, r4, r0, lsr r2
   1360c:	eor	r0, r0, r4, lsl r2
   13610:	mov	r2, ip
   13614:	str	r0, [r1, #8]
   13618:	mov	r0, #0
   1361c:	mov	r1, lr
   13620:	bl	13290 <__assert_fail@plt+0x2204>
   13624:	sub	sp, fp, #8
   13628:	pop	{r4, sl, fp, pc}
   1362c:	push	{fp, lr}
   13630:	mov	fp, sp
   13634:	sub	sp, sp, #48	; 0x30
   13638:	mov	ip, r0
   1363c:	movw	r0, #29040	; 0x7170
   13640:	mov	r2, #32
   13644:	movt	r0, #2
   13648:	add	r3, r0, #16
   1364c:	vld1.64	{d16-d17}, [r0], r2
   13650:	vld1.64	{d20-d21}, [r0]
   13654:	vld1.64	{d18-d19}, [r3]
   13658:	mov	r3, sp
   1365c:	add	r0, r3, #32
   13660:	add	r2, r3, #16
   13664:	vst1.64	{d20-d21}, [r0]
   13668:	mov	r0, #28
   1366c:	vst1.64	{d18-d19}, [r2]
   13670:	mov	r2, r3
   13674:	and	r0, r0, r1, lsr #3
   13678:	and	r1, r1, #31
   1367c:	vst1.64	{d16-d17}, [r2], r0
   13680:	mov	r0, #1
   13684:	ldr	lr, [r2, #8]
   13688:	bic	r0, r0, lr, lsr r1
   1368c:	eor	r0, lr, r0, lsl r1
   13690:	mov	r1, ip
   13694:	str	r0, [r2, #8]
   13698:	mov	r0, #0
   1369c:	mvn	r2, #0
   136a0:	bl	13290 <__assert_fail@plt+0x2204>
   136a4:	mov	sp, fp
   136a8:	pop	{fp, pc}
   136ac:	push	{fp, lr}
   136b0:	mov	fp, sp
   136b4:	sub	sp, sp, #48	; 0x30
   136b8:	mov	r1, r0
   136bc:	movw	r0, #29040	; 0x7170
   136c0:	mov	r3, #32
   136c4:	movt	r0, #2
   136c8:	add	r2, r0, #16
   136cc:	vld1.64	{d16-d17}, [r0], r3
   136d0:	mov	r3, sp
   136d4:	vld1.64	{d18-d19}, [r2]
   136d8:	vld1.64	{d20-d21}, [r0]
   136dc:	add	r2, r3, #16
   136e0:	add	r0, r3, #32
   136e4:	vst1.64	{d18-d19}, [r2]
   136e8:	vst1.64	{d20-d21}, [r0]
   136ec:	mov	r0, #12
   136f0:	mov	r2, r3
   136f4:	vst1.64	{d16-d17}, [r2], r0
   136f8:	ldr	r0, [r2]
   136fc:	orr	r0, r0, #67108864	; 0x4000000
   13700:	str	r0, [r2]
   13704:	mov	r0, #0
   13708:	mvn	r2, #0
   1370c:	bl	13290 <__assert_fail@plt+0x2204>
   13710:	mov	sp, fp
   13714:	pop	{fp, pc}
   13718:	push	{fp, lr}
   1371c:	mov	fp, sp
   13720:	sub	sp, sp, #48	; 0x30
   13724:	mov	ip, r1
   13728:	mov	r1, r0
   1372c:	movw	r0, #29040	; 0x7170
   13730:	mov	r2, #32
   13734:	movt	r0, #2
   13738:	add	r3, r0, #16
   1373c:	vld1.64	{d16-d17}, [r0], r2
   13740:	vld1.64	{d18-d19}, [r3]
   13744:	vld1.64	{d20-d21}, [r0]
   13748:	mov	r3, sp
   1374c:	add	r2, r3, #16
   13750:	add	r0, r3, #32
   13754:	vst1.64	{d18-d19}, [r2]
   13758:	vst1.64	{d20-d21}, [r0]
   1375c:	mov	r0, #12
   13760:	mov	r2, r3
   13764:	vst1.64	{d16-d17}, [r2], r0
   13768:	ldr	r0, [r2]
   1376c:	orr	r0, r0, #67108864	; 0x4000000
   13770:	str	r0, [r2]
   13774:	mov	r0, #0
   13778:	mov	r2, ip
   1377c:	bl	13290 <__assert_fail@plt+0x2204>
   13780:	mov	sp, fp
   13784:	pop	{fp, pc}
   13788:	push	{r4, sl, fp, lr}
   1378c:	add	fp, sp, #8
   13790:	sub	sp, sp, #96	; 0x60
   13794:	vmov.i32	q8, #0	; 0x00000000
   13798:	mov	ip, r2
   1379c:	mov	r2, sp
   137a0:	mov	r4, #28
   137a4:	cmp	r1, #10
   137a8:	mov	r3, r2
   137ac:	add	lr, r2, #16
   137b0:	vst1.64	{d16-d17}, [r3], r4
   137b4:	vst1.64	{d16-d17}, [lr]
   137b8:	vst1.32	{d16-d17}, [r3]
   137bc:	beq	1380c <__assert_fail@plt+0x2780>
   137c0:	vld1.64	{d16-d17}, [r2], r4
   137c4:	vld1.64	{d18-d19}, [lr]
   137c8:	add	r3, sp, #48	; 0x30
   137cc:	vld1.32	{d20-d21}, [r2]
   137d0:	add	r2, r3, #20
   137d4:	add	r4, r3, #4
   137d8:	vst1.32	{d18-d19}, [r2]
   137dc:	add	r2, r3, #32
   137e0:	vst1.32	{d16-d17}, [r4]
   137e4:	vst1.32	{d20-d21}, [r2]
   137e8:	str	r1, [sp, #48]	; 0x30
   137ec:	mvn	r2, #0
   137f0:	ldr	r1, [sp, #60]	; 0x3c
   137f4:	orr	r1, r1, #67108864	; 0x4000000
   137f8:	str	r1, [sp, #60]	; 0x3c
   137fc:	mov	r1, ip
   13800:	bl	13290 <__assert_fail@plt+0x2204>
   13804:	sub	sp, fp, #8
   13808:	pop	{r4, sl, fp, pc}
   1380c:	bl	11080 <abort@plt>
   13810:	push	{r4, r5, r6, sl, fp, lr}
   13814:	add	fp, sp, #16
   13818:	sub	sp, sp, #48	; 0x30
   1381c:	mov	ip, r3
   13820:	movw	r3, #29040	; 0x7170
   13824:	mov	r6, #32
   13828:	cmp	r1, #0
   1382c:	mov	r4, sp
   13830:	movt	r3, #2
   13834:	cmpne	r2, #0
   13838:	add	r5, r4, #16
   1383c:	add	lr, r3, #16
   13840:	vld1.64	{d16-d17}, [r3], r6
   13844:	vld1.64	{d18-d19}, [lr]
   13848:	vld1.64	{d20-d21}, [r3]
   1384c:	mov	r3, #10
   13850:	vst1.64	{d16-d17}, [r4], r6
   13854:	vst1.64	{d18-d19}, [r5]
   13858:	vst1.64	{d20-d21}, [r4]
   1385c:	str	r3, [sp]
   13860:	bne	13868 <__assert_fail@plt+0x27dc>
   13864:	bl	11080 <abort@plt>
   13868:	str	r2, [sp, #44]	; 0x2c
   1386c:	str	r1, [sp, #40]	; 0x28
   13870:	mov	r3, sp
   13874:	mov	r1, ip
   13878:	mvn	r2, #0
   1387c:	bl	13290 <__assert_fail@plt+0x2204>
   13880:	sub	sp, fp, #16
   13884:	pop	{r4, r5, r6, sl, fp, pc}
   13888:	push	{r4, r5, r6, sl, fp, lr}
   1388c:	add	fp, sp, #16
   13890:	sub	sp, sp, #48	; 0x30
   13894:	mov	lr, r3
   13898:	movw	r3, #29040	; 0x7170
   1389c:	mov	r6, #32
   138a0:	cmp	r1, #0
   138a4:	mov	r4, sp
   138a8:	movt	r3, #2
   138ac:	cmpne	r2, #0
   138b0:	add	r5, r4, #16
   138b4:	add	ip, r3, #16
   138b8:	vld1.64	{d16-d17}, [r3], r6
   138bc:	vld1.64	{d18-d19}, [ip]
   138c0:	vld1.64	{d20-d21}, [r3]
   138c4:	mov	r3, #10
   138c8:	vst1.64	{d16-d17}, [r4], r6
   138cc:	vst1.64	{d18-d19}, [r5]
   138d0:	vst1.64	{d20-d21}, [r4]
   138d4:	str	r3, [sp]
   138d8:	bne	138e0 <__assert_fail@plt+0x2854>
   138dc:	bl	11080 <abort@plt>
   138e0:	ldr	ip, [fp, #8]
   138e4:	str	r2, [sp, #44]	; 0x2c
   138e8:	str	r1, [sp, #40]	; 0x28
   138ec:	mov	r3, sp
   138f0:	mov	r1, lr
   138f4:	mov	r2, ip
   138f8:	bl	13290 <__assert_fail@plt+0x2204>
   138fc:	sub	sp, fp, #16
   13900:	pop	{r4, r5, r6, sl, fp, pc}
   13904:	push	{r4, sl, fp, lr}
   13908:	add	fp, sp, #8
   1390c:	sub	sp, sp, #48	; 0x30
   13910:	movw	r3, #29040	; 0x7170
   13914:	mov	lr, #32
   13918:	mov	ip, r2
   1391c:	cmp	r0, #0
   13920:	movt	r3, #2
   13924:	cmpne	r1, #0
   13928:	add	r2, r3, #16
   1392c:	vld1.64	{d16-d17}, [r3], lr
   13930:	vld1.64	{d20-d21}, [r3]
   13934:	vld1.64	{d18-d19}, [r2]
   13938:	mov	r2, sp
   1393c:	add	r4, r2, #16
   13940:	vst1.64	{d16-d17}, [r2], lr
   13944:	vst1.64	{d20-d21}, [r2]
   13948:	mov	r2, #10
   1394c:	vst1.64	{d18-d19}, [r4]
   13950:	str	r2, [sp]
   13954:	bne	1395c <__assert_fail@plt+0x28d0>
   13958:	bl	11080 <abort@plt>
   1395c:	str	r1, [sp, #44]	; 0x2c
   13960:	str	r0, [sp, #40]	; 0x28
   13964:	mov	r3, sp
   13968:	mov	r0, #0
   1396c:	mov	r1, ip
   13970:	mvn	r2, #0
   13974:	bl	13290 <__assert_fail@plt+0x2204>
   13978:	sub	sp, fp, #8
   1397c:	pop	{r4, sl, fp, pc}
   13980:	push	{r4, r5, fp, lr}
   13984:	add	fp, sp, #8
   13988:	sub	sp, sp, #48	; 0x30
   1398c:	mov	ip, r3
   13990:	movw	r3, #29040	; 0x7170
   13994:	mov	r4, #32
   13998:	mov	lr, r2
   1399c:	cmp	r0, #0
   139a0:	movt	r3, #2
   139a4:	cmpne	r1, #0
   139a8:	add	r2, r3, #16
   139ac:	vld1.64	{d16-d17}, [r3], r4
   139b0:	vld1.64	{d20-d21}, [r3]
   139b4:	vld1.64	{d18-d19}, [r2]
   139b8:	mov	r2, sp
   139bc:	add	r5, r2, #16
   139c0:	vst1.64	{d16-d17}, [r2], r4
   139c4:	vst1.64	{d20-d21}, [r2]
   139c8:	mov	r2, #10
   139cc:	vst1.64	{d18-d19}, [r5]
   139d0:	str	r2, [sp]
   139d4:	bne	139dc <__assert_fail@plt+0x2950>
   139d8:	bl	11080 <abort@plt>
   139dc:	str	r1, [sp, #44]	; 0x2c
   139e0:	str	r0, [sp, #40]	; 0x28
   139e4:	mov	r3, sp
   139e8:	mov	r0, #0
   139ec:	mov	r1, lr
   139f0:	mov	r2, ip
   139f4:	bl	13290 <__assert_fail@plt+0x2204>
   139f8:	sub	sp, fp, #8
   139fc:	pop	{r4, r5, fp, pc}
   13a00:	movw	r3, #28928	; 0x7100
   13a04:	movt	r3, #2
   13a08:	b	13290 <__assert_fail@plt+0x2204>
   13a0c:	movw	r3, #28928	; 0x7100
   13a10:	mov	r2, r1
   13a14:	mov	r1, r0
   13a18:	mov	r0, #0
   13a1c:	movt	r3, #2
   13a20:	b	13290 <__assert_fail@plt+0x2204>
   13a24:	movw	r3, #28928	; 0x7100
   13a28:	mvn	r2, #0
   13a2c:	movt	r3, #2
   13a30:	b	13290 <__assert_fail@plt+0x2204>
   13a34:	movw	r3, #28928	; 0x7100
   13a38:	mov	r1, r0
   13a3c:	mov	r0, #0
   13a40:	mvn	r2, #0
   13a44:	movt	r3, #2
   13a48:	b	13290 <__assert_fail@plt+0x2204>
   13a4c:	push	{r4, r5, fp, lr}
   13a50:	add	fp, sp, #8
   13a54:	mov	r5, r0
   13a58:	mov	r4, r1
   13a5c:	mov	r0, #0
   13a60:	mov	r2, #5
   13a64:	mov	r1, r5
   13a68:	bl	10ec4 <dcgettext@plt>
   13a6c:	cmp	r0, r5
   13a70:	popne	{r4, r5, fp, pc}
   13a74:	bl	156d8 <__assert_fail@plt+0x464c>
   13a78:	ldrb	r1, [r0]
   13a7c:	and	r1, r1, #223	; 0xdf
   13a80:	cmp	r1, #71	; 0x47
   13a84:	beq	13aec <__assert_fail@plt+0x2a60>
   13a88:	cmp	r1, #85	; 0x55
   13a8c:	bne	13b44 <__assert_fail@plt+0x2ab8>
   13a90:	ldrb	r1, [r0, #1]
   13a94:	and	r1, r1, #223	; 0xdf
   13a98:	cmp	r1, #84	; 0x54
   13a9c:	bne	13b44 <__assert_fail@plt+0x2ab8>
   13aa0:	ldrb	r1, [r0, #2]
   13aa4:	and	r1, r1, #223	; 0xdf
   13aa8:	cmp	r1, #70	; 0x46
   13aac:	bne	13b44 <__assert_fail@plt+0x2ab8>
   13ab0:	ldrb	r1, [r0, #3]
   13ab4:	cmp	r1, #45	; 0x2d
   13ab8:	bne	13b44 <__assert_fail@plt+0x2ab8>
   13abc:	ldrb	r1, [r0, #4]
   13ac0:	cmp	r1, #56	; 0x38
   13ac4:	bne	13b44 <__assert_fail@plt+0x2ab8>
   13ac8:	ldrb	r0, [r0, #5]
   13acc:	cmp	r0, #0
   13ad0:	bne	13b44 <__assert_fail@plt+0x2ab8>
   13ad4:	ldrb	r1, [r5]
   13ad8:	movw	r2, #24544	; 0x5fe0
   13adc:	movw	r0, #24548	; 0x5fe4
   13ae0:	movt	r2, #1
   13ae4:	movt	r0, #1
   13ae8:	b	13b74 <__assert_fail@plt+0x2ae8>
   13aec:	ldrb	r1, [r0, #1]
   13af0:	and	r1, r1, #223	; 0xdf
   13af4:	cmp	r1, #66	; 0x42
   13af8:	bne	13b44 <__assert_fail@plt+0x2ab8>
   13afc:	ldrb	r1, [r0, #2]
   13b00:	cmp	r1, #49	; 0x31
   13b04:	bne	13b44 <__assert_fail@plt+0x2ab8>
   13b08:	ldrb	r1, [r0, #3]
   13b0c:	cmp	r1, #56	; 0x38
   13b10:	bne	13b44 <__assert_fail@plt+0x2ab8>
   13b14:	ldrb	r1, [r0, #4]
   13b18:	cmp	r1, #48	; 0x30
   13b1c:	bne	13b44 <__assert_fail@plt+0x2ab8>
   13b20:	ldrb	r1, [r0, #5]
   13b24:	cmp	r1, #51	; 0x33
   13b28:	bne	13b44 <__assert_fail@plt+0x2ab8>
   13b2c:	ldrb	r1, [r0, #6]
   13b30:	cmp	r1, #48	; 0x30
   13b34:	bne	13b44 <__assert_fail@plt+0x2ab8>
   13b38:	ldrb	r0, [r0, #7]
   13b3c:	cmp	r0, #0
   13b40:	beq	13b60 <__assert_fail@plt+0x2ad4>
   13b44:	movw	r1, #24538	; 0x5fda
   13b48:	movw	r0, #24542	; 0x5fde
   13b4c:	cmp	r4, #9
   13b50:	movt	r1, #1
   13b54:	movt	r0, #1
   13b58:	moveq	r0, r1
   13b5c:	pop	{r4, r5, fp, pc}
   13b60:	ldrb	r1, [r5]
   13b64:	movw	r2, #24552	; 0x5fe8
   13b68:	movw	r0, #24556	; 0x5fec
   13b6c:	movt	r2, #1
   13b70:	movt	r0, #1
   13b74:	cmp	r1, #96	; 0x60
   13b78:	moveq	r0, r2
   13b7c:	pop	{r4, r5, fp, pc}
   13b80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b84:	add	fp, sp, #24
   13b88:	sub	sp, sp, #32
   13b8c:	ldr	r6, [fp, #12]
   13b90:	ldr	r7, [fp, #8]
   13b94:	mov	r4, r2
   13b98:	mov	r8, r0
   13b9c:	cmp	r1, #0
   13ba0:	beq	13bc8 <__assert_fail@plt+0x2b3c>
   13ba4:	movw	r2, #24644	; 0x6044
   13ba8:	mov	r5, r1
   13bac:	str	r3, [sp, #4]
   13bb0:	str	r4, [sp]
   13bb4:	mov	r0, r8
   13bb8:	mov	r1, #1
   13bbc:	movt	r2, #1
   13bc0:	mov	r3, r5
   13bc4:	b	13be0 <__assert_fail@plt+0x2b54>
   13bc8:	movw	r2, #24656	; 0x6050
   13bcc:	str	r3, [sp]
   13bd0:	mov	r0, r8
   13bd4:	mov	r1, #1
   13bd8:	mov	r3, r4
   13bdc:	movt	r2, #1
   13be0:	bl	10ff0 <__fprintf_chk@plt>
   13be4:	movw	r1, #24663	; 0x6057
   13be8:	mov	r0, #0
   13bec:	mov	r2, #5
   13bf0:	movt	r1, #1
   13bf4:	bl	10ec4 <dcgettext@plt>
   13bf8:	movw	r2, #25381	; 0x6325
   13bfc:	mov	r3, r0
   13c00:	movw	r0, #2022	; 0x7e6
   13c04:	mov	r1, #1
   13c08:	movt	r2, #1
   13c0c:	str	r0, [sp]
   13c10:	mov	r0, r8
   13c14:	bl	10ff0 <__fprintf_chk@plt>
   13c18:	movw	r4, #24131	; 0x5e43
   13c1c:	mov	r1, r8
   13c20:	movt	r4, #1
   13c24:	mov	r0, r4
   13c28:	bl	10e34 <fputs_unlocked@plt>
   13c2c:	movw	r1, #24667	; 0x605b
   13c30:	mov	r0, #0
   13c34:	mov	r2, #5
   13c38:	movt	r1, #1
   13c3c:	bl	10ec4 <dcgettext@plt>
   13c40:	movw	r3, #24838	; 0x6106
   13c44:	mov	r2, r0
   13c48:	mov	r0, r8
   13c4c:	mov	r1, #1
   13c50:	movt	r3, #1
   13c54:	bl	10ff0 <__fprintf_chk@plt>
   13c58:	mov	r0, r4
   13c5c:	mov	r1, r8
   13c60:	bl	10e34 <fputs_unlocked@plt>
   13c64:	cmp	r6, #9
   13c68:	bhi	13ca4 <__assert_fail@plt+0x2c18>
   13c6c:	add	r0, pc, #0
   13c70:	ldr	pc, [r0, r6, lsl #2]
   13c74:	muleq	r1, ip, ip
   13c78:			; <UNDEFINED> instruction: 0x00013cb0
   13c7c:	andeq	r3, r1, r0, ror #25
   13c80:	andeq	r3, r1, r8, lsl #26
   13c84:	andeq	r3, r1, r0, lsr sp
   13c88:	andeq	r3, r1, r8, asr sp
   13c8c:	andeq	r3, r1, r0, lsl #27
   13c90:			; <UNDEFINED> instruction: 0x00013db8
   13c94:	andeq	r3, r1, r8, asr lr
   13c98:	andeq	r3, r1, r0, lsl #28
   13c9c:	sub	sp, fp, #24
   13ca0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ca4:	movw	r1, #25191	; 0x6267
   13ca8:	movt	r1, #1
   13cac:	b	13e08 <__assert_fail@plt+0x2d7c>
   13cb0:	movw	r1, #24872	; 0x6128
   13cb4:	mov	r0, #0
   13cb8:	mov	r2, #5
   13cbc:	movt	r1, #1
   13cc0:	bl	10ec4 <dcgettext@plt>
   13cc4:	ldr	r3, [r7]
   13cc8:	mov	r2, r0
   13ccc:	mov	r0, r8
   13cd0:	mov	r1, #1
   13cd4:	sub	sp, fp, #24
   13cd8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13cdc:	b	10ff0 <__fprintf_chk@plt>
   13ce0:	movw	r1, #24888	; 0x6138
   13ce4:	mov	r0, #0
   13ce8:	mov	r2, #5
   13cec:	movt	r1, #1
   13cf0:	bl	10ec4 <dcgettext@plt>
   13cf4:	mov	r2, r0
   13cf8:	ldr	r3, [r7]
   13cfc:	ldr	r0, [r7, #4]
   13d00:	str	r0, [sp]
   13d04:	b	13df4 <__assert_fail@plt+0x2d68>
   13d08:	movw	r1, #24911	; 0x614f
   13d0c:	mov	r0, #0
   13d10:	mov	r2, #5
   13d14:	movt	r1, #1
   13d18:	bl	10ec4 <dcgettext@plt>
   13d1c:	mov	r2, r0
   13d20:	ldr	r3, [r7]
   13d24:	ldmib	r7, {r0, r1}
   13d28:	stm	sp, {r0, r1}
   13d2c:	b	13df4 <__assert_fail@plt+0x2d68>
   13d30:	movw	r1, #24939	; 0x616b
   13d34:	mov	r0, #0
   13d38:	mov	r2, #5
   13d3c:	movt	r1, #1
   13d40:	bl	10ec4 <dcgettext@plt>
   13d44:	ldr	r3, [r7]
   13d48:	mov	r2, r0
   13d4c:	ldmib	r7, {r0, r1, r7}
   13d50:	stm	sp, {r0, r1, r7}
   13d54:	b	13df4 <__assert_fail@plt+0x2d68>
   13d58:	movw	r1, #24971	; 0x618b
   13d5c:	mov	r0, #0
   13d60:	mov	r2, #5
   13d64:	movt	r1, #1
   13d68:	bl	10ec4 <dcgettext@plt>
   13d6c:	ldr	r3, [r7]
   13d70:	mov	r2, r0
   13d74:	ldmib	r7, {r0, r1, r6, r7}
   13d78:	stm	sp, {r0, r1, r6, r7}
   13d7c:	b	13df4 <__assert_fail@plt+0x2d68>
   13d80:	movw	r1, #25007	; 0x61af
   13d84:	mov	r0, #0
   13d88:	mov	r2, #5
   13d8c:	movt	r1, #1
   13d90:	bl	10ec4 <dcgettext@plt>
   13d94:	mov	r2, r0
   13d98:	ldr	r3, [r7]
   13d9c:	ldmib	r7, {r0, r1, r6}
   13da0:	ldr	r5, [r7, #16]
   13da4:	ldr	r7, [r7, #20]
   13da8:	stm	sp, {r0, r1, r6}
   13dac:	str	r5, [sp, #12]
   13db0:	str	r7, [sp, #16]
   13db4:	b	13df4 <__assert_fail@plt+0x2d68>
   13db8:	movw	r1, #25047	; 0x61d7
   13dbc:	mov	r0, #0
   13dc0:	mov	r2, #5
   13dc4:	movt	r1, #1
   13dc8:	bl	10ec4 <dcgettext@plt>
   13dcc:	mov	r2, r0
   13dd0:	ldr	r3, [r7]
   13dd4:	ldmib	r7, {r0, r1, r6}
   13dd8:	ldr	r5, [r7, #16]
   13ddc:	ldr	r4, [r7, #20]
   13de0:	ldr	r7, [r7, #24]
   13de4:	stm	sp, {r0, r1, r6}
   13de8:	str	r5, [sp, #12]
   13dec:	str	r4, [sp, #16]
   13df0:	str	r7, [sp, #20]
   13df4:	mov	r0, r8
   13df8:	mov	r1, #1
   13dfc:	b	13ea8 <__assert_fail@plt+0x2e1c>
   13e00:	movw	r1, #25139	; 0x6233
   13e04:	movt	r1, #1
   13e08:	mov	r0, #0
   13e0c:	mov	r2, #5
   13e10:	bl	10ec4 <dcgettext@plt>
   13e14:	mov	ip, r0
   13e18:	ldr	r3, [r7]
   13e1c:	ldr	r0, [r7, #4]
   13e20:	ldr	r1, [r7, #8]
   13e24:	ldr	r6, [r7, #12]
   13e28:	ldr	r5, [r7, #16]
   13e2c:	ldr	r4, [r7, #20]
   13e30:	ldr	r2, [r7, #24]
   13e34:	ldr	lr, [r7, #28]
   13e38:	ldr	r7, [r7, #32]
   13e3c:	stm	sp, {r0, r1, r6}
   13e40:	str	r5, [sp, #12]
   13e44:	str	r4, [sp, #16]
   13e48:	str	r2, [sp, #20]
   13e4c:	str	lr, [sp, #24]
   13e50:	str	r7, [sp, #28]
   13e54:	b	13e9c <__assert_fail@plt+0x2e10>
   13e58:	movw	r1, #25091	; 0x6203
   13e5c:	mov	r0, #0
   13e60:	mov	r2, #5
   13e64:	movt	r1, #1
   13e68:	bl	10ec4 <dcgettext@plt>
   13e6c:	mov	ip, r0
   13e70:	ldr	r3, [r7]
   13e74:	ldmib	r7, {r0, r1, r6}
   13e78:	ldr	r5, [r7, #16]
   13e7c:	ldr	r4, [r7, #20]
   13e80:	ldr	r2, [r7, #24]
   13e84:	ldr	r7, [r7, #28]
   13e88:	stm	sp, {r0, r1, r6}
   13e8c:	str	r5, [sp, #12]
   13e90:	str	r4, [sp, #16]
   13e94:	str	r2, [sp, #20]
   13e98:	str	r7, [sp, #24]
   13e9c:	mov	r0, r8
   13ea0:	mov	r1, #1
   13ea4:	mov	r2, ip
   13ea8:	bl	10ff0 <__fprintf_chk@plt>
   13eac:	sub	sp, fp, #24
   13eb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13eb4:	push	{r4, sl, fp, lr}
   13eb8:	add	fp, sp, #8
   13ebc:	sub	sp, sp, #8
   13ec0:	ldr	ip, [fp, #8]
   13ec4:	mov	lr, #0
   13ec8:	ldr	r4, [ip, lr, lsl #2]
   13ecc:	add	lr, lr, #1
   13ed0:	cmp	r4, #0
   13ed4:	bne	13ec8 <__assert_fail@plt+0x2e3c>
   13ed8:	sub	r4, lr, #1
   13edc:	str	ip, [sp]
   13ee0:	str	r4, [sp, #4]
   13ee4:	bl	13b80 <__assert_fail@plt+0x2af4>
   13ee8:	sub	sp, fp, #8
   13eec:	pop	{r4, sl, fp, pc}
   13ef0:	push	{fp, lr}
   13ef4:	mov	fp, sp
   13ef8:	sub	sp, sp, #48	; 0x30
   13efc:	ldr	ip, [fp, #8]
   13f00:	ldr	lr, [ip]
   13f04:	cmp	lr, #0
   13f08:	str	lr, [sp, #8]
   13f0c:	beq	13fa8 <__assert_fail@plt+0x2f1c>
   13f10:	ldr	lr, [ip, #4]
   13f14:	cmp	lr, #0
   13f18:	str	lr, [sp, #12]
   13f1c:	beq	13fb0 <__assert_fail@plt+0x2f24>
   13f20:	ldr	lr, [ip, #8]
   13f24:	cmp	lr, #0
   13f28:	str	lr, [sp, #16]
   13f2c:	beq	13fb8 <__assert_fail@plt+0x2f2c>
   13f30:	ldr	lr, [ip, #12]
   13f34:	cmp	lr, #0
   13f38:	str	lr, [sp, #20]
   13f3c:	beq	13fc0 <__assert_fail@plt+0x2f34>
   13f40:	ldr	lr, [ip, #16]
   13f44:	cmp	lr, #0
   13f48:	str	lr, [sp, #24]
   13f4c:	beq	13fc8 <__assert_fail@plt+0x2f3c>
   13f50:	ldr	lr, [ip, #20]
   13f54:	cmp	lr, #0
   13f58:	str	lr, [sp, #28]
   13f5c:	beq	13fd0 <__assert_fail@plt+0x2f44>
   13f60:	ldr	lr, [ip, #24]
   13f64:	cmp	lr, #0
   13f68:	str	lr, [sp, #32]
   13f6c:	beq	13fd8 <__assert_fail@plt+0x2f4c>
   13f70:	ldr	lr, [ip, #28]
   13f74:	cmp	lr, #0
   13f78:	str	lr, [sp, #36]	; 0x24
   13f7c:	beq	13fe0 <__assert_fail@plt+0x2f54>
   13f80:	ldr	lr, [ip, #32]
   13f84:	cmp	lr, #0
   13f88:	str	lr, [sp, #40]	; 0x28
   13f8c:	beq	13fe8 <__assert_fail@plt+0x2f5c>
   13f90:	ldr	lr, [ip, #36]	; 0x24
   13f94:	mov	ip, #10
   13f98:	cmp	lr, #0
   13f9c:	str	lr, [sp, #44]	; 0x2c
   13fa0:	movweq	ip, #9
   13fa4:	b	13fec <__assert_fail@plt+0x2f60>
   13fa8:	mov	ip, #0
   13fac:	b	13fec <__assert_fail@plt+0x2f60>
   13fb0:	mov	ip, #1
   13fb4:	b	13fec <__assert_fail@plt+0x2f60>
   13fb8:	mov	ip, #2
   13fbc:	b	13fec <__assert_fail@plt+0x2f60>
   13fc0:	mov	ip, #3
   13fc4:	b	13fec <__assert_fail@plt+0x2f60>
   13fc8:	mov	ip, #4
   13fcc:	b	13fec <__assert_fail@plt+0x2f60>
   13fd0:	mov	ip, #5
   13fd4:	b	13fec <__assert_fail@plt+0x2f60>
   13fd8:	mov	ip, #6
   13fdc:	b	13fec <__assert_fail@plt+0x2f60>
   13fe0:	mov	ip, #7
   13fe4:	b	13fec <__assert_fail@plt+0x2f60>
   13fe8:	mov	ip, #8
   13fec:	add	lr, sp, #8
   13ff0:	str	ip, [sp, #4]
   13ff4:	str	lr, [sp]
   13ff8:	bl	13b80 <__assert_fail@plt+0x2af4>
   13ffc:	mov	sp, fp
   14000:	pop	{fp, pc}
   14004:	push	{fp, lr}
   14008:	mov	fp, sp
   1400c:	sub	sp, sp, #56	; 0x38
   14010:	add	ip, fp, #8
   14014:	str	ip, [sp, #12]
   14018:	ldr	lr, [fp, #8]
   1401c:	cmp	lr, #0
   14020:	str	lr, [sp, #16]
   14024:	beq	140c0 <__assert_fail@plt+0x3034>
   14028:	ldr	lr, [ip, #4]
   1402c:	cmp	lr, #0
   14030:	str	lr, [sp, #20]
   14034:	beq	140c8 <__assert_fail@plt+0x303c>
   14038:	ldr	lr, [ip, #8]
   1403c:	cmp	lr, #0
   14040:	str	lr, [sp, #24]
   14044:	beq	140d0 <__assert_fail@plt+0x3044>
   14048:	ldr	lr, [ip, #12]
   1404c:	cmp	lr, #0
   14050:	str	lr, [sp, #28]
   14054:	beq	140d8 <__assert_fail@plt+0x304c>
   14058:	ldr	lr, [ip, #16]
   1405c:	cmp	lr, #0
   14060:	str	lr, [sp, #32]
   14064:	beq	140e0 <__assert_fail@plt+0x3054>
   14068:	ldr	lr, [ip, #20]
   1406c:	cmp	lr, #0
   14070:	str	lr, [sp, #36]	; 0x24
   14074:	beq	140e8 <__assert_fail@plt+0x305c>
   14078:	ldr	lr, [ip, #24]
   1407c:	cmp	lr, #0
   14080:	str	lr, [sp, #40]	; 0x28
   14084:	beq	140f0 <__assert_fail@plt+0x3064>
   14088:	ldr	lr, [ip, #28]
   1408c:	cmp	lr, #0
   14090:	str	lr, [sp, #44]	; 0x2c
   14094:	beq	140f8 <__assert_fail@plt+0x306c>
   14098:	ldr	lr, [ip, #32]
   1409c:	cmp	lr, #0
   140a0:	str	lr, [sp, #48]	; 0x30
   140a4:	beq	14100 <__assert_fail@plt+0x3074>
   140a8:	ldr	lr, [ip, #36]	; 0x24
   140ac:	mov	ip, #10
   140b0:	cmp	lr, #0
   140b4:	str	lr, [sp, #52]	; 0x34
   140b8:	movweq	ip, #9
   140bc:	b	14104 <__assert_fail@plt+0x3078>
   140c0:	mov	ip, #0
   140c4:	b	14104 <__assert_fail@plt+0x3078>
   140c8:	mov	ip, #1
   140cc:	b	14104 <__assert_fail@plt+0x3078>
   140d0:	mov	ip, #2
   140d4:	b	14104 <__assert_fail@plt+0x3078>
   140d8:	mov	ip, #3
   140dc:	b	14104 <__assert_fail@plt+0x3078>
   140e0:	mov	ip, #4
   140e4:	b	14104 <__assert_fail@plt+0x3078>
   140e8:	mov	ip, #5
   140ec:	b	14104 <__assert_fail@plt+0x3078>
   140f0:	mov	ip, #6
   140f4:	b	14104 <__assert_fail@plt+0x3078>
   140f8:	mov	ip, #7
   140fc:	b	14104 <__assert_fail@plt+0x3078>
   14100:	mov	ip, #8
   14104:	add	lr, sp, #16
   14108:	str	ip, [sp, #4]
   1410c:	str	lr, [sp]
   14110:	bl	13b80 <__assert_fail@plt+0x2af4>
   14114:	mov	sp, fp
   14118:	pop	{fp, pc}
   1411c:	push	{fp, lr}
   14120:	mov	fp, sp
   14124:	movw	r0, #29004	; 0x714c
   14128:	movt	r0, #2
   1412c:	ldr	r1, [r0]
   14130:	movw	r0, #24131	; 0x5e43
   14134:	movt	r0, #1
   14138:	bl	10e34 <fputs_unlocked@plt>
   1413c:	movw	r1, #25251	; 0x62a3
   14140:	mov	r0, #0
   14144:	mov	r2, #5
   14148:	movt	r1, #1
   1414c:	bl	10ec4 <dcgettext@plt>
   14150:	movw	r2, #25271	; 0x62b7
   14154:	mov	r1, r0
   14158:	mov	r0, #1
   1415c:	movt	r2, #1
   14160:	bl	10fd8 <__printf_chk@plt>
   14164:	movw	r1, #25293	; 0x62cd
   14168:	mov	r0, #0
   1416c:	mov	r2, #5
   14170:	movt	r1, #1
   14174:	bl	10ec4 <dcgettext@plt>
   14178:	movw	r2, #23661	; 0x5c6d
   1417c:	movw	r3, #23940	; 0x5d84
   14180:	mov	r1, r0
   14184:	mov	r0, #1
   14188:	movt	r2, #1
   1418c:	movt	r3, #1
   14190:	bl	10fd8 <__printf_chk@plt>
   14194:	movw	r1, #25313	; 0x62e1
   14198:	mov	r0, #0
   1419c:	mov	r2, #5
   141a0:	movt	r1, #1
   141a4:	bl	10ec4 <dcgettext@plt>
   141a8:	movw	r2, #25352	; 0x6308
   141ac:	mov	r1, r0
   141b0:	mov	r0, #1
   141b4:	movt	r2, #1
   141b8:	pop	{fp, lr}
   141bc:	b	10fd8 <__printf_chk@plt>
   141c0:	push	{r4, r5, r6, sl, fp, lr}
   141c4:	add	fp, sp, #16
   141c8:	mov	r4, r2
   141cc:	mov	r5, r1
   141d0:	mov	r6, r0
   141d4:	bl	15774 <__assert_fail@plt+0x46e8>
   141d8:	cmp	r0, #0
   141dc:	popne	{r4, r5, r6, sl, fp, pc}
   141e0:	cmp	r6, #0
   141e4:	beq	141f8 <__assert_fail@plt+0x316c>
   141e8:	cmp	r5, #0
   141ec:	cmpne	r4, #0
   141f0:	bne	141f8 <__assert_fail@plt+0x316c>
   141f4:	pop	{r4, r5, r6, sl, fp, pc}
   141f8:	bl	14774 <__assert_fail@plt+0x36e8>
   141fc:	push	{r4, r5, r6, sl, fp, lr}
   14200:	add	fp, sp, #16
   14204:	mov	r4, r2
   14208:	mov	r5, r1
   1420c:	mov	r6, r0
   14210:	bl	15774 <__assert_fail@plt+0x46e8>
   14214:	cmp	r0, #0
   14218:	popne	{r4, r5, r6, sl, fp, pc}
   1421c:	cmp	r6, #0
   14220:	beq	14234 <__assert_fail@plt+0x31a8>
   14224:	cmp	r5, #0
   14228:	cmpne	r4, #0
   1422c:	bne	14234 <__assert_fail@plt+0x31a8>
   14230:	pop	{r4, r5, r6, sl, fp, pc}
   14234:	bl	14774 <__assert_fail@plt+0x36e8>
   14238:	push	{fp, lr}
   1423c:	mov	fp, sp
   14240:	bl	155a8 <__assert_fail@plt+0x451c>
   14244:	cmp	r0, #0
   14248:	popne	{fp, pc}
   1424c:	bl	14774 <__assert_fail@plt+0x36e8>
   14250:	push	{fp, lr}
   14254:	mov	fp, sp
   14258:	bl	155a8 <__assert_fail@plt+0x451c>
   1425c:	cmp	r0, #0
   14260:	popne	{fp, pc}
   14264:	bl	14774 <__assert_fail@plt+0x36e8>
   14268:	push	{fp, lr}
   1426c:	mov	fp, sp
   14270:	bl	155a8 <__assert_fail@plt+0x451c>
   14274:	cmp	r0, #0
   14278:	popne	{fp, pc}
   1427c:	bl	14774 <__assert_fail@plt+0x36e8>
   14280:	push	{r4, r5, fp, lr}
   14284:	add	fp, sp, #8
   14288:	mov	r4, r1
   1428c:	mov	r5, r0
   14290:	bl	155d8 <__assert_fail@plt+0x454c>
   14294:	cmp	r0, #0
   14298:	popne	{r4, r5, fp, pc}
   1429c:	cmp	r5, #0
   142a0:	beq	142b0 <__assert_fail@plt+0x3224>
   142a4:	cmp	r4, #0
   142a8:	bne	142b0 <__assert_fail@plt+0x3224>
   142ac:	pop	{r4, r5, fp, pc}
   142b0:	bl	14774 <__assert_fail@plt+0x36e8>
   142b4:	push	{fp, lr}
   142b8:	mov	fp, sp
   142bc:	cmp	r1, #0
   142c0:	orreq	r1, r1, #1
   142c4:	bl	155d8 <__assert_fail@plt+0x454c>
   142c8:	cmp	r0, #0
   142cc:	popne	{fp, pc}
   142d0:	bl	14774 <__assert_fail@plt+0x36e8>
   142d4:	push	{fp, lr}
   142d8:	mov	fp, sp
   142dc:	clz	r3, r2
   142e0:	lsr	ip, r3, #5
   142e4:	clz	r3, r1
   142e8:	lsr	r3, r3, #5
   142ec:	orrs	r3, r3, ip
   142f0:	movwne	r1, #1
   142f4:	movwne	r2, #1
   142f8:	bl	15774 <__assert_fail@plt+0x46e8>
   142fc:	cmp	r0, #0
   14300:	popne	{fp, pc}
   14304:	bl	14774 <__assert_fail@plt+0x36e8>
   14308:	push	{fp, lr}
   1430c:	mov	fp, sp
   14310:	mov	r2, r1
   14314:	mov	r1, r0
   14318:	mov	r0, #0
   1431c:	bl	15774 <__assert_fail@plt+0x46e8>
   14320:	cmp	r0, #0
   14324:	popne	{fp, pc}
   14328:	bl	14774 <__assert_fail@plt+0x36e8>
   1432c:	push	{fp, lr}
   14330:	mov	fp, sp
   14334:	mov	r2, r1
   14338:	mov	r1, r0
   1433c:	clz	r0, r2
   14340:	clz	r3, r1
   14344:	lsr	r0, r0, #5
   14348:	lsr	r3, r3, #5
   1434c:	orrs	r0, r3, r0
   14350:	mov	r0, #0
   14354:	movwne	r1, #1
   14358:	movwne	r2, #1
   1435c:	bl	15774 <__assert_fail@plt+0x46e8>
   14360:	cmp	r0, #0
   14364:	popne	{fp, pc}
   14368:	bl	14774 <__assert_fail@plt+0x36e8>
   1436c:	push	{r4, r5, r6, sl, fp, lr}
   14370:	add	fp, sp, #16
   14374:	ldr	r5, [r1]
   14378:	mov	r4, r1
   1437c:	mov	r6, r0
   14380:	cmp	r0, #0
   14384:	beq	1439c <__assert_fail@plt+0x3310>
   14388:	mov	r0, #1
   1438c:	add	r0, r0, r5, lsr #1
   14390:	adds	r5, r5, r0
   14394:	bcc	143a4 <__assert_fail@plt+0x3318>
   14398:	b	143e0 <__assert_fail@plt+0x3354>
   1439c:	cmp	r5, #0
   143a0:	movweq	r5, #64	; 0x40
   143a4:	mov	r0, r6
   143a8:	mov	r1, r5
   143ac:	mov	r2, #1
   143b0:	bl	15774 <__assert_fail@plt+0x46e8>
   143b4:	cmp	r5, #0
   143b8:	mov	r1, r5
   143bc:	movwne	r1, #1
   143c0:	cmp	r0, #0
   143c4:	bne	143d8 <__assert_fail@plt+0x334c>
   143c8:	clz	r2, r6
   143cc:	lsr	r2, r2, #5
   143d0:	orrs	r1, r2, r1
   143d4:	bne	143e0 <__assert_fail@plt+0x3354>
   143d8:	str	r5, [r4]
   143dc:	pop	{r4, r5, r6, sl, fp, pc}
   143e0:	bl	14774 <__assert_fail@plt+0x36e8>
   143e4:	push	{r4, r5, r6, r7, fp, lr}
   143e8:	add	fp, sp, #16
   143ec:	ldr	r5, [r1]
   143f0:	mov	r6, r2
   143f4:	mov	r4, r1
   143f8:	mov	r7, r0
   143fc:	cmp	r0, #0
   14400:	beq	14418 <__assert_fail@plt+0x338c>
   14404:	mov	r0, #1
   14408:	add	r0, r0, r5, lsr #1
   1440c:	adds	r5, r5, r0
   14410:	bcc	14430 <__assert_fail@plt+0x33a4>
   14414:	b	14464 <__assert_fail@plt+0x33d8>
   14418:	cmp	r5, #0
   1441c:	bne	14430 <__assert_fail@plt+0x33a4>
   14420:	mov	r0, #64	; 0x40
   14424:	cmp	r6, #64	; 0x40
   14428:	udiv	r5, r0, r6
   1442c:	addhi	r5, r5, #1
   14430:	mov	r0, r7
   14434:	mov	r1, r5
   14438:	mov	r2, r6
   1443c:	bl	15774 <__assert_fail@plt+0x46e8>
   14440:	cmp	r0, #0
   14444:	bne	1445c <__assert_fail@plt+0x33d0>
   14448:	cmp	r7, #0
   1444c:	beq	14464 <__assert_fail@plt+0x33d8>
   14450:	cmp	r6, #0
   14454:	cmpne	r5, #0
   14458:	bne	14464 <__assert_fail@plt+0x33d8>
   1445c:	str	r5, [r4]
   14460:	pop	{r4, r5, r6, r7, fp, pc}
   14464:	bl	14774 <__assert_fail@plt+0x36e8>
   14468:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1446c:	add	fp, sp, #24
   14470:	mov	r8, r1
   14474:	ldr	r1, [r1]
   14478:	mov	r5, r0
   1447c:	add	r0, r1, r1, asr #1
   14480:	cmp	r0, r1
   14484:	mvnvs	r0, #-2147483648	; 0x80000000
   14488:	cmp	r0, r3
   1448c:	mov	r7, r0
   14490:	movgt	r7, r3
   14494:	cmn	r3, #1
   14498:	movle	r7, r0
   1449c:	ldr	r0, [fp, #8]
   144a0:	cmn	r0, #1
   144a4:	ble	144cc <__assert_fail@plt+0x3440>
   144a8:	cmp	r0, #0
   144ac:	beq	14520 <__assert_fail@plt+0x3494>
   144b0:	cmn	r7, #1
   144b4:	ble	144f4 <__assert_fail@plt+0x3468>
   144b8:	mvn	r4, #-2147483648	; 0x80000000
   144bc:	udiv	r6, r4, r0
   144c0:	cmp	r6, r7
   144c4:	bge	14520 <__assert_fail@plt+0x3494>
   144c8:	b	14530 <__assert_fail@plt+0x34a4>
   144cc:	cmn	r7, #1
   144d0:	ble	14510 <__assert_fail@plt+0x3484>
   144d4:	cmn	r0, #1
   144d8:	beq	14520 <__assert_fail@plt+0x3494>
   144dc:	mov	r6, #-2147483648	; 0x80000000
   144e0:	mvn	r4, #-2147483648	; 0x80000000
   144e4:	sdiv	r6, r6, r0
   144e8:	cmp	r6, r7
   144ec:	bge	14520 <__assert_fail@plt+0x3494>
   144f0:	b	14530 <__assert_fail@plt+0x34a4>
   144f4:	beq	14520 <__assert_fail@plt+0x3494>
   144f8:	mov	r6, #-2147483648	; 0x80000000
   144fc:	mvn	r4, #-2147483648	; 0x80000000
   14500:	sdiv	r6, r6, r7
   14504:	cmp	r6, r0
   14508:	bge	14520 <__assert_fail@plt+0x3494>
   1450c:	b	14530 <__assert_fail@plt+0x34a4>
   14510:	mvn	r4, #-2147483648	; 0x80000000
   14514:	sdiv	r6, r4, r0
   14518:	cmp	r7, r6
   1451c:	blt	14530 <__assert_fail@plt+0x34a4>
   14520:	mul	r6, r7, r0
   14524:	mov	r4, #64	; 0x40
   14528:	cmp	r6, #63	; 0x3f
   1452c:	bgt	14538 <__assert_fail@plt+0x34ac>
   14530:	sdiv	r7, r4, r0
   14534:	mul	r6, r7, r0
   14538:	cmp	r5, #0
   1453c:	moveq	r4, #0
   14540:	streq	r4, [r8]
   14544:	sub	r4, r7, r1
   14548:	cmp	r4, r2
   1454c:	bge	145f8 <__assert_fail@plt+0x356c>
   14550:	add	r7, r1, r2
   14554:	mov	r6, #0
   14558:	mov	r2, #0
   1455c:	cmp	r7, r3
   14560:	movwgt	r6, #1
   14564:	cmn	r3, #1
   14568:	movwgt	r2, #1
   1456c:	cmp	r7, r1
   14570:	bvs	1462c <__assert_fail@plt+0x35a0>
   14574:	ands	r1, r2, r6
   14578:	bne	1462c <__assert_fail@plt+0x35a0>
   1457c:	cmn	r0, #1
   14580:	ble	145a8 <__assert_fail@plt+0x351c>
   14584:	cmp	r0, #0
   14588:	beq	145f4 <__assert_fail@plt+0x3568>
   1458c:	cmn	r7, #1
   14590:	ble	145cc <__assert_fail@plt+0x3540>
   14594:	mvn	r1, #-2147483648	; 0x80000000
   14598:	udiv	r1, r1, r0
   1459c:	cmp	r1, r7
   145a0:	bge	145f4 <__assert_fail@plt+0x3568>
   145a4:	b	1462c <__assert_fail@plt+0x35a0>
   145a8:	cmn	r7, #1
   145ac:	ble	145e4 <__assert_fail@plt+0x3558>
   145b0:	cmn	r0, #1
   145b4:	beq	145f4 <__assert_fail@plt+0x3568>
   145b8:	mov	r1, #-2147483648	; 0x80000000
   145bc:	sdiv	r1, r1, r0
   145c0:	cmp	r1, r7
   145c4:	bge	145f4 <__assert_fail@plt+0x3568>
   145c8:	b	1462c <__assert_fail@plt+0x35a0>
   145cc:	beq	145f4 <__assert_fail@plt+0x3568>
   145d0:	mov	r1, #-2147483648	; 0x80000000
   145d4:	sdiv	r1, r1, r7
   145d8:	cmp	r1, r0
   145dc:	bge	145f4 <__assert_fail@plt+0x3568>
   145e0:	b	1462c <__assert_fail@plt+0x35a0>
   145e4:	mvn	r1, #-2147483648	; 0x80000000
   145e8:	sdiv	r1, r1, r0
   145ec:	cmp	r7, r1
   145f0:	blt	1462c <__assert_fail@plt+0x35a0>
   145f4:	mul	r6, r7, r0
   145f8:	mov	r0, r5
   145fc:	mov	r1, r6
   14600:	bl	155d8 <__assert_fail@plt+0x454c>
   14604:	cmp	r6, #0
   14608:	movwne	r6, #1
   1460c:	cmp	r0, #0
   14610:	bne	14624 <__assert_fail@plt+0x3598>
   14614:	clz	r1, r5
   14618:	lsr	r1, r1, #5
   1461c:	orrs	r1, r1, r6
   14620:	bne	1462c <__assert_fail@plt+0x35a0>
   14624:	str	r7, [r8]
   14628:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1462c:	bl	14774 <__assert_fail@plt+0x36e8>
   14630:	push	{fp, lr}
   14634:	mov	fp, sp
   14638:	mov	r1, #1
   1463c:	bl	15554 <__assert_fail@plt+0x44c8>
   14640:	cmp	r0, #0
   14644:	popne	{fp, pc}
   14648:	bl	14774 <__assert_fail@plt+0x36e8>
   1464c:	push	{fp, lr}
   14650:	mov	fp, sp
   14654:	bl	15554 <__assert_fail@plt+0x44c8>
   14658:	cmp	r0, #0
   1465c:	popne	{fp, pc}
   14660:	bl	14774 <__assert_fail@plt+0x36e8>
   14664:	push	{fp, lr}
   14668:	mov	fp, sp
   1466c:	mov	r1, #1
   14670:	bl	15554 <__assert_fail@plt+0x44c8>
   14674:	cmp	r0, #0
   14678:	popne	{fp, pc}
   1467c:	bl	14774 <__assert_fail@plt+0x36e8>
   14680:	push	{fp, lr}
   14684:	mov	fp, sp
   14688:	bl	15554 <__assert_fail@plt+0x44c8>
   1468c:	cmp	r0, #0
   14690:	popne	{fp, pc}
   14694:	bl	14774 <__assert_fail@plt+0x36e8>
   14698:	push	{r4, r5, fp, lr}
   1469c:	add	fp, sp, #8
   146a0:	mov	r5, r0
   146a4:	mov	r0, r1
   146a8:	mov	r4, r1
   146ac:	bl	155a8 <__assert_fail@plt+0x451c>
   146b0:	cmp	r0, #0
   146b4:	beq	146c8 <__assert_fail@plt+0x363c>
   146b8:	mov	r1, r5
   146bc:	mov	r2, r4
   146c0:	pop	{r4, r5, fp, lr}
   146c4:	b	10e94 <memcpy@plt>
   146c8:	bl	14774 <__assert_fail@plt+0x36e8>
   146cc:	push	{r4, r5, fp, lr}
   146d0:	add	fp, sp, #8
   146d4:	mov	r5, r0
   146d8:	mov	r0, r1
   146dc:	mov	r4, r1
   146e0:	bl	155a8 <__assert_fail@plt+0x451c>
   146e4:	cmp	r0, #0
   146e8:	beq	146fc <__assert_fail@plt+0x3670>
   146ec:	mov	r1, r5
   146f0:	mov	r2, r4
   146f4:	pop	{r4, r5, fp, lr}
   146f8:	b	10e94 <memcpy@plt>
   146fc:	bl	14774 <__assert_fail@plt+0x36e8>
   14700:	push	{r4, r5, fp, lr}
   14704:	add	fp, sp, #8
   14708:	mov	r5, r0
   1470c:	add	r0, r1, #1
   14710:	mov	r4, r1
   14714:	bl	155a8 <__assert_fail@plt+0x451c>
   14718:	cmp	r0, #0
   1471c:	beq	14738 <__assert_fail@plt+0x36ac>
   14720:	mov	r1, #0
   14724:	mov	r2, r4
   14728:	strb	r1, [r0, r4]
   1472c:	mov	r1, r5
   14730:	pop	{r4, r5, fp, lr}
   14734:	b	10e94 <memcpy@plt>
   14738:	bl	14774 <__assert_fail@plt+0x36e8>
   1473c:	push	{r4, r5, fp, lr}
   14740:	add	fp, sp, #8
   14744:	mov	r4, r0
   14748:	bl	10f9c <strlen@plt>
   1474c:	add	r5, r0, #1
   14750:	mov	r0, r5
   14754:	bl	155a8 <__assert_fail@plt+0x451c>
   14758:	cmp	r0, #0
   1475c:	beq	14770 <__assert_fail@plt+0x36e4>
   14760:	mov	r1, r4
   14764:	mov	r2, r5
   14768:	pop	{r4, r5, fp, lr}
   1476c:	b	10e94 <memcpy@plt>
   14770:	bl	14774 <__assert_fail@plt+0x36e8>
   14774:	push	{fp, lr}
   14778:	mov	fp, sp
   1477c:	movw	r0, #28908	; 0x70ec
   14780:	movw	r1, #25428	; 0x6354
   14784:	mov	r2, #5
   14788:	movt	r0, #2
   1478c:	movt	r1, #1
   14790:	ldr	r4, [r0]
   14794:	mov	r0, #0
   14798:	bl	10ec4 <dcgettext@plt>
   1479c:	movw	r2, #24391	; 0x5f47
   147a0:	mov	r3, r0
   147a4:	mov	r0, r4
   147a8:	mov	r1, #0
   147ac:	movt	r2, #1
   147b0:	bl	10f30 <error@plt>
   147b4:	bl	11080 <abort@plt>
   147b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147bc:	add	fp, sp, #24
   147c0:	sub	sp, sp, #16
   147c4:	mov	r8, r0
   147c8:	ldr	r0, [fp, #16]
   147cc:	mov	r5, r3
   147d0:	mov	r6, r2
   147d4:	mov	r2, r1
   147d8:	add	r3, sp, #8
   147dc:	mov	r1, #0
   147e0:	str	r0, [sp]
   147e4:	mov	r0, r8
   147e8:	bl	148b4 <__assert_fail@plt+0x3828>
   147ec:	cmp	r0, #0
   147f0:	bne	1487c <__assert_fail@plt+0x37f0>
   147f4:	ldr	r4, [sp, #8]
   147f8:	ldr	r7, [sp, #12]
   147fc:	subs	r0, r4, r6
   14800:	sbcs	r0, r7, r5
   14804:	bcc	14828 <__assert_fail@plt+0x379c>
   14808:	ldr	r1, [fp, #8]
   1480c:	ldr	r0, [fp, #12]
   14810:	subs	r1, r1, r4
   14814:	sbcs	r0, r0, r7
   14818:	movcs	r0, r4
   1481c:	movcs	r1, r7
   14820:	subcs	sp, fp, #24
   14824:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   14828:	bl	10fb4 <__errno_location@plt>
   1482c:	subs	r1, r4, #1073741824	; 0x40000000
   14830:	sbcs	r1, r7, #0
   14834:	movcc	r1, #34	; 0x22
   14838:	movcs	r1, #75	; 0x4b
   1483c:	str	r1, [r0]
   14840:	ldr	r6, [r0]
   14844:	ldr	r4, [fp, #24]
   14848:	ldr	r5, [fp, #20]
   1484c:	mov	r0, r8
   14850:	bl	13a34 <__assert_fail@plt+0x29a8>
   14854:	subs	r1, r6, #22
   14858:	movw	r2, #24387	; 0x5f43
   1485c:	str	r0, [sp]
   14860:	mov	r3, r5
   14864:	movne	r1, r6
   14868:	cmp	r4, #0
   1486c:	movt	r2, #1
   14870:	movweq	r4, #1
   14874:	mov	r0, r4
   14878:	bl	10f30 <error@plt>
   1487c:	cmp	r0, #1
   14880:	beq	14898 <__assert_fail@plt+0x380c>
   14884:	cmp	r0, #3
   14888:	bne	148a4 <__assert_fail@plt+0x3818>
   1488c:	bl	10fb4 <__errno_location@plt>
   14890:	mov	r1, #0
   14894:	b	1483c <__assert_fail@plt+0x37b0>
   14898:	bl	10fb4 <__errno_location@plt>
   1489c:	mov	r1, #75	; 0x4b
   148a0:	b	1483c <__assert_fail@plt+0x37b0>
   148a4:	bl	10fb4 <__errno_location@plt>
   148a8:	b	14840 <__assert_fail@plt+0x37b4>
   148ac:	mov	r1, #10
   148b0:	b	147b8 <__assert_fail@plt+0x372c>
   148b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148b8:	add	fp, sp, #28
   148bc:	sub	sp, sp, #44	; 0x2c
   148c0:	cmp	r2, #37	; 0x25
   148c4:	bcs	15534 <__assert_fail@plt+0x44a8>
   148c8:	ldr	sl, [fp, #8]
   148cc:	mov	r6, r2
   148d0:	mov	r7, r1
   148d4:	mov	r4, r0
   148d8:	str	r3, [sp, #36]	; 0x24
   148dc:	bl	10fb4 <__errno_location@plt>
   148e0:	mov	r5, r0
   148e4:	mov	r0, #0
   148e8:	str	r0, [r5]
   148ec:	bl	10f78 <__ctype_b_loc@plt>
   148f0:	ldr	r1, [r0]
   148f4:	mov	r2, r4
   148f8:	ldrb	r0, [r2], #1
   148fc:	add	r3, r1, r0, lsl #1
   14900:	ldrb	r3, [r3, #1]
   14904:	tst	r3, #32
   14908:	bne	148f8 <__assert_fail@plt+0x386c>
   1490c:	cmp	r7, #0
   14910:	sub	r9, fp, #32
   14914:	mov	r8, #4
   14918:	movne	r9, r7
   1491c:	cmp	r0, #45	; 0x2d
   14920:	beq	15528 <__assert_fail@plt+0x449c>
   14924:	mov	r0, r4
   14928:	mov	r1, r9
   1492c:	mov	r2, r6
   14930:	mov	r3, #0
   14934:	bl	10ea0 <__strtoull_internal@plt>
   14938:	mov	r7, r1
   1493c:	ldr	r1, [r9]
   14940:	cmp	r1, r4
   14944:	beq	14970 <__assert_fail@plt+0x38e4>
   14948:	mov	r6, r0
   1494c:	ldr	r0, [r5]
   14950:	cmp	r0, #0
   14954:	beq	149ac <__assert_fail@plt+0x3920>
   14958:	cmp	r0, #34	; 0x22
   1495c:	bne	15528 <__assert_fail@plt+0x449c>
   14960:	mov	r8, #1
   14964:	cmp	sl, #0
   14968:	bne	149b8 <__assert_fail@plt+0x392c>
   1496c:	b	15520 <__assert_fail@plt+0x4494>
   14970:	cmp	sl, #0
   14974:	beq	15528 <__assert_fail@plt+0x449c>
   14978:	mov	r5, r1
   1497c:	ldrb	r1, [r4]
   14980:	cmp	r1, #0
   14984:	beq	15528 <__assert_fail@plt+0x449c>
   14988:	mov	r0, sl
   1498c:	bl	10fa8 <strchr@plt>
   14990:	cmp	r0, #0
   14994:	beq	15528 <__assert_fail@plt+0x449c>
   14998:	mov	r1, r5
   1499c:	mov	r8, #0
   149a0:	mov	r6, #1
   149a4:	mov	r7, #0
   149a8:	b	149b8 <__assert_fail@plt+0x392c>
   149ac:	mov	r8, r0
   149b0:	cmp	sl, #0
   149b4:	beq	15520 <__assert_fail@plt+0x4494>
   149b8:	ldrb	r4, [r1]
   149bc:	cmp	r4, #0
   149c0:	beq	15520 <__assert_fail@plt+0x4494>
   149c4:	str	r1, [sp, #32]
   149c8:	mov	r0, sl
   149cc:	mov	r1, r4
   149d0:	bl	10fa8 <strchr@plt>
   149d4:	cmp	r0, #0
   149d8:	beq	14ca0 <__assert_fail@plt+0x3c14>
   149dc:	sub	r0, r4, #69	; 0x45
   149e0:	mov	r1, #1
   149e4:	mov	r3, #0
   149e8:	mov	r5, #1024	; 0x400
   149ec:	cmp	r0, #47	; 0x2f
   149f0:	str	r1, [sp, #28]
   149f4:	bhi	14af8 <__assert_fail@plt+0x3a6c>
   149f8:	add	r1, pc, #0
   149fc:	ldr	pc, [r1, r0, lsl #2]
   14a00:	andeq	r4, r1, r0, asr #21
   14a04:	strdeq	r4, [r1], -r8
   14a08:	andeq	r4, r1, r0, asr #21
   14a0c:	strdeq	r4, [r1], -r8
   14a10:	strdeq	r4, [r1], -r8
   14a14:	strdeq	r4, [r1], -r8
   14a18:	andeq	r4, r1, r0, asr #21
   14a1c:	strdeq	r4, [r1], -r8
   14a20:	andeq	r4, r1, r0, asr #21
   14a24:	strdeq	r4, [r1], -r8
   14a28:	strdeq	r4, [r1], -r8
   14a2c:	andeq	r4, r1, r0, asr #21
   14a30:	strdeq	r4, [r1], -r8
   14a34:	strdeq	r4, [r1], -r8
   14a38:	strdeq	r4, [r1], -r8
   14a3c:	andeq	r4, r1, r0, asr #21
   14a40:	strdeq	r4, [r1], -r8
   14a44:	strdeq	r4, [r1], -r8
   14a48:	strdeq	r4, [r1], -r8
   14a4c:	strdeq	r4, [r1], -r8
   14a50:	andeq	r4, r1, r0, asr #21
   14a54:	andeq	r4, r1, r0, asr #21
   14a58:	strdeq	r4, [r1], -r8
   14a5c:	strdeq	r4, [r1], -r8
   14a60:	strdeq	r4, [r1], -r8
   14a64:	strdeq	r4, [r1], -r8
   14a68:	strdeq	r4, [r1], -r8
   14a6c:	strdeq	r4, [r1], -r8
   14a70:	strdeq	r4, [r1], -r8
   14a74:	strdeq	r4, [r1], -r8
   14a78:	strdeq	r4, [r1], -r8
   14a7c:	strdeq	r4, [r1], -r8
   14a80:	strdeq	r4, [r1], -r8
   14a84:	strdeq	r4, [r1], -r8
   14a88:	andeq	r4, r1, r0, asr #21
   14a8c:	strdeq	r4, [r1], -r8
   14a90:	strdeq	r4, [r1], -r8
   14a94:	strdeq	r4, [r1], -r8
   14a98:	andeq	r4, r1, r0, asr #21
   14a9c:	strdeq	r4, [r1], -r8
   14aa0:	andeq	r4, r1, r0, asr #21
   14aa4:	strdeq	r4, [r1], -r8
   14aa8:	strdeq	r4, [r1], -r8
   14aac:	strdeq	r4, [r1], -r8
   14ab0:	strdeq	r4, [r1], -r8
   14ab4:	strdeq	r4, [r1], -r8
   14ab8:	strdeq	r4, [r1], -r8
   14abc:	andeq	r4, r1, r0, asr #21
   14ac0:	mov	r0, sl
   14ac4:	mov	r1, #48	; 0x30
   14ac8:	bl	10fa8 <strchr@plt>
   14acc:	cmp	r0, #0
   14ad0:	beq	14af4 <__assert_fail@plt+0x3a68>
   14ad4:	ldr	r1, [sp, #32]
   14ad8:	ldrb	r0, [r1, #1]
   14adc:	cmp	r0, #66	; 0x42
   14ae0:	cmpne	r0, #68	; 0x44
   14ae4:	bne	14cac <__assert_fail@plt+0x3c20>
   14ae8:	mov	r5, #1000	; 0x3e8
   14aec:	mov	r0, #2
   14af0:	str	r0, [sp, #28]
   14af4:	mov	r3, #0
   14af8:	sub	r0, r4, #66	; 0x42
   14afc:	cmp	r0, #53	; 0x35
   14b00:	bhi	14ca0 <__assert_fail@plt+0x3c14>
   14b04:	add	r1, pc, #0
   14b08:	ldr	pc, [r1, r0, lsl #2]
   14b0c:	andeq	r5, r1, r8, lsr #32
   14b10:	andeq	r4, r1, r0, lsr #25
   14b14:	andeq	r4, r1, r0, lsr #25
   14b18:	andeq	r5, r1, r0, asr r0
   14b1c:	andeq	r4, r1, r0, lsr #25
   14b20:	andeq	r4, r1, r4, ror #23
   14b24:	andeq	r4, r1, r0, lsr #25
   14b28:	andeq	r4, r1, r0, lsr #25
   14b2c:	andeq	r4, r1, r0, lsr #25
   14b30:	ldrdeq	r4, [r1], -r0
   14b34:	andeq	r4, r1, r0, lsr #25
   14b38:	andeq	r4, r1, r8, lsl sp
   14b3c:	andeq	r4, r1, r0, lsr #25
   14b40:	andeq	r4, r1, r0, lsr #25
   14b44:	andeq	r5, r1, r8, lsr #3
   14b48:	andeq	r4, r1, r0, lsr #25
   14b4c:	andeq	r4, r1, r0, lsr #25
   14b50:	andeq	r4, r1, r0, lsr #25
   14b54:	andeq	r4, r1, r4, lsr #27
   14b58:	andeq	r4, r1, r0, lsr #25
   14b5c:	andeq	r4, r1, r0, lsr #25
   14b60:	andeq	r4, r1, r0, lsr #25
   14b64:	andeq	r4, r1, r0, lsr #25
   14b68:	ldrdeq	r5, [r1], -r0
   14b6c:	andeq	r4, r1, ip, lsl #29
   14b70:	andeq	r4, r1, r0, lsr #25
   14b74:	andeq	r4, r1, r0, lsr #25
   14b78:	andeq	r4, r1, r0, lsr #25
   14b7c:	andeq	r4, r1, r0, lsr #25
   14b80:	andeq	r4, r1, r0, lsr #25
   14b84:	andeq	r4, r1, r0, lsr #25
   14b88:	andeq	r4, r1, r0, lsr #25
   14b8c:	andeq	r5, r1, r8, lsr #9
   14b90:	andeq	r5, r1, r0, lsl #10
   14b94:	andeq	r4, r1, r0, lsr #25
   14b98:	andeq	r4, r1, r0, lsr #25
   14b9c:	andeq	r4, r1, r0, lsr #25
   14ba0:	andeq	r4, r1, r4, ror #23
   14ba4:	andeq	r4, r1, r0, lsr #25
   14ba8:	andeq	r4, r1, r0, lsr #25
   14bac:	andeq	r4, r1, r0, lsr #25
   14bb0:	ldrdeq	r4, [r1], -r0
   14bb4:	andeq	r4, r1, r0, lsr #25
   14bb8:	andeq	r4, r1, r8, lsl sp
   14bbc:	andeq	r4, r1, r0, lsr #25
   14bc0:	andeq	r4, r1, r0, lsr #25
   14bc4:	andeq	r4, r1, r0, lsr #25
   14bc8:	andeq	r4, r1, r0, lsr #25
   14bcc:	andeq	r4, r1, r0, lsr #25
   14bd0:	andeq	r4, r1, r0, lsr #25
   14bd4:	andeq	r4, r1, r4, lsr #27
   14bd8:	andeq	r4, r1, r0, lsr #25
   14bdc:	andeq	r4, r1, r0, lsr #25
   14be0:	ldrdeq	r5, [r1], -ip
   14be4:	mvn	r0, #0
   14be8:	mvn	r1, #0
   14bec:	mov	r2, r5
   14bf0:	mov	sl, r3
   14bf4:	bl	158bc <__assert_fail@plt+0x4830>
   14bf8:	subs	r3, r0, r6
   14bfc:	umull	r4, r2, r6, r5
   14c00:	mov	lr, #0
   14c04:	str	r1, [sp, #20]
   14c08:	sbcs	r3, r1, r7
   14c0c:	movwcc	lr, #1
   14c10:	mla	ip, r6, sl, r2
   14c14:	mov	r2, r1
   14c18:	mov	r2, #0
   14c1c:	cmp	lr, #0
   14c20:	mla	r7, r7, r5, ip
   14c24:	mvnne	r4, #0
   14c28:	mvnne	r7, #0
   14c2c:	subs	r6, r0, r4
   14c30:	sbcs	r6, r1, r7
   14c34:	umull	r3, r6, r4, r5
   14c38:	movwcc	r2, #1
   14c3c:	cmp	r2, #0
   14c40:	mvnne	r3, #0
   14c44:	cmp	r2, #0
   14c48:	str	r6, [sp, #16]
   14c4c:	umull	r6, ip, r3, r5
   14c50:	mla	r1, r3, sl, ip
   14c54:	ldr	ip, [sp, #16]
   14c58:	str	r1, [sp, #12]
   14c5c:	mla	r4, r4, sl, ip
   14c60:	mla	r4, r7, r5, r4
   14c64:	mvnne	r4, #0
   14c68:	subs	r0, r0, r3
   14c6c:	ldr	r0, [sp, #20]
   14c70:	ldr	r7, [sp, #12]
   14c74:	sbcs	r0, r0, r4
   14c78:	mov	r0, #0
   14c7c:	mla	r7, r4, r5, r7
   14c80:	movwcc	r0, #1
   14c84:	cmp	r0, #0
   14c88:	mov	r1, r0
   14c8c:	orr	r0, lr, r2
   14c90:	mvnne	r7, #0
   14c94:	mvnne	r6, #0
   14c98:	orr	r3, r0, r1
   14c9c:	b	15500 <__assert_fail@plt+0x4474>
   14ca0:	ldr	r0, [sp, #36]	; 0x24
   14ca4:	orr	r8, r8, #2
   14ca8:	b	15524 <__assert_fail@plt+0x4498>
   14cac:	cmp	r0, #105	; 0x69
   14cb0:	mov	r3, #0
   14cb4:	bne	14af8 <__assert_fail@plt+0x3a6c>
   14cb8:	ldrb	r0, [r1, #2]
   14cbc:	mov	r1, #1
   14cc0:	cmp	r0, #66	; 0x42
   14cc4:	movweq	r1, #3
   14cc8:	str	r1, [sp, #28]
   14ccc:	b	14af8 <__assert_fail@plt+0x3a6c>
   14cd0:	mvn	r0, #0
   14cd4:	mvn	r1, #0
   14cd8:	mov	r2, r5
   14cdc:	mov	r4, r3
   14ce0:	bl	158bc <__assert_fail@plt+0x4830>
   14ce4:	subs	r0, r0, r6
   14ce8:	mov	r2, #0
   14cec:	sbcs	r0, r1, r7
   14cf0:	umull	r0, r1, r6, r5
   14cf4:	movwcc	r2, #1
   14cf8:	cmp	r2, #0
   14cfc:	mla	r1, r6, r4, r1
   14d00:	mov	r3, r2
   14d04:	mvnne	r0, #0
   14d08:	mla	r7, r7, r5, r1
   14d0c:	mvnne	r7, #0
   14d10:	mov	r6, r0
   14d14:	b	15500 <__assert_fail@plt+0x4474>
   14d18:	mvn	r0, #0
   14d1c:	mvn	r1, #0
   14d20:	mov	r2, r5
   14d24:	str	r3, [sp, #24]
   14d28:	bl	158bc <__assert_fail@plt+0x4830>
   14d2c:	subs	r3, r0, r6
   14d30:	mov	ip, r0
   14d34:	umull	r4, r0, r6, r5
   14d38:	mov	sl, #0
   14d3c:	sbcs	r3, r1, r7
   14d40:	mov	r3, #0
   14d44:	movwcc	r3, #1
   14d48:	cmp	r3, #0
   14d4c:	str	r0, [sp, #20]
   14d50:	ldr	r0, [sp, #24]
   14d54:	mvnne	r4, #0
   14d58:	cmp	r3, #0
   14d5c:	umull	lr, r2, r4, r5
   14d60:	mla	r2, r4, r0, r2
   14d64:	str	r2, [sp, #16]
   14d68:	ldr	r2, [sp, #20]
   14d6c:	mla	r6, r6, r0, r2
   14d70:	ldr	r0, [sp, #16]
   14d74:	mla	r6, r7, r5, r6
   14d78:	mvnne	r6, #0
   14d7c:	mla	r7, r6, r5, r0
   14d80:	subs	r0, ip, r4
   14d84:	sbcs	r0, r1, r6
   14d88:	movwcc	sl, #1
   14d8c:	cmp	sl, #0
   14d90:	orr	r3, r3, sl
   14d94:	mvnne	lr, #0
   14d98:	mvnne	r7, #0
   14d9c:	mov	r6, lr
   14da0:	b	15500 <__assert_fail@plt+0x4474>
   14da4:	mvn	r0, #0
   14da8:	mvn	r1, #0
   14dac:	mov	r2, r5
   14db0:	mov	sl, r3
   14db4:	bl	158bc <__assert_fail@plt+0x4830>
   14db8:	subs	r3, r0, r6
   14dbc:	mov	ip, r1
   14dc0:	umull	r2, lr, r6, r5
   14dc4:	str	r0, [sp, #20]
   14dc8:	sbcs	r3, r1, r7
   14dcc:	mov	r1, #0
   14dd0:	str	ip, [sp, #16]
   14dd4:	movwcc	r1, #1
   14dd8:	mla	r6, r6, sl, lr
   14ddc:	mov	lr, #0
   14de0:	cmp	r1, #0
   14de4:	mla	r7, r7, r5, r6
   14de8:	mvnne	r2, #0
   14dec:	cmp	r1, #0
   14df0:	umull	r3, r4, r2, r5
   14df4:	mvnne	r7, #0
   14df8:	mla	r4, r2, sl, r4
   14dfc:	subs	r2, r0, r2
   14e00:	sbcs	r2, ip, r7
   14e04:	mla	r4, r7, r5, r4
   14e08:	mov	r2, #0
   14e0c:	movwcc	lr, #1
   14e10:	cmp	lr, #0
   14e14:	mvnne	r3, #0
   14e18:	mvnne	r4, #0
   14e1c:	subs	r7, r0, r3
   14e20:	mov	r0, r5
   14e24:	sbcs	r7, ip, r4
   14e28:	umull	r5, r7, r3, r5
   14e2c:	movwcc	r2, #1
   14e30:	cmp	r2, #0
   14e34:	mla	r3, r3, sl, r7
   14e38:	mvnne	r5, #0
   14e3c:	cmp	r2, #0
   14e40:	mla	r3, r4, r0, r3
   14e44:	umull	r6, ip, r5, r0
   14e48:	mvnne	r3, #0
   14e4c:	mla	ip, r5, sl, ip
   14e50:	mla	r7, r3, r0, ip
   14e54:	ldr	r0, [sp, #20]
   14e58:	subs	r0, r0, r5
   14e5c:	ldr	r0, [sp, #16]
   14e60:	sbcs	r0, r0, r3
   14e64:	mov	r0, #0
   14e68:	movwcc	r0, #1
   14e6c:	cmp	r0, #0
   14e70:	mov	r3, r0
   14e74:	orr	r0, r1, lr
   14e78:	orr	r0, r0, r2
   14e7c:	mvnne	r7, #0
   14e80:	mvnne	r6, #0
   14e84:	orr	r3, r0, r3
   14e88:	b	15500 <__assert_fail@plt+0x4474>
   14e8c:	mvn	r0, #0
   14e90:	mvn	r1, #0
   14e94:	mov	r2, r5
   14e98:	mov	r4, r3
   14e9c:	str	r3, [sp, #24]
   14ea0:	bl	158bc <__assert_fail@plt+0x4830>
   14ea4:	umull	r3, r2, r6, r5
   14ea8:	mla	r2, r6, r4, r2
   14eac:	subs	r6, r0, r6
   14eb0:	sbcs	r6, r1, r7
   14eb4:	mov	r6, #0
   14eb8:	mla	ip, r7, r5, r2
   14ebc:	ldr	r2, [sp, #24]
   14ec0:	movwcc	r6, #1
   14ec4:	cmp	r6, #0
   14ec8:	str	r6, [sp, #20]
   14ecc:	mov	r6, #0
   14ed0:	mvnne	r3, #0
   14ed4:	mvnne	ip, #0
   14ed8:	subs	r4, r0, r3
   14edc:	umull	r7, lr, r3, r5
   14ee0:	sbcs	r4, r1, ip
   14ee4:	movwcc	r6, #1
   14ee8:	mla	r3, r3, r2, lr
   14eec:	cmp	r6, #0
   14ef0:	str	r6, [sp, #16]
   14ef4:	mvnne	r7, #0
   14ef8:	cmp	r6, #0
   14efc:	umull	sl, r4, r7, r5
   14f00:	mla	r4, r7, r2, r4
   14f04:	mla	r2, ip, r5, r3
   14f08:	mvnne	r2, #0
   14f0c:	subs	r3, r0, r7
   14f10:	mov	ip, #0
   14f14:	mla	r6, r2, r5, r4
   14f18:	sbcs	r2, r1, r2
   14f1c:	mov	r4, r0
   14f20:	mov	r0, #0
   14f24:	movwcc	r0, #1
   14f28:	mov	r3, r4
   14f2c:	cmp	r0, #0
   14f30:	str	r0, [sp, #12]
   14f34:	mov	r0, r1
   14f38:	str	r3, [sp, #4]
   14f3c:	mvnne	sl, #0
   14f40:	mvnne	r6, #0
   14f44:	str	r0, [sp, #8]
   14f48:	subs	r2, r4, sl
   14f4c:	ldr	r4, [sp, #24]
   14f50:	sbcs	r2, r1, r6
   14f54:	umull	r7, r2, sl, r5
   14f58:	movwcc	ip, #1
   14f5c:	cmp	ip, #0
   14f60:	mvnne	r7, #0
   14f64:	mla	r2, sl, r4, r2
   14f68:	cmp	ip, #0
   14f6c:	mov	sl, #0
   14f70:	umull	r1, lr, r7, r5
   14f74:	mla	r2, r6, r5, r2
   14f78:	mvnne	r2, #0
   14f7c:	subs	r6, r3, r7
   14f80:	mla	lr, r7, r4, lr
   14f84:	mla	lr, r2, r5, lr
   14f88:	sbcs	r2, r0, r2
   14f8c:	mov	r2, #0
   14f90:	movwcc	sl, #1
   14f94:	cmp	sl, #0
   14f98:	mvnne	r1, #0
   14f9c:	mvnne	lr, #0
   14fa0:	subs	r6, r3, r1
   14fa4:	ldr	r3, [sp, #24]
   14fa8:	sbcs	r6, r0, lr
   14fac:	umull	r0, r7, r1, r5
   14fb0:	movwcc	r2, #1
   14fb4:	cmp	r2, #0
   14fb8:	mvnne	r0, #0
   14fbc:	mla	r1, r1, r3, r7
   14fc0:	cmp	r2, #0
   14fc4:	umull	r6, r4, r0, r5
   14fc8:	mla	r1, lr, r5, r1
   14fcc:	mvnne	r1, #0
   14fd0:	mla	r4, r0, r3, r4
   14fd4:	ldr	r3, [sp, #4]
   14fd8:	mla	r7, r1, r5, r4
   14fdc:	ldr	r5, [sp, #16]
   14fe0:	subs	r0, r3, r0
   14fe4:	ldr	r0, [sp, #8]
   14fe8:	sbcs	r0, r0, r1
   14fec:	mov	r0, #0
   14ff0:	movwcc	r0, #1
   14ff4:	cmp	r0, #0
   14ff8:	mov	r1, r0
   14ffc:	ldr	r0, [sp, #20]
   15000:	mvnne	r7, #0
   15004:	mvnne	r6, #0
   15008:	orr	r0, r0, r5
   1500c:	ldr	r5, [sp, #12]
   15010:	orr	r0, r0, r5
   15014:	orr	r0, r0, ip
   15018:	orr	r0, r0, sl
   1501c:	orr	r0, r0, r2
   15020:	orr	r0, r0, r1
   15024:	b	154a0 <__assert_fail@plt+0x4414>
   15028:	mov	r1, #0
   1502c:	lsl	r2, r7, #10
   15030:	lsl	r0, r6, #10
   15034:	lsr	r3, r7, #22
   15038:	cmp	r1, r7, lsr #22
   1503c:	orr	r2, r2, r6, lsr #22
   15040:	mvnne	r0, #0
   15044:	movwne	r3, #1
   15048:	cmp	r1, r7, lsr #22
   1504c:	b	154cc <__assert_fail@plt+0x4440>
   15050:	mvn	r0, #0
   15054:	mvn	r1, #0
   15058:	mov	r2, r5
   1505c:	mov	sl, r3
   15060:	bl	158bc <__assert_fail@plt+0x4830>
   15064:	subs	r2, r0, r6
   15068:	mov	ip, r0
   1506c:	mov	r0, #0
   15070:	sbcs	r2, r1, r7
   15074:	umull	r4, r2, r6, r5
   15078:	movwcc	r0, #1
   1507c:	cmp	r0, #0
   15080:	mla	r2, r6, sl, r2
   15084:	str	r0, [sp, #20]
   15088:	mvnne	r4, #0
   1508c:	cmp	r0, #0
   15090:	mla	r2, r7, r5, r2
   15094:	mov	r0, #0
   15098:	umull	lr, r3, r4, r5
   1509c:	mvnne	r2, #0
   150a0:	mla	r3, r4, sl, r3
   150a4:	mla	r6, r2, r5, r3
   150a8:	subs	r3, ip, r4
   150ac:	mov	r3, r1
   150b0:	sbcs	r2, r1, r2
   150b4:	str	r3, [sp, #8]
   150b8:	movwcc	r0, #1
   150bc:	cmp	r0, #0
   150c0:	str	r0, [sp, #16]
   150c4:	mov	r0, ip
   150c8:	mvnne	lr, #0
   150cc:	mvnne	r6, #0
   150d0:	str	r0, [sp, #12]
   150d4:	subs	r2, ip, lr
   150d8:	umull	r7, r4, lr, r5
   150dc:	sbcs	r2, r1, r6
   150e0:	mov	r2, #0
   150e4:	movwcc	r2, #1
   150e8:	mla	r4, lr, sl, r4
   150ec:	cmp	r2, #0
   150f0:	mla	r6, r6, r5, r4
   150f4:	mov	r4, #0
   150f8:	mvnne	r7, #0
   150fc:	cmp	r2, #0
   15100:	umull	r1, ip, r7, r5
   15104:	mvnne	r6, #0
   15108:	mla	ip, r7, sl, ip
   1510c:	subs	r7, r0, r7
   15110:	sbcs	r7, r3, r6
   15114:	mla	lr, r6, r5, ip
   15118:	mov	ip, #0
   1511c:	movwcc	ip, #1
   15120:	cmp	ip, #0
   15124:	mvnne	r1, #0
   15128:	mvnne	lr, #0
   1512c:	subs	r7, r0, r1
   15130:	sbcs	r7, r3, lr
   15134:	umull	r0, r7, r1, r5
   15138:	movwcc	r4, #1
   1513c:	cmp	r4, #0
   15140:	mla	r1, r1, sl, r7
   15144:	mvnne	r0, #0
   15148:	cmp	r4, #0
   1514c:	mla	r1, lr, r5, r1
   15150:	umull	r6, r3, r0, r5
   15154:	mvnne	r1, #0
   15158:	mla	r3, r0, sl, r3
   1515c:	mla	r7, r1, r5, r3
   15160:	ldr	r3, [sp, #12]
   15164:	subs	r0, r3, r0
   15168:	ldr	r0, [sp, #8]
   1516c:	ldr	r3, [sp, #16]
   15170:	sbcs	r0, r0, r1
   15174:	mov	r0, #0
   15178:	movwcc	r0, #1
   1517c:	cmp	r0, #0
   15180:	mov	r1, r0
   15184:	ldr	r0, [sp, #20]
   15188:	mvnne	r7, #0
   1518c:	mvnne	r6, #0
   15190:	orr	r0, r0, r3
   15194:	orr	r0, r0, r2
   15198:	orr	r0, r0, ip
   1519c:	orr	r0, r0, r4
   151a0:	orr	r3, r0, r1
   151a4:	b	15500 <__assert_fail@plt+0x4474>
   151a8:	mvn	r0, #0
   151ac:	mvn	r1, #0
   151b0:	mov	r2, r5
   151b4:	mov	sl, r3
   151b8:	bl	158bc <__assert_fail@plt+0x4830>
   151bc:	umull	r3, r2, r6, r5
   151c0:	mov	lr, r1
   151c4:	mov	r1, r0
   151c8:	mla	r2, r6, sl, r2
   151cc:	subs	r6, r0, r6
   151d0:	mov	r0, #0
   151d4:	sbcs	r6, lr, r7
   151d8:	mla	r2, r7, r5, r2
   151dc:	movwcc	r0, #1
   151e0:	cmp	r0, #0
   151e4:	str	r0, [sp, #20]
   151e8:	mov	r0, r1
   151ec:	mvnne	r3, #0
   151f0:	mvnne	r2, #0
   151f4:	str	r0, [sp, #16]
   151f8:	subs	r4, r1, r3
   151fc:	umull	r7, ip, r3, r5
   15200:	sbcs	r4, lr, r2
   15204:	mov	r4, #0
   15208:	movwcc	r4, #1
   1520c:	mla	r3, r3, sl, ip
   15210:	mov	ip, #0
   15214:	cmp	r4, #0
   15218:	mla	r2, r2, r5, r3
   1521c:	mvnne	r7, #0
   15220:	cmp	r4, #0
   15224:	umull	r1, r6, r7, r5
   15228:	mvnne	r2, #0
   1522c:	mla	r6, r7, sl, r6
   15230:	mla	r3, r2, r5, r6
   15234:	subs	r6, r0, r7
   15238:	sbcs	r2, lr, r2
   1523c:	mov	r2, #0
   15240:	movwcc	ip, #1
   15244:	cmp	ip, #0
   15248:	mvnne	r1, #0
   1524c:	mvnne	r3, #0
   15250:	subs	r6, r0, r1
   15254:	sbcs	r6, lr, r3
   15258:	umull	r0, r6, r1, r5
   1525c:	movwcc	r2, #1
   15260:	cmp	r2, #0
   15264:	mvnne	r0, #0
   15268:	cmp	r2, #0
   1526c:	str	r6, [sp, #12]
   15270:	umull	r6, r7, r0, r5
   15274:	mla	r7, r0, sl, r7
   15278:	str	r7, [sp, #8]
   1527c:	ldr	r7, [sp, #12]
   15280:	mla	r1, r1, sl, r7
   15284:	mla	r1, r3, r5, r1
   15288:	ldr	r3, [sp, #8]
   1528c:	mvnne	r1, #0
   15290:	mla	r7, r1, r5, r3
   15294:	ldr	r3, [sp, #16]
   15298:	subs	r0, r3, r0
   1529c:	sbcs	r0, lr, r1
   152a0:	mov	r0, #0
   152a4:	movwcc	r0, #1
   152a8:	cmp	r0, #0
   152ac:	mov	r1, r0
   152b0:	ldr	r0, [sp, #20]
   152b4:	mvnne	r7, #0
   152b8:	mvnne	r6, #0
   152bc:	orr	r0, r0, r4
   152c0:	orr	r0, r0, ip
   152c4:	orr	r0, r0, r2
   152c8:	orr	r3, r0, r1
   152cc:	b	15500 <__assert_fail@plt+0x4474>
   152d0:	mvn	r0, #0
   152d4:	mvn	r1, #0
   152d8:	mov	r2, r5
   152dc:	mov	sl, r3
   152e0:	bl	158bc <__assert_fail@plt+0x4830>
   152e4:	mov	lr, r0
   152e8:	subs	r0, r0, r6
   152ec:	mov	r2, #0
   152f0:	mov	ip, r1
   152f4:	str	sl, [sp, #24]
   152f8:	sbcs	r0, r1, r7
   152fc:	umull	r3, r1, r6, r5
   15300:	str	lr, [sp, #4]
   15304:	movwcc	r2, #1
   15308:	cmp	r2, #0
   1530c:	mla	r6, r6, sl, r1
   15310:	mov	r1, #0
   15314:	str	r2, [sp, #20]
   15318:	mvnne	r3, #0
   1531c:	cmp	r2, #0
   15320:	mla	r7, r7, r5, r6
   15324:	mov	r2, #0
   15328:	umull	r0, r4, r3, r5
   1532c:	mvnne	r7, #0
   15330:	mla	r4, r3, sl, r4
   15334:	subs	r3, lr, r3
   15338:	sbcs	r3, ip, r7
   1533c:	mla	r4, r7, r5, r4
   15340:	movwcc	r1, #1
   15344:	cmp	r1, #0
   15348:	str	r1, [sp, #16]
   1534c:	mvnne	r0, #0
   15350:	mvnne	r4, #0
   15354:	subs	r3, lr, r0
   15358:	sbcs	r3, ip, r4
   1535c:	umull	r6, r3, r0, r5
   15360:	movwcc	r2, #1
   15364:	cmp	r2, #0
   15368:	mla	r0, r0, sl, r3
   1536c:	str	r2, [sp, #12]
   15370:	mvnne	r6, #0
   15374:	cmp	r2, #0
   15378:	mla	r0, r4, r5, r0
   1537c:	ldr	r4, [sp, #24]
   15380:	umull	r1, r7, r6, r5
   15384:	mvnne	r0, #0
   15388:	subs	r3, lr, r6
   1538c:	mov	r3, ip
   15390:	str	r3, [sp]
   15394:	mla	r7, r6, sl, r7
   15398:	mla	r7, r0, r5, r7
   1539c:	sbcs	r0, ip, r0
   153a0:	mov	r0, #0
   153a4:	movwcc	r0, #1
   153a8:	cmp	r0, #0
   153ac:	str	r0, [sp, #8]
   153b0:	mvnne	r1, #0
   153b4:	mvnne	r7, #0
   153b8:	subs	r0, lr, r1
   153bc:	sbcs	r0, ip, r7
   153c0:	mov	ip, #0
   153c4:	umull	r6, r0, r1, r5
   153c8:	movwcc	ip, #1
   153cc:	cmp	ip, #0
   153d0:	mla	r1, r1, r4, r0
   153d4:	mov	r0, lr
   153d8:	mvnne	r6, #0
   153dc:	cmp	ip, #0
   153e0:	mla	r1, r7, r5, r1
   153e4:	umull	r2, sl, r6, r5
   153e8:	mvnne	r1, #0
   153ec:	mla	sl, r6, r4, sl
   153f0:	subs	r6, lr, r6
   153f4:	mov	lr, #0
   153f8:	mla	r7, r1, r5, sl
   153fc:	sbcs	r1, r3, r1
   15400:	ldr	r1, [sp, #24]
   15404:	movwcc	lr, #1
   15408:	cmp	lr, #0
   1540c:	mvnne	r2, #0
   15410:	mvnne	r7, #0
   15414:	subs	r6, r0, r2
   15418:	umull	r0, sl, r2, r5
   1541c:	sbcs	r6, r3, r7
   15420:	mov	r3, #0
   15424:	movwcc	r3, #1
   15428:	mla	r2, r2, r1, sl
   1542c:	cmp	r3, #0
   15430:	mla	r2, r7, r5, r2
   15434:	mvnne	r0, #0
   15438:	cmp	r3, #0
   1543c:	umull	r6, r4, r0, r5
   15440:	mvnne	r2, #0
   15444:	mla	r4, r0, r1, r4
   15448:	ldr	r1, [sp, #4]
   1544c:	mla	r7, r2, r5, r4
   15450:	ldr	r5, [sp, #16]
   15454:	subs	r0, r1, r0
   15458:	ldr	r0, [sp]
   1545c:	sbcs	r0, r0, r2
   15460:	mov	r0, #0
   15464:	movwcc	r0, #1
   15468:	cmp	r0, #0
   1546c:	mov	r2, r0
   15470:	ldr	r0, [sp, #20]
   15474:	mvnne	r7, #0
   15478:	mvnne	r6, #0
   1547c:	orr	r0, r0, r5
   15480:	ldr	r5, [sp, #12]
   15484:	orr	r0, r0, r5
   15488:	ldr	r5, [sp, #8]
   1548c:	orr	r0, r0, r5
   15490:	orr	r0, r0, ip
   15494:	orr	r0, r0, lr
   15498:	orr	r0, r0, r3
   1549c:	orr	r0, r0, r2
   154a0:	and	r3, r0, #1
   154a4:	b	15500 <__assert_fail@plt+0x4474>
   154a8:	mov	r1, #0
   154ac:	lsl	r2, r7, #9
   154b0:	lsl	r0, r6, #9
   154b4:	lsr	r3, r7, #23
   154b8:	cmp	r1, r7, lsr #23
   154bc:	orr	r2, r2, r6, lsr #23
   154c0:	mvnne	r0, #0
   154c4:	movwne	r3, #1
   154c8:	cmp	r1, r7, lsr #23
   154cc:	mvnne	r2, #0
   154d0:	mov	r6, r0
   154d4:	mov	r7, r2
   154d8:	b	15500 <__assert_fail@plt+0x4474>
   154dc:	lsl	r1, r7, #1
   154e0:	cmp	r7, #0
   154e4:	lsl	r0, r6, #1
   154e8:	lsr	r3, r7, #31
   154ec:	orr	r1, r1, r6, lsr #31
   154f0:	mvnmi	r0, #0
   154f4:	mvnmi	r1, #0
   154f8:	mov	r6, r0
   154fc:	mov	r7, r1
   15500:	ldr	r1, [sp, #32]
   15504:	ldr	r2, [sp, #28]
   15508:	orr	r8, r3, r8
   1550c:	add	r0, r1, r2
   15510:	str	r0, [r9]
   15514:	ldrb	r0, [r1, r2]
   15518:	cmp	r0, #0
   1551c:	orrne	r8, r8, #2
   15520:	ldr	r0, [sp, #36]	; 0x24
   15524:	strd	r6, [r0]
   15528:	mov	r0, r8
   1552c:	sub	sp, fp, #28
   15530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15534:	movw	r0, #25445	; 0x6365
   15538:	movw	r1, #25483	; 0x638b
   1553c:	movw	r3, #25499	; 0x639b
   15540:	mov	r2, #85	; 0x55
   15544:	movt	r0, #1
   15548:	movt	r1, #1
   1554c:	movt	r3, #1
   15550:	bl	1108c <__assert_fail@plt>
   15554:	clz	r2, r1
   15558:	clz	r3, r0
   1555c:	lsr	r2, r2, #5
   15560:	lsr	r3, r3, #5
   15564:	orrs	r2, r3, r2
   15568:	movwne	r1, #1
   1556c:	movwne	r0, #1
   15570:	cmp	r1, #0
   15574:	beq	155a4 <__assert_fail@plt+0x4518>
   15578:	mvn	r2, #-2147483648	; 0x80000000
   1557c:	udiv	r2, r2, r1
   15580:	cmp	r2, r0
   15584:	bcs	155a4 <__assert_fail@plt+0x4518>
   15588:	push	{fp, lr}
   1558c:	mov	fp, sp
   15590:	bl	10fb4 <__errno_location@plt>
   15594:	mov	r1, #12
   15598:	str	r1, [r0]
   1559c:	mov	r0, #0
   155a0:	pop	{fp, pc}
   155a4:	b	10e28 <calloc@plt>
   155a8:	cmp	r0, #0
   155ac:	movweq	r0, #1
   155b0:	cmn	r0, #1
   155b4:	ble	155bc <__assert_fail@plt+0x4530>
   155b8:	b	10f3c <malloc@plt>
   155bc:	push	{fp, lr}
   155c0:	mov	fp, sp
   155c4:	bl	10fb4 <__errno_location@plt>
   155c8:	mov	r1, #12
   155cc:	str	r1, [r0]
   155d0:	mov	r0, #0
   155d4:	pop	{fp, pc}
   155d8:	push	{fp, lr}
   155dc:	mov	fp, sp
   155e0:	cmp	r0, #0
   155e4:	beq	15600 <__assert_fail@plt+0x4574>
   155e8:	cmp	r1, #0
   155ec:	beq	1560c <__assert_fail@plt+0x4580>
   155f0:	cmn	r1, #1
   155f4:	ble	15618 <__assert_fail@plt+0x458c>
   155f8:	pop	{fp, lr}
   155fc:	b	10ed0 <realloc@plt>
   15600:	mov	r0, r1
   15604:	pop	{fp, lr}
   15608:	b	155a8 <__assert_fail@plt+0x451c>
   1560c:	bl	156b0 <__assert_fail@plt+0x4624>
   15610:	mov	r0, #0
   15614:	pop	{fp, pc}
   15618:	bl	10fb4 <__errno_location@plt>
   1561c:	mov	r1, #12
   15620:	str	r1, [r0]
   15624:	mov	r0, #0
   15628:	pop	{fp, pc}
   1562c:	push	{r4, r5, r6, sl, fp, lr}
   15630:	add	fp, sp, #16
   15634:	mov	r4, r0
   15638:	bl	10f18 <__fpending@plt>
   1563c:	ldr	r6, [r4]
   15640:	mov	r5, r0
   15644:	mov	r0, r4
   15648:	bl	11c40 <__assert_fail@plt+0xbb4>
   1564c:	tst	r6, #32
   15650:	bne	15688 <__assert_fail@plt+0x45fc>
   15654:	cmp	r0, #0
   15658:	mov	r4, r0
   1565c:	mvnne	r4, #0
   15660:	cmp	r5, #0
   15664:	bne	15694 <__assert_fail@plt+0x4608>
   15668:	cmp	r0, #0
   1566c:	beq	15694 <__assert_fail@plt+0x4608>
   15670:	bl	10fb4 <__errno_location@plt>
   15674:	ldr	r0, [r0]
   15678:	subs	r4, r0, #9
   1567c:	mvnne	r4, #0
   15680:	mov	r0, r4
   15684:	pop	{r4, r5, r6, sl, fp, pc}
   15688:	mvn	r4, #0
   1568c:	cmp	r0, #0
   15690:	beq	1569c <__assert_fail@plt+0x4610>
   15694:	mov	r0, r4
   15698:	pop	{r4, r5, r6, sl, fp, pc}
   1569c:	bl	10fb4 <__errno_location@plt>
   156a0:	mov	r1, #0
   156a4:	str	r1, [r0]
   156a8:	mov	r0, r4
   156ac:	pop	{r4, r5, r6, sl, fp, pc}
   156b0:	push	{r4, r5, r6, sl, fp, lr}
   156b4:	add	fp, sp, #16
   156b8:	mov	r4, r0
   156bc:	bl	10fb4 <__errno_location@plt>
   156c0:	ldr	r6, [r0]
   156c4:	mov	r5, r0
   156c8:	mov	r0, r4
   156cc:	bl	10e7c <free@plt>
   156d0:	str	r6, [r5]
   156d4:	pop	{r4, r5, r6, sl, fp, pc}
   156d8:	push	{fp, lr}
   156dc:	mov	fp, sp
   156e0:	mov	r0, #14
   156e4:	bl	11044 <nl_langinfo@plt>
   156e8:	movw	r1, #24132	; 0x5e44
   156ec:	cmp	r0, #0
   156f0:	movt	r1, #1
   156f4:	movne	r1, r0
   156f8:	movw	r0, #25578	; 0x63ea
   156fc:	ldrb	r2, [r1]
   15700:	movt	r0, #1
   15704:	cmp	r2, #0
   15708:	movne	r0, r1
   1570c:	pop	{fp, pc}
   15710:	push	{r4, r5, r6, r7, fp, lr}
   15714:	add	fp, sp, #16
   15718:	sub	sp, sp, #8
   1571c:	cmp	r0, #0
   15720:	add	r5, sp, #4
   15724:	mov	r7, r2
   15728:	mov	r4, r1
   1572c:	movne	r5, r0
   15730:	mov	r0, r5
   15734:	bl	10f24 <mbrtowc@plt>
   15738:	mov	r6, r0
   1573c:	cmp	r7, #0
   15740:	beq	15768 <__assert_fail@plt+0x46dc>
   15744:	cmn	r6, #2
   15748:	bcc	15768 <__assert_fail@plt+0x46dc>
   1574c:	mov	r0, #0
   15750:	bl	157b0 <__assert_fail@plt+0x4724>
   15754:	cmp	r0, #0
   15758:	bne	15768 <__assert_fail@plt+0x46dc>
   1575c:	ldrb	r0, [r4]
   15760:	mov	r6, #1
   15764:	str	r0, [r5]
   15768:	mov	r0, r6
   1576c:	sub	sp, fp, #16
   15770:	pop	{r4, r5, r6, r7, fp, pc}
   15774:	cmp	r2, #0
   15778:	beq	157a8 <__assert_fail@plt+0x471c>
   1577c:	mvn	r3, #0
   15780:	udiv	r3, r3, r2
   15784:	cmp	r3, r1
   15788:	bcs	157a8 <__assert_fail@plt+0x471c>
   1578c:	push	{fp, lr}
   15790:	mov	fp, sp
   15794:	bl	10fb4 <__errno_location@plt>
   15798:	mov	r1, #12
   1579c:	str	r1, [r0]
   157a0:	mov	r0, #0
   157a4:	pop	{fp, pc}
   157a8:	mul	r1, r2, r1
   157ac:	b	155d8 <__assert_fail@plt+0x454c>
   157b0:	push	{r4, sl, fp, lr}
   157b4:	add	fp, sp, #8
   157b8:	sub	sp, sp, #264	; 0x108
   157bc:	add	r1, sp, #7
   157c0:	movw	r2, #257	; 0x101
   157c4:	bl	1581c <__assert_fail@plt+0x4790>
   157c8:	mov	r4, #0
   157cc:	cmp	r0, #0
   157d0:	bne	15810 <__assert_fail@plt+0x4784>
   157d4:	movw	r1, #25584	; 0x63f0
   157d8:	add	r0, sp, #7
   157dc:	mov	r2, #2
   157e0:	movt	r1, #1
   157e4:	bl	10f90 <bcmp@plt>
   157e8:	cmp	r0, #0
   157ec:	beq	15810 <__assert_fail@plt+0x4784>
   157f0:	movw	r1, #25586	; 0x63f2
   157f4:	add	r0, sp, #7
   157f8:	mov	r2, #6
   157fc:	movt	r1, #1
   15800:	bl	10f90 <bcmp@plt>
   15804:	cmp	r0, #0
   15808:	mov	r4, r0
   1580c:	movwne	r4, #1
   15810:	mov	r0, r4
   15814:	sub	sp, fp, #8
   15818:	pop	{r4, sl, fp, pc}
   1581c:	push	{r4, r5, r6, r7, fp, lr}
   15820:	add	fp, sp, #16
   15824:	mov	r4, r1
   15828:	mov	r1, #0
   1582c:	mov	r6, r2
   15830:	bl	1102c <setlocale@plt>
   15834:	cmp	r0, #0
   15838:	beq	15868 <__assert_fail@plt+0x47dc>
   1583c:	mov	r7, r0
   15840:	bl	10f9c <strlen@plt>
   15844:	cmp	r0, r6
   15848:	bcs	15884 <__assert_fail@plt+0x47f8>
   1584c:	add	r2, r0, #1
   15850:	mov	r0, r4
   15854:	mov	r1, r7
   15858:	bl	10e94 <memcpy@plt>
   1585c:	mov	r5, #0
   15860:	mov	r0, r5
   15864:	pop	{r4, r5, r6, r7, fp, pc}
   15868:	mov	r5, #22
   1586c:	cmp	r6, #0
   15870:	beq	158ac <__assert_fail@plt+0x4820>
   15874:	mov	r0, #0
   15878:	strb	r0, [r4]
   1587c:	mov	r0, r5
   15880:	pop	{r4, r5, r6, r7, fp, pc}
   15884:	mov	r5, #34	; 0x22
   15888:	cmp	r6, #0
   1588c:	beq	158ac <__assert_fail@plt+0x4820>
   15890:	sub	r6, r6, #1
   15894:	mov	r0, r4
   15898:	mov	r1, r7
   1589c:	mov	r2, r6
   158a0:	bl	10e94 <memcpy@plt>
   158a4:	mov	r0, #0
   158a8:	strb	r0, [r4, r6]
   158ac:	mov	r0, r5
   158b0:	pop	{r4, r5, r6, r7, fp, pc}
   158b4:	mov	r1, #0
   158b8:	b	1102c <setlocale@plt>
   158bc:	cmp	r3, #0
   158c0:	cmpeq	r2, #0
   158c4:	bne	158dc <__assert_fail@plt+0x4850>
   158c8:	cmp	r1, #0
   158cc:	cmpeq	r0, #0
   158d0:	mvnne	r1, #0
   158d4:	mvnne	r0, #0
   158d8:	b	158f8 <__assert_fail@plt+0x486c>
   158dc:	sub	sp, sp, #8
   158e0:	push	{sp, lr}
   158e4:	bl	15908 <__assert_fail@plt+0x487c>
   158e8:	ldr	lr, [sp, #4]
   158ec:	add	sp, sp, #8
   158f0:	pop	{r2, r3}
   158f4:	bx	lr
   158f8:	push	{r1, lr}
   158fc:	mov	r0, #8
   15900:	bl	10e40 <raise@plt>
   15904:	pop	{r1, pc}
   15908:	cmp	r1, r3
   1590c:	cmpeq	r0, r2
   15910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15914:	mov	r4, r0
   15918:	movcc	r0, #0
   1591c:	mov	r5, r1
   15920:	ldr	lr, [sp, #36]	; 0x24
   15924:	movcc	r1, r0
   15928:	bcc	15a24 <__assert_fail@plt+0x4998>
   1592c:	cmp	r3, #0
   15930:	clzeq	ip, r2
   15934:	clzne	ip, r3
   15938:	addeq	ip, ip, #32
   1593c:	cmp	r5, #0
   15940:	clzeq	r1, r4
   15944:	addeq	r1, r1, #32
   15948:	clzne	r1, r5
   1594c:	sub	ip, ip, r1
   15950:	sub	sl, ip, #32
   15954:	lsl	r9, r3, ip
   15958:	rsb	fp, ip, #32
   1595c:	orr	r9, r9, r2, lsl sl
   15960:	orr	r9, r9, r2, lsr fp
   15964:	lsl	r8, r2, ip
   15968:	cmp	r5, r9
   1596c:	cmpeq	r4, r8
   15970:	movcc	r0, #0
   15974:	movcc	r1, r0
   15978:	bcc	15994 <__assert_fail@plt+0x4908>
   1597c:	mov	r0, #1
   15980:	subs	r4, r4, r8
   15984:	lsl	r1, r0, sl
   15988:	orr	r1, r1, r0, lsr fp
   1598c:	lsl	r0, r0, ip
   15990:	sbc	r5, r5, r9
   15994:	cmp	ip, #0
   15998:	beq	15a24 <__assert_fail@plt+0x4998>
   1599c:	lsr	r6, r8, #1
   159a0:	orr	r6, r6, r9, lsl #31
   159a4:	lsr	r7, r9, #1
   159a8:	mov	r2, ip
   159ac:	b	159d0 <__assert_fail@plt+0x4944>
   159b0:	subs	r3, r4, r6
   159b4:	sbc	r8, r5, r7
   159b8:	adds	r3, r3, r3
   159bc:	adc	r8, r8, r8
   159c0:	adds	r4, r3, #1
   159c4:	adc	r5, r8, #0
   159c8:	subs	r2, r2, #1
   159cc:	beq	159ec <__assert_fail@plt+0x4960>
   159d0:	cmp	r5, r7
   159d4:	cmpeq	r4, r6
   159d8:	bcs	159b0 <__assert_fail@plt+0x4924>
   159dc:	adds	r4, r4, r4
   159e0:	adc	r5, r5, r5
   159e4:	subs	r2, r2, #1
   159e8:	bne	159d0 <__assert_fail@plt+0x4944>
   159ec:	lsr	r3, r4, ip
   159f0:	orr	r3, r3, r5, lsl fp
   159f4:	lsr	r2, r5, ip
   159f8:	orr	r3, r3, r5, lsr sl
   159fc:	adds	r0, r0, r4
   15a00:	mov	r4, r3
   15a04:	lsl	r3, r2, ip
   15a08:	orr	r3, r3, r4, lsl sl
   15a0c:	lsl	ip, r4, ip
   15a10:	orr	r3, r3, r4, lsr fp
   15a14:	adc	r1, r1, r5
   15a18:	subs	r0, r0, ip
   15a1c:	mov	r5, r2
   15a20:	sbc	r1, r1, r3
   15a24:	cmp	lr, #0
   15a28:	strdne	r4, [lr]
   15a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a34:	mov	r7, r0
   15a38:	ldr	r6, [pc, #72]	; 15a88 <__assert_fail@plt+0x49fc>
   15a3c:	ldr	r5, [pc, #72]	; 15a8c <__assert_fail@plt+0x4a00>
   15a40:	add	r6, pc, r6
   15a44:	add	r5, pc, r5
   15a48:	sub	r6, r6, r5
   15a4c:	mov	r8, r1
   15a50:	mov	r9, r2
   15a54:	bl	10e08 <calloc@plt-0x20>
   15a58:	asrs	r6, r6, #2
   15a5c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a60:	mov	r4, #0
   15a64:	add	r4, r4, #1
   15a68:	ldr	r3, [r5], #4
   15a6c:	mov	r2, r9
   15a70:	mov	r1, r8
   15a74:	mov	r0, r7
   15a78:	blx	r3
   15a7c:	cmp	r6, r4
   15a80:	bne	15a64 <__assert_fail@plt+0x49d8>
   15a84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a88:	andeq	r1, r1, r4, asr #9
   15a8c:			; <UNDEFINED> instruction: 0x000114bc
   15a90:	bx	lr
   15a94:	ldr	r3, [pc, #12]	; 15aa8 <__assert_fail@plt+0x4a1c>
   15a98:	mov	r1, #0
   15a9c:	add	r3, pc, r3
   15aa0:	ldr	r2, [r3]
   15aa4:	b	10fc0 <__cxa_atexit@plt>
   15aa8:	andeq	r1, r1, r0, asr #12

Disassembly of section .fini:

00015aac <.fini>:
   15aac:	push	{r3, lr}
   15ab0:	pop	{r3, pc}
