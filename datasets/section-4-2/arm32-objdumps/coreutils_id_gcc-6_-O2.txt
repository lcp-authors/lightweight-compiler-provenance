
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

00010e80 <.init>:
   10e80:	push	{r3, lr}
   10e84:	bl	11798 <__assert_fail@plt+0x61c>
   10e88:	pop	{r3, pc}

Disassembly of section .plt:

00010e8c <calloc@plt-0x14>:
   10e8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e90:	ldr	lr, [pc, #4]	; 10e9c <calloc@plt-0x4>
   10e94:	add	lr, pc, lr
   10e98:	ldr	pc, [lr, #8]!
   10e9c:	andeq	r7, r1, r4, ror #2

00010ea0 <calloc@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #356]!	; 0x164

00010eac <endgrent@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #348]!	; 0x15c

00010eb8 <fputs_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #340]!	; 0x154

00010ec4 <raise@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #332]!	; 0x14c

00010ed0 <getpwnam@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #324]!	; 0x144

00010edc <is_selinux_enabled@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #316]!	; 0x13c

00010ee8 <strcmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #308]!	; 0x134

00010ef4 <getpwuid@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #300]!	; 0x12c

00010f00 <fflush@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #292]!	; 0x124

00010f0c <getuid@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #284]!	; 0x11c

00010f18 <free@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #276]!	; 0x114

00010f24 <_exit@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #268]!	; 0x10c

00010f30 <memcpy@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #260]!	; 0x104

00010f3c <mbsinit@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #252]!	; 0xfc

00010f48 <memcmp@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #244]!	; 0xf4

00010f54 <fputc_unlocked@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #236]!	; 0xec

00010f60 <dcgettext@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #228]!	; 0xe4

00010f6c <realloc@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #220]!	; 0xdc

00010f78 <textdomain@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #212]!	; 0xd4

00010f84 <geteuid@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #204]!	; 0xcc

00010f90 <iswprint@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #196]!	; 0xc4

00010f9c <getegid@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #188]!	; 0xbc

00010fa8 <fwrite@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #180]!	; 0xb4

00010fb4 <lseek64@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #172]!	; 0xac

00010fc0 <__ctype_get_mb_cur_max@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #164]!	; 0xa4

00010fcc <getcon@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #156]!	; 0x9c

00010fd8 <__fpending@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #148]!	; 0x94

00010fe4 <mbrtowc@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #140]!	; 0x8c

00010ff0 <error@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #132]!	; 0x84

00010ffc <getenv@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #124]!	; 0x7c

00011008 <malloc@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #116]!	; 0x74

00011014 <__libc_start_main@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #108]!	; 0x6c

00011020 <__freading@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #100]!	; 0x64

0001102c <__gmon_start__@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #92]!	; 0x5c

00011038 <getopt_long@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #84]!	; 0x54

00011044 <__ctype_b_loc@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #76]!	; 0x4c

00011050 <exit@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #68]!	; 0x44

0001105c <strtoul@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #60]!	; 0x3c

00011068 <strlen@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #52]!	; 0x34

00011074 <strchr@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #44]!	; 0x2c

00011080 <__errno_location@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #36]!	; 0x24

0001108c <__cxa_atexit@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #28]!

00011098 <getgid@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #20]!

000110a4 <getgrouplist@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #12]!

000110b0 <memset@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #4]!

000110bc <__printf_chk@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4092]!	; 0xffc

000110c8 <fileno@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4084]!	; 0xff4

000110d4 <__fprintf_chk@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #4076]!	; 0xfec

000110e0 <fclose@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110ec <fseeko64@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f8 <__overflow@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4052]!	; 0xfd4

00011104 <setlocale@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011110 <endpwent@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #4036]!	; 0xfc4

0001111c <strrchr@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #4028]!	; 0xfbc

00011128 <nl_langinfo@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #4020]!	; 0xfb4

00011134 <getgroups@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #4012]!	; 0xfac

00011140 <bindtextdomain@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #4004]!	; 0xfa4

0001114c <strncmp@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3996]!	; 0xf9c

00011158 <abort@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3988]!	; 0xf94

00011164 <getgrgid@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3980]!	; 0xf8c

00011170 <getgrnam@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3972]!	; 0xf84

0001117c <__assert_fail@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3964]!	; 0xf7c

Disassembly of section .text:

00011188 <.text>:
   11188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1118c:	sub	sp, sp, #20
   11190:	mov	r4, r1
   11194:	mov	r5, r0
   11198:	bl	10edc <is_selinux_enabled@plt>
   1119c:	ldr	r8, [pc, #1348]	; 116e8 <__assert_fail@plt+0x56c>
   111a0:	ldr	r7, [pc, #1348]	; 116ec <__assert_fail@plt+0x570>
   111a4:	ldr	fp, [pc, #1348]	; 116f0 <__assert_fail@plt+0x574>
   111a8:	mov	r6, #0
   111ac:	mov	r9, #1
   111b0:	mov	sl, r0
   111b4:	ldr	r0, [r4]
   111b8:	bl	124f4 <__assert_fail@plt+0x1378>
   111bc:	ldr	r1, [pc, #1328]	; 116f4 <__assert_fail@plt+0x578>
   111c0:	mov	r0, #6
   111c4:	bl	11104 <setlocale@plt>
   111c8:	ldr	r1, [pc, #1320]	; 116f8 <__assert_fail@plt+0x57c>
   111cc:	ldr	r0, [pc, #1320]	; 116fc <__assert_fail@plt+0x580>
   111d0:	bl	11140 <bindtextdomain@plt>
   111d4:	ldr	r0, [pc, #1312]	; 116fc <__assert_fail@plt+0x580>
   111d8:	bl	10f78 <textdomain@plt>
   111dc:	ldr	r0, [pc, #1308]	; 11700 <__assert_fail@plt+0x584>
   111e0:	bl	16424 <__assert_fail@plt+0x52a8>
   111e4:	str	r6, [sp]
   111e8:	mov	r3, r8
   111ec:	mov	r2, r7
   111f0:	mov	r1, r4
   111f4:	mov	r0, r5
   111f8:	bl	11038 <getopt_long@plt>
   111fc:	cmn	r0, #1
   11200:	beq	112e8 <__assert_fail@plt+0x16c>
   11204:	cmp	r0, #97	; 0x61
   11208:	beq	111e4 <__assert_fail@plt+0x68>
   1120c:	ble	11234 <__assert_fail@plt+0xb8>
   11210:	cmp	r0, #114	; 0x72
   11214:	beq	112e0 <__assert_fail@plt+0x164>
   11218:	bgt	11260 <__assert_fail@plt+0xe4>
   1121c:	cmp	r0, #103	; 0x67
   11220:	beq	11288 <__assert_fail@plt+0x10c>
   11224:	cmp	r0, #110	; 0x6e
   11228:	bne	112d0 <__assert_fail@plt+0x154>
   1122c:	strb	r9, [fp, #12]
   11230:	b	111e4 <__assert_fail@plt+0x68>
   11234:	cmn	r0, #2
   11238:	beq	112d8 <__assert_fail@plt+0x15c>
   1123c:	ble	11290 <__assert_fail@plt+0x114>
   11240:	cmp	r0, #71	; 0x47
   11244:	beq	11278 <__assert_fail@plt+0xfc>
   11248:	cmp	r0, #90	; 0x5a
   1124c:	bne	112d0 <__assert_fail@plt+0x154>
   11250:	cmp	sl, #0
   11254:	ble	116bc <__assert_fail@plt+0x540>
   11258:	strb	r9, [fp, #50]	; 0x32
   1125c:	b	111e4 <__assert_fail@plt+0x68>
   11260:	cmp	r0, #117	; 0x75
   11264:	beq	11280 <__assert_fail@plt+0x104>
   11268:	cmp	r0, #122	; 0x7a
   1126c:	bne	112d0 <__assert_fail@plt+0x154>
   11270:	strb	r9, [fp, #49]	; 0x31
   11274:	b	111e4 <__assert_fail@plt+0x68>
   11278:	strb	r9, [fp, #48]	; 0x30
   1127c:	b	111e4 <__assert_fail@plt+0x68>
   11280:	strb	r9, [fp]
   11284:	b	111e4 <__assert_fail@plt+0x68>
   11288:	strb	r9, [fp, #37]	; 0x25
   1128c:	b	111e4 <__assert_fail@plt+0x68>
   11290:	cmn	r0, #3
   11294:	bne	112d0 <__assert_fail@plt+0x154>
   11298:	ldr	r3, [pc, #1124]	; 11704 <__assert_fail@plt+0x588>
   1129c:	ldr	r0, [pc, #1124]	; 11708 <__assert_fail@plt+0x58c>
   112a0:	ldr	r1, [pc, #1124]	; 1170c <__assert_fail@plt+0x590>
   112a4:	ldr	r2, [pc, #1124]	; 11710 <__assert_fail@plt+0x594>
   112a8:	str	r6, [sp, #8]
   112ac:	ldr	r0, [r0]
   112b0:	ldr	r3, [r3]
   112b4:	str	r1, [sp, #4]
   112b8:	str	r2, [sp]
   112bc:	ldr	r1, [pc, #1104]	; 11714 <__assert_fail@plt+0x598>
   112c0:	ldr	r2, [pc, #1104]	; 11718 <__assert_fail@plt+0x59c>
   112c4:	bl	14ba0 <__assert_fail@plt+0x3a24>
   112c8:	mov	r0, #0
   112cc:	bl	11050 <exit@plt>
   112d0:	mov	r0, #1
   112d4:	bl	11ddc <__assert_fail@plt+0xc60>
   112d8:	mov	r0, #0
   112dc:	bl	11ddc <__assert_fail@plt+0xc60>
   112e0:	strb	r9, [fp, #1]
   112e4:	b	111e4 <__assert_fail@plt+0x68>
   112e8:	ldr	r6, [pc, #1068]	; 1171c <__assert_fail@plt+0x5a0>
   112ec:	ldr	r9, [r6]
   112f0:	subs	r0, r5, r9
   112f4:	ldr	r5, [pc, #1012]	; 116f0 <__assert_fail@plt+0x574>
   112f8:	beq	11328 <__assert_fail@plt+0x1ac>
   112fc:	ldrb	r3, [r5, #50]	; 0x32
   11300:	cmp	r3, #0
   11304:	beq	11328 <__assert_fail@plt+0x1ac>
   11308:	ldr	r1, [pc, #1040]	; 11720 <__assert_fail@plt+0x5a4>
   1130c:	mov	r2, #5
   11310:	mov	r0, #0
   11314:	bl	10f60 <dcgettext@plt>
   11318:	mov	r1, #0
   1131c:	mov	r2, r0
   11320:	mov	r0, #1
   11324:	bl	10ff0 <error@plt>
   11328:	ldrb	r1, [r5]
   1132c:	ldrb	lr, [r5, #37]	; 0x25
   11330:	ldrb	r2, [r5, #48]	; 0x30
   11334:	ldrb	ip, [r5, #50]	; 0x32
   11338:	add	r3, r1, lr
   1133c:	add	r3, r3, r2
   11340:	add	r3, r3, ip
   11344:	cmp	r3, #1
   11348:	movgt	r2, #5
   1134c:	ldrgt	r1, [pc, #976]	; 11724 <__assert_fail@plt+0x5a8>
   11350:	bgt	11310 <__assert_fail@plt+0x194>
   11354:	orr	r1, r1, lr
   11358:	orr	r2, r2, r1
   1135c:	orrs	r3, ip, r2
   11360:	bne	11424 <__assert_fail@plt+0x2a8>
   11364:	ldrb	r3, [r5, #1]
   11368:	cmp	r3, #0
   1136c:	bne	116b0 <__assert_fail@plt+0x534>
   11370:	ldrb	r7, [r5, #12]
   11374:	cmp	r7, #0
   11378:	bne	116b0 <__assert_fail@plt+0x534>
   1137c:	ldrb	r3, [r5, #49]	; 0x31
   11380:	cmp	r3, #0
   11384:	bne	116a4 <__assert_fail@plt+0x528>
   11388:	mov	r3, #1
   1138c:	cmp	r0, #0
   11390:	bne	1142c <__assert_fail@plt+0x2b0>
   11394:	cmp	ip, #0
   11398:	beq	11514 <__assert_fail@plt+0x398>
   1139c:	cmp	sl, #0
   113a0:	ble	113c8 <__assert_fail@plt+0x24c>
   113a4:	ldr	r0, [pc, #892]	; 11728 <__assert_fail@plt+0x5ac>
   113a8:	bl	10fcc <getcon@plt>
   113ac:	cmp	r0, #0
   113b0:	beq	113c8 <__assert_fail@plt+0x24c>
   113b4:	ldrb	r3, [r5, #50]	; 0x32
   113b8:	cmp	r3, #0
   113bc:	movne	r2, #5
   113c0:	ldrne	r1, [pc, #868]	; 1172c <__assert_fail@plt+0x5b0>
   113c4:	bne	11310 <__assert_fail@plt+0x194>
   113c8:	ldrb	r4, [r5]
   113cc:	cmp	r4, #0
   113d0:	beq	11530 <__assert_fail@plt+0x3b4>
   113d4:	ldrb	r6, [r5, #1]
   113d8:	cmp	r6, #0
   113dc:	bne	11594 <__assert_fail@plt+0x418>
   113e0:	bl	11080 <__errno_location@plt>
   113e4:	str	r6, [r0]
   113e8:	mov	r7, r0
   113ec:	bl	10f84 <geteuid@plt>
   113f0:	cmn	r0, #1
   113f4:	str	r0, [r5, #8]
   113f8:	beq	1167c <__assert_fail@plt+0x500>
   113fc:	ldrb	r3, [r5, #1]
   11400:	cmp	r3, #0
   11404:	bne	11594 <__assert_fail@plt+0x418>
   11408:	mov	r0, #0
   1140c:	bl	11884 <__assert_fail@plt+0x708>
   11410:	ldr	sl, [pc, #792]	; 11730 <__assert_fail@plt+0x5b4>
   11414:	ldrb	r0, [sl]
   11418:	eor	r0, r0, #1
   1141c:	add	sp, sp, #20
   11420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11424:	mov	r3, #0
   11428:	b	1138c <__assert_fail@plt+0x210>
   1142c:	cmp	r0, #1
   11430:	movls	r3, #0
   11434:	movhi	r3, #1
   11438:	add	r9, r9, r0
   1143c:	strb	r3, [r5, #77]	; 0x4d
   11440:	ldr	sl, [pc, #744]	; 11730 <__assert_fail@plt+0x5b4>
   11444:	mov	r7, #0
   11448:	b	11498 <__assert_fail@plt+0x31c>
   1144c:	bl	11080 <__errno_location@plt>
   11450:	mov	r2, #5
   11454:	ldr	r1, [pc, #728]	; 11734 <__assert_fail@plt+0x5b8>
   11458:	ldr	r8, [r0]
   1145c:	mov	r0, r7
   11460:	bl	10f60 <dcgettext@plt>
   11464:	ldr	r3, [r6]
   11468:	mov	fp, r0
   1146c:	ldr	r0, [r4, r3, lsl #2]
   11470:	bl	143b4 <__assert_fail@plt+0x3238>
   11474:	mov	r2, fp
   11478:	mov	r1, r8
   1147c:	mov	r3, r0
   11480:	mov	r0, r7
   11484:	bl	10ff0 <error@plt>
   11488:	strb	r7, [sl]
   1148c:	ldr	r3, [r6]
   11490:	add	r3, r3, #1
   11494:	str	r3, [r6]
   11498:	ldr	r3, [r6]
   1149c:	cmp	r9, r3
   114a0:	bls	11414 <__assert_fail@plt+0x298>
   114a4:	ldr	r0, [r4, r3, lsl #2]
   114a8:	ldrb	r3, [r0]
   114ac:	cmp	r3, #0
   114b0:	beq	1144c <__assert_fail@plt+0x2d0>
   114b4:	mov	r3, #0
   114b8:	str	r7, [sp]
   114bc:	mov	r2, r3
   114c0:	ldr	r1, [pc, #624]	; 11738 <__assert_fail@plt+0x5bc>
   114c4:	bl	146bc <__assert_fail@plt+0x3540>
   114c8:	cmp	r0, #0
   114cc:	bne	1144c <__assert_fail@plt+0x2d0>
   114d0:	ldr	r0, [r5, #8]
   114d4:	bl	10ef4 <getpwuid@plt>
   114d8:	subs	r8, r0, #0
   114dc:	beq	1144c <__assert_fail@plt+0x2d0>
   114e0:	ldr	r0, [r8]
   114e4:	bl	151c8 <__assert_fail@plt+0x404c>
   114e8:	ldr	r1, [r8, #8]
   114ec:	ldr	r3, [r8, #12]
   114f0:	str	r1, [r5, #8]
   114f4:	str	r1, [r5, #4]
   114f8:	str	r3, [r5, #44]	; 0x2c
   114fc:	str	r3, [r5, #40]	; 0x28
   11500:	mov	fp, r0
   11504:	bl	11884 <__assert_fail@plt+0x708>
   11508:	mov	r0, fp
   1150c:	bl	12434 <__assert_fail@plt+0x12b8>
   11510:	b	1148c <__assert_fail@plt+0x310>
   11514:	cmp	r3, #0
   11518:	beq	113c8 <__assert_fail@plt+0x24c>
   1151c:	ldr	r0, [pc, #536]	; 1173c <__assert_fail@plt+0x5c0>
   11520:	bl	10ffc <getenv@plt>
   11524:	cmp	r0, #0
   11528:	bne	113c8 <__assert_fail@plt+0x24c>
   1152c:	b	1139c <__assert_fail@plt+0x220>
   11530:	ldrb	r3, [r5, #37]	; 0x25
   11534:	cmp	r3, #0
   11538:	bne	11570 <__assert_fail@plt+0x3f4>
   1153c:	ldrb	r3, [r5, #48]	; 0x30
   11540:	cmp	r3, #0
   11544:	bne	11570 <__assert_fail@plt+0x3f4>
   11548:	ldrb	r3, [r5, #50]	; 0x32
   1154c:	cmp	r3, #0
   11550:	bne	11570 <__assert_fail@plt+0x3f4>
   11554:	bl	11080 <__errno_location@plt>
   11558:	str	r4, [r0]
   1155c:	mov	r7, r0
   11560:	bl	10f84 <geteuid@plt>
   11564:	cmn	r0, #1
   11568:	str	r0, [r5, #8]
   1156c:	beq	1167c <__assert_fail@plt+0x500>
   11570:	ldrb	r3, [r5, #37]	; 0x25
   11574:	cmp	r3, #0
   11578:	bne	115bc <__assert_fail@plt+0x440>
   1157c:	ldrb	r3, [r5, #48]	; 0x30
   11580:	cmp	r3, #0
   11584:	bne	11594 <__assert_fail@plt+0x418>
   11588:	ldrb	r3, [r5, #50]	; 0x32
   1158c:	cmp	r3, #0
   11590:	bne	115bc <__assert_fail@plt+0x440>
   11594:	bl	11080 <__errno_location@plt>
   11598:	mov	r6, #0
   1159c:	str	r6, [r0]
   115a0:	mov	r7, r0
   115a4:	bl	10f0c <getuid@plt>
   115a8:	cmn	r0, #1
   115ac:	str	r0, [r5, #4]
   115b0:	beq	11650 <__assert_fail@plt+0x4d4>
   115b4:	cmp	r4, #0
   115b8:	bne	11408 <__assert_fail@plt+0x28c>
   115bc:	ldrb	r3, [r5, #37]	; 0x25
   115c0:	cmp	r3, #0
   115c4:	bne	115e0 <__assert_fail@plt+0x464>
   115c8:	ldrb	r3, [r5, #48]	; 0x30
   115cc:	cmp	r3, #0
   115d0:	bne	115e0 <__assert_fail@plt+0x464>
   115d4:	ldrb	r3, [r5, #50]	; 0x32
   115d8:	cmp	r3, #0
   115dc:	bne	11408 <__assert_fail@plt+0x28c>
   115e0:	bl	11080 <__errno_location@plt>
   115e4:	mov	r6, #0
   115e8:	str	r6, [r0]
   115ec:	mov	r4, r0
   115f0:	bl	10f9c <getegid@plt>
   115f4:	cmn	r0, #1
   115f8:	str	r0, [r5, #44]	; 0x2c
   115fc:	bne	1160c <__assert_fail@plt+0x490>
   11600:	ldr	r7, [r4]
   11604:	cmp	r7, r6
   11608:	bne	11694 <__assert_fail@plt+0x518>
   1160c:	mov	r6, #0
   11610:	str	r6, [r4]
   11614:	bl	11098 <getgid@plt>
   11618:	cmn	r0, #1
   1161c:	str	r0, [r5, #40]	; 0x28
   11620:	bne	11408 <__assert_fail@plt+0x28c>
   11624:	ldr	r4, [r4]
   11628:	cmp	r4, r6
   1162c:	beq	11408 <__assert_fail@plt+0x28c>
   11630:	mov	r2, #5
   11634:	ldr	r1, [pc, #260]	; 11740 <__assert_fail@plt+0x5c4>
   11638:	mov	r0, r6
   1163c:	bl	10f60 <dcgettext@plt>
   11640:	mov	r1, r4
   11644:	mov	r2, r0
   11648:	mov	r0, #1
   1164c:	bl	10ff0 <error@plt>
   11650:	ldr	r7, [r7]
   11654:	cmp	r7, #0
   11658:	movne	r0, r6
   1165c:	movne	r2, #5
   11660:	ldrne	r1, [pc, #220]	; 11744 <__assert_fail@plt+0x5c8>
   11664:	beq	115b4 <__assert_fail@plt+0x438>
   11668:	bl	10f60 <dcgettext@plt>
   1166c:	mov	r1, r7
   11670:	mov	r2, r0
   11674:	mov	r0, #1
   11678:	bl	10ff0 <error@plt>
   1167c:	ldr	r6, [r7]
   11680:	cmp	r6, #0
   11684:	bne	116c8 <__assert_fail@plt+0x54c>
   11688:	cmp	r4, #0
   1168c:	bne	113fc <__assert_fail@plt+0x280>
   11690:	b	11570 <__assert_fail@plt+0x3f4>
   11694:	mov	r0, r6
   11698:	mov	r2, #5
   1169c:	ldr	r1, [pc, #164]	; 11748 <__assert_fail@plt+0x5cc>
   116a0:	b	11668 <__assert_fail@plt+0x4ec>
   116a4:	mov	r2, #5
   116a8:	ldr	r1, [pc, #156]	; 1174c <__assert_fail@plt+0x5d0>
   116ac:	b	11310 <__assert_fail@plt+0x194>
   116b0:	mov	r2, #5
   116b4:	ldr	r1, [pc, #148]	; 11750 <__assert_fail@plt+0x5d4>
   116b8:	b	11310 <__assert_fail@plt+0x194>
   116bc:	mov	r2, #5
   116c0:	ldr	r1, [pc, #140]	; 11754 <__assert_fail@plt+0x5d8>
   116c4:	b	11310 <__assert_fail@plt+0x194>
   116c8:	mov	r2, #5
   116cc:	ldr	r1, [pc, #132]	; 11758 <__assert_fail@plt+0x5dc>
   116d0:	mov	r0, #0
   116d4:	bl	10f60 <dcgettext@plt>
   116d8:	mov	r1, r6
   116dc:	mov	r2, r0
   116e0:	mov	r0, #1
   116e4:	bl	10ff0 <error@plt>
   116e8:	andeq	r6, r1, r0, lsl #9
   116ec:			; <UNDEFINED> instruction: 0x00016ab0
   116f0:	andeq	r8, r2, ip, ror r1
   116f4:	andeq	r6, r1, r8, lsr #12
   116f8:	andeq	r6, r1, r0, asr #20
   116fc:	muleq	r1, r8, r9
   11700:	andeq	r2, r1, r0, asr r3
   11704:	andeq	r8, r2, r4, lsl r1
   11708:	andeq	r8, r2, r4, ror r1
   1170c:	muleq	r1, r0, sl
   11710:	andeq	r6, r1, r0, lsr #21
   11714:	ldrdeq	r6, [r1], -ip
   11718:	muleq	r1, r4, r9
   1171c:	andeq	r8, r2, r8, ror #2
   11720:			; <UNDEFINED> instruction: 0x00016abc
   11724:	strdeq	r6, [r1], -r0
   11728:			; <UNDEFINED> instruction: 0x000281b0
   1172c:	muleq	r1, r4, fp
   11730:	andeq	r8, r2, r0, lsl r1
   11734:			; <UNDEFINED> instruction: 0x00016bb0
   11738:	andeq	r8, r2, r4, lsl #3
   1173c:	andeq	r6, r1, r4, lsl #23
   11740:	andeq	r6, r1, r0, lsl ip
   11744:	andeq	r6, r1, r0, ror #23
   11748:	strdeq	r6, [r1], -r4
   1174c:	andeq	r6, r1, r4, asr fp
   11750:	andeq	r6, r1, ip, lsl fp
   11754:	andeq	r6, r1, r8, asr sl
   11758:	andeq	r6, r1, r4, asr #23
   1175c:	mov	fp, #0
   11760:	mov	lr, #0
   11764:	pop	{r1}		; (ldr r1, [sp], #4)
   11768:	mov	r2, sp
   1176c:	push	{r2}		; (str r2, [sp, #-4]!)
   11770:	push	{r0}		; (str r0, [sp, #-4]!)
   11774:	ldr	ip, [pc, #16]	; 1178c <__assert_fail@plt+0x610>
   11778:	push	{ip}		; (str ip, [sp, #-4]!)
   1177c:	ldr	r0, [pc, #12]	; 11790 <__assert_fail@plt+0x614>
   11780:	ldr	r3, [pc, #12]	; 11794 <__assert_fail@plt+0x618>
   11784:	bl	11014 <__libc_start_main@plt>
   11788:	bl	11158 <abort@plt>
   1178c:	andeq	r6, r1, r0, lsr #8
   11790:	andeq	r1, r1, r8, lsl #3
   11794:	andeq	r6, r1, r0, asr #7
   11798:	ldr	r3, [pc, #20]	; 117b4 <__assert_fail@plt+0x638>
   1179c:	ldr	r2, [pc, #20]	; 117b8 <__assert_fail@plt+0x63c>
   117a0:	add	r3, pc, r3
   117a4:	ldr	r2, [r3, r2]
   117a8:	cmp	r2, #0
   117ac:	bxeq	lr
   117b0:	b	1102c <__gmon_start__@plt>
   117b4:	andeq	r6, r1, r8, asr r8
   117b8:	andeq	r0, r0, r4, lsl #2
   117bc:	ldr	r3, [pc, #28]	; 117e0 <__assert_fail@plt+0x664>
   117c0:	ldr	r0, [pc, #28]	; 117e4 <__assert_fail@plt+0x668>
   117c4:	sub	r3, r3, r0
   117c8:	cmp	r3, #6
   117cc:	bxls	lr
   117d0:	ldr	r3, [pc, #16]	; 117e8 <__assert_fail@plt+0x66c>
   117d4:	cmp	r3, #0
   117d8:	bxeq	lr
   117dc:	bx	r3
   117e0:	andeq	r8, r2, pc, asr r1
   117e4:	andeq	r8, r2, ip, asr r1
   117e8:	andeq	r0, r0, r0
   117ec:	ldr	r1, [pc, #36]	; 11818 <__assert_fail@plt+0x69c>
   117f0:	ldr	r0, [pc, #36]	; 1181c <__assert_fail@plt+0x6a0>
   117f4:	sub	r1, r1, r0
   117f8:	asr	r1, r1, #2
   117fc:	add	r1, r1, r1, lsr #31
   11800:	asrs	r1, r1, #1
   11804:	bxeq	lr
   11808:	ldr	r3, [pc, #16]	; 11820 <__assert_fail@plt+0x6a4>
   1180c:	cmp	r3, #0
   11810:	bxeq	lr
   11814:	bx	r3
   11818:	andeq	r8, r2, ip, asr r1
   1181c:	andeq	r8, r2, ip, asr r1
   11820:	andeq	r0, r0, r0
   11824:	push	{r4, lr}
   11828:	ldr	r4, [pc, #24]	; 11848 <__assert_fail@plt+0x6cc>
   1182c:	ldrb	r3, [r4]
   11830:	cmp	r3, #0
   11834:	popne	{r4, pc}
   11838:	bl	117bc <__assert_fail@plt+0x640>
   1183c:	mov	r3, #1
   11840:	strb	r3, [r4]
   11844:	pop	{r4, pc}
   11848:	andeq	r8, r2, r8, ror r1
   1184c:	ldr	r0, [pc, #40]	; 1187c <__assert_fail@plt+0x700>
   11850:	ldr	r3, [r0]
   11854:	cmp	r3, #0
   11858:	bne	11860 <__assert_fail@plt+0x6e4>
   1185c:	b	117ec <__assert_fail@plt+0x670>
   11860:	ldr	r3, [pc, #24]	; 11880 <__assert_fail@plt+0x704>
   11864:	cmp	r3, #0
   11868:	beq	1185c <__assert_fail@plt+0x6e0>
   1186c:	push	{r4, lr}
   11870:	blx	r3
   11874:	pop	{r4, lr}
   11878:	b	117ec <__assert_fail@plt+0x670>
   1187c:	andeq	r7, r2, ip, lsl #30
   11880:	andeq	r0, r0, r0
   11884:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11888:	sub	sp, sp, #20
   1188c:	ldr	r4, [pc, #1292]	; 11da0 <__assert_fail@plt+0xc24>
   11890:	ldrb	r3, [r4]
   11894:	cmp	r3, #0
   11898:	beq	11950 <__assert_fail@plt+0x7d4>
   1189c:	ldrb	r3, [r4, #1]
   118a0:	ldrb	r1, [r4, #12]
   118a4:	cmp	r3, #0
   118a8:	ldrne	r6, [r4, #4]
   118ac:	ldreq	r6, [r4, #8]
   118b0:	cmp	r1, #0
   118b4:	moveq	r5, r1
   118b8:	bne	119ec <__assert_fail@plt+0x870>
   118bc:	mov	r0, r6
   118c0:	mov	r1, r5
   118c4:	ldr	r2, [pc, #1240]	; 11da4 <__assert_fail@plt+0xc28>
   118c8:	bl	1248c <__assert_fail@plt+0x1310>
   118cc:	ldr	r5, [pc, #1236]	; 11da8 <__assert_fail@plt+0xc2c>
   118d0:	ldr	r1, [r5]
   118d4:	bl	10eb8 <fputs_unlocked@plt>
   118d8:	ldrb	r3, [r4, #49]	; 0x31
   118dc:	cmp	r3, #0
   118e0:	beq	11994 <__assert_fail@plt+0x818>
   118e4:	ldrb	r1, [r4, #48]	; 0x30
   118e8:	cmp	r1, #0
   118ec:	beq	11998 <__assert_fail@plt+0x81c>
   118f0:	ldrb	r1, [r4, #77]	; 0x4d
   118f4:	cmp	r1, #0
   118f8:	beq	11998 <__assert_fail@plt+0x81c>
   118fc:	ldr	r0, [r5]
   11900:	ldr	r3, [r0, #20]
   11904:	ldr	r2, [r0, #24]
   11908:	cmp	r3, r2
   1190c:	addcc	r1, r3, #1
   11910:	movcc	r2, #0
   11914:	strcc	r1, [r0, #20]
   11918:	strbcc	r2, [r3]
   1191c:	bcs	11d50 <__assert_fail@plt+0xbd4>
   11920:	ldr	r0, [r5]
   11924:	ldr	r3, [r0, #20]
   11928:	ldr	r2, [r0, #24]
   1192c:	cmp	r3, r2
   11930:	addcc	r1, r3, #1
   11934:	movcc	r2, #0
   11938:	strcc	r1, [r0, #20]
   1193c:	strbcc	r2, [r3]
   11940:	bcc	119b8 <__assert_fail@plt+0x83c>
   11944:	mov	r1, #0
   11948:	bl	110f8 <__overflow@plt>
   1194c:	b	119b8 <__assert_fail@plt+0x83c>
   11950:	ldrb	r3, [r4, #37]	; 0x25
   11954:	cmp	r3, #0
   11958:	beq	119c0 <__assert_fail@plt+0x844>
   1195c:	ldrb	r3, [r4, #1]
   11960:	ldrb	r1, [r4, #12]
   11964:	cmp	r3, #0
   11968:	ldrne	r0, [r4, #40]	; 0x28
   1196c:	ldreq	r0, [r4, #44]	; 0x2c
   11970:	bl	120dc <__assert_fail@plt+0xf60>
   11974:	ldr	r2, [pc, #1072]	; 11dac <__assert_fail@plt+0xc30>
   11978:	ldr	r5, [pc, #1064]	; 11da8 <__assert_fail@plt+0xc2c>
   1197c:	ldrb	r3, [r2]
   11980:	and	r0, r0, r3
   11984:	ldrb	r3, [r4, #49]	; 0x31
   11988:	strb	r0, [r2]
   1198c:	cmp	r3, #0
   11990:	bne	118e4 <__assert_fail@plt+0x768>
   11994:	mov	r1, #10
   11998:	ldr	r0, [r5]
   1199c:	ldr	r3, [r0, #20]
   119a0:	ldr	r2, [r0, #24]
   119a4:	cmp	r3, r2
   119a8:	addcc	r2, r3, #1
   119ac:	strcc	r2, [r0, #20]
   119b0:	strbcc	r1, [r3]
   119b4:	bcs	11a74 <__assert_fail@plt+0x8f8>
   119b8:	add	sp, sp, #20
   119bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119c0:	ldrb	r3, [r4, #48]	; 0x30
   119c4:	cmp	r3, #0
   119c8:	bne	11a44 <__assert_fail@plt+0x8c8>
   119cc:	ldrb	r6, [r4, #50]	; 0x32
   119d0:	cmp	r6, #0
   119d4:	beq	11a7c <__assert_fail@plt+0x900>
   119d8:	ldr	r5, [pc, #968]	; 11da8 <__assert_fail@plt+0xc2c>
   119dc:	ldr	r0, [r4, #52]	; 0x34
   119e0:	ldr	r1, [r5]
   119e4:	bl	10eb8 <fputs_unlocked@plt>
   119e8:	b	118d8 <__assert_fail@plt+0x75c>
   119ec:	mov	r0, r6
   119f0:	bl	10ef4 <getpwuid@plt>
   119f4:	subs	r1, r0, #0
   119f8:	ldrne	r0, [r1]
   119fc:	bne	118cc <__assert_fail@plt+0x750>
   11a00:	mov	r5, r1
   11a04:	mov	r2, #5
   11a08:	ldr	r1, [pc, #928]	; 11db0 <__assert_fail@plt+0xc34>
   11a0c:	bl	10f60 <dcgettext@plt>
   11a10:	mov	r1, r5
   11a14:	ldr	r2, [pc, #904]	; 11da4 <__assert_fail@plt+0xc28>
   11a18:	mov	r7, r0
   11a1c:	mov	r0, r6
   11a20:	bl	1248c <__assert_fail@plt+0x1310>
   11a24:	mov	r2, r7
   11a28:	mov	r1, r5
   11a2c:	mov	r3, r0
   11a30:	mov	r0, r5
   11a34:	bl	10ff0 <error@plt>
   11a38:	ldr	r3, [pc, #876]	; 11dac <__assert_fail@plt+0xc30>
   11a3c:	strb	r5, [r3]
   11a40:	b	118bc <__assert_fail@plt+0x740>
   11a44:	ldrb	ip, [r4, #49]	; 0x31
   11a48:	ldrb	lr, [r4, #12]
   11a4c:	ldr	r1, [r4, #4]
   11a50:	cmp	ip, #0
   11a54:	moveq	ip, #32
   11a58:	movne	ip, #0
   11a5c:	ldr	r2, [r4, #40]	; 0x28
   11a60:	ldr	r3, [r4, #44]	; 0x2c
   11a64:	str	ip, [sp, #4]
   11a68:	str	lr, [sp]
   11a6c:	bl	12158 <__assert_fail@plt+0xfdc>
   11a70:	b	11974 <__assert_fail@plt+0x7f8>
   11a74:	bl	110f8 <__overflow@plt>
   11a78:	b	119b8 <__assert_fail@plt+0x83c>
   11a7c:	mov	r2, #5
   11a80:	ldr	r1, [pc, #812]	; 11db4 <__assert_fail@plt+0xc38>
   11a84:	mov	r5, r0
   11a88:	mov	r0, r6
   11a8c:	bl	10f60 <dcgettext@plt>
   11a90:	mov	r1, r6
   11a94:	add	r2, r4, #16
   11a98:	mov	r7, r0
   11a9c:	ldr	r0, [r4, #4]
   11aa0:	bl	1248c <__assert_fail@plt+0x1310>
   11aa4:	mov	r1, r7
   11aa8:	mov	r2, r0
   11aac:	mov	r0, #1
   11ab0:	bl	110bc <__printf_chk@plt>
   11ab4:	ldr	r0, [r4, #4]
   11ab8:	bl	10ef4 <getpwuid@plt>
   11abc:	subs	r6, r0, #0
   11ac0:	beq	11ad4 <__assert_fail@plt+0x958>
   11ac4:	ldr	r2, [r6]
   11ac8:	ldr	r1, [pc, #744]	; 11db8 <__assert_fail@plt+0xc3c>
   11acc:	mov	r0, #1
   11ad0:	bl	110bc <__printf_chk@plt>
   11ad4:	mov	r2, #5
   11ad8:	ldr	r1, [pc, #732]	; 11dbc <__assert_fail@plt+0xc40>
   11adc:	mov	r0, #0
   11ae0:	bl	10f60 <dcgettext@plt>
   11ae4:	ldr	r2, [pc, #724]	; 11dc0 <__assert_fail@plt+0xc44>
   11ae8:	mov	r1, #0
   11aec:	mov	r7, r0
   11af0:	ldr	r0, [r4, #40]	; 0x28
   11af4:	bl	1248c <__assert_fail@plt+0x1310>
   11af8:	mov	r1, r7
   11afc:	mov	r2, r0
   11b00:	mov	r0, #1
   11b04:	bl	110bc <__printf_chk@plt>
   11b08:	ldr	r0, [r4, #40]	; 0x28
   11b0c:	bl	11164 <getgrgid@plt>
   11b10:	cmp	r0, #0
   11b14:	beq	11b28 <__assert_fail@plt+0x9ac>
   11b18:	ldr	r2, [r0]
   11b1c:	ldr	r1, [pc, #660]	; 11db8 <__assert_fail@plt+0xc3c>
   11b20:	mov	r0, #1
   11b24:	bl	110bc <__printf_chk@plt>
   11b28:	ldr	r2, [r4, #8]
   11b2c:	ldr	r3, [r4, #4]
   11b30:	cmp	r2, r3
   11b34:	beq	11b8c <__assert_fail@plt+0xa10>
   11b38:	mov	r2, #5
   11b3c:	ldr	r1, [pc, #640]	; 11dc4 <__assert_fail@plt+0xc48>
   11b40:	mov	r0, #0
   11b44:	bl	10f60 <dcgettext@plt>
   11b48:	ldr	r2, [pc, #596]	; 11da4 <__assert_fail@plt+0xc28>
   11b4c:	mov	r1, #0
   11b50:	mov	r6, r0
   11b54:	ldr	r0, [r4, #8]
   11b58:	bl	1248c <__assert_fail@plt+0x1310>
   11b5c:	mov	r1, r6
   11b60:	mov	r2, r0
   11b64:	mov	r0, #1
   11b68:	bl	110bc <__printf_chk@plt>
   11b6c:	ldr	r0, [r4, #8]
   11b70:	bl	10ef4 <getpwuid@plt>
   11b74:	subs	r6, r0, #0
   11b78:	beq	11b8c <__assert_fail@plt+0xa10>
   11b7c:	ldr	r2, [r6]
   11b80:	ldr	r1, [pc, #560]	; 11db8 <__assert_fail@plt+0xc3c>
   11b84:	mov	r0, #1
   11b88:	bl	110bc <__printf_chk@plt>
   11b8c:	ldr	r7, [r4, #44]	; 0x2c
   11b90:	ldr	r3, [r4, #40]	; 0x28
   11b94:	cmp	r7, r3
   11b98:	beq	11bf0 <__assert_fail@plt+0xa74>
   11b9c:	mov	r2, #5
   11ba0:	ldr	r1, [pc, #544]	; 11dc8 <__assert_fail@plt+0xc4c>
   11ba4:	mov	r0, #0
   11ba8:	bl	10f60 <dcgettext@plt>
   11bac:	ldr	r2, [pc, #524]	; 11dc0 <__assert_fail@plt+0xc44>
   11bb0:	mov	r1, #0
   11bb4:	mov	r8, r0
   11bb8:	mov	r0, r7
   11bbc:	bl	1248c <__assert_fail@plt+0x1310>
   11bc0:	mov	r1, r8
   11bc4:	mov	r2, r0
   11bc8:	mov	r0, #1
   11bcc:	bl	110bc <__printf_chk@plt>
   11bd0:	ldr	r0, [r4, #44]	; 0x2c
   11bd4:	bl	11164 <getgrgid@plt>
   11bd8:	cmp	r0, #0
   11bdc:	beq	11bf0 <__assert_fail@plt+0xa74>
   11be0:	ldr	r2, [r0]
   11be4:	ldr	r1, [pc, #460]	; 11db8 <__assert_fail@plt+0xc3c>
   11be8:	mov	r0, #1
   11bec:	bl	110bc <__printf_chk@plt>
   11bf0:	cmp	r5, #0
   11bf4:	beq	11d5c <__assert_fail@plt+0xbe0>
   11bf8:	cmp	r6, #0
   11bfc:	mvneq	r1, #0
   11c00:	ldrne	r1, [r6, #12]
   11c04:	add	r2, sp, #12
   11c08:	mov	r0, r5
   11c0c:	bl	15224 <__assert_fail@plt+0x40a8>
   11c10:	subs	r7, r0, #0
   11c14:	blt	11ccc <__assert_fail@plt+0xb50>
   11c18:	cmp	r7, #0
   11c1c:	ldr	r5, [pc, #388]	; 11da8 <__assert_fail@plt+0xc2c>
   11c20:	beq	11d18 <__assert_fail@plt+0xb9c>
   11c24:	mov	r2, #5
   11c28:	ldr	r1, [pc, #412]	; 11dcc <__assert_fail@plt+0xc50>
   11c2c:	mov	r0, #0
   11c30:	bl	10f60 <dcgettext@plt>
   11c34:	ldr	r1, [r5]
   11c38:	bl	10eb8 <fputs_unlocked@plt>
   11c3c:	mov	r6, #0
   11c40:	ldr	sl, [pc, #376]	; 11dc0 <__assert_fail@plt+0xc44>
   11c44:	ldr	r9, [pc, #364]	; 11db8 <__assert_fail@plt+0xc3c>
   11c48:	mov	fp, r6
   11c4c:	mov	r8, #1
   11c50:	ldr	r3, [sp, #12]
   11c54:	mov	r2, sl
   11c58:	mov	r1, fp
   11c5c:	ldr	r0, [r3, r6, lsl #2]
   11c60:	bl	1248c <__assert_fail@plt+0x1310>
   11c64:	ldr	r1, [r5]
   11c68:	bl	10eb8 <fputs_unlocked@plt>
   11c6c:	ldr	r3, [sp, #12]
   11c70:	ldr	r0, [r3, r6, lsl #2]
   11c74:	bl	11164 <getgrgid@plt>
   11c78:	mov	r1, r9
   11c7c:	subs	r3, r0, #0
   11c80:	mov	r0, r8
   11c84:	beq	11c90 <__assert_fail@plt+0xb14>
   11c88:	ldr	r2, [r3]
   11c8c:	bl	110bc <__printf_chk@plt>
   11c90:	add	r6, r6, #1
   11c94:	cmp	r7, r6
   11c98:	beq	11d18 <__assert_fail@plt+0xb9c>
   11c9c:	ldr	r0, [r5]
   11ca0:	ldr	r3, [r0, #20]
   11ca4:	ldr	r2, [r0, #24]
   11ca8:	add	r1, r3, #1
   11cac:	cmp	r3, r2
   11cb0:	movcc	r2, #44	; 0x2c
   11cb4:	strcc	r1, [r0, #20]
   11cb8:	strbcc	r2, [r3]
   11cbc:	bcc	11c50 <__assert_fail@plt+0xad4>
   11cc0:	mov	r1, #44	; 0x2c
   11cc4:	bl	110f8 <__overflow@plt>
   11cc8:	b	11c50 <__assert_fail@plt+0xad4>
   11ccc:	bl	11080 <__errno_location@plt>
   11cd0:	mov	r2, #5
   11cd4:	ldr	r1, [pc, #244]	; 11dd0 <__assert_fail@plt+0xc54>
   11cd8:	ldr	r6, [r0]
   11cdc:	mov	r0, #0
   11ce0:	bl	10f60 <dcgettext@plt>
   11ce4:	mov	r7, r0
   11ce8:	mov	r0, r5
   11cec:	bl	143b4 <__assert_fail@plt+0x3238>
   11cf0:	mov	r2, r7
   11cf4:	mov	r1, r6
   11cf8:	mov	r3, r0
   11cfc:	mov	r0, #0
   11d00:	bl	10ff0 <error@plt>
   11d04:	ldr	r3, [pc, #160]	; 11dac <__assert_fail@plt+0xc30>
   11d08:	mov	r2, #0
   11d0c:	ldr	r5, [pc, #148]	; 11da8 <__assert_fail@plt+0xc2c>
   11d10:	strb	r2, [r3]
   11d14:	b	118d8 <__assert_fail@plt+0x75c>
   11d18:	ldr	r0, [sp, #12]
   11d1c:	bl	12434 <__assert_fail@plt+0x12b8>
   11d20:	ldr	r3, [r4, #52]	; 0x34
   11d24:	cmp	r3, #0
   11d28:	beq	118d8 <__assert_fail@plt+0x75c>
   11d2c:	mov	r2, #5
   11d30:	ldr	r1, [pc, #156]	; 11dd4 <__assert_fail@plt+0xc58>
   11d34:	mov	r0, #0
   11d38:	bl	10f60 <dcgettext@plt>
   11d3c:	ldr	r2, [r4, #52]	; 0x34
   11d40:	mov	r1, r0
   11d44:	mov	r0, #1
   11d48:	bl	110bc <__printf_chk@plt>
   11d4c:	b	118d8 <__assert_fail@plt+0x75c>
   11d50:	mov	r1, #0
   11d54:	bl	110f8 <__overflow@plt>
   11d58:	b	11920 <__assert_fail@plt+0x7a4>
   11d5c:	add	r2, sp, #12
   11d60:	ldr	r1, [r4, #44]	; 0x2c
   11d64:	mov	r0, r5
   11d68:	bl	15224 <__assert_fail@plt+0x40a8>
   11d6c:	subs	r7, r0, #0
   11d70:	bge	11c18 <__assert_fail@plt+0xa9c>
   11d74:	bl	11080 <__errno_location@plt>
   11d78:	mov	r2, #5
   11d7c:	ldr	r1, [pc, #84]	; 11dd8 <__assert_fail@plt+0xc5c>
   11d80:	ldr	r6, [r0]
   11d84:	mov	r0, r5
   11d88:	bl	10f60 <dcgettext@plt>
   11d8c:	mov	r1, r6
   11d90:	mov	r2, r0
   11d94:	mov	r0, r5
   11d98:	bl	10ff0 <error@plt>
   11d9c:	b	11d04 <__assert_fail@plt+0xb88>
   11da0:	andeq	r8, r2, ip, ror r1
   11da4:	andeq	r8, r2, ip, lsl #3
   11da8:	andeq	r8, r2, r4, ror r1
   11dac:	andeq	r8, r2, r0, lsl r1
   11db0:	andeq	r6, r1, r0, lsr #10
   11db4:	andeq	r6, r1, r0, asr #10
   11db8:	andeq	r6, r1, r8, asr #10
   11dbc:	andeq	r6, r1, r0, asr r5
   11dc0:			; <UNDEFINED> instruction: 0x000281b4
   11dc4:	andeq	r6, r1, r8, asr r5
   11dc8:	andeq	r6, r1, r4, ror #10
   11dcc:	ldrdeq	r6, [r1], -r0
   11dd0:	andeq	r6, r1, r0, ror r5
   11dd4:	andeq	r6, r1, r4, asr #11
   11dd8:	muleq	r1, r4, r5
   11ddc:	subs	r6, r0, #0
   11de0:	push	{r7, lr}
   11de4:	sub	sp, sp, #56	; 0x38
   11de8:	beq	11e24 <__assert_fail@plt+0xca8>
   11dec:	ldr	r3, [pc, #660]	; 12088 <__assert_fail@plt+0xf0c>
   11df0:	mov	r2, #5
   11df4:	ldr	r1, [pc, #656]	; 1208c <__assert_fail@plt+0xf10>
   11df8:	mov	r0, #0
   11dfc:	ldr	r4, [r3]
   11e00:	bl	10f60 <dcgettext@plt>
   11e04:	ldr	r3, [pc, #644]	; 12090 <__assert_fail@plt+0xf14>
   11e08:	mov	r1, #1
   11e0c:	ldr	r3, [r3]
   11e10:	mov	r2, r0
   11e14:	mov	r0, r4
   11e18:	bl	110d4 <__fprintf_chk@plt>
   11e1c:	mov	r0, r6
   11e20:	bl	11050 <exit@plt>
   11e24:	mov	r2, #5
   11e28:	ldr	r1, [pc, #612]	; 12094 <__assert_fail@plt+0xf18>
   11e2c:	bl	10f60 <dcgettext@plt>
   11e30:	ldr	r3, [pc, #600]	; 12090 <__assert_fail@plt+0xf14>
   11e34:	ldr	r7, [pc, #604]	; 12098 <__assert_fail@plt+0xf1c>
   11e38:	ldr	r4, [pc, #604]	; 1209c <__assert_fail@plt+0xf20>
   11e3c:	ldr	r2, [r3]
   11e40:	mov	r1, r0
   11e44:	mov	r0, #1
   11e48:	bl	110bc <__printf_chk@plt>
   11e4c:	mov	r2, #5
   11e50:	ldr	r1, [pc, #584]	; 120a0 <__assert_fail@plt+0xf24>
   11e54:	mov	r0, r6
   11e58:	bl	10f60 <dcgettext@plt>
   11e5c:	ldr	r1, [r7]
   11e60:	bl	10eb8 <fputs_unlocked@plt>
   11e64:	mov	r2, #5
   11e68:	ldr	r1, [pc, #564]	; 120a4 <__assert_fail@plt+0xf28>
   11e6c:	mov	r0, r6
   11e70:	bl	10f60 <dcgettext@plt>
   11e74:	ldr	r1, [r7]
   11e78:	bl	10eb8 <fputs_unlocked@plt>
   11e7c:	mov	r2, #5
   11e80:	ldr	r1, [pc, #544]	; 120a8 <__assert_fail@plt+0xf2c>
   11e84:	mov	r0, r6
   11e88:	bl	10f60 <dcgettext@plt>
   11e8c:	ldr	r1, [r7]
   11e90:	bl	10eb8 <fputs_unlocked@plt>
   11e94:	mov	r2, #5
   11e98:	ldr	r1, [pc, #524]	; 120ac <__assert_fail@plt+0xf30>
   11e9c:	mov	r0, r6
   11ea0:	bl	10f60 <dcgettext@plt>
   11ea4:	ldr	r1, [r7]
   11ea8:	bl	10eb8 <fputs_unlocked@plt>
   11eac:	mov	r2, #5
   11eb0:	ldr	r1, [pc, #504]	; 120b0 <__assert_fail@plt+0xf34>
   11eb4:	mov	r0, r6
   11eb8:	bl	10f60 <dcgettext@plt>
   11ebc:	ldr	r1, [r7]
   11ec0:	bl	10eb8 <fputs_unlocked@plt>
   11ec4:	ldm	r4!, {r0, r1, r2, r3}
   11ec8:	mov	lr, sp
   11ecc:	stmia	lr!, {r0, r1, r2, r3}
   11ed0:	ldm	r4!, {r0, r1, r2, r3}
   11ed4:	ldr	ip, [sp]
   11ed8:	stmia	lr!, {r0, r1, r2, r3}
   11edc:	cmp	ip, #0
   11ee0:	ldm	r4!, {r0, r1, r2, r3}
   11ee4:	stmia	lr!, {r0, r1, r2, r3}
   11ee8:	ldm	r4, {r0, r1}
   11eec:	moveq	r4, sp
   11ef0:	stm	lr, {r0, r1}
   11ef4:	beq	11f24 <__assert_fail@plt+0xda8>
   11ef8:	ldr	r5, [pc, #436]	; 120b4 <__assert_fail@plt+0xf38>
   11efc:	mov	r4, sp
   11f00:	b	11f10 <__assert_fail@plt+0xd94>
   11f04:	ldr	ip, [r4, #8]!
   11f08:	cmp	ip, #0
   11f0c:	beq	11f24 <__assert_fail@plt+0xda8>
   11f10:	mov	r1, ip
   11f14:	mov	r0, r5
   11f18:	bl	10ee8 <strcmp@plt>
   11f1c:	cmp	r0, #0
   11f20:	bne	11f04 <__assert_fail@plt+0xd88>
   11f24:	ldr	r4, [r4, #4]
   11f28:	mov	r2, #5
   11f2c:	cmp	r4, #0
   11f30:	ldr	r1, [pc, #384]	; 120b8 <__assert_fail@plt+0xf3c>
   11f34:	beq	11fdc <__assert_fail@plt+0xe60>
   11f38:	mov	r0, #0
   11f3c:	bl	10f60 <dcgettext@plt>
   11f40:	ldr	r3, [pc, #372]	; 120bc <__assert_fail@plt+0xf40>
   11f44:	ldr	r2, [pc, #372]	; 120c0 <__assert_fail@plt+0xf44>
   11f48:	mov	r1, r0
   11f4c:	mov	r0, #1
   11f50:	bl	110bc <__printf_chk@plt>
   11f54:	mov	r1, #0
   11f58:	mov	r0, #5
   11f5c:	bl	11104 <setlocale@plt>
   11f60:	cmp	r0, #0
   11f64:	ldreq	r5, [pc, #328]	; 120b4 <__assert_fail@plt+0xf38>
   11f68:	beq	11f84 <__assert_fail@plt+0xe08>
   11f6c:	mov	r2, #3
   11f70:	ldr	r1, [pc, #332]	; 120c4 <__assert_fail@plt+0xf48>
   11f74:	bl	1114c <strncmp@plt>
   11f78:	ldr	r5, [pc, #308]	; 120b4 <__assert_fail@plt+0xf38>
   11f7c:	cmp	r0, #0
   11f80:	bne	1206c <__assert_fail@plt+0xef0>
   11f84:	mov	r2, #5
   11f88:	ldr	r1, [pc, #312]	; 120c8 <__assert_fail@plt+0xf4c>
   11f8c:	mov	r0, #0
   11f90:	bl	10f60 <dcgettext@plt>
   11f94:	ldr	r3, [pc, #280]	; 120b4 <__assert_fail@plt+0xf38>
   11f98:	ldr	r2, [pc, #284]	; 120bc <__assert_fail@plt+0xf40>
   11f9c:	mov	r1, r0
   11fa0:	mov	r0, #1
   11fa4:	bl	110bc <__printf_chk@plt>
   11fa8:	mov	r2, #5
   11fac:	ldr	r1, [pc, #280]	; 120cc <__assert_fail@plt+0xf50>
   11fb0:	mov	r0, #0
   11fb4:	bl	10f60 <dcgettext@plt>
   11fb8:	ldr	r2, [pc, #272]	; 120d0 <__assert_fail@plt+0xf54>
   11fbc:	cmp	r4, r5
   11fc0:	ldr	r3, [pc, #268]	; 120d4 <__assert_fail@plt+0xf58>
   11fc4:	movne	r3, r2
   11fc8:	mov	r1, r0
   11fcc:	mov	r2, r4
   11fd0:	mov	r0, #1
   11fd4:	bl	110bc <__printf_chk@plt>
   11fd8:	b	11e1c <__assert_fail@plt+0xca0>
   11fdc:	mov	r0, r4
   11fe0:	bl	10f60 <dcgettext@plt>
   11fe4:	ldr	r3, [pc, #208]	; 120bc <__assert_fail@plt+0xf40>
   11fe8:	ldr	r2, [pc, #208]	; 120c0 <__assert_fail@plt+0xf44>
   11fec:	mov	r1, r0
   11ff0:	mov	r0, #1
   11ff4:	bl	110bc <__printf_chk@plt>
   11ff8:	mov	r1, r4
   11ffc:	mov	r0, #5
   12000:	bl	11104 <setlocale@plt>
   12004:	cmp	r0, #0
   12008:	beq	12020 <__assert_fail@plt+0xea4>
   1200c:	mov	r2, #3
   12010:	ldr	r1, [pc, #172]	; 120c4 <__assert_fail@plt+0xf48>
   12014:	bl	1114c <strncmp@plt>
   12018:	cmp	r0, #0
   1201c:	bne	12064 <__assert_fail@plt+0xee8>
   12020:	mov	r2, #5
   12024:	ldr	r1, [pc, #156]	; 120c8 <__assert_fail@plt+0xf4c>
   12028:	mov	r0, #0
   1202c:	bl	10f60 <dcgettext@plt>
   12030:	ldr	r3, [pc, #124]	; 120b4 <__assert_fail@plt+0xf38>
   12034:	ldr	r2, [pc, #128]	; 120bc <__assert_fail@plt+0xf40>
   12038:	mov	r4, r3
   1203c:	mov	r1, r0
   12040:	mov	r0, #1
   12044:	bl	110bc <__printf_chk@plt>
   12048:	ldr	r1, [pc, #124]	; 120cc <__assert_fail@plt+0xf50>
   1204c:	mov	r2, #5
   12050:	mov	r0, #0
   12054:	bl	10f60 <dcgettext@plt>
   12058:	ldr	r3, [pc, #116]	; 120d4 <__assert_fail@plt+0xf58>
   1205c:	mov	r1, r0
   12060:	b	11fcc <__assert_fail@plt+0xe50>
   12064:	ldr	r5, [pc, #72]	; 120b4 <__assert_fail@plt+0xf38>
   12068:	mov	r4, r5
   1206c:	mov	r2, #5
   12070:	ldr	r1, [pc, #96]	; 120d8 <__assert_fail@plt+0xf5c>
   12074:	mov	r0, #0
   12078:	bl	10f60 <dcgettext@plt>
   1207c:	ldr	r1, [r7]
   12080:	bl	10eb8 <fputs_unlocked@plt>
   12084:	b	11f84 <__assert_fail@plt+0xe08>
   12088:	andeq	r8, r2, r0, ror r1
   1208c:	andeq	r6, r1, r0, ror #11
   12090:	andeq	r8, r2, ip, ror #3
   12094:	andeq	r6, r1, r8, lsl #12
   12098:	andeq	r8, r2, r4, ror r1
   1209c:	andeq	r6, r1, r8, asr #8
   120a0:	andeq	r6, r1, ip, lsr #12
   120a4:	muleq	r1, r8, r6
   120a8:	andeq	r6, r1, r4, lsr #17
   120ac:	ldrdeq	r6, [r1], -r4
   120b0:	andeq	r6, r1, ip, lsl #18
   120b4:	ldrdeq	r6, [r1], -ip
   120b8:	andeq	r6, r1, r4, asr r9
   120bc:	andeq	r6, r1, ip, ror #18
   120c0:	muleq	r1, r4, r9
   120c4:	andeq	r6, r1, r4, lsr #19
   120c8:	strdeq	r6, [r1], -r0
   120cc:	andeq	r6, r1, ip, lsl #20
   120d0:	andeq	r6, r1, r8, lsr #12
   120d4:	andeq	r6, r1, ip, lsr #24
   120d8:	andeq	r6, r1, r8, lsr #19
   120dc:	push	{r4, r5, r6, lr}
   120e0:	subs	r4, r1, #0
   120e4:	mov	r5, r0
   120e8:	moveq	r4, #1
   120ec:	bne	12114 <__assert_fail@plt+0xf98>
   120f0:	mov	r0, r5
   120f4:	ldr	r2, [pc, #80]	; 1214c <__assert_fail@plt+0xfd0>
   120f8:	mov	r1, #0
   120fc:	bl	1248c <__assert_fail@plt+0x1310>
   12100:	ldr	r3, [pc, #72]	; 12150 <__assert_fail@plt+0xfd4>
   12104:	ldr	r1, [r3]
   12108:	bl	10eb8 <fputs_unlocked@plt>
   1210c:	mov	r0, r4
   12110:	pop	{r4, r5, r6, pc}
   12114:	bl	11164 <getgrgid@plt>
   12118:	subs	r6, r0, #0
   1211c:	ldrne	r0, [r6]
   12120:	bne	12100 <__assert_fail@plt+0xf84>
   12124:	mov	r2, #5
   12128:	ldr	r1, [pc, #36]	; 12154 <__assert_fail@plt+0xfd8>
   1212c:	bl	10f60 <dcgettext@plt>
   12130:	mov	r3, r5
   12134:	mov	r1, r6
   12138:	mov	r4, r6
   1213c:	mov	r2, r0
   12140:	mov	r0, r6
   12144:	bl	10ff0 <error@plt>
   12148:	b	120f0 <__assert_fail@plt+0xf74>
   1214c:	andeq	r8, r2, ip, asr #3
   12150:	andeq	r8, r2, r4, ror r1
   12154:	andeq	r6, r1, r8, asr #25
   12158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1215c:	sub	sp, sp, #20
   12160:	subs	fp, r0, #0
   12164:	mov	r5, r2
   12168:	mov	r6, r3
   1216c:	ldrb	r9, [sp, #56]	; 0x38
   12170:	ldrb	sl, [sp, #60]	; 0x3c
   12174:	beq	12290 <__assert_fail@plt+0x1114>
   12178:	mov	r0, r1
   1217c:	bl	10ef4 <getpwuid@plt>
   12180:	adds	r8, r0, #0
   12184:	mov	r4, r0
   12188:	movne	r8, #1
   1218c:	mov	r1, r9
   12190:	mov	r0, r5
   12194:	bl	120dc <__assert_fail@plt+0xf60>
   12198:	cmp	r0, #0
   1219c:	moveq	r8, #0
   121a0:	cmp	r5, r6
   121a4:	beq	121e0 <__assert_fail@plt+0x1064>
   121a8:	ldr	r3, [pc, #372]	; 12324 <__assert_fail@plt+0x11a8>
   121ac:	ldr	r0, [r3]
   121b0:	ldr	r3, [r0, #20]
   121b4:	ldr	r2, [r0, #24]
   121b8:	cmp	r3, r2
   121bc:	addcc	r2, r3, #1
   121c0:	strcc	r2, [r0, #20]
   121c4:	strbcc	sl, [r3]
   121c8:	bcs	122ec <__assert_fail@plt+0x1170>
   121cc:	mov	r1, r9
   121d0:	mov	r0, r6
   121d4:	bl	120dc <__assert_fail@plt+0xf60>
   121d8:	cmp	r0, #0
   121dc:	moveq	r8, #0
   121e0:	cmp	r4, #0
   121e4:	moveq	r1, r6
   121e8:	ldrne	r1, [r4, #12]
   121ec:	add	r2, sp, #12
   121f0:	mov	r0, fp
   121f4:	bl	15224 <__assert_fail@plt+0x40a8>
   121f8:	subs	r7, r0, #0
   121fc:	blt	1229c <__assert_fail@plt+0x1120>
   12200:	ldr	r0, [sp, #12]
   12204:	ldrne	fp, [pc, #280]	; 12324 <__assert_fail@plt+0x11a8>
   12208:	movne	r4, #0
   1220c:	beq	1226c <__assert_fail@plt+0x10f0>
   12210:	ldr	r3, [r0, r4, lsl #2]
   12214:	lsl	r2, r4, #2
   12218:	cmp	r5, r3
   1221c:	cmpne	r6, r3
   12220:	beq	12260 <__assert_fail@plt+0x10e4>
   12224:	ldr	r0, [fp]
   12228:	ldr	r3, [r0, #20]
   1222c:	ldr	r1, [r0, #24]
   12230:	add	ip, r3, #1
   12234:	cmp	r3, r1
   12238:	strcc	ip, [r0, #20]
   1223c:	strbcc	sl, [r3]
   12240:	bcs	1227c <__assert_fail@plt+0x1100>
   12244:	ldr	r3, [sp, #12]
   12248:	mov	r1, r9
   1224c:	ldr	r0, [r3, r2]
   12250:	bl	120dc <__assert_fail@plt+0xf60>
   12254:	subs	r3, r0, #0
   12258:	ldr	r0, [sp, #12]
   1225c:	moveq	r8, r3
   12260:	add	r4, r4, #1
   12264:	cmp	r7, r4
   12268:	bne	12210 <__assert_fail@plt+0x1094>
   1226c:	bl	12434 <__assert_fail@plt+0x12b8>
   12270:	mov	r0, r8
   12274:	add	sp, sp, #20
   12278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1227c:	mov	r1, sl
   12280:	str	r2, [sp, #4]
   12284:	bl	110f8 <__overflow@plt>
   12288:	ldr	r2, [sp, #4]
   1228c:	b	12244 <__assert_fail@plt+0x10c8>
   12290:	mov	r4, fp
   12294:	mov	r8, #1
   12298:	b	1218c <__assert_fail@plt+0x1010>
   1229c:	cmp	fp, #0
   122a0:	beq	122f8 <__assert_fail@plt+0x117c>
   122a4:	bl	11080 <__errno_location@plt>
   122a8:	mov	r2, #5
   122ac:	ldr	r1, [pc, #116]	; 12328 <__assert_fail@plt+0x11ac>
   122b0:	ldr	r4, [r0]
   122b4:	mov	r0, #0
   122b8:	bl	10f60 <dcgettext@plt>
   122bc:	mov	r5, r0
   122c0:	mov	r0, fp
   122c4:	bl	143b4 <__assert_fail@plt+0x3238>
   122c8:	mov	r2, r5
   122cc:	mov	r1, r4
   122d0:	mov	r3, r0
   122d4:	mov	r0, #0
   122d8:	bl	10ff0 <error@plt>
   122dc:	mov	r8, #0
   122e0:	mov	r0, r8
   122e4:	add	sp, sp, #20
   122e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122ec:	mov	r1, sl
   122f0:	bl	110f8 <__overflow@plt>
   122f4:	b	121cc <__assert_fail@plt+0x1050>
   122f8:	bl	11080 <__errno_location@plt>
   122fc:	mov	r2, #5
   12300:	ldr	r1, [pc, #36]	; 1232c <__assert_fail@plt+0x11b0>
   12304:	ldr	r4, [r0]
   12308:	mov	r0, fp
   1230c:	bl	10f60 <dcgettext@plt>
   12310:	mov	r1, r4
   12314:	mov	r2, r0
   12318:	mov	r0, fp
   1231c:	bl	10ff0 <error@plt>
   12320:	b	122dc <__assert_fail@plt+0x1160>
   12324:	andeq	r8, r2, r4, ror r1
   12328:	andeq	r6, r1, r0, ror r5
   1232c:	muleq	r1, r4, r5
   12330:	ldr	r3, [pc, #4]	; 1233c <__assert_fail@plt+0x11c0>
   12334:	str	r0, [r3]
   12338:	bx	lr
   1233c:	andeq	r8, r2, r4, ror #3
   12340:	ldr	r3, [pc, #4]	; 1234c <__assert_fail@plt+0x11d0>
   12344:	strb	r0, [r3, #4]
   12348:	bx	lr
   1234c:	andeq	r8, r2, r4, ror #3
   12350:	ldr	r3, [pc, #192]	; 12418 <__assert_fail@plt+0x129c>
   12354:	push	{r4, r5, r6, lr}
   12358:	sub	sp, sp, #8
   1235c:	ldr	r0, [r3]
   12360:	bl	15824 <__assert_fail@plt+0x46a8>
   12364:	cmp	r0, #0
   12368:	beq	1238c <__assert_fail@plt+0x1210>
   1236c:	ldr	r4, [pc, #168]	; 1241c <__assert_fail@plt+0x12a0>
   12370:	ldrb	r3, [r4, #4]
   12374:	cmp	r3, #0
   12378:	beq	123a8 <__assert_fail@plt+0x122c>
   1237c:	bl	11080 <__errno_location@plt>
   12380:	ldr	r3, [r0]
   12384:	cmp	r3, #32
   12388:	bne	123a8 <__assert_fail@plt+0x122c>
   1238c:	ldr	r3, [pc, #140]	; 12420 <__assert_fail@plt+0x12a4>
   12390:	ldr	r0, [r3]
   12394:	bl	15824 <__assert_fail@plt+0x46a8>
   12398:	cmp	r0, #0
   1239c:	bne	123f0 <__assert_fail@plt+0x1274>
   123a0:	add	sp, sp, #8
   123a4:	pop	{r4, r5, r6, pc}
   123a8:	mov	r2, #5
   123ac:	ldr	r1, [pc, #112]	; 12424 <__assert_fail@plt+0x12a8>
   123b0:	mov	r0, #0
   123b4:	bl	10f60 <dcgettext@plt>
   123b8:	ldr	r4, [r4]
   123bc:	cmp	r4, #0
   123c0:	mov	r5, r0
   123c4:	beq	123fc <__assert_fail@plt+0x1280>
   123c8:	bl	11080 <__errno_location@plt>
   123cc:	ldr	r6, [r0]
   123d0:	mov	r0, r4
   123d4:	bl	1421c <__assert_fail@plt+0x30a0>
   123d8:	mov	r1, r6
   123dc:	str	r5, [sp]
   123e0:	ldr	r2, [pc, #64]	; 12428 <__assert_fail@plt+0x12ac>
   123e4:	mov	r3, r0
   123e8:	mov	r0, #0
   123ec:	bl	10ff0 <error@plt>
   123f0:	ldr	r3, [pc, #52]	; 1242c <__assert_fail@plt+0x12b0>
   123f4:	ldr	r0, [r3]
   123f8:	bl	10f24 <_exit@plt>
   123fc:	bl	11080 <__errno_location@plt>
   12400:	mov	r3, r5
   12404:	ldr	r2, [pc, #36]	; 12430 <__assert_fail@plt+0x12b4>
   12408:	ldr	r1, [r0]
   1240c:	mov	r0, r4
   12410:	bl	10ff0 <error@plt>
   12414:	b	123f0 <__assert_fail@plt+0x1274>
   12418:	andeq	r8, r2, r4, ror r1
   1241c:	andeq	r8, r2, r4, ror #3
   12420:	andeq	r8, r2, r0, ror r1
   12424:	strdeq	r6, [r1], -ip
   12428:	andeq	r6, r1, r8, lsl #26
   1242c:	andeq	r8, r2, r8, lsl r1
   12430:	andeq	r6, r1, ip, lsl #26
   12434:	push	{r4, r5, lr}
   12438:	sub	sp, sp, #12
   1243c:	mov	r5, r0
   12440:	bl	11080 <__errno_location@plt>
   12444:	mov	r2, #0
   12448:	mov	r4, r0
   1244c:	ldr	r3, [r0]
   12450:	str	r2, [r4]
   12454:	mov	r0, r5
   12458:	str	r3, [sp]
   1245c:	str	r3, [sp, #4]
   12460:	bl	10f18 <free@plt>
   12464:	ldr	r3, [r4]
   12468:	add	r2, sp, #8
   1246c:	cmp	r3, #0
   12470:	moveq	r3, #4
   12474:	movne	r3, #0
   12478:	add	r3, r2, r3
   1247c:	ldr	r3, [r3, #-8]
   12480:	str	r3, [r4]
   12484:	add	sp, sp, #12
   12488:	pop	{r4, r5, pc}
   1248c:	push	{r4, r5, r6, r8, r9, lr}
   12490:	mov	r4, r0
   12494:	mov	r5, r1
   12498:	add	r6, r2, #20
   1249c:	mov	r8, #10
   124a0:	mov	r9, #0
   124a4:	mov	r3, #0
   124a8:	strb	r3, [r2, #20]
   124ac:	mov	r0, r4
   124b0:	mov	r1, r5
   124b4:	mov	r2, r8
   124b8:	mov	r3, r9
   124bc:	bl	1624c <__assert_fail@plt+0x50d0>
   124c0:	mov	r0, r4
   124c4:	mov	r1, r5
   124c8:	mov	r3, r9
   124cc:	add	r2, r2, #48	; 0x30
   124d0:	strb	r2, [r6, #-1]!
   124d4:	mov	r2, r8
   124d8:	bl	1624c <__assert_fail@plt+0x50d0>
   124dc:	mov	r4, r0
   124e0:	mov	r5, r1
   124e4:	orrs	r3, r4, r5
   124e8:	bne	124ac <__assert_fail@plt+0x1330>
   124ec:	mov	r0, r6
   124f0:	pop	{r4, r5, r6, r8, r9, pc}
   124f4:	push	{r4, r5, r6, lr}
   124f8:	subs	r4, r0, #0
   124fc:	beq	12570 <__assert_fail@plt+0x13f4>
   12500:	mov	r1, #47	; 0x2f
   12504:	bl	1111c <strrchr@plt>
   12508:	subs	r5, r0, #0
   1250c:	beq	1255c <__assert_fail@plt+0x13e0>
   12510:	add	r6, r5, #1
   12514:	sub	r3, r6, r4
   12518:	cmp	r3, #6
   1251c:	ble	1255c <__assert_fail@plt+0x13e0>
   12520:	mov	r2, #7
   12524:	ldr	r1, [pc, #96]	; 1258c <__assert_fail@plt+0x1410>
   12528:	sub	r0, r5, #6
   1252c:	bl	1114c <strncmp@plt>
   12530:	cmp	r0, #0
   12534:	bne	1255c <__assert_fail@plt+0x13e0>
   12538:	mov	r2, #3
   1253c:	ldr	r1, [pc, #76]	; 12590 <__assert_fail@plt+0x1414>
   12540:	mov	r0, r6
   12544:	bl	1114c <strncmp@plt>
   12548:	cmp	r0, #0
   1254c:	movne	r4, r6
   12550:	ldreq	r3, [pc, #60]	; 12594 <__assert_fail@plt+0x1418>
   12554:	addeq	r4, r5, #4
   12558:	streq	r4, [r3]
   1255c:	ldr	r2, [pc, #52]	; 12598 <__assert_fail@plt+0x141c>
   12560:	ldr	r3, [pc, #52]	; 1259c <__assert_fail@plt+0x1420>
   12564:	str	r4, [r2]
   12568:	str	r4, [r3]
   1256c:	pop	{r4, r5, r6, pc}
   12570:	ldr	r3, [pc, #40]	; 125a0 <__assert_fail@plt+0x1424>
   12574:	mov	r2, #55	; 0x37
   12578:	mov	r1, #1
   1257c:	ldr	r3, [r3]
   12580:	ldr	r0, [pc, #28]	; 125a4 <__assert_fail@plt+0x1428>
   12584:	bl	10fa8 <fwrite@plt>
   12588:	bl	11158 <abort@plt>
   1258c:	andeq	r6, r1, r8, asr #26
   12590:	andeq	r6, r1, r0, asr sp
   12594:	andeq	r8, r2, r0, ror #2
   12598:	andeq	r8, r2, ip, ror #3
   1259c:	andeq	r8, r2, r4, ror #2
   125a0:	andeq	r8, r2, r0, ror r1
   125a4:	andeq	r6, r1, r0, lsl sp
   125a8:	push	{r4, r5, r6, lr}
   125ac:	mov	r2, #48	; 0x30
   125b0:	mov	r4, r1
   125b4:	mov	r1, #0
   125b8:	mov	r5, r0
   125bc:	bl	110b0 <memset@plt>
   125c0:	cmp	r4, #10
   125c4:	beq	125d4 <__assert_fail@plt+0x1458>
   125c8:	str	r4, [r5]
   125cc:	mov	r0, r5
   125d0:	pop	{r4, r5, r6, pc}
   125d4:	bl	11158 <abort@plt>
   125d8:	push	{r4, r5, r6, lr}
   125dc:	mov	r4, r0
   125e0:	mov	r5, r1
   125e4:	bl	15a40 <__assert_fail@plt+0x48c4>
   125e8:	ldrb	r3, [r0]
   125ec:	bic	r3, r3, #32
   125f0:	cmp	r3, #85	; 0x55
   125f4:	bne	12654 <__assert_fail@plt+0x14d8>
   125f8:	ldrb	r3, [r0, #1]
   125fc:	bic	r3, r3, #32
   12600:	cmp	r3, #84	; 0x54
   12604:	bne	12690 <__assert_fail@plt+0x1514>
   12608:	ldrb	r3, [r0, #2]
   1260c:	bic	r3, r3, #32
   12610:	cmp	r3, #70	; 0x46
   12614:	bne	12690 <__assert_fail@plt+0x1514>
   12618:	ldrb	r3, [r0, #3]
   1261c:	cmp	r3, #45	; 0x2d
   12620:	bne	12690 <__assert_fail@plt+0x1514>
   12624:	ldrb	r3, [r0, #4]
   12628:	cmp	r3, #56	; 0x38
   1262c:	bne	12690 <__assert_fail@plt+0x1514>
   12630:	ldrb	r3, [r0, #5]
   12634:	cmp	r3, #0
   12638:	bne	12690 <__assert_fail@plt+0x1514>
   1263c:	ldrb	r2, [r4]
   12640:	ldr	r3, [pc, #152]	; 126e0 <__assert_fail@plt+0x1564>
   12644:	ldr	r0, [pc, #152]	; 126e4 <__assert_fail@plt+0x1568>
   12648:	cmp	r2, #96	; 0x60
   1264c:	movne	r0, r3
   12650:	pop	{r4, r5, r6, pc}
   12654:	cmp	r3, #71	; 0x47
   12658:	bne	12690 <__assert_fail@plt+0x1514>
   1265c:	ldrb	r3, [r0, #1]
   12660:	bic	r3, r3, #32
   12664:	cmp	r3, #66	; 0x42
   12668:	bne	12690 <__assert_fail@plt+0x1514>
   1266c:	ldrb	r3, [r0, #2]
   12670:	cmp	r3, #49	; 0x31
   12674:	bne	12690 <__assert_fail@plt+0x1514>
   12678:	ldrb	r3, [r0, #3]
   1267c:	cmp	r3, #56	; 0x38
   12680:	bne	12690 <__assert_fail@plt+0x1514>
   12684:	ldrb	r3, [r0, #4]
   12688:	cmp	r3, #48	; 0x30
   1268c:	beq	126a4 <__assert_fail@plt+0x1528>
   12690:	ldr	r3, [pc, #80]	; 126e8 <__assert_fail@plt+0x156c>
   12694:	cmp	r5, #9
   12698:	ldr	r0, [pc, #76]	; 126ec <__assert_fail@plt+0x1570>
   1269c:	movne	r0, r3
   126a0:	pop	{r4, r5, r6, pc}
   126a4:	ldrb	r3, [r0, #5]
   126a8:	cmp	r3, #51	; 0x33
   126ac:	bne	12690 <__assert_fail@plt+0x1514>
   126b0:	ldrb	r3, [r0, #6]
   126b4:	cmp	r3, #48	; 0x30
   126b8:	bne	12690 <__assert_fail@plt+0x1514>
   126bc:	ldrb	r3, [r0, #7]
   126c0:	cmp	r3, #0
   126c4:	bne	12690 <__assert_fail@plt+0x1514>
   126c8:	ldrb	r2, [r4]
   126cc:	ldr	r3, [pc, #28]	; 126f0 <__assert_fail@plt+0x1574>
   126d0:	ldr	r0, [pc, #28]	; 126f4 <__assert_fail@plt+0x1578>
   126d4:	cmp	r2, #96	; 0x60
   126d8:	movne	r0, r3
   126dc:	pop	{r4, r5, r6, pc}
   126e0:	andeq	r6, r1, ip, lsr #27
   126e4:	andeq	r6, r1, r8, lsr #27
   126e8:			; <UNDEFINED> instruction: 0x00016dbc
   126ec:			; <UNDEFINED> instruction: 0x00016db8
   126f0:			; <UNDEFINED> instruction: 0x00016db4
   126f4:			; <UNDEFINED> instruction: 0x00016db0
   126f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126fc:	sub	sp, sp, #116	; 0x74
   12700:	mov	sl, r0
   12704:	str	r3, [sp, #24]
   12708:	mov	r3, #1
   1270c:	mov	r8, r1
   12710:	str	r2, [sp, #56]	; 0x38
   12714:	str	r3, [sp, #36]	; 0x24
   12718:	bl	10fc0 <__ctype_get_mb_cur_max@plt>
   1271c:	ldr	r3, [sp, #156]	; 0x9c
   12720:	mov	fp, r8
   12724:	mov	r2, #0
   12728:	lsr	r3, r3, #1
   1272c:	and	r3, r3, #1
   12730:	str	r2, [sp, #68]	; 0x44
   12734:	str	r3, [sp, #28]
   12738:	str	r2, [sp, #40]	; 0x28
   1273c:	str	r2, [sp, #44]	; 0x2c
   12740:	str	r2, [sp, #52]	; 0x34
   12744:	str	r2, [sp, #64]	; 0x40
   12748:	str	r2, [sp, #72]	; 0x48
   1274c:	str	sl, [sp, #32]
   12750:	str	r0, [sp, #76]	; 0x4c
   12754:	ldr	r3, [sp, #152]	; 0x98
   12758:	cmp	r3, #10
   1275c:	ldrls	pc, [pc, r3, lsl #2]
   12760:	b	13920 <__assert_fail@plt+0x27a4>
   12764:	muleq	r1, r0, r7
   12768:	andeq	r2, r1, r8, ror sl
   1276c:	muleq	r1, ip, sl
   12770:	andeq	r2, r1, r0, asr #21
   12774:	andeq	r2, r1, ip, ror #23
   12778:	andeq	r2, r1, r0, asr #23
   1277c:	muleq	r1, r8, fp
   12780:	ldrdeq	r2, [r1], -r4
   12784:	andeq	r2, r1, ip, ror #21
   12788:	andeq	r2, r1, ip, ror #21
   1278c:	andeq	r2, r1, ip, ror #21
   12790:	mov	r3, #0
   12794:	mov	r7, r3
   12798:	str	r3, [sp, #28]
   1279c:	ldr	r3, [sp, #44]	; 0x2c
   127a0:	mov	sl, #0
   127a4:	eor	r3, r3, #1
   127a8:	str	r3, [sp, #60]	; 0x3c
   127ac:	ldr	r3, [sp, #24]
   127b0:	cmn	r3, #1
   127b4:	beq	12d18 <__assert_fail@plt+0x1b9c>
   127b8:	ldr	r3, [sp, #24]
   127bc:	subs	r5, r3, sl
   127c0:	movne	r5, #1
   127c4:	cmp	r5, #0
   127c8:	beq	12d30 <__assert_fail@plt+0x1bb4>
   127cc:	ldr	r3, [sp, #152]	; 0x98
   127d0:	ldr	r8, [sp, #44]	; 0x2c
   127d4:	cmp	r3, #2
   127d8:	moveq	r8, #0
   127dc:	andne	r8, r8, #1
   127e0:	ldr	r3, [sp, #52]	; 0x34
   127e4:	adds	r9, r3, #0
   127e8:	movne	r9, #1
   127ec:	ands	r6, r9, r8
   127f0:	beq	13198 <__assert_fail@plt+0x201c>
   127f4:	ldr	r2, [sp, #52]	; 0x34
   127f8:	ldr	r1, [sp, #24]
   127fc:	cmp	r2, #1
   12800:	mov	r3, r2
   12804:	movls	r3, #0
   12808:	movhi	r3, #1
   1280c:	cmn	r1, #1
   12810:	movne	r3, #0
   12814:	cmp	r3, #0
   12818:	add	r4, sl, r2
   1281c:	beq	1282c <__assert_fail@plt+0x16b0>
   12820:	ldr	r0, [sp, #56]	; 0x38
   12824:	bl	11068 <strlen@plt>
   12828:	str	r0, [sp, #24]
   1282c:	ldr	r3, [sp, #24]
   12830:	cmp	r3, r4
   12834:	ldr	r3, [sp, #56]	; 0x38
   12838:	add	r3, r3, sl
   1283c:	str	r3, [sp, #48]	; 0x30
   12840:	bcc	131a4 <__assert_fail@plt+0x2028>
   12844:	mov	r0, r3
   12848:	ldr	r2, [sp, #52]	; 0x34
   1284c:	ldr	r1, [sp, #64]	; 0x40
   12850:	bl	10f48 <memcmp@plt>
   12854:	cmp	r0, #0
   12858:	bne	131a4 <__assert_fail@plt+0x2028>
   1285c:	ldr	r3, [sp, #28]
   12860:	cmp	r3, #0
   12864:	bne	13a20 <__assert_fail@plt+0x28a4>
   12868:	ldr	r3, [sp, #48]	; 0x30
   1286c:	ldrb	r4, [r3]
   12870:	cmp	r4, #126	; 0x7e
   12874:	ldrls	pc, [pc, r4, lsl #2]
   12878:	b	13138 <__assert_fail@plt+0x1fbc>
   1287c:	andeq	r2, r1, ip, asr pc
   12880:	andeq	r3, r1, r8, lsr r1
   12884:	andeq	r3, r1, r8, lsr r1
   12888:	andeq	r3, r1, r8, lsr r1
   1288c:	andeq	r3, r1, r8, lsr r1
   12890:	andeq	r3, r1, r8, lsr r1
   12894:	andeq	r3, r1, r8, lsr r1
   12898:	andeq	r2, r1, r0, asr #30
   1289c:	andeq	r2, r1, r4, lsr #30
   128a0:	andeq	r3, r1, r0, lsr #2
   128a4:	andeq	r2, r1, r4, lsl #29
   128a8:	andeq	r2, r1, r8, ror #28
   128ac:	strdeq	r3, [r1], -ip
   128b0:	ldrdeq	r3, [r1], -r8
   128b4:	andeq	r3, r1, r8, lsr r1
   128b8:	andeq	r3, r1, r8, lsr r1
   128bc:	andeq	r3, r1, r8, lsr r1
   128c0:	andeq	r3, r1, r8, lsr r1
   128c4:	andeq	r3, r1, r8, lsr r1
   128c8:	andeq	r3, r1, r8, lsr r1
   128cc:	andeq	r3, r1, r8, lsr r1
   128d0:	andeq	r3, r1, r8, lsr r1
   128d4:	andeq	r3, r1, r8, lsr r1
   128d8:	andeq	r3, r1, r8, lsr r1
   128dc:	andeq	r3, r1, r8, lsr r1
   128e0:	andeq	r3, r1, r8, lsr r1
   128e4:	andeq	r3, r1, r8, lsr r1
   128e8:	andeq	r3, r1, r8, lsr r1
   128ec:	andeq	r3, r1, r8, lsr r1
   128f0:	andeq	r3, r1, r8, lsr r1
   128f4:	andeq	r3, r1, r8, lsr r1
   128f8:	andeq	r3, r1, r8, lsr r1
   128fc:	andeq	r3, r1, r8, lsl r1
   12900:	andeq	r3, r1, ip, asr #32
   12904:	andeq	r3, r1, ip, asr #32
   12908:	andeq	r2, r1, ip, asr ip
   1290c:	andeq	r3, r1, ip, asr #32
   12910:	andeq	r3, r1, r4, ror #1
   12914:	andeq	r3, r1, ip, asr #32
   12918:	strheq	r3, [r1], -r8
   1291c:	andeq	r3, r1, ip, asr #32
   12920:	andeq	r3, r1, ip, asr #32
   12924:	andeq	r3, r1, ip, asr #32
   12928:	andeq	r3, r1, r4, ror #1
   1292c:	andeq	r3, r1, r4, ror #1
   12930:	andeq	r3, r1, r4, ror #1
   12934:	andeq	r3, r1, r4, ror #1
   12938:	andeq	r3, r1, r4, ror #1
   1293c:	andeq	r3, r1, r4, ror #1
   12940:	andeq	r3, r1, r4, ror #1
   12944:	andeq	r3, r1, r4, ror #1
   12948:	andeq	r3, r1, r4, ror #1
   1294c:	andeq	r3, r1, r4, ror #1
   12950:	andeq	r3, r1, r4, ror #1
   12954:	andeq	r3, r1, r4, ror #1
   12958:	andeq	r3, r1, r4, ror #1
   1295c:	andeq	r3, r1, r4, ror #1
   12960:	andeq	r3, r1, r4, ror #1
   12964:	andeq	r3, r1, r4, ror #1
   12968:	andeq	r3, r1, ip, asr #32
   1296c:	andeq	r3, r1, ip, asr #32
   12970:	andeq	r3, r1, ip, asr #32
   12974:	andeq	r3, r1, ip, asr #32
   12978:	andeq	r3, r1, r8, lsl #1
   1297c:	andeq	r3, r1, r8, lsr r1
   12980:	andeq	r3, r1, r4, ror #1
   12984:	andeq	r3, r1, r4, ror #1
   12988:	andeq	r3, r1, r4, ror #1
   1298c:	andeq	r3, r1, r4, ror #1
   12990:	andeq	r3, r1, r4, ror #1
   12994:	andeq	r3, r1, r4, ror #1
   12998:	andeq	r3, r1, r4, ror #1
   1299c:	andeq	r3, r1, r4, ror #1
   129a0:	andeq	r3, r1, r4, ror #1
   129a4:	andeq	r3, r1, r4, ror #1
   129a8:	andeq	r3, r1, r4, ror #1
   129ac:	andeq	r3, r1, r4, ror #1
   129b0:	andeq	r3, r1, r4, ror #1
   129b4:	andeq	r3, r1, r4, ror #1
   129b8:	andeq	r3, r1, r4, ror #1
   129bc:	andeq	r3, r1, r4, ror #1
   129c0:	andeq	r3, r1, r4, ror #1
   129c4:	andeq	r3, r1, r4, ror #1
   129c8:	andeq	r3, r1, r4, ror #1
   129cc:	andeq	r3, r1, r4, ror #1
   129d0:	andeq	r3, r1, r4, ror #1
   129d4:	andeq	r3, r1, r4, ror #1
   129d8:	andeq	r3, r1, r4, ror #1
   129dc:	andeq	r3, r1, r4, ror #1
   129e0:	andeq	r3, r1, r4, ror #1
   129e4:	andeq	r3, r1, r4, ror #1
   129e8:	andeq	r3, r1, ip, asr #32
   129ec:	andeq	r2, r1, r8, lsr #27
   129f0:	andeq	r3, r1, r4, ror #1
   129f4:	andeq	r3, r1, ip, asr #32
   129f8:	andeq	r3, r1, r4, ror #1
   129fc:	andeq	r3, r1, ip, asr #32
   12a00:	andeq	r3, r1, r4, ror #1
   12a04:	andeq	r3, r1, r4, ror #1
   12a08:	andeq	r3, r1, r4, ror #1
   12a0c:	andeq	r3, r1, r4, ror #1
   12a10:	andeq	r3, r1, r4, ror #1
   12a14:	andeq	r3, r1, r4, ror #1
   12a18:	andeq	r3, r1, r4, ror #1
   12a1c:	andeq	r3, r1, r4, ror #1
   12a20:	andeq	r3, r1, r4, ror #1
   12a24:	andeq	r3, r1, r4, ror #1
   12a28:	andeq	r3, r1, r4, ror #1
   12a2c:	andeq	r3, r1, r4, ror #1
   12a30:	andeq	r3, r1, r4, ror #1
   12a34:	andeq	r3, r1, r4, ror #1
   12a38:	andeq	r3, r1, r4, ror #1
   12a3c:	andeq	r3, r1, r4, ror #1
   12a40:	andeq	r3, r1, r4, ror #1
   12a44:	andeq	r3, r1, r4, ror #1
   12a48:	andeq	r3, r1, r4, ror #1
   12a4c:	andeq	r3, r1, r4, ror #1
   12a50:	andeq	r3, r1, r4, ror #1
   12a54:	andeq	r3, r1, r4, ror #1
   12a58:	andeq	r3, r1, r4, ror #1
   12a5c:	andeq	r3, r1, r4, ror #1
   12a60:	andeq	r3, r1, r4, ror #1
   12a64:	andeq	r3, r1, r4, ror #1
   12a68:	andeq	r2, r1, ip, lsr ip
   12a6c:	andeq	r3, r1, ip, asr #32
   12a70:	andeq	r2, r1, ip, lsr ip
   12a74:	andeq	r2, r1, ip, asr ip
   12a78:	mov	r3, #1
   12a7c:	str	r3, [sp, #28]
   12a80:	str	r3, [sp, #52]	; 0x34
   12a84:	ldr	r3, [pc, #4000]	; 13a2c <__assert_fail@plt+0x28b0>
   12a88:	mov	r7, #0
   12a8c:	str	r3, [sp, #64]	; 0x40
   12a90:	mov	r3, #2
   12a94:	str	r3, [sp, #152]	; 0x98
   12a98:	b	1279c <__assert_fail@plt+0x1620>
   12a9c:	ldr	r3, [sp, #28]
   12aa0:	cmp	r3, #0
   12aa4:	beq	12c00 <__assert_fail@plt+0x1a84>
   12aa8:	mov	r3, #1
   12aac:	str	r3, [sp, #52]	; 0x34
   12ab0:	ldr	r3, [pc, #3956]	; 13a2c <__assert_fail@plt+0x28b0>
   12ab4:	mov	r7, #0
   12ab8:	str	r3, [sp, #64]	; 0x40
   12abc:	b	1279c <__assert_fail@plt+0x1620>
   12ac0:	mov	r3, #1
   12ac4:	str	r3, [sp, #44]	; 0x2c
   12ac8:	str	r3, [sp, #52]	; 0x34
   12acc:	str	r3, [sp, #28]
   12ad0:	b	12a84 <__assert_fail@plt+0x1908>
   12ad4:	mov	r3, #0
   12ad8:	str	r3, [sp, #28]
   12adc:	mov	r3, #1
   12ae0:	str	r3, [sp, #44]	; 0x2c
   12ae4:	mov	r7, #0
   12ae8:	b	1279c <__assert_fail@plt+0x1620>
   12aec:	ldr	r3, [sp, #152]	; 0x98
   12af0:	cmp	r3, #10
   12af4:	beq	12b38 <__assert_fail@plt+0x19bc>
   12af8:	mov	r2, #5
   12afc:	ldr	r1, [pc, #3884]	; 13a30 <__assert_fail@plt+0x28b4>
   12b00:	mov	r0, #0
   12b04:	bl	10f60 <dcgettext@plt>
   12b08:	ldr	r2, [pc, #3872]	; 13a30 <__assert_fail@plt+0x28b4>
   12b0c:	cmp	r0, r2
   12b10:	str	r0, [sp, #164]	; 0xa4
   12b14:	beq	13b1c <__assert_fail@plt+0x29a0>
   12b18:	mov	r2, #5
   12b1c:	ldr	r1, [pc, #3848]	; 13a2c <__assert_fail@plt+0x28b0>
   12b20:	mov	r0, #0
   12b24:	bl	10f60 <dcgettext@plt>
   12b28:	ldr	r2, [pc, #3836]	; 13a2c <__assert_fail@plt+0x28b0>
   12b2c:	cmp	r0, r2
   12b30:	str	r0, [sp, #168]	; 0xa8
   12b34:	beq	13b0c <__assert_fail@plt+0x2990>
   12b38:	ldr	r7, [sp, #28]
   12b3c:	cmp	r7, #0
   12b40:	movne	r7, #0
   12b44:	bne	12b78 <__assert_fail@plt+0x19fc>
   12b48:	ldr	r3, [sp, #164]	; 0xa4
   12b4c:	ldrb	r3, [r3]
   12b50:	cmp	r3, #0
   12b54:	beq	13b2c <__assert_fail@plt+0x29b0>
   12b58:	ldr	r2, [sp, #164]	; 0xa4
   12b5c:	ldr	r1, [sp, #32]
   12b60:	cmp	fp, r7
   12b64:	strbhi	r3, [r1, r7]
   12b68:	ldrb	r3, [r2, #1]!
   12b6c:	add	r7, r7, #1
   12b70:	cmp	r3, #0
   12b74:	bne	12b60 <__assert_fail@plt+0x19e4>
   12b78:	ldr	r0, [sp, #168]	; 0xa8
   12b7c:	bl	11068 <strlen@plt>
   12b80:	ldr	r3, [sp, #168]	; 0xa8
   12b84:	str	r3, [sp, #64]	; 0x40
   12b88:	mov	r3, #1
   12b8c:	str	r3, [sp, #44]	; 0x2c
   12b90:	str	r0, [sp, #52]	; 0x34
   12b94:	b	1279c <__assert_fail@plt+0x1620>
   12b98:	mov	r3, #1
   12b9c:	str	r3, [sp, #44]	; 0x2c
   12ba0:	str	r3, [sp, #52]	; 0x34
   12ba4:	str	r3, [sp, #28]
   12ba8:	ldr	r3, [pc, #3716]	; 13a34 <__assert_fail@plt+0x28b8>
   12bac:	mov	r7, #0
   12bb0:	str	r3, [sp, #64]	; 0x40
   12bb4:	mov	r3, #5
   12bb8:	str	r3, [sp, #152]	; 0x98
   12bbc:	b	1279c <__assert_fail@plt+0x1620>
   12bc0:	ldr	r3, [sp, #28]
   12bc4:	cmp	r3, #0
   12bc8:	beq	138c8 <__assert_fail@plt+0x274c>
   12bcc:	ldr	r3, [sp, #28]
   12bd0:	mov	r7, #0
   12bd4:	str	r3, [sp, #44]	; 0x2c
   12bd8:	mov	r3, #1
   12bdc:	str	r3, [sp, #52]	; 0x34
   12be0:	ldr	r3, [pc, #3660]	; 13a34 <__assert_fail@plt+0x28b8>
   12be4:	str	r3, [sp, #64]	; 0x40
   12be8:	b	1279c <__assert_fail@plt+0x1620>
   12bec:	ldr	r3, [sp, #28]
   12bf0:	cmp	r3, #0
   12bf4:	mov	r3, #1
   12bf8:	streq	r3, [sp, #44]	; 0x2c
   12bfc:	bne	12a80 <__assert_fail@plt+0x1904>
   12c00:	cmp	fp, #0
   12c04:	beq	138f8 <__assert_fail@plt+0x277c>
   12c08:	ldr	r3, [sp, #32]
   12c0c:	mov	r2, #39	; 0x27
   12c10:	mov	r7, #1
   12c14:	strb	r2, [r3]
   12c18:	mov	r3, #0
   12c1c:	str	r3, [sp, #28]
   12c20:	mov	r3, #1
   12c24:	str	r3, [sp, #52]	; 0x34
   12c28:	ldr	r3, [pc, #3580]	; 13a2c <__assert_fail@plt+0x28b0>
   12c2c:	str	r3, [sp, #64]	; 0x40
   12c30:	mov	r3, #2
   12c34:	str	r3, [sp, #152]	; 0x98
   12c38:	b	1279c <__assert_fail@plt+0x1620>
   12c3c:	ldr	r3, [sp, #24]
   12c40:	cmn	r3, #1
   12c44:	beq	1385c <__assert_fail@plt+0x26e0>
   12c48:	ldr	r3, [sp, #24]
   12c4c:	subs	r3, r3, #1
   12c50:	movne	r3, #1
   12c54:	cmp	r3, #0
   12c58:	bne	12c64 <__assert_fail@plt+0x1ae8>
   12c5c:	cmp	sl, #0
   12c60:	beq	13050 <__assert_fail@plt+0x1ed4>
   12c64:	ldr	r3, [sp, #152]	; 0x98
   12c68:	mov	r5, #0
   12c6c:	sub	r2, r3, #2
   12c70:	mov	r8, r5
   12c74:	clz	r2, r2
   12c78:	lsr	r2, r2, #5
   12c7c:	ldr	r3, [sp, #60]	; 0x3c
   12c80:	ldr	r1, [sp, #28]
   12c84:	orr	r3, r2, r3
   12c88:	eor	r3, r3, #1
   12c8c:	orr	r3, r1, r3
   12c90:	tst	r3, #255	; 0xff
   12c94:	bne	133c0 <__assert_fail@plt+0x2244>
   12c98:	cmp	r6, #0
   12c9c:	bne	12dec <__assert_fail@plt+0x1c70>
   12ca0:	ldr	r3, [sp, #40]	; 0x28
   12ca4:	eor	r8, r8, #1
   12ca8:	and	r8, r8, r3
   12cac:	add	sl, sl, #1
   12cb0:	uxtb	r6, r8
   12cb4:	cmp	r6, #0
   12cb8:	beq	12cec <__assert_fail@plt+0x1b70>
   12cbc:	cmp	fp, r7
   12cc0:	movhi	r2, #39	; 0x27
   12cc4:	ldrhi	r3, [sp, #32]
   12cc8:	strbhi	r2, [r3, r7]
   12ccc:	add	r3, r7, #1
   12cd0:	cmp	fp, r3
   12cd4:	movhi	r1, #39	; 0x27
   12cd8:	ldrhi	r2, [sp, #32]
   12cdc:	add	r7, r7, #2
   12ce0:	strbhi	r1, [r2, r3]
   12ce4:	mov	r3, #0
   12ce8:	str	r3, [sp, #40]	; 0x28
   12cec:	cmp	r7, fp
   12cf0:	ldrcc	r3, [sp, #32]
   12cf4:	strbcc	r4, [r3, r7]
   12cf8:	ldr	r3, [sp, #36]	; 0x24
   12cfc:	cmp	r5, #0
   12d00:	moveq	r3, #0
   12d04:	str	r3, [sp, #36]	; 0x24
   12d08:	ldr	r3, [sp, #24]
   12d0c:	add	r7, r7, #1
   12d10:	cmn	r3, #1
   12d14:	bne	127b8 <__assert_fail@plt+0x163c>
   12d18:	ldr	r3, [sp, #56]	; 0x38
   12d1c:	ldrb	r5, [r3, sl]
   12d20:	adds	r5, r5, #0
   12d24:	movne	r5, #1
   12d28:	cmp	r5, #0
   12d2c:	bne	127cc <__assert_fail@plt+0x1650>
   12d30:	ldr	r3, [sp, #152]	; 0x98
   12d34:	ldr	r1, [sp, #28]
   12d38:	sub	r3, r3, #2
   12d3c:	clz	r3, r3
   12d40:	lsr	r3, r3, #5
   12d44:	and	r9, r1, r3
   12d48:	cmp	r7, #0
   12d4c:	movne	r2, #0
   12d50:	andeq	r2, r9, #1
   12d54:	cmp	r2, #0
   12d58:	bne	13734 <__assert_fail@plt+0x25b8>
   12d5c:	eor	r2, r1, #1
   12d60:	ands	r3, r3, r2
   12d64:	beq	13bf0 <__assert_fail@plt+0x2a74>
   12d68:	ldr	r2, [sp, #68]	; 0x44
   12d6c:	cmp	r2, #0
   12d70:	beq	13bdc <__assert_fail@plt+0x2a60>
   12d74:	ldr	r3, [sp, #36]	; 0x24
   12d78:	cmp	r3, #0
   12d7c:	bne	13b94 <__assert_fail@plt+0x2a18>
   12d80:	ldr	r2, [sp, #72]	; 0x48
   12d84:	clz	r3, fp
   12d88:	cmp	r2, #0
   12d8c:	lsr	r3, r3, #5
   12d90:	moveq	r3, #0
   12d94:	cmp	r3, #0
   12d98:	beq	13b34 <__assert_fail@plt+0x29b8>
   12d9c:	str	r3, [sp, #68]	; 0x44
   12da0:	ldr	fp, [sp, #72]	; 0x48
   12da4:	b	12754 <__assert_fail@plt+0x15d8>
   12da8:	ldr	r3, [sp, #152]	; 0x98
   12dac:	cmp	r3, #2
   12db0:	beq	13404 <__assert_fail@plt+0x2288>
   12db4:	ldr	r3, [sp, #44]	; 0x2c
   12db8:	ldr	r2, [sp, #28]
   12dbc:	and	r2, r3, r2
   12dc0:	ands	r2, r9, r2
   12dc4:	bne	13410 <__assert_fail@plt+0x2294>
   12dc8:	mov	r4, #92	; 0x5c
   12dcc:	mov	r3, r4
   12dd0:	ldr	r1, [sp, #44]	; 0x2c
   12dd4:	cmp	r1, #0
   12dd8:	moveq	r5, #0
   12ddc:	moveq	r8, r1
   12de0:	beq	12c7c <__assert_fail@plt+0x1b00>
   12de4:	mov	r4, r3
   12de8:	mov	r5, #0
   12dec:	ldr	r3, [sp, #28]
   12df0:	cmp	r3, #0
   12df4:	bne	133f8 <__assert_fail@plt+0x227c>
   12df8:	ldr	r3, [sp, #40]	; 0x28
   12dfc:	eor	r9, r3, #1
   12e00:	and	r9, r9, r2
   12e04:	ands	r9, r9, #255	; 0xff
   12e08:	beq	12e4c <__assert_fail@plt+0x1cd0>
   12e0c:	cmp	fp, r7
   12e10:	movhi	r2, #39	; 0x27
   12e14:	ldrhi	r3, [sp, #32]
   12e18:	str	r9, [sp, #40]	; 0x28
   12e1c:	strbhi	r2, [r3, r7]
   12e20:	add	r3, r7, #1
   12e24:	cmp	fp, r3
   12e28:	movhi	r1, #36	; 0x24
   12e2c:	ldrhi	r2, [sp, #32]
   12e30:	strbhi	r1, [r2, r3]
   12e34:	add	r3, r7, #2
   12e38:	cmp	fp, r3
   12e3c:	add	r7, r7, #3
   12e40:	ldrhi	r2, [sp, #32]
   12e44:	movhi	r1, #39	; 0x27
   12e48:	strbhi	r1, [r2, r3]
   12e4c:	cmp	fp, r7
   12e50:	movhi	r2, #92	; 0x5c
   12e54:	ldrhi	r3, [sp, #32]
   12e58:	add	sl, sl, #1
   12e5c:	strbhi	r2, [r3, r7]
   12e60:	add	r7, r7, #1
   12e64:	b	12cec <__assert_fail@plt+0x1b70>
   12e68:	ldr	r3, [sp, #152]	; 0x98
   12e6c:	mov	r4, #11
   12e70:	sub	r2, r3, #2
   12e74:	mov	r3, #118	; 0x76
   12e78:	clz	r2, r2
   12e7c:	lsr	r2, r2, #5
   12e80:	b	12dd0 <__assert_fail@plt+0x1c54>
   12e84:	mov	r4, #10
   12e88:	mov	r3, #110	; 0x6e
   12e8c:	ldr	r2, [sp, #152]	; 0x98
   12e90:	ldr	r1, [sp, #28]
   12e94:	sub	r2, r2, #2
   12e98:	clz	r2, r2
   12e9c:	lsr	r2, r2, #5
   12ea0:	ands	r1, r1, r2
   12ea4:	beq	12dd0 <__assert_fail@plt+0x1c54>
   12ea8:	ldr	sl, [sp, #32]
   12eac:	mov	r8, fp
   12eb0:	mov	r2, r1
   12eb4:	mov	r3, #2
   12eb8:	str	r3, [sp, #152]	; 0x98
   12ebc:	ldr	r9, [sp, #44]	; 0x2c
   12ec0:	ldr	r3, [sp, #152]	; 0x98
   12ec4:	and	r9, r9, r2
   12ec8:	tst	r9, #255	; 0xff
   12ecc:	movne	r3, #4
   12ed0:	str	r3, [sp, #152]	; 0x98
   12ed4:	ldr	r3, [sp, #156]	; 0x9c
   12ed8:	mov	ip, #0
   12edc:	bic	r3, r3, #2
   12ee0:	str	r3, [sp, #4]
   12ee4:	ldr	r3, [sp, #168]	; 0xa8
   12ee8:	ldr	r2, [sp, #56]	; 0x38
   12eec:	str	r3, [sp, #16]
   12ef0:	ldr	r3, [sp, #164]	; 0xa4
   12ef4:	mov	r1, r8
   12ef8:	str	r3, [sp, #12]
   12efc:	ldr	r3, [sp, #152]	; 0x98
   12f00:	mov	r0, sl
   12f04:	str	r3, [sp]
   12f08:	str	ip, [sp, #8]
   12f0c:	ldr	r3, [sp, #24]
   12f10:	bl	126f8 <__assert_fail@plt+0x157c>
   12f14:	mov	fp, r0
   12f18:	mov	r0, fp
   12f1c:	add	sp, sp, #116	; 0x74
   12f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f24:	ldr	r3, [sp, #152]	; 0x98
   12f28:	mov	r4, #8
   12f2c:	sub	r2, r3, #2
   12f30:	mov	r3, #98	; 0x62
   12f34:	clz	r2, r2
   12f38:	lsr	r2, r2, #5
   12f3c:	b	12dd0 <__assert_fail@plt+0x1c54>
   12f40:	ldr	r3, [sp, #152]	; 0x98
   12f44:	mov	r4, #7
   12f48:	sub	r2, r3, #2
   12f4c:	mov	r3, #97	; 0x61
   12f50:	clz	r2, r2
   12f54:	lsr	r2, r2, #5
   12f58:	b	12dd0 <__assert_fail@plt+0x1c54>
   12f5c:	ldr	r3, [sp, #44]	; 0x2c
   12f60:	cmp	r3, #0
   12f64:	beq	13748 <__assert_fail@plt+0x25cc>
   12f68:	ldr	r3, [sp, #28]
   12f6c:	cmp	r3, #0
   12f70:	bne	13a20 <__assert_fail@plt+0x28a4>
   12f74:	ldr	r3, [sp, #152]	; 0x98
   12f78:	sub	r2, r3, #2
   12f7c:	ldr	r3, [sp, #40]	; 0x28
   12f80:	clz	r2, r2
   12f84:	eor	r3, r3, #1
   12f88:	lsr	r2, r2, #5
   12f8c:	ands	r3, r2, r3
   12f90:	moveq	r1, r7
   12f94:	beq	12fd8 <__assert_fail@plt+0x1e5c>
   12f98:	cmp	fp, r7
   12f9c:	movhi	r0, #39	; 0x27
   12fa0:	ldrhi	r1, [sp, #32]
   12fa4:	str	r3, [sp, #40]	; 0x28
   12fa8:	strbhi	r0, [r1, r7]
   12fac:	add	r1, r7, #1
   12fb0:	cmp	fp, r1
   12fb4:	movhi	ip, #36	; 0x24
   12fb8:	ldrhi	r0, [sp, #32]
   12fbc:	strbhi	ip, [r0, r1]
   12fc0:	add	r1, r7, #2
   12fc4:	cmp	fp, r1
   12fc8:	movhi	ip, #39	; 0x27
   12fcc:	ldrhi	r0, [sp, #32]
   12fd0:	strbhi	ip, [r0, r1]
   12fd4:	add	r1, r7, #3
   12fd8:	cmp	fp, r1
   12fdc:	movhi	r0, #92	; 0x5c
   12fe0:	ldrhi	r3, [sp, #32]
   12fe4:	add	r7, r1, #1
   12fe8:	strbhi	r0, [r3, r1]
   12fec:	cmp	r8, #0
   12ff0:	beq	13934 <__assert_fail@plt+0x27b8>
   12ff4:	ldr	r0, [sp, #24]
   12ff8:	add	r3, sl, #1
   12ffc:	cmp	r3, r0
   13000:	bcs	13870 <__assert_fail@plt+0x26f4>
   13004:	ldr	r0, [sp, #56]	; 0x38
   13008:	ldrb	r3, [r0, r3]
   1300c:	sub	r3, r3, #48	; 0x30
   13010:	cmp	r3, #9
   13014:	bhi	13870 <__assert_fail@plt+0x26f4>
   13018:	cmp	fp, r7
   1301c:	movhi	r3, #48	; 0x30
   13020:	ldrhi	r0, [sp, #32]
   13024:	ldr	r5, [sp, #28]
   13028:	mov	r4, #48	; 0x30
   1302c:	strbhi	r3, [r0, r7]
   13030:	add	r3, r1, #2
   13034:	cmp	fp, r3
   13038:	movhi	r0, #48	; 0x30
   1303c:	ldrhi	ip, [sp, #32]
   13040:	add	r7, r1, #3
   13044:	strbhi	r0, [ip, r3]
   13048:	b	12c7c <__assert_fail@plt+0x1b00>
   1304c:	mov	r5, #0
   13050:	ldr	r3, [sp, #152]	; 0x98
   13054:	sub	r2, r3, #2
   13058:	ldr	r3, [sp, #28]
   1305c:	clz	r2, r2
   13060:	lsr	r2, r2, #5
   13064:	ands	r8, r3, r2
   13068:	beq	12c7c <__assert_fail@plt+0x1b00>
   1306c:	mov	r3, r8
   13070:	mov	r2, r3
   13074:	mov	r3, #2
   13078:	ldr	sl, [sp, #32]
   1307c:	mov	r8, fp
   13080:	str	r3, [sp, #152]	; 0x98
   13084:	b	12ebc <__assert_fail@plt+0x1d40>
   13088:	ldr	r3, [sp, #152]	; 0x98
   1308c:	cmp	r3, #2
   13090:	beq	137b4 <__assert_fail@plt+0x2638>
   13094:	cmp	r3, #5
   13098:	beq	13774 <__assert_fail@plt+0x25f8>
   1309c:	mov	r5, #0
   130a0:	sub	r2, r3, #2
   130a4:	mov	r8, r5
   130a8:	clz	r2, r2
   130ac:	mov	r4, #63	; 0x3f
   130b0:	lsr	r2, r2, #5
   130b4:	b	12c7c <__assert_fail@plt+0x1b00>
   130b8:	ldr	r3, [sp, #152]	; 0x98
   130bc:	cmp	r3, #2
   130c0:	beq	137d4 <__assert_fail@plt+0x2658>
   130c4:	mov	r2, #0
   130c8:	str	r5, [sp, #68]	; 0x44
   130cc:	mov	r8, r2
   130d0:	mov	r4, #39	; 0x27
   130d4:	b	12c7c <__assert_fail@plt+0x1b00>
   130d8:	mov	r4, #13
   130dc:	mov	r3, #114	; 0x72
   130e0:	b	12e8c <__assert_fail@plt+0x1d10>
   130e4:	ldr	r3, [sp, #152]	; 0x98
   130e8:	mov	r8, #0
   130ec:	sub	r2, r3, #2
   130f0:	clz	r2, r2
   130f4:	lsr	r2, r2, #5
   130f8:	b	12c7c <__assert_fail@plt+0x1b00>
   130fc:	ldr	r3, [sp, #152]	; 0x98
   13100:	mov	r4, #12
   13104:	sub	r2, r3, #2
   13108:	mov	r3, #102	; 0x66
   1310c:	clz	r2, r2
   13110:	lsr	r2, r2, #5
   13114:	b	12dd0 <__assert_fail@plt+0x1c54>
   13118:	mov	r5, r6
   1311c:	b	13050 <__assert_fail@plt+0x1ed4>
   13120:	ldr	r3, [sp, #152]	; 0x98
   13124:	sub	r2, r3, #2
   13128:	mov	r3, #116	; 0x74
   1312c:	clz	r2, r2
   13130:	lsr	r2, r2, #5
   13134:	b	12dd0 <__assert_fail@plt+0x1c54>
   13138:	ldr	r8, [sp, #76]	; 0x4c
   1313c:	cmp	r8, #1
   13140:	bne	135f0 <__assert_fail@plt+0x2474>
   13144:	bl	11044 <__ctype_b_loc@plt>
   13148:	sxth	r3, r4
   1314c:	mov	ip, r8
   13150:	lsl	r3, r3, #1
   13154:	ldr	r2, [r0]
   13158:	ldrh	r3, [r2, r3]
   1315c:	and	r3, r3, #16384	; 0x4000
   13160:	cmp	r3, #0
   13164:	movne	r5, #1
   13168:	moveq	r5, #0
   1316c:	moveq	r3, #1
   13170:	movne	r3, #0
   13174:	ldr	r2, [sp, #44]	; 0x2c
   13178:	and	r3, r3, r2
   1317c:	ands	r8, r3, #255	; 0xff
   13180:	bne	13484 <__assert_fail@plt+0x2308>
   13184:	ldr	r3, [sp, #152]	; 0x98
   13188:	sub	r2, r3, #2
   1318c:	clz	r2, r2
   13190:	lsr	r2, r2, #5
   13194:	b	12c7c <__assert_fail@plt+0x1b00>
   13198:	ldr	r3, [sp, #56]	; 0x38
   1319c:	add	r3, r3, sl
   131a0:	str	r3, [sp, #48]	; 0x30
   131a4:	ldr	r3, [sp, #48]	; 0x30
   131a8:	mov	r6, #0
   131ac:	ldrb	r4, [r3]
   131b0:	cmp	r4, #126	; 0x7e
   131b4:	ldrls	pc, [pc, r4, lsl #2]
   131b8:	b	13138 <__assert_fail@plt+0x1fbc>
   131bc:	andeq	r2, r1, ip, asr pc
   131c0:	andeq	r3, r1, r8, lsr r1
   131c4:	andeq	r3, r1, r8, lsr r1
   131c8:	andeq	r3, r1, r8, lsr r1
   131cc:	andeq	r3, r1, r8, lsr r1
   131d0:	andeq	r3, r1, r8, lsr r1
   131d4:	andeq	r3, r1, r8, lsr r1
   131d8:	andeq	r2, r1, r0, asr #30
   131dc:	andeq	r2, r1, r4, lsr #30
   131e0:			; <UNDEFINED> instruction: 0x000133b8
   131e4:	andeq	r2, r1, r4, lsl #29
   131e8:	andeq	r2, r1, r8, ror #28
   131ec:	strdeq	r3, [r1], -ip
   131f0:	ldrdeq	r3, [r1], -r8
   131f4:	andeq	r3, r1, r8, lsr r1
   131f8:	andeq	r3, r1, r8, lsr r1
   131fc:	andeq	r3, r1, r8, lsr r1
   13200:	andeq	r3, r1, r8, lsr r1
   13204:	andeq	r3, r1, r8, lsr r1
   13208:	andeq	r3, r1, r8, lsr r1
   1320c:	andeq	r3, r1, r8, lsr r1
   13210:	andeq	r3, r1, r8, lsr r1
   13214:	andeq	r3, r1, r8, lsr r1
   13218:	andeq	r3, r1, r8, lsr r1
   1321c:	andeq	r3, r1, r8, lsr r1
   13220:	andeq	r3, r1, r8, lsr r1
   13224:	andeq	r3, r1, r8, lsr r1
   13228:	andeq	r3, r1, r8, lsr r1
   1322c:	andeq	r3, r1, r8, lsr r1
   13230:	andeq	r3, r1, r8, lsr r1
   13234:	andeq	r3, r1, r8, lsr r1
   13238:	andeq	r3, r1, r8, lsr r1
   1323c:	andeq	r3, r1, r0, asr r0
   13240:	andeq	r3, r1, ip, asr #32
   13244:	andeq	r3, r1, ip, asr #32
   13248:	andeq	r2, r1, ip, asr ip
   1324c:	andeq	r3, r1, ip, asr #32
   13250:	andeq	r3, r1, r4, ror #1
   13254:	andeq	r3, r1, ip, asr #32
   13258:	strheq	r3, [r1], -r8
   1325c:	andeq	r3, r1, ip, asr #32
   13260:	andeq	r3, r1, ip, asr #32
   13264:	andeq	r3, r1, ip, asr #32
   13268:	andeq	r3, r1, r4, ror #1
   1326c:	andeq	r3, r1, r4, ror #1
   13270:	andeq	r3, r1, r4, ror #1
   13274:	andeq	r3, r1, r4, ror #1
   13278:	andeq	r3, r1, r4, ror #1
   1327c:	andeq	r3, r1, r4, ror #1
   13280:	andeq	r3, r1, r4, ror #1
   13284:	andeq	r3, r1, r4, ror #1
   13288:	andeq	r3, r1, r4, ror #1
   1328c:	andeq	r3, r1, r4, ror #1
   13290:	andeq	r3, r1, r4, ror #1
   13294:	andeq	r3, r1, r4, ror #1
   13298:	andeq	r3, r1, r4, ror #1
   1329c:	andeq	r3, r1, r4, ror #1
   132a0:	andeq	r3, r1, r4, ror #1
   132a4:	andeq	r3, r1, r4, ror #1
   132a8:	andeq	r3, r1, ip, asr #32
   132ac:	andeq	r3, r1, ip, asr #32
   132b0:	andeq	r3, r1, ip, asr #32
   132b4:	andeq	r3, r1, ip, asr #32
   132b8:	andeq	r3, r1, r8, lsl #1
   132bc:	andeq	r3, r1, r8, lsr r1
   132c0:	andeq	r3, r1, r4, ror #1
   132c4:	andeq	r3, r1, r4, ror #1
   132c8:	andeq	r3, r1, r4, ror #1
   132cc:	andeq	r3, r1, r4, ror #1
   132d0:	andeq	r3, r1, r4, ror #1
   132d4:	andeq	r3, r1, r4, ror #1
   132d8:	andeq	r3, r1, r4, ror #1
   132dc:	andeq	r3, r1, r4, ror #1
   132e0:	andeq	r3, r1, r4, ror #1
   132e4:	andeq	r3, r1, r4, ror #1
   132e8:	andeq	r3, r1, r4, ror #1
   132ec:	andeq	r3, r1, r4, ror #1
   132f0:	andeq	r3, r1, r4, ror #1
   132f4:	andeq	r3, r1, r4, ror #1
   132f8:	andeq	r3, r1, r4, ror #1
   132fc:	andeq	r3, r1, r4, ror #1
   13300:	andeq	r3, r1, r4, ror #1
   13304:	andeq	r3, r1, r4, ror #1
   13308:	andeq	r3, r1, r4, ror #1
   1330c:	andeq	r3, r1, r4, ror #1
   13310:	andeq	r3, r1, r4, ror #1
   13314:	andeq	r3, r1, r4, ror #1
   13318:	andeq	r3, r1, r4, ror #1
   1331c:	andeq	r3, r1, r4, ror #1
   13320:	andeq	r3, r1, r4, ror #1
   13324:	andeq	r3, r1, r4, ror #1
   13328:	andeq	r3, r1, ip, asr #32
   1332c:	andeq	r2, r1, r8, lsr #27
   13330:	andeq	r3, r1, r4, ror #1
   13334:	andeq	r3, r1, ip, asr #32
   13338:	andeq	r3, r1, r4, ror #1
   1333c:	andeq	r3, r1, ip, asr #32
   13340:	andeq	r3, r1, r4, ror #1
   13344:	andeq	r3, r1, r4, ror #1
   13348:	andeq	r3, r1, r4, ror #1
   1334c:	andeq	r3, r1, r4, ror #1
   13350:	andeq	r3, r1, r4, ror #1
   13354:	andeq	r3, r1, r4, ror #1
   13358:	andeq	r3, r1, r4, ror #1
   1335c:	andeq	r3, r1, r4, ror #1
   13360:	andeq	r3, r1, r4, ror #1
   13364:	andeq	r3, r1, r4, ror #1
   13368:	andeq	r3, r1, r4, ror #1
   1336c:	andeq	r3, r1, r4, ror #1
   13370:	andeq	r3, r1, r4, ror #1
   13374:	andeq	r3, r1, r4, ror #1
   13378:	andeq	r3, r1, r4, ror #1
   1337c:	andeq	r3, r1, r4, ror #1
   13380:	andeq	r3, r1, r4, ror #1
   13384:	andeq	r3, r1, r4, ror #1
   13388:	andeq	r3, r1, r4, ror #1
   1338c:	andeq	r3, r1, r4, ror #1
   13390:	andeq	r3, r1, r4, ror #1
   13394:	andeq	r3, r1, r4, ror #1
   13398:	andeq	r3, r1, r4, ror #1
   1339c:	andeq	r3, r1, r4, ror #1
   133a0:	andeq	r3, r1, r4, ror #1
   133a4:	andeq	r3, r1, r4, ror #1
   133a8:	andeq	r2, r1, ip, lsr ip
   133ac:	andeq	r3, r1, ip, asr #32
   133b0:	andeq	r2, r1, ip, lsr ip
   133b4:	andeq	r2, r1, ip, asr ip
   133b8:	mov	r3, #116	; 0x74
   133bc:	b	12e8c <__assert_fail@plt+0x1d10>
   133c0:	ldr	r3, [sp, #160]	; 0xa0
   133c4:	cmp	r3, #0
   133c8:	beq	12c98 <__assert_fail@plt+0x1b1c>
   133cc:	lsr	r3, r4, #5
   133d0:	ldr	r0, [sp, #160]	; 0xa0
   133d4:	uxtb	r3, r3
   133d8:	and	r1, r4, #31
   133dc:	ldr	r0, [r0, r3, lsl #2]
   133e0:	lsr	r3, r0, r1
   133e4:	tst	r3, #1
   133e8:	beq	12c98 <__assert_fail@plt+0x1b1c>
   133ec:	ldr	r3, [sp, #28]
   133f0:	cmp	r3, #0
   133f4:	beq	12df8 <__assert_fail@plt+0x1c7c>
   133f8:	ldr	sl, [sp, #32]
   133fc:	mov	r8, fp
   13400:	b	12ebc <__assert_fail@plt+0x1d40>
   13404:	ldr	r3, [sp, #28]
   13408:	cmp	r3, #0
   1340c:	bne	13960 <__assert_fail@plt+0x27e4>
   13410:	add	sl, sl, #1
   13414:	ldr	r6, [sp, #40]	; 0x28
   13418:	mov	r5, #0
   1341c:	mov	r4, #92	; 0x5c
   13420:	b	12cb4 <__assert_fail@plt+0x1b38>
   13424:	cmp	r9, r8
   13428:	bne	13698 <__assert_fail@plt+0x251c>
   1342c:	ldr	r0, [sp, #100]	; 0x64
   13430:	bl	10f90 <iswprint@plt>
   13434:	add	r5, r5, r4
   13438:	cmp	r0, #0
   1343c:	add	r0, sp, #104	; 0x68
   13440:	moveq	r6, #0
   13444:	bl	10f3c <mbsinit@plt>
   13448:	cmp	r0, #0
   1344c:	beq	1362c <__assert_fail@plt+0x24b0>
   13450:	mov	r2, r6
   13454:	mov	ip, r5
   13458:	eor	r5, r2, #1
   1345c:	ldr	r4, [sp, #80]	; 0x50
   13460:	ldr	r6, [sp, #84]	; 0x54
   13464:	ldr	r7, [sp, #88]	; 0x58
   13468:	uxtb	r5, r5
   1346c:	cmp	ip, #1
   13470:	bls	13970 <__assert_fail@plt+0x27f4>
   13474:	ldr	r3, [sp, #44]	; 0x2c
   13478:	and	r8, r3, r5
   1347c:	mov	r5, r2
   13480:	uxtb	r8, r8
   13484:	add	r2, sl, ip
   13488:	ldr	r0, [sp, #48]	; 0x30
   1348c:	mov	r1, #0
   13490:	str	r5, [sp, #48]	; 0x30
   13494:	ldr	r9, [sp, #28]
   13498:	ldr	ip, [sp, #40]	; 0x28
   1349c:	ldr	r3, [sp, #32]
   134a0:	ldr	r5, [sp, #152]	; 0x98
   134a4:	b	13560 <__assert_fail@plt+0x23e4>
   134a8:	cmp	r9, #0
   134ac:	bne	13884 <__assert_fail@plt+0x2708>
   134b0:	eor	r1, ip, #1
   134b4:	cmp	r5, #2
   134b8:	movne	r1, #0
   134bc:	andeq	r1, r1, #1
   134c0:	cmp	r1, #0
   134c4:	beq	134fc <__assert_fail@plt+0x2380>
   134c8:	cmp	fp, r7
   134cc:	movhi	ip, #39	; 0x27
   134d0:	strbhi	ip, [r3, r7]
   134d4:	add	ip, r7, #1
   134d8:	cmp	fp, ip
   134dc:	movhi	lr, #36	; 0x24
   134e0:	strbhi	lr, [r3, ip]
   134e4:	add	ip, r7, #2
   134e8:	cmp	fp, ip
   134ec:	movhi	lr, #39	; 0x27
   134f0:	strbhi	lr, [r3, ip]
   134f4:	add	r7, r7, #3
   134f8:	mov	ip, r1
   134fc:	cmp	fp, r7
   13500:	movhi	r1, #92	; 0x5c
   13504:	strbhi	r1, [r3, r7]
   13508:	add	r1, r7, #1
   1350c:	cmp	fp, r1
   13510:	lsrhi	lr, r4, #6
   13514:	addhi	lr, lr, #48	; 0x30
   13518:	strbhi	lr, [r3, r1]
   1351c:	add	lr, r7, #2
   13520:	cmp	fp, lr
   13524:	lsrhi	r1, r4, #3
   13528:	andhi	r1, r1, #7
   1352c:	addhi	r1, r1, #48	; 0x30
   13530:	add	sl, sl, #1
   13534:	strbhi	r1, [r3, lr]
   13538:	and	r4, r4, #7
   1353c:	cmp	r2, sl
   13540:	add	r4, r4, #48	; 0x30
   13544:	add	r7, r7, #3
   13548:	bls	138a8 <__assert_fail@plt+0x272c>
   1354c:	mov	r1, r8
   13550:	cmp	fp, r7
   13554:	strbhi	r4, [r3, r7]
   13558:	ldrb	r4, [r0, #1]!
   1355c:	add	r7, r7, #1
   13560:	cmp	r8, #0
   13564:	bne	134a8 <__assert_fail@plt+0x232c>
   13568:	cmp	r6, #0
   1356c:	bne	135bc <__assert_fail@plt+0x2440>
   13570:	eor	r6, r1, #1
   13574:	and	r6, r6, ip
   13578:	add	sl, sl, #1
   1357c:	cmp	r2, sl
   13580:	uxtb	r6, r6
   13584:	bls	135e4 <__assert_fail@plt+0x2468>
   13588:	cmp	r6, #0
   1358c:	beq	13550 <__assert_fail@plt+0x23d4>
   13590:	cmp	fp, r7
   13594:	movhi	ip, #39	; 0x27
   13598:	strbhi	ip, [r3, r7]
   1359c:	add	ip, r7, #1
   135a0:	cmp	fp, ip
   135a4:	movhi	lr, #39	; 0x27
   135a8:	strbhi	lr, [r3, ip]
   135ac:	add	r7, r7, #2
   135b0:	mov	r6, r8
   135b4:	mov	ip, r8
   135b8:	b	13550 <__assert_fail@plt+0x23d4>
   135bc:	cmp	fp, r7
   135c0:	eor	r6, r1, #1
   135c4:	movhi	lr, #92	; 0x5c
   135c8:	and	r6, r6, ip
   135cc:	add	sl, sl, #1
   135d0:	strbhi	lr, [r3, r7]
   135d4:	cmp	r2, sl
   135d8:	add	r7, r7, #1
   135dc:	uxtb	r6, r6
   135e0:	bhi	13588 <__assert_fail@plt+0x240c>
   135e4:	str	ip, [sp, #40]	; 0x28
   135e8:	ldr	r5, [sp, #48]	; 0x30
   135ec:	b	12cb4 <__assert_fail@plt+0x1b38>
   135f0:	ldr	r3, [sp, #24]
   135f4:	cmn	r3, #1
   135f8:	mov	r3, #0
   135fc:	str	r3, [sp, #104]	; 0x68
   13600:	str	r3, [sp, #108]	; 0x6c
   13604:	beq	13924 <__assert_fail@plt+0x27a8>
   13608:	mov	r2, r5
   1360c:	mov	r3, #0
   13610:	str	r7, [sp, #88]	; 0x58
   13614:	ldr	r7, [sp, #152]	; 0x98
   13618:	str	r5, [sp, #92]	; 0x5c
   1361c:	str	r6, [sp, #84]	; 0x54
   13620:	mov	r5, r3
   13624:	mov	r6, r2
   13628:	str	r4, [sp, #80]	; 0x50
   1362c:	ldr	r3, [sp, #56]	; 0x38
   13630:	add	r9, sl, r5
   13634:	add	r8, r3, r9
   13638:	ldr	r3, [sp, #24]
   1363c:	mov	r1, r8
   13640:	sub	r2, r3, r9
   13644:	add	r0, sp, #100	; 0x64
   13648:	add	r3, sp, #104	; 0x68
   1364c:	bl	15a74 <__assert_fail@plt+0x48f8>
   13650:	subs	r4, r0, #0
   13654:	beq	139fc <__assert_fail@plt+0x2880>
   13658:	cmn	r4, #1
   1365c:	beq	139dc <__assert_fail@plt+0x2860>
   13660:	cmn	r4, #2
   13664:	beq	1397c <__assert_fail@plt+0x2800>
   13668:	ldr	r2, [sp, #28]
   1366c:	cmp	r7, #2
   13670:	movne	r2, #0
   13674:	andeq	r2, r2, #1
   13678:	cmp	r2, #0
   1367c:	beq	1342c <__assert_fail@plt+0x22b0>
   13680:	cmp	r4, #1
   13684:	beq	1342c <__assert_fail@plt+0x22b0>
   13688:	sub	r3, r4, #1
   1368c:	add	r9, r3, r9
   13690:	ldr	r3, [sp, #56]	; 0x38
   13694:	add	r9, r3, r9
   13698:	ldrb	r3, [r8, #1]!
   1369c:	sub	r3, r3, #91	; 0x5b
   136a0:	cmp	r3, #33	; 0x21
   136a4:	ldrls	pc, [pc, r3, lsl #2]
   136a8:	b	13424 <__assert_fail@plt+0x22a8>
   136ac:	andeq	r3, r1, r4, lsr r7
   136b0:	andeq	r3, r1, r4, lsr r7
   136b4:	andeq	r3, r1, r4, lsr #8
   136b8:	andeq	r3, r1, r4, lsr r7
   136bc:	andeq	r3, r1, r4, lsr #8
   136c0:	andeq	r3, r1, r4, lsr r7
   136c4:	andeq	r3, r1, r4, lsr #8
   136c8:	andeq	r3, r1, r4, lsr #8
   136cc:	andeq	r3, r1, r4, lsr #8
   136d0:	andeq	r3, r1, r4, lsr #8
   136d4:	andeq	r3, r1, r4, lsr #8
   136d8:	andeq	r3, r1, r4, lsr #8
   136dc:	andeq	r3, r1, r4, lsr #8
   136e0:	andeq	r3, r1, r4, lsr #8
   136e4:	andeq	r3, r1, r4, lsr #8
   136e8:	andeq	r3, r1, r4, lsr #8
   136ec:	andeq	r3, r1, r4, lsr #8
   136f0:	andeq	r3, r1, r4, lsr #8
   136f4:	andeq	r3, r1, r4, lsr #8
   136f8:	andeq	r3, r1, r4, lsr #8
   136fc:	andeq	r3, r1, r4, lsr #8
   13700:	andeq	r3, r1, r4, lsr #8
   13704:	andeq	r3, r1, r4, lsr #8
   13708:	andeq	r3, r1, r4, lsr #8
   1370c:	andeq	r3, r1, r4, lsr #8
   13710:	andeq	r3, r1, r4, lsr #8
   13714:	andeq	r3, r1, r4, lsr #8
   13718:	andeq	r3, r1, r4, lsr #8
   1371c:	andeq	r3, r1, r4, lsr #8
   13720:	andeq	r3, r1, r4, lsr #8
   13724:	andeq	r3, r1, r4, lsr #8
   13728:	andeq	r3, r1, r4, lsr #8
   1372c:	andeq	r3, r1, r4, lsr #8
   13730:	andeq	r3, r1, r4, lsr r7
   13734:	mov	r3, #2
   13738:	ldr	sl, [sp, #32]
   1373c:	mov	r8, fp
   13740:	str	r3, [sp, #152]	; 0x98
   13744:	b	12ebc <__assert_fail@plt+0x1d40>
   13748:	ldr	r3, [sp, #156]	; 0x9c
   1374c:	tst	r3, #1
   13750:	bne	1387c <__assert_fail@plt+0x2700>
   13754:	ldr	r3, [sp, #152]	; 0x98
   13758:	ldr	r4, [sp, #44]	; 0x2c
   1375c:	sub	r2, r3, #2
   13760:	mov	r5, #0
   13764:	clz	r2, r2
   13768:	mov	r8, r4
   1376c:	lsr	r2, r2, #5
   13770:	b	12c7c <__assert_fail@plt+0x1b00>
   13774:	ldr	r3, [sp, #156]	; 0x9c
   13778:	ands	r9, r3, #4
   1377c:	beq	138b4 <__assert_fail@plt+0x2738>
   13780:	ldr	r2, [sp, #24]
   13784:	add	r3, sl, #2
   13788:	cmp	r3, r2
   1378c:	bcs	137a0 <__assert_fail@plt+0x2624>
   13790:	ldr	r2, [sp, #48]	; 0x30
   13794:	ldrb	r4, [r2, #1]
   13798:	cmp	r4, #63	; 0x3f
   1379c:	beq	13a3c <__assert_fail@plt+0x28c0>
   137a0:	mov	r2, #0
   137a4:	mov	r8, r2
   137a8:	mov	r5, r2
   137ac:	mov	r4, #63	; 0x3f
   137b0:	b	12c7c <__assert_fail@plt+0x1b00>
   137b4:	ldr	r3, [sp, #28]
   137b8:	cmp	r3, #0
   137bc:	bne	13ae0 <__assert_fail@plt+0x2964>
   137c0:	mov	r2, r5
   137c4:	mov	r8, r3
   137c8:	mov	r5, #0
   137cc:	mov	r4, #63	; 0x3f
   137d0:	b	12c7c <__assert_fail@plt+0x1b00>
   137d4:	ldr	r3, [sp, #28]
   137d8:	cmp	r3, #0
   137dc:	bne	13ae0 <__assert_fail@plt+0x2964>
   137e0:	ldr	r2, [sp, #72]	; 0x48
   137e4:	adds	r3, fp, #0
   137e8:	movne	r3, #1
   137ec:	cmp	r2, #0
   137f0:	movne	r3, #0
   137f4:	cmp	r3, #0
   137f8:	strne	fp, [sp, #72]	; 0x48
   137fc:	movne	fp, #0
   13800:	bne	1383c <__assert_fail@plt+0x26c0>
   13804:	cmp	fp, r7
   13808:	movhi	r2, #39	; 0x27
   1380c:	ldrhi	r3, [sp, #32]
   13810:	strbhi	r2, [r3, r7]
   13814:	add	r3, r7, #1
   13818:	cmp	fp, r3
   1381c:	movhi	r1, #92	; 0x5c
   13820:	ldrhi	r2, [sp, #32]
   13824:	strbhi	r1, [r2, r3]
   13828:	add	r3, r7, #2
   1382c:	cmp	fp, r3
   13830:	movhi	r1, #39	; 0x27
   13834:	ldrhi	r2, [sp, #32]
   13838:	strbhi	r1, [r2, r3]
   1383c:	ldr	r3, [sp, #28]
   13840:	add	r7, r7, #3
   13844:	mov	r2, r5
   13848:	mov	r8, r3
   1384c:	str	r5, [sp, #68]	; 0x44
   13850:	str	r3, [sp, #40]	; 0x28
   13854:	mov	r4, #39	; 0x27
   13858:	b	12c7c <__assert_fail@plt+0x1b00>
   1385c:	ldr	r3, [sp, #56]	; 0x38
   13860:	ldrb	r3, [r3, #1]
   13864:	adds	r3, r3, #0
   13868:	movne	r3, #1
   1386c:	b	12c54 <__assert_fail@plt+0x1ad8>
   13870:	ldr	r5, [sp, #28]
   13874:	mov	r4, #48	; 0x30
   13878:	b	12c7c <__assert_fail@plt+0x1b00>
   1387c:	add	sl, sl, #1
   13880:	b	127ac <__assert_fail@plt+0x1630>
   13884:	mov	sl, r3
   13888:	ldr	r3, [sp, #28]
   1388c:	mov	r8, fp
   13890:	str	r3, [sp, #44]	; 0x2c
   13894:	ldr	r3, [sp, #152]	; 0x98
   13898:	sub	r2, r3, #2
   1389c:	clz	r2, r2
   138a0:	lsr	r2, r2, #5
   138a4:	b	12ebc <__assert_fail@plt+0x1d40>
   138a8:	str	ip, [sp, #40]	; 0x28
   138ac:	ldr	r5, [sp, #48]	; 0x30
   138b0:	b	12cec <__assert_fail@plt+0x1b70>
   138b4:	mov	r2, r9
   138b8:	mov	r8, r9
   138bc:	mov	r5, #0
   138c0:	mov	r4, #63	; 0x3f
   138c4:	b	12c7c <__assert_fail@plt+0x1b00>
   138c8:	cmp	fp, #0
   138cc:	beq	13944 <__assert_fail@plt+0x27c8>
   138d0:	ldr	r1, [sp, #32]
   138d4:	mov	r3, #34	; 0x22
   138d8:	mov	r2, #1
   138dc:	strb	r3, [r1]
   138e0:	ldr	r3, [pc, #332]	; 13a34 <__assert_fail@plt+0x28b8>
   138e4:	str	r2, [sp, #52]	; 0x34
   138e8:	mov	r7, r2
   138ec:	str	r2, [sp, #44]	; 0x2c
   138f0:	str	r3, [sp, #64]	; 0x40
   138f4:	b	1279c <__assert_fail@plt+0x1620>
   138f8:	ldr	r3, [pc, #300]	; 13a2c <__assert_fail@plt+0x28b0>
   138fc:	str	r3, [sp, #64]	; 0x40
   13900:	mov	r3, #0
   13904:	str	r3, [sp, #28]
   13908:	mov	r3, #1
   1390c:	str	r3, [sp, #52]	; 0x34
   13910:	mov	r7, r3
   13914:	mov	r3, #2
   13918:	str	r3, [sp, #152]	; 0x98
   1391c:	b	1279c <__assert_fail@plt+0x1620>
   13920:	bl	11158 <abort@plt>
   13924:	ldr	r0, [sp, #56]	; 0x38
   13928:	bl	11068 <strlen@plt>
   1392c:	str	r0, [sp, #24]
   13930:	b	13608 <__assert_fail@plt+0x248c>
   13934:	mov	r5, r8
   13938:	mov	r4, #48	; 0x30
   1393c:	ldr	r8, [sp, #44]	; 0x2c
   13940:	b	12c7c <__assert_fail@plt+0x1b00>
   13944:	mov	r3, #1
   13948:	str	r3, [sp, #52]	; 0x34
   1394c:	mov	r7, r3
   13950:	str	r3, [sp, #44]	; 0x2c
   13954:	ldr	r3, [pc, #216]	; 13a34 <__assert_fail@plt+0x28b8>
   13958:	str	r3, [sp, #64]	; 0x40
   1395c:	b	1279c <__assert_fail@plt+0x1620>
   13960:	ldr	sl, [sp, #32]
   13964:	mov	r8, fp
   13968:	mov	r2, r3
   1396c:	b	12ebc <__assert_fail@plt+0x1d40>
   13970:	mov	r3, r5
   13974:	mov	r5, r2
   13978:	b	13174 <__assert_fail@plt+0x1ff8>
   1397c:	ldr	r1, [sp, #24]
   13980:	mov	r2, r5
   13984:	cmp	r1, r9
   13988:	mov	ip, r5
   1398c:	ldr	r4, [sp, #80]	; 0x50
   13990:	ldr	r5, [sp, #92]	; 0x5c
   13994:	ldr	r6, [sp, #84]	; 0x54
   13998:	ldr	r7, [sp, #88]	; 0x58
   1399c:	bls	139d0 <__assert_fail@plt+0x2854>
   139a0:	ldrb	r3, [r8]
   139a4:	cmp	r3, #0
   139a8:	bne	139bc <__assert_fail@plt+0x2840>
   139ac:	b	139d4 <__assert_fail@plt+0x2858>
   139b0:	ldrb	r3, [r8, #1]!
   139b4:	cmp	r3, #0
   139b8:	beq	13ad4 <__assert_fail@plt+0x2958>
   139bc:	add	r2, r2, #1
   139c0:	add	r3, sl, r2
   139c4:	cmp	r1, r3
   139c8:	bhi	139b0 <__assert_fail@plt+0x2834>
   139cc:	mov	ip, r2
   139d0:	mov	r3, #0
   139d4:	mov	r2, r3
   139d8:	b	1346c <__assert_fail@plt+0x22f0>
   139dc:	mov	r3, #0
   139e0:	mov	ip, r5
   139e4:	ldr	r4, [sp, #80]	; 0x50
   139e8:	ldr	r5, [sp, #92]	; 0x5c
   139ec:	ldr	r6, [sp, #84]	; 0x54
   139f0:	ldr	r7, [sp, #88]	; 0x58
   139f4:	mov	r2, r3
   139f8:	b	1346c <__assert_fail@plt+0x22f0>
   139fc:	mov	r3, r6
   13a00:	mov	ip, r5
   13a04:	eor	r5, r3, #1
   13a08:	mov	r2, r6
   13a0c:	ldr	r4, [sp, #80]	; 0x50
   13a10:	ldr	r6, [sp, #84]	; 0x54
   13a14:	ldr	r7, [sp, #88]	; 0x58
   13a18:	uxtb	r5, r5
   13a1c:	b	1346c <__assert_fail@plt+0x22f0>
   13a20:	ldr	sl, [sp, #32]
   13a24:	mov	r8, fp
   13a28:	b	13890 <__assert_fail@plt+0x2714>
   13a2c:			; <UNDEFINED> instruction: 0x00016dbc
   13a30:	andeq	r6, r1, r0, asr #27
   13a34:			; <UNDEFINED> instruction: 0x00016db8
   13a38:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13a3c:	ldr	r2, [sp, #56]	; 0x38
   13a40:	ldrb	r1, [r2, r3]
   13a44:	sub	r2, r1, #33	; 0x21
   13a48:	uxtb	r2, r2
   13a4c:	cmp	r2, #29
   13a50:	bhi	13af0 <__assert_fail@plt+0x2974>
   13a54:	ldr	r0, [pc, #-36]	; 13a38 <__assert_fail@plt+0x28bc>
   13a58:	mov	ip, #1
   13a5c:	ands	r2, r0, ip, lsl r2
   13a60:	beq	13b00 <__assert_fail@plt+0x2984>
   13a64:	ldr	r2, [sp, #28]
   13a68:	cmp	r2, #0
   13a6c:	bne	13c00 <__assert_fail@plt+0x2a84>
   13a70:	cmp	fp, r7
   13a74:	ldr	r8, [sp, #28]
   13a78:	ldrhi	r2, [sp, #32]
   13a7c:	mov	sl, r3
   13a80:	mov	r5, r8
   13a84:	strbhi	r4, [r2, r7]
   13a88:	add	r2, r7, #1
   13a8c:	cmp	fp, r2
   13a90:	movhi	r0, #34	; 0x22
   13a94:	ldrhi	ip, [sp, #32]
   13a98:	mov	r4, r1
   13a9c:	strbhi	r0, [ip, r2]
   13aa0:	add	r2, r7, #2
   13aa4:	cmp	fp, r2
   13aa8:	movhi	r0, #34	; 0x22
   13aac:	ldrhi	ip, [sp, #32]
   13ab0:	strbhi	r0, [ip, r2]
   13ab4:	add	r2, r7, #3
   13ab8:	cmp	fp, r2
   13abc:	movhi	r0, #63	; 0x3f
   13ac0:	ldrhi	ip, [sp, #32]
   13ac4:	add	r7, r7, #4
   13ac8:	strbhi	r0, [ip, r2]
   13acc:	mov	r2, r8
   13ad0:	b	12c7c <__assert_fail@plt+0x1b00>
   13ad4:	mov	ip, r2
   13ad8:	mov	r2, r3
   13adc:	b	1346c <__assert_fail@plt+0x22f0>
   13ae0:	ldr	sl, [sp, #32]
   13ae4:	mov	r8, fp
   13ae8:	ldr	r2, [sp, #28]
   13aec:	b	12ebc <__assert_fail@plt+0x1d40>
   13af0:	mov	r2, #0
   13af4:	mov	r8, r2
   13af8:	mov	r5, r2
   13afc:	b	12c7c <__assert_fail@plt+0x1b00>
   13b00:	mov	r8, r2
   13b04:	mov	r5, #0
   13b08:	b	12c7c <__assert_fail@plt+0x1b00>
   13b0c:	ldr	r1, [sp, #152]	; 0x98
   13b10:	bl	125d8 <__assert_fail@plt+0x145c>
   13b14:	str	r0, [sp, #168]	; 0xa8
   13b18:	b	12b38 <__assert_fail@plt+0x19bc>
   13b1c:	ldr	r1, [sp, #152]	; 0x98
   13b20:	bl	125d8 <__assert_fail@plt+0x145c>
   13b24:	str	r0, [sp, #164]	; 0xa4
   13b28:	b	12b18 <__assert_fail@plt+0x199c>
   13b2c:	ldr	r7, [sp, #28]
   13b30:	b	12b78 <__assert_fail@plt+0x19fc>
   13b34:	ldr	sl, [sp, #32]
   13b38:	ldr	r2, [sp, #68]	; 0x44
   13b3c:	mov	r8, fp
   13b40:	mov	fp, r7
   13b44:	ldr	r3, [sp, #64]	; 0x40
   13b48:	cmp	r3, #0
   13b4c:	moveq	r2, #0
   13b50:	andne	r2, r2, #1
   13b54:	cmp	r2, #0
   13b58:	beq	13b84 <__assert_fail@plt+0x2a08>
   13b5c:	mov	r2, r3
   13b60:	ldrb	r3, [r3]
   13b64:	cmp	r3, #0
   13b68:	beq	13b84 <__assert_fail@plt+0x2a08>
   13b6c:	cmp	r8, fp
   13b70:	strbhi	r3, [sl, fp]
   13b74:	ldrb	r3, [r2, #1]!
   13b78:	add	fp, fp, #1
   13b7c:	cmp	r3, #0
   13b80:	bne	13b6c <__assert_fail@plt+0x29f0>
   13b84:	cmp	r8, fp
   13b88:	movhi	r3, #0
   13b8c:	strbhi	r3, [sl, fp]
   13b90:	b	12f18 <__assert_fail@plt+0x1d9c>
   13b94:	ldr	r3, [sp, #168]	; 0xa8
   13b98:	ldr	sl, [sp, #32]
   13b9c:	str	r3, [sp, #16]
   13ba0:	ldr	r3, [sp, #164]	; 0xa4
   13ba4:	mov	ip, #5
   13ba8:	str	r3, [sp, #12]
   13bac:	ldr	r3, [sp, #160]	; 0xa0
   13bb0:	ldr	r2, [sp, #56]	; 0x38
   13bb4:	str	r3, [sp, #8]
   13bb8:	ldr	r3, [sp, #156]	; 0x9c
   13bbc:	ldr	r1, [sp, #72]	; 0x48
   13bc0:	str	r3, [sp, #4]
   13bc4:	mov	r0, sl
   13bc8:	ldr	r3, [sp, #24]
   13bcc:	str	ip, [sp]
   13bd0:	bl	126f8 <__assert_fail@plt+0x157c>
   13bd4:	mov	fp, r0
   13bd8:	b	12f18 <__assert_fail@plt+0x1d9c>
   13bdc:	mov	r8, fp
   13be0:	ldr	sl, [sp, #32]
   13be4:	mov	fp, r7
   13be8:	mov	r2, r3
   13bec:	b	13b44 <__assert_fail@plt+0x29c8>
   13bf0:	mov	r8, fp
   13bf4:	ldr	sl, [sp, #32]
   13bf8:	mov	fp, r7
   13bfc:	b	13b44 <__assert_fail@plt+0x29c8>
   13c00:	ldr	sl, [sp, #32]
   13c04:	mov	r8, fp
   13c08:	b	12ed4 <__assert_fail@plt+0x1d58>
   13c0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c10:	sub	sp, sp, #52	; 0x34
   13c14:	mov	r4, r0
   13c18:	mov	r5, r3
   13c1c:	mov	sl, r1
   13c20:	mov	fp, r2
   13c24:	bl	11080 <__errno_location@plt>
   13c28:	ldr	r7, [pc, #412]	; 13dcc <__assert_fail@plt+0x2c50>
   13c2c:	cmn	r4, #-2147483647	; 0x80000001
   13c30:	ldr	r6, [r7]
   13c34:	mov	r8, r0
   13c38:	movne	r0, #0
   13c3c:	moveq	r0, #1
   13c40:	ldr	r3, [r8]
   13c44:	orrs	r0, r0, r4, lsr #31
   13c48:	str	r3, [sp, #24]
   13c4c:	bne	13dc8 <__assert_fail@plt+0x2c4c>
   13c50:	ldr	r2, [r7, #4]
   13c54:	cmp	r4, r2
   13c58:	blt	13cb8 <__assert_fail@plt+0x2b3c>
   13c5c:	add	r9, r7, #8
   13c60:	cmp	r6, r9
   13c64:	str	r2, [sp, #44]	; 0x2c
   13c68:	beq	13d98 <__assert_fail@plt+0x2c1c>
   13c6c:	mov	r3, #8
   13c70:	sub	r2, r4, r2
   13c74:	mov	r0, r6
   13c78:	str	r3, [sp]
   13c7c:	add	r2, r2, #1
   13c80:	mvn	r3, #-2147483648	; 0x80000000
   13c84:	add	r1, sp, #44	; 0x2c
   13c88:	bl	14e28 <__assert_fail@plt+0x3cac>
   13c8c:	mov	r6, r0
   13c90:	str	r0, [r7]
   13c94:	ldr	r0, [r7, #4]
   13c98:	ldr	r2, [sp, #44]	; 0x2c
   13c9c:	mov	r1, #0
   13ca0:	sub	r2, r2, r0
   13ca4:	add	r0, r6, r0, lsl #3
   13ca8:	lsl	r2, r2, #3
   13cac:	bl	110b0 <memset@plt>
   13cb0:	ldr	r3, [sp, #44]	; 0x2c
   13cb4:	str	r3, [r7, #4]
   13cb8:	add	r3, r6, r4, lsl #3
   13cbc:	ldr	r1, [r5, #4]
   13cc0:	ldr	r7, [r3, #4]
   13cc4:	ldr	r9, [r6, r4, lsl #3]
   13cc8:	ldr	r2, [r5, #40]	; 0x28
   13ccc:	ldr	ip, [r5, #44]	; 0x2c
   13cd0:	add	r0, r5, #8
   13cd4:	str	r3, [sp, #28]
   13cd8:	ldr	r3, [r5]
   13cdc:	orr	r1, r1, #1
   13ce0:	mov	lr, r0
   13ce4:	str	r1, [sp, #32]
   13ce8:	str	r0, [sp, #36]	; 0x24
   13cec:	str	r1, [sp, #4]
   13cf0:	str	r2, [sp, #12]
   13cf4:	str	r3, [sp]
   13cf8:	mov	r0, r7
   13cfc:	mov	r1, r9
   13d00:	str	ip, [sp, #16]
   13d04:	str	lr, [sp, #8]
   13d08:	mov	r3, fp
   13d0c:	mov	r2, sl
   13d10:	bl	126f8 <__assert_fail@plt+0x157c>
   13d14:	cmp	r9, r0
   13d18:	bhi	13d84 <__assert_fail@plt+0x2c08>
   13d1c:	ldr	r3, [pc, #172]	; 13dd0 <__assert_fail@plt+0x2c54>
   13d20:	add	r9, r0, #1
   13d24:	cmp	r7, r3
   13d28:	str	r9, [r6, r4, lsl #3]
   13d2c:	beq	13d38 <__assert_fail@plt+0x2bbc>
   13d30:	mov	r0, r7
   13d34:	bl	12434 <__assert_fail@plt+0x12b8>
   13d38:	mov	r0, r9
   13d3c:	bl	14cc4 <__assert_fail@plt+0x3b48>
   13d40:	ldr	lr, [sp, #28]
   13d44:	ldr	ip, [r5, #44]	; 0x2c
   13d48:	ldr	r4, [r5, #40]	; 0x28
   13d4c:	mov	r3, fp
   13d50:	mov	r2, sl
   13d54:	mov	r1, r9
   13d58:	str	r0, [lr, #4]
   13d5c:	ldr	lr, [r5]
   13d60:	ldr	r5, [sp, #36]	; 0x24
   13d64:	str	ip, [sp, #16]
   13d68:	str	r5, [sp, #8]
   13d6c:	ldr	r5, [sp, #32]
   13d70:	str	r4, [sp, #12]
   13d74:	str	r5, [sp, #4]
   13d78:	str	lr, [sp]
   13d7c:	mov	r7, r0
   13d80:	bl	126f8 <__assert_fail@plt+0x157c>
   13d84:	ldr	r3, [sp, #24]
   13d88:	mov	r0, r7
   13d8c:	str	r3, [r8]
   13d90:	add	sp, sp, #52	; 0x34
   13d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d98:	mov	r3, #8
   13d9c:	sub	r2, r4, r2
   13da0:	str	r3, [sp]
   13da4:	add	r1, sp, #44	; 0x2c
   13da8:	add	r2, r2, #1
   13dac:	mvn	r3, #-2147483648	; 0x80000000
   13db0:	bl	14e28 <__assert_fail@plt+0x3cac>
   13db4:	mov	r6, r0
   13db8:	ldm	r9, {r0, r1}
   13dbc:	str	r6, [r7]
   13dc0:	stm	r6, {r0, r1}
   13dc4:	b	13c94 <__assert_fail@plt+0x2b18>
   13dc8:	bl	11158 <abort@plt>
   13dcc:	andeq	r8, r2, ip, lsl r1
   13dd0:	strdeq	r8, [r2], -r0
   13dd4:	push	{r4, r5, r6, lr}
   13dd8:	mov	r5, r0
   13ddc:	bl	11080 <__errno_location@plt>
   13de0:	cmp	r5, #0
   13de4:	mov	r1, #48	; 0x30
   13de8:	mov	r4, r0
   13dec:	ldr	r0, [pc, #16]	; 13e04 <__assert_fail@plt+0x2c88>
   13df0:	ldr	r6, [r4]
   13df4:	movne	r0, r5
   13df8:	bl	15124 <__assert_fail@plt+0x3fa8>
   13dfc:	str	r6, [r4]
   13e00:	pop	{r4, r5, r6, pc}
   13e04:	strdeq	r8, [r2], -r0
   13e08:	ldr	r3, [pc, #12]	; 13e1c <__assert_fail@plt+0x2ca0>
   13e0c:	cmp	r0, #0
   13e10:	moveq	r0, r3
   13e14:	ldr	r0, [r0]
   13e18:	bx	lr
   13e1c:	strdeq	r8, [r2], -r0
   13e20:	ldr	r3, [pc, #12]	; 13e34 <__assert_fail@plt+0x2cb8>
   13e24:	cmp	r0, #0
   13e28:	moveq	r0, r3
   13e2c:	str	r1, [r0]
   13e30:	bx	lr
   13e34:	strdeq	r8, [r2], -r0
   13e38:	ldr	r3, [pc, #52]	; 13e74 <__assert_fail@plt+0x2cf8>
   13e3c:	cmp	r0, #0
   13e40:	moveq	r0, r3
   13e44:	add	r3, r0, #8
   13e48:	push	{lr}		; (str lr, [sp, #-4]!)
   13e4c:	lsr	lr, r1, #5
   13e50:	and	r1, r1, #31
   13e54:	ldr	ip, [r3, lr, lsl #2]
   13e58:	lsr	r0, ip, r1
   13e5c:	eor	r2, r2, r0
   13e60:	and	r2, r2, #1
   13e64:	and	r0, r0, #1
   13e68:	eor	r1, ip, r2, lsl r1
   13e6c:	str	r1, [r3, lr, lsl #2]
   13e70:	pop	{pc}		; (ldr pc, [sp], #4)
   13e74:	strdeq	r8, [r2], -r0
   13e78:	ldr	r3, [pc, #16]	; 13e90 <__assert_fail@plt+0x2d14>
   13e7c:	cmp	r0, #0
   13e80:	movne	r3, r0
   13e84:	ldr	r0, [r3, #4]
   13e88:	str	r1, [r3, #4]
   13e8c:	bx	lr
   13e90:	strdeq	r8, [r2], -r0
   13e94:	ldr	r3, [pc, #44]	; 13ec8 <__assert_fail@plt+0x2d4c>
   13e98:	cmp	r0, #0
   13e9c:	moveq	r0, r3
   13ea0:	mov	ip, #10
   13ea4:	cmp	r2, #0
   13ea8:	cmpne	r1, #0
   13eac:	str	ip, [r0]
   13eb0:	beq	13ec0 <__assert_fail@plt+0x2d44>
   13eb4:	str	r1, [r0, #40]	; 0x28
   13eb8:	str	r2, [r0, #44]	; 0x2c
   13ebc:	bx	lr
   13ec0:	push	{r4, lr}
   13ec4:	bl	11158 <abort@plt>
   13ec8:	strdeq	r8, [r2], -r0
   13ecc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ed0:	sub	sp, sp, #24
   13ed4:	ldr	ip, [pc, #108]	; 13f48 <__assert_fail@plt+0x2dcc>
   13ed8:	ldr	r4, [sp, #56]	; 0x38
   13edc:	mov	r9, r2
   13ee0:	cmp	r4, #0
   13ee4:	moveq	r4, ip
   13ee8:	mov	sl, r3
   13eec:	mov	r7, r0
   13ef0:	mov	r8, r1
   13ef4:	bl	11080 <__errno_location@plt>
   13ef8:	ldr	r3, [r4, #44]	; 0x2c
   13efc:	mov	r1, r8
   13f00:	ldr	r6, [r0]
   13f04:	str	r3, [sp, #16]
   13f08:	ldr	r2, [r4, #40]	; 0x28
   13f0c:	add	r3, r4, #8
   13f10:	str	r3, [sp, #8]
   13f14:	str	r2, [sp, #12]
   13f18:	ldr	r2, [r4, #4]
   13f1c:	mov	r5, r0
   13f20:	str	r2, [sp, #4]
   13f24:	ldr	ip, [r4]
   13f28:	mov	r3, sl
   13f2c:	mov	r2, r9
   13f30:	mov	r0, r7
   13f34:	str	ip, [sp]
   13f38:	bl	126f8 <__assert_fail@plt+0x157c>
   13f3c:	str	r6, [r5]
   13f40:	add	sp, sp, #24
   13f44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f48:	strdeq	r8, [r2], -r0
   13f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f50:	cmp	r3, #0
   13f54:	sub	sp, sp, #44	; 0x2c
   13f58:	ldr	r4, [pc, #192]	; 14020 <__assert_fail@plt+0x2ea4>
   13f5c:	mov	r6, r2
   13f60:	movne	r4, r3
   13f64:	mov	r9, r1
   13f68:	mov	r8, r0
   13f6c:	bl	11080 <__errno_location@plt>
   13f70:	ldr	r3, [r4, #44]	; 0x2c
   13f74:	ldr	r5, [r4, #4]
   13f78:	add	sl, r4, #8
   13f7c:	cmp	r6, #0
   13f80:	orreq	r5, r5, #1
   13f84:	mov	r1, #0
   13f88:	ldr	r2, [r0]
   13f8c:	str	r3, [sp, #16]
   13f90:	ldr	r3, [r4, #40]	; 0x28
   13f94:	stmib	sp, {r5, sl}
   13f98:	str	r3, [sp, #12]
   13f9c:	ldr	r3, [r4]
   13fa0:	mov	r7, r0
   13fa4:	str	r2, [sp, #28]
   13fa8:	str	r3, [sp]
   13fac:	mov	r2, r8
   13fb0:	mov	r3, r9
   13fb4:	mov	r0, r1
   13fb8:	bl	126f8 <__assert_fail@plt+0x157c>
   13fbc:	add	r1, r0, #1
   13fc0:	mov	fp, r0
   13fc4:	mov	r0, r1
   13fc8:	str	r1, [sp, #36]	; 0x24
   13fcc:	bl	14cc4 <__assert_fail@plt+0x3b48>
   13fd0:	ldr	r3, [r4, #44]	; 0x2c
   13fd4:	mov	r2, r8
   13fd8:	str	r3, [sp, #16]
   13fdc:	ldr	r3, [r4, #40]	; 0x28
   13fe0:	str	r5, [sp, #4]
   13fe4:	str	r3, [sp, #12]
   13fe8:	str	sl, [sp, #8]
   13fec:	ldr	ip, [r4]
   13ff0:	ldr	r1, [sp, #36]	; 0x24
   13ff4:	mov	r3, r9
   13ff8:	str	ip, [sp]
   13ffc:	str	r0, [sp, #32]
   14000:	bl	126f8 <__assert_fail@plt+0x157c>
   14004:	ldr	r2, [sp, #28]
   14008:	cmp	r6, #0
   1400c:	str	r2, [r7]
   14010:	ldr	r0, [sp, #32]
   14014:	strne	fp, [r6]
   14018:	add	sp, sp, #44	; 0x2c
   1401c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14020:	strdeq	r8, [r2], -r0
   14024:	mov	r3, r2
   14028:	mov	r2, #0
   1402c:	b	13f4c <__assert_fail@plt+0x2dd0>
   14030:	push	{r4, r5, r6, r7, r8, lr}
   14034:	ldr	r6, [pc, #116]	; 140b0 <__assert_fail@plt+0x2f34>
   14038:	ldr	r3, [r6, #4]
   1403c:	ldr	r7, [r6]
   14040:	cmp	r3, #1
   14044:	movgt	r5, r7
   14048:	movgt	r4, #1
   1404c:	ble	1406c <__assert_fail@plt+0x2ef0>
   14050:	ldr	r0, [r5, #12]
   14054:	bl	12434 <__assert_fail@plt+0x12b8>
   14058:	ldr	r3, [r6, #4]
   1405c:	add	r4, r4, #1
   14060:	cmp	r3, r4
   14064:	add	r5, r5, #8
   14068:	bgt	14050 <__assert_fail@plt+0x2ed4>
   1406c:	ldr	r0, [r7, #4]
   14070:	ldr	r4, [pc, #60]	; 140b4 <__assert_fail@plt+0x2f38>
   14074:	cmp	r0, r4
   14078:	beq	1408c <__assert_fail@plt+0x2f10>
   1407c:	bl	12434 <__assert_fail@plt+0x12b8>
   14080:	mov	r3, #256	; 0x100
   14084:	str	r4, [r6, #12]
   14088:	str	r3, [r6, #8]
   1408c:	ldr	r4, [pc, #36]	; 140b8 <__assert_fail@plt+0x2f3c>
   14090:	cmp	r7, r4
   14094:	beq	140a4 <__assert_fail@plt+0x2f28>
   14098:	mov	r0, r7
   1409c:	bl	12434 <__assert_fail@plt+0x12b8>
   140a0:	str	r4, [r6]
   140a4:	mov	r3, #1
   140a8:	str	r3, [r6, #4]
   140ac:	pop	{r4, r5, r6, r7, r8, pc}
   140b0:	andeq	r8, r2, ip, lsl r1
   140b4:	strdeq	r8, [r2], -r0
   140b8:	andeq	r8, r2, r4, lsr #2
   140bc:	ldr	r3, [pc, #4]	; 140c8 <__assert_fail@plt+0x2f4c>
   140c0:	mvn	r2, #0
   140c4:	b	13c0c <__assert_fail@plt+0x2a90>
   140c8:	strdeq	r8, [r2], -r0
   140cc:	ldr	r3, [pc]	; 140d4 <__assert_fail@plt+0x2f58>
   140d0:	b	13c0c <__assert_fail@plt+0x2a90>
   140d4:	strdeq	r8, [r2], -r0
   140d8:	mov	r1, r0
   140dc:	ldr	r3, [pc, #8]	; 140ec <__assert_fail@plt+0x2f70>
   140e0:	mvn	r2, #0
   140e4:	mov	r0, #0
   140e8:	b	13c0c <__assert_fail@plt+0x2a90>
   140ec:	strdeq	r8, [r2], -r0
   140f0:	mov	r2, r1
   140f4:	ldr	r3, [pc, #8]	; 14104 <__assert_fail@plt+0x2f88>
   140f8:	mov	r1, r0
   140fc:	mov	r0, #0
   14100:	b	13c0c <__assert_fail@plt+0x2a90>
   14104:	strdeq	r8, [r2], -r0
   14108:	push	{r4, r5, lr}
   1410c:	sub	sp, sp, #52	; 0x34
   14110:	mov	r5, r2
   14114:	mov	r4, r0
   14118:	mov	r0, sp
   1411c:	bl	125a8 <__assert_fail@plt+0x142c>
   14120:	mov	r3, sp
   14124:	mov	r1, r5
   14128:	mov	r0, r4
   1412c:	mvn	r2, #0
   14130:	bl	13c0c <__assert_fail@plt+0x2a90>
   14134:	add	sp, sp, #52	; 0x34
   14138:	pop	{r4, r5, pc}
   1413c:	push	{r4, r5, r6, lr}
   14140:	sub	sp, sp, #48	; 0x30
   14144:	mov	r5, r2
   14148:	mov	r6, r3
   1414c:	mov	r4, r0
   14150:	mov	r0, sp
   14154:	bl	125a8 <__assert_fail@plt+0x142c>
   14158:	mov	r3, sp
   1415c:	mov	r2, r6
   14160:	mov	r1, r5
   14164:	mov	r0, r4
   14168:	bl	13c0c <__assert_fail@plt+0x2a90>
   1416c:	add	sp, sp, #48	; 0x30
   14170:	pop	{r4, r5, r6, pc}
   14174:	mov	r2, r1
   14178:	mov	r1, r0
   1417c:	mov	r0, #0
   14180:	b	14108 <__assert_fail@plt+0x2f8c>
   14184:	mov	r3, r2
   14188:	mov	r2, r1
   1418c:	mov	r1, r0
   14190:	mov	r0, #0
   14194:	b	1413c <__assert_fail@plt+0x2fc0>
   14198:	push	{r4, r5, r6, r7, r8, lr}
   1419c:	mov	r7, r0
   141a0:	ldr	lr, [pc, #100]	; 1420c <__assert_fail@plt+0x3090>
   141a4:	mov	r8, r1
   141a8:	mov	r4, r2
   141ac:	ldm	lr!, {r0, r1, r2, r3}
   141b0:	sub	sp, sp, #48	; 0x30
   141b4:	mov	ip, sp
   141b8:	lsr	r5, r4, #5
   141bc:	stmia	ip!, {r0, r1, r2, r3}
   141c0:	add	r6, sp, #8
   141c4:	ldm	lr!, {r0, r1, r2, r3}
   141c8:	and	r4, r4, #31
   141cc:	stmia	ip!, {r0, r1, r2, r3}
   141d0:	ldm	lr, {r0, r1, r2, r3}
   141d4:	stm	ip, {r0, r1, r2, r3}
   141d8:	mov	r2, r8
   141dc:	ldr	lr, [r6, r5, lsl #2]
   141e0:	mov	r1, r7
   141e4:	mov	r3, sp
   141e8:	lsr	ip, lr, r4
   141ec:	eor	ip, ip, #1
   141f0:	and	ip, ip, #1
   141f4:	mov	r0, #0
   141f8:	eor	r4, lr, ip, lsl r4
   141fc:	str	r4, [r6, r5, lsl #2]
   14200:	bl	13c0c <__assert_fail@plt+0x2a90>
   14204:	add	sp, sp, #48	; 0x30
   14208:	pop	{r4, r5, r6, r7, r8, pc}
   1420c:	strdeq	r8, [r2], -r0
   14210:	mov	r2, r1
   14214:	mvn	r1, #0
   14218:	b	14198 <__assert_fail@plt+0x301c>
   1421c:	mov	r2, #58	; 0x3a
   14220:	mvn	r1, #0
   14224:	b	14198 <__assert_fail@plt+0x301c>
   14228:	mov	r2, #58	; 0x3a
   1422c:	b	14198 <__assert_fail@plt+0x301c>
   14230:	push	{r4, r5, r6, r7, lr}
   14234:	sub	sp, sp, #100	; 0x64
   14238:	mov	r6, r0
   1423c:	mov	r0, sp
   14240:	mov	r7, r2
   14244:	bl	125a8 <__assert_fail@plt+0x142c>
   14248:	mov	ip, sp
   1424c:	add	lr, sp, #48	; 0x30
   14250:	ldm	ip!, {r0, r1, r2, r3}
   14254:	stmia	lr!, {r0, r1, r2, r3}
   14258:	ldm	ip!, {r0, r1, r2, r3}
   1425c:	ldr	r5, [sp, #60]	; 0x3c
   14260:	stmia	lr!, {r0, r1, r2, r3}
   14264:	mvn	r4, r5
   14268:	ldm	ip, {r0, r1, r2, r3}
   1426c:	and	ip, r4, #67108864	; 0x4000000
   14270:	eor	ip, ip, r5
   14274:	str	ip, [sp, #60]	; 0x3c
   14278:	stm	lr, {r0, r1, r2, r3}
   1427c:	mov	r1, r7
   14280:	mov	r0, r6
   14284:	add	r3, sp, #48	; 0x30
   14288:	mvn	r2, #0
   1428c:	bl	13c0c <__assert_fail@plt+0x2a90>
   14290:	add	sp, sp, #100	; 0x64
   14294:	pop	{r4, r5, r6, r7, pc}
   14298:	push	{r4, r5, r6, r7, r8, lr}
   1429c:	mov	r5, r1
   142a0:	ldr	lr, [pc, #100]	; 1430c <__assert_fail@plt+0x3190>
   142a4:	mov	r4, r2
   142a8:	mov	r7, r0
   142ac:	mov	r8, r3
   142b0:	ldm	lr!, {r0, r1, r2, r3}
   142b4:	sub	sp, sp, #48	; 0x30
   142b8:	mov	ip, sp
   142bc:	mov	r6, #10
   142c0:	stmia	ip!, {r0, r1, r2, r3}
   142c4:	cmp	r4, #0
   142c8:	cmpne	r5, #0
   142cc:	ldm	lr!, {r0, r1, r2, r3}
   142d0:	str	r6, [sp]
   142d4:	stmia	ip!, {r0, r1, r2, r3}
   142d8:	ldm	lr, {r0, r1, r2, r3}
   142dc:	stm	ip, {r0, r1, r2, r3}
   142e0:	beq	14308 <__assert_fail@plt+0x318c>
   142e4:	mov	r3, sp
   142e8:	mov	r1, r8
   142ec:	mov	r0, r7
   142f0:	ldr	r2, [sp, #72]	; 0x48
   142f4:	str	r5, [sp, #40]	; 0x28
   142f8:	str	r4, [sp, #44]	; 0x2c
   142fc:	bl	13c0c <__assert_fail@plt+0x2a90>
   14300:	add	sp, sp, #48	; 0x30
   14304:	pop	{r4, r5, r6, r7, r8, pc}
   14308:	bl	11158 <abort@plt>
   1430c:	strdeq	r8, [r2], -r0
   14310:	push	{lr}		; (str lr, [sp, #-4]!)
   14314:	sub	sp, sp, #12
   14318:	mvn	ip, #0
   1431c:	str	ip, [sp]
   14320:	bl	14298 <__assert_fail@plt+0x311c>
   14324:	add	sp, sp, #12
   14328:	pop	{pc}		; (ldr pc, [sp], #4)
   1432c:	push	{lr}		; (str lr, [sp, #-4]!)
   14330:	sub	sp, sp, #12
   14334:	mvn	ip, #0
   14338:	mov	r3, r2
   1433c:	str	ip, [sp]
   14340:	mov	r2, r1
   14344:	mov	r1, r0
   14348:	mov	r0, #0
   1434c:	bl	14298 <__assert_fail@plt+0x311c>
   14350:	add	sp, sp, #12
   14354:	pop	{pc}		; (ldr pc, [sp], #4)
   14358:	push	{lr}		; (str lr, [sp, #-4]!)
   1435c:	sub	sp, sp, #12
   14360:	str	r3, [sp]
   14364:	mov	r3, r2
   14368:	mov	r2, r1
   1436c:	mov	r1, r0
   14370:	mov	r0, #0
   14374:	bl	14298 <__assert_fail@plt+0x311c>
   14378:	add	sp, sp, #12
   1437c:	pop	{pc}		; (ldr pc, [sp], #4)
   14380:	ldr	r3, [pc]	; 14388 <__assert_fail@plt+0x320c>
   14384:	b	13c0c <__assert_fail@plt+0x2a90>
   14388:	andeq	r8, r2, ip, lsr #2
   1438c:	mov	r2, r1
   14390:	ldr	r3, [pc, #8]	; 143a0 <__assert_fail@plt+0x3224>
   14394:	mov	r1, r0
   14398:	mov	r0, #0
   1439c:	b	13c0c <__assert_fail@plt+0x2a90>
   143a0:	andeq	r8, r2, ip, lsr #2
   143a4:	ldr	r3, [pc, #4]	; 143b0 <__assert_fail@plt+0x3234>
   143a8:	mvn	r2, #0
   143ac:	b	13c0c <__assert_fail@plt+0x2a90>
   143b0:	andeq	r8, r2, ip, lsr #2
   143b4:	mov	r1, r0
   143b8:	ldr	r3, [pc, #8]	; 143c8 <__assert_fail@plt+0x324c>
   143bc:	mvn	r2, #0
   143c0:	mov	r0, #0
   143c4:	b	13c0c <__assert_fail@plt+0x2a90>
   143c8:	andeq	r8, r2, ip, lsr #2
   143cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143d0:	subs	sl, r3, #0
   143d4:	sub	sp, sp, #44	; 0x2c
   143d8:	ldr	r3, [r2]
   143dc:	ldrne	fp, [sl]
   143e0:	str	r3, [sp, #12]
   143e4:	ldr	r3, [sp, #80]	; 0x50
   143e8:	mvneq	fp, #0
   143ec:	cmp	r3, #0
   143f0:	mov	r9, r2
   143f4:	ldrne	r2, [sp, #80]	; 0x50
   143f8:	movne	r3, #0
   143fc:	mov	r4, r1
   14400:	strne	r3, [r2]
   14404:	ldr	r3, [sp, #84]	; 0x54
   14408:	cmp	r3, #0
   1440c:	movne	r3, #0
   14410:	ldrne	r2, [sp, #84]	; 0x54
   14414:	strne	r3, [r2]
   14418:	cmp	r1, #0
   1441c:	beq	145d4 <__assert_fail@plt+0x3458>
   14420:	subs	r6, r1, r0
   14424:	bne	1456c <__assert_fail@plt+0x33f0>
   14428:	ldrb	r5, [r1, #1]
   1442c:	cmp	r5, #0
   14430:	movne	r5, r6
   14434:	beq	145e4 <__assert_fail@plt+0x3468>
   14438:	cmp	r5, #0
   1443c:	add	r7, r4, #1
   14440:	beq	14634 <__assert_fail@plt+0x34b8>
   14444:	ldrb	r3, [r5]
   14448:	cmp	r3, #43	; 0x2b
   1444c:	beq	144e0 <__assert_fail@plt+0x3364>
   14450:	mov	r0, r5
   14454:	bl	10ed0 <getpwnam@plt>
   14458:	cmp	r0, #0
   1445c:	beq	144e0 <__assert_fail@plt+0x3364>
   14460:	cmp	r4, #0
   14464:	clz	r6, r7
   14468:	ldr	r3, [r0, #8]
   1446c:	lsr	r6, r6, #5
   14470:	moveq	r6, #0
   14474:	cmp	r6, #0
   14478:	str	r3, [sp, #12]
   1447c:	bne	1459c <__assert_fail@plt+0x3420>
   14480:	adds	r4, r7, #0
   14484:	mov	r8, r6
   14488:	movne	r4, #1
   1448c:	bl	11110 <endpwent@plt>
   14490:	cmp	r4, #0
   14494:	beq	14510 <__assert_fail@plt+0x3394>
   14498:	ldrb	r3, [r7]
   1449c:	cmp	r3, #43	; 0x2b
   144a0:	bne	14540 <__assert_fail@plt+0x33c4>
   144a4:	ldr	r2, [pc, #512]	; 146ac <__assert_fail@plt+0x3530>
   144a8:	add	r3, sp, #16
   144ac:	str	r2, [sp]
   144b0:	mov	r1, #0
   144b4:	mov	r2, #10
   144b8:	mov	r0, r7
   144bc:	bl	152fc <__assert_fail@plt+0x4180>
   144c0:	cmp	r0, #0
   144c4:	bne	145cc <__assert_fail@plt+0x3450>
   144c8:	ldr	r3, [sp, #16]
   144cc:	ldr	r8, [pc, #476]	; 146b0 <__assert_fail@plt+0x3534>
   144d0:	cmn	r3, #1
   144d4:	movne	fp, r3
   144d8:	movne	r8, #0
   144dc:	b	14558 <__assert_fail@plt+0x33dc>
   144e0:	adds	r4, r4, #0
   144e4:	movne	r4, #1
   144e8:	cmp	r7, #0
   144ec:	movne	r4, #0
   144f0:	cmp	r4, #0
   144f4:	beq	14660 <__assert_fail@plt+0x34e4>
   144f8:	mov	r4, #0
   144fc:	bl	11110 <endpwent@plt>
   14500:	cmp	r4, #0
   14504:	ldr	r8, [pc, #424]	; 146b4 <__assert_fail@plt+0x3538>
   14508:	mov	r6, r4
   1450c:	bne	14498 <__assert_fail@plt+0x331c>
   14510:	cmp	r8, #0
   14514:	beq	145e8 <__assert_fail@plt+0x346c>
   14518:	mov	r0, r5
   1451c:	bl	12434 <__assert_fail@plt+0x12b8>
   14520:	mov	r0, r6
   14524:	bl	12434 <__assert_fail@plt+0x12b8>
   14528:	mov	r1, r8
   1452c:	mov	r2, #5
   14530:	mov	r0, #0
   14534:	bl	10f60 <dcgettext@plt>
   14538:	add	sp, sp, #44	; 0x2c
   1453c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14540:	mov	r0, r7
   14544:	bl	11170 <getgrnam@plt>
   14548:	cmp	r0, #0
   1454c:	movne	r8, #0
   14550:	ldrne	fp, [r0, #8]
   14554:	beq	144a4 <__assert_fail@plt+0x3328>
   14558:	bl	10eac <endgrent@plt>
   1455c:	mov	r0, r7
   14560:	bl	151c8 <__assert_fail@plt+0x404c>
   14564:	mov	r6, r0
   14568:	b	14510 <__assert_fail@plt+0x3394>
   1456c:	add	r1, r6, #1
   14570:	bl	15158 <__assert_fail@plt+0x3fdc>
   14574:	ldrb	r7, [r4, #1]
   14578:	mov	r3, #0
   1457c:	cmp	r7, r3
   14580:	mov	r5, r0
   14584:	strb	r3, [r0, r6]
   14588:	bne	14438 <__assert_fail@plt+0x32bc>
   1458c:	ldrb	r3, [r5]
   14590:	cmp	r3, #43	; 0x2b
   14594:	bne	14450 <__assert_fail@plt+0x32d4>
   14598:	b	144e0 <__assert_fail@plt+0x3364>
   1459c:	ldr	fp, [r0, #12]
   145a0:	mov	r0, fp
   145a4:	bl	11164 <getgrgid@plt>
   145a8:	subs	r1, r0, #0
   145ac:	beq	14640 <__assert_fail@plt+0x34c4>
   145b0:	ldr	r0, [r1]
   145b4:	bl	151c8 <__assert_fail@plt+0x404c>
   145b8:	mov	r4, #0
   145bc:	mov	r8, r4
   145c0:	mov	r6, r0
   145c4:	bl	10eac <endgrent@plt>
   145c8:	b	1448c <__assert_fail@plt+0x3310>
   145cc:	ldr	r8, [pc, #220]	; 146b0 <__assert_fail@plt+0x3534>
   145d0:	b	14558 <__assert_fail@plt+0x33dc>
   145d4:	ldrb	r3, [r0]
   145d8:	cmp	r3, #0
   145dc:	moveq	r5, r1
   145e0:	bne	14650 <__assert_fail@plt+0x34d4>
   145e4:	mov	r6, r5
   145e8:	ldr	r3, [sp, #12]
   145ec:	cmp	sl, #0
   145f0:	str	r3, [r9]
   145f4:	ldr	r3, [sp, #80]	; 0x50
   145f8:	strne	fp, [sl]
   145fc:	cmp	r3, #0
   14600:	strne	r5, [r3]
   14604:	ldr	r3, [sp, #84]	; 0x54
   14608:	movne	r5, #0
   1460c:	cmp	r3, #0
   14610:	strne	r6, [r3]
   14614:	movne	r6, #0
   14618:	mov	r0, r5
   1461c:	bl	12434 <__assert_fail@plt+0x12b8>
   14620:	mov	r0, r6
   14624:	bl	12434 <__assert_fail@plt+0x12b8>
   14628:	mov	r0, #0
   1462c:	add	sp, sp, #44	; 0x2c
   14630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14634:	cmp	r7, #0
   14638:	bne	14498 <__assert_fail@plt+0x331c>
   1463c:	b	145e4 <__assert_fail@plt+0x3468>
   14640:	add	r2, sp, #16
   14644:	mov	r0, fp
   14648:	bl	1248c <__assert_fail@plt+0x1310>
   1464c:	b	145b4 <__assert_fail@plt+0x3438>
   14650:	bl	151c8 <__assert_fail@plt+0x404c>
   14654:	mov	r7, r4
   14658:	mov	r5, r0
   1465c:	b	14444 <__assert_fail@plt+0x32c8>
   14660:	ldr	r2, [pc, #68]	; 146ac <__assert_fail@plt+0x3530>
   14664:	add	r3, sp, #16
   14668:	str	r2, [sp]
   1466c:	mov	r1, r4
   14670:	mov	r2, #10
   14674:	mov	r0, r5
   14678:	bl	152fc <__assert_fail@plt+0x4180>
   1467c:	subs	r8, r0, #0
   14680:	bne	146a4 <__assert_fail@plt+0x3528>
   14684:	ldr	r3, [sp, #16]
   14688:	cmn	r3, #1
   1468c:	beq	146a4 <__assert_fail@plt+0x3528>
   14690:	adds	r4, r7, #0
   14694:	movne	r4, #1
   14698:	str	r3, [sp, #12]
   1469c:	mov	r6, #0
   146a0:	b	1448c <__assert_fail@plt+0x3310>
   146a4:	ldr	r8, [pc, #12]	; 146b8 <__assert_fail@plt+0x353c>
   146a8:	b	1469c <__assert_fail@plt+0x3520>
   146ac:	andeq	r6, r1, r8, lsr #12
   146b0:	andeq	r6, r1, r8, asr #28
   146b4:	andeq	r6, r1, r8, lsr lr
   146b8:	andeq	r6, r1, r8, lsr #28
   146bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   146c0:	sub	sp, sp, #8
   146c4:	subs	r7, r2, #0
   146c8:	mov	r8, r1
   146cc:	mov	r9, r3
   146d0:	ldr	sl, [sp, #40]	; 0x28
   146d4:	beq	14758 <__assert_fail@plt+0x35dc>
   146d8:	mov	r1, #58	; 0x3a
   146dc:	mov	r4, r0
   146e0:	bl	11074 <strchr@plt>
   146e4:	stm	sp, {r9, sl}
   146e8:	mov	r3, r7
   146ec:	mov	r2, r8
   146f0:	mov	r6, r0
   146f4:	mov	r1, r0
   146f8:	mov	r0, r4
   146fc:	bl	143cc <__assert_fail@plt+0x3250>
   14700:	cmp	r6, #0
   14704:	mov	r5, r0
   14708:	bne	14744 <__assert_fail@plt+0x35c8>
   1470c:	cmp	r0, #0
   14710:	beq	14750 <__assert_fail@plt+0x35d4>
   14714:	mov	r1, #46	; 0x2e
   14718:	mov	r0, r4
   1471c:	bl	11074 <strchr@plt>
   14720:	subs	r1, r0, #0
   14724:	beq	14744 <__assert_fail@plt+0x35c8>
   14728:	stm	sp, {r9, sl}
   1472c:	mov	r3, r7
   14730:	mov	r2, r8
   14734:	mov	r0, r4
   14738:	bl	143cc <__assert_fail@plt+0x3250>
   1473c:	cmp	r0, #0
   14740:	beq	14750 <__assert_fail@plt+0x35d4>
   14744:	mov	r0, r5
   14748:	add	sp, sp, #8
   1474c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14750:	mov	r5, r6
   14754:	b	14744 <__assert_fail@plt+0x35c8>
   14758:	mov	r2, r1
   1475c:	stm	sp, {r9, sl}
   14760:	mov	r3, r7
   14764:	mov	r1, r7
   14768:	bl	143cc <__assert_fail@plt+0x3250>
   1476c:	mov	r5, r0
   14770:	mov	r0, r5
   14774:	add	sp, sp, #8
   14778:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1477c:	push	{r4, r5, r6, lr}
   14780:	sub	sp, sp, #32
   14784:	cmp	r1, #0
   14788:	mov	r4, r0
   1478c:	ldr	r5, [sp, #48]	; 0x30
   14790:	ldr	r6, [sp, #52]	; 0x34
   14794:	beq	14aac <__assert_fail@plt+0x3930>
   14798:	stm	sp, {r2, r3}
   1479c:	mov	r3, r1
   147a0:	ldr	r2, [pc, #808]	; 14ad0 <__assert_fail@plt+0x3954>
   147a4:	mov	r1, #1
   147a8:	bl	110d4 <__fprintf_chk@plt>
   147ac:	mov	r2, #5
   147b0:	ldr	r1, [pc, #796]	; 14ad4 <__assert_fail@plt+0x3958>
   147b4:	mov	r0, #0
   147b8:	bl	10f60 <dcgettext@plt>
   147bc:	ldr	r3, [pc, #788]	; 14ad8 <__assert_fail@plt+0x395c>
   147c0:	ldr	r2, [pc, #788]	; 14adc <__assert_fail@plt+0x3960>
   147c4:	str	r3, [sp]
   147c8:	mov	r1, #1
   147cc:	mov	r3, r0
   147d0:	mov	r0, r4
   147d4:	bl	110d4 <__fprintf_chk@plt>
   147d8:	mov	r1, r4
   147dc:	mov	r0, #10
   147e0:	bl	10f54 <fputc_unlocked@plt>
   147e4:	mov	r2, #5
   147e8:	ldr	r1, [pc, #752]	; 14ae0 <__assert_fail@plt+0x3964>
   147ec:	mov	r0, #0
   147f0:	bl	10f60 <dcgettext@plt>
   147f4:	mov	r1, #1
   147f8:	ldr	r3, [pc, #740]	; 14ae4 <__assert_fail@plt+0x3968>
   147fc:	mov	r2, r0
   14800:	mov	r0, r4
   14804:	bl	110d4 <__fprintf_chk@plt>
   14808:	mov	r1, r4
   1480c:	mov	r0, #10
   14810:	bl	10f54 <fputc_unlocked@plt>
   14814:	cmp	r6, #9
   14818:	ldrls	pc, [pc, r6, lsl #2]
   1481c:	b	14ac4 <__assert_fail@plt+0x3948>
   14820:	andeq	r4, r1, r4, lsr #17
   14824:	andeq	r4, r1, ip, lsr #17
   14828:	ldrdeq	r4, [r1], -r8
   1482c:	andeq	r4, r1, ip, lsl #18
   14830:	andeq	r4, r1, r8, asr #18
   14834:	andeq	r4, r1, r4, lsl #19
   14838:	andeq	r4, r1, r0, asr #19
   1483c:	andeq	r4, r1, r4, lsl #20
   14840:	andeq	r4, r1, r4, asr sl
   14844:	andeq	r4, r1, r8, asr #16
   14848:	ldr	r1, [pc, #664]	; 14ae8 <__assert_fail@plt+0x396c>
   1484c:	mov	r2, #5
   14850:	mov	r0, #0
   14854:	bl	10f60 <dcgettext@plt>
   14858:	ldr	ip, [r5, #32]
   1485c:	ldr	r1, [r5, #28]
   14860:	ldr	r2, [r5, #24]
   14864:	ldr	r3, [r5]
   14868:	ldr	r6, [r5, #20]
   1486c:	str	ip, [sp, #28]
   14870:	ldr	lr, [r5, #16]
   14874:	str	r1, [sp, #24]
   14878:	ldr	ip, [r5, #12]
   1487c:	str	r2, [sp, #20]
   14880:	ldr	r1, [r5, #8]
   14884:	ldr	r2, [r5, #4]
   14888:	str	r6, [sp, #16]
   1488c:	stmib	sp, {r1, ip, lr}
   14890:	mov	r1, #1
   14894:	str	r2, [sp]
   14898:	mov	r2, r0
   1489c:	mov	r0, r4
   148a0:	bl	110d4 <__fprintf_chk@plt>
   148a4:	add	sp, sp, #32
   148a8:	pop	{r4, r5, r6, pc}
   148ac:	mov	r2, #5
   148b0:	ldr	r1, [pc, #564]	; 14aec <__assert_fail@plt+0x3970>
   148b4:	mov	r0, #0
   148b8:	bl	10f60 <dcgettext@plt>
   148bc:	ldr	r3, [r5]
   148c0:	mov	r1, #1
   148c4:	mov	r2, r0
   148c8:	mov	r0, r4
   148cc:	add	sp, sp, #32
   148d0:	pop	{r4, r5, r6, lr}
   148d4:	b	110d4 <__fprintf_chk@plt>
   148d8:	mov	r2, #5
   148dc:	ldr	r1, [pc, #524]	; 14af0 <__assert_fail@plt+0x3974>
   148e0:	mov	r0, #0
   148e4:	bl	10f60 <dcgettext@plt>
   148e8:	ldr	r2, [r5, #4]
   148ec:	ldr	r3, [r5]
   148f0:	mov	r1, #1
   148f4:	str	r2, [sp, #48]	; 0x30
   148f8:	mov	r2, r0
   148fc:	mov	r0, r4
   14900:	add	sp, sp, #32
   14904:	pop	{r4, r5, r6, lr}
   14908:	b	110d4 <__fprintf_chk@plt>
   1490c:	mov	r2, #5
   14910:	ldr	r1, [pc, #476]	; 14af4 <__assert_fail@plt+0x3978>
   14914:	mov	r0, #0
   14918:	bl	10f60 <dcgettext@plt>
   1491c:	ldr	r1, [r5, #8]
   14920:	ldr	r2, [r5, #4]
   14924:	ldr	r3, [r5]
   14928:	str	r1, [sp, #52]	; 0x34
   1492c:	str	r2, [sp, #48]	; 0x30
   14930:	mov	r1, #1
   14934:	mov	r2, r0
   14938:	mov	r0, r4
   1493c:	add	sp, sp, #32
   14940:	pop	{r4, r5, r6, lr}
   14944:	b	110d4 <__fprintf_chk@plt>
   14948:	mov	r2, #5
   1494c:	ldr	r1, [pc, #420]	; 14af8 <__assert_fail@plt+0x397c>
   14950:	mov	r0, #0
   14954:	bl	10f60 <dcgettext@plt>
   14958:	ldr	r1, [r5, #8]
   1495c:	ldr	ip, [r5, #12]
   14960:	ldr	r2, [r5, #4]
   14964:	ldr	r3, [r5]
   14968:	stmib	sp, {r1, ip}
   1496c:	str	r2, [sp]
   14970:	mov	r1, #1
   14974:	mov	r2, r0
   14978:	mov	r0, r4
   1497c:	bl	110d4 <__fprintf_chk@plt>
   14980:	b	148a4 <__assert_fail@plt+0x3728>
   14984:	mov	r2, #5
   14988:	ldr	r1, [pc, #364]	; 14afc <__assert_fail@plt+0x3980>
   1498c:	mov	r0, #0
   14990:	bl	10f60 <dcgettext@plt>
   14994:	add	r1, r5, #8
   14998:	ldr	r2, [r5, #4]
   1499c:	ldm	r1, {r1, ip, lr}
   149a0:	ldr	r3, [r5]
   149a4:	str	r2, [sp]
   149a8:	stmib	sp, {r1, ip, lr}
   149ac:	mov	r1, #1
   149b0:	mov	r2, r0
   149b4:	mov	r0, r4
   149b8:	bl	110d4 <__fprintf_chk@plt>
   149bc:	b	148a4 <__assert_fail@plt+0x3728>
   149c0:	mov	r2, #5
   149c4:	ldr	r1, [pc, #308]	; 14b00 <__assert_fail@plt+0x3984>
   149c8:	mov	r0, #0
   149cc:	bl	10f60 <dcgettext@plt>
   149d0:	add	r1, r5, #8
   149d4:	ldr	r2, [r5, #4]
   149d8:	ldm	r1, {r1, ip, lr}
   149dc:	ldr	r6, [r5, #20]
   149e0:	ldr	r3, [r5]
   149e4:	stmib	sp, {r1, ip, lr}
   149e8:	mov	r1, #1
   149ec:	str	r2, [sp]
   149f0:	str	r6, [sp, #16]
   149f4:	mov	r2, r0
   149f8:	mov	r0, r4
   149fc:	bl	110d4 <__fprintf_chk@plt>
   14a00:	b	148a4 <__assert_fail@plt+0x3728>
   14a04:	mov	r2, #5
   14a08:	ldr	r1, [pc, #244]	; 14b04 <__assert_fail@plt+0x3988>
   14a0c:	mov	r0, #0
   14a10:	bl	10f60 <dcgettext@plt>
   14a14:	ldr	r2, [r5, #24]
   14a18:	ldr	r3, [r5]
   14a1c:	ldr	r6, [r5, #20]
   14a20:	ldr	lr, [r5, #16]
   14a24:	ldr	ip, [r5, #12]
   14a28:	str	r2, [sp, #20]
   14a2c:	ldr	r1, [r5, #8]
   14a30:	ldr	r2, [r5, #4]
   14a34:	str	r6, [sp, #16]
   14a38:	stmib	sp, {r1, ip, lr}
   14a3c:	mov	r1, #1
   14a40:	str	r2, [sp]
   14a44:	mov	r2, r0
   14a48:	mov	r0, r4
   14a4c:	bl	110d4 <__fprintf_chk@plt>
   14a50:	b	148a4 <__assert_fail@plt+0x3728>
   14a54:	mov	r2, #5
   14a58:	ldr	r1, [pc, #168]	; 14b08 <__assert_fail@plt+0x398c>
   14a5c:	mov	r0, #0
   14a60:	bl	10f60 <dcgettext@plt>
   14a64:	ldr	r1, [r5, #28]
   14a68:	ldr	r2, [r5, #24]
   14a6c:	ldr	r3, [r5]
   14a70:	ldr	r6, [r5, #20]
   14a74:	ldr	lr, [r5, #16]
   14a78:	str	r1, [sp, #24]
   14a7c:	ldr	ip, [r5, #12]
   14a80:	str	r2, [sp, #20]
   14a84:	ldr	r1, [r5, #8]
   14a88:	ldr	r2, [r5, #4]
   14a8c:	str	r6, [sp, #16]
   14a90:	stmib	sp, {r1, ip, lr}
   14a94:	mov	r1, #1
   14a98:	str	r2, [sp]
   14a9c:	mov	r2, r0
   14aa0:	mov	r0, r4
   14aa4:	bl	110d4 <__fprintf_chk@plt>
   14aa8:	b	148a4 <__assert_fail@plt+0x3728>
   14aac:	str	r3, [sp]
   14ab0:	mov	r1, #1
   14ab4:	mov	r3, r2
   14ab8:	ldr	r2, [pc, #76]	; 14b0c <__assert_fail@plt+0x3990>
   14abc:	bl	110d4 <__fprintf_chk@plt>
   14ac0:	b	147ac <__assert_fail@plt+0x3630>
   14ac4:	mov	r2, #5
   14ac8:	ldr	r1, [pc, #64]	; 14b10 <__assert_fail@plt+0x3994>
   14acc:	b	14850 <__assert_fail@plt+0x36d4>
   14ad0:	andeq	r6, r1, r8, asr lr
   14ad4:	andeq	r6, r1, ip, ror #28
   14ad8:	andeq	r0, r0, r6, ror #15
   14adc:	andeq	r7, r1, r4, asr #2
   14ae0:	andeq	r6, r1, r0, ror lr
   14ae4:	andeq	r6, r1, ip, lsl pc
   14ae8:	andeq	r7, r1, ip, asr #32
   14aec:	andeq	r6, r1, r0, asr #30
   14af0:	andeq	r6, r1, r0, asr pc
   14af4:	andeq	r6, r1, r8, ror #30
   14af8:	andeq	r6, r1, r4, lsl #31
   14afc:	andeq	r6, r1, r4, lsr #31
   14b00:	andeq	r6, r1, r8, asr #31
   14b04:	strdeq	r6, [r1], -r0
   14b08:	andeq	r7, r1, ip, lsl r0
   14b0c:	andeq	r6, r1, r4, ror #28
   14b10:	andeq	r7, r1, r0, lsl #1
   14b14:	push	{r4, r5, lr}
   14b18:	sub	sp, sp, #12
   14b1c:	ldr	r5, [sp, #24]
   14b20:	ldr	ip, [r5]
   14b24:	cmp	ip, #0
   14b28:	beq	14b44 <__assert_fail@plt+0x39c8>
   14b2c:	mov	lr, r5
   14b30:	mov	ip, #0
   14b34:	ldr	r4, [lr, #4]!
   14b38:	add	ip, ip, #1
   14b3c:	cmp	r4, #0
   14b40:	bne	14b34 <__assert_fail@plt+0x39b8>
   14b44:	stm	sp, {r5, ip}
   14b48:	bl	1477c <__assert_fail@plt+0x3600>
   14b4c:	add	sp, sp, #12
   14b50:	pop	{r4, r5, pc}
   14b54:	push	{r4, r5, lr}
   14b58:	sub	sp, sp, #52	; 0x34
   14b5c:	add	r5, sp, #4
   14b60:	ldr	r4, [sp, #64]	; 0x40
   14b64:	mov	ip, #0
   14b68:	sub	r4, r4, #4
   14b6c:	ldr	lr, [r4, #4]!
   14b70:	cmp	lr, #0
   14b74:	str	lr, [r5, #4]!
   14b78:	beq	14b88 <__assert_fail@plt+0x3a0c>
   14b7c:	add	ip, ip, #1
   14b80:	cmp	ip, #10
   14b84:	bne	14b6c <__assert_fail@plt+0x39f0>
   14b88:	add	lr, sp, #8
   14b8c:	str	ip, [sp, #4]
   14b90:	str	lr, [sp]
   14b94:	bl	1477c <__assert_fail@plt+0x3600>
   14b98:	add	sp, sp, #52	; 0x34
   14b9c:	pop	{r4, r5, pc}
   14ba0:	push	{r3}		; (str r3, [sp, #-4]!)
   14ba4:	push	{r4, lr}
   14ba8:	sub	sp, sp, #60	; 0x3c
   14bac:	add	lr, sp, #56	; 0x38
   14bb0:	add	r3, sp, #72	; 0x48
   14bb4:	str	r3, [lr, #-44]!	; 0xffffffd4
   14bb8:	add	r4, sp, #68	; 0x44
   14bbc:	mov	r3, #0
   14bc0:	ldr	ip, [r4, #4]!
   14bc4:	cmp	ip, #0
   14bc8:	str	ip, [lr, #4]!
   14bcc:	beq	14bdc <__assert_fail@plt+0x3a60>
   14bd0:	add	r3, r3, #1
   14bd4:	cmp	r3, #10
   14bd8:	bne	14bc0 <__assert_fail@plt+0x3a44>
   14bdc:	add	ip, sp, #16
   14be0:	str	r3, [sp, #4]
   14be4:	str	ip, [sp]
   14be8:	ldr	r3, [sp, #68]	; 0x44
   14bec:	bl	1477c <__assert_fail@plt+0x3600>
   14bf0:	add	sp, sp, #60	; 0x3c
   14bf4:	pop	{r4, lr}
   14bf8:	add	sp, sp, #4
   14bfc:	bx	lr
   14c00:	ldr	r3, [pc, #116]	; 14c7c <__assert_fail@plt+0x3b00>
   14c04:	push	{r4, lr}
   14c08:	mov	r0, #10
   14c0c:	ldr	r1, [r3]
   14c10:	bl	10f54 <fputc_unlocked@plt>
   14c14:	mov	r2, #5
   14c18:	ldr	r1, [pc, #96]	; 14c80 <__assert_fail@plt+0x3b04>
   14c1c:	mov	r0, #0
   14c20:	bl	10f60 <dcgettext@plt>
   14c24:	ldr	r2, [pc, #88]	; 14c84 <__assert_fail@plt+0x3b08>
   14c28:	mov	r1, r0
   14c2c:	mov	r0, #1
   14c30:	bl	110bc <__printf_chk@plt>
   14c34:	mov	r2, #5
   14c38:	ldr	r1, [pc, #72]	; 14c88 <__assert_fail@plt+0x3b0c>
   14c3c:	mov	r0, #0
   14c40:	bl	10f60 <dcgettext@plt>
   14c44:	ldr	r3, [pc, #64]	; 14c8c <__assert_fail@plt+0x3b10>
   14c48:	ldr	r2, [pc, #64]	; 14c90 <__assert_fail@plt+0x3b14>
   14c4c:	mov	r1, r0
   14c50:	mov	r0, #1
   14c54:	bl	110bc <__printf_chk@plt>
   14c58:	mov	r2, #5
   14c5c:	ldr	r1, [pc, #48]	; 14c94 <__assert_fail@plt+0x3b18>
   14c60:	mov	r0, #0
   14c64:	bl	10f60 <dcgettext@plt>
   14c68:	ldr	r2, [pc, #40]	; 14c98 <__assert_fail@plt+0x3b1c>
   14c6c:	pop	{r4, lr}
   14c70:	mov	r1, r0
   14c74:	mov	r0, #1
   14c78:	b	110bc <__printf_chk@plt>
   14c7c:	andeq	r8, r2, r4, ror r1
   14c80:	strheq	r7, [r1], -ip
   14c84:	ldrdeq	r7, [r1], -r0
   14c88:	andeq	r7, r1, r8, ror #1
   14c8c:	andeq	r6, r1, ip, ror #18
   14c90:	muleq	r1, r4, r9
   14c94:	strdeq	r7, [r1], -ip
   14c98:	andeq	r7, r1, r4, lsr #2
   14c9c:	push	{r4, lr}
   14ca0:	bl	1579c <__assert_fail@plt+0x4620>
   14ca4:	cmp	r0, #0
   14ca8:	popne	{r4, pc}
   14cac:	bl	151e4 <__assert_fail@plt+0x4068>
   14cb0:	push	{r4, lr}
   14cb4:	bl	1579c <__assert_fail@plt+0x4620>
   14cb8:	cmp	r0, #0
   14cbc:	popne	{r4, pc}
   14cc0:	bl	151e4 <__assert_fail@plt+0x4068>
   14cc4:	push	{r4, lr}
   14cc8:	bl	1579c <__assert_fail@plt+0x4620>
   14ccc:	cmp	r0, #0
   14cd0:	popne	{r4, pc}
   14cd4:	bl	151e4 <__assert_fail@plt+0x4068>
   14cd8:	push	{r4, r5, r6, lr}
   14cdc:	mov	r5, r0
   14ce0:	mov	r4, r1
   14ce4:	bl	157c8 <__assert_fail@plt+0x464c>
   14ce8:	cmp	r0, #0
   14cec:	popne	{r4, r5, r6, pc}
   14cf0:	adds	r4, r4, #0
   14cf4:	movne	r4, #1
   14cf8:	cmp	r5, #0
   14cfc:	orreq	r4, r4, #1
   14d00:	cmp	r4, #0
   14d04:	popeq	{r4, r5, r6, pc}
   14d08:	bl	151e4 <__assert_fail@plt+0x4068>
   14d0c:	push	{r4, lr}
   14d10:	cmp	r1, #0
   14d14:	orreq	r1, r1, #1
   14d18:	bl	157c8 <__assert_fail@plt+0x464c>
   14d1c:	cmp	r0, #0
   14d20:	popne	{r4, pc}
   14d24:	bl	151e4 <__assert_fail@plt+0x4068>
   14d28:	push	{r4, r5, r6, lr}
   14d2c:	mov	r6, r0
   14d30:	mov	r5, r1
   14d34:	mov	r4, r2
   14d38:	bl	15cc0 <__assert_fail@plt+0x4b44>
   14d3c:	cmp	r0, #0
   14d40:	popne	{r4, r5, r6, pc}
   14d44:	cmp	r6, #0
   14d48:	beq	14d58 <__assert_fail@plt+0x3bdc>
   14d4c:	cmp	r5, #0
   14d50:	cmpne	r4, #0
   14d54:	popeq	{r4, r5, r6, pc}
   14d58:	bl	151e4 <__assert_fail@plt+0x4068>
   14d5c:	b	14d28 <__assert_fail@plt+0x3bac>
   14d60:	cmp	r2, #0
   14d64:	cmpne	r1, #0
   14d68:	moveq	r2, #1
   14d6c:	moveq	r1, r2
   14d70:	push	{r4, lr}
   14d74:	bl	15cc0 <__assert_fail@plt+0x4b44>
   14d78:	cmp	r0, #0
   14d7c:	popne	{r4, pc}
   14d80:	bl	151e4 <__assert_fail@plt+0x4068>
   14d84:	mov	r2, r1
   14d88:	mov	r1, r0
   14d8c:	mov	r0, #0
   14d90:	b	14d28 <__assert_fail@plt+0x3bac>
   14d94:	mov	r2, r1
   14d98:	mov	r1, r0
   14d9c:	mov	r0, #0
   14da0:	b	14d60 <__assert_fail@plt+0x3be4>
   14da4:	push	{r4, r5, r6, lr}
   14da8:	subs	r6, r0, #0
   14dac:	sub	sp, sp, #8
   14db0:	mov	r5, r1
   14db4:	ldr	r4, [r1]
   14db8:	beq	14df4 <__assert_fail@plt+0x3c78>
   14dbc:	lsr	r1, r4, #1
   14dc0:	add	r3, r1, #1
   14dc4:	mvn	r3, r3
   14dc8:	cmp	r4, r3
   14dcc:	bhi	14df0 <__assert_fail@plt+0x3c74>
   14dd0:	add	r4, r4, #1
   14dd4:	add	r4, r4, r1
   14dd8:	mov	r0, r6
   14ddc:	mov	r1, r4
   14de0:	bl	14d28 <__assert_fail@plt+0x3bac>
   14de4:	str	r4, [r5]
   14de8:	add	sp, sp, #8
   14dec:	pop	{r4, r5, r6, pc}
   14df0:	bl	151e4 <__assert_fail@plt+0x4068>
   14df4:	cmp	r4, #0
   14df8:	bne	14dd8 <__assert_fail@plt+0x3c5c>
   14dfc:	mov	r1, r2
   14e00:	mov	r0, #64	; 0x40
   14e04:	str	r2, [sp, #4]
   14e08:	bl	15e00 <__assert_fail@plt+0x4c84>
   14e0c:	ldr	r2, [sp, #4]
   14e10:	cmp	r0, #0
   14e14:	movne	r4, r0
   14e18:	addeq	r4, r0, #1
   14e1c:	b	14dd8 <__assert_fail@plt+0x3c5c>
   14e20:	mov	r2, #1
   14e24:	b	14da4 <__assert_fail@plt+0x3c28>
   14e28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e2c:	sub	sp, sp, #12
   14e30:	ldr	r6, [r1]
   14e34:	mov	sl, r1
   14e38:	mov	r9, r0
   14e3c:	asrs	r4, r6, #1
   14e40:	mov	r5, r2
   14e44:	mov	fp, r3
   14e48:	ldr	r7, [sp, #48]	; 0x30
   14e4c:	bmi	14fb8 <__assert_fail@plt+0x3e3c>
   14e50:	mvn	r3, #-2147483648	; 0x80000000
   14e54:	sub	r3, r3, r4
   14e58:	cmp	r6, r3
   14e5c:	movle	r3, #0
   14e60:	movgt	r3, #1
   14e64:	mvn	r8, fp
   14e68:	cmp	r3, #0
   14e6c:	addeq	r4, r4, r6
   14e70:	mvnne	r4, #-2147483648	; 0x80000000
   14e74:	lsr	r8, r8, #31
   14e78:	cmp	fp, r4
   14e7c:	movge	r3, #0
   14e80:	andlt	r3, r8, #1
   14e84:	cmp	r3, #0
   14e88:	beq	14f70 <__assert_fail@plt+0x3df4>
   14e8c:	cmp	r7, #0
   14e90:	blt	15040 <__assert_fail@plt+0x3ec4>
   14e94:	bne	15038 <__assert_fail@plt+0x3ebc>
   14e98:	mov	r2, #64	; 0x40
   14e9c:	mov	r1, r7
   14ea0:	mov	r0, r2
   14ea4:	str	r2, [sp, #4]
   14ea8:	bl	1600c <__assert_fail@plt+0x4e90>
   14eac:	ldr	r2, [sp, #4]
   14eb0:	mov	r1, r7
   14eb4:	mov	r4, r0
   14eb8:	mov	r0, r2
   14ebc:	bl	1622c <__assert_fail@plt+0x50b0>
   14ec0:	ldr	r2, [sp, #4]
   14ec4:	sub	r1, r2, r1
   14ec8:	cmp	r9, #0
   14ecc:	sub	r3, r4, r6
   14ed0:	streq	r9, [sl]
   14ed4:	cmp	r3, r5
   14ed8:	bge	14f5c <__assert_fail@plt+0x3de0>
   14edc:	cmp	r5, #0
   14ee0:	blt	14fcc <__assert_fail@plt+0x3e50>
   14ee4:	cmp	r6, #0
   14ee8:	blt	14f08 <__assert_fail@plt+0x3d8c>
   14eec:	mvn	r3, #-2147483648	; 0x80000000
   14ef0:	sub	r3, r3, r5
   14ef4:	cmp	r6, r3
   14ef8:	movle	r3, #0
   14efc:	movgt	r3, #1
   14f00:	cmp	r3, #0
   14f04:	bne	150c8 <__assert_fail@plt+0x3f4c>
   14f08:	add	r5, r6, r5
   14f0c:	cmp	fp, r5
   14f10:	movge	r8, #0
   14f14:	andlt	r8, r8, #1
   14f18:	cmp	r8, #0
   14f1c:	mov	r4, r5
   14f20:	bne	150c8 <__assert_fail@plt+0x3f4c>
   14f24:	cmp	r7, #0
   14f28:	blt	14fe0 <__assert_fail@plt+0x3e64>
   14f2c:	beq	14f58 <__assert_fail@plt+0x3ddc>
   14f30:	cmp	r5, #0
   14f34:	blt	15088 <__assert_fail@plt+0x3f0c>
   14f38:	mov	r1, r7
   14f3c:	mvn	r0, #-2147483648	; 0x80000000
   14f40:	bl	1600c <__assert_fail@plt+0x4e90>
   14f44:	cmp	r5, r0
   14f48:	movle	r0, #0
   14f4c:	movgt	r0, #1
   14f50:	cmp	r0, #0
   14f54:	bne	150c8 <__assert_fail@plt+0x3f4c>
   14f58:	mul	r1, r5, r7
   14f5c:	mov	r0, r9
   14f60:	bl	14cd8 <__assert_fail@plt+0x3b5c>
   14f64:	str	r4, [sl]
   14f68:	add	sp, sp, #12
   14f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f70:	cmp	r7, #0
   14f74:	blt	1500c <__assert_fail@plt+0x3e90>
   14f78:	beq	14e98 <__assert_fail@plt+0x3d1c>
   14f7c:	cmp	r4, #0
   14f80:	blt	15048 <__assert_fail@plt+0x3ecc>
   14f84:	mov	r1, r7
   14f88:	mvn	r0, #-2147483648	; 0x80000000
   14f8c:	bl	1600c <__assert_fail@plt+0x4e90>
   14f90:	cmp	r0, r4
   14f94:	movge	r0, #0
   14f98:	movlt	r0, #1
   14f9c:	cmp	r0, #0
   14fa0:	mvnne	r2, #-2147483648	; 0x80000000
   14fa4:	bne	14e9c <__assert_fail@plt+0x3d20>
   14fa8:	mul	r1, r7, r4
   14fac:	cmp	r1, #63	; 0x3f
   14fb0:	bgt	14ec8 <__assert_fail@plt+0x3d4c>
   14fb4:	b	14e98 <__assert_fail@plt+0x3d1c>
   14fb8:	rsb	r3, r4, #-2147483648	; 0x80000000
   14fbc:	cmp	r6, r3
   14fc0:	movge	r3, #0
   14fc4:	movlt	r3, #1
   14fc8:	b	14e64 <__assert_fail@plt+0x3ce8>
   14fcc:	rsb	r3, r5, #-2147483648	; 0x80000000
   14fd0:	cmp	r6, r3
   14fd4:	movge	r3, #0
   14fd8:	movlt	r3, #1
   14fdc:	b	14f00 <__assert_fail@plt+0x3d84>
   14fe0:	cmp	r5, #0
   14fe4:	blt	1506c <__assert_fail@plt+0x3ef0>
   14fe8:	cmn	r7, #1
   14fec:	beq	14f58 <__assert_fail@plt+0x3ddc>
   14ff0:	mov	r1, r7
   14ff4:	mov	r0, #-2147483648	; 0x80000000
   14ff8:	bl	1600c <__assert_fail@plt+0x4e90>
   14ffc:	cmp	r5, r0
   15000:	movle	r0, #0
   15004:	movgt	r0, #1
   15008:	b	14f50 <__assert_fail@plt+0x3dd4>
   1500c:	cmp	r4, #0
   15010:	blt	150ac <__assert_fail@plt+0x3f30>
   15014:	cmn	r7, #1
   15018:	beq	14fa8 <__assert_fail@plt+0x3e2c>
   1501c:	mov	r1, r7
   15020:	mov	r0, #-2147483648	; 0x80000000
   15024:	bl	1600c <__assert_fail@plt+0x4e90>
   15028:	cmp	r0, r4
   1502c:	movge	r0, #0
   15030:	movlt	r0, #1
   15034:	b	14f9c <__assert_fail@plt+0x3e20>
   15038:	mov	r4, fp
   1503c:	b	14f84 <__assert_fail@plt+0x3e08>
   15040:	mov	r4, fp
   15044:	b	15014 <__assert_fail@plt+0x3e98>
   15048:	cmn	r4, #1
   1504c:	beq	14fa8 <__assert_fail@plt+0x3e2c>
   15050:	mov	r1, r4
   15054:	mov	r0, #-2147483648	; 0x80000000
   15058:	bl	1600c <__assert_fail@plt+0x4e90>
   1505c:	cmp	r7, r0
   15060:	movle	r0, #0
   15064:	movgt	r0, #1
   15068:	b	14f9c <__assert_fail@plt+0x3e20>
   1506c:	mov	r1, r7
   15070:	mvn	r0, #-2147483648	; 0x80000000
   15074:	bl	1600c <__assert_fail@plt+0x4e90>
   15078:	cmp	r5, r0
   1507c:	movge	r0, #0
   15080:	movlt	r0, #1
   15084:	b	14f50 <__assert_fail@plt+0x3dd4>
   15088:	cmn	r5, #1
   1508c:	beq	14f58 <__assert_fail@plt+0x3ddc>
   15090:	mov	r1, r5
   15094:	mov	r0, #-2147483648	; 0x80000000
   15098:	bl	1600c <__assert_fail@plt+0x4e90>
   1509c:	cmp	r7, r0
   150a0:	movle	r0, #0
   150a4:	movgt	r0, #1
   150a8:	b	14f50 <__assert_fail@plt+0x3dd4>
   150ac:	mov	r1, r7
   150b0:	mvn	r0, #-2147483648	; 0x80000000
   150b4:	bl	1600c <__assert_fail@plt+0x4e90>
   150b8:	cmp	r0, r4
   150bc:	movle	r0, #0
   150c0:	movgt	r0, #1
   150c4:	b	14f9c <__assert_fail@plt+0x3e20>
   150c8:	bl	151e4 <__assert_fail@plt+0x4068>
   150cc:	push	{r4, lr}
   150d0:	mov	r1, #1
   150d4:	bl	15754 <__assert_fail@plt+0x45d8>
   150d8:	cmp	r0, #0
   150dc:	popne	{r4, pc}
   150e0:	bl	151e4 <__assert_fail@plt+0x4068>
   150e4:	push	{r4, lr}
   150e8:	mov	r1, #1
   150ec:	bl	15754 <__assert_fail@plt+0x45d8>
   150f0:	cmp	r0, #0
   150f4:	popne	{r4, pc}
   150f8:	bl	151e4 <__assert_fail@plt+0x4068>
   150fc:	push	{r4, lr}
   15100:	bl	15754 <__assert_fail@plt+0x45d8>
   15104:	cmp	r0, #0
   15108:	popne	{r4, pc}
   1510c:	bl	151e4 <__assert_fail@plt+0x4068>
   15110:	push	{r4, lr}
   15114:	bl	15754 <__assert_fail@plt+0x45d8>
   15118:	cmp	r0, #0
   1511c:	popne	{r4, pc}
   15120:	bl	151e4 <__assert_fail@plt+0x4068>
   15124:	push	{r4, r5, r6, lr}
   15128:	mov	r6, r0
   1512c:	mov	r0, r1
   15130:	mov	r4, r1
   15134:	bl	1579c <__assert_fail@plt+0x4620>
   15138:	subs	r5, r0, #0
   1513c:	beq	15154 <__assert_fail@plt+0x3fd8>
   15140:	mov	r2, r4
   15144:	mov	r1, r6
   15148:	bl	10f30 <memcpy@plt>
   1514c:	mov	r0, r5
   15150:	pop	{r4, r5, r6, pc}
   15154:	bl	151e4 <__assert_fail@plt+0x4068>
   15158:	push	{r4, r5, r6, lr}
   1515c:	mov	r6, r0
   15160:	mov	r0, r1
   15164:	mov	r4, r1
   15168:	bl	1579c <__assert_fail@plt+0x4620>
   1516c:	subs	r5, r0, #0
   15170:	beq	15188 <__assert_fail@plt+0x400c>
   15174:	mov	r2, r4
   15178:	mov	r1, r6
   1517c:	bl	10f30 <memcpy@plt>
   15180:	mov	r0, r5
   15184:	pop	{r4, r5, r6, pc}
   15188:	bl	151e4 <__assert_fail@plt+0x4068>
   1518c:	push	{r4, r5, r6, lr}
   15190:	mov	r6, r0
   15194:	add	r0, r1, #1
   15198:	mov	r4, r1
   1519c:	bl	1579c <__assert_fail@plt+0x4620>
   151a0:	subs	r5, r0, #0
   151a4:	beq	151c4 <__assert_fail@plt+0x4048>
   151a8:	mov	r3, #0
   151ac:	mov	r1, r6
   151b0:	strb	r3, [r5, r4]
   151b4:	mov	r2, r4
   151b8:	bl	10f30 <memcpy@plt>
   151bc:	mov	r0, r5
   151c0:	pop	{r4, r5, r6, pc}
   151c4:	bl	151e4 <__assert_fail@plt+0x4068>
   151c8:	push	{r4, lr}
   151cc:	mov	r4, r0
   151d0:	bl	11068 <strlen@plt>
   151d4:	add	r1, r0, #1
   151d8:	mov	r0, r4
   151dc:	pop	{r4, lr}
   151e0:	b	15124 <__assert_fail@plt+0x3fa8>
   151e4:	ldr	r3, [pc, #44]	; 15218 <__assert_fail@plt+0x409c>
   151e8:	push	{r4, lr}
   151ec:	mov	r2, #5
   151f0:	ldr	r1, [pc, #36]	; 1521c <__assert_fail@plt+0x40a0>
   151f4:	mov	r0, #0
   151f8:	ldr	r4, [r3]
   151fc:	bl	10f60 <dcgettext@plt>
   15200:	ldr	r2, [pc, #24]	; 15220 <__assert_fail@plt+0x40a4>
   15204:	mov	r1, #0
   15208:	mov	r3, r0
   1520c:	mov	r0, r4
   15210:	bl	10ff0 <error@plt>
   15214:	bl	11158 <abort@plt>
   15218:	andeq	r8, r2, r8, lsl r1
   1521c:	andeq	r7, r1, r4, ror r1
   15220:	andeq	r6, r1, ip, lsl #26
   15224:	push	{r4, lr}
   15228:	bl	15b00 <__assert_fail@plt+0x4984>
   1522c:	cmn	r0, #1
   15230:	mov	r4, r0
   15234:	beq	15240 <__assert_fail@plt+0x40c4>
   15238:	mov	r0, r4
   1523c:	pop	{r4, pc}
   15240:	bl	11080 <__errno_location@plt>
   15244:	ldr	r3, [r0]
   15248:	cmp	r3, #12
   1524c:	bne	15238 <__assert_fail@plt+0x40bc>
   15250:	bl	151e4 <__assert_fail@plt+0x4068>
   15254:	cmp	r2, #0
   15258:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1525c:	beq	152f4 <__assert_fail@plt+0x4178>
   15260:	mov	r5, #0
   15264:	sub	r4, r2, #1
   15268:	mov	r6, r1
   1526c:	mov	r7, r0
   15270:	mov	r9, r5
   15274:	mvn	sl, #0
   15278:	mov	r8, #1
   1527c:	b	152a0 <__assert_fail@plt+0x4124>
   15280:	ldr	r3, [r7]
   15284:	mul	r3, r6, r3
   15288:	sub	r4, r4, #1
   1528c:	mov	r2, r9
   15290:	cmn	r4, #1
   15294:	str	r3, [r7]
   15298:	orr	r5, r5, r2
   1529c:	beq	152dc <__assert_fail@plt+0x4160>
   152a0:	cmp	r6, #0
   152a4:	blt	152e4 <__assert_fail@plt+0x4168>
   152a8:	mov	r1, r6
   152ac:	mov	r0, sl
   152b0:	beq	15280 <__assert_fail@plt+0x4104>
   152b4:	bl	15e00 <__assert_fail@plt+0x4c84>
   152b8:	ldr	r3, [r7]
   152bc:	cmp	r0, r3
   152c0:	bcs	15284 <__assert_fail@plt+0x4108>
   152c4:	sub	r4, r4, #1
   152c8:	mov	r2, r8
   152cc:	cmn	r4, #1
   152d0:	str	sl, [r7]
   152d4:	orr	r5, r5, r2
   152d8:	bne	152a0 <__assert_fail@plt+0x4124>
   152dc:	mov	r0, r5
   152e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   152e4:	ldr	r3, [r7]
   152e8:	cmp	r3, #0
   152ec:	bne	152c4 <__assert_fail@plt+0x4148>
   152f0:	b	15284 <__assert_fail@plt+0x4108>
   152f4:	mov	r5, r2
   152f8:	b	152dc <__assert_fail@plt+0x4160>
   152fc:	cmp	r2, #36	; 0x24
   15300:	push	{r4, r5, r6, r7, r8, r9, lr}
   15304:	sub	sp, sp, #12
   15308:	bhi	15734 <__assert_fail@plt+0x45b8>
   1530c:	cmp	r1, #0
   15310:	mov	r6, r1
   15314:	mov	r9, r2
   15318:	mov	r5, r0
   1531c:	mov	r8, r3
   15320:	moveq	r6, sp
   15324:	bl	11080 <__errno_location@plt>
   15328:	mov	r3, #0
   1532c:	str	r3, [r0]
   15330:	mov	r7, r0
   15334:	bl	11044 <__ctype_b_loc@plt>
   15338:	ldrb	r1, [r5]
   1533c:	mov	r2, r5
   15340:	ldr	r0, [r0]
   15344:	b	1534c <__assert_fail@plt+0x41d0>
   15348:	ldrb	r1, [r2, #1]!
   1534c:	lsl	r3, r1, #1
   15350:	ldrh	r3, [r0, r3]
   15354:	ands	r4, r3, #8192	; 0x2000
   15358:	bne	15348 <__assert_fail@plt+0x41cc>
   1535c:	cmp	r1, #45	; 0x2d
   15360:	bne	15374 <__assert_fail@plt+0x41f8>
   15364:	mov	r4, #4
   15368:	mov	r0, r4
   1536c:	add	sp, sp, #12
   15370:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15374:	mov	r2, r9
   15378:	mov	r1, r6
   1537c:	mov	r0, r5
   15380:	bl	1105c <strtoul@plt>
   15384:	ldr	r9, [r6]
   15388:	cmp	r5, r9
   1538c:	str	r0, [sp, #4]
   15390:	beq	153d8 <__assert_fail@plt+0x425c>
   15394:	ldr	r4, [r7]
   15398:	cmp	r4, #0
   1539c:	bne	153c8 <__assert_fail@plt+0x424c>
   153a0:	ldr	r3, [sp, #40]	; 0x28
   153a4:	cmp	r3, #0
   153a8:	beq	153b8 <__assert_fail@plt+0x423c>
   153ac:	ldrb	r7, [r9]
   153b0:	cmp	r7, #0
   153b4:	bne	1540c <__assert_fail@plt+0x4290>
   153b8:	str	r0, [r8]
   153bc:	mov	r0, r4
   153c0:	add	sp, sp, #12
   153c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   153c8:	cmp	r4, #34	; 0x22
   153cc:	bne	15364 <__assert_fail@plt+0x41e8>
   153d0:	mov	r4, #1
   153d4:	b	153a0 <__assert_fail@plt+0x4224>
   153d8:	ldr	r3, [sp, #40]	; 0x28
   153dc:	cmp	r3, #0
   153e0:	beq	15364 <__assert_fail@plt+0x41e8>
   153e4:	ldrb	r1, [r9]
   153e8:	cmp	r1, #0
   153ec:	beq	15364 <__assert_fail@plt+0x41e8>
   153f0:	mov	r0, r3
   153f4:	bl	11074 <strchr@plt>
   153f8:	cmp	r0, #0
   153fc:	beq	15364 <__assert_fail@plt+0x41e8>
   15400:	ldrb	r7, [r9]
   15404:	mov	r3, #1
   15408:	str	r3, [sp, #4]
   1540c:	mov	r1, r7
   15410:	ldr	r0, [sp, #40]	; 0x28
   15414:	bl	11074 <strchr@plt>
   15418:	cmp	r0, #0
   1541c:	beq	156fc <__assert_fail@plt+0x4580>
   15420:	sub	r3, r7, #69	; 0x45
   15424:	cmp	r3, #47	; 0x2f
   15428:	ldrls	pc, [pc, r3, lsl #2]
   1542c:	b	154f0 <__assert_fail@plt+0x4374>
   15430:	andeq	r5, r1, r0, ror #11
   15434:	strdeq	r5, [r1], -r0
   15438:	andeq	r5, r1, r0, ror #11
   1543c:	strdeq	r5, [r1], -r0
   15440:	strdeq	r5, [r1], -r0
   15444:	strdeq	r5, [r1], -r0
   15448:	andeq	r5, r1, r0, ror #11
   1544c:	strdeq	r5, [r1], -r0
   15450:	andeq	r5, r1, r0, ror #11
   15454:	strdeq	r5, [r1], -r0
   15458:	strdeq	r5, [r1], -r0
   1545c:	andeq	r5, r1, r0, ror #11
   15460:	strdeq	r5, [r1], -r0
   15464:	strdeq	r5, [r1], -r0
   15468:	strdeq	r5, [r1], -r0
   1546c:	andeq	r5, r1, r0, ror #11
   15470:	strdeq	r5, [r1], -r0
   15474:	strdeq	r5, [r1], -r0
   15478:	strdeq	r5, [r1], -r0
   1547c:	strdeq	r5, [r1], -r0
   15480:	andeq	r5, r1, r0, ror #11
   15484:	andeq	r5, r1, r0, ror #11
   15488:	strdeq	r5, [r1], -r0
   1548c:	strdeq	r5, [r1], -r0
   15490:	strdeq	r5, [r1], -r0
   15494:	strdeq	r5, [r1], -r0
   15498:	strdeq	r5, [r1], -r0
   1549c:	strdeq	r5, [r1], -r0
   154a0:	strdeq	r5, [r1], -r0
   154a4:	strdeq	r5, [r1], -r0
   154a8:	strdeq	r5, [r1], -r0
   154ac:	strdeq	r5, [r1], -r0
   154b0:	strdeq	r5, [r1], -r0
   154b4:	strdeq	r5, [r1], -r0
   154b8:	andeq	r5, r1, r0, ror #11
   154bc:	strdeq	r5, [r1], -r0
   154c0:	strdeq	r5, [r1], -r0
   154c4:	strdeq	r5, [r1], -r0
   154c8:	andeq	r5, r1, r0, ror #11
   154cc:	strdeq	r5, [r1], -r0
   154d0:	andeq	r5, r1, r0, ror #11
   154d4:	strdeq	r5, [r1], -r0
   154d8:	strdeq	r5, [r1], -r0
   154dc:	strdeq	r5, [r1], -r0
   154e0:	strdeq	r5, [r1], -r0
   154e4:	strdeq	r5, [r1], -r0
   154e8:	strdeq	r5, [r1], -r0
   154ec:	andeq	r5, r1, r0, ror #11
   154f0:	mov	r5, #1
   154f4:	mov	r1, #1024	; 0x400
   154f8:	sub	r7, r7, #66	; 0x42
   154fc:	cmp	r7, #53	; 0x35
   15500:	ldrls	pc, [pc, r7, lsl #2]
   15504:	b	156fc <__assert_fail@plt+0x4580>
   15508:	andeq	r5, r1, r0, ror #13
   1550c:	strdeq	r5, [r1], -ip
   15510:	strdeq	r5, [r1], -ip
   15514:	ldrdeq	r5, [r1], -r8
   15518:	strdeq	r5, [r1], -ip
   1551c:	ldrdeq	r5, [r1], -r0
   15520:	strdeq	r5, [r1], -ip
   15524:	strdeq	r5, [r1], -ip
   15528:	strdeq	r5, [r1], -ip
   1552c:	andeq	r5, r1, r8, asr #13
   15530:	strdeq	r5, [r1], -ip
   15534:	andeq	r5, r1, r0, asr #13
   15538:	strdeq	r5, [r1], -ip
   1553c:	strdeq	r5, [r1], -ip
   15540:			; <UNDEFINED> instruction: 0x000156b8
   15544:	strdeq	r5, [r1], -ip
   15548:	strdeq	r5, [r1], -ip
   1554c:	strdeq	r5, [r1], -ip
   15550:	muleq	r1, ip, r6
   15554:	strdeq	r5, [r1], -ip
   15558:	strdeq	r5, [r1], -ip
   1555c:	strdeq	r5, [r1], -ip
   15560:	strdeq	r5, [r1], -ip
   15564:	muleq	r1, r4, r6
   15568:	andeq	r5, r1, r8, ror r6
   1556c:	strdeq	r5, [r1], -ip
   15570:	strdeq	r5, [r1], -ip
   15574:	strdeq	r5, [r1], -ip
   15578:	strdeq	r5, [r1], -ip
   1557c:	strdeq	r5, [r1], -ip
   15580:	strdeq	r5, [r1], -ip
   15584:	strdeq	r5, [r1], -ip
   15588:	andeq	r5, r1, ip, asr r6
   1558c:	andeq	r5, r1, r0, asr r6
   15590:	strdeq	r5, [r1], -ip
   15594:	strdeq	r5, [r1], -ip
   15598:	strdeq	r5, [r1], -ip
   1559c:	ldrdeq	r5, [r1], -r0
   155a0:	strdeq	r5, [r1], -ip
   155a4:	strdeq	r5, [r1], -ip
   155a8:	strdeq	r5, [r1], -ip
   155ac:	andeq	r5, r1, r8, asr #13
   155b0:	strdeq	r5, [r1], -ip
   155b4:	andeq	r5, r1, r0, asr #13
   155b8:	strdeq	r5, [r1], -ip
   155bc:	strdeq	r5, [r1], -ip
   155c0:	strdeq	r5, [r1], -ip
   155c4:	strdeq	r5, [r1], -ip
   155c8:	strdeq	r5, [r1], -ip
   155cc:	strdeq	r5, [r1], -ip
   155d0:	muleq	r1, ip, r6
   155d4:	strdeq	r5, [r1], -ip
   155d8:	strdeq	r5, [r1], -ip
   155dc:	andeq	r5, r1, ip, lsl r6
   155e0:	mov	r1, #48	; 0x30
   155e4:	ldr	r0, [sp, #40]	; 0x28
   155e8:	bl	11074 <strchr@plt>
   155ec:	cmp	r0, #0
   155f0:	beq	154f0 <__assert_fail@plt+0x4374>
   155f4:	ldrb	r3, [r9, #1]
   155f8:	cmp	r3, #68	; 0x44
   155fc:	beq	15610 <__assert_fail@plt+0x4494>
   15600:	cmp	r3, #105	; 0x69
   15604:	beq	1570c <__assert_fail@plt+0x4590>
   15608:	cmp	r3, #66	; 0x42
   1560c:	bne	154f0 <__assert_fail@plt+0x4374>
   15610:	mov	r5, #2
   15614:	mov	r1, #1000	; 0x3e8
   15618:	b	154f8 <__assert_fail@plt+0x437c>
   1561c:	ldr	r0, [sp, #4]
   15620:	cmp	r0, #0
   15624:	lslge	r0, r0, #1
   15628:	strge	r0, [sp, #4]
   1562c:	movge	r3, #0
   15630:	blt	15724 <__assert_fail@plt+0x45a8>
   15634:	add	r2, r9, r5
   15638:	str	r2, [r6]
   1563c:	ldrb	r2, [r9, r5]
   15640:	orr	r4, r4, r3
   15644:	cmp	r2, #0
   15648:	orrne	r4, r4, #2
   1564c:	b	153b8 <__assert_fail@plt+0x423c>
   15650:	ldr	r0, [sp, #4]
   15654:	mov	r3, #0
   15658:	b	15634 <__assert_fail@plt+0x44b8>
   1565c:	ldr	r0, [sp, #4]
   15660:	cmp	r0, #8388608	; 0x800000
   15664:	bcs	15724 <__assert_fail@plt+0x45a8>
   15668:	lsl	r0, r0, #9
   1566c:	str	r0, [sp, #4]
   15670:	mov	r3, #0
   15674:	b	15634 <__assert_fail@plt+0x44b8>
   15678:	mov	r2, #7
   1567c:	add	r0, sp, #4
   15680:	bl	15254 <__assert_fail@plt+0x40d8>
   15684:	ldr	r9, [r6]
   15688:	mov	r3, r0
   1568c:	ldr	r0, [sp, #4]
   15690:	b	15634 <__assert_fail@plt+0x44b8>
   15694:	mov	r2, #8
   15698:	b	1567c <__assert_fail@plt+0x4500>
   1569c:	mov	r2, #4
   156a0:	add	r0, sp, r2
   156a4:	bl	15254 <__assert_fail@plt+0x40d8>
   156a8:	ldr	r9, [r6]
   156ac:	mov	r3, r0
   156b0:	ldr	r0, [sp, #4]
   156b4:	b	15634 <__assert_fail@plt+0x44b8>
   156b8:	mov	r2, #5
   156bc:	b	1567c <__assert_fail@plt+0x4500>
   156c0:	mov	r2, #2
   156c4:	b	1567c <__assert_fail@plt+0x4500>
   156c8:	mov	r2, #1
   156cc:	b	1567c <__assert_fail@plt+0x4500>
   156d0:	mov	r2, #3
   156d4:	b	1567c <__assert_fail@plt+0x4500>
   156d8:	mov	r2, #6
   156dc:	b	1567c <__assert_fail@plt+0x4500>
   156e0:	ldr	r0, [sp, #4]
   156e4:	cmp	r0, #4194304	; 0x400000
   156e8:	bcs	15724 <__assert_fail@plt+0x45a8>
   156ec:	lsl	r0, r0, #10
   156f0:	str	r0, [sp, #4]
   156f4:	mov	r3, #0
   156f8:	b	15634 <__assert_fail@plt+0x44b8>
   156fc:	ldr	r3, [sp, #4]
   15700:	orr	r4, r4, #2
   15704:	str	r3, [r8]
   15708:	b	15368 <__assert_fail@plt+0x41ec>
   1570c:	ldrb	r5, [r9, #2]
   15710:	mov	r1, #1024	; 0x400
   15714:	cmp	r5, #66	; 0x42
   15718:	movne	r5, #1
   1571c:	moveq	r5, #3
   15720:	b	154f8 <__assert_fail@plt+0x437c>
   15724:	mvn	r0, #0
   15728:	str	r0, [sp, #4]
   1572c:	mov	r3, #1
   15730:	b	15634 <__assert_fail@plt+0x44b8>
   15734:	ldr	r3, [pc, #12]	; 15748 <__assert_fail@plt+0x45cc>
   15738:	mov	r2, #85	; 0x55
   1573c:	ldr	r1, [pc, #8]	; 1574c <__assert_fail@plt+0x45d0>
   15740:	ldr	r0, [pc, #8]	; 15750 <__assert_fail@plt+0x45d4>
   15744:	bl	1117c <__assert_fail@plt>
   15748:	andeq	r7, r1, r8, lsl #3
   1574c:	muleq	r1, r4, r1
   15750:	andeq	r7, r1, r4, lsr #3
   15754:	cmp	r1, #0
   15758:	cmpne	r0, #0
   1575c:	moveq	r1, #1
   15760:	moveq	r0, r1
   15764:	umull	r2, r3, r0, r1
   15768:	adds	r3, r3, #0
   1576c:	movne	r3, #1
   15770:	cmp	r2, #0
   15774:	blt	15784 <__assert_fail@plt+0x4608>
   15778:	cmp	r3, #0
   1577c:	bne	15784 <__assert_fail@plt+0x4608>
   15780:	b	10ea0 <calloc@plt>
   15784:	push	{r4, lr}
   15788:	bl	11080 <__errno_location@plt>
   1578c:	mov	r3, #12
   15790:	str	r3, [r0]
   15794:	mov	r0, #0
   15798:	pop	{r4, pc}
   1579c:	cmp	r0, #0
   157a0:	moveq	r0, #1
   157a4:	cmp	r0, #0
   157a8:	blt	157b0 <__assert_fail@plt+0x4634>
   157ac:	b	11008 <malloc@plt>
   157b0:	push	{r4, lr}
   157b4:	bl	11080 <__errno_location@plt>
   157b8:	mov	r3, #12
   157bc:	str	r3, [r0]
   157c0:	mov	r0, #0
   157c4:	pop	{r4, pc}
   157c8:	cmp	r0, #0
   157cc:	beq	157f0 <__assert_fail@plt+0x4674>
   157d0:	cmp	r1, #0
   157d4:	push	{lr}		; (str lr, [sp, #-4]!)
   157d8:	sub	sp, sp, #12
   157dc:	beq	157f8 <__assert_fail@plt+0x467c>
   157e0:	blt	15810 <__assert_fail@plt+0x4694>
   157e4:	add	sp, sp, #12
   157e8:	pop	{lr}		; (ldr lr, [sp], #4)
   157ec:	b	10f6c <realloc@plt>
   157f0:	mov	r0, r1
   157f4:	b	1579c <__assert_fail@plt+0x4620>
   157f8:	str	r1, [sp, #4]
   157fc:	bl	12434 <__assert_fail@plt+0x12b8>
   15800:	ldr	r3, [sp, #4]
   15804:	mov	r0, r3
   15808:	add	sp, sp, #12
   1580c:	pop	{pc}		; (ldr pc, [sp], #4)
   15810:	bl	11080 <__errno_location@plt>
   15814:	mov	r2, #12
   15818:	mov	r3, #0
   1581c:	str	r2, [r0]
   15820:	b	15804 <__assert_fail@plt+0x4688>
   15824:	push	{r4, r5, r6, lr}
   15828:	mov	r4, r0
   1582c:	bl	10fd8 <__fpending@plt>
   15830:	ldr	r5, [r4]
   15834:	and	r5, r5, #32
   15838:	mov	r6, r0
   1583c:	mov	r0, r4
   15840:	bl	158a0 <__assert_fail@plt+0x4724>
   15844:	cmp	r5, #0
   15848:	mov	r4, r0
   1584c:	bne	1586c <__assert_fail@plt+0x46f0>
   15850:	cmp	r0, #0
   15854:	beq	15864 <__assert_fail@plt+0x46e8>
   15858:	cmp	r6, #0
   1585c:	beq	15888 <__assert_fail@plt+0x470c>
   15860:	mvn	r4, #0
   15864:	mov	r0, r4
   15868:	pop	{r4, r5, r6, pc}
   1586c:	cmp	r0, #0
   15870:	bne	15860 <__assert_fail@plt+0x46e4>
   15874:	bl	11080 <__errno_location@plt>
   15878:	str	r4, [r0]
   1587c:	mvn	r4, #0
   15880:	mov	r0, r4
   15884:	pop	{r4, r5, r6, pc}
   15888:	bl	11080 <__errno_location@plt>
   1588c:	ldr	r4, [r0]
   15890:	subs	r4, r4, #9
   15894:	mvnne	r4, #0
   15898:	mov	r0, r4
   1589c:	pop	{r4, r5, r6, pc}
   158a0:	push	{r4, r5, lr}
   158a4:	sub	sp, sp, #12
   158a8:	mov	r4, r0
   158ac:	bl	110c8 <fileno@plt>
   158b0:	cmp	r0, #0
   158b4:	mov	r0, r4
   158b8:	blt	15934 <__assert_fail@plt+0x47b8>
   158bc:	bl	11020 <__freading@plt>
   158c0:	cmp	r0, #0
   158c4:	bne	15900 <__assert_fail@plt+0x4784>
   158c8:	mov	r0, r4
   158cc:	bl	15940 <__assert_fail@plt+0x47c4>
   158d0:	cmp	r0, #0
   158d4:	beq	15930 <__assert_fail@plt+0x47b4>
   158d8:	bl	11080 <__errno_location@plt>
   158dc:	mov	r5, r0
   158e0:	mov	r0, r4
   158e4:	ldr	r4, [r5]
   158e8:	bl	110e0 <fclose@plt>
   158ec:	cmp	r4, #0
   158f0:	mvnne	r0, #0
   158f4:	strne	r4, [r5]
   158f8:	add	sp, sp, #12
   158fc:	pop	{r4, r5, pc}
   15900:	mov	r0, r4
   15904:	bl	110c8 <fileno@plt>
   15908:	mov	r3, #1
   1590c:	str	r3, [sp]
   15910:	mov	r2, #0
   15914:	mov	r3, #0
   15918:	bl	10fb4 <lseek64@plt>
   1591c:	mvn	r3, #0
   15920:	mvn	r2, #0
   15924:	cmp	r1, r3
   15928:	cmpeq	r0, r2
   1592c:	bne	158c8 <__assert_fail@plt+0x474c>
   15930:	mov	r0, r4
   15934:	add	sp, sp, #12
   15938:	pop	{r4, r5, lr}
   1593c:	b	110e0 <fclose@plt>
   15940:	push	{r4, lr}
   15944:	subs	r4, r0, #0
   15948:	sub	sp, sp, #8
   1594c:	beq	15968 <__assert_fail@plt+0x47ec>
   15950:	bl	11020 <__freading@plt>
   15954:	cmp	r0, #0
   15958:	beq	15968 <__assert_fail@plt+0x47ec>
   1595c:	ldr	r3, [r4]
   15960:	tst	r3, #256	; 0x100
   15964:	bne	15978 <__assert_fail@plt+0x47fc>
   15968:	mov	r0, r4
   1596c:	add	sp, sp, #8
   15970:	pop	{r4, lr}
   15974:	b	10f00 <fflush@plt>
   15978:	mov	r3, #1
   1597c:	str	r3, [sp]
   15980:	mov	r2, #0
   15984:	mov	r3, #0
   15988:	mov	r0, r4
   1598c:	bl	159a0 <__assert_fail@plt+0x4824>
   15990:	mov	r0, r4
   15994:	add	sp, sp, #8
   15998:	pop	{r4, lr}
   1599c:	b	10f00 <fflush@plt>
   159a0:	push	{r4, r5, r6, r7, r8, lr}
   159a4:	sub	sp, sp, #8
   159a8:	ldmib	r0, {ip, lr}
   159ac:	mov	r4, r0
   159b0:	ldr	r5, [sp, #32]
   159b4:	cmp	lr, ip
   159b8:	beq	159d0 <__assert_fail@plt+0x4854>
   159bc:	str	r5, [sp, #32]
   159c0:	mov	r0, r4
   159c4:	add	sp, sp, #8
   159c8:	pop	{r4, r5, r6, r7, r8, lr}
   159cc:	b	110ec <fseeko64@plt>
   159d0:	ldr	lr, [r0, #20]
   159d4:	ldr	ip, [r0, #16]
   159d8:	cmp	lr, ip
   159dc:	bne	159bc <__assert_fail@plt+0x4840>
   159e0:	ldr	r8, [r0, #36]	; 0x24
   159e4:	cmp	r8, #0
   159e8:	bne	159bc <__assert_fail@plt+0x4840>
   159ec:	mov	r6, r2
   159f0:	mov	r7, r3
   159f4:	bl	110c8 <fileno@plt>
   159f8:	mov	r2, r6
   159fc:	mov	r3, r7
   15a00:	str	r5, [sp]
   15a04:	bl	10fb4 <lseek64@plt>
   15a08:	mvn	r3, #0
   15a0c:	mvn	r2, #0
   15a10:	cmp	r1, r3
   15a14:	cmpeq	r0, r2
   15a18:	beq	15a38 <__assert_fail@plt+0x48bc>
   15a1c:	ldr	r3, [r4]
   15a20:	strd	r0, [r4, #80]	; 0x50
   15a24:	mov	r0, r8
   15a28:	bic	r3, r3, #16
   15a2c:	str	r3, [r4]
   15a30:	add	sp, sp, #8
   15a34:	pop	{r4, r5, r6, r7, r8, pc}
   15a38:	mvn	r0, #0
   15a3c:	b	15a30 <__assert_fail@plt+0x48b4>
   15a40:	push	{r4, lr}
   15a44:	mov	r0, #14
   15a48:	bl	11128 <nl_langinfo@plt>
   15a4c:	cmp	r0, #0
   15a50:	beq	15a68 <__assert_fail@plt+0x48ec>
   15a54:	ldrb	r2, [r0]
   15a58:	ldr	r3, [pc, #16]	; 15a70 <__assert_fail@plt+0x48f4>
   15a5c:	cmp	r2, #0
   15a60:	moveq	r0, r3
   15a64:	pop	{r4, pc}
   15a68:	ldr	r0, [pc]	; 15a70 <__assert_fail@plt+0x48f4>
   15a6c:	pop	{r4, pc}
   15a70:	andeq	r7, r1, ip, asr #3
   15a74:	push	{r4, r5, r6, r7, lr}
   15a78:	subs	r6, r0, #0
   15a7c:	sub	sp, sp, #12
   15a80:	addeq	r6, sp, #4
   15a84:	mov	r0, r6
   15a88:	mov	r5, r2
   15a8c:	mov	r7, r1
   15a90:	bl	10fe4 <mbrtowc@plt>
   15a94:	cmp	r5, #0
   15a98:	cmnne	r0, #3
   15a9c:	mov	r4, r0
   15aa0:	bls	15abc <__assert_fail@plt+0x4940>
   15aa4:	mov	r0, #0
   15aa8:	bl	15d0c <__assert_fail@plt+0x4b90>
   15aac:	cmp	r0, #0
   15ab0:	moveq	r4, #1
   15ab4:	ldrbeq	r3, [r7]
   15ab8:	streq	r3, [r6]
   15abc:	mov	r0, r4
   15ac0:	add	sp, sp, #12
   15ac4:	pop	{r4, r5, r6, r7, pc}
   15ac8:	lsrs	r3, r1, #30
   15acc:	movne	r3, #1
   15ad0:	moveq	r3, #0
   15ad4:	lsls	r1, r1, #2
   15ad8:	bmi	15ae8 <__assert_fail@plt+0x496c>
   15adc:	cmp	r3, #0
   15ae0:	bne	15ae8 <__assert_fail@plt+0x496c>
   15ae4:	b	157c8 <__assert_fail@plt+0x464c>
   15ae8:	push	{r4, lr}
   15aec:	bl	11080 <__errno_location@plt>
   15af0:	mov	r3, #12
   15af4:	str	r3, [r0]
   15af8:	mov	r0, #0
   15afc:	pop	{r4, pc}
   15b00:	push	{r4, r5, r6, r7, r8, lr}
   15b04:	subs	r7, r0, #0
   15b08:	sub	sp, sp, #8
   15b0c:	mov	r6, r1
   15b10:	mov	r8, r2
   15b14:	beq	15bb0 <__assert_fail@plt+0x4a34>
   15b18:	mov	r3, #10
   15b1c:	mov	r1, r3
   15b20:	mov	r0, #0
   15b24:	str	r3, [sp, #4]
   15b28:	bl	15ac8 <__assert_fail@plt+0x494c>
   15b2c:	subs	r4, r0, #0
   15b30:	beq	15b70 <__assert_fail@plt+0x49f4>
   15b34:	mov	r1, r6
   15b38:	add	r3, sp, #4
   15b3c:	mov	r2, r4
   15b40:	mov	r0, r7
   15b44:	ldr	r5, [sp, #4]
   15b48:	bl	110a4 <getgrouplist@plt>
   15b4c:	ldr	r1, [sp, #4]
   15b50:	cmp	r0, #0
   15b54:	blt	15b7c <__assert_fail@plt+0x4a00>
   15b58:	mov	r0, r4
   15b5c:	bl	15ac8 <__assert_fail@plt+0x494c>
   15b60:	cmp	r0, #0
   15b64:	bne	15ba0 <__assert_fail@plt+0x4a24>
   15b68:	mov	r0, r4
   15b6c:	bl	12434 <__assert_fail@plt+0x12b8>
   15b70:	mvn	r0, #0
   15b74:	add	sp, sp, #8
   15b78:	pop	{r4, r5, r6, r7, r8, pc}
   15b7c:	cmp	r5, r1
   15b80:	lsleq	r1, r1, #1
   15b84:	mov	r0, r4
   15b88:	streq	r1, [sp, #4]
   15b8c:	bl	15ac8 <__assert_fail@plt+0x494c>
   15b90:	cmp	r0, #0
   15b94:	beq	15b68 <__assert_fail@plt+0x49ec>
   15b98:	mov	r4, r0
   15b9c:	b	15b34 <__assert_fail@plt+0x49b8>
   15ba0:	str	r0, [r8]
   15ba4:	ldr	r0, [sp, #4]
   15ba8:	add	sp, sp, #8
   15bac:	pop	{r4, r5, r6, r7, r8, pc}
   15bb0:	mov	r1, r7
   15bb4:	bl	11134 <getgroups@plt>
   15bb8:	cmp	r0, #0
   15bbc:	str	r0, [sp, #4]
   15bc0:	blt	15c74 <__assert_fail@plt+0x4af8>
   15bc4:	adds	r5, r6, #1
   15bc8:	movne	r5, #1
   15bcc:	cmp	r0, #0
   15bd0:	movne	r3, r5
   15bd4:	orreq	r3, r5, #1
   15bd8:	cmp	r3, #0
   15bdc:	addne	r0, r0, #1
   15be0:	strne	r0, [sp, #4]
   15be4:	mov	r1, r0
   15be8:	mov	r0, #0
   15bec:	bl	15ac8 <__assert_fail@plt+0x494c>
   15bf0:	subs	r4, r0, #0
   15bf4:	beq	15b70 <__assert_fail@plt+0x49f4>
   15bf8:	ldr	r0, [sp, #4]
   15bfc:	cmn	r6, #1
   15c00:	sub	r0, r0, r5
   15c04:	beq	15cac <__assert_fail@plt+0x4b30>
   15c08:	add	r1, r4, #4
   15c0c:	bl	11134 <getgroups@plt>
   15c10:	cmp	r0, #0
   15c14:	addge	r0, r0, #1
   15c18:	strge	r6, [r4]
   15c1c:	blt	15b68 <__assert_fail@plt+0x49ec>
   15c20:	cmp	r0, #1
   15c24:	str	r4, [r8]
   15c28:	ble	15b74 <__assert_fail@plt+0x49f8>
   15c2c:	add	ip, r4, r0, lsl #2
   15c30:	add	r3, r4, #4
   15c34:	cmp	ip, r3
   15c38:	ldr	lr, [r4]
   15c3c:	bhi	15c60 <__assert_fail@plt+0x4ae4>
   15c40:	b	15b74 <__assert_fail@plt+0x49f8>
   15c44:	ldr	r1, [r4]
   15c48:	cmp	r2, r1
   15c4c:	strne	r2, [r4, #4]
   15c50:	addne	r4, r4, #4
   15c54:	beq	15c6c <__assert_fail@plt+0x4af0>
   15c58:	cmp	ip, r3
   15c5c:	bls	15b74 <__assert_fail@plt+0x49f8>
   15c60:	ldr	r2, [r3], #4
   15c64:	cmp	lr, r2
   15c68:	bne	15c44 <__assert_fail@plt+0x4ac8>
   15c6c:	sub	r0, r0, #1
   15c70:	b	15c58 <__assert_fail@plt+0x4adc>
   15c74:	bl	11080 <__errno_location@plt>
   15c78:	ldr	r3, [r0]
   15c7c:	cmp	r3, #38	; 0x26
   15c80:	bne	15b70 <__assert_fail@plt+0x49f4>
   15c84:	mov	r0, r7
   15c88:	mov	r1, #4
   15c8c:	bl	157c8 <__assert_fail@plt+0x464c>
   15c90:	subs	r3, r0, #0
   15c94:	beq	15b70 <__assert_fail@plt+0x49f4>
   15c98:	adds	r0, r6, #1
   15c9c:	str	r3, [r8]
   15ca0:	movne	r0, #1
   15ca4:	str	r6, [r3]
   15ca8:	b	15b74 <__assert_fail@plt+0x49f8>
   15cac:	mov	r1, r4
   15cb0:	bl	11134 <getgroups@plt>
   15cb4:	cmp	r0, #0
   15cb8:	bge	15c20 <__assert_fail@plt+0x4aa4>
   15cbc:	b	15b68 <__assert_fail@plt+0x49ec>
   15cc0:	push	{r4, r5, r6, lr}
   15cc4:	subs	r4, r2, #0
   15cc8:	mov	r6, r0
   15ccc:	mov	r5, r1
   15cd0:	beq	15cfc <__assert_fail@plt+0x4b80>
   15cd4:	mov	r1, r4
   15cd8:	mvn	r0, #0
   15cdc:	bl	15e00 <__assert_fail@plt+0x4c84>
   15ce0:	cmp	r0, r5
   15ce4:	bcs	15cfc <__assert_fail@plt+0x4b80>
   15ce8:	bl	11080 <__errno_location@plt>
   15cec:	mov	r3, #12
   15cf0:	str	r3, [r0]
   15cf4:	mov	r0, #0
   15cf8:	pop	{r4, r5, r6, pc}
   15cfc:	mul	r1, r5, r4
   15d00:	mov	r0, r6
   15d04:	pop	{r4, r5, r6, lr}
   15d08:	b	157c8 <__assert_fail@plt+0x464c>
   15d0c:	push	{lr}		; (str lr, [sp, #-4]!)
   15d10:	sub	sp, sp, #268	; 0x10c
   15d14:	add	r1, sp, #4
   15d18:	ldr	r2, [pc, #60]	; 15d5c <__assert_fail@plt+0x4be0>
   15d1c:	bl	15d68 <__assert_fail@plt+0x4bec>
   15d20:	cmp	r0, #0
   15d24:	movne	r0, #0
   15d28:	bne	15d54 <__assert_fail@plt+0x4bd8>
   15d2c:	ldr	r1, [pc, #44]	; 15d60 <__assert_fail@plt+0x4be4>
   15d30:	add	r0, sp, #4
   15d34:	bl	10ee8 <strcmp@plt>
   15d38:	cmp	r0, #0
   15d3c:	beq	15d54 <__assert_fail@plt+0x4bd8>
   15d40:	add	r0, sp, #4
   15d44:	ldr	r1, [pc, #24]	; 15d64 <__assert_fail@plt+0x4be8>
   15d48:	bl	10ee8 <strcmp@plt>
   15d4c:	adds	r0, r0, #0
   15d50:	movne	r0, #1
   15d54:	add	sp, sp, #268	; 0x10c
   15d58:	pop	{pc}		; (ldr pc, [sp], #4)
   15d5c:	andeq	r0, r0, r1, lsl #2
   15d60:	ldrdeq	r7, [r1], -r4
   15d64:	ldrdeq	r7, [r1], -r8
   15d68:	push	{r4, r5, r6, lr}
   15d6c:	mov	r5, r1
   15d70:	mov	r1, #0
   15d74:	mov	r4, r2
   15d78:	bl	11104 <setlocale@plt>
   15d7c:	subs	r6, r0, #0
   15d80:	beq	15ddc <__assert_fail@plt+0x4c60>
   15d84:	bl	11068 <strlen@plt>
   15d88:	cmp	r4, r0
   15d8c:	bhi	15dc4 <__assert_fail@plt+0x4c48>
   15d90:	cmp	r4, #0
   15d94:	bne	15da0 <__assert_fail@plt+0x4c24>
   15d98:	mov	r0, #34	; 0x22
   15d9c:	pop	{r4, r5, r6, pc}
   15da0:	sub	r4, r4, #1
   15da4:	mov	r1, r6
   15da8:	mov	r2, r4
   15dac:	mov	r0, r5
   15db0:	bl	10f30 <memcpy@plt>
   15db4:	mov	r3, #0
   15db8:	strb	r3, [r5, r4]
   15dbc:	mov	r0, #34	; 0x22
   15dc0:	pop	{r4, r5, r6, pc}
   15dc4:	add	r2, r0, #1
   15dc8:	mov	r1, r6
   15dcc:	mov	r0, r5
   15dd0:	bl	10f30 <memcpy@plt>
   15dd4:	mov	r0, #0
   15dd8:	pop	{r4, r5, r6, pc}
   15ddc:	cmp	r4, #0
   15de0:	beq	15df0 <__assert_fail@plt+0x4c74>
   15de4:	strb	r6, [r5]
   15de8:	mov	r0, #22
   15dec:	pop	{r4, r5, r6, pc}
   15df0:	mov	r0, #22
   15df4:	pop	{r4, r5, r6, pc}
   15df8:	mov	r1, #0
   15dfc:	b	11104 <setlocale@plt>
   15e00:	subs	r2, r1, #1
   15e04:	bxeq	lr
   15e08:	bcc	15fe0 <__assert_fail@plt+0x4e64>
   15e0c:	cmp	r0, r1
   15e10:	bls	15fc4 <__assert_fail@plt+0x4e48>
   15e14:	tst	r1, r2
   15e18:	beq	15fd0 <__assert_fail@plt+0x4e54>
   15e1c:	clz	r3, r0
   15e20:	clz	r2, r1
   15e24:	sub	r3, r2, r3
   15e28:	rsbs	r3, r3, #31
   15e2c:	addne	r3, r3, r3, lsl #1
   15e30:	mov	r2, #0
   15e34:	addne	pc, pc, r3, lsl #2
   15e38:	nop			; (mov r0, r0)
   15e3c:	cmp	r0, r1, lsl #31
   15e40:	adc	r2, r2, r2
   15e44:	subcs	r0, r0, r1, lsl #31
   15e48:	cmp	r0, r1, lsl #30
   15e4c:	adc	r2, r2, r2
   15e50:	subcs	r0, r0, r1, lsl #30
   15e54:	cmp	r0, r1, lsl #29
   15e58:	adc	r2, r2, r2
   15e5c:	subcs	r0, r0, r1, lsl #29
   15e60:	cmp	r0, r1, lsl #28
   15e64:	adc	r2, r2, r2
   15e68:	subcs	r0, r0, r1, lsl #28
   15e6c:	cmp	r0, r1, lsl #27
   15e70:	adc	r2, r2, r2
   15e74:	subcs	r0, r0, r1, lsl #27
   15e78:	cmp	r0, r1, lsl #26
   15e7c:	adc	r2, r2, r2
   15e80:	subcs	r0, r0, r1, lsl #26
   15e84:	cmp	r0, r1, lsl #25
   15e88:	adc	r2, r2, r2
   15e8c:	subcs	r0, r0, r1, lsl #25
   15e90:	cmp	r0, r1, lsl #24
   15e94:	adc	r2, r2, r2
   15e98:	subcs	r0, r0, r1, lsl #24
   15e9c:	cmp	r0, r1, lsl #23
   15ea0:	adc	r2, r2, r2
   15ea4:	subcs	r0, r0, r1, lsl #23
   15ea8:	cmp	r0, r1, lsl #22
   15eac:	adc	r2, r2, r2
   15eb0:	subcs	r0, r0, r1, lsl #22
   15eb4:	cmp	r0, r1, lsl #21
   15eb8:	adc	r2, r2, r2
   15ebc:	subcs	r0, r0, r1, lsl #21
   15ec0:	cmp	r0, r1, lsl #20
   15ec4:	adc	r2, r2, r2
   15ec8:	subcs	r0, r0, r1, lsl #20
   15ecc:	cmp	r0, r1, lsl #19
   15ed0:	adc	r2, r2, r2
   15ed4:	subcs	r0, r0, r1, lsl #19
   15ed8:	cmp	r0, r1, lsl #18
   15edc:	adc	r2, r2, r2
   15ee0:	subcs	r0, r0, r1, lsl #18
   15ee4:	cmp	r0, r1, lsl #17
   15ee8:	adc	r2, r2, r2
   15eec:	subcs	r0, r0, r1, lsl #17
   15ef0:	cmp	r0, r1, lsl #16
   15ef4:	adc	r2, r2, r2
   15ef8:	subcs	r0, r0, r1, lsl #16
   15efc:	cmp	r0, r1, lsl #15
   15f00:	adc	r2, r2, r2
   15f04:	subcs	r0, r0, r1, lsl #15
   15f08:	cmp	r0, r1, lsl #14
   15f0c:	adc	r2, r2, r2
   15f10:	subcs	r0, r0, r1, lsl #14
   15f14:	cmp	r0, r1, lsl #13
   15f18:	adc	r2, r2, r2
   15f1c:	subcs	r0, r0, r1, lsl #13
   15f20:	cmp	r0, r1, lsl #12
   15f24:	adc	r2, r2, r2
   15f28:	subcs	r0, r0, r1, lsl #12
   15f2c:	cmp	r0, r1, lsl #11
   15f30:	adc	r2, r2, r2
   15f34:	subcs	r0, r0, r1, lsl #11
   15f38:	cmp	r0, r1, lsl #10
   15f3c:	adc	r2, r2, r2
   15f40:	subcs	r0, r0, r1, lsl #10
   15f44:	cmp	r0, r1, lsl #9
   15f48:	adc	r2, r2, r2
   15f4c:	subcs	r0, r0, r1, lsl #9
   15f50:	cmp	r0, r1, lsl #8
   15f54:	adc	r2, r2, r2
   15f58:	subcs	r0, r0, r1, lsl #8
   15f5c:	cmp	r0, r1, lsl #7
   15f60:	adc	r2, r2, r2
   15f64:	subcs	r0, r0, r1, lsl #7
   15f68:	cmp	r0, r1, lsl #6
   15f6c:	adc	r2, r2, r2
   15f70:	subcs	r0, r0, r1, lsl #6
   15f74:	cmp	r0, r1, lsl #5
   15f78:	adc	r2, r2, r2
   15f7c:	subcs	r0, r0, r1, lsl #5
   15f80:	cmp	r0, r1, lsl #4
   15f84:	adc	r2, r2, r2
   15f88:	subcs	r0, r0, r1, lsl #4
   15f8c:	cmp	r0, r1, lsl #3
   15f90:	adc	r2, r2, r2
   15f94:	subcs	r0, r0, r1, lsl #3
   15f98:	cmp	r0, r1, lsl #2
   15f9c:	adc	r2, r2, r2
   15fa0:	subcs	r0, r0, r1, lsl #2
   15fa4:	cmp	r0, r1, lsl #1
   15fa8:	adc	r2, r2, r2
   15fac:	subcs	r0, r0, r1, lsl #1
   15fb0:	cmp	r0, r1
   15fb4:	adc	r2, r2, r2
   15fb8:	subcs	r0, r0, r1
   15fbc:	mov	r0, r2
   15fc0:	bx	lr
   15fc4:	moveq	r0, #1
   15fc8:	movne	r0, #0
   15fcc:	bx	lr
   15fd0:	clz	r2, r1
   15fd4:	rsb	r2, r2, #31
   15fd8:	lsr	r0, r0, r2
   15fdc:	bx	lr
   15fe0:	cmp	r0, #0
   15fe4:	mvnne	r0, #0
   15fe8:	b	16288 <__assert_fail@plt+0x510c>
   15fec:	cmp	r1, #0
   15ff0:	beq	15fe0 <__assert_fail@plt+0x4e64>
   15ff4:	push	{r0, r1, lr}
   15ff8:	bl	15e00 <__assert_fail@plt+0x4c84>
   15ffc:	pop	{r1, r2, lr}
   16000:	mul	r3, r2, r0
   16004:	sub	r1, r1, r3
   16008:	bx	lr
   1600c:	cmp	r1, #0
   16010:	beq	1621c <__assert_fail@plt+0x50a0>
   16014:	eor	ip, r0, r1
   16018:	rsbmi	r1, r1, #0
   1601c:	subs	r2, r1, #1
   16020:	beq	161e8 <__assert_fail@plt+0x506c>
   16024:	movs	r3, r0
   16028:	rsbmi	r3, r0, #0
   1602c:	cmp	r3, r1
   16030:	bls	161f4 <__assert_fail@plt+0x5078>
   16034:	tst	r1, r2
   16038:	beq	16204 <__assert_fail@plt+0x5088>
   1603c:	clz	r2, r3
   16040:	clz	r0, r1
   16044:	sub	r2, r0, r2
   16048:	rsbs	r2, r2, #31
   1604c:	addne	r2, r2, r2, lsl #1
   16050:	mov	r0, #0
   16054:	addne	pc, pc, r2, lsl #2
   16058:	nop			; (mov r0, r0)
   1605c:	cmp	r3, r1, lsl #31
   16060:	adc	r0, r0, r0
   16064:	subcs	r3, r3, r1, lsl #31
   16068:	cmp	r3, r1, lsl #30
   1606c:	adc	r0, r0, r0
   16070:	subcs	r3, r3, r1, lsl #30
   16074:	cmp	r3, r1, lsl #29
   16078:	adc	r0, r0, r0
   1607c:	subcs	r3, r3, r1, lsl #29
   16080:	cmp	r3, r1, lsl #28
   16084:	adc	r0, r0, r0
   16088:	subcs	r3, r3, r1, lsl #28
   1608c:	cmp	r3, r1, lsl #27
   16090:	adc	r0, r0, r0
   16094:	subcs	r3, r3, r1, lsl #27
   16098:	cmp	r3, r1, lsl #26
   1609c:	adc	r0, r0, r0
   160a0:	subcs	r3, r3, r1, lsl #26
   160a4:	cmp	r3, r1, lsl #25
   160a8:	adc	r0, r0, r0
   160ac:	subcs	r3, r3, r1, lsl #25
   160b0:	cmp	r3, r1, lsl #24
   160b4:	adc	r0, r0, r0
   160b8:	subcs	r3, r3, r1, lsl #24
   160bc:	cmp	r3, r1, lsl #23
   160c0:	adc	r0, r0, r0
   160c4:	subcs	r3, r3, r1, lsl #23
   160c8:	cmp	r3, r1, lsl #22
   160cc:	adc	r0, r0, r0
   160d0:	subcs	r3, r3, r1, lsl #22
   160d4:	cmp	r3, r1, lsl #21
   160d8:	adc	r0, r0, r0
   160dc:	subcs	r3, r3, r1, lsl #21
   160e0:	cmp	r3, r1, lsl #20
   160e4:	adc	r0, r0, r0
   160e8:	subcs	r3, r3, r1, lsl #20
   160ec:	cmp	r3, r1, lsl #19
   160f0:	adc	r0, r0, r0
   160f4:	subcs	r3, r3, r1, lsl #19
   160f8:	cmp	r3, r1, lsl #18
   160fc:	adc	r0, r0, r0
   16100:	subcs	r3, r3, r1, lsl #18
   16104:	cmp	r3, r1, lsl #17
   16108:	adc	r0, r0, r0
   1610c:	subcs	r3, r3, r1, lsl #17
   16110:	cmp	r3, r1, lsl #16
   16114:	adc	r0, r0, r0
   16118:	subcs	r3, r3, r1, lsl #16
   1611c:	cmp	r3, r1, lsl #15
   16120:	adc	r0, r0, r0
   16124:	subcs	r3, r3, r1, lsl #15
   16128:	cmp	r3, r1, lsl #14
   1612c:	adc	r0, r0, r0
   16130:	subcs	r3, r3, r1, lsl #14
   16134:	cmp	r3, r1, lsl #13
   16138:	adc	r0, r0, r0
   1613c:	subcs	r3, r3, r1, lsl #13
   16140:	cmp	r3, r1, lsl #12
   16144:	adc	r0, r0, r0
   16148:	subcs	r3, r3, r1, lsl #12
   1614c:	cmp	r3, r1, lsl #11
   16150:	adc	r0, r0, r0
   16154:	subcs	r3, r3, r1, lsl #11
   16158:	cmp	r3, r1, lsl #10
   1615c:	adc	r0, r0, r0
   16160:	subcs	r3, r3, r1, lsl #10
   16164:	cmp	r3, r1, lsl #9
   16168:	adc	r0, r0, r0
   1616c:	subcs	r3, r3, r1, lsl #9
   16170:	cmp	r3, r1, lsl #8
   16174:	adc	r0, r0, r0
   16178:	subcs	r3, r3, r1, lsl #8
   1617c:	cmp	r3, r1, lsl #7
   16180:	adc	r0, r0, r0
   16184:	subcs	r3, r3, r1, lsl #7
   16188:	cmp	r3, r1, lsl #6
   1618c:	adc	r0, r0, r0
   16190:	subcs	r3, r3, r1, lsl #6
   16194:	cmp	r3, r1, lsl #5
   16198:	adc	r0, r0, r0
   1619c:	subcs	r3, r3, r1, lsl #5
   161a0:	cmp	r3, r1, lsl #4
   161a4:	adc	r0, r0, r0
   161a8:	subcs	r3, r3, r1, lsl #4
   161ac:	cmp	r3, r1, lsl #3
   161b0:	adc	r0, r0, r0
   161b4:	subcs	r3, r3, r1, lsl #3
   161b8:	cmp	r3, r1, lsl #2
   161bc:	adc	r0, r0, r0
   161c0:	subcs	r3, r3, r1, lsl #2
   161c4:	cmp	r3, r1, lsl #1
   161c8:	adc	r0, r0, r0
   161cc:	subcs	r3, r3, r1, lsl #1
   161d0:	cmp	r3, r1
   161d4:	adc	r0, r0, r0
   161d8:	subcs	r3, r3, r1
   161dc:	cmp	ip, #0
   161e0:	rsbmi	r0, r0, #0
   161e4:	bx	lr
   161e8:	teq	ip, r0
   161ec:	rsbmi	r0, r0, #0
   161f0:	bx	lr
   161f4:	movcc	r0, #0
   161f8:	asreq	r0, ip, #31
   161fc:	orreq	r0, r0, #1
   16200:	bx	lr
   16204:	clz	r2, r1
   16208:	rsb	r2, r2, #31
   1620c:	cmp	ip, #0
   16210:	lsr	r0, r3, r2
   16214:	rsbmi	r0, r0, #0
   16218:	bx	lr
   1621c:	cmp	r0, #0
   16220:	mvngt	r0, #-2147483648	; 0x80000000
   16224:	movlt	r0, #-2147483648	; 0x80000000
   16228:	b	16288 <__assert_fail@plt+0x510c>
   1622c:	cmp	r1, #0
   16230:	beq	1621c <__assert_fail@plt+0x50a0>
   16234:	push	{r0, r1, lr}
   16238:	bl	16014 <__assert_fail@plt+0x4e98>
   1623c:	pop	{r1, r2, lr}
   16240:	mul	r3, r2, r0
   16244:	sub	r1, r1, r3
   16248:	bx	lr
   1624c:	cmp	r3, #0
   16250:	cmpeq	r2, #0
   16254:	bne	1626c <__assert_fail@plt+0x50f0>
   16258:	cmp	r1, #0
   1625c:	cmpeq	r0, #0
   16260:	mvnne	r1, #0
   16264:	mvnne	r0, #0
   16268:	b	16288 <__assert_fail@plt+0x510c>
   1626c:	sub	sp, sp, #8
   16270:	push	{sp, lr}
   16274:	bl	16298 <__assert_fail@plt+0x511c>
   16278:	ldr	lr, [sp, #4]
   1627c:	add	sp, sp, #8
   16280:	pop	{r2, r3}
   16284:	bx	lr
   16288:	push	{r1, lr}
   1628c:	mov	r0, #8
   16290:	bl	10ec4 <raise@plt>
   16294:	pop	{r1, pc}
   16298:	cmp	r1, r3
   1629c:	push	{r4, r5, r6, r7, r8, r9, lr}
   162a0:	cmpeq	r0, r2
   162a4:	mov	r4, r0
   162a8:	mov	r5, r1
   162ac:	ldr	r9, [sp, #28]
   162b0:	movcc	r0, #0
   162b4:	movcc	r1, #0
   162b8:	bcc	163b0 <__assert_fail@plt+0x5234>
   162bc:	cmp	r3, #0
   162c0:	clzeq	ip, r2
   162c4:	clzne	ip, r3
   162c8:	addeq	ip, ip, #32
   162cc:	cmp	r5, #0
   162d0:	clzeq	r1, r4
   162d4:	addeq	r1, r1, #32
   162d8:	clzne	r1, r5
   162dc:	sub	ip, ip, r1
   162e0:	sub	lr, ip, #32
   162e4:	lsl	r7, r3, ip
   162e8:	rsb	r8, ip, #32
   162ec:	orr	r7, r7, r2, lsl lr
   162f0:	orr	r7, r7, r2, lsr r8
   162f4:	lsl	r6, r2, ip
   162f8:	cmp	r5, r7
   162fc:	cmpeq	r4, r6
   16300:	movcc	r0, #0
   16304:	movcc	r1, #0
   16308:	bcc	16324 <__assert_fail@plt+0x51a8>
   1630c:	mov	r3, #1
   16310:	subs	r4, r4, r6
   16314:	lsl	r1, r3, lr
   16318:	lsl	r0, r3, ip
   1631c:	orr	r1, r1, r3, lsr r8
   16320:	sbc	r5, r5, r7
   16324:	cmp	ip, #0
   16328:	beq	163b0 <__assert_fail@plt+0x5234>
   1632c:	lsrs	r3, r7, #1
   16330:	rrx	r2, r6
   16334:	mov	r6, ip
   16338:	b	1635c <__assert_fail@plt+0x51e0>
   1633c:	subs	r4, r4, r2
   16340:	sbc	r5, r5, r3
   16344:	adds	r4, r4, r4
   16348:	adc	r5, r5, r5
   1634c:	adds	r4, r4, #1
   16350:	adc	r5, r5, #0
   16354:	subs	r6, r6, #1
   16358:	beq	16378 <__assert_fail@plt+0x51fc>
   1635c:	cmp	r5, r3
   16360:	cmpeq	r4, r2
   16364:	bcs	1633c <__assert_fail@plt+0x51c0>
   16368:	adds	r4, r4, r4
   1636c:	adc	r5, r5, r5
   16370:	subs	r6, r6, #1
   16374:	bne	1635c <__assert_fail@plt+0x51e0>
   16378:	lsr	r6, r4, ip
   1637c:	lsr	r7, r5, ip
   16380:	orr	r6, r6, r5, lsl r8
   16384:	adds	r2, r0, r4
   16388:	orr	r6, r6, r5, lsr lr
   1638c:	adc	r3, r1, r5
   16390:	lsl	r1, r7, ip
   16394:	orr	r1, r1, r6, lsl lr
   16398:	lsl	r0, r6, ip
   1639c:	orr	r1, r1, r6, lsr r8
   163a0:	subs	r0, r2, r0
   163a4:	mov	r4, r6
   163a8:	mov	r5, r7
   163ac:	sbc	r1, r3, r1
   163b0:	cmp	r9, #0
   163b4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   163b8:	strd	r4, [r9]
   163bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   163c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   163c4:	mov	r7, r0
   163c8:	ldr	r6, [pc, #72]	; 16418 <__assert_fail@plt+0x529c>
   163cc:	ldr	r5, [pc, #72]	; 1641c <__assert_fail@plt+0x52a0>
   163d0:	add	r6, pc, r6
   163d4:	add	r5, pc, r5
   163d8:	sub	r6, r6, r5
   163dc:	mov	r8, r1
   163e0:	mov	r9, r2
   163e4:	bl	10e80 <calloc@plt-0x20>
   163e8:	asrs	r6, r6, #2
   163ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   163f0:	mov	r4, #0
   163f4:	add	r4, r4, #1
   163f8:	ldr	r3, [r5], #4
   163fc:	mov	r2, r9
   16400:	mov	r1, r8
   16404:	mov	r0, r7
   16408:	blx	r3
   1640c:	cmp	r6, r4
   16410:	bne	163f4 <__assert_fail@plt+0x5278>
   16414:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16418:	andeq	r1, r1, r0, lsr fp
   1641c:	andeq	r1, r1, r8, lsr #22
   16420:	bx	lr
   16424:	ldr	r3, [pc, #12]	; 16438 <__assert_fail@plt+0x52bc>
   16428:	mov	r1, #0
   1642c:	add	r3, pc, r3
   16430:	ldr	r2, [r3]
   16434:	b	1108c <__cxa_atexit@plt>
   16438:	ldrdeq	r1, [r1], -r8

Disassembly of section .fini:

0001643c <.fini>:
   1643c:	push	{r3, lr}
   16440:	pop	{r3, pc}
