
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011380 <.init>:
   11380:	push	{r3, lr}
   11384:	bl	11790 <__assert_fail@plt+0x48>
   11388:	pop	{r3, pc}

Disassembly of section .plt:

0001138c <fdopen@plt-0x14>:
   1138c:	push	{lr}		; (str lr, [sp, #-4]!)
   11390:	ldr	lr, [pc, #4]	; 1139c <fdopen@plt-0x4>
   11394:	add	lr, pc, lr
   11398:	ldr	pc, [lr, #8]!
   1139c:	andeq	r9, r1, r4, ror #24

000113a0 <fdopen@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #102400	; 0x19000
   113a8:	ldr	pc, [ip, #3172]!	; 0xc64

000113ac <calloc@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #102400	; 0x19000
   113b4:	ldr	pc, [ip, #3164]!	; 0xc5c

000113b8 <fputs_unlocked@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #102400	; 0x19000
   113c0:	ldr	pc, [ip, #3156]!	; 0xc54

000113c4 <raise@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #102400	; 0x19000
   113cc:	ldr	pc, [ip, #3148]!	; 0xc4c

000113d0 <strcmp@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #102400	; 0x19000
   113d8:	ldr	pc, [ip, #3140]!	; 0xc44

000113dc <strtol@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #102400	; 0x19000
   113e4:	ldr	pc, [ip, #3132]!	; 0xc3c

000113e8 <read@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #102400	; 0x19000
   113f0:	ldr	pc, [ip, #3124]!	; 0xc34

000113f4 <fflush@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #102400	; 0x19000
   113fc:	ldr	pc, [ip, #3116]!	; 0xc2c

00011400 <sigprocmask@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #102400	; 0x19000
   11408:	ldr	pc, [ip, #3108]!	; 0xc24

0001140c <memmove@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #102400	; 0x19000
   11414:	ldr	pc, [ip, #3100]!	; 0xc1c

00011418 <free@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #102400	; 0x19000
   11420:	ldr	pc, [ip, #3092]!	; 0xc14

00011424 <_exit@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #102400	; 0x19000
   1142c:	ldr	pc, [ip, #3084]!	; 0xc0c

00011430 <memcpy@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #102400	; 0x19000
   11438:	ldr	pc, [ip, #3076]!	; 0xc04

0001143c <mbsinit@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #102400	; 0x19000
   11444:	ldr	pc, [ip, #3068]!	; 0xbfc

00011448 <ftruncate64@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #102400	; 0x19000
   11450:	ldr	pc, [ip, #3060]!	; 0xbf4

00011454 <fwrite_unlocked@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #102400	; 0x19000
   1145c:	ldr	pc, [ip, #3052]!	; 0xbec

00011460 <memcmp@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #102400	; 0x19000
   11468:	ldr	pc, [ip, #3044]!	; 0xbe4

0001146c <dcgettext@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #102400	; 0x19000
   11474:	ldr	pc, [ip, #3036]!	; 0xbdc

00011478 <dup2@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #102400	; 0x19000
   11480:	ldr	pc, [ip, #3028]!	; 0xbd4

00011484 <realloc@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #102400	; 0x19000
   1148c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011490 <textdomain@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #102400	; 0x19000
   11498:	ldr	pc, [ip, #3012]!	; 0xbc4

0001149c <rawmemchr@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #102400	; 0x19000
   114a4:	ldr	pc, [ip, #3004]!	; 0xbbc

000114a8 <iswprint@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #102400	; 0x19000
   114b0:	ldr	pc, [ip, #2996]!	; 0xbb4

000114b4 <__fxstat64@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #102400	; 0x19000
   114bc:	ldr	pc, [ip, #2988]!	; 0xbac

000114c0 <sigaction@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #102400	; 0x19000
   114c8:	ldr	pc, [ip, #2980]!	; 0xba4

000114cc <fwrite@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #102400	; 0x19000
   114d4:	ldr	pc, [ip, #2972]!	; 0xb9c

000114d8 <lseek64@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #102400	; 0x19000
   114e0:	ldr	pc, [ip, #2964]!	; 0xb94

000114e4 <waitpid@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #102400	; 0x19000
   114ec:	ldr	pc, [ip, #2956]!	; 0xb8c

000114f0 <__ctype_get_mb_cur_max@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #102400	; 0x19000
   114f8:	ldr	pc, [ip, #2948]!	; 0xb84

000114fc <strcpy@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #102400	; 0x19000
   11504:	ldr	pc, [ip, #2940]!	; 0xb7c

00011508 <__fpending@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #102400	; 0x19000
   11510:	ldr	pc, [ip, #2932]!	; 0xb74

00011514 <ferror_unlocked@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #102400	; 0x19000
   1151c:	ldr	pc, [ip, #2924]!	; 0xb6c

00011520 <mbrtowc@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #102400	; 0x19000
   11528:	ldr	pc, [ip, #2916]!	; 0xb64

0001152c <error@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #102400	; 0x19000
   11534:	ldr	pc, [ip, #2908]!	; 0xb5c

00011538 <open64@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #102400	; 0x19000
   11540:	ldr	pc, [ip, #2900]!	; 0xb54

00011544 <getenv@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #102400	; 0x19000
   1154c:	ldr	pc, [ip, #2892]!	; 0xb4c

00011550 <malloc@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #102400	; 0x19000
   11558:	ldr	pc, [ip, #2884]!	; 0xb44

0001155c <sigaddset@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #102400	; 0x19000
   11564:	ldr	pc, [ip, #2876]!	; 0xb3c

00011568 <__libc_start_main@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #102400	; 0x19000
   11570:	ldr	pc, [ip, #2868]!	; 0xb34

00011574 <__freading@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #102400	; 0x19000
   1157c:	ldr	pc, [ip, #2860]!	; 0xb2c

00011580 <__gmon_start__@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #102400	; 0x19000
   11588:	ldr	pc, [ip, #2852]!	; 0xb24

0001158c <getopt_long@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #102400	; 0x19000
   11594:	ldr	pc, [ip, #2844]!	; 0xb1c

00011598 <__ctype_b_loc@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #102400	; 0x19000
   115a0:	ldr	pc, [ip, #2836]!	; 0xb14

000115a4 <exit@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #102400	; 0x19000
   115ac:	ldr	pc, [ip, #2828]!	; 0xb0c

000115b0 <strlen@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #102400	; 0x19000
   115b8:	ldr	pc, [ip, #2820]!	; 0xb04

000115bc <__libc_current_sigrtmax@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #102400	; 0x19000
   115c4:	ldr	pc, [ip, #2812]!	; 0xafc

000115c8 <strchr@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #102400	; 0x19000
   115d0:	ldr	pc, [ip, #2804]!	; 0xaf4

000115d4 <setenv@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #102400	; 0x19000
   115dc:	ldr	pc, [ip, #2796]!	; 0xaec

000115e0 <memrchr@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #102400	; 0x19000
   115e8:	ldr	pc, [ip, #2788]!	; 0xae4

000115ec <getpagesize@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #102400	; 0x19000
   115f4:	ldr	pc, [ip, #2780]!	; 0xadc

000115f8 <__errno_location@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #102400	; 0x19000
   11600:	ldr	pc, [ip, #2772]!	; 0xad4

00011604 <__sprintf_chk@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #102400	; 0x19000
   1160c:	ldr	pc, [ip, #2764]!	; 0xacc

00011610 <__cxa_atexit@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #102400	; 0x19000
   11618:	ldr	pc, [ip, #2756]!	; 0xac4

0001161c <memset@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #102400	; 0x19000
   11624:	ldr	pc, [ip, #2748]!	; 0xabc

00011628 <__printf_chk@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #102400	; 0x19000
   11630:	ldr	pc, [ip, #2740]!	; 0xab4

00011634 <write@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #102400	; 0x19000
   1163c:	ldr	pc, [ip, #2732]!	; 0xaac

00011640 <fileno@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #102400	; 0x19000
   11648:	ldr	pc, [ip, #2724]!	; 0xaa4

0001164c <strtoumax@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #102400	; 0x19000
   11654:	ldr	pc, [ip, #2716]!	; 0xa9c

00011658 <__fprintf_chk@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #102400	; 0x19000
   11660:	ldr	pc, [ip, #2708]!	; 0xa94

00011664 <memchr@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #102400	; 0x19000
   1166c:	ldr	pc, [ip, #2700]!	; 0xa8c

00011670 <fclose@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #102400	; 0x19000
   11678:	ldr	pc, [ip, #2692]!	; 0xa84

0001167c <pipe@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #102400	; 0x19000
   11684:	ldr	pc, [ip, #2684]!	; 0xa7c

00011688 <fseeko64@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #102400	; 0x19000
   11690:	ldr	pc, [ip, #2676]!	; 0xa74

00011694 <fcntl64@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #102400	; 0x19000
   1169c:	ldr	pc, [ip, #2668]!	; 0xa6c

000116a0 <setlocale@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #102400	; 0x19000
   116a8:	ldr	pc, [ip, #2660]!	; 0xa64

000116ac <sigemptyset@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #102400	; 0x19000
   116b4:	ldr	pc, [ip, #2652]!	; 0xa5c

000116b8 <fork@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #102400	; 0x19000
   116c0:	ldr	pc, [ip, #2644]!	; 0xa54

000116c4 <execl@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #102400	; 0x19000
   116cc:	ldr	pc, [ip, #2636]!	; 0xa4c

000116d0 <strrchr@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #102400	; 0x19000
   116d8:	ldr	pc, [ip, #2628]!	; 0xa44

000116dc <nl_langinfo@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #102400	; 0x19000
   116e4:	ldr	pc, [ip, #2620]!	; 0xa3c

000116e8 <clearerr_unlocked@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #102400	; 0x19000
   116f0:	ldr	pc, [ip, #2612]!	; 0xa34

000116f4 <bindtextdomain@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #102400	; 0x19000
   116fc:	ldr	pc, [ip, #2604]!	; 0xa2c

00011700 <aligned_alloc@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #102400	; 0x19000
   11708:	ldr	pc, [ip, #2596]!	; 0xa24

0001170c <__libc_current_sigrtmin@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #102400	; 0x19000
   11714:	ldr	pc, [ip, #2588]!	; 0xa1c

00011718 <strncmp@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #102400	; 0x19000
   11720:	ldr	pc, [ip, #2580]!	; 0xa14

00011724 <abort@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #102400	; 0x19000
   1172c:	ldr	pc, [ip, #2572]!	; 0xa0c

00011730 <close@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #102400	; 0x19000
   11738:	ldr	pc, [ip, #2564]!	; 0xa04

0001173c <strspn@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #102400	; 0x19000
   11744:	ldr	pc, [ip, #2556]!	; 0x9fc

00011748 <__assert_fail@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #102400	; 0x19000
   11750:	ldr	pc, [ip, #2548]!	; 0x9f4

Disassembly of section .text:

00011754 <.text>:
   11754:	mov	fp, #0
   11758:	mov	lr, #0
   1175c:	pop	{r1}		; (ldr r1, [sp], #4)
   11760:	mov	r2, sp
   11764:	push	{r2}		; (str r2, [sp, #-4]!)
   11768:	push	{r0}		; (str r0, [sp, #-4]!)
   1176c:	ldr	ip, [pc, #16]	; 11784 <__assert_fail@plt+0x3c>
   11770:	push	{ip}		; (str ip, [sp, #-4]!)
   11774:	ldr	r0, [pc, #12]	; 11788 <__assert_fail@plt+0x40>
   11778:	ldr	r3, [pc, #12]	; 1178c <__assert_fail@plt+0x44>
   1177c:	bl	11568 <__libc_start_main@plt>
   11780:	bl	11724 <abort@plt>
   11784:	andeq	r9, r1, ip, asr #2
   11788:			; <UNDEFINED> instruction: 0x00011bb4
   1178c:	andeq	r9, r1, ip, ror #1
   11790:	ldr	r3, [pc, #20]	; 117ac <__assert_fail@plt+0x64>
   11794:	ldr	r2, [pc, #20]	; 117b0 <__assert_fail@plt+0x68>
   11798:	add	r3, pc, r3
   1179c:	ldr	r2, [r3, r2]
   117a0:	cmp	r2, #0
   117a4:	bxeq	lr
   117a8:	b	11580 <__gmon_start__@plt>
   117ac:	andeq	r9, r1, r0, ror #16
   117b0:	andeq	r0, r0, r8, asr #2
   117b4:	ldr	r0, [pc, #24]	; 117d4 <__assert_fail@plt+0x8c>
   117b8:	ldr	r3, [pc, #24]	; 117d8 <__assert_fail@plt+0x90>
   117bc:	cmp	r3, r0
   117c0:	bxeq	lr
   117c4:	ldr	r3, [pc, #16]	; 117dc <__assert_fail@plt+0x94>
   117c8:	cmp	r3, #0
   117cc:	bxeq	lr
   117d0:	bx	r3
   117d4:	andeq	fp, r2, r4, asr r3
   117d8:	andeq	fp, r2, r4, asr r3
   117dc:	andeq	r0, r0, r0
   117e0:	ldr	r0, [pc, #36]	; 1180c <__assert_fail@plt+0xc4>
   117e4:	ldr	r1, [pc, #36]	; 11810 <__assert_fail@plt+0xc8>
   117e8:	sub	r1, r1, r0
   117ec:	asr	r1, r1, #2
   117f0:	add	r1, r1, r1, lsr #31
   117f4:	asrs	r1, r1, #1
   117f8:	bxeq	lr
   117fc:	ldr	r3, [pc, #16]	; 11814 <__assert_fail@plt+0xcc>
   11800:	cmp	r3, #0
   11804:	bxeq	lr
   11808:	bx	r3
   1180c:	andeq	fp, r2, r4, asr r3
   11810:	andeq	fp, r2, r4, asr r3
   11814:	andeq	r0, r0, r0
   11818:	push	{r4, lr}
   1181c:	ldr	r4, [pc, #24]	; 1183c <__assert_fail@plt+0xf4>
   11820:	ldrb	r3, [r4]
   11824:	cmp	r3, #0
   11828:	popne	{r4, pc}
   1182c:	bl	117b4 <__assert_fail@plt+0x6c>
   11830:	mov	r3, #1
   11834:	strb	r3, [r4]
   11838:	pop	{r4, pc}
   1183c:	andeq	fp, r2, r4, ror r3
   11840:	b	117e0 <__assert_fail@plt+0x98>
   11844:	push	{fp, lr}
   11848:	mov	fp, sp
   1184c:	mov	r4, r0
   11850:	cmp	r0, #0
   11854:	bne	1195c <__assert_fail@plt+0x214>
   11858:	movw	r1, #37291	; 0x91ab
   1185c:	movt	r1, #1
   11860:	mov	r0, #0
   11864:	mov	r2, #5
   11868:	bl	1146c <dcgettext@plt>
   1186c:	mov	r1, r0
   11870:	movw	r0, #46396	; 0xb53c
   11874:	movt	r0, #2
   11878:	ldr	r2, [r0]
   1187c:	mov	r0, #1
   11880:	bl	11628 <__printf_chk@plt>
   11884:	movw	r1, #37330	; 0x91d2
   11888:	movt	r1, #1
   1188c:	mov	r0, #0
   11890:	mov	r2, #5
   11894:	bl	1146c <dcgettext@plt>
   11898:	movw	r6, #45932	; 0xb36c
   1189c:	movt	r6, #2
   118a0:	ldr	r1, [r6]
   118a4:	bl	113b8 <fputs_unlocked@plt>
   118a8:	bl	119a0 <__assert_fail@plt+0x258>
   118ac:	bl	119d0 <__assert_fail@plt+0x288>
   118b0:	ldr	r5, [r6]
   118b4:	movw	r1, #37436	; 0x923c
   118b8:	movt	r1, #1
   118bc:	mov	r0, #0
   118c0:	mov	r2, #5
   118c4:	bl	1146c <dcgettext@plt>
   118c8:	mov	r2, r0
   118cc:	mov	r0, r5
   118d0:	mov	r1, #1
   118d4:	mov	r3, #2
   118d8:	bl	11658 <__fprintf_chk@plt>
   118dc:	movw	r1, #38526	; 0x967e
   118e0:	movt	r1, #1
   118e4:	mov	r0, #0
   118e8:	mov	r2, #5
   118ec:	bl	1146c <dcgettext@plt>
   118f0:	ldr	r1, [r6]
   118f4:	bl	113b8 <fputs_unlocked@plt>
   118f8:	movw	r1, #38639	; 0x96ef
   118fc:	movt	r1, #1
   11900:	mov	r0, #0
   11904:	mov	r2, #5
   11908:	bl	1146c <dcgettext@plt>
   1190c:	ldr	r1, [r6]
   11910:	bl	113b8 <fputs_unlocked@plt>
   11914:	movw	r1, #38684	; 0x971c
   11918:	movt	r1, #1
   1191c:	mov	r0, #0
   11920:	mov	r2, #5
   11924:	bl	1146c <dcgettext@plt>
   11928:	ldr	r1, [r6]
   1192c:	bl	113b8 <fputs_unlocked@plt>
   11930:	bl	11a00 <__assert_fail@plt+0x2b8>
   11934:	movw	r1, #38738	; 0x9752
   11938:	movt	r1, #1
   1193c:	mov	r0, #0
   11940:	mov	r2, #5
   11944:	bl	1146c <dcgettext@plt>
   11948:	ldr	r1, [r6]
   1194c:	bl	113b8 <fputs_unlocked@plt>
   11950:	bl	11a30 <__assert_fail@plt+0x2e8>
   11954:	mov	r0, r4
   11958:	bl	115a4 <exit@plt>
   1195c:	movw	r0, #45928	; 0xb368
   11960:	movt	r0, #2
   11964:	ldr	r5, [r0]
   11968:	movw	r1, #37252	; 0x9184
   1196c:	movt	r1, #1
   11970:	mov	r0, #0
   11974:	mov	r2, #5
   11978:	bl	1146c <dcgettext@plt>
   1197c:	mov	r2, r0
   11980:	movw	r0, #46396	; 0xb53c
   11984:	movt	r0, #2
   11988:	ldr	r3, [r0]
   1198c:	mov	r0, r5
   11990:	mov	r1, #1
   11994:	bl	11658 <__fprintf_chk@plt>
   11998:	mov	r0, r4
   1199c:	bl	115a4 <exit@plt>
   119a0:	push	{fp, lr}
   119a4:	mov	fp, sp
   119a8:	movw	r1, #39847	; 0x9ba7
   119ac:	movt	r1, #1
   119b0:	mov	r0, #0
   119b4:	mov	r2, #5
   119b8:	bl	1146c <dcgettext@plt>
   119bc:	movw	r1, #45932	; 0xb36c
   119c0:	movt	r1, #2
   119c4:	ldr	r1, [r1]
   119c8:	pop	{fp, lr}
   119cc:	b	113b8 <fputs_unlocked@plt>
   119d0:	push	{fp, lr}
   119d4:	mov	fp, sp
   119d8:	movw	r1, #39903	; 0x9bdf
   119dc:	movt	r1, #1
   119e0:	mov	r0, #0
   119e4:	mov	r2, #5
   119e8:	bl	1146c <dcgettext@plt>
   119ec:	movw	r1, #45932	; 0xb36c
   119f0:	movt	r1, #2
   119f4:	ldr	r1, [r1]
   119f8:	pop	{fp, lr}
   119fc:	b	113b8 <fputs_unlocked@plt>
   11a00:	push	{fp, lr}
   11a04:	mov	fp, sp
   11a08:	movw	r1, #39978	; 0x9c2a
   11a0c:	movt	r1, #1
   11a10:	mov	r0, #0
   11a14:	mov	r2, #5
   11a18:	bl	1146c <dcgettext@plt>
   11a1c:	movw	r1, #45932	; 0xb36c
   11a20:	movt	r1, #2
   11a24:	ldr	r1, [r1]
   11a28:	pop	{fp, lr}
   11a2c:	b	113b8 <fputs_unlocked@plt>
   11a30:	push	{r4, r5, fp, lr}
   11a34:	add	fp, sp, #8
   11a38:	sub	sp, sp, #56	; 0x38
   11a3c:	movw	r0, #41808	; 0xa350
   11a40:	movt	r0, #1
   11a44:	add	r1, r0, #32
   11a48:	mov	r5, sp
   11a4c:	mov	r2, #48	; 0x30
   11a50:	vld1.64	{d16-d17}, [r1]
   11a54:	add	r1, r5, #32
   11a58:	add	r3, r0, #16
   11a5c:	vld1.64	{d18-d19}, [r0], r2
   11a60:	vld1.64	{d20-d21}, [r3]
   11a64:	vldr	d22, [r0]
   11a68:	vst1.64	{d16-d17}, [r1]
   11a6c:	add	r0, r5, #16
   11a70:	vst1.64	{d20-d21}, [r0]
   11a74:	mov	r0, r5
   11a78:	vst1.64	{d18-d19}, [r0], r2
   11a7c:	vstr	d22, [r0]
   11a80:	ldr	r1, [sp]
   11a84:	cmp	r1, #0
   11a88:	beq	11ab0 <__assert_fail@plt+0x368>
   11a8c:	mov	r5, sp
   11a90:	movw	r4, #39078	; 0x98a6
   11a94:	movt	r4, #1
   11a98:	mov	r0, r4
   11a9c:	bl	113d0 <strcmp@plt>
   11aa0:	cmp	r0, #0
   11aa4:	ldrne	r1, [r5, #8]!
   11aa8:	cmpne	r1, #0
   11aac:	bne	11a98 <__assert_fail@plt+0x350>
   11ab0:	ldr	r4, [r5, #4]
   11ab4:	movw	r1, #40285	; 0x9d5d
   11ab8:	movt	r1, #1
   11abc:	mov	r0, #0
   11ac0:	mov	r2, #5
   11ac4:	bl	1146c <dcgettext@plt>
   11ac8:	mov	r1, r0
   11acc:	movw	r2, #39595	; 0x9aab
   11ad0:	movt	r2, #1
   11ad4:	movw	r3, #40308	; 0x9d74
   11ad8:	movt	r3, #1
   11adc:	mov	r0, #1
   11ae0:	bl	11628 <__printf_chk@plt>
   11ae4:	movw	r5, #39078	; 0x98a6
   11ae8:	movt	r5, #1
   11aec:	cmp	r4, #0
   11af0:	moveq	r4, r5
   11af4:	mov	r0, #5
   11af8:	mov	r1, #0
   11afc:	bl	116a0 <setlocale@plt>
   11b00:	cmp	r0, #0
   11b04:	beq	11b44 <__assert_fail@plt+0x3fc>
   11b08:	movw	r1, #40348	; 0x9d9c
   11b0c:	movt	r1, #1
   11b10:	mov	r2, #3
   11b14:	bl	11718 <strncmp@plt>
   11b18:	cmp	r0, #0
   11b1c:	beq	11b44 <__assert_fail@plt+0x3fc>
   11b20:	movw	r1, #40352	; 0x9da0
   11b24:	movt	r1, #1
   11b28:	mov	r0, #0
   11b2c:	mov	r2, #5
   11b30:	bl	1146c <dcgettext@plt>
   11b34:	movw	r1, #45932	; 0xb36c
   11b38:	movt	r1, #2
   11b3c:	ldr	r1, [r1]
   11b40:	bl	113b8 <fputs_unlocked@plt>
   11b44:	movw	r1, #40423	; 0x9de7
   11b48:	movt	r1, #1
   11b4c:	mov	r0, #0
   11b50:	mov	r2, #5
   11b54:	bl	1146c <dcgettext@plt>
   11b58:	mov	r1, r0
   11b5c:	movw	r2, #40308	; 0x9d74
   11b60:	movt	r2, #1
   11b64:	mov	r0, #1
   11b68:	mov	r3, r5
   11b6c:	bl	11628 <__printf_chk@plt>
   11b70:	movw	r1, #40450	; 0x9e02
   11b74:	movt	r1, #1
   11b78:	mov	r0, #0
   11b7c:	mov	r2, #5
   11b80:	bl	1146c <dcgettext@plt>
   11b84:	mov	r1, r0
   11b88:	movw	r0, #40218	; 0x9d1a
   11b8c:	movt	r0, #1
   11b90:	movw	r3, #38525	; 0x967d
   11b94:	movt	r3, #1
   11b98:	cmp	r4, r5
   11b9c:	moveq	r3, r0
   11ba0:	mov	r0, #1
   11ba4:	mov	r2, r4
   11ba8:	bl	11628 <__printf_chk@plt>
   11bac:	sub	sp, fp, #8
   11bb0:	pop	{r4, r5, fp, pc}
   11bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bb8:	add	fp, sp, #28
   11bbc:	sub	sp, sp, #268	; 0x10c
   11bc0:	mov	r6, r1
   11bc4:	str	r0, [sp, #104]	; 0x68
   11bc8:	bl	115ec <getpagesize@plt>
   11bcc:	str	r0, [sp, #88]	; 0x58
   11bd0:	mov	r0, #0
   11bd4:	str	r0, [fp, #-36]	; 0xffffffdc
   11bd8:	str	r0, [fp, #-40]	; 0xffffffd8
   11bdc:	str	r0, [fp, #-44]	; 0xffffffd4
   11be0:	str	r0, [fp, #-48]	; 0xffffffd0
   11be4:	ldr	r0, [r6]
   11be8:	bl	15790 <__assert_fail@plt+0x4048>
   11bec:	movw	r1, #38525	; 0x967d
   11bf0:	movt	r1, #1
   11bf4:	mov	r0, #6
   11bf8:	bl	116a0 <setlocale@plt>
   11bfc:	movw	r4, #39599	; 0x9aaf
   11c00:	movt	r4, #1
   11c04:	movw	r1, #39084	; 0x98ac
   11c08:	movt	r1, #1
   11c0c:	mov	r0, r4
   11c10:	bl	116f4 <bindtextdomain@plt>
   11c14:	mov	r0, r4
   11c18:	bl	11490 <textdomain@plt>
   11c1c:	movw	r0, #21332	; 0x5354
   11c20:	movt	r0, #1
   11c24:	bl	19150 <__assert_fail@plt+0x7a08>
   11c28:	movw	r0, #41945	; 0xa3d9
   11c2c:	movt	r0, #1
   11c30:	bl	12da4 <__assert_fail@plt+0x165c>
   11c34:	movw	r1, #45944	; 0xb378
   11c38:	movt	r1, #2
   11c3c:	str	r0, [r1]
   11c40:	movw	r0, #39524	; 0x9a64
   11c44:	movt	r0, #1
   11c48:	bl	12da4 <__assert_fail@plt+0x165c>
   11c4c:	movw	r1, #45948	; 0xb37c
   11c50:	movt	r1, #2
   11c54:	str	r0, [r1]
   11c58:	movw	r7, #39108	; 0x98c4
   11c5c:	movt	r7, #1
   11c60:	mov	r0, #0
   11c64:	str	r0, [sp, #100]	; 0x64
   11c68:	mov	r0, #0
   11c6c:	str	r0, [sp, #92]	; 0x5c
   11c70:	mov	r8, #0
   11c74:	str	r6, [sp, #96]	; 0x60
   11c78:	b	11c88 <__assert_fail@plt+0x540>
   11c7c:	str	r0, [fp, #-48]	; 0xffffffd0
   11c80:	str	r1, [fp, #-44]	; 0xffffffd4
   11c84:	str	r4, [sp, #100]	; 0x64
   11c88:	movw	r5, #45920	; 0xb360
   11c8c:	movt	r5, #2
   11c90:	ldr	r4, [r5]
   11c94:	mov	r0, #0
   11c98:	str	r0, [sp]
   11c9c:	ldr	r0, [sp, #104]	; 0x68
   11ca0:	mov	r1, r6
   11ca4:	mov	r2, r7
   11ca8:	movw	r3, #41536	; 0xa240
   11cac:	movt	r3, #1
   11cb0:	bl	1158c <getopt_long@plt>
   11cb4:	mov	r9, r0
   11cb8:	add	r0, r0, #3
   11cbc:	cmp	r4, #0
   11cc0:	movweq	r4, #1
   11cc4:	movw	r1, #262	; 0x106
   11cc8:	cmp	r0, r1
   11ccc:	bhi	12ad4 <__assert_fail@plt+0x138c>
   11cd0:	add	r1, pc, #0
   11cd4:	ldr	pc, [r1, r0, lsl #2]
   11cd8:	ldrdeq	r2, [r1], -ip
   11cdc:	andeq	r2, r1, r0, lsr fp
   11ce0:	andeq	r2, r1, r4, ror r6
   11ce4:	ldrdeq	r2, [r1], -r4
   11ce8:	ldrdeq	r2, [r1], -r4
   11cec:	ldrdeq	r2, [r1], -r4
   11cf0:	ldrdeq	r2, [r1], -r4
   11cf4:	ldrdeq	r2, [r1], -r4
   11cf8:	ldrdeq	r2, [r1], -r4
   11cfc:	ldrdeq	r2, [r1], -r4
   11d00:	ldrdeq	r2, [r1], -r4
   11d04:	ldrdeq	r2, [r1], -r4
   11d08:	ldrdeq	r2, [r1], -r4
   11d0c:	ldrdeq	r2, [r1], -r4
   11d10:	ldrdeq	r2, [r1], -r4
   11d14:	ldrdeq	r2, [r1], -r4
   11d18:	ldrdeq	r2, [r1], -r4
   11d1c:	ldrdeq	r2, [r1], -r4
   11d20:	ldrdeq	r2, [r1], -r4
   11d24:	ldrdeq	r2, [r1], -r4
   11d28:	ldrdeq	r2, [r1], -r4
   11d2c:	ldrdeq	r2, [r1], -r4
   11d30:	ldrdeq	r2, [r1], -r4
   11d34:	ldrdeq	r2, [r1], -r4
   11d38:	ldrdeq	r2, [r1], -r4
   11d3c:	ldrdeq	r2, [r1], -r4
   11d40:	ldrdeq	r2, [r1], -r4
   11d44:	ldrdeq	r2, [r1], -r4
   11d48:	ldrdeq	r2, [r1], -r4
   11d4c:	ldrdeq	r2, [r1], -r4
   11d50:	ldrdeq	r2, [r1], -r4
   11d54:	ldrdeq	r2, [r1], -r4
   11d58:	ldrdeq	r2, [r1], -r4
   11d5c:	ldrdeq	r2, [r1], -r4
   11d60:	ldrdeq	r2, [r1], -r4
   11d64:	ldrdeq	r2, [r1], -r4
   11d68:	ldrdeq	r2, [r1], -r4
   11d6c:	ldrdeq	r2, [r1], -r4
   11d70:	ldrdeq	r2, [r1], -r4
   11d74:	ldrdeq	r2, [r1], -r4
   11d78:	ldrdeq	r2, [r1], -r4
   11d7c:	ldrdeq	r2, [r1], -r4
   11d80:	ldrdeq	r2, [r1], -r4
   11d84:	ldrdeq	r2, [r1], -r4
   11d88:	ldrdeq	r2, [r1], -r4
   11d8c:	ldrdeq	r2, [r1], -r4
   11d90:	ldrdeq	r2, [r1], -r4
   11d94:	ldrdeq	r2, [r1], -r4
   11d98:	ldrdeq	r2, [r1], -r4
   11d9c:	ldrdeq	r2, [r1], -r4
   11da0:	ldrdeq	r2, [r1], -r4
   11da4:	strdeq	r2, [r1], -r4
   11da8:	strdeq	r2, [r1], -r4
   11dac:	strdeq	r2, [r1], -r4
   11db0:	strdeq	r2, [r1], -r4
   11db4:	strdeq	r2, [r1], -r4
   11db8:	strdeq	r2, [r1], -r4
   11dbc:	strdeq	r2, [r1], -r4
   11dc0:	strdeq	r2, [r1], -r4
   11dc4:	strdeq	r2, [r1], -r4
   11dc8:	strdeq	r2, [r1], -r4
   11dcc:	ldrdeq	r2, [r1], -r4
   11dd0:	ldrdeq	r2, [r1], -r4
   11dd4:	ldrdeq	r2, [r1], -r4
   11dd8:	ldrdeq	r2, [r1], -r4
   11ddc:	ldrdeq	r2, [r1], -r4
   11de0:	ldrdeq	r2, [r1], -r4
   11de4:	ldrdeq	r2, [r1], -r4
   11de8:	ldrdeq	r2, [r1], -r4
   11dec:	ldrdeq	r2, [r1], -r4
   11df0:	andeq	r2, r1, ip, asr #4
   11df4:	ldrdeq	r2, [r1], -r4
   11df8:	ldrdeq	r2, [r1], -r4
   11dfc:	ldrdeq	r2, [r1], -r4
   11e00:	ldrdeq	r2, [r1], -r4
   11e04:	ldrdeq	r2, [r1], -r4
   11e08:	ldrdeq	r2, [r1], -r4
   11e0c:	ldrdeq	r2, [r1], -r4
   11e10:	ldrdeq	r2, [r1], -r4
   11e14:	ldrdeq	r2, [r1], -r4
   11e18:	ldrdeq	r2, [r1], -r4
   11e1c:	ldrdeq	r2, [r1], -r4
   11e20:	ldrdeq	r2, [r1], -r4
   11e24:	ldrdeq	r2, [r1], -r4
   11e28:	ldrdeq	r2, [r1], -r4
   11e2c:	ldrdeq	r2, [r1], -r4
   11e30:	ldrdeq	r2, [r1], -r4
   11e34:	ldrdeq	r2, [r1], -r4
   11e38:	ldrdeq	r2, [r1], -r4
   11e3c:	ldrdeq	r2, [r1], -r4
   11e40:	ldrdeq	r2, [r1], -r4
   11e44:	ldrdeq	r2, [r1], -r4
   11e48:	ldrdeq	r2, [r1], -r4
   11e4c:	ldrdeq	r2, [r1], -r4
   11e50:	ldrdeq	r2, [r1], -r4
   11e54:	ldrdeq	r2, [r1], -r4
   11e58:	ldrdeq	r2, [r1], -r4
   11e5c:	ldrdeq	r2, [r1], -r4
   11e60:	ldrdeq	r2, [r1], -r4
   11e64:	ldrdeq	r2, [r1], -r4
   11e68:			; <UNDEFINED> instruction: 0x000122b8
   11e6c:			; <UNDEFINED> instruction: 0x000123b4
   11e70:	ldrdeq	r2, [r1], -r4
   11e74:	muleq	r1, ip, r1
   11e78:	andeq	r2, r1, r8, lsr r2
   11e7c:	ldrdeq	r2, [r1], -r4
   11e80:	ldrdeq	r2, [r1], -r4
   11e84:	ldrdeq	r2, [r1], -r4
   11e88:	ldrdeq	r2, [r1], -r4
   11e8c:	ldrdeq	r2, [r1], -r4
   11e90:	ldrdeq	r2, [r1], -r4
   11e94:	andeq	r2, r1, r8, asr #6
   11e98:	ldrdeq	r2, [r1], -r4
   11e9c:	andeq	r2, r1, ip, asr #8
   11ea0:	ldrdeq	r2, [r1], -r4
   11ea4:	ldrdeq	r2, [r1], -r4
   11ea8:	ldrdeq	r2, [r1], -r4
   11eac:	ldrdeq	r2, [r1], -r4
   11eb0:	ldrdeq	r2, [r1], -r4
   11eb4:	andeq	r2, r1, r0, lsl r5
   11eb8:	andeq	r2, r1, r4, lsr #8
   11ebc:	ldrdeq	r2, [r1], -r4
   11ec0:	ldrdeq	r2, [r1], -r4
   11ec4:	muleq	r1, ip, r1
   11ec8:	ldrdeq	r2, [r1], -r4
   11ecc:	ldrdeq	r2, [r1], -r4
   11ed0:	ldrdeq	r2, [r1], -r4
   11ed4:	ldrdeq	r2, [r1], -r4
   11ed8:	ldrdeq	r2, [r1], -r4
   11edc:	ldrdeq	r2, [r1], -r4
   11ee0:	ldrdeq	r2, [r1], -r4
   11ee4:	ldrdeq	r2, [r1], -r4
   11ee8:	ldrdeq	r2, [r1], -r4
   11eec:	ldrdeq	r2, [r1], -r4
   11ef0:	ldrdeq	r2, [r1], -r4
   11ef4:	ldrdeq	r2, [r1], -r4
   11ef8:	ldrdeq	r2, [r1], -r4
   11efc:	ldrdeq	r2, [r1], -r4
   11f00:	ldrdeq	r2, [r1], -r4
   11f04:	ldrdeq	r2, [r1], -r4
   11f08:	ldrdeq	r2, [r1], -r4
   11f0c:	ldrdeq	r2, [r1], -r4
   11f10:	ldrdeq	r2, [r1], -r4
   11f14:	ldrdeq	r2, [r1], -r4
   11f18:	ldrdeq	r2, [r1], -r4
   11f1c:	ldrdeq	r2, [r1], -r4
   11f20:	ldrdeq	r2, [r1], -r4
   11f24:	ldrdeq	r2, [r1], -r4
   11f28:	ldrdeq	r2, [r1], -r4
   11f2c:	ldrdeq	r2, [r1], -r4
   11f30:	ldrdeq	r2, [r1], -r4
   11f34:	ldrdeq	r2, [r1], -r4
   11f38:	ldrdeq	r2, [r1], -r4
   11f3c:	ldrdeq	r2, [r1], -r4
   11f40:	ldrdeq	r2, [r1], -r4
   11f44:	ldrdeq	r2, [r1], -r4
   11f48:	ldrdeq	r2, [r1], -r4
   11f4c:	ldrdeq	r2, [r1], -r4
   11f50:	ldrdeq	r2, [r1], -r4
   11f54:	ldrdeq	r2, [r1], -r4
   11f58:	ldrdeq	r2, [r1], -r4
   11f5c:	ldrdeq	r2, [r1], -r4
   11f60:	ldrdeq	r2, [r1], -r4
   11f64:	ldrdeq	r2, [r1], -r4
   11f68:	ldrdeq	r2, [r1], -r4
   11f6c:	ldrdeq	r2, [r1], -r4
   11f70:	ldrdeq	r2, [r1], -r4
   11f74:	ldrdeq	r2, [r1], -r4
   11f78:	ldrdeq	r2, [r1], -r4
   11f7c:	ldrdeq	r2, [r1], -r4
   11f80:	ldrdeq	r2, [r1], -r4
   11f84:	ldrdeq	r2, [r1], -r4
   11f88:	ldrdeq	r2, [r1], -r4
   11f8c:	ldrdeq	r2, [r1], -r4
   11f90:	ldrdeq	r2, [r1], -r4
   11f94:	ldrdeq	r2, [r1], -r4
   11f98:	ldrdeq	r2, [r1], -r4
   11f9c:	ldrdeq	r2, [r1], -r4
   11fa0:	ldrdeq	r2, [r1], -r4
   11fa4:	ldrdeq	r2, [r1], -r4
   11fa8:	ldrdeq	r2, [r1], -r4
   11fac:	ldrdeq	r2, [r1], -r4
   11fb0:	ldrdeq	r2, [r1], -r4
   11fb4:	ldrdeq	r2, [r1], -r4
   11fb8:	ldrdeq	r2, [r1], -r4
   11fbc:	ldrdeq	r2, [r1], -r4
   11fc0:	ldrdeq	r2, [r1], -r4
   11fc4:	ldrdeq	r2, [r1], -r4
   11fc8:	ldrdeq	r2, [r1], -r4
   11fcc:	ldrdeq	r2, [r1], -r4
   11fd0:	ldrdeq	r2, [r1], -r4
   11fd4:	ldrdeq	r2, [r1], -r4
   11fd8:	ldrdeq	r2, [r1], -r4
   11fdc:	ldrdeq	r2, [r1], -r4
   11fe0:	ldrdeq	r2, [r1], -r4
   11fe4:	ldrdeq	r2, [r1], -r4
   11fe8:	ldrdeq	r2, [r1], -r4
   11fec:	ldrdeq	r2, [r1], -r4
   11ff0:	ldrdeq	r2, [r1], -r4
   11ff4:	ldrdeq	r2, [r1], -r4
   11ff8:	ldrdeq	r2, [r1], -r4
   11ffc:	ldrdeq	r2, [r1], -r4
   12000:	ldrdeq	r2, [r1], -r4
   12004:	ldrdeq	r2, [r1], -r4
   12008:	ldrdeq	r2, [r1], -r4
   1200c:	ldrdeq	r2, [r1], -r4
   12010:	ldrdeq	r2, [r1], -r4
   12014:	ldrdeq	r2, [r1], -r4
   12018:	ldrdeq	r2, [r1], -r4
   1201c:	ldrdeq	r2, [r1], -r4
   12020:	ldrdeq	r2, [r1], -r4
   12024:	ldrdeq	r2, [r1], -r4
   12028:	ldrdeq	r2, [r1], -r4
   1202c:	ldrdeq	r2, [r1], -r4
   12030:	ldrdeq	r2, [r1], -r4
   12034:	ldrdeq	r2, [r1], -r4
   12038:	ldrdeq	r2, [r1], -r4
   1203c:	ldrdeq	r2, [r1], -r4
   12040:	ldrdeq	r2, [r1], -r4
   12044:	ldrdeq	r2, [r1], -r4
   12048:	ldrdeq	r2, [r1], -r4
   1204c:	ldrdeq	r2, [r1], -r4
   12050:	ldrdeq	r2, [r1], -r4
   12054:	ldrdeq	r2, [r1], -r4
   12058:	ldrdeq	r2, [r1], -r4
   1205c:	ldrdeq	r2, [r1], -r4
   12060:	ldrdeq	r2, [r1], -r4
   12064:	ldrdeq	r2, [r1], -r4
   12068:	ldrdeq	r2, [r1], -r4
   1206c:	ldrdeq	r2, [r1], -r4
   12070:	ldrdeq	r2, [r1], -r4
   12074:	ldrdeq	r2, [r1], -r4
   12078:	ldrdeq	r2, [r1], -r4
   1207c:	ldrdeq	r2, [r1], -r4
   12080:	ldrdeq	r2, [r1], -r4
   12084:	ldrdeq	r2, [r1], -r4
   12088:	ldrdeq	r2, [r1], -r4
   1208c:	ldrdeq	r2, [r1], -r4
   12090:	ldrdeq	r2, [r1], -r4
   12094:	ldrdeq	r2, [r1], -r4
   12098:	ldrdeq	r2, [r1], -r4
   1209c:	ldrdeq	r2, [r1], -r4
   120a0:	ldrdeq	r2, [r1], -r4
   120a4:	ldrdeq	r2, [r1], -r4
   120a8:	ldrdeq	r2, [r1], -r4
   120ac:	ldrdeq	r2, [r1], -r4
   120b0:	ldrdeq	r2, [r1], -r4
   120b4:	ldrdeq	r2, [r1], -r4
   120b8:	ldrdeq	r2, [r1], -r4
   120bc:	ldrdeq	r2, [r1], -r4
   120c0:	ldrdeq	r2, [r1], -r4
   120c4:	ldrdeq	r2, [r1], -r4
   120c8:	ldrdeq	r2, [r1], -r4
   120cc:	ldrdeq	r2, [r1], -r4
   120d0:	ldrdeq	r2, [r1], -r4
   120d4:	ldrdeq	r2, [r1], -r4
   120d8:	ldrdeq	r2, [r1], -r4
   120dc:	ldrdeq	r2, [r1], -r4
   120e0:	ldrdeq	r2, [r1], -r4
   120e4:	andeq	r2, r1, r8, lsr r4
   120e8:	strdeq	r2, [r1], -r4
   120ec:	andeq	r2, r1, r0, ror r5
   120f0:	andeq	r2, r1, ip, lsl r3
   120f4:	cmp	r8, #0
   120f8:	beq	1210c <__assert_fail@plt+0x9c4>
   120fc:	orr	r0, r8, #4
   12100:	cmp	r0, #4
   12104:	beq	1211c <__assert_fail@plt+0x9d4>
   12108:	b	12b78 <__assert_fail@plt+0x1430>
   1210c:	mov	r0, #0
   12110:	str	r0, [fp, #-44]	; 0xffffffd4
   12114:	str	r0, [fp, #-48]	; 0xffffffd0
   12118:	mov	r8, #4
   1211c:	ldr	r0, [sp, #100]	; 0x64
   12120:	cmp	r0, #0
   12124:	cmpne	r0, r4
   12128:	bne	12184 <__assert_fail@plt+0xa3c>
   1212c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12130:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12134:	movw	r0, #39321	; 0x9999
   12138:	movt	r0, #39321	; 0x9999
   1213c:	subs	r0, r0, r2
   12140:	movw	r0, #39321	; 0x9999
   12144:	movt	r0, #6553	; 0x1999
   12148:	sbcs	r0, r0, r3
   1214c:	bcc	12b38 <__assert_fail@plt+0x13f0>
   12150:	mov	r0, #10
   12154:	umull	r0, r1, r2, r0
   12158:	add	r7, r3, r3, lsl #2
   1215c:	add	r1, r1, r7, lsl #1
   12160:	sub	r7, r9, #48	; 0x30
   12164:	adds	r0, r0, r7
   12168:	adc	r1, r1, r7, asr #31
   1216c:	movw	r7, #39108	; 0x98c4
   12170:	movt	r7, #1
   12174:	subs	r2, r0, r2
   12178:	sbcs	r2, r1, r3
   1217c:	bcs	11c7c <__assert_fail@plt+0x534>
   12180:	b	12b38 <__assert_fail@plt+0x13f0>
   12184:	mov	r0, #0
   12188:	str	r0, [fp, #-44]	; 0xffffffd4
   1218c:	str	r0, [fp, #-48]	; 0xffffffd0
   12190:	sub	r0, r9, #48	; 0x30
   12194:	asr	r1, r0, #31
   12198:	b	11c7c <__assert_fail@plt+0x534>
   1219c:	cmp	r9, #100	; 0x64
   121a0:	movw	r4, #39464	; 0x9a28
   121a4:	movt	r4, #1
   121a8:	movw	r0, #39453	; 0x9a1d
   121ac:	movt	r0, #1
   121b0:	moveq	r4, r0
   121b4:	movw	r0, #45404	; 0xb15c
   121b8:	movt	r0, #2
   121bc:	str	r4, [r0]
   121c0:	movw	r0, #45936	; 0xb370
   121c4:	movt	r0, #2
   121c8:	ldr	sl, [r0]
   121cc:	cmp	sl, #0
   121d0:	beq	11c88 <__assert_fail@plt+0x540>
   121d4:	mov	r0, sl
   121d8:	bl	115b0 <strlen@plt>
   121dc:	mov	r5, r0
   121e0:	mov	r0, sl
   121e4:	mov	r1, r4
   121e8:	bl	1173c <strspn@plt>
   121ec:	cmp	r5, r0
   121f0:	bne	12ba4 <__assert_fail@plt+0x145c>
   121f4:	movw	r2, #45936	; 0xb370
   121f8:	movt	r2, #2
   121fc:	ldr	r0, [r2]
   12200:	ldrb	r1, [r0]
   12204:	cmp	r1, #48	; 0x30
   12208:	bne	125cc <__assert_fail@plt+0xe84>
   1220c:	add	r0, r0, #1
   12210:	ldr	r6, [sp, #96]	; 0x60
   12214:	ldrb	r1, [r0]
   12218:	cmp	r1, #0
   1221c:	beq	12230 <__assert_fail@plt+0xae8>
   12220:	str	r0, [r2]
   12224:	ldrb	r1, [r0], #1
   12228:	cmp	r1, #48	; 0x30
   1222c:	beq	12214 <__assert_fail@plt+0xacc>
   12230:	sub	r0, r0, #1
   12234:	b	125d0 <__assert_fail@plt+0xe88>
   12238:	mov	r0, #1
   1223c:	movw	r1, #45968	; 0xb390
   12240:	movt	r1, #2
   12244:	strb	r0, [r1]
   12248:	b	11c88 <__assert_fail@plt+0x540>
   1224c:	cmp	r8, #0
   12250:	bne	12b78 <__assert_fail@plt+0x1430>
   12254:	movw	r0, #45936	; 0xb370
   12258:	movt	r0, #2
   1225c:	ldr	r4, [r0]
   12260:	mov	r0, #0
   12264:	movw	r1, #39239	; 0x9947
   12268:	movt	r1, #1
   1226c:	mov	r2, #5
   12270:	bl	1146c <dcgettext@plt>
   12274:	mvn	r1, #0
   12278:	str	r1, [sp]
   1227c:	mov	r1, #0
   12280:	str	r1, [sp, #4]
   12284:	movw	r2, #41520	; 0xa230
   12288:	movt	r2, #1
   1228c:	str	r2, [sp, #8]
   12290:	str	r0, [sp, #12]
   12294:	str	r1, [sp, #16]
   12298:	mov	r0, r4
   1229c:	mov	r2, #1
   122a0:	mov	r3, #0
   122a4:	bl	18180 <__assert_fail@plt+0x6a38>
   122a8:	str	r1, [fp, #-44]	; 0xffffffd4
   122ac:	str	r0, [fp, #-48]	; 0xffffffd0
   122b0:	mov	r8, #2
   122b4:	b	11c88 <__assert_fail@plt+0x540>
   122b8:	movw	r0, #45936	; 0xb370
   122bc:	movt	r0, #2
   122c0:	ldr	r4, [r0]
   122c4:	mov	r0, #0
   122c8:	movw	r1, #39135	; 0x98df
   122cc:	movt	r1, #1
   122d0:	mov	r2, #5
   122d4:	bl	1146c <dcgettext@plt>
   122d8:	mvn	r1, #-1073741824	; 0xc0000000
   122dc:	str	r1, [sp]
   122e0:	mov	r1, #0
   122e4:	str	r1, [sp, #4]
   122e8:	movw	r2, #38525	; 0x967d
   122ec:	movt	r2, #1
   122f0:	str	r2, [sp, #8]
   122f4:	str	r0, [sp, #12]
   122f8:	str	r1, [sp, #16]
   122fc:	mov	r0, r4
   12300:	mov	r2, #0
   12304:	mov	r3, #0
   12308:	bl	18180 <__assert_fail@plt+0x6a38>
   1230c:	movw	r1, #45952	; 0xb380
   12310:	movt	r1, #2
   12314:	str	r0, [r1]
   12318:	b	11c88 <__assert_fail@plt+0x540>
   1231c:	movw	r0, #45936	; 0xb370
   12320:	movt	r0, #2
   12324:	ldr	r4, [r0]
   12328:	mov	r0, r4
   1232c:	bl	152b0 <__assert_fail@plt+0x3b68>
   12330:	cmp	r0, r4
   12334:	bne	12bc0 <__assert_fail@plt+0x1478>
   12338:	movw	r0, #45956	; 0xb384
   1233c:	movt	r0, #2
   12340:	str	r4, [r0]
   12344:	b	11c88 <__assert_fail@plt+0x540>
   12348:	cmp	r8, #0
   1234c:	bne	12b78 <__assert_fail@plt+0x1430>
   12350:	movw	r0, #45936	; 0xb370
   12354:	movt	r0, #2
   12358:	ldr	r4, [r0]
   1235c:	mov	r0, #0
   12360:	movw	r1, #39263	; 0x995f
   12364:	movt	r1, #1
   12368:	mov	r2, #5
   1236c:	bl	1146c <dcgettext@plt>
   12370:	mvn	r1, #0
   12374:	str	r1, [sp]
   12378:	str	r1, [sp, #4]
   1237c:	movw	r1, #38525	; 0x967d
   12380:	movt	r1, #1
   12384:	str	r1, [sp, #8]
   12388:	str	r0, [sp, #12]
   1238c:	mov	r0, #0
   12390:	str	r0, [sp, #16]
   12394:	mov	r0, r4
   12398:	mov	r2, #1
   1239c:	mov	r3, #0
   123a0:	bl	18180 <__assert_fail@plt+0x6a38>
   123a4:	str	r1, [fp, #-44]	; 0xffffffd4
   123a8:	str	r0, [fp, #-48]	; 0xffffffd0
   123ac:	mov	r8, #3
   123b0:	b	11c88 <__assert_fail@plt+0x540>
   123b4:	cmp	r8, #0
   123b8:	bne	12b78 <__assert_fail@plt+0x1430>
   123bc:	movw	r0, #45936	; 0xb370
   123c0:	movt	r0, #2
   123c4:	ldr	r4, [r0]
   123c8:	mov	r0, #0
   123cc:	movw	r1, #39239	; 0x9947
   123d0:	movt	r1, #1
   123d4:	mov	r2, #5
   123d8:	bl	1146c <dcgettext@plt>
   123dc:	mvn	r1, #0
   123e0:	str	r1, [sp]
   123e4:	mvn	r1, #-2147483648	; 0x80000000
   123e8:	str	r1, [sp, #4]
   123ec:	movw	r1, #41520	; 0xa230
   123f0:	movt	r1, #1
   123f4:	str	r1, [sp, #8]
   123f8:	str	r0, [sp, #12]
   123fc:	mov	r0, #0
   12400:	str	r0, [sp, #16]
   12404:	mov	r8, #1
   12408:	mov	r0, r4
   1240c:	mov	r2, #1
   12410:	mov	r3, #0
   12414:	bl	18180 <__assert_fail@plt+0x6a38>
   12418:	str	r1, [fp, #-44]	; 0xffffffd4
   1241c:	str	r0, [fp, #-48]	; 0xffffffd0
   12420:	b	11c88 <__assert_fail@plt+0x540>
   12424:	mov	r0, #1
   12428:	movw	r1, #45960	; 0xb388
   1242c:	movt	r1, #2
   12430:	strb	r0, [r1]
   12434:	b	11c88 <__assert_fail@plt+0x540>
   12438:	mov	r0, #1
   1243c:	movw	r1, #45976	; 0xb398
   12440:	movt	r1, #2
   12444:	strb	r0, [r1]
   12448:	b	11c88 <__assert_fail@plt+0x540>
   1244c:	cmp	r8, #0
   12450:	bne	12b78 <__assert_fail@plt+0x1430>
   12454:	bl	11598 <__ctype_b_loc@plt>
   12458:	mov	r5, r0
   1245c:	ldr	r6, [r0]
   12460:	movw	r7, #45936	; 0xb370
   12464:	movt	r7, #2
   12468:	ldr	r4, [r7]
   1246c:	ldrb	r0, [r4]
   12470:	bl	12da8 <__assert_fail@plt+0x1660>
   12474:	add	r0, r6, r0, lsl #1
   12478:	ldrb	r0, [r0, #1]
   1247c:	tst	r0, #32
   12480:	beq	124ac <__assert_fail@plt+0xd64>
   12484:	add	r4, r4, #1
   12488:	str	r4, [r7]
   1248c:	ldr	r6, [r5]
   12490:	ldrb	r0, [r4], #1
   12494:	bl	12da8 <__assert_fail@plt+0x1660>
   12498:	add	r0, r6, r0, lsl #1
   1249c:	ldrb	r0, [r0, #1]
   124a0:	tst	r0, #32
   124a4:	bne	12488 <__assert_fail@plt+0xd40>
   124a8:	sub	r4, r4, #1
   124ac:	mov	r0, r4
   124b0:	movw	r1, #39287	; 0x9977
   124b4:	movt	r1, #1
   124b8:	mov	r2, #2
   124bc:	bl	11718 <strncmp@plt>
   124c0:	cmp	r0, #0
   124c4:	ldr	r6, [sp, #96]	; 0x60
   124c8:	beq	125e0 <__assert_fail@plt+0xe98>
   124cc:	mov	r0, r4
   124d0:	movw	r1, #39290	; 0x997a
   124d4:	movt	r1, #1
   124d8:	mov	r2, #2
   124dc:	bl	11718 <strncmp@plt>
   124e0:	mov	r8, #5
   124e4:	cmp	r0, #0
   124e8:	bne	125ec <__assert_fail@plt+0xea4>
   124ec:	mov	r8, #6
   124f0:	b	125e4 <__assert_fail@plt+0xe9c>
   124f4:	movw	r0, #45936	; 0xb370
   124f8:	movt	r0, #2
   124fc:	ldr	r0, [r0]
   12500:	movw	r1, #45972	; 0xb394
   12504:	movt	r1, #2
   12508:	str	r0, [r1]
   1250c:	b	11c88 <__assert_fail@plt+0x540>
   12510:	movw	r5, #45936	; 0xb370
   12514:	movt	r5, #2
   12518:	ldr	r0, [r5]
   1251c:	ldrb	r1, [r0]
   12520:	cmp	r1, #0
   12524:	beq	12be8 <__assert_fail@plt+0x14a0>
   12528:	ldrb	r2, [r0, #1]
   1252c:	cmp	r2, #0
   12530:	beq	1254c <__assert_fail@plt+0xe04>
   12534:	movw	r1, #39341	; 0x99ad
   12538:	movt	r1, #1
   1253c:	bl	113d0 <strcmp@plt>
   12540:	mov	r1, #0
   12544:	cmp	r0, #0
   12548:	bne	12bf4 <__assert_fail@plt+0x14ac>
   1254c:	movw	r2, #45400	; 0xb158
   12550:	movt	r2, #2
   12554:	ldr	r0, [r2]
   12558:	cmp	r0, #0
   1255c:	blt	12568 <__assert_fail@plt+0xe20>
   12560:	cmp	r0, r1
   12564:	bne	12c1c <__assert_fail@plt+0x14d4>
   12568:	str	r1, [r2]
   1256c:	b	11c88 <__assert_fail@plt+0x540>
   12570:	movw	r0, #45936	; 0xb370
   12574:	movt	r0, #2
   12578:	ldr	r4, [r0]
   1257c:	mov	r0, #0
   12580:	movw	r1, #39573	; 0x9a95
   12584:	movt	r1, #1
   12588:	mov	r2, #5
   1258c:	bl	1146c <dcgettext@plt>
   12590:	mvn	r1, #-2147483647	; 0x80000001
   12594:	str	r1, [sp]
   12598:	mov	r1, #0
   1259c:	str	r1, [sp, #4]
   125a0:	movw	r2, #41520	; 0xa230
   125a4:	movt	r2, #1
   125a8:	str	r2, [sp, #8]
   125ac:	str	r0, [sp, #12]
   125b0:	str	r1, [sp, #16]
   125b4:	mov	r0, r4
   125b8:	mov	r2, #1
   125bc:	mov	r3, #0
   125c0:	bl	18180 <__assert_fail@plt+0x6a38>
   125c4:	str	r0, [sp, #92]	; 0x5c
   125c8:	b	11c88 <__assert_fail@plt+0x540>
   125cc:	ldr	r6, [sp, #96]	; 0x60
   125d0:	movw	r1, #45964	; 0xb38c
   125d4:	movt	r1, #2
   125d8:	str	r0, [r1]
   125dc:	b	11c88 <__assert_fail@plt+0x540>
   125e0:	mov	r8, #7
   125e4:	add	r0, r4, #2
   125e8:	str	r0, [r7]
   125ec:	ldr	r4, [r7]
   125f0:	mov	r0, r4
   125f4:	mov	r1, #47	; 0x2f
   125f8:	bl	115c8 <strchr@plt>
   125fc:	cmp	r0, #0
   12600:	beq	12618 <__assert_fail@plt+0xed0>
   12604:	mov	r2, r0
   12608:	sub	r0, fp, #40	; 0x28
   1260c:	sub	r1, fp, #48	; 0x30
   12610:	bl	12dac <__assert_fail@plt+0x1664>
   12614:	b	12668 <__assert_fail@plt+0xf20>
   12618:	mov	r0, #0
   1261c:	movw	r1, #39293	; 0x997d
   12620:	movt	r1, #1
   12624:	mov	r2, #5
   12628:	bl	1146c <dcgettext@plt>
   1262c:	mvn	r1, #0
   12630:	str	r1, [sp]
   12634:	str	r1, [sp, #4]
   12638:	movw	r1, #38525	; 0x967d
   1263c:	movt	r1, #1
   12640:	str	r1, [sp, #8]
   12644:	str	r0, [sp, #12]
   12648:	mov	r0, #0
   1264c:	str	r0, [sp, #16]
   12650:	mov	r0, r4
   12654:	mov	r2, #1
   12658:	mov	r3, #0
   1265c:	bl	18180 <__assert_fail@plt+0x6a38>
   12660:	str	r1, [fp, #-44]	; 0xffffffd4
   12664:	str	r0, [fp, #-48]	; 0xffffffd0
   12668:	movw	r7, #39108	; 0x98c4
   1266c:	movt	r7, #1
   12670:	b	11c88 <__assert_fail@plt+0x540>
   12674:	ldr	r9, [fp, #-40]	; 0xffffffd8
   12678:	ldr	sl, [fp, #-36]	; 0xffffffdc
   1267c:	orrs	r4, r9, sl
   12680:	beq	12698 <__assert_fail@plt+0xf50>
   12684:	movw	r0, #45972	; 0xb394
   12688:	movt	r0, #2
   1268c:	ldr	r0, [r0]
   12690:	cmp	r0, #0
   12694:	bne	12c78 <__assert_fail@plt+0x1530>
   12698:	cmp	r8, #0
   1269c:	movw	r3, #45400	; 0xb158
   126a0:	movt	r3, #2
   126a4:	beq	126fc <__assert_fail@plt+0xfb4>
   126a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   126ac:	ldr	r1, [fp, #-44]	; 0xffffffd4
   126b0:	orrs	r2, r0, r1
   126b4:	ldr	r6, [sp, #92]	; 0x5c
   126b8:	bne	12714 <__assert_fail@plt+0xfcc>
   126bc:	movw	r1, #39263	; 0x995f
   126c0:	movt	r1, #1
   126c4:	mov	r0, #0
   126c8:	mov	r2, #5
   126cc:	bl	1146c <dcgettext@plt>
   126d0:	mov	r4, r0
   126d4:	movw	r0, #39342	; 0x99ae
   126d8:	movt	r0, #1
   126dc:	bl	16fc8 <__assert_fail@plt+0x5880>
   126e0:	str	r0, [sp]
   126e4:	movw	r2, #39701	; 0x9b15
   126e8:	movt	r2, #1
   126ec:	mov	r0, #0
   126f0:	mov	r1, #0
   126f4:	mov	r3, r4
   126f8:	b	12cbc <__assert_fail@plt+0x1574>
   126fc:	mov	r1, #0
   12700:	str	r1, [fp, #-44]	; 0xffffffd4
   12704:	mov	r0, #1000	; 0x3e8
   12708:	str	r0, [fp, #-48]	; 0xffffffd0
   1270c:	mov	r8, #3
   12710:	ldr	r6, [sp, #92]	; 0x5c
   12714:	ldr	r2, [r3]
   12718:	cmn	r2, #1
   1271c:	movle	r2, #10
   12720:	strle	r2, [r3]
   12724:	mov	r2, r8
   12728:	bl	12e6c <__assert_fail@plt+0x1724>
   1272c:	ldr	r0, [r5]
   12730:	ldr	r1, [sp, #104]	; 0x68
   12734:	cmp	r0, r1
   12738:	bge	12758 <__assert_fail@plt+0x1010>
   1273c:	add	r1, r0, #1
   12740:	str	r1, [r5]
   12744:	ldr	r1, [sp, #96]	; 0x60
   12748:	ldr	r0, [r1, r0, lsl #2]
   1274c:	movw	r1, #45944	; 0xb378
   12750:	movt	r1, #2
   12754:	str	r0, [r1]
   12758:	ldr	r0, [r5]
   1275c:	ldr	r1, [sp, #104]	; 0x68
   12760:	cmp	r0, r1
   12764:	bge	12784 <__assert_fail@plt+0x103c>
   12768:	add	r1, r0, #1
   1276c:	str	r1, [r5]
   12770:	ldr	r1, [sp, #96]	; 0x60
   12774:	ldr	r0, [r1, r0, lsl #2]
   12778:	movw	r1, #45948	; 0xb37c
   1277c:	movt	r1, #2
   12780:	str	r0, [r1]
   12784:	ldr	r0, [r5]
   12788:	ldr	r1, [sp, #104]	; 0x68
   1278c:	cmp	r0, r1
   12790:	blt	12c84 <__assert_fail@plt+0x153c>
   12794:	str	r4, [sp, #96]	; 0x60
   12798:	movw	r0, #45964	; 0xb38c
   1279c:	movt	r0, #2
   127a0:	ldr	r0, [r0]
   127a4:	cmp	r0, #0
   127a8:	beq	127c4 <__assert_fail@plt+0x107c>
   127ac:	bl	115b0 <strlen@plt>
   127b0:	movw	r1, #45952	; 0xb380
   127b4:	movt	r1, #2
   127b8:	ldr	r1, [r1]
   127bc:	cmp	r0, r1
   127c0:	bhi	12ccc <__assert_fail@plt+0x1584>
   127c4:	movw	r0, #45944	; 0xb378
   127c8:	movt	r0, #2
   127cc:	ldr	r4, [r0]
   127d0:	movw	r1, #41945	; 0xa3d9
   127d4:	movt	r1, #1
   127d8:	mov	r0, r4
   127dc:	bl	113d0 <strcmp@plt>
   127e0:	cmp	r0, #0
   127e4:	beq	12804 <__assert_fail@plt+0x10bc>
   127e8:	mov	r0, #0
   127ec:	mov	r1, r4
   127f0:	mov	r2, #0
   127f4:	mov	r3, #0
   127f8:	bl	15524 <__assert_fail@plt+0x3ddc>
   127fc:	cmn	r0, #1
   12800:	ble	12cd8 <__assert_fail@plt+0x1590>
   12804:	mov	r0, #0
   12808:	mov	r1, #0
   1280c:	bl	1808c <__assert_fail@plt+0x6944>
   12810:	movw	r4, #45984	; 0xb3a0
   12814:	movt	r4, #2
   12818:	mov	r0, #0
   1281c:	mov	r1, r4
   12820:	bl	19168 <__assert_fail@plt+0x7a20>
   12824:	cmp	r0, #0
   12828:	bne	12c40 <__assert_fail@plt+0x14f8>
   1282c:	cmp	r6, #0
   12830:	bne	1285c <__assert_fail@plt+0x1114>
   12834:	add	r0, r4, #16
   12838:	movw	r1, #88	; 0x58
   1283c:	mov	r2, sp
   12840:	vld1.32	{d16}, [r0]!
   12844:	vst1.32	{d16}, [r2]!
   12848:	subs	r1, r1, #8
   1284c:	bne	12840 <__assert_fail@plt+0x10f8>
   12850:	ldm	r4, {r0, r1, r2, r3}
   12854:	bl	13010 <__assert_fail@plt+0x18c8>
   12858:	mov	r6, r0
   1285c:	str	r9, [sp, #104]	; 0x68
   12860:	add	r1, r6, #1
   12864:	ldr	r0, [sp, #88]	; 0x58
   12868:	bl	17c3c <__assert_fail@plt+0x64f4>
   1286c:	mov	r9, r0
   12870:	sub	r0, r8, #5
   12874:	cmp	r0, #1
   12878:	str	sl, [sp, #100]	; 0x64
   1287c:	bhi	128dc <__assert_fail@plt+0x1194>
   12880:	mov	r0, r9
   12884:	mov	r1, r6
   12888:	bl	1305c <__assert_fail@plt+0x1914>
   1288c:	cmn	r1, #1
   12890:	ble	12d10 <__assert_fail@plt+0x15c8>
   12894:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12898:	cmn	r7, #1
   1289c:	ble	12d5c <__assert_fail@plt+0x1614>
   128a0:	mov	r5, r8
   128a4:	ldr	r4, [fp, #-48]	; 0xffffffd0
   128a8:	subs	r2, r0, r6
   128ac:	sbcs	r2, r1, r6, asr #31
   128b0:	mov	r8, r6
   128b4:	mov	sl, r6
   128b8:	movlt	sl, r0
   128bc:	mov	r2, #0
   128c0:	subs	r3, r4, r0
   128c4:	sbcs	r3, r7, r1
   128c8:	movwcc	r2, #1
   128cc:	cmp	r2, #0
   128d0:	movne	r7, r1
   128d4:	movne	r4, r0
   128d8:	b	128f0 <__assert_fail@plt+0x11a8>
   128dc:	mov	r5, r8
   128e0:	mov	r8, r6
   128e4:	mvn	r7, #-2147483648	; 0x80000000
   128e8:	mvn	r4, #0
   128ec:	mvn	sl, #0
   128f0:	movw	r0, #45972	; 0xb394
   128f4:	movt	r0, #2
   128f8:	ldr	r0, [r0]
   128fc:	cmp	r0, #0
   12900:	beq	12954 <__assert_fail@plt+0x120c>
   12904:	movw	r0, #46088	; 0xb408
   12908:	movt	r0, #2
   1290c:	bl	116ac <sigemptyset@plt>
   12910:	add	r2, sp, #108	; 0x6c
   12914:	mov	r0, #13
   12918:	mov	r1, #0
   1291c:	bl	114c0 <sigaction@plt>
   12920:	ldr	r0, [sp, #108]	; 0x6c
   12924:	cmp	r0, #1
   12928:	beq	1293c <__assert_fail@plt+0x11f4>
   1292c:	movw	r0, #46088	; 0xb408
   12930:	movt	r0, #2
   12934:	mov	r1, #13
   12938:	bl	1155c <sigaddset@plt>
   1293c:	movw	r1, #46088	; 0xb408
   12940:	movt	r1, #2
   12944:	movw	r2, #46216	; 0xb488
   12948:	movt	r2, #2
   1294c:	mov	r0, #0
   12950:	bl	11400 <sigprocmask@plt>
   12954:	sub	r0, r5, #1
   12958:	cmp	r0, #6
   1295c:	bhi	12cc8 <__assert_fail@plt+0x1580>
   12960:	add	r1, pc, #0
   12964:	ldr	pc, [r1, r0, lsl #2]
   12968:	muleq	r1, ip, r9
   1296c:			; <UNDEFINED> instruction: 0x000129bc
   12970:	andeq	r2, r1, r4, lsl #19
   12974:	andeq	r2, r1, r4, lsl #19
   12978:	strdeq	r2, [r1], -ip
   1297c:	ldrdeq	r2, [r1], -r4
   12980:	andeq	r2, r1, r8, lsr sl
   12984:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12988:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1298c:	mov	r2, r9
   12990:	mov	r3, r8
   12994:	bl	131f8 <__assert_fail@plt+0x1ab0>
   12998:	b	12a8c <__assert_fail@plt+0x1344>
   1299c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   129a0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   129a4:	mov	r2, #0
   129a8:	str	r2, [sp, #8]
   129ac:	str	r2, [sp, #12]
   129b0:	mvn	r2, #0
   129b4:	str	r2, [sp]
   129b8:	b	12a80 <__assert_fail@plt+0x1338>
   129bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   129c0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   129c4:	mov	r2, r9
   129c8:	mov	r3, r8
   129cc:	bl	13588 <__assert_fail@plt+0x1e40>
   129d0:	b	12a8c <__assert_fail@plt+0x1344>
   129d4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   129d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   129dc:	str	r4, [sp, #16]
   129e0:	str	r7, [sp, #20]
   129e4:	str	r9, [sp]
   129e8:	stmib	sp, {r8, sl}
   129ec:	ldr	r0, [sp, #104]	; 0x68
   129f0:	ldr	r1, [sp, #100]	; 0x64
   129f4:	bl	13b2c <__assert_fail@plt+0x23e4>
   129f8:	b	12a8c <__assert_fail@plt+0x1344>
   129fc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12a00:	ldr	r6, [fp, #-44]	; 0xffffffd4
   12a04:	ldr	r0, [sp, #96]	; 0x60
   12a08:	cmp	r0, #0
   12a0c:	beq	12a60 <__assert_fail@plt+0x1318>
   12a10:	str	r4, [sp, #16]
   12a14:	str	r7, [sp, #20]
   12a18:	str	r9, [sp]
   12a1c:	stmib	sp, {r8, sl}
   12a20:	ldr	r0, [sp, #104]	; 0x68
   12a24:	ldr	r1, [sp, #100]	; 0x64
   12a28:	mov	r2, r5
   12a2c:	mov	r3, r6
   12a30:	bl	13938 <__assert_fail@plt+0x21f0>
   12a34:	b	12a8c <__assert_fail@plt+0x1344>
   12a38:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12a3c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12a40:	add	r0, sp, #108	; 0x6c
   12a44:	str	r9, [sp]
   12a48:	str	r8, [sp, #4]
   12a4c:	str	r0, [sp, #8]
   12a50:	ldr	r0, [sp, #104]	; 0x68
   12a54:	ldr	r1, [sp, #100]	; 0x64
   12a58:	bl	140c0 <__assert_fail@plt+0x2978>
   12a5c:	b	12a8c <__assert_fail@plt+0x1344>
   12a60:	mov	r0, r4
   12a64:	mov	r1, r7
   12a68:	mov	r2, r5
   12a6c:	mov	r3, r6
   12a70:	bl	18f78 <__assert_fail@plt+0x7830>
   12a74:	str	r5, [sp, #8]
   12a78:	str	r6, [sp, #12]
   12a7c:	str	sl, [sp]
   12a80:	mov	r2, r9
   12a84:	mov	r3, r8
   12a88:	bl	1332c <__assert_fail@plt+0x1be4>
   12a8c:	mov	r0, #0
   12a90:	bl	11730 <close@plt>
   12a94:	cmp	r0, #0
   12a98:	bne	12c40 <__assert_fail@plt+0x14f8>
   12a9c:	movw	r0, #46348	; 0xb50c
   12aa0:	movt	r0, #2
   12aa4:	ldr	r3, [r0]
   12aa8:	movw	r0, #46344	; 0xb508
   12aac:	movt	r0, #2
   12ab0:	ldr	r2, [r0]
   12ab4:	movw	r0, #45408	; 0xb160
   12ab8:	movt	r0, #2
   12abc:	ldr	r1, [r0]
   12ac0:	mov	r0, #0
   12ac4:	bl	14548 <__assert_fail@plt+0x2e00>
   12ac8:	mov	r0, #0
   12acc:	sub	sp, fp, #28
   12ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ad4:	mov	r0, #1
   12ad8:	bl	11844 <__assert_fail@plt+0xfc>
   12adc:	movw	r0, #45412	; 0xb164
   12ae0:	movt	r0, #2
   12ae4:	ldr	r3, [r0]
   12ae8:	movw	r0, #45932	; 0xb36c
   12aec:	movt	r0, #2
   12af0:	ldr	r0, [r0]
   12af4:	mov	r1, #0
   12af8:	movw	r2, #39627	; 0x9acb
   12afc:	movt	r2, #1
   12b00:	movw	r7, #39609	; 0x9ab9
   12b04:	movt	r7, #1
   12b08:	str	r7, [sp]
   12b0c:	str	r2, [sp, #4]
   12b10:	str	r1, [sp, #8]
   12b14:	movw	r1, #39078	; 0x98a6
   12b18:	movt	r1, #1
   12b1c:	movw	r2, #39595	; 0x9aab
   12b20:	movt	r2, #1
   12b24:	bl	17b74 <__assert_fail@plt+0x642c>
   12b28:	mov	r0, #0
   12b2c:	bl	115a4 <exit@plt>
   12b30:	mov	r0, #0
   12b34:	bl	11844 <__assert_fail@plt+0xfc>
   12b38:	movw	r1, #39413	; 0x99f5
   12b3c:	movt	r1, #1
   12b40:	mov	r0, #0
   12b44:	mov	r2, #5
   12b48:	bl	1146c <dcgettext@plt>
   12b4c:	mov	r4, r0
   12b50:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12b54:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12b58:	add	r2, sp, #108	; 0x6c
   12b5c:	bl	15734 <__assert_fail@plt+0x3fec>
   12b60:	mov	r3, r0
   12b64:	str	r9, [sp]
   12b68:	mov	r0, #1
   12b6c:	mov	r1, #0
   12b70:	mov	r2, r4
   12b74:	bl	1152c <error@plt>
   12b78:	movw	r1, #39205	; 0x9925
   12b7c:	movt	r1, #1
   12b80:	mov	r0, #0
   12b84:	mov	r2, #5
   12b88:	bl	1146c <dcgettext@plt>
   12b8c:	mov	r2, r0
   12b90:	mov	r0, #0
   12b94:	mov	r1, #0
   12b98:	bl	1152c <error@plt>
   12b9c:	mov	r0, #1
   12ba0:	bl	11844 <__assert_fail@plt+0xfc>
   12ba4:	movw	r0, #39481	; 0x9a39
   12ba8:	movt	r0, #1
   12bac:	movw	r1, #39526	; 0x9a66
   12bb0:	movt	r1, #1
   12bb4:	cmp	r9, #100	; 0x64
   12bb8:	moveq	r1, r0
   12bbc:	b	12bc8 <__assert_fail@plt+0x1480>
   12bc0:	movw	r1, #39157	; 0x98f5
   12bc4:	movt	r1, #1
   12bc8:	mov	r0, #0
   12bcc:	mov	r2, #5
   12bd0:	bl	1146c <dcgettext@plt>
   12bd4:	mov	r4, r0
   12bd8:	movw	r0, #45936	; 0xb370
   12bdc:	movt	r0, #2
   12be0:	ldr	r0, [r0]
   12be4:	b	12ca8 <__assert_fail@plt+0x1560>
   12be8:	movw	r1, #39318	; 0x9996
   12bec:	movt	r1, #1
   12bf0:	b	12c24 <__assert_fail@plt+0x14dc>
   12bf4:	movw	r1, #39344	; 0x99b0
   12bf8:	movt	r1, #1
   12bfc:	mov	r0, #0
   12c00:	mov	r2, #5
   12c04:	bl	1146c <dcgettext@plt>
   12c08:	mov	r4, r0
   12c0c:	ldr	r0, [r5]
   12c10:	bl	16fc8 <__assert_fail@plt+0x5880>
   12c14:	mov	r3, r0
   12c18:	b	12b68 <__assert_fail@plt+0x1420>
   12c1c:	movw	r1, #39373	; 0x99cd
   12c20:	movt	r1, #1
   12c24:	mov	r0, #0
   12c28:	mov	r2, #5
   12c2c:	bl	1146c <dcgettext@plt>
   12c30:	mov	r2, r0
   12c34:	mov	r0, #1
   12c38:	mov	r1, #0
   12c3c:	bl	1152c <error@plt>
   12c40:	bl	115f8 <__errno_location@plt>
   12c44:	ldr	r4, [r0]
   12c48:	movw	r0, #45944	; 0xb378
   12c4c:	movt	r0, #2
   12c50:	ldr	r2, [r0]
   12c54:	mov	r0, #0
   12c58:	mov	r1, #3
   12c5c:	bl	16e88 <__assert_fail@plt+0x5740>
   12c60:	mov	r3, r0
   12c64:	movw	r2, #41482	; 0xa20a
   12c68:	movt	r2, #1
   12c6c:	mov	r0, #1
   12c70:	mov	r1, r4
   12c74:	bl	1152c <error@plt>
   12c78:	movw	r1, #39647	; 0x9adf
   12c7c:	movt	r1, #1
   12c80:	b	12b80 <__assert_fail@plt+0x1438>
   12c84:	movw	r1, #39708	; 0x9b1c
   12c88:	movt	r1, #1
   12c8c:	mov	r0, #0
   12c90:	mov	r2, #5
   12c94:	bl	1146c <dcgettext@plt>
   12c98:	mov	r4, r0
   12c9c:	ldr	r0, [r5]
   12ca0:	ldr	r1, [sp, #96]	; 0x60
   12ca4:	ldr	r0, [r1, r0, lsl #2]
   12ca8:	bl	16fc8 <__assert_fail@plt+0x5880>
   12cac:	mov	r3, r0
   12cb0:	mov	r0, #0
   12cb4:	mov	r1, #0
   12cb8:	mov	r2, r4
   12cbc:	bl	1152c <error@plt>
   12cc0:	mov	r0, #1
   12cc4:	bl	11844 <__assert_fail@plt+0xfc>
   12cc8:	bl	11724 <abort@plt>
   12ccc:	movw	r1, #39725	; 0x9b2d
   12cd0:	movt	r1, #1
   12cd4:	b	12b80 <__assert_fail@plt+0x1438>
   12cd8:	bl	115f8 <__errno_location@plt>
   12cdc:	ldr	r4, [r0]
   12ce0:	movw	r1, #39789	; 0x9b6d
   12ce4:	movt	r1, #1
   12ce8:	mov	r0, #0
   12cec:	mov	r2, #5
   12cf0:	bl	1146c <dcgettext@plt>
   12cf4:	mov	r5, r0
   12cf8:	movw	r0, #45944	; 0xb378
   12cfc:	movt	r0, #2
   12d00:	ldr	r1, [r0]
   12d04:	mov	r0, #4
   12d08:	bl	16dd4 <__assert_fail@plt+0x568c>
   12d0c:	b	12d48 <__assert_fail@plt+0x1600>
   12d10:	bl	115f8 <__errno_location@plt>
   12d14:	ldr	r4, [r0]
   12d18:	movw	r1, #39816	; 0x9b88
   12d1c:	movt	r1, #1
   12d20:	mov	r0, #0
   12d24:	mov	r2, #5
   12d28:	bl	1146c <dcgettext@plt>
   12d2c:	mov	r5, r0
   12d30:	movw	r0, #45944	; 0xb378
   12d34:	movt	r0, #2
   12d38:	ldr	r2, [r0]
   12d3c:	mov	r0, #0
   12d40:	mov	r1, #3
   12d44:	bl	16e88 <__assert_fail@plt+0x5740>
   12d48:	mov	r3, r0
   12d4c:	mov	r0, #1
   12d50:	mov	r1, r4
   12d54:	mov	r2, r5
   12d58:	bl	1152c <error@plt>
   12d5c:	movw	r1, #39293	; 0x997d
   12d60:	movt	r1, #1
   12d64:	mov	r0, #0
   12d68:	mov	r2, #5
   12d6c:	bl	1146c <dcgettext@plt>
   12d70:	mov	r4, r0
   12d74:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12d78:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12d7c:	add	r2, sp, #108	; 0x6c
   12d80:	bl	15734 <__assert_fail@plt+0x3fec>
   12d84:	bl	16fc8 <__assert_fail@plt+0x5880>
   12d88:	str	r0, [sp]
   12d8c:	movw	r2, #39701	; 0x9b15
   12d90:	movt	r2, #1
   12d94:	mov	r0, #1
   12d98:	mov	r1, #75	; 0x4b
   12d9c:	mov	r3, r4
   12da0:	bl	1152c <error@plt>
   12da4:	bx	lr
   12da8:	bx	lr
   12dac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12db0:	add	fp, sp, #24
   12db4:	sub	sp, sp, #24
   12db8:	mov	r6, r2
   12dbc:	mov	r5, r1
   12dc0:	mov	r8, r0
   12dc4:	mov	r7, #0
   12dc8:	movw	r1, #39293	; 0x997d
   12dcc:	movt	r1, #1
   12dd0:	mov	r0, #0
   12dd4:	mov	r2, #5
   12dd8:	bl	1146c <dcgettext@plt>
   12ddc:	movw	r4, #38525	; 0x967d
   12de0:	movt	r4, #1
   12de4:	mvn	r1, #0
   12de8:	str	r1, [sp]
   12dec:	stmib	sp, {r1, r4}
   12df0:	str	r0, [sp, #12]
   12df4:	str	r7, [sp, #16]
   12df8:	add	r0, r6, #1
   12dfc:	mov	r2, #1
   12e00:	mov	r3, #0
   12e04:	bl	18180 <__assert_fail@plt+0x6a38>
   12e08:	strd	r0, [r5]
   12e0c:	movw	r0, #45936	; 0xb370
   12e10:	movt	r0, #2
   12e14:	ldr	r1, [r0]
   12e18:	cmp	r1, r6
   12e1c:	beq	12e64 <__assert_fail@plt+0x171c>
   12e20:	strb	r7, [r6]
   12e24:	ldr	r6, [r0]
   12e28:	ldm	r5, {r5, r9}
   12e2c:	movw	r1, #40643	; 0x9ec3
   12e30:	movt	r1, #1
   12e34:	mov	r0, #0
   12e38:	mov	r2, #5
   12e3c:	bl	1146c <dcgettext@plt>
   12e40:	stm	sp, {r5, r9}
   12e44:	str	r4, [sp, #8]
   12e48:	str	r0, [sp, #12]
   12e4c:	str	r7, [sp, #16]
   12e50:	mov	r0, r6
   12e54:	mov	r2, #1
   12e58:	mov	r3, #0
   12e5c:	bl	18180 <__assert_fail@plt+0x6a38>
   12e60:	strd	r0, [r8]
   12e64:	sub	sp, fp, #24
   12e68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12e70:	add	fp, sp, #24
   12e74:	sub	sp, sp, #16
   12e78:	mov	r5, r1
   12e7c:	mov	r4, r0
   12e80:	movw	r0, #45964	; 0xb38c
   12e84:	movt	r0, #2
   12e88:	ldr	r0, [r0]
   12e8c:	cmp	r0, #0
   12e90:	movwne	r1, #46352	; 0xb510
   12e94:	movtne	r1, #2
   12e98:	movne	r3, #1
   12e9c:	strbne	r3, [r1]
   12ea0:	sub	r1, r2, #5
   12ea4:	mov	r7, #0
   12ea8:	cmp	r1, #2
   12eac:	mov	r6, #0
   12eb0:	bhi	12f98 <__assert_fail@plt+0x1850>
   12eb4:	subs	r6, r4, #1
   12eb8:	sbc	r7, r5, #0
   12ebc:	cmp	r0, #0
   12ec0:	beq	12eec <__assert_fail@plt+0x17a4>
   12ec4:	movw	r1, #38525	; 0x967d
   12ec8:	movt	r1, #1
   12ecc:	str	r1, [sp]
   12ed0:	mov	r8, #0
   12ed4:	add	r3, sp, #8
   12ed8:	mov	r1, #0
   12edc:	mov	r2, #10
   12ee0:	bl	18188 <__assert_fail@plt+0x6a40>
   12ee4:	cmp	r0, #0
   12ee8:	beq	12ef8 <__assert_fail@plt+0x17b0>
   12eec:	mov	r4, r6
   12ef0:	mov	r5, r7
   12ef4:	b	12f3c <__assert_fail@plt+0x17f4>
   12ef8:	ldr	r0, [sp, #8]
   12efc:	ldr	r1, [sp, #12]
   12f00:	subs	r2, r0, r4
   12f04:	sbcs	r2, r1, r5
   12f08:	mov	r2, #0
   12f0c:	movwcc	r2, #1
   12f10:	mvn	r3, r5
   12f14:	mvn	r5, r4
   12f18:	subs	r5, r5, r0
   12f1c:	sbcs	r3, r3, r1
   12f20:	movwcs	r8, #1
   12f24:	and	r2, r8, r2
   12f28:	adds	r4, r6, r0
   12f2c:	adc	r5, r7, r1
   12f30:	cmp	r2, #0
   12f34:	moveq	r5, r7
   12f38:	moveq	r4, r6
   12f3c:	movw	r0, #45404	; 0xb15c
   12f40:	movt	r0, #2
   12f44:	ldr	r0, [r0]
   12f48:	bl	115b0 <strlen@plt>
   12f4c:	mov	r8, r0
   12f50:	mov	r7, #0
   12f54:	mov	r6, #0
   12f58:	mov	r0, r4
   12f5c:	mov	r1, r5
   12f60:	mov	r2, r8
   12f64:	mov	r3, #0
   12f68:	bl	18f78 <__assert_fail@plt+0x7830>
   12f6c:	adds	r7, r7, #1
   12f70:	adc	r6, r6, #0
   12f74:	subs	r2, r4, r8
   12f78:	sbcs	r2, r5, #0
   12f7c:	mov	r4, r0
   12f80:	mov	r5, r1
   12f84:	bcs	12f58 <__assert_fail@plt+0x1810>
   12f88:	movw	r0, #46352	; 0xb510
   12f8c:	movt	r0, #2
   12f90:	mov	r1, #1
   12f94:	strb	r1, [r0]
   12f98:	movw	r0, #45952	; 0xb380
   12f9c:	movt	r0, #2
   12fa0:	ldr	r1, [r0]
   12fa4:	cmp	r1, #0
   12fa8:	beq	12ff8 <__assert_fail@plt+0x18b0>
   12fac:	subs	r0, r1, r7
   12fb0:	rscs	r0, r6, #0
   12fb4:	movwcs	r0, #46352	; 0xb510
   12fb8:	movtcs	r0, #2
   12fbc:	movcs	r1, #1
   12fc0:	strbcs	r1, [r0]
   12fc4:	subcs	sp, fp, #24
   12fc8:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   12fcc:	movw	r1, #40691	; 0x9ef3
   12fd0:	movt	r1, #1
   12fd4:	mov	r0, #0
   12fd8:	mov	r2, #5
   12fdc:	bl	1146c <dcgettext@plt>
   12fe0:	mov	r2, r0
   12fe4:	str	r7, [sp]
   12fe8:	str	r6, [sp, #4]
   12fec:	mov	r0, #1
   12ff0:	mov	r1, #0
   12ff4:	bl	1152c <error@plt>
   12ff8:	rsbs	r1, r7, #2
   12ffc:	rscs	r1, r6, #0
   13000:	movcs	r7, #2
   13004:	str	r7, [r0]
   13008:	sub	sp, fp, #24
   1300c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13010:	sub	sp, sp, #16
   13014:	stm	sp, {r0, r1, r2, r3}
   13018:	ldr	r1, [sp, #56]	; 0x38
   1301c:	cmp	r1, #131072	; 0x20000
   13020:	cmpge	r1, #1
   13024:	bge	13034 <__assert_fail@plt+0x18ec>
   13028:	mov	r0, #131072	; 0x20000
   1302c:	add	sp, sp, #16
   13030:	bx	lr
   13034:	cmp	r1, #536870912	; 0x20000000
   13038:	bhi	13028 <__assert_fail@plt+0x18e0>
   1303c:	mov	r2, #512	; 0x200
   13040:	cmp	r1, #536870913	; 0x20000001
   13044:	mov	r0, #512	; 0x200
   13048:	movcc	r0, r1
   1304c:	cmp	r1, #0
   13050:	movle	r0, r2
   13054:	add	sp, sp, #16
   13058:	bx	lr
   1305c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13060:	add	fp, sp, #28
   13064:	sub	sp, sp, #4
   13068:	mov	r4, r1
   1306c:	mov	r5, r0
   13070:	mov	r0, #1
   13074:	str	r0, [sp]
   13078:	mov	r6, #0
   1307c:	mov	r0, #0
   13080:	mov	r2, #0
   13084:	mov	r3, #0
   13088:	bl	114d8 <lseek64@plt>
   1308c:	cmp	r1, #0
   13090:	blt	131c0 <__assert_fail@plt+0x1a78>
   13094:	mov	r8, r0
   13098:	mov	r9, r1
   1309c:	mov	r7, #0
   130a0:	add	r1, r5, r6
   130a4:	sub	r2, r4, r6
   130a8:	mov	r0, #0
   130ac:	bl	173dc <__assert_fail@plt+0x5c94>
   130b0:	cmn	r0, #1
   130b4:	beq	131b8 <__assert_fail@plt+0x1a70>
   130b8:	cmp	r0, #0
   130bc:	beq	131ec <__assert_fail@plt+0x1aa4>
   130c0:	adds	r6, r6, r0
   130c4:	adc	r7, r7, #0
   130c8:	subs	r0, r6, r4
   130cc:	sbcs	r0, r7, #0
   130d0:	bcc	130a0 <__assert_fail@plt+0x1958>
   130d4:	movw	r0, #45984	; 0xb3a0
   130d8:	movt	r0, #2
   130dc:	ldr	sl, [r0, #48]	; 0x30
   130e0:	ldr	r5, [r0, #52]	; 0x34
   130e4:	orrs	r0, sl, r5
   130e8:	beq	131ac <__assert_fail@plt+0x1a64>
   130ec:	adds	r8, r6, r8
   130f0:	adc	r9, r7, r9
   130f4:	bl	147d4 <__assert_fail@plt+0x308c>
   130f8:	subs	r1, sl, r8
   130fc:	sbcs	r1, r5, r9
   13100:	blt	1310c <__assert_fail@plt+0x19c4>
   13104:	cmp	r0, #0
   13108:	bne	13188 <__assert_fail@plt+0x1a40>
   1310c:	mov	r0, #2
   13110:	str	r0, [sp]
   13114:	mov	r0, #0
   13118:	mov	r2, #0
   1311c:	mov	r3, #0
   13120:	bl	114d8 <lseek64@plt>
   13124:	mvn	r4, #0
   13128:	cmp	r1, #0
   1312c:	blt	131dc <__assert_fail@plt+0x1a94>
   13130:	mov	sl, r0
   13134:	mov	r5, r1
   13138:	eor	r0, r0, r8
   1313c:	eor	r1, r1, r9
   13140:	orrs	r0, r0, r1
   13144:	beq	13188 <__assert_fail@plt+0x1a40>
   13148:	mov	r0, #0
   1314c:	str	r0, [sp]
   13150:	mov	r0, #0
   13154:	mov	r2, r8
   13158:	mov	r3, r9
   1315c:	bl	114d8 <lseek64@plt>
   13160:	cmp	r1, #0
   13164:	mvn	r1, #0
   13168:	blt	131e0 <__assert_fail@plt+0x1a98>
   1316c:	subs	r0, sl, r8
   13170:	sbcs	r0, r5, r9
   13174:	mov	r0, #0
   13178:	movwlt	r0, #1
   1317c:	cmp	r0, #0
   13180:	movne	r5, r9
   13184:	movne	sl, r8
   13188:	subs	r0, sl, r8
   1318c:	sbc	r1, r5, r9
   13190:	adds	r4, r0, r6
   13194:	adc	r1, r1, r7
   13198:	mvn	r0, #-2147483648	; 0x80000000
   1319c:	eor	r0, r1, r0
   131a0:	mvn	r2, r4
   131a4:	orrs	r0, r2, r0
   131a8:	bne	131e0 <__assert_fail@plt+0x1a98>
   131ac:	bl	115f8 <__errno_location@plt>
   131b0:	mov	r1, #75	; 0x4b
   131b4:	str	r1, [r0]
   131b8:	mvn	r4, #0
   131bc:	b	131dc <__assert_fail@plt+0x1a94>
   131c0:	bl	115f8 <__errno_location@plt>
   131c4:	ldr	r1, [r0]
   131c8:	mvn	r4, #0
   131cc:	cmp	r1, #29
   131d0:	bne	131dc <__assert_fail@plt+0x1a94>
   131d4:	mov	r1, #0
   131d8:	str	r1, [r0]
   131dc:	mvn	r1, #0
   131e0:	mov	r0, r4
   131e4:	sub	sp, fp, #28
   131e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131ec:	mov	r4, r6
   131f0:	mov	r1, r7
   131f4:	b	131e0 <__assert_fail@plt+0x1a98>
   131f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131fc:	add	fp, sp, #28
   13200:	sub	sp, sp, #20
   13204:	str	r3, [sp, #8]
   13208:	mov	r4, r2
   1320c:	str	r1, [sp, #16]
   13210:	mov	r7, r0
   13214:	mov	r9, #0
   13218:	mov	sl, #1
   1321c:	mov	r8, #0
   13220:	str	r2, [sp, #4]
   13224:	b	1323c <__assert_fail@plt+0x1af4>
   13228:	ldr	r4, [sp, #4]
   1322c:	ldr	r0, [sp, #12]
   13230:	cmp	r0, #0
   13234:	subeq	sp, fp, #28
   13238:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1323c:	mov	r0, #0
   13240:	mov	r1, r4
   13244:	ldr	r2, [sp, #8]
   13248:	bl	173dc <__assert_fail@plt+0x5c94>
   1324c:	cmn	r0, #1
   13250:	beq	132f4 <__assert_fail@plt+0x1bac>
   13254:	mov	r2, r0
   13258:	movw	r0, #45400	; 0xb158
   1325c:	movt	r0, #2
   13260:	ldr	r1, [r0]
   13264:	mov	r6, r4
   13268:	str	r2, [sp, #12]
   1326c:	strb	r1, [r6, r2]!
   13270:	mov	r0, r4
   13274:	b	13288 <__assert_fail@plt+0x1b40>
   13278:	movw	r0, #45400	; 0xb158
   1327c:	movt	r0, #2
   13280:	ldr	r1, [r0]
   13284:	mov	r0, r5
   13288:	bl	1149c <rawmemchr@plt>
   1328c:	cmp	r0, r6
   13290:	beq	132d4 <__assert_fail@plt+0x1b8c>
   13294:	adds	r9, r9, #1
   13298:	adc	r8, r8, #0
   1329c:	add	r5, r0, #1
   132a0:	subs	r0, r9, r7
   132a4:	ldr	r0, [sp, #16]
   132a8:	sbcs	r0, r8, r0
   132ac:	bcc	13278 <__assert_fail@plt+0x1b30>
   132b0:	sub	r2, r5, r4
   132b4:	and	r0, sl, #1
   132b8:	mov	r1, r4
   132bc:	bl	147f8 <__assert_fail@plt+0x30b0>
   132c0:	mov	r9, #0
   132c4:	mov	sl, #1
   132c8:	mov	r4, r5
   132cc:	mov	r8, #0
   132d0:	b	13278 <__assert_fail@plt+0x1b30>
   132d4:	cmp	r6, r4
   132d8:	beq	13228 <__assert_fail@plt+0x1ae0>
   132dc:	sub	r2, r6, r4
   132e0:	and	r0, sl, #1
   132e4:	mov	r1, r4
   132e8:	bl	147f8 <__assert_fail@plt+0x30b0>
   132ec:	mov	sl, #0
   132f0:	b	13228 <__assert_fail@plt+0x1ae0>
   132f4:	bl	115f8 <__errno_location@plt>
   132f8:	ldr	r4, [r0]
   132fc:	movw	r0, #45944	; 0xb378
   13300:	movt	r0, #2
   13304:	ldr	r2, [r0]
   13308:	mov	r0, #0
   1330c:	mov	r1, #3
   13310:	bl	16e88 <__assert_fail@plt+0x5740>
   13314:	mov	r3, r0
   13318:	movw	r2, #41482	; 0xa20a
   1331c:	movt	r2, #1
   13320:	mov	r0, #1
   13324:	mov	r1, r4
   13328:	bl	1152c <error@plt>
   1332c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13330:	add	fp, sp, #28
   13334:	sub	sp, sp, #36	; 0x24
   13338:	str	r3, [sp, #4]
   1333c:	str	r2, [sp, #12]
   13340:	mov	r9, r1
   13344:	mov	r7, r0
   13348:	ldr	r0, [fp, #20]
   1334c:	ldr	r2, [fp, #16]
   13350:	subs	r2, r2, #1
   13354:	str	r2, [sp, #24]
   13358:	sbc	r0, r0, #0
   1335c:	str	r0, [sp, #20]
   13360:	mov	r8, #0
   13364:	ldr	r6, [fp, #8]
   13368:	mov	r4, #1
   1336c:	mov	r5, #1
   13370:	str	r7, [sp, #28]
   13374:	str	r1, [sp, #32]
   13378:	mov	sl, #0
   1337c:	cmn	r6, #1
   13380:	beq	13398 <__assert_fail@plt+0x1c50>
   13384:	ldr	r0, [sp, #4]
   13388:	cmp	r6, r0
   1338c:	mov	r0, #0
   13390:	movwcc	r0, #1
   13394:	b	13400 <__assert_fail@plt+0x1cb8>
   13398:	tst	r5, #1
   1339c:	bne	133dc <__assert_fail@plt+0x1c94>
   133a0:	mov	r0, #1
   133a4:	str	r0, [sp]
   133a8:	mov	r0, #0
   133ac:	mov	r2, r7
   133b0:	mov	r3, r9
   133b4:	bl	114d8 <lseek64@plt>
   133b8:	and	r0, r0, r1
   133bc:	add	r1, r0, #1
   133c0:	cmn	r0, #1
   133c4:	movwne	r1, #1
   133c8:	orr	r4, r4, r1
   133cc:	ldr	r0, [sp, #32]
   133d0:	movne	r9, r0
   133d4:	ldr	r0, [sp, #28]
   133d8:	movne	r7, r0
   133dc:	mov	r0, #0
   133e0:	ldr	r1, [sp, #12]
   133e4:	ldr	r2, [sp, #4]
   133e8:	bl	173dc <__assert_fail@plt+0x5c94>
   133ec:	cmn	r0, #1
   133f0:	beq	13550 <__assert_fail@plt+0x1e08>
   133f4:	mov	r6, r0
   133f8:	clz	r0, r0
   133fc:	lsr	r0, r0, #5
   13400:	str	r0, [sp, #16]
   13404:	subs	r0, r6, r7
   13408:	rscs	r0, r9, #0
   1340c:	bcs	1347c <__assert_fail@plt+0x1d34>
   13410:	str	r9, [sp, #8]
   13414:	ldr	r9, [sp, #12]
   13418:	cmp	r6, #0
   1341c:	beq	13500 <__assert_fail@plt+0x1db8>
   13420:	orr	r0, r4, r5
   13424:	tst	r0, #1
   13428:	beq	13440 <__assert_fail@plt+0x1cf8>
   1342c:	and	r0, r4, #1
   13430:	mov	r1, r9
   13434:	mov	r2, r6
   13438:	bl	147f8 <__assert_fail@plt+0x30b0>
   1343c:	mov	r5, r0
   13440:	and	r0, r4, #1
   13444:	adds	r8, r8, r0
   13448:	ldr	r0, [fp, #16]
   1344c:	eor	r0, r8, r0
   13450:	adc	sl, sl, #0
   13454:	ldr	r1, [fp, #20]
   13458:	eor	r1, sl, r1
   1345c:	orrs	r0, r0, r1
   13460:	tsteq	r5, #1
   13464:	beq	13514 <__assert_fail@plt+0x1dcc>
   13468:	subs	r7, r7, r6
   1346c:	ldr	r9, [sp, #8]
   13470:	sbc	r9, r9, #0
   13474:	mov	r4, #0
   13478:	b	13504 <__assert_fail@plt+0x1dbc>
   1347c:	ldr	r9, [sp, #12]
   13480:	tst	r4, #1
   13484:	tsteq	r5, #1
   13488:	beq	134a0 <__assert_fail@plt+0x1d58>
   1348c:	and	r0, r4, #1
   13490:	mov	r1, r9
   13494:	mov	r2, r7
   13498:	bl	147f8 <__assert_fail@plt+0x30b0>
   1349c:	mov	r5, r0
   134a0:	and	r0, r4, #1
   134a4:	adds	r8, r8, r0
   134a8:	adc	sl, sl, #0
   134ac:	ldr	r0, [sp, #24]
   134b0:	subs	r0, r0, r8
   134b4:	ldr	r0, [sp, #20]
   134b8:	sbcs	r0, r0, sl
   134bc:	mov	r4, #0
   134c0:	movwcs	r4, #1
   134c4:	cmp	r4, #0
   134c8:	tsteq	r5, #1
   134cc:	beq	13514 <__assert_fail@plt+0x1dcc>
   134d0:	add	r9, r9, r7
   134d4:	sub	r6, r6, r7
   134d8:	ldr	r7, [sp, #28]
   134dc:	subs	r0, r6, r7
   134e0:	ldr	r0, [sp, #32]
   134e4:	rscs	r0, r0, #0
   134e8:	bcs	13480 <__assert_fail@plt+0x1d38>
   134ec:	ldr	r7, [sp, #28]
   134f0:	ldr	r0, [sp, #32]
   134f4:	str	r0, [sp, #8]
   134f8:	cmp	r6, #0
   134fc:	bne	13420 <__assert_fail@plt+0x1cd8>
   13500:	ldr	r9, [sp, #8]
   13504:	mvn	r6, #0
   13508:	ldr	r0, [sp, #16]
   1350c:	cmp	r0, #0
   13510:	beq	1337c <__assert_fail@plt+0x1c34>
   13514:	ldr	r5, [fp, #16]
   13518:	subs	r0, r8, r5
   1351c:	ldr	r4, [fp, #20]
   13520:	b	13540 <__assert_fail@plt+0x1df8>
   13524:	mov	r0, #1
   13528:	mov	r1, #0
   1352c:	mov	r2, #0
   13530:	bl	147f8 <__assert_fail@plt+0x30b0>
   13534:	adds	r8, r8, #1
   13538:	adc	sl, sl, #0
   1353c:	subs	r0, r8, r5
   13540:	sbcs	r0, sl, r4
   13544:	subcs	sp, fp, #28
   13548:	popcs	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1354c:	b	13524 <__assert_fail@plt+0x1ddc>
   13550:	bl	115f8 <__errno_location@plt>
   13554:	ldr	r4, [r0]
   13558:	movw	r0, #45944	; 0xb378
   1355c:	movt	r0, #2
   13560:	ldr	r2, [r0]
   13564:	mov	r0, #0
   13568:	mov	r1, #3
   1356c:	bl	16e88 <__assert_fail@plt+0x5740>
   13570:	mov	r3, r0
   13574:	movw	r2, #41482	; 0xa20a
   13578:	movt	r2, #1
   1357c:	mov	r0, #1
   13580:	mov	r1, r4
   13584:	bl	1152c <error@plt>
   13588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1358c:	add	fp, sp, #28
   13590:	sub	sp, sp, #60	; 0x3c
   13594:	mov	r8, r2
   13598:	str	r1, [sp, #24]
   1359c:	str	r0, [sp, #20]
   135a0:	mvn	r0, r3
   135a4:	str	r0, [sp, #12]
   135a8:	mov	sl, #0
   135ac:	mov	r7, #0
   135b0:	mov	r0, #0
   135b4:	str	r0, [sp, #32]
   135b8:	mov	r9, #0
   135bc:	mov	r4, #0
   135c0:	mov	r5, #0
   135c4:	str	r3, [sp, #16]
   135c8:	mov	r0, #0
   135cc:	mov	r1, r8
   135d0:	mov	r2, r3
   135d4:	bl	173dc <__assert_fail@plt+0x5c94>
   135d8:	cmp	r0, #0
   135dc:	beq	138c4 <__assert_fail@plt+0x217c>
   135e0:	cmn	r0, #1
   135e4:	str	r8, [sp, #8]
   135e8:	str	r8, [fp, #-32]	; 0xffffffe0
   135ec:	str	r0, [sp, #4]
   135f0:	mov	r6, r0
   135f4:	beq	13900 <__assert_fail@plt+0x21b8>
   135f8:	str	r7, [sp, #28]
   135fc:	str	sl, [sp, #44]	; 0x2c
   13600:	ldr	r0, [sp, #20]
   13604:	subs	r0, r0, r4
   13608:	ldr	r1, [sp, #24]
   1360c:	sbc	r1, r1, r5
   13610:	mov	r7, r9
   13614:	subs	sl, r0, r9
   13618:	sbc	r1, r1, #0
   1361c:	subs	r0, r6, sl
   13620:	str	r1, [sp, #36]	; 0x24
   13624:	rscs	r0, r1, #0
   13628:	mov	r0, #0
   1362c:	movwcc	r0, #1
   13630:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13634:	add	r1, r3, sl
   13638:	sub	r8, r1, #1
   1363c:	cmp	r0, #0
   13640:	movwne	r8, #0
   13644:	mov	r9, sl
   13648:	movwne	r9, #0
   1364c:	mov	r2, sl
   13650:	str	r6, [sp, #40]	; 0x28
   13654:	movne	r2, r6
   13658:	movw	r0, #45400	; 0xb158
   1365c:	movt	r0, #2
   13660:	ldr	r1, [r0]
   13664:	mov	r0, r3
   13668:	bl	115e0 <memrchr@plt>
   1366c:	mov	r6, r0
   13670:	str	r7, [fp, #-36]	; 0xffffffdc
   13674:	cmp	r7, #0
   13678:	beq	136d4 <__assert_fail@plt+0x1f8c>
   1367c:	orrs	r0, r4, r5
   13680:	beq	1368c <__assert_fail@plt+0x1f44>
   13684:	cmp	r6, #0
   13688:	beq	13744 <__assert_fail@plt+0x1ffc>
   1368c:	clz	r0, r0
   13690:	lsr	r0, r0, #5
   13694:	ldr	r1, [sp, #32]
   13698:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1369c:	mov	r2, r7
   136a0:	bl	147f8 <__assert_fail@plt+0x30b0>
   136a4:	adds	r4, r4, r7
   136a8:	str	r4, [fp, #-40]	; 0xffffffd8
   136ac:	adc	r5, r5, #0
   136b0:	ldr	r4, [sp, #16]
   136b4:	cmp	r7, r4
   136b8:	bls	136cc <__assert_fail@plt+0x1f84>
   136bc:	ldr	r0, [sp, #32]
   136c0:	mov	r1, r4
   136c4:	bl	17cd4 <__assert_fail@plt+0x658c>
   136c8:	str	r0, [sp, #32]
   136cc:	str	r4, [sp, #44]	; 0x2c
   136d0:	ldr	r4, [fp, #-40]	; 0xffffffd8
   136d4:	cmp	r6, #0
   136d8:	beq	1373c <__assert_fail@plt+0x1ff4>
   136dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   136e0:	sub	r0, r6, r1
   136e4:	add	r7, r0, #1
   136e8:	orr	r0, r4, r5
   136ec:	clz	r0, r0
   136f0:	lsr	r0, r0, #5
   136f4:	mov	r2, r7
   136f8:	bl	147f8 <__assert_fail@plt+0x30b0>
   136fc:	ldr	r1, [sp, #40]	; 0x28
   13700:	subs	r0, r1, sl
   13704:	ldr	r2, [sp, #36]	; 0x24
   13708:	rscs	r0, r2, #0
   1370c:	subcs	r9, r9, r7
   13710:	mov	r0, r4
   13714:	sub	r4, r1, r7
   13718:	adds	r0, r0, r7
   1371c:	str	r0, [fp, #-40]	; 0xffffffd8
   13720:	adc	r5, r5, #0
   13724:	add	r0, r6, #1
   13728:	str	r0, [fp, #-32]	; 0xffffffe0
   1372c:	mov	r0, #0
   13730:	str	r0, [fp, #-36]	; 0xffffffdc
   13734:	mov	r7, #1
   13738:	b	137bc <__assert_fail@plt+0x2074>
   1373c:	mov	r0, #0
   13740:	str	r0, [fp, #-36]	; 0xffffffdc
   13744:	mov	r7, #1
   13748:	ldr	r0, [sp, #28]
   1374c:	tst	r0, #1
   13750:	ldr	r1, [sp, #40]	; 0x28
   13754:	beq	13764 <__assert_fail@plt+0x201c>
   13758:	str	r4, [fp, #-40]	; 0xffffffd8
   1375c:	mov	r4, r1
   13760:	b	137b8 <__assert_fail@plt+0x2070>
   13764:	cmp	r8, #0
   13768:	mov	r6, r1
   1376c:	movne	r6, r9
   13770:	orr	r0, r4, r5
   13774:	clz	r0, r0
   13778:	lsr	r0, r0, #5
   1377c:	ldr	r7, [fp, #-32]	; 0xffffffe0
   13780:	mov	r1, r7
   13784:	mov	r2, r6
   13788:	bl	147f8 <__assert_fail@plt+0x30b0>
   1378c:	ldr	r1, [sp, #40]	; 0x28
   13790:	add	r7, r7, r6
   13794:	str	r7, [fp, #-32]	; 0xffffffe0
   13798:	mov	r0, r4
   1379c:	sub	r4, r1, r6
   137a0:	adds	r0, r0, r6
   137a4:	str	r0, [fp, #-40]	; 0xffffffd8
   137a8:	adc	r5, r5, #0
   137ac:	cmp	r8, #0
   137b0:	movwne	r9, #0
   137b4:	mov	r7, #0
   137b8:	ldr	r2, [sp, #36]	; 0x24
   137bc:	subs	r0, r1, sl
   137c0:	rscs	r0, r2, #0
   137c4:	mov	r0, #0
   137c8:	movwcc	r0, #1
   137cc:	cmp	r4, #0
   137d0:	mov	r1, r4
   137d4:	movwne	r1, #1
   137d8:	cmp	r9, #0
   137dc:	mov	r2, r9
   137e0:	movwne	r2, #1
   137e4:	cmp	r8, #0
   137e8:	mov	r3, r8
   137ec:	movwne	r3, #1
   137f0:	tst	r3, r2
   137f4:	andseq	r0, r0, r1
   137f8:	beq	13844 <__assert_fail@plt+0x20fc>
   137fc:	cmp	r8, #0
   13800:	moveq	r9, r4
   13804:	ldr	sl, [sp, #44]	; 0x2c
   13808:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1380c:	mov	r6, r0
   13810:	sub	r0, sl, r0
   13814:	cmp	r0, r9
   13818:	str	r7, [sp, #40]	; 0x28
   1381c:	bcs	13854 <__assert_fail@plt+0x210c>
   13820:	ldr	r0, [sp, #12]
   13824:	cmp	sl, r0
   13828:	ldr	r0, [sp, #32]
   1382c:	bhi	138fc <__assert_fail@plt+0x21b4>
   13830:	ldr	r1, [sp, #16]
   13834:	add	sl, sl, r1
   13838:	mov	r1, sl
   1383c:	bl	17cd4 <__assert_fail@plt+0x658c>
   13840:	b	13858 <__assert_fail@plt+0x2110>
   13844:	mov	r6, r4
   13848:	ldr	sl, [sp, #44]	; 0x2c
   1384c:	ldr	r9, [fp, #-36]	; 0xffffffdc
   13850:	b	1388c <__assert_fail@plt+0x2144>
   13854:	ldr	r0, [sp, #32]
   13858:	str	r0, [sp, #32]
   1385c:	mov	r7, r6
   13860:	add	r0, r0, r6
   13864:	ldr	r6, [fp, #-32]	; 0xffffffe0
   13868:	mov	r1, r6
   1386c:	mov	r2, r9
   13870:	bl	11430 <memcpy@plt>
   13874:	add	r6, r6, r9
   13878:	str	r6, [fp, #-32]	; 0xffffffe0
   1387c:	sub	r6, r4, r9
   13880:	add	r7, r9, r7
   13884:	mov	r9, r7
   13888:	ldr	r7, [sp, #40]	; 0x28
   1388c:	cmp	r8, #0
   13890:	ldr	r4, [fp, #-40]	; 0xffffffd8
   13894:	movwne	r4, #0
   13898:	movwne	r5, #0
   1389c:	clz	r0, r8
   138a0:	lsr	r0, r0, #5
   138a4:	and	r7, r7, r0
   138a8:	cmp	r6, #0
   138ac:	bne	135f8 <__assert_fail@plt+0x1eb0>
   138b0:	ldr	r0, [sp, #4]
   138b4:	cmp	r0, #0
   138b8:	ldr	r3, [sp, #16]
   138bc:	ldr	r8, [sp, #8]
   138c0:	bne	135c8 <__assert_fail@plt+0x1e80>
   138c4:	mov	r0, r4
   138c8:	cmp	r9, #0
   138cc:	ldr	r4, [sp, #32]
   138d0:	beq	138ec <__assert_fail@plt+0x21a4>
   138d4:	orr	r0, r0, r5
   138d8:	clz	r0, r0
   138dc:	lsr	r0, r0, #5
   138e0:	mov	r1, r4
   138e4:	mov	r2, r9
   138e8:	bl	147f8 <__assert_fail@plt+0x30b0>
   138ec:	mov	r0, r4
   138f0:	sub	sp, fp, #28
   138f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138f8:	b	155f4 <__assert_fail@plt+0x3eac>
   138fc:	bl	18044 <__assert_fail@plt+0x68fc>
   13900:	bl	115f8 <__errno_location@plt>
   13904:	ldr	r4, [r0]
   13908:	movw	r0, #45944	; 0xb378
   1390c:	movt	r0, #2
   13910:	ldr	r2, [r0]
   13914:	mov	r0, #0
   13918:	mov	r1, #3
   1391c:	bl	16e88 <__assert_fail@plt+0x5740>
   13920:	mov	r3, r0
   13924:	movw	r2, #41482	; 0xa20a
   13928:	movt	r2, #1
   1392c:	mov	r0, #1
   13930:	mov	r1, r4
   13934:	bl	1152c <error@plt>
   13938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1393c:	add	fp, sp, #28
   13940:	sub	sp, sp, #4
   13944:	mov	sl, r1
   13948:	mov	r7, r0
   1394c:	subs	r0, r0, #1
   13950:	sbc	r1, r1, #0
   13954:	subs	r0, r0, r2
   13958:	sbcs	r0, r1, r3
   1395c:	bcs	13b0c <__assert_fail@plt+0x23c4>
   13960:	mov	r5, r3
   13964:	mov	r6, r2
   13968:	ldr	r4, [fp, #28]
   1396c:	ldr	r0, [fp, #24]
   13970:	subs	r1, r0, r2
   13974:	sbcs	r1, r4, r3
   13978:	bcc	13b0c <__assert_fail@plt+0x23c4>
   1397c:	ldr	r8, [fp, #8]
   13980:	mov	r1, r4
   13984:	mov	r2, r6
   13988:	mov	r3, r5
   1398c:	bl	18f78 <__assert_fail@plt+0x7830>
   13990:	umull	r9, r2, r0, r7
   13994:	mla	r2, r0, sl, r2
   13998:	eor	r3, r7, r6
   1399c:	eor	r6, sl, r5
   139a0:	orrs	r3, r3, r6
   139a4:	mlane	r4, r1, r7, r2
   139a8:	subs	r2, r7, #1
   139ac:	sbc	r7, sl, #0
   139b0:	umull	r6, r5, r0, r2
   139b4:	mla	r0, r0, r7, r5
   139b8:	mla	sl, r1, r2, r0
   139bc:	ldr	r2, [fp, #16]
   139c0:	cmp	r3, #0
   139c4:	ldr	r0, [fp, #24]
   139c8:	moveq	r9, r0
   139cc:	subs	r0, r6, r2
   139d0:	sbcs	r0, sl, #0
   139d4:	bge	139f0 <__assert_fail@plt+0x22a8>
   139d8:	add	r1, r8, r6
   139dc:	sub	r7, r2, r6
   139e0:	mov	r0, r8
   139e4:	mov	r2, r7
   139e8:	bl	1140c <memmove@plt>
   139ec:	b	13a24 <__assert_fail@plt+0x22dc>
   139f0:	mov	r0, #1
   139f4:	str	r0, [sp]
   139f8:	subs	r2, r6, r2
   139fc:	sbc	r3, sl, #0
   13a00:	mov	r0, #0
   13a04:	bl	114d8 <lseek64@plt>
   13a08:	mvn	r7, #0
   13a0c:	cmn	r1, #1
   13a10:	bgt	13a24 <__assert_fail@plt+0x22dc>
   13a14:	b	13ad4 <__assert_fail@plt+0x238c>
   13a18:	adds	r6, r6, r5
   13a1c:	adc	sl, sl, #0
   13a20:	mvn	r7, #0
   13a24:	subs	r0, r6, r9
   13a28:	sbcs	r0, sl, r4
   13a2c:	bge	13acc <__assert_fail@plt+0x2384>
   13a30:	cmn	r7, #1
   13a34:	bne	13a54 <__assert_fail@plt+0x230c>
   13a38:	mov	r0, #0
   13a3c:	mov	r1, r8
   13a40:	ldr	r2, [fp, #12]
   13a44:	bl	173dc <__assert_fail@plt+0x5c94>
   13a48:	mov	r7, r0
   13a4c:	cmn	r0, #1
   13a50:	beq	13ad4 <__assert_fail@plt+0x238c>
   13a54:	cmp	r7, #0
   13a58:	beq	13acc <__assert_fail@plt+0x2384>
   13a5c:	subs	r5, r9, r6
   13a60:	sbc	r0, r4, sl
   13a64:	subs	r1, r7, r5
   13a68:	rscs	r0, r0, #0
   13a6c:	movlt	r5, r7
   13a70:	mov	r0, #1
   13a74:	mov	r1, r8
   13a78:	mov	r2, r5
   13a7c:	bl	156c0 <__assert_fail@plt+0x3f78>
   13a80:	cmp	r0, r5
   13a84:	beq	13a18 <__assert_fail@plt+0x22d0>
   13a88:	bl	115f8 <__errno_location@plt>
   13a8c:	ldr	r7, [r0]
   13a90:	mov	r0, r7
   13a94:	bl	1510c <__assert_fail@plt+0x39c4>
   13a98:	cmp	r0, #0
   13a9c:	bne	13a18 <__assert_fail@plt+0x22d0>
   13aa0:	movw	r2, #41945	; 0xa3d9
   13aa4:	movt	r2, #1
   13aa8:	mov	r0, #0
   13aac:	mov	r1, #3
   13ab0:	bl	16e88 <__assert_fail@plt+0x5740>
   13ab4:	mov	r3, r0
   13ab8:	movw	r2, #41482	; 0xa20a
   13abc:	movt	r2, #1
   13ac0:	mov	r0, #1
   13ac4:	mov	r1, r7
   13ac8:	bl	1152c <error@plt>
   13acc:	sub	sp, fp, #28
   13ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ad4:	bl	115f8 <__errno_location@plt>
   13ad8:	ldr	r4, [r0]
   13adc:	movw	r0, #45944	; 0xb378
   13ae0:	movt	r0, #2
   13ae4:	ldr	r2, [r0]
   13ae8:	mov	r0, #0
   13aec:	mov	r1, #3
   13af0:	bl	16e88 <__assert_fail@plt+0x5740>
   13af4:	mov	r3, r0
   13af8:	movw	r2, #41482	; 0xa20a
   13afc:	movt	r2, #1
   13b00:	mov	r0, #1
   13b04:	mov	r1, r4
   13b08:	bl	1152c <error@plt>
   13b0c:	movw	r0, #41173	; 0xa0d5
   13b10:	movt	r0, #1
   13b14:	movw	r1, #40743	; 0x9f27
   13b18:	movt	r1, #1
   13b1c:	movw	r3, #41208	; 0xa0f8
   13b20:	movt	r3, #1
   13b24:	mov	r2, #996	; 0x3e4
   13b28:	bl	11748 <__assert_fail@plt>
   13b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b30:	add	fp, sp, #28
   13b34:	sub	sp, sp, #84	; 0x54
   13b38:	subs	r6, r2, #1
   13b3c:	sbc	r7, r3, #0
   13b40:	str	r2, [fp, #-44]	; 0xffffffd4
   13b44:	str	r0, [sp, #44]	; 0x2c
   13b48:	subs	r2, r2, r0
   13b4c:	str	r1, [sp, #48]	; 0x30
   13b50:	sbcs	r2, r3, r1
   13b54:	bcc	14048 <__assert_fail@plt+0x2900>
   13b58:	ldr	r9, [fp, #28]
   13b5c:	ldr	r4, [fp, #24]
   13b60:	subs	r0, r6, r4
   13b64:	sbcs	r0, r7, r9
   13b68:	bcs	14048 <__assert_fail@plt+0x2900>
   13b6c:	ldr	r6, [fp, #16]
   13b70:	mov	r0, r4
   13b74:	mov	r1, r9
   13b78:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13b7c:	str	r3, [sp, #56]	; 0x38
   13b80:	bl	18f78 <__assert_fail@plt+0x7830>
   13b84:	subs	r2, r0, #1
   13b88:	str	r2, [sp, #28]
   13b8c:	sbc	r8, r1, #0
   13b90:	mov	ip, #0
   13b94:	ldr	r7, [sp, #44]	; 0x2c
   13b98:	subs	r2, r7, #2
   13b9c:	ldr	r2, [sp, #48]	; 0x30
   13ba0:	sbcs	r3, r2, #0
   13ba4:	str	r0, [sp, #52]	; 0x34
   13ba8:	str	r1, [sp, #32]
   13bac:	bcc	13c10 <__assert_fail@plt+0x24c8>
   13bb0:	subs	r3, r7, #1
   13bb4:	umull	r5, r7, r0, r3
   13bb8:	sbc	r2, r2, #0
   13bbc:	str	r2, [fp, #-32]	; 0xffffffe0
   13bc0:	mla	r0, r0, r2, r7
   13bc4:	str	r3, [sp, #24]
   13bc8:	mla	r1, r1, r3, r0
   13bcc:	subs	sl, r5, #1
   13bd0:	sbc	r5, r1, #0
   13bd4:	subs	r0, sl, r6
   13bd8:	sbcs	r0, r5, #0
   13bdc:	bge	13c28 <__assert_fail@plt+0x24e0>
   13be0:	ldr	r0, [fp, #8]
   13be4:	add	r1, r0, sl
   13be8:	sub	r6, r6, sl
   13bec:	mov	r2, r6
   13bf0:	bl	1140c <memmove@plt>
   13bf4:	str	sl, [sp, #28]
   13bf8:	mov	r8, r5
   13bfc:	ldr	r2, [sp, #48]	; 0x30
   13c00:	ldr	r7, [sp, #44]	; 0x2c
   13c04:	ldr	r3, [sp, #24]
   13c08:	mov	ip, #0
   13c0c:	b	13c64 <__assert_fail@plt+0x251c>
   13c10:	mov	r3, #1
   13c14:	mov	sl, #0
   13c18:	mov	r5, #0
   13c1c:	mov	r0, #0
   13c20:	str	r0, [fp, #-32]	; 0xffffffe0
   13c24:	b	13c64 <__assert_fail@plt+0x251c>
   13c28:	mov	r0, #1
   13c2c:	str	r0, [sp]
   13c30:	subs	r2, sl, r6
   13c34:	sbc	r3, r5, #0
   13c38:	mov	r0, #0
   13c3c:	bl	114d8 <lseek64@plt>
   13c40:	mvn	r6, #0
   13c44:	cmn	r1, #1
   13c48:	str	sl, [sp, #28]
   13c4c:	mov	r8, r5
   13c50:	ldr	r2, [sp, #48]	; 0x30
   13c54:	ldr	r7, [sp, #44]	; 0x2c
   13c58:	ldr	r3, [sp, #24]
   13c5c:	mov	ip, #0
   13c60:	ble	14088 <__assert_fail@plt+0x2940>
   13c64:	str	sl, [fp, #-40]	; 0xffffffd8
   13c68:	subs	r0, sl, r4
   13c6c:	sbcs	r0, r5, r9
   13c70:	bge	13ff4 <__assert_fail@plt+0x28ac>
   13c74:	subs	r0, r4, #1
   13c78:	str	r0, [sp, #40]	; 0x28
   13c7c:	sbc	r0, r9, #0
   13c80:	str	r0, [sp, #36]	; 0x24
   13c84:	mov	ip, #0
   13c88:	mov	lr, #1
   13c8c:	mov	sl, #0
   13c90:	cmn	r6, #1
   13c94:	bne	13cdc <__assert_fail@plt+0x2594>
   13c98:	mov	r0, #0
   13c9c:	ldr	r1, [fp, #8]
   13ca0:	ldr	r2, [fp, #12]
   13ca4:	mov	r6, r3
   13ca8:	mov	r7, r5
   13cac:	str	lr, [sp, #12]
   13cb0:	mov	r5, ip
   13cb4:	bl	173dc <__assert_fail@plt+0x5c94>
   13cb8:	mov	ip, r5
   13cbc:	ldr	lr, [sp, #12]
   13cc0:	mov	r5, r7
   13cc4:	mov	r3, r6
   13cc8:	ldr	r7, [sp, #44]	; 0x2c
   13ccc:	ldr	r2, [sp, #48]	; 0x30
   13cd0:	mov	r6, r0
   13cd4:	cmn	r0, #1
   13cd8:	beq	14088 <__assert_fail@plt+0x2940>
   13cdc:	cmp	r6, #0
   13ce0:	beq	13ff8 <__assert_fail@plt+0x28b0>
   13ce4:	str	r3, [sp, #24]
   13ce8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13cec:	subs	r3, r4, r2
   13cf0:	sbc	r0, r9, r5
   13cf4:	subs	r1, r6, r3
   13cf8:	rscs	r0, r0, #0
   13cfc:	movlt	r3, r6
   13d00:	cmp	r3, #0
   13d04:	beq	13fac <__assert_fail@plt+0x2864>
   13d08:	ldr	sl, [fp, #8]
   13d0c:	add	r4, sl, r3
   13d10:	mov	r0, #0
   13d14:	str	r0, [sp, #8]
   13d18:	mov	r9, sl
   13d1c:	ldr	r6, [sp, #28]
   13d20:	str	r4, [fp, #-52]	; 0xffffffcc
   13d24:	str	lr, [fp, #-36]	; 0xffffffdc
   13d28:	mov	r7, r9
   13d2c:	mov	sl, r2
   13d30:	str	r6, [sp, #28]
   13d34:	subs	r0, r6, r2
   13d38:	mov	r9, r5
   13d3c:	sbc	r1, r8, r5
   13d40:	rsbs	r2, r0, #0
   13d44:	rscs	r2, r1, #0
   13d48:	mov	r2, #0
   13d4c:	movwlt	r2, #1
   13d50:	cmp	r2, #0
   13d54:	moveq	r1, r2
   13d58:	movne	r2, r0
   13d5c:	subs	r0, r3, r2
   13d60:	rscs	r0, r1, #0
   13d64:	movlt	r2, r3
   13d68:	add	r0, r7, r2
   13d6c:	str	r3, [sp, #20]
   13d70:	sub	r2, r3, r2
   13d74:	movw	r1, #45400	; 0xb158
   13d78:	movt	r1, #2
   13d7c:	ldr	r1, [r1]
   13d80:	bl	11664 <memchr@plt>
   13d84:	mov	lr, r0
   13d88:	cmp	r0, #0
   13d8c:	addne	r4, r0, #1
   13d90:	str	r4, [fp, #-48]	; 0xffffffd0
   13d94:	sub	r6, r4, r7
   13d98:	movwne	lr, #1
   13d9c:	ldr	ip, [sp, #44]	; 0x2c
   13da0:	ldr	r4, [sp, #24]
   13da4:	eor	r0, r4, ip
   13da8:	ldr	r3, [sp, #48]	; 0x30
   13dac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13db0:	eor	r1, r2, r3
   13db4:	orrs	r0, r0, r1
   13db8:	bne	13df0 <__assert_fail@plt+0x26a8>
   13dbc:	mov	r0, #1
   13dc0:	mov	r1, r7
   13dc4:	mov	r2, r6
   13dc8:	mov	r4, lr
   13dcc:	bl	156c0 <__assert_fail@plt+0x3f78>
   13dd0:	mov	lr, r4
   13dd4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13dd8:	ldr	r4, [sp, #24]
   13ddc:	ldr	ip, [sp, #44]	; 0x2c
   13de0:	ldr	r3, [sp, #48]	; 0x30
   13de4:	cmp	r0, r6
   13de8:	beq	13e24 <__assert_fail@plt+0x26dc>
   13dec:	b	14068 <__assert_fail@plt+0x2920>
   13df0:	orrs	r0, ip, r3
   13df4:	bne	13e24 <__assert_fail@plt+0x26dc>
   13df8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13dfc:	and	r0, r0, #1
   13e00:	mov	r1, r7
   13e04:	mov	r2, r6
   13e08:	mov	r4, lr
   13e0c:	bl	147f8 <__assert_fail@plt+0x30b0>
   13e10:	mov	lr, r4
   13e14:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13e18:	ldr	r4, [sp, #24]
   13e1c:	ldr	ip, [sp, #44]	; 0x2c
   13e20:	ldr	r3, [sp, #48]	; 0x30
   13e24:	mov	r0, sl
   13e28:	str	r6, [sp, #16]
   13e2c:	adds	r0, sl, r6
   13e30:	mov	r5, r9
   13e34:	adc	r5, r9, #0
   13e38:	str	r0, [fp, #-40]	; 0xffffffd8
   13e3c:	ldr	r6, [sp, #28]
   13e40:	subs	r0, r6, r0
   13e44:	sbcs	r0, r8, r5
   13e48:	mov	r0, #0
   13e4c:	movwge	r0, #1
   13e50:	eor	r1, lr, #1
   13e54:	tst	r0, r1
   13e58:	bne	13f6c <__assert_fail@plt+0x2824>
   13e5c:	str	r5, [fp, #-36]	; 0xffffffdc
   13e60:	str	lr, [sp, #12]
   13e64:	mov	r7, lr
   13e68:	ldr	lr, [sp, #32]
   13e6c:	ldr	r9, [fp, #-48]	; 0xffffffd0
   13e70:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13e74:	cmp	r9, r0
   13e78:	tsteq	r7, #1
   13e7c:	beq	13f74 <__assert_fail@plt+0x282c>
   13e80:	adds	r4, r4, #1
   13e84:	adc	r2, r2, #0
   13e88:	orrs	r1, ip, r3
   13e8c:	beq	13e9c <__assert_fail@plt+0x2754>
   13e90:	subs	r0, ip, r4
   13e94:	sbcs	r0, r3, r2
   13e98:	bcc	14040 <__assert_fail@plt+0x28f8>
   13e9c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13ea0:	eor	r0, r4, r0
   13ea4:	str	r2, [fp, #-32]	; 0xffffffe0
   13ea8:	ldr	r5, [sp, #56]	; 0x38
   13eac:	eor	r2, r2, r5
   13eb0:	orr	r0, r0, r2
   13eb4:	ldr	r2, [sp, #52]	; 0x34
   13eb8:	adds	r6, r6, r2
   13ebc:	adc	r8, r8, lr
   13ec0:	cmp	r0, #0
   13ec4:	ldr	r0, [sp, #36]	; 0x24
   13ec8:	moveq	r8, r0
   13ecc:	ldr	r0, [sp, #40]	; 0x28
   13ed0:	moveq	r6, r0
   13ed4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13ed8:	subs	r0, r6, r2
   13edc:	ldr	r9, [fp, #-36]	; 0xffffffdc
   13ee0:	sbcs	r0, r8, r9
   13ee4:	mov	r0, #0
   13ee8:	movwlt	r0, #1
   13eec:	and	r0, r7, r0
   13ef0:	cmp	r1, #0
   13ef4:	bne	13f34 <__assert_fail@plt+0x27ec>
   13ef8:	mov	sl, r6
   13efc:	subs	r1, r6, r2
   13f00:	sbcs	r1, r8, r9
   13f04:	ldr	r9, [fp, #-48]	; 0xffffffd0
   13f08:	bge	13f3c <__assert_fail@plt+0x27f4>
   13f0c:	mov	r0, #1
   13f10:	mov	r1, #0
   13f14:	mov	r2, #0
   13f18:	bl	147f8 <__assert_fail@plt+0x30b0>
   13f1c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13f20:	ldr	lr, [sp, #32]
   13f24:	ldr	ip, [sp, #44]	; 0x2c
   13f28:	ldr	r3, [sp, #48]	; 0x30
   13f2c:	mov	r0, r7
   13f30:	b	13f3c <__assert_fail@plt+0x27f4>
   13f34:	mov	sl, r6
   13f38:	ldr	r9, [fp, #-48]	; 0xffffffd0
   13f3c:	mov	r6, sl
   13f40:	subs	r1, sl, r2
   13f44:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13f48:	sbcs	r1, r8, r1
   13f4c:	mov	r7, r0
   13f50:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13f54:	blt	13e70 <__assert_fail@plt+0x2728>
   13f58:	tst	r0, #1
   13f5c:	mov	r7, r0
   13f60:	bne	13e70 <__assert_fail@plt+0x2728>
   13f64:	str	r4, [sp, #24]
   13f68:	b	13f84 <__assert_fail@plt+0x283c>
   13f6c:	ldr	r9, [fp, #-48]	; 0xffffffd0
   13f70:	b	13f8c <__assert_fail@plt+0x2844>
   13f74:	str	r2, [fp, #-32]	; 0xffffffe0
   13f78:	str	r4, [sp, #24]
   13f7c:	mov	r0, #1
   13f80:	str	r0, [sp, #8]
   13f84:	ldr	r5, [fp, #-36]	; 0xffffffdc
   13f88:	ldr	lr, [sp, #12]
   13f8c:	ldr	r3, [sp, #20]
   13f90:	ldr	r0, [sp, #16]
   13f94:	sub	r3, r3, r0
   13f98:	ldr	r4, [fp, #-52]	; 0xffffffcc
   13f9c:	cmp	r9, r4
   13fa0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13fa4:	bne	13d24 <__assert_fail@plt+0x25dc>
   13fa8:	b	13fb8 <__assert_fail@plt+0x2870>
   13fac:	mov	r0, #0
   13fb0:	str	r0, [sp, #8]
   13fb4:	ldr	r6, [sp, #28]
   13fb8:	str	r6, [sp, #28]
   13fbc:	ldr	r0, [sp, #8]
   13fc0:	and	ip, r0, #1
   13fc4:	mvn	r6, #0
   13fc8:	ldr	r4, [fp, #24]
   13fcc:	str	r2, [fp, #-40]	; 0xffffffd8
   13fd0:	subs	r0, r2, r4
   13fd4:	ldr	r9, [fp, #28]
   13fd8:	sbcs	r0, r5, r9
   13fdc:	ldr	r2, [sp, #48]	; 0x30
   13fe0:	ldr	r7, [sp, #44]	; 0x2c
   13fe4:	ldr	r3, [sp, #24]
   13fe8:	mov	sl, #0
   13fec:	blt	13c90 <__assert_fail@plt+0x2548>
   13ff0:	b	13ff8 <__assert_fail@plt+0x28b0>
   13ff4:	mov	sl, #0
   13ff8:	adds	r4, r3, ip
   13ffc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14000:	adc	r5, r0, sl
   14004:	orrs	r6, r7, r2
   14008:	ldr	r7, [sp, #56]	; 0x38
   1400c:	bne	14040 <__assert_fail@plt+0x28f8>
   14010:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14014:	subs	r0, r0, r4
   14018:	sbcs	r0, r7, r5
   1401c:	bcc	14040 <__assert_fail@plt+0x28f8>
   14020:	mov	r0, #1
   14024:	mov	r1, #0
   14028:	mov	r2, #0
   1402c:	bl	147f8 <__assert_fail@plt+0x30b0>
   14030:	adds	r4, r4, #1
   14034:	adc	r5, r5, #0
   14038:	cmp	r6, #0
   1403c:	beq	14010 <__assert_fail@plt+0x28c8>
   14040:	sub	sp, fp, #28
   14044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14048:	movw	r0, #41178	; 0xa0da
   1404c:	movt	r0, #1
   14050:	movw	r1, #40743	; 0x9f27
   14054:	movt	r1, #1
   14058:	movw	r3, #41286	; 0xa146
   1405c:	movt	r3, #1
   14060:	movw	r2, #867	; 0x363
   14064:	bl	11748 <__assert_fail@plt>
   14068:	bl	115f8 <__errno_location@plt>
   1406c:	ldr	r4, [r0]
   14070:	movw	r1, #41362	; 0xa192
   14074:	movt	r1, #1
   14078:	mov	r0, #0
   1407c:	mov	r2, #5
   14080:	bl	1146c <dcgettext@plt>
   14084:	b	140a8 <__assert_fail@plt+0x2960>
   14088:	bl	115f8 <__errno_location@plt>
   1408c:	ldr	r4, [r0]
   14090:	movw	r0, #45944	; 0xb378
   14094:	movt	r0, #2
   14098:	ldr	r2, [r0]
   1409c:	mov	r0, #0
   140a0:	mov	r1, #3
   140a4:	bl	16e88 <__assert_fail@plt+0x5740>
   140a8:	mov	r3, r0
   140ac:	movw	r2, #41482	; 0xa20a
   140b0:	movt	r2, #1
   140b4:	mov	r0, #1
   140b8:	mov	r1, r4
   140bc:	bl	1152c <error@plt>
   140c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140c4:	add	fp, sp, #28
   140c8:	sub	sp, sp, #52	; 0x34
   140cc:	mov	sl, r3
   140d0:	mov	r6, r2
   140d4:	str	r1, [sp, #12]
   140d8:	str	r0, [sp, #8]
   140dc:	orrs	r5, r0, r1
   140e0:	str	r5, [sp, #4]
   140e4:	bne	14160 <__assert_fail@plt+0x2a18>
   140e8:	cmp	sl, #0
   140ec:	bne	14544 <__assert_fail@plt+0x2dfc>
   140f0:	ldr	r4, [fp, #16]
   140f4:	mov	r0, r6
   140f8:	mov	r1, #16
   140fc:	bl	17d30 <__assert_fail@plt+0x65e8>
   14100:	mov	r2, r0
   14104:	str	r0, [r4]
   14108:	orrs	r0, r6, sl
   1410c:	beq	14160 <__assert_fail@plt+0x2a18>
   14110:	mov	r4, #0
   14114:	movw	r8, #46348	; 0xb50c
   14118:	movt	r8, #2
   1411c:	mvn	r9, #0
   14120:	mov	r7, #0
   14124:	mov	r5, r2
   14128:	bl	14908 <__assert_fail@plt+0x31c0>
   1412c:	ldr	r0, [r8]
   14130:	bl	18024 <__assert_fail@plt+0x68dc>
   14134:	mov	r2, r5
   14138:	mov	r1, r5
   1413c:	str	r0, [r1, r7, lsl #4]!
   14140:	str	r9, [r1, #4]
   14144:	str	r4, [r1, #8]
   14148:	str	r4, [r1, #12]
   1414c:	add	r7, r7, #1
   14150:	subs	r0, r7, r6
   14154:	rscs	r0, sl, #0
   14158:	bcc	14124 <__assert_fail@plt+0x29dc>
   1415c:	ldr	r5, [sp, #4]
   14160:	str	r6, [sp, #36]	; 0x24
   14164:	str	r2, [fp, #-36]	; 0xffffffdc
   14168:	str	sl, [sp, #16]
   1416c:	mov	r7, #1
   14170:	mov	r0, #0
   14174:	str	r0, [sp, #40]	; 0x28
   14178:	mov	r0, #0
   1417c:	str	r0, [fp, #-32]	; 0xffffffe0
   14180:	mov	r0, #0
   14184:	str	r0, [sp, #28]
   14188:	mov	r0, #0
   1418c:	str	r0, [sp, #32]
   14190:	mov	r0, #0
   14194:	str	r0, [sp]
   14198:	b	143f8 <__assert_fail@plt+0x2cb0>
   1419c:	cmn	r0, #1
   141a0:	beq	1450c <__assert_fail@plt+0x2dc4>
   141a4:	ldr	r6, [fp, #8]
   141a8:	add	r8, r6, r0
   141ac:	mov	r9, r6
   141b0:	sub	r2, r8, r6
   141b4:	movw	r0, #45400	; 0xb158
   141b8:	movt	r0, #2
   141bc:	ldr	r1, [r0]
   141c0:	mov	r0, r6
   141c4:	bl	11664 <memchr@plt>
   141c8:	mov	sl, r0
   141cc:	cmp	r0, #0
   141d0:	mov	r6, r8
   141d4:	addne	r6, r0, #1
   141d8:	sub	r4, r6, r9
   141dc:	cmp	r5, #0
   141e0:	beq	14230 <__assert_fail@plt+0x2ae8>
   141e4:	ldr	r0, [sp, #8]
   141e8:	eor	r0, r7, r0
   141ec:	ldr	r1, [sp, #12]
   141f0:	ldr	r2, [sp, #40]	; 0x28
   141f4:	eor	r1, r2, r1
   141f8:	orrs	r0, r0, r1
   141fc:	bne	143b0 <__assert_fail@plt+0x2c68>
   14200:	movw	r0, #45960	; 0xb388
   14204:	movt	r0, #2
   14208:	ldrb	r0, [r0]
   1420c:	cmp	r0, #1
   14210:	bne	1438c <__assert_fail@plt+0x2c44>
   14214:	mov	r0, #1
   14218:	mov	r1, r9
   1421c:	mov	r2, r4
   14220:	bl	156c0 <__assert_fail@plt+0x3f78>
   14224:	cmp	r0, r4
   14228:	beq	143b0 <__assert_fail@plt+0x2c68>
   1422c:	b	144ec <__assert_fail@plt+0x2da4>
   14230:	str	r7, [sp, #24]
   14234:	ldr	r5, [fp, #-36]	; 0xffffffdc
   14238:	mov	r0, r5
   1423c:	ldr	r7, [fp, #-32]	; 0xffffffe0
   14240:	mov	r1, r7
   14244:	ldr	r2, [sp, #36]	; 0x24
   14248:	bl	15134 <__assert_fail@plt+0x39ec>
   1424c:	str	r0, [sp, #20]
   14250:	movw	r0, #45960	; 0xb388
   14254:	movt	r0, #2
   14258:	ldrb	r0, [r0]
   1425c:	cmp	r0, #1
   14260:	bne	14284 <__assert_fail@plt+0x2b3c>
   14264:	add	r0, r5, r7, lsl #4
   14268:	ldr	r0, [r0, #4]
   1426c:	mov	r1, r9
   14270:	mov	r2, r4
   14274:	bl	156c0 <__assert_fail@plt+0x3f78>
   14278:	cmp	r0, r4
   1427c:	bne	142a4 <__assert_fail@plt+0x2b5c>
   14280:	b	142bc <__assert_fail@plt+0x2b74>
   14284:	add	r0, r5, r7, lsl #4
   14288:	ldr	r3, [r0, #8]
   1428c:	mov	r0, r9
   14290:	mov	r1, r4
   14294:	mov	r2, #1
   14298:	bl	11454 <fwrite_unlocked@plt>
   1429c:	cmp	r0, #1
   142a0:	beq	142bc <__assert_fail@plt+0x2b74>
   142a4:	bl	115f8 <__errno_location@plt>
   142a8:	ldr	r4, [r0]
   142ac:	mov	r0, r4
   142b0:	bl	1510c <__assert_fail@plt+0x39c4>
   142b4:	cmp	r0, #0
   142b8:	beq	144bc <__assert_fail@plt+0x2d74>
   142bc:	ldr	r4, [sp, #28]
   142c0:	ldr	r0, [sp, #20]
   142c4:	orr	r4, r4, r0
   142c8:	bl	115f8 <__errno_location@plt>
   142cc:	mov	r9, r0
   142d0:	ldr	r0, [r0]
   142d4:	bl	1510c <__assert_fail@plt+0x39c4>
   142d8:	mov	r7, r0
   142dc:	str	r4, [sp, #28]
   142e0:	tst	r4, #1
   142e4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   142e8:	beq	1431c <__assert_fail@plt+0x2bd4>
   142ec:	ldr	r1, [fp, #-32]	; 0xffffffe0
   142f0:	add	r4, r0, r1, lsl #4
   142f4:	mov	r5, r4
   142f8:	ldr	r0, [r5, #8]!
   142fc:	bl	1543c <__assert_fail@plt+0x3cf4>
   14300:	cmp	r0, #0
   14304:	bne	144c8 <__assert_fail@plt+0x2d80>
   14308:	mov	r0, #0
   1430c:	str	r0, [r5]
   14310:	mvn	r0, #1
   14314:	str	r0, [r4, #4]
   14318:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1431c:	eor	r1, r7, #1
   14320:	ldr	r2, [sp, #32]
   14324:	orr	r2, r2, r1
   14328:	str	r2, [sp, #32]
   1432c:	cmp	sl, #0
   14330:	ldr	r5, [sp, #4]
   14334:	beq	143ec <__assert_fail@plt+0x2ca4>
   14338:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1433c:	mov	r2, r1
   14340:	add	r2, r1, #1
   14344:	mov	r1, r2
   14348:	str	r2, [fp, #-32]	; 0xffffffe0
   1434c:	ldr	r1, [sp, #36]	; 0x24
   14350:	eor	r2, r2, r1
   14354:	ldr	r1, [sp, #16]
   14358:	orrs	r1, r2, r1
   1435c:	ldr	r7, [sp, #24]
   14360:	bne	143f0 <__assert_fail@plt+0x2ca8>
   14364:	ldr	r1, [sp, #32]
   14368:	tst	r1, #1
   1436c:	beq	14428 <__assert_fail@plt+0x2ce0>
   14370:	mov	r0, #1
   14374:	str	r0, [sp]
   14378:	mov	r0, #0
   1437c:	str	r0, [fp, #-32]	; 0xffffffe0
   14380:	mov	r0, #0
   14384:	str	r0, [sp, #32]
   14388:	b	143f0 <__assert_fail@plt+0x2ca8>
   1438c:	movw	r0, #45932	; 0xb36c
   14390:	movt	r0, #2
   14394:	ldr	r3, [r0]
   14398:	mov	r0, r9
   1439c:	mov	r1, r4
   143a0:	mov	r2, #1
   143a4:	bl	11454 <fwrite_unlocked@plt>
   143a8:	cmp	r0, #1
   143ac:	bne	144dc <__assert_fail@plt+0x2d94>
   143b0:	cmp	sl, #0
   143b4:	beq	143f0 <__assert_fail@plt+0x2ca8>
   143b8:	ldr	r0, [sp, #36]	; 0x24
   143bc:	eor	r0, r7, r0
   143c0:	ldr	r1, [sp, #16]
   143c4:	ldr	r2, [sp, #40]	; 0x28
   143c8:	eor	r1, r2, r1
   143cc:	orr	r0, r0, r1
   143d0:	adds	r7, r7, #1
   143d4:	adc	r2, r2, #0
   143d8:	cmp	r0, #0
   143dc:	moveq	r2, r0
   143e0:	str	r2, [sp, #40]	; 0x28
   143e4:	movweq	r7, #1
   143e8:	b	143f0 <__assert_fail@plt+0x2ca8>
   143ec:	ldr	r7, [sp, #24]
   143f0:	cmp	r6, r8
   143f4:	bne	141ac <__assert_fail@plt+0x2a64>
   143f8:	mov	r0, #0
   143fc:	ldr	r1, [fp, #8]
   14400:	ldr	r2, [fp, #12]
   14404:	bl	173dc <__assert_fail@plt+0x5c94>
   14408:	cmp	r0, #0
   1440c:	bne	1419c <__assert_fail@plt+0x2a54>
   14410:	cmp	r5, #0
   14414:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14418:	bne	144b4 <__assert_fail@plt+0x2d6c>
   1441c:	ldr	r1, [sp]
   14420:	tst	r1, #1
   14424:	beq	14430 <__assert_fail@plt+0x2ce8>
   14428:	ldr	r1, [sp, #36]	; 0x24
   1442c:	str	r1, [fp, #-32]	; 0xffffffe0
   14430:	ldr	r6, [sp, #16]
   14434:	ldr	r2, [sp, #36]	; 0x24
   14438:	orrs	r1, r2, r6
   1443c:	beq	144b4 <__assert_fail@plt+0x2d6c>
   14440:	mov	r4, #0
   14444:	mvn	r5, #1
   14448:	movw	r8, #45968	; 0xb390
   1444c:	movt	r8, #2
   14450:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14454:	cmp	r4, r1
   14458:	bcc	14474 <__assert_fail@plt+0x2d2c>
   1445c:	ldrb	r1, [r8]
   14460:	cmp	r1, #0
   14464:	bne	14474 <__assert_fail@plt+0x2d2c>
   14468:	mov	r1, r4
   1446c:	bl	15134 <__assert_fail@plt+0x39ec>
   14470:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14474:	add	r7, r0, r4, lsl #4
   14478:	ldr	r1, [r7, #4]
   1447c:	cmp	r1, #0
   14480:	blt	1449c <__assert_fail@plt+0x2d54>
   14484:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14488:	ldr	r3, [r2, r4, lsl #4]!
   1448c:	ldr	r0, [r2, #8]
   14490:	ldr	r2, [r2, #12]
   14494:	bl	14548 <__assert_fail@plt+0x2e00>
   14498:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1449c:	str	r5, [r7, #4]
   144a0:	add	r4, r4, #1
   144a4:	ldr	r2, [sp, #36]	; 0x24
   144a8:	subs	r1, r4, r2
   144ac:	rscs	r1, r6, #0
   144b0:	bcc	14450 <__assert_fail@plt+0x2d08>
   144b4:	sub	sp, fp, #28
   144b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   144c0:	ldr	r2, [r0, r7, lsl #4]
   144c4:	b	14520 <__assert_fail@plt+0x2dd8>
   144c8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   144cc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   144d0:	ldr	r2, [r0, r1, lsl #4]
   144d4:	ldr	r4, [r9]
   144d8:	b	14520 <__assert_fail@plt+0x2dd8>
   144dc:	movw	r0, #45932	; 0xb36c
   144e0:	movt	r0, #2
   144e4:	ldr	r0, [r0]
   144e8:	bl	116e8 <clearerr_unlocked@plt>
   144ec:	bl	115f8 <__errno_location@plt>
   144f0:	ldr	r4, [r0]
   144f4:	movw	r1, #41362	; 0xa192
   144f8:	movt	r1, #1
   144fc:	mov	r0, #0
   14500:	mov	r2, #5
   14504:	bl	1146c <dcgettext@plt>
   14508:	b	1452c <__assert_fail@plt+0x2de4>
   1450c:	bl	115f8 <__errno_location@plt>
   14510:	ldr	r4, [r0]
   14514:	movw	r0, #45944	; 0xb378
   14518:	movt	r0, #2
   1451c:	ldr	r2, [r0]
   14520:	mov	r0, #0
   14524:	mov	r1, #3
   14528:	bl	16e88 <__assert_fail@plt+0x5740>
   1452c:	mov	r3, r0
   14530:	movw	r2, #41482	; 0xa20a
   14534:	movt	r2, #1
   14538:	mov	r0, #1
   1453c:	mov	r1, r4
   14540:	bl	1152c <error@plt>
   14544:	bl	18044 <__assert_fail@plt+0x68fc>
   14548:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1454c:	add	fp, sp, #24
   14550:	sub	sp, sp, #32
   14554:	mov	r8, r3
   14558:	mov	r5, r2
   1455c:	mov	r6, r1
   14560:	mov	r7, r0
   14564:	cmp	r0, #0
   14568:	beq	14594 <__assert_fail@plt+0x2e4c>
   1456c:	mov	r0, r7
   14570:	bl	1543c <__assert_fail@plt+0x3cf4>
   14574:	cmp	r0, #0
   14578:	beq	14594 <__assert_fail@plt+0x2e4c>
   1457c:	bl	115f8 <__errno_location@plt>
   14580:	ldr	r4, [r0]
   14584:	mov	r0, r4
   14588:	bl	1510c <__assert_fail@plt+0x39c4>
   1458c:	cmp	r0, #0
   14590:	beq	14788 <__assert_fail@plt+0x3040>
   14594:	cmp	r6, #0
   14598:	blt	14618 <__assert_fail@plt+0x2ed0>
   1459c:	cmp	r7, #0
   145a0:	bne	145b4 <__assert_fail@plt+0x2e6c>
   145a4:	mov	r0, r6
   145a8:	bl	11730 <close@plt>
   145ac:	cmn	r0, #1
   145b0:	ble	14780 <__assert_fail@plt+0x3038>
   145b4:	movw	r0, #46376	; 0xb528
   145b8:	movt	r0, #2
   145bc:	ldr	r1, [r0]
   145c0:	cmp	r1, #0
   145c4:	beq	14618 <__assert_fail@plt+0x2ed0>
   145c8:	movw	r2, #46380	; 0xb52c
   145cc:	movt	r2, #2
   145d0:	ldr	r2, [r2]
   145d4:	ldr	r7, [r2]
   145d8:	mov	r3, #0
   145dc:	cmp	r7, r6
   145e0:	beq	14608 <__assert_fail@plt+0x2ec0>
   145e4:	ldr	r1, [r0]
   145e8:	mov	r3, #1
   145ec:	cmp	r3, r1
   145f0:	bcs	14618 <__assert_fail@plt+0x2ed0>
   145f4:	ldr	r7, [r2, r3, lsl #2]
   145f8:	add	r3, r3, #1
   145fc:	cmp	r7, r6
   14600:	bne	145ec <__assert_fail@plt+0x2ea4>
   14604:	sub	r3, r3, #1
   14608:	sub	r1, r1, #1
   1460c:	str	r1, [r0]
   14610:	ldr	r0, [r2, r1, lsl #2]
   14614:	str	r0, [r2, r3, lsl #2]
   14618:	cmp	r5, #1
   1461c:	blt	14750 <__assert_fail@plt+0x3008>
   14620:	mov	r0, #0
   14624:	str	r0, [sp, #28]
   14628:	add	r1, sp, #28
   1462c:	mov	r0, r5
   14630:	mov	r2, #0
   14634:	bl	114e4 <waitpid@plt>
   14638:	cmn	r0, #1
   1463c:	bne	14650 <__assert_fail@plt+0x2f08>
   14640:	bl	115f8 <__errno_location@plt>
   14644:	ldr	r4, [r0]
   14648:	cmp	r4, #10
   1464c:	bne	147b0 <__assert_fail@plt+0x3068>
   14650:	ldr	r0, [sp, #28]
   14654:	and	r5, r0, #127	; 0x7f
   14658:	mov	r1, #16777216	; 0x1000000
   1465c:	add	r1, r1, r5, lsl #24
   14660:	cmp	r1, #33554432	; 0x2000000
   14664:	blt	146ec <__assert_fail@plt+0x2fa4>
   14668:	cmp	r5, #13
   1466c:	beq	14750 <__assert_fail@plt+0x3008>
   14670:	add	r6, sp, #9
   14674:	mov	r0, r5
   14678:	mov	r1, r6
   1467c:	bl	1768c <__assert_fail@plt+0x5f44>
   14680:	cmp	r0, #0
   14684:	beq	146a4 <__assert_fail@plt+0x2f5c>
   14688:	str	r5, [sp]
   1468c:	add	r0, sp, #9
   14690:	movw	r3, #41402	; 0xa1ba
   14694:	movt	r3, #1
   14698:	mov	r1, #1
   1469c:	mov	r2, #19
   146a0:	bl	11604 <__sprintf_chk@plt>
   146a4:	movw	r1, #41405	; 0xa1bd
   146a8:	movt	r1, #1
   146ac:	mov	r0, #0
   146b0:	mov	r2, #5
   146b4:	bl	1146c <dcgettext@plt>
   146b8:	mov	r4, r0
   146bc:	mov	r0, #0
   146c0:	mov	r1, #3
   146c4:	mov	r2, r8
   146c8:	bl	16e88 <__assert_fail@plt+0x5740>
   146cc:	mov	r3, r0
   146d0:	movw	r0, #45972	; 0xb394
   146d4:	movt	r0, #2
   146d8:	ldr	r0, [r0]
   146dc:	str	r6, [sp]
   146e0:	str	r0, [sp, #4]
   146e4:	orr	r0, r5, #128	; 0x80
   146e8:	b	14744 <__assert_fail@plt+0x2ffc>
   146ec:	cmp	r5, #0
   146f0:	bne	14758 <__assert_fail@plt+0x3010>
   146f4:	ubfx	r5, r0, #8, #8
   146f8:	cmp	r5, #0
   146fc:	beq	14750 <__assert_fail@plt+0x3008>
   14700:	movw	r1, #41446	; 0xa1e6
   14704:	movt	r1, #1
   14708:	mov	r0, #0
   1470c:	mov	r2, #5
   14710:	bl	1146c <dcgettext@plt>
   14714:	mov	r4, r0
   14718:	mov	r0, #0
   1471c:	mov	r1, #3
   14720:	mov	r2, r8
   14724:	bl	16e88 <__assert_fail@plt+0x5740>
   14728:	mov	r3, r0
   1472c:	movw	r0, #45972	; 0xb394
   14730:	movt	r0, #2
   14734:	ldr	r0, [r0]
   14738:	str	r5, [sp]
   1473c:	str	r0, [sp, #4]
   14740:	mov	r0, r5
   14744:	mov	r1, #0
   14748:	mov	r2, r4
   1474c:	bl	1152c <error@plt>
   14750:	sub	sp, fp, #24
   14754:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14758:	movw	r1, #41485	; 0xa20d
   1475c:	movt	r1, #1
   14760:	mov	r0, #0
   14764:	mov	r2, #5
   14768:	bl	1146c <dcgettext@plt>
   1476c:	mov	r2, r0
   14770:	ldr	r3, [sp, #28]
   14774:	mov	r0, #1
   14778:	mov	r1, #0
   1477c:	bl	1152c <error@plt>
   14780:	bl	115f8 <__errno_location@plt>
   14784:	ldr	r4, [r0]
   14788:	mov	r0, #0
   1478c:	mov	r1, #3
   14790:	mov	r2, r8
   14794:	bl	16e88 <__assert_fail@plt+0x5740>
   14798:	mov	r3, r0
   1479c:	movw	r2, #41482	; 0xa20a
   147a0:	movt	r2, #1
   147a4:	mov	r0, #1
   147a8:	mov	r1, r4
   147ac:	bl	1152c <error@plt>
   147b0:	movw	r1, #41376	; 0xa1a0
   147b4:	movt	r1, #1
   147b8:	mov	r0, #0
   147bc:	mov	r2, #5
   147c0:	bl	1146c <dcgettext@plt>
   147c4:	mov	r2, r0
   147c8:	mov	r0, #1
   147cc:	mov	r1, r4
   147d0:	bl	1152c <error@plt>
   147d4:	movw	r0, #45984	; 0xb3a0
   147d8:	movt	r0, #2
   147dc:	ldr	r0, [r0, #16]
   147e0:	and	r0, r0, #53248	; 0xd000
   147e4:	orr	r0, r0, #8192	; 0x2000
   147e8:	cmp	r0, #40960	; 0xa000
   147ec:	moveq	r0, #1
   147f0:	movne	r0, #0
   147f4:	bx	lr
   147f8:	push	{r4, r5, r6, r7, fp, lr}
   147fc:	add	fp, sp, #16
   14800:	mov	r4, r2
   14804:	mov	r5, r1
   14808:	cmp	r0, #0
   1480c:	beq	14860 <__assert_fail@plt+0x3118>
   14810:	cmp	r5, #0
   14814:	cmpeq	r4, #0
   14818:	beq	148dc <__assert_fail@plt+0x3194>
   1481c:	movw	r6, #46348	; 0xb50c
   14820:	movt	r6, #2
   14824:	ldr	r3, [r6]
   14828:	movw	r0, #46344	; 0xb508
   1482c:	movt	r0, #2
   14830:	ldr	r2, [r0]
   14834:	movw	r7, #45408	; 0xb160
   14838:	movt	r7, #2
   1483c:	ldr	r1, [r7]
   14840:	mov	r0, #0
   14844:	bl	14548 <__assert_fail@plt+0x2e00>
   14848:	bl	14908 <__assert_fail@plt+0x31c0>
   1484c:	ldr	r0, [r6]
   14850:	bl	14c50 <__assert_fail@plt+0x3508>
   14854:	str	r0, [r7]
   14858:	cmn	r0, #1
   1485c:	ble	148f8 <__assert_fail@plt+0x31b0>
   14860:	movw	r0, #45408	; 0xb160
   14864:	movt	r0, #2
   14868:	ldr	r0, [r0]
   1486c:	mov	r1, r5
   14870:	mov	r2, r4
   14874:	bl	156c0 <__assert_fail@plt+0x3f78>
   14878:	mov	r1, r0
   1487c:	mov	r0, #1
   14880:	cmp	r1, r4
   14884:	bne	1488c <__assert_fail@plt+0x3144>
   14888:	pop	{r4, r5, r6, r7, fp, pc}
   1488c:	bl	115f8 <__errno_location@plt>
   14890:	ldr	r4, [r0]
   14894:	mov	r0, r4
   14898:	bl	1510c <__assert_fail@plt+0x39c4>
   1489c:	mov	r1, r0
   148a0:	mov	r0, #0
   148a4:	cmp	r1, #0
   148a8:	popne	{r4, r5, r6, r7, fp, pc}
   148ac:	movw	r0, #46348	; 0xb50c
   148b0:	movt	r0, #2
   148b4:	ldr	r2, [r0]
   148b8:	mov	r0, #0
   148bc:	mov	r1, #3
   148c0:	bl	16e88 <__assert_fail@plt+0x5740>
   148c4:	mov	r3, r0
   148c8:	movw	r2, #41482	; 0xa20a
   148cc:	movt	r2, #1
   148d0:	mov	r0, #1
   148d4:	mov	r1, r4
   148d8:	bl	1152c <error@plt>
   148dc:	movw	r0, #45968	; 0xb390
   148e0:	movt	r0, #2
   148e4:	ldrb	r1, [r0]
   148e8:	mov	r0, #1
   148ec:	cmp	r1, #0
   148f0:	beq	1481c <__assert_fail@plt+0x30d4>
   148f4:	b	14888 <__assert_fail@plt+0x3140>
   148f8:	bl	115f8 <__errno_location@plt>
   148fc:	ldr	r4, [r0]
   14900:	ldr	r2, [r6]
   14904:	b	148b8 <__assert_fail@plt+0x3170>
   14908:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1490c:	add	fp, sp, #24
   14910:	movw	r8, #46348	; 0xb50c
   14914:	movt	r8, #2
   14918:	ldr	r9, [r8]
   1491c:	cmp	r9, #0
   14920:	beq	14a00 <__assert_fail@plt+0x32b8>
   14924:	movw	r0, #45952	; 0xb380
   14928:	movt	r0, #2
   1492c:	ldr	r0, [r0]
   14930:	cmp	r0, #0
   14934:	beq	149dc <__assert_fail@plt+0x3294>
   14938:	rsb	r4, r0, #1
   1493c:	movw	r1, #46372	; 0xb524
   14940:	movt	r1, #2
   14944:	ldr	r1, [r1]
   14948:	movw	r2, #45404	; 0xb15c
   1494c:	movt	r2, #2
   14950:	ldr	r2, [r2]
   14954:	movw	r3, #46356	; 0xb514
   14958:	movt	r3, #2
   1495c:	ldr	r3, [r3]
   14960:	movw	r7, #46352	; 0xb510
   14964:	movt	r7, #2
   14968:	ldrb	r7, [r7]
   1496c:	eor	r7, r7, #1
   14970:	mvn	r7, r7
   14974:	mov	r6, #0
   14978:	ldr	r5, [r3, -r4, lsl #2]
   1497c:	add	r5, r5, #1
   14980:	str	r5, [r3, -r4, lsl #2]
   14984:	cmp	r4, #0
   14988:	mov	r0, r4
   1498c:	movwne	r0, #1
   14990:	orr	r0, r0, r7
   14994:	tst	r0, #1
   14998:	bne	149b0 <__assert_fail@plt+0x3268>
   1499c:	ldr	r0, [r3]
   149a0:	add	r0, r2, r0
   149a4:	ldrb	r0, [r0, #1]
   149a8:	cmp	r0, #0
   149ac:	beq	14a00 <__assert_fail@plt+0x32b8>
   149b0:	ldrb	r0, [r2, r5]
   149b4:	strb	r0, [r1, -r4]
   149b8:	cmp	r0, #0
   149bc:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   149c0:	rsb	r0, r4, #0
   149c4:	str	r6, [r3, r0, lsl #2]
   149c8:	ldrb	r0, [r2]
   149cc:	strb	r0, [r1, -r4]
   149d0:	add	r4, r4, #1
   149d4:	cmp	r4, #1
   149d8:	bne	14978 <__assert_fail@plt+0x3230>
   149dc:	movw	r1, #40781	; 0x9f4d
   149e0:	movt	r1, #1
   149e4:	mov	r0, #0
   149e8:	mov	r2, #5
   149ec:	bl	1146c <dcgettext@plt>
   149f0:	mov	r2, r0
   149f4:	mov	r0, #1
   149f8:	mov	r1, #0
   149fc:	bl	1152c <error@plt>
   14a00:	movw	r6, #46364	; 0xb51c
   14a04:	movt	r6, #2
   14a08:	ldr	r7, [r6]
   14a0c:	cmp	r7, #0
   14a10:	beq	14a38 <__assert_fail@plt+0x32f0>
   14a14:	add	r0, r7, #2
   14a18:	movw	r1, #46364	; 0xb51c
   14a1c:	movt	r1, #2
   14a20:	str	r0, [r1]
   14a24:	movw	r0, #45952	; 0xb380
   14a28:	movt	r0, #2
   14a2c:	ldr	r1, [r0]
   14a30:	add	r1, r1, #1
   14a34:	b	14a9c <__assert_fail@plt+0x3354>
   14a38:	movw	r0, #45948	; 0xb37c
   14a3c:	movt	r0, #2
   14a40:	ldr	r0, [r0]
   14a44:	bl	115b0 <strlen@plt>
   14a48:	mov	r5, r0
   14a4c:	movw	r0, #46360	; 0xb518
   14a50:	movt	r0, #2
   14a54:	str	r5, [r0]
   14a58:	movw	r0, #45956	; 0xb384
   14a5c:	movt	r0, #2
   14a60:	ldr	r0, [r0]
   14a64:	cmp	r0, #0
   14a68:	beq	14a74 <__assert_fail@plt+0x332c>
   14a6c:	bl	115b0 <strlen@plt>
   14a70:	b	14a78 <__assert_fail@plt+0x3330>
   14a74:	mov	r0, #0
   14a78:	movw	r1, #46368	; 0xb520
   14a7c:	movt	r1, #2
   14a80:	str	r0, [r1]
   14a84:	add	r0, r0, r5
   14a88:	movw	r1, #45952	; 0xb380
   14a8c:	movt	r1, #2
   14a90:	ldr	r1, [r1]
   14a94:	add	r1, r0, r1
   14a98:	mov	r0, r6
   14a9c:	str	r1, [r0]
   14aa0:	movw	r5, #46360	; 0xb518
   14aa4:	movt	r5, #2
   14aa8:	ldr	r0, [r5]
   14aac:	ldr	r1, [r6]
   14ab0:	add	r1, r1, #1
   14ab4:	cmp	r1, r0
   14ab8:	bcc	14c2c <__assert_fail@plt+0x34e4>
   14abc:	mov	r0, r9
   14ac0:	bl	17cd4 <__assert_fail@plt+0x658c>
   14ac4:	mov	r4, r0
   14ac8:	str	r0, [r8]
   14acc:	cmp	r7, #0
   14ad0:	beq	14b08 <__assert_fail@plt+0x33c0>
   14ad4:	movw	r0, #45404	; 0xb15c
   14ad8:	movt	r0, #2
   14adc:	ldr	r0, [r0]
   14ae0:	movw	r1, #46356	; 0xb514
   14ae4:	movt	r1, #2
   14ae8:	ldr	r1, [r1]
   14aec:	ldr	r1, [r1]
   14af0:	ldrb	r0, [r0, r1]
   14af4:	ldr	r1, [r5]
   14af8:	strb	r0, [r4, r1]
   14afc:	add	r0, r1, #1
   14b00:	str	r0, [r5]
   14b04:	b	14b20 <__assert_fail@plt+0x33d8>
   14b08:	ldr	r2, [r5]
   14b0c:	movw	r0, #45948	; 0xb37c
   14b10:	movt	r0, #2
   14b14:	ldr	r1, [r0]
   14b18:	mov	r0, r4
   14b1c:	bl	11430 <memcpy@plt>
   14b20:	ldr	r0, [r5]
   14b24:	add	r5, r4, r0
   14b28:	movw	r8, #46372	; 0xb524
   14b2c:	movt	r8, #2
   14b30:	str	r5, [r8]
   14b34:	movw	r9, #45952	; 0xb380
   14b38:	movt	r9, #2
   14b3c:	ldr	r6, [r9]
   14b40:	movw	r0, #45404	; 0xb15c
   14b44:	movt	r0, #2
   14b48:	ldr	r0, [r0]
   14b4c:	ldrb	r1, [r0]
   14b50:	mov	r0, r5
   14b54:	mov	r2, r6
   14b58:	bl	1161c <memset@plt>
   14b5c:	movw	r0, #45956	; 0xb384
   14b60:	movt	r0, #2
   14b64:	ldr	r1, [r0]
   14b68:	cmp	r1, #0
   14b6c:	beq	14b84 <__assert_fail@plt+0x343c>
   14b70:	add	r0, r5, r6
   14b74:	movw	r2, #46368	; 0xb520
   14b78:	movt	r2, #2
   14b7c:	ldr	r2, [r2]
   14b80:	bl	11430 <memcpy@plt>
   14b84:	movw	r0, #46364	; 0xb51c
   14b88:	movt	r0, #2
   14b8c:	ldr	r0, [r0]
   14b90:	mov	r1, #0
   14b94:	strb	r1, [r4, r0]
   14b98:	movw	r6, #46356	; 0xb514
   14b9c:	movt	r6, #2
   14ba0:	ldr	r0, [r6]
   14ba4:	bl	155f4 <__assert_fail@plt+0x3eac>
   14ba8:	ldr	r0, [r9]
   14bac:	mov	r1, #4
   14bb0:	bl	17f58 <__assert_fail@plt+0x6810>
   14bb4:	str	r0, [r6]
   14bb8:	movw	r0, #45964	; 0xb38c
   14bbc:	movt	r0, #2
   14bc0:	ldr	r5, [r0]
   14bc4:	cmp	r5, #0
   14bc8:	beq	14c28 <__assert_fail@plt+0x34e0>
   14bcc:	cmp	r7, #0
   14bd0:	bne	14c30 <__assert_fail@plt+0x34e8>
   14bd4:	mov	r0, r5
   14bd8:	bl	115b0 <strlen@plt>
   14bdc:	mov	r4, r0
   14be0:	ldr	r7, [r9]
   14be4:	ldr	r0, [r8]
   14be8:	add	r0, r0, r7
   14bec:	sub	r0, r0, r4
   14bf0:	mov	r1, r5
   14bf4:	mov	r2, r4
   14bf8:	bl	11430 <memcpy@plt>
   14bfc:	cmp	r4, #0
   14c00:	beq	14c28 <__assert_fail@plt+0x34e0>
   14c04:	ldr	r0, [r6]
   14c08:	add	r0, r0, r7, lsl #2
   14c0c:	sub	r0, r0, #4
   14c10:	sub	r1, r5, #1
   14c14:	ldrb	r2, [r1, r4]
   14c18:	sub	r2, r2, #48	; 0x30
   14c1c:	str	r2, [r0], #-4
   14c20:	subs	r4, r4, #1
   14c24:	bne	14c14 <__assert_fail@plt+0x34cc>
   14c28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c2c:	bl	18044 <__assert_fail@plt+0x68fc>
   14c30:	movw	r0, #40735	; 0x9f1f
   14c34:	movt	r0, #1
   14c38:	movw	r1, #40743	; 0x9f27
   14c3c:	movt	r1, #1
   14c40:	movw	r3, #40755	; 0x9f33
   14c44:	movt	r3, #1
   14c48:	movw	r2, #409	; 0x199
   14c4c:	bl	11748 <__assert_fail@plt>
   14c50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c54:	add	fp, sp, #24
   14c58:	sub	sp, sp, #112	; 0x70
   14c5c:	mov	r4, r0
   14c60:	movw	r8, #45972	; 0xb394
   14c64:	movt	r8, #2
   14c68:	ldr	r0, [r8]
   14c6c:	cmp	r0, #0
   14c70:	beq	14db8 <__assert_fail@plt+0x3670>
   14c74:	movw	r0, #40904	; 0x9fc8
   14c78:	movt	r0, #1
   14c7c:	bl	11544 <getenv@plt>
   14c80:	mov	r6, r0
   14c84:	movw	r0, #40918	; 0x9fd6
   14c88:	movt	r0, #1
   14c8c:	mov	r1, r4
   14c90:	mov	r2, #1
   14c94:	bl	115d4 <setenv@plt>
   14c98:	movw	r5, #40910	; 0x9fce
   14c9c:	movt	r5, #1
   14ca0:	cmp	r6, #0
   14ca4:	movne	r5, r6
   14ca8:	cmp	r0, #0
   14cac:	bne	15010 <__assert_fail@plt+0x38c8>
   14cb0:	movw	r0, #45976	; 0xb398
   14cb4:	movt	r0, #2
   14cb8:	ldrb	r0, [r0]
   14cbc:	cmp	r0, #1
   14cc0:	bne	14d0c <__assert_fail@plt+0x35c4>
   14cc4:	movw	r0, #45932	; 0xb36c
   14cc8:	movt	r0, #2
   14ccc:	ldr	r6, [r0]
   14cd0:	movw	r1, #40963	; 0xa003
   14cd4:	movt	r1, #1
   14cd8:	mov	r0, #0
   14cdc:	mov	r2, #5
   14ce0:	bl	1146c <dcgettext@plt>
   14ce4:	mov	r7, r0
   14ce8:	mov	r0, #0
   14cec:	mov	r1, #3
   14cf0:	mov	r2, r4
   14cf4:	bl	16e88 <__assert_fail@plt+0x5740>
   14cf8:	mov	r3, r0
   14cfc:	mov	r0, r6
   14d00:	mov	r1, #1
   14d04:	mov	r2, r7
   14d08:	bl	11658 <__fprintf_chk@plt>
   14d0c:	add	r0, sp, #8
   14d10:	bl	1167c <pipe@plt>
   14d14:	cmp	r0, #0
   14d18:	bne	15024 <__assert_fail@plt+0x38dc>
   14d1c:	bl	116b8 <fork@plt>
   14d20:	cmp	r0, #0
   14d24:	beq	14eb4 <__assert_fail@plt+0x376c>
   14d28:	mov	r4, r0
   14d2c:	cmn	r0, #1
   14d30:	beq	15038 <__assert_fail@plt+0x38f0>
   14d34:	ldr	r0, [sp, #8]
   14d38:	bl	11730 <close@plt>
   14d3c:	cmp	r0, #0
   14d40:	bne	1504c <__assert_fail@plt+0x3904>
   14d44:	movw	r0, #46344	; 0xb508
   14d48:	movt	r0, #2
   14d4c:	str	r4, [r0]
   14d50:	movw	r0, #46384	; 0xb530
   14d54:	movt	r0, #2
   14d58:	ldr	r0, [r0]
   14d5c:	movw	r4, #46376	; 0xb528
   14d60:	movt	r4, #2
   14d64:	ldr	r1, [r4]
   14d68:	cmp	r1, r0
   14d6c:	bne	14d90 <__assert_fail@plt+0x3648>
   14d70:	movw	r5, #46380	; 0xb52c
   14d74:	movt	r5, #2
   14d78:	ldr	r0, [r5]
   14d7c:	movw	r1, #46384	; 0xb530
   14d80:	movt	r1, #2
   14d84:	mov	r2, #4
   14d88:	bl	17d64 <__assert_fail@plt+0x661c>
   14d8c:	str	r0, [r5]
   14d90:	ldr	r0, [r4]
   14d94:	add	r1, r0, #1
   14d98:	str	r1, [r4]
   14d9c:	movw	r1, #46380	; 0xb52c
   14da0:	movt	r1, #2
   14da4:	ldr	r1, [r1]
   14da8:	ldr	r2, [sp, #12]
   14dac:	str	r2, [r1, r0, lsl #2]
   14db0:	ldr	r5, [sp, #12]
   14db4:	b	14ea8 <__assert_fail@plt+0x3760>
   14db8:	movw	r0, #45976	; 0xb398
   14dbc:	movt	r0, #2
   14dc0:	ldrb	r0, [r0]
   14dc4:	cmp	r0, #1
   14dc8:	bne	14e10 <__assert_fail@plt+0x36c8>
   14dcc:	movw	r0, #45932	; 0xb36c
   14dd0:	movt	r0, #2
   14dd4:	ldr	r5, [r0]
   14dd8:	movw	r1, #40812	; 0x9f6c
   14ddc:	movt	r1, #1
   14de0:	mov	r0, #0
   14de4:	mov	r2, #5
   14de8:	bl	1146c <dcgettext@plt>
   14dec:	mov	r6, r0
   14df0:	mov	r0, #4
   14df4:	mov	r1, r4
   14df8:	bl	16dd4 <__assert_fail@plt+0x568c>
   14dfc:	mov	r3, r0
   14e00:	mov	r0, r5
   14e04:	mov	r1, #1
   14e08:	mov	r2, r6
   14e0c:	bl	11658 <__fprintf_chk@plt>
   14e10:	mov	r0, r4
   14e14:	mov	r1, #65	; 0x41
   14e18:	movw	r2, #438	; 0x1b6
   14e1c:	bl	154dc <__assert_fail@plt+0x3d94>
   14e20:	mov	r5, r0
   14e24:	cmp	r0, #0
   14e28:	blt	14ea8 <__assert_fail@plt+0x3760>
   14e2c:	add	r1, sp, #8
   14e30:	mov	r0, r5
   14e34:	bl	19168 <__assert_fail@plt+0x7a20>
   14e38:	cmp	r0, #0
   14e3c:	bne	15060 <__assert_fail@plt+0x3918>
   14e40:	movw	r0, #45984	; 0xb3a0
   14e44:	movt	r0, #2
   14e48:	ldrd	r2, [r0, #96]	; 0x60
   14e4c:	ldr	r1, [sp, #104]	; 0x68
   14e50:	ldr	r7, [sp, #108]	; 0x6c
   14e54:	eor	r3, r3, r7
   14e58:	eor	r1, r2, r1
   14e5c:	orrs	r1, r1, r3
   14e60:	bne	14e80 <__assert_fail@plt+0x3738>
   14e64:	ldrd	r0, [r0]
   14e68:	ldr	r2, [sp, #8]
   14e6c:	ldr	r3, [sp, #12]
   14e70:	eor	r1, r1, r3
   14e74:	eor	r0, r0, r2
   14e78:	orrs	r0, r0, r1
   14e7c:	beq	15090 <__assert_fail@plt+0x3948>
   14e80:	mov	r0, r5
   14e84:	mov	r2, #0
   14e88:	mov	r3, #0
   14e8c:	bl	11448 <ftruncate64@plt>
   14e90:	cmp	r0, #0
   14e94:	beq	14ea8 <__assert_fail@plt+0x3760>
   14e98:	ldr	r0, [sp, #24]
   14e9c:	and	r0, r0, #61440	; 0xf000
   14ea0:	cmp	r0, #32768	; 0x8000
   14ea4:	beq	150c8 <__assert_fail@plt+0x3980>
   14ea8:	mov	r0, r5
   14eac:	sub	sp, fp, #24
   14eb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14eb4:	movw	r4, #46376	; 0xb528
   14eb8:	movt	r4, #2
   14ebc:	ldr	r0, [r4]
   14ec0:	cmp	r0, #0
   14ec4:	beq	14ef8 <__assert_fail@plt+0x37b0>
   14ec8:	mov	r6, #0
   14ecc:	movw	r7, #46380	; 0xb52c
   14ed0:	movt	r7, #2
   14ed4:	ldr	r0, [r7]
   14ed8:	ldr	r0, [r0, r6, lsl #2]
   14edc:	bl	11730 <close@plt>
   14ee0:	cmp	r0, #0
   14ee4:	bne	14f88 <__assert_fail@plt+0x3840>
   14ee8:	add	r6, r6, #1
   14eec:	ldr	r0, [r4]
   14ef0:	cmp	r6, r0
   14ef4:	bcc	14ed4 <__assert_fail@plt+0x378c>
   14ef8:	ldr	r0, [sp, #12]
   14efc:	bl	11730 <close@plt>
   14f00:	cmp	r0, #0
   14f04:	bne	14f9c <__assert_fail@plt+0x3854>
   14f08:	ldr	r0, [sp, #8]
   14f0c:	cmp	r0, #0
   14f10:	bne	14fc8 <__assert_fail@plt+0x3880>
   14f14:	movw	r1, #46216	; 0xb488
   14f18:	movt	r1, #2
   14f1c:	mov	r4, #0
   14f20:	mov	r0, #2
   14f24:	mov	r2, #0
   14f28:	bl	11400 <sigprocmask@plt>
   14f2c:	mov	r0, r5
   14f30:	bl	152b0 <__assert_fail@plt+0x3b68>
   14f34:	mov	r1, r0
   14f38:	ldr	r3, [r8]
   14f3c:	str	r4, [sp]
   14f40:	movw	r2, #41085	; 0xa07d
   14f44:	movt	r2, #1
   14f48:	mov	r0, r5
   14f4c:	bl	116c4 <execl@plt>
   14f50:	bl	115f8 <__errno_location@plt>
   14f54:	ldr	r4, [r0]
   14f58:	movw	r1, #41088	; 0xa080
   14f5c:	movt	r1, #1
   14f60:	mov	r0, #0
   14f64:	mov	r2, #5
   14f68:	bl	1146c <dcgettext@plt>
   14f6c:	mov	r2, r0
   14f70:	ldr	r0, [r8]
   14f74:	str	r0, [sp]
   14f78:	mov	r0, #1
   14f7c:	mov	r1, r4
   14f80:	mov	r3, r5
   14f84:	bl	1152c <error@plt>
   14f88:	bl	115f8 <__errno_location@plt>
   14f8c:	ldr	r4, [r0]
   14f90:	movw	r1, #41009	; 0xa031
   14f94:	movt	r1, #1
   14f98:	b	14fac <__assert_fail@plt+0x3864>
   14f9c:	bl	115f8 <__errno_location@plt>
   14fa0:	ldr	r4, [r0]
   14fa4:	movw	r1, #41028	; 0xa044
   14fa8:	movt	r1, #1
   14fac:	mov	r0, #0
   14fb0:	mov	r2, #5
   14fb4:	bl	1146c <dcgettext@plt>
   14fb8:	mov	r2, r0
   14fbc:	mov	r0, #1
   14fc0:	mov	r1, r4
   14fc4:	bl	1152c <error@plt>
   14fc8:	mov	r1, #0
   14fcc:	bl	11478 <dup2@plt>
   14fd0:	cmp	r0, #0
   14fd4:	bne	14ffc <__assert_fail@plt+0x38b4>
   14fd8:	ldr	r0, [sp, #8]
   14fdc:	bl	11730 <close@plt>
   14fe0:	cmp	r0, #0
   14fe4:	beq	14f14 <__assert_fail@plt+0x37cc>
   14fe8:	bl	115f8 <__errno_location@plt>
   14fec:	ldr	r4, [r0]
   14ff0:	movw	r1, #41066	; 0xa06a
   14ff4:	movt	r1, #1
   14ff8:	b	14fac <__assert_fail@plt+0x3864>
   14ffc:	bl	115f8 <__errno_location@plt>
   15000:	ldr	r4, [r0]
   15004:	movw	r1, #41048	; 0xa058
   15008:	movt	r1, #1
   1500c:	b	14fac <__assert_fail@plt+0x3864>
   15010:	bl	115f8 <__errno_location@plt>
   15014:	ldr	r4, [r0]
   15018:	movw	r1, #40923	; 0x9fdb
   1501c:	movt	r1, #1
   15020:	b	14fac <__assert_fail@plt+0x3864>
   15024:	bl	115f8 <__errno_location@plt>
   15028:	ldr	r4, [r0]
   1502c:	movw	r1, #40987	; 0xa01b
   15030:	movt	r1, #1
   15034:	b	14fac <__assert_fail@plt+0x3864>
   15038:	bl	115f8 <__errno_location@plt>
   1503c:	ldr	r4, [r0]
   15040:	movw	r1, #41122	; 0xa0a2
   15044:	movt	r1, #1
   15048:	b	14fac <__assert_fail@plt+0x3864>
   1504c:	bl	115f8 <__errno_location@plt>
   15050:	ldr	r4, [r0]
   15054:	movw	r1, #41146	; 0xa0ba
   15058:	movt	r1, #1
   1505c:	b	14fac <__assert_fail@plt+0x3864>
   15060:	bl	115f8 <__errno_location@plt>
   15064:	ldr	r5, [r0]
   15068:	movw	r1, #40830	; 0x9f7e
   1506c:	movt	r1, #1
   15070:	mov	r0, #0
   15074:	mov	r2, #5
   15078:	bl	1146c <dcgettext@plt>
   1507c:	mov	r6, r0
   15080:	mov	r0, #4
   15084:	mov	r1, r4
   15088:	bl	16dd4 <__assert_fail@plt+0x568c>
   1508c:	b	150f8 <__assert_fail@plt+0x39b0>
   15090:	movw	r1, #40848	; 0x9f90
   15094:	movt	r1, #1
   15098:	mov	r0, #0
   1509c:	mov	r2, #5
   150a0:	bl	1146c <dcgettext@plt>
   150a4:	mov	r5, r0
   150a8:	mov	r0, #4
   150ac:	mov	r1, r4
   150b0:	bl	16dd4 <__assert_fail@plt+0x568c>
   150b4:	mov	r3, r0
   150b8:	mov	r0, #1
   150bc:	mov	r1, #0
   150c0:	mov	r2, r5
   150c4:	bl	1152c <error@plt>
   150c8:	bl	115f8 <__errno_location@plt>
   150cc:	ldr	r5, [r0]
   150d0:	movw	r1, #40883	; 0x9fb3
   150d4:	movt	r1, #1
   150d8:	mov	r0, #0
   150dc:	mov	r2, #5
   150e0:	bl	1146c <dcgettext@plt>
   150e4:	mov	r6, r0
   150e8:	mov	r0, #0
   150ec:	mov	r1, #3
   150f0:	mov	r2, r4
   150f4:	bl	16e88 <__assert_fail@plt+0x5740>
   150f8:	mov	r3, r0
   150fc:	mov	r0, #1
   15100:	mov	r1, r5
   15104:	mov	r2, r6
   15108:	bl	1152c <error@plt>
   1510c:	sub	r0, r0, #32
   15110:	clz	r0, r0
   15114:	lsr	r0, r0, #5
   15118:	movw	r1, #45972	; 0xb394
   1511c:	movt	r1, #2
   15120:	ldr	r1, [r1]
   15124:	cmp	r1, #0
   15128:	movwne	r1, #1
   1512c:	and	r0, r0, r1
   15130:	bx	lr
   15134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15138:	add	fp, sp, #28
   1513c:	sub	sp, sp, #12
   15140:	mov	r5, r1
   15144:	mov	r4, r0
   15148:	add	r1, r0, r1, lsl #4
   1514c:	mov	r7, r1
   15150:	ldr	r0, [r7, #4]!
   15154:	mov	r9, #0
   15158:	cmn	r0, #1
   1515c:	bgt	15268 <__assert_fail@plt+0x3b20>
   15160:	str	r1, [sp, #4]
   15164:	sub	r8, r2, #1
   15168:	cmp	r5, #0
   1516c:	mov	r6, r8
   15170:	subne	r6, r5, #1
   15174:	mov	r9, #0
   15178:	str	r7, [sp, #8]
   1517c:	b	15198 <__assert_fail@plt+0x3a50>
   15180:	mov	r0, #0
   15184:	str	r0, [sl]
   15188:	mvn	r0, #1
   1518c:	str	r0, [r9]
   15190:	mov	r9, #1
   15194:	ldr	r7, [sp, #8]
   15198:	ldr	r0, [r4, r5, lsl #4]
   1519c:	ldr	r1, [r7]
   151a0:	cmn	r1, #1
   151a4:	beq	151bc <__assert_fail@plt+0x3a74>
   151a8:	movw	r1, #3073	; 0xc01
   151ac:	bl	154dc <__assert_fail@plt+0x3d94>
   151b0:	cmn	r0, #1
   151b4:	ble	151c8 <__assert_fail@plt+0x3a80>
   151b8:	b	15230 <__assert_fail@plt+0x3ae8>
   151bc:	bl	14c50 <__assert_fail@plt+0x3508>
   151c0:	cmn	r0, #1
   151c4:	bgt	15230 <__assert_fail@plt+0x3ae8>
   151c8:	bl	115f8 <__errno_location@plt>
   151cc:	mov	r7, r0
   151d0:	ldr	r1, [r0]
   151d4:	sub	r0, r1, #23
   151d8:	cmp	r0, #1
   151dc:	bhi	15274 <__assert_fail@plt+0x3b2c>
   151e0:	add	sl, r4, r6, lsl #4
   151e4:	mov	r9, sl
   151e8:	ldr	r0, [r9, #4]!
   151ec:	cmn	r0, #1
   151f0:	bgt	15210 <__assert_fail@plt+0x3ac8>
   151f4:	cmp	r6, #0
   151f8:	mov	r0, r8
   151fc:	subne	r0, r6, #1
   15200:	cmp	r0, r5
   15204:	mov	r6, r0
   15208:	bne	151e0 <__assert_fail@plt+0x3a98>
   1520c:	b	15274 <__assert_fail@plt+0x3b2c>
   15210:	ldr	r0, [sl, #8]!
   15214:	bl	1543c <__assert_fail@plt+0x3cf4>
   15218:	cmp	r0, #0
   1521c:	beq	15180 <__assert_fail@plt+0x3a38>
   15220:	ldr	r2, [r4, r6, lsl #4]
   15224:	ldr	r4, [r7]
   15228:	mov	r0, #0
   1522c:	b	15280 <__assert_fail@plt+0x3b38>
   15230:	str	r0, [r7]
   15234:	movw	r1, #41374	; 0xa19e
   15238:	movt	r1, #1
   1523c:	bl	113a0 <fdopen@plt>
   15240:	ldr	r2, [sp, #4]
   15244:	str	r0, [r2, #8]
   15248:	cmp	r0, #0
   1524c:	beq	152a0 <__assert_fail@plt+0x3b58>
   15250:	movw	r0, #46344	; 0xb508
   15254:	movt	r0, #2
   15258:	ldr	r1, [r0]
   1525c:	str	r1, [r2, #12]
   15260:	mov	r1, #0
   15264:	str	r1, [r0]
   15268:	and	r0, r9, #1
   1526c:	sub	sp, fp, #28
   15270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15274:	ldr	r2, [r4, r5, lsl #4]
   15278:	mov	r0, #0
   1527c:	mov	r4, r1
   15280:	mov	r1, #3
   15284:	bl	16e88 <__assert_fail@plt+0x5740>
   15288:	mov	r3, r0
   1528c:	movw	r2, #41482	; 0xa20a
   15290:	movt	r2, #1
   15294:	mov	r0, #1
   15298:	mov	r1, r4
   1529c:	bl	1152c <error@plt>
   152a0:	bl	115f8 <__errno_location@plt>
   152a4:	ldr	r2, [r4, r5, lsl #4]
   152a8:	ldr	r4, [r0]
   152ac:	b	15228 <__assert_fail@plt+0x3ae0>
   152b0:	sub	r0, r0, #1
   152b4:	ldrb	r3, [r0, #1]!
   152b8:	cmp	r3, #47	; 0x2f
   152bc:	beq	152b4 <__assert_fail@plt+0x3b6c>
   152c0:	mov	r2, #0
   152c4:	mov	r1, r0
   152c8:	b	152e4 <__assert_fail@plt+0x3b9c>
   152cc:	cmp	r3, #0
   152d0:	bxeq	lr
   152d4:	tst	r2, #1
   152d8:	movne	r0, r1
   152dc:	mov	r2, #0
   152e0:	ldrb	r3, [r1, #1]!
   152e4:	uxtb	r3, r3
   152e8:	cmp	r3, #47	; 0x2f
   152ec:	bne	152cc <__assert_fail@plt+0x3b84>
   152f0:	mov	r2, #1
   152f4:	ldrb	r3, [r1, #1]!
   152f8:	b	152e4 <__assert_fail@plt+0x3b9c>
   152fc:	push	{r4, sl, fp, lr}
   15300:	add	fp, sp, #8
   15304:	mov	r4, r0
   15308:	bl	115b0 <strlen@plt>
   1530c:	mov	r1, r0
   15310:	sub	r2, r4, #1
   15314:	mov	r0, r1
   15318:	cmp	r1, #2
   1531c:	popcc	{r4, sl, fp, pc}
   15320:	ldrb	r3, [r2, r0]
   15324:	sub	r1, r0, #1
   15328:	cmp	r3, #47	; 0x2f
   1532c:	beq	15314 <__assert_fail@plt+0x3bcc>
   15330:	pop	{r4, sl, fp, pc}
   15334:	movw	r1, #46388	; 0xb534
   15338:	movt	r1, #2
   1533c:	str	r0, [r1]
   15340:	bx	lr
   15344:	movw	r1, #46392	; 0xb538
   15348:	movt	r1, #2
   1534c:	strb	r0, [r1]
   15350:	bx	lr
   15354:	push	{r4, r5, r6, sl, fp, lr}
   15358:	add	fp, sp, #16
   1535c:	sub	sp, sp, #8
   15360:	movw	r0, #45932	; 0xb36c
   15364:	movt	r0, #2
   15368:	ldr	r0, [r0]
   1536c:	bl	18ad0 <__assert_fail@plt+0x7388>
   15370:	cmp	r0, #0
   15374:	beq	1539c <__assert_fail@plt+0x3c54>
   15378:	movw	r0, #46392	; 0xb538
   1537c:	movt	r0, #2
   15380:	ldrb	r0, [r0]
   15384:	cmp	r0, #0
   15388:	beq	153bc <__assert_fail@plt+0x3c74>
   1538c:	bl	115f8 <__errno_location@plt>
   15390:	ldr	r0, [r0]
   15394:	cmp	r0, #32
   15398:	bne	153bc <__assert_fail@plt+0x3c74>
   1539c:	movw	r0, #45928	; 0xb368
   153a0:	movt	r0, #2
   153a4:	ldr	r0, [r0]
   153a8:	bl	18ad0 <__assert_fail@plt+0x7388>
   153ac:	cmp	r0, #0
   153b0:	subeq	sp, fp, #16
   153b4:	popeq	{r4, r5, r6, sl, fp, pc}
   153b8:	b	1542c <__assert_fail@plt+0x3ce4>
   153bc:	movw	r1, #41362	; 0xa192
   153c0:	movt	r1, #1
   153c4:	mov	r0, #0
   153c8:	mov	r2, #5
   153cc:	bl	1146c <dcgettext@plt>
   153d0:	mov	r4, r0
   153d4:	movw	r0, #46388	; 0xb534
   153d8:	movt	r0, #2
   153dc:	ldr	r6, [r0]
   153e0:	bl	115f8 <__errno_location@plt>
   153e4:	ldr	r5, [r0]
   153e8:	cmp	r6, #0
   153ec:	bne	15408 <__assert_fail@plt+0x3cc0>
   153f0:	movw	r2, #41482	; 0xa20a
   153f4:	movt	r2, #1
   153f8:	mov	r0, #0
   153fc:	mov	r1, r5
   15400:	mov	r3, r4
   15404:	b	15428 <__assert_fail@plt+0x3ce0>
   15408:	mov	r0, r6
   1540c:	bl	16e78 <__assert_fail@plt+0x5730>
   15410:	mov	r3, r0
   15414:	str	r4, [sp]
   15418:	movw	r2, #39701	; 0x9b15
   1541c:	movt	r2, #1
   15420:	mov	r0, #0
   15424:	mov	r1, r5
   15428:	bl	1152c <error@plt>
   1542c:	movw	r0, #45416	; 0xb168
   15430:	movt	r0, #2
   15434:	ldr	r0, [r0]
   15438:	bl	11424 <_exit@plt>
   1543c:	push	{r4, r5, fp, lr}
   15440:	add	fp, sp, #8
   15444:	sub	sp, sp, #8
   15448:	mov	r4, r0
   1544c:	bl	11640 <fileno@plt>
   15450:	cmn	r0, #1
   15454:	ble	154cc <__assert_fail@plt+0x3d84>
   15458:	mov	r0, r4
   1545c:	bl	11574 <__freading@plt>
   15460:	cmp	r0, #0
   15464:	beq	15490 <__assert_fail@plt+0x3d48>
   15468:	mov	r0, r4
   1546c:	bl	11640 <fileno@plt>
   15470:	mov	r1, #1
   15474:	str	r1, [sp]
   15478:	mov	r2, #0
   1547c:	mov	r3, #0
   15480:	bl	114d8 <lseek64@plt>
   15484:	and	r0, r0, r1
   15488:	cmn	r0, #1
   1548c:	beq	154cc <__assert_fail@plt+0x3d84>
   15490:	mov	r0, r4
   15494:	bl	1558c <__assert_fail@plt+0x3e44>
   15498:	cmp	r0, #0
   1549c:	beq	154cc <__assert_fail@plt+0x3d84>
   154a0:	bl	115f8 <__errno_location@plt>
   154a4:	ldr	r5, [r0]
   154a8:	mov	r0, r4
   154ac:	bl	11670 <fclose@plt>
   154b0:	cmp	r5, #0
   154b4:	beq	154c4 <__assert_fail@plt+0x3d7c>
   154b8:	bl	115f8 <__errno_location@plt>
   154bc:	str	r5, [r0]
   154c0:	mvn	r0, #0
   154c4:	sub	sp, fp, #8
   154c8:	pop	{r4, r5, fp, pc}
   154cc:	mov	r0, r4
   154d0:	sub	sp, fp, #8
   154d4:	pop	{r4, r5, fp, lr}
   154d8:	b	11670 <fclose@plt>
   154dc:	sub	sp, sp, #8
   154e0:	push	{fp, lr}
   154e4:	mov	fp, sp
   154e8:	sub	sp, sp, #8
   154ec:	str	r3, [fp, #12]
   154f0:	str	r2, [fp, #8]
   154f4:	mov	r2, #0
   154f8:	tst	r1, #64	; 0x40
   154fc:	addne	r2, fp, #8
   15500:	orrne	r2, r2, #4
   15504:	strne	r2, [sp, #4]
   15508:	ldrne	r2, [fp, #8]
   1550c:	bl	11538 <open64@plt>
   15510:	bl	17774 <__assert_fail@plt+0x602c>
   15514:	mov	sp, fp
   15518:	pop	{fp, lr}
   1551c:	add	sp, sp, #8
   15520:	bx	lr
   15524:	push	{r4, r5, r6, r7, fp, lr}
   15528:	add	fp, sp, #16
   1552c:	mov	r5, r0
   15530:	mov	r0, r1
   15534:	mov	r1, r2
   15538:	mov	r2, r3
   1553c:	bl	11538 <open64@plt>
   15540:	mov	r4, r0
   15544:	cmp	r0, r5
   15548:	beq	15584 <__assert_fail@plt+0x3e3c>
   1554c:	cmp	r4, #0
   15550:	blt	15584 <__assert_fail@plt+0x3e3c>
   15554:	mov	r0, r4
   15558:	mov	r1, r5
   1555c:	bl	11478 <dup2@plt>
   15560:	mov	r5, r0
   15564:	bl	115f8 <__errno_location@plt>
   15568:	mov	r6, r0
   1556c:	ldr	r7, [r0]
   15570:	mov	r0, r4
   15574:	bl	11730 <close@plt>
   15578:	str	r7, [r6]
   1557c:	mov	r0, r5
   15580:	pop	{r4, r5, r6, r7, fp, pc}
   15584:	mov	r0, r4
   15588:	pop	{r4, r5, r6, r7, fp, pc}
   1558c:	push	{r4, sl, fp, lr}
   15590:	add	fp, sp, #8
   15594:	mov	r4, r0
   15598:	cmp	r0, #0
   1559c:	beq	155b4 <__assert_fail@plt+0x3e6c>
   155a0:	mov	r0, r4
   155a4:	bl	11574 <__freading@plt>
   155a8:	cmp	r0, #0
   155ac:	movne	r0, r4
   155b0:	blne	155c0 <__assert_fail@plt+0x3e78>
   155b4:	mov	r0, r4
   155b8:	pop	{r4, sl, fp, lr}
   155bc:	b	113f4 <fflush@plt>
   155c0:	ldrb	r1, [r0, #1]
   155c4:	tst	r1, #1
   155c8:	bxeq	lr
   155cc:	push	{fp, lr}
   155d0:	mov	fp, sp
   155d4:	sub	sp, sp, #8
   155d8:	mov	r1, #1
   155dc:	str	r1, [sp]
   155e0:	mov	r2, #0
   155e4:	mov	r3, #0
   155e8:	bl	1561c <__assert_fail@plt+0x3ed4>
   155ec:	mov	sp, fp
   155f0:	pop	{fp, pc}
   155f4:	push	{r4, r5, r6, sl, fp, lr}
   155f8:	add	fp, sp, #16
   155fc:	mov	r4, r0
   15600:	bl	115f8 <__errno_location@plt>
   15604:	mov	r5, r0
   15608:	ldr	r6, [r0]
   1560c:	mov	r0, r4
   15610:	bl	11418 <free@plt>
   15614:	str	r6, [r5]
   15618:	pop	{r4, r5, r6, sl, fp, pc}
   1561c:	push	{r4, r5, r6, r7, fp, lr}
   15620:	add	fp, sp, #16
   15624:	sub	sp, sp, #8
   15628:	mov	r5, r3
   1562c:	mov	r6, r2
   15630:	mov	r4, r0
   15634:	ldr	r0, [r0, #4]
   15638:	ldr	r1, [r4, #8]
   1563c:	cmp	r1, r0
   15640:	bne	1565c <__assert_fail@plt+0x3f14>
   15644:	ldrd	r0, [r4, #16]
   15648:	cmp	r1, r0
   1564c:	bne	1565c <__assert_fail@plt+0x3f14>
   15650:	ldr	r0, [r4, #36]	; 0x24
   15654:	cmp	r0, #0
   15658:	beq	15674 <__assert_fail@plt+0x3f2c>
   1565c:	mov	r0, r4
   15660:	mov	r2, r6
   15664:	mov	r3, r5
   15668:	sub	sp, fp, #16
   1566c:	pop	{r4, r5, r6, r7, fp, lr}
   15670:	b	11688 <fseeko64@plt>
   15674:	ldr	r7, [fp, #8]
   15678:	mov	r0, r4
   1567c:	bl	11640 <fileno@plt>
   15680:	str	r7, [sp]
   15684:	mov	r2, r6
   15688:	mov	r3, r5
   1568c:	bl	114d8 <lseek64@plt>
   15690:	and	r2, r0, r1
   15694:	cmn	r2, #1
   15698:	mvneq	r0, #0
   1569c:	subeq	sp, fp, #16
   156a0:	popeq	{r4, r5, r6, r7, fp, pc}
   156a4:	strd	r0, [r4, #80]	; 0x50
   156a8:	ldr	r0, [r4]
   156ac:	bic	r0, r0, #16
   156b0:	str	r0, [r4]
   156b4:	mov	r0, #0
   156b8:	sub	sp, fp, #16
   156bc:	pop	{r4, r5, r6, r7, fp, pc}
   156c0:	push	{r4, r5, r6, r7, fp, lr}
   156c4:	add	fp, sp, #16
   156c8:	cmp	r2, #0
   156cc:	moveq	r4, #0
   156d0:	moveq	r0, r4
   156d4:	popeq	{r4, r5, r6, r7, fp, pc}
   156d8:	mov	r5, r2
   156dc:	mov	r6, r1
   156e0:	mov	r7, r0
   156e4:	mov	r4, #0
   156e8:	mov	r0, r7
   156ec:	mov	r1, r6
   156f0:	mov	r2, r5
   156f4:	bl	17470 <__assert_fail@plt+0x5d28>
   156f8:	cmn	r0, #1
   156fc:	beq	15718 <__assert_fail@plt+0x3fd0>
   15700:	cmp	r0, #0
   15704:	beq	15720 <__assert_fail@plt+0x3fd8>
   15708:	subs	r5, r5, r0
   1570c:	add	r6, r6, r0
   15710:	add	r4, r0, r4
   15714:	bne	156e8 <__assert_fail@plt+0x3fa0>
   15718:	mov	r0, r4
   1571c:	pop	{r4, r5, r6, r7, fp, pc}
   15720:	bl	115f8 <__errno_location@plt>
   15724:	mov	r1, #28
   15728:	str	r1, [r0]
   1572c:	mov	r0, r4
   15730:	pop	{r4, r5, r6, r7, fp, pc}
   15734:	push	{r4, r5, r6, sl, fp, lr}
   15738:	add	fp, sp, #16
   1573c:	mov	r4, r1
   15740:	mov	r5, r0
   15744:	mov	r0, #0
   15748:	strb	r0, [r2, #20]
   1574c:	add	r6, r2, #19
   15750:	mov	r0, r5
   15754:	mov	r1, r4
   15758:	mov	r2, #10
   1575c:	mov	r3, #0
   15760:	bl	18f78 <__assert_fail@plt+0x7830>
   15764:	add	r2, r0, r0, lsl #2
   15768:	sub	r2, r5, r2, lsl #1
   1576c:	orr	r2, r2, #48	; 0x30
   15770:	strb	r2, [r6], #-1
   15774:	rsbs	r2, r5, #9
   15778:	rscs	r2, r4, #0
   1577c:	mov	r5, r0
   15780:	mov	r4, r1
   15784:	bcc	15750 <__assert_fail@plt+0x4008>
   15788:	add	r0, r6, #1
   1578c:	pop	{r4, r5, r6, sl, fp, pc}
   15790:	push	{r4, r5, fp, lr}
   15794:	add	fp, sp, #8
   15798:	cmp	r0, #0
   1579c:	beq	15830 <__assert_fail@plt+0x40e8>
   157a0:	mov	r4, r0
   157a4:	mov	r1, #47	; 0x2f
   157a8:	bl	116d0 <strrchr@plt>
   157ac:	cmp	r0, #0
   157b0:	mov	r5, r4
   157b4:	addne	r5, r0, #1
   157b8:	sub	r0, r5, r4
   157bc:	cmp	r0, #7
   157c0:	blt	15814 <__assert_fail@plt+0x40cc>
   157c4:	sub	r0, r5, #7
   157c8:	movw	r1, #41935	; 0xa3cf
   157cc:	movt	r1, #1
   157d0:	mov	r2, #7
   157d4:	bl	11718 <strncmp@plt>
   157d8:	cmp	r0, #0
   157dc:	bne	15814 <__assert_fail@plt+0x40cc>
   157e0:	movw	r1, #41943	; 0xa3d7
   157e4:	movt	r1, #1
   157e8:	mov	r0, r5
   157ec:	mov	r2, #3
   157f0:	bl	11718 <strncmp@plt>
   157f4:	cmp	r0, #0
   157f8:	beq	15804 <__assert_fail@plt+0x40bc>
   157fc:	mov	r4, r5
   15800:	b	15814 <__assert_fail@plt+0x40cc>
   15804:	add	r4, r5, #3
   15808:	movw	r0, #45912	; 0xb358
   1580c:	movt	r0, #2
   15810:	str	r4, [r0]
   15814:	movw	r0, #45916	; 0xb35c
   15818:	movt	r0, #2
   1581c:	str	r4, [r0]
   15820:	movw	r0, #46396	; 0xb53c
   15824:	movt	r0, #2
   15828:	str	r4, [r0]
   1582c:	pop	{r4, r5, fp, pc}
   15830:	movw	r0, #45928	; 0xb368
   15834:	movt	r0, #2
   15838:	ldr	r3, [r0]
   1583c:	movw	r0, #41879	; 0xa397
   15840:	movt	r0, #1
   15844:	mov	r1, #55	; 0x37
   15848:	mov	r2, #1
   1584c:	bl	114cc <fwrite@plt>
   15850:	bl	11724 <abort@plt>
   15854:	push	{r4, r5, r6, sl, fp, lr}
   15858:	add	fp, sp, #16
   1585c:	mov	r4, r0
   15860:	movw	r0, #46400	; 0xb540
   15864:	movt	r0, #2
   15868:	cmp	r4, #0
   1586c:	moveq	r4, r0
   15870:	bl	115f8 <__errno_location@plt>
   15874:	mov	r5, r0
   15878:	ldr	r6, [r0]
   1587c:	mov	r0, r4
   15880:	mov	r1, #48	; 0x30
   15884:	bl	17f88 <__assert_fail@plt+0x6840>
   15888:	str	r6, [r5]
   1588c:	pop	{r4, r5, r6, sl, fp, pc}
   15890:	movw	r1, #46400	; 0xb540
   15894:	movt	r1, #2
   15898:	cmp	r0, #0
   1589c:	movne	r1, r0
   158a0:	ldr	r0, [r1]
   158a4:	bx	lr
   158a8:	movw	r2, #46400	; 0xb540
   158ac:	movt	r2, #2
   158b0:	cmp	r0, #0
   158b4:	movne	r2, r0
   158b8:	str	r1, [r2]
   158bc:	bx	lr
   158c0:	movw	r3, #46400	; 0xb540
   158c4:	movt	r3, #2
   158c8:	cmp	r0, #0
   158cc:	movne	r3, r0
   158d0:	ubfx	r0, r1, #5, #3
   158d4:	add	r0, r3, r0, lsl #2
   158d8:	ldr	r3, [r0, #8]
   158dc:	and	r1, r1, #31
   158e0:	eor	r2, r2, r3, lsr r1
   158e4:	and	r2, r2, #1
   158e8:	eor	r2, r3, r2, lsl r1
   158ec:	str	r2, [r0, #8]
   158f0:	mov	r0, #1
   158f4:	and	r0, r0, r3, lsr r1
   158f8:	bx	lr
   158fc:	movw	r2, #46400	; 0xb540
   15900:	movt	r2, #2
   15904:	cmp	r0, #0
   15908:	movne	r2, r0
   1590c:	ldr	r0, [r2, #4]
   15910:	str	r1, [r2, #4]
   15914:	bx	lr
   15918:	movw	r3, #46400	; 0xb540
   1591c:	movt	r3, #2
   15920:	cmp	r0, #0
   15924:	movne	r3, r0
   15928:	mov	r0, #10
   1592c:	str	r0, [r3]
   15930:	cmp	r1, #0
   15934:	cmpne	r2, #0
   15938:	bne	15948 <__assert_fail@plt+0x4200>
   1593c:	push	{fp, lr}
   15940:	mov	fp, sp
   15944:	bl	11724 <abort@plt>
   15948:	str	r1, [r3, #40]	; 0x28
   1594c:	str	r2, [r3, #44]	; 0x2c
   15950:	bx	lr
   15954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15958:	add	fp, sp, #28
   1595c:	sub	sp, sp, #20
   15960:	mov	r8, r3
   15964:	mov	r9, r2
   15968:	mov	sl, r1
   1596c:	mov	r7, r0
   15970:	ldr	r0, [fp, #8]
   15974:	movw	r5, #46400	; 0xb540
   15978:	movt	r5, #2
   1597c:	cmp	r0, #0
   15980:	movne	r5, r0
   15984:	bl	115f8 <__errno_location@plt>
   15988:	mov	r4, r0
   1598c:	ldm	r5, {r0, r1}
   15990:	ldr	r2, [r5, #40]	; 0x28
   15994:	ldr	r3, [r5, #44]	; 0x2c
   15998:	ldr	r6, [r4]
   1599c:	add	r5, r5, #8
   159a0:	stm	sp, {r0, r1, r5}
   159a4:	str	r2, [sp, #12]
   159a8:	str	r3, [sp, #16]
   159ac:	mov	r0, r7
   159b0:	mov	r1, sl
   159b4:	mov	r2, r9
   159b8:	mov	r3, r8
   159bc:	bl	159cc <__assert_fail@plt+0x4284>
   159c0:	str	r6, [r4]
   159c4:	sub	sp, fp, #28
   159c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159d0:	add	fp, sp, #28
   159d4:	sub	sp, sp, #156	; 0x9c
   159d8:	mov	r9, r3
   159dc:	str	r2, [fp, #-84]	; 0xffffffac
   159e0:	mov	r6, r1
   159e4:	mov	r7, r0
   159e8:	ldr	r0, [fp, #12]
   159ec:	and	r1, r0, #4
   159f0:	str	r1, [sp, #32]
   159f4:	and	r1, r0, #1
   159f8:	str	r1, [sp, #36]	; 0x24
   159fc:	ubfx	sl, r0, #1, #1
   15a00:	bl	114f0 <__ctype_get_mb_cur_max@plt>
   15a04:	str	r0, [sp, #40]	; 0x28
   15a08:	ldr	r0, [fp, #24]
   15a0c:	str	r0, [sp, #76]	; 0x4c
   15a10:	ldr	r0, [fp, #20]
   15a14:	str	r0, [sp, #68]	; 0x44
   15a18:	ldr	r0, [fp, #8]
   15a1c:	str	r0, [fp, #-60]	; 0xffffffc4
   15a20:	mov	r0, #0
   15a24:	str	r0, [sp, #72]	; 0x48
   15a28:	mov	r0, #0
   15a2c:	str	r0, [sp, #92]	; 0x5c
   15a30:	mov	r0, #0
   15a34:	str	r0, [fp, #-72]	; 0xffffffb8
   15a38:	mov	r0, #0
   15a3c:	mov	r1, #0
   15a40:	str	r1, [fp, #-56]	; 0xffffffc8
   15a44:	mov	r1, #0
   15a48:	str	r1, [sp, #56]	; 0x38
   15a4c:	mov	r5, #1
   15a50:	str	r7, [sp, #80]	; 0x50
   15a54:	mov	r4, r6
   15a58:	ldr	r6, [fp, #-60]	; 0xffffffc4
   15a5c:	cmp	r6, #10
   15a60:	bhi	169c8 <__assert_fail@plt+0x5280>
   15a64:	add	r1, pc, #20
   15a68:	mov	r8, #0
   15a6c:	mov	r2, #1
   15a70:	mov	r3, #0
   15a74:	ldr	ip, [fp, #-84]	; 0xffffffac
   15a78:	mov	lr, r9
   15a7c:	ldr	pc, [r1, r6, lsl #2]
   15a80:	andeq	r5, r1, r8, asr fp
   15a84:	andeq	r5, r1, r8, lsl #23
   15a88:	andeq	r5, r1, r8, asr #22
   15a8c:	andeq	r5, r1, r0, asr #22
   15a90:	andeq	r5, r1, ip, ror fp
   15a94:	ldrdeq	r5, [r1], -ip
   15a98:	andeq	r5, r1, r8, ror #22
   15a9c:	andeq	r5, r1, r8, lsr ip
   15aa0:	andeq	r5, r1, ip, lsr #21
   15aa4:	andeq	r5, r1, ip, lsr #21
   15aa8:	ldrdeq	r5, [r1], -r4
   15aac:	movw	r0, #42023	; 0xa427
   15ab0:	movt	r0, #1
   15ab4:	mov	r1, r6
   15ab8:	bl	16fd4 <__assert_fail@plt+0x588c>
   15abc:	str	r0, [sp, #68]	; 0x44
   15ac0:	movw	r0, #42025	; 0xa429
   15ac4:	movt	r0, #1
   15ac8:	mov	r1, r6
   15acc:	bl	16fd4 <__assert_fail@plt+0x588c>
   15ad0:	str	r0, [sp, #76]	; 0x4c
   15ad4:	mov	r8, #0
   15ad8:	tst	sl, #1
   15adc:	bne	15b14 <__assert_fail@plt+0x43cc>
   15ae0:	ldr	r0, [sp, #68]	; 0x44
   15ae4:	ldrb	r0, [r0]
   15ae8:	cmp	r0, #0
   15aec:	beq	15b14 <__assert_fail@plt+0x43cc>
   15af0:	ldr	r1, [sp, #68]	; 0x44
   15af4:	add	r1, r1, #1
   15af8:	mov	r8, #0
   15afc:	cmp	r8, r4
   15b00:	strbcc	r0, [r7, r8]
   15b04:	ldrb	r0, [r1, r8]
   15b08:	add	r8, r8, #1
   15b0c:	cmp	r0, #0
   15b10:	bne	15afc <__assert_fail@plt+0x43b4>
   15b14:	ldr	r6, [sp, #76]	; 0x4c
   15b18:	mov	r0, r6
   15b1c:	bl	115b0 <strlen@plt>
   15b20:	str	r0, [fp, #-72]	; 0xffffffb8
   15b24:	str	r6, [sp, #92]	; 0x5c
   15b28:	mov	r2, #1
   15b2c:	mov	r3, sl
   15b30:	ldr	ip, [fp, #-84]	; 0xffffffac
   15b34:	mov	lr, r9
   15b38:	ldr	r6, [fp, #-60]	; 0xffffffc4
   15b3c:	b	15c38 <__assert_fail@plt+0x44f0>
   15b40:	mov	r0, #1
   15b44:	b	15b88 <__assert_fail@plt+0x4440>
   15b48:	tst	sl, #1
   15b4c:	bne	15b88 <__assert_fail@plt+0x4440>
   15b50:	mov	r2, r0
   15b54:	b	15bb0 <__assert_fail@plt+0x4468>
   15b58:	mov	r6, #0
   15b5c:	mov	r8, #0
   15b60:	mov	r2, r0
   15b64:	b	15c34 <__assert_fail@plt+0x44ec>
   15b68:	mov	r0, #1
   15b6c:	str	r0, [fp, #-72]	; 0xffffffb8
   15b70:	mov	r8, #0
   15b74:	mov	r6, #5
   15b78:	b	15bf4 <__assert_fail@plt+0x44ac>
   15b7c:	mov	r2, #1
   15b80:	tst	sl, #1
   15b84:	beq	15bb0 <__assert_fail@plt+0x4468>
   15b88:	mov	r1, #1
   15b8c:	str	r1, [fp, #-72]	; 0xffffffb8
   15b90:	mov	r8, #0
   15b94:	mov	r6, #2
   15b98:	movw	r1, #42025	; 0xa429
   15b9c:	movt	r1, #1
   15ba0:	str	r1, [sp, #92]	; 0x5c
   15ba4:	mov	r2, r0
   15ba8:	mov	r3, #1
   15bac:	b	15c38 <__assert_fail@plt+0x44f0>
   15bb0:	mov	r8, #1
   15bb4:	mov	r6, #2
   15bb8:	cmp	r4, #0
   15bbc:	movne	r0, #39	; 0x27
   15bc0:	strbne	r0, [r7]
   15bc4:	movw	r0, #42025	; 0xa429
   15bc8:	movt	r0, #1
   15bcc:	str	r0, [sp, #92]	; 0x5c
   15bd0:	mov	r0, #1
   15bd4:	str	r0, [fp, #-72]	; 0xffffffb8
   15bd8:	b	15c34 <__assert_fail@plt+0x44ec>
   15bdc:	mov	r6, #5
   15be0:	tst	sl, #1
   15be4:	beq	15c0c <__assert_fail@plt+0x44c4>
   15be8:	mov	r0, #1
   15bec:	str	r0, [fp, #-72]	; 0xffffffb8
   15bf0:	mov	r8, #0
   15bf4:	movw	r0, #41120	; 0xa0a0
   15bf8:	movt	r0, #1
   15bfc:	str	r0, [sp, #92]	; 0x5c
   15c00:	mov	r2, #1
   15c04:	mov	r3, #1
   15c08:	b	15c38 <__assert_fail@plt+0x44f0>
   15c0c:	cmp	r4, #0
   15c10:	movne	r0, #34	; 0x22
   15c14:	strbne	r0, [r7]
   15c18:	mov	r8, #1
   15c1c:	movw	r0, #41120	; 0xa0a0
   15c20:	movt	r0, #1
   15c24:	str	r0, [sp, #92]	; 0x5c
   15c28:	mov	r0, #1
   15c2c:	str	r0, [fp, #-72]	; 0xffffffb8
   15c30:	mov	r2, #1
   15c34:	mov	r3, #0
   15c38:	ldr	r0, [fp, #16]
   15c3c:	cmp	r0, #0
   15c40:	movwne	r0, #1
   15c44:	and	r0, r0, r3
   15c48:	str	r0, [fp, #-88]	; 0xffffffa8
   15c4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15c50:	cmp	r0, #0
   15c54:	movwne	r0, #1
   15c58:	and	r1, r0, r3
   15c5c:	and	r1, r2, r1
   15c60:	str	r1, [sp, #48]	; 0x30
   15c64:	str	r6, [fp, #-60]	; 0xffffffc4
   15c68:	subs	r6, r6, #2
   15c6c:	clz	r1, r6
   15c70:	lsr	r1, r1, #5
   15c74:	and	r1, r1, r3
   15c78:	str	r1, [sp, #60]	; 0x3c
   15c7c:	str	r6, [fp, #-80]	; 0xffffffb0
   15c80:	mov	r1, r6
   15c84:	movwne	r1, #1
   15c88:	str	r3, [fp, #-76]	; 0xffffffb4
   15c8c:	eor	r3, r3, #1
   15c90:	str	r3, [sp, #88]	; 0x58
   15c94:	orr	r3, r1, r3
   15c98:	str	r3, [sp, #64]	; 0x40
   15c9c:	and	r1, r1, r2
   15ca0:	str	r1, [fp, #-68]	; 0xffffffbc
   15ca4:	and	r0, r0, r1
   15ca8:	str	r0, [fp, #-64]	; 0xffffffc0
   15cac:	str	r2, [sp, #84]	; 0x54
   15cb0:	eor	r0, r2, #1
   15cb4:	str	r0, [sp, #52]	; 0x34
   15cb8:	mov	r6, #0
   15cbc:	cmn	lr, #1
   15cc0:	beq	15cd0 <__assert_fail@plt+0x4588>
   15cc4:	cmp	r6, lr
   15cc8:	bne	15cdc <__assert_fail@plt+0x4594>
   15ccc:	b	16848 <__assert_fail@plt+0x5100>
   15cd0:	ldrb	r0, [ip, r6]
   15cd4:	cmp	r0, #0
   15cd8:	beq	16848 <__assert_fail@plt+0x5100>
   15cdc:	str	r5, [fp, #-48]	; 0xffffffd0
   15ce0:	mov	sl, #0
   15ce4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15ce8:	cmp	r0, #0
   15cec:	beq	15d20 <__assert_fail@plt+0x45d8>
   15cf0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15cf4:	add	r5, r6, r0
   15cf8:	cmp	r0, #2
   15cfc:	bcc	15d18 <__assert_fail@plt+0x45d0>
   15d00:	cmn	lr, #1
   15d04:	bne	15d18 <__assert_fail@plt+0x45d0>
   15d08:	mov	r0, ip
   15d0c:	bl	115b0 <strlen@plt>
   15d10:	ldr	ip, [fp, #-84]	; 0xffffffac
   15d14:	mov	lr, r0
   15d18:	cmp	r5, lr
   15d1c:	bls	15d2c <__assert_fail@plt+0x45e4>
   15d20:	mov	r0, #0
   15d24:	str	r0, [fp, #-52]	; 0xffffffcc
   15d28:	b	15d78 <__assert_fail@plt+0x4630>
   15d2c:	mov	r5, r4
   15d30:	mov	r4, lr
   15d34:	add	r0, ip, r6
   15d38:	ldr	r1, [sp, #92]	; 0x5c
   15d3c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15d40:	bl	11460 <memcmp@plt>
   15d44:	cmp	r0, #0
   15d48:	mov	r1, r0
   15d4c:	movwne	r1, #1
   15d50:	ldr	r2, [sp, #88]	; 0x58
   15d54:	orr	r1, r1, r2
   15d58:	tst	r1, #1
   15d5c:	beq	1690c <__assert_fail@plt+0x51c4>
   15d60:	clz	r0, r0
   15d64:	lsr	r0, r0, #5
   15d68:	str	r0, [fp, #-52]	; 0xffffffcc
   15d6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15d70:	mov	lr, r4
   15d74:	mov	r4, r5
   15d78:	ldrb	r5, [ip, r6]
   15d7c:	cmp	r5, #126	; 0x7e
   15d80:	bhi	1613c <__assert_fail@plt+0x49f4>
   15d84:	mov	r9, #1
   15d88:	mov	r2, #110	; 0x6e
   15d8c:	mov	r0, #97	; 0x61
   15d90:	add	r3, pc, #4
   15d94:	mov	r1, #0
   15d98:	ldr	pc, [r3, r5, lsl #2]
   15d9c:	andeq	r6, r1, r4, lsr r0
   15da0:	andeq	r6, r1, ip, lsr r1
   15da4:	andeq	r6, r1, ip, lsr r1
   15da8:	andeq	r6, r1, ip, lsr r1
   15dac:	andeq	r6, r1, ip, lsr r1
   15db0:	andeq	r6, r1, ip, lsr r1
   15db4:	andeq	r6, r1, ip, lsr r1
   15db8:	andeq	r6, r1, r0, lsl #4
   15dbc:	andeq	r6, r1, r4, lsl r0
   15dc0:	andeq	r6, r1, ip
   15dc4:	andeq	r6, r1, r0, lsr #32
   15dc8:	andeq	r6, r1, r4, lsr #1
   15dcc:	andeq	r6, r1, r4
   15dd0:	andeq	r6, r1, ip, lsl r0
   15dd4:	andeq	r6, r1, ip, lsr r1
   15dd8:	andeq	r6, r1, ip, lsr r1
   15ddc:	andeq	r6, r1, ip, lsr r1
   15de0:	andeq	r6, r1, ip, lsr r1
   15de4:	andeq	r6, r1, ip, lsr r1
   15de8:	andeq	r6, r1, ip, lsr r1
   15dec:	andeq	r6, r1, ip, lsr r1
   15df0:	andeq	r6, r1, ip, lsr r1
   15df4:	andeq	r6, r1, ip, lsr r1
   15df8:	andeq	r6, r1, ip, lsr r1
   15dfc:	andeq	r6, r1, ip, lsr r1
   15e00:	andeq	r6, r1, ip, lsr r1
   15e04:	andeq	r6, r1, ip, lsr r1
   15e08:	andeq	r6, r1, ip, lsr r1
   15e0c:	andeq	r6, r1, ip, lsr r1
   15e10:	andeq	r6, r1, ip, lsr r1
   15e14:	andeq	r6, r1, ip, lsr r1
   15e18:	andeq	r6, r1, ip, lsr r1
   15e1c:			; <UNDEFINED> instruction: 0x000161b0
   15e20:			; <UNDEFINED> instruction: 0x000161b4
   15e24:			; <UNDEFINED> instruction: 0x000161b4
   15e28:	andeq	r5, r1, ip, lsr #31
   15e2c:			; <UNDEFINED> instruction: 0x000161b4
   15e30:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e34:			; <UNDEFINED> instruction: 0x000161b4
   15e38:	andeq	r6, r1, ip, lsr #1
   15e3c:			; <UNDEFINED> instruction: 0x000161b4
   15e40:			; <UNDEFINED> instruction: 0x000161b4
   15e44:			; <UNDEFINED> instruction: 0x000161b4
   15e48:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e50:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e54:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e58:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e5c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e60:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e64:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e68:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e6c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e70:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e74:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e78:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e7c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e80:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e84:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e88:			; <UNDEFINED> instruction: 0x000161b4
   15e8c:			; <UNDEFINED> instruction: 0x000161b4
   15e90:			; <UNDEFINED> instruction: 0x000161b4
   15e94:			; <UNDEFINED> instruction: 0x000161b4
   15e98:	andeq	r6, r1, r4, ror r0
   15e9c:	andeq	r6, r1, ip, lsr r1
   15ea0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ea4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ea8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15eac:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15eb0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15eb4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15eb8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ebc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ec0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ec4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ec8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ecc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ed0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ed4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ed8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15edc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ee0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ee4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ee8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15eec:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ef0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ef4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ef8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15efc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f00:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f04:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f08:			; <UNDEFINED> instruction: 0x000161b4
   15f0c:	andeq	r5, r1, r0, ror #31
   15f10:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f14:			; <UNDEFINED> instruction: 0x000161b4
   15f18:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f1c:			; <UNDEFINED> instruction: 0x000161b4
   15f20:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f24:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f28:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f2c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f30:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f34:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f38:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f3c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f40:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f44:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f48:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f50:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f54:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f58:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f5c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f60:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f64:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f68:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f6c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f70:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f74:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f78:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f7c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f80:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f84:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f88:	andeq	r5, r1, r0, asr #31
   15f8c:			; <UNDEFINED> instruction: 0x000161b4
   15f90:	andeq	r5, r1, r0, asr #31
   15f94:	andeq	r5, r1, ip, lsr #31
   15f98:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15f9c:	cmp	r0, #0
   15fa0:	beq	16214 <__assert_fail@plt+0x4acc>
   15fa4:	ldr	r0, [fp, #16]
   15fa8:	b	16218 <__assert_fail@plt+0x4ad0>
   15fac:	mov	r9, #0
   15fb0:	cmp	r6, #0
   15fb4:	beq	161b0 <__assert_fail@plt+0x4a68>
   15fb8:	mov	sl, #0
   15fbc:	b	15f98 <__assert_fail@plt+0x4850>
   15fc0:	mov	r9, #0
   15fc4:	cmn	lr, #1
   15fc8:	beq	16194 <__assert_fail@plt+0x4a4c>
   15fcc:	cmp	r6, #0
   15fd0:	bne	15fb8 <__assert_fail@plt+0x4870>
   15fd4:	cmp	lr, #1
   15fd8:	beq	161b0 <__assert_fail@plt+0x4a68>
   15fdc:	b	15fb8 <__assert_fail@plt+0x4870>
   15fe0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15fe4:	cmp	r0, #2
   15fe8:	bne	161dc <__assert_fail@plt+0x4a94>
   15fec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15ff0:	tst	r0, #1
   15ff4:	bne	16924 <__assert_fail@plt+0x51dc>
   15ff8:	mov	sl, #0
   15ffc:	mov	r0, #92	; 0x5c
   16000:	b	161f0 <__assert_fail@plt+0x4aa8>
   16004:	mov	r0, #102	; 0x66
   16008:	b	16200 <__assert_fail@plt+0x4ab8>
   1600c:	mov	r2, #116	; 0x74
   16010:	b	16020 <__assert_fail@plt+0x48d8>
   16014:	mov	r0, #98	; 0x62
   16018:	b	16200 <__assert_fail@plt+0x4ab8>
   1601c:	mov	r2, #114	; 0x72
   16020:	ldr	r0, [sp, #64]	; 0x40
   16024:	tst	r0, #1
   16028:	mov	r0, r2
   1602c:	bne	16200 <__assert_fail@plt+0x4ab8>
   16030:	b	16924 <__assert_fail@plt+0x51dc>
   16034:	ldr	r0, [sp, #84]	; 0x54
   16038:	tst	r0, #1
   1603c:	beq	162f0 <__assert_fail@plt+0x4ba8>
   16040:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16044:	tst	r0, #1
   16048:	bne	16924 <__assert_fail@plt+0x51dc>
   1604c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16050:	cmp	r0, #2
   16054:	ldr	r0, [fp, #-80]	; 0xffffffb0
   16058:	movwne	r0, #1
   1605c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16060:	orr	r0, r0, r2
   16064:	tst	r0, #1
   16068:	beq	166e4 <__assert_fail@plt+0x4f9c>
   1606c:	mov	r0, r8
   16070:	b	16718 <__assert_fail@plt+0x4fd0>
   16074:	mov	sl, #0
   16078:	mov	r5, #63	; 0x3f
   1607c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16080:	cmp	r0, #5
   16084:	beq	164a4 <__assert_fail@plt+0x4d5c>
   16088:	cmp	r0, #2
   1608c:	bne	16544 <__assert_fail@plt+0x4dfc>
   16090:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16094:	tst	r0, #1
   16098:	mov	r9, #0
   1609c:	beq	15f98 <__assert_fail@plt+0x4850>
   160a0:	b	16924 <__assert_fail@plt+0x51dc>
   160a4:	mov	r0, #118	; 0x76
   160a8:	b	16200 <__assert_fail@plt+0x4ab8>
   160ac:	mov	r5, #39	; 0x27
   160b0:	mov	r0, #1
   160b4:	str	r0, [sp, #56]	; 0x38
   160b8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   160bc:	cmp	r0, #2
   160c0:	bne	16310 <__assert_fail@plt+0x4bc8>
   160c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   160c8:	tst	r0, #1
   160cc:	bne	16924 <__assert_fail@plt+0x51dc>
   160d0:	ldr	r2, [sp, #72]	; 0x48
   160d4:	cmp	r2, #0
   160d8:	mov	r0, r2
   160dc:	movwne	r0, #1
   160e0:	clz	r1, r4
   160e4:	lsr	r1, r1, #5
   160e8:	orrs	r0, r0, r1
   160ec:	moveq	r2, r4
   160f0:	str	r2, [sp, #72]	; 0x48
   160f4:	moveq	r4, r0
   160f8:	cmp	r8, r4
   160fc:	movcc	r0, #39	; 0x27
   16100:	strbcc	r0, [r7, r8]
   16104:	add	r0, r8, #1
   16108:	cmp	r0, r4
   1610c:	movcc	r1, #92	; 0x5c
   16110:	strbcc	r1, [r7, r0]
   16114:	add	r0, r8, #2
   16118:	cmp	r0, r4
   1611c:	movcc	r1, #39	; 0x27
   16120:	strbcc	r1, [r7, r0]
   16124:	add	r8, r8, #3
   16128:	mov	r0, #0
   1612c:	str	r0, [fp, #-56]	; 0xffffffc8
   16130:	mov	sl, #0
   16134:	mov	r9, #1
   16138:	b	15f98 <__assert_fail@plt+0x4850>
   1613c:	str	r4, [sp, #24]
   16140:	ldr	r0, [sp, #40]	; 0x28
   16144:	cmp	r0, #1
   16148:	bne	16318 <__assert_fail@plt+0x4bd0>
   1614c:	str	lr, [sp, #28]
   16150:	bl	11598 <__ctype_b_loc@plt>
   16154:	ldr	ip, [fp, #-84]	; 0xffffffac
   16158:	ldr	r0, [r0]
   1615c:	add	r0, r0, r5, lsl #1
   16160:	ldrb	r0, [r0, #1]
   16164:	ubfx	r9, r0, #6, #1
   16168:	mov	r1, #1
   1616c:	ldr	r4, [sp, #24]
   16170:	ldr	r0, [sp, #52]	; 0x34
   16174:	orr	r0, r9, r0
   16178:	mov	r2, r1
   1617c:	cmp	r1, #1
   16180:	bhi	1654c <__assert_fail@plt+0x4e04>
   16184:	tst	r0, #1
   16188:	beq	1654c <__assert_fail@plt+0x4e04>
   1618c:	ldr	lr, [sp, #28]
   16190:	b	15f98 <__assert_fail@plt+0x4850>
   16194:	cmp	r6, #0
   16198:	ldrbeq	r0, [ip, #1]
   1619c:	cmpeq	r0, #0
   161a0:	beq	161b0 <__assert_fail@plt+0x4a68>
   161a4:	mvn	lr, #0
   161a8:	mov	sl, #0
   161ac:	b	15f98 <__assert_fail@plt+0x4850>
   161b0:	mov	r1, #1
   161b4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   161b8:	cmp	r0, #2
   161bc:	bne	161d4 <__assert_fail@plt+0x4a8c>
   161c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   161c4:	tst	r0, #1
   161c8:	mov	r9, r1
   161cc:	beq	15f98 <__assert_fail@plt+0x4850>
   161d0:	b	16924 <__assert_fail@plt+0x51dc>
   161d4:	mov	r9, r1
   161d8:	b	15f98 <__assert_fail@plt+0x4850>
   161dc:	mov	sl, #0
   161e0:	mov	r0, #92	; 0x5c
   161e4:	ldr	r1, [sp, #48]	; 0x30
   161e8:	cmp	r1, #0
   161ec:	beq	16200 <__assert_fail@plt+0x4ab8>
   161f0:	mov	r9, #0
   161f4:	cmp	sl, #0
   161f8:	beq	167b0 <__assert_fail@plt+0x5068>
   161fc:	b	167ec <__assert_fail@plt+0x50a4>
   16200:	mov	r9, #0
   16204:	ldr	r1, [sp, #84]	; 0x54
   16208:	tst	r1, #1
   1620c:	mov	sl, #0
   16210:	bne	16250 <__assert_fail@plt+0x4b08>
   16214:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16218:	cmp	r0, #0
   1621c:	mov	r0, r5
   16220:	beq	16244 <__assert_fail@plt+0x4afc>
   16224:	ubfx	r0, r5, #5, #3
   16228:	ldr	r1, [fp, #16]
   1622c:	ldr	r0, [r1, r0, lsl #2]
   16230:	and	r1, r5, #31
   16234:	mov	r2, #1
   16238:	tst	r0, r2, lsl r1
   1623c:	mov	r0, r5
   16240:	bne	16250 <__assert_fail@plt+0x4b08>
   16244:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16248:	cmp	r1, #0
   1624c:	beq	167a8 <__assert_fail@plt+0x5060>
   16250:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16254:	tst	r1, #1
   16258:	bne	16924 <__assert_fail@plt+0x51dc>
   1625c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16260:	cmp	r1, #2
   16264:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16268:	movwne	r1, #1
   1626c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16270:	orr	r1, r1, r2
   16274:	tst	r1, #1
   16278:	beq	16284 <__assert_fail@plt+0x4b3c>
   1627c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16280:	b	162c0 <__assert_fail@plt+0x4b78>
   16284:	cmp	r8, r4
   16288:	movcc	r1, #39	; 0x27
   1628c:	strbcc	r1, [r7, r8]
   16290:	add	r1, r8, #1
   16294:	cmp	r1, r4
   16298:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1629c:	movcc	r2, #36	; 0x24
   162a0:	strbcc	r2, [r7, r1]
   162a4:	add	r1, r8, #2
   162a8:	cmp	r1, r4
   162ac:	movcc	r2, #39	; 0x27
   162b0:	strbcc	r2, [r7, r1]
   162b4:	add	r8, r8, #3
   162b8:	mov	r1, #1
   162bc:	str	r1, [fp, #-56]	; 0xffffffc8
   162c0:	cmp	r8, r4
   162c4:	movcc	r1, #92	; 0x5c
   162c8:	strbcc	r1, [r7, r8]
   162cc:	add	r8, r8, #1
   162d0:	cmp	r8, r4
   162d4:	strbcc	r0, [r7, r8]
   162d8:	and	r5, r5, r9
   162dc:	add	r8, r8, #1
   162e0:	add	r6, r6, #1
   162e4:	cmn	lr, #1
   162e8:	bne	15cc4 <__assert_fail@plt+0x457c>
   162ec:	b	15cd0 <__assert_fail@plt+0x4588>
   162f0:	mov	r9, #0
   162f4:	ldr	r0, [sp, #36]	; 0x24
   162f8:	cmp	r0, #0
   162fc:	mov	sl, #0
   16300:	mov	r5, #0
   16304:	beq	16214 <__assert_fail@plt+0x4acc>
   16308:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1630c:	b	162e0 <__assert_fail@plt+0x4b98>
   16310:	mov	r9, #1
   16314:	b	15f98 <__assert_fail@plt+0x4850>
   16318:	mov	r0, #0
   1631c:	str	r0, [fp, #-36]	; 0xffffffdc
   16320:	str	r0, [fp, #-40]	; 0xffffffd8
   16324:	cmn	lr, #1
   16328:	bne	1633c <__assert_fail@plt+0x4bf4>
   1632c:	mov	r0, ip
   16330:	bl	115b0 <strlen@plt>
   16334:	ldr	ip, [fp, #-84]	; 0xffffffac
   16338:	mov	lr, r0
   1633c:	add	r0, ip, r6
   16340:	str	r0, [sp, #20]
   16344:	mov	r9, #1
   16348:	mov	r7, #0
   1634c:	sub	r4, fp, #40	; 0x28
   16350:	str	lr, [sp, #28]
   16354:	str	r7, [sp, #44]	; 0x2c
   16358:	add	r7, r7, r6
   1635c:	add	r1, ip, r7
   16360:	sub	r2, lr, r7
   16364:	sub	r0, fp, #44	; 0x2c
   16368:	mov	r3, r4
   1636c:	bl	18be0 <__assert_fail@plt+0x7498>
   16370:	cmp	r0, #0
   16374:	beq	16834 <__assert_fail@plt+0x50ec>
   16378:	cmn	r0, #1
   1637c:	beq	167f4 <__assert_fail@plt+0x50ac>
   16380:	cmn	r0, #2
   16384:	ldr	lr, [sp, #28]
   16388:	beq	167fc <__assert_fail@plt+0x50b4>
   1638c:	cmp	r0, #2
   16390:	mov	r1, #0
   16394:	movwcc	r1, #1
   16398:	ldr	r2, [sp, #60]	; 0x3c
   1639c:	eor	r2, r2, #1
   163a0:	orrs	r1, r2, r1
   163a4:	ldr	r4, [sp, #24]
   163a8:	bne	16468 <__assert_fail@plt+0x4d20>
   163ac:	ldr	r1, [sp, #44]	; 0x2c
   163b0:	ldr	r2, [sp, #20]
   163b4:	add	r1, r2, r1
   163b8:	mov	r2, #1
   163bc:	ldrb	r3, [r1, r2]
   163c0:	sub	r3, r3, #91	; 0x5b
   163c4:	cmp	r3, #33	; 0x21
   163c8:	bhi	1645c <__assert_fail@plt+0x4d14>
   163cc:	add	r7, pc, #0
   163d0:	ldr	pc, [r7, r3, lsl #2]
   163d4:	andeq	r6, r1, ip, lsl r9
   163d8:	andeq	r6, r1, ip, lsl r9
   163dc:	andeq	r6, r1, ip, asr r4
   163e0:	andeq	r6, r1, ip, lsl r9
   163e4:	andeq	r6, r1, ip, asr r4
   163e8:	andeq	r6, r1, ip, lsl r9
   163ec:	andeq	r6, r1, ip, asr r4
   163f0:	andeq	r6, r1, ip, asr r4
   163f4:	andeq	r6, r1, ip, asr r4
   163f8:	andeq	r6, r1, ip, asr r4
   163fc:	andeq	r6, r1, ip, asr r4
   16400:	andeq	r6, r1, ip, asr r4
   16404:	andeq	r6, r1, ip, asr r4
   16408:	andeq	r6, r1, ip, asr r4
   1640c:	andeq	r6, r1, ip, asr r4
   16410:	andeq	r6, r1, ip, asr r4
   16414:	andeq	r6, r1, ip, asr r4
   16418:	andeq	r6, r1, ip, asr r4
   1641c:	andeq	r6, r1, ip, asr r4
   16420:	andeq	r6, r1, ip, asr r4
   16424:	andeq	r6, r1, ip, asr r4
   16428:	andeq	r6, r1, ip, asr r4
   1642c:	andeq	r6, r1, ip, asr r4
   16430:	andeq	r6, r1, ip, asr r4
   16434:	andeq	r6, r1, ip, asr r4
   16438:	andeq	r6, r1, ip, asr r4
   1643c:	andeq	r6, r1, ip, asr r4
   16440:	andeq	r6, r1, ip, asr r4
   16444:	andeq	r6, r1, ip, asr r4
   16448:	andeq	r6, r1, ip, asr r4
   1644c:	andeq	r6, r1, ip, asr r4
   16450:	andeq	r6, r1, ip, asr r4
   16454:	andeq	r6, r1, ip, asr r4
   16458:	andeq	r6, r1, ip, lsl r9
   1645c:	add	r2, r2, #1
   16460:	cmp	r2, r0
   16464:	bcc	163bc <__assert_fail@plt+0x4c74>
   16468:	ldr	r7, [sp, #44]	; 0x2c
   1646c:	add	r7, r0, r7
   16470:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16474:	bl	114a8 <iswprint@plt>
   16478:	cmp	r0, #0
   1647c:	movwne	r0, #1
   16480:	and	r9, r9, r0
   16484:	sub	r4, fp, #40	; 0x28
   16488:	mov	r0, r4
   1648c:	bl	1143c <mbsinit@plt>
   16490:	ldr	lr, [sp, #28]
   16494:	cmp	r0, #0
   16498:	ldr	ip, [fp, #-84]	; 0xffffffac
   1649c:	beq	16354 <__assert_fail@plt+0x4c0c>
   164a0:	b	1683c <__assert_fail@plt+0x50f4>
   164a4:	ldr	r0, [sp, #32]
   164a8:	cmp	r0, #0
   164ac:	beq	16544 <__assert_fail@plt+0x4dfc>
   164b0:	add	r0, r6, #2
   164b4:	cmp	r0, lr
   164b8:	bcs	16544 <__assert_fail@plt+0x4dfc>
   164bc:	add	r1, ip, r6
   164c0:	ldrb	r1, [r1, #1]
   164c4:	cmp	r1, #63	; 0x3f
   164c8:	bne	16544 <__assert_fail@plt+0x4dfc>
   164cc:	ldrb	r9, [ip, r0]
   164d0:	sub	r2, r9, #33	; 0x21
   164d4:	cmp	r2, #29
   164d8:	bhi	16544 <__assert_fail@plt+0x4dfc>
   164dc:	mov	r3, #1
   164e0:	movw	r1, #20929	; 0x51c1
   164e4:	movt	r1, #14336	; 0x3800
   164e8:	tst	r1, r3, lsl r2
   164ec:	beq	16544 <__assert_fail@plt+0x4dfc>
   164f0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   164f4:	tst	r1, #1
   164f8:	bne	16924 <__assert_fail@plt+0x51dc>
   164fc:	cmp	r8, r4
   16500:	movcc	r1, #63	; 0x3f
   16504:	strbcc	r1, [r7, r8]
   16508:	add	r2, r8, #1
   1650c:	cmp	r2, r4
   16510:	movcc	r1, #34	; 0x22
   16514:	strbcc	r1, [r7, r2]
   16518:	add	r2, r8, #2
   1651c:	cmp	r2, r4
   16520:	movcc	r1, #34	; 0x22
   16524:	strbcc	r1, [r7, r2]
   16528:	add	r2, r8, #3
   1652c:	cmp	r2, r4
   16530:	movcc	r1, #63	; 0x3f
   16534:	strbcc	r1, [r7, r2]
   16538:	add	r8, r8, #4
   1653c:	mov	r6, r0
   16540:	mov	r5, r9
   16544:	mov	r9, #0
   16548:	b	15f98 <__assert_fail@plt+0x4850>
   1654c:	add	r1, r2, r6
   16550:	str	r1, [sp, #44]	; 0x2c
   16554:	add	r1, r6, #1
   16558:	mov	r3, #0
   1655c:	ldr	lr, [sp, #28]
   16560:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16564:	tst	r0, #1
   16568:	bne	1665c <__assert_fail@plt+0x4f14>
   1656c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16570:	tst	r2, #1
   16574:	bne	16924 <__assert_fail@plt+0x51dc>
   16578:	cmp	r6, #2
   1657c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16580:	movwne	r3, #1
   16584:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16588:	orr	r3, r3, r2
   1658c:	tst	r3, #1
   16590:	bne	165cc <__assert_fail@plt+0x4e84>
   16594:	cmp	r8, r4
   16598:	movcc	r2, #39	; 0x27
   1659c:	strbcc	r2, [r7, r8]
   165a0:	add	r3, r8, #1
   165a4:	cmp	r3, r4
   165a8:	movcc	r2, #36	; 0x24
   165ac:	strbcc	r2, [r7, r3]
   165b0:	add	r3, r8, #2
   165b4:	cmp	r3, r4
   165b8:	movcc	r2, #39	; 0x27
   165bc:	strbcc	r2, [r7, r3]
   165c0:	add	r8, r8, #3
   165c4:	mov	r2, #1
   165c8:	str	r2, [fp, #-56]	; 0xffffffc8
   165cc:	cmp	r8, r4
   165d0:	movcc	r2, #92	; 0x5c
   165d4:	strbcc	r2, [r7, r8]
   165d8:	add	r3, r8, #1
   165dc:	cmp	r3, r4
   165e0:	bcs	16600 <__assert_fail@plt+0x4eb8>
   165e4:	and	r7, r5, #192	; 0xc0
   165e8:	mov	r2, #48	; 0x30
   165ec:	orr	r7, r2, r7, lsr #6
   165f0:	ldr	r6, [sp, #80]	; 0x50
   165f4:	strb	r7, [r6, r3]
   165f8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   165fc:	ldr	r7, [sp, #80]	; 0x50
   16600:	add	r3, r8, #2
   16604:	cmp	r3, r4
   16608:	bcs	16628 <__assert_fail@plt+0x4ee0>
   1660c:	lsr	r7, r5, #3
   16610:	mov	r2, #6
   16614:	bfi	r7, r2, #3, #29
   16618:	ldr	r6, [sp, #80]	; 0x50
   1661c:	strb	r7, [r6, r3]
   16620:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16624:	ldr	r7, [sp, #80]	; 0x50
   16628:	mov	r2, #6
   1662c:	bfi	r5, r2, #3, #29
   16630:	add	r8, r8, #3
   16634:	mov	r3, #1
   16638:	b	16680 <__assert_fail@plt+0x4f38>
   1663c:	ldr	r7, [sp, #80]	; 0x50
   16640:	cmp	r8, r4
   16644:	strbcc	r5, [r7, r8]
   16648:	ldrb	r5, [ip, r1]
   1664c:	add	r1, r1, #1
   16650:	add	r8, r8, #1
   16654:	tst	r0, #1
   16658:	beq	1656c <__assert_fail@plt+0x4e24>
   1665c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16660:	tst	r2, #1
   16664:	beq	16678 <__assert_fail@plt+0x4f30>
   16668:	cmp	r8, r4
   1666c:	movcc	r2, #92	; 0x5c
   16670:	strbcc	r2, [r7, r8]
   16674:	add	r8, r8, #1
   16678:	mov	r2, #0
   1667c:	str	r2, [fp, #-52]	; 0xffffffcc
   16680:	and	sl, r3, #1
   16684:	ldr	r2, [sp, #44]	; 0x2c
   16688:	cmp	r2, r1
   1668c:	bls	16798 <__assert_fail@plt+0x5050>
   16690:	cmp	sl, #0
   16694:	movwne	sl, #1
   16698:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1669c:	mvn	r7, r2
   166a0:	orr	r7, r7, sl
   166a4:	tst	r7, #1
   166a8:	bne	1663c <__assert_fail@plt+0x4ef4>
   166ac:	cmp	r8, r4
   166b0:	ldrcc	r7, [sp, #80]	; 0x50
   166b4:	movcc	r2, #39	; 0x27
   166b8:	strbcc	r2, [r7, r8]
   166bc:	add	r7, r8, #1
   166c0:	cmp	r7, r4
   166c4:	ldrcc	r6, [sp, #80]	; 0x50
   166c8:	movcc	r2, #39	; 0x27
   166cc:	strbcc	r2, [r6, r7]
   166d0:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   166d4:	add	r8, r8, #2
   166d8:	mov	r2, #0
   166dc:	str	r2, [fp, #-56]	; 0xffffffc8
   166e0:	b	1663c <__assert_fail@plt+0x4ef4>
   166e4:	cmp	r8, r4
   166e8:	movcc	r0, #39	; 0x27
   166ec:	strbcc	r0, [r7, r8]
   166f0:	add	r0, r8, #1
   166f4:	cmp	r0, r4
   166f8:	movcc	r1, #36	; 0x24
   166fc:	strbcc	r1, [r7, r0]
   16700:	add	r0, r8, #2
   16704:	cmp	r0, r4
   16708:	movcc	r1, #39	; 0x27
   1670c:	strbcc	r1, [r7, r0]
   16710:	add	r0, r8, #3
   16714:	mov	r2, #1
   16718:	cmp	r0, r4
   1671c:	movcc	r1, #92	; 0x5c
   16720:	strbcc	r1, [r7, r0]
   16724:	str	r2, [fp, #-56]	; 0xffffffc8
   16728:	add	r8, r0, #1
   1672c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16730:	cmp	r1, #2
   16734:	beq	16788 <__assert_fail@plt+0x5040>
   16738:	add	r1, r6, #1
   1673c:	mov	r9, #0
   16740:	mov	sl, #1
   16744:	mov	r5, #48	; 0x30
   16748:	cmp	r1, lr
   1674c:	bcs	15f98 <__assert_fail@plt+0x4850>
   16750:	ldrb	r1, [ip, r1]
   16754:	sub	r1, r1, #48	; 0x30
   16758:	uxtb	r1, r1
   1675c:	cmp	r1, #9
   16760:	bhi	15f98 <__assert_fail@plt+0x4850>
   16764:	cmp	r8, r4
   16768:	movcc	r1, #48	; 0x30
   1676c:	strbcc	r1, [r7, r8]
   16770:	add	r1, r0, #2
   16774:	cmp	r1, r4
   16778:	movcc	r2, #48	; 0x30
   1677c:	strbcc	r2, [r7, r1]
   16780:	add	r8, r0, #3
   16784:	b	15f98 <__assert_fail@plt+0x4850>
   16788:	mov	r0, #48	; 0x30
   1678c:	mov	sl, #1
   16790:	mov	r9, #0
   16794:	b	16244 <__assert_fail@plt+0x4afc>
   16798:	sub	r6, r1, #1
   1679c:	cmp	sl, #0
   167a0:	movwne	sl, #1
   167a4:	mov	r0, r5
   167a8:	cmp	sl, #0
   167ac:	bne	167ec <__assert_fail@plt+0x50a4>
   167b0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   167b4:	tst	r1, #1
   167b8:	beq	167ec <__assert_fail@plt+0x50a4>
   167bc:	cmp	r8, r4
   167c0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   167c4:	movcc	r1, #39	; 0x27
   167c8:	strbcc	r1, [r7, r8]
   167cc:	add	r1, r8, #1
   167d0:	cmp	r1, r4
   167d4:	movcc	r2, #39	; 0x27
   167d8:	strbcc	r2, [r7, r1]
   167dc:	add	r8, r8, #2
   167e0:	mov	r1, #0
   167e4:	str	r1, [fp, #-56]	; 0xffffffc8
   167e8:	b	162d0 <__assert_fail@plt+0x4b88>
   167ec:	ldr	r5, [fp, #-48]	; 0xffffffd0
   167f0:	b	162d0 <__assert_fail@plt+0x4b88>
   167f4:	mov	r9, #0
   167f8:	b	16834 <__assert_fail@plt+0x50ec>
   167fc:	mov	r9, #0
   16800:	cmp	r7, lr
   16804:	bcs	16834 <__assert_fail@plt+0x50ec>
   16808:	ldr	ip, [fp, #-84]	; 0xffffffac
   1680c:	ldr	r7, [sp, #44]	; 0x2c
   16810:	ldr	r0, [sp, #20]
   16814:	ldrb	r0, [r0, r7]
   16818:	cmp	r0, #0
   1681c:	beq	1683c <__assert_fail@plt+0x50f4>
   16820:	add	r7, r7, #1
   16824:	add	r0, r6, r7
   16828:	cmp	r0, lr
   1682c:	bcc	16810 <__assert_fail@plt+0x50c8>
   16830:	b	1683c <__assert_fail@plt+0x50f4>
   16834:	ldr	ip, [fp, #-84]	; 0xffffffac
   16838:	ldr	r7, [sp, #44]	; 0x2c
   1683c:	mov	r1, r7
   16840:	ldr	r7, [sp, #80]	; 0x50
   16844:	b	1616c <__assert_fail@plt+0x4a24>
   16848:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1684c:	eor	r0, r1, #2
   16850:	orr	r0, r0, r8
   16854:	clz	r0, r0
   16858:	lsr	r0, r0, #5
   1685c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16860:	tst	r2, r0
   16864:	bne	16924 <__assert_fail@plt+0x51dc>
   16868:	cmp	r1, #2
   1686c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   16870:	movwne	r0, #1
   16874:	orr	r0, r2, r0
   16878:	tst	r0, #1
   1687c:	ldreq	r0, [sp, #56]	; 0x38
   16880:	eoreq	r0, r0, #1
   16884:	tsteq	r0, #1
   16888:	bne	168bc <__assert_fail@plt+0x5174>
   1688c:	mov	r9, lr
   16890:	tst	r5, #1
   16894:	bne	1698c <__assert_fail@plt+0x5244>
   16898:	ldr	r0, [sp, #72]	; 0x48
   1689c:	cmp	r0, #0
   168a0:	beq	168bc <__assert_fail@plt+0x5174>
   168a4:	mov	r5, #0
   168a8:	cmp	r4, #0
   168ac:	ldr	r0, [sp, #84]	; 0x54
   168b0:	mov	sl, r2
   168b4:	ldr	r6, [sp, #72]	; 0x48
   168b8:	beq	15a54 <__assert_fail@plt+0x430c>
   168bc:	ldr	r1, [sp, #92]	; 0x5c
   168c0:	clz	r0, r1
   168c4:	lsr	r0, r0, #5
   168c8:	orr	r0, r0, r2
   168cc:	tst	r0, #1
   168d0:	bne	168fc <__assert_fail@plt+0x51b4>
   168d4:	ldrb	r0, [r1]
   168d8:	cmp	r0, #0
   168dc:	beq	168fc <__assert_fail@plt+0x51b4>
   168e0:	add	r1, r1, #1
   168e4:	cmp	r8, r4
   168e8:	strbcc	r0, [r7, r8]
   168ec:	add	r8, r8, #1
   168f0:	ldrb	r0, [r1], #1
   168f4:	cmp	r0, #0
   168f8:	bne	168e4 <__assert_fail@plt+0x519c>
   168fc:	cmp	r8, r4
   16900:	movcc	r0, #0
   16904:	strbcc	r0, [r7, r8]
   16908:	b	16980 <__assert_fail@plt+0x5238>
   1690c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16910:	mov	lr, r4
   16914:	mov	r4, r5
   16918:	b	16924 <__assert_fail@plt+0x51dc>
   1691c:	ldr	r7, [sp, #80]	; 0x50
   16920:	ldr	ip, [fp, #-84]	; 0xffffffac
   16924:	mov	r0, #0
   16928:	ldr	r1, [fp, #12]
   1692c:	bic	r1, r1, #2
   16930:	ldr	r2, [sp, #84]	; 0x54
   16934:	tst	r2, #1
   16938:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1693c:	mov	r2, r3
   16940:	movwne	r2, #4
   16944:	cmp	r3, #2
   16948:	movne	r2, r3
   1694c:	str	r2, [sp]
   16950:	str	r1, [sp, #4]
   16954:	str	r0, [sp, #8]
   16958:	ldr	r0, [sp, #68]	; 0x44
   1695c:	str	r0, [sp, #12]
   16960:	ldr	r0, [sp, #76]	; 0x4c
   16964:	str	r0, [sp, #16]
   16968:	mov	r0, r7
   1696c:	mov	r1, r4
   16970:	mov	r2, ip
   16974:	mov	r3, lr
   16978:	bl	159cc <__assert_fail@plt+0x4284>
   1697c:	mov	r8, r0
   16980:	mov	r0, r8
   16984:	sub	sp, fp, #28
   16988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1698c:	mov	r0, #5
   16990:	str	r0, [sp]
   16994:	ldr	r0, [fp, #12]
   16998:	str	r0, [sp, #4]
   1699c:	ldr	r0, [fp, #16]
   169a0:	str	r0, [sp, #8]
   169a4:	ldr	r0, [sp, #68]	; 0x44
   169a8:	str	r0, [sp, #12]
   169ac:	ldr	r0, [sp, #76]	; 0x4c
   169b0:	str	r0, [sp, #16]
   169b4:	mov	r0, r7
   169b8:	ldr	r1, [sp, #72]	; 0x48
   169bc:	ldr	r2, [fp, #-84]	; 0xffffffac
   169c0:	mov	r3, r9
   169c4:	b	16978 <__assert_fail@plt+0x5230>
   169c8:	bl	11724 <abort@plt>
   169cc:	mov	r3, r2
   169d0:	mov	r2, #0
   169d4:	b	169d8 <__assert_fail@plt+0x5290>
   169d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169dc:	add	fp, sp, #28
   169e0:	sub	sp, sp, #36	; 0x24
   169e4:	mov	r4, r2
   169e8:	str	r2, [sp, #24]
   169ec:	mov	r5, r1
   169f0:	mov	r6, r0
   169f4:	str	r0, [sp, #20]
   169f8:	movw	r8, #46400	; 0xb540
   169fc:	movt	r8, #2
   16a00:	cmp	r3, #0
   16a04:	movne	r8, r3
   16a08:	bl	115f8 <__errno_location@plt>
   16a0c:	str	r0, [sp, #28]
   16a10:	ldm	r8, {r3, r9}
   16a14:	ldr	r1, [r8, #40]	; 0x28
   16a18:	ldr	r2, [r8, #44]	; 0x2c
   16a1c:	ldr	r7, [r0]
   16a20:	str	r7, [sp, #32]
   16a24:	add	sl, r8, #8
   16a28:	cmp	r4, #0
   16a2c:	orreq	r9, r9, #1
   16a30:	stm	sp, {r3, r9, sl}
   16a34:	str	r1, [sp, #12]
   16a38:	str	r2, [sp, #16]
   16a3c:	mov	r0, #0
   16a40:	mov	r1, #0
   16a44:	mov	r2, r6
   16a48:	mov	r3, r5
   16a4c:	mov	r7, r5
   16a50:	bl	159cc <__assert_fail@plt+0x4284>
   16a54:	mov	r5, r0
   16a58:	add	r4, r0, #1
   16a5c:	mov	r0, r4
   16a60:	bl	17cd0 <__assert_fail@plt+0x6588>
   16a64:	mov	r6, r0
   16a68:	ldr	r0, [r8]
   16a6c:	ldr	r1, [r8, #40]	; 0x28
   16a70:	ldr	r2, [r8, #44]	; 0x2c
   16a74:	stm	sp, {r0, r9, sl}
   16a78:	str	r1, [sp, #12]
   16a7c:	str	r2, [sp, #16]
   16a80:	mov	r0, r6
   16a84:	mov	r1, r4
   16a88:	ldr	r2, [sp, #20]
   16a8c:	mov	r3, r7
   16a90:	bl	159cc <__assert_fail@plt+0x4284>
   16a94:	ldr	r0, [sp, #24]
   16a98:	ldr	r1, [sp, #32]
   16a9c:	ldr	r2, [sp, #28]
   16aa0:	str	r1, [r2]
   16aa4:	cmp	r0, #0
   16aa8:	strne	r5, [r0]
   16aac:	mov	r0, r6
   16ab0:	sub	sp, fp, #28
   16ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ab8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16abc:	add	fp, sp, #24
   16ac0:	movw	r8, #45424	; 0xb170
   16ac4:	movt	r8, #2
   16ac8:	ldr	r4, [r8]
   16acc:	movw	r5, #45428	; 0xb174
   16ad0:	movt	r5, #2
   16ad4:	ldr	r0, [r5]
   16ad8:	cmp	r0, #2
   16adc:	blt	16b08 <__assert_fail@plt+0x53c0>
   16ae0:	add	r7, r4, #12
   16ae4:	mov	r6, #0
   16ae8:	ldr	r0, [r7, r6, lsl #3]
   16aec:	bl	155f4 <__assert_fail@plt+0x3eac>
   16af0:	add	r0, r6, #1
   16af4:	ldr	r1, [r5]
   16af8:	add	r2, r6, #2
   16afc:	cmp	r2, r1
   16b00:	mov	r6, r0
   16b04:	blt	16ae8 <__assert_fail@plt+0x53a0>
   16b08:	ldr	r0, [r4, #4]
   16b0c:	movw	r7, #46448	; 0xb570
   16b10:	movt	r7, #2
   16b14:	cmp	r0, r7
   16b18:	beq	16b30 <__assert_fail@plt+0x53e8>
   16b1c:	bl	155f4 <__assert_fail@plt+0x3eac>
   16b20:	movw	r0, #45432	; 0xb178
   16b24:	movt	r0, #2
   16b28:	mov	r6, #256	; 0x100
   16b2c:	strd	r6, [r0]
   16b30:	movw	r6, #45432	; 0xb178
   16b34:	movt	r6, #2
   16b38:	cmp	r4, r6
   16b3c:	beq	16b4c <__assert_fail@plt+0x5404>
   16b40:	mov	r0, r4
   16b44:	bl	155f4 <__assert_fail@plt+0x3eac>
   16b48:	str	r6, [r8]
   16b4c:	mov	r0, #1
   16b50:	str	r0, [r5]
   16b54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16b58:	movw	r3, #46400	; 0xb540
   16b5c:	movt	r3, #2
   16b60:	mvn	r2, #0
   16b64:	b	16b68 <__assert_fail@plt+0x5420>
   16b68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b6c:	add	fp, sp, #28
   16b70:	sub	sp, sp, #44	; 0x2c
   16b74:	mov	r7, r3
   16b78:	str	r2, [sp, #36]	; 0x24
   16b7c:	str	r1, [sp, #32]
   16b80:	mov	r5, r0
   16b84:	bl	115f8 <__errno_location@plt>
   16b88:	cmp	r5, #0
   16b8c:	blt	16cf8 <__assert_fail@plt+0x55b0>
   16b90:	cmn	r5, #-2147483647	; 0x80000001
   16b94:	beq	16cf8 <__assert_fail@plt+0x55b0>
   16b98:	movw	r4, #45424	; 0xb170
   16b9c:	movt	r4, #2
   16ba0:	ldr	r6, [r4]
   16ba4:	str	r0, [sp, #28]
   16ba8:	ldr	r0, [r0]
   16bac:	str	r0, [sp, #24]
   16bb0:	movw	r8, #45428	; 0xb174
   16bb4:	movt	r8, #2
   16bb8:	ldr	r1, [r8]
   16bbc:	cmp	r1, r5
   16bc0:	ble	16bcc <__assert_fail@plt+0x5484>
   16bc4:	mov	sl, r6
   16bc8:	b	16c34 <__assert_fail@plt+0x54ec>
   16bcc:	str	r1, [fp, #-32]	; 0xffffffe0
   16bd0:	mov	r0, #8
   16bd4:	str	r0, [sp]
   16bd8:	movw	r9, #45432	; 0xb178
   16bdc:	movt	r9, #2
   16be0:	subs	r0, r6, r9
   16be4:	movne	r0, r6
   16be8:	add	r2, r5, #1
   16bec:	sub	r2, r2, r1
   16bf0:	sub	r1, fp, #32
   16bf4:	mvn	r3, #-2147483648	; 0x80000000
   16bf8:	bl	17db8 <__assert_fail@plt+0x6670>
   16bfc:	mov	sl, r0
   16c00:	str	r0, [r4]
   16c04:	cmp	r6, r9
   16c08:	ldrdeq	r0, [r9]
   16c0c:	stmeq	sl, {r0, r1}
   16c10:	ldr	r1, [r8]
   16c14:	add	r0, sl, r1, lsl #3
   16c18:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16c1c:	sub	r1, r2, r1
   16c20:	lsl	r2, r1, #3
   16c24:	mov	r1, #0
   16c28:	bl	1161c <memset@plt>
   16c2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16c30:	str	r0, [r8]
   16c34:	mov	r9, sl
   16c38:	ldr	r6, [r9, r5, lsl #3]!
   16c3c:	ldr	r4, [r9, #4]!
   16c40:	ldm	r7, {r0, r1}
   16c44:	ldr	r2, [r7, #40]	; 0x28
   16c48:	ldr	r3, [r7, #44]	; 0x2c
   16c4c:	orr	r8, r1, #1
   16c50:	add	r1, r7, #8
   16c54:	stm	sp, {r0, r8}
   16c58:	str	r1, [sp, #20]
   16c5c:	add	r0, sp, #8
   16c60:	stm	r0, {r1, r2, r3}
   16c64:	mov	r0, r4
   16c68:	mov	r1, r6
   16c6c:	ldr	r2, [sp, #32]
   16c70:	ldr	r3, [sp, #36]	; 0x24
   16c74:	bl	159cc <__assert_fail@plt+0x4284>
   16c78:	cmp	r6, r0
   16c7c:	bhi	16ce0 <__assert_fail@plt+0x5598>
   16c80:	add	r6, r0, #1
   16c84:	str	r6, [sl, r5, lsl #3]
   16c88:	movw	r0, #46448	; 0xb570
   16c8c:	movt	r0, #2
   16c90:	cmp	r4, r0
   16c94:	beq	16ca0 <__assert_fail@plt+0x5558>
   16c98:	mov	r0, r4
   16c9c:	bl	155f4 <__assert_fail@plt+0x3eac>
   16ca0:	mov	r0, r6
   16ca4:	bl	17cd0 <__assert_fail@plt+0x6588>
   16ca8:	mov	r4, r0
   16cac:	str	r0, [r9]
   16cb0:	ldr	r0, [r7]
   16cb4:	ldr	r1, [r7, #40]	; 0x28
   16cb8:	ldr	r2, [r7, #44]	; 0x2c
   16cbc:	stm	sp, {r0, r8}
   16cc0:	ldr	r0, [sp, #20]
   16cc4:	add	r3, sp, #8
   16cc8:	stm	r3, {r0, r1, r2}
   16ccc:	mov	r0, r4
   16cd0:	mov	r1, r6
   16cd4:	ldr	r2, [sp, #32]
   16cd8:	ldr	r3, [sp, #36]	; 0x24
   16cdc:	bl	159cc <__assert_fail@plt+0x4284>
   16ce0:	ldr	r0, [sp, #28]
   16ce4:	ldr	r1, [sp, #24]
   16ce8:	str	r1, [r0]
   16cec:	mov	r0, r4
   16cf0:	sub	sp, fp, #28
   16cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cf8:	bl	11724 <abort@plt>
   16cfc:	movw	r3, #46400	; 0xb540
   16d00:	movt	r3, #2
   16d04:	b	16b68 <__assert_fail@plt+0x5420>
   16d08:	mov	r1, r0
   16d0c:	mov	r0, #0
   16d10:	b	16b58 <__assert_fail@plt+0x5410>
   16d14:	mov	r2, r1
   16d18:	mov	r1, r0
   16d1c:	mov	r0, #0
   16d20:	b	16cfc <__assert_fail@plt+0x55b4>
   16d24:	push	{r4, r5, r6, sl, fp, lr}
   16d28:	add	fp, sp, #16
   16d2c:	sub	sp, sp, #48	; 0x30
   16d30:	mov	r4, r2
   16d34:	mov	r5, r0
   16d38:	mov	r6, sp
   16d3c:	mov	r0, r6
   16d40:	bl	16d60 <__assert_fail@plt+0x5618>
   16d44:	mov	r0, r5
   16d48:	mov	r1, r4
   16d4c:	mvn	r2, #0
   16d50:	mov	r3, r6
   16d54:	bl	16b68 <__assert_fail@plt+0x5420>
   16d58:	sub	sp, fp, #16
   16d5c:	pop	{r4, r5, r6, sl, fp, pc}
   16d60:	vmov.i32	q8, #0	; 0x00000000
   16d64:	mov	r2, #32
   16d68:	mov	r3, r0
   16d6c:	vst1.32	{d16-d17}, [r3], r2
   16d70:	vst1.32	{d16-d17}, [r3]
   16d74:	add	r2, r0, #16
   16d78:	vst1.32	{d16-d17}, [r2]
   16d7c:	cmp	r1, #10
   16d80:	strne	r1, [r0]
   16d84:	bxne	lr
   16d88:	push	{fp, lr}
   16d8c:	mov	fp, sp
   16d90:	bl	11724 <abort@plt>
   16d94:	push	{r4, r5, r6, r7, fp, lr}
   16d98:	add	fp, sp, #16
   16d9c:	sub	sp, sp, #48	; 0x30
   16da0:	mov	r4, r3
   16da4:	mov	r5, r2
   16da8:	mov	r6, r0
   16dac:	mov	r7, sp
   16db0:	mov	r0, r7
   16db4:	bl	16d60 <__assert_fail@plt+0x5618>
   16db8:	mov	r0, r6
   16dbc:	mov	r1, r5
   16dc0:	mov	r2, r4
   16dc4:	mov	r3, r7
   16dc8:	bl	16b68 <__assert_fail@plt+0x5420>
   16dcc:	sub	sp, fp, #16
   16dd0:	pop	{r4, r5, r6, r7, fp, pc}
   16dd4:	mov	r2, r1
   16dd8:	mov	r1, r0
   16ddc:	mov	r0, #0
   16de0:	b	16d24 <__assert_fail@plt+0x55dc>
   16de4:	mov	r3, r2
   16de8:	mov	r2, r1
   16dec:	mov	r1, r0
   16df0:	mov	r0, #0
   16df4:	b	16d94 <__assert_fail@plt+0x564c>
   16df8:	push	{r4, r5, r6, sl, fp, lr}
   16dfc:	add	fp, sp, #16
   16e00:	sub	sp, sp, #48	; 0x30
   16e04:	mov	r4, r1
   16e08:	mov	r5, r0
   16e0c:	mov	r0, #32
   16e10:	movw	r1, #46400	; 0xb540
   16e14:	movt	r1, #2
   16e18:	add	r3, r1, #16
   16e1c:	vld1.64	{d16-d17}, [r1], r0
   16e20:	mov	r6, sp
   16e24:	vld1.64	{d18-d19}, [r3]
   16e28:	add	r3, r6, #16
   16e2c:	vld1.64	{d20-d21}, [r1]
   16e30:	vst1.64	{d18-d19}, [r3]
   16e34:	mov	r1, r6
   16e38:	vst1.64	{d16-d17}, [r1], r0
   16e3c:	vst1.64	{d20-d21}, [r1]
   16e40:	mov	r0, r6
   16e44:	mov	r1, r2
   16e48:	mov	r2, #1
   16e4c:	bl	158c0 <__assert_fail@plt+0x4178>
   16e50:	mov	r0, #0
   16e54:	mov	r1, r5
   16e58:	mov	r2, r4
   16e5c:	mov	r3, r6
   16e60:	bl	16b68 <__assert_fail@plt+0x5420>
   16e64:	sub	sp, fp, #16
   16e68:	pop	{r4, r5, r6, sl, fp, pc}
   16e6c:	mov	r2, r1
   16e70:	mvn	r1, #0
   16e74:	b	16df8 <__assert_fail@plt+0x56b0>
   16e78:	mov	r1, #58	; 0x3a
   16e7c:	b	16e6c <__assert_fail@plt+0x5724>
   16e80:	mov	r2, #58	; 0x3a
   16e84:	b	16df8 <__assert_fail@plt+0x56b0>
   16e88:	push	{r4, r5, r6, sl, fp, lr}
   16e8c:	add	fp, sp, #16
   16e90:	sub	sp, sp, #48	; 0x30
   16e94:	mov	r4, r2
   16e98:	mov	r5, r0
   16e9c:	mov	r6, sp
   16ea0:	mov	r0, r6
   16ea4:	bl	16d60 <__assert_fail@plt+0x5618>
   16ea8:	mov	r0, r6
   16eac:	mov	r1, #58	; 0x3a
   16eb0:	mov	r2, #1
   16eb4:	bl	158c0 <__assert_fail@plt+0x4178>
   16eb8:	mov	r0, r5
   16ebc:	mov	r1, r4
   16ec0:	mvn	r2, #0
   16ec4:	mov	r3, r6
   16ec8:	bl	16b68 <__assert_fail@plt+0x5420>
   16ecc:	sub	sp, fp, #16
   16ed0:	pop	{r4, r5, r6, sl, fp, pc}
   16ed4:	push	{fp, lr}
   16ed8:	mov	fp, sp
   16edc:	sub	sp, sp, #8
   16ee0:	mvn	ip, #0
   16ee4:	str	ip, [sp]
   16ee8:	bl	16ef4 <__assert_fail@plt+0x57ac>
   16eec:	mov	sp, fp
   16ef0:	pop	{fp, pc}
   16ef4:	push	{r4, r5, r6, r7, fp, lr}
   16ef8:	add	fp, sp, #16
   16efc:	sub	sp, sp, #48	; 0x30
   16f00:	mov	r7, r3
   16f04:	mov	r5, r0
   16f08:	mov	r0, #32
   16f0c:	movw	r3, #46400	; 0xb540
   16f10:	movt	r3, #2
   16f14:	add	r4, r3, #16
   16f18:	vld1.64	{d16-d17}, [r3], r0
   16f1c:	mov	r6, sp
   16f20:	vld1.64	{d18-d19}, [r4]
   16f24:	add	r4, r6, #16
   16f28:	vld1.64	{d20-d21}, [r3]
   16f2c:	vst1.64	{d18-d19}, [r4]
   16f30:	mov	r3, r6
   16f34:	vst1.64	{d16-d17}, [r3], r0
   16f38:	vst1.64	{d20-d21}, [r3]
   16f3c:	mov	r0, r6
   16f40:	bl	15918 <__assert_fail@plt+0x41d0>
   16f44:	ldr	r2, [fp, #8]
   16f48:	mov	r0, r5
   16f4c:	mov	r1, r7
   16f50:	mov	r3, r6
   16f54:	bl	16b68 <__assert_fail@plt+0x5420>
   16f58:	sub	sp, fp, #16
   16f5c:	pop	{r4, r5, r6, r7, fp, pc}
   16f60:	mov	r3, r2
   16f64:	mov	r2, r1
   16f68:	mov	r1, r0
   16f6c:	mov	r0, #0
   16f70:	b	16ed4 <__assert_fail@plt+0x578c>
   16f74:	push	{fp, lr}
   16f78:	mov	fp, sp
   16f7c:	sub	sp, sp, #8
   16f80:	mov	ip, r2
   16f84:	mov	r2, r1
   16f88:	mov	r1, r0
   16f8c:	str	r3, [sp]
   16f90:	mov	r0, #0
   16f94:	mov	r3, ip
   16f98:	bl	16ef4 <__assert_fail@plt+0x57ac>
   16f9c:	mov	sp, fp
   16fa0:	pop	{fp, pc}
   16fa4:	movw	r3, #45440	; 0xb180
   16fa8:	movt	r3, #2
   16fac:	b	16b68 <__assert_fail@plt+0x5420>
   16fb0:	mov	r2, r1
   16fb4:	mov	r1, r0
   16fb8:	mov	r0, #0
   16fbc:	b	16fa4 <__assert_fail@plt+0x585c>
   16fc0:	mvn	r2, #0
   16fc4:	b	16fa4 <__assert_fail@plt+0x585c>
   16fc8:	mov	r1, r0
   16fcc:	mov	r0, #0
   16fd0:	b	16fc0 <__assert_fail@plt+0x5878>
   16fd4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16fd8:	add	fp, sp, #24
   16fdc:	sub	sp, sp, #16
   16fe0:	mov	r4, r1
   16fe4:	mov	r5, r0
   16fe8:	mov	r7, #0
   16fec:	mov	r0, #0
   16ff0:	mov	r1, r5
   16ff4:	mov	r2, #5
   16ff8:	bl	1146c <dcgettext@plt>
   16ffc:	cmp	r0, r5
   17000:	beq	1700c <__assert_fail@plt+0x58c4>
   17004:	sub	sp, fp, #24
   17008:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1700c:	bl	18ba8 <__assert_fail@plt+0x7460>
   17010:	mov	r6, r0
   17014:	mov	r8, #56	; 0x38
   17018:	mov	r0, #45	; 0x2d
   1701c:	stm	sp, {r0, r8}
   17020:	str	r7, [sp, #8]
   17024:	str	r7, [sp, #12]
   17028:	mov	r0, r6
   1702c:	mov	r1, #85	; 0x55
   17030:	mov	r2, #84	; 0x54
   17034:	mov	r3, #70	; 0x46
   17038:	bl	170d0 <__assert_fail@plt+0x5988>
   1703c:	cmp	r0, #0
   17040:	beq	1705c <__assert_fail@plt+0x5914>
   17044:	ldrb	r1, [r5]
   17048:	movw	r2, #42027	; 0xa42b
   1704c:	movt	r2, #1
   17050:	movw	r0, #42031	; 0xa42f
   17054:	movt	r0, #1
   17058:	b	170a0 <__assert_fail@plt+0x5958>
   1705c:	mov	r0, #48	; 0x30
   17060:	mov	r1, #51	; 0x33
   17064:	str	r8, [sp]
   17068:	stmib	sp, {r0, r1}
   1706c:	str	r0, [sp, #12]
   17070:	mov	r0, r6
   17074:	mov	r1, #71	; 0x47
   17078:	mov	r2, #66	; 0x42
   1707c:	mov	r3, #49	; 0x31
   17080:	bl	170d0 <__assert_fail@plt+0x5988>
   17084:	cmp	r0, #0
   17088:	beq	170b0 <__assert_fail@plt+0x5968>
   1708c:	ldrb	r1, [r5]
   17090:	movw	r2, #42035	; 0xa433
   17094:	movt	r2, #1
   17098:	movw	r0, #42039	; 0xa437
   1709c:	movt	r0, #1
   170a0:	cmp	r1, #96	; 0x60
   170a4:	moveq	r0, r2
   170a8:	sub	sp, fp, #24
   170ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   170b0:	movw	r1, #41120	; 0xa0a0
   170b4:	movt	r1, #1
   170b8:	movw	r0, #42025	; 0xa429
   170bc:	movt	r0, #1
   170c0:	cmp	r4, #9
   170c4:	moveq	r0, r1
   170c8:	sub	sp, fp, #24
   170cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   170d0:	push	{r4, r5, r6, r7, fp, lr}
   170d4:	add	fp, sp, #16
   170d8:	sub	sp, sp, #16
   170dc:	mov	r4, r3
   170e0:	mov	r5, r2
   170e4:	mov	r7, r1
   170e8:	mov	r6, r0
   170ec:	mov	r0, r1
   170f0:	bl	18a60 <__assert_fail@plt+0x7318>
   170f4:	ldrb	r1, [r6]
   170f8:	cmp	r0, #0
   170fc:	andne	r1, r1, #223	; 0xdf
   17100:	mov	r0, #0
   17104:	cmp	r1, r7
   17108:	bne	17148 <__assert_fail@plt+0x5a00>
   1710c:	cmp	r7, #0
   17110:	moveq	r0, #1
   17114:	subeq	sp, fp, #16
   17118:	popeq	{r4, r5, r6, r7, fp, pc}
   1711c:	ldr	r0, [fp, #20]
   17120:	ldr	r1, [fp, #16]
   17124:	ldr	r2, [fp, #12]
   17128:	ldr	r3, [fp, #8]
   1712c:	str	r2, [sp]
   17130:	str	r1, [sp, #4]
   17134:	str	r0, [sp, #8]
   17138:	mov	r0, r6
   1713c:	mov	r1, r5
   17140:	mov	r2, r4
   17144:	bl	17150 <__assert_fail@plt+0x5a08>
   17148:	sub	sp, fp, #16
   1714c:	pop	{r4, r5, r6, r7, fp, pc}
   17150:	push	{r4, r5, r6, r7, fp, lr}
   17154:	add	fp, sp, #16
   17158:	sub	sp, sp, #8
   1715c:	mov	r4, r3
   17160:	mov	r5, r2
   17164:	mov	r7, r1
   17168:	mov	r6, r0
   1716c:	mov	r0, r1
   17170:	bl	18a60 <__assert_fail@plt+0x7318>
   17174:	ldrb	r1, [r6, #1]
   17178:	cmp	r0, #0
   1717c:	andne	r1, r1, #223	; 0xdf
   17180:	mov	r0, #0
   17184:	cmp	r1, r7
   17188:	bne	171c0 <__assert_fail@plt+0x5a78>
   1718c:	cmp	r7, #0
   17190:	moveq	r0, #1
   17194:	subeq	sp, fp, #16
   17198:	popeq	{r4, r5, r6, r7, fp, pc}
   1719c:	ldr	r0, [fp, #16]
   171a0:	ldr	r1, [fp, #12]
   171a4:	ldr	r3, [fp, #8]
   171a8:	str	r1, [sp]
   171ac:	str	r0, [sp, #4]
   171b0:	mov	r0, r6
   171b4:	mov	r1, r5
   171b8:	mov	r2, r4
   171bc:	bl	171c8 <__assert_fail@plt+0x5a80>
   171c0:	sub	sp, fp, #16
   171c4:	pop	{r4, r5, r6, r7, fp, pc}
   171c8:	push	{r4, r5, r6, r7, fp, lr}
   171cc:	add	fp, sp, #16
   171d0:	sub	sp, sp, #8
   171d4:	mov	r4, r3
   171d8:	mov	r5, r2
   171dc:	mov	r7, r1
   171e0:	mov	r6, r0
   171e4:	mov	r0, r1
   171e8:	bl	18a60 <__assert_fail@plt+0x7318>
   171ec:	ldrb	r1, [r6, #2]
   171f0:	cmp	r0, #0
   171f4:	andne	r1, r1, #223	; 0xdf
   171f8:	mov	r0, #0
   171fc:	cmp	r1, r7
   17200:	bne	17230 <__assert_fail@plt+0x5ae8>
   17204:	cmp	r7, #0
   17208:	moveq	r0, #1
   1720c:	subeq	sp, fp, #16
   17210:	popeq	{r4, r5, r6, r7, fp, pc}
   17214:	ldr	r0, [fp, #12]
   17218:	ldr	r3, [fp, #8]
   1721c:	str	r0, [sp]
   17220:	mov	r0, r6
   17224:	mov	r1, r5
   17228:	mov	r2, r4
   1722c:	bl	17238 <__assert_fail@plt+0x5af0>
   17230:	sub	sp, fp, #16
   17234:	pop	{r4, r5, r6, r7, fp, pc}
   17238:	push	{r4, r5, r6, r7, fp, lr}
   1723c:	add	fp, sp, #16
   17240:	mov	r4, r3
   17244:	mov	r5, r2
   17248:	mov	r7, r1
   1724c:	mov	r6, r0
   17250:	mov	r0, r1
   17254:	bl	18a60 <__assert_fail@plt+0x7318>
   17258:	ldrb	r1, [r6, #3]
   1725c:	ldr	r3, [fp, #8]
   17260:	cmp	r0, #0
   17264:	andne	r1, r1, #223	; 0xdf
   17268:	mov	r0, #0
   1726c:	cmp	r1, r7
   17270:	popne	{r4, r5, r6, r7, fp, pc}
   17274:	cmp	r7, #0
   17278:	beq	17290 <__assert_fail@plt+0x5b48>
   1727c:	mov	r0, r6
   17280:	mov	r1, r5
   17284:	mov	r2, r4
   17288:	pop	{r4, r5, r6, r7, fp, lr}
   1728c:	b	17298 <__assert_fail@plt+0x5b50>
   17290:	mov	r0, #1
   17294:	pop	{r4, r5, r6, r7, fp, pc}
   17298:	push	{r4, r5, r6, r7, fp, lr}
   1729c:	add	fp, sp, #16
   172a0:	mov	r4, r3
   172a4:	mov	r5, r2
   172a8:	mov	r7, r1
   172ac:	mov	r6, r0
   172b0:	mov	r0, r1
   172b4:	bl	18a60 <__assert_fail@plt+0x7318>
   172b8:	ldrb	r1, [r6, #4]
   172bc:	cmp	r0, #0
   172c0:	andne	r1, r1, #223	; 0xdf
   172c4:	mov	r0, #0
   172c8:	cmp	r1, r7
   172cc:	popne	{r4, r5, r6, r7, fp, pc}
   172d0:	cmp	r7, #0
   172d4:	beq	172ec <__assert_fail@plt+0x5ba4>
   172d8:	mov	r0, r6
   172dc:	mov	r1, r5
   172e0:	mov	r2, r4
   172e4:	pop	{r4, r5, r6, r7, fp, lr}
   172e8:	b	172f4 <__assert_fail@plt+0x5bac>
   172ec:	mov	r0, #1
   172f0:	pop	{r4, r5, r6, r7, fp, pc}
   172f4:	push	{r4, r5, r6, sl, fp, lr}
   172f8:	add	fp, sp, #16
   172fc:	mov	r4, r2
   17300:	mov	r6, r1
   17304:	mov	r5, r0
   17308:	mov	r0, r1
   1730c:	bl	18a60 <__assert_fail@plt+0x7318>
   17310:	ldrb	r1, [r5, #5]
   17314:	cmp	r0, #0
   17318:	andne	r1, r1, #223	; 0xdf
   1731c:	mov	r0, #0
   17320:	cmp	r1, r6
   17324:	popne	{r4, r5, r6, sl, fp, pc}
   17328:	cmp	r6, #0
   1732c:	beq	17340 <__assert_fail@plt+0x5bf8>
   17330:	mov	r0, r5
   17334:	mov	r1, r4
   17338:	pop	{r4, r5, r6, sl, fp, lr}
   1733c:	b	17348 <__assert_fail@plt+0x5c00>
   17340:	mov	r0, #1
   17344:	pop	{r4, r5, r6, sl, fp, pc}
   17348:	push	{r4, r5, fp, lr}
   1734c:	add	fp, sp, #8
   17350:	mov	r5, r1
   17354:	mov	r4, r0
   17358:	mov	r0, r1
   1735c:	bl	18a60 <__assert_fail@plt+0x7318>
   17360:	ldrb	r1, [r4, #6]
   17364:	cmp	r0, #0
   17368:	andne	r1, r1, #223	; 0xdf
   1736c:	mov	r0, #0
   17370:	cmp	r1, r5
   17374:	popne	{r4, r5, fp, pc}
   17378:	cmp	r5, #0
   1737c:	beq	1738c <__assert_fail@plt+0x5c44>
   17380:	mov	r0, r4
   17384:	pop	{r4, r5, fp, lr}
   17388:	b	17394 <__assert_fail@plt+0x5c4c>
   1738c:	mov	r0, #1
   17390:	pop	{r4, r5, fp, pc}
   17394:	push	{r4, sl, fp, lr}
   17398:	add	fp, sp, #8
   1739c:	mov	r4, r0
   173a0:	mov	r0, #0
   173a4:	bl	18a60 <__assert_fail@plt+0x7318>
   173a8:	ldrb	r1, [r4, #7]
   173ac:	cmp	r0, #0
   173b0:	beq	173c8 <__assert_fail@plt+0x5c80>
   173b4:	tst	r1, #223	; 0xdf
   173b8:	moveq	r0, #1
   173bc:	popeq	{r4, sl, fp, pc}
   173c0:	mov	r0, #0
   173c4:	pop	{r4, sl, fp, pc}
   173c8:	cmp	r1, #0
   173cc:	moveq	r0, #1
   173d0:	popeq	{r4, sl, fp, pc}
   173d4:	mov	r0, #0
   173d8:	pop	{r4, sl, fp, pc}
   173dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   173e0:	add	fp, sp, #24
   173e4:	mov	r7, r2
   173e8:	mov	r5, r1
   173ec:	mov	r6, r0
   173f0:	movw	r9, #0
   173f4:	movt	r9, #32752	; 0x7ff0
   173f8:	mov	r0, r6
   173fc:	mov	r1, r5
   17400:	mov	r2, r7
   17404:	bl	113e8 <read@plt>
   17408:	mov	r4, r0
   1740c:	cmn	r0, #1
   17410:	movgt	r0, r4
   17414:	popgt	{r4, r5, r6, r7, r8, r9, fp, pc}
   17418:	bl	115f8 <__errno_location@plt>
   1741c:	ldr	r0, [r0]
   17420:	cmp	r0, #4
   17424:	beq	173f8 <__assert_fail@plt+0x5cb0>
   17428:	cmp	r7, r9
   1742c:	mov	r1, #0
   17430:	movwhi	r1, #1
   17434:	sub	r2, r0, #22
   17438:	clz	r2, r2
   1743c:	lsr	r2, r2, #5
   17440:	ands	r1, r1, r2
   17444:	moveq	r8, r4
   17448:	mov	r1, r7
   1744c:	movwne	r1, #0
   17450:	movtne	r1, #32752	; 0x7ff0
   17454:	cmp	r7, r9
   17458:	bls	17468 <__assert_fail@plt+0x5d20>
   1745c:	cmp	r0, #22
   17460:	mov	r7, r1
   17464:	beq	173f8 <__assert_fail@plt+0x5cb0>
   17468:	mov	r0, r8
   1746c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17470:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17474:	add	fp, sp, #24
   17478:	mov	r7, r2
   1747c:	mov	r5, r1
   17480:	mov	r6, r0
   17484:	movw	r9, #0
   17488:	movt	r9, #32752	; 0x7ff0
   1748c:	mov	r0, r6
   17490:	mov	r1, r5
   17494:	mov	r2, r7
   17498:	bl	11634 <write@plt>
   1749c:	mov	r4, r0
   174a0:	cmn	r0, #1
   174a4:	movgt	r0, r4
   174a8:	popgt	{r4, r5, r6, r7, r8, r9, fp, pc}
   174ac:	bl	115f8 <__errno_location@plt>
   174b0:	ldr	r0, [r0]
   174b4:	cmp	r0, #4
   174b8:	beq	1748c <__assert_fail@plt+0x5d44>
   174bc:	cmp	r7, r9
   174c0:	mov	r1, #0
   174c4:	movwhi	r1, #1
   174c8:	sub	r2, r0, #22
   174cc:	clz	r2, r2
   174d0:	lsr	r2, r2, #5
   174d4:	ands	r1, r1, r2
   174d8:	moveq	r8, r4
   174dc:	mov	r1, r7
   174e0:	movwne	r1, #0
   174e4:	movtne	r1, #32752	; 0x7ff0
   174e8:	cmp	r7, r9
   174ec:	bls	174fc <__assert_fail@plt+0x5db4>
   174f0:	cmp	r0, #22
   174f4:	mov	r7, r1
   174f8:	beq	1748c <__assert_fail@plt+0x5d44>
   174fc:	mov	r0, r8
   17500:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17504:	push	{r4, sl, fp, lr}
   17508:	add	fp, sp, #8
   1750c:	mov	r4, r1
   17510:	bl	17520 <__assert_fail@plt+0x5dd8>
   17514:	str	r0, [r4]
   17518:	asr	r0, r0, #31
   1751c:	pop	{r4, sl, fp, pc}
   17520:	push	{r4, r5, r6, sl, fp, lr}
   17524:	add	fp, sp, #16
   17528:	sub	sp, sp, #8
   1752c:	mov	r4, r0
   17530:	ldrb	r0, [r0]
   17534:	sub	r0, r0, #48	; 0x30
   17538:	cmp	r0, #10
   1753c:	bcs	17570 <__assert_fail@plt+0x5e28>
   17540:	add	r1, sp, #4
   17544:	mov	r0, r4
   17548:	mov	r2, #10
   1754c:	bl	113dc <strtol@plt>
   17550:	cmp	r0, #64	; 0x40
   17554:	bgt	17680 <__assert_fail@plt+0x5f38>
   17558:	ldr	r1, [sp, #4]
   1755c:	ldrb	r1, [r1]
   17560:	cmp	r1, #0
   17564:	bne	17680 <__assert_fail@plt+0x5f38>
   17568:	sub	sp, fp, #16
   1756c:	pop	{r4, r5, r6, sl, fp, pc}
   17570:	movw	r0, #45488	; 0xb1b0
   17574:	movt	r0, #2
   17578:	add	r5, r0, #4
   1757c:	mov	r6, #0
   17580:	mov	r0, r5
   17584:	mov	r1, r4
   17588:	bl	113d0 <strcmp@plt>
   1758c:	cmp	r0, #0
   17590:	beq	17638 <__assert_fail@plt+0x5ef0>
   17594:	add	r5, r5, #12
   17598:	add	r6, r6, #1
   1759c:	cmp	r6, #35	; 0x23
   175a0:	bcc	17580 <__assert_fail@plt+0x5e38>
   175a4:	bl	1170c <__libc_current_sigrtmin@plt>
   175a8:	mov	r5, r0
   175ac:	bl	115bc <__libc_current_sigrtmax@plt>
   175b0:	mov	r6, r0
   175b4:	cmp	r5, #1
   175b8:	blt	175d8 <__assert_fail@plt+0x5e90>
   175bc:	movw	r1, #42128	; 0xa490
   175c0:	movt	r1, #1
   175c4:	mov	r0, r4
   175c8:	mov	r2, #5
   175cc:	bl	11718 <strncmp@plt>
   175d0:	cmp	r0, #0
   175d4:	beq	17644 <__assert_fail@plt+0x5efc>
   175d8:	cmp	r6, #1
   175dc:	blt	17680 <__assert_fail@plt+0x5f38>
   175e0:	movw	r1, #42134	; 0xa496
   175e4:	movt	r1, #1
   175e8:	mov	r0, r4
   175ec:	mov	r2, #5
   175f0:	bl	11718 <strncmp@plt>
   175f4:	cmp	r0, #0
   175f8:	bne	17680 <__assert_fail@plt+0x5f38>
   175fc:	add	r0, r4, #5
   17600:	mov	r1, sp
   17604:	mov	r2, #10
   17608:	bl	113dc <strtol@plt>
   1760c:	ldr	r1, [sp]
   17610:	ldrb	r1, [r1]
   17614:	cmp	r1, #0
   17618:	bne	17680 <__assert_fail@plt+0x5f38>
   1761c:	sub	r1, r5, r6
   17620:	cmp	r1, r0
   17624:	cmple	r0, #0
   17628:	bgt	17680 <__assert_fail@plt+0x5f38>
   1762c:	add	r0, r0, r6
   17630:	sub	sp, fp, #16
   17634:	pop	{r4, r5, r6, sl, fp, pc}
   17638:	ldr	r0, [r5, #-4]
   1763c:	sub	sp, fp, #16
   17640:	pop	{r4, r5, r6, sl, fp, pc}
   17644:	add	r0, r4, #5
   17648:	mov	r1, sp
   1764c:	mov	r2, #10
   17650:	bl	113dc <strtol@plt>
   17654:	sub	r1, r6, r5
   17658:	cmp	r0, r1
   1765c:	bgt	17680 <__assert_fail@plt+0x5f38>
   17660:	cmp	r0, #0
   17664:	blt	17680 <__assert_fail@plt+0x5f38>
   17668:	ldr	r1, [sp]
   1766c:	ldrb	r1, [r1]
   17670:	cmp	r1, #0
   17674:	addeq	r0, r0, r5
   17678:	subeq	sp, fp, #16
   1767c:	popeq	{r4, r5, r6, sl, fp, pc}
   17680:	mvn	r0, #0
   17684:	sub	sp, fp, #16
   17688:	pop	{r4, r5, r6, sl, fp, pc}
   1768c:	push	{r4, r5, r6, r7, fp, lr}
   17690:	add	fp, sp, #16
   17694:	sub	sp, sp, #8
   17698:	mov	r4, r1
   1769c:	mov	r5, r0
   176a0:	movw	r0, #45488	; 0xb1b0
   176a4:	movt	r0, #2
   176a8:	add	r1, r0, #4
   176ac:	mov	r0, #0
   176b0:	ldr	r2, [r1, #-4]
   176b4:	cmp	r2, r5
   176b8:	beq	1771c <__assert_fail@plt+0x5fd4>
   176bc:	add	r1, r1, #12
   176c0:	add	r0, r0, #1
   176c4:	cmp	r0, #35	; 0x23
   176c8:	bcc	176b0 <__assert_fail@plt+0x5f68>
   176cc:	bl	1170c <__libc_current_sigrtmin@plt>
   176d0:	mov	r7, r0
   176d4:	mvn	r6, #0
   176d8:	bl	115bc <__libc_current_sigrtmax@plt>
   176dc:	cmp	r7, r5
   176e0:	bgt	17768 <__assert_fail@plt+0x6020>
   176e4:	cmp	r0, r5
   176e8:	blt	17768 <__assert_fail@plt+0x6020>
   176ec:	sub	r1, r0, r7
   176f0:	add	r1, r1, r1, lsr #31
   176f4:	add	r1, r7, r1, asr #1
   176f8:	cmp	r1, r5
   176fc:	bge	1772c <__assert_fail@plt+0x5fe4>
   17700:	mov	r1, #88	; 0x58
   17704:	strh	r1, [r4, #4]
   17708:	movw	r1, #21586	; 0x5452
   1770c:	movt	r1, #16717	; 0x414d
   17710:	str	r1, [r4]
   17714:	mov	r7, r0
   17718:	b	17740 <__assert_fail@plt+0x5ff8>
   1771c:	mov	r0, r4
   17720:	bl	114fc <strcpy@plt>
   17724:	mov	r6, #0
   17728:	b	17768 <__assert_fail@plt+0x6020>
   1772c:	mov	r0, #78	; 0x4e
   17730:	strh	r0, [r4, #4]
   17734:	movw	r0, #21586	; 0x5452
   17738:	movt	r0, #18765	; 0x494d
   1773c:	str	r0, [r4]
   17740:	subs	r0, r5, r7
   17744:	mov	r6, #0
   17748:	beq	17768 <__assert_fail@plt+0x6020>
   1774c:	str	r0, [sp]
   17750:	add	r0, r4, #5
   17754:	movw	r3, #42140	; 0xa49c
   17758:	movt	r3, #1
   1775c:	mov	r1, #1
   17760:	mvn	r2, #0
   17764:	bl	11604 <__sprintf_chk@plt>
   17768:	mov	r0, r6
   1776c:	sub	sp, fp, #16
   17770:	pop	{r4, r5, r6, r7, fp, pc}
   17774:	push	{r4, r5, r6, r7, fp, lr}
   17778:	add	fp, sp, #16
   1777c:	mov	r4, r0
   17780:	cmp	r0, #2
   17784:	movhi	r0, r4
   17788:	pophi	{r4, r5, r6, r7, fp, pc}
   1778c:	mov	r0, r4
   17790:	bl	18c7c <__assert_fail@plt+0x7534>
   17794:	mov	r5, r0
   17798:	bl	115f8 <__errno_location@plt>
   1779c:	mov	r6, r0
   177a0:	ldr	r7, [r0]
   177a4:	mov	r0, r4
   177a8:	bl	11730 <close@plt>
   177ac:	str	r7, [r6]
   177b0:	mov	r0, r5
   177b4:	pop	{r4, r5, r6, r7, fp, pc}
   177b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   177bc:	add	fp, sp, #24
   177c0:	sub	sp, sp, #32
   177c4:	mov	r4, r2
   177c8:	mov	r8, r0
   177cc:	ldr	r6, [fp, #12]
   177d0:	ldr	r7, [fp, #8]
   177d4:	cmp	r1, #0
   177d8:	beq	17800 <__assert_fail@plt+0x60b8>
   177dc:	mov	r5, r1
   177e0:	str	r4, [sp]
   177e4:	str	r3, [sp, #4]
   177e8:	movw	r2, #42144	; 0xa4a0
   177ec:	movt	r2, #1
   177f0:	mov	r0, r8
   177f4:	mov	r1, #1
   177f8:	mov	r3, r5
   177fc:	b	17818 <__assert_fail@plt+0x60d0>
   17800:	str	r3, [sp]
   17804:	movw	r2, #42156	; 0xa4ac
   17808:	movt	r2, #1
   1780c:	mov	r0, r8
   17810:	mov	r1, #1
   17814:	mov	r3, r4
   17818:	bl	11658 <__fprintf_chk@plt>
   1781c:	movw	r1, #42163	; 0xa4b3
   17820:	movt	r1, #1
   17824:	mov	r0, #0
   17828:	mov	r2, #5
   1782c:	bl	1146c <dcgettext@plt>
   17830:	mov	r3, r0
   17834:	movw	r0, #2022	; 0x7e6
   17838:	str	r0, [sp]
   1783c:	movw	r2, #42881	; 0xa781
   17840:	movt	r2, #1
   17844:	mov	r0, r8
   17848:	mov	r1, #1
   1784c:	bl	11658 <__fprintf_chk@plt>
   17850:	movw	r4, #38524	; 0x967c
   17854:	movt	r4, #1
   17858:	mov	r0, r4
   1785c:	mov	r1, r8
   17860:	bl	113b8 <fputs_unlocked@plt>
   17864:	movw	r1, #42167	; 0xa4b7
   17868:	movt	r1, #1
   1786c:	mov	r0, #0
   17870:	mov	r2, #5
   17874:	bl	1146c <dcgettext@plt>
   17878:	mov	r2, r0
   1787c:	movw	r3, #42338	; 0xa562
   17880:	movt	r3, #1
   17884:	mov	r0, r8
   17888:	mov	r1, #1
   1788c:	bl	11658 <__fprintf_chk@plt>
   17890:	mov	r0, r4
   17894:	mov	r1, r8
   17898:	bl	113b8 <fputs_unlocked@plt>
   1789c:	cmp	r6, #9
   178a0:	bhi	178dc <__assert_fail@plt+0x6194>
   178a4:	add	r0, pc, #0
   178a8:	ldr	pc, [r0, r6, lsl #2]
   178ac:	ldrdeq	r7, [r1], -r4
   178b0:	andeq	r7, r1, r8, ror #17
   178b4:	andeq	r7, r1, r8, lsl r9
   178b8:	andeq	r7, r1, r0, asr #18
   178bc:	andeq	r7, r1, r8, ror #18
   178c0:	muleq	r1, r0, r9
   178c4:			; <UNDEFINED> instruction: 0x000179b8
   178c8:	strdeq	r7, [r1], -r0
   178cc:	muleq	r1, r0, sl
   178d0:	andeq	r7, r1, r8, lsr sl
   178d4:	sub	sp, fp, #24
   178d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   178dc:	movw	r1, #42691	; 0xa6c3
   178e0:	movt	r1, #1
   178e4:	b	17a40 <__assert_fail@plt+0x62f8>
   178e8:	movw	r1, #42372	; 0xa584
   178ec:	movt	r1, #1
   178f0:	mov	r0, #0
   178f4:	mov	r2, #5
   178f8:	bl	1146c <dcgettext@plt>
   178fc:	mov	r2, r0
   17900:	ldr	r3, [r7]
   17904:	mov	r0, r8
   17908:	mov	r1, #1
   1790c:	sub	sp, fp, #24
   17910:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17914:	b	11658 <__fprintf_chk@plt>
   17918:	movw	r1, #42388	; 0xa594
   1791c:	movt	r1, #1
   17920:	mov	r0, #0
   17924:	mov	r2, #5
   17928:	bl	1146c <dcgettext@plt>
   1792c:	mov	r2, r0
   17930:	ldr	r3, [r7]
   17934:	ldr	r0, [r7, #4]
   17938:	str	r0, [sp]
   1793c:	b	17a2c <__assert_fail@plt+0x62e4>
   17940:	movw	r1, #42411	; 0xa5ab
   17944:	movt	r1, #1
   17948:	mov	r0, #0
   1794c:	mov	r2, #5
   17950:	bl	1146c <dcgettext@plt>
   17954:	mov	r2, r0
   17958:	ldr	r3, [r7]
   1795c:	ldmib	r7, {r0, r1}
   17960:	stm	sp, {r0, r1}
   17964:	b	17a2c <__assert_fail@plt+0x62e4>
   17968:	movw	r1, #42439	; 0xa5c7
   1796c:	movt	r1, #1
   17970:	mov	r0, #0
   17974:	mov	r2, #5
   17978:	bl	1146c <dcgettext@plt>
   1797c:	mov	r2, r0
   17980:	ldr	r3, [r7]
   17984:	ldmib	r7, {r0, r1, r7}
   17988:	stm	sp, {r0, r1, r7}
   1798c:	b	17a2c <__assert_fail@plt+0x62e4>
   17990:	movw	r1, #42471	; 0xa5e7
   17994:	movt	r1, #1
   17998:	mov	r0, #0
   1799c:	mov	r2, #5
   179a0:	bl	1146c <dcgettext@plt>
   179a4:	mov	r2, r0
   179a8:	ldr	r3, [r7]
   179ac:	ldmib	r7, {r0, r1, r6, r7}
   179b0:	stm	sp, {r0, r1, r6, r7}
   179b4:	b	17a2c <__assert_fail@plt+0x62e4>
   179b8:	movw	r1, #42507	; 0xa60b
   179bc:	movt	r1, #1
   179c0:	mov	r0, #0
   179c4:	mov	r2, #5
   179c8:	bl	1146c <dcgettext@plt>
   179cc:	mov	r2, r0
   179d0:	ldr	r3, [r7]
   179d4:	ldmib	r7, {r0, r1, r6}
   179d8:	ldr	r5, [r7, #16]
   179dc:	ldr	r7, [r7, #20]
   179e0:	stm	sp, {r0, r1, r6}
   179e4:	str	r5, [sp, #12]
   179e8:	str	r7, [sp, #16]
   179ec:	b	17a2c <__assert_fail@plt+0x62e4>
   179f0:	movw	r1, #42547	; 0xa633
   179f4:	movt	r1, #1
   179f8:	mov	r0, #0
   179fc:	mov	r2, #5
   17a00:	bl	1146c <dcgettext@plt>
   17a04:	mov	r2, r0
   17a08:	ldr	r3, [r7]
   17a0c:	ldmib	r7, {r0, r1, r6}
   17a10:	ldr	r5, [r7, #16]
   17a14:	ldr	r4, [r7, #20]
   17a18:	ldr	r7, [r7, #24]
   17a1c:	stm	sp, {r0, r1, r6}
   17a20:	str	r5, [sp, #12]
   17a24:	str	r4, [sp, #16]
   17a28:	str	r7, [sp, #20]
   17a2c:	mov	r0, r8
   17a30:	mov	r1, #1
   17a34:	b	17ae0 <__assert_fail@plt+0x6398>
   17a38:	movw	r1, #42639	; 0xa68f
   17a3c:	movt	r1, #1
   17a40:	mov	r0, #0
   17a44:	mov	r2, #5
   17a48:	bl	1146c <dcgettext@plt>
   17a4c:	mov	ip, r0
   17a50:	ldr	r3, [r7]
   17a54:	ldr	r0, [r7, #4]
   17a58:	ldr	r1, [r7, #8]
   17a5c:	ldr	r6, [r7, #12]
   17a60:	ldr	r5, [r7, #16]
   17a64:	ldr	r4, [r7, #20]
   17a68:	ldr	r2, [r7, #24]
   17a6c:	ldr	lr, [r7, #28]
   17a70:	ldr	r7, [r7, #32]
   17a74:	stm	sp, {r0, r1, r6}
   17a78:	str	r5, [sp, #12]
   17a7c:	str	r4, [sp, #16]
   17a80:	str	r2, [sp, #20]
   17a84:	str	lr, [sp, #24]
   17a88:	str	r7, [sp, #28]
   17a8c:	b	17ad4 <__assert_fail@plt+0x638c>
   17a90:	movw	r1, #42591	; 0xa65f
   17a94:	movt	r1, #1
   17a98:	mov	r0, #0
   17a9c:	mov	r2, #5
   17aa0:	bl	1146c <dcgettext@plt>
   17aa4:	mov	ip, r0
   17aa8:	ldr	r3, [r7]
   17aac:	ldmib	r7, {r0, r1, r6}
   17ab0:	ldr	r5, [r7, #16]
   17ab4:	ldr	r4, [r7, #20]
   17ab8:	ldr	r2, [r7, #24]
   17abc:	ldr	r7, [r7, #28]
   17ac0:	stm	sp, {r0, r1, r6}
   17ac4:	str	r5, [sp, #12]
   17ac8:	str	r4, [sp, #16]
   17acc:	str	r2, [sp, #20]
   17ad0:	str	r7, [sp, #24]
   17ad4:	mov	r0, r8
   17ad8:	mov	r1, #1
   17adc:	mov	r2, ip
   17ae0:	bl	11658 <__fprintf_chk@plt>
   17ae4:	sub	sp, fp, #24
   17ae8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17aec:	push	{r4, sl, fp, lr}
   17af0:	add	fp, sp, #8
   17af4:	sub	sp, sp, #8
   17af8:	mov	lr, #0
   17afc:	ldr	ip, [fp, #8]
   17b00:	ldr	r4, [ip, lr, lsl #2]
   17b04:	add	lr, lr, #1
   17b08:	cmp	r4, #0
   17b0c:	bne	17b00 <__assert_fail@plt+0x63b8>
   17b10:	sub	r4, lr, #1
   17b14:	str	ip, [sp]
   17b18:	str	r4, [sp, #4]
   17b1c:	bl	177b8 <__assert_fail@plt+0x6070>
   17b20:	sub	sp, fp, #8
   17b24:	pop	{r4, sl, fp, pc}
   17b28:	push	{r4, r5, fp, lr}
   17b2c:	add	fp, sp, #8
   17b30:	sub	sp, sp, #48	; 0x30
   17b34:	mov	ip, #0
   17b38:	ldr	r4, [fp, #8]
   17b3c:	add	lr, sp, #8
   17b40:	ldr	r5, [r4]
   17b44:	str	r5, [lr, ip, lsl #2]
   17b48:	cmp	r5, #0
   17b4c:	beq	17b60 <__assert_fail@plt+0x6418>
   17b50:	add	ip, ip, #1
   17b54:	add	r4, r4, #4
   17b58:	cmp	ip, #10
   17b5c:	bcc	17b40 <__assert_fail@plt+0x63f8>
   17b60:	str	lr, [sp]
   17b64:	str	ip, [sp, #4]
   17b68:	bl	177b8 <__assert_fail@plt+0x6070>
   17b6c:	sub	sp, fp, #8
   17b70:	pop	{r4, r5, fp, pc}
   17b74:	push	{fp, lr}
   17b78:	mov	fp, sp
   17b7c:	sub	sp, sp, #8
   17b80:	add	ip, fp, #8
   17b84:	str	ip, [sp, #4]
   17b88:	str	ip, [sp]
   17b8c:	bl	17b28 <__assert_fail@plt+0x63e0>
   17b90:	mov	sp, fp
   17b94:	pop	{fp, pc}
   17b98:	push	{fp, lr}
   17b9c:	mov	fp, sp
   17ba0:	movw	r0, #45932	; 0xb36c
   17ba4:	movt	r0, #2
   17ba8:	ldr	r1, [r0]
   17bac:	movw	r0, #38524	; 0x967c
   17bb0:	movt	r0, #1
   17bb4:	bl	113b8 <fputs_unlocked@plt>
   17bb8:	movw	r1, #42751	; 0xa6ff
   17bbc:	movt	r1, #1
   17bc0:	mov	r0, #0
   17bc4:	mov	r2, #5
   17bc8:	bl	1146c <dcgettext@plt>
   17bcc:	mov	r1, r0
   17bd0:	movw	r2, #42771	; 0xa713
   17bd4:	movt	r2, #1
   17bd8:	mov	r0, #1
   17bdc:	bl	11628 <__printf_chk@plt>
   17be0:	movw	r1, #42793	; 0xa729
   17be4:	movt	r1, #1
   17be8:	mov	r0, #0
   17bec:	mov	r2, #5
   17bf0:	bl	1146c <dcgettext@plt>
   17bf4:	mov	r1, r0
   17bf8:	movw	r2, #39595	; 0x9aab
   17bfc:	movt	r2, #1
   17c00:	movw	r3, #40308	; 0x9d74
   17c04:	movt	r3, #1
   17c08:	mov	r0, #1
   17c0c:	bl	11628 <__printf_chk@plt>
   17c10:	movw	r1, #42813	; 0xa73d
   17c14:	movt	r1, #1
   17c18:	mov	r0, #0
   17c1c:	mov	r2, #5
   17c20:	bl	1146c <dcgettext@plt>
   17c24:	mov	r1, r0
   17c28:	movw	r2, #42852	; 0xa764
   17c2c:	movt	r2, #1
   17c30:	mov	r0, #1
   17c34:	pop	{fp, lr}
   17c38:	b	11628 <__printf_chk@plt>
   17c3c:	push	{fp, lr}
   17c40:	mov	fp, sp
   17c44:	bl	18798 <__assert_fail@plt+0x7050>
   17c48:	cmp	r0, #0
   17c4c:	popne	{fp, pc}
   17c50:	bl	18044 <__assert_fail@plt+0x68fc>
   17c54:	b	17c58 <__assert_fail@plt+0x6510>
   17c58:	push	{r4, r5, r6, sl, fp, lr}
   17c5c:	add	fp, sp, #16
   17c60:	mov	r4, r2
   17c64:	mov	r5, r1
   17c68:	mov	r6, r0
   17c6c:	bl	18c40 <__assert_fail@plt+0x74f8>
   17c70:	cmp	r0, #0
   17c74:	popne	{r4, r5, r6, sl, fp, pc}
   17c78:	cmp	r6, #0
   17c7c:	beq	17c90 <__assert_fail@plt+0x6548>
   17c80:	cmp	r5, #0
   17c84:	cmpne	r4, #0
   17c88:	bne	17c90 <__assert_fail@plt+0x6548>
   17c8c:	pop	{r4, r5, r6, sl, fp, pc}
   17c90:	bl	18044 <__assert_fail@plt+0x68fc>
   17c94:	push	{fp, lr}
   17c98:	mov	fp, sp
   17c9c:	bl	18710 <__assert_fail@plt+0x6fc8>
   17ca0:	bl	17ca8 <__assert_fail@plt+0x6560>
   17ca4:	pop	{fp, pc}
   17ca8:	cmp	r0, #0
   17cac:	bxne	lr
   17cb0:	push	{fp, lr}
   17cb4:	mov	fp, sp
   17cb8:	bl	18044 <__assert_fail@plt+0x68fc>
   17cbc:	push	{fp, lr}
   17cc0:	mov	fp, sp
   17cc4:	bl	18b74 <__assert_fail@plt+0x742c>
   17cc8:	bl	17ca8 <__assert_fail@plt+0x6560>
   17ccc:	pop	{fp, pc}
   17cd0:	b	17c94 <__assert_fail@plt+0x654c>
   17cd4:	push	{r4, r5, fp, lr}
   17cd8:	add	fp, sp, #8
   17cdc:	mov	r4, r1
   17ce0:	mov	r5, r0
   17ce4:	bl	18740 <__assert_fail@plt+0x6ff8>
   17ce8:	cmp	r0, #0
   17cec:	popne	{r4, r5, fp, pc}
   17cf0:	cmp	r5, #0
   17cf4:	beq	17d04 <__assert_fail@plt+0x65bc>
   17cf8:	cmp	r4, #0
   17cfc:	bne	17d04 <__assert_fail@plt+0x65bc>
   17d00:	pop	{r4, r5, fp, pc}
   17d04:	bl	18044 <__assert_fail@plt+0x68fc>
   17d08:	push	{fp, lr}
   17d0c:	mov	fp, sp
   17d10:	bl	18b78 <__assert_fail@plt+0x7430>
   17d14:	bl	17ca8 <__assert_fail@plt+0x6560>
   17d18:	pop	{fp, pc}
   17d1c:	push	{fp, lr}
   17d20:	mov	fp, sp
   17d24:	bl	18b88 <__assert_fail@plt+0x7440>
   17d28:	bl	17ca8 <__assert_fail@plt+0x6560>
   17d2c:	pop	{fp, pc}
   17d30:	push	{fp, lr}
   17d34:	mov	fp, sp
   17d38:	mov	r2, r1
   17d3c:	mov	r1, r0
   17d40:	mov	r0, #0
   17d44:	bl	17c58 <__assert_fail@plt+0x6510>
   17d48:	pop	{fp, pc}
   17d4c:	mov	r2, r1
   17d50:	mov	r1, r0
   17d54:	mov	r0, #0
   17d58:	b	17d1c <__assert_fail@plt+0x65d4>
   17d5c:	mov	r2, #1
   17d60:	b	17d64 <__assert_fail@plt+0x661c>
   17d64:	push	{r4, r5, fp, lr}
   17d68:	add	fp, sp, #8
   17d6c:	mov	r4, r1
   17d70:	ldr	r5, [r1]
   17d74:	cmp	r0, #0
   17d78:	beq	17d90 <__assert_fail@plt+0x6648>
   17d7c:	mov	r1, #1
   17d80:	add	r1, r1, r5, lsr #1
   17d84:	adds	r5, r5, r1
   17d88:	bcc	17da8 <__assert_fail@plt+0x6660>
   17d8c:	bl	18044 <__assert_fail@plt+0x68fc>
   17d90:	cmp	r5, #0
   17d94:	bne	17da8 <__assert_fail@plt+0x6660>
   17d98:	mov	r1, #64	; 0x40
   17d9c:	udiv	r5, r1, r2
   17da0:	cmp	r2, #64	; 0x40
   17da4:	addhi	r5, r5, #1
   17da8:	mov	r1, r5
   17dac:	bl	17c58 <__assert_fail@plt+0x6510>
   17db0:	str	r5, [r4]
   17db4:	pop	{r4, r5, fp, pc}
   17db8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17dbc:	add	fp, sp, #24
   17dc0:	mov	r8, r1
   17dc4:	ldr	r6, [r1]
   17dc8:	add	r1, r6, r6, asr #1
   17dcc:	cmp	r1, r6
   17dd0:	mvnvs	r1, #-2147483648	; 0x80000000
   17dd4:	cmp	r1, r3
   17dd8:	mov	r5, r1
   17ddc:	movgt	r5, r3
   17de0:	cmn	r3, #1
   17de4:	movle	r5, r1
   17de8:	ldr	r4, [fp, #8]
   17dec:	cmn	r4, #1
   17df0:	ble	17e18 <__assert_fail@plt+0x66d0>
   17df4:	cmp	r4, #0
   17df8:	beq	17e6c <__assert_fail@plt+0x6724>
   17dfc:	cmn	r5, #1
   17e00:	ble	17e40 <__assert_fail@plt+0x66f8>
   17e04:	mvn	r7, #-2147483648	; 0x80000000
   17e08:	udiv	r1, r7, r4
   17e0c:	cmp	r1, r5
   17e10:	bge	17e6c <__assert_fail@plt+0x6724>
   17e14:	b	17e7c <__assert_fail@plt+0x6734>
   17e18:	cmn	r5, #1
   17e1c:	ble	17e5c <__assert_fail@plt+0x6714>
   17e20:	cmn	r4, #1
   17e24:	beq	17e6c <__assert_fail@plt+0x6724>
   17e28:	mov	r1, #-2147483648	; 0x80000000
   17e2c:	sdiv	r1, r1, r4
   17e30:	mvn	r7, #-2147483648	; 0x80000000
   17e34:	cmp	r1, r5
   17e38:	bge	17e6c <__assert_fail@plt+0x6724>
   17e3c:	b	17e7c <__assert_fail@plt+0x6734>
   17e40:	beq	17e6c <__assert_fail@plt+0x6724>
   17e44:	mov	r1, #-2147483648	; 0x80000000
   17e48:	sdiv	r1, r1, r5
   17e4c:	mvn	r7, #-2147483648	; 0x80000000
   17e50:	cmp	r1, r4
   17e54:	bge	17e6c <__assert_fail@plt+0x6724>
   17e58:	b	17e7c <__assert_fail@plt+0x6734>
   17e5c:	mvn	r7, #-2147483648	; 0x80000000
   17e60:	sdiv	r1, r7, r4
   17e64:	cmp	r5, r1
   17e68:	blt	17e7c <__assert_fail@plt+0x6734>
   17e6c:	mul	r1, r5, r4
   17e70:	mov	r7, #64	; 0x40
   17e74:	cmp	r1, #63	; 0x3f
   17e78:	bgt	17e84 <__assert_fail@plt+0x673c>
   17e7c:	sdiv	r5, r7, r4
   17e80:	mul	r1, r5, r4
   17e84:	cmp	r0, #0
   17e88:	moveq	r7, #0
   17e8c:	streq	r7, [r8]
   17e90:	sub	r7, r5, r6
   17e94:	cmp	r7, r2
   17e98:	bge	17f44 <__assert_fail@plt+0x67fc>
   17e9c:	add	r5, r6, r2
   17ea0:	mov	r1, #0
   17ea4:	cmp	r5, r3
   17ea8:	mov	r2, #0
   17eac:	movwgt	r2, #1
   17eb0:	cmn	r3, #1
   17eb4:	movwgt	r1, #1
   17eb8:	cmp	r5, r6
   17ebc:	bvs	17f2c <__assert_fail@plt+0x67e4>
   17ec0:	ands	r1, r1, r2
   17ec4:	bne	17f2c <__assert_fail@plt+0x67e4>
   17ec8:	cmn	r4, #1
   17ecc:	ble	17ef4 <__assert_fail@plt+0x67ac>
   17ed0:	cmp	r4, #0
   17ed4:	beq	17f40 <__assert_fail@plt+0x67f8>
   17ed8:	cmn	r5, #1
   17edc:	ble	17f18 <__assert_fail@plt+0x67d0>
   17ee0:	mvn	r1, #-2147483648	; 0x80000000
   17ee4:	udiv	r1, r1, r4
   17ee8:	cmp	r1, r5
   17eec:	bge	17f40 <__assert_fail@plt+0x67f8>
   17ef0:	b	17f2c <__assert_fail@plt+0x67e4>
   17ef4:	cmn	r5, #1
   17ef8:	ble	17f30 <__assert_fail@plt+0x67e8>
   17efc:	cmn	r4, #1
   17f00:	beq	17f40 <__assert_fail@plt+0x67f8>
   17f04:	mov	r1, #-2147483648	; 0x80000000
   17f08:	sdiv	r1, r1, r4
   17f0c:	cmp	r1, r5
   17f10:	bge	17f40 <__assert_fail@plt+0x67f8>
   17f14:	b	17f2c <__assert_fail@plt+0x67e4>
   17f18:	beq	17f40 <__assert_fail@plt+0x67f8>
   17f1c:	mov	r1, #-2147483648	; 0x80000000
   17f20:	sdiv	r1, r1, r5
   17f24:	cmp	r1, r4
   17f28:	bge	17f40 <__assert_fail@plt+0x67f8>
   17f2c:	bl	18044 <__assert_fail@plt+0x68fc>
   17f30:	mvn	r1, #-2147483648	; 0x80000000
   17f34:	sdiv	r1, r1, r4
   17f38:	cmp	r5, r1
   17f3c:	blt	17f2c <__assert_fail@plt+0x67e4>
   17f40:	mul	r1, r5, r4
   17f44:	bl	17cd4 <__assert_fail@plt+0x658c>
   17f48:	str	r5, [r8]
   17f4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17f50:	mov	r1, #1
   17f54:	b	17f58 <__assert_fail@plt+0x6810>
   17f58:	push	{fp, lr}
   17f5c:	mov	fp, sp
   17f60:	bl	186bc <__assert_fail@plt+0x6f74>
   17f64:	bl	17ca8 <__assert_fail@plt+0x6560>
   17f68:	pop	{fp, pc}
   17f6c:	mov	r1, #1
   17f70:	b	17f74 <__assert_fail@plt+0x682c>
   17f74:	push	{fp, lr}
   17f78:	mov	fp, sp
   17f7c:	bl	18b84 <__assert_fail@plt+0x743c>
   17f80:	bl	17ca8 <__assert_fail@plt+0x6560>
   17f84:	pop	{fp, pc}
   17f88:	push	{r4, r5, r6, sl, fp, lr}
   17f8c:	add	fp, sp, #16
   17f90:	mov	r4, r1
   17f94:	mov	r5, r0
   17f98:	mov	r0, r1
   17f9c:	bl	17c94 <__assert_fail@plt+0x654c>
   17fa0:	mov	r6, r0
   17fa4:	mov	r1, r5
   17fa8:	mov	r2, r4
   17fac:	bl	11430 <memcpy@plt>
   17fb0:	mov	r0, r6
   17fb4:	pop	{r4, r5, r6, sl, fp, pc}
   17fb8:	push	{r4, r5, r6, sl, fp, lr}
   17fbc:	add	fp, sp, #16
   17fc0:	mov	r4, r1
   17fc4:	mov	r5, r0
   17fc8:	mov	r0, r1
   17fcc:	bl	17cbc <__assert_fail@plt+0x6574>
   17fd0:	mov	r6, r0
   17fd4:	mov	r1, r5
   17fd8:	mov	r2, r4
   17fdc:	bl	11430 <memcpy@plt>
   17fe0:	mov	r0, r6
   17fe4:	pop	{r4, r5, r6, sl, fp, pc}
   17fe8:	push	{r4, r5, r6, sl, fp, lr}
   17fec:	add	fp, sp, #16
   17ff0:	mov	r4, r1
   17ff4:	mov	r5, r0
   17ff8:	add	r0, r1, #1
   17ffc:	bl	17cbc <__assert_fail@plt+0x6574>
   18000:	mov	r6, r0
   18004:	mov	r0, #0
   18008:	strb	r0, [r6, r4]
   1800c:	mov	r0, r6
   18010:	mov	r1, r5
   18014:	mov	r2, r4
   18018:	bl	11430 <memcpy@plt>
   1801c:	mov	r0, r6
   18020:	pop	{r4, r5, r6, sl, fp, pc}
   18024:	push	{r4, sl, fp, lr}
   18028:	add	fp, sp, #8
   1802c:	mov	r4, r0
   18030:	bl	115b0 <strlen@plt>
   18034:	add	r1, r0, #1
   18038:	mov	r0, r4
   1803c:	pop	{r4, sl, fp, lr}
   18040:	b	17f88 <__assert_fail@plt+0x6840>
   18044:	push	{fp, lr}
   18048:	mov	fp, sp
   1804c:	movw	r0, #45416	; 0xb168
   18050:	movt	r0, #2
   18054:	ldr	r4, [r0]
   18058:	movw	r1, #42928	; 0xa7b0
   1805c:	movt	r1, #1
   18060:	mov	r0, #0
   18064:	mov	r2, #5
   18068:	bl	1146c <dcgettext@plt>
   1806c:	mov	r3, r0
   18070:	movw	r2, #41482	; 0xa20a
   18074:	movt	r2, #1
   18078:	mov	r0, r4
   1807c:	mov	r1, #0
   18080:	bl	1152c <error@plt>
   18084:	bl	11724 <abort@plt>
   18088:	bx	lr
   1808c:	b	187a4 <__assert_fail@plt+0x705c>
   18090:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18094:	add	fp, sp, #24
   18098:	sub	sp, sp, #16
   1809c:	mov	r5, r3
   180a0:	mov	r6, r2
   180a4:	mov	r2, r1
   180a8:	mov	r8, r0
   180ac:	ldr	r0, [fp, #16]
   180b0:	str	r0, [sp]
   180b4:	add	r3, sp, #8
   180b8:	mov	r0, r8
   180bc:	mov	r1, #0
   180c0:	bl	18188 <__assert_fail@plt+0x6a40>
   180c4:	cmp	r0, #0
   180c8:	bne	18158 <__assert_fail@plt+0x6a10>
   180cc:	ldr	r7, [sp, #8]
   180d0:	ldr	r4, [sp, #12]
   180d4:	subs	r0, r7, r6
   180d8:	sbcs	r0, r4, r5
   180dc:	bcc	18100 <__assert_fail@plt+0x69b8>
   180e0:	ldr	r0, [fp, #12]
   180e4:	ldr	r1, [fp, #8]
   180e8:	subs	r1, r1, r7
   180ec:	sbcs	r0, r0, r4
   180f0:	ldrcs	r0, [sp, #8]
   180f4:	ldrcs	r1, [sp, #12]
   180f8:	subcs	sp, fp, #24
   180fc:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   18100:	bl	115f8 <__errno_location@plt>
   18104:	subs	r1, r7, #1073741824	; 0x40000000
   18108:	sbcs	r1, r4, #0
   1810c:	movcc	r1, #34	; 0x22
   18110:	movcs	r1, #75	; 0x4b
   18114:	str	r1, [r0]
   18118:	ldr	r5, [fp, #24]
   1811c:	ldr	r6, [fp, #20]
   18120:	bl	115f8 <__errno_location@plt>
   18124:	ldr	r4, [r0]
   18128:	mov	r0, r8
   1812c:	bl	16fc8 <__assert_fail@plt+0x5880>
   18130:	str	r0, [sp]
   18134:	subs	r1, r4, #22
   18138:	movne	r1, r4
   1813c:	cmp	r5, #0
   18140:	movweq	r5, #1
   18144:	movw	r2, #39701	; 0x9b15
   18148:	movt	r2, #1
   1814c:	mov	r0, r5
   18150:	mov	r3, r6
   18154:	bl	1152c <error@plt>
   18158:	cmp	r0, #1
   1815c:	beq	18174 <__assert_fail@plt+0x6a2c>
   18160:	cmp	r0, #3
   18164:	bne	18118 <__assert_fail@plt+0x69d0>
   18168:	bl	115f8 <__errno_location@plt>
   1816c:	mov	r1, #0
   18170:	b	18114 <__assert_fail@plt+0x69cc>
   18174:	bl	115f8 <__errno_location@plt>
   18178:	mov	r1, #75	; 0x4b
   1817c:	b	18114 <__assert_fail@plt+0x69cc>
   18180:	mov	r1, #10
   18184:	b	18090 <__assert_fail@plt+0x6948>
   18188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1818c:	add	fp, sp, #28
   18190:	sub	sp, sp, #20
   18194:	cmp	r2, #37	; 0x25
   18198:	bcs	185c8 <__assert_fail@plt+0x6e80>
   1819c:	mov	r5, r2
   181a0:	mov	r6, r1
   181a4:	mov	r4, r0
   181a8:	str	r3, [sp, #4]
   181ac:	ldr	sl, [fp, #8]
   181b0:	bl	115f8 <__errno_location@plt>
   181b4:	mov	r7, r0
   181b8:	mov	r0, #0
   181bc:	str	r0, [r7]
   181c0:	bl	11598 <__ctype_b_loc@plt>
   181c4:	ldr	r1, [r0]
   181c8:	mov	r2, r4
   181cc:	ldrb	r0, [r2], #1
   181d0:	add	r3, r1, r0, lsl #1
   181d4:	ldrb	r3, [r3, #1]
   181d8:	tst	r3, #32
   181dc:	bne	181cc <__assert_fail@plt+0x6a84>
   181e0:	add	r9, sp, #16
   181e4:	cmp	r6, #0
   181e8:	movne	r9, r6
   181ec:	mov	r8, #4
   181f0:	cmp	r0, #45	; 0x2d
   181f4:	beq	185bc <__assert_fail@plt+0x6e74>
   181f8:	mov	r0, r4
   181fc:	mov	r1, r9
   18200:	mov	r2, r5
   18204:	bl	1164c <strtoumax@plt>
   18208:	str	r1, [sp, #12]
   1820c:	str	r0, [sp, #8]
   18210:	ldr	r6, [r9]
   18214:	cmp	r6, r4
   18218:	beq	18240 <__assert_fail@plt+0x6af8>
   1821c:	ldr	r0, [r7]
   18220:	cmp	r0, #0
   18224:	beq	18274 <__assert_fail@plt+0x6b2c>
   18228:	cmp	r0, #34	; 0x22
   1822c:	bne	185bc <__assert_fail@plt+0x6e74>
   18230:	mov	r8, #1
   18234:	cmp	sl, #0
   18238:	bne	18280 <__assert_fail@plt+0x6b38>
   1823c:	b	185ac <__assert_fail@plt+0x6e64>
   18240:	cmp	sl, #0
   18244:	ldrbne	r1, [r6]
   18248:	cmpne	r1, #0
   1824c:	beq	185bc <__assert_fail@plt+0x6e74>
   18250:	mov	r0, sl
   18254:	bl	115c8 <strchr@plt>
   18258:	cmp	r0, #0
   1825c:	beq	185bc <__assert_fail@plt+0x6e74>
   18260:	mov	r8, #0
   18264:	str	r8, [sp, #12]
   18268:	mov	r0, #1
   1826c:	str	r0, [sp, #8]
   18270:	b	18280 <__assert_fail@plt+0x6b38>
   18274:	mov	r8, r0
   18278:	cmp	sl, #0
   1827c:	beq	185ac <__assert_fail@plt+0x6e64>
   18280:	ldrb	r4, [r6]
   18284:	cmp	r4, #0
   18288:	beq	185ac <__assert_fail@plt+0x6e64>
   1828c:	mov	r0, sl
   18290:	mov	r1, r4
   18294:	bl	115c8 <strchr@plt>
   18298:	cmp	r0, #0
   1829c:	beq	184ac <__assert_fail@plt+0x6d64>
   182a0:	sub	r0, r4, #69	; 0x45
   182a4:	mov	r7, #1
   182a8:	mov	r5, #1024	; 0x400
   182ac:	cmp	r0, #47	; 0x2f
   182b0:	bhi	183a8 <__assert_fail@plt+0x6c60>
   182b4:	add	r1, pc, #0
   182b8:	ldr	pc, [r1, r0, lsl #2]
   182bc:	andeq	r8, r1, ip, ror r3
   182c0:	andeq	r8, r1, r8, lsr #7
   182c4:	andeq	r8, r1, ip, ror r3
   182c8:	andeq	r8, r1, r8, lsr #7
   182cc:	andeq	r8, r1, r8, lsr #7
   182d0:	andeq	r8, r1, r8, lsr #7
   182d4:	andeq	r8, r1, ip, ror r3
   182d8:	andeq	r8, r1, r8, lsr #7
   182dc:	andeq	r8, r1, ip, ror r3
   182e0:	andeq	r8, r1, r8, lsr #7
   182e4:	andeq	r8, r1, r8, lsr #7
   182e8:	andeq	r8, r1, ip, ror r3
   182ec:	andeq	r8, r1, r8, lsr #7
   182f0:	andeq	r8, r1, r8, lsr #7
   182f4:	andeq	r8, r1, r8, lsr #7
   182f8:	andeq	r8, r1, ip, ror r3
   182fc:	andeq	r8, r1, r8, lsr #7
   18300:	andeq	r8, r1, r8, lsr #7
   18304:	andeq	r8, r1, r8, lsr #7
   18308:	andeq	r8, r1, r8, lsr #7
   1830c:	andeq	r8, r1, ip, ror r3
   18310:	andeq	r8, r1, ip, ror r3
   18314:	andeq	r8, r1, r8, lsr #7
   18318:	andeq	r8, r1, r8, lsr #7
   1831c:	andeq	r8, r1, r8, lsr #7
   18320:	andeq	r8, r1, r8, lsr #7
   18324:	andeq	r8, r1, r8, lsr #7
   18328:	andeq	r8, r1, r8, lsr #7
   1832c:	andeq	r8, r1, r8, lsr #7
   18330:	andeq	r8, r1, r8, lsr #7
   18334:	andeq	r8, r1, r8, lsr #7
   18338:	andeq	r8, r1, r8, lsr #7
   1833c:	andeq	r8, r1, r8, lsr #7
   18340:	andeq	r8, r1, r8, lsr #7
   18344:	andeq	r8, r1, ip, ror r3
   18348:	andeq	r8, r1, r8, lsr #7
   1834c:	andeq	r8, r1, r8, lsr #7
   18350:	andeq	r8, r1, r8, lsr #7
   18354:	andeq	r8, r1, ip, ror r3
   18358:	andeq	r8, r1, r8, lsr #7
   1835c:	andeq	r8, r1, ip, ror r3
   18360:	andeq	r8, r1, r8, lsr #7
   18364:	andeq	r8, r1, r8, lsr #7
   18368:	andeq	r8, r1, r8, lsr #7
   1836c:	andeq	r8, r1, r8, lsr #7
   18370:	andeq	r8, r1, r8, lsr #7
   18374:	andeq	r8, r1, r8, lsr #7
   18378:	andeq	r8, r1, ip, ror r3
   1837c:	mov	r0, sl
   18380:	mov	r1, #48	; 0x30
   18384:	bl	115c8 <strchr@plt>
   18388:	cmp	r0, #0
   1838c:	beq	183a8 <__assert_fail@plt+0x6c60>
   18390:	ldrb	r0, [r6, #1]
   18394:	cmp	r0, #66	; 0x42
   18398:	cmpne	r0, #68	; 0x44
   1839c:	bne	184c4 <__assert_fail@plt+0x6d7c>
   183a0:	mov	r7, #2
   183a4:	mov	r5, #1000	; 0x3e8
   183a8:	sub	r1, r4, #66	; 0x42
   183ac:	cmp	r1, #53	; 0x35
   183b0:	bhi	184ac <__assert_fail@plt+0x6d64>
   183b4:	mov	r0, #0
   183b8:	add	r2, pc, #0
   183bc:	ldr	pc, [r2, r1, lsl #2]
   183c0:	andeq	r8, r1, r0, lsr r5
   183c4:	andeq	r8, r1, ip, lsr #9
   183c8:	andeq	r8, r1, ip, lsr #9
   183cc:	andeq	r8, r1, ip, lsr r5
   183d0:	andeq	r8, r1, ip, lsr #9
   183d4:	muleq	r1, r8, r4
   183d8:	andeq	r8, r1, ip, lsr #9
   183dc:	andeq	r8, r1, ip, lsr #9
   183e0:	andeq	r8, r1, ip, lsr #9
   183e4:	andeq	r8, r1, r0, ror #9
   183e8:	andeq	r8, r1, ip, lsr #9
   183ec:	strdeq	r8, [r1], -r4
   183f0:	andeq	r8, r1, ip, lsr #9
   183f4:	andeq	r8, r1, ip, lsr #9
   183f8:	andeq	r8, r1, r0, asr r5
   183fc:	andeq	r8, r1, ip, lsr #9
   18400:	andeq	r8, r1, ip, lsr #9
   18404:	andeq	r8, r1, ip, lsr #9
   18408:	andeq	r8, r1, r8, lsl #10
   1840c:	andeq	r8, r1, ip, lsr #9
   18410:	andeq	r8, r1, ip, lsr #9
   18414:	andeq	r8, r1, ip, lsr #9
   18418:	andeq	r8, r1, ip, lsr #9
   1841c:	andeq	r8, r1, r4, ror #10
   18420:	andeq	r8, r1, ip, lsl r5
   18424:	andeq	r8, r1, ip, lsr #9
   18428:	andeq	r8, r1, ip, lsr #9
   1842c:	andeq	r8, r1, ip, lsr #9
   18430:	andeq	r8, r1, ip, lsr #9
   18434:	andeq	r8, r1, ip, lsr #9
   18438:	andeq	r8, r1, ip, lsr #9
   1843c:	andeq	r8, r1, ip, lsr #9
   18440:	andeq	r8, r1, r8, ror r5
   18444:	muleq	r1, r0, r5
   18448:	andeq	r8, r1, ip, lsr #9
   1844c:	andeq	r8, r1, ip, lsr #9
   18450:	andeq	r8, r1, ip, lsr #9
   18454:	muleq	r1, r8, r4
   18458:	andeq	r8, r1, ip, lsr #9
   1845c:	andeq	r8, r1, ip, lsr #9
   18460:	andeq	r8, r1, ip, lsr #9
   18464:	andeq	r8, r1, r0, ror #9
   18468:	andeq	r8, r1, ip, lsr #9
   1846c:	strdeq	r8, [r1], -r4
   18470:	andeq	r8, r1, ip, lsr #9
   18474:	andeq	r8, r1, ip, lsr #9
   18478:	andeq	r8, r1, ip, lsr #9
   1847c:	andeq	r8, r1, ip, lsr #9
   18480:	andeq	r8, r1, ip, lsr #9
   18484:	andeq	r8, r1, ip, lsr #9
   18488:	andeq	r8, r1, r8, lsl #10
   1848c:	andeq	r8, r1, ip, lsr #9
   18490:	andeq	r8, r1, ip, lsr #9
   18494:	andeq	r8, r1, r4, lsl #11
   18498:	add	r0, sp, #8
   1849c:	mov	r1, r5
   184a0:	mov	r2, #3
   184a4:	bl	18674 <__assert_fail@plt+0x6f2c>
   184a8:	b	18590 <__assert_fail@plt+0x6e48>
   184ac:	ldr	r0, [sp, #8]
   184b0:	ldr	r1, [sp, #12]
   184b4:	ldr	r2, [sp, #4]
   184b8:	strd	r0, [r2]
   184bc:	orr	r8, r8, #2
   184c0:	b	185bc <__assert_fail@plt+0x6e74>
   184c4:	cmp	r0, #105	; 0x69
   184c8:	bne	183a8 <__assert_fail@plt+0x6c60>
   184cc:	ldrb	r0, [r6, #2]
   184d0:	mov	r7, #1
   184d4:	cmp	r0, #66	; 0x42
   184d8:	movweq	r7, #3
   184dc:	b	183a8 <__assert_fail@plt+0x6c60>
   184e0:	add	r0, sp, #8
   184e4:	mov	r1, r5
   184e8:	mov	r2, #1
   184ec:	bl	18674 <__assert_fail@plt+0x6f2c>
   184f0:	b	18590 <__assert_fail@plt+0x6e48>
   184f4:	add	r0, sp, #8
   184f8:	mov	r1, r5
   184fc:	mov	r2, #2
   18500:	bl	18674 <__assert_fail@plt+0x6f2c>
   18504:	b	18590 <__assert_fail@plt+0x6e48>
   18508:	add	r0, sp, #8
   1850c:	mov	r1, r5
   18510:	mov	r2, #4
   18514:	bl	18674 <__assert_fail@plt+0x6f2c>
   18518:	b	18590 <__assert_fail@plt+0x6e48>
   1851c:	add	r0, sp, #8
   18520:	mov	r1, r5
   18524:	mov	r2, #7
   18528:	bl	18674 <__assert_fail@plt+0x6f2c>
   1852c:	b	18590 <__assert_fail@plt+0x6e48>
   18530:	add	r0, sp, #8
   18534:	mov	r1, #1024	; 0x400
   18538:	b	1858c <__assert_fail@plt+0x6e44>
   1853c:	add	r0, sp, #8
   18540:	mov	r1, r5
   18544:	mov	r2, #6
   18548:	bl	18674 <__assert_fail@plt+0x6f2c>
   1854c:	b	18590 <__assert_fail@plt+0x6e48>
   18550:	add	r0, sp, #8
   18554:	mov	r1, r5
   18558:	mov	r2, #5
   1855c:	bl	18674 <__assert_fail@plt+0x6f2c>
   18560:	b	18590 <__assert_fail@plt+0x6e48>
   18564:	add	r0, sp, #8
   18568:	mov	r1, r5
   1856c:	mov	r2, #8
   18570:	bl	18674 <__assert_fail@plt+0x6f2c>
   18574:	b	18590 <__assert_fail@plt+0x6e48>
   18578:	add	r0, sp, #8
   1857c:	mov	r1, #512	; 0x200
   18580:	b	1858c <__assert_fail@plt+0x6e44>
   18584:	add	r0, sp, #8
   18588:	mov	r1, #2
   1858c:	bl	185e8 <__assert_fail@plt+0x6ea0>
   18590:	ldr	r1, [r9]
   18594:	add	r2, r1, r7
   18598:	str	r2, [r9]
   1859c:	ldrb	r1, [r1, r7]
   185a0:	orr	r8, r0, r8
   185a4:	cmp	r1, #0
   185a8:	orrne	r8, r8, #2
   185ac:	ldr	r0, [sp, #8]
   185b0:	ldr	r1, [sp, #12]
   185b4:	ldr	r2, [sp, #4]
   185b8:	strd	r0, [r2]
   185bc:	mov	r0, r8
   185c0:	sub	sp, fp, #28
   185c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185c8:	movw	r0, #42945	; 0xa7c1
   185cc:	movt	r0, #1
   185d0:	movw	r1, #42983	; 0xa7e7
   185d4:	movt	r1, #1
   185d8:	movw	r3, #42999	; 0xa7f7
   185dc:	movt	r3, #1
   185e0:	mov	r2, #85	; 0x55
   185e4:	bl	11748 <__assert_fail@plt>
   185e8:	push	{r4, r5, r6, r7, fp, lr}
   185ec:	add	fp, sp, #16
   185f0:	mov	r5, r1
   185f4:	mov	r4, r0
   185f8:	cmn	r1, #1
   185fc:	ble	18634 <__assert_fail@plt+0x6eec>
   18600:	cmp	r5, #0
   18604:	beq	18654 <__assert_fail@plt+0x6f0c>
   18608:	asr	r3, r5, #31
   1860c:	mvn	r6, #0
   18610:	mvn	r0, #0
   18614:	mvn	r1, #0
   18618:	mov	r2, r5
   1861c:	bl	18f78 <__assert_fail@plt+0x7830>
   18620:	ldrd	r2, [r4]
   18624:	subs	r0, r0, r2
   18628:	sbcs	r0, r1, r3
   1862c:	bcc	18644 <__assert_fail@plt+0x6efc>
   18630:	b	18654 <__assert_fail@plt+0x6f0c>
   18634:	ldrd	r0, [r4]
   18638:	orrs	r0, r0, r1
   1863c:	beq	18654 <__assert_fail@plt+0x6f0c>
   18640:	mvn	r6, #0
   18644:	mov	r0, #1
   18648:	mvn	r7, #0
   1864c:	strd	r6, [r4]
   18650:	pop	{r4, r5, r6, r7, fp, pc}
   18654:	ldrd	r0, [r4]
   18658:	umull	r6, r2, r0, r5
   1865c:	asr	r3, r5, #31
   18660:	mla	r0, r0, r3, r2
   18664:	mla	r7, r1, r5, r0
   18668:	mov	r0, #0
   1866c:	strd	r6, [r4]
   18670:	pop	{r4, r5, r6, r7, fp, pc}
   18674:	push	{r4, r5, r6, r7, fp, lr}
   18678:	add	fp, sp, #16
   1867c:	cmp	r2, #0
   18680:	moveq	r6, #0
   18684:	moveq	r0, r6
   18688:	popeq	{r4, r5, r6, r7, fp, pc}
   1868c:	mov	r4, r2
   18690:	mov	r5, r1
   18694:	mov	r7, r0
   18698:	mov	r6, #0
   1869c:	mov	r0, r7
   186a0:	mov	r1, r5
   186a4:	bl	185e8 <__assert_fail@plt+0x6ea0>
   186a8:	orr	r6, r0, r6
   186ac:	subs	r4, r4, #1
   186b0:	bne	1869c <__assert_fail@plt+0x6f54>
   186b4:	mov	r0, r6
   186b8:	pop	{r4, r5, r6, r7, fp, pc}
   186bc:	clz	r2, r1
   186c0:	lsr	r2, r2, #5
   186c4:	clz	r3, r0
   186c8:	lsr	r3, r3, #5
   186cc:	orrs	r2, r3, r2
   186d0:	movwne	r1, #1
   186d4:	movwne	r0, #1
   186d8:	cmp	r1, #0
   186dc:	beq	1870c <__assert_fail@plt+0x6fc4>
   186e0:	mvn	r2, #-2147483648	; 0x80000000
   186e4:	udiv	r2, r2, r1
   186e8:	cmp	r2, r0
   186ec:	bcs	1870c <__assert_fail@plt+0x6fc4>
   186f0:	push	{fp, lr}
   186f4:	mov	fp, sp
   186f8:	bl	115f8 <__errno_location@plt>
   186fc:	mov	r1, #12
   18700:	str	r1, [r0]
   18704:	mov	r0, #0
   18708:	pop	{fp, pc}
   1870c:	b	113ac <calloc@plt>
   18710:	cmp	r0, #0
   18714:	movweq	r0, #1
   18718:	cmn	r0, #1
   1871c:	ble	18724 <__assert_fail@plt+0x6fdc>
   18720:	b	11550 <malloc@plt>
   18724:	push	{fp, lr}
   18728:	mov	fp, sp
   1872c:	bl	115f8 <__errno_location@plt>
   18730:	mov	r1, #12
   18734:	str	r1, [r0]
   18738:	mov	r0, #0
   1873c:	pop	{fp, pc}
   18740:	push	{fp, lr}
   18744:	mov	fp, sp
   18748:	cmp	r0, #0
   1874c:	beq	18768 <__assert_fail@plt+0x7020>
   18750:	cmp	r1, #0
   18754:	beq	18774 <__assert_fail@plt+0x702c>
   18758:	cmn	r1, #1
   1875c:	ble	18780 <__assert_fail@plt+0x7038>
   18760:	pop	{fp, lr}
   18764:	b	11484 <realloc@plt>
   18768:	mov	r0, r1
   1876c:	pop	{fp, lr}
   18770:	b	18710 <__assert_fail@plt+0x6fc8>
   18774:	bl	155f4 <__assert_fail@plt+0x3eac>
   18778:	mov	r0, #0
   1877c:	pop	{fp, pc}
   18780:	bl	115f8 <__errno_location@plt>
   18784:	mov	r1, #12
   18788:	str	r1, [r0]
   1878c:	mov	r0, #0
   18790:	pop	{fp, pc}
   18794:	b	155f4 <__assert_fail@plt+0x3eac>
   18798:	b	11700 <aligned_alloc@plt>
   1879c:	mov	r0, #0
   187a0:	bx	lr
   187a4:	mov	r0, #0
   187a8:	bx	lr
   187ac:	mov	r1, r0
   187b0:	sub	r2, r0, #65	; 0x41
   187b4:	mov	r0, #1
   187b8:	cmp	r2, #26
   187bc:	subcs	r2, r1, #97	; 0x61
   187c0:	cmpcs	r2, #26
   187c4:	bcs	187cc <__assert_fail@plt+0x7084>
   187c8:	bx	lr
   187cc:	sub	r1, r1, #48	; 0x30
   187d0:	cmp	r1, #10
   187d4:	movcs	r0, #0
   187d8:	bx	lr
   187dc:	mov	r1, r0
   187e0:	sub	r2, r0, #65	; 0x41
   187e4:	mov	r0, #1
   187e8:	cmp	r2, #26
   187ec:	subcs	r1, r1, #97	; 0x61
   187f0:	cmpcs	r1, #26
   187f4:	movcs	r0, #0
   187f8:	bx	lr
   187fc:	mov	r1, #0
   18800:	cmp	r0, #128	; 0x80
   18804:	movwcc	r1, #1
   18808:	mov	r0, r1
   1880c:	bx	lr
   18810:	sub	r1, r0, #9
   18814:	clz	r1, r1
   18818:	lsr	r1, r1, #5
   1881c:	sub	r0, r0, #32
   18820:	clz	r0, r0
   18824:	lsr	r0, r0, #5
   18828:	orr	r0, r0, r1
   1882c:	bx	lr
   18830:	mov	r1, r0
   18834:	mov	r0, #1
   18838:	cmp	r1, #32
   1883c:	bxcc	lr
   18840:	cmp	r1, #127	; 0x7f
   18844:	movne	r0, #0
   18848:	bx	lr
   1884c:	sub	r1, r0, #48	; 0x30
   18850:	mov	r0, #0
   18854:	cmp	r1, #10
   18858:	movwcc	r0, #1
   1885c:	bx	lr
   18860:	sub	r1, r0, #33	; 0x21
   18864:	mov	r0, #0
   18868:	cmp	r1, #94	; 0x5e
   1886c:	movwcc	r0, #1
   18870:	bx	lr
   18874:	sub	r1, r0, #97	; 0x61
   18878:	mov	r0, #0
   1887c:	cmp	r1, #26
   18880:	movwcc	r0, #1
   18884:	bx	lr
   18888:	sub	r1, r0, #32
   1888c:	mov	r0, #0
   18890:	cmp	r1, #95	; 0x5f
   18894:	movwcc	r0, #1
   18898:	bx	lr
   1889c:	sub	r1, r0, #33	; 0x21
   188a0:	cmp	r1, #93	; 0x5d
   188a4:	bhi	18a30 <__assert_fail@plt+0x72e8>
   188a8:	mov	r0, #1
   188ac:	add	r2, pc, #0
   188b0:	ldr	pc, [r2, r1, lsl #2]
   188b4:	andeq	r8, r1, ip, lsr #20
   188b8:	andeq	r8, r1, ip, lsr #20
   188bc:	andeq	r8, r1, ip, lsr #20
   188c0:	andeq	r8, r1, ip, lsr #20
   188c4:	andeq	r8, r1, ip, lsr #20
   188c8:	andeq	r8, r1, ip, lsr #20
   188cc:	andeq	r8, r1, ip, lsr #20
   188d0:	andeq	r8, r1, ip, lsr #20
   188d4:	andeq	r8, r1, ip, lsr #20
   188d8:	andeq	r8, r1, ip, lsr #20
   188dc:	andeq	r8, r1, ip, lsr #20
   188e0:	andeq	r8, r1, ip, lsr #20
   188e4:	andeq	r8, r1, ip, lsr #20
   188e8:	andeq	r8, r1, ip, lsr #20
   188ec:	andeq	r8, r1, ip, lsr #20
   188f0:	andeq	r8, r1, r0, lsr sl
   188f4:	andeq	r8, r1, r0, lsr sl
   188f8:	andeq	r8, r1, r0, lsr sl
   188fc:	andeq	r8, r1, r0, lsr sl
   18900:	andeq	r8, r1, r0, lsr sl
   18904:	andeq	r8, r1, r0, lsr sl
   18908:	andeq	r8, r1, r0, lsr sl
   1890c:	andeq	r8, r1, r0, lsr sl
   18910:	andeq	r8, r1, r0, lsr sl
   18914:	andeq	r8, r1, r0, lsr sl
   18918:	andeq	r8, r1, ip, lsr #20
   1891c:	andeq	r8, r1, ip, lsr #20
   18920:	andeq	r8, r1, ip, lsr #20
   18924:	andeq	r8, r1, ip, lsr #20
   18928:	andeq	r8, r1, ip, lsr #20
   1892c:	andeq	r8, r1, ip, lsr #20
   18930:	andeq	r8, r1, ip, lsr #20
   18934:	andeq	r8, r1, r0, lsr sl
   18938:	andeq	r8, r1, r0, lsr sl
   1893c:	andeq	r8, r1, r0, lsr sl
   18940:	andeq	r8, r1, r0, lsr sl
   18944:	andeq	r8, r1, r0, lsr sl
   18948:	andeq	r8, r1, r0, lsr sl
   1894c:	andeq	r8, r1, r0, lsr sl
   18950:	andeq	r8, r1, r0, lsr sl
   18954:	andeq	r8, r1, r0, lsr sl
   18958:	andeq	r8, r1, r0, lsr sl
   1895c:	andeq	r8, r1, r0, lsr sl
   18960:	andeq	r8, r1, r0, lsr sl
   18964:	andeq	r8, r1, r0, lsr sl
   18968:	andeq	r8, r1, r0, lsr sl
   1896c:	andeq	r8, r1, r0, lsr sl
   18970:	andeq	r8, r1, r0, lsr sl
   18974:	andeq	r8, r1, r0, lsr sl
   18978:	andeq	r8, r1, r0, lsr sl
   1897c:	andeq	r8, r1, r0, lsr sl
   18980:	andeq	r8, r1, r0, lsr sl
   18984:	andeq	r8, r1, r0, lsr sl
   18988:	andeq	r8, r1, r0, lsr sl
   1898c:	andeq	r8, r1, r0, lsr sl
   18990:	andeq	r8, r1, r0, lsr sl
   18994:	andeq	r8, r1, r0, lsr sl
   18998:	andeq	r8, r1, r0, lsr sl
   1899c:	andeq	r8, r1, ip, lsr #20
   189a0:	andeq	r8, r1, ip, lsr #20
   189a4:	andeq	r8, r1, ip, lsr #20
   189a8:	andeq	r8, r1, ip, lsr #20
   189ac:	andeq	r8, r1, ip, lsr #20
   189b0:	andeq	r8, r1, ip, lsr #20
   189b4:	andeq	r8, r1, r0, lsr sl
   189b8:	andeq	r8, r1, r0, lsr sl
   189bc:	andeq	r8, r1, r0, lsr sl
   189c0:	andeq	r8, r1, r0, lsr sl
   189c4:	andeq	r8, r1, r0, lsr sl
   189c8:	andeq	r8, r1, r0, lsr sl
   189cc:	andeq	r8, r1, r0, lsr sl
   189d0:	andeq	r8, r1, r0, lsr sl
   189d4:	andeq	r8, r1, r0, lsr sl
   189d8:	andeq	r8, r1, r0, lsr sl
   189dc:	andeq	r8, r1, r0, lsr sl
   189e0:	andeq	r8, r1, r0, lsr sl
   189e4:	andeq	r8, r1, r0, lsr sl
   189e8:	andeq	r8, r1, r0, lsr sl
   189ec:	andeq	r8, r1, r0, lsr sl
   189f0:	andeq	r8, r1, r0, lsr sl
   189f4:	andeq	r8, r1, r0, lsr sl
   189f8:	andeq	r8, r1, r0, lsr sl
   189fc:	andeq	r8, r1, r0, lsr sl
   18a00:	andeq	r8, r1, r0, lsr sl
   18a04:	andeq	r8, r1, r0, lsr sl
   18a08:	andeq	r8, r1, r0, lsr sl
   18a0c:	andeq	r8, r1, r0, lsr sl
   18a10:	andeq	r8, r1, r0, lsr sl
   18a14:	andeq	r8, r1, r0, lsr sl
   18a18:	andeq	r8, r1, r0, lsr sl
   18a1c:	andeq	r8, r1, ip, lsr #20
   18a20:	andeq	r8, r1, ip, lsr #20
   18a24:	andeq	r8, r1, ip, lsr #20
   18a28:	andeq	r8, r1, ip, lsr #20
   18a2c:	bx	lr
   18a30:	mov	r0, #0
   18a34:	bx	lr
   18a38:	sub	r0, r0, #9
   18a3c:	cmp	r0, #23
   18a40:	movhi	r0, #0
   18a44:	bxhi	lr
   18a48:	bic	r0, r0, #-16777216	; 0xff000000
   18a4c:	movw	r1, #31
   18a50:	movt	r1, #128	; 0x80
   18a54:	mov	r2, #1
   18a58:	and	r0, r2, r1, lsr r0
   18a5c:	bx	lr
   18a60:	sub	r1, r0, #65	; 0x41
   18a64:	mov	r0, #0
   18a68:	cmp	r1, #26
   18a6c:	movwcc	r0, #1
   18a70:	bx	lr
   18a74:	mov	r1, r0
   18a78:	sub	r2, r0, #48	; 0x30
   18a7c:	mov	r0, #1
   18a80:	cmp	r2, #22
   18a84:	bhi	18a9c <__assert_fail@plt+0x7354>
   18a88:	mov	ip, #1
   18a8c:	movw	r3, #1023	; 0x3ff
   18a90:	movt	r3, #126	; 0x7e
   18a94:	tst	r3, ip, lsl r2
   18a98:	bxne	lr
   18a9c:	sub	r1, r1, #97	; 0x61
   18aa0:	cmp	r1, #6
   18aa4:	movcs	r0, #0
   18aa8:	bxcs	lr
   18aac:	bx	lr
   18ab0:	sub	r1, r0, #65	; 0x41
   18ab4:	cmp	r1, #26
   18ab8:	addcc	r0, r0, #32
   18abc:	bx	lr
   18ac0:	sub	r1, r0, #97	; 0x61
   18ac4:	cmp	r1, #26
   18ac8:	subcc	r0, r0, #32
   18acc:	bx	lr
   18ad0:	push	{r4, r5, r6, sl, fp, lr}
   18ad4:	add	fp, sp, #16
   18ad8:	mov	r4, r0
   18adc:	bl	11508 <__fpending@plt>
   18ae0:	mov	r5, r0
   18ae4:	mov	r0, r4
   18ae8:	bl	11514 <ferror_unlocked@plt>
   18aec:	mov	r6, r0
   18af0:	mov	r0, r4
   18af4:	bl	1543c <__assert_fail@plt+0x3cf4>
   18af8:	cmp	r6, #0
   18afc:	beq	18b1c <__assert_fail@plt+0x73d4>
   18b00:	mvn	r4, #0
   18b04:	cmp	r0, #0
   18b08:	bne	18b50 <__assert_fail@plt+0x7408>
   18b0c:	bl	115f8 <__errno_location@plt>
   18b10:	mov	r1, #0
   18b14:	str	r1, [r0]
   18b18:	b	18b50 <__assert_fail@plt+0x7408>
   18b1c:	cmp	r0, #0
   18b20:	mov	r4, r0
   18b24:	mvnne	r4, #0
   18b28:	cmp	r5, #0
   18b2c:	bne	18b50 <__assert_fail@plt+0x7408>
   18b30:	cmp	r0, #0
   18b34:	beq	18b50 <__assert_fail@plt+0x7408>
   18b38:	bl	115f8 <__errno_location@plt>
   18b3c:	ldr	r0, [r0]
   18b40:	subs	r4, r0, #9
   18b44:	mvnne	r4, #0
   18b48:	mov	r0, r4
   18b4c:	pop	{r4, r5, r6, sl, fp, pc}
   18b50:	mov	r0, r4
   18b54:	pop	{r4, r5, r6, sl, fp, pc}
   18b58:	push	{fp, lr}
   18b5c:	mov	fp, sp
   18b60:	bl	115f8 <__errno_location@plt>
   18b64:	mov	r1, #12
   18b68:	str	r1, [r0]
   18b6c:	mov	r0, #0
   18b70:	pop	{fp, pc}
   18b74:	b	18710 <__assert_fail@plt+0x6fc8>
   18b78:	cmp	r1, #0
   18b7c:	orreq	r1, r1, #1
   18b80:	b	18740 <__assert_fail@plt+0x6ff8>
   18b84:	b	186bc <__assert_fail@plt+0x6f74>
   18b88:	clz	r3, r2
   18b8c:	lsr	ip, r3, #5
   18b90:	clz	r3, r1
   18b94:	lsr	r3, r3, #5
   18b98:	orrs	r3, r3, ip
   18b9c:	movwne	r1, #1
   18ba0:	movwne	r2, #1
   18ba4:	b	18c40 <__assert_fail@plt+0x74f8>
   18ba8:	push	{fp, lr}
   18bac:	mov	fp, sp
   18bb0:	mov	r0, #14
   18bb4:	bl	116dc <nl_langinfo@plt>
   18bb8:	movw	r1, #38525	; 0x967d
   18bbc:	movt	r1, #1
   18bc0:	cmp	r0, #0
   18bc4:	movne	r1, r0
   18bc8:	ldrb	r2, [r1]
   18bcc:	movw	r0, #43078	; 0xa846
   18bd0:	movt	r0, #1
   18bd4:	cmp	r2, #0
   18bd8:	movne	r0, r1
   18bdc:	pop	{fp, pc}
   18be0:	push	{r4, r5, r6, r7, fp, lr}
   18be4:	add	fp, sp, #16
   18be8:	sub	sp, sp, #8
   18bec:	mov	r7, r2
   18bf0:	mov	r4, r1
   18bf4:	add	r5, sp, #4
   18bf8:	cmp	r0, #0
   18bfc:	movne	r5, r0
   18c00:	mov	r0, r5
   18c04:	bl	11520 <mbrtowc@plt>
   18c08:	mov	r6, r0
   18c0c:	cmp	r7, #0
   18c10:	beq	18c34 <__assert_fail@plt+0x74ec>
   18c14:	cmn	r6, #2
   18c18:	bcc	18c34 <__assert_fail@plt+0x74ec>
   18c1c:	mov	r0, #0
   18c20:	bl	18e6c <__assert_fail@plt+0x7724>
   18c24:	cmp	r0, #0
   18c28:	ldrbeq	r0, [r4]
   18c2c:	streq	r0, [r5]
   18c30:	moveq	r6, #1
   18c34:	mov	r0, r6
   18c38:	sub	sp, fp, #16
   18c3c:	pop	{r4, r5, r6, r7, fp, pc}
   18c40:	cmp	r2, #0
   18c44:	beq	18c74 <__assert_fail@plt+0x752c>
   18c48:	mvn	r3, #0
   18c4c:	udiv	r3, r3, r2
   18c50:	cmp	r3, r1
   18c54:	bcs	18c74 <__assert_fail@plt+0x752c>
   18c58:	push	{fp, lr}
   18c5c:	mov	fp, sp
   18c60:	bl	115f8 <__errno_location@plt>
   18c64:	mov	r1, #12
   18c68:	str	r1, [r0]
   18c6c:	mov	r0, #0
   18c70:	pop	{fp, pc}
   18c74:	mul	r1, r2, r1
   18c78:	b	18740 <__assert_fail@plt+0x6ff8>
   18c7c:	mov	r1, #0
   18c80:	mov	r2, #3
   18c84:	b	18c88 <__assert_fail@plt+0x7540>
   18c88:	sub	sp, sp, #8
   18c8c:	push	{fp, lr}
   18c90:	mov	fp, sp
   18c94:	sub	sp, sp, #8
   18c98:	str	r3, [fp, #12]
   18c9c:	str	r2, [fp, #8]
   18ca0:	add	r2, fp, #8
   18ca4:	str	r2, [sp, #4]
   18ca8:	cmp	r1, #11
   18cac:	bhi	18cec <__assert_fail@plt+0x75a4>
   18cb0:	mov	r2, #1
   18cb4:	movw	r3, #1300	; 0x514
   18cb8:	tst	r3, r2, lsl r1
   18cbc:	bne	18d3c <__assert_fail@plt+0x75f4>
   18cc0:	movw	r3, #2570	; 0xa0a
   18cc4:	tst	r3, r2, lsl r1
   18cc8:	bne	18d14 <__assert_fail@plt+0x75cc>
   18ccc:	cmp	r1, #0
   18cd0:	bne	18cec <__assert_fail@plt+0x75a4>
   18cd4:	ldr	r1, [sp, #4]
   18cd8:	add	r2, r1, #4
   18cdc:	str	r2, [sp, #4]
   18ce0:	ldr	r1, [r1]
   18ce4:	bl	18d60 <__assert_fail@plt+0x7618>
   18ce8:	b	18d50 <__assert_fail@plt+0x7608>
   18cec:	sub	r2, r1, #1024	; 0x400
   18cf0:	cmp	r2, #10
   18cf4:	bhi	18d3c <__assert_fail@plt+0x75f4>
   18cf8:	mov	ip, #1
   18cfc:	movw	r3, #645	; 0x285
   18d00:	tst	r3, ip, lsl r2
   18d04:	bne	18d3c <__assert_fail@plt+0x75f4>
   18d08:	movw	r3, #1282	; 0x502
   18d0c:	tst	r3, ip, lsl r2
   18d10:	beq	18d1c <__assert_fail@plt+0x75d4>
   18d14:	bl	11694 <fcntl64@plt>
   18d18:	b	18d50 <__assert_fail@plt+0x7608>
   18d1c:	cmp	r2, #6
   18d20:	bne	18d3c <__assert_fail@plt+0x75f4>
   18d24:	ldr	r1, [sp, #4]
   18d28:	add	r2, r1, #4
   18d2c:	str	r2, [sp, #4]
   18d30:	ldr	r1, [r1]
   18d34:	bl	18d6c <__assert_fail@plt+0x7624>
   18d38:	b	18d50 <__assert_fail@plt+0x7608>
   18d3c:	ldr	r2, [sp, #4]
   18d40:	add	r3, r2, #4
   18d44:	str	r3, [sp, #4]
   18d48:	ldr	r2, [r2]
   18d4c:	bl	11694 <fcntl64@plt>
   18d50:	mov	sp, fp
   18d54:	pop	{fp, lr}
   18d58:	add	sp, sp, #8
   18d5c:	bx	lr
   18d60:	mov	r2, r1
   18d64:	mov	r1, #0
   18d68:	b	11694 <fcntl64@plt>
   18d6c:	push	{r4, r5, r6, r7, fp, lr}
   18d70:	add	fp, sp, #16
   18d74:	mov	r5, r1
   18d78:	mov	r6, r0
   18d7c:	movw	r7, #46704	; 0xb670
   18d80:	movt	r7, #2
   18d84:	ldr	r0, [r7]
   18d88:	cmp	r0, #0
   18d8c:	blt	18df0 <__assert_fail@plt+0x76a8>
   18d90:	mov	r0, r6
   18d94:	movw	r1, #1030	; 0x406
   18d98:	mov	r2, r5
   18d9c:	bl	11694 <fcntl64@plt>
   18da0:	mov	r4, r0
   18da4:	cmn	r0, #1
   18da8:	bgt	18ddc <__assert_fail@plt+0x7694>
   18dac:	bl	115f8 <__errno_location@plt>
   18db0:	ldr	r0, [r0]
   18db4:	cmp	r0, #22
   18db8:	bne	18ddc <__assert_fail@plt+0x7694>
   18dbc:	mov	r0, r6
   18dc0:	mov	r1, r5
   18dc4:	bl	18d60 <__assert_fail@plt+0x7618>
   18dc8:	mov	r4, r0
   18dcc:	cmp	r0, #0
   18dd0:	blt	18e40 <__assert_fail@plt+0x76f8>
   18dd4:	mvn	r0, #0
   18dd8:	b	18de0 <__assert_fail@plt+0x7698>
   18ddc:	mov	r0, #1
   18de0:	str	r0, [r7]
   18de4:	cmp	r4, #0
   18de8:	bge	18e08 <__assert_fail@plt+0x76c0>
   18dec:	b	18e40 <__assert_fail@plt+0x76f8>
   18df0:	mov	r0, r6
   18df4:	mov	r1, r5
   18df8:	bl	18d60 <__assert_fail@plt+0x7618>
   18dfc:	mov	r4, r0
   18e00:	cmp	r4, #0
   18e04:	blt	18e40 <__assert_fail@plt+0x76f8>
   18e08:	ldr	r0, [r7]
   18e0c:	cmn	r0, #1
   18e10:	bne	18e40 <__assert_fail@plt+0x76f8>
   18e14:	mov	r0, r4
   18e18:	mov	r1, #1
   18e1c:	bl	11694 <fcntl64@plt>
   18e20:	cmp	r0, #0
   18e24:	blt	18e48 <__assert_fail@plt+0x7700>
   18e28:	orr	r2, r0, #1
   18e2c:	mov	r0, r4
   18e30:	mov	r1, #2
   18e34:	bl	11694 <fcntl64@plt>
   18e38:	cmn	r0, #1
   18e3c:	beq	18e48 <__assert_fail@plt+0x7700>
   18e40:	mov	r0, r4
   18e44:	pop	{r4, r5, r6, r7, fp, pc}
   18e48:	bl	115f8 <__errno_location@plt>
   18e4c:	mov	r5, r0
   18e50:	ldr	r6, [r0]
   18e54:	mov	r0, r4
   18e58:	bl	11730 <close@plt>
   18e5c:	str	r6, [r5]
   18e60:	mvn	r4, #0
   18e64:	mov	r0, r4
   18e68:	pop	{r4, r5, r6, r7, fp, pc}
   18e6c:	push	{r4, sl, fp, lr}
   18e70:	add	fp, sp, #8
   18e74:	sub	sp, sp, #264	; 0x108
   18e78:	add	r1, sp, #7
   18e7c:	movw	r2, #257	; 0x101
   18e80:	bl	18ed0 <__assert_fail@plt+0x7788>
   18e84:	mov	r4, #0
   18e88:	cmp	r0, #0
   18e8c:	bne	18ec4 <__assert_fail@plt+0x777c>
   18e90:	add	r0, sp, #7
   18e94:	movw	r1, #43084	; 0xa84c
   18e98:	movt	r1, #1
   18e9c:	bl	113d0 <strcmp@plt>
   18ea0:	cmp	r0, #0
   18ea4:	beq	18ec4 <__assert_fail@plt+0x777c>
   18ea8:	add	r0, sp, #7
   18eac:	movw	r1, #43086	; 0xa84e
   18eb0:	movt	r1, #1
   18eb4:	bl	113d0 <strcmp@plt>
   18eb8:	mov	r4, r0
   18ebc:	cmp	r0, #0
   18ec0:	movwne	r4, #1
   18ec4:	mov	r0, r4
   18ec8:	sub	sp, fp, #8
   18ecc:	pop	{r4, sl, fp, pc}
   18ed0:	b	18ed4 <__assert_fail@plt+0x778c>
   18ed4:	push	{r4, r5, r6, r7, fp, lr}
   18ed8:	add	fp, sp, #16
   18edc:	mov	r6, r2
   18ee0:	mov	r4, r1
   18ee4:	bl	18f70 <__assert_fail@plt+0x7828>
   18ee8:	cmp	r0, #0
   18eec:	beq	18f1c <__assert_fail@plt+0x77d4>
   18ef0:	mov	r7, r0
   18ef4:	bl	115b0 <strlen@plt>
   18ef8:	cmp	r0, r6
   18efc:	bcs	18f3c <__assert_fail@plt+0x77f4>
   18f00:	add	r2, r0, #1
   18f04:	mov	r0, r4
   18f08:	mov	r1, r7
   18f0c:	bl	11430 <memcpy@plt>
   18f10:	mov	r5, #0
   18f14:	mov	r0, r5
   18f18:	pop	{r4, r5, r6, r7, fp, pc}
   18f1c:	mov	r5, #22
   18f20:	cmp	r6, #0
   18f24:	movne	r0, #0
   18f28:	strbne	r0, [r4]
   18f2c:	movne	r0, r5
   18f30:	popne	{r4, r5, r6, r7, fp, pc}
   18f34:	mov	r0, r5
   18f38:	pop	{r4, r5, r6, r7, fp, pc}
   18f3c:	mov	r5, #34	; 0x22
   18f40:	cmp	r6, #0
   18f44:	beq	18f64 <__assert_fail@plt+0x781c>
   18f48:	sub	r6, r6, #1
   18f4c:	mov	r0, r4
   18f50:	mov	r1, r7
   18f54:	mov	r2, r6
   18f58:	bl	11430 <memcpy@plt>
   18f5c:	mov	r0, #0
   18f60:	strb	r0, [r4, r6]
   18f64:	mov	r0, r5
   18f68:	pop	{r4, r5, r6, r7, fp, pc}
   18f6c:	b	18f70 <__assert_fail@plt+0x7828>
   18f70:	mov	r1, #0
   18f74:	b	116a0 <setlocale@plt>
   18f78:	cmp	r3, #0
   18f7c:	cmpeq	r2, #0
   18f80:	bne	18f98 <__assert_fail@plt+0x7850>
   18f84:	cmp	r1, #0
   18f88:	cmpeq	r0, #0
   18f8c:	mvnne	r1, #0
   18f90:	mvnne	r0, #0
   18f94:	b	18fb4 <__assert_fail@plt+0x786c>
   18f98:	sub	sp, sp, #8
   18f9c:	push	{sp, lr}
   18fa0:	bl	18fc4 <__assert_fail@plt+0x787c>
   18fa4:	ldr	lr, [sp, #4]
   18fa8:	add	sp, sp, #8
   18fac:	pop	{r2, r3}
   18fb0:	bx	lr
   18fb4:	push	{r1, lr}
   18fb8:	mov	r0, #8
   18fbc:	bl	113c4 <raise@plt>
   18fc0:	pop	{r1, pc}
   18fc4:	cmp	r1, r3
   18fc8:	cmpeq	r0, r2
   18fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fd0:	mov	r4, r0
   18fd4:	movcc	r0, #0
   18fd8:	mov	r5, r1
   18fdc:	ldr	lr, [sp, #36]	; 0x24
   18fe0:	movcc	r1, r0
   18fe4:	bcc	190e0 <__assert_fail@plt+0x7998>
   18fe8:	cmp	r3, #0
   18fec:	clzeq	ip, r2
   18ff0:	clzne	ip, r3
   18ff4:	addeq	ip, ip, #32
   18ff8:	cmp	r5, #0
   18ffc:	clzeq	r1, r4
   19000:	addeq	r1, r1, #32
   19004:	clzne	r1, r5
   19008:	sub	ip, ip, r1
   1900c:	sub	sl, ip, #32
   19010:	lsl	r9, r3, ip
   19014:	rsb	fp, ip, #32
   19018:	orr	r9, r9, r2, lsl sl
   1901c:	orr	r9, r9, r2, lsr fp
   19020:	lsl	r8, r2, ip
   19024:	cmp	r5, r9
   19028:	cmpeq	r4, r8
   1902c:	movcc	r0, #0
   19030:	movcc	r1, r0
   19034:	bcc	19050 <__assert_fail@plt+0x7908>
   19038:	mov	r0, #1
   1903c:	subs	r4, r4, r8
   19040:	lsl	r1, r0, sl
   19044:	orr	r1, r1, r0, lsr fp
   19048:	lsl	r0, r0, ip
   1904c:	sbc	r5, r5, r9
   19050:	cmp	ip, #0
   19054:	beq	190e0 <__assert_fail@plt+0x7998>
   19058:	lsr	r6, r8, #1
   1905c:	orr	r6, r6, r9, lsl #31
   19060:	lsr	r7, r9, #1
   19064:	mov	r2, ip
   19068:	b	1908c <__assert_fail@plt+0x7944>
   1906c:	subs	r3, r4, r6
   19070:	sbc	r8, r5, r7
   19074:	adds	r3, r3, r3
   19078:	adc	r8, r8, r8
   1907c:	adds	r4, r3, #1
   19080:	adc	r5, r8, #0
   19084:	subs	r2, r2, #1
   19088:	beq	190a8 <__assert_fail@plt+0x7960>
   1908c:	cmp	r5, r7
   19090:	cmpeq	r4, r6
   19094:	bcs	1906c <__assert_fail@plt+0x7924>
   19098:	adds	r4, r4, r4
   1909c:	adc	r5, r5, r5
   190a0:	subs	r2, r2, #1
   190a4:	bne	1908c <__assert_fail@plt+0x7944>
   190a8:	lsr	r3, r4, ip
   190ac:	orr	r3, r3, r5, lsl fp
   190b0:	lsr	r2, r5, ip
   190b4:	orr	r3, r3, r5, lsr sl
   190b8:	adds	r0, r0, r4
   190bc:	mov	r4, r3
   190c0:	lsl	r3, r2, ip
   190c4:	orr	r3, r3, r4, lsl sl
   190c8:	lsl	ip, r4, ip
   190cc:	orr	r3, r3, r4, lsr fp
   190d0:	adc	r1, r1, r5
   190d4:	subs	r0, r0, ip
   190d8:	mov	r5, r2
   190dc:	sbc	r1, r1, r3
   190e0:	cmp	lr, #0
   190e4:	strdne	r4, [lr]
   190e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   190f0:	mov	r7, r0
   190f4:	ldr	r6, [pc, #72]	; 19144 <__assert_fail@plt+0x79fc>
   190f8:	ldr	r5, [pc, #72]	; 19148 <__assert_fail@plt+0x7a00>
   190fc:	add	r6, pc, r6
   19100:	add	r5, pc, r5
   19104:	sub	r6, r6, r5
   19108:	mov	r8, r1
   1910c:	mov	r9, r2
   19110:	bl	11380 <fdopen@plt-0x20>
   19114:	asrs	r6, r6, #2
   19118:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1911c:	mov	r4, #0
   19120:	add	r4, r4, #1
   19124:	ldr	r3, [r5], #4
   19128:	mov	r2, r9
   1912c:	mov	r1, r8
   19130:	mov	r0, r7
   19134:	blx	r3
   19138:	cmp	r6, r4
   1913c:	bne	19120 <__assert_fail@plt+0x79d8>
   19140:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19144:	andeq	r1, r1, r8, lsl #28
   19148:	andeq	r1, r1, r0, lsl #28
   1914c:	bx	lr
   19150:	ldr	r3, [pc, #12]	; 19164 <__assert_fail@plt+0x7a1c>
   19154:	mov	r1, #0
   19158:	add	r3, pc, r3
   1915c:	ldr	r2, [r3]
   19160:	b	11610 <__cxa_atexit@plt>
   19164:	strdeq	r1, [r1], -r4
   19168:	mov	r2, r1
   1916c:	mov	r1, r0
   19170:	mov	r0, #3
   19174:	b	114b4 <__fxstat64@plt>

Disassembly of section .fini:

00019178 <.fini>:
   19178:	push	{r3, lr}
   1917c:	pop	{r3, pc}
