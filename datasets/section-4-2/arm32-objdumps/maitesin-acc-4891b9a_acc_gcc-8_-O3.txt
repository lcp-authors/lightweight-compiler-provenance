
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

0001192c <.init>:
   1192c:	push	{r3, lr}
   11930:	bl	11d38 <_start@@Base+0x3c>
   11934:	pop	{r3, pc}

Disassembly of section .plt:

00011938 <fdopen@plt-0x14>:
   11938:	push	{lr}		; (str lr, [sp, #-4]!)
   1193c:	ldr	lr, [pc, #4]	; 11948 <fdopen@plt-0x4>
   11940:	add	lr, pc, lr
   11944:	ldr	pc, [lr, #8]!
   11948:			; <UNDEFINED> instruction: 0x000176b8

0001194c <fdopen@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #94208	; 0x17000
   11954:	ldr	pc, [ip, #1720]!	; 0x6b8

00011958 <raise@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #94208	; 0x17000
   11960:	ldr	pc, [ip, #1712]!	; 0x6b0

00011964 <setbuf@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #94208	; 0x17000
   1196c:	ldr	pc, [ip, #1704]!	; 0x6a8

00011970 <strtol@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #94208	; 0x17000
   11978:	ldr	pc, [ip, #1696]!	; 0x6a0

0001197c <fopen@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #94208	; 0x17000
   11984:	ldr	pc, [ip, #1688]!	; 0x698

00011988 <free@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #94208	; 0x17000
   11990:	ldr	pc, [ip, #1680]!	; 0x690

00011994 <memcpy@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #94208	; 0x17000
   1199c:	ldr	pc, [ip, #1672]!	; 0x688

000119a0 <ftell@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #94208	; 0x17000
   119a8:	ldr	pc, [ip, #1664]!	; 0x680

000119ac <fwrite@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #94208	; 0x17000
   119b4:	ldr	pc, [ip, #1656]!	; 0x678

000119b8 <strcpy@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #94208	; 0x17000
   119c0:	ldr	pc, [ip, #1648]!	; 0x670

000119c4 <fread@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #94208	; 0x17000
   119cc:	ldr	pc, [ip, #1640]!	; 0x668

000119d0 <open64@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #94208	; 0x17000
   119d8:	ldr	pc, [ip, #1632]!	; 0x660

000119dc <getenv@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #94208	; 0x17000
   119e4:	ldr	pc, [ip, #1624]!	; 0x658

000119e8 <malloc@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #94208	; 0x17000
   119f0:	ldr	pc, [ip, #1616]!	; 0x650

000119f4 <__libc_start_main@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #94208	; 0x17000
   119fc:	ldr	pc, [ip, #1608]!	; 0x648

00011a00 <__gmon_start__@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #94208	; 0x17000
   11a08:	ldr	pc, [ip, #1600]!	; 0x640

00011a0c <getpid@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #94208	; 0x17000
   11a14:	ldr	pc, [ip, #1592]!	; 0x638

00011a18 <exit@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #94208	; 0x17000
   11a20:	ldr	pc, [ip, #1584]!	; 0x630

00011a24 <strlen@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #94208	; 0x17000
   11a2c:	ldr	pc, [ip, #1576]!	; 0x628

00011a30 <getopt@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #94208	; 0x17000
   11a38:	ldr	pc, [ip, #1568]!	; 0x620

00011a3c <fprintf@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #94208	; 0x17000
   11a44:	ldr	pc, [ip, #1560]!	; 0x618

00011a48 <__errno_location@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #94208	; 0x17000
   11a50:	ldr	pc, [ip, #1552]!	; 0x610

00011a54 <mkdir@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #94208	; 0x17000
   11a5c:	ldr	pc, [ip, #1544]!	; 0x608

00011a60 <memset@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #94208	; 0x17000
   11a68:	ldr	pc, [ip, #1536]!	; 0x600

00011a6c <strncpy@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #94208	; 0x17000
   11a74:	ldr	pc, [ip, #1528]!	; 0x5f8

00011a78 <access@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #94208	; 0x17000
   11a80:	ldr	pc, [ip, #1520]!	; 0x5f0

00011a84 <fclose@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #94208	; 0x17000
   11a8c:	ldr	pc, [ip, #1512]!	; 0x5e8

00011a90 <strnlen@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #94208	; 0x17000
   11a98:	ldr	pc, [ip, #1504]!	; 0x5e0

00011a9c <fcntl64@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #94208	; 0x17000
   11aa4:	ldr	pc, [ip, #1496]!	; 0x5d8

00011aa8 <vfprintf@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #94208	; 0x17000
   11ab0:	ldr	pc, [ip, #1488]!	; 0x5d0

00011ab4 <fputc@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #94208	; 0x17000
   11abc:	ldr	pc, [ip, #1480]!	; 0x5c8

00011ac0 <atoi@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #94208	; 0x17000
   11ac8:	ldr	pc, [ip, #1472]!	; 0x5c0

00011acc <fopen64@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #94208	; 0x17000
   11ad4:	ldr	pc, [ip, #1464]!	; 0x5b8

00011ad8 <fseek@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #94208	; 0x17000
   11ae0:	ldr	pc, [ip, #1456]!	; 0x5b0

00011ae4 <strncmp@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #94208	; 0x17000
   11aec:	ldr	pc, [ip, #1448]!	; 0x5a8

00011af0 <abort@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #94208	; 0x17000
   11af8:	ldr	pc, [ip, #1440]!	; 0x5a0

00011afc <close@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #94208	; 0x17000
   11b04:	ldr	pc, [ip, #1432]!	; 0x598

Disassembly of section .text:

00011b08 <main@@Base-0x18>:
   11b08:	b	1820c <__gcov_sort_n_vals@@Base+0x430>
   11b0c:	b	1820c <__gcov_sort_n_vals@@Base+0x430>
   11b10:	b	1820c <__gcov_sort_n_vals@@Base+0x430>
   11b14:	b	1820c <__gcov_sort_n_vals@@Base+0x430>
   11b18:	b	1820c <__gcov_sort_n_vals@@Base+0x430>
   11b1c:	b	1820c <__gcov_sort_n_vals@@Base+0x430>

00011b20 <main@@Base>:
   11b20:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11b24:	movw	r4, #39600	; 0x9ab0
   11b28:	movt	r4, #2
   11b2c:	ldr	r3, [r4, #192]	; 0xc0
   11b30:	movw	r5, #34440	; 0x8688
   11b34:	movt	r5, #1
   11b38:	strd	r6, [sp, #8]
   11b3c:	mov	r7, r0
   11b40:	mov	r6, r1
   11b44:	ldr	r2, [r4, #196]	; 0xc4
   11b48:	strd	r8, [sp, #16]
   11b4c:	mov	r8, #0
   11b50:	movw	r9, #39592	; 0x9aa8
   11b54:	movt	r9, #2
   11b58:	str	sl, [sp, #24]
   11b5c:	adds	r3, r3, #1
   11b60:	str	lr, [sp, #28]
   11b64:	adc	r2, r2, r8
   11b68:	str	r3, [r4, #192]	; 0xc0
   11b6c:	str	r2, [r4, #196]	; 0xc4
   11b70:	b	11bb0 <main@@Base+0x90>
   11b74:	cmp	r0, #111	; 0x6f
   11b78:	bne	11b98 <main@@Base+0x78>
   11b7c:	ldr	r3, [r4, #200]	; 0xc8
   11b80:	ldr	r2, [r4, #204]	; 0xcc
   11b84:	ldr	r8, [r9]
   11b88:	adds	r3, r3, #1
   11b8c:	adc	r2, r2, #0
   11b90:	str	r3, [r4, #200]	; 0xc8
   11b94:	str	r2, [r4, #204]	; 0xcc
   11b98:	ldr	r3, [r4, #208]	; 0xd0
   11b9c:	ldr	r2, [r4, #212]	; 0xd4
   11ba0:	adds	r3, r3, #1
   11ba4:	adc	r2, r2, #0
   11ba8:	str	r3, [r4, #208]	; 0xd0
   11bac:	str	r2, [r4, #212]	; 0xd4
   11bb0:	mov	r2, r5
   11bb4:	mov	r1, r6
   11bb8:	mov	r0, r7
   11bbc:	bl	11a30 <getopt@plt>
   11bc0:	cmn	r0, #1
   11bc4:	bne	11b74 <main@@Base+0x54>
   11bc8:	movw	r3, #39576	; 0x9a98
   11bcc:	movt	r3, #2
   11bd0:	ldr	r1, [r3]
   11bd4:	cmp	r1, r7
   11bd8:	bge	11c5c <main@@Base+0x13c>
   11bdc:	ldr	r3, [r4, #216]	; 0xd8
   11be0:	ldr	r2, [r4, #220]	; 0xdc
   11be4:	ldr	r0, [r6, r1, lsl #2]
   11be8:	adds	r3, r3, #1
   11bec:	adc	r2, r2, #0
   11bf0:	cmp	r8, #0
   11bf4:	str	r3, [r4, #216]	; 0xd8
   11bf8:	str	r2, [r4, #220]	; 0xdc
   11bfc:	beq	11c38 <main@@Base+0x118>
   11c00:	mov	r1, r8
   11c04:	bl	1209c <my_main@@Base>
   11c08:	ldr	r3, [r4, #240]	; 0xf0
   11c0c:	ldr	r2, [r4, #244]	; 0xf4
   11c10:	ldrd	r6, [sp, #8]
   11c14:	adds	r3, r3, #1
   11c18:	ldrd	r8, [sp, #16]
   11c1c:	adc	r2, r2, #0
   11c20:	str	r3, [r4, #240]	; 0xf0
   11c24:	ldr	sl, [sp, #24]
   11c28:	str	r2, [r4, #244]	; 0xf4
   11c2c:	ldrd	r4, [sp]
   11c30:	add	sp, sp, #28
   11c34:	pop	{pc}		; (ldr pc, [sp], #4)
   11c38:	ldr	r3, [r4, #232]	; 0xe8
   11c3c:	movw	r8, #34436	; 0x8684
   11c40:	movt	r8, #1
   11c44:	ldr	r2, [r4, #236]	; 0xec
   11c48:	adds	r3, r3, #1
   11c4c:	adc	r2, r2, #0
   11c50:	str	r3, [r4, #232]	; 0xe8
   11c54:	str	r2, [r4, #236]	; 0xec
   11c58:	b	11c00 <main@@Base+0xe0>
   11c5c:	ldr	ip, [r4, #224]	; 0xe0
   11c60:	mov	r1, #1
   11c64:	movw	r3, #39584	; 0x9aa0
   11c68:	movt	r3, #2
   11c6c:	mov	r2, #45	; 0x2d
   11c70:	ldr	lr, [r4, #228]	; 0xe4
   11c74:	movw	r0, #34444	; 0x868c
   11c78:	movt	r0, #1
   11c7c:	ldr	r3, [r3]
   11c80:	adds	ip, ip, r1
   11c84:	adc	lr, lr, #0
   11c88:	str	ip, [r4, #224]	; 0xe0
   11c8c:	str	lr, [r4, #228]	; 0xe4
   11c90:	bl	119ac <fwrite@plt>
   11c94:	ldr	r3, [r4, #248]	; 0xf8
   11c98:	mov	r0, #1
   11c9c:	ldr	r2, [r4, #252]	; 0xfc
   11ca0:	adds	r3, r3, r0
   11ca4:	adc	r2, r2, #0
   11ca8:	str	r3, [r4, #248]	; 0xf8
   11cac:	str	r2, [r4, #252]	; 0xfc
   11cb0:	bl	11a18 <exit@plt>
   11cb4:	movw	r0, #37052	; 0x90bc
   11cb8:	movt	r0, #2
   11cbc:	b	1827c <__gcov_sort_n_vals@@Base+0x4a0>
   11cc0:	movw	r0, #37196	; 0x914c
   11cc4:	movt	r0, #2
   11cc8:	b	1827c <__gcov_sort_n_vals@@Base+0x4a0>
   11ccc:	movw	r0, #37984	; 0x9460
   11cd0:	movt	r0, #2
   11cd4:	b	1827c <__gcov_sort_n_vals@@Base+0x4a0>
   11cd8:	movw	r0, #38268	; 0x957c
   11cdc:	movt	r0, #2
   11ce0:	b	1827c <__gcov_sort_n_vals@@Base+0x4a0>
   11ce4:	movw	r0, #38776	; 0x9778
   11ce8:	movt	r0, #2
   11cec:	b	1827c <__gcov_sort_n_vals@@Base+0x4a0>
   11cf0:	movw	r0, #39144	; 0x98e8
   11cf4:	movt	r0, #2
   11cf8:	b	1827c <__gcov_sort_n_vals@@Base+0x4a0>

00011cfc <_start@@Base>:
   11cfc:	mov	fp, #0
   11d00:	mov	lr, #0
   11d04:	pop	{r1}		; (ldr r1, [sp], #4)
   11d08:	mov	r2, sp
   11d0c:	push	{r2}		; (str r2, [sp, #-4]!)
   11d10:	push	{r0}		; (str r0, [sp, #-4]!)
   11d14:	ldr	ip, [pc, #16]	; 11d2c <_start@@Base+0x30>
   11d18:	push	{ip}		; (str ip, [sp, #-4]!)
   11d1c:	ldr	r0, [pc, #12]	; 11d30 <_start@@Base+0x34>
   11d20:	ldr	r3, [pc, #12]	; 11d34 <_start@@Base+0x38>
   11d24:	bl	119f4 <__libc_start_main@plt>
   11d28:	bl	11af0 <abort@plt>
   11d2c:	strdeq	r8, [r1], -r4
   11d30:	andeq	r1, r1, r0, lsr #22
   11d34:	muleq	r1, r4, r5
   11d38:	ldr	r3, [pc, #20]	; 11d54 <_start@@Base+0x58>
   11d3c:	ldr	r2, [pc, #20]	; 11d58 <_start@@Base+0x5c>
   11d40:	add	r3, pc, r3
   11d44:	ldr	r2, [r3, r2]
   11d48:	cmp	r2, #0
   11d4c:	bxeq	lr
   11d50:	b	11a00 <__gmon_start__@plt>
   11d54:			; <UNDEFINED> instruction: 0x000172b8
   11d58:	andeq	r0, r0, r4, lsr #1
   11d5c:	ldr	r0, [pc, #24]	; 11d7c <_start@@Base+0x80>
   11d60:	ldr	r3, [pc, #24]	; 11d80 <_start@@Base+0x84>
   11d64:	cmp	r3, r0
   11d68:	bxeq	lr
   11d6c:	ldr	r3, [pc, #16]	; 11d84 <_start@@Base+0x88>
   11d70:	cmp	r3, #0
   11d74:	bxeq	lr
   11d78:	bx	r3
   11d7c:	muleq	r2, r8, sl
   11d80:	muleq	r2, r8, sl
   11d84:	andeq	r0, r0, r0
   11d88:	ldr	r0, [pc, #36]	; 11db4 <_start@@Base+0xb8>
   11d8c:	ldr	r1, [pc, #36]	; 11db8 <_start@@Base+0xbc>
   11d90:	sub	r1, r1, r0
   11d94:	asr	r1, r1, #2
   11d98:	add	r1, r1, r1, lsr #31
   11d9c:	asrs	r1, r1, #1
   11da0:	bxeq	lr
   11da4:	ldr	r3, [pc, #16]	; 11dbc <_start@@Base+0xc0>
   11da8:	cmp	r3, #0
   11dac:	bxeq	lr
   11db0:	bx	r3
   11db4:	muleq	r2, r8, sl
   11db8:	muleq	r2, r8, sl
   11dbc:	andeq	r0, r0, r0
   11dc0:	push	{r4, lr}
   11dc4:	ldr	r4, [pc, #24]	; 11de4 <_start@@Base+0xe8>
   11dc8:	ldrb	r3, [r4]
   11dcc:	cmp	r3, #0
   11dd0:	popne	{r4, pc}
   11dd4:	bl	11d5c <_start@@Base+0x60>
   11dd8:	mov	r3, #1
   11ddc:	strb	r3, [r4]
   11de0:	pop	{r4, pc}
   11de4:	andeq	r9, r2, ip, lsr #21
   11de8:	b	11d88 <_start@@Base+0x8c>

00011dec <load_file@@Base>:
   11dec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11df0:	movw	r4, #39600	; 0x9ab0
   11df4:	movt	r4, #2
   11df8:	ldr	r3, [r4]
   11dfc:	movw	r1, #36076	; 0x8cec
   11e00:	movt	r1, #1
   11e04:	mov	r5, r0
   11e08:	strd	r6, [sp, #8]
   11e0c:	ldr	r2, [r4, #4]
   11e10:	strd	r8, [sp, #16]
   11e14:	str	sl, [sp, #24]
   11e18:	adds	r3, r3, #1
   11e1c:	str	lr, [sp, #28]
   11e20:	adc	r2, r2, #0
   11e24:	str	r3, [r4]
   11e28:	str	r2, [r4, #4]
   11e2c:	bl	1197c <fopen@plt>
   11e30:	subs	r6, r0, #0
   11e34:	beq	11f78 <load_file@@Base+0x18c>
   11e38:	ldr	r3, [r4, #8]
   11e3c:	mov	r1, #0
   11e40:	mov	r2, #2
   11e44:	ldr	ip, [r4, #12]
   11e48:	adds	r3, r3, #1
   11e4c:	adc	ip, ip, r1
   11e50:	str	r3, [r4, #8]
   11e54:	str	ip, [r4, #12]
   11e58:	bl	11ad8 <fseek@plt>
   11e5c:	ldr	r3, [r4, #24]
   11e60:	ldr	r2, [r4, #28]
   11e64:	adds	r3, r3, #1
   11e68:	adc	r2, r2, #0
   11e6c:	subs	r8, r0, #0
   11e70:	str	r3, [r4, #24]
   11e74:	str	r2, [r4, #28]
   11e78:	bne	11f38 <load_file@@Base+0x14c>
   11e7c:	ldr	r3, [r4, #32]
   11e80:	mov	r0, r6
   11e84:	ldr	r2, [r4, #36]	; 0x24
   11e88:	adds	r3, r3, #1
   11e8c:	adc	r2, r2, #0
   11e90:	str	r3, [r4, #32]
   11e94:	str	r2, [r4, #36]	; 0x24
   11e98:	bl	119a0 <ftell@plt>
   11e9c:	cmn	r0, #1
   11ea0:	mov	r9, r0
   11ea4:	beq	11f98 <load_file@@Base+0x1ac>
   11ea8:	ldr	r3, [r4, #48]	; 0x30
   11eac:	add	r0, r0, #1
   11eb0:	ldr	r2, [r4, #52]	; 0x34
   11eb4:	adds	r3, r3, #1
   11eb8:	adc	r2, r2, #0
   11ebc:	str	r3, [r4, #48]	; 0x30
   11ec0:	str	r2, [r4, #52]	; 0x34
   11ec4:	bl	119e8 <malloc@plt>
   11ec8:	mov	r7, r0
   11ecc:	mov	r2, r8
   11ed0:	mov	r1, r8
   11ed4:	mov	r0, r6
   11ed8:	bl	11ad8 <fseek@plt>
   11edc:	subs	r8, r0, #0
   11ee0:	bne	11ff0 <load_file@@Base+0x204>
   11ee4:	ldr	ip, [r4, #72]	; 0x48
   11ee8:	mov	r1, #1
   11eec:	mov	r2, r9
   11ef0:	mov	r3, r6
   11ef4:	mov	r0, r7
   11ef8:	ldr	lr, [r4, #76]	; 0x4c
   11efc:	adds	ip, ip, r1
   11f00:	adc	lr, lr, #0
   11f04:	str	ip, [r4, #72]	; 0x48
   11f08:	str	lr, [r4, #76]	; 0x4c
   11f0c:	bl	119c4 <fread@plt>
   11f10:	cmp	r0, #0
   11f14:	beq	12048 <load_file@@Base+0x25c>
   11f18:	ldr	r3, [r4, #104]	; 0x68
   11f1c:	strb	r8, [r7, r0]
   11f20:	ldr	r2, [r4, #108]	; 0x6c
   11f24:	adds	r3, r3, #1
   11f28:	adc	r2, r2, #0
   11f2c:	str	r3, [r4, #104]	; 0x68
   11f30:	str	r2, [r4, #108]	; 0x6c
   11f34:	b	11f3c <load_file@@Base+0x150>
   11f38:	mov	r7, #0
   11f3c:	mov	r0, r6
   11f40:	bl	11a84 <fclose@plt>
   11f44:	ldr	r3, [r4, #112]	; 0x70
   11f48:	ldr	r2, [r4, #116]	; 0x74
   11f4c:	adds	r3, r3, #1
   11f50:	adc	r2, r2, #0
   11f54:	str	r3, [r4, #112]	; 0x70
   11f58:	str	r2, [r4, #116]	; 0x74
   11f5c:	mov	r0, r7
   11f60:	ldrd	r4, [sp]
   11f64:	ldrd	r6, [sp, #8]
   11f68:	ldrd	r8, [sp, #16]
   11f6c:	ldr	sl, [sp, #24]
   11f70:	add	sp, sp, #28
   11f74:	pop	{pc}		; (ldr pc, [sp], #4)
   11f78:	ldr	r3, [r4, #16]
   11f7c:	mov	r7, r6
   11f80:	ldr	r2, [r4, #20]
   11f84:	adds	r3, r3, #1
   11f88:	adc	r2, r2, #0
   11f8c:	str	r3, [r4, #16]
   11f90:	str	r2, [r4, #20]
   11f94:	b	11f5c <load_file@@Base+0x170>
   11f98:	ldr	ip, [r4, #40]	; 0x28
   11f9c:	mov	r1, #1
   11fa0:	movw	r3, #39584	; 0x9aa0
   11fa4:	movt	r3, #2
   11fa8:	mov	r2, #51	; 0x33
   11fac:	ldr	lr, [r4, #44]	; 0x2c
   11fb0:	movw	r0, #34308	; 0x8604
   11fb4:	movt	r0, #1
   11fb8:	ldr	r3, [r3]
   11fbc:	adds	ip, ip, r1
   11fc0:	adc	lr, lr, #0
   11fc4:	str	ip, [r4, #40]	; 0x28
   11fc8:	str	lr, [r4, #44]	; 0x2c
   11fcc:	bl	119ac <fwrite@plt>
   11fd0:	ldr	r3, [r4, #56]	; 0x38
   11fd4:	mov	r0, #1
   11fd8:	ldr	r2, [r4, #60]	; 0x3c
   11fdc:	adds	r3, r3, r0
   11fe0:	adc	r2, r2, #0
   11fe4:	str	r3, [r4, #56]	; 0x38
   11fe8:	str	r2, [r4, #60]	; 0x3c
   11fec:	bl	11a18 <exit@plt>
   11ff0:	ldr	ip, [r4, #64]	; 0x40
   11ff4:	mov	r1, #1
   11ff8:	movw	r3, #39584	; 0x9aa0
   11ffc:	movt	r3, #2
   12000:	mov	r2, #49	; 0x31
   12004:	ldr	lr, [r4, #68]	; 0x44
   12008:	movw	r0, #34360	; 0x8638
   1200c:	movt	r0, #1
   12010:	ldr	r3, [r3]
   12014:	adds	ip, ip, r1
   12018:	adc	lr, lr, #0
   1201c:	str	ip, [r4, #64]	; 0x40
   12020:	str	lr, [r4, #68]	; 0x44
   12024:	bl	119ac <fwrite@plt>
   12028:	ldr	r3, [r4, #80]	; 0x50
   1202c:	mov	r0, #1
   12030:	ldr	r2, [r4, #84]	; 0x54
   12034:	adds	r3, r3, r0
   12038:	adc	r2, r2, #0
   1203c:	str	r3, [r4, #80]	; 0x50
   12040:	str	r2, [r4, #84]	; 0x54
   12044:	bl	11a18 <exit@plt>
   12048:	ldr	r3, [r4, #88]	; 0x58
   1204c:	movw	r0, #39584	; 0x9aa0
   12050:	movt	r0, #2
   12054:	mov	r2, r5
   12058:	movw	r1, #34412	; 0x866c
   1205c:	movt	r1, #1
   12060:	ldr	ip, [r4, #92]	; 0x5c
   12064:	ldr	r0, [r0]
   12068:	adds	r3, r3, #1
   1206c:	adc	ip, ip, #0
   12070:	str	r3, [r4, #88]	; 0x58
   12074:	str	ip, [r4, #92]	; 0x5c
   12078:	bl	11a3c <fprintf@plt>
   1207c:	ldr	r3, [r4, #96]	; 0x60
   12080:	mov	r0, #1
   12084:	ldr	r2, [r4, #100]	; 0x64
   12088:	adds	r3, r3, r0
   1208c:	adc	r2, r2, #0
   12090:	str	r3, [r4, #96]	; 0x60
   12094:	str	r2, [r4, #100]	; 0x64
   12098:	bl	11a18 <exit@plt>

0001209c <my_main@@Base>:
   1209c:	strd	r4, [sp, #-16]!
   120a0:	movw	r4, #39600	; 0x9ab0
   120a4:	movt	r4, #2
   120a8:	ldr	r3, [r4, #120]	; 0x78
   120ac:	str	r6, [sp, #8]
   120b0:	mov	r6, r1
   120b4:	ldr	r2, [r4, #124]	; 0x7c
   120b8:	str	lr, [sp, #12]
   120bc:	sub	sp, sp, #32
   120c0:	adds	r3, r3, #1
   120c4:	adc	r2, r2, #0
   120c8:	str	r3, [r4, #120]	; 0x78
   120cc:	str	r2, [r4, #124]	; 0x7c
   120d0:	bl	11dec <load_file@@Base>
   120d4:	ldr	r3, [r4, #128]	; 0x80
   120d8:	mov	r5, r0
   120dc:	add	r0, sp, #4
   120e0:	mov	r1, r5
   120e4:	ldr	r2, [r4, #132]	; 0x84
   120e8:	adds	r3, r3, #1
   120ec:	adc	r2, r2, #0
   120f0:	str	r3, [r4, #128]	; 0x80
   120f4:	str	r2, [r4, #132]	; 0x84
   120f8:	bl	12670 <init_lexer@@Base>
   120fc:	ldr	r3, [r4, #136]	; 0x88
   12100:	add	r1, sp, #4
   12104:	mov	r0, sp
   12108:	ldr	r2, [r4, #140]	; 0x8c
   1210c:	adds	r3, r3, #1
   12110:	adc	r2, r2, #0
   12114:	str	r3, [r4, #136]	; 0x88
   12118:	str	r2, [r4, #140]	; 0x8c
   1211c:	bl	14298 <init_grammar@@Base>
   12120:	ldr	r3, [r4, #144]	; 0x90
   12124:	mov	r1, sp
   12128:	mov	r2, r6
   1212c:	add	r0, sp, #16
   12130:	ldr	ip, [r4, #148]	; 0x94
   12134:	adds	r3, r3, #1
   12138:	adc	ip, ip, #0
   1213c:	str	r3, [r4, #144]	; 0x90
   12140:	str	ip, [r4, #148]	; 0x94
   12144:	bl	153a8 <init_generator@@Base>
   12148:	ldr	r3, [r4, #152]	; 0x98
   1214c:	add	r0, sp, #16
   12150:	ldr	r2, [r4, #156]	; 0x9c
   12154:	adds	r3, r3, #1
   12158:	adc	r2, r2, #0
   1215c:	str	r3, [r4, #152]	; 0x98
   12160:	str	r2, [r4, #156]	; 0x9c
   12164:	bl	16148 <generate_code@@Base>
   12168:	ldr	r3, [r4, #160]	; 0xa0
   1216c:	add	r0, sp, #16
   12170:	ldr	r2, [r4, #164]	; 0xa4
   12174:	adds	r3, r3, #1
   12178:	adc	r2, r2, #0
   1217c:	str	r3, [r4, #160]	; 0xa0
   12180:	str	r2, [r4, #164]	; 0xa4
   12184:	bl	1542c <destroy_generator@@Base>
   12188:	ldr	r3, [r4, #168]	; 0xa8
   1218c:	mov	r0, sp
   12190:	ldr	r2, [r4, #172]	; 0xac
   12194:	adds	r3, r3, #1
   12198:	adc	r2, r2, #0
   1219c:	str	r3, [r4, #168]	; 0xa8
   121a0:	str	r2, [r4, #172]	; 0xac
   121a4:	bl	142c0 <destroy_grammar@@Base>
   121a8:	ldr	r3, [r4, #176]	; 0xb0
   121ac:	add	r0, sp, #4
   121b0:	ldr	r2, [r4, #180]	; 0xb4
   121b4:	adds	r3, r3, #1
   121b8:	adc	r2, r2, #0
   121bc:	str	r3, [r4, #176]	; 0xb0
   121c0:	str	r2, [r4, #180]	; 0xb4
   121c4:	bl	1269c <destroy_lexer@@Base>
   121c8:	ldr	r3, [r4, #184]	; 0xb8
   121cc:	mov	r0, r5
   121d0:	ldr	r2, [r4, #188]	; 0xbc
   121d4:	adds	r3, r3, #1
   121d8:	adc	r2, r2, #0
   121dc:	str	r3, [r4, #184]	; 0xb8
   121e0:	str	r2, [r4, #188]	; 0xbc
   121e4:	bl	11988 <free@plt>
   121e8:	mov	r0, #0
   121ec:	add	sp, sp, #32
   121f0:	ldrd	r4, [sp]
   121f4:	ldr	r6, [sp, #8]
   121f8:	add	sp, sp, #12
   121fc:	pop	{pc}		; (ldr pc, [sp], #4)

00012200 <init_token_int_type@@Base>:
   12200:	movw	r3, #39856	; 0x9bb0
   12204:	movt	r3, #2
   12208:	ldr	r2, [r3]
   1220c:	mov	ip, #0
   12210:	ldr	r1, [r3, #4]
   12214:	str	ip, [r0]
   12218:	adds	r2, r2, #1
   1221c:	adc	r1, r1, ip
   12220:	str	r2, [r3]
   12224:	str	r1, [r3, #4]
   12228:	bx	lr

0001222c <init_token_int_value@@Base>:
   1222c:	movw	r3, #39856	; 0x9bb0
   12230:	movt	r3, #2
   12234:	push	{lr}		; (str lr, [sp, #-4]!)
   12238:	ldr	r2, [r3, #8]
   1223c:	mov	lr, #1
   12240:	ldr	ip, [r3, #12]
   12244:	str	lr, [r0]
   12248:	str	r1, [r0, #4]
   1224c:	adds	r2, r2, lr
   12250:	adc	ip, ip, #0
   12254:	str	r2, [r3, #8]
   12258:	str	ip, [r3, #12]
   1225c:	pop	{pc}		; (ldr pc, [sp], #4)

00012260 <init_token_function@@Base>:
   12260:	movw	r3, #39856	; 0x9bb0
   12264:	movt	r3, #2
   12268:	push	{lr}		; (str lr, [sp, #-4]!)
   1226c:	ldr	r2, [r3, #16]
   12270:	mov	lr, #2
   12274:	ldr	ip, [r3, #20]
   12278:	str	lr, [r0]
   1227c:	str	r1, [r0, #4]
   12280:	adds	r2, r2, #1
   12284:	adc	ip, ip, #0
   12288:	str	r2, [r3, #16]
   1228c:	str	ip, [r3, #20]
   12290:	pop	{pc}		; (ldr pc, [sp], #4)

00012294 <init_token_opar@@Base>:
   12294:	movw	r3, #39856	; 0x9bb0
   12298:	movt	r3, #2
   1229c:	ldr	r2, [r3, #24]
   122a0:	mov	ip, #3
   122a4:	ldr	r1, [r3, #28]
   122a8:	str	ip, [r0]
   122ac:	adds	r2, r2, #1
   122b0:	adc	r1, r1, #0
   122b4:	str	r2, [r3, #24]
   122b8:	str	r1, [r3, #28]
   122bc:	bx	lr

000122c0 <init_token_cpar@@Base>:
   122c0:	movw	r3, #39856	; 0x9bb0
   122c4:	movt	r3, #2
   122c8:	ldr	r2, [r3, #32]
   122cc:	mov	ip, #4
   122d0:	ldr	r1, [r3, #36]	; 0x24
   122d4:	str	ip, [r0]
   122d8:	adds	r2, r2, #1
   122dc:	adc	r1, r1, #0
   122e0:	str	r2, [r3, #32]
   122e4:	str	r1, [r3, #36]	; 0x24
   122e8:	bx	lr

000122ec <init_token_obra@@Base>:
   122ec:	movw	r3, #39856	; 0x9bb0
   122f0:	movt	r3, #2
   122f4:	ldr	r2, [r3, #40]	; 0x28
   122f8:	mov	ip, #5
   122fc:	ldr	r1, [r3, #44]	; 0x2c
   12300:	str	ip, [r0]
   12304:	adds	r2, r2, #1
   12308:	adc	r1, r1, #0
   1230c:	str	r2, [r3, #40]	; 0x28
   12310:	str	r1, [r3, #44]	; 0x2c
   12314:	bx	lr

00012318 <init_token_cbra@@Base>:
   12318:	movw	r3, #39856	; 0x9bb0
   1231c:	movt	r3, #2
   12320:	ldr	r2, [r3, #48]	; 0x30
   12324:	mov	ip, #6
   12328:	ldr	r1, [r3, #52]	; 0x34
   1232c:	str	ip, [r0]
   12330:	adds	r2, r2, #1
   12334:	adc	r1, r1, #0
   12338:	str	r2, [r3, #48]	; 0x30
   1233c:	str	r1, [r3, #52]	; 0x34
   12340:	bx	lr

00012344 <init_token_return@@Base>:
   12344:	movw	r3, #39856	; 0x9bb0
   12348:	movt	r3, #2
   1234c:	ldr	r2, [r3, #56]	; 0x38
   12350:	mov	ip, #7
   12354:	ldr	r1, [r3, #60]	; 0x3c
   12358:	str	ip, [r0]
   1235c:	adds	r2, r2, #1
   12360:	adc	r1, r1, #0
   12364:	str	r2, [r3, #56]	; 0x38
   12368:	str	r1, [r3, #60]	; 0x3c
   1236c:	bx	lr

00012370 <init_token_semicolon@@Base>:
   12370:	movw	r3, #39856	; 0x9bb0
   12374:	movt	r3, #2
   12378:	ldr	r2, [r3, #64]	; 0x40
   1237c:	mov	ip, #8
   12380:	ldr	r1, [r3, #68]	; 0x44
   12384:	str	ip, [r0]
   12388:	adds	r2, r2, #1
   1238c:	adc	r1, r1, #0
   12390:	str	r2, [r3, #64]	; 0x40
   12394:	str	r1, [r3, #68]	; 0x44
   12398:	bx	lr

0001239c <init_token_eof@@Base>:
   1239c:	movw	r3, #39856	; 0x9bb0
   123a0:	movt	r3, #2
   123a4:	ldr	r2, [r3, #72]	; 0x48
   123a8:	mov	ip, #9
   123ac:	ldr	r1, [r3, #76]	; 0x4c
   123b0:	str	ip, [r0]
   123b4:	adds	r2, r2, #1
   123b8:	adc	r1, r1, #0
   123bc:	str	r2, [r3, #72]	; 0x48
   123c0:	str	r1, [r3, #76]	; 0x4c
   123c4:	bx	lr

000123c8 <init_token_if@@Base>:
   123c8:	movw	r3, #39856	; 0x9bb0
   123cc:	movt	r3, #2
   123d0:	ldr	r2, [r3, #80]	; 0x50
   123d4:	mov	ip, #10
   123d8:	ldr	r1, [r3, #84]	; 0x54
   123dc:	str	ip, [r0]
   123e0:	adds	r2, r2, #1
   123e4:	adc	r1, r1, #0
   123e8:	str	r2, [r3, #80]	; 0x50
   123ec:	str	r1, [r3, #84]	; 0x54
   123f0:	bx	lr

000123f4 <init_token_else@@Base>:
   123f4:	movw	r3, #39856	; 0x9bb0
   123f8:	movt	r3, #2
   123fc:	ldr	r2, [r3, #88]	; 0x58
   12400:	mov	ip, #11
   12404:	ldr	r1, [r3, #92]	; 0x5c
   12408:	str	ip, [r0]
   1240c:	adds	r2, r2, #1
   12410:	adc	r1, r1, #0
   12414:	str	r2, [r3, #88]	; 0x58
   12418:	str	r1, [r3, #92]	; 0x5c
   1241c:	bx	lr

00012420 <init_token_boolean_op@@Base>:
   12420:	movw	r3, #39856	; 0x9bb0
   12424:	movt	r3, #2
   12428:	push	{lr}		; (str lr, [sp, #-4]!)
   1242c:	ldr	r2, [r3, #96]	; 0x60
   12430:	mov	lr, #12
   12434:	ldr	ip, [r3, #100]	; 0x64
   12438:	str	lr, [r0]
   1243c:	str	r1, [r0, #4]
   12440:	adds	r2, r2, #1
   12444:	adc	ip, ip, #0
   12448:	str	r2, [r3, #96]	; 0x60
   1244c:	str	ip, [r3, #100]	; 0x64
   12450:	pop	{pc}		; (ldr pc, [sp], #4)

00012454 <free_token_int_type@@Base>:
   12454:	movw	r3, #39856	; 0x9bb0
   12458:	movt	r3, #2
   1245c:	ldr	r2, [r3, #104]	; 0x68
   12460:	ldr	r1, [r3, #108]	; 0x6c
   12464:	adds	r2, r2, #1
   12468:	adc	r1, r1, #0
   1246c:	str	r2, [r3, #104]	; 0x68
   12470:	str	r1, [r3, #108]	; 0x6c
   12474:	b	11988 <free@plt>

00012478 <free_token_int_value@@Base>:
   12478:	movw	r3, #39856	; 0x9bb0
   1247c:	movt	r3, #2
   12480:	ldr	r2, [r3, #112]	; 0x70
   12484:	ldr	r1, [r3, #116]	; 0x74
   12488:	adds	r2, r2, #1
   1248c:	adc	r1, r1, #0
   12490:	str	r2, [r3, #112]	; 0x70
   12494:	str	r1, [r3, #116]	; 0x74
   12498:	b	11988 <free@plt>

0001249c <free_token_function@@Base>:
   1249c:	movw	r3, #39856	; 0x9bb0
   124a0:	movt	r3, #2
   124a4:	ldr	r2, [r3, #120]	; 0x78
   124a8:	ldr	r1, [r3, #124]	; 0x7c
   124ac:	adds	r2, r2, #1
   124b0:	adc	r1, r1, #0
   124b4:	str	r2, [r3, #120]	; 0x78
   124b8:	str	r1, [r3, #124]	; 0x7c
   124bc:	b	11988 <free@plt>

000124c0 <free_token_opar@@Base>:
   124c0:	movw	r3, #39856	; 0x9bb0
   124c4:	movt	r3, #2
   124c8:	ldr	r2, [r3, #128]	; 0x80
   124cc:	ldr	r1, [r3, #132]	; 0x84
   124d0:	adds	r2, r2, #1
   124d4:	adc	r1, r1, #0
   124d8:	str	r2, [r3, #128]	; 0x80
   124dc:	str	r1, [r3, #132]	; 0x84
   124e0:	b	11988 <free@plt>

000124e4 <free_token_cpar@@Base>:
   124e4:	movw	r3, #39856	; 0x9bb0
   124e8:	movt	r3, #2
   124ec:	ldr	r2, [r3, #136]	; 0x88
   124f0:	ldr	r1, [r3, #140]	; 0x8c
   124f4:	adds	r2, r2, #1
   124f8:	adc	r1, r1, #0
   124fc:	str	r2, [r3, #136]	; 0x88
   12500:	str	r1, [r3, #140]	; 0x8c
   12504:	b	11988 <free@plt>

00012508 <free_token_obra@@Base>:
   12508:	movw	r3, #39856	; 0x9bb0
   1250c:	movt	r3, #2
   12510:	ldr	r2, [r3, #144]	; 0x90
   12514:	ldr	r1, [r3, #148]	; 0x94
   12518:	adds	r2, r2, #1
   1251c:	adc	r1, r1, #0
   12520:	str	r2, [r3, #144]	; 0x90
   12524:	str	r1, [r3, #148]	; 0x94
   12528:	b	11988 <free@plt>

0001252c <free_token_cbra@@Base>:
   1252c:	movw	r3, #39856	; 0x9bb0
   12530:	movt	r3, #2
   12534:	ldr	r2, [r3, #152]	; 0x98
   12538:	ldr	r1, [r3, #156]	; 0x9c
   1253c:	adds	r2, r2, #1
   12540:	adc	r1, r1, #0
   12544:	str	r2, [r3, #152]	; 0x98
   12548:	str	r1, [r3, #156]	; 0x9c
   1254c:	b	11988 <free@plt>

00012550 <free_token_return@@Base>:
   12550:	movw	r3, #39856	; 0x9bb0
   12554:	movt	r3, #2
   12558:	ldr	r2, [r3, #160]	; 0xa0
   1255c:	ldr	r1, [r3, #164]	; 0xa4
   12560:	adds	r2, r2, #1
   12564:	adc	r1, r1, #0
   12568:	str	r2, [r3, #160]	; 0xa0
   1256c:	str	r1, [r3, #164]	; 0xa4
   12570:	b	11988 <free@plt>

00012574 <free_token_semicolon@@Base>:
   12574:	movw	r3, #39856	; 0x9bb0
   12578:	movt	r3, #2
   1257c:	ldr	r2, [r3, #168]	; 0xa8
   12580:	ldr	r1, [r3, #172]	; 0xac
   12584:	adds	r2, r2, #1
   12588:	adc	r1, r1, #0
   1258c:	str	r2, [r3, #168]	; 0xa8
   12590:	str	r1, [r3, #172]	; 0xac
   12594:	b	11988 <free@plt>

00012598 <free_token_eof@@Base>:
   12598:	movw	r3, #39856	; 0x9bb0
   1259c:	movt	r3, #2
   125a0:	ldr	r2, [r3, #176]	; 0xb0
   125a4:	ldr	r1, [r3, #180]	; 0xb4
   125a8:	adds	r2, r2, #1
   125ac:	adc	r1, r1, #0
   125b0:	str	r2, [r3, #176]	; 0xb0
   125b4:	str	r1, [r3, #180]	; 0xb4
   125b8:	b	11988 <free@plt>

000125bc <free_token_if@@Base>:
   125bc:	movw	r3, #39856	; 0x9bb0
   125c0:	movt	r3, #2
   125c4:	ldr	r2, [r3, #184]	; 0xb8
   125c8:	ldr	r1, [r3, #188]	; 0xbc
   125cc:	adds	r2, r2, #1
   125d0:	adc	r1, r1, #0
   125d4:	str	r2, [r3, #184]	; 0xb8
   125d8:	str	r1, [r3, #188]	; 0xbc
   125dc:	b	11988 <free@plt>

000125e0 <free_token_else@@Base>:
   125e0:	movw	r3, #39856	; 0x9bb0
   125e4:	movt	r3, #2
   125e8:	ldr	r2, [r3, #192]	; 0xc0
   125ec:	ldr	r1, [r3, #196]	; 0xc4
   125f0:	adds	r2, r2, #1
   125f4:	adc	r1, r1, #0
   125f8:	str	r2, [r3, #192]	; 0xc0
   125fc:	str	r1, [r3, #196]	; 0xc4
   12600:	b	11988 <free@plt>

00012604 <free_token_boolean_op@@Base>:
   12604:	str	r4, [sp, #-8]!
   12608:	mov	r4, r0
   1260c:	movw	r3, #39856	; 0x9bb0
   12610:	movt	r3, #2
   12614:	ldr	r0, [r0, #4]
   12618:	str	lr, [sp, #4]
   1261c:	cmp	r0, #0
   12620:	beq	12654 <free_token_boolean_op@@Base+0x50>
   12624:	ldr	r2, [r3, #200]	; 0xc8
   12628:	ldr	r1, [r3, #204]	; 0xcc
   1262c:	adds	r2, r2, #1
   12630:	adc	r1, r1, #0
   12634:	str	r2, [r3, #200]	; 0xc8
   12638:	str	r1, [r3, #204]	; 0xcc
   1263c:	bl	11988 <free@plt>
   12640:	mov	r0, r4
   12644:	ldr	r4, [sp]
   12648:	ldr	lr, [sp, #4]
   1264c:	add	sp, sp, #8
   12650:	b	11988 <free@plt>
   12654:	ldr	r2, [r3, #208]	; 0xd0
   12658:	ldr	r1, [r3, #212]	; 0xd4
   1265c:	adds	r2, r2, #1
   12660:	adc	r1, r1, #0
   12664:	str	r2, [r3, #208]	; 0xd0
   12668:	str	r1, [r3, #212]	; 0xd4
   1266c:	b	12640 <free_token_boolean_op@@Base+0x3c>

00012670 <init_lexer@@Base>:
   12670:	movw	r3, #40072	; 0x9c88
   12674:	movt	r3, #2
   12678:	push	{lr}		; (str lr, [sp, #-4]!)
   1267c:	ldm	r3, {r2, ip}
   12680:	mov	lr, #0
   12684:	stm	r0, {r1, lr}
   12688:	str	lr, [r0, #8]
   1268c:	adds	r2, r2, #1
   12690:	adc	ip, ip, lr
   12694:	stm	r3, {r2, ip}
   12698:	pop	{pc}		; (ldr pc, [sp], #4)

0001269c <destroy_lexer@@Base>:
   1269c:	ldr	r0, [r0, #4]
   126a0:	movw	r3, #40072	; 0x9c88
   126a4:	movt	r3, #2
   126a8:	cmp	r0, #0
   126ac:	beq	126cc <destroy_lexer@@Base+0x30>
   126b0:	ldr	r2, [r3, #8]
   126b4:	ldr	r1, [r3, #12]
   126b8:	adds	r2, r2, #1
   126bc:	adc	r1, r1, #0
   126c0:	str	r2, [r3, #8]
   126c4:	str	r1, [r3, #12]
   126c8:	b	11988 <free@plt>
   126cc:	ldr	r2, [r3, #16]
   126d0:	ldr	r1, [r3, #20]
   126d4:	adds	r2, r2, #1
   126d8:	adc	r1, r1, #0
   126dc:	str	r2, [r3, #16]
   126e0:	str	r1, [r3, #20]
   126e4:	bx	lr

000126e8 <free_stack_base@@Base>:
   126e8:	movw	r3, #40072	; 0x9c88
   126ec:	movt	r3, #2
   126f0:	ldr	r2, [r3, #24]
   126f4:	ldr	r1, [r3, #28]
   126f8:	adds	r2, r2, #1
   126fc:	adc	r1, r1, #0
   12700:	str	r2, [r3, #24]
   12704:	str	r1, [r3, #28]
   12708:	b	11988 <free@plt>

0001270c <push_back@@Base>:
   1270c:	movw	r3, #40072	; 0x9c88
   12710:	movt	r3, #2
   12714:	strd	r4, [sp, #-16]!
   12718:	ldr	r2, [r3, #32]
   1271c:	mov	r4, r0
   12720:	mov	r0, #8
   12724:	mov	r5, r1
   12728:	ldr	ip, [r3, #36]	; 0x24
   1272c:	str	r6, [sp, #8]
   12730:	str	lr, [sp, #12]
   12734:	adds	r2, r2, #1
   12738:	adc	ip, ip, #0
   1273c:	str	r2, [r3, #32]
   12740:	str	ip, [r3, #36]	; 0x24
   12744:	bl	119e8 <malloc@plt>
   12748:	ldr	r3, [r4, #4]
   1274c:	ldr	r6, [sp, #8]
   12750:	str	r0, [r4, #4]
   12754:	stm	r0, {r3, r5}
   12758:	ldrd	r4, [sp]
   1275c:	add	sp, sp, #12
   12760:	pop	{pc}		; (ldr pc, [sp], #4)

00012764 <get_char@@Base>:
   12764:	movw	r3, #40072	; 0x9c88
   12768:	movt	r3, #2
   1276c:	ldr	ip, [r0, #8]
   12770:	str	r4, [sp, #-8]!
   12774:	ldr	r2, [r3, #40]	; 0x28
   12778:	ldr	r1, [r3, #44]	; 0x2c
   1277c:	str	lr, [sp, #4]
   12780:	add	r4, ip, #1
   12784:	ldr	lr, [r0]
   12788:	adds	r2, r2, #1
   1278c:	str	r4, [r0, #8]
   12790:	ldr	r4, [sp]
   12794:	add	sp, sp, #4
   12798:	str	r2, [r3, #40]	; 0x28
   1279c:	adc	r2, r1, #0
   127a0:	ldrb	r0, [lr, ip]
   127a4:	str	r2, [r3, #44]	; 0x2c
   127a8:	pop	{pc}		; (ldr pc, [sp], #4)

000127ac <push_back_chars@@Base>:
   127ac:	ldr	ip, [r0, #8]
   127b0:	cmp	ip, r1
   127b4:	bcc	127e4 <push_back_chars@@Base+0x38>
   127b8:	movw	r3, #40072	; 0x9c88
   127bc:	movt	r3, #2
   127c0:	ldr	r2, [r3, #48]	; 0x30
   127c4:	sub	ip, ip, r1
   127c8:	ldr	r1, [r3, #52]	; 0x34
   127cc:	str	ip, [r0, #8]
   127d0:	adds	r2, r2, #1
   127d4:	adc	r1, r1, #0
   127d8:	str	r2, [r3, #48]	; 0x30
   127dc:	str	r1, [r3, #52]	; 0x34
   127e0:	bx	lr
   127e4:	str	r4, [sp, #-8]!
   127e8:	movw	r4, #40072	; 0x9c88
   127ec:	movt	r4, #2
   127f0:	movw	r3, #39584	; 0x9aa0
   127f4:	movt	r3, #2
   127f8:	ldr	ip, [r4, #56]	; 0x38
   127fc:	mov	r1, #1
   12800:	mov	r2, #32
   12804:	ldr	r3, [r3]
   12808:	movw	r0, #34652	; 0x875c
   1280c:	movt	r0, #1
   12810:	str	lr, [sp, #4]
   12814:	ldr	lr, [r4, #60]	; 0x3c
   12818:	adds	ip, ip, r1
   1281c:	str	ip, [r4, #56]	; 0x38
   12820:	adc	lr, lr, #0
   12824:	str	lr, [r4, #60]	; 0x3c
   12828:	bl	119ac <fwrite@plt>
   1282c:	ldr	r3, [r4, #64]	; 0x40
   12830:	mov	r0, #1
   12834:	ldr	r2, [r4, #68]	; 0x44
   12838:	adds	r3, r3, r0
   1283c:	adc	r2, r2, #0
   12840:	str	r3, [r4, #64]	; 0x40
   12844:	str	r2, [r4, #68]	; 0x44
   12848:	bl	11a18 <exit@plt>

0001284c <push_back_one_char@@Base>:
   1284c:	str	r4, [sp, #-8]!
   12850:	movw	r4, #40072	; 0x9c88
   12854:	movt	r4, #2
   12858:	ldr	r3, [r4, #72]	; 0x48
   1285c:	ldr	r2, [r4, #76]	; 0x4c
   12860:	ldr	r1, [r0, #8]
   12864:	adds	r3, r3, #1
   12868:	str	lr, [sp, #4]
   1286c:	adc	r2, r2, #0
   12870:	str	r3, [r4, #72]	; 0x48
   12874:	cmp	r1, #0
   12878:	str	r2, [r4, #76]	; 0x4c
   1287c:	beq	128c4 <push_back_one_char@@Base+0x78>
   12880:	sub	r1, r1, #1
   12884:	ldr	r2, [r4, #48]	; 0x30
   12888:	ldr	ip, [r4, #52]	; 0x34
   1288c:	str	r1, [r0, #8]
   12890:	ldr	r3, [r4, #80]	; 0x50
   12894:	adds	r2, r2, #1
   12898:	ldr	r1, [r4, #84]	; 0x54
   1289c:	adc	ip, ip, #0
   128a0:	str	r2, [r4, #48]	; 0x30
   128a4:	adds	r3, r3, #1
   128a8:	str	ip, [r4, #52]	; 0x34
   128ac:	adc	r2, r1, #0
   128b0:	str	r3, [r4, #80]	; 0x50
   128b4:	str	r2, [r4, #84]	; 0x54
   128b8:	ldr	r4, [sp]
   128bc:	add	sp, sp, #4
   128c0:	pop	{pc}		; (ldr pc, [sp], #4)
   128c4:	ldr	ip, [r4, #56]	; 0x38
   128c8:	mov	r1, #1
   128cc:	movw	r3, #39584	; 0x9aa0
   128d0:	movt	r3, #2
   128d4:	mov	r2, #32
   128d8:	ldr	lr, [r4, #60]	; 0x3c
   128dc:	movw	r0, #34652	; 0x875c
   128e0:	movt	r0, #1
   128e4:	ldr	r3, [r3]
   128e8:	adds	ip, ip, r1
   128ec:	adc	lr, lr, #0
   128f0:	str	ip, [r4, #56]	; 0x38
   128f4:	str	lr, [r4, #60]	; 0x3c
   128f8:	bl	119ac <fwrite@plt>
   128fc:	ldr	r3, [r4, #64]	; 0x40
   12900:	mov	r0, #1
   12904:	ldr	r2, [r4, #68]	; 0x44
   12908:	adds	r3, r3, r0
   1290c:	adc	r2, r2, #0
   12910:	str	r3, [r4, #64]	; 0x40
   12914:	str	r2, [r4, #68]	; 0x44
   12918:	bl	11a18 <exit@plt>

0001291c <next@@Base>:
   1291c:	ldr	r3, [r0, #4]
   12920:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12924:	mov	r4, r0
   12928:	strd	r6, [sp, #8]
   1292c:	strd	r8, [sp, #16]
   12930:	str	sl, [sp, #24]
   12934:	cmp	r3, #0
   12938:	str	lr, [sp, #28]
   1293c:	sub	sp, sp, #512	; 0x200
   12940:	bne	12a08 <next@@Base+0xec>
   12944:	ldr	ip, [r0]
   12948:	ldr	r2, [r0, #8]
   1294c:	add	r1, r2, #1
   12950:	add	r0, ip, r2
   12954:	str	r1, [r4, #8]
   12958:	ldrb	r7, [ip, r2]
   1295c:	cmp	r7, #0
   12960:	beq	129c0 <next@@Base+0xa4>
   12964:	movw	r5, #40072	; 0x9c88
   12968:	movt	r5, #2
   1296c:	ldr	r6, [r5, #104]	; 0x68
   12970:	mov	r8, r3
   12974:	ldr	r9, [r5, #108]	; 0x6c
   12978:	ldr	r2, [r5, #112]	; 0x70
   1297c:	ldr	lr, [r5, #116]	; 0x74
   12980:	cmp	r7, #32
   12984:	cmpne	r7, #9
   12988:	bne	12a5c <next@@Base+0x140>
   1298c:	add	r1, r1, #1
   12990:	adds	r2, r2, #1
   12994:	adc	lr, lr, #0
   12998:	mov	r3, #1
   1299c:	str	r1, [r4, #8]
   129a0:	ldrb	r7, [r0, #1]!
   129a4:	cmp	r7, #0
   129a8:	bne	12980 <next@@Base+0x64>
   129ac:	cmp	r8, #0
   129b0:	str	r2, [r5, #112]	; 0x70
   129b4:	str	lr, [r5, #116]	; 0x74
   129b8:	strne	r6, [r5, #104]	; 0x68
   129bc:	strne	r9, [r5, #108]	; 0x6c
   129c0:	ldr	r4, [pc, #3032]	; 135a0 <next@@Base+0xc84>
   129c4:	mov	r0, #4
   129c8:	ldr	r3, [r4, #-8]
   129cc:	ldr	r2, [r4, #-4]
   129d0:	adds	r3, r3, #1
   129d4:	adc	r2, r2, #0
   129d8:	str	r3, [r4, #-8]
   129dc:	str	r2, [r4, #-4]
   129e0:	bl	119e8 <malloc@plt>
   129e4:	mov	r6, r0
   129e8:	bl	1239c <init_token_eof@@Base>
   129ec:	ldr	r3, [r4]
   129f0:	ldr	r2, [r4, #4]
   129f4:	adds	r3, r3, #1
   129f8:	adc	r2, r2, #0
   129fc:	str	r3, [r4]
   12a00:	str	r2, [r4, #4]
   12a04:	b	12a3c <next@@Base+0x120>
   12a08:	movw	r2, #40072	; 0x9c88
   12a0c:	movt	r2, #2
   12a10:	ldr	lr, [r3]
   12a14:	mov	r0, r3
   12a18:	ldr	r1, [r2, #88]	; 0x58
   12a1c:	ldr	ip, [r2, #92]	; 0x5c
   12a20:	ldr	r6, [r3, #4]
   12a24:	adds	r1, r1, #1
   12a28:	str	lr, [r4, #4]
   12a2c:	adc	r3, ip, #0
   12a30:	str	r1, [r2, #88]	; 0x58
   12a34:	str	r3, [r2, #92]	; 0x5c
   12a38:	bl	11988 <free@plt>
   12a3c:	mov	r0, r6
   12a40:	add	sp, sp, #512	; 0x200
   12a44:	ldrd	r4, [sp]
   12a48:	ldrd	r6, [sp, #8]
   12a4c:	ldrd	r8, [sp, #16]
   12a50:	ldr	sl, [sp, #24]
   12a54:	add	sp, sp, #28
   12a58:	pop	{pc}		; (ldr pc, [sp], #4)
   12a5c:	cmp	r7, #10
   12a60:	beq	12be0 <next@@Base+0x2c4>
   12a64:	cmp	r8, #0
   12a68:	strne	r6, [r5, #104]	; 0x68
   12a6c:	strne	r9, [r5, #108]	; 0x6c
   12a70:	cmp	r3, #0
   12a74:	strne	r2, [r5, #112]	; 0x70
   12a78:	strne	lr, [r5, #116]	; 0x74
   12a7c:	cmp	r7, #48	; 0x30
   12a80:	beq	12f90 <next@@Base+0x674>
   12a84:	sub	r3, r7, #49	; 0x31
   12a88:	cmp	r3, #8
   12a8c:	bhi	12bf0 <next@@Base+0x2d4>
   12a90:	add	r0, r1, #1
   12a94:	ldr	r3, [r5, #136]	; 0x88
   12a98:	add	lr, ip, r1
   12a9c:	strb	r7, [sp]
   12aa0:	str	r0, [r4, #8]
   12aa4:	ldrb	r2, [ip, r1]
   12aa8:	ldr	ip, [r5, #140]	; 0x8c
   12aac:	adds	r3, r3, #1
   12ab0:	str	r3, [r5, #136]	; 0x88
   12ab4:	adc	r3, ip, #0
   12ab8:	cmp	r2, #0
   12abc:	str	r3, [r5, #140]	; 0x8c
   12ac0:	beq	129c0 <next@@Base+0xa4>
   12ac4:	sub	r3, r2, #48	; 0x30
   12ac8:	cmp	r3, #9
   12acc:	bhi	12d24 <next@@Base+0x408>
   12ad0:	ldr	sl, [pc, #2764]	; 135a4 <next@@Base+0xc88>
   12ad4:	rsb	r1, r1, #1
   12ad8:	mov	r7, sp
   12adc:	ldmdb	sl, {r3, r6}
   12ae0:	b	12ae8 <next@@Base+0x1cc>
   12ae4:	mov	r0, ip
   12ae8:	add	ip, r0, #1
   12aec:	strb	r2, [r7, #1]!
   12af0:	adds	r3, r3, #1
   12af4:	adc	r6, r6, #0
   12af8:	add	r9, r1, r0
   12afc:	str	ip, [r4, #8]
   12b00:	ldrb	r2, [lr, #1]!
   12b04:	sub	r8, r2, #48	; 0x30
   12b08:	cmp	r8, #9
   12b0c:	bls	12ae4 <next@@Base+0x1c8>
   12b10:	stmdb	sl, {r3, r6}
   12b14:	ldr	r3, [sl]
   12b18:	ldr	r2, [sl, #4]
   12b1c:	adds	r3, r3, #1
   12b20:	adc	r2, r2, #0
   12b24:	cmp	ip, #0
   12b28:	str	r3, [sl]
   12b2c:	str	r2, [sl, #4]
   12b30:	beq	13294 <next@@Base+0x978>
   12b34:	ldr	r7, [pc, #2668]	; 135a8 <next@@Base+0xc8c>
   12b38:	add	r3, sp, #512	; 0x200
   12b3c:	mov	r8, #0
   12b40:	add	r9, r3, r9
   12b44:	str	r0, [r4, #8]
   12b48:	mov	r0, #8
   12b4c:	ldr	r2, [r5, #48]	; 0x30
   12b50:	strb	r8, [r9, #-512]	; 0xfffffe00
   12b54:	ldr	ip, [r5, #52]	; 0x34
   12b58:	mov	r4, r7
   12b5c:	ldr	r3, [r7, #-8]
   12b60:	adds	r2, r2, #1
   12b64:	ldr	r1, [r7, #-4]
   12b68:	adc	ip, ip, r8
   12b6c:	str	r2, [r5, #48]	; 0x30
   12b70:	adds	r3, r3, #1
   12b74:	str	ip, [r5, #52]	; 0x34
   12b78:	adc	r2, r1, r8
   12b7c:	str	r3, [r7, #-8]
   12b80:	str	r2, [r7, #-4]
   12b84:	bl	119e8 <malloc@plt>
   12b88:	mov	r6, r0
   12b8c:	mov	r1, r8
   12b90:	mov	r2, #10
   12b94:	mov	r0, sp
   12b98:	bl	11970 <strtol@plt>
   12b9c:	ldr	r3, [r7]
   12ba0:	mov	r1, r0
   12ba4:	mov	r0, r6
   12ba8:	ldr	r2, [r7, #4]
   12bac:	adds	r3, r3, #1
   12bb0:	mov	r8, r3
   12bb4:	adc	r3, r2, #0
   12bb8:	mov	r9, r3
   12bbc:	strd	r8, [r4], #16
   12bc0:	bl	1222c <init_token_int_value@@Base>
   12bc4:	ldr	r3, [r4, #-8]
   12bc8:	ldr	r2, [r4, #-4]
   12bcc:	adds	r3, r3, #1
   12bd0:	adc	r2, r2, #0
   12bd4:	str	r3, [r4, #-8]
   12bd8:	str	r2, [r4, #-4]
   12bdc:	b	12a3c <next@@Base+0x120>
   12be0:	adds	r6, r6, #1
   12be4:	mov	r8, #1
   12be8:	adc	r9, r9, #0
   12bec:	b	1298c <next@@Base+0x70>
   12bf0:	cmp	r7, #40	; 0x28
   12bf4:	beq	12fd8 <next@@Base+0x6bc>
   12bf8:	cmp	r7, #41	; 0x29
   12bfc:	beq	1301c <next@@Base+0x700>
   12c00:	cmp	r7, #123	; 0x7b
   12c04:	beq	130e8 <next@@Base+0x7cc>
   12c08:	cmp	r7, #125	; 0x7d
   12c0c:	beq	130a4 <next@@Base+0x788>
   12c10:	cmp	r7, #59	; 0x3b
   12c14:	beq	13060 <next@@Base+0x744>
   12c18:	cmp	r7, #101	; 0x65
   12c1c:	beq	12d38 <next@@Base+0x41c>
   12c20:	cmp	r7, #105	; 0x69
   12c24:	beq	12de8 <next@@Base+0x4cc>
   12c28:	cmp	r7, #109	; 0x6d
   12c2c:	beq	12ec4 <next@@Base+0x5a8>
   12c30:	cmp	r7, #114	; 0x72
   12c34:	bne	13174 <next@@Base+0x858>
   12c38:	ldr	r3, [r5, #248]	; 0xf8
   12c3c:	add	r0, r1, #1
   12c40:	strb	r7, [sp]
   12c44:	ldr	lr, [r5, #252]	; 0xfc
   12c48:	str	r0, [r4, #8]
   12c4c:	ldrb	r2, [ip, r1]
   12c50:	adds	r3, r3, #1
   12c54:	str	r3, [r5, #248]	; 0xf8
   12c58:	adc	r3, lr, #0
   12c5c:	cmp	r2, #0
   12c60:	str	r3, [r5, #252]	; 0xfc
   12c64:	beq	129c0 <next@@Base+0xa4>
   12c68:	cmp	r2, #101	; 0x65
   12c6c:	bne	1328c <next@@Base+0x970>
   12c70:	add	r3, r1, #2
   12c74:	strb	r2, [sp, #1]
   12c78:	str	r3, [r4, #8]
   12c7c:	ldrb	r2, [ip, r0]
   12c80:	cmp	r2, #116	; 0x74
   12c84:	ldrne	r2, [pc, #2336]	; 135ac <next@@Base+0xc90>
   12c88:	bne	13154 <next@@Base+0x838>
   12c8c:	add	r0, r1, #3
   12c90:	strb	r2, [sp, #2]
   12c94:	str	r0, [r4, #8]
   12c98:	ldrb	r2, [ip, r3]
   12c9c:	cmp	r2, #117	; 0x75
   12ca0:	ldrne	r2, [pc, #2312]	; 135b0 <next@@Base+0xc94>
   12ca4:	bne	13130 <next@@Base+0x814>
   12ca8:	add	r3, r1, #4
   12cac:	strb	r2, [sp, #3]
   12cb0:	str	r3, [r4, #8]
   12cb4:	ldrb	r2, [ip, r0]
   12cb8:	cmp	r2, #114	; 0x72
   12cbc:	ldrne	r2, [pc, #2284]	; 135b0 <next@@Base+0xc94>
   12cc0:	bne	13154 <next@@Base+0x838>
   12cc4:	add	r1, r1, #5
   12cc8:	strb	r7, [sp, #4]
   12ccc:	ldr	r5, [pc, #2272]	; 135b4 <next@@Base+0xc98>
   12cd0:	str	r1, [r4, #8]
   12cd4:	ldrb	r1, [ip, r3]
   12cd8:	ldr	r3, [r5, #-8]
   12cdc:	ldr	r2, [r5, #-4]
   12ce0:	adds	r3, r3, #1
   12ce4:	adc	r2, r2, #0
   12ce8:	cmp	r1, #110	; 0x6e
   12cec:	str	r3, [r5, #-8]
   12cf0:	str	r2, [r5, #-4]
   12cf4:	bne	1326c <next@@Base+0x950>
   12cf8:	mov	r0, #4
   12cfc:	bl	119e8 <malloc@plt>
   12d00:	mov	r6, r0
   12d04:	bl	12344 <init_token_return@@Base>
   12d08:	ldr	r3, [r5, #8]
   12d0c:	ldr	r2, [r5, #12]
   12d10:	adds	r3, r3, #1
   12d14:	adc	r2, r2, #0
   12d18:	str	r3, [r5, #8]
   12d1c:	str	r2, [r5, #12]
   12d20:	b	12a3c <next@@Base+0x120>
   12d24:	mov	ip, r0
   12d28:	mov	r9, #1
   12d2c:	ldr	sl, [pc, #2160]	; 135a4 <next@@Base+0xc88>
   12d30:	mov	r0, r1
   12d34:	b	12b14 <next@@Base+0x1f8>
   12d38:	add	r0, r1, #1
   12d3c:	ldr	r2, [r5, #224]	; 0xe0
   12d40:	strb	r7, [sp]
   12d44:	ldr	lr, [r5, #228]	; 0xe4
   12d48:	str	r0, [r4, #8]
   12d4c:	ldrb	r3, [ip, r1]
   12d50:	adds	r2, r2, #1
   12d54:	adc	lr, lr, #0
   12d58:	str	r2, [r5, #224]	; 0xe0
   12d5c:	cmp	r3, #0
   12d60:	str	lr, [r5, #228]	; 0xe4
   12d64:	beq	129c0 <next@@Base+0xa4>
   12d68:	cmp	r3, #108	; 0x6c
   12d6c:	bne	13150 <next@@Base+0x834>
   12d70:	mov	r2, #108	; 0x6c
   12d74:	add	r3, r1, #2
   12d78:	strb	r2, [sp, #1]
   12d7c:	str	r3, [r4, #8]
   12d80:	ldrb	r2, [ip, r0]
   12d84:	cmp	r2, #115	; 0x73
   12d88:	bne	1312c <next@@Base+0x810>
   12d8c:	ldr	r5, [pc, #2084]	; 135b8 <next@@Base+0xc9c>
   12d90:	add	r1, r1, #3
   12d94:	strb	r2, [sp, #2]
   12d98:	str	r1, [r4, #8]
   12d9c:	ldrb	r1, [ip, r3]
   12da0:	ldr	r3, [r5]
   12da4:	ldr	r2, [r5, #4]
   12da8:	adds	r3, r3, #1
   12dac:	adc	r2, r2, #0
   12db0:	cmp	r1, #101	; 0x65
   12db4:	str	r3, [r5]
   12db8:	str	r2, [r5, #4]
   12dbc:	bne	13240 <next@@Base+0x924>
   12dc0:	mov	r0, #4
   12dc4:	bl	119e8 <malloc@plt>
   12dc8:	mov	r6, r0
   12dcc:	bl	123f4 <init_token_else@@Base>
   12dd0:	ldrd	r0, [r5, #16]!
   12dd4:	adds	r3, r0, #1
   12dd8:	adc	r2, r1, #0
   12ddc:	str	r3, [r5]
   12de0:	str	r2, [r5, #4]
   12de4:	b	12a3c <next@@Base+0x120>
   12de8:	add	r2, r1, #1
   12dec:	ldr	r0, [r5, #232]	; 0xe8
   12df0:	strb	r7, [sp]
   12df4:	ldr	lr, [r5, #236]	; 0xec
   12df8:	str	r2, [r4, #8]
   12dfc:	ldrb	r3, [ip, r1]
   12e00:	adds	r0, r0, #1
   12e04:	adc	lr, lr, #0
   12e08:	str	r0, [r5, #232]	; 0xe8
   12e0c:	cmp	r3, #0
   12e10:	str	lr, [r5, #236]	; 0xec
   12e14:	beq	129c0 <next@@Base+0xa4>
   12e18:	cmp	r3, #102	; 0x66
   12e1c:	bne	12e74 <next@@Base+0x558>
   12e20:	ldr	r4, [pc, #1940]	; 135bc <next@@Base+0xca0>
   12e24:	mov	r2, #0
   12e28:	mov	r0, #4
   12e2c:	strb	r3, [sp, #1]
   12e30:	strb	r2, [sp, #2]
   12e34:	ldr	r3, [r4, #-8]
   12e38:	ldr	r2, [r4, #-4]
   12e3c:	adds	r3, r3, #1
   12e40:	adc	r2, r2, #0
   12e44:	str	r3, [r4, #-8]
   12e48:	str	r2, [r4, #-4]
   12e4c:	bl	119e8 <malloc@plt>
   12e50:	mov	r6, r0
   12e54:	bl	123c8 <init_token_if@@Base>
   12e58:	ldr	r3, [r4, #24]
   12e5c:	ldr	r2, [r4, #28]
   12e60:	adds	r3, r3, #1
   12e64:	adc	r2, r2, #0
   12e68:	str	r3, [r4, #24]
   12e6c:	str	r2, [r4, #28]
   12e70:	b	12a3c <next@@Base+0x120>
   12e74:	cmp	r3, #110	; 0x6e
   12e78:	bne	13264 <next@@Base+0x948>
   12e7c:	ldr	r5, [pc, #1848]	; 135bc <next@@Base+0xca0>
   12e80:	add	r1, r1, #2
   12e84:	strb	r3, [sp, #1]
   12e88:	str	r1, [r4, #8]
   12e8c:	ldrb	r1, [ip, r2]
   12e90:	ldr	r3, [r5]
   12e94:	ldr	r2, [r5, #4]
   12e98:	adds	r3, r3, #1
   12e9c:	adc	r2, r2, #0
   12ea0:	cmp	r1, #116	; 0x74
   12ea4:	str	r3, [r5]
   12ea8:	str	r2, [r5, #4]
   12eac:	bne	13240 <next@@Base+0x924>
   12eb0:	mov	r0, #4
   12eb4:	bl	119e8 <malloc@plt>
   12eb8:	mov	r6, r0
   12ebc:	bl	12200 <init_token_int_type@@Base>
   12ec0:	b	12dd0 <next@@Base+0x4b4>
   12ec4:	ldr	r3, [r5, #240]	; 0xf0
   12ec8:	mov	r2, #109	; 0x6d
   12ecc:	add	r0, r1, #1
   12ed0:	ldr	lr, [r5, #244]	; 0xf4
   12ed4:	strb	r2, [sp]
   12ed8:	str	r0, [r4, #8]
   12edc:	ldrb	r2, [ip, r1]
   12ee0:	adds	r3, r3, #1
   12ee4:	str	r3, [r5, #240]	; 0xf0
   12ee8:	adc	r3, lr, #0
   12eec:	str	r3, [r5, #244]	; 0xf4
   12ef0:	cmp	r2, #0
   12ef4:	beq	129c0 <next@@Base+0xa4>
   12ef8:	cmp	r2, #97	; 0x61
   12efc:	bne	132ec <next@@Base+0x9d0>
   12f00:	add	r3, r1, #2
   12f04:	strb	r2, [sp, #1]
   12f08:	str	r3, [r4, #8]
   12f0c:	ldrb	r2, [ip, r0]
   12f10:	cmp	r2, #105	; 0x69
   12f14:	ldrne	r2, [pc, #1700]	; 135c0 <next@@Base+0xca4>
   12f18:	bne	13130 <next@@Base+0x814>
   12f1c:	add	r1, r1, #3
   12f20:	strb	r2, [sp, #2]
   12f24:	ldr	r5, [pc, #1684]	; 135c0 <next@@Base+0xca4>
   12f28:	str	r1, [r4, #8]
   12f2c:	ldrb	r1, [ip, r3]
   12f30:	ldr	r3, [r5]
   12f34:	ldr	r2, [r5, #4]
   12f38:	adds	r3, r3, #1
   12f3c:	adc	r2, r2, #0
   12f40:	cmp	r1, #110	; 0x6e
   12f44:	str	r3, [r5]
   12f48:	str	r2, [r5, #4]
   12f4c:	bne	13240 <next@@Base+0x924>
   12f50:	mov	r6, #0
   12f54:	mov	r0, #5
   12f58:	strb	r1, [sp, #3]
   12f5c:	strb	r6, [sp, #4]
   12f60:	bl	119e8 <malloc@plt>
   12f64:	mov	r4, r0
   12f68:	mov	r1, sp
   12f6c:	mov	r2, #4
   12f70:	bl	11a6c <strncpy@plt>
   12f74:	mov	r0, #8
   12f78:	strb	r6, [r4, #4]
   12f7c:	bl	119e8 <malloc@plt>
   12f80:	mov	r1, r4
   12f84:	mov	r6, r0
   12f88:	bl	12260 <init_token_function@@Base>
   12f8c:	b	12dd0 <next@@Base+0x4b4>
   12f90:	ldr	r3, [r5, #120]	; 0x78
   12f94:	mov	r0, #8
   12f98:	ldr	r2, [r5, #124]	; 0x7c
   12f9c:	adds	r3, r3, #1
   12fa0:	adc	r2, r2, #0
   12fa4:	str	r3, [r5, #120]	; 0x78
   12fa8:	str	r2, [r5, #124]	; 0x7c
   12fac:	bl	119e8 <malloc@plt>
   12fb0:	mov	r1, #0
   12fb4:	mov	r6, r0
   12fb8:	bl	1222c <init_token_int_value@@Base>
   12fbc:	ldr	r3, [r5, #128]	; 0x80
   12fc0:	ldr	r2, [r5, #132]	; 0x84
   12fc4:	adds	r3, r3, #1
   12fc8:	adc	r2, r2, #0
   12fcc:	str	r3, [r5, #128]	; 0x80
   12fd0:	str	r2, [r5, #132]	; 0x84
   12fd4:	b	12a3c <next@@Base+0x120>
   12fd8:	ldr	r3, [r5, #144]	; 0x90
   12fdc:	mov	r0, #4
   12fe0:	ldr	r2, [r5, #148]	; 0x94
   12fe4:	adds	r3, r3, #1
   12fe8:	adc	r2, r2, #0
   12fec:	str	r3, [r5, #144]	; 0x90
   12ff0:	str	r2, [r5, #148]	; 0x94
   12ff4:	bl	119e8 <malloc@plt>
   12ff8:	mov	r6, r0
   12ffc:	bl	12294 <init_token_opar@@Base>
   13000:	ldr	r3, [r5, #152]	; 0x98
   13004:	ldr	r2, [r5, #156]	; 0x9c
   13008:	adds	r3, r3, #1
   1300c:	adc	r2, r2, #0
   13010:	str	r3, [r5, #152]	; 0x98
   13014:	str	r2, [r5, #156]	; 0x9c
   13018:	b	12a3c <next@@Base+0x120>
   1301c:	ldr	r3, [r5, #160]	; 0xa0
   13020:	mov	r0, #4
   13024:	ldr	r2, [r5, #164]	; 0xa4
   13028:	adds	r3, r3, #1
   1302c:	adc	r2, r2, #0
   13030:	str	r3, [r5, #160]	; 0xa0
   13034:	str	r2, [r5, #164]	; 0xa4
   13038:	bl	119e8 <malloc@plt>
   1303c:	mov	r6, r0
   13040:	bl	122c0 <init_token_cpar@@Base>
   13044:	ldr	r3, [r5, #168]	; 0xa8
   13048:	ldr	r2, [r5, #172]	; 0xac
   1304c:	adds	r3, r3, #1
   13050:	adc	r2, r2, #0
   13054:	str	r3, [r5, #168]	; 0xa8
   13058:	str	r2, [r5, #172]	; 0xac
   1305c:	b	12a3c <next@@Base+0x120>
   13060:	ldr	r3, [r5, #208]	; 0xd0
   13064:	mov	r0, #4
   13068:	ldr	r2, [r5, #212]	; 0xd4
   1306c:	adds	r3, r3, #1
   13070:	adc	r2, r2, #0
   13074:	str	r3, [r5, #208]	; 0xd0
   13078:	str	r2, [r5, #212]	; 0xd4
   1307c:	bl	119e8 <malloc@plt>
   13080:	mov	r6, r0
   13084:	bl	12370 <init_token_semicolon@@Base>
   13088:	ldr	r3, [r5, #216]	; 0xd8
   1308c:	ldr	r2, [r5, #220]	; 0xdc
   13090:	adds	r3, r3, #1
   13094:	adc	r2, r2, #0
   13098:	str	r3, [r5, #216]	; 0xd8
   1309c:	str	r2, [r5, #220]	; 0xdc
   130a0:	b	12a3c <next@@Base+0x120>
   130a4:	ldr	r3, [r5, #192]	; 0xc0
   130a8:	mov	r0, #4
   130ac:	ldr	r2, [r5, #196]	; 0xc4
   130b0:	adds	r3, r3, #1
   130b4:	adc	r2, r2, #0
   130b8:	str	r3, [r5, #192]	; 0xc0
   130bc:	str	r2, [r5, #196]	; 0xc4
   130c0:	bl	119e8 <malloc@plt>
   130c4:	mov	r6, r0
   130c8:	bl	12318 <init_token_cbra@@Base>
   130cc:	ldr	r3, [r5, #200]	; 0xc8
   130d0:	ldr	r2, [r5, #204]	; 0xcc
   130d4:	adds	r3, r3, #1
   130d8:	adc	r2, r2, #0
   130dc:	str	r3, [r5, #200]	; 0xc8
   130e0:	str	r2, [r5, #204]	; 0xcc
   130e4:	b	12a3c <next@@Base+0x120>
   130e8:	ldr	r3, [r5, #176]	; 0xb0
   130ec:	mov	r0, #4
   130f0:	ldr	r2, [r5, #180]	; 0xb4
   130f4:	adds	r3, r3, #1
   130f8:	adc	r2, r2, #0
   130fc:	str	r3, [r5, #176]	; 0xb0
   13100:	str	r2, [r5, #180]	; 0xb4
   13104:	bl	119e8 <malloc@plt>
   13108:	mov	r6, r0
   1310c:	bl	122ec <init_token_obra@@Base>
   13110:	ldr	r3, [r5, #184]	; 0xb8
   13114:	ldr	r2, [r5, #188]	; 0xbc
   13118:	adds	r3, r3, #1
   1311c:	adc	r2, r2, #0
   13120:	str	r3, [r5, #184]	; 0xb8
   13124:	str	r2, [r5, #188]	; 0xbc
   13128:	b	12a3c <next@@Base+0x120>
   1312c:	ldr	r2, [pc, #1156]	; 135b8 <next@@Base+0xc9c>
   13130:	mov	r0, #1
   13134:	ldr	r3, [r2, #-8]
   13138:	ldr	r1, [r2, #-4]
   1313c:	adds	r3, r3, r0
   13140:	adc	r1, r1, #0
   13144:	str	r3, [r2, #-8]
   13148:	str	r1, [r2, #-4]
   1314c:	bl	11a18 <exit@plt>
   13150:	ldr	r2, [pc, #1132]	; 135c4 <next@@Base+0xca8>
   13154:	mov	r0, #1
   13158:	ldr	r3, [r2]
   1315c:	ldr	r1, [r2, #4]
   13160:	adds	r3, r3, r0
   13164:	adc	r1, r1, #0
   13168:	str	r3, [r2]
   1316c:	str	r1, [r2, #4]
   13170:	bl	11a18 <exit@plt>
   13174:	cmp	r7, #33	; 0x21
   13178:	beq	134c0 <next@@Base+0xba4>
   1317c:	and	r3, r7, #253	; 0xfd
   13180:	cmp	r3, #60	; 0x3c
   13184:	beq	13400 <next@@Base+0xae4>
   13188:	cmp	r7, #61	; 0x3d
   1318c:	beq	133ac <next@@Base+0xa90>
   13190:	cmp	r7, #124	; 0x7c
   13194:	ldr	r5, [pc, #1068]	; 135c8 <next@@Base+0xcac>
   13198:	beq	13344 <next@@Base+0xa28>
   1319c:	ldr	r3, [r5]
   131a0:	ldr	r2, [r5, #4]
   131a4:	adds	r3, r3, #1
   131a8:	adc	r2, r2, #0
   131ac:	cmp	r7, #38	; 0x26
   131b0:	str	r3, [r5]
   131b4:	str	r2, [r5, #4]
   131b8:	bne	13314 <next@@Base+0x9f8>
   131bc:	add	r8, r5, #32
   131c0:	add	r2, r1, #1
   131c4:	ldr	r3, [r8, #-8]
   131c8:	strb	r7, [sp]
   131cc:	mov	r0, #8
   131d0:	str	r2, [r4, #8]
   131d4:	ldr	r2, [r8, #-4]
   131d8:	ldrb	r4, [ip, r1]
   131dc:	adds	r3, r3, #1
   131e0:	str	r3, [r8, #-8]
   131e4:	adc	r2, r2, #0
   131e8:	str	r2, [r8, #-4]
   131ec:	bl	119e8 <malloc@plt>
   131f0:	cmp	r4, #38	; 0x26
   131f4:	mov	r6, r0
   131f8:	bne	132f4 <next@@Base+0x9d8>
   131fc:	mov	r0, #3
   13200:	bl	119e8 <malloc@plt>
   13204:	mov	r3, r0
   13208:	mov	r2, #0
   1320c:	movw	r0, #9766	; 0x2626
   13210:	mov	r1, r3
   13214:	strh	r0, [r3]
   13218:	mov	r0, r6
   1321c:	strb	r2, [r3, #2]
   13220:	bl	12420 <init_token_boolean_op@@Base>
   13224:	ldr	r3, [r5, #40]	; 0x28
   13228:	ldr	r2, [r5, #44]	; 0x2c
   1322c:	adds	r3, r3, #1
   13230:	adc	r2, r2, #0
   13234:	str	r3, [r5, #40]	; 0x28
   13238:	str	r2, [r5, #44]	; 0x2c
   1323c:	b	12a3c <next@@Base+0x120>
   13240:	add	r5, r5, #16
   13244:	ldr	r3, [r5, #-8]
   13248:	mov	r0, #1
   1324c:	ldr	r2, [r5, #-4]
   13250:	adds	r3, r3, r0
   13254:	adc	r2, r2, #0
   13258:	str	r3, [r5, #-8]
   1325c:	str	r2, [r5, #-4]
   13260:	bl	11a18 <exit@plt>
   13264:	ldr	r2, [pc, #864]	; 135cc <next@@Base+0xcb0>
   13268:	b	13154 <next@@Base+0x838>
   1326c:	ldr	r3, [r5]
   13270:	mov	r0, #1
   13274:	ldr	r2, [r5, #4]
   13278:	adds	r3, r3, r0
   1327c:	adc	r2, r2, #0
   13280:	str	r3, [r5]
   13284:	str	r2, [r5, #4]
   13288:	bl	11a18 <exit@plt>
   1328c:	ldr	r2, [pc, #792]	; 135ac <next@@Base+0xc90>
   13290:	b	13130 <next@@Base+0x814>
   13294:	ldr	ip, [r5, #56]	; 0x38
   13298:	mov	r1, #1
   1329c:	movw	r3, #39584	; 0x9aa0
   132a0:	movt	r3, #2
   132a4:	mov	r2, #32
   132a8:	ldr	lr, [r5, #60]	; 0x3c
   132ac:	movw	r0, #34652	; 0x875c
   132b0:	movt	r0, #1
   132b4:	ldr	r3, [r3]
   132b8:	adds	ip, ip, r1
   132bc:	adc	lr, lr, #0
   132c0:	str	ip, [r5, #56]	; 0x38
   132c4:	str	lr, [r5, #60]	; 0x3c
   132c8:	bl	119ac <fwrite@plt>
   132cc:	ldr	r3, [r5, #64]	; 0x40
   132d0:	mov	r0, #1
   132d4:	ldr	r2, [r5, #68]	; 0x44
   132d8:	adds	r3, r3, r0
   132dc:	adc	r2, r2, #0
   132e0:	str	r3, [r5, #64]	; 0x40
   132e4:	str	r2, [r5, #68]	; 0x44
   132e8:	bl	11a18 <exit@plt>
   132ec:	ldr	r2, [pc, #732]	; 135d0 <next@@Base+0xcb4>
   132f0:	b	13154 <next@@Base+0x838>
   132f4:	ldr	r3, [r8]
   132f8:	mov	r0, #1
   132fc:	ldr	r2, [r8, #4]
   13300:	adds	r3, r3, r0
   13304:	adc	r2, r2, #0
   13308:	str	r3, [r8]
   1330c:	str	r2, [r8, #4]
   13310:	bl	11a18 <exit@plt>
   13314:	movw	r3, #39584	; 0x9aa0
   13318:	movt	r3, #2
   1331c:	mov	r2, r7
   13320:	movw	r1, #34688	; 0x8780
   13324:	movt	r1, #1
   13328:	ldr	r0, [r3]
   1332c:	bl	11a3c <fprintf@plt>
   13330:	ldrd	r6, [r5, #48]!	; 0x30
   13334:	mov	r0, #1
   13338:	mov	r3, r6
   1333c:	mov	r2, r7
   13340:	b	13278 <next@@Base+0x95c>
   13344:	add	r3, r1, #1
   13348:	ldr	r2, [r5, #-4]
   1334c:	mov	r0, #8
   13350:	strb	r7, [sp]
   13354:	str	r3, [r4, #8]
   13358:	ldr	r3, [r5, #-8]
   1335c:	ldrb	r4, [ip, r1]
   13360:	adds	r3, r3, #1
   13364:	adc	r2, r2, #0
   13368:	str	r3, [r5, #-8]
   1336c:	str	r2, [r5, #-4]
   13370:	bl	119e8 <malloc@plt>
   13374:	cmp	r4, #124	; 0x7c
   13378:	mov	r6, r0
   1337c:	bne	13240 <next@@Base+0x924>
   13380:	mov	r0, #3
   13384:	bl	119e8 <malloc@plt>
   13388:	mov	r3, r0
   1338c:	movw	r0, #31868	; 0x7c7c
   13390:	mov	r2, #0
   13394:	mov	r1, r3
   13398:	strh	r0, [r3]
   1339c:	mov	r0, r6
   133a0:	strb	r2, [r3, #2]
   133a4:	bl	12420 <init_token_boolean_op@@Base>
   133a8:	b	12dd0 <next@@Base+0x4b4>
   133ac:	ldr	r5, [pc, #544]	; 135d4 <next@@Base+0xcb8>
   133b0:	add	r3, r1, #1
   133b4:	mov	r0, #8
   133b8:	strb	r7, [sp]
   133bc:	str	r3, [r4, #8]
   133c0:	ldrb	r4, [ip, r1]
   133c4:	ldr	r3, [r5]
   133c8:	ldr	r2, [r5, #4]
   133cc:	adds	r3, r3, #1
   133d0:	adc	r2, r2, #0
   133d4:	str	r3, [r5]
   133d8:	str	r2, [r5, #4]
   133dc:	bl	119e8 <malloc@plt>
   133e0:	cmp	r4, #61	; 0x3d
   133e4:	mov	r6, r0
   133e8:	bne	13240 <next@@Base+0x924>
   133ec:	mov	r0, #3
   133f0:	bl	119e8 <malloc@plt>
   133f4:	mov	r3, r0
   133f8:	movw	r0, #15677	; 0x3d3d
   133fc:	b	13390 <next@@Base+0xa74>
   13400:	ldr	r5, [pc, #464]	; 135d8 <next@@Base+0xcbc>
   13404:	add	r3, r1, #1
   13408:	mov	r0, #8
   1340c:	strb	r7, [sp]
   13410:	str	r3, [r4, #8]
   13414:	ldrb	r8, [ip, r1]
   13418:	ldr	r3, [r5]
   1341c:	ldr	r2, [r5, #4]
   13420:	adds	r3, r3, #1
   13424:	adc	r2, r2, #0
   13428:	str	r3, [r5]
   1342c:	str	r2, [r5, #4]
   13430:	bl	119e8 <malloc@plt>
   13434:	cmp	r8, #61	; 0x3d
   13438:	mov	r6, r0
   1343c:	beq	13568 <next@@Base+0xc4c>
   13440:	ldr	r3, [r5, #8]
   13444:	mov	r1, #1
   13448:	mov	r0, r4
   1344c:	ldr	r2, [r5, #12]
   13450:	adds	r3, r3, r1
   13454:	adc	r2, r2, #0
   13458:	str	r3, [r5, #8]
   1345c:	str	r2, [r5, #12]
   13460:	bl	127ac <push_back_chars@@Base>
   13464:	ldr	r3, [r5, #16]
   13468:	mov	r0, #2
   1346c:	ldr	r2, [r5, #20]
   13470:	adds	r3, r3, #1
   13474:	adc	r2, r2, #0
   13478:	str	r3, [r5, #16]
   1347c:	str	r2, [r5, #20]
   13480:	bl	119e8 <malloc@plt>
   13484:	ldrb	r3, [sp]
   13488:	mov	r2, #0
   1348c:	strb	r3, [r0]
   13490:	strb	r2, [r0, #1]
   13494:	mov	r1, r0
   13498:	mov	r0, r6
   1349c:	bl	12420 <init_token_boolean_op@@Base>
   134a0:	ldr	r2, [pc, #300]	; 135d4 <next@@Base+0xcb8>
   134a4:	ldr	r3, [r2, #-8]
   134a8:	ldr	r1, [r2, #-4]
   134ac:	adds	r3, r3, #1
   134b0:	adc	r1, r1, #0
   134b4:	str	r3, [r2, #-8]
   134b8:	str	r1, [r2, #-4]
   134bc:	b	12a3c <next@@Base+0x120>
   134c0:	ldr	r5, [pc, #276]	; 135dc <next@@Base+0xcc0>
   134c4:	add	r3, r1, #1
   134c8:	mov	r0, #8
   134cc:	strb	r7, [sp]
   134d0:	str	r3, [r4, #8]
   134d4:	ldrb	r7, [ip, r1]
   134d8:	ldr	r3, [r5]
   134dc:	ldr	r2, [r5, #4]
   134e0:	adds	r3, r3, #1
   134e4:	adc	r2, r2, #0
   134e8:	str	r3, [r5]
   134ec:	str	r2, [r5, #4]
   134f0:	bl	119e8 <malloc@plt>
   134f4:	cmp	r7, #61	; 0x3d
   134f8:	mov	r6, r0
   134fc:	beq	13584 <next@@Base+0xc68>
   13500:	ldr	r3, [r5, #8]
   13504:	mov	r1, #1
   13508:	mov	r0, r4
   1350c:	ldr	r2, [r5, #12]
   13510:	adds	r3, r3, r1
   13514:	adc	r2, r2, #0
   13518:	str	r3, [r5, #8]
   1351c:	str	r2, [r5, #12]
   13520:	bl	127ac <push_back_chars@@Base>
   13524:	ldr	r3, [r5, #16]
   13528:	mov	r0, #2
   1352c:	ldr	r2, [r5, #20]
   13530:	adds	r3, r3, #1
   13534:	adc	r2, r2, #0
   13538:	str	r3, [r5, #16]
   1353c:	str	r2, [r5, #20]
   13540:	bl	119e8 <malloc@plt>
   13544:	ldrb	r3, [sp]
   13548:	mov	r2, #0
   1354c:	strb	r3, [r0]
   13550:	strb	r2, [r0, #1]
   13554:	mov	r1, r0
   13558:	mov	r0, r6
   1355c:	bl	12420 <init_token_boolean_op@@Base>
   13560:	ldr	r2, [pc, #112]	; 135d8 <next@@Base+0xcbc>
   13564:	b	134a4 <next@@Base+0xb88>
   13568:	mov	r0, #3
   1356c:	bl	119e8 <malloc@plt>
   13570:	mov	r3, #0
   13574:	strb	r7, [r0]
   13578:	strb	r8, [r0, #1]
   1357c:	strb	r3, [r0, #2]
   13580:	b	13494 <next@@Base+0xb78>
   13584:	mov	r0, #3
   13588:	bl	119e8 <malloc@plt>
   1358c:	movw	r2, #15649	; 0x3d21
   13590:	mov	r3, #0
   13594:	strh	r2, [r0]
   13598:	strb	r3, [r0, #2]
   1359c:	b	13554 <next@@Base+0xc38>
   135a0:	andeq	r9, r2, r8, lsl #30
   135a4:	andeq	r9, r2, r8, lsr #28
   135a8:	andeq	r9, r2, r8, lsr lr
   135ac:	andeq	r9, r2, r8, lsr #29
   135b0:			; <UNDEFINED> instruction: 0x00029eb8
   135b4:	andeq	r9, r2, r8, asr #29
   135b8:	andeq	r9, r2, r8, ror #29
   135bc:	andeq	r9, r2, r8, asr lr
   135c0:	andeq	r9, r2, r8, lsl #29
   135c4:	ldrdeq	r9, [r2], -r8
   135c8:	andeq	r9, r2, r8, ror #27
   135cc:	andeq	r9, r2, r8, asr #28
   135d0:	andeq	r9, r2, r8, ror lr
   135d4:	andeq	r9, r2, r8, asr #27
   135d8:	andeq	r9, r2, r8, lsr #27
   135dc:	andeq	r9, r2, r8, lsl #27

000135e0 <init_ast_base@@Base>:
   135e0:	movw	r3, #40720	; 0x9f10
   135e4:	movt	r3, #2
   135e8:	push	{lr}		; (str lr, [sp, #-4]!)
   135ec:	ldm	r3, {ip, lr}
   135f0:	stm	r0, {r1, r2}
   135f4:	adds	ip, ip, #1
   135f8:	adc	lr, lr, #0
   135fc:	stm	r3, {ip, lr}
   13600:	pop	{pc}		; (ldr pc, [sp], #4)

00013604 <init_ast_base_single@@Base>:
   13604:	movw	r3, #40720	; 0x9f10
   13608:	movt	r3, #2
   1360c:	push	{lr}		; (str lr, [sp, #-4]!)
   13610:	ldr	r2, [r3, #8]
   13614:	mov	lr, #0
   13618:	ldr	ip, [r3, #12]
   1361c:	stm	r0, {r1, lr}
   13620:	adds	r2, r2, #1
   13624:	adc	ip, ip, lr
   13628:	str	r2, [r3, #8]
   1362c:	str	ip, [r3, #12]
   13630:	pop	{pc}		; (ldr pc, [sp], #4)

00013634 <init_node_id@@Base>:
   13634:	movw	r3, #40720	; 0x9f10
   13638:	movt	r3, #2
   1363c:	push	{lr}		; (str lr, [sp, #-4]!)
   13640:	ldr	r2, [r3, #16]
   13644:	mov	lr, #0
   13648:	ldr	ip, [r3, #20]
   1364c:	str	lr, [r0]
   13650:	str	lr, [r0, #4]
   13654:	adds	r2, r2, #1
   13658:	str	r1, [r0, #8]
   1365c:	adc	ip, ip, lr
   13660:	str	r2, [r3, #16]
   13664:	str	ip, [r3, #20]
   13668:	pop	{pc}		; (ldr pc, [sp], #4)

0001366c <init_node_int@@Base>:
   1366c:	movw	r3, #40720	; 0x9f10
   13670:	movt	r3, #2
   13674:	str	r4, [sp, #-8]!
   13678:	ldr	r2, [r3, #24]
   1367c:	mov	r4, #1
   13680:	ldr	ip, [r3, #28]
   13684:	str	lr, [sp, #4]
   13688:	mov	lr, #0
   1368c:	str	r4, [r0]
   13690:	adds	r2, r2, r4
   13694:	ldr	r4, [sp]
   13698:	add	sp, sp, #4
   1369c:	str	lr, [r0, #4]
   136a0:	adc	ip, ip, lr
   136a4:	str	r1, [r0, #8]
   136a8:	str	r2, [r3, #24]
   136ac:	str	ip, [r3, #28]
   136b0:	pop	{pc}		; (ldr pc, [sp], #4)

000136b4 <init_node_function@@Base>:
   136b4:	movw	r3, #40720	; 0x9f10
   136b8:	movt	r3, #2
   136bc:	strd	r4, [sp, #-12]!
   136c0:	ldr	ip, [r3, #32]
   136c4:	mov	r4, #0
   136c8:	mov	r5, #2
   136cc:	str	lr, [sp, #8]
   136d0:	ldr	lr, [r3, #36]	; 0x24
   136d4:	str	r5, [r0]
   136d8:	str	r4, [r0, #4]
   136dc:	adds	ip, ip, #1
   136e0:	str	r1, [r0, #8]
   136e4:	str	r2, [r0, #12]
   136e8:	adc	lr, lr, r4
   136ec:	ldrd	r4, [sp]
   136f0:	add	sp, sp, #8
   136f4:	str	ip, [r3, #32]
   136f8:	str	lr, [r3, #36]	; 0x24
   136fc:	pop	{pc}		; (ldr pc, [sp], #4)

00013700 <init_node_return@@Base>:
   13700:	movw	r3, #40720	; 0x9f10
   13704:	movt	r3, #2
   13708:	str	r4, [sp, #-8]!
   1370c:	ldr	r2, [r3, #40]	; 0x28
   13710:	mov	r4, #3
   13714:	ldr	ip, [r3, #44]	; 0x2c
   13718:	str	lr, [sp, #4]
   1371c:	mov	lr, #0
   13720:	str	r4, [r0]
   13724:	adds	r2, r2, #1
   13728:	ldr	r4, [sp]
   1372c:	add	sp, sp, #4
   13730:	str	lr, [r0, #4]
   13734:	adc	ip, ip, lr
   13738:	str	r1, [r0, #8]
   1373c:	str	r2, [r3, #40]	; 0x28
   13740:	str	ip, [r3, #44]	; 0x2c
   13744:	pop	{pc}		; (ldr pc, [sp], #4)

00013748 <init_node_if@@Base>:
   13748:	movw	ip, #40720	; 0x9f10
   1374c:	movt	ip, #2
   13750:	strd	r4, [sp, #-16]!
   13754:	ldr	r4, [ip, #52]	; 0x34
   13758:	mov	r5, #0
   1375c:	str	lr, [sp, #12]
   13760:	ldr	lr, [ip, #48]	; 0x30
   13764:	str	r6, [sp, #8]
   13768:	mov	r6, #4
   1376c:	str	r6, [r0]
   13770:	str	r5, [r0, #4]
   13774:	adds	lr, lr, #1
   13778:	ldr	r6, [sp, #8]
   1377c:	adc	r4, r4, r5
   13780:	str	r1, [r0, #8]
   13784:	strd	r2, [r0, #12]
   13788:	str	lr, [ip, #48]	; 0x30
   1378c:	str	r4, [ip, #52]	; 0x34
   13790:	ldrd	r4, [sp]
   13794:	add	sp, sp, #12
   13798:	pop	{pc}		; (ldr pc, [sp], #4)

0001379c <init_node_boolean_operator@@Base>:
   1379c:	movw	ip, #40720	; 0x9f10
   137a0:	movt	ip, #2
   137a4:	strd	r4, [sp, #-16]!
   137a8:	ldr	r4, [ip, #60]	; 0x3c
   137ac:	mov	r5, #0
   137b0:	str	lr, [sp, #12]
   137b4:	ldr	lr, [ip, #56]	; 0x38
   137b8:	str	r6, [sp, #8]
   137bc:	mov	r6, #5
   137c0:	str	r6, [r0]
   137c4:	str	r5, [r0, #4]
   137c8:	adds	lr, lr, #1
   137cc:	ldr	r6, [sp, #8]
   137d0:	adc	r4, r4, r5
   137d4:	strd	r2, [r0, #8]
   137d8:	str	r1, [r0, #16]
   137dc:	str	lr, [ip, #56]	; 0x38
   137e0:	str	r4, [ip, #60]	; 0x3c
   137e4:	ldrd	r4, [sp]
   137e8:	add	sp, sp, #12
   137ec:	pop	{pc}		; (ldr pc, [sp], #4)

000137f0 <free_node_boolean_operator@@Base>:
   137f0:	strd	r4, [sp, #-16]!
   137f4:	mov	r5, r0
   137f8:	movw	r4, #40720	; 0x9f10
   137fc:	movt	r4, #2
   13800:	ldr	r0, [r0, #4]
   13804:	str	r6, [sp, #8]
   13808:	str	lr, [sp, #12]
   1380c:	cmp	r0, #0
   13810:	beq	138a0 <free_node_boolean_operator@@Base+0xb0>
   13814:	ldr	r3, [r4, #64]	; 0x40
   13818:	ldr	r2, [r4, #68]	; 0x44
   1381c:	adds	r3, r3, #1
   13820:	adc	r2, r2, #0
   13824:	str	r3, [r4, #64]	; 0x40
   13828:	str	r2, [r4, #68]	; 0x44
   1382c:	bl	138bc <free_node@@Base>
   13830:	ldr	r3, [r4, #80]	; 0x50
   13834:	ldr	r2, [r4, #84]	; 0x54
   13838:	adds	r3, r3, #1
   1383c:	adc	r2, r2, #0
   13840:	str	r3, [r4, #80]	; 0x50
   13844:	str	r2, [r4, #84]	; 0x54
   13848:	ldr	r0, [r5, #8]
   1384c:	bl	138bc <free_node@@Base>
   13850:	ldr	r3, [r4, #88]	; 0x58
   13854:	ldr	r2, [r4, #92]	; 0x5c
   13858:	ldr	r0, [r5, #12]
   1385c:	adds	r3, r3, #1
   13860:	adc	r2, r2, #0
   13864:	str	r3, [r4, #88]	; 0x58
   13868:	str	r2, [r4, #92]	; 0x5c
   1386c:	bl	138bc <free_node@@Base>
   13870:	ldr	r3, [r4, #96]	; 0x60
   13874:	mov	r0, r5
   13878:	ldr	r2, [r4, #100]	; 0x64
   1387c:	ldr	r6, [sp, #8]
   13880:	adds	r3, r3, #1
   13884:	ldr	lr, [sp, #12]
   13888:	adc	r2, r2, #0
   1388c:	str	r3, [r4, #96]	; 0x60
   13890:	str	r2, [r4, #100]	; 0x64
   13894:	ldrd	r4, [sp]
   13898:	add	sp, sp, #16
   1389c:	b	11988 <free@plt>
   138a0:	ldr	r3, [r4, #72]	; 0x48
   138a4:	ldr	r2, [r4, #76]	; 0x4c
   138a8:	adds	r3, r3, #1
   138ac:	adc	r2, r2, #0
   138b0:	str	r3, [r4, #72]	; 0x48
   138b4:	str	r2, [r4, #76]	; 0x4c
   138b8:	b	13848 <free_node_boolean_operator@@Base+0x58>

000138bc <free_node@@Base>:
   138bc:	ldr	r3, [r0]
   138c0:	strd	r4, [sp, #-16]!
   138c4:	movw	r4, #40720	; 0x9f10
   138c8:	movt	r4, #2
   138cc:	mov	r5, r0
   138d0:	str	r6, [sp, #8]
   138d4:	str	lr, [sp, #12]
   138d8:	cmp	r3, #5
   138dc:	ldrls	pc, [pc, r3, lsl #2]
   138e0:	b	13c1c <free_node@@Base+0x360>
   138e4:	andeq	r3, r1, r0, asr #18
   138e8:	andeq	r3, r1, r8, asr #19
   138ec:	ldrdeq	r3, [r1], -r8
   138f0:	andeq	r3, r1, r0, asr sl
   138f4:	andeq	r3, r1, r8, ror #22
   138f8:	strdeq	r3, [r1], -ip
   138fc:	ldr	r3, [r4, #152]	; 0x98
   13900:	ldr	r2, [r4, #156]	; 0x9c
   13904:	adds	r3, r3, #1
   13908:	adc	r2, r2, #0
   1390c:	str	r3, [r4, #152]	; 0x98
   13910:	str	r2, [r4, #156]	; 0x9c
   13914:	bl	137f0 <free_node_boolean_operator@@Base>
   13918:	ldr	r3, [r4, #200]	; 0xc8
   1391c:	ldr	r2, [r4, #204]	; 0xcc
   13920:	ldr	r6, [sp, #8]
   13924:	adds	r3, r3, #1
   13928:	adc	r2, r2, #0
   1392c:	str	r3, [r4, #200]	; 0xc8
   13930:	str	r2, [r4, #204]	; 0xcc
   13934:	ldrd	r4, [sp]
   13938:	add	sp, sp, #12
   1393c:	pop	{pc}		; (ldr pc, [sp], #4)
   13940:	ldr	r3, [r4, #112]	; 0x70
   13944:	ldr	r2, [r4, #116]	; 0x74
   13948:	ldr	r0, [r0, #4]
   1394c:	adds	r3, r3, #1
   13950:	adc	r2, r2, #0
   13954:	str	r3, [r4, #112]	; 0x70
   13958:	cmp	r0, #0
   1395c:	str	r2, [r4, #116]	; 0x74
   13960:	beq	13bac <free_node@@Base+0x2f0>
   13964:	ldr	r3, [r4, #216]	; 0xd8
   13968:	ldr	r2, [r4, #220]	; 0xdc
   1396c:	adds	r3, r3, #1
   13970:	adc	r2, r2, #0
   13974:	str	r3, [r4, #216]	; 0xd8
   13978:	str	r2, [r4, #220]	; 0xdc
   1397c:	bl	138bc <free_node@@Base>
   13980:	ldr	r3, [r4, #232]	; 0xe8
   13984:	ldr	r2, [r4, #236]	; 0xec
   13988:	adds	r3, r3, #1
   1398c:	adc	r2, r2, #0
   13990:	str	r3, [r4, #232]	; 0xe8
   13994:	str	r2, [r4, #236]	; 0xec
   13998:	mov	r0, r5
   1399c:	bl	11988 <free@plt>
   139a0:	ldr	r3, [r4, #160]	; 0xa0
   139a4:	ldr	r2, [r4, #164]	; 0xa4
   139a8:	ldr	r6, [sp, #8]
   139ac:	adds	r3, r3, #1
   139b0:	adc	r2, r2, #0
   139b4:	str	r3, [r4, #160]	; 0xa0
   139b8:	str	r2, [r4, #164]	; 0xa4
   139bc:	ldrd	r4, [sp]
   139c0:	add	sp, sp, #12
   139c4:	pop	{pc}		; (ldr pc, [sp], #4)
   139c8:	ldr	r3, [r4, #120]	; 0x78
   139cc:	ldr	r2, [r4, #124]	; 0x7c
   139d0:	ldr	r0, [r0, #4]
   139d4:	adds	r3, r3, #1
   139d8:	adc	r2, r2, #0
   139dc:	str	r3, [r4, #120]	; 0x78
   139e0:	cmp	r0, #0
   139e4:	str	r2, [r4, #124]	; 0x7c
   139e8:	beq	13be4 <free_node@@Base+0x328>
   139ec:	ldr	r3, [r4, #240]	; 0xf0
   139f0:	ldr	r2, [r4, #244]	; 0xf4
   139f4:	adds	r3, r3, #1
   139f8:	adc	r2, r2, #0
   139fc:	str	r3, [r4, #240]	; 0xf0
   13a00:	str	r2, [r4, #244]	; 0xf4
   13a04:	bl	138bc <free_node@@Base>
   13a08:	ldr	r3, [r4, #256]	; 0x100
   13a0c:	ldr	r1, [r4, #260]	; 0x104
   13a10:	adds	r3, r3, #1
   13a14:	adc	r1, r1, #0
   13a18:	str	r3, [r4, #256]	; 0x100
   13a1c:	str	r1, [r4, #260]	; 0x104
   13a20:	mov	r0, r5
   13a24:	bl	11988 <free@plt>
   13a28:	ldr	r3, [r4, #168]	; 0xa8
   13a2c:	ldr	r2, [r4, #172]	; 0xac
   13a30:	ldr	r6, [sp, #8]
   13a34:	adds	r3, r3, #1
   13a38:	adc	r2, r2, #0
   13a3c:	str	r3, [r4, #168]	; 0xa8
   13a40:	str	r2, [r4, #172]	; 0xac
   13a44:	ldrd	r4, [sp]
   13a48:	add	sp, sp, #12
   13a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a50:	ldr	r3, [r4, #136]	; 0x88
   13a54:	ldr	r2, [r4, #140]	; 0x8c
   13a58:	ldr	r0, [r0, #4]
   13a5c:	adds	r3, r3, #1
   13a60:	adc	r2, r2, #0
   13a64:	str	r3, [r4, #136]	; 0x88
   13a68:	cmp	r0, #0
   13a6c:	str	r2, [r4, #140]	; 0x8c
   13a70:	beq	13bc8 <free_node@@Base+0x30c>
   13a74:	ldr	r3, [r4, #288]	; 0x120
   13a78:	ldr	r2, [r4, #292]	; 0x124
   13a7c:	adds	r3, r3, #1
   13a80:	adc	r2, r2, #0
   13a84:	str	r3, [r4, #288]	; 0x120
   13a88:	str	r2, [r4, #292]	; 0x124
   13a8c:	bl	138bc <free_node@@Base>
   13a90:	ldr	r3, [r4, #304]	; 0x130
   13a94:	ldr	r2, [r4, #308]	; 0x134
   13a98:	adds	r3, r3, #1
   13a9c:	adc	r2, r2, #0
   13aa0:	str	r3, [r4, #304]	; 0x130
   13aa4:	str	r2, [r4, #308]	; 0x134
   13aa8:	mov	r0, r5
   13aac:	bl	11988 <free@plt>
   13ab0:	ldr	r3, [r4, #184]	; 0xb8
   13ab4:	ldr	r2, [r4, #188]	; 0xbc
   13ab8:	ldr	r6, [sp, #8]
   13abc:	adds	r3, r3, #1
   13ac0:	adc	r2, r2, #0
   13ac4:	str	r3, [r4, #184]	; 0xb8
   13ac8:	str	r2, [r4, #188]	; 0xbc
   13acc:	ldrd	r4, [sp]
   13ad0:	add	sp, sp, #12
   13ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ad8:	ldr	r3, [r4, #128]	; 0x80
   13adc:	ldr	r2, [r4, #132]	; 0x84
   13ae0:	ldr	r0, [r0, #4]
   13ae4:	adds	r3, r3, #1
   13ae8:	adc	r2, r2, #0
   13aec:	str	r3, [r4, #128]	; 0x80
   13af0:	cmp	r0, #0
   13af4:	str	r2, [r4, #132]	; 0x84
   13af8:	beq	13c00 <free_node@@Base+0x344>
   13afc:	ldr	r3, [r4, #264]	; 0x108
   13b00:	ldr	r2, [r4, #268]	; 0x10c
   13b04:	adds	r3, r3, #1
   13b08:	adc	r2, r2, #0
   13b0c:	str	r3, [r4, #264]	; 0x108
   13b10:	str	r2, [r4, #268]	; 0x10c
   13b14:	bl	138bc <free_node@@Base>
   13b18:	ldr	r3, [r4, #280]	; 0x118
   13b1c:	ldr	r2, [r4, #284]	; 0x11c
   13b20:	adds	r3, r3, #1
   13b24:	adc	r2, r2, #0
   13b28:	str	r3, [r4, #280]	; 0x118
   13b2c:	str	r2, [r4, #284]	; 0x11c
   13b30:	ldr	r0, [r5, #8]
   13b34:	bl	11988 <free@plt>
   13b38:	mov	r0, r5
   13b3c:	bl	11988 <free@plt>
   13b40:	ldr	r3, [r4, #176]	; 0xb0
   13b44:	ldr	r2, [r4, #180]	; 0xb4
   13b48:	ldr	r6, [sp, #8]
   13b4c:	adds	r3, r3, #1
   13b50:	adc	r2, r2, #0
   13b54:	str	r3, [r4, #176]	; 0xb0
   13b58:	str	r2, [r4, #180]	; 0xb4
   13b5c:	ldrd	r4, [sp]
   13b60:	add	sp, sp, #12
   13b64:	pop	{pc}		; (ldr pc, [sp], #4)
   13b68:	ldr	r3, [r4, #144]	; 0x90
   13b6c:	ldr	r2, [r4, #148]	; 0x94
   13b70:	adds	r3, r3, #1
   13b74:	adc	r2, r2, #0
   13b78:	str	r3, [r4, #144]	; 0x90
   13b7c:	str	r2, [r4, #148]	; 0x94
   13b80:	bl	13c74 <free_node_if@@Base>
   13b84:	ldr	r3, [r4, #192]	; 0xc0
   13b88:	ldr	r2, [r4, #196]	; 0xc4
   13b8c:	ldr	r6, [sp, #8]
   13b90:	adds	r3, r3, #1
   13b94:	adc	r2, r2, #0
   13b98:	str	r3, [r4, #192]	; 0xc0
   13b9c:	str	r2, [r4, #196]	; 0xc4
   13ba0:	ldrd	r4, [sp]
   13ba4:	add	sp, sp, #12
   13ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bac:	ldr	r3, [r4, #224]	; 0xe0
   13bb0:	ldr	r2, [r4, #228]	; 0xe4
   13bb4:	adds	r3, r3, #1
   13bb8:	adc	r2, r2, #0
   13bbc:	str	r3, [r4, #224]	; 0xe0
   13bc0:	str	r2, [r4, #228]	; 0xe4
   13bc4:	b	13998 <free_node@@Base+0xdc>
   13bc8:	ldr	r3, [r4, #296]	; 0x128
   13bcc:	ldr	r1, [r4, #300]	; 0x12c
   13bd0:	adds	r3, r3, #1
   13bd4:	adc	r1, r1, #0
   13bd8:	str	r3, [r4, #296]	; 0x128
   13bdc:	str	r1, [r4, #300]	; 0x12c
   13be0:	b	13aa8 <free_node@@Base+0x1ec>
   13be4:	ldr	r3, [r4, #248]	; 0xf8
   13be8:	ldr	r2, [r4, #252]	; 0xfc
   13bec:	adds	r3, r3, #1
   13bf0:	adc	r2, r2, #0
   13bf4:	str	r3, [r4, #248]	; 0xf8
   13bf8:	str	r2, [r4, #252]	; 0xfc
   13bfc:	b	13a20 <free_node@@Base+0x164>
   13c00:	ldr	r3, [r4, #272]	; 0x110
   13c04:	ldr	r1, [r4, #276]	; 0x114
   13c08:	adds	r3, r3, #1
   13c0c:	adc	r1, r1, #0
   13c10:	str	r3, [r4, #272]	; 0x110
   13c14:	str	r1, [r4, #276]	; 0x114
   13c18:	b	13b30 <free_node@@Base+0x274>
   13c1c:	ldr	ip, [r4, #104]	; 0x68
   13c20:	mov	r1, #1
   13c24:	movw	r3, #39584	; 0x9aa0
   13c28:	movt	r3, #2
   13c2c:	mov	r2, #31
   13c30:	ldr	lr, [r4, #108]	; 0x6c
   13c34:	movw	r0, #34808	; 0x87f8
   13c38:	movt	r0, #1
   13c3c:	ldr	r3, [r3]
   13c40:	adds	ip, ip, r1
   13c44:	adc	lr, lr, #0
   13c48:	str	ip, [r4, #104]	; 0x68
   13c4c:	str	lr, [r4, #108]	; 0x6c
   13c50:	bl	119ac <fwrite@plt>
   13c54:	ldr	r3, [r4, #208]	; 0xd0
   13c58:	mov	r0, #1
   13c5c:	ldr	r2, [r4, #212]	; 0xd4
   13c60:	adds	r3, r3, r0
   13c64:	adc	r2, r2, #0
   13c68:	str	r3, [r4, #208]	; 0xd0
   13c6c:	str	r2, [r4, #212]	; 0xd4
   13c70:	bl	11a18 <exit@plt>

00013c74 <free_node_if@@Base>:
   13c74:	strd	r4, [sp, #-16]!
   13c78:	mov	r5, r0
   13c7c:	ldr	r0, [r0, #4]
   13c80:	str	r6, [sp, #8]
   13c84:	ldr	r4, [pc, #208]	; 13d5c <free_node_if@@Base+0xe8>
   13c88:	str	lr, [sp, #12]
   13c8c:	cmp	r0, #0
   13c90:	beq	13d40 <free_node_if@@Base+0xcc>
   13c94:	ldr	r3, [r4, #-8]
   13c98:	ldr	r2, [r4, #-4]
   13c9c:	adds	r3, r3, #1
   13ca0:	adc	r2, r2, #0
   13ca4:	str	r3, [r4, #-8]
   13ca8:	str	r2, [r4, #-4]
   13cac:	bl	138bc <free_node@@Base>
   13cb0:	ldr	r3, [r4, #8]
   13cb4:	ldr	r2, [r4, #12]
   13cb8:	adds	r3, r3, #1
   13cbc:	adc	r2, r2, #0
   13cc0:	str	r3, [r4, #8]
   13cc4:	str	r2, [r4, #12]
   13cc8:	ldr	r0, [r5, #8]
   13ccc:	bl	138bc <free_node@@Base>
   13cd0:	ldr	r3, [r4, #16]
   13cd4:	ldr	r2, [r4, #20]
   13cd8:	ldr	r0, [r5, #12]
   13cdc:	adds	r3, r3, #1
   13ce0:	adc	r2, r2, #0
   13ce4:	str	r3, [r4, #16]
   13ce8:	str	r2, [r4, #20]
   13cec:	bl	138bc <free_node@@Base>
   13cf0:	ldr	r3, [r4, #24]
   13cf4:	ldr	r2, [r4, #28]
   13cf8:	ldr	r0, [r5, #16]
   13cfc:	adds	r3, r3, #1
   13d00:	adc	r2, r2, #0
   13d04:	str	r3, [r4, #24]
   13d08:	str	r2, [r4, #28]
   13d0c:	bl	138bc <free_node@@Base>
   13d10:	ldr	r3, [r4, #32]
   13d14:	mov	r0, r5
   13d18:	ldr	r2, [r4, #36]	; 0x24
   13d1c:	ldr	r6, [sp, #8]
   13d20:	adds	r3, r3, #1
   13d24:	ldr	lr, [sp, #12]
   13d28:	adc	r2, r2, #0
   13d2c:	str	r3, [r4, #32]
   13d30:	str	r2, [r4, #36]	; 0x24
   13d34:	ldrd	r4, [sp]
   13d38:	add	sp, sp, #16
   13d3c:	b	11988 <free@plt>
   13d40:	ldr	r3, [r4]
   13d44:	ldr	r2, [r4, #4]
   13d48:	adds	r3, r3, #1
   13d4c:	adc	r2, r2, #0
   13d50:	str	r3, [r4]
   13d54:	str	r2, [r4, #4]
   13d58:	b	13cc8 <free_node_if@@Base+0x54>
   13d5c:	andeq	sl, r2, r0, asr r0

00013d60 <free_node_return@@Base>:
   13d60:	strd	r4, [sp, #-16]!
   13d64:	mov	r5, r0
   13d68:	ldr	r0, [r0, #4]
   13d6c:	str	r6, [sp, #8]
   13d70:	str	lr, [sp, #12]
   13d74:	cmp	r0, #0
   13d78:	beq	13dcc <free_node_return@@Base+0x6c>
   13d7c:	ldr	r4, [pc, #104]	; 13dec <free_node_return@@Base+0x8c>
   13d80:	ldr	r3, [r4]
   13d84:	ldr	r2, [r4, #4]
   13d88:	adds	r3, r3, #1
   13d8c:	adc	r2, r2, #0
   13d90:	str	r3, [r4]
   13d94:	str	r2, [r4, #4]
   13d98:	bl	138bc <free_node@@Base>
   13d9c:	ldr	r3, [r4, #16]
   13da0:	ldr	r2, [r4, #20]
   13da4:	adds	r3, r3, #1
   13da8:	adc	r2, r2, #0
   13dac:	str	r3, [r4, #16]
   13db0:	str	r2, [r4, #20]
   13db4:	mov	r0, r5
   13db8:	ldrd	r4, [sp]
   13dbc:	ldr	r6, [sp, #8]
   13dc0:	ldr	lr, [sp, #12]
   13dc4:	add	sp, sp, #16
   13dc8:	b	11988 <free@plt>
   13dcc:	ldr	r2, [pc, #24]	; 13dec <free_node_return@@Base+0x8c>
   13dd0:	ldr	r3, [r2, #8]
   13dd4:	ldr	r1, [r2, #12]
   13dd8:	adds	r3, r3, #1
   13ddc:	adc	r1, r1, #0
   13de0:	str	r3, [r2, #8]
   13de4:	str	r1, [r2, #12]
   13de8:	b	13db4 <free_node_return@@Base+0x54>
   13dec:	andeq	sl, r2, r0, lsr r0

00013df0 <free_node_function@@Base>:
   13df0:	strd	r4, [sp, #-16]!
   13df4:	mov	r5, r0
   13df8:	ldr	r0, [r0, #4]
   13dfc:	str	r6, [sp, #8]
   13e00:	str	lr, [sp, #12]
   13e04:	cmp	r0, #0
   13e08:	beq	13e64 <free_node_function@@Base+0x74>
   13e0c:	ldr	r4, [pc, #112]	; 13e84 <free_node_function@@Base+0x94>
   13e10:	ldr	r3, [r4, #-8]
   13e14:	ldr	r2, [r4, #-4]
   13e18:	adds	r3, r3, #1
   13e1c:	adc	r2, r2, #0
   13e20:	str	r3, [r4, #-8]
   13e24:	str	r2, [r4, #-4]
   13e28:	bl	138bc <free_node@@Base>
   13e2c:	ldr	r3, [r4, #8]
   13e30:	ldr	r2, [r4, #12]
   13e34:	adds	r3, r3, #1
   13e38:	adc	r2, r2, #0
   13e3c:	str	r3, [r4, #8]
   13e40:	str	r2, [r4, #12]
   13e44:	ldr	r0, [r5, #8]
   13e48:	bl	11988 <free@plt>
   13e4c:	mov	r0, r5
   13e50:	ldrd	r4, [sp]
   13e54:	ldr	r6, [sp, #8]
   13e58:	ldr	lr, [sp, #12]
   13e5c:	add	sp, sp, #16
   13e60:	b	11988 <free@plt>
   13e64:	ldr	r2, [pc, #24]	; 13e84 <free_node_function@@Base+0x94>
   13e68:	ldr	r3, [r2]
   13e6c:	ldr	r1, [r2, #4]
   13e70:	adds	r3, r3, #1
   13e74:	adc	r1, r1, #0
   13e78:	str	r3, [r2]
   13e7c:	str	r1, [r2, #4]
   13e80:	b	13e44 <free_node_function@@Base+0x54>
   13e84:	andeq	sl, r2, r0, lsr #32

00013e88 <free_node_int@@Base>:
   13e88:	strd	r4, [sp, #-16]!
   13e8c:	mov	r5, r0
   13e90:	ldr	r0, [r0, #4]
   13e94:	str	r6, [sp, #8]
   13e98:	str	lr, [sp, #12]
   13e9c:	cmp	r0, #0
   13ea0:	beq	13ef8 <free_node_int@@Base+0x70>
   13ea4:	movw	r4, #40720	; 0x9f10
   13ea8:	movt	r4, #2
   13eac:	ldr	r3, [r4, #240]	; 0xf0
   13eb0:	ldr	r2, [r4, #244]	; 0xf4
   13eb4:	adds	r3, r3, #1
   13eb8:	adc	r2, r2, #0
   13ebc:	str	r3, [r4, #240]	; 0xf0
   13ec0:	str	r2, [r4, #244]	; 0xf4
   13ec4:	bl	138bc <free_node@@Base>
   13ec8:	ldr	r3, [r4, #256]	; 0x100
   13ecc:	ldr	r2, [r4, #260]	; 0x104
   13ed0:	adds	r3, r3, #1
   13ed4:	adc	r2, r2, #0
   13ed8:	str	r3, [r4, #256]	; 0x100
   13edc:	str	r2, [r4, #260]	; 0x104
   13ee0:	mov	r0, r5
   13ee4:	ldrd	r4, [sp]
   13ee8:	ldr	r6, [sp, #8]
   13eec:	ldr	lr, [sp, #12]
   13ef0:	add	sp, sp, #16
   13ef4:	b	11988 <free@plt>
   13ef8:	movw	r3, #40720	; 0x9f10
   13efc:	movt	r3, #2
   13f00:	ldr	r2, [r3, #248]	; 0xf8
   13f04:	ldr	r1, [r3, #252]	; 0xfc
   13f08:	adds	r2, r2, #1
   13f0c:	adc	r1, r1, #0
   13f10:	str	r2, [r3, #248]	; 0xf8
   13f14:	str	r1, [r3, #252]	; 0xfc
   13f18:	b	13ee0 <free_node_int@@Base+0x58>

00013f1c <free_node_id@@Base>:
   13f1c:	strd	r4, [sp, #-16]!
   13f20:	mov	r5, r0
   13f24:	ldr	r0, [r0, #4]
   13f28:	str	r6, [sp, #8]
   13f2c:	str	lr, [sp, #12]
   13f30:	cmp	r0, #0
   13f34:	beq	13f8c <free_node_id@@Base+0x70>
   13f38:	movw	r4, #40720	; 0x9f10
   13f3c:	movt	r4, #2
   13f40:	ldr	r3, [r4, #216]	; 0xd8
   13f44:	ldr	r2, [r4, #220]	; 0xdc
   13f48:	adds	r3, r3, #1
   13f4c:	adc	r2, r2, #0
   13f50:	str	r3, [r4, #216]	; 0xd8
   13f54:	str	r2, [r4, #220]	; 0xdc
   13f58:	bl	138bc <free_node@@Base>
   13f5c:	ldr	r3, [r4, #232]	; 0xe8
   13f60:	ldr	r2, [r4, #236]	; 0xec
   13f64:	adds	r3, r3, #1
   13f68:	adc	r2, r2, #0
   13f6c:	str	r3, [r4, #232]	; 0xe8
   13f70:	str	r2, [r4, #236]	; 0xec
   13f74:	mov	r0, r5
   13f78:	ldrd	r4, [sp]
   13f7c:	ldr	r6, [sp, #8]
   13f80:	ldr	lr, [sp, #12]
   13f84:	add	sp, sp, #16
   13f88:	b	11988 <free@plt>
   13f8c:	movw	r3, #40720	; 0x9f10
   13f90:	movt	r3, #2
   13f94:	ldr	r2, [r3, #224]	; 0xe0
   13f98:	ldr	r1, [r3, #228]	; 0xe4
   13f9c:	adds	r2, r2, #1
   13fa0:	adc	r1, r1, #0
   13fa4:	str	r2, [r3, #224]	; 0xe0
   13fa8:	str	r1, [r3, #228]	; 0xe4
   13fac:	b	13f74 <free_node_id@@Base+0x58>

00013fb0 <get_boolean_op_value@@Base>:
   13fb0:	strd	r4, [sp, #-16]!
   13fb4:	mov	r1, #2
   13fb8:	ldr	r5, [r0, #4]
   13fbc:	str	r6, [sp, #8]
   13fc0:	str	lr, [sp, #12]
   13fc4:	mov	r0, r5
   13fc8:	bl	11a90 <strnlen@plt>
   13fcc:	cmp	r0, #2
   13fd0:	beq	140c4 <get_boolean_op_value@@Base+0x114>
   13fd4:	ldrb	r3, [r5]
   13fd8:	cmp	r3, #60	; 0x3c
   13fdc:	beq	140a0 <get_boolean_op_value@@Base+0xf0>
   13fe0:	cmp	r3, #62	; 0x3e
   13fe4:	beq	1407c <get_boolean_op_value@@Base+0xcc>
   13fe8:	cmp	r3, #33	; 0x21
   13fec:	beq	14048 <get_boolean_op_value@@Base+0x98>
   13ff0:	ldr	r4, [pc, #668]	; 14294 <get_boolean_op_value@@Base+0x2e4>
   13ff4:	movw	r3, #39584	; 0x9aa0
   13ff8:	movt	r3, #2
   13ffc:	mov	r2, r5
   14000:	movw	r1, #34864	; 0x8830
   14004:	movt	r1, #1
   14008:	ldr	r0, [r3]
   1400c:	ldr	r3, [r4, #56]	; 0x38
   14010:	ldr	ip, [r4, #60]	; 0x3c
   14014:	adds	r3, r3, #1
   14018:	adc	ip, ip, #0
   1401c:	str	r3, [r4, #56]	; 0x38
   14020:	str	ip, [r4, #60]	; 0x3c
   14024:	bl	11a3c <fprintf@plt>
   14028:	ldr	r3, [r4, #88]	; 0x58
   1402c:	mov	r0, #1
   14030:	ldr	r2, [r4, #92]	; 0x5c
   14034:	adds	r3, r3, r0
   14038:	adc	r2, r2, #0
   1403c:	str	r3, [r4, #88]	; 0x58
   14040:	str	r2, [r4, #92]	; 0x5c
   14044:	bl	11a18 <exit@plt>
   14048:	ldr	r2, [pc, #580]	; 14294 <get_boolean_op_value@@Base+0x2e4>
   1404c:	mov	r4, #8
   14050:	ldr	r3, [r2, #64]	; 0x40
   14054:	ldr	r1, [r2, #68]	; 0x44
   14058:	adds	r3, r3, #1
   1405c:	adc	r1, r1, #0
   14060:	str	r3, [r2, #64]	; 0x40
   14064:	str	r1, [r2, #68]	; 0x44
   14068:	mov	r0, r4
   1406c:	ldrd	r4, [sp]
   14070:	ldr	r6, [sp, #8]
   14074:	add	sp, sp, #12
   14078:	pop	{pc}		; (ldr pc, [sp], #4)
   1407c:	ldr	r2, [pc, #528]	; 14294 <get_boolean_op_value@@Base+0x2e4>
   14080:	mov	r4, #7
   14084:	ldr	r3, [r2, #80]	; 0x50
   14088:	ldr	r1, [r2, #84]	; 0x54
   1408c:	adds	r3, r3, #1
   14090:	adc	r1, r1, #0
   14094:	str	r3, [r2, #80]	; 0x50
   14098:	str	r1, [r2, #84]	; 0x54
   1409c:	b	14068 <get_boolean_op_value@@Base+0xb8>
   140a0:	ldr	r2, [pc, #492]	; 14294 <get_boolean_op_value@@Base+0x2e4>
   140a4:	mov	r4, #6
   140a8:	ldr	r3, [r2, #72]	; 0x48
   140ac:	ldr	r1, [r2, #76]	; 0x4c
   140b0:	adds	r3, r3, #1
   140b4:	adc	r1, r1, #0
   140b8:	str	r3, [r2, #72]	; 0x48
   140bc:	str	r1, [r2, #76]	; 0x4c
   140c0:	b	14068 <get_boolean_op_value@@Base+0xb8>
   140c4:	mov	r2, r0
   140c8:	mov	r4, r0
   140cc:	movw	r1, #34840	; 0x8818
   140d0:	movt	r1, #1
   140d4:	mov	r0, r5
   140d8:	bl	11ae4 <strncmp@plt>
   140dc:	cmp	r0, #0
   140e0:	beq	14208 <get_boolean_op_value@@Base+0x258>
   140e4:	movw	r1, #34844	; 0x881c
   140e8:	movt	r1, #1
   140ec:	mov	r2, r4
   140f0:	mov	r0, r5
   140f4:	bl	11ae4 <strncmp@plt>
   140f8:	cmp	r0, #0
   140fc:	beq	141e4 <get_boolean_op_value@@Base+0x234>
   14100:	movw	r1, #34848	; 0x8820
   14104:	movt	r1, #1
   14108:	mov	r2, r4
   1410c:	mov	r0, r5
   14110:	bl	11ae4 <strncmp@plt>
   14114:	cmp	r0, #0
   14118:	beq	1422c <get_boolean_op_value@@Base+0x27c>
   1411c:	movw	r1, #34852	; 0x8824
   14120:	movt	r1, #1
   14124:	mov	r2, r4
   14128:	mov	r0, r5
   1412c:	bl	11ae4 <strncmp@plt>
   14130:	cmp	r0, #0
   14134:	beq	1424c <get_boolean_op_value@@Base+0x29c>
   14138:	movw	r1, #34856	; 0x8828
   1413c:	movt	r1, #1
   14140:	mov	r2, r4
   14144:	mov	r0, r5
   14148:	bl	11ae4 <strncmp@plt>
   1414c:	cmp	r0, #0
   14150:	beq	14270 <get_boolean_op_value@@Base+0x2c0>
   14154:	ldr	r6, [pc, #312]	; 14294 <get_boolean_op_value@@Base+0x2e4>
   14158:	mov	r2, r4
   1415c:	movw	r1, #34860	; 0x882c
   14160:	movt	r1, #1
   14164:	mov	r0, r5
   14168:	ldr	r3, [r6, #32]
   1416c:	ldr	ip, [r6, #36]	; 0x24
   14170:	adds	r3, r3, #1
   14174:	adc	ip, ip, #0
   14178:	str	r3, [r6, #32]
   1417c:	str	ip, [r6, #36]	; 0x24
   14180:	bl	11ae4 <strncmp@plt>
   14184:	cmp	r0, #0
   14188:	moveq	r4, #5
   1418c:	beq	14068 <get_boolean_op_value@@Base+0xb8>
   14190:	ldr	r3, [r6, #40]	; 0x28
   14194:	movw	r0, #39584	; 0x9aa0
   14198:	movt	r0, #2
   1419c:	mov	r2, r5
   141a0:	movw	r1, #34864	; 0x8830
   141a4:	movt	r1, #1
   141a8:	ldr	ip, [r6, #44]	; 0x2c
   141ac:	ldr	r0, [r0]
   141b0:	adds	r3, r3, #1
   141b4:	adc	ip, ip, #0
   141b8:	str	r3, [r6, #40]	; 0x28
   141bc:	str	ip, [r6, #44]	; 0x2c
   141c0:	bl	11a3c <fprintf@plt>
   141c4:	ldr	r3, [r6, #48]	; 0x30
   141c8:	mov	r0, #1
   141cc:	ldr	r2, [r6, #52]	; 0x34
   141d0:	adds	r3, r3, r0
   141d4:	adc	r2, r2, #0
   141d8:	str	r3, [r6, #48]	; 0x30
   141dc:	str	r2, [r6, #52]	; 0x34
   141e0:	bl	11a18 <exit@plt>
   141e4:	ldr	r2, [pc, #168]	; 14294 <get_boolean_op_value@@Base+0x2e4>
   141e8:	mov	r4, #1
   141ec:	ldr	r3, [r2]
   141f0:	ldr	r1, [r2, #4]
   141f4:	adds	r3, r3, r4
   141f8:	adc	r1, r1, #0
   141fc:	str	r3, [r2]
   14200:	str	r1, [r2, #4]
   14204:	b	14068 <get_boolean_op_value@@Base+0xb8>
   14208:	ldr	r2, [pc, #132]	; 14294 <get_boolean_op_value@@Base+0x2e4>
   1420c:	mov	r4, r0
   14210:	ldr	r3, [r2, #-8]
   14214:	ldr	r1, [r2, #-4]
   14218:	adds	r3, r3, #1
   1421c:	adc	r1, r1, #0
   14220:	str	r3, [r2, #-8]
   14224:	str	r1, [r2, #-4]
   14228:	b	14068 <get_boolean_op_value@@Base+0xb8>
   1422c:	ldr	r2, [pc, #96]	; 14294 <get_boolean_op_value@@Base+0x2e4>
   14230:	ldr	r3, [r2, #8]
   14234:	ldr	r1, [r2, #12]
   14238:	adds	r3, r3, #1
   1423c:	adc	r1, r1, #0
   14240:	str	r3, [r2, #8]
   14244:	str	r1, [r2, #12]
   14248:	b	14068 <get_boolean_op_value@@Base+0xb8>
   1424c:	ldr	r2, [pc, #64]	; 14294 <get_boolean_op_value@@Base+0x2e4>
   14250:	mov	r4, #3
   14254:	ldr	r3, [r2, #16]
   14258:	ldr	r1, [r2, #20]
   1425c:	adds	r3, r3, #1
   14260:	adc	r1, r1, #0
   14264:	str	r3, [r2, #16]
   14268:	str	r1, [r2, #20]
   1426c:	b	14068 <get_boolean_op_value@@Base+0xb8>
   14270:	ldr	r2, [pc, #28]	; 14294 <get_boolean_op_value@@Base+0x2e4>
   14274:	mov	r4, #4
   14278:	ldr	r3, [r2, #24]
   1427c:	ldr	r1, [r2, #28]
   14280:	adds	r3, r3, #1
   14284:	adc	r1, r1, #0
   14288:	str	r3, [r2, #24]
   1428c:	str	r1, [r2, #28]
   14290:	b	14068 <get_boolean_op_value@@Base+0xb8>
   14294:	andeq	sl, r2, r0, lsl #1

00014298 <init_grammar@@Base>:
   14298:	movw	r3, #41184	; 0xa0e0
   1429c:	movt	r3, #2
   142a0:	str	r1, [r0]
   142a4:	ldr	r2, [r3]
   142a8:	ldr	r1, [r3, #4]
   142ac:	adds	r2, r2, #1
   142b0:	adc	r1, r1, #0
   142b4:	str	r2, [r3]
   142b8:	str	r1, [r3, #4]
   142bc:	bx	lr

000142c0 <destroy_grammar@@Base>:
   142c0:	movw	r3, #41184	; 0xa0e0
   142c4:	movt	r3, #2
   142c8:	ldr	r2, [r3, #8]
   142cc:	ldr	r1, [r3, #12]
   142d0:	adds	r2, r2, #1
   142d4:	adc	r1, r1, #0
   142d8:	str	r2, [r3, #8]
   142dc:	str	r1, [r3, #12]
   142e0:	bx	lr

000142e4 <read_return_expression@@Base>:
   142e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   142e8:	movw	r4, #41184	; 0xa0e0
   142ec:	movt	r4, #2
   142f0:	ldr	r3, [r4, #16]
   142f4:	mov	r5, r0
   142f8:	ldr	r2, [r4, #20]
   142fc:	ldr	r0, [r0]
   14300:	adds	r3, r3, #1
   14304:	strd	r6, [sp, #8]
   14308:	str	r8, [sp, #16]
   1430c:	adc	r2, r2, #0
   14310:	str	r3, [r4, #16]
   14314:	str	lr, [sp, #20]
   14318:	str	r2, [r4, #20]
   1431c:	bl	1291c <next@@Base>
   14320:	ldr	r3, [r0]
   14324:	cmp	r3, #1
   14328:	bne	14440 <read_return_expression@@Base+0x15c>
   1432c:	ldr	r3, [r4, #32]
   14330:	mov	r6, r0
   14334:	mov	r0, #12
   14338:	ldr	r2, [r4, #36]	; 0x24
   1433c:	adds	r3, r3, #1
   14340:	adc	r2, r2, #0
   14344:	str	r3, [r4, #32]
   14348:	str	r2, [r4, #36]	; 0x24
   1434c:	bl	119e8 <malloc@plt>
   14350:	ldr	r1, [r6, #4]
   14354:	mov	r7, r0
   14358:	bl	1366c <init_node_int@@Base>
   1435c:	ldr	r3, [r4, #40]	; 0x28
   14360:	mov	r0, r6
   14364:	ldr	r2, [r4, #44]	; 0x2c
   14368:	adds	r3, r3, #1
   1436c:	adc	r2, r2, #0
   14370:	str	r3, [r4, #40]	; 0x28
   14374:	str	r2, [r4, #44]	; 0x2c
   14378:	bl	12478 <free_token_int_value@@Base>
   1437c:	ldr	r3, [r4, #48]	; 0x30
   14380:	mov	r0, #12
   14384:	ldr	r2, [r4, #52]	; 0x34
   14388:	adds	r3, r3, #1
   1438c:	adc	r2, r2, #0
   14390:	str	r3, [r4, #48]	; 0x30
   14394:	str	r2, [r4, #52]	; 0x34
   14398:	bl	119e8 <malloc@plt>
   1439c:	mov	r1, r7
   143a0:	mov	r6, r0
   143a4:	bl	13700 <init_node_return@@Base>
   143a8:	ldr	r3, [r4, #56]	; 0x38
   143ac:	ldr	r2, [r4, #60]	; 0x3c
   143b0:	ldr	r0, [r5]
   143b4:	adds	r3, r3, #1
   143b8:	adc	r2, r2, #0
   143bc:	str	r3, [r4, #56]	; 0x38
   143c0:	str	r2, [r4, #60]	; 0x3c
   143c4:	bl	1291c <next@@Base>
   143c8:	ldr	r3, [r0]
   143cc:	cmp	r3, #8
   143d0:	bne	14420 <read_return_expression@@Base+0x13c>
   143d4:	ldr	r3, [r4, #72]	; 0x48
   143d8:	ldr	r2, [r4, #76]	; 0x4c
   143dc:	adds	r3, r3, #1
   143e0:	adc	r2, r2, #0
   143e4:	str	r3, [r4, #72]	; 0x48
   143e8:	str	r2, [r4, #76]	; 0x4c
   143ec:	bl	12574 <free_token_semicolon@@Base>
   143f0:	ldr	r3, [r4, #80]	; 0x50
   143f4:	ldr	r2, [r4, #84]	; 0x54
   143f8:	adds	r3, r3, #1
   143fc:	adc	r2, r2, #0
   14400:	str	r3, [r4, #80]	; 0x50
   14404:	str	r2, [r4, #84]	; 0x54
   14408:	mov	r0, r6
   1440c:	ldrd	r4, [sp]
   14410:	ldrd	r6, [sp, #8]
   14414:	ldr	r8, [sp, #16]
   14418:	add	sp, sp, #20
   1441c:	pop	{pc}		; (ldr pc, [sp], #4)
   14420:	ldr	r3, [r4, #64]	; 0x40
   14424:	mov	r6, #0
   14428:	ldr	r2, [r4, #68]	; 0x44
   1442c:	adds	r3, r3, #1
   14430:	adc	r2, r2, r6
   14434:	str	r3, [r4, #64]	; 0x40
   14438:	str	r2, [r4, #68]	; 0x44
   1443c:	b	14408 <read_return_expression@@Base+0x124>
   14440:	ldr	r3, [r4, #24]
   14444:	mov	r6, #0
   14448:	ldr	r2, [r4, #28]
   1444c:	adds	r3, r3, #1
   14450:	adc	r2, r2, r6
   14454:	str	r3, [r4, #24]
   14458:	str	r2, [r4, #28]
   1445c:	b	14408 <read_return_expression@@Base+0x124>

00014460 <read_boolean_unary_expression@@Base>:
   14460:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14464:	movw	r4, #41184	; 0xa0e0
   14468:	movt	r4, #2
   1446c:	ldr	r3, [r4, #88]	; 0x58
   14470:	mov	r5, r0
   14474:	mov	r0, #20
   14478:	strd	r6, [sp, #8]
   1447c:	ldr	r2, [r4, #92]	; 0x5c
   14480:	strd	r8, [sp, #16]
   14484:	str	sl, [sp, #24]
   14488:	adds	r3, r3, #1
   1448c:	str	lr, [sp, #28]
   14490:	adc	r2, r2, #0
   14494:	str	r3, [r4, #88]	; 0x58
   14498:	str	r2, [r4, #92]	; 0x5c
   1449c:	bl	119e8 <malloc@plt>
   144a0:	mov	r6, r0
   144a4:	ldr	r0, [r5]
   144a8:	bl	1291c <next@@Base>
   144ac:	ldr	r8, [r0]
   144b0:	cmp	r8, #12
   144b4:	bne	145d8 <read_boolean_unary_expression@@Base+0x178>
   144b8:	ldr	r3, [r4, #104]	; 0x68
   144bc:	mov	r9, r0
   144c0:	ldr	r2, [r4, #108]	; 0x6c
   144c4:	adds	r3, r3, #1
   144c8:	adc	r2, r2, #0
   144cc:	str	r3, [r4, #104]	; 0x68
   144d0:	str	r2, [r4, #108]	; 0x6c
   144d4:	bl	13fb0 <get_boolean_op_value@@Base>
   144d8:	ldr	r3, [r4, #120]	; 0x78
   144dc:	mov	r7, r0
   144e0:	mov	r0, r9
   144e4:	ldr	r2, [r4, #124]	; 0x7c
   144e8:	adds	r3, r3, #1
   144ec:	adc	r2, r2, #0
   144f0:	str	r3, [r4, #120]	; 0x78
   144f4:	str	r2, [r4, #124]	; 0x7c
   144f8:	bl	12604 <free_token_boolean_op@@Base>
   144fc:	ldr	r3, [r4, #128]	; 0x80
   14500:	ldr	r2, [r4, #132]	; 0x84
   14504:	ldr	r0, [r5]
   14508:	adds	r3, r3, #1
   1450c:	adc	r2, r2, #0
   14510:	str	r3, [r4, #128]	; 0x80
   14514:	str	r2, [r4, #132]	; 0x84
   14518:	bl	1291c <next@@Base>
   1451c:	ldr	r3, [r0]
   14520:	mov	r5, r0
   14524:	cmp	r3, #1
   14528:	bne	14618 <read_boolean_unary_expression@@Base+0x1b8>
   1452c:	ldr	r3, [r4, #144]	; 0x90
   14530:	mov	r0, r8
   14534:	ldr	r2, [r4, #148]	; 0x94
   14538:	adds	r3, r3, #1
   1453c:	adc	r2, r2, #0
   14540:	str	r3, [r4, #144]	; 0x90
   14544:	str	r2, [r4, #148]	; 0x94
   14548:	bl	119e8 <malloc@plt>
   1454c:	ldr	r1, [r5, #4]
   14550:	mov	r8, r0
   14554:	bl	1366c <init_node_int@@Base>
   14558:	ldr	r3, [r4, #160]	; 0xa0
   1455c:	mov	r0, r5
   14560:	ldr	r1, [r4, #164]	; 0xa4
   14564:	adds	r3, r3, #1
   14568:	adc	r1, r1, #0
   1456c:	str	r3, [r4, #160]	; 0xa0
   14570:	str	r1, [r4, #164]	; 0xa4
   14574:	bl	12478 <free_token_int_value@@Base>
   14578:	ldr	ip, [r4, #168]	; 0xa8
   1457c:	mov	r3, #0
   14580:	mov	r2, r8
   14584:	mov	r1, r7
   14588:	mov	r0, r6
   1458c:	ldr	lr, [r4, #172]	; 0xac
   14590:	adds	ip, ip, #1
   14594:	adc	lr, lr, r3
   14598:	str	ip, [r4, #168]	; 0xa8
   1459c:	str	lr, [r4, #172]	; 0xac
   145a0:	bl	1379c <init_node_boolean_operator@@Base>
   145a4:	ldr	r3, [r4, #176]	; 0xb0
   145a8:	ldr	r2, [r4, #180]	; 0xb4
   145ac:	adds	r3, r3, #1
   145b0:	adc	r2, r2, #0
   145b4:	str	r3, [r4, #176]	; 0xb0
   145b8:	str	r2, [r4, #180]	; 0xb4
   145bc:	mov	r0, r6
   145c0:	ldrd	r4, [sp]
   145c4:	ldrd	r6, [sp, #8]
   145c8:	ldrd	r8, [sp, #16]
   145cc:	ldr	sl, [sp, #24]
   145d0:	add	sp, sp, #28
   145d4:	pop	{pc}		; (ldr pc, [sp], #4)
   145d8:	ldr	r3, [r4, #96]	; 0x60
   145dc:	mov	r0, r6
   145e0:	mov	r6, #0
   145e4:	ldr	r2, [r4, #100]	; 0x64
   145e8:	adds	r3, r3, #1
   145ec:	adc	r2, r2, r6
   145f0:	str	r3, [r4, #96]	; 0x60
   145f4:	str	r2, [r4, #100]	; 0x64
   145f8:	bl	137f0 <free_node_boolean_operator@@Base>
   145fc:	ldr	r3, [r4, #112]	; 0x70
   14600:	ldr	r2, [r4, #116]	; 0x74
   14604:	adds	r3, r3, #1
   14608:	adc	r2, r2, r6
   1460c:	str	r3, [r4, #112]	; 0x70
   14610:	str	r2, [r4, #116]	; 0x74
   14614:	b	145bc <read_boolean_unary_expression@@Base+0x15c>
   14618:	ldr	r3, [r4, #136]	; 0x88
   1461c:	mov	r0, r6
   14620:	mov	r6, #0
   14624:	ldr	r2, [r4, #140]	; 0x8c
   14628:	adds	r3, r3, #1
   1462c:	adc	r2, r2, r6
   14630:	str	r3, [r4, #136]	; 0x88
   14634:	str	r2, [r4, #140]	; 0x8c
   14638:	bl	137f0 <free_node_boolean_operator@@Base>
   1463c:	ldr	r3, [r4, #152]	; 0x98
   14640:	ldr	r2, [r4, #156]	; 0x9c
   14644:	adds	r3, r3, #1
   14648:	adc	r2, r2, r6
   1464c:	str	r3, [r4, #152]	; 0x98
   14650:	str	r2, [r4, #156]	; 0x9c
   14654:	b	145bc <read_boolean_unary_expression@@Base+0x15c>

00014658 <read_boolean_binary_expression@@Base>:
   14658:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1465c:	movw	r4, #41184	; 0xa0e0
   14660:	movt	r4, #2
   14664:	ldr	r3, [r4, #184]	; 0xb8
   14668:	mov	r5, r0
   1466c:	ldr	r2, [r4, #188]	; 0xbc
   14670:	ldr	r0, [r0]
   14674:	adds	r3, r3, #1
   14678:	strd	r6, [sp, #8]
   1467c:	strd	r8, [sp, #16]
   14680:	adc	r2, r2, #0
   14684:	str	sl, [sp, #24]
   14688:	str	lr, [sp, #28]
   1468c:	str	r3, [r4, #184]	; 0xb8
   14690:	str	r2, [r4, #188]	; 0xbc
   14694:	bl	1291c <next@@Base>
   14698:	ldr	r1, [r0]
   1469c:	mov	r6, r0
   146a0:	cmp	r1, #1
   146a4:	beq	1474c <read_boolean_binary_expression@@Base+0xf4>
   146a8:	ldr	r3, [r4, #192]	; 0xc0
   146ac:	ldr	r2, [r4, #196]	; 0xc4
   146b0:	adds	r3, r3, #1
   146b4:	adc	r2, r2, #0
   146b8:	cmp	r1, #12
   146bc:	str	r3, [r4, #192]	; 0xc0
   146c0:	movne	r5, #0
   146c4:	str	r2, [r4, #196]	; 0xc4
   146c8:	beq	146e8 <read_boolean_binary_expression@@Base+0x90>
   146cc:	mov	r0, r5
   146d0:	ldrd	r4, [sp]
   146d4:	ldrd	r6, [sp, #8]
   146d8:	ldrd	r8, [sp, #16]
   146dc:	ldr	sl, [sp, #24]
   146e0:	add	sp, sp, #28
   146e4:	pop	{pc}		; (ldr pc, [sp], #4)
   146e8:	ldr	r3, [r4, #208]	; 0xd0
   146ec:	mov	r1, r0
   146f0:	ldr	r2, [r4, #212]	; 0xd4
   146f4:	ldr	r0, [r5]
   146f8:	adds	r3, r3, #1
   146fc:	adc	r2, r2, #0
   14700:	str	r3, [r4, #208]	; 0xd0
   14704:	str	r2, [r4, #212]	; 0xd4
   14708:	bl	1270c <push_back@@Base>
   1470c:	ldr	r3, [r4, #216]	; 0xd8
   14710:	mov	r0, r5
   14714:	ldr	r2, [r4, #220]	; 0xdc
   14718:	adds	r3, r3, #1
   1471c:	adc	r2, r2, #0
   14720:	str	r3, [r4, #216]	; 0xd8
   14724:	str	r2, [r4, #220]	; 0xdc
   14728:	bl	14460 <read_boolean_unary_expression@@Base>
   1472c:	ldr	r3, [r4, #224]	; 0xe0
   14730:	mov	r5, r0
   14734:	ldr	r2, [r4, #228]	; 0xe4
   14738:	adds	r3, r3, #1
   1473c:	adc	r2, r2, #0
   14740:	str	r3, [r4, #224]	; 0xe0
   14744:	str	r2, [r4, #228]	; 0xe4
   14748:	b	146cc <read_boolean_binary_expression@@Base+0x74>
   1474c:	ldr	r3, [r4, #200]	; 0xc8
   14750:	mov	r0, #12
   14754:	ldr	r2, [r4, #204]	; 0xcc
   14758:	adds	r3, r3, #1
   1475c:	adc	r2, r2, #0
   14760:	str	r3, [r4, #200]	; 0xc8
   14764:	str	r2, [r4, #204]	; 0xcc
   14768:	bl	119e8 <malloc@plt>
   1476c:	ldr	r1, [r6, #4]
   14770:	mov	r7, r0
   14774:	bl	1366c <init_node_int@@Base>
   14778:	ldr	r3, [r4, #232]	; 0xe8
   1477c:	mov	r0, r6
   14780:	ldr	r2, [r4, #236]	; 0xec
   14784:	adds	r3, r3, #1
   14788:	adc	r2, r2, #0
   1478c:	str	r3, [r4, #232]	; 0xe8
   14790:	str	r2, [r4, #236]	; 0xec
   14794:	bl	12478 <free_token_int_value@@Base>
   14798:	ldr	r3, [r4, #240]	; 0xf0
   1479c:	ldr	r2, [r4, #244]	; 0xf4
   147a0:	ldr	r0, [r5]
   147a4:	adds	r3, r3, #1
   147a8:	adc	r2, r2, #0
   147ac:	str	r3, [r4, #240]	; 0xf0
   147b0:	str	r2, [r4, #244]	; 0xf4
   147b4:	bl	1291c <next@@Base>
   147b8:	ldr	r9, [r0]
   147bc:	mov	sl, r0
   147c0:	cmp	r9, #12
   147c4:	bne	148d4 <read_boolean_binary_expression@@Base+0x27c>
   147c8:	ldr	r3, [r4, #256]	; 0x100
   147cc:	ldr	r1, [r4, #260]	; 0x104
   147d0:	adds	r3, r3, #1
   147d4:	adc	r1, r1, #0
   147d8:	str	r3, [r4, #256]	; 0x100
   147dc:	str	r1, [r4, #260]	; 0x104
   147e0:	bl	13fb0 <get_boolean_op_value@@Base>
   147e4:	ldr	r3, [r4, #272]	; 0x110
   147e8:	mov	r8, r0
   147ec:	mov	r0, sl
   147f0:	ldr	r1, [r4, #276]	; 0x114
   147f4:	adds	r3, r3, #1
   147f8:	adc	r1, r1, #0
   147fc:	str	r3, [r4, #272]	; 0x110
   14800:	str	r1, [r4, #276]	; 0x114
   14804:	bl	12604 <free_token_boolean_op@@Base>
   14808:	ldr	r3, [r4, #280]	; 0x118
   1480c:	ldr	r2, [r4, #284]	; 0x11c
   14810:	ldr	r0, [r5]
   14814:	adds	r3, r3, #1
   14818:	adc	r2, r2, #0
   1481c:	str	r3, [r4, #280]	; 0x118
   14820:	str	r2, [r4, #284]	; 0x11c
   14824:	bl	1291c <next@@Base>
   14828:	ldr	r3, [r0]
   1482c:	mov	sl, r0
   14830:	cmp	r3, #1
   14834:	bne	14914 <read_boolean_binary_expression@@Base+0x2bc>
   14838:	ldr	r3, [r4, #296]	; 0x128
   1483c:	mov	r0, r9
   14840:	ldr	r1, [r4, #300]	; 0x12c
   14844:	adds	r3, r3, #1
   14848:	adc	r1, r1, #0
   1484c:	str	r3, [r4, #296]	; 0x128
   14850:	str	r1, [r4, #300]	; 0x12c
   14854:	bl	119e8 <malloc@plt>
   14858:	ldr	r1, [sl, #4]
   1485c:	mov	r6, r0
   14860:	bl	1366c <init_node_int@@Base>
   14864:	ldr	r2, [r4, #312]	; 0x138
   14868:	mov	r0, sl
   1486c:	ldr	r3, [r4, #316]	; 0x13c
   14870:	adds	r2, r2, #1
   14874:	adc	r3, r3, #0
   14878:	str	r2, [r4, #312]	; 0x138
   1487c:	str	r3, [r4, #316]	; 0x13c
   14880:	bl	12478 <free_token_int_value@@Base>
   14884:	ldr	r2, [r4, #320]	; 0x140
   14888:	mov	r0, #20
   1488c:	ldr	r3, [r4, #324]	; 0x144
   14890:	adds	r2, r2, #1
   14894:	adc	r3, r3, #0
   14898:	str	r2, [r4, #320]	; 0x140
   1489c:	str	r3, [r4, #324]	; 0x144
   148a0:	bl	119e8 <malloc@plt>
   148a4:	mov	r3, r6
   148a8:	mov	r2, r7
   148ac:	mov	r1, r8
   148b0:	mov	r5, r0
   148b4:	bl	1379c <init_node_boolean_operator@@Base>
   148b8:	ldr	r3, [r4, #328]	; 0x148
   148bc:	ldr	r2, [r4, #332]	; 0x14c
   148c0:	adds	r3, r3, #1
   148c4:	adc	r2, r2, #0
   148c8:	str	r3, [r4, #328]	; 0x148
   148cc:	str	r2, [r4, #332]	; 0x14c
   148d0:	b	146cc <read_boolean_binary_expression@@Base+0x74>
   148d4:	ldr	r3, [r4, #248]	; 0xf8
   148d8:	mov	r5, #0
   148dc:	mov	r0, r7
   148e0:	ldr	r2, [r4, #252]	; 0xfc
   148e4:	adds	r3, r3, #1
   148e8:	adc	r2, r2, r5
   148ec:	str	r3, [r4, #248]	; 0xf8
   148f0:	str	r2, [r4, #252]	; 0xfc
   148f4:	bl	138bc <free_node@@Base>
   148f8:	ldr	r3, [r4, #264]	; 0x108
   148fc:	ldr	r2, [r4, #268]	; 0x10c
   14900:	adds	r3, r3, #1
   14904:	adc	r2, r2, r5
   14908:	str	r3, [r4, #264]	; 0x108
   1490c:	str	r2, [r4, #268]	; 0x10c
   14910:	b	146cc <read_boolean_binary_expression@@Base+0x74>
   14914:	ldr	r3, [r4, #288]	; 0x120
   14918:	mov	r5, #0
   1491c:	mov	r0, r7
   14920:	ldr	r2, [r4, #292]	; 0x124
   14924:	adds	r3, r3, #1
   14928:	adc	r2, r2, r5
   1492c:	str	r3, [r4, #288]	; 0x120
   14930:	str	r2, [r4, #292]	; 0x124
   14934:	bl	138bc <free_node@@Base>
   14938:	ldr	r3, [r4, #304]	; 0x130
   1493c:	ldr	r2, [r4, #308]	; 0x134
   14940:	adds	r3, r3, #1
   14944:	adc	r2, r2, r5
   14948:	str	r3, [r4, #304]	; 0x130
   1494c:	str	r2, [r4, #308]	; 0x134
   14950:	b	146cc <read_boolean_binary_expression@@Base+0x74>

00014954 <read_single_boolean_expression@@Base>:
   14954:	cmp	r1, #0
   14958:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1495c:	strd	r6, [sp, #8]
   14960:	str	r8, [sp, #16]
   14964:	str	lr, [sp, #20]
   14968:	beq	14a10 <read_single_boolean_expression@@Base+0xbc>
   1496c:	mov	r6, r3
   14970:	ldr	r3, [r2]
   14974:	mov	r5, r2
   14978:	cmp	r3, #0
   1497c:	beq	14a50 <read_single_boolean_expression@@Base+0xfc>
   14980:	ldr	r4, [pc, #236]	; 14a74 <read_single_boolean_expression@@Base+0x120>
   14984:	ldr	r3, [r4, #16]
   14988:	ldr	r2, [r4, #20]
   1498c:	adds	r3, r3, #1
   14990:	adc	r2, r2, #0
   14994:	str	r3, [r4, #16]
   14998:	str	r2, [r4, #20]
   1499c:	bl	14658 <read_boolean_binary_expression@@Base>
   149a0:	ldr	r2, [r4, #32]
   149a4:	mov	r8, r0
   149a8:	mov	r0, #20
   149ac:	ldr	ip, [r4, #36]	; 0x24
   149b0:	adds	r2, r2, #1
   149b4:	adc	ip, ip, #0
   149b8:	str	r2, [r4, #32]
   149bc:	str	ip, [r4, #36]	; 0x24
   149c0:	bl	119e8 <malloc@plt>
   149c4:	mov	r3, r8
   149c8:	mov	r1, r6
   149cc:	mov	r2, #0
   149d0:	mov	r7, r0
   149d4:	bl	1379c <init_node_boolean_operator@@Base>
   149d8:	ldr	r3, [r4, #40]	; 0x28
   149dc:	mov	r1, #0
   149e0:	ldr	r2, [r4, #44]	; 0x2c
   149e4:	str	r1, [r5]
   149e8:	adds	r3, r3, #1
   149ec:	adc	r2, r2, r1
   149f0:	str	r3, [r4, #40]	; 0x28
   149f4:	str	r2, [r4, #44]	; 0x2c
   149f8:	mov	r0, r7
   149fc:	ldrd	r4, [sp]
   14a00:	ldrd	r6, [sp, #8]
   14a04:	ldr	r8, [sp, #16]
   14a08:	add	sp, sp, #20
   14a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a10:	ldr	r4, [pc, #92]	; 14a74 <read_single_boolean_expression@@Base+0x120>
   14a14:	ldr	r3, [r4]
   14a18:	ldr	r2, [r4, #4]
   14a1c:	adds	r3, r3, #1
   14a20:	adc	r2, r2, #0
   14a24:	str	r3, [r4]
   14a28:	str	r2, [r4, #4]
   14a2c:	bl	14658 <read_boolean_binary_expression@@Base>
   14a30:	ldr	r3, [r4, #8]
   14a34:	mov	r7, r0
   14a38:	ldr	r2, [r4, #12]
   14a3c:	adds	r3, r3, #1
   14a40:	adc	r2, r2, #0
   14a44:	str	r3, [r4, #8]
   14a48:	str	r2, [r4, #12]
   14a4c:	b	149f8 <read_single_boolean_expression@@Base+0xa4>
   14a50:	ldr	r2, [pc, #28]	; 14a74 <read_single_boolean_expression@@Base+0x120>
   14a54:	ldr	r3, [r3, #4]
   14a58:	ldr	r3, [r2, #24]
   14a5c:	ldr	r1, [r2, #28]
   14a60:	adds	r3, r3, #1
   14a64:	adc	r1, r1, #0
   14a68:	str	r3, [r2, #24]
   14a6c:	str	r1, [r2, #28]
   14a70:	udf	#0
   14a74:	andeq	sl, r2, r0, lsr r2

00014a78 <read_boolean_expression@@Base>:
   14a78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a7c:	mov	r5, r0
   14a80:	ldr	r4, [pc, #556]	; 14cb4 <read_boolean_expression@@Base+0x23c>
   14a84:	ldr	r0, [r0]
   14a88:	strd	r6, [sp, #8]
   14a8c:	mov	r6, #0
   14a90:	str	r8, [sp, #16]
   14a94:	ldr	r3, [r4, #-8]
   14a98:	str	lr, [sp, #20]
   14a9c:	sub	sp, sp, #8
   14aa0:	ldr	r2, [r4, #-4]
   14aa4:	str	r6, [sp, #4]
   14aa8:	adds	r3, r3, #1
   14aac:	adc	r2, r2, r6
   14ab0:	str	r3, [r4, #-8]
   14ab4:	str	r2, [r4, #-4]
   14ab8:	bl	1291c <next@@Base>
   14abc:	ldr	r2, [r4]
   14ac0:	ldr	r1, [r4, #4]
   14ac4:	ldr	r3, [r0]
   14ac8:	adds	r2, r2, #1
   14acc:	adc	r1, r1, r6
   14ad0:	str	r2, [r4]
   14ad4:	cmp	r3, #4
   14ad8:	str	r1, [r4, #4]
   14adc:	beq	14c64 <read_boolean_expression@@Base+0x1ec>
   14ae0:	mov	r8, #1
   14ae4:	b	14b38 <read_boolean_expression@@Base+0xc0>
   14ae8:	ldr	r3, [r4, #32]
   14aec:	ldr	r2, [r4, #36]	; 0x24
   14af0:	adds	r3, r3, #1
   14af4:	adc	r2, r2, #0
   14af8:	str	r3, [r4, #32]
   14afc:	str	r2, [r4, #36]	; 0x24
   14b00:	bl	13fb0 <get_boolean_op_value@@Base>
   14b04:	ldr	r3, [r4, #56]	; 0x38
   14b08:	mov	r7, r0
   14b0c:	str	r8, [sp, #4]
   14b10:	ldr	r2, [r4, #60]	; 0x3c
   14b14:	adds	r3, r3, #1
   14b18:	adc	r2, r2, #0
   14b1c:	str	r3, [r4, #56]	; 0x38
   14b20:	str	r2, [r4, #60]	; 0x3c
   14b24:	ldr	r0, [r5]
   14b28:	bl	1291c <next@@Base>
   14b2c:	ldr	r3, [r0]
   14b30:	cmp	r3, #4
   14b34:	beq	14c64 <read_boolean_expression@@Base+0x1ec>
   14b38:	cmp	r3, #3
   14b3c:	beq	14ba8 <read_boolean_expression@@Base+0x130>
   14b40:	cmp	r3, #12
   14b44:	beq	14ae8 <read_boolean_expression@@Base+0x70>
   14b48:	cmp	r3, #1
   14b4c:	beq	14bf4 <read_boolean_expression@@Base+0x17c>
   14b50:	ldr	ip, [r4, #8]
   14b54:	mov	r1, #1
   14b58:	movw	r3, #39584	; 0x9aa0
   14b5c:	movt	r3, #2
   14b60:	mov	r2, #33	; 0x21
   14b64:	ldr	lr, [r4, #12]
   14b68:	movw	r0, #35000	; 0x88b8
   14b6c:	movt	r0, #1
   14b70:	ldr	r3, [r3]
   14b74:	adds	ip, ip, r1
   14b78:	adc	lr, lr, #0
   14b7c:	str	ip, [r4, #8]
   14b80:	str	lr, [r4, #12]
   14b84:	bl	119ac <fwrite@plt>
   14b88:	ldr	r3, [r4, #72]	; 0x48
   14b8c:	mov	r0, #1
   14b90:	ldr	r2, [r4, #76]	; 0x4c
   14b94:	adds	r3, r3, r0
   14b98:	adc	r2, r2, #0
   14b9c:	str	r3, [r4, #72]	; 0x48
   14ba0:	str	r2, [r4, #76]	; 0x4c
   14ba4:	bl	11a18 <exit@plt>
   14ba8:	ldr	ip, [r4, #24]
   14bac:	mov	r1, r6
   14bb0:	mov	r3, r7
   14bb4:	add	r2, sp, #4
   14bb8:	mov	r0, r5
   14bbc:	ldr	lr, [r4, #28]
   14bc0:	adds	ip, ip, #1
   14bc4:	adc	lr, lr, #0
   14bc8:	str	ip, [r4, #24]
   14bcc:	str	lr, [r4, #28]
   14bd0:	bl	14954 <read_single_boolean_expression@@Base>
   14bd4:	ldr	r3, [r4, #64]	; 0x40
   14bd8:	mov	r6, r0
   14bdc:	ldr	r2, [r4, #68]	; 0x44
   14be0:	adds	r3, r3, #1
   14be4:	adc	r2, r2, #0
   14be8:	str	r3, [r4, #64]	; 0x40
   14bec:	str	r2, [r4, #68]	; 0x44
   14bf0:	b	14b24 <read_boolean_expression@@Base+0xac>
   14bf4:	ldr	r3, [r4, #16]
   14bf8:	mov	r1, r0
   14bfc:	ldr	r2, [r4, #20]
   14c00:	ldr	r0, [r5]
   14c04:	adds	r3, r3, #1
   14c08:	adc	r2, r2, #0
   14c0c:	str	r3, [r4, #16]
   14c10:	str	r2, [r4, #20]
   14c14:	bl	1270c <push_back@@Base>
   14c18:	ldr	ip, [r4, #40]	; 0x28
   14c1c:	mov	r1, r6
   14c20:	mov	r3, r7
   14c24:	add	r2, sp, #4
   14c28:	mov	r0, r5
   14c2c:	ldr	lr, [r4, #44]	; 0x2c
   14c30:	adds	ip, ip, #1
   14c34:	adc	lr, lr, #0
   14c38:	str	ip, [r4, #40]	; 0x28
   14c3c:	str	lr, [r4, #44]	; 0x2c
   14c40:	bl	14954 <read_single_boolean_expression@@Base>
   14c44:	ldr	r3, [r4, #48]	; 0x30
   14c48:	mov	r6, r0
   14c4c:	ldr	r2, [r4, #52]	; 0x34
   14c50:	adds	r3, r3, #1
   14c54:	adc	r2, r2, #0
   14c58:	str	r3, [r4, #48]	; 0x30
   14c5c:	str	r2, [r4, #52]	; 0x34
   14c60:	b	14b24 <read_boolean_expression@@Base+0xac>
   14c64:	ldr	r3, [r4, #80]	; 0x50
   14c68:	ldr	r2, [r4, #84]	; 0x54
   14c6c:	adds	r3, r3, #1
   14c70:	adc	r2, r2, #0
   14c74:	str	r3, [r4, #80]	; 0x50
   14c78:	str	r2, [r4, #84]	; 0x54
   14c7c:	bl	124e4 <free_token_cpar@@Base>
   14c80:	ldr	r3, [r4, #88]	; 0x58
   14c84:	mov	r0, r6
   14c88:	ldr	r2, [r4, #92]	; 0x5c
   14c8c:	adds	r3, r3, #1
   14c90:	adc	r2, r2, #0
   14c94:	str	r3, [r4, #88]	; 0x58
   14c98:	str	r2, [r4, #92]	; 0x5c
   14c9c:	add	sp, sp, #8
   14ca0:	ldrd	r4, [sp]
   14ca4:	ldrd	r6, [sp, #8]
   14ca8:	ldr	r8, [sp, #16]
   14cac:	add	sp, sp, #20
   14cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cb4:	andeq	sl, r2, r0, ror r2

00014cb8 <read_if_statement@@Base>:
   14cb8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14cbc:	mov	r5, r0
   14cc0:	ldr	r4, [pc, #460]	; 14e94 <read_if_statement@@Base+0x1dc>
   14cc4:	ldr	r0, [r0]
   14cc8:	strd	r6, [sp, #8]
   14ccc:	str	r8, [sp, #16]
   14cd0:	ldr	r3, [r4]
   14cd4:	str	lr, [sp, #20]
   14cd8:	ldr	r2, [r4, #4]
   14cdc:	adds	r3, r3, #1
   14ce0:	adc	r2, r2, #0
   14ce4:	str	r3, [r4]
   14ce8:	str	r2, [r4, #4]
   14cec:	bl	1291c <next@@Base>
   14cf0:	ldr	r3, [r0]
   14cf4:	cmp	r3, #3
   14cf8:	bne	14e18 <read_if_statement@@Base+0x160>
   14cfc:	ldr	r3, [r4, #16]
   14d00:	ldr	r2, [r4, #20]
   14d04:	adds	r3, r3, #1
   14d08:	adc	r2, r2, #0
   14d0c:	str	r3, [r4, #16]
   14d10:	str	r2, [r4, #20]
   14d14:	bl	124c0 <free_token_opar@@Base>
   14d18:	ldr	r3, [r4, #24]
   14d1c:	mov	r0, r5
   14d20:	ldr	r2, [r4, #28]
   14d24:	adds	r3, r3, #1
   14d28:	adc	r2, r2, #0
   14d2c:	str	r3, [r4, #24]
   14d30:	str	r2, [r4, #28]
   14d34:	bl	14a78 <read_boolean_expression@@Base>
   14d38:	ldr	r3, [r4, #32]
   14d3c:	mov	r6, r0
   14d40:	mov	r0, r5
   14d44:	ldr	r2, [r4, #36]	; 0x24
   14d48:	adds	r3, r3, #1
   14d4c:	adc	r2, r2, #0
   14d50:	str	r3, [r4, #32]
   14d54:	str	r2, [r4, #36]	; 0x24
   14d58:	bl	14e98 <read_body@@Base>
   14d5c:	ldr	r3, [r4, #40]	; 0x28
   14d60:	mov	r7, r0
   14d64:	ldr	r2, [r4, #44]	; 0x2c
   14d68:	ldr	r0, [r5]
   14d6c:	adds	r3, r3, #1
   14d70:	adc	r2, r2, #0
   14d74:	str	r3, [r4, #40]	; 0x28
   14d78:	str	r2, [r4, #44]	; 0x2c
   14d7c:	bl	1291c <next@@Base>
   14d80:	ldr	r3, [r0]
   14d84:	mov	r1, r0
   14d88:	cmp	r3, #11
   14d8c:	beq	14e38 <read_if_statement@@Base+0x180>
   14d90:	ldr	r3, [r4, #56]	; 0x38
   14d94:	mov	r8, #0
   14d98:	ldr	r2, [r4, #60]	; 0x3c
   14d9c:	ldr	r0, [r5]
   14da0:	adds	r3, r3, #1
   14da4:	adc	r2, r2, r8
   14da8:	str	r3, [r4, #56]	; 0x38
   14dac:	str	r2, [r4, #60]	; 0x3c
   14db0:	bl	1270c <push_back@@Base>
   14db4:	ldr	r3, [r4, #80]	; 0x50
   14db8:	ldr	r2, [r4, #84]	; 0x54
   14dbc:	adds	r3, r3, #1
   14dc0:	adc	r2, r2, r8
   14dc4:	str	r3, [r4, #80]	; 0x50
   14dc8:	str	r2, [r4, #84]	; 0x54
   14dcc:	mov	r0, #20
   14dd0:	bl	119e8 <malloc@plt>
   14dd4:	mov	r3, r8
   14dd8:	mov	r2, r7
   14ddc:	mov	r1, r6
   14de0:	mov	r5, r0
   14de4:	bl	13748 <init_node_if@@Base>
   14de8:	ldr	r3, [r4, #88]	; 0x58
   14dec:	ldr	r2, [r4, #92]	; 0x5c
   14df0:	adds	r3, r3, #1
   14df4:	adc	r2, r2, #0
   14df8:	str	r3, [r4, #88]	; 0x58
   14dfc:	str	r2, [r4, #92]	; 0x5c
   14e00:	mov	r0, r5
   14e04:	ldrd	r4, [sp]
   14e08:	ldrd	r6, [sp, #8]
   14e0c:	ldr	r8, [sp, #16]
   14e10:	add	sp, sp, #20
   14e14:	pop	{pc}		; (ldr pc, [sp], #4)
   14e18:	ldr	r3, [r4, #8]
   14e1c:	mov	r5, #0
   14e20:	ldr	r2, [r4, #12]
   14e24:	adds	r3, r3, #1
   14e28:	adc	r2, r2, r5
   14e2c:	str	r3, [r4, #8]
   14e30:	str	r2, [r4, #12]
   14e34:	b	14e00 <read_if_statement@@Base+0x148>
   14e38:	ldr	r3, [r4, #48]	; 0x30
   14e3c:	ldr	r2, [r4, #52]	; 0x34
   14e40:	adds	r3, r3, #1
   14e44:	adc	r2, r2, #0
   14e48:	str	r3, [r4, #48]	; 0x30
   14e4c:	str	r2, [r4, #52]	; 0x34
   14e50:	bl	125e0 <free_token_else@@Base>
   14e54:	ldr	r3, [r4, #64]	; 0x40
   14e58:	mov	r0, r5
   14e5c:	ldr	r2, [r4, #68]	; 0x44
   14e60:	adds	r3, r3, #1
   14e64:	adc	r2, r2, #0
   14e68:	str	r3, [r4, #64]	; 0x40
   14e6c:	str	r2, [r4, #68]	; 0x44
   14e70:	bl	14e98 <read_body@@Base>
   14e74:	ldr	r3, [r4, #72]	; 0x48
   14e78:	mov	r8, r0
   14e7c:	ldr	r2, [r4, #76]	; 0x4c
   14e80:	adds	r3, r3, #1
   14e84:	adc	r2, r2, #0
   14e88:	str	r3, [r4, #72]	; 0x48
   14e8c:	str	r2, [r4, #76]	; 0x4c
   14e90:	b	14dcc <read_if_statement@@Base+0x114>
   14e94:	ldrdeq	sl, [r2], -r0

00014e98 <read_body@@Base>:
   14e98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14e9c:	mov	r5, r0
   14ea0:	ldr	r4, [pc, #624]	; 15118 <read_body@@Base+0x280>
   14ea4:	ldr	r0, [r0]
   14ea8:	strd	r6, [sp, #8]
   14eac:	str	r8, [sp, #16]
   14eb0:	ldr	r3, [r4]
   14eb4:	str	lr, [sp, #20]
   14eb8:	ldr	r2, [r4, #4]
   14ebc:	adds	r3, r3, #1
   14ec0:	adc	r2, r2, #0
   14ec4:	str	r3, [r4]
   14ec8:	str	r2, [r4, #4]
   14ecc:	bl	1291c <next@@Base>
   14ed0:	ldr	r3, [r0]
   14ed4:	cmp	r3, #5
   14ed8:	bne	150b8 <read_body@@Base+0x220>
   14edc:	ldr	r3, [r4, #16]
   14ee0:	ldr	r2, [r4, #20]
   14ee4:	adds	r3, r3, #1
   14ee8:	adc	r2, r2, #0
   14eec:	str	r3, [r4, #16]
   14ef0:	str	r2, [r4, #20]
   14ef4:	bl	12508 <free_token_obra@@Base>
   14ef8:	ldr	r3, [r4, #24]
   14efc:	ldr	r2, [r4, #28]
   14f00:	ldr	r0, [r5]
   14f04:	adds	r3, r3, #1
   14f08:	adc	r2, r2, #0
   14f0c:	str	r3, [r4, #24]
   14f10:	str	r2, [r4, #28]
   14f14:	bl	1291c <next@@Base>
   14f18:	ldr	r2, [r4, #32]
   14f1c:	mov	r1, r0
   14f20:	ldr	r3, [r0]
   14f24:	ldr	r0, [r4, #36]	; 0x24
   14f28:	adds	r2, r2, #1
   14f2c:	str	r2, [r4, #32]
   14f30:	adc	r0, r0, #0
   14f34:	cmp	r3, #6
   14f38:	str	r0, [r4, #36]	; 0x24
   14f3c:	beq	150d8 <read_body@@Base+0x240>
   14f40:	mov	r7, #0
   14f44:	mov	r6, r7
   14f48:	cmp	r3, #7
   14f4c:	beq	14fac <read_body@@Base+0x114>
   14f50:	cmp	r3, #10
   14f54:	mov	r0, r1
   14f58:	beq	15034 <read_body@@Base+0x19c>
   14f5c:	ldr	r3, [r4, #40]	; 0x28
   14f60:	ldr	r2, [r4, #44]	; 0x2c
   14f64:	ldr	r0, [r5]
   14f68:	adds	r3, r3, #1
   14f6c:	adc	r2, r2, #0
   14f70:	str	r3, [r4, #40]	; 0x28
   14f74:	str	r2, [r4, #44]	; 0x2c
   14f78:	bl	1270c <push_back@@Base>
   14f7c:	ldr	r3, [r4, #96]	; 0x60
   14f80:	ldr	r2, [r4, #100]	; 0x64
   14f84:	adds	r3, r3, #1
   14f88:	adc	r2, r2, #0
   14f8c:	str	r3, [r4, #96]	; 0x60
   14f90:	str	r2, [r4, #100]	; 0x64
   14f94:	mov	r0, r6
   14f98:	ldrd	r4, [sp]
   14f9c:	ldrd	r6, [sp, #8]
   14fa0:	ldr	r8, [sp, #16]
   14fa4:	add	sp, sp, #20
   14fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   14fac:	ldr	r3, [r4, #48]	; 0x30
   14fb0:	mov	r0, r1
   14fb4:	ldr	r2, [r4, #52]	; 0x34
   14fb8:	adds	r3, r3, #1
   14fbc:	adc	r2, r2, #0
   14fc0:	str	r3, [r4, #48]	; 0x30
   14fc4:	str	r2, [r4, #52]	; 0x34
   14fc8:	bl	12550 <free_token_return@@Base>
   14fcc:	ldr	r3, [r4, #64]	; 0x40
   14fd0:	mov	r0, r5
   14fd4:	ldr	r2, [r4, #68]	; 0x44
   14fd8:	adds	r3, r3, #1
   14fdc:	adc	r2, r2, #0
   14fe0:	str	r3, [r4, #64]	; 0x40
   14fe4:	str	r2, [r4, #68]	; 0x44
   14fe8:	bl	142e4 <read_return_expression@@Base>
   14fec:	ldr	r3, [r4, #72]	; 0x48
   14ff0:	mov	r8, r0
   14ff4:	ldr	r2, [r4, #76]	; 0x4c
   14ff8:	adds	r3, r3, #1
   14ffc:	adc	r2, r2, #0
   15000:	cmp	r6, #0
   15004:	str	r3, [r4, #72]	; 0x48
   15008:	str	r2, [r4, #76]	; 0x4c
   1500c:	beq	15094 <read_body@@Base+0x1fc>
   15010:	ldr	r0, [r5]
   15014:	str	r8, [r7, #4]
   15018:	bl	1291c <next@@Base>
   1501c:	ldr	r3, [r0]
   15020:	mov	r1, r0
   15024:	cmp	r3, #6
   15028:	beq	150dc <read_body@@Base+0x244>
   1502c:	mov	r7, r8
   15030:	b	14f48 <read_body@@Base+0xb0>
   15034:	ldr	r3, [r4, #56]	; 0x38
   15038:	ldr	r2, [r4, #60]	; 0x3c
   1503c:	adds	r3, r3, #1
   15040:	adc	r2, r2, #0
   15044:	str	r3, [r4, #56]	; 0x38
   15048:	str	r2, [r4, #60]	; 0x3c
   1504c:	bl	125bc <free_token_if@@Base>
   15050:	ldr	r3, [r4, #80]	; 0x50
   15054:	mov	r0, r5
   15058:	ldr	r2, [r4, #84]	; 0x54
   1505c:	adds	r3, r3, #1
   15060:	adc	r2, r2, #0
   15064:	str	r3, [r4, #80]	; 0x50
   15068:	str	r2, [r4, #84]	; 0x54
   1506c:	bl	14cb8 <read_if_statement@@Base>
   15070:	ldr	r3, [r4, #88]	; 0x58
   15074:	mov	r8, r0
   15078:	ldr	r2, [r4, #92]	; 0x5c
   1507c:	adds	r3, r3, #1
   15080:	adc	r2, r2, #0
   15084:	cmp	r6, #0
   15088:	str	r3, [r4, #88]	; 0x58
   1508c:	str	r2, [r4, #92]	; 0x5c
   15090:	bne	15010 <read_body@@Base+0x178>
   15094:	ldr	r3, [r4, #104]	; 0x68
   15098:	mov	r6, r8
   1509c:	ldr	r2, [r4, #108]	; 0x6c
   150a0:	ldr	r0, [r5]
   150a4:	adds	r3, r3, #1
   150a8:	adc	r2, r2, #0
   150ac:	str	r3, [r4, #104]	; 0x68
   150b0:	str	r2, [r4, #108]	; 0x6c
   150b4:	b	15018 <read_body@@Base+0x180>
   150b8:	ldr	r3, [r4, #8]
   150bc:	mov	r6, #0
   150c0:	ldr	r2, [r4, #12]
   150c4:	adds	r3, r3, #1
   150c8:	adc	r2, r2, r6
   150cc:	str	r3, [r4, #8]
   150d0:	str	r2, [r4, #12]
   150d4:	b	14f94 <read_body@@Base+0xfc>
   150d8:	mov	r6, #0
   150dc:	ldr	r3, [r4, #112]	; 0x70
   150e0:	mov	r0, r1
   150e4:	ldr	r2, [r4, #116]	; 0x74
   150e8:	adds	r3, r3, #1
   150ec:	adc	r2, r2, #0
   150f0:	str	r3, [r4, #112]	; 0x70
   150f4:	str	r2, [r4, #116]	; 0x74
   150f8:	bl	1252c <free_token_cbra@@Base>
   150fc:	ldr	r3, [r4, #120]	; 0x78
   15100:	ldr	r2, [r4, #124]	; 0x7c
   15104:	adds	r3, r3, #1
   15108:	adc	r2, r2, #0
   1510c:	str	r3, [r4, #120]	; 0x78
   15110:	str	r2, [r4, #124]	; 0x7c
   15114:	b	14f94 <read_body@@Base+0xfc>
   15118:	andeq	sl, r2, r0, lsr r3

0001511c <read_function_ast_node@@Base>:
   1511c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15120:	ldr	r4, [pc, #556]	; 15354 <read_function_ast_node@@Base+0x238>
   15124:	strd	r6, [sp, #8]
   15128:	mov	r6, r0
   1512c:	ldr	r0, [r0]
   15130:	str	r8, [sp, #16]
   15134:	str	lr, [sp, #20]
   15138:	ldr	r3, [r4]
   1513c:	ldr	r2, [r4, #4]
   15140:	adds	r3, r3, #1
   15144:	adc	r2, r2, #0
   15148:	str	r3, [r4]
   1514c:	str	r2, [r4, #4]
   15150:	bl	1291c <next@@Base>
   15154:	ldr	r5, [r0]
   15158:	cmp	r5, #0
   1515c:	bne	152fc <read_function_ast_node@@Base+0x1e0>
   15160:	ldr	r3, [r4, #16]
   15164:	ldr	r2, [r4, #20]
   15168:	adds	r3, r3, #1
   1516c:	adc	r2, r2, #0
   15170:	str	r3, [r4, #16]
   15174:	str	r2, [r4, #20]
   15178:	bl	12454 <free_token_int_type@@Base>
   1517c:	ldr	r3, [r4, #24]
   15180:	ldr	r2, [r4, #28]
   15184:	ldr	r0, [r6]
   15188:	adds	r3, r3, #1
   1518c:	adc	r2, r2, #0
   15190:	str	r3, [r4, #24]
   15194:	str	r2, [r4, #28]
   15198:	bl	1291c <next@@Base>
   1519c:	ldr	r3, [r0]
   151a0:	mov	r7, r0
   151a4:	cmp	r3, #2
   151a8:	bne	152cc <read_function_ast_node@@Base+0x1b0>
   151ac:	ldr	r3, [r4, #40]	; 0x28
   151b0:	ldr	r2, [r4, #44]	; 0x2c
   151b4:	ldr	r0, [r6]
   151b8:	adds	r3, r3, #1
   151bc:	adc	r2, r2, #0
   151c0:	str	r3, [r4, #40]	; 0x28
   151c4:	str	r2, [r4, #44]	; 0x2c
   151c8:	bl	1291c <next@@Base>
   151cc:	ldr	r3, [r0]
   151d0:	cmp	r3, #3
   151d4:	bne	15338 <read_function_ast_node@@Base+0x21c>
   151d8:	ldr	r3, [r4, #56]	; 0x38
   151dc:	ldr	r2, [r4, #60]	; 0x3c
   151e0:	adds	r3, r3, #1
   151e4:	adc	r2, r2, #0
   151e8:	str	r3, [r4, #56]	; 0x38
   151ec:	str	r2, [r4, #60]	; 0x3c
   151f0:	bl	124c0 <free_token_opar@@Base>
   151f4:	ldr	r3, [r4, #64]	; 0x40
   151f8:	ldr	r2, [r4, #68]	; 0x44
   151fc:	ldr	r0, [r6]
   15200:	adds	r3, r3, #1
   15204:	adc	r2, r2, #0
   15208:	str	r3, [r4, #64]	; 0x40
   1520c:	str	r2, [r4, #68]	; 0x44
   15210:	bl	1291c <next@@Base>
   15214:	ldr	r3, [r0]
   15218:	cmp	r3, #4
   1521c:	bne	1531c <read_function_ast_node@@Base+0x200>
   15220:	ldr	r3, [r4, #80]	; 0x50
   15224:	ldr	r2, [r4, #84]	; 0x54
   15228:	adds	r3, r3, #1
   1522c:	adc	r2, r2, #0
   15230:	str	r3, [r4, #80]	; 0x50
   15234:	str	r2, [r4, #84]	; 0x54
   15238:	bl	124e4 <free_token_cpar@@Base>
   1523c:	ldr	r3, [r4, #88]	; 0x58
   15240:	mov	r0, r6
   15244:	ldr	r2, [r4, #92]	; 0x5c
   15248:	adds	r3, r3, #1
   1524c:	adc	r2, r2, #0
   15250:	str	r3, [r4, #88]	; 0x58
   15254:	str	r2, [r4, #92]	; 0x5c
   15258:	bl	14e98 <read_body@@Base>
   1525c:	ldr	r3, [r4, #96]	; 0x60
   15260:	mov	r6, r0
   15264:	mov	r0, #16
   15268:	ldr	r1, [r4, #100]	; 0x64
   1526c:	adds	r3, r3, #1
   15270:	adc	r1, r1, #0
   15274:	str	r3, [r4, #96]	; 0x60
   15278:	str	r1, [r4, #100]	; 0x64
   1527c:	bl	119e8 <malloc@plt>
   15280:	mov	r2, r6
   15284:	ldr	r1, [r7, #4]
   15288:	mov	r5, r0
   1528c:	bl	136b4 <init_node_function@@Base>
   15290:	ldr	r3, [r4, #104]	; 0x68
   15294:	mov	r0, r7
   15298:	ldr	r2, [r4, #108]	; 0x6c
   1529c:	adds	r3, r3, #1
   152a0:	adc	r2, r2, #0
   152a4:	str	r3, [r4, #104]	; 0x68
   152a8:	str	r2, [r4, #108]	; 0x6c
   152ac:	bl	1249c <free_token_function@@Base>
   152b0:	ldr	r3, [r4, #112]	; 0x70
   152b4:	ldr	r2, [r4, #116]	; 0x74
   152b8:	adds	r3, r3, #1
   152bc:	adc	r2, r2, #0
   152c0:	str	r3, [r4, #112]	; 0x70
   152c4:	str	r2, [r4, #116]	; 0x74
   152c8:	b	152e4 <read_function_ast_node@@Base+0x1c8>
   152cc:	ldr	r3, [r4, #32]
   152d0:	ldr	r2, [r4, #36]	; 0x24
   152d4:	adds	r3, r3, #1
   152d8:	adc	r2, r2, #0
   152dc:	str	r3, [r4, #32]
   152e0:	str	r2, [r4, #36]	; 0x24
   152e4:	mov	r0, r5
   152e8:	ldrd	r4, [sp]
   152ec:	ldrd	r6, [sp, #8]
   152f0:	ldr	r8, [sp, #16]
   152f4:	add	sp, sp, #20
   152f8:	pop	{pc}		; (ldr pc, [sp], #4)
   152fc:	ldr	r3, [r4, #8]
   15300:	mov	r5, #0
   15304:	ldr	r2, [r4, #12]
   15308:	adds	r3, r3, #1
   1530c:	adc	r2, r2, r5
   15310:	str	r3, [r4, #8]
   15314:	str	r2, [r4, #12]
   15318:	b	152e4 <read_function_ast_node@@Base+0x1c8>
   1531c:	ldr	r3, [r4, #72]	; 0x48
   15320:	ldr	r2, [r4, #76]	; 0x4c
   15324:	adds	r3, r3, #1
   15328:	adc	r2, r2, #0
   1532c:	str	r3, [r4, #72]	; 0x48
   15330:	str	r2, [r4, #76]	; 0x4c
   15334:	b	152e4 <read_function_ast_node@@Base+0x1c8>
   15338:	ldr	r3, [r4, #48]	; 0x30
   1533c:	ldr	r2, [r4, #52]	; 0x34
   15340:	adds	r3, r3, #1
   15344:	adc	r2, r2, #0
   15348:	str	r3, [r4, #48]	; 0x30
   1534c:	str	r2, [r4, #52]	; 0x34
   15350:	b	152e4 <read_function_ast_node@@Base+0x1c8>
   15354:			; <UNDEFINED> instruction: 0x0002a3b0

00015358 <build_ast@@Base>:
   15358:	str	r4, [sp, #-8]!
   1535c:	ldr	r4, [pc, #64]	; 153a4 <build_ast@@Base+0x4c>
   15360:	str	lr, [sp, #4]
   15364:	ldr	r3, [r4, #-8]
   15368:	ldr	r2, [r4, #-4]
   1536c:	adds	r3, r3, #1
   15370:	adc	r2, r2, #0
   15374:	str	r3, [r4, #-8]
   15378:	str	r2, [r4, #-4]
   1537c:	bl	1511c <read_function_ast_node@@Base>
   15380:	ldr	r3, [r4]
   15384:	ldr	r2, [r4, #4]
   15388:	adds	r3, r3, #1
   1538c:	adc	r2, r2, #0
   15390:	str	r3, [r4]
   15394:	str	r2, [r4, #4]
   15398:	ldr	r4, [sp]
   1539c:	add	sp, sp, #4
   153a0:	pop	{pc}		; (ldr pc, [sp], #4)
   153a4:	andeq	sl, r2, r0, lsr r4

000153a8 <init_generator@@Base>:
   153a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   153ac:	movw	r4, #42040	; 0xa438
   153b0:	movt	r4, #2
   153b4:	ldr	r3, [r4]
   153b8:	mov	r5, r0
   153bc:	mov	r0, r2
   153c0:	strd	r6, [sp, #8]
   153c4:	mov	r6, #0
   153c8:	mov	r7, #0
   153cc:	ldr	r2, [r4, #4]
   153d0:	str	r8, [sp, #16]
   153d4:	str	lr, [sp, #20]
   153d8:	adds	r3, r3, #1
   153dc:	str	r1, [r5]
   153e0:	movw	r1, #35120	; 0x8930
   153e4:	movt	r1, #1
   153e8:	adc	r2, r2, #0
   153ec:	str	r3, [r4]
   153f0:	str	r2, [r4, #4]
   153f4:	bl	1197c <fopen@plt>
   153f8:	ldr	r3, [r4, #8]
   153fc:	ldr	r2, [r4, #12]
   15400:	ldr	r8, [sp, #16]
   15404:	adds	r3, r3, #1
   15408:	str	r0, [r5, #4]
   1540c:	strd	r6, [r5, #8]
   15410:	adc	r2, r2, #0
   15414:	str	r3, [r4, #8]
   15418:	ldrd	r6, [sp, #8]
   1541c:	str	r2, [r4, #12]
   15420:	ldrd	r4, [sp]
   15424:	add	sp, sp, #20
   15428:	pop	{pc}		; (ldr pc, [sp], #4)

0001542c <destroy_generator@@Base>:
   1542c:	str	r4, [sp, #-8]!
   15430:	movw	r4, #42040	; 0xa438
   15434:	movt	r4, #2
   15438:	ldr	r3, [r4, #16]
   1543c:	ldr	r2, [r4, #20]
   15440:	ldr	r0, [r0, #4]
   15444:	adds	r3, r3, #1
   15448:	str	lr, [sp, #4]
   1544c:	adc	r2, r2, #0
   15450:	str	r3, [r4, #16]
   15454:	str	r2, [r4, #20]
   15458:	bl	11a84 <fclose@plt>
   1545c:	ldr	r3, [r4, #24]
   15460:	ldr	r2, [r4, #28]
   15464:	adds	r3, r3, #1
   15468:	adc	r2, r2, #0
   1546c:	str	r3, [r4, #24]
   15470:	str	r2, [r4, #28]
   15474:	ldr	r4, [sp]
   15478:	add	sp, sp, #4
   1547c:	pop	{pc}		; (ldr pc, [sp], #4)

00015480 <__generate_code_for_return@@Base>:
   15480:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15484:	movw	r4, #42040	; 0xa438
   15488:	movt	r4, #2
   1548c:	ldr	r3, [r4, #32]
   15490:	mov	r5, r0
   15494:	mov	r2, #9
   15498:	strd	r6, [sp, #8]
   1549c:	movw	r0, #35124	; 0x8934
   154a0:	movt	r0, #1
   154a4:	str	lr, [sp, #20]
   154a8:	ldr	lr, [r4, #36]	; 0x24
   154ac:	str	r8, [sp, #16]
   154b0:	ldr	r6, [r1, #8]
   154b4:	mov	r1, #1
   154b8:	adds	ip, r3, r1
   154bc:	ldr	r3, [r5, #4]
   154c0:	adc	lr, lr, #0
   154c4:	str	ip, [r4, #32]
   154c8:	str	lr, [r4, #36]	; 0x24
   154cc:	bl	119ac <fwrite@plt>
   154d0:	ldr	r7, [r6]
   154d4:	cmp	r7, #1
   154d8:	bne	15564 <__generate_code_for_return@@Base+0xe4>
   154dc:	ldr	r3, [r4, #48]	; 0x30
   154e0:	movw	r1, #35136	; 0x8940
   154e4:	movt	r1, #1
   154e8:	ldr	ip, [r4, #52]	; 0x34
   154ec:	ldr	r0, [r5, #4]
   154f0:	adds	r3, r3, #1
   154f4:	ldr	r2, [r6, #8]
   154f8:	adc	ip, ip, #0
   154fc:	str	r3, [r4, #48]	; 0x30
   15500:	str	ip, [r4, #52]	; 0x34
   15504:	bl	11a3c <fprintf@plt>
   15508:	ldr	ip, [r4, #56]	; 0x38
   1550c:	mov	r1, r7
   15510:	mov	r2, #8
   15514:	movw	r0, #35140	; 0x8944
   15518:	movt	r0, #1
   1551c:	ldr	lr, [r4, #60]	; 0x3c
   15520:	ldr	r3, [r5, #4]
   15524:	adds	ip, ip, #1
   15528:	adc	lr, lr, #0
   1552c:	str	ip, [r4, #56]	; 0x38
   15530:	str	lr, [r4, #60]	; 0x3c
   15534:	bl	119ac <fwrite@plt>
   15538:	ldr	r3, [r4, #64]	; 0x40
   1553c:	ldr	r2, [r4, #68]	; 0x44
   15540:	ldrd	r6, [sp, #8]
   15544:	adds	r3, r3, #1
   15548:	ldr	r8, [sp, #16]
   1554c:	adc	r2, r2, #0
   15550:	str	r3, [r4, #64]	; 0x40
   15554:	str	r2, [r4, #68]	; 0x44
   15558:	ldrd	r4, [sp]
   1555c:	add	sp, sp, #20
   15560:	pop	{pc}		; (ldr pc, [sp], #4)
   15564:	ldr	ip, [r4, #40]	; 0x28
   15568:	mov	r1, #1
   1556c:	movw	r3, #39584	; 0x9aa0
   15570:	movt	r3, #2
   15574:	mov	r2, #37	; 0x25
   15578:	ldr	lr, [r4, #44]	; 0x2c
   1557c:	movw	r0, #35152	; 0x8950
   15580:	movt	r0, #1
   15584:	ldr	r3, [r3]
   15588:	adds	ip, ip, r1
   1558c:	adc	lr, lr, #0
   15590:	str	ip, [r4, #40]	; 0x28
   15594:	str	lr, [r4, #44]	; 0x2c
   15598:	bl	119ac <fwrite@plt>
   1559c:	ldr	r3, [r4, #72]	; 0x48
   155a0:	mov	r0, #1
   155a4:	ldr	r2, [r4, #76]	; 0x4c
   155a8:	adds	r3, r3, r0
   155ac:	adc	r2, r2, #0
   155b0:	str	r3, [r4, #72]	; 0x48
   155b4:	str	r2, [r4, #76]	; 0x4c
   155b8:	bl	11a18 <exit@plt>

000155bc <__generate_code_for_int@@Base>:
   155bc:	str	r4, [sp, #-8]!
   155c0:	movw	r4, #42040	; 0xa438
   155c4:	movt	r4, #2
   155c8:	ldr	r3, [r4, #80]	; 0x50
   155cc:	ldr	ip, [r4, #84]	; 0x54
   155d0:	ldr	r0, [r0, #4]
   155d4:	adds	r3, r3, #1
   155d8:	ldr	r2, [r1, #8]
   155dc:	movw	r1, #35136	; 0x8940
   155e0:	movt	r1, #1
   155e4:	adc	ip, ip, #0
   155e8:	str	lr, [sp, #4]
   155ec:	str	r3, [r4, #80]	; 0x50
   155f0:	str	ip, [r4, #84]	; 0x54
   155f4:	bl	11a3c <fprintf@plt>
   155f8:	ldr	r3, [r4, #88]	; 0x58
   155fc:	ldr	r2, [r4, #92]	; 0x5c
   15600:	adds	r3, r3, #1
   15604:	adc	r2, r2, #0
   15608:	str	r3, [r4, #88]	; 0x58
   1560c:	str	r2, [r4, #92]	; 0x5c
   15610:	ldr	r4, [sp]
   15614:	add	sp, sp, #4
   15618:	pop	{pc}		; (ldr pc, [sp], #4)

0001561c <__generate_code_for_binary_boolean_expression@@Base>:
   1561c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15620:	movw	r4, #42040	; 0xa438
   15624:	movt	r4, #2
   15628:	ldr	ip, [r4, #96]	; 0x60
   1562c:	mov	r5, r0
   15630:	movw	r0, #35124	; 0x8934
   15634:	movt	r0, #1
   15638:	strd	r6, [sp, #8]
   1563c:	mov	r6, r2
   15640:	str	lr, [sp, #28]
   15644:	mov	r2, #9
   15648:	mov	r7, r3
   1564c:	ldr	lr, [r4, #100]	; 0x64
   15650:	strd	r8, [sp, #16]
   15654:	mov	r8, r1
   15658:	mov	r1, #1
   1565c:	adds	ip, ip, r1
   15660:	ldr	r3, [r5, #4]
   15664:	str	sl, [sp, #24]
   15668:	str	ip, [r4, #96]	; 0x60
   1566c:	adc	lr, lr, #0
   15670:	ldr	sl, [r8, #8]
   15674:	str	lr, [r4, #100]	; 0x64
   15678:	ldr	r9, [r8, #12]
   1567c:	bl	119ac <fwrite@plt>
   15680:	ldr	r3, [r4, #104]	; 0x68
   15684:	movw	r1, #35136	; 0x8940
   15688:	movt	r1, #1
   1568c:	ldr	ip, [r4, #108]	; 0x6c
   15690:	ldr	r0, [r5, #4]
   15694:	adds	r3, r3, #1
   15698:	ldr	r2, [sl, #8]
   1569c:	adc	ip, ip, #0
   156a0:	str	r3, [r4, #104]	; 0x68
   156a4:	str	ip, [r4, #108]	; 0x6c
   156a8:	bl	11a3c <fprintf@plt>
   156ac:	ldr	r3, [r4, #112]	; 0x70
   156b0:	mov	r0, #10
   156b4:	ldr	r2, [r4, #116]	; 0x74
   156b8:	ldr	r1, [r5, #4]
   156bc:	adds	r3, r3, #1
   156c0:	adc	r2, r2, #0
   156c4:	str	r3, [r4, #112]	; 0x70
   156c8:	str	r2, [r4, #116]	; 0x74
   156cc:	bl	11ab4 <fputc@plt>
   156d0:	ldr	ip, [r4, #120]	; 0x78
   156d4:	mov	r1, #1
   156d8:	mov	r2, #9
   156dc:	movw	r0, #35192	; 0x8978
   156e0:	movt	r0, #1
   156e4:	ldr	lr, [r4, #124]	; 0x7c
   156e8:	ldr	r3, [r5, #4]
   156ec:	adds	ip, ip, r1
   156f0:	adc	lr, lr, #0
   156f4:	str	ip, [r4, #120]	; 0x78
   156f8:	str	lr, [r4, #124]	; 0x7c
   156fc:	bl	119ac <fwrite@plt>
   15700:	ldr	r3, [r4, #128]	; 0x80
   15704:	movw	r1, #35136	; 0x8940
   15708:	movt	r1, #1
   1570c:	ldr	ip, [r4, #132]	; 0x84
   15710:	ldr	r0, [r5, #4]
   15714:	adds	r3, r3, #1
   15718:	ldr	r2, [r9, #8]
   1571c:	adc	ip, ip, #0
   15720:	str	r3, [r4, #128]	; 0x80
   15724:	str	ip, [r4, #132]	; 0x84
   15728:	bl	11a3c <fprintf@plt>
   1572c:	ldr	r3, [r4, #136]	; 0x88
   15730:	mov	r0, #10
   15734:	ldr	r2, [r4, #140]	; 0x8c
   15738:	ldr	r1, [r5, #4]
   1573c:	adds	r3, r3, #1
   15740:	adc	r2, r2, #0
   15744:	str	r3, [r4, #136]	; 0x88
   15748:	str	r2, [r4, #140]	; 0x8c
   1574c:	bl	11ab4 <fputc@plt>
   15750:	ldr	ip, [r4, #144]	; 0x90
   15754:	mov	r1, #1
   15758:	movw	r0, #35204	; 0x8984
   1575c:	movt	r0, #1
   15760:	mov	r2, #12
   15764:	ldr	lr, [r4, #148]	; 0x94
   15768:	ldr	r3, [r5, #4]
   1576c:	adds	ip, ip, r1
   15770:	adc	lr, lr, #0
   15774:	str	ip, [r4, #144]	; 0x90
   15778:	str	lr, [r4, #148]	; 0x94
   1577c:	bl	119ac <fwrite@plt>
   15780:	ldr	r3, [r8, #16]
   15784:	cmp	r3, #7
   15788:	ldrls	pc, [pc, r3, lsl #2]
   1578c:	b	159ac <__generate_code_for_binary_boolean_expression@@Base+0x390>
   15790:	andeq	r5, r1, r0, lsl r8
   15794:	andeq	r5, r1, ip, asr r8
   15798:	andeq	r5, r1, r8, lsr #17
   1579c:	strdeq	r5, [r1], -r4
   157a0:	andeq	r5, r1, r0, asr #18
   157a4:	andeq	r5, r1, r0, asr #18
   157a8:			; <UNDEFINED> instruction: 0x000157b0
   157ac:	andeq	r5, r1, ip, asr r9
   157b0:	ldr	ip, [r4, #208]	; 0xd0
   157b4:	mov	r2, r6
   157b8:	mov	r3, r7
   157bc:	movw	r1, #35300	; 0x89e4
   157c0:	movt	r1, #1
   157c4:	ldr	lr, [r4, #212]	; 0xd4
   157c8:	ldr	r0, [r5, #4]
   157cc:	adds	ip, ip, #1
   157d0:	adc	lr, lr, #0
   157d4:	str	ip, [r4, #208]	; 0xd0
   157d8:	str	lr, [r4, #212]	; 0xd4
   157dc:	bl	11a3c <fprintf@plt>
   157e0:	ldr	r3, [r4, #248]	; 0xf8
   157e4:	ldr	r2, [r4, #252]	; 0xfc
   157e8:	adds	r3, r3, #1
   157ec:	adc	r2, r2, #0
   157f0:	str	r3, [r4, #248]	; 0xf8
   157f4:	str	r2, [r4, #252]	; 0xfc
   157f8:	ldrd	r4, [sp]
   157fc:	ldrd	r6, [sp, #8]
   15800:	ldrd	r8, [sp, #16]
   15804:	ldr	sl, [sp, #24]
   15808:	add	sp, sp, #28
   1580c:	pop	{pc}		; (ldr pc, [sp], #4)
   15810:	ldr	ip, [r4, #160]	; 0xa0
   15814:	mov	r2, r6
   15818:	mov	r3, r7
   1581c:	movw	r1, #35220	; 0x8994
   15820:	movt	r1, #1
   15824:	ldr	lr, [r4, #164]	; 0xa4
   15828:	ldr	r0, [r5, #4]
   1582c:	adds	ip, ip, #1
   15830:	adc	lr, lr, #0
   15834:	str	ip, [r4, #160]	; 0xa0
   15838:	str	lr, [r4, #164]	; 0xa4
   1583c:	bl	11a3c <fprintf@plt>
   15840:	ldr	r3, [r4, #216]	; 0xd8
   15844:	ldr	r2, [r4, #220]	; 0xdc
   15848:	adds	r3, r3, #1
   1584c:	adc	r2, r2, #0
   15850:	str	r3, [r4, #216]	; 0xd8
   15854:	str	r2, [r4, #220]	; 0xdc
   15858:	b	157f8 <__generate_code_for_binary_boolean_expression@@Base+0x1dc>
   1585c:	ldr	ip, [r4, #168]	; 0xa8
   15860:	mov	r2, r6
   15864:	mov	r3, r7
   15868:	movw	r1, #35240	; 0x89a8
   1586c:	movt	r1, #1
   15870:	ldr	lr, [r4, #172]	; 0xac
   15874:	ldr	r0, [r5, #4]
   15878:	adds	ip, ip, #1
   1587c:	adc	lr, lr, #0
   15880:	str	ip, [r4, #168]	; 0xa8
   15884:	str	lr, [r4, #172]	; 0xac
   15888:	bl	11a3c <fprintf@plt>
   1588c:	ldr	r3, [r4, #224]	; 0xe0
   15890:	ldr	r2, [r4, #228]	; 0xe4
   15894:	adds	r3, r3, #1
   15898:	adc	r2, r2, #0
   1589c:	str	r3, [r4, #224]	; 0xe0
   158a0:	str	r2, [r4, #228]	; 0xe4
   158a4:	b	157f8 <__generate_code_for_binary_boolean_expression@@Base+0x1dc>
   158a8:	ldr	ip, [r4, #176]	; 0xb0
   158ac:	mov	r2, r6
   158b0:	mov	r3, r7
   158b4:	movw	r1, #35260	; 0x89bc
   158b8:	movt	r1, #1
   158bc:	ldr	lr, [r4, #180]	; 0xb4
   158c0:	ldr	r0, [r5, #4]
   158c4:	adds	ip, ip, #1
   158c8:	adc	lr, lr, #0
   158cc:	str	ip, [r4, #176]	; 0xb0
   158d0:	str	lr, [r4, #180]	; 0xb4
   158d4:	bl	11a3c <fprintf@plt>
   158d8:	ldr	r3, [r4, #232]	; 0xe8
   158dc:	ldr	r2, [r4, #236]	; 0xec
   158e0:	adds	r3, r3, #1
   158e4:	adc	r2, r2, #0
   158e8:	str	r3, [r4, #232]	; 0xe8
   158ec:	str	r2, [r4, #236]	; 0xec
   158f0:	b	157f8 <__generate_code_for_binary_boolean_expression@@Base+0x1dc>
   158f4:	ldr	ip, [r4, #184]	; 0xb8
   158f8:	mov	r2, r6
   158fc:	mov	r3, r7
   15900:	movw	r1, #35280	; 0x89d0
   15904:	movt	r1, #1
   15908:	ldr	lr, [r4, #188]	; 0xbc
   1590c:	ldr	r0, [r5, #4]
   15910:	adds	ip, ip, #1
   15914:	adc	lr, lr, #0
   15918:	str	ip, [r4, #184]	; 0xb8
   1591c:	str	lr, [r4, #188]	; 0xbc
   15920:	bl	11a3c <fprintf@plt>
   15924:	ldr	r3, [r4, #240]	; 0xf0
   15928:	ldr	r2, [r4, #244]	; 0xf4
   1592c:	adds	r3, r3, #1
   15930:	adc	r2, r2, #0
   15934:	str	r3, [r4, #240]	; 0xf0
   15938:	str	r2, [r4, #244]	; 0xf4
   1593c:	b	157f8 <__generate_code_for_binary_boolean_expression@@Base+0x1dc>
   15940:	ldr	r3, [r4, #192]	; 0xc0
   15944:	ldr	r2, [r4, #196]	; 0xc4
   15948:	adds	r3, r3, #1
   1594c:	adc	r2, r2, #0
   15950:	str	r3, [r4, #192]	; 0xc0
   15954:	str	r2, [r4, #196]	; 0xc4
   15958:	b	157f8 <__generate_code_for_binary_boolean_expression@@Base+0x1dc>
   1595c:	ldr	ip, [r4, #200]	; 0xc8
   15960:	mov	r2, r6
   15964:	mov	r3, r7
   15968:	movw	r1, #35320	; 0x89f8
   1596c:	movt	r1, #1
   15970:	ldr	lr, [r4, #204]	; 0xcc
   15974:	ldr	r0, [r5, #4]
   15978:	adds	ip, ip, #1
   1597c:	adc	lr, lr, #0
   15980:	str	ip, [r4, #200]	; 0xc8
   15984:	str	lr, [r4, #204]	; 0xcc
   15988:	bl	11a3c <fprintf@plt>
   1598c:	ldr	r2, [pc, #116]	; 15a08 <__generate_code_for_binary_boolean_expression@@Base+0x3ec>
   15990:	ldr	r3, [r2]
   15994:	ldr	r1, [r2, #4]
   15998:	adds	r3, r3, #1
   1599c:	adc	r1, r1, #0
   159a0:	str	r3, [r2]
   159a4:	str	r1, [r2, #4]
   159a8:	b	157f8 <__generate_code_for_binary_boolean_expression@@Base+0x1dc>
   159ac:	ldr	ip, [r4, #152]	; 0x98
   159b0:	mov	r1, #1
   159b4:	movw	r3, #39584	; 0x9aa0
   159b8:	movt	r3, #2
   159bc:	mov	r2, #31
   159c0:	ldr	lr, [r4, #156]	; 0x9c
   159c4:	movw	r0, #35340	; 0x8a0c
   159c8:	movt	r0, #1
   159cc:	ldr	r3, [r3]
   159d0:	adds	ip, ip, r1
   159d4:	adc	lr, lr, #0
   159d8:	str	ip, [r4, #152]	; 0x98
   159dc:	str	lr, [r4, #156]	; 0x9c
   159e0:	bl	119ac <fwrite@plt>
   159e4:	ldr	r2, [pc, #32]	; 15a0c <__generate_code_for_binary_boolean_expression@@Base+0x3f0>
   159e8:	mov	r0, #1
   159ec:	ldr	r3, [r2, #-8]
   159f0:	ldr	r1, [r2, #-4]
   159f4:	adds	r3, r3, r0
   159f8:	adc	r1, r1, #0
   159fc:	str	r3, [r2, #-8]
   15a00:	str	r1, [r2, #-4]
   15a04:	bl	11a18 <exit@plt>
   15a08:	andeq	sl, r2, r8, lsr r5
   15a0c:	andeq	sl, r2, r8, asr #10

00015a10 <__generate_code_for_unary_boolean_expression@@Base>:
   15a10:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15a14:	mov	r5, r0
   15a18:	movw	r0, #35372	; 0x8a2c
   15a1c:	movt	r0, #1
   15a20:	ldr	r4, [pc, #352]	; 15b88 <__generate_code_for_unary_boolean_expression@@Base+0x178>
   15a24:	strd	r6, [sp, #8]
   15a28:	mov	r6, r2
   15a2c:	mov	r7, r3
   15a30:	str	lr, [sp, #28]
   15a34:	mov	r2, #11
   15a38:	strd	r8, [sp, #16]
   15a3c:	mov	r8, r1
   15a40:	mov	r1, #1
   15a44:	ldr	r3, [r5, #4]
   15a48:	str	sl, [sp, #24]
   15a4c:	ldr	ip, [r4]
   15a50:	ldr	lr, [r4, #4]
   15a54:	ldr	r9, [r8, #8]
   15a58:	adds	ip, ip, r1
   15a5c:	adc	lr, lr, #0
   15a60:	stm	r4, {ip, lr}
   15a64:	bl	119ac <fwrite@plt>
   15a68:	ldr	r3, [r4, #8]
   15a6c:	mov	r1, #1
   15a70:	mov	r2, #9
   15a74:	movw	r0, #35192	; 0x8978
   15a78:	movt	r0, #1
   15a7c:	ldr	lr, [r4, #12]
   15a80:	adds	ip, r3, r1
   15a84:	ldr	r3, [r5, #4]
   15a88:	adc	lr, lr, #0
   15a8c:	str	ip, [r4, #8]
   15a90:	str	lr, [r4, #12]
   15a94:	bl	119ac <fwrite@plt>
   15a98:	ldr	r3, [r4, #16]
   15a9c:	movw	r1, #35136	; 0x8940
   15aa0:	movt	r1, #1
   15aa4:	ldr	ip, [r4, #20]
   15aa8:	ldr	r0, [r5, #4]
   15aac:	adds	r3, r3, #1
   15ab0:	ldr	r2, [r9, #8]
   15ab4:	adc	ip, ip, #0
   15ab8:	str	r3, [r4, #16]
   15abc:	str	ip, [r4, #20]
   15ac0:	bl	11a3c <fprintf@plt>
   15ac4:	ldr	r3, [r8, #16]
   15ac8:	cmp	r3, #8
   15acc:	bne	15b30 <__generate_code_for_unary_boolean_expression@@Base+0x120>
   15ad0:	ldr	ip, [r4, #32]
   15ad4:	mov	r2, r6
   15ad8:	mov	r3, r7
   15adc:	movw	r1, #35240	; 0x89a8
   15ae0:	movt	r1, #1
   15ae4:	ldr	lr, [r4, #36]	; 0x24
   15ae8:	ldr	r0, [r5, #4]
   15aec:	adds	ip, ip, #1
   15af0:	adc	lr, lr, #0
   15af4:	str	ip, [r4, #32]
   15af8:	str	lr, [r4, #36]	; 0x24
   15afc:	bl	11a3c <fprintf@plt>
   15b00:	ldr	r3, [r4, #40]	; 0x28
   15b04:	ldr	r2, [r4, #44]	; 0x2c
   15b08:	ldrd	r6, [sp, #8]
   15b0c:	adds	r3, r3, #1
   15b10:	ldrd	r8, [sp, #16]
   15b14:	adc	r2, r2, #0
   15b18:	str	r3, [r4, #40]	; 0x28
   15b1c:	ldr	sl, [sp, #24]
   15b20:	str	r2, [r4, #44]	; 0x2c
   15b24:	ldrd	r4, [sp]
   15b28:	add	sp, sp, #28
   15b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b30:	ldr	ip, [r4, #24]
   15b34:	mov	r1, #1
   15b38:	movw	r3, #39584	; 0x9aa0
   15b3c:	movt	r3, #2
   15b40:	mov	r2, #31
   15b44:	ldr	lr, [r4, #28]
   15b48:	movw	r0, #35340	; 0x8a0c
   15b4c:	movt	r0, #1
   15b50:	ldr	r3, [r3]
   15b54:	adds	ip, ip, r1
   15b58:	adc	lr, lr, #0
   15b5c:	str	ip, [r4, #24]
   15b60:	str	lr, [r4, #28]
   15b64:	bl	119ac <fwrite@plt>
   15b68:	ldr	r3, [r4, #48]	; 0x30
   15b6c:	mov	r0, #1
   15b70:	ldr	r2, [r4, #52]	; 0x34
   15b74:	adds	r3, r3, r0
   15b78:	adc	r2, r2, #0
   15b7c:	str	r3, [r4, #48]	; 0x30
   15b80:	str	r2, [r4, #52]	; 0x34
   15b84:	bl	11a18 <exit@plt>
   15b88:	andeq	sl, r2, r8, asr #10

00015b8c <__generate_code_for_if_expression@@Base>:
   15b8c:	ldr	ip, [r1, #16]
   15b90:	str	r4, [sp, #-8]!
   15b94:	ldr	r4, [pc, #120]	; 15c14 <__generate_code_for_if_expression@@Base+0x88>
   15b98:	str	lr, [sp, #4]
   15b9c:	cmp	ip, #8
   15ba0:	beq	15bdc <__generate_code_for_if_expression@@Base+0x50>
   15ba4:	ldmdb	r4, {ip, lr}
   15ba8:	adds	ip, ip, #1
   15bac:	adc	lr, lr, #0
   15bb0:	stmdb	r4, {ip, lr}
   15bb4:	bl	1561c <__generate_code_for_binary_boolean_expression@@Base>
   15bb8:	ldr	r3, [r4, #16]
   15bbc:	ldr	r2, [r4, #20]
   15bc0:	adds	r3, r3, #1
   15bc4:	adc	r2, r2, #0
   15bc8:	str	r3, [r4, #16]
   15bcc:	str	r2, [r4, #20]
   15bd0:	ldr	r4, [sp]
   15bd4:	add	sp, sp, #4
   15bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bdc:	ldm	r4, {ip, lr}
   15be0:	adds	ip, ip, #1
   15be4:	adc	lr, lr, #0
   15be8:	stm	r4, {ip, lr}
   15bec:	bl	15a10 <__generate_code_for_unary_boolean_expression@@Base>
   15bf0:	ldr	r3, [r4, #8]
   15bf4:	ldr	r2, [r4, #12]
   15bf8:	adds	r3, r3, #1
   15bfc:	adc	r2, r2, #0
   15c00:	str	r3, [r4, #8]
   15c04:	str	r2, [r4, #12]
   15c08:	ldr	r4, [sp]
   15c0c:	add	sp, sp, #4
   15c10:	pop	{pc}		; (ldr pc, [sp], #4)
   15c14:	andeq	sl, r2, r8, lsl #11

00015c18 <__generate_code_for_body@@Base>:
   15c18:	strd	r4, [sp, #-16]!
   15c1c:	ldr	r4, [pc, #288]	; 15d44 <__generate_code_for_body@@Base+0x12c>
   15c20:	str	r6, [sp, #8]
   15c24:	str	lr, [sp, #12]
   15c28:	ldr	r3, [r4, #-8]
   15c2c:	ldr	r2, [r4, #-4]
   15c30:	adds	r3, r3, #1
   15c34:	adc	r2, r2, #0
   15c38:	cmp	r1, #0
   15c3c:	str	r3, [r4, #-8]
   15c40:	str	r2, [r4, #-4]
   15c44:	beq	15ccc <__generate_code_for_body@@Base+0xb4>
   15c48:	mov	r6, r0
   15c4c:	b	15c90 <__generate_code_for_body@@Base+0x78>
   15c50:	ldr	r3, [r4, #8]
   15c54:	mov	r0, r6
   15c58:	ldr	r2, [r4, #12]
   15c5c:	adds	r3, r3, #1
   15c60:	adc	r2, r2, #0
   15c64:	str	r3, [r4, #8]
   15c68:	str	r2, [r4, #12]
   15c6c:	bl	15480 <__generate_code_for_return@@Base>
   15c70:	ldr	r3, [r4, #24]
   15c74:	ldr	r2, [r4, #28]
   15c78:	adds	r3, r3, #1
   15c7c:	adc	r2, r2, #0
   15c80:	subs	r1, r5, #0
   15c84:	str	r3, [r4, #24]
   15c88:	str	r2, [r4, #28]
   15c8c:	beq	15ccc <__generate_code_for_body@@Base+0xb4>
   15c90:	ldm	r1, {r3, r5}
   15c94:	cmp	r3, #3
   15c98:	beq	15c50 <__generate_code_for_body@@Base+0x38>
   15c9c:	cmp	r3, #4
   15ca0:	bne	15cf4 <__generate_code_for_body@@Base+0xdc>
   15ca4:	ldr	r3, [r4, #16]
   15ca8:	mov	r0, r6
   15cac:	ldr	r2, [r4, #20]
   15cb0:	adds	r3, r3, #1
   15cb4:	adc	r2, r2, #0
   15cb8:	str	r3, [r4, #16]
   15cbc:	str	r2, [r4, #20]
   15cc0:	bl	15d48 <__generate_code_for_if@@Base>
   15cc4:	subs	r1, r5, #0
   15cc8:	bne	15c90 <__generate_code_for_body@@Base+0x78>
   15ccc:	ldr	r3, [r4, #40]	; 0x28
   15cd0:	ldr	r2, [r4, #44]	; 0x2c
   15cd4:	ldr	r6, [sp, #8]
   15cd8:	adds	r3, r3, #1
   15cdc:	adc	r2, r2, #0
   15ce0:	str	r3, [r4, #40]	; 0x28
   15ce4:	str	r2, [r4, #44]	; 0x2c
   15ce8:	ldrd	r4, [sp]
   15cec:	add	sp, sp, #12
   15cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   15cf4:	ldm	r4, {ip, lr}
   15cf8:	mov	r1, #1
   15cfc:	movw	r3, #39584	; 0x9aa0
   15d00:	movt	r3, #2
   15d04:	mov	r2, #52	; 0x34
   15d08:	movw	r0, #35384	; 0x8a38
   15d0c:	movt	r0, #1
   15d10:	ldr	r3, [r3]
   15d14:	adds	ip, ip, r1
   15d18:	adc	lr, lr, #0
   15d1c:	stm	r4, {ip, lr}
   15d20:	bl	119ac <fwrite@plt>
   15d24:	ldr	r3, [r4, #32]
   15d28:	mov	r0, #1
   15d2c:	ldr	r2, [r4, #36]	; 0x24
   15d30:	adds	r3, r3, r0
   15d34:	adc	r2, r2, #0
   15d38:	str	r3, [r4, #32]
   15d3c:	str	r2, [r4, #36]	; 0x24
   15d40:	bl	11a18 <exit@plt>
   15d44:	andeq	sl, r2, r8, lsr #11

00015d48 <__generate_code_for_if@@Base>:
   15d48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d4c:	mov	r5, r0
   15d50:	ldr	r4, [pc, #412]	; 15ef4 <__generate_code_for_if@@Base+0x1ac>
   15d54:	strd	r6, [sp, #8]
   15d58:	mov	r7, r1
   15d5c:	ldr	r1, [r1, #8]
   15d60:	strd	r8, [sp, #16]
   15d64:	ldr	r6, [r0, #8]
   15d68:	strd	sl, [sp, #24]
   15d6c:	ldr	r3, [r4]
   15d70:	str	lr, [sp, #32]
   15d74:	sub	sp, sp, #4
   15d78:	ldr	r2, [r4, #4]
   15d7c:	ldr	sl, [r0, #12]
   15d80:	adds	r3, r3, #1
   15d84:	ldr	ip, [r1, #16]
   15d88:	adc	r2, r2, #0
   15d8c:	adds	lr, r6, #1
   15d90:	str	r3, [r4]
   15d94:	adc	r3, sl, #0
   15d98:	str	r2, [r4, #4]
   15d9c:	str	lr, [r0, #8]
   15da0:	cmp	ip, #8
   15da4:	str	r3, [r0, #12]
   15da8:	beq	15eb8 <__generate_code_for_if@@Base+0x170>
   15dac:	ldr	ip, [r4, #-88]	; 0xffffffa8
   15db0:	mov	r2, r6
   15db4:	mov	r3, sl
   15db8:	ldr	lr, [r4, #-84]	; 0xffffffac
   15dbc:	adds	ip, ip, #1
   15dc0:	adc	lr, lr, #0
   15dc4:	str	ip, [r4, #-88]	; 0xffffffa8
   15dc8:	str	lr, [r4, #-84]	; 0xffffffac
   15dcc:	bl	1561c <__generate_code_for_binary_boolean_expression@@Base>
   15dd0:	ldr	r3, [r4, #-64]	; 0xffffffc0
   15dd4:	ldr	r2, [r4, #-60]	; 0xffffffc4
   15dd8:	adds	r3, r3, #1
   15ddc:	adc	r2, r2, #0
   15de0:	str	r3, [r4, #-64]	; 0xffffffc0
   15de4:	str	r2, [r4, #-60]	; 0xffffffc4
   15de8:	ldr	r3, [r4, #8]
   15dec:	mov	r0, r5
   15df0:	ldr	r2, [r4, #12]
   15df4:	ldr	r1, [r7, #12]
   15df8:	adds	r3, r3, #1
   15dfc:	adc	r2, r2, #0
   15e00:	str	r3, [r4, #8]
   15e04:	str	r2, [r4, #12]
   15e08:	bl	15c18 <__generate_code_for_body@@Base>
   15e0c:	ldr	r0, [r4, #16]
   15e10:	mov	r2, r6
   15e14:	mov	r3, sl
   15e18:	movw	r1, #35440	; 0x8a70
   15e1c:	movt	r1, #1
   15e20:	ldr	lr, [r4, #20]
   15e24:	adds	ip, r0, #1
   15e28:	ldr	r0, [r5, #4]
   15e2c:	adc	lr, lr, #0
   15e30:	str	ip, [r4, #16]
   15e34:	str	lr, [r4, #20]
   15e38:	bl	11a3c <fprintf@plt>
   15e3c:	ldr	r1, [r7, #16]
   15e40:	cmp	r1, #0
   15e44:	beq	15e9c <__generate_code_for_if@@Base+0x154>
   15e48:	ldr	r3, [r4, #24]
   15e4c:	mov	r0, r5
   15e50:	ldr	r2, [r4, #28]
   15e54:	adds	r3, r3, #1
   15e58:	adc	r2, r2, #0
   15e5c:	str	r3, [r4, #24]
   15e60:	str	r2, [r4, #28]
   15e64:	bl	15c18 <__generate_code_for_body@@Base>
   15e68:	ldr	r3, [r4, #40]	; 0x28
   15e6c:	ldr	r2, [r4, #44]	; 0x2c
   15e70:	adds	r3, r3, #1
   15e74:	adc	r2, r2, #0
   15e78:	str	r3, [r4, #40]	; 0x28
   15e7c:	str	r2, [r4, #44]	; 0x2c
   15e80:	add	sp, sp, #4
   15e84:	ldrd	r4, [sp]
   15e88:	ldrd	r6, [sp, #8]
   15e8c:	ldrd	r8, [sp, #16]
   15e90:	ldrd	sl, [sp, #24]
   15e94:	add	sp, sp, #32
   15e98:	pop	{pc}		; (ldr pc, [sp], #4)
   15e9c:	ldr	r3, [r4, #32]
   15ea0:	ldr	r2, [r4, #36]	; 0x24
   15ea4:	adds	r3, r3, #1
   15ea8:	adc	r2, r2, #0
   15eac:	str	r3, [r4, #32]
   15eb0:	str	r2, [r4, #36]	; 0x24
   15eb4:	b	15e80 <__generate_code_for_if@@Base+0x138>
   15eb8:	mov	fp, r4
   15ebc:	mov	r2, r6
   15ec0:	ldrd	r8, [fp, #-80]!	; 0xffffffb0
   15ec4:	mov	r3, sl
   15ec8:	adds	ip, r8, #1
   15ecc:	adc	lr, r9, #0
   15ed0:	stm	fp, {ip, lr}
   15ed4:	bl	15a10 <__generate_code_for_unary_boolean_expression@@Base>
   15ed8:	ldr	r3, [fp, #8]
   15edc:	ldr	r2, [fp, #12]
   15ee0:	adds	r3, r3, #1
   15ee4:	adc	r2, r2, #0
   15ee8:	str	r3, [fp, #8]
   15eec:	str	r2, [fp, #12]
   15ef0:	b	15de8 <__generate_code_for_if@@Base+0xa0>
   15ef4:	ldrdeq	sl, [r2], -r8

00015ef8 <__generate_code_for_function@@Base>:
   15ef8:	strd	r4, [sp, #-16]!
   15efc:	mov	r5, r1
   15f00:	movw	r1, #35456	; 0x8a80
   15f04:	movt	r1, #1
   15f08:	ldr	r4, [pc, #112]	; 15f80 <__generate_code_for_function@@Base+0x88>
   15f0c:	ldr	r2, [r5, #8]
   15f10:	str	r6, [sp, #8]
   15f14:	mov	r6, r0
   15f18:	ldr	r0, [r0, #4]
   15f1c:	str	lr, [sp, #12]
   15f20:	ldm	r4, {r3, ip}
   15f24:	adds	r3, r3, #1
   15f28:	adc	ip, ip, #0
   15f2c:	stm	r4, {r3, ip}
   15f30:	bl	11a3c <fprintf@plt>
   15f34:	ldr	r3, [r4, #8]
   15f38:	mov	r0, r6
   15f3c:	ldr	r2, [r4, #12]
   15f40:	ldr	r1, [r5, #12]
   15f44:	adds	r3, r3, #1
   15f48:	adc	r2, r2, #0
   15f4c:	str	r3, [r4, #8]
   15f50:	str	r2, [r4, #12]
   15f54:	bl	15c18 <__generate_code_for_body@@Base>
   15f58:	ldr	r3, [r4, #16]
   15f5c:	ldr	r2, [r4, #20]
   15f60:	ldr	r6, [sp, #8]
   15f64:	adds	r3, r3, #1
   15f68:	adc	r2, r2, #0
   15f6c:	str	r3, [r4, #16]
   15f70:	str	r2, [r4, #20]
   15f74:	ldrd	r4, [sp]
   15f78:	add	sp, sp, #12
   15f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f80:	andeq	sl, r2, r8, lsl #12

00015f84 <__generate_code_for_main@@Base>:
   15f84:	ldr	r3, [r1]
   15f88:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15f8c:	strd	r6, [sp, #8]
   15f90:	strd	r8, [sp, #16]
   15f94:	str	sl, [sp, #24]
   15f98:	cmp	r3, #2
   15f9c:	str	lr, [sp, #28]
   15fa0:	bne	1605c <__generate_code_for_main@@Base+0xd8>
   15fa4:	ldr	r5, [pc, #260]	; 160b0 <__generate_code_for_main@@Base+0x12c>
   15fa8:	mov	r6, r1
   15fac:	mov	r7, r0
   15fb0:	movw	r1, #35456	; 0x8a80
   15fb4:	movt	r1, #1
   15fb8:	ldr	r0, [r0, #4]
   15fbc:	ldr	r3, [r5]
   15fc0:	mov	r4, r5
   15fc4:	ldrd	r8, [r4, #-32]!	; 0xffffffe0
   15fc8:	ldr	r2, [r5, #4]
   15fcc:	adds	r3, r3, #1
   15fd0:	str	r3, [r5]
   15fd4:	adc	r2, r2, #0
   15fd8:	adds	r3, r8, #1
   15fdc:	adc	ip, r9, #0
   15fe0:	str	r2, [r5, #4]
   15fe4:	ldr	r2, [r6, #8]
   15fe8:	stm	r4, {r3, ip}
   15fec:	bl	11a3c <fprintf@plt>
   15ff0:	ldr	r3, [r4, #8]
   15ff4:	mov	r0, r7
   15ff8:	ldr	r2, [r4, #12]
   15ffc:	ldr	r1, [r6, #12]
   16000:	adds	r3, r3, #1
   16004:	adc	r2, r2, #0
   16008:	str	r3, [r4, #8]
   1600c:	str	r2, [r4, #12]
   16010:	bl	15c18 <__generate_code_for_body@@Base>
   16014:	ldr	r2, [r4, #16]
   16018:	ldr	r3, [r5, #8]
   1601c:	ldr	r0, [r4, #20]
   16020:	adds	r2, r2, #1
   16024:	ldr	r1, [r5, #12]
   16028:	ldrd	r6, [sp, #8]
   1602c:	adc	r0, r0, #0
   16030:	adds	r3, r3, #1
   16034:	ldrd	r8, [sp, #16]
   16038:	str	r3, [r5, #8]
   1603c:	ldr	sl, [sp, #24]
   16040:	str	r2, [r4, #16]
   16044:	adc	r2, r1, #0
   16048:	str	r0, [r4, #20]
   1604c:	str	r2, [r5, #12]
   16050:	ldrd	r4, [sp]
   16054:	add	sp, sp, #28
   16058:	pop	{pc}		; (ldr pc, [sp], #4)
   1605c:	ldr	r4, [pc, #76]	; 160b0 <__generate_code_for_main@@Base+0x12c>
   16060:	mov	r1, #1
   16064:	movw	r3, #39584	; 0x9aa0
   16068:	movt	r3, #2
   1606c:	mov	r2, #46	; 0x2e
   16070:	movw	r0, #35464	; 0x8a88
   16074:	movt	r0, #1
   16078:	ldr	r3, [r3]
   1607c:	ldmdb	r4, {ip, lr}
   16080:	adds	ip, ip, r1
   16084:	adc	lr, lr, #0
   16088:	stmdb	r4, {ip, lr}
   1608c:	bl	119ac <fwrite@plt>
   16090:	ldr	r3, [r4, #16]
   16094:	mov	r0, #1
   16098:	ldr	r2, [r4, #20]
   1609c:	adds	r3, r3, r0
   160a0:	adc	r2, r2, #0
   160a4:	str	r3, [r4, #16]
   160a8:	str	r2, [r4, #20]
   160ac:	bl	11a18 <exit@plt>
   160b0:	andeq	sl, r2, r8, lsr #12

000160b4 <__generate_code@@Base>:
   160b4:	strd	r4, [sp, #-16]!
   160b8:	mov	r5, r0
   160bc:	mov	r2, #21
   160c0:	ldr	r4, [pc, #124]	; 16144 <__generate_code@@Base+0x90>
   160c4:	movw	r0, #35512	; 0x8ab8
   160c8:	movt	r0, #1
   160cc:	ldr	r3, [r5, #4]
   160d0:	str	r6, [sp, #8]
   160d4:	mov	r6, r1
   160d8:	mov	r1, #1
   160dc:	str	lr, [sp, #12]
   160e0:	ldr	ip, [r4, #-8]
   160e4:	ldr	lr, [r4, #-4]
   160e8:	adds	ip, ip, r1
   160ec:	adc	lr, lr, #0
   160f0:	stmdb	r4, {ip, lr}
   160f4:	bl	119ac <fwrite@plt>
   160f8:	ldr	r3, [r4]
   160fc:	mov	r1, r6
   16100:	mov	r0, r5
   16104:	ldr	r2, [r4, #4]
   16108:	adds	r3, r3, #1
   1610c:	adc	r2, r2, #0
   16110:	str	r3, [r4]
   16114:	str	r2, [r4, #4]
   16118:	bl	15f84 <__generate_code_for_main@@Base>
   1611c:	ldr	r3, [r4, #8]
   16120:	ldr	r2, [r4, #12]
   16124:	ldr	r6, [sp, #8]
   16128:	adds	r3, r3, #1
   1612c:	adc	r2, r2, #0
   16130:	str	r3, [r4, #8]
   16134:	str	r2, [r4, #12]
   16138:	ldrd	r4, [sp]
   1613c:	add	sp, sp, #12
   16140:	pop	{pc}		; (ldr pc, [sp], #4)
   16144:	andeq	sl, r2, r8, asr #12

00016148 <generate_code@@Base>:
   16148:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1614c:	movw	r4, #42040	; 0xa438
   16150:	movt	r4, #2
   16154:	ldr	r3, [r4, #544]	; 0x220
   16158:	add	r5, r4, #544	; 0x220
   1615c:	strd	r6, [sp, #8]
   16160:	mov	r7, r0
   16164:	ldr	r2, [r4, #548]	; 0x224
   16168:	str	r8, [sp, #16]
   1616c:	ldr	r0, [r0]
   16170:	adds	r3, r3, #1
   16174:	str	lr, [sp, #20]
   16178:	adc	r2, r2, #0
   1617c:	str	r3, [r4, #544]	; 0x220
   16180:	str	r2, [r4, #548]	; 0x224
   16184:	bl	15358 <build_ast@@Base>
   16188:	ldr	r3, [r4, #520]	; 0x208
   1618c:	mov	r1, #1
   16190:	mov	r6, r0
   16194:	mov	r2, #21
   16198:	movw	r0, #35512	; 0x8ab8
   1619c:	movt	r0, #1
   161a0:	ldr	ip, [r4, #552]	; 0x228
   161a4:	ldr	lr, [r4, #524]	; 0x20c
   161a8:	ldr	r8, [r4, #556]	; 0x22c
   161ac:	adds	ip, ip, r1
   161b0:	str	ip, [r4, #552]	; 0x228
   161b4:	adc	r8, r8, #0
   161b8:	adds	ip, r3, r1
   161bc:	ldr	r3, [r7, #4]
   161c0:	adc	lr, lr, #0
   161c4:	str	ip, [r4, #520]	; 0x208
   161c8:	str	lr, [r4, #524]	; 0x20c
   161cc:	str	r8, [r4, #556]	; 0x22c
   161d0:	bl	119ac <fwrite@plt>
   161d4:	ldr	r3, [r4, #528]	; 0x210
   161d8:	mov	r0, r7
   161dc:	mov	r1, r6
   161e0:	ldr	r2, [r4, #532]	; 0x214
   161e4:	adds	r3, r3, #1
   161e8:	adc	r2, r2, #0
   161ec:	str	r3, [r4, #528]	; 0x210
   161f0:	str	r2, [r4, #532]	; 0x214
   161f4:	bl	15f84 <__generate_code_for_main@@Base>
   161f8:	ldr	r2, [r4, #536]	; 0x218
   161fc:	mov	r0, r6
   16200:	ldr	ip, [r4, #540]	; 0x21c
   16204:	ldr	r3, [r4, #560]	; 0x230
   16208:	adds	r2, r2, #1
   1620c:	ldr	r1, [r4, #564]	; 0x234
   16210:	adc	ip, ip, #0
   16214:	str	r2, [r4, #536]	; 0x218
   16218:	adds	r3, r3, #1
   1621c:	str	ip, [r4, #540]	; 0x21c
   16220:	adc	r2, r1, #0
   16224:	str	r3, [r5, #16]
   16228:	str	r2, [r5, #20]
   1622c:	bl	138bc <free_node@@Base>
   16230:	ldr	r3, [r5, #24]
   16234:	ldr	r2, [r5, #28]
   16238:	ldrd	r6, [sp, #8]
   1623c:	adds	r3, r3, #1
   16240:	ldr	r8, [sp, #16]
   16244:	adc	r2, r2, #0
   16248:	str	r3, [r5, #24]
   1624c:	str	r2, [r5, #28]
   16250:	ldrd	r4, [sp]
   16254:	add	sp, sp, #20
   16258:	pop	{pc}		; (ldr pc, [sp], #4)
   1625c:	b	17500 <generate_code@@Base+0x13b8>
   16260:	push	{r4, r5, r6, r7, r8, lr}
   16264:	subs	r5, r1, #0
   16268:	popeq	{r4, r5, r6, r7, r8, pc}
   1626c:	mov	r4, r0
   16270:	bl	1625c <generate_code@@Base+0x114>
   16274:	ldr	r3, [r4]
   16278:	ldr	r2, [r4, #4]
   1627c:	adds	r6, r3, r0
   16280:	adc	r7, r2, r1
   16284:	subs	r5, r5, #1
   16288:	strd	r6, [r4], #8
   1628c:	bne	16270 <generate_code@@Base+0x128>
   16290:	pop	{r4, r5, r6, r7, r8, pc}
   16294:	ldr	r3, [pc, #20]	; 162b0 <generate_code@@Base+0x168>
   16298:	ldr	r2, [pc, #20]	; 162b4 <generate_code@@Base+0x16c>
   1629c:	add	r3, pc, r3
   162a0:	ldr	r3, [r3, r2]
   162a4:	ldmib	r3, {r0, r3}
   162a8:	add	r0, r0, r3
   162ac:	bx	lr
   162b0:	andeq	r2, r1, ip, asr sp
   162b4:	andeq	r0, r0, ip, lsr #1
   162b8:	ldr	r3, [pc, #28]	; 162dc <generate_code@@Base+0x194>
   162bc:	ldr	r2, [pc, #28]	; 162e0 <generate_code@@Base+0x198>
   162c0:	add	r3, pc, r3
   162c4:	ldr	r3, [r3, r2]
   162c8:	ldr	r2, [r3]
   162cc:	cmp	r2, #0
   162d0:	ldrne	r0, [r3, #20]
   162d4:	moveq	r0, #1
   162d8:	bx	lr
   162dc:	andeq	r2, r1, r8, lsr sp
   162e0:	andeq	r0, r0, ip, lsr #1
   162e4:	bx	lr
   162e8:	ldr	ip, [pc, #32]	; 16310 <generate_code@@Base+0x1c8>
   162ec:	mov	r3, #32
   162f0:	teq	r0, r1
   162f4:	movmi	r2, ip
   162f8:	movpl	r2, #0
   162fc:	subs	r3, r3, #1
   16300:	lsl	r1, r1, #1
   16304:	eor	r0, r2, r0, lsl #1
   16308:	bne	162f0 <generate_code@@Base+0x1a8>
   1630c:	bx	lr
   16310:	strbeq	r1, [r1], #3511	; 0xdb7
   16314:	ldr	r2, [pc, #60]	; 16358 <generate_code@@Base+0x210>
   16318:	ldr	r3, [pc, #60]	; 1635c <generate_code@@Base+0x214>
   1631c:	add	r2, pc, r2
   16320:	push	{r4, lr}
   16324:	ldr	r4, [r2, r3]
   16328:	ldr	r0, [r4]
   1632c:	cmp	r0, #0
   16330:	popeq	{r4, pc}
   16334:	ldr	r3, [pc, #36]	; 16360 <generate_code@@Base+0x218>
   16338:	ldr	r3, [r2, r3]
   1633c:	ldr	r3, [r3]
   16340:	cmp	r0, r3
   16344:	popeq	{r4, pc}
   16348:	bl	11a84 <fclose@plt>
   1634c:	mov	r3, #0
   16350:	str	r3, [r4]
   16354:	pop	{r4, pc}
   16358:	ldrdeq	r2, [r1], -ip
   1635c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   16360:	andeq	r0, r0, r0, lsr #1
   16364:	ldr	r3, [pc, #76]	; 163b8 <generate_code@@Base+0x270>
   16368:	ldr	r1, [pc, #76]	; 163bc <generate_code@@Base+0x274>
   1636c:	add	r3, pc, r3
   16370:	push	{r4, r5, r6, lr}
   16374:	mov	r5, r0
   16378:	ldr	r4, [r3, r1]
   1637c:	lsl	r1, r0, #2
   16380:	mov	r0, r4
   16384:	mov	r2, #1
   16388:	ldr	r3, [r0], #28
   1638c:	bl	119ac <fwrite@plt>
   16390:	cmp	r0, #1
   16394:	movne	r3, #1
   16398:	ldr	r0, [r4, #8]
   1639c:	strne	r3, [r4, #20]
   163a0:	ldr	r3, [r4, #4]
   163a4:	sub	r0, r0, r5
   163a8:	add	r3, r3, r5
   163ac:	str	r3, [r4, #4]
   163b0:	str	r0, [r4, #8]
   163b4:	pop	{r4, r5, r6, pc}
   163b8:	andeq	r2, r1, ip, lsl #25
   163bc:	andeq	r0, r0, ip, lsr #1
   163c0:	ldr	r3, [pc, #80]	; 16418 <generate_code@@Base+0x2d0>
   163c4:	ldr	r2, [pc, #80]	; 1641c <generate_code@@Base+0x2d4>
   163c8:	add	r3, pc, r3
   163cc:	push	{r4, r5, r6, lr}
   163d0:	mov	r5, r0
   163d4:	ldr	r4, [r3, r2]
   163d8:	ldr	r3, [r4, #8]
   163dc:	cmp	r3, #1024	; 0x400
   163e0:	bcs	163f8 <generate_code@@Base+0x2b0>
   163e4:	add	r0, r3, #7
   163e8:	add	r3, r5, r3
   163ec:	str	r3, [r4, #8]
   163f0:	add	r0, r4, r0, lsl #2
   163f4:	pop	{r4, r5, r6, pc}
   163f8:	mov	r0, #1024	; 0x400
   163fc:	bl	16364 <generate_code@@Base+0x21c>
   16400:	ldr	r3, [r4, #8]
   16404:	cmp	r3, #0
   16408:	addne	r2, r4, #4096	; 0x1000
   1640c:	ldrne	r2, [r2, #28]
   16410:	strne	r2, [r4, #28]
   16414:	b	163e4 <generate_code@@Base+0x29c>
   16418:	andeq	r2, r1, r0, lsr ip
   1641c:	andeq	r0, r0, ip, lsr #1
   16420:	ldr	r3, [pc, #192]	; 164e8 <generate_code@@Base+0x3a0>
   16424:	ldr	r2, [pc, #192]	; 164ec <generate_code@@Base+0x3a4>
   16428:	add	r3, pc, r3
   1642c:	push	{r4, r5, r6, lr}
   16430:	ldr	r4, [r3, r2]
   16434:	ldr	r2, [r4, #24]
   16438:	ldr	r3, [r4, #8]
   1643c:	ldr	ip, [r4, #12]
   16440:	cmp	r2, #0
   16444:	sub	ip, ip, r3
   16448:	ble	164c4 <generate_code@@Base+0x37c>
   1644c:	cmp	ip, r0
   16450:	mov	r5, r0
   16454:	bcs	164b0 <generate_code@@Base+0x368>
   16458:	ldr	r2, [r4, #4]
   1645c:	cmp	ip, #0
   16460:	add	r2, r2, r3
   16464:	str	r2, [r4, #4]
   16468:	addne	r2, r4, #28
   1646c:	mov	r0, r4
   16470:	ldrne	r3, [r2, r3, lsl #2]
   16474:	mov	r6, #0
   16478:	strne	r3, [r4, #28]
   1647c:	ldr	r3, [r0], #28
   16480:	mov	r2, #4096	; 0x1000
   16484:	add	r0, r0, ip, lsl #2
   16488:	mov	r1, #1
   1648c:	str	ip, [r4, #12]
   16490:	str	r6, [r4, #8]
   16494:	bl	119c4 <fread@plt>
   16498:	ldr	r3, [r4, #12]
   1649c:	add	r0, r3, r0, lsr #2
   164a0:	cmp	r0, r5
   164a4:	str	r0, [r4, #12]
   164a8:	bcc	164cc <generate_code@@Base+0x384>
   164ac:	ldr	r3, [r4, #8]
   164b0:	add	r0, r3, #7
   164b4:	add	r5, r5, r3
   164b8:	str	r5, [r4, #8]
   164bc:	add	r0, r4, r0, lsl #2
   164c0:	pop	{r4, r5, r6, pc}
   164c4:	mov	r0, #0
   164c8:	pop	{r4, r5, r6, pc}
   164cc:	ldr	r3, [r4, #16]
   164d0:	str	r6, [r4, #12]
   164d4:	add	r5, r5, r3
   164d8:	sub	r5, r5, r0
   164dc:	str	r5, [r4, #16]
   164e0:	mov	r0, r6
   164e4:	pop	{r4, r5, r6, pc}
   164e8:	ldrdeq	r2, [r1], -r0
   164ec:	andeq	r0, r0, ip, lsr #1
   164f0:	push	{r4, r5, r6, lr}
   164f4:	ldr	r4, [pc, #92]	; 16558 <generate_code@@Base+0x410>
   164f8:	ldr	r3, [pc, #92]	; 1655c <generate_code@@Base+0x414>
   164fc:	add	r4, pc, r4
   16500:	ldr	r5, [r4, r3]
   16504:	ldr	r0, [r5]
   16508:	cmp	r0, #0
   1650c:	popne	{r4, r5, r6, pc}
   16510:	ldr	r0, [pc, #72]	; 16560 <generate_code@@Base+0x418>
   16514:	add	r0, pc, r0
   16518:	bl	119dc <getenv@plt>
   1651c:	cmp	r0, #0
   16520:	beq	16550 <generate_code@@Base+0x408>
   16524:	ldr	r1, [pc, #56]	; 16564 <generate_code@@Base+0x41c>
   16528:	add	r1, pc, r1
   1652c:	bl	11acc <fopen64@plt>
   16530:	str	r0, [r5]
   16534:	cmp	r0, #0
   16538:	popne	{r4, r5, r6, pc}
   1653c:	ldr	r3, [pc, #36]	; 16568 <generate_code@@Base+0x420>
   16540:	ldr	r3, [r4, r3]
   16544:	ldr	r0, [r3]
   16548:	str	r0, [r5]
   1654c:	pop	{r4, r5, r6, pc}
   16550:	ldr	r0, [r5]
   16554:	b	16534 <generate_code@@Base+0x3ec>
   16558:	strdeq	r2, [r1], -ip
   1655c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   16560:	andeq	r2, r0, r8, lsl #12
   16564:	ldrdeq	r2, [r0], -r8
   16568:	andeq	r0, r0, r0, lsr #1
   1656c:	push	{r0, r1, r2, r3}
   16570:	push	{lr}		; (str lr, [sp, #-4]!)
   16574:	sub	sp, sp, #12
   16578:	add	r3, sp, #20
   1657c:	str	r3, [sp, #4]
   16580:	bl	164f0 <generate_code@@Base+0x3a8>
   16584:	ldr	r1, [sp, #16]
   16588:	ldr	r2, [sp, #4]
   1658c:	bl	11aa8 <vfprintf@plt>
   16590:	add	sp, sp, #12
   16594:	pop	{lr}		; (ldr lr, [sp], #4)
   16598:	add	sp, sp, #16
   1659c:	bx	lr
   165a0:	push	{r4, r5, r6, r7, r8, lr}
   165a4:	subs	r6, r1, #0
   165a8:	beq	165fc <generate_code@@Base+0x4b4>
   165ac:	cmp	r2, #0
   165b0:	ldr	r7, [r6]
   165b4:	beq	165ec <generate_code@@Base+0x4a4>
   165b8:	add	r4, r0, #12
   165bc:	add	r5, r4, r2, lsl #2
   165c0:	mov	r3, #0
   165c4:	ldr	r2, [r4, #4]!
   165c8:	add	r1, r6, r3, lsl #3
   165cc:	cmp	r2, #0
   165d0:	add	r8, r3, #1
   165d4:	beq	165e4 <generate_code@@Base+0x49c>
   165d8:	ldr	r0, [r1, #28]
   165dc:	bl	11988 <free@plt>
   165e0:	mov	r3, r8
   165e4:	cmp	r4, r5
   165e8:	bne	165c4 <generate_code@@Base+0x47c>
   165ec:	mov	r0, r6
   165f0:	bl	11988 <free@plt>
   165f4:	mov	r0, r7
   165f8:	pop	{r4, r5, r6, r7, r8, pc}
   165fc:	mov	r7, r6
   16600:	b	165f4 <generate_code@@Base+0x4ac>
   16604:	push	{r4, r5}
   16608:	mov	r4, r0
   1660c:	mov	r5, r1
   16610:	orrs	r3, r4, r5
   16614:	beq	16658 <generate_code@@Base+0x510>
   16618:	cmp	r1, #0
   1661c:	clzeq	r2, r0
   16620:	addeq	r2, r2, #32
   16624:	clzne	r2, r1
   16628:	rsb	r3, r2, #63	; 0x3f
   1662c:	cmp	r3, #1
   16630:	bls	16658 <generate_code@@Base+0x510>
   16634:	rsb	r1, r2, #61	; 0x3d
   16638:	rsb	r0, r1, #32
   1663c:	lsr	r3, r4, r1
   16640:	sub	r1, r1, #32
   16644:	orr	r3, r3, r5, lsl r0
   16648:	orr	r3, r3, r5, lsr r1
   1664c:	rsb	r2, r2, #1073741886	; 0x4000003e
   16650:	and	r0, r3, #3
   16654:	add	r0, r0, r2, lsl #2
   16658:	pop	{r4, r5}
   1665c:	bx	lr
   16660:	push	{r4, r5, r6, lr}
   16664:	mov	r1, r3
   16668:	mov	r6, r0
   1666c:	mov	r0, r2
   16670:	mov	r4, r2
   16674:	mov	r5, r3
   16678:	bl	16604 <generate_code@@Base+0x4bc>
   1667c:	add	r0, r0, r0, lsl #1
   16680:	lsl	r0, r0, #3
   16684:	add	r3, r6, r0
   16688:	ldr	r1, [r6, r0]
   1668c:	ldr	r2, [r3, #16]
   16690:	add	r1, r1, #1
   16694:	str	r1, [r6, r0]
   16698:	ldrd	r0, [r3, #8]
   1669c:	ldr	ip, [r3, #20]
   166a0:	adds	r2, r2, r4
   166a4:	str	r2, [r3, #16]
   166a8:	adc	r2, ip, r5
   166ac:	cmp	r4, r0
   166b0:	sbcs	r1, r5, r1
   166b4:	str	r2, [r3, #20]
   166b8:	strdlt	r4, [r3, #8]
   166bc:	pop	{r4, r5, r6, pc}
   166c0:	ldr	r3, [r1, #8]
   166c4:	cmp	r3, #0
   166c8:	bxeq	lr
   166cc:	add	r2, r1, #6016	; 0x1780
   166d0:	push	{r4, r5, r6, r7, r8, lr}
   166d4:	mov	r3, r1
   166d8:	mov	r8, r1
   166dc:	mov	r7, r0
   166e0:	ldrd	r4, [r1, #24]
   166e4:	add	r2, r2, #32
   166e8:	mov	ip, #0
   166ec:	mov	r0, #0
   166f0:	mov	r1, #0
   166f4:	str	ip, [r3, #40]	; 0x28
   166f8:	strd	r4, [r3, #48]	; 0x30
   166fc:	strd	r0, [r3, #56]	; 0x38
   16700:	add	r3, r3, #24
   16704:	cmp	r3, r2
   16708:	bne	166f4 <generate_code@@Base+0x5ac>
   1670c:	cmp	r7, #0
   16710:	popeq	{r4, r5, r6, r7, r8, pc}
   16714:	add	r8, r8, #40	; 0x28
   16718:	ldr	r3, [r7, #16]
   1671c:	cmp	r3, #0
   16720:	beq	167a8 <generate_code@@Base+0x660>
   16724:	ldr	r2, [r7, #52]	; 0x34
   16728:	cmp	r2, #0
   1672c:	beq	167a8 <generate_code@@Base+0x660>
   16730:	mov	r6, #0
   16734:	b	16744 <generate_code@@Base+0x5fc>
   16738:	add	r6, r6, #1
   1673c:	cmp	r2, r6
   16740:	beq	167a8 <generate_code@@Base+0x660>
   16744:	ldr	r3, [r7, #56]	; 0x38
   16748:	ldr	r5, [r3, r6, lsl #2]
   1674c:	cmp	r5, #0
   16750:	beq	16738 <generate_code@@Base+0x5f0>
   16754:	ldr	r3, [r5]
   16758:	cmp	r3, r7
   1675c:	bne	16738 <generate_code@@Base+0x5f0>
   16760:	ldr	r3, [r5, #16]
   16764:	cmp	r3, #0
   16768:	beq	16738 <generate_code@@Base+0x5f0>
   1676c:	mov	r4, #0
   16770:	ldr	r2, [r5, #20]
   16774:	lsl	r3, r4, #3
   16778:	add	r2, r2, r3
   1677c:	mov	r0, r8
   16780:	ldrd	r2, [r2]
   16784:	bl	16660 <generate_code@@Base+0x518>
   16788:	ldr	r3, [r5, #16]
   1678c:	add	r4, r4, #1
   16790:	cmp	r3, r4
   16794:	bhi	16770 <generate_code@@Base+0x628>
   16798:	ldr	r2, [r7, #52]	; 0x34
   1679c:	add	r6, r6, #1
   167a0:	cmp	r2, r6
   167a4:	bne	16744 <generate_code@@Base+0x5fc>
   167a8:	ldr	r7, [r7, #4]
   167ac:	cmp	r7, #0
   167b0:	bne	16718 <generate_code@@Base+0x5d0>
   167b4:	pop	{r4, r5, r6, r7, r8, pc}
   167b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167bc:	sub	sp, sp, #12
   167c0:	mov	r6, r0
   167c4:	str	r0, [sp, #4]
   167c8:	mov	r8, r2
   167cc:	mov	r0, r1
   167d0:	mov	r4, r1
   167d4:	ldr	r2, [pc, #364]	; 16948 <generate_code@@Base+0x800>
   167d8:	mov	r1, #0
   167dc:	bl	11a60 <memset@plt>
   167e0:	mov	r5, #0
   167e4:	cmp	r6, #0
   167e8:	str	r5, [r8]
   167ec:	beq	1692c <generate_code@@Base+0x7e4>
   167f0:	mov	r9, r5
   167f4:	ldr	r0, [r6, #12]
   167f8:	bl	11a24 <strlen@plt>
   167fc:	cmp	r5, r0
   16800:	strcc	r0, [r8]
   16804:	mov	r0, r9
   16808:	ldr	r1, [r6, #8]
   1680c:	bl	162e8 <generate_code@@Base+0x1a0>
   16810:	ldr	r7, [r6, #52]	; 0x34
   16814:	mov	r1, r7
   16818:	bl	162e8 <generate_code@@Base+0x1a0>
   1681c:	cmp	r7, #0
   16820:	mov	r9, r0
   16824:	beq	16918 <generate_code@@Base+0x7d0>
   16828:	ldr	r5, [r6, #56]	; 0x38
   1682c:	add	r7, r5, r7, lsl #2
   16830:	sub	r7, r7, #4
   16834:	sub	r5, r5, #4
   16838:	b	16868 <generate_code@@Base+0x720>
   1683c:	ldr	r3, [sl]
   16840:	mov	r0, r9
   16844:	cmp	r3, r6
   16848:	beq	16884 <generate_code@@Base+0x73c>
   1684c:	mov	r1, #0
   16850:	bl	162e8 <generate_code@@Base+0x1a0>
   16854:	mov	r1, #0
   16858:	bl	162e8 <generate_code@@Base+0x1a0>
   1685c:	mov	r9, r0
   16860:	cmp	r5, r7
   16864:	beq	16918 <generate_code@@Base+0x7d0>
   16868:	ldr	sl, [r5, #4]!
   1686c:	cmp	sl, #0
   16870:	bne	1683c <generate_code@@Base+0x6f4>
   16874:	mov	r1, sl
   16878:	mov	r0, r9
   1687c:	bl	162e8 <generate_code@@Base+0x1a0>
   16880:	b	16854 <generate_code@@Base+0x70c>
   16884:	ldr	r1, [sl, #12]
   16888:	bl	162e8 <generate_code@@Base+0x1a0>
   1688c:	ldr	r1, [sl, #8]
   16890:	bl	162e8 <generate_code@@Base+0x1a0>
   16894:	ldr	r3, [r6, #16]
   16898:	cmp	r3, #0
   1689c:	mov	r9, r0
   168a0:	beq	16860 <generate_code@@Base+0x718>
   168a4:	ldr	fp, [sl, #16]
   168a8:	ldr	r3, [r4, #8]
   168ac:	mov	r1, fp
   168b0:	add	r3, r3, fp
   168b4:	str	r3, [r4, #8]
   168b8:	bl	162e8 <generate_code@@Base+0x1a0>
   168bc:	cmp	fp, #0
   168c0:	mov	r9, r0
   168c4:	beq	16860 <generate_code@@Base+0x718>
   168c8:	ldr	r2, [sl, #20]
   168cc:	ldr	r3, [r4, #16]
   168d0:	add	lr, r2, fp, lsl #3
   168d4:	ldr	ip, [r4, #20]
   168d8:	sub	lr, lr, #8
   168dc:	sub	r2, r2, #8
   168e0:	ldrd	r0, [r2, #8]!
   168e4:	ldrd	sl, [r4, #24]
   168e8:	adds	r3, r3, r0
   168ec:	adc	ip, ip, r1
   168f0:	str	ip, [r4, #20]
   168f4:	str	r3, [r4, #16]
   168f8:	ldrd	r0, [r2]
   168fc:	cmp	sl, r0
   16900:	sbcs	sl, fp, r1
   16904:	strdlt	r0, [r4, #24]
   16908:	cmp	lr, r2
   1690c:	bne	168e0 <generate_code@@Base+0x798>
   16910:	cmp	r5, r7
   16914:	bne	16868 <generate_code@@Base+0x720>
   16918:	ldr	r6, [r6, #4]
   1691c:	cmp	r6, #0
   16920:	beq	16930 <generate_code@@Base+0x7e8>
   16924:	ldr	r5, [r8]
   16928:	b	167f4 <generate_code@@Base+0x6ac>
   1692c:	ldr	r9, [sp, #4]
   16930:	ldr	r0, [sp, #4]
   16934:	mov	r1, r4
   16938:	bl	166c0 <generate_code@@Base+0x578>
   1693c:	mov	r0, r9
   16940:	add	sp, sp, #12
   16944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16948:	andeq	r1, r0, r8, asr #15
   1694c:	push	{r4, r5, r6, lr}
   16950:	mov	r4, r0
   16954:	ldr	r0, [pc, #192]	; 16a1c <generate_code@@Base+0x8d4>
   16958:	add	r0, pc, r0
   1695c:	bl	119dc <getenv@plt>
   16960:	subs	r3, r0, #0
   16964:	beq	16970 <generate_code@@Base+0x828>
   16968:	bl	11ac0 <atoi@plt>
   1696c:	bic	r3, r0, r0, asr #31
   16970:	ldr	r0, [pc, #168]	; 16a20 <generate_code@@Base+0x8d8>
   16974:	str	r3, [r4, #8]
   16978:	add	r0, pc, r0
   1697c:	bl	119dc <getenv@plt>
   16980:	subs	r6, r0, #0
   16984:	beq	169f4 <generate_code@@Base+0x8ac>
   16988:	bl	11a24 <strlen@plt>
   1698c:	ldr	r3, [r4, #4]
   16990:	add	r3, r3, #2
   16994:	cmp	r0, #0
   16998:	bne	169d4 <generate_code@@Base+0x88c>
   1699c:	ldr	r2, [r4, #8]
   169a0:	cmp	r2, #0
   169a4:	beq	16a08 <generate_code@@Base+0x8c0>
   169a8:	ldr	r6, [pc, #116]	; 16a24 <generate_code@@Base+0x8dc>
   169ac:	mov	r5, #1
   169b0:	add	r6, pc, r6
   169b4:	str	r5, [r4, #12]
   169b8:	add	r0, r3, r5
   169bc:	bl	119e8 <malloc@plt>
   169c0:	mov	r2, r5
   169c4:	mov	r1, r6
   169c8:	str	r0, [r4]
   169cc:	pop	{r4, r5, r6, lr}
   169d0:	b	11994 <memcpy@plt>
   169d4:	sub	r5, r0, #1
   169d8:	ldrb	r2, [r6, r5]
   169dc:	cmp	r2, #47	; 0x2f
   169e0:	movne	r5, r0
   169e4:	bne	169b4 <generate_code@@Base+0x86c>
   169e8:	cmp	r5, #0
   169ec:	bne	169b4 <generate_code@@Base+0x86c>
   169f0:	b	1699c <generate_code@@Base+0x854>
   169f4:	ldr	r2, [r4, #8]
   169f8:	ldr	r3, [r4, #4]
   169fc:	cmp	r2, #0
   16a00:	add	r3, r3, #2
   16a04:	bne	169a8 <generate_code@@Base+0x860>
   16a08:	str	r2, [r4, #12]
   16a0c:	mov	r0, r3
   16a10:	bl	119e8 <malloc@plt>
   16a14:	str	r0, [r4]
   16a18:	pop	{r4, r5, r6, pc}
   16a1c:	ldrdeq	r2, [r0], -r8
   16a20:	andeq	r2, r0, ip, asr #3
   16a24:	andeq	r2, r0, ip, ror r1
   16a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a2c:	sub	sp, sp, #6080	; 0x17c0
   16a30:	sub	sp, sp, #36	; 0x24
   16a34:	mov	r3, r0
   16a38:	str	r1, [sp, #40]	; 0x28
   16a3c:	mov	r1, #0
   16a40:	mov	r4, r1
   16a44:	str	r0, [sp, #56]	; 0x38
   16a48:	add	r7, r3, #6016	; 0x1780
   16a4c:	add	r0, sp, #64	; 0x40
   16a50:	add	r6, sp, #2016	; 0x7e0
   16a54:	ldr	r2, [pc, #984]	; 16e34 <generate_code@@Base+0xcec>
   16a58:	mov	r5, #251	; 0xfb
   16a5c:	str	r0, [sp, #60]	; 0x3c
   16a60:	str	r5, [sp, #52]	; 0x34
   16a64:	str	r6, [sp, #36]	; 0x24
   16a68:	mov	r9, r4
   16a6c:	bl	11a60 <memset@plt>
   16a70:	mov	sl, r4
   16a74:	add	r3, r7, #8
   16a78:	mov	r0, r4
   16a7c:	str	r3, [sp, #48]	; 0x30
   16a80:	sub	r3, r6, #1952	; 0x7a0
   16a84:	str	r3, [sp, #44]	; 0x2c
   16a88:	ldr	r3, [sp, #48]	; 0x30
   16a8c:	ldr	r2, [r3, #16]
   16a90:	ldr	r7, [r3]
   16a94:	str	r2, [sp, #16]
   16a98:	ldr	r2, [r3, #20]
   16a9c:	cmp	r7, #0
   16aa0:	str	r2, [sp, #20]
   16aa4:	beq	16dc4 <generate_code@@Base+0xc7c>
   16aa8:	ldrd	r2, [r3, #8]
   16aac:	str	r9, [sp, #12]
   16ab0:	strd	r2, [sp, #24]
   16ab4:	b	16b94 <generate_code@@Base+0xa4c>
   16ab8:	bls	16e28 <generate_code@@Base+0xce0>
   16abc:	ldr	r3, [sp, #12]
   16ac0:	mov	r2, r4
   16ac4:	umull	r0, r1, r7, r3
   16ac8:	mov	r3, #0
   16acc:	mla	r1, r7, sl, r1
   16ad0:	bl	18344 <__gcov_sort_n_vals@@Base+0x568>
   16ad4:	mov	r6, r0
   16ad8:	mov	r8, r1
   16adc:	ldr	r3, [sp, #12]
   16ae0:	sub	r4, r4, r7
   16ae4:	subs	r3, r3, r6
   16ae8:	sbc	sl, sl, r8
   16aec:	mov	fp, r7
   16af0:	mov	r7, #0
   16af4:	str	r3, [sp, #12]
   16af8:	ldr	r0, [sp, #16]
   16afc:	ldr	r3, [sp, #20]
   16b00:	str	r7, [sp, #16]
   16b04:	str	r7, [sp, #20]
   16b08:	adds	r6, r6, r0
   16b0c:	ldrd	r0, [sp]
   16b10:	adc	r8, r8, r3
   16b14:	bl	16604 <generate_code@@Base+0x4bc>
   16b18:	ldr	r3, [sp, #44]	; 0x2c
   16b1c:	add	r1, r0, r0, lsl #1
   16b20:	lsl	r1, r1, #3
   16b24:	add	ip, r3, r1
   16b28:	ldr	r3, [sp, #36]	; 0x24
   16b2c:	ldr	lr, [ip, #16]
   16b30:	add	r1, r3, r1
   16b34:	adds	r6, lr, r6
   16b38:	ldr	lr, [ip, #20]
   16b3c:	ldrd	r2, [ip, #8]
   16b40:	adc	lr, lr, r8
   16b44:	ldrd	r8, [sp]
   16b48:	str	lr, [sp, #32]
   16b4c:	orrs	lr, r2, r3
   16b50:	moveq	lr, #1
   16b54:	movne	lr, #0
   16b58:	cmp	r8, r2
   16b5c:	sbcs	r3, r9, r3
   16b60:	orrlt	lr, lr, #1
   16b64:	cmp	lr, #0
   16b68:	str	r6, [ip, #16]
   16b6c:	ldr	r6, [r1, #-1952]	; 0xfffff860
   16b70:	ldr	r3, [sp, #32]
   16b74:	strdne	r8, [ip, #8]
   16b78:	cmp	r4, #0
   16b7c:	add	fp, r6, fp
   16b80:	subeq	r5, r5, #1
   16b84:	cmp	r7, #0
   16b88:	str	r3, [ip, #20]
   16b8c:	str	fp, [r1, #-1952]	; 0xfffff860
   16b90:	beq	16dc0 <generate_code@@Base+0xc78>
   16b94:	cmp	r4, #0
   16b98:	beq	16c1c <generate_code@@Base+0xad4>
   16b9c:	add	r2, r5, r5, lsl #1
   16ba0:	ldr	r3, [sp, #40]	; 0x28
   16ba4:	add	r2, r3, r2, lsl #3
   16ba8:	ldrd	r0, [sp, #24]
   16bac:	ldr	r3, [r2, #8]
   16bb0:	ldr	r2, [r2, #12]
   16bb4:	adds	r3, r0, r3
   16bb8:	str	r3, [sp]
   16bbc:	adc	r3, r1, r2
   16bc0:	cmp	r4, r7
   16bc4:	str	r3, [sp, #4]
   16bc8:	bcs	16ab8 <generate_code@@Base+0x970>
   16bcc:	ldr	r6, [sp, #16]
   16bd0:	ldr	r8, [sp, #20]
   16bd4:	mov	r2, r7
   16bd8:	umull	r0, r1, r4, r6
   16bdc:	mov	r3, #0
   16be0:	mla	r1, r4, r8, r1
   16be4:	bl	18344 <__gcov_sort_n_vals@@Base+0x568>
   16be8:	sub	r7, r7, r4
   16bec:	mov	fp, r4
   16bf0:	mov	r4, #0
   16bf4:	subs	r2, r6, r0
   16bf8:	str	r2, [sp, #16]
   16bfc:	sbc	r2, r8, r1
   16c00:	ldr	r6, [sp, #12]
   16c04:	mov	r8, sl
   16c08:	mov	r3, r1
   16c0c:	str	r2, [sp, #20]
   16c10:	str	r4, [sp, #12]
   16c14:	mov	sl, r4
   16c18:	b	16b08 <generate_code@@Base+0x9c0>
   16c1c:	cmp	r5, #0
   16c20:	blt	16e20 <generate_code@@Base+0xcd8>
   16c24:	ldr	r3, [sp, #40]	; 0x28
   16c28:	add	r2, r5, r5, lsl #1
   16c2c:	ldr	r4, [r3, r2, lsl #3]
   16c30:	add	r2, r3, r2, lsl #3
   16c34:	cmp	r4, #0
   16c38:	bne	16db0 <generate_code@@Base+0xc68>
   16c3c:	mov	r3, r2
   16c40:	ldr	r9, [sp, #12]
   16c44:	b	16c58 <generate_code@@Base+0xb10>
   16c48:	ldr	r4, [r3]
   16c4c:	mov	r2, r3
   16c50:	cmp	r4, #0
   16c54:	bne	16db0 <generate_code@@Base+0xc68>
   16c58:	subs	r5, r5, #1
   16c5c:	sub	r3, r3, #24
   16c60:	bcs	16c48 <generate_code@@Base+0xb00>
   16c64:	ldr	r2, [sp, #52]	; 0x34
   16c68:	ldr	ip, [sp, #36]	; 0x24
   16c6c:	ldr	r4, [sp, #16]
   16c70:	lsl	r3, r2, #1
   16c74:	add	r1, r3, r2
   16c78:	sub	r2, ip, #1952	; 0x7a0
   16c7c:	lsl	r1, r1, #3
   16c80:	add	r2, r2, r1
   16c84:	add	r1, ip, r1
   16c88:	ldr	ip, [r2, #16]
   16c8c:	ldr	lr, [r1, #-1952]	; 0xfffff860
   16c90:	adds	ip, ip, r4
   16c94:	add	r7, lr, r7
   16c98:	ldrd	r4, [r2, #8]
   16c9c:	ldr	lr, [r2, #20]
   16ca0:	str	r7, [r1, #-1952]	; 0xfffff860
   16ca4:	ldr	r1, [sp, #20]
   16ca8:	str	ip, [r2, #16]
   16cac:	adc	lr, lr, r1
   16cb0:	orrs	r1, r4, r5
   16cb4:	str	lr, [r2, #20]
   16cb8:	beq	16d90 <generate_code@@Base+0xc48>
   16cbc:	ldrd	r6, [sp, #24]
   16cc0:	cmp	r6, r4
   16cc4:	sbcs	r2, r7, r5
   16cc8:	blt	16d90 <generate_code@@Base+0xc48>
   16ccc:	ldr	r2, [sp, #52]	; 0x34
   16cd0:	ldr	lr, [sp, #60]	; 0x3c
   16cd4:	add	ip, r3, r2
   16cd8:	ldr	r3, [sp, #56]	; 0x38
   16cdc:	lsl	ip, ip, #3
   16ce0:	add	r1, lr, ip
   16ce4:	add	ip, r3, ip
   16ce8:	b	16d44 <generate_code@@Base+0xbfc>
   16cec:	ldr	r3, [r1, #-8]
   16cf0:	ldr	r6, [ip, #-8]
   16cf4:	ldr	r7, [ip, #-4]
   16cf8:	ldr	r2, [r1, #-4]
   16cfc:	adds	r6, r3, r6
   16d00:	ldrd	r4, [r1, #-16]
   16d04:	adc	r2, r2, r7
   16d08:	ldr	r3, [r1, #-24]	; 0xffffffe8
   16d0c:	ldr	r7, [ip, #-24]	; 0xffffffe8
   16d10:	orrs	r8, r4, r5
   16d14:	add	r3, r3, r7
   16d18:	str	r2, [r1, #-4]
   16d1c:	str	r3, [r1, #-24]	; 0xffffffe8
   16d20:	str	r6, [r1, #-8]
   16d24:	ldrd	r2, [ip, #-16]
   16d28:	sub	ip, ip, #24
   16d2c:	beq	16d3c <generate_code@@Base+0xbf4>
   16d30:	cmp	r2, r4
   16d34:	sbcs	r4, r3, r5
   16d38:	bge	16d40 <generate_code@@Base+0xbf8>
   16d3c:	strd	r2, [r1, #-16]
   16d40:	sub	r1, r1, #24
   16d44:	cmp	r1, lr
   16d48:	bne	16cec <generate_code@@Base+0xba4>
   16d4c:	ldr	r3, [sp, #36]	; 0x24
   16d50:	add	r0, r0, r0, lsl #1
   16d54:	sub	r3, r3, #1952	; 0x7a0
   16d58:	add	r3, r3, r0, lsl #3
   16d5c:	ldr	r1, [sp, #60]	; 0x3c
   16d60:	ldr	r2, [r3, #16]
   16d64:	ldr	ip, [r3, #20]
   16d68:	adds	r9, r2, r9
   16d6c:	adc	sl, ip, sl
   16d70:	ldr	r0, [sp, #56]	; 0x38
   16d74:	ldr	r2, [pc, #184]	; 16e34 <generate_code@@Base+0xcec>
   16d78:	str	r9, [r3, #16]
   16d7c:	str	sl, [r3, #20]
   16d80:	bl	11994 <memcpy@plt>
   16d84:	add	sp, sp, #6080	; 0x17c0
   16d88:	add	sp, sp, #36	; 0x24
   16d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d90:	ldr	r2, [sp, #52]	; 0x34
   16d94:	ldrd	r4, [sp, #24]
   16d98:	add	r1, r3, r2
   16d9c:	ldr	r2, [sp, #36]	; 0x24
   16da0:	sub	r2, r2, #1952	; 0x7a0
   16da4:	add	r2, r2, r1, lsl #3
   16da8:	strd	r4, [r2, #8]
   16dac:	b	16ccc <generate_code@@Base+0xb84>
   16db0:	ldr	r3, [r2, #16]
   16db4:	ldr	sl, [r2, #20]
   16db8:	str	r3, [sp, #12]
   16dbc:	b	16ba8 <generate_code@@Base+0xa60>
   16dc0:	ldr	r9, [sp, #12]
   16dc4:	ldr	r3, [sp, #52]	; 0x34
   16dc8:	sub	r3, r3, #1
   16dcc:	str	r3, [sp, #52]	; 0x34
   16dd0:	cmn	r3, #1
   16dd4:	ldr	r3, [sp, #48]	; 0x30
   16dd8:	sub	r3, r3, #24
   16ddc:	str	r3, [sp, #48]	; 0x30
   16de0:	bne	16a88 <generate_code@@Base+0x940>
   16de4:	cmp	r4, #0
   16de8:	subne	r5, r5, #1
   16dec:	cmp	r5, #0
   16df0:	blt	16d4c <generate_code@@Base+0xc04>
   16df4:	add	r5, r5, r5, lsl #1
   16df8:	ldr	ip, [sp, #40]	; 0x28
   16dfc:	add	r3, ip, r5, lsl #3
   16e00:	ldr	r2, [r3, #16]
   16e04:	ldr	r1, [r3, #20]
   16e08:	adds	r9, r9, r2
   16e0c:	adc	sl, sl, r1
   16e10:	cmp	ip, r3
   16e14:	sub	r3, r3, #24
   16e18:	bne	16e00 <generate_code@@Base+0xcb8>
   16e1c:	b	16d4c <generate_code@@Base+0xc04>
   16e20:	ldr	r9, [sp, #12]
   16e24:	b	16c64 <generate_code@@Base+0xb1c>
   16e28:	ldr	r6, [sp, #12]
   16e2c:	mov	r8, sl
   16e30:	b	16adc <generate_code@@Base+0x994>
   16e34:	andeq	r1, r0, r0, lsr #15
   16e38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16e3c:	ldrb	r4, [r0]
   16e40:	cmp	r4, #47	; 0x2f
   16e44:	addeq	r5, r0, #1
   16e48:	ldrbeq	r4, [r0, #1]
   16e4c:	movne	r5, r0
   16e50:	cmp	r4, #0
   16e54:	beq	16ea8 <generate_code@@Base+0xd60>
   16e58:	mov	r6, r0
   16e5c:	mov	r7, #0
   16e60:	mov	r8, #47	; 0x2f
   16e64:	ldr	sl, [pc, #136]	; 16ef4 <generate_code@@Base+0xdac>
   16e68:	b	16e78 <generate_code@@Base+0xd30>
   16e6c:	ldrb	r4, [r5, #1]!
   16e70:	cmp	r4, #0
   16e74:	beq	16ea8 <generate_code@@Base+0xd60>
   16e78:	cmp	r4, #47	; 0x2f
   16e7c:	bne	16e6c <generate_code@@Base+0xd24>
   16e80:	strb	r7, [r5]
   16e84:	mov	r1, #0
   16e88:	mov	r0, r6
   16e8c:	bl	11a78 <access@plt>
   16e90:	cmn	r0, #1
   16e94:	beq	16eb4 <generate_code@@Base+0xd6c>
   16e98:	strb	r8, [r5]
   16e9c:	ldrb	r4, [r5, #1]!
   16ea0:	cmp	r4, #0
   16ea4:	bne	16e78 <generate_code@@Base+0xd30>
   16ea8:	mov	r9, #0
   16eac:	mov	r0, r9
   16eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16eb4:	mov	r1, sl
   16eb8:	mov	r0, r6
   16ebc:	bl	11a54 <mkdir@plt>
   16ec0:	cmn	r0, #1
   16ec4:	mov	r9, r0
   16ec8:	bne	16e98 <generate_code@@Base+0xd50>
   16ecc:	bl	11a48 <__errno_location@plt>
   16ed0:	ldr	r3, [r0]
   16ed4:	cmp	r3, #17
   16ed8:	beq	16e98 <generate_code@@Base+0xd50>
   16edc:	ldr	r0, [pc, #20]	; 16ef8 <generate_code@@Base+0xdb0>
   16ee0:	mov	r1, r6
   16ee4:	add	r0, pc, r0
   16ee8:	bl	1656c <generate_code@@Base+0x424>
   16eec:	strb	r4, [r5]
   16ef0:	b	16eac <generate_code@@Base+0xd64>
   16ef4:	andeq	r0, r0, sp, ror #3
   16ef8:	andeq	r1, r0, ip, ror #24
   16efc:	ldr	r3, [pc, #76]	; 16f50 <generate_code@@Base+0xe08>
   16f00:	cmp	r1, r3
   16f04:	beq	16f48 <generate_code@@Base+0xe00>
   16f08:	cmp	r2, #0
   16f0c:	ldr	ip, [pc, #64]	; 16f54 <generate_code@@Base+0xe0c>
   16f10:	push	{lr}		; (str lr, [sp, #-4]!)
   16f14:	rev	r3, r1
   16f18:	sub	sp, sp, #12
   16f1c:	ldreq	r2, [r0]
   16f20:	ldr	r0, [pc, #48]	; 16f58 <generate_code@@Base+0xe10>
   16f24:	stm	sp, {r3, ip}
   16f28:	mov	r1, r2
   16f2c:	mov	r3, sp
   16f30:	add	r2, sp, #4
   16f34:	add	r0, pc, r0
   16f38:	bl	1656c <generate_code@@Base+0x424>
   16f3c:	mov	r0, #0
   16f40:	add	sp, sp, #12
   16f44:	pop	{pc}		; (ldr pc, [sp], #4)
   16f48:	mov	r0, #1
   16f4c:	bx	lr
   16f50:	teqmi	r8, sl, lsr #6
   16f54:	bcs	ce5060 <__bss_end__@@Base+0xcb99ac>
   16f58:	andeq	r1, r0, r4, asr #24
   16f5c:	ldr	r2, [r2]
   16f60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16f64:	cmp	r2, #0
   16f68:	mov	r4, r3
   16f6c:	ldr	r2, [r3, #12]
   16f70:	ldr	r3, [sp, #32]
   16f74:	beq	17060 <generate_code@@Base+0xf18>
   16f78:	cmp	r1, #0
   16f7c:	addeq	r1, r2, #1
   16f80:	streq	r1, [r4, #12]
   16f84:	cmp	r2, #0
   16f88:	ldr	r0, [r4, #16]
   16f8c:	ldr	lr, [r4, #20]
   16f90:	ldrd	r6, [r4, #24]
   16f94:	ldr	r2, [r4, #32]
   16f98:	ldr	r1, [r4, #36]	; 0x24
   16f9c:	bne	1700c <generate_code@@Base+0xec4>
   16fa0:	ldr	ip, [r3, #8]
   16fa4:	str	ip, [r4, #8]
   16fa8:	ldr	ip, [r3, #16]
   16fac:	ldr	r5, [r3, #20]
   16fb0:	adds	r0, ip, r0
   16fb4:	adc	lr, r5, lr
   16fb8:	str	r0, [r4, #16]
   16fbc:	str	lr, [r4, #20]
   16fc0:	ldrd	r8, [r3, #24]
   16fc4:	cmp	r6, r8
   16fc8:	sbcs	r0, r7, r9
   16fcc:	bge	17080 <generate_code@@Base+0xf38>
   16fd0:	strd	r8, [r4, #24]
   16fd4:	ldr	r0, [r3, #24]
   16fd8:	ldr	ip, [r3, #28]
   16fdc:	adds	r2, r0, r2
   16fe0:	adc	r1, ip, r1
   16fe4:	str	r1, [r4, #36]	; 0x24
   16fe8:	str	r2, [r4, #32]
   16fec:	add	r1, r3, #40	; 0x28
   16ff0:	ldr	r2, [pc, #176]	; 170a8 <generate_code@@Base+0xf60>
   16ff4:	add	r0, r4, #40	; 0x28
   16ff8:	bl	11994 <memcpy@plt>
   16ffc:	ldr	r3, [sp, #36]	; 0x24
   17000:	mov	r0, #0
   17004:	str	r3, [r4]
   17008:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1700c:	ldr	ip, [r3, #16]
   17010:	ldr	r5, [r3, #20]
   17014:	adds	r0, ip, r0
   17018:	adc	lr, r5, lr
   1701c:	str	r0, [r4, #16]
   17020:	str	lr, [r4, #20]
   17024:	ldrd	r8, [r3, #24]
   17028:	cmp	r6, r8
   1702c:	sbcs	r0, r7, r9
   17030:	bge	17094 <generate_code@@Base+0xf4c>
   17034:	strd	r8, [r4, #24]
   17038:	ldr	r0, [r3, #24]
   1703c:	ldr	ip, [r3, #28]
   17040:	adds	r2, r0, r2
   17044:	adc	r1, ip, r1
   17048:	str	r1, [r4, #36]	; 0x24
   1704c:	str	r2, [r4, #32]
   17050:	add	r1, r3, #40	; 0x28
   17054:	add	r0, r4, #40	; 0x28
   17058:	bl	16a28 <generate_code@@Base+0x8e0>
   1705c:	b	16ffc <generate_code@@Base+0xeb4>
   17060:	cmp	r2, #0
   17064:	beq	16ffc <generate_code@@Base+0xeb4>
   17068:	mov	r1, r0
   1706c:	ldr	r0, [pc, #56]	; 170ac <generate_code@@Base+0xf64>
   17070:	add	r0, pc, r0
   17074:	bl	1656c <generate_code@@Base+0x424>
   17078:	mvn	r0, #0
   1707c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17080:	adds	r2, r2, r8
   17084:	adc	r1, r1, r9
   17088:	str	r1, [r4, #36]	; 0x24
   1708c:	str	r2, [r4, #32]
   17090:	b	16fec <generate_code@@Base+0xea4>
   17094:	adds	r2, r2, r8
   17098:	adc	r1, r1, r9
   1709c:	str	r1, [r4, #36]	; 0x24
   170a0:	str	r2, [r4, #32]
   170a4:	b	17050 <generate_code@@Base+0xf08>
   170a8:	andeq	r1, r0, r0, lsr #15
   170ac:	andeq	r1, r0, r0, asr #22
   170b0:	ldr	r0, [pc, #52]	; 170ec <generate_code@@Base+0xfa4>
   170b4:	ldr	r3, [pc, #52]	; 170f0 <generate_code@@Base+0xfa8>
   170b8:	add	r0, pc, r0
   170bc:	push	{lr}		; (str lr, [sp, #-4]!)
   170c0:	mov	ip, #0
   170c4:	ldr	r3, [r0, r3]
   170c8:	mvn	lr, #0
   170cc:	mov	r2, ip
   170d0:	str	lr, [r3, #24]
   170d4:	mov	r1, ip
   170d8:	ldr	r0, [r3]
   170dc:	pop	{lr}		; (ldr lr, [sp], #4)
   170e0:	str	ip, [r3, #4]
   170e4:	str	ip, [r3, #8]
   170e8:	b	11ad8 <fseek@plt>
   170ec:	andeq	r1, r1, r0, asr #30
   170f0:	andeq	r0, r0, ip, lsr #1
   170f4:	push	{r4, r5, r6, r7, lr}
   170f8:	mov	r2, #0
   170fc:	sub	sp, sp, #36	; 0x24
   17100:	mov	r3, #0
   17104:	mov	r4, #0
   17108:	mov	r6, r0
   1710c:	strd	r2, [sp, #8]
   17110:	strd	r2, [sp, #16]
   17114:	strh	r4, [sp, #2]
   17118:	bl	11a0c <getpid@plt>
   1711c:	ldr	r3, [pc, #196]	; 171e8 <generate_code@@Base+0x10a0>
   17120:	ldr	ip, [pc, #196]	; 171ec <generate_code@@Base+0x10a4>
   17124:	add	r3, pc, r3
   17128:	mvn	lr, #0
   1712c:	mov	r7, #1
   17130:	ldr	r2, [pc, #184]	; 171f0 <generate_code@@Base+0x10a8>
   17134:	mov	r1, #66	; 0x42
   17138:	str	r0, [sp, #24]
   1713c:	ldr	r5, [r3, ip]
   17140:	mov	r0, r6
   17144:	strh	r7, [sp]
   17148:	str	r4, [r5, #4]
   1714c:	str	r4, [r5, #12]
   17150:	str	r4, [r5, #8]
   17154:	str	r4, [r5, #20]
   17158:	str	lr, [r5, #16]
   1715c:	bl	119d0 <open64@plt>
   17160:	subs	r6, r0, #0
   17164:	movlt	r0, r4
   17168:	blt	171cc <generate_code@@Base+0x1084>
   1716c:	mov	r4, sp
   17170:	mov	r2, r4
   17174:	mov	r1, #14
   17178:	mov	r0, r6
   1717c:	bl	11a9c <fcntl64@plt>
   17180:	cmp	r0, #0
   17184:	beq	17198 <generate_code@@Base+0x1050>
   17188:	bl	11a48 <__errno_location@plt>
   1718c:	ldr	r3, [r0]
   17190:	cmp	r3, #4
   17194:	beq	17170 <generate_code@@Base+0x1028>
   17198:	ldr	r1, [pc, #84]	; 171f4 <generate_code@@Base+0x10ac>
   1719c:	mov	r0, r6
   171a0:	add	r1, pc, r1
   171a4:	bl	1194c <fdopen@plt>
   171a8:	cmp	r0, #0
   171ac:	mov	r4, r0
   171b0:	str	r0, [r5]
   171b4:	beq	171d4 <generate_code@@Base+0x108c>
   171b8:	mov	r4, #1
   171bc:	mov	r1, #0
   171c0:	str	r4, [r5, #24]
   171c4:	bl	11964 <setbuf@plt>
   171c8:	mov	r0, r4
   171cc:	add	sp, sp, #36	; 0x24
   171d0:	pop	{r4, r5, r6, r7, pc}
   171d4:	mov	r0, r6
   171d8:	bl	11afc <close@plt>
   171dc:	mov	r0, r4
   171e0:	add	sp, sp, #36	; 0x24
   171e4:	pop	{r4, r5, r6, r7, pc}
   171e8:	ldrdeq	r1, [r1], -r4
   171ec:	andeq	r0, r0, ip, lsr #1
   171f0:			; <UNDEFINED> instruction: 0x000001b6
   171f4:	andeq	r1, r0, ip, lsr sl
   171f8:	push	{r4, r5, r6, lr}
   171fc:	mov	r4, r1
   17200:	ldr	r5, [pc, #248]	; 17300 <generate_code@@Base+0x11b8>
   17204:	ldr	ip, [r4, #8]
   17208:	ldr	lr, [r4, #12]
   1720c:	ldr	r6, [r4]
   17210:	cmp	ip, #0
   17214:	mov	r1, r0
   17218:	add	r5, pc, r5
   1721c:	add	r0, r6, lr
   17220:	ble	1725c <generate_code@@Base+0x1114>
   17224:	ldrb	r3, [r1]
   17228:	cmp	r3, #47	; 0x2f
   1722c:	addeq	r2, r1, #1
   17230:	ldrbeq	r3, [r1, #1]
   17234:	movne	r2, r1
   17238:	cmp	r3, #0
   1723c:	beq	1725c <generate_code@@Base+0x1114>
   17240:	cmp	r3, #47	; 0x2f
   17244:	moveq	r1, r2
   17248:	ldrb	r3, [r2, #1]!
   1724c:	subeq	ip, ip, #1
   17250:	cmp	r3, #0
   17254:	cmpne	ip, #0
   17258:	bne	17240 <generate_code@@Base+0x10f8>
   1725c:	cmp	lr, #0
   17260:	bne	17280 <generate_code@@Base+0x1138>
   17264:	bl	119b8 <strcpy@plt>
   17268:	ldr	r0, [r4]
   1726c:	bl	170f4 <generate_code@@Base+0xfac>
   17270:	cmp	r0, #0
   17274:	beq	17298 <generate_code@@Base+0x1150>
   17278:	mov	r0, #0
   1727c:	pop	{r4, r5, r6, pc}
   17280:	ldrb	r3, [r1]
   17284:	cmp	r3, #47	; 0x2f
   17288:	movne	r3, #47	; 0x2f
   1728c:	addne	r0, r0, #1
   17290:	strbne	r3, [r6, lr]
   17294:	b	17264 <generate_code@@Base+0x111c>
   17298:	ldr	r0, [r4]
   1729c:	bl	16e38 <generate_code@@Base+0xcf0>
   172a0:	cmp	r0, #0
   172a4:	bne	172dc <generate_code@@Base+0x1194>
   172a8:	ldr	r0, [r4]
   172ac:	bl	170f4 <generate_code@@Base+0xfac>
   172b0:	cmp	r0, #0
   172b4:	bne	17278 <generate_code@@Base+0x1130>
   172b8:	ldr	r3, [pc, #68]	; 17304 <generate_code@@Base+0x11bc>
   172bc:	ldr	r1, [pc, #68]	; 17308 <generate_code@@Base+0x11c0>
   172c0:	ldr	r2, [r4]
   172c4:	ldr	r3, [r5, r3]
   172c8:	add	r1, pc, r1
   172cc:	ldr	r0, [r3]
   172d0:	bl	11a3c <fprintf@plt>
   172d4:	mvn	r0, #0
   172d8:	pop	{r4, r5, r6, pc}
   172dc:	ldr	r3, [pc, #32]	; 17304 <generate_code@@Base+0x11bc>
   172e0:	ldr	r1, [pc, #36]	; 1730c <generate_code@@Base+0x11c4>
   172e4:	ldr	r2, [r4]
   172e8:	ldr	r3, [r5, r3]
   172ec:	add	r1, pc, r1
   172f0:	ldr	r0, [r3]
   172f4:	bl	11a3c <fprintf@plt>
   172f8:	mvn	r0, #0
   172fc:	pop	{r4, r5, r6, pc}
   17300:	andeq	r1, r1, r0, ror #27
   17304:	andeq	r0, r0, r0, lsr #1
   17308:	andeq	r1, r0, ip, lsr #18
   1730c:	strdeq	r1, [r0], -r4
   17310:	ldr	r3, [pc, #96]	; 17378 <generate_code@@Base+0x1230>
   17314:	ldr	r2, [pc, #96]	; 1737c <generate_code@@Base+0x1234>
   17318:	add	r3, pc, r3
   1731c:	push	{r4, lr}
   17320:	ldr	r4, [r3, r2]
   17324:	ldr	r0, [r4]
   17328:	cmp	r0, #0
   1732c:	beq	1734c <generate_code@@Base+0x1204>
   17330:	ldr	r3, [r4, #8]
   17334:	cmp	r3, #0
   17338:	bne	1735c <generate_code@@Base+0x1214>
   1733c:	bl	11a84 <fclose@plt>
   17340:	mov	r3, #0
   17344:	str	r3, [r4]
   17348:	str	r3, [r4, #12]
   1734c:	mov	r3, #0
   17350:	str	r3, [r4, #24]
   17354:	ldr	r0, [r4, #20]
   17358:	pop	{r4, pc}
   1735c:	ldr	r2, [r4, #24]
   17360:	cmp	r2, #0
   17364:	bge	1733c <generate_code@@Base+0x11f4>
   17368:	mov	r0, r3
   1736c:	bl	16364 <generate_code@@Base+0x21c>
   17370:	ldr	r0, [r4]
   17374:	b	1733c <generate_code@@Base+0x11f4>
   17378:	andeq	r1, r1, r0, ror #25
   1737c:	andeq	r0, r0, ip, lsr #1
   17380:	push	{r4, lr}
   17384:	mov	r4, r0
   17388:	mov	r0, #1
   1738c:	bl	163c0 <generate_code@@Base+0x278>
   17390:	str	r4, [r0]
   17394:	pop	{r4, pc}
   17398:	push	{r4, r5, r6, lr}
   1739c:	mov	r5, r0
   173a0:	mov	r0, #2
   173a4:	mov	r4, r1
   173a8:	bl	163c0 <generate_code@@Base+0x278>
   173ac:	str	r5, [r0]
   173b0:	str	r4, [r0, #4]
   173b4:	pop	{r4, r5, r6, pc}
   173b8:	push	{r4, r5, r6, lr}
   173bc:	mov	r5, r0
   173c0:	mov	r0, #2
   173c4:	mov	r4, r1
   173c8:	bl	163c0 <generate_code@@Base+0x278>
   173cc:	str	r5, [r0]
   173d0:	str	r4, [r0, #4]
   173d4:	pop	{r4, r5, r6, pc}
   173d8:	mov	r2, #0
   173dc:	push	{r4, r5, r6, r7, r8, lr}
   173e0:	mov	r3, r2
   173e4:	sub	sp, sp, #32
   173e8:	mov	r5, r1
   173ec:	mov	r7, r2
   173f0:	mov	r4, r1
   173f4:	mov	r8, #1
   173f8:	str	r2, [sp]
   173fc:	str	r2, [sp, #4]
   17400:	str	r2, [sp, #8]
   17404:	str	r2, [sp, #12]
   17408:	str	r2, [sp, #16]
   1740c:	str	r2, [sp, #20]
   17410:	str	r2, [sp, #24]
   17414:	str	r2, [sp, #28]
   17418:	lsr	r2, r3, #5
   1741c:	ldr	lr, [r1, #40]	; 0x28
   17420:	add	ip, sp, #32
   17424:	cmp	lr, #0
   17428:	add	r2, ip, r2, lsl #2
   1742c:	and	r6, r3, #31
   17430:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   17434:	add	r3, r3, #1
   17438:	orrne	ip, ip, r8, lsl r6
   1743c:	addne	r7, r7, #1
   17440:	strne	ip, [r2, #-32]	; 0xffffffe0
   17444:	cmp	r3, #252	; 0xfc
   17448:	add	r1, r1, #24
   1744c:	bne	17418 <generate_code@@Base+0x12d0>
   17450:	add	r7, r7, r7, lsl #2
   17454:	add	r1, r7, #17
   17458:	bl	173b8 <generate_code@@Base+0x1270>
   1745c:	ldr	r0, [r5]
   17460:	bl	17380 <generate_code@@Base+0x1238>
   17464:	ldr	r0, [r5, #8]
   17468:	bl	17380 <generate_code@@Base+0x1238>
   1746c:	ldr	r0, [r5, #12]
   17470:	bl	17380 <generate_code@@Base+0x1238>
   17474:	ldrd	r0, [r5, #16]
   17478:	bl	17398 <generate_code@@Base+0x1250>
   1747c:	ldrd	r0, [r5, #24]
   17480:	bl	17398 <generate_code@@Base+0x1250>
   17484:	ldrd	r0, [r5, #32]
   17488:	bl	17398 <generate_code@@Base+0x1250>
   1748c:	sub	r6, sp, #4
   17490:	add	r7, sp, #28
   17494:	ldr	r0, [r6, #4]!
   17498:	bl	17380 <generate_code@@Base+0x1238>
   1749c:	cmp	r7, r6
   174a0:	bne	17494 <generate_code@@Base+0x134c>
   174a4:	add	r5, r5, #6016	; 0x1780
   174a8:	add	r5, r5, #32
   174ac:	ldr	r3, [r4, #40]	; 0x28
   174b0:	subs	r0, r3, #0
   174b4:	beq	174cc <generate_code@@Base+0x1384>
   174b8:	bl	17380 <generate_code@@Base+0x1238>
   174bc:	ldrd	r0, [r4, #48]	; 0x30
   174c0:	bl	17398 <generate_code@@Base+0x1250>
   174c4:	ldrd	r0, [r4, #56]	; 0x38
   174c8:	bl	17398 <generate_code@@Base+0x1250>
   174cc:	add	r4, r4, #24
   174d0:	cmp	r4, r5
   174d4:	bne	174ac <generate_code@@Base+0x1364>
   174d8:	add	sp, sp, #32
   174dc:	pop	{r4, r5, r6, r7, r8, pc}
   174e0:	push	{r4, lr}
   174e4:	mov	r0, #1
   174e8:	bl	16420 <generate_code@@Base+0x2d8>
   174ec:	subs	r3, r0, #0
   174f0:	popeq	{r4, pc}
   174f4:	ldr	r0, [r3]
   174f8:	pop	{r4, lr}
   174fc:	b	162e4 <generate_code@@Base+0x19c>
   17500:	push	{r4, lr}
   17504:	mov	r0, #2
   17508:	bl	16420 <generate_code@@Base+0x2d8>
   1750c:	subs	r2, r0, #0
   17510:	beq	17534 <generate_code@@Base+0x13ec>
   17514:	ldr	r0, [r2]
   17518:	bl	162e4 <generate_code@@Base+0x19c>
   1751c:	mov	r3, r0
   17520:	ldr	r0, [r2, #4]
   17524:	bl	162e4 <generate_code@@Base+0x19c>
   17528:	mov	r1, r0
   1752c:	mov	r0, r3
   17530:	pop	{r4, pc}
   17534:	mov	r3, r2
   17538:	mov	r1, r2
   1753c:	mov	r0, r3
   17540:	pop	{r4, pc}
   17544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17548:	sub	sp, sp, #28
   1754c:	mov	r8, r1
   17550:	str	r3, [sp, #12]
   17554:	mov	r4, #0
   17558:	add	r3, r1, #52	; 0x34
   1755c:	add	r1, r1, #16
   17560:	str	r0, [sp, #20]
   17564:	str	r2, [sp, #16]
   17568:	ldr	r2, [r3, #-4]!
   1756c:	cmp	r2, #0
   17570:	addne	r4, r4, #1
   17574:	cmp	r1, r3
   17578:	bne	17568 <generate_code@@Base+0x1420>
   1757c:	add	r4, r4, #4
   17580:	lsl	r4, r4, #3
   17584:	mov	r0, r4
   17588:	bl	119e8 <malloc@plt>
   1758c:	subs	r6, r0, #0
   17590:	beq	17664 <generate_code@@Base+0x151c>
   17594:	ldr	r3, [sp, #12]
   17598:	mov	r4, #0
   1759c:	str	r3, [r6, #4]
   175a0:	str	r4, [r6]
   175a4:	bl	174e0 <generate_code@@Base+0x1398>
   175a8:	mov	r7, r4
   175ac:	add	r5, r8, #12
   175b0:	str	r0, [r6, #12]
   175b4:	bl	174e0 <generate_code@@Base+0x1398>
   175b8:	str	r0, [r6, #16]
   175bc:	bl	174e0 <generate_code@@Base+0x1398>
   175c0:	str	r0, [r6, #20]
   175c4:	b	175d4 <generate_code@@Base+0x148c>
   175c8:	add	r4, r4, #1
   175cc:	cmp	r4, #9
   175d0:	beq	17650 <generate_code@@Base+0x1508>
   175d4:	ldr	r3, [r5, #4]!
   175d8:	cmp	r3, #0
   175dc:	beq	175c8 <generate_code@@Base+0x1480>
   175e0:	bl	174e0 <generate_code@@Base+0x1398>
   175e4:	lsl	r3, r4, #17
   175e8:	add	r3, r3, #27262976	; 0x1a00000
   175ec:	add	r3, r3, #65536	; 0x10000
   175f0:	cmp	r0, r3
   175f4:	bne	176b8 <generate_code@@Base+0x1570>
   175f8:	bl	174e0 <generate_code@@Base+0x1398>
   175fc:	lsr	sl, r0, #1
   17600:	lsl	fp, sl, #3
   17604:	mov	r0, fp
   17608:	bl	119e8 <malloc@plt>
   1760c:	subs	r9, r0, #0
   17610:	beq	176c8 <generate_code@@Base+0x1580>
   17614:	add	r1, r6, r7, lsl #3
   17618:	cmp	sl, #0
   1761c:	str	sl, [r1, #24]
   17620:	str	r9, [r1, #28]
   17624:	sub	fp, sl, #1
   17628:	beq	17640 <generate_code@@Base+0x14f8>
   1762c:	bl	17500 <generate_code@@Base+0x13b8>
   17630:	sub	fp, fp, #1
   17634:	cmn	fp, #1
   17638:	strd	r0, [r9], #8
   1763c:	bne	1762c <generate_code@@Base+0x14e4>
   17640:	add	r4, r4, #1
   17644:	cmp	r4, #9
   17648:	add	r7, r7, #1
   1764c:	bne	175d4 <generate_code@@Base+0x148c>
   17650:	ldr	r3, [sp, #16]
   17654:	mov	r0, r6
   17658:	str	r6, [r3]
   1765c:	add	sp, sp, #28
   17660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17664:	mvn	r5, #0
   17668:	cmp	r4, #0
   1766c:	bne	176ac <generate_code@@Base+0x1564>
   17670:	ldr	r3, [pc, #92]	; 176d4 <generate_code@@Base+0x158c>
   17674:	mov	r4, r5
   17678:	add	r3, pc, r3
   1767c:	ldr	r0, [pc, #84]	; 176d8 <generate_code@@Base+0x1590>
   17680:	ldr	r2, [sp, #12]
   17684:	ldr	r1, [sp, #20]
   17688:	str	r4, [sp]
   1768c:	add	r0, pc, r0
   17690:	bl	1656c <generate_code@@Base+0x424>
   17694:	mov	r2, r5
   17698:	mov	r1, r6
   1769c:	mov	r0, r8
   176a0:	add	sp, sp, #28
   176a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176a8:	b	165a0 <generate_code@@Base+0x458>
   176ac:	ldr	r3, [pc, #40]	; 176dc <generate_code@@Base+0x1594>
   176b0:	add	r3, pc, r3
   176b4:	b	1767c <generate_code@@Base+0x1534>
   176b8:	ldr	r3, [pc, #32]	; 176e0 <generate_code@@Base+0x1598>
   176bc:	mov	r5, r4
   176c0:	add	r3, pc, r3
   176c4:	b	1767c <generate_code@@Base+0x1534>
   176c8:	mov	r5, r4
   176cc:	mov	r4, fp
   176d0:	b	17668 <generate_code@@Base+0x1520>
   176d4:	muleq	r0, r8, r5
   176d8:	andeq	r1, r0, r8, lsr #11
   176dc:	andeq	r1, r0, r4, ror r5
   176e0:	andeq	r1, r0, r0, asr r5
   176e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176e8:	sub	sp, sp, #36	; 0x24
   176ec:	mov	r9, r0
   176f0:	bl	174e0 <generate_code@@Base+0x1398>
   176f4:	mov	r7, #0
   176f8:	sub	r4, sp, #4
   176fc:	add	r5, sp, #28
   17700:	str	r0, [r9]
   17704:	bl	174e0 <generate_code@@Base+0x1398>
   17708:	str	r0, [r9, #8]
   1770c:	bl	174e0 <generate_code@@Base+0x1398>
   17710:	str	r0, [r9, #12]
   17714:	bl	17500 <generate_code@@Base+0x13b8>
   17718:	strd	r0, [r9, #16]
   1771c:	bl	17500 <generate_code@@Base+0x13b8>
   17720:	strd	r0, [r9, #24]
   17724:	bl	17500 <generate_code@@Base+0x13b8>
   17728:	ldr	r2, [pc, #264]	; 17838 <generate_code@@Base+0x16f0>
   1772c:	strd	r0, [r9, #32]
   17730:	add	r0, r9, #40	; 0x28
   17734:	mov	r1, r7
   17738:	bl	11a60 <memset@plt>
   1773c:	bl	174e0 <generate_code@@Base+0x1398>
   17740:	str	r0, [r4, #4]!
   17744:	bl	18428 <__gcov_sort_n_vals@@Base+0x64c>
   17748:	cmp	r4, r5
   1774c:	add	r7, r7, r0
   17750:	bne	1773c <generate_code@@Base+0x15f4>
   17754:	cmp	r7, #0
   17758:	sub	r7, r7, #1
   1775c:	beq	17824 <generate_code@@Base+0x16dc>
   17760:	ldr	r8, [pc, #212]	; 1783c <generate_code@@Base+0x16f4>
   17764:	ldr	sl, [pc, #212]	; 17840 <generate_code@@Base+0x16f8>
   17768:	mov	r4, #0
   1776c:	add	r8, pc, r8
   17770:	add	sl, pc, sl
   17774:	mov	r5, r4
   17778:	mov	r6, r4
   1777c:	cmp	r4, #0
   17780:	addeq	r3, sp, #32
   17784:	addeq	r6, r3, r5, lsl #2
   17788:	subeq	r6, r6, #36	; 0x24
   1778c:	beq	177a8 <generate_code@@Base+0x1660>
   17790:	b	177d0 <generate_code@@Base+0x1688>
   17794:	ldr	r4, [r6, #4]!
   17798:	add	r3, r5, #1
   1779c:	cmp	r4, #0
   177a0:	bne	177c8 <generate_code@@Base+0x1680>
   177a4:	mov	r5, r3
   177a8:	cmp	r5, #7
   177ac:	bls	17794 <generate_code@@Base+0x164c>
   177b0:	mov	r0, r8
   177b4:	bl	1656c <generate_code@@Base+0x424>
   177b8:	ldr	r4, [r6, #4]!
   177bc:	add	r3, r5, #1
   177c0:	cmp	r4, #0
   177c4:	beq	177a4 <generate_code@@Base+0x165c>
   177c8:	lsl	r6, r5, #5
   177cc:	mov	r5, r3
   177d0:	tst	r4, #1
   177d4:	bne	177e8 <generate_code@@Base+0x16a0>
   177d8:	lsr	r4, r4, #1
   177dc:	tst	r4, #1
   177e0:	add	r6, r6, #1
   177e4:	beq	177d8 <generate_code@@Base+0x1690>
   177e8:	cmp	r6, #251	; 0xfb
   177ec:	bhi	1782c <generate_code@@Base+0x16e4>
   177f0:	bl	174e0 <generate_code@@Base+0x1398>
   177f4:	add	fp, r6, r6, lsl #1
   177f8:	sub	r7, r7, #1
   177fc:	add	fp, r9, fp, lsl #3
   17800:	lsr	r4, r4, #1
   17804:	add	r6, r6, #1
   17808:	str	r0, [fp, #40]	; 0x28
   1780c:	bl	17500 <generate_code@@Base+0x13b8>
   17810:	strd	r0, [fp, #48]	; 0x30
   17814:	bl	17500 <generate_code@@Base+0x13b8>
   17818:	cmn	r7, #1
   1781c:	strd	r0, [fp, #56]	; 0x38
   17820:	bne	1777c <generate_code@@Base+0x1634>
   17824:	add	sp, sp, #36	; 0x24
   17828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1782c:	mov	r0, sl
   17830:	bl	1656c <generate_code@@Base+0x424>
   17834:	b	177f0 <generate_code@@Base+0x16a8>
   17838:	andeq	r1, r0, r0, lsr #15
   1783c:	andeq	r1, r0, ip, ror #9
   17840:	andeq	r1, r0, r8, lsr #10
   17844:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17848:	sub	sp, sp, #6080	; 0x17c0
   1784c:	sub	sp, sp, #28
   17850:	mov	r4, r1
   17854:	strd	r2, [sp, #4]
   17858:	add	r3, sp, #6144	; 0x1800
   1785c:	mov	r9, r0
   17860:	ldr	r7, [r3]
   17864:	add	r3, sp, #6144	; 0x1800
   17868:	add	r3, r3, #4
   1786c:	ldr	r6, [r3]
   17870:	add	r3, sp, #6144	; 0x1800
   17874:	add	r3, r3, #8
   17878:	ldr	sl, [r3]
   1787c:	bl	174e0 <generate_code@@Base+0x1398>
   17880:	add	r3, r4, #12
   17884:	mov	r2, r9
   17888:	str	r3, [sp, #12]
   1788c:	mov	r1, r0
   17890:	mov	r0, r3
   17894:	bl	16efc <generate_code@@Base+0xdb4>
   17898:	cmp	r0, #0
   1789c:	beq	17b24 <generate_code@@Base+0x19dc>
   178a0:	bl	174e0 <generate_code@@Base+0x1398>
   178a4:	ldr	r3, [r4, #8]
   178a8:	cmp	r0, r3
   178ac:	bne	17940 <generate_code@@Base+0x17f8>
   178b0:	ldr	fp, [pc, #628]	; 17b2c <generate_code@@Base+0x19e4>
   178b4:	add	r5, sp, #16
   178b8:	add	fp, pc, fp
   178bc:	bl	16294 <generate_code@@Base+0x14c>
   178c0:	str	r0, [r6]
   178c4:	bl	174e0 <generate_code@@Base+0x1398>
   178c8:	cmp	r0, #-1560281088	; 0xa3000000
   178cc:	bne	17984 <generate_code@@Base+0x183c>
   178d0:	bl	174e0 <generate_code@@Base+0x1398>
   178d4:	mov	r0, r5
   178d8:	bl	176e4 <generate_code@@Base+0x159c>
   178dc:	bl	162b8 <generate_code@@Base+0x170>
   178e0:	add	r2, sp, #2000	; 0x7d0
   178e4:	add	r2, r2, #8
   178e8:	subs	r8, r0, #0
   178ec:	bne	17ab8 <generate_code@@Base+0x1970>
   178f0:	ldr	r3, [r7]
   178f4:	cmp	r3, #0
   178f8:	bne	17950 <generate_code@@Base+0x1808>
   178fc:	ldr	r3, [r2, #-1992]	; 0xfffff838
   17900:	cmp	r3, sl
   17904:	bne	178bc <generate_code@@Base+0x1774>
   17908:	ldr	r3, [sp, #8]
   1790c:	ldr	r2, [r2, #-1984]	; 0xfffff840
   17910:	ldr	r3, [r3]
   17914:	cmp	r2, r3
   17918:	bne	178bc <generate_code@@Base+0x1774>
   1791c:	ldr	r2, [pc, #524]	; 17b30 <generate_code@@Base+0x19e8>
   17920:	mov	r1, r5
   17924:	ldr	r0, [sp, #4]
   17928:	bl	11994 <memcpy@plt>
   1792c:	ldr	r3, [r6]
   17930:	str	r3, [r7]
   17934:	b	178bc <generate_code@@Base+0x1774>
   17938:	cmp	r0, #0
   1793c:	bne	17af8 <generate_code@@Base+0x19b0>
   17940:	mov	r0, #0
   17944:	add	sp, sp, #6080	; 0x17c0
   17948:	add	sp, sp, #28
   1794c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17950:	ldr	r0, [pc, #476]	; 17b34 <generate_code@@Base+0x19ec>
   17954:	bl	119e8 <malloc@plt>
   17958:	ldr	r2, [pc, #464]	; 17b30 <generate_code@@Base+0x19e8>
   1795c:	mov	r1, r5
   17960:	mov	r3, r0
   17964:	str	r0, [fp]
   17968:	add	r0, r0, #8
   1796c:	str	r3, [sp]
   17970:	bl	11994 <memcpy@plt>
   17974:	ldr	r3, [sp]
   17978:	str	r8, [r3]
   1797c:	ldr	fp, [fp]
   17980:	b	178bc <generate_code@@Base+0x1774>
   17984:	ldr	r5, [r4, #52]	; 0x34
   17988:	cmp	r5, #0
   1798c:	beq	17938 <generate_code@@Base+0x17f0>
   17990:	ldr	r3, [r4, #56]	; 0x38
   17994:	cmp	r0, #16777216	; 0x1000000
   17998:	ldr	r8, [r3]
   1799c:	bne	17af4 <generate_code@@Base+0x19ac>
   179a0:	ldr	r6, [pc, #400]	; 17b38 <generate_code@@Base+0x19f0>
   179a4:	mov	r5, #0
   179a8:	add	r6, pc, r6
   179ac:	add	r6, r6, #4
   179b0:	b	179f4 <generate_code@@Base+0x18ac>
   179b4:	mov	r2, r6
   179b8:	mov	r3, r5
   179bc:	mov	r1, r4
   179c0:	mov	r0, r9
   179c4:	bl	17544 <generate_code@@Base+0x13fc>
   179c8:	subs	r6, r0, #0
   179cc:	beq	17af8 <generate_code@@Base+0x19b0>
   179d0:	bl	174e0 <generate_code@@Base+0x1398>
   179d4:	ldr	r3, [r4, #52]	; 0x34
   179d8:	add	r5, r5, #1
   179dc:	cmp	r3, r5
   179e0:	beq	17938 <generate_code@@Base+0x17f0>
   179e4:	ldr	r3, [r4, #56]	; 0x38
   179e8:	cmp	r0, #16777216	; 0x1000000
   179ec:	ldr	r8, [r3, r5, lsl #2]
   179f0:	bne	17af8 <generate_code@@Base+0x19b0>
   179f4:	bl	174e0 <generate_code@@Base+0x1398>
   179f8:	cmp	r0, #0
   179fc:	beq	179d0 <generate_code@@Base+0x1888>
   17a00:	cmp	r0, #3
   17a04:	bne	17af8 <generate_code@@Base+0x19b0>
   17a08:	cmp	r8, #0
   17a0c:	beq	179b4 <generate_code@@Base+0x186c>
   17a10:	ldr	r3, [r8]
   17a14:	cmp	r4, r3
   17a18:	bne	179b4 <generate_code@@Base+0x186c>
   17a1c:	bl	174e0 <generate_code@@Base+0x1398>
   17a20:	ldr	r3, [r8, #4]
   17a24:	cmp	r0, r3
   17a28:	bne	17af8 <generate_code@@Base+0x19b0>
   17a2c:	bl	174e0 <generate_code@@Base+0x1398>
   17a30:	ldr	r3, [r8, #8]
   17a34:	cmp	r0, r3
   17a38:	bne	17af8 <generate_code@@Base+0x19b0>
   17a3c:	bl	174e0 <generate_code@@Base+0x1398>
   17a40:	ldr	r3, [r8, #12]
   17a44:	cmp	r0, r3
   17a48:	bne	17af8 <generate_code@@Base+0x19b0>
   17a4c:	ldr	r7, [pc, #232]	; 17b3c <generate_code@@Base+0x19f4>
   17a50:	ldr	fp, [sp, #12]
   17a54:	add	r8, r8, #16
   17a58:	ldr	sl, [fp, #4]!
   17a5c:	cmp	sl, #0
   17a60:	beq	17a98 <generate_code@@Base+0x1950>
   17a64:	bl	174e0 <generate_code@@Base+0x1398>
   17a68:	str	r0, [sp]
   17a6c:	bl	174e0 <generate_code@@Base+0x1398>
   17a70:	ldr	r3, [sp]
   17a74:	cmp	r3, r7
   17a78:	bne	17af8 <generate_code@@Base+0x19b0>
   17a7c:	ldr	r3, [r8]
   17a80:	mov	r1, r3
   17a84:	cmp	r0, r3, lsl #1
   17a88:	bne	17af8 <generate_code@@Base+0x19b0>
   17a8c:	ldr	r0, [r8, #4]
   17a90:	blx	sl
   17a94:	add	r8, r8, #8
   17a98:	ldr	r3, [pc, #160]	; 17b40 <generate_code@@Base+0x19f8>
   17a9c:	add	r7, r7, #131072	; 0x20000
   17aa0:	cmp	r7, r3
   17aa4:	bne	17a58 <generate_code@@Base+0x1910>
   17aa8:	bl	162b8 <generate_code@@Base+0x170>
   17aac:	cmp	r0, #0
   17ab0:	beq	179d0 <generate_code@@Base+0x1888>
   17ab4:	mov	r8, r0
   17ab8:	cmp	r8, #0
   17abc:	blt	17ae8 <generate_code@@Base+0x19a0>
   17ac0:	ldr	r2, [pc, #124]	; 17b44 <generate_code@@Base+0x19fc>
   17ac4:	add	r2, pc, r2
   17ac8:	ldr	r0, [pc, #120]	; 17b48 <generate_code@@Base+0x1a00>
   17acc:	mov	r1, r9
   17ad0:	add	r0, pc, r0
   17ad4:	bl	1656c <generate_code@@Base+0x424>
   17ad8:	mvn	r0, #0
   17adc:	add	sp, sp, #6080	; 0x17c0
   17ae0:	add	sp, sp, #28
   17ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ae8:	ldr	r2, [pc, #92]	; 17b4c <generate_code@@Base+0x1a04>
   17aec:	add	r2, pc, r2
   17af0:	b	17ac8 <generate_code@@Base+0x1980>
   17af4:	mov	r5, #0
   17af8:	ldr	r2, [pc, #80]	; 17b50 <generate_code@@Base+0x1a08>
   17afc:	ldr	r0, [pc, #80]	; 17b54 <generate_code@@Base+0x1a0c>
   17b00:	mov	r3, r5
   17b04:	mov	r1, r9
   17b08:	add	r2, pc, r2
   17b0c:	add	r0, pc, r0
   17b10:	bl	1656c <generate_code@@Base+0x424>
   17b14:	mvn	r0, #0
   17b18:	add	sp, sp, #6080	; 0x17c0
   17b1c:	add	sp, sp, #28
   17b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b24:	mvn	r0, #0
   17b28:	b	17944 <generate_code@@Base+0x17fc>
   17b2c:			; <UNDEFINED> instruction: 0x00012db8
   17b30:	andeq	r1, r0, r8, asr #15
   17b34:	ldrdeq	r1, [r0], -r0
   17b38:	andeq	r2, r1, r8, asr #25
   17b3c:			; <UNDEFINED> instruction: 0x01a10000
   17b40:			; <UNDEFINED> instruction: 0x01b30000
   17b44:	andeq	r1, r0, ip, lsl r2
   17b48:	andeq	r1, r0, ip, asr #4
   17b4c:	andeq	r1, r0, r8, ror #3
   17b50:	andeq	r1, r0, r0, ror #3
   17b54:	andeq	r1, r0, r8, ror #3
   17b58:	ldr	r3, [pc, #72]	; 17ba8 <generate_code@@Base+0x1a60>
   17b5c:	ldr	r2, [pc, #72]	; 17bac <generate_code@@Base+0x1a64>
   17b60:	add	r3, pc, r3
   17b64:	push	{r4, r5, r6, lr}
   17b68:	mov	r5, r0
   17b6c:	ldr	r4, [r3, r2]
   17b70:	ldr	r0, [r4, #8]
   17b74:	cmp	r0, #0
   17b78:	bne	17ba0 <generate_code@@Base+0x1a58>
   17b7c:	lsl	r1, r5, #2
   17b80:	mov	r2, #0
   17b84:	ldr	r0, [r4]
   17b88:	bl	11ad8 <fseek@plt>
   17b8c:	ldr	r0, [r4]
   17b90:	bl	119a0 <ftell@plt>
   17b94:	asr	r0, r0, #2
   17b98:	str	r0, [r4, #4]
   17b9c:	pop	{r4, r5, r6, pc}
   17ba0:	bl	16364 <generate_code@@Base+0x21c>
   17ba4:	b	17b7c <generate_code@@Base+0x1a34>
   17ba8:	muleq	r1, r8, r4
   17bac:	andeq	r0, r0, ip, lsr #1
   17bb0:	cmp	r2, #0
   17bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bb8:	mov	r8, r0
   17bbc:	sub	sp, sp, #20
   17bc0:	mov	r5, r1
   17bc4:	mov	r4, r3
   17bc8:	beq	17d98 <generate_code@@Base+0x1c50>
   17bcc:	cmp	r4, #0
   17bd0:	bne	17db4 <generate_code@@Base+0x1c6c>
   17bd4:	mov	r1, r5
   17bd8:	ldr	r5, [pc, #480]	; 17dc0 <generate_code@@Base+0x1c78>
   17bdc:	mov	r0, #-1560281088	; 0xa3000000
   17be0:	add	r5, pc, r5
   17be4:	bl	173d8 <generate_code@@Base+0x1290>
   17be8:	ldr	r4, [r5]
   17bec:	cmp	r4, #0
   17bf0:	beq	17c1c <generate_code@@Base+0x1ad4>
   17bf4:	add	r1, r4, #8
   17bf8:	mov	r0, #-1560281088	; 0xa3000000
   17bfc:	bl	173d8 <generate_code@@Base+0x1290>
   17c00:	ldr	r3, [r5]
   17c04:	mov	r0, r3
   17c08:	ldr	r4, [r3]
   17c0c:	bl	11988 <free@plt>
   17c10:	cmp	r4, #0
   17c14:	str	r4, [r5]
   17c18:	bne	17bf4 <generate_code@@Base+0x1aac>
   17c1c:	ldr	r3, [r8, #52]	; 0x34
   17c20:	cmp	r3, #0
   17c24:	beq	17d70 <generate_code@@Base+0x1c28>
   17c28:	ldr	r3, [pc, #404]	; 17dc4 <generate_code@@Base+0x1c7c>
   17c2c:	ldr	r9, [pc, #404]	; 17dc8 <generate_code@@Base+0x1c80>
   17c30:	add	r3, pc, r3
   17c34:	str	r3, [sp, #4]
   17c38:	ldr	r3, [pc, #396]	; 17dcc <generate_code@@Base+0x1c84>
   17c3c:	mov	r7, #0
   17c40:	add	r3, pc, r3
   17c44:	str	r3, [sp, #12]
   17c48:	b	17c84 <generate_code@@Base+0x1b3c>
   17c4c:	ldr	r3, [r8, #56]	; 0x38
   17c50:	ldr	r4, [r3, r7, lsl #2]
   17c54:	cmp	r4, #0
   17c58:	beq	17c68 <generate_code@@Base+0x1b20>
   17c5c:	ldr	r3, [r4]
   17c60:	cmp	r3, r8
   17c64:	beq	17d80 <generate_code@@Base+0x1c38>
   17c68:	mov	r1, #0
   17c6c:	mov	r0, #16777216	; 0x1000000
   17c70:	bl	173b8 <generate_code@@Base+0x1270>
   17c74:	ldr	r3, [r8, #52]	; 0x34
   17c78:	add	r7, r7, #1
   17c7c:	cmp	r3, r7
   17c80:	beq	17d70 <generate_code@@Base+0x1c28>
   17c84:	ldr	r3, [sp, #4]
   17c88:	ldr	r4, [r3, #4]
   17c8c:	cmp	r4, #0
   17c90:	beq	17c4c <generate_code@@Base+0x1b04>
   17c94:	ldr	r3, [r4, #4]
   17c98:	cmp	r3, r7
   17c9c:	bne	17c4c <generate_code@@Base+0x1b04>
   17ca0:	mov	r3, #1
   17ca4:	mov	r1, #3
   17ca8:	mov	r0, #16777216	; 0x1000000
   17cac:	add	r4, r4, #8
   17cb0:	str	r3, [sp, #8]
   17cb4:	bl	173b8 <generate_code@@Base+0x1270>
   17cb8:	ldr	r0, [r4, #4]
   17cbc:	bl	17380 <generate_code@@Base+0x1238>
   17cc0:	ldr	r0, [r4, #8]
   17cc4:	bl	17380 <generate_code@@Base+0x1238>
   17cc8:	ldr	r0, [r4, #12]
   17ccc:	bl	17380 <generate_code@@Base+0x1238>
   17cd0:	ldr	r5, [pc, #248]	; 17dd0 <generate_code@@Base+0x1c88>
   17cd4:	add	r4, r4, #16
   17cd8:	add	r6, r8, #12
   17cdc:	b	17cec <generate_code@@Base+0x1ba4>
   17ce0:	add	r5, r5, #131072	; 0x20000
   17ce4:	cmp	r5, r9
   17ce8:	beq	17d3c <generate_code@@Base+0x1bf4>
   17cec:	ldr	r3, [r6, #4]!
   17cf0:	cmp	r3, #0
   17cf4:	beq	17ce0 <generate_code@@Base+0x1b98>
   17cf8:	ldr	fp, [r4]
   17cfc:	mov	r0, r5
   17d00:	sub	sl, fp, #1
   17d04:	lsl	r1, fp, #1
   17d08:	bl	173b8 <generate_code@@Base+0x1270>
   17d0c:	cmp	fp, #0
   17d10:	ldr	fp, [r4, #4]
   17d14:	beq	17d2c <generate_code@@Base+0x1be4>
   17d18:	sub	sl, sl, #1
   17d1c:	ldrd	r0, [fp], #8
   17d20:	bl	17398 <generate_code@@Base+0x1250>
   17d24:	cmn	sl, #1
   17d28:	bne	17d18 <generate_code@@Base+0x1bd0>
   17d2c:	add	r5, r5, #131072	; 0x20000
   17d30:	cmp	r5, r9
   17d34:	add	r4, r4, #8
   17d38:	bne	17cec <generate_code@@Base+0x1ba4>
   17d3c:	ldr	r3, [sp, #8]
   17d40:	cmp	r3, #0
   17d44:	beq	17c74 <generate_code@@Base+0x1b2c>
   17d48:	ldr	r4, [sp, #12]
   17d4c:	mov	r2, #9
   17d50:	mov	r0, r8
   17d54:	ldr	r1, [r4, #4]
   17d58:	bl	165a0 <generate_code@@Base+0x458>
   17d5c:	ldr	r3, [r8, #52]	; 0x34
   17d60:	add	r7, r7, #1
   17d64:	cmp	r3, r7
   17d68:	str	r0, [r4, #4]
   17d6c:	bne	17c84 <generate_code@@Base+0x1b3c>
   17d70:	mov	r0, #0
   17d74:	add	sp, sp, #20
   17d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d7c:	b	17380 <generate_code@@Base+0x1238>
   17d80:	mov	r1, #3
   17d84:	mov	r0, #16777216	; 0x1000000
   17d88:	bl	173b8 <generate_code@@Base+0x1270>
   17d8c:	mov	r3, #0
   17d90:	str	r3, [sp, #8]
   17d94:	b	17cb8 <generate_code@@Base+0x1b70>
   17d98:	ldr	r1, [pc, #52]	; 17dd4 <generate_code@@Base+0x1c8c>
   17d9c:	ldr	r0, [pc, #52]	; 17dd8 <generate_code@@Base+0x1c90>
   17da0:	bl	173b8 <generate_code@@Base+0x1270>
   17da4:	ldr	r0, [r8, #8]
   17da8:	bl	17380 <generate_code@@Base+0x1238>
   17dac:	cmp	r4, #0
   17db0:	beq	17bd4 <generate_code@@Base+0x1a8c>
   17db4:	mov	r0, r4
   17db8:	bl	17b58 <generate_code@@Base+0x1a10>
   17dbc:	b	17bd4 <generate_code@@Base+0x1a8c>
   17dc0:	muleq	r1, r0, sl
   17dc4:	andeq	r2, r1, r0, asr #20
   17dc8:			; <UNDEFINED> instruction: 0x01b30000
   17dcc:	andeq	r2, r1, r0, lsr sl
   17dd0:			; <UNDEFINED> instruction: 0x01a10000
   17dd4:	teqmi	r8, sl, lsr #6
   17dd8:	strbvs	r6, [r3, -r1, ror #8]!

00017ddc <__gcov_sort_n_vals@@Base>:
   17ddc:	cmp	r1, #2
   17de0:	bxle	lr
   17de4:	sub	r1, r1, #3
   17de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dec:	add	r2, r0, #8
   17df0:	sub	sp, sp, #20
   17df4:	mov	r6, r0
   17df8:	bic	r7, r1, #1
   17dfc:	mvn	r8, #15
   17e00:	mov	lr, #0
   17e04:	ldrd	r0, [r2]
   17e08:	ldrd	r4, [r2, #16]
   17e0c:	ldrd	sl, [r2, #8]
   17e10:	add	r9, r2, #16
   17e14:	cmp	r0, r4
   17e18:	sbcs	r3, r1, r5
   17e1c:	mov	ip, r9
   17e20:	sub	r1, r6, r8
   17e24:	strd	sl, [sp]
   17e28:	mov	r3, lr
   17e2c:	bge	17e94 <__gcov_sort_n_vals@@Base+0xb8>
   17e30:	add	sl, r8, #16
   17e34:	mvn	fp, #1
   17e38:	add	sl, r2, sl
   17e3c:	orr	fp, lr, fp
   17e40:	str	r7, [sp, #8]
   17e44:	str	r6, [sp, #12]
   17e48:	b	17e60 <__gcov_sort_n_vals@@Base+0x84>
   17e4c:	ldrd	r6, [ip, #-16]
   17e50:	sub	r2, r2, #16
   17e54:	cmp	r6, r4
   17e58:	sbcs	r1, r7, r5
   17e5c:	bge	17ebc <__gcov_sort_n_vals@@Base+0xe0>
   17e60:	ldrd	r6, [r2, #-8]
   17e64:	lsl	r1, r3, #3
   17e68:	mov	r0, r3
   17e6c:	strd	r6, [r2, #8]
   17e70:	ldrd	r6, [sl, r1]
   17e74:	sub	r3, r3, #2
   17e78:	cmp	r3, fp
   17e7c:	strd	r6, [r2, #16]
   17e80:	mov	ip, r2
   17e84:	bne	17e4c <__gcov_sort_n_vals@@Base+0x70>
   17e88:	ldr	r6, [sp, #12]
   17e8c:	ldr	r7, [sp, #8]
   17e90:	add	r1, r6, r1
   17e94:	ldrd	r2, [sp]
   17e98:	cmp	lr, r7
   17e9c:	sub	r8, r8, #16
   17ea0:	strd	r2, [r1]
   17ea4:	add	lr, lr, #2
   17ea8:	strd	r4, [ip]
   17eac:	mov	r2, r9
   17eb0:	bne	17e04 <__gcov_sort_n_vals@@Base+0x28>
   17eb4:	add	sp, sp, #20
   17eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ebc:	ldr	r6, [sp, #12]
   17ec0:	ldr	r7, [sp, #8]
   17ec4:	add	r1, r6, r0, lsl #3
   17ec8:	b	17e94 <__gcov_sort_n_vals@@Base+0xb8>
   17ecc:	push	{r4, r5, r6, lr}
   17ed0:	ldr	r4, [pc, #76]	; 17f24 <__gcov_sort_n_vals@@Base+0x148>
   17ed4:	smull	r2, r3, r4, r0
   17ed8:	asr	r4, r0, #31
   17edc:	rsb	r4, r4, r3, asr #1
   17ee0:	add	r4, r4, r4, lsl #3
   17ee4:	subs	r4, r0, r4
   17ee8:	bne	17f20 <__gcov_sort_n_vals@@Base+0x144>
   17eec:	cmp	r0, #0
   17ef0:	mov	r6, r0
   17ef4:	ldr	r5, [r1]
   17ef8:	pople	{r4, r5, r6, pc}
   17efc:	add	r5, r5, #8
   17f00:	mov	r0, r5
   17f04:	add	r4, r4, #9
   17f08:	mov	r1, #8
   17f0c:	bl	17ddc <__gcov_sort_n_vals@@Base>
   17f10:	cmp	r6, r4
   17f14:	add	r5, r5, #72	; 0x48
   17f18:	bgt	17f00 <__gcov_sort_n_vals@@Base+0x124>
   17f1c:	pop	{r4, r5, r6, pc}
   17f20:	bl	11af0 <abort@plt>
   17f24:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   17f28:	ldr	r3, [r0, #48]	; 0x30
   17f2c:	cmp	r3, #0
   17f30:	bxeq	lr
   17f34:	push	{r4, r5, r6, lr}
   17f38:	ldr	lr, [r0, #52]	; 0x34
   17f3c:	cmp	lr, #0
   17f40:	popeq	{r4, r5, r6, pc}
   17f44:	mov	r5, r0
   17f48:	mov	r4, #0
   17f4c:	add	r6, r0, #12
   17f50:	ldr	r1, [r5, #56]	; 0x38
   17f54:	mov	r2, r6
   17f58:	mov	r3, #0
   17f5c:	ldr	r1, [r1, r4, lsl #2]
   17f60:	add	r1, r1, #16
   17f64:	ldr	ip, [r2, #4]!
   17f68:	cmp	ip, #0
   17f6c:	beq	17f7c <__gcov_sort_n_vals@@Base+0x1a0>
   17f70:	cmp	r3, #8
   17f74:	beq	17f98 <__gcov_sort_n_vals@@Base+0x1bc>
   17f78:	add	r1, r1, #8
   17f7c:	add	r3, r3, #1
   17f80:	cmp	r3, #9
   17f84:	bne	17f64 <__gcov_sort_n_vals@@Base+0x188>
   17f88:	add	r4, r4, #1
   17f8c:	cmp	lr, r4
   17f90:	bne	17f50 <__gcov_sort_n_vals@@Base+0x174>
   17f94:	pop	{r4, r5, r6, pc}
   17f98:	ldr	r0, [r1], #4
   17f9c:	bl	17ecc <__gcov_sort_n_vals@@Base+0xf0>
   17fa0:	ldr	lr, [r5, #52]	; 0x34
   17fa4:	b	17f88 <__gcov_sort_n_vals@@Base+0x1ac>
   17fa8:	push	{r4, r5, r6, r7, r8, r9, lr}
   17fac:	sub	sp, sp, #6080	; 0x17c0
   17fb0:	ldr	ip, [pc, #396]	; 18144 <__gcov_sort_n_vals@@Base+0x368>
   17fb4:	sub	sp, sp, #36	; 0x24
   17fb8:	add	ip, pc, ip
   17fbc:	add	r5, sp, #2016	; 0x7e0
   17fc0:	mov	r4, r0
   17fc4:	mov	r6, r1
   17fc8:	mov	r1, #0
   17fcc:	str	r1, [ip, #4]
   17fd0:	str	r1, [ip]
   17fd4:	mov	r8, r2
   17fd8:	mov	r7, r3
   17fdc:	str	r1, [r5, #-2000]	; 0xfffff830
   17fe0:	str	r1, [r5, #-1996]	; 0xfffff834
   17fe4:	bl	17f28 <__gcov_sort_n_vals@@Base+0x14c>
   17fe8:	mov	r1, r6
   17fec:	ldr	r0, [r4, #12]
   17ff0:	bl	171f8 <generate_code@@Base+0x10b0>
   17ff4:	cmn	r0, #1
   17ff8:	beq	18074 <__gcov_sort_n_vals@@Base+0x298>
   17ffc:	bl	174e0 <generate_code@@Base+0x1398>
   18000:	cmp	r0, #0
   18004:	beq	18080 <__gcov_sort_n_vals@@Base+0x2a4>
   18008:	ldr	r2, [pc, #312]	; 18148 <__gcov_sort_n_vals@@Base+0x36c>
   1800c:	ldr	r1, [r6]
   18010:	cmp	r0, r2
   18014:	beq	180d8 <__gcov_sort_n_vals@@Base+0x2fc>
   18018:	ldr	r0, [pc, #300]	; 1814c <__gcov_sort_n_vals@@Base+0x370>
   1801c:	add	r0, pc, r0
   18020:	bl	1656c <generate_code@@Base+0x424>
   18024:	ldr	r5, [pc, #292]	; 18150 <__gcov_sort_n_vals@@Base+0x374>
   18028:	add	r5, pc, r5
   1802c:	ldr	r1, [r5, #4]
   18030:	cmp	r1, #0
   18034:	beq	18054 <__gcov_sort_n_vals@@Base+0x278>
   18038:	mov	r2, #9
   1803c:	mov	r0, r4
   18040:	bl	165a0 <generate_code@@Base+0x458>
   18044:	cmp	r0, #0
   18048:	mov	r1, r0
   1804c:	str	r0, [r5, #4]
   18050:	bne	18038 <__gcov_sort_n_vals@@Base+0x25c>
   18054:	bl	17310 <generate_code@@Base+0x11c8>
   18058:	cmp	r0, #0
   1805c:	beq	18074 <__gcov_sort_n_vals@@Base+0x298>
   18060:	blt	18138 <__gcov_sort_n_vals@@Base+0x35c>
   18064:	ldr	r0, [pc, #232]	; 18154 <__gcov_sort_n_vals@@Base+0x378>
   18068:	add	r0, pc, r0
   1806c:	ldr	r1, [r6]
   18070:	bl	1656c <generate_code@@Base+0x424>
   18074:	add	sp, sp, #6080	; 0x17c0
   18078:	add	sp, sp, #36	; 0x24
   1807c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18080:	bl	170b0 <generate_code@@Base+0xf68>
   18084:	ldr	r1, [r5, #-2000]	; 0xfffff830
   18088:	add	r9, sp, #24
   1808c:	cmp	r1, #0
   18090:	beq	18120 <__gcov_sort_n_vals@@Base+0x344>
   18094:	add	r3, sp, #6144	; 0x1800
   18098:	str	r7, [sp, #4]
   1809c:	ldr	r3, [r3]
   180a0:	mov	r1, r8
   180a4:	str	r3, [sp]
   180a8:	add	r2, r4, #16
   180ac:	mov	r3, r9
   180b0:	ldr	r0, [r6]
   180b4:	bl	16f5c <generate_code@@Base+0xe14>
   180b8:	cmn	r0, #1
   180bc:	beq	18024 <__gcov_sort_n_vals@@Base+0x248>
   180c0:	mov	r1, r9
   180c4:	ldr	r3, [r5, #-2000]	; 0xfffff830
   180c8:	ldr	r2, [r5, #-1996]	; 0xfffff834
   180cc:	mov	r0, r4
   180d0:	bl	17bb0 <generate_code@@Base+0x1a68>
   180d4:	b	18024 <__gcov_sort_n_vals@@Base+0x248>
   180d8:	add	ip, sp, #20
   180dc:	add	r3, sp, #16
   180e0:	str	r7, [sp, #8]
   180e4:	stm	sp, {r3, ip}
   180e8:	add	r3, sp, #6144	; 0x1800
   180ec:	add	r9, sp, #24
   180f0:	ldr	r3, [r3]
   180f4:	mov	r0, r1
   180f8:	mov	r2, r9
   180fc:	add	r3, r3, #8
   18100:	mov	r1, r4
   18104:	bl	17844 <generate_code@@Base+0x16fc>
   18108:	cmn	r0, #1
   1810c:	beq	18024 <__gcov_sort_n_vals@@Base+0x248>
   18110:	bl	170b0 <generate_code@@Base+0xf68>
   18114:	ldr	r1, [r5, #-2000]	; 0xfffff830
   18118:	cmp	r1, #0
   1811c:	bne	18094 <__gcov_sort_n_vals@@Base+0x2b8>
   18120:	ldr	r2, [pc, #48]	; 18158 <__gcov_sort_n_vals@@Base+0x37c>
   18124:	mov	r0, r9
   18128:	bl	11a60 <memset@plt>
   1812c:	ldr	r3, [r5, #-1996]	; 0xfffff834
   18130:	str	r3, [r5, #-2000]	; 0xfffff830
   18134:	b	18094 <__gcov_sort_n_vals@@Base+0x2b8>
   18138:	ldr	r0, [pc, #28]	; 1815c <__gcov_sort_n_vals@@Base+0x380>
   1813c:	add	r0, pc, r0
   18140:	b	1806c <__gcov_sort_n_vals@@Base+0x290>
   18144:			; <UNDEFINED> instruction: 0x000126b8
   18148:	strbvs	r6, [r3, -r1, ror #8]!
   1814c:	andeq	r0, r0, r8, asr sp
   18150:	andeq	r2, r1, r8, asr #12
   18154:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   18158:	andeq	r1, r0, r8, asr #15
   1815c:	strdeq	r0, [r0], -ip
   18160:	push	{r4, r5, r6, r7, r8, lr}
   18164:	sub	sp, sp, #6080	; 0x17c0
   18168:	sub	sp, sp, #32
   1816c:	add	r6, sp, #24
   18170:	add	r2, sp, #12
   18174:	mov	r8, r1
   18178:	mov	r1, r6
   1817c:	mov	r4, r0
   18180:	bl	167b8 <generate_code@@Base+0x670>
   18184:	add	r5, sp, #8
   18188:	mov	r7, r0
   1818c:	mov	r0, r5
   18190:	bl	1694c <generate_code@@Base+0x804>
   18194:	cmp	r4, #0
   18198:	beq	181c0 <__gcov_sort_n_vals@@Base+0x3e4>
   1819c:	mov	r0, r4
   181a0:	str	r6, [sp]
   181a4:	mov	r3, r7
   181a8:	mov	r2, r8
   181ac:	mov	r1, r5
   181b0:	bl	17fa8 <__gcov_sort_n_vals@@Base+0x1cc>
   181b4:	ldr	r4, [r4, #4]
   181b8:	cmp	r4, #0
   181bc:	bne	1819c <__gcov_sort_n_vals@@Base+0x3c0>
   181c0:	ldr	r0, [sp, #8]
   181c4:	bl	11988 <free@plt>
   181c8:	add	sp, sp, #6080	; 0x17c0
   181cc:	add	sp, sp, #32
   181d0:	pop	{r4, r5, r6, r7, r8, pc}
   181d4:	ldrb	r1, [r0, #4]
   181d8:	tst	r1, #1
   181dc:	bxne	lr
   181e0:	push	{r4, lr}
   181e4:	lsr	r1, r1, #1
   181e8:	mov	r4, r0
   181ec:	and	r1, r1, #1
   181f0:	ldr	r0, [r0]
   181f4:	bl	18160 <__gcov_sort_n_vals@@Base+0x384>
   181f8:	ldrb	r3, [r4, #4]
   181fc:	bic	r3, r3, #3
   18200:	orr	r3, r3, #3
   18204:	strb	r3, [r4, #4]
   18208:	pop	{r4, pc}
   1820c:	push	{r4, r5, r6, lr}
   18210:	ldr	r4, [pc, #84]	; 1826c <__gcov_sort_n_vals@@Base+0x490>
   18214:	ldr	r5, [pc, #84]	; 18270 <__gcov_sort_n_vals@@Base+0x494>
   18218:	add	r4, pc, r4
   1821c:	mov	r0, r4
   18220:	bl	181d4 <__gcov_sort_n_vals@@Base+0x3f8>
   18224:	ldr	r3, [r4, #8]
   18228:	add	r5, pc, r5
   1822c:	cmp	r3, #0
   18230:	ldrne	r2, [r4, #12]
   18234:	strne	r2, [r3, #12]
   18238:	ldr	r2, [pc, #52]	; 18274 <__gcov_sort_n_vals@@Base+0x498>
   1823c:	add	r2, pc, r2
   18240:	ldr	r2, [r2, #12]
   18244:	cmp	r2, #0
   18248:	strne	r3, [r2, #8]
   1824c:	beq	18258 <__gcov_sort_n_vals@@Base+0x47c>
   18250:	pop	{r4, r5, r6, lr}
   18254:	b	16314 <generate_code@@Base+0x1cc>
   18258:	ldr	r2, [pc, #24]	; 18278 <__gcov_sort_n_vals@@Base+0x49c>
   1825c:	ldr	r2, [r5, r2]
   18260:	pop	{r4, r5, r6, lr}
   18264:	str	r3, [r2, #4]
   18268:	b	16314 <generate_code@@Base+0x1cc>
   1826c:	andeq	r2, r1, r4, ror #8
   18270:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   18274:	andeq	r2, r1, r0, asr #8
   18278:	andeq	r0, r0, r8, lsr #1
   1827c:	ldr	r1, [r0]
   18280:	push	{r4, r5, r6, lr}
   18284:	cmp	r1, #0
   18288:	ldr	r5, [pc, #156]	; 1832c <__gcov_sort_n_vals@@Base+0x550>
   1828c:	add	r5, pc, r5
   18290:	popeq	{r4, r5, r6, pc}
   18294:	ldr	r3, [r0, #52]	; 0x34
   18298:	cmp	r3, #0
   1829c:	popeq	{r4, r5, r6, pc}
   182a0:	mov	r4, r0
   182a4:	mov	r2, #0
   182a8:	add	r0, r0, #12
   182ac:	bl	16efc <generate_code@@Base+0xdb4>
   182b0:	cmp	r0, #0
   182b4:	popeq	{r4, r5, r6, pc}
   182b8:	ldr	r6, [pc, #112]	; 18330 <__gcov_sort_n_vals@@Base+0x554>
   182bc:	add	r6, pc, r6
   182c0:	ldr	r2, [r6]
   182c4:	cmp	r2, #0
   182c8:	beq	182e0 <__gcov_sort_n_vals@@Base+0x504>
   182cc:	ldr	r3, [pc, #96]	; 18334 <__gcov_sort_n_vals@@Base+0x558>
   182d0:	str	r2, [r4, #4]
   182d4:	add	r3, pc, r3
   182d8:	str	r4, [r3]
   182dc:	pop	{r4, r5, r6, pc}
   182e0:	ldr	r3, [pc, #80]	; 18338 <__gcov_sort_n_vals@@Base+0x55c>
   182e4:	ldr	r2, [pc, #80]	; 1833c <__gcov_sort_n_vals@@Base+0x560>
   182e8:	mov	r0, #12
   182ec:	ldr	r5, [r5, r3]
   182f0:	add	r2, pc, r2
   182f4:	ldr	r1, [r5]
   182f8:	bl	16efc <generate_code@@Base+0xdb4>
   182fc:	cmp	r0, #0
   18300:	ldreq	r2, [r6]
   18304:	beq	182cc <__gcov_sort_n_vals@@Base+0x4f0>
   18308:	ldr	r3, [r5, #4]
   1830c:	cmp	r3, #0
   18310:	str	r3, [r6, #8]
   18314:	strne	r6, [r3, #12]
   18318:	ldr	r3, [pc, #32]	; 18340 <__gcov_sort_n_vals@@Base+0x564>
   1831c:	add	r3, pc, r3
   18320:	str	r3, [r5, #4]
   18324:	ldr	r2, [r3]
   18328:	b	182cc <__gcov_sort_n_vals@@Base+0x4f0>
   1832c:	andeq	r0, r1, ip, ror #26
   18330:	andeq	r2, r1, r0, asr #7
   18334:	andeq	r2, r1, r8, lsr #7
   18338:	andeq	r0, r0, r8, lsr #1
   1833c:	andeq	r0, r0, r8, lsr #21
   18340:	andeq	r2, r1, r0, ror #6
   18344:	cmp	r3, #0
   18348:	cmpeq	r2, #0
   1834c:	bne	18370 <__gcov_sort_n_vals@@Base+0x594>
   18350:	cmp	r1, #0
   18354:	movlt	r1, #-2147483648	; 0x80000000
   18358:	movlt	r0, #0
   1835c:	blt	1836c <__gcov_sort_n_vals@@Base+0x590>
   18360:	cmpeq	r0, #0
   18364:	mvnne	r1, #-2147483648	; 0x80000000
   18368:	mvnne	r0, #0
   1836c:	b	18418 <__gcov_sort_n_vals@@Base+0x63c>
   18370:	sub	sp, sp, #8
   18374:	push	{sp, lr}
   18378:	cmp	r1, #0
   1837c:	blt	1839c <__gcov_sort_n_vals@@Base+0x5c0>
   18380:	cmp	r3, #0
   18384:	blt	183d0 <__gcov_sort_n_vals@@Base+0x5f4>
   18388:	bl	1846c <__gcov_sort_n_vals@@Base+0x690>
   1838c:	ldr	lr, [sp, #4]
   18390:	add	sp, sp, #8
   18394:	pop	{r2, r3}
   18398:	bx	lr
   1839c:	rsbs	r0, r0, #0
   183a0:	sbc	r1, r1, r1, lsl #1
   183a4:	cmp	r3, #0
   183a8:	blt	183f4 <__gcov_sort_n_vals@@Base+0x618>
   183ac:	bl	1846c <__gcov_sort_n_vals@@Base+0x690>
   183b0:	ldr	lr, [sp, #4]
   183b4:	add	sp, sp, #8
   183b8:	pop	{r2, r3}
   183bc:	rsbs	r0, r0, #0
   183c0:	sbc	r1, r1, r1, lsl #1
   183c4:	rsbs	r2, r2, #0
   183c8:	sbc	r3, r3, r3, lsl #1
   183cc:	bx	lr
   183d0:	rsbs	r2, r2, #0
   183d4:	sbc	r3, r3, r3, lsl #1
   183d8:	bl	1846c <__gcov_sort_n_vals@@Base+0x690>
   183dc:	ldr	lr, [sp, #4]
   183e0:	add	sp, sp, #8
   183e4:	pop	{r2, r3}
   183e8:	rsbs	r0, r0, #0
   183ec:	sbc	r1, r1, r1, lsl #1
   183f0:	bx	lr
   183f4:	rsbs	r2, r2, #0
   183f8:	sbc	r3, r3, r3, lsl #1
   183fc:	bl	1846c <__gcov_sort_n_vals@@Base+0x690>
   18400:	ldr	lr, [sp, #4]
   18404:	add	sp, sp, #8
   18408:	pop	{r2, r3}
   1840c:	rsbs	r2, r2, #0
   18410:	sbc	r3, r3, r3, lsl #1
   18414:	bx	lr
   18418:	push	{r1, lr}
   1841c:	mov	r0, #8
   18420:	bl	11958 <raise@plt>
   18424:	pop	{r1, pc}
   18428:	ldr	r3, [pc, #48]	; 18460 <__gcov_sort_n_vals@@Base+0x684>
   1842c:	ldr	r2, [pc, #48]	; 18464 <__gcov_sort_n_vals@@Base+0x688>
   18430:	and	r3, r3, r0, lsr #1
   18434:	sub	r0, r0, r3
   18438:	and	r3, r0, r2
   1843c:	and	r0, r2, r0, lsr #2
   18440:	add	r3, r3, r0
   18444:	ldr	r0, [pc, #28]	; 18468 <__gcov_sort_n_vals@@Base+0x68c>
   18448:	add	r3, r3, r3, lsr #4
   1844c:	and	r0, r0, r3
   18450:	add	r0, r0, r0, lsl #8
   18454:	add	r0, r0, r0, lsl #16
   18458:	lsr	r0, r0, #24
   1845c:	bx	lr
   18460:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   18464:	teqcc	r3, #-872415232	; 0xcc000000
   18468:	svceq	0x000f0f0f
   1846c:	cmp	r1, r3
   18470:	cmpeq	r0, r2
   18474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18478:	mov	r4, r0
   1847c:	movcc	r0, #0
   18480:	mov	r5, r1
   18484:	ldr	lr, [sp, #36]	; 0x24
   18488:	movcc	r1, r0
   1848c:	bcc	18588 <__gcov_sort_n_vals@@Base+0x7ac>
   18490:	cmp	r3, #0
   18494:	clzeq	ip, r2
   18498:	clzne	ip, r3
   1849c:	addeq	ip, ip, #32
   184a0:	cmp	r5, #0
   184a4:	clzeq	r1, r4
   184a8:	addeq	r1, r1, #32
   184ac:	clzne	r1, r5
   184b0:	sub	ip, ip, r1
   184b4:	sub	sl, ip, #32
   184b8:	lsl	r9, r3, ip
   184bc:	rsb	fp, ip, #32
   184c0:	orr	r9, r9, r2, lsl sl
   184c4:	orr	r9, r9, r2, lsr fp
   184c8:	lsl	r8, r2, ip
   184cc:	cmp	r5, r9
   184d0:	cmpeq	r4, r8
   184d4:	movcc	r0, #0
   184d8:	movcc	r1, r0
   184dc:	bcc	184f8 <__gcov_sort_n_vals@@Base+0x71c>
   184e0:	mov	r0, #1
   184e4:	subs	r4, r4, r8
   184e8:	lsl	r1, r0, sl
   184ec:	orr	r1, r1, r0, lsr fp
   184f0:	lsl	r0, r0, ip
   184f4:	sbc	r5, r5, r9
   184f8:	cmp	ip, #0
   184fc:	beq	18588 <__gcov_sort_n_vals@@Base+0x7ac>
   18500:	lsr	r6, r8, #1
   18504:	orr	r6, r6, r9, lsl #31
   18508:	lsr	r7, r9, #1
   1850c:	mov	r2, ip
   18510:	b	18534 <__gcov_sort_n_vals@@Base+0x758>
   18514:	subs	r3, r4, r6
   18518:	sbc	r8, r5, r7
   1851c:	adds	r3, r3, r3
   18520:	adc	r8, r8, r8
   18524:	adds	r4, r3, #1
   18528:	adc	r5, r8, #0
   1852c:	subs	r2, r2, #1
   18530:	beq	18550 <__gcov_sort_n_vals@@Base+0x774>
   18534:	cmp	r5, r7
   18538:	cmpeq	r4, r6
   1853c:	bcs	18514 <__gcov_sort_n_vals@@Base+0x738>
   18540:	adds	r4, r4, r4
   18544:	adc	r5, r5, r5
   18548:	subs	r2, r2, #1
   1854c:	bne	18534 <__gcov_sort_n_vals@@Base+0x758>
   18550:	lsr	r3, r4, ip
   18554:	orr	r3, r3, r5, lsl fp
   18558:	lsr	r2, r5, ip
   1855c:	orr	r3, r3, r5, lsr sl
   18560:	adds	r0, r0, r4
   18564:	mov	r4, r3
   18568:	lsl	r3, r2, ip
   1856c:	orr	r3, r3, r4, lsl sl
   18570:	lsl	ip, r4, ip
   18574:	orr	r3, r3, r4, lsr fp
   18578:	adc	r1, r1, r5
   1857c:	subs	r0, r0, ip
   18580:	mov	r5, r2
   18584:	sbc	r1, r1, r3
   18588:	cmp	lr, #0
   1858c:	strdne	r4, [lr]
   18590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018594 <__libc_csu_init@@Base>:
   18594:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18598:	mov	r7, r0
   1859c:	ldr	r6, [pc, #72]	; 185ec <__libc_csu_init@@Base+0x58>
   185a0:	ldr	r5, [pc, #72]	; 185f0 <__libc_csu_init@@Base+0x5c>
   185a4:	add	r6, pc, r6
   185a8:	add	r5, pc, r5
   185ac:	sub	r6, r6, r5
   185b0:	mov	r8, r1
   185b4:	mov	r9, r2
   185b8:	bl	1192c <fdopen@plt-0x20>
   185bc:	asrs	r6, r6, #2
   185c0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   185c4:	mov	r4, #0
   185c8:	add	r4, r4, #1
   185cc:	ldr	r3, [r5], #4
   185d0:	mov	r2, r9
   185d4:	mov	r1, r8
   185d8:	mov	r0, r7
   185dc:	blx	r3
   185e0:	cmp	r6, r4
   185e4:	bne	185c8 <__libc_csu_init@@Base+0x34>
   185e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   185ec:	andeq	r0, r1, r0, asr r9
   185f0:	andeq	r0, r1, r0, lsr r9

000185f4 <__libc_csu_fini@@Base>:
   185f4:	bx	lr

Disassembly of section .fini:

000185f8 <.fini>:
   185f8:	push	{r3, lr}
   185fc:	pop	{r3, pc}
