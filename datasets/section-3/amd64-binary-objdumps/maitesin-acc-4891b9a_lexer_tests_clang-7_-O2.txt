
../repos/maitesin-acc-4891b9a/bin/lexer_tests:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0xefe1]        # 411ff0 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <getenv@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <getenv@plt-0x10>:
  403020:	push   QWORD PTR [rip+0xefe2]        # 412008 <UnitySizeMask@@Base+0x5938>
  403026:	jmp    QWORD PTR [rip+0xefe4]        # 412010 <UnitySizeMask@@Base+0x5940>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <getenv@plt>:
  403030:	jmp    QWORD PTR [rip+0xefe2]        # 412018 <getenv@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <getenv@plt-0x10>

0000000000403040 <free@plt>:
  403040:	jmp    QWORD PTR [rip+0xefda]        # 412020 <free@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <getenv@plt-0x10>

0000000000403050 <__errno_location@plt>:
  403050:	jmp    QWORD PTR [rip+0xefd2]        # 412028 <__errno_location@GLIBC_2.2.5>
  403056:	push   0x2
  40305b:	jmp    403020 <getenv@plt-0x10>

0000000000403060 <strncpy@plt>:
  403060:	jmp    QWORD PTR [rip+0xefca]        # 412030 <strncpy@GLIBC_2.2.5>
  403066:	push   0x3
  40306b:	jmp    403020 <getenv@plt-0x10>

0000000000403070 <mkdir@plt>:
  403070:	jmp    QWORD PTR [rip+0xefc2]        # 412038 <mkdir@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <getenv@plt-0x10>

0000000000403080 <fcntl@plt>:
  403080:	jmp    QWORD PTR [rip+0xefba]        # 412040 <fcntl@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <getenv@plt-0x10>

0000000000403090 <getpid@plt>:
  403090:	jmp    QWORD PTR [rip+0xefb2]        # 412048 <getpid@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <getenv@plt-0x10>

00000000004030a0 <fclose@plt>:
  4030a0:	jmp    QWORD PTR [rip+0xefaa]        # 412050 <fclose@GLIBC_2.2.5>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <getenv@plt-0x10>

00000000004030b0 <msync@plt>:
  4030b0:	jmp    QWORD PTR [rip+0xefa2]        # 412058 <msync@GLIBC_2.2.5>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <getenv@plt-0x10>

00000000004030c0 <strlen@plt>:
  4030c0:	jmp    QWORD PTR [rip+0xef9a]        # 412060 <strlen@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <getenv@plt-0x10>

00000000004030d0 <mmap@plt>:
  4030d0:	jmp    QWORD PTR [rip+0xef92]        # 412068 <mmap@GLIBC_2.2.5>
  4030d6:	push   0xa
  4030db:	jmp    403020 <getenv@plt-0x10>

00000000004030e0 <strchr@plt>:
  4030e0:	jmp    QWORD PTR [rip+0xef8a]        # 412070 <strchr@GLIBC_2.2.5>
  4030e6:	push   0xb
  4030eb:	jmp    403020 <getenv@plt-0x10>

00000000004030f0 <strrchr@plt>:
  4030f0:	jmp    QWORD PTR [rip+0xef82]        # 412078 <strrchr@GLIBC_2.2.5>
  4030f6:	push   0xc
  4030fb:	jmp    403020 <getenv@plt-0x10>

0000000000403100 <uname@plt>:
  403100:	jmp    QWORD PTR [rip+0xef7a]        # 412080 <uname@GLIBC_2.2.5>
  403106:	push   0xd
  40310b:	jmp    403020 <getenv@plt-0x10>

0000000000403110 <memset@plt>:
  403110:	jmp    QWORD PTR [rip+0xef72]        # 412088 <memset@GLIBC_2.2.5>
  403116:	push   0xe
  40311b:	jmp    403020 <getenv@plt-0x10>

0000000000403120 <_setjmp@plt>:
  403120:	jmp    QWORD PTR [rip+0xef6a]        # 412090 <_setjmp@GLIBC_2.2.5>
  403126:	push   0xf
  40312b:	jmp    403020 <getenv@plt-0x10>

0000000000403130 <putc@plt>:
  403130:	jmp    QWORD PTR [rip+0xef62]        # 412098 <putc@GLIBC_2.2.5>
  403136:	push   0x10
  40313b:	jmp    403020 <getenv@plt-0x10>

0000000000403140 <fprintf@plt>:
  403140:	jmp    QWORD PTR [rip+0xef5a]        # 4120a0 <fprintf@GLIBC_2.2.5>
  403146:	push   0x11
  40314b:	jmp    403020 <getenv@plt-0x10>

0000000000403150 <ftell@plt>:
  403150:	jmp    QWORD PTR [rip+0xef52]        # 4120a8 <ftell@GLIBC_2.2.5>
  403156:	push   0x12
  40315b:	jmp    403020 <getenv@plt-0x10>

0000000000403160 <strtol@plt>:
  403160:	jmp    QWORD PTR [rip+0xef4a]        # 4120b0 <strtol@GLIBC_2.2.5>
  403166:	push   0x13
  40316b:	jmp    403020 <getenv@plt-0x10>

0000000000403170 <memcpy@plt>:
  403170:	jmp    QWORD PTR [rip+0xef42]        # 4120b8 <memcpy@GLIBC_2.14>
  403176:	push   0x14
  40317b:	jmp    403020 <getenv@plt-0x10>

0000000000403180 <prctl@plt>:
  403180:	jmp    QWORD PTR [rip+0xef3a]        # 4120c0 <prctl@GLIBC_2.2.5>
  403186:	push   0x15
  40318b:	jmp    403020 <getenv@plt-0x10>

0000000000403190 <malloc@plt>:
  403190:	jmp    QWORD PTR [rip+0xef32]        # 4120c8 <malloc@GLIBC_2.2.5>
  403196:	push   0x16
  40319b:	jmp    403020 <getenv@plt-0x10>

00000000004031a0 <fflush@plt>:
  4031a0:	jmp    QWORD PTR [rip+0xef2a]        # 4120d0 <fflush@GLIBC_2.2.5>
  4031a6:	push   0x17
  4031ab:	jmp    403020 <getenv@plt-0x10>

00000000004031b0 <fseek@plt>:
  4031b0:	jmp    QWORD PTR [rip+0xef22]        # 4120d8 <fseek@GLIBC_2.2.5>
  4031b6:	push   0x18
  4031bb:	jmp    403020 <getenv@plt-0x10>

00000000004031c0 <realloc@plt>:
  4031c0:	jmp    QWORD PTR [rip+0xef1a]        # 4120e0 <realloc@GLIBC_2.2.5>
  4031c6:	push   0x19
  4031cb:	jmp    403020 <getenv@plt-0x10>

00000000004031d0 <fdopen@plt>:
  4031d0:	jmp    QWORD PTR [rip+0xef12]        # 4120e8 <fdopen@GLIBC_2.2.5>
  4031d6:	push   0x1a
  4031db:	jmp    403020 <getenv@plt-0x10>

00000000004031e0 <munmap@plt>:
  4031e0:	jmp    QWORD PTR [rip+0xef0a]        # 4120f0 <munmap@GLIBC_2.2.5>
  4031e6:	push   0x1b
  4031eb:	jmp    403020 <getenv@plt-0x10>

00000000004031f0 <longjmp@plt>:
  4031f0:	jmp    QWORD PTR [rip+0xef02]        # 4120f8 <longjmp@GLIBC_2.2.5>
  4031f6:	push   0x1c
  4031fb:	jmp    403020 <getenv@plt-0x10>

0000000000403200 <open@plt>:
  403200:	jmp    QWORD PTR [rip+0xeefa]        # 412100 <open@GLIBC_2.2.5>
  403206:	push   0x1d
  40320b:	jmp    403020 <getenv@plt-0x10>

0000000000403210 <__cxa_atexit@plt>:
  403210:	jmp    QWORD PTR [rip+0xeef2]        # 412108 <__cxa_atexit@GLIBC_2.2.5>
  403216:	push   0x1e
  40321b:	jmp    403020 <getenv@plt-0x10>

0000000000403220 <exit@plt>:
  403220:	jmp    QWORD PTR [rip+0xeeea]        # 412110 <exit@GLIBC_2.2.5>
  403226:	push   0x1f
  40322b:	jmp    403020 <getenv@plt-0x10>

0000000000403230 <fwrite@plt>:
  403230:	jmp    QWORD PTR [rip+0xeee2]        # 412118 <fwrite@GLIBC_2.2.5>
  403236:	push   0x20
  40323b:	jmp    403020 <getenv@plt-0x10>

0000000000403240 <strdup@plt>:
  403240:	jmp    QWORD PTR [rip+0xeeda]        # 412120 <strdup@GLIBC_2.2.5>
  403246:	push   0x21
  40324b:	jmp    403020 <getenv@plt-0x10>

0000000000403250 <strerror@plt>:
  403250:	jmp    QWORD PTR [rip+0xeed2]        # 412128 <strerror@GLIBC_2.2.5>
  403256:	push   0x22
  40325b:	jmp    403020 <getenv@plt-0x10>

Disassembly of section .text:

0000000000403260 <_start@@Base>:
  403260:	endbr64 
  403264:	xor    ebp,ebp
  403266:	mov    r9,rdx
  403269:	pop    rsi
  40326a:	mov    rdx,rsp
  40326d:	and    rsp,0xfffffffffffffff0
  403271:	push   rax
  403272:	push   rsp
  403273:	mov    r8,0x40b260
  40327a:	mov    rcx,0x40b1f0
  403281:	mov    rdi,0x404560
  403288:	call   QWORD PTR [rip+0xed5a]        # 411fe8 <__libc_start_main@GLIBC_2.2.5>
  40328e:	hlt    
  40328f:	nop
  403290:	endbr64 
  403294:	ret    
  403295:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40329f:	nop
  4032a0:	mov    eax,0x412158
  4032a5:	cmp    rax,0x412158
  4032ab:	je     4032c0 <_start@@Base+0x60>
  4032ad:	mov    eax,0x0
  4032b2:	test   rax,rax
  4032b5:	je     4032c0 <_start@@Base+0x60>
  4032b7:	mov    edi,0x412158
  4032bc:	jmp    rax
  4032be:	xchg   ax,ax
  4032c0:	ret    
  4032c1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4032cc:	nop    DWORD PTR [rax+0x0]
  4032d0:	mov    esi,0x412158
  4032d5:	sub    rsi,0x412158
  4032dc:	mov    rax,rsi
  4032df:	shr    rsi,0x3f
  4032e3:	sar    rax,0x3
  4032e7:	add    rsi,rax
  4032ea:	sar    rsi,1
  4032ed:	je     403300 <_start@@Base+0xa0>
  4032ef:	mov    eax,0x0
  4032f4:	test   rax,rax
  4032f7:	je     403300 <_start@@Base+0xa0>
  4032f9:	mov    edi,0x412158
  4032fe:	jmp    rax
  403300:	ret    
  403301:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40330c:	nop    DWORD PTR [rax+0x0]
  403310:	endbr64 
  403314:	cmp    BYTE PTR [rip+0xee45],0x0        # 412160 <__bss_start@@Base+0xc>
  40331b:	jne    403330 <_start@@Base+0xd0>
  40331d:	push   rbp
  40331e:	mov    rbp,rsp
  403321:	call   4032a0 <_start@@Base+0x40>
  403326:	mov    BYTE PTR [rip+0xee33],0x1        # 412160 <__bss_start@@Base+0xc>
  40332d:	pop    rbp
  40332e:	ret    
  40332f:	nop
  403330:	ret    
  403331:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40333c:	nop    DWORD PTR [rax+0x0]
  403340:	endbr64 
  403344:	jmp    4032d0 <_start@@Base+0x70>
  403346:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000403350 <simple_file_only_main@@Base>:
  403350:	push   rbx
  403351:	sub    rsp,0x20
  403355:	vmovdqa xmm0,XMMWORD PTR [rip+0xee13]        # 412170 <__bss_start@@Base+0x1c>
  40335d:	vpcmpeqd xmm1,xmm1,xmm1
  403361:	vpsubq xmm0,xmm0,xmm1
  403365:	vmovdqa XMMWORD PTR [rip+0xee03],xmm0        # 412170 <__bss_start@@Base+0x1c>
  40336d:	lea    rsi,[rip+0x8c90]        # 40c004 <_IO_stdin_used@@Base+0x4>
  403374:	lea    rbx,[rsp+0x8]
  403379:	mov    rdi,rbx
  40337c:	call   408230 <init_lexer@@Base>
  403381:	mov    rdi,rbx
  403384:	call   408440 <next@@Base>
  403389:	mov    esi,DWORD PTR [rax]
  40338b:	xor    edi,edi
  40338d:	xor    edx,edx
  40338f:	mov    ecx,0x17
  403394:	mov    r8d,0x94
  40339a:	call   405880 <UnityAssertEqualNumber@@Base>
  40339f:	mov    rdi,rbx
  4033a2:	call   408440 <next@@Base>
  4033a7:	mov    esi,DWORD PTR [rax]
  4033a9:	mov    edi,0x2
  4033ae:	xor    edx,edx
  4033b0:	mov    ecx,0x19
  4033b5:	mov    r8d,0x94
  4033bb:	call   405880 <UnityAssertEqualNumber@@Base>
  4033c0:	mov    rdi,rbx
  4033c3:	call   408440 <next@@Base>
  4033c8:	mov    esi,DWORD PTR [rax]
  4033ca:	mov    edi,0x3
  4033cf:	xor    edx,edx
  4033d1:	mov    ecx,0x1b
  4033d6:	mov    r8d,0x94
  4033dc:	call   405880 <UnityAssertEqualNumber@@Base>
  4033e1:	mov    rdi,rbx
  4033e4:	call   408440 <next@@Base>
  4033e9:	mov    esi,DWORD PTR [rax]
  4033eb:	mov    edi,0x4
  4033f0:	xor    edx,edx
  4033f2:	mov    ecx,0x1d
  4033f7:	mov    r8d,0x94
  4033fd:	call   405880 <UnityAssertEqualNumber@@Base>
  403402:	mov    rdi,rbx
  403405:	call   408440 <next@@Base>
  40340a:	mov    esi,DWORD PTR [rax]
  40340c:	mov    edi,0x5
  403411:	xor    edx,edx
  403413:	mov    ecx,0x1f
  403418:	mov    r8d,0x94
  40341e:	call   405880 <UnityAssertEqualNumber@@Base>
  403423:	mov    rdi,rbx
  403426:	call   408440 <next@@Base>
  40342b:	mov    esi,DWORD PTR [rax]
  40342d:	mov    edi,0x7
  403432:	xor    edx,edx
  403434:	mov    ecx,0x21
  403439:	mov    r8d,0x94
  40343f:	call   405880 <UnityAssertEqualNumber@@Base>
  403444:	mov    rdi,rbx
  403447:	call   408440 <next@@Base>
  40344c:	mov    esi,DWORD PTR [rax]
  40344e:	mov    edi,0x1
  403453:	xor    edx,edx
  403455:	mov    ecx,0x23
  40345a:	mov    r8d,0x94
  403460:	call   405880 <UnityAssertEqualNumber@@Base>
  403465:	mov    rdi,rbx
  403468:	call   408440 <next@@Base>
  40346d:	mov    esi,DWORD PTR [rax]
  40346f:	mov    edi,0x8
  403474:	xor    edx,edx
  403476:	mov    ecx,0x25
  40347b:	mov    r8d,0x94
  403481:	call   405880 <UnityAssertEqualNumber@@Base>
  403486:	mov    rdi,rbx
  403489:	call   408440 <next@@Base>
  40348e:	mov    esi,DWORD PTR [rax]
  403490:	mov    edi,0x6
  403495:	xor    edx,edx
  403497:	mov    ecx,0x27
  40349c:	mov    r8d,0x94
  4034a2:	call   405880 <UnityAssertEqualNumber@@Base>
  4034a7:	mov    rdi,rbx
  4034aa:	call   408440 <next@@Base>
  4034af:	mov    esi,DWORD PTR [rax]
  4034b1:	mov    edi,0x9
  4034b6:	xor    edx,edx
  4034b8:	mov    ecx,0x29
  4034bd:	mov    r8d,0x94
  4034c3:	call   405880 <UnityAssertEqualNumber@@Base>
  4034c8:	mov    rdi,rbx
  4034cb:	call   408260 <destroy_lexer@@Base>
  4034d0:	add    rsp,0x20
  4034d4:	pop    rbx
  4034d5:	ret    
  4034d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004034e0 <push_token_to_stack@@Base>:
  4034e0:	push   r14
  4034e2:	push   rbx
  4034e3:	sub    rsp,0x18
  4034e7:	vmovdqa xmm0,XMMWORD PTR [rip+0xec91]        # 412180 <__bss_start@@Base+0x2c>
  4034ef:	vpcmpeqd xmm1,xmm1,xmm1
  4034f3:	vpsubq xmm0,xmm0,xmm1
  4034f7:	vmovdqa XMMWORD PTR [rip+0xec81],xmm0        # 412180 <__bss_start@@Base+0x2c>
  4034ff:	lea    rsi,[rip+0x8afe]        # 40c004 <_IO_stdin_used@@Base+0x4>
  403506:	mov    r14,rsp
  403509:	mov    rdi,r14
  40350c:	call   408230 <init_lexer@@Base>
  403511:	mov    edi,0x8
  403516:	call   403190 <malloc@plt>
  40351b:	mov    rbx,rax
  40351e:	mov    rdi,r14
  403521:	mov    rsi,rax
  403524:	call   4082e0 <push_back@@Base>
  403529:	mov    rax,QWORD PTR [rsp+0x8]
  40352e:	mov    rdi,QWORD PTR [rax+0x8]
  403532:	xor    edx,edx
  403534:	mov    ecx,0x3e
  403539:	mov    r8d,0x94
  40353f:	mov    rsi,rbx
  403542:	call   405880 <UnityAssertEqualNumber@@Base>
  403547:	mov    rdi,r14
  40354a:	call   408260 <destroy_lexer@@Base>
  40354f:	mov    rdi,rbx
  403552:	call   403040 <free@plt>
  403557:	add    rsp,0x18
  40355b:	pop    rbx
  40355c:	pop    r14
  40355e:	ret    
  40355f:	nop

0000000000403560 <push_two_tokens_to_stack@@Base>:
  403560:	push   r15
  403562:	push   r14
  403564:	push   rbx
  403565:	sub    rsp,0x20
  403569:	vmovdqa xmm0,XMMWORD PTR [rip+0xec1f]        # 412190 <__bss_start@@Base+0x3c>
  403571:	vpcmpeqd xmm1,xmm1,xmm1
  403575:	vpsubq xmm0,xmm0,xmm1
  403579:	vmovdqa XMMWORD PTR [rip+0xec0f],xmm0        # 412190 <__bss_start@@Base+0x3c>
  403581:	lea    rsi,[rip+0x8a7c]        # 40c004 <_IO_stdin_used@@Base+0x4>
  403588:	lea    r14,[rsp+0x8]
  40358d:	mov    rdi,r14
  403590:	call   408230 <init_lexer@@Base>
  403595:	mov    edi,0x8
  40359a:	call   403190 <malloc@plt>
  40359f:	mov    r15,rax
  4035a2:	mov    edi,0x8
  4035a7:	call   403190 <malloc@plt>
  4035ac:	mov    rbx,rax
  4035af:	mov    rdi,r14
  4035b2:	mov    rsi,r15
  4035b5:	call   4082e0 <push_back@@Base>
  4035ba:	mov    rax,QWORD PTR [rsp+0x10]
  4035bf:	mov    rdi,QWORD PTR [rax+0x8]
  4035c3:	xor    edx,edx
  4035c5:	mov    ecx,0x56
  4035ca:	mov    r8d,0x94
  4035d0:	mov    rsi,r15
  4035d3:	call   405880 <UnityAssertEqualNumber@@Base>
  4035d8:	mov    rdi,r14
  4035db:	mov    rsi,rbx
  4035de:	call   4082e0 <push_back@@Base>
  4035e3:	mov    rax,QWORD PTR [rsp+0x10]
  4035e8:	mov    rdi,QWORD PTR [rax+0x8]
  4035ec:	xor    edx,edx
  4035ee:	mov    ecx,0x58
  4035f3:	mov    r8d,0x94
  4035f9:	mov    rsi,rbx
  4035fc:	call   405880 <UnityAssertEqualNumber@@Base>
  403601:	mov    rdi,r14
  403604:	call   408260 <destroy_lexer@@Base>
  403609:	mov    rdi,r15
  40360c:	call   403040 <free@plt>
  403611:	mov    rdi,rbx
  403614:	call   403040 <free@plt>
  403619:	add    rsp,0x20
  40361d:	pop    rbx
  40361e:	pop    r14
  403620:	pop    r15
  403622:	ret    
  403623:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40362d:	nop    DWORD PTR [rax]

0000000000403630 <push_token_and_call_next@@Base>:
  403630:	push   r14
  403632:	push   rbx
  403633:	sub    rsp,0x18
  403637:	vmovdqa xmm0,XMMWORD PTR [rip+0xeb61]        # 4121a0 <__bss_start@@Base+0x4c>
  40363f:	vpcmpeqd xmm1,xmm1,xmm1
  403643:	vpsubq xmm0,xmm0,xmm1
  403647:	vmovdqa XMMWORD PTR [rip+0xeb51],xmm0        # 4121a0 <__bss_start@@Base+0x4c>
  40364f:	lea    rsi,[rip+0x89ae]        # 40c004 <_IO_stdin_used@@Base+0x4>
  403656:	mov    r14,rsp
  403659:	mov    rdi,r14
  40365c:	call   408230 <init_lexer@@Base>
  403661:	mov    edi,0x8
  403666:	call   403190 <malloc@plt>
  40366b:	mov    rbx,rax
  40366e:	mov    rdi,r14
  403671:	mov    rsi,rax
  403674:	call   4082e0 <push_back@@Base>
  403679:	mov    rdi,r14
  40367c:	call   408440 <next@@Base>
  403681:	xor    edx,edx
  403683:	mov    ecx,0x71
  403688:	mov    r8d,0x94
  40368e:	mov    rdi,rbx
  403691:	mov    rsi,rax
  403694:	call   405880 <UnityAssertEqualNumber@@Base>
  403699:	mov    rdi,r14
  40369c:	call   408260 <destroy_lexer@@Base>
  4036a1:	mov    rdi,rbx
  4036a4:	call   403040 <free@plt>
  4036a9:	add    rsp,0x18
  4036ad:	pop    rbx
  4036ae:	pop    r14
  4036b0:	ret    
  4036b1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4036bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004036c0 <if_without_else@@Base>:
  4036c0:	push   rbx
  4036c1:	sub    rsp,0x20
  4036c5:	vmovdqa xmm0,XMMWORD PTR [rip+0xeae3]        # 4121b0 <__bss_start@@Base+0x5c>
  4036cd:	vpcmpeqd xmm1,xmm1,xmm1
  4036d1:	vpsubq xmm0,xmm0,xmm1
  4036d5:	vmovdqa XMMWORD PTR [rip+0xead3],xmm0        # 4121b0 <__bss_start@@Base+0x5c>
  4036dd:	lea    rsi,[rip+0x893a]        # 40c01e <_IO_stdin_used@@Base+0x1e>
  4036e4:	lea    rbx,[rsp+0x8]
  4036e9:	mov    rdi,rbx
  4036ec:	call   408230 <init_lexer@@Base>
  4036f1:	mov    rdi,rbx
  4036f4:	call   408440 <next@@Base>
  4036f9:	mov    esi,DWORD PTR [rax]
  4036fb:	xor    edi,edi
  4036fd:	xor    edx,edx
  4036ff:	mov    ecx,0x8c
  403704:	mov    r8d,0x94
  40370a:	call   405880 <UnityAssertEqualNumber@@Base>
  40370f:	mov    rdi,rbx
  403712:	call   408440 <next@@Base>
  403717:	mov    esi,DWORD PTR [rax]
  403719:	mov    edi,0x2
  40371e:	xor    edx,edx
  403720:	mov    ecx,0x8e
  403725:	mov    r8d,0x94
  40372b:	call   405880 <UnityAssertEqualNumber@@Base>
  403730:	mov    rdi,rbx
  403733:	call   408440 <next@@Base>
  403738:	mov    esi,DWORD PTR [rax]
  40373a:	mov    edi,0x3
  40373f:	xor    edx,edx
  403741:	mov    ecx,0x90
  403746:	mov    r8d,0x94
  40374c:	call   405880 <UnityAssertEqualNumber@@Base>
  403751:	mov    rdi,rbx
  403754:	call   408440 <next@@Base>
  403759:	mov    esi,DWORD PTR [rax]
  40375b:	mov    edi,0x4
  403760:	xor    edx,edx
  403762:	mov    ecx,0x92
  403767:	mov    r8d,0x94
  40376d:	call   405880 <UnityAssertEqualNumber@@Base>
  403772:	mov    rdi,rbx
  403775:	call   408440 <next@@Base>
  40377a:	mov    esi,DWORD PTR [rax]
  40377c:	mov    edi,0x5
  403781:	xor    edx,edx
  403783:	mov    ecx,0x94
  403788:	mov    r8d,0x94
  40378e:	call   405880 <UnityAssertEqualNumber@@Base>
  403793:	mov    rdi,rbx
  403796:	call   408440 <next@@Base>
  40379b:	mov    esi,DWORD PTR [rax]
  40379d:	mov    edi,0xa
  4037a2:	xor    edx,edx
  4037a4:	mov    ecx,0x96
  4037a9:	mov    r8d,0x94
  4037af:	call   405880 <UnityAssertEqualNumber@@Base>
  4037b4:	mov    rdi,rbx
  4037b7:	call   408440 <next@@Base>
  4037bc:	mov    esi,DWORD PTR [rax]
  4037be:	mov    edi,0x3
  4037c3:	xor    edx,edx
  4037c5:	mov    ecx,0x98
  4037ca:	mov    r8d,0x94
  4037d0:	call   405880 <UnityAssertEqualNumber@@Base>
  4037d5:	mov    rdi,rbx
  4037d8:	call   408440 <next@@Base>
  4037dd:	mov    esi,DWORD PTR [rax]
  4037df:	mov    edi,0x1
  4037e4:	xor    edx,edx
  4037e6:	mov    ecx,0x9a
  4037eb:	mov    r8d,0x94
  4037f1:	call   405880 <UnityAssertEqualNumber@@Base>
  4037f6:	mov    rdi,rbx
  4037f9:	call   408440 <next@@Base>
  4037fe:	mov    esi,DWORD PTR [rax]
  403800:	mov    edi,0xc
  403805:	xor    edx,edx
  403807:	mov    ecx,0x9c
  40380c:	mov    r8d,0x94
  403812:	call   405880 <UnityAssertEqualNumber@@Base>
  403817:	mov    rdi,rbx
  40381a:	call   408440 <next@@Base>
  40381f:	mov    esi,DWORD PTR [rax]
  403821:	mov    edi,0x1
  403826:	xor    edx,edx
  403828:	mov    ecx,0x9e
  40382d:	mov    r8d,0x94
  403833:	call   405880 <UnityAssertEqualNumber@@Base>
  403838:	mov    rdi,rbx
  40383b:	call   408440 <next@@Base>
  403840:	mov    esi,DWORD PTR [rax]
  403842:	mov    edi,0x4
  403847:	xor    edx,edx
  403849:	mov    ecx,0xa0
  40384e:	mov    r8d,0x94
  403854:	call   405880 <UnityAssertEqualNumber@@Base>
  403859:	mov    rdi,rbx
  40385c:	call   408440 <next@@Base>
  403861:	mov    esi,DWORD PTR [rax]
  403863:	mov    edi,0x5
  403868:	xor    edx,edx
  40386a:	mov    ecx,0xa2
  40386f:	mov    r8d,0x94
  403875:	call   405880 <UnityAssertEqualNumber@@Base>
  40387a:	mov    rdi,rbx
  40387d:	call   408440 <next@@Base>
  403882:	mov    esi,DWORD PTR [rax]
  403884:	mov    edi,0x7
  403889:	xor    edx,edx
  40388b:	mov    ecx,0xa4
  403890:	mov    r8d,0x94
  403896:	call   405880 <UnityAssertEqualNumber@@Base>
  40389b:	mov    rdi,rbx
  40389e:	call   408440 <next@@Base>
  4038a3:	mov    esi,DWORD PTR [rax]
  4038a5:	mov    edi,0x1
  4038aa:	xor    edx,edx
  4038ac:	mov    ecx,0xa6
  4038b1:	mov    r8d,0x94
  4038b7:	call   405880 <UnityAssertEqualNumber@@Base>
  4038bc:	mov    rdi,rbx
  4038bf:	call   408440 <next@@Base>
  4038c4:	mov    esi,DWORD PTR [rax]
  4038c6:	mov    edi,0x8
  4038cb:	xor    edx,edx
  4038cd:	mov    ecx,0xa8
  4038d2:	mov    r8d,0x94
  4038d8:	call   405880 <UnityAssertEqualNumber@@Base>
  4038dd:	mov    rdi,rbx
  4038e0:	call   408440 <next@@Base>
  4038e5:	mov    esi,DWORD PTR [rax]
  4038e7:	mov    edi,0x6
  4038ec:	xor    edx,edx
  4038ee:	mov    ecx,0xaa
  4038f3:	mov    r8d,0x94
  4038f9:	call   405880 <UnityAssertEqualNumber@@Base>
  4038fe:	mov    rdi,rbx
  403901:	call   408440 <next@@Base>
  403906:	mov    esi,DWORD PTR [rax]
  403908:	mov    edi,0x7
  40390d:	xor    edx,edx
  40390f:	mov    ecx,0xac
  403914:	mov    r8d,0x94
  40391a:	call   405880 <UnityAssertEqualNumber@@Base>
  40391f:	mov    rdi,rbx
  403922:	call   408440 <next@@Base>
  403927:	mov    esi,DWORD PTR [rax]
  403929:	mov    edi,0x1
  40392e:	xor    edx,edx
  403930:	mov    ecx,0xae
  403935:	mov    r8d,0x94
  40393b:	call   405880 <UnityAssertEqualNumber@@Base>
  403940:	mov    rdi,rbx
  403943:	call   408440 <next@@Base>
  403948:	mov    esi,DWORD PTR [rax]
  40394a:	mov    edi,0x8
  40394f:	xor    edx,edx
  403951:	mov    ecx,0xb0
  403956:	mov    r8d,0x94
  40395c:	call   405880 <UnityAssertEqualNumber@@Base>
  403961:	mov    rdi,rbx
  403964:	call   408440 <next@@Base>
  403969:	mov    esi,DWORD PTR [rax]
  40396b:	mov    edi,0x6
  403970:	xor    edx,edx
  403972:	mov    ecx,0xb2
  403977:	mov    r8d,0x94
  40397d:	call   405880 <UnityAssertEqualNumber@@Base>
  403982:	mov    rdi,rbx
  403985:	call   408440 <next@@Base>
  40398a:	mov    esi,DWORD PTR [rax]
  40398c:	mov    edi,0x9
  403991:	xor    edx,edx
  403993:	mov    ecx,0xb4
  403998:	mov    r8d,0x94
  40399e:	call   405880 <UnityAssertEqualNumber@@Base>
  4039a3:	mov    rdi,rbx
  4039a6:	call   408260 <destroy_lexer@@Base>
  4039ab:	add    rsp,0x20
  4039af:	pop    rbx
  4039b0:	ret    
  4039b1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4039bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004039c0 <if_with_else@@Base>:
  4039c0:	push   rbx
  4039c1:	sub    rsp,0x20
  4039c5:	vmovdqa xmm0,XMMWORD PTR [rip+0xe7f3]        # 4121c0 <__bss_start@@Base+0x6c>
  4039cd:	vpcmpeqd xmm1,xmm1,xmm1
  4039d1:	vpsubq xmm0,xmm0,xmm1
  4039d5:	vmovdqa XMMWORD PTR [rip+0xe7e3],xmm0        # 4121c0 <__bss_start@@Base+0x6c>
  4039dd:	lea    rsi,[rip+0x8673]        # 40c057 <_IO_stdin_used@@Base+0x57>
  4039e4:	lea    rbx,[rsp+0x8]
  4039e9:	mov    rdi,rbx
  4039ec:	call   408230 <init_lexer@@Base>
  4039f1:	mov    rdi,rbx
  4039f4:	call   408440 <next@@Base>
  4039f9:	mov    esi,DWORD PTR [rax]
  4039fb:	xor    edi,edi
  4039fd:	xor    edx,edx
  4039ff:	mov    ecx,0xd2
  403a04:	mov    r8d,0x94
  403a0a:	call   405880 <UnityAssertEqualNumber@@Base>
  403a0f:	mov    rdi,rbx
  403a12:	call   408440 <next@@Base>
  403a17:	mov    esi,DWORD PTR [rax]
  403a19:	mov    edi,0x2
  403a1e:	xor    edx,edx
  403a20:	mov    ecx,0xd4
  403a25:	mov    r8d,0x94
  403a2b:	call   405880 <UnityAssertEqualNumber@@Base>
  403a30:	mov    rdi,rbx
  403a33:	call   408440 <next@@Base>
  403a38:	mov    esi,DWORD PTR [rax]
  403a3a:	mov    edi,0x3
  403a3f:	xor    edx,edx
  403a41:	mov    ecx,0xd6
  403a46:	mov    r8d,0x94
  403a4c:	call   405880 <UnityAssertEqualNumber@@Base>
  403a51:	mov    rdi,rbx
  403a54:	call   408440 <next@@Base>
  403a59:	mov    esi,DWORD PTR [rax]
  403a5b:	mov    edi,0x4
  403a60:	xor    edx,edx
  403a62:	mov    ecx,0xd8
  403a67:	mov    r8d,0x94
  403a6d:	call   405880 <UnityAssertEqualNumber@@Base>
  403a72:	mov    rdi,rbx
  403a75:	call   408440 <next@@Base>
  403a7a:	mov    esi,DWORD PTR [rax]
  403a7c:	mov    edi,0x5
  403a81:	xor    edx,edx
  403a83:	mov    ecx,0xda
  403a88:	mov    r8d,0x94
  403a8e:	call   405880 <UnityAssertEqualNumber@@Base>
  403a93:	mov    rdi,rbx
  403a96:	call   408440 <next@@Base>
  403a9b:	mov    esi,DWORD PTR [rax]
  403a9d:	mov    edi,0xa
  403aa2:	xor    edx,edx
  403aa4:	mov    ecx,0xdc
  403aa9:	mov    r8d,0x94
  403aaf:	call   405880 <UnityAssertEqualNumber@@Base>
  403ab4:	mov    rdi,rbx
  403ab7:	call   408440 <next@@Base>
  403abc:	mov    esi,DWORD PTR [rax]
  403abe:	mov    edi,0x3
  403ac3:	xor    edx,edx
  403ac5:	mov    ecx,0xde
  403aca:	mov    r8d,0x94
  403ad0:	call   405880 <UnityAssertEqualNumber@@Base>
  403ad5:	mov    rdi,rbx
  403ad8:	call   408440 <next@@Base>
  403add:	mov    esi,DWORD PTR [rax]
  403adf:	mov    edi,0x1
  403ae4:	xor    edx,edx
  403ae6:	mov    ecx,0xe0
  403aeb:	mov    r8d,0x94
  403af1:	call   405880 <UnityAssertEqualNumber@@Base>
  403af6:	mov    rdi,rbx
  403af9:	call   408440 <next@@Base>
  403afe:	mov    esi,DWORD PTR [rax]
  403b00:	mov    edi,0xc
  403b05:	xor    edx,edx
  403b07:	mov    ecx,0xe2
  403b0c:	mov    r8d,0x94
  403b12:	call   405880 <UnityAssertEqualNumber@@Base>
  403b17:	mov    rdi,rbx
  403b1a:	call   408440 <next@@Base>
  403b1f:	mov    esi,DWORD PTR [rax]
  403b21:	mov    edi,0x1
  403b26:	xor    edx,edx
  403b28:	mov    ecx,0xe4
  403b2d:	mov    r8d,0x94
  403b33:	call   405880 <UnityAssertEqualNumber@@Base>
  403b38:	mov    rdi,rbx
  403b3b:	call   408440 <next@@Base>
  403b40:	mov    esi,DWORD PTR [rax]
  403b42:	mov    edi,0x4
  403b47:	xor    edx,edx
  403b49:	mov    ecx,0xe6
  403b4e:	mov    r8d,0x94
  403b54:	call   405880 <UnityAssertEqualNumber@@Base>
  403b59:	mov    rdi,rbx
  403b5c:	call   408440 <next@@Base>
  403b61:	mov    esi,DWORD PTR [rax]
  403b63:	mov    edi,0x5
  403b68:	xor    edx,edx
  403b6a:	mov    ecx,0xe8
  403b6f:	mov    r8d,0x94
  403b75:	call   405880 <UnityAssertEqualNumber@@Base>
  403b7a:	mov    rdi,rbx
  403b7d:	call   408440 <next@@Base>
  403b82:	mov    esi,DWORD PTR [rax]
  403b84:	mov    edi,0x7
  403b89:	xor    edx,edx
  403b8b:	mov    ecx,0xea
  403b90:	mov    r8d,0x94
  403b96:	call   405880 <UnityAssertEqualNumber@@Base>
  403b9b:	mov    rdi,rbx
  403b9e:	call   408440 <next@@Base>
  403ba3:	mov    esi,DWORD PTR [rax]
  403ba5:	mov    edi,0x1
  403baa:	xor    edx,edx
  403bac:	mov    ecx,0xec
  403bb1:	mov    r8d,0x94
  403bb7:	call   405880 <UnityAssertEqualNumber@@Base>
  403bbc:	mov    rdi,rbx
  403bbf:	call   408440 <next@@Base>
  403bc4:	mov    esi,DWORD PTR [rax]
  403bc6:	mov    edi,0x8
  403bcb:	xor    edx,edx
  403bcd:	mov    ecx,0xee
  403bd2:	mov    r8d,0x94
  403bd8:	call   405880 <UnityAssertEqualNumber@@Base>
  403bdd:	mov    rdi,rbx
  403be0:	call   408440 <next@@Base>
  403be5:	mov    esi,DWORD PTR [rax]
  403be7:	mov    edi,0x6
  403bec:	xor    edx,edx
  403bee:	mov    ecx,0xf0
  403bf3:	mov    r8d,0x94
  403bf9:	call   405880 <UnityAssertEqualNumber@@Base>
  403bfe:	mov    rdi,rbx
  403c01:	call   408440 <next@@Base>
  403c06:	mov    esi,DWORD PTR [rax]
  403c08:	mov    edi,0xb
  403c0d:	xor    edx,edx
  403c0f:	mov    ecx,0xf2
  403c14:	mov    r8d,0x94
  403c1a:	call   405880 <UnityAssertEqualNumber@@Base>
  403c1f:	mov    rdi,rbx
  403c22:	call   408440 <next@@Base>
  403c27:	mov    esi,DWORD PTR [rax]
  403c29:	mov    edi,0x5
  403c2e:	xor    edx,edx
  403c30:	mov    ecx,0xf4
  403c35:	mov    r8d,0x94
  403c3b:	call   405880 <UnityAssertEqualNumber@@Base>
  403c40:	mov    rdi,rbx
  403c43:	call   408440 <next@@Base>
  403c48:	mov    esi,DWORD PTR [rax]
  403c4a:	mov    edi,0x7
  403c4f:	xor    edx,edx
  403c51:	mov    ecx,0xf6
  403c56:	mov    r8d,0x94
  403c5c:	call   405880 <UnityAssertEqualNumber@@Base>
  403c61:	mov    rdi,rbx
  403c64:	call   408440 <next@@Base>
  403c69:	mov    esi,DWORD PTR [rax]
  403c6b:	mov    edi,0x1
  403c70:	xor    edx,edx
  403c72:	mov    ecx,0xf8
  403c77:	mov    r8d,0x94
  403c7d:	call   405880 <UnityAssertEqualNumber@@Base>
  403c82:	mov    rdi,rbx
  403c85:	call   408440 <next@@Base>
  403c8a:	mov    esi,DWORD PTR [rax]
  403c8c:	mov    edi,0x8
  403c91:	xor    edx,edx
  403c93:	mov    ecx,0xfa
  403c98:	mov    r8d,0x94
  403c9e:	call   405880 <UnityAssertEqualNumber@@Base>
  403ca3:	mov    rdi,rbx
  403ca6:	call   408440 <next@@Base>
  403cab:	mov    esi,DWORD PTR [rax]
  403cad:	mov    edi,0x6
  403cb2:	xor    edx,edx
  403cb4:	mov    ecx,0xfc
  403cb9:	mov    r8d,0x94
  403cbf:	call   405880 <UnityAssertEqualNumber@@Base>
  403cc4:	mov    rdi,rbx
  403cc7:	call   408440 <next@@Base>
  403ccc:	mov    esi,DWORD PTR [rax]
  403cce:	mov    edi,0x7
  403cd3:	xor    edx,edx
  403cd5:	mov    ecx,0xfe
  403cda:	mov    r8d,0x94
  403ce0:	call   405880 <UnityAssertEqualNumber@@Base>
  403ce5:	mov    rdi,rbx
  403ce8:	call   408440 <next@@Base>
  403ced:	mov    esi,DWORD PTR [rax]
  403cef:	mov    edi,0x1
  403cf4:	xor    edx,edx
  403cf6:	mov    ecx,0x100
  403cfb:	mov    r8d,0x94
  403d01:	call   405880 <UnityAssertEqualNumber@@Base>
  403d06:	mov    rdi,rbx
  403d09:	call   408440 <next@@Base>
  403d0e:	mov    esi,DWORD PTR [rax]
  403d10:	mov    edi,0x8
  403d15:	xor    edx,edx
  403d17:	mov    ecx,0x102
  403d1c:	mov    r8d,0x94
  403d22:	call   405880 <UnityAssertEqualNumber@@Base>
  403d27:	mov    rdi,rbx
  403d2a:	call   408440 <next@@Base>
  403d2f:	mov    esi,DWORD PTR [rax]
  403d31:	mov    edi,0x6
  403d36:	xor    edx,edx
  403d38:	mov    ecx,0x104
  403d3d:	mov    r8d,0x94
  403d43:	call   405880 <UnityAssertEqualNumber@@Base>
  403d48:	mov    rdi,rbx
  403d4b:	call   408440 <next@@Base>
  403d50:	mov    esi,DWORD PTR [rax]
  403d52:	mov    edi,0x9
  403d57:	xor    edx,edx
  403d59:	mov    ecx,0x106
  403d5e:	mov    r8d,0x94
  403d64:	call   405880 <UnityAssertEqualNumber@@Base>
  403d69:	mov    rdi,rbx
  403d6c:	call   408260 <destroy_lexer@@Base>
  403d71:	add    rsp,0x20
  403d75:	pop    rbx
  403d76:	ret    
  403d77:	nop    WORD PTR [rax+rax*1+0x0]

0000000000403d80 <read_token_int_type@@Base>:
  403d80:	push   rbx
  403d81:	sub    rsp,0x20
  403d85:	vmovdqa xmm0,XMMWORD PTR [rip+0xe443]        # 4121d0 <__bss_start@@Base+0x7c>
  403d8d:	vpcmpeqd xmm1,xmm1,xmm1
  403d91:	vpsubq xmm0,xmm0,xmm1
  403d95:	vmovdqa XMMWORD PTR [rip+0xe433],xmm0        # 4121d0 <__bss_start@@Base+0x7c>
  403d9d:	lea    rsi,[rip+0x8cc7]        # 40ca6b <UnitySizeMask@@Base+0x39b>
  403da4:	lea    rbx,[rsp+0x8]
  403da9:	mov    rdi,rbx
  403dac:	call   408230 <init_lexer@@Base>
  403db1:	mov    rdi,rbx
  403db4:	call   408440 <next@@Base>
  403db9:	mov    esi,DWORD PTR [rax]
  403dbb:	xor    edi,edi
  403dbd:	xor    edx,edx
  403dbf:	mov    ecx,0x117
  403dc4:	mov    r8d,0x94
  403dca:	call   405880 <UnityAssertEqualNumber@@Base>
  403dcf:	mov    rdi,rbx
  403dd2:	call   408260 <destroy_lexer@@Base>
  403dd7:	add    rsp,0x20
  403ddb:	pop    rbx
  403ddc:	ret    
  403ddd:	nop    DWORD PTR [rax]

0000000000403de0 <read_token_int_value@@Base>:
  403de0:	push   rbx
  403de1:	sub    rsp,0x20
  403de5:	vmovdqa xmm0,XMMWORD PTR [rip+0xe3f3]        # 4121e0 <__bss_start@@Base+0x8c>
  403ded:	vpcmpeqd xmm1,xmm1,xmm1
  403df1:	vpsubq xmm0,xmm0,xmm1
  403df5:	vmovdqa XMMWORD PTR [rip+0xe3e3],xmm0        # 4121e0 <__bss_start@@Base+0x8c>
  403dfd:	lea    rsi,[rip+0x82a4]        # 40c0a8 <_IO_stdin_used@@Base+0xa8>
  403e04:	lea    rbx,[rsp+0x8]
  403e09:	mov    rdi,rbx
  403e0c:	call   408230 <init_lexer@@Base>
  403e11:	mov    rdi,rbx
  403e14:	call   408440 <next@@Base>
  403e19:	mov    esi,DWORD PTR [rax]
  403e1b:	mov    edi,0x1
  403e20:	xor    edx,edx
  403e22:	mov    ecx,0x128
  403e27:	mov    r8d,0x94
  403e2d:	call   405880 <UnityAssertEqualNumber@@Base>
  403e32:	mov    rdi,rbx
  403e35:	call   408260 <destroy_lexer@@Base>
  403e3a:	add    rsp,0x20
  403e3e:	pop    rbx
  403e3f:	ret    

0000000000403e40 <read_token_function@@Base>:
  403e40:	push   rbx
  403e41:	sub    rsp,0x20
  403e45:	vmovdqa xmm0,XMMWORD PTR [rip+0xe3a3]        # 4121f0 <__bss_start@@Base+0x9c>
  403e4d:	vpcmpeqd xmm1,xmm1,xmm1
  403e51:	vpsubq xmm0,xmm0,xmm1
  403e55:	vmovdqa XMMWORD PTR [rip+0xe393],xmm0        # 4121f0 <__bss_start@@Base+0x9c>
  403e5d:	lea    rsi,[rip+0x837a]        # 40c1de <_IO_stdin_used@@Base+0x1de>
  403e64:	lea    rbx,[rsp+0x8]
  403e69:	mov    rdi,rbx
  403e6c:	call   408230 <init_lexer@@Base>
  403e71:	mov    rdi,rbx
  403e74:	call   408440 <next@@Base>
  403e79:	mov    esi,DWORD PTR [rax]
  403e7b:	mov    edi,0x2
  403e80:	xor    edx,edx
  403e82:	mov    ecx,0x139
  403e87:	mov    r8d,0x94
  403e8d:	call   405880 <UnityAssertEqualNumber@@Base>
  403e92:	mov    rdi,rbx
  403e95:	call   408260 <destroy_lexer@@Base>
  403e9a:	add    rsp,0x20
  403e9e:	pop    rbx
  403e9f:	ret    

0000000000403ea0 <read_token_opar@@Base>:
  403ea0:	push   rbx
  403ea1:	sub    rsp,0x20
  403ea5:	vmovdqa xmm0,XMMWORD PTR [rip+0xe353]        # 412200 <__bss_start@@Base+0xac>
  403ead:	vpcmpeqd xmm1,xmm1,xmm1
  403eb1:	vpsubq xmm0,xmm0,xmm1
  403eb5:	vmovdqa XMMWORD PTR [rip+0xe343],xmm0        # 412200 <__bss_start@@Base+0xac>
  403ebd:	lea    rsi,[rip+0x81e9]        # 40c0ad <_IO_stdin_used@@Base+0xad>
  403ec4:	lea    rbx,[rsp+0x8]
  403ec9:	mov    rdi,rbx
  403ecc:	call   408230 <init_lexer@@Base>
  403ed1:	mov    rdi,rbx
  403ed4:	call   408440 <next@@Base>
  403ed9:	mov    esi,DWORD PTR [rax]
  403edb:	mov    edi,0x3
  403ee0:	xor    edx,edx
  403ee2:	mov    ecx,0x14a
  403ee7:	mov    r8d,0x94
  403eed:	call   405880 <UnityAssertEqualNumber@@Base>
  403ef2:	mov    rdi,rbx
  403ef5:	call   408260 <destroy_lexer@@Base>
  403efa:	add    rsp,0x20
  403efe:	pop    rbx
  403eff:	ret    

0000000000403f00 <read_token_cpar@@Base>:
  403f00:	push   rbx
  403f01:	sub    rsp,0x20
  403f05:	vmovdqa xmm0,XMMWORD PTR [rip+0xe303]        # 412210 <__bss_start@@Base+0xbc>
  403f0d:	vpcmpeqd xmm1,xmm1,xmm1
  403f11:	vpsubq xmm0,xmm0,xmm1
  403f15:	vmovdqa XMMWORD PTR [rip+0xe2f3],xmm0        # 412210 <__bss_start@@Base+0xbc>
  403f1d:	lea    rsi,[rip+0x818b]        # 40c0af <_IO_stdin_used@@Base+0xaf>
  403f24:	lea    rbx,[rsp+0x8]
  403f29:	mov    rdi,rbx
  403f2c:	call   408230 <init_lexer@@Base>
  403f31:	mov    rdi,rbx
  403f34:	call   408440 <next@@Base>
  403f39:	mov    esi,DWORD PTR [rax]
  403f3b:	mov    edi,0x4
  403f40:	xor    edx,edx
  403f42:	mov    ecx,0x15b
  403f47:	mov    r8d,0x94
  403f4d:	call   405880 <UnityAssertEqualNumber@@Base>
  403f52:	mov    rdi,rbx
  403f55:	call   408260 <destroy_lexer@@Base>
  403f5a:	add    rsp,0x20
  403f5e:	pop    rbx
  403f5f:	ret    

0000000000403f60 <read_token_obra@@Base>:
  403f60:	push   rbx
  403f61:	sub    rsp,0x20
  403f65:	vmovdqa xmm0,XMMWORD PTR [rip+0xe2b3]        # 412220 <__bss_start@@Base+0xcc>
  403f6d:	vpcmpeqd xmm1,xmm1,xmm1
  403f71:	vpsubq xmm0,xmm0,xmm1
  403f75:	vmovdqa XMMWORD PTR [rip+0xe2a3],xmm0        # 412220 <__bss_start@@Base+0xcc>
  403f7d:	lea    rsi,[rip+0x812d]        # 40c0b1 <_IO_stdin_used@@Base+0xb1>
  403f84:	lea    rbx,[rsp+0x8]
  403f89:	mov    rdi,rbx
  403f8c:	call   408230 <init_lexer@@Base>
  403f91:	mov    rdi,rbx
  403f94:	call   408440 <next@@Base>
  403f99:	mov    esi,DWORD PTR [rax]
  403f9b:	mov    edi,0x5
  403fa0:	xor    edx,edx
  403fa2:	mov    ecx,0x16c
  403fa7:	mov    r8d,0x94
  403fad:	call   405880 <UnityAssertEqualNumber@@Base>
  403fb2:	mov    rdi,rbx
  403fb5:	call   408260 <destroy_lexer@@Base>
  403fba:	add    rsp,0x20
  403fbe:	pop    rbx
  403fbf:	ret    

0000000000403fc0 <read_token_cbra@@Base>:
  403fc0:	push   rbx
  403fc1:	sub    rsp,0x20
  403fc5:	vmovdqa xmm0,XMMWORD PTR [rip+0xe263]        # 412230 <__bss_start@@Base+0xdc>
  403fcd:	vpcmpeqd xmm1,xmm1,xmm1
  403fd1:	vpsubq xmm0,xmm0,xmm1
  403fd5:	vmovdqa XMMWORD PTR [rip+0xe253],xmm0        # 412230 <__bss_start@@Base+0xdc>
  403fdd:	lea    rsi,[rip+0x8038]        # 40c01c <_IO_stdin_used@@Base+0x1c>
  403fe4:	lea    rbx,[rsp+0x8]
  403fe9:	mov    rdi,rbx
  403fec:	call   408230 <init_lexer@@Base>
  403ff1:	mov    rdi,rbx
  403ff4:	call   408440 <next@@Base>
  403ff9:	mov    esi,DWORD PTR [rax]
  403ffb:	mov    edi,0x6
  404000:	xor    edx,edx
  404002:	mov    ecx,0x17e
  404007:	mov    r8d,0x94
  40400d:	call   405880 <UnityAssertEqualNumber@@Base>
  404012:	mov    rdi,rbx
  404015:	call   408260 <destroy_lexer@@Base>
  40401a:	add    rsp,0x20
  40401e:	pop    rbx
  40401f:	ret    

0000000000404020 <read_token_return@@Base>:
  404020:	push   rbx
  404021:	sub    rsp,0x20
  404025:	vmovdqa xmm0,XMMWORD PTR [rip+0xe213]        # 412240 <__bss_start@@Base+0xec>
  40402d:	vpcmpeqd xmm1,xmm1,xmm1
  404031:	vpsubq xmm0,xmm0,xmm1
  404035:	vmovdqa XMMWORD PTR [rip+0xe203],xmm0        # 412240 <__bss_start@@Base+0xec>
  40403d:	lea    rsi,[rip+0x806f]        # 40c0b3 <_IO_stdin_used@@Base+0xb3>
  404044:	lea    rbx,[rsp+0x8]
  404049:	mov    rdi,rbx
  40404c:	call   408230 <init_lexer@@Base>
  404051:	mov    rdi,rbx
  404054:	call   408440 <next@@Base>
  404059:	mov    esi,DWORD PTR [rax]
  40405b:	mov    edi,0x7
  404060:	xor    edx,edx
  404062:	mov    ecx,0x18f
  404067:	mov    r8d,0x94
  40406d:	call   405880 <UnityAssertEqualNumber@@Base>
  404072:	mov    rdi,rbx
  404075:	call   408260 <destroy_lexer@@Base>
  40407a:	add    rsp,0x20
  40407e:	pop    rbx
  40407f:	ret    

0000000000404080 <read_token_semicolon@@Base>:
  404080:	push   rbx
  404081:	sub    rsp,0x20
  404085:	vmovdqa xmm0,XMMWORD PTR [rip+0xe1c3]        # 412250 <__bss_start@@Base+0xfc>
  40408d:	vpcmpeqd xmm1,xmm1,xmm1
  404091:	vpsubq xmm0,xmm0,xmm1
  404095:	vmovdqa XMMWORD PTR [rip+0xe1b3],xmm0        # 412250 <__bss_start@@Base+0xfc>
  40409d:	lea    rsi,[rip+0x8016]        # 40c0ba <_IO_stdin_used@@Base+0xba>
  4040a4:	lea    rbx,[rsp+0x8]
  4040a9:	mov    rdi,rbx
  4040ac:	call   408230 <init_lexer@@Base>
  4040b1:	mov    rdi,rbx
  4040b4:	call   408440 <next@@Base>
  4040b9:	mov    esi,DWORD PTR [rax]
  4040bb:	mov    edi,0x8
  4040c0:	xor    edx,edx
  4040c2:	mov    ecx,0x1a0
  4040c7:	mov    r8d,0x94
  4040cd:	call   405880 <UnityAssertEqualNumber@@Base>
  4040d2:	mov    rdi,rbx
  4040d5:	call   408260 <destroy_lexer@@Base>
  4040da:	add    rsp,0x20
  4040de:	pop    rbx
  4040df:	ret    

00000000004040e0 <read_token_eof@@Base>:
  4040e0:	push   rbx
  4040e1:	sub    rsp,0x20
  4040e5:	vmovdqa xmm0,XMMWORD PTR [rip+0xe173]        # 412260 <__bss_start@@Base+0x10c>
  4040ed:	vpcmpeqd xmm1,xmm1,xmm1
  4040f1:	vpsubq xmm0,xmm0,xmm1
  4040f5:	vmovdqa XMMWORD PTR [rip+0xe163],xmm0        # 412260 <__bss_start@@Base+0x10c>
  4040fd:	lea    rsi,[rip+0x8fc0]        # 40d0c4 <UnitySizeMask@@Base+0x9f4>
  404104:	lea    rbx,[rsp+0x8]
  404109:	mov    rdi,rbx
  40410c:	call   408230 <init_lexer@@Base>
  404111:	mov    rdi,rbx
  404114:	call   408440 <next@@Base>
  404119:	mov    esi,DWORD PTR [rax]
  40411b:	mov    edi,0x9
  404120:	xor    edx,edx
  404122:	mov    ecx,0x1b1
  404127:	mov    r8d,0x94
  40412d:	call   405880 <UnityAssertEqualNumber@@Base>
  404132:	mov    rdi,rbx
  404135:	call   408260 <destroy_lexer@@Base>
  40413a:	add    rsp,0x20
  40413e:	pop    rbx
  40413f:	ret    

0000000000404140 <read_token_if@@Base>:
  404140:	push   rbx
  404141:	sub    rsp,0x20
  404145:	vmovdqa xmm0,XMMWORD PTR [rip+0xe123]        # 412270 <__bss_start@@Base+0x11c>
  40414d:	vpcmpeqd xmm1,xmm1,xmm1
  404151:	vpsubq xmm0,xmm0,xmm1
  404155:	vmovdqa XMMWORD PTR [rip+0xe113],xmm0        # 412270 <__bss_start@@Base+0x11c>
  40415d:	lea    rsi,[rip+0x8048]        # 40c1ac <_IO_stdin_used@@Base+0x1ac>
  404164:	lea    rbx,[rsp+0x8]
  404169:	mov    rdi,rbx
  40416c:	call   408230 <init_lexer@@Base>
  404171:	mov    rdi,rbx
  404174:	call   408440 <next@@Base>
  404179:	mov    esi,DWORD PTR [rax]
  40417b:	mov    edi,0xa
  404180:	xor    edx,edx
  404182:	mov    ecx,0x1c2
  404187:	mov    r8d,0x94
  40418d:	call   405880 <UnityAssertEqualNumber@@Base>
  404192:	mov    rdi,rbx
  404195:	call   408260 <destroy_lexer@@Base>
  40419a:	add    rsp,0x20
  40419e:	pop    rbx
  40419f:	ret    

00000000004041a0 <read_token_else@@Base>:
  4041a0:	push   rbx
  4041a1:	sub    rsp,0x20
  4041a5:	vmovdqa xmm0,XMMWORD PTR [rip+0xe0d3]        # 412280 <__bss_start@@Base+0x12c>
  4041ad:	vpcmpeqd xmm1,xmm1,xmm1
  4041b1:	vpsubq xmm0,xmm0,xmm1
  4041b5:	vmovdqa XMMWORD PTR [rip+0xe0c3],xmm0        # 412280 <__bss_start@@Base+0x12c>
  4041bd:	lea    rsi,[rip+0x7f89]        # 40c14d <_IO_stdin_used@@Base+0x14d>
  4041c4:	lea    rbx,[rsp+0x8]
  4041c9:	mov    rdi,rbx
  4041cc:	call   408230 <init_lexer@@Base>
  4041d1:	mov    rdi,rbx
  4041d4:	call   408440 <next@@Base>
  4041d9:	mov    esi,DWORD PTR [rax]
  4041db:	mov    edi,0xb
  4041e0:	xor    edx,edx
  4041e2:	mov    ecx,0x1d3
  4041e7:	mov    r8d,0x94
  4041ed:	call   405880 <UnityAssertEqualNumber@@Base>
  4041f2:	mov    rdi,rbx
  4041f5:	call   408260 <destroy_lexer@@Base>
  4041fa:	add    rsp,0x20
  4041fe:	pop    rbx
  4041ff:	ret    

0000000000404200 <read_token_equalequal@@Base>:
  404200:	push   rbx
  404201:	sub    rsp,0x20
  404205:	vmovdqa xmm0,XMMWORD PTR [rip+0xe083]        # 412290 <__bss_start@@Base+0x13c>
  40420d:	vpcmpeqd xmm1,xmm1,xmm1
  404211:	vpsubq xmm0,xmm0,xmm1
  404215:	vmovdqa XMMWORD PTR [rip+0xe073],xmm0        # 412290 <__bss_start@@Base+0x13c>
  40421d:	lea    rsi,[rip+0x7e98]        # 40c0bc <_IO_stdin_used@@Base+0xbc>
  404224:	lea    rbx,[rsp+0x8]
  404229:	mov    rdi,rbx
  40422c:	call   408230 <init_lexer@@Base>
  404231:	mov    rdi,rbx
  404234:	call   408440 <next@@Base>
  404239:	mov    esi,DWORD PTR [rax]
  40423b:	mov    edi,0xc
  404240:	xor    edx,edx
  404242:	mov    ecx,0x1e4
  404247:	mov    r8d,0x94
  40424d:	call   405880 <UnityAssertEqualNumber@@Base>
  404252:	mov    rdi,rbx
  404255:	call   408260 <destroy_lexer@@Base>
  40425a:	add    rsp,0x20
  40425e:	pop    rbx
  40425f:	ret    

0000000000404260 <read_token_notequal@@Base>:
  404260:	push   rbx
  404261:	sub    rsp,0x20
  404265:	vmovdqa xmm0,XMMWORD PTR [rip+0xe033]        # 4122a0 <__bss_start@@Base+0x14c>
  40426d:	vpcmpeqd xmm1,xmm1,xmm1
  404271:	vpsubq xmm0,xmm0,xmm1
  404275:	vmovdqa XMMWORD PTR [rip+0xe023],xmm0        # 4122a0 <__bss_start@@Base+0x14c>
  40427d:	lea    rsi,[rip+0x7e3b]        # 40c0bf <_IO_stdin_used@@Base+0xbf>
  404284:	lea    rbx,[rsp+0x8]
  404289:	mov    rdi,rbx
  40428c:	call   408230 <init_lexer@@Base>
  404291:	mov    rdi,rbx
  404294:	call   408440 <next@@Base>
  404299:	mov    esi,DWORD PTR [rax]
  40429b:	mov    edi,0xc
  4042a0:	xor    edx,edx
  4042a2:	mov    ecx,0x1f5
  4042a7:	mov    r8d,0x94
  4042ad:	call   405880 <UnityAssertEqualNumber@@Base>
  4042b2:	mov    rdi,rbx
  4042b5:	call   408260 <destroy_lexer@@Base>
  4042ba:	add    rsp,0x20
  4042be:	pop    rbx
  4042bf:	ret    

00000000004042c0 <read_token_lessequalthan@@Base>:
  4042c0:	push   rbx
  4042c1:	sub    rsp,0x20
  4042c5:	vmovdqa xmm0,XMMWORD PTR [rip+0xdfe3]        # 4122b0 <__bss_start@@Base+0x15c>
  4042cd:	vpcmpeqd xmm1,xmm1,xmm1
  4042d1:	vpsubq xmm0,xmm0,xmm1
  4042d5:	vmovdqa XMMWORD PTR [rip+0xdfd3],xmm0        # 4122b0 <__bss_start@@Base+0x15c>
  4042dd:	lea    rsi,[rip+0x7dde]        # 40c0c2 <_IO_stdin_used@@Base+0xc2>
  4042e4:	lea    rbx,[rsp+0x8]
  4042e9:	mov    rdi,rbx
  4042ec:	call   408230 <init_lexer@@Base>
  4042f1:	mov    rdi,rbx
  4042f4:	call   408440 <next@@Base>
  4042f9:	mov    esi,DWORD PTR [rax]
  4042fb:	mov    edi,0xc
  404300:	xor    edx,edx
  404302:	mov    ecx,0x206
  404307:	mov    r8d,0x94
  40430d:	call   405880 <UnityAssertEqualNumber@@Base>
  404312:	mov    rdi,rbx
  404315:	call   408260 <destroy_lexer@@Base>
  40431a:	add    rsp,0x20
  40431e:	pop    rbx
  40431f:	ret    

0000000000404320 <read_token_oror@@Base>:
  404320:	push   rbx
  404321:	sub    rsp,0x20
  404325:	vmovdqa xmm0,XMMWORD PTR [rip+0xdf93]        # 4122c0 <__bss_start@@Base+0x16c>
  40432d:	vpcmpeqd xmm1,xmm1,xmm1
  404331:	vpsubq xmm0,xmm0,xmm1
  404335:	vmovdqa XMMWORD PTR [rip+0xdf83],xmm0        # 4122c0 <__bss_start@@Base+0x16c>
  40433d:	lea    rsi,[rip+0x7d81]        # 40c0c5 <_IO_stdin_used@@Base+0xc5>
  404344:	lea    rbx,[rsp+0x8]
  404349:	mov    rdi,rbx
  40434c:	call   408230 <init_lexer@@Base>
  404351:	mov    rdi,rbx
  404354:	call   408440 <next@@Base>
  404359:	mov    esi,DWORD PTR [rax]
  40435b:	mov    edi,0xc
  404360:	xor    edx,edx
  404362:	mov    ecx,0x217
  404367:	mov    r8d,0x94
  40436d:	call   405880 <UnityAssertEqualNumber@@Base>
  404372:	mov    rdi,rbx
  404375:	call   408260 <destroy_lexer@@Base>
  40437a:	add    rsp,0x20
  40437e:	pop    rbx
  40437f:	ret    

0000000000404380 <read_token_andand@@Base>:
  404380:	push   rbx
  404381:	sub    rsp,0x20
  404385:	vmovdqa xmm0,XMMWORD PTR [rip+0xdf43]        # 4122d0 <__bss_start@@Base+0x17c>
  40438d:	vpcmpeqd xmm1,xmm1,xmm1
  404391:	vpsubq xmm0,xmm0,xmm1
  404395:	vmovdqa XMMWORD PTR [rip+0xdf33],xmm0        # 4122d0 <__bss_start@@Base+0x17c>
  40439d:	lea    rsi,[rip+0x7d24]        # 40c0c8 <_IO_stdin_used@@Base+0xc8>
  4043a4:	lea    rbx,[rsp+0x8]
  4043a9:	mov    rdi,rbx
  4043ac:	call   408230 <init_lexer@@Base>
  4043b1:	mov    rdi,rbx
  4043b4:	call   408440 <next@@Base>
  4043b9:	mov    esi,DWORD PTR [rax]
  4043bb:	mov    edi,0xc
  4043c0:	xor    edx,edx
  4043c2:	mov    ecx,0x228
  4043c7:	mov    r8d,0x94
  4043cd:	call   405880 <UnityAssertEqualNumber@@Base>
  4043d2:	mov    rdi,rbx
  4043d5:	call   408260 <destroy_lexer@@Base>
  4043da:	add    rsp,0x20
  4043de:	pop    rbx
  4043df:	ret    

00000000004043e0 <read_token_greaterequalthan@@Base>:
  4043e0:	push   rbx
  4043e1:	sub    rsp,0x20
  4043e5:	vmovdqa xmm0,XMMWORD PTR [rip+0xdef3]        # 4122e0 <__bss_start@@Base+0x18c>
  4043ed:	vpcmpeqd xmm1,xmm1,xmm1
  4043f1:	vpsubq xmm0,xmm0,xmm1
  4043f5:	vmovdqa XMMWORD PTR [rip+0xdee3],xmm0        # 4122e0 <__bss_start@@Base+0x18c>
  4043fd:	lea    rsi,[rip+0x7cc7]        # 40c0cb <_IO_stdin_used@@Base+0xcb>
  404404:	lea    rbx,[rsp+0x8]
  404409:	mov    rdi,rbx
  40440c:	call   408230 <init_lexer@@Base>
  404411:	mov    rdi,rbx
  404414:	call   408440 <next@@Base>
  404419:	mov    esi,DWORD PTR [rax]
  40441b:	mov    edi,0xc
  404420:	xor    edx,edx
  404422:	mov    ecx,0x239
  404427:	mov    r8d,0x94
  40442d:	call   405880 <UnityAssertEqualNumber@@Base>
  404432:	mov    rdi,rbx
  404435:	call   408260 <destroy_lexer@@Base>
  40443a:	add    rsp,0x20
  40443e:	pop    rbx
  40443f:	ret    

0000000000404440 <read_token_lessthan@@Base>:
  404440:	push   rbx
  404441:	sub    rsp,0x20
  404445:	vmovdqa xmm0,XMMWORD PTR [rip+0xdea3]        # 4122f0 <__bss_start@@Base+0x19c>
  40444d:	vpcmpeqd xmm1,xmm1,xmm1
  404451:	vpsubq xmm0,xmm0,xmm1
  404455:	vmovdqa XMMWORD PTR [rip+0xde93],xmm0        # 4122f0 <__bss_start@@Base+0x19c>
  40445d:	lea    rsi,[rip+0x7c6a]        # 40c0ce <_IO_stdin_used@@Base+0xce>
  404464:	lea    rbx,[rsp+0x8]
  404469:	mov    rdi,rbx
  40446c:	call   408230 <init_lexer@@Base>
  404471:	mov    rdi,rbx
  404474:	call   408440 <next@@Base>
  404479:	mov    esi,DWORD PTR [rax]
  40447b:	mov    edi,0xc
  404480:	xor    edx,edx
  404482:	mov    ecx,0x24a
  404487:	mov    r8d,0x94
  40448d:	call   405880 <UnityAssertEqualNumber@@Base>
  404492:	mov    rdi,rbx
  404495:	call   408260 <destroy_lexer@@Base>
  40449a:	add    rsp,0x20
  40449e:	pop    rbx
  40449f:	ret    

00000000004044a0 <read_token_greaterthan@@Base>:
  4044a0:	push   rbx
  4044a1:	sub    rsp,0x20
  4044a5:	vmovdqa xmm0,XMMWORD PTR [rip+0xde53]        # 412300 <__bss_start@@Base+0x1ac>
  4044ad:	vpcmpeqd xmm1,xmm1,xmm1
  4044b1:	vpsubq xmm0,xmm0,xmm1
  4044b5:	vmovdqa XMMWORD PTR [rip+0xde43],xmm0        # 412300 <__bss_start@@Base+0x1ac>
  4044bd:	lea    rsi,[rip+0x7c0c]        # 40c0d0 <_IO_stdin_used@@Base+0xd0>
  4044c4:	lea    rbx,[rsp+0x8]
  4044c9:	mov    rdi,rbx
  4044cc:	call   408230 <init_lexer@@Base>
  4044d1:	mov    rdi,rbx
  4044d4:	call   408440 <next@@Base>
  4044d9:	mov    esi,DWORD PTR [rax]
  4044db:	mov    edi,0xc
  4044e0:	xor    edx,edx
  4044e2:	mov    ecx,0x25b
  4044e7:	mov    r8d,0x94
  4044ed:	call   405880 <UnityAssertEqualNumber@@Base>
  4044f2:	mov    rdi,rbx
  4044f5:	call   408260 <destroy_lexer@@Base>
  4044fa:	add    rsp,0x20
  4044fe:	pop    rbx
  4044ff:	ret    

0000000000404500 <read_token_not@@Base>:
  404500:	push   rbx
  404501:	sub    rsp,0x20
  404505:	vmovdqa xmm0,XMMWORD PTR [rip+0xde03]        # 412310 <__bss_start@@Base+0x1bc>
  40450d:	vpcmpeqd xmm1,xmm1,xmm1
  404511:	vpsubq xmm0,xmm0,xmm1
  404515:	vmovdqa XMMWORD PTR [rip+0xddf3],xmm0        # 412310 <__bss_start@@Base+0x1bc>
  40451d:	lea    rsi,[rip+0x7bae]        # 40c0d2 <_IO_stdin_used@@Base+0xd2>
  404524:	lea    rbx,[rsp+0x8]
  404529:	mov    rdi,rbx
  40452c:	call   408230 <init_lexer@@Base>
  404531:	mov    rdi,rbx
  404534:	call   408440 <next@@Base>
  404539:	mov    esi,DWORD PTR [rax]
  40453b:	mov    edi,0xc
  404540:	xor    edx,edx
  404542:	mov    ecx,0x26c
  404547:	mov    r8d,0x94
  40454d:	call   405880 <UnityAssertEqualNumber@@Base>
  404552:	mov    rdi,rbx
  404555:	call   408260 <destroy_lexer@@Base>
  40455a:	add    rsp,0x20
  40455e:	pop    rbx
  40455f:	ret    

0000000000404560 <main@@Base>:
  404560:	push   rax
  404561:	vmovdqa xmm0,XMMWORD PTR [rip+0xddb7]        # 412320 <__bss_start@@Base+0x1cc>
  404569:	vpcmpeqd xmm1,xmm1,xmm1
  40456d:	vpsubq xmm0,xmm0,xmm1
  404571:	vmovdqa XMMWORD PTR [rip+0xdda7],xmm0        # 412320 <__bss_start@@Base+0x1cc>
  404579:	lea    rdi,[rip+0x7b54]        # 40c0d4 <_IO_stdin_used@@Base+0xd4>
  404580:	call   407670 <UnityBegin@@Base>
  404585:	lea    rdi,[rip+0xffffffffffffedc4]        # 403350 <simple_file_only_main@@Base>
  40458c:	lea    rsi,[rip+0x7cdd]        # 40c270 <_IO_stdin_used@@Base+0x270>
  404593:	mov    edx,0x275
  404598:	call   4075b0 <UnityDefaultTestRun@@Base>
  40459d:	lea    rdi,[rip+0xffffffffffffef3c]        # 4034e0 <push_token_to_stack@@Base>
  4045a4:	lea    rsi,[rip+0x7ce5]        # 40c290 <_IO_stdin_used@@Base+0x290>
  4045ab:	mov    edx,0x276
  4045b0:	call   4075b0 <UnityDefaultTestRun@@Base>
  4045b5:	lea    rdi,[rip+0xffffffffffffefa4]        # 403560 <push_two_tokens_to_stack@@Base>
  4045bc:	lea    rsi,[rip+0x7ced]        # 40c2b0 <_IO_stdin_used@@Base+0x2b0>
  4045c3:	mov    edx,0x277
  4045c8:	call   4075b0 <UnityDefaultTestRun@@Base>
  4045cd:	lea    rdi,[rip+0xfffffffffffff05c]        # 403630 <push_token_and_call_next@@Base>
  4045d4:	lea    rsi,[rip+0x7cf5]        # 40c2d0 <_IO_stdin_used@@Base+0x2d0>
  4045db:	mov    edx,0x278
  4045e0:	call   4075b0 <UnityDefaultTestRun@@Base>
  4045e5:	lea    rdi,[rip+0xfffffffffffff0d4]        # 4036c0 <if_without_else@@Base>
  4045ec:	lea    rsi,[rip+0x7b42]        # 40c135 <_IO_stdin_used@@Base+0x135>
  4045f3:	mov    edx,0x279
  4045f8:	call   4075b0 <UnityDefaultTestRun@@Base>
  4045fd:	lea    rdi,[rip+0xfffffffffffff3bc]        # 4039c0 <if_with_else@@Base>
  404604:	lea    rsi,[rip+0x7b3a]        # 40c145 <_IO_stdin_used@@Base+0x145>
  40460b:	mov    edx,0x27a
  404610:	call   4075b0 <UnityDefaultTestRun@@Base>
  404615:	lea    rdi,[rip+0xfffffffffffff764]        # 403d80 <read_token_int_type@@Base>
  40461c:	lea    rsi,[rip+0x7ccd]        # 40c2f0 <_IO_stdin_used@@Base+0x2f0>
  404623:	mov    edx,0x27b
  404628:	call   4075b0 <UnityDefaultTestRun@@Base>
  40462d:	lea    rdi,[rip+0xfffffffffffff7ac]        # 403de0 <read_token_int_value@@Base>
  404634:	lea    rsi,[rip+0x7cd5]        # 40c310 <_IO_stdin_used@@Base+0x310>
  40463b:	mov    edx,0x27c
  404640:	call   4075b0 <UnityDefaultTestRun@@Base>
  404645:	lea    rdi,[rip+0xfffffffffffff7f4]        # 403e40 <read_token_function@@Base>
  40464c:	lea    rsi,[rip+0x7cdd]        # 40c330 <_IO_stdin_used@@Base+0x330>
  404653:	mov    edx,0x27d
  404658:	call   4075b0 <UnityDefaultTestRun@@Base>
  40465d:	lea    rdi,[rip+0xfffffffffffff83c]        # 403ea0 <read_token_opar@@Base>
  404664:	lea    rsi,[rip+0x7ae7]        # 40c152 <_IO_stdin_used@@Base+0x152>
  40466b:	mov    edx,0x27e
  404670:	call   4075b0 <UnityDefaultTestRun@@Base>
  404675:	lea    rdi,[rip+0xfffffffffffff884]        # 403f00 <read_token_cpar@@Base>
  40467c:	lea    rsi,[rip+0x7adf]        # 40c162 <_IO_stdin_used@@Base+0x162>
  404683:	mov    edx,0x27f
  404688:	call   4075b0 <UnityDefaultTestRun@@Base>
  40468d:	lea    rdi,[rip+0xfffffffffffff8cc]        # 403f60 <read_token_obra@@Base>
  404694:	lea    rsi,[rip+0x7ad7]        # 40c172 <_IO_stdin_used@@Base+0x172>
  40469b:	mov    edx,0x280
  4046a0:	call   4075b0 <UnityDefaultTestRun@@Base>
  4046a5:	lea    rdi,[rip+0xfffffffffffff914]        # 403fc0 <read_token_cbra@@Base>
  4046ac:	lea    rsi,[rip+0x7acf]        # 40c182 <_IO_stdin_used@@Base+0x182>
  4046b3:	mov    edx,0x281
  4046b8:	call   4075b0 <UnityDefaultTestRun@@Base>
  4046bd:	lea    rdi,[rip+0xfffffffffffff95c]        # 404020 <read_token_return@@Base>
  4046c4:	lea    rsi,[rip+0x7c85]        # 40c350 <_IO_stdin_used@@Base+0x350>
  4046cb:	mov    edx,0x282
  4046d0:	call   4075b0 <UnityDefaultTestRun@@Base>
  4046d5:	lea    rdi,[rip+0xfffffffffffff9a4]        # 404080 <read_token_semicolon@@Base>
  4046dc:	lea    rsi,[rip+0x7c8d]        # 40c370 <_IO_stdin_used@@Base+0x370>
  4046e3:	mov    edx,0x283
  4046e8:	call   4075b0 <UnityDefaultTestRun@@Base>
  4046ed:	lea    rdi,[rip+0xfffffffffffff9ec]        # 4040e0 <read_token_eof@@Base>
  4046f4:	lea    rsi,[rip+0x7a97]        # 40c192 <_IO_stdin_used@@Base+0x192>
  4046fb:	mov    edx,0x284
  404700:	call   4075b0 <UnityDefaultTestRun@@Base>
  404705:	lea    rdi,[rip+0xfffffffffffffa34]        # 404140 <read_token_if@@Base>
  40470c:	lea    rsi,[rip+0x7a8e]        # 40c1a1 <_IO_stdin_used@@Base+0x1a1>
  404713:	mov    edx,0x285
  404718:	call   4075b0 <UnityDefaultTestRun@@Base>
  40471d:	lea    rdi,[rip+0xfffffffffffffa7c]        # 4041a0 <read_token_else@@Base>
  404724:	lea    rsi,[rip+0x7a84]        # 40c1af <_IO_stdin_used@@Base+0x1af>
  40472b:	mov    edx,0x286
  404730:	call   4075b0 <UnityDefaultTestRun@@Base>
  404735:	lea    rdi,[rip+0xfffffffffffffac4]        # 404200 <read_token_equalequal@@Base>
  40473c:	lea    rsi,[rip+0x7c4d]        # 40c390 <_IO_stdin_used@@Base+0x390>
  404743:	mov    edx,0x287
  404748:	call   4075b0 <UnityDefaultTestRun@@Base>
  40474d:	lea    rdi,[rip+0xfffffffffffffb0c]        # 404260 <read_token_notequal@@Base>
  404754:	lea    rsi,[rip+0x7c55]        # 40c3b0 <_IO_stdin_used@@Base+0x3b0>
  40475b:	mov    edx,0x288
  404760:	call   4075b0 <UnityDefaultTestRun@@Base>
  404765:	lea    rdi,[rip+0xfffffffffffffb54]        # 4042c0 <read_token_lessequalthan@@Base>
  40476c:	lea    rsi,[rip+0x7c5d]        # 40c3d0 <_IO_stdin_used@@Base+0x3d0>
  404773:	mov    edx,0x289
  404778:	call   4075b0 <UnityDefaultTestRun@@Base>
  40477d:	lea    rdi,[rip+0xfffffffffffffc5c]        # 4043e0 <read_token_greaterequalthan@@Base>
  404784:	lea    rsi,[rip+0x7c85]        # 40c410 <_IO_stdin_used@@Base+0x410>
  40478b:	mov    edx,0x28a
  404790:	call   4075b0 <UnityDefaultTestRun@@Base>
  404795:	lea    rdi,[rip+0xfffffffffffffb84]        # 404320 <read_token_oror@@Base>
  40479c:	lea    rsi,[rip+0x7a1c]        # 40c1bf <_IO_stdin_used@@Base+0x1bf>
  4047a3:	mov    edx,0x28b
  4047a8:	call   4075b0 <UnityDefaultTestRun@@Base>
  4047ad:	lea    rdi,[rip+0xfffffffffffffbcc]        # 404380 <read_token_andand@@Base>
  4047b4:	lea    rsi,[rip+0x7c35]        # 40c3f0 <_IO_stdin_used@@Base+0x3f0>
  4047bb:	mov    edx,0x28c
  4047c0:	call   4075b0 <UnityDefaultTestRun@@Base>
  4047c5:	lea    rdi,[rip+0xfffffffffffffc74]        # 404440 <read_token_lessthan@@Base>
  4047cc:	lea    rsi,[rip+0x7c5d]        # 40c430 <_IO_stdin_used@@Base+0x430>
  4047d3:	mov    edx,0x28d
  4047d8:	call   4075b0 <UnityDefaultTestRun@@Base>
  4047dd:	lea    rdi,[rip+0xfffffffffffffcbc]        # 4044a0 <read_token_greaterthan@@Base>
  4047e4:	lea    rsi,[rip+0x7c65]        # 40c450 <_IO_stdin_used@@Base+0x450>
  4047eb:	mov    edx,0x28e
  4047f0:	call   4075b0 <UnityDefaultTestRun@@Base>
  4047f5:	lea    rdi,[rip+0xfffffffffffffd04]        # 404500 <read_token_not@@Base>
  4047fc:	lea    rsi,[rip+0x79cc]        # 40c1cf <_IO_stdin_used@@Base+0x1cf>
  404803:	mov    edx,0x28f
  404808:	call   4075b0 <UnityDefaultTestRun@@Base>
  40480d:	pop    rax
  40480e:	jmp    4076b0 <UnityEnd@@Base>
  404813:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40481d:	nop    DWORD PTR [rax]
  404820:	push   r15
  404822:	push   r14
  404824:	push   rbx
  404825:	lea    rdi,[rip+0x79c4]        # 40c1f0 <_IO_stdin_used@@Base+0x1f0>
  40482c:	lea    rsi,[rip+0x78fd]        # 40c130 <_IO_stdin_used@@Base+0x130>
  404833:	mov    edx,0xb640350a
  404838:	call   409500 <next@@Base+0x10c0>
  40483d:	xor    ebx,ebx
  40483f:	lea    r14,[rip+0xc24a]        # 410a90 <UnitySizeMask@@Base+0x43c0>
  404846:	lea    r15,[rip+0xc5c3]        # 410e10 <UnitySizeMask@@Base+0x4740>
  40484d:	nop    DWORD PTR [rax]
  404850:	mov    edi,DWORD PTR [r14+rbx*2]
  404854:	mov    rsi,QWORD PTR [r14+rbx*2+0x8]
  404859:	mov    edx,DWORD PTR [r14+rbx*2+0x10]
  40485e:	mov    r8d,DWORD PTR [r14+rbx*2+0x18]
  404863:	mov    ecx,DWORD PTR [r14+rbx*2+0x14]
  404868:	call   409950 <next@@Base+0x1510>
  40486d:	mov    edi,DWORD PTR [rbx+r15*1]
  404871:	mov    rsi,QWORD PTR [rbx+r15*1+0x8]
  404876:	call   409d80 <next@@Base+0x1940>
  40487b:	add    rbx,0x10
  40487f:	cmp    rbx,0x1c0
  404886:	jne    404850 <main@@Base+0x2f0>
  404888:	call   40a1a0 <next@@Base+0x1d60>
  40488d:	pop    rbx
  40488e:	pop    r14
  404890:	pop    r15
  404892:	jmp    40a940 <next@@Base+0x2500>
  404897:	nop    WORD PTR [rax+rax*1+0x0]
  4048a0:	push   rax
  4048a1:	call   404820 <main@@Base+0x2c0>
  4048a6:	vxorps xmm0,xmm0,xmm0
  4048aa:	vmovaps XMMWORD PTR [rip+0xd8be],xmm0        # 412170 <__bss_start@@Base+0x1c>
  4048b2:	vmovaps XMMWORD PTR [rip+0xd8c6],xmm0        # 412180 <__bss_start@@Base+0x2c>
  4048ba:	vmovaps XMMWORD PTR [rip+0xd8ce],xmm0        # 412190 <__bss_start@@Base+0x3c>
  4048c2:	vmovaps XMMWORD PTR [rip+0xd8d6],xmm0        # 4121a0 <__bss_start@@Base+0x4c>
  4048ca:	vmovaps XMMWORD PTR [rip+0xd8de],xmm0        # 4121b0 <__bss_start@@Base+0x5c>
  4048d2:	vmovaps XMMWORD PTR [rip+0xd8e6],xmm0        # 4121c0 <__bss_start@@Base+0x6c>
  4048da:	vmovaps XMMWORD PTR [rip+0xd8ee],xmm0        # 4121d0 <__bss_start@@Base+0x7c>
  4048e2:	vmovaps XMMWORD PTR [rip+0xd8f6],xmm0        # 4121e0 <__bss_start@@Base+0x8c>
  4048ea:	vmovaps XMMWORD PTR [rip+0xd8fe],xmm0        # 4121f0 <__bss_start@@Base+0x9c>
  4048f2:	vmovaps XMMWORD PTR [rip+0xd906],xmm0        # 412200 <__bss_start@@Base+0xac>
  4048fa:	vmovaps XMMWORD PTR [rip+0xd90e],xmm0        # 412210 <__bss_start@@Base+0xbc>
  404902:	vmovaps XMMWORD PTR [rip+0xd916],xmm0        # 412220 <__bss_start@@Base+0xcc>
  40490a:	vmovaps XMMWORD PTR [rip+0xd91e],xmm0        # 412230 <__bss_start@@Base+0xdc>
  404912:	vmovaps XMMWORD PTR [rip+0xd926],xmm0        # 412240 <__bss_start@@Base+0xec>
  40491a:	vmovaps XMMWORD PTR [rip+0xd92e],xmm0        # 412250 <__bss_start@@Base+0xfc>
  404922:	vmovaps XMMWORD PTR [rip+0xd936],xmm0        # 412260 <__bss_start@@Base+0x10c>
  40492a:	vmovaps XMMWORD PTR [rip+0xd93e],xmm0        # 412270 <__bss_start@@Base+0x11c>
  404932:	vmovaps XMMWORD PTR [rip+0xd946],xmm0        # 412280 <__bss_start@@Base+0x12c>
  40493a:	vmovaps XMMWORD PTR [rip+0xd94e],xmm0        # 412290 <__bss_start@@Base+0x13c>
  404942:	vmovaps XMMWORD PTR [rip+0xd956],xmm0        # 4122a0 <__bss_start@@Base+0x14c>
  40494a:	vmovaps XMMWORD PTR [rip+0xd95e],xmm0        # 4122b0 <__bss_start@@Base+0x15c>
  404952:	vmovaps XMMWORD PTR [rip+0xd966],xmm0        # 4122c0 <__bss_start@@Base+0x16c>
  40495a:	vmovaps XMMWORD PTR [rip+0xd96e],xmm0        # 4122d0 <__bss_start@@Base+0x17c>
  404962:	vmovaps XMMWORD PTR [rip+0xd976],xmm0        # 4122e0 <__bss_start@@Base+0x18c>
  40496a:	vmovaps XMMWORD PTR [rip+0xd97e],xmm0        # 4122f0 <__bss_start@@Base+0x19c>
  404972:	vmovaps XMMWORD PTR [rip+0xd986],xmm0        # 412300 <__bss_start@@Base+0x1ac>
  40497a:	vmovaps XMMWORD PTR [rip+0xd98e],xmm0        # 412310 <__bss_start@@Base+0x1bc>
  404982:	vmovaps XMMWORD PTR [rip+0xd996],xmm0        # 412320 <__bss_start@@Base+0x1cc>
  40498a:	pop    rax
  40498b:	ret    
  40498c:	nop    DWORD PTR [rax+0x0]
  404990:	lea    rdi,[rip+0xfffffffffffffe89]        # 404820 <main@@Base+0x2c0>
  404997:	lea    rsi,[rip+0xffffffffffffff02]        # 4048a0 <main@@Base+0x340>
  40499e:	jmp    40ad00 <__gcov_flush@@Base+0xa0>
  4049a3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4049ad:	nop    DWORD PTR [rax]

00000000004049b0 <UnityPrint@@Base>:
  4049b0:	push   r15
  4049b2:	push   r14
  4049b4:	push   r13
  4049b6:	push   r12
  4049b8:	push   rbx
  4049b9:	lea    r14,[rip+0xd970]        # 412330 <__bss_start@@Base+0x1dc>
  4049c0:	add    QWORD PTR [rip+0xd968],0x1        # 412330 <__bss_start@@Base+0x1dc>
  4049c8:	xor    eax,eax
  4049ca:	test   rdi,rdi
  4049cd:	sete   al
  4049d0:	add    QWORD PTR [r14+rax*8+0x8],0x1
  4049d6:	test   rdi,rdi
  4049d9:	je     404b7b <UnityPrint@@Base+0x1cb>
  4049df:	mov    r12,rdi
  4049e2:	mov    al,BYTE PTR [rdi]
  4049e4:	xor    ecx,ecx
  4049e6:	test   al,al
  4049e8:	sete   cl
  4049eb:	add    QWORD PTR [r14+rcx*8+0x18],0x1
  4049f1:	test   al,al
  4049f3:	je     404b7b <UnityPrint@@Base+0x1cb>
  4049f9:	vpcmpeqd xmm1,xmm1,xmm1
  4049fd:	mov    r15,QWORD PTR [rip+0xd5dc]        # 411fe0 <stdout@GLIBC_2.2.5>
  404a04:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404a0e:	xchg   ax,ax
  404a10:	xor    ecx,ecx
  404a12:	cmp    al,0x7f
  404a14:	sete   cl
  404a17:	add    QWORD PTR [r14+rcx*8+0x28],0x1
  404a1d:	cmp    al,0x7f
  404a1f:	je     404a60 <UnityPrint@@Base+0xb0>
  404a21:	xor    ecx,ecx
  404a23:	cmp    al,0x20
  404a25:	setl   cl
  404a28:	add    QWORD PTR [r14+rcx*8+0x38],0x1
  404a2e:	cmp    al,0x20
  404a30:	jl     404a60 <UnityPrint@@Base+0xb0>
  404a32:	add    QWORD PTR [rip+0xd93e],0x1        # 412378 <__bss_start@@Base+0x224>
  404a3a:	movsx  edi,al
  404a3d:	vmovdqa xmm0,XMMWORD PTR [rip+0xd98b]        # 4123d0 <__bss_start@@Base+0x27c>
  404a45:	vpsubq xmm0,xmm0,xmm1
  404a49:	vmovdqa XMMWORD PTR [rip+0xd97f],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  404a51:	mov    rsi,QWORD PTR [r15]
  404a54:	call   403130 <putc@plt>
  404a59:	jmp    404b50 <UnityPrint@@Base+0x1a0>
  404a5e:	xchg   ax,ax
  404a60:	movzx  ebx,BYTE PTR [r12]
  404a65:	xor    eax,eax
  404a67:	cmp    bl,0xd
  404a6a:	setne  al
  404a6d:	add    QWORD PTR [r14+rax*8+0x50],0x1
  404a73:	cmp    bl,0xd
  404a76:	jne    404ad0 <UnityPrint@@Base+0x120>
  404a78:	add    QWORD PTR [rip+0xd910],0x1        # 412390 <__bss_start@@Base+0x23c>
  404a80:	vmovdqa xmm0,XMMWORD PTR [rip+0xd948]        # 4123d0 <__bss_start@@Base+0x27c>
  404a88:	vpsubq xmm0,xmm0,xmm1
  404a8c:	vmovdqa XMMWORD PTR [rip+0xd93c],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  404a94:	mov    rsi,QWORD PTR [r15]
  404a97:	mov    edi,0x5c
  404a9c:	call   403130 <putc@plt>
  404aa1:	vmovdqa xmm0,XMMWORD PTR [rip+0xd927]        # 4123d0 <__bss_start@@Base+0x27c>
  404aa9:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x79bf]        # 40c470 <_IO_stdin_used@@Base+0x470>
  404ab1:	vmovdqa XMMWORD PTR [rip+0xd917],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  404ab9:	mov    rsi,QWORD PTR [r15]
  404abc:	mov    edi,0x72
  404ac1:	call   403130 <putc@plt>
  404ac6:	jmp    404b50 <UnityPrint@@Base+0x1a0>
  404acb:	nop    DWORD PTR [rax+rax*1+0x0]
  404ad0:	xor    r13d,r13d
  404ad3:	cmp    bl,0xa
  404ad6:	setne  r13b
  404ada:	vmovdqa xmm0,XMMWORD PTR [rip+0xd8ee]        # 4123d0 <__bss_start@@Base+0x27c>
  404ae2:	vpsubq xmm0,xmm0,xmm1
  404ae6:	vmovdqa XMMWORD PTR [rip+0xd8e2],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  404aee:	mov    rsi,QWORD PTR [r15]
  404af1:	mov    edi,0x5c
  404af6:	call   403130 <putc@plt>
  404afb:	add    QWORD PTR [r14+r13*8+0x68],0x1
  404b01:	cmp    bl,0xa
  404b04:	jne    404b35 <UnityPrint@@Base+0x185>
  404b06:	add    QWORD PTR [rip+0xd89a],0x1        # 4123a8 <__bss_start@@Base+0x254>
  404b0e:	vmovdqa xmm0,XMMWORD PTR [rip+0xd8ba]        # 4123d0 <__bss_start@@Base+0x27c>
  404b16:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x7952]        # 40c470 <_IO_stdin_used@@Base+0x470>
  404b1e:	vmovdqa XMMWORD PTR [rip+0xd8aa],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  404b26:	mov    rsi,QWORD PTR [r15]
  404b29:	mov    edi,0x6e
  404b2e:	call   403130 <putc@plt>
  404b33:	jmp    404b50 <UnityPrint@@Base+0x1a0>
  404b35:	add    QWORD PTR [rip+0xd873],0x1        # 4123b0 <__bss_start@@Base+0x25c>
  404b3d:	movsx  rdi,BYTE PTR [r12]
  404b42:	mov    esi,0x2
  404b47:	call   404b90 <UnityPrintNumberHex@@Base>
  404b4c:	nop    DWORD PTR [rax+0x0]
  404b50:	vpcmpeqd xmm1,xmm1,xmm1
  404b54:	add    QWORD PTR [rip+0xd85c],0x1        # 4123b8 <__bss_start@@Base+0x264>
  404b5c:	movzx  eax,BYTE PTR [r12+0x1]
  404b62:	add    r12,0x1
  404b66:	xor    ecx,ecx
  404b68:	test   al,al
  404b6a:	sete   cl
  404b6d:	add    QWORD PTR [r14+rcx*8+0x18],0x1
  404b73:	test   al,al
  404b75:	jne    404a10 <UnityPrint@@Base+0x60>
  404b7b:	add    QWORD PTR [rip+0xd83d],0x1        # 4123c0 <__bss_start@@Base+0x26c>
  404b83:	pop    rbx
  404b84:	pop    r12
  404b86:	pop    r13
  404b88:	pop    r14
  404b8a:	pop    r15
  404b8c:	ret    
  404b8d:	nop    DWORD PTR [rax]

0000000000404b90 <UnityPrintNumberHex@@Base>:
  404b90:	push   rbp
  404b91:	push   r15
  404b93:	push   r14
  404b95:	push   r13
  404b97:	push   r12
  404b99:	push   rbx
  404b9a:	push   rax
  404b9b:	mov    r14d,esi
  404b9e:	mov    r12,rdi
  404ba1:	lea    r13,[rip+0xd838]        # 4123e0 <__bss_start@@Base+0x28c>
  404ba8:	vmovdqa xmm0,XMMWORD PTR [rip+0xd830]        # 4123e0 <__bss_start@@Base+0x28c>
  404bb0:	vpcmpeqd xmm1,xmm1,xmm1
  404bb4:	vpsubq xmm0,xmm0,xmm1
  404bb8:	vmovdqa XMMWORD PTR [rip+0xd820],xmm0        # 4123e0 <__bss_start@@Base+0x28c>
  404bc0:	vmovdqa xmm0,XMMWORD PTR [rip+0xd808]        # 4123d0 <__bss_start@@Base+0x27c>
  404bc8:	vpsubq xmm0,xmm0,xmm1
  404bcc:	vmovdqa XMMWORD PTR [rip+0xd7fc],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  404bd4:	mov    r15,QWORD PTR [rip+0xd405]        # 411fe0 <stdout@GLIBC_2.2.5>
  404bdb:	mov    rsi,QWORD PTR [r15]
  404bde:	mov    edi,0x30
  404be3:	call   403130 <putc@plt>
  404be8:	vmovdqa xmm0,XMMWORD PTR [rip+0xd7e0]        # 4123d0 <__bss_start@@Base+0x27c>
  404bf0:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x7878]        # 40c470 <_IO_stdin_used@@Base+0x470>
  404bf8:	vmovdqa XMMWORD PTR [rip+0xd7d0],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  404c00:	mov    rsi,QWORD PTR [r15]
  404c03:	mov    edi,0x78
  404c08:	call   403130 <putc@plt>
  404c0d:	xor    eax,eax
  404c0f:	test   r14b,r14b
  404c12:	setle  al
  404c15:	add    QWORD PTR [r13+rax*8+0x10],0x1
  404c1b:	test   r14b,r14b
  404c1e:	jle    404cc7 <UnityPrintNumberHex@@Base+0x137>
  404c24:	movsx  rbp,r14b
  404c28:	lea    rbx,[rbp*4-0x4]
  404c30:	lea    r14,[rbp-0x1]
  404c34:	mov    eax,ebx
  404c36:	and    al,0xfc
  404c38:	shrx   rdi,r12,rax
  404c3d:	and    edi,0xf
  404c40:	xor    eax,eax
  404c42:	cmp    rdi,0x9
  404c46:	seta   al
  404c49:	add    QWORD PTR [r13+rax*8+0x20],0x1
  404c4f:	cmp    rdi,0x9
  404c53:	ja     404c70 <UnityPrintNumberHex@@Base+0xe0>
  404c55:	add    QWORD PTR [rip+0xd7b3],0x1        # 412410 <__bss_start@@Base+0x2bc>
  404c5d:	or     edi,0x30
  404c60:	jmp    404c7b <UnityPrintNumberHex@@Base+0xeb>
  404c62:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404c6c:	nop    DWORD PTR [rax+0x0]
  404c70:	add    QWORD PTR [rip+0xd7a0],0x1        # 412418 <__bss_start@@Base+0x2c4>
  404c78:	add    edi,0x37
  404c7b:	vmovdqa xmm0,XMMWORD PTR [rip+0xd74d]        # 4123d0 <__bss_start@@Base+0x27c>
  404c83:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x77e5]        # 40c470 <_IO_stdin_used@@Base+0x470>
  404c8b:	vmovdqa XMMWORD PTR [rip+0xd73d],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  404c93:	mov    rsi,QWORD PTR [r15]
  404c96:	call   403130 <putc@plt>
  404c9b:	add    QWORD PTR [rip+0xd77d],0x1        # 412420 <__bss_start@@Base+0x2cc>
  404ca3:	xor    eax,eax
  404ca5:	cmp    rbp,0x2
  404ca9:	setl   al
  404cac:	add    QWORD PTR [r13+rax*8+0x10],0x1
  404cb2:	add    rbx,0xfffffffffffffffc
  404cb6:	lea    rax,[r14+0x1]
  404cba:	mov    rbp,r14
  404cbd:	cmp    rax,0x1
  404cc1:	jg     404c30 <UnityPrintNumberHex@@Base+0xa0>
  404cc7:	add    QWORD PTR [rip+0xd759],0x1        # 412428 <__bss_start@@Base+0x2d4>
  404ccf:	add    rsp,0x8
  404cd3:	pop    rbx
  404cd4:	pop    r12
  404cd6:	pop    r13
  404cd8:	pop    r14
  404cda:	pop    r15
  404cdc:	pop    rbp
  404cdd:	ret    
  404cde:	xchg   ax,ax

0000000000404ce0 <UnityPrintLen@@Base>:
  404ce0:	push   rbp
  404ce1:	push   r15
  404ce3:	push   r14
  404ce5:	push   r13
  404ce7:	push   r12
  404ce9:	push   rbx
  404cea:	push   rax
  404ceb:	lea    r13,[rip+0xd73e]        # 412430 <__bss_start@@Base+0x2dc>
  404cf2:	add    QWORD PTR [rip+0xd736],0x1        # 412430 <__bss_start@@Base+0x2dc>
  404cfa:	xor    eax,eax
  404cfc:	test   rdi,rdi
  404cff:	sete   al
  404d02:	add    QWORD PTR [r13+rax*8+0x8],0x1
  404d08:	test   rdi,rdi
  404d0b:	je     404ed6 <UnityPrintLen@@Base+0x1f6>
  404d11:	mov    r14,rdi
  404d14:	mov    al,BYTE PTR [rdi]
  404d16:	xor    ecx,ecx
  404d18:	test   al,al
  404d1a:	sete   cl
  404d1d:	add    QWORD PTR [r13+rcx*8+0x18],0x1
  404d23:	test   al,al
  404d25:	je     404ed6 <UnityPrintLen@@Base+0x1f6>
  404d2b:	mov    r12d,esi
  404d2e:	vpcmpeqd xmm1,xmm1,xmm1
  404d32:	mov    r15,QWORD PTR [rip+0xd2a7]        # 411fe0 <stdout@GLIBC_2.2.5>
  404d39:	mov    rbp,r14
  404d3c:	mov    DWORD PTR [rsp+0x4],esi
  404d40:	mov    ecx,ebp
  404d42:	sub    ecx,r14d
  404d45:	xor    edx,edx
  404d47:	cmp    ecx,r12d
  404d4a:	setae  dl
  404d4d:	add    QWORD PTR [r13+rdx*8+0x28],0x1
  404d53:	cmp    ecx,r12d
  404d56:	jae    404ed6 <UnityPrintLen@@Base+0x1f6>
  404d5c:	xor    ecx,ecx
  404d5e:	cmp    al,0x7f
  404d60:	sete   cl
  404d63:	add    QWORD PTR [r13+rcx*8+0x38],0x1
  404d69:	cmp    al,0x7f
  404d6b:	je     404db0 <UnityPrintLen@@Base+0xd0>
  404d6d:	xor    ecx,ecx
  404d6f:	cmp    al,0x20
  404d71:	setl   cl
  404d74:	add    QWORD PTR [r13+rcx*8+0x48],0x1
  404d7a:	cmp    al,0x20
  404d7c:	jl     404db0 <UnityPrintLen@@Base+0xd0>
  404d7e:	add    QWORD PTR [rip+0xd702],0x1        # 412488 <__bss_start@@Base+0x334>
  404d86:	movsx  edi,al
  404d89:	vmovdqa xmm0,XMMWORD PTR [rip+0xd63f]        # 4123d0 <__bss_start@@Base+0x27c>
  404d91:	vpsubq xmm0,xmm0,xmm1
  404d95:	vmovdqa XMMWORD PTR [rip+0xd633],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  404d9d:	mov    rsi,QWORD PTR [r15]
  404da0:	jmp    404e10 <UnityPrintLen@@Base+0x130>
  404da2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404dac:	nop    DWORD PTR [rax+0x0]
  404db0:	movzx  ebx,BYTE PTR [rbp+0x0]
  404db4:	xor    eax,eax
  404db6:	cmp    bl,0xd
  404db9:	setne  al
  404dbc:	add    QWORD PTR [r13+rax*8+0x60],0x1
  404dc2:	cmp    bl,0xd
  404dc5:	jne    404e20 <UnityPrintLen@@Base+0x140>
  404dc7:	add    QWORD PTR [rip+0xd6d1],0x1        # 4124a0 <__bss_start@@Base+0x34c>
  404dcf:	vmovdqa xmm0,XMMWORD PTR [rip+0xd5f9]        # 4123d0 <__bss_start@@Base+0x27c>
  404dd7:	vpsubq xmm0,xmm0,xmm1
  404ddb:	vmovdqa XMMWORD PTR [rip+0xd5ed],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  404de3:	mov    rsi,QWORD PTR [r15]
  404de6:	mov    edi,0x5c
  404deb:	call   403130 <putc@plt>
  404df0:	vmovdqa xmm0,XMMWORD PTR [rip+0xd5d8]        # 4123d0 <__bss_start@@Base+0x27c>
  404df8:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x7670]        # 40c470 <_IO_stdin_used@@Base+0x470>
  404e00:	vmovdqa XMMWORD PTR [rip+0xd5c8],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  404e08:	mov    rsi,QWORD PTR [r15]
  404e0b:	mov    edi,0x72
  404e10:	call   403130 <putc@plt>
  404e15:	vpcmpeqd xmm1,xmm1,xmm1
  404e19:	jmp    404eb1 <UnityPrintLen@@Base+0x1d1>
  404e1e:	xchg   ax,ax
  404e20:	mov    r12,r14
  404e23:	mov    r14,r15
  404e26:	xor    r15d,r15d
  404e29:	cmp    bl,0xa
  404e2c:	setne  r15b
  404e30:	vmovdqa xmm0,XMMWORD PTR [rip+0xd598]        # 4123d0 <__bss_start@@Base+0x27c>
  404e38:	vpsubq xmm0,xmm0,xmm1
  404e3c:	vmovdqa XMMWORD PTR [rip+0xd58c],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  404e44:	mov    rsi,QWORD PTR [r14]
  404e47:	mov    edi,0x5c
  404e4c:	call   403130 <putc@plt>
  404e51:	add    QWORD PTR [r13+r15*8+0x78],0x1
  404e57:	cmp    bl,0xa
  404e5a:	jne    404e8b <UnityPrintLen@@Base+0x1ab>
  404e5c:	add    QWORD PTR [rip+0xd654],0x1        # 4124b8 <__bss_start@@Base+0x364>
  404e64:	vmovdqa xmm0,XMMWORD PTR [rip+0xd564]        # 4123d0 <__bss_start@@Base+0x27c>
  404e6c:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x75fc]        # 40c470 <_IO_stdin_used@@Base+0x470>
  404e74:	vmovdqa XMMWORD PTR [rip+0xd554],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  404e7c:	mov    rsi,QWORD PTR [r14]
  404e7f:	mov    edi,0x6e
  404e84:	call   403130 <putc@plt>
  404e89:	jmp    404ea2 <UnityPrintLen@@Base+0x1c2>
  404e8b:	add    QWORD PTR [rip+0xd62d],0x1        # 4124c0 <__bss_start@@Base+0x36c>
  404e93:	movsx  rdi,BYTE PTR [rbp+0x0]
  404e98:	mov    esi,0x2
  404e9d:	call   404b90 <UnityPrintNumberHex@@Base>
  404ea2:	vpcmpeqd xmm1,xmm1,xmm1
  404ea6:	mov    r15,r14
  404ea9:	mov    r14,r12
  404eac:	mov    r12d,DWORD PTR [rsp+0x4]
  404eb1:	add    QWORD PTR [rip+0xd60f],0x1        # 4124c8 <__bss_start@@Base+0x374>
  404eb9:	movzx  eax,BYTE PTR [rbp+0x1]
  404ebd:	add    rbp,0x1
  404ec1:	xor    ecx,ecx
  404ec3:	test   al,al
  404ec5:	sete   cl
  404ec8:	add    QWORD PTR [r13+rcx*8+0x18],0x1
  404ece:	test   al,al
  404ed0:	jne    404d40 <UnityPrintLen@@Base+0x60>
  404ed6:	add    QWORD PTR [rip+0xd5f2],0x1        # 4124d0 <__bss_start@@Base+0x37c>
  404ede:	add    rsp,0x8
  404ee2:	pop    rbx
  404ee3:	pop    r12
  404ee5:	pop    r13
  404ee7:	pop    r14
  404ee9:	pop    r15
  404eeb:	pop    rbp
  404eec:	ret    
  404eed:	nop    DWORD PTR [rax]

0000000000404ef0 <UnityPrintNumberByStyle@@Base>:
  404ef0:	push   rax
  404ef1:	lea    rax,[rip+0xd5e8]        # 4124e0 <__bss_start@@Base+0x38c>
  404ef8:	add    QWORD PTR [rip+0xd5e0],0x1        # 4124e0 <__bss_start@@Base+0x38c>
  404f00:	xor    ecx,ecx
  404f02:	test   sil,0x10
  404f06:	sete   cl
  404f09:	add    QWORD PTR [rax+rcx*8+0x8],0x1
  404f0f:	test   sil,0x10
  404f13:	je     404f24 <UnityPrintNumberByStyle@@Base+0x34>
  404f15:	add    QWORD PTR [rip+0xd5db],0x1        # 4124f8 <__bss_start@@Base+0x3a4>
  404f1d:	call   404f80 <UnityPrintNumber@@Base>
  404f22:	jmp    404f6f <UnityPrintNumberByStyle@@Base+0x7f>
  404f24:	xor    ecx,ecx
  404f26:	test   sil,0x20
  404f2a:	sete   cl
  404f2d:	add    QWORD PTR [rax+rcx*8+0x20],0x1
  404f33:	test   sil,0x20
  404f37:	je     404f57 <UnityPrintNumberByStyle@@Base+0x67>
  404f39:	add    QWORD PTR [rip+0xd5cf],0x1        # 412510 <__bss_start@@Base+0x3bc>
  404f41:	and    esi,0xf
  404f44:	lea    rax,[rip+0x7785]        # 40c6d0 <UnitySizeMask@@Base>
  404f4b:	and    rdi,QWORD PTR [rax+rsi*8-0x8]
  404f50:	call   405140 <UnityPrintNumberUnsigned@@Base>
  404f55:	jmp    404f6f <UnityPrintNumberByStyle@@Base+0x7f>
  404f57:	add    QWORD PTR [rip+0xd5b9],0x1        # 412518 <__bss_start@@Base+0x3c4>
  404f5f:	add    sil,sil
  404f62:	and    sil,0x1e
  404f66:	movzx  esi,sil
  404f6a:	call   404b90 <UnityPrintNumberHex@@Base>
  404f6f:	add    QWORD PTR [rip+0xd5a9],0x1        # 412520 <__bss_start@@Base+0x3cc>
  404f77:	pop    rax
  404f78:	ret    
  404f79:	nop    DWORD PTR [rax+0x0]

0000000000404f80 <UnityPrintNumber@@Base>:
  404f80:	push   r15
  404f82:	push   r14
  404f84:	push   r13
  404f86:	push   r12
  404f88:	push   rbx
  404f89:	mov    r14,rdi
  404f8c:	lea    r15,[rip+0xd59d]        # 412530 <__bss_start@@Base+0x3dc>
  404f93:	add    QWORD PTR [rip+0xd595],0x1        # 412530 <__bss_start@@Base+0x3dc>
  404f9b:	xor    eax,eax
  404f9d:	test   rdi,rdi
  404fa0:	setns  al
  404fa3:	add    QWORD PTR [r15+rax*8+0x8],0x1
  404fa9:	test   rdi,rdi
  404fac:	js     404fb8 <UnityPrintNumber@@Base+0x38>
  404fae:	add    QWORD PTR [rip+0xd59a],0x1        # 412550 <__bss_start@@Base+0x3fc>
  404fb6:	jmp    404fef <UnityPrintNumber@@Base+0x6f>
  404fb8:	add    QWORD PTR [rip+0xd588],0x1        # 412548 <__bss_start@@Base+0x3f4>
  404fc0:	vmovdqa xmm0,XMMWORD PTR [rip+0xd408]        # 4123d0 <__bss_start@@Base+0x27c>
  404fc8:	vpcmpeqd xmm1,xmm1,xmm1
  404fcc:	vpsubq xmm0,xmm0,xmm1
  404fd0:	vmovdqa XMMWORD PTR [rip+0xd3f8],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  404fd8:	mov    rax,QWORD PTR [rip+0xd001]        # 411fe0 <stdout@GLIBC_2.2.5>
  404fdf:	mov    rsi,QWORD PTR [rax]
  404fe2:	mov    edi,0x2d
  404fe7:	call   403130 <putc@plt>
  404fec:	neg    r14
  404fef:	add    QWORD PTR [rip+0xd561],0x1        # 412558 <__bss_start@@Base+0x404>
  404ff7:	xor    eax,eax
  404ff9:	cmp    r14,0xa
  404ffd:	setb   al
  405000:	add    QWORD PTR [r15+rax*8+0x30],0x1
  405006:	mov    ecx,0x1
  40500b:	cmp    r14,0xa
  40500f:	jb     405081 <UnityPrintNumber@@Base+0x101>
  405011:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40501b:	nop    DWORD PTR [rax+rax*1+0x0]
  405020:	mov    rbx,rcx
  405023:	lea    rax,[rcx+rcx*1]
  405027:	lea    rcx,[rax+rax*4]
  40502b:	xor    eax,eax
  40502d:	cmp    rcx,rbx
  405030:	setbe  al
  405033:	add    QWORD PTR [r15+rax*8+0x40],0x1
  405039:	cmp    rcx,rbx
  40503c:	jbe    405086 <UnityPrintNumber@@Base+0x106>
  40503e:	add    QWORD PTR [rip+0xd53a],0x1        # 412580 <__bss_start@@Base+0x42c>
  405046:	mov    rax,r14
  405049:	or     rax,rcx
  40504c:	shr    rax,0x20
  405050:	je     405060 <UnityPrintNumber@@Base+0xe0>
  405052:	xor    edx,edx
  405054:	mov    rax,r14
  405057:	div    rcx
  40505a:	jmp    405067 <UnityPrintNumber@@Base+0xe7>
  40505c:	nop    DWORD PTR [rax+0x0]
  405060:	xor    edx,edx
  405062:	mov    eax,r14d
  405065:	div    ecx
  405067:	xor    edx,edx
  405069:	cmp    rax,0xa
  40506d:	setb   dl
  405070:	add    QWORD PTR [r15+rdx*8+0x30],0x1
  405076:	mov    rbx,rcx
  405079:	cmp    rax,0x9
  40507d:	ja     405020 <UnityPrintNumber@@Base+0xa0>
  40507f:	jmp    405086 <UnityPrintNumber@@Base+0x106>
  405081:	mov    ebx,0x1
  405086:	add    QWORD PTR [rip+0xd4fa],0x1        # 412588 <__bss_start@@Base+0x434>
  40508e:	movabs r12,0xcccccccccccccccd
  405098:	mov    r13,QWORD PTR [rip+0xcf41]        # 411fe0 <stdout@GLIBC_2.2.5>
  40509f:	nop
  4050a0:	mov    rax,r14
  4050a3:	or     rax,rbx
  4050a6:	shr    rax,0x20
  4050aa:	je     4050c0 <UnityPrintNumber@@Base+0x140>
  4050ac:	xor    edx,edx
  4050ae:	mov    rax,r14
  4050b1:	div    rbx
  4050b4:	mov    rdx,rax
  4050b7:	jmp    4050c9 <UnityPrintNumber@@Base+0x149>
  4050b9:	nop    DWORD PTR [rax+0x0]
  4050c0:	xor    edx,edx
  4050c2:	mov    eax,r14d
  4050c5:	div    ebx
  4050c7:	mov    edx,eax
  4050c9:	mulx   rcx,rax,r12
  4050ce:	shr    rcx,0x3
  4050d2:	add    ecx,ecx
  4050d4:	lea    eax,[rcx+rcx*4]
  4050d7:	sub    edx,eax
  4050d9:	or     edx,0x30
  4050dc:	vmovdqa xmm0,XMMWORD PTR [rip+0xd2ec]        # 4123d0 <__bss_start@@Base+0x27c>
  4050e4:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x7384]        # 40c470 <_IO_stdin_used@@Base+0x470>
  4050ec:	vmovdqa XMMWORD PTR [rip+0xd2dc],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  4050f4:	mov    rsi,QWORD PTR [r13+0x0]
  4050f8:	mov    edi,edx
  4050fa:	call   403130 <putc@plt>
  4050ff:	mov    rdx,rbx
  405102:	mulx   rax,rcx,r12
  405107:	shr    rax,0x3
  40510b:	xor    ecx,ecx
  40510d:	cmp    rbx,0xa
  405111:	setb   cl
  405114:	add    QWORD PTR [r15+rcx*8+0x60],0x1
  40511a:	cmp    rbx,0x9
  40511e:	mov    rbx,rax
  405121:	ja     4050a0 <UnityPrintNumber@@Base+0x120>
  405127:	add    QWORD PTR [rip+0xd471],0x1        # 4125a0 <__bss_start@@Base+0x44c>
  40512f:	pop    rbx
  405130:	pop    r12
  405132:	pop    r13
  405134:	pop    r14
  405136:	pop    r15
  405138:	ret    
  405139:	nop    DWORD PTR [rax+0x0]

0000000000405140 <UnityPrintNumberUnsigned@@Base>:
  405140:	push   r15
  405142:	push   r14
  405144:	push   r13
  405146:	push   r12
  405148:	push   rbx
  405149:	mov    r14,rdi
  40514c:	lea    r15,[rip+0xd45d]        # 4125b0 <__bss_start@@Base+0x45c>
  405153:	vmovdqa xmm0,XMMWORD PTR [rip+0xd455]        # 4125b0 <__bss_start@@Base+0x45c>
  40515b:	vpcmpeqd xmm1,xmm1,xmm1
  40515f:	vpsubq xmm0,xmm0,xmm1
  405163:	vmovdqa XMMWORD PTR [rip+0xd445],xmm0        # 4125b0 <__bss_start@@Base+0x45c>
  40516b:	xor    eax,eax
  40516d:	cmp    rdi,0xa
  405171:	setb   al
  405174:	add    QWORD PTR [r15+rax*8+0x10],0x1
  40517a:	mov    ecx,0x1
  40517f:	cmp    rdi,0xa
  405183:	jb     4051f1 <UnityPrintNumberUnsigned@@Base+0xb1>
  405185:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40518f:	nop
  405190:	mov    rbx,rcx
  405193:	lea    rax,[rcx+rcx*1]
  405197:	lea    rcx,[rax+rax*4]
  40519b:	xor    eax,eax
  40519d:	cmp    rcx,rbx
  4051a0:	setbe  al
  4051a3:	add    QWORD PTR [r15+rax*8+0x20],0x1
  4051a9:	cmp    rcx,rbx
  4051ac:	jbe    4051f6 <UnityPrintNumberUnsigned@@Base+0xb6>
  4051ae:	add    QWORD PTR [rip+0xd42a],0x1        # 4125e0 <__bss_start@@Base+0x48c>
  4051b6:	mov    rax,r14
  4051b9:	or     rax,rcx
  4051bc:	shr    rax,0x20
  4051c0:	je     4051d0 <UnityPrintNumberUnsigned@@Base+0x90>
  4051c2:	xor    edx,edx
  4051c4:	mov    rax,r14
  4051c7:	div    rcx
  4051ca:	jmp    4051d7 <UnityPrintNumberUnsigned@@Base+0x97>
  4051cc:	nop    DWORD PTR [rax+0x0]
  4051d0:	xor    edx,edx
  4051d2:	mov    eax,r14d
  4051d5:	div    ecx
  4051d7:	xor    edx,edx
  4051d9:	cmp    rax,0xa
  4051dd:	setb   dl
  4051e0:	add    QWORD PTR [r15+rdx*8+0x10],0x1
  4051e6:	mov    rbx,rcx
  4051e9:	cmp    rax,0x9
  4051ed:	ja     405190 <UnityPrintNumberUnsigned@@Base+0x50>
  4051ef:	jmp    4051f6 <UnityPrintNumberUnsigned@@Base+0xb6>
  4051f1:	mov    ebx,0x1
  4051f6:	add    QWORD PTR [rip+0xd3ea],0x1        # 4125e8 <__bss_start@@Base+0x494>
  4051fe:	movabs r12,0xcccccccccccccccd
  405208:	mov    r13,QWORD PTR [rip+0xcdd1]        # 411fe0 <stdout@GLIBC_2.2.5>
  40520f:	nop
  405210:	mov    rax,r14
  405213:	or     rax,rbx
  405216:	shr    rax,0x20
  40521a:	je     405230 <UnityPrintNumberUnsigned@@Base+0xf0>
  40521c:	xor    edx,edx
  40521e:	mov    rax,r14
  405221:	div    rbx
  405224:	mov    rdx,rax
  405227:	jmp    405239 <UnityPrintNumberUnsigned@@Base+0xf9>
  405229:	nop    DWORD PTR [rax+0x0]
  405230:	xor    edx,edx
  405232:	mov    eax,r14d
  405235:	div    ebx
  405237:	mov    edx,eax
  405239:	mulx   rcx,rax,r12
  40523e:	shr    rcx,0x3
  405242:	add    ecx,ecx
  405244:	lea    eax,[rcx+rcx*4]
  405247:	sub    edx,eax
  405249:	or     edx,0x30
  40524c:	vmovdqa xmm0,XMMWORD PTR [rip+0xd17c]        # 4123d0 <__bss_start@@Base+0x27c>
  405254:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x7214]        # 40c470 <_IO_stdin_used@@Base+0x470>
  40525c:	vmovdqa XMMWORD PTR [rip+0xd16c],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  405264:	mov    rsi,QWORD PTR [r13+0x0]
  405268:	mov    edi,edx
  40526a:	call   403130 <putc@plt>
  40526f:	mov    rdx,rbx
  405272:	mulx   rax,rcx,r12
  405277:	shr    rax,0x3
  40527b:	xor    ecx,ecx
  40527d:	cmp    rbx,0xa
  405281:	setb   cl
  405284:	add    QWORD PTR [r15+rcx*8+0x40],0x1
  40528a:	cmp    rbx,0x9
  40528e:	mov    rbx,rax
  405291:	ja     405210 <UnityPrintNumberUnsigned@@Base+0xd0>
  405297:	add    QWORD PTR [rip+0xd361],0x1        # 412600 <__bss_start@@Base+0x4ac>
  40529f:	pop    rbx
  4052a0:	pop    r12
  4052a2:	pop    r13
  4052a4:	pop    r14
  4052a6:	pop    r15
  4052a8:	ret    
  4052a9:	nop    DWORD PTR [rax+0x0]

00000000004052b0 <UnityPrintMask@@Base>:
  4052b0:	push   rbp
  4052b1:	push   r15
  4052b3:	push   r14
  4052b5:	push   r13
  4052b7:	push   r12
  4052b9:	push   rbx
  4052ba:	push   rax
  4052bb:	vmovdqa xmm0,XMMWORD PTR [rip+0xd34d]        # 412610 <__bss_start@@Base+0x4bc>
  4052c3:	vpcmpeqd xmm1,xmm1,xmm1
  4052c7:	vpsubq xmm0,xmm0,xmm1
  4052cb:	vmovdqa XMMWORD PTR [rip+0xd33d],xmm0        # 412610 <__bss_start@@Base+0x4bc>
  4052d3:	add    QWORD PTR [rip+0xd345],0x1        # 412620 <__bss_start@@Base+0x4cc>
  4052db:	mov    r14,rsi
  4052de:	mov    r15,rdi
  4052e1:	mov    ebp,0x1
  4052e6:	mov    ebx,0x80000000
  4052eb:	lea    r12,[rip+0xd31e]        # 412610 <__bss_start@@Base+0x4bc>
  4052f2:	mov    r13,QWORD PTR [rip+0xcce7]        # 411fe0 <stdout@GLIBC_2.2.5>
  4052f9:	nop    DWORD PTR [rax+0x0]
  405300:	xor    eax,eax
  405302:	test   rbx,r15
  405305:	sete   al
  405308:	add    QWORD PTR [r12+rax*8+0x20],0x1
  40530e:	test   rbx,r15
  405311:	je     405360 <UnityPrintMask@@Base+0xb0>
  405313:	xor    eax,eax
  405315:	test   rbx,r14
  405318:	sete   al
  40531b:	add    QWORD PTR [r12+rax*8+0x30],0x1
  405321:	test   rbx,r14
  405324:	je     405390 <UnityPrintMask@@Base+0xe0>
  405326:	add    QWORD PTR [rip+0xd322],0x1        # 412650 <__bss_start@@Base+0x4fc>
  40532e:	vmovdqa xmm0,XMMWORD PTR [rip+0xd09a]        # 4123d0 <__bss_start@@Base+0x27c>
  405336:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x7132]        # 40c470 <_IO_stdin_used@@Base+0x470>
  40533e:	vmovdqa XMMWORD PTR [rip+0xd08a],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  405346:	mov    rsi,QWORD PTR [r13+0x0]
  40534a:	mov    edi,0x31
  40534f:	jmp    4053b9 <UnityPrintMask@@Base+0x109>
  405351:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40535b:	nop    DWORD PTR [rax+rax*1+0x0]
  405360:	add    QWORD PTR [rip+0xd2f8],0x1        # 412660 <__bss_start@@Base+0x50c>
  405368:	vmovdqa xmm0,XMMWORD PTR [rip+0xd060]        # 4123d0 <__bss_start@@Base+0x27c>
  405370:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x70f8]        # 40c470 <_IO_stdin_used@@Base+0x470>
  405378:	vmovdqa XMMWORD PTR [rip+0xd050],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  405380:	mov    rsi,QWORD PTR [r13+0x0]
  405384:	mov    edi,0x58
  405389:	jmp    4053b9 <UnityPrintMask@@Base+0x109>
  40538b:	nop    DWORD PTR [rax+rax*1+0x0]
  405390:	add    QWORD PTR [rip+0xd2c0],0x1        # 412658 <__bss_start@@Base+0x504>
  405398:	vmovdqa xmm0,XMMWORD PTR [rip+0xd030]        # 4123d0 <__bss_start@@Base+0x27c>
  4053a0:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x70c8]        # 40c470 <_IO_stdin_used@@Base+0x470>
  4053a8:	vmovdqa XMMWORD PTR [rip+0xd020],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  4053b0:	mov    rsi,QWORD PTR [r13+0x0]
  4053b4:	mov    edi,0x30
  4053b9:	call   403130 <putc@plt>
  4053be:	add    QWORD PTR [rip+0xd2a2],0x1        # 412668 <__bss_start@@Base+0x514>
  4053c6:	shr    rbx,1
  4053c9:	xor    eax,eax
  4053cb:	cmp    ebp,0x1f
  4053ce:	seta   al
  4053d1:	add    QWORD PTR [r12+rax*8+0x10],0x1
  4053d7:	add    ebp,0x1
  4053da:	cmp    ebp,0x21
  4053dd:	jne    405300 <UnityPrintMask@@Base+0x50>
  4053e3:	add    QWORD PTR [rip+0xd285],0x1        # 412670 <__bss_start@@Base+0x51c>
  4053eb:	add    rsp,0x8
  4053ef:	pop    rbx
  4053f0:	pop    r12
  4053f2:	pop    r13
  4053f4:	pop    r14
  4053f6:	pop    r15
  4053f8:	pop    rbp
  4053f9:	ret    
  4053fa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405400 <UnityPrintFail@@Base>:
  405400:	vmovdqa xmm0,XMMWORD PTR [rip+0xd278]        # 412680 <__bss_start@@Base+0x52c>
  405408:	vpcmpeqd xmm1,xmm1,xmm1
  40540c:	vpsubq xmm0,xmm0,xmm1
  405410:	vmovdqa XMMWORD PTR [rip+0xd268],xmm0        # 412680 <__bss_start@@Base+0x52c>
  405418:	lea    rdi,[rip+0x7099]        # 40c4b8 <UnityStrFail@@Base>
  40541f:	jmp    4049b0 <UnityPrint@@Base>
  405424:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40542e:	xchg   ax,ax

0000000000405430 <UnityPrintOk@@Base>:
  405430:	vmovdqa xmm0,XMMWORD PTR [rip+0xd258]        # 412690 <__bss_start@@Base+0x53c>
  405438:	vpcmpeqd xmm1,xmm1,xmm1
  40543c:	vpsubq xmm0,xmm0,xmm1
  405440:	vmovdqa XMMWORD PTR [rip+0xd248],xmm0        # 412690 <__bss_start@@Base+0x53c>
  405448:	lea    rdi,[rip+0x7061]        # 40c4b0 <UnityStrOk@@Base>
  40544f:	jmp    4049b0 <UnityPrint@@Base>
  405454:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40545e:	xchg   ax,ax

0000000000405460 <UnityConcludeTest@@Base>:
  405460:	push   r15
  405462:	push   r14
  405464:	push   rbx
  405465:	lea    rax,[rip+0xd234]        # 4126a0 <__bss_start@@Base+0x54c>
  40546c:	add    QWORD PTR [rip+0xd22c],0x1        # 4126a0 <__bss_start@@Base+0x54c>
  405474:	lea    rbx,[rip+0xe3a5]        # 413820 <Unity@@Base>
  40547b:	mov    rcx,QWORD PTR [rbx+0x48]
  40547f:	xor    edx,edx
  405481:	test   rcx,rcx
  405484:	sete   dl
  405487:	add    QWORD PTR [rax+rdx*8+0x8],0x1
  40548d:	test   rcx,rcx
  405490:	je     4054a4 <UnityConcludeTest@@Base+0x44>
  405492:	add    QWORD PTR [rip+0xd21e],0x1        # 4126b8 <__bss_start@@Base+0x564>
  40549a:	add    QWORD PTR [rbx+0x38],0x1
  40549f:	jmp    40558c <UnityConcludeTest@@Base+0x12c>
  4054a4:	mov    rcx,QWORD PTR [rbx+0x40]
  4054a8:	xor    edx,edx
  4054aa:	test   rcx,rcx
  4054ad:	sete   dl
  4054b0:	add    QWORD PTR [rax+rdx*8+0x20],0x1
  4054b6:	test   rcx,rcx
  4054b9:	je     4054cd <UnityConcludeTest@@Base+0x6d>
  4054bb:	add    QWORD PTR [rip+0xd215],0x1        # 4126d8 <__bss_start@@Base+0x584>
  4054c3:	add    QWORD PTR [rbx+0x30],0x1
  4054c8:	jmp    40558c <UnityConcludeTest@@Base+0x12c>
  4054cd:	add    QWORD PTR [rip+0xd1fb],0x1        # 4126d0 <__bss_start@@Base+0x57c>
  4054d5:	mov    rdi,QWORD PTR [rbx]
  4054d8:	mov    r14,QWORD PTR [rbx+0x20]
  4054dc:	vmovdqa xmm0,XMMWORD PTR [rip+0xd20c]        # 4126f0 <__bss_start@@Base+0x59c>
  4054e4:	vpcmpeqd xmm1,xmm1,xmm1
  4054e8:	vpsubq xmm0,xmm0,xmm1
  4054ec:	vmovdqa XMMWORD PTR [rip+0xd1fc],xmm0        # 4126f0 <__bss_start@@Base+0x59c>
  4054f4:	call   4049b0 <UnityPrint@@Base>
  4054f9:	vmovdqa xmm0,XMMWORD PTR [rip+0xcecf]        # 4123d0 <__bss_start@@Base+0x27c>
  405501:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x6f67]        # 40c470 <_IO_stdin_used@@Base+0x470>
  405509:	vmovdqa XMMWORD PTR [rip+0xcebf],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  405511:	mov    r15,QWORD PTR [rip+0xcac8]        # 411fe0 <stdout@GLIBC_2.2.5>
  405518:	mov    rsi,QWORD PTR [r15]
  40551b:	mov    edi,0x3a
  405520:	call   403130 <putc@plt>
  405525:	mov    rdi,r14
  405528:	call   404f80 <UnityPrintNumber@@Base>
  40552d:	vmovdqa xmm0,XMMWORD PTR [rip+0xce9b]        # 4123d0 <__bss_start@@Base+0x27c>
  405535:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x6f33]        # 40c470 <_IO_stdin_used@@Base+0x470>
  40553d:	vmovdqa XMMWORD PTR [rip+0xce8b],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  405545:	mov    rsi,QWORD PTR [r15]
  405548:	mov    edi,0x3a
  40554d:	call   403130 <putc@plt>
  405552:	mov    rdi,QWORD PTR [rbx+0x8]
  405556:	call   4049b0 <UnityPrint@@Base>
  40555b:	vmovdqa xmm0,XMMWORD PTR [rip+0xce6d]        # 4123d0 <__bss_start@@Base+0x27c>
  405563:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x6f05]        # 40c470 <_IO_stdin_used@@Base+0x470>
  40556b:	vmovdqa XMMWORD PTR [rip+0xce5d],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  405573:	mov    rsi,QWORD PTR [r15]
  405576:	mov    edi,0x3a
  40557b:	call   403130 <putc@plt>
  405580:	lea    rdi,[rip+0x6f2c]        # 40c4b3 <UnityStrPass@@Base>
  405587:	call   4049b0 <UnityPrint@@Base>
  40558c:	add    QWORD PTR [rip+0xd14c],0x1        # 4126e0 <__bss_start@@Base+0x58c>
  405594:	vpxor  xmm0,xmm0,xmm0
  405598:	vmovdqu XMMWORD PTR [rbx+0x40],xmm0
  40559d:	vmovdqa xmm0,XMMWORD PTR [rip+0xce2b]        # 4123d0 <__bss_start@@Base+0x27c>
  4055a5:	vpcmpeqd xmm1,xmm1,xmm1
  4055a9:	vpsubq xmm0,xmm0,xmm1
  4055ad:	vmovdqa XMMWORD PTR [rip+0xce1b],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  4055b5:	mov    rax,QWORD PTR [rip+0xca24]        # 411fe0 <stdout@GLIBC_2.2.5>
  4055bc:	mov    rsi,QWORD PTR [rax]
  4055bf:	mov    edi,0xa
  4055c4:	pop    rbx
  4055c5:	pop    r14
  4055c7:	pop    r15
  4055c9:	jmp    403130 <putc@plt>
  4055ce:	xchg   ax,ax

00000000004055d0 <UnityAssertBits@@Base>:
  4055d0:	push   r15
  4055d2:	push   r14
  4055d4:	push   r13
  4055d6:	push   r12
  4055d8:	push   rbx
  4055d9:	add    QWORD PTR [rip+0xd11f],0x1        # 412700 <__bss_start@@Base+0x5ac>
  4055e1:	mov    r14,rcx
  4055e4:	mov    r15,rdx
  4055e7:	mov    r13,rsi
  4055ea:	mov    r12,rdi
  4055ed:	lea    rax,[rip+0xd10c]        # 412700 <__bss_start@@Base+0x5ac>
  4055f4:	lea    rbx,[rip+0xe225]        # 413820 <Unity@@Base>
  4055fb:	mov    rcx,QWORD PTR [rbx+0x48]
  4055ff:	mov    rdx,QWORD PTR [rbx+0x40]
  405603:	xor    esi,esi
  405605:	mov    rdi,rcx
  405608:	or     rdi,rdx
  40560b:	sete   sil
  40560f:	add    QWORD PTR [rax+rsi*8+0x8],0x1
  405615:	or     rcx,rdx
  405618:	jne    405633 <UnityAssertBits@@Base+0x63>
  40561a:	mov    rcx,r15
  40561d:	xor    rcx,r13
  405620:	xor    edx,edx
  405622:	test   rcx,r12
  405625:	sete   dl
  405628:	add    QWORD PTR [rax+rdx*8+0x18],0x1
  40562e:	test   rcx,r12
  405631:	jne    405645 <UnityAssertBits@@Base+0x75>
  405633:	add    QWORD PTR [rip+0xd0ed],0x1        # 412728 <__bss_start@@Base+0x5d4>
  40563b:	pop    rbx
  40563c:	pop    r12
  40563e:	pop    r13
  405640:	pop    r14
  405642:	pop    r15
  405644:	ret    
  405645:	mov    rdi,r8
  405648:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  40564d:	lea    rdi,[rip+0x6e78]        # 40c4cc <UnityStrExpected@@Base>
  405654:	call   4049b0 <UnityPrint@@Base>
  405659:	mov    rdi,r12
  40565c:	mov    rsi,r13
  40565f:	call   4052b0 <UnityPrintMask@@Base>
  405664:	lea    rdi,[rip+0x6e6c]        # 40c4d7 <UnityStrWas@@Base>
  40566b:	call   4049b0 <UnityPrint@@Base>
  405670:	mov    rdi,r12
  405673:	mov    rsi,r15
  405676:	call   4052b0 <UnityPrintMask@@Base>
  40567b:	mov    rdi,r14
  40567e:	call   4057a0 <UnityAssertBits@@Base+0x1d0>
  405683:	mov    QWORD PTR [rbx+0x40],0x1
  40568b:	add    rbx,0x50
  40568f:	mov    esi,0x1
  405694:	mov    rdi,rbx
  405697:	call   4031f0 <longjmp@plt>
  40569c:	nop    DWORD PTR [rax+0x0]
  4056a0:	push   r15
  4056a2:	push   r14
  4056a4:	push   rbx
  4056a5:	mov    rbx,rdi
  4056a8:	vmovdqa xmm0,XMMWORD PTR [rip+0xd080]        # 412730 <__bss_start@@Base+0x5dc>
  4056b0:	vpcmpeqd xmm1,xmm1,xmm1
  4056b4:	vpsubq xmm0,xmm0,xmm1
  4056b8:	vmovdqa XMMWORD PTR [rip+0xd070],xmm0        # 412730 <__bss_start@@Base+0x5dc>
  4056c0:	lea    r15,[rip+0xe159]        # 413820 <Unity@@Base>
  4056c7:	mov    rdi,QWORD PTR [r15]
  4056ca:	vmovdqa xmm0,XMMWORD PTR [rip+0xd01e]        # 4126f0 <__bss_start@@Base+0x59c>
  4056d2:	vpsubq xmm0,xmm0,xmm1
  4056d6:	vmovdqa XMMWORD PTR [rip+0xd012],xmm0        # 4126f0 <__bss_start@@Base+0x59c>
  4056de:	call   4049b0 <UnityPrint@@Base>
  4056e3:	vmovdqa xmm0,XMMWORD PTR [rip+0xcce5]        # 4123d0 <__bss_start@@Base+0x27c>
  4056eb:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x6d7d]        # 40c470 <_IO_stdin_used@@Base+0x470>
  4056f3:	vmovdqa XMMWORD PTR [rip+0xccd5],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  4056fb:	mov    r14,QWORD PTR [rip+0xc8de]        # 411fe0 <stdout@GLIBC_2.2.5>
  405702:	mov    rsi,QWORD PTR [r14]
  405705:	mov    edi,0x3a
  40570a:	call   403130 <putc@plt>
  40570f:	mov    rdi,rbx
  405712:	call   404f80 <UnityPrintNumber@@Base>
  405717:	vmovdqa xmm0,XMMWORD PTR [rip+0xccb1]        # 4123d0 <__bss_start@@Base+0x27c>
  40571f:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x6d49]        # 40c470 <_IO_stdin_used@@Base+0x470>
  405727:	vmovdqa XMMWORD PTR [rip+0xcca1],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  40572f:	mov    rsi,QWORD PTR [r14]
  405732:	mov    edi,0x3a
  405737:	call   403130 <putc@plt>
  40573c:	mov    rdi,QWORD PTR [r15+0x8]
  405740:	call   4049b0 <UnityPrint@@Base>
  405745:	vmovdqa xmm0,XMMWORD PTR [rip+0xcc83]        # 4123d0 <__bss_start@@Base+0x27c>
  40574d:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x6d1b]        # 40c470 <_IO_stdin_used@@Base+0x470>
  405755:	vmovdqa XMMWORD PTR [rip+0xcc73],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  40575d:	mov    rsi,QWORD PTR [r14]
  405760:	mov    edi,0x3a
  405765:	call   403130 <putc@plt>
  40576a:	lea    rdi,[rip+0x6d47]        # 40c4b8 <UnityStrFail@@Base>
  405771:	call   4049b0 <UnityPrint@@Base>
  405776:	vmovdqa xmm0,XMMWORD PTR [rip+0xcc52]        # 4123d0 <__bss_start@@Base+0x27c>
  40577e:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x6cea]        # 40c470 <_IO_stdin_used@@Base+0x470>
  405786:	vmovdqa XMMWORD PTR [rip+0xcc42],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  40578e:	mov    rsi,QWORD PTR [r14]
  405791:	mov    edi,0x3a
  405796:	pop    rbx
  405797:	pop    r14
  405799:	pop    r15
  40579b:	jmp    403130 <putc@plt>
  4057a0:	push   r15
  4057a2:	push   r14
  4057a4:	push   rbx
  4057a5:	lea    r14,[rip+0xcf94]        # 412740 <__bss_start@@Base+0x5ec>
  4057ac:	add    QWORD PTR [rip+0xcf8c],0x1        # 412740 <__bss_start@@Base+0x5ec>
  4057b4:	xor    eax,eax
  4057b6:	test   rdi,rdi
  4057b9:	sete   al
  4057bc:	add    QWORD PTR [r14+rax*8+0x8],0x1
  4057c2:	test   rdi,rdi
  4057c5:	je     405865 <UnityAssertBits@@Base+0x295>
  4057cb:	mov    rbx,rdi
  4057ce:	lea    rdi,[rip+0x6cf4]        # 40c4c9 <UnityStrSpacer@@Base>
  4057d5:	call   4049b0 <UnityPrint@@Base>
  4057da:	lea    r15,[rip+0xe03f]        # 413820 <Unity@@Base>
  4057e1:	mov    rax,QWORD PTR [r15+0x10]
  4057e5:	xor    ecx,ecx
  4057e7:	test   rax,rax
  4057ea:	sete   cl
  4057ed:	add    QWORD PTR [r14+rcx*8+0x18],0x1
  4057f3:	test   rax,rax
  4057f6:	je     405855 <UnityAssertBits@@Base+0x285>
  4057f8:	lea    rdi,[rip+0x6eb6]        # 40c6b5 <UnityStrDetail1Name@@Base>
  4057ff:	call   4049b0 <UnityPrint@@Base>
  405804:	mov    rdi,QWORD PTR [r15+0x10]
  405808:	call   4049b0 <UnityPrint@@Base>
  40580d:	mov    rax,QWORD PTR [r15+0x18]
  405811:	xor    ecx,ecx
  405813:	test   rax,rax
  405816:	sete   cl
  405819:	add    QWORD PTR [r14+rcx*8+0x28],0x1
  40581f:	test   rax,rax
  405822:	je     405841 <UnityAssertBits@@Base+0x271>
  405824:	add    QWORD PTR [rip+0xcf4c],0x1        # 412778 <__bss_start@@Base+0x624>
  40582c:	lea    rdi,[rip+0x6e8c]        # 40c6bf <UnityStrDetail2Name@@Base>
  405833:	call   4049b0 <UnityPrint@@Base>
  405838:	mov    rdi,QWORD PTR [r15+0x18]
  40583c:	call   4049b0 <UnityPrint@@Base>
  405841:	add    QWORD PTR [rip+0xcf37],0x1        # 412780 <__bss_start@@Base+0x62c>
  405849:	lea    rdi,[rip+0x6c79]        # 40c4c9 <UnityStrSpacer@@Base>
  405850:	call   4049b0 <UnityPrint@@Base>
  405855:	add    QWORD PTR [rip+0xcf2b],0x1        # 412788 <__bss_start@@Base+0x634>
  40585d:	mov    rdi,rbx
  405860:	call   4049b0 <UnityPrint@@Base>
  405865:	add    QWORD PTR [rip+0xcf23],0x1        # 412790 <__bss_start@@Base+0x63c>
  40586d:	pop    rbx
  40586e:	pop    r14
  405870:	pop    r15
  405872:	ret    
  405873:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40587d:	nop    DWORD PTR [rax]

0000000000405880 <UnityAssertEqualNumber@@Base>:
  405880:	push   rbp
  405881:	push   r15
  405883:	push   r14
  405885:	push   r12
  405887:	push   rbx
  405888:	add    QWORD PTR [rip+0xcf10],0x1        # 4127a0 <__bss_start@@Base+0x64c>
  405890:	mov    r15d,r8d
  405893:	mov    r14,rdx
  405896:	mov    r12,rsi
  405899:	mov    rbp,rdi
  40589c:	lea    r8,[rip+0xcefd]        # 4127a0 <__bss_start@@Base+0x64c>
  4058a3:	lea    rbx,[rip+0xdf76]        # 413820 <Unity@@Base>
  4058aa:	mov    rax,QWORD PTR [rbx+0x48]
  4058ae:	mov    rsi,QWORD PTR [rbx+0x40]
  4058b2:	xor    edi,edi
  4058b4:	mov    rdx,rax
  4058b7:	or     rdx,rsi
  4058ba:	sete   dil
  4058be:	add    QWORD PTR [r8+rdi*8+0x8],0x1
  4058c4:	or     rax,rsi
  4058c7:	jne    4058dc <UnityAssertEqualNumber@@Base+0x5c>
  4058c9:	xor    eax,eax
  4058cb:	cmp    rbp,r12
  4058ce:	sete   al
  4058d1:	add    QWORD PTR [r8+rax*8+0x18],0x1
  4058d7:	cmp    rbp,r12
  4058da:	jne    4058ed <UnityAssertEqualNumber@@Base+0x6d>
  4058dc:	add    QWORD PTR [rip+0xcee4],0x1        # 4127c8 <__bss_start@@Base+0x674>
  4058e4:	pop    rbx
  4058e5:	pop    r12
  4058e7:	pop    r14
  4058e9:	pop    r15
  4058eb:	pop    rbp
  4058ec:	ret    
  4058ed:	mov    rdi,rcx
  4058f0:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  4058f5:	lea    rdi,[rip+0x6bd0]        # 40c4cc <UnityStrExpected@@Base>
  4058fc:	call   4049b0 <UnityPrint@@Base>
  405901:	mov    rdi,rbp
  405904:	mov    esi,r15d
  405907:	call   404ef0 <UnityPrintNumberByStyle@@Base>
  40590c:	lea    rdi,[rip+0x6bc4]        # 40c4d7 <UnityStrWas@@Base>
  405913:	call   4049b0 <UnityPrint@@Base>
  405918:	mov    rdi,r12
  40591b:	mov    esi,r15d
  40591e:	call   404ef0 <UnityPrintNumberByStyle@@Base>
  405923:	mov    rdi,r14
  405926:	call   4057a0 <UnityAssertBits@@Base+0x1d0>
  40592b:	mov    QWORD PTR [rbx+0x40],0x1
  405933:	add    rbx,0x50
  405937:	mov    esi,0x1
  40593c:	mov    rdi,rbx
  40593f:	call   4031f0 <longjmp@plt>
  405944:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40594e:	xchg   ax,ax

0000000000405950 <UnityAssertEqualIntArray@@Base>:
  405950:	push   rbp
  405951:	push   r15
  405953:	push   r14
  405955:	push   r13
  405957:	push   r12
  405959:	push   rbx
  40595a:	sub    rsp,0x18
  40595e:	add    QWORD PTR [rip+0xce6a],0x1        # 4127d0 <__bss_start@@Base+0x67c>
  405966:	mov    r12,rcx
  405969:	mov    r15d,edx
  40596c:	mov    r14,rsi
  40596f:	lea    r13,[rip+0xce5a]        # 4127d0 <__bss_start@@Base+0x67c>
  405976:	lea    rbp,[rip+0xdea3]        # 413820 <Unity@@Base>
  40597d:	mov    rax,QWORD PTR [rbp+0x48]
  405981:	mov    rcx,QWORD PTR [rbp+0x40]
  405985:	xor    edx,edx
  405987:	mov    rsi,rax
  40598a:	or     rsi,rcx
  40598d:	sete   dl
  405990:	add    QWORD PTR [r13+rdx*8+0x8],0x1
  405996:	or     rax,rcx
  405999:	je     4059a8 <UnityAssertEqualIntArray@@Base+0x58>
  40599b:	add    QWORD PTR [rip+0xce45],0x1        # 4127e8 <__bss_start@@Base+0x694>
  4059a3:	jmp    405c92 <UnityAssertEqualIntArray@@Base+0x342>
  4059a8:	mov    DWORD PTR [rsp+0x4],r9d
  4059ad:	xor    eax,eax
  4059af:	test   r15d,r15d
  4059b2:	setne  al
  4059b5:	add    QWORD PTR [r13+rax*8+0x20],0x1
  4059bb:	test   r15d,r15d
  4059be:	je     405e0a <UnityAssertEqualIntArray@@Base+0x4ba>
  4059c4:	mov    rbx,rdi
  4059c7:	mov    rsi,r14
  4059ca:	mov    QWORD PTR [rsp+0x8],r8
  4059cf:	mov    rdx,r8
  4059d2:	mov    rcx,r12
  4059d5:	call   405e40 <UnityAssertEqualIntArray@@Base+0x4f0>
  4059da:	xor    ecx,ecx
  4059dc:	cmp    eax,0x1
  4059df:	setne  cl
  4059e2:	add    QWORD PTR [r13+rcx*8+0x30],0x1
  4059e8:	cmp    eax,0x1
  4059eb:	jne    4059fa <UnityAssertEqualIntArray@@Base+0xaa>
  4059ed:	add    QWORD PTR [rip+0xce1b],0x1        # 412810 <__bss_start@@Base+0x6bc>
  4059f5:	jmp    405c92 <UnityAssertEqualIntArray@@Base+0x342>
  4059fa:	mov    DWORD PTR [rip+0xc73c],0x0        # 412140 <__data_start@@Base+0x10>
  405a04:	mov    eax,DWORD PTR [rsp+0x4]
  405a08:	and    eax,0xffffff7f
  405a0d:	add    eax,0xffffffef
  405a10:	cmp    eax,0x37
  405a13:	ja     405bff <UnityAssertEqualIntArray@@Base+0x2af>
  405a19:	movabs rcx,0x1000000010001
  405a23:	bt     rcx,rax
  405a27:	jb     405ade <UnityAssertEqualIntArray@@Base+0x18e>
  405a2d:	movabs rcx,0x2000000020002
  405a37:	bt     rcx,rax
  405a3b:	jb     405b6d <UnityAssertEqualIntArray@@Base+0x21d>
  405a41:	movabs rcx,0x80000000800080
  405a4b:	bt     rcx,rax
  405a4f:	jae    405bff <UnityAssertEqualIntArray@@Base+0x2af>
  405a55:	lea    rdi,[rip+0xc6e4]        # 412140 <__data_start@@Base+0x10>
  405a5c:	lea    rsi,[rip+0xb5a5]        # 411008 <UnitySizeMask@@Base+0x4938>
  405a63:	call   407830 <UnityEnd@@Base+0x180>
  405a68:	vmovdqu xmm0,XMMWORD PTR [rip+0xce58]        # 4128c8 <__bss_start@@Base+0x774>
  405a70:	vpcmpeqd xmm1,xmm1,xmm1
  405a74:	vpsubq xmm0,xmm0,xmm1
  405a78:	vmovdqu XMMWORD PTR [rip+0xce48],xmm0        # 4128c8 <__bss_start@@Base+0x774>
  405a80:	mov    eax,r15d
  405a83:	lea    rcx,[rax-0x1]
  405a87:	xor    ebp,ebp
  405a89:	nop    DWORD PTR [rax+0x0]
  405a90:	mov    rdx,QWORD PTR [rbx]
  405a93:	mov    rsi,QWORD PTR [r14]
  405a96:	xor    edi,edi
  405a98:	cmp    rdx,rsi
  405a9b:	sete   dil
  405a9f:	add    QWORD PTR [r13+rdi*8+0x110],0x1
  405aa8:	cmp    rdx,rsi
  405aab:	jne    405ca9 <UnityAssertEqualIntArray@@Base+0x359>
  405ab1:	add    QWORD PTR [rip+0xce37],0x1        # 4128f0 <__bss_start@@Base+0x79c>
  405ab9:	add    rbx,0x8
  405abd:	add    r14,0x8
  405ac1:	xor    edx,edx
  405ac3:	cmp    ecx,ebp
  405ac5:	sete   dl
  405ac8:	add    QWORD PTR [r13+rdx*8+0x100],0x1
  405ad1:	add    rbp,0x1
  405ad5:	cmp    eax,ebp
  405ad7:	jne    405a90 <UnityAssertEqualIntArray@@Base+0x140>
  405ad9:	jmp    405c8a <UnityAssertEqualIntArray@@Base+0x33a>
  405ade:	lea    rdi,[rip+0xc65b]        # 412140 <__data_start@@Base+0x10>
  405ae5:	lea    rsi,[rip+0xb50c]        # 410ff8 <UnitySizeMask@@Base+0x4928>
  405aec:	call   407830 <UnityEnd@@Base+0x180>
  405af1:	vmovdqu xmm0,XMMWORD PTR [rip+0xcd6f]        # 412868 <__bss_start@@Base+0x714>
  405af9:	vpcmpeqd xmm1,xmm1,xmm1
  405afd:	vpsubq xmm0,xmm0,xmm1
  405b01:	vmovdqu XMMWORD PTR [rip+0xcd5f],xmm0        # 412868 <__bss_start@@Base+0x714>
  405b09:	mov    eax,r15d
  405b0c:	lea    rsi,[rax-0x1]
  405b10:	xor    ebp,ebp
  405b12:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405b1c:	nop    DWORD PTR [rax+0x0]
  405b20:	movzx  edx,BYTE PTR [rbx]
  405b23:	movzx  ecx,BYTE PTR [r14]
  405b27:	xor    edi,edi
  405b29:	cmp    dl,cl
  405b2b:	sete   dil
  405b2f:	add    QWORD PTR [r13+rdi*8+0xb0],0x1
  405b38:	cmp    dl,cl
  405b3a:	jne    405cf5 <UnityAssertEqualIntArray@@Base+0x3a5>
  405b40:	add    QWORD PTR [rip+0xcd48],0x1        # 412890 <__bss_start@@Base+0x73c>
  405b48:	add    rbx,0x1
  405b4c:	add    r14,0x1
  405b50:	xor    ecx,ecx
  405b52:	cmp    esi,ebp
  405b54:	sete   cl
  405b57:	add    QWORD PTR [r13+rcx*8+0xa0],0x1
  405b60:	add    rbp,0x1
  405b64:	cmp    eax,ebp
  405b66:	jne    405b20 <UnityAssertEqualIntArray@@Base+0x1d0>
  405b68:	jmp    405c8a <UnityAssertEqualIntArray@@Base+0x33a>
  405b6d:	lea    rdi,[rip+0xc5cc]        # 412140 <__data_start@@Base+0x10>
  405b74:	lea    rsi,[rip+0xb485]        # 411000 <UnitySizeMask@@Base+0x4930>
  405b7b:	call   407830 <UnityEnd@@Base+0x180>
  405b80:	vmovdqu xmm0,XMMWORD PTR [rip+0xcd10]        # 412898 <__bss_start@@Base+0x744>
  405b88:	vpcmpeqd xmm1,xmm1,xmm1
  405b8c:	vpsubq xmm0,xmm0,xmm1
  405b90:	vmovdqu XMMWORD PTR [rip+0xcd00],xmm0        # 412898 <__bss_start@@Base+0x744>
  405b98:	mov    eax,r15d
  405b9b:	lea    rcx,[rax-0x1]
  405b9f:	xor    ebp,ebp
  405ba1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405bab:	nop    DWORD PTR [rax+rax*1+0x0]
  405bb0:	movzx  edx,WORD PTR [rbx]
  405bb3:	movzx  esi,WORD PTR [r14]
  405bb7:	xor    edi,edi
  405bb9:	cmp    dx,si
  405bbc:	sete   dil
  405bc0:	add    QWORD PTR [r13+rdi*8+0xe0],0x1
  405bc9:	cmp    dx,si
  405bcc:	jne    405d40 <UnityAssertEqualIntArray@@Base+0x3f0>
  405bd2:	add    QWORD PTR [rip+0xcce6],0x1        # 4128c0 <__bss_start@@Base+0x76c>
  405bda:	add    rbx,0x2
  405bde:	add    r14,0x2
  405be2:	xor    edx,edx
  405be4:	cmp    ecx,ebp
  405be6:	sete   dl
  405be9:	add    QWORD PTR [r13+rdx*8+0xd0],0x1
  405bf2:	add    rbp,0x1
  405bf6:	cmp    eax,ebp
  405bf8:	jne    405bb0 <UnityAssertEqualIntArray@@Base+0x260>
  405bfa:	jmp    405c8a <UnityAssertEqualIntArray@@Base+0x33a>
  405bff:	mov    QWORD PTR [rsp+0x10],r12
  405c04:	lea    rdi,[rip+0xc535]        # 412140 <__data_start@@Base+0x10>
  405c0b:	lea    rsi,[rip+0xb3de]        # 410ff0 <UnitySizeMask@@Base+0x4920>
  405c12:	call   407830 <UnityEnd@@Base+0x180>
  405c17:	add    QWORD PTR [rip+0xccd9],0x1        # 4128f8 <__bss_start@@Base+0x7a4>
  405c1f:	mov    ebp,r15d
  405c22:	lea    r12,[rbp-0x1]
  405c26:	xor    r15d,r15d
  405c29:	nop    DWORD PTR [rax+0x0]
  405c30:	mov    eax,DWORD PTR [rbx]
  405c32:	mov    ecx,DWORD PTR [r14]
  405c35:	xor    edx,edx
  405c37:	cmp    eax,ecx
  405c39:	sete   dl
  405c3c:	add    QWORD PTR [r13+rdx*8+0x138],0x1
  405c45:	cmp    eax,ecx
  405c47:	jne    405db5 <UnityAssertEqualIntArray@@Base+0x465>
  405c4d:	add    QWORD PTR [rip+0xccc3],0x1        # 412918 <__bss_start@@Base+0x7c4>
  405c55:	add    rbx,0x4
  405c59:	add    r14,0x4
  405c5d:	lea    rdi,[rip+0xc4dc]        # 412140 <__data_start@@Base+0x10>
  405c64:	lea    rsi,[rip+0xb385]        # 410ff0 <UnitySizeMask@@Base+0x4920>
  405c6b:	call   407830 <UnityEnd@@Base+0x180>
  405c70:	xor    eax,eax
  405c72:	cmp    r12d,r15d
  405c75:	sete   al
  405c78:	add    QWORD PTR [r13+rax*8+0x128],0x1
  405c81:	add    r15,0x1
  405c85:	cmp    ebp,r15d
  405c88:	jne    405c30 <UnityAssertEqualIntArray@@Base+0x2e0>
  405c8a:	add    QWORD PTR [rip+0xcc8e],0x1        # 412920 <__bss_start@@Base+0x7cc>
  405c92:	add    QWORD PTR [rip+0xcc8e],0x1        # 412928 <__bss_start@@Base+0x7d4>
  405c9a:	add    rsp,0x18
  405c9e:	pop    rbx
  405c9f:	pop    r12
  405ca1:	pop    r13
  405ca3:	pop    r14
  405ca5:	pop    r15
  405ca7:	pop    rbp
  405ca8:	ret    
  405ca9:	mov    rdi,QWORD PTR [rsp+0x8]
  405cae:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  405cb3:	lea    rdi,[rip+0x6828]        # 40c4e2 <UnityStrElement@@Base>
  405cba:	call   4049b0 <UnityPrint@@Base>
  405cbf:	mov    rdi,rbp
  405cc2:	call   405140 <UnityPrintNumberUnsigned@@Base>
  405cc7:	lea    rdi,[rip+0x67fe]        # 40c4cc <UnityStrExpected@@Base>
  405cce:	call   4049b0 <UnityPrint@@Base>
  405cd3:	mov    rdi,QWORD PTR [rbx]
  405cd6:	mov    ebx,DWORD PTR [rsp+0x4]
  405cda:	mov    esi,ebx
  405cdc:	call   404ef0 <UnityPrintNumberByStyle@@Base>
  405ce1:	lea    rdi,[rip+0x67ef]        # 40c4d7 <UnityStrWas@@Base>
  405ce8:	call   4049b0 <UnityPrint@@Base>
  405ced:	mov    rdi,QWORD PTR [r14]
  405cf0:	jmp    405d89 <UnityAssertEqualIntArray@@Base+0x439>
  405cf5:	mov    rdi,QWORD PTR [rsp+0x8]
  405cfa:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  405cff:	lea    rdi,[rip+0x67dc]        # 40c4e2 <UnityStrElement@@Base>
  405d06:	call   4049b0 <UnityPrint@@Base>
  405d0b:	mov    rdi,rbp
  405d0e:	call   405140 <UnityPrintNumberUnsigned@@Base>
  405d13:	lea    rdi,[rip+0x67b2]        # 40c4cc <UnityStrExpected@@Base>
  405d1a:	call   4049b0 <UnityPrint@@Base>
  405d1f:	movsx  rdi,BYTE PTR [rbx]
  405d23:	mov    ebx,DWORD PTR [rsp+0x4]
  405d27:	mov    esi,ebx
  405d29:	call   404ef0 <UnityPrintNumberByStyle@@Base>
  405d2e:	lea    rdi,[rip+0x67a2]        # 40c4d7 <UnityStrWas@@Base>
  405d35:	call   4049b0 <UnityPrint@@Base>
  405d3a:	movsx  rdi,BYTE PTR [r14]
  405d3e:	jmp    405d89 <UnityAssertEqualIntArray@@Base+0x439>
  405d40:	mov    rdi,QWORD PTR [rsp+0x8]
  405d45:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  405d4a:	lea    rdi,[rip+0x6791]        # 40c4e2 <UnityStrElement@@Base>
  405d51:	call   4049b0 <UnityPrint@@Base>
  405d56:	mov    rdi,rbp
  405d59:	call   405140 <UnityPrintNumberUnsigned@@Base>
  405d5e:	lea    rdi,[rip+0x6767]        # 40c4cc <UnityStrExpected@@Base>
  405d65:	call   4049b0 <UnityPrint@@Base>
  405d6a:	movsx  rdi,WORD PTR [rbx]
  405d6e:	mov    ebx,DWORD PTR [rsp+0x4]
  405d72:	mov    esi,ebx
  405d74:	call   404ef0 <UnityPrintNumberByStyle@@Base>
  405d79:	lea    rdi,[rip+0x6757]        # 40c4d7 <UnityStrWas@@Base>
  405d80:	call   4049b0 <UnityPrint@@Base>
  405d85:	movsx  rdi,WORD PTR [r14]
  405d89:	mov    esi,ebx
  405d8b:	call   404ef0 <UnityPrintNumberByStyle@@Base>
  405d90:	mov    rdi,r12
  405d93:	call   4057a0 <UnityAssertBits@@Base+0x1d0>
  405d98:	lea    rdi,[rip+0xda81]        # 413820 <Unity@@Base>
  405d9f:	mov    QWORD PTR [rdi+0x40],0x1
  405da7:	add    rdi,0x50
  405dab:	mov    esi,0x1
  405db0:	call   4031f0 <longjmp@plt>
  405db5:	mov    rdi,QWORD PTR [rsp+0x8]
  405dba:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  405dbf:	lea    rdi,[rip+0x671c]        # 40c4e2 <UnityStrElement@@Base>
  405dc6:	call   4049b0 <UnityPrint@@Base>
  405dcb:	mov    rdi,r15
  405dce:	call   405140 <UnityPrintNumberUnsigned@@Base>
  405dd3:	lea    rdi,[rip+0x66f2]        # 40c4cc <UnityStrExpected@@Base>
  405dda:	call   4049b0 <UnityPrint@@Base>
  405ddf:	movsxd rdi,DWORD PTR [rbx]
  405de2:	mov    ebx,DWORD PTR [rsp+0x4]
  405de6:	mov    esi,ebx
  405de8:	call   404ef0 <UnityPrintNumberByStyle@@Base>
  405ded:	lea    rdi,[rip+0x66e3]        # 40c4d7 <UnityStrWas@@Base>
  405df4:	call   4049b0 <UnityPrint@@Base>
  405df9:	movsxd rdi,DWORD PTR [r14]
  405dfc:	mov    esi,ebx
  405dfe:	call   404ef0 <UnityPrintNumberByStyle@@Base>
  405e03:	mov    rdi,QWORD PTR [rsp+0x10]
  405e08:	jmp    405d93 <UnityAssertEqualIntArray@@Base+0x443>
  405e0a:	mov    rdi,r8
  405e0d:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  405e12:	lea    rdi,[rip+0x6727]        # 40c540 <UnityStrPointless@@Base>
  405e19:	call   4049b0 <UnityPrint@@Base>
  405e1e:	mov    rdi,r12
  405e21:	call   4057a0 <UnityAssertBits@@Base+0x1d0>
  405e26:	mov    QWORD PTR [rbp+0x40],0x1
  405e2e:	add    rbp,0x50
  405e32:	mov    esi,0x1
  405e37:	mov    rdi,rbp
  405e3a:	call   4031f0 <longjmp@plt>
  405e3f:	nop
  405e40:	push   r14
  405e42:	push   rbx
  405e43:	push   rax
  405e44:	mov    r14,rcx
  405e47:	lea    rax,[rip+0xcae2]        # 412930 <__bss_start@@Base+0x7dc>
  405e4e:	add    QWORD PTR [rip+0xcada],0x1        # 412930 <__bss_start@@Base+0x7dc>
  405e56:	xor    ecx,ecx
  405e58:	mov    rbx,rdi
  405e5b:	or     rbx,rsi
  405e5e:	setne  cl
  405e61:	add    QWORD PTR [rax+rcx*8+0x8],0x1
  405e67:	mov    rcx,rdi
  405e6a:	or     rcx,rsi
  405e6d:	jne    405e7e <UnityAssertEqualIntArray@@Base+0x52e>
  405e6f:	add    QWORD PTR [rip+0xcad1],0x1        # 412948 <__bss_start@@Base+0x7f4>
  405e77:	mov    eax,0x1
  405e7c:	jmp    405eae <UnityAssertEqualIntArray@@Base+0x55e>
  405e7e:	xor    ecx,ecx
  405e80:	test   rdi,rdi
  405e83:	setne  cl
  405e86:	add    QWORD PTR [rax+rcx*8+0x20],0x1
  405e8c:	test   rdi,rdi
  405e8f:	je     405ebe <UnityAssertEqualIntArray@@Base+0x56e>
  405e91:	xor    ecx,ecx
  405e93:	test   rsi,rsi
  405e96:	setne  cl
  405e99:	add    QWORD PTR [rax+rcx*8+0x30],0x1
  405e9f:	test   rsi,rsi
  405ea2:	je     405ecf <UnityAssertEqualIntArray@@Base+0x57f>
  405ea4:	add    QWORD PTR [rip+0xcac4],0x1        # 412970 <__bss_start@@Base+0x81c>
  405eac:	xor    eax,eax
  405eae:	add    QWORD PTR [rip+0xcac2],0x1        # 412978 <__bss_start@@Base+0x824>
  405eb6:	add    rsp,0x8
  405eba:	pop    rbx
  405ebb:	pop    r14
  405ebd:	ret    
  405ebe:	mov    rdi,rdx
  405ec1:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  405ec6:	lea    rdi,[rip+0x66b3]        # 40c580 <UnityStrNullPointerForExpected@@Base>
  405ecd:	jmp    405ede <UnityAssertEqualIntArray@@Base+0x58e>
  405ecf:	mov    rdi,rdx
  405ed2:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  405ed7:	lea    rdi,[rip+0x66c2]        # 40c5a0 <UnityStrNullPointerForActual@@Base>
  405ede:	call   4049b0 <UnityPrint@@Base>
  405ee3:	mov    rdi,r14
  405ee6:	call   4057a0 <UnityAssertBits@@Base+0x1d0>
  405eeb:	lea    rdi,[rip+0xd92e]        # 413820 <Unity@@Base>
  405ef2:	mov    QWORD PTR [rdi+0x40],0x1
  405efa:	add    rdi,0x50
  405efe:	mov    esi,0x1
  405f03:	call   4031f0 <longjmp@plt>
  405f08:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405f10 <UnityAssertEqualFloatArray@@Base>:
  405f10:	push   rbp
  405f11:	push   r15
  405f13:	push   r14
  405f15:	push   r13
  405f17:	push   r12
  405f19:	push   rbx
  405f1a:	push   rax
  405f1b:	add    QWORD PTR [rip+0xca5d],0x1        # 412980 <__bss_start@@Base+0x82c>
  405f23:	mov    ebp,edx
  405f25:	mov    r13,rsi
  405f28:	mov    rbx,rdi
  405f2b:	lea    r14,[rip+0xca4e]        # 412980 <__bss_start@@Base+0x82c>
  405f32:	lea    r12,[rip+0xd8e7]        # 413820 <Unity@@Base>
  405f39:	mov    rax,QWORD PTR [r12+0x48]
  405f3e:	mov    rdi,QWORD PTR [r12+0x40]
  405f43:	xor    edx,edx
  405f45:	mov    rsi,rax
  405f48:	or     rsi,rdi
  405f4b:	sete   dl
  405f4e:	add    QWORD PTR [r14+rdx*8+0x8],0x1
  405f54:	or     rax,rdi
  405f57:	je     405f66 <UnityAssertEqualFloatArray@@Base+0x56>
  405f59:	add    QWORD PTR [rip+0xca37],0x1        # 412998 <__bss_start@@Base+0x844>
  405f61:	jmp    406085 <UnityAssertEqualFloatArray@@Base+0x175>
  405f66:	mov    r15,r8
  405f69:	xor    eax,eax
  405f6b:	test   ebp,ebp
  405f6d:	setne  al
  405f70:	add    QWORD PTR [r14+rax*8+0x20],0x1
  405f76:	test   ebp,ebp
  405f78:	je     4060e7 <UnityAssertEqualFloatArray@@Base+0x1d7>
  405f7e:	mov    rdi,rbx
  405f81:	mov    rsi,r13
  405f84:	mov    rdx,r15
  405f87:	mov    QWORD PTR [rsp],rcx
  405f8b:	call   405e40 <UnityAssertEqualIntArray@@Base+0x4f0>
  405f90:	xor    ecx,ecx
  405f92:	cmp    eax,0x1
  405f95:	setne  cl
  405f98:	add    QWORD PTR [r14+rcx*8+0x30],0x1
  405f9e:	cmp    eax,0x1
  405fa1:	jne    405fb0 <UnityAssertEqualFloatArray@@Base+0xa0>
  405fa3:	add    QWORD PTR [rip+0xca15],0x1        # 4129c0 <__bss_start@@Base+0x86c>
  405fab:	jmp    406085 <UnityAssertEqualFloatArray@@Base+0x175>
  405fb0:	add    QWORD PTR [rip+0xca10],0x1        # 4129c8 <__bss_start@@Base+0x874>
  405fb8:	mov    eax,ebp
  405fba:	lea    rcx,[rax-0x1]
  405fbe:	xor    ebp,ebp
  405fc0:	vxorps xmm0,xmm0,xmm0
  405fc4:	vmovss xmm1,DWORD PTR [rip+0x64b4]        # 40c480 <_IO_stdin_used@@Base+0x480>
  405fcc:	nop    DWORD PTR [rax+0x0]
  405fd0:	vmovss xmm2,DWORD PTR [rbx+rbp*4]
  405fd5:	vsubss xmm2,xmm2,DWORD PTR [r13+rbp*4+0x0]
  405fdc:	xor    edx,edx
  405fde:	vucomiss xmm0,xmm2
  405fe2:	setbe  dl
  405fe5:	add    QWORD PTR [r14+rdx*8+0x58],0x1
  405feb:	vucomiss xmm0,xmm2
  405fef:	jbe    405ffd <UnityAssertEqualFloatArray@@Base+0xed>
  405ff1:	add    QWORD PTR [rip+0xc9ef],0x1        # 4129e8 <__bss_start@@Base+0x894>
  405ff9:	vsubss xmm2,xmm0,xmm2
  405ffd:	vmulss xmm3,xmm1,DWORD PTR [rbx+rbp*4]
  406002:	xor    edx,edx
  406004:	vucomiss xmm0,xmm3
  406008:	setbe  dl
  40600b:	add    QWORD PTR [r14+rdx*8+0x70],0x1
  406011:	vucomiss xmm0,xmm3
  406015:	jbe    406023 <UnityAssertEqualFloatArray@@Base+0x113>
  406017:	add    QWORD PTR [rip+0xc9e1],0x1        # 412a00 <__bss_start@@Base+0x8ac>
  40601f:	vsubss xmm3,xmm0,xmm3
  406023:	vmulss xmm4,xmm2,xmm0
  406027:	vcmpeqss xmm5,xmm4,xmm0
  40602c:	vmovd  edx,xmm5
  406030:	and    edx,0x1
  406033:	add    QWORD PTR [r14+rdx*8+0x88],0x1
  40603c:	vucomiss xmm4,xmm0
  406040:	jne    40609c <UnityAssertEqualFloatArray@@Base+0x18c>
  406042:	jp     40609c <UnityAssertEqualFloatArray@@Base+0x18c>
  406044:	xor    edx,edx
  406046:	vucomiss xmm2,xmm3
  40604a:	setbe  dl
  40604d:	add    QWORD PTR [r14+rdx*8+0x98],0x1
  406056:	vucomiss xmm2,xmm3
  40605a:	ja     40609c <UnityAssertEqualFloatArray@@Base+0x18c>
  40605c:	add    QWORD PTR [rip+0xc9c4],0x1        # 412a28 <__bss_start@@Base+0x8d4>
  406064:	xor    edx,edx
  406066:	cmp    ecx,ebp
  406068:	sete   dl
  40606b:	add    QWORD PTR [r14+rdx*8+0x48],0x1
  406071:	add    rbp,0x1
  406075:	cmp    eax,ebp
  406077:	jne    405fd0 <UnityAssertEqualFloatArray@@Base+0xc0>
  40607d:	add    QWORD PTR [rip+0xc9ab],0x1        # 412a30 <__bss_start@@Base+0x8dc>
  406085:	add    QWORD PTR [rip+0xc9ab],0x1        # 412a38 <__bss_start@@Base+0x8e4>
  40608d:	add    rsp,0x8
  406091:	pop    rbx
  406092:	pop    r12
  406094:	pop    r13
  406096:	pop    r14
  406098:	pop    r15
  40609a:	pop    rbp
  40609b:	ret    
  40609c:	mov    rdi,r15
  40609f:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  4060a4:	lea    rdi,[rip+0x6437]        # 40c4e2 <UnityStrElement@@Base>
  4060ab:	call   4049b0 <UnityPrint@@Base>
  4060b0:	mov    rdi,rbp
  4060b3:	call   405140 <UnityPrintNumberUnsigned@@Base>
  4060b8:	lea    rdi,[rip+0x6461]        # 40c520 <UnityStrDelta@@Base>
  4060bf:	call   4049b0 <UnityPrint@@Base>
  4060c4:	mov    rdi,QWORD PTR [rsp]
  4060c8:	call   4057a0 <UnityAssertBits@@Base+0x1d0>
  4060cd:	mov    QWORD PTR [r12+0x40],0x1
  4060d6:	add    r12,0x50
  4060da:	mov    esi,0x1
  4060df:	mov    rdi,r12
  4060e2:	call   4031f0 <longjmp@plt>
  4060e7:	mov    rdi,r15
  4060ea:	mov    rbx,rcx
  4060ed:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  4060f2:	lea    rdi,[rip+0x6447]        # 40c540 <UnityStrPointless@@Base>
  4060f9:	call   4049b0 <UnityPrint@@Base>
  4060fe:	mov    rdi,rbx
  406101:	jmp    4060c8 <UnityAssertEqualFloatArray@@Base+0x1b8>
  406103:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40610d:	nop    DWORD PTR [rax]

0000000000406110 <UnityAssertFloatsWithin@@Base>:
  406110:	push   r14
  406112:	push   rbx
  406113:	push   rax
  406114:	add    QWORD PTR [rip+0xc924],0x1        # 412a40 <__bss_start@@Base+0x8ec>
  40611c:	mov    r14,rdi
  40611f:	lea    r8,[rip+0xc91a]        # 412a40 <__bss_start@@Base+0x8ec>
  406126:	lea    rbx,[rip+0xd6f3]        # 413820 <Unity@@Base>
  40612d:	mov    rax,QWORD PTR [rbx+0x48]
  406131:	mov    rdx,QWORD PTR [rbx+0x40]
  406135:	xor    edi,edi
  406137:	mov    rcx,rax
  40613a:	or     rcx,rdx
  40613d:	sete   dil
  406141:	add    QWORD PTR [r8+rdi*8+0x8],0x1
  406147:	or     rax,rdx
  40614a:	je     406159 <UnityAssertFloatsWithin@@Base+0x49>
  40614c:	add    QWORD PTR [rip+0xc904],0x1        # 412a58 <__bss_start@@Base+0x904>
  406154:	jmp    4061e6 <UnityAssertFloatsWithin@@Base+0xd6>
  406159:	vsubss xmm1,xmm2,xmm1
  40615d:	vxorps xmm2,xmm2,xmm2
  406161:	xor    eax,eax
  406163:	vucomiss xmm2,xmm1
  406167:	setbe  al
  40616a:	add    QWORD PTR [r8+rax*8+0x20],0x1
  406170:	vucomiss xmm2,xmm1
  406174:	jbe    406182 <UnityAssertFloatsWithin@@Base+0x72>
  406176:	add    QWORD PTR [rip+0xc8f2],0x1        # 412a70 <__bss_start@@Base+0x91c>
  40617e:	vsubss xmm1,xmm2,xmm1
  406182:	xor    eax,eax
  406184:	vucomiss xmm2,xmm0
  406188:	setbe  al
  40618b:	add    QWORD PTR [r8+rax*8+0x38],0x1
  406191:	vucomiss xmm2,xmm0
  406195:	jbe    4061a7 <UnityAssertFloatsWithin@@Base+0x97>
  406197:	add    QWORD PTR [rip+0xc8e9],0x1        # 412a88 <__bss_start@@Base+0x934>
  40619f:	vxorps xmm2,xmm2,xmm2
  4061a3:	vsubss xmm0,xmm2,xmm0
  4061a7:	vxorps xmm2,xmm2,xmm2
  4061ab:	vmulss xmm3,xmm1,xmm2
  4061af:	vcmpeqss xmm4,xmm3,xmm2
  4061b4:	vmovd  eax,xmm4
  4061b8:	and    eax,0x1
  4061bb:	add    QWORD PTR [r8+rax*8+0x50],0x1
  4061c1:	vucomiss xmm3,xmm2
  4061c5:	jne    4061f6 <UnityAssertFloatsWithin@@Base+0xe6>
  4061c7:	jp     4061f6 <UnityAssertFloatsWithin@@Base+0xe6>
  4061c9:	xor    eax,eax
  4061cb:	vucomiss xmm1,xmm0
  4061cf:	setbe  al
  4061d2:	add    QWORD PTR [r8+rax*8+0x60],0x1
  4061d8:	vucomiss xmm1,xmm0
  4061dc:	ja     4061f6 <UnityAssertFloatsWithin@@Base+0xe6>
  4061de:	add    QWORD PTR [rip+0xc8ca],0x1        # 412ab0 <__bss_start@@Base+0x95c>
  4061e6:	add    QWORD PTR [rip+0xc8ca],0x1        # 412ab8 <__bss_start@@Base+0x964>
  4061ee:	add    rsp,0x8
  4061f2:	pop    rbx
  4061f3:	pop    r14
  4061f5:	ret    
  4061f6:	mov    rdi,rsi
  4061f9:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  4061fe:	lea    rdi,[rip+0x631b]        # 40c520 <UnityStrDelta@@Base>
  406205:	call   4049b0 <UnityPrint@@Base>
  40620a:	mov    rdi,r14
  40620d:	call   4057a0 <UnityAssertBits@@Base+0x1d0>
  406212:	mov    QWORD PTR [rbx+0x40],0x1
  40621a:	add    rbx,0x50
  40621e:	mov    esi,0x1
  406223:	mov    rdi,rbx
  406226:	call   4031f0 <longjmp@plt>
  40622b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406230 <UnityAssertFloatSpecial@@Base>:
  406230:	push   rbp
  406231:	push   r15
  406233:	push   r14
  406235:	push   r13
  406237:	push   r12
  406239:	push   rbx
  40623a:	sub    rsp,0x48
  40623e:	mov    ebx,edx
  406240:	mov    r12,rsi
  406243:	lea    r13,[rip+0xc876]        # 412ac0 <__bss_start@@Base+0x96c>
  40624a:	add    QWORD PTR [rip+0xc86e],0x1        # 412ac0 <__bss_start@@Base+0x96c>
  406252:	vmovups ymm1,YMMWORD PTR [rip+0xad76]        # 410fd0 <UnitySizeMask@@Base+0x4900>
  40625a:	mov    ebp,edx
  40625c:	and    ebp,0x1
  40625f:	sete   r14b
  406263:	lea    r15,[rip+0xd5b6]        # 413820 <Unity@@Base>
  40626a:	mov    rax,QWORD PTR [r15+0x48]
  40626e:	mov    rcx,QWORD PTR [r15+0x40]
  406272:	xor    edx,edx
  406274:	mov    rsi,rax
  406277:	or     rsi,rcx
  40627a:	sete   dl
  40627d:	add    QWORD PTR [r13+rdx*8+0x8],0x1
  406283:	or     rax,rcx
  406286:	vmovups YMMWORD PTR [rsp+0x20],ymm1
  40628c:	je     40629a <UnityAssertFloatSpecial@@Base+0x6a>
  40628e:	lea    rax,[rip+0xc843]        # 412ad8 <__bss_start@@Base+0x984>
  406295:	jmp    406422 <UnityAssertFloatSpecial@@Base+0x1f2>
  40629a:	mov    DWORD PTR [rip+0xbea0],0x0        # 412144 <__data_start@@Base+0x14>
  4062a4:	cmp    ebx,0x7
  4062a7:	mov    QWORD PTR [rsp+0x18],rdi
  4062ac:	ja     406440 <UnityAssertFloatSpecial@@Base+0x210>
  4062b2:	vmovaps XMMWORD PTR [rsp],xmm0
  4062b7:	mov    eax,ebx
  4062b9:	shr    ebx,1
  4062bb:	lea    rcx,[rip+0x61ce]        # 40c490 <_IO_stdin_used@@Base+0x490>
  4062c2:	movsxd rax,DWORD PTR [rcx+rax*4]
  4062c6:	add    rax,rcx
  4062c9:	jmp    rax
  4062cb:	lea    rdi,[rip+0xbe72]        # 412144 <__data_start@@Base+0x14>
  4062d2:	lea    rsi,[rip+0xad3f]        # 411018 <UnitySizeMask@@Base+0x4948>
  4062d9:	vzeroupper 
  4062dc:	call   407830 <UnityEnd@@Base+0x180>
  4062e1:	add    QWORD PTR [rip+0xc83f],0x1        # 412b28 <__bss_start@@Base+0x9d4>
  4062e9:	vbroadcastss xmm0,DWORD PTR [rip+0x6192]        # 40c484 <_IO_stdin_used@@Base+0x484>
  4062f2:	vmovaps xmm1,XMMWORD PTR [rsp]
  4062f7:	vandps xmm0,xmm1,xmm0
  4062fb:	vucomiss xmm0,DWORD PTR [rip+0x6185]        # 40c488 <_IO_stdin_used@@Base+0x488>
  406303:	setae  al
  406306:	vxorps xmm0,xmm0,xmm0
  40630a:	vucomiss xmm1,xmm0
  40630e:	jmp    4063fa <UnityAssertFloatSpecial@@Base+0x1ca>
  406313:	lea    rdi,[rip+0xbe2a]        # 412144 <__data_start@@Base+0x14>
  40631a:	lea    rsi,[rip+0xad07]        # 411028 <UnitySizeMask@@Base+0x4958>
  406321:	vzeroupper 
  406324:	call   407830 <UnityEnd@@Base+0x180>
  406329:	add    QWORD PTR [rip+0xc807],0x1        # 412b38 <__bss_start@@Base+0x9e4>
  406331:	vmovaps xmm0,XMMWORD PTR [rsp]
  406336:	vucomiss xmm0,xmm0
  40633a:	setp   r14b
  40633e:	jmp    406401 <UnityAssertFloatSpecial@@Base+0x1d1>
  406343:	lea    rdi,[rip+0xbdfa]        # 412144 <__data_start@@Base+0x14>
  40634a:	lea    rsi,[rip+0xacdf]        # 411030 <UnitySizeMask@@Base+0x4960>
  406351:	vzeroupper 
  406354:	call   407830 <UnityEnd@@Base+0x180>
  406359:	vbroadcastss xmm0,DWORD PTR [rip+0x6122]        # 40c484 <_IO_stdin_used@@Base+0x484>
  406362:	vmovaps xmm1,XMMWORD PTR [rsp]
  406367:	vandps xmm0,xmm1,xmm0
  40636b:	vmovmskps eax,xmm1
  40636f:	and    eax,0x1
  406372:	add    eax,eax
  406374:	xor    eax,0x2
  406377:	add    eax,0xffffffff
  40637a:	xor    ecx,ecx
  40637c:	vucomiss xmm0,DWORD PTR [rip+0x6104]        # 40c488 <_IO_stdin_used@@Base+0x488>
  406384:	cmovae ecx,eax
  406387:	xor    eax,eax
  406389:	vucomiss xmm1,xmm1
  40638d:	setp   al
  406390:	xor    edx,edx
  406392:	mov    esi,ecx
  406394:	or     esi,eax
  406396:	sete   dl
  406399:	add    QWORD PTR [r13+rdx*8+0x80],0x1
  4063a2:	or     ecx,eax
  4063a4:	je     40646e <UnityAssertFloatSpecial@@Base+0x23e>
  4063aa:	add    QWORD PTR [rip+0xc79e],0x1        # 412b50 <__bss_start@@Base+0x9fc>
  4063b2:	xor    r14d,r14d
  4063b5:	jmp    406401 <UnityAssertFloatSpecial@@Base+0x1d1>
  4063b7:	lea    rdi,[rip+0xbd86]        # 412144 <__data_start@@Base+0x14>
  4063be:	lea    rsi,[rip+0xac5b]        # 411020 <UnitySizeMask@@Base+0x4950>
  4063c5:	vzeroupper 
  4063c8:	call   407830 <UnityEnd@@Base+0x180>
  4063cd:	add    QWORD PTR [rip+0xc75b],0x1        # 412b30 <__bss_start@@Base+0x9dc>
  4063d5:	vbroadcastss xmm0,DWORD PTR [rip+0x60a6]        # 40c484 <_IO_stdin_used@@Base+0x484>
  4063de:	vmovaps xmm1,XMMWORD PTR [rsp]
  4063e3:	vandps xmm0,xmm1,xmm0
  4063e7:	vucomiss xmm0,DWORD PTR [rip+0x6099]        # 40c488 <_IO_stdin_used@@Base+0x488>
  4063ef:	setae  al
  4063f2:	vxorps xmm0,xmm0,xmm0
  4063f6:	vucomiss xmm0,xmm1
  4063fa:	seta   r14b
  4063fe:	and    r14b,al
  406401:	movzx  eax,r14b
  406405:	xor    ecx,ecx
  406407:	cmp    rax,rbp
  40640a:	sete   cl
  40640d:	add    QWORD PTR [r13+rcx*8+0xa8],0x1
  406416:	cmp    rax,rbp
  406419:	jne    40647b <UnityAssertFloatSpecial@@Base+0x24b>
  40641b:	lea    rax,[rip+0xc786]        # 412ba8 <__bss_start@@Base+0xa54>
  406422:	add    QWORD PTR [rax],0x1
  406426:	add    QWORD PTR [rip+0xc782],0x1        # 412bb0 <__bss_start@@Base+0xa5c>
  40642e:	add    rsp,0x48
  406432:	pop    rbx
  406433:	pop    r12
  406435:	pop    r13
  406437:	pop    r14
  406439:	pop    r15
  40643b:	pop    rbp
  40643c:	vzeroupper 
  40643f:	ret    
  406440:	lea    rdi,[rip+0xbcfd]        # 412144 <__data_start@@Base+0x14>
  406447:	lea    rsi,[rip+0xabc2]        # 411010 <UnitySizeMask@@Base+0x4940>
  40644e:	vzeroupper 
  406451:	call   407830 <UnityEnd@@Base+0x180>
  406456:	add    QWORD PTR [rip+0xc702],0x1        # 412b60 <__bss_start@@Base+0xa0c>
  40645e:	lea    rax,[rip+0x619b]        # 40c600 <UnityStrInvalidFloatTrait@@Base>
  406465:	mov    QWORD PTR [rsp+0x20],rax
  40646a:	xor    ebx,ebx
  40646c:	jmp    406401 <UnityAssertFloatSpecial@@Base+0x1d1>
  40646e:	add    QWORD PTR [rip+0xc6e2],0x1        # 412b58 <__bss_start@@Base+0xa04>
  406476:	mov    r14b,0x1
  406479:	jmp    406401 <UnityAssertFloatSpecial@@Base+0x1d1>
  40647b:	xor    r14d,r14d
  40647e:	test   ebp,ebp
  406480:	sete   r14b
  406484:	mov    rdi,r12
  406487:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  40648c:	lea    rdi,[rip+0x6039]        # 40c4cc <UnityStrExpected@@Base>
  406493:	call   4049b0 <UnityPrint@@Base>
  406498:	add    QWORD PTR [r13+r14*8+0xb8],0x1
  4064a1:	test   ebp,ebp
  4064a3:	jne    4064b9 <UnityAssertFloatSpecial@@Base+0x289>
  4064a5:	add    QWORD PTR [rip+0xc6db],0x1        # 412b88 <__bss_start@@Base+0xa34>
  4064ad:	lea    rdi,[rip+0x6105]        # 40c5b9 <UnityStrNot@@Base>
  4064b4:	call   4049b0 <UnityPrint@@Base>
  4064b9:	xor    r14d,r14d
  4064bc:	test   ebp,ebp
  4064be:	sete   r14b
  4064c2:	mov    rbx,QWORD PTR [rsp+rbx*8+0x20]
  4064c7:	mov    rdi,rbx
  4064ca:	call   4049b0 <UnityPrint@@Base>
  4064cf:	lea    rdi,[rip+0x6001]        # 40c4d7 <UnityStrWas@@Base>
  4064d6:	call   4049b0 <UnityPrint@@Base>
  4064db:	add    QWORD PTR [r13+r14*8+0xd0],0x1
  4064e4:	test   ebp,ebp
  4064e6:	je     4064fc <UnityAssertFloatSpecial@@Base+0x2cc>
  4064e8:	add    QWORD PTR [rip+0xc6b0],0x1        # 412ba0 <__bss_start@@Base+0xa4c>
  4064f0:	lea    rdi,[rip+0x60c2]        # 40c5b9 <UnityStrNot@@Base>
  4064f7:	call   4049b0 <UnityPrint@@Base>
  4064fc:	mov    rdi,rbx
  4064ff:	call   4049b0 <UnityPrint@@Base>
  406504:	mov    rdi,QWORD PTR [rsp+0x18]
  406509:	call   4057a0 <UnityAssertBits@@Base+0x1d0>
  40650e:	mov    QWORD PTR [r15+0x40],0x1
  406516:	add    r15,0x50
  40651a:	mov    esi,0x1
  40651f:	mov    rdi,r15
  406522:	call   4031f0 <longjmp@plt>
  406527:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406530 <UnityAssertNumbersWithin@@Base>:
  406530:	push   rbp
  406531:	push   r15
  406533:	push   r14
  406535:	push   r13
  406537:	push   r12
  406539:	push   rbx
  40653a:	push   rax
  40653b:	add    QWORD PTR [rip+0xc67d],0x1        # 412bc0 <__bss_start@@Base+0xa6c>
  406543:	mov    r14,rcx
  406546:	mov    r12,rdx
  406549:	mov    rbp,rsi
  40654c:	mov    r13,rdi
  40654f:	lea    rax,[rip+0xc66a]        # 412bc0 <__bss_start@@Base+0xa6c>
  406556:	lea    rbx,[rip+0xd2c3]        # 413820 <Unity@@Base>
  40655d:	mov    rcx,QWORD PTR [rbx+0x48]
  406561:	mov    rdx,QWORD PTR [rbx+0x40]
  406565:	xor    esi,esi
  406567:	mov    rdi,rcx
  40656a:	or     rdi,rdx
  40656d:	sete   sil
  406571:	add    QWORD PTR [rax+rsi*8+0x8],0x1
  406577:	or     rcx,rdx
  40657a:	jne    40660b <UnityAssertNumbersWithin@@Base+0xdb>
  406580:	mov    r15d,r9d
  406583:	xor    ecx,ecx
  406585:	test   r15b,0x10
  406589:	sete   cl
  40658c:	add    QWORD PTR [rax+rcx*8+0x18],0x1
  406592:	xor    ecx,ecx
  406594:	test   r15b,0x10
  406598:	je     4065b8 <UnityAssertNumbersWithin@@Base+0x88>
  40659a:	cmp    r12,rbp
  40659d:	setle  cl
  4065a0:	add    QWORD PTR [rax+rcx*8+0x28],0x1
  4065a6:	mov    rcx,r12
  4065a9:	sub    rcx,rbp
  4065ac:	jle    4065d6 <UnityAssertNumbersWithin@@Base+0xa6>
  4065ae:	add    QWORD PTR [rip+0xc642],0x1        # 412bf8 <__bss_start@@Base+0xaa4>
  4065b6:	jmp    4065ee <UnityAssertNumbersWithin@@Base+0xbe>
  4065b8:	cmp    r12,rbp
  4065bb:	setbe  cl
  4065be:	add    QWORD PTR [rax+rcx*8+0x48],0x1
  4065c4:	mov    rcx,r12
  4065c7:	sub    rcx,rbp
  4065ca:	jbe    4065e0 <UnityAssertNumbersWithin@@Base+0xb0>
  4065cc:	add    QWORD PTR [rip+0xc644],0x1        # 412c18 <__bss_start@@Base+0xac4>
  4065d4:	jmp    4065ee <UnityAssertNumbersWithin@@Base+0xbe>
  4065d6:	add    QWORD PTR [rip+0xc622],0x1        # 412c00 <__bss_start@@Base+0xaac>
  4065de:	jmp    4065e8 <UnityAssertNumbersWithin@@Base+0xb8>
  4065e0:	add    QWORD PTR [rip+0xc638],0x1        # 412c20 <__bss_start@@Base+0xacc>
  4065e8:	mov    rcx,rbp
  4065eb:	sub    rcx,r12
  4065ee:	xor    edx,edx
  4065f0:	xor    esi,esi
  4065f2:	cmp    rcx,r13
  4065f5:	setbe  dl
  4065f8:	seta   sil
  4065fc:	mov    QWORD PTR [rbx+0x40],rsi
  406600:	add    QWORD PTR [rax+rdx*8+0x68],0x1
  406606:	cmp    rcx,r13
  406609:	ja     406622 <UnityAssertNumbersWithin@@Base+0xf2>
  40660b:	add    QWORD PTR [rip+0xc625],0x1        # 412c38 <__bss_start@@Base+0xae4>
  406613:	add    rsp,0x8
  406617:	pop    rbx
  406618:	pop    r12
  40661a:	pop    r13
  40661c:	pop    r14
  40661e:	pop    r15
  406620:	pop    rbp
  406621:	ret    
  406622:	mov    rdi,r8
  406625:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  40662a:	lea    rdi,[rip+0x5eef]        # 40c520 <UnityStrDelta@@Base>
  406631:	call   4049b0 <UnityPrint@@Base>
  406636:	mov    rdi,r13
  406639:	mov    esi,r15d
  40663c:	call   404ef0 <UnityPrintNumberByStyle@@Base>
  406641:	lea    rdi,[rip+0x5e84]        # 40c4cc <UnityStrExpected@@Base>
  406648:	call   4049b0 <UnityPrint@@Base>
  40664d:	mov    rdi,rbp
  406650:	mov    esi,r15d
  406653:	call   404ef0 <UnityPrintNumberByStyle@@Base>
  406658:	lea    rdi,[rip+0x5e78]        # 40c4d7 <UnityStrWas@@Base>
  40665f:	call   4049b0 <UnityPrint@@Base>
  406664:	mov    rdi,r12
  406667:	mov    esi,r15d
  40666a:	call   404ef0 <UnityPrintNumberByStyle@@Base>
  40666f:	mov    rdi,r14
  406672:	call   4057a0 <UnityAssertBits@@Base+0x1d0>
  406677:	mov    QWORD PTR [rbx+0x40],0x1
  40667f:	add    rbx,0x50
  406683:	mov    esi,0x1
  406688:	mov    rdi,rbx
  40668b:	call   4031f0 <longjmp@plt>

0000000000406690 <UnityAssertEqualString@@Base>:
  406690:	push   r15
  406692:	push   r14
  406694:	push   r12
  406696:	push   rbx
  406697:	push   rax
  406698:	add    QWORD PTR [rip+0xc5a0],0x1        # 412c40 <__bss_start@@Base+0xaec>
  4066a0:	mov    r12,rsi
  4066a3:	mov    rbx,rdi
  4066a6:	lea    r10,[rip+0xc593]        # 412c40 <__bss_start@@Base+0xaec>
  4066ad:	lea    r15,[rip+0xd16c]        # 413820 <Unity@@Base>
  4066b4:	mov    r8,QWORD PTR [r15+0x40]
  4066b8:	mov    rsi,QWORD PTR [r15+0x48]
  4066bc:	xor    edi,edi
  4066be:	mov    rax,r8
  4066c1:	or     rax,rsi
  4066c4:	sete   dil
  4066c8:	add    QWORD PTR [r10+rdi*8+0x8],0x1
  4066ce:	or     rsi,r8
  4066d1:	je     4066e0 <UnityAssertEqualString@@Base+0x50>
  4066d3:	add    QWORD PTR [rip+0xc57d],0x1        # 412c58 <__bss_start@@Base+0xb04>
  4066db:	jmp    4067ee <UnityAssertEqualString@@Base+0x15e>
  4066e0:	mov    r14,rdx
  4066e3:	test   rbx,rbx
  4066e6:	setne  sil
  4066ea:	test   r12,r12
  4066ed:	setne  dil
  4066f1:	and    dil,sil
  4066f4:	mov    eax,edi
  4066f6:	xor    al,0x1
  4066f8:	movzx  eax,al
  4066fb:	add    QWORD PTR [r10+rax*8+0x20],0x1
  406701:	cmp    dil,0x1
  406705:	jne    4067bd <UnityAssertEqualString@@Base+0x12d>
  40670b:	add    QWORD PTR [rip+0xc55d],0x1        # 412c70 <__bss_start@@Base+0xb1c>
  406713:	xor    edi,edi
  406715:	lea    r9,[rip+0xc58c]        # 412ca8 <__bss_start@@Base+0xb54>
  40671c:	jmp    40672b <UnityAssertEqualString@@Base+0x9b>
  40671e:	xchg   ax,ax
  406720:	add    QWORD PTR [rip+0xc588],0x1        # 412cb0 <__bss_start@@Base+0xb5c>
  406728:	add    edi,0x1
  40672b:	mov    edi,edi
  40672d:	movzx  eax,BYTE PTR [rbx+rdi*1]
  406731:	xor    esi,esi
  406733:	test   al,al
  406735:	sete   sil
  406739:	add    QWORD PTR [r10+rsi*8+0x38],0x1
  40673f:	test   al,al
  406741:	jne    40675a <UnityAssertEqualString@@Base+0xca>
  406743:	movzx  eax,BYTE PTR [r12+rdi*1]
  406748:	xor    esi,esi
  40674a:	test   al,al
  40674c:	sete   sil
  406750:	add    QWORD PTR [r10+rsi*8+0x48],0x1
  406756:	test   al,al
  406758:	je     4067d0 <UnityAssertEqualString@@Base+0x140>
  40675a:	movzx  eax,BYTE PTR [rbx+rdi*1]
  40675e:	movzx  edx,BYTE PTR [r12+rdi*1]
  406763:	xor    esi,esi
  406765:	cmp    al,dl
  406767:	sete   sil
  40676b:	add    QWORD PTR [r10+rsi*8+0x58],0x1
  406771:	cmp    al,dl
  406773:	je     406720 <UnityAssertEqualString@@Base+0x90>
  406775:	add    QWORD PTR [r9],0x1
  406779:	mov    QWORD PTR [r15+0x40],0x1
  406781:	add    QWORD PTR [rip+0xc547],0x1        # 412cd0 <__bss_start@@Base+0xb7c>
  406789:	mov    rdi,rcx
  40678c:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  406791:	mov    rdi,rbx
  406794:	mov    rsi,r12
  406797:	call   406810 <UnityAssertEqualString@@Base+0x180>
  40679c:	mov    rdi,r14
  40679f:	call   4057a0 <UnityAssertBits@@Base+0x1d0>
  4067a4:	mov    QWORD PTR [r15+0x40],0x1
  4067ac:	add    r15,0x50
  4067b0:	mov    esi,0x1
  4067b5:	mov    rdi,r15
  4067b8:	call   4031f0 <longjmp@plt>
  4067bd:	xor    eax,eax
  4067bf:	cmp    rbx,r12
  4067c2:	sete   al
  4067c5:	add    QWORD PTR [r10+rax*8+0x78],0x1
  4067cb:	cmp    rbx,r12
  4067ce:	jne    406802 <UnityAssertEqualString@@Base+0x172>
  4067d0:	xor    eax,eax
  4067d2:	test   r8,r8
  4067d5:	sete   al
  4067d8:	add    QWORD PTR [r10+rax*8+0x90],0x1
  4067e1:	test   r8,r8
  4067e4:	jne    406789 <UnityAssertEqualString@@Base+0xf9>
  4067e6:	add    QWORD PTR [rip+0xc4f2],0x1        # 412ce0 <__bss_start@@Base+0xb8c>
  4067ee:	add    QWORD PTR [rip+0xc4f2],0x1        # 412ce8 <__bss_start@@Base+0xb94>
  4067f6:	add    rsp,0x8
  4067fa:	pop    rbx
  4067fb:	pop    r12
  4067fd:	pop    r14
  4067ff:	pop    r15
  406801:	ret    
  406802:	lea    r9,[rip+0xc4bf]        # 412cc8 <__bss_start@@Base+0xb74>
  406809:	jmp    406775 <UnityAssertEqualString@@Base+0xe5>
  40680e:	xchg   ax,ax
  406810:	push   r15
  406812:	push   r14
  406814:	push   r12
  406816:	push   rbx
  406817:	push   rax
  406818:	mov    r14,rsi
  40681b:	mov    rbx,rdi
  40681e:	lea    r15,[rip+0xc4cb]        # 412cf0 <__bss_start@@Base+0xb9c>
  406825:	add    QWORD PTR [rip+0xc4c3],0x1        # 412cf0 <__bss_start@@Base+0xb9c>
  40682d:	lea    rdi,[rip+0x5c98]        # 40c4cc <UnityStrExpected@@Base>
  406834:	call   4049b0 <UnityPrint@@Base>
  406839:	xor    eax,eax
  40683b:	test   rbx,rbx
  40683e:	sete   al
  406841:	add    QWORD PTR [r15+rax*8+0x8],0x1
  406847:	test   rbx,rbx
  40684a:	je     4068b1 <UnityAssertEqualString@@Base+0x221>
  40684c:	add    QWORD PTR [rip+0xc4b4],0x1        # 412d08 <__bss_start@@Base+0xbb4>
  406854:	vmovdqa xmm0,XMMWORD PTR [rip+0xbb74]        # 4123d0 <__bss_start@@Base+0x27c>
  40685c:	vpcmpeqd xmm1,xmm1,xmm1
  406860:	vpsubq xmm0,xmm0,xmm1
  406864:	vmovdqa XMMWORD PTR [rip+0xbb64],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  40686c:	mov    r12,QWORD PTR [rip+0xb76d]        # 411fe0 <stdout@GLIBC_2.2.5>
  406873:	mov    rsi,QWORD PTR [r12]
  406877:	mov    edi,0x27
  40687c:	call   403130 <putc@plt>
  406881:	mov    rdi,rbx
  406884:	call   4049b0 <UnityPrint@@Base>
  406889:	vmovdqa xmm0,XMMWORD PTR [rip+0xbb3f]        # 4123d0 <__bss_start@@Base+0x27c>
  406891:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x5bd7]        # 40c470 <_IO_stdin_used@@Base+0x470>
  406899:	vmovdqa XMMWORD PTR [rip+0xbb2f],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  4068a1:	mov    rsi,QWORD PTR [r12]
  4068a5:	mov    edi,0x27
  4068aa:	call   403130 <putc@plt>
  4068af:	jmp    4068c5 <UnityAssertEqualString@@Base+0x235>
  4068b1:	add    QWORD PTR [rip+0xc457],0x1        # 412d10 <__bss_start@@Base+0xbbc>
  4068b9:	lea    rdi,[rip+0x5c04]        # 40c4c4 <UnityStrNull@@Base>
  4068c0:	call   4049b0 <UnityPrint@@Base>
  4068c5:	lea    rdi,[rip+0x5c0b]        # 40c4d7 <UnityStrWas@@Base>
  4068cc:	call   4049b0 <UnityPrint@@Base>
  4068d1:	xor    eax,eax
  4068d3:	test   r14,r14
  4068d6:	sete   al
  4068d9:	add    QWORD PTR [r15+rax*8+0x28],0x1
  4068df:	test   r14,r14
  4068e2:	je     406947 <UnityAssertEqualString@@Base+0x2b7>
  4068e4:	add    QWORD PTR [rip+0xc43c],0x1        # 412d28 <__bss_start@@Base+0xbd4>
  4068ec:	vmovdqa xmm0,XMMWORD PTR [rip+0xbadc]        # 4123d0 <__bss_start@@Base+0x27c>
  4068f4:	vpcmpeqd xmm1,xmm1,xmm1
  4068f8:	vpsubq xmm0,xmm0,xmm1
  4068fc:	vmovdqa XMMWORD PTR [rip+0xbacc],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  406904:	mov    rbx,QWORD PTR [rip+0xb6d5]        # 411fe0 <stdout@GLIBC_2.2.5>
  40690b:	mov    rsi,QWORD PTR [rbx]
  40690e:	mov    edi,0x27
  406913:	call   403130 <putc@plt>
  406918:	mov    rdi,r14
  40691b:	call   4049b0 <UnityPrint@@Base>
  406920:	vmovdqa xmm0,XMMWORD PTR [rip+0xbaa8]        # 4123d0 <__bss_start@@Base+0x27c>
  406928:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x5b40]        # 40c470 <_IO_stdin_used@@Base+0x470>
  406930:	vmovdqa XMMWORD PTR [rip+0xba98],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  406938:	mov    rsi,QWORD PTR [rbx]
  40693b:	mov    edi,0x27
  406940:	call   403130 <putc@plt>
  406945:	jmp    40695b <UnityAssertEqualString@@Base+0x2cb>
  406947:	add    QWORD PTR [rip+0xc3e1],0x1        # 412d30 <__bss_start@@Base+0xbdc>
  40694f:	lea    rdi,[rip+0x5b6e]        # 40c4c4 <UnityStrNull@@Base>
  406956:	call   4049b0 <UnityPrint@@Base>
  40695b:	add    QWORD PTR [rip+0xc3d5],0x1        # 412d38 <__bss_start@@Base+0xbe4>
  406963:	add    rsp,0x8
  406967:	pop    rbx
  406968:	pop    r12
  40696a:	pop    r14
  40696c:	pop    r15
  40696e:	ret    
  40696f:	nop

0000000000406970 <UnityAssertEqualStringLen@@Base>:
  406970:	push   rbp
  406971:	push   r15
  406973:	push   r14
  406975:	push   r12
  406977:	push   rbx
  406978:	add    QWORD PTR [rip+0xc3c0],0x1        # 412d40 <__bss_start@@Base+0xbec>
  406980:	mov    r14,rcx
  406983:	mov    ebp,edx
  406985:	mov    r12,rsi
  406988:	mov    rbx,rdi
  40698b:	lea    rcx,[rip+0xc3ae]        # 412d40 <__bss_start@@Base+0xbec>
  406992:	lea    r15,[rip+0xce87]        # 413820 <Unity@@Base>
  406999:	mov    r9,QWORD PTR [r15+0x40]
  40699d:	mov    rdx,QWORD PTR [r15+0x48]
  4069a1:	xor    esi,esi
  4069a3:	mov    rdi,r9
  4069a6:	or     rdi,rdx
  4069a9:	sete   sil
  4069ad:	add    QWORD PTR [rcx+rsi*8+0x8],0x1
  4069b3:	or     rdx,r9
  4069b6:	je     4069c5 <UnityAssertEqualStringLen@@Base+0x55>
  4069b8:	add    QWORD PTR [rip+0xc398],0x1        # 412d58 <__bss_start@@Base+0xc04>
  4069c0:	jmp    406ae8 <UnityAssertEqualStringLen@@Base+0x178>
  4069c5:	test   rbx,rbx
  4069c8:	setne  sil
  4069cc:	test   r12,r12
  4069cf:	setne  al
  4069d2:	and    al,sil
  4069d5:	mov    edx,eax
  4069d7:	xor    dl,0x1
  4069da:	movzx  edx,dl
  4069dd:	add    QWORD PTR [rcx+rdx*8+0x20],0x1
  4069e3:	cmp    al,0x1
  4069e5:	jne    406ab4 <UnityAssertEqualStringLen@@Base+0x144>
  4069eb:	add    QWORD PTR [rip+0xc37d],0x1        # 412d70 <__bss_start@@Base+0xc1c>
  4069f3:	xor    esi,esi
  4069f5:	lea    r10,[rip+0xc3bc]        # 412db8 <__bss_start@@Base+0xc64>
  4069fc:	jmp    406a0b <UnityAssertEqualStringLen@@Base+0x9b>
  4069fe:	xchg   ax,ax
  406a00:	add    QWORD PTR [rip+0xc3b8],0x1        # 412dc0 <__bss_start@@Base+0xc6c>
  406a08:	add    esi,0x1
  406a0b:	mov    esi,esi
  406a0d:	movzx  eax,BYTE PTR [rbx+rsi*1]
  406a11:	xor    edi,edi
  406a13:	test   al,al
  406a15:	sete   dil
  406a19:	add    QWORD PTR [rcx+rdi*8+0x38],0x1
  406a1f:	test   al,al
  406a21:	jne    406a3e <UnityAssertEqualStringLen@@Base+0xce>
  406a23:	movzx  eax,BYTE PTR [r12+rsi*1]
  406a28:	xor    edi,edi
  406a2a:	test   al,al
  406a2c:	sete   dil
  406a30:	add    QWORD PTR [rcx+rdi*8+0x48],0x1
  406a36:	test   al,al
  406a38:	je     406aca <UnityAssertEqualStringLen@@Base+0x15a>
  406a3e:	xor    eax,eax
  406a40:	cmp    esi,ebp
  406a42:	setae  al
  406a45:	add    QWORD PTR [rcx+rax*8+0x58],0x1
  406a4b:	cmp    esi,ebp
  406a4d:	jae    406aca <UnityAssertEqualStringLen@@Base+0x15a>
  406a4f:	movzx  eax,BYTE PTR [rbx+rsi*1]
  406a53:	movzx  edx,BYTE PTR [r12+rsi*1]
  406a58:	xor    edi,edi
  406a5a:	cmp    al,dl
  406a5c:	sete   dil
  406a60:	add    QWORD PTR [rcx+rdi*8+0x68],0x1
  406a66:	cmp    al,dl
  406a68:	je     406a00 <UnityAssertEqualStringLen@@Base+0x90>
  406a6a:	add    QWORD PTR [r10],0x1
  406a6e:	mov    QWORD PTR [r15+0x40],0x1
  406a76:	add    QWORD PTR [rip+0xc362],0x1        # 412de0 <__bss_start@@Base+0xc8c>
  406a7e:	mov    rdi,r8
  406a81:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  406a86:	mov    rdi,rbx
  406a89:	mov    rsi,r12
  406a8c:	mov    edx,ebp
  406a8e:	call   406b10 <UnityAssertEqualStringLen@@Base+0x1a0>
  406a93:	mov    rdi,r14
  406a96:	call   4057a0 <UnityAssertBits@@Base+0x1d0>
  406a9b:	mov    QWORD PTR [r15+0x40],0x1
  406aa3:	add    r15,0x50
  406aa7:	mov    esi,0x1
  406aac:	mov    rdi,r15
  406aaf:	call   4031f0 <longjmp@plt>
  406ab4:	xor    eax,eax
  406ab6:	cmp    rbx,r12
  406ab9:	sete   al
  406abc:	add    QWORD PTR [rcx+rax*8+0x88],0x1
  406ac5:	cmp    rbx,r12
  406ac8:	jne    406af9 <UnityAssertEqualStringLen@@Base+0x189>
  406aca:	xor    eax,eax
  406acc:	test   r9,r9
  406acf:	sete   al
  406ad2:	add    QWORD PTR [rcx+rax*8+0xa0],0x1
  406adb:	test   r9,r9
  406ade:	jne    406a7e <UnityAssertEqualStringLen@@Base+0x10e>
  406ae0:	add    QWORD PTR [rip+0xc308],0x1        # 412df0 <__bss_start@@Base+0xc9c>
  406ae8:	add    QWORD PTR [rip+0xc308],0x1        # 412df8 <__bss_start@@Base+0xca4>
  406af0:	pop    rbx
  406af1:	pop    r12
  406af3:	pop    r14
  406af5:	pop    r15
  406af7:	pop    rbp
  406af8:	ret    
  406af9:	lea    r10,[rip+0xc2d8]        # 412dd8 <__bss_start@@Base+0xc84>
  406b00:	jmp    406a6a <UnityAssertEqualStringLen@@Base+0xfa>
  406b05:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406b0f:	nop
  406b10:	push   rbp
  406b11:	push   r15
  406b13:	push   r14
  406b15:	push   r12
  406b17:	push   rbx
  406b18:	mov    r14d,edx
  406b1b:	mov    rbx,rsi
  406b1e:	mov    rbp,rdi
  406b21:	lea    r15,[rip+0xc2d8]        # 412e00 <__bss_start@@Base+0xcac>
  406b28:	add    QWORD PTR [rip+0xc2d0],0x1        # 412e00 <__bss_start@@Base+0xcac>
  406b30:	lea    rdi,[rip+0x5995]        # 40c4cc <UnityStrExpected@@Base>
  406b37:	call   4049b0 <UnityPrint@@Base>
  406b3c:	xor    eax,eax
  406b3e:	test   rbp,rbp
  406b41:	sete   al
  406b44:	add    QWORD PTR [r15+rax*8+0x8],0x1
  406b4a:	test   rbp,rbp
  406b4d:	je     406bb7 <UnityAssertEqualStringLen@@Base+0x247>
  406b4f:	add    QWORD PTR [rip+0xc2c1],0x1        # 412e18 <__bss_start@@Base+0xcc4>
  406b57:	vmovdqa xmm0,XMMWORD PTR [rip+0xb871]        # 4123d0 <__bss_start@@Base+0x27c>
  406b5f:	vpcmpeqd xmm1,xmm1,xmm1
  406b63:	vpsubq xmm0,xmm0,xmm1
  406b67:	vmovdqa XMMWORD PTR [rip+0xb861],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  406b6f:	mov    r12,QWORD PTR [rip+0xb46a]        # 411fe0 <stdout@GLIBC_2.2.5>
  406b76:	mov    rsi,QWORD PTR [r12]
  406b7a:	mov    edi,0x27
  406b7f:	call   403130 <putc@plt>
  406b84:	mov    rdi,rbp
  406b87:	mov    esi,r14d
  406b8a:	call   404ce0 <UnityPrintLen@@Base>
  406b8f:	vmovdqa xmm0,XMMWORD PTR [rip+0xb839]        # 4123d0 <__bss_start@@Base+0x27c>
  406b97:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x58d1]        # 40c470 <_IO_stdin_used@@Base+0x470>
  406b9f:	vmovdqa XMMWORD PTR [rip+0xb829],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  406ba7:	mov    rsi,QWORD PTR [r12]
  406bab:	mov    edi,0x27
  406bb0:	call   403130 <putc@plt>
  406bb5:	jmp    406bcb <UnityAssertEqualStringLen@@Base+0x25b>
  406bb7:	add    QWORD PTR [rip+0xc261],0x1        # 412e20 <__bss_start@@Base+0xccc>
  406bbf:	lea    rdi,[rip+0x58fe]        # 40c4c4 <UnityStrNull@@Base>
  406bc6:	call   4049b0 <UnityPrint@@Base>
  406bcb:	lea    rdi,[rip+0x5905]        # 40c4d7 <UnityStrWas@@Base>
  406bd2:	call   4049b0 <UnityPrint@@Base>
  406bd7:	xor    eax,eax
  406bd9:	test   rbx,rbx
  406bdc:	sete   al
  406bdf:	add    QWORD PTR [r15+rax*8+0x28],0x1
  406be5:	test   rbx,rbx
  406be8:	je     406c52 <UnityAssertEqualStringLen@@Base+0x2e2>
  406bea:	add    QWORD PTR [rip+0xc246],0x1        # 412e38 <__bss_start@@Base+0xce4>
  406bf2:	vmovdqa xmm0,XMMWORD PTR [rip+0xb7d6]        # 4123d0 <__bss_start@@Base+0x27c>
  406bfa:	vpcmpeqd xmm1,xmm1,xmm1
  406bfe:	vpsubq xmm0,xmm0,xmm1
  406c02:	vmovdqa XMMWORD PTR [rip+0xb7c6],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  406c0a:	mov    rbp,QWORD PTR [rip+0xb3cf]        # 411fe0 <stdout@GLIBC_2.2.5>
  406c11:	mov    rsi,QWORD PTR [rbp+0x0]
  406c15:	mov    edi,0x27
  406c1a:	call   403130 <putc@plt>
  406c1f:	mov    rdi,rbx
  406c22:	mov    esi,r14d
  406c25:	call   404ce0 <UnityPrintLen@@Base>
  406c2a:	vmovdqa xmm0,XMMWORD PTR [rip+0xb79e]        # 4123d0 <__bss_start@@Base+0x27c>
  406c32:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x5836]        # 40c470 <_IO_stdin_used@@Base+0x470>
  406c3a:	vmovdqa XMMWORD PTR [rip+0xb78e],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  406c42:	mov    rsi,QWORD PTR [rbp+0x0]
  406c46:	mov    edi,0x27
  406c4b:	call   403130 <putc@plt>
  406c50:	jmp    406c66 <UnityAssertEqualStringLen@@Base+0x2f6>
  406c52:	add    QWORD PTR [rip+0xc1e6],0x1        # 412e40 <__bss_start@@Base+0xcec>
  406c5a:	lea    rdi,[rip+0x5863]        # 40c4c4 <UnityStrNull@@Base>
  406c61:	call   4049b0 <UnityPrint@@Base>
  406c66:	add    QWORD PTR [rip+0xc1da],0x1        # 412e48 <__bss_start@@Base+0xcf4>
  406c6e:	pop    rbx
  406c6f:	pop    r12
  406c71:	pop    r14
  406c73:	pop    r15
  406c75:	pop    rbp
  406c76:	ret    
  406c77:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406c80 <UnityAssertEqualStringArray@@Base>:
  406c80:	push   rbp
  406c81:	push   r15
  406c83:	push   r14
  406c85:	push   r13
  406c87:	push   r12
  406c89:	push   rbx
  406c8a:	sub    rsp,0x18
  406c8e:	add    QWORD PTR [rip+0xc1ba],0x1        # 412e50 <__bss_start@@Base+0xcfc>
  406c96:	mov    r13,rcx
  406c99:	mov    ebp,edx
  406c9b:	mov    r12,rsi
  406c9e:	lea    r14,[rip+0xc1ab]        # 412e50 <__bss_start@@Base+0xcfc>
  406ca5:	lea    r15,[rip+0xcb74]        # 413820 <Unity@@Base>
  406cac:	mov    rax,QWORD PTR [r15+0x48]
  406cb0:	mov    rcx,QWORD PTR [r15+0x40]
  406cb4:	xor    edx,edx
  406cb6:	mov    rsi,rax
  406cb9:	or     rsi,rcx
  406cbc:	sete   dl
  406cbf:	add    QWORD PTR [r14+rdx*8+0x8],0x1
  406cc5:	or     rax,rcx
  406cc8:	je     406cd7 <UnityAssertEqualStringArray@@Base+0x57>
  406cca:	add    QWORD PTR [rip+0xc196],0x1        # 412e68 <__bss_start@@Base+0xd14>
  406cd2:	jmp    406e5f <UnityAssertEqualStringArray@@Base+0x1df>
  406cd7:	xor    eax,eax
  406cd9:	test   ebp,ebp
  406cdb:	setne  al
  406cde:	add    QWORD PTR [r14+rax*8+0x20],0x1
  406ce4:	test   ebp,ebp
  406ce6:	je     406f00 <UnityAssertEqualStringArray@@Base+0x280>
  406cec:	mov    rbx,rdi
  406cef:	mov    rsi,r12
  406cf2:	mov    QWORD PTR [rsp+0x10],r8
  406cf7:	mov    rdx,r8
  406cfa:	mov    rcx,r13
  406cfd:	call   405e40 <UnityAssertEqualIntArray@@Base+0x4f0>
  406d02:	xor    ecx,ecx
  406d04:	cmp    eax,0x1
  406d07:	setne  cl
  406d0a:	add    QWORD PTR [r14+rcx*8+0x30],0x1
  406d10:	cmp    eax,0x1
  406d13:	jne    406d22 <UnityAssertEqualStringArray@@Base+0xa2>
  406d15:	add    QWORD PTR [rip+0xc173],0x1        # 412e90 <__bss_start@@Base+0xd3c>
  406d1d:	jmp    406e5f <UnityAssertEqualStringArray@@Base+0x1df>
  406d22:	mov    QWORD PTR [rsp+0x8],r13
  406d27:	mov    DWORD PTR [rsp+0x4],ebp
  406d2b:	mov    ecx,ebp
  406d2d:	xor    r13d,r13d
  406d30:	lea    r8,[rip+0xc1b9]        # 412ef0 <__bss_start@@Base+0xd9c>
  406d37:	lea    r9,[rip+0xc1d2]        # 412f10 <__bss_start@@Base+0xdbc>
  406d3e:	xchg   ax,ax
  406d40:	mov    rsi,QWORD PTR [rbx+r13*8]
  406d44:	xor    edi,edi
  406d46:	test   rsi,rsi
  406d49:	sete   dil
  406d4d:	add    QWORD PTR [r14+rdi*8+0x48],0x1
  406d53:	test   rsi,rsi
  406d56:	je     406e00 <UnityAssertEqualStringArray@@Base+0x180>
  406d5c:	mov    rsi,QWORD PTR [r12+r13*8]
  406d60:	xor    edi,edi
  406d62:	test   rsi,rsi
  406d65:	sete   dil
  406d69:	add    QWORD PTR [r14+rdi*8+0x58],0x1
  406d6f:	test   rsi,rsi
  406d72:	je     406e00 <UnityAssertEqualStringArray@@Base+0x180>
  406d78:	add    QWORD PTR [rip+0xc138],0x1        # 412eb8 <__bss_start@@Base+0xd64>
  406d80:	xor    esi,esi
  406d82:	jmp    406d9b <UnityAssertEqualStringArray@@Base+0x11b>
  406d84:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406d8e:	xchg   ax,ax
  406d90:	add    QWORD PTR [rip+0xc160],0x1        # 412ef8 <__bss_start@@Base+0xda4>
  406d98:	add    esi,0x1
  406d9b:	mov    rdi,QWORD PTR [rbx+r13*8]
  406d9f:	mov    esi,esi
  406da1:	movzx  edx,BYTE PTR [rdi+rsi*1]
  406da5:	xor    edi,edi
  406da7:	test   dl,dl
  406da9:	sete   dil
  406dad:	add    QWORD PTR [r14+rdi*8+0x70],0x1
  406db3:	test   dl,dl
  406db5:	jne    406dd4 <UnityAssertEqualStringArray@@Base+0x154>
  406db7:	mov    rdx,QWORD PTR [r12+r13*8]
  406dbb:	movzx  edx,BYTE PTR [rdx+rsi*1]
  406dbf:	xor    edi,edi
  406dc1:	test   dl,dl
  406dc3:	sete   dil
  406dc7:	add    QWORD PTR [r14+rdi*8+0x80],0x1
  406dd0:	test   dl,dl
  406dd2:	je     406e1f <UnityAssertEqualStringArray@@Base+0x19f>
  406dd4:	mov    rdx,QWORD PTR [rbx+r13*8]
  406dd8:	movzx  edx,BYTE PTR [rdx+rsi*1]
  406ddc:	mov    rdi,QWORD PTR [r12+r13*8]
  406de0:	movzx  eax,BYTE PTR [rdi+rsi*1]
  406de4:	xor    edi,edi
  406de6:	cmp    dl,al
  406de8:	sete   dil
  406dec:	add    QWORD PTR [r14+rdi*8+0x90],0x1
  406df5:	cmp    dl,al
  406df7:	je     406d90 <UnityAssertEqualStringArray@@Base+0x110>
  406df9:	jmp    406e76 <UnityAssertEqualStringArray@@Base+0x1f6>
  406dfb:	nop    DWORD PTR [rax+rax*1+0x0]
  406e00:	mov    rax,QWORD PTR [rbx+r13*8]
  406e04:	mov    rdx,QWORD PTR [r12+r13*8]
  406e08:	xor    esi,esi
  406e0a:	cmp    rax,rdx
  406e0d:	sete   sil
  406e11:	add    QWORD PTR [r14+rsi*8+0xb0],0x1
  406e1a:	cmp    rax,rdx
  406e1d:	jne    406e79 <UnityAssertEqualStringArray@@Base+0x1f9>
  406e1f:	mov    rax,QWORD PTR [r15+0x40]
  406e23:	xor    edx,edx
  406e25:	test   rax,rax
  406e28:	sete   dl
  406e2b:	add    QWORD PTR [r14+rdx*8+0xc8],0x1
  406e34:	test   rax,rax
  406e37:	jne    406e8d <UnityAssertEqualStringArray@@Base+0x20d>
  406e39:	add    r13,0x1
  406e3d:	xor    eax,eax
  406e3f:	cmp    r13,rcx
  406e42:	setae  al
  406e45:	add    QWORD PTR [r14+rax*8+0xf0],0x1
  406e4e:	cmp    r13,rcx
  406e51:	jb     406d40 <UnityAssertEqualStringArray@@Base+0xc0>
  406e57:	add    QWORD PTR [rip+0xc0f1],0x1        # 412f50 <__bss_start@@Base+0xdfc>
  406e5f:	add    QWORD PTR [rip+0xc0f1],0x1        # 412f58 <__bss_start@@Base+0xe04>
  406e67:	add    rsp,0x18
  406e6b:	pop    rbx
  406e6c:	pop    r12
  406e6e:	pop    r13
  406e70:	pop    r14
  406e72:	pop    r15
  406e74:	pop    rbp
  406e75:	ret    
  406e76:	mov    r9,r8
  406e79:	add    QWORD PTR [r9],0x1
  406e7d:	mov    QWORD PTR [r15+0x40],0x1
  406e85:	add    QWORD PTR [rip+0xc08b],0x1        # 412f18 <__bss_start@@Base+0xdc4>
  406e8d:	mov    rdi,QWORD PTR [rsp+0x10]
  406e92:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  406e97:	xor    eax,eax
  406e99:	mov    ecx,DWORD PTR [rsp+0x4]
  406e9d:	cmp    ecx,0x2
  406ea0:	setb   al
  406ea3:	add    QWORD PTR [r14+rax*8+0xd8],0x1
  406eac:	mov    r14d,r13d
  406eaf:	cmp    ecx,0x2
  406eb2:	jb     406ed0 <UnityAssertEqualStringArray@@Base+0x250>
  406eb4:	add    QWORD PTR [rip+0xc07c],0x1        # 412f38 <__bss_start@@Base+0xde4>
  406ebc:	lea    rdi,[rip+0x561f]        # 40c4e2 <UnityStrElement@@Base>
  406ec3:	call   4049b0 <UnityPrint@@Base>
  406ec8:	mov    rdi,r14
  406ecb:	call   405140 <UnityPrintNumberUnsigned@@Base>
  406ed0:	mov    rdi,QWORD PTR [rbx+r13*8]
  406ed4:	mov    rsi,QWORD PTR [r12+r14*8]
  406ed8:	call   406810 <UnityAssertEqualString@@Base+0x180>
  406edd:	mov    rdi,QWORD PTR [rsp+0x8]
  406ee2:	call   4057a0 <UnityAssertBits@@Base+0x1d0>
  406ee7:	mov    QWORD PTR [r15+0x40],0x1
  406eef:	add    r15,0x50
  406ef3:	mov    esi,0x1
  406ef8:	mov    rdi,r15
  406efb:	call   4031f0 <longjmp@plt>
  406f00:	mov    rdi,r8
  406f03:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  406f08:	lea    rdi,[rip+0x5631]        # 40c540 <UnityStrPointless@@Base>
  406f0f:	call   4049b0 <UnityPrint@@Base>
  406f14:	mov    rdi,r13
  406f17:	jmp    406ee2 <UnityAssertEqualStringArray@@Base+0x262>
  406f19:	nop    DWORD PTR [rax+0x0]

0000000000406f20 <UnityAssertEqualMemory@@Base>:
  406f20:	push   rbp
  406f21:	push   r15
  406f23:	push   r14
  406f25:	push   r13
  406f27:	push   r12
  406f29:	push   rbx
  406f2a:	sub    rsp,0x18
  406f2e:	add    QWORD PTR [rip+0xc02a],0x1        # 412f60 <__bss_start@@Base+0xe0c>
  406f36:	mov    r14d,edx
  406f39:	mov    r12,rsi
  406f3c:	mov    rbx,rdi
  406f3f:	lea    r13,[rip+0xc01a]        # 412f60 <__bss_start@@Base+0xe0c>
  406f46:	lea    rbp,[rip+0xc8d3]        # 413820 <Unity@@Base>
  406f4d:	mov    rax,QWORD PTR [rbp+0x48]
  406f51:	mov    rdi,QWORD PTR [rbp+0x40]
  406f55:	xor    edx,edx
  406f57:	mov    rsi,rax
  406f5a:	or     rsi,rdi
  406f5d:	sete   dl
  406f60:	add    QWORD PTR [r13+rdx*8+0x8],0x1
  406f66:	or     rax,rdi
  406f69:	je     406f78 <UnityAssertEqualMemory@@Base+0x58>
  406f6b:	add    QWORD PTR [rip+0xc005],0x1        # 412f78 <__bss_start@@Base+0xe24>
  406f73:	jmp    40707b <UnityAssertEqualMemory@@Base+0x15b>
  406f78:	mov    r15,r8
  406f7b:	mov    QWORD PTR [rsp],rcx
  406f7f:	test   ecx,ecx
  406f81:	sete   al
  406f84:	test   r14d,r14d
  406f87:	sete   cl
  406f8a:	or     cl,al
  406f8c:	mov    eax,ecx
  406f8e:	xor    al,0x1
  406f90:	movzx  eax,al
  406f93:	add    QWORD PTR [r13+rax*8+0x20],0x1
  406f99:	cmp    cl,0x1
  406f9c:	je     407150 <UnityAssertEqualMemory@@Base+0x230>
  406fa2:	mov    rdi,rbx
  406fa5:	mov    rsi,r12
  406fa8:	mov    QWORD PTR [rsp+0x10],r9
  406fad:	mov    rdx,r9
  406fb0:	mov    rcx,r15
  406fb3:	call   405e40 <UnityAssertEqualIntArray@@Base+0x4f0>
  406fb8:	xor    ecx,ecx
  406fba:	cmp    eax,0x1
  406fbd:	setne  cl
  406fc0:	add    QWORD PTR [r13+rcx*8+0x30],0x1
  406fc6:	cmp    eax,0x1
  406fc9:	jne    406fd8 <UnityAssertEqualMemory@@Base+0xb8>
  406fcb:	add    QWORD PTR [rip+0xbfcd],0x1        # 412fa0 <__bss_start@@Base+0xe4c>
  406fd3:	jmp    40707b <UnityAssertEqualMemory@@Base+0x15b>
  406fd8:	mov    QWORD PTR [rsp+0x8],r15
  406fdd:	add    QWORD PTR [rip+0xbfc3],0x1        # 412fa8 <__bss_start@@Base+0xe54>
  406fe5:	mov    ebp,r14d
  406fe8:	lea    rcx,[rbp-0x1]
  406fec:	vpcmpeqd xmm0,xmm0,xmm0
  406ff0:	mov    r8,QWORD PTR [rsp]
  406ff4:	mov    edi,r8d
  406ff7:	nop    WORD PTR [rax+rax*1+0x0]
  407000:	mov    r15d,edi
  407003:	lea    edi,[r15-0x1]
  407007:	vmovdqu xmm1,XMMWORD PTR [rip+0xbfa9]        # 412fb8 <__bss_start@@Base+0xe64>
  40700f:	vpsubq xmm1,xmm1,xmm0
  407013:	vmovdqu XMMWORD PTR [rip+0xbf9d],xmm1        # 412fb8 <__bss_start@@Base+0xe64>
  40701b:	xor    r14d,r14d
  40701e:	xchg   ax,ax
  407020:	movzx  edx,BYTE PTR [rbx]
  407023:	movzx  eax,BYTE PTR [r12]
  407028:	xor    esi,esi
  40702a:	cmp    dl,al
  40702c:	sete   sil
  407030:	add    QWORD PTR [r13+rsi*8+0x70],0x1
  407036:	cmp    dl,al
  407038:	jne    407092 <UnityAssertEqualMemory@@Base+0x172>
  40703a:	add    QWORD PTR [rip+0xbfb6],0x1        # 412ff8 <__bss_start@@Base+0xea4>
  407042:	add    rbx,0x1
  407046:	add    r12,0x1
  40704a:	xor    eax,eax
  40704c:	cmp    ecx,r14d
  40704f:	sete   al
  407052:	add    QWORD PTR [r13+rax*8+0x60],0x1
  407058:	add    r14,0x1
  40705c:	cmp    ebp,r14d
  40705f:	jne    407020 <UnityAssertEqualMemory@@Base+0x100>
  407061:	xor    esi,esi
  407063:	test   edi,edi
  407065:	sete   sil
  407069:	add    QWORD PTR [r13+rsi*8+0x48],0x1
  40706f:	test   edi,edi
  407071:	jne    407000 <UnityAssertEqualMemory@@Base+0xe0>
  407073:	add    QWORD PTR [rip+0xbf85],0x1        # 413000 <__bss_start@@Base+0xeac>
  40707b:	add    QWORD PTR [rip+0xbf85],0x1        # 413008 <__bss_start@@Base+0xeb4>
  407083:	add    rsp,0x18
  407087:	pop    rbx
  407088:	pop    r12
  40708a:	pop    r13
  40708c:	pop    r14
  40708e:	pop    r15
  407090:	pop    rbp
  407091:	ret    
  407092:	mov    rdi,QWORD PTR [rsp+0x10]
  407097:	mov    rbp,r8
  40709a:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  40709f:	lea    rdi,[rip+0x545a]        # 40c500 <UnityStrMemory@@Base>
  4070a6:	call   4049b0 <UnityPrint@@Base>
  4070ab:	xor    eax,eax
  4070ad:	cmp    ebp,0x2
  4070b0:	setb   al
  4070b3:	add    QWORD PTR [r13+rax*8+0x80],0x1
  4070bc:	cmp    ebp,0x2
  4070bf:	jb     4070e1 <UnityAssertEqualMemory@@Base+0x1c1>
  4070c1:	add    QWORD PTR [rip+0xbf27],0x1        # 412ff0 <__bss_start@@Base+0xe9c>
  4070c9:	lea    rdi,[rip+0x5412]        # 40c4e2 <UnityStrElement@@Base>
  4070d0:	call   4049b0 <UnityPrint@@Base>
  4070d5:	mov    rdi,QWORD PTR [rsp]
  4070d9:	sub    edi,r15d
  4070dc:	call   405140 <UnityPrintNumberUnsigned@@Base>
  4070e1:	lea    rdi,[rip+0x5404]        # 40c4ec <UnityStrByte@@Base>
  4070e8:	call   4049b0 <UnityPrint@@Base>
  4070ed:	mov    rdi,r14
  4070f0:	call   405140 <UnityPrintNumberUnsigned@@Base>
  4070f5:	lea    rdi,[rip+0x53d0]        # 40c4cc <UnityStrExpected@@Base>
  4070fc:	call   4049b0 <UnityPrint@@Base>
  407101:	movzx  edi,BYTE PTR [rbx]
  407104:	mov    esi,0x41
  407109:	call   404ef0 <UnityPrintNumberByStyle@@Base>
  40710e:	lea    rdi,[rip+0x53c2]        # 40c4d7 <UnityStrWas@@Base>
  407115:	call   4049b0 <UnityPrint@@Base>
  40711a:	movzx  edi,BYTE PTR [r12]
  40711f:	mov    esi,0x41
  407124:	call   404ef0 <UnityPrintNumberByStyle@@Base>
  407129:	mov    rdi,QWORD PTR [rsp+0x8]
  40712e:	call   4057a0 <UnityAssertBits@@Base+0x1d0>
  407133:	lea    rdi,[rip+0xc6e6]        # 413820 <Unity@@Base>
  40713a:	mov    QWORD PTR [rdi+0x40],0x1
  407142:	add    rdi,0x50
  407146:	mov    esi,0x1
  40714b:	call   4031f0 <longjmp@plt>
  407150:	mov    rdi,r9
  407153:	call   4056a0 <UnityAssertBits@@Base+0xd0>
  407158:	lea    rdi,[rip+0x53e1]        # 40c540 <UnityStrPointless@@Base>
  40715f:	call   4049b0 <UnityPrint@@Base>
  407164:	mov    rdi,r15
  407167:	call   4057a0 <UnityAssertBits@@Base+0x1d0>
  40716c:	mov    QWORD PTR [rbp+0x40],0x1
  407174:	add    rbp,0x50
  407178:	mov    esi,0x1
  40717d:	mov    rdi,rbp
  407180:	call   4031f0 <longjmp@plt>
  407185:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40718f:	nop

0000000000407190 <UnityFail@@Base>:
  407190:	push   r15
  407192:	push   r14
  407194:	push   r13
  407196:	push   r12
  407198:	push   rbx
  407199:	add    QWORD PTR [rip+0xbe6f],0x1        # 413010 <__bss_start@@Base+0xebc>
  4071a1:	mov    rbx,rsi
  4071a4:	lea    r12,[rip+0xbe65]        # 413010 <__bss_start@@Base+0xebc>
  4071ab:	lea    r15,[rip+0xc66e]        # 413820 <Unity@@Base>
  4071b2:	mov    rax,QWORD PTR [r15+0x48]
  4071b6:	mov    rcx,QWORD PTR [r15+0x40]
  4071ba:	xor    edx,edx
  4071bc:	mov    rsi,rax
  4071bf:	or     rsi,rcx
  4071c2:	sete   dl
  4071c5:	add    QWORD PTR [r12+rdx*8+0x8],0x1
  4071cb:	or     rax,rcx
  4071ce:	je     4071e2 <UnityFail@@Base+0x52>
  4071d0:	add    QWORD PTR [rip+0xbe50],0x1        # 413028 <__bss_start@@Base+0xed4>
  4071d8:	pop    rbx
  4071d9:	pop    r12
  4071db:	pop    r13
  4071dd:	pop    r14
  4071df:	pop    r15
  4071e1:	ret    
  4071e2:	mov    r14,rdi
  4071e5:	mov    rdi,QWORD PTR [r15]
  4071e8:	vmovdqa xmm0,XMMWORD PTR [rip+0xb500]        # 4126f0 <__bss_start@@Base+0x59c>
  4071f0:	vpcmpeqd xmm1,xmm1,xmm1
  4071f4:	vpsubq xmm0,xmm0,xmm1
  4071f8:	vmovdqa XMMWORD PTR [rip+0xb4f0],xmm0        # 4126f0 <__bss_start@@Base+0x59c>
  407200:	call   4049b0 <UnityPrint@@Base>
  407205:	vmovdqa xmm0,XMMWORD PTR [rip+0xb1c3]        # 4123d0 <__bss_start@@Base+0x27c>
  40720d:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x525b]        # 40c470 <_IO_stdin_used@@Base+0x470>
  407215:	vmovdqa XMMWORD PTR [rip+0xb1b3],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  40721d:	mov    r13,QWORD PTR [rip+0xadbc]        # 411fe0 <stdout@GLIBC_2.2.5>
  407224:	mov    rsi,QWORD PTR [r13+0x0]
  407228:	mov    edi,0x3a
  40722d:	call   403130 <putc@plt>
  407232:	mov    rdi,rbx
  407235:	call   404f80 <UnityPrintNumber@@Base>
  40723a:	vmovdqa xmm0,XMMWORD PTR [rip+0xb18e]        # 4123d0 <__bss_start@@Base+0x27c>
  407242:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x5226]        # 40c470 <_IO_stdin_used@@Base+0x470>
  40724a:	vmovdqa XMMWORD PTR [rip+0xb17e],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  407252:	mov    rsi,QWORD PTR [r13+0x0]
  407256:	mov    edi,0x3a
  40725b:	call   403130 <putc@plt>
  407260:	mov    rdi,QWORD PTR [r15+0x8]
  407264:	call   4049b0 <UnityPrint@@Base>
  407269:	vmovdqa xmm0,XMMWORD PTR [rip+0xb15f]        # 4123d0 <__bss_start@@Base+0x27c>
  407271:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x51f7]        # 40c470 <_IO_stdin_used@@Base+0x470>
  407279:	vmovdqa XMMWORD PTR [rip+0xb14f],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  407281:	mov    rsi,QWORD PTR [r13+0x0]
  407285:	mov    edi,0x3a
  40728a:	call   403130 <putc@plt>
  40728f:	vmovdqa xmm0,XMMWORD PTR [rip+0xb3e9]        # 412680 <__bss_start@@Base+0x52c>
  407297:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x51d1]        # 40c470 <_IO_stdin_used@@Base+0x470>
  40729f:	vmovdqa XMMWORD PTR [rip+0xb3d9],xmm0        # 412680 <__bss_start@@Base+0x52c>
  4072a7:	lea    rdi,[rip+0x520a]        # 40c4b8 <UnityStrFail@@Base>
  4072ae:	call   4049b0 <UnityPrint@@Base>
  4072b3:	xor    eax,eax
  4072b5:	test   r14,r14
  4072b8:	sete   al
  4072bb:	add    QWORD PTR [r12+rax*8+0x20],0x1
  4072c1:	test   r14,r14
  4072c4:	je     4073b6 <UnityFail@@Base+0x226>
  4072ca:	vmovdqa xmm0,XMMWORD PTR [rip+0xb0fe]        # 4123d0 <__bss_start@@Base+0x27c>
  4072d2:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x5196]        # 40c470 <_IO_stdin_used@@Base+0x470>
  4072da:	vmovdqa XMMWORD PTR [rip+0xb0ee],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  4072e2:	mov    rsi,QWORD PTR [r13+0x0]
  4072e6:	mov    edi,0x3a
  4072eb:	call   403130 <putc@plt>
  4072f0:	mov    rax,QWORD PTR [r15+0x10]
  4072f4:	xor    ecx,ecx
  4072f6:	test   rax,rax
  4072f9:	sete   cl
  4072fc:	add    QWORD PTR [r12+rcx*8+0x30],0x1
  407302:	test   rax,rax
  407305:	je     407364 <UnityFail@@Base+0x1d4>
  407307:	lea    rdi,[rip+0x53a7]        # 40c6b5 <UnityStrDetail1Name@@Base>
  40730e:	call   4049b0 <UnityPrint@@Base>
  407313:	mov    rdi,QWORD PTR [r15+0x10]
  407317:	call   4049b0 <UnityPrint@@Base>
  40731c:	mov    rax,QWORD PTR [r15+0x18]
  407320:	xor    ecx,ecx
  407322:	test   rax,rax
  407325:	sete   cl
  407328:	add    QWORD PTR [r12+rcx*8+0x40],0x1
  40732e:	test   rax,rax
  407331:	je     407350 <UnityFail@@Base+0x1c0>
  407333:	add    QWORD PTR [rip+0xbd25],0x1        # 413060 <__bss_start@@Base+0xf0c>
  40733b:	lea    rdi,[rip+0x537d]        # 40c6bf <UnityStrDetail2Name@@Base>
  407342:	call   4049b0 <UnityPrint@@Base>
  407347:	mov    rdi,QWORD PTR [r15+0x18]
  40734b:	call   4049b0 <UnityPrint@@Base>
  407350:	add    QWORD PTR [rip+0xbd10],0x1        # 413068 <__bss_start@@Base+0xf14>
  407358:	lea    rdi,[rip+0x516a]        # 40c4c9 <UnityStrSpacer@@Base>
  40735f:	call   4049b0 <UnityPrint@@Base>
  407364:	mov    al,BYTE PTR [r14]
  407367:	xor    ecx,ecx
  407369:	cmp    al,0x20
  40736b:	sete   cl
  40736e:	add    QWORD PTR [r12+rcx*8+0x60],0x1
  407374:	cmp    al,0x20
  407376:	je     4073a6 <UnityFail@@Base+0x216>
  407378:	add    QWORD PTR [rip+0xbd00],0x1        # 413080 <__bss_start@@Base+0xf2c>
  407380:	vmovdqa xmm0,XMMWORD PTR [rip+0xb048]        # 4123d0 <__bss_start@@Base+0x27c>
  407388:	vpcmpeqd xmm1,xmm1,xmm1
  40738c:	vpsubq xmm0,xmm0,xmm1
  407390:	vmovdqa XMMWORD PTR [rip+0xb038],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  407398:	mov    rsi,QWORD PTR [r13+0x0]
  40739c:	mov    edi,0x20
  4073a1:	call   403130 <putc@plt>
  4073a6:	add    QWORD PTR [rip+0xbcda],0x1        # 413088 <__bss_start@@Base+0xf34>
  4073ae:	mov    rdi,r14
  4073b1:	call   4049b0 <UnityPrint@@Base>
  4073b6:	mov    QWORD PTR [r15+0x40],0x1
  4073be:	add    r15,0x50
  4073c2:	mov    esi,0x1
  4073c7:	mov    rdi,r15
  4073ca:	call   4031f0 <longjmp@plt>
  4073cf:	nop

00000000004073d0 <UnityIgnore@@Base>:
  4073d0:	push   r15
  4073d2:	push   r14
  4073d4:	push   r13
  4073d6:	push   r12
  4073d8:	push   rbx
  4073d9:	add    QWORD PTR [rip+0xbcaf],0x1        # 413090 <__bss_start@@Base+0xf3c>
  4073e1:	mov    r15,rsi
  4073e4:	lea    r12,[rip+0xbca5]        # 413090 <__bss_start@@Base+0xf3c>
  4073eb:	lea    rbx,[rip+0xc42e]        # 413820 <Unity@@Base>
  4073f2:	mov    rax,QWORD PTR [rbx+0x48]
  4073f6:	mov    rcx,QWORD PTR [rbx+0x40]
  4073fa:	xor    edx,edx
  4073fc:	mov    rsi,rax
  4073ff:	or     rsi,rcx
  407402:	sete   dl
  407405:	add    QWORD PTR [r12+rdx*8+0x8],0x1
  40740b:	or     rax,rcx
  40740e:	je     407422 <UnityIgnore@@Base+0x52>
  407410:	add    QWORD PTR [rip+0xbc90],0x1        # 4130a8 <__bss_start@@Base+0xf54>
  407418:	pop    rbx
  407419:	pop    r12
  40741b:	pop    r13
  40741d:	pop    r14
  40741f:	pop    r15
  407421:	ret    
  407422:	mov    r14,rdi
  407425:	mov    rdi,QWORD PTR [rbx]
  407428:	vmovdqa xmm0,XMMWORD PTR [rip+0xb2c0]        # 4126f0 <__bss_start@@Base+0x59c>
  407430:	vpcmpeqd xmm1,xmm1,xmm1
  407434:	vpsubq xmm0,xmm0,xmm1
  407438:	vmovdqa XMMWORD PTR [rip+0xb2b0],xmm0        # 4126f0 <__bss_start@@Base+0x59c>
  407440:	call   4049b0 <UnityPrint@@Base>
  407445:	vmovdqa xmm0,XMMWORD PTR [rip+0xaf83]        # 4123d0 <__bss_start@@Base+0x27c>
  40744d:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x501b]        # 40c470 <_IO_stdin_used@@Base+0x470>
  407455:	vmovdqa XMMWORD PTR [rip+0xaf73],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  40745d:	mov    r13,QWORD PTR [rip+0xab7c]        # 411fe0 <stdout@GLIBC_2.2.5>
  407464:	mov    rsi,QWORD PTR [r13+0x0]
  407468:	mov    edi,0x3a
  40746d:	call   403130 <putc@plt>
  407472:	mov    rdi,r15
  407475:	call   404f80 <UnityPrintNumber@@Base>
  40747a:	vmovdqa xmm0,XMMWORD PTR [rip+0xaf4e]        # 4123d0 <__bss_start@@Base+0x27c>
  407482:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x4fe6]        # 40c470 <_IO_stdin_used@@Base+0x470>
  40748a:	vmovdqa XMMWORD PTR [rip+0xaf3e],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  407492:	mov    rsi,QWORD PTR [r13+0x0]
  407496:	mov    edi,0x3a
  40749b:	call   403130 <putc@plt>
  4074a0:	mov    rdi,QWORD PTR [rbx+0x8]
  4074a4:	call   4049b0 <UnityPrint@@Base>
  4074a9:	vmovdqa xmm0,XMMWORD PTR [rip+0xaf1f]        # 4123d0 <__bss_start@@Base+0x27c>
  4074b1:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x4fb7]        # 40c470 <_IO_stdin_used@@Base+0x470>
  4074b9:	vmovdqa XMMWORD PTR [rip+0xaf0f],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  4074c1:	mov    rsi,QWORD PTR [r13+0x0]
  4074c5:	mov    edi,0x3a
  4074ca:	call   403130 <putc@plt>
  4074cf:	lea    rdi,[rip+0x4fe7]        # 40c4bd <UnityStrIgnore@@Base>
  4074d6:	call   4049b0 <UnityPrint@@Base>
  4074db:	xor    eax,eax
  4074dd:	test   r14,r14
  4074e0:	sete   al
  4074e3:	add    QWORD PTR [r12+rax*8+0x20],0x1
  4074e9:	test   r14,r14
  4074ec:	je     40754a <UnityIgnore@@Base+0x17a>
  4074ee:	add    QWORD PTR [rip+0xbbca],0x1        # 4130c0 <__bss_start@@Base+0xf6c>
  4074f6:	vmovdqa xmm0,XMMWORD PTR [rip+0xaed2]        # 4123d0 <__bss_start@@Base+0x27c>
  4074fe:	vpcmpeqd xmm1,xmm1,xmm1
  407502:	vpsubq xmm0,xmm0,xmm1
  407506:	vmovdqa XMMWORD PTR [rip+0xaec2],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  40750e:	mov    rsi,QWORD PTR [r13+0x0]
  407512:	mov    edi,0x3a
  407517:	call   403130 <putc@plt>
  40751c:	vmovdqa xmm0,XMMWORD PTR [rip+0xaeac]        # 4123d0 <__bss_start@@Base+0x27c>
  407524:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x4f44]        # 40c470 <_IO_stdin_used@@Base+0x470>
  40752c:	vmovdqa XMMWORD PTR [rip+0xae9c],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  407534:	mov    rsi,QWORD PTR [r13+0x0]
  407538:	mov    edi,0x20
  40753d:	call   403130 <putc@plt>
  407542:	mov    rdi,r14
  407545:	call   4049b0 <UnityPrint@@Base>
  40754a:	mov    QWORD PTR [rbx+0x48],0x1
  407552:	add    rbx,0x50
  407556:	mov    esi,0x1
  40755b:	mov    rdi,rbx
  40755e:	call   4031f0 <longjmp@plt>
  407563:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40756d:	nop    DWORD PTR [rax]

0000000000407570 <setUp@@Base>:
  407570:	vmovdqa xmm0,XMMWORD PTR [rip+0xbb58]        # 4130d0 <__bss_start@@Base+0xf7c>
  407578:	vpcmpeqd xmm1,xmm1,xmm1
  40757c:	vpsubq xmm0,xmm0,xmm1
  407580:	vmovdqa XMMWORD PTR [rip+0xbb48],xmm0        # 4130d0 <__bss_start@@Base+0xf7c>
  407588:	ret    
  407589:	nop    DWORD PTR [rax+0x0]

0000000000407590 <tearDown@@Base>:
  407590:	vmovdqa xmm0,XMMWORD PTR [rip+0xbb48]        # 4130e0 <__bss_start@@Base+0xf8c>
  407598:	vpcmpeqd xmm1,xmm1,xmm1
  40759c:	vpsubq xmm0,xmm0,xmm1
  4075a0:	vmovdqa XMMWORD PTR [rip+0xbb38],xmm0        # 4130e0 <__bss_start@@Base+0xf8c>
  4075a8:	ret    
  4075a9:	nop    DWORD PTR [rax+0x0]

00000000004075b0 <UnityDefaultTestRun@@Base>:
  4075b0:	push   r15
  4075b2:	push   r14
  4075b4:	push   r12
  4075b6:	push   rbx
  4075b7:	push   rax
  4075b8:	add    QWORD PTR [rip+0xbb30],0x1        # 4130f0 <__bss_start@@Base+0xf9c>
  4075c0:	mov    r14,rdi
  4075c3:	lea    r15,[rip+0xbb26]        # 4130f0 <__bss_start@@Base+0xf9c>
  4075ca:	lea    r12,[rip+0xc24f]        # 413820 <Unity@@Base>
  4075d1:	mov    QWORD PTR [r12+0x8],rsi
  4075d6:	movsxd rax,edx
  4075d9:	mov    QWORD PTR [r12+0x20],rax
  4075de:	add    QWORD PTR [r12+0x28],0x1
  4075e4:	vxorps xmm0,xmm0,xmm0
  4075e8:	vmovups XMMWORD PTR [r12+0x10],xmm0
  4075ef:	lea    rbx,[r12+0x50]
  4075f4:	mov    rdi,rbx
  4075f7:	call   403120 <_setjmp@plt>
  4075fc:	xor    ecx,ecx
  4075fe:	test   eax,eax
  407600:	setne  cl
  407603:	add    QWORD PTR [r15+rcx*8+0x8],0x1
  407609:	test   eax,eax
  40760b:	jne    40761d <UnityDefaultTestRun@@Base+0x6d>
  40760d:	add    QWORD PTR [rip+0xbaf3],0x1        # 413108 <__bss_start@@Base+0xfb4>
  407615:	call   407570 <setUp@@Base>
  40761a:	call   r14
  40761d:	mov    rdi,rbx
  407620:	call   403120 <_setjmp@plt>
  407625:	test   eax,eax
  407627:	setne  al
  40762a:	cmp    QWORD PTR [r12+0x48],0x0
  407630:	setne  cl
  407633:	or     cl,al
  407635:	mov    eax,ecx
  407637:	xor    al,0x1
  407639:	movzx  eax,al
  40763c:	add    QWORD PTR [r15+rax*8+0x20],0x1
  407642:	test   cl,cl
  407644:	jne    407653 <UnityDefaultTestRun@@Base+0xa3>
  407646:	add    QWORD PTR [rip+0xbad2],0x1        # 413120 <__bss_start@@Base+0xfcc>
  40764e:	call   407590 <tearDown@@Base>
  407653:	add    QWORD PTR [rip+0xbacd],0x1        # 413128 <__bss_start@@Base+0xfd4>
  40765b:	call   405460 <UnityConcludeTest@@Base>
  407660:	add    rsp,0x8
  407664:	pop    rbx
  407665:	pop    r12
  407667:	pop    r14
  407669:	pop    r15
  40766b:	ret    
  40766c:	nop    DWORD PTR [rax+0x0]

0000000000407670 <UnityBegin@@Base>:
  407670:	vmovdqa xmm0,XMMWORD PTR [rip+0xbab8]        # 413130 <__bss_start@@Base+0xfdc>
  407678:	vpcmpeqd xmm1,xmm1,xmm1
  40767c:	vpsubq xmm0,xmm0,xmm1
  407680:	vmovdqa XMMWORD PTR [rip+0xbaa8],xmm0        # 413130 <__bss_start@@Base+0xfdc>
  407688:	lea    rax,[rip+0xc191]        # 413820 <Unity@@Base>
  40768f:	mov    QWORD PTR [rax],rdi
  407692:	vpxor  xmm0,xmm0,xmm0
  407696:	vmovdqu YMMWORD PTR [rax+0x28],ymm0
  40769b:	vmovdqu YMMWORD PTR [rax+0x8],ymm0
  4076a0:	mov    QWORD PTR [rax+0x48],0x0
  4076a8:	vzeroupper 
  4076ab:	ret    
  4076ac:	nop    DWORD PTR [rax+0x0]

00000000004076b0 <UnityEnd@@Base>:
  4076b0:	push   r15
  4076b2:	push   r14
  4076b4:	push   rbx
  4076b5:	lea    r15,[rip+0xba84]        # 413140 <__bss_start@@Base+0xfec>
  4076bc:	add    QWORD PTR [rip+0xba7c],0x1        # 413140 <__bss_start@@Base+0xfec>
  4076c4:	vmovdqa xmm0,XMMWORD PTR [rip+0xad04]        # 4123d0 <__bss_start@@Base+0x27c>
  4076cc:	vpcmpeqd xmm1,xmm1,xmm1
  4076d0:	vpsubq xmm0,xmm0,xmm1
  4076d4:	vmovdqa XMMWORD PTR [rip+0xacf4],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  4076dc:	mov    r14,QWORD PTR [rip+0xa8fd]        # 411fe0 <stdout@GLIBC_2.2.5>
  4076e3:	mov    rsi,QWORD PTR [r14]
  4076e6:	mov    edi,0xa
  4076eb:	call   403130 <putc@plt>
  4076f0:	lea    rdi,[rip+0x4f89]        # 40c680 <UnityStrBreaker@@Base>
  4076f7:	call   4049b0 <UnityPrint@@Base>
  4076fc:	vmovdqa xmm0,XMMWORD PTR [rip+0xaccc]        # 4123d0 <__bss_start@@Base+0x27c>
  407704:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x4d64]        # 40c470 <_IO_stdin_used@@Base+0x470>
  40770c:	vmovdqa XMMWORD PTR [rip+0xacbc],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  407714:	mov    rsi,QWORD PTR [r14]
  407717:	mov    edi,0xa
  40771c:	call   403130 <putc@plt>
  407721:	lea    rbx,[rip+0xc0f8]        # 413820 <Unity@@Base>
  407728:	mov    rdi,QWORD PTR [rbx+0x28]
  40772c:	call   404f80 <UnityPrintNumber@@Base>
  407731:	lea    rdi,[rip+0x4f60]        # 40c698 <UnityStrResultsTests@@Base>
  407738:	call   4049b0 <UnityPrint@@Base>
  40773d:	mov    rdi,QWORD PTR [rbx+0x30]
  407741:	call   404f80 <UnityPrintNumber@@Base>
  407746:	lea    rdi,[rip+0x4f53]        # 40c6a0 <UnityStrResultsFailures@@Base>
  40774d:	call   4049b0 <UnityPrint@@Base>
  407752:	mov    rdi,QWORD PTR [rbx+0x38]
  407756:	call   404f80 <UnityPrintNumber@@Base>
  40775b:	lea    rdi,[rip+0x4f49]        # 40c6ab <UnityStrResultsIgnored@@Base>
  407762:	call   4049b0 <UnityPrint@@Base>
  407767:	vmovdqa xmm0,XMMWORD PTR [rip+0xac61]        # 4123d0 <__bss_start@@Base+0x27c>
  40776f:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x4cf9]        # 40c470 <_IO_stdin_used@@Base+0x470>
  407777:	vmovdqa XMMWORD PTR [rip+0xac51],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  40777f:	mov    rsi,QWORD PTR [r14]
  407782:	mov    edi,0xa
  407787:	call   403130 <putc@plt>
  40778c:	mov    rax,QWORD PTR [rbx+0x30]
  407790:	xor    ecx,ecx
  407792:	test   rax,rax
  407795:	setne  cl
  407798:	add    QWORD PTR [r15+rcx*8+0x8],0x1
  40779e:	test   rax,rax
  4077a1:	je     4077cc <UnityEnd@@Base+0x11c>
  4077a3:	add    QWORD PTR [rip+0xb9b5],0x1        # 413160 <__bss_start@@Base+0x100c>
  4077ab:	vmovdqa xmm0,XMMWORD PTR [rip+0xaecd]        # 412680 <__bss_start@@Base+0x52c>
  4077b3:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x4cb5]        # 40c470 <_IO_stdin_used@@Base+0x470>
  4077bb:	vmovdqa XMMWORD PTR [rip+0xaebd],xmm0        # 412680 <__bss_start@@Base+0x52c>
  4077c3:	lea    rdi,[rip+0x4cee]        # 40c4b8 <UnityStrFail@@Base>
  4077ca:	jmp    4077f3 <UnityEnd@@Base+0x143>
  4077cc:	add    QWORD PTR [rip+0xb984],0x1        # 413158 <__bss_start@@Base+0x1004>
  4077d4:	vmovdqa xmm0,XMMWORD PTR [rip+0xaeb4]        # 412690 <__bss_start@@Base+0x53c>
  4077dc:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x4c8c]        # 40c470 <_IO_stdin_used@@Base+0x470>
  4077e4:	vmovdqa XMMWORD PTR [rip+0xaea4],xmm0        # 412690 <__bss_start@@Base+0x53c>
  4077ec:	lea    rdi,[rip+0x4cbd]        # 40c4b0 <UnityStrOk@@Base>
  4077f3:	call   4049b0 <UnityPrint@@Base>
  4077f8:	add    QWORD PTR [rip+0xb968],0x1        # 413168 <__bss_start@@Base+0x1014>
  407800:	vmovdqa xmm0,XMMWORD PTR [rip+0xabc8]        # 4123d0 <__bss_start@@Base+0x27c>
  407808:	vpcmpeqd xmm1,xmm1,xmm1
  40780c:	vpsubq xmm0,xmm0,xmm1
  407810:	vmovdqa XMMWORD PTR [rip+0xabb8],xmm0        # 4123d0 <__bss_start@@Base+0x27c>
  407818:	mov    rsi,QWORD PTR [r14]
  40781b:	mov    edi,0xa
  407820:	call   403130 <putc@plt>
  407825:	mov    eax,DWORD PTR [rbx+0x30]
  407828:	pop    rbx
  407829:	pop    r14
  40782b:	pop    r15
  40782d:	ret    
  40782e:	xchg   ax,ax
  407830:	mov    eax,DWORD PTR [rdi]
  407832:	mov    ecx,0xffffffff
  407837:	cmp    rax,rcx
  40783a:	je     407849 <UnityEnd@@Base+0x199>
  40783c:	mov    rax,QWORD PTR [rsi+rax*8]
  407840:	test   rax,rax
  407843:	je     407849 <UnityEnd@@Base+0x199>
  407845:	add    QWORD PTR [rax],0x1
  407849:	ret    
  40784a:	nop    WORD PTR [rax+rax*1+0x0]
  407850:	push   r15
  407852:	push   r14
  407854:	push   rbx
  407855:	lea    rdi,[rip+0x4eb4]        # 40c710 <UnitySizeMask@@Base+0x40>
  40785c:	lea    rsi,[rip+0x48cd]        # 40c130 <_IO_stdin_used@@Base+0x130>
  407863:	mov    edx,0x5876e11c
  407868:	call   409500 <next@@Base+0x10c0>
  40786d:	xor    ebx,ebx
  40786f:	lea    r14,[rip+0x97ca]        # 411040 <UnitySizeMask@@Base+0x4970>
  407876:	lea    r15,[rip+0x9c23]        # 4114a0 <UnitySizeMask@@Base+0x4dd0>
  40787d:	nop    DWORD PTR [rax]
  407880:	mov    edi,DWORD PTR [r14+rbx*2]
  407884:	mov    rsi,QWORD PTR [r14+rbx*2+0x8]
  407889:	mov    edx,DWORD PTR [r14+rbx*2+0x10]
  40788e:	mov    r8d,DWORD PTR [r14+rbx*2+0x18]
  407893:	mov    ecx,DWORD PTR [r14+rbx*2+0x14]
  407898:	call   409950 <next@@Base+0x1510>
  40789d:	mov    edi,DWORD PTR [rbx+r15*1]
  4078a1:	mov    rsi,QWORD PTR [rbx+r15*1+0x8]
  4078a6:	call   409d80 <next@@Base+0x1940>
  4078ab:	add    rbx,0x10
  4078af:	cmp    rbx,0x230
  4078b6:	jne    407880 <UnityEnd@@Base+0x1d0>
  4078b8:	call   40a1a0 <next@@Base+0x1d60>
  4078bd:	pop    rbx
  4078be:	pop    r14
  4078c0:	pop    r15
  4078c2:	jmp    40a940 <next@@Base+0x2500>
  4078c7:	nop    WORD PTR [rax+rax*1+0x0]
  4078d0:	push   rax
  4078d1:	call   407850 <UnityEnd@@Base+0x1a0>
  4078d6:	vxorps xmm0,xmm0,xmm0
  4078da:	vmovups YMMWORD PTR [rip+0xaac6],ymm0        # 4123a8 <__bss_start@@Base+0x254>
  4078e2:	vmovups YMMWORD PTR [rip+0xaaa6],ymm0        # 412390 <__bss_start@@Base+0x23c>
  4078ea:	vmovups YMMWORD PTR [rip+0xaa7e],ymm0        # 412370 <__bss_start@@Base+0x21c>
  4078f2:	vmovups YMMWORD PTR [rip+0xaa56],ymm0        # 412350 <__bss_start@@Base+0x1fc>
  4078fa:	vmovups YMMWORD PTR [rip+0xaa2e],ymm0        # 412330 <__bss_start@@Base+0x1dc>
  407902:	vxorps xmm1,xmm1,xmm1
  407906:	vmovaps XMMWORD PTR [rip+0xaac2],xmm1        # 4123d0 <__bss_start@@Base+0x27c>
  40790e:	vmovups YMMWORD PTR [rip+0xaafa],ymm0        # 412410 <__bss_start@@Base+0x2bc>
  407916:	vmovups YMMWORD PTR [rip+0xaae2],ymm0        # 412400 <__bss_start@@Base+0x2ac>
  40791e:	vmovups YMMWORD PTR [rip+0xaaba],ymm0        # 4123e0 <__bss_start@@Base+0x28c>
  407926:	vmovups YMMWORD PTR [rip+0xab82],ymm0        # 4124b0 <__bss_start@@Base+0x35c>
  40792e:	vmovups YMMWORD PTR [rip+0xab5a],ymm0        # 412490 <__bss_start@@Base+0x33c>
  407936:	vmovups YMMWORD PTR [rip+0xab32],ymm0        # 412470 <__bss_start@@Base+0x31c>
  40793e:	vmovups YMMWORD PTR [rip+0xab0a],ymm0        # 412450 <__bss_start@@Base+0x2fc>
  407946:	vmovups YMMWORD PTR [rip+0xaae2],ymm0        # 412430 <__bss_start@@Base+0x2dc>
  40794e:	vmovups YMMWORD PTR [rip+0xabaa],ymm0        # 412500 <__bss_start@@Base+0x3ac>
  407956:	mov    QWORD PTR [rip+0xab6f],0x0        # 4124d0 <__bss_start@@Base+0x37c>
  407961:	vmovups YMMWORD PTR [rip+0xab77],ymm0        # 4124e0 <__bss_start@@Base+0x38c>
  407969:	mov    QWORD PTR [rip+0xabac],0x0        # 412520 <__bss_start@@Base+0x3cc>
  407974:	vmovups YMMWORD PTR [rip+0xac0c],ymm0        # 412588 <__bss_start@@Base+0x434>
  40797c:	vmovups YMMWORD PTR [rip+0xabac],ymm0        # 412530 <__bss_start@@Base+0x3dc>
  407984:	vmovups YMMWORD PTR [rip+0xabe4],ymm0        # 412570 <__bss_start@@Base+0x41c>
  40798c:	vmovups YMMWORD PTR [rip+0xabbc],ymm0        # 412550 <__bss_start@@Base+0x3fc>
  407994:	vmovups YMMWORD PTR [rip+0xac4c],ymm0        # 4125e8 <__bss_start@@Base+0x494>
  40799c:	vmovups YMMWORD PTR [rip+0xac2c],ymm0        # 4125d0 <__bss_start@@Base+0x47c>
  4079a4:	vmovups YMMWORD PTR [rip+0xac04],ymm0        # 4125b0 <__bss_start@@Base+0x45c>
  4079ac:	vmovups YMMWORD PTR [rip+0xac9c],ymm0        # 412650 <__bss_start@@Base+0x4fc>
  4079b4:	vmovups YMMWORD PTR [rip+0xac74],ymm0        # 412630 <__bss_start@@Base+0x4dc>
  4079bc:	vmovups YMMWORD PTR [rip+0xac4c],ymm0        # 412610 <__bss_start@@Base+0x4bc>
  4079c4:	vmovaps XMMWORD PTR [rip+0xacb4],xmm1        # 412680 <__bss_start@@Base+0x52c>
  4079cc:	vmovaps XMMWORD PTR [rip+0xacbc],xmm1        # 412690 <__bss_start@@Base+0x53c>
  4079d4:	vmovups YMMWORD PTR [rip+0xace4],ymm0        # 4126c0 <__bss_start@@Base+0x56c>
  4079dc:	mov    QWORD PTR [rip+0xac89],0x0        # 412670 <__bss_start@@Base+0x51c>
  4079e7:	vmovups YMMWORD PTR [rip+0xacb1],ymm0        # 4126a0 <__bss_start@@Base+0x54c>
  4079ef:	mov    QWORD PTR [rip+0xace6],0x0        # 4126e0 <__bss_start@@Base+0x58c>
  4079fa:	vmovaps XMMWORD PTR [rip+0xacee],xmm1        # 4126f0 <__bss_start@@Base+0x59c>
  407a02:	vmovups YMMWORD PTR [rip+0xad06],ymm0        # 412710 <__bss_start@@Base+0x5bc>
  407a0a:	vmovups YMMWORD PTR [rip+0xacee],ymm0        # 412700 <__bss_start@@Base+0x5ac>
  407a12:	vmovaps XMMWORD PTR [rip+0xad16],xmm1        # 412730 <__bss_start@@Base+0x5dc>
  407a1a:	vmovups YMMWORD PTR [rip+0xad56],ymm0        # 412778 <__bss_start@@Base+0x624>
  407a22:	vmovups YMMWORD PTR [rip+0xad36],ymm0        # 412760 <__bss_start@@Base+0x60c>
  407a2a:	vmovups YMMWORD PTR [rip+0xad0e],ymm0        # 412740 <__bss_start@@Base+0x5ec>
  407a32:	vmovups YMMWORD PTR [rip+0xad76],ymm0        # 4127b0 <__bss_start@@Base+0x65c>
  407a3a:	vmovups YMMWORD PTR [rip+0xad5e],ymm0        # 4127a0 <__bss_start@@Base+0x64c>
  407a42:	vmovups YMMWORD PTR [rip+0xaec6],ymm0        # 412910 <__bss_start@@Base+0x7bc>
  407a4a:	vmovups YMMWORD PTR [rip+0xae9e],ymm0        # 4128f0 <__bss_start@@Base+0x79c>
  407a52:	vmovups YMMWORD PTR [rip+0xae76],ymm0        # 4128d0 <__bss_start@@Base+0x77c>
  407a5a:	vmovups YMMWORD PTR [rip+0xae4e],ymm0        # 4128b0 <__bss_start@@Base+0x75c>
  407a62:	vmovups YMMWORD PTR [rip+0xae26],ymm0        # 412890 <__bss_start@@Base+0x73c>
  407a6a:	vmovups YMMWORD PTR [rip+0xadfe],ymm0        # 412870 <__bss_start@@Base+0x71c>
  407a72:	vmovups YMMWORD PTR [rip+0xadd6],ymm0        # 412850 <__bss_start@@Base+0x6fc>
  407a7a:	vmovups YMMWORD PTR [rip+0xadae],ymm0        # 412830 <__bss_start@@Base+0x6dc>
  407a82:	vmovups YMMWORD PTR [rip+0xad86],ymm0        # 412810 <__bss_start@@Base+0x6bc>
  407a8a:	vmovups YMMWORD PTR [rip+0xad5e],ymm0        # 4127f0 <__bss_start@@Base+0x69c>
  407a92:	vmovups YMMWORD PTR [rip+0xad36],ymm0        # 4127d0 <__bss_start@@Base+0x67c>
  407a9a:	vmovups YMMWORD PTR [rip+0xaebe],ymm0        # 412960 <__bss_start@@Base+0x80c>
  407aa2:	vmovups YMMWORD PTR [rip+0xaea6],ymm0        # 412950 <__bss_start@@Base+0x7fc>
  407aaa:	vmovups YMMWORD PTR [rip+0xae7e],ymm0        # 412930 <__bss_start@@Base+0x7dc>
  407ab2:	vmovups YMMWORD PTR [rip+0xaf66],ymm0        # 412a20 <__bss_start@@Base+0x8cc>
  407aba:	vmovups YMMWORD PTR [rip+0xaf3e],ymm0        # 412a00 <__bss_start@@Base+0x8ac>
  407ac2:	vmovups YMMWORD PTR [rip+0xaf16],ymm0        # 4129e0 <__bss_start@@Base+0x88c>
  407aca:	vmovups YMMWORD PTR [rip+0xaeee],ymm0        # 4129c0 <__bss_start@@Base+0x86c>
  407ad2:	vmovups YMMWORD PTR [rip+0xaec6],ymm0        # 4129a0 <__bss_start@@Base+0x84c>
  407ada:	vmovups YMMWORD PTR [rip+0xae9e],ymm0        # 412980 <__bss_start@@Base+0x82c>
  407ae2:	vmovups YMMWORD PTR [rip+0xafb6],ymm0        # 412aa0 <__bss_start@@Base+0x94c>
  407aea:	vmovups YMMWORD PTR [rip+0xaf8e],ymm0        # 412a80 <__bss_start@@Base+0x92c>
  407af2:	vmovups YMMWORD PTR [rip+0xaf66],ymm0        # 412a60 <__bss_start@@Base+0x90c>
  407afa:	vmovups YMMWORD PTR [rip+0xaf3e],ymm0        # 412a40 <__bss_start@@Base+0x8ec>
  407b02:	vmovups YMMWORD PTR [rip+0xb08e],ymm0        # 412b98 <__bss_start@@Base+0xa44>
  407b0a:	vmovups YMMWORD PTR [rip+0xb06e],ymm0        # 412b80 <__bss_start@@Base+0xa2c>
  407b12:	vmovups YMMWORD PTR [rip+0xb046],ymm0        # 412b60 <__bss_start@@Base+0xa0c>
  407b1a:	vmovups YMMWORD PTR [rip+0xb01e],ymm0        # 412b40 <__bss_start@@Base+0x9ec>
  407b22:	vmovups YMMWORD PTR [rip+0xaff6],ymm0        # 412b20 <__bss_start@@Base+0x9cc>
  407b2a:	vmovups YMMWORD PTR [rip+0xafce],ymm0        # 412b00 <__bss_start@@Base+0x9ac>
  407b32:	vmovups YMMWORD PTR [rip+0xafa6],ymm0        # 412ae0 <__bss_start@@Base+0x98c>
  407b3a:	vmovups YMMWORD PTR [rip+0xaf7e],ymm0        # 412ac0 <__bss_start@@Base+0x96c>
  407b42:	vmovups YMMWORD PTR [rip+0xb0d6],ymm0        # 412c20 <__bss_start@@Base+0xacc>
  407b4a:	vmovups YMMWORD PTR [rip+0xb0ae],ymm0        # 412c00 <__bss_start@@Base+0xaac>
  407b52:	vmovups YMMWORD PTR [rip+0xb086],ymm0        # 412be0 <__bss_start@@Base+0xa8c>
  407b5a:	vmovups YMMWORD PTR [rip+0xb05e],ymm0        # 412bc0 <__bss_start@@Base+0xa6c>
  407b62:	vmovups YMMWORD PTR [rip+0xb166],ymm0        # 412cd0 <__bss_start@@Base+0xb7c>
  407b6a:	vmovups YMMWORD PTR [rip+0xb14e],ymm0        # 412cc0 <__bss_start@@Base+0xb6c>
  407b72:	vmovups YMMWORD PTR [rip+0xb126],ymm0        # 412ca0 <__bss_start@@Base+0xb4c>
  407b7a:	vmovups YMMWORD PTR [rip+0xb0fe],ymm0        # 412c80 <__bss_start@@Base+0xb2c>
  407b82:	vmovups YMMWORD PTR [rip+0xb0d6],ymm0        # 412c60 <__bss_start@@Base+0xb0c>
  407b8a:	vmovups YMMWORD PTR [rip+0xb0ae],ymm0        # 412c40 <__bss_start@@Base+0xaec>
  407b92:	vmovups YMMWORD PTR [rip+0xb186],ymm0        # 412d20 <__bss_start@@Base+0xbcc>
  407b9a:	vmovups YMMWORD PTR [rip+0xb16e],ymm0        # 412d10 <__bss_start@@Base+0xbbc>
  407ba2:	vmovups YMMWORD PTR [rip+0xb146],ymm0        # 412cf0 <__bss_start@@Base+0xb9c>
  407baa:	vmovups YMMWORD PTR [rip+0xb22e],ymm0        # 412de0 <__bss_start@@Base+0xc8c>
  407bb2:	vmovups YMMWORD PTR [rip+0xb206],ymm0        # 412dc0 <__bss_start@@Base+0xc6c>
  407bba:	vmovups YMMWORD PTR [rip+0xb1de],ymm0        # 412da0 <__bss_start@@Base+0xc4c>
  407bc2:	vmovups YMMWORD PTR [rip+0xb1b6],ymm0        # 412d80 <__bss_start@@Base+0xc2c>
  407bca:	vmovups YMMWORD PTR [rip+0xb18e],ymm0        # 412d60 <__bss_start@@Base+0xc0c>
  407bd2:	vmovups YMMWORD PTR [rip+0xb166],ymm0        # 412d40 <__bss_start@@Base+0xbec>
  407bda:	vmovups YMMWORD PTR [rip+0xb24e],ymm0        # 412e30 <__bss_start@@Base+0xcdc>
  407be2:	vmovups YMMWORD PTR [rip+0xb236],ymm0        # 412e20 <__bss_start@@Base+0xccc>
  407bea:	vmovups YMMWORD PTR [rip+0xb20e],ymm0        # 412e00 <__bss_start@@Base+0xcac>
  407bf2:	vmovups YMMWORD PTR [rip+0xb346],ymm0        # 412f40 <__bss_start@@Base+0xdec>
  407bfa:	vmovups YMMWORD PTR [rip+0xb32e],ymm0        # 412f30 <__bss_start@@Base+0xddc>
  407c02:	vmovups YMMWORD PTR [rip+0xb306],ymm0        # 412f10 <__bss_start@@Base+0xdbc>
  407c0a:	vmovups YMMWORD PTR [rip+0xb2de],ymm0        # 412ef0 <__bss_start@@Base+0xd9c>
  407c12:	vmovups YMMWORD PTR [rip+0xb2b6],ymm0        # 412ed0 <__bss_start@@Base+0xd7c>
  407c1a:	vmovups YMMWORD PTR [rip+0xb28e],ymm0        # 412eb0 <__bss_start@@Base+0xd5c>
  407c22:	vmovups YMMWORD PTR [rip+0xb266],ymm0        # 412e90 <__bss_start@@Base+0xd3c>
  407c2a:	vmovups YMMWORD PTR [rip+0xb23e],ymm0        # 412e70 <__bss_start@@Base+0xd1c>
  407c32:	vmovups YMMWORD PTR [rip+0xb216],ymm0        # 412e50 <__bss_start@@Base+0xcfc>
  407c3a:	vmovups YMMWORD PTR [rip+0xb3ae],ymm0        # 412ff0 <__bss_start@@Base+0xe9c>
  407c42:	vmovups YMMWORD PTR [rip+0xb396],ymm0        # 412fe0 <__bss_start@@Base+0xe8c>
  407c4a:	vmovups YMMWORD PTR [rip+0xb36e],ymm0        # 412fc0 <__bss_start@@Base+0xe6c>
  407c52:	vmovups YMMWORD PTR [rip+0xb346],ymm0        # 412fa0 <__bss_start@@Base+0xe4c>
  407c5a:	vmovups YMMWORD PTR [rip+0xb31e],ymm0        # 412f80 <__bss_start@@Base+0xe2c>
  407c62:	vmovups YMMWORD PTR [rip+0xb2f6],ymm0        # 412f60 <__bss_start@@Base+0xe0c>
  407c6a:	vmovups YMMWORD PTR [rip+0xb3fe],ymm0        # 413070 <__bss_start@@Base+0xf1c>
  407c72:	vmovups YMMWORD PTR [rip+0xb3d6],ymm0        # 413050 <__bss_start@@Base+0xefc>
  407c7a:	vmovups YMMWORD PTR [rip+0xb3ae],ymm0        # 413030 <__bss_start@@Base+0xedc>
  407c82:	vmovups YMMWORD PTR [rip+0xb386],ymm0        # 413010 <__bss_start@@Base+0xebc>
  407c8a:	vmovups YMMWORD PTR [rip+0xb416],ymm0        # 4130a8 <__bss_start@@Base+0xf54>
  407c92:	vmovups YMMWORD PTR [rip+0xb3f6],ymm0        # 413090 <__bss_start@@Base+0xf3c>
  407c9a:	vmovaps XMMWORD PTR [rip+0xb42e],xmm1        # 4130d0 <__bss_start@@Base+0xf7c>
  407ca2:	vmovaps XMMWORD PTR [rip+0xb436],xmm1        # 4130e0 <__bss_start@@Base+0xf8c>
  407caa:	vmovups YMMWORD PTR [rip+0xb45e],ymm0        # 413110 <__bss_start@@Base+0xfbc>
  407cb2:	vmovups YMMWORD PTR [rip+0xb436],ymm0        # 4130f0 <__bss_start@@Base+0xf9c>
  407cba:	vmovaps XMMWORD PTR [rip+0xb46e],xmm1        # 413130 <__bss_start@@Base+0xfdc>
  407cc2:	vmovups YMMWORD PTR [rip+0xb486],ymm0        # 413150 <__bss_start@@Base+0xffc>
  407cca:	vmovups YMMWORD PTR [rip+0xb46e],ymm0        # 413140 <__bss_start@@Base+0xfec>
  407cd2:	pop    rax
  407cd3:	vzeroupper 
  407cd6:	ret    
  407cd7:	nop    WORD PTR [rax+rax*1+0x0]
  407ce0:	lea    rdi,[rip+0xfffffffffffffb69]        # 407850 <UnityEnd@@Base+0x1a0>
  407ce7:	lea    rsi,[rip+0xfffffffffffffbe2]        # 4078d0 <UnityEnd@@Base+0x220>
  407cee:	jmp    40ad00 <__gcov_flush@@Base+0xa0>
  407cf3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407cfd:	nop    DWORD PTR [rax]

0000000000407d00 <init_token_int_type@@Base>:
  407d00:	vmovdqa xmm0,XMMWORD PTR [rip+0xb468]        # 413170 <__bss_start@@Base+0x101c>
  407d08:	vpcmpeqd xmm1,xmm1,xmm1
  407d0c:	vpsubq xmm0,xmm0,xmm1
  407d10:	vmovdqa XMMWORD PTR [rip+0xb458],xmm0        # 413170 <__bss_start@@Base+0x101c>
  407d18:	mov    DWORD PTR [rdi],0x0
  407d1e:	ret    
  407d1f:	nop

0000000000407d20 <init_token_int_value@@Base>:
  407d20:	vmovdqa xmm0,XMMWORD PTR [rip+0xb458]        # 413180 <__bss_start@@Base+0x102c>
  407d28:	vpcmpeqd xmm1,xmm1,xmm1
  407d2c:	vpsubq xmm0,xmm0,xmm1
  407d30:	vmovdqa XMMWORD PTR [rip+0xb448],xmm0        # 413180 <__bss_start@@Base+0x102c>
  407d38:	mov    DWORD PTR [rdi],0x1
  407d3e:	mov    DWORD PTR [rdi+0x4],esi
  407d41:	ret    
  407d42:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407d4c:	nop    DWORD PTR [rax+0x0]

0000000000407d50 <init_token_function@@Base>:
  407d50:	vmovdqa xmm0,XMMWORD PTR [rip+0xb438]        # 413190 <__bss_start@@Base+0x103c>
  407d58:	vpcmpeqd xmm1,xmm1,xmm1
  407d5c:	vpsubq xmm0,xmm0,xmm1
  407d60:	vmovdqa XMMWORD PTR [rip+0xb428],xmm0        # 413190 <__bss_start@@Base+0x103c>
  407d68:	mov    DWORD PTR [rdi],0x2
  407d6e:	mov    QWORD PTR [rdi+0x8],rsi
  407d72:	ret    
  407d73:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407d7d:	nop    DWORD PTR [rax]

0000000000407d80 <init_token_opar@@Base>:
  407d80:	vmovdqa xmm0,XMMWORD PTR [rip+0xb418]        # 4131a0 <__bss_start@@Base+0x104c>
  407d88:	vpcmpeqd xmm1,xmm1,xmm1
  407d8c:	vpsubq xmm0,xmm0,xmm1
  407d90:	vmovdqa XMMWORD PTR [rip+0xb408],xmm0        # 4131a0 <__bss_start@@Base+0x104c>
  407d98:	mov    DWORD PTR [rdi],0x3
  407d9e:	ret    
  407d9f:	nop

0000000000407da0 <init_token_cpar@@Base>:
  407da0:	vmovdqa xmm0,XMMWORD PTR [rip+0xb408]        # 4131b0 <__bss_start@@Base+0x105c>
  407da8:	vpcmpeqd xmm1,xmm1,xmm1
  407dac:	vpsubq xmm0,xmm0,xmm1
  407db0:	vmovdqa XMMWORD PTR [rip+0xb3f8],xmm0        # 4131b0 <__bss_start@@Base+0x105c>
  407db8:	mov    DWORD PTR [rdi],0x4
  407dbe:	ret    
  407dbf:	nop

0000000000407dc0 <init_token_obra@@Base>:
  407dc0:	vmovdqa xmm0,XMMWORD PTR [rip+0xb3f8]        # 4131c0 <__bss_start@@Base+0x106c>
  407dc8:	vpcmpeqd xmm1,xmm1,xmm1
  407dcc:	vpsubq xmm0,xmm0,xmm1
  407dd0:	vmovdqa XMMWORD PTR [rip+0xb3e8],xmm0        # 4131c0 <__bss_start@@Base+0x106c>
  407dd8:	mov    DWORD PTR [rdi],0x5
  407dde:	ret    
  407ddf:	nop

0000000000407de0 <init_token_cbra@@Base>:
  407de0:	vmovdqa xmm0,XMMWORD PTR [rip+0xb3e8]        # 4131d0 <__bss_start@@Base+0x107c>
  407de8:	vpcmpeqd xmm1,xmm1,xmm1
  407dec:	vpsubq xmm0,xmm0,xmm1
  407df0:	vmovdqa XMMWORD PTR [rip+0xb3d8],xmm0        # 4131d0 <__bss_start@@Base+0x107c>
  407df8:	mov    DWORD PTR [rdi],0x6
  407dfe:	ret    
  407dff:	nop

0000000000407e00 <init_token_return@@Base>:
  407e00:	vmovdqa xmm0,XMMWORD PTR [rip+0xb3d8]        # 4131e0 <__bss_start@@Base+0x108c>
  407e08:	vpcmpeqd xmm1,xmm1,xmm1
  407e0c:	vpsubq xmm0,xmm0,xmm1
  407e10:	vmovdqa XMMWORD PTR [rip+0xb3c8],xmm0        # 4131e0 <__bss_start@@Base+0x108c>
  407e18:	mov    DWORD PTR [rdi],0x7
  407e1e:	ret    
  407e1f:	nop

0000000000407e20 <init_token_semicolon@@Base>:
  407e20:	vmovdqa xmm0,XMMWORD PTR [rip+0xb3c8]        # 4131f0 <__bss_start@@Base+0x109c>
  407e28:	vpcmpeqd xmm1,xmm1,xmm1
  407e2c:	vpsubq xmm0,xmm0,xmm1
  407e30:	vmovdqa XMMWORD PTR [rip+0xb3b8],xmm0        # 4131f0 <__bss_start@@Base+0x109c>
  407e38:	mov    DWORD PTR [rdi],0x8
  407e3e:	ret    
  407e3f:	nop

0000000000407e40 <init_token_eof@@Base>:
  407e40:	vmovdqa xmm0,XMMWORD PTR [rip+0xb3b8]        # 413200 <__bss_start@@Base+0x10ac>
  407e48:	vpcmpeqd xmm1,xmm1,xmm1
  407e4c:	vpsubq xmm0,xmm0,xmm1
  407e50:	vmovdqa XMMWORD PTR [rip+0xb3a8],xmm0        # 413200 <__bss_start@@Base+0x10ac>
  407e58:	mov    DWORD PTR [rdi],0x9
  407e5e:	ret    
  407e5f:	nop

0000000000407e60 <init_token_if@@Base>:
  407e60:	vmovdqa xmm0,XMMWORD PTR [rip+0xb3a8]        # 413210 <__bss_start@@Base+0x10bc>
  407e68:	vpcmpeqd xmm1,xmm1,xmm1
  407e6c:	vpsubq xmm0,xmm0,xmm1
  407e70:	vmovdqa XMMWORD PTR [rip+0xb398],xmm0        # 413210 <__bss_start@@Base+0x10bc>
  407e78:	mov    DWORD PTR [rdi],0xa
  407e7e:	ret    
  407e7f:	nop

0000000000407e80 <init_token_else@@Base>:
  407e80:	vmovdqa xmm0,XMMWORD PTR [rip+0xb398]        # 413220 <__bss_start@@Base+0x10cc>
  407e88:	vpcmpeqd xmm1,xmm1,xmm1
  407e8c:	vpsubq xmm0,xmm0,xmm1
  407e90:	vmovdqa XMMWORD PTR [rip+0xb388],xmm0        # 413220 <__bss_start@@Base+0x10cc>
  407e98:	mov    DWORD PTR [rdi],0xb
  407e9e:	ret    
  407e9f:	nop

0000000000407ea0 <init_token_boolean_op@@Base>:
  407ea0:	vmovdqa xmm0,XMMWORD PTR [rip+0xb388]        # 413230 <__bss_start@@Base+0x10dc>
  407ea8:	vpcmpeqd xmm1,xmm1,xmm1
  407eac:	vpsubq xmm0,xmm0,xmm1
  407eb0:	vmovdqa XMMWORD PTR [rip+0xb378],xmm0        # 413230 <__bss_start@@Base+0x10dc>
  407eb8:	mov    DWORD PTR [rdi],0xc
  407ebe:	mov    QWORD PTR [rdi+0x8],rsi
  407ec2:	ret    
  407ec3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407ecd:	nop    DWORD PTR [rax]

0000000000407ed0 <free_token_int_type@@Base>:
  407ed0:	vmovdqa xmm0,XMMWORD PTR [rip+0xb368]        # 413240 <__bss_start@@Base+0x10ec>
  407ed8:	vpcmpeqd xmm1,xmm1,xmm1
  407edc:	vpsubq xmm0,xmm0,xmm1
  407ee0:	vmovdqa XMMWORD PTR [rip+0xb358],xmm0        # 413240 <__bss_start@@Base+0x10ec>
  407ee8:	jmp    403040 <free@plt>
  407eed:	nop    DWORD PTR [rax]

0000000000407ef0 <free_token_int_value@@Base>:
  407ef0:	vmovdqa xmm0,XMMWORD PTR [rip+0xb358]        # 413250 <__bss_start@@Base+0x10fc>
  407ef8:	vpcmpeqd xmm1,xmm1,xmm1
  407efc:	vpsubq xmm0,xmm0,xmm1
  407f00:	vmovdqa XMMWORD PTR [rip+0xb348],xmm0        # 413250 <__bss_start@@Base+0x10fc>
  407f08:	jmp    403040 <free@plt>
  407f0d:	nop    DWORD PTR [rax]

0000000000407f10 <free_token_function@@Base>:
  407f10:	vmovdqa xmm0,XMMWORD PTR [rip+0xb348]        # 413260 <__bss_start@@Base+0x110c>
  407f18:	vpcmpeqd xmm1,xmm1,xmm1
  407f1c:	vpsubq xmm0,xmm0,xmm1
  407f20:	vmovdqa XMMWORD PTR [rip+0xb338],xmm0        # 413260 <__bss_start@@Base+0x110c>
  407f28:	jmp    403040 <free@plt>
  407f2d:	nop    DWORD PTR [rax]

0000000000407f30 <free_token_opar@@Base>:
  407f30:	vmovdqa xmm0,XMMWORD PTR [rip+0xb338]        # 413270 <__bss_start@@Base+0x111c>
  407f38:	vpcmpeqd xmm1,xmm1,xmm1
  407f3c:	vpsubq xmm0,xmm0,xmm1
  407f40:	vmovdqa XMMWORD PTR [rip+0xb328],xmm0        # 413270 <__bss_start@@Base+0x111c>
  407f48:	jmp    403040 <free@plt>
  407f4d:	nop    DWORD PTR [rax]

0000000000407f50 <free_token_cpar@@Base>:
  407f50:	vmovdqa xmm0,XMMWORD PTR [rip+0xb328]        # 413280 <__bss_start@@Base+0x112c>
  407f58:	vpcmpeqd xmm1,xmm1,xmm1
  407f5c:	vpsubq xmm0,xmm0,xmm1
  407f60:	vmovdqa XMMWORD PTR [rip+0xb318],xmm0        # 413280 <__bss_start@@Base+0x112c>
  407f68:	jmp    403040 <free@plt>
  407f6d:	nop    DWORD PTR [rax]

0000000000407f70 <free_token_obra@@Base>:
  407f70:	vmovdqa xmm0,XMMWORD PTR [rip+0xb318]        # 413290 <__bss_start@@Base+0x113c>
  407f78:	vpcmpeqd xmm1,xmm1,xmm1
  407f7c:	vpsubq xmm0,xmm0,xmm1
  407f80:	vmovdqa XMMWORD PTR [rip+0xb308],xmm0        # 413290 <__bss_start@@Base+0x113c>
  407f88:	jmp    403040 <free@plt>
  407f8d:	nop    DWORD PTR [rax]

0000000000407f90 <free_token_cbra@@Base>:
  407f90:	vmovdqa xmm0,XMMWORD PTR [rip+0xb308]        # 4132a0 <__bss_start@@Base+0x114c>
  407f98:	vpcmpeqd xmm1,xmm1,xmm1
  407f9c:	vpsubq xmm0,xmm0,xmm1
  407fa0:	vmovdqa XMMWORD PTR [rip+0xb2f8],xmm0        # 4132a0 <__bss_start@@Base+0x114c>
  407fa8:	jmp    403040 <free@plt>
  407fad:	nop    DWORD PTR [rax]

0000000000407fb0 <free_token_return@@Base>:
  407fb0:	vmovdqa xmm0,XMMWORD PTR [rip+0xb2f8]        # 4132b0 <__bss_start@@Base+0x115c>
  407fb8:	vpcmpeqd xmm1,xmm1,xmm1
  407fbc:	vpsubq xmm0,xmm0,xmm1
  407fc0:	vmovdqa XMMWORD PTR [rip+0xb2e8],xmm0        # 4132b0 <__bss_start@@Base+0x115c>
  407fc8:	jmp    403040 <free@plt>
  407fcd:	nop    DWORD PTR [rax]

0000000000407fd0 <free_token_semicolon@@Base>:
  407fd0:	vmovdqa xmm0,XMMWORD PTR [rip+0xb2e8]        # 4132c0 <__bss_start@@Base+0x116c>
  407fd8:	vpcmpeqd xmm1,xmm1,xmm1
  407fdc:	vpsubq xmm0,xmm0,xmm1
  407fe0:	vmovdqa XMMWORD PTR [rip+0xb2d8],xmm0        # 4132c0 <__bss_start@@Base+0x116c>
  407fe8:	jmp    403040 <free@plt>
  407fed:	nop    DWORD PTR [rax]

0000000000407ff0 <free_token_eof@@Base>:
  407ff0:	vmovdqa xmm0,XMMWORD PTR [rip+0xb2d8]        # 4132d0 <__bss_start@@Base+0x117c>
  407ff8:	vpcmpeqd xmm1,xmm1,xmm1
  407ffc:	vpsubq xmm0,xmm0,xmm1
  408000:	vmovdqa XMMWORD PTR [rip+0xb2c8],xmm0        # 4132d0 <__bss_start@@Base+0x117c>
  408008:	jmp    403040 <free@plt>
  40800d:	nop    DWORD PTR [rax]

0000000000408010 <free_token_if@@Base>:
  408010:	vmovdqa xmm0,XMMWORD PTR [rip+0xb2c8]        # 4132e0 <__bss_start@@Base+0x118c>
  408018:	vpcmpeqd xmm1,xmm1,xmm1
  40801c:	vpsubq xmm0,xmm0,xmm1
  408020:	vmovdqa XMMWORD PTR [rip+0xb2b8],xmm0        # 4132e0 <__bss_start@@Base+0x118c>
  408028:	jmp    403040 <free@plt>
  40802d:	nop    DWORD PTR [rax]

0000000000408030 <free_token_else@@Base>:
  408030:	vmovdqa xmm0,XMMWORD PTR [rip+0xb2b8]        # 4132f0 <__bss_start@@Base+0x119c>
  408038:	vpcmpeqd xmm1,xmm1,xmm1
  40803c:	vpsubq xmm0,xmm0,xmm1
  408040:	vmovdqa XMMWORD PTR [rip+0xb2a8],xmm0        # 4132f0 <__bss_start@@Base+0x119c>
  408048:	jmp    403040 <free@plt>
  40804d:	nop    DWORD PTR [rax]

0000000000408050 <free_token_boolean_op@@Base>:
  408050:	push   rbx
  408051:	mov    rbx,rdi
  408054:	lea    rax,[rip+0xb2a5]        # 413300 <__bss_start@@Base+0x11ac>
  40805b:	add    QWORD PTR [rip+0xb29d],0x1        # 413300 <__bss_start@@Base+0x11ac>
  408063:	mov    rdi,QWORD PTR [rdi+0x8]
  408067:	xor    ecx,ecx
  408069:	test   rdi,rdi
  40806c:	sete   cl
  40806f:	add    QWORD PTR [rax+rcx*8+0x8],0x1
  408075:	test   rdi,rdi
  408078:	je     408087 <free_token_boolean_op@@Base+0x37>
  40807a:	add    QWORD PTR [rip+0xb296],0x1        # 413318 <__bss_start@@Base+0x11c4>
  408082:	call   403040 <free@plt>
  408087:	add    QWORD PTR [rip+0xb291],0x1        # 413320 <__bss_start@@Base+0x11cc>
  40808f:	mov    rdi,rbx
  408092:	pop    rbx
  408093:	jmp    403040 <free@plt>
  408098:	nop    DWORD PTR [rax+rax*1+0x0]
  4080a0:	push   r15
  4080a2:	push   r14
  4080a4:	push   rbx
  4080a5:	lea    rdi,[rip+0x4a54]        # 40cb00 <UnitySizeMask@@Base+0x430>
  4080ac:	lea    rsi,[rip+0x407d]        # 40c130 <_IO_stdin_used@@Base+0x130>
  4080b3:	mov    edx,0xb7b65b46
  4080b8:	call   409500 <next@@Base+0x10c0>
  4080bd:	xor    ebx,ebx
  4080bf:	lea    r14,[rip+0x960a]        # 4116d0 <UnitySizeMask@@Base+0x5000>
  4080c6:	lea    r15,[rip+0x9943]        # 411a10 <UnitySizeMask@@Base+0x5340>
  4080cd:	nop    DWORD PTR [rax]
  4080d0:	mov    edi,DWORD PTR [r14+rbx*2]
  4080d4:	mov    rsi,QWORD PTR [r14+rbx*2+0x8]
  4080d9:	mov    edx,DWORD PTR [r14+rbx*2+0x10]
  4080de:	mov    r8d,DWORD PTR [r14+rbx*2+0x18]
  4080e3:	mov    ecx,DWORD PTR [r14+rbx*2+0x14]
  4080e8:	call   409950 <next@@Base+0x1510>
  4080ed:	mov    edi,DWORD PTR [rbx+r15*1]
  4080f1:	mov    rsi,QWORD PTR [rbx+r15*1+0x8]
  4080f6:	call   409d80 <next@@Base+0x1940>
  4080fb:	add    rbx,0x10
  4080ff:	cmp    rbx,0x1a0
  408106:	jne    4080d0 <free_token_boolean_op@@Base+0x80>
  408108:	call   40a1a0 <next@@Base+0x1d60>
  40810d:	pop    rbx
  40810e:	pop    r14
  408110:	pop    r15
  408112:	jmp    40a940 <next@@Base+0x2500>
  408117:	nop    WORD PTR [rax+rax*1+0x0]
  408120:	push   rax
  408121:	call   4080a0 <free_token_boolean_op@@Base+0x50>
  408126:	vxorps xmm0,xmm0,xmm0
  40812a:	vmovaps XMMWORD PTR [rip+0xb03e],xmm0        # 413170 <__bss_start@@Base+0x101c>
  408132:	vmovaps XMMWORD PTR [rip+0xb046],xmm0        # 413180 <__bss_start@@Base+0x102c>
  40813a:	vmovaps XMMWORD PTR [rip+0xb04e],xmm0        # 413190 <__bss_start@@Base+0x103c>
  408142:	vmovaps XMMWORD PTR [rip+0xb056],xmm0        # 4131a0 <__bss_start@@Base+0x104c>
  40814a:	vmovaps XMMWORD PTR [rip+0xb05e],xmm0        # 4131b0 <__bss_start@@Base+0x105c>
  408152:	vmovaps XMMWORD PTR [rip+0xb066],xmm0        # 4131c0 <__bss_start@@Base+0x106c>
  40815a:	vmovaps XMMWORD PTR [rip+0xb06e],xmm0        # 4131d0 <__bss_start@@Base+0x107c>
  408162:	vmovaps XMMWORD PTR [rip+0xb076],xmm0        # 4131e0 <__bss_start@@Base+0x108c>
  40816a:	vmovaps XMMWORD PTR [rip+0xb07e],xmm0        # 4131f0 <__bss_start@@Base+0x109c>
  408172:	vmovaps XMMWORD PTR [rip+0xb086],xmm0        # 413200 <__bss_start@@Base+0x10ac>
  40817a:	vmovaps XMMWORD PTR [rip+0xb08e],xmm0        # 413210 <__bss_start@@Base+0x10bc>
  408182:	vmovaps XMMWORD PTR [rip+0xb096],xmm0        # 413220 <__bss_start@@Base+0x10cc>
  40818a:	vmovaps XMMWORD PTR [rip+0xb09e],xmm0        # 413230 <__bss_start@@Base+0x10dc>
  408192:	vmovaps XMMWORD PTR [rip+0xb0a6],xmm0        # 413240 <__bss_start@@Base+0x10ec>
  40819a:	vmovaps XMMWORD PTR [rip+0xb0ae],xmm0        # 413250 <__bss_start@@Base+0x10fc>
  4081a2:	vmovaps XMMWORD PTR [rip+0xb0b6],xmm0        # 413260 <__bss_start@@Base+0x110c>
  4081aa:	vmovaps XMMWORD PTR [rip+0xb0be],xmm0        # 413270 <__bss_start@@Base+0x111c>
  4081b2:	vmovaps XMMWORD PTR [rip+0xb0c6],xmm0        # 413280 <__bss_start@@Base+0x112c>
  4081ba:	vmovaps XMMWORD PTR [rip+0xb0ce],xmm0        # 413290 <__bss_start@@Base+0x113c>
  4081c2:	vmovaps XMMWORD PTR [rip+0xb0d6],xmm0        # 4132a0 <__bss_start@@Base+0x114c>
  4081ca:	vmovaps XMMWORD PTR [rip+0xb0de],xmm0        # 4132b0 <__bss_start@@Base+0x115c>
  4081d2:	vmovaps XMMWORD PTR [rip+0xb0e6],xmm0        # 4132c0 <__bss_start@@Base+0x116c>
  4081da:	vmovaps XMMWORD PTR [rip+0xb0ee],xmm0        # 4132d0 <__bss_start@@Base+0x117c>
  4081e2:	vmovaps XMMWORD PTR [rip+0xb0f6],xmm0        # 4132e0 <__bss_start@@Base+0x118c>
  4081ea:	vmovaps XMMWORD PTR [rip+0xb0fe],xmm0        # 4132f0 <__bss_start@@Base+0x119c>
  4081f2:	vxorps xmm0,xmm0,xmm0
  4081f6:	vmovups YMMWORD PTR [rip+0xb102],ymm0        # 413300 <__bss_start@@Base+0x11ac>
  4081fe:	mov    QWORD PTR [rip+0xb117],0x0        # 413320 <__bss_start@@Base+0x11cc>
  408209:	pop    rax
  40820a:	vzeroupper 
  40820d:	ret    
  40820e:	xchg   ax,ax
  408210:	lea    rdi,[rip+0xfffffffffffffe89]        # 4080a0 <free_token_boolean_op@@Base+0x50>
  408217:	lea    rsi,[rip+0xffffffffffffff02]        # 408120 <free_token_boolean_op@@Base+0xd0>
  40821e:	jmp    40ad00 <__gcov_flush@@Base+0xa0>
  408223:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40822d:	nop    DWORD PTR [rax]

0000000000408230 <init_lexer@@Base>:
  408230:	vmovdqa xmm0,XMMWORD PTR [rip+0xb0f8]        # 413330 <__bss_start@@Base+0x11dc>
  408238:	vpcmpeqd xmm1,xmm1,xmm1
  40823c:	vpsubq xmm0,xmm0,xmm1
  408240:	vmovdqa XMMWORD PTR [rip+0xb0e8],xmm0        # 413330 <__bss_start@@Base+0x11dc>
  408248:	mov    QWORD PTR [rdi],rsi
  40824b:	vpxor  xmm0,xmm0,xmm0
  40824f:	vmovdqu XMMWORD PTR [rdi+0x8],xmm0
  408254:	ret    
  408255:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40825f:	nop

0000000000408260 <destroy_lexer@@Base>:
  408260:	lea    rax,[rip+0xb0d9]        # 413340 <__bss_start@@Base+0x11ec>
  408267:	add    QWORD PTR [rip+0xb0d1],0x1        # 413340 <__bss_start@@Base+0x11ec>
  40826f:	mov    rdi,QWORD PTR [rdi+0x8]
  408273:	xor    ecx,ecx
  408275:	test   rdi,rdi
  408278:	sete   cl
  40827b:	add    QWORD PTR [rax+rcx*8+0x8],0x1
  408281:	test   rdi,rdi
  408284:	je     4082b0 <destroy_lexer@@Base+0x50>
  408286:	push   rax
  408287:	add    QWORD PTR [rip+0xb0c9],0x1        # 413358 <__bss_start@@Base+0x1204>
  40828f:	vmovdqa xmm0,XMMWORD PTR [rip+0xb0d9]        # 413370 <__bss_start@@Base+0x121c>
  408297:	vpcmpeqd xmm1,xmm1,xmm1
  40829b:	vpsubq xmm0,xmm0,xmm1
  40829f:	vmovdqa XMMWORD PTR [rip+0xb0c9],xmm0        # 413370 <__bss_start@@Base+0x121c>
  4082a7:	call   403040 <free@plt>
  4082ac:	add    rsp,0x8
  4082b0:	add    QWORD PTR [rip+0xb0a8],0x1        # 413360 <__bss_start@@Base+0x120c>
  4082b8:	ret    
  4082b9:	nop    DWORD PTR [rax+0x0]

00000000004082c0 <free_stack_base@@Base>:
  4082c0:	vmovdqa xmm0,XMMWORD PTR [rip+0xb0a8]        # 413370 <__bss_start@@Base+0x121c>
  4082c8:	vpcmpeqd xmm1,xmm1,xmm1
  4082cc:	vpsubq xmm0,xmm0,xmm1
  4082d0:	vmovdqa XMMWORD PTR [rip+0xb098],xmm0        # 413370 <__bss_start@@Base+0x121c>
  4082d8:	jmp    403040 <free@plt>
  4082dd:	nop    DWORD PTR [rax]

00000000004082e0 <push_back@@Base>:
  4082e0:	push   r14
  4082e2:	push   rbx
  4082e3:	push   rax
  4082e4:	mov    r14,rsi
  4082e7:	mov    rbx,rdi
  4082ea:	vmovdqa xmm0,XMMWORD PTR [rip+0xb08e]        # 413380 <__bss_start@@Base+0x122c>
  4082f2:	vpcmpeqd xmm1,xmm1,xmm1
  4082f6:	vpsubq xmm0,xmm0,xmm1
  4082fa:	vmovdqa XMMWORD PTR [rip+0xb07e],xmm0        # 413380 <__bss_start@@Base+0x122c>
  408302:	mov    edi,0x10
  408307:	call   403190 <malloc@plt>
  40830c:	mov    QWORD PTR [rax+0x8],r14
  408310:	mov    rcx,QWORD PTR [rbx+0x8]
  408314:	mov    QWORD PTR [rax],rcx
  408317:	mov    QWORD PTR [rbx+0x8],rax
  40831b:	add    rsp,0x8
  40831f:	pop    rbx
  408320:	pop    r14
  408322:	ret    
  408323:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40832d:	nop    DWORD PTR [rax]

0000000000408330 <get_char@@Base>:
  408330:	vmovdqa xmm0,XMMWORD PTR [rip+0xb058]        # 413390 <__bss_start@@Base+0x123c>
  408338:	vpcmpeqd xmm1,xmm1,xmm1
  40833c:	vpsubq xmm0,xmm0,xmm1
  408340:	vmovdqa XMMWORD PTR [rip+0xb048],xmm0        # 413390 <__bss_start@@Base+0x123c>
  408348:	mov    rax,QWORD PTR [rdi]
  40834b:	mov    rcx,QWORD PTR [rdi+0x10]
  40834f:	lea    rdx,[rcx+0x1]
  408353:	mov    QWORD PTR [rdi+0x10],rdx
  408357:	mov    al,BYTE PTR [rax+rcx*1]
  40835a:	ret    
  40835b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408360 <push_back_chars@@Base>:
  408360:	lea    rcx,[rip+0xb039]        # 4133a0 <__bss_start@@Base+0x124c>
  408367:	add    QWORD PTR [rip+0xb031],0x1        # 4133a0 <__bss_start@@Base+0x124c>
  40836f:	mov    rax,QWORD PTR [rdi+0x10]
  408373:	xor    edx,edx
  408375:	cmp    rax,rsi
  408378:	setb   dl
  40837b:	add    QWORD PTR [rcx+rdx*8+0x8],0x1
  408381:	sub    rax,rsi
  408384:	jb     408393 <push_back_chars@@Base+0x33>
  408386:	add    QWORD PTR [rip+0xb02a],0x1        # 4133b8 <__bss_start@@Base+0x1264>
  40838e:	mov    QWORD PTR [rdi+0x10],rax
  408392:	ret    
  408393:	push   rax
  408394:	mov    rax,QWORD PTR [rip+0x9c5d]        # 411ff8 <stderr@GLIBC_2.2.5>
  40839b:	mov    rcx,QWORD PTR [rax]
  40839e:	lea    rdi,[rip+0x4a83]        # 40ce28 <UnitySizeMask@@Base+0x758>
  4083a5:	mov    esi,0x20
  4083aa:	mov    edx,0x1
  4083af:	call   403230 <fwrite@plt>
  4083b4:	mov    edi,0x1
  4083b9:	call   403220 <exit@plt>
  4083be:	xchg   ax,ax

00000000004083c0 <push_back_one_char@@Base>:
  4083c0:	vmovdqa xmm0,XMMWORD PTR [rip+0xaff8]        # 4133c0 <__bss_start@@Base+0x126c>
  4083c8:	vpcmpeqd xmm1,xmm1,xmm1
  4083cc:	vpsubq xmm0,xmm0,xmm1
  4083d0:	vmovdqa XMMWORD PTR [rip+0xafe8],xmm0        # 4133c0 <__bss_start@@Base+0x126c>
  4083d8:	lea    rcx,[rip+0xafc1]        # 4133a0 <__bss_start@@Base+0x124c>
  4083df:	add    QWORD PTR [rip+0xafb9],0x1        # 4133a0 <__bss_start@@Base+0x124c>
  4083e7:	mov    rax,QWORD PTR [rdi+0x10]
  4083eb:	xor    edx,edx
  4083ed:	test   rax,rax
  4083f0:	sete   dl
  4083f3:	add    QWORD PTR [rcx+rdx*8+0x8],0x1
  4083f9:	test   rax,rax
  4083fc:	je     40840f <push_back_one_char@@Base+0x4f>
  4083fe:	add    QWORD PTR [rip+0xafb2],0x1        # 4133b8 <__bss_start@@Base+0x1264>
  408406:	add    rax,0xffffffffffffffff
  40840a:	mov    QWORD PTR [rdi+0x10],rax
  40840e:	ret    
  40840f:	push   rax
  408410:	mov    rax,QWORD PTR [rip+0x9be1]        # 411ff8 <stderr@GLIBC_2.2.5>
  408417:	mov    rcx,QWORD PTR [rax]
  40841a:	lea    rdi,[rip+0x4a07]        # 40ce28 <UnitySizeMask@@Base+0x758>
  408421:	mov    esi,0x20
  408426:	mov    edx,0x1
  40842b:	call   403230 <fwrite@plt>
  408430:	mov    edi,0x1
  408435:	call   403220 <exit@plt>
  40843a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408440 <next@@Base>:
  408440:	push   rbp
  408441:	push   r15
  408443:	push   r14
  408445:	push   r13
  408447:	push   r12
  408449:	push   rbx
  40844a:	sub    rsp,0x218
  408451:	mov    r15,rdi
  408454:	lea    r12,[rip+0xaf75]        # 4133d0 <__bss_start@@Base+0x127c>
  40845b:	add    QWORD PTR [rip+0xaf6d],0x1        # 4133d0 <__bss_start@@Base+0x127c>
  408463:	mov    rdi,QWORD PTR [rdi+0x8]
  408467:	xor    eax,eax
  408469:	test   rdi,rdi
  40846c:	sete   al
  40846f:	add    QWORD PTR [r12+rax*8+0x8],0x1
  408475:	test   rdi,rdi
  408478:	je     4084b7 <next@@Base+0x77>
  40847a:	add    QWORD PTR [rip+0xaf66],0x1        # 4133e8 <__bss_start@@Base+0x1294>
  408482:	mov    rax,QWORD PTR [rdi]
  408485:	mov    QWORD PTR [r15+0x8],rax
  408489:	mov    r14,QWORD PTR [rdi+0x8]
  40848d:	mov    QWORD PTR [rdi+0x8],0x0
  408495:	vmovdqa xmm0,XMMWORD PTR [rip+0xaed3]        # 413370 <__bss_start@@Base+0x121c>
  40849d:	vpcmpeqd xmm1,xmm1,xmm1
  4084a1:	vpsubq xmm0,xmm0,xmm1
  4084a5:	vmovdqa XMMWORD PTR [rip+0xaec3],xmm0        # 413370 <__bss_start@@Base+0x121c>
  4084ad:	call   403040 <free@plt>
  4084b2:	jmp    408877 <next@@Base+0x437>
  4084b7:	add    QWORD PTR [rip+0xaf31],0x1        # 4133f0 <__bss_start@@Base+0x129c>
  4084bf:	vmovdqa xmm0,XMMWORD PTR [rip+0xaec9]        # 413390 <__bss_start@@Base+0x123c>
  4084c7:	vpcmpeqd xmm1,xmm1,xmm1
  4084cb:	vpsubq xmm0,xmm0,xmm1
  4084cf:	vmovdqa XMMWORD PTR [rip+0xaeb9],xmm0        # 413390 <__bss_start@@Base+0x123c>
  4084d7:	mov    rax,QWORD PTR [r15]
  4084da:	mov    rcx,QWORD PTR [r15+0x10]
  4084de:	lea    rdx,[rcx+0x1]
  4084e2:	mov    QWORD PTR [r15+0x10],rdx
  4084e6:	mov    bl,BYTE PTR [rax+rcx*1]
  4084e9:	xor    eax,eax
  4084eb:	test   bl,bl
  4084ed:	sete   al
  4084f0:	add    QWORD PTR [r12+rax*8+0x28],0x1
  4084f6:	test   bl,bl
  4084f8:	je     40885a <next@@Base+0x41a>
  4084fe:	xor    r13d,r13d
  408501:	lea    r14,[rip+0x96a8]        # 411bb0 <UnitySizeMask@@Base+0x54e0>
  408508:	lea    rbp,[rip+0x4901]        # 40ce10 <UnitySizeMask@@Base+0x740>
  40850f:	mov    DWORD PTR [rsp+0xc],0x0
  408517:	jmp    408790 <next@@Base+0x350>
  40851c:	xor    eax,eax
  40851e:	cmp    bl,0x30
  408521:	setne  al
  408524:	add    QWORD PTR [r12+rax*8+0xa8],0x1
  40852d:	cmp    bl,0x30
  408530:	mov    ecx,DWORD PTR [rsp+0xc]
  408534:	je     408de8 <next@@Base+0x9a8>
  40853a:	xor    eax,eax
  40853c:	cmp    bl,0x31
  40853f:	setl   al
  408542:	add    QWORD PTR [r12+rax*8+0xc0],0x1
  40854b:	xor    eax,eax
  40854d:	cmp    bl,0x31
  408550:	jl     408e0c <next@@Base+0x9cc>
  408556:	cmp    bl,0x39
  408559:	setg   al
  40855c:	add    QWORD PTR [r12+rax*8+0xd0],0x1
  408565:	cmp    bl,0x39
  408568:	jg     4085b2 <next@@Base+0x172>
  40856a:	add    QWORD PTR [rip+0xaf3e],0x1        # 4134b0 <__bss_start@@Base+0x135c>
  408572:	movsxd rax,ecx
  408575:	add    ecx,0x1
  408578:	mov    DWORD PTR [rsp+0xc],ecx
  40857c:	mov    BYTE PTR [rsp+rax*1+0x10],bl
  408580:	vmovdqa xmm0,XMMWORD PTR [rip+0xae08]        # 413390 <__bss_start@@Base+0x123c>
  408588:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x3ee0]        # 40c470 <_IO_stdin_used@@Base+0x470>
  408590:	vmovdqa XMMWORD PTR [rip+0xadf8],xmm0        # 413390 <__bss_start@@Base+0x123c>
  408598:	mov    rax,QWORD PTR [r15+0x10]
  40859c:	lea    rcx,[rax+0x1]
  4085a0:	mov    QWORD PTR [r15+0x10],rcx
  4085a4:	add    rax,QWORD PTR [r15]
  4085a7:	mov    r13d,0x1
  4085ad:	jmp    408832 <next@@Base+0x3f2>
  4085b2:	add    QWORD PTR [rip+0xaf06],0x1        # 4134c0 <__bss_start@@Base+0x136c>
  4085ba:	add    QWORD PTR [rip+0xaf16],0x1        # 4134d8 <__bss_start@@Base+0x1384>
  4085c2:	xor    eax,eax
  4085c4:	cmp    bl,0x7b
  4085c7:	setne  al
  4085ca:	add    QWORD PTR [r12+rax*8+0x118],0x1
  4085d3:	cmp    bl,0x7b
  4085d6:	je     408e7e <next@@Base+0xa3e>
  4085dc:	xor    eax,eax
  4085de:	cmp    bl,0x7d
  4085e1:	setne  al
  4085e4:	add    QWORD PTR [r12+rax*8+0x130],0x1
  4085ed:	cmp    bl,0x7d
  4085f0:	je     408ea0 <next@@Base+0xa60>
  4085f6:	xor    eax,eax
  4085f8:	cmp    bl,0x3b
  4085fb:	setne  al
  4085fe:	add    QWORD PTR [r12+rax*8+0x148],0x1
  408607:	cmp    bl,0x3b
  40860a:	je     408ec2 <next@@Base+0xa82>
  408610:	xor    eax,eax
  408612:	cmp    bl,0x65
  408615:	setne  al
  408618:	add    QWORD PTR [r12+rax*8+0x160],0x1
  408621:	cmp    bl,0x65
  408624:	jne    40866f <next@@Base+0x22f>
  408626:	add    QWORD PTR [rip+0xaf12],0x1        # 413540 <__bss_start@@Base+0x13ec>
  40862e:	movsxd rax,ecx
  408631:	add    ecx,0x1
  408634:	mov    DWORD PTR [rsp+0xc],ecx
  408638:	mov    BYTE PTR [rsp+rax*1+0x10],0x65
  40863d:	vmovdqa xmm0,XMMWORD PTR [rip+0xad4b]        # 413390 <__bss_start@@Base+0x123c>
  408645:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x3e23]        # 40c470 <_IO_stdin_used@@Base+0x470>
  40864d:	vmovdqa XMMWORD PTR [rip+0xad3b],xmm0        # 413390 <__bss_start@@Base+0x123c>
  408655:	mov    rax,QWORD PTR [r15+0x10]
  408659:	lea    rcx,[rax+0x1]
  40865d:	mov    QWORD PTR [r15+0x10],rcx
  408661:	add    rax,QWORD PTR [r15]
  408664:	mov    r13d,0x5
  40866a:	jmp    408832 <next@@Base+0x3f2>
  40866f:	xor    eax,eax
  408671:	cmp    bl,0x69
  408674:	setne  al
  408677:	add    QWORD PTR [r12+rax*8+0x178],0x1
  408680:	cmp    bl,0x69
  408683:	jne    4086ce <next@@Base+0x28e>
  408685:	add    QWORD PTR [rip+0xaecb],0x1        # 413558 <__bss_start@@Base+0x1404>
  40868d:	movsxd rax,ecx
  408690:	add    ecx,0x1
  408693:	mov    DWORD PTR [rsp+0xc],ecx
  408697:	mov    BYTE PTR [rsp+rax*1+0x10],0x69
  40869c:	vmovdqa xmm0,XMMWORD PTR [rip+0xacec]        # 413390 <__bss_start@@Base+0x123c>
  4086a4:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x3dc4]        # 40c470 <_IO_stdin_used@@Base+0x470>
  4086ac:	vmovdqa XMMWORD PTR [rip+0xacdc],xmm0        # 413390 <__bss_start@@Base+0x123c>
  4086b4:	mov    rax,QWORD PTR [r15+0x10]
  4086b8:	lea    rcx,[rax+0x1]
  4086bc:	mov    QWORD PTR [r15+0x10],rcx
  4086c0:	add    rax,QWORD PTR [r15]
  4086c3:	mov    r13d,0x2
  4086c9:	jmp    408832 <next@@Base+0x3f2>
  4086ce:	xor    eax,eax
  4086d0:	cmp    bl,0x6d
  4086d3:	setne  al
  4086d6:	add    QWORD PTR [r12+rax*8+0x190],0x1
  4086df:	cmp    bl,0x6d
  4086e2:	jne    40872d <next@@Base+0x2ed>
  4086e4:	add    QWORD PTR [rip+0xae84],0x1        # 413570 <__bss_start@@Base+0x141c>
  4086ec:	movsxd rax,ecx
  4086ef:	add    ecx,0x1
  4086f2:	mov    DWORD PTR [rsp+0xc],ecx
  4086f6:	mov    BYTE PTR [rsp+rax*1+0x10],0x6d
  4086fb:	vmovdqa xmm0,XMMWORD PTR [rip+0xac8d]        # 413390 <__bss_start@@Base+0x123c>
  408703:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x3d65]        # 40c470 <_IO_stdin_used@@Base+0x470>
  40870b:	vmovdqa XMMWORD PTR [rip+0xac7d],xmm0        # 413390 <__bss_start@@Base+0x123c>
  408713:	mov    rax,QWORD PTR [r15+0x10]
  408717:	lea    rcx,[rax+0x1]
  40871b:	mov    QWORD PTR [r15+0x10],rcx
  40871f:	add    rax,QWORD PTR [r15]
  408722:	mov    r13d,0x3
  408728:	jmp    408832 <next@@Base+0x3f2>
  40872d:	xor    eax,eax
  40872f:	cmp    bl,0x72
  408732:	setne  al
  408735:	add    QWORD PTR [r12+rax*8+0x1a8],0x1
  40873e:	cmp    bl,0x72
  408741:	jne    4090ee <next@@Base+0xcae>
  408747:	add    QWORD PTR [rip+0xae39],0x1        # 413588 <__bss_start@@Base+0x1434>
  40874f:	movsxd rax,ecx
  408752:	add    ecx,0x1
  408755:	mov    DWORD PTR [rsp+0xc],ecx
  408759:	mov    BYTE PTR [rsp+rax*1+0x10],0x72
  40875e:	vmovdqa xmm0,XMMWORD PTR [rip+0xac2a]        # 413390 <__bss_start@@Base+0x123c>
  408766:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x3d02]        # 40c470 <_IO_stdin_used@@Base+0x470>
  40876e:	vmovdqa XMMWORD PTR [rip+0xac1a],xmm0        # 413390 <__bss_start@@Base+0x123c>
  408776:	mov    rax,QWORD PTR [r15+0x10]
  40877a:	lea    rcx,[rax+0x1]
  40877e:	mov    QWORD PTR [r15+0x10],rcx
  408782:	add    rax,QWORD PTR [r15]
  408785:	mov    r13d,0x4
  40878b:	jmp    408832 <next@@Base+0x3f2>
  408790:	mov    DWORD PTR [rip+0x99ae],0x0        # 412148 <__data_start@@Base+0x18>
  40879a:	cmp    r13,0x5
  40879e:	ja     408835 <next@@Base+0x3f5>
  4087a4:	movsxd rax,DWORD PTR [rbp+r13*4+0x0]
  4087a9:	add    rax,rbp
  4087ac:	jmp    rax
  4087ae:	lea    rdi,[rip+0x940b]        # 411bc0 <UnitySizeMask@@Base+0x54f0>
  4087b5:	call   4093c0 <next@@Base+0xf80>
  4087ba:	xor    eax,eax
  4087bc:	cmp    bl,0x9
  4087bf:	setne  al
  4087c2:	add    QWORD PTR [r12+rax*8+0x70],0x1
  4087c8:	cmp    bl,0x9
  4087cb:	je     408800 <next@@Base+0x3c0>
  4087cd:	xor    eax,eax
  4087cf:	cmp    bl,0x20
  4087d2:	setne  al
  4087d5:	add    QWORD PTR [r12+rax*8+0x80],0x1
  4087de:	cmp    bl,0x20
  4087e1:	je     408800 <next@@Base+0x3c0>
  4087e3:	xor    eax,eax
  4087e5:	cmp    bl,0xa
  4087e8:	setne  al
  4087eb:	add    QWORD PTR [r12+rax*8+0x90],0x1
  4087f4:	cmp    bl,0xa
  4087f7:	jne    40851c <next@@Base+0xdc>
  4087fd:	nop    DWORD PTR [rax]
  408800:	add    QWORD PTR [rip+0xac68],0x1        # 413470 <__bss_start@@Base+0x131c>
  408808:	vmovdqa xmm0,XMMWORD PTR [rip+0xab80]        # 413390 <__bss_start@@Base+0x123c>
  408810:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x3c58]        # 40c470 <_IO_stdin_used@@Base+0x470>
  408818:	vmovdqa XMMWORD PTR [rip+0xab70],xmm0        # 413390 <__bss_start@@Base+0x123c>
  408820:	mov    rax,QWORD PTR [r15+0x10]
  408824:	lea    rcx,[rax+0x1]
  408828:	mov    QWORD PTR [r15+0x10],rcx
  40882c:	add    rax,QWORD PTR [r15]
  40882f:	xor    r13d,r13d
  408832:	movzx  ebx,BYTE PTR [rax]
  408835:	mov    rdi,r14
  408838:	call   4093c0 <next@@Base+0xf80>
  40883d:	add    QWORD PTR [rip+0xaf63],0x1        # 4137a8 <__bss_start@@Base+0x1654>
  408845:	xor    eax,eax
  408847:	test   bl,bl
  408849:	sete   al
  40884c:	add    QWORD PTR [r12+rax*8+0x28],0x1
  408852:	test   bl,bl
  408854:	jne    408790 <next@@Base+0x350>
  40885a:	add    QWORD PTR [rip+0xaf4e],0x1        # 4137b0 <__bss_start@@Base+0x165c>
  408862:	mov    edi,0x4
  408867:	call   403190 <malloc@plt>
  40886c:	mov    r14,rax
  40886f:	mov    rdi,rax
  408872:	call   407e40 <init_token_eof@@Base>
  408877:	add    QWORD PTR [rip+0xaf39],0x1        # 4137b8 <__bss_start@@Base+0x1664>
  40887f:	mov    rax,r14
  408882:	add    rsp,0x218
  408889:	pop    rbx
  40888a:	pop    r12
  40888c:	pop    r13
  40888e:	pop    r14
  408890:	pop    r15
  408892:	pop    rbp
  408893:	ret    
  408894:	lea    rdi,[rip+0x9335]        # 411bd0 <UnitySizeMask@@Base+0x5500>
  40889b:	call   4093c0 <next@@Base+0xf80>
  4088a0:	mov    eax,ebx
  4088a2:	add    al,0xd0
  4088a4:	xor    ecx,ecx
  4088a6:	cmp    al,0x9
  4088a8:	seta   cl
  4088ab:	add    QWORD PTR [r12+rcx*8+0x2b8],0x1
  4088b4:	cmp    al,0x9
  4088b6:	mov    r13d,DWORD PTR [rsp+0xc]
  4088bb:	ja     40892e <next@@Base+0x4ee>
  4088bd:	movsxd rax,r13d
  4088c0:	lea    rbp,[rsp+rax*1]
  4088c4:	add    rbp,0x10
  4088c8:	lea    r14,[rip+0x9301]        # 411bd0 <UnitySizeMask@@Base+0x5500>
  4088cf:	nop
  4088d0:	add    QWORD PTR [rip+0xadc0],0x1        # 413698 <__bss_start@@Base+0x1544>
  4088d8:	vmovdqa xmm0,XMMWORD PTR [rip+0xaab0]        # 413390 <__bss_start@@Base+0x123c>
  4088e0:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x3b88]        # 40c470 <_IO_stdin_used@@Base+0x470>
  4088e8:	vmovdqa XMMWORD PTR [rip+0xaaa0],xmm0        # 413390 <__bss_start@@Base+0x123c>
  4088f0:	mov    BYTE PTR [rbp+0x0],bl
  4088f3:	mov    rax,QWORD PTR [r15]
  4088f6:	mov    rcx,QWORD PTR [r15+0x10]
  4088fa:	lea    rdx,[rcx+0x1]
  4088fe:	mov    QWORD PTR [r15+0x10],rdx
  408902:	movzx  ebx,BYTE PTR [rax+rcx*1]
  408906:	mov    rdi,r14
  408909:	call   4093c0 <next@@Base+0xf80>
  40890e:	mov    eax,ebx
  408910:	add    al,0xd0
  408912:	xor    ecx,ecx
  408914:	cmp    al,0x9
  408916:	seta   cl
  408919:	add    QWORD PTR [r12+rcx*8+0x2b8],0x1
  408922:	add    rbp,0x1
  408926:	add    r13d,0x1
  40892a:	cmp    al,0xa
  40892c:	jb     4088d0 <next@@Base+0x490>
  40892e:	add    QWORD PTR [rip+0xad6a],0x1        # 4136a0 <__bss_start@@Base+0x154c>
  408936:	vmovdqa xmm0,XMMWORD PTR [rip+0xaa82]        # 4133c0 <__bss_start@@Base+0x126c>
  40893e:	vpcmpeqd xmm1,xmm1,xmm1
  408942:	vpsubq xmm0,xmm0,xmm1
  408946:	vmovdqa XMMWORD PTR [rip+0xaa72],xmm0        # 4133c0 <__bss_start@@Base+0x126c>
  40894e:	lea    rcx,[rip+0xaa4b]        # 4133a0 <__bss_start@@Base+0x124c>
  408955:	add    QWORD PTR [rip+0xaa43],0x1        # 4133a0 <__bss_start@@Base+0x124c>
  40895d:	mov    rax,QWORD PTR [r15+0x10]
  408961:	xor    edx,edx
  408963:	test   rax,rax
  408966:	sete   dl
  408969:	add    QWORD PTR [rcx+rdx*8+0x8],0x1
  40896f:	test   rax,rax
  408972:	je     409351 <next@@Base+0xf11>
  408978:	add    QWORD PTR [rip+0xaa38],0x1        # 4133b8 <__bss_start@@Base+0x1264>
  408980:	add    rax,0xffffffffffffffff
  408984:	mov    QWORD PTR [r15+0x10],rax
  408988:	movsxd rax,r13d
  40898b:	mov    BYTE PTR [rsp+rax*1+0x10],0x0
  408990:	mov    edi,0x8
  408995:	call   403190 <malloc@plt>
  40899a:	mov    r14,rax
  40899d:	vmovdqa xmm0,XMMWORD PTR [rip+0xae1b]        # 4137c0 <__bss_start@@Base+0x166c>
  4089a5:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x3ac3]        # 40c470 <_IO_stdin_used@@Base+0x470>
  4089ad:	vmovdqa XMMWORD PTR [rip+0xae0b],xmm0        # 4137c0 <__bss_start@@Base+0x166c>
  4089b5:	lea    rdi,[rsp+0x10]
  4089ba:	xor    esi,esi
  4089bc:	mov    edx,0xa
  4089c1:	call   403160 <strtol@plt>
  4089c6:	mov    rdi,r14
  4089c9:	mov    esi,eax
  4089cb:	call   407d20 <init_token_int_value@@Base>
  4089d0:	jmp    408877 <next@@Base+0x437>
  4089d5:	lea    rdi,[rip+0x9214]        # 411bf0 <UnitySizeMask@@Base+0x5520>
  4089dc:	call   4093c0 <next@@Base+0xf80>
  4089e1:	xor    eax,eax
  4089e3:	cmp    bl,0x61
  4089e6:	sete   al
  4089e9:	add    QWORD PTR [r12+rax*8+0x310],0x1
  4089f2:	cmp    bl,0x61
  4089f5:	mov    eax,DWORD PTR [rsp+0xc]
  4089f9:	jne    409371 <next@@Base+0xf31>
  4089ff:	movsxd rbp,eax
  408a02:	mov    BYTE PTR [rsp+rbp*1+0x10],0x61
  408a07:	vmovdqa xmm0,XMMWORD PTR [rip+0xa981]        # 413390 <__bss_start@@Base+0x123c>
  408a0f:	vpcmpeqd xmm1,xmm1,xmm1
  408a13:	vpsubq xmm1,xmm0,xmm1
  408a17:	vmovdqa XMMWORD PTR [rip+0xa971],xmm1        # 413390 <__bss_start@@Base+0x123c>
  408a1f:	mov    rax,QWORD PTR [r15]
  408a22:	mov    rcx,QWORD PTR [r15+0x10]
  408a26:	lea    rdx,[rcx+0x1]
  408a2a:	mov    QWORD PTR [r15+0x10],rdx
  408a2e:	mov    al,BYTE PTR [rax+rcx*1]
  408a31:	xor    ecx,ecx
  408a33:	cmp    al,0x69
  408a35:	sete   cl
  408a38:	add    QWORD PTR [r12+rcx*8+0x320],0x1
  408a41:	cmp    al,0x69
  408a43:	jne    409371 <next@@Base+0xf31>
  408a49:	mov    BYTE PTR [rsp+rbp*1+0x11],0x69
  408a4e:	vpaddq xmm0,xmm0,XMMWORD PTR [rip+0x437a]        # 40cdd0 <UnitySizeMask@@Base+0x700>
  408a56:	vmovdqa XMMWORD PTR [rip+0xa932],xmm0        # 413390 <__bss_start@@Base+0x123c>
  408a5e:	mov    rax,QWORD PTR [r15]
  408a61:	mov    rcx,QWORD PTR [r15+0x10]
  408a65:	lea    rdx,[rcx+0x1]
  408a69:	mov    QWORD PTR [r15+0x10],rdx
  408a6d:	mov    al,BYTE PTR [rax+rcx*1]
  408a70:	xor    ecx,ecx
  408a72:	cmp    al,0x6e
  408a74:	sete   cl
  408a77:	add    QWORD PTR [r12+rcx*8+0x330],0x1
  408a80:	cmp    al,0x6e
  408a82:	jne    409371 <next@@Base+0xf31>
  408a88:	add    QWORD PTR [rip+0xac80],0x1        # 413710 <__bss_start@@Base+0x15bc>
  408a90:	lea    r14,[rbp+0x3]
  408a94:	mov    WORD PTR [rsp+rbp*1+0x12],0x6e
  408a9b:	lea    rdi,[rbp+0x4]
  408a9f:	call   403190 <malloc@plt>
  408aa4:	mov    rbx,rax
  408aa7:	lea    rsi,[rsp+0x10]
  408aac:	mov    rdi,rax
  408aaf:	mov    rdx,r14
  408ab2:	call   403060 <strncpy@plt>
  408ab7:	mov    BYTE PTR [rbx+rbp*1+0x3],0x0
  408abc:	mov    edi,0x10
  408ac1:	call   403190 <malloc@plt>
  408ac6:	mov    r14,rax
  408ac9:	mov    rdi,rax
  408acc:	mov    rsi,rbx
  408acf:	call   407d50 <init_token_function@@Base>
  408ad4:	jmp    408877 <next@@Base+0x437>
  408ad9:	lea    rdi,[rip+0x9120]        # 411c00 <UnitySizeMask@@Base+0x5530>
  408ae0:	call   4093c0 <next@@Base+0xf80>
  408ae5:	xor    eax,eax
  408ae7:	cmp    bl,0x65
  408aea:	sete   al
  408aed:	add    QWORD PTR [r12+rax*8+0x348],0x1
  408af6:	cmp    bl,0x65
  408af9:	mov    eax,DWORD PTR [rsp+0xc]
  408afd:	jne    409371 <next@@Base+0xf31>
  408b03:	cdqe   
  408b05:	mov    BYTE PTR [rsp+rax*1+0x10],0x65
  408b0a:	vmovdqa xmm0,XMMWORD PTR [rip+0xa87e]        # 413390 <__bss_start@@Base+0x123c>
  408b12:	vpcmpeqd xmm1,xmm1,xmm1
  408b16:	vpsubq xmm1,xmm0,xmm1
  408b1a:	vmovdqa XMMWORD PTR [rip+0xa86e],xmm1        # 413390 <__bss_start@@Base+0x123c>
  408b22:	mov    rcx,QWORD PTR [r15]
  408b25:	mov    rdx,QWORD PTR [r15+0x10]
  408b29:	lea    rsi,[rdx+0x1]
  408b2d:	mov    QWORD PTR [r15+0x10],rsi
  408b31:	mov    cl,BYTE PTR [rcx+rdx*1]
  408b34:	xor    edx,edx
  408b36:	cmp    cl,0x74
  408b39:	sete   dl
  408b3c:	add    QWORD PTR [r12+rdx*8+0x358],0x1
  408b45:	cmp    cl,0x74
  408b48:	jne    409371 <next@@Base+0xf31>
  408b4e:	mov    BYTE PTR [rsp+rax*1+0x11],0x74
  408b53:	vpaddq xmm1,xmm0,XMMWORD PTR [rip+0x4275]        # 40cdd0 <UnitySizeMask@@Base+0x700>
  408b5b:	vmovdqa XMMWORD PTR [rip+0xa82d],xmm1        # 413390 <__bss_start@@Base+0x123c>
  408b63:	mov    rcx,QWORD PTR [r15]
  408b66:	mov    rdx,QWORD PTR [r15+0x10]
  408b6a:	lea    rsi,[rdx+0x1]
  408b6e:	mov    QWORD PTR [r15+0x10],rsi
  408b72:	mov    cl,BYTE PTR [rcx+rdx*1]
  408b75:	xor    edx,edx
  408b77:	cmp    cl,0x75
  408b7a:	sete   dl
  408b7d:	add    QWORD PTR [r12+rdx*8+0x368],0x1
  408b86:	cmp    cl,0x75
  408b89:	jne    409371 <next@@Base+0xf31>
  408b8f:	mov    BYTE PTR [rsp+rax*1+0x12],0x75
  408b94:	vpaddq xmm1,xmm0,XMMWORD PTR [rip+0x4244]        # 40cde0 <UnitySizeMask@@Base+0x710>
  408b9c:	vmovdqa XMMWORD PTR [rip+0xa7ec],xmm1        # 413390 <__bss_start@@Base+0x123c>
  408ba4:	mov    rcx,QWORD PTR [r15]
  408ba7:	mov    rdx,QWORD PTR [r15+0x10]
  408bab:	lea    rsi,[rdx+0x1]
  408baf:	mov    QWORD PTR [r15+0x10],rsi
  408bb3:	mov    cl,BYTE PTR [rcx+rdx*1]
  408bb6:	xor    edx,edx
  408bb8:	cmp    cl,0x72
  408bbb:	sete   dl
  408bbe:	add    QWORD PTR [r12+rdx*8+0x378],0x1
  408bc7:	cmp    cl,0x72
  408bca:	jne    409371 <next@@Base+0xf31>
  408bd0:	mov    BYTE PTR [rsp+rax*1+0x13],0x72
  408bd5:	vpaddq xmm0,xmm0,XMMWORD PTR [rip+0x4213]        # 40cdf0 <UnitySizeMask@@Base+0x720>
  408bdd:	vmovdqa XMMWORD PTR [rip+0xa7ab],xmm0        # 413390 <__bss_start@@Base+0x123c>
  408be5:	mov    rax,QWORD PTR [r15]
  408be8:	mov    rcx,QWORD PTR [r15+0x10]
  408bec:	lea    rdx,[rcx+0x1]
  408bf0:	mov    QWORD PTR [r15+0x10],rdx
  408bf4:	mov    al,BYTE PTR [rax+rcx*1]
  408bf7:	xor    ecx,ecx
  408bf9:	cmp    al,0x6e
  408bfb:	sete   cl
  408bfe:	add    QWORD PTR [r12+rcx*8+0x388],0x1
  408c07:	cmp    al,0x6e
  408c09:	jne    409371 <next@@Base+0xf31>
  408c0f:	add    QWORD PTR [rip+0xab51],0x1        # 413768 <__bss_start@@Base+0x1614>
  408c17:	mov    edi,0x4
  408c1c:	call   403190 <malloc@plt>
  408c21:	mov    r14,rax
  408c24:	mov    rdi,rax
  408c27:	call   407e00 <init_token_return@@Base>
  408c2c:	jmp    408877 <next@@Base+0x437>
  408c31:	movsx  ebp,bl
  408c34:	lea    rdi,[rip+0x8fa5]        # 411be0 <UnitySizeMask@@Base+0x5510>
  408c3b:	call   4093c0 <next@@Base+0xf80>
  408c40:	mov    DWORD PTR [rip+0x94fe],0x1        # 412148 <__data_start@@Base+0x18>
  408c4a:	cmp    ebp,0x66
  408c4d:	mov    r14d,DWORD PTR [rsp+0xc]
  408c52:	je     408dae <next@@Base+0x96e>
  408c58:	cmp    ebp,0x6e
  408c5b:	jne    40937b <next@@Base+0xf3b>
  408c61:	lea    rdi,[rip+0x8fc8]        # 411c30 <UnitySizeMask@@Base+0x5560>
  408c68:	call   4093c0 <next@@Base+0xf80>
  408c6d:	movsxd rax,r14d
  408c70:	mov    BYTE PTR [rsp+rax*1+0x10],bl
  408c74:	vmovdqa xmm0,XMMWORD PTR [rip+0xa714]        # 413390 <__bss_start@@Base+0x123c>
  408c7c:	vpcmpeqd xmm1,xmm1,xmm1
  408c80:	vpsubq xmm0,xmm0,xmm1
  408c84:	vmovdqa XMMWORD PTR [rip+0xa704],xmm0        # 413390 <__bss_start@@Base+0x123c>
  408c8c:	mov    rax,QWORD PTR [r15]
  408c8f:	mov    rcx,QWORD PTR [r15+0x10]
  408c93:	lea    rdx,[rcx+0x1]
  408c97:	mov    QWORD PTR [r15+0x10],rdx
  408c9b:	mov    al,BYTE PTR [rax+rcx*1]
  408c9e:	xor    ecx,ecx
  408ca0:	cmp    al,0x74
  408ca2:	sete   cl
  408ca5:	add    QWORD PTR [r12+rcx*8+0x2f0],0x1
  408cae:	cmp    al,0x74
  408cb0:	jne    409371 <next@@Base+0xf31>
  408cb6:	add    QWORD PTR [rip+0xaa12],0x1        # 4136d0 <__bss_start@@Base+0x157c>
  408cbe:	mov    edi,0x4
  408cc3:	call   403190 <malloc@plt>
  408cc8:	mov    r14,rax
  408ccb:	mov    rdi,rax
  408cce:	call   407d00 <init_token_int_type@@Base>
  408cd3:	jmp    408877 <next@@Base+0x437>
  408cd8:	lea    rdi,[rip+0x8f31]        # 411c10 <UnitySizeMask@@Base+0x5540>
  408cdf:	call   4093c0 <next@@Base+0xf80>
  408ce4:	xor    eax,eax
  408ce6:	cmp    bl,0x6c
  408ce9:	sete   al
  408cec:	add    QWORD PTR [r12+rax*8+0x3a0],0x1
  408cf5:	cmp    bl,0x6c
  408cf8:	mov    eax,DWORD PTR [rsp+0xc]
  408cfc:	jne    409371 <next@@Base+0xf31>
  408d02:	cdqe   
  408d04:	mov    BYTE PTR [rsp+rax*1+0x10],0x6c
  408d09:	vmovdqa xmm0,XMMWORD PTR [rip+0xa67f]        # 413390 <__bss_start@@Base+0x123c>
  408d11:	vpcmpeqd xmm1,xmm1,xmm1
  408d15:	vpsubq xmm1,xmm0,xmm1
  408d19:	vmovdqa XMMWORD PTR [rip+0xa66f],xmm1        # 413390 <__bss_start@@Base+0x123c>
  408d21:	mov    rcx,QWORD PTR [r15]
  408d24:	mov    rdx,QWORD PTR [r15+0x10]
  408d28:	lea    rsi,[rdx+0x1]
  408d2c:	mov    QWORD PTR [r15+0x10],rsi
  408d30:	mov    cl,BYTE PTR [rcx+rdx*1]
  408d33:	xor    edx,edx
  408d35:	cmp    cl,0x73
  408d38:	sete   dl
  408d3b:	add    QWORD PTR [r12+rdx*8+0x3b0],0x1
  408d44:	cmp    cl,0x73
  408d47:	jne    409371 <next@@Base+0xf31>
  408d4d:	mov    BYTE PTR [rsp+rax*1+0x11],0x73
  408d52:	vpaddq xmm0,xmm0,XMMWORD PTR [rip+0x4076]        # 40cdd0 <UnitySizeMask@@Base+0x700>
  408d5a:	vmovdqa XMMWORD PTR [rip+0xa62e],xmm0        # 413390 <__bss_start@@Base+0x123c>
  408d62:	mov    rax,QWORD PTR [r15]
  408d65:	mov    rcx,QWORD PTR [r15+0x10]
  408d69:	lea    rdx,[rcx+0x1]
  408d6d:	mov    QWORD PTR [r15+0x10],rdx
  408d71:	mov    al,BYTE PTR [rax+rcx*1]
  408d74:	xor    ecx,ecx
  408d76:	cmp    al,0x65
  408d78:	sete   cl
  408d7b:	add    QWORD PTR [r12+rcx*8+0x3c0],0x1
  408d84:	cmp    al,0x65
  408d86:	jne    409371 <next@@Base+0xf31>
  408d8c:	add    QWORD PTR [rip+0xaa0c],0x1        # 4137a0 <__bss_start@@Base+0x164c>
  408d94:	mov    edi,0x4
  408d99:	call   403190 <malloc@plt>
  408d9e:	mov    r14,rax
  408da1:	mov    rdi,rax
  408da4:	call   407e80 <init_token_else@@Base>
  408da9:	jmp    408877 <next@@Base+0x437>
  408dae:	lea    rdi,[rip+0x8e8b]        # 411c40 <UnitySizeMask@@Base+0x5570>
  408db5:	call   4093c0 <next@@Base+0xf80>
  408dba:	add    QWORD PTR [rip+0xa916],0x1        # 4136d8 <__bss_start@@Base+0x1584>
  408dc2:	movsxd rax,r14d
  408dc5:	mov    BYTE PTR [rsp+rax*1+0x10],bl
  408dc9:	mov    BYTE PTR [rsp+rax*1+0x11],0x0
  408dce:	mov    edi,0x4
  408dd3:	call   403190 <malloc@plt>
  408dd8:	mov    r14,rax
  408ddb:	mov    rdi,rax
  408dde:	call   407e60 <init_token_if@@Base>
  408de3:	jmp    408877 <next@@Base+0x437>
  408de8:	add    QWORD PTR [rip+0xa698],0x1        # 413488 <__bss_start@@Base+0x1334>
  408df0:	mov    edi,0x8
  408df5:	call   403190 <malloc@plt>
  408dfa:	mov    r14,rax
  408dfd:	xor    esi,esi
  408dff:	mov    rdi,rax
  408e02:	call   407d20 <init_token_int_value@@Base>
  408e07:	jmp    408877 <next@@Base+0x437>
  408e0c:	cmp    bl,0x28
  408e0f:	setne  al
  408e12:	add    QWORD PTR [r12+rax*8+0xe8],0x1
  408e1b:	cmp    bl,0x28
  408e1e:	jne    408e42 <next@@Base+0xa02>
  408e20:	add    QWORD PTR [rip+0xa6a0],0x1        # 4134c8 <__bss_start@@Base+0x1374>
  408e28:	mov    edi,0x4
  408e2d:	call   403190 <malloc@plt>
  408e32:	mov    r14,rax
  408e35:	mov    rdi,rax
  408e38:	call   407d80 <init_token_opar@@Base>
  408e3d:	jmp    408877 <next@@Base+0x437>
  408e42:	xor    eax,eax
  408e44:	cmp    bl,0x29
  408e47:	setne  al
  408e4a:	add    QWORD PTR [r12+rax*8+0x100],0x1
  408e53:	cmp    bl,0x29
  408e56:	jne    408ee4 <next@@Base+0xaa4>
  408e5c:	add    QWORD PTR [rip+0xa67c],0x1        # 4134e0 <__bss_start@@Base+0x138c>
  408e64:	mov    edi,0x4
  408e69:	call   403190 <malloc@plt>
  408e6e:	mov    r14,rax
  408e71:	mov    rdi,rax
  408e74:	call   407da0 <init_token_cpar@@Base>
  408e79:	jmp    408877 <next@@Base+0x437>
  408e7e:	add    QWORD PTR [rip+0xa672],0x1        # 4134f8 <__bss_start@@Base+0x13a4>
  408e86:	mov    edi,0x4
  408e8b:	call   403190 <malloc@plt>
  408e90:	mov    r14,rax
  408e93:	mov    rdi,rax
  408e96:	call   407dc0 <init_token_obra@@Base>
  408e9b:	jmp    408877 <next@@Base+0x437>
  408ea0:	add    QWORD PTR [rip+0xa668],0x1        # 413510 <__bss_start@@Base+0x13bc>
  408ea8:	mov    edi,0x4
  408ead:	call   403190 <malloc@plt>
  408eb2:	mov    r14,rax
  408eb5:	mov    rdi,rax
  408eb8:	call   407de0 <init_token_cbra@@Base>
  408ebd:	jmp    408877 <next@@Base+0x437>
  408ec2:	add    QWORD PTR [rip+0xa65e],0x1        # 413528 <__bss_start@@Base+0x13d4>
  408eca:	mov    edi,0x4
  408ecf:	call   403190 <malloc@plt>
  408ed4:	mov    r14,rax
  408ed7:	mov    rdi,rax
  408eda:	call   407e20 <init_token_semicolon@@Base>
  408edf:	jmp    408877 <next@@Base+0x437>
  408ee4:	add    QWORD PTR [rip+0xa604],0x1        # 4134f0 <__bss_start@@Base+0x139c>
  408eec:	add    QWORD PTR [rip+0xa614],0x1        # 413508 <__bss_start@@Base+0x13b4>
  408ef4:	add    QWORD PTR [rip+0xa624],0x1        # 413520 <__bss_start@@Base+0x13cc>
  408efc:	add    QWORD PTR [rip+0xa634],0x1        # 413538 <__bss_start@@Base+0x13e4>
  408f04:	add    QWORD PTR [rip+0xa644],0x1        # 413550 <__bss_start@@Base+0x13fc>
  408f0c:	add    QWORD PTR [rip+0xa654],0x1        # 413568 <__bss_start@@Base+0x1414>
  408f14:	add    QWORD PTR [rip+0xa664],0x1        # 413580 <__bss_start@@Base+0x142c>
  408f1c:	xor    eax,eax
  408f1e:	cmp    bl,0x21
  408f21:	setne  al
  408f24:	add    QWORD PTR [r12+rax*8+0x1c0],0x1
  408f2d:	cmp    bl,0x21
  408f30:	jne    409005 <next@@Base+0xbc5>
  408f36:	movsxd rax,ecx
  408f39:	vmovdqa xmm0,XMMWORD PTR [rip+0xa44f]        # 413390 <__bss_start@@Base+0x123c>
  408f41:	vpcmpeqd xmm1,xmm1,xmm1
  408f45:	vpsubq xmm0,xmm0,xmm1
  408f49:	vmovdqa XMMWORD PTR [rip+0xa43f],xmm0        # 413390 <__bss_start@@Base+0x123c>
  408f51:	mov    BYTE PTR [rsp+rax*1+0x10],0x21
  408f56:	mov    rax,QWORD PTR [r15]
  408f59:	mov    rcx,QWORD PTR [r15+0x10]
  408f5d:	lea    rdx,[rcx+0x1]
  408f61:	mov    QWORD PTR [r15+0x10],rdx
  408f65:	mov    bl,BYTE PTR [rax+rcx*1]
  408f68:	mov    edi,0x10
  408f6d:	call   403190 <malloc@plt>
  408f72:	mov    r14,rax
  408f75:	xor    eax,eax
  408f77:	cmp    bl,0x3d
  408f7a:	sete   al
  408f7d:	add    QWORD PTR [r12+rax*8+0x1d0],0x1
  408f86:	cmp    bl,0x3d
  408f89:	je     4090bb <next@@Base+0xc7b>
  408f8f:	add    QWORD PTR [rip+0xa619],0x1        # 4135b0 <__bss_start@@Base+0x145c>
  408f97:	vmovdqa xmm0,XMMWORD PTR [rip+0xa421]        # 4133c0 <__bss_start@@Base+0x126c>
  408f9f:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x34c9]        # 40c470 <_IO_stdin_used@@Base+0x470>
  408fa7:	vmovdqa XMMWORD PTR [rip+0xa411],xmm0        # 4133c0 <__bss_start@@Base+0x126c>
  408faf:	lea    rcx,[rip+0xa3ea]        # 4133a0 <__bss_start@@Base+0x124c>
  408fb6:	add    QWORD PTR [rip+0xa3e2],0x1        # 4133a0 <__bss_start@@Base+0x124c>
  408fbe:	mov    rax,QWORD PTR [r15+0x10]
  408fc2:	xor    edx,edx
  408fc4:	test   rax,rax
  408fc7:	sete   dl
  408fca:	add    QWORD PTR [rcx+rdx*8+0x8],0x1
  408fd0:	test   rax,rax
  408fd3:	je     409351 <next@@Base+0xf11>
  408fd9:	add    QWORD PTR [rip+0xa3d7],0x1        # 4133b8 <__bss_start@@Base+0x1264>
  408fe1:	add    rax,0xffffffffffffffff
  408fe5:	mov    QWORD PTR [r15+0x10],rax
  408fe9:	mov    edi,0x2
  408fee:	call   403190 <malloc@plt>
  408ff3:	mov    cl,BYTE PTR [rsp+0x10]
  408ff7:	mov    BYTE PTR [rax],cl
  408ff9:	mov    rcx,rax
  408ffc:	add    rcx,0x1
  409000:	jmp    4090de <next@@Base+0xc9e>
  409005:	add    QWORD PTR [rip+0xa5c3],0x1        # 4135d0 <__bss_start@@Base+0x147c>
  40900d:	add    QWORD PTR [rip+0xa5cb],0x1        # 4135e0 <__bss_start@@Base+0x148c>
  409015:	add    QWORD PTR [rip+0xa5fb],0x1        # 413618 <__bss_start@@Base+0x14c4>
  40901d:	add    QWORD PTR [rip+0xa61b],0x1        # 413640 <__bss_start@@Base+0x14ec>
  409025:	xor    eax,eax
  409027:	cmp    bl,0x26
  40902a:	setne  al
  40902d:	add    QWORD PTR [r12+rax*8+0x290],0x1
  409036:	cmp    bl,0x26
  409039:	jne    409399 <next@@Base+0xf59>
  40903f:	movsxd rax,ecx
  409042:	vmovdqa xmm0,XMMWORD PTR [rip+0xa346]        # 413390 <__bss_start@@Base+0x123c>
  40904a:	vpcmpeqd xmm1,xmm1,xmm1
  40904e:	vpsubq xmm0,xmm0,xmm1
  409052:	vmovdqa XMMWORD PTR [rip+0xa336],xmm0        # 413390 <__bss_start@@Base+0x123c>
  40905a:	mov    BYTE PTR [rsp+rax*1+0x10],0x26
  40905f:	mov    rax,QWORD PTR [r15]
  409062:	mov    rcx,QWORD PTR [r15+0x10]
  409066:	lea    rdx,[rcx+0x1]
  40906a:	mov    QWORD PTR [r15+0x10],rdx
  40906e:	mov    bl,BYTE PTR [rax+rcx*1]
  409071:	mov    edi,0x10
  409076:	call   403190 <malloc@plt>
  40907b:	mov    r14,rax
  40907e:	xor    eax,eax
  409080:	cmp    bl,0x26
  409083:	sete   al
  409086:	add    QWORD PTR [r12+rax*8+0x2a0],0x1
  40908f:	cmp    bl,0x26
  409092:	jne    409371 <next@@Base+0xf31>
  409098:	add    QWORD PTR [rip+0xa5e0],0x1        # 413680 <__bss_start@@Base+0x152c>
  4090a0:	mov    edi,0x3
  4090a5:	call   403190 <malloc@plt>
  4090aa:	mov    cl,BYTE PTR [rsp+0x10]
  4090ae:	mov    BYTE PTR [rax],cl
  4090b0:	mov    WORD PTR [rax+0x1],0x26
  4090b6:	jmp    40921b <next@@Base+0xddb>
  4090bb:	add    QWORD PTR [rip+0xa4f5],0x1        # 4135b8 <__bss_start@@Base+0x1464>
  4090c3:	mov    edi,0x3
  4090c8:	call   403190 <malloc@plt>
  4090cd:	mov    cl,BYTE PTR [rsp+0x10]
  4090d1:	mov    BYTE PTR [rax],cl
  4090d3:	mov    BYTE PTR [rax+0x1],0x3d
  4090d7:	mov    rcx,rax
  4090da:	add    rcx,0x2
  4090de:	mov    BYTE PTR [rcx],0x0
  4090e1:	add    QWORD PTR [rip+0xa4d7],0x1        # 4135c0 <__bss_start@@Base+0x146c>
  4090e9:	jmp    40921b <next@@Base+0xddb>
  4090ee:	add    QWORD PTR [rip+0xa4a2],0x1        # 413598 <__bss_start@@Base+0x1444>
  4090f6:	xor    eax,eax
  4090f8:	cmp    bl,0x3c
  4090fb:	setne  al
  4090fe:	add    QWORD PTR [r12+rax*8+0x1f8],0x1
  409107:	cmp    bl,0x3c
  40910a:	je     409126 <next@@Base+0xce6>
  40910c:	xor    eax,eax
  40910e:	cmp    bl,0x3e
  409111:	setne  al
  409114:	add    QWORD PTR [r12+rax*8+0x208],0x1
  40911d:	cmp    bl,0x3e
  409120:	jne    40922b <next@@Base+0xdeb>
  409126:	movsxd rax,ecx
  409129:	vmovdqa xmm0,XMMWORD PTR [rip+0xa25f]        # 413390 <__bss_start@@Base+0x123c>
  409131:	vpcmpeqd xmm1,xmm1,xmm1
  409135:	vpsubq xmm0,xmm0,xmm1
  409139:	vmovdqa XMMWORD PTR [rip+0xa24f],xmm0        # 413390 <__bss_start@@Base+0x123c>
  409141:	mov    BYTE PTR [rsp+rax*1+0x10],bl
  409145:	mov    rax,QWORD PTR [r15]
  409148:	mov    rcx,QWORD PTR [r15+0x10]
  40914c:	lea    rdx,[rcx+0x1]
  409150:	mov    QWORD PTR [r15+0x10],rdx
  409154:	mov    bl,BYTE PTR [rax+rcx*1]
  409157:	mov    edi,0x10
  40915c:	call   403190 <malloc@plt>
  409161:	mov    r14,rax
  409164:	xor    eax,eax
  409166:	cmp    bl,0x3d
  409169:	sete   al
  40916c:	add    QWORD PTR [r12+rax*8+0x218],0x1
  409175:	cmp    bl,0x3d
  409178:	je     4091ed <next@@Base+0xdad>
  40917a:	add    QWORD PTR [rip+0xa476],0x1        # 4135f8 <__bss_start@@Base+0x14a4>
  409182:	vmovdqa xmm0,XMMWORD PTR [rip+0xa236]        # 4133c0 <__bss_start@@Base+0x126c>
  40918a:	vpsubq xmm0,xmm0,XMMWORD PTR [rip+0x32de]        # 40c470 <_IO_stdin_used@@Base+0x470>
  409192:	vmovdqa XMMWORD PTR [rip+0xa226],xmm0        # 4133c0 <__bss_start@@Base+0x126c>
  40919a:	lea    rcx,[rip+0xa1ff]        # 4133a0 <__bss_start@@Base+0x124c>
  4091a1:	add    QWORD PTR [rip+0xa1f7],0x1        # 4133a0 <__bss_start@@Base+0x124c>
  4091a9:	mov    rax,QWORD PTR [r15+0x10]
  4091ad:	xor    edx,edx
  4091af:	test   rax,rax
  4091b2:	sete   dl
  4091b5:	add    QWORD PTR [rcx+rdx*8+0x8],0x1
  4091bb:	test   rax,rax
  4091be:	je     409351 <next@@Base+0xf11>
  4091c4:	add    QWORD PTR [rip+0xa1ec],0x1        # 4133b8 <__bss_start@@Base+0x1264>
  4091cc:	add    rax,0xffffffffffffffff
  4091d0:	mov    QWORD PTR [r15+0x10],rax
  4091d4:	mov    edi,0x2
  4091d9:	call   403190 <malloc@plt>
  4091de:	mov    cl,BYTE PTR [rsp+0x10]
  4091e2:	mov    BYTE PTR [rax],cl
  4091e4:	mov    rcx,rax
  4091e7:	add    rcx,0x1
  4091eb:	jmp    409210 <next@@Base+0xdd0>
  4091ed:	add    QWORD PTR [rip+0xa40b],0x1        # 413600 <__bss_start@@Base+0x14ac>
  4091f5:	mov    edi,0x3
  4091fa:	call   403190 <malloc@plt>
  4091ff:	mov    cl,BYTE PTR [rsp+0x10]
  409203:	mov    BYTE PTR [rax],cl
  409205:	mov    BYTE PTR [rax+0x1],0x3d
  409209:	mov    rcx,rax
  40920c:	add    rcx,0x2
  409210:	mov    BYTE PTR [rcx],0x0
  409213:	add    QWORD PTR [rip+0xa3ed],0x1        # 413608 <__bss_start@@Base+0x14b4>
  40921b:	mov    rdi,r14
  40921e:	mov    rsi,rax
  409221:	call   407ea0 <init_token_boolean_op@@Base>
  409226:	jmp    408877 <next@@Base+0x437>
  40922b:	xor    eax,eax
  40922d:	cmp    bl,0x3d
  409230:	setne  al
  409233:	add    QWORD PTR [r12+rax*8+0x240],0x1
  40923c:	cmp    bl,0x3d
  40923f:	jne    4092bd <next@@Base+0xe7d>
  409241:	movsxd rax,ecx
  409244:	vmovdqa xmm0,XMMWORD PTR [rip+0xa144]        # 413390 <__bss_start@@Base+0x123c>
  40924c:	vpcmpeqd xmm1,xmm1,xmm1
  409250:	vpsubq xmm0,xmm0,xmm1
  409254:	vmovdqa XMMWORD PTR [rip+0xa134],xmm0        # 413390 <__bss_start@@Base+0x123c>
  40925c:	mov    BYTE PTR [rsp+rax*1+0x10],0x3d
  409261:	mov    rax,QWORD PTR [r15]
  409264:	mov    rcx,QWORD PTR [r15+0x10]
  409268:	lea    rdx,[rcx+0x1]
  40926c:	mov    QWORD PTR [r15+0x10],rdx
  409270:	mov    bl,BYTE PTR [rax+rcx*1]
  409273:	mov    edi,0x10
  409278:	call   403190 <malloc@plt>
  40927d:	mov    r14,rax
  409280:	xor    eax,eax
  409282:	cmp    bl,0x3d
  409285:	sete   al
  409288:	add    QWORD PTR [r12+rax*8+0x250],0x1
  409291:	cmp    bl,0x3d
  409294:	jne    409371 <next@@Base+0xf31>
  40929a:	add    QWORD PTR [rip+0xa38e],0x1        # 413630 <__bss_start@@Base+0x14dc>
  4092a2:	mov    edi,0x3
  4092a7:	call   403190 <malloc@plt>
  4092ac:	mov    cl,BYTE PTR [rsp+0x10]
  4092b0:	mov    BYTE PTR [rax],cl
  4092b2:	mov    WORD PTR [rax+0x1],0x3d
  4092b8:	jmp    40921b <next@@Base+0xddb>
  4092bd:	xor    eax,eax
  4092bf:	cmp    bl,0x7c
  4092c2:	setne  al
  4092c5:	add    QWORD PTR [r12+rax*8+0x268],0x1
  4092ce:	cmp    bl,0x7c
  4092d1:	jne    409391 <next@@Base+0xf51>
  4092d7:	movsxd rax,DWORD PTR [rsp+0xc]
  4092dc:	vmovdqa xmm0,XMMWORD PTR [rip+0xa0ac]        # 413390 <__bss_start@@Base+0x123c>
  4092e4:	vpcmpeqd xmm1,xmm1,xmm1
  4092e8:	vpsubq xmm0,xmm0,xmm1
  4092ec:	vmovdqa XMMWORD PTR [rip+0xa09c],xmm0        # 413390 <__bss_start@@Base+0x123c>
  4092f4:	mov    BYTE PTR [rsp+rax*1+0x10],0x7c
  4092f9:	mov    rax,QWORD PTR [r15]
  4092fc:	mov    rcx,QWORD PTR [r15+0x10]
  409300:	lea    rdx,[rcx+0x1]
  409304:	mov    QWORD PTR [r15+0x10],rdx
  409308:	mov    bl,BYTE PTR [rax+rcx*1]
  40930b:	mov    edi,0x10
  409310:	call   403190 <malloc@plt>
  409315:	mov    r14,rax
  409318:	xor    eax,eax
  40931a:	cmp    bl,0x7c
  40931d:	sete   al
  409320:	add    QWORD PTR [r12+rax*8+0x278],0x1
  409329:	cmp    bl,0x7c
  40932c:	jne    409371 <next@@Base+0xf31>
  40932e:	add    QWORD PTR [rip+0xa322],0x1        # 413658 <__bss_start@@Base+0x1504>
  409336:	mov    edi,0x3
  40933b:	call   403190 <malloc@plt>
  409340:	mov    cl,BYTE PTR [rsp+0x10]
  409344:	mov    BYTE PTR [rax],cl
  409346:	mov    WORD PTR [rax+0x1],0x7c
  40934c:	jmp    40921b <next@@Base+0xddb>
  409351:	mov    rax,QWORD PTR [rip+0x8ca0]        # 411ff8 <stderr@GLIBC_2.2.5>
  409358:	mov    rcx,QWORD PTR [rax]
  40935b:	lea    rdi,[rip+0x3ac6]        # 40ce28 <UnitySizeMask@@Base+0x758>
  409362:	mov    esi,0x20
  409367:	mov    edx,0x1
  40936c:	call   403230 <fwrite@plt>
  409371:	mov    edi,0x1
  409376:	call   403220 <exit@plt>
  40937b:	lea    rdi,[rip+0x889e]        # 411c20 <UnitySizeMask@@Base+0x5550>
  409382:	call   4093c0 <next@@Base+0xf80>
  409387:	mov    edi,0x1
  40938c:	call   403220 <exit@plt>
  409391:	add    QWORD PTR [rip+0xa2cf],0x1        # 413668 <__bss_start@@Base+0x1514>
  409399:	movsx  edx,bl
  40939c:	mov    rax,QWORD PTR [rip+0x8c55]        # 411ff8 <stderr@GLIBC_2.2.5>
  4093a3:	mov    rdi,QWORD PTR [rax]
  4093a6:	lea    rsi,[rip+0x3a9c]        # 40ce49 <UnitySizeMask@@Base+0x779>
  4093ad:	xor    eax,eax
  4093af:	call   403140 <fprintf@plt>
  4093b4:	mov    edi,0x1
  4093b9:	call   403220 <exit@plt>
  4093be:	xchg   ax,ax
  4093c0:	mov    eax,DWORD PTR [rip+0x8d82]        # 412148 <__data_start@@Base+0x18>
  4093c6:	mov    ecx,0xffffffff
  4093cb:	cmp    rax,rcx
  4093ce:	je     4093dd <next@@Base+0xf9d>
  4093d0:	mov    rax,QWORD PTR [rdi+rax*8]
  4093d4:	test   rax,rax
  4093d7:	je     4093dd <next@@Base+0xf9d>
  4093d9:	add    QWORD PTR [rax],0x1
  4093dd:	ret    
  4093de:	xchg   ax,ax
  4093e0:	push   r15
  4093e2:	push   r14
  4093e4:	push   rbx
  4093e5:	lea    rdi,[rip+0x3ae4]        # 40ced0 <UnitySizeMask@@Base+0x800>
  4093ec:	lea    rsi,[rip+0x2d3d]        # 40c130 <_IO_stdin_used@@Base+0x130>
  4093f3:	mov    edx,0xbd3d1f9d
  4093f8:	call   409500 <next@@Base+0x10c0>
  4093fd:	xor    ebx,ebx
  4093ff:	lea    r14,[rip+0x884a]        # 411c50 <UnitySizeMask@@Base+0x5580>
  409406:	lea    r15,[rip+0x8963]        # 411d70 <UnitySizeMask@@Base+0x56a0>
  40940d:	nop    DWORD PTR [rax]
  409410:	mov    edi,DWORD PTR [r14+rbx*2]
  409414:	mov    rsi,QWORD PTR [r14+rbx*2+0x8]
  409419:	mov    edx,DWORD PTR [r14+rbx*2+0x10]
  40941e:	mov    r8d,DWORD PTR [r14+rbx*2+0x18]
  409423:	mov    ecx,DWORD PTR [r14+rbx*2+0x14]
  409428:	call   409950 <next@@Base+0x1510>
  40942d:	mov    edi,DWORD PTR [rbx+r15*1]
  409431:	mov    rsi,QWORD PTR [rbx+r15*1+0x8]
  409436:	call   409d80 <next@@Base+0x1940>
  40943b:	add    rbx,0x10
  40943f:	cmp    rbx,0x90
  409446:	jne    409410 <next@@Base+0xfd0>
  409448:	call   40a1a0 <next@@Base+0x1d60>
  40944d:	pop    rbx
  40944e:	pop    r14
  409450:	pop    r15
  409452:	jmp    40a940 <next@@Base+0x2500>
  409457:	nop    WORD PTR [rax+rax*1+0x0]
  409460:	push   rax
  409461:	call   4093e0 <next@@Base+0xfa0>
  409466:	vxorps xmm1,xmm1,xmm1
  40946a:	vmovaps XMMWORD PTR [rip+0x9ebe],xmm1        # 413330 <__bss_start@@Base+0x11dc>
  409472:	vxorps xmm0,xmm0,xmm0
  409476:	vmovups YMMWORD PTR [rip+0x9ec2],ymm0        # 413340 <__bss_start@@Base+0x11ec>
  40947e:	mov    QWORD PTR [rip+0x9ed7],0x0        # 413360 <__bss_start@@Base+0x120c>
  409489:	vmovaps XMMWORD PTR [rip+0x9edf],xmm1        # 413370 <__bss_start@@Base+0x121c>
  409491:	vmovaps XMMWORD PTR [rip+0x9ee7],xmm1        # 413380 <__bss_start@@Base+0x122c>
  409499:	vmovaps XMMWORD PTR [rip+0x9eef],xmm1        # 413390 <__bss_start@@Base+0x123c>
  4094a1:	vmovups YMMWORD PTR [rip+0x9ef7],ymm0        # 4133a0 <__bss_start@@Base+0x124c>
  4094a9:	vmovaps XMMWORD PTR [rip+0x9f0f],xmm1        # 4133c0 <__bss_start@@Base+0x126c>
  4094b1:	lea    rdi,[rip+0x9f18]        # 4133d0 <__bss_start@@Base+0x127c>
  4094b8:	xor    esi,esi
  4094ba:	mov    edx,0x3f0
  4094bf:	vzeroupper 
  4094c2:	call   403110 <memset@plt>
  4094c7:	vxorps xmm0,xmm0,xmm0
  4094cb:	vmovaps XMMWORD PTR [rip+0xa2ed],xmm0        # 4137c0 <__bss_start@@Base+0x166c>
  4094d3:	pop    rax
  4094d4:	ret    
  4094d5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4094df:	nop
  4094e0:	lea    rdi,[rip+0xfffffffffffffef9]        # 4093e0 <next@@Base+0xfa0>
  4094e7:	lea    rsi,[rip+0xffffffffffffff72]        # 409460 <next@@Base+0x1020>
  4094ee:	jmp    40ad00 <__gcov_flush@@Base+0xa0>
  4094f3:	nop
  4094f4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4094fe:	xchg   ax,ax
  409500:	push   rbp
  409501:	push   r15
  409503:	push   r14
  409505:	push   r13
  409507:	push   r12
  409509:	push   rbx
  40950a:	sub    rsp,0x18
  40950e:	mov    r14d,edx
  409511:	mov    r15,rsi
  409514:	mov    r12,rdi
  409517:	lea    rdi,[rsp+0xc]
  40951c:	lea    rsi,[rsp+0x10]
  409521:	call   40b040 <__gcov_flush@@Base+0x3e0>
  409526:	test   rax,rax
  409529:	je     409563 <next@@Base+0x1123>
  40952b:	mov    rbx,rax
  40952e:	mov    r13,QWORD PTR [rsp+0x10]
  409533:	mov    rdi,r12
  409536:	call   4030c0 <strlen@plt>
  40953b:	lea    rdi,[rax+r13*1]
  40953f:	add    rdi,0x2
  409543:	call   403190 <malloc@plt>
  409548:	mov    rbp,rax
  40954b:	mov    r8d,DWORD PTR [rsp+0xc]
  409550:	mov    rdi,rax
  409553:	mov    rsi,r12
  409556:	mov    rdx,rbx
  409559:	mov    rcx,r13
  40955c:	call   40b0d0 <__gcov_flush@@Base+0x470>
  409561:	jmp    40956e <next@@Base+0x112e>
  409563:	mov    rdi,r12
  409566:	call   403240 <strdup@plt>
  40956b:	mov    rbp,rax
  40956e:	mov    QWORD PTR [rip+0xa25b],rbp        # 4137d0 <__bss_start@@Base+0x167c>
  409575:	mov    BYTE PTR [rip+0xa25c],0x0        # 4137d8 <__bss_start@@Base+0x1684>
  40957c:	mov    esi,0x2
  409581:	xor    eax,eax
  409583:	mov    rdi,rbp
  409586:	call   403200 <open@plt>
  40958b:	mov    DWORD PTR [rip+0x8bbb],eax        # 41214c <__data_start@@Base+0x1c>
  409591:	cmp    eax,0xffffffff
  409594:	je     40959f <next@@Base+0x115f>
  409596:	lea    rbx,[rip+0x39c6]        # 40cf63 <UnitySizeMask@@Base+0x893>
  40959d:	jmp    409603 <next@@Base+0x11c3>
  40959f:	mov    BYTE PTR [rip+0xa232],0x1        # 4137d8 <__bss_start@@Base+0x1684>
  4095a6:	mov    rdi,QWORD PTR [rip+0xa223]        # 4137d0 <__bss_start@@Base+0x167c>
  4095ad:	mov    esi,0x42
  4095b2:	mov    edx,0x1a4
  4095b7:	xor    eax,eax
  4095b9:	call   403200 <open@plt>
  4095be:	mov    DWORD PTR [rip+0x8b88],eax        # 41214c <__data_start@@Base+0x1c>
  4095c4:	lea    rbx,[rip+0x399c]        # 40cf67 <UnitySizeMask@@Base+0x897>
  4095cb:	cmp    eax,0xffffffff
  4095ce:	jne    409603 <next@@Base+0x11c3>
  4095d0:	mov    rdi,QWORD PTR [rip+0xa1f9]        # 4137d0 <__bss_start@@Base+0x167c>
  4095d7:	call   40adf0 <__gcov_flush@@Base+0x190>
  4095dc:	mov    rdi,QWORD PTR [rip+0xa1ed]        # 4137d0 <__bss_start@@Base+0x167c>
  4095e3:	mov    esi,0x42
  4095e8:	mov    edx,0x1a4
  4095ed:	xor    eax,eax
  4095ef:	call   403200 <open@plt>
  4095f4:	mov    DWORD PTR [rip+0x8b52],eax        # 41214c <__data_start@@Base+0x1c>
  4095fa:	cmp    eax,0xffffffff
  4095fd:	je     4098f9 <next@@Base+0x14b9>
  409603:	mov    edi,eax
  409605:	call   40aeb0 <__gcov_flush@@Base+0x250>
  40960a:	mov    edi,DWORD PTR [rip+0x8b3c]        # 41214c <__data_start@@Base+0x1c>
  409610:	mov    rsi,rbx
  409613:	call   4031d0 <fdopen@plt>
  409618:	mov    QWORD PTR [rip+0xa1c1],rax        # 4137e0 <__bss_start@@Base+0x168c>
  40961f:	mov    QWORD PTR [rip+0xa1be],0x0        # 4137e8 <__bss_start@@Base+0x1694>
  40962a:	mov    QWORD PTR [rip+0xa1bb],0x0        # 4137f0 <__bss_start@@Base+0x169c>
  409635:	mov    QWORD PTR [rip+0xa1b8],0x0        # 4137f8 <__bss_start@@Base+0x16a4>
  409640:	cmp    BYTE PTR [rip+0xa191],0x1        # 4137d8 <__bss_start@@Base+0x1684>
  409647:	jne    409677 <next@@Base+0x1237>
  409649:	mov    edi,0x20000
  40964e:	call   403190 <malloc@plt>
  409653:	mov    r12,rax
  409656:	mov    QWORD PTR [rip+0xa18b],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40965d:	mov    QWORD PTR [rip+0xa188],0x20000        # 4137f0 <__bss_start@@Base+0x169c>
  409668:	xor    esi,esi
  40966a:	mov    edx,0x20000
  40966f:	mov    rdi,rax
  409672:	jmp    409793 <next@@Base+0x1353>
  409677:	xor    esi,esi
  409679:	mov    edx,0x2
  40967e:	mov    rdi,rax
  409681:	call   4031b0 <fseek@plt>
  409686:	mov    rdi,QWORD PTR [rip+0xa153]        # 4137e0 <__bss_start@@Base+0x168c>
  40968d:	call   403150 <ftell@plt>
  409692:	mov    QWORD PTR [rip+0xa17f],rax        # 413818 <__bss_start@@Base+0x16c4>
  409699:	test   rax,rax
  40969c:	je     409730 <next@@Base+0x12f0>
  4096a2:	mov    r8d,DWORD PTR [rip+0x8aa3]        # 41214c <__data_start@@Base+0x1c>
  4096a9:	xor    edi,edi
  4096ab:	mov    edx,0x3
  4096b0:	mov    ecx,0x1
  4096b5:	xor    r9d,r9d
  4096b8:	mov    rsi,rax
  4096bb:	call   4030d0 <mmap@plt>
  4096c0:	mov    QWORD PTR [rip+0xa121],rax        # 4137e8 <__bss_start@@Base+0x1694>
  4096c7:	cmp    rax,0xffffffffffffffff
  4096cb:	je     4096fc <next@@Base+0x12bc>
  4096cd:	mov    r12,rax
  4096d0:	cmp    BYTE PTR [rip+0xa101],0x0        # 4137d8 <__bss_start@@Base+0x1684>
  4096d7:	jne    409798 <next@@Base+0x1358>
  4096dd:	mov    rbx,QWORD PTR [rip+0xa114]        # 4137f8 <__bss_start@@Base+0x16a4>
  4096e4:	mov    DWORD PTR [r12+rbx*1],0x67636461
  4096ec:	add    rbx,0x4
  4096f0:	mov    QWORD PTR [rip+0xa101],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  4096f7:	jmp    4097fa <next@@Base+0x13ba>
  4096fc:	call   403050 <__errno_location@plt>
  409701:	mov    edi,DWORD PTR [rax]
  409703:	mov    rax,QWORD PTR [rip+0x88ee]        # 411ff8 <stderr@GLIBC_2.2.5>
  40970a:	mov    rbx,QWORD PTR [rax]
  40970d:	mov    rbp,QWORD PTR [rip+0xa0bc]        # 4137d0 <__bss_start@@Base+0x167c>
  409714:	call   403250 <strerror@plt>
  409719:	mov    rcx,rax
  40971c:	lea    rsi,[rip+0x39a2]        # 40d0c5 <UnitySizeMask@@Base+0x9f5>
  409723:	xor    eax,eax
  409725:	mov    rdi,rbx
  409728:	mov    rdx,rbp
  40972b:	call   403140 <fprintf@plt>
  409730:	mov    BYTE PTR [rip+0xa0a1],0x1        # 4137d8 <__bss_start@@Base+0x1684>
  409737:	mov    QWORD PTR [rip+0xa0a6],0x0        # 4137e8 <__bss_start@@Base+0x1694>
  409742:	mov    QWORD PTR [rip+0xa0a3],0x0        # 4137f0 <__bss_start@@Base+0x169c>
  40974d:	mov    rbx,QWORD PTR [rip+0xa0a4]        # 4137f8 <__bss_start@@Base+0x16a4>
  409754:	cmp    rbx,0xfffffffffffe0000
  40975b:	jne    409762 <next@@Base+0x1322>
  40975d:	xor    r12d,r12d
  409760:	jmp    409789 <next@@Base+0x1349>
  409762:	add    rbx,0x3ffff
  409769:	and    rbx,0xfffffffffffe0000
  409770:	mov    rdi,rbx
  409773:	call   403190 <malloc@plt>
  409778:	mov    r12,rax
  40977b:	mov    QWORD PTR [rip+0xa066],rax        # 4137e8 <__bss_start@@Base+0x1694>
  409782:	mov    QWORD PTR [rip+0xa067],rbx        # 4137f0 <__bss_start@@Base+0x169c>
  409789:	xor    esi,esi
  40978b:	mov    edx,0x20000
  409790:	mov    rdi,r12
  409793:	call   403110 <memset@plt>
  409798:	mov    rbx,QWORD PTR [rip+0xa059]        # 4137f8 <__bss_start@@Base+0x16a4>
  40979f:	lea    rax,[rbx+0x4]
  4097a3:	cmp    rax,QWORD PTR [rip+0xa046]        # 4137f0 <__bss_start@@Base+0x169c>
  4097aa:	jbe    409814 <next@@Base+0x13d4>
  4097ac:	add    rbx,0x20003
  4097b3:	and    rbx,0xfffffffffffe0000
  4097ba:	mov    rdi,r12
  4097bd:	mov    rsi,rbx
  4097c0:	call   4031c0 <realloc@plt>
  4097c5:	mov    r12,rax
  4097c8:	mov    QWORD PTR [rip+0xa019],rax        # 4137e8 <__bss_start@@Base+0x1694>
  4097cf:	mov    QWORD PTR [rip+0xa01a],rbx        # 4137f0 <__bss_start@@Base+0x169c>
  4097d6:	mov    al,BYTE PTR [rip+0x9ffc]        # 4137d8 <__bss_start@@Base+0x1684>
  4097dc:	mov    rbp,QWORD PTR [rip+0xa015]        # 4137f8 <__bss_start@@Base+0x16a4>
  4097e3:	mov    DWORD PTR [r12+rbp*1],0x67636461
  4097eb:	lea    rbx,[rbp+0x4]
  4097ef:	mov    QWORD PTR [rip+0xa002],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  4097f6:	cmp    al,0x1
  4097f8:	je     40982e <next@@Base+0x13ee>
  4097fa:	mov    eax,DWORD PTR [r15]
  4097fd:	mov    DWORD PTR [r12+rbx*1],eax
  409801:	add    rbx,0x4
  409805:	mov    QWORD PTR [rip+0x9fec],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40980c:	mov    rax,rbx
  40980f:	jmp    4098db <next@@Base+0x149b>
  409814:	mov    rbp,QWORD PTR [rip+0x9fdd]        # 4137f8 <__bss_start@@Base+0x16a4>
  40981b:	mov    DWORD PTR [r12+rbp*1],0x67636461
  409823:	lea    rbx,[rbp+0x4]
  409827:	mov    QWORD PTR [rip+0x9fca],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40982e:	lea    rax,[rbp+0x8]
  409832:	cmp    rax,QWORD PTR [rip+0x9fb7]        # 4137f0 <__bss_start@@Base+0x169c>
  409839:	jbe    40988b <next@@Base+0x144b>
  40983b:	add    rbp,0x20007
  409842:	and    rbp,0xfffffffffffe0000
  409849:	mov    rdi,r12
  40984c:	mov    rsi,rbp
  40984f:	call   4031c0 <realloc@plt>
  409854:	mov    r12,rax
  409857:	mov    QWORD PTR [rip+0x9f8a],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40985e:	mov    QWORD PTR [rip+0x9f8b],rbp        # 4137f0 <__bss_start@@Base+0x169c>
  409865:	mov    rbx,QWORD PTR [rip+0x9f8c]        # 4137f8 <__bss_start@@Base+0x16a4>
  40986c:	mov    cl,BYTE PTR [rip+0x9f66]        # 4137d8 <__bss_start@@Base+0x1684>
  409872:	mov    eax,DWORD PTR [r15]
  409875:	mov    DWORD PTR [r12+rbx*1],eax
  409879:	lea    rax,[rbx+0x4]
  40987d:	mov    QWORD PTR [rip+0x9f74],rax        # 4137f8 <__bss_start@@Base+0x16a4>
  409884:	cmp    cl,0x1
  409887:	je     40989d <next@@Base+0x145d>
  409889:	jmp    4098db <next@@Base+0x149b>
  40988b:	mov    eax,DWORD PTR [r15]
  40988e:	mov    DWORD PTR [r12+rbx*1],eax
  409892:	lea    rax,[rbx+0x4]
  409896:	mov    QWORD PTR [rip+0x9f5b],rax        # 4137f8 <__bss_start@@Base+0x16a4>
  40989d:	lea    rcx,[rbx+0x8]
  4098a1:	cmp    rcx,QWORD PTR [rip+0x9f48]        # 4137f0 <__bss_start@@Base+0x169c>
  4098a8:	jbe    4098db <next@@Base+0x149b>
  4098aa:	add    rbx,0x20007
  4098b1:	and    rbx,0xfffffffffffe0000
  4098b8:	mov    rdi,r12
  4098bb:	mov    rsi,rbx
  4098be:	call   4031c0 <realloc@plt>
  4098c3:	mov    r12,rax
  4098c6:	mov    QWORD PTR [rip+0x9f1b],rax        # 4137e8 <__bss_start@@Base+0x1694>
  4098cd:	mov    QWORD PTR [rip+0x9f1c],rbx        # 4137f0 <__bss_start@@Base+0x169c>
  4098d4:	mov    rax,QWORD PTR [rip+0x9f1d]        # 4137f8 <__bss_start@@Base+0x16a4>
  4098db:	mov    DWORD PTR [r12+rax*1],r14d
  4098df:	add    rax,0x4
  4098e3:	mov    QWORD PTR [rip+0x9f0e],rax        # 4137f8 <__bss_start@@Base+0x16a4>
  4098ea:	add    rsp,0x18
  4098ee:	pop    rbx
  4098ef:	pop    r12
  4098f1:	pop    r13
  4098f3:	pop    r14
  4098f5:	pop    r15
  4098f7:	pop    rbp
  4098f8:	ret    
  4098f9:	call   403050 <__errno_location@plt>
  4098fe:	mov    edi,DWORD PTR [rax]
  409900:	mov    rax,QWORD PTR [rip+0x86f1]        # 411ff8 <stderr@GLIBC_2.2.5>
  409907:	mov    rbx,QWORD PTR [rax]
  40990a:	mov    rbp,QWORD PTR [rip+0x9ebf]        # 4137d0 <__bss_start@@Base+0x167c>
  409911:	call   403250 <strerror@plt>
  409916:	mov    rcx,rax
  409919:	lea    rsi,[rip+0x364b]        # 40cf6b <UnitySizeMask@@Base+0x89b>
  409920:	xor    eax,eax
  409922:	mov    rdi,rbx
  409925:	mov    rdx,rbp
  409928:	call   403140 <fprintf@plt>
  40992d:	jmp    4098ea <next@@Base+0x14aa>
  40992f:	nop
  409930:	mov    eax,DWORD PTR [rdi]
  409932:	mov    ecx,0xffffffff
  409937:	cmp    rax,rcx
  40993a:	je     409949 <next@@Base+0x1509>
  40993c:	mov    rax,QWORD PTR [rsi+rax*8]
  409940:	test   rax,rax
  409943:	je     409949 <next@@Base+0x1509>
  409945:	add    QWORD PTR [rax],0x1
  409949:	ret    
  40994a:	nop    WORD PTR [rax+rax*1+0x0]
  409950:	push   rbp
  409951:	push   r15
  409953:	push   r14
  409955:	push   r13
  409957:	push   r12
  409959:	push   rbx
  40995a:	sub    rsp,0x18
  40995e:	xor    r14d,r14d
  409961:	test   cl,cl
  409963:	setne  al
  409966:	cmp    QWORD PTR [rip+0x9e72],0x0        # 4137e0 <__bss_start@@Base+0x168c>
  40996e:	je     409c86 <next@@Base+0x1846>
  409974:	mov    DWORD PTR [rsp+0xc],edi
  409978:	mov    DWORD PTR [rsp+0x10],edx
  40997c:	mov    DWORD PTR [rsp+0x14],ecx
  409980:	mov    DWORD PTR [rsp+0x8],r8d
  409985:	mov    r15,rsi
  409988:	mov    r14b,al
  40998b:	cmp    BYTE PTR [rip+0x9e46],0x1        # 4137d8 <__bss_start@@Base+0x1684>
  409992:	jne    4099d3 <next@@Base+0x1593>
  409994:	mov    rbx,QWORD PTR [rip+0x9e5d]        # 4137f8 <__bss_start@@Base+0x16a4>
  40999b:	lea    rax,[rbx+0x4]
  40999f:	cmp    rax,QWORD PTR [rip+0x9e4a]        # 4137f0 <__bss_start@@Base+0x169c>
  4099a6:	jbe    4099d3 <next@@Base+0x1593>
  4099a8:	add    rbx,0x20003
  4099af:	and    rbx,0xfffffffffffe0000
  4099b6:	mov    rdi,QWORD PTR [rip+0x9e2b]        # 4137e8 <__bss_start@@Base+0x1694>
  4099bd:	mov    rsi,rbx
  4099c0:	call   4031c0 <realloc@plt>
  4099c5:	mov    QWORD PTR [rip+0x9e1c],rax        # 4137e8 <__bss_start@@Base+0x1694>
  4099cc:	mov    QWORD PTR [rip+0x9e1d],rbx        # 4137f0 <__bss_start@@Base+0x169c>
  4099d3:	or     r14d,0x2
  4099d7:	mov    r12,QWORD PTR [rip+0x9e0a]        # 4137e8 <__bss_start@@Base+0x1694>
  4099de:	mov    r13,QWORD PTR [rip+0x9e13]        # 4137f8 <__bss_start@@Base+0x16a4>
  4099e5:	mov    DWORD PTR [r12+r13*1],0x1000000
  4099ed:	lea    rbx,[r13+0x4]
  4099f1:	mov    QWORD PTR [rip+0x9e00],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  4099f8:	test   r15,r15
  4099fb:	je     409a11 <next@@Base+0x15d1>
  4099fd:	mov    rdi,r15
  409a00:	call   4030c0 <strlen@plt>
  409a05:	shr    rax,0x2
  409a09:	lea    r14d,[r14+rax*1]
  409a0d:	add    r14d,0x2
  409a11:	cmp    BYTE PTR [rip+0x9dc0],0x0        # 4137d8 <__bss_start@@Base+0x1684>
  409a18:	je     409a7a <next@@Base+0x163a>
  409a1a:	lea    rbp,[r13+0x8]
  409a1e:	cmp    rbp,QWORD PTR [rip+0x9dcb]        # 4137f0 <__bss_start@@Base+0x169c>
  409a25:	jbe    409c95 <next@@Base+0x1855>
  409a2b:	add    r13,0x20007
  409a32:	and    r13,0xfffffffffffe0000
  409a39:	mov    rdi,r12
  409a3c:	mov    rsi,r13
  409a3f:	call   4031c0 <realloc@plt>
  409a44:	mov    r12,rax
  409a47:	mov    QWORD PTR [rip+0x9d9a],rax        # 4137e8 <__bss_start@@Base+0x1694>
  409a4e:	mov    QWORD PTR [rip+0x9d9b],r13        # 4137f0 <__bss_start@@Base+0x169c>
  409a55:	mov    rbx,QWORD PTR [rip+0x9d9c]        # 4137f8 <__bss_start@@Base+0x16a4>
  409a5c:	mov    al,BYTE PTR [rip+0x9d76]        # 4137d8 <__bss_start@@Base+0x1684>
  409a62:	mov    DWORD PTR [r12+rbx*1],r14d
  409a66:	lea    rbp,[rbx+0x4]
  409a6a:	mov    QWORD PTR [rip+0x9d87],rbp        # 4137f8 <__bss_start@@Base+0x16a4>
  409a71:	cmp    al,0x1
  409a73:	jne    409a8d <next@@Base+0x164d>
  409a75:	jmp    409ca1 <next@@Base+0x1861>
  409a7a:	mov    DWORD PTR [r12+r13*1+0x4],r14d
  409a7f:	add    r13,0x8
  409a83:	mov    QWORD PTR [rip+0x9d6e],r13        # 4137f8 <__bss_start@@Base+0x16a4>
  409a8a:	mov    rbp,r13
  409a8d:	mov    eax,DWORD PTR [rsp+0xc]
  409a91:	mov    DWORD PTR [r12+rbp*1],eax
  409a95:	add    rbp,0x4
  409a99:	mov    QWORD PTR [rip+0x9d58],rbp        # 4137f8 <__bss_start@@Base+0x16a4>
  409aa0:	mov    rbx,rbp
  409aa3:	mov    r13,r15
  409aa6:	mov    r14d,DWORD PTR [rsp+0x14]
  409aab:	mov    r15d,DWORD PTR [rsp+0x10]
  409ab0:	lea    rbp,[rbx+0x4]
  409ab4:	mov    DWORD PTR [r12+rbx*1],r15d
  409ab8:	mov    QWORD PTR [rip+0x9d39],rbp        # 4137f8 <__bss_start@@Base+0x16a4>
  409abf:	test   r14b,r14b
  409ac2:	je     409b1e <next@@Base+0x16de>
  409ac4:	cmp    BYTE PTR [rip+0x9d0d],0x1        # 4137d8 <__bss_start@@Base+0x1684>
  409acb:	jne    409b0b <next@@Base+0x16cb>
  409acd:	lea    rax,[rbx+0x8]
  409ad1:	cmp    rax,QWORD PTR [rip+0x9d18]        # 4137f0 <__bss_start@@Base+0x169c>
  409ad8:	jbe    409b0b <next@@Base+0x16cb>
  409ada:	add    rbx,0x20007
  409ae1:	and    rbx,0xfffffffffffe0000
  409ae8:	mov    rdi,r12
  409aeb:	mov    rsi,rbx
  409aee:	call   4031c0 <realloc@plt>
  409af3:	mov    r12,rax
  409af6:	mov    QWORD PTR [rip+0x9ceb],rax        # 4137e8 <__bss_start@@Base+0x1694>
  409afd:	mov    QWORD PTR [rip+0x9cec],rbx        # 4137f0 <__bss_start@@Base+0x169c>
  409b04:	mov    rbp,QWORD PTR [rip+0x9ced]        # 4137f8 <__bss_start@@Base+0x16a4>
  409b0b:	mov    eax,DWORD PTR [rsp+0x8]
  409b0f:	mov    DWORD PTR [r12+rbp*1],eax
  409b13:	add    rbp,0x4
  409b17:	mov    QWORD PTR [rip+0x9cda],rbp        # 4137f8 <__bss_start@@Base+0x16a4>
  409b1e:	test   r13,r13
  409b21:	je     409c86 <next@@Base+0x1846>
  409b27:	mov    rdi,r13
  409b2a:	call   4030c0 <strlen@plt>
  409b2f:	mov    rbx,rax
  409b32:	shr    rbx,0x2
  409b36:	add    ebx,0x1
  409b39:	cmp    BYTE PTR [rip+0x9c98],0x1        # 4137d8 <__bss_start@@Base+0x1684>
  409b40:	jne    409b8c <next@@Base+0x174c>
  409b42:	lea    rax,[rbp+0x4]
  409b46:	mov    r14b,0x1
  409b49:	cmp    rax,QWORD PTR [rip+0x9ca0]        # 4137f0 <__bss_start@@Base+0x169c>
  409b50:	jbe    409b8f <next@@Base+0x174f>
  409b52:	add    rbp,0x20003
  409b59:	and    rbp,0xfffffffffffe0000
  409b60:	mov    rdi,r12
  409b63:	mov    rsi,rbp
  409b66:	call   4031c0 <realloc@plt>
  409b6b:	mov    r12,rax
  409b6e:	mov    QWORD PTR [rip+0x9c73],rax        # 4137e8 <__bss_start@@Base+0x1694>
  409b75:	mov    QWORD PTR [rip+0x9c74],rbp        # 4137f0 <__bss_start@@Base+0x169c>
  409b7c:	mov    r14b,BYTE PTR [rip+0x9c55]        # 4137d8 <__bss_start@@Base+0x1684>
  409b83:	mov    rbp,QWORD PTR [rip+0x9c6e]        # 4137f8 <__bss_start@@Base+0x16a4>
  409b8a:	jmp    409b8f <next@@Base+0x174f>
  409b8c:	xor    r14d,r14d
  409b8f:	mov    DWORD PTR [r12+rbp*1],ebx
  409b93:	add    rbp,0x4
  409b97:	mov    QWORD PTR [rip+0x9c5a],rbp        # 4137f8 <__bss_start@@Base+0x16a4>
  409b9e:	mov    rdi,r13
  409ba1:	call   4030c0 <strlen@plt>
  409ba6:	mov    rbx,rax
  409ba9:	test   r14b,0x1
  409bad:	je     409bf9 <next@@Base+0x17b9>
  409baf:	lea    r15,[rbx+rbp*1]
  409bb3:	mov    r14b,0x1
  409bb6:	cmp    r15,QWORD PTR [rip+0x9c33]        # 4137f0 <__bss_start@@Base+0x169c>
  409bbd:	jbe    409bfc <next@@Base+0x17bc>
  409bbf:	add    r15,0x1ffff
  409bc6:	and    r15,0xfffffffffffe0000
  409bcd:	mov    rdi,r12
  409bd0:	mov    rsi,r15
  409bd3:	call   4031c0 <realloc@plt>
  409bd8:	mov    r12,rax
  409bdb:	mov    QWORD PTR [rip+0x9c06],rax        # 4137e8 <__bss_start@@Base+0x1694>
  409be2:	mov    QWORD PTR [rip+0x9c07],r15        # 4137f0 <__bss_start@@Base+0x169c>
  409be9:	mov    rbp,QWORD PTR [rip+0x9c08]        # 4137f8 <__bss_start@@Base+0x16a4>
  409bf0:	mov    r14b,BYTE PTR [rip+0x9be1]        # 4137d8 <__bss_start@@Base+0x1684>
  409bf7:	jmp    409bfc <next@@Base+0x17bc>
  409bf9:	xor    r14d,r14d
  409bfc:	lea    rdi,[r12+rbp*1]
  409c00:	mov    rsi,r13
  409c03:	mov    rdx,rbx
  409c06:	call   403170 <memcpy@plt>
  409c0b:	add    rbx,rbp
  409c0e:	mov    QWORD PTR [rip+0x9be3],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  409c15:	mov    rdi,r13
  409c18:	call   4030c0 <strlen@plt>
  409c1d:	and    eax,0x3
  409c20:	mov    ebp,0x4
  409c25:	sub    rbp,rax
  409c28:	test   r14b,0x1
  409c2c:	je     409c6c <next@@Base+0x182c>
  409c2e:	lea    r14,[rbx+rbp*1]
  409c32:	cmp    r14,QWORD PTR [rip+0x9bb7]        # 4137f0 <__bss_start@@Base+0x169c>
  409c39:	jbe    409c6c <next@@Base+0x182c>
  409c3b:	add    r14,0x1ffff
  409c42:	and    r14,0xfffffffffffe0000
  409c49:	mov    rdi,r12
  409c4c:	mov    rsi,r14
  409c4f:	call   4031c0 <realloc@plt>
  409c54:	mov    r12,rax
  409c57:	mov    QWORD PTR [rip+0x9b8a],rax        # 4137e8 <__bss_start@@Base+0x1694>
  409c5e:	mov    QWORD PTR [rip+0x9b8b],r14        # 4137f0 <__bss_start@@Base+0x169c>
  409c65:	mov    rbx,QWORD PTR [rip+0x9b8c]        # 4137f8 <__bss_start@@Base+0x16a4>
  409c6c:	add    r12,rbx
  409c6f:	xor    esi,esi
  409c71:	mov    rdi,r12
  409c74:	mov    rdx,rbp
  409c77:	call   403110 <memset@plt>
  409c7c:	add    rbx,rbp
  409c7f:	mov    QWORD PTR [rip+0x9b72],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  409c86:	add    rsp,0x18
  409c8a:	pop    rbx
  409c8b:	pop    r12
  409c8d:	pop    r13
  409c8f:	pop    r14
  409c91:	pop    r15
  409c93:	pop    rbp
  409c94:	ret    
  409c95:	mov    DWORD PTR [r12+r13*1+0x4],r14d
  409c9a:	mov    QWORD PTR [rip+0x9b57],rbp        # 4137f8 <__bss_start@@Base+0x16a4>
  409ca1:	lea    rax,[rbx+0x8]
  409ca5:	cmp    rax,QWORD PTR [rip+0x9b44]        # 4137f0 <__bss_start@@Base+0x169c>
  409cac:	mov    r13,r15
  409caf:	jbe    409d0f <next@@Base+0x18cf>
  409cb1:	add    rbx,0x20007
  409cb8:	and    rbx,0xfffffffffffe0000
  409cbf:	mov    rdi,r12
  409cc2:	mov    rsi,rbx
  409cc5:	call   4031c0 <realloc@plt>
  409cca:	mov    r12,rax
  409ccd:	mov    QWORD PTR [rip+0x9b14],rax        # 4137e8 <__bss_start@@Base+0x1694>
  409cd4:	mov    QWORD PTR [rip+0x9b15],rbx        # 4137f0 <__bss_start@@Base+0x169c>
  409cdb:	mov    rbp,QWORD PTR [rip+0x9b16]        # 4137f8 <__bss_start@@Base+0x16a4>
  409ce2:	mov    al,BYTE PTR [rip+0x9af0]        # 4137d8 <__bss_start@@Base+0x1684>
  409ce8:	mov    ecx,DWORD PTR [rsp+0xc]
  409cec:	mov    DWORD PTR [r12+rbp*1],ecx
  409cf0:	lea    rbx,[rbp+0x4]
  409cf4:	mov    QWORD PTR [rip+0x9afd],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  409cfb:	cmp    al,0x1
  409cfd:	mov    r14d,DWORD PTR [rsp+0x14]
  409d02:	mov    r15d,DWORD PTR [rsp+0x10]
  409d07:	jne    409ab0 <next@@Base+0x1670>
  409d0d:	jmp    409d2c <next@@Base+0x18ec>
  409d0f:	mov    eax,DWORD PTR [rsp+0xc]
  409d13:	mov    DWORD PTR [r12+rbp*1],eax
  409d17:	lea    rbx,[rbp+0x4]
  409d1b:	mov    QWORD PTR [rip+0x9ad6],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  409d22:	mov    r14d,DWORD PTR [rsp+0x14]
  409d27:	mov    r15d,DWORD PTR [rsp+0x10]
  409d2c:	lea    rax,[rbp+0x8]
  409d30:	cmp    rax,QWORD PTR [rip+0x9ab9]        # 4137f0 <__bss_start@@Base+0x169c>
  409d37:	jbe    409ab0 <next@@Base+0x1670>
  409d3d:	add    rbp,0x20007
  409d44:	and    rbp,0xfffffffffffe0000
  409d4b:	mov    rdi,r12
  409d4e:	mov    rsi,rbp
  409d51:	call   4031c0 <realloc@plt>
  409d56:	mov    r12,rax
  409d59:	mov    QWORD PTR [rip+0x9a88],rax        # 4137e8 <__bss_start@@Base+0x1694>
  409d60:	mov    QWORD PTR [rip+0x9a89],rbp        # 4137f0 <__bss_start@@Base+0x169c>
  409d67:	mov    rbx,QWORD PTR [rip+0x9a8a]        # 4137f8 <__bss_start@@Base+0x16a4>
  409d6e:	jmp    409ab0 <next@@Base+0x1670>
  409d73:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409d7d:	nop    DWORD PTR [rax]
  409d80:	push   rbp
  409d81:	push   r15
  409d83:	push   r14
  409d85:	push   r13
  409d87:	push   r12
  409d89:	push   rbx
  409d8a:	sub    rsp,0x18
  409d8e:	cmp    QWORD PTR [rip+0x9a4a],0x0        # 4137e0 <__bss_start@@Base+0x168c>
  409d96:	je     409e3a <next@@Base+0x19fa>
  409d9c:	mov    r13d,edi
  409d9f:	mov    r14,QWORD PTR [rip+0x9a52]        # 4137f8 <__bss_start@@Base+0x16a4>
  409da6:	cmp    BYTE PTR [rip+0x9a2b],0x0        # 4137d8 <__bss_start@@Base+0x1684>
  409dad:	mov    QWORD PTR [rsp+0x8],rsi
  409db2:	je     409e49 <next@@Base+0x1a09>
  409db8:	lea    rbx,[r14+0x4]
  409dbc:	cmp    rbx,QWORD PTR [rip+0x9a2d]        # 4137f0 <__bss_start@@Base+0x169c>
  409dc3:	jbe    409ed1 <next@@Base+0x1a91>
  409dc9:	add    r14,0x20003
  409dd0:	and    r14,0xfffffffffffe0000
  409dd7:	mov    rdi,QWORD PTR [rip+0x9a0a]        # 4137e8 <__bss_start@@Base+0x1694>
  409dde:	mov    rsi,r14
  409de1:	call   4031c0 <realloc@plt>
  409de6:	mov    rsi,QWORD PTR [rsp+0x8]
  409deb:	mov    r15,rax
  409dee:	mov    QWORD PTR [rip+0x99f3],rax        # 4137e8 <__bss_start@@Base+0x1694>
  409df5:	mov    QWORD PTR [rip+0x99f4],r14        # 4137f0 <__bss_start@@Base+0x169c>
  409dfc:	mov    r14,QWORD PTR [rip+0x99f5]        # 4137f8 <__bss_start@@Base+0x16a4>
  409e03:	mov    al,BYTE PTR [rip+0x99cf]        # 4137d8 <__bss_start@@Base+0x1684>
  409e09:	lea    rbx,[r14+0x4]
  409e0d:	mov    DWORD PTR [r15+r14*1],0x1a10000
  409e15:	mov    QWORD PTR [rip+0x99dc],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  409e1c:	lea    ebp,[r13+r13*1+0x0]
  409e21:	xor    ecx,ecx
  409e23:	mov    QWORD PTR [rsp],rcx
  409e27:	mov    r12d,0x0
  409e2d:	cmp    al,0x1
  409e2f:	je     409eec <next@@Base+0x1aac>
  409e35:	jmp    40a01f <next@@Base+0x1bdf>
  409e3a:	add    rsp,0x18
  409e3e:	pop    rbx
  409e3f:	pop    r12
  409e41:	pop    r13
  409e43:	pop    r14
  409e45:	pop    r15
  409e47:	pop    rbp
  409e48:	ret    
  409e49:	mov    r15,QWORD PTR [rip+0x9998]        # 4137e8 <__bss_start@@Base+0x1694>
  409e50:	mov    ecx,DWORD PTR [r15+r14*1]
  409e54:	lea    rbx,[r14+0x4]
  409e58:	mov    QWORD PTR [rip+0x9999],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  409e5f:	cmp    ecx,0xffffffff
  409e62:	je     409f45 <next@@Base+0x1b05>
  409e68:	cmp    ecx,0x1a10000
  409e6e:	jne    409f53 <next@@Base+0x1b13>
  409e74:	mov    ecx,DWORD PTR [r15+r14*1+0x4]
  409e79:	lea    rbp,[r14+0x8]
  409e7d:	mov    QWORD PTR [rip+0x9974],rbp        # 4137f8 <__bss_start@@Base+0x16a4>
  409e84:	cmp    ecx,0xffffffff
  409e87:	je     409f6d <next@@Base+0x1b2d>
  409e8d:	mov    eax,ecx
  409e8f:	shr    eax,1
  409e91:	cmp    eax,r13d
  409e94:	jne    409f6d <next@@Base+0x1b2d>
  409e9a:	mov    r12d,r13d
  409e9d:	lea    rdi,[r12*8+0x0]
  409ea5:	call   403190 <malloc@plt>
  409eaa:	test   r13d,r13d
  409ead:	mov    rcx,rax
  409eb0:	mov    QWORD PTR [rsp],rax
  409eb4:	je     409f9a <next@@Base+0x1b5a>
  409eba:	mov    eax,r12d
  409ebd:	and    eax,0x1
  409ec0:	cmp    r13d,0x1
  409ec4:	jne    409fa4 <next@@Base+0x1b64>
  409eca:	xor    ecx,ecx
  409ecc:	jmp    409fe3 <next@@Base+0x1ba3>
  409ed1:	mov    r15,QWORD PTR [rip+0x9910]        # 4137e8 <__bss_start@@Base+0x1694>
  409ed8:	mov    DWORD PTR [r15+r14*1],0x1a10000
  409ee0:	mov    QWORD PTR [rip+0x9911],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  409ee7:	lea    ebp,[r13+r13*1+0x0]
  409eec:	lea    rax,[r14+0x8]
  409ef0:	cmp    rax,QWORD PTR [rip+0x98f9]        # 4137f0 <__bss_start@@Base+0x169c>
  409ef7:	jbe    409f37 <next@@Base+0x1af7>
  409ef9:	add    r14,0x20007
  409f00:	and    r14,0xfffffffffffe0000
  409f07:	mov    rdi,r15
  409f0a:	mov    rsi,r14
  409f0d:	call   4031c0 <realloc@plt>
  409f12:	mov    rsi,QWORD PTR [rsp+0x8]
  409f17:	mov    r15,rax
  409f1a:	mov    QWORD PTR [rip+0x98c7],rax        # 4137e8 <__bss_start@@Base+0x1694>
  409f21:	mov    QWORD PTR [rip+0x98c8],r14        # 4137f0 <__bss_start@@Base+0x169c>
  409f28:	xor    eax,eax
  409f2a:	mov    QWORD PTR [rsp],rax
  409f2e:	mov    rbx,QWORD PTR [rip+0x98c3]        # 4137f8 <__bss_start@@Base+0x16a4>
  409f35:	jmp    409f3d <next@@Base+0x1afd>
  409f37:	xor    eax,eax
  409f39:	mov    QWORD PTR [rsp],rax
  409f3d:	xor    r12d,r12d
  409f40:	jmp    40a01f <next@@Base+0x1bdf>
  409f45:	xor    r12d,r12d
  409f48:	xor    eax,eax
  409f4a:	mov    QWORD PTR [rsp],rax
  409f4e:	jmp    40a004 <next@@Base+0x1bc4>
  409f53:	mov    rax,QWORD PTR [rip+0x809e]        # 411ff8 <stderr@GLIBC_2.2.5>
  409f5a:	mov    rdi,QWORD PTR [rax]
  409f5d:	mov    rdx,QWORD PTR [rip+0x986c]        # 4137d0 <__bss_start@@Base+0x167c>
  409f64:	lea    rsi,[rip+0x3020]        # 40cf8b <UnitySizeMask@@Base+0x8bb>
  409f6b:	jmp    409f85 <next@@Base+0x1b45>
  409f6d:	mov    rax,QWORD PTR [rip+0x8084]        # 411ff8 <stderr@GLIBC_2.2.5>
  409f74:	mov    rdi,QWORD PTR [rax]
  409f77:	mov    rdx,QWORD PTR [rip+0x9852]        # 4137d0 <__bss_start@@Base+0x167c>
  409f7e:	lea    rsi,[rip+0x3050]        # 40cfd5 <UnitySizeMask@@Base+0x905>
  409f85:	xor    eax,eax
  409f87:	add    rsp,0x18
  409f8b:	pop    rbx
  409f8c:	pop    r12
  409f8e:	pop    r13
  409f90:	pop    r14
  409f92:	pop    r15
  409f94:	pop    rbp
  409f95:	jmp    403140 <fprintf@plt>
  409f9a:	mov    r12,rax
  409f9d:	mov    rsi,QWORD PTR [rsp+0x8]
  409fa2:	jmp    40a004 <next@@Base+0x1bc4>
  409fa4:	mov    rbp,0xfffffffffffffff8
  409fab:	sub    rbp,r14
  409fae:	lea    rdx,[r15+r14*1]
  409fb2:	add    rdx,0x14
  409fb6:	sub    r12,rax
  409fb9:	xor    ecx,ecx
  409fbb:	mov    rdi,QWORD PTR [rsp]
  409fbf:	nop
  409fc0:	mov    rsi,QWORD PTR [rdx+rcx*8-0xc]
  409fc5:	mov    QWORD PTR [rdi+rcx*8],rsi
  409fc9:	mov    rsi,QWORD PTR [rdx+rcx*8-0x4]
  409fce:	mov    QWORD PTR [rdi+rcx*8+0x8],rsi
  409fd3:	add    rcx,0x2
  409fd7:	add    rbp,0xfffffffffffffff0
  409fdb:	cmp    r12,rcx
  409fde:	jne    409fc0 <next@@Base+0x1b80>
  409fe0:	neg    rbp
  409fe3:	mov    rsi,QWORD PTR [rsp+0x8]
  409fe8:	test   rax,rax
  409feb:	mov    r12,QWORD PTR [rsp]
  409fef:	je     409ffd <next@@Base+0x1bbd>
  409ff1:	mov    rax,QWORD PTR [r15+rbp*1]
  409ff5:	mov    QWORD PTR [r12+rcx*8],rax
  409ff9:	add    rbp,0x8
  409ffd:	mov    QWORD PTR [rip+0x97f4],rbp        # 4137f8 <__bss_start@@Base+0x16a4>
  40a004:	mov    QWORD PTR [rip+0x97ed],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a00b:	mov    DWORD PTR [r15+r14*1],0x1a10000
  40a013:	mov    QWORD PTR [rip+0x97de],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a01a:	lea    ebp,[r13+r13*1+0x0]
  40a01f:	mov    DWORD PTR [r15+rbx*1],ebp
  40a023:	add    rbx,0x4
  40a027:	mov    QWORD PTR [rip+0x97ca],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a02e:	test   r13d,r13d
  40a031:	je     40a17f <next@@Base+0x1d3f>
  40a037:	mov    edi,r13d
  40a03a:	shl    rdi,0x3
  40a03e:	xor    ebp,ebp
  40a040:	mov    QWORD PTR [rsp+0x10],rdi
  40a045:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a04f:	nop
  40a050:	test   r12,r12
  40a053:	je     40a060 <next@@Base+0x1c20>
  40a055:	mov    r14,QWORD PTR [r12+rbp*1]
  40a059:	jmp    40a063 <next@@Base+0x1c23>
  40a05b:	nop    DWORD PTR [rax+rax*1+0x0]
  40a060:	xor    r14d,r14d
  40a063:	add    r14,QWORD PTR [rsi+rbp*1]
  40a067:	mov    QWORD PTR [rsi+rbp*1],r14
  40a06b:	mov    r13,r14
  40a06e:	shr    r13,0x20
  40a072:	cmp    BYTE PTR [rip+0x975f],0x0        # 4137d8 <__bss_start@@Base+0x1684>
  40a079:	je     40a0f0 <next@@Base+0x1cb0>
  40a07b:	lea    rax,[rbx+0x4]
  40a07f:	mov    rcx,QWORD PTR [rip+0x976a]        # 4137f0 <__bss_start@@Base+0x169c>
  40a086:	cmp    rax,rcx
  40a089:	jbe    40a110 <next@@Base+0x1cd0>
  40a08f:	add    rbx,0x20003
  40a096:	and    rbx,0xfffffffffffe0000
  40a09d:	mov    rdi,r15
  40a0a0:	mov    rsi,rbx
  40a0a3:	call   4031c0 <realloc@plt>
  40a0a8:	mov    rdi,QWORD PTR [rsp+0x10]
  40a0ad:	mov    rsi,QWORD PTR [rsp+0x8]
  40a0b2:	mov    r15,rax
  40a0b5:	mov    QWORD PTR [rip+0x972c],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a0bc:	mov    QWORD PTR [rip+0x972d],rbx        # 4137f0 <__bss_start@@Base+0x169c>
  40a0c3:	movzx  edx,BYTE PTR [rip+0x970e]        # 4137d8 <__bss_start@@Base+0x1684>
  40a0ca:	mov    rcx,rbx
  40a0cd:	mov    rbx,QWORD PTR [rip+0x9724]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a0d4:	mov    DWORD PTR [rax+rbx*1],r14d
  40a0d8:	lea    rax,[rbx+0x4]
  40a0dc:	mov    QWORD PTR [rip+0x9715],rax        # 4137f8 <__bss_start@@Base+0x16a4>
  40a0e3:	cmp    dl,0x1
  40a0e6:	je     40a11b <next@@Base+0x1cdb>
  40a0e8:	jmp    40a160 <next@@Base+0x1d20>
  40a0ea:	nop    WORD PTR [rax+rax*1+0x0]
  40a0f0:	mov    DWORD PTR [r15+rbx*1],r14d
  40a0f4:	add    rbx,0x4
  40a0f8:	mov    QWORD PTR [rip+0x96f9],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a0ff:	mov    rax,rbx
  40a102:	jmp    40a160 <next@@Base+0x1d20>
  40a104:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a10e:	xchg   ax,ax
  40a110:	mov    DWORD PTR [r15+rbx*1],r14d
  40a114:	mov    QWORD PTR [rip+0x96dd],rax        # 4137f8 <__bss_start@@Base+0x16a4>
  40a11b:	lea    rdx,[rbx+0x8]
  40a11f:	cmp    rdx,rcx
  40a122:	jbe    40a160 <next@@Base+0x1d20>
  40a124:	add    rbx,0x20007
  40a12b:	and    rbx,0xfffffffffffe0000
  40a132:	mov    rdi,r15
  40a135:	mov    rsi,rbx
  40a138:	call   4031c0 <realloc@plt>
  40a13d:	mov    rdi,QWORD PTR [rsp+0x10]
  40a142:	mov    rsi,QWORD PTR [rsp+0x8]
  40a147:	mov    r15,rax
  40a14a:	mov    QWORD PTR [rip+0x9697],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a151:	mov    QWORD PTR [rip+0x9698],rbx        # 4137f0 <__bss_start@@Base+0x169c>
  40a158:	mov    rax,QWORD PTR [rip+0x9699]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a15f:	nop
  40a160:	mov    DWORD PTR [r15+rax*1],r13d
  40a164:	add    rax,0x4
  40a168:	mov    QWORD PTR [rip+0x9689],rax        # 4137f8 <__bss_start@@Base+0x16a4>
  40a16f:	add    rbp,0x8
  40a173:	mov    rbx,rax
  40a176:	cmp    rdi,rbp
  40a179:	jne    40a050 <next@@Base+0x1c10>
  40a17f:	mov    rdi,QWORD PTR [rsp]
  40a183:	add    rsp,0x18
  40a187:	pop    rbx
  40a188:	pop    r12
  40a18a:	pop    r13
  40a18c:	pop    r14
  40a18e:	pop    r15
  40a190:	pop    rbp
  40a191:	jmp    403040 <free@plt>
  40a196:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a1a0:	push   rbp
  40a1a1:	push   r15
  40a1a3:	push   r14
  40a1a5:	push   rbx
  40a1a6:	push   rax
  40a1a7:	cmp    QWORD PTR [rip+0x9631],0x0        # 4137e0 <__bss_start@@Base+0x168c>
  40a1af:	je     40a526 <next@@Base+0x20e6>
  40a1b5:	mov    rbx,QWORD PTR [rip+0x963c]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a1bc:	cmp    BYTE PTR [rip+0x9615],0x0        # 4137d8 <__bss_start@@Base+0x1684>
  40a1c3:	je     40a22f <next@@Base+0x1def>
  40a1c5:	lea    r14,[rbx+0x4]
  40a1c9:	cmp    r14,QWORD PTR [rip+0x9620]        # 4137f0 <__bss_start@@Base+0x169c>
  40a1d0:	jbe    40a27b <next@@Base+0x1e3b>
  40a1d6:	add    rbx,0x20003
  40a1dd:	and    rbx,0xfffffffffffe0000
  40a1e4:	mov    rdi,QWORD PTR [rip+0x95fd]        # 4137e8 <__bss_start@@Base+0x1694>
  40a1eb:	mov    rsi,rbx
  40a1ee:	call   4031c0 <realloc@plt>
  40a1f3:	mov    QWORD PTR [rip+0x95ee],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a1fa:	mov    QWORD PTR [rip+0x95ef],rbx        # 4137f0 <__bss_start@@Base+0x169c>
  40a201:	mov    rbx,QWORD PTR [rip+0x95f0]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a208:	mov    cl,BYTE PTR [rip+0x95ca]        # 4137d8 <__bss_start@@Base+0x1684>
  40a20e:	lea    r14,[rbx+0x4]
  40a212:	mov    DWORD PTR [rax+rbx*1],0xa1000000
  40a219:	mov    QWORD PTR [rip+0x95d8],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a220:	mov    ebp,0x1
  40a225:	cmp    cl,0x1
  40a228:	je     40a290 <next@@Base+0x1e50>
  40a22a:	jmp    40a3ab <next@@Base+0x1f6b>
  40a22f:	mov    rax,QWORD PTR [rip+0x95b2]        # 4137e8 <__bss_start@@Base+0x1694>
  40a236:	mov    ecx,DWORD PTR [rax+rbx*1]
  40a239:	lea    r14,[rbx+0x4]
  40a23d:	mov    QWORD PTR [rip+0x95b4],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a244:	cmp    ecx,0xa1000000
  40a24a:	je     40a36c <next@@Base+0x1f2c>
  40a250:	mov    ebp,0x1
  40a255:	cmp    ecx,0xffffffff
  40a258:	je     40a39d <next@@Base+0x1f5d>
  40a25e:	mov    rax,QWORD PTR [rip+0x7d93]        # 411ff8 <stderr@GLIBC_2.2.5>
  40a265:	mov    rdi,QWORD PTR [rax]
  40a268:	mov    rdx,QWORD PTR [rip+0x9561]        # 4137d0 <__bss_start@@Base+0x167c>
  40a26f:	lea    rsi,[rip+0x2db3]        # 40d029 <UnitySizeMask@@Base+0x959>
  40a276:	jmp    40a785 <next@@Base+0x2345>
  40a27b:	mov    rax,QWORD PTR [rip+0x9566]        # 4137e8 <__bss_start@@Base+0x1694>
  40a282:	mov    DWORD PTR [rax+rbx*1],0xa1000000
  40a289:	mov    QWORD PTR [rip+0x9568],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a290:	lea    rcx,[rbx+0x8]
  40a294:	cmp    rcx,QWORD PTR [rip+0x9555]        # 4137f0 <__bss_start@@Base+0x169c>
  40a29b:	jbe    40a2f3 <next@@Base+0x1eb3>
  40a29d:	add    rbx,0x20007
  40a2a4:	and    rbx,0xfffffffffffe0000
  40a2ab:	mov    rdi,rax
  40a2ae:	mov    rsi,rbx
  40a2b1:	call   4031c0 <realloc@plt>
  40a2b6:	mov    QWORD PTR [rip+0x952b],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a2bd:	mov    QWORD PTR [rip+0x952c],rbx        # 4137f0 <__bss_start@@Base+0x169c>
  40a2c4:	mov    r14,QWORD PTR [rip+0x952d]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a2cb:	mov    cl,BYTE PTR [rip+0x9507]        # 4137d8 <__bss_start@@Base+0x1684>
  40a2d1:	mov    DWORD PTR [rax+r14*1],0x9
  40a2d9:	lea    rbx,[r14+0x4]
  40a2dd:	mov    QWORD PTR [rip+0x9514],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a2e4:	mov    ebp,0x1
  40a2e9:	cmp    cl,0x1
  40a2ec:	je     40a306 <next@@Base+0x1ec6>
  40a2ee:	jmp    40a3c1 <next@@Base+0x1f81>
  40a2f3:	mov    DWORD PTR [rax+r14*1],0x9
  40a2fb:	lea    rbx,[r14+0x4]
  40a2ff:	mov    QWORD PTR [rip+0x94f2],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a306:	lea    rcx,[r14+0x8]
  40a30a:	cmp    rcx,QWORD PTR [rip+0x94df]        # 4137f0 <__bss_start@@Base+0x169c>
  40a311:	jbe    40a5ad <next@@Base+0x216d>
  40a317:	add    r14,0x20007
  40a31e:	and    r14,0xfffffffffffe0000
  40a325:	mov    rdi,rax
  40a328:	mov    rsi,r14
  40a32b:	call   4031c0 <realloc@plt>
  40a330:	mov    QWORD PTR [rip+0x94b1],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a337:	mov    QWORD PTR [rip+0x94b2],r14        # 4137f0 <__bss_start@@Base+0x169c>
  40a33e:	mov    rbx,QWORD PTR [rip+0x94b3]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a345:	mov    cl,BYTE PTR [rip+0x948d]        # 4137d8 <__bss_start@@Base+0x1684>
  40a34b:	mov    DWORD PTR [rax+rbx*1],0x0
  40a352:	lea    r14,[rbx+0x4]
  40a356:	mov    QWORD PTR [rip+0x949b],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a35d:	mov    ebp,0x1
  40a362:	cmp    cl,0x1
  40a365:	jne    40a3d6 <next@@Base+0x1f96>
  40a367:	jmp    40a5bf <next@@Base+0x217f>
  40a36c:	mov    ecx,DWORD PTR [rax+rbx*1+0x4]
  40a370:	lea    rdx,[rbx+0x8]
  40a374:	mov    QWORD PTR [rip+0x947d],rdx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a37b:	cmp    ecx,0x9
  40a37e:	jne    40a76d <next@@Base+0x232d>
  40a384:	lea    rcx,[rbx+0x14]
  40a388:	movzx  ebp,BYTE PTR [rip+0x9471]        # 413800 <__bss_start@@Base+0x16ac>
  40a38f:	xor    ebp,0x1
  40a392:	add    ebp,DWORD PTR [rax+rbx*1+0x10]
  40a396:	mov    QWORD PTR [rip+0x945b],rcx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a39d:	mov    DWORD PTR [rax+rbx*1],0xa1000000
  40a3a4:	mov    QWORD PTR [rip+0x944d],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a3ab:	mov    DWORD PTR [rax+r14*1],0x9
  40a3b3:	add    r14,0x4
  40a3b7:	mov    QWORD PTR [rip+0x943a],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a3be:	mov    rbx,r14
  40a3c1:	mov    DWORD PTR [rax+rbx*1],0x0
  40a3c8:	add    rbx,0x4
  40a3cc:	mov    QWORD PTR [rip+0x9425],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a3d3:	mov    r14,rbx
  40a3d6:	mov    DWORD PTR [rax+r14*1],0x0
  40a3de:	add    r14,0x4
  40a3e2:	mov    QWORD PTR [rip+0x940f],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a3e9:	mov    rbx,r14
  40a3ec:	mov    DWORD PTR [rax+rbx*1],ebp
  40a3ef:	lea    r14,[rbx+0x4]
  40a3f3:	mov    QWORD PTR [rip+0x93fe],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a3fa:	cmp    BYTE PTR [rip+0x93d7],0x0        # 4137d8 <__bss_start@@Base+0x1684>
  40a401:	je     40a467 <next@@Base+0x2027>
  40a403:	lea    r15,[rbx+0x8]
  40a407:	cmp    r15,QWORD PTR [rip+0x93e2]        # 4137f0 <__bss_start@@Base+0x169c>
  40a40e:	jbe    40a531 <next@@Base+0x20f1>
  40a414:	add    rbx,0x20007
  40a41b:	and    rbx,0xfffffffffffe0000
  40a422:	mov    rdi,QWORD PTR [rip+0x93bf]        # 4137e8 <__bss_start@@Base+0x1694>
  40a429:	mov    rsi,rbx
  40a42c:	call   4031c0 <realloc@plt>
  40a431:	mov    QWORD PTR [rip+0x93b0],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a438:	mov    QWORD PTR [rip+0x93b1],rbx        # 4137f0 <__bss_start@@Base+0x169c>
  40a43f:	mov    r14,QWORD PTR [rip+0x93b2]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a446:	lea    r15,[r14+0x4]
  40a44a:	cmp    BYTE PTR [rip+0x9387],0x0        # 4137d8 <__bss_start@@Base+0x1684>
  40a451:	mov    DWORD PTR [rax+r14*1],0x0
  40a459:	mov    QWORD PTR [rip+0x9398],r15        # 4137f8 <__bss_start@@Base+0x16a4>
  40a460:	je     40a484 <next@@Base+0x2044>
  40a462:	jmp    40a547 <next@@Base+0x2107>
  40a467:	mov    rax,QWORD PTR [rip+0x937a]        # 4137e8 <__bss_start@@Base+0x1694>
  40a46e:	mov    DWORD PTR [rax+rbx*1+0x4],0x0
  40a476:	add    rbx,0x8
  40a47a:	mov    QWORD PTR [rip+0x9377],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a481:	mov    r15,rbx
  40a484:	mov    DWORD PTR [rax+r15*1],0x0
  40a48c:	add    r15,0x4
  40a490:	mov    QWORD PTR [rip+0x9361],r15        # 4137f8 <__bss_start@@Base+0x16a4>
  40a497:	mov    r14,r15
  40a49a:	mov    DWORD PTR [rax+r14*1],0x0
  40a4a2:	add    r14,0x4
  40a4a6:	mov    QWORD PTR [rip+0x934b],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a4ad:	mov    rbx,r14
  40a4b0:	mov    DWORD PTR [rax+rbx*1],0x0
  40a4b7:	add    rbx,0x4
  40a4bb:	mov    QWORD PTR [rip+0x9336],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a4c2:	mov    r14,rbx
  40a4c5:	mov    DWORD PTR [rax+r14*1],0x0
  40a4cd:	add    r14,0x4
  40a4d1:	mov    QWORD PTR [rip+0x9320],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a4d8:	mov    rbx,r14
  40a4db:	mov    DWORD PTR [rax+rbx*1],0x0
  40a4e2:	add    rbx,0x4
  40a4e6:	mov    QWORD PTR [rip+0x930b],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a4ed:	mov    r14,rbx
  40a4f0:	mov    DWORD PTR [rax+r14*1],0xa3000000
  40a4f8:	add    r14,0x4
  40a4fc:	mov    QWORD PTR [rip+0x92f5],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a503:	mov    rcx,r14
  40a506:	mov    rax,QWORD PTR [rip+0x92db]        # 4137e8 <__bss_start@@Base+0x1694>
  40a50d:	mov    DWORD PTR [rax+rcx*1],0x0
  40a514:	add    rcx,0x4
  40a518:	mov    QWORD PTR [rip+0x92d9],rcx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a51f:	mov    BYTE PTR [rip+0x92da],0x1        # 413800 <__bss_start@@Base+0x16ac>
  40a526:	add    rsp,0x8
  40a52a:	pop    rbx
  40a52b:	pop    r14
  40a52d:	pop    r15
  40a52f:	pop    rbp
  40a530:	ret    
  40a531:	mov    rax,QWORD PTR [rip+0x92b0]        # 4137e8 <__bss_start@@Base+0x1694>
  40a538:	mov    DWORD PTR [rax+rbx*1+0x4],0x0
  40a540:	mov    QWORD PTR [rip+0x92b1],r15        # 4137f8 <__bss_start@@Base+0x16a4>
  40a547:	lea    rcx,[r14+0x8]
  40a54b:	cmp    rcx,QWORD PTR [rip+0x929e]        # 4137f0 <__bss_start@@Base+0x169c>
  40a552:	jbe    40a62a <next@@Base+0x21ea>
  40a558:	add    r14,0x20007
  40a55f:	and    r14,0xfffffffffffe0000
  40a566:	mov    rdi,rax
  40a569:	mov    rsi,r14
  40a56c:	call   4031c0 <realloc@plt>
  40a571:	mov    QWORD PTR [rip+0x9270],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a578:	mov    QWORD PTR [rip+0x9271],r14        # 4137f0 <__bss_start@@Base+0x169c>
  40a57f:	mov    r15,QWORD PTR [rip+0x9272]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a586:	mov    cl,BYTE PTR [rip+0x924c]        # 4137d8 <__bss_start@@Base+0x1684>
  40a58c:	mov    DWORD PTR [rax+r15*1],0x0
  40a594:	lea    r14,[r15+0x4]
  40a598:	mov    QWORD PTR [rip+0x9259],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a59f:	cmp    cl,0x1
  40a5a2:	jne    40a49a <next@@Base+0x205a>
  40a5a8:	jmp    40a63d <next@@Base+0x21fd>
  40a5ad:	mov    DWORD PTR [rax+rbx*1],0x0
  40a5b4:	lea    r14,[rbx+0x4]
  40a5b8:	mov    QWORD PTR [rip+0x9239],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a5bf:	lea    rcx,[rbx+0x8]
  40a5c3:	cmp    rcx,QWORD PTR [rip+0x9226]        # 4137f0 <__bss_start@@Base+0x169c>
  40a5ca:	jbe    40a6a0 <next@@Base+0x2260>
  40a5d0:	add    rbx,0x20007
  40a5d7:	and    rbx,0xfffffffffffe0000
  40a5de:	mov    rdi,rax
  40a5e1:	mov    rsi,rbx
  40a5e4:	call   4031c0 <realloc@plt>
  40a5e9:	mov    QWORD PTR [rip+0x91f8],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a5f0:	mov    QWORD PTR [rip+0x91f9],rbx        # 4137f0 <__bss_start@@Base+0x169c>
  40a5f7:	mov    r14,QWORD PTR [rip+0x91fa]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a5fe:	mov    cl,BYTE PTR [rip+0x91d4]        # 4137d8 <__bss_start@@Base+0x1684>
  40a604:	mov    DWORD PTR [rax+r14*1],0x0
  40a60c:	lea    rbx,[r14+0x4]
  40a610:	mov    QWORD PTR [rip+0x91e1],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a617:	mov    ebp,0x1
  40a61c:	cmp    cl,0x1
  40a61f:	jne    40a3ec <next@@Base+0x1fac>
  40a625:	jmp    40a6b3 <next@@Base+0x2273>
  40a62a:	mov    DWORD PTR [rax+r15*1],0x0
  40a632:	lea    r14,[r15+0x4]
  40a636:	mov    QWORD PTR [rip+0x91bb],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a63d:	lea    rcx,[r15+0x8]
  40a641:	cmp    rcx,QWORD PTR [rip+0x91a8]        # 4137f0 <__bss_start@@Base+0x169c>
  40a648:	jbe    40a6fc <next@@Base+0x22bc>
  40a64e:	add    r15,0x20007
  40a655:	and    r15,0xfffffffffffe0000
  40a65c:	mov    rdi,rax
  40a65f:	mov    rsi,r15
  40a662:	call   4031c0 <realloc@plt>
  40a667:	mov    QWORD PTR [rip+0x917a],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a66e:	mov    QWORD PTR [rip+0x917b],r15        # 4137f0 <__bss_start@@Base+0x169c>
  40a675:	mov    r14,QWORD PTR [rip+0x917c]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a67c:	mov    cl,BYTE PTR [rip+0x9156]        # 4137d8 <__bss_start@@Base+0x1684>
  40a682:	mov    DWORD PTR [rax+r14*1],0x0
  40a68a:	lea    rbx,[r14+0x4]
  40a68e:	mov    QWORD PTR [rip+0x9163],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a695:	cmp    cl,0x1
  40a698:	jne    40a4b0 <next@@Base+0x2070>
  40a69e:	jmp    40a70f <next@@Base+0x22cf>
  40a6a0:	mov    DWORD PTR [rax+r14*1],0x0
  40a6a8:	lea    rbx,[r14+0x4]
  40a6ac:	mov    QWORD PTR [rip+0x9145],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a6b3:	lea    rcx,[r14+0x8]
  40a6b7:	mov    ebp,0x1
  40a6bc:	cmp    rcx,QWORD PTR [rip+0x912d]        # 4137f0 <__bss_start@@Base+0x169c>
  40a6c3:	jbe    40a3ec <next@@Base+0x1fac>
  40a6c9:	add    r14,0x20007
  40a6d0:	and    r14,0xfffffffffffe0000
  40a6d7:	mov    rdi,rax
  40a6da:	mov    rsi,r14
  40a6dd:	call   4031c0 <realloc@plt>
  40a6e2:	mov    QWORD PTR [rip+0x90ff],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a6e9:	mov    QWORD PTR [rip+0x9100],r14        # 4137f0 <__bss_start@@Base+0x169c>
  40a6f0:	mov    rbx,QWORD PTR [rip+0x9101]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a6f7:	jmp    40a3ec <next@@Base+0x1fac>
  40a6fc:	mov    DWORD PTR [rax+r14*1],0x0
  40a704:	lea    rbx,[r14+0x4]
  40a708:	mov    QWORD PTR [rip+0x90e9],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a70f:	lea    rcx,[r14+0x8]
  40a713:	cmp    rcx,QWORD PTR [rip+0x90d6]        # 4137f0 <__bss_start@@Base+0x169c>
  40a71a:	jbe    40a796 <next@@Base+0x2356>
  40a71c:	add    r14,0x20007
  40a723:	and    r14,0xfffffffffffe0000
  40a72a:	mov    rdi,rax
  40a72d:	mov    rsi,r14
  40a730:	call   4031c0 <realloc@plt>
  40a735:	mov    QWORD PTR [rip+0x90ac],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a73c:	mov    QWORD PTR [rip+0x90ad],r14        # 4137f0 <__bss_start@@Base+0x169c>
  40a743:	mov    rbx,QWORD PTR [rip+0x90ae]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a74a:	mov    cl,BYTE PTR [rip+0x9088]        # 4137d8 <__bss_start@@Base+0x1684>
  40a750:	mov    DWORD PTR [rax+rbx*1],0x0
  40a757:	lea    r14,[rbx+0x4]
  40a75b:	mov    QWORD PTR [rip+0x9096],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a762:	cmp    cl,0x1
  40a765:	jne    40a4c5 <next@@Base+0x2085>
  40a76b:	jmp    40a7a8 <next@@Base+0x2368>
  40a76d:	mov    rax,QWORD PTR [rip+0x7884]        # 411ff8 <stderr@GLIBC_2.2.5>
  40a774:	mov    rdi,QWORD PTR [rax]
  40a777:	mov    rdx,QWORD PTR [rip+0x9052]        # 4137d0 <__bss_start@@Base+0x167c>
  40a77e:	lea    rsi,[rip+0x28f1]        # 40d076 <UnitySizeMask@@Base+0x9a6>
  40a785:	xor    eax,eax
  40a787:	add    rsp,0x8
  40a78b:	pop    rbx
  40a78c:	pop    r14
  40a78e:	pop    r15
  40a790:	pop    rbp
  40a791:	jmp    403140 <fprintf@plt>
  40a796:	mov    DWORD PTR [rax+rbx*1],0x0
  40a79d:	lea    r14,[rbx+0x4]
  40a7a1:	mov    QWORD PTR [rip+0x9050],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a7a8:	lea    rcx,[rbx+0x8]
  40a7ac:	cmp    rcx,QWORD PTR [rip+0x903d]        # 4137f0 <__bss_start@@Base+0x169c>
  40a7b3:	jbe    40a807 <next@@Base+0x23c7>
  40a7b5:	add    rbx,0x20007
  40a7bc:	and    rbx,0xfffffffffffe0000
  40a7c3:	mov    rdi,rax
  40a7c6:	mov    rsi,rbx
  40a7c9:	call   4031c0 <realloc@plt>
  40a7ce:	mov    QWORD PTR [rip+0x9013],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a7d5:	mov    QWORD PTR [rip+0x9014],rbx        # 4137f0 <__bss_start@@Base+0x169c>
  40a7dc:	mov    r14,QWORD PTR [rip+0x9015]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a7e3:	mov    cl,BYTE PTR [rip+0x8fef]        # 4137d8 <__bss_start@@Base+0x1684>
  40a7e9:	mov    DWORD PTR [rax+r14*1],0x0
  40a7f1:	lea    rbx,[r14+0x4]
  40a7f5:	mov    QWORD PTR [rip+0x8ffc],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a7fc:	cmp    cl,0x1
  40a7ff:	jne    40a4db <next@@Base+0x209b>
  40a805:	jmp    40a81a <next@@Base+0x23da>
  40a807:	mov    DWORD PTR [rax+r14*1],0x0
  40a80f:	lea    rbx,[r14+0x4]
  40a813:	mov    QWORD PTR [rip+0x8fde],rbx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a81a:	lea    rcx,[r14+0x8]
  40a81e:	cmp    rcx,QWORD PTR [rip+0x8fcb]        # 4137f0 <__bss_start@@Base+0x169c>
  40a825:	jbe    40a876 <next@@Base+0x2436>
  40a827:	add    r14,0x20007
  40a82e:	and    r14,0xfffffffffffe0000
  40a835:	mov    rdi,rax
  40a838:	mov    rsi,r14
  40a83b:	call   4031c0 <realloc@plt>
  40a840:	mov    QWORD PTR [rip+0x8fa1],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a847:	mov    QWORD PTR [rip+0x8fa2],r14        # 4137f0 <__bss_start@@Base+0x169c>
  40a84e:	mov    rbx,QWORD PTR [rip+0x8fa3]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a855:	lea    r14,[rbx+0x4]
  40a859:	cmp    BYTE PTR [rip+0x8f78],0x0        # 4137d8 <__bss_start@@Base+0x1684>
  40a860:	mov    DWORD PTR [rax+rbx*1],0x0
  40a867:	mov    QWORD PTR [rip+0x8f8a],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a86e:	je     40a4f0 <next@@Base+0x20b0>
  40a874:	jmp    40a888 <next@@Base+0x2448>
  40a876:	mov    DWORD PTR [rax+rbx*1],0x0
  40a87d:	lea    r14,[rbx+0x4]
  40a881:	mov    QWORD PTR [rip+0x8f70],r14        # 4137f8 <__bss_start@@Base+0x16a4>
  40a888:	lea    rcx,[rbx+0x8]
  40a88c:	cmp    rcx,QWORD PTR [rip+0x8f5d]        # 4137f0 <__bss_start@@Base+0x169c>
  40a893:	jbe    40a8e7 <next@@Base+0x24a7>
  40a895:	add    rbx,0x20007
  40a89c:	and    rbx,0xfffffffffffe0000
  40a8a3:	mov    rdi,rax
  40a8a6:	mov    rsi,rbx
  40a8a9:	call   4031c0 <realloc@plt>
  40a8ae:	mov    QWORD PTR [rip+0x8f33],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a8b5:	mov    QWORD PTR [rip+0x8f34],rbx        # 4137f0 <__bss_start@@Base+0x169c>
  40a8bc:	mov    dl,BYTE PTR [rip+0x8f16]        # 4137d8 <__bss_start@@Base+0x1684>
  40a8c2:	mov    r14,QWORD PTR [rip+0x8f2f]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a8c9:	mov    DWORD PTR [rax+r14*1],0xa3000000
  40a8d1:	lea    rcx,[r14+0x4]
  40a8d5:	mov    QWORD PTR [rip+0x8f1c],rcx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a8dc:	cmp    dl,0x1
  40a8df:	jne    40a506 <next@@Base+0x20c6>
  40a8e5:	jmp    40a8fa <next@@Base+0x24ba>
  40a8e7:	mov    DWORD PTR [rax+r14*1],0xa3000000
  40a8ef:	lea    rcx,[r14+0x4]
  40a8f3:	mov    QWORD PTR [rip+0x8efe],rcx        # 4137f8 <__bss_start@@Base+0x16a4>
  40a8fa:	lea    rdx,[r14+0x8]
  40a8fe:	cmp    rdx,QWORD PTR [rip+0x8eeb]        # 4137f0 <__bss_start@@Base+0x169c>
  40a905:	jbe    40a506 <next@@Base+0x20c6>
  40a90b:	add    r14,0x20007
  40a912:	and    r14,0xfffffffffffe0000
  40a919:	mov    rdi,rax
  40a91c:	mov    rsi,r14
  40a91f:	call   4031c0 <realloc@plt>
  40a924:	mov    QWORD PTR [rip+0x8ebd],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a92b:	mov    QWORD PTR [rip+0x8ebe],r14        # 4137f0 <__bss_start@@Base+0x169c>
  40a932:	mov    rcx,QWORD PTR [rip+0x8ebf]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a939:	jmp    40a506 <next@@Base+0x20c6>
  40a93e:	xchg   ax,ax
  40a940:	cmp    QWORD PTR [rip+0x8e98],0x0        # 4137e0 <__bss_start@@Base+0x168c>
  40a948:	je     40aaae <next@@Base+0x266e>
  40a94e:	push   r14
  40a950:	push   rbx
  40a951:	push   rax
  40a952:	cmp    BYTE PTR [rip+0x8e7f],0x0        # 4137d8 <__bss_start@@Base+0x1684>
  40a959:	je     40a9ca <next@@Base+0x258a>
  40a95b:	mov    rbx,QWORD PTR [rip+0x8e96]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a962:	lea    rax,[rbx+0x8]
  40a966:	cmp    rax,QWORD PTR [rip+0x8e83]        # 4137f0 <__bss_start@@Base+0x169c>
  40a96d:	jbe    40aa30 <next@@Base+0x25f0>
  40a973:	add    rbx,0x20007
  40a97a:	and    rbx,0xfffffffffffe0000
  40a981:	mov    rdi,QWORD PTR [rip+0x8e60]        # 4137e8 <__bss_start@@Base+0x1694>
  40a988:	mov    rsi,rbx
  40a98b:	call   4031c0 <realloc@plt>
  40a990:	mov    rdi,rax
  40a993:	mov    QWORD PTR [rip+0x8e4e],rax        # 4137e8 <__bss_start@@Base+0x1694>
  40a99a:	mov    QWORD PTR [rip+0x8e4f],rbx        # 4137f0 <__bss_start@@Base+0x169c>
  40a9a1:	mov    al,BYTE PTR [rip+0x8e31]        # 4137d8 <__bss_start@@Base+0x1684>
  40a9a7:	mov    rsi,QWORD PTR [rip+0x8e4a]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a9ae:	mov    QWORD PTR [rdi+rsi*1],0x0
  40a9b6:	add    rsi,0x8
  40a9ba:	mov    QWORD PTR [rip+0x8e37],rsi        # 4137f8 <__bss_start@@Base+0x16a4>
  40a9c1:	cmp    al,0x1
  40a9c3:	jne    40a9eb <next@@Base+0x25ab>
  40a9c5:	jmp    40aa51 <next@@Base+0x2611>
  40a9ca:	mov    rdi,QWORD PTR [rip+0x8e17]        # 4137e8 <__bss_start@@Base+0x1694>
  40a9d1:	mov    rax,QWORD PTR [rip+0x8e20]        # 4137f8 <__bss_start@@Base+0x16a4>
  40a9d8:	mov    QWORD PTR [rdi+rax*1],0x0
  40a9e0:	add    rax,0x8
  40a9e4:	mov    QWORD PTR [rip+0x8e0d],rax        # 4137f8 <__bss_start@@Base+0x16a4>
  40a9eb:	mov    rsi,QWORD PTR [rip+0x8e26]        # 413818 <__bss_start@@Base+0x16c4>
  40a9f2:	mov    edx,0x4
  40a9f7:	call   4030b0 <msync@plt>
  40a9fc:	cmp    eax,0xffffffff
  40a9ff:	je     40aaba <next@@Base+0x267a>
  40aa05:	mov    rdi,QWORD PTR [rip+0x8ddc]        # 4137e8 <__bss_start@@Base+0x1694>
  40aa0c:	mov    rsi,QWORD PTR [rip+0x8e05]        # 413818 <__bss_start@@Base+0x16c4>
  40aa13:	call   4031e0 <munmap@plt>
  40aa18:	mov    QWORD PTR [rip+0x8dc5],0x0        # 4137e8 <__bss_start@@Base+0x1694>
  40aa23:	mov    QWORD PTR [rip+0x8dea],0x0        # 413818 <__bss_start@@Base+0x16c4>
  40aa2e:	jmp    40aa6e <next@@Base+0x262e>
  40aa30:	mov    rdi,QWORD PTR [rip+0x8db1]        # 4137e8 <__bss_start@@Base+0x1694>
  40aa37:	mov    rsi,QWORD PTR [rip+0x8dba]        # 4137f8 <__bss_start@@Base+0x16a4>
  40aa3e:	mov    QWORD PTR [rdi+rsi*1],0x0
  40aa46:	add    rsi,0x8
  40aa4a:	mov    QWORD PTR [rip+0x8da7],rsi        # 4137f8 <__bss_start@@Base+0x16a4>
  40aa51:	mov    rcx,QWORD PTR [rip+0x8d88]        # 4137e0 <__bss_start@@Base+0x168c>
  40aa58:	mov    edx,0x1
  40aa5d:	call   403230 <fwrite@plt>
  40aa62:	mov    rdi,QWORD PTR [rip+0x8d7f]        # 4137e8 <__bss_start@@Base+0x1694>
  40aa69:	call   403040 <free@plt>
  40aa6e:	mov    rdi,QWORD PTR [rip+0x8d6b]        # 4137e0 <__bss_start@@Base+0x168c>
  40aa75:	call   4031a0 <fflush@plt>
  40aa7a:	mov    edi,DWORD PTR [rip+0x76cc]        # 41214c <__data_start@@Base+0x1c>
  40aa80:	call   40af20 <__gcov_flush@@Base+0x2c0>
  40aa85:	mov    rdi,QWORD PTR [rip+0x8d54]        # 4137e0 <__bss_start@@Base+0x168c>
  40aa8c:	call   4030a0 <fclose@plt>
  40aa91:	mov    QWORD PTR [rip+0x8d44],0x0        # 4137e0 <__bss_start@@Base+0x168c>
  40aa9c:	mov    QWORD PTR [rip+0x8d41],0x0        # 4137e8 <__bss_start@@Base+0x1694>
  40aaa7:	add    rsp,0x8
  40aaab:	pop    rbx
  40aaac:	pop    r14
  40aaae:	mov    rdi,QWORD PTR [rip+0x8d1b]        # 4137d0 <__bss_start@@Base+0x167c>
  40aab5:	jmp    403040 <free@plt>
  40aaba:	call   403050 <__errno_location@plt>
  40aabf:	mov    edi,DWORD PTR [rax]
  40aac1:	mov    rax,QWORD PTR [rip+0x7530]        # 411ff8 <stderr@GLIBC_2.2.5>
  40aac8:	mov    r14,QWORD PTR [rax]
  40aacb:	mov    rbx,QWORD PTR [rip+0x8cfe]        # 4137d0 <__bss_start@@Base+0x167c>
  40aad2:	call   403250 <strerror@plt>
  40aad7:	mov    rcx,rax
  40aada:	lea    rsi,[rip+0x2603]        # 40d0e4 <UnitySizeMask@@Base+0xa14>
  40aae1:	xor    eax,eax
  40aae3:	mov    rdi,r14
  40aae6:	mov    rdx,rbx
  40aae9:	call   403140 <fprintf@plt>
  40aaee:	jmp    40aa05 <next@@Base+0x25c5>
  40aaf3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40aafd:	nop    DWORD PTR [rax]
  40ab00:	push   rbx
  40ab01:	mov    rbx,rdi
  40ab04:	mov    edi,0x18
  40ab09:	call   403190 <malloc@plt>
  40ab0e:	mov    QWORD PTR [rax+0x8],rbx
  40ab12:	mov    QWORD PTR [rax+0x10],0x0
  40ab1a:	lea    rcx,[rip+0x8ce7]        # 413808 <__bss_start@@Base+0x16b4>
  40ab21:	mov    QWORD PTR [rax],rcx
  40ab24:	lea    rcx,[rip+0x8e1d]        # 413948 <writeout_fn_list@@Base>
  40ab2b:	lea    rdx,[rcx+0x8]
  40ab2f:	mov    rsi,QWORD PTR [rcx+0x8]
  40ab33:	add    rsi,0x10
  40ab37:	xor    edi,edi
  40ab39:	cmp    QWORD PTR [rcx],0x0
  40ab3d:	setne  dil
  40ab41:	cmove  rsi,rdx
  40ab45:	mov    QWORD PTR [rsi],rax
  40ab48:	mov    QWORD PTR [rcx+rdi*8],rax
  40ab4c:	pop    rbx
  40ab4d:	ret    
  40ab4e:	xchg   ax,ax
  40ab50:	push   r14
  40ab52:	push   rbx
  40ab53:	push   rax
  40ab54:	lea    rax,[rip+0x8ded]        # 413948 <writeout_fn_list@@Base>
  40ab5b:	mov    rbx,QWORD PTR [rax]
  40ab5e:	test   rbx,rbx
  40ab61:	je     40ab83 <next@@Base+0x2743>
  40ab63:	lea    r14,[rip+0x8c9e]        # 413808 <__bss_start@@Base+0x16b4>
  40ab6a:	nop    WORD PTR [rax+rax*1+0x0]
  40ab70:	cmp    QWORD PTR [rbx],r14
  40ab73:	jne    40ab7a <next@@Base+0x273a>
  40ab75:	xor    eax,eax
  40ab77:	call   QWORD PTR [rbx+0x8]
  40ab7a:	mov    rbx,QWORD PTR [rbx+0x10]
  40ab7e:	test   rbx,rbx
  40ab81:	jne    40ab70 <next@@Base+0x2730>
  40ab83:	add    rsp,0x8
  40ab87:	pop    rbx
  40ab88:	pop    r14
  40ab8a:	ret    
  40ab8b:	nop    DWORD PTR [rax+rax*1+0x0]
  40ab90:	push   r15
  40ab92:	push   r14
  40ab94:	push   r12
  40ab96:	push   rbx
  40ab97:	push   rax
  40ab98:	lea    r14,[rip+0x8da9]        # 413948 <writeout_fn_list@@Base>
  40ab9f:	mov    rdi,QWORD PTR [r14]
  40aba2:	test   rdi,rdi
  40aba5:	je     40ac02 <next@@Base+0x27c2>
  40aba7:	xor    r12d,r12d
  40abaa:	lea    r15,[rip+0x8c57]        # 413808 <__bss_start@@Base+0x16b4>
  40abb1:	jmp    40abd0 <next@@Base+0x2790>
  40abb3:	mov    QWORD PTR [r14],rbx
  40abb6:	cmp    rdi,QWORD PTR [r14+0x8]
  40abba:	jne    40abeb <next@@Base+0x27ab>
  40abbc:	mov    QWORD PTR [r14+0x8],r12
  40abc0:	test   r12,r12
  40abc3:	jne    40abf0 <next@@Base+0x27b0>
  40abc5:	jmp    40abf5 <next@@Base+0x27b5>
  40abc7:	nop    WORD PTR [rax+rax*1+0x0]
  40abd0:	mov    rbx,QWORD PTR [rdi+0x10]
  40abd4:	cmp    QWORD PTR [rdi],r15
  40abd7:	je     40abe0 <next@@Base+0x27a0>
  40abd9:	mov    r12,rdi
  40abdc:	jmp    40abfa <next@@Base+0x27ba>
  40abde:	xchg   ax,ax
  40abe0:	cmp    rdi,QWORD PTR [r14]
  40abe3:	je     40abb3 <next@@Base+0x2773>
  40abe5:	cmp    rdi,QWORD PTR [r14+0x8]
  40abe9:	je     40abbc <next@@Base+0x277c>
  40abeb:	test   r12,r12
  40abee:	je     40abf5 <next@@Base+0x27b5>
  40abf0:	mov    QWORD PTR [r12+0x10],rbx
  40abf5:	call   403040 <free@plt>
  40abfa:	mov    rdi,rbx
  40abfd:	test   rbx,rbx
  40ac00:	jne    40abd0 <next@@Base+0x2790>
  40ac02:	add    rsp,0x8
  40ac06:	pop    rbx
  40ac07:	pop    r12
  40ac09:	pop    r14
  40ac0b:	pop    r15
  40ac0d:	ret    
  40ac0e:	xchg   ax,ax
  40ac10:	push   rbx
  40ac11:	mov    rbx,rdi
  40ac14:	mov    edi,0x18
  40ac19:	call   403190 <malloc@plt>
  40ac1e:	mov    QWORD PTR [rax+0x8],rbx
  40ac22:	mov    QWORD PTR [rax+0x10],0x0
  40ac2a:	lea    rcx,[rip+0x8bd7]        # 413808 <__bss_start@@Base+0x16b4>
  40ac31:	mov    QWORD PTR [rax],rcx
  40ac34:	lea    rcx,[rip+0x8cfd]        # 413938 <flush_fn_list@@Base>
  40ac3b:	lea    rdx,[rcx+0x8]
  40ac3f:	mov    rsi,QWORD PTR [rcx+0x8]
  40ac43:	add    rsi,0x10
  40ac47:	xor    edi,edi
  40ac49:	cmp    QWORD PTR [rcx],0x0
  40ac4d:	setne  dil
  40ac51:	cmove  rsi,rdx
  40ac55:	mov    QWORD PTR [rsi],rax
  40ac58:	mov    QWORD PTR [rcx+rdi*8],rax
  40ac5c:	pop    rbx
  40ac5d:	ret    
  40ac5e:	xchg   ax,ax

000000000040ac60 <__gcov_flush@@Base>:
  40ac60:	push   rbx
  40ac61:	lea    rax,[rip+0x8cd0]        # 413938 <flush_fn_list@@Base>
  40ac68:	mov    rbx,QWORD PTR [rax]
  40ac6b:	test   rbx,rbx
  40ac6e:	je     40ac7e <__gcov_flush@@Base+0x1e>
  40ac70:	xor    eax,eax
  40ac72:	call   QWORD PTR [rbx+0x8]
  40ac75:	mov    rbx,QWORD PTR [rbx+0x10]
  40ac79:	test   rbx,rbx
  40ac7c:	jne    40ac70 <__gcov_flush@@Base+0x10>
  40ac7e:	pop    rbx
  40ac7f:	ret    
  40ac80:	push   r15
  40ac82:	push   r14
  40ac84:	push   r12
  40ac86:	push   rbx
  40ac87:	push   rax
  40ac88:	lea    r14,[rip+0x8ca9]        # 413938 <flush_fn_list@@Base>
  40ac8f:	mov    rdi,QWORD PTR [r14]
  40ac92:	test   rdi,rdi
  40ac95:	je     40acf2 <__gcov_flush@@Base+0x92>
  40ac97:	xor    r12d,r12d
  40ac9a:	lea    r15,[rip+0x8b67]        # 413808 <__bss_start@@Base+0x16b4>
  40aca1:	jmp    40acc0 <__gcov_flush@@Base+0x60>
  40aca3:	mov    QWORD PTR [r14],rbx
  40aca6:	cmp    rdi,QWORD PTR [r14+0x8]
  40acaa:	jne    40acdb <__gcov_flush@@Base+0x7b>
  40acac:	mov    QWORD PTR [r14+0x8],r12
  40acb0:	test   r12,r12
  40acb3:	jne    40ace0 <__gcov_flush@@Base+0x80>
  40acb5:	jmp    40ace5 <__gcov_flush@@Base+0x85>
  40acb7:	nop    WORD PTR [rax+rax*1+0x0]
  40acc0:	mov    rbx,QWORD PTR [rdi+0x10]
  40acc4:	cmp    QWORD PTR [rdi],r15
  40acc7:	je     40acd0 <__gcov_flush@@Base+0x70>
  40acc9:	mov    r12,rdi
  40accc:	jmp    40acea <__gcov_flush@@Base+0x8a>
  40acce:	xchg   ax,ax
  40acd0:	cmp    rdi,QWORD PTR [r14]
  40acd3:	je     40aca3 <__gcov_flush@@Base+0x43>
  40acd5:	cmp    rdi,QWORD PTR [r14+0x8]
  40acd9:	je     40acac <__gcov_flush@@Base+0x4c>
  40acdb:	test   r12,r12
  40acde:	je     40ace5 <__gcov_flush@@Base+0x85>
  40ace0:	mov    QWORD PTR [r12+0x10],rbx
  40ace5:	call   403040 <free@plt>
  40acea:	mov    rdi,rbx
  40aced:	test   rbx,rbx
  40acf0:	jne    40acc0 <__gcov_flush@@Base+0x60>
  40acf2:	add    rsp,0x8
  40acf6:	pop    rbx
  40acf7:	pop    r12
  40acf9:	pop    r14
  40acfb:	pop    r15
  40acfd:	ret    
  40acfe:	xchg   ax,ax
  40ad00:	push   r14
  40ad02:	push   rbx
  40ad03:	push   rax
  40ad04:	mov    r14,rsi
  40ad07:	test   rdi,rdi
  40ad0a:	je     40ad57 <__gcov_flush@@Base+0xf7>
  40ad0c:	mov    rbx,rdi
  40ad0f:	mov    edi,0x18
  40ad14:	call   403190 <malloc@plt>
  40ad19:	mov    QWORD PTR [rax+0x8],rbx
  40ad1d:	mov    QWORD PTR [rax+0x10],0x0
  40ad25:	lea    rcx,[rip+0x8adc]        # 413808 <__bss_start@@Base+0x16b4>
  40ad2c:	mov    QWORD PTR [rax],rcx
  40ad2f:	lea    rcx,[rip+0x8c12]        # 413948 <writeout_fn_list@@Base>
  40ad36:	lea    rdx,[rcx+0x8]
  40ad3a:	mov    rsi,QWORD PTR [rcx+0x8]
  40ad3e:	add    rsi,0x10
  40ad42:	xor    edi,edi
  40ad44:	cmp    QWORD PTR [rcx],0x0
  40ad48:	setne  dil
  40ad4c:	cmove  rsi,rdx
  40ad50:	mov    QWORD PTR [rsi],rax
  40ad53:	mov    QWORD PTR [rcx+rdi*8],rax
  40ad57:	test   r14,r14
  40ad5a:	je     40ada4 <__gcov_flush@@Base+0x144>
  40ad5c:	mov    edi,0x18
  40ad61:	call   403190 <malloc@plt>
  40ad66:	mov    QWORD PTR [rax+0x8],r14
  40ad6a:	mov    QWORD PTR [rax+0x10],0x0
  40ad72:	lea    rcx,[rip+0x8a8f]        # 413808 <__bss_start@@Base+0x16b4>
  40ad79:	mov    QWORD PTR [rax],rcx
  40ad7c:	lea    rcx,[rip+0x8bb5]        # 413938 <flush_fn_list@@Base>
  40ad83:	lea    rdx,[rcx+0x8]
  40ad87:	mov    rsi,QWORD PTR [rcx+0x8]
  40ad8b:	add    rsi,0x10
  40ad8f:	xor    edi,edi
  40ad91:	cmp    QWORD PTR [rcx],0x0
  40ad95:	setne  dil
  40ad99:	cmove  rsi,rdx
  40ad9d:	mov    QWORD PTR [rsi],rax
  40ada0:	mov    QWORD PTR [rcx+rdi*8],rax
  40ada4:	cmp    BYTE PTR [rip+0x8a65],0x0        # 413810 <__bss_start@@Base+0x16bc>
  40adab:	je     40adb5 <__gcov_flush@@Base+0x155>
  40adad:	add    rsp,0x8
  40adb1:	pop    rbx
  40adb2:	pop    r14
  40adb4:	ret    
  40adb5:	mov    BYTE PTR [rip+0x8a54],0x1        # 413810 <__bss_start@@Base+0x16bc>
  40adbc:	lea    rdi,[rip+0xfffffffffffffebd]        # 40ac80 <__gcov_flush@@Base+0x20>
  40adc3:	call   40b270 <__libc_csu_fini@@Base+0x10>
  40adc8:	lea    rdi,[rip+0xfffffffffffffdc1]        # 40ab90 <next@@Base+0x2750>
  40adcf:	call   40b270 <__libc_csu_fini@@Base+0x10>
  40add4:	lea    rdi,[rip+0xfffffffffffffd75]        # 40ab50 <next@@Base+0x2710>
  40addb:	add    rsp,0x8
  40addf:	pop    rbx
  40ade0:	pop    r14
  40ade2:	jmp    40b270 <__libc_csu_fini@@Base+0x10>
  40ade7:	nop
  40ade8:	nop    DWORD PTR [rax+rax*1+0x0]
  40adf0:	push   r15
  40adf2:	push   r14
  40adf4:	push   rbx
  40adf5:	mov    r14,rdi
  40adf8:	lea    rbx,[rdi+0x1]
  40adfc:	lea    r15,[rip+0x734d]        # 412150 <lprofDirMode@@Base>
  40ae03:	jmp    40ae14 <__gcov_flush@@Base+0x1b4>
  40ae05:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ae0f:	nop
  40ae10:	add    rbx,0x1
  40ae14:	movzx  eax,BYTE PTR [rbx]
  40ae17:	cmp    al,0x2f
  40ae19:	je     40ae30 <__gcov_flush@@Base+0x1d0>
  40ae1b:	test   al,al
  40ae1d:	jne    40ae10 <__gcov_flush@@Base+0x1b0>
  40ae1f:	jmp    40ae43 <__gcov_flush@@Base+0x1e3>
  40ae21:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ae2b:	nop    DWORD PTR [rax+rax*1+0x0]
  40ae30:	mov    BYTE PTR [rbx],0x0
  40ae33:	mov    esi,DWORD PTR [r15]
  40ae36:	mov    rdi,r14
  40ae39:	call   403070 <mkdir@plt>
  40ae3e:	mov    BYTE PTR [rbx],0x2f
  40ae41:	jmp    40ae10 <__gcov_flush@@Base+0x1b0>
  40ae43:	pop    rbx
  40ae44:	pop    r14
  40ae46:	pop    r15
  40ae48:	ret    
  40ae49:	nop    DWORD PTR [rax+0x0]
  40ae50:	lea    rax,[rip+0x72f9]        # 412150 <lprofDirMode@@Base>
  40ae57:	mov    eax,DWORD PTR [rax]
  40ae59:	ret    
  40ae5a:	nop    WORD PTR [rax+rax*1+0x0]
  40ae60:	lea    rax,[rip+0x72e9]        # 412150 <lprofDirMode@@Base>
  40ae67:	mov    DWORD PTR [rax],edi
  40ae69:	ret    
  40ae6a:	nop    WORD PTR [rax+rax*1+0x0]
  40ae70:	push   rbp
  40ae71:	push   rbx
  40ae72:	sub    rsp,0x188
  40ae79:	mov    ebp,esi
  40ae7b:	mov    rbx,rdi
  40ae7e:	mov    rdi,rsp
  40ae81:	call   403100 <uname@plt>
  40ae86:	test   eax,eax
  40ae88:	js     40ae9c <__gcov_flush@@Base+0x23c>
  40ae8a:	lea    rsi,[rsp+0x41]
  40ae8f:	movsxd rdx,ebp
  40ae92:	mov    rdi,rbx
  40ae95:	call   403060 <strncpy@plt>
  40ae9a:	xor    eax,eax
  40ae9c:	add    rsp,0x188
  40aea3:	pop    rbx
  40aea4:	pop    rbp
  40aea5:	ret    
  40aea6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40aeb0:	push   rbp
  40aeb1:	push   r14
  40aeb3:	push   rbx
  40aeb4:	sub    rsp,0x20
  40aeb8:	mov    ebx,edi
  40aeba:	mov    WORD PTR [rsp+0x2],0x0
  40aec1:	xorps  xmm0,xmm0
  40aec4:	movups XMMWORD PTR [rsp+0x8],xmm0
  40aec9:	call   403090 <getpid@plt>
  40aece:	mov    DWORD PTR [rsp+0x18],eax
  40aed2:	mov    WORD PTR [rsp],0x1
  40aed8:	mov    r14,rsp
  40aedb:	nop    DWORD PTR [rax+rax*1+0x0]
  40aee0:	xor    ebp,ebp
  40aee2:	mov    esi,0x7
  40aee7:	xor    eax,eax
  40aee9:	mov    edi,ebx
  40aeeb:	mov    rdx,r14
  40aeee:	call   403080 <fcntl@plt>
  40aef3:	cmp    eax,0xffffffff
  40aef6:	jne    40af0e <__gcov_flush@@Base+0x2ae>
  40aef8:	call   403050 <__errno_location@plt>
  40aefd:	mov    eax,DWORD PTR [rax]
  40aeff:	cmp    eax,0x4
  40af02:	je     40aee0 <__gcov_flush@@Base+0x280>
  40af04:	cmp    eax,0x25
  40af07:	jne    40af0e <__gcov_flush@@Base+0x2ae>
  40af09:	mov    ebp,0xffffffff
  40af0e:	mov    eax,ebp
  40af10:	add    rsp,0x20
  40af14:	pop    rbx
  40af15:	pop    r14
  40af17:	pop    rbp
  40af18:	ret    
  40af19:	nop    DWORD PTR [rax+0x0]
  40af20:	push   rbp
  40af21:	push   r14
  40af23:	push   rbx
  40af24:	sub    rsp,0x20
  40af28:	mov    ebx,edi
  40af2a:	mov    WORD PTR [rsp+0x2],0x0
  40af31:	xorps  xmm0,xmm0
  40af34:	movups XMMWORD PTR [rsp+0x8],xmm0
  40af39:	call   403090 <getpid@plt>
  40af3e:	mov    DWORD PTR [rsp+0x18],eax
  40af42:	mov    WORD PTR [rsp],0x2
  40af48:	mov    r14,rsp
  40af4b:	nop    DWORD PTR [rax+rax*1+0x0]
  40af50:	xor    ebp,ebp
  40af52:	mov    esi,0x7
  40af57:	xor    eax,eax
  40af59:	mov    edi,ebx
  40af5b:	mov    rdx,r14
  40af5e:	call   403080 <fcntl@plt>
  40af63:	cmp    eax,0xffffffff
  40af66:	jne    40af7e <__gcov_flush@@Base+0x31e>
  40af68:	call   403050 <__errno_location@plt>
  40af6d:	mov    eax,DWORD PTR [rax]
  40af6f:	cmp    eax,0x4
  40af72:	je     40af50 <__gcov_flush@@Base+0x2f0>
  40af74:	cmp    eax,0x25
  40af77:	jne    40af7e <__gcov_flush@@Base+0x31e>
  40af79:	mov    ebp,0xffffffff
  40af7e:	mov    eax,ebp
  40af80:	add    rsp,0x20
  40af84:	pop    rbx
  40af85:	pop    r14
  40af87:	pop    rbp
  40af88:	ret    
  40af89:	nop    DWORD PTR [rax+0x0]
  40af90:	push   rbp
  40af91:	push   r14
  40af93:	push   rbx
  40af94:	sub    rsp,0x20
  40af98:	xor    ebx,ebx
  40af9a:	mov    esi,0x42
  40af9f:	mov    edx,0x1b6
  40afa4:	xor    eax,eax
  40afa6:	call   403200 <open@plt>
  40afab:	test   eax,eax
  40afad:	js     40b00a <__gcov_flush@@Base+0x3aa>
  40afaf:	mov    ebp,eax
  40afb1:	mov    WORD PTR [rsp+0x2],0x0
  40afb8:	xorps  xmm0,xmm0
  40afbb:	movups XMMWORD PTR [rsp+0x8],xmm0
  40afc0:	call   403090 <getpid@plt>
  40afc5:	mov    DWORD PTR [rsp+0x18],eax
  40afc9:	mov    WORD PTR [rsp],0x1
  40afcf:	mov    r14,rsp
  40afd2:	mov    esi,0x7
  40afd7:	xor    eax,eax
  40afd9:	mov    edi,ebp
  40afdb:	mov    rdx,r14
  40afde:	call   403080 <fcntl@plt>
  40afe3:	cmp    eax,0xffffffff
  40afe6:	jne    40aff9 <__gcov_flush@@Base+0x399>
  40afe8:	call   403050 <__errno_location@plt>
  40afed:	mov    eax,DWORD PTR [rax]
  40afef:	cmp    eax,0x4
  40aff2:	je     40afd2 <__gcov_flush@@Base+0x372>
  40aff4:	cmp    eax,0x25
  40aff7:	je     40b016 <__gcov_flush@@Base+0x3b6>
  40aff9:	lea    rsi,[rip+0x1f63]        # 40cf63 <UnitySizeMask@@Base+0x893>
  40b000:	mov    edi,ebp
  40b002:	call   4031d0 <fdopen@plt>
  40b007:	mov    rbx,rax
  40b00a:	mov    rax,rbx
  40b00d:	add    rsp,0x20
  40b011:	pop    rbx
  40b012:	pop    r14
  40b014:	pop    rbp
  40b015:	ret    
  40b016:	mov    rax,QWORD PTR [rip+0x6fdb]        # 411ff8 <stderr@GLIBC_2.2.5>
  40b01d:	mov    rdi,QWORD PTR [rax]
  40b020:	lea    rsi,[rip+0x20de]        # 40d105 <UnitySizeMask@@Base+0xa35>
  40b027:	lea    rdx,[rip+0x2120]        # 40d14e <UnitySizeMask@@Base+0xa7e>
  40b02e:	xor    eax,eax
  40b030:	call   403140 <fprintf@plt>
  40b035:	jmp    40aff9 <__gcov_flush@@Base+0x399>
  40b037:	nop    WORD PTR [rax+rax*1+0x0]
  40b040:	push   r15
  40b042:	push   r14
  40b044:	push   r12
  40b046:	push   rbx
  40b047:	push   rax
  40b048:	mov    r14,rsi
  40b04b:	mov    r15,rdi
  40b04e:	lea    rdi,[rip+0x2127]        # 40d17c <UnitySizeMask@@Base+0xaac>
  40b055:	call   403030 <getenv@plt>
  40b05a:	mov    rbx,rax
  40b05d:	lea    rdi,[rip+0x2124]        # 40d188 <UnitySizeMask@@Base+0xab8>
  40b064:	call   403030 <getenv@plt>
  40b069:	mov    QWORD PTR [r14],0x0
  40b070:	mov    DWORD PTR [r15],0x0
  40b077:	test   rbx,rbx
  40b07a:	je     40b0b1 <__gcov_flush@@Base+0x451>
  40b07c:	xor    r12d,r12d
  40b07f:	cmp    BYTE PTR [rbx],0x0
  40b082:	je     40b0b1 <__gcov_flush@@Base+0x451>
  40b084:	test   rax,rax
  40b087:	je     40b0a1 <__gcov_flush@@Base+0x441>
  40b089:	xor    r12d,r12d
  40b08c:	xor    esi,esi
  40b08e:	mov    edx,0xa
  40b093:	mov    rdi,rax
  40b096:	call   403160 <strtol@plt>
  40b09b:	test   eax,eax
  40b09d:	cmovns r12d,eax
  40b0a1:	mov    DWORD PTR [r15],r12d
  40b0a4:	mov    rdi,rbx
  40b0a7:	call   4030c0 <strlen@plt>
  40b0ac:	mov    QWORD PTR [r14],rax
  40b0af:	jmp    40b0b3 <__gcov_flush@@Base+0x453>
  40b0b1:	xor    ebx,ebx
  40b0b3:	mov    rax,rbx
  40b0b6:	add    rsp,0x8
  40b0ba:	pop    rbx
  40b0bb:	pop    r12
  40b0bd:	pop    r14
  40b0bf:	pop    r15
  40b0c1:	ret    
  40b0c2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b0cc:	nop    DWORD PTR [rax+0x0]
  40b0d0:	push   r15
  40b0d2:	push   r14
  40b0d4:	push   r12
  40b0d6:	push   rbx
  40b0d7:	push   rax
  40b0d8:	mov    r15,rcx
  40b0db:	mov    r12,rdx
  40b0de:	mov    rbx,rsi
  40b0e1:	mov    r14,rdi
  40b0e4:	test   r8d,r8d
  40b0e7:	jle    40b10f <__gcov_flush@@Base+0x4af>
  40b0e9:	lea    rax,[rbx+0x1]
  40b0ed:	xor    ecx,ecx
  40b0ef:	nop
  40b0f0:	movzx  edx,BYTE PTR [rax]
  40b0f3:	cmp    dl,0x2f
  40b0f6:	je     40b100 <__gcov_flush@@Base+0x4a0>
  40b0f8:	test   dl,dl
  40b0fa:	jne    40b106 <__gcov_flush@@Base+0x4a6>
  40b0fc:	jmp    40b10f <__gcov_flush@@Base+0x4af>
  40b0fe:	xchg   ax,ax
  40b100:	add    ecx,0x1
  40b103:	mov    rbx,rax
  40b106:	add    rax,0x1
  40b10a:	cmp    ecx,r8d
  40b10d:	jl     40b0f0 <__gcov_flush@@Base+0x490>
  40b10f:	mov    rdi,r14
  40b112:	mov    rsi,r12
  40b115:	mov    rdx,r15
  40b118:	call   403170 <memcpy@plt>
  40b11d:	cmp    BYTE PTR [r12+r15*1-0x1],0x2f
  40b123:	je     40b12e <__gcov_flush@@Base+0x4ce>
  40b125:	mov    BYTE PTR [r14+r15*1],0x2f
  40b12a:	add    r15,0x1
  40b12e:	add    r14,r15
  40b131:	mov    rdi,rbx
  40b134:	call   4030c0 <strlen@plt>
  40b139:	lea    rdx,[rax+0x1]
  40b13d:	mov    rdi,r14
  40b140:	mov    rsi,rbx
  40b143:	add    rsp,0x8
  40b147:	pop    rbx
  40b148:	pop    r12
  40b14a:	pop    r14
  40b14c:	pop    r15
  40b14e:	jmp    403170 <memcpy@plt>
  40b153:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b15d:	nop    DWORD PTR [rax]
  40b160:	mov    esi,0x2f
  40b165:	jmp    4030e0 <strchr@plt>
  40b16a:	nop    WORD PTR [rax+rax*1+0x0]
  40b170:	mov    esi,0x2f
  40b175:	jmp    4030f0 <strrchr@plt>
  40b17a:	nop    WORD PTR [rax+rax*1+0x0]
  40b180:	push   rax
  40b181:	mov    DWORD PTR [rsp+0x4],0x0
  40b189:	lea    rsi,[rsp+0x4]
  40b18e:	mov    edi,0x2
  40b193:	xor    eax,eax
  40b195:	call   403180 <prctl@plt>
  40b19a:	mov    ecx,DWORD PTR [rsp+0x4]
  40b19e:	test   eax,eax
  40b1a0:	jne    40b1b9 <__gcov_flush@@Base+0x559>
  40b1a2:	cmp    ecx,0x9
  40b1a5:	jne    40b1b9 <__gcov_flush@@Base+0x559>
  40b1a7:	mov    edi,0x1
  40b1ac:	xor    esi,esi
  40b1ae:	xor    eax,eax
  40b1b0:	call   403180 <prctl@plt>
  40b1b5:	mov    ecx,DWORD PTR [rsp+0x4]
  40b1b9:	xor    eax,eax
  40b1bb:	cmp    ecx,0x9
  40b1be:	sete   al
  40b1c1:	pop    rcx
  40b1c2:	ret    
  40b1c3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b1cd:	nop    DWORD PTR [rax]
  40b1d0:	mov    edi,0x1
  40b1d5:	mov    esi,0x9
  40b1da:	xor    eax,eax
  40b1dc:	jmp    403180 <prctl@plt>
  40b1e1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b1eb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040b1f0 <__libc_csu_init@@Base>:
  40b1f0:	endbr64 
  40b1f4:	push   r15
  40b1f6:	lea    r15,[rip+0x5863]        # 410a60 <UnitySizeMask@@Base+0x4390>
  40b1fd:	push   r14
  40b1ff:	mov    r14,rdx
  40b202:	push   r13
  40b204:	mov    r13,rsi
  40b207:	push   r12
  40b209:	mov    r12d,edi
  40b20c:	push   rbp
  40b20d:	lea    rbp,[rip+0x5874]        # 410a88 <UnitySizeMask@@Base+0x43b8>
  40b214:	push   rbx
  40b215:	sub    rbp,r15
  40b218:	sub    rsp,0x8
  40b21c:	call   403000 <getenv@plt-0x30>
  40b221:	sar    rbp,0x3
  40b225:	je     40b246 <__libc_csu_init@@Base+0x56>
  40b227:	xor    ebx,ebx
  40b229:	nop    DWORD PTR [rax+0x0]
  40b230:	mov    rdx,r14
  40b233:	mov    rsi,r13
  40b236:	mov    edi,r12d
  40b239:	call   QWORD PTR [r15+rbx*8]
  40b23d:	add    rbx,0x1
  40b241:	cmp    rbp,rbx
  40b244:	jne    40b230 <__libc_csu_init@@Base+0x40>
  40b246:	add    rsp,0x8
  40b24a:	pop    rbx
  40b24b:	pop    rbp
  40b24c:	pop    r12
  40b24e:	pop    r13
  40b250:	pop    r14
  40b252:	pop    r15
  40b254:	ret    
  40b255:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000040b260 <__libc_csu_fini@@Base>:
  40b260:	endbr64 
  40b264:	ret    
  40b265:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b26f:	nop
  40b270:	endbr64 
  40b274:	mov    rdx,QWORD PTR [rip+0x6ebd]        # 412138 <__data_start@@Base+0x8>
  40b27b:	xor    esi,esi
  40b27d:	jmp    403210 <__cxa_atexit@plt>

Disassembly of section .fini:

000000000040b284 <.fini>:
  40b284:	endbr64 
  40b288:	sub    rsp,0x8
  40b28c:	add    rsp,0x8
  40b290:	ret    
