
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0x9fe9]        # 40cff8 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0x9fe2]        # 40d008 <flatcc_builder_padding_base@@Base+0x3068>
  403026:	jmp    QWORD PTR [rip+0x9fe4]        # 40d010 <flatcc_builder_padding_base@@Base+0x3070>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0x9fe2]        # 40d018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <fclose@plt>:
  403040:	jmp    QWORD PTR [rip+0x9fda]        # 40d020 <fclose@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <strlen@plt>:
  403050:	jmp    QWORD PTR [rip+0x9fd2]        # 40d028 <strlen@GLIBC_2.2.5>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <__stack_chk_fail@plt>:
  403060:	jmp    QWORD PTR [rip+0x9fca]        # 40d030 <__stack_chk_fail@GLIBC_2.4>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <gettimeofday@plt>:
  403070:	jmp    QWORD PTR [rip+0x9fc2]        # 40d038 <gettimeofday@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <__assert_fail@plt>:
  403080:	jmp    QWORD PTR [rip+0x9fba]        # 40d040 <__assert_fail@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <memset@plt>:
  403090:	jmp    QWORD PTR [rip+0x9fb2]        # 40d048 <memset@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <memchr@plt>:
  4030a0:	jmp    QWORD PTR [rip+0x9faa]        # 40d050 <memchr@GLIBC_2.2.5>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <memcmp@plt>:
  4030b0:	jmp    QWORD PTR [rip+0x9fa2]        # 40d058 <memcmp@GLIBC_2.2.5>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <strcmp@plt>:
  4030c0:	jmp    QWORD PTR [rip+0x9f9a]        # 40d060 <strcmp@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <memcpy@plt>:
  4030d0:	jmp    QWORD PTR [rip+0x9f92]        # 40d068 <memcpy@GLIBC_2.14>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

00000000004030e0 <malloc@plt>:
  4030e0:	jmp    QWORD PTR [rip+0x9f8a]        # 40d070 <malloc@GLIBC_2.2.5>
  4030e6:	push   0xb
  4030eb:	jmp    403020 <free@plt-0x10>

00000000004030f0 <realloc@plt>:
  4030f0:	jmp    QWORD PTR [rip+0x9f82]        # 40d078 <realloc@GLIBC_2.2.5>
  4030f6:	push   0xc
  4030fb:	jmp    403020 <free@plt-0x10>

0000000000403100 <__printf_chk@plt>:
  403100:	jmp    QWORD PTR [rip+0x9f7a]        # 40d080 <__printf_chk@GLIBC_2.3.4>
  403106:	push   0xd
  40310b:	jmp    403020 <free@plt-0x10>

0000000000403110 <fopen@plt>:
  403110:	jmp    QWORD PTR [rip+0x9f72]        # 40d088 <fopen@GLIBC_2.2.5>
  403116:	push   0xe
  40311b:	jmp    403020 <free@plt-0x10>

0000000000403120 <fwrite@plt>:
  403120:	jmp    QWORD PTR [rip+0x9f6a]        # 40d090 <fwrite@GLIBC_2.2.5>
  403126:	push   0xf
  40312b:	jmp    403020 <free@plt-0x10>

0000000000403130 <posix_memalign@plt>:
  403130:	jmp    QWORD PTR [rip+0x9f62]        # 40d098 <posix_memalign@GLIBC_2.2.5>
  403136:	push   0x10
  40313b:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

0000000000403140 <main@@Base-0xe0>:
  403140:	lea    rcx,[rip+0x62e9]        # 409430 <_IO_stdin_used@@Base+0x430>
  403147:	lea    rsi,[rip+0x5eba]        # 409008 <_IO_stdin_used@@Base+0x8>
  40314e:	lea    rdi,[rip+0x5f33]        # 409088 <_IO_stdin_used@@Base+0x88>
  403155:	sub    rsp,0x8
  403159:	mov    edx,0x2bb
  40315e:	call   403080 <__assert_fail@plt>
  403163:	lea    rcx,[rip+0x62e6]        # 409450 <_IO_stdin_used@@Base+0x450>
  40316a:	lea    rsi,[rip+0x5f3f]        # 4090b0 <_IO_stdin_used@@Base+0xb0>
  403171:	lea    rdi,[rip+0x5fb8]        # 409130 <_IO_stdin_used@@Base+0x130>
  403178:	sub    rsp,0x8
  40317c:	mov    edx,0xeb
  403181:	call   403080 <__assert_fail@plt>
  403186:	lea    rcx,[rip+0x6de3]        # 409f70 <_IO_stdin_used@@Base+0xf70>
  40318d:	lea    rsi,[rip+0x632c]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  403194:	lea    rdi,[rip+0x66bc]        # 409857 <_IO_stdin_used@@Base+0x857>
  40319b:	sub    rsp,0x8
  40319f:	mov    edx,0x134
  4031a4:	call   403080 <__assert_fail@plt>
  4031a9:	lea    rcx,[rip+0x6d50]        # 409f00 <_IO_stdin_used@@Base+0xf00>
  4031b0:	lea    rsi,[rip+0x6309]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4031b7:	lea    rdi,[rip+0x6699]        # 409857 <_IO_stdin_used@@Base+0x857>
  4031be:	sub    rsp,0x8
  4031c2:	mov    edx,0x2a1
  4031c7:	call   403080 <__assert_fail@plt>
  4031cc:	lea    rcx,[rip+0x6d1d]        # 409ef0 <_IO_stdin_used@@Base+0xef0>
  4031d3:	lea    rsi,[rip+0x62e6]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4031da:	lea    rdi,[rip+0x6676]        # 409857 <_IO_stdin_used@@Base+0x857>
  4031e1:	sub    rsp,0x8
  4031e5:	mov    edx,0x28b
  4031ea:	call   403080 <__assert_fail@plt>
  4031ef:	lea    rcx,[rip+0x6c5a]        # 409e50 <_IO_stdin_used@@Base+0xe50>
  4031f6:	lea    rsi,[rip+0x62c3]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4031fd:	lea    rdi,[rip+0x662c]        # 409830 <_IO_stdin_used@@Base+0x830>
  403204:	sub    rsp,0x8
  403208:	mov    edx,0x37c
  40320d:	call   403080 <__assert_fail@plt>
  403212:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40321c:	nop    DWORD PTR [rax+0x0]

0000000000403220 <main@@Base>:
  403220:	push   r15
  403222:	push   r14
  403224:	push   r13
  403226:	push   r12
  403228:	push   rbp
  403229:	push   rbx
  40322a:	sub    rsp,0x1d8
  403231:	mov    rax,QWORD PTR fs:0x28
  40323a:	mov    QWORD PTR [rsp+0x1c8],rax
  403242:	xor    eax,eax
  403244:	lea    rax,[rsp+0x40]
  403249:	mov    rbx,rax
  40324c:	mov    rdi,rax
  40324f:	mov    QWORD PTR [rsp+0x10],rax
  403254:	call   404310 <flatcc_builder_init@@Base>
  403259:	mov    rdi,rbx
  40325c:	call   403a00 <_start@@Base+0x1a0>
  403261:	lea    rsi,[rsp+0x38]
  403266:	mov    rdi,rbx
  403269:	call   407950 <flatcc_builder_finalize_buffer@@Base>
  40326e:	lea    rsi,[rip+0x6083]        # 4092f8 <_IO_stdin_used@@Base+0x2f8>
  403275:	lea    rdi,[rip+0x607f]        # 4092fb <_IO_stdin_used@@Base+0x2fb>
  40327c:	mov    r15,rax
  40327f:	mov    QWORD PTR [rsp+0x8],rax
  403284:	call   403110 <fopen@plt>
  403289:	test   rax,rax
  40328c:	je     4037bd <main@@Base+0x59d>
  403292:	mov    rdx,QWORD PTR [rsp+0x38]
  403297:	mov    rcx,rax
  40329a:	mov    esi,0x1
  40329f:	mov    rdi,r15
  4032a2:	mov    rbx,rax
  4032a5:	call   403120 <fwrite@plt>
  4032aa:	mov    rbp,QWORD PTR [rsp+0x38]
  4032af:	mov    r12,rax
  4032b2:	mov    rdi,rbx
  4032b5:	call   403040 <fclose@plt>
  4032ba:	cmp    r12,rbp
  4032bd:	je     40331c <main@@Base+0xfc>
  4032bf:	mov    rdi,QWORD PTR [rsp+0x10]
  4032c4:	call   4044e0 <flatcc_builder_clear@@Base>
  4032c9:	mov    rdi,QWORD PTR [rsp+0x8]
  4032ce:	call   403030 <free@plt>
  4032d3:	mov    ecx,0x1
  4032d8:	lea    rsi,[rip+0x612d]        # 40940c <_IO_stdin_used@@Base+0x40c>
  4032df:	mov    edi,0x1
  4032e4:	xor    eax,eax
  4032e6:	mov    DWORD PTR [rsp],ecx
  4032e9:	call   403100 <__printf_chk@plt>
  4032ee:	mov    ecx,DWORD PTR [rsp]
  4032f1:	mov    eax,ecx
  4032f3:	mov    rcx,QWORD PTR [rsp+0x1c8]
  4032fb:	xor    rcx,QWORD PTR fs:0x28
  403304:	jne    4037d9 <main@@Base+0x5b9>
  40330a:	add    rsp,0x1d8
  403311:	pop    rbx
  403312:	pop    rbp
  403313:	pop    r12
  403315:	pop    r13
  403317:	pop    r14
  403319:	pop    r15
  40331b:	ret    
  40331c:	mov    rdx,QWORD PTR [rsp+0x38]
  403321:	lea    rsi,[rip+0x5fe9]        # 409311 <_IO_stdin_used@@Base+0x311>
  403328:	mov    edi,0x1
  40332d:	xor    eax,eax
  40332f:	lea    rbp,[rip+0x5fb5]        # 4092eb <_IO_stdin_used@@Base+0x2eb>
  403336:	lea    r12,[rip+0x9dc3]        # 40d100 <__bss_start@@Base+0x50>
  40333d:	call   403100 <__printf_chk@plt>
  403342:	lea    rsi,[rip+0x5fda]        # 409323 <_IO_stdin_used@@Base+0x323>
  403349:	mov    edi,0x1
  40334e:	xor    eax,eax
  403350:	call   403100 <__printf_chk@plt>
  403355:	call   403970 <_start@@Base+0x110>
  40335a:	vmovsd QWORD PTR [rsp+0x20],xmm0
  403360:	mov    DWORD PTR [rsp+0x2c],0xa
  403368:	mov    r15,QWORD PTR [rsp+0x10]
  40336d:	mov    rdi,r15
  403370:	call   403a00 <_start@@Base+0x1a0>
  403375:	mov    rbx,QWORD PTR [rsp+0x8]
  40337a:	mov    rdx,QWORD PTR [rsp+0x38]
  40337f:	mov    rdi,r15
  403382:	mov    rsi,rbx
  403385:	call   407900 <flatcc_builder_copy_buffer@@Base>
  40338a:	cmp    DWORD PTR [rbx+0x4],0x534e4f4d
  403391:	je     403398 <main@@Base+0x178>
  403393:	call   403140 <posix_memalign@plt+0x10>
  403398:	mov    rax,QWORD PTR [rsp+0x8]
  40339d:	mov    ebx,DWORD PTR [rax]
  40339f:	add    rbx,rax
  4033a2:	je     403393 <main@@Base+0x173>
  4033a4:	movsxd rax,DWORD PTR [rbx]
  4033a7:	mov    r13,rbx
  4033aa:	sub    r13,rax
  4033ad:	movzx  r14d,WORD PTR [r13+0x0]
  4033b2:	cmp    r14w,0xb
  4033b7:	ja     4033d8 <main@@Base+0x1b8>
  4033b9:	lea    rcx,[rip+0x6070]        # 409430 <_IO_stdin_used@@Base+0x430>
  4033c0:	lea    rsi,[rip+0x5c41]        # 409008 <_IO_stdin_used@@Base+0x8>
  4033c7:	lea    rdi,[rip+0x5e72]        # 409240 <_IO_stdin_used@@Base+0x240>
  4033ce:	mov    edx,0x2bb
  4033d3:	call   403080 <__assert_fail@plt>
  4033d8:	movzx  eax,WORD PTR [r13+0xa]
  4033dd:	test   ax,ax
  4033e0:	je     4033b9 <main@@Base+0x199>
  4033e2:	add    rax,rbx
  4033e5:	lea    rsi,[rip+0x5ef2]        # 4092de <_IO_stdin_used@@Base+0x2de>
  4033ec:	mov    edx,DWORD PTR [rax]
  4033ee:	lea    rdi,[rax+rdx*1+0x4]
  4033f3:	call   4030c0 <strcmp@plt>
  4033f8:	test   eax,eax
  4033fa:	jne    40379e <main@@Base+0x57e>
  403400:	cmp    r14w,0x1b
  403405:	ja     403426 <main@@Base+0x206>
  403407:	lea    rcx,[rip+0x6086]        # 409494 <_IO_stdin_used@@Base+0x494>
  40340e:	lea    rsi,[rip+0x5dc3]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403415:	lea    rdi,[rip+0x5f19]        # 409335 <_IO_stdin_used@@Base+0x335>
  40341c:	mov    edx,0x8f
  403421:	call   403080 <__assert_fail@plt>
  403426:	movzx  eax,WORD PTR [r13+0x1a]
  40342b:	test   ax,ax
  40342e:	je     403407 <main@@Base+0x1e7>
  403430:	add    rbx,rax
  403433:	mov    eax,DWORD PTR [rbx]
  403435:	lea    r13,[rbx+rax*1+0x4]
  40343a:	test   r13,r13
  40343d:	je     403407 <main@@Base+0x1e7>
  40343f:	cmp    DWORD PTR [r13-0x4],0x3e8
  403447:	jne    403407 <main@@Base+0x1e7>
  403449:	lea    rax,[r13+0xfa0]
  403450:	mov    QWORD PTR [rsp+0x18],rax
  403455:	nop    DWORD PTR [rax]
  403458:	mov    eax,DWORD PTR [r13+0x0]
  40345c:	add    rax,r13
  40345f:	je     403393 <main@@Base+0x173>
  403465:	movsxd rdx,DWORD PTR [rax]
  403468:	mov    rcx,rax
  40346b:	sub    rcx,rdx
  40346e:	movzx  esi,WORD PTR [rcx]
  403471:	cmp    si,0xb
  403475:	jbe    4033b9 <main@@Base+0x199>
  40347b:	movzx  edx,WORD PTR [rcx+0xa]
  40347f:	test   dx,dx
  403482:	je     4033b9 <main@@Base+0x199>
  403488:	add    rdx,rax
  40348b:	cmp    si,0xf
  40348f:	mov    edi,DWORD PTR [rdx]
  403491:	lea    rdi,[rdx+rdi*1+0x4]
  403496:	mov    QWORD PTR [rsp],rdi
  40349a:	jbe    4036d0 <main@@Base+0x4b0>
  4034a0:	movzx  edx,WORD PTR [rcx+0xe]
  4034a4:	test   dx,dx
  4034a7:	je     4036fe <main@@Base+0x4de>
  4034ad:	add    rax,rdx
  4034b0:	mov    edx,DWORD PTR [rax]
  4034b2:	lea    rbx,[rax+rdx*1+0x4]
  4034b7:	mov    rax,QWORD PTR [rsp]
  4034bb:	test   rax,rax
  4034be:	je     4036df <main@@Base+0x4bf>
  4034c4:	cmp    DWORD PTR [rax-0x4],0x2bc
  4034cb:	jne    4036df <main@@Base+0x4bf>
  4034d1:	test   rbx,rbx
  4034d4:	je     40370c <main@@Base+0x4ec>
  4034da:	cmp    DWORD PTR [rbx-0x4],0x186a0
  4034e1:	jne    40370c <main@@Base+0x4ec>
  4034e7:	mov    r15,QWORD PTR [rsp]
  4034eb:	xor    r14d,r14d
  4034ee:	xchg   ax,ax
  4034f0:	mov    edx,0x7
  4034f5:	mov    rsi,rbp
  4034f8:	mov    rdi,r15
  4034fb:	call   4030b0 <memcmp@plt>
  403500:	test   eax,eax
  403502:	jne    40374a <main@@Base+0x52a>
  403508:	add    r14,0x1
  40350c:	add    r15,0x7
  403510:	cmp    r14,0x64
  403514:	jne    4034f0 <main@@Base+0x2d0>
  403516:	lea    r14,[rbx+0x186a0]
  40351d:	nop    DWORD PTR [rax]
  403520:	mov    edx,0x3e8
  403525:	mov    rsi,r12
  403528:	mov    rdi,rbx
  40352b:	call   4030b0 <memcmp@plt>
  403530:	test   eax,eax
  403532:	jne    40372b <main@@Base+0x50b>
  403538:	add    rbx,0x3e8
  40353f:	cmp    r14,rbx
  403542:	jne    403520 <main@@Base+0x300>
  403544:	add    r13,0x4
  403548:	cmp    r13,QWORD PTR [rsp+0x18]
  40354d:	jne    403458 <main@@Base+0x238>
  403553:	sub    DWORD PTR [rsp+0x2c],0x1
  403558:	mov    DWORD PTR [rsp+0x18],eax
  40355c:	jne    403368 <main@@Base+0x148>
  403562:	call   403970 <_start@@Base+0x110>
  403567:	vsubsd xmm5,xmm0,QWORD PTR [rsp+0x20]
  40356d:	lea    rdx,[rip+0x5d14]        # 409288 <_IO_stdin_used@@Base+0x288>
  403574:	lea    rsi,[rip+0x5dd0]        # 40934b <_IO_stdin_used@@Base+0x34b>
  40357b:	mov    edi,0x1
  403580:	xor    eax,eax
  403582:	mov    rbx,QWORD PTR [rsp+0x38]
  403587:	vmovsd QWORD PTR [rsp],xmm5
  40358c:	call   403100 <__printf_chk@plt>
  403591:	vmovsd xmm0,QWORD PTR [rsp]
  403596:	lea    rsi,[rip+0x5dbd]        # 40935a <_IO_stdin_used@@Base+0x35a>
  40359d:	mov    edi,0x1
  4035a2:	mov    eax,0x1
  4035a7:	call   403100 <__printf_chk@plt>
  4035ac:	lea    rsi,[rip+0x5dbf]        # 409372 <_IO_stdin_used@@Base+0x372>
  4035b3:	mov    edx,0xa
  4035b8:	mov    edi,0x1
  4035bd:	xor    eax,eax
  4035bf:	call   403100 <__printf_chk@plt>
  4035c4:	lea    rsi,[rip+0x5db7]        # 409382 <_IO_stdin_used@@Base+0x382>
  4035cb:	xor    eax,eax
  4035cd:	mov    rdx,rbx
  4035d0:	mov    edi,0x1
  4035d5:	call   403100 <__printf_chk@plt>
  4035da:	test   rbx,rbx
  4035dd:	mov    ecx,DWORD PTR [rsp+0x18]
  4035e1:	js     403840 <main@@Base+0x620>
  4035e7:	vxorpd xmm0,xmm0,xmm0
  4035eb:	vcvtsi2sd xmm0,xmm0,rbx
  4035f0:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5eb0]        # 4094a8 <_IO_stdin_used@@Base+0x4a8>
  4035f8:	lea    rsi,[rip+0x5d96]        # 409395 <_IO_stdin_used@@Base+0x395>
  4035ff:	mov    edi,0x1
  403604:	vmovsd xmm2,QWORD PTR [rip+0x5e94]        # 4094a0 <_IO_stdin_used@@Base+0x4a0>
  40360c:	mov    eax,0x1
  403611:	mov    DWORD PTR [rsp+0x20],ecx
  403615:	vmovsd QWORD PTR [rsp+0x18],xmm2
  40361b:	vdivsd xmm0,xmm0,xmm2
  40361f:	vdivsd xmm0,xmm0,QWORD PTR [rsp]
  403624:	call   403100 <__printf_chk@plt>
  403629:	vmovsd xmm7,QWORD PTR [rip+0x5e77]        # 4094a8 <_IO_stdin_used@@Base+0x4a8>
  403631:	lea    rsi,[rip+0x5c80]        # 4092b8 <_IO_stdin_used@@Base+0x2b8>
  403638:	mov    edi,0x1
  40363d:	mov    eax,0x1
  403642:	vdivsd xmm0,xmm7,QWORD PTR [rsp]
  403647:	call   403100 <__printf_chk@plt>
  40364c:	vmovsd xmm1,QWORD PTR [rip+0x5e5c]        # 4094b0 <_IO_stdin_used@@Base+0x4b0>
  403654:	mov    ecx,DWORD PTR [rsp+0x20]
  403658:	vmovsd xmm3,QWORD PTR [rip+0x5e58]        # 4094b8 <_IO_stdin_used@@Base+0x4b8>
  403660:	vmulsd xmm0,xmm1,QWORD PTR [rsp]
  403665:	vmovsd xmm2,QWORD PTR [rsp+0x18]
  40366b:	mov    DWORD PTR [rsp],ecx
  40366e:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5e32]        # 4094a8 <_IO_stdin_used@@Base+0x4a8>
  403676:	vucomisd xmm3,xmm0
  40367a:	ja     403822 <main@@Base+0x602>
  403680:	vucomisd xmm2,xmm0
  403684:	ja     403800 <main@@Base+0x5e0>
  40368a:	vucomisd xmm1,xmm0
  40368e:	ja     4037de <main@@Base+0x5be>
  403694:	vdivsd xmm0,xmm0,xmm1
  403698:	lea    rsi,[rip+0x5d56]        # 4093f5 <_IO_stdin_used@@Base+0x3f5>
  40369f:	mov    edi,0x1
  4036a4:	mov    eax,0x1
  4036a9:	call   403100 <__printf_chk@plt>
  4036ae:	mov    ecx,DWORD PTR [rsp]
  4036b1:	mov    rdi,QWORD PTR [rsp+0x10]
  4036b6:	mov    DWORD PTR [rsp],ecx
  4036b9:	call   4044e0 <flatcc_builder_clear@@Base>
  4036be:	mov    rdi,QWORD PTR [rsp+0x8]
  4036c3:	call   403030 <free@plt>
  4036c8:	mov    ecx,DWORD PTR [rsp]
  4036cb:	jmp    4032f1 <main@@Base+0xd1>
  4036d0:	mov    rax,QWORD PTR [rsp]
  4036d4:	xor    ebx,ebx
  4036d6:	test   rax,rax
  4036d9:	jne    4034c4 <main@@Base+0x2a4>
  4036df:	lea    rcx,[rip+0x5d3a]        # 409420 <_IO_stdin_used@@Base+0x420>
  4036e6:	lea    rsi,[rip+0x5aeb]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  4036ed:	lea    rdi,[rip+0x6163]        # 409857 <_IO_stdin_used@@Base+0x857>
  4036f4:	mov    edx,0x4a
  4036f9:	call   403080 <__assert_fail@plt>
  4036fe:	test   rdi,rdi
  403701:	je     4036df <main@@Base+0x4bf>
  403703:	cmp    DWORD PTR [rdi-0x4],0x2bc
  40370a:	jne    4036df <main@@Base+0x4bf>
  40370c:	lea    rcx,[rip+0x5d0d]        # 409420 <_IO_stdin_used@@Base+0x420>
  403713:	lea    rsi,[rip+0x5abe]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  40371a:	lea    rdi,[rip+0x6136]        # 409857 <_IO_stdin_used@@Base+0x857>
  403721:	mov    edx,0x4e
  403726:	call   403080 <__assert_fail@plt>
  40372b:	lea    rcx,[rip+0x5cee]        # 409420 <_IO_stdin_used@@Base+0x420>
  403732:	lea    rsi,[rip+0x5a9f]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403739:	lea    rdi,[rip+0x6117]        # 409857 <_IO_stdin_used@@Base+0x857>
  403740:	mov    edx,0x5b
  403745:	call   403080 <__assert_fail@plt>
  40374a:	mov    rcx,QWORD PTR [rsp]
  40374e:	lea    rsi,[rip+0x5b13]        # 409268 <_IO_stdin_used@@Base+0x268>
  403755:	mov    rdx,r14
  403758:	mov    edi,0x1
  40375d:	xor    eax,eax
  40375f:	call   403100 <__printf_chk@plt>
  403764:	mov    rdx,r15
  403767:	sub    rdx,QWORD PTR [rsp+0x8]
  40376c:	lea    rsi,[rip+0x5bcb]        # 40933e <_IO_stdin_used@@Base+0x33e>
  403773:	mov    edi,0x1
  403778:	xor    eax,eax
  40377a:	call   403100 <__printf_chk@plt>
  40377f:	lea    rcx,[rip+0x5c9a]        # 409420 <_IO_stdin_used@@Base+0x420>
  403786:	lea    rsi,[rip+0x5a4b]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  40378d:	lea    rdi,[rip+0x60c3]        # 409857 <_IO_stdin_used@@Base+0x857>
  403794:	mov    edx,0x55
  403799:	call   403080 <__assert_fail@plt>
  40379e:	lea    rcx,[rip+0x5cef]        # 409494 <_IO_stdin_used@@Base+0x494>
  4037a5:	lea    rsi,[rip+0x5a2c]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  4037ac:	lea    rdi,[rip+0x5b82]        # 409335 <_IO_stdin_used@@Base+0x335>
  4037b3:	mov    edx,0x8b
  4037b8:	call   403080 <__assert_fail@plt>
  4037bd:	mov    rdi,QWORD PTR [rsp+0x10]
  4037c2:	call   4044e0 <flatcc_builder_clear@@Base>
  4037c7:	mov    rdi,QWORD PTR [rsp+0x8]
  4037cc:	call   403030 <free@plt>
  4037d1:	or     ecx,0xffffffff
  4037d4:	jmp    4032d8 <main@@Base+0xb8>
  4037d9:	call   403060 <__stack_chk_fail@plt>
  4037de:	vdivsd xmm0,xmm0,xmm2
  4037e2:	lea    rsi,[rip+0x5bf4]        # 4093dd <_IO_stdin_used@@Base+0x3dd>
  4037e9:	mov    edi,0x1
  4037ee:	mov    eax,0x1
  4037f3:	call   403100 <__printf_chk@plt>
  4037f8:	mov    ecx,DWORD PTR [rsp]
  4037fb:	jmp    4036b1 <main@@Base+0x491>
  403800:	vdivsd xmm0,xmm0,xmm3
  403804:	lea    rsi,[rip+0x5bba]        # 4093c5 <_IO_stdin_used@@Base+0x3c5>
  40380b:	mov    edi,0x1
  403810:	mov    eax,0x1
  403815:	call   403100 <__printf_chk@plt>
  40381a:	mov    ecx,DWORD PTR [rsp]
  40381d:	jmp    4036b1 <main@@Base+0x491>
  403822:	lea    rsi,[rip+0x5b84]        # 4093ad <_IO_stdin_used@@Base+0x3ad>
  403829:	mov    edi,0x1
  40382e:	mov    eax,0x1
  403833:	call   403100 <__printf_chk@plt>
  403838:	mov    ecx,DWORD PTR [rsp]
  40383b:	jmp    4036b1 <main@@Base+0x491>
  403840:	mov    rax,rbx
  403843:	vxorpd xmm0,xmm0,xmm0
  403847:	shr    rax,1
  40384a:	and    ebx,0x1
  40384d:	or     rax,rbx
  403850:	vcvtsi2sd xmm0,xmm0,rax
  403855:	vaddsd xmm0,xmm0,xmm0
  403859:	jmp    4035f0 <main@@Base+0x3d0>
  40385e:	xchg   ax,ax

0000000000403860 <_start@@Base>:
  403860:	endbr64 
  403864:	xor    ebp,ebp
  403866:	mov    r9,rdx
  403869:	pop    rsi
  40386a:	mov    rdx,rsp
  40386d:	and    rsp,0xfffffffffffffff0
  403871:	push   rax
  403872:	push   rsp
  403873:	mov    r8,0x408270
  40387a:	mov    rcx,0x408200
  403881:	mov    rdi,0x403220
  403888:	call   QWORD PTR [rip+0x9762]        # 40cff0 <__libc_start_main@GLIBC_2.2.5>
  40388e:	hlt    
  40388f:	nop
  403890:	endbr64 
  403894:	ret    
  403895:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40389f:	nop
  4038a0:	mov    eax,0x40d0b7
  4038a5:	push   rbp
  4038a6:	sub    rax,0x40d0b0
  4038ac:	cmp    rax,0xe
  4038b0:	mov    rbp,rsp
  4038b3:	jbe    4038d0 <_start@@Base+0x70>
  4038b5:	mov    eax,0x0
  4038ba:	test   rax,rax
  4038bd:	je     4038d0 <_start@@Base+0x70>
  4038bf:	pop    rbp
  4038c0:	mov    edi,0x40d0b0
  4038c5:	jmp    rax
  4038c7:	nop    WORD PTR [rax+rax*1+0x0]
  4038d0:	pop    rbp
  4038d1:	ret    
  4038d2:	nop    DWORD PTR [rax+0x0]
  4038d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4038e0:	mov    esi,0x40d0b0
  4038e5:	push   rbp
  4038e6:	sub    rsi,0x40d0b0
  4038ed:	sar    rsi,0x3
  4038f1:	mov    rbp,rsp
  4038f4:	mov    rax,rsi
  4038f7:	shr    rax,0x3f
  4038fb:	add    rsi,rax
  4038fe:	sar    rsi,1
  403901:	je     403918 <_start@@Base+0xb8>
  403903:	mov    eax,0x0
  403908:	test   rax,rax
  40390b:	je     403918 <_start@@Base+0xb8>
  40390d:	pop    rbp
  40390e:	mov    edi,0x40d0b0
  403913:	jmp    rax
  403915:	nop    DWORD PTR [rax]
  403918:	pop    rbp
  403919:	ret    
  40391a:	nop    WORD PTR [rax+rax*1+0x0]
  403920:	cmp    BYTE PTR [rip+0x9799],0x0        # 40d0c0 <__bss_start@@Base+0x10>
  403927:	jne    40393a <_start@@Base+0xda>
  403929:	push   rbp
  40392a:	mov    rbp,rsp
  40392d:	call   4038a0 <_start@@Base+0x40>
  403932:	pop    rbp
  403933:	mov    BYTE PTR [rip+0x9786],0x1        # 40d0c0 <__bss_start@@Base+0x10>
  40393a:	repz ret 
  40393c:	nop    DWORD PTR [rax+0x0]
  403940:	mov    edi,0x40ce18
  403945:	cmp    QWORD PTR [rdi],0x0
  403949:	jne    403950 <_start@@Base+0xf0>
  40394b:	jmp    4038e0 <_start@@Base+0x80>
  40394d:	nop    DWORD PTR [rax]
  403950:	mov    eax,0x0
  403955:	test   rax,rax
  403958:	je     40394b <_start@@Base+0xeb>
  40395a:	push   rbp
  40395b:	mov    rbp,rsp
  40395e:	call   rax
  403960:	pop    rbp
  403961:	jmp    4038e0 <_start@@Base+0x80>
  403966:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403970:	sub    rsp,0x28
  403974:	xor    esi,esi
  403976:	mov    rdi,rsp
  403979:	mov    rax,QWORD PTR fs:0x28
  403982:	mov    QWORD PTR [rsp+0x18],rax
  403987:	xor    eax,eax
  403989:	call   403070 <gettimeofday@plt>
  40398e:	cmp    QWORD PTR [rip+0x974a],0x0        # 40d0e0 <__bss_start@@Base+0x30>
  403996:	jne    4039af <_start@@Base+0x14f>
  403998:	mov    rax,QWORD PTR [rsp]
  40399c:	mov    rdx,QWORD PTR [rsp+0x8]
  4039a1:	mov    QWORD PTR [rip+0x9738],rax        # 40d0e0 <__bss_start@@Base+0x30>
  4039a8:	mov    QWORD PTR [rip+0x9739],rdx        # 40d0e8 <__bss_start@@Base+0x38>
  4039af:	mov    rax,QWORD PTR [rsp+0x8]
  4039b4:	sub    rax,QWORD PTR [rip+0x972d]        # 40d0e8 <__bss_start@@Base+0x38>
  4039bb:	vxorpd xmm0,xmm0,xmm0
  4039bf:	vxorpd xmm1,xmm1,xmm1
  4039c3:	vcvtsi2sd xmm0,xmm0,rax
  4039c8:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5ad0]        # 4094a0 <_IO_stdin_used@@Base+0x4a0>
  4039d0:	mov    rax,QWORD PTR [rsp]
  4039d4:	sub    rax,QWORD PTR [rip+0x9705]        # 40d0e0 <__bss_start@@Base+0x30>
  4039db:	vcvtsi2sd xmm1,xmm1,rax
  4039e0:	mov    rax,QWORD PTR [rsp+0x18]
  4039e5:	xor    rax,QWORD PTR fs:0x28
  4039ee:	vaddsd xmm0,xmm0,xmm1
  4039f2:	jne    4039f9 <_start@@Base+0x199>
  4039f4:	add    rsp,0x28
  4039f8:	ret    
  4039f9:	call   403060 <__stack_chk_fail@plt>
  4039fe:	xchg   ax,ax
  403a00:	push   r15
  403a02:	push   r14
  403a04:	push   r13
  403a06:	push   r12
  403a08:	push   rbp
  403a09:	push   rbx
  403a0a:	mov    rbp,rdi
  403a0d:	sub    rsp,0x8
  403a11:	call   4044d0 <flatcc_builder_reset@@Base>
  403a16:	lea    rsi,[rip+0x58bc]        # 4092d9 <_IO_stdin_used@@Base+0x2d9>
  403a1d:	xor    ecx,ecx
  403a1f:	xor    edx,edx
  403a21:	mov    rdi,rbp
  403a24:	call   404d10 <flatcc_builder_start_buffer@@Base>
  403a29:	test   eax,eax
  403a2b:	jne    403a3a <_start@@Base+0x1da>
  403a2d:	mov    esi,0x24
  403a32:	mov    rdi,rbp
  403a35:	call   405980 <flatcc_builder_start_table@@Base>
  403a3a:	lea    rsi,[rip+0x589d]        # 4092de <_IO_stdin_used@@Base+0x2de>
  403a41:	mov    rdi,rbp
  403a44:	call   407090 <flatcc_builder_create_string_str@@Base>
  403a49:	test   eax,eax
  403a4b:	mov    ebx,eax
  403a4d:	je     403a63 <_start@@Base+0x203>
  403a4f:	mov    esi,0x3
  403a54:	mov    rdi,rbp
  403a57:	call   4073f0 <flatcc_builder_table_add_offset@@Base>
  403a5c:	test   rax,rax
  403a5f:	je     403a63 <_start@@Base+0x203>
  403a61:	mov    DWORD PTR [rax],ebx
  403a63:	lea    r13,[rip+0x5881]        # 4092eb <_IO_stdin_used@@Base+0x2eb>
  403a6a:	lea    r12,[rip+0x968f]        # 40d100 <__bss_start@@Base+0x50>
  403a71:	mov    rdi,rbp
  403a74:	mov    r14d,0x3e8
  403a7a:	mov    r15d,0xffffffff
  403a80:	call   4057e0 <flatcc_builder_start_offset_vector@@Base>
  403a85:	nop    DWORD PTR [rax]
  403a88:	mov    esi,0x24
  403a8d:	mov    rdi,rbp
  403a90:	mov    ebx,0x64
  403a95:	call   405980 <flatcc_builder_start_table@@Base>
  403a9a:	mov    rdi,rbp
  403a9d:	call   405840 <flatcc_builder_start_string@@Base>
  403aa2:	nop    WORD PTR [rax+rax*1+0x0]
  403aa8:	mov    edx,0x7
  403aad:	mov    rsi,r13
  403ab0:	mov    rdi,rbp
  403ab3:	call   4054c0 <flatcc_builder_append_string@@Base>
  403ab8:	sub    rbx,0x1
  403abc:	jne    403aa8 <_start@@Base+0x248>
  403abe:	mov    rdi,rbp
  403ac1:	call   407100 <flatcc_builder_end_string@@Base>
  403ac6:	test   eax,eax
  403ac8:	mov    ebx,eax
  403aca:	je     403ae0 <_start@@Base+0x280>
  403acc:	mov    esi,0x3
  403ad1:	mov    rdi,rbp
  403ad4:	call   4073f0 <flatcc_builder_table_add_offset@@Base>
  403ad9:	test   rax,rax
  403adc:	je     403ae0 <_start@@Base+0x280>
  403ade:	mov    DWORD PTR [rax],ebx
  403ae0:	mov    rcx,r15
  403ae3:	mov    edx,0x1
  403ae8:	mov    esi,0x1
  403aed:	mov    rdi,rbp
  403af0:	mov    ebx,0x64
  403af5:	call   405760 <flatcc_builder_start_vector@@Base>
  403afa:	nop    WORD PTR [rax+rax*1+0x0]
  403b00:	mov    edx,0x3e8
  403b05:	mov    rsi,r12
  403b08:	mov    rdi,rbp
  403b0b:	call   4051f0 <flatcc_builder_append_vector@@Base>
  403b10:	sub    rbx,0x1
  403b14:	jne    403b00 <_start@@Base+0x2a0>
  403b16:	mov    rdi,rbp
  403b19:	call   406660 <flatcc_builder_end_vector@@Base>
  403b1e:	test   eax,eax
  403b20:	mov    ebx,eax
  403b22:	je     403b38 <_start@@Base+0x2d8>
  403b24:	mov    esi,0x5
  403b29:	mov    rdi,rbp
  403b2c:	call   4073f0 <flatcc_builder_table_add_offset@@Base>
  403b31:	test   rax,rax
  403b34:	je     403b38 <_start@@Base+0x2d8>
  403b36:	mov    DWORD PTR [rax],ebx
  403b38:	lea    rsi,[rip+0x595b]        # 40949a <_IO_stdin_used@@Base+0x49a>
  403b3f:	mov    edx,0x1
  403b44:	mov    rdi,rbp
  403b47:	call   4062c0 <flatcc_builder_check_required@@Base>
  403b4c:	test   eax,eax
  403b4e:	je     403c13 <_start@@Base+0x3b3>
  403b54:	mov    rdi,rbp
  403b57:	call   406340 <flatcc_builder_end_table@@Base>
  403b5c:	test   eax,eax
  403b5e:	je     403bf4 <_start@@Base+0x394>
  403b64:	mov    esi,eax
  403b66:	mov    rdi,rbp
  403b69:	call   405310 <flatcc_builder_offset_vector_push@@Base>
  403b6e:	sub    r14,0x1
  403b72:	jne    403a88 <_start@@Base+0x228>
  403b78:	mov    rdi,rbp
  403b7b:	call   406770 <flatcc_builder_end_offset_vector@@Base>
  403b80:	test   eax,eax
  403b82:	mov    ebx,eax
  403b84:	je     403bd5 <_start@@Base+0x375>
  403b86:	mov    esi,0xb
  403b8b:	mov    rdi,rbp
  403b8e:	call   4073f0 <flatcc_builder_table_add_offset@@Base>
  403b93:	test   rax,rax
  403b96:	je     403b9a <_start@@Base+0x33a>
  403b98:	mov    DWORD PTR [rax],ebx
  403b9a:	lea    rsi,[rip+0x58f9]        # 40949a <_IO_stdin_used@@Base+0x49a>
  403ba1:	mov    edx,0x1
  403ba6:	mov    rdi,rbp
  403ba9:	call   4062c0 <flatcc_builder_check_required@@Base>
  403bae:	test   eax,eax
  403bb0:	je     403c13 <_start@@Base+0x3b3>
  403bb2:	mov    rdi,rbp
  403bb5:	call   406340 <flatcc_builder_end_table@@Base>
  403bba:	mov    rdi,rbp
  403bbd:	mov    esi,eax
  403bbf:	call   404df0 <flatcc_builder_end_buffer@@Base>
  403bc4:	add    rsp,0x8
  403bc8:	xor    eax,eax
  403bca:	pop    rbx
  403bcb:	pop    rbp
  403bcc:	pop    r12
  403bce:	pop    r13
  403bd0:	pop    r14
  403bd2:	pop    r15
  403bd4:	ret    
  403bd5:	lea    rcx,[rip+0x58a4]        # 409480 <_IO_stdin_used@@Base+0x480>
  403bdc:	lea    rsi,[rip+0x55f5]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403be3:	lea    rdi,[rip+0x570b]        # 4092f5 <_IO_stdin_used@@Base+0x2f5>
  403bea:	mov    edx,0x38
  403bef:	call   403080 <__assert_fail@plt>
  403bf4:	lea    rcx,[rip+0x5875]        # 409470 <_IO_stdin_used@@Base+0x470>
  403bfb:	lea    rsi,[rip+0x55d6]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403c02:	lea    rdi,[rip+0x56ea]        # 4092f3 <_IO_stdin_used@@Base+0x2f3>
  403c09:	mov    edx,0x2a
  403c0e:	call   403080 <__assert_fail@plt>
  403c13:	call   403163 <posix_memalign@plt+0x33>
  403c18:	nop    DWORD PTR [rax+rax*1+0x0]
  403c20:	push   rbp
  403c21:	push   rbx
  403c22:	mov    ebp,edx
  403c24:	mov    rbx,rdi
  403c27:	mov    r8d,0x1
  403c2d:	mov    ecx,0x1
  403c32:	sub    rsp,0x8
  403c36:	mov    edx,DWORD PTR [rdi+0x28]
  403c39:	add    rdx,rsi
  403c3c:	lea    rsi,[rdi+0x68]
  403c40:	mov    rdi,QWORD PTR [rdi+0x40]
  403c44:	call   QWORD PTR [rbx+0x50]
  403c47:	test   eax,eax
  403c49:	jne    403c78 <_start@@Base+0x418>
  403c4b:	mov    edx,DWORD PTR [rbx+0x28]
  403c4e:	mov    rcx,rdx
  403c51:	add    rdx,QWORD PTR [rbx+0x68]
  403c55:	mov    QWORD PTR [rbx+0x18],rdx
  403c59:	mov    edx,DWORD PTR [rbx+0x70]
  403c5c:	sub    edx,ecx
  403c5e:	cmp    ebp,edx
  403c60:	cmovb  edx,ebp
  403c63:	mov    DWORD PTR [rbx+0x24],edx
  403c66:	mov    rdx,QWORD PTR [rbx+0x30]
  403c6a:	mov    DWORD PTR [rdx+0x4],ebp
  403c6d:	add    rsp,0x8
  403c71:	pop    rbx
  403c72:	pop    rbp
  403c73:	ret    
  403c74:	nop    DWORD PTR [rax+0x0]
  403c78:	mov    eax,0xffffffff
  403c7d:	jmp    403c6d <_start@@Base+0x40d>
  403c7f:	nop

0000000000403c80 <flatcc_builder_default_alloc@@Base>:
  403c80:	push   r12
  403c82:	push   rbp
  403c83:	mov    rbp,rsi
  403c86:	push   rbx
  403c87:	sub    rsp,0x10
  403c8b:	test   rdx,rdx
  403c8e:	jne    403cc0 <flatcc_builder_default_alloc@@Base+0x40>
  403c90:	mov    rdi,QWORD PTR [rsi]
  403c93:	xor    eax,eax
  403c95:	test   rdi,rdi
  403c98:	je     403cb7 <flatcc_builder_default_alloc@@Base+0x37>
  403c9a:	mov    DWORD PTR [rsp+0xc],eax
  403c9e:	call   403030 <free@plt>
  403ca3:	mov    eax,DWORD PTR [rsp+0xc]
  403ca7:	mov    QWORD PTR [rbp+0x0],0x0
  403caf:	mov    QWORD PTR [rbp+0x8],0x0
  403cb7:	add    rsp,0x10
  403cbb:	pop    rbx
  403cbc:	pop    rbp
  403cbd:	pop    r12
  403cbf:	ret    
  403cc0:	cmp    r8d,0x4
  403cc4:	je     403d60 <flatcc_builder_default_alloc@@Base+0xe0>
  403cca:	jle    403d70 <flatcc_builder_default_alloc@@Base+0xf0>
  403cd0:	cmp    r8d,0x5
  403cd4:	mov    rbx,rdx
  403cd7:	je     403cf8 <flatcc_builder_default_alloc@@Base+0x78>
  403cd9:	cmp    r8d,0x7
  403cdd:	mov    ebx,0x40
  403ce2:	je     403cf3 <flatcc_builder_default_alloc@@Base+0x73>
  403ce4:	jmp    403d7f <flatcc_builder_default_alloc@@Base+0xff>
  403ce9:	nop    DWORD PTR [rax+0x0]
  403cf0:	add    rbx,rbx
  403cf3:	cmp    rdx,rbx
  403cf6:	ja     403cf0 <flatcc_builder_default_alloc@@Base+0x70>
  403cf8:	mov    rax,QWORD PTR [rbp+0x8]
  403cfc:	cmp    rdx,rax
  403cff:	ja     403d0e <flatcc_builder_default_alloc@@Base+0x8e>
  403d01:	shr    rax,1
  403d04:	mov    rdx,rax
  403d07:	xor    eax,eax
  403d09:	cmp    rdx,rbx
  403d0c:	jae    403cb7 <flatcc_builder_default_alloc@@Base+0x37>
  403d0e:	mov    rdi,QWORD PTR [rbp+0x0]
  403d12:	mov    rsi,rbx
  403d15:	mov    DWORD PTR [rsp+0xc],ecx
  403d19:	call   4030f0 <realloc@plt>
  403d1e:	test   rax,rax
  403d21:	mov    r12,rax
  403d24:	je     403d89 <flatcc_builder_default_alloc@@Base+0x109>
  403d26:	mov    ecx,DWORD PTR [rsp+0xc]
  403d2a:	test   ecx,ecx
  403d2c:	je     403d48 <flatcc_builder_default_alloc@@Base+0xc8>
  403d2e:	mov    rax,QWORD PTR [rbp+0x8]
  403d32:	cmp    rax,rbx
  403d35:	jae    403d48 <flatcc_builder_default_alloc@@Base+0xc8>
  403d37:	mov    rdx,rbx
  403d3a:	lea    rdi,[r12+rax*1]
  403d3e:	xor    esi,esi
  403d40:	sub    rdx,rax
  403d43:	call   403090 <memset@plt>
  403d48:	mov    QWORD PTR [rbp+0x0],r12
  403d4c:	mov    QWORD PTR [rbp+0x8],rbx
  403d50:	add    rsp,0x10
  403d54:	pop    rbx
  403d55:	xor    eax,eax
  403d57:	pop    rbp
  403d58:	pop    r12
  403d5a:	ret    
  403d5b:	nop    DWORD PTR [rax+rax*1+0x0]
  403d60:	mov    ebx,0x120
  403d65:	jmp    403cf3 <flatcc_builder_default_alloc@@Base+0x73>
  403d67:	nop    WORD PTR [rax+rax*1+0x0]
  403d70:	cmp    r8d,0x1
  403d74:	mov    ebx,0x100
  403d79:	je     403cf3 <flatcc_builder_default_alloc@@Base+0x73>
  403d7f:	mov    ebx,0x20
  403d84:	jmp    403cf3 <flatcc_builder_default_alloc@@Base+0x73>
  403d89:	mov    eax,0xffffffff
  403d8e:	jmp    403cb7 <flatcc_builder_default_alloc@@Base+0x37>
  403d93:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403d9e:	xchg   ax,ax
  403da0:	push   rbx
  403da1:	mov    r9,rdi
  403da4:	sub    rsp,0xa0
  403dab:	mov    rbx,QWORD PTR fs:0x28
  403db4:	mov    QWORD PTR [rsp+0x98],rbx
  403dbc:	xor    ebx,ebx
  403dbe:	test   dx,dx
  403dc1:	je     403e20 <flatcc_builder_default_alloc@@Base+0x1a0>
  403dc3:	mov    eax,edx
  403dc5:	movzx  edx,dx
  403dc8:	movzx  edi,WORD PTR [rsi]
  403dcb:	cmp    di,0x3
  403dcf:	ja     403dde <flatcc_builder_default_alloc@@Base+0x15e>
  403dd1:	mov    edi,0x4
  403dd6:	mov    WORD PTR [rsi],di
  403dd9:	mov    edi,0x4
  403dde:	cmp    ax,di
  403de1:	jbe    403de6 <flatcc_builder_default_alloc@@Base+0x166>
  403de3:	mov    WORD PTR [rsi],ax
  403de6:	test   ecx,ecx
  403de8:	jne    403df8 <flatcc_builder_default_alloc@@Base+0x178>
  403dea:	mov    ebx,DWORD PTR [r9+0xf4]
  403df1:	sub    edx,0x1
  403df4:	and    edx,ebx
  403df6:	jne    403e40 <flatcc_builder_default_alloc@@Base+0x1c0>
  403df8:	xor    eax,eax
  403dfa:	mov    rbx,QWORD PTR [rsp+0x98]
  403e02:	xor    rbx,QWORD PTR fs:0x28
  403e0b:	jne    403ead <flatcc_builder_default_alloc@@Base+0x22d>
  403e11:	add    rsp,0xa0
  403e18:	pop    rbx
  403e19:	ret    
  403e1a:	nop    WORD PTR [rax+rax*1+0x0]
  403e20:	movzx  eax,WORD PTR [rdi+0xec]
  403e27:	test   ax,ax
  403e2a:	movzx  edx,ax
  403e2d:	jne    403dc8 <flatcc_builder_default_alloc@@Base+0x148>
  403e2f:	mov    edx,0x1
  403e34:	mov    eax,0x1
  403e39:	jmp    403dc8 <flatcc_builder_default_alloc@@Base+0x148>
  403e3b:	nop    DWORD PTR [rax+rax*1+0x0]
  403e40:	mov    rax,0x409fa0
  403e47:	movsxd r8,edx
  403e4a:	add    edx,ebx
  403e4c:	cmp    ebx,edx
  403e4e:	mov    QWORD PTR [rsp],r8
  403e52:	mov    QWORD PTR [rsp+0x18],r8
  403e57:	mov    DWORD PTR [rsp+0x8],0x1
  403e5f:	mov    DWORD PTR [r9+0xf4],edx
  403e66:	mov    QWORD PTR [rsp+0x10],rax
  403e6b:	jg     403eb2 <flatcc_builder_default_alloc@@Base+0x232>
  403e6d:	lea    rsi,[rsp+0x10]
  403e72:	mov    rdi,QWORD PTR [r9+0x38]
  403e76:	mov    ecx,ebx
  403e78:	mov    edx,0x1
  403e7d:	call   QWORD PTR [r9+0x48]
  403e81:	test   eax,eax
  403e83:	jne    403eb7 <flatcc_builder_default_alloc@@Base+0x237>
  403e85:	cmp    ebx,0xffffffff
  403e88:	jne    403df8 <flatcc_builder_default_alloc@@Base+0x178>
  403e8e:	lea    rcx,[rip+0x607b]        # 409f10 <_IO_stdin_used@@Base+0xf10>
  403e95:	lea    rsi,[rip+0x5624]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  403e9c:	lea    rdi,[rip+0x59b4]        # 409857 <_IO_stdin_used@@Base+0x857>
  403ea3:	mov    edx,0x2be
  403ea8:	call   403080 <__assert_fail@plt>
  403ead:	call   403060 <__stack_chk_fail@plt>
  403eb2:	call   4031a9 <posix_memalign@plt+0x79>
  403eb7:	lea    rcx,[rip+0x6042]        # 409f00 <_IO_stdin_used@@Base+0xf00>
  403ebe:	lea    rsi,[rip+0x55fb]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  403ec5:	lea    rdi,[rip+0x598b]        # 409857 <_IO_stdin_used@@Base+0x857>
  403ecc:	mov    edx,0x2a5
  403ed1:	call   403080 <__assert_fail@plt>
  403ed6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403ee0:	push   r12
  403ee2:	push   rbp
  403ee3:	mov    r12d,esi
  403ee6:	push   rbx
  403ee7:	movsxd rax,DWORD PTR [rdi+0x104]
  403eee:	mov    rbx,rdi
  403ef1:	lea    edx,[rax+0x1]
  403ef4:	cmp    edx,DWORD PTR [rdi+0x108]
  403efa:	mov    DWORD PTR [rdi+0x104],edx
  403f00:	jle    403f80 <flatcc_builder_default_alloc@@Base+0x300>
  403f02:	mov    ecx,DWORD PTR [rdi+0x120]
  403f08:	test   ecx,ecx
  403f0a:	jle    403f14 <flatcc_builder_default_alloc@@Base+0x294>
  403f0c:	cmp    edx,ecx
  403f0e:	jg     404000 <flatcc_builder_default_alloc@@Base+0x380>
  403f14:	lea    rcx,[rax+rax*8]
  403f18:	lea    rbp,[rcx*4+0x0]
  403f20:	lea    rdx,[rbp+0x24]
  403f24:	cmp    rdx,QWORD PTR [rbx+0xa0]
  403f2b:	ja     403fd8 <flatcc_builder_default_alloc@@Base+0x358>
  403f31:	mov    rcx,rbp
  403f34:	add    rcx,QWORD PTR [rbx+0x98]
  403f3b:	test   rcx,rcx
  403f3e:	mov    QWORD PTR [rbx+0x30],rcx
  403f42:	je     404000 <flatcc_builder_default_alloc@@Base+0x380>
  403f48:	movabs rdx,0xe38e38e38e38e38f
  403f52:	mov    rax,rdx
  403f55:	mul    QWORD PTR [rbx+0xa0]
  403f5c:	mov    eax,DWORD PTR [rbx+0x120]
  403f62:	shr    rdx,0x5
  403f66:	test   eax,eax
  403f68:	mov    DWORD PTR [rbx+0x108],edx
  403f6e:	jle    403fd0 <flatcc_builder_default_alloc@@Base+0x350>
  403f70:	cmp    eax,edx
  403f72:	jge    403fd0 <flatcc_builder_default_alloc@@Base+0x350>
  403f74:	mov    DWORD PTR [rbx+0x108],eax
  403f7a:	mov    rax,rcx
  403f7d:	jmp    403f8c <flatcc_builder_default_alloc@@Base+0x30c>
  403f7f:	nop
  403f80:	mov    rax,QWORD PTR [rdi+0x30]
  403f84:	add    rax,0x24
  403f88:	mov    QWORD PTR [rdi+0x30],rax
  403f8c:	movzx  edx,WORD PTR [rbx+0xea]
  403f93:	mov    ecx,DWORD PTR [rbx+0x20]
  403f96:	mov    DWORD PTR [rax+0x8],ecx
  403f99:	mov    WORD PTR [rax+0xc],dx
  403f9d:	mov    edx,DWORD PTR [rbx+0x28]
  403fa0:	mov    WORD PTR [rbx+0xea],r12w
  403fa8:	mov    DWORD PTR [rax+0x4],0xfffffffc
  403faf:	mov    DWORD PTR [rax],edx
  403fb1:	lea    eax,[rcx+rdx*1+0x7]
  403fb5:	mov    DWORD PTR [rbx+0x20],0x0
  403fbc:	and    eax,0xfffffff8
  403fbf:	mov    DWORD PTR [rbx+0x28],eax
  403fc2:	xor    eax,eax
  403fc4:	pop    rbx
  403fc5:	pop    rbp
  403fc6:	pop    r12
  403fc8:	ret    
  403fc9:	nop    DWORD PTR [rax+0x0]
  403fd0:	mov    rax,rcx
  403fd3:	jmp    403f8c <flatcc_builder_default_alloc@@Base+0x30c>
  403fd5:	nop    DWORD PTR [rax]
  403fd8:	xor    ecx,ecx
  403fda:	lea    rsi,[rbx+0x98]
  403fe1:	mov    rdi,QWORD PTR [rbx+0x40]
  403fe5:	mov    r8d,0x4
  403feb:	call   QWORD PTR [rbx+0x50]
  403fee:	test   eax,eax
  403ff0:	je     403f31 <flatcc_builder_default_alloc@@Base+0x2b1>
  403ff6:	call   403186 <posix_memalign@plt+0x56>
  403ffb:	nop    DWORD PTR [rax+rax*1+0x0]
  404000:	mov    eax,0xffffffff
  404005:	jmp    403fc4 <flatcc_builder_default_alloc@@Base+0x344>
  404007:	nop    WORD PTR [rax+rax*1+0x0]
  404010:	push   rbp
  404011:	push   rbx
  404012:	sub    rsp,0xb8
  404019:	mov    rax,QWORD PTR fs:0x28
  404022:	mov    QWORD PTR [rsp+0xa8],rax
  40402a:	xor    eax,eax
  40402c:	cmp    edx,0x3fffffff
  404032:	ja     4041c8 <flatcc_builder_default_alloc@@Base+0x548>
  404038:	cmp    WORD PTR [rdi+0xe8],0x3
  404040:	mov    rbx,rdi
  404043:	mov    r10d,edx
  404046:	ja     404054 <flatcc_builder_default_alloc@@Base+0x3d4>
  404048:	mov    eax,0x4
  40404d:	mov    WORD PTR [rdi+0xe8],ax
  404054:	mov    eax,DWORD PTR [rbx+0xf0]
  40405a:	lea    r9d,[rdx*4+0x0]
  404062:	lea    r8,[rsp+0xc]
  404067:	mov    DWORD PTR [rsp+0xc],edx
  40406b:	mov    QWORD PTR [rsp+0x10],0x4
  404074:	mov    QWORD PTR [rsp+0x20],r8
  404079:	mov    QWORD PTR [rsp+0x28],0x4
  404082:	mov    r8d,0x4
  404088:	mov    edi,eax
  40408a:	mov    DWORD PTR [rsp+0x18],0x1
  404092:	and    edi,0x3
  404095:	test   r9d,r9d
  404098:	je     4040b5 <flatcc_builder_default_alloc@@Base+0x435>
  40409a:	lea    r8,[r9+0x4]
  40409e:	mov    QWORD PTR [rsp+0x30],rsi
  4040a3:	mov    QWORD PTR [rsp+0x38],r9
  4040a8:	mov    DWORD PTR [rsp+0x18],0x2
  4040b0:	mov    QWORD PTR [rsp+0x10],r8
  4040b5:	test   edi,edi
  4040b7:	jne    404190 <flatcc_builder_default_alloc@@Base+0x510>
  4040bd:	mov    r11d,eax
  4040c0:	sub    r11d,r8d
  4040c3:	test   edx,edx
  4040c5:	je     404136 <flatcc_builder_default_alloc@@Base+0x4b6>
  4040c7:	mov    edx,0xfffffffc
  4040cc:	xor    eax,eax
  4040ce:	jmp    4040f7 <flatcc_builder_default_alloc@@Base+0x477>
  4040d0:	mov    r9d,edx
  4040d3:	sub    r9d,r11d
  4040d6:	add    edi,r9d
  4040d9:	test   rcx,rcx
  4040dc:	mov    DWORD PTR [rsi+rax*4],edi
  4040df:	je     4040eb <flatcc_builder_default_alloc@@Base+0x46b>
  4040e1:	cmp    BYTE PTR [rcx+rax*1],0x0
  4040e5:	je     4041eb <flatcc_builder_default_alloc@@Base+0x56b>
  4040eb:	add    rax,0x1
  4040ef:	sub    edx,0x4
  4040f2:	cmp    r10d,eax
  4040f5:	jbe    404130 <flatcc_builder_default_alloc@@Base+0x4b0>
  4040f7:	mov    edi,DWORD PTR [rsi+rax*4]
  4040fa:	test   edi,edi
  4040fc:	jne    4040d0 <flatcc_builder_default_alloc@@Base+0x450>
  4040fe:	test   rcx,rcx
  404101:	je     4041cc <flatcc_builder_default_alloc@@Base+0x54c>
  404107:	cmp    BYTE PTR [rcx+rax*1],0x0
  40410b:	je     4040eb <flatcc_builder_default_alloc@@Base+0x46b>
  40410d:	lea    rcx,[rip+0x5a5c]        # 409b70 <_IO_stdin_used@@Base+0xb70>
  404114:	lea    rsi,[rip+0x53a5]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  40411b:	lea    rdi,[rip+0x5737]        # 409859 <_IO_stdin_used@@Base+0x859>
  404122:	mov    edx,0x5b5
  404127:	call   403080 <__assert_fail@plt>
  40412c:	nop    DWORD PTR [rax+0x0]
  404130:	mov    eax,DWORD PTR [rbx+0xf0]
  404136:	mov    ebp,eax
  404138:	sub    ebp,r8d
  40413b:	cmp    ebp,eax
  40413d:	jge    40420a <flatcc_builder_default_alloc@@Base+0x58a>
  404143:	lea    rsi,[rsp+0x20]
  404148:	mov    rdi,QWORD PTR [rbx+0x38]
  40414c:	mov    ecx,ebp
  40414e:	mov    edx,DWORD PTR [rsp+0x18]
  404152:	call   QWORD PTR [rbx+0x48]
  404155:	test   eax,eax
  404157:	jne    40422e <flatcc_builder_default_alloc@@Base+0x5ae>
  40415d:	mov    DWORD PTR [rbx+0xf0],ebp
  404163:	mov    rbx,QWORD PTR [rsp+0xa8]
  40416b:	xor    rbx,QWORD PTR fs:0x28
  404174:	mov    eax,ebp
  404176:	jne    404229 <flatcc_builder_default_alloc@@Base+0x5a9>
  40417c:	add    rsp,0xb8
  404183:	pop    rbx
  404184:	pop    rbp
  404185:	ret    
  404186:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404190:	movsxd r11,DWORD PTR [rsp+0x18]
  404195:	mov    rbp,0x409fa0
  40419c:	add    r8,rdi
  40419f:	mov    QWORD PTR [rsp+0x10],r8
  4041a4:	mov    r9,r11
  4041a7:	shl    r11,0x4
  4041ab:	add    r9d,0x1
  4041af:	mov    QWORD PTR [rsp+r11*1+0x20],rbp
  4041b4:	mov    QWORD PTR [rsp+r11*1+0x28],rdi
  4041b9:	mov    DWORD PTR [rsp+0x18],r9d
  4041be:	jmp    4040bd <flatcc_builder_default_alloc@@Base+0x43d>
  4041c3:	nop    DWORD PTR [rax+rax*1+0x0]
  4041c8:	xor    ebp,ebp
  4041ca:	jmp    404163 <flatcc_builder_default_alloc@@Base+0x4e3>
  4041cc:	lea    rcx,[rip+0x599d]        # 409b70 <_IO_stdin_used@@Base+0xb70>
  4041d3:	lea    rsi,[rip+0x52e6]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4041da:	lea    rdi,[rip+0x5676]        # 409857 <_IO_stdin_used@@Base+0x857>
  4041e1:	mov    edx,0x5b7
  4041e6:	call   403080 <__assert_fail@plt>
  4041eb:	lea    rcx,[rip+0x597e]        # 409b70 <_IO_stdin_used@@Base+0xb70>
  4041f2:	lea    rsi,[rip+0x52c7]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4041f9:	lea    rdi,[rip+0x564b]        # 40984b <_IO_stdin_used@@Base+0x84b>
  404200:	mov    edx,0x5b1
  404205:	call   403080 <__assert_fail@plt>
  40420a:	lea    rcx,[rip+0x5cdf]        # 409ef0 <_IO_stdin_used@@Base+0xef0>
  404211:	lea    rsi,[rip+0x52a8]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  404218:	lea    rdi,[rip+0x5638]        # 409857 <_IO_stdin_used@@Base+0x857>
  40421f:	mov    edx,0x287
  404224:	call   403080 <__assert_fail@plt>
  404229:	call   403060 <__stack_chk_fail@plt>
  40422e:	call   4031cc <posix_memalign@plt+0x9c>
  404233:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40423e:	xchg   ax,ax

0000000000404240 <flatcc_builder_flush_vtable_cache@@Base>:
  404240:	cmp    QWORD PTR [rdi+0xd8],0x0
  404248:	jne    404250 <flatcc_builder_flush_vtable_cache@@Base+0x10>
  40424a:	ret    
  40424b:	nop    DWORD PTR [rax+rax*1+0x0]
  404250:	push   rbx
  404251:	mov    rbx,rdi
  404254:	mov    rdi,QWORD PTR [rdi+0xa8]
  40425b:	mov    rdx,QWORD PTR [rbx+0xb0]
  404262:	xor    esi,esi
  404264:	call   403090 <memset@plt>
  404269:	mov    DWORD PTR [rbx+0xe4],0x10
  404273:	mov    DWORD PTR [rbx+0xe0],0x0
  40427d:	pop    rbx
  40427e:	ret    
  40427f:	nop

0000000000404280 <flatcc_builder_custom_init@@Base>:
  404280:	mov    QWORD PTR [rdi],0x0
  404287:	mov    QWORD PTR [rdi+0x180],0x0
  404292:	mov    r9,rdi
  404295:	lea    rdi,[rdi+0x8]
  404299:	mov    r10,rcx
  40429c:	mov    rcx,r9
  40429f:	xor    eax,eax
  4042a1:	and    rdi,0xfffffffffffffff8
  4042a5:	sub    rcx,rdi
  4042a8:	add    ecx,0x188
  4042ae:	shr    ecx,0x3
  4042b1:	test   rsi,rsi
  4042b4:	rep stos QWORD PTR es:[rdi],rax
  4042b7:	je     4042e8 <flatcc_builder_custom_init@@Base+0x68>
  4042b9:	test   r10,r10
  4042bc:	je     4042d8 <flatcc_builder_custom_init@@Base+0x58>
  4042be:	mov    QWORD PTR [r9+0x40],r8
  4042c2:	mov    QWORD PTR [r9+0x50],r10
  4042c6:	xor    eax,eax
  4042c8:	mov    QWORD PTR [r9+0x38],rdx
  4042cc:	mov    QWORD PTR [r9+0x48],rsi
  4042d0:	ret    
  4042d1:	nop    DWORD PTR [rax+0x0]
  4042d8:	mov    r10,0x403c80
  4042df:	jmp    4042be <flatcc_builder_custom_init@@Base+0x3e>
  4042e1:	nop    DWORD PTR [rax+0x0]
  4042e8:	mov    DWORD PTR [r9+0x128],0x1
  4042f3:	lea    rdx,[r9+0x130]
  4042fa:	mov    rsi,0x407d30
  404301:	jmp    4042b9 <flatcc_builder_custom_init@@Base+0x39>
  404303:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40430e:	xchg   ax,ax

0000000000404310 <flatcc_builder_init@@Base>:
  404310:	xor    r8d,r8d
  404313:	xor    ecx,ecx
  404315:	xor    edx,edx
  404317:	xor    esi,esi
  404319:	jmp    404280 <flatcc_builder_custom_init@@Base>
  40431e:	xchg   ax,ax

0000000000404320 <flatcc_builder_custom_reset@@Base>:
  404320:	push   r14
  404322:	mov    r14d,esi
  404325:	push   r13
  404327:	mov    r13d,edx
  40432a:	push   r12
  40432c:	mov    r12,rdi
  40432f:	push   rbp
  404330:	xor    ebp,ebp
  404332:	push   rbx
  404333:	lea    rbx,[rdi+0x58]
  404337:	jmp    404386 <flatcc_builder_custom_reset@@Base+0x66>
  404339:	nop    DWORD PTR [rax+0x0]
  404340:	cmp    ebp,0x5
  404343:	je     40436f <flatcc_builder_custom_reset@@Base+0x4f>
  404345:	test   r13d,r13d
  404348:	je     40436f <flatcc_builder_custom_reset@@Base+0x4f>
  40434a:	mov    rdi,QWORD PTR [r12+0x40]
  40434f:	mov    r8d,ebp
  404352:	mov    ecx,0x1
  404357:	mov    edx,0x1
  40435c:	mov    rsi,rbx
  40435f:	call   QWORD PTR [r12+0x50]
  404364:	test   eax,eax
  404366:	jne    4044c0 <flatcc_builder_custom_reset@@Base+0x1a0>
  40436c:	mov    rdi,QWORD PTR [rbx]
  40436f:	mov    rdx,QWORD PTR [rbx+0x8]
  404373:	xor    esi,esi
  404375:	call   403090 <memset@plt>
  40437a:	add    ebp,0x1
  40437d:	add    rbx,0x10
  404381:	cmp    ebp,0x8
  404384:	je     4043b8 <flatcc_builder_custom_reset@@Base+0x98>
  404386:	mov    rdi,QWORD PTR [rbx]
  404389:	test   rdi,rdi
  40438c:	jne    404340 <flatcc_builder_custom_reset@@Base+0x20>
  40438e:	cmp    QWORD PTR [rbx+0x8],0x0
  404393:	je     40437a <flatcc_builder_custom_reset@@Base+0x5a>
  404395:	lea    rcx,[rip+0x5be4]        # 409f80 <_IO_stdin_used@@Base+0xf80>
  40439c:	lea    rsi,[rip+0x511d]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4043a3:	lea    rdi,[rip+0x54bd]        # 409867 <_IO_stdin_used@@Base+0x867>
  4043aa:	mov    edx,0x1b2
  4043af:	call   403080 <__assert_fail@plt>
  4043b4:	nop    DWORD PTR [rax+0x0]
  4043b8:	mov    edx,DWORD PTR [r12+0xe4]
  4043c0:	mov    DWORD PTR [r12+0xe0],0x0
  4043cc:	test   edx,edx
  4043ce:	je     4043dc <flatcc_builder_custom_reset@@Base+0xbc>
  4043d0:	mov    DWORD PTR [r12+0xe4],0x10
  4043dc:	xor    eax,eax
  4043de:	test   r14d,r14d
  4043e1:	mov    DWORD PTR [r12+0xf0],0x0
  4043ed:	mov    WORD PTR [r12+0xe8],ax
  4043f6:	mov    rax,QWORD PTR [r12+0x68]
  4043fb:	mov    DWORD PTR [r12+0xf4],0x0
  404407:	mov    DWORD PTR [r12+0x104],0x0
  404413:	mov    DWORD PTR [r12+0x108],0x0
  40441f:	mov    DWORD PTR [r12+0x20],0x0
  404428:	mov    QWORD PTR [r12+0x18],rax
  40442d:	mov    rax,QWORD PTR [r12+0x88]
  404435:	mov    DWORD PTR [r12+0x24],0x0
  40443e:	mov    DWORD PTR [r12+0xfc],0x0
  40444a:	mov    DWORD PTR [r12+0x100],0x0
  404456:	mov    QWORD PTR [r12+0x30],0x0
  40445f:	mov    QWORD PTR [r12],rax
  404463:	mov    rax,QWORD PTR [r12+0x58]
  404468:	mov    QWORD PTR [r12+0x8],rax
  40446d:	jne    404498 <flatcc_builder_custom_reset@@Base+0x178>
  40446f:	mov    eax,DWORD PTR [r12+0x128]
  404477:	test   eax,eax
  404479:	je     40448a <flatcc_builder_custom_reset@@Base+0x16a>
  40447b:	lea    rdi,[r12+0x130]
  404483:	call   407bc0 <flatcc_emitter_reset@@Base>
  404488:	xor    eax,eax
  40448a:	pop    rbx
  40448b:	pop    rbp
  40448c:	pop    r12
  40448e:	pop    r13
  404490:	pop    r14
  404492:	ret    
  404493:	nop    DWORD PTR [rax+rax*1+0x0]
  404498:	mov    QWORD PTR [r12+0x118],0x0
  4044a4:	mov    DWORD PTR [r12+0x120],0x0
  4044b0:	mov    DWORD PTR [r12+0x124],0x0
  4044bc:	jmp    40446f <flatcc_builder_custom_reset@@Base+0x14f>
  4044be:	xchg   ax,ax
  4044c0:	mov    eax,0xffffffff
  4044c5:	jmp    40448a <flatcc_builder_custom_reset@@Base+0x16a>
  4044c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004044d0 <flatcc_builder_reset@@Base>:
  4044d0:	xor    edx,edx
  4044d2:	xor    esi,esi
  4044d4:	jmp    404320 <flatcc_builder_custom_reset@@Base>
  4044d9:	nop    DWORD PTR [rax+0x0]

00000000004044e0 <flatcc_builder_clear@@Base>:
  4044e0:	push   r12
  4044e2:	lea    r12,[rdi+0x58]
  4044e6:	push   rbp
  4044e7:	xor    ebp,ebp
  4044e9:	push   rbx
  4044ea:	mov    rbx,rdi
  4044ed:	nop    DWORD PTR [rax]
  4044f0:	mov    r8d,ebp
  4044f3:	add    ebp,0x1
  4044f6:	xor    ecx,ecx
  4044f8:	xor    edx,edx
  4044fa:	mov    rsi,r12
  4044fd:	mov    rdi,QWORD PTR [rbx+0x40]
  404501:	add    r12,0x10
  404505:	call   QWORD PTR [rbx+0x50]
  404508:	cmp    ebp,0x8
  40450b:	jne    4044f0 <flatcc_builder_clear@@Base+0x10>
  40450d:	mov    eax,DWORD PTR [rbx+0x128]
  404513:	test   eax,eax
  404515:	je     404523 <flatcc_builder_clear@@Base+0x43>
  404517:	lea    rdi,[rbx+0x130]
  40451e:	call   407ca0 <flatcc_emitter_clear@@Base>
  404523:	lea    rdi,[rbx+0x8]
  404527:	mov    QWORD PTR [rbx],0x0
  40452e:	mov    QWORD PTR [rbx+0x180],0x0
  404539:	xor    eax,eax
  40453b:	and    rdi,0xfffffffffffffff8
  40453f:	sub    rbx,rdi
  404542:	lea    ecx,[rbx+0x188]
  404548:	shr    ecx,0x3
  40454b:	rep stos QWORD PTR es:[rdi],rax
  40454e:	pop    rbx
  40454f:	pop    rbp
  404550:	pop    r12
  404552:	ret    
  404553:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40455e:	xchg   ax,ax

0000000000404560 <flatcc_builder_enter_user_frame_ptr@@Base>:
  404560:	push   r12
  404562:	push   rbp
  404563:	mov    r12,rdi
  404566:	push   rbx
  404567:	lea    rbx,[rsi+0x7]
  40456b:	mov    rbp,QWORD PTR [rdi+0x180]
  404572:	and    rbx,0xfffffffffffffff8
  404576:	add    rbx,0x8
  40457a:	lea    rdx,[rbx+rbp*1]
  40457e:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404585:	ja     4045d8 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
  404587:	add    rbp,QWORD PTR [r12+0xc8]
  40458f:	je     404600 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
  404591:	mov    rdx,rbx
  404594:	xor    esi,esi
  404596:	mov    rdi,rbp
  404599:	call   403090 <memset@plt>
  40459e:	mov    rax,QWORD PTR [r12+0x178]
  4045a6:	mov    QWORD PTR [rbp+0x0],rax
  4045aa:	mov    rax,QWORD PTR [r12+0x180]
  4045b2:	lea    rdx,[rax+0x8]
  4045b6:	add    rbx,rax
  4045b9:	lea    rax,[rbp+0x8]
  4045bd:	mov    QWORD PTR [r12+0x180],rbx
  4045c5:	mov    QWORD PTR [r12+0x178],rdx
  4045cd:	pop    rbx
  4045ce:	pop    rbp
  4045cf:	pop    r12
  4045d1:	ret    
  4045d2:	nop    WORD PTR [rax+rax*1+0x0]
  4045d8:	lea    rsi,[rdi+0xc8]
  4045df:	xor    ecx,ecx
  4045e1:	mov    rdi,QWORD PTR [rdi+0x40]
  4045e5:	mov    r8d,0x7
  4045eb:	call   QWORD PTR [r12+0x50]
  4045f0:	test   eax,eax
  4045f2:	je     404587 <flatcc_builder_enter_user_frame_ptr@@Base+0x27>
  4045f4:	call   403186 <posix_memalign@plt+0x56>
  4045f9:	nop    DWORD PTR [rax+0x0]
  404600:	xor    eax,eax
  404602:	jmp    4045cd <flatcc_builder_enter_user_frame_ptr@@Base+0x6d>
  404604:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40460f:	nop

0000000000404610 <flatcc_builder_enter_user_frame@@Base>:
  404610:	push   r12
  404612:	push   rbp
  404613:	mov    r12,rdi
  404616:	push   rbx
  404617:	lea    rbx,[rsi+0x7]
  40461b:	mov    rbp,QWORD PTR [rdi+0x180]
  404622:	and    rbx,0xfffffffffffffff8
  404626:	add    rbx,0x8
  40462a:	lea    rdx,[rbx+rbp*1]
  40462e:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404635:	ja     404680 <flatcc_builder_enter_user_frame@@Base+0x70>
  404637:	xor    eax,eax
  404639:	add    rbp,QWORD PTR [r12+0xc8]
  404641:	je     40467b <flatcc_builder_enter_user_frame@@Base+0x6b>
  404643:	mov    rdx,rbx
  404646:	xor    esi,esi
  404648:	mov    rdi,rbp
  40464b:	call   403090 <memset@plt>
  404650:	mov    rax,QWORD PTR [r12+0x178]
  404658:	mov    QWORD PTR [rbp+0x0],rax
  40465c:	mov    rdx,QWORD PTR [r12+0x180]
  404664:	lea    rax,[rdx+0x8]
  404668:	add    rbx,rdx
  40466b:	mov    QWORD PTR [r12+0x180],rbx
  404673:	mov    QWORD PTR [r12+0x178],rax
  40467b:	pop    rbx
  40467c:	pop    rbp
  40467d:	pop    r12
  40467f:	ret    
  404680:	lea    rsi,[rdi+0xc8]
  404687:	xor    ecx,ecx
  404689:	mov    rdi,QWORD PTR [rdi+0x40]
  40468d:	mov    r8d,0x7
  404693:	call   QWORD PTR [r12+0x50]
  404698:	test   eax,eax
  40469a:	je     404637 <flatcc_builder_enter_user_frame@@Base+0x27>
  40469c:	call   403186 <posix_memalign@plt+0x56>
  4046a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4046ac:	nop    DWORD PTR [rax+0x0]

00000000004046b0 <flatcc_builder_exit_user_frame@@Base>:
  4046b0:	mov    rax,QWORD PTR [rdi+0x178]
  4046b7:	test   rax,rax
  4046ba:	je     4046dc <flatcc_builder_exit_user_frame@@Base+0x2c>
  4046bc:	mov    edx,eax
  4046be:	add    rdx,QWORD PTR [rdi+0xc8]
  4046c5:	sub    rax,0x8
  4046c9:	mov    QWORD PTR [rdi+0x180],rax
  4046d0:	mov    rax,QWORD PTR [rdx-0x8]
  4046d4:	mov    QWORD PTR [rdi+0x178],rax
  4046db:	ret    
  4046dc:	lea    rcx,[rip+0x586d]        # 409f50 <_IO_stdin_used@@Base+0xf50>
  4046e3:	lea    rsi,[rip+0x4dd6]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4046ea:	lea    rdi,[rip+0x5188]        # 409879 <_IO_stdin_used@@Base+0x879>
  4046f1:	sub    rsp,0x8
  4046f5:	mov    edx,0x21e
  4046fa:	call   403080 <__assert_fail@plt>
  4046ff:	nop

0000000000404700 <flatcc_builder_exit_user_frame_at@@Base>:
  404700:	cmp    QWORD PTR [rdi+0x178],rsi
  404707:	jb     404715 <flatcc_builder_exit_user_frame_at@@Base+0x15>
  404709:	mov    QWORD PTR [rdi+0x178],rsi
  404710:	jmp    4046b0 <flatcc_builder_exit_user_frame@@Base>
  404715:	lea    rcx,[rip+0x5804]        # 409f20 <_IO_stdin_used@@Base+0xf20>
  40471c:	lea    rsi,[rip+0x4d9d]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  404723:	lea    rdi,[rip+0x4df6]        # 409520 <_IO_stdin_used@@Base+0x520>
  40472a:	sub    rsp,0x8
  40472e:	mov    edx,0x227
  404733:	call   403080 <__assert_fail@plt>
  404738:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404740 <flatcc_builder_get_current_user_frame@@Base>:
  404740:	mov    rax,QWORD PTR [rdi+0x178]
  404747:	ret    
  404748:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404750 <flatcc_builder_get_user_frame_ptr@@Base>:
  404750:	mov    eax,esi
  404752:	add    rax,QWORD PTR [rdi+0xc8]
  404759:	ret    
  40475a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404760 <flatcc_builder_embed_buffer@@Base>:
  404760:	push   r13
  404762:	push   r12
  404764:	mov    r12,rcx
  404767:	push   rbp
  404768:	push   rbx
  404769:	xor    ecx,ecx
  40476b:	mov    rbp,rdx
  40476e:	movzx  edx,si
  404771:	mov    rbx,rdi
  404774:	sub    rsp,0xc8
  40477b:	mov    r13d,r9d
  40477e:	mov    WORD PTR [rsp+0xc],r8w
  404784:	mov    r8d,DWORD PTR [rdi+0x100]
  40478b:	lea    rsi,[rsp+0xc]
  404790:	mov    rax,QWORD PTR fs:0x28
  404799:	mov    QWORD PTR [rsp+0xb8],rax
  4047a1:	xor    eax,eax
  4047a3:	test   r8d,r8d
  4047a6:	setne  cl
  4047a9:	call   403da0 <flatcc_builder_default_alloc@@Base+0x120>
  4047ae:	test   eax,eax
  4047b0:	jne    4048f8 <flatcc_builder_embed_buffer@@Base+0x198>
  4047b6:	mov    edx,DWORD PTR [rbx+0xf0]
  4047bc:	movzx  ecx,WORD PTR [rsp+0xc]
  4047c1:	xor    esi,esi
  4047c3:	and    r13d,0x2
  4047c7:	mov    QWORD PTR [rsp+0x20],0x0
  4047d0:	mov    DWORD PTR [rsp+0x28],0x0
  4047d8:	setne  sil
  4047dc:	xor    r8d,r8d
  4047df:	mov    eax,edx
  4047e1:	shl    esi,0x2
  4047e4:	sub    eax,r12d
  4047e7:	sub    ecx,0x1
  4047ea:	sub    eax,esi
  4047ec:	and    eax,ecx
  4047ee:	lea    ecx,[rax+r12*1]
  4047f2:	mov    DWORD PTR [rsp+0x1c],ecx
  4047f6:	mov    ecx,DWORD PTR [rbx+0x100]
  4047fc:	test   ecx,ecx
  4047fe:	je     40482a <flatcc_builder_embed_buffer@@Base+0xca>
  404800:	lea    rcx,[rsp+0x1c]
  404805:	mov    QWORD PTR [rsp+0x20],0x4
  40480e:	mov    QWORD PTR [rsp+0x38],0x4
  404817:	mov    DWORD PTR [rsp+0x28],0x1
  40481f:	mov    r8d,0x4
  404825:	mov    QWORD PTR [rsp+0x30],rcx
  40482a:	test   r12,r12
  40482d:	je     404854 <flatcc_builder_embed_buffer@@Base+0xf4>
  40482f:	movsxd rsi,DWORD PTR [rsp+0x28]
  404834:	add    r8,r12
  404837:	mov    QWORD PTR [rsp+0x20],r8
  40483c:	mov    rcx,rsi
  40483f:	shl    rsi,0x4
  404843:	add    ecx,0x1
  404846:	mov    QWORD PTR [rsp+rsi*1+0x30],rbp
  40484b:	mov    QWORD PTR [rsp+rsi*1+0x38],r12
  404850:	mov    DWORD PTR [rsp+0x28],ecx
  404854:	test   eax,eax
  404856:	jne    4048c0 <flatcc_builder_embed_buffer@@Base+0x160>
  404858:	mov    ebp,edx
  40485a:	sub    ebp,r8d
  40485d:	cmp    edx,ebp
  40485f:	jle    4048fc <flatcc_builder_embed_buffer@@Base+0x19c>
  404865:	movabs rax,0x10000000f
  40486f:	cmp    r8,rax
  404872:	ja     4048fc <flatcc_builder_embed_buffer@@Base+0x19c>
  404878:	lea    rsi,[rsp+0x30]
  40487d:	mov    rdi,QWORD PTR [rbx+0x38]
  404881:	mov    ecx,ebp
  404883:	mov    edx,DWORD PTR [rsp+0x28]
  404887:	call   QWORD PTR [rbx+0x48]
  40488a:	test   eax,eax
  40488c:	jne    404920 <flatcc_builder_embed_buffer@@Base+0x1c0>
  404892:	mov    DWORD PTR [rbx+0xf0],ebp
  404898:	mov    rdi,QWORD PTR [rsp+0xb8]
  4048a0:	xor    rdi,QWORD PTR fs:0x28
  4048a9:	mov    eax,ebp
  4048ab:	jne    40491b <flatcc_builder_embed_buffer@@Base+0x1bb>
  4048ad:	add    rsp,0xc8
  4048b4:	pop    rbx
  4048b5:	pop    rbp
  4048b6:	pop    r12
  4048b8:	pop    r13
  4048ba:	ret    
  4048bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4048c0:	movsxd rsi,DWORD PTR [rsp+0x28]
  4048c5:	mov    rdi,0x409fa0
  4048cc:	add    r8,rax
  4048cf:	mov    QWORD PTR [rsp+0x20],r8
  4048d4:	mov    rcx,rsi
  4048d7:	shl    rsi,0x4
  4048db:	add    ecx,0x1
  4048de:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  4048e3:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  4048e8:	mov    DWORD PTR [rsp+0x28],ecx
  4048ec:	jmp    404858 <flatcc_builder_embed_buffer@@Base+0xf8>
  4048f1:	nop    DWORD PTR [rax+0x0]
  4048f8:	xor    ebp,ebp
  4048fa:	jmp    404898 <flatcc_builder_embed_buffer@@Base+0x138>
  4048fc:	lea    rcx,[rip+0x55ed]        # 409ef0 <_IO_stdin_used@@Base+0xef0>
  404903:	lea    rsi,[rip+0x4bb6]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  40490a:	lea    rdi,[rip+0x4f46]        # 409857 <_IO_stdin_used@@Base+0x857>
  404911:	mov    edx,0x287
  404916:	call   403080 <__assert_fail@plt>
  40491b:	call   403060 <__stack_chk_fail@plt>
  404920:	call   4031cc <posix_memalign@plt+0x9c>
  404925:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000404930 <flatcc_builder_create_buffer@@Base>:
  404930:	push   r14
  404932:	push   r13
  404934:	mov    r13d,r9d
  404937:	push   r12
  404939:	push   rbp
  40493a:	and    r13d,0x1
  40493e:	push   rbx
  40493f:	mov    r14,rsi
  404942:	mov    r12d,ecx
  404945:	movzx  edx,dx
  404948:	mov    ecx,r13d
  40494b:	mov    rbp,rdi
  40494e:	sub    rsp,0xc0
  404955:	mov    ebx,r9d
  404958:	lea    rsi,[rsp+0xc]
  40495d:	mov    WORD PTR [rsp+0xc],r8w
  404963:	mov    DWORD PTR [rsp+0x1c],0x0
  40496b:	mov    rax,QWORD PTR fs:0x28
  404974:	mov    QWORD PTR [rsp+0xb8],rax
  40497c:	xor    eax,eax
  40497e:	call   403da0 <flatcc_builder_default_alloc@@Base+0x120>
  404983:	test   eax,eax
  404985:	jne    404b40 <flatcc_builder_create_buffer@@Base+0x210>
  40498b:	movzx  ecx,WORD PTR [rsp+0xc]
  404990:	cmp    cx,WORD PTR [rbp+0xe8]
  404997:	ja     404b30 <flatcc_builder_create_buffer@@Base+0x200>
  40499d:	test   r14,r14
  4049a0:	mov    eax,DWORD PTR [rsp+0x1c]
  4049a4:	je     4049ad <flatcc_builder_create_buffer@@Base+0x7d>
  4049a6:	mov    eax,DWORD PTR [r14]
  4049a9:	mov    DWORD PTR [rsp+0x1c],eax
  4049ad:	xor    r10d,r10d
  4049b0:	test   eax,eax
  4049b2:	mov    edi,ebx
  4049b4:	setne  r10b
  4049b8:	and    edi,0x1
  4049bb:	mov    edx,DWORD PTR [rbp+0xf0]
  4049c1:	shl    r10d,0x2
  4049c5:	and    ebx,0x2
  4049c8:	jne    404af8 <flatcc_builder_create_buffer@@Base+0x1c8>
  4049ce:	lea    eax,[rdx-0x4]
  4049d1:	sub    ecx,0x1
  4049d4:	sub    eax,r10d
  4049d7:	and    eax,ecx
  4049d9:	test   dil,dil
  4049dc:	jne    404b03 <flatcc_builder_create_buffer@@Base+0x1d3>
  4049e2:	mov    ecx,0x1
  4049e7:	mov    r8d,0x4
  4049ed:	movsxd rsi,ebx
  4049f0:	lea    r9,[rsp+0x14]
  4049f5:	mov    QWORD PTR [rsp+0x20],r8
  4049fa:	shl    rsi,0x4
  4049fe:	test   r10d,r10d
  404a01:	mov    DWORD PTR [rsp+0x28],ecx
  404a05:	mov    QWORD PTR [rsp+rsi*1+0x30],r9
  404a0a:	mov    QWORD PTR [rsp+rsi*1+0x38],0x4
  404a13:	je     404a37 <flatcc_builder_create_buffer@@Base+0x107>
  404a15:	lea    rsi,[rsp+0x1c]
  404a1a:	shl    rcx,0x4
  404a1e:	add    r8,r10
  404a21:	add    ebx,0x2
  404a24:	mov    QWORD PTR [rsp+0x20],r8
  404a29:	mov    QWORD PTR [rsp+rcx*1+0x38],r10
  404a2e:	mov    QWORD PTR [rsp+rcx*1+0x30],rsi
  404a33:	mov    DWORD PTR [rsp+0x28],ebx
  404a37:	test   eax,eax
  404a39:	je     404a67 <flatcc_builder_create_buffer@@Base+0x137>
  404a3b:	movsxd rsi,DWORD PTR [rsp+0x28]
  404a40:	mov    r9,0x409fa0
  404a47:	add    r8,rax
  404a4a:	mov    QWORD PTR [rsp+0x20],r8
  404a4f:	mov    rcx,rsi
  404a52:	shl    rsi,0x4
  404a56:	add    ecx,0x1
  404a59:	mov    QWORD PTR [rsp+rsi*1+0x30],r9
  404a5e:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  404a63:	mov    DWORD PTR [rsp+0x28],ecx
  404a67:	mov    eax,edx
  404a69:	sub    eax,r8d
  404a6c:	test   dil,dil
  404a6f:	je     404b48 <flatcc_builder_create_buffer@@Base+0x218>
  404a75:	add    eax,0x4
  404a78:	test   r13d,r13d
  404a7b:	je     404b48 <flatcc_builder_create_buffer@@Base+0x218>
  404a81:	mov    ecx,DWORD PTR [rbp+0xf8]
  404a87:	sub    ecx,eax
  404a89:	mov    DWORD PTR [rsp+0x18],ecx
  404a8d:	mov    ebx,edx
  404a8f:	sub    r12d,eax
  404a92:	sub    ebx,r8d
  404a95:	mov    DWORD PTR [rsp+0x14],r12d
  404a9a:	cmp    ebx,edx
  404a9c:	jge    404b59 <flatcc_builder_create_buffer@@Base+0x229>
  404aa2:	lea    rsi,[rsp+0x30]
  404aa7:	mov    rdi,QWORD PTR [rbp+0x38]
  404aab:	mov    ecx,ebx
  404aad:	mov    edx,DWORD PTR [rsp+0x28]
  404ab1:	call   QWORD PTR [rbp+0x48]
  404ab4:	test   eax,eax
  404ab6:	jne    404b7d <flatcc_builder_create_buffer@@Base+0x24d>
  404abc:	test   ebx,ebx
  404abe:	mov    DWORD PTR [rbp+0xf0],ebx
  404ac4:	je     404b82 <flatcc_builder_create_buffer@@Base+0x252>
  404aca:	mov    rdi,QWORD PTR [rsp+0xb8]
  404ad2:	xor    rdi,QWORD PTR fs:0x28
  404adb:	mov    eax,ebx
  404add:	jne    404b78 <flatcc_builder_create_buffer@@Base+0x248>
  404ae3:	add    rsp,0xc0
  404aea:	pop    rbx
  404aeb:	pop    rbp
  404aec:	pop    r12
  404aee:	pop    r13
  404af0:	pop    r14
  404af2:	ret    
  404af3:	nop    DWORD PTR [rax+rax*1+0x0]
  404af8:	lea    eax,[rdx-0x8]
  404afb:	sub    ecx,0x1
  404afe:	sub    eax,r10d
  404b01:	and    eax,ecx
  404b03:	lea    rcx,[rsp+0x18]
  404b08:	mov    QWORD PTR [rsp+0x38],0x4
  404b11:	mov    ebx,0x1
  404b16:	mov    r8d,0x8
  404b1c:	mov    edi,0x1
  404b21:	mov    QWORD PTR [rsp+0x30],rcx
  404b26:	mov    ecx,0x2
  404b2b:	jmp    4049ed <flatcc_builder_create_buffer@@Base+0xbd>
  404b30:	mov    WORD PTR [rbp+0xe8],cx
  404b37:	jmp    40499d <flatcc_builder_create_buffer@@Base+0x6d>
  404b3c:	nop    DWORD PTR [rax+0x0]
  404b40:	xor    ebx,ebx
  404b42:	jmp    404aca <flatcc_builder_create_buffer@@Base+0x19a>
  404b44:	nop    DWORD PTR [rax+0x0]
  404b48:	mov    ecx,DWORD PTR [rbp+0xf4]
  404b4e:	sub    ecx,eax
  404b50:	mov    DWORD PTR [rsp+0x18],ecx
  404b54:	jmp    404a8d <flatcc_builder_create_buffer@@Base+0x15d>
  404b59:	lea    rcx,[rip+0x5390]        # 409ef0 <_IO_stdin_used@@Base+0xef0>
  404b60:	lea    rsi,[rip+0x4959]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  404b67:	lea    rdi,[rip+0x4ce9]        # 409857 <_IO_stdin_used@@Base+0x857>
  404b6e:	mov    edx,0x287
  404b73:	call   403080 <__assert_fail@plt>
  404b78:	call   403060 <__stack_chk_fail@plt>
  404b7d:	call   4031cc <posix_memalign@plt+0x9c>
  404b82:	lea    rcx,[rip+0x5347]        # 409ed0 <_IO_stdin_used@@Base+0xed0>
  404b89:	lea    rsi,[rip+0x4930]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  404b90:	lea    rdi,[rip+0x4cc0]        # 409857 <_IO_stdin_used@@Base+0x857>
  404b97:	mov    edx,0x304
  404b9c:	call   403080 <__assert_fail@plt>
  404ba1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404bac:	nop    DWORD PTR [rax+0x0]

0000000000404bb0 <flatcc_builder_create_struct@@Base>:
  404bb0:	push   rbp
  404bb1:	push   rbx
  404bb2:	sub    rsp,0xa8
  404bb9:	mov    rax,QWORD PTR fs:0x28
  404bc2:	mov    QWORD PTR [rsp+0x98],rax
  404bca:	xor    eax,eax
  404bcc:	test   cx,cx
  404bcf:	je     404cdf <flatcc_builder_create_struct@@Base+0x12f>
  404bd5:	mov    rbx,rdi
  404bd8:	mov    r8,rdx
  404bdb:	movzx  edi,cx
  404bde:	cmp    cx,WORD PTR [rbx+0xe8]
  404be5:	jbe    404bee <flatcc_builder_create_struct@@Base+0x3e>
  404be7:	mov    WORD PTR [rbx+0xe8],cx
  404bee:	mov    edx,DWORD PTR [rbx+0xf0]
  404bf4:	lea    ecx,[rdi-0x1]
  404bf7:	mov    QWORD PTR [rsp],0x0
  404bff:	mov    DWORD PTR [rsp+0x8],0x0
  404c07:	mov    eax,edx
  404c09:	sub    eax,r8d
  404c0c:	and    eax,ecx
  404c0e:	test   r8,r8
  404c11:	jne    404ca0 <flatcc_builder_create_struct@@Base+0xf0>
  404c17:	test   eax,eax
  404c19:	je     404c46 <flatcc_builder_create_struct@@Base+0x96>
  404c1b:	movsxd rsi,DWORD PTR [rsp+0x8]
  404c20:	mov    rdi,0x409fa0
  404c27:	add    r8,rax
  404c2a:	mov    QWORD PTR [rsp],r8
  404c2e:	mov    rcx,rsi
  404c31:	shl    rsi,0x4
  404c35:	add    ecx,0x1
  404c38:	mov    QWORD PTR [rsp+rsi*1+0x10],rdi
  404c3d:	mov    QWORD PTR [rsp+rsi*1+0x18],rax
  404c42:	mov    DWORD PTR [rsp+0x8],ecx
  404c46:	mov    ebp,edx
  404c48:	movabs rax,0x10000000f
  404c52:	sub    ebp,r8d
  404c55:	cmp    r8,rax
  404c58:	ja     404cbb <flatcc_builder_create_struct@@Base+0x10b>
  404c5a:	cmp    edx,ebp
  404c5c:	jle    404cbb <flatcc_builder_create_struct@@Base+0x10b>
  404c5e:	lea    rsi,[rsp+0x10]
  404c63:	mov    rdi,QWORD PTR [rbx+0x38]
  404c67:	mov    ecx,ebp
  404c69:	mov    edx,DWORD PTR [rsp+0x8]
  404c6d:	call   QWORD PTR [rbx+0x48]
  404c70:	test   eax,eax
  404c72:	jne    404cda <flatcc_builder_create_struct@@Base+0x12a>
  404c74:	mov    rdx,QWORD PTR [rsp+0x98]
  404c7c:	xor    rdx,QWORD PTR fs:0x28
  404c85:	mov    DWORD PTR [rbx+0xf0],ebp
  404c8b:	mov    eax,ebp
  404c8d:	jne    404cfe <flatcc_builder_create_struct@@Base+0x14e>
  404c8f:	add    rsp,0xa8
  404c96:	pop    rbx
  404c97:	pop    rbp
  404c98:	ret    
  404c99:	nop    DWORD PTR [rax+0x0]
  404ca0:	mov    QWORD PTR [rsp],r8
  404ca4:	mov    QWORD PTR [rsp+0x10],rsi
  404ca9:	mov    QWORD PTR [rsp+0x18],r8
  404cae:	mov    DWORD PTR [rsp+0x8],0x1
  404cb6:	jmp    404c17 <flatcc_builder_create_struct@@Base+0x67>
  404cbb:	lea    rcx,[rip+0x522e]        # 409ef0 <_IO_stdin_used@@Base+0xef0>
  404cc2:	lea    rsi,[rip+0x47f7]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  404cc9:	lea    rdi,[rip+0x4b87]        # 409857 <_IO_stdin_used@@Base+0x857>
  404cd0:	mov    edx,0x287
  404cd5:	call   403080 <__assert_fail@plt>
  404cda:	call   4031cc <posix_memalign@plt+0x9c>
  404cdf:	lea    rcx,[rip+0x51ca]        # 409eb0 <_IO_stdin_used@@Base+0xeb0>
  404ce6:	lea    rsi,[rip+0x47d3]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  404ced:	lea    rdi,[rip+0x4b9e]        # 409892 <_IO_stdin_used@@Base+0x892>
  404cf4:	mov    edx,0x30f
  404cf9:	call   403080 <__assert_fail@plt>
  404cfe:	call   403060 <__stack_chk_fail@plt>
  404d03:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404d0e:	xchg   ax,ax

0000000000404d10 <flatcc_builder_start_buffer@@Base>:
  404d10:	push   r13
  404d12:	push   r12
  404d14:	mov    r13d,edx
  404d17:	push   rbp
  404d18:	push   rbx
  404d19:	mov    rbp,rsi
  404d1c:	mov    rbx,rdi
  404d1f:	mov    r12d,ecx
  404d22:	sub    rsp,0x8
  404d26:	movzx  esi,WORD PTR [rdi+0xe8]
  404d2d:	call   403ee0 <flatcc_builder_default_alloc@@Base+0x260>
  404d32:	test   eax,eax
  404d34:	jne    404de0 <flatcc_builder_start_buffer@@Base+0xd0>
  404d3a:	movzx  edx,WORD PTR [rbx+0xec]
  404d41:	mov    rdi,QWORD PTR [rbx+0x30]
  404d45:	mov    ecx,0x1
  404d4a:	mov    WORD PTR [rbx+0xe8],cx
  404d51:	test   rbp,rbp
  404d54:	mov    rsi,rbp
  404d57:	mov    WORD PTR [rdi+0x22],dx
  404d5b:	movzx  edx,WORD PTR [rbx+0x10c]
  404d62:	mov    WORD PTR [rbx+0xec],r13w
  404d6a:	mov    WORD PTR [rdi+0x20],dx
  404d6e:	mov    edx,DWORD PTR [rbx+0xf8]
  404d74:	mov    WORD PTR [rbx+0x10c],r12w
  404d7c:	mov    DWORD PTR [rdi+0x14],edx
  404d7f:	mov    edx,DWORD PTR [rbx+0x100]
  404d85:	mov    DWORD PTR [rdi+0x1c],edx
  404d88:	mov    edx,DWORD PTR [rbx+0xf0]
  404d8e:	mov    DWORD PTR [rbx+0xf8],edx
  404d94:	mov    edx,DWORD PTR [rbx+0xfc]
  404d9a:	lea    ecx,[rdx+0x1]
  404d9d:	mov    DWORD PTR [rbx+0x100],edx
  404da3:	mov    edx,DWORD PTR [rbx+0x110]
  404da9:	mov    DWORD PTR [rbx+0xfc],ecx
  404daf:	mov    DWORD PTR [rdi+0x10],edx
  404db2:	je     404dd0 <flatcc_builder_start_buffer@@Base+0xc0>
  404db4:	mov    edx,DWORD PTR [rsi]
  404db6:	mov    DWORD PTR [rbx+0x110],edx
  404dbc:	mov    edx,0x1
  404dc1:	mov    WORD PTR [rdi+0xe],dx
  404dc5:	add    rsp,0x8
  404dc9:	pop    rbx
  404dca:	pop    rbp
  404dcb:	pop    r12
  404dcd:	pop    r13
  404dcf:	ret    
  404dd0:	mov    rsi,0x409fa0
  404dd7:	jmp    404db4 <flatcc_builder_start_buffer@@Base+0xa4>
  404dd9:	nop    DWORD PTR [rax+0x0]
  404de0:	mov    eax,0xffffffff
  404de5:	jmp    404dc5 <flatcc_builder_start_buffer@@Base+0xb5>
  404de7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404df0 <flatcc_builder_end_buffer@@Base>:
  404df0:	push   rbp
  404df1:	push   rbx
  404df2:	xor    eax,eax
  404df4:	sub    rsp,0x8
  404df8:	movzx  r9d,WORD PTR [rdi+0x10c]
  404e00:	mov    edx,DWORD PTR [rdi+0x100]
  404e06:	and    r9d,0x2
  404e0a:	test   edx,edx
  404e0c:	setne  al
  404e0f:	or     r9d,eax
  404e12:	mov    rax,QWORD PTR [rdi+0x30]
  404e16:	cmp    WORD PTR [rax+0xe],0x1
  404e1b:	jne    404f11 <flatcc_builder_end_buffer@@Base+0x121>
  404e21:	movzx  edx,WORD PTR [rdi+0xec]
  404e28:	movzx  r8d,WORD PTR [rdi+0xe8]
  404e30:	mov    rbx,rdi
  404e33:	mov    ecx,esi
  404e35:	cmp    dx,r8w
  404e39:	ja     404e60 <flatcc_builder_end_buffer@@Base+0x70>
  404e3b:	lea    rsi,[rbx+0x110]
  404e42:	mov    rdi,rbx
  404e45:	call   404930 <flatcc_builder_create_buffer@@Base>
  404e4a:	test   eax,eax
  404e4c:	mov    ebp,eax
  404e4e:	jne    404e70 <flatcc_builder_end_buffer@@Base+0x80>
  404e50:	add    rsp,0x8
  404e54:	mov    eax,ebp
  404e56:	pop    rbx
  404e57:	pop    rbp
  404e58:	ret    
  404e59:	nop    DWORD PTR [rax+0x0]
  404e60:	mov    WORD PTR [rbx+0xe8],dx
  404e67:	mov    r8d,edx
  404e6a:	jmp    404e3b <flatcc_builder_end_buffer@@Base+0x4b>
  404e6c:	nop    DWORD PTR [rax+0x0]
  404e70:	mov    rax,QWORD PTR [rbx+0x30]
  404e74:	mov    rdi,QWORD PTR [rbx+0x18]
  404e78:	xor    esi,esi
  404e7a:	mov    edx,DWORD PTR [rax+0x14]
  404e7d:	mov    DWORD PTR [rbx+0xf8],edx
  404e83:	mov    edx,DWORD PTR [rax+0x1c]
  404e86:	mov    DWORD PTR [rbx+0x100],edx
  404e8c:	mov    edx,DWORD PTR [rax+0x10]
  404e8f:	mov    DWORD PTR [rbx+0x110],edx
  404e95:	movzx  eax,WORD PTR [rax+0x20]
  404e99:	mov    edx,DWORD PTR [rbx+0x20]
  404e9c:	mov    WORD PTR [rbx+0x10c],ax
  404ea3:	call   403090 <memset@plt>
  404ea8:	mov    rax,QWORD PTR [rbx+0x30]
  404eac:	mov    edi,DWORD PTR [rbx+0x70]
  404eaf:	mov    esi,DWORD PTR [rax]
  404eb1:	mov    edx,DWORD PTR [rax+0x8]
  404eb4:	mov    ecx,DWORD PTR [rax+0x4]
  404eb7:	mov    DWORD PTR [rbx+0x20],edx
  404eba:	mov    rdx,rsi
  404ebd:	mov    DWORD PTR [rbx+0x28],esi
  404ec0:	add    rsi,QWORD PTR [rbx+0x68]
  404ec4:	sub    edi,edx
  404ec6:	cmp    ecx,edi
  404ec8:	mov    edx,edi
  404eca:	cmovb  edx,ecx
  404ecd:	mov    DWORD PTR [rbx+0x24],edx
  404ed0:	movzx  edx,WORD PTR [rbx+0xea]
  404ed7:	cmp    dx,WORD PTR [rbx+0xe8]
  404ede:	mov    QWORD PTR [rbx+0x18],rsi
  404ee2:	mov    DWORD PTR [rax+0x4],ecx
  404ee5:	jbe    404eee <flatcc_builder_end_buffer@@Base+0xfe>
  404ee7:	mov    WORD PTR [rbx+0xe8],dx
  404eee:	movzx  edx,WORD PTR [rax+0xc]
  404ef2:	sub    rax,0x24
  404ef6:	sub    DWORD PTR [rbx+0x104],0x1
  404efd:	mov    QWORD PTR [rbx+0x30],rax
  404f01:	mov    eax,ebp
  404f03:	mov    WORD PTR [rbx+0xea],dx
  404f0a:	add    rsp,0x8
  404f0e:	pop    rbx
  404f0f:	pop    rbp
  404f10:	ret    
  404f11:	lea    rcx,[rip+0x4f78]        # 409e90 <_IO_stdin_used@@Base+0xe90>
  404f18:	lea    rsi,[rip+0x45a1]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  404f1f:	lea    rdi,[rip+0x461a]        # 409540 <_IO_stdin_used@@Base+0x540>
  404f26:	mov    edx,0x346
  404f2b:	call   403080 <__assert_fail@plt>

0000000000404f30 <flatcc_builder_start_struct@@Base>:
  404f30:	push   r12
  404f32:	push   rbp
  404f33:	mov    rbp,rsi
  404f36:	push   rbx
  404f37:	movzx  esi,dx
  404f3a:	mov    rbx,rdi
  404f3d:	call   403ee0 <flatcc_builder_default_alloc@@Base+0x260>
  404f42:	test   eax,eax
  404f44:	jne    404fc0 <flatcc_builder_start_struct@@Base+0x90>
  404f46:	mov    rcx,QWORD PTR [rbx+0x30]
  404f4a:	mov    eax,0x2
  404f4f:	mov    edi,DWORD PTR [rbx+0x70]
  404f52:	mov    WORD PTR [rcx+0xe],ax
  404f56:	mov    eax,DWORD PTR [rbx+0x28]
  404f59:	mov    rdx,rax
  404f5c:	add    rax,QWORD PTR [rbx+0x68]
  404f60:	sub    edi,edx
  404f62:	cmp    edi,0xfffffffc
  404f65:	mov    edx,edi
  404f67:	mov    QWORD PTR [rbx+0x18],rax
  404f6b:	ja     404f90 <flatcc_builder_start_struct@@Base+0x60>
  404f6d:	mov    DWORD PTR [rbx+0x24],edi
  404f70:	mov    r12d,DWORD PTR [rbx+0x20]
  404f74:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404f7b:	mov    rsi,r12
  404f7e:	add    esi,ebp
  404f80:	cmp    esi,edx
  404f82:	mov    DWORD PTR [rbx+0x20],esi
  404f85:	jae    404fa0 <flatcc_builder_start_struct@@Base+0x70>
  404f87:	add    rax,r12
  404f8a:	pop    rbx
  404f8b:	pop    rbp
  404f8c:	pop    r12
  404f8e:	ret    
  404f8f:	nop
  404f90:	mov    DWORD PTR [rbx+0x24],0xfffffffc
  404f97:	mov    edx,0xfffffffc
  404f9c:	jmp    404f70 <flatcc_builder_start_struct@@Base+0x40>
  404f9e:	xchg   ax,ax
  404fa0:	add    esi,0x1
  404fa3:	mov    edx,0xfffffffc
  404fa8:	mov    rdi,rbx
  404fab:	call   403c20 <_start@@Base+0x3c0>
  404fb0:	test   eax,eax
  404fb2:	jne    404fc0 <flatcc_builder_start_struct@@Base+0x90>
  404fb4:	mov    rax,QWORD PTR [rbx+0x18]
  404fb8:	jmp    404f87 <flatcc_builder_start_struct@@Base+0x57>
  404fba:	nop    WORD PTR [rax+rax*1+0x0]
  404fc0:	pop    rbx
  404fc1:	xor    eax,eax
  404fc3:	pop    rbp
  404fc4:	pop    r12
  404fc6:	ret    
  404fc7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404fd0 <flatcc_builder_struct_edit@@Base>:
  404fd0:	mov    rax,QWORD PTR [rdi+0x18]
  404fd4:	ret    
  404fd5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000404fe0 <flatcc_builder_end_struct@@Base>:
  404fe0:	push   rbp
  404fe1:	push   rbx
  404fe2:	sub    rsp,0x8
  404fe6:	mov    rax,QWORD PTR [rdi+0x30]
  404fea:	cmp    WORD PTR [rax+0xe],0x2
  404fef:	jne    405097 <flatcc_builder_end_struct@@Base+0xb7>
  404ff5:	movzx  ecx,WORD PTR [rdi+0xea]
  404ffc:	mov    edx,DWORD PTR [rdi+0x20]
  404fff:	mov    rbx,rdi
  405002:	mov    rsi,QWORD PTR [rdi+0x18]
  405006:	call   404bb0 <flatcc_builder_create_struct@@Base>
  40500b:	test   eax,eax
  40500d:	mov    ebp,eax
  40500f:	jne    405020 <flatcc_builder_end_struct@@Base+0x40>
  405011:	add    rsp,0x8
  405015:	mov    eax,ebp
  405017:	pop    rbx
  405018:	pop    rbp
  405019:	ret    
  40501a:	nop    WORD PTR [rax+rax*1+0x0]
  405020:	mov    edx,DWORD PTR [rbx+0x20]
  405023:	mov    rdi,QWORD PTR [rbx+0x18]
  405027:	xor    esi,esi
  405029:	call   403090 <memset@plt>
  40502e:	mov    rax,QWORD PTR [rbx+0x30]
  405032:	mov    edi,DWORD PTR [rbx+0x70]
  405035:	mov    esi,DWORD PTR [rax]
  405037:	mov    edx,DWORD PTR [rax+0x8]
  40503a:	mov    ecx,DWORD PTR [rax+0x4]
  40503d:	mov    DWORD PTR [rbx+0x20],edx
  405040:	mov    rdx,rsi
  405043:	mov    DWORD PTR [rbx+0x28],esi
  405046:	add    rsi,QWORD PTR [rbx+0x68]
  40504a:	sub    edi,edx
  40504c:	cmp    ecx,edi
  40504e:	mov    edx,edi
  405050:	cmovb  edx,ecx
  405053:	mov    DWORD PTR [rbx+0x24],edx
  405056:	movzx  edx,WORD PTR [rbx+0xea]
  40505d:	cmp    dx,WORD PTR [rbx+0xe8]
  405064:	mov    QWORD PTR [rbx+0x18],rsi
  405068:	mov    DWORD PTR [rax+0x4],ecx
  40506b:	jbe    405074 <flatcc_builder_end_struct@@Base+0x94>
  40506d:	mov    WORD PTR [rbx+0xe8],dx
  405074:	movzx  edx,WORD PTR [rax+0xc]
  405078:	sub    rax,0x24
  40507c:	sub    DWORD PTR [rbx+0x104],0x1
  405083:	mov    QWORD PTR [rbx+0x30],rax
  405087:	mov    eax,ebp
  405089:	mov    WORD PTR [rbx+0xea],dx
  405090:	add    rsp,0x8
  405094:	pop    rbx
  405095:	pop    rbp
  405096:	ret    
  405097:	lea    rcx,[rip+0x4dd2]        # 409e70 <_IO_stdin_used@@Base+0xe70>
  40509e:	lea    rsi,[rip+0x441b]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4050a5:	lea    rdi,[rip+0x44c4]        # 409570 <_IO_stdin_used@@Base+0x570>
  4050ac:	mov    edx,0x368
  4050b1:	call   403080 <__assert_fail@plt>
  4050b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004050c0 <flatcc_builder_extend_vector@@Base>:
  4050c0:	push   rbp
  4050c1:	push   rbx
  4050c2:	mov    eax,esi
  4050c4:	sub    rsp,0x8
  4050c8:	mov    rdx,QWORD PTR [rdi+0x30]
  4050cc:	add    eax,DWORD PTR [rdx+0x14]
  4050cf:	setb   cl
  4050d2:	cmp    DWORD PTR [rdx+0x18],eax
  4050d5:	jb     40511d <flatcc_builder_extend_vector@@Base+0x5d>
  4050d7:	movzx  ecx,cl
  4050da:	test   ecx,ecx
  4050dc:	jne    40511d <flatcc_builder_extend_vector@@Base+0x5d>
  4050de:	imul   esi,DWORD PTR [rdx+0x10]
  4050e2:	mov    DWORD PTR [rdx+0x14],eax
  4050e5:	mov    ebp,DWORD PTR [rdi+0x20]
  4050e8:	mov    rbx,rdi
  4050eb:	add    esi,ebp
  4050ed:	cmp    esi,DWORD PTR [rdi+0x24]
  4050f0:	mov    DWORD PTR [rdi+0x20],esi
  4050f3:	jae    405108 <flatcc_builder_extend_vector@@Base+0x48>
  4050f5:	mov    rax,rbp
  4050f8:	add    rax,QWORD PTR [rbx+0x18]
  4050fc:	add    rsp,0x8
  405100:	pop    rbx
  405101:	pop    rbp
  405102:	ret    
  405103:	nop    DWORD PTR [rax+rax*1+0x0]
  405108:	add    esi,0x1
  40510b:	mov    edx,0xfffffffc
  405110:	call   403c20 <_start@@Base+0x3c0>
  405115:	test   eax,eax
  405117:	je     4050f5 <flatcc_builder_extend_vector@@Base+0x35>
  405119:	xor    eax,eax
  40511b:	jmp    4050fc <flatcc_builder_extend_vector@@Base+0x3c>
  40511d:	call   4031ef <posix_memalign@plt+0xbf>
  405122:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40512d:	nop    DWORD PTR [rax]

0000000000405130 <flatcc_builder_vector_push@@Base>:
  405130:	push   r13
  405132:	push   r12
  405134:	push   rbp
  405135:	push   rbx
  405136:	sub    rsp,0x8
  40513a:	mov    rax,QWORD PTR [rdi+0x30]
  40513e:	cmp    WORD PTR [rax+0xe],0x4
  405143:	jne    4051c4 <flatcc_builder_vector_push@@Base+0x94>
  405145:	mov    edx,DWORD PTR [rax+0x14]
  405148:	cmp    edx,DWORD PTR [rax+0x18]
  40514b:	ja     4051a5 <flatcc_builder_vector_push@@Base+0x75>
  40514d:	add    edx,0x1
  405150:	mov    r12d,DWORD PTR [rax+0x10]
  405154:	mov    rbx,rdi
  405157:	mov    DWORD PTR [rax+0x14],edx
  40515a:	mov    ebp,DWORD PTR [rdi+0x20]
  40515d:	mov    r13,rsi
  405160:	mov    rcx,rbp
  405163:	add    ecx,r12d
  405166:	cmp    ecx,DWORD PTR [rdi+0x24]
  405169:	mov    DWORD PTR [rdi+0x20],ecx
  40516c:	jae    405190 <flatcc_builder_vector_push@@Base+0x60>
  40516e:	add    rbp,QWORD PTR [rbx+0x18]
  405172:	je     405182 <flatcc_builder_vector_push@@Base+0x52>
  405174:	mov    edx,r12d
  405177:	mov    rsi,r13
  40517a:	mov    rdi,rbp
  40517d:	call   4030d0 <memcpy@plt>
  405182:	add    rsp,0x8
  405186:	mov    rax,rbp
  405189:	pop    rbx
  40518a:	pop    rbp
  40518b:	pop    r12
  40518d:	pop    r13
  40518f:	ret    
  405190:	lea    esi,[rcx+0x1]
  405193:	mov    edx,0xfffffffc
  405198:	call   403c20 <_start@@Base+0x3c0>
  40519d:	test   eax,eax
  40519f:	je     40516e <flatcc_builder_vector_push@@Base+0x3e>
  4051a1:	xor    ebp,ebp
  4051a3:	jmp    405182 <flatcc_builder_vector_push@@Base+0x52>
  4051a5:	lea    rcx,[rip+0x4c84]        # 409e30 <_IO_stdin_used@@Base+0xe30>
  4051ac:	lea    rsi,[rip+0x430d]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4051b3:	lea    rdi,[rip+0x4416]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  4051ba:	mov    edx,0x38c
  4051bf:	call   403080 <__assert_fail@plt>
  4051c4:	lea    rcx,[rip+0x4c65]        # 409e30 <_IO_stdin_used@@Base+0xe30>
  4051cb:	lea    rsi,[rip+0x42ee]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4051d2:	lea    rdi,[rip+0x43c7]        # 4095a0 <_IO_stdin_used@@Base+0x5a0>
  4051d9:	mov    edx,0x38b
  4051de:	call   403080 <__assert_fail@plt>
  4051e3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4051ee:	xchg   ax,ax

00000000004051f0 <flatcc_builder_append_vector@@Base>:
  4051f0:	push   r13
  4051f2:	push   r12
  4051f4:	push   rbp
  4051f5:	push   rbx
  4051f6:	sub    rsp,0x8
  4051fa:	mov    rax,QWORD PTR [rdi+0x30]
  4051fe:	cmp    WORD PTR [rax+0xe],0x4
  405203:	jne    40527b <flatcc_builder_append_vector@@Base+0x8b>
  405205:	mov    r13,rsi
  405208:	mov    ecx,edx
  40520a:	xor    esi,esi
  40520c:	add    ecx,DWORD PTR [rax+0x14]
  40520f:	setb   sil
  405213:	cmp    DWORD PTR [rax+0x18],ecx
  405216:	jb     405276 <flatcc_builder_append_vector@@Base+0x86>
  405218:	test   esi,esi
  40521a:	jne    405276 <flatcc_builder_append_vector@@Base+0x86>
  40521c:	mov    ebx,DWORD PTR [rax+0x10]
  40521f:	mov    DWORD PTR [rax+0x14],ecx
  405222:	mov    rbp,rdi
  405225:	mov    r12d,DWORD PTR [rdi+0x20]
  405229:	imul   ebx,edx
  40522c:	mov    rdx,r12
  40522f:	add    edx,ebx
  405231:	cmp    edx,DWORD PTR [rdi+0x24]
  405234:	mov    DWORD PTR [rdi+0x20],edx
  405237:	jae    405260 <flatcc_builder_append_vector@@Base+0x70>
  405239:	add    r12,QWORD PTR [rbp+0x18]
  40523d:	je     40524c <flatcc_builder_append_vector@@Base+0x5c>
  40523f:	mov    edx,ebx
  405241:	mov    rsi,r13
  405244:	mov    rdi,r12
  405247:	call   4030d0 <memcpy@plt>
  40524c:	add    rsp,0x8
  405250:	mov    rax,r12
  405253:	pop    rbx
  405254:	pop    rbp
  405255:	pop    r12
  405257:	pop    r13
  405259:	ret    
  40525a:	nop    WORD PTR [rax+rax*1+0x0]
  405260:	lea    esi,[rdx+0x1]
  405263:	mov    edx,0xfffffffc
  405268:	call   403c20 <_start@@Base+0x3c0>
  40526d:	test   eax,eax
  40526f:	je     405239 <flatcc_builder_append_vector@@Base+0x49>
  405271:	xor    r12d,r12d
  405274:	jmp    40524c <flatcc_builder_append_vector@@Base+0x5c>
  405276:	call   4031ef <posix_memalign@plt+0xbf>
  40527b:	lea    rcx,[rip+0x4b8e]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  405282:	lea    rsi,[rip+0x4237]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  405289:	lea    rdi,[rip+0x4310]        # 4095a0 <_IO_stdin_used@@Base+0x5a0>
  405290:	mov    edx,0x393
  405295:	call   403080 <__assert_fail@plt>
  40529a:	nop    WORD PTR [rax+rax*1+0x0]

00000000004052a0 <flatcc_builder_extend_offset_vector@@Base>:
  4052a0:	push   rbp
  4052a1:	push   rbx
  4052a2:	xor    edx,edx
  4052a4:	mov    ecx,esi
  4052a6:	sub    rsp,0x8
  4052aa:	mov    rax,QWORD PTR [rdi+0x30]
  4052ae:	add    ecx,DWORD PTR [rax+0x14]
  4052b1:	setb   dl
  4052b4:	test   edx,edx
  4052b6:	jne    4052fd <flatcc_builder_extend_offset_vector@@Base+0x5d>
  4052b8:	cmp    ecx,0x3fffffff
  4052be:	ja     4052fd <flatcc_builder_extend_offset_vector@@Base+0x5d>
  4052c0:	mov    DWORD PTR [rax+0x14],ecx
  4052c3:	mov    ebp,DWORD PTR [rdi+0x20]
  4052c6:	mov    rbx,rdi
  4052c9:	lea    eax,[rbp+rsi*4+0x0]
  4052cd:	cmp    eax,DWORD PTR [rdi+0x24]
  4052d0:	mov    DWORD PTR [rdi+0x20],eax
  4052d3:	jae    4052e8 <flatcc_builder_extend_offset_vector@@Base+0x48>
  4052d5:	mov    rax,rbp
  4052d8:	add    rax,QWORD PTR [rbx+0x18]
  4052dc:	add    rsp,0x8
  4052e0:	pop    rbx
  4052e1:	pop    rbp
  4052e2:	ret    
  4052e3:	nop    DWORD PTR [rax+rax*1+0x0]
  4052e8:	lea    esi,[rax+0x1]
  4052eb:	mov    edx,0xfffffffc
  4052f0:	call   403c20 <_start@@Base+0x3c0>
  4052f5:	test   eax,eax
  4052f7:	je     4052d5 <flatcc_builder_extend_offset_vector@@Base+0x35>
  4052f9:	xor    eax,eax
  4052fb:	jmp    4052dc <flatcc_builder_extend_offset_vector@@Base+0x3c>
  4052fd:	call   4031ef <posix_memalign@plt+0xbf>
  405302:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40530d:	nop    DWORD PTR [rax]

0000000000405310 <flatcc_builder_offset_vector_push@@Base>:
  405310:	push   r12
  405312:	push   rbp
  405313:	push   rbx
  405314:	mov    rdx,QWORD PTR [rdi+0x30]
  405318:	cmp    WORD PTR [rdx+0xe],0x5
  40531d:	jne    405370 <flatcc_builder_offset_vector_push@@Base+0x60>
  40531f:	mov    eax,DWORD PTR [rdx+0x14]
  405322:	cmp    eax,0x3fffffff
  405327:	je     405369 <flatcc_builder_offset_vector_push@@Base+0x59>
  405329:	add    eax,0x1
  40532c:	mov    rbp,rdi
  40532f:	mov    r12d,esi
  405332:	mov    DWORD PTR [rdx+0x14],eax
  405335:	mov    ebx,DWORD PTR [rdi+0x20]
  405338:	lea    edx,[rbx+0x4]
  40533b:	cmp    edx,DWORD PTR [rdi+0x24]
  40533e:	mov    DWORD PTR [rdi+0x20],edx
  405341:	jae    405358 <flatcc_builder_offset_vector_push@@Base+0x48>
  405343:	mov    rax,rbx
  405346:	add    rax,QWORD PTR [rbp+0x18]
  40534a:	je     405369 <flatcc_builder_offset_vector_push@@Base+0x59>
  40534c:	mov    DWORD PTR [rax],r12d
  40534f:	pop    rbx
  405350:	pop    rbp
  405351:	pop    r12
  405353:	ret    
  405354:	nop    DWORD PTR [rax+0x0]
  405358:	lea    esi,[rbx+0x5]
  40535b:	mov    edx,0xfffffffc
  405360:	call   403c20 <_start@@Base+0x3c0>
  405365:	test   eax,eax
  405367:	je     405343 <flatcc_builder_offset_vector_push@@Base+0x33>
  405369:	pop    rbx
  40536a:	xor    eax,eax
  40536c:	pop    rbp
  40536d:	pop    r12
  40536f:	ret    
  405370:	lea    rcx,[rip+0x4a69]        # 409de0 <_IO_stdin_used@@Base+0xde0>
  405377:	lea    rsi,[rip+0x4142]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  40537e:	lea    rdi,[rip+0x428b]        # 409610 <_IO_stdin_used@@Base+0x610>
  405385:	mov    edx,0x3a6
  40538a:	call   403080 <__assert_fail@plt>
  40538f:	nop

0000000000405390 <flatcc_builder_append_offset_vector@@Base>:
  405390:	push   r13
  405392:	push   r12
  405394:	push   rbp
  405395:	push   rbx
  405396:	sub    rsp,0x8
  40539a:	mov    rax,QWORD PTR [rdi+0x30]
  40539e:	cmp    WORD PTR [rax+0xe],0x5
  4053a3:	jne    40541b <flatcc_builder_append_offset_vector@@Base+0x8b>
  4053a5:	mov    r13,rsi
  4053a8:	mov    ecx,edx
  4053aa:	xor    esi,esi
  4053ac:	add    ecx,DWORD PTR [rax+0x14]
  4053af:	setb   sil
  4053b3:	test   esi,esi
  4053b5:	jne    405416 <flatcc_builder_append_offset_vector@@Base+0x86>
  4053b7:	cmp    ecx,0x3fffffff
  4053bd:	ja     405416 <flatcc_builder_append_offset_vector@@Base+0x86>
  4053bf:	mov    DWORD PTR [rax+0x14],ecx
  4053c2:	mov    r12d,DWORD PTR [rdi+0x20]
  4053c6:	lea    ebx,[rdx*4+0x0]
  4053cd:	mov    rbp,rdi
  4053d0:	mov    rdx,r12
  4053d3:	add    edx,ebx
  4053d5:	cmp    edx,DWORD PTR [rdi+0x24]
  4053d8:	mov    DWORD PTR [rdi+0x20],edx
  4053db:	jae    405400 <flatcc_builder_append_offset_vector@@Base+0x70>
  4053dd:	add    r12,QWORD PTR [rbp+0x18]
  4053e1:	je     4053f0 <flatcc_builder_append_offset_vector@@Base+0x60>
  4053e3:	mov    edx,ebx
  4053e5:	mov    rsi,r13
  4053e8:	mov    rdi,r12
  4053eb:	call   4030d0 <memcpy@plt>
  4053f0:	add    rsp,0x8
  4053f4:	mov    rax,r12
  4053f7:	pop    rbx
  4053f8:	pop    rbp
  4053f9:	pop    r12
  4053fb:	pop    r13
  4053fd:	ret    
  4053fe:	xchg   ax,ax
  405400:	lea    esi,[rdx+0x1]
  405403:	mov    edx,0xfffffffc
  405408:	call   403c20 <_start@@Base+0x3c0>
  40540d:	test   eax,eax
  40540f:	je     4053dd <flatcc_builder_append_offset_vector@@Base+0x4d>
  405411:	xor    r12d,r12d
  405414:	jmp    4053f0 <flatcc_builder_append_offset_vector@@Base+0x60>
  405416:	call   4031ef <posix_memalign@plt+0xbf>
  40541b:	lea    rcx,[rip+0x497e]        # 409da0 <_IO_stdin_used@@Base+0xda0>
  405422:	lea    rsi,[rip+0x4097]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  405429:	lea    rdi,[rip+0x41e0]        # 409610 <_IO_stdin_used@@Base+0x610>
  405430:	mov    edx,0x3b4
  405435:	call   403080 <__assert_fail@plt>
  40543a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405440 <flatcc_builder_extend_string@@Base>:
  405440:	push   rbp
  405441:	push   rbx
  405442:	sub    rsp,0x8
  405446:	mov    rax,QWORD PTR [rdi+0x30]
  40544a:	cmp    WORD PTR [rax+0xe],0x6
  40544f:	jne    40549a <flatcc_builder_extend_string@@Base+0x5a>
  405451:	mov    edx,esi
  405453:	add    edx,DWORD PTR [rax+0x14]
  405456:	jb     405495 <flatcc_builder_extend_string@@Base+0x55>
  405458:	mov    DWORD PTR [rax+0x14],edx
  40545b:	mov    ebp,DWORD PTR [rdi+0x20]
  40545e:	mov    rbx,rdi
  405461:	add    esi,ebp
  405463:	cmp    esi,DWORD PTR [rdi+0x24]
  405466:	mov    DWORD PTR [rdi+0x20],esi
  405469:	jae    405480 <flatcc_builder_extend_string@@Base+0x40>
  40546b:	mov    rax,rbp
  40546e:	add    rax,QWORD PTR [rbx+0x18]
  405472:	add    rsp,0x8
  405476:	pop    rbx
  405477:	pop    rbp
  405478:	ret    
  405479:	nop    DWORD PTR [rax+0x0]
  405480:	add    esi,0x1
  405483:	mov    edx,0xfffffffc
  405488:	call   403c20 <_start@@Base+0x3c0>
  40548d:	test   eax,eax
  40548f:	je     40546b <flatcc_builder_extend_string@@Base+0x2b>
  405491:	xor    eax,eax
  405493:	jmp    405472 <flatcc_builder_extend_string@@Base+0x32>
  405495:	call   4031ef <posix_memalign@plt+0xbf>
  40549a:	lea    rcx,[rip+0x48cf]        # 409d70 <_IO_stdin_used@@Base+0xd70>
  4054a1:	lea    rsi,[rip+0x4018]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4054a8:	lea    rdi,[rip+0x4199]        # 409648 <_IO_stdin_used@@Base+0x648>
  4054af:	mov    edx,0x3bd
  4054b4:	call   403080 <__assert_fail@plt>
  4054b9:	nop    DWORD PTR [rax+0x0]

00000000004054c0 <flatcc_builder_append_string@@Base>:
  4054c0:	push   r13
  4054c2:	push   r12
  4054c4:	push   rbp
  4054c5:	push   rbx
  4054c6:	sub    rsp,0x8
  4054ca:	mov    rax,QWORD PTR [rdi+0x30]
  4054ce:	cmp    WORD PTR [rax+0xe],0x6
  4054d3:	jne    40553b <flatcc_builder_append_string@@Base+0x7b>
  4054d5:	mov    rbp,rdx
  4054d8:	add    edx,DWORD PTR [rax+0x14]
  4054db:	jb     405536 <flatcc_builder_append_string@@Base+0x76>
  4054dd:	mov    DWORD PTR [rax+0x14],edx
  4054e0:	mov    r12d,DWORD PTR [rdi+0x20]
  4054e4:	mov    rbx,rdi
  4054e7:	mov    r13,rsi
  4054ea:	mov    rdx,r12
  4054ed:	add    edx,ebp
  4054ef:	cmp    edx,DWORD PTR [rdi+0x24]
  4054f2:	mov    DWORD PTR [rdi+0x20],edx
  4054f5:	jae    405520 <flatcc_builder_append_string@@Base+0x60>
  4054f7:	add    r12,QWORD PTR [rbx+0x18]
  4054fb:	je     40550a <flatcc_builder_append_string@@Base+0x4a>
  4054fd:	mov    edx,ebp
  4054ff:	mov    rsi,r13
  405502:	mov    rdi,r12
  405505:	call   4030d0 <memcpy@plt>
  40550a:	add    rsp,0x8
  40550e:	mov    rax,r12
  405511:	pop    rbx
  405512:	pop    rbp
  405513:	pop    r12
  405515:	pop    r13
  405517:	ret    
  405518:	nop    DWORD PTR [rax+rax*1+0x0]
  405520:	lea    esi,[rdx+0x1]
  405523:	mov    edx,0xfffffffc
  405528:	call   403c20 <_start@@Base+0x3c0>
  40552d:	test   eax,eax
  40552f:	je     4054f7 <flatcc_builder_append_string@@Base+0x37>
  405531:	xor    r12d,r12d
  405534:	jmp    40550a <flatcc_builder_append_string@@Base+0x4a>
  405536:	call   4031ef <posix_memalign@plt+0xbf>
  40553b:	lea    rcx,[rip+0x480e]        # 409d50 <_IO_stdin_used@@Base+0xd50>
  405542:	lea    rsi,[rip+0x3f77]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  405549:	lea    rdi,[rip+0x40f8]        # 409648 <_IO_stdin_used@@Base+0x648>
  405550:	mov    edx,0x3c6
  405555:	call   403080 <__assert_fail@plt>
  40555a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405560 <flatcc_builder_append_string_str@@Base>:
  405560:	push   rbp
  405561:	push   rbx
  405562:	mov    rbp,rdi
  405565:	mov    rdi,rsi
  405568:	mov    rbx,rsi
  40556b:	sub    rsp,0x8
  40556f:	call   403050 <strlen@plt>
  405574:	add    rsp,0x8
  405578:	mov    rsi,rbx
  40557b:	mov    rdi,rbp
  40557e:	pop    rbx
  40557f:	pop    rbp
  405580:	mov    rdx,rax
  405583:	jmp    4054c0 <flatcc_builder_append_string@@Base>
  405588:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405590 <flatcc_builder_append_string_strn@@Base>:
  405590:	push   r12
  405592:	push   rbp
  405593:	mov    rbp,rsi
  405596:	push   rbx
  405597:	mov    r12,rdi
  40559a:	xor    esi,esi
  40559c:	mov    rdi,rbp
  40559f:	mov    rbx,rdx
  4055a2:	call   4030a0 <memchr@plt>
  4055a7:	mov    rdx,rax
  4055aa:	mov    rsi,rbp
  4055ad:	mov    rdi,r12
  4055b0:	sub    rdx,rbp
  4055b3:	test   rax,rax
  4055b6:	cmovne rbx,rdx
  4055ba:	mov    rdx,rbx
  4055bd:	pop    rbx
  4055be:	pop    rbp
  4055bf:	pop    r12
  4055c1:	jmp    4054c0 <flatcc_builder_append_string@@Base>
  4055c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004055d0 <flatcc_builder_truncate_vector@@Base>:
  4055d0:	sub    rsp,0x8
  4055d4:	mov    rax,QWORD PTR [rdi+0x30]
  4055d8:	cmp    WORD PTR [rax+0xe],0x4
  4055dd:	jne    405613 <flatcc_builder_truncate_vector@@Base+0x43>
  4055df:	mov    ecx,DWORD PTR [rax+0x14]
  4055e2:	cmp    rcx,rsi
  4055e5:	mov    rdx,rcx
  4055e8:	jb     405632 <flatcc_builder_truncate_vector@@Base+0x62>
  4055ea:	sub    edx,esi
  4055ec:	imul   esi,DWORD PTR [rax+0x10]
  4055f0:	mov    DWORD PTR [rax+0x14],edx
  4055f3:	mov    eax,DWORD PTR [rdi+0x20]
  4055f6:	mov    rcx,QWORD PTR [rdi+0x18]
  4055fa:	sub    eax,esi
  4055fc:	mov    edx,esi
  4055fe:	xor    esi,esi
  405600:	mov    DWORD PTR [rdi+0x20],eax
  405603:	lea    rdi,[rcx+rax*1]
  405607:	call   403090 <memset@plt>
  40560c:	xor    eax,eax
  40560e:	add    rsp,0x8
  405612:	ret    
  405613:	lea    rcx,[rip+0x4716]        # 409d30 <_IO_stdin_used@@Base+0xd30>
  40561a:	lea    rsi,[rip+0x3e9f]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  405621:	lea    rdi,[rip+0x3f78]        # 4095a0 <_IO_stdin_used@@Base+0x5a0>
  405628:	mov    edx,0x3d9
  40562d:	call   403080 <__assert_fail@plt>
  405632:	lea    rcx,[rip+0x46f7]        # 409d30 <_IO_stdin_used@@Base+0xd30>
  405639:	lea    rsi,[rip+0x3e80]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  405640:	lea    rdi,[rip+0x4031]        # 409678 <_IO_stdin_used@@Base+0x678>
  405647:	mov    edx,0x3da
  40564c:	call   403080 <__assert_fail@plt>
  405651:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40565c:	nop    DWORD PTR [rax+0x0]

0000000000405660 <flatcc_builder_truncate_offset_vector@@Base>:
  405660:	sub    rsp,0x8
  405664:	mov    rax,QWORD PTR [rdi+0x30]
  405668:	cmp    WORD PTR [rax+0xe],0x5
  40566d:	jne    40569f <flatcc_builder_truncate_offset_vector@@Base+0x3f>
  40566f:	mov    edx,DWORD PTR [rax+0x14]
  405672:	cmp    edx,esi
  405674:	jb     4056be <flatcc_builder_truncate_offset_vector@@Base+0x5e>
  405676:	sub    edx,esi
  405678:	imul   esi,DWORD PTR [rax+0x10]
  40567c:	mov    DWORD PTR [rax+0x14],edx
  40567f:	mov    eax,DWORD PTR [rdi+0x20]
  405682:	mov    rcx,QWORD PTR [rdi+0x18]
  405686:	sub    eax,esi
  405688:	mov    edx,esi
  40568a:	xor    esi,esi
  40568c:	mov    DWORD PTR [rdi+0x20],eax
  40568f:	lea    rdi,[rcx+rax*1]
  405693:	call   403090 <memset@plt>
  405698:	xor    eax,eax
  40569a:	add    rsp,0x8
  40569e:	ret    
  40569f:	lea    rcx,[rip+0x465a]        # 409d00 <_IO_stdin_used@@Base+0xd00>
  4056a6:	lea    rsi,[rip+0x3e13]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4056ad:	lea    rdi,[rip+0x3f5c]        # 409610 <_IO_stdin_used@@Base+0x610>
  4056b4:	mov    edx,0x3e2
  4056b9:	call   403080 <__assert_fail@plt>
  4056be:	lea    rcx,[rip+0x463b]        # 409d00 <_IO_stdin_used@@Base+0xd00>
  4056c5:	lea    rsi,[rip+0x3df4]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4056cc:	lea    rdi,[rip+0x3fcd]        # 4096a0 <_IO_stdin_used@@Base+0x6a0>
  4056d3:	mov    edx,0x3e3
  4056d8:	call   403080 <__assert_fail@plt>
  4056dd:	nop    DWORD PTR [rax]

00000000004056e0 <flatcc_builder_truncate_string@@Base>:
  4056e0:	sub    rsp,0x8
  4056e4:	mov    rdx,QWORD PTR [rdi+0x30]
  4056e8:	cmp    WORD PTR [rdx+0xe],0x6
  4056ed:	jne    405720 <flatcc_builder_truncate_string@@Base+0x40>
  4056ef:	mov    ecx,DWORD PTR [rdx+0x14]
  4056f2:	cmp    rcx,rsi
  4056f5:	mov    rax,rcx
  4056f8:	jb     40573f <flatcc_builder_truncate_string@@Base+0x5f>
  4056fa:	sub    eax,esi
  4056fc:	mov    DWORD PTR [rdx+0x14],eax
  4056ff:	mov    eax,DWORD PTR [rdi+0x20]
  405702:	mov    rdx,QWORD PTR [rdi+0x18]
  405706:	sub    eax,esi
  405708:	mov    DWORD PTR [rdi+0x20],eax
  40570b:	lea    rdi,[rdx+rax*1]
  40570f:	mov    rdx,rsi
  405712:	xor    esi,esi
  405714:	call   403090 <memset@plt>
  405719:	xor    eax,eax
  40571b:	add    rsp,0x8
  40571f:	ret    
  405720:	lea    rcx,[rip+0x45b9]        # 409ce0 <_IO_stdin_used@@Base+0xce0>
  405727:	lea    rsi,[rip+0x3d92]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  40572e:	lea    rdi,[rip+0x3f13]        # 409648 <_IO_stdin_used@@Base+0x648>
  405735:	mov    edx,0x3eb
  40573a:	call   403080 <__assert_fail@plt>
  40573f:	lea    rcx,[rip+0x459a]        # 409ce0 <_IO_stdin_used@@Base+0xce0>
  405746:	lea    rsi,[rip+0x3d73]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  40574d:	lea    rdi,[rip+0x3f8c]        # 4096e0 <_IO_stdin_used@@Base+0x6e0>
  405754:	mov    edx,0x3ec
  405759:	call   403080 <__assert_fail@plt>
  40575e:	xchg   ax,ax

0000000000405760 <flatcc_builder_start_vector@@Base>:
  405760:	push   r12
  405762:	cmp    dx,0x4
  405766:	push   rbp
  405767:	mov    rbp,rsi
  40576a:	mov    esi,0x4
  40576f:	push   rbx
  405770:	cmovb  edx,esi
  405773:	mov    rbx,rdi
  405776:	mov    r12,rcx
  405779:	movzx  esi,dx
  40577c:	call   403ee0 <flatcc_builder_default_alloc@@Base+0x260>
  405781:	test   eax,eax
  405783:	jne    4057d0 <flatcc_builder_start_vector@@Base+0x70>
  405785:	mov    rsi,QWORD PTR [rbx+0x30]
  405789:	mov    edx,0x4
  40578e:	mov    DWORD PTR [rsi+0x10],ebp
  405791:	mov    DWORD PTR [rsi+0x14],0x0
  405798:	mov    DWORD PTR [rsi+0x18],r12d
  40579c:	mov    WORD PTR [rsi+0xe],dx
  4057a0:	mov    edx,DWORD PTR [rbx+0x28]
  4057a3:	mov    rcx,rdx
  4057a6:	add    rdx,QWORD PTR [rbx+0x68]
  4057aa:	mov    QWORD PTR [rbx+0x18],rdx
  4057ae:	mov    edx,DWORD PTR [rbx+0x70]
  4057b1:	sub    edx,ecx
  4057b3:	mov    ecx,0xfffffffc
  4057b8:	cmp    edx,ecx
  4057ba:	cmova  edx,ecx
  4057bd:	mov    DWORD PTR [rbx+0x24],edx
  4057c0:	mov    DWORD PTR [rsi+0x4],ecx
  4057c3:	pop    rbx
  4057c4:	pop    rbp
  4057c5:	pop    r12
  4057c7:	ret    
  4057c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4057d0:	mov    eax,0xffffffff
  4057d5:	jmp    4057c3 <flatcc_builder_start_vector@@Base+0x63>
  4057d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004057e0 <flatcc_builder_start_offset_vector@@Base>:
  4057e0:	push   rbx
  4057e1:	mov    esi,0x4
  4057e6:	mov    rbx,rdi
  4057e9:	call   403ee0 <flatcc_builder_default_alloc@@Base+0x260>
  4057ee:	test   eax,eax
  4057f0:	jne    405838 <flatcc_builder_start_offset_vector@@Base+0x58>
  4057f2:	mov    rcx,QWORD PTR [rbx+0x30]
  4057f6:	mov    edx,0x5
  4057fb:	mov    DWORD PTR [rcx+0x10],0x4
  405802:	mov    DWORD PTR [rcx+0x14],0x0
  405809:	mov    WORD PTR [rcx+0xe],dx
  40580d:	mov    edx,DWORD PTR [rbx+0x28]
  405810:	mov    rsi,rdx
  405813:	add    rdx,QWORD PTR [rbx+0x68]
  405817:	mov    QWORD PTR [rbx+0x18],rdx
  40581b:	mov    edx,DWORD PTR [rbx+0x70]
  40581e:	sub    edx,esi
  405820:	mov    esi,0xfffffffc
  405825:	cmp    edx,esi
  405827:	cmova  edx,esi
  40582a:	mov    DWORD PTR [rbx+0x24],edx
  40582d:	mov    DWORD PTR [rcx+0x4],esi
  405830:	pop    rbx
  405831:	ret    
  405832:	nop    WORD PTR [rax+rax*1+0x0]
  405838:	mov    eax,0xffffffff
  40583d:	pop    rbx
  40583e:	ret    
  40583f:	nop

0000000000405840 <flatcc_builder_start_string@@Base>:
  405840:	push   rbx
  405841:	mov    esi,0x1
  405846:	mov    rbx,rdi
  405849:	call   403ee0 <flatcc_builder_default_alloc@@Base+0x260>
  40584e:	test   eax,eax
  405850:	jne    405898 <flatcc_builder_start_string@@Base+0x58>
  405852:	mov    rcx,QWORD PTR [rbx+0x30]
  405856:	mov    edx,0x6
  40585b:	mov    DWORD PTR [rcx+0x10],0x1
  405862:	mov    DWORD PTR [rcx+0x14],0x0
  405869:	mov    WORD PTR [rcx+0xe],dx
  40586d:	mov    edx,DWORD PTR [rbx+0x28]
  405870:	mov    rsi,rdx
  405873:	add    rdx,QWORD PTR [rbx+0x68]
  405877:	mov    QWORD PTR [rbx+0x18],rdx
  40587b:	mov    edx,DWORD PTR [rbx+0x70]
  40587e:	sub    edx,esi
  405880:	mov    esi,0xfffffffc
  405885:	cmp    edx,esi
  405887:	cmova  edx,esi
  40588a:	mov    DWORD PTR [rbx+0x24],edx
  40588d:	mov    DWORD PTR [rcx+0x4],esi
  405890:	pop    rbx
  405891:	ret    
  405892:	nop    WORD PTR [rax+rax*1+0x0]
  405898:	mov    eax,0xffffffff
  40589d:	pop    rbx
  40589e:	ret    
  40589f:	nop

00000000004058a0 <flatcc_builder_reserve_table@@Base>:
  4058a0:	test   esi,esi
  4058a2:	push   r12
  4058a4:	push   rbp
  4058a5:	push   rbx
  4058a6:	js     40595f <flatcc_builder_reserve_table@@Base+0xbf>
  4058ac:	mov    rax,QWORD PTR [rdi+0x30]
  4058b0:	lea    r12d,[rsi+rsi*1+0x4]
  4058b5:	mov    rbx,rdi
  4058b8:	movzx  edx,WORD PTR [rax+0x1c]
  4058bc:	mov    eax,DWORD PTR [rax+0x10]
  4058bf:	lea    ebp,[rax+rdx*2]
  4058c2:	mov    edx,r12d
  4058c5:	add    rdx,rbp
  4058c8:	cmp    rdx,QWORD PTR [rdi+0x60]
  4058cc:	ja     405910 <flatcc_builder_reserve_table@@Base+0x70>
  4058ce:	add    rbp,QWORD PTR [rbx+0x58]
  4058d2:	je     405950 <flatcc_builder_reserve_table@@Base+0xb0>
  4058d4:	mov    rax,QWORD PTR [rbx+0x30]
  4058d8:	add    rbp,0x4
  4058dc:	lea    edx,[r12-0x3]
  4058e1:	mov    QWORD PTR [rbx+0x8],rbp
  4058e5:	mov    ebp,DWORD PTR [rax+0x14]
  4058e8:	add    rdx,rbp
  4058eb:	cmp    rdx,QWORD PTR [rbx+0x90]
  4058f2:	ja     405930 <flatcc_builder_reserve_table@@Base+0x90>
  4058f4:	add    rbp,QWORD PTR [rbx+0x88]
  4058fb:	xor    eax,eax
  4058fd:	test   rbp,rbp
  405900:	mov    QWORD PTR [rbx],rbp
  405903:	sete   al
  405906:	neg    eax
  405908:	pop    rbx
  405909:	pop    rbp
  40590a:	pop    r12
  40590c:	ret    
  40590d:	nop    DWORD PTR [rax]
  405910:	lea    rsi,[rdi+0x58]
  405914:	xor    r8d,r8d
  405917:	mov    rdi,QWORD PTR [rdi+0x40]
  40591b:	mov    ecx,0x1
  405920:	call   QWORD PTR [rbx+0x50]
  405923:	test   eax,eax
  405925:	je     4058ce <flatcc_builder_reserve_table@@Base+0x2e>
  405927:	call   403186 <posix_memalign@plt+0x56>
  40592c:	nop    DWORD PTR [rax+0x0]
  405930:	xor    ecx,ecx
  405932:	lea    rsi,[rbx+0x88]
  405939:	mov    rdi,QWORD PTR [rbx+0x40]
  40593d:	mov    r8d,0x3
  405943:	call   QWORD PTR [rbx+0x50]
  405946:	test   eax,eax
  405948:	je     4058f4 <flatcc_builder_reserve_table@@Base+0x54>
  40594a:	jmp    405927 <flatcc_builder_reserve_table@@Base+0x87>
  40594c:	nop    DWORD PTR [rax+0x0]
  405950:	mov    QWORD PTR [rbx+0x8],0x0
  405958:	mov    eax,0xffffffff
  40595d:	jmp    405908 <flatcc_builder_reserve_table@@Base+0x68>
  40595f:	lea    rcx,[rip+0x435a]        # 409cc0 <_IO_stdin_used@@Base+0xcc0>
  405966:	lea    rsi,[rip+0x3b53]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  40596d:	lea    rdi,[rip+0x3f3f]        # 4098b3 <_IO_stdin_used@@Base+0x8b3>
  405974:	mov    edx,0x429
  405979:	call   403080 <__assert_fail@plt>
  40597e:	xchg   ax,ax

0000000000405980 <flatcc_builder_start_table@@Base>:
  405980:	push   r13
  405982:	push   r12
  405984:	mov    r12d,esi
  405987:	push   rbp
  405988:	push   rbx
  405989:	mov    esi,0x4
  40598e:	mov    rbx,rdi
  405991:	sub    rsp,0x8
  405995:	call   403ee0 <flatcc_builder_default_alloc@@Base+0x260>
  40599a:	test   eax,eax
  40599c:	jne    405ad0 <flatcc_builder_start_table@@Base+0x150>
  4059a2:	mov    rcx,QWORD PTR [rbx+0x8]
  4059a6:	mov    ebp,eax
  4059a8:	mov    rax,QWORD PTR [rbx+0x58]
  4059ac:	mov    rdx,QWORD PTR [rbx+0x30]
  4059b0:	xor    edi,edi
  4059b2:	mov    r8d,0x3
  4059b8:	sub    rcx,rax
  4059bb:	mov    DWORD PTR [rdx+0x10],ecx
  4059be:	mov    rsi,QWORD PTR [rbx]
  4059c1:	sub    rsi,QWORD PTR [rbx+0x88]
  4059c8:	mov    DWORD PTR [rdx+0x14],esi
  4059cb:	mov    esi,DWORD PTR [rbx+0x14]
  4059ce:	mov    DWORD PTR [rdx+0x18],esi
  4059d1:	movzx  esi,WORD PTR [rbx+0x10]
  4059d5:	mov    WORD PTR [rdx+0x1c],si
  4059d9:	lea    r13d,[rcx+rsi*2]
  4059dd:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  4059e4:	mov    WORD PTR [rbx+0x10],di
  4059e8:	mov    WORD PTR [rdx+0xe],r8w
  4059ed:	lea    edx,[r12+r12*1+0x4]
  4059f2:	add    rdx,r13
  4059f5:	cmp    rdx,QWORD PTR [rbx+0x60]
  4059f9:	ja     405a78 <flatcc_builder_start_table@@Base+0xf8>
  4059fb:	add    rax,r13
  4059fe:	je     405ac8 <flatcc_builder_start_table@@Base+0x148>
  405a04:	add    rax,0x4
  405a08:	lea    edx,[r12+r12*1+0x1]
  405a0d:	mov    QWORD PTR [rbx+0x8],rax
  405a11:	mov    rax,QWORD PTR [rbx+0x30]
  405a15:	mov    r13d,DWORD PTR [rax+0x14]
  405a19:	add    rdx,r13
  405a1c:	cmp    rdx,QWORD PTR [rbx+0x90]
  405a23:	ja     405aa0 <flatcc_builder_start_table@@Base+0x120>
  405a25:	add    r13,QWORD PTR [rbx+0x88]
  405a2c:	test   r13,r13
  405a2f:	mov    QWORD PTR [rbx],r13
  405a32:	je     405ad0 <flatcc_builder_start_table@@Base+0x150>
  405a38:	mov    eax,DWORD PTR [rbx+0x28]
  405a3b:	mov    rdx,rax
  405a3e:	add    rax,QWORD PTR [rbx+0x68]
  405a42:	mov    QWORD PTR [rbx+0x18],rax
  405a46:	mov    eax,DWORD PTR [rbx+0x70]
  405a49:	sub    eax,edx
  405a4b:	mov    edx,0xfffc
  405a50:	cmp    eax,0xfffc
  405a55:	cmova  eax,edx
  405a58:	mov    DWORD PTR [rbx+0x24],eax
  405a5b:	mov    rax,QWORD PTR [rbx+0x30]
  405a5f:	mov    DWORD PTR [rax+0x4],0xfffc
  405a66:	add    rsp,0x8
  405a6a:	mov    eax,ebp
  405a6c:	pop    rbx
  405a6d:	pop    rbp
  405a6e:	pop    r12
  405a70:	pop    r13
  405a72:	ret    
  405a73:	nop    DWORD PTR [rax+rax*1+0x0]
  405a78:	xor    r8d,r8d
  405a7b:	lea    rsi,[rbx+0x58]
  405a7f:	mov    rdi,QWORD PTR [rbx+0x40]
  405a83:	mov    ecx,0x1
  405a88:	call   QWORD PTR [rbx+0x50]
  405a8b:	test   eax,eax
  405a8d:	jne    405abe <flatcc_builder_start_table@@Base+0x13e>
  405a8f:	mov    rax,QWORD PTR [rbx+0x58]
  405a93:	jmp    4059fb <flatcc_builder_start_table@@Base+0x7b>
  405a98:	nop    DWORD PTR [rax+rax*1+0x0]
  405aa0:	xor    ecx,ecx
  405aa2:	lea    rsi,[rbx+0x88]
  405aa9:	mov    rdi,QWORD PTR [rbx+0x40]
  405aad:	mov    r8d,0x3
  405ab3:	call   QWORD PTR [rbx+0x50]
  405ab6:	test   eax,eax
  405ab8:	je     405a25 <flatcc_builder_start_table@@Base+0xa5>
  405abe:	call   403186 <posix_memalign@plt+0x56>
  405ac3:	nop    DWORD PTR [rax+rax*1+0x0]
  405ac8:	mov    QWORD PTR [rbx+0x8],0x0
  405ad0:	add    rsp,0x8
  405ad4:	mov    ebp,0xffffffff
  405ad9:	pop    rbx
  405ada:	mov    eax,ebp
  405adc:	pop    rbp
  405add:	pop    r12
  405adf:	pop    r13
  405ae1:	ret    
  405ae2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  405aed:	nop    DWORD PTR [rax]

0000000000405af0 <flatcc_builder_create_vtable@@Base>:
  405af0:	push   rbp
  405af1:	push   rbx
  405af2:	mov    rbp,rdi
  405af5:	sub    rsp,0xa8
  405afc:	mov    rax,QWORD PTR fs:0x28
  405b05:	mov    QWORD PTR [rsp+0x98],rax
  405b0d:	xor    eax,eax
  405b0f:	test   dx,dx
  405b12:	mov    QWORD PTR [rsp],0x0
  405b1a:	mov    DWORD PTR [rsp+0x8],0x0
  405b22:	je     405bb0 <flatcc_builder_create_vtable@@Base+0xc0>
  405b28:	mov    QWORD PTR [rsp+0x10],rsi
  405b2d:	mov    esi,DWORD PTR [rdi+0x100]
  405b33:	movzx  r8d,dx
  405b37:	mov    QWORD PTR [rsp],r8
  405b3b:	mov    QWORD PTR [rsp+0x18],r8
  405b40:	movzx  edx,dx
  405b43:	mov    DWORD PTR [rsp+0x8],0x1
  405b4b:	test   esi,esi
  405b4d:	je     405be8 <flatcc_builder_create_vtable@@Base+0xf8>
  405b53:	mov    eax,DWORD PTR [rbp+0xf0]
  405b59:	mov    ebx,eax
  405b5b:	sub    ebx,edx
  405b5d:	cmp    eax,ebx
  405b5f:	jle    405bc4 <flatcc_builder_create_vtable@@Base+0xd4>
  405b61:	lea    rsi,[rsp+0x10]
  405b66:	mov    rdi,QWORD PTR [rbp+0x38]
  405b6a:	mov    ecx,ebx
  405b6c:	mov    edx,DWORD PTR [rsp+0x8]
  405b70:	call   QWORD PTR [rbp+0x48]
  405b73:	test   eax,eax
  405b75:	jne    405c40 <flatcc_builder_create_vtable@@Base+0x150>
  405b7b:	cmp    ebx,0x1
  405b7e:	mov    DWORD PTR [rbp+0xf0],ebx
  405b84:	sbb    ebx,0xffffffff
  405b87:	mov    rcx,QWORD PTR [rsp+0x98]
  405b8f:	xor    rcx,QWORD PTR fs:0x28
  405b98:	mov    eax,ebx
  405b9a:	jne    405c3b <flatcc_builder_create_vtable@@Base+0x14b>
  405ba0:	add    rsp,0xa8
  405ba7:	pop    rbx
  405ba8:	pop    rbp
  405ba9:	ret    
  405baa:	nop    WORD PTR [rax+rax*1+0x0]
  405bb0:	mov    edx,DWORD PTR [rdi+0x100]
  405bb6:	test   edx,edx
  405bb8:	jne    405bc4 <flatcc_builder_create_vtable@@Base+0xd4>
  405bba:	mov    eax,DWORD PTR [rdi+0x124]
  405bc0:	test   eax,eax
  405bc2:	je     405c30 <flatcc_builder_create_vtable@@Base+0x140>
  405bc4:	lea    rcx,[rip+0x4325]        # 409ef0 <_IO_stdin_used@@Base+0xef0>
  405bcb:	lea    rsi,[rip+0x38ee]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  405bd2:	lea    rdi,[rip+0x3c7e]        # 409857 <_IO_stdin_used@@Base+0x857>
  405bd9:	mov    edx,0x287
  405bde:	call   403080 <__assert_fail@plt>
  405be3:	nop    DWORD PTR [rax+rax*1+0x0]
  405be8:	mov    ecx,DWORD PTR [rdi+0x124]
  405bee:	test   ecx,ecx
  405bf0:	jne    405b53 <flatcc_builder_create_vtable@@Base+0x63>
  405bf6:	mov    ebx,DWORD PTR [rdi+0xf4]
  405bfc:	add    edx,ebx
  405bfe:	cmp    ebx,edx
  405c00:	mov    DWORD PTR [rdi+0xf4],edx
  405c06:	jg     405c64 <flatcc_builder_create_vtable@@Base+0x174>
  405c08:	lea    rsi,[rsp+0x10]
  405c0d:	mov    rdi,QWORD PTR [rbp+0x38]
  405c11:	mov    ecx,ebx
  405c13:	mov    edx,DWORD PTR [rsp+0x8]
  405c17:	call   QWORD PTR [rbp+0x48]
  405c1a:	test   eax,eax
  405c1c:	jne    405c45 <flatcc_builder_create_vtable@@Base+0x155>
  405c1e:	add    ebx,0x1
  405c21:	jmp    405b87 <flatcc_builder_create_vtable@@Base+0x97>
  405c26:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405c30:	mov    ebx,DWORD PTR [rbp+0xf4]
  405c36:	xor    r8d,r8d
  405c39:	jmp    405c08 <flatcc_builder_create_vtable@@Base+0x118>
  405c3b:	call   403060 <__stack_chk_fail@plt>
  405c40:	call   4031cc <posix_memalign@plt+0x9c>
  405c45:	lea    rcx,[rip+0x42b4]        # 409f00 <_IO_stdin_used@@Base+0xf00>
  405c4c:	lea    rsi,[rip+0x386d]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  405c53:	lea    rdi,[rip+0x3bfd]        # 409857 <_IO_stdin_used@@Base+0x857>
  405c5a:	mov    edx,0x2a5
  405c5f:	call   403080 <__assert_fail@plt>
  405c64:	call   4031a9 <posix_memalign@plt+0x79>
  405c69:	nop    DWORD PTR [rax+0x0]

0000000000405c70 <flatcc_builder_create_cached_vtable@@Base>:
  405c70:	push   r15
  405c72:	push   r14
  405c74:	mov    r15,rdi
  405c77:	push   r13
  405c79:	push   r12
  405c7b:	movzx  r14d,dx
  405c7f:	push   rbp
  405c80:	push   rbx
  405c81:	mov    ebp,ecx
  405c83:	sub    rsp,0x38
  405c87:	mov    rbx,QWORD PTR [rdi+0xd8]
  405c8e:	mov    QWORD PTR [rsp+0x10],rsi
  405c93:	mov    DWORD PTR [rsp+0x2c],edx
  405c97:	test   rbx,rbx
  405c9a:	je     405e28 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
  405ca0:	mov    eax,0x20
  405ca5:	sub    eax,ebx
  405ca7:	shrx   ebp,ebp,eax
  405cac:	mov    rax,QWORD PTR [r15+0xa8]
  405cb3:	lea    r12,[rax+rbp*4]
  405cb7:	test   r12,r12
  405cba:	je     405e10 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405cc0:	mov    ebp,DWORD PTR [r12]
  405cc4:	test   ebp,ebp
  405cc6:	je     405f30 <flatcc_builder_create_cached_vtable@@Base+0x2c0>
  405ccc:	movzx  eax,r14w
  405cd0:	mov    r11,QWORD PTR [r15+0xb8]
  405cd7:	mov    r8,QWORD PTR [r15+0x78]
  405cdb:	mov    r13,r12
  405cde:	mov    QWORD PTR [rsp+0x20],0x0
  405ce7:	mov    QWORD PTR [rsp+0x18],rax
  405cec:	jmp    405cfb <flatcc_builder_create_cached_vtable@@Base+0x8b>
  405cee:	xchg   ax,ax
  405cf0:	mov    ebp,DWORD PTR [rbx+0xc]
  405cf3:	lea    r13,[rbx+0xc]
  405cf7:	test   ebp,ebp
  405cf9:	je     405d58 <flatcc_builder_create_cached_vtable@@Base+0xe8>
  405cfb:	mov    ebx,ebp
  405cfd:	add    rbx,r11
  405d00:	mov    esi,DWORD PTR [rbx+0x8]
  405d03:	add    rsi,r8
  405d06:	cmp    WORD PTR [rsi],r14w
  405d0a:	jne    405cf0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  405d0c:	mov    rdx,QWORD PTR [rsp+0x18]
  405d11:	mov    rdi,QWORD PTR [rsp+0x10]
  405d16:	mov    QWORD PTR [rsp+0x8],r8
  405d1b:	mov    QWORD PTR [rsp],r11
  405d1f:	call   4030b0 <memcmp@plt>
  405d24:	test   eax,eax
  405d26:	mov    r11,QWORD PTR [rsp]
  405d2a:	mov    r8,QWORD PTR [rsp+0x8]
  405d2f:	jne    405cf0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  405d31:	mov    eax,DWORD PTR [r15+0x100]
  405d38:	cmp    DWORD PTR [rbx+0x4],eax
  405d3b:	je     405de0 <flatcc_builder_create_cached_vtable@@Base+0x170>
  405d41:	mov    ebp,DWORD PTR [rbx+0xc]
  405d44:	lea    r13,[rbx+0xc]
  405d48:	mov    QWORD PTR [rsp+0x20],rbx
  405d4d:	test   ebp,ebp
  405d4f:	jne    405cfb <flatcc_builder_create_cached_vtable@@Base+0x8b>
  405d51:	nop    DWORD PTR [rax+0x0]
  405d58:	mov    ebx,DWORD PTR [r15+0xe4]
  405d5f:	lea    rdx,[rbx+0x10]
  405d63:	cmp    rdx,QWORD PTR [r15+0xc0]
  405d6a:	ja     405f08 <flatcc_builder_create_cached_vtable@@Base+0x298>
  405d70:	add    rbx,QWORD PTR [r15+0xb8]
  405d77:	je     405e10 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405d7d:	mov    eax,DWORD PTR [r15+0xe4]
  405d84:	movzx  ebp,WORD PTR [rsp+0x2c]
  405d89:	mov    rdi,r15
  405d8c:	mov    rsi,QWORD PTR [rsp+0x10]
  405d91:	lea    edx,[rax+0x10]
  405d94:	mov    DWORD PTR [r15+0xe4],edx
  405d9b:	mov    edx,DWORD PTR [r15+0x100]
  405da2:	mov    DWORD PTR [rbx+0x4],edx
  405da5:	mov    edx,DWORD PTR [r12]
  405da9:	mov    DWORD PTR [rbx+0xc],edx
  405dac:	mov    DWORD PTR [r12],eax
  405db0:	mov    edx,ebp
  405db2:	call   405af0 <flatcc_builder_create_vtable@@Base>
  405db7:	test   eax,eax
  405db9:	mov    DWORD PTR [rbx],eax
  405dbb:	je     405e10 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405dbd:	mov    rdi,QWORD PTR [rsp+0x20]
  405dc2:	test   rdi,rdi
  405dc5:	je     405f3e <flatcc_builder_create_cached_vtable@@Base+0x2ce>
  405dcb:	mov    edx,DWORD PTR [rdi+0x8]
  405dce:	mov    DWORD PTR [rbx+0x8],edx
  405dd1:	add    rsp,0x38
  405dd5:	pop    rbx
  405dd6:	pop    rbp
  405dd7:	pop    r12
  405dd9:	pop    r13
  405ddb:	pop    r14
  405ddd:	pop    r15
  405ddf:	ret    
  405de0:	cmp    r12,r13
  405de3:	je     405df7 <flatcc_builder_create_cached_vtable@@Base+0x187>
  405de5:	mov    eax,DWORD PTR [rbx+0xc]
  405de8:	mov    DWORD PTR [r13+0x0],eax
  405dec:	mov    eax,DWORD PTR [r12]
  405df0:	mov    DWORD PTR [rbx+0xc],eax
  405df3:	mov    DWORD PTR [r12],ebp
  405df7:	mov    eax,DWORD PTR [rbx]
  405df9:	add    rsp,0x38
  405dfd:	pop    rbx
  405dfe:	pop    rbp
  405dff:	pop    r12
  405e01:	pop    r13
  405e03:	pop    r14
  405e05:	pop    r15
  405e07:	ret    
  405e08:	nop    DWORD PTR [rax+rax*1+0x0]
  405e10:	add    rsp,0x38
  405e14:	xor    eax,eax
  405e16:	pop    rbx
  405e17:	pop    rbp
  405e18:	pop    r12
  405e1a:	pop    r13
  405e1c:	pop    r14
  405e1e:	pop    r15
  405e20:	ret    
  405e21:	nop    DWORD PTR [rax+0x0]
  405e28:	mov    eax,DWORD PTR [rdi+0xe4]
  405e2e:	lea    r12,[rdi+0xa8]
  405e35:	test   eax,eax
  405e37:	jne    405fcf <flatcc_builder_create_cached_vtable@@Base+0x35f>
  405e3d:	cmp    QWORD PTR [rdi+0xc0],0xf
  405e45:	jbe    405ed8 <flatcc_builder_create_cached_vtable@@Base+0x268>
  405e4b:	cmp    QWORD PTR [r15+0xb8],0x0
  405e53:	je     405e10 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405e55:	mov    DWORD PTR [r15+0xe4],0x10
  405e60:	mov    rdi,QWORD PTR [r15+0x40]
  405e64:	mov    r8d,0x5
  405e6a:	mov    ecx,0x1
  405e6f:	mov    edx,0x100
  405e74:	mov    rsi,r12
  405e77:	call   QWORD PTR [r15+0x50]
  405e7b:	test   eax,eax
  405e7d:	jne    405e10 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405e7f:	mov    rcx,QWORD PTR [r15+0xb0]
  405e86:	mov    eax,0x100
  405e8b:	jmp    405e93 <flatcc_builder_create_cached_vtable@@Base+0x223>
  405e8d:	nop    DWORD PTR [rax]
  405e90:	mov    rax,rdx
  405e93:	lea    rdx,[rax+rax*1]
  405e97:	cmp    rdx,rcx
  405e9a:	jbe    405e90 <flatcc_builder_create_cached_vtable@@Base+0x220>
  405e9c:	shr    rax,0x2
  405ea0:	cmp    rax,0x1
  405ea4:	jbe    405f98 <flatcc_builder_create_cached_vtable@@Base+0x328>
  405eaa:	mov    esi,0x1
  405eaf:	nop
  405eb0:	add    rbx,0x1
  405eb4:	shlx   rdx,rsi,rbx
  405eb9:	cmp    rax,rdx
  405ebc:	ja     405eb0 <flatcc_builder_create_cached_vtable@@Base+0x240>
  405ebe:	mov    eax,0x20
  405ec3:	sub    eax,ebx
  405ec5:	mov    QWORD PTR [r15+0xd8],rbx
  405ecc:	jmp    405ca7 <flatcc_builder_create_cached_vtable@@Base+0x37>
  405ed1:	nop    DWORD PTR [rax+0x0]
  405ed8:	lea    rsi,[rdi+0xb8]
  405edf:	xor    ecx,ecx
  405ee1:	mov    rdi,QWORD PTR [rdi+0x40]
  405ee5:	mov    r8d,0x6
  405eeb:	mov    edx,0x10
  405ef0:	call   QWORD PTR [r15+0x50]
  405ef4:	test   eax,eax
  405ef6:	je     405e4b <flatcc_builder_create_cached_vtable@@Base+0x1db>
  405efc:	jmp    405fba <flatcc_builder_create_cached_vtable@@Base+0x34a>
  405f01:	nop    DWORD PTR [rax+0x0]
  405f08:	xor    ecx,ecx
  405f0a:	lea    rsi,[r15+0xb8]
  405f11:	mov    rdi,QWORD PTR [r15+0x40]
  405f15:	mov    r8d,0x6
  405f1b:	call   QWORD PTR [r15+0x50]
  405f1f:	test   eax,eax
  405f21:	je     405d70 <flatcc_builder_create_cached_vtable@@Base+0x100>
  405f27:	jmp    405fba <flatcc_builder_create_cached_vtable@@Base+0x34a>
  405f2c:	nop    DWORD PTR [rax+0x0]
  405f30:	mov    QWORD PTR [rsp+0x20],0x0
  405f39:	jmp    405d58 <flatcc_builder_create_cached_vtable@@Base+0xe8>
  405f3e:	mov    rax,QWORD PTR [r15+0x118]
  405f45:	mov    r12d,DWORD PTR [r15+0xe0]
  405f4c:	test   rax,rax
  405f4f:	je     405f5b <flatcc_builder_create_cached_vtable@@Base+0x2eb>
  405f51:	lea    edx,[rbp+r12*1+0x0]
  405f56:	cmp    rax,rdx
  405f59:	jb     405fc0 <flatcc_builder_create_cached_vtable@@Base+0x350>
  405f5b:	lea    rdx,[r14+r12*1]
  405f5f:	cmp    rdx,QWORD PTR [r15+0x80]
  405f66:	ja     405fa2 <flatcc_builder_create_cached_vtable@@Base+0x332>
  405f68:	mov    rdi,r12
  405f6b:	add    rdi,QWORD PTR [r15+0x78]
  405f6f:	je     405fee <flatcc_builder_create_cached_vtable@@Base+0x37e>
  405f71:	mov    eax,DWORD PTR [r15+0xe0]
  405f78:	mov    rsi,QWORD PTR [rsp+0x10]
  405f7d:	mov    rdx,r14
  405f80:	add    ebp,eax
  405f82:	mov    DWORD PTR [rbx+0x8],eax
  405f85:	mov    DWORD PTR [r15+0xe0],ebp
  405f8c:	call   4030d0 <memcpy@plt>
  405f91:	mov    eax,DWORD PTR [rbx]
  405f93:	jmp    405dd1 <flatcc_builder_create_cached_vtable@@Base+0x161>
  405f98:	mov    eax,0x20
  405f9d:	jmp    405ec5 <flatcc_builder_create_cached_vtable@@Base+0x255>
  405fa2:	xor    ecx,ecx
  405fa4:	lea    rsi,[r15+0x78]
  405fa8:	mov    rdi,QWORD PTR [r15+0x40]
  405fac:	mov    r8d,0x2
  405fb2:	call   QWORD PTR [r15+0x50]
  405fb6:	test   eax,eax
  405fb8:	je     405f68 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
  405fba:	call   403186 <posix_memalign@plt+0x56>
  405fbf:	nop
  405fc0:	mov    rdi,r15
  405fc3:	call   404240 <flatcc_builder_flush_vtable_cache@@Base>
  405fc8:	mov    eax,DWORD PTR [rbx]
  405fca:	jmp    405df9 <flatcc_builder_create_cached_vtable@@Base+0x189>
  405fcf:	lea    rcx,[rip+0x3cda]        # 409cb0 <_IO_stdin_used@@Base+0xcb0>
  405fd6:	lea    rsi,[rip+0x34e3]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  405fdd:	lea    rdi,[rip+0x38b9]        # 40989d <_IO_stdin_used@@Base+0x89d>
  405fe4:	mov    edx,0x156
  405fe9:	call   403080 <__assert_fail@plt>
  405fee:	mov    eax,0xffffffff
  405ff3:	jmp    405dd1 <flatcc_builder_create_cached_vtable@@Base+0x161>
  405ff8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406000 <flatcc_builder_create_table@@Base>:
  406000:	push   rbp
  406001:	push   rbx
  406002:	sub    rsp,0xb8
  406009:	mov    rax,QWORD PTR fs:0x28
  406012:	mov    QWORD PTR [rsp+0xa8],rax
  40601a:	xor    eax,eax
  40601c:	test   r9d,r9d
  40601f:	mov    r11d,DWORD PTR [rsp+0xd0]
  406027:	js     4061cd <flatcc_builder_create_table@@Base+0x1cd>
  40602d:	test   r11b,0x1
  406031:	je     4061ae <flatcc_builder_create_table@@Base+0x1ae>
  406037:	cmp    cx,0x4
  40603b:	mov    eax,0x4
  406040:	mov    rbx,rdi
  406043:	cmovb  ecx,eax
  406046:	cmp    WORD PTR [rdi+0xe8],cx
  40604d:	movzx  eax,cx
  406050:	jae    406059 <flatcc_builder_create_table@@Base+0x59>
  406052:	mov    WORD PTR [rdi+0xe8],cx
  406059:	mov    ecx,DWORD PTR [rbx+0xf0]
  40605f:	sub    eax,0x1
  406062:	mov    edi,0xfffffffc
  406067:	sub    r11d,0x1
  40606b:	mov    r10d,ecx
  40606e:	sub    r10d,edx
  406071:	and    r10d,eax
  406074:	mov    eax,edi
  406076:	sub    eax,edx
  406078:	add    eax,ecx
  40607a:	sub    eax,r10d
  40607d:	mov    ebp,eax
  40607f:	sub    ebp,r11d
  406082:	test   r9d,r9d
  406085:	mov    DWORD PTR [rsp+0xc],ebp
  406089:	je     4060bd <flatcc_builder_create_table@@Base+0xbd>
  40608b:	lea    ecx,[r9-0x1]
  40608f:	sub    edi,eax
  406091:	lea    r9,[r8+rcx*2+0x2]
  406096:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4060a0:	movzx  ecx,WORD PTR [r8]
  4060a4:	mov    r11d,edi
  4060a7:	add    r8,0x2
  4060ab:	sub    r11d,ecx
  4060ae:	add    DWORD PTR [rsi+rcx*1],r11d
  4060b2:	cmp    r9,r8
  4060b5:	jne    4060a0 <flatcc_builder_create_table@@Base+0xa0>
  4060b7:	mov    ecx,DWORD PTR [rbx+0xf0]
  4060bd:	lea    rax,[rsp+0xc]
  4060c2:	test   rdx,rdx
  4060c5:	mov    QWORD PTR [rsp+0x10],0x4
  4060ce:	mov    QWORD PTR [rsp+0x28],0x4
  4060d7:	mov    DWORD PTR [rsp+0x18],0x1
  4060df:	mov    r8d,0x4
  4060e5:	mov    QWORD PTR [rsp+0x20],rax
  4060ea:	je     406107 <flatcc_builder_create_table@@Base+0x107>
  4060ec:	lea    r8,[rdx+0x4]
  4060f0:	mov    QWORD PTR [rsp+0x30],rsi
  4060f5:	mov    QWORD PTR [rsp+0x38],rdx
  4060fa:	mov    DWORD PTR [rsp+0x18],0x2
  406102:	mov    QWORD PTR [rsp+0x10],r8
  406107:	test   r10d,r10d
  40610a:	je     406138 <flatcc_builder_create_table@@Base+0x138>
  40610c:	movsxd rdx,DWORD PTR [rsp+0x18]
  406111:	mov    rsi,0x409fa0
  406118:	add    r8,r10
  40611b:	mov    QWORD PTR [rsp+0x10],r8
  406120:	mov    rax,rdx
  406123:	shl    rdx,0x4
  406127:	add    eax,0x1
  40612a:	mov    QWORD PTR [rsp+rdx*1+0x20],rsi
  40612f:	mov    QWORD PTR [rsp+rdx*1+0x28],r10
  406134:	mov    DWORD PTR [rsp+0x18],eax
  406138:	mov    ebp,ecx
  40613a:	movabs rax,0x10000000f
  406144:	sub    ebp,r8d
  406147:	cmp    r8,rax
  40614a:	ja     40618f <flatcc_builder_create_table@@Base+0x18f>
  40614c:	cmp    ebp,ecx
  40614e:	jge    40618f <flatcc_builder_create_table@@Base+0x18f>
  406150:	lea    rsi,[rsp+0x20]
  406155:	mov    rdi,QWORD PTR [rbx+0x38]
  406159:	mov    ecx,ebp
  40615b:	mov    edx,DWORD PTR [rsp+0x18]
  40615f:	call   QWORD PTR [rbx+0x48]
  406162:	test   eax,eax
  406164:	jne    4061f1 <flatcc_builder_create_table@@Base+0x1f1>
  40616a:	mov    DWORD PTR [rbx+0xf0],ebp
  406170:	mov    eax,ebp
  406172:	mov    rbx,QWORD PTR [rsp+0xa8]
  40617a:	xor    rbx,QWORD PTR fs:0x28
  406183:	jne    4061ec <flatcc_builder_create_table@@Base+0x1ec>
  406185:	add    rsp,0xb8
  40618c:	pop    rbx
  40618d:	pop    rbp
  40618e:	ret    
  40618f:	lea    rcx,[rip+0x3d5a]        # 409ef0 <_IO_stdin_used@@Base+0xef0>
  406196:	lea    rsi,[rip+0x3323]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  40619d:	lea    rdi,[rip+0x36b3]        # 409857 <_IO_stdin_used@@Base+0x857>
  4061a4:	mov    edx,0x287
  4061a9:	call   403080 <__assert_fail@plt>
  4061ae:	lea    rcx,[rip+0x3adb]        # 409c90 <_IO_stdin_used@@Base+0xc90>
  4061b5:	lea    rsi,[rip+0x3304]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4061bc:	lea    rdi,[rip+0x36fb]        # 4098be <_IO_stdin_used@@Base+0x8be>
  4061c3:	mov    edx,0x4db
  4061c8:	call   403080 <__assert_fail@plt>
  4061cd:	lea    rcx,[rip+0x3abc]        # 409c90 <_IO_stdin_used@@Base+0xc90>
  4061d4:	lea    rsi,[rip+0x32e5]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4061db:	lea    rdi,[rip+0x36ca]        # 4098ac <_IO_stdin_used@@Base+0x8ac>
  4061e2:	mov    edx,0x4d5
  4061e7:	call   403080 <__assert_fail@plt>
  4061ec:	call   403060 <__stack_chk_fail@plt>
  4061f1:	call   4031cc <posix_memalign@plt+0x9c>
  4061f6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000406200 <flatcc_builder_check_required_field@@Base>:
  406200:	mov    rax,QWORD PTR [rdi+0x30]
  406204:	cmp    WORD PTR [rax+0xe],0x3
  406209:	jne    406226 <flatcc_builder_check_required_field@@Base+0x26>
  40620b:	xor    eax,eax
  40620d:	cmp    WORD PTR [rdi+0x10],si
  406211:	jbe    406222 <flatcc_builder_check_required_field@@Base+0x22>
  406213:	mov    rax,QWORD PTR [rdi+0x8]
  406217:	movzx  edx,si
  40621a:	cmp    WORD PTR [rax+rdx*2],0x0
  40621f:	setne  al
  406222:	movzx  eax,al
  406225:	ret    
  406226:	lea    rcx,[rip+0x3a33]        # 409c60 <_IO_stdin_used@@Base+0xc60>
  40622d:	lea    rsi,[rip+0x328c]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  406234:	lea    rdi,[rip+0x34cd]        # 409708 <_IO_stdin_used@@Base+0x708>
  40623b:	sub    rsp,0x8
  40623f:	mov    edx,0x4f8
  406244:	call   403080 <__assert_fail@plt>
  406249:	nop    DWORD PTR [rax+0x0]

0000000000406250 <flatcc_builder_check_union_field@@Base>:
  406250:	mov    rax,QWORD PTR [rdi+0x30]
  406254:	cmp    WORD PTR [rax+0xe],0x3
  406259:	jne    40629b <flatcc_builder_check_union_field@@Base+0x4b>
  40625b:	xor    eax,eax
  40625d:	test   si,si
  406260:	je     40628d <flatcc_builder_check_union_field@@Base+0x3d>
  406262:	cmp    si,WORD PTR [rdi+0x10]
  406266:	jae    40628d <flatcc_builder_check_union_field@@Base+0x3d>
  406268:	mov    rcx,QWORD PTR [rdi+0x8]
  40626c:	movzx  edx,si
  40626f:	movzx  eax,WORD PTR [rcx+rdx*2-0x2]
  406274:	test   ax,ax
  406277:	je     406283 <flatcc_builder_check_union_field@@Base+0x33>
  406279:	mov    rsi,QWORD PTR [rdi+0x18]
  40627d:	cmp    BYTE PTR [rsi+rax*1],0x0
  406281:	jne    406290 <flatcc_builder_check_union_field@@Base+0x40>
  406283:	xor    eax,eax
  406285:	cmp    WORD PTR [rcx+rdx*2],0x0
  40628a:	sete   al
  40628d:	repz ret 
  40628f:	nop
  406290:	xor    eax,eax
  406292:	cmp    WORD PTR [rcx+rdx*2],0x0
  406297:	setne  al
  40629a:	ret    
  40629b:	lea    rcx,[rip+0x397e]        # 409c20 <_IO_stdin_used@@Base+0xc20>
  4062a2:	lea    rsi,[rip+0x3217]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4062a9:	lea    rdi,[rip+0x3458]        # 409708 <_IO_stdin_used@@Base+0x708>
  4062b0:	sub    rsp,0x8
  4062b4:	mov    edx,0x4ff
  4062b9:	call   403080 <__assert_fail@plt>
  4062be:	xchg   ax,ax

00000000004062c0 <flatcc_builder_check_required@@Base>:
  4062c0:	mov    rax,QWORD PTR [rdi+0x30]
  4062c4:	cmp    WORD PTR [rax+0xe],0x3
  4062c9:	jne    40631b <flatcc_builder_check_required@@Base+0x5b>
  4062cb:	movzx  ecx,WORD PTR [rdi+0x10]
  4062cf:	xor    eax,eax
  4062d1:	cmp    ecx,edx
  4062d3:	jl     406310 <flatcc_builder_check_required@@Base+0x50>
  4062d5:	test   edx,edx
  4062d7:	jle    40630b <flatcc_builder_check_required@@Base+0x4b>
  4062d9:	mov    rcx,QWORD PTR [rdi+0x8]
  4062dd:	movzx  edi,WORD PTR [rsi]
  4062e0:	cmp    WORD PTR [rcx+rdi*2],0x0
  4062e5:	je     406310 <flatcc_builder_check_required@@Base+0x50>
  4062e7:	sub    edx,0x1
  4062ea:	lea    rax,[rsi+0x2]
  4062ee:	lea    rsi,[rsi+rdx*2+0x2]
  4062f3:	jmp    406306 <flatcc_builder_check_required@@Base+0x46>
  4062f5:	nop    DWORD PTR [rax]
  4062f8:	movzx  edx,WORD PTR [rax]
  4062fb:	add    rax,0x2
  4062ff:	cmp    WORD PTR [rcx+rdx*2],0x0
  406304:	je     406318 <flatcc_builder_check_required@@Base+0x58>
  406306:	cmp    rax,rsi
  406309:	jne    4062f8 <flatcc_builder_check_required@@Base+0x38>
  40630b:	mov    eax,0x1
  406310:	repz ret 
  406312:	nop    WORD PTR [rax+rax*1+0x0]
  406318:	xor    eax,eax
  40631a:	ret    
  40631b:	lea    rcx,[rip+0x38ce]        # 409bf0 <_IO_stdin_used@@Base+0xbf0>
  406322:	lea    rsi,[rip+0x3197]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  406329:	lea    rdi,[rip+0x33d8]        # 409708 <_IO_stdin_used@@Base+0x708>
  406330:	sub    rsp,0x8
  406334:	mov    edx,0x511
  406339:	call   403080 <__assert_fail@plt>
  40633e:	xchg   ax,ax

0000000000406340 <flatcc_builder_end_table@@Base>:
  406340:	push   r13
  406342:	push   r12
  406344:	push   rbp
  406345:	push   rbx
  406346:	sub    rsp,0x8
  40634a:	mov    rax,QWORD PTR [rdi+0x30]
  40634e:	cmp    WORD PTR [rax+0xe],0x3
  406353:	jne    4064ae <flatcc_builder_end_table@@Base+0x16e>
  406359:	movzx  ebp,WORD PTR [rdi+0x10]
  40635d:	movzx  eax,WORD PTR [rdi+0x20]
  406361:	mov    rbx,rdi
  406364:	mov    rcx,QWORD PTR [rdi+0x8]
  406368:	add    ebp,0x2
  40636b:	add    eax,0x4
  40636e:	lea    r12,[rcx-0x4]
  406372:	add    ebp,ebp
  406374:	mov    WORD PTR [rcx-0x2],ax
  406378:	movzx  eax,ax
  40637b:	mov    WORD PTR [rcx-0x4],bp
  40637f:	mov    ecx,DWORD PTR [rdi+0x14]
  406382:	movzx  edx,bp
  406385:	mov    rsi,r12
  406388:	xor    ecx,edx
  40638a:	imul   ecx,ecx,0x9e3779b1
  406390:	xor    ecx,eax
  406392:	imul   ecx,ecx,0x9e3779b1
  406398:	mov    DWORD PTR [rdi+0x14],ecx
  40639b:	call   405c70 <flatcc_builder_create_cached_vtable@@Base>
  4063a0:	test   eax,eax
  4063a2:	mov    r13d,eax
  4063a5:	jne    4063c0 <flatcc_builder_end_table@@Base+0x80>
  4063a7:	add    rsp,0x8
  4063ab:	xor    ebp,ebp
  4063ad:	pop    rbx
  4063ae:	mov    eax,ebp
  4063b0:	pop    rbp
  4063b1:	pop    r12
  4063b3:	pop    r13
  4063b5:	ret    
  4063b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4063c0:	movzx  edx,bp
  4063c3:	xor    esi,esi
  4063c5:	mov    rdi,r12
  4063c8:	call   403090 <memset@plt>
  4063cd:	mov    rax,QWORD PTR [rbx+0x30]
  4063d1:	mov    r9,QWORD PTR [rbx]
  4063d4:	sub    rsp,0x8
  4063d8:	mov    edx,DWORD PTR [rbx+0x20]
  4063db:	movzx  ecx,WORD PTR [rbx+0xea]
  4063e2:	mov    rdi,rbx
  4063e5:	mov    rsi,QWORD PTR [rbx+0x18]
  4063e9:	mov    r8d,DWORD PTR [rax+0x14]
  4063ed:	add    r8,QWORD PTR [rbx+0x88]
  4063f4:	push   r13
  4063f6:	sub    r9,r8
  4063f9:	shr    r9,1
  4063fc:	call   406000 <flatcc_builder_create_table@@Base>
  406401:	mov    ebp,eax
  406403:	test   ebp,ebp
  406405:	pop    rax
  406406:	pop    rdx
  406407:	je     4063a7 <flatcc_builder_end_table@@Base+0x67>
  406409:	mov    rax,QWORD PTR [rbx+0x30]
  40640d:	mov    rdi,QWORD PTR [rbx+0x18]
  406411:	xor    esi,esi
  406413:	mov    edx,DWORD PTR [rax+0x18]
  406416:	mov    DWORD PTR [rbx+0x14],edx
  406419:	movzx  edx,WORD PTR [rax+0x1c]
  40641d:	mov    WORD PTR [rbx+0x10],dx
  406421:	mov    edx,DWORD PTR [rax+0x10]
  406424:	add    rdx,QWORD PTR [rbx+0x58]
  406428:	mov    QWORD PTR [rbx+0x8],rdx
  40642c:	mov    eax,DWORD PTR [rax+0x14]
  40642f:	add    rax,QWORD PTR [rbx+0x88]
  406436:	mov    edx,DWORD PTR [rbx+0x20]
  406439:	mov    QWORD PTR [rbx],rax
  40643c:	call   403090 <memset@plt>
  406441:	mov    rax,QWORD PTR [rbx+0x30]
  406445:	mov    edi,DWORD PTR [rbx+0x70]
  406448:	mov    esi,DWORD PTR [rax]
  40644a:	mov    edx,DWORD PTR [rax+0x8]
  40644d:	mov    ecx,DWORD PTR [rax+0x4]
  406450:	mov    DWORD PTR [rbx+0x20],edx
  406453:	mov    rdx,rsi
  406456:	mov    DWORD PTR [rbx+0x28],esi
  406459:	add    rsi,QWORD PTR [rbx+0x68]
  40645d:	sub    edi,edx
  40645f:	cmp    ecx,edi
  406461:	mov    edx,edi
  406463:	cmovb  edx,ecx
  406466:	mov    DWORD PTR [rbx+0x24],edx
  406469:	movzx  edx,WORD PTR [rbx+0xea]
  406470:	cmp    dx,WORD PTR [rbx+0xe8]
  406477:	mov    QWORD PTR [rbx+0x18],rsi
  40647b:	mov    DWORD PTR [rax+0x4],ecx
  40647e:	jbe    406487 <flatcc_builder_end_table@@Base+0x147>
  406480:	mov    WORD PTR [rbx+0xe8],dx
  406487:	movzx  edx,WORD PTR [rax+0xc]
  40648b:	sub    rax,0x24
  40648f:	sub    DWORD PTR [rbx+0x104],0x1
  406496:	mov    QWORD PTR [rbx+0x30],rax
  40649a:	mov    eax,ebp
  40649c:	mov    WORD PTR [rbx+0xea],dx
  4064a3:	add    rsp,0x8
  4064a7:	pop    rbx
  4064a8:	pop    rbp
  4064a9:	pop    r12
  4064ab:	pop    r13
  4064ad:	ret    
  4064ae:	lea    rcx,[rip+0x371b]        # 409bd0 <_IO_stdin_used@@Base+0xbd0>
  4064b5:	lea    rsi,[rip+0x3004]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4064bc:	lea    rdi,[rip+0x3245]        # 409708 <_IO_stdin_used@@Base+0x708>
  4064c3:	mov    edx,0x525
  4064c8:	call   403080 <__assert_fail@plt>
  4064cd:	nop    DWORD PTR [rax]

00000000004064d0 <flatcc_builder_create_vector@@Base>:
  4064d0:	push   rbp
  4064d1:	push   rbx
  4064d2:	sub    rsp,0xb8
  4064d9:	mov    rax,QWORD PTR fs:0x28
  4064e2:	mov    QWORD PTR [rsp+0xa8],rax
  4064ea:	xor    eax,eax
  4064ec:	cmp    rdx,r9
  4064ef:	ja     406634 <flatcc_builder_create_vector@@Base+0x164>
  4064f5:	mov    rbx,rdi
  4064f8:	cmp    r8w,0x4
  4064fd:	mov    eax,0x4
  406502:	cmovb  r8d,eax
  406506:	cmp    r8w,WORD PTR [rbx+0xe8]
  40650e:	movzx  edi,r8w
  406512:	jbe    40651c <flatcc_builder_create_vector@@Base+0x4c>
  406514:	mov    WORD PTR [rbx+0xe8],r8w
  40651c:	imul   ecx,edx
  40651f:	mov    DWORD PTR [rsp+0xc],edx
  406523:	mov    edx,DWORD PTR [rbx+0xf0]
  406529:	sub    edi,0x1
  40652c:	mov    QWORD PTR [rsp+0x10],0x4
  406535:	mov    QWORD PTR [rsp+0x28],0x4
  40653e:	mov    DWORD PTR [rsp+0x18],0x1
  406546:	mov    r8d,0x4
  40654c:	mov    eax,edx
  40654e:	sub    eax,ecx
  406550:	and    eax,edi
  406552:	lea    rdi,[rsp+0xc]
  406557:	test   ecx,ecx
  406559:	mov    QWORD PTR [rsp+0x20],rdi
  40655e:	jne    4065f0 <flatcc_builder_create_vector@@Base+0x120>
  406564:	test   eax,eax
  406566:	je     406594 <flatcc_builder_create_vector@@Base+0xc4>
  406568:	movsxd rsi,DWORD PTR [rsp+0x18]
  40656d:	mov    rdi,0x409fa0
  406574:	add    r8,rax
  406577:	mov    QWORD PTR [rsp+0x10],r8
  40657c:	mov    rcx,rsi
  40657f:	shl    rsi,0x4
  406583:	add    ecx,0x1
  406586:	mov    QWORD PTR [rsp+rsi*1+0x20],rdi
  40658b:	mov    QWORD PTR [rsp+rsi*1+0x28],rax
  406590:	mov    DWORD PTR [rsp+0x18],ecx
  406594:	mov    ebp,edx
  406596:	movabs rax,0x10000000f
  4065a0:	sub    ebp,r8d
  4065a3:	cmp    r8,rax
  4065a6:	ja     406610 <flatcc_builder_create_vector@@Base+0x140>
  4065a8:	cmp    edx,ebp
  4065aa:	jle    406610 <flatcc_builder_create_vector@@Base+0x140>
  4065ac:	lea    rsi,[rsp+0x20]
  4065b1:	mov    rdi,QWORD PTR [rbx+0x38]
  4065b5:	mov    ecx,ebp
  4065b7:	mov    edx,DWORD PTR [rsp+0x18]
  4065bb:	call   QWORD PTR [rbx+0x48]
  4065be:	test   eax,eax
  4065c0:	jne    40662f <flatcc_builder_create_vector@@Base+0x15f>
  4065c2:	mov    DWORD PTR [rbx+0xf0],ebp
  4065c8:	mov    eax,ebp
  4065ca:	mov    rbx,QWORD PTR [rsp+0xa8]
  4065d2:	xor    rbx,QWORD PTR fs:0x28
  4065db:	jne    406653 <flatcc_builder_create_vector@@Base+0x183>
  4065dd:	add    rsp,0xb8
  4065e4:	pop    rbx
  4065e5:	pop    rbp
  4065e6:	ret    
  4065e7:	nop    WORD PTR [rax+rax*1+0x0]
  4065f0:	lea    r8,[rcx+0x4]
  4065f4:	mov    QWORD PTR [rsp+0x30],rsi
  4065f9:	mov    QWORD PTR [rsp+0x38],rcx
  4065fe:	mov    DWORD PTR [rsp+0x18],0x2
  406606:	mov    QWORD PTR [rsp+0x10],r8
  40660b:	jmp    406564 <flatcc_builder_create_vector@@Base+0x94>
  406610:	lea    rcx,[rip+0x38d9]        # 409ef0 <_IO_stdin_used@@Base+0xef0>
  406617:	lea    rsi,[rip+0x2ea2]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  40661e:	lea    rdi,[rip+0x3232]        # 409857 <_IO_stdin_used@@Base+0x857>
  406625:	mov    edx,0x287
  40662a:	call   403080 <__assert_fail@plt>
  40662f:	call   4031cc <posix_memalign@plt+0x9c>
  406634:	lea    rcx,[rip+0x3575]        # 409bb0 <_IO_stdin_used@@Base+0xbb0>
  40663b:	lea    rsi,[rip+0x2e7e]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  406642:	lea    rdi,[rip+0x3280]        # 4098c9 <_IO_stdin_used@@Base+0x8c9>
  406649:	mov    edx,0x555
  40664e:	call   403080 <__assert_fail@plt>
  406653:	call   403060 <__stack_chk_fail@plt>
  406658:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406660 <flatcc_builder_end_vector@@Base>:
  406660:	push   rbp
  406661:	push   rbx
  406662:	sub    rsp,0x8
  406666:	mov    rax,QWORD PTR [rdi+0x30]
  40666a:	cmp    WORD PTR [rax+0xe],0x4
  40666f:	jne    40671f <flatcc_builder_end_vector@@Base+0xbf>
  406675:	mov    ecx,DWORD PTR [rax+0x10]
  406678:	mov    edx,DWORD PTR [rax+0x14]
  40667b:	mov    rbx,rdi
  40667e:	mov    r9d,DWORD PTR [rax+0x18]
  406682:	movzx  r8d,WORD PTR [rdi+0xea]
  40668a:	mov    rsi,QWORD PTR [rdi+0x18]
  40668e:	call   4064d0 <flatcc_builder_create_vector@@Base>
  406693:	test   eax,eax
  406695:	mov    ebp,eax
  406697:	jne    4066a8 <flatcc_builder_end_vector@@Base+0x48>
  406699:	add    rsp,0x8
  40669d:	mov    eax,ebp
  40669f:	pop    rbx
  4066a0:	pop    rbp
  4066a1:	ret    
  4066a2:	nop    WORD PTR [rax+rax*1+0x0]
  4066a8:	mov    edx,DWORD PTR [rbx+0x20]
  4066ab:	mov    rdi,QWORD PTR [rbx+0x18]
  4066af:	xor    esi,esi
  4066b1:	call   403090 <memset@plt>
  4066b6:	mov    rax,QWORD PTR [rbx+0x30]
  4066ba:	mov    edi,DWORD PTR [rbx+0x70]
  4066bd:	mov    esi,DWORD PTR [rax]
  4066bf:	mov    edx,DWORD PTR [rax+0x8]
  4066c2:	mov    ecx,DWORD PTR [rax+0x4]
  4066c5:	mov    DWORD PTR [rbx+0x20],edx
  4066c8:	mov    rdx,rsi
  4066cb:	mov    DWORD PTR [rbx+0x28],esi
  4066ce:	add    rsi,QWORD PTR [rbx+0x68]
  4066d2:	sub    edi,edx
  4066d4:	cmp    ecx,edi
  4066d6:	mov    edx,edi
  4066d8:	cmovb  edx,ecx
  4066db:	mov    DWORD PTR [rbx+0x24],edx
  4066de:	movzx  edx,WORD PTR [rbx+0xea]
  4066e5:	cmp    dx,WORD PTR [rbx+0xe8]
  4066ec:	mov    QWORD PTR [rbx+0x18],rsi
  4066f0:	mov    DWORD PTR [rax+0x4],ecx
  4066f3:	jbe    4066fc <flatcc_builder_end_vector@@Base+0x9c>
  4066f5:	mov    WORD PTR [rbx+0xe8],dx
  4066fc:	movzx  edx,WORD PTR [rax+0xc]
  406700:	sub    rax,0x24
  406704:	sub    DWORD PTR [rbx+0x104],0x1
  40670b:	mov    QWORD PTR [rbx+0x30],rax
  40670f:	mov    eax,ebp
  406711:	mov    WORD PTR [rbx+0xea],dx
  406718:	add    rsp,0x8
  40671c:	pop    rbx
  40671d:	pop    rbp
  40671e:	ret    
  40671f:	lea    rcx,[rip+0x346a]        # 409b90 <_IO_stdin_used@@Base+0xb90>
  406726:	lea    rsi,[rip+0x2d93]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  40672d:	lea    rdi,[rip+0x2e6c]        # 4095a0 <_IO_stdin_used@@Base+0x5a0>
  406734:	mov    edx,0x578
  406739:	call   403080 <__assert_fail@plt>
  40673e:	xchg   ax,ax

0000000000406740 <flatcc_builder_vector_count@@Base>:
  406740:	mov    rax,QWORD PTR [rdi+0x30]
  406744:	mov    eax,DWORD PTR [rax+0x14]
  406747:	ret    
  406748:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406750 <flatcc_builder_vector_edit@@Base>:
  406750:	mov    rax,QWORD PTR [rdi+0x18]
  406754:	ret    
  406755:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406760 <flatcc_builder_create_offset_vector_direct@@Base>:
  406760:	xor    ecx,ecx
  406762:	jmp    404010 <flatcc_builder_default_alloc@@Base+0x390>
  406767:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406770 <flatcc_builder_end_offset_vector@@Base>:
  406770:	push   rbp
  406771:	push   rbx
  406772:	sub    rsp,0x8
  406776:	mov    rax,QWORD PTR [rdi+0x30]
  40677a:	cmp    WORD PTR [rax+0xe],0x5
  40677f:	jne    40681f <flatcc_builder_end_offset_vector@@Base+0xaf>
  406785:	mov    edx,DWORD PTR [rax+0x14]
  406788:	mov    rsi,QWORD PTR [rdi+0x18]
  40678c:	mov    rbx,rdi
  40678f:	call   406760 <flatcc_builder_create_offset_vector_direct@@Base>
  406794:	test   eax,eax
  406796:	mov    ebp,eax
  406798:	jne    4067a8 <flatcc_builder_end_offset_vector@@Base+0x38>
  40679a:	add    rsp,0x8
  40679e:	mov    eax,ebp
  4067a0:	pop    rbx
  4067a1:	pop    rbp
  4067a2:	ret    
  4067a3:	nop    DWORD PTR [rax+rax*1+0x0]
  4067a8:	mov    edx,DWORD PTR [rbx+0x20]
  4067ab:	mov    rdi,QWORD PTR [rbx+0x18]
  4067af:	xor    esi,esi
  4067b1:	call   403090 <memset@plt>
  4067b6:	mov    rax,QWORD PTR [rbx+0x30]
  4067ba:	mov    edi,DWORD PTR [rbx+0x70]
  4067bd:	mov    esi,DWORD PTR [rax]
  4067bf:	mov    edx,DWORD PTR [rax+0x8]
  4067c2:	mov    ecx,DWORD PTR [rax+0x4]
  4067c5:	mov    DWORD PTR [rbx+0x20],edx
  4067c8:	mov    rdx,rsi
  4067cb:	mov    DWORD PTR [rbx+0x28],esi
  4067ce:	add    rsi,QWORD PTR [rbx+0x68]
  4067d2:	sub    edi,edx
  4067d4:	cmp    ecx,edi
  4067d6:	mov    edx,edi
  4067d8:	cmovb  edx,ecx
  4067db:	mov    DWORD PTR [rbx+0x24],edx
  4067de:	movzx  edx,WORD PTR [rbx+0xea]
  4067e5:	cmp    dx,WORD PTR [rbx+0xe8]
  4067ec:	mov    QWORD PTR [rbx+0x18],rsi
  4067f0:	mov    DWORD PTR [rax+0x4],ecx
  4067f3:	jbe    4067fc <flatcc_builder_end_offset_vector@@Base+0x8c>
  4067f5:	mov    WORD PTR [rbx+0xe8],dx
  4067fc:	movzx  edx,WORD PTR [rax+0xc]
  406800:	sub    rax,0x24
  406804:	sub    DWORD PTR [rbx+0x104],0x1
  40680b:	mov    QWORD PTR [rbx+0x30],rax
  40680f:	mov    eax,ebp
  406811:	mov    WORD PTR [rbx+0xea],dx
  406818:	add    rsp,0x8
  40681c:	pop    rbx
  40681d:	pop    rbp
  40681e:	ret    
  40681f:	lea    rcx,[rip+0x331a]        # 409b40 <_IO_stdin_used@@Base+0xb40>
  406826:	lea    rsi,[rip+0x2c93]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  40682d:	lea    rdi,[rip+0x2ddc]        # 409610 <_IO_stdin_used@@Base+0x610>
  406834:	mov    edx,0x5c8
  406839:	call   403080 <__assert_fail@plt>
  40683e:	xchg   ax,ax

0000000000406840 <flatcc_builder_create_offset_vector@@Base>:
  406840:	push   r12
  406842:	push   rbp
  406843:	mov    r12,rsi
  406846:	push   rbx
  406847:	mov    rbp,rdx
  40684a:	mov    rbx,rdi
  40684d:	call   4057e0 <flatcc_builder_start_offset_vector@@Base>
  406852:	test   eax,eax
  406854:	je     406860 <flatcc_builder_create_offset_vector@@Base+0x20>
  406856:	pop    rbx
  406857:	xor    eax,eax
  406859:	pop    rbp
  40685a:	pop    r12
  40685c:	ret    
  40685d:	nop    DWORD PTR [rax]
  406860:	mov    rsi,rbp
  406863:	mov    rdi,rbx
  406866:	call   4052a0 <flatcc_builder_extend_offset_vector@@Base>
  40686b:	test   rax,rax
  40686e:	je     406856 <flatcc_builder_create_offset_vector@@Base+0x16>
  406870:	lea    rdx,[rbp*4+0x0]
  406878:	mov    rsi,r12
  40687b:	mov    rdi,rax
  40687e:	call   4030d0 <memcpy@plt>
  406883:	mov    rdi,rbx
  406886:	pop    rbx
  406887:	pop    rbp
  406888:	pop    r12
  40688a:	jmp    406770 <flatcc_builder_end_offset_vector@@Base>
  40688f:	nop

0000000000406890 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  406890:	push   rbp
  406891:	push   rbx
  406892:	sub    rsp,0x8
  406896:	mov    rax,QWORD PTR [rdi+0x30]
  40689a:	cmp    WORD PTR [rax+0xe],0x5
  40689f:	jne    406947 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb7>
  4068a5:	mov    edx,DWORD PTR [rax+0x14]
  4068a8:	mov    rcx,rsi
  4068ab:	mov    rsi,QWORD PTR [rdi+0x18]
  4068af:	mov    rbx,rdi
  4068b2:	call   404010 <flatcc_builder_default_alloc@@Base+0x390>
  4068b7:	test   eax,eax
  4068b9:	mov    ebp,eax
  4068bb:	jne    4068d0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
  4068bd:	add    rsp,0x8
  4068c1:	mov    eax,ebp
  4068c3:	pop    rbx
  4068c4:	pop    rbp
  4068c5:	ret    
  4068c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4068d0:	mov    edx,DWORD PTR [rbx+0x20]
  4068d3:	mov    rdi,QWORD PTR [rbx+0x18]
  4068d7:	xor    esi,esi
  4068d9:	call   403090 <memset@plt>
  4068de:	mov    rax,QWORD PTR [rbx+0x30]
  4068e2:	mov    edi,DWORD PTR [rbx+0x70]
  4068e5:	mov    esi,DWORD PTR [rax]
  4068e7:	mov    edx,DWORD PTR [rax+0x8]
  4068ea:	mov    ecx,DWORD PTR [rax+0x4]
  4068ed:	mov    DWORD PTR [rbx+0x20],edx
  4068f0:	mov    rdx,rsi
  4068f3:	mov    DWORD PTR [rbx+0x28],esi
  4068f6:	add    rsi,QWORD PTR [rbx+0x68]
  4068fa:	sub    edi,edx
  4068fc:	cmp    ecx,edi
  4068fe:	mov    edx,edi
  406900:	cmovb  edx,ecx
  406903:	mov    DWORD PTR [rbx+0x24],edx
  406906:	movzx  edx,WORD PTR [rbx+0xea]
  40690d:	cmp    dx,WORD PTR [rbx+0xe8]
  406914:	mov    QWORD PTR [rbx+0x18],rsi
  406918:	mov    DWORD PTR [rax+0x4],ecx
  40691b:	jbe    406924 <flatcc_builder_end_offset_vector_for_unions@@Base+0x94>
  40691d:	mov    WORD PTR [rbx+0xe8],dx
  406924:	movzx  edx,WORD PTR [rax+0xc]
  406928:	sub    rax,0x24
  40692c:	sub    DWORD PTR [rbx+0x104],0x1
  406933:	mov    QWORD PTR [rbx+0x30],rax
  406937:	mov    eax,ebp
  406939:	mov    WORD PTR [rbx+0xea],dx
  406940:	add    rsp,0x8
  406944:	pop    rbx
  406945:	pop    rbp
  406946:	ret    
  406947:	lea    rcx,[rip+0x31b2]        # 409b00 <_IO_stdin_used@@Base+0xb00>
  40694e:	lea    rsi,[rip+0x2b6b]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  406955:	lea    rdi,[rip+0x2cb4]        # 409610 <_IO_stdin_used@@Base+0x610>
  40695c:	mov    edx,0x5d5
  406961:	call   403080 <__assert_fail@plt>
  406966:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000406970 <flatcc_builder_offset_vector_edit@@Base>:
  406970:	mov    rax,QWORD PTR [rdi+0x18]
  406974:	ret    
  406975:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406980 <flatcc_builder_offset_vector_count@@Base>:
  406980:	mov    rax,QWORD PTR [rdi+0x30]
  406984:	mov    eax,DWORD PTR [rax+0x14]
  406987:	ret    
  406988:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406990 <flatcc_builder_create_union_vector_direct@@Base>:
  406990:	push   r13
  406992:	push   r12
  406994:	mov    r13,rcx
  406997:	push   rbp
  406998:	push   rbx
  406999:	mov    r12,rsi
  40699c:	mov    rcx,r12
  40699f:	mov    rsi,rdx
  4069a2:	mov    rdx,r13
  4069a5:	sub    rsp,0x8
  4069a9:	mov    rbp,rdi
  4069ac:	call   404010 <flatcc_builder_default_alloc@@Base+0x390>
  4069b1:	test   eax,eax
  4069b3:	jne    4069c8 <flatcc_builder_create_union_vector_direct@@Base+0x38>
  4069b5:	add    rsp,0x8
  4069b9:	xor    eax,eax
  4069bb:	pop    rbx
  4069bc:	pop    rbp
  4069bd:	pop    r12
  4069bf:	pop    r13
  4069c1:	ret    
  4069c2:	nop    WORD PTR [rax+rax*1+0x0]
  4069c8:	mov    ebx,eax
  4069ca:	mov    rdx,r13
  4069cd:	mov    ecx,0x1
  4069d2:	mov    rsi,r12
  4069d5:	mov    rdi,rbp
  4069d8:	mov    r9d,0xffffffff
  4069de:	mov    r8d,0x1
  4069e4:	call   4064d0 <flatcc_builder_create_vector@@Base>
  4069e9:	mov    rcx,rbx
  4069ec:	mov    edx,eax
  4069ee:	shl    rcx,0x20
  4069f2:	mov    rbx,rcx
  4069f5:	or     rbx,rdx
  4069f8:	test   eax,eax
  4069fa:	mov    rax,rcx
  4069fd:	cmovne rax,rbx
  406a01:	add    rsp,0x8
  406a05:	pop    rbx
  406a06:	pop    rbp
  406a07:	pop    r12
  406a09:	pop    r13
  406a0b:	ret    
  406a0c:	nop    DWORD PTR [rax+0x0]

0000000000406a10 <flatcc_builder_create_union_vector@@Base>:
  406a10:	push   r13
  406a12:	push   r12
  406a14:	mov    r12,rdx
  406a17:	push   rbp
  406a18:	push   rbx
  406a19:	mov    rbp,rsi
  406a1c:	mov    rbx,rdi
  406a1f:	sub    rsp,0x8
  406a23:	call   4057e0 <flatcc_builder_start_offset_vector@@Base>
  406a28:	test   eax,eax
  406a2a:	je     406a40 <flatcc_builder_create_union_vector@@Base+0x30>
  406a2c:	add    rsp,0x8
  406a30:	xor    eax,eax
  406a32:	pop    rbx
  406a33:	pop    rbp
  406a34:	pop    r12
  406a36:	pop    r13
  406a38:	ret    
  406a39:	nop    DWORD PTR [rax+0x0]
  406a40:	mov    rsi,r12
  406a43:	mov    rdi,rbx
  406a46:	call   4052a0 <flatcc_builder_extend_offset_vector@@Base>
  406a4b:	test   rax,rax
  406a4e:	je     406a2c <flatcc_builder_create_union_vector@@Base+0x1c>
  406a50:	mov    r13d,DWORD PTR [rbx+0x20]
  406a54:	mov    rax,r13
  406a57:	add    eax,r12d
  406a5a:	cmp    eax,DWORD PTR [rbx+0x24]
  406a5d:	mov    DWORD PTR [rbx+0x20],eax
  406a60:	jae    406b40 <flatcc_builder_create_union_vector@@Base+0x130>
  406a66:	add    r13,QWORD PTR [rbx+0x18]
  406a6a:	je     406a2c <flatcc_builder_create_union_vector@@Base+0x1c>
  406a6c:	mov    rdi,rbx
  406a6f:	call   406970 <flatcc_builder_offset_vector_edit@@Base>
  406a74:	xor    edi,edi
  406a76:	test   r12,r12
  406a79:	je     406a9d <flatcc_builder_create_union_vector@@Base+0x8d>
  406a7b:	nop    DWORD PTR [rax+rax*1+0x0]
  406a80:	movzx  r8d,BYTE PTR [rbp+rdi*8+0x0]
  406a86:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  406a8b:	mov    r8d,DWORD PTR [rbp+rdi*8+0x4]
  406a90:	mov    DWORD PTR [rax+rdi*4],r8d
  406a94:	add    rdi,0x1
  406a98:	cmp    r12,rdi
  406a9b:	jne    406a80 <flatcc_builder_create_union_vector@@Base+0x70>
  406a9d:	mov    rcx,r12
  406aa0:	mov    rdx,rax
  406aa3:	mov    rsi,r13
  406aa6:	mov    rdi,rbx
  406aa9:	call   406990 <flatcc_builder_create_union_vector_direct@@Base>
  406aae:	mov    edx,DWORD PTR [rbx+0x20]
  406ab1:	mov    rdi,QWORD PTR [rbx+0x18]
  406ab5:	xor    esi,esi
  406ab7:	mov    r12,rax
  406aba:	mov    rbp,rax
  406abd:	sar    r12,0x20
  406ac1:	call   403090 <memset@plt>
  406ac6:	mov    rax,QWORD PTR [rbx+0x30]
  406aca:	mov    esi,DWORD PTR [rax]
  406acc:	mov    edx,DWORD PTR [rax+0x8]
  406acf:	mov    ecx,DWORD PTR [rax+0x4]
  406ad2:	mov    DWORD PTR [rbx+0x20],edx
  406ad5:	mov    DWORD PTR [rbx+0x28],esi
  406ad8:	mov    rdx,rsi
  406adb:	add    rsi,QWORD PTR [rbx+0x68]
  406adf:	mov    QWORD PTR [rbx+0x18],rsi
  406ae3:	mov    esi,DWORD PTR [rbx+0x70]
  406ae6:	sub    esi,edx
  406ae8:	cmp    ecx,esi
  406aea:	mov    edx,esi
  406aec:	cmovb  edx,ecx
  406aef:	mov    DWORD PTR [rbx+0x24],edx
  406af2:	movzx  edx,WORD PTR [rbx+0xea]
  406af9:	cmp    dx,WORD PTR [rbx+0xe8]
  406b00:	mov    DWORD PTR [rax+0x4],ecx
  406b03:	jbe    406b0c <flatcc_builder_create_union_vector@@Base+0xfc>
  406b05:	mov    WORD PTR [rbx+0xe8],dx
  406b0c:	movzx  edx,WORD PTR [rax+0xc]
  406b10:	sub    rax,0x24
  406b14:	sub    DWORD PTR [rbx+0x104],0x1
  406b1b:	mov    QWORD PTR [rbx+0x30],rax
  406b1f:	shl    r12,0x20
  406b23:	mov    eax,ebp
  406b25:	or     rax,r12
  406b28:	mov    WORD PTR [rbx+0xea],dx
  406b2f:	add    rsp,0x8
  406b33:	pop    rbx
  406b34:	pop    rbp
  406b35:	pop    r12
  406b37:	pop    r13
  406b39:	ret    
  406b3a:	nop    WORD PTR [rax+rax*1+0x0]
  406b40:	lea    esi,[rax+0x1]
  406b43:	mov    edx,0xfffffffc
  406b48:	mov    rdi,rbx
  406b4b:	call   403c20 <_start@@Base+0x3c0>
  406b50:	test   eax,eax
  406b52:	je     406a66 <flatcc_builder_create_union_vector@@Base+0x56>
  406b58:	jmp    406a2c <flatcc_builder_create_union_vector@@Base+0x1c>
  406b5d:	nop    DWORD PTR [rax]

0000000000406b60 <flatcc_builder_start_union_vector@@Base>:
  406b60:	push   rbx
  406b61:	mov    esi,0x4
  406b66:	mov    rbx,rdi
  406b69:	call   403ee0 <flatcc_builder_default_alloc@@Base+0x260>
  406b6e:	test   eax,eax
  406b70:	jne    406bb8 <flatcc_builder_start_union_vector@@Base+0x58>
  406b72:	mov    rcx,QWORD PTR [rbx+0x30]
  406b76:	mov    edx,0x7
  406b7b:	mov    DWORD PTR [rcx+0x10],0x8
  406b82:	mov    DWORD PTR [rcx+0x14],0x0
  406b89:	mov    WORD PTR [rcx+0xe],dx
  406b8d:	mov    edx,DWORD PTR [rbx+0x28]
  406b90:	mov    rsi,rdx
  406b93:	add    rdx,QWORD PTR [rbx+0x68]
  406b97:	mov    QWORD PTR [rbx+0x18],rdx
  406b9b:	mov    edx,DWORD PTR [rbx+0x70]
  406b9e:	sub    edx,esi
  406ba0:	mov    esi,0xfffffffc
  406ba5:	cmp    edx,esi
  406ba7:	cmova  edx,esi
  406baa:	mov    DWORD PTR [rbx+0x24],edx
  406bad:	mov    DWORD PTR [rcx+0x4],esi
  406bb0:	pop    rbx
  406bb1:	ret    
  406bb2:	nop    WORD PTR [rax+rax*1+0x0]
  406bb8:	mov    eax,0xffffffff
  406bbd:	pop    rbx
  406bbe:	ret    
  406bbf:	nop

0000000000406bc0 <flatcc_builder_union_vector_edit@@Base>:
  406bc0:	mov    rax,QWORD PTR [rdi+0x18]
  406bc4:	ret    
  406bc5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406bd0 <flatcc_builder_union_vector_count@@Base>:
  406bd0:	mov    rax,QWORD PTR [rdi+0x30]
  406bd4:	mov    eax,DWORD PTR [rax+0x14]
  406bd7:	ret    
  406bd8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406be0 <flatcc_builder_end_union_vector@@Base>:
  406be0:	push   r13
  406be2:	push   r12
  406be4:	push   rbp
  406be5:	push   rbx
  406be6:	sub    rsp,0x8
  406bea:	mov    rax,QWORD PTR [rdi+0x30]
  406bee:	cmp    WORD PTR [rax+0xe],0x7
  406bf3:	jne    406d25 <flatcc_builder_end_union_vector@@Base+0x145>
  406bf9:	mov    rbx,rdi
  406bfc:	call   406bd0 <flatcc_builder_union_vector_count@@Base>
  406c01:	mov    ebp,DWORD PTR [rbx+0x20]
  406c04:	mov    r12,rax
  406c07:	lea    eax,[rax+rax*4]
  406c0a:	add    eax,ebp
  406c0c:	cmp    eax,DWORD PTR [rbx+0x24]
  406c0f:	mov    DWORD PTR [rbx+0x20],eax
  406c12:	jae    406d00 <flatcc_builder_end_union_vector@@Base+0x120>
  406c18:	add    rbp,QWORD PTR [rbx+0x18]
  406c1c:	je     406d18 <flatcc_builder_end_union_vector@@Base+0x138>
  406c22:	mov    rdi,rbx
  406c25:	lea    r13,[rbp+r12*4+0x0]
  406c2a:	call   406bc0 <flatcc_builder_union_vector_edit@@Base>
  406c2f:	xor    edi,edi
  406c31:	test   r12,r12
  406c34:	je     406c5d <flatcc_builder_end_union_vector@@Base+0x7d>
  406c36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406c40:	movzx  r8d,BYTE PTR [rax+rdi*8]
  406c45:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  406c4a:	mov    r8d,DWORD PTR [rax+rdi*8+0x4]
  406c4f:	mov    DWORD PTR [rbp+rdi*4+0x0],r8d
  406c54:	add    rdi,0x1
  406c58:	cmp    r12,rdi
  406c5b:	jne    406c40 <flatcc_builder_end_union_vector@@Base+0x60>
  406c5d:	mov    rcx,r12
  406c60:	mov    rdx,rbp
  406c63:	mov    rsi,r13
  406c66:	mov    rdi,rbx
  406c69:	call   406990 <flatcc_builder_create_union_vector_direct@@Base>
  406c6e:	mov    edx,DWORD PTR [rbx+0x20]
  406c71:	mov    rdi,QWORD PTR [rbx+0x18]
  406c75:	xor    esi,esi
  406c77:	mov    r12,rax
  406c7a:	mov    rbp,rax
  406c7d:	sar    r12,0x20
  406c81:	call   403090 <memset@plt>
  406c86:	mov    rax,QWORD PTR [rbx+0x30]
  406c8a:	mov    esi,DWORD PTR [rax]
  406c8c:	mov    edx,DWORD PTR [rax+0x8]
  406c8f:	mov    ecx,DWORD PTR [rax+0x4]
  406c92:	mov    DWORD PTR [rbx+0x20],edx
  406c95:	mov    DWORD PTR [rbx+0x28],esi
  406c98:	mov    rdx,rsi
  406c9b:	add    rsi,QWORD PTR [rbx+0x68]
  406c9f:	mov    QWORD PTR [rbx+0x18],rsi
  406ca3:	mov    esi,DWORD PTR [rbx+0x70]
  406ca6:	sub    esi,edx
  406ca8:	cmp    ecx,esi
  406caa:	mov    edx,esi
  406cac:	cmovb  edx,ecx
  406caf:	mov    DWORD PTR [rbx+0x24],edx
  406cb2:	movzx  edx,WORD PTR [rbx+0xea]
  406cb9:	cmp    dx,WORD PTR [rbx+0xe8]
  406cc0:	mov    DWORD PTR [rax+0x4],ecx
  406cc3:	jbe    406ccc <flatcc_builder_end_union_vector@@Base+0xec>
  406cc5:	mov    WORD PTR [rbx+0xe8],dx
  406ccc:	movzx  edx,WORD PTR [rax+0xc]
  406cd0:	sub    rax,0x24
  406cd4:	sub    DWORD PTR [rbx+0x104],0x1
  406cdb:	mov    QWORD PTR [rbx+0x30],rax
  406cdf:	shl    r12,0x20
  406ce3:	mov    eax,ebp
  406ce5:	or     rax,r12
  406ce8:	mov    WORD PTR [rbx+0xea],dx
  406cef:	add    rsp,0x8
  406cf3:	pop    rbx
  406cf4:	pop    rbp
  406cf5:	pop    r12
  406cf7:	pop    r13
  406cf9:	ret    
  406cfa:	nop    WORD PTR [rax+rax*1+0x0]
  406d00:	lea    esi,[rax+0x1]
  406d03:	mov    edx,0xfffffffc
  406d08:	mov    rdi,rbx
  406d0b:	call   403c20 <_start@@Base+0x3c0>
  406d10:	test   eax,eax
  406d12:	je     406c18 <flatcc_builder_end_union_vector@@Base+0x38>
  406d18:	add    rsp,0x8
  406d1c:	xor    eax,eax
  406d1e:	pop    rbx
  406d1f:	pop    rbp
  406d20:	pop    r12
  406d22:	pop    r13
  406d24:	ret    
  406d25:	lea    rcx,[rip+0x2d54]        # 409a80 <_IO_stdin_used@@Base+0xa80>
  406d2c:	lea    rsi,[rip+0x278d]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  406d33:	lea    rdi,[rip+0x29fe]        # 409738 <_IO_stdin_used@@Base+0x738>
  406d3a:	mov    edx,0x651
  406d3f:	call   403080 <__assert_fail@plt>
  406d44:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406d4f:	nop

0000000000406d50 <flatcc_builder_extend_union_vector@@Base>:
  406d50:	push   rbp
  406d51:	push   rbx
  406d52:	xor    edx,edx
  406d54:	mov    ecx,esi
  406d56:	sub    rsp,0x8
  406d5a:	mov    rax,QWORD PTR [rdi+0x30]
  406d5e:	add    ecx,DWORD PTR [rax+0x14]
  406d61:	setb   dl
  406d64:	test   edx,edx
  406d66:	jne    406dad <flatcc_builder_extend_union_vector@@Base+0x5d>
  406d68:	cmp    ecx,0x1fffffff
  406d6e:	ja     406dad <flatcc_builder_extend_union_vector@@Base+0x5d>
  406d70:	mov    DWORD PTR [rax+0x14],ecx
  406d73:	mov    ebp,DWORD PTR [rdi+0x20]
  406d76:	mov    rbx,rdi
  406d79:	lea    eax,[rbp+rsi*8+0x0]
  406d7d:	cmp    eax,DWORD PTR [rdi+0x24]
  406d80:	mov    DWORD PTR [rdi+0x20],eax
  406d83:	jae    406d98 <flatcc_builder_extend_union_vector@@Base+0x48>
  406d85:	mov    rax,rbp
  406d88:	add    rax,QWORD PTR [rbx+0x18]
  406d8c:	add    rsp,0x8
  406d90:	pop    rbx
  406d91:	pop    rbp
  406d92:	ret    
  406d93:	nop    DWORD PTR [rax+rax*1+0x0]
  406d98:	lea    esi,[rax+0x1]
  406d9b:	mov    edx,0xfffffffc
  406da0:	call   403c20 <_start@@Base+0x3c0>
  406da5:	test   eax,eax
  406da7:	je     406d85 <flatcc_builder_extend_union_vector@@Base+0x35>
  406da9:	xor    eax,eax
  406dab:	jmp    406d8c <flatcc_builder_extend_union_vector@@Base+0x3c>
  406dad:	call   4031ef <posix_memalign@plt+0xbf>
  406db2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406dbd:	nop    DWORD PTR [rax]

0000000000406dc0 <flatcc_builder_truncate_union_vector@@Base>:
  406dc0:	sub    rsp,0x8
  406dc4:	mov    rax,QWORD PTR [rdi+0x30]
  406dc8:	cmp    WORD PTR [rax+0xe],0x7
  406dcd:	jne    406dff <flatcc_builder_truncate_union_vector@@Base+0x3f>
  406dcf:	mov    edx,DWORD PTR [rax+0x14]
  406dd2:	cmp    edx,esi
  406dd4:	jb     406e1e <flatcc_builder_truncate_union_vector@@Base+0x5e>
  406dd6:	sub    edx,esi
  406dd8:	imul   esi,DWORD PTR [rax+0x10]
  406ddc:	mov    DWORD PTR [rax+0x14],edx
  406ddf:	mov    eax,DWORD PTR [rdi+0x20]
  406de2:	mov    rcx,QWORD PTR [rdi+0x18]
  406de6:	sub    eax,esi
  406de8:	mov    edx,esi
  406dea:	xor    esi,esi
  406dec:	mov    DWORD PTR [rdi+0x20],eax
  406def:	lea    rdi,[rcx+rax*1]
  406df3:	call   403090 <memset@plt>
  406df8:	xor    eax,eax
  406dfa:	add    rsp,0x8
  406dfe:	ret    
  406dff:	lea    rcx,[rip+0x2c3a]        # 409a40 <_IO_stdin_used@@Base+0xa40>
  406e06:	lea    rsi,[rip+0x26b3]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  406e0d:	lea    rdi,[rip+0x2924]        # 409738 <_IO_stdin_used@@Base+0x738>
  406e14:	mov    edx,0x681
  406e19:	call   403080 <__assert_fail@plt>
  406e1e:	lea    rcx,[rip+0x2c1b]        # 409a40 <_IO_stdin_used@@Base+0xa40>
  406e25:	lea    rsi,[rip+0x2694]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  406e2c:	lea    rdi,[rip+0x286d]        # 4096a0 <_IO_stdin_used@@Base+0x6a0>
  406e33:	mov    edx,0x682
  406e38:	call   403080 <__assert_fail@plt>
  406e3d:	nop    DWORD PTR [rax]

0000000000406e40 <flatcc_builder_union_vector_push@@Base>:
  406e40:	push   r12
  406e42:	push   rbp
  406e43:	push   rbx
  406e44:	mov    rdx,QWORD PTR [rdi+0x30]
  406e48:	cmp    WORD PTR [rdx+0xe],0x7
  406e4d:	jne    406ea0 <flatcc_builder_union_vector_push@@Base+0x60>
  406e4f:	mov    eax,DWORD PTR [rdx+0x14]
  406e52:	cmp    eax,0x1fffffff
  406e57:	je     406e99 <flatcc_builder_union_vector_push@@Base+0x59>
  406e59:	add    eax,0x1
  406e5c:	mov    rbp,rdi
  406e5f:	mov    r12,rsi
  406e62:	mov    DWORD PTR [rdx+0x14],eax
  406e65:	mov    ebx,DWORD PTR [rdi+0x20]
  406e68:	lea    edx,[rbx+0x8]
  406e6b:	cmp    edx,DWORD PTR [rdi+0x24]
  406e6e:	mov    DWORD PTR [rdi+0x20],edx
  406e71:	jae    406e88 <flatcc_builder_union_vector_push@@Base+0x48>
  406e73:	mov    rax,rbx
  406e76:	add    rax,QWORD PTR [rbp+0x18]
  406e7a:	je     406e99 <flatcc_builder_union_vector_push@@Base+0x59>
  406e7c:	mov    QWORD PTR [rax],r12
  406e7f:	pop    rbx
  406e80:	pop    rbp
  406e81:	pop    r12
  406e83:	ret    
  406e84:	nop    DWORD PTR [rax+0x0]
  406e88:	lea    esi,[rbx+0x9]
  406e8b:	mov    edx,0xfffffffc
  406e90:	call   403c20 <_start@@Base+0x3c0>
  406e95:	test   eax,eax
  406e97:	je     406e73 <flatcc_builder_union_vector_push@@Base+0x33>
  406e99:	pop    rbx
  406e9a:	xor    eax,eax
  406e9c:	pop    rbp
  406e9d:	pop    r12
  406e9f:	ret    
  406ea0:	lea    rcx,[rip+0x2b59]        # 409a00 <_IO_stdin_used@@Base+0xa00>
  406ea7:	lea    rsi,[rip+0x2612]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  406eae:	lea    rdi,[rip+0x2883]        # 409738 <_IO_stdin_used@@Base+0x738>
  406eb5:	mov    edx,0x68d
  406eba:	call   403080 <__assert_fail@plt>
  406ebf:	nop

0000000000406ec0 <flatcc_builder_append_union_vector@@Base>:
  406ec0:	push   r13
  406ec2:	push   r12
  406ec4:	push   rbp
  406ec5:	push   rbx
  406ec6:	sub    rsp,0x8
  406eca:	mov    rax,QWORD PTR [rdi+0x30]
  406ece:	cmp    WORD PTR [rax+0xe],0x7
  406ed3:	jne    406f4b <flatcc_builder_append_union_vector@@Base+0x8b>
  406ed5:	mov    r13,rsi
  406ed8:	mov    ecx,edx
  406eda:	xor    esi,esi
  406edc:	add    ecx,DWORD PTR [rax+0x14]
  406edf:	setb   sil
  406ee3:	test   esi,esi
  406ee5:	jne    406f46 <flatcc_builder_append_union_vector@@Base+0x86>
  406ee7:	cmp    ecx,0x1fffffff
  406eed:	ja     406f46 <flatcc_builder_append_union_vector@@Base+0x86>
  406eef:	mov    DWORD PTR [rax+0x14],ecx
  406ef2:	mov    r12d,DWORD PTR [rdi+0x20]
  406ef6:	lea    ebx,[rdx*8+0x0]
  406efd:	mov    rbp,rdi
  406f00:	mov    rdx,r12
  406f03:	add    edx,ebx
  406f05:	cmp    edx,DWORD PTR [rdi+0x24]
  406f08:	mov    DWORD PTR [rdi+0x20],edx
  406f0b:	jae    406f30 <flatcc_builder_append_union_vector@@Base+0x70>
  406f0d:	add    r12,QWORD PTR [rbp+0x18]
  406f11:	je     406f20 <flatcc_builder_append_union_vector@@Base+0x60>
  406f13:	mov    edx,ebx
  406f15:	mov    rsi,r13
  406f18:	mov    rdi,r12
  406f1b:	call   4030d0 <memcpy@plt>
  406f20:	add    rsp,0x8
  406f24:	mov    rax,r12
  406f27:	pop    rbx
  406f28:	pop    rbp
  406f29:	pop    r12
  406f2b:	pop    r13
  406f2d:	ret    
  406f2e:	xchg   ax,ax
  406f30:	lea    esi,[rdx+0x1]
  406f33:	mov    edx,0xfffffffc
  406f38:	call   403c20 <_start@@Base+0x3c0>
  406f3d:	test   eax,eax
  406f3f:	je     406f0d <flatcc_builder_append_union_vector@@Base+0x4d>
  406f41:	xor    r12d,r12d
  406f44:	jmp    406f20 <flatcc_builder_append_union_vector@@Base+0x60>
  406f46:	call   4031ef <posix_memalign@plt+0xbf>
  406f4b:	lea    rcx,[rip+0x2a6e]        # 4099c0 <_IO_stdin_used@@Base+0x9c0>
  406f52:	lea    rsi,[rip+0x2567]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  406f59:	lea    rdi,[rip+0x27d8]        # 409738 <_IO_stdin_used@@Base+0x738>
  406f60:	mov    edx,0x69c
  406f65:	call   403080 <__assert_fail@plt>
  406f6a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406f70 <flatcc_builder_create_string@@Base>:
  406f70:	push   rbp
  406f71:	push   rbx
  406f72:	sub    rsp,0xb8
  406f79:	mov    rax,QWORD PTR fs:0x28
  406f82:	mov    QWORD PTR [rsp+0xa8],rax
  406f8a:	xor    eax,eax
  406f8c:	mov    eax,0xffffffff
  406f91:	cmp    rdx,rax
  406f94:	ja     407060 <flatcc_builder_create_string@@Base+0xf0>
  406f9a:	mov    rbx,rdi
  406f9d:	mov    edi,DWORD PTR [rdi+0xf0]
  406fa3:	lea    rcx,[rsp+0xc]
  406fa8:	mov    DWORD PTR [rsp+0xc],edx
  406fac:	mov    QWORD PTR [rsp+0x28],0x4
  406fb5:	mov    QWORD PTR [rsp+0x20],rcx
  406fba:	lea    eax,[rdi-0x1]
  406fbd:	sub    eax,edx
  406fbf:	and    eax,0x3
  406fc2:	add    eax,0x1
  406fc5:	test   rdx,rdx
  406fc8:	jne    407040 <flatcc_builder_create_string@@Base+0xd0>
  406fca:	mov    edx,0x2
  406fcf:	mov    ecx,0x1
  406fd4:	mov    r8d,0x4
  406fda:	add    r8,rax
  406fdd:	mov    rsi,0x409fa0
  406fe4:	mov    ebp,edi
  406fe6:	sub    ebp,r8d
  406fe9:	shl    rcx,0x4
  406fed:	mov    QWORD PTR [rsp+0x10],r8
  406ff2:	cmp    edi,ebp
  406ff4:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  406ff9:	mov    DWORD PTR [rsp+0x18],edx
  406ffd:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  407002:	jle    407064 <flatcc_builder_create_string@@Base+0xf4>
  407004:	lea    rsi,[rsp+0x20]
  407009:	mov    rdi,QWORD PTR [rbx+0x38]
  40700d:	mov    ecx,ebp
  40700f:	call   QWORD PTR [rbx+0x48]
  407012:	test   eax,eax
  407014:	jne    407088 <flatcc_builder_create_string@@Base+0x118>
  407016:	mov    DWORD PTR [rbx+0xf0],ebp
  40701c:	mov    rbx,QWORD PTR [rsp+0xa8]
  407024:	xor    rbx,QWORD PTR fs:0x28
  40702d:	mov    eax,ebp
  40702f:	jne    407083 <flatcc_builder_create_string@@Base+0x113>
  407031:	add    rsp,0xb8
  407038:	pop    rbx
  407039:	pop    rbp
  40703a:	ret    
  40703b:	nop    DWORD PTR [rax+rax*1+0x0]
  407040:	lea    r8,[rdx+0x4]
  407044:	mov    QWORD PTR [rsp+0x38],rdx
  407049:	mov    QWORD PTR [rsp+0x30],rsi
  40704e:	mov    edx,0x3
  407053:	mov    ecx,0x2
  407058:	jmp    406fda <flatcc_builder_create_string@@Base+0x6a>
  40705d:	nop    DWORD PTR [rax]
  407060:	xor    ebp,ebp
  407062:	jmp    40701c <flatcc_builder_create_string@@Base+0xac>
  407064:	lea    rcx,[rip+0x2e85]        # 409ef0 <_IO_stdin_used@@Base+0xef0>
  40706b:	lea    rsi,[rip+0x244e]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  407072:	lea    rdi,[rip+0x27de]        # 409857 <_IO_stdin_used@@Base+0x857>
  407079:	mov    edx,0x287
  40707e:	call   403080 <__assert_fail@plt>
  407083:	call   403060 <__stack_chk_fail@plt>
  407088:	call   4031cc <posix_memalign@plt+0x9c>
  40708d:	nop    DWORD PTR [rax]

0000000000407090 <flatcc_builder_create_string_str@@Base>:
  407090:	push   rbp
  407091:	push   rbx
  407092:	mov    rbp,rdi
  407095:	mov    rdi,rsi
  407098:	mov    rbx,rsi
  40709b:	sub    rsp,0x8
  40709f:	call   403050 <strlen@plt>
  4070a4:	add    rsp,0x8
  4070a8:	mov    rsi,rbx
  4070ab:	mov    rdi,rbp
  4070ae:	pop    rbx
  4070af:	pop    rbp
  4070b0:	mov    rdx,rax
  4070b3:	jmp    406f70 <flatcc_builder_create_string@@Base>
  4070b8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004070c0 <flatcc_builder_create_string_strn@@Base>:
  4070c0:	push   r12
  4070c2:	push   rbp
  4070c3:	mov    rbp,rsi
  4070c6:	push   rbx
  4070c7:	mov    r12,rdi
  4070ca:	xor    esi,esi
  4070cc:	mov    rdi,rbp
  4070cf:	mov    rbx,rdx
  4070d2:	call   4030a0 <memchr@plt>
  4070d7:	mov    rdx,rax
  4070da:	mov    rsi,rbp
  4070dd:	mov    rdi,r12
  4070e0:	sub    rdx,rbp
  4070e3:	test   rax,rax
  4070e6:	cmovne rbx,rdx
  4070ea:	mov    rdx,rbx
  4070ed:	pop    rbx
  4070ee:	pop    rbp
  4070ef:	pop    r12
  4070f1:	jmp    406f70 <flatcc_builder_create_string@@Base>
  4070f6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000407100 <flatcc_builder_end_string@@Base>:
  407100:	push   rbp
  407101:	push   rbx
  407102:	sub    rsp,0x8
  407106:	mov    rax,QWORD PTR [rdi+0x30]
  40710a:	cmp    WORD PTR [rax+0xe],0x6
  40710f:	jne    4071d6 <flatcc_builder_end_string@@Base+0xd6>
  407115:	mov    edx,DWORD PTR [rax+0x14]
  407118:	mov    rbx,rdi
  40711b:	cmp    edx,DWORD PTR [rdi+0x20]
  40711e:	jne    4071b7 <flatcc_builder_end_string@@Base+0xb7>
  407124:	mov    rsi,QWORD PTR [rdi+0x18]
  407128:	call   406f70 <flatcc_builder_create_string@@Base>
  40712d:	test   eax,eax
  40712f:	mov    ebp,eax
  407131:	jne    407140 <flatcc_builder_end_string@@Base+0x40>
  407133:	add    rsp,0x8
  407137:	mov    eax,ebp
  407139:	pop    rbx
  40713a:	pop    rbp
  40713b:	ret    
  40713c:	nop    DWORD PTR [rax+0x0]
  407140:	mov    edx,DWORD PTR [rbx+0x20]
  407143:	mov    rdi,QWORD PTR [rbx+0x18]
  407147:	xor    esi,esi
  407149:	call   403090 <memset@plt>
  40714e:	mov    rax,QWORD PTR [rbx+0x30]
  407152:	mov    edi,DWORD PTR [rbx+0x70]
  407155:	mov    esi,DWORD PTR [rax]
  407157:	mov    edx,DWORD PTR [rax+0x8]
  40715a:	mov    ecx,DWORD PTR [rax+0x4]
  40715d:	mov    DWORD PTR [rbx+0x20],edx
  407160:	mov    rdx,rsi
  407163:	mov    DWORD PTR [rbx+0x28],esi
  407166:	add    rsi,QWORD PTR [rbx+0x68]
  40716a:	sub    edi,edx
  40716c:	cmp    ecx,edi
  40716e:	mov    edx,edi
  407170:	cmovb  edx,ecx
  407173:	mov    DWORD PTR [rbx+0x24],edx
  407176:	movzx  edx,WORD PTR [rbx+0xea]
  40717d:	cmp    dx,WORD PTR [rbx+0xe8]
  407184:	mov    QWORD PTR [rbx+0x18],rsi
  407188:	mov    DWORD PTR [rax+0x4],ecx
  40718b:	jbe    407194 <flatcc_builder_end_string@@Base+0x94>
  40718d:	mov    WORD PTR [rbx+0xe8],dx
  407194:	movzx  edx,WORD PTR [rax+0xc]
  407198:	sub    rax,0x24
  40719c:	sub    DWORD PTR [rbx+0x104],0x1
  4071a3:	mov    QWORD PTR [rbx+0x30],rax
  4071a7:	mov    eax,ebp
  4071a9:	mov    WORD PTR [rbx+0xea],dx
  4071b0:	add    rsp,0x8
  4071b4:	pop    rbx
  4071b5:	pop    rbp
  4071b6:	ret    
  4071b7:	lea    rcx,[rip+0x27e2]        # 4099a0 <_IO_stdin_used@@Base+0x9a0>
  4071be:	lea    rsi,[rip+0x22fb]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4071c5:	lea    rdi,[rip+0x25a4]        # 409770 <_IO_stdin_used@@Base+0x770>
  4071cc:	mov    edx,0x6c5
  4071d1:	call   403080 <__assert_fail@plt>
  4071d6:	lea    rcx,[rip+0x27c3]        # 4099a0 <_IO_stdin_used@@Base+0x9a0>
  4071dd:	lea    rsi,[rip+0x22dc]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4071e4:	lea    rdi,[rip+0x245d]        # 409648 <_IO_stdin_used@@Base+0x648>
  4071eb:	mov    edx,0x6c4
  4071f0:	call   403080 <__assert_fail@plt>
  4071f5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407200 <flatcc_builder_string_edit@@Base>:
  407200:	mov    rax,QWORD PTR [rdi+0x18]
  407204:	ret    
  407205:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407210 <flatcc_builder_string_len@@Base>:
  407210:	mov    rax,QWORD PTR [rdi+0x30]
  407214:	mov    eax,DWORD PTR [rax+0x14]
  407217:	ret    
  407218:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407220 <flatcc_builder_table_add@@Base>:
  407220:	push   r13
  407222:	push   r12
  407224:	push   rbp
  407225:	push   rbx
  407226:	sub    rsp,0x8
  40722a:	mov    rax,QWORD PTR [rdi+0x30]
  40722e:	cmp    WORD PTR [rax+0xe],0x3
  407233:	jne    407342 <flatcc_builder_table_add@@Base+0x122>
  407239:	cmp    esi,0x7ffc
  40723f:	mov    r12d,esi
  407242:	ja     407323 <flatcc_builder_table_add@@Base+0x103>
  407248:	cmp    WORD PTR [rdi+0xea],cx
  40724f:	mov    rbx,rdi
  407252:	jb     4072c0 <flatcc_builder_table_add@@Base+0xa0>
  407254:	movsxd r13,r12d
  407257:	add    r13,r13
  40725a:	mov    rsi,r13
  40725d:	add    rsi,QWORD PTR [rbx+0x8]
  407261:	cmp    WORD PTR [rsi],0x0
  407265:	jne    407304 <flatcc_builder_table_add@@Base+0xe4>
  40726b:	mov    eax,DWORD PTR [rbx+0x14]
  40726e:	movzx  ecx,cx
  407271:	xor    eax,r12d
  407274:	imul   eax,eax,0x9e3779b1
  40727a:	xor    eax,edx
  40727c:	imul   eax,eax,0x9e3779b1
  407282:	mov    DWORD PTR [rbx+0x14],eax
  407285:	mov    eax,DWORD PTR [rbx+0x20]
  407288:	lea    ebp,[rcx+rax*1-0x1]
  40728c:	neg    ecx
  40728e:	and    ebp,ecx
  407290:	add    edx,ebp
  407292:	cmp    edx,DWORD PTR [rbx+0x24]
  407295:	mov    DWORD PTR [rbx+0x20],edx
  407298:	jae    4072e0 <flatcc_builder_table_add@@Base+0xc0>
  40729a:	lea    eax,[rbp+0x4]
  40729d:	mov    WORD PTR [rsi],ax
  4072a0:	cmp    r12w,WORD PTR [rbx+0x10]
  4072a5:	jae    4072d0 <flatcc_builder_table_add@@Base+0xb0>
  4072a7:	mov    eax,ebp
  4072a9:	add    rax,QWORD PTR [rbx+0x18]
  4072ad:	add    rsp,0x8
  4072b1:	pop    rbx
  4072b2:	pop    rbp
  4072b3:	pop    r12
  4072b5:	pop    r13
  4072b7:	ret    
  4072b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4072c0:	mov    WORD PTR [rdi+0xea],cx
  4072c7:	jmp    407254 <flatcc_builder_table_add@@Base+0x34>
  4072c9:	nop    DWORD PTR [rax+0x0]
  4072d0:	add    r12d,0x1
  4072d4:	mov    WORD PTR [rbx+0x10],r12w
  4072d9:	jmp    4072a7 <flatcc_builder_table_add@@Base+0x87>
  4072db:	nop    DWORD PTR [rax+rax*1+0x0]
  4072e0:	lea    esi,[rdx+0x1]
  4072e3:	mov    rdi,rbx
  4072e6:	mov    edx,0xfffc
  4072eb:	call   403c20 <_start@@Base+0x3c0>
  4072f0:	test   eax,eax
  4072f2:	jne    407300 <flatcc_builder_table_add@@Base+0xe0>
  4072f4:	mov    rsi,r13
  4072f7:	add    rsi,QWORD PTR [rbx+0x8]
  4072fb:	jmp    40729a <flatcc_builder_table_add@@Base+0x7a>
  4072fd:	nop    DWORD PTR [rax]
  407300:	xor    eax,eax
  407302:	jmp    4072ad <flatcc_builder_table_add@@Base+0x8d>
  407304:	lea    rcx,[rip+0x2675]        # 409980 <_IO_stdin_used@@Base+0x980>
  40730b:	lea    rsi,[rip+0x21ae]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  407312:	lea    rdi,[rip+0x253e]        # 409857 <_IO_stdin_used@@Base+0x857>
  407319:	mov    edx,0x6f8
  40731e:	call   403080 <__assert_fail@plt>
  407323:	lea    rcx,[rip+0x2656]        # 409980 <_IO_stdin_used@@Base+0x980>
  40732a:	lea    rsi,[rip+0x218f]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  407331:	lea    rdi,[rip+0x2460]        # 409798 <_IO_stdin_used@@Base+0x798>
  407338:	mov    edx,0x6ee
  40733d:	call   403080 <__assert_fail@plt>
  407342:	lea    rcx,[rip+0x2637]        # 409980 <_IO_stdin_used@@Base+0x980>
  407349:	lea    rsi,[rip+0x2170]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  407350:	lea    rdi,[rip+0x23b1]        # 409708 <_IO_stdin_used@@Base+0x708>
  407357:	mov    edx,0x6ed
  40735c:	call   403080 <__assert_fail@plt>
  407361:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40736c:	nop    DWORD PTR [rax+0x0]

0000000000407370 <flatcc_builder_table_edit@@Base>:
  407370:	mov    rax,QWORD PTR [rdi+0x30]
  407374:	cmp    WORD PTR [rax+0xe],0x3
  407379:	jne    407386 <flatcc_builder_table_edit@@Base+0x16>
  40737b:	mov    eax,DWORD PTR [rdi+0x20]
  40737e:	sub    rax,rsi
  407381:	add    rax,QWORD PTR [rdi+0x18]
  407385:	ret    
  407386:	lea    rcx,[rip+0x25d3]        # 409960 <_IO_stdin_used@@Base+0x960>
  40738d:	lea    rsi,[rip+0x212c]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  407394:	lea    rdi,[rip+0x236d]        # 409708 <_IO_stdin_used@@Base+0x708>
  40739b:	sub    rsp,0x8
  40739f:	mov    edx,0x702
  4073a4:	call   403080 <__assert_fail@plt>
  4073a9:	nop    DWORD PTR [rax+0x0]

00000000004073b0 <flatcc_builder_table_add_copy@@Base>:
  4073b0:	push   rbp
  4073b1:	push   rbx
  4073b2:	mov    rbx,rcx
  4073b5:	mov    rbp,rdx
  4073b8:	movzx  ecx,r8w
  4073bc:	mov    rdx,rbx
  4073bf:	sub    rsp,0x8
  4073c3:	call   407220 <flatcc_builder_table_add@@Base>
  4073c8:	test   rax,rax
  4073cb:	mov    rcx,rax
  4073ce:	je     4073e1 <flatcc_builder_table_add_copy@@Base+0x31>
  4073d0:	mov    rdx,rbx
  4073d3:	mov    rsi,rbp
  4073d6:	mov    rdi,rax
  4073d9:	call   4030d0 <memcpy@plt>
  4073de:	mov    rcx,rax
  4073e1:	add    rsp,0x8
  4073e5:	mov    rax,rcx
  4073e8:	pop    rbx
  4073e9:	pop    rbp
  4073ea:	ret    
  4073eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004073f0 <flatcc_builder_table_add_offset@@Base>:
  4073f0:	push   r13
  4073f2:	push   r12
  4073f4:	push   rbp
  4073f5:	push   rbx
  4073f6:	sub    rsp,0x8
  4073fa:	mov    rax,QWORD PTR [rdi+0x30]
  4073fe:	cmp    WORD PTR [rax+0xe],0x3
  407403:	jne    407502 <flatcc_builder_table_add_offset@@Base+0x112>
  407409:	cmp    esi,0x7ffc
  40740f:	mov    r12d,esi
  407412:	ja     4074e3 <flatcc_builder_table_add_offset@@Base+0xf3>
  407418:	movsxd r13,esi
  40741b:	mov    rbx,rdi
  40741e:	add    r13,r13
  407421:	mov    rdx,r13
  407424:	add    rdx,QWORD PTR [rdi+0x8]
  407428:	cmp    WORD PTR [rdx],0x0
  40742c:	jne    4074c4 <flatcc_builder_table_add_offset@@Base+0xd4>
  407432:	mov    eax,DWORD PTR [rdi+0x14]
  407435:	xor    eax,esi
  407437:	imul   eax,eax,0x9e3779b1
  40743d:	xor    eax,0x4
  407440:	imul   eax,eax,0x9e3779b1
  407446:	mov    DWORD PTR [rdi+0x14],eax
  407449:	mov    eax,DWORD PTR [rdi+0x20]
  40744c:	lea    ebp,[rax+0x3]
  40744f:	and    ebp,0xfffffffc
  407452:	lea    esi,[rbp+0x4]
  407455:	cmp    esi,DWORD PTR [rdi+0x24]
  407458:	mov    DWORD PTR [rdi+0x20],esi
  40745b:	ja     4074a0 <flatcc_builder_table_add_offset@@Base+0xb0>
  40745d:	lea    eax,[rbp+0x4]
  407460:	mov    WORD PTR [rdx],ax
  407463:	cmp    r12w,WORD PTR [rbx+0x10]
  407468:	jae    407490 <flatcc_builder_table_add_offset@@Base+0xa0>
  40746a:	mov    rax,QWORD PTR [rbx]
  40746d:	lea    rdx,[rax+0x2]
  407471:	mov    QWORD PTR [rbx],rdx
  407474:	mov    WORD PTR [rax],bp
  407477:	mov    eax,ebp
  407479:	add    rax,QWORD PTR [rbx+0x18]
  40747d:	add    rsp,0x8
  407481:	pop    rbx
  407482:	pop    rbp
  407483:	pop    r12
  407485:	pop    r13
  407487:	ret    
  407488:	nop    DWORD PTR [rax+rax*1+0x0]
  407490:	lea    esi,[r12+0x1]
  407495:	mov    WORD PTR [rbx+0x10],si
  407499:	jmp    40746a <flatcc_builder_table_add_offset@@Base+0x7a>
  40749b:	nop    DWORD PTR [rax+rax*1+0x0]
  4074a0:	mov    edx,0xfffc
  4074a5:	call   403c20 <_start@@Base+0x3c0>
  4074aa:	test   eax,eax
  4074ac:	jne    4074c0 <flatcc_builder_table_add_offset@@Base+0xd0>
  4074ae:	mov    rdx,r13
  4074b1:	add    rdx,QWORD PTR [rbx+0x8]
  4074b5:	jmp    40745d <flatcc_builder_table_add_offset@@Base+0x6d>
  4074b7:	nop    WORD PTR [rax+rax*1+0x0]
  4074c0:	xor    eax,eax
  4074c2:	jmp    40747d <flatcc_builder_table_add_offset@@Base+0x8d>
  4074c4:	lea    rcx,[rip+0x2475]        # 409940 <_IO_stdin_used@@Base+0x940>
  4074cb:	lea    rsi,[rip+0x1fee]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4074d2:	lea    rdi,[rip+0x237e]        # 409857 <_IO_stdin_used@@Base+0x857>
  4074d9:	mov    edx,0x71b
  4074de:	call   403080 <__assert_fail@plt>
  4074e3:	lea    rcx,[rip+0x2456]        # 409940 <_IO_stdin_used@@Base+0x940>
  4074ea:	lea    rsi,[rip+0x1fcf]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4074f1:	lea    rdi,[rip+0x22a0]        # 409798 <_IO_stdin_used@@Base+0x798>
  4074f8:	mov    edx,0x714
  4074fd:	call   403080 <__assert_fail@plt>
  407502:	lea    rcx,[rip+0x2437]        # 409940 <_IO_stdin_used@@Base+0x940>
  407509:	lea    rsi,[rip+0x1fb0]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  407510:	lea    rdi,[rip+0x21f1]        # 409708 <_IO_stdin_used@@Base+0x708>
  407517:	mov    edx,0x713
  40751c:	call   403080 <__assert_fail@plt>
  407521:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40752c:	nop    DWORD PTR [rax+0x0]

0000000000407530 <flatcc_builder_table_add_union@@Base>:
  407530:	push   r13
  407532:	push   r12
  407534:	mov    r13,rdx
  407537:	push   rbp
  407538:	push   rbx
  407539:	sar    r13,0x20
  40753d:	sub    rsp,0x8
  407541:	mov    rax,QWORD PTR [rdi+0x30]
  407545:	cmp    WORD PTR [rax+0xe],0x3
  40754a:	jne    4075c4 <flatcc_builder_table_add_union@@Base+0x94>
  40754c:	test   dl,dl
  40754e:	mov    r12,rdi
  407551:	mov    ebx,esi
  407553:	mov    rbp,rdx
  407556:	je     4075a0 <flatcc_builder_table_add_union@@Base+0x70>
  407558:	test   r13d,r13d
  40755b:	je     40756e <flatcc_builder_table_add_union@@Base+0x3e>
  40755d:	call   4073f0 <flatcc_builder_table_add_offset@@Base>
  407562:	test   rax,rax
  407565:	je     407602 <flatcc_builder_table_add_union@@Base+0xd2>
  40756b:	mov    DWORD PTR [rax],r13d
  40756e:	lea    esi,[rbx-0x1]
  407571:	mov    ecx,0x1
  407576:	mov    edx,0x1
  40757b:	mov    rdi,r12
  40757e:	call   407220 <flatcc_builder_table_add@@Base>
  407583:	test   rax,rax
  407586:	je     4075e3 <flatcc_builder_table_add_union@@Base+0xb3>
  407588:	mov    BYTE PTR [rax],bpl
  40758b:	add    rsp,0x8
  40758f:	xor    eax,eax
  407591:	pop    rbx
  407592:	pop    rbp
  407593:	pop    r12
  407595:	pop    r13
  407597:	ret    
  407598:	nop    DWORD PTR [rax+rax*1+0x0]
  4075a0:	test   r13d,r13d
  4075a3:	je     40756e <flatcc_builder_table_add_union@@Base+0x3e>
  4075a5:	lea    rcx,[rip+0x2524]        # 409ad0 <_IO_stdin_used@@Base+0xad0>
  4075ac:	lea    rsi,[rip+0x1f0d]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4075b3:	lea    rdi,[rip+0x2226]        # 4097e0 <_IO_stdin_used@@Base+0x7e0>
  4075ba:	mov    edx,0x5ef
  4075bf:	call   403080 <__assert_fail@plt>
  4075c4:	lea    rcx,[rip+0x2505]        # 409ad0 <_IO_stdin_used@@Base+0xad0>
  4075cb:	lea    rsi,[rip+0x1eee]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4075d2:	lea    rdi,[rip+0x212f]        # 409708 <_IO_stdin_used@@Base+0x708>
  4075d9:	mov    edx,0x5ee
  4075de:	call   403080 <__assert_fail@plt>
  4075e3:	lea    rcx,[rip+0x24e6]        # 409ad0 <_IO_stdin_used@@Base+0xad0>
  4075ea:	lea    rsi,[rip+0x1ecf]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4075f1:	lea    rdi,[rip+0x22ee]        # 4098e6 <_IO_stdin_used@@Base+0x8e6>
  4075f8:	mov    edx,0x5f6
  4075fd:	call   403080 <__assert_fail@plt>
  407602:	lea    rcx,[rip+0x24c7]        # 409ad0 <_IO_stdin_used@@Base+0xad0>
  407609:	lea    rsi,[rip+0x1eb0]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  407610:	lea    rdi,[rip+0x22c5]        # 4098dc <_IO_stdin_used@@Base+0x8dc>
  407617:	mov    edx,0x5f2
  40761c:	call   403080 <__assert_fail@plt>
  407621:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40762c:	nop    DWORD PTR [rax+0x0]

0000000000407630 <flatcc_builder_table_add_union_vector@@Base>:
  407630:	push   r13
  407632:	push   r12
  407634:	push   rbp
  407635:	push   rbx
  407636:	mov    rbp,rdx
  407639:	sar    rbp,0x20
  40763d:	sub    rsp,0x18
  407641:	mov    rax,QWORD PTR [rdi+0x30]
  407645:	cmp    WORD PTR [rax+0xe],0x3
  40764a:	jne    4076c6 <flatcc_builder_table_add_union_vector@@Base+0x96>
  40764c:	test   ebp,ebp
  40764e:	sete   al
  407651:	test   edx,edx
  407653:	sete   cl
  407656:	cmp    cl,al
  407658:	je     407680 <flatcc_builder_table_add_union_vector@@Base+0x50>
  40765a:	test   edx,edx
  40765c:	setne  dl
  40765f:	cmp    al,dl
  407661:	je     4076e5 <flatcc_builder_table_add_union_vector@@Base+0xb5>
  407667:	mov    r12d,0xffffffff
  40766d:	add    rsp,0x18
  407671:	mov    eax,r12d
  407674:	pop    rbx
  407675:	pop    rbp
  407676:	pop    r12
  407678:	pop    r13
  40767a:	ret    
  40767b:	nop    DWORD PTR [rax+rax*1+0x0]
  407680:	xor    r12d,r12d
  407683:	test   edx,edx
  407685:	je     40766d <flatcc_builder_table_add_union_vector@@Base+0x3d>
  407687:	mov    r13d,esi
  40768a:	lea    esi,[rsi-0x1]
  40768d:	mov    QWORD PTR [rsp+0x8],rdx
  407692:	mov    rbx,rdi
  407695:	call   4073f0 <flatcc_builder_table_add_offset@@Base>
  40769a:	test   rax,rax
  40769d:	mov    rdx,QWORD PTR [rsp+0x8]
  4076a2:	je     407723 <flatcc_builder_table_add_union_vector@@Base+0xf3>
  4076a4:	mov    DWORD PTR [rax],edx
  4076a6:	mov    esi,r13d
  4076a9:	mov    rdi,rbx
  4076ac:	call   4073f0 <flatcc_builder_table_add_offset@@Base>
  4076b1:	test   rax,rax
  4076b4:	je     407704 <flatcc_builder_table_add_union_vector@@Base+0xd4>
  4076b6:	mov    DWORD PTR [rax],ebp
  4076b8:	add    rsp,0x18
  4076bc:	mov    eax,r12d
  4076bf:	pop    rbx
  4076c0:	pop    rbp
  4076c1:	pop    r12
  4076c3:	pop    r13
  4076c5:	ret    
  4076c6:	lea    rcx,[rip+0x23d3]        # 409aa0 <_IO_stdin_used@@Base+0xaa0>
  4076cd:	lea    rsi,[rip+0x1dec]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4076d4:	lea    rdi,[rip+0x202d]        # 409708 <_IO_stdin_used@@Base+0x708>
  4076db:	mov    edx,0x600
  4076e0:	call   403080 <__assert_fail@plt>
  4076e5:	lea    rcx,[rip+0x23b4]        # 409aa0 <_IO_stdin_used@@Base+0xaa0>
  4076ec:	lea    rsi,[rip+0x1dcd]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4076f3:	lea    rdi,[rip+0x210e]        # 409808 <_IO_stdin_used@@Base+0x808>
  4076fa:	mov    edx,0x601
  4076ff:	call   403080 <__assert_fail@plt>
  407704:	lea    rcx,[rip+0x2395]        # 409aa0 <_IO_stdin_used@@Base+0xaa0>
  40770b:	lea    rsi,[rip+0x1dae]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  407712:	lea    rdi,[rip+0x21c3]        # 4098dc <_IO_stdin_used@@Base+0x8dc>
  407719:	mov    edx,0x608
  40771e:	call   403080 <__assert_fail@plt>
  407723:	lea    rcx,[rip+0x2376]        # 409aa0 <_IO_stdin_used@@Base+0xaa0>
  40772a:	lea    rsi,[rip+0x1d8f]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  407731:	lea    rdi,[rip+0x21a4]        # 4098dc <_IO_stdin_used@@Base+0x8dc>
  407738:	mov    edx,0x604
  40773d:	call   403080 <__assert_fail@plt>
  407742:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40774d:	nop    DWORD PTR [rax]

0000000000407750 <flatcc_builder_push_buffer_alignment@@Base>:
  407750:	mov    edx,0x4
  407755:	movzx  eax,WORD PTR [rdi+0xe8]
  40775c:	mov    WORD PTR [rdi+0xe8],dx
  407763:	ret    
  407764:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40776f:	nop

0000000000407770 <flatcc_builder_pop_buffer_alignment@@Base>:
  407770:	cmp    si,WORD PTR [rdi+0xe8]
  407777:	jbe    407780 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  407779:	mov    WORD PTR [rdi+0xe8],si
  407780:	repz ret 
  407782:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40778d:	nop    DWORD PTR [rax]

0000000000407790 <flatcc_builder_get_buffer_alignment@@Base>:
  407790:	movzx  eax,WORD PTR [rdi+0xe8]
  407797:	ret    
  407798:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004077a0 <flatcc_builder_set_vtable_clustering@@Base>:
  4077a0:	xor    eax,eax
  4077a2:	test   esi,esi
  4077a4:	sete   al
  4077a7:	mov    DWORD PTR [rdi+0x124],eax
  4077ad:	ret    
  4077ae:	xchg   ax,ax

00000000004077b0 <flatcc_builder_set_block_align@@Base>:
  4077b0:	mov    WORD PTR [rdi+0xec],si
  4077b7:	ret    
  4077b8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004077c0 <flatcc_builder_get_level@@Base>:
  4077c0:	mov    eax,DWORD PTR [rdi+0x104]
  4077c6:	ret    
  4077c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004077d0 <flatcc_builder_set_max_level@@Base>:
  4077d0:	cmp    esi,DWORD PTR [rdi+0x108]
  4077d6:	mov    DWORD PTR [rdi+0x120],esi
  4077dc:	jle    4077e4 <flatcc_builder_set_max_level@@Base+0x14>
  4077de:	mov    DWORD PTR [rdi+0x108],esi
  4077e4:	repz ret 
  4077e6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004077f0 <flatcc_builder_get_buffer_size@@Base>:
  4077f0:	mov    eax,DWORD PTR [rdi+0xf4]
  4077f6:	sub    eax,DWORD PTR [rdi+0xf0]
  4077fc:	cdqe   
  4077fe:	ret    
  4077ff:	nop

0000000000407800 <flatcc_builder_get_buffer_start@@Base>:
  407800:	mov    eax,DWORD PTR [rdi+0xf0]
  407806:	ret    
  407807:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407810 <flatcc_builder_get_buffer_end@@Base>:
  407810:	mov    eax,DWORD PTR [rdi+0xf4]
  407816:	ret    
  407817:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407820 <flatcc_builder_set_vtable_cache_limit@@Base>:
  407820:	mov    QWORD PTR [rdi+0x118],rsi
  407827:	ret    
  407828:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407830 <flatcc_builder_set_identifier@@Base>:
  407830:	test   rsi,rsi
  407833:	je     407840 <flatcc_builder_set_identifier@@Base+0x10>
  407835:	mov    eax,DWORD PTR [rsi]
  407837:	mov    DWORD PTR [rdi+0x110],eax
  40783d:	ret    
  40783e:	xchg   ax,ax
  407840:	mov    rsi,0x409fa0
  407847:	mov    eax,DWORD PTR [rsi]
  407849:	mov    DWORD PTR [rdi+0x110],eax
  40784f:	ret    

0000000000407850 <flatcc_builder_get_type@@Base>:
  407850:	mov    rax,QWORD PTR [rdi+0x30]
  407854:	test   rax,rax
  407857:	je     407860 <flatcc_builder_get_type@@Base+0x10>
  407859:	movzx  eax,WORD PTR [rax+0xe]
  40785d:	ret    
  40785e:	xchg   ax,ax
  407860:	xor    eax,eax
  407862:	ret    
  407863:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40786e:	xchg   ax,ax

0000000000407870 <flatcc_builder_get_type_at@@Base>:
  407870:	test   esi,esi
  407872:	jle    4078a0 <flatcc_builder_get_type_at@@Base+0x30>
  407874:	mov    edx,DWORD PTR [rdi+0x104]
  40787a:	xor    eax,eax
  40787c:	cmp    esi,edx
  40787e:	jg     4078a2 <flatcc_builder_get_type_at@@Base+0x32>
  407880:	sub    esi,edx
  407882:	mov    rdx,QWORD PTR [rdi+0x30]
  407886:	movsxd rsi,esi
  407889:	lea    rax,[rsi+rsi*8]
  40788d:	lea    rax,[rdx+rax*4]
  407891:	movzx  eax,WORD PTR [rax+0xe]
  407895:	ret    
  407896:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4078a0:	xor    eax,eax
  4078a2:	repz ret 
  4078a4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4078af:	nop

00000000004078b0 <flatcc_builder_get_direct_buffer@@Base>:
  4078b0:	mov    eax,DWORD PTR [rdi+0x128]
  4078b6:	test   eax,eax
  4078b8:	je     4078ca <flatcc_builder_get_direct_buffer@@Base+0x1a>
  4078ba:	mov    rax,QWORD PTR [rdi+0x138]
  4078c1:	cmp    QWORD PTR [rdi+0x130],rax
  4078c8:	je     4078e0 <flatcc_builder_get_direct_buffer@@Base+0x30>
  4078ca:	test   rsi,rsi
  4078cd:	jne    4078d2 <flatcc_builder_get_direct_buffer@@Base+0x22>
  4078cf:	xor    eax,eax
  4078d1:	ret    
  4078d2:	mov    QWORD PTR [rsi],0x0
  4078d9:	xor    eax,eax
  4078db:	ret    
  4078dc:	nop    DWORD PTR [rax+0x0]
  4078e0:	test   rsi,rsi
  4078e3:	je     4078ef <flatcc_builder_get_direct_buffer@@Base+0x3f>
  4078e5:	mov    rax,QWORD PTR [rdi+0x160]
  4078ec:	mov    QWORD PTR [rsi],rax
  4078ef:	mov    rax,QWORD PTR [rdi+0x140]
  4078f6:	ret    
  4078f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407900 <flatcc_builder_copy_buffer@@Base>:
  407900:	mov    eax,DWORD PTR [rdi+0x128]
  407906:	test   eax,eax
  407908:	je     407928 <flatcc_builder_copy_buffer@@Base+0x28>
  40790a:	sub    rsp,0x8
  40790e:	add    rdi,0x130
  407915:	call   408100 <flatcc_emitter_copy_buffer@@Base>
  40791a:	test   rax,rax
  40791d:	je     40792b <flatcc_builder_copy_buffer@@Base+0x2b>
  40791f:	add    rsp,0x8
  407923:	ret    
  407924:	nop    DWORD PTR [rax+0x0]
  407928:	xor    eax,eax
  40792a:	ret    
  40792b:	lea    rcx,[rip+0x1fee]        # 409920 <_IO_stdin_used@@Base+0x920>
  407932:	lea    rsi,[rip+0x1b87]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  407939:	lea    rdi,[rip+0x1fb2]        # 4098f2 <_IO_stdin_used@@Base+0x8f2>
  407940:	mov    edx,0x786
  407945:	call   403080 <__assert_fail@plt>
  40794a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407950 <flatcc_builder_finalize_buffer@@Base>:
  407950:	push   r12
  407952:	push   rbp
  407953:	mov    r12,rdi
  407956:	push   rbx
  407957:	mov    rbx,rsi
  40795a:	call   4077f0 <flatcc_builder_get_buffer_size@@Base>
  40795f:	test   rbx,rbx
  407962:	mov    rbp,rax
  407965:	je     40796a <flatcc_builder_finalize_buffer@@Base+0x1a>
  407967:	mov    QWORD PTR [rbx],rax
  40796a:	mov    rdi,rbp
  40796d:	call   4030e0 <malloc@plt>
  407972:	test   rax,rax
  407975:	mov    rbx,rax
  407978:	je     407995 <flatcc_builder_finalize_buffer@@Base+0x45>
  40797a:	mov    rdx,rbp
  40797d:	mov    rsi,rax
  407980:	mov    rdi,r12
  407983:	call   407900 <flatcc_builder_copy_buffer@@Base>
  407988:	test   rax,rax
  40798b:	je     4079b4 <flatcc_builder_finalize_buffer@@Base+0x64>
  40798d:	mov    rax,rbx
  407990:	pop    rbx
  407991:	pop    rbp
  407992:	pop    r12
  407994:	ret    
  407995:	lea    rcx,[rip+0x1f64]        # 409900 <_IO_stdin_used@@Base+0x900>
  40799c:	lea    rsi,[rip+0x1b1d]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4079a3:	lea    rdi,[rip+0x1ead]        # 409857 <_IO_stdin_used@@Base+0x857>
  4079aa:	mov    edx,0x798
  4079af:	call   403080 <__assert_fail@plt>
  4079b4:	lea    rcx,[rip+0x1f45]        # 409900 <_IO_stdin_used@@Base+0x900>
  4079bb:	lea    rsi,[rip+0x1afe]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4079c2:	lea    rdi,[rip+0x1e8e]        # 409857 <_IO_stdin_used@@Base+0x857>
  4079c9:	mov    edx,0x79c
  4079ce:	call   403080 <__assert_fail@plt>
  4079d3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4079de:	xchg   ax,ax

00000000004079e0 <flatcc_builder_finalize_aligned_buffer@@Base>:
  4079e0:	push   r13
  4079e2:	push   r12
  4079e4:	mov    r12,rdi
  4079e7:	push   rbp
  4079e8:	push   rbx
  4079e9:	mov    rbp,rsi
  4079ec:	sub    rsp,0x18
  4079f0:	mov    rax,QWORD PTR fs:0x28
  4079f9:	mov    QWORD PTR [rsp+0x8],rax
  4079fe:	xor    eax,eax
  407a00:	call   4077f0 <flatcc_builder_get_buffer_size@@Base>
  407a05:	test   rbp,rbp
  407a08:	mov    rbx,rax
  407a0b:	je     407a11 <flatcc_builder_finalize_aligned_buffer@@Base+0x31>
  407a0d:	mov    QWORD PTR [rbp+0x0],rax
  407a11:	mov    rdi,r12
  407a14:	call   407790 <flatcc_builder_get_buffer_alignment@@Base>
  407a19:	movzx  eax,ax
  407a1c:	mov    esi,0x8
  407a21:	mov    rdi,rsp
  407a24:	lea    rdx,[rbx+rax*1-0x1]
  407a29:	mov    rbx,rax
  407a2c:	mov    QWORD PTR [rsp],0x0
  407a34:	neg    rbx
  407a37:	and    rbx,rdx
  407a3a:	cmp    rax,0x8
  407a3e:	cmovae rsi,rax
  407a42:	mov    rdx,rbx
  407a45:	call   403130 <posix_memalign@plt>
  407a4a:	test   eax,eax
  407a4c:	je     407a90 <flatcc_builder_finalize_aligned_buffer@@Base+0xb0>
  407a4e:	mov    rdi,QWORD PTR [rsp]
  407a52:	test   rdi,rdi
  407a55:	je     407a5c <flatcc_builder_finalize_aligned_buffer@@Base+0x7c>
  407a57:	call   403030 <free@plt>
  407a5c:	test   rbp,rbp
  407a5f:	je     407ab6 <flatcc_builder_finalize_aligned_buffer@@Base+0xd6>
  407a61:	mov    QWORD PTR [rbp+0x0],0x0
  407a69:	xor    r13d,r13d
  407a6c:	mov    rcx,QWORD PTR [rsp+0x8]
  407a71:	xor    rcx,QWORD PTR fs:0x28
  407a7a:	mov    rax,r13
  407a7d:	jne    407ab1 <flatcc_builder_finalize_aligned_buffer@@Base+0xd1>
  407a7f:	add    rsp,0x18
  407a83:	pop    rbx
  407a84:	pop    rbp
  407a85:	pop    r12
  407a87:	pop    r13
  407a89:	ret    
  407a8a:	nop    WORD PTR [rax+rax*1+0x0]
  407a90:	mov    r13,QWORD PTR [rsp]
  407a94:	test   r13,r13
  407a97:	je     407a5c <flatcc_builder_finalize_aligned_buffer@@Base+0x7c>
  407a99:	mov    rdx,rbx
  407a9c:	mov    rsi,r13
  407a9f:	mov    rdi,r12
  407aa2:	call   407900 <flatcc_builder_copy_buffer@@Base>
  407aa7:	test   rax,rax
  407aaa:	jne    407a6c <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
  407aac:	mov    rdi,r13
  407aaf:	jmp    407a57 <flatcc_builder_finalize_aligned_buffer@@Base+0x77>
  407ab1:	call   403060 <__stack_chk_fail@plt>
  407ab6:	xor    r13d,r13d
  407ab9:	jmp    407a6c <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
  407abb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407ac0 <flatcc_builder_aligned_alloc@@Base>:
  407ac0:	sub    rsp,0x18
  407ac4:	mov    rdx,rsi
  407ac7:	mov    esi,0x8
  407acc:	mov    rax,QWORD PTR fs:0x28
  407ad5:	mov    QWORD PTR [rsp+0x8],rax
  407ada:	xor    eax,eax
  407adc:	cmp    rdi,0x8
  407ae0:	mov    QWORD PTR [rsp],0x0
  407ae8:	cmovae rsi,rdi
  407aec:	mov    rdi,rsp
  407aef:	call   403130 <posix_memalign@plt>
  407af4:	test   eax,eax
  407af6:	mov    rax,QWORD PTR [rsp]
  407afa:	je     407b0b <flatcc_builder_aligned_alloc@@Base+0x4b>
  407afc:	test   rax,rax
  407aff:	je     407b0b <flatcc_builder_aligned_alloc@@Base+0x4b>
  407b01:	mov    rdi,rax
  407b04:	call   403030 <free@plt>
  407b09:	xor    eax,eax
  407b0b:	mov    rcx,QWORD PTR [rsp+0x8]
  407b10:	xor    rcx,QWORD PTR fs:0x28
  407b19:	jne    407b20 <flatcc_builder_aligned_alloc@@Base+0x60>
  407b1b:	add    rsp,0x18
  407b1f:	ret    
  407b20:	call   403060 <__stack_chk_fail@plt>
  407b25:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407b30 <flatcc_builder_aligned_free@@Base>:
  407b30:	jmp    403030 <free@plt>
  407b35:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407b40 <flatcc_builder_get_emit_context@@Base>:
  407b40:	mov    rax,QWORD PTR [rdi+0x38]
  407b44:	ret    
  407b45:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407b4f:	nop

0000000000407b50 <flatcc_emitter_recycle_page@@Base>:
  407b50:	mov    rax,QWORD PTR [rdi]
  407b53:	cmp    rax,rsi
  407b56:	je     407bb0 <flatcc_emitter_recycle_page@@Base+0x60>
  407b58:	cmp    rsi,QWORD PTR [rdi+0x8]
  407b5c:	je     407bb0 <flatcc_emitter_recycle_page@@Base+0x60>
  407b5e:	mov    rdx,QWORD PTR [rsi+0xb80]
  407b65:	mov    rcx,QWORD PTR [rsi+0xb88]
  407b6c:	mov    QWORD PTR [rdx+0xb88],rcx
  407b73:	mov    rcx,QWORD PTR [rsi+0xb88]
  407b7a:	mov    QWORD PTR [rcx+0xb80],rdx
  407b81:	mov    rdx,QWORD PTR [rax+0xb88]
  407b88:	mov    QWORD PTR [rsi+0xb80],rax
  407b8f:	mov    QWORD PTR [rsi+0xb88],rdx
  407b96:	mov    QWORD PTR [rdx+0xb80],rsi
  407b9d:	mov    rax,QWORD PTR [rsi+0xb80]
  407ba4:	mov    QWORD PTR [rax+0xb88],rsi
  407bab:	xor    eax,eax
  407bad:	ret    
  407bae:	xchg   ax,ax
  407bb0:	mov    eax,0xffffffff
  407bb5:	ret    
  407bb6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000407bc0 <flatcc_emitter_reset@@Base>:
  407bc0:	mov    rax,QWORD PTR [rdi]
  407bc3:	test   rax,rax
  407bc6:	je     407c8d <flatcc_emitter_reset@@Base+0xcd>
  407bcc:	lea    rdx,[rax+0x5c0]
  407bd3:	mov    QWORD PTR [rdi+0x8],rax
  407bd7:	mov    QWORD PTR [rdi+0x18],0x5c0
  407bdf:	mov    QWORD PTR [rdi+0x28],0x5c0
  407be7:	mov    rcx,QWORD PTR [rdi+0x30]
  407beb:	mov    QWORD PTR [rdi+0x10],rdx
  407bef:	mov    QWORD PTR [rdi+0x20],rdx
  407bf3:	mov    rdx,QWORD PTR [rdi+0x40]
  407bf7:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  407c01:	test   rdx,rdx
  407c04:	je     407c90 <flatcc_emitter_reset@@Base+0xd0>
  407c0a:	lea    rdx,[rdx+rdx*2]
  407c0e:	shr    rcx,0x2
  407c12:	mov    QWORD PTR [rdi+0x30],0x0
  407c1a:	shr    rdx,0x2
  407c1e:	add    rdx,rcx
  407c21:	mov    QWORD PTR [rdi+0x40],rdx
  407c25:	add    rdx,rdx
  407c28:	cmp    QWORD PTR [rdi+0x38],rdx
  407c2c:	jbe    407c8d <flatcc_emitter_reset@@Base+0xcd>
  407c2e:	push   rbx
  407c2f:	mov    rbx,rdi
  407c32:	mov    rdi,QWORD PTR [rax+0xb80]
  407c39:	cmp    rax,rdi
  407c3c:	jne    407c50 <flatcc_emitter_reset@@Base+0x90>
  407c3e:	jmp    407c8c <flatcc_emitter_reset@@Base+0xcc>
  407c40:	mov    rax,QWORD PTR [rbx+0x8]
  407c44:	mov    rdi,QWORD PTR [rax+0xb80]
  407c4b:	cmp    rdi,QWORD PTR [rbx]
  407c4e:	je     407c8c <flatcc_emitter_reset@@Base+0xcc>
  407c50:	mov    rdx,QWORD PTR [rdi+0xb80]
  407c57:	mov    QWORD PTR [rax+0xb80],rdx
  407c5e:	mov    rdx,QWORD PTR [rdi+0xb80]
  407c65:	mov    QWORD PTR [rdx+0xb88],rax
  407c6c:	call   403030 <free@plt>
  407c71:	mov    rsi,QWORD PTR [rbx+0x40]
  407c75:	mov    rax,QWORD PTR [rbx+0x38]
  407c79:	lea    rdx,[rsi+rsi*1]
  407c7d:	sub    rax,0xb80
  407c83:	mov    QWORD PTR [rbx+0x38],rax
  407c87:	cmp    rdx,rax
  407c8a:	jb     407c40 <flatcc_emitter_reset@@Base+0x80>
  407c8c:	pop    rbx
  407c8d:	repz ret 
  407c8f:	nop
  407c90:	mov    rdx,rcx
  407c93:	jmp    407c0a <flatcc_emitter_reset@@Base+0x4a>
  407c98:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407ca0 <flatcc_emitter_clear@@Base>:
  407ca0:	mov    rax,QWORD PTR [rdi]
  407ca3:	test   rax,rax
  407ca6:	je     407d27 <flatcc_emitter_clear@@Base+0x87>
  407ca8:	push   rbp
  407ca9:	push   rbx
  407caa:	mov    rbp,rdi
  407cad:	sub    rsp,0x8
  407cb1:	mov    rdx,QWORD PTR [rax+0xb88]
  407cb8:	mov    QWORD PTR [rdx+0xb80],0x0
  407cc3:	mov    rbx,QWORD PTR [rax+0xb80]
  407cca:	test   rbx,rbx
  407ccd:	jne    407cdb <flatcc_emitter_clear@@Base+0x3b>
  407ccf:	jmp    407d29 <flatcc_emitter_clear@@Base+0x89>
  407cd1:	nop    DWORD PTR [rax+0x0]
  407cd8:	mov    rbx,rax
  407cdb:	mov    rdi,QWORD PTR [rbx+0xb88]
  407ce2:	call   403030 <free@plt>
  407ce7:	mov    rax,QWORD PTR [rbx+0xb80]
  407cee:	test   rax,rax
  407cf1:	jne    407cd8 <flatcc_emitter_clear@@Base+0x38>
  407cf3:	mov    rdi,rbx
  407cf6:	call   403030 <free@plt>
  407cfb:	lea    rdi,[rbp+0x8]
  407cff:	mov    QWORD PTR [rbp+0x0],0x0
  407d07:	mov    QWORD PTR [rbp+0x40],0x0
  407d0f:	xor    eax,eax
  407d11:	and    rdi,0xfffffffffffffff8
  407d15:	sub    rbp,rdi
  407d18:	lea    ecx,[rbp+0x48]
  407d1b:	shr    ecx,0x3
  407d1e:	rep stos QWORD PTR es:[rdi],rax
  407d21:	add    rsp,0x8
  407d25:	pop    rbx
  407d26:	pop    rbp
  407d27:	repz ret 
  407d29:	mov    rbx,rax
  407d2c:	jmp    407cf3 <flatcc_emitter_clear@@Base+0x53>
  407d2e:	xchg   ax,ax

0000000000407d30 <flatcc_emitter@@Base>:
  407d30:	push   r15
  407d32:	push   r14
  407d34:	mov    r14,rsi
  407d37:	push   r13
  407d39:	push   r12
  407d3b:	push   rbp
  407d3c:	push   rbx
  407d3d:	mov    rbx,rdi
  407d40:	sub    rsp,0x18
  407d44:	add    QWORD PTR [rdi+0x30],r8
  407d48:	test   ecx,ecx
  407d4a:	js     407f3e <flatcc_emitter@@Base+0x20e>
  407d50:	mov    rax,QWORD PTR [rdi+0x28]
  407d54:	cmp    r8,rax
  407d57:	jbe    407de4 <flatcc_emitter@@Base+0xb4>
  407d5d:	test   edx,edx
  407d5f:	je     407dd3 <flatcc_emitter@@Base+0xa3>
  407d61:	lea    r15d,[rdx-0x1]
  407d65:	add    r15,0x1
  407d69:	shl    r15,0x4
  407d6d:	lea    rax,[rsi+r15*1]
  407d71:	mov    QWORD PTR [rsp+0x8],rax
  407d76:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407d80:	mov    r12,QWORD PTR [r14+0x8]
  407d84:	mov    r13,QWORD PTR [r14]
  407d87:	test   r12,r12
  407d8a:	je     407dc8 <flatcc_emitter@@Base+0x98>
  407d8c:	nop    DWORD PTR [rax+0x0]
  407d90:	mov    rbp,QWORD PTR [rbx+0x28]
  407d94:	cmp    rbp,r12
  407d97:	jae    407e38 <flatcc_emitter@@Base+0x108>
  407d9d:	test   rbp,rbp
  407da0:	je     407e48 <flatcc_emitter@@Base+0x118>
  407da6:	sub    r12,rbp
  407da9:	mov    rdi,QWORD PTR [rbx+0x20]
  407dad:	mov    rsi,r13
  407db0:	mov    rdx,rbp
  407db3:	add    r13,rbp
  407db6:	call   4030d0 <memcpy@plt>
  407dbb:	add    QWORD PTR [rbx+0x20],rbp
  407dbf:	sub    QWORD PTR [rbx+0x28],rbp
  407dc3:	test   r12,r12
  407dc6:	jne    407d90 <flatcc_emitter@@Base+0x60>
  407dc8:	add    r14,0x10
  407dcc:	cmp    r14,QWORD PTR [rsp+0x8]
  407dd1:	jne    407d80 <flatcc_emitter@@Base+0x50>
  407dd3:	add    rsp,0x18
  407dd7:	xor    eax,eax
  407dd9:	pop    rbx
  407dda:	pop    rbp
  407ddb:	pop    r12
  407ddd:	pop    r13
  407ddf:	pop    r14
  407de1:	pop    r15
  407de3:	ret    
  407de4:	mov    rcx,QWORD PTR [rdi+0x20]
  407de8:	sub    rax,r8
  407deb:	mov    QWORD PTR [rdi+0x28],rax
  407def:	lea    rsi,[rcx+r8*1]
  407df3:	mov    QWORD PTR [rdi+0x20],rsi
  407df7:	test   edx,edx
  407df9:	je     407dd3 <flatcc_emitter@@Base+0xa3>
  407dfb:	lea    ebx,[rdx-0x1]
  407dfe:	add    rbx,0x1
  407e02:	shl    rbx,0x4
  407e06:	add    rbx,r14
  407e09:	nop    DWORD PTR [rax+0x0]
  407e10:	mov    rsi,QWORD PTR [r14]
  407e13:	mov    rdx,QWORD PTR [r14+0x8]
  407e17:	mov    rdi,rcx
  407e1a:	add    r14,0x10
  407e1e:	call   4030d0 <memcpy@plt>
  407e23:	mov    rcx,rax
  407e26:	add    rcx,QWORD PTR [r14-0x8]
  407e2a:	cmp    rbx,r14
  407e2d:	jne    407e10 <flatcc_emitter@@Base+0xe0>
  407e2f:	jmp    407dd3 <flatcc_emitter@@Base+0xa3>
  407e31:	nop    DWORD PTR [rax+0x0]
  407e38:	mov    rbp,r12
  407e3b:	xor    r12d,r12d
  407e3e:	jmp    407da9 <flatcc_emitter@@Base+0x79>
  407e43:	nop    DWORD PTR [rax+rax*1+0x0]
  407e48:	mov    r15,QWORD PTR [rbx+0x8]
  407e4c:	test   r15,r15
  407e4f:	je     407ed0 <flatcc_emitter@@Base+0x1a0>
  407e51:	mov    rbp,QWORD PTR [r15+0xb80]
  407e58:	cmp    rbp,QWORD PTR [rbx]
  407e5b:	je     407e90 <flatcc_emitter@@Base+0x160>
  407e5d:	mov    QWORD PTR [rbx+0x8],rbp
  407e61:	mov    rax,QWORD PTR [rbp+0xb88]
  407e68:	mov    QWORD PTR [rbx+0x20],rbp
  407e6c:	mov    QWORD PTR [rbx+0x28],0xb80
  407e74:	mov    eax,DWORD PTR [rax+0xb90]
  407e7a:	add    eax,0xb80
  407e7f:	mov    DWORD PTR [rbp+0xb90],eax
  407e85:	jmp    407d90 <flatcc_emitter@@Base+0x60>
  407e8a:	nop    WORD PTR [rax+rax*1+0x0]
  407e90:	mov    edi,0xb98
  407e95:	call   4030e0 <malloc@plt>
  407e9a:	test   rax,rax
  407e9d:	je     407edf <flatcc_emitter@@Base+0x1af>
  407e9f:	mov    QWORD PTR [rax+0xb80],rbp
  407ea6:	add    QWORD PTR [rbx+0x38],0xb80
  407eae:	mov    QWORD PTR [rax+0xb88],r15
  407eb5:	mov    QWORD PTR [rbp+0xb88],rax
  407ebc:	mov    rbp,rax
  407ebf:	mov    QWORD PTR [r15+0xb80],rax
  407ec6:	mov    QWORD PTR [rbx+0x8],rax
  407eca:	jmp    407e61 <flatcc_emitter@@Base+0x131>
  407ecc:	nop    DWORD PTR [rax+0x0]
  407ed0:	mov    edi,0xb98
  407ed5:	call   4030e0 <malloc@plt>
  407eda:	test   rax,rax
  407edd:	jne    407ef3 <flatcc_emitter@@Base+0x1c3>
  407edf:	add    rsp,0x18
  407ee3:	mov    eax,0xffffffff
  407ee8:	pop    rbx
  407ee9:	pop    rbp
  407eea:	pop    r12
  407eec:	pop    r13
  407eee:	pop    r14
  407ef0:	pop    r15
  407ef2:	ret    
  407ef3:	lea    rdx,[rax+0x5c0]
  407efa:	add    QWORD PTR [rbx+0x38],0xb80
  407f02:	mov    QWORD PTR [rbx],rax
  407f05:	mov    QWORD PTR [rbx+0x8],rax
  407f09:	mov    QWORD PTR [rax+0xb80],rax
  407f10:	mov    QWORD PTR [rax+0xb88],rax
  407f17:	mov    QWORD PTR [rbx+0x10],rdx
  407f1b:	mov    QWORD PTR [rbx+0x20],rdx
  407f1f:	mov    QWORD PTR [rbx+0x18],0x5c0
  407f27:	mov    QWORD PTR [rbx+0x28],0x5c0
  407f2f:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  407f39:	jmp    407d90 <flatcc_emitter@@Base+0x60>
  407f3e:	mov    rax,QWORD PTR [rdi+0x18]
  407f42:	cmp    r8,rax
  407f45:	jbe    407fdc <flatcc_emitter@@Base+0x2ac>
  407f4b:	movsxd rax,edx
  407f4e:	shl    rax,0x4
  407f52:	add    r14,rax
  407f55:	mov    eax,edx
  407f57:	shl    rax,0x4
  407f5b:	mov    rcx,r14
  407f5e:	sub    rcx,rax
  407f61:	mov    QWORD PTR [rsp+0x8],rcx
  407f66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407f70:	cmp    r14,QWORD PTR [rsp+0x8]
  407f75:	je     407dd3 <flatcc_emitter@@Base+0xa3>
  407f7b:	sub    r14,0x10
  407f7f:	mov    rbp,QWORD PTR [r14+0x8]
  407f83:	mov    r12,rbp
  407f86:	add    r12,QWORD PTR [r14]
  407f89:	test   rbp,rbp
  407f8c:	je     407f70 <flatcc_emitter@@Base+0x240>
  407f8e:	mov    rdx,QWORD PTR [rbx+0x18]
  407f92:	cmp    rdx,rbp
  407f95:	jae    407fcf <flatcc_emitter@@Base+0x29f>
  407f97:	test   rdx,rdx
  407f9a:	je     407ff8 <flatcc_emitter@@Base+0x2c8>
  407f9c:	sub    rbp,rdx
  407f9f:	xor    ecx,ecx
  407fa1:	mov    rax,rdx
  407fa4:	mov    QWORD PTR [rbx+0x18],rcx
  407fa8:	neg    rax
  407fab:	mov    rdi,rax
  407fae:	add    rdi,QWORD PTR [rbx+0x10]
  407fb2:	add    r12,rax
  407fb5:	mov    rsi,r12
  407fb8:	mov    QWORD PTR [rbx+0x10],rdi
  407fbc:	call   4030d0 <memcpy@plt>
  407fc1:	test   rbp,rbp
  407fc4:	je     407f70 <flatcc_emitter@@Base+0x240>
  407fc6:	mov    rdx,QWORD PTR [rbx+0x18]
  407fca:	cmp    rdx,rbp
  407fcd:	jb     407f97 <flatcc_emitter@@Base+0x267>
  407fcf:	mov    rcx,rdx
  407fd2:	mov    rdx,rbp
  407fd5:	sub    rcx,rbp
  407fd8:	xor    ebp,ebp
  407fda:	jmp    407fa1 <flatcc_emitter@@Base+0x271>
  407fdc:	mov    rcx,QWORD PTR [rdi+0x10]
  407fe0:	sub    rax,r8
  407fe3:	mov    QWORD PTR [rdi+0x18],rax
  407fe7:	sub    rcx,r8
  407fea:	mov    QWORD PTR [rdi+0x10],rcx
  407fee:	jmp    407df7 <flatcc_emitter@@Base+0xc7>
  407ff3:	nop    DWORD PTR [rax+rax*1+0x0]
  407ff8:	mov    r13,QWORD PTR [rbx]
  407ffb:	test   r13,r13
  407ffe:	je     40809f <flatcc_emitter@@Base+0x36f>
  408004:	mov    r15,QWORD PTR [r13+0xb88]
  40800b:	cmp    r15,QWORD PTR [rbx+0x8]
  40800f:	je     408060 <flatcc_emitter@@Base+0x330>
  408011:	mov    eax,DWORD PTR [r13+0xb90]
  408018:	sub    eax,0xb80
  40801d:	mov    DWORD PTR [r15+0xb90],eax
  408024:	mov    QWORD PTR [rbx],r15
  408027:	lea    rax,[r15+0xb80]
  40802e:	mov    QWORD PTR [rbx+0x18],0xb80
  408036:	mov    QWORD PTR [rbx+0x10],rax
  40803a:	mov    rax,QWORD PTR [r15+0xb80]
  408041:	mov    eax,DWORD PTR [rax+0xb90]
  408047:	sub    eax,0xb80
  40804c:	mov    DWORD PTR [r15+0xb90],eax
  408053:	jmp    407f8e <flatcc_emitter@@Base+0x25e>
  408058:	nop    DWORD PTR [rax+rax*1+0x0]
  408060:	mov    edi,0xb98
  408065:	call   4030e0 <malloc@plt>
  40806a:	test   rax,rax
  40806d:	je     407edf <flatcc_emitter@@Base+0x1af>
  408073:	mov    QWORD PTR [rax+0xb88],r15
  40807a:	add    QWORD PTR [rbx+0x38],0xb80
  408082:	mov    QWORD PTR [rax+0xb80],r13
  408089:	mov    QWORD PTR [r13+0xb88],rax
  408090:	mov    QWORD PTR [r15+0xb80],rax
  408097:	mov    QWORD PTR [rbx],rax
  40809a:	mov    r15,rax
  40809d:	jmp    408027 <flatcc_emitter@@Base+0x2f7>
  40809f:	mov    edi,0xb98
  4080a4:	call   4030e0 <malloc@plt>
  4080a9:	test   rax,rax
  4080ac:	je     407edf <flatcc_emitter@@Base+0x1af>
  4080b2:	lea    rdx,[rax+0x5c0]
  4080b9:	add    QWORD PTR [rbx+0x38],0xb80
  4080c1:	mov    QWORD PTR [rbx],rax
  4080c4:	mov    QWORD PTR [rbx+0x8],rax
  4080c8:	mov    QWORD PTR [rax+0xb80],rax
  4080cf:	mov    QWORD PTR [rax+0xb88],rax
  4080d6:	mov    QWORD PTR [rbx+0x10],rdx
  4080da:	mov    QWORD PTR [rbx+0x20],rdx
  4080de:	mov    QWORD PTR [rbx+0x18],0x5c0
  4080e6:	mov    QWORD PTR [rbx+0x28],0x5c0
  4080ee:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4080f8:	jmp    407f8e <flatcc_emitter@@Base+0x25e>
  4080fd:	nop    DWORD PTR [rax]

0000000000408100 <flatcc_emitter_copy_buffer@@Base>:
  408100:	push   rbp
  408101:	push   rbx
  408102:	sub    rsp,0x8
  408106:	mov    r9,QWORD PTR [rdi+0x30]
  40810a:	cmp    r9,rdx
  40810d:	ja     4081d0 <flatcc_emitter_copy_buffer@@Base+0xd0>
  408113:	mov    rax,QWORD PTR [rdi]
  408116:	test   rax,rax
  408119:	je     4081d0 <flatcc_emitter_copy_buffer@@Base+0xd0>
  40811f:	cmp    rax,QWORD PTR [rdi+0x8]
  408123:	mov    rcx,rsi
  408126:	mov    rbx,rdi
  408129:	je     4081e0 <flatcc_emitter_copy_buffer@@Base+0xe0>
  40812f:	mov    r8d,0xb80
  408135:	sub    r8,QWORD PTR [rdi+0x18]
  408139:	mov    rsi,QWORD PTR [rdi+0x10]
  40813d:	mov    rdi,rcx
  408140:	mov    rbp,r8
  408143:	mov    rdx,r8
  408146:	call   4030d0 <memcpy@plt>
  40814b:	add    rbp,rax
  40814e:	mov    rax,QWORD PTR [rbx]
  408151:	mov    rsi,QWORD PTR [rbx+0x8]
  408155:	mov    rax,QWORD PTR [rax+0xb80]
  40815c:	cmp    rax,rsi
  40815f:	je     4081b4 <flatcc_emitter_copy_buffer@@Base+0xb4>
  408161:	nop    DWORD PTR [rax+0x0]
  408168:	mov    rdx,QWORD PTR [rax]
  40816b:	lea    rdi,[rbp+0x8]
  40816f:	mov    rcx,rbp
  408172:	mov    rsi,rax
  408175:	add    rbp,0xb80
  40817c:	and    rdi,0xfffffffffffffff8
  408180:	mov    QWORD PTR [rbp-0xb80],rdx
  408187:	mov    rdx,QWORD PTR [rax+0xb78]
  40818e:	sub    rcx,rdi
  408191:	sub    rsi,rcx
  408194:	add    ecx,0xb80
  40819a:	shr    ecx,0x3
  40819d:	mov    QWORD PTR [rbp-0x8],rdx
  4081a1:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
  4081a4:	mov    rax,QWORD PTR [rax+0xb80]
  4081ab:	mov    rsi,QWORD PTR [rbx+0x8]
  4081af:	cmp    rsi,rax
  4081b2:	jne    408168 <flatcc_emitter_copy_buffer@@Base+0x68>
  4081b4:	mov    edx,0xb80
  4081b9:	sub    rdx,QWORD PTR [rbx+0x28]
  4081bd:	mov    rdi,rbp
  4081c0:	call   4030d0 <memcpy@plt>
  4081c5:	add    rsp,0x8
  4081c9:	mov    rax,rbp
  4081cc:	pop    rbx
  4081cd:	pop    rbp
  4081ce:	ret    
  4081cf:	nop
  4081d0:	xor    ebp,ebp
  4081d2:	add    rsp,0x8
  4081d6:	mov    rax,rbp
  4081d9:	pop    rbx
  4081da:	pop    rbp
  4081db:	ret    
  4081dc:	nop    DWORD PTR [rax+0x0]
  4081e0:	mov    rsi,QWORD PTR [rdi+0x10]
  4081e4:	mov    rdx,r9
  4081e7:	mov    rdi,rcx
  4081ea:	call   4030d0 <memcpy@plt>
  4081ef:	mov    rbp,rax
  4081f2:	jmp    4081c5 <flatcc_emitter_copy_buffer@@Base+0xc5>
  4081f4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4081fe:	xchg   ax,ax

0000000000408200 <__libc_csu_init@@Base>:
  408200:	endbr64 
  408204:	push   r15
  408206:	lea    r15,[rip+0x4bfb]        # 40ce08 <flatcc_builder_padding_base@@Base+0x2e68>
  40820d:	push   r14
  40820f:	mov    r14,rdx
  408212:	push   r13
  408214:	mov    r13,rsi
  408217:	push   r12
  408219:	mov    r12d,edi
  40821c:	push   rbp
  40821d:	lea    rbp,[rip+0x4bec]        # 40ce10 <flatcc_builder_padding_base@@Base+0x2e70>
  408224:	push   rbx
  408225:	sub    rbp,r15
  408228:	sub    rsp,0x8
  40822c:	call   403000 <free@plt-0x30>
  408231:	sar    rbp,0x3
  408235:	je     408256 <__libc_csu_init@@Base+0x56>
  408237:	xor    ebx,ebx
  408239:	nop    DWORD PTR [rax+0x0]
  408240:	mov    rdx,r14
  408243:	mov    rsi,r13
  408246:	mov    edi,r12d
  408249:	call   QWORD PTR [r15+rbx*8]
  40824d:	add    rbx,0x1
  408251:	cmp    rbp,rbx
  408254:	jne    408240 <__libc_csu_init@@Base+0x40>
  408256:	add    rsp,0x8
  40825a:	pop    rbx
  40825b:	pop    rbp
  40825c:	pop    r12
  40825e:	pop    r13
  408260:	pop    r14
  408262:	pop    r15
  408264:	ret    
  408265:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000408270 <__libc_csu_fini@@Base>:
  408270:	endbr64 
  408274:	ret    

Disassembly of section .fini:

0000000000408278 <.fini>:
  408278:	endbr64 
  40827c:	sub    rsp,0x8
  408280:	add    rsp,0x8
  408284:	ret    
