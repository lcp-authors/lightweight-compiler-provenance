
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0xffe1]        # 412ff0 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0xea>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <.plt>:
  403020:	push   QWORD PTR [rip+0xffe2]        # 413008 <flatcc_builder_padding_base@@Base+0x51c8>
  403026:	bnd jmp QWORD PTR [rip+0xffe3]        # 413010 <flatcc_builder_padding_base@@Base+0x51d0>
  40302d:	nop    DWORD PTR [rax]
  403030:	endbr64 
  403034:	push   0x0
  403039:	bnd jmp 403020 <free@plt-0xe0>
  40303f:	nop
  403040:	endbr64 
  403044:	push   0x1
  403049:	bnd jmp 403020 <free@plt-0xe0>
  40304f:	nop
  403050:	endbr64 
  403054:	push   0x2
  403059:	bnd jmp 403020 <free@plt-0xe0>
  40305f:	nop
  403060:	endbr64 
  403064:	push   0x3
  403069:	bnd jmp 403020 <free@plt-0xe0>
  40306f:	nop
  403070:	endbr64 
  403074:	push   0x4
  403079:	bnd jmp 403020 <free@plt-0xe0>
  40307f:	nop
  403080:	endbr64 
  403084:	push   0x5
  403089:	bnd jmp 403020 <free@plt-0xe0>
  40308f:	nop
  403090:	endbr64 
  403094:	push   0x6
  403099:	bnd jmp 403020 <free@plt-0xe0>
  40309f:	nop
  4030a0:	endbr64 
  4030a4:	push   0x7
  4030a9:	bnd jmp 403020 <free@plt-0xe0>
  4030af:	nop
  4030b0:	endbr64 
  4030b4:	push   0x8
  4030b9:	bnd jmp 403020 <free@plt-0xe0>
  4030bf:	nop
  4030c0:	endbr64 
  4030c4:	push   0x9
  4030c9:	bnd jmp 403020 <free@plt-0xe0>
  4030cf:	nop
  4030d0:	endbr64 
  4030d4:	push   0xa
  4030d9:	bnd jmp 403020 <free@plt-0xe0>
  4030df:	nop
  4030e0:	endbr64 
  4030e4:	push   0xb
  4030e9:	bnd jmp 403020 <free@plt-0xe0>
  4030ef:	nop
  4030f0:	endbr64 
  4030f4:	push   0xc
  4030f9:	bnd jmp 403020 <free@plt-0xe0>
  4030ff:	nop

Disassembly of section .plt.sec:

0000000000403100 <free@plt>:
  403100:	endbr64 
  403104:	bnd jmp QWORD PTR [rip+0xff0d]        # 413018 <free@GLIBC_2.2.5>
  40310b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403110 <strtod@plt>:
  403110:	endbr64 
  403114:	bnd jmp QWORD PTR [rip+0xff05]        # 413020 <strtod@GLIBC_2.2.5>
  40311b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403120 <strlen@plt>:
  403120:	endbr64 
  403124:	bnd jmp QWORD PTR [rip+0xfefd]        # 413028 <strlen@GLIBC_2.2.5>
  40312b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403130 <__stack_chk_fail@plt>:
  403130:	endbr64 
  403134:	bnd jmp QWORD PTR [rip+0xfef5]        # 413030 <__stack_chk_fail@GLIBC_2.4>
  40313b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403140 <__assert_fail@plt>:
  403140:	endbr64 
  403144:	bnd jmp QWORD PTR [rip+0xfeed]        # 413038 <__assert_fail@GLIBC_2.2.5>
  40314b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403150 <memset@plt>:
  403150:	endbr64 
  403154:	bnd jmp QWORD PTR [rip+0xfee5]        # 413040 <memset@GLIBC_2.2.5>
  40315b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403160 <memchr@plt>:
  403160:	endbr64 
  403164:	bnd jmp QWORD PTR [rip+0xfedd]        # 413048 <memchr@GLIBC_2.2.5>
  40316b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403170 <memcmp@plt>:
  403170:	endbr64 
  403174:	bnd jmp QWORD PTR [rip+0xfed5]        # 413050 <memcmp@GLIBC_2.2.5>
  40317b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403180 <memcpy@plt>:
  403180:	endbr64 
  403184:	bnd jmp QWORD PTR [rip+0xfecd]        # 413058 <memcpy@GLIBC_2.14>
  40318b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403190 <malloc@plt>:
  403190:	endbr64 
  403194:	bnd jmp QWORD PTR [rip+0xfec5]        # 413060 <malloc@GLIBC_2.2.5>
  40319b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031a0 <realloc@plt>:
  4031a0:	endbr64 
  4031a4:	bnd jmp QWORD PTR [rip+0xfebd]        # 413068 <realloc@GLIBC_2.2.5>
  4031ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031b0 <__fprintf_chk@plt>:
  4031b0:	endbr64 
  4031b4:	bnd jmp QWORD PTR [rip+0xfeb5]        # 413070 <__fprintf_chk@GLIBC_2.3.4>
  4031bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031c0 <posix_memalign@plt>:
  4031c0:	endbr64 
  4031c4:	bnd jmp QWORD PTR [rip+0xfead]        # 413078 <posix_memalign@GLIBC_2.2.5>
  4031cb:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

00000000004031d0 <main@@Base>:
  4031d0:	endbr64 
  4031d4:	push   rbx
  4031d5:	sub    rsp,0x1a0
  4031dc:	lea    rbx,[rsp+0x10]
  4031e1:	mov    rdi,rbx
  4031e4:	mov    rax,QWORD PTR fs:0x28
  4031ed:	mov    QWORD PTR [rsp+0x198],rax
  4031f5:	xor    eax,eax
  4031f7:	mov    DWORD PTR [rsp+0xc],0xffffffff
  4031ff:	call   405070 <flatcc_builder_init@@Base>
  403204:	mov    rsi,0x40d0c0
  40320b:	lea    rcx,[rsp+0xc]
  403210:	lea    rdx,[rsi+0x285]
  403217:	mov    rdi,rbx
  40321a:	call   403340 <test@@Base>
  40321f:	mov    rdi,rbx
  403222:	call   405230 <flatcc_builder_clear@@Base>
  403227:	mov    rdx,QWORD PTR [rsp+0x198]
  40322f:	xor    rdx,QWORD PTR fs:0x28
  403238:	mov    eax,DWORD PTR [rsp+0xc]
  40323c:	jne    403247 <main@@Base+0x77>
  40323e:	add    rsp,0x1a0
  403245:	pop    rbx
  403246:	ret    
  403247:	call   403130 <__stack_chk_fail@plt>
  40324c:	nop    DWORD PTR [rax+0x0]

0000000000403250 <_start@@Base>:
  403250:	endbr64 
  403254:	xor    ebp,ebp
  403256:	mov    r9,rdx
  403259:	pop    rsi
  40325a:	mov    rdx,rsp
  40325d:	and    rsp,0xfffffffffffffff0
  403261:	push   rax
  403262:	push   rsp
  403263:	mov    r8,0x40cf10
  40326a:	mov    rcx,0x40cea0
  403271:	mov    rdi,0x4031d0
  403278:	call   QWORD PTR [rip+0xfd6a]        # 412fe8 <__libc_start_main@GLIBC_2.2.5>
  40327e:	hlt    
  40327f:	nop
  403280:	endbr64 
  403284:	ret    
  403285:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40328f:	nop
  403290:	mov    eax,0x413110
  403295:	cmp    rax,0x413110
  40329b:	je     4032b0 <_start@@Base+0x60>
  40329d:	mov    eax,0x0
  4032a2:	test   rax,rax
  4032a5:	je     4032b0 <_start@@Base+0x60>
  4032a7:	mov    edi,0x413110
  4032ac:	jmp    rax
  4032ae:	xchg   ax,ax
  4032b0:	ret    
  4032b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4032bc:	nop    DWORD PTR [rax+0x0]
  4032c0:	mov    esi,0x413110
  4032c5:	sub    rsi,0x413110
  4032cc:	sar    rsi,0x3
  4032d0:	mov    rax,rsi
  4032d3:	shr    rax,0x3f
  4032d7:	add    rsi,rax
  4032da:	sar    rsi,1
  4032dd:	je     4032f0 <_start@@Base+0xa0>
  4032df:	mov    eax,0x0
  4032e4:	test   rax,rax
  4032e7:	je     4032f0 <_start@@Base+0xa0>
  4032e9:	mov    edi,0x413110
  4032ee:	jmp    rax
  4032f0:	ret    
  4032f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4032fc:	nop    DWORD PTR [rax+0x0]
  403300:	endbr64 
  403304:	cmp    BYTE PTR [rip+0xfe05],0x0        # 413110 <__bss_start@@Base>
  40330b:	jne    403320 <_start@@Base+0xd0>
  40330d:	push   rbp
  40330e:	mov    rbp,rsp
  403311:	call   403290 <_start@@Base+0x40>
  403316:	mov    BYTE PTR [rip+0xfdf3],0x1        # 413110 <__bss_start@@Base>
  40331d:	pop    rbp
  40331e:	ret    
  40331f:	nop
  403320:	ret    
  403321:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40332c:	nop    DWORD PTR [rax+0x0]
  403330:	endbr64 
  403334:	jmp    4032c0 <_start@@Base+0x70>
  403336:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000403340 <test@@Base>:
  403340:	endbr64 
  403344:	push   r15
  403346:	vpxor  xmm0,xmm0,xmm0
  40334a:	push   r14
  40334c:	push   r13
  40334e:	mov    r13,rdx
  403351:	xor    edx,edx
  403353:	push   r12
  403355:	mov    r12,rsi
  403358:	push   rbp
  403359:	mov    rbp,rdi
  40335c:	push   rbx
  40335d:	sub    rsp,0x98
  403364:	mov    QWORD PTR [rsp+0x8],rcx
  403369:	xor    ecx,ecx
  40336b:	mov    rax,QWORD PTR fs:0x28
  403374:	mov    QWORD PTR [rsp+0x88],rax
  40337c:	xor    eax,eax
  40337e:	vmovaps XMMWORD PTR [rsp+0x30],xmm0
  403384:	mov    QWORD PTR [rsp+0x38],rsi
  403389:	lea    rsi,[rip+0x9c74]        # 40d004 <_IO_stdin_used@@Base+0x4>
  403390:	vmovaps XMMWORD PTR [rsp+0x40],xmm0
  403396:	vmovaps XMMWORD PTR [rsp+0x50],xmm0
  40339c:	vmovaps XMMWORD PTR [rsp+0x60],xmm0
  4033a2:	mov    QWORD PTR [rsp+0x70],0x0
  4033ab:	mov    DWORD PTR [rsp+0x48],0x1
  4033b3:	call   405a20 <flatcc_builder_start_buffer@@Base>
  4033b8:	mov    rax,r13
  4033bb:	sub    rax,r12
  4033be:	cmp    rax,0x1
  4033c2:	jle    4033d1 <test@@Base+0x91>
  4033c4:	cmp    BYTE PTR [r12],0x20
  4033c9:	jg     4033e7 <test@@Base+0xa7>
  4033cb:	je     403600 <test@@Base+0x2c0>
  4033d1:	lea    rbx,[rsp+0x30]
  4033d6:	mov    rsi,r12
  4033d9:	mov    rdx,r13
  4033dc:	mov    rdi,rbx
  4033df:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  4033e4:	mov    r12,rax
  4033e7:	cmp    r13,r12
  4033ea:	je     403a10 <test@@Base+0x6d0>
  4033f0:	jbe    4033fd <test@@Base+0xbd>
  4033f2:	cmp    BYTE PTR [r12],0x7b
  4033f7:	je     4034d0 <test@@Base+0x190>
  4033fd:	mov    r14,QWORD PTR [rip+0xfbf4]        # 412ff8 <stderr@GLIBC_2.2.5>
  403404:	mov    ecx,0x7b
  403409:	mov    rdi,QWORD PTR [r14]
  40340c:	lea    rdx,[rip+0x9c04]        # 40d017 <_IO_stdin_used@@Base+0x17>
  403413:	mov    esi,0x1
  403418:	xor    eax,eax
  40341a:	call   4031b0 <__fprintf_chk@plt>
  40341f:	lea    rdi,[rsp+0x30]
  403424:	mov    ecx,0x11
  403429:	mov    rdx,r13
  40342c:	mov    rsi,r12
  40342f:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  403434:	mov    r15,rax
  403437:	mov    edi,DWORD PTR [rsp+0x50]
  40343b:	test   edi,edi
  40343d:	jne    403490 <test@@Base+0x150>
  40343f:	mov    rdi,QWORD PTR [r14]
  403442:	lea    rdx,[rip+0x9c0a]        # 40d053 <_IO_stdin_used@@Base+0x53>
  403449:	mov    esi,0x1
  40344e:	xor    eax,eax
  403450:	call   4031b0 <__fprintf_chk@plt>
  403455:	mov    eax,DWORD PTR [rsp+0x50]
  403459:	mov    rcx,QWORD PTR [rsp+0x8]
  40345e:	mov    DWORD PTR [rcx],eax
  403460:	mov    rax,r15
  403463:	mov    rsi,QWORD PTR [rsp+0x88]
  40346b:	xor    rsi,QWORD PTR fs:0x28
  403474:	jne    4048c3 <test@@Base+0x1583>
  40347a:	add    rsp,0x98
  403481:	pop    rbx
  403482:	pop    rbp
  403483:	pop    r12
  403485:	pop    r13
  403487:	pop    r14
  403489:	pop    r15
  40348b:	ret    
  40348c:	nop    DWORD PTR [rax+0x0]
  403490:	call   409c70 <flatcc_json_parser_error_string@@Base>
  403495:	mov    rdx,QWORD PTR [rsp+0x68]
  40349a:	mov    rdi,QWORD PTR [r14]
  40349d:	sub    rdx,QWORD PTR [rsp+0x38]
  4034a2:	mov    ecx,DWORD PTR [rsp+0x48]
  4034a6:	mov    r9,rax
  4034a9:	lea    r8d,[rdx+0x1]
  4034ad:	mov    esi,0x1
  4034b2:	lea    rdx,[rip+0x9b8f]        # 40d048 <_IO_stdin_used@@Base+0x48>
  4034b9:	xor    eax,eax
  4034bb:	call   4031b0 <__fprintf_chk@plt>
  4034c0:	mov    rdi,rbp
  4034c3:	call   405220 <flatcc_builder_reset@@Base>
  4034c8:	jmp    403455 <test@@Base+0x115>
  4034ca:	nop    WORD PTR [rax+rax*1+0x0]
  4034d0:	lea    r15,[r12+0x1]
  4034d5:	mov    rax,r13
  4034d8:	sub    rax,r15
  4034db:	cmp    rax,0x1
  4034df:	jle    4034ef <test@@Base+0x1af>
  4034e1:	cmp    BYTE PTR [r12+0x1],0x20
  4034e7:	jg     403505 <test@@Base+0x1c5>
  4034e9:	je     4041d0 <test@@Base+0xe90>
  4034ef:	lea    rbx,[rsp+0x30]
  4034f4:	mov    rsi,r15
  4034f7:	mov    rdx,r13
  4034fa:	mov    rdi,rbx
  4034fd:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  403502:	mov    r15,rax
  403505:	cmp    r13,r15
  403508:	je     403e90 <test@@Base+0xb50>
  40350e:	mov    esi,0xb
  403513:	mov    rdi,rbp
  403516:	call   4066c0 <flatcc_builder_start_table@@Base>
  40351b:	movabs r14,0x7365636f6e63ffff
  403525:	movzx  eax,BYTE PTR [r15]
  403529:	cmp    al,0x22
  40352b:	je     403828 <test@@Base+0x4e8>
  403531:	cmp    al,0x2e
  403533:	je     404108 <test@@Base+0xdc8>
  403539:	mov    DWORD PTR [rsp+0x44],0x1
  403541:	mov    rdx,r13
  403544:	sub    rdx,r15
  403547:	cmp    rdx,0x7
  40354b:	jbe    403810 <test@@Base+0x4d0>
  403551:	movbe  rax,QWORD PTR [r15]
  403556:	cmp    rdx,0x8
  40355a:	jle    403674 <test@@Base+0x334>
  403560:	mov    rdx,rax
  403563:	xor    dx,dx
  403566:	lea    rsi,[r15+0x8]
  40356a:	cmp    rdx,r14
  40356d:	ja     403686 <test@@Base+0x346>
  403573:	and    rax,0xffffffffff000000
  403579:	movabs rdx,0x6669727374000000
  403583:	cmp    rax,rdx
  403586:	jne    404682 <test@@Base+0x1342>
  40358c:	mov    r10d,DWORD PTR [rsp+0x44]
  403591:	lea    rbx,[r15+0x5]
  403595:	test   r10d,r10d
  403598:	jne    4038c0 <test@@Base+0x580>
  40359e:	cmp    rbx,r13
  4035a1:	je     403a35 <test@@Base+0x6f5>
  4035a7:	movzx  edx,BYTE PTR [r15+0x5]
  4035ac:	cmp    dl,0x22
  4035af:	jne    4035da <test@@Base+0x29a>
  4035b1:	jmp    403d78 <test@@Base+0xa38>
  4035b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4035c0:	lea    rbx,[rax+0x1]
  4035c4:	cmp    r13,rbx
  4035c7:	je     403a40 <test@@Base+0x700>
  4035cd:	movzx  edx,BYTE PTR [rax+0x1]
  4035d1:	cmp    dl,0x22
  4035d4:	je     403d78 <test@@Base+0xa38>
  4035da:	mov    rax,rbx
  4035dd:	cmp    dl,0x5c
  4035e0:	jne    4035c0 <test@@Base+0x280>
  4035e2:	mov    rdx,r13
  4035e5:	sub    rdx,rbx
  4035e8:	cmp    rdx,0x1
  4035ec:	jle    403d60 <test@@Base+0xa20>
  4035f2:	inc    rax
  4035f5:	jmp    4035c0 <test@@Base+0x280>
  4035f7:	nop    WORD PTR [rax+rax*1+0x0]
  403600:	cmp    BYTE PTR [r12+0x1],0x20
  403606:	jle    4033d1 <test@@Base+0x91>
  40360c:	inc    r12
  40360f:	jmp    4033e7 <test@@Base+0xa7>
  403614:	nop    DWORD PTR [rax+0x0]
  403618:	movsx  rdx,BYTE PTR [r15+0x6]
  40361d:	shl    rdx,0x8
  403621:	movsx  rcx,BYTE PTR [r15+0x5]
  403626:	mov    rax,rcx
  403629:	shl    rax,0x10
  40362d:	or     rdx,rax
  403630:	movsx  rcx,BYTE PTR [r15+0x4]
  403635:	mov    rax,rcx
  403638:	shl    rax,0x18
  40363c:	or     rax,rdx
  40363f:	movsx  rcx,BYTE PTR [r15+0x3]
  403644:	shl    rcx,0x20
  403648:	or     rax,rcx
  40364b:	movsx  rcx,BYTE PTR [r15+0x2]
  403650:	shl    rcx,0x28
  403654:	mov    rdx,rcx
  403657:	or     rdx,rax
  40365a:	movsx  rcx,BYTE PTR [r15+0x1]
  40365f:	mov    rax,rcx
  403662:	shl    rax,0x30
  403666:	or     rdx,rax
  403669:	movsx  rax,BYTE PTR [r15]
  40366d:	shl    rax,0x38
  403671:	or     rax,rdx
  403674:	mov    rdx,rax
  403677:	xor    dx,dx
  40367a:	mov    rsi,r13
  40367d:	cmp    rdx,r14
  403680:	jbe    403573 <test@@Base+0x233>
  403686:	movabs r8,0xffffffff00000000
  403690:	mov    rcx,rax
  403693:	and    rcx,r8
  403696:	movabs rdi,0x7a756c74ffffffff
  4036a0:	cmp    rcx,rdi
  4036a3:	ja     403840 <test@@Base+0x500>
  4036a9:	movabs rcx,0x7365636f6e64731f
  4036b3:	cmp    rax,rcx
  4036b6:	ja     403a60 <test@@Base+0x720>
  4036bc:	movabs rax,0x7365636f6e640000
  4036c6:	cmp    rdx,rax
  4036c9:	jne    404682 <test@@Base+0x1342>
  4036cf:	mov    r8d,DWORD PTR [rsp+0x44]
  4036d4:	lea    rbx,[r15+0x6]
  4036d8:	test   r8d,r8d
  4036db:	je     403f10 <test@@Base+0xbd0>
  4036e1:	cmp    rbx,r13
  4036e4:	je     40488f <test@@Base+0x154f>
  4036ea:	movzx  eax,BYTE PTR [r15+0x6]
  4036ef:	cmp    al,0x20
  4036f1:	jle    40374e <test@@Base+0x40e>
  4036f3:	mov    rcx,rbx
  4036f6:	lea    edx,[rax-0x2e]
  4036f9:	mov    rbx,rcx
  4036fc:	cmp    dl,0x31
  4036ff:	ja     40373d <test@@Base+0x3fd>
  403701:	movabs rdi,0x2000000000ffd
  40370b:	bt     rdi,rdx
  40370f:	jae    40373d <test@@Base+0x3fd>
  403711:	lea    rsi,[rcx+0x1]
  403715:	mov    rbx,rsi
  403718:	cmp    r13,rsi
  40371b:	je     40480f <test@@Base+0x14cf>
  403721:	movzx  edx,BYTE PTR [rsi]
  403724:	mov    rcx,rsi
  403727:	cmp    dl,0x20
  40372a:	jle    40480f <test@@Base+0x14cf>
  403730:	mov    eax,edx
  403732:	lea    edx,[rax-0x2e]
  403735:	mov    rbx,rcx
  403738:	cmp    dl,0x31
  40373b:	jbe    403701 <test@@Base+0x3c1>
  40373d:	mov    edx,eax
  40373f:	or     edx,0x20
  403742:	sub    edx,0x61
  403745:	cmp    dl,0x19
  403748:	jbe    404608 <test@@Base+0x12c8>
  40374e:	mov    rax,r13
  403751:	sub    rax,rbx
  403754:	cmp    rax,0x1
  403758:	jle    403765 <test@@Base+0x425>
  40375a:	cmp    BYTE PTR [rbx],0x20
  40375d:	jg     403778 <test@@Base+0x438>
  40375f:	je     404670 <test@@Base+0x1330>
  403765:	mov    rsi,rbx
  403768:	lea    rdi,[rsp+0x30]
  40376d:	mov    rdx,r13
  403770:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  403775:	mov    rbx,rax
  403778:	cmp    r13,rbx
  40377b:	je     403a10 <test@@Base+0x6d0>
  403781:	jbe    4045a0 <test@@Base+0x1260>
  403787:	cmp    BYTE PTR [rbx],0x3a
  40378a:	jne    4045a0 <test@@Base+0x1260>
  403790:	lea    r15,[rbx+0x1]
  403794:	mov    rax,r13
  403797:	sub    rax,r15
  40379a:	cmp    rax,0x1
  40379e:	jle    4037ac <test@@Base+0x46c>
  4037a0:	cmp    BYTE PTR [rbx+0x1],0x20
  4037a4:	jg     4037bf <test@@Base+0x47f>
  4037a6:	je     4046b0 <test@@Base+0x1370>
  4037ac:	mov    rsi,r15
  4037af:	lea    rdi,[rsp+0x30]
  4037b4:	mov    rdx,r13
  4037b7:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  4037bc:	mov    r15,rax
  4037bf:	cmp    r13,r15
  4037c2:	je     403e90 <test@@Base+0xb50>
  4037c8:	mov    ecx,0x8
  4037cd:	mov    edx,0x8
  4037d2:	mov    esi,0x1
  4037d7:	mov    rdi,rbp
  4037da:	call   407f40 <flatcc_builder_table_add@@Base>
  4037df:	test   rax,rax
  4037e2:	je     403a00 <test@@Base+0x6c0>
  4037e8:	lea    rbx,[rsp+0x30]
  4037ed:	mov    rcx,rax
  4037f0:	mov    rdx,r13
  4037f3:	mov    rsi,r15
  4037f6:	mov    rdi,rbx
  4037f9:	call   40ac30 <flatcc_json_parser_double@@Base>
  4037fe:	mov    r8,rax
  403801:	cmp    rax,r15
  403804:	jne    403c2f <test@@Base+0x8ef>
  40380a:	jmp    403a00 <test@@Base+0x6c0>
  40380f:	nop
  403810:	lea    rsi,[rip+0x9869]        # 40d080 <_IO_stdin_used@@Base+0x80>
  403817:	movsxd rax,DWORD PTR [rsi+rdx*4]
  40381b:	add    rax,rsi
  40381e:	notrack jmp rax
  403821:	nop    DWORD PTR [rax+0x0]
  403828:	inc    r15
  40382b:	mov    DWORD PTR [rsp+0x44],0x0
  403833:	jmp    403541 <test@@Base+0x201>
  403838:	nop    DWORD PTR [rax+rax*1+0x0]
  403840:	movabs rax,0x7a756c7500000000
  40384a:	cmp    rcx,rax
  40384d:	jne    404682 <test@@Base+0x1342>
  403853:	mov    eax,DWORD PTR [rsp+0x44]
  403857:	lea    r12,[r15+0x4]
  40385b:	test   eax,eax
  40385d:	jne    403a98 <test@@Base+0x758>
  403863:	cmp    r12,r13
  403866:	je     403ee3 <test@@Base+0xba3>
  40386c:	movzx  edx,BYTE PTR [r15+0x4]
  403871:	cmp    dl,0x22
  403874:	jne    40389a <test@@Base+0x55a>
  403876:	jmp    4041c8 <test@@Base+0xe88>
  40387b:	nop    DWORD PTR [rax+rax*1+0x0]
  403880:	lea    r12,[rax+0x1]
  403884:	cmp    r13,r12
  403887:	je     403ef0 <test@@Base+0xbb0>
  40388d:	movzx  edx,BYTE PTR [rax+0x1]
  403891:	cmp    dl,0x22
  403894:	je     4041c8 <test@@Base+0xe88>
  40389a:	mov    rax,r12
  40389d:	cmp    dl,0x5c
  4038a0:	jne    403880 <test@@Base+0x540>
  4038a2:	mov    rdx,r13
  4038a5:	sub    rdx,r12
  4038a8:	cmp    rdx,0x1
  4038ac:	jle    4041b0 <test@@Base+0xe70>
  4038b2:	inc    rax
  4038b5:	jmp    403880 <test@@Base+0x540>
  4038b7:	nop    WORD PTR [rax+rax*1+0x0]
  4038c0:	cmp    rbx,r13
  4038c3:	je     404807 <test@@Base+0x14c7>
  4038c9:	movzx  eax,BYTE PTR [r15+0x5]
  4038ce:	cmp    al,0x20
  4038d0:	jle    40392d <test@@Base+0x5ed>
  4038d2:	mov    rcx,rbx
  4038d5:	lea    edx,[rax-0x2e]
  4038d8:	mov    rbx,rcx
  4038db:	cmp    dl,0x31
  4038de:	ja     40391c <test@@Base+0x5dc>
  4038e0:	movabs rsi,0x2000000000ffd
  4038ea:	bt     rsi,rdx
  4038ee:	jae    40391c <test@@Base+0x5dc>
  4038f0:	lea    rsi,[rcx+0x1]
  4038f4:	mov    rbx,rsi
  4038f7:	cmp    r13,rsi
  4038fa:	je     404268 <test@@Base+0xf28>
  403900:	movzx  edx,BYTE PTR [rsi]
  403903:	mov    rcx,rsi
  403906:	cmp    dl,0x20
  403909:	jle    404268 <test@@Base+0xf28>
  40390f:	mov    eax,edx
  403911:	lea    edx,[rax-0x2e]
  403914:	mov    rbx,rcx
  403917:	cmp    dl,0x31
  40391a:	jbe    4038e0 <test@@Base+0x5a0>
  40391c:	mov    edx,eax
  40391e:	or     edx,0x20
  403921:	sub    edx,0x61
  403924:	cmp    dl,0x19
  403927:	jbe    403dc0 <test@@Base+0xa80>
  40392d:	mov    rax,r13
  403930:	sub    rax,rbx
  403933:	cmp    rax,0x1
  403937:	jle    403944 <test@@Base+0x604>
  403939:	cmp    BYTE PTR [rbx],0x20
  40393c:	jg     403957 <test@@Base+0x617>
  40393e:	je     403eb8 <test@@Base+0xb78>
  403944:	mov    rsi,rbx
  403947:	lea    rdi,[rsp+0x30]
  40394c:	mov    rdx,r13
  40394f:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  403954:	mov    rbx,rax
  403957:	cmp    r13,rbx
  40395a:	je     403a10 <test@@Base+0x6d0>
  403960:	jbe    4045a0 <test@@Base+0x1260>
  403966:	cmp    BYTE PTR [rbx],0x3a
  403969:	jne    4045a0 <test@@Base+0x1260>
  40396f:	lea    r15,[rbx+0x1]
  403973:	mov    rax,r13
  403976:	sub    rax,r15
  403979:	cmp    rax,0x1
  40397d:	jle    40398b <test@@Base+0x64b>
  40397f:	cmp    BYTE PTR [rbx+0x1],0x20
  403983:	jg     40399e <test@@Base+0x65e>
  403985:	je     403ed0 <test@@Base+0xb90>
  40398b:	mov    rsi,r15
  40398e:	lea    rdi,[rsp+0x30]
  403993:	mov    rdx,r13
  403996:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40399b:	mov    r15,rax
  40399e:	cmp    r13,r15
  4039a1:	je     403e90 <test@@Base+0xb50>
  4039a7:	mov    ecx,0x1
  4039ac:	mov    edx,0x1
  4039b1:	xor    esi,esi
  4039b3:	mov    rdi,rbp
  4039b6:	call   407f40 <flatcc_builder_table_add@@Base>
  4039bb:	mov    r12,rax
  4039be:	test   rax,rax
  4039c1:	je     403a00 <test@@Base+0x6c0>
  4039c3:	mov    QWORD PTR [rsp+0x28],0x0
  4039cc:	mov    DWORD PTR [rsp+0x24],0x0
  4039d4:	mov    BYTE PTR [rax],0x0
  4039d7:	lea    rbx,[rsp+0x30]
  4039dc:	lea    r8,[rsp+0x28]
  4039e1:	lea    rcx,[rsp+0x24]
  4039e6:	mov    rdx,r13
  4039e9:	mov    rsi,r15
  4039ec:	mov    rdi,rbx
  4039ef:	call   40bae0 <flatcc_json_parser_integer@@Base>
  4039f4:	mov    r8,rax
  4039f7:	cmp    r15,rax
  4039fa:	jne    403d80 <test@@Base+0xa40>
  403a00:	mov    r14,QWORD PTR [rip+0xf5f1]        # 412ff8 <stderr@GLIBC_2.2.5>
  403a07:	jmp    403437 <test@@Base+0xf7>
  403a0c:	nop    DWORD PTR [rax+0x0]
  403a10:	mov    r14,QWORD PTR [rip+0xf5e1]        # 412ff8 <stderr@GLIBC_2.2.5>
  403a17:	lea    rdx,[rip+0x95eb]        # 40d009 <_IO_stdin_used@@Base+0x9>
  403a1e:	mov    rdi,QWORD PTR [r14]
  403a21:	mov    esi,0x1
  403a26:	xor    eax,eax
  403a28:	call   4031b0 <__fprintf_chk@plt>
  403a2d:	mov    r15,r13
  403a30:	jmp    403437 <test@@Base+0xf7>
  403a35:	mov    rbx,r13
  403a38:	nop    DWORD PTR [rax+rax*1+0x0]
  403a40:	mov    rsi,rbx
  403a43:	lea    rdi,[rsp+0x30]
  403a48:	mov    ecx,0x14
  403a4d:	mov    rdx,r13
  403a50:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  403a55:	mov    rbx,rax
  403a58:	jmp    40392d <test@@Base+0x5ed>
  403a5d:	nop    DWORD PTR [rax]
  403a60:	movabs rdx,0x7365636f6e647320
  403a6a:	cmp    rax,rdx
  403a6d:	jne    404682 <test@@Base+0x1342>
  403a73:	mov    rax,r13
  403a76:	sub    rax,rsi
  403a79:	cmp    rax,0x7
  403a7d:	ja     404200 <test@@Base+0xec0>
  403a83:	lea    rdx,[rip+0x9616]        # 40d0a0 <_IO_stdin_used@@Base+0xa0>
  403a8a:	movsxd rax,DWORD PTR [rdx+rax*4]
  403a8e:	add    rax,rdx
  403a91:	notrack jmp rax
  403a94:	nop    DWORD PTR [rax+0x0]
  403a98:	cmp    r12,r13
  403a9b:	je     404843 <test@@Base+0x1503>
  403aa1:	movzx  eax,BYTE PTR [r15+0x4]
  403aa6:	cmp    al,0x20
  403aa8:	jle    403b05 <test@@Base+0x7c5>
  403aaa:	mov    rcx,r12
  403aad:	lea    edx,[rax-0x2e]
  403ab0:	mov    r12,rcx
  403ab3:	cmp    dl,0x31
  403ab6:	ja     403af4 <test@@Base+0x7b4>
  403ab8:	movabs rdi,0x2000000000ffd
  403ac2:	bt     rdi,rdx
  403ac6:	jae    403af4 <test@@Base+0x7b4>
  403ac8:	lea    rsi,[rcx+0x1]
  403acc:	mov    r12,rsi
  403acf:	cmp    r13,rsi
  403ad2:	je     404710 <test@@Base+0x13d0>
  403ad8:	movzx  edx,BYTE PTR [rsi]
  403adb:	mov    rcx,rsi
  403ade:	cmp    dl,0x20
  403ae1:	jle    404710 <test@@Base+0x13d0>
  403ae7:	mov    eax,edx
  403ae9:	lea    edx,[rax-0x2e]
  403aec:	mov    r12,rcx
  403aef:	cmp    dl,0x31
  403af2:	jbe    403ab8 <test@@Base+0x778>
  403af4:	mov    edx,eax
  403af6:	or     edx,0x20
  403af9:	sub    edx,0x61
  403afc:	cmp    dl,0x19
  403aff:	jbe    4041f0 <test@@Base+0xeb0>
  403b05:	mov    rax,r13
  403b08:	sub    rax,r12
  403b0b:	cmp    rax,0x1
  403b0f:	jle    403b1e <test@@Base+0x7de>
  403b11:	cmp    BYTE PTR [r12],0x20
  403b16:	jg     403b34 <test@@Base+0x7f4>
  403b18:	je     404210 <test@@Base+0xed0>
  403b1e:	lea    rbx,[rsp+0x30]
  403b23:	mov    rsi,r12
  403b26:	mov    rdx,r13
  403b29:	mov    rdi,rbx
  403b2c:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  403b31:	mov    r12,rax
  403b34:	cmp    r13,r12
  403b37:	je     403a10 <test@@Base+0x6d0>
  403b3d:	jbe    4047f6 <test@@Base+0x14b6>
  403b43:	cmp    BYTE PTR [r12],0x3a
  403b48:	jne    4047f6 <test@@Base+0x14b6>
  403b4e:	lea    r15,[r12+0x1]
  403b53:	mov    rax,r13
  403b56:	sub    rax,r15
  403b59:	cmp    rax,0x1
  403b5d:	jle    403b6d <test@@Base+0x82d>
  403b5f:	cmp    BYTE PTR [r12+0x1],0x20
  403b65:	jg     403b83 <test@@Base+0x843>
  403b67:	je     404228 <test@@Base+0xee8>
  403b6d:	lea    rbx,[rsp+0x30]
  403b72:	mov    rsi,r15
  403b75:	mov    rdx,r13
  403b78:	mov    rdi,rbx
  403b7b:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  403b80:	mov    r15,rax
  403b83:	cmp    r13,r15
  403b86:	je     403e90 <test@@Base+0xb50>
  403b8c:	cmp    BYTE PTR [r15],0x22
  403b90:	je     403db0 <test@@Base+0xa70>
  403b96:	lea    rbx,[rsp+0x30]
  403b9b:	mov    ecx,0x10
  403ba0:	mov    rdx,r13
  403ba3:	mov    rsi,r15
  403ba6:	mov    rdi,rbx
  403ba9:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  403bae:	mov    r12,rax
  403bb1:	mov    rdx,r13
  403bb4:	mov    rsi,r12
  403bb7:	mov    rdi,rbx
  403bba:	call   409f00 <flatcc_json_parser_string_part@@Base>
  403bbf:	mov    r15,rax
  403bc2:	cmp    r13,rax
  403bc5:	je     403a00 <test@@Base+0x6c0>
  403bcb:	mov    rdx,rax
  403bce:	sub    rdx,r12
  403bd1:	cmp    BYTE PTR [rax],0x22
  403bd4:	jne    403dd0 <test@@Base+0xa90>
  403bda:	mov    rsi,r12
  403bdd:	mov    rdi,rbp
  403be0:	call   407c90 <flatcc_builder_create_string@@Base>
  403be5:	mov    r12d,eax
  403be8:	test   r12d,r12d
  403beb:	je     403a00 <test@@Base+0x6c0>
  403bf1:	mov    esi,0xa
  403bf6:	mov    rdi,rbp
  403bf9:	call   408110 <flatcc_builder_table_add_offset@@Base>
  403bfe:	test   rax,rax
  403c01:	je     403a00 <test@@Base+0x6c0>
  403c07:	mov    DWORD PTR [rax],r12d
  403c0a:	cmp    r15,r13
  403c0d:	je     403c19 <test@@Base+0x8d9>
  403c0f:	cmp    BYTE PTR [r15],0x22
  403c13:	lea    r8,[r15+0x1]
  403c17:	je     403c2f <test@@Base+0x8ef>
  403c19:	mov    ecx,0x14
  403c1e:	mov    rdx,r13
  403c21:	mov    rsi,r15
  403c24:	mov    rdi,rbx
  403c27:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  403c2c:	mov    r8,rax
  403c2f:	mov    rax,r13
  403c32:	sub    rax,r8
  403c35:	cmp    rax,0x1
  403c39:	jle    403c47 <test@@Base+0x907>
  403c3b:	cmp    BYTE PTR [r8],0x20
  403c3f:	jg     403c58 <test@@Base+0x918>
  403c41:	je     403d30 <test@@Base+0x9f0>
  403c47:	mov    rsi,r8
  403c4a:	mov    rdx,r13
  403c4d:	mov    rdi,rbx
  403c50:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  403c55:	mov    r8,rax
  403c58:	cmp    r13,r8
  403c5b:	je     403a10 <test@@Base+0x6d0>
  403c61:	movzx  eax,BYTE PTR [r8]
  403c65:	cmp    al,0x2c
  403c67:	jne    404738 <test@@Base+0x13f8>
  403c6d:	lea    r15,[r8+0x1]
  403c71:	mov    rax,r13
  403c74:	sub    rax,r15
  403c77:	cmp    rax,0x1
  403c7b:	jle    403c8a <test@@Base+0x94a>
  403c7d:	cmp    BYTE PTR [r8+0x1],0x20
  403c82:	jg     403c9b <test@@Base+0x95b>
  403c84:	je     403d48 <test@@Base+0xa08>
  403c8a:	mov    rsi,r15
  403c8d:	mov    rdx,r13
  403c90:	mov    rdi,rbx
  403c93:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  403c98:	mov    r15,rax
  403c9b:	cmp    r13,r15
  403c9e:	je     403e90 <test@@Base+0xb50>
  403ca4:	cmp    BYTE PTR [r15],0x7d
  403ca8:	jne    403525 <test@@Base+0x1e5>
  403cae:	mov    r8,r15
  403cb1:	cmp    r13,r15
  403cb4:	jbe    404618 <test@@Base+0x12d8>
  403cba:	mov    rdi,rbp
  403cbd:	call   407040 <flatcc_builder_end_table@@Base>
  403cc2:	mov    esi,eax
  403cc4:	mov    rdi,rbp
  403cc7:	lea    r12,[r15+0x1]
  403ccb:	call   405b00 <flatcc_builder_end_buffer@@Base>
  403cd0:	mov    rax,r13
  403cd3:	sub    rax,r12
  403cd6:	cmp    rax,0x1
  403cda:	jle    403ced <test@@Base+0x9ad>
  403cdc:	cmp    BYTE PTR [r15+0x1],0x20
  403ce1:	jg     404897 <test@@Base+0x1557>
  403ce7:	je     40489f <test@@Base+0x155f>
  403ced:	mov    rdx,r13
  403cf0:	mov    rsi,r12
  403cf3:	mov    rdi,rbx
  403cf6:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  403cfb:	mov    r15,rax
  403cfe:	mov    r14,QWORD PTR [rip+0xf2f3]        # 412ff8 <stderr@GLIBC_2.2.5>
  403d05:	cmp    r13,r15
  403d08:	je     403437 <test@@Base+0xf7>
  403d0e:	mov    rdi,QWORD PTR [r14]
  403d11:	lea    rdx,[rip+0x9315]        # 40d02d <_IO_stdin_used@@Base+0x2d>
  403d18:	mov    esi,0x1
  403d1d:	xor    eax,eax
  403d1f:	call   4031b0 <__fprintf_chk@plt>
  403d24:	jmp    403437 <test@@Base+0xf7>
  403d29:	nop    DWORD PTR [rax+0x0]
  403d30:	cmp    BYTE PTR [r8+0x1],0x20
  403d35:	jle    403c47 <test@@Base+0x907>
  403d3b:	inc    r8
  403d3e:	jmp    403c58 <test@@Base+0x918>
  403d43:	nop    DWORD PTR [rax+rax*1+0x0]
  403d48:	cmp    BYTE PTR [r8+0x2],0x20
  403d4d:	jle    403c8a <test@@Base+0x94a>
  403d53:	lea    r15,[r8+0x2]
  403d57:	jmp    403c9b <test@@Base+0x95b>
  403d5c:	nop    DWORD PTR [rax+0x0]
  403d60:	cmp    r13,rbx
  403d63:	je     403a40 <test@@Base+0x700>
  403d69:	cmp    BYTE PTR [rbx],0x22
  403d6c:	jne    403a40 <test@@Base+0x700>
  403d72:	nop    WORD PTR [rax+rax*1+0x0]
  403d78:	inc    rbx
  403d7b:	jmp    40392d <test@@Base+0x5ed>
  403d80:	mov    r9d,DWORD PTR [rsp+0x24]
  403d85:	test   r9d,r9d
  403d88:	jne    4045e0 <test@@Base+0x12a0>
  403d8e:	mov    rax,QWORD PTR [rsp+0x28]
  403d93:	cmp    rax,0xff
  403d99:	ja     404660 <test@@Base+0x1320>
  403d9f:	mov    BYTE PTR [r12],al
  403da3:	jmp    403c2f <test@@Base+0x8ef>
  403da8:	nop    DWORD PTR [rax+rax*1+0x0]
  403db0:	lea    r12,[r15+0x1]
  403db4:	lea    rbx,[rsp+0x30]
  403db9:	jmp    403bb1 <test@@Base+0x871>
  403dbe:	xchg   ax,ax
  403dc0:	lea    rsi,[rcx+0x1]
  403dc4:	mov    rbx,rsi
  403dc7:	jmp    4038f7 <test@@Base+0x5b7>
  403dcc:	nop    DWORD PTR [rax+0x0]
  403dd0:	mov    rdi,rbp
  403dd3:	mov    QWORD PTR [rsp+0x10],rdx
  403dd8:	call   406580 <flatcc_builder_start_string@@Base>
  403ddd:	mov    rdx,QWORD PTR [rsp+0x10]
  403de2:	mov    rdi,rbp
  403de5:	mov    rsi,rdx
  403de8:	call   406170 <flatcc_builder_extend_string@@Base>
  403ded:	test   rax,rax
  403df0:	mov    rdx,QWORD PTR [rsp+0x10]
  403df5:	je     403a00 <test@@Base+0x6c0>
  403dfb:	mov    rsi,r12
  403dfe:	mov    rdi,rax
  403e01:	call   403180 <memcpy@plt>
  403e06:	lea    rax,[rsp+0x84]
  403e0e:	mov    QWORD PTR [rsp+0x18],rax
  403e13:	lea    rax,[rsp+0x85]
  403e1b:	mov    QWORD PTR [rsp+0x10],rax
  403e20:	mov    rcx,QWORD PTR [rsp+0x18]
  403e25:	mov    rsi,r15
  403e28:	mov    rdx,r13
  403e2b:	mov    rdi,rbx
  403e2e:	call   40a6b0 <flatcc_json_parser_string_escape@@Base>
  403e33:	movsx  rdx,BYTE PTR [rsp+0x84]
  403e3c:	mov    rsi,QWORD PTR [rsp+0x10]
  403e41:	mov    r12,rax
  403e44:	mov    rdi,rbp
  403e47:	call   4061f0 <flatcc_builder_append_string@@Base>
  403e4c:	mov    rdx,r13
  403e4f:	mov    rsi,r12
  403e52:	mov    rdi,rbx
  403e55:	call   409f00 <flatcc_json_parser_string_part@@Base>
  403e5a:	mov    r15,rax
  403e5d:	cmp    r13,rax
  403e60:	je     403a00 <test@@Base+0x6c0>
  403e66:	mov    rdx,rax
  403e69:	sub    rdx,r12
  403e6c:	mov    rsi,r12
  403e6f:	mov    rdi,rbp
  403e72:	call   4061f0 <flatcc_builder_append_string@@Base>
  403e77:	cmp    BYTE PTR [r15],0x22
  403e7b:	jne    403e20 <test@@Base+0xae0>
  403e7d:	mov    rdi,rbp
  403e80:	call   407e20 <flatcc_builder_end_string@@Base>
  403e85:	mov    r12d,eax
  403e88:	jmp    403be8 <test@@Base+0x8a8>
  403e8d:	nop    DWORD PTR [rax]
  403e90:	mov    r14,QWORD PTR [rip+0xf161]        # 412ff8 <stderr@GLIBC_2.2.5>
  403e97:	lea    rdx,[rip+0x916b]        # 40d009 <_IO_stdin_used@@Base+0x9>
  403e9e:	mov    rdi,QWORD PTR [r14]
  403ea1:	mov    esi,0x1
  403ea6:	xor    eax,eax
  403ea8:	call   4031b0 <__fprintf_chk@plt>
  403ead:	jmp    403437 <test@@Base+0xf7>
  403eb2:	nop    WORD PTR [rax+rax*1+0x0]
  403eb8:	cmp    BYTE PTR [rbx+0x1],0x20
  403ebc:	jle    403944 <test@@Base+0x604>
  403ec2:	inc    rbx
  403ec5:	jmp    403957 <test@@Base+0x617>
  403eca:	nop    WORD PTR [rax+rax*1+0x0]
  403ed0:	cmp    BYTE PTR [rbx+0x2],0x20
  403ed4:	jle    40398b <test@@Base+0x64b>
  403eda:	lea    r15,[rbx+0x2]
  403ede:	jmp    40399e <test@@Base+0x65e>
  403ee3:	mov    r12,r13
  403ee6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403ef0:	lea    rbx,[rsp+0x30]
  403ef5:	mov    rsi,r12
  403ef8:	mov    ecx,0x14
  403efd:	mov    rdx,r13
  403f00:	mov    rdi,rbx
  403f03:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  403f08:	mov    r12,rax
  403f0b:	jmp    403b05 <test@@Base+0x7c5>
  403f10:	cmp    rbx,r13
  403f13:	je     40423e <test@@Base+0xefe>
  403f19:	movzx  edx,BYTE PTR [r15+0x6]
  403f1e:	cmp    dl,0x22
  403f21:	jne    403f4a <test@@Base+0xc0a>
  403f23:	jmp    404590 <test@@Base+0x1250>
  403f28:	nop    DWORD PTR [rax+rax*1+0x0]
  403f30:	lea    rbx,[rax+0x1]
  403f34:	cmp    r13,rbx
  403f37:	je     404248 <test@@Base+0xf08>
  403f3d:	movzx  edx,BYTE PTR [rax+0x1]
  403f41:	cmp    dl,0x22
  403f44:	je     404590 <test@@Base+0x1250>
  403f4a:	mov    rax,rbx
  403f4d:	cmp    dl,0x5c
  403f50:	jne    403f30 <test@@Base+0xbf0>
  403f52:	mov    rdx,r13
  403f55:	sub    rdx,rbx
  403f58:	cmp    rdx,0x1
  403f5c:	jle    40457e <test@@Base+0x123e>
  403f62:	inc    rax
  403f65:	jmp    403f30 <test@@Base+0xbf0>
  403f67:	nop    WORD PTR [rax+rax*1+0x0]
  403f70:	xor    edx,edx
  403f72:	jmp    403621 <test@@Base+0x2e1>
  403f77:	nop    WORD PTR [rax+rax*1+0x0]
  403f80:	xor    edx,edx
  403f82:	jmp    403630 <test@@Base+0x2f0>
  403f87:	nop    WORD PTR [rax+rax*1+0x0]
  403f90:	xor    eax,eax
  403f92:	jmp    40363f <test@@Base+0x2ff>
  403f97:	nop    WORD PTR [rax+rax*1+0x0]
  403fa0:	xor    eax,eax
  403fa2:	jmp    40364b <test@@Base+0x30b>
  403fa7:	nop    WORD PTR [rax+rax*1+0x0]
  403fb0:	xor    edx,edx
  403fb2:	jmp    40365a <test@@Base+0x31a>
  403fb7:	nop    WORD PTR [rax+rax*1+0x0]
  403fc0:	xor    edx,edx
  403fc2:	jmp    403669 <test@@Base+0x329>
  403fc7:	movsx  rdx,BYTE PTR [rsi+0x6]
  403fcc:	shl    rdx,0x8
  403fd0:	movsx  rax,BYTE PTR [rsi+0x5]
  403fd5:	shl    rax,0x10
  403fd9:	or     rdx,rax
  403fdc:	movsx  rax,BYTE PTR [rsi+0x4]
  403fe1:	shl    rax,0x18
  403fe5:	mov    r8,rax
  403fe8:	or     r8,rdx
  403feb:	movsx  rax,BYTE PTR [rsi+0x3]
  403ff0:	shl    rax,0x20
  403ff4:	or     r8,rax
  403ff7:	movsx  rax,BYTE PTR [rsi+0x2]
  403ffc:	shl    rax,0x28
  404000:	mov    rdx,rax
  404003:	or     rdx,r8
  404006:	movsx  rax,BYTE PTR [rsi+0x1]
  40400b:	shl    rax,0x30
  40400f:	or     rdx,rax
  404012:	movsx  rax,BYTE PTR [rsi]
  404016:	shl    rax,0x38
  40401a:	mov    r8,rax
  40401d:	or     r8,rdx
  404020:	movabs rax,0xffffffff00000000
  40402a:	and    r8,rax
  40402d:	movabs rax,0x6c656673ffffffff
  404037:	cmp    r8,rax
  40403a:	ja     404130 <test@@Base+0xdf0>
  404040:	movabs rax,0x6c65616400000000
  40404a:	cmp    r8,rax
  40404d:	jne    4040e3 <test@@Base+0xda3>
  404053:	mov    edi,DWORD PTR [rsp+0x44]
  404057:	lea    rbx,[rsi+0x4]
  40405b:	test   edi,edi
  40405d:	jne    404408 <test@@Base+0x10c8>
  404063:	cmp    rbx,r13
  404066:	je     4046c3 <test@@Base+0x1383>
  40406c:	movzx  edx,BYTE PTR [rsi+0x4]
  404070:	cmp    dl,0x22
  404073:	jne    40409a <test@@Base+0xd5a>
  404075:	jmp    404788 <test@@Base+0x1448>
  40407a:	nop    WORD PTR [rax+rax*1+0x0]
  404080:	lea    rbx,[rax+0x1]
  404084:	cmp    r13,rbx
  404087:	je     4046d0 <test@@Base+0x1390>
  40408d:	movzx  edx,BYTE PTR [rax+0x1]
  404091:	cmp    dl,0x22
  404094:	je     404788 <test@@Base+0x1448>
  40409a:	mov    rax,rbx
  40409d:	cmp    dl,0x5c
  4040a0:	jne    404080 <test@@Base+0xd40>
  4040a2:	mov    rdx,r13
  4040a5:	sub    rdx,rbx
  4040a8:	cmp    rdx,0x1
  4040ac:	jle    404770 <test@@Base+0x1430>
  4040b2:	inc    rax
  4040b5:	jmp    404080 <test@@Base+0xd40>
  4040b7:	xor    edx,edx
  4040b9:	jmp    404012 <test@@Base+0xcd2>
  4040be:	xor    edx,edx
  4040c0:	jmp    403fd0 <test@@Base+0xc90>
  4040c5:	xor    edx,edx
  4040c7:	jmp    403fdc <test@@Base+0xc9c>
  4040cc:	xor    r8d,r8d
  4040cf:	jmp    403feb <test@@Base+0xcab>
  4040d4:	xor    r8d,r8d
  4040d7:	jmp    403ff7 <test@@Base+0xcb7>
  4040dc:	xor    edx,edx
  4040de:	jmp    404006 <test@@Base+0xcc6>
  4040e3:	lea    rdi,[rsp+0x30]
  4040e8:	mov    ecx,0xd
  4040ed:	mov    rdx,r13
  4040f0:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  4040f5:	mov    r15,rax
  4040f8:	mov    r14,QWORD PTR [rip+0xeef9]        # 412ff8 <stderr@GLIBC_2.2.5>
  4040ff:	jmp    403437 <test@@Base+0xf7>
  404104:	nop    DWORD PTR [rax+0x0]
  404108:	lea    rbx,[rsp+0x30]
  40410d:	mov    rsi,r15
  404110:	mov    ecx,0x5
  404115:	mov    rdx,r13
  404118:	mov    rdi,rbx
  40411b:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  404120:	mov    r15,rax
  404123:	jmp    403541 <test@@Base+0x201>
  404128:	nop    DWORD PTR [rax+rax*1+0x0]
  404130:	movabs rax,0x6c65667400000000
  40413a:	cmp    r8,rax
  40413d:	jne    4040e3 <test@@Base+0xda3>
  40413f:	mov    ecx,DWORD PTR [rsp+0x44]
  404143:	lea    rbx,[rsi+0x4]
  404147:	test   ecx,ecx
  404149:	jne    404290 <test@@Base+0xf50>
  40414f:	cmp    rbx,r13
  404152:	je     4046ed <test@@Base+0x13ad>
  404158:	movzx  edx,BYTE PTR [rsi+0x4]
  40415c:	cmp    dl,0x22
  40415f:	jne    40418a <test@@Base+0xe4a>
  404161:	jmp    404768 <test@@Base+0x1428>
  404166:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404170:	lea    rbx,[rax+0x1]
  404174:	cmp    r13,rbx
  404177:	je     4046f0 <test@@Base+0x13b0>
  40417d:	movzx  edx,BYTE PTR [rax+0x1]
  404181:	cmp    dl,0x22
  404184:	je     404768 <test@@Base+0x1428>
  40418a:	mov    rax,rbx
  40418d:	cmp    dl,0x5c
  404190:	jne    404170 <test@@Base+0xe30>
  404192:	mov    rdx,r13
  404195:	sub    rdx,rbx
  404198:	cmp    rdx,0x1
  40419c:	jle    404758 <test@@Base+0x1418>
  4041a2:	inc    rax
  4041a5:	jmp    404170 <test@@Base+0xe30>
  4041a7:	nop    WORD PTR [rax+rax*1+0x0]
  4041b0:	cmp    r13,r12
  4041b3:	je     403ef0 <test@@Base+0xbb0>
  4041b9:	cmp    BYTE PTR [r12],0x22
  4041be:	jne    403ef0 <test@@Base+0xbb0>
  4041c4:	nop    DWORD PTR [rax+0x0]
  4041c8:	inc    r12
  4041cb:	jmp    403b05 <test@@Base+0x7c5>
  4041d0:	cmp    BYTE PTR [r12+0x2],0x20
  4041d6:	jle    4034ef <test@@Base+0x1af>
  4041dc:	lea    r15,[r12+0x2]
  4041e1:	jmp    403505 <test@@Base+0x1c5>
  4041e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4041f0:	lea    rsi,[rcx+0x1]
  4041f4:	mov    r12,rsi
  4041f7:	jmp    403acf <test@@Base+0x78f>
  4041fc:	nop    DWORD PTR [rax+0x0]
  404200:	movbe  rax,QWORD PTR [rsi]
  404205:	and    r8,rax
  404208:	jmp    40402d <test@@Base+0xced>
  40420d:	nop    DWORD PTR [rax]
  404210:	cmp    BYTE PTR [r12+0x1],0x20
  404216:	jle    403b1e <test@@Base+0x7de>
  40421c:	inc    r12
  40421f:	jmp    403b34 <test@@Base+0x7f4>
  404224:	nop    DWORD PTR [rax+0x0]
  404228:	cmp    BYTE PTR [r12+0x2],0x20
  40422e:	jle    403b6d <test@@Base+0x82d>
  404234:	lea    r15,[r12+0x2]
  404239:	jmp    403b83 <test@@Base+0x843>
  40423e:	mov    rbx,r13
  404241:	nop    DWORD PTR [rax+0x0]
  404248:	mov    rsi,rbx
  40424b:	lea    rdi,[rsp+0x30]
  404250:	mov    ecx,0x14
  404255:	mov    rdx,r13
  404258:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40425d:	mov    rbx,rax
  404260:	jmp    40374e <test@@Base+0x40e>
  404265:	nop    DWORD PTR [rax]
  404268:	cmp    al,0x2e
  40426a:	jne    40392d <test@@Base+0x5ed>
  404270:	lea    rdi,[rsp+0x30]
  404275:	mov    ecx,0x5
  40427a:	mov    rdx,r13
  40427d:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  404282:	mov    rbx,rax
  404285:	jmp    40392d <test@@Base+0x5ed>
  40428a:	nop    WORD PTR [rax+rax*1+0x0]
  404290:	cmp    rbx,r13
  404293:	je     4048b3 <test@@Base+0x1573>
  404299:	movzx  eax,BYTE PTR [rsi+0x4]
  40429d:	cmp    al,0x20
  40429f:	jle    4042fc <test@@Base+0xfbc>
  4042a1:	mov    rcx,rbx
  4042a4:	lea    edx,[rax-0x2e]
  4042a7:	mov    rbx,rcx
  4042aa:	cmp    dl,0x31
  4042ad:	ja     4042eb <test@@Base+0xfab>
  4042af:	movabs rdi,0x2000000000ffd
  4042b9:	bt     rdi,rdx
  4042bd:	jae    4042eb <test@@Base+0xfab>
  4042bf:	lea    rsi,[rcx+0x1]
  4042c3:	mov    rbx,rsi
  4042c6:	cmp    r13,rsi
  4042c9:	je     40486d <test@@Base+0x152d>
  4042cf:	movzx  edx,BYTE PTR [rsi]
  4042d2:	mov    rcx,rsi
  4042d5:	cmp    dl,0x20
  4042d8:	jle    40486d <test@@Base+0x152d>
  4042de:	mov    eax,edx
  4042e0:	lea    edx,[rax-0x2e]
  4042e3:	mov    rbx,rcx
  4042e6:	cmp    dl,0x31
  4042e9:	jbe    4042af <test@@Base+0xf6f>
  4042eb:	mov    edx,eax
  4042ed:	or     edx,0x20
  4042f0:	sub    edx,0x61
  4042f3:	cmp    dl,0x19
  4042f6:	jbe    4047a0 <test@@Base+0x1460>
  4042fc:	mov    rax,r13
  4042ff:	sub    rax,rbx
  404302:	cmp    rax,0x1
  404306:	jle    404313 <test@@Base+0xfd3>
  404308:	cmp    BYTE PTR [rbx],0x20
  40430b:	jg     404326 <test@@Base+0xfe6>
  40430d:	je     4047be <test@@Base+0x147e>
  404313:	mov    rsi,rbx
  404316:	lea    rdi,[rsp+0x30]
  40431b:	mov    rdx,r13
  40431e:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  404323:	mov    rbx,rax
  404326:	cmp    r13,rbx
  404329:	je     403a10 <test@@Base+0x6d0>
  40432f:	jbe    4045a0 <test@@Base+0x1260>
  404335:	cmp    BYTE PTR [rbx],0x3a
  404338:	jne    4045a0 <test@@Base+0x1260>
  40433e:	lea    r15,[rbx+0x1]
  404342:	mov    rax,r13
  404345:	sub    rax,r15
  404348:	cmp    rax,0x1
  40434c:	jle    40435a <test@@Base+0x101a>
  40434e:	cmp    BYTE PTR [rbx+0x1],0x20
  404352:	jg     40436d <test@@Base+0x102d>
  404354:	je     4047e3 <test@@Base+0x14a3>
  40435a:	mov    rsi,r15
  40435d:	lea    rdi,[rsp+0x30]
  404362:	mov    rdx,r13
  404365:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40436a:	mov    r15,rax
  40436d:	cmp    r13,r15
  404370:	je     403e90 <test@@Base+0xb50>
  404376:	mov    ecx,0x4
  40437b:	mov    edx,0x4
  404380:	mov    esi,0x2
  404385:	mov    rdi,rbp
  404388:	call   407f40 <flatcc_builder_table_add@@Base>
  40438d:	mov    r12,rax
  404390:	test   rax,rax
  404393:	je     403a00 <test@@Base+0x6c0>
  404399:	mov    QWORD PTR [rsp+0x28],0x0
  4043a2:	mov    DWORD PTR [rsp+0x24],0x0
  4043aa:	mov    DWORD PTR [rax],0x0
  4043b0:	lea    rbx,[rsp+0x30]
  4043b5:	lea    r8,[rsp+0x28]
  4043ba:	lea    rcx,[rsp+0x24]
  4043bf:	mov    rdx,r13
  4043c2:	mov    rsi,r15
  4043c5:	mov    rdi,rbx
  4043c8:	call   40bae0 <flatcc_json_parser_integer@@Base>
  4043cd:	mov    r8,rax
  4043d0:	cmp    r15,rax
  4043d3:	je     403a00 <test@@Base+0x6c0>
  4043d9:	mov    edx,DWORD PTR [rsp+0x24]
  4043dd:	test   edx,edx
  4043df:	jne    4045e0 <test@@Base+0x12a0>
  4043e5:	mov    rax,QWORD PTR [rsp+0x28]
  4043ea:	mov    edx,0xffffffff
  4043ef:	cmp    rax,rdx
  4043f2:	ja     404660 <test@@Base+0x1320>
  4043f8:	mov    DWORD PTR [r12],eax
  4043fc:	jmp    403c2f <test@@Base+0x8ef>
  404401:	nop    DWORD PTR [rax+0x0]
  404408:	cmp    rbx,r13
  40440b:	je     4048bb <test@@Base+0x157b>
  404411:	movzx  eax,BYTE PTR [rsi+0x4]
  404415:	cmp    al,0x20
  404417:	jle    404474 <test@@Base+0x1134>
  404419:	mov    rcx,rbx
  40441c:	lea    edx,[rax-0x2e]
  40441f:	mov    rbx,rcx
  404422:	cmp    dl,0x31
  404425:	ja     404463 <test@@Base+0x1123>
  404427:	movabs rdi,0x2000000000ffd
  404431:	bt     rdi,rdx
  404435:	jae    404463 <test@@Base+0x1123>
  404437:	lea    rsi,[rcx+0x1]
  40443b:	mov    rbx,rsi
  40443e:	cmp    r13,rsi
  404441:	je     40484b <test@@Base+0x150b>
  404447:	movzx  edx,BYTE PTR [rsi]
  40444a:	mov    rcx,rsi
  40444d:	cmp    dl,0x20
  404450:	jle    40484b <test@@Base+0x150b>
  404456:	mov    eax,edx
  404458:	lea    edx,[rax-0x2e]
  40445b:	mov    rbx,rcx
  40445e:	cmp    dl,0x31
  404461:	jbe    404427 <test@@Base+0x10e7>
  404463:	mov    edx,eax
  404465:	or     edx,0x20
  404468:	sub    edx,0x61
  40446b:	cmp    dl,0x19
  40446e:	jbe    404790 <test@@Base+0x1450>
  404474:	mov    rax,r13
  404477:	sub    rax,rbx
  40447a:	cmp    rax,0x1
  40447e:	jle    40448b <test@@Base+0x114b>
  404480:	cmp    BYTE PTR [rbx],0x20
  404483:	jg     40449e <test@@Base+0x115e>
  404485:	je     4047ac <test@@Base+0x146c>
  40448b:	mov    rsi,rbx
  40448e:	lea    rdi,[rsp+0x30]
  404493:	mov    rdx,r13
  404496:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40449b:	mov    rbx,rax
  40449e:	cmp    r13,rbx
  4044a1:	je     403a10 <test@@Base+0x6d0>
  4044a7:	jbe    4045a0 <test@@Base+0x1260>
  4044ad:	cmp    BYTE PTR [rbx],0x3a
  4044b0:	jne    4045a0 <test@@Base+0x1260>
  4044b6:	lea    r15,[rbx+0x1]
  4044ba:	mov    rax,r13
  4044bd:	sub    rax,r15
  4044c0:	cmp    rax,0x1
  4044c4:	jle    4044d2 <test@@Base+0x1192>
  4044c6:	cmp    BYTE PTR [rbx+0x1],0x20
  4044ca:	jg     4044e5 <test@@Base+0x11a5>
  4044cc:	je     4047d0 <test@@Base+0x1490>
  4044d2:	mov    rsi,r15
  4044d5:	lea    rdi,[rsp+0x30]
  4044da:	mov    rdx,r13
  4044dd:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  4044e2:	mov    r15,rax
  4044e5:	cmp    r13,r15
  4044e8:	je     403e90 <test@@Base+0xb50>
  4044ee:	mov    ecx,0x8
  4044f3:	mov    edx,0x8
  4044f8:	mov    esi,0x3
  4044fd:	mov    rdi,rbp
  404500:	call   407f40 <flatcc_builder_table_add@@Base>
  404505:	mov    r12,rax
  404508:	test   rax,rax
  40450b:	je     403a00 <test@@Base+0x6c0>
  404511:	mov    QWORD PTR [rsp+0x28],0x0
  40451a:	mov    DWORD PTR [rsp+0x24],0x0
  404522:	mov    QWORD PTR [rax],0x0
  404529:	lea    rbx,[rsp+0x30]
  40452e:	lea    r8,[rsp+0x28]
  404533:	lea    rcx,[rsp+0x24]
  404538:	mov    rdx,r13
  40453b:	mov    rsi,r15
  40453e:	mov    rdi,rbx
  404541:	call   40bae0 <flatcc_json_parser_integer@@Base>
  404546:	mov    r8,rax
  404549:	cmp    r15,rax
  40454c:	je     403a00 <test@@Base+0x6c0>
  404552:	mov    esi,DWORD PTR [rsp+0x24]
  404556:	mov    rax,QWORD PTR [rsp+0x28]
  40455b:	test   esi,esi
  40455d:	je     404831 <test@@Base+0x14f1>
  404563:	movabs rdx,0x8000000000000000
  40456d:	cmp    rax,rdx
  404570:	ja     4045e0 <test@@Base+0x12a0>
  404572:	neg    rax
  404575:	mov    QWORD PTR [r12],rax
  404579:	jmp    403c2f <test@@Base+0x8ef>
  40457e:	cmp    r13,rbx
  404581:	je     404248 <test@@Base+0xf08>
  404587:	cmp    BYTE PTR [rbx],0x22
  40458a:	jne    404248 <test@@Base+0xf08>
  404590:	inc    rbx
  404593:	jmp    40374e <test@@Base+0x40e>
  404598:	nop    DWORD PTR [rax+rax*1+0x0]
  4045a0:	mov    r14,QWORD PTR [rip+0xea51]        # 412ff8 <stderr@GLIBC_2.2.5>
  4045a7:	mov    ecx,0x3a
  4045ac:	mov    rdi,QWORD PTR [r14]
  4045af:	lea    rdx,[rip+0x8a61]        # 40d017 <_IO_stdin_used@@Base+0x17>
  4045b6:	mov    esi,0x1
  4045bb:	xor    eax,eax
  4045bd:	call   4031b0 <__fprintf_chk@plt>
  4045c2:	lea    rdi,[rsp+0x30]
  4045c7:	mov    ecx,0x11
  4045cc:	mov    rdx,r13
  4045cf:	mov    rsi,rbx
  4045d2:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  4045d7:	mov    r15,rax
  4045da:	jmp    403437 <test@@Base+0xf7>
  4045df:	nop
  4045e0:	mov    ecx,0x8
  4045e5:	mov    rsi,r8
  4045e8:	mov    rdx,r13
  4045eb:	mov    rdi,rbx
  4045ee:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  4045f3:	mov    r8,rax
  4045f6:	cmp    r15,rax
  4045f9:	jne    403c2f <test@@Base+0x8ef>
  4045ff:	jmp    403a00 <test@@Base+0x6c0>
  404604:	nop    DWORD PTR [rax+0x0]
  404608:	lea    rsi,[rcx+0x1]
  40460c:	mov    rbx,rsi
  40460f:	jmp    403718 <test@@Base+0x3d8>
  404614:	nop    DWORD PTR [rax+0x0]
  404618:	mov    r14,QWORD PTR [rip+0xe9d9]        # 412ff8 <stderr@GLIBC_2.2.5>
  40461f:	mov    ecx,0x7d
  404624:	mov    rdi,QWORD PTR [r14]
  404627:	lea    rdx,[rip+0x89e9]        # 40d017 <_IO_stdin_used@@Base+0x17>
  40462e:	mov    esi,0x1
  404633:	xor    eax,eax
  404635:	mov    QWORD PTR [rsp+0x10],r8
  40463a:	call   4031b0 <__fprintf_chk@plt>
  40463f:	mov    r8,QWORD PTR [rsp+0x10]
  404644:	mov    ecx,0x11
  404649:	mov    rdx,r13
  40464c:	mov    rsi,r8
  40464f:	mov    rdi,rbx
  404652:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  404657:	mov    r15,rax
  40465a:	jmp    403437 <test@@Base+0xf7>
  40465f:	nop
  404660:	mov    ecx,0x7
  404665:	jmp    4045e5 <test@@Base+0x12a5>
  40466a:	nop    WORD PTR [rax+rax*1+0x0]
  404670:	cmp    BYTE PTR [rbx+0x1],0x20
  404674:	jle    403765 <test@@Base+0x425>
  40467a:	inc    rbx
  40467d:	jmp    403778 <test@@Base+0x438>
  404682:	mov    rsi,r15
  404685:	lea    rdi,[rsp+0x30]
  40468a:	mov    ecx,0xd
  40468f:	mov    rdx,r13
  404692:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  404697:	mov    r15,rax
  40469a:	mov    r14,QWORD PTR [rip+0xe957]        # 412ff8 <stderr@GLIBC_2.2.5>
  4046a1:	jmp    403437 <test@@Base+0xf7>
  4046a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4046b0:	cmp    BYTE PTR [rbx+0x2],0x20
  4046b4:	jle    4037ac <test@@Base+0x46c>
  4046ba:	lea    r15,[rbx+0x2]
  4046be:	jmp    4037bf <test@@Base+0x47f>
  4046c3:	mov    rbx,r13
  4046c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4046d0:	mov    rsi,rbx
  4046d3:	lea    rdi,[rsp+0x30]
  4046d8:	mov    ecx,0x14
  4046dd:	mov    rdx,r13
  4046e0:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  4046e5:	mov    rbx,rax
  4046e8:	jmp    404474 <test@@Base+0x1134>
  4046ed:	mov    rbx,r13
  4046f0:	mov    rsi,rbx
  4046f3:	lea    rdi,[rsp+0x30]
  4046f8:	mov    ecx,0x14
  4046fd:	mov    rdx,r13
  404700:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  404705:	mov    rbx,rax
  404708:	jmp    4042fc <test@@Base+0xfbc>
  40470d:	nop    DWORD PTR [rax]
  404710:	cmp    al,0x2e
  404712:	jne    403b05 <test@@Base+0x7c5>
  404718:	lea    rbx,[rsp+0x30]
  40471d:	mov    ecx,0x5
  404722:	mov    rdx,r13
  404725:	mov    rdi,rbx
  404728:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40472d:	mov    r12,rax
  404730:	jmp    403b05 <test@@Base+0x7c5>
  404735:	nop    DWORD PTR [rax]
  404738:	cmp    r13,r8
  40473b:	jbe    404618 <test@@Base+0x12d8>
  404741:	cmp    al,0x7d
  404743:	jne    404618 <test@@Base+0x12d8>
  404749:	mov    r15,r8
  40474c:	jmp    403cba <test@@Base+0x97a>
  404751:	nop    DWORD PTR [rax+0x0]
  404758:	cmp    r13,rbx
  40475b:	je     4046f0 <test@@Base+0x13b0>
  40475d:	cmp    BYTE PTR [rbx],0x22
  404760:	jne    4046f0 <test@@Base+0x13b0>
  404762:	nop    WORD PTR [rax+rax*1+0x0]
  404768:	inc    rbx
  40476b:	jmp    4042fc <test@@Base+0xfbc>
  404770:	cmp    r13,rbx
  404773:	je     4046d0 <test@@Base+0x1390>
  404779:	cmp    BYTE PTR [rbx],0x22
  40477c:	jne    4046d0 <test@@Base+0x1390>
  404782:	nop    WORD PTR [rax+rax*1+0x0]
  404788:	inc    rbx
  40478b:	jmp    404474 <test@@Base+0x1134>
  404790:	lea    rsi,[rcx+0x1]
  404794:	mov    rbx,rsi
  404797:	jmp    40443e <test@@Base+0x10fe>
  40479c:	nop    DWORD PTR [rax+0x0]
  4047a0:	lea    rsi,[rcx+0x1]
  4047a4:	mov    rbx,rsi
  4047a7:	jmp    4042c6 <test@@Base+0xf86>
  4047ac:	cmp    BYTE PTR [rbx+0x1],0x20
  4047b0:	jle    40448b <test@@Base+0x114b>
  4047b6:	inc    rbx
  4047b9:	jmp    40449e <test@@Base+0x115e>
  4047be:	cmp    BYTE PTR [rbx+0x1],0x20
  4047c2:	jle    404313 <test@@Base+0xfd3>
  4047c8:	inc    rbx
  4047cb:	jmp    404326 <test@@Base+0xfe6>
  4047d0:	cmp    BYTE PTR [rbx+0x2],0x20
  4047d4:	jle    4044d2 <test@@Base+0x1192>
  4047da:	lea    r15,[rbx+0x2]
  4047de:	jmp    4044e5 <test@@Base+0x11a5>
  4047e3:	cmp    BYTE PTR [rbx+0x2],0x20
  4047e7:	jle    40435a <test@@Base+0x101a>
  4047ed:	lea    r15,[rbx+0x2]
  4047f1:	jmp    40436d <test@@Base+0x102d>
  4047f6:	mov    r14,QWORD PTR [rip+0xe7fb]        # 412ff8 <stderr@GLIBC_2.2.5>
  4047fd:	mov    ecx,0x3a
  404802:	jmp    403409 <test@@Base+0xc9>
  404807:	mov    rbx,r13
  40480a:	jmp    403944 <test@@Base+0x604>
  40480f:	cmp    al,0x2e
  404811:	jne    40374e <test@@Base+0x40e>
  404817:	lea    rdi,[rsp+0x30]
  40481c:	mov    ecx,0x5
  404821:	mov    rdx,r13
  404824:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  404829:	mov    rbx,rax
  40482c:	jmp    40374e <test@@Base+0x40e>
  404831:	test   rax,rax
  404834:	js     404660 <test@@Base+0x1320>
  40483a:	mov    QWORD PTR [r12],rax
  40483e:	jmp    403c2f <test@@Base+0x8ef>
  404843:	mov    r12,r13
  404846:	jmp    403b1e <test@@Base+0x7de>
  40484b:	cmp    al,0x2e
  40484d:	jne    404474 <test@@Base+0x1134>
  404853:	lea    rdi,[rsp+0x30]
  404858:	mov    ecx,0x5
  40485d:	mov    rdx,r13
  404860:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  404865:	mov    rbx,rax
  404868:	jmp    404474 <test@@Base+0x1134>
  40486d:	cmp    al,0x2e
  40486f:	jne    4042fc <test@@Base+0xfbc>
  404875:	lea    rdi,[rsp+0x30]
  40487a:	mov    ecx,0x5
  40487f:	mov    rdx,r13
  404882:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  404887:	mov    rbx,rax
  40488a:	jmp    4042fc <test@@Base+0xfbc>
  40488f:	mov    rbx,r13
  404892:	jmp    403765 <test@@Base+0x425>
  404897:	mov    r15,r12
  40489a:	jmp    403cfe <test@@Base+0x9be>
  40489f:	cmp    BYTE PTR [r15+0x2],0x20
  4048a4:	jle    403ced <test@@Base+0x9ad>
  4048aa:	add    r15,0x2
  4048ae:	jmp    403cfe <test@@Base+0x9be>
  4048b3:	mov    rbx,r13
  4048b6:	jmp    404313 <test@@Base+0xfd3>
  4048bb:	mov    rbx,r13
  4048be:	jmp    40448b <test@@Base+0x114b>
  4048c3:	call   403130 <__stack_chk_fail@plt>
  4048c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4048d0:	push   rbp
  4048d1:	mov    ebp,edx
  4048d3:	mov    r8d,0x1
  4048d9:	push   rbx
  4048da:	mov    rbx,rdi
  4048dd:	mov    ecx,0x1
  4048e2:	sub    rsp,0x8
  4048e6:	mov    edx,DWORD PTR [rdi+0x28]
  4048e9:	add    rdx,rsi
  4048ec:	lea    rsi,[rdi+0x68]
  4048f0:	mov    rdi,QWORD PTR [rdi+0x40]
  4048f4:	call   QWORD PTR [rbx+0x50]
  4048f7:	test   eax,eax
  4048f9:	jne    404928 <test@@Base+0x15e8>
  4048fb:	mov    edx,DWORD PTR [rbx+0x28]
  4048fe:	mov    rcx,rdx
  404901:	add    rdx,QWORD PTR [rbx+0x68]
  404905:	mov    QWORD PTR [rbx+0x18],rdx
  404909:	mov    edx,DWORD PTR [rbx+0x70]
  40490c:	sub    edx,ecx
  40490e:	cmp    ebp,edx
  404910:	cmovb  edx,ebp
  404913:	mov    DWORD PTR [rbx+0x24],edx
  404916:	mov    rdx,QWORD PTR [rbx+0x30]
  40491a:	mov    DWORD PTR [rdx+0x4],ebp
  40491d:	add    rsp,0x8
  404921:	pop    rbx
  404922:	pop    rbp
  404923:	ret    
  404924:	nop    DWORD PTR [rax+0x0]
  404928:	mov    eax,0xffffffff
  40492d:	jmp    40491d <test@@Base+0x15dd>
  40492f:	nop

0000000000404930 <flatcc_builder_default_alloc@@Base>:
  404930:	endbr64 
  404934:	push   r13
  404936:	push   r12
  404938:	push   rbp
  404939:	mov    rbp,rsi
  40493c:	push   rbx
  40493d:	sub    rsp,0x18
  404941:	test   rdx,rdx
  404944:	je     404a08 <flatcc_builder_default_alloc@@Base+0xd8>
  40494a:	mov    r13d,ecx
  40494d:	cmp    r8d,0x4
  404951:	je     404a40 <flatcc_builder_default_alloc@@Base+0x110>
  404957:	jle    4049d0 <flatcc_builder_default_alloc@@Base+0xa0>
  404959:	mov    rbx,rdx
  40495c:	cmp    r8d,0x5
  404960:	je     404988 <flatcc_builder_default_alloc@@Base+0x58>
  404962:	cmp    r8d,0x7
  404966:	mov    ebx,0x40
  40496b:	mov    eax,0x20
  404970:	cmovne rbx,rax
  404974:	cmp    rbx,rdx
  404977:	jae    404988 <flatcc_builder_default_alloc@@Base+0x58>
  404979:	nop    DWORD PTR [rax+0x0]
  404980:	add    rbx,rbx
  404983:	cmp    rdx,rbx
  404986:	ja     404980 <flatcc_builder_default_alloc@@Base+0x50>
  404988:	mov    rax,QWORD PTR [rbp+0x8]
  40498c:	cmp    rdx,rax
  40498f:	ja     40499e <flatcc_builder_default_alloc@@Base+0x6e>
  404991:	shr    rax,1
  404994:	mov    rdx,rax
  404997:	xor    eax,eax
  404999:	cmp    rdx,rbx
  40499c:	jae    4049c5 <flatcc_builder_default_alloc@@Base+0x95>
  40499e:	mov    rdi,QWORD PTR [rbp+0x0]
  4049a2:	mov    rsi,rbx
  4049a5:	call   4031a0 <realloc@plt>
  4049aa:	mov    r12,rax
  4049ad:	test   rax,rax
  4049b0:	je     404a4a <flatcc_builder_default_alloc@@Base+0x11a>
  4049b6:	test   r13d,r13d
  4049b9:	jne    4049e8 <flatcc_builder_default_alloc@@Base+0xb8>
  4049bb:	mov    QWORD PTR [rbp+0x0],r12
  4049bf:	mov    QWORD PTR [rbp+0x8],rbx
  4049c3:	xor    eax,eax
  4049c5:	add    rsp,0x18
  4049c9:	pop    rbx
  4049ca:	pop    rbp
  4049cb:	pop    r12
  4049cd:	pop    r13
  4049cf:	ret    
  4049d0:	cmp    r8d,0x1
  4049d4:	mov    ebx,0x100
  4049d9:	mov    eax,0x20
  4049de:	cmovne rbx,rax
  4049e2:	jmp    404974 <flatcc_builder_default_alloc@@Base+0x44>
  4049e4:	nop    DWORD PTR [rax+0x0]
  4049e8:	mov    rax,QWORD PTR [rbp+0x8]
  4049ec:	cmp    rax,rbx
  4049ef:	jae    4049bb <flatcc_builder_default_alloc@@Base+0x8b>
  4049f1:	mov    rdx,rbx
  4049f4:	sub    rdx,rax
  4049f7:	lea    rdi,[r12+rax*1]
  4049fb:	xor    esi,esi
  4049fd:	call   403150 <memset@plt>
  404a02:	jmp    4049bb <flatcc_builder_default_alloc@@Base+0x8b>
  404a04:	nop    DWORD PTR [rax+0x0]
  404a08:	mov    rdi,QWORD PTR [rsi]
  404a0b:	xor    eax,eax
  404a0d:	test   rdi,rdi
  404a10:	je     4049c5 <flatcc_builder_default_alloc@@Base+0x95>
  404a12:	mov    DWORD PTR [rsp+0xc],eax
  404a16:	call   403100 <free@plt>
  404a1b:	mov    QWORD PTR [rbp+0x0],0x0
  404a23:	mov    QWORD PTR [rbp+0x8],0x0
  404a2b:	mov    eax,DWORD PTR [rsp+0xc]
  404a2f:	add    rsp,0x18
  404a33:	pop    rbx
  404a34:	pop    rbp
  404a35:	pop    r12
  404a37:	pop    r13
  404a39:	ret    
  404a3a:	nop    WORD PTR [rax+rax*1+0x0]
  404a40:	mov    ebx,0x120
  404a45:	jmp    404974 <flatcc_builder_default_alloc@@Base+0x44>
  404a4a:	mov    eax,0xffffffff
  404a4f:	jmp    4049c5 <flatcc_builder_default_alloc@@Base+0x95>
  404a54:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404a5f:	nop
  404a60:	push   rax
  404a61:	pop    rax
  404a62:	lea    rcx,[rip+0x93a7]        # 40de10 <g_data@@Base+0xd50>
  404a69:	mov    edx,0x134
  404a6e:	lea    rsi,[rip+0x88d3]        # 40d348 <g_data@@Base+0x288>
  404a75:	lea    rdi,[rip+0x8c63]        # 40d6df <g_data@@Base+0x61f>
  404a7c:	sub    rsp,0x8
  404a80:	call   403140 <__assert_fail@plt>
  404a85:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404a90:	push   rax
  404a91:	pop    rax
  404a92:	lea    rcx,[rip+0x9307]        # 40dda0 <g_data@@Base+0xce0>
  404a99:	mov    edx,0x2a5
  404a9e:	lea    rsi,[rip+0x88a3]        # 40d348 <g_data@@Base+0x288>
  404aa5:	lea    rdi,[rip+0x8c33]        # 40d6df <g_data@@Base+0x61f>
  404aac:	sub    rsp,0x8
  404ab0:	call   403140 <__assert_fail@plt>
  404ab5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404ac0:	push   rbx
  404ac1:	mov    r9,rdi
  404ac4:	sub    rsp,0xa0
  404acb:	mov    rbx,QWORD PTR fs:0x28
  404ad4:	mov    QWORD PTR [rsp+0x98],rbx
  404adc:	xor    ebx,ebx
  404ade:	test   dx,dx
  404ae1:	je     404b40 <flatcc_builder_default_alloc@@Base+0x210>
  404ae3:	mov    eax,edx
  404ae5:	movzx  edx,dx
  404ae8:	movzx  edi,WORD PTR [rsi]
  404aeb:	cmp    di,0x3
  404aef:	ja     404afe <flatcc_builder_default_alloc@@Base+0x1ce>
  404af1:	mov    edi,0x4
  404af6:	mov    WORD PTR [rsi],di
  404af9:	mov    edi,0x4
  404afe:	cmp    ax,di
  404b01:	jbe    404b06 <flatcc_builder_default_alloc@@Base+0x1d6>
  404b03:	mov    WORD PTR [rsi],ax
  404b06:	test   ecx,ecx
  404b08:	jne    404b17 <flatcc_builder_default_alloc@@Base+0x1e7>
  404b0a:	mov    ebx,DWORD PTR [r9+0xf4]
  404b11:	dec    edx
  404b13:	and    edx,ebx
  404b15:	jne    404b60 <flatcc_builder_default_alloc@@Base+0x230>
  404b17:	xor    eax,eax
  404b19:	mov    rbx,QWORD PTR [rsp+0x98]
  404b21:	xor    rbx,QWORD PTR fs:0x28
  404b2a:	jne    404bcd <flatcc_builder_default_alloc@@Base+0x29d>
  404b30:	add    rsp,0xa0
  404b37:	pop    rbx
  404b38:	ret    
  404b39:	nop    DWORD PTR [rax+0x0]
  404b40:	movzx  eax,WORD PTR [rdi+0xec]
  404b47:	movzx  edx,ax
  404b4a:	test   ax,ax
  404b4d:	jne    404ae8 <flatcc_builder_default_alloc@@Base+0x1b8>
  404b4f:	mov    edx,0x1
  404b54:	mov    eax,0x1
  404b59:	jmp    404ae8 <flatcc_builder_default_alloc@@Base+0x1b8>
  404b5b:	nop    DWORD PTR [rax+rax*1+0x0]
  404b60:	mov    rax,0x40de40
  404b67:	movsxd r8,edx
  404b6a:	add    edx,ebx
  404b6c:	mov    QWORD PTR [rsp],r8
  404b70:	mov    QWORD PTR [rsp+0x10],rax
  404b75:	mov    QWORD PTR [rsp+0x18],r8
  404b7a:	mov    DWORD PTR [rsp+0x8],0x1
  404b82:	mov    DWORD PTR [r9+0xf4],edx
  404b89:	cmp    ebx,edx
  404b8b:	jg     404bd7 <flatcc_builder_default_alloc@@Base+0x2a7>
  404b8d:	mov    rdi,QWORD PTR [r9+0x38]
  404b91:	lea    rsi,[rsp+0x10]
  404b96:	mov    ecx,ebx
  404b98:	mov    edx,0x1
  404b9d:	call   QWORD PTR [r9+0x48]
  404ba1:	test   eax,eax
  404ba3:	jne    404bd2 <flatcc_builder_default_alloc@@Base+0x2a2>
  404ba5:	cmp    ebx,0xffffffff
  404ba8:	jne    404b17 <flatcc_builder_default_alloc@@Base+0x1e7>
  404bae:	lea    rcx,[rip+0x91fb]        # 40ddb0 <g_data@@Base+0xcf0>
  404bb5:	mov    edx,0x2be
  404bba:	lea    rsi,[rip+0x8787]        # 40d348 <g_data@@Base+0x288>
  404bc1:	lea    rdi,[rip+0x8b17]        # 40d6df <g_data@@Base+0x61f>
  404bc8:	call   403140 <__assert_fail@plt>
  404bcd:	call   403130 <__stack_chk_fail@plt>
  404bd2:	call   404a90 <flatcc_builder_default_alloc@@Base+0x160>
  404bd7:	lea    rcx,[rip+0x91c2]        # 40dda0 <g_data@@Base+0xce0>
  404bde:	mov    edx,0x2a1
  404be3:	lea    rsi,[rip+0x875e]        # 40d348 <g_data@@Base+0x288>
  404bea:	lea    rdi,[rip+0x8aee]        # 40d6df <g_data@@Base+0x61f>
  404bf1:	call   403140 <__assert_fail@plt>
  404bf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404c00:	push   rax
  404c01:	pop    rax
  404c02:	lea    rcx,[rip+0x9187]        # 40dd90 <g_data@@Base+0xcd0>
  404c09:	mov    edx,0x28b
  404c0e:	lea    rsi,[rip+0x8733]        # 40d348 <g_data@@Base+0x288>
  404c15:	lea    rdi,[rip+0x8ac3]        # 40d6df <g_data@@Base+0x61f>
  404c1c:	sub    rsp,0x8
  404c20:	call   403140 <__assert_fail@plt>
  404c25:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404c30:	push   rax
  404c31:	pop    rax
  404c32:	lea    rcx,[rip+0x90b7]        # 40dcf0 <g_data@@Base+0xc30>
  404c39:	mov    edx,0x37c
  404c3e:	lea    rsi,[rip+0x8703]        # 40d348 <g_data@@Base+0x288>
  404c45:	lea    rdi,[rip+0x8a6c]        # 40d6b8 <g_data@@Base+0x5f8>
  404c4c:	sub    rsp,0x8
  404c50:	call   403140 <__assert_fail@plt>
  404c55:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404c60:	push   r12
  404c62:	mov    r12d,esi
  404c65:	push   rbp
  404c66:	push   rbx
  404c67:	mov    rbx,rdi
  404c6a:	movsxd rax,DWORD PTR [rdi+0x104]
  404c71:	lea    edx,[rax+0x1]
  404c74:	mov    DWORD PTR [rdi+0x104],edx
  404c7a:	cmp    edx,DWORD PTR [rdi+0x108]
  404c80:	jle    404d50 <flatcc_builder_default_alloc@@Base+0x420>
  404c86:	mov    ecx,DWORD PTR [rdi+0x120]
  404c8c:	cmp    edx,ecx
  404c8e:	jle    404c98 <flatcc_builder_default_alloc@@Base+0x368>
  404c90:	test   ecx,ecx
  404c92:	jg     404d68 <flatcc_builder_default_alloc@@Base+0x438>
  404c98:	lea    rcx,[rax+rax*8]
  404c9c:	lea    rbp,[rcx*4+0x0]
  404ca4:	lea    rdx,[rbp+0x24]
  404ca8:	cmp    rdx,QWORD PTR [rbx+0xa0]
  404caf:	jbe    404ccf <flatcc_builder_default_alloc@@Base+0x39f>
  404cb1:	mov    rdi,QWORD PTR [rbx+0x40]
  404cb5:	xor    ecx,ecx
  404cb7:	lea    rsi,[rbx+0x98]
  404cbe:	mov    r8d,0x4
  404cc4:	call   QWORD PTR [rbx+0x50]
  404cc7:	test   eax,eax
  404cc9:	jne    404d6f <flatcc_builder_default_alloc@@Base+0x43f>
  404ccf:	mov    rcx,rbp
  404cd2:	add    rcx,QWORD PTR [rbx+0x98]
  404cd9:	mov    QWORD PTR [rbx+0x30],rcx
  404cdd:	je     404d68 <flatcc_builder_default_alloc@@Base+0x438>
  404ce3:	movabs rdx,0xe38e38e38e38e38f
  404ced:	mov    rax,rdx
  404cf0:	mul    QWORD PTR [rbx+0xa0]
  404cf7:	mov    eax,DWORD PTR [rbx+0x120]
  404cfd:	shr    rdx,0x5
  404d01:	mov    DWORD PTR [rbx+0x108],edx
  404d07:	cmp    eax,edx
  404d09:	jge    404d10 <flatcc_builder_default_alloc@@Base+0x3e0>
  404d0b:	test   eax,eax
  404d0d:	jg     404d60 <flatcc_builder_default_alloc@@Base+0x430>
  404d0f:	nop
  404d10:	movzx  eax,WORD PTR [rbx+0xea]
  404d17:	mov    edx,DWORD PTR [rbx+0x20]
  404d1a:	mov    WORD PTR [rcx+0xc],ax
  404d1e:	mov    eax,DWORD PTR [rbx+0x28]
  404d21:	mov    DWORD PTR [rcx+0x8],edx
  404d24:	mov    WORD PTR [rbx+0xea],r12w
  404d2c:	mov    DWORD PTR [rcx],eax
  404d2e:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404d35:	lea    eax,[rdx+rax*1+0x7]
  404d39:	mov    DWORD PTR [rbx+0x20],0x0
  404d40:	and    eax,0xfffffff8
  404d43:	mov    DWORD PTR [rbx+0x28],eax
  404d46:	xor    eax,eax
  404d48:	pop    rbx
  404d49:	pop    rbp
  404d4a:	pop    r12
  404d4c:	ret    
  404d4d:	nop    DWORD PTR [rax]
  404d50:	mov    rax,QWORD PTR [rdi+0x30]
  404d54:	lea    rcx,[rax+0x24]
  404d58:	mov    QWORD PTR [rdi+0x30],rcx
  404d5c:	jmp    404d10 <flatcc_builder_default_alloc@@Base+0x3e0>
  404d5e:	xchg   ax,ax
  404d60:	mov    DWORD PTR [rbx+0x108],eax
  404d66:	jmp    404d10 <flatcc_builder_default_alloc@@Base+0x3e0>
  404d68:	mov    eax,0xffffffff
  404d6d:	jmp    404d48 <flatcc_builder_default_alloc@@Base+0x418>
  404d6f:	call   404a60 <flatcc_builder_default_alloc@@Base+0x130>
  404d74:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404d7f:	nop
  404d80:	push   rbp
  404d81:	push   rbx
  404d82:	sub    rsp,0xb8
  404d89:	mov    rax,QWORD PTR fs:0x28
  404d92:	mov    QWORD PTR [rsp+0xa8],rax
  404d9a:	xor    eax,eax
  404d9c:	cmp    edx,0x3fffffff
  404da2:	ja     404f38 <flatcc_builder_default_alloc@@Base+0x608>
  404da8:	cmp    WORD PTR [rdi+0xe8],0x3
  404db0:	mov    rbx,rdi
  404db3:	ja     404dc1 <flatcc_builder_default_alloc@@Base+0x491>
  404db5:	mov    eax,0x4
  404dba:	mov    WORD PTR [rdi+0xe8],ax
  404dc1:	mov    edi,DWORD PTR [rbx+0xf0]
  404dc7:	mov    r9d,edx
  404dca:	mov    eax,edi
  404dcc:	lea    r8,[rsp+0xc]
  404dd1:	and    eax,0x3
  404dd4:	shl    r9d,0x2
  404dd8:	mov    QWORD PTR [rsp+0x20],r8
  404ddd:	mov    DWORD PTR [rsp+0xc],edx
  404de1:	mov    QWORD PTR [rsp+0x10],0x4
  404dea:	mov    QWORD PTR [rsp+0x28],0x4
  404df3:	mov    DWORD PTR [rsp+0x18],0x1
  404dfb:	mov    r8d,0x4
  404e01:	je     404e21 <flatcc_builder_default_alloc@@Base+0x4f1>
  404e03:	mov    r9d,r9d
  404e06:	lea    r8,[r9+0x4]
  404e0a:	mov    QWORD PTR [rsp+0x10],r8
  404e0f:	mov    QWORD PTR [rsp+0x30],rsi
  404e14:	mov    QWORD PTR [rsp+0x38],r9
  404e19:	mov    DWORD PTR [rsp+0x18],0x2
  404e21:	test   eax,eax
  404e23:	jne    404f00 <flatcc_builder_default_alloc@@Base+0x5d0>
  404e29:	mov    r10d,r8d
  404e2c:	test   edx,edx
  404e2e:	je     404ea6 <flatcc_builder_default_alloc@@Base+0x576>
  404e30:	sub    r10d,edi
  404e33:	lea    r9d,[rdx-0x1]
  404e37:	xor    eax,eax
  404e39:	sub    r10d,0x4
  404e3d:	jmp    404e68 <flatcc_builder_default_alloc@@Base+0x538>
  404e3f:	nop
  404e40:	mov    edi,eax
  404e42:	neg    edi
  404e44:	lea    edi,[r10+rdi*4]
  404e48:	add    edx,edi
  404e4a:	mov    DWORD PTR [rsi+rax*4],edx
  404e4d:	test   rcx,rcx
  404e50:	je     404e5c <flatcc_builder_default_alloc@@Base+0x52c>
  404e52:	cmp    BYTE PTR [rcx+rax*1],0x0
  404e56:	je     404f5b <flatcc_builder_default_alloc@@Base+0x62b>
  404e5c:	lea    rdx,[rax+0x1]
  404e60:	cmp    rax,r9
  404e63:	je     404ea0 <flatcc_builder_default_alloc@@Base+0x570>
  404e65:	mov    rax,rdx
  404e68:	mov    edx,DWORD PTR [rsi+rax*4]
  404e6b:	test   edx,edx
  404e6d:	jne    404e40 <flatcc_builder_default_alloc@@Base+0x510>
  404e6f:	test   rcx,rcx
  404e72:	je     404f3c <flatcc_builder_default_alloc@@Base+0x60c>
  404e78:	cmp    BYTE PTR [rcx+rax*1],0x0
  404e7c:	je     404e5c <flatcc_builder_default_alloc@@Base+0x52c>
  404e7e:	lea    rcx,[rip+0x8b8b]        # 40da10 <g_data@@Base+0x950>
  404e85:	mov    edx,0x5b5
  404e8a:	lea    rsi,[rip+0x84b7]        # 40d348 <g_data@@Base+0x288>
  404e91:	lea    rdi,[rip+0x8849]        # 40d6e1 <g_data@@Base+0x621>
  404e98:	call   403140 <__assert_fail@plt>
  404e9d:	nop    DWORD PTR [rax]
  404ea0:	mov    edi,DWORD PTR [rbx+0xf0]
  404ea6:	mov    ebp,edi
  404ea8:	sub    ebp,r8d
  404eab:	cmp    ebp,edi
  404ead:	jge    404f7a <flatcc_builder_default_alloc@@Base+0x64a>
  404eb3:	mov    rdi,QWORD PTR [rbx+0x38]
  404eb7:	mov    edx,DWORD PTR [rsp+0x18]
  404ebb:	lea    rsi,[rsp+0x20]
  404ec0:	mov    ecx,ebp
  404ec2:	call   QWORD PTR [rbx+0x48]
  404ec5:	test   eax,eax
  404ec7:	jne    404f9e <flatcc_builder_default_alloc@@Base+0x66e>
  404ecd:	mov    DWORD PTR [rbx+0xf0],ebp
  404ed3:	mov    rbx,QWORD PTR [rsp+0xa8]
  404edb:	xor    rbx,QWORD PTR fs:0x28
  404ee4:	mov    eax,ebp
  404ee6:	jne    404f99 <flatcc_builder_default_alloc@@Base+0x669>
  404eec:	add    rsp,0xb8
  404ef3:	pop    rbx
  404ef4:	pop    rbp
  404ef5:	ret    
  404ef6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404f00:	movsxd r10,DWORD PTR [rsp+0x18]
  404f05:	mov    r11,0x40de40
  404f0c:	mov    r9,r10
  404f0f:	add    r8,rax
  404f12:	shl    r10,0x4
  404f16:	inc    r9d
  404f19:	mov    QWORD PTR [rsp+0x10],r8
  404f1e:	mov    QWORD PTR [rsp+r10*1+0x20],r11
  404f23:	mov    QWORD PTR [rsp+r10*1+0x28],rax
  404f28:	mov    DWORD PTR [rsp+0x18],r9d
  404f2d:	jmp    404e29 <flatcc_builder_default_alloc@@Base+0x4f9>
  404f32:	nop    WORD PTR [rax+rax*1+0x0]
  404f38:	xor    ebp,ebp
  404f3a:	jmp    404ed3 <flatcc_builder_default_alloc@@Base+0x5a3>
  404f3c:	lea    rcx,[rip+0x8acd]        # 40da10 <g_data@@Base+0x950>
  404f43:	mov    edx,0x5b7
  404f48:	lea    rsi,[rip+0x83f9]        # 40d348 <g_data@@Base+0x288>
  404f4f:	lea    rdi,[rip+0x8789]        # 40d6df <g_data@@Base+0x61f>
  404f56:	call   403140 <__assert_fail@plt>
  404f5b:	lea    rcx,[rip+0x8aae]        # 40da10 <g_data@@Base+0x950>
  404f62:	mov    edx,0x5b1
  404f67:	lea    rsi,[rip+0x83da]        # 40d348 <g_data@@Base+0x288>
  404f6e:	lea    rdi,[rip+0x875e]        # 40d6d3 <g_data@@Base+0x613>
  404f75:	call   403140 <__assert_fail@plt>
  404f7a:	lea    rcx,[rip+0x8e0f]        # 40dd90 <g_data@@Base+0xcd0>
  404f81:	mov    edx,0x287
  404f86:	lea    rsi,[rip+0x83bb]        # 40d348 <g_data@@Base+0x288>
  404f8d:	lea    rdi,[rip+0x874b]        # 40d6df <g_data@@Base+0x61f>
  404f94:	call   403140 <__assert_fail@plt>
  404f99:	call   403130 <__stack_chk_fail@plt>
  404f9e:	call   404c00 <flatcc_builder_default_alloc@@Base+0x2d0>
  404fa3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404fae:	xchg   ax,ax

0000000000404fb0 <flatcc_builder_flush_vtable_cache@@Base>:
  404fb0:	endbr64 
  404fb4:	cmp    QWORD PTR [rdi+0xd8],0x0
  404fbc:	jne    404fc0 <flatcc_builder_flush_vtable_cache@@Base+0x10>
  404fbe:	ret    
  404fbf:	nop
  404fc0:	push   rbx
  404fc1:	mov    rbx,rdi
  404fc4:	xor    esi,esi
  404fc6:	mov    rdx,QWORD PTR [rbx+0xb0]
  404fcd:	mov    rdi,QWORD PTR [rdi+0xa8]
  404fd4:	call   403150 <memset@plt>
  404fd9:	movabs rax,0x1000000000
  404fe3:	mov    QWORD PTR [rbx+0xe0],rax
  404fea:	pop    rbx
  404feb:	ret    
  404fec:	nop    DWORD PTR [rax+0x0]

0000000000404ff0 <flatcc_builder_custom_init@@Base>:
  404ff0:	endbr64 
  404ff4:	mov    QWORD PTR [rdi],0x0
  404ffb:	mov    QWORD PTR [rdi+0x180],0x0
  405006:	mov    r9,rdi
  405009:	lea    rdi,[rdi+0x8]
  40500d:	and    rdi,0xfffffffffffffff8
  405011:	mov    r10,rcx
  405014:	mov    rcx,r9
  405017:	sub    rcx,rdi
  40501a:	add    ecx,0x188
  405020:	shr    ecx,0x3
  405023:	xor    eax,eax
  405025:	rep stos QWORD PTR es:[rdi],rax
  405028:	test   rsi,rsi
  40502b:	je     405048 <flatcc_builder_custom_init@@Base+0x58>
  40502d:	test   r10,r10
  405030:	je     405066 <flatcc_builder_custom_init@@Base+0x76>
  405032:	mov    QWORD PTR [r9+0x40],r8
  405036:	mov    QWORD PTR [r9+0x50],r10
  40503a:	mov    QWORD PTR [r9+0x38],rdx
  40503e:	mov    QWORD PTR [r9+0x48],rsi
  405042:	xor    eax,eax
  405044:	ret    
  405045:	nop    DWORD PTR [rax]
  405048:	mov    DWORD PTR [r9+0x128],0x1
  405053:	lea    rdx,[r9+0x130]
  40505a:	mov    rsi,0x408aa0
  405061:	test   r10,r10
  405064:	jne    405032 <flatcc_builder_custom_init@@Base+0x42>
  405066:	mov    r10,0x404930
  40506d:	jmp    405032 <flatcc_builder_custom_init@@Base+0x42>
  40506f:	nop

0000000000405070 <flatcc_builder_init@@Base>:
  405070:	endbr64 
  405074:	xor    r8d,r8d
  405077:	xor    ecx,ecx
  405079:	xor    edx,edx
  40507b:	xor    esi,esi
  40507d:	jmp    404ff0 <flatcc_builder_custom_init@@Base>
  405082:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40508d:	nop    DWORD PTR [rax]

0000000000405090 <flatcc_builder_custom_reset@@Base>:
  405090:	endbr64 
  405094:	push   r14
  405096:	mov    r14d,esi
  405099:	push   r13
  40509b:	mov    r13d,edx
  40509e:	push   r12
  4050a0:	mov    r12,rdi
  4050a3:	push   rbp
  4050a4:	xor    ebp,ebp
  4050a6:	push   rbx
  4050a7:	lea    rbx,[rdi+0x58]
  4050ab:	jmp    4050f5 <flatcc_builder_custom_reset@@Base+0x65>
  4050ad:	nop    DWORD PTR [rax]
  4050b0:	cmp    ebp,0x5
  4050b3:	je     4050df <flatcc_builder_custom_reset@@Base+0x4f>
  4050b5:	test   r13d,r13d
  4050b8:	je     4050df <flatcc_builder_custom_reset@@Base+0x4f>
  4050ba:	mov    rdi,QWORD PTR [r12+0x40]
  4050bf:	mov    r8d,ebp
  4050c2:	mov    ecx,0x1
  4050c7:	mov    edx,0x1
  4050cc:	mov    rsi,rbx
  4050cf:	call   QWORD PTR [r12+0x50]
  4050d4:	test   eax,eax
  4050d6:	jne    405210 <flatcc_builder_custom_reset@@Base+0x180>
  4050dc:	mov    rdi,QWORD PTR [rbx]
  4050df:	mov    rdx,QWORD PTR [rbx+0x8]
  4050e3:	xor    esi,esi
  4050e5:	call   403150 <memset@plt>
  4050ea:	inc    ebp
  4050ec:	add    rbx,0x10
  4050f0:	cmp    ebp,0x8
  4050f3:	je     405128 <flatcc_builder_custom_reset@@Base+0x98>
  4050f5:	mov    rdi,QWORD PTR [rbx]
  4050f8:	test   rdi,rdi
  4050fb:	jne    4050b0 <flatcc_builder_custom_reset@@Base+0x20>
  4050fd:	cmp    QWORD PTR [rbx+0x8],0x0
  405102:	je     4050ea <flatcc_builder_custom_reset@@Base+0x5a>
  405104:	lea    rcx,[rip+0x8d15]        # 40de20 <g_data@@Base+0xd60>
  40510b:	mov    edx,0x1b2
  405110:	lea    rsi,[rip+0x8231]        # 40d348 <g_data@@Base+0x288>
  405117:	lea    rdi,[rip+0x85d1]        # 40d6ef <g_data@@Base+0x62f>
  40511e:	call   403140 <__assert_fail@plt>
  405123:	nop    DWORD PTR [rax+rax*1+0x0]
  405128:	mov    edx,DWORD PTR [r12+0xe4]
  405130:	mov    DWORD PTR [r12+0xe0],0x0
  40513c:	test   edx,edx
  40513e:	je     40514c <flatcc_builder_custom_reset@@Base+0xbc>
  405140:	mov    DWORD PTR [r12+0xe4],0x10
  40514c:	xor    eax,eax
  40514e:	mov    WORD PTR [r12+0xe8],ax
  405157:	mov    rax,QWORD PTR [r12+0x68]
  40515c:	mov    QWORD PTR [r12+0xf0],0x0
  405168:	mov    QWORD PTR [r12+0x18],rax
  40516d:	mov    rax,QWORD PTR [r12+0x88]
  405175:	mov    QWORD PTR [r12+0x20],0x0
  40517e:	mov    QWORD PTR [r12],rax
  405182:	mov    rax,QWORD PTR [r12+0x58]
  405187:	mov    QWORD PTR [r12+0xfc],0x0
  405193:	mov    QWORD PTR [r12+0x104],0x0
  40519f:	mov    QWORD PTR [r12+0x8],rax
  4051a4:	mov    QWORD PTR [r12+0x30],0x0
  4051ad:	test   r14d,r14d
  4051b0:	jne    4051d0 <flatcc_builder_custom_reset@@Base+0x140>
  4051b2:	mov    eax,DWORD PTR [r12+0x128]
  4051ba:	test   eax,eax
  4051bc:	jne    4051f4 <flatcc_builder_custom_reset@@Base+0x164>
  4051be:	pop    rbx
  4051bf:	pop    rbp
  4051c0:	pop    r12
  4051c2:	pop    r13
  4051c4:	pop    r14
  4051c6:	ret    
  4051c7:	nop    WORD PTR [rax+rax*1+0x0]
  4051d0:	mov    eax,DWORD PTR [r12+0x128]
  4051d8:	mov    QWORD PTR [r12+0x118],0x0
  4051e4:	mov    QWORD PTR [r12+0x120],0x0
  4051f0:	test   eax,eax
  4051f2:	je     4051be <flatcc_builder_custom_reset@@Base+0x12e>
  4051f4:	lea    rdi,[r12+0x130]
  4051fc:	call   408910 <flatcc_emitter_reset@@Base>
  405201:	pop    rbx
  405202:	pop    rbp
  405203:	pop    r12
  405205:	pop    r13
  405207:	xor    eax,eax
  405209:	pop    r14
  40520b:	ret    
  40520c:	nop    DWORD PTR [rax+0x0]
  405210:	pop    rbx
  405211:	pop    rbp
  405212:	pop    r12
  405214:	pop    r13
  405216:	mov    eax,0xffffffff
  40521b:	pop    r14
  40521d:	ret    
  40521e:	xchg   ax,ax

0000000000405220 <flatcc_builder_reset@@Base>:
  405220:	endbr64 
  405224:	xor    edx,edx
  405226:	xor    esi,esi
  405228:	jmp    405090 <flatcc_builder_custom_reset@@Base>
  40522d:	nop    DWORD PTR [rax]

0000000000405230 <flatcc_builder_clear@@Base>:
  405230:	endbr64 
  405234:	push   r12
  405236:	lea    r12,[rdi+0x58]
  40523a:	push   rbp
  40523b:	xor    ebp,ebp
  40523d:	push   rbx
  40523e:	mov    rbx,rdi
  405241:	nop    DWORD PTR [rax+0x0]
  405248:	mov    rdi,QWORD PTR [rbx+0x40]
  40524c:	mov    r8d,ebp
  40524f:	mov    rsi,r12
  405252:	xor    ecx,ecx
  405254:	xor    edx,edx
  405256:	inc    ebp
  405258:	call   QWORD PTR [rbx+0x50]
  40525b:	add    r12,0x10
  40525f:	cmp    ebp,0x8
  405262:	jne    405248 <flatcc_builder_clear@@Base+0x18>
  405264:	mov    eax,DWORD PTR [rbx+0x128]
  40526a:	test   eax,eax
  40526c:	jne    4052a0 <flatcc_builder_clear@@Base+0x70>
  40526e:	lea    rdi,[rbx+0x8]
  405272:	and    rdi,0xfffffffffffffff8
  405276:	mov    QWORD PTR [rbx],0x0
  40527d:	mov    QWORD PTR [rbx+0x180],0x0
  405288:	sub    rbx,rdi
  40528b:	lea    ecx,[rbx+0x188]
  405291:	shr    ecx,0x3
  405294:	xor    eax,eax
  405296:	rep stos QWORD PTR es:[rdi],rax
  405299:	pop    rbx
  40529a:	pop    rbp
  40529b:	pop    r12
  40529d:	ret    
  40529e:	xchg   ax,ax
  4052a0:	lea    rdi,[rbx+0x130]
  4052a7:	call   408a00 <flatcc_emitter_clear@@Base>
  4052ac:	jmp    40526e <flatcc_builder_clear@@Base+0x3e>
  4052ae:	xchg   ax,ax

00000000004052b0 <flatcc_builder_enter_user_frame_ptr@@Base>:
  4052b0:	endbr64 
  4052b4:	push   r12
  4052b6:	push   rbp
  4052b7:	lea    rbp,[rsi+0x7]
  4052bb:	and    rbp,0xfffffffffffffff8
  4052bf:	push   rbx
  4052c0:	add    rbp,0x8
  4052c4:	mov    rbx,rdi
  4052c7:	mov    r12,QWORD PTR [rdi+0x180]
  4052ce:	lea    rdx,[r12+rbp*1]
  4052d2:	cmp    rdx,QWORD PTR [rdi+0xd0]
  4052d9:	jbe    4052f5 <flatcc_builder_enter_user_frame_ptr@@Base+0x45>
  4052db:	lea    rsi,[rdi+0xc8]
  4052e2:	mov    rdi,QWORD PTR [rdi+0x40]
  4052e6:	xor    ecx,ecx
  4052e8:	mov    r8d,0x7
  4052ee:	call   QWORD PTR [rbx+0x50]
  4052f1:	test   eax,eax
  4052f3:	jne    405347 <flatcc_builder_enter_user_frame_ptr@@Base+0x97>
  4052f5:	add    r12,QWORD PTR [rbx+0xc8]
  4052fc:	je     405340 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
  4052fe:	mov    rdx,rbp
  405301:	mov    rdi,r12
  405304:	xor    esi,esi
  405306:	call   403150 <memset@plt>
  40530b:	mov    rdx,QWORD PTR [rbx+0x178]
  405312:	lea    rax,[r12+0x8]
  405317:	mov    QWORD PTR [r12],rdx
  40531b:	mov    rdx,QWORD PTR [rbx+0x180]
  405322:	add    rbp,rdx
  405325:	lea    rcx,[rdx+0x8]
  405329:	mov    QWORD PTR [rbx+0x180],rbp
  405330:	mov    QWORD PTR [rbx+0x178],rcx
  405337:	pop    rbx
  405338:	pop    rbp
  405339:	pop    r12
  40533b:	ret    
  40533c:	nop    DWORD PTR [rax+0x0]
  405340:	pop    rbx
  405341:	pop    rbp
  405342:	xor    eax,eax
  405344:	pop    r12
  405346:	ret    
  405347:	call   404a60 <flatcc_builder_default_alloc@@Base+0x130>
  40534c:	nop    DWORD PTR [rax+0x0]

0000000000405350 <flatcc_builder_enter_user_frame@@Base>:
  405350:	endbr64 
  405354:	push   r12
  405356:	push   rbp
  405357:	mov    rbp,rdi
  40535a:	push   rbx
  40535b:	lea    rbx,[rsi+0x7]
  40535f:	and    rbx,0xfffffffffffffff8
  405363:	mov    r12,QWORD PTR [rdi+0x180]
  40536a:	add    rbx,0x8
  40536e:	lea    rdx,[r12+rbx*1]
  405372:	cmp    rdx,QWORD PTR [rdi+0xd0]
  405379:	jbe    405395 <flatcc_builder_enter_user_frame@@Base+0x45>
  40537b:	lea    rsi,[rdi+0xc8]
  405382:	mov    rdi,QWORD PTR [rdi+0x40]
  405386:	xor    ecx,ecx
  405388:	mov    r8d,0x7
  40538e:	call   QWORD PTR [rbp+0x50]
  405391:	test   eax,eax
  405393:	jne    4053da <flatcc_builder_enter_user_frame@@Base+0x8a>
  405395:	add    r12,QWORD PTR [rbp+0xc8]
  40539c:	je     4053d2 <flatcc_builder_enter_user_frame@@Base+0x82>
  40539e:	mov    rdx,rbx
  4053a1:	mov    rdi,r12
  4053a4:	xor    esi,esi
  4053a6:	call   403150 <memset@plt>
  4053ab:	mov    rax,QWORD PTR [rbp+0x178]
  4053b2:	mov    QWORD PTR [r12],rax
  4053b6:	mov    rax,QWORD PTR [rbp+0x180]
  4053bd:	lea    r12,[rax+0x8]
  4053c1:	add    rbx,rax
  4053c4:	mov    QWORD PTR [rbp+0x178],r12
  4053cb:	mov    QWORD PTR [rbp+0x180],rbx
  4053d2:	pop    rbx
  4053d3:	pop    rbp
  4053d4:	mov    rax,r12
  4053d7:	pop    r12
  4053d9:	ret    
  4053da:	call   404a60 <flatcc_builder_default_alloc@@Base+0x130>
  4053df:	nop

00000000004053e0 <flatcc_builder_exit_user_frame@@Base>:
  4053e0:	endbr64 
  4053e4:	mov    rax,QWORD PTR [rdi+0x178]
  4053eb:	test   rax,rax
  4053ee:	je     405410 <flatcc_builder_exit_user_frame@@Base+0x30>
  4053f0:	mov    edx,eax
  4053f2:	sub    rax,0x8
  4053f6:	mov    QWORD PTR [rdi+0x180],rax
  4053fd:	add    rdx,QWORD PTR [rdi+0xc8]
  405404:	mov    rax,QWORD PTR [rdx-0x8]
  405408:	mov    QWORD PTR [rdi+0x178],rax
  40540f:	ret    
  405410:	push   rax
  405411:	lea    rcx,[rip+0x89d8]        # 40ddf0 <g_data@@Base+0xd30>
  405418:	mov    edx,0x21e
  40541d:	lea    rsi,[rip+0x7f24]        # 40d348 <g_data@@Base+0x288>
  405424:	lea    rdi,[rip+0x82d6]        # 40d701 <g_data@@Base+0x641>
  40542b:	call   403140 <__assert_fail@plt>

0000000000405430 <flatcc_builder_exit_user_frame_at@@Base>:
  405430:	endbr64 
  405434:	cmp    QWORD PTR [rdi+0x178],rsi
  40543b:	jb     405449 <flatcc_builder_exit_user_frame_at@@Base+0x19>
  40543d:	mov    QWORD PTR [rdi+0x178],rsi
  405444:	jmp    4053e0 <flatcc_builder_exit_user_frame@@Base>
  405449:	push   rax
  40544a:	lea    rcx,[rip+0x896f]        # 40ddc0 <g_data@@Base+0xd00>
  405451:	mov    edx,0x227
  405456:	lea    rsi,[rip+0x7eeb]        # 40d348 <g_data@@Base+0x288>
  40545d:	lea    rdi,[rip+0x7f44]        # 40d3a8 <g_data@@Base+0x2e8>
  405464:	call   403140 <__assert_fail@plt>
  405469:	nop    DWORD PTR [rax+0x0]

0000000000405470 <flatcc_builder_get_current_user_frame@@Base>:
  405470:	endbr64 
  405474:	mov    rax,QWORD PTR [rdi+0x178]
  40547b:	ret    
  40547c:	nop    DWORD PTR [rax+0x0]

0000000000405480 <flatcc_builder_get_user_frame_ptr@@Base>:
  405480:	endbr64 
  405484:	mov    eax,esi
  405486:	add    rax,QWORD PTR [rdi+0xc8]
  40548d:	ret    
  40548e:	xchg   ax,ax

0000000000405490 <flatcc_builder_embed_buffer@@Base>:
  405490:	endbr64 
  405494:	push   r13
  405496:	mov    r13d,r9d
  405499:	push   r12
  40549b:	mov    r12,rcx
  40549e:	push   rbp
  40549f:	mov    rbp,rdx
  4054a2:	movzx  edx,si
  4054a5:	push   rbx
  4054a6:	mov    rbx,rdi
  4054a9:	sub    rsp,0xc8
  4054b0:	mov    WORD PTR [rsp+0xc],r8w
  4054b6:	mov    r8d,DWORD PTR [rdi+0x100]
  4054bd:	mov    rax,QWORD PTR fs:0x28
  4054c6:	mov    QWORD PTR [rsp+0xb8],rax
  4054ce:	xor    eax,eax
  4054d0:	test   r8d,r8d
  4054d3:	setne  cl
  4054d6:	lea    rax,[rsp+0xc]
  4054db:	movzx  ecx,cl
  4054de:	mov    rsi,rax
  4054e1:	call   404ac0 <flatcc_builder_default_alloc@@Base+0x190>
  4054e6:	test   eax,eax
  4054e8:	jne    405620 <flatcc_builder_embed_buffer@@Base+0x190>
  4054ee:	mov    edx,DWORD PTR [rbx+0xf0]
  4054f4:	xor    esi,esi
  4054f6:	and    r13d,0x2
  4054fa:	setne  sil
  4054fe:	movzx  ecx,WORD PTR [rsp+0xc]
  405503:	mov    eax,edx
  405505:	shl    esi,0x2
  405508:	sub    eax,r12d
  40550b:	dec    ecx
  40550d:	sub    eax,esi
  40550f:	and    eax,ecx
  405511:	lea    ecx,[rax+r12*1]
  405515:	mov    DWORD PTR [rsp+0x1c],ecx
  405519:	mov    ecx,DWORD PTR [rbx+0x100]
  40551f:	mov    QWORD PTR [rsp+0x20],0x0
  405528:	mov    DWORD PTR [rsp+0x28],0x0
  405530:	xor    r8d,r8d
  405533:	test   ecx,ecx
  405535:	je     405561 <flatcc_builder_embed_buffer@@Base+0xd1>
  405537:	lea    rcx,[rsp+0x1c]
  40553c:	mov    QWORD PTR [rsp+0x20],0x4
  405545:	mov    QWORD PTR [rsp+0x30],rcx
  40554a:	mov    QWORD PTR [rsp+0x38],0x4
  405553:	mov    DWORD PTR [rsp+0x28],0x1
  40555b:	mov    r8d,0x4
  405561:	test   r12,r12
  405564:	je     40558a <flatcc_builder_embed_buffer@@Base+0xfa>
  405566:	movsxd rsi,DWORD PTR [rsp+0x28]
  40556b:	add    r8,r12
  40556e:	mov    rcx,rsi
  405571:	inc    ecx
  405573:	shl    rsi,0x4
  405577:	mov    QWORD PTR [rsp+0x20],r8
  40557c:	mov    QWORD PTR [rsp+rsi*1+0x30],rbp
  405581:	mov    QWORD PTR [rsp+rsi*1+0x38],r12
  405586:	mov    DWORD PTR [rsp+0x28],ecx
  40558a:	test   eax,eax
  40558c:	jne    4055f0 <flatcc_builder_embed_buffer@@Base+0x160>
  40558e:	mov    ebp,edx
  405590:	sub    ebp,r8d
  405593:	cmp    edx,ebp
  405595:	jle    405624 <flatcc_builder_embed_buffer@@Base+0x194>
  40559b:	movabs rax,0x10000000f
  4055a5:	cmp    r8,rax
  4055a8:	ja     405624 <flatcc_builder_embed_buffer@@Base+0x194>
  4055aa:	mov    rdi,QWORD PTR [rbx+0x38]
  4055ae:	mov    edx,DWORD PTR [rsp+0x28]
  4055b2:	lea    rsi,[rsp+0x30]
  4055b7:	mov    ecx,ebp
  4055b9:	call   QWORD PTR [rbx+0x48]
  4055bc:	test   eax,eax
  4055be:	jne    405648 <flatcc_builder_embed_buffer@@Base+0x1b8>
  4055c4:	mov    DWORD PTR [rbx+0xf0],ebp
  4055ca:	mov    rdi,QWORD PTR [rsp+0xb8]
  4055d2:	xor    rdi,QWORD PTR fs:0x28
  4055db:	mov    eax,ebp
  4055dd:	jne    405643 <flatcc_builder_embed_buffer@@Base+0x1b3>
  4055df:	add    rsp,0xc8
  4055e6:	pop    rbx
  4055e7:	pop    rbp
  4055e8:	pop    r12
  4055ea:	pop    r13
  4055ec:	ret    
  4055ed:	nop    DWORD PTR [rax]
  4055f0:	movsxd rsi,DWORD PTR [rsp+0x28]
  4055f5:	mov    rdi,0x40de40
  4055fc:	mov    rcx,rsi
  4055ff:	add    r8,rax
  405602:	shl    rsi,0x4
  405606:	inc    ecx
  405608:	mov    QWORD PTR [rsp+0x20],r8
  40560d:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  405612:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  405617:	mov    DWORD PTR [rsp+0x28],ecx
  40561b:	jmp    40558e <flatcc_builder_embed_buffer@@Base+0xfe>
  405620:	xor    ebp,ebp
  405622:	jmp    4055ca <flatcc_builder_embed_buffer@@Base+0x13a>
  405624:	lea    rcx,[rip+0x8765]        # 40dd90 <g_data@@Base+0xcd0>
  40562b:	mov    edx,0x287
  405630:	lea    rsi,[rip+0x7d11]        # 40d348 <g_data@@Base+0x288>
  405637:	lea    rdi,[rip+0x80a1]        # 40d6df <g_data@@Base+0x61f>
  40563e:	call   403140 <__assert_fail@plt>
  405643:	call   403130 <__stack_chk_fail@plt>
  405648:	call   404c00 <flatcc_builder_default_alloc@@Base+0x2d0>
  40564d:	nop    DWORD PTR [rax]

0000000000405650 <flatcc_builder_create_buffer@@Base>:
  405650:	endbr64 
  405654:	push   r14
  405656:	movzx  edx,dx
  405659:	mov    r14,rsi
  40565c:	push   r13
  40565e:	mov    r13d,r9d
  405661:	push   r12
  405663:	mov    r12d,r9d
  405666:	and    r12d,0x1
  40566a:	push   rbp
  40566b:	mov    rbp,rdi
  40566e:	push   rbx
  40566f:	mov    ebx,ecx
  405671:	mov    ecx,r12d
  405674:	sub    rsp,0xc0
  40567b:	mov    WORD PTR [rsp+0xc],r8w
  405681:	lea    rsi,[rsp+0xc]
  405686:	mov    rax,QWORD PTR fs:0x28
  40568f:	mov    QWORD PTR [rsp+0xb8],rax
  405697:	xor    eax,eax
  405699:	mov    DWORD PTR [rsp+0x1c],0x0
  4056a1:	call   404ac0 <flatcc_builder_default_alloc@@Base+0x190>
  4056a6:	test   eax,eax
  4056a8:	jne    405848 <flatcc_builder_create_buffer@@Base+0x1f8>
  4056ae:	movzx  esi,WORD PTR [rsp+0xc]
  4056b3:	cmp    si,WORD PTR [rbp+0xe8]
  4056ba:	jbe    4056c3 <flatcc_builder_create_buffer@@Base+0x73>
  4056bc:	mov    WORD PTR [rbp+0xe8],si
  4056c3:	mov    edx,DWORD PTR [rsp+0x1c]
  4056c7:	test   r14,r14
  4056ca:	je     4056d3 <flatcc_builder_create_buffer@@Base+0x83>
  4056cc:	mov    edx,DWORD PTR [r14]
  4056cf:	mov    DWORD PTR [rsp+0x1c],edx
  4056d3:	test   edx,edx
  4056d5:	mov    eax,0x4
  4056da:	mov    ecx,DWORD PTR [rbp+0xf0]
  4056e0:	cmovne rdx,rax
  4056e4:	xor    edi,edi
  4056e6:	test   r13b,0x2
  4056ea:	setne  dil
  4056ee:	lea    eax,[rcx-0x4]
  4056f1:	shl    edi,0x2
  4056f4:	sub    eax,edx
  4056f6:	sub    eax,edi
  4056f8:	dec    esi
  4056fa:	and    eax,esi
  4056fc:	and    r13d,0x3
  405700:	jne    405818 <flatcc_builder_create_buffer@@Base+0x1c8>
  405706:	xor    r9d,r9d
  405709:	mov    esi,0x1
  40570e:	mov    r8d,0x4
  405714:	movsxd rdi,r9d
  405717:	shl    rdi,0x4
  40571b:	lea    r10,[rsp+0x14]
  405720:	mov    QWORD PTR [rsp+0x20],r8
  405725:	mov    QWORD PTR [rsp+rdi*1+0x30],r10
  40572a:	mov    QWORD PTR [rsp+rdi*1+0x38],0x4
  405733:	mov    DWORD PTR [rsp+0x28],esi
  405737:	test   edx,edx
  405739:	je     40575f <flatcc_builder_create_buffer@@Base+0x10f>
  40573b:	shl    rsi,0x4
  40573f:	add    r8,rdx
  405742:	lea    rdi,[rsp+0x1c]
  405747:	add    r9d,0x2
  40574b:	mov    QWORD PTR [rsp+0x20],r8
  405750:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  405755:	mov    QWORD PTR [rsp+rsi*1+0x38],rdx
  40575a:	mov    DWORD PTR [rsp+0x28],r9d
  40575f:	test   eax,eax
  405761:	je     40578e <flatcc_builder_create_buffer@@Base+0x13e>
  405763:	movsxd rsi,DWORD PTR [rsp+0x28]
  405768:	mov    rdi,0x40de40
  40576f:	mov    rdx,rsi
  405772:	add    r8,rax
  405775:	shl    rsi,0x4
  405779:	inc    edx
  40577b:	mov    QWORD PTR [rsp+0x20],r8
  405780:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  405785:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  40578a:	mov    DWORD PTR [rsp+0x28],edx
  40578e:	mov    eax,ecx
  405790:	sub    eax,r8d
  405793:	lea    edx,[rax+0x4]
  405796:	test   r13d,r13d
  405799:	cmovne eax,edx
  40579c:	test   r12d,r12d
  40579f:	je     405850 <flatcc_builder_create_buffer@@Base+0x200>
  4057a5:	mov    edx,DWORD PTR [rbp+0xf8]
  4057ab:	sub    edx,eax
  4057ad:	sub    ebx,eax
  4057af:	mov    DWORD PTR [rsp+0x14],ebx
  4057b3:	mov    ebx,ecx
  4057b5:	sub    ebx,r8d
  4057b8:	mov    DWORD PTR [rsp+0x18],edx
  4057bc:	cmp    ecx,ebx
  4057be:	jle    40585d <flatcc_builder_create_buffer@@Base+0x20d>
  4057c4:	mov    rdi,QWORD PTR [rbp+0x38]
  4057c8:	mov    edx,DWORD PTR [rsp+0x28]
  4057cc:	lea    rsi,[rsp+0x30]
  4057d1:	mov    ecx,ebx
  4057d3:	call   QWORD PTR [rbp+0x48]
  4057d6:	test   eax,eax
  4057d8:	jne    405881 <flatcc_builder_create_buffer@@Base+0x231>
  4057de:	mov    DWORD PTR [rbp+0xf0],ebx
  4057e4:	test   ebx,ebx
  4057e6:	je     405886 <flatcc_builder_create_buffer@@Base+0x236>
  4057ec:	mov    rcx,QWORD PTR [rsp+0xb8]
  4057f4:	xor    rcx,QWORD PTR fs:0x28
  4057fd:	mov    eax,ebx
  4057ff:	jne    40587c <flatcc_builder_create_buffer@@Base+0x22c>
  405801:	add    rsp,0xc0
  405808:	pop    rbx
  405809:	pop    rbp
  40580a:	pop    r12
  40580c:	pop    r13
  40580e:	pop    r14
  405810:	ret    
  405811:	nop    DWORD PTR [rax+0x0]
  405818:	lea    rsi,[rsp+0x18]
  40581d:	mov    QWORD PTR [rsp+0x30],rsi
  405822:	mov    QWORD PTR [rsp+0x38],0x4
  40582b:	mov    esi,0x2
  405830:	mov    r9d,0x1
  405836:	mov    r8d,0x8
  40583c:	jmp    405714 <flatcc_builder_create_buffer@@Base+0xc4>
  405841:	nop    DWORD PTR [rax+0x0]
  405848:	xor    ebx,ebx
  40584a:	jmp    4057ec <flatcc_builder_create_buffer@@Base+0x19c>
  40584c:	nop    DWORD PTR [rax+0x0]
  405850:	mov    edx,DWORD PTR [rbp+0xf4]
  405856:	sub    edx,eax
  405858:	jmp    4057ad <flatcc_builder_create_buffer@@Base+0x15d>
  40585d:	lea    rcx,[rip+0x852c]        # 40dd90 <g_data@@Base+0xcd0>
  405864:	mov    edx,0x287
  405869:	lea    rsi,[rip+0x7ad8]        # 40d348 <g_data@@Base+0x288>
  405870:	lea    rdi,[rip+0x7e68]        # 40d6df <g_data@@Base+0x61f>
  405877:	call   403140 <__assert_fail@plt>
  40587c:	call   403130 <__stack_chk_fail@plt>
  405881:	call   404c00 <flatcc_builder_default_alloc@@Base+0x2d0>
  405886:	lea    rcx,[rip+0x84e3]        # 40dd70 <g_data@@Base+0xcb0>
  40588d:	mov    edx,0x304
  405892:	lea    rsi,[rip+0x7aaf]        # 40d348 <g_data@@Base+0x288>
  405899:	lea    rdi,[rip+0x7e3f]        # 40d6df <g_data@@Base+0x61f>
  4058a0:	call   403140 <__assert_fail@plt>
  4058a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004058b0 <flatcc_builder_create_struct@@Base>:
  4058b0:	endbr64 
  4058b4:	push   rbp
  4058b5:	push   rbx
  4058b6:	sub    rsp,0xa8
  4058bd:	mov    rax,QWORD PTR fs:0x28
  4058c6:	mov    QWORD PTR [rsp+0x98],rax
  4058ce:	xor    eax,eax
  4058d0:	test   cx,cx
  4058d3:	je     4059f3 <flatcc_builder_create_struct@@Base+0x143>
  4058d9:	mov    r8,rdx
  4058dc:	mov    rbx,rdi
  4058df:	movzx  edx,cx
  4058e2:	cmp    cx,WORD PTR [rdi+0xe8]
  4058e9:	jbe    4058f2 <flatcc_builder_create_struct@@Base+0x42>
  4058eb:	mov    WORD PTR [rdi+0xe8],cx
  4058f2:	mov    ecx,DWORD PTR [rbx+0xf0]
  4058f8:	dec    edx
  4058fa:	mov    eax,ecx
  4058fc:	sub    eax,r8d
  4058ff:	and    eax,edx
  405901:	mov    edx,eax
  405903:	mov    QWORD PTR [rsp],0x0
  40590b:	mov    DWORD PTR [rsp+0x8],0x0
  405913:	test   r8,r8
  405916:	jne    4059a8 <flatcc_builder_create_struct@@Base+0xf8>
  40591c:	test   eax,eax
  40591e:	je     4059d4 <flatcc_builder_create_struct@@Base+0x124>
  405924:	mov    r8,rdx
  405927:	mov    esi,0x1
  40592c:	xor    eax,eax
  40592e:	mov    rdi,0x40de40
  405935:	shl    rax,0x4
  405939:	mov    QWORD PTR [rsp],r8
  40593d:	mov    QWORD PTR [rsp+rax*1+0x10],rdi
  405942:	mov    QWORD PTR [rsp+rax*1+0x18],rdx
  405947:	mov    DWORD PTR [rsp+0x8],esi
  40594b:	mov    ebp,ecx
  40594d:	movabs rax,0x10000000f
  405957:	sub    ebp,r8d
  40595a:	cmp    r8,rax
  40595d:	ja     4059d4 <flatcc_builder_create_struct@@Base+0x124>
  40595f:	cmp    ecx,ebp
  405961:	jle    4059d4 <flatcc_builder_create_struct@@Base+0x124>
  405963:	mov    rdi,QWORD PTR [rbx+0x38]
  405967:	mov    edx,DWORD PTR [rsp+0x8]
  40596b:	lea    rsi,[rsp+0x10]
  405970:	mov    ecx,ebp
  405972:	call   QWORD PTR [rbx+0x48]
  405975:	test   eax,eax
  405977:	jne    405a12 <flatcc_builder_create_struct@@Base+0x162>
  40597d:	mov    DWORD PTR [rbx+0xf0],ebp
  405983:	mov    eax,ebp
  405985:	mov    rdi,QWORD PTR [rsp+0x98]
  40598d:	xor    rdi,QWORD PTR fs:0x28
  405996:	jne    405a17 <flatcc_builder_create_struct@@Base+0x167>
  405998:	add    rsp,0xa8
  40599f:	pop    rbx
  4059a0:	pop    rbp
  4059a1:	ret    
  4059a2:	nop    WORD PTR [rax+rax*1+0x0]
  4059a8:	mov    QWORD PTR [rsp],r8
  4059ac:	mov    QWORD PTR [rsp+0x10],rsi
  4059b1:	mov    QWORD PTR [rsp+0x18],r8
  4059b6:	mov    DWORD PTR [rsp+0x8],0x1
  4059be:	test   eax,eax
  4059c0:	je     40594b <flatcc_builder_create_struct@@Base+0x9b>
  4059c2:	add    r8,rdx
  4059c5:	mov    esi,0x2
  4059ca:	mov    eax,0x1
  4059cf:	jmp    40592e <flatcc_builder_create_struct@@Base+0x7e>
  4059d4:	lea    rcx,[rip+0x83b5]        # 40dd90 <g_data@@Base+0xcd0>
  4059db:	mov    edx,0x287
  4059e0:	lea    rsi,[rip+0x7961]        # 40d348 <g_data@@Base+0x288>
  4059e7:	lea    rdi,[rip+0x7cf1]        # 40d6df <g_data@@Base+0x61f>
  4059ee:	call   403140 <__assert_fail@plt>
  4059f3:	lea    rcx,[rip+0x8356]        # 40dd50 <g_data@@Base+0xc90>
  4059fa:	mov    edx,0x30f
  4059ff:	lea    rsi,[rip+0x7942]        # 40d348 <g_data@@Base+0x288>
  405a06:	lea    rdi,[rip+0x7d0d]        # 40d71a <g_data@@Base+0x65a>
  405a0d:	call   403140 <__assert_fail@plt>
  405a12:	call   404c00 <flatcc_builder_default_alloc@@Base+0x2d0>
  405a17:	call   403130 <__stack_chk_fail@plt>
  405a1c:	nop    DWORD PTR [rax+0x0]

0000000000405a20 <flatcc_builder_start_buffer@@Base>:
  405a20:	endbr64 
  405a24:	push   r13
  405a26:	mov    r13d,edx
  405a29:	push   r12
  405a2b:	mov    r12d,ecx
  405a2e:	push   rbp
  405a2f:	mov    rbp,rsi
  405a32:	push   rbx
  405a33:	mov    rbx,rdi
  405a36:	sub    rsp,0x8
  405a3a:	movzx  esi,WORD PTR [rdi+0xe8]
  405a41:	call   404c60 <flatcc_builder_default_alloc@@Base+0x330>
  405a46:	test   eax,eax
  405a48:	jne    405af8 <flatcc_builder_start_buffer@@Base+0xd8>
  405a4e:	movzx  edx,WORD PTR [rbx+0xec]
  405a55:	mov    rsi,QWORD PTR [rbx+0x30]
  405a59:	mov    ecx,0x1
  405a5e:	mov    WORD PTR [rbx+0xe8],cx
  405a65:	mov    WORD PTR [rsi+0x22],dx
  405a69:	movzx  edx,WORD PTR [rbx+0x10c]
  405a70:	mov    WORD PTR [rbx+0xec],r13w
  405a78:	mov    WORD PTR [rsi+0x20],dx
  405a7c:	mov    edx,DWORD PTR [rbx+0xf8]
  405a82:	mov    WORD PTR [rbx+0x10c],r12w
  405a8a:	mov    DWORD PTR [rsi+0x14],edx
  405a8d:	mov    edx,DWORD PTR [rbx+0x100]
  405a93:	mov    DWORD PTR [rsi+0x1c],edx
  405a96:	mov    edx,DWORD PTR [rbx+0xf0]
  405a9c:	mov    DWORD PTR [rbx+0xf8],edx
  405aa2:	mov    edx,DWORD PTR [rbx+0xfc]
  405aa8:	lea    ecx,[rdx+0x1]
  405aab:	mov    DWORD PTR [rbx+0x100],edx
  405ab1:	mov    edx,DWORD PTR [rbx+0x110]
  405ab7:	mov    DWORD PTR [rbx+0xfc],ecx
  405abd:	mov    DWORD PTR [rsi+0x10],edx
  405ac0:	test   rbp,rbp
  405ac3:	je     405ae8 <flatcc_builder_start_buffer@@Base+0xc8>
  405ac5:	mov    edx,DWORD PTR [rbp+0x0]
  405ac8:	mov    DWORD PTR [rbx+0x110],edx
  405ace:	mov    edx,0x1
  405ad3:	mov    WORD PTR [rsi+0xe],dx
  405ad7:	add    rsp,0x8
  405adb:	pop    rbx
  405adc:	pop    rbp
  405add:	pop    r12
  405adf:	pop    r13
  405ae1:	ret    
  405ae2:	nop    WORD PTR [rax+rax*1+0x0]
  405ae8:	mov    rbp,0x40de40
  405aef:	jmp    405ac5 <flatcc_builder_start_buffer@@Base+0xa5>
  405af1:	nop    DWORD PTR [rax+0x0]
  405af8:	mov    eax,0xffffffff
  405afd:	jmp    405ad7 <flatcc_builder_start_buffer@@Base+0xb7>
  405aff:	nop

0000000000405b00 <flatcc_builder_end_buffer@@Base>:
  405b00:	endbr64 
  405b04:	push   rbp
  405b05:	xor    eax,eax
  405b07:	push   rbx
  405b08:	sub    rsp,0x8
  405b0c:	movzx  r9d,WORD PTR [rdi+0x10c]
  405b14:	mov    edx,DWORD PTR [rdi+0x100]
  405b1a:	and    r9d,0x2
  405b1e:	test   edx,edx
  405b20:	setne  al
  405b23:	movzx  r9d,r9w
  405b27:	or     r9d,eax
  405b2a:	mov    rax,QWORD PTR [rdi+0x30]
  405b2e:	cmp    WORD PTR [rax+0xe],0x1
  405b33:	jne    405c24 <flatcc_builder_end_buffer@@Base+0x124>
  405b39:	movzx  edx,WORD PTR [rdi+0xec]
  405b40:	movzx  eax,WORD PTR [rdi+0xe8]
  405b47:	mov    rbx,rdi
  405b4a:	mov    ecx,esi
  405b4c:	mov    r8d,edx
  405b4f:	cmp    dx,ax
  405b52:	ja     405c18 <flatcc_builder_end_buffer@@Base+0x118>
  405b58:	movzx  r8d,ax
  405b5c:	lea    rsi,[rbx+0x110]
  405b63:	mov    rdi,rbx
  405b66:	call   405650 <flatcc_builder_create_buffer@@Base>
  405b6b:	mov    ebp,eax
  405b6d:	test   eax,eax
  405b6f:	je     405c0c <flatcc_builder_end_buffer@@Base+0x10c>
  405b75:	mov    rax,QWORD PTR [rbx+0x30]
  405b79:	mov    rdi,QWORD PTR [rbx+0x18]
  405b7d:	mov    edx,DWORD PTR [rax+0x14]
  405b80:	xor    esi,esi
  405b82:	mov    DWORD PTR [rbx+0xf8],edx
  405b88:	mov    edx,DWORD PTR [rax+0x1c]
  405b8b:	mov    DWORD PTR [rbx+0x100],edx
  405b91:	mov    edx,DWORD PTR [rax+0x10]
  405b94:	movzx  eax,WORD PTR [rax+0x20]
  405b98:	mov    DWORD PTR [rbx+0x110],edx
  405b9e:	mov    WORD PTR [rbx+0x10c],ax
  405ba5:	mov    edx,DWORD PTR [rbx+0x20]
  405ba8:	call   403150 <memset@plt>
  405bad:	mov    rax,QWORD PTR [rbx+0x30]
  405bb1:	mov    edi,DWORD PTR [rbx+0x70]
  405bb4:	mov    edx,DWORD PTR [rax+0x8]
  405bb7:	mov    esi,DWORD PTR [rax]
  405bb9:	mov    ecx,DWORD PTR [rax+0x4]
  405bbc:	mov    DWORD PTR [rbx+0x20],edx
  405bbf:	mov    rdx,rsi
  405bc2:	sub    edi,edx
  405bc4:	mov    DWORD PTR [rbx+0x28],esi
  405bc7:	mov    edx,edi
  405bc9:	add    rsi,QWORD PTR [rbx+0x68]
  405bcd:	cmp    ecx,edi
  405bcf:	cmovb  edx,ecx
  405bd2:	mov    QWORD PTR [rbx+0x18],rsi
  405bd6:	mov    DWORD PTR [rbx+0x24],edx
  405bd9:	movzx  edx,WORD PTR [rbx+0xea]
  405be0:	mov    DWORD PTR [rax+0x4],ecx
  405be3:	cmp    dx,WORD PTR [rbx+0xe8]
  405bea:	jbe    405bf3 <flatcc_builder_end_buffer@@Base+0xf3>
  405bec:	mov    WORD PTR [rbx+0xe8],dx
  405bf3:	movzx  edx,WORD PTR [rax+0xc]
  405bf7:	sub    rax,0x24
  405bfb:	dec    DWORD PTR [rbx+0x104]
  405c01:	mov    WORD PTR [rbx+0xea],dx
  405c08:	mov    QWORD PTR [rbx+0x30],rax
  405c0c:	add    rsp,0x8
  405c10:	pop    rbx
  405c11:	mov    eax,ebp
  405c13:	pop    rbp
  405c14:	ret    
  405c15:	nop    DWORD PTR [rax]
  405c18:	mov    WORD PTR [rbx+0xe8],dx
  405c1f:	jmp    405b5c <flatcc_builder_end_buffer@@Base+0x5c>
  405c24:	lea    rcx,[rip+0x8105]        # 40dd30 <g_data@@Base+0xc70>
  405c2b:	mov    edx,0x346
  405c30:	lea    rsi,[rip+0x7711]        # 40d348 <g_data@@Base+0x288>
  405c37:	lea    rdi,[rip+0x778a]        # 40d3c8 <g_data@@Base+0x308>
  405c3e:	call   403140 <__assert_fail@plt>
  405c43:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  405c4e:	xchg   ax,ax

0000000000405c50 <flatcc_builder_start_struct@@Base>:
  405c50:	endbr64 
  405c54:	push   r12
  405c56:	push   rbp
  405c57:	mov    rbp,rsi
  405c5a:	movzx  esi,dx
  405c5d:	push   rbx
  405c5e:	mov    rbx,rdi
  405c61:	call   404c60 <flatcc_builder_default_alloc@@Base+0x330>
  405c66:	test   eax,eax
  405c68:	jne    405cf0 <flatcc_builder_start_struct@@Base+0xa0>
  405c6e:	mov    rcx,QWORD PTR [rbx+0x30]
  405c72:	mov    eax,0x2
  405c77:	mov    WORD PTR [rcx+0xe],ax
  405c7b:	mov    eax,DWORD PTR [rbx+0x28]
  405c7e:	mov    edi,DWORD PTR [rbx+0x70]
  405c81:	mov    rdx,rax
  405c84:	sub    edi,edx
  405c86:	add    rax,QWORD PTR [rbx+0x68]
  405c8a:	mov    QWORD PTR [rbx+0x18],rax
  405c8e:	mov    edx,edi
  405c90:	cmp    edi,0xfffffffc
  405c93:	ja     405cc0 <flatcc_builder_start_struct@@Base+0x70>
  405c95:	mov    DWORD PTR [rbx+0x24],edi
  405c98:	mov    r12d,DWORD PTR [rbx+0x20]
  405c9c:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405ca3:	mov    rsi,r12
  405ca6:	add    esi,ebp
  405ca8:	mov    DWORD PTR [rbx+0x20],esi
  405cab:	cmp    esi,edx
  405cad:	jae    405cd0 <flatcc_builder_start_struct@@Base+0x80>
  405caf:	pop    rbx
  405cb0:	pop    rbp
  405cb1:	add    rax,r12
  405cb4:	pop    r12
  405cb6:	ret    
  405cb7:	nop    WORD PTR [rax+rax*1+0x0]
  405cc0:	mov    DWORD PTR [rbx+0x24],0xfffffffc
  405cc7:	mov    edx,0xfffffffc
  405ccc:	jmp    405c98 <flatcc_builder_start_struct@@Base+0x48>
  405cce:	xchg   ax,ax
  405cd0:	inc    esi
  405cd2:	mov    edx,0xfffffffc
  405cd7:	mov    rdi,rbx
  405cda:	call   4048d0 <test@@Base+0x1590>
  405cdf:	test   eax,eax
  405ce1:	jne    405cf0 <flatcc_builder_start_struct@@Base+0xa0>
  405ce3:	mov    rax,QWORD PTR [rbx+0x18]
  405ce7:	jmp    405caf <flatcc_builder_start_struct@@Base+0x5f>
  405ce9:	nop    DWORD PTR [rax+0x0]
  405cf0:	pop    rbx
  405cf1:	pop    rbp
  405cf2:	xor    eax,eax
  405cf4:	pop    r12
  405cf6:	ret    
  405cf7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405d00 <flatcc_builder_struct_edit@@Base>:
  405d00:	endbr64 
  405d04:	mov    rax,QWORD PTR [rdi+0x18]
  405d08:	ret    
  405d09:	nop    DWORD PTR [rax+0x0]

0000000000405d10 <flatcc_builder_end_struct@@Base>:
  405d10:	endbr64 
  405d14:	push   rbp
  405d15:	push   rbx
  405d16:	sub    rsp,0x8
  405d1a:	mov    rax,QWORD PTR [rdi+0x30]
  405d1e:	cmp    WORD PTR [rax+0xe],0x2
  405d23:	jne    405dc6 <flatcc_builder_end_struct@@Base+0xb6>
  405d29:	movzx  ecx,WORD PTR [rdi+0xea]
  405d30:	mov    edx,DWORD PTR [rdi+0x20]
  405d33:	mov    rsi,QWORD PTR [rdi+0x18]
  405d37:	mov    rbx,rdi
  405d3a:	call   4058b0 <flatcc_builder_create_struct@@Base>
  405d3f:	mov    ebp,eax
  405d41:	test   eax,eax
  405d43:	jne    405d50 <flatcc_builder_end_struct@@Base+0x40>
  405d45:	add    rsp,0x8
  405d49:	pop    rbx
  405d4a:	mov    eax,ebp
  405d4c:	pop    rbp
  405d4d:	ret    
  405d4e:	xchg   ax,ax
  405d50:	mov    edx,DWORD PTR [rbx+0x20]
  405d53:	mov    rdi,QWORD PTR [rbx+0x18]
  405d57:	xor    esi,esi
  405d59:	call   403150 <memset@plt>
  405d5e:	mov    rax,QWORD PTR [rbx+0x30]
  405d62:	mov    edi,DWORD PTR [rbx+0x70]
  405d65:	mov    edx,DWORD PTR [rax+0x8]
  405d68:	mov    esi,DWORD PTR [rax]
  405d6a:	mov    ecx,DWORD PTR [rax+0x4]
  405d6d:	mov    DWORD PTR [rbx+0x20],edx
  405d70:	mov    rdx,rsi
  405d73:	sub    edi,edx
  405d75:	mov    DWORD PTR [rbx+0x28],esi
  405d78:	mov    edx,edi
  405d7a:	add    rsi,QWORD PTR [rbx+0x68]
  405d7e:	cmp    ecx,edi
  405d80:	cmovb  edx,ecx
  405d83:	mov    QWORD PTR [rbx+0x18],rsi
  405d87:	mov    DWORD PTR [rbx+0x24],edx
  405d8a:	movzx  edx,WORD PTR [rbx+0xea]
  405d91:	mov    DWORD PTR [rax+0x4],ecx
  405d94:	cmp    dx,WORD PTR [rbx+0xe8]
  405d9b:	jbe    405da4 <flatcc_builder_end_struct@@Base+0x94>
  405d9d:	mov    WORD PTR [rbx+0xe8],dx
  405da4:	movzx  edx,WORD PTR [rax+0xc]
  405da8:	dec    DWORD PTR [rbx+0x104]
  405dae:	sub    rax,0x24
  405db2:	mov    QWORD PTR [rbx+0x30],rax
  405db6:	mov    WORD PTR [rbx+0xea],dx
  405dbd:	add    rsp,0x8
  405dc1:	mov    eax,ebp
  405dc3:	pop    rbx
  405dc4:	pop    rbp
  405dc5:	ret    
  405dc6:	lea    rcx,[rip+0x7f43]        # 40dd10 <g_data@@Base+0xc50>
  405dcd:	mov    edx,0x368
  405dd2:	lea    rsi,[rip+0x756f]        # 40d348 <g_data@@Base+0x288>
  405dd9:	lea    rdi,[rip+0x7618]        # 40d3f8 <g_data@@Base+0x338>
  405de0:	call   403140 <__assert_fail@plt>
  405de5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000405df0 <flatcc_builder_extend_vector@@Base>:
  405df0:	endbr64 
  405df4:	push   rbp
  405df5:	mov    eax,esi
  405df7:	push   rbx
  405df8:	sub    rsp,0x8
  405dfc:	mov    rdx,QWORD PTR [rdi+0x30]
  405e00:	add    eax,DWORD PTR [rdx+0x14]
  405e03:	setb   cl
  405e06:	cmp    DWORD PTR [rdx+0x18],eax
  405e09:	jb     405e54 <flatcc_builder_extend_vector@@Base+0x64>
  405e0b:	movzx  ecx,cl
  405e0e:	test   ecx,ecx
  405e10:	jne    405e54 <flatcc_builder_extend_vector@@Base+0x64>
  405e12:	imul   esi,DWORD PTR [rdx+0x10]
  405e16:	mov    ebp,DWORD PTR [rdi+0x20]
  405e19:	mov    DWORD PTR [rdx+0x14],eax
  405e1c:	add    esi,ebp
  405e1e:	mov    rbx,rdi
  405e21:	mov    DWORD PTR [rdi+0x20],esi
  405e24:	cmp    esi,DWORD PTR [rdi+0x24]
  405e27:	jae    405e40 <flatcc_builder_extend_vector@@Base+0x50>
  405e29:	mov    rax,QWORD PTR [rbx+0x18]
  405e2d:	add    rax,rbp
  405e30:	add    rsp,0x8
  405e34:	pop    rbx
  405e35:	pop    rbp
  405e36:	ret    
  405e37:	nop    WORD PTR [rax+rax*1+0x0]
  405e40:	inc    esi
  405e42:	mov    edx,0xfffffffc
  405e47:	call   4048d0 <test@@Base+0x1590>
  405e4c:	test   eax,eax
  405e4e:	je     405e29 <flatcc_builder_extend_vector@@Base+0x39>
  405e50:	xor    eax,eax
  405e52:	jmp    405e30 <flatcc_builder_extend_vector@@Base+0x40>
  405e54:	call   404c30 <flatcc_builder_default_alloc@@Base+0x300>
  405e59:	nop    DWORD PTR [rax+0x0]

0000000000405e60 <flatcc_builder_vector_push@@Base>:
  405e60:	endbr64 
  405e64:	push   r13
  405e66:	push   r12
  405e68:	push   rbp
  405e69:	push   rbx
  405e6a:	sub    rsp,0x8
  405e6e:	mov    rax,QWORD PTR [rdi+0x30]
  405e72:	cmp    WORD PTR [rax+0xe],0x4
  405e77:	jne    405edd <flatcc_builder_vector_push@@Base+0x7d>
  405e79:	mov    edx,DWORD PTR [rax+0x14]
  405e7c:	cmp    edx,DWORD PTR [rax+0x18]
  405e7f:	ja     405efc <flatcc_builder_vector_push@@Base+0x9c>
  405e81:	mov    ebp,DWORD PTR [rdi+0x20]
  405e84:	mov    r12d,DWORD PTR [rax+0x10]
  405e88:	mov    rcx,rbp
  405e8b:	inc    edx
  405e8d:	add    ecx,r12d
  405e90:	mov    DWORD PTR [rax+0x14],edx
  405e93:	mov    rbx,rdi
  405e96:	mov    r13,rsi
  405e99:	mov    DWORD PTR [rdi+0x20],ecx
  405e9c:	cmp    ecx,DWORD PTR [rdi+0x24]
  405e9f:	jae    405ec8 <flatcc_builder_vector_push@@Base+0x68>
  405ea1:	add    rbp,QWORD PTR [rbx+0x18]
  405ea5:	je     405eb5 <flatcc_builder_vector_push@@Base+0x55>
  405ea7:	mov    edx,r12d
  405eaa:	mov    rsi,r13
  405ead:	mov    rdi,rbp
  405eb0:	call   403180 <memcpy@plt>
  405eb5:	add    rsp,0x8
  405eb9:	pop    rbx
  405eba:	mov    rax,rbp
  405ebd:	pop    rbp
  405ebe:	pop    r12
  405ec0:	pop    r13
  405ec2:	ret    
  405ec3:	nop    DWORD PTR [rax+rax*1+0x0]
  405ec8:	lea    esi,[rcx+0x1]
  405ecb:	mov    edx,0xfffffffc
  405ed0:	call   4048d0 <test@@Base+0x1590>
  405ed5:	test   eax,eax
  405ed7:	je     405ea1 <flatcc_builder_vector_push@@Base+0x41>
  405ed9:	xor    ebp,ebp
  405edb:	jmp    405eb5 <flatcc_builder_vector_push@@Base+0x55>
  405edd:	lea    rcx,[rip+0x7dec]        # 40dcd0 <g_data@@Base+0xc10>
  405ee4:	mov    edx,0x38b
  405ee9:	lea    rsi,[rip+0x7458]        # 40d348 <g_data@@Base+0x288>
  405ef0:	lea    rdi,[rip+0x7531]        # 40d428 <g_data@@Base+0x368>
  405ef7:	call   403140 <__assert_fail@plt>
  405efc:	lea    rcx,[rip+0x7dcd]        # 40dcd0 <g_data@@Base+0xc10>
  405f03:	mov    edx,0x38c
  405f08:	lea    rsi,[rip+0x7439]        # 40d348 <g_data@@Base+0x288>
  405f0f:	lea    rdi,[rip+0x7542]        # 40d458 <g_data@@Base+0x398>
  405f16:	call   403140 <__assert_fail@plt>
  405f1b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405f20 <flatcc_builder_append_vector@@Base>:
  405f20:	endbr64 
  405f24:	push   r13
  405f26:	push   r12
  405f28:	push   rbp
  405f29:	push   rbx
  405f2a:	sub    rsp,0x8
  405f2e:	mov    rax,QWORD PTR [rdi+0x30]
  405f32:	cmp    WORD PTR [rax+0xe],0x4
  405f37:	jne    405fa6 <flatcc_builder_append_vector@@Base+0x86>
  405f39:	mov    ecx,edx
  405f3b:	mov    r13,rsi
  405f3e:	xor    esi,esi
  405f40:	add    ecx,DWORD PTR [rax+0x14]
  405f43:	setb   sil
  405f47:	cmp    DWORD PTR [rax+0x18],ecx
  405f4a:	jb     405fc5 <flatcc_builder_append_vector@@Base+0xa5>
  405f4c:	test   esi,esi
  405f4e:	jne    405fc5 <flatcc_builder_append_vector@@Base+0xa5>
  405f50:	mov    ebx,DWORD PTR [rax+0x10]
  405f53:	mov    r12d,DWORD PTR [rdi+0x20]
  405f57:	imul   ebx,edx
  405f5a:	mov    rdx,r12
  405f5d:	mov    DWORD PTR [rax+0x14],ecx
  405f60:	add    edx,ebx
  405f62:	mov    rbp,rdi
  405f65:	mov    DWORD PTR [rdi+0x20],edx
  405f68:	cmp    edx,DWORD PTR [rdi+0x24]
  405f6b:	jae    405f90 <flatcc_builder_append_vector@@Base+0x70>
  405f6d:	add    r12,QWORD PTR [rbp+0x18]
  405f71:	je     405f80 <flatcc_builder_append_vector@@Base+0x60>
  405f73:	mov    edx,ebx
  405f75:	mov    rsi,r13
  405f78:	mov    rdi,r12
  405f7b:	call   403180 <memcpy@plt>
  405f80:	add    rsp,0x8
  405f84:	pop    rbx
  405f85:	pop    rbp
  405f86:	mov    rax,r12
  405f89:	pop    r12
  405f8b:	pop    r13
  405f8d:	ret    
  405f8e:	xchg   ax,ax
  405f90:	lea    esi,[rdx+0x1]
  405f93:	mov    edx,0xfffffffc
  405f98:	call   4048d0 <test@@Base+0x1590>
  405f9d:	test   eax,eax
  405f9f:	je     405f6d <flatcc_builder_append_vector@@Base+0x4d>
  405fa1:	xor    r12d,r12d
  405fa4:	jmp    405f80 <flatcc_builder_append_vector@@Base+0x60>
  405fa6:	lea    rcx,[rip+0x7d03]        # 40dcb0 <g_data@@Base+0xbf0>
  405fad:	mov    edx,0x393
  405fb2:	lea    rsi,[rip+0x738f]        # 40d348 <g_data@@Base+0x288>
  405fb9:	lea    rdi,[rip+0x7468]        # 40d428 <g_data@@Base+0x368>
  405fc0:	call   403140 <__assert_fail@plt>
  405fc5:	call   404c30 <flatcc_builder_default_alloc@@Base+0x300>
  405fca:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405fd0 <flatcc_builder_extend_offset_vector@@Base>:
  405fd0:	endbr64 
  405fd4:	push   rbp
  405fd5:	mov    edx,esi
  405fd7:	push   rbx
  405fd8:	sub    rsp,0x8
  405fdc:	mov    rax,QWORD PTR [rdi+0x30]
  405fe0:	add    edx,DWORD PTR [rax+0x14]
  405fe3:	jb     406025 <flatcc_builder_extend_offset_vector@@Base+0x55>
  405fe5:	cmp    edx,0x3fffffff
  405feb:	ja     406025 <flatcc_builder_extend_offset_vector@@Base+0x55>
  405fed:	mov    ebp,DWORD PTR [rdi+0x20]
  405ff0:	mov    DWORD PTR [rax+0x14],edx
  405ff3:	lea    eax,[rbp+rsi*4+0x0]
  405ff7:	mov    rbx,rdi
  405ffa:	mov    DWORD PTR [rdi+0x20],eax
  405ffd:	cmp    eax,DWORD PTR [rdi+0x24]
  406000:	jae    406010 <flatcc_builder_extend_offset_vector@@Base+0x40>
  406002:	mov    rax,QWORD PTR [rbx+0x18]
  406006:	add    rax,rbp
  406009:	add    rsp,0x8
  40600d:	pop    rbx
  40600e:	pop    rbp
  40600f:	ret    
  406010:	lea    esi,[rax+0x1]
  406013:	mov    edx,0xfffffffc
  406018:	call   4048d0 <test@@Base+0x1590>
  40601d:	test   eax,eax
  40601f:	je     406002 <flatcc_builder_extend_offset_vector@@Base+0x32>
  406021:	xor    eax,eax
  406023:	jmp    406009 <flatcc_builder_extend_offset_vector@@Base+0x39>
  406025:	call   404c30 <flatcc_builder_default_alloc@@Base+0x300>
  40602a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406030 <flatcc_builder_offset_vector_push@@Base>:
  406030:	endbr64 
  406034:	push   r12
  406036:	push   rbp
  406037:	push   rbx
  406038:	mov    rdx,QWORD PTR [rdi+0x30]
  40603c:	cmp    WORD PTR [rdx+0xe],0x5
  406041:	jne    406098 <flatcc_builder_offset_vector_push@@Base+0x68>
  406043:	mov    eax,DWORD PTR [rdx+0x14]
  406046:	cmp    eax,0x3fffffff
  40604b:	je     406091 <flatcc_builder_offset_vector_push@@Base+0x61>
  40604d:	mov    ebp,DWORD PTR [rdi+0x20]
  406050:	inc    eax
  406052:	mov    DWORD PTR [rdx+0x14],eax
  406055:	lea    edx,[rbp+0x4]
  406058:	mov    rbx,rdi
  40605b:	mov    r12d,esi
  40605e:	mov    DWORD PTR [rdi+0x20],edx
  406061:	cmp    edx,DWORD PTR [rdi+0x24]
  406064:	jae    406080 <flatcc_builder_offset_vector_push@@Base+0x50>
  406066:	mov    rax,rbp
  406069:	add    rax,QWORD PTR [rbx+0x18]
  40606d:	je     406072 <flatcc_builder_offset_vector_push@@Base+0x42>
  40606f:	mov    DWORD PTR [rax],r12d
  406072:	pop    rbx
  406073:	pop    rbp
  406074:	pop    r12
  406076:	ret    
  406077:	nop    WORD PTR [rax+rax*1+0x0]
  406080:	lea    esi,[rbp+0x5]
  406083:	mov    edx,0xfffffffc
  406088:	call   4048d0 <test@@Base+0x1590>
  40608d:	test   eax,eax
  40608f:	je     406066 <flatcc_builder_offset_vector_push@@Base+0x36>
  406091:	pop    rbx
  406092:	pop    rbp
  406093:	xor    eax,eax
  406095:	pop    r12
  406097:	ret    
  406098:	lea    rcx,[rip+0x7be1]        # 40dc80 <g_data@@Base+0xbc0>
  40609f:	mov    edx,0x3a6
  4060a4:	lea    rsi,[rip+0x729d]        # 40d348 <g_data@@Base+0x288>
  4060ab:	lea    rdi,[rip+0x73e6]        # 40d498 <g_data@@Base+0x3d8>
  4060b2:	call   403140 <__assert_fail@plt>
  4060b7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004060c0 <flatcc_builder_append_offset_vector@@Base>:
  4060c0:	endbr64 
  4060c4:	push   r13
  4060c6:	push   r12
  4060c8:	push   rbp
  4060c9:	push   rbx
  4060ca:	sub    rsp,0x8
  4060ce:	mov    rax,QWORD PTR [rdi+0x30]
  4060d2:	cmp    WORD PTR [rax+0xe],0x5
  4060d7:	jne    406146 <flatcc_builder_append_offset_vector@@Base+0x86>
  4060d9:	mov    ecx,edx
  4060db:	add    ecx,DWORD PTR [rax+0x14]
  4060de:	jb     406165 <flatcc_builder_append_offset_vector@@Base+0xa5>
  4060e4:	cmp    ecx,0x3fffffff
  4060ea:	ja     406165 <flatcc_builder_append_offset_vector@@Base+0xa5>
  4060ec:	mov    r12d,DWORD PTR [rdi+0x20]
  4060f0:	lea    ebx,[rdx*4+0x0]
  4060f7:	mov    rdx,r12
  4060fa:	add    edx,ebx
  4060fc:	mov    DWORD PTR [rax+0x14],ecx
  4060ff:	mov    rbp,rdi
  406102:	mov    r13,rsi
  406105:	mov    DWORD PTR [rdi+0x20],edx
  406108:	cmp    edx,DWORD PTR [rdi+0x24]
  40610b:	jae    406130 <flatcc_builder_append_offset_vector@@Base+0x70>
  40610d:	add    r12,QWORD PTR [rbp+0x18]
  406111:	je     406120 <flatcc_builder_append_offset_vector@@Base+0x60>
  406113:	mov    edx,ebx
  406115:	mov    rsi,r13
  406118:	mov    rdi,r12
  40611b:	call   403180 <memcpy@plt>
  406120:	add    rsp,0x8
  406124:	pop    rbx
  406125:	pop    rbp
  406126:	mov    rax,r12
  406129:	pop    r12
  40612b:	pop    r13
  40612d:	ret    
  40612e:	xchg   ax,ax
  406130:	lea    esi,[rdx+0x1]
  406133:	mov    edx,0xfffffffc
  406138:	call   4048d0 <test@@Base+0x1590>
  40613d:	test   eax,eax
  40613f:	je     40610d <flatcc_builder_append_offset_vector@@Base+0x4d>
  406141:	xor    r12d,r12d
  406144:	jmp    406120 <flatcc_builder_append_offset_vector@@Base+0x60>
  406146:	lea    rcx,[rip+0x7af3]        # 40dc40 <g_data@@Base+0xb80>
  40614d:	mov    edx,0x3b4
  406152:	lea    rsi,[rip+0x71ef]        # 40d348 <g_data@@Base+0x288>
  406159:	lea    rdi,[rip+0x7338]        # 40d498 <g_data@@Base+0x3d8>
  406160:	call   403140 <__assert_fail@plt>
  406165:	call   404c30 <flatcc_builder_default_alloc@@Base+0x300>
  40616a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406170 <flatcc_builder_extend_string@@Base>:
  406170:	endbr64 
  406174:	push   rbp
  406175:	push   rbx
  406176:	sub    rsp,0x8
  40617a:	mov    rax,QWORD PTR [rdi+0x30]
  40617e:	cmp    WORD PTR [rax+0xe],0x6
  406183:	jne    4061c9 <flatcc_builder_extend_string@@Base+0x59>
  406185:	mov    edx,esi
  406187:	add    edx,DWORD PTR [rax+0x14]
  40618a:	jb     4061c4 <flatcc_builder_extend_string@@Base+0x54>
  40618c:	mov    ebp,DWORD PTR [rdi+0x20]
  40618f:	mov    DWORD PTR [rax+0x14],edx
  406192:	add    esi,ebp
  406194:	mov    rbx,rdi
  406197:	mov    DWORD PTR [rdi+0x20],esi
  40619a:	cmp    esi,DWORD PTR [rdi+0x24]
  40619d:	jae    4061b0 <flatcc_builder_extend_string@@Base+0x40>
  40619f:	mov    rax,QWORD PTR [rbx+0x18]
  4061a3:	add    rax,rbp
  4061a6:	add    rsp,0x8
  4061aa:	pop    rbx
  4061ab:	pop    rbp
  4061ac:	ret    
  4061ad:	nop    DWORD PTR [rax]
  4061b0:	inc    esi
  4061b2:	mov    edx,0xfffffffc
  4061b7:	call   4048d0 <test@@Base+0x1590>
  4061bc:	test   eax,eax
  4061be:	je     40619f <flatcc_builder_extend_string@@Base+0x2f>
  4061c0:	xor    eax,eax
  4061c2:	jmp    4061a6 <flatcc_builder_extend_string@@Base+0x36>
  4061c4:	call   404c30 <flatcc_builder_default_alloc@@Base+0x300>
  4061c9:	lea    rcx,[rip+0x7a40]        # 40dc10 <g_data@@Base+0xb50>
  4061d0:	mov    edx,0x3bd
  4061d5:	lea    rsi,[rip+0x716c]        # 40d348 <g_data@@Base+0x288>
  4061dc:	lea    rdi,[rip+0x72ed]        # 40d4d0 <g_data@@Base+0x410>
  4061e3:	call   403140 <__assert_fail@plt>
  4061e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004061f0 <flatcc_builder_append_string@@Base>:
  4061f0:	endbr64 
  4061f4:	push   r13
  4061f6:	push   r12
  4061f8:	push   rbp
  4061f9:	push   rbx
  4061fa:	sub    rsp,0x8
  4061fe:	mov    rax,QWORD PTR [rdi+0x30]
  406202:	cmp    WORD PTR [rax+0xe],0x6
  406207:	jne    40626b <flatcc_builder_append_string@@Base+0x7b>
  406209:	mov    rbp,rdx
  40620c:	add    edx,DWORD PTR [rax+0x14]
  40620f:	jb     406266 <flatcc_builder_append_string@@Base+0x76>
  406211:	mov    r12d,DWORD PTR [rdi+0x20]
  406215:	mov    DWORD PTR [rax+0x14],edx
  406218:	mov    rdx,r12
  40621b:	add    edx,ebp
  40621d:	mov    rbx,rdi
  406220:	mov    r13,rsi
  406223:	mov    DWORD PTR [rdi+0x20],edx
  406226:	cmp    edx,DWORD PTR [rdi+0x24]
  406229:	jae    406250 <flatcc_builder_append_string@@Base+0x60>
  40622b:	add    r12,QWORD PTR [rbx+0x18]
  40622f:	je     40623e <flatcc_builder_append_string@@Base+0x4e>
  406231:	mov    edx,ebp
  406233:	mov    rsi,r13
  406236:	mov    rdi,r12
  406239:	call   403180 <memcpy@plt>
  40623e:	add    rsp,0x8
  406242:	pop    rbx
  406243:	pop    rbp
  406244:	mov    rax,r12
  406247:	pop    r12
  406249:	pop    r13
  40624b:	ret    
  40624c:	nop    DWORD PTR [rax+0x0]
  406250:	lea    esi,[rdx+0x1]
  406253:	mov    edx,0xfffffffc
  406258:	call   4048d0 <test@@Base+0x1590>
  40625d:	test   eax,eax
  40625f:	je     40622b <flatcc_builder_append_string@@Base+0x3b>
  406261:	xor    r12d,r12d
  406264:	jmp    40623e <flatcc_builder_append_string@@Base+0x4e>
  406266:	call   404c30 <flatcc_builder_default_alloc@@Base+0x300>
  40626b:	lea    rcx,[rip+0x797e]        # 40dbf0 <g_data@@Base+0xb30>
  406272:	mov    edx,0x3c6
  406277:	lea    rsi,[rip+0x70ca]        # 40d348 <g_data@@Base+0x288>
  40627e:	lea    rdi,[rip+0x724b]        # 40d4d0 <g_data@@Base+0x410>
  406285:	call   403140 <__assert_fail@plt>
  40628a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406290 <flatcc_builder_append_string_str@@Base>:
  406290:	endbr64 
  406294:	push   rbp
  406295:	mov    rbp,rdi
  406298:	mov    rdi,rsi
  40629b:	push   rbx
  40629c:	mov    rbx,rsi
  40629f:	sub    rsp,0x8
  4062a3:	call   403120 <strlen@plt>
  4062a8:	add    rsp,0x8
  4062ac:	mov    rsi,rbx
  4062af:	pop    rbx
  4062b0:	mov    rdi,rbp
  4062b3:	mov    rdx,rax
  4062b6:	pop    rbp
  4062b7:	jmp    4061f0 <flatcc_builder_append_string@@Base>
  4062bc:	nop    DWORD PTR [rax+0x0]

00000000004062c0 <flatcc_builder_append_string_strn@@Base>:
  4062c0:	endbr64 
  4062c4:	push   r12
  4062c6:	mov    r12,rdi
  4062c9:	push   rbp
  4062ca:	mov    rbp,rsi
  4062cd:	mov    rdi,rbp
  4062d0:	push   rbx
  4062d1:	xor    esi,esi
  4062d3:	mov    rbx,rdx
  4062d6:	call   403160 <memchr@plt>
  4062db:	mov    rdx,rax
  4062de:	sub    rdx,rbp
  4062e1:	test   rax,rax
  4062e4:	cmovne rbx,rdx
  4062e8:	mov    rsi,rbp
  4062eb:	mov    rdx,rbx
  4062ee:	pop    rbx
  4062ef:	pop    rbp
  4062f0:	mov    rdi,r12
  4062f3:	pop    r12
  4062f5:	jmp    4061f0 <flatcc_builder_append_string@@Base>
  4062fa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406300 <flatcc_builder_truncate_vector@@Base>:
  406300:	endbr64 
  406304:	sub    rsp,0x8
  406308:	mov    rax,QWORD PTR [rdi+0x30]
  40630c:	cmp    WORD PTR [rax+0xe],0x4
  406311:	jne    406346 <flatcc_builder_truncate_vector@@Base+0x46>
  406313:	mov    ecx,DWORD PTR [rax+0x14]
  406316:	mov    rdx,rcx
  406319:	cmp    rcx,rsi
  40631c:	jb     406365 <flatcc_builder_truncate_vector@@Base+0x65>
  40631e:	sub    edx,esi
  406320:	mov    DWORD PTR [rax+0x14],edx
  406323:	imul   esi,DWORD PTR [rax+0x10]
  406327:	mov    eax,DWORD PTR [rdi+0x20]
  40632a:	mov    edx,esi
  40632c:	sub    eax,esi
  40632e:	mov    DWORD PTR [rdi+0x20],eax
  406331:	add    rax,QWORD PTR [rdi+0x18]
  406335:	mov    rdi,rax
  406338:	xor    esi,esi
  40633a:	call   403150 <memset@plt>
  40633f:	xor    eax,eax
  406341:	add    rsp,0x8
  406345:	ret    
  406346:	lea    rcx,[rip+0x7883]        # 40dbd0 <g_data@@Base+0xb10>
  40634d:	mov    edx,0x3d9
  406352:	lea    rsi,[rip+0x6fef]        # 40d348 <g_data@@Base+0x288>
  406359:	lea    rdi,[rip+0x70c8]        # 40d428 <g_data@@Base+0x368>
  406360:	call   403140 <__assert_fail@plt>
  406365:	lea    rcx,[rip+0x7864]        # 40dbd0 <g_data@@Base+0xb10>
  40636c:	mov    edx,0x3da
  406371:	lea    rsi,[rip+0x6fd0]        # 40d348 <g_data@@Base+0x288>
  406378:	lea    rdi,[rip+0x7181]        # 40d500 <g_data@@Base+0x440>
  40637f:	call   403140 <__assert_fail@plt>
  406384:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40638f:	nop

0000000000406390 <flatcc_builder_truncate_offset_vector@@Base>:
  406390:	endbr64 
  406394:	sub    rsp,0x8
  406398:	mov    rax,QWORD PTR [rdi+0x30]
  40639c:	cmp    WORD PTR [rax+0xe],0x5
  4063a1:	jne    4063d2 <flatcc_builder_truncate_offset_vector@@Base+0x42>
  4063a3:	mov    edx,DWORD PTR [rax+0x14]
  4063a6:	cmp    edx,esi
  4063a8:	jb     4063f1 <flatcc_builder_truncate_offset_vector@@Base+0x61>
  4063aa:	sub    edx,esi
  4063ac:	mov    DWORD PTR [rax+0x14],edx
  4063af:	imul   esi,DWORD PTR [rax+0x10]
  4063b3:	mov    eax,DWORD PTR [rdi+0x20]
  4063b6:	mov    edx,esi
  4063b8:	sub    eax,esi
  4063ba:	mov    DWORD PTR [rdi+0x20],eax
  4063bd:	add    rax,QWORD PTR [rdi+0x18]
  4063c1:	mov    rdi,rax
  4063c4:	xor    esi,esi
  4063c6:	call   403150 <memset@plt>
  4063cb:	xor    eax,eax
  4063cd:	add    rsp,0x8
  4063d1:	ret    
  4063d2:	lea    rcx,[rip+0x77c7]        # 40dba0 <g_data@@Base+0xae0>
  4063d9:	mov    edx,0x3e2
  4063de:	lea    rsi,[rip+0x6f63]        # 40d348 <g_data@@Base+0x288>
  4063e5:	lea    rdi,[rip+0x70ac]        # 40d498 <g_data@@Base+0x3d8>
  4063ec:	call   403140 <__assert_fail@plt>
  4063f1:	lea    rcx,[rip+0x77a8]        # 40dba0 <g_data@@Base+0xae0>
  4063f8:	mov    edx,0x3e3
  4063fd:	lea    rsi,[rip+0x6f44]        # 40d348 <g_data@@Base+0x288>
  406404:	lea    rdi,[rip+0x711d]        # 40d528 <g_data@@Base+0x468>
  40640b:	call   403140 <__assert_fail@plt>

0000000000406410 <flatcc_builder_truncate_string@@Base>:
  406410:	endbr64 
  406414:	sub    rsp,0x8
  406418:	mov    rdx,QWORD PTR [rdi+0x30]
  40641c:	cmp    WORD PTR [rdx+0xe],0x6
  406421:	jne    406453 <flatcc_builder_truncate_string@@Base+0x43>
  406423:	mov    ecx,DWORD PTR [rdx+0x14]
  406426:	mov    rax,rcx
  406429:	cmp    rcx,rsi
  40642c:	jb     406472 <flatcc_builder_truncate_string@@Base+0x62>
  40642e:	sub    eax,esi
  406430:	mov    DWORD PTR [rdx+0x14],eax
  406433:	mov    rdx,rsi
  406436:	mov    eax,DWORD PTR [rdi+0x20]
  406439:	sub    eax,esi
  40643b:	mov    DWORD PTR [rdi+0x20],eax
  40643e:	add    rax,QWORD PTR [rdi+0x18]
  406442:	mov    rdi,rax
  406445:	xor    esi,esi
  406447:	call   403150 <memset@plt>
  40644c:	xor    eax,eax
  40644e:	add    rsp,0x8
  406452:	ret    
  406453:	lea    rcx,[rip+0x7726]        # 40db80 <g_data@@Base+0xac0>
  40645a:	mov    edx,0x3eb
  40645f:	lea    rsi,[rip+0x6ee2]        # 40d348 <g_data@@Base+0x288>
  406466:	lea    rdi,[rip+0x7063]        # 40d4d0 <g_data@@Base+0x410>
  40646d:	call   403140 <__assert_fail@plt>
  406472:	lea    rcx,[rip+0x7707]        # 40db80 <g_data@@Base+0xac0>
  406479:	mov    edx,0x3ec
  40647e:	lea    rsi,[rip+0x6ec3]        # 40d348 <g_data@@Base+0x288>
  406485:	lea    rdi,[rip+0x70dc]        # 40d568 <g_data@@Base+0x4a8>
  40648c:	call   403140 <__assert_fail@plt>
  406491:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40649c:	nop    DWORD PTR [rax+0x0]

00000000004064a0 <flatcc_builder_start_vector@@Base>:
  4064a0:	endbr64 
  4064a4:	push   r12
  4064a6:	cmp    dx,0x4
  4064aa:	mov    r12,rcx
  4064ad:	push   rbp
  4064ae:	mov    rbp,rsi
  4064b1:	mov    esi,0x4
  4064b6:	push   rbx
  4064b7:	cmovae esi,edx
  4064ba:	mov    rbx,rdi
  4064bd:	movzx  esi,si
  4064c0:	call   404c60 <flatcc_builder_default_alloc@@Base+0x330>
  4064c5:	test   eax,eax
  4064c7:	jne    406510 <flatcc_builder_start_vector@@Base+0x70>
  4064c9:	mov    rsi,QWORD PTR [rbx+0x30]
  4064cd:	mov    edx,0x4
  4064d2:	mov    WORD PTR [rsi+0xe],dx
  4064d6:	mov    edx,DWORD PTR [rbx+0x28]
  4064d9:	mov    DWORD PTR [rsi+0x10],ebp
  4064dc:	mov    rcx,rdx
  4064df:	add    rdx,QWORD PTR [rbx+0x68]
  4064e3:	mov    DWORD PTR [rsi+0x14],0x0
  4064ea:	mov    DWORD PTR [rsi+0x18],r12d
  4064ee:	mov    QWORD PTR [rbx+0x18],rdx
  4064f2:	mov    edx,DWORD PTR [rbx+0x70]
  4064f5:	sub    edx,ecx
  4064f7:	mov    ecx,0xfffffffc
  4064fc:	cmp    edx,ecx
  4064fe:	cmova  edx,ecx
  406501:	mov    DWORD PTR [rbx+0x24],edx
  406504:	mov    DWORD PTR [rsi+0x4],ecx
  406507:	pop    rbx
  406508:	pop    rbp
  406509:	pop    r12
  40650b:	ret    
  40650c:	nop    DWORD PTR [rax+0x0]
  406510:	mov    eax,0xffffffff
  406515:	jmp    406507 <flatcc_builder_start_vector@@Base+0x67>
  406517:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406520 <flatcc_builder_start_offset_vector@@Base>:
  406520:	endbr64 
  406524:	push   rbx
  406525:	mov    esi,0x4
  40652a:	mov    rbx,rdi
  40652d:	call   404c60 <flatcc_builder_default_alloc@@Base+0x330>
  406532:	test   eax,eax
  406534:	jne    406570 <flatcc_builder_start_offset_vector@@Base+0x50>
  406536:	mov    rcx,QWORD PTR [rbx+0x30]
  40653a:	xor    edx,edx
  40653c:	mov    QWORD PTR [rcx+0xe],0x40005
  406544:	mov    WORD PTR [rcx+0x16],dx
  406548:	mov    edx,DWORD PTR [rbx+0x28]
  40654b:	mov    rsi,rdx
  40654e:	add    rdx,QWORD PTR [rbx+0x68]
  406552:	mov    QWORD PTR [rbx+0x18],rdx
  406556:	mov    edx,DWORD PTR [rbx+0x70]
  406559:	sub    edx,esi
  40655b:	mov    esi,0xfffffffc
  406560:	cmp    edx,esi
  406562:	cmova  edx,esi
  406565:	mov    DWORD PTR [rbx+0x24],edx
  406568:	mov    DWORD PTR [rcx+0x4],esi
  40656b:	pop    rbx
  40656c:	ret    
  40656d:	nop    DWORD PTR [rax]
  406570:	mov    eax,0xffffffff
  406575:	pop    rbx
  406576:	ret    
  406577:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406580 <flatcc_builder_start_string@@Base>:
  406580:	endbr64 
  406584:	push   rbx
  406585:	mov    esi,0x1
  40658a:	mov    rbx,rdi
  40658d:	call   404c60 <flatcc_builder_default_alloc@@Base+0x330>
  406592:	test   eax,eax
  406594:	jne    4065d0 <flatcc_builder_start_string@@Base+0x50>
  406596:	mov    rcx,QWORD PTR [rbx+0x30]
  40659a:	xor    edx,edx
  40659c:	mov    QWORD PTR [rcx+0xe],0x10006
  4065a4:	mov    WORD PTR [rcx+0x16],dx
  4065a8:	mov    edx,DWORD PTR [rbx+0x28]
  4065ab:	mov    rsi,rdx
  4065ae:	add    rdx,QWORD PTR [rbx+0x68]
  4065b2:	mov    QWORD PTR [rbx+0x18],rdx
  4065b6:	mov    edx,DWORD PTR [rbx+0x70]
  4065b9:	sub    edx,esi
  4065bb:	mov    esi,0xfffffffc
  4065c0:	cmp    edx,esi
  4065c2:	cmova  edx,esi
  4065c5:	mov    DWORD PTR [rbx+0x24],edx
  4065c8:	mov    DWORD PTR [rcx+0x4],esi
  4065cb:	pop    rbx
  4065cc:	ret    
  4065cd:	nop    DWORD PTR [rax]
  4065d0:	mov    eax,0xffffffff
  4065d5:	pop    rbx
  4065d6:	ret    
  4065d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004065e0 <flatcc_builder_reserve_table@@Base>:
  4065e0:	endbr64 
  4065e4:	push   r12
  4065e6:	push   rbp
  4065e7:	push   rbx
  4065e8:	test   esi,esi
  4065ea:	js     40669f <flatcc_builder_reserve_table@@Base+0xbf>
  4065f0:	mov    rax,QWORD PTR [rdi+0x30]
  4065f4:	lea    r12d,[rsi+rsi*1+0x4]
  4065f9:	movzx  edx,WORD PTR [rax+0x1c]
  4065fd:	mov    eax,DWORD PTR [rax+0x10]
  406600:	mov    rbx,rdi
  406603:	lea    ebp,[rax+rdx*2]
  406606:	mov    edx,r12d
  406609:	add    rdx,rbp
  40660c:	cmp    rdx,QWORD PTR [rdi+0x60]
  406610:	ja     406650 <flatcc_builder_reserve_table@@Base+0x70>
  406612:	add    rbp,QWORD PTR [rbx+0x58]
  406616:	je     406690 <flatcc_builder_reserve_table@@Base+0xb0>
  406618:	mov    rax,QWORD PTR [rbx+0x30]
  40661c:	add    rbp,0x4
  406620:	mov    QWORD PTR [rbx+0x8],rbp
  406624:	mov    ebp,DWORD PTR [rax+0x14]
  406627:	lea    edx,[r12-0x3]
  40662c:	add    rdx,rbp
  40662f:	cmp    rdx,QWORD PTR [rbx+0x90]
  406636:	ja     406670 <flatcc_builder_reserve_table@@Base+0x90>
  406638:	add    rbp,QWORD PTR [rbx+0x88]
  40663f:	sete   al
  406642:	mov    QWORD PTR [rbx],rbp
  406645:	movzx  eax,al
  406648:	neg    eax
  40664a:	pop    rbx
  40664b:	pop    rbp
  40664c:	pop    r12
  40664e:	ret    
  40664f:	nop
  406650:	lea    rsi,[rdi+0x58]
  406654:	mov    rdi,QWORD PTR [rdi+0x40]
  406658:	xor    r8d,r8d
  40665b:	mov    ecx,0x1
  406660:	call   QWORD PTR [rbx+0x50]
  406663:	test   eax,eax
  406665:	je     406612 <flatcc_builder_reserve_table@@Base+0x32>
  406667:	call   404a60 <flatcc_builder_default_alloc@@Base+0x130>
  40666c:	nop    DWORD PTR [rax+0x0]
  406670:	mov    rdi,QWORD PTR [rbx+0x40]
  406674:	xor    ecx,ecx
  406676:	lea    rsi,[rbx+0x88]
  40667d:	mov    r8d,0x3
  406683:	call   QWORD PTR [rbx+0x50]
  406686:	test   eax,eax
  406688:	je     406638 <flatcc_builder_reserve_table@@Base+0x58>
  40668a:	jmp    406667 <flatcc_builder_reserve_table@@Base+0x87>
  40668c:	nop    DWORD PTR [rax+0x0]
  406690:	mov    QWORD PTR [rbx+0x8],0x0
  406698:	mov    eax,0xffffffff
  40669d:	jmp    40664a <flatcc_builder_reserve_table@@Base+0x6a>
  40669f:	lea    rcx,[rip+0x74ba]        # 40db60 <g_data@@Base+0xaa0>
  4066a6:	mov    edx,0x429
  4066ab:	lea    rsi,[rip+0x6c96]        # 40d348 <g_data@@Base+0x288>
  4066b2:	lea    rdi,[rip+0x7082]        # 40d73b <g_data@@Base+0x67b>
  4066b9:	call   403140 <__assert_fail@plt>
  4066be:	xchg   ax,ax

00000000004066c0 <flatcc_builder_start_table@@Base>:
  4066c0:	endbr64 
  4066c4:	push   r13
  4066c6:	push   r12
  4066c8:	mov    r12d,esi
  4066cb:	mov    esi,0x4
  4066d0:	push   rbp
  4066d1:	push   rbx
  4066d2:	mov    rbx,rdi
  4066d5:	sub    rsp,0x8
  4066d9:	call   404c60 <flatcc_builder_default_alloc@@Base+0x330>
  4066de:	test   eax,eax
  4066e0:	jne    4067f8 <flatcc_builder_start_table@@Base+0x138>
  4066e6:	mov    rsi,QWORD PTR [rbx]
  4066e9:	mov    rdx,QWORD PTR [rbx+0x30]
  4066ed:	sub    rsi,QWORD PTR [rbx+0x88]
  4066f4:	mov    rcx,QWORD PTR [rbx+0x8]
  4066f8:	mov    ebp,eax
  4066fa:	mov    rax,QWORD PTR [rbx+0x58]
  4066fe:	mov    DWORD PTR [rdx+0x14],esi
  406701:	mov    esi,DWORD PTR [rbx+0x14]
  406704:	sub    rcx,rax
  406707:	mov    DWORD PTR [rdx+0x18],esi
  40670a:	movzx  esi,WORD PTR [rbx+0x10]
  40670e:	xor    edi,edi
  406710:	mov    r8d,0x3
  406716:	mov    DWORD PTR [rdx+0x10],ecx
  406719:	mov    WORD PTR [rdx+0x1c],si
  40671d:	lea    r13d,[rcx+rsi*2]
  406721:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  406728:	mov    WORD PTR [rbx+0x10],di
  40672c:	mov    WORD PTR [rdx+0xe],r8w
  406731:	lea    edx,[r12+r12*1+0x4]
  406736:	add    rdx,r13
  406739:	cmp    rdx,QWORD PTR [rbx+0x60]
  40673d:	jbe    40675e <flatcc_builder_start_table@@Base+0x9e>
  40673f:	mov    rdi,QWORD PTR [rbx+0x40]
  406743:	xor    r8d,r8d
  406746:	lea    rsi,[rbx+0x58]
  40674a:	mov    ecx,0x1
  40674f:	call   QWORD PTR [rbx+0x50]
  406752:	test   eax,eax
  406754:	jne    4067ea <flatcc_builder_start_table@@Base+0x12a>
  40675a:	mov    rax,QWORD PTR [rbx+0x58]
  40675e:	add    rax,r13
  406761:	je     4067f0 <flatcc_builder_start_table@@Base+0x130>
  406767:	add    rax,0x4
  40676b:	mov    QWORD PTR [rbx+0x8],rax
  40676f:	mov    rax,QWORD PTR [rbx+0x30]
  406773:	lea    edx,[r12+r12*1+0x1]
  406778:	mov    r13d,DWORD PTR [rax+0x14]
  40677c:	add    rdx,r13
  40677f:	cmp    rdx,QWORD PTR [rbx+0x90]
  406786:	ja     4067d0 <flatcc_builder_start_table@@Base+0x110>
  406788:	add    r13,QWORD PTR [rbx+0x88]
  40678f:	mov    QWORD PTR [rbx],r13
  406792:	je     4067f8 <flatcc_builder_start_table@@Base+0x138>
  406794:	mov    eax,DWORD PTR [rbx+0x28]
  406797:	mov    rdx,rax
  40679a:	add    rax,QWORD PTR [rbx+0x68]
  40679e:	mov    QWORD PTR [rbx+0x18],rax
  4067a2:	mov    eax,DWORD PTR [rbx+0x70]
  4067a5:	sub    eax,edx
  4067a7:	cmp    eax,0xfffc
  4067ac:	mov    edx,0xfffc
  4067b1:	cmova  eax,edx
  4067b4:	mov    DWORD PTR [rbx+0x24],eax
  4067b7:	mov    rax,QWORD PTR [rbx+0x30]
  4067bb:	mov    DWORD PTR [rax+0x4],0xfffc
  4067c2:	add    rsp,0x8
  4067c6:	pop    rbx
  4067c7:	mov    eax,ebp
  4067c9:	pop    rbp
  4067ca:	pop    r12
  4067cc:	pop    r13
  4067ce:	ret    
  4067cf:	nop
  4067d0:	mov    rdi,QWORD PTR [rbx+0x40]
  4067d4:	xor    ecx,ecx
  4067d6:	lea    rsi,[rbx+0x88]
  4067dd:	mov    r8d,0x3
  4067e3:	call   QWORD PTR [rbx+0x50]
  4067e6:	test   eax,eax
  4067e8:	je     406788 <flatcc_builder_start_table@@Base+0xc8>
  4067ea:	call   404a60 <flatcc_builder_default_alloc@@Base+0x130>
  4067ef:	nop
  4067f0:	mov    QWORD PTR [rbx+0x8],0x0
  4067f8:	mov    ebp,0xffffffff
  4067fd:	jmp    4067c2 <flatcc_builder_start_table@@Base+0x102>
  4067ff:	nop

0000000000406800 <flatcc_builder_create_vtable@@Base>:
  406800:	endbr64 
  406804:	push   rbp
  406805:	mov    rbp,rdi
  406808:	push   rbx
  406809:	sub    rsp,0xa8
  406810:	mov    rax,QWORD PTR fs:0x28
  406819:	mov    QWORD PTR [rsp+0x98],rax
  406821:	xor    eax,eax
  406823:	mov    QWORD PTR [rsp],0x0
  40682b:	mov    DWORD PTR [rsp+0x8],0x0
  406833:	mov    eax,DWORD PTR [rdi+0x100]
  406839:	test   dx,dx
  40683c:	je     4068c0 <flatcc_builder_create_vtable@@Base+0xc0>
  406842:	movzx  r8d,dx
  406846:	mov    QWORD PTR [rsp],r8
  40684a:	mov    QWORD PTR [rsp+0x10],rsi
  40684f:	mov    QWORD PTR [rsp+0x18],r8
  406854:	mov    DWORD PTR [rsp+0x8],0x1
  40685c:	movzx  edx,dx
  40685f:	test   eax,eax
  406861:	je     4068f0 <flatcc_builder_create_vtable@@Base+0xf0>
  406867:	mov    eax,DWORD PTR [rbp+0xf0]
  40686d:	mov    ebx,eax
  40686f:	sub    ebx,edx
  406871:	cmp    eax,ebx
  406873:	jle    4068ce <flatcc_builder_create_vtable@@Base+0xce>
  406875:	mov    rdi,QWORD PTR [rbp+0x38]
  406879:	mov    edx,DWORD PTR [rsp+0x8]
  40687d:	lea    rsi,[rsp+0x10]
  406882:	mov    ecx,ebx
  406884:	call   QWORD PTR [rbp+0x48]
  406887:	test   eax,eax
  406889:	jne    406940 <flatcc_builder_create_vtable@@Base+0x140>
  40688f:	cmp    ebx,0x1
  406892:	mov    DWORD PTR [rbp+0xf0],ebx
  406898:	sbb    ebx,0xffffffff
  40689b:	mov    rcx,QWORD PTR [rsp+0x98]
  4068a3:	xor    rcx,QWORD PTR fs:0x28
  4068ac:	mov    eax,ebx
  4068ae:	jne    40693b <flatcc_builder_create_vtable@@Base+0x13b>
  4068b4:	add    rsp,0xa8
  4068bb:	pop    rbx
  4068bc:	pop    rbp
  4068bd:	ret    
  4068be:	xchg   ax,ax
  4068c0:	test   eax,eax
  4068c2:	jne    4068ce <flatcc_builder_create_vtable@@Base+0xce>
  4068c4:	mov    eax,DWORD PTR [rdi+0x124]
  4068ca:	test   eax,eax
  4068cc:	je     406930 <flatcc_builder_create_vtable@@Base+0x130>
  4068ce:	lea    rcx,[rip+0x74bb]        # 40dd90 <g_data@@Base+0xcd0>
  4068d5:	mov    edx,0x287
  4068da:	lea    rsi,[rip+0x6a67]        # 40d348 <g_data@@Base+0x288>
  4068e1:	lea    rdi,[rip+0x6df7]        # 40d6df <g_data@@Base+0x61f>
  4068e8:	call   403140 <__assert_fail@plt>
  4068ed:	nop    DWORD PTR [rax]
  4068f0:	mov    ecx,DWORD PTR [rdi+0x124]
  4068f6:	test   ecx,ecx
  4068f8:	jne    406867 <flatcc_builder_create_vtable@@Base+0x67>
  4068fe:	mov    ebx,DWORD PTR [rdi+0xf4]
  406904:	add    edx,ebx
  406906:	mov    DWORD PTR [rdi+0xf4],edx
  40690c:	mov    rdi,QWORD PTR [rbp+0x38]
  406910:	mov    edx,DWORD PTR [rsp+0x8]
  406914:	lea    rsi,[rsp+0x10]
  406919:	mov    ecx,ebx
  40691b:	call   QWORD PTR [rbp+0x48]
  40691e:	test   eax,eax
  406920:	jne    406945 <flatcc_builder_create_vtable@@Base+0x145>
  406922:	inc    ebx
  406924:	jmp    40689b <flatcc_builder_create_vtable@@Base+0x9b>
  406929:	nop    DWORD PTR [rax+0x0]
  406930:	mov    ebx,DWORD PTR [rbp+0xf4]
  406936:	xor    r8d,r8d
  406939:	jmp    40690c <flatcc_builder_create_vtable@@Base+0x10c>
  40693b:	call   403130 <__stack_chk_fail@plt>
  406940:	call   404c00 <flatcc_builder_default_alloc@@Base+0x2d0>
  406945:	call   404a90 <flatcc_builder_default_alloc@@Base+0x160>
  40694a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406950 <flatcc_builder_create_cached_vtable@@Base>:
  406950:	endbr64 
  406954:	push   r15
  406956:	mov    r15,rdi
  406959:	push   r14
  40695b:	push   r13
  40695d:	push   r12
  40695f:	movzx  r12d,dx
  406963:	push   rbp
  406964:	mov    ebp,ecx
  406966:	push   rbx
  406967:	sub    rsp,0x38
  40696b:	mov    rbx,QWORD PTR [rdi+0xd8]
  406972:	mov    QWORD PTR [rsp+0x18],rsi
  406977:	mov    DWORD PTR [rsp+0x2c],edx
  40697b:	test   rbx,rbx
  40697e:	je     406b18 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
  406984:	mov    eax,0x20
  406989:	sub    eax,ebx
  40698b:	shrx   ebp,ebp,eax
  406990:	mov    rax,QWORD PTR [r15+0xa8]
  406997:	lea    r14,[rax+rbp*4]
  40699b:	test   r14,r14
  40699e:	je     406b00 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  4069a4:	mov    ebp,DWORD PTR [r14]
  4069a7:	test   ebp,ebp
  4069a9:	je     406bf0 <flatcc_builder_create_cached_vtable@@Base+0x2a0>
  4069af:	mov    QWORD PTR [rsp+0x20],0x0
  4069b8:	mov    r11,QWORD PTR [r15+0xb8]
  4069bf:	mov    r8,QWORD PTR [r15+0x78]
  4069c3:	mov    r13,r14
  4069c6:	mov    ebx,ebp
  4069c8:	add    rbx,r11
  4069cb:	mov    esi,DWORD PTR [rbx+0x8]
  4069ce:	add    rsi,r8
  4069d1:	cmp    WORD PTR [rsi],r12w
  4069d5:	jne    406ac0 <flatcc_builder_create_cached_vtable@@Base+0x170>
  4069db:	mov    rdi,QWORD PTR [rsp+0x18]
  4069e0:	movzx  edx,r12w
  4069e4:	mov    QWORD PTR [rsp+0x10],r8
  4069e9:	mov    QWORD PTR [rsp+0x8],r11
  4069ee:	call   403170 <memcmp@plt>
  4069f3:	test   eax,eax
  4069f5:	mov    r11,QWORD PTR [rsp+0x8]
  4069fa:	mov    r8,QWORD PTR [rsp+0x10]
  4069ff:	jne    406ac0 <flatcc_builder_create_cached_vtable@@Base+0x170>
  406a05:	mov    eax,DWORD PTR [r15+0x100]
  406a0c:	cmp    DWORD PTR [rbx+0x4],eax
  406a0f:	je     406ad0 <flatcc_builder_create_cached_vtable@@Base+0x180>
  406a15:	mov    QWORD PTR [rsp+0x20],rbx
  406a1a:	mov    ebp,DWORD PTR [rbx+0xc]
  406a1d:	lea    r13,[rbx+0xc]
  406a21:	test   ebp,ebp
  406a23:	jne    4069c6 <flatcc_builder_create_cached_vtable@@Base+0x76>
  406a25:	mov    ebp,DWORD PTR [r15+0xe4]
  406a2c:	lea    rdx,[rbp+0x10]
  406a30:	cmp    rdx,QWORD PTR [r15+0xc0]
  406a37:	jbe    406a58 <flatcc_builder_create_cached_vtable@@Base+0x108>
  406a39:	mov    rdi,QWORD PTR [r15+0x40]
  406a3d:	xor    ecx,ecx
  406a3f:	lea    rsi,[r15+0xb8]
  406a46:	mov    r8d,0x6
  406a4c:	call   QWORD PTR [r15+0x50]
  406a50:	test   eax,eax
  406a52:	jne    406be4 <flatcc_builder_create_cached_vtable@@Base+0x294>
  406a58:	add    rbp,QWORD PTR [r15+0xb8]
  406a5f:	je     406b00 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  406a65:	mov    eax,DWORD PTR [r15+0xe4]
  406a6c:	mov    rsi,QWORD PTR [rsp+0x18]
  406a71:	lea    edx,[rax+0x10]
  406a74:	mov    DWORD PTR [r15+0xe4],edx
  406a7b:	mov    edx,DWORD PTR [r15+0x100]
  406a82:	mov    rdi,r15
  406a85:	mov    DWORD PTR [rbp+0x4],edx
  406a88:	mov    edx,DWORD PTR [r14]
  406a8b:	mov    DWORD PTR [rbp+0xc],edx
  406a8e:	mov    DWORD PTR [r14],eax
  406a91:	mov    eax,DWORD PTR [rsp+0x2c]
  406a95:	movzx  edx,ax
  406a98:	movzx  ebx,ax
  406a9b:	call   406800 <flatcc_builder_create_vtable@@Base>
  406aa0:	mov    DWORD PTR [rbp+0x0],eax
  406aa3:	test   eax,eax
  406aa5:	je     406b00 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  406aa7:	mov    rdi,QWORD PTR [rsp+0x20]
  406aac:	test   rdi,rdi
  406aaf:	je     406c05 <flatcc_builder_create_cached_vtable@@Base+0x2b5>
  406ab5:	mov    edx,DWORD PTR [rdi+0x8]
  406ab8:	mov    DWORD PTR [rbp+0x8],edx
  406abb:	jmp    406ae7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  406abd:	nop    DWORD PTR [rax]
  406ac0:	lea    r13,[rbx+0xc]
  406ac4:	mov    ebp,DWORD PTR [rbx+0xc]
  406ac7:	jmp    406a21 <flatcc_builder_create_cached_vtable@@Base+0xd1>
  406acc:	nop    DWORD PTR [rax+0x0]
  406ad0:	cmp    r14,r13
  406ad3:	je     406ae5 <flatcc_builder_create_cached_vtable@@Base+0x195>
  406ad5:	mov    eax,DWORD PTR [rbx+0xc]
  406ad8:	mov    DWORD PTR [r13+0x0],eax
  406adc:	mov    eax,DWORD PTR [r14]
  406adf:	mov    DWORD PTR [rbx+0xc],eax
  406ae2:	mov    DWORD PTR [r14],ebp
  406ae5:	mov    eax,DWORD PTR [rbx]
  406ae7:	add    rsp,0x38
  406aeb:	pop    rbx
  406aec:	pop    rbp
  406aed:	pop    r12
  406aef:	pop    r13
  406af1:	pop    r14
  406af3:	pop    r15
  406af5:	ret    
  406af6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406b00:	add    rsp,0x38
  406b04:	pop    rbx
  406b05:	pop    rbp
  406b06:	pop    r12
  406b08:	pop    r13
  406b0a:	pop    r14
  406b0c:	xor    eax,eax
  406b0e:	pop    r15
  406b10:	ret    
  406b11:	nop    DWORD PTR [rax+0x0]
  406b18:	mov    eax,DWORD PTR [rdi+0xe4]
  406b1e:	lea    r13,[rdi+0xa8]
  406b25:	test   eax,eax
  406b27:	jne    406c8f <flatcc_builder_create_cached_vtable@@Base+0x33f>
  406b2d:	cmp    QWORD PTR [rdi+0xc0],0xf
  406b35:	jbe    406bc0 <flatcc_builder_create_cached_vtable@@Base+0x270>
  406b3b:	cmp    QWORD PTR [r15+0xb8],0x0
  406b43:	je     406b00 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  406b45:	mov    DWORD PTR [r15+0xe4],0x10
  406b50:	mov    rdi,QWORD PTR [r15+0x40]
  406b54:	mov    r8d,0x5
  406b5a:	mov    ecx,0x1
  406b5f:	mov    edx,0x100
  406b64:	mov    rsi,r13
  406b67:	call   QWORD PTR [r15+0x50]
  406b6b:	test   eax,eax
  406b6d:	jne    406b00 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  406b6f:	mov    rcx,QWORD PTR [r15+0xb0]
  406b76:	mov    eax,0x100
  406b7b:	jmp    406b83 <flatcc_builder_create_cached_vtable@@Base+0x233>
  406b7d:	nop    DWORD PTR [rax]
  406b80:	mov    rax,rdx
  406b83:	lea    rdx,[rax+rax*1]
  406b87:	cmp    rdx,rcx
  406b8a:	jbe    406b80 <flatcc_builder_create_cached_vtable@@Base+0x230>
  406b8c:	shr    rax,0x2
  406b90:	cmp    rax,0x1
  406b94:	jbe    406bfe <flatcc_builder_create_cached_vtable@@Base+0x2ae>
  406b96:	mov    esi,0x1
  406b9b:	nop    DWORD PTR [rax+rax*1+0x0]
  406ba0:	inc    rbx
  406ba3:	shlx   rdx,rsi,rbx
  406ba8:	cmp    rax,rdx
  406bab:	ja     406ba0 <flatcc_builder_create_cached_vtable@@Base+0x250>
  406bad:	mov    eax,0x20
  406bb2:	sub    eax,ebx
  406bb4:	mov    QWORD PTR [r15+0xd8],rbx
  406bbb:	jmp    40698b <flatcc_builder_create_cached_vtable@@Base+0x3b>
  406bc0:	lea    rsi,[rdi+0xb8]
  406bc7:	mov    rdi,QWORD PTR [rdi+0x40]
  406bcb:	xor    ecx,ecx
  406bcd:	mov    r8d,0x6
  406bd3:	mov    edx,0x10
  406bd8:	call   QWORD PTR [r15+0x50]
  406bdc:	test   eax,eax
  406bde:	je     406b3b <flatcc_builder_create_cached_vtable@@Base+0x1eb>
  406be4:	call   404a60 <flatcc_builder_default_alloc@@Base+0x130>
  406be9:	nop    DWORD PTR [rax+0x0]
  406bf0:	mov    QWORD PTR [rsp+0x20],0x0
  406bf9:	jmp    406a25 <flatcc_builder_create_cached_vtable@@Base+0xd5>
  406bfe:	mov    eax,0x20
  406c03:	jmp    406bb4 <flatcc_builder_create_cached_vtable@@Base+0x264>
  406c05:	mov    rax,QWORD PTR [r15+0x118]
  406c0c:	mov    r14d,DWORD PTR [r15+0xe0]
  406c13:	test   rax,rax
  406c16:	je     406c21 <flatcc_builder_create_cached_vtable@@Base+0x2d1>
  406c18:	lea    edx,[rbx+r14*1]
  406c1c:	cmp    rax,rdx
  406c1f:	jb     406c77 <flatcc_builder_create_cached_vtable@@Base+0x327>
  406c21:	lea    rdx,[r12+r14*1]
  406c25:	cmp    rdx,QWORD PTR [r15+0x80]
  406c2c:	jbe    406c46 <flatcc_builder_create_cached_vtable@@Base+0x2f6>
  406c2e:	mov    rdi,QWORD PTR [r15+0x40]
  406c32:	xor    ecx,ecx
  406c34:	lea    rsi,[r15+0x78]
  406c38:	mov    r8d,0x2
  406c3e:	call   QWORD PTR [r15+0x50]
  406c42:	test   eax,eax
  406c44:	jne    406be4 <flatcc_builder_create_cached_vtable@@Base+0x294>
  406c46:	mov    rdi,r14
  406c49:	add    rdi,QWORD PTR [r15+0x78]
  406c4d:	je     406c87 <flatcc_builder_create_cached_vtable@@Base+0x337>
  406c4f:	mov    eax,DWORD PTR [r15+0xe0]
  406c56:	mov    rsi,QWORD PTR [rsp+0x18]
  406c5b:	add    ebx,eax
  406c5d:	mov    DWORD PTR [rbp+0x8],eax
  406c60:	mov    DWORD PTR [r15+0xe0],ebx
  406c67:	mov    rdx,r12
  406c6a:	call   403180 <memcpy@plt>
  406c6f:	mov    eax,DWORD PTR [rbp+0x0]
  406c72:	jmp    406ae7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  406c77:	mov    rdi,r15
  406c7a:	call   404fb0 <flatcc_builder_flush_vtable_cache@@Base>
  406c7f:	mov    eax,DWORD PTR [rbp+0x0]
  406c82:	jmp    406ae7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  406c87:	or     eax,0xffffffff
  406c8a:	jmp    406ae7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  406c8f:	lea    rcx,[rip+0x6eba]        # 40db50 <g_data@@Base+0xa90>
  406c96:	mov    edx,0x156
  406c9b:	lea    rsi,[rip+0x66a6]        # 40d348 <g_data@@Base+0x288>
  406ca2:	lea    rdi,[rip+0x6a7c]        # 40d725 <g_data@@Base+0x665>
  406ca9:	call   403140 <__assert_fail@plt>
  406cae:	xchg   ax,ax

0000000000406cb0 <flatcc_builder_create_table@@Base>:
  406cb0:	endbr64 
  406cb4:	push   rbp
  406cb5:	push   rbx
  406cb6:	mov    rbx,rdi
  406cb9:	sub    rsp,0xb8
  406cc0:	mov    edi,DWORD PTR [rsp+0xd0]
  406cc7:	mov    rax,QWORD PTR fs:0x28
  406cd0:	mov    QWORD PTR [rsp+0xa8],rax
  406cd8:	xor    eax,eax
  406cda:	test   r9d,r9d
  406cdd:	js     406e9f <flatcc_builder_create_table@@Base+0x1ef>
  406ce3:	test   dil,0x1
  406ce7:	je     406e7b <flatcc_builder_create_table@@Base+0x1cb>
  406ced:	cmp    cx,0x4
  406cf1:	mov    eax,0x4
  406cf6:	cmovb  ecx,eax
  406cf9:	movzx  r11d,cx
  406cfd:	cmp    WORD PTR [rbx+0xe8],cx
  406d04:	jb     406e50 <flatcc_builder_create_table@@Base+0x1a0>
  406d0a:	mov    eax,DWORD PTR [rbx+0xf0]
  406d10:	lea    ecx,[r11-0x1]
  406d14:	mov    r10d,eax
  406d17:	sub    r10d,edx
  406d1a:	and    r10d,ecx
  406d1d:	mov    ecx,eax
  406d1f:	sub    ecx,edx
  406d21:	lea    r11d,[rcx-0x4]
  406d25:	dec    edi
  406d27:	mov    ecx,r11d
  406d2a:	sub    ecx,edi
  406d2c:	sub    ecx,r10d
  406d2f:	mov    DWORD PTR [rsp+0xc],ecx
  406d33:	test   r9d,r9d
  406d36:	je     406d6d <flatcc_builder_create_table@@Base+0xbd>
  406d38:	mov    edi,r10d
  406d3b:	sub    edi,r11d
  406d3e:	lea    eax,[r9-0x1]
  406d42:	sub    edi,0x4
  406d45:	lea    r9,[r8+rax*2+0x2]
  406d4a:	nop    WORD PTR [rax+rax*1+0x0]
  406d50:	movzx  ecx,WORD PTR [r8]
  406d54:	mov    r11d,edi
  406d57:	sub    r11d,ecx
  406d5a:	add    r8,0x2
  406d5e:	add    DWORD PTR [rsi+rcx*1],r11d
  406d62:	cmp    r9,r8
  406d65:	jne    406d50 <flatcc_builder_create_table@@Base+0xa0>
  406d67:	mov    eax,DWORD PTR [rbx+0xf0]
  406d6d:	lea    rcx,[rsp+0xc]
  406d72:	mov    QWORD PTR [rsp+0x10],0x4
  406d7b:	mov    QWORD PTR [rsp+0x20],rcx
  406d80:	mov    QWORD PTR [rsp+0x28],0x4
  406d89:	mov    DWORD PTR [rsp+0x18],0x1
  406d91:	mov    r8d,0x4
  406d97:	test   rdx,rdx
  406d9a:	je     406db7 <flatcc_builder_create_table@@Base+0x107>
  406d9c:	lea    r8,[rdx+0x4]
  406da0:	mov    QWORD PTR [rsp+0x10],r8
  406da5:	mov    QWORD PTR [rsp+0x30],rsi
  406daa:	mov    QWORD PTR [rsp+0x38],rdx
  406daf:	mov    DWORD PTR [rsp+0x18],0x2
  406db7:	test   r10d,r10d
  406dba:	jne    406e20 <flatcc_builder_create_table@@Base+0x170>
  406dbc:	mov    ebp,eax
  406dbe:	movabs rdx,0x10000000f
  406dc8:	sub    ebp,r8d
  406dcb:	cmp    r8,rdx
  406dce:	ja     406e5c <flatcc_builder_create_table@@Base+0x1ac>
  406dd4:	cmp    ebp,eax
  406dd6:	jge    406e5c <flatcc_builder_create_table@@Base+0x1ac>
  406ddc:	mov    rdi,QWORD PTR [rbx+0x38]
  406de0:	mov    edx,DWORD PTR [rsp+0x18]
  406de4:	lea    rsi,[rsp+0x20]
  406de9:	mov    ecx,ebp
  406deb:	call   QWORD PTR [rbx+0x48]
  406dee:	test   eax,eax
  406df0:	jne    406e9a <flatcc_builder_create_table@@Base+0x1ea>
  406df6:	mov    DWORD PTR [rbx+0xf0],ebp
  406dfc:	mov    eax,ebp
  406dfe:	mov    rbx,QWORD PTR [rsp+0xa8]
  406e06:	xor    rbx,QWORD PTR fs:0x28
  406e0f:	jne    406ebe <flatcc_builder_create_table@@Base+0x20e>
  406e15:	add    rsp,0xb8
  406e1c:	pop    rbx
  406e1d:	pop    rbp
  406e1e:	ret    
  406e1f:	nop
  406e20:	movsxd rcx,DWORD PTR [rsp+0x18]
  406e25:	mov    rsi,0x40de40
  406e2c:	mov    rdx,rcx
  406e2f:	add    r8,r10
  406e32:	shl    rcx,0x4
  406e36:	inc    edx
  406e38:	mov    QWORD PTR [rsp+0x10],r8
  406e3d:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  406e42:	mov    QWORD PTR [rsp+rcx*1+0x28],r10
  406e47:	mov    DWORD PTR [rsp+0x18],edx
  406e4b:	jmp    406dbc <flatcc_builder_create_table@@Base+0x10c>
  406e50:	mov    WORD PTR [rbx+0xe8],cx
  406e57:	jmp    406d0a <flatcc_builder_create_table@@Base+0x5a>
  406e5c:	lea    rcx,[rip+0x6f2d]        # 40dd90 <g_data@@Base+0xcd0>
  406e63:	mov    edx,0x287
  406e68:	lea    rsi,[rip+0x64d9]        # 40d348 <g_data@@Base+0x288>
  406e6f:	lea    rdi,[rip+0x6869]        # 40d6df <g_data@@Base+0x61f>
  406e76:	call   403140 <__assert_fail@plt>
  406e7b:	lea    rcx,[rip+0x6cae]        # 40db30 <g_data@@Base+0xa70>
  406e82:	mov    edx,0x4db
  406e87:	lea    rsi,[rip+0x64ba]        # 40d348 <g_data@@Base+0x288>
  406e8e:	lea    rdi,[rip+0x68b1]        # 40d746 <g_data@@Base+0x686>
  406e95:	call   403140 <__assert_fail@plt>
  406e9a:	call   404c00 <flatcc_builder_default_alloc@@Base+0x2d0>
  406e9f:	lea    rcx,[rip+0x6c8a]        # 40db30 <g_data@@Base+0xa70>
  406ea6:	mov    edx,0x4d5
  406eab:	lea    rsi,[rip+0x6496]        # 40d348 <g_data@@Base+0x288>
  406eb2:	lea    rdi,[rip+0x687b]        # 40d734 <g_data@@Base+0x674>
  406eb9:	call   403140 <__assert_fail@plt>
  406ebe:	call   403130 <__stack_chk_fail@plt>
  406ec3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406ece:	xchg   ax,ax

0000000000406ed0 <flatcc_builder_check_required_field@@Base>:
  406ed0:	endbr64 
  406ed4:	mov    rax,QWORD PTR [rdi+0x30]
  406ed8:	cmp    WORD PTR [rax+0xe],0x3
  406edd:	jne    406efa <flatcc_builder_check_required_field@@Base+0x2a>
  406edf:	xor    eax,eax
  406ee1:	cmp    WORD PTR [rdi+0x10],si
  406ee5:	jbe    406ef9 <flatcc_builder_check_required_field@@Base+0x29>
  406ee7:	mov    rax,QWORD PTR [rdi+0x8]
  406eeb:	movzx  edx,si
  406eee:	cmp    WORD PTR [rax+rdx*2],0x0
  406ef3:	setne  al
  406ef6:	movzx  eax,al
  406ef9:	ret    
  406efa:	push   rax
  406efb:	lea    rcx,[rip+0x6bfe]        # 40db00 <g_data@@Base+0xa40>
  406f02:	mov    edx,0x4f8
  406f07:	lea    rsi,[rip+0x643a]        # 40d348 <g_data@@Base+0x288>
  406f0e:	lea    rdi,[rip+0x667b]        # 40d590 <g_data@@Base+0x4d0>
  406f15:	call   403140 <__assert_fail@plt>
  406f1a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406f20 <flatcc_builder_check_union_field@@Base>:
  406f20:	endbr64 
  406f24:	mov    rax,QWORD PTR [rdi+0x30]
  406f28:	cmp    WORD PTR [rax+0xe],0x3
  406f2d:	jne    406f89 <flatcc_builder_check_union_field@@Base+0x69>
  406f2f:	xor    eax,eax
  406f31:	test   si,si
  406f34:	je     406f66 <flatcc_builder_check_union_field@@Base+0x46>
  406f36:	cmp    WORD PTR [rdi+0x10],si
  406f3a:	jbe    406f66 <flatcc_builder_check_union_field@@Base+0x46>
  406f3c:	mov    rcx,QWORD PTR [rdi+0x8]
  406f40:	movzx  edx,si
  406f43:	movzx  eax,WORD PTR [rcx+rdx*2-0x2]
  406f48:	movzx  ecx,WORD PTR [rcx+rdx*2]
  406f4c:	test   ax,ax
  406f4f:	je     406f80 <flatcc_builder_check_union_field@@Base+0x60>
  406f51:	mov    rsi,QWORD PTR [rdi+0x18]
  406f55:	movzx  edx,ax
  406f58:	xor    eax,eax
  406f5a:	test   cx,cx
  406f5d:	sete   al
  406f60:	cmp    BYTE PTR [rsi+rdx*1],0x0
  406f64:	jne    406f70 <flatcc_builder_check_union_field@@Base+0x50>
  406f66:	ret    
  406f67:	nop    WORD PTR [rax+rax*1+0x0]
  406f70:	xor    eax,eax
  406f72:	test   cx,cx
  406f75:	setne  al
  406f78:	ret    
  406f79:	nop    DWORD PTR [rax+0x0]
  406f80:	xor    eax,eax
  406f82:	test   cx,cx
  406f85:	sete   al
  406f88:	ret    
  406f89:	push   rax
  406f8a:	lea    rcx,[rip+0x6b2f]        # 40dac0 <g_data@@Base+0xa00>
  406f91:	mov    edx,0x4ff
  406f96:	lea    rsi,[rip+0x63ab]        # 40d348 <g_data@@Base+0x288>
  406f9d:	lea    rdi,[rip+0x65ec]        # 40d590 <g_data@@Base+0x4d0>
  406fa4:	call   403140 <__assert_fail@plt>
  406fa9:	nop    DWORD PTR [rax+0x0]

0000000000406fb0 <flatcc_builder_check_required@@Base>:
  406fb0:	endbr64 
  406fb4:	mov    rax,QWORD PTR [rdi+0x30]
  406fb8:	cmp    WORD PTR [rax+0xe],0x3
  406fbd:	jne    407013 <flatcc_builder_check_required@@Base+0x63>
  406fbf:	movzx  ecx,WORD PTR [rdi+0x10]
  406fc3:	xor    eax,eax
  406fc5:	cmp    ecx,edx
  406fc7:	jl     407012 <flatcc_builder_check_required@@Base+0x62>
  406fc9:	test   edx,edx
  406fcb:	jle    407003 <flatcc_builder_check_required@@Base+0x53>
  406fcd:	mov    rcx,QWORD PTR [rdi+0x8]
  406fd1:	movzx  edi,WORD PTR [rsi]
  406fd4:	cmp    WORD PTR [rcx+rdi*2],0x0
  406fd9:	je     407012 <flatcc_builder_check_required@@Base+0x62>
  406fdb:	add    rsi,0x2
  406fdf:	lea    eax,[rdx-0x1]
  406fe2:	lea    rdx,[rsi+rax*2]
  406fe6:	jmp    406ffe <flatcc_builder_check_required@@Base+0x4e>
  406fe8:	nop    DWORD PTR [rax+rax*1+0x0]
  406ff0:	movzx  eax,WORD PTR [rsi]
  406ff3:	add    rsi,0x2
  406ff7:	cmp    WORD PTR [rcx+rax*2],0x0
  406ffc:	je     407010 <flatcc_builder_check_required@@Base+0x60>
  406ffe:	cmp    rsi,rdx
  407001:	jne    406ff0 <flatcc_builder_check_required@@Base+0x40>
  407003:	mov    eax,0x1
  407008:	ret    
  407009:	nop    DWORD PTR [rax+0x0]
  407010:	xor    eax,eax
  407012:	ret    
  407013:	push   rax
  407014:	lea    rcx,[rip+0x6a75]        # 40da90 <g_data@@Base+0x9d0>
  40701b:	mov    edx,0x511
  407020:	lea    rsi,[rip+0x6321]        # 40d348 <g_data@@Base+0x288>
  407027:	lea    rdi,[rip+0x6562]        # 40d590 <g_data@@Base+0x4d0>
  40702e:	call   403140 <__assert_fail@plt>
  407033:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40703e:	xchg   ax,ax

0000000000407040 <flatcc_builder_end_table@@Base>:
  407040:	endbr64 
  407044:	push   r13
  407046:	push   r12
  407048:	push   rbp
  407049:	push   rbx
  40704a:	sub    rsp,0x8
  40704e:	mov    rax,QWORD PTR [rdi+0x30]
  407052:	cmp    WORD PTR [rax+0xe],0x3
  407057:	jne    4071ad <flatcc_builder_end_table@@Base+0x16d>
  40705d:	movzx  ebp,WORD PTR [rdi+0x10]
  407061:	movzx  eax,WORD PTR [rdi+0x20]
  407065:	lea    ebp,[rbp+rbp*1+0x4]
  407069:	movzx  ecx,bp
  40706c:	xor    ecx,DWORD PTR [rdi+0x14]
  40706f:	mov    rdx,QWORD PTR [rdi+0x8]
  407073:	imul   ecx,ecx,0x9e3779b1
  407079:	add    eax,0x4
  40707c:	mov    WORD PTR [rdx-0x2],ax
  407080:	movzx  eax,ax
  407083:	xor    ecx,eax
  407085:	imul   ecx,ecx,0x9e3779b1
  40708b:	mov    WORD PTR [rdx-0x4],bp
  40708f:	lea    r12,[rdx-0x4]
  407093:	mov    DWORD PTR [rdi+0x14],ecx
  407096:	movzx  edx,bp
  407099:	mov    rsi,r12
  40709c:	mov    rbx,rdi
  40709f:	call   406950 <flatcc_builder_create_cached_vtable@@Base>
  4070a4:	mov    r13d,eax
  4070a7:	test   eax,eax
  4070a9:	jne    4070c0 <flatcc_builder_end_table@@Base+0x80>
  4070ab:	add    rsp,0x8
  4070af:	pop    rbx
  4070b0:	xor    ebp,ebp
  4070b2:	mov    eax,ebp
  4070b4:	pop    rbp
  4070b5:	pop    r12
  4070b7:	pop    r13
  4070b9:	ret    
  4070ba:	nop    WORD PTR [rax+rax*1+0x0]
  4070c0:	movzx  edx,bp
  4070c3:	xor    esi,esi
  4070c5:	mov    rdi,r12
  4070c8:	call   403150 <memset@plt>
  4070cd:	mov    rax,QWORD PTR [rbx+0x30]
  4070d1:	sub    rsp,0x8
  4070d5:	mov    r8d,DWORD PTR [rax+0x14]
  4070d9:	mov    r9,QWORD PTR [rbx]
  4070dc:	add    r8,QWORD PTR [rbx+0x88]
  4070e3:	mov    edx,DWORD PTR [rbx+0x20]
  4070e6:	movzx  ecx,WORD PTR [rbx+0xea]
  4070ed:	mov    rsi,QWORD PTR [rbx+0x18]
  4070f1:	push   r13
  4070f3:	sub    r9,r8
  4070f6:	sar    r9,1
  4070f9:	mov    rdi,rbx
  4070fc:	call   406cb0 <flatcc_builder_create_table@@Base>
  407101:	mov    ebp,eax
  407103:	pop    rax
  407104:	pop    rdx
  407105:	test   ebp,ebp
  407107:	je     4070ab <flatcc_builder_end_table@@Base+0x6b>
  407109:	mov    rax,QWORD PTR [rbx+0x30]
  40710d:	mov    rdi,QWORD PTR [rbx+0x18]
  407111:	mov    edx,DWORD PTR [rax+0x18]
  407114:	xor    esi,esi
  407116:	mov    DWORD PTR [rbx+0x14],edx
  407119:	movzx  edx,WORD PTR [rax+0x1c]
  40711d:	mov    WORD PTR [rbx+0x10],dx
  407121:	mov    edx,DWORD PTR [rax+0x10]
  407124:	mov    eax,DWORD PTR [rax+0x14]
  407127:	add    rdx,QWORD PTR [rbx+0x58]
  40712b:	add    rax,QWORD PTR [rbx+0x88]
  407132:	mov    QWORD PTR [rbx+0x8],rdx
  407136:	mov    QWORD PTR [rbx],rax
  407139:	mov    edx,DWORD PTR [rbx+0x20]
  40713c:	call   403150 <memset@plt>
  407141:	mov    rax,QWORD PTR [rbx+0x30]
  407145:	mov    edi,DWORD PTR [rbx+0x70]
  407148:	mov    edx,DWORD PTR [rax+0x8]
  40714b:	mov    esi,DWORD PTR [rax]
  40714d:	mov    ecx,DWORD PTR [rax+0x4]
  407150:	mov    DWORD PTR [rbx+0x20],edx
  407153:	mov    rdx,rsi
  407156:	sub    edi,edx
  407158:	mov    DWORD PTR [rbx+0x28],esi
  40715b:	mov    edx,edi
  40715d:	add    rsi,QWORD PTR [rbx+0x68]
  407161:	cmp    ecx,edi
  407163:	cmovb  edx,ecx
  407166:	mov    QWORD PTR [rbx+0x18],rsi
  40716a:	mov    DWORD PTR [rbx+0x24],edx
  40716d:	movzx  edx,WORD PTR [rbx+0xea]
  407174:	mov    DWORD PTR [rax+0x4],ecx
  407177:	cmp    dx,WORD PTR [rbx+0xe8]
  40717e:	jbe    407187 <flatcc_builder_end_table@@Base+0x147>
  407180:	mov    WORD PTR [rbx+0xe8],dx
  407187:	movzx  edx,WORD PTR [rax+0xc]
  40718b:	dec    DWORD PTR [rbx+0x104]
  407191:	sub    rax,0x24
  407195:	mov    QWORD PTR [rbx+0x30],rax
  407199:	mov    WORD PTR [rbx+0xea],dx
  4071a0:	add    rsp,0x8
  4071a4:	mov    eax,ebp
  4071a6:	pop    rbx
  4071a7:	pop    rbp
  4071a8:	pop    r12
  4071aa:	pop    r13
  4071ac:	ret    
  4071ad:	lea    rcx,[rip+0x68bc]        # 40da70 <g_data@@Base+0x9b0>
  4071b4:	mov    edx,0x525
  4071b9:	lea    rsi,[rip+0x6188]        # 40d348 <g_data@@Base+0x288>
  4071c0:	lea    rdi,[rip+0x63c9]        # 40d590 <g_data@@Base+0x4d0>
  4071c7:	call   403140 <__assert_fail@plt>
  4071cc:	nop    DWORD PTR [rax+0x0]

00000000004071d0 <flatcc_builder_create_vector@@Base>:
  4071d0:	endbr64 
  4071d4:	push   rbp
  4071d5:	push   rbx
  4071d6:	sub    rsp,0xb8
  4071dd:	mov    rax,QWORD PTR fs:0x28
  4071e6:	mov    QWORD PTR [rsp+0xa8],rax
  4071ee:	xor    eax,eax
  4071f0:	cmp    rdx,r9
  4071f3:	ja     407334 <flatcc_builder_create_vector@@Base+0x164>
  4071f9:	cmp    r8w,0x4
  4071fe:	mov    eax,0x4
  407203:	cmovb  r8d,eax
  407207:	mov    rbx,rdi
  40720a:	movzx  edi,r8w
  40720e:	cmp    r8w,WORD PTR [rbx+0xe8]
  407216:	jbe    407220 <flatcc_builder_create_vector@@Base+0x50>
  407218:	mov    WORD PTR [rbx+0xe8],r8w
  407220:	imul   ecx,edx
  407223:	mov    DWORD PTR [rsp+0xc],edx
  407227:	mov    edx,DWORD PTR [rbx+0xf0]
  40722d:	dec    edi
  40722f:	mov    eax,edx
  407231:	sub    eax,ecx
  407233:	and    eax,edi
  407235:	lea    rdi,[rsp+0xc]
  40723a:	mov    QWORD PTR [rsp+0x10],0x4
  407243:	mov    QWORD PTR [rsp+0x20],rdi
  407248:	mov    QWORD PTR [rsp+0x28],0x4
  407251:	mov    DWORD PTR [rsp+0x18],0x1
  407259:	mov    r8d,0x4
  40725f:	test   ecx,ecx
  407261:	je     40727e <flatcc_builder_create_vector@@Base+0xae>
  407263:	lea    r8,[rcx+0x4]
  407267:	mov    QWORD PTR [rsp+0x10],r8
  40726c:	mov    QWORD PTR [rsp+0x30],rsi
  407271:	mov    QWORD PTR [rsp+0x38],rcx
  407276:	mov    DWORD PTR [rsp+0x18],0x2
  40727e:	test   eax,eax
  407280:	jne    4072e0 <flatcc_builder_create_vector@@Base+0x110>
  407282:	mov    ebp,edx
  407284:	movabs rax,0x10000000f
  40728e:	sub    ebp,r8d
  407291:	cmp    r8,rax
  407294:	ja     407310 <flatcc_builder_create_vector@@Base+0x140>
  407296:	cmp    edx,ebp
  407298:	jle    407310 <flatcc_builder_create_vector@@Base+0x140>
  40729a:	mov    rdi,QWORD PTR [rbx+0x38]
  40729e:	mov    edx,DWORD PTR [rsp+0x18]
  4072a2:	lea    rsi,[rsp+0x20]
  4072a7:	mov    ecx,ebp
  4072a9:	call   QWORD PTR [rbx+0x48]
  4072ac:	test   eax,eax
  4072ae:	jne    40732f <flatcc_builder_create_vector@@Base+0x15f>
  4072b0:	mov    DWORD PTR [rbx+0xf0],ebp
  4072b6:	mov    eax,ebp
  4072b8:	mov    rbx,QWORD PTR [rsp+0xa8]
  4072c0:	xor    rbx,QWORD PTR fs:0x28
  4072c9:	jne    407353 <flatcc_builder_create_vector@@Base+0x183>
  4072cf:	add    rsp,0xb8
  4072d6:	pop    rbx
  4072d7:	pop    rbp
  4072d8:	ret    
  4072d9:	nop    DWORD PTR [rax+0x0]
  4072e0:	movsxd rsi,DWORD PTR [rsp+0x18]
  4072e5:	mov    rdi,0x40de40
  4072ec:	mov    rcx,rsi
  4072ef:	add    r8,rax
  4072f2:	shl    rsi,0x4
  4072f6:	inc    ecx
  4072f8:	mov    QWORD PTR [rsp+0x10],r8
  4072fd:	mov    QWORD PTR [rsp+rsi*1+0x20],rdi
  407302:	mov    QWORD PTR [rsp+rsi*1+0x28],rax
  407307:	mov    DWORD PTR [rsp+0x18],ecx
  40730b:	jmp    407282 <flatcc_builder_create_vector@@Base+0xb2>
  407310:	lea    rcx,[rip+0x6a79]        # 40dd90 <g_data@@Base+0xcd0>
  407317:	mov    edx,0x287
  40731c:	lea    rsi,[rip+0x6025]        # 40d348 <g_data@@Base+0x288>
  407323:	lea    rdi,[rip+0x63b5]        # 40d6df <g_data@@Base+0x61f>
  40732a:	call   403140 <__assert_fail@plt>
  40732f:	call   404c00 <flatcc_builder_default_alloc@@Base+0x2d0>
  407334:	lea    rcx,[rip+0x6715]        # 40da50 <g_data@@Base+0x990>
  40733b:	mov    edx,0x555
  407340:	lea    rsi,[rip+0x6001]        # 40d348 <g_data@@Base+0x288>
  407347:	lea    rdi,[rip+0x6403]        # 40d751 <g_data@@Base+0x691>
  40734e:	call   403140 <__assert_fail@plt>
  407353:	call   403130 <__stack_chk_fail@plt>
  407358:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407360 <flatcc_builder_end_vector@@Base>:
  407360:	endbr64 
  407364:	push   rbp
  407365:	push   rbx
  407366:	sub    rsp,0x8
  40736a:	mov    rax,QWORD PTR [rdi+0x30]
  40736e:	cmp    WORD PTR [rax+0xe],0x4
  407373:	jne    407426 <flatcc_builder_end_vector@@Base+0xc6>
  407379:	mov    ecx,DWORD PTR [rax+0x10]
  40737c:	mov    edx,DWORD PTR [rax+0x14]
  40737f:	mov    rsi,QWORD PTR [rdi+0x18]
  407383:	mov    r9d,DWORD PTR [rax+0x18]
  407387:	movzx  r8d,WORD PTR [rdi+0xea]
  40738f:	mov    rbx,rdi
  407392:	call   4071d0 <flatcc_builder_create_vector@@Base>
  407397:	mov    ebp,eax
  407399:	test   eax,eax
  40739b:	jne    4073b0 <flatcc_builder_end_vector@@Base+0x50>
  40739d:	add    rsp,0x8
  4073a1:	pop    rbx
  4073a2:	mov    eax,ebp
  4073a4:	pop    rbp
  4073a5:	ret    
  4073a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4073b0:	mov    edx,DWORD PTR [rbx+0x20]
  4073b3:	mov    rdi,QWORD PTR [rbx+0x18]
  4073b7:	xor    esi,esi
  4073b9:	call   403150 <memset@plt>
  4073be:	mov    rax,QWORD PTR [rbx+0x30]
  4073c2:	mov    edi,DWORD PTR [rbx+0x70]
  4073c5:	mov    edx,DWORD PTR [rax+0x8]
  4073c8:	mov    esi,DWORD PTR [rax]
  4073ca:	mov    ecx,DWORD PTR [rax+0x4]
  4073cd:	mov    DWORD PTR [rbx+0x20],edx
  4073d0:	mov    rdx,rsi
  4073d3:	sub    edi,edx
  4073d5:	mov    DWORD PTR [rbx+0x28],esi
  4073d8:	mov    edx,edi
  4073da:	add    rsi,QWORD PTR [rbx+0x68]
  4073de:	cmp    ecx,edi
  4073e0:	cmovb  edx,ecx
  4073e3:	mov    QWORD PTR [rbx+0x18],rsi
  4073e7:	mov    DWORD PTR [rbx+0x24],edx
  4073ea:	movzx  edx,WORD PTR [rbx+0xea]
  4073f1:	mov    DWORD PTR [rax+0x4],ecx
  4073f4:	cmp    dx,WORD PTR [rbx+0xe8]
  4073fb:	jbe    407404 <flatcc_builder_end_vector@@Base+0xa4>
  4073fd:	mov    WORD PTR [rbx+0xe8],dx
  407404:	movzx  edx,WORD PTR [rax+0xc]
  407408:	dec    DWORD PTR [rbx+0x104]
  40740e:	sub    rax,0x24
  407412:	mov    QWORD PTR [rbx+0x30],rax
  407416:	mov    WORD PTR [rbx+0xea],dx
  40741d:	add    rsp,0x8
  407421:	mov    eax,ebp
  407423:	pop    rbx
  407424:	pop    rbp
  407425:	ret    
  407426:	lea    rcx,[rip+0x6603]        # 40da30 <g_data@@Base+0x970>
  40742d:	mov    edx,0x578
  407432:	lea    rsi,[rip+0x5f0f]        # 40d348 <g_data@@Base+0x288>
  407439:	lea    rdi,[rip+0x5fe8]        # 40d428 <g_data@@Base+0x368>
  407440:	call   403140 <__assert_fail@plt>
  407445:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407450 <flatcc_builder_vector_count@@Base>:
  407450:	endbr64 
  407454:	mov    rax,QWORD PTR [rdi+0x30]
  407458:	mov    eax,DWORD PTR [rax+0x14]
  40745b:	ret    
  40745c:	nop    DWORD PTR [rax+0x0]

0000000000407460 <flatcc_builder_vector_edit@@Base>:
  407460:	endbr64 
  407464:	mov    rax,QWORD PTR [rdi+0x18]
  407468:	ret    
  407469:	nop    DWORD PTR [rax+0x0]

0000000000407470 <flatcc_builder_create_offset_vector_direct@@Base>:
  407470:	endbr64 
  407474:	xor    ecx,ecx
  407476:	jmp    404d80 <flatcc_builder_default_alloc@@Base+0x450>
  40747b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407480 <flatcc_builder_end_offset_vector@@Base>:
  407480:	endbr64 
  407484:	push   rbp
  407485:	push   rbx
  407486:	sub    rsp,0x8
  40748a:	mov    rax,QWORD PTR [rdi+0x30]
  40748e:	cmp    WORD PTR [rax+0xe],0x5
  407493:	jne    407536 <flatcc_builder_end_offset_vector@@Base+0xb6>
  407499:	mov    edx,DWORD PTR [rax+0x14]
  40749c:	mov    rsi,QWORD PTR [rdi+0x18]
  4074a0:	mov    rbx,rdi
  4074a3:	call   407470 <flatcc_builder_create_offset_vector_direct@@Base>
  4074a8:	mov    ebp,eax
  4074aa:	test   eax,eax
  4074ac:	jne    4074c0 <flatcc_builder_end_offset_vector@@Base+0x40>
  4074ae:	add    rsp,0x8
  4074b2:	pop    rbx
  4074b3:	mov    eax,ebp
  4074b5:	pop    rbp
  4074b6:	ret    
  4074b7:	nop    WORD PTR [rax+rax*1+0x0]
  4074c0:	mov    edx,DWORD PTR [rbx+0x20]
  4074c3:	mov    rdi,QWORD PTR [rbx+0x18]
  4074c7:	xor    esi,esi
  4074c9:	call   403150 <memset@plt>
  4074ce:	mov    rax,QWORD PTR [rbx+0x30]
  4074d2:	mov    edi,DWORD PTR [rbx+0x70]
  4074d5:	mov    edx,DWORD PTR [rax+0x8]
  4074d8:	mov    esi,DWORD PTR [rax]
  4074da:	mov    ecx,DWORD PTR [rax+0x4]
  4074dd:	mov    DWORD PTR [rbx+0x20],edx
  4074e0:	mov    rdx,rsi
  4074e3:	sub    edi,edx
  4074e5:	mov    DWORD PTR [rbx+0x28],esi
  4074e8:	mov    edx,edi
  4074ea:	add    rsi,QWORD PTR [rbx+0x68]
  4074ee:	cmp    ecx,edi
  4074f0:	cmovb  edx,ecx
  4074f3:	mov    QWORD PTR [rbx+0x18],rsi
  4074f7:	mov    DWORD PTR [rbx+0x24],edx
  4074fa:	movzx  edx,WORD PTR [rbx+0xea]
  407501:	mov    DWORD PTR [rax+0x4],ecx
  407504:	cmp    dx,WORD PTR [rbx+0xe8]
  40750b:	jbe    407514 <flatcc_builder_end_offset_vector@@Base+0x94>
  40750d:	mov    WORD PTR [rbx+0xe8],dx
  407514:	movzx  edx,WORD PTR [rax+0xc]
  407518:	dec    DWORD PTR [rbx+0x104]
  40751e:	sub    rax,0x24
  407522:	mov    QWORD PTR [rbx+0x30],rax
  407526:	mov    WORD PTR [rbx+0xea],dx
  40752d:	add    rsp,0x8
  407531:	mov    eax,ebp
  407533:	pop    rbx
  407534:	pop    rbp
  407535:	ret    
  407536:	lea    rcx,[rip+0x64a3]        # 40d9e0 <g_data@@Base+0x920>
  40753d:	mov    edx,0x5c8
  407542:	lea    rsi,[rip+0x5dff]        # 40d348 <g_data@@Base+0x288>
  407549:	lea    rdi,[rip+0x5f48]        # 40d498 <g_data@@Base+0x3d8>
  407550:	call   403140 <__assert_fail@plt>
  407555:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407560 <flatcc_builder_create_offset_vector@@Base>:
  407560:	endbr64 
  407564:	push   r12
  407566:	mov    r12,rsi
  407569:	push   rbp
  40756a:	mov    rbp,rdx
  40756d:	push   rbx
  40756e:	mov    rbx,rdi
  407571:	call   406520 <flatcc_builder_start_offset_vector@@Base>
  407576:	test   eax,eax
  407578:	je     407588 <flatcc_builder_create_offset_vector@@Base+0x28>
  40757a:	pop    rbx
  40757b:	pop    rbp
  40757c:	xor    eax,eax
  40757e:	pop    r12
  407580:	ret    
  407581:	nop    DWORD PTR [rax+0x0]
  407588:	mov    rsi,rbp
  40758b:	mov    rdi,rbx
  40758e:	call   405fd0 <flatcc_builder_extend_offset_vector@@Base>
  407593:	test   rax,rax
  407596:	je     40757a <flatcc_builder_create_offset_vector@@Base+0x1a>
  407598:	lea    rdx,[rbp*4+0x0]
  4075a0:	mov    rsi,r12
  4075a3:	mov    rdi,rax
  4075a6:	call   403180 <memcpy@plt>
  4075ab:	mov    rdi,rbx
  4075ae:	pop    rbx
  4075af:	pop    rbp
  4075b0:	pop    r12
  4075b2:	jmp    407480 <flatcc_builder_end_offset_vector@@Base>
  4075b7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004075c0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  4075c0:	endbr64 
  4075c4:	push   rbp
  4075c5:	push   rbx
  4075c6:	sub    rsp,0x8
  4075ca:	mov    rax,QWORD PTR [rdi+0x30]
  4075ce:	cmp    WORD PTR [rax+0xe],0x5
  4075d3:	jne    407676 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb6>
  4075d9:	mov    rcx,rsi
  4075dc:	mov    edx,DWORD PTR [rax+0x14]
  4075df:	mov    rsi,QWORD PTR [rdi+0x18]
  4075e3:	mov    rbx,rdi
  4075e6:	call   404d80 <flatcc_builder_default_alloc@@Base+0x450>
  4075eb:	mov    ebp,eax
  4075ed:	test   eax,eax
  4075ef:	jne    407600 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
  4075f1:	add    rsp,0x8
  4075f5:	pop    rbx
  4075f6:	mov    eax,ebp
  4075f8:	pop    rbp
  4075f9:	ret    
  4075fa:	nop    WORD PTR [rax+rax*1+0x0]
  407600:	mov    edx,DWORD PTR [rbx+0x20]
  407603:	mov    rdi,QWORD PTR [rbx+0x18]
  407607:	xor    esi,esi
  407609:	call   403150 <memset@plt>
  40760e:	mov    rax,QWORD PTR [rbx+0x30]
  407612:	mov    edi,DWORD PTR [rbx+0x70]
  407615:	mov    edx,DWORD PTR [rax+0x8]
  407618:	mov    esi,DWORD PTR [rax]
  40761a:	mov    ecx,DWORD PTR [rax+0x4]
  40761d:	mov    DWORD PTR [rbx+0x20],edx
  407620:	mov    rdx,rsi
  407623:	sub    edi,edx
  407625:	mov    DWORD PTR [rbx+0x28],esi
  407628:	mov    edx,edi
  40762a:	add    rsi,QWORD PTR [rbx+0x68]
  40762e:	cmp    ecx,edi
  407630:	cmovb  edx,ecx
  407633:	mov    QWORD PTR [rbx+0x18],rsi
  407637:	mov    DWORD PTR [rbx+0x24],edx
  40763a:	movzx  edx,WORD PTR [rbx+0xea]
  407641:	mov    DWORD PTR [rax+0x4],ecx
  407644:	cmp    dx,WORD PTR [rbx+0xe8]
  40764b:	jbe    407654 <flatcc_builder_end_offset_vector_for_unions@@Base+0x94>
  40764d:	mov    WORD PTR [rbx+0xe8],dx
  407654:	movzx  edx,WORD PTR [rax+0xc]
  407658:	dec    DWORD PTR [rbx+0x104]
  40765e:	sub    rax,0x24
  407662:	mov    QWORD PTR [rbx+0x30],rax
  407666:	mov    WORD PTR [rbx+0xea],dx
  40766d:	add    rsp,0x8
  407671:	mov    eax,ebp
  407673:	pop    rbx
  407674:	pop    rbp
  407675:	ret    
  407676:	lea    rcx,[rip+0x6323]        # 40d9a0 <g_data@@Base+0x8e0>
  40767d:	mov    edx,0x5d5
  407682:	lea    rsi,[rip+0x5cbf]        # 40d348 <g_data@@Base+0x288>
  407689:	lea    rdi,[rip+0x5e08]        # 40d498 <g_data@@Base+0x3d8>
  407690:	call   403140 <__assert_fail@plt>
  407695:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004076a0 <flatcc_builder_offset_vector_edit@@Base>:
  4076a0:	endbr64 
  4076a4:	mov    rax,QWORD PTR [rdi+0x18]
  4076a8:	ret    
  4076a9:	nop    DWORD PTR [rax+0x0]

00000000004076b0 <flatcc_builder_offset_vector_count@@Base>:
  4076b0:	endbr64 
  4076b4:	mov    rax,QWORD PTR [rdi+0x30]
  4076b8:	mov    eax,DWORD PTR [rax+0x14]
  4076bb:	ret    
  4076bc:	nop    DWORD PTR [rax+0x0]

00000000004076c0 <flatcc_builder_create_union_vector_direct@@Base>:
  4076c0:	endbr64 
  4076c4:	push   r13
  4076c6:	mov    r13,rcx
  4076c9:	push   r12
  4076cb:	mov    r12,rsi
  4076ce:	mov    rcx,r12
  4076d1:	push   rbp
  4076d2:	mov    rsi,rdx
  4076d5:	mov    rdx,r13
  4076d8:	push   rbx
  4076d9:	mov    rbp,rdi
  4076dc:	sub    rsp,0x8
  4076e0:	call   404d80 <flatcc_builder_default_alloc@@Base+0x450>
  4076e5:	test   eax,eax
  4076e7:	jne    407700 <flatcc_builder_create_union_vector_direct@@Base+0x40>
  4076e9:	add    rsp,0x8
  4076ed:	pop    rbx
  4076ee:	pop    rbp
  4076ef:	pop    r12
  4076f1:	xor    eax,eax
  4076f3:	pop    r13
  4076f5:	ret    
  4076f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407700:	mov    rdx,r13
  407703:	mov    rsi,r12
  407706:	mov    rdi,rbp
  407709:	mov    r9d,0xffffffff
  40770f:	mov    r8d,0x1
  407715:	mov    ecx,0x1
  40771a:	mov    ebx,eax
  40771c:	call   4071d0 <flatcc_builder_create_vector@@Base>
  407721:	mov    edx,eax
  407723:	mov    rsi,rbx
  407726:	shl    rsi,0x20
  40772a:	mov    rax,rdx
  40772d:	or     rax,rsi
  407730:	test   edx,edx
  407732:	mov    rdx,rax
  407735:	mov    rax,rsi
  407738:	cmovne rax,rdx
  40773c:	add    rsp,0x8
  407740:	pop    rbx
  407741:	pop    rbp
  407742:	pop    r12
  407744:	pop    r13
  407746:	ret    
  407747:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407750 <flatcc_builder_create_union_vector@@Base>:
  407750:	endbr64 
  407754:	push   r13
  407756:	push   r12
  407758:	mov    r12,rdx
  40775b:	push   rbp
  40775c:	mov    rbp,rsi
  40775f:	push   rbx
  407760:	mov    rbx,rdi
  407763:	sub    rsp,0x8
  407767:	call   406520 <flatcc_builder_start_offset_vector@@Base>
  40776c:	test   eax,eax
  40776e:	je     407780 <flatcc_builder_create_union_vector@@Base+0x30>
  407770:	add    rsp,0x8
  407774:	pop    rbx
  407775:	pop    rbp
  407776:	pop    r12
  407778:	xor    eax,eax
  40777a:	pop    r13
  40777c:	ret    
  40777d:	nop    DWORD PTR [rax]
  407780:	mov    rsi,r12
  407783:	mov    rdi,rbx
  407786:	call   405fd0 <flatcc_builder_extend_offset_vector@@Base>
  40778b:	test   rax,rax
  40778e:	je     407770 <flatcc_builder_create_union_vector@@Base+0x20>
  407790:	mov    r13d,DWORD PTR [rbx+0x20]
  407794:	mov    rax,r13
  407797:	add    eax,r12d
  40779a:	mov    DWORD PTR [rbx+0x20],eax
  40779d:	cmp    eax,DWORD PTR [rbx+0x24]
  4077a0:	jae    407870 <flatcc_builder_create_union_vector@@Base+0x120>
  4077a6:	add    r13,QWORD PTR [rbx+0x18]
  4077aa:	je     407770 <flatcc_builder_create_union_vector@@Base+0x20>
  4077ac:	mov    rdi,rbx
  4077af:	call   4076a0 <flatcc_builder_offset_vector_edit@@Base>
  4077b4:	test   r12,r12
  4077b7:	je     4077d9 <flatcc_builder_create_union_vector@@Base+0x89>
  4077b9:	xor    edi,edi
  4077bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4077c0:	movzx  ecx,BYTE PTR [rbp+rdi*8+0x0]
  4077c5:	mov    BYTE PTR [r13+rdi*1+0x0],cl
  4077ca:	mov    ecx,DWORD PTR [rbp+rdi*8+0x4]
  4077ce:	mov    DWORD PTR [rax+rdi*4],ecx
  4077d1:	inc    rdi
  4077d4:	cmp    r12,rdi
  4077d7:	jne    4077c0 <flatcc_builder_create_union_vector@@Base+0x70>
  4077d9:	mov    rcx,r12
  4077dc:	mov    rdx,rax
  4077df:	mov    rsi,r13
  4077e2:	mov    rdi,rbx
  4077e5:	call   4076c0 <flatcc_builder_create_union_vector_direct@@Base>
  4077ea:	mov    edx,DWORD PTR [rbx+0x20]
  4077ed:	mov    rdi,QWORD PTR [rbx+0x18]
  4077f1:	xor    esi,esi
  4077f3:	mov    rbp,rax
  4077f6:	call   403150 <memset@plt>
  4077fb:	mov    rax,QWORD PTR [rbx+0x30]
  4077ff:	mov    edx,DWORD PTR [rax+0x8]
  407802:	mov    esi,DWORD PTR [rax]
  407804:	mov    DWORD PTR [rbx+0x20],edx
  407807:	mov    DWORD PTR [rbx+0x28],esi
  40780a:	mov    rdx,rsi
  40780d:	add    rsi,QWORD PTR [rbx+0x68]
  407811:	mov    ecx,DWORD PTR [rax+0x4]
  407814:	mov    QWORD PTR [rbx+0x18],rsi
  407818:	mov    esi,DWORD PTR [rbx+0x70]
  40781b:	sub    esi,edx
  40781d:	mov    edx,esi
  40781f:	cmp    ecx,esi
  407821:	cmovb  edx,ecx
  407824:	mov    DWORD PTR [rbx+0x24],edx
  407827:	movzx  edx,WORD PTR [rbx+0xea]
  40782e:	mov    DWORD PTR [rax+0x4],ecx
  407831:	cmp    dx,WORD PTR [rbx+0xe8]
  407838:	jbe    407841 <flatcc_builder_create_union_vector@@Base+0xf1>
  40783a:	mov    WORD PTR [rbx+0xe8],dx
  407841:	movzx  edx,WORD PTR [rax+0xc]
  407845:	sub    rax,0x24
  407849:	mov    QWORD PTR [rbx+0x30],rax
  40784d:	mov    WORD PTR [rbx+0xea],dx
  407854:	dec    DWORD PTR [rbx+0x104]
  40785a:	add    rsp,0x8
  40785e:	pop    rbx
  40785f:	mov    rax,rbp
  407862:	pop    rbp
  407863:	pop    r12
  407865:	pop    r13
  407867:	ret    
  407868:	nop    DWORD PTR [rax+rax*1+0x0]
  407870:	lea    esi,[rax+0x1]
  407873:	mov    edx,0xfffffffc
  407878:	mov    rdi,rbx
  40787b:	call   4048d0 <test@@Base+0x1590>
  407880:	test   eax,eax
  407882:	je     4077a6 <flatcc_builder_create_union_vector@@Base+0x56>
  407888:	jmp    407770 <flatcc_builder_create_union_vector@@Base+0x20>
  40788d:	nop    DWORD PTR [rax]

0000000000407890 <flatcc_builder_start_union_vector@@Base>:
  407890:	endbr64 
  407894:	push   rbx
  407895:	mov    esi,0x4
  40789a:	mov    rbx,rdi
  40789d:	call   404c60 <flatcc_builder_default_alloc@@Base+0x330>
  4078a2:	test   eax,eax
  4078a4:	jne    4078e0 <flatcc_builder_start_union_vector@@Base+0x50>
  4078a6:	mov    rcx,QWORD PTR [rbx+0x30]
  4078aa:	xor    edx,edx
  4078ac:	mov    QWORD PTR [rcx+0xe],0x80007
  4078b4:	mov    WORD PTR [rcx+0x16],dx
  4078b8:	mov    edx,DWORD PTR [rbx+0x28]
  4078bb:	mov    rsi,rdx
  4078be:	add    rdx,QWORD PTR [rbx+0x68]
  4078c2:	mov    QWORD PTR [rbx+0x18],rdx
  4078c6:	mov    edx,DWORD PTR [rbx+0x70]
  4078c9:	sub    edx,esi
  4078cb:	mov    esi,0xfffffffc
  4078d0:	cmp    edx,esi
  4078d2:	cmova  edx,esi
  4078d5:	mov    DWORD PTR [rbx+0x24],edx
  4078d8:	mov    DWORD PTR [rcx+0x4],esi
  4078db:	pop    rbx
  4078dc:	ret    
  4078dd:	nop    DWORD PTR [rax]
  4078e0:	mov    eax,0xffffffff
  4078e5:	pop    rbx
  4078e6:	ret    
  4078e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004078f0 <flatcc_builder_union_vector_edit@@Base>:
  4078f0:	endbr64 
  4078f4:	mov    rax,QWORD PTR [rdi+0x18]
  4078f8:	ret    
  4078f9:	nop    DWORD PTR [rax+0x0]

0000000000407900 <flatcc_builder_union_vector_count@@Base>:
  407900:	endbr64 
  407904:	mov    rax,QWORD PTR [rdi+0x30]
  407908:	mov    eax,DWORD PTR [rax+0x14]
  40790b:	ret    
  40790c:	nop    DWORD PTR [rax+0x0]

0000000000407910 <flatcc_builder_end_union_vector@@Base>:
  407910:	endbr64 
  407914:	push   r13
  407916:	push   r12
  407918:	push   rbp
  407919:	push   rbx
  40791a:	sub    rsp,0x8
  40791e:	mov    rax,QWORD PTR [rdi+0x30]
  407922:	cmp    WORD PTR [rax+0xe],0x7
  407927:	jne    407a4d <flatcc_builder_end_union_vector@@Base+0x13d>
  40792d:	mov    rbx,rdi
  407930:	call   407900 <flatcc_builder_union_vector_count@@Base>
  407935:	mov    ebp,DWORD PTR [rbx+0x20]
  407938:	mov    r12,rax
  40793b:	lea    eax,[rax+rax*4]
  40793e:	add    eax,ebp
  407940:	mov    DWORD PTR [rbx+0x20],eax
  407943:	cmp    eax,DWORD PTR [rbx+0x24]
  407946:	jae    407a28 <flatcc_builder_end_union_vector@@Base+0x118>
  40794c:	add    rbp,QWORD PTR [rbx+0x18]
  407950:	je     407a40 <flatcc_builder_end_union_vector@@Base+0x130>
  407956:	mov    rdi,rbx
  407959:	lea    r13,[rbp+r12*4+0x0]
  40795e:	call   4078f0 <flatcc_builder_union_vector_edit@@Base>
  407963:	test   r12,r12
  407966:	je     40798c <flatcc_builder_end_union_vector@@Base+0x7c>
  407968:	xor    edi,edi
  40796a:	nop    WORD PTR [rax+rax*1+0x0]
  407970:	movzx  r8d,BYTE PTR [rax+rdi*8]
  407975:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  40797a:	mov    r8d,DWORD PTR [rax+rdi*8+0x4]
  40797f:	mov    DWORD PTR [rbp+rdi*4+0x0],r8d
  407984:	inc    rdi
  407987:	cmp    r12,rdi
  40798a:	jne    407970 <flatcc_builder_end_union_vector@@Base+0x60>
  40798c:	mov    rcx,r12
  40798f:	mov    rdx,rbp
  407992:	mov    rsi,r13
  407995:	mov    rdi,rbx
  407998:	call   4076c0 <flatcc_builder_create_union_vector_direct@@Base>
  40799d:	mov    edx,DWORD PTR [rbx+0x20]
  4079a0:	mov    rdi,QWORD PTR [rbx+0x18]
  4079a4:	xor    esi,esi
  4079a6:	mov    rbp,rax
  4079a9:	call   403150 <memset@plt>
  4079ae:	mov    rdx,QWORD PTR [rbx+0x30]
  4079b2:	mov    esi,DWORD PTR [rdx]
  4079b4:	mov    eax,DWORD PTR [rdx+0x8]
  4079b7:	mov    rcx,rsi
  4079ba:	mov    DWORD PTR [rbx+0x28],esi
  4079bd:	add    rsi,QWORD PTR [rbx+0x68]
  4079c1:	mov    DWORD PTR [rbx+0x20],eax
  4079c4:	mov    eax,DWORD PTR [rdx+0x4]
  4079c7:	mov    QWORD PTR [rbx+0x18],rsi
  4079cb:	mov    esi,DWORD PTR [rbx+0x70]
  4079ce:	sub    esi,ecx
  4079d0:	cmp    eax,esi
  4079d2:	mov    ecx,esi
  4079d4:	cmovb  ecx,eax
  4079d7:	mov    DWORD PTR [rbx+0x24],ecx
  4079da:	mov    DWORD PTR [rdx+0x4],eax
  4079dd:	movzx  eax,WORD PTR [rbx+0xea]
  4079e4:	cmp    ax,WORD PTR [rbx+0xe8]
  4079eb:	ja     407a18 <flatcc_builder_end_union_vector@@Base+0x108>
  4079ed:	movzx  eax,WORD PTR [rdx+0xc]
  4079f1:	dec    DWORD PTR [rbx+0x104]
  4079f7:	sub    rdx,0x24
  4079fb:	mov    WORD PTR [rbx+0xea],ax
  407a02:	mov    QWORD PTR [rbx+0x30],rdx
  407a06:	add    rsp,0x8
  407a0a:	mov    rax,rbp
  407a0d:	pop    rbx
  407a0e:	pop    rbp
  407a0f:	pop    r12
  407a11:	pop    r13
  407a13:	ret    
  407a14:	nop    DWORD PTR [rax+0x0]
  407a18:	mov    WORD PTR [rbx+0xe8],ax
  407a1f:	jmp    4079ed <flatcc_builder_end_union_vector@@Base+0xdd>
  407a21:	nop    DWORD PTR [rax+0x0]
  407a28:	lea    esi,[rax+0x1]
  407a2b:	mov    edx,0xfffffffc
  407a30:	mov    rdi,rbx
  407a33:	call   4048d0 <test@@Base+0x1590>
  407a38:	test   eax,eax
  407a3a:	je     40794c <flatcc_builder_end_union_vector@@Base+0x3c>
  407a40:	add    rsp,0x8
  407a44:	pop    rbx
  407a45:	pop    rbp
  407a46:	pop    r12
  407a48:	xor    eax,eax
  407a4a:	pop    r13
  407a4c:	ret    
  407a4d:	lea    rcx,[rip+0x5ecc]        # 40d920 <g_data@@Base+0x860>
  407a54:	mov    edx,0x651
  407a59:	lea    rsi,[rip+0x58e8]        # 40d348 <g_data@@Base+0x288>
  407a60:	lea    rdi,[rip+0x5b59]        # 40d5c0 <g_data@@Base+0x500>
  407a67:	call   403140 <__assert_fail@plt>
  407a6c:	nop    DWORD PTR [rax+0x0]

0000000000407a70 <flatcc_builder_extend_union_vector@@Base>:
  407a70:	endbr64 
  407a74:	push   rbp
  407a75:	mov    edx,esi
  407a77:	push   rbx
  407a78:	sub    rsp,0x8
  407a7c:	mov    rax,QWORD PTR [rdi+0x30]
  407a80:	add    edx,DWORD PTR [rax+0x14]
  407a83:	jb     407ac5 <flatcc_builder_extend_union_vector@@Base+0x55>
  407a85:	cmp    edx,0x1fffffff
  407a8b:	ja     407ac5 <flatcc_builder_extend_union_vector@@Base+0x55>
  407a8d:	mov    ebp,DWORD PTR [rdi+0x20]
  407a90:	mov    DWORD PTR [rax+0x14],edx
  407a93:	lea    eax,[rbp+rsi*8+0x0]
  407a97:	mov    rbx,rdi
  407a9a:	mov    DWORD PTR [rdi+0x20],eax
  407a9d:	cmp    eax,DWORD PTR [rdi+0x24]
  407aa0:	jae    407ab0 <flatcc_builder_extend_union_vector@@Base+0x40>
  407aa2:	mov    rax,QWORD PTR [rbx+0x18]
  407aa6:	add    rax,rbp
  407aa9:	add    rsp,0x8
  407aad:	pop    rbx
  407aae:	pop    rbp
  407aaf:	ret    
  407ab0:	lea    esi,[rax+0x1]
  407ab3:	mov    edx,0xfffffffc
  407ab8:	call   4048d0 <test@@Base+0x1590>
  407abd:	test   eax,eax
  407abf:	je     407aa2 <flatcc_builder_extend_union_vector@@Base+0x32>
  407ac1:	xor    eax,eax
  407ac3:	jmp    407aa9 <flatcc_builder_extend_union_vector@@Base+0x39>
  407ac5:	call   404c30 <flatcc_builder_default_alloc@@Base+0x300>
  407aca:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407ad0 <flatcc_builder_truncate_union_vector@@Base>:
  407ad0:	endbr64 
  407ad4:	sub    rsp,0x8
  407ad8:	mov    rax,QWORD PTR [rdi+0x30]
  407adc:	cmp    WORD PTR [rax+0xe],0x7
  407ae1:	jne    407b12 <flatcc_builder_truncate_union_vector@@Base+0x42>
  407ae3:	mov    edx,DWORD PTR [rax+0x14]
  407ae6:	cmp    edx,esi
  407ae8:	jb     407b31 <flatcc_builder_truncate_union_vector@@Base+0x61>
  407aea:	sub    edx,esi
  407aec:	mov    DWORD PTR [rax+0x14],edx
  407aef:	imul   esi,DWORD PTR [rax+0x10]
  407af3:	mov    eax,DWORD PTR [rdi+0x20]
  407af6:	mov    edx,esi
  407af8:	sub    eax,esi
  407afa:	mov    DWORD PTR [rdi+0x20],eax
  407afd:	add    rax,QWORD PTR [rdi+0x18]
  407b01:	mov    rdi,rax
  407b04:	xor    esi,esi
  407b06:	call   403150 <memset@plt>
  407b0b:	xor    eax,eax
  407b0d:	add    rsp,0x8
  407b11:	ret    
  407b12:	lea    rcx,[rip+0x5dc7]        # 40d8e0 <g_data@@Base+0x820>
  407b19:	mov    edx,0x681
  407b1e:	lea    rsi,[rip+0x5823]        # 40d348 <g_data@@Base+0x288>
  407b25:	lea    rdi,[rip+0x5a94]        # 40d5c0 <g_data@@Base+0x500>
  407b2c:	call   403140 <__assert_fail@plt>
  407b31:	lea    rcx,[rip+0x5da8]        # 40d8e0 <g_data@@Base+0x820>
  407b38:	mov    edx,0x682
  407b3d:	lea    rsi,[rip+0x5804]        # 40d348 <g_data@@Base+0x288>
  407b44:	lea    rdi,[rip+0x59dd]        # 40d528 <g_data@@Base+0x468>
  407b4b:	call   403140 <__assert_fail@plt>

0000000000407b50 <flatcc_builder_union_vector_push@@Base>:
  407b50:	endbr64 
  407b54:	push   r12
  407b56:	push   rbp
  407b57:	push   rbx
  407b58:	mov    rdx,QWORD PTR [rdi+0x30]
  407b5c:	cmp    WORD PTR [rdx+0xe],0x7
  407b61:	jne    407bb8 <flatcc_builder_union_vector_push@@Base+0x68>
  407b63:	mov    eax,DWORD PTR [rdx+0x14]
  407b66:	cmp    eax,0x1fffffff
  407b6b:	je     407bb1 <flatcc_builder_union_vector_push@@Base+0x61>
  407b6d:	mov    ebp,DWORD PTR [rdi+0x20]
  407b70:	inc    eax
  407b72:	mov    DWORD PTR [rdx+0x14],eax
  407b75:	lea    edx,[rbp+0x8]
  407b78:	mov    rbx,rdi
  407b7b:	mov    r12,rsi
  407b7e:	mov    DWORD PTR [rdi+0x20],edx
  407b81:	cmp    edx,DWORD PTR [rdi+0x24]
  407b84:	jae    407ba0 <flatcc_builder_union_vector_push@@Base+0x50>
  407b86:	mov    rax,rbp
  407b89:	add    rax,QWORD PTR [rbx+0x18]
  407b8d:	je     407b92 <flatcc_builder_union_vector_push@@Base+0x42>
  407b8f:	mov    QWORD PTR [rax],r12
  407b92:	pop    rbx
  407b93:	pop    rbp
  407b94:	pop    r12
  407b96:	ret    
  407b97:	nop    WORD PTR [rax+rax*1+0x0]
  407ba0:	lea    esi,[rbp+0x9]
  407ba3:	mov    edx,0xfffffffc
  407ba8:	call   4048d0 <test@@Base+0x1590>
  407bad:	test   eax,eax
  407baf:	je     407b86 <flatcc_builder_union_vector_push@@Base+0x36>
  407bb1:	pop    rbx
  407bb2:	pop    rbp
  407bb3:	xor    eax,eax
  407bb5:	pop    r12
  407bb7:	ret    
  407bb8:	lea    rcx,[rip+0x5ce1]        # 40d8a0 <g_data@@Base+0x7e0>
  407bbf:	mov    edx,0x68d
  407bc4:	lea    rsi,[rip+0x577d]        # 40d348 <g_data@@Base+0x288>
  407bcb:	lea    rdi,[rip+0x59ee]        # 40d5c0 <g_data@@Base+0x500>
  407bd2:	call   403140 <__assert_fail@plt>
  407bd7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407be0 <flatcc_builder_append_union_vector@@Base>:
  407be0:	endbr64 
  407be4:	push   r13
  407be6:	push   r12
  407be8:	push   rbp
  407be9:	push   rbx
  407bea:	sub    rsp,0x8
  407bee:	mov    rax,QWORD PTR [rdi+0x30]
  407bf2:	cmp    WORD PTR [rax+0xe],0x7
  407bf7:	jne    407c66 <flatcc_builder_append_union_vector@@Base+0x86>
  407bf9:	mov    ecx,edx
  407bfb:	add    ecx,DWORD PTR [rax+0x14]
  407bfe:	jb     407c85 <flatcc_builder_append_union_vector@@Base+0xa5>
  407c04:	cmp    ecx,0x1fffffff
  407c0a:	ja     407c85 <flatcc_builder_append_union_vector@@Base+0xa5>
  407c0c:	mov    r12d,DWORD PTR [rdi+0x20]
  407c10:	lea    ebx,[rdx*8+0x0]
  407c17:	mov    rdx,r12
  407c1a:	add    edx,ebx
  407c1c:	mov    DWORD PTR [rax+0x14],ecx
  407c1f:	mov    rbp,rdi
  407c22:	mov    r13,rsi
  407c25:	mov    DWORD PTR [rdi+0x20],edx
  407c28:	cmp    edx,DWORD PTR [rdi+0x24]
  407c2b:	jae    407c50 <flatcc_builder_append_union_vector@@Base+0x70>
  407c2d:	add    r12,QWORD PTR [rbp+0x18]
  407c31:	je     407c40 <flatcc_builder_append_union_vector@@Base+0x60>
  407c33:	mov    edx,ebx
  407c35:	mov    rsi,r13
  407c38:	mov    rdi,r12
  407c3b:	call   403180 <memcpy@plt>
  407c40:	add    rsp,0x8
  407c44:	pop    rbx
  407c45:	pop    rbp
  407c46:	mov    rax,r12
  407c49:	pop    r12
  407c4b:	pop    r13
  407c4d:	ret    
  407c4e:	xchg   ax,ax
  407c50:	lea    esi,[rdx+0x1]
  407c53:	mov    edx,0xfffffffc
  407c58:	call   4048d0 <test@@Base+0x1590>
  407c5d:	test   eax,eax
  407c5f:	je     407c2d <flatcc_builder_append_union_vector@@Base+0x4d>
  407c61:	xor    r12d,r12d
  407c64:	jmp    407c40 <flatcc_builder_append_union_vector@@Base+0x60>
  407c66:	lea    rcx,[rip+0x5bf3]        # 40d860 <g_data@@Base+0x7a0>
  407c6d:	mov    edx,0x69c
  407c72:	lea    rsi,[rip+0x56cf]        # 40d348 <g_data@@Base+0x288>
  407c79:	lea    rdi,[rip+0x5940]        # 40d5c0 <g_data@@Base+0x500>
  407c80:	call   403140 <__assert_fail@plt>
  407c85:	call   404c30 <flatcc_builder_default_alloc@@Base+0x300>
  407c8a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407c90 <flatcc_builder_create_string@@Base>:
  407c90:	endbr64 
  407c94:	push   rbp
  407c95:	push   rbx
  407c96:	sub    rsp,0xb8
  407c9d:	mov    rax,QWORD PTR fs:0x28
  407ca6:	mov    QWORD PTR [rsp+0xa8],rax
  407cae:	xor    eax,eax
  407cb0:	mov    eax,0xffffffff
  407cb5:	cmp    rdx,rax
  407cb8:	ja     407d80 <flatcc_builder_create_string@@Base+0xf0>
  407cbe:	mov    rbx,rdi
  407cc1:	mov    edi,DWORD PTR [rdi+0xf0]
  407cc7:	lea    rcx,[rsp+0xc]
  407ccc:	lea    eax,[rdi-0x1]
  407ccf:	sub    eax,edx
  407cd1:	and    eax,0x3
  407cd4:	mov    DWORD PTR [rsp+0xc],edx
  407cd8:	inc    eax
  407cda:	mov    QWORD PTR [rsp+0x20],rcx
  407cdf:	mov    QWORD PTR [rsp+0x28],0x4
  407ce8:	test   rdx,rdx
  407ceb:	jne    407d60 <flatcc_builder_create_string@@Base+0xd0>
  407ced:	mov    edx,0x2
  407cf2:	mov    ecx,0x1
  407cf7:	mov    r8d,0x4
  407cfd:	add    r8,rax
  407d00:	mov    rsi,0x40de40
  407d07:	mov    ebp,edi
  407d09:	shl    rcx,0x4
  407d0d:	sub    ebp,r8d
  407d10:	mov    QWORD PTR [rsp+0x10],r8
  407d15:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  407d1a:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  407d1f:	mov    DWORD PTR [rsp+0x18],edx
  407d23:	cmp    edi,ebp
  407d25:	jle    407d84 <flatcc_builder_create_string@@Base+0xf4>
  407d27:	mov    rdi,QWORD PTR [rbx+0x38]
  407d2b:	lea    rsi,[rsp+0x20]
  407d30:	mov    ecx,ebp
  407d32:	call   QWORD PTR [rbx+0x48]
  407d35:	test   eax,eax
  407d37:	jne    407da8 <flatcc_builder_create_string@@Base+0x118>
  407d39:	mov    DWORD PTR [rbx+0xf0],ebp
  407d3f:	mov    rbx,QWORD PTR [rsp+0xa8]
  407d47:	xor    rbx,QWORD PTR fs:0x28
  407d50:	mov    eax,ebp
  407d52:	jne    407da3 <flatcc_builder_create_string@@Base+0x113>
  407d54:	add    rsp,0xb8
  407d5b:	pop    rbx
  407d5c:	pop    rbp
  407d5d:	ret    
  407d5e:	xchg   ax,ax
  407d60:	lea    r8,[rdx+0x4]
  407d64:	mov    QWORD PTR [rsp+0x38],rdx
  407d69:	mov    QWORD PTR [rsp+0x30],rsi
  407d6e:	mov    edx,0x3
  407d73:	mov    ecx,0x2
  407d78:	jmp    407cfd <flatcc_builder_create_string@@Base+0x6d>
  407d7d:	nop    DWORD PTR [rax]
  407d80:	xor    ebp,ebp
  407d82:	jmp    407d3f <flatcc_builder_create_string@@Base+0xaf>
  407d84:	lea    rcx,[rip+0x6005]        # 40dd90 <g_data@@Base+0xcd0>
  407d8b:	mov    edx,0x287
  407d90:	lea    rsi,[rip+0x55b1]        # 40d348 <g_data@@Base+0x288>
  407d97:	lea    rdi,[rip+0x5941]        # 40d6df <g_data@@Base+0x61f>
  407d9e:	call   403140 <__assert_fail@plt>
  407da3:	call   403130 <__stack_chk_fail@plt>
  407da8:	call   404c00 <flatcc_builder_default_alloc@@Base+0x2d0>
  407dad:	nop    DWORD PTR [rax]

0000000000407db0 <flatcc_builder_create_string_str@@Base>:
  407db0:	endbr64 
  407db4:	push   rbp
  407db5:	mov    rbp,rdi
  407db8:	mov    rdi,rsi
  407dbb:	push   rbx
  407dbc:	mov    rbx,rsi
  407dbf:	sub    rsp,0x8
  407dc3:	call   403120 <strlen@plt>
  407dc8:	add    rsp,0x8
  407dcc:	mov    rsi,rbx
  407dcf:	pop    rbx
  407dd0:	mov    rdi,rbp
  407dd3:	mov    rdx,rax
  407dd6:	pop    rbp
  407dd7:	jmp    407c90 <flatcc_builder_create_string@@Base>
  407ddc:	nop    DWORD PTR [rax+0x0]

0000000000407de0 <flatcc_builder_create_string_strn@@Base>:
  407de0:	endbr64 
  407de4:	push   r12
  407de6:	mov    r12,rdi
  407de9:	push   rbp
  407dea:	mov    rbp,rsi
  407ded:	mov    rdi,rbp
  407df0:	push   rbx
  407df1:	xor    esi,esi
  407df3:	mov    rbx,rdx
  407df6:	call   403160 <memchr@plt>
  407dfb:	mov    rdx,rax
  407dfe:	sub    rdx,rbp
  407e01:	test   rax,rax
  407e04:	cmovne rbx,rdx
  407e08:	mov    rsi,rbp
  407e0b:	mov    rdx,rbx
  407e0e:	pop    rbx
  407e0f:	pop    rbp
  407e10:	mov    rdi,r12
  407e13:	pop    r12
  407e15:	jmp    407c90 <flatcc_builder_create_string@@Base>
  407e1a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407e20 <flatcc_builder_end_string@@Base>:
  407e20:	endbr64 
  407e24:	push   rbp
  407e25:	push   rbx
  407e26:	sub    rsp,0x8
  407e2a:	mov    rax,QWORD PTR [rdi+0x30]
  407e2e:	cmp    WORD PTR [rax+0xe],0x6
  407e33:	jne    407ef5 <flatcc_builder_end_string@@Base+0xd5>
  407e39:	mov    edx,DWORD PTR [rdi+0x20]
  407e3c:	mov    rbx,rdi
  407e3f:	cmp    DWORD PTR [rax+0x14],edx
  407e42:	jne    407ed6 <flatcc_builder_end_string@@Base+0xb6>
  407e48:	mov    rsi,QWORD PTR [rdi+0x18]
  407e4c:	call   407c90 <flatcc_builder_create_string@@Base>
  407e51:	mov    ebp,eax
  407e53:	test   eax,eax
  407e55:	jne    407e60 <flatcc_builder_end_string@@Base+0x40>
  407e57:	add    rsp,0x8
  407e5b:	pop    rbx
  407e5c:	mov    eax,ebp
  407e5e:	pop    rbp
  407e5f:	ret    
  407e60:	mov    edx,DWORD PTR [rbx+0x20]
  407e63:	mov    rdi,QWORD PTR [rbx+0x18]
  407e67:	xor    esi,esi
  407e69:	call   403150 <memset@plt>
  407e6e:	mov    rax,QWORD PTR [rbx+0x30]
  407e72:	mov    edi,DWORD PTR [rbx+0x70]
  407e75:	mov    edx,DWORD PTR [rax+0x8]
  407e78:	mov    esi,DWORD PTR [rax]
  407e7a:	mov    ecx,DWORD PTR [rax+0x4]
  407e7d:	mov    DWORD PTR [rbx+0x20],edx
  407e80:	mov    rdx,rsi
  407e83:	sub    edi,edx
  407e85:	mov    DWORD PTR [rbx+0x28],esi
  407e88:	mov    edx,edi
  407e8a:	add    rsi,QWORD PTR [rbx+0x68]
  407e8e:	cmp    ecx,edi
  407e90:	cmovb  edx,ecx
  407e93:	mov    QWORD PTR [rbx+0x18],rsi
  407e97:	mov    DWORD PTR [rbx+0x24],edx
  407e9a:	movzx  edx,WORD PTR [rbx+0xea]
  407ea1:	mov    DWORD PTR [rax+0x4],ecx
  407ea4:	cmp    dx,WORD PTR [rbx+0xe8]
  407eab:	jbe    407eb4 <flatcc_builder_end_string@@Base+0x94>
  407ead:	mov    WORD PTR [rbx+0xe8],dx
  407eb4:	movzx  edx,WORD PTR [rax+0xc]
  407eb8:	dec    DWORD PTR [rbx+0x104]
  407ebe:	sub    rax,0x24
  407ec2:	mov    QWORD PTR [rbx+0x30],rax
  407ec6:	mov    WORD PTR [rbx+0xea],dx
  407ecd:	add    rsp,0x8
  407ed1:	mov    eax,ebp
  407ed3:	pop    rbx
  407ed4:	pop    rbp
  407ed5:	ret    
  407ed6:	lea    rcx,[rip+0x5963]        # 40d840 <g_data@@Base+0x780>
  407edd:	mov    edx,0x6c5
  407ee2:	lea    rsi,[rip+0x545f]        # 40d348 <g_data@@Base+0x288>
  407ee9:	lea    rdi,[rip+0x5708]        # 40d5f8 <g_data@@Base+0x538>
  407ef0:	call   403140 <__assert_fail@plt>
  407ef5:	lea    rcx,[rip+0x5944]        # 40d840 <g_data@@Base+0x780>
  407efc:	mov    edx,0x6c4
  407f01:	lea    rsi,[rip+0x5440]        # 40d348 <g_data@@Base+0x288>
  407f08:	lea    rdi,[rip+0x55c1]        # 40d4d0 <g_data@@Base+0x410>
  407f0f:	call   403140 <__assert_fail@plt>
  407f14:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407f1f:	nop

0000000000407f20 <flatcc_builder_string_edit@@Base>:
  407f20:	endbr64 
  407f24:	mov    rax,QWORD PTR [rdi+0x18]
  407f28:	ret    
  407f29:	nop    DWORD PTR [rax+0x0]

0000000000407f30 <flatcc_builder_string_len@@Base>:
  407f30:	endbr64 
  407f34:	mov    rax,QWORD PTR [rdi+0x30]
  407f38:	mov    eax,DWORD PTR [rax+0x14]
  407f3b:	ret    
  407f3c:	nop    DWORD PTR [rax+0x0]

0000000000407f40 <flatcc_builder_table_add@@Base>:
  407f40:	endbr64 
  407f44:	push   r13
  407f46:	push   r12
  407f48:	push   rbp
  407f49:	push   rbx
  407f4a:	sub    rsp,0x8
  407f4e:	mov    rax,QWORD PTR [rdi+0x30]
  407f52:	cmp    WORD PTR [rax+0xe],0x3
  407f57:	jne    408024 <flatcc_builder_table_add@@Base+0xe4>
  407f5d:	mov    r12d,esi
  407f60:	cmp    esi,0x7ffc
  407f66:	ja     408062 <flatcc_builder_table_add@@Base+0x122>
  407f6c:	mov    rbx,rdi
  407f6f:	cmp    WORD PTR [rdi+0xea],cx
  407f76:	jb     407fe0 <flatcc_builder_table_add@@Base+0xa0>
  407f78:	movsxd r13,r12d
  407f7b:	mov    rsi,QWORD PTR [rbx+0x8]
  407f7f:	add    r13,r13
  407f82:	add    rsi,r13
  407f85:	cmp    WORD PTR [rsi],0x0
  407f89:	jne    408043 <flatcc_builder_table_add@@Base+0x103>
  407f8f:	mov    eax,DWORD PTR [rbx+0x14]
  407f92:	movzx  ecx,cx
  407f95:	xor    eax,r12d
  407f98:	imul   eax,eax,0x9e3779b1
  407f9e:	xor    eax,edx
  407fa0:	imul   eax,eax,0x9e3779b1
  407fa6:	mov    DWORD PTR [rbx+0x14],eax
  407fa9:	mov    eax,DWORD PTR [rbx+0x20]
  407fac:	lea    ebp,[rcx+rax*1-0x1]
  407fb0:	neg    ecx
  407fb2:	and    ebp,ecx
  407fb4:	add    edx,ebp
  407fb6:	mov    DWORD PTR [rbx+0x20],edx
  407fb9:	cmp    edx,DWORD PTR [rbx+0x24]
  407fbc:	jae    408000 <flatcc_builder_table_add@@Base+0xc0>
  407fbe:	lea    eax,[rbp+0x4]
  407fc1:	mov    WORD PTR [rsi],ax
  407fc4:	cmp    r12w,WORD PTR [rbx+0x10]
  407fc9:	jae    407ff0 <flatcc_builder_table_add@@Base+0xb0>
  407fcb:	mov    eax,ebp
  407fcd:	add    rax,QWORD PTR [rbx+0x18]
  407fd1:	add    rsp,0x8
  407fd5:	pop    rbx
  407fd6:	pop    rbp
  407fd7:	pop    r12
  407fd9:	pop    r13
  407fdb:	ret    
  407fdc:	nop    DWORD PTR [rax+0x0]
  407fe0:	mov    WORD PTR [rdi+0xea],cx
  407fe7:	jmp    407f78 <flatcc_builder_table_add@@Base+0x38>
  407fe9:	nop    DWORD PTR [rax+0x0]
  407ff0:	inc    r12d
  407ff3:	mov    WORD PTR [rbx+0x10],r12w
  407ff8:	jmp    407fcb <flatcc_builder_table_add@@Base+0x8b>
  407ffa:	nop    WORD PTR [rax+rax*1+0x0]
  408000:	lea    esi,[rdx+0x1]
  408003:	mov    rdi,rbx
  408006:	mov    edx,0xfffc
  40800b:	call   4048d0 <test@@Base+0x1590>
  408010:	test   eax,eax
  408012:	jne    408020 <flatcc_builder_table_add@@Base+0xe0>
  408014:	mov    rsi,QWORD PTR [rbx+0x8]
  408018:	add    rsi,r13
  40801b:	jmp    407fbe <flatcc_builder_table_add@@Base+0x7e>
  40801d:	nop    DWORD PTR [rax]
  408020:	xor    eax,eax
  408022:	jmp    407fd1 <flatcc_builder_table_add@@Base+0x91>
  408024:	lea    rcx,[rip+0x57f5]        # 40d820 <g_data@@Base+0x760>
  40802b:	mov    edx,0x6ed
  408030:	lea    rsi,[rip+0x5311]        # 40d348 <g_data@@Base+0x288>
  408037:	lea    rdi,[rip+0x5552]        # 40d590 <g_data@@Base+0x4d0>
  40803e:	call   403140 <__assert_fail@plt>
  408043:	lea    rcx,[rip+0x57d6]        # 40d820 <g_data@@Base+0x760>
  40804a:	mov    edx,0x6f8
  40804f:	lea    rsi,[rip+0x52f2]        # 40d348 <g_data@@Base+0x288>
  408056:	lea    rdi,[rip+0x5682]        # 40d6df <g_data@@Base+0x61f>
  40805d:	call   403140 <__assert_fail@plt>
  408062:	lea    rcx,[rip+0x57b7]        # 40d820 <g_data@@Base+0x760>
  408069:	mov    edx,0x6ee
  40806e:	lea    rsi,[rip+0x52d3]        # 40d348 <g_data@@Base+0x288>
  408075:	lea    rdi,[rip+0x55a4]        # 40d620 <g_data@@Base+0x560>
  40807c:	call   403140 <__assert_fail@plt>
  408081:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40808c:	nop    DWORD PTR [rax+0x0]

0000000000408090 <flatcc_builder_table_edit@@Base>:
  408090:	endbr64 
  408094:	mov    rax,QWORD PTR [rdi+0x30]
  408098:	cmp    WORD PTR [rax+0xe],0x3
  40809d:	jne    4080aa <flatcc_builder_table_edit@@Base+0x1a>
  40809f:	mov    eax,DWORD PTR [rdi+0x20]
  4080a2:	sub    rax,rsi
  4080a5:	add    rax,QWORD PTR [rdi+0x18]
  4080a9:	ret    
  4080aa:	push   rax
  4080ab:	lea    rcx,[rip+0x574e]        # 40d800 <g_data@@Base+0x740>
  4080b2:	mov    edx,0x702
  4080b7:	lea    rsi,[rip+0x528a]        # 40d348 <g_data@@Base+0x288>
  4080be:	lea    rdi,[rip+0x54cb]        # 40d590 <g_data@@Base+0x4d0>
  4080c5:	call   403140 <__assert_fail@plt>
  4080ca:	nop    WORD PTR [rax+rax*1+0x0]

00000000004080d0 <flatcc_builder_table_add_copy@@Base>:
  4080d0:	endbr64 
  4080d4:	push   rbp
  4080d5:	mov    rbp,rdx
  4080d8:	push   rbx
  4080d9:	mov    rbx,rcx
  4080dc:	mov    rdx,rbx
  4080df:	movzx  ecx,r8w
  4080e3:	sub    rsp,0x8
  4080e7:	call   407f40 <flatcc_builder_table_add@@Base>
  4080ec:	mov    rcx,rax
  4080ef:	test   rax,rax
  4080f2:	je     408105 <flatcc_builder_table_add_copy@@Base+0x35>
  4080f4:	mov    rdx,rbx
  4080f7:	mov    rsi,rbp
  4080fa:	mov    rdi,rax
  4080fd:	call   403180 <memcpy@plt>
  408102:	mov    rcx,rax
  408105:	add    rsp,0x8
  408109:	pop    rbx
  40810a:	mov    rax,rcx
  40810d:	pop    rbp
  40810e:	ret    
  40810f:	nop

0000000000408110 <flatcc_builder_table_add_offset@@Base>:
  408110:	endbr64 
  408114:	push   r13
  408116:	push   r12
  408118:	push   rbp
  408119:	push   rbx
  40811a:	sub    rsp,0x8
  40811e:	mov    rax,QWORD PTR [rdi+0x30]
  408122:	cmp    WORD PTR [rax+0xe],0x3
  408127:	jne    4081e4 <flatcc_builder_table_add_offset@@Base+0xd4>
  40812d:	mov    r12d,esi
  408130:	cmp    esi,0x7ffc
  408136:	ja     408222 <flatcc_builder_table_add_offset@@Base+0x112>
  40813c:	movsxd r13,esi
  40813f:	mov    rdx,QWORD PTR [rdi+0x8]
  408143:	add    r13,r13
  408146:	add    rdx,r13
  408149:	cmp    WORD PTR [rdx],0x0
  40814d:	mov    rbx,rdi
  408150:	jne    408203 <flatcc_builder_table_add_offset@@Base+0xf3>
  408156:	mov    eax,DWORD PTR [rdi+0x14]
  408159:	xor    eax,esi
  40815b:	imul   eax,eax,0x9e3779b1
  408161:	xor    eax,0x4
  408164:	imul   eax,eax,0x9e3779b1
  40816a:	mov    DWORD PTR [rdi+0x14],eax
  40816d:	mov    eax,DWORD PTR [rdi+0x20]
  408170:	lea    ebp,[rax+0x3]
  408173:	and    ebp,0xfffffffc
  408176:	lea    esi,[rbp+0x4]
  408179:	mov    DWORD PTR [rdi+0x20],esi
  40817c:	cmp    esi,DWORD PTR [rdi+0x24]
  40817f:	ja     4081c0 <flatcc_builder_table_add_offset@@Base+0xb0>
  408181:	lea    eax,[rbp+0x4]
  408184:	mov    WORD PTR [rdx],ax
  408187:	cmp    r12w,WORD PTR [rbx+0x10]
  40818c:	jae    4081b0 <flatcc_builder_table_add_offset@@Base+0xa0>
  40818e:	mov    rax,QWORD PTR [rbx]
  408191:	lea    rdx,[rax+0x2]
  408195:	mov    QWORD PTR [rbx],rdx
  408198:	mov    WORD PTR [rax],bp
  40819b:	mov    eax,ebp
  40819d:	add    rax,QWORD PTR [rbx+0x18]
  4081a1:	add    rsp,0x8
  4081a5:	pop    rbx
  4081a6:	pop    rbp
  4081a7:	pop    r12
  4081a9:	pop    r13
  4081ab:	ret    
  4081ac:	nop    DWORD PTR [rax+0x0]
  4081b0:	lea    esi,[r12+0x1]
  4081b5:	mov    WORD PTR [rbx+0x10],si
  4081b9:	jmp    40818e <flatcc_builder_table_add_offset@@Base+0x7e>
  4081bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4081c0:	mov    edx,0xfffc
  4081c5:	call   4048d0 <test@@Base+0x1590>
  4081ca:	test   eax,eax
  4081cc:	jne    4081e0 <flatcc_builder_table_add_offset@@Base+0xd0>
  4081ce:	mov    rdx,QWORD PTR [rbx+0x8]
  4081d2:	add    rdx,r13
  4081d5:	jmp    408181 <flatcc_builder_table_add_offset@@Base+0x71>
  4081d7:	nop    WORD PTR [rax+rax*1+0x0]
  4081e0:	xor    eax,eax
  4081e2:	jmp    4081a1 <flatcc_builder_table_add_offset@@Base+0x91>
  4081e4:	lea    rcx,[rip+0x55f5]        # 40d7e0 <g_data@@Base+0x720>
  4081eb:	mov    edx,0x713
  4081f0:	lea    rsi,[rip+0x5151]        # 40d348 <g_data@@Base+0x288>
  4081f7:	lea    rdi,[rip+0x5392]        # 40d590 <g_data@@Base+0x4d0>
  4081fe:	call   403140 <__assert_fail@plt>
  408203:	lea    rcx,[rip+0x55d6]        # 40d7e0 <g_data@@Base+0x720>
  40820a:	mov    edx,0x71b
  40820f:	lea    rsi,[rip+0x5132]        # 40d348 <g_data@@Base+0x288>
  408216:	lea    rdi,[rip+0x54c2]        # 40d6df <g_data@@Base+0x61f>
  40821d:	call   403140 <__assert_fail@plt>
  408222:	lea    rcx,[rip+0x55b7]        # 40d7e0 <g_data@@Base+0x720>
  408229:	mov    edx,0x714
  40822e:	lea    rsi,[rip+0x5113]        # 40d348 <g_data@@Base+0x288>
  408235:	lea    rdi,[rip+0x53e4]        # 40d620 <g_data@@Base+0x560>
  40823c:	call   403140 <__assert_fail@plt>
  408241:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40824c:	nop    DWORD PTR [rax+0x0]

0000000000408250 <flatcc_builder_table_add_union@@Base>:
  408250:	endbr64 
  408254:	push   r13
  408256:	mov    r13,rdx
  408259:	sar    r13,0x20
  40825d:	push   r12
  40825f:	push   rbp
  408260:	push   rbx
  408261:	sub    rsp,0x8
  408265:	mov    rax,QWORD PTR [rdi+0x30]
  408269:	cmp    WORD PTR [rax+0xe],0x3
  40826e:	jne    4082e4 <flatcc_builder_table_add_union@@Base+0x94>
  408270:	mov    r12,rdi
  408273:	mov    ebx,esi
  408275:	mov    rbp,rdx
  408278:	test   dl,dl
  40827a:	je     4082c0 <flatcc_builder_table_add_union@@Base+0x70>
  40827c:	test   r13d,r13d
  40827f:	je     408292 <flatcc_builder_table_add_union@@Base+0x42>
  408281:	call   408110 <flatcc_builder_table_add_offset@@Base>
  408286:	test   rax,rax
  408289:	je     408322 <flatcc_builder_table_add_union@@Base+0xd2>
  40828f:	mov    DWORD PTR [rax],r13d
  408292:	lea    esi,[rbx-0x1]
  408295:	mov    ecx,0x1
  40829a:	mov    edx,0x1
  40829f:	mov    rdi,r12
  4082a2:	call   407f40 <flatcc_builder_table_add@@Base>
  4082a7:	test   rax,rax
  4082aa:	je     408303 <flatcc_builder_table_add_union@@Base+0xb3>
  4082ac:	mov    BYTE PTR [rax],bpl
  4082af:	add    rsp,0x8
  4082b3:	xor    eax,eax
  4082b5:	pop    rbx
  4082b6:	pop    rbp
  4082b7:	pop    r12
  4082b9:	pop    r13
  4082bb:	ret    
  4082bc:	nop    DWORD PTR [rax+0x0]
  4082c0:	test   r13d,r13d
  4082c3:	je     408292 <flatcc_builder_table_add_union@@Base+0x42>
  4082c5:	lea    rcx,[rip+0x56a4]        # 40d970 <g_data@@Base+0x8b0>
  4082cc:	mov    edx,0x5ef
  4082d1:	lea    rsi,[rip+0x5070]        # 40d348 <g_data@@Base+0x288>
  4082d8:	lea    rdi,[rip+0x5389]        # 40d668 <g_data@@Base+0x5a8>
  4082df:	call   403140 <__assert_fail@plt>
  4082e4:	lea    rcx,[rip+0x5685]        # 40d970 <g_data@@Base+0x8b0>
  4082eb:	mov    edx,0x5ee
  4082f0:	lea    rsi,[rip+0x5051]        # 40d348 <g_data@@Base+0x288>
  4082f7:	lea    rdi,[rip+0x5292]        # 40d590 <g_data@@Base+0x4d0>
  4082fe:	call   403140 <__assert_fail@plt>
  408303:	lea    rcx,[rip+0x5666]        # 40d970 <g_data@@Base+0x8b0>
  40830a:	mov    edx,0x5f6
  40830f:	lea    rsi,[rip+0x5032]        # 40d348 <g_data@@Base+0x288>
  408316:	lea    rdi,[rip+0x5451]        # 40d76e <g_data@@Base+0x6ae>
  40831d:	call   403140 <__assert_fail@plt>
  408322:	lea    rcx,[rip+0x5647]        # 40d970 <g_data@@Base+0x8b0>
  408329:	mov    edx,0x5f2
  40832e:	lea    rsi,[rip+0x5013]        # 40d348 <g_data@@Base+0x288>
  408335:	lea    rdi,[rip+0x5428]        # 40d764 <g_data@@Base+0x6a4>
  40833c:	call   403140 <__assert_fail@plt>
  408341:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40834c:	nop    DWORD PTR [rax+0x0]

0000000000408350 <flatcc_builder_table_add_union_vector@@Base>:
  408350:	endbr64 
  408354:	push   r12
  408356:	push   rbp
  408357:	mov    rbp,rdx
  40835a:	sar    rbp,0x20
  40835e:	push   rbx
  40835f:	sub    rsp,0x10
  408363:	mov    rcx,QWORD PTR [rdi+0x30]
  408367:	cmp    WORD PTR [rcx+0xe],0x3
  40836c:	jne    4083e1 <flatcc_builder_table_add_union_vector@@Base+0x91>
  40836e:	test   ebp,ebp
  408370:	sete   cl
  408373:	test   edx,edx
  408375:	mov    r12d,esi
  408378:	sete   sil
  40837c:	cmp    sil,cl
  40837f:	je     4083a0 <flatcc_builder_table_add_union_vector@@Base+0x50>
  408381:	test   edx,edx
  408383:	setne  al
  408386:	cmp    cl,al
  408388:	je     408400 <flatcc_builder_table_add_union_vector@@Base+0xb0>
  40838a:	mov    eax,0xffffffff
  40838f:	add    rsp,0x10
  408393:	pop    rbx
  408394:	pop    rbp
  408395:	pop    r12
  408397:	ret    
  408398:	nop    DWORD PTR [rax+rax*1+0x0]
  4083a0:	mov    eax,edx
  4083a2:	test   edx,edx
  4083a4:	je     40838f <flatcc_builder_table_add_union_vector@@Base+0x3f>
  4083a6:	lea    esi,[r12-0x1]
  4083ab:	mov    QWORD PTR [rsp+0x8],rdx
  4083b0:	mov    rbx,rdi
  4083b3:	call   408110 <flatcc_builder_table_add_offset@@Base>
  4083b8:	test   rax,rax
  4083bb:	mov    rdx,QWORD PTR [rsp+0x8]
  4083c0:	je     40843e <flatcc_builder_table_add_union_vector@@Base+0xee>
  4083c2:	mov    DWORD PTR [rax],edx
  4083c4:	mov    esi,r12d
  4083c7:	mov    rdi,rbx
  4083ca:	call   408110 <flatcc_builder_table_add_offset@@Base>
  4083cf:	test   rax,rax
  4083d2:	je     40841f <flatcc_builder_table_add_union_vector@@Base+0xcf>
  4083d4:	mov    DWORD PTR [rax],ebp
  4083d6:	add    rsp,0x10
  4083da:	xor    eax,eax
  4083dc:	pop    rbx
  4083dd:	pop    rbp
  4083de:	pop    r12
  4083e0:	ret    
  4083e1:	lea    rcx,[rip+0x5558]        # 40d940 <g_data@@Base+0x880>
  4083e8:	mov    edx,0x600
  4083ed:	lea    rsi,[rip+0x4f54]        # 40d348 <g_data@@Base+0x288>
  4083f4:	lea    rdi,[rip+0x5195]        # 40d590 <g_data@@Base+0x4d0>
  4083fb:	call   403140 <__assert_fail@plt>
  408400:	lea    rcx,[rip+0x5539]        # 40d940 <g_data@@Base+0x880>
  408407:	mov    edx,0x601
  40840c:	lea    rsi,[rip+0x4f35]        # 40d348 <g_data@@Base+0x288>
  408413:	lea    rdi,[rip+0x5276]        # 40d690 <g_data@@Base+0x5d0>
  40841a:	call   403140 <__assert_fail@plt>
  40841f:	lea    rcx,[rip+0x551a]        # 40d940 <g_data@@Base+0x880>
  408426:	mov    edx,0x608
  40842b:	lea    rsi,[rip+0x4f16]        # 40d348 <g_data@@Base+0x288>
  408432:	lea    rdi,[rip+0x532b]        # 40d764 <g_data@@Base+0x6a4>
  408439:	call   403140 <__assert_fail@plt>
  40843e:	lea    rcx,[rip+0x54fb]        # 40d940 <g_data@@Base+0x880>
  408445:	mov    edx,0x604
  40844a:	lea    rsi,[rip+0x4ef7]        # 40d348 <g_data@@Base+0x288>
  408451:	lea    rdi,[rip+0x530c]        # 40d764 <g_data@@Base+0x6a4>
  408458:	call   403140 <__assert_fail@plt>
  40845d:	nop    DWORD PTR [rax]

0000000000408460 <flatcc_builder_push_buffer_alignment@@Base>:
  408460:	endbr64 
  408464:	mov    edx,0x4
  408469:	movzx  eax,WORD PTR [rdi+0xe8]
  408470:	mov    WORD PTR [rdi+0xe8],dx
  408477:	ret    
  408478:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408480 <flatcc_builder_pop_buffer_alignment@@Base>:
  408480:	endbr64 
  408484:	cmp    si,WORD PTR [rdi+0xe8]
  40848b:	jbe    408494 <flatcc_builder_pop_buffer_alignment@@Base+0x14>
  40848d:	mov    WORD PTR [rdi+0xe8],si
  408494:	ret    
  408495:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004084a0 <flatcc_builder_get_buffer_alignment@@Base>:
  4084a0:	endbr64 
  4084a4:	movzx  eax,WORD PTR [rdi+0xe8]
  4084ab:	ret    
  4084ac:	nop    DWORD PTR [rax+0x0]

00000000004084b0 <flatcc_builder_set_vtable_clustering@@Base>:
  4084b0:	endbr64 
  4084b4:	xor    eax,eax
  4084b6:	test   esi,esi
  4084b8:	sete   al
  4084bb:	mov    DWORD PTR [rdi+0x124],eax
  4084c1:	ret    
  4084c2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4084cd:	nop    DWORD PTR [rax]

00000000004084d0 <flatcc_builder_set_block_align@@Base>:
  4084d0:	endbr64 
  4084d4:	mov    WORD PTR [rdi+0xec],si
  4084db:	ret    
  4084dc:	nop    DWORD PTR [rax+0x0]

00000000004084e0 <flatcc_builder_get_level@@Base>:
  4084e0:	endbr64 
  4084e4:	mov    eax,DWORD PTR [rdi+0x104]
  4084ea:	ret    
  4084eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004084f0 <flatcc_builder_set_max_level@@Base>:
  4084f0:	endbr64 
  4084f4:	mov    DWORD PTR [rdi+0x120],esi
  4084fa:	cmp    DWORD PTR [rdi+0x108],esi
  408500:	jge    408508 <flatcc_builder_set_max_level@@Base+0x18>
  408502:	mov    DWORD PTR [rdi+0x108],esi
  408508:	ret    
  408509:	nop    DWORD PTR [rax+0x0]

0000000000408510 <flatcc_builder_get_buffer_size@@Base>:
  408510:	endbr64 
  408514:	mov    eax,DWORD PTR [rdi+0xf4]
  40851a:	sub    eax,DWORD PTR [rdi+0xf0]
  408520:	cdqe   
  408522:	ret    
  408523:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40852e:	xchg   ax,ax

0000000000408530 <flatcc_builder_get_buffer_start@@Base>:
  408530:	endbr64 
  408534:	mov    eax,DWORD PTR [rdi+0xf0]
  40853a:	ret    
  40853b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408540 <flatcc_builder_get_buffer_end@@Base>:
  408540:	endbr64 
  408544:	mov    eax,DWORD PTR [rdi+0xf4]
  40854a:	ret    
  40854b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408550 <flatcc_builder_set_vtable_cache_limit@@Base>:
  408550:	endbr64 
  408554:	mov    QWORD PTR [rdi+0x118],rsi
  40855b:	ret    
  40855c:	nop    DWORD PTR [rax+0x0]

0000000000408560 <flatcc_builder_set_identifier@@Base>:
  408560:	endbr64 
  408564:	test   rsi,rsi
  408567:	je     408578 <flatcc_builder_set_identifier@@Base+0x18>
  408569:	mov    eax,DWORD PTR [rsi]
  40856b:	mov    DWORD PTR [rdi+0x110],eax
  408571:	ret    
  408572:	nop    WORD PTR [rax+rax*1+0x0]
  408578:	mov    rsi,0x40de40
  40857f:	mov    eax,DWORD PTR [rsi]
  408581:	mov    DWORD PTR [rdi+0x110],eax
  408587:	ret    
  408588:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408590 <flatcc_builder_get_type@@Base>:
  408590:	endbr64 
  408594:	mov    rdx,QWORD PTR [rdi+0x30]
  408598:	xor    eax,eax
  40859a:	test   rdx,rdx
  40859d:	je     4085a3 <flatcc_builder_get_type@@Base+0x13>
  40859f:	movzx  eax,WORD PTR [rdx+0xe]
  4085a3:	ret    
  4085a4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4085af:	nop

00000000004085b0 <flatcc_builder_get_type_at@@Base>:
  4085b0:	endbr64 
  4085b4:	xor    eax,eax
  4085b6:	test   esi,esi
  4085b8:	jle    4085d9 <flatcc_builder_get_type_at@@Base+0x29>
  4085ba:	mov    edx,DWORD PTR [rdi+0x104]
  4085c0:	cmp    edx,esi
  4085c2:	jl     4085d9 <flatcc_builder_get_type_at@@Base+0x29>
  4085c4:	sub    esi,edx
  4085c6:	movsxd rsi,esi
  4085c9:	mov    rdx,QWORD PTR [rdi+0x30]
  4085cd:	lea    rax,[rsi+rsi*8]
  4085d1:	lea    rax,[rdx+rax*4]
  4085d5:	movzx  eax,WORD PTR [rax+0xe]
  4085d9:	ret    
  4085da:	nop    WORD PTR [rax+rax*1+0x0]

00000000004085e0 <flatcc_builder_get_direct_buffer@@Base>:
  4085e0:	endbr64 
  4085e4:	mov    eax,DWORD PTR [rdi+0x128]
  4085ea:	test   eax,eax
  4085ec:	jne    408600 <flatcc_builder_get_direct_buffer@@Base+0x20>
  4085ee:	xor    eax,eax
  4085f0:	test   rsi,rsi
  4085f3:	je     4085fc <flatcc_builder_get_direct_buffer@@Base+0x1c>
  4085f5:	mov    QWORD PTR [rsi],0x0
  4085fc:	ret    
  4085fd:	nop    DWORD PTR [rax]
  408600:	mov    rax,QWORD PTR [rdi+0x138]
  408607:	cmp    QWORD PTR [rdi+0x130],rax
  40860e:	jne    4085ee <flatcc_builder_get_direct_buffer@@Base+0xe>
  408610:	test   rsi,rsi
  408613:	je     40861f <flatcc_builder_get_direct_buffer@@Base+0x3f>
  408615:	mov    rax,QWORD PTR [rdi+0x160]
  40861c:	mov    QWORD PTR [rsi],rax
  40861f:	mov    rax,QWORD PTR [rdi+0x140]
  408626:	ret    
  408627:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408630 <flatcc_builder_copy_buffer@@Base>:
  408630:	endbr64 
  408634:	mov    eax,DWORD PTR [rdi+0x128]
  40863a:	test   eax,eax
  40863c:	je     408660 <flatcc_builder_copy_buffer@@Base+0x30>
  40863e:	sub    rsp,0x8
  408642:	add    rdi,0x130
  408649:	call   408ea0 <flatcc_emitter_copy_buffer@@Base>
  40864e:	test   rax,rax
  408651:	je     408663 <flatcc_builder_copy_buffer@@Base+0x33>
  408653:	add    rsp,0x8
  408657:	ret    
  408658:	nop    DWORD PTR [rax+rax*1+0x0]
  408660:	xor    eax,eax
  408662:	ret    
  408663:	lea    rcx,[rip+0x5156]        # 40d7c0 <g_data@@Base+0x700>
  40866a:	mov    edx,0x786
  40866f:	lea    rsi,[rip+0x4cd2]        # 40d348 <g_data@@Base+0x288>
  408676:	lea    rdi,[rip+0x50fd]        # 40d77a <g_data@@Base+0x6ba>
  40867d:	call   403140 <__assert_fail@plt>
  408682:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40868d:	nop    DWORD PTR [rax]

0000000000408690 <flatcc_builder_finalize_buffer@@Base>:
  408690:	endbr64 
  408694:	push   r12
  408696:	mov    r12,rdi
  408699:	push   rbp
  40869a:	push   rbx
  40869b:	mov    rbx,rsi
  40869e:	call   408510 <flatcc_builder_get_buffer_size@@Base>
  4086a3:	mov    rbp,rax
  4086a6:	test   rbx,rbx
  4086a9:	je     4086ae <flatcc_builder_finalize_buffer@@Base+0x1e>
  4086ab:	mov    QWORD PTR [rbx],rax
  4086ae:	mov    rdi,rbp
  4086b1:	call   403190 <malloc@plt>
  4086b6:	mov    rbx,rax
  4086b9:	test   rax,rax
  4086bc:	je     4086d9 <flatcc_builder_finalize_buffer@@Base+0x49>
  4086be:	mov    rdx,rbp
  4086c1:	mov    rsi,rax
  4086c4:	mov    rdi,r12
  4086c7:	call   408630 <flatcc_builder_copy_buffer@@Base>
  4086cc:	test   rax,rax
  4086cf:	je     4086f8 <flatcc_builder_finalize_buffer@@Base+0x68>
  4086d1:	mov    rax,rbx
  4086d4:	pop    rbx
  4086d5:	pop    rbp
  4086d6:	pop    r12
  4086d8:	ret    
  4086d9:	lea    rcx,[rip+0x50c0]        # 40d7a0 <g_data@@Base+0x6e0>
  4086e0:	mov    edx,0x798
  4086e5:	lea    rsi,[rip+0x4c5c]        # 40d348 <g_data@@Base+0x288>
  4086ec:	lea    rdi,[rip+0x4fec]        # 40d6df <g_data@@Base+0x61f>
  4086f3:	call   403140 <__assert_fail@plt>
  4086f8:	lea    rcx,[rip+0x50a1]        # 40d7a0 <g_data@@Base+0x6e0>
  4086ff:	mov    edx,0x79c
  408704:	lea    rsi,[rip+0x4c3d]        # 40d348 <g_data@@Base+0x288>
  40870b:	lea    rdi,[rip+0x4fcd]        # 40d6df <g_data@@Base+0x61f>
  408712:	call   403140 <__assert_fail@plt>
  408717:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408720 <flatcc_builder_finalize_aligned_buffer@@Base>:
  408720:	endbr64 
  408724:	push   r13
  408726:	push   r12
  408728:	mov    r12,rsi
  40872b:	push   rbp
  40872c:	mov    rbp,rdi
  40872f:	push   rbx
  408730:	sub    rsp,0x18
  408734:	mov    rax,QWORD PTR fs:0x28
  40873d:	mov    QWORD PTR [rsp+0x8],rax
  408742:	xor    eax,eax
  408744:	call   408510 <flatcc_builder_get_buffer_size@@Base>
  408749:	mov    rbx,rax
  40874c:	test   r12,r12
  40874f:	je     408755 <flatcc_builder_finalize_aligned_buffer@@Base+0x35>
  408751:	mov    QWORD PTR [r12],rax
  408755:	mov    rdi,rbp
  408758:	call   4084a0 <flatcc_builder_get_buffer_alignment@@Base>
  40875d:	movzx  eax,ax
  408760:	lea    rdx,[rbx+rax*1-0x1]
  408765:	mov    rbx,rax
  408768:	neg    rbx
  40876b:	and    rbx,rdx
  40876e:	mov    esi,0x8
  408773:	cmp    rax,0x8
  408777:	cmovae rsi,rax
  40877b:	mov    rdi,rsp
  40877e:	mov    rdx,rbx
  408781:	mov    QWORD PTR [rsp],0x0
  408789:	call   4031c0 <posix_memalign@plt>
  40878e:	test   eax,eax
  408790:	je     4087b8 <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
  408792:	mov    rdi,QWORD PTR [rsp]
  408796:	test   rdi,rdi
  408799:	je     4087a0 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  40879b:	call   403100 <free@plt>
  4087a0:	test   r12,r12
  4087a3:	je     408802 <flatcc_builder_finalize_aligned_buffer@@Base+0xe2>
  4087a5:	mov    QWORD PTR [r12],0x0
  4087ad:	xor    r13d,r13d
  4087b0:	jmp    4087d4 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  4087b2:	nop    WORD PTR [rax+rax*1+0x0]
  4087b8:	mov    r13,QWORD PTR [rsp]
  4087bc:	test   r13,r13
  4087bf:	je     4087a0 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  4087c1:	mov    rdx,rbx
  4087c4:	mov    rsi,r13
  4087c7:	mov    rdi,rbp
  4087ca:	call   408630 <flatcc_builder_copy_buffer@@Base>
  4087cf:	test   rax,rax
  4087d2:	je     4087f8 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
  4087d4:	mov    rcx,QWORD PTR [rsp+0x8]
  4087d9:	xor    rcx,QWORD PTR fs:0x28
  4087e2:	mov    rax,r13
  4087e5:	jne    4087fd <flatcc_builder_finalize_aligned_buffer@@Base+0xdd>
  4087e7:	add    rsp,0x18
  4087eb:	pop    rbx
  4087ec:	pop    rbp
  4087ed:	pop    r12
  4087ef:	pop    r13
  4087f1:	ret    
  4087f2:	nop    WORD PTR [rax+rax*1+0x0]
  4087f8:	mov    rdi,r13
  4087fb:	jmp    40879b <flatcc_builder_finalize_aligned_buffer@@Base+0x7b>
  4087fd:	call   403130 <__stack_chk_fail@plt>
  408802:	xor    r13d,r13d
  408805:	jmp    4087d4 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  408807:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408810 <flatcc_builder_aligned_alloc@@Base>:
  408810:	endbr64 
  408814:	sub    rsp,0x18
  408818:	mov    rax,QWORD PTR fs:0x28
  408821:	mov    QWORD PTR [rsp+0x8],rax
  408826:	xor    eax,eax
  408828:	mov    rdx,rsi
  40882b:	cmp    rdi,0x8
  40882f:	mov    esi,0x8
  408834:	cmovae rsi,rdi
  408838:	mov    rdi,rsp
  40883b:	mov    QWORD PTR [rsp],0x0
  408843:	call   4031c0 <posix_memalign@plt>
  408848:	test   eax,eax
  40884a:	mov    rax,QWORD PTR [rsp]
  40884e:	je     40885f <flatcc_builder_aligned_alloc@@Base+0x4f>
  408850:	test   rax,rax
  408853:	je     40885f <flatcc_builder_aligned_alloc@@Base+0x4f>
  408855:	mov    rdi,rax
  408858:	call   403100 <free@plt>
  40885d:	xor    eax,eax
  40885f:	mov    rcx,QWORD PTR [rsp+0x8]
  408864:	xor    rcx,QWORD PTR fs:0x28
  40886d:	jne    408874 <flatcc_builder_aligned_alloc@@Base+0x64>
  40886f:	add    rsp,0x18
  408873:	ret    
  408874:	call   403130 <__stack_chk_fail@plt>
  408879:	nop    DWORD PTR [rax+0x0]

0000000000408880 <flatcc_builder_aligned_free@@Base>:
  408880:	endbr64 
  408884:	jmp    403100 <free@plt>
  408889:	nop    DWORD PTR [rax+0x0]

0000000000408890 <flatcc_builder_get_emit_context@@Base>:
  408890:	endbr64 
  408894:	mov    rax,QWORD PTR [rdi+0x38]
  408898:	ret    
  408899:	nop    DWORD PTR [rax+0x0]

00000000004088a0 <flatcc_emitter_recycle_page@@Base>:
  4088a0:	endbr64 
  4088a4:	mov    rax,QWORD PTR [rdi]
  4088a7:	cmp    rax,rsi
  4088aa:	je     4088fb <flatcc_emitter_recycle_page@@Base+0x5b>
  4088ac:	cmp    QWORD PTR [rdi+0x8],rsi
  4088b0:	je     4088fb <flatcc_emitter_recycle_page@@Base+0x5b>
  4088b2:	mov    rdx,QWORD PTR [rsi+0xb88]
  4088b9:	mov    rcx,QWORD PTR [rsi+0xb80]
  4088c0:	mov    QWORD PTR [rcx+0xb88],rdx
  4088c7:	mov    QWORD PTR [rdx+0xb80],rcx
  4088ce:	mov    rdx,QWORD PTR [rax+0xb88]
  4088d5:	mov    QWORD PTR [rsi+0xb80],rax
  4088dc:	mov    QWORD PTR [rsi+0xb88],rdx
  4088e3:	mov    QWORD PTR [rdx+0xb80],rsi
  4088ea:	mov    rax,QWORD PTR [rsi+0xb80]
  4088f1:	mov    QWORD PTR [rax+0xb88],rsi
  4088f8:	xor    eax,eax
  4088fa:	ret    
  4088fb:	mov    eax,0xffffffff
  408900:	ret    
  408901:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40890c:	nop    DWORD PTR [rax+0x0]

0000000000408910 <flatcc_emitter_reset@@Base>:
  408910:	endbr64 
  408914:	mov    rax,QWORD PTR [rdi]
  408917:	test   rax,rax
  40891a:	je     4089f0 <flatcc_emitter_reset@@Base+0xe0>
  408920:	mov    rcx,QWORD PTR [rdi+0x40]
  408924:	mov    rsi,QWORD PTR [rdi+0x30]
  408928:	test   rcx,rcx
  40892b:	cmove  rcx,rsi
  40892f:	lea    rdx,[rax+0x5c0]
  408936:	mov    QWORD PTR [rdi+0x10],rdx
  40893a:	mov    QWORD PTR [rdi+0x20],rdx
  40893e:	lea    rdx,[rcx+rcx*2]
  408942:	shr    rdx,0x2
  408946:	shr    rsi,0x2
  40894a:	add    rdx,rsi
  40894d:	mov    QWORD PTR [rdi+0x8],rax
  408951:	mov    QWORD PTR [rdi+0x18],0x5c0
  408959:	mov    QWORD PTR [rdi+0x28],0x5c0
  408961:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  40896b:	mov    QWORD PTR [rdi+0x40],rdx
  40896f:	add    rdx,rdx
  408972:	mov    QWORD PTR [rdi+0x30],0x0
  40897a:	cmp    rdx,QWORD PTR [rdi+0x38]
  40897e:	jae    4089f0 <flatcc_emitter_reset@@Base+0xe0>
  408980:	push   rbx
  408981:	mov    rbx,rdi
  408984:	mov    rdi,QWORD PTR [rax+0xb80]
  40898b:	cmp    rax,rdi
  40898e:	jne    4089a8 <flatcc_emitter_reset@@Base+0x98>
  408990:	jmp    4089e4 <flatcc_emitter_reset@@Base+0xd4>
  408992:	nop    WORD PTR [rax+rax*1+0x0]
  408998:	mov    rax,QWORD PTR [rbx+0x8]
  40899c:	mov    rdi,QWORD PTR [rax+0xb80]
  4089a3:	cmp    rdi,QWORD PTR [rbx]
  4089a6:	je     4089e4 <flatcc_emitter_reset@@Base+0xd4>
  4089a8:	mov    rdx,QWORD PTR [rdi+0xb80]
  4089af:	mov    QWORD PTR [rax+0xb80],rdx
  4089b6:	mov    rdx,QWORD PTR [rdi+0xb80]
  4089bd:	mov    QWORD PTR [rdx+0xb88],rax
  4089c4:	call   403100 <free@plt>
  4089c9:	mov    rax,QWORD PTR [rbx+0x38]
  4089cd:	mov    rcx,QWORD PTR [rbx+0x40]
  4089d1:	sub    rax,0xb80
  4089d7:	lea    rdx,[rcx+rcx*1]
  4089db:	mov    QWORD PTR [rbx+0x38],rax
  4089df:	cmp    rax,rdx
  4089e2:	ja     408998 <flatcc_emitter_reset@@Base+0x88>
  4089e4:	pop    rbx
  4089e5:	ret    
  4089e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4089f0:	ret    
  4089f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4089fc:	nop    DWORD PTR [rax+0x0]

0000000000408a00 <flatcc_emitter_clear@@Base>:
  408a00:	endbr64 
  408a04:	mov    rax,QWORD PTR [rdi]
  408a07:	test   rax,rax
  408a0a:	je     408a88 <flatcc_emitter_clear@@Base+0x88>
  408a0c:	push   rbp
  408a0d:	mov    rbp,rdi
  408a10:	push   rbx
  408a11:	sub    rsp,0x8
  408a15:	mov    rdx,QWORD PTR [rax+0xb88]
  408a1c:	mov    QWORD PTR [rdx+0xb80],0x0
  408a27:	mov    rbx,QWORD PTR [rax+0xb80]
  408a2e:	test   rbx,rbx
  408a31:	jne    408a3b <flatcc_emitter_clear@@Base+0x3b>
  408a33:	jmp    408a90 <flatcc_emitter_clear@@Base+0x90>
  408a35:	nop    DWORD PTR [rax]
  408a38:	mov    rbx,rax
  408a3b:	mov    rdi,QWORD PTR [rbx+0xb88]
  408a42:	call   403100 <free@plt>
  408a47:	mov    rax,QWORD PTR [rbx+0xb80]
  408a4e:	test   rax,rax
  408a51:	jne    408a38 <flatcc_emitter_clear@@Base+0x38>
  408a53:	mov    rdi,rbx
  408a56:	call   403100 <free@plt>
  408a5b:	mov    QWORD PTR [rbp+0x40],0x0
  408a63:	vpxor  xmm0,xmm0,xmm0
  408a67:	vmovups XMMWORD PTR [rbp+0x0],xmm0
  408a6c:	vmovups XMMWORD PTR [rbp+0x10],xmm0
  408a71:	vmovups XMMWORD PTR [rbp+0x20],xmm0
  408a76:	vmovups XMMWORD PTR [rbp+0x30],xmm0
  408a7b:	add    rsp,0x8
  408a7f:	pop    rbx
  408a80:	pop    rbp
  408a81:	ret    
  408a82:	nop    WORD PTR [rax+rax*1+0x0]
  408a88:	ret    
  408a89:	nop    DWORD PTR [rax+0x0]
  408a90:	mov    rbx,rax
  408a93:	jmp    408a53 <flatcc_emitter_clear@@Base+0x53>
  408a95:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000408aa0 <flatcc_emitter@@Base>:
  408aa0:	endbr64 
  408aa4:	push   r15
  408aa6:	push   r14
  408aa8:	push   r13
  408aaa:	push   r12
  408aac:	push   rbp
  408aad:	mov    rbp,rsi
  408ab0:	push   rbx
  408ab1:	mov    rbx,rdi
  408ab4:	sub    rsp,0x18
  408ab8:	add    QWORD PTR [rdi+0x30],r8
  408abc:	test   ecx,ecx
  408abe:	js     408cd0 <flatcc_emitter@@Base+0x230>
  408ac4:	mov    rax,QWORD PTR [rdi+0x28]
  408ac8:	cmp    rax,r8
  408acb:	jae    408b58 <flatcc_emitter@@Base+0xb8>
  408ad1:	test   edx,edx
  408ad3:	je     408b43 <flatcc_emitter@@Base+0xa3>
  408ad5:	lea    r14d,[rdx-0x1]
  408ad9:	inc    r14
  408adc:	shl    r14,0x4
  408ae0:	lea    rax,[rbp+r14*1+0x0]
  408ae5:	mov    QWORD PTR [rsp+0x8],rax
  408aea:	nop    WORD PTR [rax+rax*1+0x0]
  408af0:	mov    r15,QWORD PTR [rbp+0x8]
  408af4:	mov    r13,QWORD PTR [rbp+0x0]
  408af8:	test   r15,r15
  408afb:	je     408b38 <flatcc_emitter@@Base+0x98>
  408afd:	nop    DWORD PTR [rax]
  408b00:	mov    r12,QWORD PTR [rbx+0x28]
  408b04:	cmp    r15,r12
  408b07:	jbe    408c00 <flatcc_emitter@@Base+0x160>
  408b0d:	test   r12,r12
  408b10:	je     408ba8 <flatcc_emitter@@Base+0x108>
  408b16:	sub    r15,r12
  408b19:	mov    rdi,QWORD PTR [rbx+0x20]
  408b1d:	mov    rsi,r13
  408b20:	mov    rdx,r12
  408b23:	call   403180 <memcpy@plt>
  408b28:	add    r13,r12
  408b2b:	add    QWORD PTR [rbx+0x20],r12
  408b2f:	sub    QWORD PTR [rbx+0x28],r12
  408b33:	test   r15,r15
  408b36:	jne    408b00 <flatcc_emitter@@Base+0x60>
  408b38:	add    rbp,0x10
  408b3c:	cmp    rbp,QWORD PTR [rsp+0x8]
  408b41:	jne    408af0 <flatcc_emitter@@Base+0x50>
  408b43:	add    rsp,0x18
  408b47:	pop    rbx
  408b48:	pop    rbp
  408b49:	pop    r12
  408b4b:	pop    r13
  408b4d:	pop    r14
  408b4f:	xor    eax,eax
  408b51:	pop    r15
  408b53:	ret    
  408b54:	nop    DWORD PTR [rax+0x0]
  408b58:	mov    rcx,QWORD PTR [rdi+0x20]
  408b5c:	sub    rax,r8
  408b5f:	lea    rsi,[rcx+r8*1]
  408b63:	mov    QWORD PTR [rdi+0x20],rsi
  408b67:	mov    QWORD PTR [rdi+0x28],rax
  408b6b:	test   edx,edx
  408b6d:	je     408b43 <flatcc_emitter@@Base+0xa3>
  408b6f:	lea    ebx,[rdx-0x1]
  408b72:	inc    rbx
  408b75:	shl    rbx,0x4
  408b79:	add    rbx,rbp
  408b7c:	nop    DWORD PTR [rax+0x0]
  408b80:	mov    rsi,QWORD PTR [rbp+0x0]
  408b84:	mov    rdx,QWORD PTR [rbp+0x8]
  408b88:	mov    rdi,rcx
  408b8b:	call   403180 <memcpy@plt>
  408b90:	mov    rcx,QWORD PTR [rbp+0x8]
  408b94:	add    rbp,0x10
  408b98:	add    rcx,rax
  408b9b:	cmp    rbp,rbx
  408b9e:	jne    408b80 <flatcc_emitter@@Base+0xe0>
  408ba0:	jmp    408b43 <flatcc_emitter@@Base+0xa3>
  408ba2:	nop    WORD PTR [rax+rax*1+0x0]
  408ba8:	mov    r12,QWORD PTR [rbx+0x8]
  408bac:	test   r12,r12
  408baf:	je     408c58 <flatcc_emitter@@Base+0x1b8>
  408bb5:	mov    rax,QWORD PTR [r12+0xb80]
  408bbd:	mov    r14,QWORD PTR [rbx]
  408bc0:	cmp    rax,r14
  408bc3:	je     408c10 <flatcc_emitter@@Base+0x170>
  408bc5:	mov    QWORD PTR [rbx+0x8],rax
  408bc9:	mov    QWORD PTR [rbx+0x28],0xb80
  408bd1:	mov    rdx,QWORD PTR [rax+0xb88]
  408bd8:	mov    QWORD PTR [rbx+0x20],rax
  408bdc:	mov    edx,DWORD PTR [rdx+0xb90]
  408be2:	mov    r12,QWORD PTR [rbx+0x28]
  408be6:	add    edx,0xb80
  408bec:	mov    DWORD PTR [rax+0xb90],edx
  408bf2:	cmp    r15,r12
  408bf5:	ja     408b0d <flatcc_emitter@@Base+0x6d>
  408bfb:	nop    DWORD PTR [rax+rax*1+0x0]
  408c00:	mov    r12,r15
  408c03:	xor    r15d,r15d
  408c06:	jmp    408b19 <flatcc_emitter@@Base+0x79>
  408c0b:	nop    DWORD PTR [rax+rax*1+0x0]
  408c10:	mov    edi,0xb98
  408c15:	call   403190 <malloc@plt>
  408c1a:	test   rax,rax
  408c1d:	je     408cb8 <flatcc_emitter@@Base+0x218>
  408c23:	add    QWORD PTR [rbx+0x38],0xb80
  408c2b:	mov    QWORD PTR [rax+0xb88],r12
  408c32:	mov    QWORD PTR [rax+0xb80],r14
  408c39:	mov    QWORD PTR [r14+0xb88],rax
  408c40:	mov    QWORD PTR [r12+0xb80],rax
  408c48:	mov    QWORD PTR [rbx+0x8],rax
  408c4c:	jmp    408bc9 <flatcc_emitter@@Base+0x129>
  408c51:	nop    DWORD PTR [rax+0x0]
  408c58:	mov    edi,0xb98
  408c5d:	call   403190 <malloc@plt>
  408c62:	test   rax,rax
  408c65:	je     408cb8 <flatcc_emitter@@Base+0x218>
  408c67:	lea    rdx,[rax+0x5c0]
  408c6e:	add    QWORD PTR [rbx+0x38],0xb80
  408c76:	mov    QWORD PTR [rbx],rax
  408c79:	mov    QWORD PTR [rbx+0x8],rax
  408c7d:	mov    QWORD PTR [rax+0xb80],rax
  408c84:	mov    QWORD PTR [rax+0xb88],rax
  408c8b:	mov    QWORD PTR [rbx+0x10],rdx
  408c8f:	mov    QWORD PTR [rbx+0x20],rdx
  408c93:	mov    QWORD PTR [rbx+0x18],0x5c0
  408c9b:	mov    QWORD PTR [rbx+0x28],0x5c0
  408ca3:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408cad:	jmp    408b00 <flatcc_emitter@@Base+0x60>
  408cb2:	nop    WORD PTR [rax+rax*1+0x0]
  408cb8:	add    rsp,0x18
  408cbc:	pop    rbx
  408cbd:	pop    rbp
  408cbe:	pop    r12
  408cc0:	pop    r13
  408cc2:	pop    r14
  408cc4:	mov    eax,0xffffffff
  408cc9:	pop    r15
  408ccb:	ret    
  408ccc:	nop    DWORD PTR [rax+0x0]
  408cd0:	mov    rax,QWORD PTR [rdi+0x18]
  408cd4:	cmp    rax,r8
  408cd7:	jae    408e80 <flatcc_emitter@@Base+0x3e0>
  408cdd:	movsxd rax,edx
  408ce0:	shl    rax,0x4
  408ce4:	add    rbp,rax
  408ce7:	mov    edx,edx
  408ce9:	shl    rdx,0x4
  408ced:	mov    rax,rbp
  408cf0:	sub    rax,rdx
  408cf3:	mov    QWORD PTR [rsp+0x8],rax
  408cf8:	nop    DWORD PTR [rax+rax*1+0x0]
  408d00:	cmp    rbp,QWORD PTR [rsp+0x8]
  408d05:	je     408b43 <flatcc_emitter@@Base+0xa3>
  408d0b:	sub    rbp,0x10
  408d0f:	mov    r12,QWORD PTR [rbp+0x8]
  408d13:	mov    r13,QWORD PTR [rbp+0x0]
  408d17:	add    r13,r12
  408d1a:	test   r12,r12
  408d1d:	je     408d00 <flatcc_emitter@@Base+0x260>
  408d1f:	mov    rdx,QWORD PTR [rbx+0x18]
  408d23:	cmp    rdx,r12
  408d26:	jae    408d60 <flatcc_emitter@@Base+0x2c0>
  408d28:	test   rdx,rdx
  408d2b:	je     408d70 <flatcc_emitter@@Base+0x2d0>
  408d2d:	sub    r12,rdx
  408d30:	xor    ecx,ecx
  408d32:	mov    rdi,QWORD PTR [rbx+0x10]
  408d36:	mov    rax,rdx
  408d39:	neg    rax
  408d3c:	add    rdi,rax
  408d3f:	mov    QWORD PTR [rbx+0x10],rdi
  408d43:	mov    QWORD PTR [rbx+0x18],rcx
  408d47:	add    r13,rax
  408d4a:	mov    rsi,r13
  408d4d:	call   403180 <memcpy@plt>
  408d52:	test   r12,r12
  408d55:	je     408d00 <flatcc_emitter@@Base+0x260>
  408d57:	mov    rdx,QWORD PTR [rbx+0x18]
  408d5b:	cmp    rdx,r12
  408d5e:	jb     408d28 <flatcc_emitter@@Base+0x288>
  408d60:	mov    rcx,rdx
  408d63:	sub    rcx,r12
  408d66:	mov    rdx,r12
  408d69:	xor    r12d,r12d
  408d6c:	jmp    408d32 <flatcc_emitter@@Base+0x292>
  408d6e:	xchg   ax,ax
  408d70:	mov    r15,QWORD PTR [rbx]
  408d73:	test   r15,r15
  408d76:	je     408e18 <flatcc_emitter@@Base+0x378>
  408d7c:	mov    rax,QWORD PTR [r15+0xb88]
  408d83:	mov    r14,QWORD PTR [rbx+0x8]
  408d87:	cmp    rax,r14
  408d8a:	je     408dd8 <flatcc_emitter@@Base+0x338>
  408d8c:	mov    edx,DWORD PTR [r15+0xb90]
  408d93:	sub    edx,0xb80
  408d99:	mov    DWORD PTR [rax+0xb90],edx
  408d9f:	mov    QWORD PTR [rbx],rax
  408da2:	lea    rdx,[rax+0xb80]
  408da9:	mov    QWORD PTR [rbx+0x10],rdx
  408dad:	mov    rdx,QWORD PTR [rax+0xb80]
  408db4:	mov    QWORD PTR [rbx+0x18],0xb80
  408dbc:	mov    edx,DWORD PTR [rdx+0xb90]
  408dc2:	sub    edx,0xb80
  408dc8:	mov    DWORD PTR [rax+0xb90],edx
  408dce:	jmp    408d1f <flatcc_emitter@@Base+0x27f>
  408dd3:	nop    DWORD PTR [rax+rax*1+0x0]
  408dd8:	mov    edi,0xb98
  408ddd:	call   403190 <malloc@plt>
  408de2:	test   rax,rax
  408de5:	je     408cb8 <flatcc_emitter@@Base+0x218>
  408deb:	add    QWORD PTR [rbx+0x38],0xb80
  408df3:	mov    QWORD PTR [rax+0xb88],r14
  408dfa:	mov    QWORD PTR [rax+0xb80],r15
  408e01:	mov    QWORD PTR [r15+0xb88],rax
  408e08:	mov    QWORD PTR [r14+0xb80],rax
  408e0f:	mov    QWORD PTR [rbx],rax
  408e12:	jmp    408da2 <flatcc_emitter@@Base+0x302>
  408e14:	nop    DWORD PTR [rax+0x0]
  408e18:	mov    edi,0xb98
  408e1d:	call   403190 <malloc@plt>
  408e22:	test   rax,rax
  408e25:	je     408cb8 <flatcc_emitter@@Base+0x218>
  408e2b:	lea    rdx,[rax+0x5c0]
  408e32:	add    QWORD PTR [rbx+0x38],0xb80
  408e3a:	mov    QWORD PTR [rbx],rax
  408e3d:	mov    QWORD PTR [rbx+0x8],rax
  408e41:	mov    QWORD PTR [rax+0xb80],rax
  408e48:	mov    QWORD PTR [rax+0xb88],rax
  408e4f:	mov    QWORD PTR [rbx+0x10],rdx
  408e53:	mov    QWORD PTR [rbx+0x20],rdx
  408e57:	mov    QWORD PTR [rbx+0x18],0x5c0
  408e5f:	mov    QWORD PTR [rbx+0x28],0x5c0
  408e67:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408e71:	jmp    408d1f <flatcc_emitter@@Base+0x27f>
  408e76:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408e80:	mov    rcx,QWORD PTR [rdi+0x10]
  408e84:	sub    rax,r8
  408e87:	sub    rcx,r8
  408e8a:	mov    QWORD PTR [rdi+0x10],rcx
  408e8e:	mov    QWORD PTR [rdi+0x18],rax
  408e92:	jmp    408b6b <flatcc_emitter@@Base+0xcb>
  408e97:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408ea0 <flatcc_emitter_copy_buffer@@Base>:
  408ea0:	endbr64 
  408ea4:	mov    rax,QWORD PTR [rdi+0x30]
  408ea8:	cmp    rax,rdx
  408eab:	ja     408f50 <flatcc_emitter_copy_buffer@@Base+0xb0>
  408eb1:	mov    rcx,QWORD PTR [rdi]
  408eb4:	test   rcx,rcx
  408eb7:	je     408f52 <flatcc_emitter_copy_buffer@@Base+0xb2>
  408ebd:	push   rbp
  408ebe:	mov    r8,rsi
  408ec1:	mov    rbp,rdi
  408ec4:	push   rbx
  408ec5:	sub    rsp,0x8
  408ec9:	mov    rsi,QWORD PTR [rdi+0x10]
  408ecd:	cmp    rcx,QWORD PTR [rdi+0x8]
  408ed1:	je     408f60 <flatcc_emitter_copy_buffer@@Base+0xc0>
  408ed7:	mov    ecx,0xb80
  408edc:	mov    rbx,rcx
  408edf:	sub    rbx,QWORD PTR [rdi+0x18]
  408ee3:	mov    rdx,rbx
  408ee6:	mov    rdi,r8
  408ee9:	call   403180 <memcpy@plt>
  408eee:	lea    rcx,[rax+rbx*1]
  408ef2:	mov    rax,QWORD PTR [rbp+0x0]
  408ef6:	mov    rbx,QWORD PTR [rax+0xb80]
  408efd:	cmp    rbx,QWORD PTR [rbp+0x8]
  408f01:	je     408f2f <flatcc_emitter_copy_buffer@@Base+0x8f>
  408f03:	nop    DWORD PTR [rax+rax*1+0x0]
  408f08:	mov    rsi,rbx
  408f0b:	mov    rdi,rcx
  408f0e:	mov    edx,0xb80
  408f13:	call   403180 <memcpy@plt>
  408f18:	mov    rbx,QWORD PTR [rbx+0xb80]
  408f1f:	mov    rcx,rax
  408f22:	add    rcx,0xb80
  408f29:	cmp    QWORD PTR [rbp+0x8],rbx
  408f2d:	jne    408f08 <flatcc_emitter_copy_buffer@@Base+0x68>
  408f2f:	mov    edx,0xb80
  408f34:	sub    rdx,QWORD PTR [rbp+0x28]
  408f38:	mov    rsi,rbx
  408f3b:	mov    rdi,rcx
  408f3e:	call   403180 <memcpy@plt>
  408f43:	add    rsp,0x8
  408f47:	mov    rcx,rax
  408f4a:	pop    rbx
  408f4b:	mov    rax,rcx
  408f4e:	pop    rbp
  408f4f:	ret    
  408f50:	xor    ecx,ecx
  408f52:	mov    rax,rcx
  408f55:	ret    
  408f56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408f60:	mov    rdx,rax
  408f63:	mov    rdi,r8
  408f66:	call   403180 <memcpy@plt>
  408f6b:	add    rsp,0x8
  408f6f:	mov    rcx,rax
  408f72:	pop    rbx
  408f73:	mov    rax,rcx
  408f76:	pop    rbp
  408f77:	ret    
  408f78:	nop    DWORD PTR [rax+rax*1+0x0]
  408f80:	mov    r9,rdi
  408f83:	mov    eax,edx
  408f85:	shr    r9,0x20
  408f89:	mov    edi,edi
  408f8b:	mov    r11,rdi
  408f8e:	mov    r8,r9
  408f91:	imul   rdi,rax
  408f95:	imul   r8,rax
  408f99:	mov    r10,rdx
  408f9c:	shr    r10,0x20
  408fa0:	imul   r11,r10
  408fa4:	mov    rax,rdi
  408fa7:	shr    rax,0x20
  408fab:	mov    edi,r8d
  408fae:	add    rax,rdi
  408fb1:	mov    edi,0x80000000
  408fb6:	mov    edx,r11d
  408fb9:	add    rax,rdi
  408fbc:	add    rax,rdx
  408fbf:	imul   r9,r10
  408fc3:	mov    rdx,r8
  408fc6:	shr    rdx,0x20
  408fca:	shr    r11,0x20
  408fce:	add    rdx,r11
  408fd1:	lea    r8,[rdx+r9*1]
  408fd5:	shr    rax,0x20
  408fd9:	add    rax,r8
  408fdc:	mov    QWORD PTR [rsp-0x18],rax
  408fe1:	mov    QWORD PTR [rsp-0x10],0x0
  408fea:	lea    eax,[rsi+rcx*1+0x40]
  408fee:	vmovdqa xmm1,XMMWORD PTR [rsp-0x18]
  408ff4:	vpinsrd xmm0,xmm1,eax,0x2
  408ffa:	vmovq  rax,xmm0
  408fff:	vpextrq rdx,xmm0,0x1
  409005:	ret    
  409006:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409010:	sub    rsp,0x18
  409014:	mov    QWORD PTR [rsp+0x8],rsi
  409019:	mov    QWORD PTR [rsp],rdi
  40901d:	mov    ecx,DWORD PTR [rsp+0x8]
  409021:	test   rdi,rdi
  409024:	je     409088 <flatcc_emitter_copy_buffer@@Base+0x1e8>
  409026:	mov    rax,rdi
  409029:	movabs rdi,0xffc0000000000000
  409033:	lea    edx,[rcx-0xa]
  409036:	mov    rsi,rdi
  409039:	test   rax,rdi
  40903c:	jne    40904e <flatcc_emitter_copy_buffer@@Base+0x1ae>
  40903e:	xchg   ax,ax
  409040:	shl    rax,0xa
  409044:	mov    ecx,edx
  409046:	sub    edx,0xa
  409049:	test   rax,rsi
  40904c:	je     409040 <flatcc_emitter_copy_buffer@@Base+0x1a0>
  40904e:	test   rax,rax
  409051:	js     409069 <flatcc_emitter_copy_buffer@@Base+0x1c9>
  409053:	lea    edx,[rcx-0x1]
  409056:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409060:	mov    ecx,edx
  409062:	dec    edx
  409064:	add    rax,rax
  409067:	jns    409060 <flatcc_emitter_copy_buffer@@Base+0x1c0>
  409069:	mov    QWORD PTR [rsp],rax
  40906d:	vmovdqa xmm1,XMMWORD PTR [rsp]
  409072:	add    rsp,0x18
  409076:	vpinsrd xmm0,xmm1,ecx,0x2
  40907c:	vmovq  rax,xmm0
  409081:	vpextrq rdx,xmm0,0x1
  409087:	ret    
  409088:	lea    rcx,[rip+0x5951]        # 40e9e0 <flatcc_builder_padding_base@@Base+0xba0>
  40908f:	mov    edx,0x104
  409094:	lea    rsi,[rip+0x4fa5]        # 40e040 <flatcc_builder_padding_base@@Base+0x200>
  40909b:	lea    rdi,[rip+0x5182]        # 40e224 <flatcc_builder_padding_base@@Base+0x3e4>
  4090a2:	call   403140 <__assert_fail@plt>
  4090a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004090b0 <grisu3_diy_fp_encode_double@@Base>:
  4090b0:	endbr64 
  4090b4:	push   r15
  4090b6:	mov    eax,0x4
  4090bb:	push   r14
  4090bd:	push   r13
  4090bf:	mov    r13d,edx
  4090c2:	push   r12
  4090c4:	mov    r12d,ecx
  4090c7:	push   rbp
  4090c8:	mov    rbp,r8
  4090cb:	push   rbx
  4090cc:	mov    ebx,esi
  4090ce:	sub    rsp,0x18
  4090d2:	mov    QWORD PTR [rsp+0x8],0x0
  4090db:	mov    QWORD PTR [rsp],rdi
  4090df:	test   ecx,ecx
  4090e1:	cmovne r12d,eax
  4090e5:	vmovdqa xmm1,XMMWORD PTR [rsp]
  4090ea:	xor    eax,eax
  4090ec:	vpinsrd xmm0,xmm1,eax,0x2
  4090f2:	vmovaps XMMWORD PTR [rsp],xmm0
  4090f7:	mov    rsi,QWORD PTR [rsp+0x8]
  4090fc:	mov    rdi,QWORD PTR [rsp]
  409100:	sub    ebx,edx
  409102:	call   409010 <flatcc_emitter_copy_buffer@@Base+0x170>
  409107:	mov    QWORD PTR [rsp+0x8],rdx
  40910c:	mov    QWORD PTR [rsp],rax
  409110:	mov    esi,DWORD PTR [rsp+0x8]
  409114:	mov    rdi,QWORD PTR [rsp]
  409118:	mov    ecx,esi
  40911a:	neg    ecx
  40911c:	shlx   r12d,r12d,ecx
  409121:	cmp    ebx,0xfffffea4
  409127:	jl     4093ff <grisu3_diy_fp_encode_double@@Base+0x34f>
  40912d:	cmp    ebx,0x15b
  409133:	jg     4093e0 <grisu3_diy_fp_encode_double@@Base+0x330>
  409139:	lea    eax,[rbx+0x15c]
  40913f:	sar    eax,0x3
  409142:	cdqe   
  409144:	lea    rdx,[rip+0x58f5]        # 40ea40 <flatcc_builder_padding_base@@Base+0xc00>
  40914b:	shl    rax,0x4
  40914f:	add    rax,rdx
  409152:	movsx  edx,WORD PTR [rax+0xa]
  409156:	mov    r14,QWORD PTR [rax]
  409159:	movsx  r15d,WORD PTR [rax+0x8]
  40915e:	cmp    ebx,edx
  409160:	jl     4093c1 <grisu3_diy_fp_encode_double@@Base+0x311>
  409166:	lea    eax,[rdx+0x7]
  409169:	cmp    ebx,eax
  40916b:	jg     4093a2 <grisu3_diy_fp_encode_double@@Base+0x2f2>
  409171:	cmp    ebx,edx
  409173:	je     4091c4 <grisu3_diy_fp_encode_double@@Base+0x114>
  409175:	sub    ebx,edx
  409177:	dec    ebx
  409179:	cmp    ebx,0x6
  40917c:	ja     40941e <grisu3_diy_fp_encode_double@@Base+0x36e>
  409182:	movsxd rax,ebx
  409185:	shl    rax,0x4
  409189:	lea    rdx,[rip+0x9f10]        # 4130a0 <__data_start@@Base+0x20>
  409190:	add    rax,rdx
  409193:	mov    rdi,QWORD PTR [rsp]
  409197:	mov    ecx,DWORD PTR [rax+0x8]
  40919a:	mov    rdx,QWORD PTR [rax]
  40919d:	call   408f80 <flatcc_emitter_copy_buffer@@Base+0xe0>
  4091a2:	mov    QWORD PTR [rsp],rax
  4091a6:	mov    QWORD PTR [rsp+0x8],rdx
  4091ab:	lea    edx,[rbx+r13*1+0x1]
  4091b0:	lea    eax,[r12+0x4]
  4091b5:	cmp    edx,0x13
  4091b8:	mov    rdi,QWORD PTR [rsp]
  4091bc:	mov    esi,DWORD PTR [rsp+0x8]
  4091c0:	cmovg  r12d,eax
  4091c4:	mov    ecx,r15d
  4091c7:	mov    rdx,r14
  4091ca:	call   408f80 <flatcc_emitter_copy_buffer@@Base+0xe0>
  4091cf:	mov    QWORD PTR [rsp],rax
  4091d3:	mov    QWORD PTR [rsp+0x8],rdx
  4091d8:	xor    eax,eax
  4091da:	mov    rdi,QWORD PTR [rsp]
  4091de:	test   r12d,r12d
  4091e1:	mov    rsi,QWORD PTR [rsp+0x8]
  4091e6:	setne  al
  4091e9:	mov    ebx,DWORD PTR [rsp+0x8]
  4091ed:	lea    r12d,[r12+rax*1+0x8]
  4091f2:	call   409010 <flatcc_emitter_copy_buffer@@Base+0x170>
  4091f7:	mov    QWORD PTR [rsp+0x8],rdx
  4091fc:	mov    QWORD PTR [rsp],rax
  409200:	mov    edx,DWORD PTR [rsp+0x8]
  409204:	mov    rax,QWORD PTR [rsp]
  409208:	sub    ebx,edx
  40920a:	lea    esi,[rdx+0x40]
  40920d:	shlx   ecx,r12d,ebx
  409212:	cmp    esi,0xfffffc0e
  409218:	jl     409308 <grisu3_diy_fp_encode_double@@Base+0x258>
  40921e:	lea    r9d,[rcx+0x4]
  409222:	mov    edi,0x4
  409227:	xor    r8d,r8d
  40922a:	xor    esi,esi
  40922c:	cmp    esi,r9d
  40922f:	jl     409240 <grisu3_diy_fp_encode_double@@Base+0x190>
  409231:	inc    rax
  409234:	bt     rax,0x35
  409239:	jae    409240 <grisu3_diy_fp_encode_double@@Base+0x190>
  40923b:	shr    rax,1
  40923e:	inc    edx
  409240:	movabs r10,0x1fffffffffffff
  40924a:	lea    esi,[rdx+0x1]
  40924d:	mov    r11,r10
  409250:	cmp    rax,r10
  409253:	jbe    409264 <grisu3_diy_fp_encode_double@@Base+0x1b4>
  409255:	nop    DWORD PTR [rax]
  409258:	shr    rax,1
  40925b:	mov    edx,esi
  40925d:	inc    esi
  40925f:	cmp    rax,r11
  409262:	ja     409258 <grisu3_diy_fp_encode_double@@Base+0x1a8>
  409264:	cmp    edx,0xfffffbce
  40926a:	jl     409358 <grisu3_diy_fp_encode_double@@Base+0x2a8>
  409270:	movabs r10,0x10000000000000
  40927a:	mov    rsi,rax
  40927d:	and    rsi,r10
  409280:	cmp    edx,0xfffffbce
  409286:	je     4092ba <grisu3_diy_fp_encode_double@@Base+0x20a>
  409288:	test   rsi,rsi
  40928b:	je     4092a4 <grisu3_diy_fp_encode_double@@Base+0x1f4>
  40928d:	jmp    409390 <grisu3_diy_fp_encode_double@@Base+0x2e0>
  409292:	nop    WORD PTR [rax+rax*1+0x0]
  409298:	test   rsi,rsi
  40929b:	jne    409368 <grisu3_diy_fp_encode_double@@Base+0x2b8>
  4092a1:	mov    edx,r11d
  4092a4:	add    rax,rax
  4092a7:	mov    rsi,rax
  4092aa:	lea    r11d,[rdx-0x1]
  4092ae:	and    rsi,r10
  4092b1:	cmp    r11d,0xfffffbce
  4092b8:	jne    409298 <grisu3_diy_fp_encode_double@@Base+0x1e8>
  4092ba:	test   rsi,rsi
  4092bd:	movabs rdx,0x10000000000000
  4092c7:	cmovne rsi,rdx
  4092cb:	movabs rdx,0xfffffffffffff
  4092d5:	and    rdx,rax
  4092d8:	or     rdx,rsi
  4092db:	sub    edi,ecx
  4092dd:	cmp    edi,r8d
  4092e0:	setge  al
  4092e3:	cmp    r9d,r8d
  4092e6:	mov    QWORD PTR [rbp+0x0],rdx
  4092ea:	setle  dl
  4092ed:	add    rsp,0x18
  4092f1:	pop    rbx
  4092f2:	pop    rbp
  4092f3:	pop    r12
  4092f5:	pop    r13
  4092f7:	or     eax,edx
  4092f9:	pop    r14
  4092fb:	movzx  eax,al
  4092fe:	pop    r15
  409300:	ret    
  409301:	nop    DWORD PTR [rax+0x0]
  409308:	cmp    esi,0xfffffbcf
  40930e:	jl     409380 <grisu3_diy_fp_encode_double@@Base+0x2d0>
  409310:	lea    edi,[rdx+0x472]
  409316:	mov    esi,0x40
  40931b:	sub    esi,edi
  40931d:	cmp    esi,0x3c
  409320:	jle    40943d <grisu3_diy_fp_encode_double@@Base+0x38d>
  409326:	mov    esi,0x2
  40932b:	sub    esi,edi
  40932d:	sarx   ecx,ecx,esi
  409332:	add    ecx,0x9
  409335:	shrx   rax,rax,rsi
  40933a:	lea    edx,[rdx+rsi*1+0x3e]
  40933e:	shr    rax,0x3e
  409342:	xor    r8d,r8d
  409345:	mov    r9d,ecx
  409348:	xor    edi,edi
  40934a:	mov    esi,0x3e
  40934f:	jmp    40922c <grisu3_diy_fp_encode_double@@Base+0x17c>
  409354:	nop    DWORD PTR [rax+0x0]
  409358:	mov    rdx,QWORD PTR [rip+0x5c51]        # 40efb0 <flatcc_builder_padding_base@@Base+0x1170>
  40935f:	jmp    4092db <grisu3_diy_fp_encode_double@@Base+0x22b>
  409364:	nop    DWORD PTR [rax+0x0]
  409368:	add    edx,0x432
  40936e:	mov    rsi,rdx
  409371:	shl    rsi,0x34
  409375:	jmp    4092cb <grisu3_diy_fp_encode_double@@Base+0x21b>
  40937a:	nop    WORD PTR [rax+rax*1+0x0]
  409380:	mov    esi,0x2
  409385:	jmp    40932d <grisu3_diy_fp_encode_double@@Base+0x27d>
  409387:	nop    WORD PTR [rax+rax*1+0x0]
  409390:	add    edx,0x433
  409396:	mov    rsi,rdx
  409399:	shl    rsi,0x34
  40939d:	jmp    4092cb <grisu3_diy_fp_encode_double@@Base+0x21b>
  4093a2:	lea    rcx,[rip+0x5657]        # 40ea00 <flatcc_builder_padding_base@@Base+0xbc0>
  4093a9:	mov    edx,0x59
  4093ae:	lea    rsi,[rip+0x4cfb]        # 40e0b0 <flatcc_builder_padding_base@@Base+0x270>
  4093b5:	lea    rdi,[rip+0x4e80]        # 40e23c <flatcc_builder_padding_base@@Base+0x3fc>
  4093bc:	call   403140 <__assert_fail@plt>
  4093c1:	lea    rcx,[rip+0x5638]        # 40ea00 <flatcc_builder_padding_base@@Base+0xbc0>
  4093c8:	mov    edx,0x58
  4093cd:	lea    rsi,[rip+0x4cdc]        # 40e0b0 <flatcc_builder_padding_base@@Base+0x270>
  4093d4:	lea    rdi,[rip+0x4e52]        # 40e22d <flatcc_builder_padding_base@@Base+0x3ed>
  4093db:	call   403140 <__assert_fail@plt>
  4093e0:	lea    rcx,[rip+0x5619]        # 40ea00 <flatcc_builder_padding_base@@Base+0xbc0>
  4093e7:	mov    edx,0x51
  4093ec:	lea    rsi,[rip+0x4cbd]        # 40e0b0 <flatcc_builder_padding_base@@Base+0x270>
  4093f3:	lea    rdi,[rip+0x4d4e]        # 40e148 <flatcc_builder_padding_base@@Base+0x308>
  4093fa:	call   403140 <__assert_fail@plt>
  4093ff:	lea    rcx,[rip+0x55fa]        # 40ea00 <flatcc_builder_padding_base@@Base+0xbc0>
  409406:	mov    edx,0x50
  40940b:	lea    rsi,[rip+0x4c9e]        # 40e0b0 <flatcc_builder_padding_base@@Base+0x270>
  409412:	lea    rdi,[rip+0x4d0f]        # 40e128 <flatcc_builder_padding_base@@Base+0x2e8>
  409419:	call   403140 <__assert_fail@plt>
  40941e:	lea    rcx,[rip+0x55fb]        # 40ea20 <flatcc_builder_padding_base@@Base+0xbe0>
  409425:	mov    edx,0xb9
  40942a:	lea    rsi,[rip+0x4c7f]        # 40e0b0 <flatcc_builder_padding_base@@Base+0x270>
  409431:	lea    rdi,[rip+0x4e1f]        # 40e257 <flatcc_builder_padding_base@@Base+0x417>
  409438:	call   403140 <__assert_fail@plt>
  40943d:	mov    r8d,0x3f
  409443:	sub    r8d,edi
  409446:	mov    r10d,r8d
  409449:	mov    r8d,0x1
  40944f:	mov    r9d,0x8
  409455:	shlx   r8,r8,r10
  40945a:	and    r8,rax
  40945d:	shlx   r9,r9,r10
  409462:	add    edx,esi
  409464:	mov    edi,r9d
  409467:	shl    r8d,0x3
  40946b:	add    r9d,ecx
  40946e:	shrx   rax,rax,rsi
  409473:	jmp    40922c <grisu3_diy_fp_encode_double@@Base+0x17c>
  409478:	nop    DWORD PTR [rax+rax*1+0x0]
  409480:	push   r14
  409482:	lea    r8,[rdi+0x3e9]
  409489:	push   r13
  40948b:	push   r12
  40948d:	mov    r12,rdx
  409490:	push   rbp
  409491:	mov    rbp,rdi
  409494:	push   rbx
  409495:	sub    rsp,0x10
  409499:	mov    rax,QWORD PTR fs:0x28
  4094a2:	mov    QWORD PTR [rsp+0x8],rax
  4094a7:	xor    eax,eax
  4094a9:	mov    QWORD PTR [rdx],0x0
  4094b0:	cmp    esi,0x3e8
  4094b6:	jg     4094c0 <grisu3_diy_fp_encode_double@@Base+0x410>
  4094b8:	movsxd rsi,esi
  4094bb:	lea    r8,[rdi+rsi*1+0x1]
  4094c0:	cmp    r8,rbp
  4094c3:	je     4097b0 <grisu3_diy_fp_encode_double@@Base+0x700>
  4094c9:	movsx  edi,BYTE PTR [rbp+0x0]
  4094cd:	cmp    dil,0x2d
  4094d1:	je     4096e8 <grisu3_diy_fp_encode_double@@Base+0x638>
  4094d7:	cmp    dil,0x30
  4094db:	je     409618 <grisu3_diy_fp_encode_double@@Base+0x568>
  4094e1:	lea    eax,[rdi-0x31]
  4094e4:	mov    rbx,rbp
  4094e7:	cmp    al,0x8
  4094e9:	ja     4095f0 <grisu3_diy_fp_encode_double@@Base+0x540>
  4094ef:	mov    rax,rbp
  4094f2:	xor    r13d,r13d
  4094f5:	sub    edi,0x30
  4094f8:	lea    rbx,[rax+0x1]
  4094fc:	movsxd rdi,edi
  4094ff:	cmp    r8,rbx
  409502:	je     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  409508:	movsx  rax,BYTE PTR [rax+0x1]
  40950d:	lea    edx,[rax-0x30]
  409510:	mov    rcx,rbx
  409513:	movabs rsi,0x1999999999999998
  40951d:	cmp    dl,0x9
  409520:	jbe    409539 <grisu3_diy_fp_encode_double@@Base+0x489>
  409522:	jmp    409bf1 <grisu3_diy_fp_encode_double@@Base+0xb41>
  409527:	nop    WORD PTR [rax+rax*1+0x0]
  409530:	cmp    rdi,rsi
  409533:	ja     409668 <grisu3_diy_fp_encode_double@@Base+0x5b8>
  409539:	lea    rdx,[rdi+rdi*4]
  40953d:	inc    rcx
  409540:	lea    rdi,[rax+rdx*2-0x30]
  409545:	cmp    r8,rcx
  409548:	je     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  40954e:	movsx  rax,BYTE PTR [rcx]
  409552:	lea    edx,[rax-0x30]
  409555:	cmp    dl,0x9
  409558:	jbe    409530 <grisu3_diy_fp_encode_double@@Base+0x480>
  40955a:	mov    edx,ecx
  40955c:	sub    edx,ebx
  40955e:	xor    esi,esi
  409560:	mov    rbx,rcx
  409563:	xor    ecx,ecx
  409565:	lea    r9d,[rax-0x31]
  409569:	cmp    r9b,0x8
  40956d:	jbe    409733 <grisu3_diy_fp_encode_double@@Base+0x683>
  409573:	cmp    al,0x2e
  409575:	je     4097c0 <grisu3_diy_fp_encode_double@@Base+0x710>
  40957b:	or     eax,0x20
  40957e:	add    esi,edx
  409580:	cmp    al,0x65
  409582:	je     409870 <grisu3_diy_fp_encode_double@@Base+0x7c0>
  409588:	test   rdi,rdi
  40958b:	je     4096c0 <grisu3_diy_fp_encode_double@@Base+0x610>
  409591:	cmp    esi,0xfffffebc
  409597:	jl     4096c0 <grisu3_diy_fp_encode_double@@Base+0x610>
  40959d:	cmp    esi,0x136
  4095a3:	jg     409788 <grisu3_diy_fp_encode_double@@Base+0x6d8>
  4095a9:	movabs rax,0x1fffffffffffff
  4095b3:	cmp    rdi,rax
  4095b6:	ja     4095c1 <grisu3_diy_fp_encode_double@@Base+0x511>
  4095b8:	cmp    esi,0x16
  4095bb:	jbe    409976 <grisu3_diy_fp_encode_double@@Base+0x8c6>
  4095c1:	mov    r8,r12
  4095c4:	call   4090b0 <grisu3_diy_fp_encode_double@@Base>
  4095c9:	test   eax,eax
  4095cb:	jne    4096c0 <grisu3_diy_fp_encode_double@@Base+0x610>
  4095d1:	mov    rsi,rsp
  4095d4:	mov    rdi,rbp
  4095d7:	call   403110 <strtod@plt>
  4095dc:	mov    rax,QWORD PTR [rsp]
  4095e0:	vmovsd QWORD PTR [r12],xmm0
  4095e6:	cmp    rbx,rax
  4095e9:	cmova  rbx,rax
  4095ed:	nop    DWORD PTR [rax]
  4095f0:	mov    rsi,QWORD PTR [rsp+0x8]
  4095f5:	xor    rsi,QWORD PTR fs:0x28
  4095fe:	mov    rax,rbx
  409601:	jne    409c5d <grisu3_diy_fp_encode_double@@Base+0xbad>
  409607:	add    rsp,0x10
  40960b:	pop    rbx
  40960c:	pop    rbp
  40960d:	pop    r12
  40960f:	pop    r13
  409611:	pop    r14
  409613:	ret    
  409614:	nop    DWORD PTR [rax+0x0]
  409618:	mov    rax,rbp
  40961b:	xor    r13d,r13d
  40961e:	lea    rbx,[rax+0x1]
  409622:	cmp    r8,rbx
  409625:	je     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  409627:	movsx  rax,BYTE PTR [rax+0x1]
  40962c:	mov    edx,eax
  40962e:	or     edx,0x20
  409631:	cmp    dl,0x78
  409634:	je     409bd0 <grisu3_diy_fp_encode_double@@Base+0xb20>
  40963a:	cmp    al,0x30
  40963c:	je     409654 <grisu3_diy_fp_encode_double@@Base+0x5a4>
  40963e:	jmp    409910 <grisu3_diy_fp_encode_double@@Base+0x860>
  409643:	nop    DWORD PTR [rax+rax*1+0x0]
  409648:	movsx  rax,BYTE PTR [rbx]
  40964c:	cmp    al,0x30
  40964e:	jne    409910 <grisu3_diy_fp_encode_double@@Base+0x860>
  409654:	inc    rbx
  409657:	cmp    r8,rbx
  40965a:	jne    409648 <grisu3_diy_fp_encode_double@@Base+0x598>
  40965c:	nop    DWORD PTR [rax+0x0]
  409660:	xor    ebx,ebx
  409662:	jmp    4095f0 <grisu3_diy_fp_encode_double@@Base+0x540>
  409664:	nop    DWORD PTR [rax+0x0]
  409668:	xor    edx,edx
  40966a:	cmp    al,0x34
  40966c:	setg   dl
  40966f:	add    rdi,rdx
  409672:	mov    edx,ecx
  409674:	sub    edx,ebx
  409676:	mov    rbx,rcx
  409679:	mov    ecx,0x1
  40967e:	cmp    al,0x30
  409680:	jne    409bf5 <grisu3_diy_fp_encode_double@@Base+0xb45>
  409686:	sub    ecx,ebx
  409688:	jmp    40969b <grisu3_diy_fp_encode_double@@Base+0x5eb>
  40968a:	nop    WORD PTR [rax+rax*1+0x0]
  409690:	movzx  eax,BYTE PTR [rbx]
  409693:	cmp    al,0x30
  409695:	jne    409720 <grisu3_diy_fp_encode_double@@Base+0x670>
  40969b:	lea    esi,[rcx+rbx*1]
  40969e:	inc    rbx
  4096a1:	cmp    r8,rbx
  4096a4:	jne    409690 <grisu3_diy_fp_encode_double@@Base+0x5e0>
  4096a6:	jmp    409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  4096a8:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5918]        # 40efc8 <flatcc_builder_padding_base@@Base+0x1188>
  4096b0:	vmovsd QWORD PTR [r12],xmm0
  4096b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4096c0:	test   r13d,r13d
  4096c3:	je     4095f0 <grisu3_diy_fp_encode_double@@Base+0x540>
  4096c9:	vmovsd xmm0,QWORD PTR [r12]
  4096cf:	vxorpd xmm0,xmm0,XMMWORD PTR [rip+0x59a9]        # 40f080 <flatcc_builder_padding_base@@Base+0x1240>
  4096d7:	vmovsd QWORD PTR [r12],xmm0
  4096dd:	jmp    4095f0 <grisu3_diy_fp_encode_double@@Base+0x540>
  4096e2:	nop    WORD PTR [rax+rax*1+0x0]
  4096e8:	lea    rax,[rbp+0x1]
  4096ec:	cmp    r8,rax
  4096ef:	je     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  4096f5:	movsx  edi,BYTE PTR [rbp+0x1]
  4096f9:	cmp    dil,0x30
  4096fd:	je     4097a0 <grisu3_diy_fp_encode_double@@Base+0x6f0>
  409703:	lea    edx,[rdi-0x31]
  409706:	xor    ebx,ebx
  409708:	mov    r13d,0x1
  40970e:	cmp    dl,0x8
  409711:	jbe    4094f5 <grisu3_diy_fp_encode_double@@Base+0x445>
  409717:	jmp    4095f0 <grisu3_diy_fp_encode_double@@Base+0x540>
  40971c:	nop    DWORD PTR [rax+0x0]
  409720:	lea    r9d,[rax-0x31]
  409724:	mov    ecx,0x1
  409729:	cmp    r9b,0x8
  40972d:	ja     409573 <grisu3_diy_fp_encode_double@@Base+0x4c3>
  409733:	lea    rcx,[rbx+0x1]
  409737:	lea    r10d,[rsi+0x1]
  40973b:	cmp    r8,rcx
  40973e:	je     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  409744:	movzx  eax,BYTE PTR [rbx+0x1]
  409748:	lea    r9d,[rax-0x30]
  40974c:	cmp    r9b,0x9
  409750:	ja     409c4a <grisu3_diy_fp_encode_double@@Base+0xb9a>
  409756:	lea    r9d,[rsi+0x2]
  40975a:	mov    rbx,rcx
  40975d:	sub    r9d,ecx
  409760:	lea    esi,[r9+rbx*1]
  409764:	inc    rbx
  409767:	cmp    r8,rbx
  40976a:	je     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  409770:	movzx  eax,BYTE PTR [rbx]
  409773:	lea    ecx,[rax-0x30]
  409776:	cmp    cl,0x9
  409779:	jbe    409760 <grisu3_diy_fp_encode_double@@Base+0x6b0>
  40977b:	mov    ecx,0x1
  409780:	jmp    409573 <grisu3_diy_fp_encode_double@@Base+0x4c3>
  409785:	nop    DWORD PTR [rax]
  409788:	mov    rax,QWORD PTR [rip+0x5829]        # 40efb8 <flatcc_builder_padding_base@@Base+0x1178>
  40978f:	mov    QWORD PTR [r12],rax
  409793:	jmp    4096c0 <grisu3_diy_fp_encode_double@@Base+0x610>
  409798:	nop    DWORD PTR [rax+rax*1+0x0]
  4097a0:	mov    r13d,0x1
  4097a6:	jmp    40961e <grisu3_diy_fp_encode_double@@Base+0x56e>
  4097ab:	nop    DWORD PTR [rax+rax*1+0x0]
  4097b0:	mov    rbx,r8
  4097b3:	jmp    4095f0 <grisu3_diy_fp_encode_double@@Base+0x540>
  4097b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4097c0:	movsx  rax,BYTE PTR [rbx+0x1]
  4097c5:	lea    r10,[rbx+0x1]
  4097c9:	lea    r9d,[rax-0x30]
  4097cd:	cmp    r9b,0x9
  4097d1:	ja     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  4097d7:	cmp    r8,r10
  4097da:	je     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  4097e0:	movabs r11,0x1999999999999998
  4097ea:	cmp    rdi,r11
  4097ed:	ja     409c55 <grisu3_diy_fp_encode_double@@Base+0xba5>
  4097f3:	mov    rbx,r10
  4097f6:	jmp    409809 <grisu3_diy_fp_encode_double@@Base+0x759>
  4097f8:	nop    DWORD PTR [rax+rax*1+0x0]
  409800:	cmp    rdi,r11
  409803:	ja     409c1c <grisu3_diy_fp_encode_double@@Base+0xb6c>
  409809:	lea    rdi,[rdi+rdi*4]
  40980d:	inc    rbx
  409810:	lea    rdi,[rax+rdi*2-0x30]
  409815:	mov    eax,esi
  409817:	sub    eax,ebx
  409819:	lea    r9d,[rax+r10*1]
  40981d:	cmp    r8,rbx
  409820:	je     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  409826:	movsx  rax,BYTE PTR [rbx]
  40982a:	lea    r14d,[rax-0x30]
  40982e:	cmp    r14b,0x9
  409832:	jbe    409800 <grisu3_diy_fp_encode_double@@Base+0x750>
  409834:	mov    rax,rbx
  409837:	sub    rax,r10
  40983a:	add    edx,eax
  40983c:	movzx  eax,BYTE PTR [rbx]
  40983f:	cmp    al,0x30
  409841:	jne    409917 <grisu3_diy_fp_encode_double@@Base+0x867>
  409847:	inc    r9d
  40984a:	sub    r9d,ebx
  40984d:	jmp    40985b <grisu3_diy_fp_encode_double@@Base+0x7ab>
  40984f:	nop
  409850:	movzx  eax,BYTE PTR [rbx]
  409853:	cmp    al,0x30
  409855:	jne    409920 <grisu3_diy_fp_encode_double@@Base+0x870>
  40985b:	lea    esi,[r9+rbx*1]
  40985f:	inc    rbx
  409862:	cmp    r8,rbx
  409865:	jne    409850 <grisu3_diy_fp_encode_double@@Base+0x7a0>
  409867:	xor    ebx,ebx
  409869:	jmp    4095f0 <grisu3_diy_fp_encode_double@@Base+0x540>
  40986e:	xchg   ax,ax
  409870:	mov    rax,r8
  409873:	sub    rax,rbx
  409876:	cmp    rax,0x1
  40987a:	jle    409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  409880:	movsx  eax,BYTE PTR [rbx+0x1]
  409884:	cmp    al,0x2b
  409886:	je     409bd8 <grisu3_diy_fp_encode_double@@Base+0xb28>
  40988c:	cmp    al,0x2d
  40988e:	je     409c00 <grisu3_diy_fp_encode_double@@Base+0xb50>
  409894:	lea    r9,[rbx+0x1]
  409898:	xor    r11d,r11d
  40989b:	lea    r10d,[rax-0x30]
  40989f:	cmp    r10b,0x9
  4098a3:	ja     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  4098a9:	lea    rbx,[r9+0x1]
  4098ad:	sub    eax,0x30
  4098b0:	cmp    r8,rbx
  4098b3:	je     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  4098b9:	movsx  r9d,BYTE PTR [r9+0x1]
  4098be:	lea    r10d,[r9-0x30]
  4098c2:	cmp    r10b,0x9
  4098c6:	ja     4098f9 <grisu3_diy_fp_encode_double@@Base+0x849>
  4098c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4098d0:	cmp    eax,0x7fff
  4098d5:	jg     4098df <grisu3_diy_fp_encode_double@@Base+0x82f>
  4098d7:	lea    eax,[rax+rax*4]
  4098da:	lea    eax,[r9+rax*2-0x30]
  4098df:	inc    rbx
  4098e2:	cmp    r8,rbx
  4098e5:	je     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  4098eb:	movsx  r9d,BYTE PTR [rbx]
  4098ef:	lea    r10d,[r9-0x30]
  4098f3:	cmp    r10b,0x9
  4098f7:	jbe    4098d0 <grisu3_diy_fp_encode_double@@Base+0x820>
  4098f9:	lea    r8d,[rsi+rax*1]
  4098fd:	sub    esi,eax
  4098ff:	test   r11d,r11d
  409902:	cmove  esi,r8d
  409906:	jmp    409588 <grisu3_diy_fp_encode_double@@Base+0x4d8>
  40990b:	nop    DWORD PTR [rax+rax*1+0x0]
  409910:	xor    edi,edi
  409912:	jmp    40950d <grisu3_diy_fp_encode_double@@Base+0x45d>
  409917:	mov    esi,r9d
  40991a:	nop    WORD PTR [rax+rax*1+0x0]
  409920:	lea    r9d,[rax-0x31]
  409924:	cmp    r9b,0x8
  409928:	ja     40957b <grisu3_diy_fp_encode_double@@Base+0x4cb>
  40992e:	lea    rcx,[rbx+0x1]
  409932:	cmp    r8,rcx
  409935:	je     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  40993b:	movzx  eax,BYTE PTR [rbx+0x1]
  40993f:	lea    r9d,[rax-0x30]
  409943:	cmp    r9b,0x9
  409947:	ja     409969 <grisu3_diy_fp_encode_double@@Base+0x8b9>
  409949:	nop    DWORD PTR [rax+0x0]
  409950:	inc    rcx
  409953:	cmp    r8,rcx
  409956:	je     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  40995c:	movzx  eax,BYTE PTR [rcx]
  40995f:	lea    r9d,[rax-0x30]
  409963:	cmp    r9b,0x9
  409967:	jbe    409950 <grisu3_diy_fp_encode_double@@Base+0x8a0>
  409969:	mov    rbx,rcx
  40996c:	mov    ecx,0x1
  409971:	jmp    40957b <grisu3_diy_fp_encode_double@@Base+0x4cb>
  409976:	sub    esi,edx
  409978:	vxorpd xmm0,xmm0,xmm0
  40997c:	lea    eax,[rsi+0x16]
  40997f:	vcvtsi2sd xmm0,xmm0,rdi
  409984:	cmp    eax,0x2c
  409987:	ja     4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  40998d:	lea    rdx,[rip+0x4b4c]        # 40e4e0 <flatcc_builder_padding_base@@Base+0x6a0>
  409994:	movsxd rax,DWORD PTR [rdx+rax*4]
  409998:	add    rax,rdx
  40999b:	notrack jmp rax
  40999e:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x562a]        # 40efd0 <flatcc_builder_padding_base@@Base+0x1190>
  4099a6:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4099ab:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5625]        # 40efd8 <flatcc_builder_padding_base@@Base+0x1198>
  4099b3:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4099b8:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5620]        # 40efe0 <flatcc_builder_padding_base@@Base+0x11a0>
  4099c0:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4099c5:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x561b]        # 40efe8 <flatcc_builder_padding_base@@Base+0x11a8>
  4099cd:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4099d2:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5616]        # 40eff0 <flatcc_builder_padding_base@@Base+0x11b0>
  4099da:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4099df:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5611]        # 40eff8 <flatcc_builder_padding_base@@Base+0x11b8>
  4099e7:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4099ec:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x560c]        # 40f000 <flatcc_builder_padding_base@@Base+0x11c0>
  4099f4:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  4099f9:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5607]        # 40f008 <flatcc_builder_padding_base@@Base+0x11c8>
  409a01:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409a06:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5602]        # 40f010 <flatcc_builder_padding_base@@Base+0x11d0>
  409a0e:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409a13:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x55fd]        # 40f018 <flatcc_builder_padding_base@@Base+0x11d8>
  409a1b:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409a20:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x55f8]        # 40f020 <flatcc_builder_padding_base@@Base+0x11e0>
  409a28:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409a2d:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x55f3]        # 40f028 <flatcc_builder_padding_base@@Base+0x11e8>
  409a35:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409a3a:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x55ee]        # 40f030 <flatcc_builder_padding_base@@Base+0x11f0>
  409a42:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409a47:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x55e9]        # 40f038 <flatcc_builder_padding_base@@Base+0x11f8>
  409a4f:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409a54:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x55e4]        # 40f040 <flatcc_builder_padding_base@@Base+0x1200>
  409a5c:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409a61:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x55df]        # 40f048 <flatcc_builder_padding_base@@Base+0x1208>
  409a69:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409a6e:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x55da]        # 40f050 <flatcc_builder_padding_base@@Base+0x1210>
  409a76:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409a7b:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x55d5]        # 40f058 <flatcc_builder_padding_base@@Base+0x1218>
  409a83:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409a88:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x55d0]        # 40f060 <flatcc_builder_padding_base@@Base+0x1220>
  409a90:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409a95:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x55cb]        # 40f068 <flatcc_builder_padding_base@@Base+0x1228>
  409a9d:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409aa2:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5516]        # 40efc0 <flatcc_builder_padding_base@@Base+0x1180>
  409aaa:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409aaf:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x55b1]        # 40f068 <flatcc_builder_padding_base@@Base+0x1228>
  409ab7:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409abc:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x559c]        # 40f060 <flatcc_builder_padding_base@@Base+0x1220>
  409ac4:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409ac9:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5587]        # 40f058 <flatcc_builder_padding_base@@Base+0x1218>
  409ad1:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409ad6:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5572]        # 40f050 <flatcc_builder_padding_base@@Base+0x1210>
  409ade:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409ae3:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x555d]        # 40f048 <flatcc_builder_padding_base@@Base+0x1208>
  409aeb:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409af0:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5548]        # 40f040 <flatcc_builder_padding_base@@Base+0x1200>
  409af8:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409afd:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5533]        # 40f038 <flatcc_builder_padding_base@@Base+0x11f8>
  409b05:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409b0a:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x551e]        # 40f030 <flatcc_builder_padding_base@@Base+0x11f0>
  409b12:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409b17:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5509]        # 40f028 <flatcc_builder_padding_base@@Base+0x11e8>
  409b1f:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409b24:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x54f4]        # 40f020 <flatcc_builder_padding_base@@Base+0x11e0>
  409b2c:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409b31:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x54df]        # 40f018 <flatcc_builder_padding_base@@Base+0x11d8>
  409b39:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409b3e:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x54ca]        # 40f010 <flatcc_builder_padding_base@@Base+0x11d0>
  409b46:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409b4b:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x54b5]        # 40f008 <flatcc_builder_padding_base@@Base+0x11c8>
  409b53:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409b58:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x54a0]        # 40f000 <flatcc_builder_padding_base@@Base+0x11c0>
  409b60:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409b65:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x548b]        # 40eff8 <flatcc_builder_padding_base@@Base+0x11b8>
  409b6d:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409b72:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5476]        # 40eff0 <flatcc_builder_padding_base@@Base+0x11b0>
  409b7a:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409b7f:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5461]        # 40efe8 <flatcc_builder_padding_base@@Base+0x11a8>
  409b87:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409b8c:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x544c]        # 40efe0 <flatcc_builder_padding_base@@Base+0x11a0>
  409b94:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409b99:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5437]        # 40efd8 <flatcc_builder_padding_base@@Base+0x1198>
  409ba1:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409ba6:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5412]        # 40efc0 <flatcc_builder_padding_base@@Base+0x1180>
  409bae:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409bb3:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5415]        # 40efd0 <flatcc_builder_padding_base@@Base+0x1190>
  409bbb:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409bc0:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5400]        # 40efc8 <flatcc_builder_padding_base@@Base+0x1188>
  409bc8:	jmp    4096b0 <grisu3_diy_fp_encode_double@@Base+0x600>
  409bcd:	nop    DWORD PTR [rax]
  409bd0:	mov    rbx,rbp
  409bd3:	jmp    4095f0 <grisu3_diy_fp_encode_double@@Base+0x540>
  409bd8:	lea    r9,[rbx+0x2]
  409bdc:	cmp    r8,r9
  409bdf:	je     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  409be5:	movsx  eax,BYTE PTR [rbx+0x2]
  409be9:	xor    r11d,r11d
  409bec:	jmp    40989b <grisu3_diy_fp_encode_double@@Base+0x7eb>
  409bf1:	xor    edx,edx
  409bf3:	xor    ecx,ecx
  409bf5:	xor    esi,esi
  409bf7:	jmp    409565 <grisu3_diy_fp_encode_double@@Base+0x4b5>
  409bfc:	nop    DWORD PTR [rax+0x0]
  409c00:	lea    r9,[rbx+0x2]
  409c04:	cmp    r8,r9
  409c07:	je     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  409c0d:	movsx  eax,BYTE PTR [rbx+0x2]
  409c11:	mov    r11d,0x1
  409c17:	jmp    40989b <grisu3_diy_fp_encode_double@@Base+0x7eb>
  409c1c:	mov    rsi,rbx
  409c1f:	sub    rsi,r10
  409c22:	add    edx,esi
  409c24:	test   ecx,ecx
  409c26:	jne    40983c <grisu3_diy_fp_encode_double@@Base+0x78c>
  409c2c:	cmp    al,0x34
  409c2e:	setg   al
  409c31:	movzx  eax,al
  409c34:	add    rdi,rax
  409c37:	cmp    r8,rbx
  409c3a:	je     409660 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  409c40:	mov    ecx,0x1
  409c45:	jmp    40983c <grisu3_diy_fp_encode_double@@Base+0x78c>
  409c4a:	mov    esi,r10d
  409c4d:	mov    rbx,rcx
  409c50:	jmp    40977b <grisu3_diy_fp_encode_double@@Base+0x6cb>
  409c55:	mov    r9d,esi
  409c58:	mov    rbx,r10
  409c5b:	jmp    409c24 <grisu3_diy_fp_encode_double@@Base+0xb74>
  409c5d:	call   403130 <__stack_chk_fail@plt>
  409c62:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  409c6d:	nop    DWORD PTR [rax]

0000000000409c70 <flatcc_json_parser_error_string@@Base>:
  409c70:	endbr64 
  409c74:	cmp    edi,0x22
  409c77:	ja     409ec0 <flatcc_json_parser_error_string@@Base+0x250>
  409c7d:	lea    rdx,[rip+0x4910]        # 40e594 <flatcc_builder_padding_base@@Base+0x754>
  409c84:	mov    edi,edi
  409c86:	movsxd rax,DWORD PTR [rdx+rdi*4]
  409c8a:	add    rax,rdx
  409c8d:	notrack jmp rax
  409c90:	lea    rax,[rip+0x45e4]        # 40e27b <flatcc_builder_padding_base@@Base+0x43b>
  409c97:	ret    
  409c98:	nop    DWORD PTR [rax+rax*1+0x0]
  409ca0:	lea    rax,[rip+0x4802]        # 40e4a9 <flatcc_builder_padding_base@@Base+0x669>
  409ca7:	ret    
  409ca8:	nop    DWORD PTR [rax+rax*1+0x0]
  409cb0:	lea    rax,[rip+0x47e4]        # 40e49b <flatcc_builder_padding_base@@Base+0x65b>
  409cb7:	ret    
  409cb8:	nop    DWORD PTR [rax+rax*1+0x0]
  409cc0:	lea    rax,[rip+0x47ba]        # 40e481 <flatcc_builder_padding_base@@Base+0x641>
  409cc7:	ret    
  409cc8:	nop    DWORD PTR [rax+rax*1+0x0]
  409cd0:	lea    rax,[rip+0x4793]        # 40e46a <flatcc_builder_padding_base@@Base+0x62a>
  409cd7:	ret    
  409cd8:	nop    DWORD PTR [rax+rax*1+0x0]
  409ce0:	lea    rax,[rip+0x4766]        # 40e44d <flatcc_builder_padding_base@@Base+0x60d>
  409ce7:	ret    
  409ce8:	nop    DWORD PTR [rax+rax*1+0x0]
  409cf0:	lea    rax,[rip+0x473f]        # 40e436 <flatcc_builder_padding_base@@Base+0x5f6>
  409cf7:	ret    
  409cf8:	nop    DWORD PTR [rax+rax*1+0x0]
  409d00:	lea    rax,[rip+0x4715]        # 40e41c <flatcc_builder_padding_base@@Base+0x5dc>
  409d07:	ret    
  409d08:	nop    DWORD PTR [rax+rax*1+0x0]
  409d10:	lea    rax,[rip+0x46ea]        # 40e401 <flatcc_builder_padding_base@@Base+0x5c1>
  409d17:	ret    
  409d18:	nop    DWORD PTR [rax+rax*1+0x0]
  409d20:	lea    rax,[rip+0x4479]        # 40e1a0 <flatcc_builder_padding_base@@Base+0x360>
  409d27:	ret    
  409d28:	nop    DWORD PTR [rax+rax*1+0x0]
  409d30:	lea    rax,[rip+0x46ad]        # 40e3e4 <flatcc_builder_padding_base@@Base+0x5a4>
  409d37:	ret    
  409d38:	nop    DWORD PTR [rax+rax*1+0x0]
  409d40:	lea    rax,[rip+0x4689]        # 40e3d0 <flatcc_builder_padding_base@@Base+0x590>
  409d47:	ret    
  409d48:	nop    DWORD PTR [rax+rax*1+0x0]
  409d50:	lea    rax,[rip+0x4421]        # 40e178 <flatcc_builder_padding_base@@Base+0x338>
  409d57:	ret    
  409d58:	nop    DWORD PTR [rax+rax*1+0x0]
  409d60:	lea    rax,[rip+0x465a]        # 40e3c1 <flatcc_builder_padding_base@@Base+0x581>
  409d67:	ret    
  409d68:	nop    DWORD PTR [rax+rax*1+0x0]
  409d70:	lea    rax,[rip+0x463a]        # 40e3b1 <flatcc_builder_padding_base@@Base+0x571>
  409d77:	ret    
  409d78:	nop    DWORD PTR [rax+rax*1+0x0]
  409d80:	lea    rax,[rip+0x4616]        # 40e39d <flatcc_builder_padding_base@@Base+0x55d>
  409d87:	ret    
  409d88:	nop    DWORD PTR [rax+rax*1+0x0]
  409d90:	lea    rax,[rip+0x45f9]        # 40e390 <flatcc_builder_padding_base@@Base+0x550>
  409d97:	ret    
  409d98:	nop    DWORD PTR [rax+rax*1+0x0]
  409da0:	lea    rax,[rip+0x45da]        # 40e381 <flatcc_builder_padding_base@@Base+0x541>
  409da7:	ret    
  409da8:	nop    DWORD PTR [rax+rax*1+0x0]
  409db0:	lea    rax,[rip+0x45b8]        # 40e36f <flatcc_builder_padding_base@@Base+0x52f>
  409db7:	ret    
  409db8:	nop    DWORD PTR [rax+rax*1+0x0]
  409dc0:	lea    rax,[rip+0x4598]        # 40e35f <flatcc_builder_padding_base@@Base+0x51f>
  409dc7:	ret    
  409dc8:	nop    DWORD PTR [rax+rax*1+0x0]
  409dd0:	lea    rax,[rip+0x4575]        # 40e34c <flatcc_builder_padding_base@@Base+0x50c>
  409dd7:	ret    
  409dd8:	nop    DWORD PTR [rax+rax*1+0x0]
  409de0:	lea    rax,[rip+0x454c]        # 40e333 <flatcc_builder_padding_base@@Base+0x4f3>
  409de7:	ret    
  409de8:	nop    DWORD PTR [rax+rax*1+0x0]
  409df0:	lea    rax,[rip+0x452d]        # 40e324 <flatcc_builder_padding_base@@Base+0x4e4>
  409df7:	ret    
  409df8:	nop    DWORD PTR [rax+rax*1+0x0]
  409e00:	lea    rax,[rip+0x450c]        # 40e313 <flatcc_builder_padding_base@@Base+0x4d3>
  409e07:	ret    
  409e08:	nop    DWORD PTR [rax+rax*1+0x0]
  409e10:	lea    rax,[rip+0x44ed]        # 40e304 <flatcc_builder_padding_base@@Base+0x4c4>
  409e17:	ret    
  409e18:	nop    DWORD PTR [rax+rax*1+0x0]
  409e20:	lea    rax,[rip+0x44cb]        # 40e2f2 <flatcc_builder_padding_base@@Base+0x4b2>
  409e27:	ret    
  409e28:	nop    DWORD PTR [rax+rax*1+0x0]
  409e30:	lea    rax,[rip+0x44aa]        # 40e2e1 <flatcc_builder_padding_base@@Base+0x4a1>
  409e37:	ret    
  409e38:	nop    DWORD PTR [rax+rax*1+0x0]
  409e40:	lea    rax,[rip+0x4490]        # 40e2d7 <flatcc_builder_padding_base@@Base+0x497>
  409e47:	ret    
  409e48:	nop    DWORD PTR [rax+rax*1+0x0]
  409e50:	lea    rax,[rip+0x4477]        # 40e2ce <flatcc_builder_padding_base@@Base+0x48e>
  409e57:	ret    
  409e58:	nop    DWORD PTR [rax+rax*1+0x0]
  409e60:	lea    rax,[rip+0x4457]        # 40e2be <flatcc_builder_padding_base@@Base+0x47e>
  409e67:	ret    
  409e68:	nop    DWORD PTR [rax+rax*1+0x0]
  409e70:	lea    rax,[rip+0x4432]        # 40e2a9 <flatcc_builder_padding_base@@Base+0x469>
  409e77:	ret    
  409e78:	nop    DWORD PTR [rax+rax*1+0x0]
  409e80:	lea    rax,[rip+0x4413]        # 40e29a <flatcc_builder_padding_base@@Base+0x45a>
  409e87:	ret    
  409e88:	nop    DWORD PTR [rax+rax*1+0x0]
  409e90:	lea    rax,[rip+0x43f4]        # 40e28b <flatcc_builder_padding_base@@Base+0x44b>
  409e97:	ret    
  409e98:	nop    DWORD PTR [rax+rax*1+0x0]
  409ea0:	lea    rax,[rip+0x43d7]        # 40e27e <flatcc_builder_padding_base@@Base+0x43e>
  409ea7:	ret    
  409ea8:	nop    DWORD PTR [rax+rax*1+0x0]
  409eb0:	lea    rax,[rip+0x4600]        # 40e4b7 <flatcc_builder_padding_base@@Base+0x677>
  409eb7:	ret    
  409eb8:	nop    DWORD PTR [rax+rax*1+0x0]
  409ec0:	lea    rax,[rip+0x43ac]        # 40e273 <flatcc_builder_padding_base@@Base+0x433>
  409ec7:	ret    
  409ec8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000409ed0 <flatcc_json_parser_set_error@@Base>:
  409ed0:	endbr64 
  409ed4:	mov    rax,rdx
  409ed7:	mov    edx,DWORD PTR [rdi+0x20]
  409eda:	test   edx,edx
  409edc:	jne    409ef1 <flatcc_json_parser_set_error@@Base+0x21>
  409ede:	mov    rdx,rsi
  409ee1:	sub    rdx,QWORD PTR [rdi+0x8]
  409ee5:	inc    edx
  409ee7:	mov    DWORD PTR [rdi+0x20],ecx
  409eea:	mov    DWORD PTR [rdi+0x1c],edx
  409eed:	mov    QWORD PTR [rdi+0x38],rsi
  409ef1:	ret    
  409ef2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  409efd:	nop    DWORD PTR [rax]

0000000000409f00 <flatcc_json_parser_string_part@@Base>:
  409f00:	endbr64 
  409f04:	cmp    rsi,rdx
  409f07:	jne    409f20 <flatcc_json_parser_string_part@@Base+0x20>
  409f09:	jmp    409f40 <flatcc_json_parser_string_part@@Base+0x40>
  409f0b:	nop    DWORD PTR [rax+rax*1+0x0]
  409f10:	cmp    al,0x5c
  409f12:	je     409f30 <flatcc_json_parser_string_part@@Base+0x30>
  409f14:	cmp    al,0x1f
  409f16:	jbe    409f30 <flatcc_json_parser_string_part@@Base+0x30>
  409f18:	inc    rsi
  409f1b:	cmp    rdx,rsi
  409f1e:	je     409f40 <flatcc_json_parser_string_part@@Base+0x40>
  409f20:	movzx  eax,BYTE PTR [rsi]
  409f23:	cmp    al,0x22
  409f25:	jne    409f10 <flatcc_json_parser_string_part@@Base+0x10>
  409f27:	mov    rax,rsi
  409f2a:	ret    
  409f2b:	nop    DWORD PTR [rax+rax*1+0x0]
  409f30:	cmp    al,0x1f
  409f32:	jg     409f27 <flatcc_json_parser_string_part@@Base+0x27>
  409f34:	mov    ecx,0x11
  409f39:	jmp    409ed0 <flatcc_json_parser_set_error@@Base>
  409f3e:	xchg   ax,ax
  409f40:	mov    ecx,0x14
  409f45:	jmp    409ed0 <flatcc_json_parser_set_error@@Base>
  409f4a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000409f50 <flatcc_json_parser_space_ext@@Base>:
  409f50:	endbr64 
  409f54:	mov    rax,rdx
  409f57:	sub    rax,rsi
  409f5a:	cmp    rax,0xf
  409f5e:	jle    409f97 <flatcc_json_parser_space_ext@@Base+0x47>
  409f60:	movzx  eax,BYTE PTR [rsi]
  409f63:	cmp    al,0x20
  409f65:	jg     409f77 <flatcc_json_parser_space_ext@@Base+0x27>
  409f67:	cmp    WORD PTR [rsi],0x2020
  409f6c:	je     409f80 <flatcc_json_parser_space_ext@@Base+0x30>
  409f6e:	cmp    al,0x20
  409f70:	je     409f8c <flatcc_json_parser_space_ext@@Base+0x3c>
  409f72:	cmp    rsi,rdx
  409f75:	jne    409fb7 <flatcc_json_parser_space_ext@@Base+0x67>
  409f77:	mov    rax,rsi
  409f7a:	ret    
  409f7b:	nop    DWORD PTR [rax+rax*1+0x0]
  409f80:	movzx  eax,BYTE PTR [rsi+0x2]
  409f84:	add    rsi,0x2
  409f88:	cmp    al,0x20
  409f8a:	jne    409f93 <flatcc_json_parser_space_ext@@Base+0x43>
  409f8c:	movzx  eax,BYTE PTR [rsi+0x1]
  409f90:	inc    rsi
  409f93:	cmp    al,0x20
  409f95:	jg     409f77 <flatcc_json_parser_space_ext@@Base+0x27>
  409f97:	cmp    rdx,rsi
  409f9a:	je     409f77 <flatcc_json_parser_space_ext@@Base+0x27>
  409f9c:	movzx  eax,BYTE PTR [rsi]
  409f9f:	cmp    al,0x20
  409fa1:	jne    409fb7 <flatcc_json_parser_space_ext@@Base+0x67>
  409fa3:	nop    DWORD PTR [rax+rax*1+0x0]
  409fa8:	inc    rsi
  409fab:	cmp    rdx,rsi
  409fae:	je     409f77 <flatcc_json_parser_space_ext@@Base+0x27>
  409fb0:	movzx  eax,BYTE PTR [rsi]
  409fb3:	cmp    al,0x20
  409fb5:	je     409fa8 <flatcc_json_parser_space_ext@@Base+0x58>
  409fb7:	cmp    al,0x20
  409fb9:	jg     409f77 <flatcc_json_parser_space_ext@@Base+0x27>
  409fbb:	cmp    al,0xa
  409fbd:	je     409fef <flatcc_json_parser_space_ext@@Base+0x9f>
  409fbf:	jle    409fd8 <flatcc_json_parser_space_ext@@Base+0x88>
  409fc1:	cmp    al,0xd
  409fc3:	je     40a000 <flatcc_json_parser_space_ext@@Base+0xb0>
  409fc5:	cmp    al,0x20
  409fc7:	je     409f54 <flatcc_json_parser_space_ext@@Base+0x4>
  409fc9:	mov    ecx,0x5
  409fce:	jmp    409ed0 <flatcc_json_parser_set_error@@Base>
  409fd3:	nop    DWORD PTR [rax+rax*1+0x0]
  409fd8:	cmp    al,0x9
  409fda:	jne    409fc9 <flatcc_json_parser_space_ext@@Base+0x79>
  409fdc:	inc    rsi
  409fdf:	cmp    rdx,rsi
  409fe2:	je     409f77 <flatcc_json_parser_space_ext@@Base+0x27>
  409fe4:	movzx  eax,BYTE PTR [rsi]
  409fe7:	cmp    al,0x20
  409fe9:	jg     409f77 <flatcc_json_parser_space_ext@@Base+0x27>
  409feb:	cmp    al,0xa
  409fed:	jne    409fbf <flatcc_json_parser_space_ext@@Base+0x6f>
  409fef:	inc    rsi
  409ff2:	inc    DWORD PTR [rdi+0x18]
  409ff5:	mov    QWORD PTR [rdi+0x8],rsi
  409ff9:	jmp    409fdf <flatcc_json_parser_space_ext@@Base+0x8f>
  409ffb:	nop    DWORD PTR [rax+rax*1+0x0]
  40a000:	mov    rcx,rdx
  40a003:	sub    rcx,rsi
  40a006:	lea    rax,[rsi+0x1]
  40a00a:	cmp    rcx,0x1
  40a00e:	jle    40a016 <flatcc_json_parser_space_ext@@Base+0xc6>
  40a010:	cmp    BYTE PTR [rsi+0x1],0xa
  40a014:	je     40a01b <flatcc_json_parser_space_ext@@Base+0xcb>
  40a016:	mov    rsi,rax
  40a019:	jmp    409ff2 <flatcc_json_parser_space_ext@@Base+0xa2>
  40a01b:	lea    rax,[rsi+0x2]
  40a01f:	jmp    40a016 <flatcc_json_parser_space_ext@@Base+0xc6>
  40a021:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40a02c:	nop    DWORD PTR [rax+0x0]
  40a030:	push   r15
  40a032:	push   r14
  40a034:	push   r13
  40a036:	push   r12
  40a038:	mov    r12,rdi
  40a03b:	push   rbp
  40a03c:	push   rbx
  40a03d:	mov    rbx,rdx
  40a040:	sub    rsp,0x58
  40a044:	mov    QWORD PTR [rsp+0x10],rcx
  40a049:	mov    QWORD PTR [rsp+0x20],r8
  40a04e:	mov    rdx,QWORD PTR fs:0x28
  40a057:	mov    QWORD PTR [rsp+0x48],rdx
  40a05c:	xor    edx,edx
  40a05e:	mov    BYTE PTR [r8],0x0
  40a062:	cmp    rsi,rbx
  40a065:	je     40a1fa <flatcc_json_parser_space_ext@@Base+0x2aa>
  40a06b:	movzx  eax,BYTE PTR [rsi]
  40a06e:	cmp    al,0x22
  40a070:	je     40a250 <flatcc_json_parser_space_ext@@Base+0x300>
  40a076:	cmp    al,0x2e
  40a078:	je     40a121 <flatcc_json_parser_space_ext@@Base+0x1d1>
  40a07e:	mov    DWORD PTR [rdi+0x14],0x1
  40a085:	mov    r10,rsi
  40a088:	lea    rax,[rsp+0x38]
  40a08d:	mov    DWORD PTR [rsp+0x18],0x0
  40a095:	mov    BYTE PTR [rsp+0x1f],0x0
  40a09a:	mov    QWORD PTR [rsp+0x8],rax
  40a09f:	lea    r15,[rsp+0x3c]
  40a0a4:	lea    r14,[rsp+0x40]
  40a0a9:	mov    r13,QWORD PTR [rsp+0x10]
  40a0ae:	mov    rbp,r10
  40a0b1:	mov    rax,QWORD PTR [r13+0x0]
  40a0b5:	mov    rsi,r10
  40a0b8:	jmp    40a0dd <flatcc_json_parser_space_ext@@Base+0x18d>
  40a0ba:	nop    WORD PTR [rax+rax*1+0x0]
  40a0c0:	cmp    rbp,rax
  40a0c3:	jne    40a150 <flatcc_json_parser_space_ext@@Base+0x200>
  40a0c9:	add    r13,0x8
  40a0cd:	mov    rax,QWORD PTR [r13+0x0]
  40a0d1:	mov    rbp,rsi
  40a0d4:	test   rax,rax
  40a0d7:	je     40a1b0 <flatcc_json_parser_space_ext@@Base+0x260>
  40a0dd:	mov    rcx,QWORD PTR [rsp+0x8]
  40a0e2:	mov    r9,r15
  40a0e5:	mov    r8,r14
  40a0e8:	mov    rdx,rbx
  40a0eb:	mov    rdi,r12
  40a0ee:	call   rax
  40a0f0:	mov    rsi,rax
  40a0f3:	cmp    rbx,rax
  40a0f6:	jne    40a0c0 <flatcc_json_parser_space_ext@@Base+0x170>
  40a0f8:	mov    r10,rsi
  40a0fb:	mov    rdi,QWORD PTR [rsp+0x48]
  40a100:	xor    rdi,QWORD PTR fs:0x28
  40a109:	mov    rax,r10
  40a10c:	jne    40a280 <flatcc_json_parser_space_ext@@Base+0x330>
  40a112:	add    rsp,0x58
  40a116:	pop    rbx
  40a117:	pop    rbp
  40a118:	pop    r12
  40a11a:	pop    r13
  40a11c:	pop    r14
  40a11e:	pop    r15
  40a120:	ret    
  40a121:	mov    ecx,0x5
  40a126:	mov    rdx,rbx
  40a129:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40a12e:	mov    r8d,DWORD PTR [r12+0x14]
  40a133:	mov    r10,rax
  40a136:	test   r8d,r8d
  40a139:	je     40a210 <flatcc_json_parser_space_ext@@Base+0x2c0>
  40a13f:	cmp    rbx,r10
  40a142:	jne    40a088 <flatcc_json_parser_space_ext@@Base+0x138>
  40a148:	jmp    40a0fb <flatcc_json_parser_space_ext@@Base+0x1ab>
  40a14a:	nop    WORD PTR [rax+rax*1+0x0]
  40a150:	mov    edx,DWORD PTR [rsp+0x18]
  40a154:	mov    r10,rax
  40a157:	test   edx,edx
  40a159:	je     40a168 <flatcc_json_parser_space_ext@@Base+0x218>
  40a15b:	mov    edi,DWORD PTR [r12+0x14]
  40a160:	test   edi,edi
  40a162:	jne    40a265 <flatcc_json_parser_space_ext@@Base+0x315>
  40a168:	mov    esi,DWORD PTR [rsp+0x38]
  40a16c:	mov    ecx,0x8
  40a171:	test   esi,esi
  40a173:	jne    40a1d5 <flatcc_json_parser_space_ext@@Base+0x285>
  40a175:	mov    rax,QWORD PTR [rsp+0x40]
  40a17a:	cmp    rax,0xff
  40a180:	ja     40a1d0 <flatcc_json_parser_space_ext@@Base+0x280>
  40a182:	mov    BYTE PTR [rsp+0x1f],al
  40a186:	movzx  ecx,BYTE PTR [rsp+0x1f]
  40a18b:	mov    rax,QWORD PTR [rsp+0x20]
  40a190:	inc    DWORD PTR [rsp+0x18]
  40a194:	add    BYTE PTR [rax],cl
  40a196:	mov    ecx,DWORD PTR [rsp+0x3c]
  40a19a:	test   ecx,ecx
  40a19c:	jne    40a0a9 <flatcc_json_parser_space_ext@@Base+0x159>
  40a1a2:	jmp    40a0fb <flatcc_json_parser_space_ext@@Base+0x1ab>
  40a1a7:	nop    WORD PTR [rax+rax*1+0x0]
  40a1b0:	mov    ecx,0x17
  40a1b5:	mov    rdx,rbx
  40a1b8:	mov    rdi,r12
  40a1bb:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40a1c0:	mov    r10,rax
  40a1c3:	jmp    40a0fb <flatcc_json_parser_space_ext@@Base+0x1ab>
  40a1c8:	nop    DWORD PTR [rax+rax*1+0x0]
  40a1d0:	mov    ecx,0x7
  40a1d5:	mov    rsi,r10
  40a1d8:	mov    rdx,rbx
  40a1db:	mov    rdi,r12
  40a1de:	mov    QWORD PTR [rsp+0x28],r10
  40a1e3:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40a1e8:	mov    r10,QWORD PTR [rsp+0x28]
  40a1ed:	cmp    rbx,rax
  40a1f0:	jne    40a186 <flatcc_json_parser_space_ext@@Base+0x236>
  40a1f2:	mov    r10,rbx
  40a1f5:	jmp    40a0fb <flatcc_json_parser_space_ext@@Base+0x1ab>
  40a1fa:	mov    eax,DWORD PTR [rdi+0x14]
  40a1fd:	test   eax,eax
  40a1ff:	jne    40a0f8 <flatcc_json_parser_space_ext@@Base+0x1a8>
  40a205:	mov    r10,rbx
  40a208:	nop    DWORD PTR [rax+rax*1+0x0]
  40a210:	mov    rax,rbx
  40a213:	sub    rax,r10
  40a216:	cmp    rax,0x1
  40a21a:	jle    40a230 <flatcc_json_parser_space_ext@@Base+0x2e0>
  40a21c:	cmp    BYTE PTR [r10],0x20
  40a220:	jg     40a13f <flatcc_json_parser_space_ext@@Base+0x1ef>
  40a226:	jne    40a230 <flatcc_json_parser_space_ext@@Base+0x2e0>
  40a228:	cmp    BYTE PTR [r10+0x1],0x20
  40a22d:	jg     40a25d <flatcc_json_parser_space_ext@@Base+0x30d>
  40a22f:	nop
  40a230:	mov    rsi,r10
  40a233:	mov    rdx,rbx
  40a236:	mov    rdi,r12
  40a239:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40a23e:	mov    r10,rax
  40a241:	jmp    40a13f <flatcc_json_parser_space_ext@@Base+0x1ef>
  40a246:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a250:	lea    r10,[rsi+0x1]
  40a254:	mov    DWORD PTR [rdi+0x14],0x0
  40a25b:	jmp    40a210 <flatcc_json_parser_space_ext@@Base+0x2c0>
  40a25d:	inc    r10
  40a260:	jmp    40a13f <flatcc_json_parser_space_ext@@Base+0x1ef>
  40a265:	mov    rsi,r10
  40a268:	mov    ecx,0xe
  40a26d:	mov    rdx,rbx
  40a270:	mov    rdi,r12
  40a273:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40a278:	mov    r10,rax
  40a27b:	jmp    40a0fb <flatcc_json_parser_space_ext@@Base+0x1ab>
  40a280:	call   403130 <__stack_chk_fail@plt>
  40a285:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40a290:	push   r15
  40a292:	push   r14
  40a294:	push   r13
  40a296:	push   r12
  40a298:	mov    r12,rsi
  40a29b:	push   rbp
  40a29c:	mov    rbp,rdi
  40a29f:	push   rbx
  40a2a0:	mov    rbx,rdx
  40a2a3:	sub    rsp,0x38
  40a2a7:	mov    QWORD PTR [rsp],rcx
  40a2ab:	mov    DWORD PTR [rsp+0x8],r8d
  40a2b0:	mov    DWORD PTR [rsp+0x1c],r9d
  40a2b5:	mov    rdi,QWORD PTR [rdi]
  40a2b8:	mov    r15,QWORD PTR [rsp+0x70]
  40a2bd:	mov    rax,QWORD PTR fs:0x28
  40a2c6:	mov    QWORD PTR [rsp+0x28],rax
  40a2cb:	xor    eax,eax
  40a2cd:	mov    DWORD PTR [rsp+0x24],0x0
  40a2d5:	call   406520 <flatcc_builder_start_offset_vector@@Base>
  40a2da:	test   eax,eax
  40a2dc:	je     40a320 <flatcc_json_parser_space_ext@@Base+0x3d0>
  40a2de:	mov    ecx,0x21
  40a2e3:	mov    rdx,rbx
  40a2e6:	mov    rsi,r12
  40a2e9:	mov    rdi,rbp
  40a2ec:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40a2f1:	mov    r14,rax
  40a2f4:	mov    rcx,QWORD PTR [rsp+0x28]
  40a2f9:	xor    rcx,QWORD PTR fs:0x28
  40a302:	mov    rax,r14
  40a305:	jne    40a6a3 <flatcc_json_parser_space_ext@@Base+0x753>
  40a30b:	add    rsp,0x38
  40a30f:	pop    rbx
  40a310:	pop    rbp
  40a311:	pop    r12
  40a313:	pop    r13
  40a315:	pop    r14
  40a317:	pop    r15
  40a319:	ret    
  40a31a:	nop    WORD PTR [rax+rax*1+0x0]
  40a320:	cmp    r12,rbx
  40a323:	je     40a330 <flatcc_json_parser_space_ext@@Base+0x3e0>
  40a325:	cmp    BYTE PTR [r12],0x5b
  40a32a:	je     40a3d0 <flatcc_json_parser_space_ext@@Base+0x480>
  40a330:	mov    rsi,r12
  40a333:	mov    ecx,0x16
  40a338:	mov    rdx,rbx
  40a33b:	mov    rdi,rbp
  40a33e:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40a343:	mov    r14,rax
  40a346:	mov    eax,DWORD PTR [rsp+0x8]
  40a34a:	xor    r12d,r12d
  40a34d:	mov    QWORD PTR [rsp+0x8],rax
  40a352:	nop    WORD PTR [rax+rax*1+0x0]
  40a358:	cmp    r12,QWORD PTR [rsp+0x8]
  40a35d:	je     40a380 <flatcc_json_parser_space_ext@@Base+0x430>
  40a35f:	mov    rsi,r14
  40a362:	mov    ecx,0x1e
  40a367:	mov    rdx,rbx
  40a36a:	mov    rdi,rbp
  40a36d:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40a372:	mov    r14,rax
  40a375:	jmp    40a2f4 <flatcc_json_parser_space_ext@@Base+0x3a4>
  40a37a:	nop    WORD PTR [rax+rax*1+0x0]
  40a380:	mov    rsi,QWORD PTR [rsp]
  40a384:	mov    rdi,QWORD PTR [rbp+0x0]
  40a388:	mov    r12,r14
  40a38b:	call   405480 <flatcc_builder_get_user_frame_ptr@@Base>
  40a390:	mov    rdi,QWORD PTR [rbp+0x0]
  40a394:	mov    rsi,rax
  40a397:	call   4075c0 <flatcc_builder_end_offset_vector_for_unions@@Base>
  40a39c:	mov    DWORD PTR [rsp+0x24],eax
  40a3a0:	test   eax,eax
  40a3a2:	je     40a2de <flatcc_json_parser_space_ext@@Base+0x38e>
  40a3a8:	movzx  esi,WORD PTR [rsp+0x1c]
  40a3ad:	mov    rdi,QWORD PTR [rbp+0x0]
  40a3b1:	call   408110 <flatcc_builder_table_add_offset@@Base>
  40a3b6:	test   rax,rax
  40a3b9:	je     40a2de <flatcc_json_parser_space_ext@@Base+0x38e>
  40a3bf:	mov    edx,DWORD PTR [rsp+0x24]
  40a3c3:	mov    DWORD PTR [rax],edx
  40a3c5:	jmp    40a2f4 <flatcc_json_parser_space_ext@@Base+0x3a4>
  40a3ca:	nop    WORD PTR [rax+rax*1+0x0]
  40a3d0:	lea    r13,[r12+0x1]
  40a3d5:	mov    rax,rbx
  40a3d8:	sub    rax,r13
  40a3db:	cmp    rax,0x1
  40a3df:	jle    40a3ef <flatcc_json_parser_space_ext@@Base+0x49f>
  40a3e1:	cmp    BYTE PTR [r12+0x1],0x20
  40a3e7:	jg     40a400 <flatcc_json_parser_space_ext@@Base+0x4b0>
  40a3e9:	je     40a63b <flatcc_json_parser_space_ext@@Base+0x6eb>
  40a3ef:	mov    rsi,r13
  40a3f2:	mov    rdx,rbx
  40a3f5:	mov    rdi,rbp
  40a3f8:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40a3fd:	mov    r13,rax
  40a400:	mov    eax,DWORD PTR [rsp+0x8]
  40a404:	mov    QWORD PTR [rsp+0x8],rax
  40a409:	cmp    rbx,r13
  40a40c:	je     40a419 <flatcc_json_parser_space_ext@@Base+0x4c9>
  40a40e:	cmp    BYTE PTR [r13+0x0],0x5d
  40a413:	je     40a661 <flatcc_json_parser_space_ext@@Base+0x711>
  40a419:	cmp    QWORD PTR [rsp+0x8],0x0
  40a41f:	je     40a580 <flatcc_json_parser_space_ext@@Base+0x630>
  40a425:	lea    rax,[rsp+0x24]
  40a42a:	mov    QWORD PTR [rsp+0x10],rax
  40a42f:	xor    r12d,r12d
  40a432:	nop    WORD PTR [rax+rax*1+0x0]
  40a438:	mov    rsi,QWORD PTR [rsp]
  40a43c:	mov    rdi,QWORD PTR [rbp+0x0]
  40a440:	call   405480 <flatcc_builder_get_user_frame_ptr@@Base>
  40a445:	movzx  ecx,BYTE PTR [rax+r12*1]
  40a44a:	mov    r8,QWORD PTR [rsp+0x10]
  40a44f:	mov    rdx,rbx
  40a452:	mov    rsi,r13
  40a455:	mov    rdi,rbp
  40a458:	call   r15
  40a45b:	mov    r14,rax
  40a45e:	cmp    rbx,rax
  40a461:	je     40a2f4 <flatcc_json_parser_space_ext@@Base+0x3a4>
  40a467:	mov    rdi,QWORD PTR [rbp+0x0]
  40a46b:	mov    esi,0x1
  40a470:	call   405fd0 <flatcc_builder_extend_offset_vector@@Base>
  40a475:	test   rax,rax
  40a478:	je     40a5c8 <flatcc_json_parser_space_ext@@Base+0x678>
  40a47e:	mov    edx,DWORD PTR [rsp+0x24]
  40a482:	mov    DWORD PTR [rax],edx
  40a484:	mov    rax,rbx
  40a487:	sub    rax,r14
  40a48a:	cmp    rax,0x1
  40a48e:	jle    40a49e <flatcc_json_parser_space_ext@@Base+0x54e>
  40a490:	movzx  eax,BYTE PTR [r14]
  40a494:	cmp    al,0x20
  40a496:	jg     40a4b8 <flatcc_json_parser_space_ext@@Base+0x568>
  40a498:	je     40a520 <flatcc_json_parser_space_ext@@Base+0x5d0>
  40a49e:	mov    rsi,r14
  40a4a1:	mov    rdx,rbx
  40a4a4:	mov    rdi,rbp
  40a4a7:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40a4ac:	mov    r14,rax
  40a4af:	cmp    rbx,r14
  40a4b2:	je     40a518 <flatcc_json_parser_space_ext@@Base+0x5c8>
  40a4b4:	movzx  eax,BYTE PTR [r14]
  40a4b8:	cmp    al,0x2c
  40a4ba:	je     40a538 <flatcc_json_parser_space_ext@@Base+0x5e8>
  40a4bc:	inc    r12
  40a4bf:	cmp    al,0x5d
  40a4c1:	je     40a4e0 <flatcc_json_parser_space_ext@@Base+0x590>
  40a4c3:	mov    rsi,r14
  40a4c6:	mov    ecx,0x9
  40a4cb:	mov    rdx,rbx
  40a4ce:	mov    rdi,rbp
  40a4d1:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40a4d6:	mov    r14,rax
  40a4d9:	jmp    40a358 <flatcc_json_parser_space_ext@@Base+0x408>
  40a4de:	xchg   ax,ax
  40a4e0:	lea    rsi,[r14+0x1]
  40a4e4:	mov    rax,rbx
  40a4e7:	sub    rax,rsi
  40a4ea:	cmp    rax,0x1
  40a4ee:	jle    40a501 <flatcc_json_parser_space_ext@@Base+0x5b1>
  40a4f0:	cmp    BYTE PTR [r14+0x1],0x20
  40a4f5:	jg     40a5a0 <flatcc_json_parser_space_ext@@Base+0x650>
  40a4fb:	je     40a5b0 <flatcc_json_parser_space_ext@@Base+0x660>
  40a501:	mov    rdx,rbx
  40a504:	mov    rdi,rbp
  40a507:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40a50c:	mov    r14,rax
  40a50f:	jmp    40a358 <flatcc_json_parser_space_ext@@Base+0x408>
  40a514:	nop    DWORD PTR [rax+0x0]
  40a518:	inc    r12
  40a51b:	jmp    40a358 <flatcc_json_parser_space_ext@@Base+0x408>
  40a520:	cmp    BYTE PTR [r14+0x1],0x20
  40a525:	jle    40a49e <flatcc_json_parser_space_ext@@Base+0x54e>
  40a52b:	inc    r14
  40a52e:	jmp    40a4af <flatcc_json_parser_space_ext@@Base+0x55f>
  40a533:	nop    DWORD PTR [rax+rax*1+0x0]
  40a538:	lea    r13,[r14+0x1]
  40a53c:	mov    rax,rbx
  40a53f:	sub    rax,r13
  40a542:	cmp    rax,0x1
  40a546:	jle    40a551 <flatcc_json_parser_space_ext@@Base+0x601>
  40a548:	cmp    BYTE PTR [r14+0x1],0x20
  40a54d:	jg     40a562 <flatcc_json_parser_space_ext@@Base+0x612>
  40a54f:	je     40a5d0 <flatcc_json_parser_space_ext@@Base+0x680>
  40a551:	mov    rsi,r13
  40a554:	mov    rdx,rbx
  40a557:	mov    rdi,rbp
  40a55a:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40a55f:	mov    r13,rax
  40a562:	inc    r12
  40a565:	cmp    rbx,r13
  40a568:	je     40a620 <flatcc_json_parser_space_ext@@Base+0x6d0>
  40a56e:	cmp    BYTE PTR [r13+0x0],0x5d
  40a573:	je     40a5e8 <flatcc_json_parser_space_ext@@Base+0x698>
  40a575:	cmp    QWORD PTR [rsp+0x8],r12
  40a57a:	jne    40a438 <flatcc_json_parser_space_ext@@Base+0x4e8>
  40a580:	mov    ecx,0x1e
  40a585:	mov    rdx,rbx
  40a588:	mov    rsi,r13
  40a58b:	mov    rdi,rbp
  40a58e:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40a593:	mov    r14,rax
  40a596:	jmp    40a2f4 <flatcc_json_parser_space_ext@@Base+0x3a4>
  40a59b:	nop    DWORD PTR [rax+rax*1+0x0]
  40a5a0:	mov    r14,rsi
  40a5a3:	jmp    40a358 <flatcc_json_parser_space_ext@@Base+0x408>
  40a5a8:	nop    DWORD PTR [rax+rax*1+0x0]
  40a5b0:	cmp    BYTE PTR [r14+0x2],0x20
  40a5b5:	jle    40a501 <flatcc_json_parser_space_ext@@Base+0x5b1>
  40a5bb:	add    r14,0x2
  40a5bf:	jmp    40a358 <flatcc_json_parser_space_ext@@Base+0x408>
  40a5c4:	nop    DWORD PTR [rax+0x0]
  40a5c8:	mov    r12,r14
  40a5cb:	jmp    40a2de <flatcc_json_parser_space_ext@@Base+0x38e>
  40a5d0:	cmp    BYTE PTR [r14+0x2],0x20
  40a5d5:	jle    40a551 <flatcc_json_parser_space_ext@@Base+0x601>
  40a5db:	lea    r13,[r14+0x2]
  40a5df:	jmp    40a562 <flatcc_json_parser_space_ext@@Base+0x612>
  40a5e1:	nop    DWORD PTR [rax+0x0]
  40a5e8:	lea    r14,[r13+0x1]
  40a5ec:	mov    rax,rbx
  40a5ef:	sub    rax,r14
  40a5f2:	cmp    rax,0x1
  40a5f6:	jle    40a605 <flatcc_json_parser_space_ext@@Base+0x6b5>
  40a5f8:	cmp    BYTE PTR [r13+0x1],0x20
  40a5fd:	jg     40a358 <flatcc_json_parser_space_ext@@Base+0x408>
  40a603:	je     40a651 <flatcc_json_parser_space_ext@@Base+0x701>
  40a605:	mov    rsi,r14
  40a608:	mov    rdx,rbx
  40a60b:	mov    rdi,rbp
  40a60e:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40a613:	mov    r14,rax
  40a616:	jmp    40a358 <flatcc_json_parser_space_ext@@Base+0x408>
  40a61b:	nop    DWORD PTR [rax+rax*1+0x0]
  40a620:	mov    ecx,0x9
  40a625:	mov    rdx,rbx
  40a628:	mov    rsi,rbx
  40a62b:	mov    rdi,rbp
  40a62e:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40a633:	mov    r14,rax
  40a636:	jmp    40a358 <flatcc_json_parser_space_ext@@Base+0x408>
  40a63b:	cmp    BYTE PTR [r12+0x2],0x20
  40a641:	jle    40a3ef <flatcc_json_parser_space_ext@@Base+0x49f>
  40a647:	lea    r13,[r12+0x2]
  40a64c:	jmp    40a400 <flatcc_json_parser_space_ext@@Base+0x4b0>
  40a651:	cmp    BYTE PTR [r13+0x2],0x20
  40a656:	jle    40a605 <flatcc_json_parser_space_ext@@Base+0x6b5>
  40a658:	lea    r14,[r13+0x2]
  40a65c:	jmp    40a358 <flatcc_json_parser_space_ext@@Base+0x408>
  40a661:	lea    r14,[r13+0x1]
  40a665:	mov    rax,rbx
  40a668:	sub    rax,r14
  40a66b:	cmp    rax,0x1
  40a66f:	jle    40a681 <flatcc_json_parser_space_ext@@Base+0x731>
  40a671:	xor    r12d,r12d
  40a674:	cmp    BYTE PTR [r13+0x1],0x20
  40a679:	jg     40a358 <flatcc_json_parser_space_ext@@Base+0x408>
  40a67f:	je     40a69a <flatcc_json_parser_space_ext@@Base+0x74a>
  40a681:	mov    rsi,r14
  40a684:	mov    rdx,rbx
  40a687:	mov    rdi,rbp
  40a68a:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40a68f:	mov    r14,rax
  40a692:	xor    r12d,r12d
  40a695:	jmp    40a358 <flatcc_json_parser_space_ext@@Base+0x408>
  40a69a:	cmp    BYTE PTR [r13+0x2],0x20
  40a69f:	jle    40a681 <flatcc_json_parser_space_ext@@Base+0x731>
  40a6a1:	jmp    40a658 <flatcc_json_parser_space_ext@@Base+0x708>
  40a6a3:	call   403130 <__stack_chk_fail@plt>
  40a6a8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040a6b0 <flatcc_json_parser_string_escape@@Base>:
  40a6b0:	endbr64 
  40a6b4:	mov    r8,rdx
  40a6b7:	sub    r8,rsi
  40a6ba:	cmp    r8,0x1
  40a6be:	jle    40a6e8 <flatcc_json_parser_string_escape@@Base+0x38>
  40a6c0:	cmp    BYTE PTR [rsi],0x5c
  40a6c3:	jne    40a6e8 <flatcc_json_parser_string_escape@@Base+0x38>
  40a6c5:	movzx  eax,BYTE PTR [rsi+0x1]
  40a6c9:	sub    eax,0x22
  40a6cc:	cmp    al,0x56
  40a6ce:	ja     40a6e8 <flatcc_json_parser_string_escape@@Base+0x38>
  40a6d0:	lea    r9,[rip+0x3f49]        # 40e620 <flatcc_builder_padding_base@@Base+0x7e0>
  40a6d7:	movzx  eax,al
  40a6da:	movsxd rax,DWORD PTR [r9+rax*4]
  40a6de:	add    rax,r9
  40a6e1:	notrack jmp rax
  40a6e4:	nop    DWORD PTR [rax+0x0]
  40a6e8:	mov    BYTE PTR [rcx],0x0
  40a6eb:	mov    ecx,0x12
  40a6f0:	jmp    409ed0 <flatcc_json_parser_set_error@@Base>
  40a6f5:	nop    DWORD PTR [rax]
  40a6f8:	mov    BYTE PTR [rcx],0x1
  40a6fb:	cmp    r8,0x3
  40a6ff:	jle    40a6e8 <flatcc_json_parser_string_escape@@Base+0x38>
  40a701:	movzx  eax,BYTE PTR [rsi+0x2]
  40a705:	lea    r8d,[rax-0x30]
  40a709:	cmp    r8b,0x9
  40a70d:	ja     40a850 <flatcc_json_parser_string_escape@@Base+0x1a0>
  40a713:	shl    eax,0x4
  40a716:	movzx  r8d,BYTE PTR [rsi+0x3]
  40a71b:	lea    r9d,[r8-0x30]
  40a71f:	cmp    r9b,0x9
  40a723:	ja     40a8b8 <flatcc_json_parser_string_escape@@Base+0x208>
  40a729:	or     eax,r9d
  40a72c:	mov    BYTE PTR [rcx+0x1],al
  40a72f:	lea    rax,[rsi+0x4]
  40a733:	ret    
  40a734:	nop    DWORD PTR [rax+0x0]
  40a738:	mov    edi,0x2201
  40a73d:	mov    WORD PTR [rcx],di
  40a740:	lea    rax,[rsi+0x2]
  40a744:	ret    
  40a745:	nop    DWORD PTR [rax]
  40a748:	mov    eax,0x2f01
  40a74d:	mov    WORD PTR [rcx],ax
  40a750:	lea    rax,[rsi+0x2]
  40a754:	ret    
  40a755:	nop    DWORD PTR [rax]
  40a758:	mov    edx,0x5c01
  40a75d:	mov    WORD PTR [rcx],dx
  40a760:	lea    rax,[rsi+0x2]
  40a764:	ret    
  40a765:	nop    DWORD PTR [rax]
  40a768:	mov    r9d,0x801
  40a76e:	mov    WORD PTR [rcx],r9w
  40a772:	lea    rax,[rsi+0x2]
  40a776:	ret    
  40a777:	nop    WORD PTR [rax+rax*1+0x0]
  40a780:	mov    r8d,0xc01
  40a786:	mov    WORD PTR [rcx],r8w
  40a78a:	lea    rax,[rsi+0x2]
  40a78e:	ret    
  40a78f:	nop
  40a790:	mov    r11d,0xa01
  40a796:	mov    WORD PTR [rcx],r11w
  40a79a:	lea    rax,[rsi+0x2]
  40a79e:	ret    
  40a79f:	nop
  40a7a0:	mov    r10d,0xd01
  40a7a6:	mov    WORD PTR [rcx],r10w
  40a7aa:	lea    rax,[rsi+0x2]
  40a7ae:	ret    
  40a7af:	nop
  40a7b0:	mov    eax,0x901
  40a7b5:	mov    WORD PTR [rcx],ax
  40a7b8:	lea    rax,[rsi+0x2]
  40a7bc:	ret    
  40a7bd:	nop    DWORD PTR [rax]
  40a7c0:	cmp    r8,0x5
  40a7c4:	jle    40a6e8 <flatcc_json_parser_string_escape@@Base+0x38>
  40a7ca:	movzx  eax,BYTE PTR [rsi+0x2]
  40a7ce:	lea    r8d,[rax-0x30]
  40a7d2:	cmp    r8b,0x9
  40a7d6:	ja     40a870 <flatcc_json_parser_string_escape@@Base+0x1c0>
  40a7dc:	shl    eax,0xc
  40a7df:	movzx  r8d,BYTE PTR [rsi+0x3]
  40a7e4:	lea    r9d,[r8-0x30]
  40a7e8:	cmp    r9b,0x9
  40a7ec:	ja     40a890 <flatcc_json_parser_string_escape@@Base+0x1e0>
  40a7f2:	shl    r8d,0x8
  40a7f6:	sub    r8w,0x3000
  40a7fc:	or     eax,r8d
  40a7ff:	movsx  r8w,BYTE PTR [rsi+0x4]
  40a805:	lea    r9d,[r8-0x30]
  40a809:	cmp    r9b,0x9
  40a80d:	ja     40a8e0 <flatcc_json_parser_string_escape@@Base+0x230>
  40a813:	sub    r8d,0x30
  40a817:	shl    r8d,0x4
  40a81b:	or     eax,r8d
  40a81e:	movzx  r8d,BYTE PTR [rsi+0x5]
  40a823:	lea    r9d,[r8-0x30]
  40a827:	cmp    r9b,0x9
  40a82b:	ja     40a910 <flatcc_json_parser_string_escape@@Base+0x260>
  40a831:	movsx  dx,r8b
  40a836:	sub    edx,0x30
  40a839:	or     eax,edx
  40a83b:	cmp    ax,0x7f
  40a83f:	ja     40a938 <flatcc_json_parser_string_escape@@Base+0x288>
  40a845:	mov    BYTE PTR [rcx],0x1
  40a848:	mov    BYTE PTR [rcx+0x1],al
  40a84b:	lea    rax,[rsi+0x6]
  40a84f:	ret    
  40a850:	or     eax,0x20
  40a853:	lea    r8d,[rax-0x61]
  40a857:	cmp    r8b,0x5
  40a85b:	ja     40a6e8 <flatcc_json_parser_string_escape@@Base+0x38>
  40a861:	shl    eax,0x4
  40a864:	sub    eax,0x70
  40a867:	jmp    40a716 <flatcc_json_parser_string_escape@@Base+0x66>
  40a86c:	nop    DWORD PTR [rax+0x0]
  40a870:	or     eax,0x20
  40a873:	lea    r8d,[rax-0x61]
  40a877:	cmp    r8b,0x5
  40a87b:	ja     40a6e8 <flatcc_json_parser_string_escape@@Base+0x38>
  40a881:	shl    eax,0xc
  40a884:	sub    ax,0x7000
  40a888:	jmp    40a7df <flatcc_json_parser_string_escape@@Base+0x12f>
  40a88d:	nop    DWORD PTR [rax]
  40a890:	or     r8d,0x20
  40a894:	lea    r9d,[r8-0x61]
  40a898:	cmp    r9b,0x5
  40a89c:	ja     40a6e8 <flatcc_json_parser_string_escape@@Base+0x38>
  40a8a2:	shl    r8d,0x8
  40a8a6:	sub    r8w,0x5700
  40a8ac:	or     eax,r8d
  40a8af:	jmp    40a7ff <flatcc_json_parser_string_escape@@Base+0x14f>
  40a8b4:	nop    DWORD PTR [rax+0x0]
  40a8b8:	or     r8d,0x20
  40a8bc:	lea    r9d,[r8-0x61]
  40a8c0:	cmp    r9b,0x5
  40a8c4:	ja     40a6e8 <flatcc_json_parser_string_escape@@Base+0x38>
  40a8ca:	sub    r8d,0x57
  40a8ce:	or     eax,r8d
  40a8d1:	jmp    40a72c <flatcc_json_parser_string_escape@@Base+0x7c>
  40a8d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a8e0:	or     r8d,0x20
  40a8e4:	lea    r9d,[r8-0x61]
  40a8e8:	cmp    r9b,0x5
  40a8ec:	ja     40a6e8 <flatcc_json_parser_string_escape@@Base+0x38>
  40a8f2:	movsx  r8w,r8b
  40a8f7:	sub    r8d,0x57
  40a8fb:	shl    r8d,0x4
  40a8ff:	or     eax,r8d
  40a902:	jmp    40a81e <flatcc_json_parser_string_escape@@Base+0x16e>
  40a907:	nop    WORD PTR [rax+rax*1+0x0]
  40a910:	or     r8d,0x20
  40a914:	lea    r9d,[r8-0x61]
  40a918:	cmp    r9b,0x5
  40a91c:	ja     40a6e8 <flatcc_json_parser_string_escape@@Base+0x38>
  40a922:	movsx  r8w,r8b
  40a927:	lea    edx,[r8-0x57]
  40a92b:	or     eax,edx
  40a92d:	jmp    40a83b <flatcc_json_parser_string_escape@@Base+0x18b>
  40a932:	nop    WORD PTR [rax+rax*1+0x0]
  40a938:	mov    edi,eax
  40a93a:	mov    edx,eax
  40a93c:	and    edi,0x3f
  40a93f:	shr    dx,0x6
  40a943:	or     edi,0xffffff80
  40a946:	cmp    ax,0x7ff
  40a94a:	ja     40a95e <flatcc_json_parser_string_escape@@Base+0x2ae>
  40a94c:	or     edx,0xffffffc0
  40a94f:	mov    BYTE PTR [rcx],0x2
  40a952:	mov    BYTE PTR [rcx+0x1],dl
  40a955:	mov    BYTE PTR [rcx+0x2],dil
  40a959:	jmp    40a84b <flatcc_json_parser_string_escape@@Base+0x19b>
  40a95e:	shr    ax,0xc
  40a962:	and    edx,0x3f
  40a965:	or     eax,0xffffffe0
  40a968:	or     edx,0xffffff80
  40a96b:	mov    BYTE PTR [rcx],0x3
  40a96e:	mov    BYTE PTR [rcx+0x1],al
  40a971:	mov    BYTE PTR [rcx+0x2],dl
  40a974:	mov    BYTE PTR [rcx+0x3],dil
  40a978:	jmp    40a84b <flatcc_json_parser_string_escape@@Base+0x19b>
  40a97d:	nop    DWORD PTR [rax]

000000000040a980 <flatcc_json_parser_skip_constant@@Base>:
  40a980:	endbr64 
  40a984:	push   r13
  40a986:	push   r12
  40a988:	push   rbp
  40a989:	push   rbx
  40a98a:	mov    rbx,rsi
  40a98d:	sub    rsp,0x8
  40a991:	cmp    rsi,rdx
  40a994:	je     40aa07 <flatcc_json_parser_skip_constant@@Base+0x87>
  40a996:	mov    rbp,rdi
  40a999:	mov    r12,rdx
  40a99c:	movabs r13,0x2000000000ffd
  40a9a6:	jmp    40a9be <flatcc_json_parser_skip_constant@@Base+0x3e>
  40a9a8:	nop    DWORD PTR [rax+rax*1+0x0]
  40a9b0:	bt     r13,rdx
  40a9b4:	jae    40a9cd <flatcc_json_parser_skip_constant@@Base+0x4d>
  40a9b6:	inc    rbx
  40a9b9:	cmp    r12,rbx
  40a9bc:	je     40aa07 <flatcc_json_parser_skip_constant@@Base+0x87>
  40a9be:	movzx  eax,BYTE PTR [rbx]
  40a9c1:	test   al,al
  40a9c3:	js     40a9b6 <flatcc_json_parser_skip_constant@@Base+0x36>
  40a9c5:	lea    edx,[rax-0x2e]
  40a9c8:	cmp    dl,0x31
  40a9cb:	jbe    40a9b0 <flatcc_json_parser_skip_constant@@Base+0x30>
  40a9cd:	mov    edx,eax
  40a9cf:	or     edx,0x20
  40a9d2:	sub    edx,0x61
  40a9d5:	cmp    dl,0x19
  40a9d8:	jbe    40a9b6 <flatcc_json_parser_skip_constant@@Base+0x36>
  40a9da:	mov    rdx,r12
  40a9dd:	sub    rdx,rbx
  40a9e0:	cmp    rdx,0x1
  40a9e4:	jle    40a9ec <flatcc_json_parser_skip_constant@@Base+0x6c>
  40a9e6:	cmp    al,0x20
  40a9e8:	jg     40aa07 <flatcc_json_parser_skip_constant@@Base+0x87>
  40a9ea:	je     40aa18 <flatcc_json_parser_skip_constant@@Base+0x98>
  40a9ec:	mov    rdx,r12
  40a9ef:	mov    rsi,rbx
  40a9f2:	mov    rdi,rbp
  40a9f5:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40a9fa:	cmp    rax,rbx
  40a9fd:	je     40aa07 <flatcc_json_parser_skip_constant@@Base+0x87>
  40a9ff:	mov    rbx,rax
  40aa02:	cmp    r12,rbx
  40aa05:	jne    40a9be <flatcc_json_parser_skip_constant@@Base+0x3e>
  40aa07:	add    rsp,0x8
  40aa0b:	mov    rax,rbx
  40aa0e:	pop    rbx
  40aa0f:	pop    rbp
  40aa10:	pop    r12
  40aa12:	pop    r13
  40aa14:	ret    
  40aa15:	nop    DWORD PTR [rax]
  40aa18:	cmp    BYTE PTR [rbx+0x1],0x20
  40aa1c:	lea    rax,[rbx+0x1]
  40aa20:	jle    40a9ec <flatcc_json_parser_skip_constant@@Base+0x6c>
  40aa22:	jmp    40a9fa <flatcc_json_parser_skip_constant@@Base+0x7a>
  40aa24:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40aa2f:	nop

000000000040aa30 <flatcc_json_parser_match_constant@@Base>:
  40aa30:	endbr64 
  40aa34:	mov    rax,rdx
  40aa37:	sub    rax,rsi
  40aa3a:	movsxd rcx,ecx
  40aa3d:	cmp    rax,rcx
  40aa40:	jle    40ab20 <flatcc_json_parser_match_constant@@Base+0xf0>
  40aa46:	push   r13
  40aa48:	mov    r13,r8
  40aa4b:	push   r12
  40aa4d:	mov    r12,rsi
  40aa50:	push   rbp
  40aa51:	mov    rbp,rdx
  40aa54:	push   rbx
  40aa55:	lea    rbx,[rsi+rcx*1]
  40aa59:	sub    rsp,0x8
  40aa5d:	mov    eax,DWORD PTR [rdi+0x14]
  40aa60:	test   eax,eax
  40aa62:	jne    40aa98 <flatcc_json_parser_match_constant@@Base+0x68>
  40aa64:	movzx  eax,BYTE PTR [rbx]
  40aa67:	cmp    al,0x20
  40aa69:	je     40ab90 <flatcc_json_parser_match_constant@@Base+0x160>
  40aa6f:	cmp    al,0x22
  40aa71:	je     40abe8 <flatcc_json_parser_match_constant@@Base+0x1b8>
  40aa77:	mov    DWORD PTR [r8],0x0
  40aa7e:	cmp    al,0x5c
  40aa80:	je     40ab30 <flatcc_json_parser_match_constant@@Base+0x100>
  40aa86:	add    rsp,0x8
  40aa8a:	pop    rbx
  40aa8b:	pop    rbp
  40aa8c:	pop    r12
  40aa8e:	mov    rax,rsi
  40aa91:	pop    r13
  40aa93:	ret    
  40aa94:	nop    DWORD PTR [rax+0x0]
  40aa98:	mov    rax,rdx
  40aa9b:	sub    rax,rbx
  40aa9e:	cmp    rax,0x1
  40aaa2:	jle    40aab3 <flatcc_json_parser_match_constant@@Base+0x83>
  40aaa4:	cmp    BYTE PTR [rbx],0x20
  40aaa7:	jg     40abf0 <flatcc_json_parser_match_constant@@Base+0x1c0>
  40aaad:	je     40ac08 <flatcc_json_parser_match_constant@@Base+0x1d8>
  40aab3:	mov    rdx,rbp
  40aab6:	mov    rsi,rbx
  40aab9:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40aabe:	cmp    rbp,rax
  40aac1:	je     40ab75 <flatcc_json_parser_match_constant@@Base+0x145>
  40aac7:	cmp    rbx,rax
  40aaca:	je     40aaef <flatcc_json_parser_match_constant@@Base+0xbf>
  40aacc:	movzx  edx,BYTE PTR [rax]
  40aacf:	cmp    dl,0x5f
  40aad2:	je     40abc0 <flatcc_json_parser_match_constant@@Base+0x190>
  40aad8:	test   dl,dl
  40aada:	js     40abc0 <flatcc_json_parser_match_constant@@Base+0x190>
  40aae0:	or     edx,0x20
  40aae3:	sub    edx,0x61
  40aae6:	cmp    dl,0x19
  40aae9:	jbe    40abc0 <flatcc_json_parser_match_constant@@Base+0x190>
  40aaef:	mov    DWORD PTR [r13+0x0],0x0
  40aaf7:	movzx  edx,BYTE PTR [rax]
  40aafa:	mov    ecx,edx
  40aafc:	and    ecx,0xffffffdf
  40aaff:	cmp    cl,0x5d
  40ab02:	je     40ab0b <flatcc_json_parser_match_constant@@Base+0xdb>
  40ab04:	cmp    dl,0x2c
  40ab07:	cmovne rax,r12
  40ab0b:	add    rsp,0x8
  40ab0f:	pop    rbx
  40ab10:	pop    rbp
  40ab11:	pop    r12
  40ab13:	pop    r13
  40ab15:	ret    
  40ab16:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ab20:	mov    DWORD PTR [r8],0x0
  40ab27:	mov    rax,rsi
  40ab2a:	ret    
  40ab2b:	nop    DWORD PTR [rax+rax*1+0x0]
  40ab30:	add    rsp,0x8
  40ab34:	mov    rsi,rbx
  40ab37:	pop    rbx
  40ab38:	pop    rbp
  40ab39:	pop    r12
  40ab3b:	mov    ecx,0x12
  40ab40:	pop    r13
  40ab42:	jmp    409ed0 <flatcc_json_parser_set_error@@Base>
  40ab47:	nop    WORD PTR [rax+rax*1+0x0]
  40ab50:	cmp    dl,0x22
  40ab53:	jne    40abc0 <flatcc_json_parser_match_constant@@Base+0x190>
  40ab55:	lea    rsi,[rax+0x1]
  40ab59:	cmp    rsi,0xffffffffffffffff
  40ab5d:	jge    40abd8 <flatcc_json_parser_match_constant@@Base+0x1a8>
  40ab5f:	cmp    BYTE PTR [rax+0x1],0x20
  40ab63:	jg     40ac20 <flatcc_json_parser_match_constant@@Base+0x1f0>
  40ab69:	jne    40abd8 <flatcc_json_parser_match_constant@@Base+0x1a8>
  40ab6b:	cmp    BYTE PTR [rax+0x2],0x20
  40ab6f:	jle    40abd8 <flatcc_json_parser_match_constant@@Base+0x1a8>
  40ab71:	add    rax,0x2
  40ab75:	mov    DWORD PTR [r13+0x0],0x0
  40ab7d:	add    rsp,0x8
  40ab81:	pop    rbx
  40ab82:	pop    rbp
  40ab83:	pop    r12
  40ab85:	pop    r13
  40ab87:	ret    
  40ab88:	nop    DWORD PTR [rax+rax*1+0x0]
  40ab90:	lea    rax,[rbx+0x1]
  40ab94:	cmp    rdx,rax
  40ab97:	je     40ab75 <flatcc_json_parser_match_constant@@Base+0x145>
  40ab99:	movzx  edx,BYTE PTR [rbx+0x1]
  40ab9d:	cmp    dl,0x20
  40aba0:	je     40abb0 <flatcc_json_parser_match_constant@@Base+0x180>
  40aba2:	jmp    40ab50 <flatcc_json_parser_match_constant@@Base+0x120>
  40aba4:	nop    DWORD PTR [rax+0x0]
  40aba8:	movzx  edx,BYTE PTR [rax]
  40abab:	cmp    dl,0x20
  40abae:	jne    40ab50 <flatcc_json_parser_match_constant@@Base+0x120>
  40abb0:	inc    rax
  40abb3:	cmp    rbp,rax
  40abb6:	jne    40aba8 <flatcc_json_parser_match_constant@@Base+0x178>
  40abb8:	jmp    40ab75 <flatcc_json_parser_match_constant@@Base+0x145>
  40abba:	nop    WORD PTR [rax+rax*1+0x0]
  40abc0:	mov    DWORD PTR [r13+0x0],0x1
  40abc8:	add    rsp,0x8
  40abcc:	pop    rbx
  40abcd:	pop    rbp
  40abce:	pop    r12
  40abd0:	pop    r13
  40abd2:	ret    
  40abd3:	nop    DWORD PTR [rax+rax*1+0x0]
  40abd8:	xor    edx,edx
  40abda:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40abdf:	jmp    40ab75 <flatcc_json_parser_match_constant@@Base+0x145>
  40abe1:	nop    DWORD PTR [rax+0x0]
  40abe8:	mov    rax,rbx
  40abeb:	jmp    40ab55 <flatcc_json_parser_match_constant@@Base+0x125>
  40abf0:	mov    rax,rbx
  40abf3:	cmp    rbx,rdx
  40abf6:	jne    40aaef <flatcc_json_parser_match_constant@@Base+0xbf>
  40abfc:	jmp    40ab75 <flatcc_json_parser_match_constant@@Base+0x145>
  40ac01:	nop    DWORD PTR [rax+0x0]
  40ac08:	cmp    BYTE PTR [rbx+0x1],0x20
  40ac0c:	lea    rax,[rbx+0x1]
  40ac10:	jle    40aab3 <flatcc_json_parser_match_constant@@Base+0x83>
  40ac16:	jmp    40aabe <flatcc_json_parser_match_constant@@Base+0x8e>
  40ac1b:	nop    DWORD PTR [rax+rax*1+0x0]
  40ac20:	mov    rax,rsi
  40ac23:	jmp    40ab75 <flatcc_json_parser_match_constant@@Base+0x145>
  40ac28:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040ac30 <flatcc_json_parser_double@@Base>:
  40ac30:	endbr64 
  40ac34:	mov    QWORD PTR [rcx],0x0
  40ac3b:	cmp    rsi,rdx
  40ac3e:	je     40ad08 <flatcc_json_parser_double@@Base+0xd8>
  40ac44:	xor    eax,eax
  40ac46:	cmp    BYTE PTR [rsi],0x2d
  40ac49:	sete   al
  40ac4c:	add    rax,rsi
  40ac4f:	mov    r8,rdx
  40ac52:	sub    r8,rax
  40ac55:	cmp    r8,0x1
  40ac59:	jle    40ac73 <flatcc_json_parser_double@@Base+0x43>
  40ac5b:	movzx  r8d,BYTE PTR [rax]
  40ac5f:	cmp    r8b,0x2e
  40ac63:	je     40acfa <flatcc_json_parser_double@@Base+0xca>
  40ac69:	cmp    r8b,0x30
  40ac6d:	je     40acf0 <flatcc_json_parser_double@@Base+0xc0>
  40ac73:	push   r13
  40ac75:	mov    r13,rdi
  40ac78:	push   r12
  40ac7a:	mov    r12,rcx
  40ac7d:	push   rbp
  40ac7e:	mov    rbp,rdx
  40ac81:	push   rbx
  40ac82:	mov    rbx,rsi
  40ac85:	mov    rsi,rdx
  40ac88:	sub    rsp,0x8
  40ac8c:	sub    rsi,rbx
  40ac8f:	mov    rdx,rcx
  40ac92:	mov    rdi,rbx
  40ac95:	call   409480 <grisu3_diy_fp_encode_double@@Base+0x3d0>
  40ac9a:	test   rax,rax
  40ac9d:	je     40acb0 <flatcc_json_parser_double@@Base+0x80>
  40ac9f:	cmp    rbx,rax
  40aca2:	je     40acb0 <flatcc_json_parser_double@@Base+0x80>
  40aca4:	add    rsp,0x8
  40aca8:	pop    rbx
  40aca9:	pop    rbp
  40acaa:	pop    r12
  40acac:	pop    r13
  40acae:	ret    
  40acaf:	nop
  40acb0:	vmovsd xmm0,QWORD PTR [r12]
  40acb6:	mov    ecx,0x7
  40acbb:	vandpd xmm0,xmm0,XMMWORD PTR [rip+0x43cd]        # 40f090 <flatcc_builder_padding_base@@Base+0x1250>
  40acc3:	vucomisd xmm0,QWORD PTR [rip+0x43a5]        # 40f070 <flatcc_builder_padding_base@@Base+0x1230>
  40accb:	ja     40acd2 <flatcc_json_parser_double@@Base+0xa2>
  40accd:	mov    ecx,0x6
  40acd2:	add    rsp,0x8
  40acd6:	mov    rsi,rbx
  40acd9:	pop    rbx
  40acda:	mov    rdx,rbp
  40acdd:	pop    rbp
  40acde:	pop    r12
  40ace0:	mov    rdi,r13
  40ace3:	pop    r13
  40ace5:	jmp    409ed0 <flatcc_json_parser_set_error@@Base>
  40acea:	nop    WORD PTR [rax+rax*1+0x0]
  40acf0:	cmp    BYTE PTR [rax+0x1],0x30
  40acf4:	jne    40ac73 <flatcc_json_parser_double@@Base+0x43>
  40acfa:	mov    ecx,0x6
  40acff:	jmp    409ed0 <flatcc_json_parser_set_error@@Base>
  40ad04:	nop    DWORD PTR [rax+0x0]
  40ad08:	mov    rax,rsi
  40ad0b:	ret    
  40ad0c:	nop    DWORD PTR [rax+0x0]

000000000040ad10 <flatcc_json_parser_float@@Base>:
  40ad10:	endbr64 
  40ad14:	push   r13
  40ad16:	push   r12
  40ad18:	push   rbp
  40ad19:	push   rbx
  40ad1a:	mov    rbx,rsi
  40ad1d:	sub    rsp,0x18
  40ad21:	mov    rax,QWORD PTR fs:0x28
  40ad2a:	mov    QWORD PTR [rsp+0x8],rax
  40ad2f:	xor    eax,eax
  40ad31:	mov    DWORD PTR [rcx],0x0
  40ad37:	cmp    rsi,rdx
  40ad3a:	je     40ae38 <flatcc_json_parser_float@@Base+0x128>
  40ad40:	xor    eax,eax
  40ad42:	cmp    BYTE PTR [rsi],0x2d
  40ad45:	sete   al
  40ad48:	add    rax,rsi
  40ad4b:	mov    rbp,rdx
  40ad4e:	sub    rdx,rax
  40ad51:	mov    r12,rdi
  40ad54:	mov    r13,rcx
  40ad57:	cmp    rdx,0x1
  40ad5b:	jle    40ad72 <flatcc_json_parser_float@@Base+0x62>
  40ad5d:	movzx  edx,BYTE PTR [rax]
  40ad60:	cmp    dl,0x2e
  40ad63:	je     40ae10 <flatcc_json_parser_float@@Base+0x100>
  40ad69:	cmp    dl,0x30
  40ad6c:	je     40ae00 <flatcc_json_parser_float@@Base+0xf0>
  40ad72:	mov    rsi,rbp
  40ad75:	sub    rsi,rbx
  40ad78:	mov    rdx,rsp
  40ad7b:	mov    rdi,rbx
  40ad7e:	call   409480 <grisu3_diy_fp_encode_double@@Base+0x3d0>
  40ad83:	vmovsd xmm1,QWORD PTR [rsp]
  40ad88:	vxorps xmm0,xmm0,xmm0
  40ad8c:	vcvtsd2ss xmm0,xmm0,xmm1
  40ad90:	vmovss DWORD PTR [r13+0x0],xmm0
  40ad96:	vandps xmm0,xmm0,XMMWORD PTR [rip+0x4302]        # 40f0a0 <flatcc_builder_padding_base@@Base+0x1260>
  40ad9e:	vucomiss xmm0,DWORD PTR [rip+0x4312]        # 40f0b8 <flatcc_builder_padding_base@@Base+0x1278>
  40ada6:	ja     40add0 <flatcc_json_parser_float@@Base+0xc0>
  40ada8:	test   rax,rax
  40adab:	je     40ae10 <flatcc_json_parser_float@@Base+0x100>
  40adad:	cmp    rbx,rax
  40adb0:	je     40ae10 <flatcc_json_parser_float@@Base+0x100>
  40adb2:	mov    rcx,QWORD PTR [rsp+0x8]
  40adb7:	xor    rcx,QWORD PTR fs:0x28
  40adc0:	jne    40ae40 <flatcc_json_parser_float@@Base+0x130>
  40adc2:	add    rsp,0x18
  40adc6:	pop    rbx
  40adc7:	pop    rbp
  40adc8:	pop    r12
  40adca:	pop    r13
  40adcc:	ret    
  40adcd:	nop    DWORD PTR [rax]
  40add0:	vxorpd xmm0,xmm0,xmm0
  40add4:	vcomisd xmm0,xmm1
  40add8:	ja     40ae28 <flatcc_json_parser_float@@Base+0x118>
  40adda:	vmovss xmm0,DWORD PTR [rip+0x42d2]        # 40f0b4 <flatcc_builder_padding_base@@Base+0x1274>
  40ade2:	vmovss DWORD PTR [r13+0x0],xmm0
  40ade8:	mov    ecx,0x7
  40aded:	mov    rdx,rbp
  40adf0:	mov    rsi,rbx
  40adf3:	mov    rdi,r12
  40adf6:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40adfb:	jmp    40adb2 <flatcc_json_parser_float@@Base+0xa2>
  40adfd:	nop    DWORD PTR [rax]
  40ae00:	cmp    BYTE PTR [rax+0x1],0x30
  40ae04:	jne    40ad72 <flatcc_json_parser_float@@Base+0x62>
  40ae0a:	nop    WORD PTR [rax+rax*1+0x0]
  40ae10:	mov    ecx,0x6
  40ae15:	mov    rdx,rbp
  40ae18:	mov    rsi,rbx
  40ae1b:	mov    rdi,r12
  40ae1e:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40ae23:	jmp    40adb2 <flatcc_json_parser_float@@Base+0xa2>
  40ae25:	nop    DWORD PTR [rax]
  40ae28:	vmovss xmm0,DWORD PTR [rip+0x4280]        # 40f0b0 <flatcc_builder_padding_base@@Base+0x1270>
  40ae30:	jmp    40ade2 <flatcc_json_parser_float@@Base+0xd2>
  40ae32:	nop    WORD PTR [rax+rax*1+0x0]
  40ae38:	mov    rax,rsi
  40ae3b:	jmp    40adb2 <flatcc_json_parser_float@@Base+0xa2>
  40ae40:	call   403130 <__stack_chk_fail@plt>
  40ae45:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000040ae50 <flatcc_json_parser_generic_json@@Base>:
  40ae50:	endbr64 
  40ae54:	push   r15
  40ae56:	mov    r10,rsi
  40ae59:	push   r14
  40ae5b:	push   r13
  40ae5d:	push   r12
  40ae5f:	push   rbp
  40ae60:	push   rbx
  40ae61:	sub    rsp,0x238
  40ae68:	mov    rax,QWORD PTR fs:0x28
  40ae71:	mov    QWORD PTR [rsp+0x228],rax
  40ae79:	xor    eax,eax
  40ae7b:	cmp    rsi,rdx
  40ae7e:	je     40b750 <flatcc_json_parser_generic_json@@Base+0x900>
  40ae84:	lea    r12,[rsp+0x20]
  40ae89:	lea    rax,[r12+0x200]
  40ae91:	mov    QWORD PTR [rsp],rax
  40ae95:	mov    r15,rdx
  40ae98:	movzx  edx,BYTE PTR [rsi]
  40ae9b:	mov    rbx,rdi
  40ae9e:	mov    r14,r12
  40aea1:	lea    r13,[rsp+0x1c]
  40aea6:	cmp    r14,r12
  40aea9:	je     40af78 <flatcc_json_parser_generic_json@@Base+0x128>
  40aeaf:	cmp    BYTE PTR [r14-0x1],0x7d
  40aeb4:	je     40b3f8 <flatcc_json_parser_generic_json@@Base+0x5a8>
  40aeba:	cmp    dl,0x39
  40aebd:	jle    40af81 <flatcc_json_parser_generic_json@@Base+0x131>
  40aec3:	cmp    dl,0x5b
  40aec6:	je     40b3d0 <flatcc_json_parser_generic_json@@Base+0x580>
  40aecc:	cmp    dl,0x7b
  40aecf:	jne    40b0c1 <flatcc_json_parser_generic_json@@Base+0x271>
  40aed5:	cmp    r14,QWORD PTR [rsp]
  40aed9:	je     40b3da <flatcc_json_parser_generic_json@@Base+0x58a>
  40aedf:	lea    rsi,[r10+0x1]
  40aee3:	mov    rax,r15
  40aee6:	sub    rax,rsi
  40aee9:	lea    rbp,[r14+0x1]
  40aeed:	mov    BYTE PTR [r14],0x7d
  40aef1:	cmp    rax,0x1
  40aef5:	jle    40af10 <flatcc_json_parser_generic_json@@Base+0xc0>
  40aef7:	cmp    BYTE PTR [r10+0x1],0x20
  40aefc:	jg     40b548 <flatcc_json_parser_generic_json@@Base+0x6f8>
  40af02:	jne    40af10 <flatcc_json_parser_generic_json@@Base+0xc0>
  40af04:	cmp    BYTE PTR [r10+0x2],0x20
  40af09:	jg     40b7dc <flatcc_json_parser_generic_json@@Base+0x98c>
  40af0f:	nop
  40af10:	mov    rdx,r15
  40af13:	mov    rdi,rbx
  40af16:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40af1b:	mov    r10,rax
  40af1e:	cmp    r15,r10
  40af21:	je     40b750 <flatcc_json_parser_generic_json@@Base+0x900>
  40af27:	movzx  edx,BYTE PTR [r10]
  40af2b:	cmp    dl,0x7d
  40af2e:	jne    40b2d4 <flatcc_json_parser_generic_json@@Base+0x484>
  40af34:	mov    r14,rbp
  40af37:	mov    rax,r10
  40af3a:	cmp    r14,r12
  40af3d:	jne    40b055 <flatcc_json_parser_generic_json@@Base+0x205>
  40af43:	nop    DWORD PTR [rax+rax*1+0x0]
  40af48:	mov    rcx,QWORD PTR [rsp+0x228]
  40af50:	xor    rcx,QWORD PTR fs:0x28
  40af59:	jne    40b8d2 <flatcc_json_parser_generic_json@@Base+0xa82>
  40af5f:	add    rsp,0x238
  40af66:	pop    rbx
  40af67:	pop    rbp
  40af68:	pop    r12
  40af6a:	pop    r13
  40af6c:	pop    r14
  40af6e:	pop    r15
  40af70:	ret    
  40af71:	nop    DWORD PTR [rax+0x0]
  40af78:	cmp    dl,0x39
  40af7b:	jg     40b270 <flatcc_json_parser_generic_json@@Base+0x420>
  40af81:	cmp    dl,0x30
  40af84:	jge    40b310 <flatcc_json_parser_generic_json@@Base+0x4c0>
  40af8a:	cmp    dl,0x22
  40af8d:	jne    40b0b8 <flatcc_json_parser_generic_json@@Base+0x268>
  40af93:	lea    rax,[r10+0x1]
  40af97:	cmp    r15,rax
  40af9a:	jne    40afda <flatcc_json_parser_generic_json@@Base+0x18a>
  40af9c:	jmp    40b530 <flatcc_json_parser_generic_json@@Base+0x6e0>
  40afa1:	nop    DWORD PTR [rax+0x0]
  40afa8:	mov    rdx,r15
  40afab:	mov    rsi,rax
  40afae:	mov    rdi,rbx
  40afb1:	call   409f00 <flatcc_json_parser_string_part@@Base>
  40afb6:	cmp    r15,rax
  40afb9:	je     40afc0 <flatcc_json_parser_generic_json@@Base+0x170>
  40afbb:	cmp    BYTE PTR [rax],0x22
  40afbe:	je     40afdf <flatcc_json_parser_generic_json@@Base+0x18f>
  40afc0:	mov    rcx,r13
  40afc3:	mov    rdx,r15
  40afc6:	mov    rsi,rax
  40afc9:	mov    rdi,rbx
  40afcc:	call   40a6b0 <flatcc_json_parser_string_escape@@Base>
  40afd1:	cmp    r15,rax
  40afd4:	je     40b530 <flatcc_json_parser_generic_json@@Base+0x6e0>
  40afda:	cmp    BYTE PTR [rax],0x22
  40afdd:	jne    40afa8 <flatcc_json_parser_generic_json@@Base+0x158>
  40afdf:	inc    rax
  40afe2:	cmp    r15,rax
  40afe5:	jne    40b04c <flatcc_json_parser_generic_json@@Base+0x1fc>
  40afe7:	jmp    40b8d7 <flatcc_json_parser_generic_json@@Base+0xa87>
  40afec:	nop    DWORD PTR [rax+0x0]
  40aff0:	cmp    rdx,0x1
  40aff4:	jle    40b001 <flatcc_json_parser_generic_json@@Base+0x1b1>
  40aff6:	cmp    BYTE PTR [rax],0x20
  40aff9:	jg     40b00f <flatcc_json_parser_generic_json@@Base+0x1bf>
  40affb:	je     40b130 <flatcc_json_parser_generic_json@@Base+0x2e0>
  40b001:	mov    rdx,r15
  40b004:	mov    rsi,rax
  40b007:	mov    rdi,rbx
  40b00a:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40b00f:	cmp    r15,rax
  40b012:	je     40b150 <flatcc_json_parser_generic_json@@Base+0x300>
  40b018:	movzx  edx,BYTE PTR [rax]
  40b01b:	cmp    dl,0x2c
  40b01e:	je     40b180 <flatcc_json_parser_generic_json@@Base+0x330>
  40b024:	cmp    dl,0x7d
  40b027:	je     40b100 <flatcc_json_parser_generic_json@@Base+0x2b0>
  40b02d:	mov    ecx,0xa
  40b032:	mov    rdx,r15
  40b035:	mov    rsi,rax
  40b038:	mov    rdi,rbx
  40b03b:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b040:	cmp    r15,rax
  40b043:	je     40b150 <flatcc_json_parser_generic_json@@Base+0x300>
  40b049:	mov    r14,rbp
  40b04c:	cmp    r14,r12
  40b04f:	je     40af48 <flatcc_json_parser_generic_json@@Base+0xf8>
  40b055:	mov    rdx,r15
  40b058:	sub    rdx,rax
  40b05b:	cmp    BYTE PTR [r14-0x1],0x5d
  40b060:	lea    rbp,[r14-0x1]
  40b064:	jne    40aff0 <flatcc_json_parser_generic_json@@Base+0x1a0>
  40b066:	cmp    rdx,0x1
  40b06a:	jle    40b077 <flatcc_json_parser_generic_json@@Base+0x227>
  40b06c:	cmp    BYTE PTR [rax],0x20
  40b06f:	jg     40b085 <flatcc_json_parser_generic_json@@Base+0x235>
  40b071:	je     40b200 <flatcc_json_parser_generic_json@@Base+0x3b0>
  40b077:	mov    rdx,r15
  40b07a:	mov    rsi,rax
  40b07d:	mov    rdi,rbx
  40b080:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40b085:	cmp    r15,rax
  40b088:	je     40b150 <flatcc_json_parser_generic_json@@Base+0x300>
  40b08e:	movzx  edx,BYTE PTR [rax]
  40b091:	cmp    dl,0x2c
  40b094:	je     40b218 <flatcc_json_parser_generic_json@@Base+0x3c8>
  40b09a:	cmp    dl,0x5d
  40b09d:	je     40b100 <flatcc_json_parser_generic_json@@Base+0x2b0>
  40b09f:	mov    ecx,0x9
  40b0a4:	mov    rdx,r15
  40b0a7:	mov    rsi,rax
  40b0aa:	mov    rdi,rbx
  40b0ad:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b0b2:	jmp    40b040 <flatcc_json_parser_generic_json@@Base+0x1f0>
  40b0b4:	nop    DWORD PTR [rax+0x0]
  40b0b8:	cmp    dl,0x2d
  40b0bb:	je     40b310 <flatcc_json_parser_generic_json@@Base+0x4c0>
  40b0c1:	mov    rsi,r10
  40b0c4:	mov    rdx,r15
  40b0c7:	mov    rdi,rbx
  40b0ca:	mov    QWORD PTR [rsp+0x8],r10
  40b0cf:	call   40a980 <flatcc_json_parser_skip_constant@@Base>
  40b0d4:	mov    r10,QWORD PTR [rsp+0x8]
  40b0d9:	cmp    rax,r10
  40b0dc:	jne    40afe2 <flatcc_json_parser_generic_json@@Base+0x192>
  40b0e2:	mov    ecx,0x5
  40b0e7:	mov    rdx,r15
  40b0ea:	mov    rsi,r10
  40b0ed:	mov    rdi,rbx
  40b0f0:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b0f5:	jmp    40af48 <flatcc_json_parser_generic_json@@Base+0xf8>
  40b0fa:	nop    WORD PTR [rax+rax*1+0x0]
  40b100:	lea    rsi,[rax+0x1]
  40b104:	mov    rdx,r15
  40b107:	sub    rdx,rsi
  40b10a:	cmp    rdx,0x1
  40b10e:	jle    40b120 <flatcc_json_parser_generic_json@@Base+0x2d0>
  40b110:	cmp    BYTE PTR [rax+0x1],0x20
  40b114:	jg     40b260 <flatcc_json_parser_generic_json@@Base+0x410>
  40b11a:	je     40b2f8 <flatcc_json_parser_generic_json@@Base+0x4a8>
  40b120:	mov    rdx,r15
  40b123:	mov    rdi,rbx
  40b126:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40b12b:	jmp    40b040 <flatcc_json_parser_generic_json@@Base+0x1f0>
  40b130:	cmp    BYTE PTR [rax+0x1],0x20
  40b134:	jle    40b001 <flatcc_json_parser_generic_json@@Base+0x1b1>
  40b13a:	inc    rax
  40b13d:	cmp    r15,rax
  40b140:	jne    40b018 <flatcc_json_parser_generic_json@@Base+0x1c8>
  40b146:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b150:	cmp    rbp,r12
  40b153:	je     40af48 <flatcc_json_parser_generic_json@@Base+0xf8>
  40b159:	xor    ecx,ecx
  40b15b:	cmp    BYTE PTR [rbp-0x1],0x5d
  40b15f:	setne  cl
  40b162:	add    ecx,0x9
  40b165:	mov    rdx,r15
  40b168:	mov    rsi,rax
  40b16b:	mov    rdi,rbx
  40b16e:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b173:	jmp    40af48 <flatcc_json_parser_generic_json@@Base+0xf8>
  40b178:	nop    DWORD PTR [rax+rax*1+0x0]
  40b180:	lea    r10,[rax+0x1]
  40b184:	mov    rdx,r15
  40b187:	sub    rdx,r10
  40b18a:	cmp    rdx,0x1
  40b18e:	jle    40b19c <flatcc_json_parser_generic_json@@Base+0x34c>
  40b190:	cmp    BYTE PTR [rax+0x1],0x20
  40b194:	jg     40b1ad <flatcc_json_parser_generic_json@@Base+0x35d>
  40b196:	je     40b2e0 <flatcc_json_parser_generic_json@@Base+0x490>
  40b19c:	mov    rsi,r10
  40b19f:	mov    rdx,r15
  40b1a2:	mov    rdi,rbx
  40b1a5:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40b1aa:	mov    r10,rax
  40b1ad:	cmp    r15,r10
  40b1b0:	je     40b623 <flatcc_json_parser_generic_json@@Base+0x7d3>
  40b1b6:	movzx  edx,BYTE PTR [r10]
  40b1ba:	cmp    dl,0x7d
  40b1bd:	jne    40aea6 <flatcc_json_parser_generic_json@@Base+0x56>
  40b1c3:	lea    rax,[r10+0x1]
  40b1c7:	mov    rdx,r15
  40b1ca:	sub    rdx,rax
  40b1cd:	cmp    rdx,0x1
  40b1d1:	jle    40b1e4 <flatcc_json_parser_generic_json@@Base+0x394>
  40b1d3:	cmp    BYTE PTR [r10+0x1],0x20
  40b1d8:	jg     40b040 <flatcc_json_parser_generic_json@@Base+0x1f0>
  40b1de:	je     40b816 <flatcc_json_parser_generic_json@@Base+0x9c6>
  40b1e4:	mov    rdx,r15
  40b1e7:	mov    rsi,rax
  40b1ea:	mov    rdi,rbx
  40b1ed:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40b1f2:	jmp    40b040 <flatcc_json_parser_generic_json@@Base+0x1f0>
  40b1f7:	nop    WORD PTR [rax+rax*1+0x0]
  40b200:	cmp    BYTE PTR [rax+0x1],0x20
  40b204:	jle    40b077 <flatcc_json_parser_generic_json@@Base+0x227>
  40b20a:	inc    rax
  40b20d:	jmp    40b085 <flatcc_json_parser_generic_json@@Base+0x235>
  40b212:	nop    WORD PTR [rax+rax*1+0x0]
  40b218:	lea    r10,[rax+0x1]
  40b21c:	mov    rdx,r15
  40b21f:	sub    rdx,r10
  40b222:	cmp    rdx,0x1
  40b226:	jle    40b234 <flatcc_json_parser_generic_json@@Base+0x3e4>
  40b228:	cmp    BYTE PTR [rax+0x1],0x20
  40b22c:	jg     40b245 <flatcc_json_parser_generic_json@@Base+0x3f5>
  40b22e:	je     40b63b <flatcc_json_parser_generic_json@@Base+0x7eb>
  40b234:	mov    rsi,r10
  40b237:	mov    rdx,r15
  40b23a:	mov    rdi,rbx
  40b23d:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40b242:	mov    r10,rax
  40b245:	cmp    r15,r10
  40b248:	je     40b736 <flatcc_json_parser_generic_json@@Base+0x8e6>
  40b24e:	movzx  edx,BYTE PTR [r10]
  40b252:	cmp    dl,0x5d
  40b255:	jne    40aea6 <flatcc_json_parser_generic_json@@Base+0x56>
  40b25b:	jmp    40b1c3 <flatcc_json_parser_generic_json@@Base+0x373>
  40b260:	mov    rax,rsi
  40b263:	jmp    40b040 <flatcc_json_parser_generic_json@@Base+0x1f0>
  40b268:	nop    DWORD PTR [rax+rax*1+0x0]
  40b270:	cmp    dl,0x5b
  40b273:	jne    40aecc <flatcc_json_parser_generic_json@@Base+0x7c>
  40b279:	lea    rsi,[r10+0x1]
  40b27d:	mov    rax,r15
  40b280:	sub    rax,rsi
  40b283:	lea    rbp,[r14+0x1]
  40b287:	mov    BYTE PTR [r14],0x5d
  40b28b:	cmp    rax,0x1
  40b28f:	jle    40b2b0 <flatcc_json_parser_generic_json@@Base+0x460>
  40b291:	cmp    BYTE PTR [r10+0x1],0x20
  40b296:	jg     40b550 <flatcc_json_parser_generic_json@@Base+0x700>
  40b29c:	jne    40b2b0 <flatcc_json_parser_generic_json@@Base+0x460>
  40b29e:	cmp    BYTE PTR [r10+0x2],0x20
  40b2a3:	jg     40b7e5 <flatcc_json_parser_generic_json@@Base+0x995>
  40b2a9:	nop    DWORD PTR [rax+0x0]
  40b2b0:	mov    rdx,r15
  40b2b3:	mov    rdi,rbx
  40b2b6:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40b2bb:	mov    r10,rax
  40b2be:	cmp    r15,r10
  40b2c1:	je     40b750 <flatcc_json_parser_generic_json@@Base+0x900>
  40b2c7:	movzx  edx,BYTE PTR [r10]
  40b2cb:	cmp    dl,0x5d
  40b2ce:	je     40af34 <flatcc_json_parser_generic_json@@Base+0xe4>
  40b2d4:	mov    r14,rbp
  40b2d7:	jmp    40aea6 <flatcc_json_parser_generic_json@@Base+0x56>
  40b2dc:	nop    DWORD PTR [rax+0x0]
  40b2e0:	cmp    BYTE PTR [rax+0x2],0x20
  40b2e4:	jle    40b19c <flatcc_json_parser_generic_json@@Base+0x34c>
  40b2ea:	lea    r10,[rax+0x2]
  40b2ee:	jmp    40b1ad <flatcc_json_parser_generic_json@@Base+0x35d>
  40b2f3:	nop    DWORD PTR [rax+rax*1+0x0]
  40b2f8:	cmp    BYTE PTR [rax+0x2],0x20
  40b2fc:	jle    40b120 <flatcc_json_parser_generic_json@@Base+0x2d0>
  40b302:	add    rax,0x2
  40b306:	jmp    40b040 <flatcc_json_parser_generic_json@@Base+0x1f0>
  40b30b:	nop    DWORD PTR [rax+rax*1+0x0]
  40b310:	cmp    r15,r10
  40b313:	je     40b6af <flatcc_json_parser_generic_json@@Base+0x85f>
  40b319:	cmp    dl,0x2d
  40b31c:	je     40b64e <flatcc_json_parser_generic_json@@Base+0x7fe>
  40b322:	movzx  eax,BYTE PTR [r10]
  40b326:	cmp    al,0x30
  40b328:	je     40b672 <flatcc_json_parser_generic_json@@Base+0x822>
  40b32e:	sub    eax,0x31
  40b331:	cmp    al,0x8
  40b333:	ja     40b764 <flatcc_json_parser_generic_json@@Base+0x914>
  40b339:	lea    rax,[r10+0x1]
  40b33d:	cmp    r15,rax
  40b340:	je     40b5c0 <flatcc_json_parser_generic_json@@Base+0x770>
  40b346:	movzx  edx,BYTE PTR [r10+0x1]
  40b34b:	lea    ecx,[rdx-0x30]
  40b34e:	cmp    cl,0x9
  40b351:	ja     40b36f <flatcc_json_parser_generic_json@@Base+0x51f>
  40b353:	nop    DWORD PTR [rax+rax*1+0x0]
  40b358:	inc    rax
  40b35b:	cmp    r15,rax
  40b35e:	je     40b5c0 <flatcc_json_parser_generic_json@@Base+0x770>
  40b364:	movzx  edx,BYTE PTR [rax]
  40b367:	lea    ecx,[rdx-0x30]
  40b36a:	cmp    cl,0x9
  40b36d:	jbe    40b358 <flatcc_json_parser_generic_json@@Base+0x508>
  40b36f:	cmp    dl,0x2e
  40b372:	je     40b6e9 <flatcc_json_parser_generic_json@@Base+0x899>
  40b378:	mov    ecx,edx
  40b37a:	and    ecx,0xffffffdf
  40b37d:	cmp    cl,0x45
  40b380:	jne    40b5d8 <flatcc_json_parser_generic_json@@Base+0x788>
  40b386:	lea    rsi,[rax+0x1]
  40b38a:	cmp    r15,rsi
  40b38d:	je     40b65a <flatcc_json_parser_generic_json@@Base+0x80a>
  40b393:	movzx  edx,BYTE PTR [rax+0x1]
  40b397:	lea    ecx,[rdx-0x2b]
  40b39a:	and    ecx,0xfd
  40b3a0:	jne    40b3af <flatcc_json_parser_generic_json@@Base+0x55f>
  40b3a2:	lea    rsi,[rax+0x2]
  40b3a6:	cmp    r15,rsi
  40b3a9:	je     40b3bb <flatcc_json_parser_generic_json@@Base+0x56b>
  40b3ab:	movzx  edx,BYTE PTR [rax+0x2]
  40b3af:	sub    edx,0x30
  40b3b2:	cmp    dl,0x9
  40b3b5:	jbe    40b77c <flatcc_json_parser_generic_json@@Base+0x92c>
  40b3bb:	mov    ecx,0x6
  40b3c0:	mov    rdx,r15
  40b3c3:	mov    rdi,rbx
  40b3c6:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b3cb:	jmp    40afe2 <flatcc_json_parser_generic_json@@Base+0x192>
  40b3d0:	cmp    r14,QWORD PTR [rsp]
  40b3d4:	jne    40b279 <flatcc_json_parser_generic_json@@Base+0x429>
  40b3da:	mov    ecx,0x2
  40b3df:	mov    rdx,r15
  40b3e2:	mov    rsi,r10
  40b3e5:	mov    rdi,rbx
  40b3e8:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b3ed:	jmp    40af48 <flatcc_json_parser_generic_json@@Base+0xf8>
  40b3f2:	nop    WORD PTR [rax+rax*1+0x0]
  40b3f8:	cmp    dl,0x22
  40b3fb:	je     40b558 <flatcc_json_parser_generic_json@@Base+0x708>
  40b401:	cmp    dl,0x2e
  40b404:	je     40b6ba <flatcc_json_parser_generic_json@@Base+0x86a>
  40b40a:	mov    DWORD PTR [rbx+0x14],0x1
  40b411:	cmp    r15,r10
  40b414:	je     40b89d <flatcc_json_parser_generic_json@@Base+0xa4d>
  40b41a:	movzx  edx,BYTE PTR [r10]
  40b41e:	cmp    dl,0x20
  40b421:	jle    40b895 <flatcc_json_parser_generic_json@@Base+0xa45>
  40b427:	mov    rax,r10
  40b42a:	lea    ecx,[rdx-0x2e]
  40b42d:	mov    rsi,rax
  40b430:	cmp    cl,0x31
  40b433:	ja     40b471 <flatcc_json_parser_generic_json@@Base+0x621>
  40b435:	movabs rdi,0x2000000000ffd
  40b43f:	bt     rdi,rcx
  40b443:	jae    40b471 <flatcc_json_parser_generic_json@@Base+0x621>
  40b445:	lea    rdi,[rax+0x1]
  40b449:	mov    rsi,rdi
  40b44c:	cmp    r15,rdi
  40b44f:	je     40b858 <flatcc_json_parser_generic_json@@Base+0xa08>
  40b455:	movzx  ecx,BYTE PTR [rdi]
  40b458:	mov    rax,rdi
  40b45b:	cmp    cl,0x20
  40b45e:	jle    40b858 <flatcc_json_parser_generic_json@@Base+0xa08>
  40b464:	mov    edx,ecx
  40b466:	lea    ecx,[rdx-0x2e]
  40b469:	mov    rsi,rax
  40b46c:	cmp    cl,0x31
  40b46f:	jbe    40b435 <flatcc_json_parser_generic_json@@Base+0x5e5>
  40b471:	mov    ecx,edx
  40b473:	or     ecx,0x20
  40b476:	sub    ecx,0x61
  40b479:	cmp    cl,0x19
  40b47c:	jbe    40b758 <flatcc_json_parser_generic_json@@Base+0x908>
  40b482:	mov    rax,r15
  40b485:	sub    rax,rsi
  40b488:	cmp    rax,0x1
  40b48c:	jle    40b499 <flatcc_json_parser_generic_json@@Base+0x649>
  40b48e:	cmp    BYTE PTR [rsi],0x20
  40b491:	jg     40b4a7 <flatcc_json_parser_generic_json@@Base+0x657>
  40b493:	je     40b7ee <flatcc_json_parser_generic_json@@Base+0x99e>
  40b499:	mov    rdx,r15
  40b49c:	mov    rdi,rbx
  40b49f:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40b4a4:	mov    rsi,rax
  40b4a7:	cmp    r15,rsi
  40b4aa:	je     40b8ba <flatcc_json_parser_generic_json@@Base+0xa6a>
  40b4b0:	cmp    BYTE PTR [rsi],0x3a
  40b4b3:	jne    40b8a5 <flatcc_json_parser_generic_json@@Base+0xa55>
  40b4b9:	lea    r10,[rsi+0x1]
  40b4bd:	mov    rax,r15
  40b4c0:	sub    rax,r10
  40b4c3:	cmp    rax,0x1
  40b4c7:	jle    40b4d8 <flatcc_json_parser_generic_json@@Base+0x688>
  40b4c9:	movzx  edx,BYTE PTR [rsi+0x1]
  40b4cd:	cmp    dl,0x20
  40b4d0:	jg     40b4ec <flatcc_json_parser_generic_json@@Base+0x69c>
  40b4d2:	je     40b800 <flatcc_json_parser_generic_json@@Base+0x9b0>
  40b4d8:	mov    rdx,r15
  40b4db:	mov    rsi,r10
  40b4de:	mov    rdi,rbx
  40b4e1:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40b4e6:	movzx  edx,BYTE PTR [rax]
  40b4e9:	mov    r10,rax
  40b4ec:	cmp    dl,0x39
  40b4ef:	jg     40aec3 <flatcc_json_parser_generic_json@@Base+0x73>
  40b4f5:	cmp    dl,0x30
  40b4f8:	jge    40b310 <flatcc_json_parser_generic_json@@Base+0x4c0>
  40b4fe:	cmp    dl,0x22
  40b501:	jne    40b0b8 <flatcc_json_parser_generic_json@@Base+0x268>
  40b507:	cmp    r10,r15
  40b50a:	jne    40af93 <flatcc_json_parser_generic_json@@Base+0x143>
  40b510:	mov    ecx,0x10
  40b515:	mov    rdx,r15
  40b518:	mov    rsi,r15
  40b51b:	mov    rdi,rbx
  40b51e:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b523:	jmp    40af97 <flatcc_json_parser_generic_json@@Base+0x147>
  40b528:	nop    DWORD PTR [rax+rax*1+0x0]
  40b530:	mov    ecx,0x14
  40b535:	mov    rdx,r15
  40b538:	mov    rsi,rax
  40b53b:	mov    rdi,rbx
  40b53e:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b543:	jmp    40afe2 <flatcc_json_parser_generic_json@@Base+0x192>
  40b548:	mov    r10,rsi
  40b54b:	jmp    40af1e <flatcc_json_parser_generic_json@@Base+0xce>
  40b550:	mov    r10,rsi
  40b553:	jmp    40b2be <flatcc_json_parser_generic_json@@Base+0x46e>
  40b558:	mov    DWORD PTR [rbx+0x14],0x0
  40b55f:	inc    r10
  40b562:	cmp    r15,r10
  40b565:	je     40b694 <flatcc_json_parser_generic_json@@Base+0x844>
  40b56b:	movzx  edx,BYTE PTR [r10]
  40b56f:	cmp    dl,0x22
  40b572:	jne    40b59a <flatcc_json_parser_generic_json@@Base+0x74a>
  40b574:	jmp    40b6e0 <flatcc_json_parser_generic_json@@Base+0x890>
  40b579:	nop    DWORD PTR [rax+0x0]
  40b580:	lea    r10,[rax+0x1]
  40b584:	cmp    r15,r10
  40b587:	je     40b694 <flatcc_json_parser_generic_json@@Base+0x844>
  40b58d:	movzx  edx,BYTE PTR [rax+0x1]
  40b591:	cmp    dl,0x22
  40b594:	je     40b6e0 <flatcc_json_parser_generic_json@@Base+0x890>
  40b59a:	mov    rax,r10
  40b59d:	cmp    dl,0x5c
  40b5a0:	jne    40b580 <flatcc_json_parser_generic_json@@Base+0x730>
  40b5a2:	mov    rdx,r15
  40b5a5:	sub    rdx,r10
  40b5a8:	cmp    rdx,0x1
  40b5ac:	jle    40b689 <flatcc_json_parser_generic_json@@Base+0x839>
  40b5b2:	inc    rax
  40b5b5:	jmp    40b580 <flatcc_json_parser_generic_json@@Base+0x730>
  40b5b7:	mov    rax,r15
  40b5ba:	nop    WORD PTR [rax+rax*1+0x0]
  40b5c0:	mov    ecx,0x6
  40b5c5:	mov    rdx,r15
  40b5c8:	mov    rsi,rax
  40b5cb:	mov    rdi,rbx
  40b5ce:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b5d3:	jmp    40afe2 <flatcc_json_parser_generic_json@@Base+0x192>
  40b5d8:	cmp    dl,0x20
  40b5db:	je     40afe2 <flatcc_json_parser_generic_json@@Base+0x192>
  40b5e1:	jle    40b601 <flatcc_json_parser_generic_json@@Base+0x7b1>
  40b5e3:	cmp    dl,0x3a
  40b5e6:	je     40afe2 <flatcc_json_parser_generic_json@@Base+0x192>
  40b5ec:	jle    40b619 <flatcc_json_parser_generic_json@@Base+0x7c9>
  40b5ee:	cmp    dl,0x5d
  40b5f1:	je     40afe2 <flatcc_json_parser_generic_json@@Base+0x192>
  40b5f7:	cmp    dl,0x7d
  40b5fa:	jne    40b5c0 <flatcc_json_parser_generic_json@@Base+0x770>
  40b5fc:	jmp    40afe2 <flatcc_json_parser_generic_json@@Base+0x192>
  40b601:	cmp    dl,0x9
  40b604:	jl     40b5c0 <flatcc_json_parser_generic_json@@Base+0x770>
  40b606:	cmp    dl,0xb
  40b609:	jle    40afe2 <flatcc_json_parser_generic_json@@Base+0x192>
  40b60f:	cmp    dl,0xd
  40b612:	jne    40b5c0 <flatcc_json_parser_generic_json@@Base+0x770>
  40b614:	jmp    40afe2 <flatcc_json_parser_generic_json@@Base+0x192>
  40b619:	cmp    dl,0x2c
  40b61c:	jne    40b5c0 <flatcc_json_parser_generic_json@@Base+0x770>
  40b61e:	jmp    40afe2 <flatcc_json_parser_generic_json@@Base+0x192>
  40b623:	mov    ecx,0xa
  40b628:	mov    rdx,r15
  40b62b:	mov    rsi,r15
  40b62e:	mov    rdi,rbx
  40b631:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b636:	jmp    40b040 <flatcc_json_parser_generic_json@@Base+0x1f0>
  40b63b:	cmp    BYTE PTR [rax+0x2],0x20
  40b63f:	jle    40b234 <flatcc_json_parser_generic_json@@Base+0x3e4>
  40b645:	lea    r10,[rax+0x2]
  40b649:	jmp    40b245 <flatcc_json_parser_generic_json@@Base+0x3f5>
  40b64e:	inc    r10
  40b651:	cmp    r15,r10
  40b654:	jne    40b322 <flatcc_json_parser_generic_json@@Base+0x4d2>
  40b65a:	mov    ecx,0x6
  40b65f:	mov    rdx,r15
  40b662:	mov    rsi,r15
  40b665:	mov    rdi,rbx
  40b668:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b66d:	jmp    40afe2 <flatcc_json_parser_generic_json@@Base+0x192>
  40b672:	lea    rax,[r10+0x1]
  40b676:	cmp    r15,rax
  40b679:	je     40b5c0 <flatcc_json_parser_generic_json@@Base+0x770>
  40b67f:	movzx  edx,BYTE PTR [r10+0x1]
  40b684:	jmp    40b36f <flatcc_json_parser_generic_json@@Base+0x51f>
  40b689:	cmp    r15,r10
  40b68c:	je     40b694 <flatcc_json_parser_generic_json@@Base+0x844>
  40b68e:	cmp    BYTE PTR [r10],0x22
  40b692:	je     40b6e0 <flatcc_json_parser_generic_json@@Base+0x890>
  40b694:	mov    rsi,r10
  40b697:	mov    ecx,0x14
  40b69c:	mov    rdx,r15
  40b69f:	mov    rdi,rbx
  40b6a2:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b6a7:	mov    rsi,rax
  40b6aa:	jmp    40b482 <flatcc_json_parser_generic_json@@Base+0x632>
  40b6af:	mov    rbp,r14
  40b6b2:	mov    rax,r15
  40b6b5:	jmp    40b150 <flatcc_json_parser_generic_json@@Base+0x300>
  40b6ba:	mov    rsi,r10
  40b6bd:	mov    ecx,0x5
  40b6c2:	mov    rdx,r15
  40b6c5:	mov    rdi,rbx
  40b6c8:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b6cd:	mov    r10,rax
  40b6d0:	mov    eax,DWORD PTR [rbx+0x14]
  40b6d3:	test   eax,eax
  40b6d5:	je     40b562 <flatcc_json_parser_generic_json@@Base+0x712>
  40b6db:	jmp    40b411 <flatcc_json_parser_generic_json@@Base+0x5c1>
  40b6e0:	lea    rsi,[r10+0x1]
  40b6e4:	jmp    40b482 <flatcc_json_parser_generic_json@@Base+0x632>
  40b6e9:	movzx  ecx,BYTE PTR [rax+0x1]
  40b6ed:	lea    edx,[rcx-0x30]
  40b6f0:	cmp    dl,0x9
  40b6f3:	ja     40b87c <flatcc_json_parser_generic_json@@Base+0xa2c>
  40b6f9:	lea    rcx,[rax+0x2]
  40b6fd:	cmp    r15,rcx
  40b700:	je     40b5b7 <flatcc_json_parser_generic_json@@Base+0x767>
  40b706:	movzx  edx,BYTE PTR [rax+0x2]
  40b70a:	lea    eax,[rdx-0x30]
  40b70d:	cmp    al,0x9
  40b70f:	ja     40b72e <flatcc_json_parser_generic_json@@Base+0x8de>
  40b711:	nop    DWORD PTR [rax+0x0]
  40b718:	inc    rcx
  40b71b:	cmp    r15,rcx
  40b71e:	je     40b5b7 <flatcc_json_parser_generic_json@@Base+0x767>
  40b724:	movzx  edx,BYTE PTR [rcx]
  40b727:	lea    eax,[rdx-0x30]
  40b72a:	cmp    al,0x9
  40b72c:	jbe    40b718 <flatcc_json_parser_generic_json@@Base+0x8c8>
  40b72e:	mov    rax,rcx
  40b731:	jmp    40b378 <flatcc_json_parser_generic_json@@Base+0x528>
  40b736:	mov    ecx,0x9
  40b73b:	mov    rdx,r15
  40b73e:	mov    rsi,r15
  40b741:	mov    rdi,rbx
  40b744:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b749:	jmp    40b040 <flatcc_json_parser_generic_json@@Base+0x1f0>
  40b74e:	xchg   ax,ax
  40b750:	mov    rax,r10
  40b753:	jmp    40af48 <flatcc_json_parser_generic_json@@Base+0xf8>
  40b758:	lea    rdi,[rax+0x1]
  40b75c:	mov    rsi,rdi
  40b75f:	jmp    40b44c <flatcc_json_parser_generic_json@@Base+0x5fc>
  40b764:	mov    ecx,0x6
  40b769:	mov    rdx,r15
  40b76c:	mov    rsi,r10
  40b76f:	mov    rdi,rbx
  40b772:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b777:	jmp    40afe2 <flatcc_json_parser_generic_json@@Base+0x192>
  40b77c:	lea    rax,[rsi+0x1]
  40b780:	cmp    r15,rax
  40b783:	je     40b5c0 <flatcc_json_parser_generic_json@@Base+0x770>
  40b789:	movzx  edx,BYTE PTR [rsi+0x1]
  40b78d:	lea    ecx,[rdx-0x30]
  40b790:	cmp    cl,0x9
  40b793:	ja     40b7af <flatcc_json_parser_generic_json@@Base+0x95f>
  40b795:	nop    DWORD PTR [rax]
  40b798:	inc    rax
  40b79b:	cmp    r15,rax
  40b79e:	je     40b5c0 <flatcc_json_parser_generic_json@@Base+0x770>
  40b7a4:	movzx  edx,BYTE PTR [rax]
  40b7a7:	lea    ecx,[rdx-0x30]
  40b7aa:	cmp    cl,0x9
  40b7ad:	jbe    40b798 <flatcc_json_parser_generic_json@@Base+0x948>
  40b7af:	cmp    dl,0x20
  40b7b2:	je     40b04c <flatcc_json_parser_generic_json@@Base+0x1fc>
  40b7b8:	jle    40b838 <flatcc_json_parser_generic_json@@Base+0x9e8>
  40b7ba:	cmp    dl,0x3a
  40b7bd:	je     40b04c <flatcc_json_parser_generic_json@@Base+0x1fc>
  40b7c3:	jle    40b82a <flatcc_json_parser_generic_json@@Base+0x9da>
  40b7c5:	cmp    dl,0x5d
  40b7c8:	je     40b04c <flatcc_json_parser_generic_json@@Base+0x1fc>
  40b7ce:	cmp    dl,0x7d
  40b7d1:	jne    40b5c0 <flatcc_json_parser_generic_json@@Base+0x770>
  40b7d7:	jmp    40b04c <flatcc_json_parser_generic_json@@Base+0x1fc>
  40b7dc:	add    r10,0x2
  40b7e0:	jmp    40af1e <flatcc_json_parser_generic_json@@Base+0xce>
  40b7e5:	add    r10,0x2
  40b7e9:	jmp    40b2be <flatcc_json_parser_generic_json@@Base+0x46e>
  40b7ee:	cmp    BYTE PTR [rsi+0x1],0x20
  40b7f2:	jle    40b499 <flatcc_json_parser_generic_json@@Base+0x649>
  40b7f8:	inc    rsi
  40b7fb:	jmp    40b4a7 <flatcc_json_parser_generic_json@@Base+0x657>
  40b800:	movzx  edx,BYTE PTR [rsi+0x2]
  40b804:	cmp    dl,0x20
  40b807:	jle    40b4d8 <flatcc_json_parser_generic_json@@Base+0x688>
  40b80d:	lea    r10,[rsi+0x2]
  40b811:	jmp    40b4ec <flatcc_json_parser_generic_json@@Base+0x69c>
  40b816:	cmp    BYTE PTR [r10+0x2],0x20
  40b81b:	jle    40b1e4 <flatcc_json_parser_generic_json@@Base+0x394>
  40b821:	lea    rax,[r10+0x2]
  40b825:	jmp    40b040 <flatcc_json_parser_generic_json@@Base+0x1f0>
  40b82a:	cmp    dl,0x2c
  40b82d:	jne    40b5c0 <flatcc_json_parser_generic_json@@Base+0x770>
  40b833:	jmp    40b04c <flatcc_json_parser_generic_json@@Base+0x1fc>
  40b838:	cmp    dl,0x9
  40b83b:	jl     40b5c0 <flatcc_json_parser_generic_json@@Base+0x770>
  40b841:	cmp    dl,0xb
  40b844:	jle    40b04c <flatcc_json_parser_generic_json@@Base+0x1fc>
  40b84a:	cmp    dl,0xd
  40b84d:	jne    40b5c0 <flatcc_json_parser_generic_json@@Base+0x770>
  40b853:	jmp    40b04c <flatcc_json_parser_generic_json@@Base+0x1fc>
  40b858:	cmp    dl,0x2e
  40b85b:	jne    40b482 <flatcc_json_parser_generic_json@@Base+0x632>
  40b861:	mov    rsi,rdi
  40b864:	mov    ecx,0x5
  40b869:	mov    rdx,r15
  40b86c:	mov    rdi,rbx
  40b86f:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b874:	mov    rsi,rax
  40b877:	jmp    40b482 <flatcc_json_parser_generic_json@@Base+0x632>
  40b87c:	lea    rsi,[rax+0x1]
  40b880:	mov    ecx,0x6
  40b885:	mov    rdx,r15
  40b888:	mov    rdi,rbx
  40b88b:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b890:	jmp    40afe2 <flatcc_json_parser_generic_json@@Base+0x192>
  40b895:	mov    rsi,r10
  40b898:	jmp    40b482 <flatcc_json_parser_generic_json@@Base+0x632>
  40b89d:	mov    rsi,r15
  40b8a0:	jmp    40b482 <flatcc_json_parser_generic_json@@Base+0x632>
  40b8a5:	mov    ecx,0x4
  40b8aa:	mov    rdx,r15
  40b8ad:	mov    rdi,rbx
  40b8b0:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b8b5:	jmp    40af48 <flatcc_json_parser_generic_json@@Base+0xf8>
  40b8ba:	mov    ecx,0xa
  40b8bf:	mov    rdx,r15
  40b8c2:	mov    rsi,r15
  40b8c5:	mov    rdi,rbx
  40b8c8:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40b8cd:	jmp    40af48 <flatcc_json_parser_generic_json@@Base+0xf8>
  40b8d2:	call   403130 <__stack_chk_fail@plt>
  40b8d7:	mov    rbp,r14
  40b8da:	jmp    40b150 <flatcc_json_parser_generic_json@@Base+0x300>
  40b8df:	nop

000000000040b8e0 <flatcc_json_parser_unmatched_symbol@@Base>:
  40b8e0:	endbr64 
  40b8e4:	push   rbp
  40b8e5:	mov    rbp,rdi
  40b8e8:	push   rbx
  40b8e9:	mov    rbx,rdx
  40b8ec:	sub    rsp,0x8
  40b8f0:	test   BYTE PTR [rdi+0x10],0x1
  40b8f4:	je     40ba20 <flatcc_json_parser_unmatched_symbol@@Base+0x140>
  40b8fa:	mov    eax,DWORD PTR [rdi+0x14]
  40b8fd:	test   eax,eax
  40b8ff:	je     40b9b8 <flatcc_json_parser_unmatched_symbol@@Base+0xd8>
  40b905:	cmp    rsi,rdx
  40b908:	je     40b982 <flatcc_json_parser_unmatched_symbol@@Base+0xa2>
  40b90a:	movzx  edx,BYTE PTR [rsi]
  40b90d:	cmp    dl,0x20
  40b910:	jle    40b96b <flatcc_json_parser_unmatched_symbol@@Base+0x8b>
  40b912:	mov    rcx,rsi
  40b915:	lea    eax,[rdx-0x2e]
  40b918:	movabs r8,0x2000000000ffd
  40b922:	mov    rsi,rcx
  40b925:	cmp    al,0x31
  40b927:	ja     40b95b <flatcc_json_parser_unmatched_symbol@@Base+0x7b>
  40b929:	bt     r8,rax
  40b92d:	jae    40b95b <flatcc_json_parser_unmatched_symbol@@Base+0x7b>
  40b92f:	lea    rax,[rcx+0x1]
  40b933:	mov    rsi,rax
  40b936:	cmp    rbx,rax
  40b939:	je     40bab8 <flatcc_json_parser_unmatched_symbol@@Base+0x1d8>
  40b93f:	movzx  edi,BYTE PTR [rax]
  40b942:	mov    rcx,rax
  40b945:	cmp    dil,0x20
  40b949:	jle    40bab8 <flatcc_json_parser_unmatched_symbol@@Base+0x1d8>
  40b94f:	mov    edx,edi
  40b951:	lea    eax,[rdx-0x2e]
  40b954:	mov    rsi,rcx
  40b957:	cmp    al,0x31
  40b959:	jbe    40b929 <flatcc_json_parser_unmatched_symbol@@Base+0x49>
  40b95b:	mov    eax,edx
  40b95d:	or     eax,0x20
  40b960:	sub    eax,0x61
  40b963:	cmp    al,0x19
  40b965:	jbe    40ba40 <flatcc_json_parser_unmatched_symbol@@Base+0x160>
  40b96b:	mov    rax,rbx
  40b96e:	sub    rax,rsi
  40b971:	cmp    rax,0x1
  40b975:	jle    40b982 <flatcc_json_parser_unmatched_symbol@@Base+0xa2>
  40b977:	cmp    BYTE PTR [rsi],0x20
  40b97a:	jg     40b990 <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
  40b97c:	je     40ba90 <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
  40b982:	mov    rdx,rbx
  40b985:	mov    rdi,rbp
  40b988:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40b98d:	mov    rsi,rax
  40b990:	cmp    rbx,rsi
  40b993:	je     40b99e <flatcc_json_parser_unmatched_symbol@@Base+0xbe>
  40b995:	cmp    BYTE PTR [rsi],0x3a
  40b998:	je     40ba50 <flatcc_json_parser_unmatched_symbol@@Base+0x170>
  40b99e:	mov    ecx,0x4
  40b9a3:	add    rsp,0x8
  40b9a7:	mov    rdx,rbx
  40b9aa:	pop    rbx
  40b9ab:	mov    rdi,rbp
  40b9ae:	pop    rbp
  40b9af:	jmp    409ed0 <flatcc_json_parser_set_error@@Base>
  40b9b4:	nop    DWORD PTR [rax+0x0]
  40b9b8:	cmp    rsi,rdx
  40b9bb:	je     40ba08 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
  40b9bd:	movzx  edx,BYTE PTR [rsi]
  40b9c0:	cmp    dl,0x22
  40b9c3:	jne    40b9e2 <flatcc_json_parser_unmatched_symbol@@Base+0x102>
  40b9c5:	jmp    40ba38 <flatcc_json_parser_unmatched_symbol@@Base+0x158>
  40b9c7:	nop    WORD PTR [rax+rax*1+0x0]
  40b9d0:	lea    rsi,[rax+0x1]
  40b9d4:	cmp    rbx,rsi
  40b9d7:	je     40ba08 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
  40b9d9:	movzx  edx,BYTE PTR [rax+0x1]
  40b9dd:	cmp    dl,0x22
  40b9e0:	je     40ba38 <flatcc_json_parser_unmatched_symbol@@Base+0x158>
  40b9e2:	mov    rax,rsi
  40b9e5:	cmp    dl,0x5c
  40b9e8:	jne    40b9d0 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
  40b9ea:	mov    rdx,rbx
  40b9ed:	sub    rdx,rsi
  40b9f0:	cmp    rdx,0x1
  40b9f4:	jle    40ba30 <flatcc_json_parser_unmatched_symbol@@Base+0x150>
  40b9f6:	inc    rax
  40b9f9:	lea    rsi,[rax+0x1]
  40b9fd:	cmp    rbx,rsi
  40ba00:	jne    40b9d9 <flatcc_json_parser_unmatched_symbol@@Base+0xf9>
  40ba02:	nop    WORD PTR [rax+rax*1+0x0]
  40ba08:	mov    ecx,0x14
  40ba0d:	mov    rdx,rbx
  40ba10:	mov    rdi,rbp
  40ba13:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40ba18:	mov    rsi,rax
  40ba1b:	jmp    40b96b <flatcc_json_parser_unmatched_symbol@@Base+0x8b>
  40ba20:	mov    ecx,0xd
  40ba25:	jmp    40b9a3 <flatcc_json_parser_unmatched_symbol@@Base+0xc3>
  40ba2a:	nop    WORD PTR [rax+rax*1+0x0]
  40ba30:	cmp    BYTE PTR [rsi],0x22
  40ba33:	jne    40ba08 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
  40ba35:	nop    DWORD PTR [rax]
  40ba38:	inc    rsi
  40ba3b:	jmp    40b96b <flatcc_json_parser_unmatched_symbol@@Base+0x8b>
  40ba40:	lea    rax,[rcx+0x1]
  40ba44:	mov    rsi,rax
  40ba47:	jmp    40b936 <flatcc_json_parser_unmatched_symbol@@Base+0x56>
  40ba4c:	nop    DWORD PTR [rax+0x0]
  40ba50:	lea    rax,[rsi+0x1]
  40ba54:	mov    rdx,rbx
  40ba57:	sub    rdx,rax
  40ba5a:	cmp    rdx,0x1
  40ba5e:	jle    40ba68 <flatcc_json_parser_unmatched_symbol@@Base+0x188>
  40ba60:	cmp    BYTE PTR [rsi+0x1],0x20
  40ba64:	jg     40ba76 <flatcc_json_parser_unmatched_symbol@@Base+0x196>
  40ba66:	je     40baa8 <flatcc_json_parser_unmatched_symbol@@Base+0x1c8>
  40ba68:	mov    rdx,rbx
  40ba6b:	mov    rsi,rax
  40ba6e:	mov    rdi,rbp
  40ba71:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40ba76:	add    rsp,0x8
  40ba7a:	mov    rdx,rbx
  40ba7d:	pop    rbx
  40ba7e:	mov    rdi,rbp
  40ba81:	mov    rsi,rax
  40ba84:	pop    rbp
  40ba85:	jmp    40ae50 <flatcc_json_parser_generic_json@@Base>
  40ba8a:	nop    WORD PTR [rax+rax*1+0x0]
  40ba90:	cmp    BYTE PTR [rsi+0x1],0x20
  40ba94:	jle    40b982 <flatcc_json_parser_unmatched_symbol@@Base+0xa2>
  40ba9a:	inc    rsi
  40ba9d:	jmp    40b990 <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
  40baa2:	nop    WORD PTR [rax+rax*1+0x0]
  40baa8:	cmp    BYTE PTR [rsi+0x2],0x20
  40baac:	jle    40ba68 <flatcc_json_parser_unmatched_symbol@@Base+0x188>
  40baae:	lea    rax,[rsi+0x2]
  40bab2:	jmp    40ba76 <flatcc_json_parser_unmatched_symbol@@Base+0x196>
  40bab4:	nop    DWORD PTR [rax+0x0]
  40bab8:	cmp    dl,0x2e
  40babb:	jne    40b96b <flatcc_json_parser_unmatched_symbol@@Base+0x8b>
  40bac1:	mov    rsi,rax
  40bac4:	mov    ecx,0x5
  40bac9:	mov    rdx,rbx
  40bacc:	mov    rdi,rbp
  40bacf:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40bad4:	mov    rsi,rax
  40bad7:	jmp    40b96b <flatcc_json_parser_unmatched_symbol@@Base+0x8b>
  40badc:	nop    DWORD PTR [rax+0x0]

000000000040bae0 <flatcc_json_parser_integer@@Base>:
  40bae0:	endbr64 
  40bae4:	cmp    rsi,rdx
  40bae7:	je     40bb80 <flatcc_json_parser_integer@@Base+0xa0>
  40baed:	cmp    BYTE PTR [rsi],0x2d
  40baf0:	sete   al
  40baf3:	movzx  r9d,al
  40baf7:	movzx  eax,al
  40bafa:	add    rax,rsi
  40bafd:	mov    DWORD PTR [rcx],r9d
  40bb00:	cmp    rdx,rax
  40bb03:	je     40bb9a <flatcc_json_parser_integer@@Base+0xba>
  40bb09:	movsx  r9,BYTE PTR [rax]
  40bb0d:	lea    ecx,[r9-0x30]
  40bb11:	cmp    cl,0x9
  40bb14:	ja     40bb95 <flatcc_json_parser_integer@@Base+0xb5>
  40bb16:	sub    r9,0x30
  40bb1a:	jmp    40bb31 <flatcc_json_parser_integer@@Base+0x51>
  40bb1c:	nop    DWORD PTR [rax+0x0]
  40bb20:	lea    r10,[r9+r9*4]
  40bb24:	lea    rcx,[rcx+r10*2-0x30]
  40bb29:	cmp    rcx,r9
  40bb2c:	jb     40bb70 <flatcc_json_parser_integer@@Base+0x90>
  40bb2e:	mov    r9,rcx
  40bb31:	inc    rax
  40bb34:	cmp    rdx,rax
  40bb37:	je     40bb5f <flatcc_json_parser_integer@@Base+0x7f>
  40bb39:	movsx  rcx,BYTE PTR [rax]
  40bb3d:	lea    r10d,[rcx-0x30]
  40bb41:	cmp    r10b,0x9
  40bb45:	jbe    40bb20 <flatcc_json_parser_integer@@Base+0x40>
  40bb47:	cmp    rsi,rax
  40bb4a:	je     40bb68 <flatcc_json_parser_integer@@Base+0x88>
  40bb4c:	movzx  ecx,BYTE PTR [rax]
  40bb4f:	mov    esi,ecx
  40bb51:	and    esi,0xffffffdf
  40bb54:	cmp    sil,0x45
  40bb58:	je     40bb88 <flatcc_json_parser_integer@@Base+0xa8>
  40bb5a:	cmp    cl,0x2e
  40bb5d:	je     40bb88 <flatcc_json_parser_integer@@Base+0xa8>
  40bb5f:	mov    QWORD PTR [r8],r9
  40bb62:	ret    
  40bb63:	nop    DWORD PTR [rax+rax*1+0x0]
  40bb68:	ret    
  40bb69:	nop    DWORD PTR [rax+0x0]
  40bb70:	mov    ecx,0x8
  40bb75:	mov    rsi,rax
  40bb78:	jmp    409ed0 <flatcc_json_parser_set_error@@Base>
  40bb7d:	nop    DWORD PTR [rax]
  40bb80:	mov    rax,rsi
  40bb83:	ret    
  40bb84:	nop    DWORD PTR [rax+0x0]
  40bb88:	mov    ecx,0xc
  40bb8d:	mov    rsi,rax
  40bb90:	jmp    409ed0 <flatcc_json_parser_set_error@@Base>
  40bb95:	xor    r9d,r9d
  40bb98:	jmp    40bb47 <flatcc_json_parser_integer@@Base+0x67>
  40bb9a:	xor    r9d,r9d
  40bb9d:	jmp    40bb5f <flatcc_json_parser_integer@@Base+0x7f>
  40bb9f:	nop

000000000040bba0 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
  40bba0:	endbr64 
  40bba4:	push   r15
  40bba6:	push   r14
  40bba8:	mov    r14d,r8d
  40bbab:	push   r13
  40bbad:	mov    r13,rcx
  40bbb0:	push   r12
  40bbb2:	push   rbp
  40bbb3:	mov    rbp,rdi
  40bbb6:	push   rbx
  40bbb7:	mov    rbx,rdx
  40bbba:	sub    rsp,0x38
  40bbbe:	mov    rax,QWORD PTR fs:0x28
  40bbc7:	mov    QWORD PTR [rsp+0x28],rax
  40bbcc:	xor    eax,eax
  40bbce:	cmp    rsi,rdx
  40bbd1:	je     40bd88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e8>
  40bbd7:	cmp    BYTE PTR [rsi],0x22
  40bbda:	lea    r12,[rsi+0x1]
  40bbde:	jne    40bd88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e8>
  40bbe4:	mov    rdx,rbx
  40bbe7:	mov    rsi,r12
  40bbea:	mov    rdi,rbp
  40bbed:	call   409f00 <flatcc_json_parser_string_part@@Base>
  40bbf2:	mov    r8,rax
  40bbf5:	cmp    rbx,rax
  40bbf8:	je     40bd40 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a0>
  40bbfe:	cmp    BYTE PTR [rax],0x22
  40bc01:	jne    40bd40 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a0>
  40bc07:	mov    r15,rax
  40bc0a:	sub    r15,r12
  40bc0d:	mov    rax,r15
  40bc10:	mov    rdx,r15
  40bc13:	shr    rdx,0x2
  40bc17:	and    eax,0x3
  40bc1a:	mov    QWORD PTR [rsp+0x10],r15
  40bc1f:	lea    r9,[rdx+rdx*2]
  40bc23:	cmp    rax,0x2
  40bc27:	je     40bdc8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x228>
  40bc2d:	lea    rdx,[r9+0x2]
  40bc31:	cmp    rax,0x3
  40bc35:	cmove  r9,rdx
  40bc39:	mov    rdi,QWORD PTR [rbp+0x0]
  40bc3d:	mov    ecx,0xffffffff
  40bc42:	mov    edx,0x1
  40bc47:	mov    esi,0x1
  40bc4c:	mov    QWORD PTR [rsp],r8
  40bc50:	mov    QWORD PTR [rsp+0x8],r9
  40bc55:	call   4064a0 <flatcc_builder_start_vector@@Base>
  40bc5a:	test   eax,eax
  40bc5c:	mov    r8,QWORD PTR [rsp]
  40bc60:	jne    40bda0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  40bc66:	mov    r9,QWORD PTR [rsp+0x8]
  40bc6b:	mov    rdi,QWORD PTR [rbp+0x0]
  40bc6f:	mov    rsi,r9
  40bc72:	call   405df0 <flatcc_builder_extend_vector@@Base>
  40bc77:	test   rax,rax
  40bc7a:	mov    r8,QWORD PTR [rsp]
  40bc7e:	je     40bda0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  40bc84:	mov    r9,QWORD PTR [rsp+0x8]
  40bc89:	test   r14d,r14d
  40bc8c:	lea    rcx,[rip+0x2b4d]        # 40e7e0 <flatcc_builder_padding_base@@Base+0x9a0>
  40bc93:	lea    rdx,[rip+0x2c46]        # 40e8e0 <flatcc_builder_padding_base@@Base+0xaa0>
  40bc9a:	cmovne rdx,rcx
  40bc9e:	mov    rsi,0xffffffffffffffff
  40bca5:	test   r9,r9
  40bca8:	cmovne rsi,r9
  40bcac:	mov    QWORD PTR [rsp],r15
  40bcb0:	mov    QWORD PTR [rsp+0x8],rax
  40bcb5:	mov    rcx,r12
  40bcb8:	lea    r11,[rax+rsi*1]
  40bcbc:	mov    rdi,r11
  40bcbf:	sub    rdi,QWORD PTR [rsp+0x8]
  40bcc4:	cmp    QWORD PTR [rsp],0x0
  40bcc9:	mov    QWORD PTR [rsp+0x18],rdi
  40bcce:	je     40c044 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4a4>
  40bcd4:	mov    r10,QWORD PTR [rsp]
  40bcd8:	xor    esi,esi
  40bcda:	movzx  edi,BYTE PTR [rcx+rsi*1]
  40bcde:	movzx  edi,BYTE PTR [rdx+rdi*1]
  40bce2:	mov    BYTE PTR [rsp+rsi*1+0x24],dil
  40bce7:	cmp    dil,0x3f
  40bceb:	jbe    40bdd0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
  40bcf1:	cmp    dil,0x41
  40bcf5:	je     40bdf0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
  40bcfb:	mov    r11,rsi
  40bcfe:	cmp    dil,0x42
  40bd02:	je     40be00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x260>
  40bd08:	mov    rdx,r10
  40bd0b:	sub    rdx,r11
  40bd0e:	cmp    rsi,0x2
  40bd12:	je     40bf30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
  40bd18:	cmp    rsi,0x3
  40bd1c:	je     40be40 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a0>
  40bd22:	mov    rcx,r15
  40bd25:	sub    rcx,QWORD PTR [rsp]
  40bd29:	test   rsi,rsi
  40bd2c:	je     40bf70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3d0>
  40bd32:	lea    r8,[r12+rcx*1]
  40bd36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40bd40:	mov    DWORD PTR [r13+0x0],0x0
  40bd48:	xor    ecx,ecx
  40bd4a:	test   r14d,r14d
  40bd4d:	setne  cl
  40bd50:	add    ecx,0x1f
  40bd53:	mov    rax,QWORD PTR [rsp+0x28]
  40bd58:	xor    rax,QWORD PTR fs:0x28
  40bd61:	jne    40c04c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  40bd67:	add    rsp,0x38
  40bd6b:	mov    rdx,rbx
  40bd6e:	pop    rbx
  40bd6f:	mov    rdi,rbp
  40bd72:	pop    rbp
  40bd73:	pop    r12
  40bd75:	pop    r13
  40bd77:	pop    r14
  40bd79:	mov    rsi,r8
  40bd7c:	pop    r15
  40bd7e:	jmp    409ed0 <flatcc_json_parser_set_error@@Base>
  40bd83:	nop    DWORD PTR [rax+rax*1+0x0]
  40bd88:	mov    ecx,0x10
  40bd8d:	mov    rdx,rbx
  40bd90:	mov    rdi,rbp
  40bd93:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40bd98:	mov    r12,rax
  40bd9b:	jmp    40bbe4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
  40bda0:	mov    DWORD PTR [r13+0x0],0x0
  40bda8:	mov    rax,QWORD PTR [rsp+0x28]
  40bdad:	xor    rax,QWORD PTR fs:0x28
  40bdb6:	jne    40c04c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  40bdbc:	mov    ecx,0x21
  40bdc1:	jmp    40bd67 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c7>
  40bdc3:	nop    DWORD PTR [rax+rax*1+0x0]
  40bdc8:	inc    r9
  40bdcb:	jmp    40bc39 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x99>
  40bdd0:	inc    rsi
  40bdd3:	cmp    rsi,0x3
  40bdd7:	ja     40bfb7 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x417>
  40bddd:	cmp    r10,rsi
  40bde0:	jne    40bcda <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13a>
  40bde6:	xor    edx,edx
  40bde8:	jmp    40bd0e <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16e>
  40bded:	nop    DWORD PTR [rax]
  40bdf0:	inc    rcx
  40bdf3:	dec    r10
  40bdf6:	jmp    40bdd3 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x233>
  40bdf8:	nop    DWORD PTR [rax+rax*1+0x0]
  40be00:	lea    r11,[rsi+0x1]
  40be04:	cmp    r11,r10
  40be07:	jb     40be1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x27c>
  40be09:	jmp    40bd08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  40be0e:	xchg   ax,ax
  40be10:	inc    r11
  40be13:	cmp    r11,r10
  40be16:	jae    40bd08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  40be1c:	cmp    r11,0x7
  40be20:	ja     40bd08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  40be26:	movzx  edi,BYTE PTR [rcx+r11*1]
  40be2b:	movzx  edi,BYTE PTR [rdx+rdi*1]
  40be2f:	sub    edi,0x41
  40be32:	cmp    dil,0x1
  40be36:	jbe    40be10 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x270>
  40be38:	jmp    40bd08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  40be3d:	nop    DWORD PTR [rax]
  40be40:	movzx  ecx,BYTE PTR [rsp+0x26]
  40be45:	mov    esi,ecx
  40be47:	shl    esi,0x6
  40be4a:	and    esi,0xc0
  40be50:	jne    40bf60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  40be56:	cmp    QWORD PTR [rsp+0x18],0x1
  40be5c:	je     40bf60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  40be62:	movzx  esi,BYTE PTR [rsp+0x25]
  40be67:	movzx  edi,BYTE PTR [rsp+0x24]
  40be6c:	mov    r10,QWORD PTR [rsp+0x8]
  40be71:	lea    r11d,[rdi*4+0x0]
  40be79:	mov    edi,esi
  40be7b:	shr    dil,0x4
  40be7f:	or     edi,r11d
  40be82:	shl    esi,0x4
  40be85:	shr    cl,0x2
  40be88:	mov    BYTE PTR [r10],dil
  40be8b:	or     ecx,esi
  40be8d:	mov    BYTE PTR [r10+0x1],cl
  40be91:	lea    rcx,[r10+0x2]
  40be95:	sub    rcx,rax
  40be98:	mov    rax,rcx
  40be9b:	mov    rcx,r15
  40be9e:	sub    rcx,rdx
  40bea1:	mov    QWORD PTR [rsp+0x10],rcx
  40bea6:	mov    rdx,rcx
  40bea9:	cmp    r15,rdx
  40beac:	je     40bec0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
  40beae:	mov    r8,QWORD PTR [rsp+0x10]
  40beb3:	add    r8,r12
  40beb6:	jmp    40bd40 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a0>
  40bebb:	nop    DWORD PTR [rax+rax*1+0x0]
  40bec0:	mov    rdi,QWORD PTR [rbp+0x0]
  40bec4:	cmp    r9,rax
  40bec7:	jbe    40bee8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
  40bec9:	mov    rsi,r9
  40becc:	sub    rsi,rax
  40becf:	mov    QWORD PTR [rsp],r8
  40bed3:	call   406300 <flatcc_builder_truncate_vector@@Base>
  40bed8:	test   eax,eax
  40beda:	mov    r8,QWORD PTR [rsp]
  40bede:	jne    40bda0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  40bee4:	mov    rdi,QWORD PTR [rbp+0x0]
  40bee8:	mov    QWORD PTR [rsp],r8
  40beec:	call   407360 <flatcc_builder_end_vector@@Base>
  40bef1:	test   eax,eax
  40bef3:	mov    DWORD PTR [r13+0x0],eax
  40bef7:	mov    r8,QWORD PTR [rsp]
  40befb:	je     40bda0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  40bf01:	cmp    BYTE PTR [r8],0x22
  40bf05:	je     40bf90 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f0>
  40bf0b:	mov    rax,QWORD PTR [rsp+0x28]
  40bf10:	xor    rax,QWORD PTR fs:0x28
  40bf19:	jne    40c04c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  40bf1f:	mov    ecx,0x14
  40bf24:	jmp    40bd67 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c7>
  40bf29:	nop    DWORD PTR [rax+0x0]
  40bf30:	movzx  ecx,BYTE PTR [rsp+0x25]
  40bf35:	mov    esi,ecx
  40bf37:	shl    esi,0x4
  40bf3a:	and    esi,0xf0
  40bf40:	jne    40bf60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  40bf42:	movzx  esi,BYTE PTR [rsp+0x24]
  40bf47:	mov    rdi,QWORD PTR [rsp+0x8]
  40bf4c:	shl    esi,0x2
  40bf4f:	shr    cl,0x4
  40bf52:	or     ecx,esi
  40bf54:	mov    BYTE PTR [rdi],cl
  40bf56:	lea    rcx,[rdi+0x1]
  40bf5a:	jmp    40be95 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f5>
  40bf5f:	nop
  40bf60:	mov    rcx,r15
  40bf63:	sub    rcx,QWORD PTR [rsp]
  40bf67:	jmp    40bd32 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x192>
  40bf6c:	nop    DWORD PTR [rax+0x0]
  40bf70:	mov    rcx,r15
  40bf73:	sub    rcx,rdx
  40bf76:	mov    QWORD PTR [rsp+0x10],rcx
  40bf7b:	mov    rdx,rcx
  40bf7e:	mov    rcx,QWORD PTR [rsp+0x8]
  40bf83:	sub    rcx,rax
  40bf86:	mov    rax,rcx
  40bf89:	jmp    40bea9 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x309>
  40bf8e:	xchg   ax,ax
  40bf90:	mov    rbx,QWORD PTR [rsp+0x28]
  40bf95:	xor    rbx,QWORD PTR fs:0x28
  40bf9e:	lea    rax,[r8+0x1]
  40bfa2:	jne    40c04c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  40bfa8:	add    rsp,0x38
  40bfac:	pop    rbx
  40bfad:	pop    rbp
  40bfae:	pop    r12
  40bfb0:	pop    r13
  40bfb2:	pop    r14
  40bfb4:	pop    r15
  40bfb6:	ret    
  40bfb7:	cmp    QWORD PTR [rsp+0x18],0x2
  40bfbd:	jbe    40bf60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  40bfbf:	movzx  edi,BYTE PTR [rsp+0x24]
  40bfc4:	movzx  esi,BYTE PTR [rsp+0x25]
  40bfc9:	shl    edi,0x2
  40bfcc:	shr    sil,0x4
  40bfd0:	or     esi,edi
  40bfd2:	mov    rdi,QWORD PTR [rsp+0x8]
  40bfd7:	add    rcx,0x4
  40bfdb:	mov    BYTE PTR [rdi],sil
  40bfde:	movzx  esi,BYTE PTR [rsp+0x25]
  40bfe3:	movzx  edi,BYTE PTR [rsp+0x26]
  40bfe8:	shl    esi,0x4
  40bfeb:	shr    dil,0x2
  40bfef:	or     esi,edi
  40bff1:	mov    rdi,QWORD PTR [rsp+0x8]
  40bff6:	mov    BYTE PTR [rdi+0x1],sil
  40bffa:	movzx  esi,BYTE PTR [rsp+0x26]
  40bfff:	add    rdi,0x3
  40c003:	shl    esi,0x6
  40c006:	or     sil,BYTE PTR [rsp+0x27]
  40c00b:	mov    BYTE PTR [rdi-0x1],sil
  40c00f:	lea    rsi,[r10-0x4]
  40c013:	mov    QWORD PTR [rsp+0x8],rdi
  40c018:	mov    QWORD PTR [rsp],rsi
  40c01c:	cmp    rdi,r11
  40c01f:	jne    40bcbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
  40c025:	mov    rcx,QWORD PTR [rsp+0x8]
  40c02a:	sub    rcx,rax
  40c02d:	mov    rax,rcx
  40c030:	mov    rcx,r15
  40c033:	sub    rcx,QWORD PTR [rsp]
  40c037:	mov    QWORD PTR [rsp+0x10],rcx
  40c03c:	mov    rdx,rcx
  40c03f:	jmp    40bea9 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x309>
  40c044:	mov    rdx,r15
  40c047:	jmp    40bf7e <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3de>
  40c04c:	call   403130 <__stack_chk_fail@plt>
  40c051:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40c05c:	nop    DWORD PTR [rax+0x0]

000000000040c060 <flatcc_json_parser_build_string@@Base>:
  40c060:	endbr64 
  40c064:	push   r15
  40c066:	mov    r15,rcx
  40c069:	push   r14
  40c06b:	push   r13
  40c06d:	push   r12
  40c06f:	push   rbp
  40c070:	mov    rbp,rdx
  40c073:	push   rbx
  40c074:	mov    rbx,rdi
  40c077:	sub    rsp,0x28
  40c07b:	mov    rax,QWORD PTR fs:0x28
  40c084:	mov    QWORD PTR [rsp+0x18],rax
  40c089:	xor    eax,eax
  40c08b:	cmp    rsi,rdx
  40c08e:	je     40c0f8 <flatcc_json_parser_build_string@@Base+0x98>
  40c090:	cmp    BYTE PTR [rsi],0x22
  40c093:	lea    r12,[rsi+0x1]
  40c097:	jne    40c0f8 <flatcc_json_parser_build_string@@Base+0x98>
  40c099:	mov    rdi,rbx
  40c09c:	mov    rdx,rbp
  40c09f:	mov    rsi,r12
  40c0a2:	call   409f00 <flatcc_json_parser_string_part@@Base>
  40c0a7:	mov    r14,rax
  40c0aa:	mov    rdi,QWORD PTR [rbx]
  40c0ad:	cmp    rbp,rax
  40c0b0:	je     40c0bb <flatcc_json_parser_build_string@@Base+0x5b>
  40c0b2:	cmp    BYTE PTR [rax],0x22
  40c0b5:	je     40c1e0 <flatcc_json_parser_build_string@@Base+0x180>
  40c0bb:	call   406580 <flatcc_builder_start_string@@Base>
  40c0c0:	test   eax,eax
  40c0c2:	je     40c110 <flatcc_json_parser_build_string@@Base+0xb0>
  40c0c4:	mov    DWORD PTR [r15],0x0
  40c0cb:	mov    rcx,QWORD PTR [rsp+0x18]
  40c0d0:	xor    rcx,QWORD PTR fs:0x28
  40c0d9:	mov    rax,r14
  40c0dc:	jne    40c218 <flatcc_json_parser_build_string@@Base+0x1b8>
  40c0e2:	add    rsp,0x28
  40c0e6:	pop    rbx
  40c0e7:	pop    rbp
  40c0e8:	pop    r12
  40c0ea:	pop    r13
  40c0ec:	pop    r14
  40c0ee:	pop    r15
  40c0f0:	ret    
  40c0f1:	nop    DWORD PTR [rax+0x0]
  40c0f8:	mov    ecx,0x10
  40c0fd:	mov    rdx,rbp
  40c100:	mov    rdi,rbx
  40c103:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40c108:	mov    r12,rax
  40c10b:	jmp    40c099 <flatcc_json_parser_build_string@@Base+0x39>
  40c10d:	nop    DWORD PTR [rax]
  40c110:	mov    rdx,r14
  40c113:	mov    rdi,QWORD PTR [rbx]
  40c116:	sub    rdx,r12
  40c119:	mov    rsi,r12
  40c11c:	call   4061f0 <flatcc_builder_append_string@@Base>
  40c121:	test   rax,rax
  40c124:	je     40c0c4 <flatcc_json_parser_build_string@@Base+0x64>
  40c126:	cmp    rbp,r14
  40c129:	je     40c1b6 <flatcc_json_parser_build_string@@Base+0x156>
  40c12f:	cmp    BYTE PTR [r14],0x22
  40c133:	je     40c200 <flatcc_json_parser_build_string@@Base+0x1a0>
  40c139:	lea    r13,[rsp+0x14]
  40c13e:	lea    rax,[r13+0x1]
  40c142:	mov    QWORD PTR [rsp+0x8],rax
  40c147:	jmp    40c174 <flatcc_json_parser_build_string@@Base+0x114>
  40c149:	nop    DWORD PTR [rax+0x0]
  40c150:	mov    rdx,rax
  40c153:	mov    rdi,QWORD PTR [rbx]
  40c156:	sub    rdx,r12
  40c159:	mov    rsi,r12
  40c15c:	call   4061f0 <flatcc_builder_append_string@@Base>
  40c161:	test   rax,rax
  40c164:	je     40c0c4 <flatcc_json_parser_build_string@@Base+0x64>
  40c16a:	cmp    BYTE PTR [r14],0x22
  40c16e:	je     40c200 <flatcc_json_parser_build_string@@Base+0x1a0>
  40c174:	mov    rdx,rbp
  40c177:	mov    rsi,r14
  40c17a:	mov    rdi,rbx
  40c17d:	mov    rcx,r13
  40c180:	call   40a6b0 <flatcc_json_parser_string_escape@@Base>
  40c185:	movsx  rdx,BYTE PTR [rsp+0x14]
  40c18b:	mov    rsi,QWORD PTR [rsp+0x8]
  40c190:	mov    rdi,QWORD PTR [rbx]
  40c193:	mov    r12,rax
  40c196:	call   4061f0 <flatcc_builder_append_string@@Base>
  40c19b:	test   rax,rax
  40c19e:	je     40c210 <flatcc_json_parser_build_string@@Base+0x1b0>
  40c1a0:	mov    rdx,rbp
  40c1a3:	mov    rsi,r12
  40c1a6:	mov    rdi,rbx
  40c1a9:	call   409f00 <flatcc_json_parser_string_part@@Base>
  40c1ae:	mov    r14,rax
  40c1b1:	cmp    rbp,rax
  40c1b4:	jne    40c150 <flatcc_json_parser_build_string@@Base+0xf0>
  40c1b6:	mov    rdi,QWORD PTR [rbx]
  40c1b9:	mov    r14,rbp
  40c1bc:	call   407e20 <flatcc_builder_end_string@@Base>
  40c1c1:	mov    DWORD PTR [r15],eax
  40c1c4:	mov    rsi,r14
  40c1c7:	mov    ecx,0x14
  40c1cc:	mov    rdx,rbp
  40c1cf:	mov    rdi,rbx
  40c1d2:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40c1d7:	mov    r14,rax
  40c1da:	jmp    40c0cb <flatcc_json_parser_build_string@@Base+0x6b>
  40c1df:	nop
  40c1e0:	mov    rdx,rax
  40c1e3:	sub    rdx,r12
  40c1e6:	mov    rsi,r12
  40c1e9:	call   407c90 <flatcc_builder_create_string@@Base>
  40c1ee:	mov    DWORD PTR [r15],eax
  40c1f1:	cmp    BYTE PTR [r14],0x22
  40c1f5:	jne    40c1c4 <flatcc_json_parser_build_string@@Base+0x164>
  40c1f7:	inc    r14
  40c1fa:	jmp    40c0cb <flatcc_json_parser_build_string@@Base+0x6b>
  40c1ff:	nop
  40c200:	mov    rdi,QWORD PTR [rbx]
  40c203:	call   407e20 <flatcc_builder_end_string@@Base>
  40c208:	mov    DWORD PTR [r15],eax
  40c20b:	jmp    40c1f1 <flatcc_json_parser_build_string@@Base+0x191>
  40c20d:	nop    DWORD PTR [rax]
  40c210:	mov    r14,r12
  40c213:	jmp    40c0c4 <flatcc_json_parser_build_string@@Base+0x64>
  40c218:	call   403130 <__stack_chk_fail@plt>
  40c21d:	nop    DWORD PTR [rax]

000000000040c220 <flatcc_json_parser_prepare_unions@@Base>:
  40c220:	endbr64 
  40c224:	push   r14
  40c226:	lea    rax,[rcx+rcx*4]
  40c22a:	mov    r14,rdx
  40c22d:	push   r13
  40c22f:	mov    r13,r8
  40c232:	push   r12
  40c234:	mov    r12,rsi
  40c237:	lea    rsi,[rax*8+0x10]
  40c23f:	push   rbp
  40c240:	mov    rbp,rdi
  40c243:	push   rbx
  40c244:	mov    rbx,rcx
  40c247:	mov    rdi,QWORD PTR [rdi]
  40c24a:	call   405350 <flatcc_builder_enter_user_frame@@Base>
  40c24f:	mov    QWORD PTR [r13+0x0],rax
  40c253:	test   rax,rax
  40c256:	je     40c278 <flatcc_json_parser_prepare_unions@@Base+0x58>
  40c258:	mov    rdi,QWORD PTR [rbp+0x0]
  40c25c:	mov    rsi,rax
  40c25f:	call   405480 <flatcc_builder_get_user_frame_ptr@@Base>
  40c264:	mov    QWORD PTR [rax],rbx
  40c267:	mov    rax,r12
  40c26a:	pop    rbx
  40c26b:	pop    rbp
  40c26c:	pop    r12
  40c26e:	pop    r13
  40c270:	pop    r14
  40c272:	ret    
  40c273:	nop    DWORD PTR [rax+rax*1+0x0]
  40c278:	pop    rbx
  40c279:	mov    rdi,rbp
  40c27c:	pop    rbp
  40c27d:	mov    rsi,r12
  40c280:	pop    r12
  40c282:	pop    r13
  40c284:	mov    rdx,r14
  40c287:	mov    ecx,0x21
  40c28c:	pop    r14
  40c28e:	jmp    409ed0 <flatcc_json_parser_set_error@@Base>
  40c293:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40c29e:	xchg   ax,ax

000000000040c2a0 <flatcc_json_parser_finalize_unions@@Base>:
  40c2a0:	endbr64 
  40c2a4:	push   r13
  40c2a6:	mov    r13,rdx
  40c2a9:	push   r12
  40c2ab:	mov    r12,rsi
  40c2ae:	mov    rsi,rcx
  40c2b1:	push   rbp
  40c2b2:	mov    rbp,rcx
  40c2b5:	push   rbx
  40c2b6:	mov    rbx,rdi
  40c2b9:	sub    rsp,0x8
  40c2bd:	mov    rdi,QWORD PTR [rdi]
  40c2c0:	call   405480 <flatcc_builder_get_user_frame_ptr@@Base>
  40c2c5:	cmp    QWORD PTR [rax+0x8],0x0
  40c2ca:	jne    40c2e8 <flatcc_json_parser_finalize_unions@@Base+0x48>
  40c2cc:	mov    rdi,QWORD PTR [rbx]
  40c2cf:	mov    rsi,rbp
  40c2d2:	call   405430 <flatcc_builder_exit_user_frame_at@@Base>
  40c2d7:	add    rsp,0x8
  40c2db:	pop    rbx
  40c2dc:	pop    rbp
  40c2dd:	mov    rax,r12
  40c2e0:	pop    r12
  40c2e2:	pop    r13
  40c2e4:	ret    
  40c2e5:	nop    DWORD PTR [rax]
  40c2e8:	mov    rsi,r12
  40c2eb:	mov    ecx,0x1b
  40c2f0:	mov    rdx,r13
  40c2f3:	mov    rdi,rbx
  40c2f6:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40c2fb:	mov    r12,rax
  40c2fe:	jmp    40c2cc <flatcc_json_parser_finalize_unions@@Base+0x2c>

000000000040c300 <flatcc_json_parser_union@@Base>:
  40c300:	endbr64 
  40c304:	push   r15
  40c306:	mov    r15,rcx
  40c309:	push   r14
  40c30b:	mov    r14d,r8d
  40c30e:	push   r13
  40c310:	push   r12
  40c312:	mov    r12,rsi
  40c315:	mov    rsi,r9
  40c318:	push   rbp
  40c319:	mov    rbp,rdx
  40c31c:	push   rbx
  40c31d:	mov    rbx,rdi
  40c320:	sub    rsp,0x18
  40c324:	mov    rdi,QWORD PTR [rdi]
  40c327:	mov    rax,QWORD PTR fs:0x28
  40c330:	mov    QWORD PTR [rsp+0x8],rax
  40c335:	xor    eax,eax
  40c337:	mov    r13,QWORD PTR [rsp+0x50]
  40c33c:	call   405480 <flatcc_builder_get_user_frame_ptr@@Base>
  40c341:	lea    rdx,[r15+r15*4]
  40c345:	lea    rdx,[rax+rdx*8]
  40c349:	cmp    QWORD PTR [rdx+0x10],0x0
  40c34e:	jne    40c3a0 <flatcc_json_parser_union@@Base+0xa0>
  40c350:	cmp    BYTE PTR [rdx+0x24],0x0
  40c354:	je     40c3c0 <flatcc_json_parser_union@@Base+0xc0>
  40c356:	movzx  ecx,BYTE PTR [rdx+0x25]
  40c35a:	mov    BYTE PTR [rsp],cl
  40c35d:	test   cl,cl
  40c35f:	je     40c410 <flatcc_json_parser_union@@Base+0x110>
  40c365:	dec    QWORD PTR [rax+0x8]
  40c369:	mov    rsi,r12
  40c36c:	lea    r8,[rsp+0x4]
  40c371:	mov    rdx,rbp
  40c374:	mov    rdi,rbx
  40c377:	call   r13
  40c37a:	mov    r12,rax
  40c37d:	cmp    rbp,rax
  40c380:	je     40c3e7 <flatcc_json_parser_union@@Base+0xe7>
  40c382:	mov    rdx,QWORD PTR [rsp]
  40c386:	mov    rdi,QWORD PTR [rbx]
  40c389:	movzx  esi,r14w
  40c38d:	call   408250 <flatcc_builder_table_add_union@@Base>
  40c392:	test   eax,eax
  40c394:	je     40c3e7 <flatcc_json_parser_union@@Base+0xe7>
  40c396:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c3a0:	mov    ecx,0x1c
  40c3a5:	mov    rsi,r12
  40c3a8:	mov    rdx,rbp
  40c3ab:	mov    rdi,rbx
  40c3ae:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40c3b3:	mov    r12,rax
  40c3b6:	jmp    40c3e7 <flatcc_json_parser_union@@Base+0xe7>
  40c3b8:	nop    DWORD PTR [rax+rax*1+0x0]
  40c3c0:	inc    QWORD PTR [rax+0x8]
  40c3c4:	mov    eax,DWORD PTR [rbx+0x18]
  40c3c7:	mov    rsi,r12
  40c3ca:	mov    DWORD PTR [rdx+0x20],eax
  40c3cd:	mov    rax,QWORD PTR [rbx+0x8]
  40c3d1:	mov    QWORD PTR [rdx+0x10],r12
  40c3d5:	mov    QWORD PTR [rdx+0x18],rax
  40c3d9:	mov    rdi,rbx
  40c3dc:	mov    rdx,rbp
  40c3df:	call   40ae50 <flatcc_json_parser_generic_json@@Base>
  40c3e4:	mov    r12,rax
  40c3e7:	mov    rsi,QWORD PTR [rsp+0x8]
  40c3ec:	xor    rsi,QWORD PTR fs:0x28
  40c3f5:	mov    rax,r12
  40c3f8:	jne    40c417 <flatcc_json_parser_union@@Base+0x117>
  40c3fa:	add    rsp,0x18
  40c3fe:	pop    rbx
  40c3ff:	pop    rbp
  40c400:	pop    r12
  40c402:	pop    r13
  40c404:	pop    r14
  40c406:	pop    r15
  40c408:	ret    
  40c409:	nop    DWORD PTR [rax+0x0]
  40c410:	mov    ecx,0x19
  40c415:	jmp    40c3a5 <flatcc_json_parser_union@@Base+0xa5>
  40c417:	call   403130 <__stack_chk_fail@plt>
  40c41c:	nop    DWORD PTR [rax+0x0]

000000000040c420 <flatcc_json_parser_union_type@@Base>:
  40c420:	endbr64 
  40c424:	push   r15
  40c426:	push   r14
  40c428:	mov    r14,rcx
  40c42b:	push   r13
  40c42d:	push   r12
  40c42f:	mov    r12,rsi
  40c432:	mov    rsi,r9
  40c435:	push   rbp
  40c436:	mov    rbp,rdx
  40c439:	push   rbx
  40c43a:	mov    rbx,rdi
  40c43d:	sub    rsp,0x48
  40c441:	mov    rax,QWORD PTR [rsp+0x80]
  40c449:	mov    DWORD PTR [rsp+0xc],r8d
  40c44e:	mov    QWORD PTR [rsp+0x10],rax
  40c453:	mov    rdi,QWORD PTR [rdi]
  40c456:	mov    r13,QWORD PTR [rsp+0x88]
  40c45e:	mov    rax,QWORD PTR fs:0x28
  40c467:	mov    QWORD PTR [rsp+0x38],rax
  40c46c:	xor    eax,eax
  40c46e:	call   405480 <flatcc_builder_get_user_frame_ptr@@Base>
  40c473:	mov    r15,rax
  40c476:	lea    rax,[r14+r14*4]
  40c47a:	lea    r9,[r15+rax*8+0x10]
  40c47f:	cmp    BYTE PTR [r9+0x14],0x0
  40c484:	jne    40c5b0 <flatcc_json_parser_union_type@@Base+0x190>
  40c48a:	mov    edx,0x1
  40c48f:	mov    QWORD PTR [rsp+0x30],0x0
  40c498:	mov    DWORD PTR [rsp+0x2c],0x0
  40c4a0:	mov    WORD PTR [r9+0x14],dx
  40c4a5:	cmp    r12,rbp
  40c4a8:	je     40c5a0 <flatcc_json_parser_union_type@@Base+0x180>
  40c4ae:	lea    rcx,[rsp+0x2c]
  40c4b3:	lea    r8,[rsp+0x30]
  40c4b8:	mov    rdx,rbp
  40c4bb:	mov    rsi,r12
  40c4be:	mov    rdi,rbx
  40c4c1:	mov    QWORD PTR [rsp+0x18],r9
  40c4c6:	call   40bae0 <flatcc_json_parser_integer@@Base>
  40c4cb:	cmp    r12,rax
  40c4ce:	mov    r14,rax
  40c4d1:	mov    r9,QWORD PTR [rsp+0x18]
  40c4d6:	jne    40c5d0 <flatcc_json_parser_union_type@@Base+0x1b0>
  40c4dc:	mov    rcx,QWORD PTR [rsp+0x10]
  40c4e1:	lea    r8,[r9+0x15]
  40c4e5:	mov    rsi,r14
  40c4e8:	mov    rdx,rbp
  40c4eb:	mov    rdi,rbx
  40c4ee:	mov    QWORD PTR [rsp+0x18],r9
  40c4f3:	call   40a030 <flatcc_json_parser_space_ext@@Base+0xe0>
  40c4f8:	mov    r9,QWORD PTR [rsp+0x18]
  40c4fd:	mov    r14,rax
  40c500:	mov    rsi,QWORD PTR [r9]
  40c503:	mov    rax,QWORD PTR [r15+0x8]
  40c507:	test   rsi,rsi
  40c50a:	je     40c600 <flatcc_json_parser_union_type@@Base+0x1e0>
  40c510:	test   rax,rax
  40c513:	je     40c683 <flatcc_json_parser_union_type@@Base+0x263>
  40c519:	dec    rax
  40c51c:	mov    QWORD PTR [r15+0x8],rax
  40c520:	mov    eax,DWORD PTR [r9+0x10]
  40c524:	mov    r15d,DWORD PTR [rbx+0x18]
  40c528:	mov    DWORD PTR [rbx+0x18],eax
  40c52b:	mov    rax,QWORD PTR [r9+0x8]
  40c52f:	mov    r12,QWORD PTR [rbx+0x8]
  40c533:	mov    QWORD PTR [rbx+0x8],rax
  40c537:	lea    r8,[rsp+0x34]
  40c53c:	mov    rdx,rbp
  40c53f:	movzx  ecx,BYTE PTR [r9+0x15]
  40c544:	mov    rdi,rbx
  40c547:	mov    BYTE PTR [rsp+0x30],cl
  40c54b:	call   r13
  40c54e:	cmp    rax,rbp
  40c551:	je     40c620 <flatcc_json_parser_union_type@@Base+0x200>
  40c557:	mov    rdx,QWORD PTR [rsp+0x30]
  40c55c:	movzx  esi,WORD PTR [rsp+0xc]
  40c561:	mov    rdi,QWORD PTR [rbx]
  40c564:	call   408250 <flatcc_builder_table_add_union@@Base>
  40c569:	test   eax,eax
  40c56b:	jne    40c630 <flatcc_json_parser_union_type@@Base+0x210>
  40c571:	mov    DWORD PTR [rbx+0x18],r15d
  40c575:	mov    QWORD PTR [rbx+0x8],r12
  40c579:	mov    rdx,QWORD PTR [rsp+0x38]
  40c57e:	xor    rdx,QWORD PTR fs:0x28
  40c587:	mov    rax,r14
  40c58a:	jne    40c67e <flatcc_json_parser_union_type@@Base+0x25e>
  40c590:	add    rsp,0x48
  40c594:	pop    rbx
  40c595:	pop    rbp
  40c596:	pop    r12
  40c598:	pop    r13
  40c59a:	pop    r14
  40c59c:	pop    r15
  40c59e:	ret    
  40c59f:	nop
  40c5a0:	mov    r14,rbp
  40c5a3:	jmp    40c4dc <flatcc_json_parser_union_type@@Base+0xbc>
  40c5a8:	nop    DWORD PTR [rax+rax*1+0x0]
  40c5b0:	mov    ecx,0x1c
  40c5b5:	mov    rdx,rbp
  40c5b8:	mov    rsi,r12
  40c5bb:	mov    rdi,rbx
  40c5be:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40c5c3:	mov    r14,rax
  40c5c6:	jmp    40c579 <flatcc_json_parser_union_type@@Base+0x159>
  40c5c8:	nop    DWORD PTR [rax+rax*1+0x0]
  40c5d0:	mov    eax,DWORD PTR [rsp+0x2c]
  40c5d4:	mov    ecx,0x8
  40c5d9:	test   eax,eax
  40c5db:	jne    40c65a <flatcc_json_parser_union_type@@Base+0x23a>
  40c5dd:	mov    rax,QWORD PTR [rsp+0x30]
  40c5e2:	cmp    rax,0xff
  40c5e8:	ja     40c650 <flatcc_json_parser_union_type@@Base+0x230>
  40c5ea:	mov    BYTE PTR [r9+0x15],al
  40c5ee:	mov    rsi,QWORD PTR [r9]
  40c5f1:	mov    rax,QWORD PTR [r15+0x8]
  40c5f5:	test   rsi,rsi
  40c5f8:	jne    40c510 <flatcc_json_parser_union_type@@Base+0xf0>
  40c5fe:	xchg   ax,ax
  40c600:	xor    edx,edx
  40c602:	cmp    BYTE PTR [r9+0x15],0x0
  40c607:	setne  dl
  40c60a:	add    rax,rdx
  40c60d:	mov    QWORD PTR [r15+0x8],rax
  40c611:	jmp    40c579 <flatcc_json_parser_union_type@@Base+0x159>
  40c616:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c620:	mov    r14,rbp
  40c623:	jmp    40c579 <flatcc_json_parser_union_type@@Base+0x159>
  40c628:	nop    DWORD PTR [rax+rax*1+0x0]
  40c630:	mov    rsi,r14
  40c633:	mov    ecx,0x1c
  40c638:	mov    rdx,rbp
  40c63b:	mov    rdi,rbx
  40c63e:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40c643:	mov    r14,rax
  40c646:	jmp    40c579 <flatcc_json_parser_union_type@@Base+0x159>
  40c64b:	nop    DWORD PTR [rax+rax*1+0x0]
  40c650:	mov    QWORD PTR [rsp+0x18],r9
  40c655:	mov    ecx,0x7
  40c65a:	mov    rsi,r14
  40c65d:	mov    rdx,rbp
  40c660:	mov    rdi,rbx
  40c663:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40c668:	mov    r14,rax
  40c66b:	mov    r9,QWORD PTR [rsp+0x18]
  40c670:	cmp    r12,rax
  40c673:	jne    40c500 <flatcc_json_parser_union_type@@Base+0xe0>
  40c679:	jmp    40c4dc <flatcc_json_parser_union_type@@Base+0xbc>
  40c67e:	call   403130 <__stack_chk_fail@plt>
  40c683:	lea    rcx,[rip+0x2126]        # 40e7b0 <flatcc_builder_padding_base@@Base+0x970>
  40c68a:	mov    edx,0x3c5
  40c68f:	lea    rsi,[rip+0x1b2a]        # 40e1c0 <flatcc_builder_padding_base@@Base+0x380>
  40c696:	lea    rdi,[rip+0x1e1e]        # 40e4bb <flatcc_builder_padding_base@@Base+0x67b>
  40c69d:	call   403140 <__assert_fail@plt>
  40c6a2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40c6ad:	nop    DWORD PTR [rax]

000000000040c6b0 <flatcc_json_parser_union_vector@@Base>:
  40c6b0:	endbr64 
  40c6b4:	push   r15
  40c6b6:	mov    r15,rsi
  40c6b9:	mov    rsi,r9
  40c6bc:	push   r14
  40c6be:	mov    r14d,r8d
  40c6c1:	push   r13
  40c6c3:	push   r12
  40c6c5:	mov    r12,rdx
  40c6c8:	push   rbp
  40c6c9:	mov    rbp,rcx
  40c6cc:	push   rbx
  40c6cd:	mov    rbx,rdi
  40c6d0:	sub    rsp,0x8
  40c6d4:	mov    rdi,QWORD PTR [rdi]
  40c6d7:	mov    r13,QWORD PTR [rsp+0x40]
  40c6dc:	call   405480 <flatcc_builder_get_user_frame_ptr@@Base>
  40c6e1:	lea    rdx,[rbp+rbp*4+0x0]
  40c6e6:	lea    rcx,[rax+rdx*8+0x10]
  40c6eb:	cmp    QWORD PTR [rcx],0x0
  40c6ef:	jne    40c768 <flatcc_json_parser_union_vector@@Base+0xb8>
  40c6f1:	cmp    BYTE PTR [rcx+0x14],0x0
  40c6f5:	mov    rdx,QWORD PTR [rax+0x8]
  40c6f9:	jne    40c730 <flatcc_json_parser_union_vector@@Base+0x80>
  40c6fb:	inc    rdx
  40c6fe:	mov    QWORD PTR [rax+0x8],rdx
  40c702:	mov    eax,DWORD PTR [rbx+0x18]
  40c705:	mov    rdi,rbx
  40c708:	mov    DWORD PTR [rcx+0x10],eax
  40c70b:	mov    rax,QWORD PTR [rbx+0x8]
  40c70f:	mov    QWORD PTR [rcx],r15
  40c712:	mov    QWORD PTR [rcx+0x8],rax
  40c716:	add    rsp,0x8
  40c71a:	mov    rdx,r12
  40c71d:	pop    rbx
  40c71e:	pop    rbp
  40c71f:	pop    r12
  40c721:	pop    r13
  40c723:	pop    r14
  40c725:	mov    rsi,r15
  40c728:	pop    r15
  40c72a:	jmp    40ae50 <flatcc_json_parser_generic_json@@Base>
  40c72f:	nop
  40c730:	dec    rdx
  40c733:	mov    QWORD PTR [rax+0x8],rdx
  40c737:	mov    r8d,DWORD PTR [rcx+0x18]
  40c73b:	mov    rcx,QWORD PTR [rcx+0x20]
  40c73f:	mov    QWORD PTR [rsp+0x40],r13
  40c744:	add    rsp,0x8
  40c748:	mov    rdi,rbx
  40c74b:	pop    rbx
  40c74c:	pop    rbp
  40c74d:	mov    rdx,r12
  40c750:	pop    r12
  40c752:	pop    r13
  40c754:	movzx  r9d,r14w
  40c758:	pop    r14
  40c75a:	mov    rsi,r15
  40c75d:	pop    r15
  40c75f:	jmp    40a290 <flatcc_json_parser_space_ext@@Base+0x340>
  40c764:	nop    DWORD PTR [rax+0x0]
  40c768:	add    rsp,0x8
  40c76c:	mov    rdi,rbx
  40c76f:	pop    rbx
  40c770:	pop    rbp
  40c771:	mov    rdx,r12
  40c774:	pop    r12
  40c776:	pop    r13
  40c778:	pop    r14
  40c77a:	mov    rsi,r15
  40c77d:	mov    ecx,0x1c
  40c782:	pop    r15
  40c784:	jmp    409ed0 <flatcc_json_parser_set_error@@Base>
  40c789:	nop    DWORD PTR [rax+0x0]

000000000040c790 <flatcc_json_parser_union_type_vector@@Base>:
  40c790:	endbr64 
  40c794:	push   r15
  40c796:	push   r14
  40c798:	push   r13
  40c79a:	mov    r13,rcx
  40c79d:	push   r12
  40c79f:	mov    r12,rsi
  40c7a2:	mov    rsi,r9
  40c7a5:	push   rbp
  40c7a6:	mov    rbp,rdi
  40c7a9:	push   rbx
  40c7aa:	mov    rbx,rdx
  40c7ad:	sub    rsp,0x78
  40c7b1:	mov    rax,QWORD PTR [rsp+0xb0]
  40c7b9:	mov    DWORD PTR [rsp+0x2c],r8d
  40c7be:	mov    QWORD PTR [rsp+0x18],rax
  40c7c3:	mov    rax,QWORD PTR [rsp+0xb8]
  40c7cb:	mov    QWORD PTR [rsp+0x30],r9
  40c7d0:	mov    QWORD PTR [rsp+0x40],rax
  40c7d5:	mov    rdi,QWORD PTR [rdi]
  40c7d8:	mov    r14,QWORD PTR [rsp+0xc0]
  40c7e0:	mov    rax,QWORD PTR fs:0x28
  40c7e9:	mov    QWORD PTR [rsp+0x68],rax
  40c7ee:	xor    eax,eax
  40c7f0:	call   405480 <flatcc_builder_get_user_frame_ptr@@Base>
  40c7f5:	lea    rdx,[r13+r13*4+0x0]
  40c7fa:	lea    rcx,[rdx*8+0x0]
  40c802:	lea    rax,[rax+rcx*1+0x10]
  40c807:	cmp    BYTE PTR [rax+0x14],0x0
  40c80b:	mov    QWORD PTR [rsp+0x38],rcx
  40c810:	mov    QWORD PTR [rsp+0x10],rax
  40c815:	mov    ecx,0x1c
  40c81a:	jne    40c846 <flatcc_json_parser_union_type_vector@@Base+0xb6>
  40c81c:	mov    rax,QWORD PTR [rsp+0x10]
  40c821:	mov    ecx,0xffffffff
  40c826:	mov    BYTE PTR [rax+0x14],0x1
  40c82a:	mov    edx,0x1
  40c82f:	mov    esi,0x1
  40c834:	mov    rdi,QWORD PTR [rbp+0x0]
  40c838:	call   4064a0 <flatcc_builder_start_vector@@Base>
  40c83d:	test   eax,eax
  40c83f:	je     40c880 <flatcc_json_parser_union_type_vector@@Base+0xf0>
  40c841:	mov    ecx,0x21
  40c846:	mov    rdx,rbx
  40c849:	mov    rsi,r12
  40c84c:	mov    rdi,rbp
  40c84f:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40c854:	mov    r15,rax
  40c857:	mov    rcx,QWORD PTR [rsp+0x68]
  40c85c:	xor    rcx,QWORD PTR fs:0x28
  40c865:	mov    rax,r15
  40c868:	jne    40cd67 <flatcc_json_parser_union_type_vector@@Base+0x5d7>
  40c86e:	add    rsp,0x78
  40c872:	pop    rbx
  40c873:	pop    rbp
  40c874:	pop    r12
  40c876:	pop    r13
  40c878:	pop    r14
  40c87a:	pop    r15
  40c87c:	ret    
  40c87d:	nop    DWORD PTR [rax]
  40c880:	cmp    r12,rbx
  40c883:	je     40c890 <flatcc_json_parser_union_type_vector@@Base+0x100>
  40c885:	cmp    BYTE PTR [r12],0x5b
  40c88a:	je     40c9c8 <flatcc_json_parser_union_type_vector@@Base+0x238>
  40c890:	mov    ecx,0x16
  40c895:	mov    rdx,rbx
  40c898:	mov    rsi,r12
  40c89b:	mov    rdi,rbp
  40c89e:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40c8a3:	mov    r15,rax
  40c8a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c8b0:	mov    rdi,QWORD PTR [rbp+0x0]
  40c8b4:	call   407450 <flatcc_builder_vector_count@@Base>
  40c8b9:	mov    r13,rax
  40c8bc:	mov    rax,QWORD PTR [rsp+0x10]
  40c8c1:	mov    edx,r13d
  40c8c4:	mov    DWORD PTR [rax+0x18],r13d
  40c8c8:	mov    rdi,QWORD PTR [rbp+0x0]
  40c8cc:	mov    rsi,rdx
  40c8cf:	mov    QWORD PTR [rsp],rdx
  40c8d3:	call   405350 <flatcc_builder_enter_user_frame@@Base>
  40c8d8:	mov    rdi,QWORD PTR [rbp+0x0]
  40c8dc:	mov    rsi,rax
  40c8df:	mov    r14,rax
  40c8e2:	call   405480 <flatcc_builder_get_user_frame_ptr@@Base>
  40c8e7:	mov    rdi,QWORD PTR [rbp+0x0]
  40c8eb:	mov    r12,rax
  40c8ee:	call   407460 <flatcc_builder_vector_edit@@Base>
  40c8f3:	mov    rdx,QWORD PTR [rsp]
  40c8f7:	mov    rdi,r12
  40c8fa:	mov    rsi,rax
  40c8fd:	call   403180 <memcpy@plt>
  40c902:	mov    rdi,QWORD PTR [rbp+0x0]
  40c906:	mov    r12,r15
  40c909:	call   407360 <flatcc_builder_end_vector@@Base>
  40c90e:	test   eax,eax
  40c910:	mov    DWORD PTR [rsp],eax
  40c913:	je     40c841 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  40c919:	movzx  esi,WORD PTR [rsp+0x2c]
  40c91e:	mov    rdi,QWORD PTR [rbp+0x0]
  40c922:	dec    esi
  40c924:	call   408110 <flatcc_builder_table_add_offset@@Base>
  40c929:	test   rax,rax
  40c92c:	je     40c841 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  40c932:	mov    edx,DWORD PTR [rsp]
  40c935:	mov    rsi,QWORD PTR [rsp+0x30]
  40c93a:	mov    DWORD PTR [rax],edx
  40c93c:	mov    rdi,QWORD PTR [rbp+0x0]
  40c940:	call   405480 <flatcc_builder_get_user_frame_ptr@@Base>
  40c945:	mov    rdx,QWORD PTR [rsp+0x38]
  40c94a:	lea    rdx,[rax+rdx*1+0x10]
  40c94f:	mov    rsi,QWORD PTR [rdx]
  40c952:	mov    QWORD PTR [rdx+0x20],r14
  40c956:	test   rsi,rsi
  40c959:	je     40cd56 <flatcc_json_parser_union_type_vector@@Base+0x5c6>
  40c95f:	mov    rcx,QWORD PTR [rax+0x8]
  40c963:	test   rcx,rcx
  40c966:	je     40cd6c <flatcc_json_parser_union_type_vector@@Base+0x5dc>
  40c96c:	dec    rcx
  40c96f:	mov    QWORD PTR [rax+0x8],rcx
  40c973:	mov    eax,DWORD PTR [rbp+0x18]
  40c976:	sub    rsp,0x8
  40c97a:	mov    DWORD PTR [rsp+0x8],eax
  40c97e:	mov    eax,DWORD PTR [rdx+0x10]
  40c981:	mov    r12,QWORD PTR [rbp+0x8]
  40c985:	mov    DWORD PTR [rbp+0x18],eax
  40c988:	mov    rax,QWORD PTR [rdx+0x8]
  40c98c:	push   QWORD PTR [rsp+0x48]
  40c990:	mov    QWORD PTR [rbp+0x8],rax
  40c994:	mov    rcx,r14
  40c997:	movzx  r9d,WORD PTR [rsp+0x3c]
  40c99d:	mov    rdx,rbx
  40c9a0:	mov    r8d,r13d
  40c9a3:	mov    rdi,rbp
  40c9a6:	call   40a290 <flatcc_json_parser_space_ext@@Base+0x340>
  40c9ab:	pop    rdx
  40c9ac:	pop    rcx
  40c9ad:	cmp    rax,rbx
  40c9b0:	je     40cd5f <flatcc_json_parser_union_type_vector@@Base+0x5cf>
  40c9b6:	mov    eax,DWORD PTR [rsp]
  40c9b9:	mov    QWORD PTR [rbp+0x8],r12
  40c9bd:	mov    DWORD PTR [rbp+0x18],eax
  40c9c0:	jmp    40c857 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  40c9c5:	nop    DWORD PTR [rax]
  40c9c8:	lea    rsi,[r12+0x1]
  40c9cd:	mov    rax,rbx
  40c9d0:	sub    rax,rsi
  40c9d3:	cmp    rax,0x1
  40c9d7:	jle    40c9f8 <flatcc_json_parser_union_type_vector@@Base+0x268>
  40c9d9:	cmp    BYTE PTR [r12+0x1],0x20
  40c9df:	jg     40cd46 <flatcc_json_parser_union_type_vector@@Base+0x5b6>
  40c9e5:	jne    40c9f8 <flatcc_json_parser_union_type_vector@@Base+0x268>
  40c9e7:	cmp    BYTE PTR [r12+0x2],0x20
  40c9ed:	jle    40c9f8 <flatcc_json_parser_union_type_vector@@Base+0x268>
  40c9ef:	add    r12,0x2
  40c9f3:	jmp    40ca06 <flatcc_json_parser_union_type_vector@@Base+0x276>
  40c9f5:	nop    DWORD PTR [rax]
  40c9f8:	mov    rdx,rbx
  40c9fb:	mov    rdi,rbp
  40c9fe:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40ca03:	mov    r12,rax
  40ca06:	cmp    rbx,r12
  40ca09:	je     40ca16 <flatcc_json_parser_union_type_vector@@Base+0x286>
  40ca0b:	cmp    BYTE PTR [r12],0x5d
  40ca10:	je     40cc3a <flatcc_json_parser_union_type_vector@@Base+0x4aa>
  40ca16:	lea    rax,[rsp+0x5b]
  40ca1b:	mov    QWORD PTR [rsp+0x48],rax
  40ca20:	lea    rax,[rsp+0x60]
  40ca25:	mov    QWORD PTR [rsp],rax
  40ca29:	lea    rax,[rsp+0x5c]
  40ca2e:	mov    QWORD PTR [rsp+0x8],rax
  40ca33:	nop    DWORD PTR [rax+rax*1+0x0]
  40ca38:	mov    rdi,QWORD PTR [rbp+0x0]
  40ca3c:	mov    esi,0x1
  40ca41:	call   405df0 <flatcc_builder_extend_vector@@Base>
  40ca46:	mov    r13,rax
  40ca49:	test   rax,rax
  40ca4c:	je     40c841 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  40ca52:	mov    QWORD PTR [rsp+0x60],0x0
  40ca5b:	mov    DWORD PTR [rsp+0x5c],0x0
  40ca63:	mov    BYTE PTR [rsp+0x5b],0x0
  40ca68:	cmp    rbx,r12
  40ca6b:	je     40cb60 <flatcc_json_parser_union_type_vector@@Base+0x3d0>
  40ca71:	mov    r8,QWORD PTR [rsp]
  40ca75:	mov    rcx,QWORD PTR [rsp+0x8]
  40ca7a:	mov    rdx,rbx
  40ca7d:	mov    rsi,r12
  40ca80:	mov    rdi,rbp
  40ca83:	call   40bae0 <flatcc_json_parser_integer@@Base>
  40ca88:	mov    r9,rax
  40ca8b:	cmp    r12,rax
  40ca8e:	jne    40cb70 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
  40ca94:	mov    r8,QWORD PTR [rsp+0x48]
  40ca99:	mov    rcx,QWORD PTR [rsp+0x18]
  40ca9e:	mov    rsi,r9
  40caa1:	mov    rdx,rbx
  40caa4:	mov    rdi,rbp
  40caa7:	mov    QWORD PTR [rsp+0x20],r9
  40caac:	call   40a030 <flatcc_json_parser_space_ext@@Base+0xe0>
  40cab1:	mov    r9,QWORD PTR [rsp+0x20]
  40cab6:	mov    r15,rax
  40cab9:	cmp    rax,r9
  40cabc:	je     40cd4e <flatcc_json_parser_union_type_vector@@Base+0x5be>
  40cac2:	cmp    rbx,rax
  40cac5:	je     40cd4e <flatcc_json_parser_union_type_vector@@Base+0x5be>
  40cacb:	movzx  edi,BYTE PTR [rsp+0x5b]
  40cad0:	call   r14
  40cad3:	test   eax,eax
  40cad5:	jne    40cb50 <flatcc_json_parser_union_type_vector@@Base+0x3c0>
  40cad7:	test   BYTE PTR [rbp+0x10],0x1
  40cadb:	je     40ccf0 <flatcc_json_parser_union_type_vector@@Base+0x560>
  40cae1:	mov    BYTE PTR [rsp+0x5b],0x0
  40cae6:	xor    eax,eax
  40cae8:	mov    BYTE PTR [r13+0x0],al
  40caec:	mov    rax,rbx
  40caef:	sub    rax,r15
  40caf2:	cmp    rax,0x1
  40caf6:	jle    40cb04 <flatcc_json_parser_union_type_vector@@Base+0x374>
  40caf8:	cmp    BYTE PTR [r15],0x20
  40cafc:	jg     40cb15 <flatcc_json_parser_union_type_vector@@Base+0x385>
  40cafe:	je     40cbe0 <flatcc_json_parser_union_type_vector@@Base+0x450>
  40cb04:	mov    rsi,r15
  40cb07:	mov    rdx,rbx
  40cb0a:	mov    rdi,rbp
  40cb0d:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40cb12:	mov    r15,rax
  40cb15:	cmp    rbx,r15
  40cb18:	je     40c8b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  40cb1e:	movzx  eax,BYTE PTR [r15]
  40cb22:	cmp    al,0x2c
  40cb24:	je     40cbf8 <flatcc_json_parser_union_type_vector@@Base+0x468>
  40cb2a:	cmp    al,0x5d
  40cb2c:	je     40cba8 <flatcc_json_parser_union_type_vector@@Base+0x418>
  40cb2e:	mov    rsi,r15
  40cb31:	mov    ecx,0x9
  40cb36:	mov    rdx,rbx
  40cb39:	mov    rdi,rbp
  40cb3c:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40cb41:	mov    r15,rax
  40cb44:	jmp    40c8b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  40cb49:	nop    DWORD PTR [rax+0x0]
  40cb50:	movzx  eax,BYTE PTR [rsp+0x5b]
  40cb55:	jmp    40cae8 <flatcc_json_parser_union_type_vector@@Base+0x358>
  40cb57:	nop    WORD PTR [rax+rax*1+0x0]
  40cb60:	mov    r9,rbx
  40cb63:	jmp    40ca94 <flatcc_json_parser_union_type_vector@@Base+0x304>
  40cb68:	nop    DWORD PTR [rax+rax*1+0x0]
  40cb70:	mov    esi,DWORD PTR [rsp+0x5c]
  40cb74:	mov    ecx,0x8
  40cb79:	test   esi,esi
  40cb7b:	jne    40cc85 <flatcc_json_parser_union_type_vector@@Base+0x4f5>
  40cb81:	mov    rax,QWORD PTR [rsp+0x60]
  40cb86:	cmp    rax,0xff
  40cb8c:	ja     40cc80 <flatcc_json_parser_union_type_vector@@Base+0x4f0>
  40cb92:	movzx  edi,al
  40cb95:	mov    BYTE PTR [rsp+0x5b],al
  40cb99:	mov    r15,r9
  40cb9c:	jmp    40cad0 <flatcc_json_parser_union_type_vector@@Base+0x340>
  40cba1:	nop    DWORD PTR [rax+0x0]
  40cba8:	lea    rsi,[r15+0x1]
  40cbac:	mov    rax,rbx
  40cbaf:	sub    rax,rsi
  40cbb2:	cmp    rax,0x1
  40cbb6:	jle    40cbc9 <flatcc_json_parser_union_type_vector@@Base+0x439>
  40cbb8:	cmp    BYTE PTR [r15+0x1],0x20
  40cbbd:	jg     40ccb0 <flatcc_json_parser_union_type_vector@@Base+0x520>
  40cbc3:	je     40ccc0 <flatcc_json_parser_union_type_vector@@Base+0x530>
  40cbc9:	mov    rdx,rbx
  40cbcc:	mov    rdi,rbp
  40cbcf:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40cbd4:	mov    r15,rax
  40cbd7:	jmp    40c8b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  40cbdc:	nop    DWORD PTR [rax+0x0]
  40cbe0:	cmp    BYTE PTR [r15+0x1],0x20
  40cbe5:	jle    40cb04 <flatcc_json_parser_union_type_vector@@Base+0x374>
  40cbeb:	inc    r15
  40cbee:	jmp    40cb15 <flatcc_json_parser_union_type_vector@@Base+0x385>
  40cbf3:	nop    DWORD PTR [rax+rax*1+0x0]
  40cbf8:	lea    r12,[r15+0x1]
  40cbfc:	mov    rax,rbx
  40cbff:	sub    rax,r12
  40cc02:	cmp    rax,0x1
  40cc06:	jle    40cc15 <flatcc_json_parser_union_type_vector@@Base+0x485>
  40cc08:	cmp    BYTE PTR [r15+0x1],0x20
  40cc0d:	jg     40cc26 <flatcc_json_parser_union_type_vector@@Base+0x496>
  40cc0f:	je     40ccd8 <flatcc_json_parser_union_type_vector@@Base+0x548>
  40cc15:	mov    rsi,r12
  40cc18:	mov    rdx,rbx
  40cc1b:	mov    rdi,rbp
  40cc1e:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40cc23:	mov    r12,rax
  40cc26:	cmp    rbx,r12
  40cc29:	je     40cd10 <flatcc_json_parser_union_type_vector@@Base+0x580>
  40cc2f:	cmp    BYTE PTR [r12],0x5d
  40cc34:	jne    40ca38 <flatcc_json_parser_union_type_vector@@Base+0x2a8>
  40cc3a:	lea    r15,[r12+0x1]
  40cc3f:	mov    rax,rbx
  40cc42:	sub    rax,r15
  40cc45:	cmp    rax,0x1
  40cc49:	jle    40cd30 <flatcc_json_parser_union_type_vector@@Base+0x5a0>
  40cc4f:	cmp    BYTE PTR [r12+0x1],0x20
  40cc55:	jg     40c8b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  40cc5b:	jne    40cd30 <flatcc_json_parser_union_type_vector@@Base+0x5a0>
  40cc61:	cmp    BYTE PTR [r12+0x2],0x20
  40cc67:	jle    40cd30 <flatcc_json_parser_union_type_vector@@Base+0x5a0>
  40cc6d:	lea    r15,[r12+0x2]
  40cc72:	jmp    40c8b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  40cc77:	nop    WORD PTR [rax+rax*1+0x0]
  40cc80:	mov    ecx,0x7
  40cc85:	mov    rdx,rbx
  40cc88:	mov    rsi,r9
  40cc8b:	mov    rdi,rbp
  40cc8e:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40cc93:	mov    r15,rax
  40cc96:	cmp    r12,rax
  40cc99:	jne    40cacb <flatcc_json_parser_union_type_vector@@Base+0x33b>
  40cc9f:	mov    r9,r12
  40cca2:	jmp    40ca94 <flatcc_json_parser_union_type_vector@@Base+0x304>
  40cca7:	nop    WORD PTR [rax+rax*1+0x0]
  40ccb0:	mov    r15,rsi
  40ccb3:	jmp    40c8b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  40ccb8:	nop    DWORD PTR [rax+rax*1+0x0]
  40ccc0:	cmp    BYTE PTR [r15+0x2],0x20
  40ccc5:	jle    40cbc9 <flatcc_json_parser_union_type_vector@@Base+0x439>
  40cccb:	add    r15,0x2
  40cccf:	jmp    40c8b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  40ccd4:	nop    DWORD PTR [rax+0x0]
  40ccd8:	cmp    BYTE PTR [r15+0x2],0x20
  40ccdd:	jle    40cc15 <flatcc_json_parser_union_type_vector@@Base+0x485>
  40cce3:	lea    r12,[r15+0x2]
  40cce7:	jmp    40cc26 <flatcc_json_parser_union_type_vector@@Base+0x496>
  40ccec:	nop    DWORD PTR [rax+0x0]
  40ccf0:	mov    rsi,r15
  40ccf3:	mov    ecx,0xf
  40ccf8:	mov    rdx,rbx
  40ccfb:	mov    rdi,rbp
  40ccfe:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40cd03:	mov    r15,rax
  40cd06:	jmp    40c857 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  40cd0b:	nop    DWORD PTR [rax+rax*1+0x0]
  40cd10:	mov    ecx,0x9
  40cd15:	mov    rdx,rbx
  40cd18:	mov    rsi,rbx
  40cd1b:	mov    rdi,rbp
  40cd1e:	call   409ed0 <flatcc_json_parser_set_error@@Base>
  40cd23:	mov    r15,rax
  40cd26:	jmp    40c8b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  40cd2b:	nop    DWORD PTR [rax+rax*1+0x0]
  40cd30:	mov    rsi,r15
  40cd33:	mov    rdx,rbx
  40cd36:	mov    rdi,rbp
  40cd39:	call   409f50 <flatcc_json_parser_space_ext@@Base>
  40cd3e:	mov    r15,rax
  40cd41:	jmp    40c8b0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  40cd46:	mov    r12,rsi
  40cd49:	jmp    40ca06 <flatcc_json_parser_union_type_vector@@Base+0x276>
  40cd4e:	mov    r12,r15
  40cd51:	jmp    40c841 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  40cd56:	inc    QWORD PTR [rax+0x8]
  40cd5a:	jmp    40c857 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  40cd5f:	mov    r15,rbx
  40cd62:	jmp    40c857 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  40cd67:	call   403130 <__stack_chk_fail@plt>
  40cd6c:	lea    rcx,[rip+0x1a0d]        # 40e780 <flatcc_builder_padding_base@@Base+0x940>
  40cd73:	mov    edx,0x462
  40cd78:	lea    rsi,[rip+0x1441]        # 40e1c0 <flatcc_builder_padding_base@@Base+0x380>
  40cd7f:	lea    rdi,[rip+0x1735]        # 40e4bb <flatcc_builder_padding_base@@Base+0x67b>
  40cd86:	call   403140 <__assert_fail@plt>
  40cd8b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040cd90 <flatcc_json_parser_table_as_root@@Base>:
  40cd90:	endbr64 
  40cd94:	push   r14
  40cd96:	vpxor  xmm0,xmm0,xmm0
  40cd9a:	push   r13
  40cd9c:	mov    r13,rdi
  40cd9f:	push   r12
  40cda1:	push   rbp
  40cda2:	mov    rbp,rdx
  40cda5:	lea    r12,[rbp+rcx*1+0x0]
  40cdaa:	push   rbx
  40cdab:	mov    rbx,rsi
  40cdae:	sub    rsp,0x60
  40cdb2:	mov    rax,QWORD PTR fs:0x28
  40cdbb:	mov    QWORD PTR [rsp+0x58],rax
  40cdc0:	xor    eax,eax
  40cdc2:	mov    eax,r8d
  40cdc5:	sar    eax,1
  40cdc7:	and    eax,0x2
  40cdca:	lea    rdx,[rsp+0x10]
  40cdcf:	test   rsi,rsi
  40cdd2:	cmove  rbx,rdx
  40cdd6:	mov    ecx,eax
  40cdd8:	vmovups XMMWORD PTR [rbx+0x24],xmm0
  40cddd:	vmovups XMMWORD PTR [rbx+0x34],xmm0
  40cde2:	vmovups XMMWORD PTR [rbx+0x14],xmm0
  40cde7:	mov    DWORD PTR [rbx+0x44],0x0
  40cdee:	mov    QWORD PTR [rbx],rdi
  40cdf1:	mov    QWORD PTR [rbx+0x8],rbp
  40cdf5:	mov    DWORD PTR [rbx+0x18],0x1
  40cdfc:	mov    DWORD PTR [rbx+0x10],r8d
  40ce00:	mov    QWORD PTR [rbx+0x28],rbp
  40ce04:	mov    QWORD PTR [rbx+0x30],r12
  40ce08:	mov    QWORD PTR [rbx+0x38],rbp
  40ce0c:	xor    edx,edx
  40ce0e:	mov    rsi,r9
  40ce11:	mov    r14,QWORD PTR [rsp+0x90]
  40ce19:	call   405a20 <flatcc_builder_start_buffer@@Base>
  40ce1e:	test   eax,eax
  40ce20:	jne    40ce80 <flatcc_json_parser_table_as_root@@Base+0xf0>
  40ce22:	mov    rdx,r12
  40ce25:	lea    rcx,[rsp+0xc]
  40ce2a:	mov    rsi,rbp
  40ce2d:	mov    rdi,rbx
  40ce30:	call   r14
  40ce33:	mov    r12d,DWORD PTR [rbx+0x20]
  40ce37:	test   r12d,r12d
  40ce3a:	je     40ce60 <flatcc_json_parser_table_as_root@@Base+0xd0>
  40ce3c:	mov    rsi,QWORD PTR [rsp+0x58]
  40ce41:	xor    rsi,QWORD PTR fs:0x28
  40ce4a:	mov    eax,r12d
  40ce4d:	jne    40ce88 <flatcc_json_parser_table_as_root@@Base+0xf8>
  40ce4f:	add    rsp,0x60
  40ce53:	pop    rbx
  40ce54:	pop    rbp
  40ce55:	pop    r12
  40ce57:	pop    r13
  40ce59:	pop    r14
  40ce5b:	ret    
  40ce5c:	nop    DWORD PTR [rax+0x0]
  40ce60:	mov    esi,DWORD PTR [rsp+0xc]
  40ce64:	mov    rdi,r13
  40ce67:	call   405b00 <flatcc_builder_end_buffer@@Base>
  40ce6c:	test   eax,eax
  40ce6e:	je     40ce80 <flatcc_json_parser_table_as_root@@Base+0xf0>
  40ce70:	mov    QWORD PTR [rbx+0x40],rbp
  40ce74:	jmp    40ce3c <flatcc_json_parser_table_as_root@@Base+0xac>
  40ce76:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ce80:	mov    r12d,0xffffffff
  40ce86:	jmp    40ce3c <flatcc_json_parser_table_as_root@@Base+0xac>
  40ce88:	call   403130 <__stack_chk_fail@plt>
  40ce8d:	nop    DWORD PTR [rax]

000000000040ce90 <flatcc_json_parser_struct_as_root@@Base>:
  40ce90:	endbr64 
  40ce94:	jmp    40cd90 <flatcc_json_parser_table_as_root@@Base>
  40ce99:	nop    DWORD PTR [rax+0x0]

000000000040cea0 <__libc_csu_init@@Base>:
  40cea0:	endbr64 
  40cea4:	push   r15
  40cea6:	lea    r15,[rip+0x5f5b]        # 412e08 <flatcc_builder_padding_base@@Base+0x4fc8>
  40cead:	push   r14
  40ceaf:	mov    r14,rdx
  40ceb2:	push   r13
  40ceb4:	mov    r13,rsi
  40ceb7:	push   r12
  40ceb9:	mov    r12d,edi
  40cebc:	push   rbp
  40cebd:	lea    rbp,[rip+0x5f4c]        # 412e10 <flatcc_builder_padding_base@@Base+0x4fd0>
  40cec4:	push   rbx
  40cec5:	sub    rbp,r15
  40cec8:	sub    rsp,0x8
  40cecc:	call   403000 <free@plt-0x100>
  40ced1:	sar    rbp,0x3
  40ced5:	je     40cef6 <__libc_csu_init@@Base+0x56>
  40ced7:	xor    ebx,ebx
  40ced9:	nop    DWORD PTR [rax+0x0]
  40cee0:	mov    rdx,r14
  40cee3:	mov    rsi,r13
  40cee6:	mov    edi,r12d
  40cee9:	call   QWORD PTR [r15+rbx*8]
  40ceed:	add    rbx,0x1
  40cef1:	cmp    rbp,rbx
  40cef4:	jne    40cee0 <__libc_csu_init@@Base+0x40>
  40cef6:	add    rsp,0x8
  40cefa:	pop    rbx
  40cefb:	pop    rbp
  40cefc:	pop    r12
  40cefe:	pop    r13
  40cf00:	pop    r14
  40cf02:	pop    r15
  40cf04:	ret    
  40cf05:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000040cf10 <__libc_csu_fini@@Base>:
  40cf10:	endbr64 
  40cf14:	ret    

Disassembly of section .fini:

000000000040cf18 <.fini>:
  40cf18:	endbr64 
  40cf1c:	sub    rsp,0x8
  40cf20:	add    rsp,0x8
  40cf24:	ret    
