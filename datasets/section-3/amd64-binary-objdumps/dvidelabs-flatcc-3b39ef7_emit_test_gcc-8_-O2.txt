
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0x9fe1]        # 40cff0 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0xea>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <.plt>:
  403020:	push   QWORD PTR [rip+0x9fe2]        # 40d008 <flatcc_builder_padding_base@@Base+0x3188>
  403026:	bnd jmp QWORD PTR [rip+0x9fe3]        # 40d010 <flatcc_builder_padding_base@@Base+0x3190>
  40302d:	nop    DWORD PTR [rax]
  403030:	endbr64 
  403034:	push   0x0
  403039:	bnd jmp 403020 <free@plt-0xe0>
  40303f:	nop
  403040:	endbr64 
  403044:	push   0x1
  403049:	bnd jmp 403020 <free@plt-0xe0>
  40304f:	nop
  403050:	endbr64 
  403054:	push   0x2
  403059:	bnd jmp 403020 <free@plt-0xe0>
  40305f:	nop
  403060:	endbr64 
  403064:	push   0x3
  403069:	bnd jmp 403020 <free@plt-0xe0>
  40306f:	nop
  403070:	endbr64 
  403074:	push   0x4
  403079:	bnd jmp 403020 <free@plt-0xe0>
  40307f:	nop
  403080:	endbr64 
  403084:	push   0x5
  403089:	bnd jmp 403020 <free@plt-0xe0>
  40308f:	nop
  403090:	endbr64 
  403094:	push   0x6
  403099:	bnd jmp 403020 <free@plt-0xe0>
  40309f:	nop
  4030a0:	endbr64 
  4030a4:	push   0x7
  4030a9:	bnd jmp 403020 <free@plt-0xe0>
  4030af:	nop
  4030b0:	endbr64 
  4030b4:	push   0x8
  4030b9:	bnd jmp 403020 <free@plt-0xe0>
  4030bf:	nop
  4030c0:	endbr64 
  4030c4:	push   0x9
  4030c9:	bnd jmp 403020 <free@plt-0xe0>
  4030cf:	nop
  4030d0:	endbr64 
  4030d4:	push   0xa
  4030d9:	bnd jmp 403020 <free@plt-0xe0>
  4030df:	nop
  4030e0:	endbr64 
  4030e4:	push   0xb
  4030e9:	bnd jmp 403020 <free@plt-0xe0>
  4030ef:	nop
  4030f0:	endbr64 
  4030f4:	push   0xc
  4030f9:	bnd jmp 403020 <free@plt-0xe0>
  4030ff:	nop

Disassembly of section .plt.sec:

0000000000403100 <free@plt>:
  403100:	endbr64 
  403104:	bnd jmp QWORD PTR [rip+0x9f0d]        # 40d018 <free@GLIBC_2.2.5>
  40310b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403110 <strlen@plt>:
  403110:	endbr64 
  403114:	bnd jmp QWORD PTR [rip+0x9f05]        # 40d020 <strlen@GLIBC_2.2.5>
  40311b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403120 <__stack_chk_fail@plt>:
  403120:	endbr64 
  403124:	bnd jmp QWORD PTR [rip+0x9efd]        # 40d028 <__stack_chk_fail@GLIBC_2.4>
  40312b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403130 <__assert_fail@plt>:
  403130:	endbr64 
  403134:	bnd jmp QWORD PTR [rip+0x9ef5]        # 40d030 <__assert_fail@GLIBC_2.2.5>
  40313b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403140 <memset@plt>:
  403140:	endbr64 
  403144:	bnd jmp QWORD PTR [rip+0x9eed]        # 40d038 <memset@GLIBC_2.2.5>
  40314b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403150 <memchr@plt>:
  403150:	endbr64 
  403154:	bnd jmp QWORD PTR [rip+0x9ee5]        # 40d040 <memchr@GLIBC_2.2.5>
  40315b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403160 <memcmp@plt>:
  403160:	endbr64 
  403164:	bnd jmp QWORD PTR [rip+0x9edd]        # 40d048 <memcmp@GLIBC_2.2.5>
  40316b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403170 <memcpy@plt>:
  403170:	endbr64 
  403174:	bnd jmp QWORD PTR [rip+0x9ed5]        # 40d050 <memcpy@GLIBC_2.14>
  40317b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403180 <malloc@plt>:
  403180:	endbr64 
  403184:	bnd jmp QWORD PTR [rip+0x9ecd]        # 40d058 <malloc@GLIBC_2.2.5>
  40318b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403190 <realloc@plt>:
  403190:	endbr64 
  403194:	bnd jmp QWORD PTR [rip+0x9ec5]        # 40d060 <realloc@GLIBC_2.2.5>
  40319b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031a0 <__printf_chk@plt>:
  4031a0:	endbr64 
  4031a4:	bnd jmp QWORD PTR [rip+0x9ebd]        # 40d068 <__printf_chk@GLIBC_2.3.4>
  4031ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031b0 <__fprintf_chk@plt>:
  4031b0:	endbr64 
  4031b4:	bnd jmp QWORD PTR [rip+0x9eb5]        # 40d070 <__fprintf_chk@GLIBC_2.3.4>
  4031bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031c0 <posix_memalign@plt>:
  4031c0:	endbr64 
  4031c4:	bnd jmp QWORD PTR [rip+0x9ead]        # 40d078 <posix_memalign@GLIBC_2.2.5>
  4031cb:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

00000000004031d0 <main@@Base>:
  4031d0:	endbr64 
  4031d4:	push   rbx
  4031d5:	xor    eax,eax
  4031d7:	call   4033b0 <debug_test@@Base>
  4031dc:	mov    ebx,eax
  4031de:	xor    eax,eax
  4031e0:	call   403540 <emit_test@@Base>
  4031e5:	or     eax,ebx
  4031e7:	pop    rbx
  4031e8:	ret    
  4031e9:	nop    DWORD PTR [rax+0x0]

00000000004031f0 <_start@@Base>:
  4031f0:	endbr64 
  4031f4:	xor    ebp,ebp
  4031f6:	mov    r9,rdx
  4031f9:	pop    rsi
  4031fa:	mov    rdx,rsp
  4031fd:	and    rsp,0xfffffffffffffff0
  403201:	push   rax
  403202:	push   rsp
  403203:	mov    r8,0x408210
  40320a:	mov    rcx,0x4081a0
  403211:	mov    rdi,0x4031d0
  403218:	call   QWORD PTR [rip+0x9dca]        # 40cfe8 <__libc_start_main@GLIBC_2.2.5>
  40321e:	hlt    
  40321f:	nop
  403220:	endbr64 
  403224:	ret    
  403225:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40322f:	nop
  403230:	mov    eax,0x40d090
  403235:	cmp    rax,0x40d090
  40323b:	je     403250 <_start@@Base+0x60>
  40323d:	mov    eax,0x0
  403242:	test   rax,rax
  403245:	je     403250 <_start@@Base+0x60>
  403247:	mov    edi,0x40d090
  40324c:	jmp    rax
  40324e:	xchg   ax,ax
  403250:	ret    
  403251:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40325c:	nop    DWORD PTR [rax+0x0]
  403260:	mov    esi,0x40d090
  403265:	sub    rsi,0x40d090
  40326c:	sar    rsi,0x3
  403270:	mov    rax,rsi
  403273:	shr    rax,0x3f
  403277:	add    rsi,rax
  40327a:	sar    rsi,1
  40327d:	je     403290 <_start@@Base+0xa0>
  40327f:	mov    eax,0x0
  403284:	test   rax,rax
  403287:	je     403290 <_start@@Base+0xa0>
  403289:	mov    edi,0x40d090
  40328e:	jmp    rax
  403290:	ret    
  403291:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40329c:	nop    DWORD PTR [rax+0x0]
  4032a0:	endbr64 
  4032a4:	cmp    BYTE PTR [rip+0x9de5],0x0        # 40d090 <__bss_start@@Base>
  4032ab:	jne    4032c0 <_start@@Base+0xd0>
  4032ad:	push   rbp
  4032ae:	mov    rbp,rsp
  4032b1:	call   403230 <_start@@Base+0x40>
  4032b6:	mov    BYTE PTR [rip+0x9dd3],0x1        # 40d090 <__bss_start@@Base>
  4032bd:	pop    rbp
  4032be:	ret    
  4032bf:	nop
  4032c0:	ret    
  4032c1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4032cc:	nop    DWORD PTR [rax+0x0]
  4032d0:	endbr64 
  4032d4:	jmp    403260 <_start@@Base+0x70>
  4032d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004032e0 <dbg_emitter@@Base>:
  4032e0:	endbr64 
  4032e4:	push   r14
  4032e6:	movsxd rcx,ecx
  4032e9:	xor    eax,eax
  4032eb:	push   r13
  4032ed:	mov    edi,0x1
  4032f2:	mov    r13,rsi
  4032f5:	push   r12
  4032f7:	lea    rsi,[rip+0x5d0a]        # 409008 <_IO_stdin_used@@Base+0x8>
  4032fe:	mov    r12d,edx
  403301:	push   rbp
  403302:	mov    rbp,rcx
  403305:	push   rbx
  403306:	call   4031a0 <__printf_chk@plt>
  40330b:	test   r12d,r12d
  40330e:	jle    4033a2 <dbg_emitter@@Base+0xc2>
  403314:	lea    eax,[r12-0x1]
  403319:	shl    rax,0x4
  40331d:	lea    rbx,[r13+0x8]
  403321:	lea    r14,[r13+rax*1+0x18]
  403326:	mov    r12,0x409e80
  40332d:	lea    r13,[rip+0x5d0c]        # 409040 <_IO_stdin_used@@Base+0x40>
  403334:	jmp    403350 <dbg_emitter@@Base+0x70>
  403336:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403340:	test   rax,rax
  403343:	je     403380 <dbg_emitter@@Base+0xa0>
  403345:	add    rbx,0x10
  403349:	add    ebp,ecx
  40334b:	cmp    r14,rbx
  40334e:	je     4033a2 <dbg_emitter@@Base+0xc2>
  403350:	mov    rax,QWORD PTR [rbx-0x8]
  403354:	mov    rcx,QWORD PTR [rbx]
  403357:	cmp    rax,r12
  40335a:	jne    403340 <dbg_emitter@@Base+0x60>
  40335c:	movsxd rdx,ebp
  40335f:	mov    rsi,r13
  403362:	mov    edi,0x1
  403367:	xor    eax,eax
  403369:	call   4031a0 <__printf_chk@plt>
  40336e:	mov    rax,QWORD PTR [rbx-0x8]
  403372:	mov    rcx,QWORD PTR [rbx]
  403375:	test   rax,rax
  403378:	jne    403345 <dbg_emitter@@Base+0x65>
  40337a:	nop    WORD PTR [rax+rax*1+0x0]
  403380:	movsxd rdx,ebp
  403383:	lea    rsi,[rip+0x5cde]        # 409068 <_IO_stdin_used@@Base+0x68>
  40338a:	mov    edi,0x1
  40338f:	call   4031a0 <__printf_chk@plt>
  403394:	mov    rcx,QWORD PTR [rbx]
  403397:	add    rbx,0x10
  40339b:	add    ebp,ecx
  40339d:	cmp    r14,rbx
  4033a0:	jne    403350 <dbg_emitter@@Base+0x70>
  4033a2:	pop    rbx
  4033a3:	pop    rbp
  4033a4:	pop    r12
  4033a6:	pop    r13
  4033a8:	xor    eax,eax
  4033aa:	pop    r14
  4033ac:	ret    
  4033ad:	nop    DWORD PTR [rax]

00000000004033b0 <debug_test@@Base>:
  4033b0:	endbr64 
  4033b4:	push   r12
  4033b6:	vpxor  xmm0,xmm0,xmm0
  4033ba:	lea    rsi,[rip+0x5cd7]        # 409098 <_IO_stdin_used@@Base+0x98>
  4033c1:	push   rbp
  4033c2:	mov    edi,0x1
  4033c7:	push   rbx
  4033c8:	sub    rsp,0x1c0
  4033cf:	mov    rax,QWORD PTR fs:0x28
  4033d8:	mov    QWORD PTR [rsp+0x1b8],rax
  4033e0:	xor    eax,eax
  4033e2:	lea    rbx,[rsp+0x30]
  4033e7:	vmovaps XMMWORD PTR [rsp],xmm0
  4033ec:	vmovaps XMMWORD PTR [rsp+0x10],xmm0
  4033f2:	mov    QWORD PTR [rsp+0x20],0x0
  4033fb:	call   4031a0 <__printf_chk@plt>
  403400:	mov    rsi,0x4032e0
  403407:	xor    r8d,r8d
  40340a:	xor    ecx,ecx
  40340c:	xor    edx,edx
  40340e:	mov    rdi,rbx
  403411:	call   404210 <flatcc_builder_custom_init@@Base>
  403416:	mov    rsi,rsp
  403419:	mov    ecx,0x4
  40341e:	mov    edx,0xa
  403423:	mov    rdi,rbx
  403426:	mov    r9d,0x3fffffff
  40342c:	mov    r8d,0x4
  403432:	call   4063f0 <flatcc_builder_create_vector@@Base>
  403437:	xor    ecx,ecx
  403439:	xor    edx,edx
  40343b:	xor    esi,esi
  40343d:	mov    rdi,rbx
  403440:	mov    r12d,eax
  403443:	call   404c40 <flatcc_builder_start_buffer@@Base>
  403448:	test   eax,eax
  40344a:	je     403480 <debug_test@@Base+0xd0>
  40344c:	mov    rdi,rbx
  40344f:	call   404450 <flatcc_builder_clear@@Base>
  403454:	xor    eax,eax
  403456:	mov    rcx,QWORD PTR [rsp+0x1b8]
  40345e:	xor    rcx,QWORD PTR fs:0x28
  403467:	jne    40351a <debug_test@@Base+0x16a>
  40346d:	add    rsp,0x1c0
  403474:	pop    rbx
  403475:	pop    rbp
  403476:	pop    r12
  403478:	ret    
  403479:	nop    DWORD PTR [rax+0x0]
  403480:	mov    esi,0x3
  403485:	mov    rdi,rbx
  403488:	mov    ebp,eax
  40348a:	call   4058e0 <flatcc_builder_start_table@@Base>
  40348f:	test   eax,eax
  403491:	jne    40350b <debug_test@@Base+0x15b>
  403493:	xor    esi,esi
  403495:	mov    ecx,0x8
  40349a:	mov    edx,0x8
  40349f:	mov    rdi,rbx
  4034a2:	call   407160 <flatcc_builder_table_add@@Base>
  4034a7:	test   rax,rax
  4034aa:	je     40350b <debug_test@@Base+0x15b>
  4034ac:	mov    QWORD PTR [rax],0x2a
  4034b3:	test   r12d,r12d
  4034b6:	je     40350b <debug_test@@Base+0x15b>
  4034b8:	mov    esi,0x2
  4034bd:	mov    rdi,rbx
  4034c0:	call   407330 <flatcc_builder_table_add_offset@@Base>
  4034c5:	test   rax,rax
  4034c8:	je     40350b <debug_test@@Base+0x15b>
  4034ca:	mov    DWORD PTR [rax],r12d
  4034cd:	mov    ecx,0x1
  4034d2:	mov    edx,0x1
  4034d7:	mov    esi,0x1
  4034dc:	mov    rdi,rbx
  4034df:	call   407160 <flatcc_builder_table_add@@Base>
  4034e4:	test   rax,rax
  4034e7:	je     40350b <debug_test@@Base+0x15b>
  4034e9:	mov    BYTE PTR [rax],0x1
  4034ec:	xor    edx,edx
  4034ee:	lea    rsi,[rip+0x5e8d]        # 409382 <_IO_stdin_used@@Base+0x382>
  4034f5:	mov    rdi,rbx
  4034f8:	call   4061d0 <flatcc_builder_check_required@@Base>
  4034fd:	test   eax,eax
  4034ff:	je     40351f <debug_test@@Base+0x16f>
  403501:	mov    rdi,rbx
  403504:	call   406260 <flatcc_builder_end_table@@Base>
  403509:	mov    ebp,eax
  40350b:	mov    esi,ebp
  40350d:	mov    rdi,rbx
  403510:	call   404d20 <flatcc_builder_end_buffer@@Base>
  403515:	jmp    40344c <debug_test@@Base+0x9c>
  40351a:	call   403120 <__stack_chk_fail@plt>
  40351f:	lea    rcx,[rip+0x5e52]        # 409378 <_IO_stdin_used@@Base+0x378>
  403526:	mov    edx,0x15
  40352b:	lea    rsi,[rip+0x5bbe]        # 4090f0 <_IO_stdin_used@@Base+0xf0>
  403532:	lea    rdi,[rip+0x5c2f]        # 409168 <_IO_stdin_used@@Base+0x168>
  403539:	call   403130 <__assert_fail@plt>
  40353e:	xchg   ax,ax

0000000000403540 <emit_test@@Base>:
  403540:	endbr64 
  403544:	push   r15
  403546:	push   r14
  403548:	push   r13
  40354a:	push   r12
  40354c:	push   rbp
  40354d:	push   rbx
  40354e:	sub    rsp,0x238
  403555:	mov    rax,QWORD PTR fs:0x28
  40355e:	mov    QWORD PTR [rsp+0x228],rax
  403566:	xor    eax,eax
  403568:	mov    rax,QWORD PTR [rip+0x5dd9]        # 409348 <_IO_stdin_used@@Base+0x348>
  40356f:	vmovdqu xmm1,XMMWORD PTR [rip+0x5da1]        # 409318 <_IO_stdin_used@@Base+0x318>
  403577:	mov    QWORD PTR [rsp+0x210],rax
  40357f:	movzx  eax,WORD PTR [rip+0x5dca]        # 409350 <_IO_stdin_used@@Base+0x350>
  403586:	vmovdqu xmm2,XMMWORD PTR [rip+0x5d9a]        # 409328 <_IO_stdin_used@@Base+0x328>
  40358e:	mov    WORD PTR [rsp+0x218],ax
  403596:	movzx  eax,BYTE PTR [rip+0x5db5]        # 409352 <_IO_stdin_used@@Base+0x352>
  40359d:	vmovdqu xmm3,XMMWORD PTR [rip+0x5d93]        # 409338 <_IO_stdin_used@@Base+0x338>
  4035a5:	lea    rbx,[rsp+0x30]
  4035aa:	mov    BYTE PTR [rsp+0x21a],al
  4035b1:	movabs rax,0x3f8ccccd3f800000
  4035bb:	mov    QWORD PTR [rsp+0x20],rax
  4035c0:	mov    rdi,rbx
  4035c3:	movabs rax,0x3fa666663f99999a
  4035cd:	vmovaps XMMWORD PTR [rsp+0x1e0],xmm1
  4035d6:	vmovaps XMMWORD PTR [rsp+0x1f0],xmm2
  4035df:	vmovaps XMMWORD PTR [rsp+0x200],xmm3
  4035e8:	mov    QWORD PTR [rsp+0x28],rax
  4035ed:	call   404290 <flatcc_builder_init@@Base>
  4035f2:	mov    rdi,rbx
  4035f5:	call   407ab0 <flatcc_builder_get_emit_context@@Base>
  4035fa:	lea    rsi,[rsp+0x20]
  4035ff:	mov    ecx,0x4
  403604:	mov    edx,0x4
  403609:	mov    rdi,rbx
  40360c:	mov    r9d,0x3fffffff
  403612:	mov    r8d,0x4
  403618:	mov    rbp,rax
  40361b:	call   4063f0 <flatcc_builder_create_vector@@Base>
  403620:	xor    ecx,ecx
  403622:	xor    edx,edx
  403624:	xor    esi,esi
  403626:	mov    rdi,rbx
  403629:	mov    r13d,eax
  40362c:	call   404c40 <flatcc_builder_start_buffer@@Base>
  403631:	test   eax,eax
  403633:	je     403678 <emit_test@@Base+0x138>
  403635:	mov    rcx,QWORD PTR [rbp+0x0]
  403639:	mov    eax,0xffffffff
  40363e:	cmp    QWORD PTR [rbp+0x8],rcx
  403642:	je     403727 <emit_test@@Base+0x1e7>
  403648:	mov    rdi,QWORD PTR [rsp+0x228]
  403650:	xor    rdi,QWORD PTR fs:0x28
  403659:	jne    403a22 <emit_test@@Base+0x4e2>
  40365f:	add    rsp,0x238
  403666:	pop    rbx
  403667:	pop    rbp
  403668:	pop    r12
  40366a:	pop    r13
  40366c:	pop    r14
  40366e:	pop    r15
  403670:	ret    
  403671:	nop    DWORD PTR [rax+0x0]
  403678:	mov    esi,0x3
  40367d:	mov    rdi,rbx
  403680:	mov    r12d,eax
  403683:	call   4058e0 <flatcc_builder_start_table@@Base>
  403688:	test   eax,eax
  40368a:	jne    403709 <emit_test@@Base+0x1c9>
  40368c:	xor    esi,esi
  40368e:	mov    ecx,0x8
  403693:	mov    edx,0x8
  403698:	mov    rdi,rbx
  40369b:	call   407160 <flatcc_builder_table_add@@Base>
  4036a0:	test   rax,rax
  4036a3:	je     403709 <emit_test@@Base+0x1c9>
  4036a5:	mov    QWORD PTR [rax],0x2a
  4036ac:	test   r13d,r13d
  4036af:	je     403709 <emit_test@@Base+0x1c9>
  4036b1:	mov    esi,0x2
  4036b6:	mov    rdi,rbx
  4036b9:	call   407330 <flatcc_builder_table_add_offset@@Base>
  4036be:	test   rax,rax
  4036c1:	je     403709 <emit_test@@Base+0x1c9>
  4036c3:	mov    DWORD PTR [rax],r13d
  4036c6:	mov    ecx,0x1
  4036cb:	mov    edx,0x1
  4036d0:	mov    esi,0x1
  4036d5:	mov    rdi,rbx
  4036d8:	call   407160 <flatcc_builder_table_add@@Base>
  4036dd:	test   rax,rax
  4036e0:	je     403709 <emit_test@@Base+0x1c9>
  4036e2:	mov    BYTE PTR [rax],0x1
  4036e5:	xor    edx,edx
  4036e7:	lea    rsi,[rip+0x5c94]        # 409382 <_IO_stdin_used@@Base+0x382>
  4036ee:	mov    rdi,rbx
  4036f1:	call   4061d0 <flatcc_builder_check_required@@Base>
  4036f6:	test   eax,eax
  4036f8:	je     403a46 <emit_test@@Base+0x506>
  4036fe:	mov    rdi,rbx
  403701:	call   406260 <flatcc_builder_end_table@@Base>
  403706:	mov    r12d,eax
  403709:	mov    esi,r12d
  40370c:	mov    rdi,rbx
  40370f:	call   404d20 <flatcc_builder_end_buffer@@Base>
  403714:	mov    rcx,QWORD PTR [rbp+0x0]
  403718:	mov    eax,0xffffffff
  40371d:	cmp    QWORD PTR [rbp+0x8],rcx
  403721:	jne    403648 <emit_test@@Base+0x108>
  403727:	mov    r15,QWORD PTR [rbp+0x30]
  40372b:	mov    r12,QWORD PTR [rbp+0x10]
  40372f:	mov    QWORD PTR [rsp],r15
  403733:	test   r12,r12
  403736:	je     403648 <emit_test@@Base+0x108>
  40373c:	mov    rdi,rbx
  40373f:	call   407730 <flatcc_builder_get_buffer_size@@Base>
  403744:	cmp    rax,r15
  403747:	jne    403a27 <emit_test@@Base+0x4e7>
  40374d:	mov    rbp,QWORD PTR [rip+0x98a4]        # 40cff8 <stderr@GLIBC_2.2.5>
  403754:	mov    r15,QWORD PTR [rsp]
  403758:	mov    rdi,QWORD PTR [rbp+0x0]
  40375c:	mov    ecx,r15d
  40375f:	lea    rdx,[rip+0x5b78]        # 4092de <_IO_stdin_used@@Base+0x2de>
  403766:	mov    esi,0x1
  40376b:	xor    eax,eax
  40376d:	call   4031b0 <__fprintf_chk@plt>
  403772:	mov    r13,QWORD PTR [rbp+0x0]
  403776:	lea    rcx,[rip+0x5b72]        # 4092ef <_IO_stdin_used@@Base+0x2ef>
  40377d:	lea    rdx,[rip+0x5b75]        # 4092f9 <_IO_stdin_used@@Base+0x2f9>
  403784:	mov    esi,0x1
  403789:	mov    rdi,r13
  40378c:	xor    eax,eax
  40378e:	call   4031b0 <__fprintf_chk@plt>
  403793:	mov    r14d,r15d
  403796:	test   r15d,r15d
  403799:	je     403a10 <emit_test@@Base+0x4d0>
  40379f:	mov    rax,QWORD PTR [rsp]
  4037a3:	xor    r15d,r15d
  4037a6:	dec    eax
  4037a8:	lea    rsi,[rsp+0x1c0]
  4037b0:	mov    QWORD PTR [rsp+0x18],rbx
  4037b5:	mov    QWORD PTR [rsp+0x8],rsi
  4037ba:	mov    rbx,r15
  4037bd:	mov    DWORD PTR [rsp+0x14],r14d
  4037c2:	mov    r15,rax
  4037c5:	jmp    40383e <emit_test@@Base+0x2fe>
  4037c7:	nop    WORD PTR [rax+rax*1+0x0]
  4037d0:	test   ebx,ebx
  4037d2:	jne    403868 <emit_test@@Base+0x328>
  4037d8:	mov    ecx,r14d
  4037db:	lea    rdx,[rip+0x5b22]        # 409304 <_IO_stdin_used@@Base+0x304>
  4037e2:	mov    esi,0x1
  4037e7:	mov    rdi,r13
  4037ea:	xor    eax,eax
  4037ec:	call   4031b0 <__fprintf_chk@plt>
  4037f1:	movzx  ecx,BYTE PTR [r12+rbx*1]
  4037f6:	lea    rdx,[rip+0x5b0f]        # 40930c <_IO_stdin_used@@Base+0x30c>
  4037fd:	xor    eax,eax
  4037ff:	mov    esi,0x1
  403804:	mov    rdi,r13
  403807:	call   4031b0 <__fprintf_chk@plt>
  40380c:	movzx  eax,BYTE PTR [r12+rbx*1]
  403811:	mov    ecx,0x2e
  403816:	lea    edx,[rax-0x20]
  403819:	cmp    dl,0x5f
  40381c:	cmovae eax,ecx
  40381f:	mov    edx,ebp
  403821:	inc    ebp
  403823:	mov    BYTE PTR [rsp+rdx*1+0x1c0],al
  40382a:	mov    BYTE PTR [rsp+rbp*1+0x1c0],0x0
  403832:	lea    rax,[rbx+0x1]
  403836:	cmp    r15,rbx
  403839:	je     403890 <emit_test@@Base+0x350>
  40383b:	mov    rbx,rax
  40383e:	mov    ebp,ebx
  403840:	mov    r14d,ebx
  403843:	and    ebp,0xf
  403846:	je     4037d0 <emit_test@@Base+0x290>
  403848:	test   bl,0x7
  40384b:	jne    4037f1 <emit_test@@Base+0x2b1>
  40384d:	lea    rdx,[rip+0x5ac0]        # 409314 <_IO_stdin_used@@Base+0x314>
  403854:	mov    esi,0x1
  403859:	mov    rdi,r13
  40385c:	xor    eax,eax
  40385e:	call   4031b0 <__fprintf_chk@plt>
  403863:	jmp    4037f1 <emit_test@@Base+0x2b1>
  403865:	nop    DWORD PTR [rax]
  403868:	mov    rcx,QWORD PTR [rsp+0x8]
  40386d:	lea    rdx,[rip+0x5a8a]        # 4092fe <_IO_stdin_used@@Base+0x2fe>
  403874:	mov    esi,0x1
  403879:	mov    rdi,r13
  40387c:	xor    eax,eax
  40387e:	call   4031b0 <__fprintf_chk@plt>
  403883:	jmp    4037d8 <emit_test@@Base+0x298>
  403888:	nop    DWORD PTR [rax+rax*1+0x0]
  403890:	mov    r14d,DWORD PTR [rsp+0x14]
  403895:	mov    rbx,QWORD PTR [rsp+0x18]
  40389a:	test   BYTE PTR [rsp],0xf
  40389e:	je     4038cb <emit_test@@Base+0x38b>
  4038a0:	lea    rbp,[rip+0x5a6b]        # 409312 <_IO_stdin_used@@Base+0x312>
  4038a7:	nop    WORD PTR [rax+rax*1+0x0]
  4038b0:	mov    rdx,rbp
  4038b3:	mov    esi,0x1
  4038b8:	mov    rdi,r13
  4038bb:	xor    eax,eax
  4038bd:	inc    r14d
  4038c0:	call   4031b0 <__fprintf_chk@plt>
  4038c5:	test   r14b,0xf
  4038c9:	jne    4038b0 <emit_test@@Base+0x370>
  4038cb:	mov    rcx,QWORD PTR [rsp+0x8]
  4038d0:	xor    eax,eax
  4038d2:	lea    rdx,[rip+0x5a25]        # 4092fe <_IO_stdin_used@@Base+0x2fe>
  4038d9:	mov    esi,0x1
  4038de:	mov    rdi,r13
  4038e1:	call   4031b0 <__fprintf_chk@plt>
  4038e6:	cmp    QWORD PTR [rsp],0x3a
  4038eb:	jne    403a84 <emit_test@@Base+0x544>
  4038f1:	lea    rsi,[rsp+0x1e0]
  4038f9:	mov    edx,0x3a
  4038fe:	mov    rdi,r12
  403901:	call   403160 <memcmp@plt>
  403906:	test   eax,eax
  403908:	jne    403a65 <emit_test@@Base+0x525>
  40390e:	mov    edx,DWORD PTR [r12]
  403912:	add    r12,rdx
  403915:	je     403aa3 <emit_test@@Base+0x563>
  40391b:	movsxd rdx,DWORD PTR [r12]
  40391f:	mov    rcx,r12
  403922:	sub    rcx,rdx
  403925:	movzx  edx,WORD PTR [rcx]
  403928:	cmp    dx,0x5
  40392c:	ja     403950 <emit_test@@Base+0x410>
  40392e:	lea    rcx,[rip+0x5a33]        # 409368 <_IO_stdin_used@@Base+0x368>
  403935:	mov    edx,0x70
  40393a:	lea    rsi,[rip+0x5897]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403941:	lea    rdi,[rip+0x5dd7]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403948:	call   403130 <__assert_fail@plt>
  40394d:	nop    DWORD PTR [rax]
  403950:	movzx  esi,WORD PTR [rcx+0x4]
  403954:	test   si,si
  403957:	je     40392e <emit_test@@Base+0x3ee>
  403959:	cmp    QWORD PTR [r12+rsi*1],0x2a
  40395e:	jne    40392e <emit_test@@Base+0x3ee>
  403960:	cmp    dx,0x7
  403964:	ja     403988 <emit_test@@Base+0x448>
  403966:	lea    rcx,[rip+0x59fb]        # 409368 <_IO_stdin_used@@Base+0x368>
  40396d:	mov    edx,0x71
  403972:	lea    rsi,[rip+0x585f]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403979:	lea    rdi,[rip+0x5d9f]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403980:	call   403130 <__assert_fail@plt>
  403985:	nop    DWORD PTR [rax]
  403988:	movzx  esi,WORD PTR [rcx+0x6]
  40398c:	test   si,si
  40398f:	je     403966 <emit_test@@Base+0x426>
  403991:	cmp    BYTE PTR [r12+rsi*1],0x1
  403996:	jne    403966 <emit_test@@Base+0x426>
  403998:	cmp    dx,0x9
  40399c:	jbe    4039f0 <emit_test@@Base+0x4b0>
  40399e:	movzx  edx,WORD PTR [rcx+0x8]
  4039a2:	test   dx,dx
  4039a5:	je     4039f0 <emit_test@@Base+0x4b0>
  4039a7:	add    r12,rdx
  4039aa:	mov    edx,DWORD PTR [r12]
  4039ae:	lea    rdx,[r12+rdx*1+0x4]
  4039b3:	test   rdx,rdx
  4039b6:	je     4039f0 <emit_test@@Base+0x4b0>
  4039b8:	cmp    DWORD PTR [rdx-0x4],0x4
  4039bc:	jne    4039f0 <emit_test@@Base+0x4b0>
  4039be:	vmovss xmm0,DWORD PTR [rdx+0x8]
  4039c3:	vucomiss xmm0,DWORD PTR [rip+0x59b9]        # 409384 <_IO_stdin_used@@Base+0x384>
  4039cb:	jp     403ac2 <emit_test@@Base+0x582>
  4039d1:	jne    403ac2 <emit_test@@Base+0x582>
  4039d7:	mov    rdi,rbx
  4039da:	mov    DWORD PTR [rsp],eax
  4039dd:	call   404450 <flatcc_builder_clear@@Base>
  4039e2:	mov    eax,DWORD PTR [rsp]
  4039e5:	jmp    403648 <emit_test@@Base+0x108>
  4039ea:	nop    WORD PTR [rax+rax*1+0x0]
  4039f0:	lea    rcx,[rip+0x5971]        # 409368 <_IO_stdin_used@@Base+0x368>
  4039f7:	mov    edx,0x72
  4039fc:	lea    rsi,[rip+0x57d5]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403a03:	lea    rdi,[rip+0x5d15]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403a0a:	call   403130 <__assert_fail@plt>
  403a0f:	nop
  403a10:	lea    rax,[rsp+0x1c0]
  403a18:	mov    QWORD PTR [rsp+0x8],rax
  403a1d:	jmp    4038cb <emit_test@@Base+0x38b>
  403a22:	call   403120 <__stack_chk_fail@plt>
  403a27:	lea    rcx,[rip+0x593a]        # 409368 <_IO_stdin_used@@Base+0x368>
  403a2e:	mov    edx,0x65
  403a33:	lea    rsi,[rip+0x579e]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403a3a:	lea    rdi,[rip+0x5cde]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403a41:	call   403130 <__assert_fail@plt>
  403a46:	lea    rcx,[rip+0x592b]        # 409378 <_IO_stdin_used@@Base+0x378>
  403a4d:	mov    edx,0x15
  403a52:	lea    rsi,[rip+0x5697]        # 4090f0 <_IO_stdin_used@@Base+0xf0>
  403a59:	lea    rdi,[rip+0x5708]        # 409168 <_IO_stdin_used@@Base+0x168>
  403a60:	call   403130 <__assert_fail@plt>
  403a65:	lea    rcx,[rip+0x58fc]        # 409368 <_IO_stdin_used@@Base+0x368>
  403a6c:	mov    edx,0x6c
  403a71:	lea    rsi,[rip+0x5760]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403a78:	lea    rdi,[rip+0x5ca0]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403a7f:	call   403130 <__assert_fail@plt>
  403a84:	lea    rcx,[rip+0x58dd]        # 409368 <_IO_stdin_used@@Base+0x368>
  403a8b:	mov    edx,0x6a
  403a90:	lea    rsi,[rip+0x5741]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403a97:	lea    rdi,[rip+0x5c81]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403a9e:	call   403130 <__assert_fail@plt>
  403aa3:	lea    rcx,[rip+0x58ae]        # 409358 <_IO_stdin_used@@Base+0x358>
  403aaa:	mov    edx,0x29
  403aaf:	lea    rsi,[rip+0x578a]        # 409240 <_IO_stdin_used@@Base+0x240>
  403ab6:	lea    rdi,[rip+0x57fb]        # 4092b8 <_IO_stdin_used@@Base+0x2b8>
  403abd:	call   403130 <__assert_fail@plt>
  403ac2:	lea    rcx,[rip+0x589f]        # 409368 <_IO_stdin_used@@Base+0x368>
  403ac9:	mov    edx,0x73
  403ace:	lea    rsi,[rip+0x5703]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403ad5:	lea    rdi,[rip+0x5c43]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403adc:	call   403130 <__assert_fail@plt>
  403ae1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403aeb:	nop    DWORD PTR [rax+rax*1+0x0]
  403af0:	push   rbp
  403af1:	mov    ebp,edx
  403af3:	mov    r8d,0x1
  403af9:	push   rbx
  403afa:	mov    rbx,rdi
  403afd:	mov    ecx,0x1
  403b02:	sub    rsp,0x8
  403b06:	mov    edx,DWORD PTR [rdi+0x28]
  403b09:	add    rdx,rsi
  403b0c:	lea    rsi,[rdi+0x68]
  403b10:	mov    rdi,QWORD PTR [rdi+0x40]
  403b14:	call   QWORD PTR [rbx+0x50]
  403b17:	test   eax,eax
  403b19:	jne    403b48 <emit_test@@Base+0x608>
  403b1b:	mov    edx,DWORD PTR [rbx+0x28]
  403b1e:	mov    rcx,rdx
  403b21:	add    rdx,QWORD PTR [rbx+0x68]
  403b25:	mov    QWORD PTR [rbx+0x18],rdx
  403b29:	mov    edx,DWORD PTR [rbx+0x70]
  403b2c:	sub    edx,ecx
  403b2e:	cmp    ebp,edx
  403b30:	cmovb  edx,ebp
  403b33:	mov    DWORD PTR [rbx+0x24],edx
  403b36:	mov    rdx,QWORD PTR [rbx+0x30]
  403b3a:	mov    DWORD PTR [rdx+0x4],ebp
  403b3d:	add    rsp,0x8
  403b41:	pop    rbx
  403b42:	pop    rbp
  403b43:	ret    
  403b44:	nop    DWORD PTR [rax+0x0]
  403b48:	mov    eax,0xffffffff
  403b4d:	jmp    403b3d <emit_test@@Base+0x5fd>
  403b4f:	nop

0000000000403b50 <flatcc_builder_default_alloc@@Base>:
  403b50:	endbr64 
  403b54:	push   r13
  403b56:	push   r12
  403b58:	push   rbp
  403b59:	mov    rbp,rsi
  403b5c:	push   rbx
  403b5d:	sub    rsp,0x18
  403b61:	test   rdx,rdx
  403b64:	je     403c28 <flatcc_builder_default_alloc@@Base+0xd8>
  403b6a:	mov    r13d,ecx
  403b6d:	cmp    r8d,0x4
  403b71:	je     403c60 <flatcc_builder_default_alloc@@Base+0x110>
  403b77:	jle    403bf0 <flatcc_builder_default_alloc@@Base+0xa0>
  403b79:	mov    rbx,rdx
  403b7c:	cmp    r8d,0x5
  403b80:	je     403ba8 <flatcc_builder_default_alloc@@Base+0x58>
  403b82:	cmp    r8d,0x7
  403b86:	mov    ebx,0x40
  403b8b:	mov    eax,0x20
  403b90:	cmovne rbx,rax
  403b94:	cmp    rbx,rdx
  403b97:	jae    403ba8 <flatcc_builder_default_alloc@@Base+0x58>
  403b99:	nop    DWORD PTR [rax+0x0]
  403ba0:	add    rbx,rbx
  403ba3:	cmp    rdx,rbx
  403ba6:	ja     403ba0 <flatcc_builder_default_alloc@@Base+0x50>
  403ba8:	mov    rax,QWORD PTR [rbp+0x8]
  403bac:	cmp    rdx,rax
  403baf:	ja     403bbe <flatcc_builder_default_alloc@@Base+0x6e>
  403bb1:	shr    rax,1
  403bb4:	mov    rdx,rax
  403bb7:	xor    eax,eax
  403bb9:	cmp    rdx,rbx
  403bbc:	jae    403be5 <flatcc_builder_default_alloc@@Base+0x95>
  403bbe:	mov    rdi,QWORD PTR [rbp+0x0]
  403bc2:	mov    rsi,rbx
  403bc5:	call   403190 <realloc@plt>
  403bca:	mov    r12,rax
  403bcd:	test   rax,rax
  403bd0:	je     403c6a <flatcc_builder_default_alloc@@Base+0x11a>
  403bd6:	test   r13d,r13d
  403bd9:	jne    403c08 <flatcc_builder_default_alloc@@Base+0xb8>
  403bdb:	mov    QWORD PTR [rbp+0x0],r12
  403bdf:	mov    QWORD PTR [rbp+0x8],rbx
  403be3:	xor    eax,eax
  403be5:	add    rsp,0x18
  403be9:	pop    rbx
  403bea:	pop    rbp
  403beb:	pop    r12
  403bed:	pop    r13
  403bef:	ret    
  403bf0:	cmp    r8d,0x1
  403bf4:	mov    ebx,0x100
  403bf9:	mov    eax,0x20
  403bfe:	cmovne rbx,rax
  403c02:	jmp    403b94 <flatcc_builder_default_alloc@@Base+0x44>
  403c04:	nop    DWORD PTR [rax+0x0]
  403c08:	mov    rax,QWORD PTR [rbp+0x8]
  403c0c:	cmp    rax,rbx
  403c0f:	jae    403bdb <flatcc_builder_default_alloc@@Base+0x8b>
  403c11:	mov    rdx,rbx
  403c14:	sub    rdx,rax
  403c17:	lea    rdi,[r12+rax*1]
  403c1b:	xor    esi,esi
  403c1d:	call   403140 <memset@plt>
  403c22:	jmp    403bdb <flatcc_builder_default_alloc@@Base+0x8b>
  403c24:	nop    DWORD PTR [rax+0x0]
  403c28:	mov    rdi,QWORD PTR [rsi]
  403c2b:	xor    eax,eax
  403c2d:	test   rdi,rdi
  403c30:	je     403be5 <flatcc_builder_default_alloc@@Base+0x95>
  403c32:	mov    DWORD PTR [rsp+0xc],eax
  403c36:	call   403100 <free@plt>
  403c3b:	mov    QWORD PTR [rbp+0x0],0x0
  403c43:	mov    QWORD PTR [rbp+0x8],0x0
  403c4b:	mov    eax,DWORD PTR [rsp+0xc]
  403c4f:	add    rsp,0x18
  403c53:	pop    rbx
  403c54:	pop    rbp
  403c55:	pop    r12
  403c57:	pop    r13
  403c59:	ret    
  403c5a:	nop    WORD PTR [rax+rax*1+0x0]
  403c60:	mov    ebx,0x120
  403c65:	jmp    403b94 <flatcc_builder_default_alloc@@Base+0x44>
  403c6a:	mov    eax,0xffffffff
  403c6f:	jmp    403be5 <flatcc_builder_default_alloc@@Base+0x95>
  403c74:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403c7f:	nop
  403c80:	push   rax
  403c81:	pop    rax
  403c82:	lea    rcx,[rip+0x61c7]        # 409e50 <_IO_stdin_used@@Base+0xe50>
  403c89:	mov    edx,0x134
  403c8e:	lea    rsi,[rip+0x56f3]        # 409388 <_IO_stdin_used@@Base+0x388>
  403c95:	lea    rdi,[rip+0x5a83]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403c9c:	sub    rsp,0x8
  403ca0:	call   403130 <__assert_fail@plt>
  403ca5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403cb0:	push   rax
  403cb1:	pop    rax
  403cb2:	lea    rcx,[rip+0x6127]        # 409de0 <_IO_stdin_used@@Base+0xde0>
  403cb9:	mov    edx,0x2a5
  403cbe:	lea    rsi,[rip+0x56c3]        # 409388 <_IO_stdin_used@@Base+0x388>
  403cc5:	lea    rdi,[rip+0x5a53]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403ccc:	sub    rsp,0x8
  403cd0:	call   403130 <__assert_fail@plt>
  403cd5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403ce0:	push   rbx
  403ce1:	mov    r9,rdi
  403ce4:	sub    rsp,0xa0
  403ceb:	mov    rbx,QWORD PTR fs:0x28
  403cf4:	mov    QWORD PTR [rsp+0x98],rbx
  403cfc:	xor    ebx,ebx
  403cfe:	test   dx,dx
  403d01:	je     403d60 <flatcc_builder_default_alloc@@Base+0x210>
  403d03:	mov    eax,edx
  403d05:	movzx  edx,dx
  403d08:	movzx  edi,WORD PTR [rsi]
  403d0b:	cmp    di,0x3
  403d0f:	ja     403d1e <flatcc_builder_default_alloc@@Base+0x1ce>
  403d11:	mov    edi,0x4
  403d16:	mov    WORD PTR [rsi],di
  403d19:	mov    edi,0x4
  403d1e:	cmp    ax,di
  403d21:	jbe    403d26 <flatcc_builder_default_alloc@@Base+0x1d6>
  403d23:	mov    WORD PTR [rsi],ax
  403d26:	test   ecx,ecx
  403d28:	jne    403d37 <flatcc_builder_default_alloc@@Base+0x1e7>
  403d2a:	mov    ebx,DWORD PTR [r9+0xf4]
  403d31:	dec    edx
  403d33:	and    edx,ebx
  403d35:	jne    403d80 <flatcc_builder_default_alloc@@Base+0x230>
  403d37:	xor    eax,eax
  403d39:	mov    rbx,QWORD PTR [rsp+0x98]
  403d41:	xor    rbx,QWORD PTR fs:0x28
  403d4a:	jne    403ded <flatcc_builder_default_alloc@@Base+0x29d>
  403d50:	add    rsp,0xa0
  403d57:	pop    rbx
  403d58:	ret    
  403d59:	nop    DWORD PTR [rax+0x0]
  403d60:	movzx  eax,WORD PTR [rdi+0xec]
  403d67:	movzx  edx,ax
  403d6a:	test   ax,ax
  403d6d:	jne    403d08 <flatcc_builder_default_alloc@@Base+0x1b8>
  403d6f:	mov    edx,0x1
  403d74:	mov    eax,0x1
  403d79:	jmp    403d08 <flatcc_builder_default_alloc@@Base+0x1b8>
  403d7b:	nop    DWORD PTR [rax+rax*1+0x0]
  403d80:	mov    rax,0x409e80
  403d87:	movsxd r8,edx
  403d8a:	add    edx,ebx
  403d8c:	mov    QWORD PTR [rsp],r8
  403d90:	mov    QWORD PTR [rsp+0x10],rax
  403d95:	mov    QWORD PTR [rsp+0x18],r8
  403d9a:	mov    DWORD PTR [rsp+0x8],0x1
  403da2:	mov    DWORD PTR [r9+0xf4],edx
  403da9:	cmp    ebx,edx
  403dab:	jg     403df7 <flatcc_builder_default_alloc@@Base+0x2a7>
  403dad:	mov    rdi,QWORD PTR [r9+0x38]
  403db1:	lea    rsi,[rsp+0x10]
  403db6:	mov    ecx,ebx
  403db8:	mov    edx,0x1
  403dbd:	call   QWORD PTR [r9+0x48]
  403dc1:	test   eax,eax
  403dc3:	jne    403df2 <flatcc_builder_default_alloc@@Base+0x2a2>
  403dc5:	cmp    ebx,0xffffffff
  403dc8:	jne    403d37 <flatcc_builder_default_alloc@@Base+0x1e7>
  403dce:	lea    rcx,[rip+0x601b]        # 409df0 <_IO_stdin_used@@Base+0xdf0>
  403dd5:	mov    edx,0x2be
  403dda:	lea    rsi,[rip+0x55a7]        # 409388 <_IO_stdin_used@@Base+0x388>
  403de1:	lea    rdi,[rip+0x5937]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403de8:	call   403130 <__assert_fail@plt>
  403ded:	call   403120 <__stack_chk_fail@plt>
  403df2:	call   403cb0 <flatcc_builder_default_alloc@@Base+0x160>
  403df7:	lea    rcx,[rip+0x5fe2]        # 409de0 <_IO_stdin_used@@Base+0xde0>
  403dfe:	mov    edx,0x2a1
  403e03:	lea    rsi,[rip+0x557e]        # 409388 <_IO_stdin_used@@Base+0x388>
  403e0a:	lea    rdi,[rip+0x590e]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403e11:	call   403130 <__assert_fail@plt>
  403e16:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403e20:	push   rax
  403e21:	pop    rax
  403e22:	lea    rcx,[rip+0x5fa7]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  403e29:	mov    edx,0x28b
  403e2e:	lea    rsi,[rip+0x5553]        # 409388 <_IO_stdin_used@@Base+0x388>
  403e35:	lea    rdi,[rip+0x58e3]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403e3c:	sub    rsp,0x8
  403e40:	call   403130 <__assert_fail@plt>
  403e45:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403e50:	push   rax
  403e51:	pop    rax
  403e52:	lea    rcx,[rip+0x5ed7]        # 409d30 <_IO_stdin_used@@Base+0xd30>
  403e59:	mov    edx,0x37c
  403e5e:	lea    rsi,[rip+0x5523]        # 409388 <_IO_stdin_used@@Base+0x388>
  403e65:	lea    rdi,[rip+0x588c]        # 4096f8 <_IO_stdin_used@@Base+0x6f8>
  403e6c:	sub    rsp,0x8
  403e70:	call   403130 <__assert_fail@plt>
  403e75:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403e80:	push   r12
  403e82:	mov    r12d,esi
  403e85:	push   rbp
  403e86:	push   rbx
  403e87:	mov    rbx,rdi
  403e8a:	movsxd rax,DWORD PTR [rdi+0x104]
  403e91:	lea    edx,[rax+0x1]
  403e94:	mov    DWORD PTR [rdi+0x104],edx
  403e9a:	cmp    edx,DWORD PTR [rdi+0x108]
  403ea0:	jle    403f70 <flatcc_builder_default_alloc@@Base+0x420>
  403ea6:	mov    ecx,DWORD PTR [rdi+0x120]
  403eac:	cmp    edx,ecx
  403eae:	jle    403eb8 <flatcc_builder_default_alloc@@Base+0x368>
  403eb0:	test   ecx,ecx
  403eb2:	jg     403f88 <flatcc_builder_default_alloc@@Base+0x438>
  403eb8:	lea    rcx,[rax+rax*8]
  403ebc:	lea    rbp,[rcx*4+0x0]
  403ec4:	lea    rdx,[rbp+0x24]
  403ec8:	cmp    rdx,QWORD PTR [rbx+0xa0]
  403ecf:	jbe    403eef <flatcc_builder_default_alloc@@Base+0x39f>
  403ed1:	mov    rdi,QWORD PTR [rbx+0x40]
  403ed5:	xor    ecx,ecx
  403ed7:	lea    rsi,[rbx+0x98]
  403ede:	mov    r8d,0x4
  403ee4:	call   QWORD PTR [rbx+0x50]
  403ee7:	test   eax,eax
  403ee9:	jne    403f8f <flatcc_builder_default_alloc@@Base+0x43f>
  403eef:	mov    rcx,rbp
  403ef2:	add    rcx,QWORD PTR [rbx+0x98]
  403ef9:	mov    QWORD PTR [rbx+0x30],rcx
  403efd:	je     403f88 <flatcc_builder_default_alloc@@Base+0x438>
  403f03:	movabs rdx,0xe38e38e38e38e38f
  403f0d:	mov    rax,rdx
  403f10:	mul    QWORD PTR [rbx+0xa0]
  403f17:	mov    eax,DWORD PTR [rbx+0x120]
  403f1d:	shr    rdx,0x5
  403f21:	mov    DWORD PTR [rbx+0x108],edx
  403f27:	cmp    eax,edx
  403f29:	jge    403f30 <flatcc_builder_default_alloc@@Base+0x3e0>
  403f2b:	test   eax,eax
  403f2d:	jg     403f80 <flatcc_builder_default_alloc@@Base+0x430>
  403f2f:	nop
  403f30:	movzx  eax,WORD PTR [rbx+0xea]
  403f37:	mov    edx,DWORD PTR [rbx+0x20]
  403f3a:	mov    WORD PTR [rcx+0xc],ax
  403f3e:	mov    eax,DWORD PTR [rbx+0x28]
  403f41:	mov    DWORD PTR [rcx+0x8],edx
  403f44:	mov    WORD PTR [rbx+0xea],r12w
  403f4c:	mov    DWORD PTR [rcx],eax
  403f4e:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  403f55:	lea    eax,[rdx+rax*1+0x7]
  403f59:	mov    DWORD PTR [rbx+0x20],0x0
  403f60:	and    eax,0xfffffff8
  403f63:	mov    DWORD PTR [rbx+0x28],eax
  403f66:	xor    eax,eax
  403f68:	pop    rbx
  403f69:	pop    rbp
  403f6a:	pop    r12
  403f6c:	ret    
  403f6d:	nop    DWORD PTR [rax]
  403f70:	mov    rax,QWORD PTR [rdi+0x30]
  403f74:	lea    rcx,[rax+0x24]
  403f78:	mov    QWORD PTR [rdi+0x30],rcx
  403f7c:	jmp    403f30 <flatcc_builder_default_alloc@@Base+0x3e0>
  403f7e:	xchg   ax,ax
  403f80:	mov    DWORD PTR [rbx+0x108],eax
  403f86:	jmp    403f30 <flatcc_builder_default_alloc@@Base+0x3e0>
  403f88:	mov    eax,0xffffffff
  403f8d:	jmp    403f68 <flatcc_builder_default_alloc@@Base+0x418>
  403f8f:	call   403c80 <flatcc_builder_default_alloc@@Base+0x130>
  403f94:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403f9f:	nop
  403fa0:	push   rbp
  403fa1:	push   rbx
  403fa2:	sub    rsp,0xb8
  403fa9:	mov    rax,QWORD PTR fs:0x28
  403fb2:	mov    QWORD PTR [rsp+0xa8],rax
  403fba:	xor    eax,eax
  403fbc:	cmp    edx,0x3fffffff
  403fc2:	ja     404158 <flatcc_builder_default_alloc@@Base+0x608>
  403fc8:	cmp    WORD PTR [rdi+0xe8],0x3
  403fd0:	mov    rbx,rdi
  403fd3:	ja     403fe1 <flatcc_builder_default_alloc@@Base+0x491>
  403fd5:	mov    eax,0x4
  403fda:	mov    WORD PTR [rdi+0xe8],ax
  403fe1:	mov    edi,DWORD PTR [rbx+0xf0]
  403fe7:	mov    r9d,edx
  403fea:	mov    eax,edi
  403fec:	lea    r8,[rsp+0xc]
  403ff1:	and    eax,0x3
  403ff4:	shl    r9d,0x2
  403ff8:	mov    QWORD PTR [rsp+0x20],r8
  403ffd:	mov    DWORD PTR [rsp+0xc],edx
  404001:	mov    QWORD PTR [rsp+0x10],0x4
  40400a:	mov    QWORD PTR [rsp+0x28],0x4
  404013:	mov    DWORD PTR [rsp+0x18],0x1
  40401b:	mov    r8d,0x4
  404021:	je     404041 <flatcc_builder_default_alloc@@Base+0x4f1>
  404023:	mov    r9d,r9d
  404026:	lea    r8,[r9+0x4]
  40402a:	mov    QWORD PTR [rsp+0x10],r8
  40402f:	mov    QWORD PTR [rsp+0x30],rsi
  404034:	mov    QWORD PTR [rsp+0x38],r9
  404039:	mov    DWORD PTR [rsp+0x18],0x2
  404041:	test   eax,eax
  404043:	jne    404120 <flatcc_builder_default_alloc@@Base+0x5d0>
  404049:	mov    r10d,r8d
  40404c:	test   edx,edx
  40404e:	je     4040c6 <flatcc_builder_default_alloc@@Base+0x576>
  404050:	sub    r10d,edi
  404053:	lea    r9d,[rdx-0x1]
  404057:	xor    eax,eax
  404059:	sub    r10d,0x4
  40405d:	jmp    404088 <flatcc_builder_default_alloc@@Base+0x538>
  40405f:	nop
  404060:	mov    edi,eax
  404062:	neg    edi
  404064:	lea    edi,[r10+rdi*4]
  404068:	add    edx,edi
  40406a:	mov    DWORD PTR [rsi+rax*4],edx
  40406d:	test   rcx,rcx
  404070:	je     40407c <flatcc_builder_default_alloc@@Base+0x52c>
  404072:	cmp    BYTE PTR [rcx+rax*1],0x0
  404076:	je     40417b <flatcc_builder_default_alloc@@Base+0x62b>
  40407c:	lea    rdx,[rax+0x1]
  404080:	cmp    rax,r9
  404083:	je     4040c0 <flatcc_builder_default_alloc@@Base+0x570>
  404085:	mov    rax,rdx
  404088:	mov    edx,DWORD PTR [rsi+rax*4]
  40408b:	test   edx,edx
  40408d:	jne    404060 <flatcc_builder_default_alloc@@Base+0x510>
  40408f:	test   rcx,rcx
  404092:	je     40415c <flatcc_builder_default_alloc@@Base+0x60c>
  404098:	cmp    BYTE PTR [rcx+rax*1],0x0
  40409c:	je     40407c <flatcc_builder_default_alloc@@Base+0x52c>
  40409e:	lea    rcx,[rip+0x59ab]        # 409a50 <_IO_stdin_used@@Base+0xa50>
  4040a5:	mov    edx,0x5b5
  4040aa:	lea    rsi,[rip+0x52d7]        # 409388 <_IO_stdin_used@@Base+0x388>
  4040b1:	lea    rdi,[rip+0x5669]        # 409721 <_IO_stdin_used@@Base+0x721>
  4040b8:	call   403130 <__assert_fail@plt>
  4040bd:	nop    DWORD PTR [rax]
  4040c0:	mov    edi,DWORD PTR [rbx+0xf0]
  4040c6:	mov    ebp,edi
  4040c8:	sub    ebp,r8d
  4040cb:	cmp    ebp,edi
  4040cd:	jge    40419a <flatcc_builder_default_alloc@@Base+0x64a>
  4040d3:	mov    rdi,QWORD PTR [rbx+0x38]
  4040d7:	mov    edx,DWORD PTR [rsp+0x18]
  4040db:	lea    rsi,[rsp+0x20]
  4040e0:	mov    ecx,ebp
  4040e2:	call   QWORD PTR [rbx+0x48]
  4040e5:	test   eax,eax
  4040e7:	jne    4041be <flatcc_builder_default_alloc@@Base+0x66e>
  4040ed:	mov    DWORD PTR [rbx+0xf0],ebp
  4040f3:	mov    rbx,QWORD PTR [rsp+0xa8]
  4040fb:	xor    rbx,QWORD PTR fs:0x28
  404104:	mov    eax,ebp
  404106:	jne    4041b9 <flatcc_builder_default_alloc@@Base+0x669>
  40410c:	add    rsp,0xb8
  404113:	pop    rbx
  404114:	pop    rbp
  404115:	ret    
  404116:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404120:	movsxd r10,DWORD PTR [rsp+0x18]
  404125:	mov    r11,0x409e80
  40412c:	mov    r9,r10
  40412f:	add    r8,rax
  404132:	shl    r10,0x4
  404136:	inc    r9d
  404139:	mov    QWORD PTR [rsp+0x10],r8
  40413e:	mov    QWORD PTR [rsp+r10*1+0x20],r11
  404143:	mov    QWORD PTR [rsp+r10*1+0x28],rax
  404148:	mov    DWORD PTR [rsp+0x18],r9d
  40414d:	jmp    404049 <flatcc_builder_default_alloc@@Base+0x4f9>
  404152:	nop    WORD PTR [rax+rax*1+0x0]
  404158:	xor    ebp,ebp
  40415a:	jmp    4040f3 <flatcc_builder_default_alloc@@Base+0x5a3>
  40415c:	lea    rcx,[rip+0x58ed]        # 409a50 <_IO_stdin_used@@Base+0xa50>
  404163:	mov    edx,0x5b7
  404168:	lea    rsi,[rip+0x5219]        # 409388 <_IO_stdin_used@@Base+0x388>
  40416f:	lea    rdi,[rip+0x55a9]        # 40971f <_IO_stdin_used@@Base+0x71f>
  404176:	call   403130 <__assert_fail@plt>
  40417b:	lea    rcx,[rip+0x58ce]        # 409a50 <_IO_stdin_used@@Base+0xa50>
  404182:	mov    edx,0x5b1
  404187:	lea    rsi,[rip+0x51fa]        # 409388 <_IO_stdin_used@@Base+0x388>
  40418e:	lea    rdi,[rip+0x557e]        # 409713 <_IO_stdin_used@@Base+0x713>
  404195:	call   403130 <__assert_fail@plt>
  40419a:	lea    rcx,[rip+0x5c2f]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  4041a1:	mov    edx,0x287
  4041a6:	lea    rsi,[rip+0x51db]        # 409388 <_IO_stdin_used@@Base+0x388>
  4041ad:	lea    rdi,[rip+0x556b]        # 40971f <_IO_stdin_used@@Base+0x71f>
  4041b4:	call   403130 <__assert_fail@plt>
  4041b9:	call   403120 <__stack_chk_fail@plt>
  4041be:	call   403e20 <flatcc_builder_default_alloc@@Base+0x2d0>
  4041c3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4041ce:	xchg   ax,ax

00000000004041d0 <flatcc_builder_flush_vtable_cache@@Base>:
  4041d0:	endbr64 
  4041d4:	cmp    QWORD PTR [rdi+0xd8],0x0
  4041dc:	jne    4041e0 <flatcc_builder_flush_vtable_cache@@Base+0x10>
  4041de:	ret    
  4041df:	nop
  4041e0:	push   rbx
  4041e1:	mov    rbx,rdi
  4041e4:	xor    esi,esi
  4041e6:	mov    rdx,QWORD PTR [rbx+0xb0]
  4041ed:	mov    rdi,QWORD PTR [rdi+0xa8]
  4041f4:	call   403140 <memset@plt>
  4041f9:	movabs rax,0x1000000000
  404203:	mov    QWORD PTR [rbx+0xe0],rax
  40420a:	pop    rbx
  40420b:	ret    
  40420c:	nop    DWORD PTR [rax+0x0]

0000000000404210 <flatcc_builder_custom_init@@Base>:
  404210:	endbr64 
  404214:	mov    QWORD PTR [rdi],0x0
  40421b:	mov    QWORD PTR [rdi+0x180],0x0
  404226:	mov    r9,rdi
  404229:	lea    rdi,[rdi+0x8]
  40422d:	and    rdi,0xfffffffffffffff8
  404231:	mov    r10,rcx
  404234:	mov    rcx,r9
  404237:	sub    rcx,rdi
  40423a:	add    ecx,0x188
  404240:	shr    ecx,0x3
  404243:	xor    eax,eax
  404245:	rep stos QWORD PTR es:[rdi],rax
  404248:	test   rsi,rsi
  40424b:	je     404268 <flatcc_builder_custom_init@@Base+0x58>
  40424d:	test   r10,r10
  404250:	je     404286 <flatcc_builder_custom_init@@Base+0x76>
  404252:	mov    QWORD PTR [r9+0x40],r8
  404256:	mov    QWORD PTR [r9+0x50],r10
  40425a:	mov    QWORD PTR [r9+0x38],rdx
  40425e:	mov    QWORD PTR [r9+0x48],rsi
  404262:	xor    eax,eax
  404264:	ret    
  404265:	nop    DWORD PTR [rax]
  404268:	mov    DWORD PTR [r9+0x128],0x1
  404273:	lea    rdx,[r9+0x130]
  40427a:	mov    rsi,0x407cc0
  404281:	test   r10,r10
  404284:	jne    404252 <flatcc_builder_custom_init@@Base+0x42>
  404286:	mov    r10,0x403b50
  40428d:	jmp    404252 <flatcc_builder_custom_init@@Base+0x42>
  40428f:	nop

0000000000404290 <flatcc_builder_init@@Base>:
  404290:	endbr64 
  404294:	xor    r8d,r8d
  404297:	xor    ecx,ecx
  404299:	xor    edx,edx
  40429b:	xor    esi,esi
  40429d:	jmp    404210 <flatcc_builder_custom_init@@Base>
  4042a2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4042ad:	nop    DWORD PTR [rax]

00000000004042b0 <flatcc_builder_custom_reset@@Base>:
  4042b0:	endbr64 
  4042b4:	push   r14
  4042b6:	mov    r14d,esi
  4042b9:	push   r13
  4042bb:	mov    r13d,edx
  4042be:	push   r12
  4042c0:	mov    r12,rdi
  4042c3:	push   rbp
  4042c4:	xor    ebp,ebp
  4042c6:	push   rbx
  4042c7:	lea    rbx,[rdi+0x58]
  4042cb:	jmp    404315 <flatcc_builder_custom_reset@@Base+0x65>
  4042cd:	nop    DWORD PTR [rax]
  4042d0:	cmp    ebp,0x5
  4042d3:	je     4042ff <flatcc_builder_custom_reset@@Base+0x4f>
  4042d5:	test   r13d,r13d
  4042d8:	je     4042ff <flatcc_builder_custom_reset@@Base+0x4f>
  4042da:	mov    rdi,QWORD PTR [r12+0x40]
  4042df:	mov    r8d,ebp
  4042e2:	mov    ecx,0x1
  4042e7:	mov    edx,0x1
  4042ec:	mov    rsi,rbx
  4042ef:	call   QWORD PTR [r12+0x50]
  4042f4:	test   eax,eax
  4042f6:	jne    404430 <flatcc_builder_custom_reset@@Base+0x180>
  4042fc:	mov    rdi,QWORD PTR [rbx]
  4042ff:	mov    rdx,QWORD PTR [rbx+0x8]
  404303:	xor    esi,esi
  404305:	call   403140 <memset@plt>
  40430a:	inc    ebp
  40430c:	add    rbx,0x10
  404310:	cmp    ebp,0x8
  404313:	je     404348 <flatcc_builder_custom_reset@@Base+0x98>
  404315:	mov    rdi,QWORD PTR [rbx]
  404318:	test   rdi,rdi
  40431b:	jne    4042d0 <flatcc_builder_custom_reset@@Base+0x20>
  40431d:	cmp    QWORD PTR [rbx+0x8],0x0
  404322:	je     40430a <flatcc_builder_custom_reset@@Base+0x5a>
  404324:	lea    rcx,[rip+0x5b35]        # 409e60 <_IO_stdin_used@@Base+0xe60>
  40432b:	mov    edx,0x1b2
  404330:	lea    rsi,[rip+0x5051]        # 409388 <_IO_stdin_used@@Base+0x388>
  404337:	lea    rdi,[rip+0x53f1]        # 40972f <_IO_stdin_used@@Base+0x72f>
  40433e:	call   403130 <__assert_fail@plt>
  404343:	nop    DWORD PTR [rax+rax*1+0x0]
  404348:	mov    edx,DWORD PTR [r12+0xe4]
  404350:	mov    DWORD PTR [r12+0xe0],0x0
  40435c:	test   edx,edx
  40435e:	je     40436c <flatcc_builder_custom_reset@@Base+0xbc>
  404360:	mov    DWORD PTR [r12+0xe4],0x10
  40436c:	xor    eax,eax
  40436e:	mov    WORD PTR [r12+0xe8],ax
  404377:	mov    rax,QWORD PTR [r12+0x68]
  40437c:	mov    QWORD PTR [r12+0xf0],0x0
  404388:	mov    QWORD PTR [r12+0x18],rax
  40438d:	mov    rax,QWORD PTR [r12+0x88]
  404395:	mov    QWORD PTR [r12+0x20],0x0
  40439e:	mov    QWORD PTR [r12],rax
  4043a2:	mov    rax,QWORD PTR [r12+0x58]
  4043a7:	mov    QWORD PTR [r12+0xfc],0x0
  4043b3:	mov    QWORD PTR [r12+0x104],0x0
  4043bf:	mov    QWORD PTR [r12+0x8],rax
  4043c4:	mov    QWORD PTR [r12+0x30],0x0
  4043cd:	test   r14d,r14d
  4043d0:	jne    4043f0 <flatcc_builder_custom_reset@@Base+0x140>
  4043d2:	mov    eax,DWORD PTR [r12+0x128]
  4043da:	test   eax,eax
  4043dc:	jne    404414 <flatcc_builder_custom_reset@@Base+0x164>
  4043de:	pop    rbx
  4043df:	pop    rbp
  4043e0:	pop    r12
  4043e2:	pop    r13
  4043e4:	pop    r14
  4043e6:	ret    
  4043e7:	nop    WORD PTR [rax+rax*1+0x0]
  4043f0:	mov    eax,DWORD PTR [r12+0x128]
  4043f8:	mov    QWORD PTR [r12+0x118],0x0
  404404:	mov    QWORD PTR [r12+0x120],0x0
  404410:	test   eax,eax
  404412:	je     4043de <flatcc_builder_custom_reset@@Base+0x12e>
  404414:	lea    rdi,[r12+0x130]
  40441c:	call   407b30 <flatcc_emitter_reset@@Base>
  404421:	pop    rbx
  404422:	pop    rbp
  404423:	pop    r12
  404425:	pop    r13
  404427:	xor    eax,eax
  404429:	pop    r14
  40442b:	ret    
  40442c:	nop    DWORD PTR [rax+0x0]
  404430:	pop    rbx
  404431:	pop    rbp
  404432:	pop    r12
  404434:	pop    r13
  404436:	mov    eax,0xffffffff
  40443b:	pop    r14
  40443d:	ret    
  40443e:	xchg   ax,ax

0000000000404440 <flatcc_builder_reset@@Base>:
  404440:	endbr64 
  404444:	xor    edx,edx
  404446:	xor    esi,esi
  404448:	jmp    4042b0 <flatcc_builder_custom_reset@@Base>
  40444d:	nop    DWORD PTR [rax]

0000000000404450 <flatcc_builder_clear@@Base>:
  404450:	endbr64 
  404454:	push   r12
  404456:	lea    r12,[rdi+0x58]
  40445a:	push   rbp
  40445b:	xor    ebp,ebp
  40445d:	push   rbx
  40445e:	mov    rbx,rdi
  404461:	nop    DWORD PTR [rax+0x0]
  404468:	mov    rdi,QWORD PTR [rbx+0x40]
  40446c:	mov    r8d,ebp
  40446f:	mov    rsi,r12
  404472:	xor    ecx,ecx
  404474:	xor    edx,edx
  404476:	inc    ebp
  404478:	call   QWORD PTR [rbx+0x50]
  40447b:	add    r12,0x10
  40447f:	cmp    ebp,0x8
  404482:	jne    404468 <flatcc_builder_clear@@Base+0x18>
  404484:	mov    eax,DWORD PTR [rbx+0x128]
  40448a:	test   eax,eax
  40448c:	jne    4044c0 <flatcc_builder_clear@@Base+0x70>
  40448e:	lea    rdi,[rbx+0x8]
  404492:	and    rdi,0xfffffffffffffff8
  404496:	mov    QWORD PTR [rbx],0x0
  40449d:	mov    QWORD PTR [rbx+0x180],0x0
  4044a8:	sub    rbx,rdi
  4044ab:	lea    ecx,[rbx+0x188]
  4044b1:	shr    ecx,0x3
  4044b4:	xor    eax,eax
  4044b6:	rep stos QWORD PTR es:[rdi],rax
  4044b9:	pop    rbx
  4044ba:	pop    rbp
  4044bb:	pop    r12
  4044bd:	ret    
  4044be:	xchg   ax,ax
  4044c0:	lea    rdi,[rbx+0x130]
  4044c7:	call   407c20 <flatcc_emitter_clear@@Base>
  4044cc:	jmp    40448e <flatcc_builder_clear@@Base+0x3e>
  4044ce:	xchg   ax,ax

00000000004044d0 <flatcc_builder_enter_user_frame_ptr@@Base>:
  4044d0:	endbr64 
  4044d4:	push   r12
  4044d6:	push   rbp
  4044d7:	lea    rbp,[rsi+0x7]
  4044db:	and    rbp,0xfffffffffffffff8
  4044df:	push   rbx
  4044e0:	add    rbp,0x8
  4044e4:	mov    rbx,rdi
  4044e7:	mov    r12,QWORD PTR [rdi+0x180]
  4044ee:	lea    rdx,[r12+rbp*1]
  4044f2:	cmp    rdx,QWORD PTR [rdi+0xd0]
  4044f9:	jbe    404515 <flatcc_builder_enter_user_frame_ptr@@Base+0x45>
  4044fb:	lea    rsi,[rdi+0xc8]
  404502:	mov    rdi,QWORD PTR [rdi+0x40]
  404506:	xor    ecx,ecx
  404508:	mov    r8d,0x7
  40450e:	call   QWORD PTR [rbx+0x50]
  404511:	test   eax,eax
  404513:	jne    404567 <flatcc_builder_enter_user_frame_ptr@@Base+0x97>
  404515:	add    r12,QWORD PTR [rbx+0xc8]
  40451c:	je     404560 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
  40451e:	mov    rdx,rbp
  404521:	mov    rdi,r12
  404524:	xor    esi,esi
  404526:	call   403140 <memset@plt>
  40452b:	mov    rdx,QWORD PTR [rbx+0x178]
  404532:	lea    rax,[r12+0x8]
  404537:	mov    QWORD PTR [r12],rdx
  40453b:	mov    rdx,QWORD PTR [rbx+0x180]
  404542:	add    rbp,rdx
  404545:	lea    rcx,[rdx+0x8]
  404549:	mov    QWORD PTR [rbx+0x180],rbp
  404550:	mov    QWORD PTR [rbx+0x178],rcx
  404557:	pop    rbx
  404558:	pop    rbp
  404559:	pop    r12
  40455b:	ret    
  40455c:	nop    DWORD PTR [rax+0x0]
  404560:	pop    rbx
  404561:	pop    rbp
  404562:	xor    eax,eax
  404564:	pop    r12
  404566:	ret    
  404567:	call   403c80 <flatcc_builder_default_alloc@@Base+0x130>
  40456c:	nop    DWORD PTR [rax+0x0]

0000000000404570 <flatcc_builder_enter_user_frame@@Base>:
  404570:	endbr64 
  404574:	push   r12
  404576:	push   rbp
  404577:	mov    rbp,rdi
  40457a:	push   rbx
  40457b:	lea    rbx,[rsi+0x7]
  40457f:	and    rbx,0xfffffffffffffff8
  404583:	mov    r12,QWORD PTR [rdi+0x180]
  40458a:	add    rbx,0x8
  40458e:	lea    rdx,[r12+rbx*1]
  404592:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404599:	jbe    4045b5 <flatcc_builder_enter_user_frame@@Base+0x45>
  40459b:	lea    rsi,[rdi+0xc8]
  4045a2:	mov    rdi,QWORD PTR [rdi+0x40]
  4045a6:	xor    ecx,ecx
  4045a8:	mov    r8d,0x7
  4045ae:	call   QWORD PTR [rbp+0x50]
  4045b1:	test   eax,eax
  4045b3:	jne    4045fa <flatcc_builder_enter_user_frame@@Base+0x8a>
  4045b5:	add    r12,QWORD PTR [rbp+0xc8]
  4045bc:	je     4045f2 <flatcc_builder_enter_user_frame@@Base+0x82>
  4045be:	mov    rdx,rbx
  4045c1:	mov    rdi,r12
  4045c4:	xor    esi,esi
  4045c6:	call   403140 <memset@plt>
  4045cb:	mov    rax,QWORD PTR [rbp+0x178]
  4045d2:	mov    QWORD PTR [r12],rax
  4045d6:	mov    rax,QWORD PTR [rbp+0x180]
  4045dd:	lea    r12,[rax+0x8]
  4045e1:	add    rbx,rax
  4045e4:	mov    QWORD PTR [rbp+0x178],r12
  4045eb:	mov    QWORD PTR [rbp+0x180],rbx
  4045f2:	pop    rbx
  4045f3:	pop    rbp
  4045f4:	mov    rax,r12
  4045f7:	pop    r12
  4045f9:	ret    
  4045fa:	call   403c80 <flatcc_builder_default_alloc@@Base+0x130>
  4045ff:	nop

0000000000404600 <flatcc_builder_exit_user_frame@@Base>:
  404600:	endbr64 
  404604:	mov    rax,QWORD PTR [rdi+0x178]
  40460b:	test   rax,rax
  40460e:	je     404630 <flatcc_builder_exit_user_frame@@Base+0x30>
  404610:	mov    edx,eax
  404612:	sub    rax,0x8
  404616:	mov    QWORD PTR [rdi+0x180],rax
  40461d:	add    rdx,QWORD PTR [rdi+0xc8]
  404624:	mov    rax,QWORD PTR [rdx-0x8]
  404628:	mov    QWORD PTR [rdi+0x178],rax
  40462f:	ret    
  404630:	push   rax
  404631:	lea    rcx,[rip+0x57f8]        # 409e30 <_IO_stdin_used@@Base+0xe30>
  404638:	mov    edx,0x21e
  40463d:	lea    rsi,[rip+0x4d44]        # 409388 <_IO_stdin_used@@Base+0x388>
  404644:	lea    rdi,[rip+0x50f6]        # 409741 <_IO_stdin_used@@Base+0x741>
  40464b:	call   403130 <__assert_fail@plt>

0000000000404650 <flatcc_builder_exit_user_frame_at@@Base>:
  404650:	endbr64 
  404654:	cmp    QWORD PTR [rdi+0x178],rsi
  40465b:	jb     404669 <flatcc_builder_exit_user_frame_at@@Base+0x19>
  40465d:	mov    QWORD PTR [rdi+0x178],rsi
  404664:	jmp    404600 <flatcc_builder_exit_user_frame@@Base>
  404669:	push   rax
  40466a:	lea    rcx,[rip+0x578f]        # 409e00 <_IO_stdin_used@@Base+0xe00>
  404671:	mov    edx,0x227
  404676:	lea    rsi,[rip+0x4d0b]        # 409388 <_IO_stdin_used@@Base+0x388>
  40467d:	lea    rdi,[rip+0x4d64]        # 4093e8 <_IO_stdin_used@@Base+0x3e8>
  404684:	call   403130 <__assert_fail@plt>
  404689:	nop    DWORD PTR [rax+0x0]

0000000000404690 <flatcc_builder_get_current_user_frame@@Base>:
  404690:	endbr64 
  404694:	mov    rax,QWORD PTR [rdi+0x178]
  40469b:	ret    
  40469c:	nop    DWORD PTR [rax+0x0]

00000000004046a0 <flatcc_builder_get_user_frame_ptr@@Base>:
  4046a0:	endbr64 
  4046a4:	mov    eax,esi
  4046a6:	add    rax,QWORD PTR [rdi+0xc8]
  4046ad:	ret    
  4046ae:	xchg   ax,ax

00000000004046b0 <flatcc_builder_embed_buffer@@Base>:
  4046b0:	endbr64 
  4046b4:	push   r13
  4046b6:	mov    r13d,r9d
  4046b9:	push   r12
  4046bb:	mov    r12,rcx
  4046be:	push   rbp
  4046bf:	mov    rbp,rdx
  4046c2:	movzx  edx,si
  4046c5:	push   rbx
  4046c6:	mov    rbx,rdi
  4046c9:	sub    rsp,0xc8
  4046d0:	mov    WORD PTR [rsp+0xc],r8w
  4046d6:	mov    r8d,DWORD PTR [rdi+0x100]
  4046dd:	mov    rax,QWORD PTR fs:0x28
  4046e6:	mov    QWORD PTR [rsp+0xb8],rax
  4046ee:	xor    eax,eax
  4046f0:	test   r8d,r8d
  4046f3:	setne  cl
  4046f6:	lea    rax,[rsp+0xc]
  4046fb:	movzx  ecx,cl
  4046fe:	mov    rsi,rax
  404701:	call   403ce0 <flatcc_builder_default_alloc@@Base+0x190>
  404706:	test   eax,eax
  404708:	jne    404840 <flatcc_builder_embed_buffer@@Base+0x190>
  40470e:	mov    edx,DWORD PTR [rbx+0xf0]
  404714:	xor    esi,esi
  404716:	and    r13d,0x2
  40471a:	setne  sil
  40471e:	movzx  ecx,WORD PTR [rsp+0xc]
  404723:	mov    eax,edx
  404725:	shl    esi,0x2
  404728:	sub    eax,r12d
  40472b:	dec    ecx
  40472d:	sub    eax,esi
  40472f:	and    eax,ecx
  404731:	lea    ecx,[rax+r12*1]
  404735:	mov    DWORD PTR [rsp+0x1c],ecx
  404739:	mov    ecx,DWORD PTR [rbx+0x100]
  40473f:	mov    QWORD PTR [rsp+0x20],0x0
  404748:	mov    DWORD PTR [rsp+0x28],0x0
  404750:	xor    r8d,r8d
  404753:	test   ecx,ecx
  404755:	je     404781 <flatcc_builder_embed_buffer@@Base+0xd1>
  404757:	lea    rcx,[rsp+0x1c]
  40475c:	mov    QWORD PTR [rsp+0x20],0x4
  404765:	mov    QWORD PTR [rsp+0x30],rcx
  40476a:	mov    QWORD PTR [rsp+0x38],0x4
  404773:	mov    DWORD PTR [rsp+0x28],0x1
  40477b:	mov    r8d,0x4
  404781:	test   r12,r12
  404784:	je     4047aa <flatcc_builder_embed_buffer@@Base+0xfa>
  404786:	movsxd rsi,DWORD PTR [rsp+0x28]
  40478b:	add    r8,r12
  40478e:	mov    rcx,rsi
  404791:	inc    ecx
  404793:	shl    rsi,0x4
  404797:	mov    QWORD PTR [rsp+0x20],r8
  40479c:	mov    QWORD PTR [rsp+rsi*1+0x30],rbp
  4047a1:	mov    QWORD PTR [rsp+rsi*1+0x38],r12
  4047a6:	mov    DWORD PTR [rsp+0x28],ecx
  4047aa:	test   eax,eax
  4047ac:	jne    404810 <flatcc_builder_embed_buffer@@Base+0x160>
  4047ae:	mov    ebp,edx
  4047b0:	sub    ebp,r8d
  4047b3:	cmp    edx,ebp
  4047b5:	jle    404844 <flatcc_builder_embed_buffer@@Base+0x194>
  4047bb:	movabs rax,0x10000000f
  4047c5:	cmp    r8,rax
  4047c8:	ja     404844 <flatcc_builder_embed_buffer@@Base+0x194>
  4047ca:	mov    rdi,QWORD PTR [rbx+0x38]
  4047ce:	mov    edx,DWORD PTR [rsp+0x28]
  4047d2:	lea    rsi,[rsp+0x30]
  4047d7:	mov    ecx,ebp
  4047d9:	call   QWORD PTR [rbx+0x48]
  4047dc:	test   eax,eax
  4047de:	jne    404868 <flatcc_builder_embed_buffer@@Base+0x1b8>
  4047e4:	mov    DWORD PTR [rbx+0xf0],ebp
  4047ea:	mov    rdi,QWORD PTR [rsp+0xb8]
  4047f2:	xor    rdi,QWORD PTR fs:0x28
  4047fb:	mov    eax,ebp
  4047fd:	jne    404863 <flatcc_builder_embed_buffer@@Base+0x1b3>
  4047ff:	add    rsp,0xc8
  404806:	pop    rbx
  404807:	pop    rbp
  404808:	pop    r12
  40480a:	pop    r13
  40480c:	ret    
  40480d:	nop    DWORD PTR [rax]
  404810:	movsxd rsi,DWORD PTR [rsp+0x28]
  404815:	mov    rdi,0x409e80
  40481c:	mov    rcx,rsi
  40481f:	add    r8,rax
  404822:	shl    rsi,0x4
  404826:	inc    ecx
  404828:	mov    QWORD PTR [rsp+0x20],r8
  40482d:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  404832:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  404837:	mov    DWORD PTR [rsp+0x28],ecx
  40483b:	jmp    4047ae <flatcc_builder_embed_buffer@@Base+0xfe>
  404840:	xor    ebp,ebp
  404842:	jmp    4047ea <flatcc_builder_embed_buffer@@Base+0x13a>
  404844:	lea    rcx,[rip+0x5585]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  40484b:	mov    edx,0x287
  404850:	lea    rsi,[rip+0x4b31]        # 409388 <_IO_stdin_used@@Base+0x388>
  404857:	lea    rdi,[rip+0x4ec1]        # 40971f <_IO_stdin_used@@Base+0x71f>
  40485e:	call   403130 <__assert_fail@plt>
  404863:	call   403120 <__stack_chk_fail@plt>
  404868:	call   403e20 <flatcc_builder_default_alloc@@Base+0x2d0>
  40486d:	nop    DWORD PTR [rax]

0000000000404870 <flatcc_builder_create_buffer@@Base>:
  404870:	endbr64 
  404874:	push   r14
  404876:	movzx  edx,dx
  404879:	mov    r14,rsi
  40487c:	push   r13
  40487e:	mov    r13d,r9d
  404881:	push   r12
  404883:	mov    r12d,r9d
  404886:	and    r12d,0x1
  40488a:	push   rbp
  40488b:	mov    rbp,rdi
  40488e:	push   rbx
  40488f:	mov    ebx,ecx
  404891:	mov    ecx,r12d
  404894:	sub    rsp,0xc0
  40489b:	mov    WORD PTR [rsp+0xc],r8w
  4048a1:	lea    rsi,[rsp+0xc]
  4048a6:	mov    rax,QWORD PTR fs:0x28
  4048af:	mov    QWORD PTR [rsp+0xb8],rax
  4048b7:	xor    eax,eax
  4048b9:	mov    DWORD PTR [rsp+0x1c],0x0
  4048c1:	call   403ce0 <flatcc_builder_default_alloc@@Base+0x190>
  4048c6:	test   eax,eax
  4048c8:	jne    404a68 <flatcc_builder_create_buffer@@Base+0x1f8>
  4048ce:	movzx  esi,WORD PTR [rsp+0xc]
  4048d3:	cmp    si,WORD PTR [rbp+0xe8]
  4048da:	jbe    4048e3 <flatcc_builder_create_buffer@@Base+0x73>
  4048dc:	mov    WORD PTR [rbp+0xe8],si
  4048e3:	mov    edx,DWORD PTR [rsp+0x1c]
  4048e7:	test   r14,r14
  4048ea:	je     4048f3 <flatcc_builder_create_buffer@@Base+0x83>
  4048ec:	mov    edx,DWORD PTR [r14]
  4048ef:	mov    DWORD PTR [rsp+0x1c],edx
  4048f3:	test   edx,edx
  4048f5:	mov    eax,0x4
  4048fa:	mov    ecx,DWORD PTR [rbp+0xf0]
  404900:	cmovne rdx,rax
  404904:	xor    edi,edi
  404906:	test   r13b,0x2
  40490a:	setne  dil
  40490e:	lea    eax,[rcx-0x4]
  404911:	shl    edi,0x2
  404914:	sub    eax,edx
  404916:	sub    eax,edi
  404918:	dec    esi
  40491a:	and    eax,esi
  40491c:	and    r13d,0x3
  404920:	jne    404a38 <flatcc_builder_create_buffer@@Base+0x1c8>
  404926:	xor    r9d,r9d
  404929:	mov    esi,0x1
  40492e:	mov    r8d,0x4
  404934:	movsxd rdi,r9d
  404937:	shl    rdi,0x4
  40493b:	lea    r10,[rsp+0x14]
  404940:	mov    QWORD PTR [rsp+0x20],r8
  404945:	mov    QWORD PTR [rsp+rdi*1+0x30],r10
  40494a:	mov    QWORD PTR [rsp+rdi*1+0x38],0x4
  404953:	mov    DWORD PTR [rsp+0x28],esi
  404957:	test   edx,edx
  404959:	je     40497f <flatcc_builder_create_buffer@@Base+0x10f>
  40495b:	shl    rsi,0x4
  40495f:	add    r8,rdx
  404962:	lea    rdi,[rsp+0x1c]
  404967:	add    r9d,0x2
  40496b:	mov    QWORD PTR [rsp+0x20],r8
  404970:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  404975:	mov    QWORD PTR [rsp+rsi*1+0x38],rdx
  40497a:	mov    DWORD PTR [rsp+0x28],r9d
  40497f:	test   eax,eax
  404981:	je     4049ae <flatcc_builder_create_buffer@@Base+0x13e>
  404983:	movsxd rsi,DWORD PTR [rsp+0x28]
  404988:	mov    rdi,0x409e80
  40498f:	mov    rdx,rsi
  404992:	add    r8,rax
  404995:	shl    rsi,0x4
  404999:	inc    edx
  40499b:	mov    QWORD PTR [rsp+0x20],r8
  4049a0:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  4049a5:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  4049aa:	mov    DWORD PTR [rsp+0x28],edx
  4049ae:	mov    eax,ecx
  4049b0:	sub    eax,r8d
  4049b3:	lea    edx,[rax+0x4]
  4049b6:	test   r13d,r13d
  4049b9:	cmovne eax,edx
  4049bc:	test   r12d,r12d
  4049bf:	je     404a70 <flatcc_builder_create_buffer@@Base+0x200>
  4049c5:	mov    edx,DWORD PTR [rbp+0xf8]
  4049cb:	sub    edx,eax
  4049cd:	sub    ebx,eax
  4049cf:	mov    DWORD PTR [rsp+0x14],ebx
  4049d3:	mov    ebx,ecx
  4049d5:	sub    ebx,r8d
  4049d8:	mov    DWORD PTR [rsp+0x18],edx
  4049dc:	cmp    ecx,ebx
  4049de:	jle    404a7d <flatcc_builder_create_buffer@@Base+0x20d>
  4049e4:	mov    rdi,QWORD PTR [rbp+0x38]
  4049e8:	mov    edx,DWORD PTR [rsp+0x28]
  4049ec:	lea    rsi,[rsp+0x30]
  4049f1:	mov    ecx,ebx
  4049f3:	call   QWORD PTR [rbp+0x48]
  4049f6:	test   eax,eax
  4049f8:	jne    404aa1 <flatcc_builder_create_buffer@@Base+0x231>
  4049fe:	mov    DWORD PTR [rbp+0xf0],ebx
  404a04:	test   ebx,ebx
  404a06:	je     404aa6 <flatcc_builder_create_buffer@@Base+0x236>
  404a0c:	mov    rcx,QWORD PTR [rsp+0xb8]
  404a14:	xor    rcx,QWORD PTR fs:0x28
  404a1d:	mov    eax,ebx
  404a1f:	jne    404a9c <flatcc_builder_create_buffer@@Base+0x22c>
  404a21:	add    rsp,0xc0
  404a28:	pop    rbx
  404a29:	pop    rbp
  404a2a:	pop    r12
  404a2c:	pop    r13
  404a2e:	pop    r14
  404a30:	ret    
  404a31:	nop    DWORD PTR [rax+0x0]
  404a38:	lea    rsi,[rsp+0x18]
  404a3d:	mov    QWORD PTR [rsp+0x30],rsi
  404a42:	mov    QWORD PTR [rsp+0x38],0x4
  404a4b:	mov    esi,0x2
  404a50:	mov    r9d,0x1
  404a56:	mov    r8d,0x8
  404a5c:	jmp    404934 <flatcc_builder_create_buffer@@Base+0xc4>
  404a61:	nop    DWORD PTR [rax+0x0]
  404a68:	xor    ebx,ebx
  404a6a:	jmp    404a0c <flatcc_builder_create_buffer@@Base+0x19c>
  404a6c:	nop    DWORD PTR [rax+0x0]
  404a70:	mov    edx,DWORD PTR [rbp+0xf4]
  404a76:	sub    edx,eax
  404a78:	jmp    4049cd <flatcc_builder_create_buffer@@Base+0x15d>
  404a7d:	lea    rcx,[rip+0x534c]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  404a84:	mov    edx,0x287
  404a89:	lea    rsi,[rip+0x48f8]        # 409388 <_IO_stdin_used@@Base+0x388>
  404a90:	lea    rdi,[rip+0x4c88]        # 40971f <_IO_stdin_used@@Base+0x71f>
  404a97:	call   403130 <__assert_fail@plt>
  404a9c:	call   403120 <__stack_chk_fail@plt>
  404aa1:	call   403e20 <flatcc_builder_default_alloc@@Base+0x2d0>
  404aa6:	lea    rcx,[rip+0x5303]        # 409db0 <_IO_stdin_used@@Base+0xdb0>
  404aad:	mov    edx,0x304
  404ab2:	lea    rsi,[rip+0x48cf]        # 409388 <_IO_stdin_used@@Base+0x388>
  404ab9:	lea    rdi,[rip+0x4c5f]        # 40971f <_IO_stdin_used@@Base+0x71f>
  404ac0:	call   403130 <__assert_fail@plt>
  404ac5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000404ad0 <flatcc_builder_create_struct@@Base>:
  404ad0:	endbr64 
  404ad4:	push   rbp
  404ad5:	push   rbx
  404ad6:	sub    rsp,0xa8
  404add:	mov    rax,QWORD PTR fs:0x28
  404ae6:	mov    QWORD PTR [rsp+0x98],rax
  404aee:	xor    eax,eax
  404af0:	test   cx,cx
  404af3:	je     404c13 <flatcc_builder_create_struct@@Base+0x143>
  404af9:	mov    r8,rdx
  404afc:	mov    rbx,rdi
  404aff:	movzx  edx,cx
  404b02:	cmp    cx,WORD PTR [rdi+0xe8]
  404b09:	jbe    404b12 <flatcc_builder_create_struct@@Base+0x42>
  404b0b:	mov    WORD PTR [rdi+0xe8],cx
  404b12:	mov    ecx,DWORD PTR [rbx+0xf0]
  404b18:	dec    edx
  404b1a:	mov    eax,ecx
  404b1c:	sub    eax,r8d
  404b1f:	and    eax,edx
  404b21:	mov    edx,eax
  404b23:	mov    QWORD PTR [rsp],0x0
  404b2b:	mov    DWORD PTR [rsp+0x8],0x0
  404b33:	test   r8,r8
  404b36:	jne    404bc8 <flatcc_builder_create_struct@@Base+0xf8>
  404b3c:	test   eax,eax
  404b3e:	je     404bf4 <flatcc_builder_create_struct@@Base+0x124>
  404b44:	mov    r8,rdx
  404b47:	mov    esi,0x1
  404b4c:	xor    eax,eax
  404b4e:	mov    rdi,0x409e80
  404b55:	shl    rax,0x4
  404b59:	mov    QWORD PTR [rsp],r8
  404b5d:	mov    QWORD PTR [rsp+rax*1+0x10],rdi
  404b62:	mov    QWORD PTR [rsp+rax*1+0x18],rdx
  404b67:	mov    DWORD PTR [rsp+0x8],esi
  404b6b:	mov    ebp,ecx
  404b6d:	movabs rax,0x10000000f
  404b77:	sub    ebp,r8d
  404b7a:	cmp    r8,rax
  404b7d:	ja     404bf4 <flatcc_builder_create_struct@@Base+0x124>
  404b7f:	cmp    ecx,ebp
  404b81:	jle    404bf4 <flatcc_builder_create_struct@@Base+0x124>
  404b83:	mov    rdi,QWORD PTR [rbx+0x38]
  404b87:	mov    edx,DWORD PTR [rsp+0x8]
  404b8b:	lea    rsi,[rsp+0x10]
  404b90:	mov    ecx,ebp
  404b92:	call   QWORD PTR [rbx+0x48]
  404b95:	test   eax,eax
  404b97:	jne    404c32 <flatcc_builder_create_struct@@Base+0x162>
  404b9d:	mov    DWORD PTR [rbx+0xf0],ebp
  404ba3:	mov    eax,ebp
  404ba5:	mov    rdi,QWORD PTR [rsp+0x98]
  404bad:	xor    rdi,QWORD PTR fs:0x28
  404bb6:	jne    404c37 <flatcc_builder_create_struct@@Base+0x167>
  404bb8:	add    rsp,0xa8
  404bbf:	pop    rbx
  404bc0:	pop    rbp
  404bc1:	ret    
  404bc2:	nop    WORD PTR [rax+rax*1+0x0]
  404bc8:	mov    QWORD PTR [rsp],r8
  404bcc:	mov    QWORD PTR [rsp+0x10],rsi
  404bd1:	mov    QWORD PTR [rsp+0x18],r8
  404bd6:	mov    DWORD PTR [rsp+0x8],0x1
  404bde:	test   eax,eax
  404be0:	je     404b6b <flatcc_builder_create_struct@@Base+0x9b>
  404be2:	add    r8,rdx
  404be5:	mov    esi,0x2
  404bea:	mov    eax,0x1
  404bef:	jmp    404b4e <flatcc_builder_create_struct@@Base+0x7e>
  404bf4:	lea    rcx,[rip+0x51d5]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  404bfb:	mov    edx,0x287
  404c00:	lea    rsi,[rip+0x4781]        # 409388 <_IO_stdin_used@@Base+0x388>
  404c07:	lea    rdi,[rip+0x4b11]        # 40971f <_IO_stdin_used@@Base+0x71f>
  404c0e:	call   403130 <__assert_fail@plt>
  404c13:	lea    rcx,[rip+0x5176]        # 409d90 <_IO_stdin_used@@Base+0xd90>
  404c1a:	mov    edx,0x30f
  404c1f:	lea    rsi,[rip+0x4762]        # 409388 <_IO_stdin_used@@Base+0x388>
  404c26:	lea    rdi,[rip+0x4b2d]        # 40975a <_IO_stdin_used@@Base+0x75a>
  404c2d:	call   403130 <__assert_fail@plt>
  404c32:	call   403e20 <flatcc_builder_default_alloc@@Base+0x2d0>
  404c37:	call   403120 <__stack_chk_fail@plt>
  404c3c:	nop    DWORD PTR [rax+0x0]

0000000000404c40 <flatcc_builder_start_buffer@@Base>:
  404c40:	endbr64 
  404c44:	push   r13
  404c46:	mov    r13d,edx
  404c49:	push   r12
  404c4b:	mov    r12d,ecx
  404c4e:	push   rbp
  404c4f:	mov    rbp,rsi
  404c52:	push   rbx
  404c53:	mov    rbx,rdi
  404c56:	sub    rsp,0x8
  404c5a:	movzx  esi,WORD PTR [rdi+0xe8]
  404c61:	call   403e80 <flatcc_builder_default_alloc@@Base+0x330>
  404c66:	test   eax,eax
  404c68:	jne    404d18 <flatcc_builder_start_buffer@@Base+0xd8>
  404c6e:	movzx  edx,WORD PTR [rbx+0xec]
  404c75:	mov    rsi,QWORD PTR [rbx+0x30]
  404c79:	mov    ecx,0x1
  404c7e:	mov    WORD PTR [rbx+0xe8],cx
  404c85:	mov    WORD PTR [rsi+0x22],dx
  404c89:	movzx  edx,WORD PTR [rbx+0x10c]
  404c90:	mov    WORD PTR [rbx+0xec],r13w
  404c98:	mov    WORD PTR [rsi+0x20],dx
  404c9c:	mov    edx,DWORD PTR [rbx+0xf8]
  404ca2:	mov    WORD PTR [rbx+0x10c],r12w
  404caa:	mov    DWORD PTR [rsi+0x14],edx
  404cad:	mov    edx,DWORD PTR [rbx+0x100]
  404cb3:	mov    DWORD PTR [rsi+0x1c],edx
  404cb6:	mov    edx,DWORD PTR [rbx+0xf0]
  404cbc:	mov    DWORD PTR [rbx+0xf8],edx
  404cc2:	mov    edx,DWORD PTR [rbx+0xfc]
  404cc8:	lea    ecx,[rdx+0x1]
  404ccb:	mov    DWORD PTR [rbx+0x100],edx
  404cd1:	mov    edx,DWORD PTR [rbx+0x110]
  404cd7:	mov    DWORD PTR [rbx+0xfc],ecx
  404cdd:	mov    DWORD PTR [rsi+0x10],edx
  404ce0:	test   rbp,rbp
  404ce3:	je     404d08 <flatcc_builder_start_buffer@@Base+0xc8>
  404ce5:	mov    edx,DWORD PTR [rbp+0x0]
  404ce8:	mov    DWORD PTR [rbx+0x110],edx
  404cee:	mov    edx,0x1
  404cf3:	mov    WORD PTR [rsi+0xe],dx
  404cf7:	add    rsp,0x8
  404cfb:	pop    rbx
  404cfc:	pop    rbp
  404cfd:	pop    r12
  404cff:	pop    r13
  404d01:	ret    
  404d02:	nop    WORD PTR [rax+rax*1+0x0]
  404d08:	mov    rbp,0x409e80
  404d0f:	jmp    404ce5 <flatcc_builder_start_buffer@@Base+0xa5>
  404d11:	nop    DWORD PTR [rax+0x0]
  404d18:	mov    eax,0xffffffff
  404d1d:	jmp    404cf7 <flatcc_builder_start_buffer@@Base+0xb7>
  404d1f:	nop

0000000000404d20 <flatcc_builder_end_buffer@@Base>:
  404d20:	endbr64 
  404d24:	push   rbp
  404d25:	xor    eax,eax
  404d27:	push   rbx
  404d28:	sub    rsp,0x8
  404d2c:	movzx  r9d,WORD PTR [rdi+0x10c]
  404d34:	mov    edx,DWORD PTR [rdi+0x100]
  404d3a:	and    r9d,0x2
  404d3e:	test   edx,edx
  404d40:	setne  al
  404d43:	movzx  r9d,r9w
  404d47:	or     r9d,eax
  404d4a:	mov    rax,QWORD PTR [rdi+0x30]
  404d4e:	cmp    WORD PTR [rax+0xe],0x1
  404d53:	jne    404e44 <flatcc_builder_end_buffer@@Base+0x124>
  404d59:	movzx  edx,WORD PTR [rdi+0xec]
  404d60:	movzx  eax,WORD PTR [rdi+0xe8]
  404d67:	mov    rbx,rdi
  404d6a:	mov    ecx,esi
  404d6c:	mov    r8d,edx
  404d6f:	cmp    dx,ax
  404d72:	ja     404e38 <flatcc_builder_end_buffer@@Base+0x118>
  404d78:	movzx  r8d,ax
  404d7c:	lea    rsi,[rbx+0x110]
  404d83:	mov    rdi,rbx
  404d86:	call   404870 <flatcc_builder_create_buffer@@Base>
  404d8b:	mov    ebp,eax
  404d8d:	test   eax,eax
  404d8f:	je     404e2c <flatcc_builder_end_buffer@@Base+0x10c>
  404d95:	mov    rax,QWORD PTR [rbx+0x30]
  404d99:	mov    rdi,QWORD PTR [rbx+0x18]
  404d9d:	mov    edx,DWORD PTR [rax+0x14]
  404da0:	xor    esi,esi
  404da2:	mov    DWORD PTR [rbx+0xf8],edx
  404da8:	mov    edx,DWORD PTR [rax+0x1c]
  404dab:	mov    DWORD PTR [rbx+0x100],edx
  404db1:	mov    edx,DWORD PTR [rax+0x10]
  404db4:	movzx  eax,WORD PTR [rax+0x20]
  404db8:	mov    DWORD PTR [rbx+0x110],edx
  404dbe:	mov    WORD PTR [rbx+0x10c],ax
  404dc5:	mov    edx,DWORD PTR [rbx+0x20]
  404dc8:	call   403140 <memset@plt>
  404dcd:	mov    rax,QWORD PTR [rbx+0x30]
  404dd1:	mov    edi,DWORD PTR [rbx+0x70]
  404dd4:	mov    edx,DWORD PTR [rax+0x8]
  404dd7:	mov    esi,DWORD PTR [rax]
  404dd9:	mov    ecx,DWORD PTR [rax+0x4]
  404ddc:	mov    DWORD PTR [rbx+0x20],edx
  404ddf:	mov    rdx,rsi
  404de2:	sub    edi,edx
  404de4:	mov    DWORD PTR [rbx+0x28],esi
  404de7:	mov    edx,edi
  404de9:	add    rsi,QWORD PTR [rbx+0x68]
  404ded:	cmp    ecx,edi
  404def:	cmovb  edx,ecx
  404df2:	mov    QWORD PTR [rbx+0x18],rsi
  404df6:	mov    DWORD PTR [rbx+0x24],edx
  404df9:	movzx  edx,WORD PTR [rbx+0xea]
  404e00:	mov    DWORD PTR [rax+0x4],ecx
  404e03:	cmp    dx,WORD PTR [rbx+0xe8]
  404e0a:	jbe    404e13 <flatcc_builder_end_buffer@@Base+0xf3>
  404e0c:	mov    WORD PTR [rbx+0xe8],dx
  404e13:	movzx  edx,WORD PTR [rax+0xc]
  404e17:	sub    rax,0x24
  404e1b:	dec    DWORD PTR [rbx+0x104]
  404e21:	mov    WORD PTR [rbx+0xea],dx
  404e28:	mov    QWORD PTR [rbx+0x30],rax
  404e2c:	add    rsp,0x8
  404e30:	pop    rbx
  404e31:	mov    eax,ebp
  404e33:	pop    rbp
  404e34:	ret    
  404e35:	nop    DWORD PTR [rax]
  404e38:	mov    WORD PTR [rbx+0xe8],dx
  404e3f:	jmp    404d7c <flatcc_builder_end_buffer@@Base+0x5c>
  404e44:	lea    rcx,[rip+0x4f25]        # 409d70 <_IO_stdin_used@@Base+0xd70>
  404e4b:	mov    edx,0x346
  404e50:	lea    rsi,[rip+0x4531]        # 409388 <_IO_stdin_used@@Base+0x388>
  404e57:	lea    rdi,[rip+0x45aa]        # 409408 <_IO_stdin_used@@Base+0x408>
  404e5e:	call   403130 <__assert_fail@plt>
  404e63:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404e6e:	xchg   ax,ax

0000000000404e70 <flatcc_builder_start_struct@@Base>:
  404e70:	endbr64 
  404e74:	push   r12
  404e76:	push   rbp
  404e77:	mov    rbp,rsi
  404e7a:	movzx  esi,dx
  404e7d:	push   rbx
  404e7e:	mov    rbx,rdi
  404e81:	call   403e80 <flatcc_builder_default_alloc@@Base+0x330>
  404e86:	test   eax,eax
  404e88:	jne    404f10 <flatcc_builder_start_struct@@Base+0xa0>
  404e8e:	mov    rcx,QWORD PTR [rbx+0x30]
  404e92:	mov    eax,0x2
  404e97:	mov    WORD PTR [rcx+0xe],ax
  404e9b:	mov    eax,DWORD PTR [rbx+0x28]
  404e9e:	mov    edi,DWORD PTR [rbx+0x70]
  404ea1:	mov    rdx,rax
  404ea4:	sub    edi,edx
  404ea6:	add    rax,QWORD PTR [rbx+0x68]
  404eaa:	mov    QWORD PTR [rbx+0x18],rax
  404eae:	mov    edx,edi
  404eb0:	cmp    edi,0xfffffffc
  404eb3:	ja     404ee0 <flatcc_builder_start_struct@@Base+0x70>
  404eb5:	mov    DWORD PTR [rbx+0x24],edi
  404eb8:	mov    r12d,DWORD PTR [rbx+0x20]
  404ebc:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404ec3:	mov    rsi,r12
  404ec6:	add    esi,ebp
  404ec8:	mov    DWORD PTR [rbx+0x20],esi
  404ecb:	cmp    esi,edx
  404ecd:	jae    404ef0 <flatcc_builder_start_struct@@Base+0x80>
  404ecf:	pop    rbx
  404ed0:	pop    rbp
  404ed1:	add    rax,r12
  404ed4:	pop    r12
  404ed6:	ret    
  404ed7:	nop    WORD PTR [rax+rax*1+0x0]
  404ee0:	mov    DWORD PTR [rbx+0x24],0xfffffffc
  404ee7:	mov    edx,0xfffffffc
  404eec:	jmp    404eb8 <flatcc_builder_start_struct@@Base+0x48>
  404eee:	xchg   ax,ax
  404ef0:	inc    esi
  404ef2:	mov    edx,0xfffffffc
  404ef7:	mov    rdi,rbx
  404efa:	call   403af0 <emit_test@@Base+0x5b0>
  404eff:	test   eax,eax
  404f01:	jne    404f10 <flatcc_builder_start_struct@@Base+0xa0>
  404f03:	mov    rax,QWORD PTR [rbx+0x18]
  404f07:	jmp    404ecf <flatcc_builder_start_struct@@Base+0x5f>
  404f09:	nop    DWORD PTR [rax+0x0]
  404f10:	pop    rbx
  404f11:	pop    rbp
  404f12:	xor    eax,eax
  404f14:	pop    r12
  404f16:	ret    
  404f17:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404f20 <flatcc_builder_struct_edit@@Base>:
  404f20:	endbr64 
  404f24:	mov    rax,QWORD PTR [rdi+0x18]
  404f28:	ret    
  404f29:	nop    DWORD PTR [rax+0x0]

0000000000404f30 <flatcc_builder_end_struct@@Base>:
  404f30:	endbr64 
  404f34:	push   rbp
  404f35:	push   rbx
  404f36:	sub    rsp,0x8
  404f3a:	mov    rax,QWORD PTR [rdi+0x30]
  404f3e:	cmp    WORD PTR [rax+0xe],0x2
  404f43:	jne    404fe6 <flatcc_builder_end_struct@@Base+0xb6>
  404f49:	movzx  ecx,WORD PTR [rdi+0xea]
  404f50:	mov    edx,DWORD PTR [rdi+0x20]
  404f53:	mov    rsi,QWORD PTR [rdi+0x18]
  404f57:	mov    rbx,rdi
  404f5a:	call   404ad0 <flatcc_builder_create_struct@@Base>
  404f5f:	mov    ebp,eax
  404f61:	test   eax,eax
  404f63:	jne    404f70 <flatcc_builder_end_struct@@Base+0x40>
  404f65:	add    rsp,0x8
  404f69:	pop    rbx
  404f6a:	mov    eax,ebp
  404f6c:	pop    rbp
  404f6d:	ret    
  404f6e:	xchg   ax,ax
  404f70:	mov    edx,DWORD PTR [rbx+0x20]
  404f73:	mov    rdi,QWORD PTR [rbx+0x18]
  404f77:	xor    esi,esi
  404f79:	call   403140 <memset@plt>
  404f7e:	mov    rax,QWORD PTR [rbx+0x30]
  404f82:	mov    edi,DWORD PTR [rbx+0x70]
  404f85:	mov    edx,DWORD PTR [rax+0x8]
  404f88:	mov    esi,DWORD PTR [rax]
  404f8a:	mov    ecx,DWORD PTR [rax+0x4]
  404f8d:	mov    DWORD PTR [rbx+0x20],edx
  404f90:	mov    rdx,rsi
  404f93:	sub    edi,edx
  404f95:	mov    DWORD PTR [rbx+0x28],esi
  404f98:	mov    edx,edi
  404f9a:	add    rsi,QWORD PTR [rbx+0x68]
  404f9e:	cmp    ecx,edi
  404fa0:	cmovb  edx,ecx
  404fa3:	mov    QWORD PTR [rbx+0x18],rsi
  404fa7:	mov    DWORD PTR [rbx+0x24],edx
  404faa:	movzx  edx,WORD PTR [rbx+0xea]
  404fb1:	mov    DWORD PTR [rax+0x4],ecx
  404fb4:	cmp    dx,WORD PTR [rbx+0xe8]
  404fbb:	jbe    404fc4 <flatcc_builder_end_struct@@Base+0x94>
  404fbd:	mov    WORD PTR [rbx+0xe8],dx
  404fc4:	movzx  edx,WORD PTR [rax+0xc]
  404fc8:	dec    DWORD PTR [rbx+0x104]
  404fce:	sub    rax,0x24
  404fd2:	mov    QWORD PTR [rbx+0x30],rax
  404fd6:	mov    WORD PTR [rbx+0xea],dx
  404fdd:	add    rsp,0x8
  404fe1:	mov    eax,ebp
  404fe3:	pop    rbx
  404fe4:	pop    rbp
  404fe5:	ret    
  404fe6:	lea    rcx,[rip+0x4d63]        # 409d50 <_IO_stdin_used@@Base+0xd50>
  404fed:	mov    edx,0x368
  404ff2:	lea    rsi,[rip+0x438f]        # 409388 <_IO_stdin_used@@Base+0x388>
  404ff9:	lea    rdi,[rip+0x4438]        # 409438 <_IO_stdin_used@@Base+0x438>
  405000:	call   403130 <__assert_fail@plt>
  405005:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000405010 <flatcc_builder_extend_vector@@Base>:
  405010:	endbr64 
  405014:	push   rbp
  405015:	mov    eax,esi
  405017:	push   rbx
  405018:	sub    rsp,0x8
  40501c:	mov    rdx,QWORD PTR [rdi+0x30]
  405020:	add    eax,DWORD PTR [rdx+0x14]
  405023:	setb   cl
  405026:	cmp    DWORD PTR [rdx+0x18],eax
  405029:	jb     405074 <flatcc_builder_extend_vector@@Base+0x64>
  40502b:	movzx  ecx,cl
  40502e:	test   ecx,ecx
  405030:	jne    405074 <flatcc_builder_extend_vector@@Base+0x64>
  405032:	imul   esi,DWORD PTR [rdx+0x10]
  405036:	mov    ebp,DWORD PTR [rdi+0x20]
  405039:	mov    DWORD PTR [rdx+0x14],eax
  40503c:	add    esi,ebp
  40503e:	mov    rbx,rdi
  405041:	mov    DWORD PTR [rdi+0x20],esi
  405044:	cmp    esi,DWORD PTR [rdi+0x24]
  405047:	jae    405060 <flatcc_builder_extend_vector@@Base+0x50>
  405049:	mov    rax,QWORD PTR [rbx+0x18]
  40504d:	add    rax,rbp
  405050:	add    rsp,0x8
  405054:	pop    rbx
  405055:	pop    rbp
  405056:	ret    
  405057:	nop    WORD PTR [rax+rax*1+0x0]
  405060:	inc    esi
  405062:	mov    edx,0xfffffffc
  405067:	call   403af0 <emit_test@@Base+0x5b0>
  40506c:	test   eax,eax
  40506e:	je     405049 <flatcc_builder_extend_vector@@Base+0x39>
  405070:	xor    eax,eax
  405072:	jmp    405050 <flatcc_builder_extend_vector@@Base+0x40>
  405074:	call   403e50 <flatcc_builder_default_alloc@@Base+0x300>
  405079:	nop    DWORD PTR [rax+0x0]

0000000000405080 <flatcc_builder_vector_push@@Base>:
  405080:	endbr64 
  405084:	push   r13
  405086:	push   r12
  405088:	push   rbp
  405089:	push   rbx
  40508a:	sub    rsp,0x8
  40508e:	mov    rax,QWORD PTR [rdi+0x30]
  405092:	cmp    WORD PTR [rax+0xe],0x4
  405097:	jne    4050fd <flatcc_builder_vector_push@@Base+0x7d>
  405099:	mov    edx,DWORD PTR [rax+0x14]
  40509c:	cmp    edx,DWORD PTR [rax+0x18]
  40509f:	ja     40511c <flatcc_builder_vector_push@@Base+0x9c>
  4050a1:	mov    ebp,DWORD PTR [rdi+0x20]
  4050a4:	mov    r12d,DWORD PTR [rax+0x10]
  4050a8:	mov    rcx,rbp
  4050ab:	inc    edx
  4050ad:	add    ecx,r12d
  4050b0:	mov    DWORD PTR [rax+0x14],edx
  4050b3:	mov    rbx,rdi
  4050b6:	mov    r13,rsi
  4050b9:	mov    DWORD PTR [rdi+0x20],ecx
  4050bc:	cmp    ecx,DWORD PTR [rdi+0x24]
  4050bf:	jae    4050e8 <flatcc_builder_vector_push@@Base+0x68>
  4050c1:	add    rbp,QWORD PTR [rbx+0x18]
  4050c5:	je     4050d5 <flatcc_builder_vector_push@@Base+0x55>
  4050c7:	mov    edx,r12d
  4050ca:	mov    rsi,r13
  4050cd:	mov    rdi,rbp
  4050d0:	call   403170 <memcpy@plt>
  4050d5:	add    rsp,0x8
  4050d9:	pop    rbx
  4050da:	mov    rax,rbp
  4050dd:	pop    rbp
  4050de:	pop    r12
  4050e0:	pop    r13
  4050e2:	ret    
  4050e3:	nop    DWORD PTR [rax+rax*1+0x0]
  4050e8:	lea    esi,[rcx+0x1]
  4050eb:	mov    edx,0xfffffffc
  4050f0:	call   403af0 <emit_test@@Base+0x5b0>
  4050f5:	test   eax,eax
  4050f7:	je     4050c1 <flatcc_builder_vector_push@@Base+0x41>
  4050f9:	xor    ebp,ebp
  4050fb:	jmp    4050d5 <flatcc_builder_vector_push@@Base+0x55>
  4050fd:	lea    rcx,[rip+0x4c0c]        # 409d10 <_IO_stdin_used@@Base+0xd10>
  405104:	mov    edx,0x38b
  405109:	lea    rsi,[rip+0x4278]        # 409388 <_IO_stdin_used@@Base+0x388>
  405110:	lea    rdi,[rip+0x4351]        # 409468 <_IO_stdin_used@@Base+0x468>
  405117:	call   403130 <__assert_fail@plt>
  40511c:	lea    rcx,[rip+0x4bed]        # 409d10 <_IO_stdin_used@@Base+0xd10>
  405123:	mov    edx,0x38c
  405128:	lea    rsi,[rip+0x4259]        # 409388 <_IO_stdin_used@@Base+0x388>
  40512f:	lea    rdi,[rip+0x4362]        # 409498 <_IO_stdin_used@@Base+0x498>
  405136:	call   403130 <__assert_fail@plt>
  40513b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405140 <flatcc_builder_append_vector@@Base>:
  405140:	endbr64 
  405144:	push   r13
  405146:	push   r12
  405148:	push   rbp
  405149:	push   rbx
  40514a:	sub    rsp,0x8
  40514e:	mov    rax,QWORD PTR [rdi+0x30]
  405152:	cmp    WORD PTR [rax+0xe],0x4
  405157:	jne    4051c6 <flatcc_builder_append_vector@@Base+0x86>
  405159:	mov    ecx,edx
  40515b:	mov    r13,rsi
  40515e:	xor    esi,esi
  405160:	add    ecx,DWORD PTR [rax+0x14]
  405163:	setb   sil
  405167:	cmp    DWORD PTR [rax+0x18],ecx
  40516a:	jb     4051e5 <flatcc_builder_append_vector@@Base+0xa5>
  40516c:	test   esi,esi
  40516e:	jne    4051e5 <flatcc_builder_append_vector@@Base+0xa5>
  405170:	mov    ebx,DWORD PTR [rax+0x10]
  405173:	mov    r12d,DWORD PTR [rdi+0x20]
  405177:	imul   ebx,edx
  40517a:	mov    rdx,r12
  40517d:	mov    DWORD PTR [rax+0x14],ecx
  405180:	add    edx,ebx
  405182:	mov    rbp,rdi
  405185:	mov    DWORD PTR [rdi+0x20],edx
  405188:	cmp    edx,DWORD PTR [rdi+0x24]
  40518b:	jae    4051b0 <flatcc_builder_append_vector@@Base+0x70>
  40518d:	add    r12,QWORD PTR [rbp+0x18]
  405191:	je     4051a0 <flatcc_builder_append_vector@@Base+0x60>
  405193:	mov    edx,ebx
  405195:	mov    rsi,r13
  405198:	mov    rdi,r12
  40519b:	call   403170 <memcpy@plt>
  4051a0:	add    rsp,0x8
  4051a4:	pop    rbx
  4051a5:	pop    rbp
  4051a6:	mov    rax,r12
  4051a9:	pop    r12
  4051ab:	pop    r13
  4051ad:	ret    
  4051ae:	xchg   ax,ax
  4051b0:	lea    esi,[rdx+0x1]
  4051b3:	mov    edx,0xfffffffc
  4051b8:	call   403af0 <emit_test@@Base+0x5b0>
  4051bd:	test   eax,eax
  4051bf:	je     40518d <flatcc_builder_append_vector@@Base+0x4d>
  4051c1:	xor    r12d,r12d
  4051c4:	jmp    4051a0 <flatcc_builder_append_vector@@Base+0x60>
  4051c6:	lea    rcx,[rip+0x4b23]        # 409cf0 <_IO_stdin_used@@Base+0xcf0>
  4051cd:	mov    edx,0x393
  4051d2:	lea    rsi,[rip+0x41af]        # 409388 <_IO_stdin_used@@Base+0x388>
  4051d9:	lea    rdi,[rip+0x4288]        # 409468 <_IO_stdin_used@@Base+0x468>
  4051e0:	call   403130 <__assert_fail@plt>
  4051e5:	call   403e50 <flatcc_builder_default_alloc@@Base+0x300>
  4051ea:	nop    WORD PTR [rax+rax*1+0x0]

00000000004051f0 <flatcc_builder_extend_offset_vector@@Base>:
  4051f0:	endbr64 
  4051f4:	push   rbp
  4051f5:	mov    edx,esi
  4051f7:	push   rbx
  4051f8:	sub    rsp,0x8
  4051fc:	mov    rax,QWORD PTR [rdi+0x30]
  405200:	add    edx,DWORD PTR [rax+0x14]
  405203:	jb     405245 <flatcc_builder_extend_offset_vector@@Base+0x55>
  405205:	cmp    edx,0x3fffffff
  40520b:	ja     405245 <flatcc_builder_extend_offset_vector@@Base+0x55>
  40520d:	mov    ebp,DWORD PTR [rdi+0x20]
  405210:	mov    DWORD PTR [rax+0x14],edx
  405213:	lea    eax,[rbp+rsi*4+0x0]
  405217:	mov    rbx,rdi
  40521a:	mov    DWORD PTR [rdi+0x20],eax
  40521d:	cmp    eax,DWORD PTR [rdi+0x24]
  405220:	jae    405230 <flatcc_builder_extend_offset_vector@@Base+0x40>
  405222:	mov    rax,QWORD PTR [rbx+0x18]
  405226:	add    rax,rbp
  405229:	add    rsp,0x8
  40522d:	pop    rbx
  40522e:	pop    rbp
  40522f:	ret    
  405230:	lea    esi,[rax+0x1]
  405233:	mov    edx,0xfffffffc
  405238:	call   403af0 <emit_test@@Base+0x5b0>
  40523d:	test   eax,eax
  40523f:	je     405222 <flatcc_builder_extend_offset_vector@@Base+0x32>
  405241:	xor    eax,eax
  405243:	jmp    405229 <flatcc_builder_extend_offset_vector@@Base+0x39>
  405245:	call   403e50 <flatcc_builder_default_alloc@@Base+0x300>
  40524a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405250 <flatcc_builder_offset_vector_push@@Base>:
  405250:	endbr64 
  405254:	push   r12
  405256:	push   rbp
  405257:	push   rbx
  405258:	mov    rdx,QWORD PTR [rdi+0x30]
  40525c:	cmp    WORD PTR [rdx+0xe],0x5
  405261:	jne    4052b8 <flatcc_builder_offset_vector_push@@Base+0x68>
  405263:	mov    eax,DWORD PTR [rdx+0x14]
  405266:	cmp    eax,0x3fffffff
  40526b:	je     4052b1 <flatcc_builder_offset_vector_push@@Base+0x61>
  40526d:	mov    ebp,DWORD PTR [rdi+0x20]
  405270:	inc    eax
  405272:	mov    DWORD PTR [rdx+0x14],eax
  405275:	lea    edx,[rbp+0x4]
  405278:	mov    rbx,rdi
  40527b:	mov    r12d,esi
  40527e:	mov    DWORD PTR [rdi+0x20],edx
  405281:	cmp    edx,DWORD PTR [rdi+0x24]
  405284:	jae    4052a0 <flatcc_builder_offset_vector_push@@Base+0x50>
  405286:	mov    rax,rbp
  405289:	add    rax,QWORD PTR [rbx+0x18]
  40528d:	je     405292 <flatcc_builder_offset_vector_push@@Base+0x42>
  40528f:	mov    DWORD PTR [rax],r12d
  405292:	pop    rbx
  405293:	pop    rbp
  405294:	pop    r12
  405296:	ret    
  405297:	nop    WORD PTR [rax+rax*1+0x0]
  4052a0:	lea    esi,[rbp+0x5]
  4052a3:	mov    edx,0xfffffffc
  4052a8:	call   403af0 <emit_test@@Base+0x5b0>
  4052ad:	test   eax,eax
  4052af:	je     405286 <flatcc_builder_offset_vector_push@@Base+0x36>
  4052b1:	pop    rbx
  4052b2:	pop    rbp
  4052b3:	xor    eax,eax
  4052b5:	pop    r12
  4052b7:	ret    
  4052b8:	lea    rcx,[rip+0x4a01]        # 409cc0 <_IO_stdin_used@@Base+0xcc0>
  4052bf:	mov    edx,0x3a6
  4052c4:	lea    rsi,[rip+0x40bd]        # 409388 <_IO_stdin_used@@Base+0x388>
  4052cb:	lea    rdi,[rip+0x4206]        # 4094d8 <_IO_stdin_used@@Base+0x4d8>
  4052d2:	call   403130 <__assert_fail@plt>
  4052d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004052e0 <flatcc_builder_append_offset_vector@@Base>:
  4052e0:	endbr64 
  4052e4:	push   r13
  4052e6:	push   r12
  4052e8:	push   rbp
  4052e9:	push   rbx
  4052ea:	sub    rsp,0x8
  4052ee:	mov    rax,QWORD PTR [rdi+0x30]
  4052f2:	cmp    WORD PTR [rax+0xe],0x5
  4052f7:	jne    405366 <flatcc_builder_append_offset_vector@@Base+0x86>
  4052f9:	mov    ecx,edx
  4052fb:	add    ecx,DWORD PTR [rax+0x14]
  4052fe:	jb     405385 <flatcc_builder_append_offset_vector@@Base+0xa5>
  405304:	cmp    ecx,0x3fffffff
  40530a:	ja     405385 <flatcc_builder_append_offset_vector@@Base+0xa5>
  40530c:	mov    r12d,DWORD PTR [rdi+0x20]
  405310:	lea    ebx,[rdx*4+0x0]
  405317:	mov    rdx,r12
  40531a:	add    edx,ebx
  40531c:	mov    DWORD PTR [rax+0x14],ecx
  40531f:	mov    rbp,rdi
  405322:	mov    r13,rsi
  405325:	mov    DWORD PTR [rdi+0x20],edx
  405328:	cmp    edx,DWORD PTR [rdi+0x24]
  40532b:	jae    405350 <flatcc_builder_append_offset_vector@@Base+0x70>
  40532d:	add    r12,QWORD PTR [rbp+0x18]
  405331:	je     405340 <flatcc_builder_append_offset_vector@@Base+0x60>
  405333:	mov    edx,ebx
  405335:	mov    rsi,r13
  405338:	mov    rdi,r12
  40533b:	call   403170 <memcpy@plt>
  405340:	add    rsp,0x8
  405344:	pop    rbx
  405345:	pop    rbp
  405346:	mov    rax,r12
  405349:	pop    r12
  40534b:	pop    r13
  40534d:	ret    
  40534e:	xchg   ax,ax
  405350:	lea    esi,[rdx+0x1]
  405353:	mov    edx,0xfffffffc
  405358:	call   403af0 <emit_test@@Base+0x5b0>
  40535d:	test   eax,eax
  40535f:	je     40532d <flatcc_builder_append_offset_vector@@Base+0x4d>
  405361:	xor    r12d,r12d
  405364:	jmp    405340 <flatcc_builder_append_offset_vector@@Base+0x60>
  405366:	lea    rcx,[rip+0x4913]        # 409c80 <_IO_stdin_used@@Base+0xc80>
  40536d:	mov    edx,0x3b4
  405372:	lea    rsi,[rip+0x400f]        # 409388 <_IO_stdin_used@@Base+0x388>
  405379:	lea    rdi,[rip+0x4158]        # 4094d8 <_IO_stdin_used@@Base+0x4d8>
  405380:	call   403130 <__assert_fail@plt>
  405385:	call   403e50 <flatcc_builder_default_alloc@@Base+0x300>
  40538a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405390 <flatcc_builder_extend_string@@Base>:
  405390:	endbr64 
  405394:	push   rbp
  405395:	push   rbx
  405396:	sub    rsp,0x8
  40539a:	mov    rax,QWORD PTR [rdi+0x30]
  40539e:	cmp    WORD PTR [rax+0xe],0x6
  4053a3:	jne    4053e9 <flatcc_builder_extend_string@@Base+0x59>
  4053a5:	mov    edx,esi
  4053a7:	add    edx,DWORD PTR [rax+0x14]
  4053aa:	jb     4053e4 <flatcc_builder_extend_string@@Base+0x54>
  4053ac:	mov    ebp,DWORD PTR [rdi+0x20]
  4053af:	mov    DWORD PTR [rax+0x14],edx
  4053b2:	add    esi,ebp
  4053b4:	mov    rbx,rdi
  4053b7:	mov    DWORD PTR [rdi+0x20],esi
  4053ba:	cmp    esi,DWORD PTR [rdi+0x24]
  4053bd:	jae    4053d0 <flatcc_builder_extend_string@@Base+0x40>
  4053bf:	mov    rax,QWORD PTR [rbx+0x18]
  4053c3:	add    rax,rbp
  4053c6:	add    rsp,0x8
  4053ca:	pop    rbx
  4053cb:	pop    rbp
  4053cc:	ret    
  4053cd:	nop    DWORD PTR [rax]
  4053d0:	inc    esi
  4053d2:	mov    edx,0xfffffffc
  4053d7:	call   403af0 <emit_test@@Base+0x5b0>
  4053dc:	test   eax,eax
  4053de:	je     4053bf <flatcc_builder_extend_string@@Base+0x2f>
  4053e0:	xor    eax,eax
  4053e2:	jmp    4053c6 <flatcc_builder_extend_string@@Base+0x36>
  4053e4:	call   403e50 <flatcc_builder_default_alloc@@Base+0x300>
  4053e9:	lea    rcx,[rip+0x4860]        # 409c50 <_IO_stdin_used@@Base+0xc50>
  4053f0:	mov    edx,0x3bd
  4053f5:	lea    rsi,[rip+0x3f8c]        # 409388 <_IO_stdin_used@@Base+0x388>
  4053fc:	lea    rdi,[rip+0x410d]        # 409510 <_IO_stdin_used@@Base+0x510>
  405403:	call   403130 <__assert_fail@plt>
  405408:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405410 <flatcc_builder_append_string@@Base>:
  405410:	endbr64 
  405414:	push   r13
  405416:	push   r12
  405418:	push   rbp
  405419:	push   rbx
  40541a:	sub    rsp,0x8
  40541e:	mov    rax,QWORD PTR [rdi+0x30]
  405422:	cmp    WORD PTR [rax+0xe],0x6
  405427:	jne    40548b <flatcc_builder_append_string@@Base+0x7b>
  405429:	mov    rbp,rdx
  40542c:	add    edx,DWORD PTR [rax+0x14]
  40542f:	jb     405486 <flatcc_builder_append_string@@Base+0x76>
  405431:	mov    r12d,DWORD PTR [rdi+0x20]
  405435:	mov    DWORD PTR [rax+0x14],edx
  405438:	mov    rdx,r12
  40543b:	add    edx,ebp
  40543d:	mov    rbx,rdi
  405440:	mov    r13,rsi
  405443:	mov    DWORD PTR [rdi+0x20],edx
  405446:	cmp    edx,DWORD PTR [rdi+0x24]
  405449:	jae    405470 <flatcc_builder_append_string@@Base+0x60>
  40544b:	add    r12,QWORD PTR [rbx+0x18]
  40544f:	je     40545e <flatcc_builder_append_string@@Base+0x4e>
  405451:	mov    edx,ebp
  405453:	mov    rsi,r13
  405456:	mov    rdi,r12
  405459:	call   403170 <memcpy@plt>
  40545e:	add    rsp,0x8
  405462:	pop    rbx
  405463:	pop    rbp
  405464:	mov    rax,r12
  405467:	pop    r12
  405469:	pop    r13
  40546b:	ret    
  40546c:	nop    DWORD PTR [rax+0x0]
  405470:	lea    esi,[rdx+0x1]
  405473:	mov    edx,0xfffffffc
  405478:	call   403af0 <emit_test@@Base+0x5b0>
  40547d:	test   eax,eax
  40547f:	je     40544b <flatcc_builder_append_string@@Base+0x3b>
  405481:	xor    r12d,r12d
  405484:	jmp    40545e <flatcc_builder_append_string@@Base+0x4e>
  405486:	call   403e50 <flatcc_builder_default_alloc@@Base+0x300>
  40548b:	lea    rcx,[rip+0x479e]        # 409c30 <_IO_stdin_used@@Base+0xc30>
  405492:	mov    edx,0x3c6
  405497:	lea    rsi,[rip+0x3eea]        # 409388 <_IO_stdin_used@@Base+0x388>
  40549e:	lea    rdi,[rip+0x406b]        # 409510 <_IO_stdin_used@@Base+0x510>
  4054a5:	call   403130 <__assert_fail@plt>
  4054aa:	nop    WORD PTR [rax+rax*1+0x0]

00000000004054b0 <flatcc_builder_append_string_str@@Base>:
  4054b0:	endbr64 
  4054b4:	push   rbp
  4054b5:	mov    rbp,rdi
  4054b8:	mov    rdi,rsi
  4054bb:	push   rbx
  4054bc:	mov    rbx,rsi
  4054bf:	sub    rsp,0x8
  4054c3:	call   403110 <strlen@plt>
  4054c8:	add    rsp,0x8
  4054cc:	mov    rsi,rbx
  4054cf:	pop    rbx
  4054d0:	mov    rdi,rbp
  4054d3:	mov    rdx,rax
  4054d6:	pop    rbp
  4054d7:	jmp    405410 <flatcc_builder_append_string@@Base>
  4054dc:	nop    DWORD PTR [rax+0x0]

00000000004054e0 <flatcc_builder_append_string_strn@@Base>:
  4054e0:	endbr64 
  4054e4:	push   r12
  4054e6:	mov    r12,rdi
  4054e9:	push   rbp
  4054ea:	mov    rbp,rsi
  4054ed:	mov    rdi,rbp
  4054f0:	push   rbx
  4054f1:	xor    esi,esi
  4054f3:	mov    rbx,rdx
  4054f6:	call   403150 <memchr@plt>
  4054fb:	mov    rdx,rax
  4054fe:	sub    rdx,rbp
  405501:	test   rax,rax
  405504:	cmovne rbx,rdx
  405508:	mov    rsi,rbp
  40550b:	mov    rdx,rbx
  40550e:	pop    rbx
  40550f:	pop    rbp
  405510:	mov    rdi,r12
  405513:	pop    r12
  405515:	jmp    405410 <flatcc_builder_append_string@@Base>
  40551a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405520 <flatcc_builder_truncate_vector@@Base>:
  405520:	endbr64 
  405524:	sub    rsp,0x8
  405528:	mov    rax,QWORD PTR [rdi+0x30]
  40552c:	cmp    WORD PTR [rax+0xe],0x4
  405531:	jne    405566 <flatcc_builder_truncate_vector@@Base+0x46>
  405533:	mov    ecx,DWORD PTR [rax+0x14]
  405536:	mov    rdx,rcx
  405539:	cmp    rcx,rsi
  40553c:	jb     405585 <flatcc_builder_truncate_vector@@Base+0x65>
  40553e:	sub    edx,esi
  405540:	mov    DWORD PTR [rax+0x14],edx
  405543:	imul   esi,DWORD PTR [rax+0x10]
  405547:	mov    eax,DWORD PTR [rdi+0x20]
  40554a:	mov    edx,esi
  40554c:	sub    eax,esi
  40554e:	mov    DWORD PTR [rdi+0x20],eax
  405551:	add    rax,QWORD PTR [rdi+0x18]
  405555:	mov    rdi,rax
  405558:	xor    esi,esi
  40555a:	call   403140 <memset@plt>
  40555f:	xor    eax,eax
  405561:	add    rsp,0x8
  405565:	ret    
  405566:	lea    rcx,[rip+0x46a3]        # 409c10 <_IO_stdin_used@@Base+0xc10>
  40556d:	mov    edx,0x3d9
  405572:	lea    rsi,[rip+0x3e0f]        # 409388 <_IO_stdin_used@@Base+0x388>
  405579:	lea    rdi,[rip+0x3ee8]        # 409468 <_IO_stdin_used@@Base+0x468>
  405580:	call   403130 <__assert_fail@plt>
  405585:	lea    rcx,[rip+0x4684]        # 409c10 <_IO_stdin_used@@Base+0xc10>
  40558c:	mov    edx,0x3da
  405591:	lea    rsi,[rip+0x3df0]        # 409388 <_IO_stdin_used@@Base+0x388>
  405598:	lea    rdi,[rip+0x3fa1]        # 409540 <_IO_stdin_used@@Base+0x540>
  40559f:	call   403130 <__assert_fail@plt>
  4055a4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4055af:	nop

00000000004055b0 <flatcc_builder_truncate_offset_vector@@Base>:
  4055b0:	endbr64 
  4055b4:	sub    rsp,0x8
  4055b8:	mov    rax,QWORD PTR [rdi+0x30]
  4055bc:	cmp    WORD PTR [rax+0xe],0x5
  4055c1:	jne    4055f2 <flatcc_builder_truncate_offset_vector@@Base+0x42>
  4055c3:	mov    edx,DWORD PTR [rax+0x14]
  4055c6:	cmp    edx,esi
  4055c8:	jb     405611 <flatcc_builder_truncate_offset_vector@@Base+0x61>
  4055ca:	sub    edx,esi
  4055cc:	mov    DWORD PTR [rax+0x14],edx
  4055cf:	imul   esi,DWORD PTR [rax+0x10]
  4055d3:	mov    eax,DWORD PTR [rdi+0x20]
  4055d6:	mov    edx,esi
  4055d8:	sub    eax,esi
  4055da:	mov    DWORD PTR [rdi+0x20],eax
  4055dd:	add    rax,QWORD PTR [rdi+0x18]
  4055e1:	mov    rdi,rax
  4055e4:	xor    esi,esi
  4055e6:	call   403140 <memset@plt>
  4055eb:	xor    eax,eax
  4055ed:	add    rsp,0x8
  4055f1:	ret    
  4055f2:	lea    rcx,[rip+0x45e7]        # 409be0 <_IO_stdin_used@@Base+0xbe0>
  4055f9:	mov    edx,0x3e2
  4055fe:	lea    rsi,[rip+0x3d83]        # 409388 <_IO_stdin_used@@Base+0x388>
  405605:	lea    rdi,[rip+0x3ecc]        # 4094d8 <_IO_stdin_used@@Base+0x4d8>
  40560c:	call   403130 <__assert_fail@plt>
  405611:	lea    rcx,[rip+0x45c8]        # 409be0 <_IO_stdin_used@@Base+0xbe0>
  405618:	mov    edx,0x3e3
  40561d:	lea    rsi,[rip+0x3d64]        # 409388 <_IO_stdin_used@@Base+0x388>
  405624:	lea    rdi,[rip+0x3f3d]        # 409568 <_IO_stdin_used@@Base+0x568>
  40562b:	call   403130 <__assert_fail@plt>

0000000000405630 <flatcc_builder_truncate_string@@Base>:
  405630:	endbr64 
  405634:	sub    rsp,0x8
  405638:	mov    rdx,QWORD PTR [rdi+0x30]
  40563c:	cmp    WORD PTR [rdx+0xe],0x6
  405641:	jne    405673 <flatcc_builder_truncate_string@@Base+0x43>
  405643:	mov    ecx,DWORD PTR [rdx+0x14]
  405646:	mov    rax,rcx
  405649:	cmp    rcx,rsi
  40564c:	jb     405692 <flatcc_builder_truncate_string@@Base+0x62>
  40564e:	sub    eax,esi
  405650:	mov    DWORD PTR [rdx+0x14],eax
  405653:	mov    rdx,rsi
  405656:	mov    eax,DWORD PTR [rdi+0x20]
  405659:	sub    eax,esi
  40565b:	mov    DWORD PTR [rdi+0x20],eax
  40565e:	add    rax,QWORD PTR [rdi+0x18]
  405662:	mov    rdi,rax
  405665:	xor    esi,esi
  405667:	call   403140 <memset@plt>
  40566c:	xor    eax,eax
  40566e:	add    rsp,0x8
  405672:	ret    
  405673:	lea    rcx,[rip+0x4546]        # 409bc0 <_IO_stdin_used@@Base+0xbc0>
  40567a:	mov    edx,0x3eb
  40567f:	lea    rsi,[rip+0x3d02]        # 409388 <_IO_stdin_used@@Base+0x388>
  405686:	lea    rdi,[rip+0x3e83]        # 409510 <_IO_stdin_used@@Base+0x510>
  40568d:	call   403130 <__assert_fail@plt>
  405692:	lea    rcx,[rip+0x4527]        # 409bc0 <_IO_stdin_used@@Base+0xbc0>
  405699:	mov    edx,0x3ec
  40569e:	lea    rsi,[rip+0x3ce3]        # 409388 <_IO_stdin_used@@Base+0x388>
  4056a5:	lea    rdi,[rip+0x3efc]        # 4095a8 <_IO_stdin_used@@Base+0x5a8>
  4056ac:	call   403130 <__assert_fail@plt>
  4056b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4056bc:	nop    DWORD PTR [rax+0x0]

00000000004056c0 <flatcc_builder_start_vector@@Base>:
  4056c0:	endbr64 
  4056c4:	push   r12
  4056c6:	cmp    dx,0x4
  4056ca:	mov    r12,rcx
  4056cd:	push   rbp
  4056ce:	mov    rbp,rsi
  4056d1:	mov    esi,0x4
  4056d6:	push   rbx
  4056d7:	cmovae esi,edx
  4056da:	mov    rbx,rdi
  4056dd:	movzx  esi,si
  4056e0:	call   403e80 <flatcc_builder_default_alloc@@Base+0x330>
  4056e5:	test   eax,eax
  4056e7:	jne    405730 <flatcc_builder_start_vector@@Base+0x70>
  4056e9:	mov    rsi,QWORD PTR [rbx+0x30]
  4056ed:	mov    edx,0x4
  4056f2:	mov    WORD PTR [rsi+0xe],dx
  4056f6:	mov    edx,DWORD PTR [rbx+0x28]
  4056f9:	mov    DWORD PTR [rsi+0x10],ebp
  4056fc:	mov    rcx,rdx
  4056ff:	add    rdx,QWORD PTR [rbx+0x68]
  405703:	mov    DWORD PTR [rsi+0x14],0x0
  40570a:	mov    DWORD PTR [rsi+0x18],r12d
  40570e:	mov    QWORD PTR [rbx+0x18],rdx
  405712:	mov    edx,DWORD PTR [rbx+0x70]
  405715:	sub    edx,ecx
  405717:	mov    ecx,0xfffffffc
  40571c:	cmp    edx,ecx
  40571e:	cmova  edx,ecx
  405721:	mov    DWORD PTR [rbx+0x24],edx
  405724:	mov    DWORD PTR [rsi+0x4],ecx
  405727:	pop    rbx
  405728:	pop    rbp
  405729:	pop    r12
  40572b:	ret    
  40572c:	nop    DWORD PTR [rax+0x0]
  405730:	mov    eax,0xffffffff
  405735:	jmp    405727 <flatcc_builder_start_vector@@Base+0x67>
  405737:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405740 <flatcc_builder_start_offset_vector@@Base>:
  405740:	endbr64 
  405744:	push   rbx
  405745:	mov    esi,0x4
  40574a:	mov    rbx,rdi
  40574d:	call   403e80 <flatcc_builder_default_alloc@@Base+0x330>
  405752:	test   eax,eax
  405754:	jne    405790 <flatcc_builder_start_offset_vector@@Base+0x50>
  405756:	mov    rcx,QWORD PTR [rbx+0x30]
  40575a:	xor    edx,edx
  40575c:	mov    QWORD PTR [rcx+0xe],0x40005
  405764:	mov    WORD PTR [rcx+0x16],dx
  405768:	mov    edx,DWORD PTR [rbx+0x28]
  40576b:	mov    rsi,rdx
  40576e:	add    rdx,QWORD PTR [rbx+0x68]
  405772:	mov    QWORD PTR [rbx+0x18],rdx
  405776:	mov    edx,DWORD PTR [rbx+0x70]
  405779:	sub    edx,esi
  40577b:	mov    esi,0xfffffffc
  405780:	cmp    edx,esi
  405782:	cmova  edx,esi
  405785:	mov    DWORD PTR [rbx+0x24],edx
  405788:	mov    DWORD PTR [rcx+0x4],esi
  40578b:	pop    rbx
  40578c:	ret    
  40578d:	nop    DWORD PTR [rax]
  405790:	mov    eax,0xffffffff
  405795:	pop    rbx
  405796:	ret    
  405797:	nop    WORD PTR [rax+rax*1+0x0]

00000000004057a0 <flatcc_builder_start_string@@Base>:
  4057a0:	endbr64 
  4057a4:	push   rbx
  4057a5:	mov    esi,0x1
  4057aa:	mov    rbx,rdi
  4057ad:	call   403e80 <flatcc_builder_default_alloc@@Base+0x330>
  4057b2:	test   eax,eax
  4057b4:	jne    4057f0 <flatcc_builder_start_string@@Base+0x50>
  4057b6:	mov    rcx,QWORD PTR [rbx+0x30]
  4057ba:	xor    edx,edx
  4057bc:	mov    QWORD PTR [rcx+0xe],0x10006
  4057c4:	mov    WORD PTR [rcx+0x16],dx
  4057c8:	mov    edx,DWORD PTR [rbx+0x28]
  4057cb:	mov    rsi,rdx
  4057ce:	add    rdx,QWORD PTR [rbx+0x68]
  4057d2:	mov    QWORD PTR [rbx+0x18],rdx
  4057d6:	mov    edx,DWORD PTR [rbx+0x70]
  4057d9:	sub    edx,esi
  4057db:	mov    esi,0xfffffffc
  4057e0:	cmp    edx,esi
  4057e2:	cmova  edx,esi
  4057e5:	mov    DWORD PTR [rbx+0x24],edx
  4057e8:	mov    DWORD PTR [rcx+0x4],esi
  4057eb:	pop    rbx
  4057ec:	ret    
  4057ed:	nop    DWORD PTR [rax]
  4057f0:	mov    eax,0xffffffff
  4057f5:	pop    rbx
  4057f6:	ret    
  4057f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405800 <flatcc_builder_reserve_table@@Base>:
  405800:	endbr64 
  405804:	push   r12
  405806:	push   rbp
  405807:	push   rbx
  405808:	test   esi,esi
  40580a:	js     4058bf <flatcc_builder_reserve_table@@Base+0xbf>
  405810:	mov    rax,QWORD PTR [rdi+0x30]
  405814:	lea    r12d,[rsi+rsi*1+0x4]
  405819:	movzx  edx,WORD PTR [rax+0x1c]
  40581d:	mov    eax,DWORD PTR [rax+0x10]
  405820:	mov    rbx,rdi
  405823:	lea    ebp,[rax+rdx*2]
  405826:	mov    edx,r12d
  405829:	add    rdx,rbp
  40582c:	cmp    rdx,QWORD PTR [rdi+0x60]
  405830:	ja     405870 <flatcc_builder_reserve_table@@Base+0x70>
  405832:	add    rbp,QWORD PTR [rbx+0x58]
  405836:	je     4058b0 <flatcc_builder_reserve_table@@Base+0xb0>
  405838:	mov    rax,QWORD PTR [rbx+0x30]
  40583c:	add    rbp,0x4
  405840:	mov    QWORD PTR [rbx+0x8],rbp
  405844:	mov    ebp,DWORD PTR [rax+0x14]
  405847:	lea    edx,[r12-0x3]
  40584c:	add    rdx,rbp
  40584f:	cmp    rdx,QWORD PTR [rbx+0x90]
  405856:	ja     405890 <flatcc_builder_reserve_table@@Base+0x90>
  405858:	add    rbp,QWORD PTR [rbx+0x88]
  40585f:	sete   al
  405862:	mov    QWORD PTR [rbx],rbp
  405865:	movzx  eax,al
  405868:	neg    eax
  40586a:	pop    rbx
  40586b:	pop    rbp
  40586c:	pop    r12
  40586e:	ret    
  40586f:	nop
  405870:	lea    rsi,[rdi+0x58]
  405874:	mov    rdi,QWORD PTR [rdi+0x40]
  405878:	xor    r8d,r8d
  40587b:	mov    ecx,0x1
  405880:	call   QWORD PTR [rbx+0x50]
  405883:	test   eax,eax
  405885:	je     405832 <flatcc_builder_reserve_table@@Base+0x32>
  405887:	call   403c80 <flatcc_builder_default_alloc@@Base+0x130>
  40588c:	nop    DWORD PTR [rax+0x0]
  405890:	mov    rdi,QWORD PTR [rbx+0x40]
  405894:	xor    ecx,ecx
  405896:	lea    rsi,[rbx+0x88]
  40589d:	mov    r8d,0x3
  4058a3:	call   QWORD PTR [rbx+0x50]
  4058a6:	test   eax,eax
  4058a8:	je     405858 <flatcc_builder_reserve_table@@Base+0x58>
  4058aa:	jmp    405887 <flatcc_builder_reserve_table@@Base+0x87>
  4058ac:	nop    DWORD PTR [rax+0x0]
  4058b0:	mov    QWORD PTR [rbx+0x8],0x0
  4058b8:	mov    eax,0xffffffff
  4058bd:	jmp    40586a <flatcc_builder_reserve_table@@Base+0x6a>
  4058bf:	lea    rcx,[rip+0x42da]        # 409ba0 <_IO_stdin_used@@Base+0xba0>
  4058c6:	mov    edx,0x429
  4058cb:	lea    rsi,[rip+0x3ab6]        # 409388 <_IO_stdin_used@@Base+0x388>
  4058d2:	lea    rdi,[rip+0x3ea2]        # 40977b <_IO_stdin_used@@Base+0x77b>
  4058d9:	call   403130 <__assert_fail@plt>
  4058de:	xchg   ax,ax

00000000004058e0 <flatcc_builder_start_table@@Base>:
  4058e0:	endbr64 
  4058e4:	push   r13
  4058e6:	push   r12
  4058e8:	mov    r12d,esi
  4058eb:	mov    esi,0x4
  4058f0:	push   rbp
  4058f1:	push   rbx
  4058f2:	mov    rbx,rdi
  4058f5:	sub    rsp,0x8
  4058f9:	call   403e80 <flatcc_builder_default_alloc@@Base+0x330>
  4058fe:	test   eax,eax
  405900:	jne    405a18 <flatcc_builder_start_table@@Base+0x138>
  405906:	mov    rsi,QWORD PTR [rbx]
  405909:	mov    rdx,QWORD PTR [rbx+0x30]
  40590d:	sub    rsi,QWORD PTR [rbx+0x88]
  405914:	mov    rcx,QWORD PTR [rbx+0x8]
  405918:	mov    ebp,eax
  40591a:	mov    rax,QWORD PTR [rbx+0x58]
  40591e:	mov    DWORD PTR [rdx+0x14],esi
  405921:	mov    esi,DWORD PTR [rbx+0x14]
  405924:	sub    rcx,rax
  405927:	mov    DWORD PTR [rdx+0x18],esi
  40592a:	movzx  esi,WORD PTR [rbx+0x10]
  40592e:	xor    edi,edi
  405930:	mov    r8d,0x3
  405936:	mov    DWORD PTR [rdx+0x10],ecx
  405939:	mov    WORD PTR [rdx+0x1c],si
  40593d:	lea    r13d,[rcx+rsi*2]
  405941:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  405948:	mov    WORD PTR [rbx+0x10],di
  40594c:	mov    WORD PTR [rdx+0xe],r8w
  405951:	lea    edx,[r12+r12*1+0x4]
  405956:	add    rdx,r13
  405959:	cmp    rdx,QWORD PTR [rbx+0x60]
  40595d:	jbe    40597e <flatcc_builder_start_table@@Base+0x9e>
  40595f:	mov    rdi,QWORD PTR [rbx+0x40]
  405963:	xor    r8d,r8d
  405966:	lea    rsi,[rbx+0x58]
  40596a:	mov    ecx,0x1
  40596f:	call   QWORD PTR [rbx+0x50]
  405972:	test   eax,eax
  405974:	jne    405a0a <flatcc_builder_start_table@@Base+0x12a>
  40597a:	mov    rax,QWORD PTR [rbx+0x58]
  40597e:	add    rax,r13
  405981:	je     405a10 <flatcc_builder_start_table@@Base+0x130>
  405987:	add    rax,0x4
  40598b:	mov    QWORD PTR [rbx+0x8],rax
  40598f:	mov    rax,QWORD PTR [rbx+0x30]
  405993:	lea    edx,[r12+r12*1+0x1]
  405998:	mov    r13d,DWORD PTR [rax+0x14]
  40599c:	add    rdx,r13
  40599f:	cmp    rdx,QWORD PTR [rbx+0x90]
  4059a6:	ja     4059f0 <flatcc_builder_start_table@@Base+0x110>
  4059a8:	add    r13,QWORD PTR [rbx+0x88]
  4059af:	mov    QWORD PTR [rbx],r13
  4059b2:	je     405a18 <flatcc_builder_start_table@@Base+0x138>
  4059b4:	mov    eax,DWORD PTR [rbx+0x28]
  4059b7:	mov    rdx,rax
  4059ba:	add    rax,QWORD PTR [rbx+0x68]
  4059be:	mov    QWORD PTR [rbx+0x18],rax
  4059c2:	mov    eax,DWORD PTR [rbx+0x70]
  4059c5:	sub    eax,edx
  4059c7:	cmp    eax,0xfffc
  4059cc:	mov    edx,0xfffc
  4059d1:	cmova  eax,edx
  4059d4:	mov    DWORD PTR [rbx+0x24],eax
  4059d7:	mov    rax,QWORD PTR [rbx+0x30]
  4059db:	mov    DWORD PTR [rax+0x4],0xfffc
  4059e2:	add    rsp,0x8
  4059e6:	pop    rbx
  4059e7:	mov    eax,ebp
  4059e9:	pop    rbp
  4059ea:	pop    r12
  4059ec:	pop    r13
  4059ee:	ret    
  4059ef:	nop
  4059f0:	mov    rdi,QWORD PTR [rbx+0x40]
  4059f4:	xor    ecx,ecx
  4059f6:	lea    rsi,[rbx+0x88]
  4059fd:	mov    r8d,0x3
  405a03:	call   QWORD PTR [rbx+0x50]
  405a06:	test   eax,eax
  405a08:	je     4059a8 <flatcc_builder_start_table@@Base+0xc8>
  405a0a:	call   403c80 <flatcc_builder_default_alloc@@Base+0x130>
  405a0f:	nop
  405a10:	mov    QWORD PTR [rbx+0x8],0x0
  405a18:	mov    ebp,0xffffffff
  405a1d:	jmp    4059e2 <flatcc_builder_start_table@@Base+0x102>
  405a1f:	nop

0000000000405a20 <flatcc_builder_create_vtable@@Base>:
  405a20:	endbr64 
  405a24:	push   rbp
  405a25:	mov    rbp,rdi
  405a28:	push   rbx
  405a29:	sub    rsp,0xa8
  405a30:	mov    rax,QWORD PTR fs:0x28
  405a39:	mov    QWORD PTR [rsp+0x98],rax
  405a41:	xor    eax,eax
  405a43:	mov    QWORD PTR [rsp],0x0
  405a4b:	mov    DWORD PTR [rsp+0x8],0x0
  405a53:	mov    eax,DWORD PTR [rdi+0x100]
  405a59:	test   dx,dx
  405a5c:	je     405ae0 <flatcc_builder_create_vtable@@Base+0xc0>
  405a62:	movzx  r8d,dx
  405a66:	mov    QWORD PTR [rsp],r8
  405a6a:	mov    QWORD PTR [rsp+0x10],rsi
  405a6f:	mov    QWORD PTR [rsp+0x18],r8
  405a74:	mov    DWORD PTR [rsp+0x8],0x1
  405a7c:	movzx  edx,dx
  405a7f:	test   eax,eax
  405a81:	je     405b10 <flatcc_builder_create_vtable@@Base+0xf0>
  405a87:	mov    eax,DWORD PTR [rbp+0xf0]
  405a8d:	mov    ebx,eax
  405a8f:	sub    ebx,edx
  405a91:	cmp    eax,ebx
  405a93:	jle    405aee <flatcc_builder_create_vtable@@Base+0xce>
  405a95:	mov    rdi,QWORD PTR [rbp+0x38]
  405a99:	mov    edx,DWORD PTR [rsp+0x8]
  405a9d:	lea    rsi,[rsp+0x10]
  405aa2:	mov    ecx,ebx
  405aa4:	call   QWORD PTR [rbp+0x48]
  405aa7:	test   eax,eax
  405aa9:	jne    405b60 <flatcc_builder_create_vtable@@Base+0x140>
  405aaf:	cmp    ebx,0x1
  405ab2:	mov    DWORD PTR [rbp+0xf0],ebx
  405ab8:	sbb    ebx,0xffffffff
  405abb:	mov    rcx,QWORD PTR [rsp+0x98]
  405ac3:	xor    rcx,QWORD PTR fs:0x28
  405acc:	mov    eax,ebx
  405ace:	jne    405b5b <flatcc_builder_create_vtable@@Base+0x13b>
  405ad4:	add    rsp,0xa8
  405adb:	pop    rbx
  405adc:	pop    rbp
  405add:	ret    
  405ade:	xchg   ax,ax
  405ae0:	test   eax,eax
  405ae2:	jne    405aee <flatcc_builder_create_vtable@@Base+0xce>
  405ae4:	mov    eax,DWORD PTR [rdi+0x124]
  405aea:	test   eax,eax
  405aec:	je     405b50 <flatcc_builder_create_vtable@@Base+0x130>
  405aee:	lea    rcx,[rip+0x42db]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  405af5:	mov    edx,0x287
  405afa:	lea    rsi,[rip+0x3887]        # 409388 <_IO_stdin_used@@Base+0x388>
  405b01:	lea    rdi,[rip+0x3c17]        # 40971f <_IO_stdin_used@@Base+0x71f>
  405b08:	call   403130 <__assert_fail@plt>
  405b0d:	nop    DWORD PTR [rax]
  405b10:	mov    ecx,DWORD PTR [rdi+0x124]
  405b16:	test   ecx,ecx
  405b18:	jne    405a87 <flatcc_builder_create_vtable@@Base+0x67>
  405b1e:	mov    ebx,DWORD PTR [rdi+0xf4]
  405b24:	add    edx,ebx
  405b26:	mov    DWORD PTR [rdi+0xf4],edx
  405b2c:	mov    rdi,QWORD PTR [rbp+0x38]
  405b30:	mov    edx,DWORD PTR [rsp+0x8]
  405b34:	lea    rsi,[rsp+0x10]
  405b39:	mov    ecx,ebx
  405b3b:	call   QWORD PTR [rbp+0x48]
  405b3e:	test   eax,eax
  405b40:	jne    405b65 <flatcc_builder_create_vtable@@Base+0x145>
  405b42:	inc    ebx
  405b44:	jmp    405abb <flatcc_builder_create_vtable@@Base+0x9b>
  405b49:	nop    DWORD PTR [rax+0x0]
  405b50:	mov    ebx,DWORD PTR [rbp+0xf4]
  405b56:	xor    r8d,r8d
  405b59:	jmp    405b2c <flatcc_builder_create_vtable@@Base+0x10c>
  405b5b:	call   403120 <__stack_chk_fail@plt>
  405b60:	call   403e20 <flatcc_builder_default_alloc@@Base+0x2d0>
  405b65:	call   403cb0 <flatcc_builder_default_alloc@@Base+0x160>
  405b6a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405b70 <flatcc_builder_create_cached_vtable@@Base>:
  405b70:	endbr64 
  405b74:	push   r15
  405b76:	mov    r15,rdi
  405b79:	push   r14
  405b7b:	push   r13
  405b7d:	push   r12
  405b7f:	movzx  r12d,dx
  405b83:	push   rbp
  405b84:	mov    ebp,ecx
  405b86:	push   rbx
  405b87:	sub    rsp,0x38
  405b8b:	mov    rbx,QWORD PTR [rdi+0xd8]
  405b92:	mov    QWORD PTR [rsp+0x18],rsi
  405b97:	mov    DWORD PTR [rsp+0x2c],edx
  405b9b:	test   rbx,rbx
  405b9e:	je     405d38 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
  405ba4:	mov    eax,0x20
  405ba9:	sub    eax,ebx
  405bab:	shrx   ebp,ebp,eax
  405bb0:	mov    rax,QWORD PTR [r15+0xa8]
  405bb7:	lea    r14,[rax+rbp*4]
  405bbb:	test   r14,r14
  405bbe:	je     405d20 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405bc4:	mov    ebp,DWORD PTR [r14]
  405bc7:	test   ebp,ebp
  405bc9:	je     405e10 <flatcc_builder_create_cached_vtable@@Base+0x2a0>
  405bcf:	mov    QWORD PTR [rsp+0x20],0x0
  405bd8:	mov    r11,QWORD PTR [r15+0xb8]
  405bdf:	mov    r8,QWORD PTR [r15+0x78]
  405be3:	mov    r13,r14
  405be6:	mov    ebx,ebp
  405be8:	add    rbx,r11
  405beb:	mov    esi,DWORD PTR [rbx+0x8]
  405bee:	add    rsi,r8
  405bf1:	cmp    WORD PTR [rsi],r12w
  405bf5:	jne    405ce0 <flatcc_builder_create_cached_vtable@@Base+0x170>
  405bfb:	mov    rdi,QWORD PTR [rsp+0x18]
  405c00:	movzx  edx,r12w
  405c04:	mov    QWORD PTR [rsp+0x10],r8
  405c09:	mov    QWORD PTR [rsp+0x8],r11
  405c0e:	call   403160 <memcmp@plt>
  405c13:	test   eax,eax
  405c15:	mov    r11,QWORD PTR [rsp+0x8]
  405c1a:	mov    r8,QWORD PTR [rsp+0x10]
  405c1f:	jne    405ce0 <flatcc_builder_create_cached_vtable@@Base+0x170>
  405c25:	mov    eax,DWORD PTR [r15+0x100]
  405c2c:	cmp    DWORD PTR [rbx+0x4],eax
  405c2f:	je     405cf0 <flatcc_builder_create_cached_vtable@@Base+0x180>
  405c35:	mov    QWORD PTR [rsp+0x20],rbx
  405c3a:	mov    ebp,DWORD PTR [rbx+0xc]
  405c3d:	lea    r13,[rbx+0xc]
  405c41:	test   ebp,ebp
  405c43:	jne    405be6 <flatcc_builder_create_cached_vtable@@Base+0x76>
  405c45:	mov    ebp,DWORD PTR [r15+0xe4]
  405c4c:	lea    rdx,[rbp+0x10]
  405c50:	cmp    rdx,QWORD PTR [r15+0xc0]
  405c57:	jbe    405c78 <flatcc_builder_create_cached_vtable@@Base+0x108>
  405c59:	mov    rdi,QWORD PTR [r15+0x40]
  405c5d:	xor    ecx,ecx
  405c5f:	lea    rsi,[r15+0xb8]
  405c66:	mov    r8d,0x6
  405c6c:	call   QWORD PTR [r15+0x50]
  405c70:	test   eax,eax
  405c72:	jne    405e04 <flatcc_builder_create_cached_vtable@@Base+0x294>
  405c78:	add    rbp,QWORD PTR [r15+0xb8]
  405c7f:	je     405d20 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405c85:	mov    eax,DWORD PTR [r15+0xe4]
  405c8c:	mov    rsi,QWORD PTR [rsp+0x18]
  405c91:	lea    edx,[rax+0x10]
  405c94:	mov    DWORD PTR [r15+0xe4],edx
  405c9b:	mov    edx,DWORD PTR [r15+0x100]
  405ca2:	mov    rdi,r15
  405ca5:	mov    DWORD PTR [rbp+0x4],edx
  405ca8:	mov    edx,DWORD PTR [r14]
  405cab:	mov    DWORD PTR [rbp+0xc],edx
  405cae:	mov    DWORD PTR [r14],eax
  405cb1:	mov    eax,DWORD PTR [rsp+0x2c]
  405cb5:	movzx  edx,ax
  405cb8:	movzx  ebx,ax
  405cbb:	call   405a20 <flatcc_builder_create_vtable@@Base>
  405cc0:	mov    DWORD PTR [rbp+0x0],eax
  405cc3:	test   eax,eax
  405cc5:	je     405d20 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405cc7:	mov    rdi,QWORD PTR [rsp+0x20]
  405ccc:	test   rdi,rdi
  405ccf:	je     405e25 <flatcc_builder_create_cached_vtable@@Base+0x2b5>
  405cd5:	mov    edx,DWORD PTR [rdi+0x8]
  405cd8:	mov    DWORD PTR [rbp+0x8],edx
  405cdb:	jmp    405d07 <flatcc_builder_create_cached_vtable@@Base+0x197>
  405cdd:	nop    DWORD PTR [rax]
  405ce0:	lea    r13,[rbx+0xc]
  405ce4:	mov    ebp,DWORD PTR [rbx+0xc]
  405ce7:	jmp    405c41 <flatcc_builder_create_cached_vtable@@Base+0xd1>
  405cec:	nop    DWORD PTR [rax+0x0]
  405cf0:	cmp    r14,r13
  405cf3:	je     405d05 <flatcc_builder_create_cached_vtable@@Base+0x195>
  405cf5:	mov    eax,DWORD PTR [rbx+0xc]
  405cf8:	mov    DWORD PTR [r13+0x0],eax
  405cfc:	mov    eax,DWORD PTR [r14]
  405cff:	mov    DWORD PTR [rbx+0xc],eax
  405d02:	mov    DWORD PTR [r14],ebp
  405d05:	mov    eax,DWORD PTR [rbx]
  405d07:	add    rsp,0x38
  405d0b:	pop    rbx
  405d0c:	pop    rbp
  405d0d:	pop    r12
  405d0f:	pop    r13
  405d11:	pop    r14
  405d13:	pop    r15
  405d15:	ret    
  405d16:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405d20:	add    rsp,0x38
  405d24:	pop    rbx
  405d25:	pop    rbp
  405d26:	pop    r12
  405d28:	pop    r13
  405d2a:	pop    r14
  405d2c:	xor    eax,eax
  405d2e:	pop    r15
  405d30:	ret    
  405d31:	nop    DWORD PTR [rax+0x0]
  405d38:	mov    eax,DWORD PTR [rdi+0xe4]
  405d3e:	lea    r13,[rdi+0xa8]
  405d45:	test   eax,eax
  405d47:	jne    405eaf <flatcc_builder_create_cached_vtable@@Base+0x33f>
  405d4d:	cmp    QWORD PTR [rdi+0xc0],0xf
  405d55:	jbe    405de0 <flatcc_builder_create_cached_vtable@@Base+0x270>
  405d5b:	cmp    QWORD PTR [r15+0xb8],0x0
  405d63:	je     405d20 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405d65:	mov    DWORD PTR [r15+0xe4],0x10
  405d70:	mov    rdi,QWORD PTR [r15+0x40]
  405d74:	mov    r8d,0x5
  405d7a:	mov    ecx,0x1
  405d7f:	mov    edx,0x100
  405d84:	mov    rsi,r13
  405d87:	call   QWORD PTR [r15+0x50]
  405d8b:	test   eax,eax
  405d8d:	jne    405d20 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405d8f:	mov    rcx,QWORD PTR [r15+0xb0]
  405d96:	mov    eax,0x100
  405d9b:	jmp    405da3 <flatcc_builder_create_cached_vtable@@Base+0x233>
  405d9d:	nop    DWORD PTR [rax]
  405da0:	mov    rax,rdx
  405da3:	lea    rdx,[rax+rax*1]
  405da7:	cmp    rdx,rcx
  405daa:	jbe    405da0 <flatcc_builder_create_cached_vtable@@Base+0x230>
  405dac:	shr    rax,0x2
  405db0:	cmp    rax,0x1
  405db4:	jbe    405e1e <flatcc_builder_create_cached_vtable@@Base+0x2ae>
  405db6:	mov    esi,0x1
  405dbb:	nop    DWORD PTR [rax+rax*1+0x0]
  405dc0:	inc    rbx
  405dc3:	shlx   rdx,rsi,rbx
  405dc8:	cmp    rax,rdx
  405dcb:	ja     405dc0 <flatcc_builder_create_cached_vtable@@Base+0x250>
  405dcd:	mov    eax,0x20
  405dd2:	sub    eax,ebx
  405dd4:	mov    QWORD PTR [r15+0xd8],rbx
  405ddb:	jmp    405bab <flatcc_builder_create_cached_vtable@@Base+0x3b>
  405de0:	lea    rsi,[rdi+0xb8]
  405de7:	mov    rdi,QWORD PTR [rdi+0x40]
  405deb:	xor    ecx,ecx
  405ded:	mov    r8d,0x6
  405df3:	mov    edx,0x10
  405df8:	call   QWORD PTR [r15+0x50]
  405dfc:	test   eax,eax
  405dfe:	je     405d5b <flatcc_builder_create_cached_vtable@@Base+0x1eb>
  405e04:	call   403c80 <flatcc_builder_default_alloc@@Base+0x130>
  405e09:	nop    DWORD PTR [rax+0x0]
  405e10:	mov    QWORD PTR [rsp+0x20],0x0
  405e19:	jmp    405c45 <flatcc_builder_create_cached_vtable@@Base+0xd5>
  405e1e:	mov    eax,0x20
  405e23:	jmp    405dd4 <flatcc_builder_create_cached_vtable@@Base+0x264>
  405e25:	mov    rax,QWORD PTR [r15+0x118]
  405e2c:	mov    r14d,DWORD PTR [r15+0xe0]
  405e33:	test   rax,rax
  405e36:	je     405e41 <flatcc_builder_create_cached_vtable@@Base+0x2d1>
  405e38:	lea    edx,[rbx+r14*1]
  405e3c:	cmp    rax,rdx
  405e3f:	jb     405e97 <flatcc_builder_create_cached_vtable@@Base+0x327>
  405e41:	lea    rdx,[r12+r14*1]
  405e45:	cmp    rdx,QWORD PTR [r15+0x80]
  405e4c:	jbe    405e66 <flatcc_builder_create_cached_vtable@@Base+0x2f6>
  405e4e:	mov    rdi,QWORD PTR [r15+0x40]
  405e52:	xor    ecx,ecx
  405e54:	lea    rsi,[r15+0x78]
  405e58:	mov    r8d,0x2
  405e5e:	call   QWORD PTR [r15+0x50]
  405e62:	test   eax,eax
  405e64:	jne    405e04 <flatcc_builder_create_cached_vtable@@Base+0x294>
  405e66:	mov    rdi,r14
  405e69:	add    rdi,QWORD PTR [r15+0x78]
  405e6d:	je     405ea7 <flatcc_builder_create_cached_vtable@@Base+0x337>
  405e6f:	mov    eax,DWORD PTR [r15+0xe0]
  405e76:	mov    rsi,QWORD PTR [rsp+0x18]
  405e7b:	add    ebx,eax
  405e7d:	mov    DWORD PTR [rbp+0x8],eax
  405e80:	mov    DWORD PTR [r15+0xe0],ebx
  405e87:	mov    rdx,r12
  405e8a:	call   403170 <memcpy@plt>
  405e8f:	mov    eax,DWORD PTR [rbp+0x0]
  405e92:	jmp    405d07 <flatcc_builder_create_cached_vtable@@Base+0x197>
  405e97:	mov    rdi,r15
  405e9a:	call   4041d0 <flatcc_builder_flush_vtable_cache@@Base>
  405e9f:	mov    eax,DWORD PTR [rbp+0x0]
  405ea2:	jmp    405d07 <flatcc_builder_create_cached_vtable@@Base+0x197>
  405ea7:	or     eax,0xffffffff
  405eaa:	jmp    405d07 <flatcc_builder_create_cached_vtable@@Base+0x197>
  405eaf:	lea    rcx,[rip+0x3cda]        # 409b90 <_IO_stdin_used@@Base+0xb90>
  405eb6:	mov    edx,0x156
  405ebb:	lea    rsi,[rip+0x34c6]        # 409388 <_IO_stdin_used@@Base+0x388>
  405ec2:	lea    rdi,[rip+0x389c]        # 409765 <_IO_stdin_used@@Base+0x765>
  405ec9:	call   403130 <__assert_fail@plt>
  405ece:	xchg   ax,ax

0000000000405ed0 <flatcc_builder_create_table@@Base>:
  405ed0:	endbr64 
  405ed4:	push   rbp
  405ed5:	push   rbx
  405ed6:	mov    rbx,rdi
  405ed9:	sub    rsp,0xb8
  405ee0:	mov    edi,DWORD PTR [rsp+0xd0]
  405ee7:	mov    rax,QWORD PTR fs:0x28
  405ef0:	mov    QWORD PTR [rsp+0xa8],rax
  405ef8:	xor    eax,eax
  405efa:	test   r9d,r9d
  405efd:	js     4060bf <flatcc_builder_create_table@@Base+0x1ef>
  405f03:	test   dil,0x1
  405f07:	je     40609b <flatcc_builder_create_table@@Base+0x1cb>
  405f0d:	cmp    cx,0x4
  405f11:	mov    eax,0x4
  405f16:	cmovb  ecx,eax
  405f19:	movzx  r11d,cx
  405f1d:	cmp    WORD PTR [rbx+0xe8],cx
  405f24:	jb     406070 <flatcc_builder_create_table@@Base+0x1a0>
  405f2a:	mov    eax,DWORD PTR [rbx+0xf0]
  405f30:	lea    ecx,[r11-0x1]
  405f34:	mov    r10d,eax
  405f37:	sub    r10d,edx
  405f3a:	and    r10d,ecx
  405f3d:	mov    ecx,eax
  405f3f:	sub    ecx,edx
  405f41:	lea    r11d,[rcx-0x4]
  405f45:	dec    edi
  405f47:	mov    ecx,r11d
  405f4a:	sub    ecx,edi
  405f4c:	sub    ecx,r10d
  405f4f:	mov    DWORD PTR [rsp+0xc],ecx
  405f53:	test   r9d,r9d
  405f56:	je     405f8d <flatcc_builder_create_table@@Base+0xbd>
  405f58:	mov    edi,r10d
  405f5b:	sub    edi,r11d
  405f5e:	lea    eax,[r9-0x1]
  405f62:	sub    edi,0x4
  405f65:	lea    r9,[r8+rax*2+0x2]
  405f6a:	nop    WORD PTR [rax+rax*1+0x0]
  405f70:	movzx  ecx,WORD PTR [r8]
  405f74:	mov    r11d,edi
  405f77:	sub    r11d,ecx
  405f7a:	add    r8,0x2
  405f7e:	add    DWORD PTR [rsi+rcx*1],r11d
  405f82:	cmp    r9,r8
  405f85:	jne    405f70 <flatcc_builder_create_table@@Base+0xa0>
  405f87:	mov    eax,DWORD PTR [rbx+0xf0]
  405f8d:	lea    rcx,[rsp+0xc]
  405f92:	mov    QWORD PTR [rsp+0x10],0x4
  405f9b:	mov    QWORD PTR [rsp+0x20],rcx
  405fa0:	mov    QWORD PTR [rsp+0x28],0x4
  405fa9:	mov    DWORD PTR [rsp+0x18],0x1
  405fb1:	mov    r8d,0x4
  405fb7:	test   rdx,rdx
  405fba:	je     405fd7 <flatcc_builder_create_table@@Base+0x107>
  405fbc:	lea    r8,[rdx+0x4]
  405fc0:	mov    QWORD PTR [rsp+0x10],r8
  405fc5:	mov    QWORD PTR [rsp+0x30],rsi
  405fca:	mov    QWORD PTR [rsp+0x38],rdx
  405fcf:	mov    DWORD PTR [rsp+0x18],0x2
  405fd7:	test   r10d,r10d
  405fda:	jne    406040 <flatcc_builder_create_table@@Base+0x170>
  405fdc:	mov    ebp,eax
  405fde:	movabs rdx,0x10000000f
  405fe8:	sub    ebp,r8d
  405feb:	cmp    r8,rdx
  405fee:	ja     40607c <flatcc_builder_create_table@@Base+0x1ac>
  405ff4:	cmp    ebp,eax
  405ff6:	jge    40607c <flatcc_builder_create_table@@Base+0x1ac>
  405ffc:	mov    rdi,QWORD PTR [rbx+0x38]
  406000:	mov    edx,DWORD PTR [rsp+0x18]
  406004:	lea    rsi,[rsp+0x20]
  406009:	mov    ecx,ebp
  40600b:	call   QWORD PTR [rbx+0x48]
  40600e:	test   eax,eax
  406010:	jne    4060ba <flatcc_builder_create_table@@Base+0x1ea>
  406016:	mov    DWORD PTR [rbx+0xf0],ebp
  40601c:	mov    eax,ebp
  40601e:	mov    rbx,QWORD PTR [rsp+0xa8]
  406026:	xor    rbx,QWORD PTR fs:0x28
  40602f:	jne    4060de <flatcc_builder_create_table@@Base+0x20e>
  406035:	add    rsp,0xb8
  40603c:	pop    rbx
  40603d:	pop    rbp
  40603e:	ret    
  40603f:	nop
  406040:	movsxd rcx,DWORD PTR [rsp+0x18]
  406045:	mov    rsi,0x409e80
  40604c:	mov    rdx,rcx
  40604f:	add    r8,r10
  406052:	shl    rcx,0x4
  406056:	inc    edx
  406058:	mov    QWORD PTR [rsp+0x10],r8
  40605d:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  406062:	mov    QWORD PTR [rsp+rcx*1+0x28],r10
  406067:	mov    DWORD PTR [rsp+0x18],edx
  40606b:	jmp    405fdc <flatcc_builder_create_table@@Base+0x10c>
  406070:	mov    WORD PTR [rbx+0xe8],cx
  406077:	jmp    405f2a <flatcc_builder_create_table@@Base+0x5a>
  40607c:	lea    rcx,[rip+0x3d4d]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  406083:	mov    edx,0x287
  406088:	lea    rsi,[rip+0x32f9]        # 409388 <_IO_stdin_used@@Base+0x388>
  40608f:	lea    rdi,[rip+0x3689]        # 40971f <_IO_stdin_used@@Base+0x71f>
  406096:	call   403130 <__assert_fail@plt>
  40609b:	lea    rcx,[rip+0x3ace]        # 409b70 <_IO_stdin_used@@Base+0xb70>
  4060a2:	mov    edx,0x4db
  4060a7:	lea    rsi,[rip+0x32da]        # 409388 <_IO_stdin_used@@Base+0x388>
  4060ae:	lea    rdi,[rip+0x36d1]        # 409786 <_IO_stdin_used@@Base+0x786>
  4060b5:	call   403130 <__assert_fail@plt>
  4060ba:	call   403e20 <flatcc_builder_default_alloc@@Base+0x2d0>
  4060bf:	lea    rcx,[rip+0x3aaa]        # 409b70 <_IO_stdin_used@@Base+0xb70>
  4060c6:	mov    edx,0x4d5
  4060cb:	lea    rsi,[rip+0x32b6]        # 409388 <_IO_stdin_used@@Base+0x388>
  4060d2:	lea    rdi,[rip+0x369b]        # 409774 <_IO_stdin_used@@Base+0x774>
  4060d9:	call   403130 <__assert_fail@plt>
  4060de:	call   403120 <__stack_chk_fail@plt>
  4060e3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4060ee:	xchg   ax,ax

00000000004060f0 <flatcc_builder_check_required_field@@Base>:
  4060f0:	endbr64 
  4060f4:	mov    rax,QWORD PTR [rdi+0x30]
  4060f8:	cmp    WORD PTR [rax+0xe],0x3
  4060fd:	jne    40611a <flatcc_builder_check_required_field@@Base+0x2a>
  4060ff:	xor    eax,eax
  406101:	cmp    WORD PTR [rdi+0x10],si
  406105:	jbe    406119 <flatcc_builder_check_required_field@@Base+0x29>
  406107:	mov    rax,QWORD PTR [rdi+0x8]
  40610b:	movzx  edx,si
  40610e:	cmp    WORD PTR [rax+rdx*2],0x0
  406113:	setne  al
  406116:	movzx  eax,al
  406119:	ret    
  40611a:	push   rax
  40611b:	lea    rcx,[rip+0x3a1e]        # 409b40 <_IO_stdin_used@@Base+0xb40>
  406122:	mov    edx,0x4f8
  406127:	lea    rsi,[rip+0x325a]        # 409388 <_IO_stdin_used@@Base+0x388>
  40612e:	lea    rdi,[rip+0x349b]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  406135:	call   403130 <__assert_fail@plt>
  40613a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406140 <flatcc_builder_check_union_field@@Base>:
  406140:	endbr64 
  406144:	mov    rax,QWORD PTR [rdi+0x30]
  406148:	cmp    WORD PTR [rax+0xe],0x3
  40614d:	jne    4061a9 <flatcc_builder_check_union_field@@Base+0x69>
  40614f:	xor    eax,eax
  406151:	test   si,si
  406154:	je     406186 <flatcc_builder_check_union_field@@Base+0x46>
  406156:	cmp    WORD PTR [rdi+0x10],si
  40615a:	jbe    406186 <flatcc_builder_check_union_field@@Base+0x46>
  40615c:	mov    rcx,QWORD PTR [rdi+0x8]
  406160:	movzx  edx,si
  406163:	movzx  eax,WORD PTR [rcx+rdx*2-0x2]
  406168:	movzx  ecx,WORD PTR [rcx+rdx*2]
  40616c:	test   ax,ax
  40616f:	je     4061a0 <flatcc_builder_check_union_field@@Base+0x60>
  406171:	mov    rsi,QWORD PTR [rdi+0x18]
  406175:	movzx  edx,ax
  406178:	xor    eax,eax
  40617a:	test   cx,cx
  40617d:	sete   al
  406180:	cmp    BYTE PTR [rsi+rdx*1],0x0
  406184:	jne    406190 <flatcc_builder_check_union_field@@Base+0x50>
  406186:	ret    
  406187:	nop    WORD PTR [rax+rax*1+0x0]
  406190:	xor    eax,eax
  406192:	test   cx,cx
  406195:	setne  al
  406198:	ret    
  406199:	nop    DWORD PTR [rax+0x0]
  4061a0:	xor    eax,eax
  4061a2:	test   cx,cx
  4061a5:	sete   al
  4061a8:	ret    
  4061a9:	push   rax
  4061aa:	lea    rcx,[rip+0x394f]        # 409b00 <_IO_stdin_used@@Base+0xb00>
  4061b1:	mov    edx,0x4ff
  4061b6:	lea    rsi,[rip+0x31cb]        # 409388 <_IO_stdin_used@@Base+0x388>
  4061bd:	lea    rdi,[rip+0x340c]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  4061c4:	call   403130 <__assert_fail@plt>
  4061c9:	nop    DWORD PTR [rax+0x0]

00000000004061d0 <flatcc_builder_check_required@@Base>:
  4061d0:	endbr64 
  4061d4:	mov    rax,QWORD PTR [rdi+0x30]
  4061d8:	cmp    WORD PTR [rax+0xe],0x3
  4061dd:	jne    406233 <flatcc_builder_check_required@@Base+0x63>
  4061df:	movzx  ecx,WORD PTR [rdi+0x10]
  4061e3:	xor    eax,eax
  4061e5:	cmp    ecx,edx
  4061e7:	jl     406232 <flatcc_builder_check_required@@Base+0x62>
  4061e9:	test   edx,edx
  4061eb:	jle    406223 <flatcc_builder_check_required@@Base+0x53>
  4061ed:	mov    rcx,QWORD PTR [rdi+0x8]
  4061f1:	movzx  edi,WORD PTR [rsi]
  4061f4:	cmp    WORD PTR [rcx+rdi*2],0x0
  4061f9:	je     406232 <flatcc_builder_check_required@@Base+0x62>
  4061fb:	add    rsi,0x2
  4061ff:	lea    eax,[rdx-0x1]
  406202:	lea    rdx,[rsi+rax*2]
  406206:	jmp    40621e <flatcc_builder_check_required@@Base+0x4e>
  406208:	nop    DWORD PTR [rax+rax*1+0x0]
  406210:	movzx  eax,WORD PTR [rsi]
  406213:	add    rsi,0x2
  406217:	cmp    WORD PTR [rcx+rax*2],0x0
  40621c:	je     406230 <flatcc_builder_check_required@@Base+0x60>
  40621e:	cmp    rsi,rdx
  406221:	jne    406210 <flatcc_builder_check_required@@Base+0x40>
  406223:	mov    eax,0x1
  406228:	ret    
  406229:	nop    DWORD PTR [rax+0x0]
  406230:	xor    eax,eax
  406232:	ret    
  406233:	push   rax
  406234:	lea    rcx,[rip+0x3895]        # 409ad0 <_IO_stdin_used@@Base+0xad0>
  40623b:	mov    edx,0x511
  406240:	lea    rsi,[rip+0x3141]        # 409388 <_IO_stdin_used@@Base+0x388>
  406247:	lea    rdi,[rip+0x3382]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  40624e:	call   403130 <__assert_fail@plt>
  406253:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40625e:	xchg   ax,ax

0000000000406260 <flatcc_builder_end_table@@Base>:
  406260:	endbr64 
  406264:	push   r13
  406266:	push   r12
  406268:	push   rbp
  406269:	push   rbx
  40626a:	sub    rsp,0x8
  40626e:	mov    rax,QWORD PTR [rdi+0x30]
  406272:	cmp    WORD PTR [rax+0xe],0x3
  406277:	jne    4063cd <flatcc_builder_end_table@@Base+0x16d>
  40627d:	movzx  ebp,WORD PTR [rdi+0x10]
  406281:	movzx  eax,WORD PTR [rdi+0x20]
  406285:	lea    ebp,[rbp+rbp*1+0x4]
  406289:	movzx  ecx,bp
  40628c:	xor    ecx,DWORD PTR [rdi+0x14]
  40628f:	mov    rdx,QWORD PTR [rdi+0x8]
  406293:	imul   ecx,ecx,0x9e3779b1
  406299:	add    eax,0x4
  40629c:	mov    WORD PTR [rdx-0x2],ax
  4062a0:	movzx  eax,ax
  4062a3:	xor    ecx,eax
  4062a5:	imul   ecx,ecx,0x9e3779b1
  4062ab:	mov    WORD PTR [rdx-0x4],bp
  4062af:	lea    r12,[rdx-0x4]
  4062b3:	mov    DWORD PTR [rdi+0x14],ecx
  4062b6:	movzx  edx,bp
  4062b9:	mov    rsi,r12
  4062bc:	mov    rbx,rdi
  4062bf:	call   405b70 <flatcc_builder_create_cached_vtable@@Base>
  4062c4:	mov    r13d,eax
  4062c7:	test   eax,eax
  4062c9:	jne    4062e0 <flatcc_builder_end_table@@Base+0x80>
  4062cb:	add    rsp,0x8
  4062cf:	pop    rbx
  4062d0:	xor    ebp,ebp
  4062d2:	mov    eax,ebp
  4062d4:	pop    rbp
  4062d5:	pop    r12
  4062d7:	pop    r13
  4062d9:	ret    
  4062da:	nop    WORD PTR [rax+rax*1+0x0]
  4062e0:	movzx  edx,bp
  4062e3:	xor    esi,esi
  4062e5:	mov    rdi,r12
  4062e8:	call   403140 <memset@plt>
  4062ed:	mov    rax,QWORD PTR [rbx+0x30]
  4062f1:	sub    rsp,0x8
  4062f5:	mov    r8d,DWORD PTR [rax+0x14]
  4062f9:	mov    r9,QWORD PTR [rbx]
  4062fc:	add    r8,QWORD PTR [rbx+0x88]
  406303:	mov    edx,DWORD PTR [rbx+0x20]
  406306:	movzx  ecx,WORD PTR [rbx+0xea]
  40630d:	mov    rsi,QWORD PTR [rbx+0x18]
  406311:	push   r13
  406313:	sub    r9,r8
  406316:	sar    r9,1
  406319:	mov    rdi,rbx
  40631c:	call   405ed0 <flatcc_builder_create_table@@Base>
  406321:	mov    ebp,eax
  406323:	pop    rax
  406324:	pop    rdx
  406325:	test   ebp,ebp
  406327:	je     4062cb <flatcc_builder_end_table@@Base+0x6b>
  406329:	mov    rax,QWORD PTR [rbx+0x30]
  40632d:	mov    rdi,QWORD PTR [rbx+0x18]
  406331:	mov    edx,DWORD PTR [rax+0x18]
  406334:	xor    esi,esi
  406336:	mov    DWORD PTR [rbx+0x14],edx
  406339:	movzx  edx,WORD PTR [rax+0x1c]
  40633d:	mov    WORD PTR [rbx+0x10],dx
  406341:	mov    edx,DWORD PTR [rax+0x10]
  406344:	mov    eax,DWORD PTR [rax+0x14]
  406347:	add    rdx,QWORD PTR [rbx+0x58]
  40634b:	add    rax,QWORD PTR [rbx+0x88]
  406352:	mov    QWORD PTR [rbx+0x8],rdx
  406356:	mov    QWORD PTR [rbx],rax
  406359:	mov    edx,DWORD PTR [rbx+0x20]
  40635c:	call   403140 <memset@plt>
  406361:	mov    rax,QWORD PTR [rbx+0x30]
  406365:	mov    edi,DWORD PTR [rbx+0x70]
  406368:	mov    edx,DWORD PTR [rax+0x8]
  40636b:	mov    esi,DWORD PTR [rax]
  40636d:	mov    ecx,DWORD PTR [rax+0x4]
  406370:	mov    DWORD PTR [rbx+0x20],edx
  406373:	mov    rdx,rsi
  406376:	sub    edi,edx
  406378:	mov    DWORD PTR [rbx+0x28],esi
  40637b:	mov    edx,edi
  40637d:	add    rsi,QWORD PTR [rbx+0x68]
  406381:	cmp    ecx,edi
  406383:	cmovb  edx,ecx
  406386:	mov    QWORD PTR [rbx+0x18],rsi
  40638a:	mov    DWORD PTR [rbx+0x24],edx
  40638d:	movzx  edx,WORD PTR [rbx+0xea]
  406394:	mov    DWORD PTR [rax+0x4],ecx
  406397:	cmp    dx,WORD PTR [rbx+0xe8]
  40639e:	jbe    4063a7 <flatcc_builder_end_table@@Base+0x147>
  4063a0:	mov    WORD PTR [rbx+0xe8],dx
  4063a7:	movzx  edx,WORD PTR [rax+0xc]
  4063ab:	dec    DWORD PTR [rbx+0x104]
  4063b1:	sub    rax,0x24
  4063b5:	mov    QWORD PTR [rbx+0x30],rax
  4063b9:	mov    WORD PTR [rbx+0xea],dx
  4063c0:	add    rsp,0x8
  4063c4:	mov    eax,ebp
  4063c6:	pop    rbx
  4063c7:	pop    rbp
  4063c8:	pop    r12
  4063ca:	pop    r13
  4063cc:	ret    
  4063cd:	lea    rcx,[rip+0x36dc]        # 409ab0 <_IO_stdin_used@@Base+0xab0>
  4063d4:	mov    edx,0x525
  4063d9:	lea    rsi,[rip+0x2fa8]        # 409388 <_IO_stdin_used@@Base+0x388>
  4063e0:	lea    rdi,[rip+0x31e9]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  4063e7:	call   403130 <__assert_fail@plt>
  4063ec:	nop    DWORD PTR [rax+0x0]

00000000004063f0 <flatcc_builder_create_vector@@Base>:
  4063f0:	endbr64 
  4063f4:	push   rbp
  4063f5:	push   rbx
  4063f6:	sub    rsp,0xb8
  4063fd:	mov    rax,QWORD PTR fs:0x28
  406406:	mov    QWORD PTR [rsp+0xa8],rax
  40640e:	xor    eax,eax
  406410:	cmp    rdx,r9
  406413:	ja     406554 <flatcc_builder_create_vector@@Base+0x164>
  406419:	cmp    r8w,0x4
  40641e:	mov    eax,0x4
  406423:	cmovb  r8d,eax
  406427:	mov    rbx,rdi
  40642a:	movzx  edi,r8w
  40642e:	cmp    r8w,WORD PTR [rbx+0xe8]
  406436:	jbe    406440 <flatcc_builder_create_vector@@Base+0x50>
  406438:	mov    WORD PTR [rbx+0xe8],r8w
  406440:	imul   ecx,edx
  406443:	mov    DWORD PTR [rsp+0xc],edx
  406447:	mov    edx,DWORD PTR [rbx+0xf0]
  40644d:	dec    edi
  40644f:	mov    eax,edx
  406451:	sub    eax,ecx
  406453:	and    eax,edi
  406455:	lea    rdi,[rsp+0xc]
  40645a:	mov    QWORD PTR [rsp+0x10],0x4
  406463:	mov    QWORD PTR [rsp+0x20],rdi
  406468:	mov    QWORD PTR [rsp+0x28],0x4
  406471:	mov    DWORD PTR [rsp+0x18],0x1
  406479:	mov    r8d,0x4
  40647f:	test   ecx,ecx
  406481:	je     40649e <flatcc_builder_create_vector@@Base+0xae>
  406483:	lea    r8,[rcx+0x4]
  406487:	mov    QWORD PTR [rsp+0x10],r8
  40648c:	mov    QWORD PTR [rsp+0x30],rsi
  406491:	mov    QWORD PTR [rsp+0x38],rcx
  406496:	mov    DWORD PTR [rsp+0x18],0x2
  40649e:	test   eax,eax
  4064a0:	jne    406500 <flatcc_builder_create_vector@@Base+0x110>
  4064a2:	mov    ebp,edx
  4064a4:	movabs rax,0x10000000f
  4064ae:	sub    ebp,r8d
  4064b1:	cmp    r8,rax
  4064b4:	ja     406530 <flatcc_builder_create_vector@@Base+0x140>
  4064b6:	cmp    edx,ebp
  4064b8:	jle    406530 <flatcc_builder_create_vector@@Base+0x140>
  4064ba:	mov    rdi,QWORD PTR [rbx+0x38]
  4064be:	mov    edx,DWORD PTR [rsp+0x18]
  4064c2:	lea    rsi,[rsp+0x20]
  4064c7:	mov    ecx,ebp
  4064c9:	call   QWORD PTR [rbx+0x48]
  4064cc:	test   eax,eax
  4064ce:	jne    40654f <flatcc_builder_create_vector@@Base+0x15f>
  4064d0:	mov    DWORD PTR [rbx+0xf0],ebp
  4064d6:	mov    eax,ebp
  4064d8:	mov    rbx,QWORD PTR [rsp+0xa8]
  4064e0:	xor    rbx,QWORD PTR fs:0x28
  4064e9:	jne    406573 <flatcc_builder_create_vector@@Base+0x183>
  4064ef:	add    rsp,0xb8
  4064f6:	pop    rbx
  4064f7:	pop    rbp
  4064f8:	ret    
  4064f9:	nop    DWORD PTR [rax+0x0]
  406500:	movsxd rsi,DWORD PTR [rsp+0x18]
  406505:	mov    rdi,0x409e80
  40650c:	mov    rcx,rsi
  40650f:	add    r8,rax
  406512:	shl    rsi,0x4
  406516:	inc    ecx
  406518:	mov    QWORD PTR [rsp+0x10],r8
  40651d:	mov    QWORD PTR [rsp+rsi*1+0x20],rdi
  406522:	mov    QWORD PTR [rsp+rsi*1+0x28],rax
  406527:	mov    DWORD PTR [rsp+0x18],ecx
  40652b:	jmp    4064a2 <flatcc_builder_create_vector@@Base+0xb2>
  406530:	lea    rcx,[rip+0x3899]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  406537:	mov    edx,0x287
  40653c:	lea    rsi,[rip+0x2e45]        # 409388 <_IO_stdin_used@@Base+0x388>
  406543:	lea    rdi,[rip+0x31d5]        # 40971f <_IO_stdin_used@@Base+0x71f>
  40654a:	call   403130 <__assert_fail@plt>
  40654f:	call   403e20 <flatcc_builder_default_alloc@@Base+0x2d0>
  406554:	lea    rcx,[rip+0x3535]        # 409a90 <_IO_stdin_used@@Base+0xa90>
  40655b:	mov    edx,0x555
  406560:	lea    rsi,[rip+0x2e21]        # 409388 <_IO_stdin_used@@Base+0x388>
  406567:	lea    rdi,[rip+0x3223]        # 409791 <_IO_stdin_used@@Base+0x791>
  40656e:	call   403130 <__assert_fail@plt>
  406573:	call   403120 <__stack_chk_fail@plt>
  406578:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406580 <flatcc_builder_end_vector@@Base>:
  406580:	endbr64 
  406584:	push   rbp
  406585:	push   rbx
  406586:	sub    rsp,0x8
  40658a:	mov    rax,QWORD PTR [rdi+0x30]
  40658e:	cmp    WORD PTR [rax+0xe],0x4
  406593:	jne    406646 <flatcc_builder_end_vector@@Base+0xc6>
  406599:	mov    ecx,DWORD PTR [rax+0x10]
  40659c:	mov    edx,DWORD PTR [rax+0x14]
  40659f:	mov    rsi,QWORD PTR [rdi+0x18]
  4065a3:	mov    r9d,DWORD PTR [rax+0x18]
  4065a7:	movzx  r8d,WORD PTR [rdi+0xea]
  4065af:	mov    rbx,rdi
  4065b2:	call   4063f0 <flatcc_builder_create_vector@@Base>
  4065b7:	mov    ebp,eax
  4065b9:	test   eax,eax
  4065bb:	jne    4065d0 <flatcc_builder_end_vector@@Base+0x50>
  4065bd:	add    rsp,0x8
  4065c1:	pop    rbx
  4065c2:	mov    eax,ebp
  4065c4:	pop    rbp
  4065c5:	ret    
  4065c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4065d0:	mov    edx,DWORD PTR [rbx+0x20]
  4065d3:	mov    rdi,QWORD PTR [rbx+0x18]
  4065d7:	xor    esi,esi
  4065d9:	call   403140 <memset@plt>
  4065de:	mov    rax,QWORD PTR [rbx+0x30]
  4065e2:	mov    edi,DWORD PTR [rbx+0x70]
  4065e5:	mov    edx,DWORD PTR [rax+0x8]
  4065e8:	mov    esi,DWORD PTR [rax]
  4065ea:	mov    ecx,DWORD PTR [rax+0x4]
  4065ed:	mov    DWORD PTR [rbx+0x20],edx
  4065f0:	mov    rdx,rsi
  4065f3:	sub    edi,edx
  4065f5:	mov    DWORD PTR [rbx+0x28],esi
  4065f8:	mov    edx,edi
  4065fa:	add    rsi,QWORD PTR [rbx+0x68]
  4065fe:	cmp    ecx,edi
  406600:	cmovb  edx,ecx
  406603:	mov    QWORD PTR [rbx+0x18],rsi
  406607:	mov    DWORD PTR [rbx+0x24],edx
  40660a:	movzx  edx,WORD PTR [rbx+0xea]
  406611:	mov    DWORD PTR [rax+0x4],ecx
  406614:	cmp    dx,WORD PTR [rbx+0xe8]
  40661b:	jbe    406624 <flatcc_builder_end_vector@@Base+0xa4>
  40661d:	mov    WORD PTR [rbx+0xe8],dx
  406624:	movzx  edx,WORD PTR [rax+0xc]
  406628:	dec    DWORD PTR [rbx+0x104]
  40662e:	sub    rax,0x24
  406632:	mov    QWORD PTR [rbx+0x30],rax
  406636:	mov    WORD PTR [rbx+0xea],dx
  40663d:	add    rsp,0x8
  406641:	mov    eax,ebp
  406643:	pop    rbx
  406644:	pop    rbp
  406645:	ret    
  406646:	lea    rcx,[rip+0x3423]        # 409a70 <_IO_stdin_used@@Base+0xa70>
  40664d:	mov    edx,0x578
  406652:	lea    rsi,[rip+0x2d2f]        # 409388 <_IO_stdin_used@@Base+0x388>
  406659:	lea    rdi,[rip+0x2e08]        # 409468 <_IO_stdin_used@@Base+0x468>
  406660:	call   403130 <__assert_fail@plt>
  406665:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406670 <flatcc_builder_vector_count@@Base>:
  406670:	endbr64 
  406674:	mov    rax,QWORD PTR [rdi+0x30]
  406678:	mov    eax,DWORD PTR [rax+0x14]
  40667b:	ret    
  40667c:	nop    DWORD PTR [rax+0x0]

0000000000406680 <flatcc_builder_vector_edit@@Base>:
  406680:	endbr64 
  406684:	mov    rax,QWORD PTR [rdi+0x18]
  406688:	ret    
  406689:	nop    DWORD PTR [rax+0x0]

0000000000406690 <flatcc_builder_create_offset_vector_direct@@Base>:
  406690:	endbr64 
  406694:	xor    ecx,ecx
  406696:	jmp    403fa0 <flatcc_builder_default_alloc@@Base+0x450>
  40669b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004066a0 <flatcc_builder_end_offset_vector@@Base>:
  4066a0:	endbr64 
  4066a4:	push   rbp
  4066a5:	push   rbx
  4066a6:	sub    rsp,0x8
  4066aa:	mov    rax,QWORD PTR [rdi+0x30]
  4066ae:	cmp    WORD PTR [rax+0xe],0x5
  4066b3:	jne    406756 <flatcc_builder_end_offset_vector@@Base+0xb6>
  4066b9:	mov    edx,DWORD PTR [rax+0x14]
  4066bc:	mov    rsi,QWORD PTR [rdi+0x18]
  4066c0:	mov    rbx,rdi
  4066c3:	call   406690 <flatcc_builder_create_offset_vector_direct@@Base>
  4066c8:	mov    ebp,eax
  4066ca:	test   eax,eax
  4066cc:	jne    4066e0 <flatcc_builder_end_offset_vector@@Base+0x40>
  4066ce:	add    rsp,0x8
  4066d2:	pop    rbx
  4066d3:	mov    eax,ebp
  4066d5:	pop    rbp
  4066d6:	ret    
  4066d7:	nop    WORD PTR [rax+rax*1+0x0]
  4066e0:	mov    edx,DWORD PTR [rbx+0x20]
  4066e3:	mov    rdi,QWORD PTR [rbx+0x18]
  4066e7:	xor    esi,esi
  4066e9:	call   403140 <memset@plt>
  4066ee:	mov    rax,QWORD PTR [rbx+0x30]
  4066f2:	mov    edi,DWORD PTR [rbx+0x70]
  4066f5:	mov    edx,DWORD PTR [rax+0x8]
  4066f8:	mov    esi,DWORD PTR [rax]
  4066fa:	mov    ecx,DWORD PTR [rax+0x4]
  4066fd:	mov    DWORD PTR [rbx+0x20],edx
  406700:	mov    rdx,rsi
  406703:	sub    edi,edx
  406705:	mov    DWORD PTR [rbx+0x28],esi
  406708:	mov    edx,edi
  40670a:	add    rsi,QWORD PTR [rbx+0x68]
  40670e:	cmp    ecx,edi
  406710:	cmovb  edx,ecx
  406713:	mov    QWORD PTR [rbx+0x18],rsi
  406717:	mov    DWORD PTR [rbx+0x24],edx
  40671a:	movzx  edx,WORD PTR [rbx+0xea]
  406721:	mov    DWORD PTR [rax+0x4],ecx
  406724:	cmp    dx,WORD PTR [rbx+0xe8]
  40672b:	jbe    406734 <flatcc_builder_end_offset_vector@@Base+0x94>
  40672d:	mov    WORD PTR [rbx+0xe8],dx
  406734:	movzx  edx,WORD PTR [rax+0xc]
  406738:	dec    DWORD PTR [rbx+0x104]
  40673e:	sub    rax,0x24
  406742:	mov    QWORD PTR [rbx+0x30],rax
  406746:	mov    WORD PTR [rbx+0xea],dx
  40674d:	add    rsp,0x8
  406751:	mov    eax,ebp
  406753:	pop    rbx
  406754:	pop    rbp
  406755:	ret    
  406756:	lea    rcx,[rip+0x32c3]        # 409a20 <_IO_stdin_used@@Base+0xa20>
  40675d:	mov    edx,0x5c8
  406762:	lea    rsi,[rip+0x2c1f]        # 409388 <_IO_stdin_used@@Base+0x388>
  406769:	lea    rdi,[rip+0x2d68]        # 4094d8 <_IO_stdin_used@@Base+0x4d8>
  406770:	call   403130 <__assert_fail@plt>
  406775:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406780 <flatcc_builder_create_offset_vector@@Base>:
  406780:	endbr64 
  406784:	push   r12
  406786:	mov    r12,rsi
  406789:	push   rbp
  40678a:	mov    rbp,rdx
  40678d:	push   rbx
  40678e:	mov    rbx,rdi
  406791:	call   405740 <flatcc_builder_start_offset_vector@@Base>
  406796:	test   eax,eax
  406798:	je     4067a8 <flatcc_builder_create_offset_vector@@Base+0x28>
  40679a:	pop    rbx
  40679b:	pop    rbp
  40679c:	xor    eax,eax
  40679e:	pop    r12
  4067a0:	ret    
  4067a1:	nop    DWORD PTR [rax+0x0]
  4067a8:	mov    rsi,rbp
  4067ab:	mov    rdi,rbx
  4067ae:	call   4051f0 <flatcc_builder_extend_offset_vector@@Base>
  4067b3:	test   rax,rax
  4067b6:	je     40679a <flatcc_builder_create_offset_vector@@Base+0x1a>
  4067b8:	lea    rdx,[rbp*4+0x0]
  4067c0:	mov    rsi,r12
  4067c3:	mov    rdi,rax
  4067c6:	call   403170 <memcpy@plt>
  4067cb:	mov    rdi,rbx
  4067ce:	pop    rbx
  4067cf:	pop    rbp
  4067d0:	pop    r12
  4067d2:	jmp    4066a0 <flatcc_builder_end_offset_vector@@Base>
  4067d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004067e0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  4067e0:	endbr64 
  4067e4:	push   rbp
  4067e5:	push   rbx
  4067e6:	sub    rsp,0x8
  4067ea:	mov    rax,QWORD PTR [rdi+0x30]
  4067ee:	cmp    WORD PTR [rax+0xe],0x5
  4067f3:	jne    406896 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb6>
  4067f9:	mov    rcx,rsi
  4067fc:	mov    edx,DWORD PTR [rax+0x14]
  4067ff:	mov    rsi,QWORD PTR [rdi+0x18]
  406803:	mov    rbx,rdi
  406806:	call   403fa0 <flatcc_builder_default_alloc@@Base+0x450>
  40680b:	mov    ebp,eax
  40680d:	test   eax,eax
  40680f:	jne    406820 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
  406811:	add    rsp,0x8
  406815:	pop    rbx
  406816:	mov    eax,ebp
  406818:	pop    rbp
  406819:	ret    
  40681a:	nop    WORD PTR [rax+rax*1+0x0]
  406820:	mov    edx,DWORD PTR [rbx+0x20]
  406823:	mov    rdi,QWORD PTR [rbx+0x18]
  406827:	xor    esi,esi
  406829:	call   403140 <memset@plt>
  40682e:	mov    rax,QWORD PTR [rbx+0x30]
  406832:	mov    edi,DWORD PTR [rbx+0x70]
  406835:	mov    edx,DWORD PTR [rax+0x8]
  406838:	mov    esi,DWORD PTR [rax]
  40683a:	mov    ecx,DWORD PTR [rax+0x4]
  40683d:	mov    DWORD PTR [rbx+0x20],edx
  406840:	mov    rdx,rsi
  406843:	sub    edi,edx
  406845:	mov    DWORD PTR [rbx+0x28],esi
  406848:	mov    edx,edi
  40684a:	add    rsi,QWORD PTR [rbx+0x68]
  40684e:	cmp    ecx,edi
  406850:	cmovb  edx,ecx
  406853:	mov    QWORD PTR [rbx+0x18],rsi
  406857:	mov    DWORD PTR [rbx+0x24],edx
  40685a:	movzx  edx,WORD PTR [rbx+0xea]
  406861:	mov    DWORD PTR [rax+0x4],ecx
  406864:	cmp    dx,WORD PTR [rbx+0xe8]
  40686b:	jbe    406874 <flatcc_builder_end_offset_vector_for_unions@@Base+0x94>
  40686d:	mov    WORD PTR [rbx+0xe8],dx
  406874:	movzx  edx,WORD PTR [rax+0xc]
  406878:	dec    DWORD PTR [rbx+0x104]
  40687e:	sub    rax,0x24
  406882:	mov    QWORD PTR [rbx+0x30],rax
  406886:	mov    WORD PTR [rbx+0xea],dx
  40688d:	add    rsp,0x8
  406891:	mov    eax,ebp
  406893:	pop    rbx
  406894:	pop    rbp
  406895:	ret    
  406896:	lea    rcx,[rip+0x3143]        # 4099e0 <_IO_stdin_used@@Base+0x9e0>
  40689d:	mov    edx,0x5d5
  4068a2:	lea    rsi,[rip+0x2adf]        # 409388 <_IO_stdin_used@@Base+0x388>
  4068a9:	lea    rdi,[rip+0x2c28]        # 4094d8 <_IO_stdin_used@@Base+0x4d8>
  4068b0:	call   403130 <__assert_fail@plt>
  4068b5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004068c0 <flatcc_builder_offset_vector_edit@@Base>:
  4068c0:	endbr64 
  4068c4:	mov    rax,QWORD PTR [rdi+0x18]
  4068c8:	ret    
  4068c9:	nop    DWORD PTR [rax+0x0]

00000000004068d0 <flatcc_builder_offset_vector_count@@Base>:
  4068d0:	endbr64 
  4068d4:	mov    rax,QWORD PTR [rdi+0x30]
  4068d8:	mov    eax,DWORD PTR [rax+0x14]
  4068db:	ret    
  4068dc:	nop    DWORD PTR [rax+0x0]

00000000004068e0 <flatcc_builder_create_union_vector_direct@@Base>:
  4068e0:	endbr64 
  4068e4:	push   r13
  4068e6:	mov    r13,rcx
  4068e9:	push   r12
  4068eb:	mov    r12,rsi
  4068ee:	mov    rcx,r12
  4068f1:	push   rbp
  4068f2:	mov    rsi,rdx
  4068f5:	mov    rdx,r13
  4068f8:	push   rbx
  4068f9:	mov    rbp,rdi
  4068fc:	sub    rsp,0x8
  406900:	call   403fa0 <flatcc_builder_default_alloc@@Base+0x450>
  406905:	test   eax,eax
  406907:	jne    406920 <flatcc_builder_create_union_vector_direct@@Base+0x40>
  406909:	add    rsp,0x8
  40690d:	pop    rbx
  40690e:	pop    rbp
  40690f:	pop    r12
  406911:	xor    eax,eax
  406913:	pop    r13
  406915:	ret    
  406916:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406920:	mov    rdx,r13
  406923:	mov    rsi,r12
  406926:	mov    rdi,rbp
  406929:	mov    r9d,0xffffffff
  40692f:	mov    r8d,0x1
  406935:	mov    ecx,0x1
  40693a:	mov    ebx,eax
  40693c:	call   4063f0 <flatcc_builder_create_vector@@Base>
  406941:	mov    edx,eax
  406943:	mov    rsi,rbx
  406946:	shl    rsi,0x20
  40694a:	mov    rax,rdx
  40694d:	or     rax,rsi
  406950:	test   edx,edx
  406952:	mov    rdx,rax
  406955:	mov    rax,rsi
  406958:	cmovne rax,rdx
  40695c:	add    rsp,0x8
  406960:	pop    rbx
  406961:	pop    rbp
  406962:	pop    r12
  406964:	pop    r13
  406966:	ret    
  406967:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406970 <flatcc_builder_create_union_vector@@Base>:
  406970:	endbr64 
  406974:	push   r13
  406976:	push   r12
  406978:	mov    r12,rdx
  40697b:	push   rbp
  40697c:	mov    rbp,rsi
  40697f:	push   rbx
  406980:	mov    rbx,rdi
  406983:	sub    rsp,0x8
  406987:	call   405740 <flatcc_builder_start_offset_vector@@Base>
  40698c:	test   eax,eax
  40698e:	je     4069a0 <flatcc_builder_create_union_vector@@Base+0x30>
  406990:	add    rsp,0x8
  406994:	pop    rbx
  406995:	pop    rbp
  406996:	pop    r12
  406998:	xor    eax,eax
  40699a:	pop    r13
  40699c:	ret    
  40699d:	nop    DWORD PTR [rax]
  4069a0:	mov    rsi,r12
  4069a3:	mov    rdi,rbx
  4069a6:	call   4051f0 <flatcc_builder_extend_offset_vector@@Base>
  4069ab:	test   rax,rax
  4069ae:	je     406990 <flatcc_builder_create_union_vector@@Base+0x20>
  4069b0:	mov    r13d,DWORD PTR [rbx+0x20]
  4069b4:	mov    rax,r13
  4069b7:	add    eax,r12d
  4069ba:	mov    DWORD PTR [rbx+0x20],eax
  4069bd:	cmp    eax,DWORD PTR [rbx+0x24]
  4069c0:	jae    406a90 <flatcc_builder_create_union_vector@@Base+0x120>
  4069c6:	add    r13,QWORD PTR [rbx+0x18]
  4069ca:	je     406990 <flatcc_builder_create_union_vector@@Base+0x20>
  4069cc:	mov    rdi,rbx
  4069cf:	call   4068c0 <flatcc_builder_offset_vector_edit@@Base>
  4069d4:	test   r12,r12
  4069d7:	je     4069f9 <flatcc_builder_create_union_vector@@Base+0x89>
  4069d9:	xor    edi,edi
  4069db:	nop    DWORD PTR [rax+rax*1+0x0]
  4069e0:	movzx  ecx,BYTE PTR [rbp+rdi*8+0x0]
  4069e5:	mov    BYTE PTR [r13+rdi*1+0x0],cl
  4069ea:	mov    ecx,DWORD PTR [rbp+rdi*8+0x4]
  4069ee:	mov    DWORD PTR [rax+rdi*4],ecx
  4069f1:	inc    rdi
  4069f4:	cmp    r12,rdi
  4069f7:	jne    4069e0 <flatcc_builder_create_union_vector@@Base+0x70>
  4069f9:	mov    rcx,r12
  4069fc:	mov    rdx,rax
  4069ff:	mov    rsi,r13
  406a02:	mov    rdi,rbx
  406a05:	call   4068e0 <flatcc_builder_create_union_vector_direct@@Base>
  406a0a:	mov    edx,DWORD PTR [rbx+0x20]
  406a0d:	mov    rdi,QWORD PTR [rbx+0x18]
  406a11:	xor    esi,esi
  406a13:	mov    rbp,rax
  406a16:	call   403140 <memset@plt>
  406a1b:	mov    rax,QWORD PTR [rbx+0x30]
  406a1f:	mov    edx,DWORD PTR [rax+0x8]
  406a22:	mov    esi,DWORD PTR [rax]
  406a24:	mov    DWORD PTR [rbx+0x20],edx
  406a27:	mov    DWORD PTR [rbx+0x28],esi
  406a2a:	mov    rdx,rsi
  406a2d:	add    rsi,QWORD PTR [rbx+0x68]
  406a31:	mov    ecx,DWORD PTR [rax+0x4]
  406a34:	mov    QWORD PTR [rbx+0x18],rsi
  406a38:	mov    esi,DWORD PTR [rbx+0x70]
  406a3b:	sub    esi,edx
  406a3d:	mov    edx,esi
  406a3f:	cmp    ecx,esi
  406a41:	cmovb  edx,ecx
  406a44:	mov    DWORD PTR [rbx+0x24],edx
  406a47:	movzx  edx,WORD PTR [rbx+0xea]
  406a4e:	mov    DWORD PTR [rax+0x4],ecx
  406a51:	cmp    dx,WORD PTR [rbx+0xe8]
  406a58:	jbe    406a61 <flatcc_builder_create_union_vector@@Base+0xf1>
  406a5a:	mov    WORD PTR [rbx+0xe8],dx
  406a61:	movzx  edx,WORD PTR [rax+0xc]
  406a65:	sub    rax,0x24
  406a69:	mov    QWORD PTR [rbx+0x30],rax
  406a6d:	mov    WORD PTR [rbx+0xea],dx
  406a74:	dec    DWORD PTR [rbx+0x104]
  406a7a:	add    rsp,0x8
  406a7e:	pop    rbx
  406a7f:	mov    rax,rbp
  406a82:	pop    rbp
  406a83:	pop    r12
  406a85:	pop    r13
  406a87:	ret    
  406a88:	nop    DWORD PTR [rax+rax*1+0x0]
  406a90:	lea    esi,[rax+0x1]
  406a93:	mov    edx,0xfffffffc
  406a98:	mov    rdi,rbx
  406a9b:	call   403af0 <emit_test@@Base+0x5b0>
  406aa0:	test   eax,eax
  406aa2:	je     4069c6 <flatcc_builder_create_union_vector@@Base+0x56>
  406aa8:	jmp    406990 <flatcc_builder_create_union_vector@@Base+0x20>
  406aad:	nop    DWORD PTR [rax]

0000000000406ab0 <flatcc_builder_start_union_vector@@Base>:
  406ab0:	endbr64 
  406ab4:	push   rbx
  406ab5:	mov    esi,0x4
  406aba:	mov    rbx,rdi
  406abd:	call   403e80 <flatcc_builder_default_alloc@@Base+0x330>
  406ac2:	test   eax,eax
  406ac4:	jne    406b00 <flatcc_builder_start_union_vector@@Base+0x50>
  406ac6:	mov    rcx,QWORD PTR [rbx+0x30]
  406aca:	xor    edx,edx
  406acc:	mov    QWORD PTR [rcx+0xe],0x80007
  406ad4:	mov    WORD PTR [rcx+0x16],dx
  406ad8:	mov    edx,DWORD PTR [rbx+0x28]
  406adb:	mov    rsi,rdx
  406ade:	add    rdx,QWORD PTR [rbx+0x68]
  406ae2:	mov    QWORD PTR [rbx+0x18],rdx
  406ae6:	mov    edx,DWORD PTR [rbx+0x70]
  406ae9:	sub    edx,esi
  406aeb:	mov    esi,0xfffffffc
  406af0:	cmp    edx,esi
  406af2:	cmova  edx,esi
  406af5:	mov    DWORD PTR [rbx+0x24],edx
  406af8:	mov    DWORD PTR [rcx+0x4],esi
  406afb:	pop    rbx
  406afc:	ret    
  406afd:	nop    DWORD PTR [rax]
  406b00:	mov    eax,0xffffffff
  406b05:	pop    rbx
  406b06:	ret    
  406b07:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406b10 <flatcc_builder_union_vector_edit@@Base>:
  406b10:	endbr64 
  406b14:	mov    rax,QWORD PTR [rdi+0x18]
  406b18:	ret    
  406b19:	nop    DWORD PTR [rax+0x0]

0000000000406b20 <flatcc_builder_union_vector_count@@Base>:
  406b20:	endbr64 
  406b24:	mov    rax,QWORD PTR [rdi+0x30]
  406b28:	mov    eax,DWORD PTR [rax+0x14]
  406b2b:	ret    
  406b2c:	nop    DWORD PTR [rax+0x0]

0000000000406b30 <flatcc_builder_end_union_vector@@Base>:
  406b30:	endbr64 
  406b34:	push   r13
  406b36:	push   r12
  406b38:	push   rbp
  406b39:	push   rbx
  406b3a:	sub    rsp,0x8
  406b3e:	mov    rax,QWORD PTR [rdi+0x30]
  406b42:	cmp    WORD PTR [rax+0xe],0x7
  406b47:	jne    406c6d <flatcc_builder_end_union_vector@@Base+0x13d>
  406b4d:	mov    rbx,rdi
  406b50:	call   406b20 <flatcc_builder_union_vector_count@@Base>
  406b55:	mov    ebp,DWORD PTR [rbx+0x20]
  406b58:	mov    r12,rax
  406b5b:	lea    eax,[rax+rax*4]
  406b5e:	add    eax,ebp
  406b60:	mov    DWORD PTR [rbx+0x20],eax
  406b63:	cmp    eax,DWORD PTR [rbx+0x24]
  406b66:	jae    406c48 <flatcc_builder_end_union_vector@@Base+0x118>
  406b6c:	add    rbp,QWORD PTR [rbx+0x18]
  406b70:	je     406c60 <flatcc_builder_end_union_vector@@Base+0x130>
  406b76:	mov    rdi,rbx
  406b79:	lea    r13,[rbp+r12*4+0x0]
  406b7e:	call   406b10 <flatcc_builder_union_vector_edit@@Base>
  406b83:	test   r12,r12
  406b86:	je     406bac <flatcc_builder_end_union_vector@@Base+0x7c>
  406b88:	xor    edi,edi
  406b8a:	nop    WORD PTR [rax+rax*1+0x0]
  406b90:	movzx  r8d,BYTE PTR [rax+rdi*8]
  406b95:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  406b9a:	mov    r8d,DWORD PTR [rax+rdi*8+0x4]
  406b9f:	mov    DWORD PTR [rbp+rdi*4+0x0],r8d
  406ba4:	inc    rdi
  406ba7:	cmp    r12,rdi
  406baa:	jne    406b90 <flatcc_builder_end_union_vector@@Base+0x60>
  406bac:	mov    rcx,r12
  406baf:	mov    rdx,rbp
  406bb2:	mov    rsi,r13
  406bb5:	mov    rdi,rbx
  406bb8:	call   4068e0 <flatcc_builder_create_union_vector_direct@@Base>
  406bbd:	mov    edx,DWORD PTR [rbx+0x20]
  406bc0:	mov    rdi,QWORD PTR [rbx+0x18]
  406bc4:	xor    esi,esi
  406bc6:	mov    rbp,rax
  406bc9:	call   403140 <memset@plt>
  406bce:	mov    rdx,QWORD PTR [rbx+0x30]
  406bd2:	mov    esi,DWORD PTR [rdx]
  406bd4:	mov    eax,DWORD PTR [rdx+0x8]
  406bd7:	mov    rcx,rsi
  406bda:	mov    DWORD PTR [rbx+0x28],esi
  406bdd:	add    rsi,QWORD PTR [rbx+0x68]
  406be1:	mov    DWORD PTR [rbx+0x20],eax
  406be4:	mov    eax,DWORD PTR [rdx+0x4]
  406be7:	mov    QWORD PTR [rbx+0x18],rsi
  406beb:	mov    esi,DWORD PTR [rbx+0x70]
  406bee:	sub    esi,ecx
  406bf0:	cmp    eax,esi
  406bf2:	mov    ecx,esi
  406bf4:	cmovb  ecx,eax
  406bf7:	mov    DWORD PTR [rbx+0x24],ecx
  406bfa:	mov    DWORD PTR [rdx+0x4],eax
  406bfd:	movzx  eax,WORD PTR [rbx+0xea]
  406c04:	cmp    ax,WORD PTR [rbx+0xe8]
  406c0b:	ja     406c38 <flatcc_builder_end_union_vector@@Base+0x108>
  406c0d:	movzx  eax,WORD PTR [rdx+0xc]
  406c11:	dec    DWORD PTR [rbx+0x104]
  406c17:	sub    rdx,0x24
  406c1b:	mov    WORD PTR [rbx+0xea],ax
  406c22:	mov    QWORD PTR [rbx+0x30],rdx
  406c26:	add    rsp,0x8
  406c2a:	mov    rax,rbp
  406c2d:	pop    rbx
  406c2e:	pop    rbp
  406c2f:	pop    r12
  406c31:	pop    r13
  406c33:	ret    
  406c34:	nop    DWORD PTR [rax+0x0]
  406c38:	mov    WORD PTR [rbx+0xe8],ax
  406c3f:	jmp    406c0d <flatcc_builder_end_union_vector@@Base+0xdd>
  406c41:	nop    DWORD PTR [rax+0x0]
  406c48:	lea    esi,[rax+0x1]
  406c4b:	mov    edx,0xfffffffc
  406c50:	mov    rdi,rbx
  406c53:	call   403af0 <emit_test@@Base+0x5b0>
  406c58:	test   eax,eax
  406c5a:	je     406b6c <flatcc_builder_end_union_vector@@Base+0x3c>
  406c60:	add    rsp,0x8
  406c64:	pop    rbx
  406c65:	pop    rbp
  406c66:	pop    r12
  406c68:	xor    eax,eax
  406c6a:	pop    r13
  406c6c:	ret    
  406c6d:	lea    rcx,[rip+0x2cec]        # 409960 <_IO_stdin_used@@Base+0x960>
  406c74:	mov    edx,0x651
  406c79:	lea    rsi,[rip+0x2708]        # 409388 <_IO_stdin_used@@Base+0x388>
  406c80:	lea    rdi,[rip+0x2979]        # 409600 <_IO_stdin_used@@Base+0x600>
  406c87:	call   403130 <__assert_fail@plt>
  406c8c:	nop    DWORD PTR [rax+0x0]

0000000000406c90 <flatcc_builder_extend_union_vector@@Base>:
  406c90:	endbr64 
  406c94:	push   rbp
  406c95:	mov    edx,esi
  406c97:	push   rbx
  406c98:	sub    rsp,0x8
  406c9c:	mov    rax,QWORD PTR [rdi+0x30]
  406ca0:	add    edx,DWORD PTR [rax+0x14]
  406ca3:	jb     406ce5 <flatcc_builder_extend_union_vector@@Base+0x55>
  406ca5:	cmp    edx,0x1fffffff
  406cab:	ja     406ce5 <flatcc_builder_extend_union_vector@@Base+0x55>
  406cad:	mov    ebp,DWORD PTR [rdi+0x20]
  406cb0:	mov    DWORD PTR [rax+0x14],edx
  406cb3:	lea    eax,[rbp+rsi*8+0x0]
  406cb7:	mov    rbx,rdi
  406cba:	mov    DWORD PTR [rdi+0x20],eax
  406cbd:	cmp    eax,DWORD PTR [rdi+0x24]
  406cc0:	jae    406cd0 <flatcc_builder_extend_union_vector@@Base+0x40>
  406cc2:	mov    rax,QWORD PTR [rbx+0x18]
  406cc6:	add    rax,rbp
  406cc9:	add    rsp,0x8
  406ccd:	pop    rbx
  406cce:	pop    rbp
  406ccf:	ret    
  406cd0:	lea    esi,[rax+0x1]
  406cd3:	mov    edx,0xfffffffc
  406cd8:	call   403af0 <emit_test@@Base+0x5b0>
  406cdd:	test   eax,eax
  406cdf:	je     406cc2 <flatcc_builder_extend_union_vector@@Base+0x32>
  406ce1:	xor    eax,eax
  406ce3:	jmp    406cc9 <flatcc_builder_extend_union_vector@@Base+0x39>
  406ce5:	call   403e50 <flatcc_builder_default_alloc@@Base+0x300>
  406cea:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406cf0 <flatcc_builder_truncate_union_vector@@Base>:
  406cf0:	endbr64 
  406cf4:	sub    rsp,0x8
  406cf8:	mov    rax,QWORD PTR [rdi+0x30]
  406cfc:	cmp    WORD PTR [rax+0xe],0x7
  406d01:	jne    406d32 <flatcc_builder_truncate_union_vector@@Base+0x42>
  406d03:	mov    edx,DWORD PTR [rax+0x14]
  406d06:	cmp    edx,esi
  406d08:	jb     406d51 <flatcc_builder_truncate_union_vector@@Base+0x61>
  406d0a:	sub    edx,esi
  406d0c:	mov    DWORD PTR [rax+0x14],edx
  406d0f:	imul   esi,DWORD PTR [rax+0x10]
  406d13:	mov    eax,DWORD PTR [rdi+0x20]
  406d16:	mov    edx,esi
  406d18:	sub    eax,esi
  406d1a:	mov    DWORD PTR [rdi+0x20],eax
  406d1d:	add    rax,QWORD PTR [rdi+0x18]
  406d21:	mov    rdi,rax
  406d24:	xor    esi,esi
  406d26:	call   403140 <memset@plt>
  406d2b:	xor    eax,eax
  406d2d:	add    rsp,0x8
  406d31:	ret    
  406d32:	lea    rcx,[rip+0x2be7]        # 409920 <_IO_stdin_used@@Base+0x920>
  406d39:	mov    edx,0x681
  406d3e:	lea    rsi,[rip+0x2643]        # 409388 <_IO_stdin_used@@Base+0x388>
  406d45:	lea    rdi,[rip+0x28b4]        # 409600 <_IO_stdin_used@@Base+0x600>
  406d4c:	call   403130 <__assert_fail@plt>
  406d51:	lea    rcx,[rip+0x2bc8]        # 409920 <_IO_stdin_used@@Base+0x920>
  406d58:	mov    edx,0x682
  406d5d:	lea    rsi,[rip+0x2624]        # 409388 <_IO_stdin_used@@Base+0x388>
  406d64:	lea    rdi,[rip+0x27fd]        # 409568 <_IO_stdin_used@@Base+0x568>
  406d6b:	call   403130 <__assert_fail@plt>

0000000000406d70 <flatcc_builder_union_vector_push@@Base>:
  406d70:	endbr64 
  406d74:	push   r12
  406d76:	push   rbp
  406d77:	push   rbx
  406d78:	mov    rdx,QWORD PTR [rdi+0x30]
  406d7c:	cmp    WORD PTR [rdx+0xe],0x7
  406d81:	jne    406dd8 <flatcc_builder_union_vector_push@@Base+0x68>
  406d83:	mov    eax,DWORD PTR [rdx+0x14]
  406d86:	cmp    eax,0x1fffffff
  406d8b:	je     406dd1 <flatcc_builder_union_vector_push@@Base+0x61>
  406d8d:	mov    ebp,DWORD PTR [rdi+0x20]
  406d90:	inc    eax
  406d92:	mov    DWORD PTR [rdx+0x14],eax
  406d95:	lea    edx,[rbp+0x8]
  406d98:	mov    rbx,rdi
  406d9b:	mov    r12,rsi
  406d9e:	mov    DWORD PTR [rdi+0x20],edx
  406da1:	cmp    edx,DWORD PTR [rdi+0x24]
  406da4:	jae    406dc0 <flatcc_builder_union_vector_push@@Base+0x50>
  406da6:	mov    rax,rbp
  406da9:	add    rax,QWORD PTR [rbx+0x18]
  406dad:	je     406db2 <flatcc_builder_union_vector_push@@Base+0x42>
  406daf:	mov    QWORD PTR [rax],r12
  406db2:	pop    rbx
  406db3:	pop    rbp
  406db4:	pop    r12
  406db6:	ret    
  406db7:	nop    WORD PTR [rax+rax*1+0x0]
  406dc0:	lea    esi,[rbp+0x9]
  406dc3:	mov    edx,0xfffffffc
  406dc8:	call   403af0 <emit_test@@Base+0x5b0>
  406dcd:	test   eax,eax
  406dcf:	je     406da6 <flatcc_builder_union_vector_push@@Base+0x36>
  406dd1:	pop    rbx
  406dd2:	pop    rbp
  406dd3:	xor    eax,eax
  406dd5:	pop    r12
  406dd7:	ret    
  406dd8:	lea    rcx,[rip+0x2b01]        # 4098e0 <_IO_stdin_used@@Base+0x8e0>
  406ddf:	mov    edx,0x68d
  406de4:	lea    rsi,[rip+0x259d]        # 409388 <_IO_stdin_used@@Base+0x388>
  406deb:	lea    rdi,[rip+0x280e]        # 409600 <_IO_stdin_used@@Base+0x600>
  406df2:	call   403130 <__assert_fail@plt>
  406df7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406e00 <flatcc_builder_append_union_vector@@Base>:
  406e00:	endbr64 
  406e04:	push   r13
  406e06:	push   r12
  406e08:	push   rbp
  406e09:	push   rbx
  406e0a:	sub    rsp,0x8
  406e0e:	mov    rax,QWORD PTR [rdi+0x30]
  406e12:	cmp    WORD PTR [rax+0xe],0x7
  406e17:	jne    406e86 <flatcc_builder_append_union_vector@@Base+0x86>
  406e19:	mov    ecx,edx
  406e1b:	add    ecx,DWORD PTR [rax+0x14]
  406e1e:	jb     406ea5 <flatcc_builder_append_union_vector@@Base+0xa5>
  406e24:	cmp    ecx,0x1fffffff
  406e2a:	ja     406ea5 <flatcc_builder_append_union_vector@@Base+0xa5>
  406e2c:	mov    r12d,DWORD PTR [rdi+0x20]
  406e30:	lea    ebx,[rdx*8+0x0]
  406e37:	mov    rdx,r12
  406e3a:	add    edx,ebx
  406e3c:	mov    DWORD PTR [rax+0x14],ecx
  406e3f:	mov    rbp,rdi
  406e42:	mov    r13,rsi
  406e45:	mov    DWORD PTR [rdi+0x20],edx
  406e48:	cmp    edx,DWORD PTR [rdi+0x24]
  406e4b:	jae    406e70 <flatcc_builder_append_union_vector@@Base+0x70>
  406e4d:	add    r12,QWORD PTR [rbp+0x18]
  406e51:	je     406e60 <flatcc_builder_append_union_vector@@Base+0x60>
  406e53:	mov    edx,ebx
  406e55:	mov    rsi,r13
  406e58:	mov    rdi,r12
  406e5b:	call   403170 <memcpy@plt>
  406e60:	add    rsp,0x8
  406e64:	pop    rbx
  406e65:	pop    rbp
  406e66:	mov    rax,r12
  406e69:	pop    r12
  406e6b:	pop    r13
  406e6d:	ret    
  406e6e:	xchg   ax,ax
  406e70:	lea    esi,[rdx+0x1]
  406e73:	mov    edx,0xfffffffc
  406e78:	call   403af0 <emit_test@@Base+0x5b0>
  406e7d:	test   eax,eax
  406e7f:	je     406e4d <flatcc_builder_append_union_vector@@Base+0x4d>
  406e81:	xor    r12d,r12d
  406e84:	jmp    406e60 <flatcc_builder_append_union_vector@@Base+0x60>
  406e86:	lea    rcx,[rip+0x2a13]        # 4098a0 <_IO_stdin_used@@Base+0x8a0>
  406e8d:	mov    edx,0x69c
  406e92:	lea    rsi,[rip+0x24ef]        # 409388 <_IO_stdin_used@@Base+0x388>
  406e99:	lea    rdi,[rip+0x2760]        # 409600 <_IO_stdin_used@@Base+0x600>
  406ea0:	call   403130 <__assert_fail@plt>
  406ea5:	call   403e50 <flatcc_builder_default_alloc@@Base+0x300>
  406eaa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406eb0 <flatcc_builder_create_string@@Base>:
  406eb0:	endbr64 
  406eb4:	push   rbp
  406eb5:	push   rbx
  406eb6:	sub    rsp,0xb8
  406ebd:	mov    rax,QWORD PTR fs:0x28
  406ec6:	mov    QWORD PTR [rsp+0xa8],rax
  406ece:	xor    eax,eax
  406ed0:	mov    eax,0xffffffff
  406ed5:	cmp    rdx,rax
  406ed8:	ja     406fa0 <flatcc_builder_create_string@@Base+0xf0>
  406ede:	mov    rbx,rdi
  406ee1:	mov    edi,DWORD PTR [rdi+0xf0]
  406ee7:	lea    rcx,[rsp+0xc]
  406eec:	lea    eax,[rdi-0x1]
  406eef:	sub    eax,edx
  406ef1:	and    eax,0x3
  406ef4:	mov    DWORD PTR [rsp+0xc],edx
  406ef8:	inc    eax
  406efa:	mov    QWORD PTR [rsp+0x20],rcx
  406eff:	mov    QWORD PTR [rsp+0x28],0x4
  406f08:	test   rdx,rdx
  406f0b:	jne    406f80 <flatcc_builder_create_string@@Base+0xd0>
  406f0d:	mov    edx,0x2
  406f12:	mov    ecx,0x1
  406f17:	mov    r8d,0x4
  406f1d:	add    r8,rax
  406f20:	mov    rsi,0x409e80
  406f27:	mov    ebp,edi
  406f29:	shl    rcx,0x4
  406f2d:	sub    ebp,r8d
  406f30:	mov    QWORD PTR [rsp+0x10],r8
  406f35:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  406f3a:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  406f3f:	mov    DWORD PTR [rsp+0x18],edx
  406f43:	cmp    edi,ebp
  406f45:	jle    406fa4 <flatcc_builder_create_string@@Base+0xf4>
  406f47:	mov    rdi,QWORD PTR [rbx+0x38]
  406f4b:	lea    rsi,[rsp+0x20]
  406f50:	mov    ecx,ebp
  406f52:	call   QWORD PTR [rbx+0x48]
  406f55:	test   eax,eax
  406f57:	jne    406fc8 <flatcc_builder_create_string@@Base+0x118>
  406f59:	mov    DWORD PTR [rbx+0xf0],ebp
  406f5f:	mov    rbx,QWORD PTR [rsp+0xa8]
  406f67:	xor    rbx,QWORD PTR fs:0x28
  406f70:	mov    eax,ebp
  406f72:	jne    406fc3 <flatcc_builder_create_string@@Base+0x113>
  406f74:	add    rsp,0xb8
  406f7b:	pop    rbx
  406f7c:	pop    rbp
  406f7d:	ret    
  406f7e:	xchg   ax,ax
  406f80:	lea    r8,[rdx+0x4]
  406f84:	mov    QWORD PTR [rsp+0x38],rdx
  406f89:	mov    QWORD PTR [rsp+0x30],rsi
  406f8e:	mov    edx,0x3
  406f93:	mov    ecx,0x2
  406f98:	jmp    406f1d <flatcc_builder_create_string@@Base+0x6d>
  406f9d:	nop    DWORD PTR [rax]
  406fa0:	xor    ebp,ebp
  406fa2:	jmp    406f5f <flatcc_builder_create_string@@Base+0xaf>
  406fa4:	lea    rcx,[rip+0x2e25]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  406fab:	mov    edx,0x287
  406fb0:	lea    rsi,[rip+0x23d1]        # 409388 <_IO_stdin_used@@Base+0x388>
  406fb7:	lea    rdi,[rip+0x2761]        # 40971f <_IO_stdin_used@@Base+0x71f>
  406fbe:	call   403130 <__assert_fail@plt>
  406fc3:	call   403120 <__stack_chk_fail@plt>
  406fc8:	call   403e20 <flatcc_builder_default_alloc@@Base+0x2d0>
  406fcd:	nop    DWORD PTR [rax]

0000000000406fd0 <flatcc_builder_create_string_str@@Base>:
  406fd0:	endbr64 
  406fd4:	push   rbp
  406fd5:	mov    rbp,rdi
  406fd8:	mov    rdi,rsi
  406fdb:	push   rbx
  406fdc:	mov    rbx,rsi
  406fdf:	sub    rsp,0x8
  406fe3:	call   403110 <strlen@plt>
  406fe8:	add    rsp,0x8
  406fec:	mov    rsi,rbx
  406fef:	pop    rbx
  406ff0:	mov    rdi,rbp
  406ff3:	mov    rdx,rax
  406ff6:	pop    rbp
  406ff7:	jmp    406eb0 <flatcc_builder_create_string@@Base>
  406ffc:	nop    DWORD PTR [rax+0x0]

0000000000407000 <flatcc_builder_create_string_strn@@Base>:
  407000:	endbr64 
  407004:	push   r12
  407006:	mov    r12,rdi
  407009:	push   rbp
  40700a:	mov    rbp,rsi
  40700d:	mov    rdi,rbp
  407010:	push   rbx
  407011:	xor    esi,esi
  407013:	mov    rbx,rdx
  407016:	call   403150 <memchr@plt>
  40701b:	mov    rdx,rax
  40701e:	sub    rdx,rbp
  407021:	test   rax,rax
  407024:	cmovne rbx,rdx
  407028:	mov    rsi,rbp
  40702b:	mov    rdx,rbx
  40702e:	pop    rbx
  40702f:	pop    rbp
  407030:	mov    rdi,r12
  407033:	pop    r12
  407035:	jmp    406eb0 <flatcc_builder_create_string@@Base>
  40703a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407040 <flatcc_builder_end_string@@Base>:
  407040:	endbr64 
  407044:	push   rbp
  407045:	push   rbx
  407046:	sub    rsp,0x8
  40704a:	mov    rax,QWORD PTR [rdi+0x30]
  40704e:	cmp    WORD PTR [rax+0xe],0x6
  407053:	jne    407115 <flatcc_builder_end_string@@Base+0xd5>
  407059:	mov    edx,DWORD PTR [rdi+0x20]
  40705c:	mov    rbx,rdi
  40705f:	cmp    DWORD PTR [rax+0x14],edx
  407062:	jne    4070f6 <flatcc_builder_end_string@@Base+0xb6>
  407068:	mov    rsi,QWORD PTR [rdi+0x18]
  40706c:	call   406eb0 <flatcc_builder_create_string@@Base>
  407071:	mov    ebp,eax
  407073:	test   eax,eax
  407075:	jne    407080 <flatcc_builder_end_string@@Base+0x40>
  407077:	add    rsp,0x8
  40707b:	pop    rbx
  40707c:	mov    eax,ebp
  40707e:	pop    rbp
  40707f:	ret    
  407080:	mov    edx,DWORD PTR [rbx+0x20]
  407083:	mov    rdi,QWORD PTR [rbx+0x18]
  407087:	xor    esi,esi
  407089:	call   403140 <memset@plt>
  40708e:	mov    rax,QWORD PTR [rbx+0x30]
  407092:	mov    edi,DWORD PTR [rbx+0x70]
  407095:	mov    edx,DWORD PTR [rax+0x8]
  407098:	mov    esi,DWORD PTR [rax]
  40709a:	mov    ecx,DWORD PTR [rax+0x4]
  40709d:	mov    DWORD PTR [rbx+0x20],edx
  4070a0:	mov    rdx,rsi
  4070a3:	sub    edi,edx
  4070a5:	mov    DWORD PTR [rbx+0x28],esi
  4070a8:	mov    edx,edi
  4070aa:	add    rsi,QWORD PTR [rbx+0x68]
  4070ae:	cmp    ecx,edi
  4070b0:	cmovb  edx,ecx
  4070b3:	mov    QWORD PTR [rbx+0x18],rsi
  4070b7:	mov    DWORD PTR [rbx+0x24],edx
  4070ba:	movzx  edx,WORD PTR [rbx+0xea]
  4070c1:	mov    DWORD PTR [rax+0x4],ecx
  4070c4:	cmp    dx,WORD PTR [rbx+0xe8]
  4070cb:	jbe    4070d4 <flatcc_builder_end_string@@Base+0x94>
  4070cd:	mov    WORD PTR [rbx+0xe8],dx
  4070d4:	movzx  edx,WORD PTR [rax+0xc]
  4070d8:	dec    DWORD PTR [rbx+0x104]
  4070de:	sub    rax,0x24
  4070e2:	mov    QWORD PTR [rbx+0x30],rax
  4070e6:	mov    WORD PTR [rbx+0xea],dx
  4070ed:	add    rsp,0x8
  4070f1:	mov    eax,ebp
  4070f3:	pop    rbx
  4070f4:	pop    rbp
  4070f5:	ret    
  4070f6:	lea    rcx,[rip+0x2783]        # 409880 <_IO_stdin_used@@Base+0x880>
  4070fd:	mov    edx,0x6c5
  407102:	lea    rsi,[rip+0x227f]        # 409388 <_IO_stdin_used@@Base+0x388>
  407109:	lea    rdi,[rip+0x2528]        # 409638 <_IO_stdin_used@@Base+0x638>
  407110:	call   403130 <__assert_fail@plt>
  407115:	lea    rcx,[rip+0x2764]        # 409880 <_IO_stdin_used@@Base+0x880>
  40711c:	mov    edx,0x6c4
  407121:	lea    rsi,[rip+0x2260]        # 409388 <_IO_stdin_used@@Base+0x388>
  407128:	lea    rdi,[rip+0x23e1]        # 409510 <_IO_stdin_used@@Base+0x510>
  40712f:	call   403130 <__assert_fail@plt>
  407134:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40713f:	nop

0000000000407140 <flatcc_builder_string_edit@@Base>:
  407140:	endbr64 
  407144:	mov    rax,QWORD PTR [rdi+0x18]
  407148:	ret    
  407149:	nop    DWORD PTR [rax+0x0]

0000000000407150 <flatcc_builder_string_len@@Base>:
  407150:	endbr64 
  407154:	mov    rax,QWORD PTR [rdi+0x30]
  407158:	mov    eax,DWORD PTR [rax+0x14]
  40715b:	ret    
  40715c:	nop    DWORD PTR [rax+0x0]

0000000000407160 <flatcc_builder_table_add@@Base>:
  407160:	endbr64 
  407164:	push   r13
  407166:	push   r12
  407168:	push   rbp
  407169:	push   rbx
  40716a:	sub    rsp,0x8
  40716e:	mov    rax,QWORD PTR [rdi+0x30]
  407172:	cmp    WORD PTR [rax+0xe],0x3
  407177:	jne    407244 <flatcc_builder_table_add@@Base+0xe4>
  40717d:	mov    r12d,esi
  407180:	cmp    esi,0x7ffc
  407186:	ja     407282 <flatcc_builder_table_add@@Base+0x122>
  40718c:	mov    rbx,rdi
  40718f:	cmp    WORD PTR [rdi+0xea],cx
  407196:	jb     407200 <flatcc_builder_table_add@@Base+0xa0>
  407198:	movsxd r13,r12d
  40719b:	mov    rsi,QWORD PTR [rbx+0x8]
  40719f:	add    r13,r13
  4071a2:	add    rsi,r13
  4071a5:	cmp    WORD PTR [rsi],0x0
  4071a9:	jne    407263 <flatcc_builder_table_add@@Base+0x103>
  4071af:	mov    eax,DWORD PTR [rbx+0x14]
  4071b2:	movzx  ecx,cx
  4071b5:	xor    eax,r12d
  4071b8:	imul   eax,eax,0x9e3779b1
  4071be:	xor    eax,edx
  4071c0:	imul   eax,eax,0x9e3779b1
  4071c6:	mov    DWORD PTR [rbx+0x14],eax
  4071c9:	mov    eax,DWORD PTR [rbx+0x20]
  4071cc:	lea    ebp,[rcx+rax*1-0x1]
  4071d0:	neg    ecx
  4071d2:	and    ebp,ecx
  4071d4:	add    edx,ebp
  4071d6:	mov    DWORD PTR [rbx+0x20],edx
  4071d9:	cmp    edx,DWORD PTR [rbx+0x24]
  4071dc:	jae    407220 <flatcc_builder_table_add@@Base+0xc0>
  4071de:	lea    eax,[rbp+0x4]
  4071e1:	mov    WORD PTR [rsi],ax
  4071e4:	cmp    r12w,WORD PTR [rbx+0x10]
  4071e9:	jae    407210 <flatcc_builder_table_add@@Base+0xb0>
  4071eb:	mov    eax,ebp
  4071ed:	add    rax,QWORD PTR [rbx+0x18]
  4071f1:	add    rsp,0x8
  4071f5:	pop    rbx
  4071f6:	pop    rbp
  4071f7:	pop    r12
  4071f9:	pop    r13
  4071fb:	ret    
  4071fc:	nop    DWORD PTR [rax+0x0]
  407200:	mov    WORD PTR [rdi+0xea],cx
  407207:	jmp    407198 <flatcc_builder_table_add@@Base+0x38>
  407209:	nop    DWORD PTR [rax+0x0]
  407210:	inc    r12d
  407213:	mov    WORD PTR [rbx+0x10],r12w
  407218:	jmp    4071eb <flatcc_builder_table_add@@Base+0x8b>
  40721a:	nop    WORD PTR [rax+rax*1+0x0]
  407220:	lea    esi,[rdx+0x1]
  407223:	mov    rdi,rbx
  407226:	mov    edx,0xfffc
  40722b:	call   403af0 <emit_test@@Base+0x5b0>
  407230:	test   eax,eax
  407232:	jne    407240 <flatcc_builder_table_add@@Base+0xe0>
  407234:	mov    rsi,QWORD PTR [rbx+0x8]
  407238:	add    rsi,r13
  40723b:	jmp    4071de <flatcc_builder_table_add@@Base+0x7e>
  40723d:	nop    DWORD PTR [rax]
  407240:	xor    eax,eax
  407242:	jmp    4071f1 <flatcc_builder_table_add@@Base+0x91>
  407244:	lea    rcx,[rip+0x2615]        # 409860 <_IO_stdin_used@@Base+0x860>
  40724b:	mov    edx,0x6ed
  407250:	lea    rsi,[rip+0x2131]        # 409388 <_IO_stdin_used@@Base+0x388>
  407257:	lea    rdi,[rip+0x2372]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  40725e:	call   403130 <__assert_fail@plt>
  407263:	lea    rcx,[rip+0x25f6]        # 409860 <_IO_stdin_used@@Base+0x860>
  40726a:	mov    edx,0x6f8
  40726f:	lea    rsi,[rip+0x2112]        # 409388 <_IO_stdin_used@@Base+0x388>
  407276:	lea    rdi,[rip+0x24a2]        # 40971f <_IO_stdin_used@@Base+0x71f>
  40727d:	call   403130 <__assert_fail@plt>
  407282:	lea    rcx,[rip+0x25d7]        # 409860 <_IO_stdin_used@@Base+0x860>
  407289:	mov    edx,0x6ee
  40728e:	lea    rsi,[rip+0x20f3]        # 409388 <_IO_stdin_used@@Base+0x388>
  407295:	lea    rdi,[rip+0x23c4]        # 409660 <_IO_stdin_used@@Base+0x660>
  40729c:	call   403130 <__assert_fail@plt>
  4072a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4072ac:	nop    DWORD PTR [rax+0x0]

00000000004072b0 <flatcc_builder_table_edit@@Base>:
  4072b0:	endbr64 
  4072b4:	mov    rax,QWORD PTR [rdi+0x30]
  4072b8:	cmp    WORD PTR [rax+0xe],0x3
  4072bd:	jne    4072ca <flatcc_builder_table_edit@@Base+0x1a>
  4072bf:	mov    eax,DWORD PTR [rdi+0x20]
  4072c2:	sub    rax,rsi
  4072c5:	add    rax,QWORD PTR [rdi+0x18]
  4072c9:	ret    
  4072ca:	push   rax
  4072cb:	lea    rcx,[rip+0x256e]        # 409840 <_IO_stdin_used@@Base+0x840>
  4072d2:	mov    edx,0x702
  4072d7:	lea    rsi,[rip+0x20aa]        # 409388 <_IO_stdin_used@@Base+0x388>
  4072de:	lea    rdi,[rip+0x22eb]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  4072e5:	call   403130 <__assert_fail@plt>
  4072ea:	nop    WORD PTR [rax+rax*1+0x0]

00000000004072f0 <flatcc_builder_table_add_copy@@Base>:
  4072f0:	endbr64 
  4072f4:	push   rbp
  4072f5:	mov    rbp,rdx
  4072f8:	push   rbx
  4072f9:	mov    rbx,rcx
  4072fc:	mov    rdx,rbx
  4072ff:	movzx  ecx,r8w
  407303:	sub    rsp,0x8
  407307:	call   407160 <flatcc_builder_table_add@@Base>
  40730c:	mov    rcx,rax
  40730f:	test   rax,rax
  407312:	je     407325 <flatcc_builder_table_add_copy@@Base+0x35>
  407314:	mov    rdx,rbx
  407317:	mov    rsi,rbp
  40731a:	mov    rdi,rax
  40731d:	call   403170 <memcpy@plt>
  407322:	mov    rcx,rax
  407325:	add    rsp,0x8
  407329:	pop    rbx
  40732a:	mov    rax,rcx
  40732d:	pop    rbp
  40732e:	ret    
  40732f:	nop

0000000000407330 <flatcc_builder_table_add_offset@@Base>:
  407330:	endbr64 
  407334:	push   r13
  407336:	push   r12
  407338:	push   rbp
  407339:	push   rbx
  40733a:	sub    rsp,0x8
  40733e:	mov    rax,QWORD PTR [rdi+0x30]
  407342:	cmp    WORD PTR [rax+0xe],0x3
  407347:	jne    407404 <flatcc_builder_table_add_offset@@Base+0xd4>
  40734d:	mov    r12d,esi
  407350:	cmp    esi,0x7ffc
  407356:	ja     407442 <flatcc_builder_table_add_offset@@Base+0x112>
  40735c:	movsxd r13,esi
  40735f:	mov    rdx,QWORD PTR [rdi+0x8]
  407363:	add    r13,r13
  407366:	add    rdx,r13
  407369:	cmp    WORD PTR [rdx],0x0
  40736d:	mov    rbx,rdi
  407370:	jne    407423 <flatcc_builder_table_add_offset@@Base+0xf3>
  407376:	mov    eax,DWORD PTR [rdi+0x14]
  407379:	xor    eax,esi
  40737b:	imul   eax,eax,0x9e3779b1
  407381:	xor    eax,0x4
  407384:	imul   eax,eax,0x9e3779b1
  40738a:	mov    DWORD PTR [rdi+0x14],eax
  40738d:	mov    eax,DWORD PTR [rdi+0x20]
  407390:	lea    ebp,[rax+0x3]
  407393:	and    ebp,0xfffffffc
  407396:	lea    esi,[rbp+0x4]
  407399:	mov    DWORD PTR [rdi+0x20],esi
  40739c:	cmp    esi,DWORD PTR [rdi+0x24]
  40739f:	ja     4073e0 <flatcc_builder_table_add_offset@@Base+0xb0>
  4073a1:	lea    eax,[rbp+0x4]
  4073a4:	mov    WORD PTR [rdx],ax
  4073a7:	cmp    r12w,WORD PTR [rbx+0x10]
  4073ac:	jae    4073d0 <flatcc_builder_table_add_offset@@Base+0xa0>
  4073ae:	mov    rax,QWORD PTR [rbx]
  4073b1:	lea    rdx,[rax+0x2]
  4073b5:	mov    QWORD PTR [rbx],rdx
  4073b8:	mov    WORD PTR [rax],bp
  4073bb:	mov    eax,ebp
  4073bd:	add    rax,QWORD PTR [rbx+0x18]
  4073c1:	add    rsp,0x8
  4073c5:	pop    rbx
  4073c6:	pop    rbp
  4073c7:	pop    r12
  4073c9:	pop    r13
  4073cb:	ret    
  4073cc:	nop    DWORD PTR [rax+0x0]
  4073d0:	lea    esi,[r12+0x1]
  4073d5:	mov    WORD PTR [rbx+0x10],si
  4073d9:	jmp    4073ae <flatcc_builder_table_add_offset@@Base+0x7e>
  4073db:	nop    DWORD PTR [rax+rax*1+0x0]
  4073e0:	mov    edx,0xfffc
  4073e5:	call   403af0 <emit_test@@Base+0x5b0>
  4073ea:	test   eax,eax
  4073ec:	jne    407400 <flatcc_builder_table_add_offset@@Base+0xd0>
  4073ee:	mov    rdx,QWORD PTR [rbx+0x8]
  4073f2:	add    rdx,r13
  4073f5:	jmp    4073a1 <flatcc_builder_table_add_offset@@Base+0x71>
  4073f7:	nop    WORD PTR [rax+rax*1+0x0]
  407400:	xor    eax,eax
  407402:	jmp    4073c1 <flatcc_builder_table_add_offset@@Base+0x91>
  407404:	lea    rcx,[rip+0x2415]        # 409820 <_IO_stdin_used@@Base+0x820>
  40740b:	mov    edx,0x713
  407410:	lea    rsi,[rip+0x1f71]        # 409388 <_IO_stdin_used@@Base+0x388>
  407417:	lea    rdi,[rip+0x21b2]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  40741e:	call   403130 <__assert_fail@plt>
  407423:	lea    rcx,[rip+0x23f6]        # 409820 <_IO_stdin_used@@Base+0x820>
  40742a:	mov    edx,0x71b
  40742f:	lea    rsi,[rip+0x1f52]        # 409388 <_IO_stdin_used@@Base+0x388>
  407436:	lea    rdi,[rip+0x22e2]        # 40971f <_IO_stdin_used@@Base+0x71f>
  40743d:	call   403130 <__assert_fail@plt>
  407442:	lea    rcx,[rip+0x23d7]        # 409820 <_IO_stdin_used@@Base+0x820>
  407449:	mov    edx,0x714
  40744e:	lea    rsi,[rip+0x1f33]        # 409388 <_IO_stdin_used@@Base+0x388>
  407455:	lea    rdi,[rip+0x2204]        # 409660 <_IO_stdin_used@@Base+0x660>
  40745c:	call   403130 <__assert_fail@plt>
  407461:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40746c:	nop    DWORD PTR [rax+0x0]

0000000000407470 <flatcc_builder_table_add_union@@Base>:
  407470:	endbr64 
  407474:	push   r13
  407476:	mov    r13,rdx
  407479:	sar    r13,0x20
  40747d:	push   r12
  40747f:	push   rbp
  407480:	push   rbx
  407481:	sub    rsp,0x8
  407485:	mov    rax,QWORD PTR [rdi+0x30]
  407489:	cmp    WORD PTR [rax+0xe],0x3
  40748e:	jne    407504 <flatcc_builder_table_add_union@@Base+0x94>
  407490:	mov    r12,rdi
  407493:	mov    ebx,esi
  407495:	mov    rbp,rdx
  407498:	test   dl,dl
  40749a:	je     4074e0 <flatcc_builder_table_add_union@@Base+0x70>
  40749c:	test   r13d,r13d
  40749f:	je     4074b2 <flatcc_builder_table_add_union@@Base+0x42>
  4074a1:	call   407330 <flatcc_builder_table_add_offset@@Base>
  4074a6:	test   rax,rax
  4074a9:	je     407542 <flatcc_builder_table_add_union@@Base+0xd2>
  4074af:	mov    DWORD PTR [rax],r13d
  4074b2:	lea    esi,[rbx-0x1]
  4074b5:	mov    ecx,0x1
  4074ba:	mov    edx,0x1
  4074bf:	mov    rdi,r12
  4074c2:	call   407160 <flatcc_builder_table_add@@Base>
  4074c7:	test   rax,rax
  4074ca:	je     407523 <flatcc_builder_table_add_union@@Base+0xb3>
  4074cc:	mov    BYTE PTR [rax],bpl
  4074cf:	add    rsp,0x8
  4074d3:	xor    eax,eax
  4074d5:	pop    rbx
  4074d6:	pop    rbp
  4074d7:	pop    r12
  4074d9:	pop    r13
  4074db:	ret    
  4074dc:	nop    DWORD PTR [rax+0x0]
  4074e0:	test   r13d,r13d
  4074e3:	je     4074b2 <flatcc_builder_table_add_union@@Base+0x42>
  4074e5:	lea    rcx,[rip+0x24c4]        # 4099b0 <_IO_stdin_used@@Base+0x9b0>
  4074ec:	mov    edx,0x5ef
  4074f1:	lea    rsi,[rip+0x1e90]        # 409388 <_IO_stdin_used@@Base+0x388>
  4074f8:	lea    rdi,[rip+0x21a9]        # 4096a8 <_IO_stdin_used@@Base+0x6a8>
  4074ff:	call   403130 <__assert_fail@plt>
  407504:	lea    rcx,[rip+0x24a5]        # 4099b0 <_IO_stdin_used@@Base+0x9b0>
  40750b:	mov    edx,0x5ee
  407510:	lea    rsi,[rip+0x1e71]        # 409388 <_IO_stdin_used@@Base+0x388>
  407517:	lea    rdi,[rip+0x20b2]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  40751e:	call   403130 <__assert_fail@plt>
  407523:	lea    rcx,[rip+0x2486]        # 4099b0 <_IO_stdin_used@@Base+0x9b0>
  40752a:	mov    edx,0x5f6
  40752f:	lea    rsi,[rip+0x1e52]        # 409388 <_IO_stdin_used@@Base+0x388>
  407536:	lea    rdi,[rip+0x2271]        # 4097ae <_IO_stdin_used@@Base+0x7ae>
  40753d:	call   403130 <__assert_fail@plt>
  407542:	lea    rcx,[rip+0x2467]        # 4099b0 <_IO_stdin_used@@Base+0x9b0>
  407549:	mov    edx,0x5f2
  40754e:	lea    rsi,[rip+0x1e33]        # 409388 <_IO_stdin_used@@Base+0x388>
  407555:	lea    rdi,[rip+0x2248]        # 4097a4 <_IO_stdin_used@@Base+0x7a4>
  40755c:	call   403130 <__assert_fail@plt>
  407561:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40756c:	nop    DWORD PTR [rax+0x0]

0000000000407570 <flatcc_builder_table_add_union_vector@@Base>:
  407570:	endbr64 
  407574:	push   r12
  407576:	push   rbp
  407577:	mov    rbp,rdx
  40757a:	sar    rbp,0x20
  40757e:	push   rbx
  40757f:	sub    rsp,0x10
  407583:	mov    rcx,QWORD PTR [rdi+0x30]
  407587:	cmp    WORD PTR [rcx+0xe],0x3
  40758c:	jne    407601 <flatcc_builder_table_add_union_vector@@Base+0x91>
  40758e:	test   ebp,ebp
  407590:	sete   cl
  407593:	test   edx,edx
  407595:	mov    r12d,esi
  407598:	sete   sil
  40759c:	cmp    sil,cl
  40759f:	je     4075c0 <flatcc_builder_table_add_union_vector@@Base+0x50>
  4075a1:	test   edx,edx
  4075a3:	setne  al
  4075a6:	cmp    cl,al
  4075a8:	je     407620 <flatcc_builder_table_add_union_vector@@Base+0xb0>
  4075aa:	mov    eax,0xffffffff
  4075af:	add    rsp,0x10
  4075b3:	pop    rbx
  4075b4:	pop    rbp
  4075b5:	pop    r12
  4075b7:	ret    
  4075b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4075c0:	mov    eax,edx
  4075c2:	test   edx,edx
  4075c4:	je     4075af <flatcc_builder_table_add_union_vector@@Base+0x3f>
  4075c6:	lea    esi,[r12-0x1]
  4075cb:	mov    QWORD PTR [rsp+0x8],rdx
  4075d0:	mov    rbx,rdi
  4075d3:	call   407330 <flatcc_builder_table_add_offset@@Base>
  4075d8:	test   rax,rax
  4075db:	mov    rdx,QWORD PTR [rsp+0x8]
  4075e0:	je     40765e <flatcc_builder_table_add_union_vector@@Base+0xee>
  4075e2:	mov    DWORD PTR [rax],edx
  4075e4:	mov    esi,r12d
  4075e7:	mov    rdi,rbx
  4075ea:	call   407330 <flatcc_builder_table_add_offset@@Base>
  4075ef:	test   rax,rax
  4075f2:	je     40763f <flatcc_builder_table_add_union_vector@@Base+0xcf>
  4075f4:	mov    DWORD PTR [rax],ebp
  4075f6:	add    rsp,0x10
  4075fa:	xor    eax,eax
  4075fc:	pop    rbx
  4075fd:	pop    rbp
  4075fe:	pop    r12
  407600:	ret    
  407601:	lea    rcx,[rip+0x2378]        # 409980 <_IO_stdin_used@@Base+0x980>
  407608:	mov    edx,0x600
  40760d:	lea    rsi,[rip+0x1d74]        # 409388 <_IO_stdin_used@@Base+0x388>
  407614:	lea    rdi,[rip+0x1fb5]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  40761b:	call   403130 <__assert_fail@plt>
  407620:	lea    rcx,[rip+0x2359]        # 409980 <_IO_stdin_used@@Base+0x980>
  407627:	mov    edx,0x601
  40762c:	lea    rsi,[rip+0x1d55]        # 409388 <_IO_stdin_used@@Base+0x388>
  407633:	lea    rdi,[rip+0x2096]        # 4096d0 <_IO_stdin_used@@Base+0x6d0>
  40763a:	call   403130 <__assert_fail@plt>
  40763f:	lea    rcx,[rip+0x233a]        # 409980 <_IO_stdin_used@@Base+0x980>
  407646:	mov    edx,0x608
  40764b:	lea    rsi,[rip+0x1d36]        # 409388 <_IO_stdin_used@@Base+0x388>
  407652:	lea    rdi,[rip+0x214b]        # 4097a4 <_IO_stdin_used@@Base+0x7a4>
  407659:	call   403130 <__assert_fail@plt>
  40765e:	lea    rcx,[rip+0x231b]        # 409980 <_IO_stdin_used@@Base+0x980>
  407665:	mov    edx,0x604
  40766a:	lea    rsi,[rip+0x1d17]        # 409388 <_IO_stdin_used@@Base+0x388>
  407671:	lea    rdi,[rip+0x212c]        # 4097a4 <_IO_stdin_used@@Base+0x7a4>
  407678:	call   403130 <__assert_fail@plt>
  40767d:	nop    DWORD PTR [rax]

0000000000407680 <flatcc_builder_push_buffer_alignment@@Base>:
  407680:	endbr64 
  407684:	mov    edx,0x4
  407689:	movzx  eax,WORD PTR [rdi+0xe8]
  407690:	mov    WORD PTR [rdi+0xe8],dx
  407697:	ret    
  407698:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004076a0 <flatcc_builder_pop_buffer_alignment@@Base>:
  4076a0:	endbr64 
  4076a4:	cmp    si,WORD PTR [rdi+0xe8]
  4076ab:	jbe    4076b4 <flatcc_builder_pop_buffer_alignment@@Base+0x14>
  4076ad:	mov    WORD PTR [rdi+0xe8],si
  4076b4:	ret    
  4076b5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004076c0 <flatcc_builder_get_buffer_alignment@@Base>:
  4076c0:	endbr64 
  4076c4:	movzx  eax,WORD PTR [rdi+0xe8]
  4076cb:	ret    
  4076cc:	nop    DWORD PTR [rax+0x0]

00000000004076d0 <flatcc_builder_set_vtable_clustering@@Base>:
  4076d0:	endbr64 
  4076d4:	xor    eax,eax
  4076d6:	test   esi,esi
  4076d8:	sete   al
  4076db:	mov    DWORD PTR [rdi+0x124],eax
  4076e1:	ret    
  4076e2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4076ed:	nop    DWORD PTR [rax]

00000000004076f0 <flatcc_builder_set_block_align@@Base>:
  4076f0:	endbr64 
  4076f4:	mov    WORD PTR [rdi+0xec],si
  4076fb:	ret    
  4076fc:	nop    DWORD PTR [rax+0x0]

0000000000407700 <flatcc_builder_get_level@@Base>:
  407700:	endbr64 
  407704:	mov    eax,DWORD PTR [rdi+0x104]
  40770a:	ret    
  40770b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407710 <flatcc_builder_set_max_level@@Base>:
  407710:	endbr64 
  407714:	mov    DWORD PTR [rdi+0x120],esi
  40771a:	cmp    DWORD PTR [rdi+0x108],esi
  407720:	jge    407728 <flatcc_builder_set_max_level@@Base+0x18>
  407722:	mov    DWORD PTR [rdi+0x108],esi
  407728:	ret    
  407729:	nop    DWORD PTR [rax+0x0]

0000000000407730 <flatcc_builder_get_buffer_size@@Base>:
  407730:	endbr64 
  407734:	mov    eax,DWORD PTR [rdi+0xf4]
  40773a:	sub    eax,DWORD PTR [rdi+0xf0]
  407740:	cdqe   
  407742:	ret    
  407743:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40774e:	xchg   ax,ax

0000000000407750 <flatcc_builder_get_buffer_start@@Base>:
  407750:	endbr64 
  407754:	mov    eax,DWORD PTR [rdi+0xf0]
  40775a:	ret    
  40775b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407760 <flatcc_builder_get_buffer_end@@Base>:
  407760:	endbr64 
  407764:	mov    eax,DWORD PTR [rdi+0xf4]
  40776a:	ret    
  40776b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407770 <flatcc_builder_set_vtable_cache_limit@@Base>:
  407770:	endbr64 
  407774:	mov    QWORD PTR [rdi+0x118],rsi
  40777b:	ret    
  40777c:	nop    DWORD PTR [rax+0x0]

0000000000407780 <flatcc_builder_set_identifier@@Base>:
  407780:	endbr64 
  407784:	test   rsi,rsi
  407787:	je     407798 <flatcc_builder_set_identifier@@Base+0x18>
  407789:	mov    eax,DWORD PTR [rsi]
  40778b:	mov    DWORD PTR [rdi+0x110],eax
  407791:	ret    
  407792:	nop    WORD PTR [rax+rax*1+0x0]
  407798:	mov    rsi,0x409e80
  40779f:	mov    eax,DWORD PTR [rsi]
  4077a1:	mov    DWORD PTR [rdi+0x110],eax
  4077a7:	ret    
  4077a8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004077b0 <flatcc_builder_get_type@@Base>:
  4077b0:	endbr64 
  4077b4:	mov    rdx,QWORD PTR [rdi+0x30]
  4077b8:	xor    eax,eax
  4077ba:	test   rdx,rdx
  4077bd:	je     4077c3 <flatcc_builder_get_type@@Base+0x13>
  4077bf:	movzx  eax,WORD PTR [rdx+0xe]
  4077c3:	ret    
  4077c4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4077cf:	nop

00000000004077d0 <flatcc_builder_get_type_at@@Base>:
  4077d0:	endbr64 
  4077d4:	xor    eax,eax
  4077d6:	test   esi,esi
  4077d8:	jle    4077f9 <flatcc_builder_get_type_at@@Base+0x29>
  4077da:	mov    edx,DWORD PTR [rdi+0x104]
  4077e0:	cmp    edx,esi
  4077e2:	jl     4077f9 <flatcc_builder_get_type_at@@Base+0x29>
  4077e4:	sub    esi,edx
  4077e6:	movsxd rsi,esi
  4077e9:	mov    rdx,QWORD PTR [rdi+0x30]
  4077ed:	lea    rax,[rsi+rsi*8]
  4077f1:	lea    rax,[rdx+rax*4]
  4077f5:	movzx  eax,WORD PTR [rax+0xe]
  4077f9:	ret    
  4077fa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407800 <flatcc_builder_get_direct_buffer@@Base>:
  407800:	endbr64 
  407804:	mov    eax,DWORD PTR [rdi+0x128]
  40780a:	test   eax,eax
  40780c:	jne    407820 <flatcc_builder_get_direct_buffer@@Base+0x20>
  40780e:	xor    eax,eax
  407810:	test   rsi,rsi
  407813:	je     40781c <flatcc_builder_get_direct_buffer@@Base+0x1c>
  407815:	mov    QWORD PTR [rsi],0x0
  40781c:	ret    
  40781d:	nop    DWORD PTR [rax]
  407820:	mov    rax,QWORD PTR [rdi+0x138]
  407827:	cmp    QWORD PTR [rdi+0x130],rax
  40782e:	jne    40780e <flatcc_builder_get_direct_buffer@@Base+0xe>
  407830:	test   rsi,rsi
  407833:	je     40783f <flatcc_builder_get_direct_buffer@@Base+0x3f>
  407835:	mov    rax,QWORD PTR [rdi+0x160]
  40783c:	mov    QWORD PTR [rsi],rax
  40783f:	mov    rax,QWORD PTR [rdi+0x140]
  407846:	ret    
  407847:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407850 <flatcc_builder_copy_buffer@@Base>:
  407850:	endbr64 
  407854:	mov    eax,DWORD PTR [rdi+0x128]
  40785a:	test   eax,eax
  40785c:	je     407880 <flatcc_builder_copy_buffer@@Base+0x30>
  40785e:	sub    rsp,0x8
  407862:	add    rdi,0x130
  407869:	call   4080c0 <flatcc_emitter_copy_buffer@@Base>
  40786e:	test   rax,rax
  407871:	je     407883 <flatcc_builder_copy_buffer@@Base+0x33>
  407873:	add    rsp,0x8
  407877:	ret    
  407878:	nop    DWORD PTR [rax+rax*1+0x0]
  407880:	xor    eax,eax
  407882:	ret    
  407883:	lea    rcx,[rip+0x1f76]        # 409800 <_IO_stdin_used@@Base+0x800>
  40788a:	mov    edx,0x786
  40788f:	lea    rsi,[rip+0x1af2]        # 409388 <_IO_stdin_used@@Base+0x388>
  407896:	lea    rdi,[rip+0x1f1d]        # 4097ba <_IO_stdin_used@@Base+0x7ba>
  40789d:	call   403130 <__assert_fail@plt>
  4078a2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4078ad:	nop    DWORD PTR [rax]

00000000004078b0 <flatcc_builder_finalize_buffer@@Base>:
  4078b0:	endbr64 
  4078b4:	push   r12
  4078b6:	mov    r12,rdi
  4078b9:	push   rbp
  4078ba:	push   rbx
  4078bb:	mov    rbx,rsi
  4078be:	call   407730 <flatcc_builder_get_buffer_size@@Base>
  4078c3:	mov    rbp,rax
  4078c6:	test   rbx,rbx
  4078c9:	je     4078ce <flatcc_builder_finalize_buffer@@Base+0x1e>
  4078cb:	mov    QWORD PTR [rbx],rax
  4078ce:	mov    rdi,rbp
  4078d1:	call   403180 <malloc@plt>
  4078d6:	mov    rbx,rax
  4078d9:	test   rax,rax
  4078dc:	je     4078f9 <flatcc_builder_finalize_buffer@@Base+0x49>
  4078de:	mov    rdx,rbp
  4078e1:	mov    rsi,rax
  4078e4:	mov    rdi,r12
  4078e7:	call   407850 <flatcc_builder_copy_buffer@@Base>
  4078ec:	test   rax,rax
  4078ef:	je     407918 <flatcc_builder_finalize_buffer@@Base+0x68>
  4078f1:	mov    rax,rbx
  4078f4:	pop    rbx
  4078f5:	pop    rbp
  4078f6:	pop    r12
  4078f8:	ret    
  4078f9:	lea    rcx,[rip+0x1ee0]        # 4097e0 <_IO_stdin_used@@Base+0x7e0>
  407900:	mov    edx,0x798
  407905:	lea    rsi,[rip+0x1a7c]        # 409388 <_IO_stdin_used@@Base+0x388>
  40790c:	lea    rdi,[rip+0x1e0c]        # 40971f <_IO_stdin_used@@Base+0x71f>
  407913:	call   403130 <__assert_fail@plt>
  407918:	lea    rcx,[rip+0x1ec1]        # 4097e0 <_IO_stdin_used@@Base+0x7e0>
  40791f:	mov    edx,0x79c
  407924:	lea    rsi,[rip+0x1a5d]        # 409388 <_IO_stdin_used@@Base+0x388>
  40792b:	lea    rdi,[rip+0x1ded]        # 40971f <_IO_stdin_used@@Base+0x71f>
  407932:	call   403130 <__assert_fail@plt>
  407937:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407940 <flatcc_builder_finalize_aligned_buffer@@Base>:
  407940:	endbr64 
  407944:	push   r13
  407946:	push   r12
  407948:	mov    r12,rsi
  40794b:	push   rbp
  40794c:	mov    rbp,rdi
  40794f:	push   rbx
  407950:	sub    rsp,0x18
  407954:	mov    rax,QWORD PTR fs:0x28
  40795d:	mov    QWORD PTR [rsp+0x8],rax
  407962:	xor    eax,eax
  407964:	call   407730 <flatcc_builder_get_buffer_size@@Base>
  407969:	mov    rbx,rax
  40796c:	test   r12,r12
  40796f:	je     407975 <flatcc_builder_finalize_aligned_buffer@@Base+0x35>
  407971:	mov    QWORD PTR [r12],rax
  407975:	mov    rdi,rbp
  407978:	call   4076c0 <flatcc_builder_get_buffer_alignment@@Base>
  40797d:	movzx  eax,ax
  407980:	lea    rdx,[rbx+rax*1-0x1]
  407985:	mov    rbx,rax
  407988:	neg    rbx
  40798b:	and    rbx,rdx
  40798e:	mov    esi,0x8
  407993:	cmp    rax,0x8
  407997:	cmovae rsi,rax
  40799b:	mov    rdi,rsp
  40799e:	mov    rdx,rbx
  4079a1:	mov    QWORD PTR [rsp],0x0
  4079a9:	call   4031c0 <posix_memalign@plt>
  4079ae:	test   eax,eax
  4079b0:	je     4079d8 <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
  4079b2:	mov    rdi,QWORD PTR [rsp]
  4079b6:	test   rdi,rdi
  4079b9:	je     4079c0 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  4079bb:	call   403100 <free@plt>
  4079c0:	test   r12,r12
  4079c3:	je     407a22 <flatcc_builder_finalize_aligned_buffer@@Base+0xe2>
  4079c5:	mov    QWORD PTR [r12],0x0
  4079cd:	xor    r13d,r13d
  4079d0:	jmp    4079f4 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  4079d2:	nop    WORD PTR [rax+rax*1+0x0]
  4079d8:	mov    r13,QWORD PTR [rsp]
  4079dc:	test   r13,r13
  4079df:	je     4079c0 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  4079e1:	mov    rdx,rbx
  4079e4:	mov    rsi,r13
  4079e7:	mov    rdi,rbp
  4079ea:	call   407850 <flatcc_builder_copy_buffer@@Base>
  4079ef:	test   rax,rax
  4079f2:	je     407a18 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
  4079f4:	mov    rcx,QWORD PTR [rsp+0x8]
  4079f9:	xor    rcx,QWORD PTR fs:0x28
  407a02:	mov    rax,r13
  407a05:	jne    407a1d <flatcc_builder_finalize_aligned_buffer@@Base+0xdd>
  407a07:	add    rsp,0x18
  407a0b:	pop    rbx
  407a0c:	pop    rbp
  407a0d:	pop    r12
  407a0f:	pop    r13
  407a11:	ret    
  407a12:	nop    WORD PTR [rax+rax*1+0x0]
  407a18:	mov    rdi,r13
  407a1b:	jmp    4079bb <flatcc_builder_finalize_aligned_buffer@@Base+0x7b>
  407a1d:	call   403120 <__stack_chk_fail@plt>
  407a22:	xor    r13d,r13d
  407a25:	jmp    4079f4 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  407a27:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407a30 <flatcc_builder_aligned_alloc@@Base>:
  407a30:	endbr64 
  407a34:	sub    rsp,0x18
  407a38:	mov    rax,QWORD PTR fs:0x28
  407a41:	mov    QWORD PTR [rsp+0x8],rax
  407a46:	xor    eax,eax
  407a48:	mov    rdx,rsi
  407a4b:	cmp    rdi,0x8
  407a4f:	mov    esi,0x8
  407a54:	cmovae rsi,rdi
  407a58:	mov    rdi,rsp
  407a5b:	mov    QWORD PTR [rsp],0x0
  407a63:	call   4031c0 <posix_memalign@plt>
  407a68:	test   eax,eax
  407a6a:	mov    rax,QWORD PTR [rsp]
  407a6e:	je     407a7f <flatcc_builder_aligned_alloc@@Base+0x4f>
  407a70:	test   rax,rax
  407a73:	je     407a7f <flatcc_builder_aligned_alloc@@Base+0x4f>
  407a75:	mov    rdi,rax
  407a78:	call   403100 <free@plt>
  407a7d:	xor    eax,eax
  407a7f:	mov    rcx,QWORD PTR [rsp+0x8]
  407a84:	xor    rcx,QWORD PTR fs:0x28
  407a8d:	jne    407a94 <flatcc_builder_aligned_alloc@@Base+0x64>
  407a8f:	add    rsp,0x18
  407a93:	ret    
  407a94:	call   403120 <__stack_chk_fail@plt>
  407a99:	nop    DWORD PTR [rax+0x0]

0000000000407aa0 <flatcc_builder_aligned_free@@Base>:
  407aa0:	endbr64 
  407aa4:	jmp    403100 <free@plt>
  407aa9:	nop    DWORD PTR [rax+0x0]

0000000000407ab0 <flatcc_builder_get_emit_context@@Base>:
  407ab0:	endbr64 
  407ab4:	mov    rax,QWORD PTR [rdi+0x38]
  407ab8:	ret    
  407ab9:	nop    DWORD PTR [rax+0x0]

0000000000407ac0 <flatcc_emitter_recycle_page@@Base>:
  407ac0:	endbr64 
  407ac4:	mov    rax,QWORD PTR [rdi]
  407ac7:	cmp    rax,rsi
  407aca:	je     407b1b <flatcc_emitter_recycle_page@@Base+0x5b>
  407acc:	cmp    QWORD PTR [rdi+0x8],rsi
  407ad0:	je     407b1b <flatcc_emitter_recycle_page@@Base+0x5b>
  407ad2:	mov    rdx,QWORD PTR [rsi+0xb88]
  407ad9:	mov    rcx,QWORD PTR [rsi+0xb80]
  407ae0:	mov    QWORD PTR [rcx+0xb88],rdx
  407ae7:	mov    QWORD PTR [rdx+0xb80],rcx
  407aee:	mov    rdx,QWORD PTR [rax+0xb88]
  407af5:	mov    QWORD PTR [rsi+0xb80],rax
  407afc:	mov    QWORD PTR [rsi+0xb88],rdx
  407b03:	mov    QWORD PTR [rdx+0xb80],rsi
  407b0a:	mov    rax,QWORD PTR [rsi+0xb80]
  407b11:	mov    QWORD PTR [rax+0xb88],rsi
  407b18:	xor    eax,eax
  407b1a:	ret    
  407b1b:	mov    eax,0xffffffff
  407b20:	ret    
  407b21:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407b2c:	nop    DWORD PTR [rax+0x0]

0000000000407b30 <flatcc_emitter_reset@@Base>:
  407b30:	endbr64 
  407b34:	mov    rax,QWORD PTR [rdi]
  407b37:	test   rax,rax
  407b3a:	je     407c10 <flatcc_emitter_reset@@Base+0xe0>
  407b40:	mov    rcx,QWORD PTR [rdi+0x40]
  407b44:	mov    rsi,QWORD PTR [rdi+0x30]
  407b48:	test   rcx,rcx
  407b4b:	cmove  rcx,rsi
  407b4f:	lea    rdx,[rax+0x5c0]
  407b56:	mov    QWORD PTR [rdi+0x10],rdx
  407b5a:	mov    QWORD PTR [rdi+0x20],rdx
  407b5e:	lea    rdx,[rcx+rcx*2]
  407b62:	shr    rdx,0x2
  407b66:	shr    rsi,0x2
  407b6a:	add    rdx,rsi
  407b6d:	mov    QWORD PTR [rdi+0x8],rax
  407b71:	mov    QWORD PTR [rdi+0x18],0x5c0
  407b79:	mov    QWORD PTR [rdi+0x28],0x5c0
  407b81:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  407b8b:	mov    QWORD PTR [rdi+0x40],rdx
  407b8f:	add    rdx,rdx
  407b92:	mov    QWORD PTR [rdi+0x30],0x0
  407b9a:	cmp    rdx,QWORD PTR [rdi+0x38]
  407b9e:	jae    407c10 <flatcc_emitter_reset@@Base+0xe0>
  407ba0:	push   rbx
  407ba1:	mov    rbx,rdi
  407ba4:	mov    rdi,QWORD PTR [rax+0xb80]
  407bab:	cmp    rax,rdi
  407bae:	jne    407bc8 <flatcc_emitter_reset@@Base+0x98>
  407bb0:	jmp    407c04 <flatcc_emitter_reset@@Base+0xd4>
  407bb2:	nop    WORD PTR [rax+rax*1+0x0]
  407bb8:	mov    rax,QWORD PTR [rbx+0x8]
  407bbc:	mov    rdi,QWORD PTR [rax+0xb80]
  407bc3:	cmp    rdi,QWORD PTR [rbx]
  407bc6:	je     407c04 <flatcc_emitter_reset@@Base+0xd4>
  407bc8:	mov    rdx,QWORD PTR [rdi+0xb80]
  407bcf:	mov    QWORD PTR [rax+0xb80],rdx
  407bd6:	mov    rdx,QWORD PTR [rdi+0xb80]
  407bdd:	mov    QWORD PTR [rdx+0xb88],rax
  407be4:	call   403100 <free@plt>
  407be9:	mov    rax,QWORD PTR [rbx+0x38]
  407bed:	mov    rcx,QWORD PTR [rbx+0x40]
  407bf1:	sub    rax,0xb80
  407bf7:	lea    rdx,[rcx+rcx*1]
  407bfb:	mov    QWORD PTR [rbx+0x38],rax
  407bff:	cmp    rax,rdx
  407c02:	ja     407bb8 <flatcc_emitter_reset@@Base+0x88>
  407c04:	pop    rbx
  407c05:	ret    
  407c06:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407c10:	ret    
  407c11:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407c1c:	nop    DWORD PTR [rax+0x0]

0000000000407c20 <flatcc_emitter_clear@@Base>:
  407c20:	endbr64 
  407c24:	mov    rax,QWORD PTR [rdi]
  407c27:	test   rax,rax
  407c2a:	je     407ca8 <flatcc_emitter_clear@@Base+0x88>
  407c2c:	push   rbp
  407c2d:	mov    rbp,rdi
  407c30:	push   rbx
  407c31:	sub    rsp,0x8
  407c35:	mov    rdx,QWORD PTR [rax+0xb88]
  407c3c:	mov    QWORD PTR [rdx+0xb80],0x0
  407c47:	mov    rbx,QWORD PTR [rax+0xb80]
  407c4e:	test   rbx,rbx
  407c51:	jne    407c5b <flatcc_emitter_clear@@Base+0x3b>
  407c53:	jmp    407cb0 <flatcc_emitter_clear@@Base+0x90>
  407c55:	nop    DWORD PTR [rax]
  407c58:	mov    rbx,rax
  407c5b:	mov    rdi,QWORD PTR [rbx+0xb88]
  407c62:	call   403100 <free@plt>
  407c67:	mov    rax,QWORD PTR [rbx+0xb80]
  407c6e:	test   rax,rax
  407c71:	jne    407c58 <flatcc_emitter_clear@@Base+0x38>
  407c73:	mov    rdi,rbx
  407c76:	call   403100 <free@plt>
  407c7b:	mov    QWORD PTR [rbp+0x40],0x0
  407c83:	vpxor  xmm0,xmm0,xmm0
  407c87:	vmovups XMMWORD PTR [rbp+0x0],xmm0
  407c8c:	vmovups XMMWORD PTR [rbp+0x10],xmm0
  407c91:	vmovups XMMWORD PTR [rbp+0x20],xmm0
  407c96:	vmovups XMMWORD PTR [rbp+0x30],xmm0
  407c9b:	add    rsp,0x8
  407c9f:	pop    rbx
  407ca0:	pop    rbp
  407ca1:	ret    
  407ca2:	nop    WORD PTR [rax+rax*1+0x0]
  407ca8:	ret    
  407ca9:	nop    DWORD PTR [rax+0x0]
  407cb0:	mov    rbx,rax
  407cb3:	jmp    407c73 <flatcc_emitter_clear@@Base+0x53>
  407cb5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407cc0 <flatcc_emitter@@Base>:
  407cc0:	endbr64 
  407cc4:	push   r15
  407cc6:	push   r14
  407cc8:	push   r13
  407cca:	push   r12
  407ccc:	push   rbp
  407ccd:	mov    rbp,rsi
  407cd0:	push   rbx
  407cd1:	mov    rbx,rdi
  407cd4:	sub    rsp,0x18
  407cd8:	add    QWORD PTR [rdi+0x30],r8
  407cdc:	test   ecx,ecx
  407cde:	js     407ef0 <flatcc_emitter@@Base+0x230>
  407ce4:	mov    rax,QWORD PTR [rdi+0x28]
  407ce8:	cmp    rax,r8
  407ceb:	jae    407d78 <flatcc_emitter@@Base+0xb8>
  407cf1:	test   edx,edx
  407cf3:	je     407d63 <flatcc_emitter@@Base+0xa3>
  407cf5:	lea    r14d,[rdx-0x1]
  407cf9:	inc    r14
  407cfc:	shl    r14,0x4
  407d00:	lea    rax,[rbp+r14*1+0x0]
  407d05:	mov    QWORD PTR [rsp+0x8],rax
  407d0a:	nop    WORD PTR [rax+rax*1+0x0]
  407d10:	mov    r15,QWORD PTR [rbp+0x8]
  407d14:	mov    r13,QWORD PTR [rbp+0x0]
  407d18:	test   r15,r15
  407d1b:	je     407d58 <flatcc_emitter@@Base+0x98>
  407d1d:	nop    DWORD PTR [rax]
  407d20:	mov    r12,QWORD PTR [rbx+0x28]
  407d24:	cmp    r15,r12
  407d27:	jbe    407e20 <flatcc_emitter@@Base+0x160>
  407d2d:	test   r12,r12
  407d30:	je     407dc8 <flatcc_emitter@@Base+0x108>
  407d36:	sub    r15,r12
  407d39:	mov    rdi,QWORD PTR [rbx+0x20]
  407d3d:	mov    rsi,r13
  407d40:	mov    rdx,r12
  407d43:	call   403170 <memcpy@plt>
  407d48:	add    r13,r12
  407d4b:	add    QWORD PTR [rbx+0x20],r12
  407d4f:	sub    QWORD PTR [rbx+0x28],r12
  407d53:	test   r15,r15
  407d56:	jne    407d20 <flatcc_emitter@@Base+0x60>
  407d58:	add    rbp,0x10
  407d5c:	cmp    rbp,QWORD PTR [rsp+0x8]
  407d61:	jne    407d10 <flatcc_emitter@@Base+0x50>
  407d63:	add    rsp,0x18
  407d67:	pop    rbx
  407d68:	pop    rbp
  407d69:	pop    r12
  407d6b:	pop    r13
  407d6d:	pop    r14
  407d6f:	xor    eax,eax
  407d71:	pop    r15
  407d73:	ret    
  407d74:	nop    DWORD PTR [rax+0x0]
  407d78:	mov    rcx,QWORD PTR [rdi+0x20]
  407d7c:	sub    rax,r8
  407d7f:	lea    rsi,[rcx+r8*1]
  407d83:	mov    QWORD PTR [rdi+0x20],rsi
  407d87:	mov    QWORD PTR [rdi+0x28],rax
  407d8b:	test   edx,edx
  407d8d:	je     407d63 <flatcc_emitter@@Base+0xa3>
  407d8f:	lea    ebx,[rdx-0x1]
  407d92:	inc    rbx
  407d95:	shl    rbx,0x4
  407d99:	add    rbx,rbp
  407d9c:	nop    DWORD PTR [rax+0x0]
  407da0:	mov    rsi,QWORD PTR [rbp+0x0]
  407da4:	mov    rdx,QWORD PTR [rbp+0x8]
  407da8:	mov    rdi,rcx
  407dab:	call   403170 <memcpy@plt>
  407db0:	mov    rcx,QWORD PTR [rbp+0x8]
  407db4:	add    rbp,0x10
  407db8:	add    rcx,rax
  407dbb:	cmp    rbp,rbx
  407dbe:	jne    407da0 <flatcc_emitter@@Base+0xe0>
  407dc0:	jmp    407d63 <flatcc_emitter@@Base+0xa3>
  407dc2:	nop    WORD PTR [rax+rax*1+0x0]
  407dc8:	mov    r12,QWORD PTR [rbx+0x8]
  407dcc:	test   r12,r12
  407dcf:	je     407e78 <flatcc_emitter@@Base+0x1b8>
  407dd5:	mov    rax,QWORD PTR [r12+0xb80]
  407ddd:	mov    r14,QWORD PTR [rbx]
  407de0:	cmp    rax,r14
  407de3:	je     407e30 <flatcc_emitter@@Base+0x170>
  407de5:	mov    QWORD PTR [rbx+0x8],rax
  407de9:	mov    QWORD PTR [rbx+0x28],0xb80
  407df1:	mov    rdx,QWORD PTR [rax+0xb88]
  407df8:	mov    QWORD PTR [rbx+0x20],rax
  407dfc:	mov    edx,DWORD PTR [rdx+0xb90]
  407e02:	mov    r12,QWORD PTR [rbx+0x28]
  407e06:	add    edx,0xb80
  407e0c:	mov    DWORD PTR [rax+0xb90],edx
  407e12:	cmp    r15,r12
  407e15:	ja     407d2d <flatcc_emitter@@Base+0x6d>
  407e1b:	nop    DWORD PTR [rax+rax*1+0x0]
  407e20:	mov    r12,r15
  407e23:	xor    r15d,r15d
  407e26:	jmp    407d39 <flatcc_emitter@@Base+0x79>
  407e2b:	nop    DWORD PTR [rax+rax*1+0x0]
  407e30:	mov    edi,0xb98
  407e35:	call   403180 <malloc@plt>
  407e3a:	test   rax,rax
  407e3d:	je     407ed8 <flatcc_emitter@@Base+0x218>
  407e43:	add    QWORD PTR [rbx+0x38],0xb80
  407e4b:	mov    QWORD PTR [rax+0xb88],r12
  407e52:	mov    QWORD PTR [rax+0xb80],r14
  407e59:	mov    QWORD PTR [r14+0xb88],rax
  407e60:	mov    QWORD PTR [r12+0xb80],rax
  407e68:	mov    QWORD PTR [rbx+0x8],rax
  407e6c:	jmp    407de9 <flatcc_emitter@@Base+0x129>
  407e71:	nop    DWORD PTR [rax+0x0]
  407e78:	mov    edi,0xb98
  407e7d:	call   403180 <malloc@plt>
  407e82:	test   rax,rax
  407e85:	je     407ed8 <flatcc_emitter@@Base+0x218>
  407e87:	lea    rdx,[rax+0x5c0]
  407e8e:	add    QWORD PTR [rbx+0x38],0xb80
  407e96:	mov    QWORD PTR [rbx],rax
  407e99:	mov    QWORD PTR [rbx+0x8],rax
  407e9d:	mov    QWORD PTR [rax+0xb80],rax
  407ea4:	mov    QWORD PTR [rax+0xb88],rax
  407eab:	mov    QWORD PTR [rbx+0x10],rdx
  407eaf:	mov    QWORD PTR [rbx+0x20],rdx
  407eb3:	mov    QWORD PTR [rbx+0x18],0x5c0
  407ebb:	mov    QWORD PTR [rbx+0x28],0x5c0
  407ec3:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  407ecd:	jmp    407d20 <flatcc_emitter@@Base+0x60>
  407ed2:	nop    WORD PTR [rax+rax*1+0x0]
  407ed8:	add    rsp,0x18
  407edc:	pop    rbx
  407edd:	pop    rbp
  407ede:	pop    r12
  407ee0:	pop    r13
  407ee2:	pop    r14
  407ee4:	mov    eax,0xffffffff
  407ee9:	pop    r15
  407eeb:	ret    
  407eec:	nop    DWORD PTR [rax+0x0]
  407ef0:	mov    rax,QWORD PTR [rdi+0x18]
  407ef4:	cmp    rax,r8
  407ef7:	jae    4080a0 <flatcc_emitter@@Base+0x3e0>
  407efd:	movsxd rax,edx
  407f00:	shl    rax,0x4
  407f04:	add    rbp,rax
  407f07:	mov    edx,edx
  407f09:	shl    rdx,0x4
  407f0d:	mov    rax,rbp
  407f10:	sub    rax,rdx
  407f13:	mov    QWORD PTR [rsp+0x8],rax
  407f18:	nop    DWORD PTR [rax+rax*1+0x0]
  407f20:	cmp    rbp,QWORD PTR [rsp+0x8]
  407f25:	je     407d63 <flatcc_emitter@@Base+0xa3>
  407f2b:	sub    rbp,0x10
  407f2f:	mov    r12,QWORD PTR [rbp+0x8]
  407f33:	mov    r13,QWORD PTR [rbp+0x0]
  407f37:	add    r13,r12
  407f3a:	test   r12,r12
  407f3d:	je     407f20 <flatcc_emitter@@Base+0x260>
  407f3f:	mov    rdx,QWORD PTR [rbx+0x18]
  407f43:	cmp    rdx,r12
  407f46:	jae    407f80 <flatcc_emitter@@Base+0x2c0>
  407f48:	test   rdx,rdx
  407f4b:	je     407f90 <flatcc_emitter@@Base+0x2d0>
  407f4d:	sub    r12,rdx
  407f50:	xor    ecx,ecx
  407f52:	mov    rdi,QWORD PTR [rbx+0x10]
  407f56:	mov    rax,rdx
  407f59:	neg    rax
  407f5c:	add    rdi,rax
  407f5f:	mov    QWORD PTR [rbx+0x10],rdi
  407f63:	mov    QWORD PTR [rbx+0x18],rcx
  407f67:	add    r13,rax
  407f6a:	mov    rsi,r13
  407f6d:	call   403170 <memcpy@plt>
  407f72:	test   r12,r12
  407f75:	je     407f20 <flatcc_emitter@@Base+0x260>
  407f77:	mov    rdx,QWORD PTR [rbx+0x18]
  407f7b:	cmp    rdx,r12
  407f7e:	jb     407f48 <flatcc_emitter@@Base+0x288>
  407f80:	mov    rcx,rdx
  407f83:	sub    rcx,r12
  407f86:	mov    rdx,r12
  407f89:	xor    r12d,r12d
  407f8c:	jmp    407f52 <flatcc_emitter@@Base+0x292>
  407f8e:	xchg   ax,ax
  407f90:	mov    r15,QWORD PTR [rbx]
  407f93:	test   r15,r15
  407f96:	je     408038 <flatcc_emitter@@Base+0x378>
  407f9c:	mov    rax,QWORD PTR [r15+0xb88]
  407fa3:	mov    r14,QWORD PTR [rbx+0x8]
  407fa7:	cmp    rax,r14
  407faa:	je     407ff8 <flatcc_emitter@@Base+0x338>
  407fac:	mov    edx,DWORD PTR [r15+0xb90]
  407fb3:	sub    edx,0xb80
  407fb9:	mov    DWORD PTR [rax+0xb90],edx
  407fbf:	mov    QWORD PTR [rbx],rax
  407fc2:	lea    rdx,[rax+0xb80]
  407fc9:	mov    QWORD PTR [rbx+0x10],rdx
  407fcd:	mov    rdx,QWORD PTR [rax+0xb80]
  407fd4:	mov    QWORD PTR [rbx+0x18],0xb80
  407fdc:	mov    edx,DWORD PTR [rdx+0xb90]
  407fe2:	sub    edx,0xb80
  407fe8:	mov    DWORD PTR [rax+0xb90],edx
  407fee:	jmp    407f3f <flatcc_emitter@@Base+0x27f>
  407ff3:	nop    DWORD PTR [rax+rax*1+0x0]
  407ff8:	mov    edi,0xb98
  407ffd:	call   403180 <malloc@plt>
  408002:	test   rax,rax
  408005:	je     407ed8 <flatcc_emitter@@Base+0x218>
  40800b:	add    QWORD PTR [rbx+0x38],0xb80
  408013:	mov    QWORD PTR [rax+0xb88],r14
  40801a:	mov    QWORD PTR [rax+0xb80],r15
  408021:	mov    QWORD PTR [r15+0xb88],rax
  408028:	mov    QWORD PTR [r14+0xb80],rax
  40802f:	mov    QWORD PTR [rbx],rax
  408032:	jmp    407fc2 <flatcc_emitter@@Base+0x302>
  408034:	nop    DWORD PTR [rax+0x0]
  408038:	mov    edi,0xb98
  40803d:	call   403180 <malloc@plt>
  408042:	test   rax,rax
  408045:	je     407ed8 <flatcc_emitter@@Base+0x218>
  40804b:	lea    rdx,[rax+0x5c0]
  408052:	add    QWORD PTR [rbx+0x38],0xb80
  40805a:	mov    QWORD PTR [rbx],rax
  40805d:	mov    QWORD PTR [rbx+0x8],rax
  408061:	mov    QWORD PTR [rax+0xb80],rax
  408068:	mov    QWORD PTR [rax+0xb88],rax
  40806f:	mov    QWORD PTR [rbx+0x10],rdx
  408073:	mov    QWORD PTR [rbx+0x20],rdx
  408077:	mov    QWORD PTR [rbx+0x18],0x5c0
  40807f:	mov    QWORD PTR [rbx+0x28],0x5c0
  408087:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408091:	jmp    407f3f <flatcc_emitter@@Base+0x27f>
  408096:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4080a0:	mov    rcx,QWORD PTR [rdi+0x10]
  4080a4:	sub    rax,r8
  4080a7:	sub    rcx,r8
  4080aa:	mov    QWORD PTR [rdi+0x10],rcx
  4080ae:	mov    QWORD PTR [rdi+0x18],rax
  4080b2:	jmp    407d8b <flatcc_emitter@@Base+0xcb>
  4080b7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004080c0 <flatcc_emitter_copy_buffer@@Base>:
  4080c0:	endbr64 
  4080c4:	mov    rax,QWORD PTR [rdi+0x30]
  4080c8:	cmp    rax,rdx
  4080cb:	ja     408170 <flatcc_emitter_copy_buffer@@Base+0xb0>
  4080d1:	mov    rcx,QWORD PTR [rdi]
  4080d4:	test   rcx,rcx
  4080d7:	je     408172 <flatcc_emitter_copy_buffer@@Base+0xb2>
  4080dd:	push   rbp
  4080de:	mov    r8,rsi
  4080e1:	mov    rbp,rdi
  4080e4:	push   rbx
  4080e5:	sub    rsp,0x8
  4080e9:	mov    rsi,QWORD PTR [rdi+0x10]
  4080ed:	cmp    rcx,QWORD PTR [rdi+0x8]
  4080f1:	je     408180 <flatcc_emitter_copy_buffer@@Base+0xc0>
  4080f7:	mov    ecx,0xb80
  4080fc:	mov    rbx,rcx
  4080ff:	sub    rbx,QWORD PTR [rdi+0x18]
  408103:	mov    rdx,rbx
  408106:	mov    rdi,r8
  408109:	call   403170 <memcpy@plt>
  40810e:	lea    rcx,[rax+rbx*1]
  408112:	mov    rax,QWORD PTR [rbp+0x0]
  408116:	mov    rbx,QWORD PTR [rax+0xb80]
  40811d:	cmp    rbx,QWORD PTR [rbp+0x8]
  408121:	je     40814f <flatcc_emitter_copy_buffer@@Base+0x8f>
  408123:	nop    DWORD PTR [rax+rax*1+0x0]
  408128:	mov    rsi,rbx
  40812b:	mov    rdi,rcx
  40812e:	mov    edx,0xb80
  408133:	call   403170 <memcpy@plt>
  408138:	mov    rbx,QWORD PTR [rbx+0xb80]
  40813f:	mov    rcx,rax
  408142:	add    rcx,0xb80
  408149:	cmp    QWORD PTR [rbp+0x8],rbx
  40814d:	jne    408128 <flatcc_emitter_copy_buffer@@Base+0x68>
  40814f:	mov    edx,0xb80
  408154:	sub    rdx,QWORD PTR [rbp+0x28]
  408158:	mov    rsi,rbx
  40815b:	mov    rdi,rcx
  40815e:	call   403170 <memcpy@plt>
  408163:	add    rsp,0x8
  408167:	mov    rcx,rax
  40816a:	pop    rbx
  40816b:	mov    rax,rcx
  40816e:	pop    rbp
  40816f:	ret    
  408170:	xor    ecx,ecx
  408172:	mov    rax,rcx
  408175:	ret    
  408176:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408180:	mov    rdx,rax
  408183:	mov    rdi,r8
  408186:	call   403170 <memcpy@plt>
  40818b:	add    rsp,0x8
  40818f:	mov    rcx,rax
  408192:	pop    rbx
  408193:	mov    rax,rcx
  408196:	pop    rbp
  408197:	ret    
  408198:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004081a0 <__libc_csu_init@@Base>:
  4081a0:	endbr64 
  4081a4:	push   r15
  4081a6:	lea    r15,[rip+0x4c5b]        # 40ce08 <flatcc_builder_padding_base@@Base+0x2f88>
  4081ad:	push   r14
  4081af:	mov    r14,rdx
  4081b2:	push   r13
  4081b4:	mov    r13,rsi
  4081b7:	push   r12
  4081b9:	mov    r12d,edi
  4081bc:	push   rbp
  4081bd:	lea    rbp,[rip+0x4c4c]        # 40ce10 <flatcc_builder_padding_base@@Base+0x2f90>
  4081c4:	push   rbx
  4081c5:	sub    rbp,r15
  4081c8:	sub    rsp,0x8
  4081cc:	call   403000 <free@plt-0x100>
  4081d1:	sar    rbp,0x3
  4081d5:	je     4081f6 <__libc_csu_init@@Base+0x56>
  4081d7:	xor    ebx,ebx
  4081d9:	nop    DWORD PTR [rax+0x0]
  4081e0:	mov    rdx,r14
  4081e3:	mov    rsi,r13
  4081e6:	mov    edi,r12d
  4081e9:	call   QWORD PTR [r15+rbx*8]
  4081ed:	add    rbx,0x1
  4081f1:	cmp    rbp,rbx
  4081f4:	jne    4081e0 <__libc_csu_init@@Base+0x40>
  4081f6:	add    rsp,0x8
  4081fa:	pop    rbx
  4081fb:	pop    rbp
  4081fc:	pop    r12
  4081fe:	pop    r13
  408200:	pop    r14
  408202:	pop    r15
  408204:	ret    
  408205:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000408210 <__libc_csu_fini@@Base>:
  408210:	endbr64 
  408214:	ret    

Disassembly of section .fini:

0000000000408218 <.fini>:
  408218:	endbr64 
  40821c:	sub    rsp,0x8
  408220:	add    rsp,0x8
  408224:	ret    
