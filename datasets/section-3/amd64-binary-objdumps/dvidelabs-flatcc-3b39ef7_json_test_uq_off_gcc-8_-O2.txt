
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uq_off:     file format elf64-x86-64


Disassembly of section .init:

0000000000406000 <.init>:
  406000:	endbr64 
  406004:	sub    rsp,0x8
  406008:	mov    rax,QWORD PTR [rip+0x32fd1]        # 438fe0 <__gmon_start__>
  40600f:	test   rax,rax
  406012:	je     406016 <free@plt-0x14a>
  406014:	call   rax
  406016:	add    rsp,0x8
  40601a:	ret    

Disassembly of section .plt:

0000000000406020 <.plt>:
  406020:	push   QWORD PTR [rip+0x32fe2]        # 439008 <flatcc_builder_padding_base@@Base+0xa2e8>
  406026:	bnd jmp QWORD PTR [rip+0x32fe3]        # 439010 <flatcc_builder_padding_base@@Base+0xa2f0>
  40602d:	nop    DWORD PTR [rax]
  406030:	endbr64 
  406034:	push   0x0
  406039:	bnd jmp 406020 <free@plt-0x140>
  40603f:	nop
  406040:	endbr64 
  406044:	push   0x1
  406049:	bnd jmp 406020 <free@plt-0x140>
  40604f:	nop
  406050:	endbr64 
  406054:	push   0x2
  406059:	bnd jmp 406020 <free@plt-0x140>
  40605f:	nop
  406060:	endbr64 
  406064:	push   0x3
  406069:	bnd jmp 406020 <free@plt-0x140>
  40606f:	nop
  406070:	endbr64 
  406074:	push   0x4
  406079:	bnd jmp 406020 <free@plt-0x140>
  40607f:	nop
  406080:	endbr64 
  406084:	push   0x5
  406089:	bnd jmp 406020 <free@plt-0x140>
  40608f:	nop
  406090:	endbr64 
  406094:	push   0x6
  406099:	bnd jmp 406020 <free@plt-0x140>
  40609f:	nop
  4060a0:	endbr64 
  4060a4:	push   0x7
  4060a9:	bnd jmp 406020 <free@plt-0x140>
  4060af:	nop
  4060b0:	endbr64 
  4060b4:	push   0x8
  4060b9:	bnd jmp 406020 <free@plt-0x140>
  4060bf:	nop
  4060c0:	endbr64 
  4060c4:	push   0x9
  4060c9:	bnd jmp 406020 <free@plt-0x140>
  4060cf:	nop
  4060d0:	endbr64 
  4060d4:	push   0xa
  4060d9:	bnd jmp 406020 <free@plt-0x140>
  4060df:	nop
  4060e0:	endbr64 
  4060e4:	push   0xb
  4060e9:	bnd jmp 406020 <free@plt-0x140>
  4060ef:	nop
  4060f0:	endbr64 
  4060f4:	push   0xc
  4060f9:	bnd jmp 406020 <free@plt-0x140>
  4060ff:	nop
  406100:	endbr64 
  406104:	push   0xd
  406109:	bnd jmp 406020 <free@plt-0x140>
  40610f:	nop
  406110:	endbr64 
  406114:	push   0xe
  406119:	bnd jmp 406020 <free@plt-0x140>
  40611f:	nop
  406120:	endbr64 
  406124:	push   0xf
  406129:	bnd jmp 406020 <free@plt-0x140>
  40612f:	nop
  406130:	endbr64 
  406134:	push   0x10
  406139:	bnd jmp 406020 <free@plt-0x140>
  40613f:	nop
  406140:	endbr64 
  406144:	push   0x11
  406149:	bnd jmp 406020 <free@plt-0x140>
  40614f:	nop
  406150:	endbr64 
  406154:	push   0x12
  406159:	bnd jmp 406020 <free@plt-0x140>
  40615f:	nop

Disassembly of section .plt.sec:

0000000000406160 <free@plt>:
  406160:	endbr64 
  406164:	bnd jmp QWORD PTR [rip+0x32ead]        # 439018 <free@GLIBC_2.2.5>
  40616b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406170 <strncpy@plt>:
  406170:	endbr64 
  406174:	bnd jmp QWORD PTR [rip+0x32ea5]        # 439020 <strncpy@GLIBC_2.2.5>
  40617b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406180 <strtod@plt>:
  406180:	endbr64 
  406184:	bnd jmp QWORD PTR [rip+0x32e9d]        # 439028 <strtod@GLIBC_2.2.5>
  40618b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406190 <strlen@plt>:
  406190:	endbr64 
  406194:	bnd jmp QWORD PTR [rip+0x32e95]        # 439030 <strlen@GLIBC_2.2.5>
  40619b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004061a0 <__stack_chk_fail@plt>:
  4061a0:	endbr64 
  4061a4:	bnd jmp QWORD PTR [rip+0x32e8d]        # 439038 <__stack_chk_fail@GLIBC_2.4>
  4061ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004061b0 <__assert_fail@plt>:
  4061b0:	endbr64 
  4061b4:	bnd jmp QWORD PTR [rip+0x32e85]        # 439040 <__assert_fail@GLIBC_2.2.5>
  4061bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004061c0 <memset@plt>:
  4061c0:	endbr64 
  4061c4:	bnd jmp QWORD PTR [rip+0x32e7d]        # 439048 <memset@GLIBC_2.2.5>
  4061cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004061d0 <memchr@plt>:
  4061d0:	endbr64 
  4061d4:	bnd jmp QWORD PTR [rip+0x32e75]        # 439050 <memchr@GLIBC_2.2.5>
  4061db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004061e0 <memcmp@plt>:
  4061e0:	endbr64 
  4061e4:	bnd jmp QWORD PTR [rip+0x32e6d]        # 439058 <memcmp@GLIBC_2.2.5>
  4061eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004061f0 <strcmp@plt>:
  4061f0:	endbr64 
  4061f4:	bnd jmp QWORD PTR [rip+0x32e65]        # 439060 <strcmp@GLIBC_2.2.5>
  4061fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406200 <__memcpy_chk@plt>:
  406200:	endbr64 
  406204:	bnd jmp QWORD PTR [rip+0x32e5d]        # 439068 <__memcpy_chk@GLIBC_2.3.4>
  40620b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406210 <memcpy@plt>:
  406210:	endbr64 
  406214:	bnd jmp QWORD PTR [rip+0x32e55]        # 439070 <memcpy@GLIBC_2.14>
  40621b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406220 <malloc@plt>:
  406220:	endbr64 
  406224:	bnd jmp QWORD PTR [rip+0x32e4d]        # 439078 <malloc@GLIBC_2.2.5>
  40622b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406230 <realloc@plt>:
  406230:	endbr64 
  406234:	bnd jmp QWORD PTR [rip+0x32e45]        # 439080 <realloc@GLIBC_2.2.5>
  40623b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406240 <memmove@plt>:
  406240:	endbr64 
  406244:	bnd jmp QWORD PTR [rip+0x32e3d]        # 439088 <memmove@GLIBC_2.2.5>
  40624b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406250 <fwrite@plt>:
  406250:	endbr64 
  406254:	bnd jmp QWORD PTR [rip+0x32e35]        # 439090 <fwrite@GLIBC_2.2.5>
  40625b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406260 <__fprintf_chk@plt>:
  406260:	endbr64 
  406264:	bnd jmp QWORD PTR [rip+0x32e2d]        # 439098 <__fprintf_chk@GLIBC_2.3.4>
  40626b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406270 <posix_memalign@plt>:
  406270:	endbr64 
  406274:	bnd jmp QWORD PTR [rip+0x32e25]        # 4390a0 <posix_memalign@GLIBC_2.2.5>
  40627b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406280 <__sprintf_chk@plt>:
  406280:	endbr64 
  406284:	bnd jmp QWORD PTR [rip+0x32e1d]        # 4390a8 <__sprintf_chk@GLIBC_2.3.4>
  40628b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

0000000000406290 <main@@Base>:
  406290:	endbr64 
  406294:	push   rbx
  406295:	xor    eax,eax
  406297:	call   415480 <edge_case_tests@@Base>
  40629c:	mov    ebx,eax
  40629e:	xor    eax,eax
  4062a0:	call   415630 <error_case_tests@@Base>
  4062a5:	or     ebx,eax
  4062a7:	xor    eax,eax
  4062a9:	call   415ad0 <union_vector_tests@@Base>
  4062ae:	or     ebx,eax
  4062b0:	xor    eax,eax
  4062b2:	call   415830 <base64_tests@@Base>
  4062b7:	or     ebx,eax
  4062b9:	xor    eax,eax
  4062bb:	call   415990 <mixed_type_union_tests@@Base>
  4062c0:	sub    rsp,0x8
  4062c4:	push   0x20d
  4062c9:	xor    r9d,r9d
  4062cc:	xor    r8d,r8d
  4062cf:	xor    ecx,ecx
  4062d1:	lea    rdx,[rip+0x25280]        # 42b558 <_IO_stdin_used@@Base+0x558>
  4062d8:	lea    rsi,[rip+0x25306]        # 42b5e5 <_IO_stdin_used@@Base+0x5e5>
  4062df:	lea    rdi,[rip+0x32afa]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4062e6:	or     ebx,eax
  4062e8:	call   414f40 <test_json@@Base>
  4062ed:	xor    r9d,r9d
  4062f0:	xor    r8d,r8d
  4062f3:	xor    ecx,ecx
  4062f5:	lea    rdx,[rip+0x26f5c]        # 42d258 <_IO_stdin_used@@Base+0x2258>
  4062fc:	lea    rsi,[rip+0x26f7d]        # 42d280 <_IO_stdin_used@@Base+0x2280>
  406303:	lea    rdi,[rip+0x32ad6]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  40630a:	or     ebx,eax
  40630c:	mov    DWORD PTR [rsp],0x210
  406313:	call   414f40 <test_json@@Base>
  406318:	xor    r9d,r9d
  40631b:	xor    r8d,r8d
  40631e:	xor    ecx,ecx
  406320:	lea    rdx,[rip+0x26f81]        # 42d2a8 <_IO_stdin_used@@Base+0x22a8>
  406327:	lea    rsi,[rip+0x26fa2]        # 42d2d0 <_IO_stdin_used@@Base+0x22d0>
  40632e:	lea    rdi,[rip+0x32aab]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406335:	or     ebx,eax
  406337:	mov    DWORD PTR [rsp],0x213
  40633e:	call   414f40 <test_json@@Base>
  406343:	or     ebx,eax
  406345:	xor    r9d,r9d
  406348:	xor    r8d,r8d
  40634b:	lea    rdx,[rip+0x26fa6]        # 42d2f8 <_IO_stdin_used@@Base+0x22f8>
  406352:	xor    ecx,ecx
  406354:	lea    rsi,[rip+0x26fcd]        # 42d328 <_IO_stdin_used@@Base+0x2328>
  40635b:	lea    rdi,[rip+0x32a7e]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406362:	mov    DWORD PTR [rsp],0x216
  406369:	call   414f40 <test_json@@Base>
  40636e:	xor    r9d,r9d
  406371:	xor    r8d,r8d
  406374:	xor    ecx,ecx
  406376:	lea    rdx,[rip+0x26f7b]        # 42d2f8 <_IO_stdin_used@@Base+0x22f8>
  40637d:	lea    rsi,[rip+0x26fdc]        # 42d360 <_IO_stdin_used@@Base+0x2360>
  406384:	lea    rdi,[rip+0x32a55]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  40638b:	or     ebx,eax
  40638d:	mov    DWORD PTR [rsp],0x219
  406394:	call   414f40 <test_json@@Base>
  406399:	xor    r9d,r9d
  40639c:	xor    r8d,r8d
  40639f:	xor    ecx,ecx
  4063a1:	lea    rdx,[rip+0x26eb0]        # 42d258 <_IO_stdin_used@@Base+0x2258>
  4063a8:	lea    rsi,[rip+0x26ff1]        # 42d3a0 <_IO_stdin_used@@Base+0x23a0>
  4063af:	lea    rdi,[rip+0x32a2a]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4063b6:	or     ebx,eax
  4063b8:	mov    DWORD PTR [rsp],0x21c
  4063bf:	call   414f40 <test_json@@Base>
  4063c4:	xor    r9d,r9d
  4063c7:	xor    r8d,r8d
  4063ca:	xor    ecx,ecx
  4063cc:	lea    rdx,[rip+0x26ed5]        # 42d2a8 <_IO_stdin_used@@Base+0x22a8>
  4063d3:	lea    rsi,[rip+0x26fee]        # 42d3c8 <_IO_stdin_used@@Base+0x23c8>
  4063da:	lea    rdi,[rip+0x329ff]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4063e1:	or     ebx,eax
  4063e3:	mov    DWORD PTR [rsp],0x21f
  4063ea:	call   414f40 <test_json@@Base>
  4063ef:	xor    r9d,r9d
  4063f2:	xor    r8d,r8d
  4063f5:	xor    ecx,ecx
  4063f7:	lea    rdx,[rip+0x2515a]        # 42b558 <_IO_stdin_used@@Base+0x558>
  4063fe:	lea    rsi,[rip+0x26ff3]        # 42d3f8 <_IO_stdin_used@@Base+0x23f8>
  406405:	lea    rdi,[rip+0x329d4]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  40640c:	or     ebx,eax
  40640e:	mov    DWORD PTR [rsp],0x223
  406415:	call   414f40 <test_json@@Base>
  40641a:	xor    r9d,r9d
  40641d:	xor    r8d,r8d
  406420:	xor    ecx,ecx
  406422:	lea    rdx,[rip+0x2512f]        # 42b558 <_IO_stdin_used@@Base+0x558>
  406429:	lea    rsi,[rip+0x25458]        # 42b888 <_IO_stdin_used@@Base+0x888>
  406430:	lea    rdi,[rip+0x329a9]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406437:	or     ebx,eax
  406439:	mov    DWORD PTR [rsp],0x227
  406440:	call   414f40 <test_json@@Base>
  406445:	xor    r9d,r9d
  406448:	xor    r8d,r8d
  40644b:	xor    ecx,ecx
  40644d:	lea    rdx,[rip+0x26e04]        # 42d258 <_IO_stdin_used@@Base+0x2258>
  406454:	lea    rsi,[rip+0x26fc5]        # 42d420 <_IO_stdin_used@@Base+0x2420>
  40645b:	lea    rdi,[rip+0x3297e]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406462:	mov    DWORD PTR [rsp],0x259
  406469:	or     ebx,eax
  40646b:	call   414f40 <test_json@@Base>
  406470:	or     ebx,eax
  406472:	lea    rdx,[rip+0x26e2f]        # 42d2a8 <_IO_stdin_used@@Base+0x22a8>
  406479:	xor    r9d,r9d
  40647c:	xor    r8d,r8d
  40647f:	xor    ecx,ecx
  406481:	lea    rsi,[rip+0x26fc0]        # 42d448 <_IO_stdin_used@@Base+0x2448>
  406488:	lea    rdi,[rip+0x32951]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  40648f:	mov    DWORD PTR [rsp],0x25c
  406496:	call   414f40 <test_json@@Base>
  40649b:	xor    r9d,r9d
  40649e:	xor    r8d,r8d
  4064a1:	xor    ecx,ecx
  4064a3:	lea    rdx,[rip+0x26fc6]        # 42d470 <_IO_stdin_used@@Base+0x2470>
  4064aa:	lea    rsi,[rip+0x26fe7]        # 42d498 <_IO_stdin_used@@Base+0x2498>
  4064b1:	lea    rdi,[rip+0x32928]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4064b8:	or     ebx,eax
  4064ba:	mov    DWORD PTR [rsp],0x25f
  4064c1:	call   414f40 <test_json@@Base>
  4064c6:	xor    r9d,r9d
  4064c9:	xor    r8d,r8d
  4064cc:	xor    ecx,ecx
  4064ce:	lea    rdx,[rip+0x26e23]        # 42d2f8 <_IO_stdin_used@@Base+0x22f8>
  4064d5:	lea    rsi,[rip+0x26fe4]        # 42d4c0 <_IO_stdin_used@@Base+0x24c0>
  4064dc:	lea    rdi,[rip+0x328fd]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4064e3:	or     ebx,eax
  4064e5:	mov    DWORD PTR [rsp],0x262
  4064ec:	call   414f40 <test_json@@Base>
  4064f1:	xor    r9d,r9d
  4064f4:	xor    r8d,r8d
  4064f7:	xor    ecx,ecx
  4064f9:	lea    rdx,[rip+0x250fc]        # 42b5fc <_IO_stdin_used@@Base+0x5fc>
  406500:	lea    rsi,[rip+0x26fe1]        # 42d4e8 <_IO_stdin_used@@Base+0x24e8>
  406507:	lea    rdi,[rip+0x328d2]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  40650e:	or     ebx,eax
  406510:	mov    DWORD PTR [rsp],0x265
  406517:	call   414f40 <test_json@@Base>
  40651c:	xor    r9d,r9d
  40651f:	xor    r8d,r8d
  406522:	xor    ecx,ecx
  406524:	lea    rdx,[rip+0x250ef]        # 42b61a <_IO_stdin_used@@Base+0x61a>
  40652b:	lea    rsi,[rip+0x26fde]        # 42d510 <_IO_stdin_used@@Base+0x2510>
  406532:	lea    rdi,[rip+0x328a7]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406539:	or     ebx,eax
  40653b:	mov    DWORD PTR [rsp],0x268
  406542:	call   414f40 <test_json@@Base>
  406547:	xor    r9d,r9d
  40654a:	xor    ecx,ecx
  40654c:	xor    r8d,r8d
  40654f:	lea    rdx,[rip+0x250e2]        # 42b638 <_IO_stdin_used@@Base+0x638>
  406556:	lea    rsi,[rip+0x26fdb]        # 42d538 <_IO_stdin_used@@Base+0x2538>
  40655d:	lea    rdi,[rip+0x3287c]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406564:	or     ebx,eax
  406566:	mov    DWORD PTR [rsp],0x26b
  40656d:	call   414f40 <test_json@@Base>
  406572:	or     ebx,eax
  406574:	xor    r9d,r9d
  406577:	lea    rdx,[rip+0x26cda]        # 42d258 <_IO_stdin_used@@Base+0x2258>
  40657e:	xor    r8d,r8d
  406581:	lea    rsi,[rip+0x26fd8]        # 42d560 <_IO_stdin_used@@Base+0x2560>
  406588:	xor    ecx,ecx
  40658a:	lea    rdi,[rip+0x3284f]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406591:	mov    DWORD PTR [rsp],0x26e
  406598:	call   414f40 <test_json@@Base>
  40659d:	xor    r9d,r9d
  4065a0:	xor    r8d,r8d
  4065a3:	xor    ecx,ecx
  4065a5:	lea    rdx,[rip+0x26cac]        # 42d258 <_IO_stdin_used@@Base+0x2258>
  4065ac:	lea    rsi,[rip+0x26fdd]        # 42d590 <_IO_stdin_used@@Base+0x2590>
  4065b3:	lea    rdi,[rip+0x32826]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4065ba:	or     ebx,eax
  4065bc:	mov    DWORD PTR [rsp],0x271
  4065c3:	call   414f40 <test_json@@Base>
  4065c8:	xor    r9d,r9d
  4065cb:	xor    r8d,r8d
  4065ce:	xor    ecx,ecx
  4065d0:	lea    rdx,[rip+0x2507e]        # 42b655 <_IO_stdin_used@@Base+0x655>
  4065d7:	lea    rsi,[rip+0x26ff2]        # 42d5d0 <_IO_stdin_used@@Base+0x25d0>
  4065de:	lea    rdi,[rip+0x327fb]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4065e5:	or     ebx,eax
  4065e7:	mov    DWORD PTR [rsp],0x274
  4065ee:	call   414f40 <test_json@@Base>
  4065f3:	xor    r9d,r9d
  4065f6:	xor    r8d,r8d
  4065f9:	xor    ecx,ecx
  4065fb:	lea    rdx,[rip+0x25053]        # 42b655 <_IO_stdin_used@@Base+0x655>
  406602:	lea    rsi,[rip+0x26fc7]        # 42d5d0 <_IO_stdin_used@@Base+0x25d0>
  406609:	lea    rdi,[rip+0x327d0]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406610:	or     ebx,eax
  406612:	mov    DWORD PTR [rsp],0x277
  406619:	call   414f40 <test_json@@Base>
  40661e:	xor    r9d,r9d
  406621:	xor    r8d,r8d
  406624:	xor    ecx,ecx
  406626:	lea    rdx,[rip+0x26fd3]        # 42d600 <_IO_stdin_used@@Base+0x2600>
  40662d:	lea    rsi,[rip+0x27014]        # 42d648 <_IO_stdin_used@@Base+0x2648>
  406634:	lea    rdi,[rip+0x327a5]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  40663b:	or     ebx,eax
  40663d:	mov    DWORD PTR [rsp],0x27a
  406644:	call   414f40 <test_json@@Base>
  406649:	xor    r9d,r9d
  40664c:	xor    r8d,r8d
  40664f:	xor    ecx,ecx
  406651:	lea    rdx,[rip+0x27048]        # 42d6a0 <_IO_stdin_used@@Base+0x26a0>
  406658:	lea    rsi,[rip+0x27091]        # 42d6f0 <_IO_stdin_used@@Base+0x26f0>
  40665f:	lea    rdi,[rip+0x3277a]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406666:	or     ebx,eax
  406668:	mov    DWORD PTR [rsp],0x27e
  40666f:	call   414f40 <test_json@@Base>
  406674:	xor    r9d,r9d
  406677:	xor    r8d,r8d
  40667a:	xor    ecx,ecx
  40667c:	lea    rdx,[rip+0x270c5]        # 42d748 <_IO_stdin_used@@Base+0x2748>
  406683:	lea    rsi,[rip+0x27126]        # 42d7b0 <_IO_stdin_used@@Base+0x27b0>
  40668a:	lea    rdi,[rip+0x3274f]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406691:	mov    DWORD PTR [rsp],0x282
  406698:	or     ebx,eax
  40669a:	call   414f40 <test_json@@Base>
  40669f:	xor    r9d,r9d
  4066a2:	xor    r8d,r8d
  4066a5:	xor    ecx,ecx
  4066a7:	lea    rdx,[rip+0x24eaa]        # 42b558 <_IO_stdin_used@@Base+0x558>
  4066ae:	lea    rsi,[rip+0x2716b]        # 42d820 <_IO_stdin_used@@Base+0x2820>
  4066b5:	lea    rdi,[rip+0x32724]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4066bc:	or     ebx,eax
  4066be:	mov    DWORD PTR [rsp],0x286
  4066c5:	call   414f40 <test_json@@Base>
  4066ca:	xor    r9d,r9d
  4066cd:	xor    r8d,r8d
  4066d0:	xor    ecx,ecx
  4066d2:	lea    rdx,[rip+0x24e7f]        # 42b558 <_IO_stdin_used@@Base+0x558>
  4066d9:	lea    rsi,[rip+0x27170]        # 42d850 <_IO_stdin_used@@Base+0x2850>
  4066e0:	lea    rdi,[rip+0x326f9]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4066e7:	or     ebx,eax
  4066e9:	mov    DWORD PTR [rsp],0x289
  4066f0:	call   414f40 <test_json@@Base>
  4066f5:	xor    r9d,r9d
  4066f8:	xor    r8d,r8d
  4066fb:	xor    ecx,ecx
  4066fd:	lea    rdx,[rip+0x27174]        # 42d878 <_IO_stdin_used@@Base+0x2878>
  406704:	lea    rsi,[rip+0x271cd]        # 42d8d8 <_IO_stdin_used@@Base+0x28d8>
  40670b:	lea    rdi,[rip+0x326ce]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406712:	or     ebx,eax
  406714:	mov    DWORD PTR [rsp],0x2cc
  40671b:	call   414f40 <test_json@@Base>
  406720:	xor    r9d,r9d
  406723:	xor    r8d,r8d
  406726:	xor    ecx,ecx
  406728:	lea    rdx,[rip+0x27219]        # 42d948 <_IO_stdin_used@@Base+0x2948>
  40672f:	lea    rsi,[rip+0x27242]        # 42d978 <_IO_stdin_used@@Base+0x2978>
  406736:	lea    rdi,[rip+0x326a3]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  40673d:	or     ebx,eax
  40673f:	mov    DWORD PTR [rsp],0x2db
  406746:	call   414f40 <test_json@@Base>
  40674b:	xor    r9d,r9d
  40674e:	xor    r8d,r8d
  406751:	xor    ecx,ecx
  406753:	lea    rdx,[rip+0x24f15]        # 42b66f <_IO_stdin_used@@Base+0x66f>
  40675a:	lea    rsi,[rip+0x24f20]        # 42b681 <_IO_stdin_used@@Base+0x681>
  406761:	lea    rdi,[rip+0x32678]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406768:	or     ebx,eax
  40676a:	mov    DWORD PTR [rsp],0x2de
  406771:	call   414f40 <test_json@@Base>
  406776:	xor    r8d,r8d
  406779:	xor    ecx,ecx
  40677b:	xor    r9d,r9d
  40677e:	lea    rdx,[rip+0x27233]        # 42d9b8 <_IO_stdin_used@@Base+0x29b8>
  406785:	lea    rsi,[rip+0x27274]        # 42da00 <_IO_stdin_used@@Base+0x2a00>
  40678c:	lea    rdi,[rip+0x3264d]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406793:	or     ebx,eax
  406795:	mov    DWORD PTR [rsp],0x2e2
  40679c:	call   414f40 <test_json@@Base>
  4067a1:	or     ebx,eax
  4067a3:	lea    rdx,[rip+0x2720e]        # 42d9b8 <_IO_stdin_used@@Base+0x29b8>
  4067aa:	xor    r9d,r9d
  4067ad:	lea    rsi,[rip+0x27294]        # 42da48 <_IO_stdin_used@@Base+0x2a48>
  4067b4:	xor    r8d,r8d
  4067b7:	xor    ecx,ecx
  4067b9:	lea    rdi,[rip+0x32620]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4067c0:	mov    DWORD PTR [rsp],0x2ee
  4067c7:	call   414f40 <test_json@@Base>
  4067cc:	xor    r9d,r9d
  4067cf:	xor    r8d,r8d
  4067d2:	xor    ecx,ecx
  4067d4:	lea    rdx,[rip+0x2730d]        # 42dae8 <_IO_stdin_used@@Base+0x2ae8>
  4067db:	lea    rsi,[rip+0x2732e]        # 42db10 <_IO_stdin_used@@Base+0x2b10>
  4067e2:	lea    rdi,[rip+0x325f7]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4067e9:	or     ebx,eax
  4067eb:	mov    DWORD PTR [rsp],0x2fe
  4067f2:	call   414f40 <test_json@@Base>
  4067f7:	xor    r9d,r9d
  4067fa:	xor    r8d,r8d
  4067fd:	xor    ecx,ecx
  4067ff:	lea    rdx,[rip+0x27332]        # 42db38 <_IO_stdin_used@@Base+0x2b38>
  406806:	lea    rsi,[rip+0x2735b]        # 42db68 <_IO_stdin_used@@Base+0x2b68>
  40680d:	lea    rdi,[rip+0x325cc]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406814:	or     ebx,eax
  406816:	mov    DWORD PTR [rsp],0x302
  40681d:	call   414f40 <test_json@@Base>
  406822:	xor    r9d,r9d
  406825:	xor    r8d,r8d
  406828:	xor    ecx,ecx
  40682a:	lea    rdx,[rip+0x27367]        # 42db98 <_IO_stdin_used@@Base+0x2b98>
  406831:	lea    rsi,[rip+0x273d0]        # 42dc08 <_IO_stdin_used@@Base+0x2c08>
  406838:	lea    rdi,[rip+0x325a1]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  40683f:	or     ebx,eax
  406841:	mov    DWORD PTR [rsp],0x308
  406848:	call   414f40 <test_json@@Base>
  40684d:	xor    r9d,r9d
  406850:	xor    r8d,r8d
  406853:	xor    ecx,ecx
  406855:	lea    rdx,[rip+0x24cfc]        # 42b558 <_IO_stdin_used@@Base+0x558>
  40685c:	lea    rsi,[rip+0x27425]        # 42dc88 <_IO_stdin_used@@Base+0x2c88>
  406863:	lea    rdi,[rip+0x32576]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  40686a:	or     ebx,eax
  40686c:	mov    DWORD PTR [rsp],0x30d
  406873:	call   414f40 <test_json@@Base>
  406878:	xor    r9d,r9d
  40687b:	xor    r8d,r8d
  40687e:	xor    ecx,ecx
  406880:	lea    rdx,[rip+0x27479]        # 42dd00 <_IO_stdin_used@@Base+0x2d00>
  406887:	lea    rsi,[rip+0x274e2]        # 42dd70 <_IO_stdin_used@@Base+0x2d70>
  40688e:	lea    rdi,[rip+0x3254b]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406895:	or     ebx,eax
  406897:	mov    DWORD PTR [rsp],0x312
  40689e:	call   414f40 <test_json@@Base>
  4068a3:	or     ebx,eax
  4068a5:	xor    r9d,r9d
  4068a8:	xor    r8d,r8d
  4068ab:	lea    rdx,[rip+0x2753e]        # 42ddf0 <_IO_stdin_used@@Base+0x2df0>
  4068b2:	xor    ecx,ecx
  4068b4:	lea    rsi,[rip+0x275b5]        # 42de70 <_IO_stdin_used@@Base+0x2e70>
  4068bb:	lea    rdi,[rip+0x3251e]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4068c2:	mov    DWORD PTR [rsp],0x317
  4068c9:	call   414f40 <test_json@@Base>
  4068ce:	xor    r9d,r9d
  4068d1:	xor    r8d,r8d
  4068d4:	xor    ecx,ecx
  4068d6:	lea    rdx,[rip+0x27623]        # 42df00 <_IO_stdin_used@@Base+0x2f00>
  4068dd:	lea    rsi,[rip+0x2768c]        # 42df70 <_IO_stdin_used@@Base+0x2f70>
  4068e4:	lea    rdi,[rip+0x324f5]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4068eb:	or     ebx,eax
  4068ed:	mov    DWORD PTR [rsp],0x31c
  4068f4:	call   414f40 <test_json@@Base>
  4068f9:	xor    r9d,r9d
  4068fc:	xor    r8d,r8d
  4068ff:	xor    ecx,ecx
  406901:	lea    rdx,[rip+0x276e8]        # 42dff0 <_IO_stdin_used@@Base+0x2ff0>
  406908:	lea    rsi,[rip+0x27761]        # 42e070 <_IO_stdin_used@@Base+0x3070>
  40690f:	lea    rdi,[rip+0x324ca]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406916:	or     ebx,eax
  406918:	mov    DWORD PTR [rsp],0x321
  40691f:	call   414f40 <test_json@@Base>
  406924:	xor    ecx,ecx
  406926:	xor    r9d,r9d
  406929:	xor    r8d,r8d
  40692c:	lea    rdx,[rip+0x277cd]        # 42e100 <_IO_stdin_used@@Base+0x3100>
  406933:	lea    rsi,[rip+0x2784e]        # 42e188 <_IO_stdin_used@@Base+0x3188>
  40693a:	lea    rdi,[rip+0x3249f]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  406941:	or     ebx,eax
  406943:	mov    DWORD PTR [rsp],0x326
  40694a:	call   414f40 <test_json@@Base>
  40694f:	or     ebx,eax
  406951:	pop    rdx
  406952:	setne  al
  406955:	pop    rcx
  406956:	movzx  eax,al
  406959:	neg    eax
  40695b:	pop    rbx
  40695c:	ret    
  40695d:	nop    DWORD PTR [rax]

0000000000406960 <_start@@Base>:
  406960:	endbr64 
  406964:	xor    ebp,ebp
  406966:	mov    r9,rdx
  406969:	pop    rsi
  40696a:	mov    rdx,rsp
  40696d:	and    rsp,0xfffffffffffffff0
  406971:	push   rax
  406972:	push   rsp
  406973:	mov    r8,0x42af10
  40697a:	mov    rcx,0x42aea0
  406981:	mov    rdi,0x406290
  406988:	call   QWORD PTR [rip+0x3264a]        # 438fd8 <__libc_start_main@GLIBC_2.2.5>
  40698e:	hlt    
  40698f:	nop
  406990:	endbr64 
  406994:	ret    
  406995:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40699f:	nop
  4069a0:	mov    eax,0x439850
  4069a5:	cmp    rax,0x439850
  4069ab:	je     4069c0 <_start@@Base+0x60>
  4069ad:	mov    eax,0x0
  4069b2:	test   rax,rax
  4069b5:	je     4069c0 <_start@@Base+0x60>
  4069b7:	mov    edi,0x439850
  4069bc:	jmp    rax
  4069be:	xchg   ax,ax
  4069c0:	ret    
  4069c1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4069cc:	nop    DWORD PTR [rax+0x0]
  4069d0:	mov    esi,0x439850
  4069d5:	sub    rsi,0x439850
  4069dc:	sar    rsi,0x3
  4069e0:	mov    rax,rsi
  4069e3:	shr    rax,0x3f
  4069e7:	add    rsi,rax
  4069ea:	sar    rsi,1
  4069ed:	je     406a00 <_start@@Base+0xa0>
  4069ef:	mov    eax,0x0
  4069f4:	test   rax,rax
  4069f7:	je     406a00 <_start@@Base+0xa0>
  4069f9:	mov    edi,0x439850
  4069fe:	jmp    rax
  406a00:	ret    
  406a01:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406a0c:	nop    DWORD PTR [rax+0x0]
  406a10:	endbr64 
  406a14:	cmp    BYTE PTR [rip+0x32e35],0x0        # 439850 <__bss_start@@Base>
  406a1b:	jne    406a30 <_start@@Base+0xd0>
  406a1d:	push   rbp
  406a1e:	mov    rbp,rsp
  406a21:	call   4069a0 <_start@@Base+0x40>
  406a26:	mov    BYTE PTR [rip+0x32e23],0x1        # 439850 <__bss_start@@Base>
  406a2d:	pop    rbp
  406a2e:	ret    
  406a2f:	nop
  406a30:	ret    
  406a31:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406a3c:	nop    DWORD PTR [rax+0x0]
  406a40:	endbr64 
  406a44:	jmp    4069d0 <_start@@Base+0x70>
  406a46:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406a50:	sub    rsi,rdi
  406a53:	cmp    rsi,0x8
  406a57:	ja     406a70 <_start@@Base+0x110>
  406a59:	lea    rdx,[rip+0x245a4]        # 42b004 <_IO_stdin_used@@Base+0x4>
  406a60:	movsxd rax,DWORD PTR [rdx+rsi*4]
  406a64:	add    rax,rdx
  406a67:	notrack jmp rax
  406a6a:	nop    WORD PTR [rax+rax*1+0x0]
  406a70:	movsx  rax,BYTE PTR [rdi+0x7]
  406a75:	movsx  rdx,BYTE PTR [rdi+0x6]
  406a7a:	mov    rcx,rdx
  406a7d:	shl    rcx,0x8
  406a81:	or     rcx,rax
  406a84:	movsx  rdx,BYTE PTR [rdi+0x5]
  406a89:	mov    rax,rdx
  406a8c:	shl    rax,0x10
  406a90:	or     rcx,rax
  406a93:	movsx  rdx,BYTE PTR [rdi+0x4]
  406a98:	mov    rax,rdx
  406a9b:	shl    rax,0x18
  406a9f:	or     rax,rcx
  406aa2:	movsx  rdx,BYTE PTR [rdi+0x3]
  406aa7:	shl    rdx,0x20
  406aab:	or     rax,rdx
  406aae:	movsx  rdx,BYTE PTR [rdi+0x2]
  406ab3:	mov    rcx,rdx
  406ab6:	shl    rcx,0x28
  406aba:	or     rcx,rax
  406abd:	movsx  rdx,BYTE PTR [rdi+0x1]
  406ac2:	mov    rax,rdx
  406ac5:	shl    rax,0x30
  406ac9:	or     rcx,rax
  406acc:	movsx  rdx,BYTE PTR [rdi]
  406ad0:	mov    rax,rdx
  406ad3:	shl    rax,0x38
  406ad7:	or     rax,rcx
  406ada:	ret    
  406adb:	nop    DWORD PTR [rax+rax*1+0x0]
  406ae0:	xor    eax,eax
  406ae2:	jmp    406a75 <_start@@Base+0x115>
  406ae4:	nop    DWORD PTR [rax+0x0]
  406ae8:	xor    ecx,ecx
  406aea:	jmp    406acc <_start@@Base+0x16c>
  406aec:	nop    DWORD PTR [rax+0x0]
  406af0:	xor    ecx,ecx
  406af2:	jmp    406abd <_start@@Base+0x15d>
  406af4:	nop    DWORD PTR [rax+0x0]
  406af8:	xor    eax,eax
  406afa:	jmp    406aae <_start@@Base+0x14e>
  406afc:	nop    DWORD PTR [rax+0x0]
  406b00:	xor    eax,eax
  406b02:	jmp    406aa2 <_start@@Base+0x142>
  406b04:	nop    DWORD PTR [rax+0x0]
  406b08:	xor    ecx,ecx
  406b0a:	jmp    406a93 <_start@@Base+0x133>
  406b0c:	nop    DWORD PTR [rax+0x0]
  406b10:	xor    ecx,ecx
  406b12:	jmp    406a84 <_start@@Base+0x124>
  406b17:	nop    WORD PTR [rax+rax*1+0x0]
  406b20:	xor    eax,eax
  406b22:	ret    
  406b23:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406b2e:	xchg   ax,ax
  406b30:	endbr64 
  406b34:	xor    eax,eax
  406b36:	cmp    dil,0x4
  406b3a:	setbe  al
  406b3d:	ret    
  406b3e:	xchg   ax,ax
  406b40:	endbr64 
  406b44:	cmp    dil,0xb
  406b48:	ja     406b68 <_start@@Base+0x208>
  406b4a:	mov    eax,0x1
  406b4f:	cmp    dil,0x8
  406b53:	jae    406b78 <_start@@Base+0x218>
  406b55:	test   dil,dil
  406b58:	je     406b78 <_start@@Base+0x218>
  406b5a:	xor    eax,eax
  406b5c:	cmp    dil,0x2
  406b60:	sete   al
  406b63:	ret    
  406b64:	nop    DWORD PTR [rax+0x0]
  406b68:	xor    eax,eax
  406b6a:	cmp    dil,0xff
  406b6e:	sete   al
  406b71:	ret    
  406b72:	nop    WORD PTR [rax+rax*1+0x0]
  406b78:	ret    
  406b79:	nop    DWORD PTR [rax+0x0]
  406b80:	endbr64 
  406b84:	ret    
  406b85:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406b90:	endbr64 
  406b94:	xor    eax,eax
  406b96:	ret    
  406b97:	nop    WORD PTR [rax+rax*1+0x0]
  406ba0:	endbr64 
  406ba4:	mov    ecx,0x4
  406ba9:	mov    edx,0x4
  406bae:	xor    esi,esi
  406bb0:	jmp    41a510 <flatcc_verify_field@@Base>
  406bb5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406bc0:	endbr64 
  406bc4:	push   rbp
  406bc5:	lea    r9,[rip+0x134]        # 406d00 <_start@@Base+0x3a0>
  406bcc:	mov    rbp,rsi
  406bcf:	push   rbx
  406bd0:	mov    r8d,0x15
  406bd6:	mov    rbx,rdi
  406bd9:	sub    rsp,0x8
  406bdd:	lea    rcx,[rip+0x24578]        # 42b15c <_IO_stdin_used@@Base+0x15c>
  406be4:	xor    edx,edx
  406be6:	call   429ac0 <flatcc_json_printer_table_field@@Base>
  406beb:	mov    rsi,rbp
  406bee:	mov    rdi,rbx
  406bf1:	lea    r9,[rip+0xb8]        # 406cb0 <_start@@Base+0x350>
  406bf8:	mov    r8d,0x16
  406bfe:	lea    rcx,[rip+0x2456d]        # 42b172 <_IO_stdin_used@@Base+0x172>
  406c05:	mov    edx,0x1
  406c0a:	call   429ac0 <flatcc_json_printer_table_field@@Base>
  406c0f:	add    rsp,0x8
  406c13:	mov    rdi,rbx
  406c16:	pop    rbx
  406c17:	mov    rsi,rbp
  406c1a:	lea    r9,[rip+0x3f]        # 406c60 <_start@@Base+0x300>
  406c21:	mov    r8d,0x16
  406c27:	lea    rcx,[rip+0x2455b]        # 42b189 <_IO_stdin_used@@Base+0x189>
  406c2e:	mov    edx,0x2
  406c33:	pop    rbp
  406c34:	jmp    429ac0 <flatcc_json_printer_table_field@@Base>
  406c39:	nop    DWORD PTR [rax+0x0]
  406c40:	endbr64 
  406c44:	xor    r9d,r9d
  406c47:	mov    r8d,0x13
  406c4d:	lea    rcx,[rip+0x2454c]        # 42b1a0 <_IO_stdin_used@@Base+0x1a0>
  406c54:	xor    edx,edx
  406c56:	jmp    4227f0 <flatcc_json_printer_int32_field@@Base>
  406c5b:	nop    DWORD PTR [rax+rax*1+0x0]
  406c60:	endbr64 
  406c64:	push   rbp
  406c65:	xor    r9d,r9d
  406c68:	mov    r8d,0xf
  406c6e:	push   rbx
  406c6f:	lea    rcx,[rip+0x2453e]        # 42b1b4 <_IO_stdin_used@@Base+0x1b4>
  406c76:	xor    edx,edx
  406c78:	sub    rsp,0x8
  406c7c:	mov    rbx,rdi
  406c7f:	mov    rbp,rsi
  406c82:	call   4229a0 <flatcc_json_printer_int64_field@@Base>
  406c87:	add    rsp,0x8
  406c8b:	mov    rdi,rbx
  406c8e:	pop    rbx
  406c8f:	mov    rsi,rbp
  406c92:	xor    r9d,r9d
  406c95:	mov    r8d,0x15
  406c9b:	lea    rcx,[rip+0x24522]        # 42b1c4 <_IO_stdin_used@@Base+0x1c4>
  406ca2:	mov    edx,0x1
  406ca7:	pop    rbp
  406ca8:	jmp    422160 <flatcc_json_printer_uint32_field@@Base>
  406cad:	nop    DWORD PTR [rax]
  406cb0:	endbr64 
  406cb4:	push   rbp
  406cb5:	xor    r9d,r9d
  406cb8:	mov    r8d,0xf
  406cbe:	push   rbx
  406cbf:	lea    rcx,[rip+0x244ee]        # 42b1b4 <_IO_stdin_used@@Base+0x1b4>
  406cc6:	xor    edx,edx
  406cc8:	sub    rsp,0x8
  406ccc:	mov    rbx,rdi
  406ccf:	mov    rbp,rsi
  406cd2:	call   4229a0 <flatcc_json_printer_int64_field@@Base>
  406cd7:	add    rsp,0x8
  406cdb:	mov    rdi,rbx
  406cde:	pop    rbx
  406cdf:	mov    rsi,rbp
  406ce2:	xor    r9d,r9d
  406ce5:	mov    r8d,0x10
  406ceb:	lea    rcx,[rip+0x244e8]        # 42b1da <_IO_stdin_used@@Base+0x1da>
  406cf2:	mov    edx,0x1
  406cf7:	pop    rbp
  406cf8:	jmp    422160 <flatcc_json_printer_uint32_field@@Base>
  406cfd:	nop    DWORD PTR [rax]
  406d00:	endbr64 
  406d04:	push   rbp
  406d05:	mov    r8d,0x4
  406d0b:	mov    rbp,rsi
  406d0e:	push   rbx
  406d0f:	lea    rcx,[rip+0x244d5]        # 42b1eb <_IO_stdin_used@@Base+0x1eb>
  406d16:	mov    rbx,rdi
  406d19:	sub    rsp,0x8
  406d1d:	xor    edx,edx
  406d1f:	call   421970 <flatcc_json_printer_string_field@@Base>
  406d24:	xor    r9d,r9d
  406d27:	mov    rsi,rbp
  406d2a:	mov    rdi,rbx
  406d2d:	mov    r8d,0x9
  406d33:	lea    rcx,[rip+0x244b6]        # 42b1f0 <_IO_stdin_used@@Base+0x1f0>
  406d3a:	mov    edx,0x1
  406d3f:	call   422160 <flatcc_json_printer_uint32_field@@Base>
  406d44:	mov    rsi,rbp
  406d47:	mov    rdi,rbx
  406d4a:	mov    r8d,0x4
  406d50:	lea    rcx,[rip+0x244a3]        # 42b1fa <_IO_stdin_used@@Base+0x1fa>
  406d57:	mov    edx,0x2
  406d5c:	call   421970 <flatcc_json_printer_string_field@@Base>
  406d61:	xor    r9d,r9d
  406d64:	mov    rsi,rbp
  406d67:	mov    rdi,rbx
  406d6a:	mov    r8d,0x8
  406d70:	lea    rcx,[rip+0x24488]        # 42b1ff <_IO_stdin_used@@Base+0x1ff>
  406d77:	mov    edx,0x3
  406d7c:	call   4229a0 <flatcc_json_printer_int64_field@@Base>
  406d81:	mov    rsi,rbp
  406d84:	mov    rdi,rbx
  406d87:	mov    r8d,0x4
  406d8d:	lea    rcx,[rip+0x24474]        # 42b208 <_IO_stdin_used@@Base+0x208>
  406d94:	mov    edx,0x4
  406d99:	call   421970 <flatcc_json_printer_string_field@@Base>
  406d9e:	mov    rsi,rbp
  406da1:	mov    rdi,rbx
  406da4:	xor    r9d,r9d
  406da7:	mov    r8d,0x8
  406dad:	lea    rcx,[rip+0x24459]        # 42b20d <_IO_stdin_used@@Base+0x20d>
  406db4:	mov    edx,0x5
  406db9:	call   4229a0 <flatcc_json_printer_int64_field@@Base>
  406dbe:	mov    rsi,rbp
  406dc1:	mov    rdi,rbx
  406dc4:	xor    r9d,r9d
  406dc7:	mov    r8d,0x9
  406dcd:	lea    rcx,[rip+0x24442]        # 42b216 <_IO_stdin_used@@Base+0x216>
  406dd4:	mov    edx,0x6
  406dd9:	call   422160 <flatcc_json_printer_uint32_field@@Base>
  406dde:	mov    rsi,rbp
  406de1:	mov    rdi,rbx
  406de4:	xor    r9d,r9d
  406de7:	mov    r8d,0x8
  406ded:	lea    rcx,[rip+0x2442c]        # 42b220 <_IO_stdin_used@@Base+0x220>
  406df4:	mov    edx,0x7
  406df9:	call   4229a0 <flatcc_json_printer_int64_field@@Base>
  406dfe:	add    rsp,0x8
  406e02:	mov    rdi,rbx
  406e05:	pop    rbx
  406e06:	mov    rsi,rbp
  406e09:	xor    r9d,r9d
  406e0c:	mov    r8d,0x9
  406e12:	lea    rcx,[rip+0x24410]        # 42b229 <_IO_stdin_used@@Base+0x229>
  406e19:	mov    edx,0x8
  406e1e:	pop    rbp
  406e1f:	jmp    422160 <flatcc_json_printer_uint32_field@@Base>
  406e24:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406e2f:	nop
  406e30:	endbr64 
  406e34:	push   r12
  406e36:	xor    edx,edx
  406e38:	lea    r9,[rip+0xb21]        # 407960 <_start@@Base+0x1000>
  406e3f:	push   rbp
  406e40:	mov    r8d,0x3
  406e46:	mov    rbp,rsi
  406e49:	push   rbx
  406e4a:	lea    rcx,[rip+0x243e2]        # 42b233 <_IO_stdin_used@@Base+0x233>
  406e51:	mov    rbx,rdi
  406e54:	call   42a3e0 <flatcc_json_printer_struct_field@@Base>
  406e59:	mov    rsi,rbp
  406e5c:	mov    rdi,rbx
  406e5f:	mov    r9d,0x96
  406e65:	mov    r8d,0x4
  406e6b:	lea    rcx,[rip+0x243c5]        # 42b237 <_IO_stdin_used@@Base+0x237>
  406e72:	mov    edx,0x1
  406e77:	call   422630 <flatcc_json_printer_int16_field@@Base>
  406e7c:	mov    r9d,0x64
  406e82:	mov    rsi,rbp
  406e85:	mov    rdi,rbx
  406e88:	mov    r8d,0x2
  406e8e:	lea    rcx,[rip+0x243a7]        # 42b23c <_IO_stdin_used@@Base+0x23c>
  406e95:	mov    edx,0x2
  406e9a:	call   422630 <flatcc_json_printer_int16_field@@Base>
  406e9f:	mov    rsi,rbp
  406ea2:	mov    rdi,rbx
  406ea5:	mov    r8d,0x4
  406eab:	lea    rcx,[rip+0x2438d]        # 42b23f <_IO_stdin_used@@Base+0x23f>
  406eb2:	mov    edx,0x3
  406eb7:	call   421970 <flatcc_json_printer_string_field@@Base>
  406ebc:	mov    rsi,rbp
  406ebf:	mov    rdi,rbx
  406ec2:	mov    r8d,0x9
  406ec8:	lea    rcx,[rip+0x24375]        # 42b244 <_IO_stdin_used@@Base+0x244>
  406ecf:	mov    edx,0x5
  406ed4:	call   425ce0 <flatcc_json_printer_uint8_vector_field@@Base>
  406ed9:	sub    rsp,0x8
  406edd:	lea    rax,[rip+0x9ac]        # 407890 <_start@@Base+0xf30>
  406ee4:	push   rax
  406ee5:	mov    rsi,rbp
  406ee8:	mov    rdi,rbx
  406eeb:	mov    r9d,0x8
  406ef1:	mov    r8d,0x5
  406ef7:	lea    rcx,[rip+0x24350]        # 42b24e <_IO_stdin_used@@Base+0x24e>
  406efe:	mov    edx,0x6
  406f03:	call   423770 <flatcc_json_printer_int8_enum_field@@Base>
  406f08:	lea    rax,[rip+0x571]        # 407480 <_start@@Base+0xb20>
  406f0f:	mov    rsi,rbp
  406f12:	mov    rdi,rbx
  406f15:	lea    r9,[rip+0x1fd4]        # 408ef0 <_start@@Base+0x2590>
  406f1c:	mov    r8d,0x4
  406f22:	lea    rcx,[rip+0x2449d]        # 42b3c6 <_IO_stdin_used@@Base+0x3c6>
  406f29:	mov    edx,0x8
  406f2e:	mov    QWORD PTR [rsp],rax
  406f32:	lea    r12,[rip+0x4e7]        # 407420 <_start@@Base+0xac0>
  406f39:	call   429d70 <flatcc_json_printer_union_field@@Base>
  406f3e:	mov    r9d,0x4
  406f44:	mov    rsi,rbp
  406f47:	mov    rdi,rbx
  406f4a:	mov    r8d,0x5
  406f50:	lea    rcx,[rip+0x242fd]        # 42b254 <_IO_stdin_used@@Base+0x254>
  406f57:	mov    edx,0x9
  406f5c:	mov    QWORD PTR [rsp],r12
  406f60:	call   428c40 <flatcc_json_printer_struct_vector_field@@Base>
  406f65:	mov    rsi,rbp
  406f68:	mov    rdi,rbx
  406f6b:	mov    r8d,0x11
  406f71:	lea    rcx,[rip+0x242e2]        # 42b25a <_IO_stdin_used@@Base+0x25a>
  406f78:	mov    edx,0xa
  406f7d:	call   428f40 <flatcc_json_printer_string_vector_field@@Base>
  406f82:	mov    rsi,rbp
  406f85:	mov    rdi,rbx
  406f88:	lea    r9,[rip+0xfffffffffffffea1]        # 406e30 <_start@@Base+0x4d0>
  406f8f:	mov    r8d,0x11
  406f95:	lea    rcx,[rip+0x242d0]        # 42b26c <_IO_stdin_used@@Base+0x26c>
  406f9c:	mov    edx,0xb
  406fa1:	call   4292b0 <flatcc_json_printer_table_vector_field@@Base>
  406fa6:	mov    rsi,rbp
  406fa9:	mov    rdi,rbx
  406fac:	lea    r9,[rip+0xfffffffffffffe7d]        # 406e30 <_start@@Base+0x4d0>
  406fb3:	mov    r8d,0x5
  406fb9:	lea    rcx,[rip+0x242be]        # 42b27e <_IO_stdin_used@@Base+0x27e>
  406fc0:	mov    edx,0xc
  406fc5:	call   429ac0 <flatcc_json_printer_table_field@@Base>
  406fca:	lea    rax,[rip+0xfffffffffffffe5f]        # 406e30 <_start@@Base+0x4d0>
  406fd1:	xor    r9d,r9d
  406fd4:	mov    rsi,rbp
  406fd7:	mov    rdi,rbx
  406fda:	mov    r8d,0x14
  406fe0:	lea    rcx,[rip+0x2429d]        # 42b284 <_IO_stdin_used@@Base+0x284>
  406fe7:	mov    edx,0xd
  406fec:	mov    QWORD PTR [rsp],rax
  406ff0:	call   42a980 <flatcc_json_printer_table_as_nested_root@@Base>
  406ff5:	mov    rsi,rbp
  406ff8:	mov    rdi,rbx
  406ffb:	lea    r9,[rip+0x3ae]        # 4073b0 <_start@@Base+0xa50>
  407002:	mov    r8d,0x9
  407008:	lea    rcx,[rip+0x2428a]        # 42b299 <_IO_stdin_used@@Base+0x299>
  40700f:	mov    edx,0xe
  407014:	call   429ac0 <flatcc_json_printer_table_field@@Base>
  407019:	mov    rsi,rbp
  40701c:	mov    rdi,rbx
  40701f:	mov    r9d,0x1
  407025:	mov    r8d,0x8
  40702b:	lea    rcx,[rip+0x24271]        # 42b2a3 <_IO_stdin_used@@Base+0x2a3>
  407032:	mov    edx,0xf
  407037:	call   422b50 <flatcc_json_printer_bool_field@@Base>
  40703c:	xor    r9d,r9d
  40703f:	mov    rsi,rbp
  407042:	mov    rdi,rbx
  407045:	mov    r8d,0x10
  40704b:	lea    rcx,[rip+0x2425a]        # 42b2ac <_IO_stdin_used@@Base+0x2ac>
  407052:	mov    edx,0x10
  407057:	call   4227f0 <flatcc_json_printer_int32_field@@Base>
  40705c:	xor    r9d,r9d
  40705f:	mov    rsi,rbp
  407062:	mov    rdi,rbx
  407065:	mov    r8d,0x10
  40706b:	lea    rcx,[rip+0x2424b]        # 42b2bd <_IO_stdin_used@@Base+0x2bd>
  407072:	mov    edx,0x11
  407077:	call   422160 <flatcc_json_printer_uint32_field@@Base>
  40707c:	xor    r9d,r9d
  40707f:	mov    rsi,rbp
  407082:	mov    rdi,rbx
  407085:	mov    r8d,0x10
  40708b:	lea    rcx,[rip+0x2423c]        # 42b2ce <_IO_stdin_used@@Base+0x2ce>
  407092:	mov    edx,0x12
  407097:	call   4229a0 <flatcc_json_printer_int64_field@@Base>
  40709c:	xor    r9d,r9d
  40709f:	mov    rsi,rbp
  4070a2:	mov    rdi,rbx
  4070a5:	mov    r8d,0x10
  4070ab:	lea    rcx,[rip+0x2422d]        # 42b2df <_IO_stdin_used@@Base+0x2df>
  4070b2:	mov    edx,0x13
  4070b7:	call   4222f0 <flatcc_json_printer_uint64_field@@Base>
  4070bc:	xor    r9d,r9d
  4070bf:	mov    rsi,rbp
  4070c2:	mov    rdi,rbx
  4070c5:	mov    r8d,0x11
  4070cb:	lea    rcx,[rip+0x2421e]        # 42b2f0 <_IO_stdin_used@@Base+0x2f0>
  4070d2:	mov    edx,0x14
  4070d7:	call   4227f0 <flatcc_json_printer_int32_field@@Base>
  4070dc:	xor    r9d,r9d
  4070df:	mov    rsi,rbp
  4070e2:	mov    rdi,rbx
  4070e5:	mov    r8d,0x11
  4070eb:	lea    rcx,[rip+0x24210]        # 42b302 <_IO_stdin_used@@Base+0x302>
  4070f2:	mov    edx,0x15
  4070f7:	call   422160 <flatcc_json_printer_uint32_field@@Base>
  4070fc:	xor    r9d,r9d
  4070ff:	mov    rsi,rbp
  407102:	mov    rdi,rbx
  407105:	mov    r8d,0x11
  40710b:	lea    rcx,[rip+0x24202]        # 42b314 <_IO_stdin_used@@Base+0x314>
  407112:	mov    edx,0x16
  407117:	call   4229a0 <flatcc_json_printer_int64_field@@Base>
  40711c:	xor    r9d,r9d
  40711f:	mov    rsi,rbp
  407122:	mov    rdi,rbx
  407125:	mov    r8d,0x11
  40712b:	lea    rcx,[rip+0x241f4]        # 42b326 <_IO_stdin_used@@Base+0x326>
  407132:	mov    edx,0x17
  407137:	call   4222f0 <flatcc_json_printer_uint64_field@@Base>
  40713c:	mov    rsi,rbp
  40713f:	mov    rdi,rbx
  407142:	mov    r8d,0x10
  407148:	lea    rcx,[rip+0x241e9]        # 42b338 <_IO_stdin_used@@Base+0x338>
  40714f:	mov    edx,0x18
  407154:	call   427000 <flatcc_json_printer_bool_vector_field@@Base>
  407159:	vmovss xmm0,DWORD PTR [rip+0x270b7]        # 42e218 <_IO_stdin_used@@Base+0x3218>
  407161:	mov    rsi,rbp
  407164:	mov    rdi,rbx
  407167:	mov    r8d,0x5
  40716d:	lea    rcx,[rip+0x241d5]        # 42b349 <_IO_stdin_used@@Base+0x349>
  407174:	mov    edx,0x19
  407179:	call   422cf0 <flatcc_json_printer_float_field@@Base>
  40717e:	vmovss xmm0,DWORD PTR [rip+0x27096]        # 42e21c <_IO_stdin_used@@Base+0x321c>
  407186:	mov    rsi,rbp
  407189:	mov    rdi,rbx
  40718c:	mov    r8d,0x6
  407192:	lea    rcx,[rip+0x241b6]        # 42b34f <_IO_stdin_used@@Base+0x34f>
  407199:	mov    edx,0x1a
  40719e:	call   422cf0 <flatcc_json_printer_float_field@@Base>
  4071a3:	vxorps xmm0,xmm0,xmm0
  4071a7:	mov    rsi,rbp
  4071aa:	mov    rdi,rbx
  4071ad:	mov    r8d,0x6
  4071b3:	lea    rcx,[rip+0x2419c]        # 42b356 <_IO_stdin_used@@Base+0x356>
  4071ba:	mov    edx,0x1b
  4071bf:	call   422cf0 <flatcc_json_printer_float_field@@Base>
  4071c4:	mov    rsi,rbp
  4071c7:	mov    rdi,rbx
  4071ca:	mov    r8d,0x12
  4071d0:	lea    rcx,[rip+0x24186]        # 42b35d <_IO_stdin_used@@Base+0x35d>
  4071d7:	mov    edx,0x1c
  4071dc:	call   428f40 <flatcc_json_printer_string_vector_field@@Base>
  4071e1:	lea    rax,[rip+0x168]        # 407350 <_start@@Base+0x9f0>
  4071e8:	mov    r9d,0x8
  4071ee:	mov    rsi,rbp
  4071f1:	mov    rdi,rbx
  4071f4:	mov    r8d,0x17
  4071fa:	lea    rcx,[rip+0x2416f]        # 42b370 <_IO_stdin_used@@Base+0x370>
  407201:	mov    edx,0x1d
  407206:	mov    QWORD PTR [rsp],rax
  40720a:	call   428c40 <flatcc_json_printer_struct_vector_field@@Base>
  40720f:	mov    rsi,rbp
  407212:	mov    rdi,rbx
  407215:	mov    r8d,0x4
  40721b:	lea    rcx,[rip+0x24166]        # 42b388 <_IO_stdin_used@@Base+0x388>
  407222:	mov    edx,0x1e
  407227:	call   425ce0 <flatcc_json_printer_uint8_vector_field@@Base>
  40722c:	mov    r9d,0x4
  407232:	mov    rsi,rbp
  407235:	mov    rdi,rbx
  407238:	mov    r8d,0x5
  40723e:	lea    rcx,[rip+0x24148]        # 42b38d <_IO_stdin_used@@Base+0x38d>
  407245:	mov    edx,0x1f
  40724a:	mov    QWORD PTR [rsp],r12
  40724e:	call   428c40 <flatcc_json_printer_struct_vector_field@@Base>
  407253:	mov    rsi,rbp
  407256:	mov    rdi,rbx
  407259:	mov    r8d,0xf
  40725f:	lea    rcx,[rip+0x2412d]        # 42b393 <_IO_stdin_used@@Base+0x393>
  407266:	mov    edx,0x20
  40726b:	call   426da0 <flatcc_json_printer_int64_vector_field@@Base>
  407270:	mov    rsi,rbp
  407273:	mov    rdi,rbx
  407276:	mov    r8d,0x11
  40727c:	lea    rcx,[rip+0x24120]        # 42b3a3 <_IO_stdin_used@@Base+0x3a3>
  407283:	mov    edx,0x21
  407288:	call   4274f0 <flatcc_json_printer_double_vector_field@@Base>
  40728d:	mov    rsi,rbp
  407290:	mov    rdi,rbx
  407293:	lea    r9,[rip+0xfffffffffffff8e6]        # 406b80 <_start@@Base+0x220>
  40729a:	mov    r8d,0x15
  4072a0:	lea    rcx,[rip+0x2410e]        # 42b3b5 <_IO_stdin_used@@Base+0x3b5>
  4072a7:	mov    edx,0x22
  4072ac:	call   429ac0 <flatcc_json_printer_table_field@@Base>
  4072b1:	pop    rax
  4072b2:	pop    rdx
  4072b3:	mov    rdi,rbx
  4072b6:	pop    rbx
  4072b7:	mov    rsi,rbp
  4072ba:	pop    rbp
  4072bb:	lea    r9,[rip+0x1e]        # 4072e0 <_start@@Base+0x980>
  4072c2:	mov    r8d,0xa
  4072c8:	lea    rcx,[rip+0x240fc]        # 42b3cb <_IO_stdin_used@@Base+0x3cb>
  4072cf:	mov    edx,0x23
  4072d4:	pop    r12
  4072d6:	jmp    429ac0 <flatcc_json_printer_table_field@@Base>
  4072db:	nop    DWORD PTR [rax+rax*1+0x0]
  4072e0:	endbr64 
  4072e4:	push   rbp
  4072e5:	xor    r9d,r9d
  4072e8:	mov    rbp,rsi
  4072eb:	push   rbx
  4072ec:	mov    r8d,0x4
  4072f2:	mov    rbx,rdi
  4072f5:	sub    rsp,0x8
  4072f9:	lea    rcx,[rip+0x240d9]        # 42b3d9 <_IO_stdin_used@@Base+0x3d9>
  407300:	xor    edx,edx
  407302:	call   421b10 <flatcc_json_printer_uint8_vector_base64_field@@Base>
  407307:	mov    rsi,rbp
  40730a:	mov    rdi,rbx
  40730d:	mov    r9d,0x1
  407313:	mov    r8d,0x7
  407319:	lea    rcx,[rip+0x240b6]        # 42b3d6 <_IO_stdin_used@@Base+0x3d6>
  407320:	mov    edx,0x1
  407325:	call   421b10 <flatcc_json_printer_uint8_vector_base64_field@@Base>
  40732a:	add    rsp,0x8
  40732e:	mov    rdi,rbx
  407331:	pop    rbx
  407332:	mov    rsi,rbp
  407335:	xor    r9d,r9d
  407338:	mov    r8d,0x6
  40733e:	lea    rcx,[rip+0x24099]        # 42b3de <_IO_stdin_used@@Base+0x3de>
  407345:	mov    edx,0x2
  40734a:	pop    rbp
  40734b:	jmp    421b10 <flatcc_json_printer_uint8_vector_base64_field@@Base>
  407350:	endbr64 
  407354:	push   rbp
  407355:	mov    rdx,rsi
  407358:	mov    rbp,rsi
  40735b:	push   rbx
  40735c:	mov    r9d,0x2
  407362:	lea    r8,[rip+0x2407c]        # 42b3e5 <_IO_stdin_used@@Base+0x3e5>
  407369:	sub    rsp,0x8
  40736d:	xor    ecx,ecx
  40736f:	xor    esi,esi
  407371:	mov    rbx,rdi
  407374:	call   424380 <flatcc_json_printer_uint32_struct_field@@Base>
  407379:	add    rsp,0x8
  40737d:	mov    rdi,rbx
  407380:	pop    rbx
  407381:	mov    rdx,rbp
  407384:	mov    r9d,0x8
  40738a:	lea    r8,[rip+0x24057]        # 42b3e8 <_IO_stdin_used@@Base+0x3e8>
  407391:	mov    ecx,0x4
  407396:	mov    esi,0x1
  40739b:	pop    rbp
  40739c:	jmp    424380 <flatcc_json_printer_uint32_struct_field@@Base>
  4073a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4073ac:	nop    DWORD PTR [rax+0x0]
  4073b0:	endbr64 
  4073b4:	push   rbp
  4073b5:	mov    r8d,0x2
  4073bb:	mov    rbp,rsi
  4073be:	push   rbx
  4073bf:	lea    rcx,[rip+0x2401f]        # 42b3e5 <_IO_stdin_used@@Base+0x3e5>
  4073c6:	mov    rbx,rdi
  4073c9:	sub    rsp,0x8
  4073cd:	xor    edx,edx
  4073cf:	call   421970 <flatcc_json_printer_string_field@@Base>
  4073d4:	mov    rsi,rbp
  4073d7:	mov    rdi,rbx
  4073da:	xor    r9d,r9d
  4073dd:	mov    r8d,0x3
  4073e3:	lea    rcx,[rip+0x24007]        # 42b3f1 <_IO_stdin_used@@Base+0x3f1>
  4073ea:	mov    edx,0x1
  4073ef:	call   4229a0 <flatcc_json_printer_int64_field@@Base>
  4073f4:	add    rsp,0x8
  4073f8:	mov    rdi,rbx
  4073fb:	pop    rbx
  4073fc:	mov    rsi,rbp
  4073ff:	xor    r9d,r9d
  407402:	mov    r8d,0x5
  407408:	lea    rcx,[rip+0x2848c]        # 42f89b <flatcc_builder_padding_base@@Base+0xb7b>
  40740f:	mov    edx,0x2
  407414:	pop    rbp
  407415:	jmp    421fc0 <flatcc_json_printer_uint16_field@@Base>
  40741a:	nop    WORD PTR [rax+rax*1+0x0]
  407420:	endbr64 
  407424:	push   rbp
  407425:	mov    rdx,rsi
  407428:	mov    rbp,rsi
  40742b:	push   rbx
  40742c:	mov    r9d,0x1
  407432:	lea    r8,[rip+0x23ec7]        # 42b300 <_IO_stdin_used@@Base+0x300>
  407439:	sub    rsp,0x8
  40743d:	xor    ecx,ecx
  40743f:	xor    esi,esi
  407441:	mov    rbx,rdi
  407444:	call   424760 <flatcc_json_printer_int16_struct_field@@Base>
  407449:	add    rsp,0x8
  40744d:	mov    rdi,rbx
  407450:	pop    rbx
  407451:	mov    rdx,rbp
  407454:	mov    r9d,0x1
  40745a:	lea    r8,[rip+0x23d9c]        # 42b1fd <_IO_stdin_used@@Base+0x1fd>
  407461:	mov    ecx,0x2
  407466:	mov    esi,0x1
  40746b:	pop    rbp
  40746c:	jmp    424600 <flatcc_json_printer_int8_struct_field@@Base>
  407471:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40747c:	nop    DWORD PTR [rax+0x0]
  407480:	endbr64 
  407484:	movzx  eax,BYTE PTR [rsi+0xc]
  407488:	cmp    al,0x2
  40748a:	je     4074e0 <_start@@Base+0xb80>
  40748c:	jbe    4074a8 <_start@@Base+0xb48>
  40748e:	cmp    al,0x3
  407490:	je     4074d0 <_start@@Base+0xb70>
  407492:	cmp    al,0x4
  407494:	jne    4074c0 <_start@@Base+0xb60>
  407496:	lea    rdx,[rip+0x53]        # 4074f0 <_start@@Base+0xb90>
  40749d:	jmp    42a040 <flatcc_json_printer_union_table@@Base>
  4074a2:	nop    WORD PTR [rax+rax*1+0x0]
  4074a8:	cmp    al,0x1
  4074aa:	jne    4074c8 <_start@@Base+0xb68>
  4074ac:	lea    rdx,[rip+0xfffffffffffff97d]        # 406e30 <_start@@Base+0x4d0>
  4074b3:	jmp    42a040 <flatcc_json_printer_union_table@@Base>
  4074b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4074c0:	ret    
  4074c1:	nop    DWORD PTR [rax+0x0]
  4074c8:	ret    
  4074c9:	nop    DWORD PTR [rax+0x0]
  4074d0:	lea    rdx,[rip+0x1e89]        # 409360 <_start@@Base+0x2a00>
  4074d7:	jmp    42a040 <flatcc_json_printer_union_table@@Base>
  4074dc:	nop    DWORD PTR [rax+0x0]
  4074e0:	lea    rdx,[rip+0x2f9]        # 4077e0 <_start@@Base+0xe80>
  4074e7:	jmp    42a040 <flatcc_json_printer_union_table@@Base>
  4074ec:	nop    DWORD PTR [rax+0x0]
  4074f0:	endbr64 
  4074f4:	push   rbp
  4074f5:	lea    r9,[rip+0xfffffffffffff6c4]        # 406bc0 <_start@@Base+0x260>
  4074fc:	mov    rbp,rsi
  4074ff:	push   rbx
  407500:	mov    r8d,0x6
  407506:	mov    rbx,rdi
  407509:	sub    rsp,0x8
  40750d:	lea    rcx,[rip+0x23ee1]        # 42b3f5 <_IO_stdin_used@@Base+0x3f5>
  407514:	xor    edx,edx
  407516:	call   429ac0 <flatcc_json_printer_table_field@@Base>
  40751b:	mov    rsi,rbp
  40751e:	mov    rdi,rbx
  407521:	lea    r9,[rip+0x58]        # 407580 <_start@@Base+0xc20>
  407528:	mov    r8d,0x5
  40752e:	lea    rcx,[rip+0x23ec7]        # 42b3fc <_IO_stdin_used@@Base+0x3fc>
  407535:	mov    edx,0x1
  40753a:	call   429ac0 <flatcc_json_printer_table_field@@Base>
  40753f:	sub    rsp,0x8
  407543:	lea    rax,[rip+0xffffffffffffff36]        # 407480 <_start@@Base+0xb20>
  40754a:	push   rax
  40754b:	mov    rsi,rbp
  40754e:	mov    rdi,rbx
  407551:	lea    r9,[rip+0x1998]        # 408ef0 <_start@@Base+0x2590>
  407558:	mov    r8d,0x7
  40755e:	lea    rcx,[rip+0x23e9d]        # 42b402 <_IO_stdin_used@@Base+0x402>
  407565:	mov    edx,0x3
  40756a:	call   429720 <flatcc_json_printer_union_vector_field@@Base>
  40756f:	add    rsp,0x18
  407573:	pop    rbx
  407574:	pop    rbp
  407575:	ret    
  407576:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407580:	endbr64 
  407584:	push   r12
  407586:	lea    r12,[rip+0xd3]        # 407660 <_start@@Base+0xd00>
  40758d:	lea    r9,[rip+0x17c]        # 407710 <_start@@Base+0xdb0>
  407594:	push   rbp
  407595:	mov    r8d,0xe
  40759b:	mov    rbp,rsi
  40759e:	push   rbx
  40759f:	lea    rcx,[rip+0x23e64]        # 42b40a <_IO_stdin_used@@Base+0x40a>
  4075a6:	mov    rbx,rdi
  4075a9:	sub    rsp,0x8
  4075ad:	push   r12
  4075af:	mov    edx,0x1
  4075b4:	call   429d70 <flatcc_json_printer_union_field@@Base>
  4075b9:	mov    rsi,rbp
  4075bc:	mov    rdi,rbx
  4075bf:	lea    r9,[rip+0x14a]        # 407710 <_start@@Base+0xdb0>
  4075c6:	mov    r8d,0xa
  4075cc:	lea    rcx,[rip+0x23e46]        # 42b419 <_IO_stdin_used@@Base+0x419>
  4075d3:	mov    edx,0x3
  4075d8:	mov    QWORD PTR [rsp],r12
  4075dc:	call   429d70 <flatcc_json_printer_union_field@@Base>
  4075e1:	mov    rsi,rbp
  4075e4:	mov    rdi,rbx
  4075e7:	lea    r9,[rip+0x122]        # 407710 <_start@@Base+0xdb0>
  4075ee:	mov    r8d,0x9
  4075f4:	lea    rcx,[rip+0x23e29]        # 42b424 <_IO_stdin_used@@Base+0x424>
  4075fb:	mov    edx,0x5
  407600:	mov    QWORD PTR [rsp],r12
  407604:	call   429d70 <flatcc_json_printer_union_field@@Base>
  407609:	mov    rsi,rbp
  40760c:	mov    rdi,rbx
  40760f:	lea    r9,[rip+0xfa]        # 407710 <_start@@Base+0xdb0>
  407616:	mov    r8d,0x5
  40761c:	lea    rcx,[rip+0x23e0b]        # 42b42e <_IO_stdin_used@@Base+0x42e>
  407623:	mov    edx,0x7
  407628:	mov    QWORD PTR [rsp],r12
  40762c:	call   429d70 <flatcc_json_printer_union_field@@Base>
  407631:	mov    edx,0x9
  407636:	mov    rsi,rbp
  407639:	mov    rdi,rbx
  40763c:	lea    r9,[rip+0xcd]        # 407710 <_start@@Base+0xdb0>
  407643:	mov    r8d,0xa
  407649:	lea    rcx,[rip+0x23de4]        # 42b434 <_IO_stdin_used@@Base+0x434>
  407650:	mov    QWORD PTR [rsp],r12
  407654:	call   429720 <flatcc_json_printer_union_vector_field@@Base>
  407659:	pop    rax
  40765a:	pop    rdx
  40765b:	pop    rbx
  40765c:	pop    rbp
  40765d:	pop    r12
  40765f:	ret    
  407660:	endbr64 
  407664:	movzx  eax,BYTE PTR [rsi+0xc]
  407668:	cmp    al,0xa
  40766a:	ja     407688 <_start@@Base+0xd28>
  40766c:	cmp    al,0x9
  40766e:	jae    4076a8 <_start@@Base+0xd48>
  407670:	cmp    al,0x2
  407672:	je     4076b8 <_start@@Base+0xd58>
  407674:	cmp    al,0x8
  407676:	jne    407698 <_start@@Base+0xd38>
  407678:	lea    rdx,[rip+0x71]        # 4076f0 <_start@@Base+0xd90>
  40767f:	jmp    42a150 <flatcc_json_printer_union_struct@@Base>
  407684:	nop    DWORD PTR [rax+0x0]
  407688:	cmp    al,0xb
  40768a:	je     407690 <_start@@Base+0xd30>
  40768c:	cmp    al,0xff
  40768e:	jne    4076a0 <_start@@Base+0xd40>
  407690:	jmp    42a1f0 <flatcc_json_printer_union_string@@Base>
  407695:	nop    DWORD PTR [rax]
  407698:	ret    
  407699:	nop    DWORD PTR [rax+0x0]
  4076a0:	ret    
  4076a1:	nop    DWORD PTR [rax+0x0]
  4076a8:	lea    rdx,[rip+0x21]        # 4076d0 <_start@@Base+0xd70>
  4076af:	jmp    42a150 <flatcc_json_printer_union_struct@@Base>
  4076b4:	nop    DWORD PTR [rax+0x0]
  4076b8:	lea    rdx,[rip+0xfffffffffffff581]        # 406c40 <_start@@Base+0x2e0>
  4076bf:	jmp    42a040 <flatcc_json_printer_union_table@@Base>
  4076c4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4076cf:	nop
  4076d0:	endbr64 
  4076d4:	mov    rdx,rsi
  4076d7:	mov    r9d,0xa
  4076dd:	lea    r8,[rip+0x23d5b]        # 42b43f <_IO_stdin_used@@Base+0x43f>
  4076e4:	xor    ecx,ecx
  4076e6:	xor    esi,esi
  4076e8:	jmp    4248c0 <flatcc_json_printer_int32_struct_field@@Base>
  4076ed:	nop    DWORD PTR [rax]
  4076f0:	endbr64 
  4076f4:	mov    rdx,rsi
  4076f7:	mov    r9d,0xb
  4076fd:	lea    r8,[rip+0x23d46]        # 42b44a <_IO_stdin_used@@Base+0x44a>
  407704:	xor    ecx,ecx
  407706:	xor    esi,esi
  407708:	jmp    424240 <flatcc_json_printer_uint16_struct_field@@Base>
  40770d:	nop    DWORD PTR [rax]
  407710:	endbr64 
  407714:	cmp    sil,0x9
  407718:	je     407760 <_start@@Base+0xe00>
  40771a:	jbe    407740 <_start@@Base+0xde0>
  40771c:	cmp    sil,0xb
  407720:	je     407778 <_start@@Base+0xe18>
  407722:	jb     407790 <_start@@Base+0xe30>
  407724:	cmp    sil,0xff
  407728:	jne    4077a8 <_start@@Base+0xe48>
  40772a:	mov    edx,0x6
  40772f:	lea    rsi,[rip+0x23d43]        # 42b479 <_IO_stdin_used@@Base+0x479>
  407736:	jmp    421860 <flatcc_json_printer_enum@@Base>
  40773b:	nop    DWORD PTR [rax+rax*1+0x0]
  407740:	cmp    sil,0x2
  407744:	je     4077c0 <_start@@Base+0xe60>
  407746:	cmp    sil,0x8
  40774a:	jne    4077a8 <_start@@Base+0xe48>
  40774c:	mov    edx,0x8
  407751:	lea    rsi,[rip+0x23d04]        # 42b45c <_IO_stdin_used@@Base+0x45c>
  407758:	jmp    421860 <flatcc_json_printer_enum@@Base>
  40775d:	nop    DWORD PTR [rax]
  407760:	mov    edx,0x5
  407765:	lea    rsi,[rip+0x23cf9]        # 42b465 <_IO_stdin_used@@Base+0x465>
  40776c:	jmp    421860 <flatcc_json_printer_enum@@Base>
  407771:	nop    DWORD PTR [rax+0x0]
  407778:	mov    edx,0x5
  40777d:	lea    rsi,[rip+0x23cef]        # 42b473 <_IO_stdin_used@@Base+0x473>
  407784:	jmp    421860 <flatcc_json_printer_enum@@Base>
  407789:	nop    DWORD PTR [rax+0x0]
  407790:	mov    edx,0x7
  407795:	lea    rsi,[rip+0x23ccf]        # 42b46b <_IO_stdin_used@@Base+0x46b>
  40779c:	jmp    421860 <flatcc_json_printer_enum@@Base>
  4077a1:	nop    DWORD PTR [rax+0x0]
  4077a8:	mov    edx,0x4
  4077ad:	lea    rsi,[rip+0x28044]        # 42f7f8 <flatcc_builder_padding_base@@Base+0xad8>
  4077b4:	jmp    421860 <flatcc_json_printer_enum@@Base>
  4077b9:	nop    DWORD PTR [rax+0x0]
  4077c0:	mov    edx,0x5
  4077c5:	lea    rsi,[rip+0x23c8a]        # 42b456 <_IO_stdin_used@@Base+0x456>
  4077cc:	jmp    421860 <flatcc_json_printer_enum@@Base>
  4077d1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4077dc:	nop    DWORD PTR [rax+0x0]
  4077e0:	endbr64 
  4077e4:	push   r12
  4077e6:	lea    r12,[rip+0xa3]        # 407890 <_start@@Base+0xf30>
  4077ed:	mov    r9d,0x2
  4077f3:	push   rbp
  4077f4:	mov    r8d,0x5
  4077fa:	mov    rbp,rsi
  4077fd:	push   rbx
  4077fe:	lea    rcx,[rip+0x23a49]        # 42b24e <_IO_stdin_used@@Base+0x24e>
  407805:	mov    rbx,rdi
  407808:	sub    rsp,0x8
  40780c:	push   r12
  40780e:	xor    edx,edx
  407810:	call   423770 <flatcc_json_printer_int8_enum_field@@Base>
  407815:	mov    rsi,rbp
  407818:	mov    rdi,rbx
  40781b:	mov    r9d,0x2
  407821:	mov    r8d,0x6
  407827:	lea    rcx,[rip+0x23c52]        # 42b480 <_IO_stdin_used@@Base+0x480>
  40782e:	mov    edx,0x1
  407833:	mov    QWORD PTR [rsp],r12
  407837:	call   423770 <flatcc_json_printer_int8_enum_field@@Base>
  40783c:	mov    rsi,rbp
  40783f:	mov    rdi,rbx
  407842:	mov    r9d,0x2
  407848:	mov    r8d,0x2
  40784e:	lea    rcx,[rip+0x23c32]        # 42b487 <_IO_stdin_used@@Base+0x487>
  407855:	mov    edx,0x2
  40785a:	call   421e20 <flatcc_json_printer_uint8_field@@Base>
  40785f:	pop    rax
  407860:	pop    rdx
  407861:	mov    rdi,rbx
  407864:	pop    rbx
  407865:	mov    rsi,rbp
  407868:	pop    rbp
  407869:	mov    r9d,0x2
  40786f:	mov    r8d,0x3
  407875:	lea    rcx,[rip+0x23c0e]        # 42b48a <_IO_stdin_used@@Base+0x48a>
  40787c:	mov    edx,0x3
  407881:	pop    r12
  407883:	jmp    421e20 <flatcc_json_printer_uint8_field@@Base>
  407888:	nop    DWORD PTR [rax+rax*1+0x0]
  407890:	endbr64 
  407894:	test   sil,0xf4
  407898:	jne    4078f0 <_start@@Base+0xf90>
  40789a:	test   sil,sil
  40789d:	je     4078f0 <_start@@Base+0xf90>
  40789f:	push   r13
  4078a1:	movzx  eax,sil
  4078a5:	push   r12
  4078a7:	push   rbp
  4078a8:	mov    rbp,rdi
  4078ab:	push   rbx
  4078ac:	mov    ebx,esi
  4078ae:	sub    rsp,0x8
  4078b2:	blsr   eax,eax
  4078b7:	setne  sil
  4078bb:	movzx  r12d,sil
  4078bf:	movzx  esi,sil
  4078c3:	call   4218d0 <flatcc_json_printer_delimit_enum_flags@@Base>
  4078c8:	xor    esi,esi
  4078ca:	test   bl,0x1
  4078cd:	jne    407900 <_start@@Base+0xfa0>
  4078cf:	test   bl,0x2
  4078d2:	jne    40791e <_start@@Base+0xfbe>
  4078d4:	and    ebx,0x8
  4078d7:	jne    40793e <_start@@Base+0xfde>
  4078d9:	add    rsp,0x8
  4078dd:	pop    rbx
  4078de:	mov    rdi,rbp
  4078e1:	pop    rbp
  4078e2:	mov    esi,r12d
  4078e5:	pop    r12
  4078e7:	pop    r13
  4078e9:	jmp    4218d0 <flatcc_json_printer_delimit_enum_flags@@Base>
  4078ee:	xchg   ax,ax
  4078f0:	movsx  esi,sil
  4078f4:	jmp    421720 <flatcc_json_printer_int8@@Base>
  4078f9:	nop    DWORD PTR [rax+0x0]
  407900:	mov    ecx,0x3
  407905:	lea    rdx,[rip+0x23b82]        # 42b48e <_IO_stdin_used@@Base+0x48e>
  40790c:	mov    rdi,rbp
  40790f:	call   421900 <flatcc_json_printer_enum_flag@@Base>
  407914:	mov    esi,0x1
  407919:	test   bl,0x2
  40791c:	je     4078d4 <_start@@Base+0xf74>
  40791e:	mov    ecx,0x5
  407923:	lea    rdx,[rip+0x23b68]        # 42b492 <_IO_stdin_used@@Base+0x492>
  40792a:	mov    rdi,rbp
  40792d:	lea    r13d,[rsi+0x1]
  407931:	call   421900 <flatcc_json_printer_enum_flag@@Base>
  407936:	and    ebx,0x8
  407939:	mov    esi,r13d
  40793c:	je     4078d9 <_start@@Base+0xf79>
  40793e:	mov    ecx,0x4
  407943:	lea    rdx,[rip+0x23b4e]        # 42b498 <_IO_stdin_used@@Base+0x498>
  40794a:	mov    rdi,rbp
  40794d:	call   421900 <flatcc_json_printer_enum_flag@@Base>
  407952:	jmp    4078d9 <_start@@Base+0xf79>
  407954:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40795f:	nop
  407960:	endbr64 
  407964:	push   rbp
  407965:	mov    rdx,rsi
  407968:	mov    rbp,rsi
  40796b:	push   rbx
  40796c:	mov    r9d,0x1
  407972:	mov    rbx,rdi
  407975:	sub    rsp,0x8
  407979:	lea    r8,[rip+0x23b97]        # 42b517 <_IO_stdin_used@@Base+0x517>
  407980:	xor    ecx,ecx
  407982:	xor    esi,esi
  407984:	call   424cc0 <flatcc_json_printer_float_struct_field@@Base>
  407989:	mov    rdx,rbp
  40798c:	mov    rdi,rbx
  40798f:	mov    r9d,0x1
  407995:	lea    r8,[rip+0x27d50]        # 42f6ec <flatcc_builder_padding_base@@Base+0x9cc>
  40799c:	mov    ecx,0x4
  4079a1:	mov    esi,0x1
  4079a6:	call   424cc0 <flatcc_json_printer_float_struct_field@@Base>
  4079ab:	mov    rdx,rbp
  4079ae:	mov    rdi,rbx
  4079b1:	mov    r9d,0x1
  4079b7:	lea    r8,[rip+0x23adf]        # 42b49d <_IO_stdin_used@@Base+0x49d>
  4079be:	mov    ecx,0x8
  4079c3:	mov    esi,0x2
  4079c8:	call   424cc0 <flatcc_json_printer_float_struct_field@@Base>
  4079cd:	mov    rdx,rbp
  4079d0:	mov    rdi,rbx
  4079d3:	mov    r9d,0x5
  4079d9:	lea    r8,[rip+0x23abf]        # 42b49f <_IO_stdin_used@@Base+0x49f>
  4079e0:	mov    ecx,0x10
  4079e5:	mov    esi,0x3
  4079ea:	call   424e10 <flatcc_json_printer_double_struct_field@@Base>
  4079ef:	sub    rsp,0x8
  4079f3:	lea    rax,[rip+0xfffffffffffffe96]        # 407890 <_start@@Base+0xf30>
  4079fa:	push   rax
  4079fb:	mov    rdx,rbp
  4079fe:	mov    rdi,rbx
  407a01:	mov    r9d,0x5
  407a07:	lea    r8,[rip+0x23a97]        # 42b4a5 <_IO_stdin_used@@Base+0x4a5>
  407a0e:	mov    ecx,0x18
  407a13:	mov    esi,0x4
  407a18:	call   425520 <flatcc_json_printer_int8_enum_struct_field@@Base>
  407a1d:	lea    rax,[rip+0xfffffffffffff9fc]        # 407420 <_start@@Base+0xac0>
  407a24:	mov    rdx,rbp
  407a27:	mov    rdi,rbx
  407a2a:	mov    r9d,0x5
  407a30:	lea    r8,[rip+0x23a74]        # 42b4ab <_IO_stdin_used@@Base+0x4ab>
  407a37:	mov    ecx,0x1a
  407a3c:	mov    esi,0x5
  407a41:	mov    QWORD PTR [rsp],rax
  407a45:	call   42a210 <flatcc_json_printer_embedded_struct_field@@Base>
  407a4a:	add    rsp,0x18
  407a4e:	pop    rbx
  407a4f:	pop    rbp
  407a50:	ret    
  407a51:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407a5c:	nop    DWORD PTR [rax+0x0]
  407a60:	mov    rax,rdx
  407a63:	sub    rax,rsi
  407a66:	cmp    rax,0x1
  407a6a:	jle    407a73 <_start@@Base+0x1113>
  407a6c:	cmp    BYTE PTR [rsi],0x20
  407a6f:	jg     407a80 <_start@@Base+0x1120>
  407a71:	je     407a88 <_start@@Base+0x1128>
  407a73:	jmp    41cb30 <flatcc_json_parser_space_ext@@Base>
  407a78:	nop    DWORD PTR [rax+rax*1+0x0]
  407a80:	mov    rax,rsi
  407a83:	ret    
  407a84:	nop    DWORD PTR [rax+0x0]
  407a88:	cmp    BYTE PTR [rsi+0x1],0x20
  407a8c:	jle    407a73 <_start@@Base+0x1113>
  407a8e:	lea    rax,[rsi+0x1]
  407a92:	ret    
  407a93:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407a9e:	xchg   ax,ax
  407aa0:	endbr64 
  407aa4:	push   r12
  407aa6:	mov    rax,rdx
  407aa9:	sub    rax,rsi
  407aac:	push   rbp
  407aad:	mov    r11,rdi
  407ab0:	mov    r10,rdx
  407ab3:	push   rbx
  407ab4:	mov    rbp,rcx
  407ab7:	mov    rbx,rsi
  407aba:	mov    r12,r8
  407abd:	cmp    rax,0x7
  407ac1:	ja     407be0 <_start@@Base+0x1280>
  407ac7:	mov    rsi,rdx
  407aca:	mov    rdi,rbx
  407acd:	call   406a50 <_start@@Base+0xf0>
  407ad2:	movabs rdx,0x4e4f4e44ffffffff
  407adc:	cmp    rax,rdx
  407adf:	ja     407b78 <_start@@Base+0x1218>
  407ae5:	mov    rdx,rax
  407ae8:	movabs rcx,0x426f6f6b46616dff
  407af2:	and    rdx,0xffffffffff000000
  407af9:	cmp    rax,rcx
  407afc:	ja     407b20 <_start@@Base+0x11c0>
  407afe:	movabs rax,0x42656c6c65000000
  407b08:	cmp    rdx,rax
  407b0b:	je     407cc0 <_start@@Base+0x1360>
  407b11:	mov    rax,rbx
  407b14:	pop    rbx
  407b15:	pop    rbp
  407b16:	pop    r12
  407b18:	ret    
  407b19:	nop    DWORD PTR [rax+0x0]
  407b20:	movabs rcx,0x4d754c616e000000
  407b2a:	cmp    rdx,rcx
  407b2d:	je     407d00 <_start@@Base+0x13a0>
  407b33:	xor    al,al
  407b35:	movabs rdx,0x426f6f6b46616e00
  407b3f:	cmp    rax,rdx
  407b42:	jne    407b11 <_start@@Base+0x11b1>
  407b44:	mov    r8,r9
  407b47:	mov    ecx,0x7
  407b4c:	mov    rdx,r10
  407b4f:	mov    rsi,rbx
  407b52:	mov    rdi,r11
  407b55:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  407b5a:	cmp    rbx,rax
  407b5d:	je     407b11 <_start@@Base+0x11b1>
  407b5f:	mov    QWORD PTR [r12],0xa
  407b67:	mov    rbx,rax
  407b6a:	mov    DWORD PTR [rbp+0x0],0x0
  407b71:	jmp    407b11 <_start@@Base+0x11b1>
  407b73:	nop    DWORD PTR [rax+rax*1+0x0]
  407b78:	movabs rdx,0x4f74686571ffffff
  407b82:	cmp    rax,rdx
  407b85:	ja     407bf0 <_start@@Base+0x1290>
  407b87:	movabs rdx,0xffffffff00000000
  407b91:	and    rax,rdx
  407b94:	movabs rdx,0x4e4f4e4500000000
  407b9e:	cmp    rax,rdx
  407ba1:	jne    407b11 <_start@@Base+0x11b1>
  407ba7:	mov    r8,r9
  407baa:	mov    ecx,0x4
  407baf:	mov    rdx,r10
  407bb2:	mov    rsi,rbx
  407bb5:	mov    rdi,r11
  407bb8:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  407bbd:	cmp    rbx,rax
  407bc0:	je     407b11 <_start@@Base+0x11b1>
  407bc6:	mov    QWORD PTR [r12],0x0
  407bce:	mov    rbx,rax
  407bd1:	mov    DWORD PTR [rbp+0x0],0x0
  407bd8:	jmp    407b11 <_start@@Base+0x11b1>
  407bdd:	nop    DWORD PTR [rax]
  407be0:	movbe  rax,QWORD PTR [rsi]
  407be5:	jmp    407ad2 <_start@@Base+0x1172>
  407bea:	nop    WORD PTR [rax+rax*1+0x0]
  407bf0:	movabs rdx,0x526170756e7a656b
  407bfa:	cmp    rax,rdx
  407bfd:	jbe    407c68 <_start@@Base+0x1308>
  407bff:	mov    rcx,rax
  407c02:	xor    cx,cx
  407c05:	movabs rdx,0x556e757365640000
  407c0f:	cmp    rcx,rdx
  407c12:	je     407d40 <_start@@Base+0x13e0>
  407c18:	movabs rdx,0x526170756e7a656c
  407c22:	cmp    rax,rdx
  407c25:	jne    407b11 <_start@@Base+0x11b1>
  407c2b:	mov    r8,r9
  407c2e:	mov    ecx,0x8
  407c33:	mov    rdx,r10
  407c36:	mov    rsi,rbx
  407c39:	mov    rdi,r11
  407c3c:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  407c41:	cmp    rbx,rax
  407c44:	je     407b11 <_start@@Base+0x11b1>
  407c4a:	mov    QWORD PTR [r12],0x8
  407c52:	mov    rbx,rax
  407c55:	mov    DWORD PTR [rbp+0x0],0x0
  407c5c:	jmp    407b11 <_start@@Base+0x11b1>
  407c61:	nop    DWORD PTR [rax+0x0]
  407c68:	and    rax,0xffffffffff000000
  407c6e:	movabs rdx,0x4f74686572000000
  407c78:	cmp    rax,rdx
  407c7b:	jne    407b11 <_start@@Base+0x11b1>
  407c81:	mov    r8,r9
  407c84:	mov    ecx,0x5
  407c89:	mov    rdx,r10
  407c8c:	mov    rsi,rbx
  407c8f:	mov    rdi,r11
  407c92:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  407c97:	cmp    rbx,rax
  407c9a:	je     407b11 <_start@@Base+0x11b1>
  407ca0:	mov    QWORD PTR [r12],0xb
  407ca8:	mov    rbx,rax
  407cab:	mov    DWORD PTR [rbp+0x0],0x0
  407cb2:	jmp    407b11 <_start@@Base+0x11b1>
  407cb7:	nop    WORD PTR [rax+rax*1+0x0]
  407cc0:	mov    r8,r9
  407cc3:	mov    ecx,0x5
  407cc8:	mov    rdx,r10
  407ccb:	mov    rsi,rbx
  407cce:	mov    rdi,r11
  407cd1:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  407cd6:	cmp    rbx,rax
  407cd9:	je     407b11 <_start@@Base+0x11b1>
  407cdf:	mov    QWORD PTR [r12],0x9
  407ce7:	mov    rbx,rax
  407cea:	mov    DWORD PTR [rbp+0x0],0x0
  407cf1:	jmp    407b11 <_start@@Base+0x11b1>
  407cf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407d00:	mov    r8,r9
  407d03:	mov    ecx,0x5
  407d08:	mov    rdx,r10
  407d0b:	mov    rsi,rbx
  407d0e:	mov    rdi,r11
  407d11:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  407d16:	cmp    rbx,rax
  407d19:	je     407b11 <_start@@Base+0x11b1>
  407d1f:	mov    QWORD PTR [r12],0x2
  407d27:	mov    rbx,rax
  407d2a:	mov    DWORD PTR [rbp+0x0],0x0
  407d31:	jmp    407b11 <_start@@Base+0x11b1>
  407d36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407d40:	mov    r8,r9
  407d43:	mov    ecx,0x6
  407d48:	mov    rdx,r10
  407d4b:	mov    rsi,rbx
  407d4e:	mov    rdi,r11
  407d51:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  407d56:	cmp    rbx,rax
  407d59:	je     407b11 <_start@@Base+0x11b1>
  407d5f:	mov    QWORD PTR [r12],0xff
  407d67:	mov    rbx,rax
  407d6a:	mov    DWORD PTR [rbp+0x0],0x0
  407d71:	jmp    407b11 <_start@@Base+0x11b1>
  407d76:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407d80:	endbr64 
  407d84:	push   r13
  407d86:	mov    rax,rdx
  407d89:	sub    rax,rsi
  407d8c:	push   r12
  407d8e:	mov    r11,rdi
  407d91:	mov    r10,rdx
  407d94:	push   rbp
  407d95:	mov    r12,r8
  407d98:	mov    rbp,rcx
  407d9b:	push   rbx
  407d9c:	mov    rbx,rsi
  407d9f:	sub    rsp,0x8
  407da3:	cmp    rax,0x7
  407da7:	ja     407ef0 <_start@@Base+0x1590>
  407dad:	mov    rsi,rdx
  407db0:	mov    rdi,rbx
  407db3:	call   406a50 <_start@@Base+0xf0>
  407db8:	movabs rdx,0x4d6f6e73746571ff
  407dc2:	cmp    rax,rdx
  407dc5:	ja     407df8 <_start@@Base+0x1498>
  407dc7:	movabs rdx,0xffffff0000000000
  407dd1:	and    rax,rdx
  407dd4:	movabs rdx,0x416c740000000000
  407dde:	cmp    rax,rdx
  407de1:	je     407f00 <_start@@Base+0x15a0>
  407de7:	mov    rax,rbx
  407dea:	add    rsp,0x8
  407dee:	pop    rbx
  407def:	pop    rbp
  407df0:	pop    r12
  407df2:	pop    r13
  407df4:	ret    
  407df5:	nop    DWORD PTR [rax]
  407df8:	movabs rdx,0x4d6f6e7374657232
  407e02:	cmp    rax,rdx
  407e05:	je     407fb0 <_start@@Base+0x1650>
  407e0b:	mov    rcx,rax
  407e0e:	xor    cl,cl
  407e10:	movabs rdx,0x4d6f6e7374657200
  407e1a:	cmp    rcx,rdx
  407e1d:	je     407f78 <_start@@Base+0x1618>
  407e23:	endbr64 
  407e27:	movabs rdx,0xffffffff00000000
  407e31:	and    rdx,rax
  407e34:	movabs rcx,0x4e4f4e4500000000
  407e3e:	cmp    rdx,rcx
  407e41:	je     407f40 <_start@@Base+0x15e0>
  407e47:	endbr64 
  407e4b:	movabs rdx,0x5465737453696d70
  407e55:	cmp    rax,rdx
  407e58:	jne    407de7 <_start@@Base+0x1487>
  407e5a:	lea    rdi,[rbx+0x8]
  407e5e:	mov    rax,r10
  407e61:	sub    rax,rdi
  407e64:	cmp    rax,0x7
  407e68:	ja     407ff8 <_start@@Base+0x1698>
  407e6e:	mov    rsi,r10
  407e71:	call   406a50 <_start@@Base+0xf0>
  407e76:	movabs rdx,0x6c655461626c6557
  407e80:	cmp    rax,rdx
  407e83:	jne    407de7 <_start@@Base+0x1487>
  407e89:	lea    r13,[rbx+0x10]
  407e8d:	mov    rax,r10
  407e90:	sub    rax,r13
  407e93:	cmp    rax,0x7
  407e97:	ja     407fe8 <_start@@Base+0x1688>
  407e9d:	mov    rsi,r10
  407ea0:	mov    rdi,r13
  407ea3:	call   406a50 <_start@@Base+0xf0>
  407ea8:	xor    al,al
  407eaa:	movabs rdx,0x697468456e756d00
  407eb4:	cmp    rax,rdx
  407eb7:	jne    407de7 <_start@@Base+0x1487>
  407ebd:	mov    r8,r9
  407ec0:	mov    ecx,0x7
  407ec5:	mov    rdx,r10
  407ec8:	mov    rsi,r13
  407ecb:	mov    rdi,r11
  407ece:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  407ed3:	cmp    r13,rax
  407ed6:	je     407de7 <_start@@Base+0x1487>
  407edc:	mov    QWORD PTR [r12],0x2
  407ee4:	mov    DWORD PTR [rbp+0x0],0x0
  407eeb:	jmp    407dea <_start@@Base+0x148a>
  407ef0:	movbe  rax,QWORD PTR [rsi]
  407ef5:	jmp    407db8 <_start@@Base+0x1458>
  407efa:	nop    WORD PTR [rax+rax*1+0x0]
  407f00:	mov    r8,r9
  407f03:	mov    ecx,0x3
  407f08:	mov    rdx,r10
  407f0b:	mov    rsi,rbx
  407f0e:	mov    rdi,r11
  407f11:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  407f16:	cmp    rbx,rax
  407f19:	je     407dea <_start@@Base+0x148a>
  407f1f:	mov    QWORD PTR [r12],0x4
  407f27:	mov    DWORD PTR [rbp+0x0],0x0
  407f2e:	add    rsp,0x8
  407f32:	pop    rbx
  407f33:	pop    rbp
  407f34:	pop    r12
  407f36:	pop    r13
  407f38:	ret    
  407f39:	nop    DWORD PTR [rax+0x0]
  407f40:	mov    r8,r9
  407f43:	mov    ecx,0x4
  407f48:	mov    rdx,r10
  407f4b:	mov    rsi,rbx
  407f4e:	mov    rdi,r11
  407f51:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  407f56:	cmp    rbx,rax
  407f59:	je     407dea <_start@@Base+0x148a>
  407f5f:	mov    QWORD PTR [r12],0x0
  407f67:	mov    DWORD PTR [rbp+0x0],0x0
  407f6e:	jmp    407dea <_start@@Base+0x148a>
  407f73:	nop    DWORD PTR [rax+rax*1+0x0]
  407f78:	mov    r8,r9
  407f7b:	mov    ecx,0x7
  407f80:	mov    rdx,r10
  407f83:	mov    rsi,rbx
  407f86:	mov    rdi,r11
  407f89:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  407f8e:	cmp    rbx,rax
  407f91:	je     407de7 <_start@@Base+0x1487>
  407f97:	mov    QWORD PTR [r12],0x1
  407f9f:	mov    DWORD PTR [rbp+0x0],0x0
  407fa6:	jmp    407dea <_start@@Base+0x148a>
  407fab:	nop    DWORD PTR [rax+rax*1+0x0]
  407fb0:	mov    r8,r9
  407fb3:	mov    ecx,0x8
  407fb8:	mov    rdx,r10
  407fbb:	mov    rsi,rbx
  407fbe:	mov    rdi,r11
  407fc1:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  407fc6:	cmp    rbx,rax
  407fc9:	je     407de7 <_start@@Base+0x1487>
  407fcf:	mov    QWORD PTR [r12],0x3
  407fd7:	mov    DWORD PTR [rbp+0x0],0x0
  407fde:	jmp    407dea <_start@@Base+0x148a>
  407fe3:	nop    DWORD PTR [rax+rax*1+0x0]
  407fe8:	movbe  rax,QWORD PTR [rbx+0x10]
  407fee:	jmp    407ea8 <_start@@Base+0x1548>
  407ff3:	nop    DWORD PTR [rax+rax*1+0x0]
  407ff8:	movbe  rax,QWORD PTR [rbx+0x8]
  407ffe:	jmp    407e76 <_start@@Base+0x1516>
  408003:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40800e:	xchg   ax,ax
  408010:	push   r12
  408012:	mov    rax,rdx
  408015:	sub    rax,rsi
  408018:	push   rbp
  408019:	mov    r11,rdi
  40801c:	mov    r10,rdx
  40801f:	push   rbx
  408020:	mov    rbp,rcx
  408023:	mov    rbx,rsi
  408026:	mov    r12,r8
  408029:	cmp    rax,0x7
  40802d:	ja     4080e8 <_start@@Base+0x1788>
  408033:	mov    rsi,rdx
  408036:	mov    rdi,rbx
  408039:	call   406a50 <_start@@Base+0xf0>
  40803e:	movabs rdx,0x68657831ffffffff
  408048:	cmp    rax,rdx
  40804b:	ja     408078 <_start@@Base+0x1718>
  40804d:	movabs rdx,0xffffffff00000000
  408057:	and    rax,rdx
  40805a:	movabs rdx,0x6865783100000000
  408064:	cmp    rax,rdx
  408067:	je     4080f8 <_start@@Base+0x1798>
  40806d:	mov    rax,rbx
  408070:	pop    rbx
  408071:	pop    rbp
  408072:	pop    r12
  408074:	ret    
  408075:	nop    DWORD PTR [rax]
  408078:	mov    rcx,rax
  40807b:	xor    cx,cx
  40807e:	movabs rdx,0x6865786e65670000
  408088:	cmp    rcx,rdx
  40808b:	je     408138 <_start@@Base+0x17d8>
  408091:	movabs rdx,0xffffffff00000000
  40809b:	and    rax,rdx
  40809e:	movabs rdx,0x6865783200000000
  4080a8:	cmp    rax,rdx
  4080ab:	jne    40806d <_start@@Base+0x170d>
  4080ad:	mov    r8,r9
  4080b0:	mov    ecx,0x4
  4080b5:	mov    rdx,r10
  4080b8:	mov    rsi,rbx
  4080bb:	mov    rdi,r11
  4080be:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  4080c3:	cmp    rbx,rax
  4080c6:	je     40806d <_start@@Base+0x170d>
  4080c8:	mov    rbx,rax
  4080cb:	mov    rax,rbx
  4080ce:	pop    rbx
  4080cf:	mov    QWORD PTR [r12],0x7eafbeaf
  4080d7:	mov    DWORD PTR [rbp+0x0],0x0
  4080de:	pop    rbp
  4080df:	pop    r12
  4080e1:	ret    
  4080e2:	nop    WORD PTR [rax+rax*1+0x0]
  4080e8:	movbe  rax,QWORD PTR [rsi]
  4080ed:	jmp    40803e <_start@@Base+0x16de>
  4080f2:	nop    WORD PTR [rax+rax*1+0x0]
  4080f8:	mov    r8,r9
  4080fb:	mov    ecx,0x4
  408100:	mov    rdx,r10
  408103:	mov    rsi,rbx
  408106:	mov    rdi,r11
  408109:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  40810e:	cmp    rbx,rax
  408111:	je     40806d <_start@@Base+0x170d>
  408117:	mov    rbx,rax
  40811a:	mov    rax,rbx
  40811d:	pop    rbx
  40811e:	mov    QWORD PTR [r12],0x3
  408126:	mov    DWORD PTR [rbp+0x0],0x0
  40812d:	pop    rbp
  40812e:	pop    r12
  408130:	ret    
  408131:	nop    DWORD PTR [rax+0x0]
  408138:	mov    r8,r9
  40813b:	mov    ecx,0x6
  408140:	mov    rdx,r10
  408143:	mov    rsi,rbx
  408146:	mov    rdi,r11
  408149:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  40814e:	cmp    rbx,rax
  408151:	je     40806d <_start@@Base+0x170d>
  408157:	mov    QWORD PTR [r12],0xfffffffffffffffe
  40815f:	mov    rbx,rax
  408162:	mov    DWORD PTR [rbp+0x0],0x1
  408169:	jmp    40806d <_start@@Base+0x170d>
  40816e:	xchg   ax,ax
  408170:	push   r12
  408172:	mov    rax,rdx
  408175:	sub    rax,rsi
  408178:	push   rbp
  408179:	mov    r10,rdi
  40817c:	mov    r12,rsi
  40817f:	push   rbx
  408180:	mov    r11,rdx
  408183:	mov    rbx,rcx
  408186:	mov    rbp,r8
  408189:	cmp    rax,0x7
  40818d:	ja     408238 <_start@@Base+0x18d8>
  408193:	mov    rsi,rdx
  408196:	mov    rdi,r12
  408199:	call   406a50 <_start@@Base+0xf0>
  40819e:	movabs rdx,0x696e7431ffffffff
  4081a8:	cmp    rax,rdx
  4081ab:	ja     4081d8 <_start@@Base+0x1878>
  4081ad:	movabs rdx,0xffffffff00000000
  4081b7:	and    rax,rdx
  4081ba:	movabs rdx,0x696e743100000000
  4081c4:	cmp    rax,rdx
  4081c7:	je     4082b0 <_start@@Base+0x1950>
  4081cd:	pop    rbx
  4081ce:	pop    rbp
  4081cf:	mov    rax,r12
  4081d2:	pop    r12
  4081d4:	ret    
  4081d5:	nop    DWORD PTR [rax]
  4081d8:	movabs rdx,0x696e746e6566ffff
  4081e2:	cmp    rax,rdx
  4081e5:	ja     408248 <_start@@Base+0x18e8>
  4081e7:	movabs rdx,0xffffffff00000000
  4081f1:	and    rax,rdx
  4081f4:	movabs rdx,0x696e743200000000
  4081fe:	cmp    rax,rdx
  408201:	jne    4081cd <_start@@Base+0x186d>
  408203:	mov    r8,r9
  408206:	mov    ecx,0x4
  40820b:	mov    rdx,r11
  40820e:	mov    rsi,r12
  408211:	mov    rdi,r10
  408214:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  408219:	cmp    r12,rax
  40821c:	je     4081cd <_start@@Base+0x186d>
  40821e:	mov    QWORD PTR [rbp+0x0],0x2a
  408226:	mov    r12,rax
  408229:	mov    DWORD PTR [rbx],0x0
  40822f:	jmp    4081cd <_start@@Base+0x186d>
  408231:	nop    DWORD PTR [rax+0x0]
  408238:	movbe  rax,QWORD PTR [rsi]
  40823d:	jmp    40819e <_start@@Base+0x183e>
  408242:	nop    WORD PTR [rax+rax*1+0x0]
  408248:	mov    rcx,rax
  40824b:	xor    cl,cl
  40824d:	movabs rdx,0x696e746e65673200
  408257:	cmp    rcx,rdx
  40825a:	je     4082f0 <_start@@Base+0x1990>
  408260:	xor    ax,ax
  408263:	movabs rdx,0x696e746e65670000
  40826d:	cmp    rax,rdx
  408270:	jne    4081cd <_start@@Base+0x186d>
  408276:	mov    r8,r9
  408279:	mov    ecx,0x6
  40827e:	mov    rdx,r11
  408281:	mov    rsi,r12
  408284:	mov    rdi,r10
  408287:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  40828c:	cmp    r12,rax
  40828f:	je     4081cd <_start@@Base+0x186d>
  408295:	mov    QWORD PTR [rbp+0x0],0xfffffffffffffffe
  40829d:	mov    r12,rax
  4082a0:	mov    DWORD PTR [rbx],0x1
  4082a6:	jmp    4081cd <_start@@Base+0x186d>
  4082ab:	nop    DWORD PTR [rax+rax*1+0x0]
  4082b0:	mov    r8,r9
  4082b3:	mov    ecx,0x4
  4082b8:	mov    rdx,r11
  4082bb:	mov    rsi,r12
  4082be:	mov    rdi,r10
  4082c1:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  4082c6:	cmp    r12,rax
  4082c9:	je     4081cd <_start@@Base+0x186d>
  4082cf:	mov    QWORD PTR [rbp+0x0],0x2
  4082d7:	mov    DWORD PTR [rbx],0x0
  4082dd:	pop    rbx
  4082de:	mov    r12,rax
  4082e1:	pop    rbp
  4082e2:	mov    rax,r12
  4082e5:	pop    r12
  4082e7:	ret    
  4082e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4082f0:	mov    r8,r9
  4082f3:	mov    ecx,0x7
  4082f8:	mov    rdx,r11
  4082fb:	mov    rsi,r12
  4082fe:	mov    rdi,r10
  408301:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  408306:	cmp    r12,rax
  408309:	je     4081cd <_start@@Base+0x186d>
  40830f:	mov    QWORD PTR [rbp+0x0],0xffffffffffffffff
  408317:	mov    r12,rax
  40831a:	mov    DWORD PTR [rbx],0x1
  408320:	jmp    4081cd <_start@@Base+0x186d>
  408325:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  408330:	push   r12
  408332:	mov    rax,rdx
  408335:	sub    rax,rsi
  408338:	push   rbp
  408339:	mov    r11,rdi
  40833c:	mov    r10,rdx
  40833f:	push   rbx
  408340:	mov    rbp,rcx
  408343:	mov    rbx,rsi
  408346:	mov    r12,r8
  408349:	cmp    rax,0x7
  40834d:	ja     4083f0 <_start@@Base+0x1a90>
  408353:	mov    rsi,rdx
  408356:	mov    rdi,rbx
  408359:	call   406a50 <_start@@Base+0xf0>
  40835e:	movabs rcx,0xffffffff00000000
  408368:	movabs rdx,0x6e656731ffffffff
  408372:	and    rcx,rax
  408375:	cmp    rax,rdx
  408378:	ja     408398 <_start@@Base+0x1a38>
  40837a:	movabs rax,0x6e65673100000000
  408384:	cmp    rcx,rax
  408387:	je     408400 <_start@@Base+0x1aa0>
  408389:	mov    rax,rbx
  40838c:	pop    rbx
  40838d:	pop    rbp
  40838e:	pop    r12
  408390:	ret    
  408391:	nop    DWORD PTR [rax+0x0]
  408398:	movabs rax,0x6e65673300000000
  4083a2:	cmp    rcx,rax
  4083a5:	je     408440 <_start@@Base+0x1ae0>
  4083ab:	movabs rax,0x6e65673200000000
  4083b5:	cmp    rcx,rax
  4083b8:	jne    408389 <_start@@Base+0x1a29>
  4083ba:	mov    r8,r9
  4083bd:	mov    ecx,0x4
  4083c2:	mov    rdx,r10
  4083c5:	mov    rsi,rbx
  4083c8:	mov    rdi,r11
  4083cb:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  4083d0:	cmp    rbx,rax
  4083d3:	je     408389 <_start@@Base+0x1a29>
  4083d5:	mov    rbx,rax
  4083d8:	mov    rax,rbx
  4083db:	pop    rbx
  4083dc:	mov    QWORD PTR [r12],0xfffffffffffffff5
  4083e4:	mov    DWORD PTR [rbp+0x0],0x1
  4083eb:	pop    rbp
  4083ec:	pop    r12
  4083ee:	ret    
  4083ef:	nop
  4083f0:	movbe  rax,QWORD PTR [rsi]
  4083f5:	jmp    40835e <_start@@Base+0x19fe>
  4083fa:	nop    WORD PTR [rax+rax*1+0x0]
  408400:	mov    r8,r9
  408403:	mov    ecx,0x4
  408408:	mov    rdx,r10
  40840b:	mov    rsi,rbx
  40840e:	mov    rdi,r11
  408411:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  408416:	cmp    rbx,rax
  408419:	je     408389 <_start@@Base+0x1a29>
  40841f:	mov    rbx,rax
  408422:	mov    rax,rbx
  408425:	pop    rbx
  408426:	mov    QWORD PTR [r12],0xfffffffffffffff4
  40842e:	mov    DWORD PTR [rbp+0x0],0x1
  408435:	pop    rbp
  408436:	pop    r12
  408438:	ret    
  408439:	nop    DWORD PTR [rax+0x0]
  408440:	mov    r8,r9
  408443:	mov    ecx,0x4
  408448:	mov    rdx,r10
  40844b:	mov    rsi,rbx
  40844e:	mov    rdi,r11
  408451:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  408456:	cmp    rbx,rax
  408459:	je     408389 <_start@@Base+0x1a29>
  40845f:	mov    QWORD PTR [r12],0xfffffffffffffff6
  408467:	mov    rbx,rax
  40846a:	mov    DWORD PTR [rbp+0x0],0x1
  408471:	jmp    408389 <_start@@Base+0x1a29>
  408476:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408480:	endbr64 
  408484:	push   r12
  408486:	mov    rax,rdx
  408489:	sub    rax,rsi
  40848c:	push   rbp
  40848d:	mov    r11,rdi
  408490:	mov    r10,rdx
  408493:	push   rbx
  408494:	mov    rbp,rcx
  408497:	mov    rbx,rsi
  40849a:	mov    r12,r8
  40849d:	cmp    rax,0x7
  4084a1:	ja     408560 <_start@@Base+0x1c00>
  4084a7:	mov    rsi,rdx
  4084aa:	mov    rdi,rbx
  4084ad:	call   406a50 <_start@@Base+0xf0>
  4084b2:	movabs rdx,0x477265656dffffff
  4084bc:	cmp    rax,rdx
  4084bf:	ja     4084f0 <_start@@Base+0x1b90>
  4084c1:	movabs rdx,0xffffffff00000000
  4084cb:	and    rax,rdx
  4084ce:	movabs rdx,0x426c756500000000
  4084d8:	cmp    rax,rdx
  4084db:	je     408570 <_start@@Base+0x1c10>
  4084e1:	mov    rax,rbx
  4084e4:	pop    rbx
  4084e5:	pop    rbp
  4084e6:	pop    r12
  4084e8:	ret    
  4084e9:	nop    DWORD PTR [rax+0x0]
  4084f0:	movabs rdx,0xffffff0000000000
  4084fa:	and    rdx,rax
  4084fd:	movabs rcx,0x5265640000000000
  408507:	cmp    rdx,rcx
  40850a:	je     4085b0 <_start@@Base+0x1c50>
  408510:	and    rax,0xffffffffff000000
  408516:	movabs rdx,0x477265656e000000
  408520:	cmp    rax,rdx
  408523:	jne    4084e1 <_start@@Base+0x1b81>
  408525:	mov    r8,r9
  408528:	mov    ecx,0x5
  40852d:	mov    rdx,r10
  408530:	mov    rsi,rbx
  408533:	mov    rdi,r11
  408536:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  40853b:	cmp    rbx,rax
  40853e:	je     4084e1 <_start@@Base+0x1b81>
  408540:	mov    rbx,rax
  408543:	mov    rax,rbx
  408546:	pop    rbx
  408547:	mov    QWORD PTR [r12],0x2
  40854f:	mov    DWORD PTR [rbp+0x0],0x0
  408556:	pop    rbp
  408557:	pop    r12
  408559:	ret    
  40855a:	nop    WORD PTR [rax+rax*1+0x0]
  408560:	movbe  rax,QWORD PTR [rsi]
  408565:	jmp    4084b2 <_start@@Base+0x1b52>
  40856a:	nop    WORD PTR [rax+rax*1+0x0]
  408570:	mov    r8,r9
  408573:	mov    ecx,0x4
  408578:	mov    rdx,r10
  40857b:	mov    rsi,rbx
  40857e:	mov    rdi,r11
  408581:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  408586:	cmp    rbx,rax
  408589:	je     4084e1 <_start@@Base+0x1b81>
  40858f:	mov    rbx,rax
  408592:	mov    rax,rbx
  408595:	pop    rbx
  408596:	mov    QWORD PTR [r12],0x8
  40859e:	mov    DWORD PTR [rbp+0x0],0x0
  4085a5:	pop    rbp
  4085a6:	pop    r12
  4085a8:	ret    
  4085a9:	nop    DWORD PTR [rax+0x0]
  4085b0:	mov    r8,r9
  4085b3:	mov    ecx,0x3
  4085b8:	mov    rdx,r10
  4085bb:	mov    rsi,rbx
  4085be:	mov    rdi,r11
  4085c1:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  4085c6:	cmp    rbx,rax
  4085c9:	je     4084e1 <_start@@Base+0x1b81>
  4085cf:	mov    QWORD PTR [r12],0x1
  4085d7:	mov    rbx,rax
  4085da:	mov    DWORD PTR [rbp+0x0],0x0
  4085e1:	jmp    4084e1 <_start@@Base+0x1b81>
  4085e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4085f0:	endbr64 
  4085f4:	push   rbx
  4085f5:	xor    esi,esi
  4085f7:	mov    ecx,0x8
  4085fc:	mov    edx,0x8
  408601:	mov    rbx,rdi
  408604:	call   41a510 <flatcc_verify_field@@Base>
  408609:	test   eax,eax
  40860b:	je     408610 <_start@@Base+0x1cb0>
  40860d:	pop    rbx
  40860e:	ret    
  40860f:	nop
  408610:	mov    rdi,rbx
  408613:	mov    ecx,0x4
  408618:	mov    edx,0x4
  40861d:	mov    esi,0x1
  408622:	pop    rbx
  408623:	jmp    41a510 <flatcc_verify_field@@Base>
  408628:	nop    DWORD PTR [rax+rax*1+0x0]
  408630:	endbr64 
  408634:	push   rbx
  408635:	xor    esi,esi
  408637:	mov    ecx,0x1
  40863c:	mov    edx,0x1
  408641:	mov    rbx,rdi
  408644:	call   41a510 <flatcc_verify_field@@Base>
  408649:	test   eax,eax
  40864b:	je     408650 <_start@@Base+0x1cf0>
  40864d:	pop    rbx
  40864e:	ret    
  40864f:	nop
  408650:	mov    ecx,0x1
  408655:	mov    edx,0x1
  40865a:	mov    esi,0x1
  40865f:	mov    rdi,rbx
  408662:	call   41a510 <flatcc_verify_field@@Base>
  408667:	test   eax,eax
  408669:	jne    40864d <_start@@Base+0x1ced>
  40866b:	mov    ecx,0x1
  408670:	mov    edx,0x1
  408675:	mov    esi,0x2
  40867a:	mov    rdi,rbx
  40867d:	call   41a510 <flatcc_verify_field@@Base>
  408682:	test   eax,eax
  408684:	jne    40864d <_start@@Base+0x1ced>
  408686:	mov    rdi,rbx
  408689:	mov    ecx,0x1
  40868e:	mov    edx,0x1
  408693:	mov    esi,0x3
  408698:	pop    rbx
  408699:	jmp    41a510 <flatcc_verify_field@@Base>
  40869e:	xchg   ax,ax
  4086a0:	endbr64 
  4086a4:	push   rbx
  4086a5:	xor    edx,edx
  4086a7:	xor    esi,esi
  4086a9:	mov    rbx,rdi
  4086ac:	call   41a560 <flatcc_verify_string_field@@Base>
  4086b1:	test   eax,eax
  4086b3:	je     4086c0 <_start@@Base+0x1d60>
  4086b5:	pop    rbx
  4086b6:	ret    
  4086b7:	nop    WORD PTR [rax+rax*1+0x0]
  4086c0:	mov    ecx,0x8
  4086c5:	mov    edx,0x8
  4086ca:	mov    esi,0x1
  4086cf:	mov    rdi,rbx
  4086d2:	call   41a510 <flatcc_verify_field@@Base>
  4086d7:	test   eax,eax
  4086d9:	jne    4086b5 <_start@@Base+0x1d55>
  4086db:	mov    rdi,rbx
  4086de:	mov    ecx,0x2
  4086e3:	mov    edx,0x2
  4086e8:	mov    esi,0x2
  4086ed:	pop    rbx
  4086ee:	jmp    41a510 <flatcc_verify_field@@Base>
  4086f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4086fe:	xchg   ax,ax
  408700:	endbr64 
  408704:	push   rbx
  408705:	xor    edx,edx
  408707:	xor    esi,esi
  408709:	mov    rbx,rdi
  40870c:	call   41a560 <flatcc_verify_string_field@@Base>
  408711:	test   eax,eax
  408713:	je     408720 <_start@@Base+0x1dc0>
  408715:	pop    rbx
  408716:	ret    
  408717:	nop    WORD PTR [rax+rax*1+0x0]
  408720:	mov    ecx,0x4
  408725:	mov    edx,0x4
  40872a:	mov    esi,0x1
  40872f:	mov    rdi,rbx
  408732:	call   41a510 <flatcc_verify_field@@Base>
  408737:	test   eax,eax
  408739:	jne    408715 <_start@@Base+0x1db5>
  40873b:	xor    edx,edx
  40873d:	mov    esi,0x2
  408742:	mov    rdi,rbx
  408745:	call   41a560 <flatcc_verify_string_field@@Base>
  40874a:	test   eax,eax
  40874c:	jne    408715 <_start@@Base+0x1db5>
  40874e:	mov    ecx,0x8
  408753:	mov    edx,0x8
  408758:	mov    esi,0x3
  40875d:	mov    rdi,rbx
  408760:	call   41a510 <flatcc_verify_field@@Base>
  408765:	test   eax,eax
  408767:	jne    408715 <_start@@Base+0x1db5>
  408769:	xor    edx,edx
  40876b:	mov    esi,0x4
  408770:	mov    rdi,rbx
  408773:	call   41a560 <flatcc_verify_string_field@@Base>
  408778:	test   eax,eax
  40877a:	jne    408715 <_start@@Base+0x1db5>
  40877c:	mov    ecx,0x8
  408781:	mov    edx,0x8
  408786:	mov    esi,0x5
  40878b:	mov    rdi,rbx
  40878e:	call   41a510 <flatcc_verify_field@@Base>
  408793:	test   eax,eax
  408795:	jne    408715 <_start@@Base+0x1db5>
  40879b:	mov    ecx,0x4
  4087a0:	mov    edx,0x4
  4087a5:	mov    esi,0x6
  4087aa:	mov    rdi,rbx
  4087ad:	call   41a510 <flatcc_verify_field@@Base>
  4087b2:	test   eax,eax
  4087b4:	jne    408715 <_start@@Base+0x1db5>
  4087ba:	mov    ecx,0x8
  4087bf:	mov    edx,0x8
  4087c4:	mov    esi,0x7
  4087c9:	mov    rdi,rbx
  4087cc:	call   41a510 <flatcc_verify_field@@Base>
  4087d1:	test   eax,eax
  4087d3:	jne    408715 <_start@@Base+0x1db5>
  4087d9:	mov    rdi,rbx
  4087dc:	mov    ecx,0x4
  4087e1:	mov    edx,0x4
  4087e6:	mov    esi,0x8
  4087eb:	pop    rbx
  4087ec:	jmp    41a510 <flatcc_verify_field@@Base>
  4087f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4087fc:	nop    DWORD PTR [rax+0x0]
  408800:	endbr64 
  408804:	push   rbx
  408805:	xor    edx,edx
  408807:	xor    esi,esi
  408809:	lea    rcx,[rip+0xfffffffffffffef0]        # 408700 <_start@@Base+0x1da0>
  408810:	mov    rbx,rdi
  408813:	call   41a8a0 <flatcc_verify_table_field@@Base>
  408818:	test   eax,eax
  40881a:	je     408820 <_start@@Base+0x1ec0>
  40881c:	pop    rbx
  40881d:	ret    
  40881e:	xchg   ax,ax
  408820:	xor    edx,edx
  408822:	lea    rcx,[rip+0xec7]        # 4096f0 <_start@@Base+0x2d90>
  408829:	mov    esi,0x1
  40882e:	mov    rdi,rbx
  408831:	call   41a8a0 <flatcc_verify_table_field@@Base>
  408836:	test   eax,eax
  408838:	jne    40881c <_start@@Base+0x1ebc>
  40883a:	mov    rdi,rbx
  40883d:	lea    rcx,[rip+0xfffffffffffffdac]        # 4085f0 <_start@@Base+0x1c90>
  408844:	xor    edx,edx
  408846:	mov    esi,0x2
  40884b:	pop    rbx
  40884c:	jmp    41a8a0 <flatcc_verify_table_field@@Base>
  408851:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40885c:	nop    DWORD PTR [rax+0x0]
  408860:	endbr64 
  408864:	push   rbx
  408865:	xor    esi,esi
  408867:	mov    ecx,0x10
  40886c:	mov    edx,0x20
  408871:	mov    rbx,rdi
  408874:	call   41a510 <flatcc_verify_field@@Base>
  408879:	test   eax,eax
  40887b:	je     408880 <_start@@Base+0x1f20>
  40887d:	pop    rbx
  40887e:	ret    
  40887f:	nop
  408880:	mov    ecx,0x2
  408885:	mov    edx,0x2
  40888a:	mov    esi,0x2
  40888f:	mov    rdi,rbx
  408892:	call   41a510 <flatcc_verify_field@@Base>
  408897:	test   eax,eax
  408899:	jne    40887d <_start@@Base+0x1f1d>
  40889b:	mov    ecx,0x2
  4088a0:	mov    edx,0x2
  4088a5:	mov    esi,0x1
  4088aa:	mov    rdi,rbx
  4088ad:	call   41a510 <flatcc_verify_field@@Base>
  4088b2:	test   eax,eax
  4088b4:	jne    40887d <_start@@Base+0x1f1d>
  4088b6:	mov    edx,0x1
  4088bb:	mov    esi,0x3
  4088c0:	mov    rdi,rbx
  4088c3:	call   41a560 <flatcc_verify_string_field@@Base>
  4088c8:	test   eax,eax
  4088ca:	jne    40887d <_start@@Base+0x1f1d>
  4088cc:	mov    ecx,0x1
  4088d1:	mov    edx,0x1
  4088d6:	mov    esi,0x6
  4088db:	mov    rdi,rbx
  4088de:	call   41a510 <flatcc_verify_field@@Base>
  4088e3:	test   eax,eax
  4088e5:	jne    40887d <_start@@Base+0x1f1d>
  4088e7:	xor    edx,edx
  4088e9:	mov    r9d,0xffffffff
  4088ef:	mov    r8d,0x1
  4088f5:	mov    ecx,0x1
  4088fa:	mov    esi,0x5
  4088ff:	mov    rdi,rbx
  408902:	call   41a610 <flatcc_verify_vector_field@@Base>
  408907:	test   eax,eax
  408909:	jne    40887d <_start@@Base+0x1f1d>
  40890f:	xor    edx,edx
  408911:	lea    rcx,[rip+0xffffffffffffff48]        # 408860 <_start@@Base+0x1f00>
  408918:	mov    esi,0xb
  40891d:	mov    rdi,rbx
  408920:	call   41aa20 <flatcc_verify_table_vector_field@@Base>
  408925:	test   eax,eax
  408927:	jne    40887d <_start@@Base+0x1f1d>
  40892d:	xor    edx,edx
  40892f:	mov    esi,0xa
  408934:	mov    rdi,rbx
  408937:	call   41a6e0 <flatcc_verify_string_vector_field@@Base>
  40893c:	test   eax,eax
  40893e:	jne    40887d <_start@@Base+0x1f1d>
  408944:	xor    edx,edx
  408946:	mov    esi,0x1c
  40894b:	mov    rdi,rbx
  40894e:	call   41a6e0 <flatcc_verify_string_vector_field@@Base>
  408953:	test   eax,eax
  408955:	jne    40887d <_start@@Base+0x1f1d>
  40895b:	xor    edx,edx
  40895d:	mov    r9d,0xffffffff
  408963:	mov    r8d,0x1
  408969:	mov    ecx,0x1
  40896e:	mov    esi,0x18
  408973:	mov    rdi,rbx
  408976:	call   41a610 <flatcc_verify_vector_field@@Base>
  40897b:	test   eax,eax
  40897d:	jne    40887d <_start@@Base+0x1f1d>
  408983:	xor    edx,edx
  408985:	mov    r9d,0x1fffffff
  40898b:	mov    r8d,0x4
  408991:	mov    ecx,0x8
  408996:	mov    esi,0x1d
  40899b:	mov    rdi,rbx
  40899e:	call   41a610 <flatcc_verify_vector_field@@Base>
  4089a3:	test   eax,eax
  4089a5:	jne    40887d <_start@@Base+0x1f1d>
  4089ab:	xor    edx,edx
  4089ad:	lea    rcx,[rip+0xfffffffffffffeac]        # 408860 <_start@@Base+0x1f00>
  4089b4:	mov    esi,0xc
  4089b9:	mov    rdi,rbx
  4089bc:	call   41a8a0 <flatcc_verify_table_field@@Base>
  4089c1:	test   eax,eax
  4089c3:	jne    40887d <_start@@Base+0x1f1d>
  4089c9:	xor    edx,edx
  4089cb:	lea    rcx,[rip+0x34e]        # 408d20 <_start@@Base+0x23c0>
  4089d2:	mov    esi,0x8
  4089d7:	mov    rdi,rbx
  4089da:	call   41b6c0 <flatcc_verify_union_field@@Base>
  4089df:	test   eax,eax
  4089e1:	jne    40887d <_start@@Base+0x1f1d>
  4089e7:	xor    edx,edx
  4089e9:	mov    r9d,0x3fffffff
  4089ef:	mov    r8d,0x2
  4089f5:	mov    ecx,0x4
  4089fa:	mov    esi,0x9
  4089ff:	mov    rdi,rbx
  408a02:	call   41a610 <flatcc_verify_vector_field@@Base>
  408a07:	test   eax,eax
  408a09:	jne    40887d <_start@@Base+0x1f1d>
  408a0f:	xor    edx,edx
  408a11:	mov    r9d,0x3fffffff
  408a17:	mov    r8d,0x2
  408a1d:	mov    ecx,0x4
  408a22:	mov    esi,0x1f
  408a27:	mov    rdi,rbx
  408a2a:	call   41a610 <flatcc_verify_vector_field@@Base>
  408a2f:	test   eax,eax
  408a31:	jne    40887d <_start@@Base+0x1f1d>
  408a37:	xor    ecx,ecx
  408a39:	xor    edx,edx
  408a3b:	lea    r9,[rip+0xfffffffffffffe1e]        # 408860 <_start@@Base+0x1f00>
  408a42:	mov    r8d,0x1
  408a48:	mov    esi,0xd
  408a4d:	mov    rdi,rbx
  408a50:	call   41b4e0 <flatcc_verify_table_as_nested_root@@Base>
  408a55:	test   eax,eax
  408a57:	jne    40887d <_start@@Base+0x1f1d>
  408a5d:	xor    edx,edx
  408a5f:	lea    rcx,[rip+0xfffffffffffffc3a]        # 4086a0 <_start@@Base+0x1d40>
  408a66:	mov    esi,0xe
  408a6b:	mov    rdi,rbx
  408a6e:	call   41a8a0 <flatcc_verify_table_field@@Base>
  408a73:	test   eax,eax
  408a75:	jne    40887d <_start@@Base+0x1f1d>
  408a7b:	mov    ecx,0x1
  408a80:	mov    edx,0x1
  408a85:	mov    esi,0xf
  408a8a:	mov    rdi,rbx
  408a8d:	call   41a510 <flatcc_verify_field@@Base>
  408a92:	test   eax,eax
  408a94:	jne    40887d <_start@@Base+0x1f1d>
  408a9a:	mov    ecx,0x4
  408a9f:	mov    edx,0x4
  408aa4:	mov    esi,0x10
  408aa9:	mov    rdi,rbx
  408aac:	call   41a510 <flatcc_verify_field@@Base>
  408ab1:	test   eax,eax
  408ab3:	jne    40887d <_start@@Base+0x1f1d>
  408ab9:	mov    ecx,0x4
  408abe:	mov    edx,0x4
  408ac3:	mov    esi,0x11
  408ac8:	mov    rdi,rbx
  408acb:	call   41a510 <flatcc_verify_field@@Base>
  408ad0:	test   eax,eax
  408ad2:	jne    40887d <_start@@Base+0x1f1d>
  408ad8:	mov    ecx,0x8
  408add:	mov    edx,0x8
  408ae2:	mov    esi,0x12
  408ae7:	mov    rdi,rbx
  408aea:	call   41a510 <flatcc_verify_field@@Base>
  408aef:	test   eax,eax
  408af1:	jne    40887d <_start@@Base+0x1f1d>
  408af7:	mov    ecx,0x8
  408afc:	mov    edx,0x8
  408b01:	mov    esi,0x13
  408b06:	mov    rdi,rbx
  408b09:	call   41a510 <flatcc_verify_field@@Base>
  408b0e:	test   eax,eax
  408b10:	jne    40887d <_start@@Base+0x1f1d>
  408b16:	mov    ecx,0x4
  408b1b:	mov    edx,0x4
  408b20:	mov    esi,0x14
  408b25:	mov    rdi,rbx
  408b28:	call   41a510 <flatcc_verify_field@@Base>
  408b2d:	test   eax,eax
  408b2f:	jne    40887d <_start@@Base+0x1f1d>
  408b35:	mov    ecx,0x4
  408b3a:	mov    edx,0x4
  408b3f:	mov    esi,0x15
  408b44:	mov    rdi,rbx
  408b47:	call   41a510 <flatcc_verify_field@@Base>
  408b4c:	test   eax,eax
  408b4e:	jne    40887d <_start@@Base+0x1f1d>
  408b54:	mov    ecx,0x8
  408b59:	mov    edx,0x8
  408b5e:	mov    esi,0x16
  408b63:	mov    rdi,rbx
  408b66:	call   41a510 <flatcc_verify_field@@Base>
  408b6b:	test   eax,eax
  408b6d:	jne    40887d <_start@@Base+0x1f1d>
  408b73:	mov    ecx,0x8
  408b78:	mov    edx,0x8
  408b7d:	mov    esi,0x17
  408b82:	mov    rdi,rbx
  408b85:	call   41a510 <flatcc_verify_field@@Base>
  408b8a:	test   eax,eax
  408b8c:	jne    40887d <_start@@Base+0x1f1d>
  408b92:	mov    ecx,0x4
  408b97:	mov    edx,0x4
  408b9c:	mov    esi,0x19
  408ba1:	mov    rdi,rbx
  408ba4:	call   41a510 <flatcc_verify_field@@Base>
  408ba9:	test   eax,eax
  408bab:	jne    40887d <_start@@Base+0x1f1d>
  408bb1:	mov    ecx,0x4
  408bb6:	mov    edx,0x4
  408bbb:	mov    esi,0x1a
  408bc0:	mov    rdi,rbx
  408bc3:	call   41a510 <flatcc_verify_field@@Base>
  408bc8:	test   eax,eax
  408bca:	jne    40887d <_start@@Base+0x1f1d>
  408bd0:	mov    ecx,0x4
  408bd5:	mov    edx,0x4
  408bda:	mov    esi,0x1b
  408bdf:	mov    rdi,rbx
  408be2:	call   41a510 <flatcc_verify_field@@Base>
  408be7:	test   eax,eax
  408be9:	jne    40887d <_start@@Base+0x1f1d>
  408bef:	xor    edx,edx
  408bf1:	mov    r9d,0xffffffff
  408bf7:	mov    r8d,0x1
  408bfd:	mov    ecx,0x1
  408c02:	mov    esi,0x1e
  408c07:	mov    rdi,rbx
  408c0a:	call   41a610 <flatcc_verify_vector_field@@Base>
  408c0f:	test   eax,eax
  408c11:	jne    40887d <_start@@Base+0x1f1d>
  408c17:	xor    edx,edx
  408c19:	mov    r9d,0x1fffffff
  408c1f:	mov    r8d,0x8
  408c25:	mov    ecx,0x8
  408c2a:	mov    esi,0x20
  408c2f:	mov    rdi,rbx
  408c32:	call   41a610 <flatcc_verify_vector_field@@Base>
  408c37:	test   eax,eax
  408c39:	jne    40887d <_start@@Base+0x1f1d>
  408c3f:	xor    edx,edx
  408c41:	mov    r9d,0x1fffffff
  408c47:	mov    r8d,0x8
  408c4d:	mov    ecx,0x8
  408c52:	mov    esi,0x21
  408c57:	mov    rdi,rbx
  408c5a:	call   41a610 <flatcc_verify_vector_field@@Base>
  408c5f:	test   eax,eax
  408c61:	jne    40887d <_start@@Base+0x1f1d>
  408c67:	xor    edx,edx
  408c69:	lea    rcx,[rip+0xffffffffffffdf20]        # 406b90 <_start@@Base+0x230>
  408c70:	mov    esi,0x22
  408c75:	mov    rdi,rbx
  408c78:	call   41a8a0 <flatcc_verify_table_field@@Base>
  408c7d:	test   eax,eax
  408c7f:	jne    40887d <_start@@Base+0x1f1d>
  408c85:	mov    rdi,rbx
  408c88:	lea    rcx,[rip+0x11]        # 408ca0 <_start@@Base+0x2340>
  408c8f:	xor    edx,edx
  408c91:	mov    esi,0x23
  408c96:	pop    rbx
  408c97:	jmp    41a8a0 <flatcc_verify_table_field@@Base>
  408c9c:	nop    DWORD PTR [rax+0x0]
  408ca0:	endbr64 
  408ca4:	push   rbx
  408ca5:	xor    edx,edx
  408ca7:	xor    esi,esi
  408ca9:	mov    r9d,0xffffffff
  408caf:	mov    r8d,0x1
  408cb5:	mov    ecx,0x1
  408cba:	mov    rbx,rdi
  408cbd:	call   41a610 <flatcc_verify_vector_field@@Base>
  408cc2:	test   eax,eax
  408cc4:	je     408cd0 <_start@@Base+0x2370>
  408cc6:	pop    rbx
  408cc7:	ret    
  408cc8:	nop    DWORD PTR [rax+rax*1+0x0]
  408cd0:	xor    edx,edx
  408cd2:	mov    r9d,0xffffffff
  408cd8:	mov    r8d,0x1
  408cde:	mov    ecx,0x1
  408ce3:	mov    esi,0x1
  408ce8:	mov    rdi,rbx
  408ceb:	call   41a610 <flatcc_verify_vector_field@@Base>
  408cf0:	test   eax,eax
  408cf2:	jne    408cc6 <_start@@Base+0x2366>
  408cf4:	mov    rdi,rbx
  408cf7:	lea    r9,[rip+0xfffffffffffffb62]        # 408860 <_start@@Base+0x1f00>
  408cfe:	mov    r8d,0x1
  408d04:	xor    ecx,ecx
  408d06:	xor    edx,edx
  408d08:	mov    esi,0x2
  408d0d:	pop    rbx
  408d0e:	jmp    41b4e0 <flatcc_verify_table_as_nested_root@@Base>
  408d13:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  408d1e:	xchg   ax,ax
  408d20:	endbr64 
  408d24:	movzx  eax,BYTE PTR [rdi+0x10]
  408d28:	cmp    al,0x2
  408d2a:	je     408d60 <_start@@Base+0x2400>
  408d2c:	jbe    408d48 <_start@@Base+0x23e8>
  408d2e:	cmp    al,0x3
  408d30:	je     408d70 <_start@@Base+0x2410>
  408d32:	cmp    al,0x4
  408d34:	jne    408d80 <_start@@Base+0x2420>
  408d36:	lea    rsi,[rip+0x53]        # 408d90 <_start@@Base+0x2430>
  408d3d:	jmp    41ad80 <flatcc_verify_union_table@@Base>
  408d42:	nop    WORD PTR [rax+rax*1+0x0]
  408d48:	cmp    al,0x1
  408d4a:	jne    408d80 <_start@@Base+0x2420>
  408d4c:	lea    rsi,[rip+0xfffffffffffffb0d]        # 408860 <_start@@Base+0x1f00>
  408d53:	jmp    41ad80 <flatcc_verify_union_table@@Base>
  408d58:	nop    DWORD PTR [rax+rax*1+0x0]
  408d60:	lea    rsi,[rip+0xfffffffffffff8c9]        # 408630 <_start@@Base+0x1cd0>
  408d67:	jmp    41ad80 <flatcc_verify_union_table@@Base>
  408d6c:	nop    DWORD PTR [rax+0x0]
  408d70:	lea    rsi,[rip+0x5d9]        # 409350 <_start@@Base+0x29f0>
  408d77:	jmp    41ad80 <flatcc_verify_union_table@@Base>
  408d7c:	nop    DWORD PTR [rax+0x0]
  408d80:	xor    eax,eax
  408d82:	ret    
  408d83:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  408d8e:	xchg   ax,ax
  408d90:	endbr64 
  408d94:	push   rbx
  408d95:	xor    edx,edx
  408d97:	xor    esi,esi
  408d99:	lea    rcx,[rip+0xfffffffffffffa60]        # 408800 <_start@@Base+0x1ea0>
  408da0:	mov    rbx,rdi
  408da3:	call   41a8a0 <flatcc_verify_table_field@@Base>
  408da8:	test   eax,eax
  408daa:	je     408db0 <_start@@Base+0x2450>
  408dac:	pop    rbx
  408dad:	ret    
  408dae:	xchg   ax,ax
  408db0:	xor    edx,edx
  408db2:	lea    rcx,[rip+0x37]        # 408df0 <_start@@Base+0x2490>
  408db9:	mov    esi,0x1
  408dbe:	mov    rdi,rbx
  408dc1:	call   41a8a0 <flatcc_verify_table_field@@Base>
  408dc6:	test   eax,eax
  408dc8:	jne    408dac <_start@@Base+0x244c>
  408dca:	mov    rdi,rbx
  408dcd:	lea    rcx,[rip+0xffffffffffffff4c]        # 408d20 <_start@@Base+0x23c0>
  408dd4:	xor    edx,edx
  408dd6:	mov    esi,0x3
  408ddb:	pop    rbx
  408ddc:	jmp    41b830 <flatcc_verify_union_vector_field@@Base>
  408de1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  408dec:	nop    DWORD PTR [rax+0x0]
  408df0:	endbr64 
  408df4:	push   rbx
  408df5:	xor    edx,edx
  408df7:	lea    rcx,[rip+0x82]        # 408e80 <_start@@Base+0x2520>
  408dfe:	mov    esi,0x1
  408e03:	mov    rbx,rdi
  408e06:	call   41b6c0 <flatcc_verify_union_field@@Base>
  408e0b:	test   eax,eax
  408e0d:	je     408e18 <_start@@Base+0x24b8>
  408e0f:	pop    rbx
  408e10:	ret    
  408e11:	nop    DWORD PTR [rax+0x0]
  408e18:	xor    edx,edx
  408e1a:	lea    rcx,[rip+0x5f]        # 408e80 <_start@@Base+0x2520>
  408e21:	mov    esi,0x3
  408e26:	mov    rdi,rbx
  408e29:	call   41b6c0 <flatcc_verify_union_field@@Base>
  408e2e:	test   eax,eax
  408e30:	jne    408e0f <_start@@Base+0x24af>
  408e32:	xor    edx,edx
  408e34:	lea    rcx,[rip+0x45]        # 408e80 <_start@@Base+0x2520>
  408e3b:	mov    esi,0x5
  408e40:	mov    rdi,rbx
  408e43:	call   41b6c0 <flatcc_verify_union_field@@Base>
  408e48:	test   eax,eax
  408e4a:	jne    408e0f <_start@@Base+0x24af>
  408e4c:	xor    edx,edx
  408e4e:	lea    rcx,[rip+0x2b]        # 408e80 <_start@@Base+0x2520>
  408e55:	mov    esi,0x7
  408e5a:	mov    rdi,rbx
  408e5d:	call   41b6c0 <flatcc_verify_union_field@@Base>
  408e62:	test   eax,eax
  408e64:	jne    408e0f <_start@@Base+0x24af>
  408e66:	mov    rdi,rbx
  408e69:	lea    rcx,[rip+0x10]        # 408e80 <_start@@Base+0x2520>
  408e70:	xor    edx,edx
  408e72:	mov    esi,0x9
  408e77:	pop    rbx
  408e78:	jmp    41b830 <flatcc_verify_union_vector_field@@Base>
  408e7d:	nop    DWORD PTR [rax]
  408e80:	endbr64 
  408e84:	movzx  eax,BYTE PTR [rdi+0x10]
  408e88:	cmp    al,0xa
  408e8a:	ja     408eb0 <_start@@Base+0x2550>
  408e8c:	cmp    al,0x9
  408e8e:	jae    408ec0 <_start@@Base+0x2560>
  408e90:	cmp    al,0x2
  408e92:	je     408ed8 <_start@@Base+0x2578>
  408e94:	cmp    al,0x8
  408e96:	jne    408ed0 <_start@@Base+0x2570>
  408e98:	mov    edx,0x2
  408e9d:	mov    esi,0x2
  408ea2:	jmp    41aea0 <flatcc_verify_union_struct@@Base>
  408ea7:	nop    WORD PTR [rax+rax*1+0x0]
  408eb0:	cmp    al,0xb
  408eb2:	je     408eb8 <_start@@Base+0x2558>
  408eb4:	cmp    al,0xff
  408eb6:	jne    408ed0 <_start@@Base+0x2570>
  408eb8:	jmp    41aef0 <flatcc_verify_union_string@@Base>
  408ebd:	nop    DWORD PTR [rax]
  408ec0:	mov    edx,0x4
  408ec5:	mov    esi,0x4
  408eca:	jmp    41aea0 <flatcc_verify_union_struct@@Base>
  408ecf:	nop
  408ed0:	xor    eax,eax
  408ed2:	ret    
  408ed3:	nop    DWORD PTR [rax+rax*1+0x0]
  408ed8:	lea    rsi,[rip+0xffffffffffffdcc1]        # 406ba0 <_start@@Base+0x240>
  408edf:	jmp    41ad80 <flatcc_verify_union_table@@Base>
  408ee4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  408eef:	nop
  408ef0:	endbr64 
  408ef4:	cmp    sil,0x2
  408ef8:	je     408f40 <_start@@Base+0x25e0>
  408efa:	jbe    408f20 <_start@@Base+0x25c0>
  408efc:	cmp    sil,0x3
  408f00:	je     408f70 <_start@@Base+0x2610>
  408f02:	cmp    sil,0x4
  408f06:	jne    408f58 <_start@@Base+0x25f8>
  408f08:	mov    edx,0x3
  408f0d:	lea    rsi,[rip+0x225c6]        # 42b4da <_IO_stdin_used@@Base+0x4da>
  408f14:	jmp    421860 <flatcc_json_printer_enum@@Base>
  408f19:	nop    DWORD PTR [rax+0x0]
  408f20:	cmp    sil,0x1
  408f24:	jne    408f58 <_start@@Base+0x25f8>
  408f26:	mov    edx,0x7
  408f2b:	lea    rsi,[rip+0x2257f]        # 42b4b1 <_IO_stdin_used@@Base+0x4b1>
  408f32:	jmp    421860 <flatcc_json_printer_enum@@Base>
  408f37:	nop    WORD PTR [rax+rax*1+0x0]
  408f40:	mov    edx,0x17
  408f45:	lea    rsi,[rip+0x2256d]        # 42b4b9 <_IO_stdin_used@@Base+0x4b9>
  408f4c:	jmp    421860 <flatcc_json_printer_enum@@Base>
  408f51:	nop    DWORD PTR [rax+0x0]
  408f58:	mov    edx,0x4
  408f5d:	lea    rsi,[rip+0x26894]        # 42f7f8 <flatcc_builder_padding_base@@Base+0xad8>
  408f64:	jmp    421860 <flatcc_json_printer_enum@@Base>
  408f69:	nop    DWORD PTR [rax+0x0]
  408f70:	mov    edx,0x8
  408f75:	lea    rsi,[rip+0x22555]        # 42b4d1 <_IO_stdin_used@@Base+0x4d1>
  408f7c:	jmp    421860 <flatcc_json_printer_enum@@Base>
  408f81:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  408f8c:	nop    DWORD PTR [rax+0x0]
  408f90:	push   r13
  408f92:	push   r12
  408f94:	push   rbp
  408f95:	push   rbx
  408f96:	sub    rsp,0x28
  408f9a:	mov    rax,QWORD PTR fs:0x28
  408fa3:	mov    QWORD PTR [rsp+0x18],rax
  408fa8:	xor    eax,eax
  408faa:	mov    QWORD PTR [rsp+0x10],0x0
  408fb3:	mov    DWORD PTR [rsp+0xc],0x0
  408fbb:	mov    QWORD PTR [rcx],0x0
  408fc2:	mov    rax,rsi
  408fc5:	cmp    rsi,rdx
  408fc8:	je     408fea <_start@@Base+0x268a>
  408fca:	mov    r12,rcx
  408fcd:	lea    r8,[rsp+0x10]
  408fd2:	lea    rcx,[rsp+0xc]
  408fd7:	mov    rbp,rsi
  408fda:	mov    r13,rdi
  408fdd:	mov    rbx,rdx
  408fe0:	call   41d880 <flatcc_json_parser_integer@@Base>
  408fe5:	cmp    rbp,rax
  408fe8:	jne    409008 <_start@@Base+0x26a8>
  408fea:	mov    rsi,QWORD PTR [rsp+0x18]
  408fef:	xor    rsi,QWORD PTR fs:0x28
  408ff8:	jne    409070 <_start@@Base+0x2710>
  408ffa:	add    rsp,0x28
  408ffe:	pop    rbx
  408fff:	pop    rbp
  409000:	pop    r12
  409002:	pop    r13
  409004:	ret    
  409005:	nop    DWORD PTR [rax]
  409008:	mov    ecx,DWORD PTR [rsp+0xc]
  40900c:	mov    rdx,QWORD PTR [rsp+0x10]
  409011:	test   ecx,ecx
  409013:	je     409030 <_start@@Base+0x26d0>
  409015:	movabs rcx,0x8000000000000000
  40901f:	cmp    rdx,rcx
  409022:	ja     409040 <_start@@Base+0x26e0>
  409024:	neg    rdx
  409027:	mov    QWORD PTR [r12],rdx
  40902b:	jmp    408fea <_start@@Base+0x268a>
  40902d:	nop    DWORD PTR [rax]
  409030:	test   rdx,rdx
  409033:	js     409058 <_start@@Base+0x26f8>
  409035:	mov    QWORD PTR [r12],rdx
  409039:	jmp    408fea <_start@@Base+0x268a>
  40903b:	nop    DWORD PTR [rax+rax*1+0x0]
  409040:	mov    ecx,0x8
  409045:	mov    rdx,rbx
  409048:	mov    rsi,rax
  40904b:	mov    rdi,r13
  40904e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  409053:	jmp    408fea <_start@@Base+0x268a>
  409055:	nop    DWORD PTR [rax]
  409058:	mov    ecx,0x7
  40905d:	mov    rdx,rbx
  409060:	mov    rsi,rax
  409063:	mov    rdi,r13
  409066:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40906b:	jmp    408fea <_start@@Base+0x268a>
  409070:	call   4061a0 <__stack_chk_fail@plt>
  409075:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  409080:	push   r13
  409082:	mov    rax,rdx
  409085:	sub    rax,rsi
  409088:	push   r12
  40908a:	mov    r11,rdi
  40908d:	mov    r10,rdx
  409090:	push   rbp
  409091:	mov    r12,r8
  409094:	mov    rbp,rcx
  409097:	push   rbx
  409098:	mov    rbx,rsi
  40909b:	sub    rsp,0x8
  40909f:	cmp    rax,0x7
  4090a3:	ja     4091c8 <_start@@Base+0x2868>
  4090a9:	mov    rsi,rdx
  4090ac:	mov    rdi,rbx
  4090af:	call   406a50 <_start@@Base+0xf0>
  4090b4:	movabs rdx,0x496e506172656e74
  4090be:	cmp    rax,rdx
  4090c1:	je     409128 <_start@@Base+0x27c8>
  4090c3:	movabs rdx,0xffffffff00000000
  4090cd:	and    rax,rdx
  4090d0:	movabs rdx,0x4e4f4e4500000000
  4090da:	cmp    rax,rdx
  4090dd:	je     4090f0 <_start@@Base+0x2790>
  4090df:	mov    rax,rbx
  4090e2:	add    rsp,0x8
  4090e6:	pop    rbx
  4090e7:	pop    rbp
  4090e8:	pop    r12
  4090ea:	pop    r13
  4090ec:	ret    
  4090ed:	nop    DWORD PTR [rax]
  4090f0:	mov    r8,r9
  4090f3:	mov    ecx,0x4
  4090f8:	mov    rdx,r10
  4090fb:	mov    rsi,rbx
  4090fe:	mov    rdi,r11
  409101:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  409106:	cmp    rbx,rax
  409109:	je     4090e2 <_start@@Base+0x2782>
  40910b:	mov    QWORD PTR [r12],0x0
  409113:	mov    DWORD PTR [rbp+0x0],0x0
  40911a:	add    rsp,0x8
  40911e:	pop    rbx
  40911f:	pop    rbp
  409120:	pop    r12
  409122:	pop    r13
  409124:	ret    
  409125:	nop    DWORD PTR [rax]
  409128:	lea    rdi,[rbx+0x8]
  40912c:	mov    rax,r10
  40912f:	sub    rax,rdi
  409132:	cmp    rax,0x7
  409136:	ja     4091d8 <_start@@Base+0x2878>
  40913c:	mov    rsi,r10
  40913f:	call   406a50 <_start@@Base+0xf0>
  409144:	movabs rdx,0x4e616d6573706163
  40914e:	cmp    rax,rdx
  409151:	jne    4090df <_start@@Base+0x277f>
  409153:	lea    r13,[rbx+0x10]
  409157:	mov    rax,r10
  40915a:	sub    rax,r13
  40915d:	cmp    rax,0x7
  409161:	ja     4091e8 <_start@@Base+0x2888>
  409167:	mov    rsi,r10
  40916a:	mov    rdi,r13
  40916d:	call   406a50 <_start@@Base+0xf0>
  409172:	movabs rdx,0xff00000000000000
  40917c:	and    rax,rdx
  40917f:	movabs rdx,0x6500000000000000
  409189:	cmp    rax,rdx
  40918c:	jne    4090df <_start@@Base+0x277f>
  409192:	mov    r8,r9
  409195:	mov    ecx,0x1
  40919a:	mov    rdx,r10
  40919d:	mov    rsi,r13
  4091a0:	mov    rdi,r11
  4091a3:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  4091a8:	cmp    r13,rax
  4091ab:	je     4090df <_start@@Base+0x277f>
  4091b1:	mov    QWORD PTR [r12],0x1
  4091b9:	mov    DWORD PTR [rbp+0x0],0x0
  4091c0:	jmp    4090e2 <_start@@Base+0x2782>
  4091c5:	nop    DWORD PTR [rax]
  4091c8:	movbe  rax,QWORD PTR [rsi]
  4091cd:	jmp    4090b4 <_start@@Base+0x2754>
  4091d2:	nop    WORD PTR [rax+rax*1+0x0]
  4091d8:	movbe  rax,QWORD PTR [rbx+0x8]
  4091de:	jmp    409144 <_start@@Base+0x27e4>
  4091e3:	nop    DWORD PTR [rax+rax*1+0x0]
  4091e8:	movbe  rax,QWORD PTR [rbx+0x10]
  4091ee:	jmp    409172 <_start@@Base+0x2812>
  4091f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4091fe:	xchg   ax,ax
  409200:	push   r12
  409202:	mov    rax,rdx
  409205:	sub    rax,rsi
  409208:	push   rbp
  409209:	mov    r11,rdi
  40920c:	mov    r10,rdx
  40920f:	push   rbx
  409210:	mov    rbp,rcx
  409213:	mov    rbx,rsi
  409216:	mov    r12,r8
  409219:	cmp    rax,0x7
  40921d:	ja     409250 <_start@@Base+0x28f0>
  40921f:	mov    rsi,rdx
  409222:	mov    rdi,rbx
  409225:	call   406a50 <_start@@Base+0xf0>
  40922a:	movabs rdx,0xff00000000000000
  409234:	and    rax,rdx
  409237:	movabs rdx,0x7800000000000000
  409241:	cmp    rax,rdx
  409244:	je     409260 <_start@@Base+0x2900>
  409246:	mov    rax,rbx
  409249:	pop    rbx
  40924a:	pop    rbp
  40924b:	pop    r12
  40924d:	ret    
  40924e:	xchg   ax,ax
  409250:	movbe  rax,QWORD PTR [rsi]
  409255:	jmp    40922a <_start@@Base+0x28ca>
  409257:	nop    WORD PTR [rax+rax*1+0x0]
  409260:	mov    r8,r9
  409263:	mov    ecx,0x1
  409268:	mov    rdx,r10
  40926b:	mov    rsi,rbx
  40926e:	mov    rdi,r11
  409271:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  409276:	cmp    rbx,rax
  409279:	je     409246 <_start@@Base+0x28e6>
  40927b:	mov    rbx,rax
  40927e:	mov    rax,rbx
  409281:	pop    rbx
  409282:	mov    QWORD PTR [r12],0x0
  40928a:	mov    DWORD PTR [rbp+0x0],0x0
  409291:	pop    rbp
  409292:	pop    r12
  409294:	ret    
  409295:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4092a0:	push   r13
  4092a2:	push   r12
  4092a4:	push   rbp
  4092a5:	push   rbx
  4092a6:	sub    rsp,0x28
  4092aa:	mov    rax,QWORD PTR fs:0x28
  4092b3:	mov    QWORD PTR [rsp+0x18],rax
  4092b8:	xor    eax,eax
  4092ba:	mov    QWORD PTR [rsp+0x10],0x0
  4092c3:	mov    DWORD PTR [rsp+0xc],0x0
  4092cb:	mov    QWORD PTR [rcx],0x0
  4092d2:	mov    rax,rsi
  4092d5:	cmp    rsi,rdx
  4092d8:	je     40930b <_start@@Base+0x29ab>
  4092da:	mov    r12,rcx
  4092dd:	lea    r8,[rsp+0x10]
  4092e2:	lea    rcx,[rsp+0xc]
  4092e7:	mov    rbp,rsi
  4092ea:	mov    r13,rdi
  4092ed:	mov    rbx,rdx
  4092f0:	call   41d880 <flatcc_json_parser_integer@@Base>
  4092f5:	cmp    rbp,rax
  4092f8:	je     40930b <_start@@Base+0x29ab>
  4092fa:	mov    edx,DWORD PTR [rsp+0xc]
  4092fe:	test   edx,edx
  409300:	jne    409330 <_start@@Base+0x29d0>
  409302:	mov    rdx,QWORD PTR [rsp+0x10]
  409307:	mov    QWORD PTR [r12],rdx
  40930b:	mov    rsi,QWORD PTR [rsp+0x18]
  409310:	xor    rsi,QWORD PTR fs:0x28
  409319:	jne    409345 <_start@@Base+0x29e5>
  40931b:	add    rsp,0x28
  40931f:	pop    rbx
  409320:	pop    rbp
  409321:	pop    r12
  409323:	pop    r13
  409325:	ret    
  409326:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409330:	mov    ecx,0x8
  409335:	mov    rdx,rbx
  409338:	mov    rsi,rax
  40933b:	mov    rdi,r13
  40933e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  409343:	jmp    40930b <_start@@Base+0x29ab>
  409345:	call   4061a0 <__stack_chk_fail@plt>
  40934a:	nop    WORD PTR [rax+rax*1+0x0]
  409350:	endbr64 
  409354:	xor    eax,eax
  409356:	ret    
  409357:	nop    WORD PTR [rax+rax*1+0x0]
  409360:	endbr64 
  409364:	ret    
  409365:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  409370:	push   r13
  409372:	push   r12
  409374:	push   rbp
  409375:	push   rbx
  409376:	sub    rsp,0x28
  40937a:	mov    rax,QWORD PTR fs:0x28
  409383:	mov    QWORD PTR [rsp+0x18],rax
  409388:	xor    eax,eax
  40938a:	mov    QWORD PTR [rsp+0x10],0x0
  409393:	mov    DWORD PTR [rsp+0xc],0x0
  40939b:	mov    DWORD PTR [rcx],0x0
  4093a1:	mov    rax,rsi
  4093a4:	cmp    rsi,rdx
  4093a7:	je     4093c9 <_start@@Base+0x2a69>
  4093a9:	mov    r12,rcx
  4093ac:	lea    r8,[rsp+0x10]
  4093b1:	lea    rcx,[rsp+0xc]
  4093b6:	mov    rbp,rsi
  4093b9:	mov    r13,rdi
  4093bc:	mov    rbx,rdx
  4093bf:	call   41d880 <flatcc_json_parser_integer@@Base>
  4093c4:	cmp    rbp,rax
  4093c7:	jne    4093e8 <_start@@Base+0x2a88>
  4093c9:	mov    rsi,QWORD PTR [rsp+0x18]
  4093ce:	xor    rsi,QWORD PTR fs:0x28
  4093d7:	jne    409435 <_start@@Base+0x2ad5>
  4093d9:	add    rsp,0x28
  4093dd:	pop    rbx
  4093de:	pop    rbp
  4093df:	pop    r12
  4093e1:	pop    r13
  4093e3:	ret    
  4093e4:	nop    DWORD PTR [rax+0x0]
  4093e8:	mov    edx,DWORD PTR [rsp+0xc]
  4093ec:	test   edx,edx
  4093ee:	jne    409408 <_start@@Base+0x2aa8>
  4093f0:	mov    rdx,QWORD PTR [rsp+0x10]
  4093f5:	mov    ecx,0xffffffff
  4093fa:	cmp    rdx,rcx
  4093fd:	ja     409420 <_start@@Base+0x2ac0>
  4093ff:	mov    DWORD PTR [r12],edx
  409403:	jmp    4093c9 <_start@@Base+0x2a69>
  409405:	nop    DWORD PTR [rax]
  409408:	mov    ecx,0x8
  40940d:	mov    rdx,rbx
  409410:	mov    rsi,rax
  409413:	mov    rdi,r13
  409416:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40941b:	jmp    4093c9 <_start@@Base+0x2a69>
  40941d:	nop    DWORD PTR [rax]
  409420:	mov    ecx,0x7
  409425:	mov    rdx,rbx
  409428:	mov    rsi,rax
  40942b:	mov    rdi,r13
  40942e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  409433:	jmp    4093c9 <_start@@Base+0x2a69>
  409435:	call   4061a0 <__stack_chk_fail@plt>
  40943a:	nop    WORD PTR [rax+rax*1+0x0]
  409440:	push   r13
  409442:	push   r12
  409444:	push   rbp
  409445:	push   rbx
  409446:	sub    rsp,0x28
  40944a:	mov    rax,QWORD PTR fs:0x28
  409453:	mov    QWORD PTR [rsp+0x18],rax
  409458:	xor    eax,eax
  40945a:	mov    QWORD PTR [rsp+0x10],0x0
  409463:	mov    DWORD PTR [rsp+0xc],0x0
  40946b:	mov    BYTE PTR [rcx],0x0
  40946e:	mov    rax,rsi
  409471:	cmp    rsi,rdx
  409474:	je     409496 <_start@@Base+0x2b36>
  409476:	mov    r12,rcx
  409479:	lea    r8,[rsp+0x10]
  40947e:	lea    rcx,[rsp+0xc]
  409483:	mov    rbp,rsi
  409486:	mov    r13,rdi
  409489:	mov    rbx,rdx
  40948c:	call   41d880 <flatcc_json_parser_integer@@Base>
  409491:	cmp    rbp,rax
  409494:	jne    4094b8 <_start@@Base+0x2b58>
  409496:	mov    rsi,QWORD PTR [rsp+0x18]
  40949b:	xor    rsi,QWORD PTR fs:0x28
  4094a4:	jne    409505 <_start@@Base+0x2ba5>
  4094a6:	add    rsp,0x28
  4094aa:	pop    rbx
  4094ab:	pop    rbp
  4094ac:	pop    r12
  4094ae:	pop    r13
  4094b0:	ret    
  4094b1:	nop    DWORD PTR [rax+0x0]
  4094b8:	mov    edx,DWORD PTR [rsp+0xc]
  4094bc:	test   edx,edx
  4094be:	jne    4094d8 <_start@@Base+0x2b78>
  4094c0:	mov    rdx,QWORD PTR [rsp+0x10]
  4094c5:	cmp    rdx,0xff
  4094cc:	ja     4094f0 <_start@@Base+0x2b90>
  4094ce:	mov    BYTE PTR [r12],dl
  4094d2:	jmp    409496 <_start@@Base+0x2b36>
  4094d4:	nop    DWORD PTR [rax+0x0]
  4094d8:	mov    ecx,0x8
  4094dd:	mov    rdx,rbx
  4094e0:	mov    rsi,rax
  4094e3:	mov    rdi,r13
  4094e6:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  4094eb:	jmp    409496 <_start@@Base+0x2b36>
  4094ed:	nop    DWORD PTR [rax]
  4094f0:	mov    ecx,0x7
  4094f5:	mov    rdx,rbx
  4094f8:	mov    rsi,rax
  4094fb:	mov    rdi,r13
  4094fe:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  409503:	jmp    409496 <_start@@Base+0x2b36>
  409505:	call   4061a0 <__stack_chk_fail@plt>
  40950a:	nop    WORD PTR [rax+rax*1+0x0]
  409510:	push   r13
  409512:	push   r12
  409514:	push   rbp
  409515:	push   rbx
  409516:	sub    rsp,0x28
  40951a:	mov    rax,QWORD PTR fs:0x28
  409523:	mov    QWORD PTR [rsp+0x18],rax
  409528:	xor    eax,eax
  40952a:	mov    QWORD PTR [rsp+0x10],0x0
  409533:	mov    DWORD PTR [rsp+0xc],0x0
  40953b:	mov    DWORD PTR [rcx],0x0
  409541:	mov    rax,rsi
  409544:	cmp    rsi,rdx
  409547:	je     409569 <_start@@Base+0x2c09>
  409549:	mov    r12,rcx
  40954c:	lea    r8,[rsp+0x10]
  409551:	lea    rcx,[rsp+0xc]
  409556:	mov    rbp,rsi
  409559:	mov    r13,rdi
  40955c:	mov    rbx,rdx
  40955f:	call   41d880 <flatcc_json_parser_integer@@Base>
  409564:	cmp    rbp,rax
  409567:	jne    409588 <_start@@Base+0x2c28>
  409569:	mov    rsi,QWORD PTR [rsp+0x18]
  40956e:	xor    rsi,QWORD PTR fs:0x28
  409577:	jne    4095f0 <_start@@Base+0x2c90>
  409579:	add    rsp,0x28
  40957d:	pop    rbx
  40957e:	pop    rbp
  40957f:	pop    r12
  409581:	pop    r13
  409583:	ret    
  409584:	nop    DWORD PTR [rax+0x0]
  409588:	mov    ecx,DWORD PTR [rsp+0xc]
  40958c:	mov    rdx,QWORD PTR [rsp+0x10]
  409591:	test   ecx,ecx
  409593:	je     4095b0 <_start@@Base+0x2c50>
  409595:	mov    ecx,0x80000000
  40959a:	cmp    rdx,rcx
  40959d:	ja     4095d8 <_start@@Base+0x2c78>
  40959f:	neg    edx
  4095a1:	mov    DWORD PTR [r12],edx
  4095a5:	jmp    409569 <_start@@Base+0x2c09>
  4095a7:	nop    WORD PTR [rax+rax*1+0x0]
  4095b0:	cmp    rdx,0x7fffffff
  4095b7:	ja     4095c0 <_start@@Base+0x2c60>
  4095b9:	mov    DWORD PTR [r12],edx
  4095bd:	jmp    409569 <_start@@Base+0x2c09>
  4095bf:	nop
  4095c0:	mov    ecx,0x7
  4095c5:	mov    rdx,rbx
  4095c8:	mov    rsi,rax
  4095cb:	mov    rdi,r13
  4095ce:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  4095d3:	jmp    409569 <_start@@Base+0x2c09>
  4095d5:	nop    DWORD PTR [rax]
  4095d8:	mov    ecx,0x8
  4095dd:	mov    rdx,rbx
  4095e0:	mov    rsi,rax
  4095e3:	mov    rdi,r13
  4095e6:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  4095eb:	jmp    409569 <_start@@Base+0x2c09>
  4095f0:	call   4061a0 <__stack_chk_fail@plt>
  4095f5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  409600:	push   r13
  409602:	xor    r8d,r8d
  409605:	push   r12
  409607:	push   rbp
  409608:	push   rbx
  409609:	sub    rsp,0x28
  40960d:	mov    rax,QWORD PTR fs:0x28
  409616:	mov    QWORD PTR [rsp+0x18],rax
  40961b:	xor    eax,eax
  40961d:	mov    QWORD PTR [rsp+0x10],0x0
  409626:	mov    DWORD PTR [rsp+0xc],0x0
  40962e:	mov    WORD PTR [rcx],r8w
  409632:	mov    rax,rsi
  409635:	cmp    rsi,rdx
  409638:	je     40965a <_start@@Base+0x2cfa>
  40963a:	mov    r12,rcx
  40963d:	lea    r8,[rsp+0x10]
  409642:	lea    rcx,[rsp+0xc]
  409647:	mov    rbp,rsi
  40964a:	mov    r13,rdi
  40964d:	mov    rbx,rdx
  409650:	call   41d880 <flatcc_json_parser_integer@@Base>
  409655:	cmp    rbp,rax
  409658:	jne    409678 <_start@@Base+0x2d18>
  40965a:	mov    rsi,QWORD PTR [rsp+0x18]
  40965f:	xor    rsi,QWORD PTR fs:0x28
  409668:	jne    4096e0 <_start@@Base+0x2d80>
  40966a:	add    rsp,0x28
  40966e:	pop    rbx
  40966f:	pop    rbp
  409670:	pop    r12
  409672:	pop    r13
  409674:	ret    
  409675:	nop    DWORD PTR [rax]
  409678:	mov    ecx,DWORD PTR [rsp+0xc]
  40967c:	mov    rdx,QWORD PTR [rsp+0x10]
  409681:	test   ecx,ecx
  409683:	je     4096a0 <_start@@Base+0x2d40>
  409685:	cmp    rdx,0x8000
  40968c:	ja     4096c8 <_start@@Base+0x2d68>
  40968e:	neg    edx
  409690:	mov    WORD PTR [r12],dx
  409695:	jmp    40965a <_start@@Base+0x2cfa>
  409697:	nop    WORD PTR [rax+rax*1+0x0]
  4096a0:	cmp    rdx,0x7fff
  4096a7:	ja     4096b0 <_start@@Base+0x2d50>
  4096a9:	mov    WORD PTR [r12],dx
  4096ae:	jmp    40965a <_start@@Base+0x2cfa>
  4096b0:	mov    ecx,0x7
  4096b5:	mov    rdx,rbx
  4096b8:	mov    rsi,rax
  4096bb:	mov    rdi,r13
  4096be:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  4096c3:	jmp    40965a <_start@@Base+0x2cfa>
  4096c5:	nop    DWORD PTR [rax]
  4096c8:	mov    ecx,0x8
  4096cd:	mov    rdx,rbx
  4096d0:	mov    rsi,rax
  4096d3:	mov    rdi,r13
  4096d6:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  4096db:	jmp    40965a <_start@@Base+0x2cfa>
  4096e0:	call   4061a0 <__stack_chk_fail@plt>
  4096e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4096f0:	endbr64 
  4096f4:	push   rbx
  4096f5:	xor    esi,esi
  4096f7:	mov    ecx,0x8
  4096fc:	mov    edx,0x8
  409701:	mov    rbx,rdi
  409704:	call   41a510 <flatcc_verify_field@@Base>
  409709:	test   eax,eax
  40970b:	je     409710 <_start@@Base+0x2db0>
  40970d:	pop    rbx
  40970e:	ret    
  40970f:	nop
  409710:	mov    rdi,rbx
  409713:	mov    ecx,0x4
  409718:	mov    edx,0x4
  40971d:	mov    esi,0x1
  409722:	pop    rbx
  409723:	jmp    41a510 <flatcc_verify_field@@Base>
  409728:	nop    DWORD PTR [rax+rax*1+0x0]
  409730:	endbr64 
  409734:	push   r13
  409736:	mov    rax,rdx
  409739:	sub    rax,rsi
  40973c:	push   r12
  40973e:	mov    r10,rsi
  409741:	mov    r11,rdx
  409744:	push   rbp
  409745:	mov    rbp,rcx
  409748:	push   rbx
  409749:	mov    rbx,rdi
  40974c:	sub    rsp,0x8
  409750:	cmp    rax,0x7
  409754:	ja     4097c0 <_start@@Base+0x2e60>
  409756:	mov    rsi,rdx
  409759:	mov    rdi,r10
  40975c:	call   406a50 <_start@@Base+0xf0>
  409761:	movabs rdx,0x4368617261637465
  40976b:	cmp    rax,rdx
  40976e:	jne    4097ad <_start@@Base+0x2e4d>
  409770:	lea    r12,[r10+0x8]
  409774:	mov    r13,r11
  409777:	sub    r13,r12
  40977a:	cmp    r13,0x7
  40977e:	ja     4097d0 <_start@@Base+0x2e70>
  409780:	mov    rsi,r11
  409783:	mov    rdi,r12
  409786:	call   406a50 <_start@@Base+0xf0>
  40978b:	movabs rdx,0xff00000000000000
  409795:	and    rax,rdx
  409798:	movabs rdx,0x7200000000000000
  4097a2:	cmp    rax,rdx
  4097a5:	jne    4097ad <_start@@Base+0x2e4d>
  4097a7:	cmp    r13,0x1
  4097ab:	jg     4097e0 <_start@@Base+0x2e80>
  4097ad:	add    rsp,0x8
  4097b1:	pop    rbx
  4097b2:	pop    rbp
  4097b3:	pop    r12
  4097b5:	mov    rax,r10
  4097b8:	pop    r13
  4097ba:	ret    
  4097bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4097c0:	movbe  rax,QWORD PTR [rsi]
  4097c5:	jmp    409761 <_start@@Base+0x2e01>
  4097c7:	nop    WORD PTR [rax+rax*1+0x0]
  4097d0:	movbe  rax,QWORD PTR [r10+0x8]
  4097d6:	jmp    40978b <_start@@Base+0x2e2b>
  4097d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4097e0:	cmp    BYTE PTR [r10+0x9],0x2e
  4097e5:	jne    4097ad <_start@@Base+0x2e4d>
  4097e7:	lea    rsi,[r10+0xa]
  4097eb:	cmp    r12,rsi
  4097ee:	je     4097ad <_start@@Base+0x2e4d>
  4097f0:	add    rsp,0x8
  4097f4:	mov    rdi,rbx
  4097f7:	pop    rbx
  4097f8:	mov    rcx,rbp
  4097fb:	pop    rbp
  4097fc:	pop    r12
  4097fe:	mov    rdx,r11
  409801:	pop    r13
  409803:	jmp    407aa0 <_start@@Base+0x1140>
  409808:	nop    DWORD PTR [rax+rax*1+0x0]
  409810:	endbr64 
  409814:	push   r13
  409816:	mov    r10,rsi
  409819:	mov    r11,rdx
  40981c:	push   r12
  40981e:	mov    r12,rcx
  409821:	push   rbp
  409822:	mov    rbp,rdi
  409825:	push   rbx
  409826:	mov    rbx,rdx
  409829:	sub    rbx,rsi
  40982c:	sub    rsp,0x8
  409830:	cmp    rbx,0x7
  409834:	ja     409958 <_start@@Base+0x2ff8>
  40983a:	mov    rsi,rdx
  40983d:	mov    rdi,r10
  409840:	call   406a50 <_start@@Base+0xf0>
  409845:	movabs rdx,0x6865785f656e756c
  40984f:	cmp    rax,rdx
  409852:	ja     409900 <_start@@Base+0x2fa0>
  409858:	movabs rdx,0xffffff0000000000
  409862:	movabs rcx,0x436f6c6f71ffffff
  40986c:	and    rdx,rax
  40986f:	cmp    rax,rcx
  409872:	ja     4098a8 <_start@@Base+0x2f48>
  409874:	movabs rax,0x416e790000000000
  40987e:	cmp    rdx,rax
  409881:	jne    409894 <_start@@Base+0x2f34>
  409883:	cmp    rbx,0x3
  409887:	jle    409894 <_start@@Base+0x2f34>
  409889:	cmp    BYTE PTR [r10+0x3],0x2e
  40988e:	je     409aa0 <_start@@Base+0x3140>
  409894:	add    rsp,0x8
  409898:	pop    rbx
  409899:	pop    rbp
  40989a:	pop    r12
  40989c:	mov    rax,r10
  40989f:	pop    r13
  4098a1:	ret    
  4098a2:	nop    WORD PTR [rax+rax*1+0x0]
  4098a8:	movabs rcx,0x466f6f0000000000
  4098b2:	cmp    rdx,rcx
  4098b5:	je     409a68 <_start@@Base+0x3108>
  4098bb:	and    rax,0xffffffffff000000
  4098c1:	movabs rdx,0x436f6c6f72000000
  4098cb:	cmp    rax,rdx
  4098ce:	jne    409894 <_start@@Base+0x2f34>
  4098d0:	cmp    rbx,0x5
  4098d4:	jle    409894 <_start@@Base+0x2f34>
  4098d6:	cmp    BYTE PTR [r10+0x5],0x2e
  4098db:	jne    409894 <_start@@Base+0x2f34>
  4098dd:	add    rsp,0x8
  4098e1:	pop    rbx
  4098e2:	mov    rdi,rbp
  4098e5:	pop    rbp
  4098e6:	mov    rcx,r12
  4098e9:	pop    r12
  4098eb:	lea    rsi,[r10+0x6]
  4098ef:	mov    rdx,r11
  4098f2:	pop    r13
  4098f4:	jmp    408480 <_start@@Base+0x1b20>
  4098f9:	nop    DWORD PTR [rax+0x0]
  409900:	movabs rdx,0x696e745f656e756c
  40990a:	cmp    rax,rdx
  40990d:	ja     409968 <_start@@Base+0x3008>
  40990f:	movabs rdx,0x6865785f656e756d
  409919:	cmp    rax,rdx
  40991c:	jne    409894 <_start@@Base+0x2f34>
  409922:	cmp    rbx,0x8
  409926:	jle    409894 <_start@@Base+0x2f34>
  40992c:	cmp    BYTE PTR [r10+0x8],0x2e
  409931:	jne    409894 <_start@@Base+0x2f34>
  409937:	add    rsp,0x8
  40993b:	pop    rbx
  40993c:	mov    rdi,rbp
  40993f:	pop    rbp
  409940:	mov    rcx,r12
  409943:	pop    r12
  409945:	lea    rsi,[r10+0x9]
  409949:	mov    rdx,r11
  40994c:	pop    r13
  40994e:	jmp    408010 <_start@@Base+0x16b0>
  409953:	nop    DWORD PTR [rax+rax*1+0x0]
  409958:	movbe  rax,QWORD PTR [rsi]
  40995d:	jmp    409845 <_start@@Base+0x2ee5>
  409962:	nop    WORD PTR [rax+rax*1+0x0]
  409968:	movabs rdx,0x6e65675f656e756c
  409972:	cmp    rax,rdx
  409975:	ja     4099c0 <_start@@Base+0x3060>
  409977:	movabs rdx,0x696e745f656e756d
  409981:	cmp    rax,rdx
  409984:	jne    409894 <_start@@Base+0x2f34>
  40998a:	cmp    rbx,0x8
  40998e:	jle    409894 <_start@@Base+0x2f34>
  409994:	cmp    BYTE PTR [r10+0x8],0x2e
  409999:	jne    409894 <_start@@Base+0x2f34>
  40999f:	add    rsp,0x8
  4099a3:	pop    rbx
  4099a4:	mov    rdi,rbp
  4099a7:	pop    rbp
  4099a8:	mov    rcx,r12
  4099ab:	pop    r12
  4099ad:	lea    rsi,[r10+0x9]
  4099b1:	mov    rdx,r11
  4099b4:	pop    r13
  4099b6:	jmp    408170 <_start@@Base+0x1810>
  4099bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4099c0:	movabs rdx,0x6e65675f656e756d
  4099ca:	cmp    rax,rdx
  4099cd:	je     409ac0 <_start@@Base+0x3160>
  4099d3:	endbr64 
  4099d7:	movabs rdx,0x6e6f74656d707479
  4099e1:	cmp    rax,rdx
  4099e4:	jne    409894 <_start@@Base+0x2f34>
  4099ea:	lea    rbx,[r10+0x8]
  4099ee:	mov    r13,r11
  4099f1:	sub    r13,rbx
  4099f4:	cmp    r13,0x7
  4099f8:	ja     409af8 <_start@@Base+0x3198>
  4099fe:	mov    rsi,r11
  409a01:	mov    rdi,rbx
  409a04:	call   406a50 <_start@@Base+0xf0>
  409a09:	movabs rdx,0xffffffff00000000
  409a13:	and    rax,rdx
  409a16:	movabs rdx,0x656e756d00000000
  409a20:	cmp    rax,rdx
  409a23:	jne    409894 <_start@@Base+0x2f34>
  409a29:	cmp    r13,0x4
  409a2d:	jle    409894 <_start@@Base+0x2f34>
  409a33:	cmp    BYTE PTR [r10+0xc],0x2e
  409a38:	jne    409894 <_start@@Base+0x2f34>
  409a3e:	lea    rsi,[r10+0xd]
  409a42:	cmp    rbx,rsi
  409a45:	je     409894 <_start@@Base+0x2f34>
  409a4b:	add    rsp,0x8
  409a4f:	pop    rbx
  409a50:	mov    rdi,rbp
  409a53:	pop    rbp
  409a54:	mov    rcx,r12
  409a57:	pop    r12
  409a59:	mov    rdx,r11
  409a5c:	pop    r13
  409a5e:	jmp    409200 <_start@@Base+0x28a0>
  409a63:	nop    DWORD PTR [rax+rax*1+0x0]
  409a68:	cmp    rbx,0x3
  409a6c:	jle    409894 <_start@@Base+0x2f34>
  409a72:	cmp    BYTE PTR [r10+0x3],0x2e
  409a77:	jne    409894 <_start@@Base+0x2f34>
  409a7d:	add    rsp,0x8
  409a81:	pop    rbx
  409a82:	mov    rdi,rbp
  409a85:	pop    rbp
  409a86:	mov    rcx,r12
  409a89:	pop    r12
  409a8b:	lea    rsi,[r10+0x4]
  409a8f:	mov    rdx,r11
  409a92:	pop    r13
  409a94:	jmp    409080 <_start@@Base+0x2720>
  409a99:	nop    DWORD PTR [rax+0x0]
  409aa0:	add    rsp,0x8
  409aa4:	pop    rbx
  409aa5:	mov    rdi,rbp
  409aa8:	pop    rbp
  409aa9:	mov    rcx,r12
  409aac:	pop    r12
  409aae:	lea    rsi,[r10+0x4]
  409ab2:	mov    rdx,r11
  409ab5:	pop    r13
  409ab7:	jmp    407d80 <_start@@Base+0x1420>
  409abc:	nop    DWORD PTR [rax+0x0]
  409ac0:	cmp    rbx,0x8
  409ac4:	jle    409894 <_start@@Base+0x2f34>
  409aca:	cmp    BYTE PTR [r10+0x8],0x2e
  409acf:	jne    409894 <_start@@Base+0x2f34>
  409ad5:	add    rsp,0x8
  409ad9:	pop    rbx
  409ada:	mov    rdi,rbp
  409add:	pop    rbp
  409ade:	mov    rcx,r12
  409ae1:	pop    r12
  409ae3:	lea    rsi,[r10+0x9]
  409ae7:	mov    rdx,r11
  409aea:	pop    r13
  409aec:	jmp    408330 <_start@@Base+0x19d0>
  409af1:	nop    DWORD PTR [rax+0x0]
  409af8:	movbe  rax,QWORD PTR [r10+0x8]
  409afe:	jmp    409a09 <_start@@Base+0x30a9>
  409b03:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  409b0e:	xchg   ax,ax
  409b10:	endbr64 
  409b14:	push   r14
  409b16:	mov    rax,rdx
  409b19:	sub    rax,rsi
  409b1c:	push   r13
  409b1e:	mov    r10,rsi
  409b21:	mov    r11,rdx
  409b24:	push   r12
  409b26:	mov    r12,rdi
  409b29:	push   rbp
  409b2a:	mov    rbp,r8
  409b2d:	push   rbx
  409b2e:	mov    rbx,rcx
  409b31:	cmp    rax,0x7
  409b35:	ja     409db8 <_start@@Base+0x3458>
  409b3b:	mov    rsi,rdx
  409b3e:	mov    rdi,r10
  409b41:	call   406a50 <_start@@Base+0xf0>
  409b46:	movabs rdx,0x4d7947616d652e44
  409b50:	cmp    rax,rdx
  409b53:	ja     409be8 <_start@@Base+0x3288>
  409b59:	movabs rdx,0x46616e746173792e
  409b63:	cmp    rax,rdx
  409b66:	jne    409bd5 <_start@@Base+0x3275>
  409b68:	lea    rdi,[r10+0x8]
  409b6c:	mov    rax,r11
  409b6f:	sub    rax,rdi
  409b72:	cmp    rax,0x7
  409b76:	ja     409dc8 <_start@@Base+0x3468>
  409b7c:	mov    rsi,r11
  409b7f:	call   406a50 <_start@@Base+0xf0>
  409b84:	movabs rdx,0x4368617261637465
  409b8e:	cmp    rax,rdx
  409b91:	jne    409bd5 <_start@@Base+0x3275>
  409b93:	lea    rdi,[r10+0x10]
  409b97:	mov    r8,r11
  409b9a:	sub    r8,rdi
  409b9d:	cmp    r8,0x7
  409ba1:	ja     40a080 <_start@@Base+0x3720>
  409ba7:	mov    rsi,r11
  409baa:	call   406a50 <_start@@Base+0xf0>
  409baf:	movabs rdx,0xff00000000000000
  409bb9:	and    rax,rdx
  409bbc:	movabs rdx,0x7200000000000000
  409bc6:	cmp    rax,rdx
  409bc9:	jne    409bd5 <_start@@Base+0x3275>
  409bcb:	cmp    r8,0x1
  409bcf:	jg     40a058 <_start@@Base+0x36f8>
  409bd5:	pop    rbx
  409bd6:	pop    rbp
  409bd7:	pop    r12
  409bd9:	pop    r13
  409bdb:	mov    rax,r10
  409bde:	pop    r14
  409be0:	ret    
  409be1:	nop    DWORD PTR [rax+0x0]
  409be8:	movabs rdx,0x4d7947616d652e45
  409bf2:	cmp    rax,rdx
  409bf5:	je     409dd8 <_start@@Base+0x3478>
  409bfb:	movabs rdx,0x4d7947616d652e4f
  409c05:	cmp    rax,rdx
  409c08:	jne    409bd5 <_start@@Base+0x3275>
  409c0a:	lea    rdi,[r10+0x8]
  409c0e:	mov    rax,r11
  409c11:	sub    rax,rdi
  409c14:	cmp    rax,0x7
  409c18:	ja     409f60 <_start@@Base+0x3600>
  409c1e:	mov    rsi,r11
  409c21:	call   406a50 <_start@@Base+0xf0>
  409c26:	movabs rdx,0x746865724e616d65
  409c30:	cmp    rax,rdx
  409c33:	jne    409bd5 <_start@@Base+0x3275>
  409c35:	lea    rdi,[r10+0x10]
  409c39:	mov    rax,r11
  409c3c:	sub    rax,rdi
  409c3f:	cmp    rax,0x7
  409c43:	ja     40a090 <_start@@Base+0x3730>
  409c49:	mov    rsi,r11
  409c4c:	call   406a50 <_start@@Base+0xf0>
  409c51:	movabs rdx,0x53706163652e4672
  409c5b:	cmp    rax,rdx
  409c5e:	jne    409bd5 <_start@@Base+0x3275>
  409c64:	lea    rdi,[r10+0x18]
  409c68:	mov    rax,r11
  409c6b:	sub    rax,rdi
  409c6e:	cmp    rax,0x7
  409c72:	ja     40a1e0 <_start@@Base+0x3880>
  409c78:	mov    rsi,r11
  409c7b:	call   406a50 <_start@@Base+0xf0>
  409c80:	movabs rdx,0x6f6d496e636c7564
  409c8a:	cmp    rax,rdx
  409c8d:	jne    409bd5 <_start@@Base+0x3275>
  409c93:	lea    rdi,[r10+0x20]
  409c97:	mov    r8,r11
  409c9a:	sub    r8,rdi
  409c9d:	cmp    r8,0x7
  409ca1:	ja     40a1f6 <_start@@Base+0x3896>
  409ca7:	mov    rsi,r11
  409caa:	call   406a50 <_start@@Base+0xf0>
  409caf:	movabs rdx,0xff00000000000000
  409cb9:	and    rax,rdx
  409cbc:	movabs rdx,0x6500000000000000
  409cc6:	cmp    rax,rdx
  409cc9:	jne    409bd5 <_start@@Base+0x3275>
  409ccf:	cmp    r8,0x1
  409cd3:	jle    409bd5 <_start@@Base+0x3275>
  409cd9:	cmp    BYTE PTR [r10+0x21],0x2e
  409cde:	jne    409bd5 <_start@@Base+0x3275>
  409ce4:	lea    r13,[r10+0x22]
  409ce8:	mov    rax,r11
  409ceb:	sub    rax,r13
  409cee:	cmp    rax,0x7
  409cf2:	ja     40a268 <_start@@Base+0x3908>
  409cf8:	mov    rsi,r11
  409cfb:	mov    rdi,r13
  409cfe:	call   406a50 <_start@@Base+0xf0>
  409d03:	movabs rdx,0xffffff0000000000
  409d0d:	and    rdx,rax
  409d10:	movabs rcx,0x466f6f0000000000
  409d1a:	cmp    rdx,rcx
  409d1d:	je     40a273 <_start@@Base+0x3913>
  409d23:	endbr64 
  409d27:	movabs rdx,0x496e636c75646556
  409d31:	cmp    rax,rdx
  409d34:	jne    40a2a8 <_start@@Base+0x3948>
  409d3a:	lea    r14,[r10+0x2a]
  409d3e:	mov    rax,r11
  409d41:	sub    rax,r14
  409d44:	cmp    rax,0x7
  409d48:	ja     40a2bb <_start@@Base+0x395b>
  409d4e:	mov    rsi,r11
  409d51:	mov    rdi,r14
  409d54:	call   406a50 <_start@@Base+0xf0>
  409d59:	movabs rdx,0xffff000000000000
  409d63:	and    rax,rdx
  409d66:	movabs rdx,0x616c000000000000
  409d70:	mov    r10,r13
  409d73:	cmp    rax,rdx
  409d76:	jne    409bd5 <_start@@Base+0x3275>
  409d7c:	mov    r8,r9
  409d7f:	mov    ecx,0x2
  409d84:	mov    rdx,r11
  409d87:	mov    rsi,r14
  409d8a:	mov    rdi,r12
  409d8d:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  409d92:	mov    r10,rax
  409d95:	cmp    r14,rax
  409d98:	je     40a2a8 <_start@@Base+0x3948>
  409d9e:	mov    QWORD PTR [rbp+0x0],0x0
  409da6:	mov    DWORD PTR [rbx],0x0
  409dac:	jmp    409bd5 <_start@@Base+0x3275>
  409db1:	nop    DWORD PTR [rax+0x0]
  409db8:	movbe  rax,QWORD PTR [rsi]
  409dbd:	jmp    409b46 <_start@@Base+0x31e6>
  409dc2:	nop    WORD PTR [rax+rax*1+0x0]
  409dc8:	movbe  rax,QWORD PTR [r10+0x8]
  409dce:	jmp    409b84 <_start@@Base+0x3224>
  409dd3:	nop    DWORD PTR [rax+rax*1+0x0]
  409dd8:	lea    rdi,[r10+0x8]
  409ddc:	mov    rax,r11
  409ddf:	sub    rax,rdi
  409de2:	cmp    rax,0x7
  409de6:	ja     409f50 <_start@@Base+0x35f0>
  409dec:	mov    rsi,r11
  409def:	call   406a50 <_start@@Base+0xf0>
  409df4:	movabs rdx,0x78616d706c652e67
  409dfe:	cmp    rax,rdx
  409e01:	ja     409eb0 <_start@@Base+0x3550>
  409e07:	sub    rdx,0x25
  409e0b:	cmp    rax,rdx
  409e0e:	jbe    409fd8 <_start@@Base+0x3678>
  409e14:	movabs rdx,0x78616d706c652e43
  409e1e:	cmp    rax,rdx
  409e21:	je     40a170 <_start@@Base+0x3810>
  409e27:	movabs rdx,0x78616d706c652e46
  409e31:	cmp    rax,rdx
  409e34:	jne    409bd5 <_start@@Base+0x3275>
  409e3a:	lea    rdi,[r10+0x10]
  409e3e:	mov    r8,r11
  409e41:	sub    r8,rdi
  409e44:	cmp    r8,0x7
  409e48:	ja     40a20c <_start@@Base+0x38ac>
  409e4e:	mov    rsi,r11
  409e51:	call   406a50 <_start@@Base+0xf0>
  409e56:	movabs rdx,0xffff000000000000
  409e60:	and    rax,rdx
  409e63:	movabs rdx,0x6f6f000000000000
  409e6d:	cmp    rax,rdx
  409e70:	jne    409bd5 <_start@@Base+0x3275>
  409e76:	cmp    r8,0x2
  409e7a:	jle    409bd5 <_start@@Base+0x3275>
  409e80:	cmp    BYTE PTR [r10+0x12],0x2e
  409e85:	jne    409bd5 <_start@@Base+0x3275>
  409e8b:	mov    rcx,rbx
  409e8e:	pop    rbx
  409e8f:	mov    r8,rbp
  409e92:	pop    rbp
  409e93:	mov    rdi,r12
  409e96:	pop    r12
  409e98:	pop    r13
  409e9a:	lea    rsi,[r10+0x13]
  409e9e:	mov    rdx,r11
  409ea1:	pop    r14
  409ea3:	jmp    409080 <_start@@Base+0x2720>
  409ea8:	nop    DWORD PTR [rax+rax*1+0x0]
  409eb0:	movabs rdx,0x78616d706c652e68
  409eba:	cmp    rax,rdx
  409ebd:	je     409f70 <_start@@Base+0x3610>
  409ec3:	movabs rdx,0x78616d706c652e6d
  409ecd:	cmp    rax,rdx
  409ed0:	ja     40a0a0 <_start@@Base+0x3740>
  409ed6:	sub    rdx,0x4
  409eda:	cmp    rax,rdx
  409edd:	jne    409bd5 <_start@@Base+0x3275>
  409ee3:	lea    rax,[r10+0x10]
  409ee7:	mov    rcx,r11
  409eea:	sub    rcx,rax
  409eed:	mov    rax,rcx
  409ef0:	cmp    rcx,0x7
  409ef4:	jbe    409bd5 <_start@@Base+0x3275>
  409efa:	movbe  rdx,QWORD PTR [r10+0x10]
  409f00:	movabs rcx,0x6e745f656e756d00
  409f0a:	xor    dl,dl
  409f0c:	cmp    rdx,rcx
  409f0f:	jne    409bd5 <_start@@Base+0x3275>
  409f15:	cmp    rax,0x7
  409f19:	jle    409bd5 <_start@@Base+0x3275>
  409f1f:	cmp    BYTE PTR [r10+0x17],0x2e
  409f24:	jne    409bd5 <_start@@Base+0x3275>
  409f2a:	mov    rcx,rbx
  409f2d:	pop    rbx
  409f2e:	mov    r8,rbp
  409f31:	pop    rbp
  409f32:	mov    rdi,r12
  409f35:	pop    r12
  409f37:	pop    r13
  409f39:	lea    rsi,[r10+0x18]
  409f3d:	mov    rdx,r11
  409f40:	pop    r14
  409f42:	jmp    408170 <_start@@Base+0x1810>
  409f47:	nop    WORD PTR [rax+rax*1+0x0]
  409f50:	movbe  rax,QWORD PTR [r10+0x8]
  409f56:	jmp    409df4 <_start@@Base+0x3494>
  409f5b:	nop    DWORD PTR [rax+rax*1+0x0]
  409f60:	movbe  rax,QWORD PTR [r10+0x8]
  409f66:	jmp    409c26 <_start@@Base+0x32c6>
  409f6b:	nop    DWORD PTR [rax+rax*1+0x0]
  409f70:	lea    rax,[r10+0x10]
  409f74:	mov    rcx,r11
  409f77:	sub    rcx,rax
  409f7a:	mov    rax,rcx
  409f7d:	cmp    rcx,0x7
  409f81:	jbe    409bd5 <_start@@Base+0x3275>
  409f87:	movbe  rdx,QWORD PTR [r10+0x10]
  409f8d:	movabs rcx,0x65785f656e756d00
  409f97:	xor    dl,dl
  409f99:	cmp    rdx,rcx
  409f9c:	jne    409bd5 <_start@@Base+0x3275>
  409fa2:	cmp    rax,0x7
  409fa6:	jle    409bd5 <_start@@Base+0x3275>
  409fac:	cmp    BYTE PTR [r10+0x17],0x2e
  409fb1:	jne    409bd5 <_start@@Base+0x3275>
  409fb7:	mov    rcx,rbx
  409fba:	pop    rbx
  409fbb:	mov    r8,rbp
  409fbe:	pop    rbp
  409fbf:	mov    rdi,r12
  409fc2:	pop    r12
  409fc4:	pop    r13
  409fc6:	lea    rsi,[r10+0x18]
  409fca:	mov    rdx,r11
  409fcd:	pop    r14
  409fcf:	jmp    408010 <_start@@Base+0x16b0>
  409fd4:	nop    DWORD PTR [rax+0x0]
  409fd8:	dec    rdx
  409fdb:	cmp    rax,rdx
  409fde:	jne    409bd5 <_start@@Base+0x3275>
  409fe4:	lea    rdi,[r10+0x10]
  409fe8:	mov    r8,r11
  409feb:	sub    r8,rdi
  409fee:	cmp    r8,0x7
  409ff2:	ja     40a1eb <_start@@Base+0x388b>
  409ff8:	mov    rsi,r11
  409ffb:	call   406a50 <_start@@Base+0xf0>
  40a000:	movabs rdx,0xffff000000000000
  40a00a:	and    rax,rdx
  40a00d:	movabs rdx,0x6e79000000000000
  40a017:	cmp    rax,rdx
  40a01a:	jne    409bd5 <_start@@Base+0x3275>
  40a020:	cmp    r8,0x2
  40a024:	jle    409bd5 <_start@@Base+0x3275>
  40a02a:	cmp    BYTE PTR [r10+0x12],0x2e
  40a02f:	jne    409bd5 <_start@@Base+0x3275>
  40a035:	mov    rcx,rbx
  40a038:	pop    rbx
  40a039:	mov    r8,rbp
  40a03c:	pop    rbp
  40a03d:	mov    rdi,r12
  40a040:	pop    r12
  40a042:	pop    r13
  40a044:	lea    rsi,[r10+0x13]
  40a048:	mov    rdx,r11
  40a04b:	pop    r14
  40a04d:	jmp    407d80 <_start@@Base+0x1420>
  40a052:	nop    WORD PTR [rax+rax*1+0x0]
  40a058:	cmp    BYTE PTR [r10+0x11],0x2e
  40a05d:	jne    409bd5 <_start@@Base+0x3275>
  40a063:	mov    rcx,rbx
  40a066:	pop    rbx
  40a067:	mov    r8,rbp
  40a06a:	pop    rbp
  40a06b:	mov    rdi,r12
  40a06e:	pop    r12
  40a070:	pop    r13
  40a072:	lea    rsi,[r10+0x12]
  40a076:	mov    rdx,r11
  40a079:	pop    r14
  40a07b:	jmp    407aa0 <_start@@Base+0x1140>
  40a080:	movbe  rax,QWORD PTR [r10+0x10]
  40a086:	jmp    409baf <_start@@Base+0x324f>
  40a08b:	nop    DWORD PTR [rax+rax*1+0x0]
  40a090:	movbe  rax,QWORD PTR [r10+0x10]
  40a096:	jmp    409c51 <_start@@Base+0x32f1>
  40a09b:	nop    DWORD PTR [rax+rax*1+0x0]
  40a0a0:	movabs rdx,0x78616d706c652e6e
  40a0aa:	cmp    rax,rdx
  40a0ad:	jne    409bd5 <_start@@Base+0x3275>
  40a0b3:	lea    rdi,[r10+0x10]
  40a0b7:	mov    rdx,r11
  40a0ba:	sub    rdx,rdi
  40a0bd:	cmp    rdx,0x7
  40a0c1:	ja     40a217 <_start@@Base+0x38b7>
  40a0c7:	mov    rsi,r11
  40a0ca:	call   406a50 <_start@@Base+0xf0>
  40a0cf:	mov    rcx,rax
  40a0d2:	xor    cl,cl
  40a0d4:	movabs rdx,0x65675f656e756d00
  40a0de:	cmp    rcx,rdx
  40a0e1:	je     409bd5 <_start@@Base+0x3275>
  40a0e7:	movabs rdx,0x6f74656d70747965
  40a0f1:	cmp    rax,rdx
  40a0f4:	jne    409bd5 <_start@@Base+0x3275>
  40a0fa:	lea    rdi,[r10+0x18]
  40a0fe:	mov    r8,r11
  40a101:	sub    r8,rdi
  40a104:	cmp    r8,0x7
  40a108:	ja     40a2b0 <_start@@Base+0x3950>
  40a10e:	mov    rsi,r11
  40a111:	call   406a50 <_start@@Base+0xf0>
  40a116:	movabs rdx,0xffffff0000000000
  40a120:	and    rax,rdx
  40a123:	movabs rdx,0x6e756d0000000000
  40a12d:	cmp    rax,rdx
  40a130:	jne    409bd5 <_start@@Base+0x3275>
  40a136:	cmp    r8,0x3
  40a13a:	jle    409bd5 <_start@@Base+0x3275>
  40a140:	cmp    BYTE PTR [r10+0x1b],0x2e
  40a145:	jne    409bd5 <_start@@Base+0x3275>
  40a14b:	mov    rcx,rbx
  40a14e:	pop    rbx
  40a14f:	mov    r8,rbp
  40a152:	pop    rbp
  40a153:	mov    rdi,r12
  40a156:	pop    r12
  40a158:	pop    r13
  40a15a:	lea    rsi,[r10+0x1c]
  40a15e:	mov    rdx,r11
  40a161:	pop    r14
  40a163:	jmp    409200 <_start@@Base+0x28a0>
  40a168:	nop    DWORD PTR [rax+rax*1+0x0]
  40a170:	lea    rdi,[r10+0x10]
  40a174:	mov    r8,r11
  40a177:	sub    r8,rdi
  40a17a:	cmp    r8,0x7
  40a17e:	ja     40a201 <_start@@Base+0x38a1>
  40a184:	mov    rsi,r11
  40a187:	call   406a50 <_start@@Base+0xf0>
  40a18c:	movabs rdx,0xffffffff00000000
  40a196:	and    rax,rdx
  40a199:	movabs rdx,0x6f6c6f7200000000
  40a1a3:	cmp    rax,rdx
  40a1a6:	jne    409bd5 <_start@@Base+0x3275>
  40a1ac:	cmp    r8,0x4
  40a1b0:	jle    409bd5 <_start@@Base+0x3275>
  40a1b6:	cmp    BYTE PTR [r10+0x14],0x2e
  40a1bb:	jne    409bd5 <_start@@Base+0x3275>
  40a1c1:	mov    rcx,rbx
  40a1c4:	pop    rbx
  40a1c5:	mov    r8,rbp
  40a1c8:	pop    rbp
  40a1c9:	mov    rdi,r12
  40a1cc:	pop    r12
  40a1ce:	pop    r13
  40a1d0:	lea    rsi,[r10+0x15]
  40a1d4:	mov    rdx,r11
  40a1d7:	pop    r14
  40a1d9:	jmp    408480 <_start@@Base+0x1b20>
  40a1de:	xchg   ax,ax
  40a1e0:	movbe  rax,QWORD PTR [r10+0x18]
  40a1e6:	jmp    409c80 <_start@@Base+0x3320>
  40a1eb:	movbe  rax,QWORD PTR [r10+0x10]
  40a1f1:	jmp    40a000 <_start@@Base+0x36a0>
  40a1f6:	movbe  rax,QWORD PTR [r10+0x20]
  40a1fc:	jmp    409caf <_start@@Base+0x334f>
  40a201:	movbe  rax,QWORD PTR [r10+0x10]
  40a207:	jmp    40a18c <_start@@Base+0x382c>
  40a20c:	movbe  rax,QWORD PTR [r10+0x10]
  40a212:	jmp    409e56 <_start@@Base+0x34f6>
  40a217:	movbe  rax,QWORD PTR [r10+0x10]
  40a21d:	movabs rcx,0x65675f656e756d00
  40a227:	mov    rsi,rax
  40a22a:	xor    sil,sil
  40a22d:	cmp    rsi,rcx
  40a230:	jne    40a0e7 <_start@@Base+0x3787>
  40a236:	cmp    rdx,0x7
  40a23a:	jle    409bd5 <_start@@Base+0x3275>
  40a240:	cmp    BYTE PTR [r10+0x17],0x2e
  40a245:	jne    409bd5 <_start@@Base+0x3275>
  40a24b:	mov    rcx,rbx
  40a24e:	pop    rbx
  40a24f:	mov    r8,rbp
  40a252:	pop    rbp
  40a253:	mov    rdi,r12
  40a256:	pop    r12
  40a258:	pop    r13
  40a25a:	lea    rsi,[r10+0x18]
  40a25e:	mov    rdx,r11
  40a261:	pop    r14
  40a263:	jmp    408330 <_start@@Base+0x19d0>
  40a268:	movbe  rax,QWORD PTR [r10+0x22]
  40a26e:	jmp    409d03 <_start@@Base+0x33a3>
  40a273:	mov    r8,r9
  40a276:	mov    ecx,0x3
  40a27b:	mov    rdx,r11
  40a27e:	mov    rsi,r13
  40a281:	mov    rdi,r12
  40a284:	call   41d580 <flatcc_json_parser_match_constant@@Base>
  40a289:	mov    r10,rax
  40a28c:	cmp    r13,rax
  40a28f:	je     409bd5 <_start@@Base+0x3275>
  40a295:	mov    QWORD PTR [rbp+0x0],0x11
  40a29d:	mov    DWORD PTR [rbx],0x0
  40a2a3:	jmp    409bd5 <_start@@Base+0x3275>
  40a2a8:	mov    r10,r13
  40a2ab:	jmp    409bd5 <_start@@Base+0x3275>
  40a2b0:	movbe  rax,QWORD PTR [r10+0x18]
  40a2b6:	jmp    40a116 <_start@@Base+0x37b6>
  40a2bb:	movbe  rax,QWORD PTR [r10+0x2a]
  40a2c1:	jmp    409d59 <_start@@Base+0x33f9>
  40a2c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a2d0:	push   r15
  40a2d2:	push   r14
  40a2d4:	push   r13
  40a2d6:	push   r12
  40a2d8:	mov    r12,rdi
  40a2db:	push   rbp
  40a2dc:	push   rbx
  40a2dd:	mov    rbx,rdx
  40a2e0:	sub    rsp,0x58
  40a2e4:	mov    QWORD PTR [rsp+0x10],rcx
  40a2e9:	mov    QWORD PTR [rsp+0x18],r8
  40a2ee:	mov    rdx,QWORD PTR fs:0x28
  40a2f7:	mov    QWORD PTR [rsp+0x48],rdx
  40a2fc:	xor    edx,edx
  40a2fe:	mov    BYTE PTR [r8],0x0
  40a302:	cmp    rsi,rbx
  40a305:	je     40a494 <_start@@Base+0x3b34>
  40a30b:	cmp    BYTE PTR [rsi],0x22
  40a30e:	lea    r10,[rsi+0x1]
  40a312:	jne    40a440 <_start@@Base+0x3ae0>
  40a318:	mov    rax,rbx
  40a31b:	sub    rax,r10
  40a31e:	cmp    rax,0x1
  40a322:	jle    40a330 <_start@@Base+0x39d0>
  40a324:	cmp    BYTE PTR [r10],0x20
  40a328:	jg     40a341 <_start@@Base+0x39e1>
  40a32a:	je     40a481 <_start@@Base+0x3b21>
  40a330:	mov    rsi,r10
  40a333:	mov    rdx,rbx
  40a336:	mov    rdi,r12
  40a339:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40a33e:	mov    r10,rax
  40a341:	cmp    rbx,r10
  40a344:	je     40a3a7 <_start@@Base+0x3a47>
  40a346:	lea    rax,[rsp+0x38]
  40a34b:	mov    BYTE PTR [rsp+0x27],0x0
  40a350:	mov    QWORD PTR [rsp+0x8],rax
  40a355:	lea    r15,[rsp+0x3c]
  40a35a:	lea    r14,[rsp+0x40]
  40a35f:	mov    r13,QWORD PTR [rsp+0x10]
  40a364:	mov    rbp,r10
  40a367:	mov    rax,QWORD PTR [r13+0x0]
  40a36b:	mov    rsi,r10
  40a36e:	jmp    40a389 <_start@@Base+0x3a29>
  40a370:	cmp    rbp,rax
  40a373:	jne    40a3d0 <_start@@Base+0x3a70>
  40a375:	add    r13,0x8
  40a379:	mov    rax,QWORD PTR [r13+0x0]
  40a37d:	mov    rbp,rsi
  40a380:	test   rax,rax
  40a383:	je     40a410 <_start@@Base+0x3ab0>
  40a389:	mov    rcx,QWORD PTR [rsp+0x8]
  40a38e:	mov    r9,r15
  40a391:	mov    r8,r14
  40a394:	mov    rdx,rbx
  40a397:	mov    rdi,r12
  40a39a:	call   rax
  40a39c:	mov    rsi,rax
  40a39f:	cmp    rbx,rax
  40a3a2:	jne    40a370 <_start@@Base+0x3a10>
  40a3a4:	mov    r10,rax
  40a3a7:	mov    rdi,QWORD PTR [rsp+0x48]
  40a3ac:	xor    rdi,QWORD PTR fs:0x28
  40a3b5:	mov    rax,r10
  40a3b8:	jne    40a4a4 <_start@@Base+0x3b44>
  40a3be:	add    rsp,0x58
  40a3c2:	pop    rbx
  40a3c3:	pop    rbp
  40a3c4:	pop    r12
  40a3c6:	pop    r13
  40a3c8:	pop    r14
  40a3ca:	pop    r15
  40a3cc:	ret    
  40a3cd:	nop    DWORD PTR [rax]
  40a3d0:	mov    edx,DWORD PTR [rsp+0x38]
  40a3d4:	mov    r10,rax
  40a3d7:	mov    rax,QWORD PTR [rsp+0x40]
  40a3dc:	test   edx,edx
  40a3de:	je     40a430 <_start@@Base+0x3ad0>
  40a3e0:	mov    ecx,0x8
  40a3e5:	cmp    rax,0x80
  40a3eb:	ja     40a45a <_start@@Base+0x3afa>
  40a3ed:	neg    eax
  40a3ef:	mov    BYTE PTR [rsp+0x27],al
  40a3f3:	mov    rcx,QWORD PTR [rsp+0x18]
  40a3f8:	add    BYTE PTR [rcx],al
  40a3fa:	mov    ecx,DWORD PTR [rsp+0x3c]
  40a3fe:	test   ecx,ecx
  40a400:	jne    40a35f <_start@@Base+0x39ff>
  40a406:	jmp    40a3a7 <_start@@Base+0x3a47>
  40a408:	nop    DWORD PTR [rax+rax*1+0x0]
  40a410:	mov    ecx,0x17
  40a415:	mov    rdx,rbx
  40a418:	mov    rdi,r12
  40a41b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40a420:	mov    r10,rax
  40a423:	jmp    40a3a7 <_start@@Base+0x3a47>
  40a428:	nop    DWORD PTR [rax+rax*1+0x0]
  40a430:	cmp    rax,0x7f
  40a434:	ja     40a455 <_start@@Base+0x3af5>
  40a436:	mov    BYTE PTR [rsp+0x27],al
  40a43a:	jmp    40a3f3 <_start@@Base+0x3a93>
  40a43c:	nop    DWORD PTR [rax+0x0]
  40a440:	mov    ecx,0x5
  40a445:	mov    rdx,rbx
  40a448:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40a44d:	mov    r10,rax
  40a450:	jmp    40a318 <_start@@Base+0x39b8>
  40a455:	mov    ecx,0x7
  40a45a:	mov    rsi,r10
  40a45d:	mov    rdx,rbx
  40a460:	mov    rdi,r12
  40a463:	mov    QWORD PTR [rsp+0x28],r10
  40a468:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40a46d:	mov    r10,QWORD PTR [rsp+0x28]
  40a472:	cmp    rbx,rax
  40a475:	je     40a49c <_start@@Base+0x3b3c>
  40a477:	movzx  eax,BYTE PTR [rsp+0x27]
  40a47c:	jmp    40a3f3 <_start@@Base+0x3a93>
  40a481:	cmp    BYTE PTR [r10+0x1],0x20
  40a486:	jle    40a330 <_start@@Base+0x39d0>
  40a48c:	inc    r10
  40a48f:	jmp    40a341 <_start@@Base+0x39e1>
  40a494:	mov    r10,rbx
  40a497:	jmp    40a330 <_start@@Base+0x39d0>
  40a49c:	mov    r10,rbx
  40a49f:	jmp    40a3a7 <_start@@Base+0x3a47>
  40a4a4:	call   4061a0 <__stack_chk_fail@plt>
  40a4a9:	nop    DWORD PTR [rax+0x0]
  40a4b0:	cmp    rsi,rdx
  40a4b3:	je     40a4ba <_start@@Base+0x3b5a>
  40a4b5:	cmp    BYTE PTR [rsi],0x7b
  40a4b8:	je     40a4d0 <_start@@Base+0x3b70>
  40a4ba:	mov    DWORD PTR [rcx],0x0
  40a4c0:	mov    ecx,0x15
  40a4c5:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  40a4ca:	nop    WORD PTR [rax+rax*1+0x0]
  40a4d0:	push   r12
  40a4d2:	lea    rax,[rsi+0x1]
  40a4d6:	mov    r12,rdi
  40a4d9:	push   rbp
  40a4da:	mov    rbp,rcx
  40a4dd:	push   rbx
  40a4de:	mov    rbx,rdx
  40a4e1:	sub    rdx,rax
  40a4e4:	cmp    rdx,0x1
  40a4e8:	jle    40a4f2 <_start@@Base+0x3b92>
  40a4ea:	cmp    BYTE PTR [rsi+0x1],0x20
  40a4ee:	jg     40a500 <_start@@Base+0x3ba0>
  40a4f0:	je     40a520 <_start@@Base+0x3bc0>
  40a4f2:	mov    rdx,rbx
  40a4f5:	mov    rsi,rax
  40a4f8:	mov    rdi,r12
  40a4fb:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40a500:	cmp    rbx,rax
  40a503:	je     40a50a <_start@@Base+0x3baa>
  40a505:	cmp    BYTE PTR [rax],0x7d
  40a508:	je     40a530 <_start@@Base+0x3bd0>
  40a50a:	mov    DWORD PTR [rbp+0x0],0x1
  40a511:	pop    rbx
  40a512:	pop    rbp
  40a513:	pop    r12
  40a515:	ret    
  40a516:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a520:	cmp    BYTE PTR [rsi+0x2],0x20
  40a524:	jle    40a4f2 <_start@@Base+0x3b92>
  40a526:	lea    rax,[rsi+0x2]
  40a52a:	jmp    40a500 <_start@@Base+0x3ba0>
  40a52c:	nop    DWORD PTR [rax+0x0]
  40a530:	mov    DWORD PTR [rbp+0x0],0x0
  40a537:	mov    rdx,rbx
  40a53a:	mov    rdi,r12
  40a53d:	pop    rbx
  40a53e:	pop    rbp
  40a53f:	lea    rsi,[rax+0x1]
  40a543:	pop    r12
  40a545:	jmp    407a60 <_start@@Base+0x1100>
  40a54a:	nop    WORD PTR [rax+rax*1+0x0]
  40a550:	push   r15
  40a552:	push   r14
  40a554:	push   r13
  40a556:	push   r12
  40a558:	mov    r12,rdi
  40a55b:	push   rbp
  40a55c:	push   rbx
  40a55d:	mov    rbx,rdx
  40a560:	sub    rsp,0x48
  40a564:	mov    QWORD PTR [rsp+0x10],rcx
  40a569:	mov    QWORD PTR [rsp+0x18],r8
  40a56e:	mov    rcx,QWORD PTR fs:0x28
  40a577:	mov    QWORD PTR [rsp+0x38],rcx
  40a57c:	xor    ecx,ecx
  40a57e:	mov    DWORD PTR [r8],0x0
  40a585:	cmp    rsi,rdx
  40a588:	je     40a6d1 <_start@@Base+0x3d71>
  40a58e:	cmp    BYTE PTR [rsi],0x22
  40a591:	lea    rax,[rsi+0x1]
  40a595:	jne    40a6b0 <_start@@Base+0x3d50>
  40a59b:	mov    rdx,rbx
  40a59e:	sub    rdx,rax
  40a5a1:	cmp    rdx,0x1
  40a5a5:	jle    40a5b2 <_start@@Base+0x3c52>
  40a5a7:	cmp    BYTE PTR [rax],0x20
  40a5aa:	jg     40a5c0 <_start@@Base+0x3c60>
  40a5ac:	je     40a6bf <_start@@Base+0x3d5f>
  40a5b2:	mov    rdx,rbx
  40a5b5:	mov    rsi,rax
  40a5b8:	mov    rdi,r12
  40a5bb:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40a5c0:	cmp    rbx,rax
  40a5c3:	je     40a625 <_start@@Base+0x3cc5>
  40a5c5:	lea    rcx,[rsp+0x28]
  40a5ca:	mov    QWORD PTR [rsp+0x8],rcx
  40a5cf:	lea    r15,[rsp+0x2c]
  40a5d4:	lea    r14,[rsp+0x30]
  40a5d9:	mov    r13,QWORD PTR [rsp+0x10]
  40a5de:	mov    rbp,rax
  40a5e1:	mov    r11,QWORD PTR [r13+0x0]
  40a5e5:	jmp    40a609 <_start@@Base+0x3ca9>
  40a5e7:	nop    WORD PTR [rax+rax*1+0x0]
  40a5f0:	cmp    rbp,rax
  40a5f3:	jne    40a650 <_start@@Base+0x3cf0>
  40a5f5:	add    r13,0x8
  40a5f9:	mov    r11,QWORD PTR [r13+0x0]
  40a5fd:	mov    rbp,rax
  40a600:	test   r11,r11
  40a603:	je     40a6f0 <_start@@Base+0x3d90>
  40a609:	mov    rcx,QWORD PTR [rsp+0x8]
  40a60e:	mov    r9,r15
  40a611:	mov    r8,r14
  40a614:	mov    rdx,rbx
  40a617:	mov    rsi,rax
  40a61a:	mov    rdi,r12
  40a61d:	call   r11
  40a620:	cmp    rbx,rax
  40a623:	jne    40a5f0 <_start@@Base+0x3c90>
  40a625:	mov    rsi,QWORD PTR [rsp+0x38]
  40a62a:	xor    rsi,QWORD PTR fs:0x28
  40a633:	jne    40a708 <_start@@Base+0x3da8>
  40a639:	add    rsp,0x48
  40a63d:	pop    rbx
  40a63e:	pop    rbp
  40a63f:	pop    r12
  40a641:	pop    r13
  40a643:	pop    r14
  40a645:	pop    r15
  40a647:	ret    
  40a648:	nop    DWORD PTR [rax+rax*1+0x0]
  40a650:	mov    rdx,QWORD PTR [rsp+0x30]
  40a655:	test   rdx,rdx
  40a658:	js     40a690 <_start@@Base+0x3d30>
  40a65a:	vxorps xmm0,xmm0,xmm0
  40a65e:	vcvtsi2ss xmm0,xmm0,rdx
  40a663:	mov    edx,DWORD PTR [rsp+0x28]
  40a667:	test   edx,edx
  40a669:	je     40a673 <_start@@Base+0x3d13>
  40a66b:	vxorps xmm0,xmm0,XMMWORD PTR [rip+0x23bad]        # 42e220 <_IO_stdin_used@@Base+0x3220>
  40a673:	mov    rdi,QWORD PTR [rsp+0x18]
  40a678:	mov    ecx,DWORD PTR [rsp+0x2c]
  40a67c:	vaddss xmm0,xmm0,DWORD PTR [rdi]
  40a680:	vmovss DWORD PTR [rdi],xmm0
  40a684:	test   ecx,ecx
  40a686:	jne    40a5d9 <_start@@Base+0x3c79>
  40a68c:	jmp    40a625 <_start@@Base+0x3cc5>
  40a68e:	xchg   ax,ax
  40a690:	mov    rcx,rdx
  40a693:	shr    rcx,1
  40a696:	and    edx,0x1
  40a699:	or     rcx,rdx
  40a69c:	vxorps xmm0,xmm0,xmm0
  40a6a0:	vcvtsi2ss xmm0,xmm0,rcx
  40a6a5:	vaddss xmm0,xmm0,xmm0
  40a6a9:	jmp    40a663 <_start@@Base+0x3d03>
  40a6ab:	nop    DWORD PTR [rax+rax*1+0x0]
  40a6b0:	mov    ecx,0x5
  40a6b5:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40a6ba:	jmp    40a59b <_start@@Base+0x3c3b>
  40a6bf:	cmp    BYTE PTR [rax+0x1],0x20
  40a6c3:	jle    40a5b2 <_start@@Base+0x3c52>
  40a6c9:	inc    rax
  40a6cc:	jmp    40a5c0 <_start@@Base+0x3c60>
  40a6d1:	mov    rax,rdx
  40a6d4:	mov    rsi,rax
  40a6d7:	mov    rdx,rbx
  40a6da:	mov    rdi,r12
  40a6dd:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40a6e2:	jmp    40a5c0 <_start@@Base+0x3c60>
  40a6e7:	nop    WORD PTR [rax+rax*1+0x0]
  40a6f0:	mov    ecx,0x17
  40a6f5:	mov    rdx,rbx
  40a6f8:	mov    rsi,rax
  40a6fb:	mov    rdi,r12
  40a6fe:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40a703:	jmp    40a625 <_start@@Base+0x3cc5>
  40a708:	call   4061a0 <__stack_chk_fail@plt>
  40a70d:	nop    DWORD PTR [rax]
  40a710:	push   r15
  40a712:	push   r14
  40a714:	push   r13
  40a716:	push   r12
  40a718:	mov    r12,rdi
  40a71b:	push   rbp
  40a71c:	push   rbx
  40a71d:	mov    rbx,rdx
  40a720:	sub    rsp,0x48
  40a724:	mov    QWORD PTR [rsp+0x10],rcx
  40a729:	mov    QWORD PTR [rsp+0x18],r8
  40a72e:	mov    rcx,QWORD PTR fs:0x28
  40a737:	mov    QWORD PTR [rsp+0x38],rcx
  40a73c:	xor    ecx,ecx
  40a73e:	mov    QWORD PTR [r8],0x0
  40a745:	cmp    rsi,rdx
  40a748:	je     40a891 <_start@@Base+0x3f31>
  40a74e:	cmp    BYTE PTR [rsi],0x22
  40a751:	lea    rax,[rsi+0x1]
  40a755:	jne    40a870 <_start@@Base+0x3f10>
  40a75b:	mov    rdx,rbx
  40a75e:	sub    rdx,rax
  40a761:	cmp    rdx,0x1
  40a765:	jle    40a772 <_start@@Base+0x3e12>
  40a767:	cmp    BYTE PTR [rax],0x20
  40a76a:	jg     40a780 <_start@@Base+0x3e20>
  40a76c:	je     40a87f <_start@@Base+0x3f1f>
  40a772:	mov    rdx,rbx
  40a775:	mov    rsi,rax
  40a778:	mov    rdi,r12
  40a77b:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40a780:	cmp    rbx,rax
  40a783:	je     40a7e5 <_start@@Base+0x3e85>
  40a785:	lea    rcx,[rsp+0x28]
  40a78a:	mov    QWORD PTR [rsp+0x8],rcx
  40a78f:	lea    r15,[rsp+0x2c]
  40a794:	lea    r14,[rsp+0x30]
  40a799:	mov    r13,QWORD PTR [rsp+0x10]
  40a79e:	mov    rbp,rax
  40a7a1:	mov    r11,QWORD PTR [r13+0x0]
  40a7a5:	jmp    40a7c9 <_start@@Base+0x3e69>
  40a7a7:	nop    WORD PTR [rax+rax*1+0x0]
  40a7b0:	cmp    rbp,rax
  40a7b3:	jne    40a810 <_start@@Base+0x3eb0>
  40a7b5:	add    r13,0x8
  40a7b9:	mov    r11,QWORD PTR [r13+0x0]
  40a7bd:	mov    rbp,rax
  40a7c0:	test   r11,r11
  40a7c3:	je     40a8b0 <_start@@Base+0x3f50>
  40a7c9:	mov    rcx,QWORD PTR [rsp+0x8]
  40a7ce:	mov    r9,r15
  40a7d1:	mov    r8,r14
  40a7d4:	mov    rdx,rbx
  40a7d7:	mov    rsi,rax
  40a7da:	mov    rdi,r12
  40a7dd:	call   r11
  40a7e0:	cmp    rbx,rax
  40a7e3:	jne    40a7b0 <_start@@Base+0x3e50>
  40a7e5:	mov    rsi,QWORD PTR [rsp+0x38]
  40a7ea:	xor    rsi,QWORD PTR fs:0x28
  40a7f3:	jne    40a8c8 <_start@@Base+0x3f68>
  40a7f9:	add    rsp,0x48
  40a7fd:	pop    rbx
  40a7fe:	pop    rbp
  40a7ff:	pop    r12
  40a801:	pop    r13
  40a803:	pop    r14
  40a805:	pop    r15
  40a807:	ret    
  40a808:	nop    DWORD PTR [rax+rax*1+0x0]
  40a810:	mov    rdx,QWORD PTR [rsp+0x30]
  40a815:	test   rdx,rdx
  40a818:	js     40a850 <_start@@Base+0x3ef0>
  40a81a:	vxorpd xmm0,xmm0,xmm0
  40a81e:	vcvtsi2sd xmm0,xmm0,rdx
  40a823:	mov    edx,DWORD PTR [rsp+0x28]
  40a827:	test   edx,edx
  40a829:	je     40a833 <_start@@Base+0x3ed3>
  40a82b:	vxorpd xmm0,xmm0,XMMWORD PTR [rip+0x239fd]        # 42e230 <_IO_stdin_used@@Base+0x3230>
  40a833:	mov    rdi,QWORD PTR [rsp+0x18]
  40a838:	mov    ecx,DWORD PTR [rsp+0x2c]
  40a83c:	vaddsd xmm0,xmm0,QWORD PTR [rdi]
  40a840:	vmovsd QWORD PTR [rdi],xmm0
  40a844:	test   ecx,ecx
  40a846:	jne    40a799 <_start@@Base+0x3e39>
  40a84c:	jmp    40a7e5 <_start@@Base+0x3e85>
  40a84e:	xchg   ax,ax
  40a850:	mov    rcx,rdx
  40a853:	shr    rcx,1
  40a856:	and    edx,0x1
  40a859:	or     rcx,rdx
  40a85c:	vxorpd xmm0,xmm0,xmm0
  40a860:	vcvtsi2sd xmm0,xmm0,rcx
  40a865:	vaddsd xmm0,xmm0,xmm0
  40a869:	jmp    40a823 <_start@@Base+0x3ec3>
  40a86b:	nop    DWORD PTR [rax+rax*1+0x0]
  40a870:	mov    ecx,0x5
  40a875:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40a87a:	jmp    40a75b <_start@@Base+0x3dfb>
  40a87f:	cmp    BYTE PTR [rax+0x1],0x20
  40a883:	jle    40a772 <_start@@Base+0x3e12>
  40a889:	inc    rax
  40a88c:	jmp    40a780 <_start@@Base+0x3e20>
  40a891:	mov    rax,rdx
  40a894:	mov    rsi,rax
  40a897:	mov    rdx,rbx
  40a89a:	mov    rdi,r12
  40a89d:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40a8a2:	jmp    40a780 <_start@@Base+0x3e20>
  40a8a7:	nop    WORD PTR [rax+rax*1+0x0]
  40a8b0:	mov    ecx,0x17
  40a8b5:	mov    rdx,rbx
  40a8b8:	mov    rsi,rax
  40a8bb:	mov    rdi,r12
  40a8be:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40a8c3:	jmp    40a7e5 <_start@@Base+0x3e85>
  40a8c8:	call   4061a0 <__stack_chk_fail@plt>
  40a8cd:	nop    DWORD PTR [rax]
  40a8d0:	push   r15
  40a8d2:	push   r14
  40a8d4:	push   r13
  40a8d6:	push   r12
  40a8d8:	mov    r12,rdi
  40a8db:	push   rbp
  40a8dc:	push   rbx
  40a8dd:	mov    rbx,rdx
  40a8e0:	sub    rsp,0x58
  40a8e4:	mov    QWORD PTR [rsp+0x18],rcx
  40a8e9:	mov    QWORD PTR [rsp+0x20],r8
  40a8ee:	mov    rdx,QWORD PTR fs:0x28
  40a8f7:	mov    QWORD PTR [rsp+0x48],rdx
  40a8fc:	xor    edx,edx
  40a8fe:	mov    QWORD PTR [r8],0x0
  40a905:	cmp    rsi,rbx
  40a908:	je     40aa7d <_start@@Base+0x411d>
  40a90e:	cmp    BYTE PTR [rsi],0x22
  40a911:	lea    r10,[rsi+0x1]
  40a915:	jne    40aa28 <_start@@Base+0x40c8>
  40a91b:	mov    rax,rbx
  40a91e:	sub    rax,r10
  40a921:	cmp    rax,0x1
  40a925:	jle    40a933 <_start@@Base+0x3fd3>
  40a927:	cmp    BYTE PTR [r10],0x20
  40a92b:	jg     40a944 <_start@@Base+0x3fe4>
  40a92d:	je     40aa6a <_start@@Base+0x410a>
  40a933:	mov    rsi,r10
  40a936:	mov    rdx,rbx
  40a939:	mov    rdi,r12
  40a93c:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40a941:	mov    r10,rax
  40a944:	cmp    rbx,r10
  40a947:	je     40a9b3 <_start@@Base+0x4053>
  40a949:	lea    rax,[rsp+0x38]
  40a94e:	mov    QWORD PTR [rsp+0x10],0x0
  40a957:	mov    QWORD PTR [rsp+0x8],rax
  40a95c:	lea    r15,[rsp+0x3c]
  40a961:	lea    r14,[rsp+0x40]
  40a966:	mov    r13,QWORD PTR [rsp+0x18]
  40a96b:	mov    rbp,r10
  40a96e:	mov    rax,QWORD PTR [r13+0x0]
  40a972:	mov    rsi,r10
  40a975:	jmp    40a995 <_start@@Base+0x4035>
  40a977:	nop    WORD PTR [rax+rax*1+0x0]
  40a980:	cmp    rbp,rax
  40a983:	jne    40a9e0 <_start@@Base+0x4080>
  40a985:	add    r13,0x8
  40a989:	mov    rax,QWORD PTR [r13+0x0]
  40a98d:	mov    rbp,rsi
  40a990:	test   rax,rax
  40a993:	je     40aa10 <_start@@Base+0x40b0>
  40a995:	mov    rcx,QWORD PTR [rsp+0x8]
  40a99a:	mov    r9,r15
  40a99d:	mov    r8,r14
  40a9a0:	mov    rdx,rbx
  40a9a3:	mov    rdi,r12
  40a9a6:	call   rax
  40a9a8:	mov    rsi,rax
  40a9ab:	cmp    rbx,rax
  40a9ae:	jne    40a980 <_start@@Base+0x4020>
  40a9b0:	mov    r10,rax
  40a9b3:	mov    rdi,QWORD PTR [rsp+0x48]
  40a9b8:	xor    rdi,QWORD PTR fs:0x28
  40a9c1:	mov    rax,r10
  40a9c4:	jne    40aa85 <_start@@Base+0x4125>
  40a9ca:	add    rsp,0x58
  40a9ce:	pop    rbx
  40a9cf:	pop    rbp
  40a9d0:	pop    r12
  40a9d2:	pop    r13
  40a9d4:	pop    r14
  40a9d6:	pop    r15
  40a9d8:	ret    
  40a9d9:	nop    DWORD PTR [rax+0x0]
  40a9e0:	mov    r10,rax
  40a9e3:	mov    eax,DWORD PTR [rsp+0x38]
  40a9e7:	test   eax,eax
  40a9e9:	jne    40aa40 <_start@@Base+0x40e0>
  40a9eb:	mov    rax,QWORD PTR [rsp+0x40]
  40a9f0:	mov    QWORD PTR [rsp+0x10],rax
  40a9f5:	mov    rax,QWORD PTR [rsp+0x20]
  40a9fa:	mov    rcx,QWORD PTR [rsp+0x10]
  40a9ff:	mov    edx,DWORD PTR [rsp+0x3c]
  40aa03:	add    QWORD PTR [rax],rcx
  40aa06:	test   edx,edx
  40aa08:	jne    40a966 <_start@@Base+0x4006>
  40aa0e:	jmp    40a9b3 <_start@@Base+0x4053>
  40aa10:	mov    ecx,0x17
  40aa15:	mov    rdx,rbx
  40aa18:	mov    rdi,r12
  40aa1b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40aa20:	mov    r10,rax
  40aa23:	jmp    40a9b3 <_start@@Base+0x4053>
  40aa25:	nop    DWORD PTR [rax]
  40aa28:	mov    ecx,0x5
  40aa2d:	mov    rdx,rbx
  40aa30:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40aa35:	mov    r10,rax
  40aa38:	jmp    40a91b <_start@@Base+0x3fbb>
  40aa3d:	nop    DWORD PTR [rax]
  40aa40:	mov    rsi,r10
  40aa43:	mov    ecx,0x8
  40aa48:	mov    rdx,rbx
  40aa4b:	mov    rdi,r12
  40aa4e:	mov    QWORD PTR [rsp+0x28],r10
  40aa53:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40aa58:	cmp    rbx,rax
  40aa5b:	mov    r10,QWORD PTR [rsp+0x28]
  40aa60:	jne    40a9f5 <_start@@Base+0x4095>
  40aa62:	mov    r10,rbx
  40aa65:	jmp    40a9b3 <_start@@Base+0x4053>
  40aa6a:	cmp    BYTE PTR [r10+0x1],0x20
  40aa6f:	jle    40a933 <_start@@Base+0x3fd3>
  40aa75:	inc    r10
  40aa78:	jmp    40a944 <_start@@Base+0x3fe4>
  40aa7d:	mov    r10,rbx
  40aa80:	jmp    40a933 <_start@@Base+0x3fd3>
  40aa85:	call   4061a0 <__stack_chk_fail@plt>
  40aa8a:	nop    WORD PTR [rax+rax*1+0x0]
  40aa90:	push   r15
  40aa92:	push   r14
  40aa94:	push   r13
  40aa96:	push   r12
  40aa98:	mov    r12,rdi
  40aa9b:	push   rbp
  40aa9c:	push   rbx
  40aa9d:	mov    rbx,rdx
  40aaa0:	sub    rsp,0x58
  40aaa4:	mov    QWORD PTR [rsp+0x18],rcx
  40aaa9:	mov    QWORD PTR [rsp+0x20],r8
  40aaae:	mov    rdx,QWORD PTR fs:0x28
  40aab7:	mov    QWORD PTR [rsp+0x48],rdx
  40aabc:	xor    edx,edx
  40aabe:	mov    BYTE PTR [r8],0x0
  40aac2:	cmp    rsi,rbx
  40aac5:	je     40ac2d <_start@@Base+0x42cd>
  40aacb:	cmp    BYTE PTR [rsi],0x22
  40aace:	lea    r10,[rsi+0x1]
  40aad2:	jne    40abd8 <_start@@Base+0x4278>
  40aad8:	mov    rax,rbx
  40aadb:	sub    rax,r10
  40aade:	cmp    rax,0x1
  40aae2:	jle    40aaf0 <_start@@Base+0x4190>
  40aae4:	cmp    BYTE PTR [r10],0x20
  40aae8:	jg     40ab01 <_start@@Base+0x41a1>
  40aaea:	je     40ac1a <_start@@Base+0x42ba>
  40aaf0:	mov    rsi,r10
  40aaf3:	mov    rdx,rbx
  40aaf6:	mov    rdi,r12
  40aaf9:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40aafe:	mov    r10,rax
  40ab01:	cmp    rbx,r10
  40ab04:	je     40ab63 <_start@@Base+0x4203>
  40ab06:	lea    rax,[rsp+0x38]
  40ab0b:	mov    BYTE PTR [rsp+0x17],0x0
  40ab10:	mov    QWORD PTR [rsp+0x8],rax
  40ab15:	lea    r15,[rsp+0x3c]
  40ab1a:	lea    r14,[rsp+0x40]
  40ab1f:	mov    r13,QWORD PTR [rsp+0x18]
  40ab24:	mov    rbp,r10
  40ab27:	mov    rax,QWORD PTR [r13+0x0]
  40ab2b:	mov    rsi,r10
  40ab2e:	jmp    40ab45 <_start@@Base+0x41e5>
  40ab30:	cmp    rbp,rax
  40ab33:	jne    40ab90 <_start@@Base+0x4230>
  40ab35:	add    r13,0x8
  40ab39:	mov    rax,QWORD PTR [r13+0x0]
  40ab3d:	mov    rbp,rsi
  40ab40:	test   rax,rax
  40ab43:	je     40abc0 <_start@@Base+0x4260>
  40ab45:	mov    rcx,QWORD PTR [rsp+0x8]
  40ab4a:	mov    r9,r15
  40ab4d:	mov    r8,r14
  40ab50:	mov    rdx,rbx
  40ab53:	mov    rdi,r12
  40ab56:	call   rax
  40ab58:	mov    rsi,rax
  40ab5b:	cmp    rbx,rax
  40ab5e:	jne    40ab30 <_start@@Base+0x41d0>
  40ab60:	mov    r10,rax
  40ab63:	mov    rdi,QWORD PTR [rsp+0x48]
  40ab68:	xor    rdi,QWORD PTR fs:0x28
  40ab71:	mov    rax,r10
  40ab74:	jne    40ac35 <_start@@Base+0x42d5>
  40ab7a:	add    rsp,0x58
  40ab7e:	pop    rbx
  40ab7f:	pop    rbp
  40ab80:	pop    r12
  40ab82:	pop    r13
  40ab84:	pop    r14
  40ab86:	pop    r15
  40ab88:	ret    
  40ab89:	nop    DWORD PTR [rax+0x0]
  40ab90:	mov    r10,rax
  40ab93:	mov    eax,DWORD PTR [rsp+0x38]
  40ab97:	test   eax,eax
  40ab99:	jne    40abf0 <_start@@Base+0x4290>
  40ab9b:	cmp    QWORD PTR [rsp+0x40],0x0
  40aba1:	setne  BYTE PTR [rsp+0x17]
  40aba6:	mov    rax,QWORD PTR [rsp+0x20]
  40abab:	movzx  ecx,BYTE PTR [rsp+0x17]
  40abb0:	mov    edx,DWORD PTR [rsp+0x3c]
  40abb4:	add    BYTE PTR [rax],cl
  40abb6:	test   edx,edx
  40abb8:	jne    40ab1f <_start@@Base+0x41bf>
  40abbe:	jmp    40ab63 <_start@@Base+0x4203>
  40abc0:	mov    ecx,0x17
  40abc5:	mov    rdx,rbx
  40abc8:	mov    rdi,r12
  40abcb:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40abd0:	mov    r10,rax
  40abd3:	jmp    40ab63 <_start@@Base+0x4203>
  40abd5:	nop    DWORD PTR [rax]
  40abd8:	mov    ecx,0x5
  40abdd:	mov    rdx,rbx
  40abe0:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40abe5:	mov    r10,rax
  40abe8:	jmp    40aad8 <_start@@Base+0x4178>
  40abed:	nop    DWORD PTR [rax]
  40abf0:	mov    rsi,r10
  40abf3:	mov    ecx,0x8
  40abf8:	mov    rdx,rbx
  40abfb:	mov    rdi,r12
  40abfe:	mov    QWORD PTR [rsp+0x28],r10
  40ac03:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40ac08:	cmp    rbx,rax
  40ac0b:	mov    r10,QWORD PTR [rsp+0x28]
  40ac10:	jne    40aba6 <_start@@Base+0x4246>
  40ac12:	mov    r10,rbx
  40ac15:	jmp    40ab63 <_start@@Base+0x4203>
  40ac1a:	cmp    BYTE PTR [r10+0x1],0x20
  40ac1f:	jle    40aaf0 <_start@@Base+0x4190>
  40ac25:	inc    r10
  40ac28:	jmp    40ab01 <_start@@Base+0x41a1>
  40ac2d:	mov    r10,rbx
  40ac30:	jmp    40aaf0 <_start@@Base+0x4190>
  40ac35:	call   4061a0 <__stack_chk_fail@plt>
  40ac3a:	nop    WORD PTR [rax+rax*1+0x0]
  40ac40:	push   r15
  40ac42:	push   r14
  40ac44:	push   r13
  40ac46:	push   r12
  40ac48:	mov    r12,rdi
  40ac4b:	xor    edi,edi
  40ac4d:	push   rbp
  40ac4e:	push   rbx
  40ac4f:	mov    rbx,rdx
  40ac52:	sub    rsp,0x58
  40ac56:	mov    QWORD PTR [rsp+0x10],rcx
  40ac5b:	mov    QWORD PTR [rsp+0x20],r8
  40ac60:	mov    rdx,QWORD PTR fs:0x28
  40ac69:	mov    QWORD PTR [rsp+0x48],rdx
  40ac6e:	xor    edx,edx
  40ac70:	mov    WORD PTR [r8],di
  40ac74:	cmp    rsi,rbx
  40ac77:	je     40ae0a <_start@@Base+0x44aa>
  40ac7d:	cmp    BYTE PTR [rsi],0x22
  40ac80:	lea    r10,[rsi+0x1]
  40ac84:	jne    40ada0 <_start@@Base+0x4440>
  40ac8a:	mov    rax,rbx
  40ac8d:	sub    rax,r10
  40ac90:	cmp    rax,0x1
  40ac94:	jle    40aca2 <_start@@Base+0x4342>
  40ac96:	cmp    BYTE PTR [r10],0x20
  40ac9a:	jg     40acb3 <_start@@Base+0x4353>
  40ac9c:	je     40adf7 <_start@@Base+0x4497>
  40aca2:	mov    rsi,r10
  40aca5:	mov    rdx,rbx
  40aca8:	mov    rdi,r12
  40acab:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40acb0:	mov    r10,rax
  40acb3:	cmp    rbx,r10
  40acb6:	je     40ad1f <_start@@Base+0x43bf>
  40acb8:	xor    ecx,ecx
  40acba:	lea    rax,[rsp+0x38]
  40acbf:	mov    WORD PTR [rsp+0x1e],cx
  40acc4:	mov    QWORD PTR [rsp+0x8],rax
  40acc9:	lea    r15,[rsp+0x3c]
  40acce:	lea    r14,[rsp+0x40]
  40acd3:	mov    r13,QWORD PTR [rsp+0x10]
  40acd8:	mov    rbp,r10
  40acdb:	mov    rax,QWORD PTR [r13+0x0]
  40acdf:	mov    rsi,r10
  40ace2:	jmp    40ad01 <_start@@Base+0x43a1>
  40ace4:	nop    DWORD PTR [rax+0x0]
  40ace8:	cmp    rbp,rax
  40aceb:	jne    40ad48 <_start@@Base+0x43e8>
  40aced:	add    r13,0x8
  40acf1:	mov    rax,QWORD PTR [r13+0x0]
  40acf5:	mov    rbp,rsi
  40acf8:	test   rax,rax
  40acfb:	je     40ad88 <_start@@Base+0x4428>
  40ad01:	mov    rcx,QWORD PTR [rsp+0x8]
  40ad06:	mov    r9,r15
  40ad09:	mov    r8,r14
  40ad0c:	mov    rdx,rbx
  40ad0f:	mov    rdi,r12
  40ad12:	call   rax
  40ad14:	mov    rsi,rax
  40ad17:	cmp    rbx,rax
  40ad1a:	jne    40ace8 <_start@@Base+0x4388>
  40ad1c:	mov    r10,rax
  40ad1f:	mov    rdi,QWORD PTR [rsp+0x48]
  40ad24:	xor    rdi,QWORD PTR fs:0x28
  40ad2d:	mov    rax,r10
  40ad30:	jne    40ae12 <_start@@Base+0x44b2>
  40ad36:	add    rsp,0x58
  40ad3a:	pop    rbx
  40ad3b:	pop    rbp
  40ad3c:	pop    r12
  40ad3e:	pop    r13
  40ad40:	pop    r14
  40ad42:	pop    r15
  40ad44:	ret    
  40ad45:	nop    DWORD PTR [rax]
  40ad48:	mov    r10,rax
  40ad4b:	mov    eax,DWORD PTR [rsp+0x38]
  40ad4f:	test   eax,eax
  40ad51:	jne    40adc0 <_start@@Base+0x4460>
  40ad53:	mov    rax,QWORD PTR [rsp+0x40]
  40ad58:	cmp    rax,0xffff
  40ad5e:	ja     40adf0 <_start@@Base+0x4490>
  40ad64:	mov    WORD PTR [rsp+0x1e],ax
  40ad69:	mov    rax,QWORD PTR [rsp+0x20]
  40ad6e:	movzx  ecx,WORD PTR [rsp+0x1e]
  40ad73:	mov    edx,DWORD PTR [rsp+0x3c]
  40ad77:	add    WORD PTR [rax],cx
  40ad7a:	test   edx,edx
  40ad7c:	jne    40acd3 <_start@@Base+0x4373>
  40ad82:	jmp    40ad1f <_start@@Base+0x43bf>
  40ad84:	nop    DWORD PTR [rax+0x0]
  40ad88:	mov    ecx,0x17
  40ad8d:	mov    rdx,rbx
  40ad90:	mov    rdi,r12
  40ad93:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40ad98:	mov    r10,rax
  40ad9b:	jmp    40ad1f <_start@@Base+0x43bf>
  40ad9d:	nop    DWORD PTR [rax]
  40ada0:	mov    ecx,0x5
  40ada5:	mov    rdx,rbx
  40ada8:	mov    rdi,r12
  40adab:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40adb0:	mov    r10,rax
  40adb3:	jmp    40ac8a <_start@@Base+0x432a>
  40adb8:	nop    DWORD PTR [rax+rax*1+0x0]
  40adc0:	mov    ecx,0x8
  40adc5:	mov    rsi,r10
  40adc8:	mov    rdx,rbx
  40adcb:	mov    rdi,r12
  40adce:	mov    QWORD PTR [rsp+0x28],r10
  40add3:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40add8:	mov    r10,QWORD PTR [rsp+0x28]
  40addd:	cmp    rbx,rax
  40ade0:	jne    40ad69 <_start@@Base+0x4409>
  40ade2:	mov    r10,rbx
  40ade5:	jmp    40ad1f <_start@@Base+0x43bf>
  40adea:	nop    WORD PTR [rax+rax*1+0x0]
  40adf0:	mov    ecx,0x7
  40adf5:	jmp    40adc5 <_start@@Base+0x4465>
  40adf7:	cmp    BYTE PTR [r10+0x1],0x20
  40adfc:	jle    40aca2 <_start@@Base+0x4342>
  40ae02:	inc    r10
  40ae05:	jmp    40acb3 <_start@@Base+0x4353>
  40ae0a:	mov    r10,rbx
  40ae0d:	jmp    40aca2 <_start@@Base+0x4342>
  40ae12:	call   4061a0 <__stack_chk_fail@plt>
  40ae17:	nop    WORD PTR [rax+rax*1+0x0]
  40ae20:	push   r15
  40ae22:	push   r14
  40ae24:	push   r13
  40ae26:	push   r12
  40ae28:	mov    r12,rdi
  40ae2b:	push   rbp
  40ae2c:	push   rbx
  40ae2d:	mov    rbx,rdx
  40ae30:	sub    rsp,0x58
  40ae34:	mov    QWORD PTR [rsp+0x10],rcx
  40ae39:	mov    QWORD PTR [rsp+0x20],r8
  40ae3e:	mov    rdx,QWORD PTR fs:0x28
  40ae47:	mov    QWORD PTR [rsp+0x48],rdx
  40ae4c:	xor    edx,edx
  40ae4e:	mov    BYTE PTR [r8],0x0
  40ae52:	cmp    rsi,rbx
  40ae55:	je     40afe2 <_start@@Base+0x4682>
  40ae5b:	cmp    BYTE PTR [rsi],0x22
  40ae5e:	lea    r10,[rsi+0x1]
  40ae62:	jne    40af80 <_start@@Base+0x4620>
  40ae68:	mov    rax,rbx
  40ae6b:	sub    rax,r10
  40ae6e:	cmp    rax,0x1
  40ae72:	jle    40ae80 <_start@@Base+0x4520>
  40ae74:	cmp    BYTE PTR [r10],0x20
  40ae78:	jg     40ae91 <_start@@Base+0x4531>
  40ae7a:	je     40afcf <_start@@Base+0x466f>
  40ae80:	mov    rsi,r10
  40ae83:	mov    rdx,rbx
  40ae86:	mov    rdi,r12
  40ae89:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40ae8e:	mov    r10,rax
  40ae91:	cmp    rbx,r10
  40ae94:	je     40aef7 <_start@@Base+0x4597>
  40ae96:	lea    rax,[rsp+0x38]
  40ae9b:	mov    BYTE PTR [rsp+0x1f],0x0
  40aea0:	mov    QWORD PTR [rsp+0x8],rax
  40aea5:	lea    r15,[rsp+0x3c]
  40aeaa:	lea    r14,[rsp+0x40]
  40aeaf:	mov    r13,QWORD PTR [rsp+0x10]
  40aeb4:	mov    rbp,r10
  40aeb7:	mov    rax,QWORD PTR [r13+0x0]
  40aebb:	mov    rsi,r10
  40aebe:	jmp    40aed9 <_start@@Base+0x4579>
  40aec0:	cmp    rbp,rax
  40aec3:	jne    40af20 <_start@@Base+0x45c0>
  40aec5:	add    r13,0x8
  40aec9:	mov    rax,QWORD PTR [r13+0x0]
  40aecd:	mov    rbp,rsi
  40aed0:	test   rax,rax
  40aed3:	je     40af60 <_start@@Base+0x4600>
  40aed9:	mov    rcx,QWORD PTR [rsp+0x8]
  40aede:	mov    r9,r15
  40aee1:	mov    r8,r14
  40aee4:	mov    rdx,rbx
  40aee7:	mov    rdi,r12
  40aeea:	call   rax
  40aeec:	mov    rsi,rax
  40aeef:	cmp    rbx,rax
  40aef2:	jne    40aec0 <_start@@Base+0x4560>
  40aef4:	mov    r10,rax
  40aef7:	mov    rdi,QWORD PTR [rsp+0x48]
  40aefc:	xor    rdi,QWORD PTR fs:0x28
  40af05:	mov    rax,r10
  40af08:	jne    40afea <_start@@Base+0x468a>
  40af0e:	add    rsp,0x58
  40af12:	pop    rbx
  40af13:	pop    rbp
  40af14:	pop    r12
  40af16:	pop    r13
  40af18:	pop    r14
  40af1a:	pop    r15
  40af1c:	ret    
  40af1d:	nop    DWORD PTR [rax]
  40af20:	mov    r10,rax
  40af23:	mov    eax,DWORD PTR [rsp+0x38]
  40af27:	test   eax,eax
  40af29:	jne    40af98 <_start@@Base+0x4638>
  40af2b:	mov    rax,QWORD PTR [rsp+0x40]
  40af30:	cmp    rax,0xff
  40af36:	ja     40afc8 <_start@@Base+0x4668>
  40af3c:	mov    BYTE PTR [rsp+0x1f],al
  40af40:	mov    rax,QWORD PTR [rsp+0x20]
  40af45:	movzx  ecx,BYTE PTR [rsp+0x1f]
  40af4a:	mov    edx,DWORD PTR [rsp+0x3c]
  40af4e:	add    BYTE PTR [rax],cl
  40af50:	test   edx,edx
  40af52:	jne    40aeaf <_start@@Base+0x454f>
  40af58:	jmp    40aef7 <_start@@Base+0x4597>
  40af5a:	nop    WORD PTR [rax+rax*1+0x0]
  40af60:	mov    ecx,0x17
  40af65:	mov    rdx,rbx
  40af68:	mov    rdi,r12
  40af6b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40af70:	mov    r10,rax
  40af73:	jmp    40aef7 <_start@@Base+0x4597>
  40af78:	nop    DWORD PTR [rax+rax*1+0x0]
  40af80:	mov    ecx,0x5
  40af85:	mov    rdx,rbx
  40af88:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40af8d:	mov    r10,rax
  40af90:	jmp    40ae68 <_start@@Base+0x4508>
  40af95:	nop    DWORD PTR [rax]
  40af98:	mov    ecx,0x8
  40af9d:	mov    rsi,r10
  40afa0:	mov    rdx,rbx
  40afa3:	mov    rdi,r12
  40afa6:	mov    QWORD PTR [rsp+0x28],r10
  40afab:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40afb0:	mov    r10,QWORD PTR [rsp+0x28]
  40afb5:	cmp    rbx,rax
  40afb8:	jne    40af40 <_start@@Base+0x45e0>
  40afba:	mov    r10,rbx
  40afbd:	jmp    40aef7 <_start@@Base+0x4597>
  40afc2:	nop    WORD PTR [rax+rax*1+0x0]
  40afc8:	mov    ecx,0x7
  40afcd:	jmp    40af9d <_start@@Base+0x463d>
  40afcf:	cmp    BYTE PTR [r10+0x1],0x20
  40afd4:	jle    40ae80 <_start@@Base+0x4520>
  40afda:	inc    r10
  40afdd:	jmp    40ae91 <_start@@Base+0x4531>
  40afe2:	mov    r10,rbx
  40afe5:	jmp    40ae80 <_start@@Base+0x4520>
  40afea:	call   4061a0 <__stack_chk_fail@plt>
  40afef:	nop
  40aff0:	push   r15
  40aff2:	push   r14
  40aff4:	push   r13
  40aff6:	push   r12
  40aff8:	mov    r12,rdi
  40affb:	push   rbp
  40affc:	push   rbx
  40affd:	mov    rbx,rdx
  40b000:	sub    rsp,0x58
  40b004:	mov    QWORD PTR [rsp+0x18],rcx
  40b009:	mov    QWORD PTR [rsp+0x20],r8
  40b00e:	mov    rdi,QWORD PTR fs:0x28
  40b017:	mov    QWORD PTR [rsp+0x48],rdi
  40b01c:	xor    edi,edi
  40b01e:	mov    DWORD PTR [r8],0x0
  40b025:	cmp    rsi,rdx
  40b028:	je     40b1c6 <_start@@Base+0x4866>
  40b02e:	cmp    BYTE PTR [rsi],0x22
  40b031:	lea    r10,[rsi+0x1]
  40b035:	jne    40b170 <_start@@Base+0x4810>
  40b03b:	mov    rax,rbx
  40b03e:	sub    rax,r10
  40b041:	cmp    rax,0x1
  40b045:	jle    40b053 <_start@@Base+0x46f3>
  40b047:	cmp    BYTE PTR [r10],0x20
  40b04b:	jg     40b064 <_start@@Base+0x4704>
  40b04d:	je     40b1b3 <_start@@Base+0x4853>
  40b053:	mov    rsi,r10
  40b056:	mov    rdx,rbx
  40b059:	mov    rdi,r12
  40b05c:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40b061:	mov    r10,rax
  40b064:	cmp    rbx,r10
  40b067:	je     40b0d7 <_start@@Base+0x4777>
  40b069:	lea    rax,[rsp+0x38]
  40b06e:	mov    DWORD PTR [rsp+0x14],0x0
  40b076:	mov    QWORD PTR [rsp+0x8],rax
  40b07b:	lea    r15,[rsp+0x3c]
  40b080:	lea    r14,[rsp+0x40]
  40b085:	mov    r13,QWORD PTR [rsp+0x18]
  40b08a:	mov    rbp,r10
  40b08d:	mov    rax,QWORD PTR [r13+0x0]
  40b091:	mov    rsi,r10
  40b094:	jmp    40b0b9 <_start@@Base+0x4759>
  40b096:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b0a0:	cmp    rbp,rax
  40b0a3:	jne    40b100 <_start@@Base+0x47a0>
  40b0a5:	add    r13,0x8
  40b0a9:	mov    rax,QWORD PTR [r13+0x0]
  40b0ad:	mov    rbp,rsi
  40b0b0:	test   rax,rax
  40b0b3:	je     40b140 <_start@@Base+0x47e0>
  40b0b9:	mov    rcx,QWORD PTR [rsp+0x8]
  40b0be:	mov    r9,r15
  40b0c1:	mov    r8,r14
  40b0c4:	mov    rdx,rbx
  40b0c7:	mov    rdi,r12
  40b0ca:	call   rax
  40b0cc:	mov    rsi,rax
  40b0cf:	cmp    rbx,rax
  40b0d2:	jne    40b0a0 <_start@@Base+0x4740>
  40b0d4:	mov    r10,rax
  40b0d7:	mov    rdi,QWORD PTR [rsp+0x48]
  40b0dc:	xor    rdi,QWORD PTR fs:0x28
  40b0e5:	mov    rax,r10
  40b0e8:	jne    40b1ce <_start@@Base+0x486e>
  40b0ee:	add    rsp,0x58
  40b0f2:	pop    rbx
  40b0f3:	pop    rbp
  40b0f4:	pop    r12
  40b0f6:	pop    r13
  40b0f8:	pop    r14
  40b0fa:	pop    r15
  40b0fc:	ret    
  40b0fd:	nop    DWORD PTR [rax]
  40b100:	mov    edx,DWORD PTR [rsp+0x38]
  40b104:	mov    r10,rax
  40b107:	mov    rax,QWORD PTR [rsp+0x40]
  40b10c:	test   edx,edx
  40b10e:	je     40b160 <_start@@Base+0x4800>
  40b110:	mov    edx,0x80000000
  40b115:	mov    ecx,0x8
  40b11a:	cmp    rax,rdx
  40b11d:	ja     40b18a <_start@@Base+0x482a>
  40b11f:	neg    eax
  40b121:	mov    DWORD PTR [rsp+0x14],eax
  40b125:	mov    ecx,DWORD PTR [rsp+0x14]
  40b129:	mov    rax,QWORD PTR [rsp+0x20]
  40b12e:	add    DWORD PTR [rax],ecx
  40b130:	mov    ecx,DWORD PTR [rsp+0x3c]
  40b134:	test   ecx,ecx
  40b136:	jne    40b085 <_start@@Base+0x4725>
  40b13c:	jmp    40b0d7 <_start@@Base+0x4777>
  40b13e:	xchg   ax,ax
  40b140:	mov    ecx,0x17
  40b145:	mov    rdx,rbx
  40b148:	mov    rdi,r12
  40b14b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40b150:	mov    r10,rax
  40b153:	jmp    40b0d7 <_start@@Base+0x4777>
  40b158:	nop    DWORD PTR [rax+rax*1+0x0]
  40b160:	cmp    rax,0x7fffffff
  40b166:	ja     40b185 <_start@@Base+0x4825>
  40b168:	mov    DWORD PTR [rsp+0x14],eax
  40b16c:	jmp    40b125 <_start@@Base+0x47c5>
  40b16e:	xchg   ax,ax
  40b170:	mov    ecx,0x5
  40b175:	mov    rdi,r12
  40b178:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40b17d:	mov    r10,rax
  40b180:	jmp    40b03b <_start@@Base+0x46db>
  40b185:	mov    ecx,0x7
  40b18a:	mov    rsi,r10
  40b18d:	mov    rdx,rbx
  40b190:	mov    rdi,r12
  40b193:	mov    QWORD PTR [rsp+0x28],r10
  40b198:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40b19d:	mov    r10,QWORD PTR [rsp+0x28]
  40b1a2:	cmp    rbx,rax
  40b1a5:	jne    40b125 <_start@@Base+0x47c5>
  40b1ab:	mov    r10,rbx
  40b1ae:	jmp    40b0d7 <_start@@Base+0x4777>
  40b1b3:	cmp    BYTE PTR [r10+0x1],0x20
  40b1b8:	jle    40b053 <_start@@Base+0x46f3>
  40b1be:	inc    r10
  40b1c1:	jmp    40b064 <_start@@Base+0x4704>
  40b1c6:	mov    r10,rdx
  40b1c9:	jmp    40b053 <_start@@Base+0x46f3>
  40b1ce:	call   4061a0 <__stack_chk_fail@plt>
  40b1d3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40b1de:	xchg   ax,ax
  40b1e0:	push   r15
  40b1e2:	push   r14
  40b1e4:	push   r13
  40b1e6:	push   r12
  40b1e8:	mov    r12,rdi
  40b1eb:	push   rbp
  40b1ec:	push   rbx
  40b1ed:	mov    rbx,rdx
  40b1f0:	sub    rsp,0x58
  40b1f4:	mov    QWORD PTR [rsp+0x10],rcx
  40b1f9:	mov    QWORD PTR [rsp+0x20],r8
  40b1fe:	mov    rdi,QWORD PTR fs:0x28
  40b207:	mov    QWORD PTR [rsp+0x48],rdi
  40b20c:	xor    edi,edi
  40b20e:	mov    DWORD PTR [r8],0x0
  40b215:	cmp    rsi,rdx
  40b218:	je     40b3b2 <_start@@Base+0x4a52>
  40b21e:	cmp    BYTE PTR [rsi],0x22
  40b221:	lea    r10,[rsi+0x1]
  40b225:	jne    40b350 <_start@@Base+0x49f0>
  40b22b:	mov    rax,rbx
  40b22e:	sub    rax,r10
  40b231:	cmp    rax,0x1
  40b235:	jle    40b243 <_start@@Base+0x48e3>
  40b237:	cmp    BYTE PTR [r10],0x20
  40b23b:	jg     40b254 <_start@@Base+0x48f4>
  40b23d:	je     40b39f <_start@@Base+0x4a3f>
  40b243:	mov    rsi,r10
  40b246:	mov    rdx,rbx
  40b249:	mov    rdi,r12
  40b24c:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40b251:	mov    r10,rax
  40b254:	cmp    rbx,r10
  40b257:	je     40b2c7 <_start@@Base+0x4967>
  40b259:	lea    rax,[rsp+0x38]
  40b25e:	mov    DWORD PTR [rsp+0x1c],0x0
  40b266:	mov    QWORD PTR [rsp+0x8],rax
  40b26b:	lea    r15,[rsp+0x3c]
  40b270:	lea    r14,[rsp+0x40]
  40b275:	mov    r13,QWORD PTR [rsp+0x10]
  40b27a:	mov    rbp,r10
  40b27d:	mov    rax,QWORD PTR [r13+0x0]
  40b281:	mov    rsi,r10
  40b284:	jmp    40b2a9 <_start@@Base+0x4949>
  40b286:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b290:	cmp    rbp,rax
  40b293:	jne    40b2f0 <_start@@Base+0x4990>
  40b295:	add    r13,0x8
  40b299:	mov    rax,QWORD PTR [r13+0x0]
  40b29d:	mov    rbp,rsi
  40b2a0:	test   rax,rax
  40b2a3:	je     40b330 <_start@@Base+0x49d0>
  40b2a9:	mov    rcx,QWORD PTR [rsp+0x8]
  40b2ae:	mov    r9,r15
  40b2b1:	mov    r8,r14
  40b2b4:	mov    rdx,rbx
  40b2b7:	mov    rdi,r12
  40b2ba:	call   rax
  40b2bc:	mov    rsi,rax
  40b2bf:	cmp    rbx,rax
  40b2c2:	jne    40b290 <_start@@Base+0x4930>
  40b2c4:	mov    r10,rax
  40b2c7:	mov    rdi,QWORD PTR [rsp+0x48]
  40b2cc:	xor    rdi,QWORD PTR fs:0x28
  40b2d5:	mov    rax,r10
  40b2d8:	jne    40b3ba <_start@@Base+0x4a5a>
  40b2de:	add    rsp,0x58
  40b2e2:	pop    rbx
  40b2e3:	pop    rbp
  40b2e4:	pop    r12
  40b2e6:	pop    r13
  40b2e8:	pop    r14
  40b2ea:	pop    r15
  40b2ec:	ret    
  40b2ed:	nop    DWORD PTR [rax]
  40b2f0:	mov    r10,rax
  40b2f3:	mov    eax,DWORD PTR [rsp+0x38]
  40b2f7:	test   eax,eax
  40b2f9:	jne    40b368 <_start@@Base+0x4a08>
  40b2fb:	mov    rax,QWORD PTR [rsp+0x40]
  40b300:	mov    edx,0xffffffff
  40b305:	cmp    rax,rdx
  40b308:	ja     40b398 <_start@@Base+0x4a38>
  40b30e:	mov    DWORD PTR [rsp+0x1c],eax
  40b312:	mov    rax,QWORD PTR [rsp+0x20]
  40b317:	mov    ecx,DWORD PTR [rsp+0x1c]
  40b31b:	mov    edx,DWORD PTR [rsp+0x3c]
  40b31f:	add    DWORD PTR [rax],ecx
  40b321:	test   edx,edx
  40b323:	jne    40b275 <_start@@Base+0x4915>
  40b329:	jmp    40b2c7 <_start@@Base+0x4967>
  40b32b:	nop    DWORD PTR [rax+rax*1+0x0]
  40b330:	mov    ecx,0x17
  40b335:	mov    rdx,rbx
  40b338:	mov    rdi,r12
  40b33b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40b340:	mov    r10,rax
  40b343:	jmp    40b2c7 <_start@@Base+0x4967>
  40b348:	nop    DWORD PTR [rax+rax*1+0x0]
  40b350:	mov    ecx,0x5
  40b355:	mov    rdi,r12
  40b358:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40b35d:	mov    r10,rax
  40b360:	jmp    40b22b <_start@@Base+0x48cb>
  40b365:	nop    DWORD PTR [rax]
  40b368:	mov    ecx,0x8
  40b36d:	mov    rsi,r10
  40b370:	mov    rdx,rbx
  40b373:	mov    rdi,r12
  40b376:	mov    QWORD PTR [rsp+0x28],r10
  40b37b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40b380:	mov    r10,QWORD PTR [rsp+0x28]
  40b385:	cmp    rbx,rax
  40b388:	jne    40b312 <_start@@Base+0x49b2>
  40b38a:	mov    r10,rbx
  40b38d:	jmp    40b2c7 <_start@@Base+0x4967>
  40b392:	nop    WORD PTR [rax+rax*1+0x0]
  40b398:	mov    ecx,0x7
  40b39d:	jmp    40b36d <_start@@Base+0x4a0d>
  40b39f:	cmp    BYTE PTR [r10+0x1],0x20
  40b3a4:	jle    40b243 <_start@@Base+0x48e3>
  40b3aa:	inc    r10
  40b3ad:	jmp    40b254 <_start@@Base+0x48f4>
  40b3b2:	mov    r10,rdx
  40b3b5:	jmp    40b243 <_start@@Base+0x48e3>
  40b3ba:	call   4061a0 <__stack_chk_fail@plt>
  40b3bf:	nop
  40b3c0:	push   r15
  40b3c2:	push   r14
  40b3c4:	push   r13
  40b3c6:	push   r12
  40b3c8:	mov    r12,rdi
  40b3cb:	xor    edi,edi
  40b3cd:	push   rbp
  40b3ce:	push   rbx
  40b3cf:	mov    rbx,rdx
  40b3d2:	sub    rsp,0x58
  40b3d6:	mov    QWORD PTR [rsp+0x10],rcx
  40b3db:	mov    QWORD PTR [rsp+0x18],r8
  40b3e0:	mov    rdx,QWORD PTR fs:0x28
  40b3e9:	mov    QWORD PTR [rsp+0x48],rdx
  40b3ee:	xor    edx,edx
  40b3f0:	mov    WORD PTR [r8],di
  40b3f4:	cmp    rsi,rbx
  40b3f7:	je     40b587 <_start@@Base+0x4c27>
  40b3fd:	cmp    BYTE PTR [rsi],0x22
  40b400:	lea    r10,[rsi+0x1]
  40b404:	jne    40b530 <_start@@Base+0x4bd0>
  40b40a:	mov    rax,rbx
  40b40d:	sub    rax,r10
  40b410:	cmp    rax,0x1
  40b414:	jle    40b422 <_start@@Base+0x4ac2>
  40b416:	cmp    BYTE PTR [r10],0x20
  40b41a:	jg     40b433 <_start@@Base+0x4ad3>
  40b41c:	je     40b574 <_start@@Base+0x4c14>
  40b422:	mov    rsi,r10
  40b425:	mov    rdx,rbx
  40b428:	mov    rdi,r12
  40b42b:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40b430:	mov    r10,rax
  40b433:	cmp    rbx,r10
  40b436:	je     40b49f <_start@@Base+0x4b3f>
  40b438:	xor    esi,esi
  40b43a:	lea    rax,[rsp+0x38]
  40b43f:	mov    WORD PTR [rsp+0x26],si
  40b444:	mov    QWORD PTR [rsp+0x8],rax
  40b449:	lea    r15,[rsp+0x3c]
  40b44e:	lea    r14,[rsp+0x40]
  40b453:	mov    r13,QWORD PTR [rsp+0x10]
  40b458:	mov    rbp,r10
  40b45b:	mov    rax,QWORD PTR [r13+0x0]
  40b45f:	mov    rsi,r10
  40b462:	jmp    40b481 <_start@@Base+0x4b21>
  40b464:	nop    DWORD PTR [rax+0x0]
  40b468:	cmp    rbp,rax
  40b46b:	jne    40b4c8 <_start@@Base+0x4b68>
  40b46d:	add    r13,0x8
  40b471:	mov    rax,QWORD PTR [r13+0x0]
  40b475:	mov    rbp,rsi
  40b478:	test   rax,rax
  40b47b:	je     40b508 <_start@@Base+0x4ba8>
  40b481:	mov    rcx,QWORD PTR [rsp+0x8]
  40b486:	mov    r9,r15
  40b489:	mov    r8,r14
  40b48c:	mov    rdx,rbx
  40b48f:	mov    rdi,r12
  40b492:	call   rax
  40b494:	mov    rsi,rax
  40b497:	cmp    rbx,rax
  40b49a:	jne    40b468 <_start@@Base+0x4b08>
  40b49c:	mov    r10,rax
  40b49f:	mov    rdi,QWORD PTR [rsp+0x48]
  40b4a4:	xor    rdi,QWORD PTR fs:0x28
  40b4ad:	mov    rax,r10
  40b4b0:	jne    40b597 <_start@@Base+0x4c37>
  40b4b6:	add    rsp,0x58
  40b4ba:	pop    rbx
  40b4bb:	pop    rbp
  40b4bc:	pop    r12
  40b4be:	pop    r13
  40b4c0:	pop    r14
  40b4c2:	pop    r15
  40b4c4:	ret    
  40b4c5:	nop    DWORD PTR [rax]
  40b4c8:	mov    edx,DWORD PTR [rsp+0x38]
  40b4cc:	mov    r10,rax
  40b4cf:	mov    rax,QWORD PTR [rsp+0x40]
  40b4d4:	test   edx,edx
  40b4d6:	je     40b520 <_start@@Base+0x4bc0>
  40b4d8:	mov    ecx,0x8
  40b4dd:	cmp    rax,0x8000
  40b4e3:	ja     40b54d <_start@@Base+0x4bed>
  40b4e5:	neg    eax
  40b4e7:	mov    WORD PTR [rsp+0x26],ax
  40b4ec:	mov    rcx,QWORD PTR [rsp+0x18]
  40b4f1:	add    WORD PTR [rcx],ax
  40b4f4:	mov    ecx,DWORD PTR [rsp+0x3c]
  40b4f8:	test   ecx,ecx
  40b4fa:	jne    40b453 <_start@@Base+0x4af3>
  40b500:	jmp    40b49f <_start@@Base+0x4b3f>
  40b502:	nop    WORD PTR [rax+rax*1+0x0]
  40b508:	mov    ecx,0x17
  40b50d:	mov    rdx,rbx
  40b510:	mov    rdi,r12
  40b513:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40b518:	mov    r10,rax
  40b51b:	jmp    40b49f <_start@@Base+0x4b3f>
  40b520:	cmp    rax,0x7fff
  40b526:	ja     40b548 <_start@@Base+0x4be8>
  40b528:	mov    WORD PTR [rsp+0x26],ax
  40b52d:	jmp    40b4ec <_start@@Base+0x4b8c>
  40b52f:	nop
  40b530:	mov    ecx,0x5
  40b535:	mov    rdx,rbx
  40b538:	mov    rdi,r12
  40b53b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40b540:	mov    r10,rax
  40b543:	jmp    40b40a <_start@@Base+0x4aaa>
  40b548:	mov    ecx,0x7
  40b54d:	mov    rsi,r10
  40b550:	mov    rdx,rbx
  40b553:	mov    rdi,r12
  40b556:	mov    QWORD PTR [rsp+0x28],r10
  40b55b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40b560:	mov    r10,QWORD PTR [rsp+0x28]
  40b565:	cmp    rbx,rax
  40b568:	je     40b58f <_start@@Base+0x4c2f>
  40b56a:	movzx  eax,WORD PTR [rsp+0x26]
  40b56f:	jmp    40b4ec <_start@@Base+0x4b8c>
  40b574:	cmp    BYTE PTR [r10+0x1],0x20
  40b579:	jle    40b422 <_start@@Base+0x4ac2>
  40b57f:	inc    r10
  40b582:	jmp    40b433 <_start@@Base+0x4ad3>
  40b587:	mov    r10,rbx
  40b58a:	jmp    40b422 <_start@@Base+0x4ac2>
  40b58f:	mov    r10,rbx
  40b592:	jmp    40b49f <_start@@Base+0x4b3f>
  40b597:	call   4061a0 <__stack_chk_fail@plt>
  40b59c:	nop    DWORD PTR [rax+0x0]
  40b5a0:	push   r15
  40b5a2:	push   r14
  40b5a4:	push   r13
  40b5a6:	push   r12
  40b5a8:	mov    r12,rdi
  40b5ab:	push   rbp
  40b5ac:	push   rbx
  40b5ad:	mov    rbx,rdx
  40b5b0:	sub    rsp,0x58
  40b5b4:	mov    QWORD PTR [rsp+0x18],rcx
  40b5b9:	mov    QWORD PTR [rsp+0x20],r8
  40b5be:	mov    rdi,QWORD PTR fs:0x28
  40b5c7:	mov    QWORD PTR [rsp+0x48],rdi
  40b5cc:	xor    edi,edi
  40b5ce:	mov    QWORD PTR [r8],0x0
  40b5d5:	cmp    rsi,rdx
  40b5d8:	je     40b780 <_start@@Base+0x4e20>
  40b5de:	cmp    BYTE PTR [rsi],0x22
  40b5e1:	lea    r10,[rsi+0x1]
  40b5e5:	jne    40b758 <_start@@Base+0x4df8>
  40b5eb:	mov    rax,rbx
  40b5ee:	sub    rax,r10
  40b5f1:	cmp    rax,0x1
  40b5f5:	jle    40b603 <_start@@Base+0x4ca3>
  40b5f7:	cmp    BYTE PTR [r10],0x20
  40b5fb:	jg     40b614 <_start@@Base+0x4cb4>
  40b5fd:	je     40b76d <_start@@Base+0x4e0d>
  40b603:	mov    rsi,r10
  40b606:	mov    rdx,rbx
  40b609:	mov    rdi,r12
  40b60c:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40b611:	mov    r10,rax
  40b614:	cmp    rbx,r10
  40b617:	je     40b687 <_start@@Base+0x4d27>
  40b619:	lea    rax,[rsp+0x38]
  40b61e:	mov    QWORD PTR [rsp+0x10],0x0
  40b627:	mov    QWORD PTR [rsp+0x8],rax
  40b62c:	lea    r15,[rsp+0x3c]
  40b631:	lea    r14,[rsp+0x40]
  40b636:	mov    r13,QWORD PTR [rsp+0x18]
  40b63b:	mov    rbp,r10
  40b63e:	mov    rax,QWORD PTR [r13+0x0]
  40b642:	mov    rsi,r10
  40b645:	jmp    40b669 <_start@@Base+0x4d09>
  40b647:	nop    WORD PTR [rax+rax*1+0x0]
  40b650:	cmp    rbp,rax
  40b653:	jne    40b6b0 <_start@@Base+0x4d50>
  40b655:	add    r13,0x8
  40b659:	mov    rax,QWORD PTR [r13+0x0]
  40b65d:	mov    rbp,rsi
  40b660:	test   rax,rax
  40b663:	je     40b700 <_start@@Base+0x4da0>
  40b669:	mov    rcx,QWORD PTR [rsp+0x8]
  40b66e:	mov    r9,r15
  40b671:	mov    r8,r14
  40b674:	mov    rdx,rbx
  40b677:	mov    rdi,r12
  40b67a:	call   rax
  40b67c:	mov    rsi,rax
  40b67f:	cmp    rbx,rax
  40b682:	jne    40b650 <_start@@Base+0x4cf0>
  40b684:	mov    r10,rax
  40b687:	mov    rcx,QWORD PTR [rsp+0x48]
  40b68c:	xor    rcx,QWORD PTR fs:0x28
  40b695:	mov    rax,r10
  40b698:	jne    40b788 <_start@@Base+0x4e28>
  40b69e:	add    rsp,0x58
  40b6a2:	pop    rbx
  40b6a3:	pop    rbp
  40b6a4:	pop    r12
  40b6a6:	pop    r13
  40b6a8:	pop    r14
  40b6aa:	pop    r15
  40b6ac:	ret    
  40b6ad:	nop    DWORD PTR [rax]
  40b6b0:	mov    edx,DWORD PTR [rsp+0x38]
  40b6b4:	mov    r10,rax
  40b6b7:	mov    rax,QWORD PTR [rsp+0x40]
  40b6bc:	test   edx,edx
  40b6be:	je     40b720 <_start@@Base+0x4dc0>
  40b6c0:	mov    rdx,rax
  40b6c3:	movabs rdi,0x8000000000000000
  40b6cd:	neg    rdx
  40b6d0:	mov    ecx,0x8
  40b6d5:	cmp    rax,rdi
  40b6d8:	ja     40b72d <_start@@Base+0x4dcd>
  40b6da:	mov    QWORD PTR [rsp+0x10],rdx
  40b6df:	mov    rcx,QWORD PTR [rsp+0x10]
  40b6e4:	mov    rax,QWORD PTR [rsp+0x20]
  40b6e9:	add    QWORD PTR [rax],rcx
  40b6ec:	mov    ecx,DWORD PTR [rsp+0x3c]
  40b6f0:	test   ecx,ecx
  40b6f2:	jne    40b636 <_start@@Base+0x4cd6>
  40b6f8:	jmp    40b687 <_start@@Base+0x4d27>
  40b6fa:	nop    WORD PTR [rax+rax*1+0x0]
  40b700:	mov    ecx,0x17
  40b705:	mov    rdx,rbx
  40b708:	mov    rdi,r12
  40b70b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40b710:	mov    r10,rax
  40b713:	jmp    40b687 <_start@@Base+0x4d27>
  40b718:	nop    DWORD PTR [rax+rax*1+0x0]
  40b720:	mov    rdx,rax
  40b723:	test   rax,rax
  40b726:	jns    40b6da <_start@@Base+0x4d7a>
  40b728:	mov    ecx,0x7
  40b72d:	mov    rsi,r10
  40b730:	mov    rdx,rbx
  40b733:	mov    rdi,r12
  40b736:	mov    QWORD PTR [rsp+0x28],r10
  40b73b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40b740:	mov    r10,QWORD PTR [rsp+0x28]
  40b745:	cmp    rbx,rax
  40b748:	jne    40b6df <_start@@Base+0x4d7f>
  40b74a:	mov    r10,rbx
  40b74d:	jmp    40b687 <_start@@Base+0x4d27>
  40b752:	nop    WORD PTR [rax+rax*1+0x0]
  40b758:	mov    ecx,0x5
  40b75d:	mov    rdi,r12
  40b760:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40b765:	mov    r10,rax
  40b768:	jmp    40b5eb <_start@@Base+0x4c8b>
  40b76d:	cmp    BYTE PTR [r10+0x1],0x20
  40b772:	jle    40b603 <_start@@Base+0x4ca3>
  40b778:	inc    r10
  40b77b:	jmp    40b614 <_start@@Base+0x4cb4>
  40b780:	mov    r10,rdx
  40b783:	jmp    40b603 <_start@@Base+0x4ca3>
  40b788:	call   4061a0 <__stack_chk_fail@plt>
  40b78d:	nop    DWORD PTR [rax]
  40b790:	cmp    rsi,rdx
  40b793:	je     40b79a <_start@@Base+0x4e3a>
  40b795:	cmp    BYTE PTR [rsi],0x5b
  40b798:	je     40b7b0 <_start@@Base+0x4e50>
  40b79a:	mov    DWORD PTR [rcx],0x0
  40b7a0:	mov    ecx,0x16
  40b7a5:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  40b7aa:	nop    WORD PTR [rax+rax*1+0x0]
  40b7b0:	push   r12
  40b7b2:	lea    rax,[rsi+0x1]
  40b7b6:	mov    r12,rdi
  40b7b9:	push   rbp
  40b7ba:	mov    rbp,rcx
  40b7bd:	push   rbx
  40b7be:	mov    rbx,rdx
  40b7c1:	sub    rdx,rax
  40b7c4:	cmp    rdx,0x1
  40b7c8:	jle    40b7d2 <_start@@Base+0x4e72>
  40b7ca:	cmp    BYTE PTR [rsi+0x1],0x20
  40b7ce:	jg     40b7e0 <_start@@Base+0x4e80>
  40b7d0:	je     40b800 <_start@@Base+0x4ea0>
  40b7d2:	mov    rdx,rbx
  40b7d5:	mov    rsi,rax
  40b7d8:	mov    rdi,r12
  40b7db:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40b7e0:	cmp    rbx,rax
  40b7e3:	je     40b7ea <_start@@Base+0x4e8a>
  40b7e5:	cmp    BYTE PTR [rax],0x5d
  40b7e8:	je     40b810 <_start@@Base+0x4eb0>
  40b7ea:	mov    DWORD PTR [rbp+0x0],0x1
  40b7f1:	pop    rbx
  40b7f2:	pop    rbp
  40b7f3:	pop    r12
  40b7f5:	ret    
  40b7f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b800:	cmp    BYTE PTR [rsi+0x2],0x20
  40b804:	jle    40b7d2 <_start@@Base+0x4e72>
  40b806:	lea    rax,[rsi+0x2]
  40b80a:	jmp    40b7e0 <_start@@Base+0x4e80>
  40b80c:	nop    DWORD PTR [rax+0x0]
  40b810:	mov    DWORD PTR [rbp+0x0],0x0
  40b817:	mov    rdx,rbx
  40b81a:	mov    rdi,r12
  40b81d:	pop    rbx
  40b81e:	pop    rbp
  40b81f:	lea    rsi,[rax+0x1]
  40b823:	pop    r12
  40b825:	jmp    407a60 <_start@@Base+0x1100>
  40b82a:	nop    WORD PTR [rax+rax*1+0x0]
  40b830:	movsxd rcx,ecx
  40b833:	cmp    BYTE PTR [rsi+rcx*1],0x22
  40b837:	je     40b840 <_start@@Base+0x4ee0>
  40b839:	mov    rax,rsi
  40b83c:	ret    
  40b83d:	nop    DWORD PTR [rax]
  40b840:	push   rbp
  40b841:	lea    rsi,[rsi+rcx*1+0x1]
  40b846:	mov    rax,rdx
  40b849:	push   rbx
  40b84a:	sub    rax,rsi
  40b84d:	mov    rbx,rdx
  40b850:	sub    rsp,0x8
  40b854:	mov    rbp,rdi
  40b857:	cmp    rax,0x1
  40b85b:	jle    40b870 <_start@@Base+0x4f10>
  40b85d:	cmp    BYTE PTR [rsi],0x20
  40b860:	jg     40b87e <_start@@Base+0x4f1e>
  40b862:	jne    40b870 <_start@@Base+0x4f10>
  40b864:	cmp    BYTE PTR [rsi+0x1],0x20
  40b868:	jg     40b8a0 <_start@@Base+0x4f40>
  40b86a:	nop    WORD PTR [rax+rax*1+0x0]
  40b870:	mov    rdx,rbx
  40b873:	mov    rdi,rbp
  40b876:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40b87b:	mov    rsi,rax
  40b87e:	cmp    rbx,rsi
  40b881:	je     40b888 <_start@@Base+0x4f28>
  40b883:	cmp    BYTE PTR [rsi],0x3a
  40b886:	je     40b8a8 <_start@@Base+0x4f48>
  40b888:	add    rsp,0x8
  40b88c:	mov    rdx,rbx
  40b88f:	pop    rbx
  40b890:	mov    rdi,rbp
  40b893:	mov    ecx,0x4
  40b898:	pop    rbp
  40b899:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  40b89e:	xchg   ax,ax
  40b8a0:	inc    rsi
  40b8a3:	jmp    40b87e <_start@@Base+0x4f1e>
  40b8a5:	nop    DWORD PTR [rax]
  40b8a8:	add    rsp,0x8
  40b8ac:	mov    rdx,rbx
  40b8af:	pop    rbx
  40b8b0:	mov    rdi,rbp
  40b8b3:	inc    rsi
  40b8b6:	pop    rbp
  40b8b7:	jmp    407a60 <_start@@Base+0x1100>
  40b8bc:	nop    DWORD PTR [rax+0x0]
  40b8c0:	push   r12
  40b8c2:	mov    rax,rdx
  40b8c5:	sub    rax,rsi
  40b8c8:	push   rbp
  40b8c9:	mov    r12,rcx
  40b8cc:	mov    rbp,rdi
  40b8cf:	push   rbx
  40b8d0:	mov    rbx,rdx
  40b8d3:	cmp    rax,0x1
  40b8d7:	jle    40b8e0 <_start@@Base+0x4f80>
  40b8d9:	cmp    BYTE PTR [rsi],0x20
  40b8dc:	jg     40b8ee <_start@@Base+0x4f8e>
  40b8de:	je     40b950 <_start@@Base+0x4ff0>
  40b8e0:	mov    rdx,rbx
  40b8e3:	mov    rdi,rbp
  40b8e6:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40b8eb:	mov    rsi,rax
  40b8ee:	cmp    rbx,rsi
  40b8f1:	je     40b9a0 <_start@@Base+0x5040>
  40b8f7:	cmp    BYTE PTR [rsi],0x2c
  40b8fa:	je     40b960 <_start@@Base+0x5000>
  40b8fc:	mov    DWORD PTR [r12],0x0
  40b904:	cmp    BYTE PTR [rsi],0x7d
  40b907:	je     40b920 <_start@@Base+0x4fc0>
  40b909:	mov    ecx,0xa
  40b90e:	mov    rdx,rbx
  40b911:	pop    rbx
  40b912:	mov    rdi,rbp
  40b915:	pop    rbp
  40b916:	pop    r12
  40b918:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  40b91d:	nop    DWORD PTR [rax]
  40b920:	lea    rax,[rsi+0x1]
  40b924:	mov    rdx,rbx
  40b927:	sub    rdx,rax
  40b92a:	cmp    rdx,0x1
  40b92e:	jle    40b938 <_start@@Base+0x4fd8>
  40b930:	cmp    BYTE PTR [rsi+0x1],0x20
  40b934:	jg     40b998 <_start@@Base+0x5038>
  40b936:	je     40b9b0 <_start@@Base+0x5050>
  40b938:	mov    rdx,rbx
  40b93b:	pop    rbx
  40b93c:	mov    rdi,rbp
  40b93f:	pop    rbp
  40b940:	mov    rsi,rax
  40b943:	pop    r12
  40b945:	jmp    41cb30 <flatcc_json_parser_space_ext@@Base>
  40b94a:	nop    WORD PTR [rax+rax*1+0x0]
  40b950:	cmp    BYTE PTR [rsi+0x1],0x20
  40b954:	jle    40b8e0 <_start@@Base+0x4f80>
  40b956:	inc    rsi
  40b959:	jmp    40b8ee <_start@@Base+0x4f8e>
  40b95b:	nop    DWORD PTR [rax+rax*1+0x0]
  40b960:	lea    rax,[rsi+0x1]
  40b964:	mov    rdx,rbx
  40b967:	sub    rdx,rax
  40b96a:	cmp    rdx,0x1
  40b96e:	jle    40b978 <_start@@Base+0x5018>
  40b970:	cmp    BYTE PTR [rsi+0x1],0x20
  40b974:	jg     40b986 <_start@@Base+0x5026>
  40b976:	je     40b9c0 <_start@@Base+0x5060>
  40b978:	mov    rdx,rbx
  40b97b:	mov    rsi,rax
  40b97e:	mov    rdi,rbp
  40b981:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40b986:	cmp    rbx,rax
  40b989:	je     40b9f0 <_start@@Base+0x5090>
  40b98b:	cmp    BYTE PTR [rax],0x7d
  40b98e:	je     40b9d0 <_start@@Base+0x5070>
  40b990:	mov    DWORD PTR [r12],0x1
  40b998:	pop    rbx
  40b999:	pop    rbp
  40b99a:	pop    r12
  40b99c:	ret    
  40b99d:	nop    DWORD PTR [rax]
  40b9a0:	mov    rax,rbx
  40b9a3:	pop    rbx
  40b9a4:	pop    rbp
  40b9a5:	mov    DWORD PTR [r12],0x0
  40b9ad:	pop    r12
  40b9af:	ret    
  40b9b0:	cmp    BYTE PTR [rsi+0x2],0x20
  40b9b4:	jle    40b938 <_start@@Base+0x4fd8>
  40b9b6:	lea    rax,[rsi+0x2]
  40b9ba:	jmp    40b998 <_start@@Base+0x5038>
  40b9bc:	nop    DWORD PTR [rax+0x0]
  40b9c0:	cmp    BYTE PTR [rsi+0x2],0x20
  40b9c4:	jle    40b978 <_start@@Base+0x5018>
  40b9c6:	lea    rax,[rsi+0x2]
  40b9ca:	jmp    40b986 <_start@@Base+0x5026>
  40b9cc:	nop    DWORD PTR [rax+0x0]
  40b9d0:	mov    DWORD PTR [r12],0x0
  40b9d8:	mov    rdx,rbx
  40b9db:	pop    rbx
  40b9dc:	mov    rdi,rbp
  40b9df:	pop    rbp
  40b9e0:	lea    rsi,[rax+0x1]
  40b9e4:	pop    r12
  40b9e6:	jmp    407a60 <_start@@Base+0x1100>
  40b9eb:	nop    DWORD PTR [rax+rax*1+0x0]
  40b9f0:	mov    DWORD PTR [r12],0x0
  40b9f8:	mov    ecx,0xa
  40b9fd:	mov    rdx,rbx
  40ba00:	mov    rsi,rbx
  40ba03:	jmp    40b911 <_start@@Base+0x4fb1>
  40ba08:	nop    DWORD PTR [rax+rax*1+0x0]
  40ba10:	endbr64 
  40ba14:	push   r15
  40ba16:	mov    r15,rsi
  40ba19:	mov    esi,0xa
  40ba1e:	push   r14
  40ba20:	mov    r14,rcx
  40ba23:	push   r13
  40ba25:	push   r12
  40ba27:	push   rbp
  40ba28:	mov    rbp,rdi
  40ba2b:	push   rbx
  40ba2c:	mov    rbx,rdx
  40ba2f:	sub    rsp,0x38
  40ba33:	mov    rax,QWORD PTR fs:0x28
  40ba3c:	mov    QWORD PTR [rsp+0x28],rax
  40ba41:	xor    eax,eax
  40ba43:	mov    DWORD PTR [rcx],0x0
  40ba49:	mov    rdi,QWORD PTR [rdi]
  40ba4c:	call   4179d0 <flatcc_builder_start_table@@Base>
  40ba51:	test   eax,eax
  40ba53:	je     40ba98 <_start@@Base+0x5138>
  40ba55:	mov    ecx,0x21
  40ba5a:	mov    rdx,rbx
  40ba5d:	mov    rsi,r15
  40ba60:	mov    rdi,rbp
  40ba63:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40ba68:	mov    r12,rax
  40ba6b:	mov    rdi,QWORD PTR [rsp+0x28]
  40ba70:	xor    rdi,QWORD PTR fs:0x28
  40ba79:	mov    rax,r12
  40ba7c:	jne    40c2b8 <_start@@Base+0x5958>
  40ba82:	add    rsp,0x38
  40ba86:	pop    rbx
  40ba87:	pop    rbp
  40ba88:	pop    r12
  40ba8a:	pop    r13
  40ba8c:	pop    r14
  40ba8e:	pop    r15
  40ba90:	ret    
  40ba91:	nop    DWORD PTR [rax+0x0]
  40ba98:	lea    r8,[rsp+0x20]
  40ba9d:	mov    ecx,0x5
  40baa2:	mov    rdx,rbx
  40baa5:	mov    rsi,r15
  40baa8:	mov    rdi,rbp
  40baab:	call   41ebe0 <flatcc_json_parser_prepare_unions@@Base>
  40bab0:	cmp    rax,rbx
  40bab3:	je     40ba55 <_start@@Base+0x50f5>
  40bab5:	lea    r12,[rsp+0x1c]
  40baba:	mov    rsi,r15
  40babd:	mov    rcx,r12
  40bac0:	mov    rdx,rbx
  40bac3:	mov    rdi,rbp
  40bac6:	call   40a4b0 <_start@@Base+0x3b50>
  40bacb:	mov    r13d,DWORD PTR [rsp+0x1c]
  40bad0:	mov    r15,rax
  40bad3:	test   r13d,r13d
  40bad6:	je     40be80 <_start@@Base+0x5520>
  40badc:	movabs r13,0x6368617261637464
  40bae6:	jmp    40bba5 <_start@@Base+0x5245>
  40baeb:	nop    DWORD PTR [rax+rax*1+0x0]
  40baf0:	movabs rdx,0x616e7461676f6e69
  40bafa:	cmp    rax,rdx
  40bafd:	je     40bcd0 <_start@@Base+0x5370>
  40bb03:	movabs rdx,0x63616d656f5f7479
  40bb0d:	cmp    rax,rdx
  40bb10:	je     40bec0 <_start@@Base+0x5560>
  40bb16:	and    rax,0xffffffffff000000
  40bb1c:	movabs rdx,0x63616d656f000000
  40bb26:	cmp    rax,rdx
  40bb29:	jne    40bd50 <_start@@Base+0x53f0>
  40bb2f:	cmp    r8,0x5
  40bb33:	jle    40bd50 <_start@@Base+0x53f0>
  40bb39:	mov    ecx,0x5
  40bb3e:	mov    rdx,rbx
  40bb41:	mov    rsi,r15
  40bb44:	mov    rdi,rbp
  40bb47:	call   40b830 <_start@@Base+0x4ed0>
  40bb4c:	cmp    rax,r15
  40bb4f:	je     40bd50 <_start@@Base+0x53f0>
  40bb55:	sub    rsp,0x8
  40bb59:	lea    rdi,[rip+0x1670]        # 40d1d0 <_start@@Base+0x6870>
  40bb60:	push   rdi
  40bb61:	mov    r8d,0x7
  40bb67:	mov    ecx,0x3
  40bb6c:	mov    r9,QWORD PTR [rsp+0x30]
  40bb71:	mov    rsi,rax
  40bb74:	mov    rdi,rbp
  40bb77:	mov    rdx,rbx
  40bb7a:	call   41ecc0 <flatcc_json_parser_union@@Base>
  40bb7f:	pop    rcx
  40bb80:	mov    rsi,rax
  40bb83:	pop    rdi
  40bb84:	nop    DWORD PTR [rax+0x0]
  40bb88:	mov    rdx,rbx
  40bb8b:	mov    rcx,r12
  40bb8e:	mov    rdi,rbp
  40bb91:	call   40b8c0 <_start@@Base+0x4f60>
  40bb96:	mov    edx,DWORD PTR [rsp+0x1c]
  40bb9a:	mov    r15,rax
  40bb9d:	test   edx,edx
  40bb9f:	je     40be80 <_start@@Base+0x5520>
  40bba5:	cmp    rbx,r15
  40bba8:	je     40be78 <_start@@Base+0x5518>
  40bbae:	cmp    BYTE PTR [r15],0x22
  40bbb2:	jne    40bd80 <_start@@Base+0x5420>
  40bbb8:	inc    r15
  40bbbb:	mov    r8,rbx
  40bbbe:	sub    r8,r15
  40bbc1:	cmp    r8,0x7
  40bbc5:	ja     40bd70 <_start@@Base+0x5410>
  40bbcb:	mov    rsi,rbx
  40bbce:	mov    rdi,r15
  40bbd1:	call   406a50 <_start@@Base+0xf0>
  40bbd6:	cmp    rax,r13
  40bbd9:	jbe    40baf0 <_start@@Base+0x5190>
  40bbdf:	movabs rcx,0x6d61696e5f636860
  40bbe9:	cmp    rax,rcx
  40bbec:	ja     40bda0 <_start@@Base+0x5440>
  40bbf2:	movabs rdx,0x6368617261637465
  40bbfc:	cmp    rax,rdx
  40bbff:	jne    40bd50 <_start@@Base+0x53f0>
  40bc05:	lea    r8,[r15+0x8]
  40bc09:	mov    r10,rbx
  40bc0c:	sub    r10,r8
  40bc0f:	cmp    r10,0x7
  40bc13:	ja     40c110 <_start@@Base+0x57b0>
  40bc19:	mov    rdi,r8
  40bc1c:	mov    rsi,rbx
  40bc1f:	mov    QWORD PTR [rsp+0x8],r8
  40bc24:	call   406a50 <_start@@Base+0xf0>
  40bc29:	mov    rcx,rax
  40bc2c:	xor    cl,cl
  40bc2e:	movabs rdx,0x72735f7479706500
  40bc38:	cmp    rcx,rdx
  40bc3b:	mov    r8,QWORD PTR [rsp+0x8]
  40bc40:	je     40bd30 <_start@@Base+0x53d0>
  40bc46:	movabs rdx,0xffff000000000000
  40bc50:	and    rax,rdx
  40bc53:	movabs rdx,0x7273000000000000
  40bc5d:	cmp    rax,rdx
  40bc60:	jne    40bd30 <_start@@Base+0x53d0>
  40bc66:	cmp    r10,0x2
  40bc6a:	jle    40bd30 <_start@@Base+0x53d0>
  40bc70:	mov    rsi,r8
  40bc73:	mov    ecx,0x2
  40bc78:	mov    rdx,rbx
  40bc7b:	mov    rdi,rbp
  40bc7e:	mov    QWORD PTR [rsp+0x8],r8
  40bc83:	call   40b830 <_start@@Base+0x4ed0>
  40bc88:	mov    r8,QWORD PTR [rsp+0x8]
  40bc8d:	cmp    r8,rax
  40bc90:	je     40bd30 <_start@@Base+0x53d0>
  40bc96:	sub    rsp,0x8
  40bc9a:	lea    rcx,[rip+0x152f]        # 40d1d0 <_start@@Base+0x6870>
  40bca1:	push   rcx
  40bca2:	mov    rsi,rax
  40bca5:	mov    r8d,0x9
  40bcab:	mov    r9,QWORD PTR [rsp+0x30]
  40bcb0:	mov    ecx,0x4
  40bcb5:	mov    rdx,rbx
  40bcb8:	mov    rdi,rbp
  40bcbb:	call   41f070 <flatcc_json_parser_union_vector@@Base>
  40bcc0:	pop    r10
  40bcc2:	mov    rsi,rax
  40bcc5:	pop    r11
  40bcc7:	jmp    40bb88 <_start@@Base+0x5228>
  40bccc:	nop    DWORD PTR [rax+0x0]
  40bcd0:	lea    r8,[r15+0x8]
  40bcd4:	mov    r10,rbx
  40bcd7:	sub    r10,r8
  40bcda:	cmp    r10,0x7
  40bcde:	ja     40c098 <_start@@Base+0x5738>
  40bce4:	mov    rdi,r8
  40bce7:	mov    rsi,rbx
  40bcea:	mov    QWORD PTR [rsp+0x8],r8
  40bcef:	call   406a50 <_start@@Base+0xf0>
  40bcf4:	mov    rcx,rax
  40bcf7:	xor    cl,cl
  40bcf9:	movabs rdx,0x73745f7479706500
  40bd03:	cmp    rcx,rdx
  40bd06:	mov    r8,QWORD PTR [rsp+0x8]
  40bd0b:	je     40bd30 <_start@@Base+0x53d0>
  40bd0d:	movabs rdx,0xffff000000000000
  40bd17:	and    rax,rdx
  40bd1a:	movabs rdx,0x7374000000000000
  40bd24:	cmp    rax,rdx
  40bd27:	je     40c020 <_start@@Base+0x56c0>
  40bd2d:	nop    DWORD PTR [rax]
  40bd30:	mov    rsi,r8
  40bd33:	mov    rdx,rbx
  40bd36:	mov    rdi,rbp
  40bd39:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40bd3e:	mov    rsi,rax
  40bd41:	jmp    40bb88 <_start@@Base+0x5228>
  40bd46:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40bd50:	mov    rsi,r15
  40bd53:	mov    rdx,rbx
  40bd56:	mov    rdi,rbp
  40bd59:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40bd5e:	mov    rsi,rax
  40bd61:	jmp    40bb88 <_start@@Base+0x5228>
  40bd66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40bd70:	movbe  rax,QWORD PTR [r15]
  40bd75:	jmp    40bbd6 <_start@@Base+0x5276>
  40bd7a:	nop    WORD PTR [rax+rax*1+0x0]
  40bd80:	mov    rsi,r15
  40bd83:	mov    ecx,0x5
  40bd88:	mov    rdx,rbx
  40bd8b:	mov    rdi,rbp
  40bd8e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40bd93:	mov    r15,rax
  40bd96:	jmp    40bbbb <_start@@Base+0x525b>
  40bd9b:	nop    DWORD PTR [rax+rax*1+0x0]
  40bda0:	movabs rcx,0x6d61696e5f636861
  40bdaa:	cmp    rax,rcx
  40bdad:	je     40bf78 <_start@@Base+0x5618>
  40bdb3:	movabs rdi,0x736964655f6b6963
  40bdbd:	cmp    rax,rdi
  40bdc0:	jne    40bd50 <_start@@Base+0x53f0>
  40bdc2:	lea    r8,[r15+0x8]
  40bdc6:	mov    r10,rbx
  40bdc9:	sub    r10,r8
  40bdcc:	cmp    r10,0x7
  40bdd0:	ja     40c088 <_start@@Base+0x5728>
  40bdd6:	mov    rdi,r8
  40bdd9:	mov    rsi,rbx
  40bddc:	mov    QWORD PTR [rsp+0x8],r8
  40bde1:	call   406a50 <_start@@Base+0xf0>
  40bde6:	mov    r8,QWORD PTR [rsp+0x8]
  40bdeb:	mov    rcx,rax
  40bdee:	xor    cx,cx
  40bdf1:	movabs rdx,0x6b5f747970650000
  40bdfb:	cmp    rcx,rdx
  40bdfe:	je     40c258 <_start@@Base+0x58f8>
  40be04:	movabs rdx,0xff00000000000000
  40be0e:	and    rax,rdx
  40be11:	movabs rdx,0x6b00000000000000
  40be1b:	cmp    rax,rdx
  40be1e:	jne    40bd30 <_start@@Base+0x53d0>
  40be24:	cmp    r10,0x1
  40be28:	jle    40bd30 <_start@@Base+0x53d0>
  40be2e:	mov    rsi,r8
  40be31:	mov    ecx,0x1
  40be36:	mov    rdx,rbx
  40be39:	mov    rdi,rbp
  40be3c:	mov    QWORD PTR [rsp+0x8],r8
  40be41:	call   40b830 <_start@@Base+0x4ed0>
  40be46:	mov    r8,QWORD PTR [rsp+0x8]
  40be4b:	cmp    r8,rax
  40be4e:	je     40bd30 <_start@@Base+0x53d0>
  40be54:	sub    rsp,0x8
  40be58:	lea    rcx,[rip+0x1371]        # 40d1d0 <_start@@Base+0x6870>
  40be5f:	push   rcx
  40be60:	mov    r8d,0x5
  40be66:	mov    ecx,0x2
  40be6b:	mov    r9,QWORD PTR [rsp+0x30]
  40be70:	jmp    40bb71 <_start@@Base+0x5211>
  40be75:	nop    DWORD PTR [rax]
  40be78:	xor    r8d,r8d
  40be7b:	jmp    40bbcb <_start@@Base+0x526b>
  40be80:	mov    eax,DWORD PTR [rbp+0x1c]
  40be83:	test   eax,eax
  40be85:	jne    40ba55 <_start@@Base+0x50f5>
  40be8b:	mov    rcx,QWORD PTR [rsp+0x20]
  40be90:	mov    rdx,rbx
  40be93:	mov    rsi,r15
  40be96:	mov    rdi,rbp
  40be99:	call   41ec60 <flatcc_json_parser_finalize_unions@@Base>
  40be9e:	mov    rdi,QWORD PTR [rbp+0x0]
  40bea2:	mov    r12,rax
  40bea5:	call   418350 <flatcc_builder_end_table@@Base>
  40beaa:	mov    DWORD PTR [r14],eax
  40bead:	test   eax,eax
  40beaf:	jne    40ba6b <_start@@Base+0x510b>
  40beb5:	mov    r15,r12
  40beb8:	jmp    40ba55 <_start@@Base+0x50f5>
  40bebd:	nop    DWORD PTR [rax]
  40bec0:	lea    r8,[r15+0x8]
  40bec4:	mov    r10,rbx
  40bec7:	sub    r10,r8
  40beca:	cmp    r10,0x7
  40bece:	ja     40c1a8 <_start@@Base+0x5848>
  40bed4:	mov    rdi,r8
  40bed7:	mov    rsi,rbx
  40beda:	mov    QWORD PTR [rsp+0x8],r8
  40bedf:	call   406a50 <_start@@Base+0xf0>
  40bee4:	mov    r8,QWORD PTR [rsp+0x8]
  40bee9:	movabs rdx,0xffff000000000000
  40bef3:	and    rax,rdx
  40bef6:	movabs rdx,0x7065000000000000
  40bf00:	cmp    rax,rdx
  40bf03:	jne    40bd30 <_start@@Base+0x53d0>
  40bf09:	cmp    r10,0x2
  40bf0d:	jle    40bd30 <_start@@Base+0x53d0>
  40bf13:	mov    rsi,r8
  40bf16:	mov    ecx,0x2
  40bf1b:	mov    rdx,rbx
  40bf1e:	mov    rdi,rbp
  40bf21:	mov    QWORD PTR [rsp+0x8],r8
  40bf26:	call   40b830 <_start@@Base+0x4ed0>
  40bf2b:	mov    r8,QWORD PTR [rsp+0x8]
  40bf30:	cmp    r8,rax
  40bf33:	je     40bd30 <_start@@Base+0x53d0>
  40bf39:	lea    rdi,[rip+0x1290]        # 40d1d0 <_start@@Base+0x6870>
  40bf40:	push   rdi
  40bf41:	lea    rdi,[rip+0x2d3b8]        # 439300 <__data_start@@Base+0x240>
  40bf48:	mov    r8d,0x7
  40bf4e:	push   rdi
  40bf4f:	mov    ecx,0x3
  40bf54:	mov    r9,QWORD PTR [rsp+0x30]
  40bf59:	mov    rsi,rax
  40bf5c:	mov    rdx,rbx
  40bf5f:	mov    rdi,rbp
  40bf62:	call   41ede0 <flatcc_json_parser_union_type@@Base>
  40bf67:	pop    r8
  40bf69:	mov    rsi,rax
  40bf6c:	pop    r9
  40bf6e:	jmp    40bb88 <_start@@Base+0x5228>
  40bf73:	nop    DWORD PTR [rax+rax*1+0x0]
  40bf78:	lea    r8,[r15+0x8]
  40bf7c:	mov    r10,rbx
  40bf7f:	sub    r10,r8
  40bf82:	cmp    r10,0x7
  40bf86:	ja     40c078 <_start@@Base+0x5718>
  40bf8c:	mov    rdi,r8
  40bf8f:	mov    rsi,rbx
  40bf92:	mov    QWORD PTR [rsp+0x8],r8
  40bf97:	call   406a50 <_start@@Base+0xf0>
  40bf9c:	mov    r8,QWORD PTR [rsp+0x8]
  40bfa1:	movabs rdx,0x7261637465725f74
  40bfab:	cmp    rax,rdx
  40bfae:	je     40c1b8 <_start@@Base+0x5858>
  40bfb4:	xor    ax,ax
  40bfb7:	movabs rdx,0x7261637465720000
  40bfc1:	cmp    rax,rdx
  40bfc4:	jne    40bd30 <_start@@Base+0x53d0>
  40bfca:	cmp    r10,0x6
  40bfce:	jle    40bd30 <_start@@Base+0x53d0>
  40bfd4:	mov    rsi,r8
  40bfd7:	mov    ecx,0x6
  40bfdc:	mov    rdx,rbx
  40bfdf:	mov    rdi,rbp
  40bfe2:	mov    QWORD PTR [rsp+0x8],r8
  40bfe7:	call   40b830 <_start@@Base+0x4ed0>
  40bfec:	mov    r8,QWORD PTR [rsp+0x8]
  40bff1:	cmp    r8,rax
  40bff4:	je     40bd30 <_start@@Base+0x53d0>
  40bffa:	sub    rsp,0x8
  40bffe:	lea    rdi,[rip+0x11cb]        # 40d1d0 <_start@@Base+0x6870>
  40c005:	push   rdi
  40c006:	mov    r8d,0x1
  40c00c:	xor    ecx,ecx
  40c00e:	mov    r9,QWORD PTR [rsp+0x30]
  40c013:	jmp    40bb71 <_start@@Base+0x5211>
  40c018:	nop    DWORD PTR [rax+rax*1+0x0]
  40c020:	cmp    r10,0x2
  40c024:	jle    40bd30 <_start@@Base+0x53d0>
  40c02a:	mov    rsi,r8
  40c02d:	mov    ecx,0x2
  40c032:	mov    rdx,rbx
  40c035:	mov    rdi,rbp
  40c038:	mov    QWORD PTR [rsp+0x8],r8
  40c03d:	call   40b830 <_start@@Base+0x4ed0>
  40c042:	mov    r8,QWORD PTR [rsp+0x8]
  40c047:	cmp    r8,rax
  40c04a:	je     40bd30 <_start@@Base+0x53d0>
  40c050:	sub    rsp,0x8
  40c054:	lea    rdi,[rip+0x1175]        # 40d1d0 <_start@@Base+0x6870>
  40c05b:	push   rdi
  40c05c:	mov    r8d,0x3
  40c062:	mov    ecx,0x1
  40c067:	mov    r9,QWORD PTR [rsp+0x30]
  40c06c:	jmp    40bb71 <_start@@Base+0x5211>
  40c071:	nop    DWORD PTR [rax+0x0]
  40c078:	movbe  rax,QWORD PTR [r15+0x8]
  40c07e:	jmp    40bfa1 <_start@@Base+0x5641>
  40c083:	nop    DWORD PTR [rax+rax*1+0x0]
  40c088:	movbe  rax,QWORD PTR [r15+0x8]
  40c08e:	jmp    40bdeb <_start@@Base+0x548b>
  40c093:	nop    DWORD PTR [rax+rax*1+0x0]
  40c098:	movbe  rax,QWORD PTR [r15+0x8]
  40c09e:	movabs rdx,0x73745f7479706500
  40c0a8:	mov    rcx,rax
  40c0ab:	xor    cl,cl
  40c0ad:	cmp    rcx,rdx
  40c0b0:	jne    40bd0d <_start@@Base+0x53ad>
  40c0b6:	cmp    r10,0x7
  40c0ba:	jle    40bd30 <_start@@Base+0x53d0>
  40c0c0:	mov    rsi,r8
  40c0c3:	mov    ecx,0x7
  40c0c8:	mov    rdx,rbx
  40c0cb:	mov    rdi,rbp
  40c0ce:	mov    QWORD PTR [rsp+0x8],r8
  40c0d3:	call   40b830 <_start@@Base+0x4ed0>
  40c0d8:	mov    r8,QWORD PTR [rsp+0x8]
  40c0dd:	cmp    r8,rax
  40c0e0:	je     40bd30 <_start@@Base+0x53d0>
  40c0e6:	lea    rdi,[rip+0x10e3]        # 40d1d0 <_start@@Base+0x6870>
  40c0ed:	push   rdi
  40c0ee:	lea    rdi,[rip+0x2d22b]        # 439320 <__data_start@@Base+0x260>
  40c0f5:	mov    r8d,0x3
  40c0fb:	push   rdi
  40c0fc:	mov    ecx,0x1
  40c101:	mov    r9,QWORD PTR [rsp+0x30]
  40c106:	jmp    40bf59 <_start@@Base+0x55f9>
  40c10b:	nop    DWORD PTR [rax+rax*1+0x0]
  40c110:	movbe  rax,QWORD PTR [r15+0x8]
  40c116:	movabs rdx,0x72735f7479706500
  40c120:	mov    rcx,rax
  40c123:	xor    cl,cl
  40c125:	cmp    rcx,rdx
  40c128:	jne    40bc46 <_start@@Base+0x52e6>
  40c12e:	cmp    r10,0x7
  40c132:	jle    40bd30 <_start@@Base+0x53d0>
  40c138:	mov    rsi,r8
  40c13b:	mov    ecx,0x7
  40c140:	mov    rdx,rbx
  40c143:	mov    rdi,rbp
  40c146:	mov    QWORD PTR [rsp+0x8],r8
  40c14b:	call   40b830 <_start@@Base+0x4ed0>
  40c150:	mov    r8,QWORD PTR [rsp+0x8]
  40c155:	cmp    r8,rax
  40c158:	je     40bd30 <_start@@Base+0x53d0>
  40c15e:	sub    rsp,0x8
  40c162:	lea    rdi,[rip+0xffffffffffffa9d7]        # 406b40 <_start@@Base+0x1e0>
  40c169:	push   rdi
  40c16a:	lea    rcx,[rip+0x105f]        # 40d1d0 <_start@@Base+0x6870>
  40c171:	lea    rdi,[rip+0x2d168]        # 4392e0 <__data_start@@Base+0x220>
  40c178:	push   rcx
  40c179:	mov    rsi,rax
  40c17c:	mov    r8d,0x9
  40c182:	push   rdi
  40c183:	mov    ecx,0x4
  40c188:	mov    rdx,rbx
  40c18b:	mov    r9,QWORD PTR [rsp+0x40]
  40c190:	mov    rdi,rbp
  40c193:	call   41f150 <flatcc_json_parser_union_type_vector@@Base>
  40c198:	mov    rsi,rax
  40c19b:	add    rsp,0x20
  40c19f:	jmp    40bb88 <_start@@Base+0x5228>
  40c1a4:	nop    DWORD PTR [rax+0x0]
  40c1a8:	movbe  rax,QWORD PTR [r15+0x8]
  40c1ae:	jmp    40bee9 <_start@@Base+0x5589>
  40c1b3:	nop    DWORD PTR [rax+rax*1+0x0]
  40c1b8:	lea    r8,[r15+0x10]
  40c1bc:	mov    r10,rbx
  40c1bf:	sub    r10,r8
  40c1c2:	cmp    r10,0x7
  40c1c6:	ja     40c2ad <_start@@Base+0x594d>
  40c1cc:	mov    rdi,r8
  40c1cf:	mov    rsi,rbx
  40c1d2:	mov    QWORD PTR [rsp+0x8],r8
  40c1d7:	call   406a50 <_start@@Base+0xf0>
  40c1dc:	mov    r8,QWORD PTR [rsp+0x8]
  40c1e1:	movabs rdx,0xffffff0000000000
  40c1eb:	and    rax,rdx
  40c1ee:	movabs rdx,0x7970650000000000
  40c1f8:	cmp    rax,rdx
  40c1fb:	jne    40bd30 <_start@@Base+0x53d0>
  40c201:	cmp    r10,0x3
  40c205:	jle    40bd30 <_start@@Base+0x53d0>
  40c20b:	mov    rsi,r8
  40c20e:	mov    ecx,0x3
  40c213:	mov    rdx,rbx
  40c216:	mov    rdi,rbp
  40c219:	mov    QWORD PTR [rsp+0x8],r8
  40c21e:	call   40b830 <_start@@Base+0x4ed0>
  40c223:	mov    r8,QWORD PTR [rsp+0x8]
  40c228:	cmp    r8,rax
  40c22b:	je     40bd30 <_start@@Base+0x53d0>
  40c231:	lea    rdi,[rip+0xf98]        # 40d1d0 <_start@@Base+0x6870>
  40c238:	push   rdi
  40c239:	lea    rcx,[rip+0x2d080]        # 4392c0 <__data_start@@Base+0x200>
  40c240:	mov    r8d,0x1
  40c246:	push   rcx
  40c247:	xor    ecx,ecx
  40c249:	mov    r9,QWORD PTR [rsp+0x30]
  40c24e:	jmp    40bf59 <_start@@Base+0x55f9>
  40c253:	nop    DWORD PTR [rax+rax*1+0x0]
  40c258:	cmp    r10,0x6
  40c25c:	jle    40bd30 <_start@@Base+0x53d0>
  40c262:	mov    rsi,r8
  40c265:	mov    ecx,0x6
  40c26a:	mov    rdx,rbx
  40c26d:	mov    rdi,rbp
  40c270:	mov    QWORD PTR [rsp+0x8],r8
  40c275:	call   40b830 <_start@@Base+0x4ed0>
  40c27a:	mov    r8,QWORD PTR [rsp+0x8]
  40c27f:	cmp    r8,rax
  40c282:	je     40bd30 <_start@@Base+0x53d0>
  40c288:	lea    rcx,[rip+0xf41]        # 40d1d0 <_start@@Base+0x6870>
  40c28f:	push   rcx
  40c290:	lea    rdi,[rip+0x2d009]        # 4392a0 <__data_start@@Base+0x1e0>
  40c297:	mov    r8d,0x5
  40c29d:	push   rdi
  40c29e:	mov    ecx,0x2
  40c2a3:	mov    r9,QWORD PTR [rsp+0x30]
  40c2a8:	jmp    40bf59 <_start@@Base+0x55f9>
  40c2ad:	movbe  rax,QWORD PTR [r15+0x10]
  40c2b3:	jmp    40c1e1 <_start@@Base+0x5881>
  40c2b8:	call   4061a0 <__stack_chk_fail@plt>
  40c2bd:	nop    DWORD PTR [rax]
  40c2c0:	push   r12
  40c2c2:	mov    rax,rdx
  40c2c5:	sub    rax,rsi
  40c2c8:	push   rbp
  40c2c9:	mov    r12,rcx
  40c2cc:	mov    rbp,rdi
  40c2cf:	push   rbx
  40c2d0:	mov    rbx,rdx
  40c2d3:	cmp    rax,0x1
  40c2d7:	jle    40c2e0 <_start@@Base+0x5980>
  40c2d9:	cmp    BYTE PTR [rsi],0x20
  40c2dc:	jg     40c2ee <_start@@Base+0x598e>
  40c2de:	je     40c350 <_start@@Base+0x59f0>
  40c2e0:	mov    rdx,rbx
  40c2e3:	mov    rdi,rbp
  40c2e6:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40c2eb:	mov    rsi,rax
  40c2ee:	cmp    rbx,rsi
  40c2f1:	je     40c3a0 <_start@@Base+0x5a40>
  40c2f7:	cmp    BYTE PTR [rsi],0x2c
  40c2fa:	je     40c360 <_start@@Base+0x5a00>
  40c2fc:	mov    DWORD PTR [r12],0x0
  40c304:	cmp    BYTE PTR [rsi],0x5d
  40c307:	je     40c320 <_start@@Base+0x59c0>
  40c309:	mov    ecx,0x9
  40c30e:	mov    rdx,rbx
  40c311:	pop    rbx
  40c312:	mov    rdi,rbp
  40c315:	pop    rbp
  40c316:	pop    r12
  40c318:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  40c31d:	nop    DWORD PTR [rax]
  40c320:	lea    rax,[rsi+0x1]
  40c324:	mov    rdx,rbx
  40c327:	sub    rdx,rax
  40c32a:	cmp    rdx,0x1
  40c32e:	jle    40c338 <_start@@Base+0x59d8>
  40c330:	cmp    BYTE PTR [rsi+0x1],0x20
  40c334:	jg     40c398 <_start@@Base+0x5a38>
  40c336:	je     40c3b0 <_start@@Base+0x5a50>
  40c338:	mov    rdx,rbx
  40c33b:	pop    rbx
  40c33c:	mov    rdi,rbp
  40c33f:	pop    rbp
  40c340:	mov    rsi,rax
  40c343:	pop    r12
  40c345:	jmp    41cb30 <flatcc_json_parser_space_ext@@Base>
  40c34a:	nop    WORD PTR [rax+rax*1+0x0]
  40c350:	cmp    BYTE PTR [rsi+0x1],0x20
  40c354:	jle    40c2e0 <_start@@Base+0x5980>
  40c356:	inc    rsi
  40c359:	jmp    40c2ee <_start@@Base+0x598e>
  40c35b:	nop    DWORD PTR [rax+rax*1+0x0]
  40c360:	lea    rax,[rsi+0x1]
  40c364:	mov    rdx,rbx
  40c367:	sub    rdx,rax
  40c36a:	cmp    rdx,0x1
  40c36e:	jle    40c378 <_start@@Base+0x5a18>
  40c370:	cmp    BYTE PTR [rsi+0x1],0x20
  40c374:	jg     40c386 <_start@@Base+0x5a26>
  40c376:	je     40c3c0 <_start@@Base+0x5a60>
  40c378:	mov    rdx,rbx
  40c37b:	mov    rsi,rax
  40c37e:	mov    rdi,rbp
  40c381:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40c386:	cmp    rbx,rax
  40c389:	je     40c3f0 <_start@@Base+0x5a90>
  40c38b:	cmp    BYTE PTR [rax],0x5d
  40c38e:	je     40c3d0 <_start@@Base+0x5a70>
  40c390:	mov    DWORD PTR [r12],0x1
  40c398:	pop    rbx
  40c399:	pop    rbp
  40c39a:	pop    r12
  40c39c:	ret    
  40c39d:	nop    DWORD PTR [rax]
  40c3a0:	mov    rax,rbx
  40c3a3:	pop    rbx
  40c3a4:	pop    rbp
  40c3a5:	mov    DWORD PTR [r12],0x0
  40c3ad:	pop    r12
  40c3af:	ret    
  40c3b0:	cmp    BYTE PTR [rsi+0x2],0x20
  40c3b4:	jle    40c338 <_start@@Base+0x59d8>
  40c3b6:	lea    rax,[rsi+0x2]
  40c3ba:	jmp    40c398 <_start@@Base+0x5a38>
  40c3bc:	nop    DWORD PTR [rax+0x0]
  40c3c0:	cmp    BYTE PTR [rsi+0x2],0x20
  40c3c4:	jle    40c378 <_start@@Base+0x5a18>
  40c3c6:	lea    rax,[rsi+0x2]
  40c3ca:	jmp    40c386 <_start@@Base+0x5a26>
  40c3cc:	nop    DWORD PTR [rax+0x0]
  40c3d0:	mov    DWORD PTR [r12],0x0
  40c3d8:	mov    rdx,rbx
  40c3db:	pop    rbx
  40c3dc:	mov    rdi,rbp
  40c3df:	pop    rbp
  40c3e0:	lea    rsi,[rax+0x1]
  40c3e4:	pop    r12
  40c3e6:	jmp    407a60 <_start@@Base+0x1100>
  40c3eb:	nop    DWORD PTR [rax+rax*1+0x0]
  40c3f0:	mov    DWORD PTR [r12],0x0
  40c3f8:	mov    ecx,0x9
  40c3fd:	mov    rdx,rbx
  40c400:	mov    rsi,rbx
  40c403:	jmp    40c311 <_start@@Base+0x59b1>
  40c408:	nop    DWORD PTR [rax+rax*1+0x0]
  40c410:	push   r15
  40c412:	push   r14
  40c414:	push   r13
  40c416:	mov    r13,rdx
  40c419:	push   r12
  40c41b:	push   rbp
  40c41c:	push   rbx
  40c41d:	mov    rbx,rdi
  40c420:	sub    rsp,0x38
  40c424:	mov    rax,QWORD PTR fs:0x28
  40c42d:	mov    QWORD PTR [rsp+0x28],rax
  40c432:	xor    eax,eax
  40c434:	cmp    rsi,rdx
  40c437:	je     40c43e <_start@@Base+0x5ade>
  40c439:	cmp    BYTE PTR [rsi],0x7b
  40c43c:	je     40c480 <_start@@Base+0x5b20>
  40c43e:	mov    ecx,0x15
  40c443:	mov    rdx,r13
  40c446:	mov    rdi,rbx
  40c449:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40c44e:	mov    r9,rax
  40c451:	nop    DWORD PTR [rax+0x0]
  40c458:	mov    rbx,QWORD PTR [rsp+0x28]
  40c45d:	xor    rbx,QWORD PTR fs:0x28
  40c466:	mov    rax,r9
  40c469:	jne    40cb95 <_start@@Base+0x6235>
  40c46f:	add    rsp,0x38
  40c473:	pop    rbx
  40c474:	pop    rbp
  40c475:	pop    r12
  40c477:	pop    r13
  40c479:	pop    r14
  40c47b:	pop    r15
  40c47d:	ret    
  40c47e:	xchg   ax,ax
  40c480:	lea    r8,[rsi+0x1]
  40c484:	mov    rax,rdx
  40c487:	sub    rax,r8
  40c48a:	mov    r15,rcx
  40c48d:	cmp    rax,0x1
  40c491:	jle    40c49f <_start@@Base+0x5b3f>
  40c493:	cmp    BYTE PTR [rsi+0x1],0x20
  40c497:	jg     40c4b0 <_start@@Base+0x5b50>
  40c499:	je     40cb6b <_start@@Base+0x620b>
  40c49f:	mov    rsi,r8
  40c4a2:	mov    rdx,r13
  40c4a5:	mov    rdi,rbx
  40c4a8:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40c4ad:	mov    r8,rax
  40c4b0:	cmp    r13,r8
  40c4b3:	je     40c4bf <_start@@Base+0x5b5f>
  40c4b5:	cmp    BYTE PTR [r8],0x7d
  40c4b9:	je     40cb7e <_start@@Base+0x621e>
  40c4bf:	movabs r12,0xff00000000000000
  40c4c9:	movabs rbp,0x6200000000000000
  40c4d3:	lea    r14,[rip+0x1eb4e]        # 42b028 <_IO_stdin_used@@Base+0x28>
  40c4da:	nop    WORD PTR [rax+rax*1+0x0]
  40c4e0:	cmp    r13,r8
  40c4e3:	je     40c538 <_start@@Base+0x5bd8>
  40c4e5:	cmp    BYTE PTR [r8],0x22
  40c4e9:	jne    40c770 <_start@@Base+0x5e10>
  40c4ef:	inc    r8
  40c4f2:	mov    rsi,r13
  40c4f5:	sub    rsi,r8
  40c4f8:	cmp    rsi,0x7
  40c4fc:	jbe    40c6c8 <_start@@Base+0x5d68>
  40c502:	movbe  rax,QWORD PTR [r8]
  40c507:	and    rax,r12
  40c50a:	cmp    rax,rbp
  40c50d:	je     40c5b0 <_start@@Base+0x5c50>
  40c513:	movabs rdi,0x6100000000000000
  40c51d:	cmp    rax,rdi
  40c520:	jne    40c538 <_start@@Base+0x5bd8>
  40c522:	cmp    rsi,0x1
  40c526:	jle    40c538 <_start@@Base+0x5bd8>
  40c528:	cmp    BYTE PTR [r8+0x1],0x22
  40c52d:	je     40c870 <_start@@Base+0x5f10>
  40c533:	nop    DWORD PTR [rax+rax*1+0x0]
  40c538:	mov    rdx,r13
  40c53b:	mov    rsi,r8
  40c53e:	mov    rdi,rbx
  40c541:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40c546:	mov    r9,rax
  40c549:	mov    rax,r13
  40c54c:	sub    rax,r9
  40c54f:	cmp    rax,0x1
  40c553:	jle    40c561 <_start@@Base+0x5c01>
  40c555:	cmp    BYTE PTR [r9],0x20
  40c559:	jg     40c572 <_start@@Base+0x5c12>
  40c55b:	je     40c7c8 <_start@@Base+0x5e68>
  40c561:	mov    rsi,r9
  40c564:	mov    rdx,r13
  40c567:	mov    rdi,rbx
  40c56a:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40c56f:	mov    r9,rax
  40c572:	cmp    r13,r9
  40c575:	je     40c458 <_start@@Base+0x5af8>
  40c57b:	movzx  eax,BYTE PTR [r9]
  40c57f:	cmp    al,0x2c
  40c581:	je     40c7e0 <_start@@Base+0x5e80>
  40c587:	cmp    al,0x7d
  40c589:	je     40c790 <_start@@Base+0x5e30>
  40c58f:	mov    rsi,r9
  40c592:	mov    ecx,0xa
  40c597:	mov    rdx,r13
  40c59a:	mov    rdi,rbx
  40c59d:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40c5a2:	mov    r9,rax
  40c5a5:	jmp    40c458 <_start@@Base+0x5af8>
  40c5aa:	nop    WORD PTR [rax+rax*1+0x0]
  40c5b0:	cmp    rsi,0x1
  40c5b4:	jle    40c538 <_start@@Base+0x5bd8>
  40c5b6:	cmp    BYTE PTR [r8+0x1],0x22
  40c5bb:	jne    40c538 <_start@@Base+0x5bd8>
  40c5c1:	lea    rsi,[r8+0x2]
  40c5c5:	mov    rax,r13
  40c5c8:	sub    rax,rsi
  40c5cb:	cmp    rax,0x1
  40c5cf:	jle    40c5de <_start@@Base+0x5c7e>
  40c5d1:	cmp    BYTE PTR [r8+0x2],0x20
  40c5d6:	jg     40c5f6 <_start@@Base+0x5c96>
  40c5d8:	je     40cad0 <_start@@Base+0x6170>
  40c5de:	mov    rdx,r13
  40c5e1:	mov    rdi,rbx
  40c5e4:	mov    QWORD PTR [rsp+0x8],r8
  40c5e9:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40c5ee:	mov    r8,QWORD PTR [rsp+0x8]
  40c5f3:	mov    rsi,rax
  40c5f6:	cmp    r13,rsi
  40c5f9:	je     40c604 <_start@@Base+0x5ca4>
  40c5fb:	cmp    BYTE PTR [rsi],0x3a
  40c5fe:	je     40cb30 <_start@@Base+0x61d0>
  40c604:	mov    ecx,0x4
  40c609:	mov    rdx,r13
  40c60c:	mov    rdi,rbx
  40c60f:	mov    QWORD PTR [rsp+0x8],r8
  40c614:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40c619:	mov    r8,QWORD PTR [rsp+0x8]
  40c61e:	mov    r11,rax
  40c621:	cmp    r11,r8
  40c624:	je     40c538 <_start@@Base+0x5bd8>
  40c62a:	mov    BYTE PTR [rsp+0x1a],0x0
  40c62f:	mov    QWORD PTR [rsp+0x20],0x0
  40c638:	mov    DWORD PTR [rsp+0x1c],0x0
  40c640:	cmp    r13,r11
  40c643:	je     40c860 <_start@@Base+0x5f00>
  40c649:	mov    rsi,r11
  40c64c:	lea    rcx,[rsp+0x1c]
  40c651:	lea    r8,[rsp+0x20]
  40c656:	mov    rdx,r13
  40c659:	mov    rdi,rbx
  40c65c:	mov    QWORD PTR [rsp+0x8],r11
  40c661:	call   41d880 <flatcc_json_parser_integer@@Base>
  40c666:	mov    r11,QWORD PTR [rsp+0x8]
  40c66b:	mov    r9,rax
  40c66e:	cmp    r11,rax
  40c671:	jne    40c988 <_start@@Base+0x6028>
  40c677:	mov    rsi,r9
  40c67a:	lea    r8,[rsp+0x1a]
  40c67f:	lea    rcx,[rip+0x2cafa]        # 439180 <__data_start@@Base+0xc0>
  40c686:	mov    rdx,r13
  40c689:	mov    rdi,rbx
  40c68c:	mov    QWORD PTR [rsp+0x8],r9
  40c691:	call   40a2d0 <_start@@Base+0x3970>
  40c696:	mov    r9,QWORD PTR [rsp+0x8]
  40c69b:	cmp    rax,r9
  40c69e:	je     40cb50 <_start@@Base+0x61f0>
  40c6a4:	cmp    r13,rax
  40c6a7:	je     40cb50 <_start@@Base+0x61f0>
  40c6ad:	movzx  edx,BYTE PTR [rsp+0x1a]
  40c6b2:	mov    r9,rax
  40c6b5:	nop    DWORD PTR [rax]
  40c6b8:	mov    BYTE PTR [r15+0x2],dl
  40c6bc:	jmp    40c549 <_start@@Base+0x5be9>
  40c6c1:	nop    DWORD PTR [rax+0x0]
  40c6c8:	movsxd rax,DWORD PTR [r14+rsi*4]
  40c6cc:	add    rax,r14
  40c6cf:	notrack jmp rax
  40c6d2:	nop    WORD PTR [rax+rax*1+0x0]
  40c6d8:	movsx  rcx,BYTE PTR [r8+0x6]
  40c6dd:	shl    rcx,0x8
  40c6e1:	movsx  rdx,BYTE PTR [r8+0x5]
  40c6e6:	mov    rax,rdx
  40c6e9:	shl    rax,0x10
  40c6ed:	or     rcx,rax
  40c6f0:	movsx  rdx,BYTE PTR [r8+0x4]
  40c6f5:	mov    rax,rdx
  40c6f8:	shl    rax,0x18
  40c6fc:	or     rax,rcx
  40c6ff:	movsx  rdx,BYTE PTR [r8+0x3]
  40c704:	shl    rdx,0x20
  40c708:	or     rax,rdx
  40c70b:	movsx  rdx,BYTE PTR [r8+0x2]
  40c710:	mov    rcx,rdx
  40c713:	shl    rcx,0x28
  40c717:	or     rcx,rax
  40c71a:	movsx  rdx,BYTE PTR [r8+0x1]
  40c71f:	mov    rax,rdx
  40c722:	shl    rax,0x30
  40c726:	or     rcx,rax
  40c729:	movsx  rdx,BYTE PTR [r8]
  40c72d:	mov    rax,rdx
  40c730:	shl    rax,0x38
  40c734:	or     rax,rcx
  40c737:	jmp    40c507 <_start@@Base+0x5ba7>
  40c73c:	nop    DWORD PTR [rax+0x0]
  40c740:	xor    ecx,ecx
  40c742:	jmp    40c6e1 <_start@@Base+0x5d81>
  40c744:	nop    DWORD PTR [rax+0x0]
  40c748:	xor    ecx,ecx
  40c74a:	jmp    40c6f0 <_start@@Base+0x5d90>
  40c74c:	nop    DWORD PTR [rax+0x0]
  40c750:	xor    eax,eax
  40c752:	jmp    40c6ff <_start@@Base+0x5d9f>
  40c754:	nop    DWORD PTR [rax+0x0]
  40c758:	xor    eax,eax
  40c75a:	jmp    40c70b <_start@@Base+0x5dab>
  40c75c:	nop    DWORD PTR [rax+0x0]
  40c760:	xor    ecx,ecx
  40c762:	jmp    40c71a <_start@@Base+0x5dba>
  40c764:	nop    DWORD PTR [rax+0x0]
  40c768:	xor    ecx,ecx
  40c76a:	jmp    40c729 <_start@@Base+0x5dc9>
  40c76c:	nop    DWORD PTR [rax+0x0]
  40c770:	mov    rsi,r8
  40c773:	mov    ecx,0x5
  40c778:	mov    rdx,r13
  40c77b:	mov    rdi,rbx
  40c77e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40c783:	mov    r8,rax
  40c786:	jmp    40c4f2 <_start@@Base+0x5b92>
  40c78b:	nop    DWORD PTR [rax+rax*1+0x0]
  40c790:	lea    rsi,[r9+0x1]
  40c794:	mov    rax,r13
  40c797:	sub    rax,rsi
  40c79a:	cmp    rax,0x1
  40c79e:	jle    40c7b1 <_start@@Base+0x5e51>
  40c7a0:	cmp    BYTE PTR [r9+0x1],0x20
  40c7a5:	jg     40ca30 <_start@@Base+0x60d0>
  40c7ab:	je     40ca40 <_start@@Base+0x60e0>
  40c7b1:	mov    rdx,r13
  40c7b4:	mov    rdi,rbx
  40c7b7:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40c7bc:	mov    r9,rax
  40c7bf:	jmp    40c458 <_start@@Base+0x5af8>
  40c7c4:	nop    DWORD PTR [rax+0x0]
  40c7c8:	cmp    BYTE PTR [r9+0x1],0x20
  40c7cd:	jle    40c561 <_start@@Base+0x5c01>
  40c7d3:	inc    r9
  40c7d6:	jmp    40c572 <_start@@Base+0x5c12>
  40c7db:	nop    DWORD PTR [rax+rax*1+0x0]
  40c7e0:	lea    r8,[r9+0x1]
  40c7e4:	mov    rax,r13
  40c7e7:	sub    rax,r8
  40c7ea:	cmp    rax,0x1
  40c7ee:	jle    40c7fd <_start@@Base+0x5e9d>
  40c7f0:	cmp    BYTE PTR [r9+0x1],0x20
  40c7f5:	jg     40c80e <_start@@Base+0x5eae>
  40c7f7:	je     40ca98 <_start@@Base+0x6138>
  40c7fd:	mov    rsi,r8
  40c800:	mov    rdx,r13
  40c803:	mov    rdi,rbx
  40c806:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40c80b:	mov    r8,rax
  40c80e:	cmp    r13,r8
  40c811:	je     40cab0 <_start@@Base+0x6150>
  40c817:	cmp    BYTE PTR [r8],0x7d
  40c81b:	jne    40c4e0 <_start@@Base+0x5b80>
  40c821:	lea    r9,[r8+0x1]
  40c825:	mov    rax,r13
  40c828:	sub    rax,r9
  40c82b:	cmp    rax,0x1
  40c82f:	jle    40c842 <_start@@Base+0x5ee2>
  40c831:	cmp    BYTE PTR [r8+0x1],0x20
  40c836:	jg     40c458 <_start@@Base+0x5af8>
  40c83c:	je     40cafc <_start@@Base+0x619c>
  40c842:	mov    rsi,r9
  40c845:	mov    rdx,r13
  40c848:	mov    rdi,rbx
  40c84b:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40c850:	mov    r9,rax
  40c853:	jmp    40c458 <_start@@Base+0x5af8>
  40c858:	nop    DWORD PTR [rax+rax*1+0x0]
  40c860:	mov    r9,r13
  40c863:	jmp    40c677 <_start@@Base+0x5d17>
  40c868:	nop    DWORD PTR [rax+rax*1+0x0]
  40c870:	lea    rsi,[r8+0x2]
  40c874:	mov    rax,r13
  40c877:	sub    rax,rsi
  40c87a:	cmp    rax,0x1
  40c87e:	jle    40c88d <_start@@Base+0x5f2d>
  40c880:	cmp    BYTE PTR [r8+0x2],0x20
  40c885:	jg     40c8a5 <_start@@Base+0x5f45>
  40c887:	je     40cae8 <_start@@Base+0x6188>
  40c88d:	mov    rdx,r13
  40c890:	mov    rdi,rbx
  40c893:	mov    QWORD PTR [rsp+0x8],r8
  40c898:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40c89d:	mov    r8,QWORD PTR [rsp+0x8]
  40c8a2:	mov    rsi,rax
  40c8a5:	cmp    r13,rsi
  40c8a8:	je     40c8b3 <_start@@Base+0x5f53>
  40c8aa:	cmp    BYTE PTR [rsi],0x3a
  40c8ad:	je     40cb10 <_start@@Base+0x61b0>
  40c8b3:	mov    ecx,0x4
  40c8b8:	mov    rdx,r13
  40c8bb:	mov    rdi,rbx
  40c8be:	mov    QWORD PTR [rsp+0x8],r8
  40c8c3:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40c8c8:	mov    r8,QWORD PTR [rsp+0x8]
  40c8cd:	mov    r11,rax
  40c8d0:	cmp    r11,r8
  40c8d3:	je     40c538 <_start@@Base+0x5bd8>
  40c8d9:	xor    esi,esi
  40c8db:	mov    WORD PTR [rsp+0x1a],si
  40c8e0:	mov    QWORD PTR [rsp+0x20],0x0
  40c8e9:	mov    DWORD PTR [rsp+0x1c],0x0
  40c8f1:	cmp    r13,r11
  40c8f4:	je     40c980 <_start@@Base+0x6020>
  40c8fa:	mov    rsi,r11
  40c8fd:	lea    rcx,[rsp+0x1c]
  40c902:	lea    r8,[rsp+0x20]
  40c907:	mov    rdx,r13
  40c90a:	mov    rdi,rbx
  40c90d:	mov    QWORD PTR [rsp+0x8],r11
  40c912:	call   41d880 <flatcc_json_parser_integer@@Base>
  40c917:	mov    r11,QWORD PTR [rsp+0x8]
  40c91c:	mov    r9,rax
  40c91f:	cmp    r11,rax
  40c922:	jne    40c9e0 <_start@@Base+0x6080>
  40c928:	mov    rsi,r9
  40c92b:	lea    r8,[rsp+0x1a]
  40c930:	lea    rcx,[rip+0x2c829]        # 439160 <__data_start@@Base+0xa0>
  40c937:	mov    rdx,r13
  40c93a:	mov    rdi,rbx
  40c93d:	mov    QWORD PTR [rsp+0x8],r9
  40c942:	call   40b3c0 <_start@@Base+0x4a60>
  40c947:	mov    r9,QWORD PTR [rsp+0x8]
  40c94c:	cmp    rax,r9
  40c94f:	je     40cb50 <_start@@Base+0x61f0>
  40c955:	cmp    r13,rax
  40c958:	je     40cb50 <_start@@Base+0x61f0>
  40c95e:	movzx  edx,WORD PTR [rsp+0x1a]
  40c963:	mov    r9,rax
  40c966:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c970:	mov    WORD PTR [r15],dx
  40c974:	jmp    40c549 <_start@@Base+0x5be9>
  40c979:	nop    DWORD PTR [rax+0x0]
  40c980:	mov    r9,r13
  40c983:	jmp    40c928 <_start@@Base+0x5fc8>
  40c985:	nop    DWORD PTR [rax]
  40c988:	mov    rax,QWORD PTR [rsp+0x20]
  40c98d:	mov    edi,DWORD PTR [rsp+0x1c]
  40c991:	mov    edx,eax
  40c993:	test   edi,edi
  40c995:	je     40ca58 <_start@@Base+0x60f8>
  40c99b:	neg    edx
  40c99d:	mov    ecx,0x8
  40c9a2:	cmp    rax,0x80
  40c9a8:	jbe    40c6b8 <_start@@Base+0x5d58>
  40c9ae:	mov    rsi,r9
  40c9b1:	mov    rdx,r13
  40c9b4:	mov    rdi,rbx
  40c9b7:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40c9bc:	mov    r11,QWORD PTR [rsp+0x8]
  40c9c1:	mov    r9,rax
  40c9c4:	cmp    r11,rax
  40c9c7:	je     40c677 <_start@@Base+0x5d17>
  40c9cd:	movzx  edx,BYTE PTR [rsp+0x1a]
  40c9d2:	jmp    40c6b8 <_start@@Base+0x5d58>
  40c9d7:	nop    WORD PTR [rax+rax*1+0x0]
  40c9e0:	mov    rax,QWORD PTR [rsp+0x20]
  40c9e5:	mov    ecx,DWORD PTR [rsp+0x1c]
  40c9e9:	mov    edx,eax
  40c9eb:	test   ecx,ecx
  40c9ed:	je     40ca78 <_start@@Base+0x6118>
  40c9f3:	neg    edx
  40c9f5:	mov    ecx,0x8
  40c9fa:	cmp    rax,0x8000
  40ca00:	jbe    40c970 <_start@@Base+0x6010>
  40ca06:	mov    rsi,r9
  40ca09:	mov    rdx,r13
  40ca0c:	mov    rdi,rbx
  40ca0f:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40ca14:	mov    r11,QWORD PTR [rsp+0x8]
  40ca19:	mov    r9,rax
  40ca1c:	cmp    r11,rax
  40ca1f:	je     40c928 <_start@@Base+0x5fc8>
  40ca25:	movzx  edx,WORD PTR [rsp+0x1a]
  40ca2a:	jmp    40c970 <_start@@Base+0x6010>
  40ca2f:	nop
  40ca30:	mov    r9,rsi
  40ca33:	jmp    40c458 <_start@@Base+0x5af8>
  40ca38:	nop    DWORD PTR [rax+rax*1+0x0]
  40ca40:	cmp    BYTE PTR [r9+0x2],0x20
  40ca45:	jle    40c7b1 <_start@@Base+0x5e51>
  40ca4b:	add    r9,0x2
  40ca4f:	jmp    40c458 <_start@@Base+0x5af8>
  40ca54:	nop    DWORD PTR [rax+0x0]
  40ca58:	cmp    rax,0x7f
  40ca5c:	jbe    40c6b8 <_start@@Base+0x5d58>
  40ca62:	mov    QWORD PTR [rsp+0x8],r11
  40ca67:	mov    ecx,0x7
  40ca6c:	jmp    40c9ae <_start@@Base+0x604e>
  40ca71:	nop    DWORD PTR [rax+0x0]
  40ca78:	cmp    rax,0x7fff
  40ca7e:	jbe    40c970 <_start@@Base+0x6010>
  40ca84:	mov    QWORD PTR [rsp+0x8],r11
  40ca89:	mov    ecx,0x7
  40ca8e:	jmp    40ca06 <_start@@Base+0x60a6>
  40ca93:	nop    DWORD PTR [rax+rax*1+0x0]
  40ca98:	cmp    BYTE PTR [r9+0x2],0x20
  40ca9d:	jle    40c7fd <_start@@Base+0x5e9d>
  40caa3:	lea    r8,[r9+0x2]
  40caa7:	cmp    r13,r8
  40caaa:	jne    40c817 <_start@@Base+0x5eb7>
  40cab0:	mov    ecx,0xa
  40cab5:	mov    rdx,r13
  40cab8:	mov    rsi,r13
  40cabb:	mov    rdi,rbx
  40cabe:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40cac3:	mov    r9,rax
  40cac6:	jmp    40c458 <_start@@Base+0x5af8>
  40cacb:	nop    DWORD PTR [rax+rax*1+0x0]
  40cad0:	cmp    BYTE PTR [r8+0x3],0x20
  40cad5:	jle    40c5de <_start@@Base+0x5c7e>
  40cadb:	lea    rsi,[r8+0x3]
  40cadf:	jmp    40c5f6 <_start@@Base+0x5c96>
  40cae4:	nop    DWORD PTR [rax+0x0]
  40cae8:	cmp    BYTE PTR [r8+0x3],0x20
  40caed:	jle    40c88d <_start@@Base+0x5f2d>
  40caf3:	lea    rsi,[r8+0x3]
  40caf7:	jmp    40c8a5 <_start@@Base+0x5f45>
  40cafc:	cmp    BYTE PTR [r8+0x2],0x20
  40cb01:	jle    40c842 <_start@@Base+0x5ee2>
  40cb07:	lea    r9,[r8+0x2]
  40cb0b:	jmp    40c458 <_start@@Base+0x5af8>
  40cb10:	inc    rsi
  40cb13:	mov    rdx,r13
  40cb16:	mov    rdi,rbx
  40cb19:	mov    QWORD PTR [rsp+0x8],r8
  40cb1e:	call   407a60 <_start@@Base+0x1100>
  40cb23:	mov    r11,rax
  40cb26:	mov    r8,QWORD PTR [rsp+0x8]
  40cb2b:	jmp    40c8d0 <_start@@Base+0x5f70>
  40cb30:	inc    rsi
  40cb33:	mov    rdx,r13
  40cb36:	mov    rdi,rbx
  40cb39:	mov    QWORD PTR [rsp+0x8],r8
  40cb3e:	call   407a60 <_start@@Base+0x1100>
  40cb43:	mov    r11,rax
  40cb46:	mov    r8,QWORD PTR [rsp+0x8]
  40cb4b:	jmp    40c621 <_start@@Base+0x5cc1>
  40cb50:	mov    ecx,0x21
  40cb55:	mov    rdx,r13
  40cb58:	mov    rsi,rax
  40cb5b:	mov    rdi,rbx
  40cb5e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40cb63:	mov    r9,rax
  40cb66:	jmp    40c458 <_start@@Base+0x5af8>
  40cb6b:	cmp    BYTE PTR [rsi+0x2],0x20
  40cb6f:	jle    40c49f <_start@@Base+0x5b3f>
  40cb75:	lea    r8,[rsi+0x2]
  40cb79:	jmp    40c4b0 <_start@@Base+0x5b50>
  40cb7e:	lea    rsi,[r8+0x1]
  40cb82:	mov    rdx,r13
  40cb85:	mov    rdi,rbx
  40cb88:	call   407a60 <_start@@Base+0x1100>
  40cb8d:	mov    r9,rax
  40cb90:	jmp    40c458 <_start@@Base+0x5af8>
  40cb95:	call   4061a0 <__stack_chk_fail@plt>
  40cb9a:	nop    WORD PTR [rax+rax*1+0x0]
  40cba0:	push   r15
  40cba2:	push   r14
  40cba4:	mov    r14,rsi
  40cba7:	mov    esi,0x4
  40cbac:	push   r13
  40cbae:	mov    r13,rcx
  40cbb1:	push   r12
  40cbb3:	push   rbp
  40cbb4:	mov    rbp,rdi
  40cbb7:	push   rbx
  40cbb8:	mov    rbx,rdx
  40cbbb:	mov    edx,0x4
  40cbc0:	sub    rsp,0x38
  40cbc4:	mov    rax,QWORD PTR fs:0x28
  40cbcd:	mov    QWORD PTR [rsp+0x28],rax
  40cbd2:	xor    eax,eax
  40cbd4:	mov    DWORD PTR [rcx],0x0
  40cbda:	mov    rdi,QWORD PTR [rdi]
  40cbdd:	call   416f60 <flatcc_builder_start_struct@@Base>
  40cbe2:	test   rax,rax
  40cbe5:	je     40cc40 <_start@@Base+0x62e0>
  40cbe7:	cmp    r14,rbx
  40cbea:	je     40cbf6 <_start@@Base+0x6296>
  40cbec:	cmp    BYTE PTR [r14],0x7b
  40cbf0:	je     40cc80 <_start@@Base+0x6320>
  40cbf6:	mov    ecx,0x15
  40cbfb:	nop    DWORD PTR [rax+rax*1+0x0]
  40cc00:	mov    rsi,r14
  40cc03:	mov    rdx,rbx
  40cc06:	mov    rdi,rbp
  40cc09:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40cc0e:	mov    rsi,rax
  40cc11:	cmp    rbx,rsi
  40cc14:	mov    QWORD PTR [rsp+0x8],rsi
  40cc19:	je     40d1c4 <_start@@Base+0x6864>
  40cc1f:	mov    rdi,QWORD PTR [rbp+0x0]
  40cc23:	call   417020 <flatcc_builder_end_struct@@Base>
  40cc28:	test   eax,eax
  40cc2a:	mov    DWORD PTR [r13+0x0],eax
  40cc2e:	mov    rsi,QWORD PTR [rsp+0x8]
  40cc33:	jne    40cc56 <_start@@Base+0x62f6>
  40cc35:	mov    r14,rsi
  40cc38:	nop    DWORD PTR [rax+rax*1+0x0]
  40cc40:	mov    rsi,r14
  40cc43:	mov    ecx,0x21
  40cc48:	mov    rdx,rbx
  40cc4b:	mov    rdi,rbp
  40cc4e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40cc53:	mov    rsi,rax
  40cc56:	mov    rdi,QWORD PTR [rsp+0x28]
  40cc5b:	xor    rdi,QWORD PTR fs:0x28
  40cc64:	mov    rax,rsi
  40cc67:	jne    40d1bf <_start@@Base+0x685f>
  40cc6d:	add    rsp,0x38
  40cc71:	pop    rbx
  40cc72:	pop    rbp
  40cc73:	pop    r12
  40cc75:	pop    r13
  40cc77:	pop    r14
  40cc79:	pop    r15
  40cc7b:	ret    
  40cc7c:	nop    DWORD PTR [rax+0x0]
  40cc80:	mov    r12,rax
  40cc83:	mov    rdx,rbx
  40cc86:	lea    rax,[r14+0x1]
  40cc8a:	sub    rdx,rax
  40cc8d:	cmp    rdx,0x1
  40cc91:	jle    40cca0 <_start@@Base+0x6340>
  40cc93:	cmp    BYTE PTR [r14+0x1],0x20
  40cc98:	jg     40ccae <_start@@Base+0x634e>
  40cc9a:	je     40d160 <_start@@Base+0x6800>
  40cca0:	mov    rdx,rbx
  40cca3:	mov    rsi,rax
  40cca6:	mov    rdi,rbp
  40cca9:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40ccae:	cmp    rbx,rax
  40ccb1:	je     40ccc0 <_start@@Base+0x6360>
  40ccb3:	cmp    BYTE PTR [rax],0x7d
  40ccb6:	je     40d198 <_start@@Base+0x6838>
  40ccbc:	nop    DWORD PTR [rax+0x0]
  40ccc0:	cmp    rbx,rax
  40ccc3:	je     40ccd1 <_start@@Base+0x6371>
  40ccc5:	cmp    BYTE PTR [rax],0x22
  40ccc8:	jne    40cea0 <_start@@Base+0x6540>
  40ccce:	inc    rax
  40ccd1:	mov    rdx,rbx
  40ccd4:	sub    rdx,rax
  40ccd7:	cmp    rdx,0x7
  40ccdb:	jbe    40ce88 <_start@@Base+0x6528>
  40cce1:	movbe  rdx,QWORD PTR [rax]
  40cce6:	movabs rdi,0x626f6f6b735f7265
  40ccf0:	cmp    rdx,rdi
  40ccf3:	jne    40ce88 <_start@@Base+0x6528>
  40ccf9:	lea    r14,[rax+0x8]
  40ccfd:	mov    rdi,rbx
  40cd00:	sub    rdi,r14
  40cd03:	cmp    rdi,0x7
  40cd07:	ja     40cec0 <_start@@Base+0x6560>
  40cd0d:	lea    rcx,[rip+0x1e334]        # 42b048 <_IO_stdin_used@@Base+0x48>
  40cd14:	movsxd rdx,DWORD PTR [rcx+rdi*4]
  40cd18:	add    rdx,rcx
  40cd1b:	notrack jmp rdx
  40cd1e:	xchg   ax,ax
  40cd20:	movsx  rsi,BYTE PTR [rax+0xe]
  40cd25:	shl    rsi,0x8
  40cd29:	movsx  rcx,BYTE PTR [rax+0xd]
  40cd2e:	shl    rcx,0x10
  40cd32:	or     rsi,rcx
  40cd35:	movsx  rcx,BYTE PTR [rax+0xc]
  40cd3a:	shl    rcx,0x18
  40cd3e:	mov    rdx,rcx
  40cd41:	or     rdx,rsi
  40cd44:	movsx  rcx,BYTE PTR [rax+0xb]
  40cd49:	shl    rcx,0x20
  40cd4d:	or     rdx,rcx
  40cd50:	movsx  rcx,BYTE PTR [rax+0xa]
  40cd55:	shl    rcx,0x28
  40cd59:	mov    rsi,rcx
  40cd5c:	or     rsi,rdx
  40cd5f:	movsx  rcx,BYTE PTR [rax+0x9]
  40cd64:	shl    rcx,0x30
  40cd68:	or     rsi,rcx
  40cd6b:	movsx  rcx,BYTE PTR [rax+0x8]
  40cd70:	shl    rcx,0x38
  40cd74:	mov    rdx,rcx
  40cd77:	or     rdx,rsi
  40cd7a:	movabs rcx,0xffff000000000000
  40cd84:	and    rdx,rcx
  40cd87:	movabs rsi,0x6164000000000000
  40cd91:	cmp    rdx,rsi
  40cd94:	jne    40cda6 <_start@@Base+0x6446>
  40cd96:	cmp    rdi,0x2
  40cd9a:	jle    40cda6 <_start@@Base+0x6446>
  40cd9c:	cmp    BYTE PTR [rax+0xa],0x22
  40cda0:	je     40cf70 <_start@@Base+0x6610>
  40cda6:	mov    rsi,r14
  40cda9:	mov    rdx,rbx
  40cdac:	mov    rdi,rbp
  40cdaf:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40cdb4:	mov    r14,rax
  40cdb7:	mov    rax,rbx
  40cdba:	sub    rax,r14
  40cdbd:	cmp    rax,0x1
  40cdc1:	jle    40cdcf <_start@@Base+0x646f>
  40cdc3:	cmp    BYTE PTR [r14],0x20
  40cdc7:	jg     40cde0 <_start@@Base+0x6480>
  40cdc9:	je     40ce70 <_start@@Base+0x6510>
  40cdcf:	mov    rsi,r14
  40cdd2:	mov    rdx,rbx
  40cdd5:	mov    rdi,rbp
  40cdd8:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40cddd:	mov    r14,rax
  40cde0:	cmp    rbx,r14
  40cde3:	je     40cc40 <_start@@Base+0x62e0>
  40cde9:	movzx  eax,BYTE PTR [r14]
  40cded:	cmp    al,0x2c
  40cdef:	je     40cf08 <_start@@Base+0x65a8>
  40cdf5:	cmp    al,0x7d
  40cdf7:	je     40ced0 <_start@@Base+0x6570>
  40cdfd:	mov    ecx,0xa
  40ce02:	jmp    40cc00 <_start@@Base+0x62a0>
  40ce07:	nop    WORD PTR [rax+rax*1+0x0]
  40ce10:	xor    esi,esi
  40ce12:	jmp    40cd29 <_start@@Base+0x63c9>
  40ce17:	nop    WORD PTR [rax+rax*1+0x0]
  40ce20:	xor    esi,esi
  40ce22:	jmp    40cd35 <_start@@Base+0x63d5>
  40ce27:	nop    WORD PTR [rax+rax*1+0x0]
  40ce30:	xor    edx,edx
  40ce32:	jmp    40cd44 <_start@@Base+0x63e4>
  40ce37:	nop    WORD PTR [rax+rax*1+0x0]
  40ce40:	xor    edx,edx
  40ce42:	jmp    40cd50 <_start@@Base+0x63f0>
  40ce47:	nop    WORD PTR [rax+rax*1+0x0]
  40ce50:	xor    esi,esi
  40ce52:	jmp    40cd5f <_start@@Base+0x63ff>
  40ce57:	nop    WORD PTR [rax+rax*1+0x0]
  40ce60:	xor    esi,esi
  40ce62:	jmp    40cd6b <_start@@Base+0x640b>
  40ce67:	nop    WORD PTR [rax+rax*1+0x0]
  40ce70:	cmp    BYTE PTR [r14+0x1],0x20
  40ce75:	jle    40cdcf <_start@@Base+0x646f>
  40ce7b:	inc    r14
  40ce7e:	jmp    40cde0 <_start@@Base+0x6480>
  40ce83:	nop    DWORD PTR [rax+rax*1+0x0]
  40ce88:	mov    rdx,rbx
  40ce8b:	mov    rsi,rax
  40ce8e:	mov    rdi,rbp
  40ce91:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40ce96:	mov    r14,rax
  40ce99:	jmp    40cdb7 <_start@@Base+0x6457>
  40ce9e:	xchg   ax,ax
  40cea0:	mov    ecx,0x5
  40cea5:	mov    rdx,rbx
  40cea8:	mov    rsi,rax
  40ceab:	mov    rdi,rbp
  40ceae:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40ceb3:	jmp    40ccd1 <_start@@Base+0x6371>
  40ceb8:	nop    DWORD PTR [rax+rax*1+0x0]
  40cec0:	movbe  rdx,QWORD PTR [rax+0x8]
  40cec6:	jmp    40cd7a <_start@@Base+0x641a>
  40cecb:	nop    DWORD PTR [rax+rax*1+0x0]
  40ced0:	lea    rsi,[r14+0x1]
  40ced4:	mov    rax,rbx
  40ced7:	sub    rax,rsi
  40ceda:	cmp    rax,0x1
  40cede:	jle    40cef1 <_start@@Base+0x6591>
  40cee0:	cmp    BYTE PTR [r14+0x1],0x20
  40cee5:	jg     40cc11 <_start@@Base+0x62b1>
  40ceeb:	je     40d098 <_start@@Base+0x6738>
  40cef1:	mov    rdx,rbx
  40cef4:	mov    rdi,rbp
  40cef7:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40cefc:	mov    rsi,rax
  40ceff:	jmp    40cc11 <_start@@Base+0x62b1>
  40cf04:	nop    DWORD PTR [rax+0x0]
  40cf08:	lea    rax,[r14+0x1]
  40cf0c:	mov    rdx,rbx
  40cf0f:	sub    rdx,rax
  40cf12:	cmp    rdx,0x1
  40cf16:	jle    40cf25 <_start@@Base+0x65c5>
  40cf18:	cmp    BYTE PTR [r14+0x1],0x20
  40cf1d:	jg     40cf33 <_start@@Base+0x65d3>
  40cf1f:	je     40d0b0 <_start@@Base+0x6750>
  40cf25:	mov    rdx,rbx
  40cf28:	mov    rsi,rax
  40cf2b:	mov    rdi,rbp
  40cf2e:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40cf33:	cmp    rbx,rax
  40cf36:	je     40d0d0 <_start@@Base+0x6770>
  40cf3c:	cmp    BYTE PTR [rax],0x7d
  40cf3f:	jne    40ccc0 <_start@@Base+0x6360>
  40cf45:	lea    rsi,[rax+0x1]
  40cf49:	mov    rdx,rbx
  40cf4c:	sub    rdx,rsi
  40cf4f:	cmp    rdx,0x1
  40cf53:	jle    40cef1 <_start@@Base+0x6591>
  40cf55:	cmp    BYTE PTR [rax+0x1],0x20
  40cf59:	jg     40cc11 <_start@@Base+0x62b1>
  40cf5f:	jne    40cef1 <_start@@Base+0x6591>
  40cf61:	cmp    BYTE PTR [rax+0x2],0x20
  40cf65:	jle    40cef1 <_start@@Base+0x6591>
  40cf67:	lea    rsi,[rax+0x2]
  40cf6b:	jmp    40cc11 <_start@@Base+0x62b1>
  40cf70:	lea    rsi,[rax+0xb]
  40cf74:	mov    rdx,rbx
  40cf77:	sub    rdx,rsi
  40cf7a:	cmp    rdx,0x1
  40cf7e:	jle    40cf8c <_start@@Base+0x662c>
  40cf80:	cmp    BYTE PTR [rax+0xb],0x20
  40cf84:	jg     40cf9a <_start@@Base+0x663a>
  40cf86:	je     40d110 <_start@@Base+0x67b0>
  40cf8c:	mov    rdx,rbx
  40cf8f:	mov    rdi,rbp
  40cf92:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40cf97:	mov    rsi,rax
  40cf9a:	cmp    rbx,rsi
  40cf9d:	je     40cfa8 <_start@@Base+0x6648>
  40cf9f:	cmp    BYTE PTR [rsi],0x3a
  40cfa2:	je     40d128 <_start@@Base+0x67c8>
  40cfa8:	mov    ecx,0x4
  40cfad:	mov    rdx,rbx
  40cfb0:	mov    rdi,rbp
  40cfb3:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40cfb8:	mov    r15,rax
  40cfbb:	cmp    r14,r15
  40cfbe:	je     40cda6 <_start@@Base+0x6446>
  40cfc4:	mov    DWORD PTR [rsp+0x18],0x0
  40cfcc:	mov    QWORD PTR [rsp+0x20],0x0
  40cfd5:	mov    DWORD PTR [rsp+0x1c],0x0
  40cfdd:	cmp    rbx,r15
  40cfe0:	je     40d048 <_start@@Base+0x66e8>
  40cfe2:	lea    rcx,[rsp+0x1c]
  40cfe7:	lea    r8,[rsp+0x20]
  40cfec:	mov    rdx,rbx
  40cfef:	mov    rsi,r15
  40cff2:	mov    rdi,rbp
  40cff5:	call   41d880 <flatcc_json_parser_integer@@Base>
  40cffa:	mov    r14,rax
  40cffd:	cmp    r15,rax
  40d000:	jne    40d050 <_start@@Base+0x66f0>
  40d002:	lea    r8,[rsp+0x18]
  40d007:	lea    rcx,[rip+0x2c232]        # 439240 <__data_start@@Base+0x180>
  40d00e:	mov    rdx,rbx
  40d011:	mov    rsi,r14
  40d014:	mov    rdi,rbp
  40d017:	call   40aff0 <_start@@Base+0x4690>
  40d01c:	cmp    rax,r14
  40d01f:	je     40d178 <_start@@Base+0x6818>
  40d025:	cmp    rbx,rax
  40d028:	je     40d178 <_start@@Base+0x6818>
  40d02e:	mov    edx,DWORD PTR [rsp+0x18]
  40d032:	mov    r14,rax
  40d035:	nop    DWORD PTR [rax]
  40d038:	mov    DWORD PTR [r12],edx
  40d03c:	jmp    40cdb7 <_start@@Base+0x6457>
  40d041:	nop    DWORD PTR [rax+0x0]
  40d048:	mov    r14,rbx
  40d04b:	jmp    40d002 <_start@@Base+0x66a2>
  40d04d:	nop    DWORD PTR [rax]
  40d050:	mov    rax,QWORD PTR [rsp+0x20]
  40d055:	mov    ecx,DWORD PTR [rsp+0x1c]
  40d059:	mov    edx,eax
  40d05b:	test   ecx,ecx
  40d05d:	je     40d0f0 <_start@@Base+0x6790>
  40d063:	mov    edi,0x80000000
  40d068:	neg    edx
  40d06a:	mov    ecx,0x8
  40d06f:	cmp    rax,rdi
  40d072:	jbe    40d038 <_start@@Base+0x66d8>
  40d074:	mov    rsi,r14
  40d077:	mov    rdx,rbx
  40d07a:	mov    rdi,rbp
  40d07d:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40d082:	mov    r14,rax
  40d085:	cmp    r15,rax
  40d088:	je     40d002 <_start@@Base+0x66a2>
  40d08e:	mov    edx,DWORD PTR [rsp+0x18]
  40d092:	jmp    40d038 <_start@@Base+0x66d8>
  40d094:	nop    DWORD PTR [rax+0x0]
  40d098:	cmp    BYTE PTR [r14+0x2],0x20
  40d09d:	jle    40cef1 <_start@@Base+0x6591>
  40d0a3:	lea    rsi,[r14+0x2]
  40d0a7:	jmp    40cc11 <_start@@Base+0x62b1>
  40d0ac:	nop    DWORD PTR [rax+0x0]
  40d0b0:	cmp    BYTE PTR [r14+0x2],0x20
  40d0b5:	jle    40cf25 <_start@@Base+0x65c5>
  40d0bb:	lea    rax,[r14+0x2]
  40d0bf:	cmp    rbx,rax
  40d0c2:	jne    40cf3c <_start@@Base+0x65dc>
  40d0c8:	nop    DWORD PTR [rax+rax*1+0x0]
  40d0d0:	mov    rsi,rbx
  40d0d3:	mov    ecx,0xa
  40d0d8:	mov    rdx,rbx
  40d0db:	mov    rdi,rbp
  40d0de:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40d0e3:	mov    rsi,rax
  40d0e6:	jmp    40cc11 <_start@@Base+0x62b1>
  40d0eb:	nop    DWORD PTR [rax+rax*1+0x0]
  40d0f0:	cmp    rax,0x7fffffff
  40d0f6:	jbe    40d038 <_start@@Base+0x66d8>
  40d0fc:	mov    ecx,0x7
  40d101:	jmp    40d074 <_start@@Base+0x6714>
  40d106:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d110:	cmp    BYTE PTR [rax+0xc],0x20
  40d114:	jle    40cf8c <_start@@Base+0x662c>
  40d11a:	lea    rsi,[rax+0xc]
  40d11e:	jmp    40cf9a <_start@@Base+0x663a>
  40d123:	nop    DWORD PTR [rax+rax*1+0x0]
  40d128:	lea    r15,[rsi+0x1]
  40d12c:	mov    rax,rbx
  40d12f:	sub    rax,r15
  40d132:	cmp    rax,0x1
  40d136:	jle    40d144 <_start@@Base+0x67e4>
  40d138:	cmp    BYTE PTR [rsi+0x1],0x20
  40d13c:	jg     40cfbb <_start@@Base+0x665b>
  40d142:	je     40d1b0 <_start@@Base+0x6850>
  40d144:	mov    rsi,r15
  40d147:	mov    rdx,rbx
  40d14a:	mov    rdi,rbp
  40d14d:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40d152:	mov    r15,rax
  40d155:	jmp    40cfbb <_start@@Base+0x665b>
  40d15a:	nop    WORD PTR [rax+rax*1+0x0]
  40d160:	cmp    BYTE PTR [r14+0x2],0x20
  40d165:	jle    40cca0 <_start@@Base+0x6340>
  40d16b:	lea    rax,[r14+0x2]
  40d16f:	jmp    40ccae <_start@@Base+0x634e>
  40d174:	nop    DWORD PTR [rax+0x0]
  40d178:	mov    rsi,rax
  40d17b:	mov    ecx,0x21
  40d180:	mov    rdx,rbx
  40d183:	mov    rdi,rbp
  40d186:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40d18b:	mov    rsi,rax
  40d18e:	jmp    40cc11 <_start@@Base+0x62b1>
  40d193:	nop    DWORD PTR [rax+rax*1+0x0]
  40d198:	lea    rsi,[rax+0x1]
  40d19c:	mov    rdx,rbx
  40d19f:	mov    rdi,rbp
  40d1a2:	call   407a60 <_start@@Base+0x1100>
  40d1a7:	mov    rsi,rax
  40d1aa:	jmp    40cc11 <_start@@Base+0x62b1>
  40d1af:	nop
  40d1b0:	cmp    BYTE PTR [rsi+0x2],0x20
  40d1b4:	jle    40d144 <_start@@Base+0x67e4>
  40d1b6:	lea    r15,[rsi+0x2]
  40d1ba:	jmp    40cfbb <_start@@Base+0x665b>
  40d1bf:	call   4061a0 <__stack_chk_fail@plt>
  40d1c4:	mov    r14,rbx
  40d1c7:	jmp    40cc40 <_start@@Base+0x62e0>
  40d1cc:	nop    DWORD PTR [rax+0x0]
  40d1d0:	endbr64 
  40d1d4:	push   r15
  40d1d6:	push   r14
  40d1d8:	mov    r14,rsi
  40d1db:	push   r13
  40d1dd:	push   r12
  40d1df:	mov    r12,r8
  40d1e2:	push   rbp
  40d1e3:	mov    rbp,rdi
  40d1e6:	push   rbx
  40d1e7:	mov    rbx,rdx
  40d1ea:	sub    rsp,0x48
  40d1ee:	mov    rax,QWORD PTR fs:0x28
  40d1f7:	mov    QWORD PTR [rsp+0x38],rax
  40d1fc:	xor    eax,eax
  40d1fe:	mov    DWORD PTR [r8],0x0
  40d205:	cmp    cl,0x9
  40d208:	je     40d2d0 <_start@@Base+0x6970>
  40d20e:	ja     40d280 <_start@@Base+0x6920>
  40d210:	cmp    cl,0x2
  40d213:	je     40d590 <_start@@Base+0x6c30>
  40d219:	cmp    cl,0x8
  40d21c:	je     40d310 <_start@@Base+0x69b0>
  40d222:	test   cl,cl
  40d224:	je     40d560 <_start@@Base+0x6c00>
  40d22a:	test   BYTE PTR [rbp+0x10],0x1
  40d22e:	jne    40d2f0 <_start@@Base+0x6990>
  40d234:	mov    ecx,0xf
  40d239:	mov    rdx,rbx
  40d23c:	mov    rsi,r14
  40d23f:	mov    rdi,rbp
  40d242:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40d247:	mov    r15,rax
  40d24a:	nop    WORD PTR [rax+rax*1+0x0]
  40d250:	mov    rdx,QWORD PTR [rsp+0x38]
  40d255:	xor    rdx,QWORD PTR fs:0x28
  40d25e:	mov    rax,r15
  40d261:	jne    40d997 <_start@@Base+0x7037>
  40d267:	add    rsp,0x48
  40d26b:	pop    rbx
  40d26c:	pop    rbp
  40d26d:	pop    r12
  40d26f:	pop    r13
  40d271:	pop    r14
  40d273:	pop    r15
  40d275:	ret    
  40d276:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d280:	cmp    cl,0xb
  40d283:	je     40d28c <_start@@Base+0x692c>
  40d285:	jb     40d2d0 <_start@@Base+0x6970>
  40d287:	cmp    cl,0xff
  40d28a:	jne    40d22a <_start@@Base+0x68ca>
  40d28c:	mov    rcx,r12
  40d28f:	mov    rdx,rbx
  40d292:	mov    rsi,r14
  40d295:	mov    rdi,rbp
  40d298:	call   41ea20 <flatcc_json_parser_build_string@@Base>
  40d29d:	mov    r15,rax
  40d2a0:	mov    edx,DWORD PTR [rbp+0x1c]
  40d2a3:	test   edx,edx
  40d2a5:	jne    40d250 <_start@@Base+0x68f0>
  40d2a7:	mov    eax,DWORD PTR [r12]
  40d2ab:	test   eax,eax
  40d2ad:	jne    40d250 <_start@@Base+0x68f0>
  40d2af:	mov    rsi,r15
  40d2b2:	mov    ecx,0x21
  40d2b7:	mov    rdx,rbx
  40d2ba:	mov    rdi,rbp
  40d2bd:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40d2c2:	mov    r15,rax
  40d2c5:	jmp    40d250 <_start@@Base+0x68f0>
  40d2c7:	nop    WORD PTR [rax+rax*1+0x0]
  40d2d0:	mov    rdx,rbx
  40d2d3:	mov    rcx,r12
  40d2d6:	mov    rsi,r14
  40d2d9:	mov    rdi,rbp
  40d2dc:	call   40cba0 <_start@@Base+0x6240>
  40d2e1:	mov    edx,DWORD PTR [rbp+0x1c]
  40d2e4:	mov    r15,rax
  40d2e7:	test   edx,edx
  40d2e9:	je     40d2a7 <_start@@Base+0x6947>
  40d2eb:	jmp    40d250 <_start@@Base+0x68f0>
  40d2f0:	mov    rdx,rbx
  40d2f3:	mov    rsi,r14
  40d2f6:	mov    rdi,rbp
  40d2f9:	call   41d940 <flatcc_json_parser_generic_json@@Base>
  40d2fe:	mov    r15,rax
  40d301:	jmp    40d250 <_start@@Base+0x68f0>
  40d306:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d310:	mov    rdi,QWORD PTR [rdi]
  40d313:	mov    edx,0x2
  40d318:	mov    esi,0x2
  40d31d:	call   416f60 <flatcc_builder_start_struct@@Base>
  40d322:	mov    QWORD PTR [rsp+0x8],rax
  40d327:	test   rax,rax
  40d32a:	je     40d8f0 <_start@@Base+0x6f90>
  40d330:	lea    r13,[rsp+0x28]
  40d335:	mov    rcx,r13
  40d338:	mov    rdx,rbx
  40d33b:	mov    rsi,r14
  40d33e:	mov    rdi,rbp
  40d341:	call   40a4b0 <_start@@Base+0x3b50>
  40d346:	mov    r8d,DWORD PTR [rsp+0x28]
  40d34b:	mov    r15,rax
  40d34e:	test   r8d,r8d
  40d351:	je     40d4ce <_start@@Base+0x6b6e>
  40d357:	lea    rax,[rsp+0x24]
  40d35c:	mov    QWORD PTR [rsp+0x18],rax
  40d361:	nop    DWORD PTR [rax+0x0]
  40d368:	cmp    rbx,r15
  40d36b:	je     40d37a <_start@@Base+0x6a1a>
  40d36d:	cmp    BYTE PTR [r15],0x22
  40d371:	jne    40d530 <_start@@Base+0x6bd0>
  40d377:	inc    r15
  40d37a:	mov    rax,rbx
  40d37d:	sub    rax,r15
  40d380:	cmp    rax,0x7
  40d384:	ja     40d508 <_start@@Base+0x6ba8>
  40d38a:	mov    rsi,rbx
  40d38d:	mov    rdi,r15
  40d390:	call   406a50 <_start@@Base+0xf0>
  40d395:	movabs rdx,0x686169725f6c656e
  40d39f:	cmp    rax,rdx
  40d3a2:	jne    40d4a0 <_start@@Base+0x6b40>
  40d3a8:	lea    r14,[r15+0x8]
  40d3ac:	mov    r10,rbx
  40d3af:	sub    r10,r14
  40d3b2:	cmp    r10,0x7
  40d3b6:	ja     40d550 <_start@@Base+0x6bf0>
  40d3bc:	mov    rsi,rbx
  40d3bf:	mov    rdi,r14
  40d3c2:	call   406a50 <_start@@Base+0xf0>
  40d3c7:	movabs rsi,0xffffff0000000000
  40d3d1:	and    rax,rsi
  40d3d4:	movabs rdi,0x6774680000000000
  40d3de:	cmp    rax,rdi
  40d3e1:	jne    40d518 <_start@@Base+0x6bb8>
  40d3e7:	cmp    r10,0x3
  40d3eb:	jle    40d518 <_start@@Base+0x6bb8>
  40d3f1:	mov    ecx,0x3
  40d3f6:	mov    rdx,rbx
  40d3f9:	mov    rsi,r14
  40d3fc:	mov    rdi,rbp
  40d3ff:	call   40b830 <_start@@Base+0x4ed0>
  40d404:	cmp    r14,rax
  40d407:	je     40d518 <_start@@Base+0x6bb8>
  40d40d:	xor    edi,edi
  40d40f:	mov    WORD PTR [rsp+0x24],di
  40d414:	mov    QWORD PTR [rsp+0x30],0x0
  40d41d:	mov    DWORD PTR [rsp+0x2c],0x0
  40d425:	cmp    rbx,rax
  40d428:	je     40d848 <_start@@Base+0x6ee8>
  40d42e:	lea    rcx,[rsp+0x2c]
  40d433:	lea    r8,[rsp+0x30]
  40d438:	mov    rdx,rbx
  40d43b:	mov    rsi,rax
  40d43e:	mov    rdi,rbp
  40d441:	mov    QWORD PTR [rsp+0x10],rax
  40d446:	call   41d880 <flatcc_json_parser_integer@@Base>
  40d44b:	mov    r10,QWORD PTR [rsp+0x10]
  40d450:	mov    r15,rax
  40d453:	cmp    r10,rax
  40d456:	jne    40d850 <_start@@Base+0x6ef0>
  40d45c:	mov    r8,QWORD PTR [rsp+0x18]
  40d461:	lea    rcx,[rip+0x2bdf8]        # 439260 <__data_start@@Base+0x1a0>
  40d468:	mov    rdx,rbx
  40d46b:	mov    rsi,r15
  40d46e:	mov    rdi,rbp
  40d471:	call   40ac40 <_start@@Base+0x42e0>
  40d476:	cmp    rax,r15
  40d479:	je     40d8bd <_start@@Base+0x6f5d>
  40d47f:	cmp    rbx,rax
  40d482:	je     40d8bd <_start@@Base+0x6f5d>
  40d488:	nop    DWORD PTR [rax+rax*1+0x0]
  40d490:	movzx  edx,WORD PTR [rsp+0x24]
  40d495:	mov    rcx,QWORD PTR [rsp+0x8]
  40d49a:	mov    WORD PTR [rcx],dx
  40d49d:	jmp    40d4ae <_start@@Base+0x6b4e>
  40d49f:	nop
  40d4a0:	mov    rdx,rbx
  40d4a3:	mov    rsi,r15
  40d4a6:	mov    rdi,rbp
  40d4a9:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40d4ae:	mov    rcx,r13
  40d4b1:	mov    rdx,rbx
  40d4b4:	mov    rsi,rax
  40d4b7:	mov    rdi,rbp
  40d4ba:	call   40b8c0 <_start@@Base+0x4f60>
  40d4bf:	mov    ecx,DWORD PTR [rsp+0x28]
  40d4c3:	mov    r15,rax
  40d4c6:	test   ecx,ecx
  40d4c8:	jne    40d368 <_start@@Base+0x6a08>
  40d4ce:	cmp    rbx,r15
  40d4d1:	je     40d4e8 <_start@@Base+0x6b88>
  40d4d3:	mov    rdi,QWORD PTR [rbp+0x0]
  40d4d7:	call   417020 <flatcc_builder_end_struct@@Base>
  40d4dc:	mov    DWORD PTR [r12],eax
  40d4e0:	test   eax,eax
  40d4e2:	jne    40d250 <_start@@Base+0x68f0>
  40d4e8:	mov    rsi,r15
  40d4eb:	mov    ecx,0x21
  40d4f0:	mov    rdx,rbx
  40d4f3:	mov    rdi,rbp
  40d4f6:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40d4fb:	mov    r15,rax
  40d4fe:	jmp    40d2a0 <_start@@Base+0x6940>
  40d503:	nop    DWORD PTR [rax+rax*1+0x0]
  40d508:	movbe  rax,QWORD PTR [r15]
  40d50d:	jmp    40d395 <_start@@Base+0x6a35>
  40d512:	nop    WORD PTR [rax+rax*1+0x0]
  40d518:	mov    rdx,rbx
  40d51b:	mov    rsi,r14
  40d51e:	mov    rdi,rbp
  40d521:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40d526:	jmp    40d4ae <_start@@Base+0x6b4e>
  40d528:	nop    DWORD PTR [rax+rax*1+0x0]
  40d530:	mov    rsi,r15
  40d533:	mov    ecx,0x5
  40d538:	mov    rdx,rbx
  40d53b:	mov    rdi,rbp
  40d53e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40d543:	mov    r15,rax
  40d546:	jmp    40d37a <_start@@Base+0x6a1a>
  40d54b:	nop    DWORD PTR [rax+rax*1+0x0]
  40d550:	movbe  rax,QWORD PTR [r15+0x8]
  40d556:	jmp    40d3c7 <_start@@Base+0x6a67>
  40d55b:	nop    DWORD PTR [rax+rax*1+0x0]
  40d560:	mov    rax,rdx
  40d563:	sub    rax,rsi
  40d566:	cmp    rax,0x3
  40d56a:	jle    40d57c <_start@@Base+0x6c1c>
  40d56c:	cmp    DWORD PTR [rsi],0x6c6c756e
  40d572:	lea    r15,[rsi+0x4]
  40d576:	je     40d250 <_start@@Base+0x68f0>
  40d57c:	mov    ecx,0x1a
  40d581:	jmp    40d239 <_start@@Base+0x68d9>
  40d586:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d590:	mov    rdi,QWORD PTR [rdi]
  40d593:	mov    esi,0x1
  40d598:	call   4179d0 <flatcc_builder_start_table@@Base>
  40d59d:	test   eax,eax
  40d59f:	jne    40d7b8 <_start@@Base+0x6e58>
  40d5a5:	lea    r13,[rsp+0x24]
  40d5aa:	mov    rsi,r14
  40d5ad:	mov    rcx,r13
  40d5b0:	mov    rdx,rbx
  40d5b3:	mov    rdi,rbp
  40d5b6:	call   40a4b0 <_start@@Base+0x3b50>
  40d5bb:	mov    r15d,DWORD PTR [rsp+0x24]
  40d5c0:	mov    r14,rax
  40d5c3:	test   r15d,r15d
  40d5c6:	je     40d7ab <_start@@Base+0x6e4b>
  40d5cc:	movabs r15,0x73776f72645f6174
  40d5d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d5e0:	cmp    rbx,r14
  40d5e3:	je     40d5f2 <_start@@Base+0x6c92>
  40d5e5:	cmp    BYTE PTR [r14],0x22
  40d5e9:	jne    40d808 <_start@@Base+0x6ea8>
  40d5ef:	inc    r14
  40d5f2:	mov    rax,rbx
  40d5f5:	sub    rax,r14
  40d5f8:	cmp    rax,0x7
  40d5fc:	ja     40d7f8 <_start@@Base+0x6e98>
  40d602:	mov    rsi,rbx
  40d605:	mov    rdi,r14
  40d608:	call   406a50 <_start@@Base+0xf0>
  40d60d:	cmp    rax,r15
  40d610:	jne    40d778 <_start@@Base+0x6e18>
  40d616:	lea    r8,[r14+0x8]
  40d61a:	mov    rax,rbx
  40d61d:	sub    rax,r8
  40d620:	cmp    rax,0x7
  40d624:	ja     40d828 <_start@@Base+0x6ec8>
  40d62a:	mov    rsi,rbx
  40d62d:	mov    rdi,r8
  40d630:	call   406a50 <_start@@Base+0xf0>
  40d635:	movabs rdx,0x7461636b5f64616d
  40d63f:	cmp    rax,rdx
  40d642:	jne    40d7e0 <_start@@Base+0x6e80>
  40d648:	lea    r8,[r14+0x10]
  40d64c:	mov    r10,rbx
  40d64f:	sub    r10,r8
  40d652:	cmp    r10,0x7
  40d656:	ja     40d838 <_start@@Base+0x6ed8>
  40d65c:	mov    rdi,r8
  40d65f:	mov    rsi,rbx
  40d662:	mov    QWORD PTR [rsp+0x8],r8
  40d667:	call   406a50 <_start@@Base+0xf0>
  40d66c:	mov    r8,QWORD PTR [rsp+0x8]
  40d671:	movabs rsi,0xffffff0000000000
  40d67b:	and    rax,rsi
  40d67e:	movabs rdi,0x6167650000000000
  40d688:	cmp    rax,rdi
  40d68b:	jne    40d7e0 <_start@@Base+0x6e80>
  40d691:	cmp    r10,0x3
  40d695:	jle    40d7e0 <_start@@Base+0x6e80>
  40d69b:	mov    rsi,r8
  40d69e:	mov    ecx,0x3
  40d6a3:	mov    rdx,rbx
  40d6a6:	mov    rdi,rbp
  40d6a9:	mov    QWORD PTR [rsp+0x8],r8
  40d6ae:	call   40b830 <_start@@Base+0x4ed0>
  40d6b3:	mov    r8,QWORD PTR [rsp+0x8]
  40d6b8:	cmp    r8,rax
  40d6bb:	je     40d7e0 <_start@@Base+0x6e80>
  40d6c1:	mov    DWORD PTR [rsp+0x28],0x0
  40d6c9:	mov    QWORD PTR [rsp+0x30],0x0
  40d6d2:	mov    DWORD PTR [rsp+0x2c],0x0
  40d6da:	cmp    rbx,rax
  40d6dd:	je     40d8e0 <_start@@Base+0x6f80>
  40d6e3:	lea    rcx,[rsp+0x2c]
  40d6e8:	lea    r8,[rsp+0x30]
  40d6ed:	mov    rdx,rbx
  40d6f0:	mov    rsi,rax
  40d6f3:	mov    rdi,rbp
  40d6f6:	mov    QWORD PTR [rsp+0x8],rax
  40d6fb:	call   41d880 <flatcc_json_parser_integer@@Base>
  40d700:	mov    r10,QWORD PTR [rsp+0x8]
  40d705:	mov    r14,rax
  40d708:	cmp    r10,rax
  40d70b:	jne    40d900 <_start@@Base+0x6fa0>
  40d711:	lea    r8,[rsp+0x28]
  40d716:	lea    rcx,[rip+0x2bb63]        # 439280 <__data_start@@Base+0x1c0>
  40d71d:	mov    rdx,rbx
  40d720:	mov    rsi,r14
  40d723:	mov    rdi,rbp
  40d726:	call   40aff0 <_start@@Base+0x4690>
  40d72b:	cmp    rax,r14
  40d72e:	je     40d8d8 <_start@@Base+0x6f78>
  40d734:	cmp    rbx,rax
  40d737:	je     40d8d8 <_start@@Base+0x6f78>
  40d73d:	mov    edx,DWORD PTR [rsp+0x28]
  40d741:	mov    r14,rax
  40d744:	nop    DWORD PTR [rax+0x0]
  40d748:	test   edx,edx
  40d74a:	jne    40d752 <_start@@Base+0x6df2>
  40d74c:	test   BYTE PTR [rbp+0x10],0x2
  40d750:	je     40d789 <_start@@Base+0x6e29>
  40d752:	mov    rdi,QWORD PTR [rbp+0x0]
  40d756:	xor    esi,esi
  40d758:	mov    ecx,0x4
  40d75d:	mov    edx,0x4
  40d762:	call   419250 <flatcc_builder_table_add@@Base>
  40d767:	test   rax,rax
  40d76a:	je     40d7b8 <_start@@Base+0x6e58>
  40d76c:	mov    edx,DWORD PTR [rsp+0x28]
  40d770:	mov    DWORD PTR [rax],edx
  40d772:	jmp    40d789 <_start@@Base+0x6e29>
  40d774:	nop    DWORD PTR [rax+0x0]
  40d778:	mov    rsi,r14
  40d77b:	mov    rdx,rbx
  40d77e:	mov    rdi,rbp
  40d781:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40d786:	mov    r14,rax
  40d789:	mov    rsi,r14
  40d78c:	mov    rcx,r13
  40d78f:	mov    rdx,rbx
  40d792:	mov    rdi,rbp
  40d795:	call   40b8c0 <_start@@Base+0x4f60>
  40d79a:	mov    r10d,DWORD PTR [rsp+0x24]
  40d79f:	mov    r14,rax
  40d7a2:	test   r10d,r10d
  40d7a5:	jne    40d5e0 <_start@@Base+0x6c80>
  40d7ab:	mov    r9d,DWORD PTR [rbp+0x1c]
  40d7af:	test   r9d,r9d
  40d7b2:	je     40d8a0 <_start@@Base+0x6f40>
  40d7b8:	mov    rdx,rbx
  40d7bb:	mov    ecx,0x21
  40d7c0:	mov    rsi,r14
  40d7c3:	mov    rdi,rbp
  40d7c6:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40d7cb:	mov    edx,DWORD PTR [rbp+0x1c]
  40d7ce:	mov    r15,rax
  40d7d1:	test   edx,edx
  40d7d3:	je     40d2a7 <_start@@Base+0x6947>
  40d7d9:	jmp    40d250 <_start@@Base+0x68f0>
  40d7de:	xchg   ax,ax
  40d7e0:	mov    rdx,rbx
  40d7e3:	mov    rsi,r8
  40d7e6:	mov    rdi,rbp
  40d7e9:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40d7ee:	mov    r14,rax
  40d7f1:	jmp    40d789 <_start@@Base+0x6e29>
  40d7f3:	nop    DWORD PTR [rax+rax*1+0x0]
  40d7f8:	movbe  rax,QWORD PTR [r14]
  40d7fd:	jmp    40d60d <_start@@Base+0x6cad>
  40d802:	nop    WORD PTR [rax+rax*1+0x0]
  40d808:	mov    rsi,r14
  40d80b:	mov    ecx,0x5
  40d810:	mov    rdx,rbx
  40d813:	mov    rdi,rbp
  40d816:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40d81b:	mov    r14,rax
  40d81e:	jmp    40d5f2 <_start@@Base+0x6c92>
  40d823:	nop    DWORD PTR [rax+rax*1+0x0]
  40d828:	movbe  rax,QWORD PTR [r14+0x8]
  40d82e:	jmp    40d635 <_start@@Base+0x6cd5>
  40d833:	nop    DWORD PTR [rax+rax*1+0x0]
  40d838:	movbe  rax,QWORD PTR [r14+0x10]
  40d83e:	jmp    40d671 <_start@@Base+0x6d11>
  40d843:	nop    DWORD PTR [rax+rax*1+0x0]
  40d848:	mov    r15,rbx
  40d84b:	jmp    40d45c <_start@@Base+0x6afc>
  40d850:	mov    esi,DWORD PTR [rsp+0x2c]
  40d854:	test   esi,esi
  40d856:	jne    40d948 <_start@@Base+0x6fe8>
  40d85c:	mov    rcx,QWORD PTR [rsp+0x30]
  40d861:	mov    edx,ecx
  40d863:	cmp    rcx,0xffff
  40d86a:	jbe    40d495 <_start@@Base+0x6b35>
  40d870:	mov    ecx,0x7
  40d875:	mov    rdx,rbx
  40d878:	mov    rsi,rax
  40d87b:	mov    rdi,rbp
  40d87e:	mov    QWORD PTR [rsp+0x10],r10
  40d883:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40d888:	mov    r10,QWORD PTR [rsp+0x10]
  40d88d:	cmp    r10,rax
  40d890:	jne    40d490 <_start@@Base+0x6b30>
  40d896:	mov    r15,r10
  40d899:	jmp    40d45c <_start@@Base+0x6afc>
  40d89e:	xchg   ax,ax
  40d8a0:	mov    rdi,QWORD PTR [rbp+0x0]
  40d8a4:	mov    r15,r14
  40d8a7:	call   418350 <flatcc_builder_end_table@@Base>
  40d8ac:	mov    DWORD PTR [r12],eax
  40d8b0:	test   eax,eax
  40d8b2:	jne    40d2a0 <_start@@Base+0x6940>
  40d8b8:	jmp    40d7b8 <_start@@Base+0x6e58>
  40d8bd:	mov    ecx,0x21
  40d8c2:	mov    rdx,rbx
  40d8c5:	mov    rsi,rax
  40d8c8:	mov    rdi,rbp
  40d8cb:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40d8d0:	mov    r15,rax
  40d8d3:	jmp    40d4ce <_start@@Base+0x6b6e>
  40d8d8:	mov    r14,rax
  40d8db:	jmp    40d7b8 <_start@@Base+0x6e58>
  40d8e0:	mov    r14,rbx
  40d8e3:	jmp    40d711 <_start@@Base+0x6db1>
  40d8e8:	nop    DWORD PTR [rax+rax*1+0x0]
  40d8f0:	mov    r15,r14
  40d8f3:	jmp    40d4e8 <_start@@Base+0x6b88>
  40d8f8:	nop    DWORD PTR [rax+rax*1+0x0]
  40d900:	mov    r11d,DWORD PTR [rsp+0x2c]
  40d905:	mov    rax,QWORD PTR [rsp+0x30]
  40d90a:	test   r11d,r11d
  40d90d:	je     40d930 <_start@@Base+0x6fd0>
  40d90f:	mov    edx,0x80000000
  40d914:	mov    ecx,0x8
  40d919:	cmp    rax,rdx
  40d91c:	ja     40d96f <_start@@Base+0x700f>
  40d91e:	mov    edx,eax
  40d920:	neg    edx
  40d922:	mov    DWORD PTR [rsp+0x28],edx
  40d926:	jmp    40d748 <_start@@Base+0x6de8>
  40d92b:	nop    DWORD PTR [rax+rax*1+0x0]
  40d930:	cmp    rax,0x7fffffff
  40d936:	ja     40d965 <_start@@Base+0x7005>
  40d938:	mov    edx,eax
  40d93a:	mov    DWORD PTR [rsp+0x28],eax
  40d93e:	jmp    40d748 <_start@@Base+0x6de8>
  40d943:	nop    DWORD PTR [rax+rax*1+0x0]
  40d948:	mov    ecx,0x8
  40d94d:	mov    rdx,rbx
  40d950:	mov    rsi,rax
  40d953:	mov    rdi,rbp
  40d956:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40d95b:	mov    r10,QWORD PTR [rsp+0x10]
  40d960:	jmp    40d88d <_start@@Base+0x6f2d>
  40d965:	mov    QWORD PTR [rsp+0x8],r10
  40d96a:	mov    ecx,0x7
  40d96f:	mov    rsi,r14
  40d972:	mov    rdx,rbx
  40d975:	mov    rdi,rbp
  40d978:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40d97d:	mov    r10,QWORD PTR [rsp+0x8]
  40d982:	mov    r14,rax
  40d985:	cmp    r10,rax
  40d988:	je     40d711 <_start@@Base+0x6db1>
  40d98e:	mov    edx,DWORD PTR [rsp+0x28]
  40d992:	jmp    40d748 <_start@@Base+0x6de8>
  40d997:	call   4061a0 <__stack_chk_fail@plt>
  40d99c:	nop    DWORD PTR [rax+0x0]
  40d9a0:	push   r13
  40d9a2:	mov    r13,rcx
  40d9a5:	push   r12
  40d9a7:	mov    r12,rdi
  40d9aa:	push   rbp
  40d9ab:	mov    rbp,rdx
  40d9ae:	push   rbx
  40d9af:	mov    rbx,rsi
  40d9b2:	xor    esi,esi
  40d9b4:	sub    rsp,0x8
  40d9b8:	mov    DWORD PTR [rcx],0x0
  40d9be:	mov    rdi,QWORD PTR [rdi]
  40d9c1:	call   4179d0 <flatcc_builder_start_table@@Base>
  40d9c6:	test   eax,eax
  40d9c8:	je     40d9f0 <_start@@Base+0x7090>
  40d9ca:	add    rsp,0x8
  40d9ce:	mov    rsi,rbx
  40d9d1:	pop    rbx
  40d9d2:	mov    rdx,rbp
  40d9d5:	pop    rbp
  40d9d6:	mov    rdi,r12
  40d9d9:	pop    r12
  40d9db:	mov    ecx,0x21
  40d9e0:	pop    r13
  40d9e2:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  40d9e7:	nop    WORD PTR [rax+rax*1+0x0]
  40d9f0:	cmp    rbx,rbp
  40d9f3:	je     40d9fa <_start@@Base+0x709a>
  40d9f5:	cmp    BYTE PTR [rbx],0x7b
  40d9f8:	je     40da40 <_start@@Base+0x70e0>
  40d9fa:	mov    ecx,0x15
  40d9ff:	nop
  40da00:	mov    rsi,rbx
  40da03:	mov    rdx,rbp
  40da06:	mov    rdi,r12
  40da09:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40da0e:	mov    rbx,rax
  40da11:	mov    eax,DWORD PTR [r12+0x1c]
  40da16:	test   eax,eax
  40da18:	jne    40d9ca <_start@@Base+0x706a>
  40da1a:	mov    rdi,QWORD PTR [r12]
  40da1e:	call   418350 <flatcc_builder_end_table@@Base>
  40da23:	mov    DWORD PTR [r13+0x0],eax
  40da27:	test   eax,eax
  40da29:	je     40d9ca <_start@@Base+0x706a>
  40da2b:	add    rsp,0x8
  40da2f:	mov    rax,rbx
  40da32:	pop    rbx
  40da33:	pop    rbp
  40da34:	pop    r12
  40da36:	pop    r13
  40da38:	ret    
  40da39:	nop    DWORD PTR [rax+0x0]
  40da40:	lea    rsi,[rbx+0x1]
  40da44:	mov    rax,rbp
  40da47:	sub    rax,rsi
  40da4a:	cmp    rax,0x1
  40da4e:	jle    40da5c <_start@@Base+0x70fc>
  40da50:	cmp    BYTE PTR [rbx+0x1],0x20
  40da54:	jg     40da6a <_start@@Base+0x710a>
  40da56:	je     40dbde <_start@@Base+0x727e>
  40da5c:	mov    rdx,rbp
  40da5f:	mov    rdi,r12
  40da62:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40da67:	mov    rsi,rax
  40da6a:	cmp    rbp,rsi
  40da6d:	je     40da79 <_start@@Base+0x7119>
  40da6f:	nop
  40da70:	cmp    BYTE PTR [rsi],0x7d
  40da73:	je     40dbc8 <_start@@Base+0x7268>
  40da79:	cmp    rbp,rsi
  40da7c:	je     40da86 <_start@@Base+0x7126>
  40da7e:	cmp    BYTE PTR [rsi],0x22
  40da81:	jne    40dae0 <_start@@Base+0x7180>
  40da83:	inc    rsi
  40da86:	mov    rdx,rbp
  40da89:	mov    rdi,r12
  40da8c:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40da91:	mov    rbx,rax
  40da94:	mov    rax,rbp
  40da97:	sub    rax,rbx
  40da9a:	cmp    rax,0x1
  40da9e:	jle    40daab <_start@@Base+0x714b>
  40daa0:	cmp    BYTE PTR [rbx],0x20
  40daa3:	jg     40dabc <_start@@Base+0x715c>
  40daa5:	je     40db30 <_start@@Base+0x71d0>
  40daab:	mov    rsi,rbx
  40daae:	mov    rdx,rbp
  40dab1:	mov    rdi,r12
  40dab4:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40dab9:	mov    rbx,rax
  40dabc:	cmp    rbp,rbx
  40dabf:	je     40da11 <_start@@Base+0x70b1>
  40dac5:	movzx  eax,BYTE PTR [rbx]
  40dac8:	cmp    al,0x2c
  40daca:	je     40db48 <_start@@Base+0x71e8>
  40dacc:	cmp    al,0x7d
  40dace:	je     40daf8 <_start@@Base+0x7198>
  40dad0:	mov    ecx,0xa
  40dad5:	jmp    40da00 <_start@@Base+0x70a0>
  40dada:	nop    WORD PTR [rax+rax*1+0x0]
  40dae0:	mov    ecx,0x5
  40dae5:	mov    rdx,rbp
  40dae8:	mov    rdi,r12
  40daeb:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40daf0:	mov    rsi,rax
  40daf3:	jmp    40da86 <_start@@Base+0x7126>
  40daf5:	nop    DWORD PTR [rax]
  40daf8:	lea    rsi,[rbx+0x1]
  40dafc:	mov    rax,rbp
  40daff:	sub    rax,rsi
  40db02:	cmp    rax,0x1
  40db06:	jle    40db18 <_start@@Base+0x71b8>
  40db08:	cmp    BYTE PTR [rbx+0x1],0x20
  40db0c:	jg     40db98 <_start@@Base+0x7238>
  40db12:	je     40dba0 <_start@@Base+0x7240>
  40db18:	mov    rdx,rbp
  40db1b:	mov    rdi,r12
  40db1e:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40db23:	mov    rbx,rax
  40db26:	jmp    40da11 <_start@@Base+0x70b1>
  40db2b:	nop    DWORD PTR [rax+rax*1+0x0]
  40db30:	cmp    BYTE PTR [rbx+0x1],0x20
  40db34:	jle    40daab <_start@@Base+0x714b>
  40db3a:	inc    rbx
  40db3d:	jmp    40dabc <_start@@Base+0x715c>
  40db42:	nop    WORD PTR [rax+rax*1+0x0]
  40db48:	lea    rsi,[rbx+0x1]
  40db4c:	mov    rax,rbp
  40db4f:	sub    rax,rsi
  40db52:	cmp    rax,0x1
  40db56:	jle    40db60 <_start@@Base+0x7200>
  40db58:	cmp    BYTE PTR [rbx+0x1],0x20
  40db5c:	jg     40db6e <_start@@Base+0x720e>
  40db5e:	je     40dbb8 <_start@@Base+0x7258>
  40db60:	mov    rdx,rbp
  40db63:	mov    rdi,r12
  40db66:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40db6b:	mov    rsi,rax
  40db6e:	cmp    rbp,rsi
  40db71:	jne    40da70 <_start@@Base+0x7110>
  40db77:	mov    ecx,0xa
  40db7c:	mov    rdx,rbp
  40db7f:	mov    rsi,rbp
  40db82:	mov    rdi,r12
  40db85:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40db8a:	mov    rbx,rax
  40db8d:	jmp    40da11 <_start@@Base+0x70b1>
  40db92:	nop    WORD PTR [rax+rax*1+0x0]
  40db98:	mov    rbx,rsi
  40db9b:	jmp    40da11 <_start@@Base+0x70b1>
  40dba0:	cmp    BYTE PTR [rbx+0x2],0x20
  40dba4:	jle    40db18 <_start@@Base+0x71b8>
  40dbaa:	add    rbx,0x2
  40dbae:	jmp    40da11 <_start@@Base+0x70b1>
  40dbb3:	nop    DWORD PTR [rax+rax*1+0x0]
  40dbb8:	cmp    BYTE PTR [rbx+0x2],0x20
  40dbbc:	jle    40db60 <_start@@Base+0x7200>
  40dbbe:	lea    rsi,[rbx+0x2]
  40dbc2:	jmp    40db6e <_start@@Base+0x720e>
  40dbc4:	nop    DWORD PTR [rax+0x0]
  40dbc8:	inc    rsi
  40dbcb:	mov    rdx,rbp
  40dbce:	mov    rdi,r12
  40dbd1:	call   407a60 <_start@@Base+0x1100>
  40dbd6:	mov    rbx,rax
  40dbd9:	jmp    40da11 <_start@@Base+0x70b1>
  40dbde:	cmp    BYTE PTR [rbx+0x2],0x20
  40dbe2:	jle    40da5c <_start@@Base+0x70fc>
  40dbe8:	lea    rsi,[rbx+0x2]
  40dbec:	jmp    40da6a <_start@@Base+0x710a>
  40dbf1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40dbfc:	nop    DWORD PTR [rax+0x0]
  40dc00:	endbr64 
  40dc04:	push   r15
  40dc06:	mov    r15,rdi
  40dc09:	push   r14
  40dc0b:	mov    r14,rsi
  40dc0e:	mov    esi,0x24
  40dc13:	push   r13
  40dc15:	push   r12
  40dc17:	push   rbp
  40dc18:	push   rbx
  40dc19:	mov    rbx,rdx
  40dc1c:	sub    rsp,0x58
  40dc20:	mov    QWORD PTR [rsp+0x10],rcx
  40dc25:	mov    rdi,QWORD PTR fs:0x28
  40dc2e:	mov    QWORD PTR [rsp+0x48],rdi
  40dc33:	xor    edi,edi
  40dc35:	mov    DWORD PTR [rcx],0x0
  40dc3b:	mov    rdi,QWORD PTR [r15]
  40dc3e:	call   4179d0 <flatcc_builder_start_table@@Base>
  40dc43:	test   eax,eax
  40dc45:	je     40dc88 <_start@@Base+0x7328>
  40dc47:	mov    ecx,0x21
  40dc4c:	mov    rdx,rbx
  40dc4f:	mov    rsi,r14
  40dc52:	mov    rdi,r15
  40dc55:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40dc5a:	mov    rbp,rax
  40dc5d:	mov    rdi,QWORD PTR [rsp+0x48]
  40dc62:	xor    rdi,QWORD PTR fs:0x28
  40dc6b:	mov    rax,rbp
  40dc6e:	jne    41202c <_start@@Base+0xb6cc>
  40dc74:	add    rsp,0x58
  40dc78:	pop    rbx
  40dc79:	pop    rbp
  40dc7a:	pop    r12
  40dc7c:	pop    r13
  40dc7e:	pop    r14
  40dc80:	pop    r15
  40dc82:	ret    
  40dc83:	nop    DWORD PTR [rax+rax*1+0x0]
  40dc88:	lea    r8,[rsp+0x38]
  40dc8d:	mov    ecx,0x1
  40dc92:	mov    rdx,rbx
  40dc95:	mov    rsi,r14
  40dc98:	mov    rdi,r15
  40dc9b:	call   41ebe0 <flatcc_json_parser_prepare_unions@@Base>
  40dca0:	cmp    rax,rbx
  40dca3:	je     40dc47 <_start@@Base+0x72e7>
  40dca5:	lea    r13,[rsp+0x24]
  40dcaa:	mov    rsi,r14
  40dcad:	mov    rcx,r13
  40dcb0:	mov    rdx,rbx
  40dcb3:	mov    rdi,r15
  40dcb6:	call   40a4b0 <_start@@Base+0x3b50>
  40dcbb:	mov    esi,DWORD PTR [rsp+0x24]
  40dcbf:	mov    r14,rax
  40dcc2:	test   esi,esi
  40dcc4:	je     40e413 <_start@@Base+0x7ab3>
  40dcca:	mov    rax,r13
  40dccd:	mov    r13,r14
  40dcd0:	mov    r14,rax
  40dcd3:	nop    DWORD PTR [rax+rax*1+0x0]
  40dcd8:	cmp    rbx,r13
  40dcdb:	je     40e0f8 <_start@@Base+0x7798>
  40dce1:	cmp    BYTE PTR [r13+0x0],0x22
  40dce6:	jne    40df60 <_start@@Base+0x7600>
  40dcec:	inc    r13
  40dcef:	mov    r8,rbx
  40dcf2:	sub    r8,r13
  40dcf5:	cmp    r8,0x7
  40dcf9:	ja     40df50 <_start@@Base+0x75f0>
  40dcff:	mov    rsi,rbx
  40dd02:	mov    rdi,r13
  40dd05:	call   406a50 <_start@@Base+0xf0>
  40dd0a:	mov    rbp,rax
  40dd0d:	movabs rax,0x7465737461727260
  40dd17:	cmp    rbp,rax
  40dd1a:	ja     40de58 <_start@@Base+0x74f8>
  40dd20:	movabs rax,0x6e616d64ffffffff
  40dd2a:	cmp    rbp,rax
  40dd2d:	ja     40e040 <_start@@Base+0x76e0>
  40dd33:	movabs rax,0x666c6577ffffffff
  40dd3d:	cmp    rbp,rax
  40dd40:	ja     40e100 <_start@@Base+0x77a0>
  40dd46:	and    rbp,0xffffffffff000000
  40dd4d:	movabs rax,0x656e656d79000000
  40dd57:	cmp    rbp,rax
  40dd5a:	je     40eb38 <_start@@Base+0x81d8>
  40dd60:	movabs rax,0x636f6c6f72000000
  40dd6a:	cmp    rbp,rax
  40dd6d:	jne    40fa38 <_start@@Base+0x90d8>
  40dd73:	cmp    r8,0x5
  40dd77:	jle    40f400 <_start@@Base+0x8aa0>
  40dd7d:	mov    ecx,0x5
  40dd82:	mov    rdx,rbx
  40dd85:	mov    rsi,r13
  40dd88:	mov    rdi,r15
  40dd8b:	call   40b830 <_start@@Base+0x4ed0>
  40dd90:	mov    rbp,rax
  40dd93:	cmp    r13,rax
  40dd96:	je     40f400 <_start@@Base+0x8aa0>
  40dd9c:	mov    BYTE PTR [rsp+0x30],0x0
  40dda1:	mov    QWORD PTR [rsp+0x40],0x0
  40ddaa:	mov    DWORD PTR [rsp+0x34],0x0
  40ddb2:	cmp    rbx,rax
  40ddb5:	je     410b61 <_start@@Base+0xa201>
  40ddbb:	lea    rcx,[rsp+0x34]
  40ddc0:	lea    r8,[rsp+0x40]
  40ddc5:	mov    rdx,rbx
  40ddc8:	mov    rsi,rax
  40ddcb:	mov    rdi,r15
  40ddce:	call   41d880 <flatcc_json_parser_integer@@Base>
  40ddd3:	mov    r13,rax
  40ddd6:	cmp    rbp,rax
  40ddd9:	jne    410ba0 <_start@@Base+0xa240>
  40dddf:	lea    r8,[rsp+0x30]
  40dde4:	lea    rcx,[rip+0x2b9d5]        # 4397c0 <__data_start@@Base+0x700>
  40ddeb:	mov    rdx,rbx
  40ddee:	mov    rsi,r13
  40ddf1:	mov    rdi,r15
  40ddf4:	call   40a2d0 <_start@@Base+0x3970>
  40ddf9:	cmp    rax,r13
  40ddfc:	je     41088b <_start@@Base+0x9f2b>
  40de02:	cmp    rbx,rax
  40de05:	je     41088b <_start@@Base+0x9f2b>
  40de0b:	movzx  edx,BYTE PTR [rsp+0x30]
  40de10:	mov    r13,rax
  40de13:	nop    DWORD PTR [rax+rax*1+0x0]
  40de18:	cmp    dl,0x8
  40de1b:	jne    40de28 <_start@@Base+0x74c8>
  40de1d:	test   BYTE PTR [r15+0x10],0x2
  40de22:	je     40e3f0 <_start@@Base+0x7a90>
  40de28:	mov    rdi,QWORD PTR [r15]
  40de2b:	mov    ecx,0x1
  40de30:	mov    edx,0x1
  40de35:	mov    esi,0x6
  40de3a:	call   419250 <flatcc_builder_table_add@@Base>
  40de3f:	test   rax,rax
  40de42:	je     411cc8 <_start@@Base+0xb368>
  40de48:	movzx  edx,BYTE PTR [rsp+0x30]
  40de4d:	mov    BYTE PTR [rax],dl
  40de4f:	jmp    40e3f0 <_start@@Base+0x7a90>
  40de54:	nop    DWORD PTR [rax+0x0]
  40de58:	movabs rax,0x746573746632ffff
  40de62:	cmp    rbp,rax
  40de65:	ja     40df80 <_start@@Base+0x7620>
  40de6b:	sub    rax,0x4c08d9e
  40de71:	cmp    rbp,rax
  40de74:	je     40e470 <_start@@Base+0x7b10>
  40de7a:	movabs rax,0x74657374656d7073
  40de84:	cmp    rbp,rax
  40de87:	ja     40e520 <_start@@Base+0x7bc0>
  40de8d:	sub    rax,0x30bfd0e
  40de93:	cmp    rbp,rax
  40de96:	je     40fbb0 <_start@@Base+0x9250>
  40de9c:	movabs rax,0x74657374626f6f6c
  40dea6:	cmp    rbp,rax
  40dea9:	jne    40f060 <_start@@Base+0x8700>
  40deaf:	cmp    r8,0x8
  40deb3:	jle    410b69 <_start@@Base+0xa209>
  40deb9:	mov    ecx,0x8
  40debe:	mov    rdx,rbx
  40dec1:	mov    rsi,r13
  40dec4:	mov    rdi,r15
  40dec7:	call   40b830 <_start@@Base+0x4ed0>
  40decc:	mov    rbp,rax
  40decf:	cmp    r13,rax
  40ded2:	je     410b69 <_start@@Base+0xa209>
  40ded8:	mov    rax,rbx
  40dedb:	sub    rax,rbp
  40dede:	mov    BYTE PTR [rsp+0x30],0x0
  40dee3:	cmp    rax,0x3
  40dee7:	jle    40f4c0 <_start@@Base+0x8b60>
  40deed:	cmp    DWORD PTR [rbp+0x0],0x65757274
  40def4:	je     411446 <_start@@Base+0xaae6>
  40defa:	cmp    rax,0x4
  40defe:	je     40f4c0 <_start@@Base+0x8b60>
  40df04:	cmp    DWORD PTR [rbp+0x0],0x736c6166
  40df0b:	jne    40f4c0 <_start@@Base+0x8b60>
  40df11:	cmp    BYTE PTR [rbp+0x4],0x65
  40df15:	lea    r13,[rbp+0x5]
  40df19:	jne    40f4c0 <_start@@Base+0x8b60>
  40df1f:	mov    rdi,QWORD PTR [r15]
  40df22:	mov    ecx,0x1
  40df27:	mov    edx,0x1
  40df2c:	mov    esi,0xf
  40df31:	call   419250 <flatcc_builder_table_add@@Base>
  40df36:	test   rax,rax
  40df39:	je     411d96 <_start@@Base+0xb436>
  40df3f:	movzx  edx,BYTE PTR [rsp+0x30]
  40df44:	mov    BYTE PTR [rax],dl
  40df46:	jmp    40e3f0 <_start@@Base+0x7a90>
  40df4b:	nop    DWORD PTR [rax+rax*1+0x0]
  40df50:	movbe  rbp,QWORD PTR [r13+0x0]
  40df56:	jmp    40dd0d <_start@@Base+0x73ad>
  40df5b:	nop    DWORD PTR [rax+rax*1+0x0]
  40df60:	mov    rsi,r13
  40df63:	mov    ecx,0x5
  40df68:	mov    rdx,rbx
  40df6b:	mov    rdi,r15
  40df6e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40df73:	mov    r13,rax
  40df76:	jmp    40dcef <_start@@Base+0x738f>
  40df7b:	nop    DWORD PTR [rax+rax*1+0x0]
  40df80:	movabs rax,0x7465737468617367
  40df8a:	cmp    rbp,rax
  40df8d:	ja     40e230 <_start@@Base+0x78d0>
  40df93:	xor    bp,bp
  40df96:	sub    rax,0x22e7367
  40df9c:	cmp    rbp,rax
  40df9f:	jne    40ea78 <_start@@Base+0x8118>
  40dfa5:	cmp    r8,0x6
  40dfa9:	jle    410188 <_start@@Base+0x9828>
  40dfaf:	mov    ecx,0x6
  40dfb4:	mov    rdx,rbx
  40dfb7:	mov    rsi,r13
  40dfba:	mov    rdi,r15
  40dfbd:	call   40b830 <_start@@Base+0x4ed0>
  40dfc2:	mov    rbp,rax
  40dfc5:	cmp    r13,rax
  40dfc8:	je     410188 <_start@@Base+0x9828>
  40dfce:	lea    r12,[rsp+0x40]
  40dfd3:	mov    rcx,r12
  40dfd6:	mov    rdx,rbx
  40dfd9:	mov    rsi,rax
  40dfdc:	mov    rdi,r15
  40dfdf:	mov    DWORD PTR [rsp+0x40],0x0
  40dfe7:	call   41d740 <flatcc_json_parser_float@@Base>
  40dfec:	mov    r13,rax
  40dfef:	cmp    rax,rbp
  40dff2:	je     4105ae <_start@@Base+0x9c4e>
  40dff8:	vxorps xmm0,xmm0,xmm0
  40dffc:	vucomiss xmm0,DWORD PTR [rsp+0x40]
  40e002:	jp     40e011 <_start@@Base+0x76b1>
  40e004:	jne    40e011 <_start@@Base+0x76b1>
  40e006:	test   BYTE PTR [r15+0x10],0x2
  40e00b:	je     40e3f0 <_start@@Base+0x7a90>
  40e011:	mov    rdi,QWORD PTR [r15]
  40e014:	mov    ecx,0x4
  40e019:	mov    edx,0x4
  40e01e:	mov    esi,0x1b
  40e023:	call   419250 <flatcc_builder_table_add@@Base>
  40e028:	test   rax,rax
  40e02b:	je     411c48 <_start@@Base+0xb2e8>
  40e031:	vmovss xmm0,DWORD PTR [rsp+0x40]
  40e037:	vmovss DWORD PTR [rax],xmm0
  40e03b:	jmp    40e3f0 <_start@@Base+0x7a90>
  40e040:	movabs rax,0x74657373ffffffff
  40e04a:	cmp    rbp,rax
  40e04d:	ja     40e380 <_start@@Base+0x7a20>
  40e053:	movabs rax,0x706172656e745f6d
  40e05d:	cmp    rbp,rax
  40e060:	ja     40e800 <_start@@Base+0x7ea0>
  40e066:	movabs rax,0xffffffff00000000
  40e070:	and    rbp,rax
  40e073:	movabs rax,0x6e616d6500000000
  40e07d:	cmp    rbp,rax
  40e080:	jne    40f020 <_start@@Base+0x86c0>
  40e086:	cmp    r8,0x4
  40e08a:	jle    410b40 <_start@@Base+0xa1e0>
  40e090:	mov    ecx,0x4
  40e095:	mov    rdx,rbx
  40e098:	mov    rsi,r13
  40e09b:	mov    rdi,r15
  40e09e:	call   40b830 <_start@@Base+0x4ed0>
  40e0a3:	cmp    r13,rax
  40e0a6:	je     410b40 <_start@@Base+0xa1e0>
  40e0ac:	lea    rbp,[rsp+0x28]
  40e0b1:	mov    rcx,rbp
  40e0b4:	mov    rdx,rbx
  40e0b7:	mov    rsi,rax
  40e0ba:	mov    rdi,r15
  40e0bd:	call   41ea20 <flatcc_json_parser_build_string@@Base>
  40e0c2:	mov    r12d,DWORD PTR [rsp+0x28]
  40e0c7:	mov    r13,rax
  40e0ca:	test   r12d,r12d
  40e0cd:	je     411cb8 <_start@@Base+0xb358>
  40e0d3:	mov    rdi,QWORD PTR [r15]
  40e0d6:	mov    esi,0x3
  40e0db:	call   419420 <flatcc_builder_table_add_offset@@Base>
  40e0e0:	test   rax,rax
  40e0e3:	je     411cc0 <_start@@Base+0xb360>
  40e0e9:	mov    edx,DWORD PTR [rsp+0x28]
  40e0ed:	mov    DWORD PTR [rax],edx
  40e0ef:	jmp    40e3f0 <_start@@Base+0x7a90>
  40e0f4:	nop    DWORD PTR [rax+0x0]
  40e0f8:	xor    r8d,r8d
  40e0fb:	jmp    40dcff <_start@@Base+0x739f>
  40e100:	movabs rax,0x686fffffffffffff
  40e10a:	cmp    rbp,rax
  40e10d:	ja     40e9b0 <_start@@Base+0x8050>
  40e113:	movabs rax,0xffffffff00000000
  40e11d:	and    rbp,rax
  40e120:	movabs rax,0x666c657800000000
  40e12a:	cmp    rbp,rax
  40e12d:	jne    40f040 <_start@@Base+0x86e0>
  40e133:	cmp    r8,0x4
  40e137:	jle    4101b8 <_start@@Base+0x9858>
  40e13d:	mov    ecx,0x4
  40e142:	mov    rdx,rbx
  40e145:	mov    rsi,r13
  40e148:	mov    rdi,r15
  40e14b:	call   40b830 <_start@@Base+0x4ed0>
  40e150:	mov    rbp,rax
  40e153:	cmp    r13,rax
  40e156:	je     4101b8 <_start@@Base+0x9858>
  40e15c:	mov    rdi,QWORD PTR [r15]
  40e15f:	mov    ecx,0xffffffff
  40e164:	mov    edx,0x1
  40e169:	mov    esi,0x1
  40e16e:	call   4177b0 <flatcc_builder_start_vector@@Base>
  40e173:	test   eax,eax
  40e175:	jne    411d8e <_start@@Base+0xb42e>
  40e17b:	mov    rcx,r14
  40e17e:	mov    rdx,rbx
  40e181:	mov    rsi,rbp
  40e184:	mov    rdi,r15
  40e187:	call   40b790 <_start@@Base+0x4e30>
  40e18c:	mov    r13,rax
  40e18f:	mov    eax,DWORD PTR [rsp+0x24]
  40e193:	test   eax,eax
  40e195:	je     410de1 <_start@@Base+0xa481>
  40e19b:	lea    rbp,[rsp+0x40]
  40e1a0:	jmp    40e1d1 <_start@@Base+0x7871>
  40e1a2:	nop    WORD PTR [rax+rax*1+0x0]
  40e1a8:	movzx  edx,BYTE PTR [rsp+0x40]
  40e1ad:	mov    rcx,r14
  40e1b0:	mov    BYTE PTR [r12],dl
  40e1b4:	mov    rsi,rax
  40e1b7:	mov    rdx,rbx
  40e1ba:	mov    rdi,r15
  40e1bd:	call   40c2c0 <_start@@Base+0x5960>
  40e1c2:	mov    r13,rax
  40e1c5:	mov    eax,DWORD PTR [rsp+0x24]
  40e1c9:	test   eax,eax
  40e1cb:	je     410de1 <_start@@Base+0xa481>
  40e1d1:	mov    rdi,QWORD PTR [r15]
  40e1d4:	mov    esi,0x1
  40e1d9:	mov    BYTE PTR [rsp+0x40],0x0
  40e1de:	call   417100 <flatcc_builder_extend_vector@@Base>
  40e1e3:	mov    r12,rax
  40e1e6:	test   rax,rax
  40e1e9:	je     410e2c <_start@@Base+0xa4cc>
  40e1ef:	mov    rcx,rbp
  40e1f2:	mov    rdx,rbx
  40e1f5:	mov    rsi,r13
  40e1f8:	mov    rdi,r15
  40e1fb:	call   409440 <_start@@Base+0x2ae0>
  40e200:	cmp    rax,r13
  40e203:	jne    40e1a8 <_start@@Base+0x7848>
  40e205:	mov    r8,rbp
  40e208:	lea    rcx,[rip+0x2b591]        # 4397a0 <__data_start@@Base+0x6e0>
  40e20f:	mov    rdx,rbx
  40e212:	mov    rsi,r13
  40e215:	mov    rdi,r15
  40e218:	call   40ae20 <_start@@Base+0x44c0>
  40e21d:	cmp    rax,r13
  40e220:	je     40e227 <_start@@Base+0x78c7>
  40e222:	cmp    rbx,rax
  40e225:	jne    40e1a8 <_start@@Base+0x7848>
  40e227:	mov    r14,rax
  40e22a:	jmp    40dc47 <_start@@Base+0x72e7>
  40e22f:	nop
  40e230:	movabs rax,0x7465737468617368
  40e23a:	cmp    rbp,rax
  40e23d:	je     40ec68 <_start@@Base+0x8308>
  40e243:	movabs rax,0x766563746f725f6e
  40e24d:	cmp    rbp,rax
  40e250:	ja     40ed40 <_start@@Base+0x83e0>
  40e256:	movabs rax,0x746573746e657374
  40e260:	cmp    rbp,rax
  40e263:	jne    40f250 <_start@@Base+0x88f0>
  40e269:	lea    r8,[r13+0x8]
  40e26d:	mov    rax,rbx
  40e270:	sub    rax,r8
  40e273:	cmp    rax,0x7
  40e277:	ja     410bda <_start@@Base+0xa27a>
  40e27d:	mov    rsi,rbx
  40e280:	mov    rdi,r8
  40e283:	call   406a50 <_start@@Base+0xf0>
  40e288:	movabs rdx,0x6564666c61746275
  40e292:	cmp    rax,rdx
  40e295:	jne    410580 <_start@@Base+0x9c20>
  40e29b:	lea    rbp,[r13+0x10]
  40e29f:	mov    r8,rbx
  40e2a2:	sub    r8,rbp
  40e2a5:	cmp    r8,0x7
  40e2a9:	ja     41076d <_start@@Base+0x9e0d>
  40e2af:	mov    rsi,rbx
  40e2b2:	mov    rdi,rbp
  40e2b5:	call   406a50 <_start@@Base+0xf0>
  40e2ba:	movabs rdx,0xffffffff00000000
  40e2c4:	and    rax,rdx
  40e2c7:	movabs rdx,0x6666657200000000
  40e2d1:	cmp    rax,rdx
  40e2d4:	jne    4111c7 <_start@@Base+0xa867>
  40e2da:	cmp    r8,0x4
  40e2de:	jle    411b03 <_start@@Base+0xb1a3>
  40e2e4:	mov    ecx,0x4
  40e2e9:	mov    rdx,rbx
  40e2ec:	mov    rsi,rbp
  40e2ef:	mov    rdi,r15
  40e2f2:	call   40b830 <_start@@Base+0x4ed0>
  40e2f7:	mov    r13,rax
  40e2fa:	cmp    rbp,rax
  40e2fd:	je     411b03 <_start@@Base+0xb1a3>
  40e303:	mov    rdi,QWORD PTR [r15]
  40e306:	cmp    rbx,rax
  40e309:	je     40e314 <_start@@Base+0x79b4>
  40e30b:	cmp    BYTE PTR [rax],0x5b
  40e30e:	je     411d9e <_start@@Base+0xb43e>
  40e314:	xor    ecx,ecx
  40e316:	xor    edx,edx
  40e318:	xor    esi,esi
  40e31a:	call   416d30 <flatcc_builder_start_buffer@@Base>
  40e31f:	test   eax,eax
  40e321:	jne    411ff8 <_start@@Base+0xb698>
  40e327:	lea    rbp,[rsp+0x28]
  40e32c:	mov    rsi,r13
  40e32f:	mov    rcx,rbp
  40e332:	mov    rdx,rbx
  40e335:	mov    rdi,r15
  40e338:	call   40dc00 <_start@@Base+0x72a0>
  40e33d:	mov    esi,DWORD PTR [rsp+0x28]
  40e341:	mov    r13,rax
  40e344:	test   esi,esi
  40e346:	je     411ff0 <_start@@Base+0xb690>
  40e34c:	mov    rdi,QWORD PTR [r15]
  40e34f:	call   416e10 <flatcc_builder_end_buffer@@Base>
  40e354:	mov    DWORD PTR [rsp+0x28],eax
  40e358:	test   eax,eax
  40e35a:	je     411fe8 <_start@@Base+0xb688>
  40e360:	mov    rdi,QWORD PTR [r15]
  40e363:	mov    esi,0xd
  40e368:	call   419420 <flatcc_builder_table_add_offset@@Base>
  40e36d:	test   rax,rax
  40e370:	je     411fe0 <_start@@Base+0xb680>
  40e376:	mov    edx,DWORD PTR [rsp+0x28]
  40e37a:	mov    DWORD PTR [rax],edx
  40e37c:	jmp    40e3f0 <_start@@Base+0x7a90>
  40e37e:	xchg   ax,ax
  40e380:	mov    r12,rbp
  40e383:	and    r12,0xffffffffff000000
  40e38a:	movabs rax,0x7465737434000000
  40e394:	cmp    r12,rax
  40e397:	je     40eba8 <_start@@Base+0x8248>
  40e39d:	cmp    r8,0x4
  40e3a1:	jle    40fa50 <_start@@Base+0x90f0>
  40e3a7:	mov    ecx,0x4
  40e3ac:	mov    rdx,rbx
  40e3af:	mov    rsi,r13
  40e3b2:	mov    rdi,r15
  40e3b5:	call   40b830 <_start@@Base+0x4ed0>
  40e3ba:	cmp    r13,rax
  40e3bd:	je     40fa50 <_start@@Base+0x90f0>
  40e3c3:	sub    rsp,0x8
  40e3c7:	lea    rcx,[rip+0x60a2]        # 414470 <_start@@Base+0xdb10>
  40e3ce:	push   rcx
  40e3cf:	mov    r8d,0x8
  40e3d5:	mov    rdi,r15
  40e3d8:	mov    r9,QWORD PTR [rsp+0x48]
  40e3dd:	xor    ecx,ecx
  40e3df:	mov    rdx,rbx
  40e3e2:	mov    rsi,rax
  40e3e5:	call   41ecc0 <flatcc_json_parser_union@@Base>
  40e3ea:	pop    rdi
  40e3eb:	mov    r13,rax
  40e3ee:	pop    r8
  40e3f0:	mov    rdx,rbx
  40e3f3:	mov    rsi,r13
  40e3f6:	mov    rcx,r14
  40e3f9:	mov    rdi,r15
  40e3fc:	call   40b8c0 <_start@@Base+0x4f60>
  40e401:	mov    edx,DWORD PTR [rsp+0x24]
  40e405:	mov    r13,rax
  40e408:	test   edx,edx
  40e40a:	jne    40dcd8 <_start@@Base+0x7378>
  40e410:	mov    r14,rax
  40e413:	mov    eax,DWORD PTR [r15+0x1c]
  40e417:	test   eax,eax
  40e419:	jne    40dc47 <_start@@Base+0x72e7>
  40e41f:	mov    rdi,QWORD PTR [r15]
  40e422:	mov    esi,0x3
  40e427:	call   4181e0 <flatcc_builder_check_required_field@@Base>
  40e42c:	test   eax,eax
  40e42e:	je     4113c2 <_start@@Base+0xaa62>
  40e434:	mov    rcx,QWORD PTR [rsp+0x38]
  40e439:	mov    rsi,r14
  40e43c:	mov    rdx,rbx
  40e43f:	mov    rdi,r15
  40e442:	call   41ec60 <flatcc_json_parser_finalize_unions@@Base>
  40e447:	mov    rdi,QWORD PTR [r15]
  40e44a:	mov    rbp,rax
  40e44d:	call   418350 <flatcc_builder_end_table@@Base>
  40e452:	mov    rcx,QWORD PTR [rsp+0x10]
  40e457:	mov    r14,rbp
  40e45a:	mov    DWORD PTR [rcx],eax
  40e45c:	test   eax,eax
  40e45e:	jne    40dc5d <_start@@Base+0x72fd>
  40e464:	jmp    40dc47 <_start@@Base+0x72e7>
  40e469:	nop    DWORD PTR [rax+0x0]
  40e470:	lea    rbp,[r13+0x8]
  40e474:	mov    r8,rbx
  40e477:	sub    r8,rbp
  40e47a:	cmp    r8,0x7
  40e47e:	ja     40fb30 <_start@@Base+0x91d0>
  40e484:	mov    rsi,rbx
  40e487:	mov    rdi,rbp
  40e48a:	call   406a50 <_start@@Base+0xf0>
  40e48f:	movabs rdx,0x796f66737472696d
  40e499:	cmp    rax,rdx
  40e49c:	ja     40ea90 <_start@@Base+0x8130>
  40e4a2:	movabs rdx,0x796f66626f6f6c73
  40e4ac:	cmp    rax,rdx
  40e4af:	je     40f080 <_start@@Base+0x8720>
  40e4b5:	endbr64 
  40e4b9:	movabs rdx,0x796f66736f727465
  40e4c3:	cmp    rax,rdx
  40e4c6:	jne    40f550 <_start@@Base+0x8bf0>
  40e4cc:	lea    rbp,[r13+0x10]
  40e4d0:	mov    rax,rbx
  40e4d3:	sub    rax,rbp
  40e4d6:	cmp    rax,0x7
  40e4da:	ja     410e34 <_start@@Base+0xa4d4>
  40e4e0:	mov    rsi,rbx
  40e4e3:	mov    rdi,rbp
  40e4e6:	call   406a50 <_start@@Base+0xf0>
  40e4eb:	xor    al,al
  40e4ed:	movabs rdx,0x6473747275637400
  40e4f7:	cmp    rax,rdx
  40e4fa:	je     410843 <_start@@Base+0x9ee3>
  40e500:	mov    rdx,rbx
  40e503:	mov    rsi,rbp
  40e506:	mov    rdi,r15
  40e509:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40e50e:	mov    r13,rax
  40e511:	jmp    40e3f0 <_start@@Base+0x7a90>
  40e516:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40e520:	movabs rax,0x7465737465ffffff
  40e52a:	cmp    rbp,rax
  40e52d:	ja     40eea0 <_start@@Base+0x8540>
  40e533:	sub    rax,0x928f8b
  40e539:	cmp    rbp,rax
  40e53c:	jne    40f210 <_start@@Base+0x88b0>
  40e542:	lea    rbp,[r13+0x8]
  40e546:	mov    r8,rbx
  40e549:	sub    r8,rbp
  40e54c:	cmp    r8,0x7
  40e550:	ja     410be5 <_start@@Base+0xa285>
  40e556:	mov    rsi,rbx
  40e559:	mov    rdi,rbp
  40e55c:	call   406a50 <_start@@Base+0xf0>
  40e561:	movabs rdx,0xff00000000000000
  40e56b:	and    rax,rdx
  40e56e:	movabs rdx,0x7900000000000000
  40e578:	cmp    rax,rdx
  40e57b:	jne    410560 <_start@@Base+0x9c00>
  40e581:	cmp    r8,0x1
  40e585:	jle    410778 <_start@@Base+0x9e18>
  40e58b:	mov    ecx,0x1
  40e590:	mov    rdx,rbx
  40e593:	mov    rsi,rbp
  40e596:	mov    rdi,r15
  40e599:	call   40b830 <_start@@Base+0x4ed0>
  40e59e:	mov    r13,rax
  40e5a1:	cmp    rbp,rax
  40e5a4:	je     410778 <_start@@Base+0x9e18>
  40e5aa:	mov    rdi,QWORD PTR [r15]
  40e5ad:	mov    esi,0x3
  40e5b2:	mov    DWORD PTR [rsp+0x28],0x0
  40e5ba:	call   4179d0 <flatcc_builder_start_table@@Base>
  40e5bf:	test   eax,eax
  40e5c1:	jne    410d9e <_start@@Base+0xa43e>
  40e5c7:	lea    rbp,[rsp+0x2c]
  40e5cc:	mov    rcx,rbp
  40e5cf:	mov    rsi,r13
  40e5d2:	mov    rdx,rbx
  40e5d5:	mov    rdi,r15
  40e5d8:	call   40a4b0 <_start@@Base+0x3b50>
  40e5dd:	mov    ecx,DWORD PTR [rsp+0x2c]
  40e5e1:	mov    r13,rax
  40e5e4:	test   ecx,ecx
  40e5e6:	je     4114f4 <_start@@Base+0xab94>
  40e5ec:	movabs r12,0x6963ffffffffffff
  40e5f6:	mov    QWORD PTR [rsp+0x8],r14
  40e5fb:	jmp    40e720 <_start@@Base+0x7dc0>
  40e600:	and    rax,0xffffffffff000000
  40e606:	movabs rdx,0x636f756e74000000
  40e610:	cmp    rax,rdx
  40e613:	jne    4108b0 <_start@@Base+0x9f50>
  40e619:	cmp    r8,0x5
  40e61d:	jle    4108b0 <_start@@Base+0x9f50>
  40e623:	mov    ecx,0x5
  40e628:	mov    rdx,rbx
  40e62b:	mov    rsi,r13
  40e62e:	mov    rdi,r15
  40e631:	call   40b830 <_start@@Base+0x4ed0>
  40e636:	mov    r14,rax
  40e639:	cmp    r13,rax
  40e63c:	je     4108b0 <_start@@Base+0x9f50>
  40e642:	xor    edx,edx
  40e644:	mov    WORD PTR [rsp+0x22],dx
  40e649:	mov    QWORD PTR [rsp+0x40],0x0
  40e652:	mov    DWORD PTR [rsp+0x34],0x0
  40e65a:	cmp    rbx,rax
  40e65d:	je     410d8e <_start@@Base+0xa42e>
  40e663:	lea    rcx,[rsp+0x34]
  40e668:	lea    r8,[rsp+0x40]
  40e66d:	mov    rdx,rbx
  40e670:	mov    rsi,rax
  40e673:	mov    rdi,r15
  40e676:	call   41d880 <flatcc_json_parser_integer@@Base>
  40e67b:	mov    r10,rax
  40e67e:	cmp    r14,rax
  40e681:	jne    411195 <_start@@Base+0xa835>
  40e687:	mov    rsi,r10
  40e68a:	lea    r8,[rsp+0x22]
  40e68f:	lea    rcx,[rip+0x2aa6a]        # 439100 <__data_start@@Base+0x40>
  40e696:	mov    rdx,rbx
  40e699:	mov    rdi,r15
  40e69c:	mov    QWORD PTR [rsp],r10
  40e6a0:	call   40ac40 <_start@@Base+0x42e0>
  40e6a5:	mov    r10,QWORD PTR [rsp]
  40e6a9:	mov    r13,rax
  40e6ac:	cmp    rax,r10
  40e6af:	je     411a5e <_start@@Base+0xb0fe>
  40e6b5:	cmp    rbx,rax
  40e6b8:	je     411a5e <_start@@Base+0xb0fe>
  40e6be:	movzx  eax,WORD PTR [rsp+0x22]
  40e6c3:	test   ax,ax
  40e6c6:	jne    40e6cf <_start@@Base+0x7d6f>
  40e6c8:	test   BYTE PTR [r15+0x10],0x2
  40e6cd:	je     40e700 <_start@@Base+0x7da0>
  40e6cf:	mov    rdi,QWORD PTR [r15]
  40e6d2:	mov    ecx,0x2
  40e6d7:	mov    edx,0x2
  40e6dc:	mov    esi,0x2
  40e6e1:	call   419250 <flatcc_builder_table_add@@Base>
  40e6e6:	test   rax,rax
  40e6e9:	je     411a5e <_start@@Base+0xb0fe>
  40e6ef:	movzx  edx,WORD PTR [rsp+0x22]
  40e6f4:	mov    WORD PTR [rax],dx
  40e6f7:	nop    WORD PTR [rax+rax*1+0x0]
  40e700:	mov    rsi,r13
  40e703:	mov    rcx,rbp
  40e706:	mov    rdx,rbx
  40e709:	mov    rdi,r15
  40e70c:	call   40b8c0 <_start@@Base+0x4f60>
  40e711:	mov    r13,rax
  40e714:	mov    eax,DWORD PTR [rsp+0x2c]
  40e718:	test   eax,eax
  40e71a:	je     4114ef <_start@@Base+0xab8f>
  40e720:	cmp    rbx,r13
  40e723:	je     40e733 <_start@@Base+0x7dd3>
  40e725:	cmp    BYTE PTR [r13+0x0],0x22
  40e72a:	jne    410910 <_start@@Base+0x9fb0>
  40e730:	inc    r13
  40e733:	mov    r8,rbx
  40e736:	sub    r8,r13
  40e739:	cmp    r8,0x7
  40e73d:	ja     4108e0 <_start@@Base+0x9f80>
  40e743:	mov    rsi,rbx
  40e746:	mov    rdi,r13
  40e749:	call   406a50 <_start@@Base+0xf0>
  40e74e:	cmp    rax,r12
  40e751:	jbe    40e600 <_start@@Base+0x7ca0>
  40e757:	movabs rdx,0xffffff0000000000
  40e761:	and    rdx,rax
  40e764:	movabs rdi,0x76616c0000000000
  40e76e:	cmp    rdx,rdi
  40e771:	je     4109b0 <_start@@Base+0xa050>
  40e777:	movabs rcx,0xffff000000000000
  40e781:	and    rax,rcx
  40e784:	movabs rdx,0x6964000000000000
  40e78e:	cmp    rax,rdx
  40e791:	jne    4108b0 <_start@@Base+0x9f50>
  40e797:	cmp    r8,0x2
  40e79b:	jle    4108b0 <_start@@Base+0x9f50>
  40e7a1:	mov    ecx,0x2
  40e7a6:	mov    rdx,rbx
  40e7a9:	mov    rsi,r13
  40e7ac:	mov    rdi,r15
  40e7af:	call   40b830 <_start@@Base+0x4ed0>
  40e7b4:	cmp    r13,rax
  40e7b7:	je     4108b0 <_start@@Base+0x9f50>
  40e7bd:	lea    rcx,[rsp+0x30]
  40e7c2:	mov    rdx,rbx
  40e7c5:	mov    rsi,rax
  40e7c8:	mov    rdi,r15
  40e7cb:	call   41ea20 <flatcc_json_parser_build_string@@Base>
  40e7d0:	mov    r13,rax
  40e7d3:	mov    eax,DWORD PTR [rsp+0x30]
  40e7d7:	test   eax,eax
  40e7d9:	je     411a5e <_start@@Base+0xb0fe>
  40e7df:	mov    rdi,QWORD PTR [r15]
  40e7e2:	xor    esi,esi
  40e7e4:	call   419420 <flatcc_builder_table_add_offset@@Base>
  40e7e9:	test   rax,rax
  40e7ec:	je     411a5e <_start@@Base+0xb0fe>
  40e7f2:	mov    edx,DWORD PTR [rsp+0x30]
  40e7f6:	mov    DWORD PTR [rax],edx
  40e7f8:	jmp    40e700 <_start@@Base+0x7da0>
  40e7fd:	nop    DWORD PTR [rax]
  40e800:	movabs rax,0x706172656e745f6e
  40e80a:	cmp    rbp,rax
  40e80d:	je     40ff98 <_start@@Base+0x9638>
  40e813:	movabs rax,0xffffff0000000000
  40e81d:	and    rbp,rax
  40e820:	movabs rax,0x706f730000000000
  40e82a:	cmp    rbp,rax
  40e82d:	jne    40f270 <_start@@Base+0x8910>
  40e833:	cmp    r8,0x3
  40e837:	jle    410e16 <_start@@Base+0xa4b6>
  40e83d:	mov    ecx,0x3
  40e842:	mov    rdx,rbx
  40e845:	mov    rsi,r13
  40e848:	mov    rdi,r15
  40e84b:	call   40b830 <_start@@Base+0x4ed0>
  40e850:	mov    rbp,rax
  40e853:	cmp    r13,rax
  40e856:	je     410e16 <_start@@Base+0xa4b6>
  40e85c:	mov    rdi,QWORD PTR [r15]
  40e85f:	mov    ecx,0x10
  40e864:	mov    edx,0x20
  40e869:	xor    esi,esi
  40e86b:	call   419250 <flatcc_builder_table_add@@Base>
  40e870:	mov    QWORD PTR [rsp],rax
  40e874:	test   rax,rax
  40e877:	je     411d86 <_start@@Base+0xb426>
  40e87d:	mov    rsi,rbp
  40e880:	lea    rcx,[rsp+0x30]
  40e885:	mov    rdx,rbx
  40e888:	mov    rdi,r15
  40e88b:	call   40a4b0 <_start@@Base+0x3b50>
  40e890:	mov    r8,rax
  40e893:	mov    eax,DWORD PTR [rsp+0x30]
  40e897:	movabs rbp,0x7465737432ffffff
  40e8a1:	mov    r12,r8
  40e8a4:	nop    DWORD PTR [rax+0x0]
  40e8a8:	test   eax,eax
  40e8aa:	je     40e9a4 <_start@@Base+0x8044>
  40e8b0:	cmp    r12,rbx
  40e8b3:	je     40e8c3 <_start@@Base+0x7f63>
  40e8b5:	cmp    BYTE PTR [r12],0x22
  40e8ba:	jne    40f6f0 <_start@@Base+0x8d90>
  40e8c0:	inc    r12
  40e8c3:	mov    rsi,rbx
  40e8c6:	sub    rsi,r12
  40e8c9:	cmp    rsi,0x7
  40e8cd:	jbe    40f638 <_start@@Base+0x8cd8>
  40e8d3:	movbe  rax,QWORD PTR [r12]
  40e8d9:	cmp    rax,rbp
  40e8dc:	ja     40f570 <_start@@Base+0x8c10>
  40e8e2:	and    rax,0xffffffffff000000
  40e8e8:	movabs rdx,0x7465737432000000
  40e8f2:	cmp    rax,rdx
  40e8f5:	je     40f820 <_start@@Base+0x8ec0>
  40e8fb:	movabs rdx,0x7465737431000000
  40e905:	cmp    rax,rdx
  40e908:	jne    40e920 <_start@@Base+0x7fc0>
  40e90a:	cmp    rsi,0x5
  40e90e:	jle    40e920 <_start@@Base+0x7fc0>
  40e910:	cmp    BYTE PTR [r12+0x5],0x22
  40e916:	je     40fe40 <_start@@Base+0x94e0>
  40e91c:	nop    DWORD PTR [rax+0x0]
  40e920:	mov    rdx,rbx
  40e923:	mov    rsi,r12
  40e926:	mov    rdi,r15
  40e929:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40e92e:	mov    r13,rax
  40e931:	mov    rax,rbx
  40e934:	sub    rax,r13
  40e937:	cmp    rax,0x1
  40e93b:	jle    40e94a <_start@@Base+0x7fea>
  40e93d:	cmp    BYTE PTR [r13+0x0],0x20
  40e942:	jg     40e95b <_start@@Base+0x7ffb>
  40e944:	je     40f920 <_start@@Base+0x8fc0>
  40e94a:	mov    rsi,r13
  40e94d:	mov    rdx,rbx
  40e950:	mov    rdi,r15
  40e953:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40e958:	mov    r13,rax
  40e95b:	cmp    rbx,r13
  40e95e:	je     40e3f0 <_start@@Base+0x7a90>
  40e964:	cmp    BYTE PTR [r13+0x0],0x2c
  40e969:	je     40f938 <_start@@Base+0x8fd8>
  40e96f:	mov    DWORD PTR [rsp+0x30],0x0
  40e977:	cmp    BYTE PTR [r13+0x0],0x7d
  40e97c:	je     40f7e8 <_start@@Base+0x8e88>
  40e982:	mov    ecx,0xa
  40e987:	mov    rdx,rbx
  40e98a:	mov    rsi,r13
  40e98d:	mov    rdi,r15
  40e990:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40e995:	mov    r12,rax
  40e998:	mov    eax,DWORD PTR [rsp+0x30]
  40e99c:	test   eax,eax
  40e99e:	jne    40e8b0 <_start@@Base+0x7f50>
  40e9a4:	mov    r13,r12
  40e9a7:	jmp    40e3f0 <_start@@Base+0x7a90>
  40e9ac:	nop    DWORD PTR [rax+0x0]
  40e9b0:	movabs rax,0x696e76656e746f71
  40e9ba:	cmp    rbp,rax
  40e9bd:	ja     40ef58 <_start@@Base+0x85f8>
  40e9c3:	movabs rax,0xffff000000000000
  40e9cd:	and    rbp,rax
  40e9d0:	movabs rax,0x6870000000000000
  40e9da:	cmp    rbp,rax
  40e9dd:	jne    4101d0 <_start@@Base+0x9870>
  40e9e3:	cmp    r8,0x2
  40e9e7:	jle    4112d0 <_start@@Base+0xa970>
  40e9ed:	mov    ecx,0x2
  40e9f2:	mov    rdx,rbx
  40e9f5:	mov    rsi,r13
  40e9f8:	mov    rdi,r15
  40e9fb:	call   40b830 <_start@@Base+0x4ed0>
  40ea00:	mov    rbp,rax
  40ea03:	cmp    r13,rax
  40ea06:	je     4112d0 <_start@@Base+0xa970>
  40ea0c:	lea    r12,[rsp+0x40]
  40ea11:	xor    eax,eax
  40ea13:	mov    rcx,r12
  40ea16:	mov    rdx,rbx
  40ea19:	mov    rsi,rbp
  40ea1c:	mov    rdi,r15
  40ea1f:	mov    WORD PTR [rsp+0x40],ax
  40ea24:	call   409600 <_start@@Base+0x2ca0>
  40ea29:	mov    r13,rax
  40ea2c:	cmp    rax,rbp
  40ea2f:	je     410859 <_start@@Base+0x9ef9>
  40ea35:	cmp    WORD PTR [rsp+0x40],0x64
  40ea3b:	jne    40ea48 <_start@@Base+0x80e8>
  40ea3d:	test   BYTE PTR [r15+0x10],0x2
  40ea42:	je     40e3f0 <_start@@Base+0x7a90>
  40ea48:	mov    rdi,QWORD PTR [r15]
  40ea4b:	mov    ecx,0x2
  40ea50:	mov    edx,0x2
  40ea55:	mov    esi,0x2
  40ea5a:	call   419250 <flatcc_builder_table_add@@Base>
  40ea5f:	test   rax,rax
  40ea62:	je     411f1c <_start@@Base+0xb5bc>
  40ea68:	movzx  edx,WORD PTR [rsp+0x40]
  40ea6d:	mov    WORD PTR [rax],dx
  40ea70:	jmp    40e3f0 <_start@@Base+0x7a90>
  40ea75:	nop    DWORD PTR [rax]
  40ea78:	mov    rsi,r13
  40ea7b:	mov    rdx,rbx
  40ea7e:	mov    rdi,r15
  40ea81:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40ea86:	mov    r13,rax
  40ea89:	jmp    40e3f0 <_start@@Base+0x7a90>
  40ea8e:	xchg   ax,ax
  40ea90:	movabs rdx,0x796f66737472696e
  40ea9a:	cmp    rax,rdx
  40ea9d:	je     40f2e0 <_start@@Base+0x8980>
  40eaa3:	movabs rdx,0x796f667461626c65
  40eaad:	cmp    rax,rdx
  40eab0:	jne    4101f0 <_start@@Base+0x9890>
  40eab6:	lea    rbp,[r13+0x10]
  40eaba:	mov    r8,rbx
  40eabd:	sub    r8,rbp
  40eac0:	cmp    r8,0x7
  40eac4:	ja     41060c <_start@@Base+0x9cac>
  40eaca:	mov    rsi,rbx
  40eacd:	mov    rdi,rbp
  40ead0:	call   406a50 <_start@@Base+0xf0>
  40ead5:	movabs rdx,0xff00000000000000
  40eadf:	and    rax,rdx
  40eae2:	movabs rdx,0x7300000000000000
  40eaec:	cmp    rax,rdx
  40eaef:	jne    410d78 <_start@@Base+0xa418>
  40eaf5:	cmp    r8,0x1
  40eaf9:	jle    41161b <_start@@Base+0xacbb>
  40eaff:	mov    ecx,0x1
  40eb04:	mov    rdx,rbx
  40eb07:	mov    rsi,rbp
  40eb0a:	mov    rdi,r15
  40eb0d:	call   40b830 <_start@@Base+0x4ed0>
  40eb12:	mov    r13,rax
  40eb15:	cmp    rbp,rax
  40eb18:	jne    411670 <_start@@Base+0xad10>
  40eb1e:	mov    rsi,r13
  40eb21:	mov    rdx,rbx
  40eb24:	mov    rdi,r15
  40eb27:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40eb2c:	mov    r13,rax
  40eb2f:	jmp    40e3f0 <_start@@Base+0x7a90>
  40eb34:	nop    DWORD PTR [rax+0x0]
  40eb38:	cmp    r8,0x5
  40eb3c:	jle    40f2b0 <_start@@Base+0x8950>
  40eb42:	mov    ecx,0x5
  40eb47:	mov    rdx,rbx
  40eb4a:	mov    rsi,r13
  40eb4d:	mov    rdi,r15
  40eb50:	call   40b830 <_start@@Base+0x4ed0>
  40eb55:	cmp    r13,rax
  40eb58:	je     40f2b0 <_start@@Base+0x8950>
  40eb5e:	lea    rbp,[rsp+0x28]
  40eb63:	mov    rcx,rbp
  40eb66:	mov    rdx,rbx
  40eb69:	mov    rsi,rax
  40eb6c:	mov    rdi,r15
  40eb6f:	call   40dc00 <_start@@Base+0x72a0>
  40eb74:	mov    ecx,DWORD PTR [rsp+0x28]
  40eb78:	mov    r13,rax
  40eb7b:	test   ecx,ecx
  40eb7d:	je     411c40 <_start@@Base+0xb2e0>
  40eb83:	mov    rdi,QWORD PTR [r15]
  40eb86:	mov    esi,0xc
  40eb8b:	call   419420 <flatcc_builder_table_add_offset@@Base>
  40eb90:	test   rax,rax
  40eb93:	je     411c50 <_start@@Base+0xb2f0>
  40eb99:	mov    edx,DWORD PTR [rsp+0x28]
  40eb9d:	mov    DWORD PTR [rax],edx
  40eb9f:	jmp    40e3f0 <_start@@Base+0x7a90>
  40eba4:	nop    DWORD PTR [rax+0x0]
  40eba8:	cmp    r8,0x5
  40ebac:	jle    40f290 <_start@@Base+0x8930>
  40ebb2:	mov    ecx,0x5
  40ebb7:	mov    rdx,rbx
  40ebba:	mov    rsi,r13
  40ebbd:	mov    rdi,r15
  40ebc0:	call   40b830 <_start@@Base+0x4ed0>
  40ebc5:	mov    rbp,rax
  40ebc8:	cmp    r13,rax
  40ebcb:	je     40f290 <_start@@Base+0x8930>
  40ebd1:	mov    rdi,QWORD PTR [r15]
  40ebd4:	mov    ecx,0x3fffffff
  40ebd9:	mov    edx,0x2
  40ebde:	mov    esi,0x4
  40ebe3:	call   4177b0 <flatcc_builder_start_vector@@Base>
  40ebe8:	test   eax,eax
  40ebea:	jne    411cd0 <_start@@Base+0xb370>
  40ebf0:	mov    rcx,r14
  40ebf3:	mov    rdx,rbx
  40ebf6:	mov    rsi,rbp
  40ebf9:	mov    rdi,r15
  40ebfc:	call   40b790 <_start@@Base+0x4e30>
  40ec01:	mov    r10d,DWORD PTR [rsp+0x24]
  40ec06:	mov    r13,rax
  40ec09:	test   r10d,r10d
  40ec0c:	jne    40ec4b <_start@@Base+0x82eb>
  40ec0e:	jmp    410b09 <_start@@Base+0xa1a9>
  40ec13:	nop    DWORD PTR [rax+rax*1+0x0]
  40ec18:	mov    rsi,r13
  40ec1b:	mov    rcx,rax
  40ec1e:	mov    rdx,rbx
  40ec21:	mov    rdi,r15
  40ec24:	call   40c410 <_start@@Base+0x5ab0>
  40ec29:	mov    rsi,rax
  40ec2c:	mov    rcx,r14
  40ec2f:	mov    rdx,rbx
  40ec32:	mov    rdi,r15
  40ec35:	call   40c2c0 <_start@@Base+0x5960>
  40ec3a:	mov    r9d,DWORD PTR [rsp+0x24]
  40ec3f:	mov    r13,rax
  40ec42:	test   r9d,r9d
  40ec45:	je     410b09 <_start@@Base+0xa1a9>
  40ec4b:	mov    rdi,QWORD PTR [r15]
  40ec4e:	mov    esi,0x1
  40ec53:	call   417100 <flatcc_builder_extend_vector@@Base>
  40ec58:	test   rax,rax
  40ec5b:	jne    40ec18 <_start@@Base+0x82b8>
  40ec5d:	mov    r14,r13
  40ec60:	jmp    40dc47 <_start@@Base+0x72e7>
  40ec65:	nop    DWORD PTR [rax]
  40ec68:	lea    rbp,[r13+0x8]
  40ec6c:	mov    r8,rbx
  40ec6f:	sub    r8,rbp
  40ec72:	cmp    r8,0x7
  40ec76:	ja     40f2d0 <_start@@Base+0x8970>
  40ec7c:	mov    rsi,rbx
  40ec7f:	mov    rdi,rbp
  40ec82:	call   406a50 <_start@@Base+0xf0>
  40ec87:	movabs rdx,0x7336345f666e7630
  40ec91:	cmp    rax,rdx
  40ec94:	ja     410070 <_start@@Base+0x9710>
  40ec9a:	movabs rdx,0x7333325f666e7631
  40eca4:	cmp    rax,rdx
  40eca7:	jne    410520 <_start@@Base+0x9bc0>
  40ecad:	cmp    r8,0x8
  40ecb1:	jle    410690 <_start@@Base+0x9d30>
  40ecb7:	mov    ecx,0x8
  40ecbc:	mov    rdx,rbx
  40ecbf:	mov    rsi,rbp
  40ecc2:	mov    rdi,r15
  40ecc5:	call   40b830 <_start@@Base+0x4ed0>
  40ecca:	mov    r12,rax
  40eccd:	cmp    rbp,rax
  40ecd0:	je     410690 <_start@@Base+0x9d30>
  40ecd6:	lea    rbp,[rsp+0x40]
  40ecdb:	mov    rcx,rbp
  40ecde:	mov    rdx,rbx
  40ece1:	mov    rsi,rax
  40ece4:	mov    rdi,r15
  40ece7:	mov    DWORD PTR [rsp+0x40],0x0
  40ecef:	call   409510 <_start@@Base+0x2bb0>
  40ecf4:	mov    r13,rax
  40ecf7:	cmp    rax,r12
  40ecfa:	je     411ac9 <_start@@Base+0xb169>
  40ed00:	mov    eax,DWORD PTR [rsp+0x40]
  40ed04:	test   eax,eax
  40ed06:	jne    40ed13 <_start@@Base+0x83b3>
  40ed08:	test   BYTE PTR [r15+0x10],0x2
  40ed0d:	je     40e3f0 <_start@@Base+0x7a90>
  40ed13:	mov    rdi,QWORD PTR [r15]
  40ed16:	mov    ecx,0x4
  40ed1b:	mov    edx,0x4
  40ed20:	mov    esi,0x10
  40ed25:	call   419250 <flatcc_builder_table_add@@Base>
  40ed2a:	test   rax,rax
  40ed2d:	je     411fc0 <_start@@Base+0xb660>
  40ed33:	mov    edx,DWORD PTR [rsp+0x40]
  40ed37:	mov    DWORD PTR [rax],edx
  40ed39:	jmp    40e3f0 <_start@@Base+0x7a90>
  40ed3e:	xchg   ax,ax
  40ed40:	movabs rax,0x766563746f725f6f
  40ed4a:	cmp    rbp,rax
  40ed4d:	jne    40f230 <_start@@Base+0x88d0>
  40ed53:	lea    rbp,[r13+0x8]
  40ed57:	mov    r8,rbx
  40ed5a:	sub    r8,rbp
  40ed5d:	cmp    r8,0x7
  40ed61:	ja     410d38 <_start@@Base+0xa3d8>
  40ed67:	mov    rsi,rbx
  40ed6a:	mov    rdi,rbp
  40ed6d:	call   406a50 <_start@@Base+0xf0>
  40ed72:	movabs rdx,0x665f646f75626c65
  40ed7c:	cmp    rax,rdx
  40ed7f:	je     410bf0 <_start@@Base+0xa290>
  40ed85:	xor    al,al
  40ed87:	movabs rdx,0x665f6c6f6e677300
  40ed91:	cmp    rax,rdx
  40ed94:	jne    4105e0 <_start@@Base+0x9c80>
  40ed9a:	cmp    r8,0x7
  40ed9e:	jle    41134e <_start@@Base+0xa9ee>
  40eda4:	mov    ecx,0x7
  40eda9:	mov    rdx,rbx
  40edac:	mov    rsi,rbp
  40edaf:	mov    rdi,r15
  40edb2:	call   40b830 <_start@@Base+0x4ed0>
  40edb7:	mov    r13,rax
  40edba:	cmp    rbp,rax
  40edbd:	je     41134e <_start@@Base+0xa9ee>
  40edc3:	mov    rdi,QWORD PTR [r15]
  40edc6:	mov    ecx,0x1fffffff
  40edcb:	mov    edx,0x8
  40edd0:	mov    esi,0x8
  40edd5:	call   4177b0 <flatcc_builder_start_vector@@Base>
  40edda:	test   eax,eax
  40eddc:	jne    411f66 <_start@@Base+0xb606>
  40ede2:	mov    rsi,r13
  40ede5:	mov    rcx,r14
  40ede8:	mov    rdx,rbx
  40edeb:	mov    rdi,r15
  40edee:	call   40b790 <_start@@Base+0x4e30>
  40edf3:	mov    esi,DWORD PTR [rsp+0x24]
  40edf7:	mov    r13,rax
  40edfa:	test   esi,esi
  40edfc:	je     4119e1 <_start@@Base+0xb081>
  40ee02:	lea    rbp,[rsp+0x40]
  40ee07:	jmp    40ee39 <_start@@Base+0x84d9>
  40ee09:	nop    DWORD PTR [rax+0x0]
  40ee10:	mov    rdx,QWORD PTR [rsp+0x40]
  40ee15:	mov    rcx,r14
  40ee18:	mov    QWORD PTR [r12],rdx
  40ee1c:	mov    rsi,rax
  40ee1f:	mov    rdx,rbx
  40ee22:	mov    rdi,r15
  40ee25:	call   40c2c0 <_start@@Base+0x5960>
  40ee2a:	mov    ecx,DWORD PTR [rsp+0x24]
  40ee2e:	mov    r13,rax
  40ee31:	test   ecx,ecx
  40ee33:	je     4119e1 <_start@@Base+0xb081>
  40ee39:	mov    rdi,QWORD PTR [r15]
  40ee3c:	mov    esi,0x1
  40ee41:	mov    QWORD PTR [rsp+0x40],0x0
  40ee4a:	call   417100 <flatcc_builder_extend_vector@@Base>
  40ee4f:	mov    r12,rax
  40ee52:	test   rax,rax
  40ee55:	je     4119d9 <_start@@Base+0xb079>
  40ee5b:	mov    rcx,rbp
  40ee5e:	mov    rdx,rbx
  40ee61:	mov    rsi,r13
  40ee64:	mov    rdi,r15
  40ee67:	call   408f90 <_start@@Base+0x2630>
  40ee6c:	cmp    rax,r13
  40ee6f:	jne    40ee10 <_start@@Base+0x84b0>
  40ee71:	mov    r8,rbp
  40ee74:	lea    rcx,[rip+0x2a6a5]        # 439520 <__data_start@@Base+0x460>
  40ee7b:	mov    rdx,rbx
  40ee7e:	mov    rsi,r13
  40ee81:	mov    rdi,r15
  40ee84:	call   40b5a0 <_start@@Base+0x4c40>
  40ee89:	cmp    rax,r13
  40ee8c:	je     40ee97 <_start@@Base+0x8537>
  40ee8e:	cmp    rbx,rax
  40ee91:	jne    40ee10 <_start@@Base+0x84b0>
  40ee97:	mov    r14,rax
  40ee9a:	jmp    40dc47 <_start@@Base+0x72e7>
  40ee9f:	nop
  40eea0:	xor    bp,bp
  40eea3:	movabs rax,0x7465737466320000
  40eead:	cmp    rbp,rax
  40eeb0:	je     40f420 <_start@@Base+0x8ac0>
  40eeb6:	cmp    r8,0x5
  40eeba:	jle    410b8a <_start@@Base+0xa22a>
  40eec0:	mov    ecx,0x5
  40eec5:	mov    rdx,rbx
  40eec8:	mov    rsi,r13
  40eecb:	mov    rdi,r15
  40eece:	call   40b830 <_start@@Base+0x4ed0>
  40eed3:	mov    rbp,rax
  40eed6:	cmp    r13,rax
  40eed9:	je     410b8a <_start@@Base+0xa22a>
  40eedf:	lea    r12,[rsp+0x40]
  40eee4:	mov    rcx,r12
  40eee7:	mov    rdx,rbx
  40eeea:	mov    rsi,rax
  40eeed:	mov    rdi,r15
  40eef0:	mov    DWORD PTR [rsp+0x40],0x0
  40eef8:	call   41d740 <flatcc_json_parser_float@@Base>
  40eefd:	mov    r13,rax
  40ef00:	cmp    rax,rbp
  40ef03:	je     4113dd <_start@@Base+0xaa7d>
  40ef09:	vmovss xmm0,DWORD PTR [rsp+0x40]
  40ef0f:	vucomiss xmm0,DWORD PTR [rip+0x1f301]        # 42e218 <_IO_stdin_used@@Base+0x3218>
  40ef17:	jp     40ef26 <_start@@Base+0x85c6>
  40ef19:	jne    40ef26 <_start@@Base+0x85c6>
  40ef1b:	test   BYTE PTR [r15+0x10],0x2
  40ef20:	je     40e3f0 <_start@@Base+0x7a90>
  40ef26:	mov    rdi,QWORD PTR [r15]
  40ef29:	mov    ecx,0x4
  40ef2e:	mov    edx,0x4
  40ef33:	mov    esi,0x19
  40ef38:	call   419250 <flatcc_builder_table_add@@Base>
  40ef3d:	test   rax,rax
  40ef40:	je     411eb2 <_start@@Base+0xb552>
  40ef46:	vmovss xmm0,DWORD PTR [rsp+0x40]
  40ef4c:	vmovss DWORD PTR [rax],xmm0
  40ef50:	jmp    40e3f0 <_start@@Base+0x7a90>
  40ef55:	nop    DWORD PTR [rax]
  40ef58:	movabs rax,0x696e76656e746f72
  40ef62:	cmp    rbp,rax
  40ef65:	je     4103e0 <_start@@Base+0x9a80>
  40ef6b:	movabs rax,0xffffffff00000000
  40ef75:	and    rbp,rax
  40ef78:	movabs rax,0x6d616e6100000000
  40ef82:	cmp    rbp,rax
  40ef85:	jne    410af3 <_start@@Base+0xa193>
  40ef8b:	cmp    r8,0x4
  40ef8f:	jle    41082a <_start@@Base+0x9eca>
  40ef95:	mov    ecx,0x4
  40ef9a:	mov    rdx,rbx
  40ef9d:	mov    rsi,r13
  40efa0:	mov    rdi,r15
  40efa3:	call   40b830 <_start@@Base+0x4ed0>
  40efa8:	mov    rbp,rax
  40efab:	cmp    r13,rax
  40efae:	je     41082a <_start@@Base+0x9eca>
  40efb4:	lea    r12,[rsp+0x40]
  40efb9:	xor    r13d,r13d
  40efbc:	mov    rcx,r12
  40efbf:	mov    rdx,rbx
  40efc2:	mov    rsi,rax
  40efc5:	mov    rdi,r15
  40efc8:	mov    WORD PTR [rsp+0x40],r13w
  40efce:	call   409600 <_start@@Base+0x2ca0>
  40efd3:	mov    r13,rax
  40efd6:	cmp    rax,rbp
  40efd9:	je     411a16 <_start@@Base+0xb0b6>
  40efdf:	cmp    WORD PTR [rsp+0x40],0x96
  40efe6:	jne    40eff3 <_start@@Base+0x8693>
  40efe8:	test   BYTE PTR [r15+0x10],0x2
  40efed:	je     40e3f0 <_start@@Base+0x7a90>
  40eff3:	mov    rdi,QWORD PTR [r15]
  40eff6:	mov    ecx,0x2
  40effb:	mov    edx,0x2
  40f000:	mov    esi,0x1
  40f005:	call   419250 <flatcc_builder_table_add@@Base>
  40f00a:	test   rax,rax
  40f00d:	je     412008 <_start@@Base+0xb6a8>
  40f013:	movzx  edx,WORD PTR [rsp+0x40]
  40f018:	mov    WORD PTR [rax],dx
  40f01b:	jmp    40e3f0 <_start@@Base+0x7a90>
  40f020:	mov    rsi,r13
  40f023:	mov    rdx,rbx
  40f026:	mov    rdi,r15
  40f029:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40f02e:	mov    r13,rax
  40f031:	jmp    40e3f0 <_start@@Base+0x7a90>
  40f036:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f040:	mov    rsi,r13
  40f043:	mov    rdx,rbx
  40f046:	mov    rdi,r15
  40f049:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40f04e:	mov    r13,rax
  40f051:	jmp    40e3f0 <_start@@Base+0x7a90>
  40f056:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f060:	mov    rsi,r13
  40f063:	mov    rdx,rbx
  40f066:	mov    rdi,r15
  40f069:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40f06e:	mov    r13,rax
  40f071:	jmp    40e3f0 <_start@@Base+0x7a90>
  40f076:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f080:	cmp    r8,0x8
  40f084:	jle    40f550 <_start@@Base+0x8bf0>
  40f08a:	mov    ecx,0x8
  40f08f:	mov    rdx,rbx
  40f092:	mov    rsi,rbp
  40f095:	mov    rdi,r15
  40f098:	call   40b830 <_start@@Base+0x4ed0>
  40f09d:	mov    r13,rax
  40f0a0:	cmp    rbp,rax
  40f0a3:	je     40f550 <_start@@Base+0x8bf0>
  40f0a9:	mov    rdi,QWORD PTR [r15]
  40f0ac:	mov    ecx,0xffffffff
  40f0b1:	mov    edx,0x1
  40f0b6:	mov    esi,0x1
  40f0bb:	call   4177b0 <flatcc_builder_start_vector@@Base>
  40f0c0:	test   eax,eax
  40f0c2:	jne    411eda <_start@@Base+0xb57a>
  40f0c8:	mov    rsi,r13
  40f0cb:	mov    rcx,r14
  40f0ce:	mov    rdx,rbx
  40f0d1:	mov    rdi,r15
  40f0d4:	call   40b790 <_start@@Base+0x4e30>
  40f0d9:	mov    r13,rax
  40f0dc:	mov    eax,DWORD PTR [rsp+0x24]
  40f0e0:	test   eax,eax
  40f0e2:	je     4112fc <_start@@Base+0xa99c>
  40f0e8:	lea    rax,[rsp+0x40]
  40f0ed:	mov    QWORD PTR [rsp],rax
  40f0f1:	lea    rax,[rsp+0x34]
  40f0f6:	mov    QWORD PTR [rsp+0x8],rax
  40f0fb:	lea    rax,[rsp+0x30]
  40f100:	mov    QWORD PTR [rsp+0x18],rax
  40f105:	jmp    40f13b <_start@@Base+0x87db>
  40f107:	nop    WORD PTR [rax+rax*1+0x0]
  40f110:	movzx  eax,BYTE PTR [rsp+0x30]
  40f115:	mov    rcx,r14
  40f118:	mov    BYTE PTR [r12],al
  40f11c:	mov    rdx,rbx
  40f11f:	mov    rsi,rbp
  40f122:	mov    rdi,r15
  40f125:	call   40c2c0 <_start@@Base+0x5960>
  40f12a:	mov    r12d,DWORD PTR [rsp+0x24]
  40f12f:	mov    r13,rax
  40f132:	test   r12d,r12d
  40f135:	je     4112fc <_start@@Base+0xa99c>
  40f13b:	mov    rdi,QWORD PTR [r15]
  40f13e:	mov    esi,0x1
  40f143:	mov    BYTE PTR [rsp+0x30],0x0
  40f148:	call   417100 <flatcc_builder_extend_vector@@Base>
  40f14d:	mov    r12,rax
  40f150:	test   rax,rax
  40f153:	je     411331 <_start@@Base+0xa9d1>
  40f159:	mov    rax,rbx
  40f15c:	sub    rax,r13
  40f15f:	cmp    rax,0x3
  40f163:	jle    40f187 <_start@@Base+0x8827>
  40f165:	cmp    DWORD PTR [r13+0x0],0x65757274
  40f16d:	je     410a70 <_start@@Base+0xa110>
  40f173:	cmp    rax,0x4
  40f177:	je     40f187 <_start@@Base+0x8827>
  40f179:	cmp    DWORD PTR [r13+0x0],0x736c6166
  40f181:	je     410a50 <_start@@Base+0xa0f0>
  40f187:	mov    QWORD PTR [rsp+0x40],0x0
  40f190:	mov    DWORD PTR [rsp+0x34],0x0
  40f198:	cmp    rbx,r13
  40f19b:	je     4109a0 <_start@@Base+0xa040>
  40f1a1:	mov    r8,QWORD PTR [rsp]
  40f1a5:	mov    rcx,QWORD PTR [rsp+0x8]
  40f1aa:	mov    rdx,rbx
  40f1ad:	mov    rsi,r13
  40f1b0:	mov    rdi,r15
  40f1b3:	call   41d880 <flatcc_json_parser_integer@@Base>
  40f1b8:	mov    rbp,rax
  40f1bb:	cmp    rax,r13
  40f1be:	jne    410a80 <_start@@Base+0xa120>
  40f1c4:	mov    rbp,r13
  40f1c7:	xor    eax,eax
  40f1c9:	mov    BYTE PTR [rsp+0x30],al
  40f1cd:	cmp    rbp,r13
  40f1d0:	jne    40f110 <_start@@Base+0x87b0>
  40f1d6:	mov    r8,QWORD PTR [rsp+0x18]
  40f1db:	lea    rcx,[rip+0x2a51e]        # 439700 <__data_start@@Base+0x640>
  40f1e2:	mov    rdx,rbx
  40f1e5:	mov    rsi,rbp
  40f1e8:	mov    rdi,r15
  40f1eb:	call   40aa90 <_start@@Base+0x4130>
  40f1f0:	cmp    rax,rbp
  40f1f3:	je     411c73 <_start@@Base+0xb313>
  40f1f9:	cmp    rbx,rax
  40f1fc:	je     411c6b <_start@@Base+0xb30b>
  40f202:	mov    rbp,rax
  40f205:	jmp    40f110 <_start@@Base+0x87b0>
  40f20a:	nop    WORD PTR [rax+rax*1+0x0]
  40f210:	mov    rsi,r13
  40f213:	mov    rdx,rbx
  40f216:	mov    rdi,r15
  40f219:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40f21e:	mov    r13,rax
  40f221:	jmp    40e3f0 <_start@@Base+0x7a90>
  40f226:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f230:	mov    rsi,r13
  40f233:	mov    rdx,rbx
  40f236:	mov    rdi,r15
  40f239:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40f23e:	mov    r13,rax
  40f241:	jmp    40e3f0 <_start@@Base+0x7a90>
  40f246:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f250:	mov    rsi,r13
  40f253:	mov    rdx,rbx
  40f256:	mov    rdi,r15
  40f259:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40f25e:	mov    r13,rax
  40f261:	jmp    40e3f0 <_start@@Base+0x7a90>
  40f266:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f270:	mov    rsi,r13
  40f273:	mov    rdx,rbx
  40f276:	mov    rdi,r15
  40f279:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40f27e:	mov    r13,rax
  40f281:	jmp    40e3f0 <_start@@Base+0x7a90>
  40f286:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f290:	mov    rsi,r13
  40f293:	mov    rdx,rbx
  40f296:	mov    rdi,r15
  40f299:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40f29e:	mov    r13,rax
  40f2a1:	jmp    40e3f0 <_start@@Base+0x7a90>
  40f2a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f2b0:	mov    rsi,r13
  40f2b3:	mov    rdx,rbx
  40f2b6:	mov    rdi,r15
  40f2b9:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40f2be:	mov    r13,rax
  40f2c1:	jmp    40e3f0 <_start@@Base+0x7a90>
  40f2c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f2d0:	movbe  rax,QWORD PTR [r13+0x8]
  40f2d6:	jmp    40ec87 <_start@@Base+0x8327>
  40f2db:	nop    DWORD PTR [rax+rax*1+0x0]
  40f2e0:	lea    rbp,[r13+0x10]
  40f2e4:	mov    r8,rbx
  40f2e7:	sub    r8,rbp
  40f2ea:	cmp    r8,0x7
  40f2ee:	ja     410617 <_start@@Base+0x9cb7>
  40f2f4:	mov    rsi,rbx
  40f2f7:	mov    rdi,rbp
  40f2fa:	call   406a50 <_start@@Base+0xf0>
  40f2ff:	movabs rdx,0xffff000000000000
  40f309:	and    rdx,rax
  40f30c:	movabs rcx,0x6732000000000000
  40f316:	cmp    rdx,rcx
  40f319:	je     411209 <_start@@Base+0xa8a9>
  40f31f:	movabs rdx,0xff00000000000000
  40f329:	and    rax,rdx
  40f32c:	movabs rdx,0x6700000000000000
  40f336:	cmp    rax,rdx
  40f339:	jne    4112e6 <_start@@Base+0xa986>
  40f33f:	cmp    r8,0x1
  40f343:	jle    4114c3 <_start@@Base+0xab63>
  40f349:	mov    ecx,0x1
  40f34e:	mov    rdx,rbx
  40f351:	mov    rsi,rbp
  40f354:	mov    rdi,r15
  40f357:	call   40b830 <_start@@Base+0x4ed0>
  40f35c:	mov    r13,rax
  40f35f:	cmp    rbp,rax
  40f362:	je     4114c3 <_start@@Base+0xab63>
  40f368:	mov    rdi,QWORD PTR [r15]
  40f36b:	call   417830 <flatcc_builder_start_offset_vector@@Base>
  40f370:	test   eax,eax
  40f372:	jne    412079 <_start@@Base+0xb719>
  40f378:	mov    rcx,r14
  40f37b:	mov    rsi,r13
  40f37e:	mov    rdx,rbx
  40f381:	mov    rdi,r15
  40f384:	call   40b790 <_start@@Base+0x4e30>
  40f389:	mov    ecx,DWORD PTR [rsp+0x24]
  40f38d:	mov    r13,rax
  40f390:	test   ecx,ecx
  40f392:	je     411bbe <_start@@Base+0xb25e>
  40f398:	lea    rbp,[rsp+0x28]
  40f39d:	jmp    40f3dc <_start@@Base+0x8a7c>
  40f39f:	nop
  40f3a0:	mov    rdi,QWORD PTR [r15]
  40f3a3:	mov    esi,0x1
  40f3a8:	call   4172e0 <flatcc_builder_extend_offset_vector@@Base>
  40f3ad:	test   rax,rax
  40f3b0:	je     411bf3 <_start@@Base+0xb293>
  40f3b6:	mov    edx,DWORD PTR [rsp+0x28]
  40f3ba:	mov    rsi,r13
  40f3bd:	mov    DWORD PTR [rax],edx
  40f3bf:	mov    rcx,r14
  40f3c2:	mov    rdx,rbx
  40f3c5:	mov    rdi,r15
  40f3c8:	call   40c2c0 <_start@@Base+0x5960>
  40f3cd:	mov    r13,rax
  40f3d0:	mov    eax,DWORD PTR [rsp+0x24]
  40f3d4:	test   eax,eax
  40f3d6:	je     411bbe <_start@@Base+0xb25e>
  40f3dc:	mov    rdx,rbx
  40f3df:	mov    rsi,r13
  40f3e2:	mov    rcx,rbp
  40f3e5:	mov    rdi,r15
  40f3e8:	call   41ea20 <flatcc_json_parser_build_string@@Base>
  40f3ed:	mov    edx,DWORD PTR [rsp+0x28]
  40f3f1:	mov    r13,rax
  40f3f4:	test   edx,edx
  40f3f6:	jne    40f3a0 <_start@@Base+0x8a40>
  40f3f8:	mov    r14,rax
  40f3fb:	jmp    40dc47 <_start@@Base+0x72e7>
  40f400:	mov    rsi,r13
  40f403:	mov    rdx,rbx
  40f406:	mov    rdi,r15
  40f409:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40f40e:	mov    r13,rax
  40f411:	jmp    40e3f0 <_start@@Base+0x7a90>
  40f416:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f420:	cmp    r8,0x6
  40f424:	jle    410638 <_start@@Base+0x9cd8>
  40f42a:	mov    ecx,0x6
  40f42f:	mov    rdx,rbx
  40f432:	mov    rsi,r13
  40f435:	mov    rdi,r15
  40f438:	call   40b830 <_start@@Base+0x4ed0>
  40f43d:	mov    rbp,rax
  40f440:	cmp    r13,rax
  40f443:	je     410638 <_start@@Base+0x9cd8>
  40f449:	lea    r12,[rsp+0x40]
  40f44e:	mov    rcx,r12
  40f451:	mov    rdx,rbx
  40f454:	mov    rsi,rax
  40f457:	mov    rdi,r15
  40f45a:	mov    DWORD PTR [rsp+0x40],0x0
  40f462:	call   41d740 <flatcc_json_parser_float@@Base>
  40f467:	mov    r13,rax
  40f46a:	cmp    rax,rbp
  40f46d:	je     41178c <_start@@Base+0xae2c>
  40f473:	vmovss xmm0,DWORD PTR [rsp+0x40]
  40f479:	vucomiss xmm0,DWORD PTR [rip+0x1ed9b]        # 42e21c <_IO_stdin_used@@Base+0x321c>
  40f481:	jp     40f490 <_start@@Base+0x8b30>
  40f483:	jne    40f490 <_start@@Base+0x8b30>
  40f485:	test   BYTE PTR [r15+0x10],0x2
  40f48a:	je     40e3f0 <_start@@Base+0x7a90>
  40f490:	mov    rdi,QWORD PTR [r15]
  40f493:	mov    ecx,0x4
  40f498:	mov    edx,0x4
  40f49d:	mov    esi,0x1a
  40f4a2:	call   419250 <flatcc_builder_table_add@@Base>
  40f4a7:	test   rax,rax
  40f4aa:	je     412000 <_start@@Base+0xb6a0>
  40f4b0:	vmovss xmm0,DWORD PTR [rsp+0x40]
  40f4b6:	vmovss DWORD PTR [rax],xmm0
  40f4ba:	jmp    40e3f0 <_start@@Base+0x7a90>
  40f4bf:	nop
  40f4c0:	mov    QWORD PTR [rsp+0x40],0x0
  40f4c9:	mov    DWORD PTR [rsp+0x34],0x0
  40f4d1:	mov    r12,rbx
  40f4d4:	cmp    rbx,rbp
  40f4d7:	je     40f502 <_start@@Base+0x8ba2>
  40f4d9:	lea    rcx,[rsp+0x34]
  40f4de:	lea    r8,[rsp+0x40]
  40f4e3:	mov    rdx,rbx
  40f4e6:	mov    rsi,rbp
  40f4e9:	mov    rdi,r15
  40f4ec:	call   41d880 <flatcc_json_parser_integer@@Base>
  40f4f1:	mov    r12,rax
  40f4f4:	cmp    rbp,rax
  40f4f7:	jne    411454 <_start@@Base+0xaaf4>
  40f4fd:	mov    BYTE PTR [rsp+0x30],0x0
  40f502:	lea    r8,[rsp+0x30]
  40f507:	lea    rcx,[rip+0x2a1d2]        # 4396e0 <__data_start@@Base+0x620>
  40f50e:	mov    rdx,rbx
  40f511:	mov    rsi,r12
  40f514:	mov    rdi,r15
  40f517:	call   40aa90 <_start@@Base+0x4130>
  40f51c:	mov    r13,rax
  40f51f:	cmp    r12,rax
  40f522:	je     412051 <_start@@Base+0xb6f1>
  40f528:	cmp    rbx,rax
  40f52b:	je     412049 <_start@@Base+0xb6e9>
  40f531:	movzx  eax,BYTE PTR [rsp+0x30]
  40f536:	cmp    al,0x1
  40f538:	jne    40df1f <_start@@Base+0x75bf>
  40f53e:	test   BYTE PTR [r15+0x10],0x2
  40f543:	je     40e3f0 <_start@@Base+0x7a90>
  40f549:	jmp    40df1f <_start@@Base+0x75bf>
  40f54e:	xchg   ax,ax
  40f550:	mov    rdx,rbx
  40f553:	mov    rsi,rbp
  40f556:	mov    rdi,r15
  40f559:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40f55e:	mov    r13,rax
  40f561:	jmp    40e3f0 <_start@@Base+0x7a90>
  40f566:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f570:	movabs rdi,0x77ffffffffffffff
  40f57a:	cmp    rax,rdi
  40f57d:	ja     40f710 <_start@@Base+0x8db0>
  40f583:	and    rax,0xffffffffff000000
  40f589:	movabs rdx,0x7465737433000000
  40f593:	cmp    rax,rdx
  40f596:	jne    40e920 <_start@@Base+0x7fc0>
  40f59c:	cmp    rsi,0x5
  40f5a0:	jle    40e920 <_start@@Base+0x7fc0>
  40f5a6:	cmp    BYTE PTR [r12+0x5],0x22
  40f5ac:	jne    40e920 <_start@@Base+0x7fc0>
  40f5b2:	lea    rsi,[r12+0x6]
  40f5b7:	mov    rax,rbx
  40f5ba:	sub    rax,rsi
  40f5bd:	cmp    rax,0x1
  40f5c1:	jle    410268 <_start@@Base+0x9908>
  40f5c7:	cmp    BYTE PTR [r12+0x6],0x20
  40f5cd:	jg     40f5f0 <_start@@Base+0x8c90>
  40f5cf:	jne    410268 <_start@@Base+0x9908>
  40f5d5:	cmp    BYTE PTR [r12+0x7],0x20
  40f5db:	jle    410268 <_start@@Base+0x9908>
  40f5e1:	lea    rsi,[r12+0x7]
  40f5e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f5f0:	cmp    rbx,rsi
  40f5f3:	je     40f5fe <_start@@Base+0x8c9e>
  40f5f5:	cmp    BYTE PTR [rsi],0x3a
  40f5f8:	je     4117be <_start@@Base+0xae5e>
  40f5fe:	mov    ecx,0x4
  40f603:	mov    rdx,rbx
  40f606:	mov    rdi,r15
  40f609:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40f60e:	mov    rsi,rax
  40f611:	cmp    rsi,r12
  40f614:	je     40e920 <_start@@Base+0x7fc0>
  40f61a:	mov    rax,QWORD PTR [rsp]
  40f61e:	mov    rdx,rbx
  40f621:	lea    rcx,[rax+0x1a]
  40f625:	mov    rdi,r15
  40f628:	call   40c410 <_start@@Base+0x5ab0>
  40f62d:	mov    r13,rax
  40f630:	jmp    40e931 <_start@@Base+0x7fd1>
  40f635:	nop    DWORD PTR [rax]
  40f638:	lea    rdx,[rip+0x1ba29]        # 42b068 <_IO_stdin_used@@Base+0x68>
  40f63f:	movsxd rax,DWORD PTR [rdx+rsi*4]
  40f643:	add    rax,rdx
  40f646:	notrack jmp rax
  40f649:	nop    DWORD PTR [rax+0x0]
  40f650:	movsx  rcx,BYTE PTR [r12+0x6]
  40f656:	shl    rcx,0x8
  40f65a:	movsx  rdx,BYTE PTR [r12+0x5]
  40f660:	mov    rax,rdx
  40f663:	shl    rax,0x10
  40f667:	or     rcx,rax
  40f66a:	movsx  rdx,BYTE PTR [r12+0x4]
  40f670:	mov    rax,rdx
  40f673:	shl    rax,0x18
  40f677:	or     rax,rcx
  40f67a:	movsx  rdx,BYTE PTR [r12+0x3]
  40f680:	mov    rcx,rdx
  40f683:	shl    rcx,0x20
  40f687:	or     rax,rcx
  40f68a:	movsx  rdx,BYTE PTR [r12+0x2]
  40f690:	mov    rcx,rdx
  40f693:	shl    rcx,0x28
  40f697:	or     rcx,rax
  40f69a:	movsx  rdx,BYTE PTR [r12+0x1]
  40f6a0:	mov    rax,rdx
  40f6a3:	shl    rax,0x30
  40f6a7:	or     rcx,rax
  40f6aa:	movsx  rdx,BYTE PTR [r12]
  40f6af:	mov    rax,rdx
  40f6b2:	shl    rax,0x38
  40f6b6:	or     rax,rcx
  40f6b9:	jmp    40e8d9 <_start@@Base+0x7f79>
  40f6be:	xchg   ax,ax
  40f6c0:	xor    ecx,ecx
  40f6c2:	jmp    40f65a <_start@@Base+0x8cfa>
  40f6c4:	nop    DWORD PTR [rax+0x0]
  40f6c8:	xor    ecx,ecx
  40f6ca:	jmp    40f66a <_start@@Base+0x8d0a>
  40f6cc:	nop    DWORD PTR [rax+0x0]
  40f6d0:	xor    eax,eax
  40f6d2:	jmp    40f67a <_start@@Base+0x8d1a>
  40f6d4:	nop    DWORD PTR [rax+0x0]
  40f6d8:	xor    eax,eax
  40f6da:	jmp    40f68a <_start@@Base+0x8d2a>
  40f6dc:	nop    DWORD PTR [rax+0x0]
  40f6e0:	xor    ecx,ecx
  40f6e2:	jmp    40f69a <_start@@Base+0x8d3a>
  40f6e4:	nop    DWORD PTR [rax+0x0]
  40f6e8:	xor    ecx,ecx
  40f6ea:	jmp    40f6aa <_start@@Base+0x8d4a>
  40f6ec:	nop    DWORD PTR [rax+0x0]
  40f6f0:	mov    rsi,r12
  40f6f3:	mov    ecx,0x5
  40f6f8:	mov    rdx,rbx
  40f6fb:	mov    rdi,r15
  40f6fe:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40f703:	mov    r12,rax
  40f706:	jmp    40e8c3 <_start@@Base+0x7f63>
  40f70b:	nop    DWORD PTR [rax+rax*1+0x0]
  40f710:	movabs rdi,0x78ffffffffffffff
  40f71a:	cmp    rax,rdi
  40f71d:	ja     40f990 <_start@@Base+0x9030>
  40f723:	cmp    rsi,0x1
  40f727:	jle    40e920 <_start@@Base+0x7fc0>
  40f72d:	cmp    BYTE PTR [r12+0x1],0x22
  40f733:	jne    40e920 <_start@@Base+0x7fc0>
  40f739:	lea    rsi,[r12+0x2]
  40f73e:	mov    rax,rbx
  40f741:	sub    rax,rsi
  40f744:	cmp    rax,0x1
  40f748:	jle    410280 <_start@@Base+0x9920>
  40f74e:	cmp    BYTE PTR [r12+0x2],0x20
  40f754:	jg     40f770 <_start@@Base+0x8e10>
  40f756:	jne    410280 <_start@@Base+0x9920>
  40f75c:	cmp    BYTE PTR [r12+0x3],0x20
  40f762:	jle    410280 <_start@@Base+0x9920>
  40f768:	lea    rsi,[r12+0x3]
  40f76d:	nop    DWORD PTR [rax]
  40f770:	cmp    rbx,rsi
  40f773:	je     40f77e <_start@@Base+0x8e1e>
  40f775:	cmp    BYTE PTR [rsi],0x3a
  40f778:	je     4117d4 <_start@@Base+0xae74>
  40f77e:	mov    ecx,0x4
  40f783:	mov    rdx,rbx
  40f786:	mov    rdi,r15
  40f789:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40f78e:	mov    r9,rax
  40f791:	cmp    r9,r12
  40f794:	je     40e920 <_start@@Base+0x7fc0>
  40f79a:	lea    r12,[rsp+0x40]
  40f79f:	mov    rsi,r9
  40f7a2:	mov    rcx,r12
  40f7a5:	mov    rdx,rbx
  40f7a8:	mov    rdi,r15
  40f7ab:	mov    QWORD PTR [rsp+0x8],r9
  40f7b0:	mov    DWORD PTR [rsp+0x40],0x0
  40f7b8:	call   41d740 <flatcc_json_parser_float@@Base>
  40f7bd:	mov    r9,QWORD PTR [rsp+0x8]
  40f7c2:	mov    r13,rax
  40f7c5:	cmp    r9,rax
  40f7c8:	je     410ac1 <_start@@Base+0xa161>
  40f7ce:	vmovss xmm0,DWORD PTR [rsp+0x40]
  40f7d4:	mov    rax,QWORD PTR [rsp]
  40f7d8:	vmovss DWORD PTR [rax],xmm0
  40f7dc:	jmp    40e931 <_start@@Base+0x7fd1>
  40f7e1:	nop    DWORD PTR [rax+0x0]
  40f7e8:	lea    rsi,[r13+0x1]
  40f7ec:	mov    rax,rbx
  40f7ef:	sub    rax,rsi
  40f7f2:	cmp    rax,0x1
  40f7f6:	jle    40f809 <_start@@Base+0x8ea9>
  40f7f8:	cmp    BYTE PTR [r13+0x1],0x20
  40f7fd:	jg     40fb28 <_start@@Base+0x91c8>
  40f803:	je     40fe20 <_start@@Base+0x94c0>
  40f809:	mov    rdx,rbx
  40f80c:	mov    rdi,r15
  40f80f:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40f814:	mov    r12,rax
  40f817:	mov    eax,DWORD PTR [rsp+0x30]
  40f81b:	jmp    40e8a8 <_start@@Base+0x7f48>
  40f820:	cmp    rsi,0x5
  40f824:	jle    40e920 <_start@@Base+0x7fc0>
  40f82a:	cmp    BYTE PTR [r12+0x5],0x22
  40f830:	jne    40e920 <_start@@Base+0x7fc0>
  40f836:	lea    rsi,[r12+0x6]
  40f83b:	mov    rax,rbx
  40f83e:	sub    rax,rsi
  40f841:	cmp    rax,0x1
  40f845:	jle    40f855 <_start@@Base+0x8ef5>
  40f847:	cmp    BYTE PTR [r12+0x6],0x20
  40f84d:	jg     40f863 <_start@@Base+0x8f03>
  40f84f:	je     41067a <_start@@Base+0x9d1a>
  40f855:	mov    rdx,rbx
  40f858:	mov    rdi,r15
  40f85b:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40f860:	mov    rsi,rax
  40f863:	cmp    rbx,rsi
  40f866:	je     40f871 <_start@@Base+0x8f11>
  40f868:	cmp    BYTE PTR [rsi],0x3a
  40f86b:	je     41165a <_start@@Base+0xacfa>
  40f871:	mov    ecx,0x4
  40f876:	mov    rdx,rbx
  40f879:	mov    rdi,r15
  40f87c:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40f881:	mov    r9,rax
  40f884:	cmp    r9,r12
  40f887:	je     40e920 <_start@@Base+0x7fc0>
  40f88d:	mov    BYTE PTR [rsp+0x2c],0x0
  40f892:	mov    QWORD PTR [rsp+0x40],0x0
  40f89b:	mov    DWORD PTR [rsp+0x34],0x0
  40f8a3:	cmp    rbx,r9
  40f8a6:	je     40fe38 <_start@@Base+0x94d8>
  40f8ac:	mov    rsi,r9
  40f8af:	lea    rcx,[rsp+0x34]
  40f8b4:	lea    r8,[rsp+0x40]
  40f8b9:	mov    rdx,rbx
  40f8bc:	mov    rdi,r15
  40f8bf:	mov    QWORD PTR [rsp+0x8],r9
  40f8c4:	call   41d880 <flatcc_json_parser_integer@@Base>
  40f8c9:	mov    r9,QWORD PTR [rsp+0x8]
  40f8ce:	mov    r13,rax
  40f8d1:	cmp    r9,rax
  40f8d4:	jne    410130 <_start@@Base+0x97d0>
  40f8da:	lea    r8,[rsp+0x2c]
  40f8df:	lea    rcx,[rip+0x2993a]        # 439220 <__data_start@@Base+0x160>
  40f8e6:	mov    rdx,rbx
  40f8e9:	mov    rsi,r13
  40f8ec:	mov    rdi,r15
  40f8ef:	call   40a2d0 <_start@@Base+0x3970>
  40f8f4:	cmp    rax,r13
  40f8f7:	je     411b19 <_start@@Base+0xb1b9>
  40f8fd:	cmp    rbx,rax
  40f900:	je     411b19 <_start@@Base+0xb1b9>
  40f906:	movzx  edx,BYTE PTR [rsp+0x2c]
  40f90b:	mov    r13,rax
  40f90e:	xchg   ax,ax
  40f910:	mov    rax,QWORD PTR [rsp]
  40f914:	mov    BYTE PTR [rax+0x18],dl
  40f917:	jmp    40e931 <_start@@Base+0x7fd1>
  40f91c:	nop    DWORD PTR [rax+0x0]
  40f920:	cmp    BYTE PTR [r13+0x1],0x20
  40f925:	jle    40e94a <_start@@Base+0x7fea>
  40f92b:	inc    r13
  40f92e:	jmp    40e95b <_start@@Base+0x7ffb>
  40f933:	nop    DWORD PTR [rax+rax*1+0x0]
  40f938:	lea    r12,[r13+0x1]
  40f93c:	mov    rax,rbx
  40f93f:	sub    rax,r12
  40f942:	cmp    rax,0x1
  40f946:	jle    40f955 <_start@@Base+0x8ff5>
  40f948:	cmp    BYTE PTR [r13+0x1],0x20
  40f94d:	jg     40f966 <_start@@Base+0x9006>
  40f94f:	je     4101a0 <_start@@Base+0x9840>
  40f955:	mov    rsi,r12
  40f958:	mov    rdx,rbx
  40f95b:	mov    rdi,r15
  40f95e:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40f963:	mov    r12,rax
  40f966:	cmp    rbx,r12
  40f969:	je     4102f8 <_start@@Base+0x9998>
  40f96f:	cmp    BYTE PTR [r12],0x7d
  40f974:	je     4102b0 <_start@@Base+0x9950>
  40f97a:	mov    DWORD PTR [rsp+0x30],0x1
  40f982:	jmp    40e8b0 <_start@@Base+0x7f50>
  40f987:	nop    WORD PTR [rax+rax*1+0x0]
  40f990:	movabs rdi,0xff00000000000000
  40f99a:	and    rax,rdi
  40f99d:	movabs rdx,0x7a00000000000000
  40f9a7:	cmp    rax,rdx
  40f9aa:	je     40fb40 <_start@@Base+0x91e0>
  40f9b0:	movabs rdx,0x7900000000000000
  40f9ba:	cmp    rax,rdx
  40f9bd:	jne    40e920 <_start@@Base+0x7fc0>
  40f9c3:	cmp    rsi,0x1
  40f9c7:	jle    40e920 <_start@@Base+0x7fc0>
  40f9cd:	mov    ecx,0x1
  40f9d2:	mov    rdx,rbx
  40f9d5:	mov    rsi,r12
  40f9d8:	mov    rdi,r15
  40f9db:	call   40b830 <_start@@Base+0x4ed0>
  40f9e0:	cmp    rax,r12
  40f9e3:	je     40e920 <_start@@Base+0x7fc0>
  40f9e9:	lea    r12,[rsp+0x40]
  40f9ee:	mov    rcx,r12
  40f9f1:	mov    rdx,rbx
  40f9f4:	mov    rsi,rax
  40f9f7:	mov    rdi,r15
  40f9fa:	mov    DWORD PTR [rsp+0x40],0x0
  40fa02:	mov    QWORD PTR [rsp+0x8],rax
  40fa07:	call   41d740 <flatcc_json_parser_float@@Base>
  40fa0c:	mov    r9,QWORD PTR [rsp+0x8]
  40fa11:	mov    r13,rax
  40fa14:	cmp    r9,rax
  40fa17:	je     41140f <_start@@Base+0xaaaf>
  40fa1d:	vmovss xmm0,DWORD PTR [rsp+0x40]
  40fa23:	mov    rax,QWORD PTR [rsp]
  40fa27:	vmovss DWORD PTR [rax+0x4],xmm0
  40fa2c:	jmp    40e931 <_start@@Base+0x7fd1>
  40fa31:	nop    DWORD PTR [rax+0x0]
  40fa38:	mov    rsi,r13
  40fa3b:	mov    rdx,rbx
  40fa3e:	mov    rdi,r15
  40fa41:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  40fa46:	mov    r13,rax
  40fa49:	jmp    40e3f0 <_start@@Base+0x7a90>
  40fa4e:	xchg   ax,ax
  40fa50:	movabs rax,0x7465737435000000
  40fa5a:	cmp    r12,rax
  40fa5d:	jne    40fee0 <_start@@Base+0x9580>
  40fa63:	mov    rax,rbx
  40fa66:	sub    rax,r13
  40fa69:	cmp    rax,0x5
  40fa6d:	jle    40f290 <_start@@Base+0x8930>
  40fa73:	mov    ecx,0x5
  40fa78:	mov    rdx,rbx
  40fa7b:	mov    rsi,r13
  40fa7e:	mov    rdi,r15
  40fa81:	call   40b830 <_start@@Base+0x4ed0>
  40fa86:	mov    rbp,rax
  40fa89:	cmp    rax,r13
  40fa8c:	je     40f290 <_start@@Base+0x8930>
  40fa92:	mov    rdi,QWORD PTR [r15]
  40fa95:	mov    ecx,0x3fffffff
  40fa9a:	mov    edx,0x2
  40fa9f:	mov    esi,0x4
  40faa4:	call   4177b0 <flatcc_builder_start_vector@@Base>
  40faa9:	test   eax,eax
  40faab:	jne    411cee <_start@@Base+0xb38e>
  40fab1:	mov    rsi,rbp
  40fab4:	mov    rcx,r14
  40fab7:	mov    rdx,rbx
  40faba:	mov    rdi,r15
  40fabd:	call   40b790 <_start@@Base+0x4e30>
  40fac2:	mov    esi,DWORD PTR [rsp+0x24]
  40fac6:	mov    r13,rax
  40fac9:	test   esi,esi
  40facb:	jne    40fb09 <_start@@Base+0x91a9>
  40facd:	jmp    410d43 <_start@@Base+0xa3e3>
  40fad2:	nop    WORD PTR [rax+rax*1+0x0]
  40fad8:	mov    rsi,r13
  40fadb:	mov    rcx,rax
  40fade:	mov    rdx,rbx
  40fae1:	mov    rdi,r15
  40fae4:	call   40c410 <_start@@Base+0x5ab0>
  40fae9:	mov    rsi,rax
  40faec:	mov    rcx,r14
  40faef:	mov    rdx,rbx
  40faf2:	mov    rdi,r15
  40faf5:	call   40c2c0 <_start@@Base+0x5960>
  40fafa:	mov    ecx,DWORD PTR [rsp+0x24]
  40fafe:	mov    r13,rax
  40fb01:	test   ecx,ecx
  40fb03:	je     410d43 <_start@@Base+0xa3e3>
  40fb09:	mov    rdi,QWORD PTR [r15]
  40fb0c:	mov    esi,0x1
  40fb11:	call   417100 <flatcc_builder_extend_vector@@Base>
  40fb16:	test   rax,rax
  40fb19:	jne    40fad8 <_start@@Base+0x9178>
  40fb1b:	mov    r14,r13
  40fb1e:	jmp    40dc47 <_start@@Base+0x72e7>
  40fb23:	nop    DWORD PTR [rax+rax*1+0x0]
  40fb28:	mov    r13,rsi
  40fb2b:	jmp    40e3f0 <_start@@Base+0x7a90>
  40fb30:	movbe  rax,QWORD PTR [r13+0x8]
  40fb36:	jmp    40e48f <_start@@Base+0x7b2f>
  40fb3b:	nop    DWORD PTR [rax+rax*1+0x0]
  40fb40:	cmp    rsi,0x1
  40fb44:	jle    40e920 <_start@@Base+0x7fc0>
  40fb4a:	mov    ecx,0x1
  40fb4f:	mov    rdx,rbx
  40fb52:	mov    rsi,r12
  40fb55:	mov    rdi,r15
  40fb58:	call   40b830 <_start@@Base+0x4ed0>
  40fb5d:	cmp    rax,r12
  40fb60:	je     40e920 <_start@@Base+0x7fc0>
  40fb66:	lea    r12,[rsp+0x40]
  40fb6b:	mov    rcx,r12
  40fb6e:	mov    rdx,rbx
  40fb71:	mov    rsi,rax
  40fb74:	mov    rdi,r15
  40fb77:	mov    DWORD PTR [rsp+0x40],0x0
  40fb7f:	mov    QWORD PTR [rsp+0x8],rax
  40fb84:	call   41d740 <flatcc_json_parser_float@@Base>
  40fb89:	mov    r9,QWORD PTR [rsp+0x8]
  40fb8e:	mov    r13,rax
  40fb91:	cmp    r9,rax
  40fb94:	je     411364 <_start@@Base+0xaa04>
  40fb9a:	vmovss xmm0,DWORD PTR [rsp+0x40]
  40fba0:	mov    rax,QWORD PTR [rsp]
  40fba4:	vmovss DWORD PTR [rax+0x8],xmm0
  40fba9:	jmp    40e931 <_start@@Base+0x7fd1>
  40fbae:	xchg   ax,ax
  40fbb0:	lea    rbp,[r13+0x8]
  40fbb4:	mov    r8,rbx
  40fbb7:	sub    r8,rbp
  40fbba:	cmp    r8,0x7
  40fbbe:	ja     410b56 <_start@@Base+0xa1f6>
  40fbc4:	mov    rsi,rbx
  40fbc7:	mov    rdi,rbp
  40fbca:	call   406a50 <_start@@Base+0xf0>
  40fbcf:	movabs rdx,0xffff000000000000
  40fbd9:	and    rax,rdx
  40fbdc:	movabs rdx,0x3634000000000000
  40fbe6:	cmp    rax,rdx
  40fbe9:	jne    410210 <_start@@Base+0x98b0>
  40fbef:	cmp    r8,0x2
  40fbf3:	jle    410622 <_start@@Base+0x9cc2>
  40fbf9:	mov    ecx,0x2
  40fbfe:	mov    rdx,rbx
  40fc01:	mov    rsi,rbp
  40fc04:	mov    rdi,r15
  40fc07:	call   40b830 <_start@@Base+0x4ed0>
  40fc0c:	mov    r13,rax
  40fc0f:	cmp    rbp,rax
  40fc12:	je     410622 <_start@@Base+0x9cc2>
  40fc18:	mov    rdi,QWORD PTR [r15]
  40fc1b:	mov    esi,0x3
  40fc20:	mov    DWORD PTR [rsp+0x28],0x0
  40fc28:	call   4179d0 <flatcc_builder_start_table@@Base>
  40fc2d:	test   eax,eax
  40fc2f:	jne    40fdda <_start@@Base+0x947a>
  40fc35:	lea    rbp,[rsp+0x34]
  40fc3a:	mov    rsi,r13
  40fc3d:	mov    rcx,rbp
  40fc40:	mov    rdx,rbx
  40fc43:	mov    rdi,r15
  40fc46:	call   40a4b0 <_start@@Base+0x3b50>
  40fc4b:	mov    r13,rax
  40fc4e:	mov    eax,DWORD PTR [rsp+0x34]
  40fc52:	test   eax,eax
  40fc54:	je     41149d <_start@@Base+0xab3d>
  40fc5a:	movabs r12,0x6e6573746563ffff
  40fc64:	jmp    40fd16 <_start@@Base+0x93b6>
  40fc69:	nop    DWORD PTR [rax+0x0]
  40fc70:	movabs rdi,0xffffffff00000000
  40fc7a:	and    rax,rdi
  40fc7d:	movabs rdx,0x6461746100000000
  40fc87:	cmp    rax,rdx
  40fc8a:	jne    410898 <_start@@Base+0x9f38>
  40fc90:	cmp    r8,0x4
  40fc94:	jle    410898 <_start@@Base+0x9f38>
  40fc9a:	mov    ecx,0x4
  40fc9f:	mov    rdx,rbx
  40fca2:	mov    rsi,r13
  40fca5:	mov    rdi,r15
  40fca8:	call   40b830 <_start@@Base+0x4ed0>
  40fcad:	cmp    r13,rax
  40fcb0:	je     410898 <_start@@Base+0x9f38>
  40fcb6:	lea    rcx,[rsp+0x40]
  40fcbb:	xor    r8d,r8d
  40fcbe:	mov    rdx,rbx
  40fcc1:	mov    rsi,rax
  40fcc4:	mov    rdi,r15
  40fcc7:	call   41e560 <flatcc_json_parser_build_uint8_vector_base64@@Base>
  40fccc:	mov    r13,rax
  40fccf:	mov    eax,DWORD PTR [rsp+0x40]
  40fcd3:	test   eax,eax
  40fcd5:	je     40fdda <_start@@Base+0x947a>
  40fcdb:	mov    rdi,QWORD PTR [r15]
  40fcde:	xor    esi,esi
  40fce0:	call   419420 <flatcc_builder_table_add_offset@@Base>
  40fce5:	test   rax,rax
  40fce8:	je     40fdda <_start@@Base+0x947a>
  40fcee:	mov    edx,DWORD PTR [rsp+0x40]
  40fcf2:	mov    DWORD PTR [rax],edx
  40fcf4:	mov    rsi,r13
  40fcf7:	mov    rcx,rbp
  40fcfa:	mov    rdx,rbx
  40fcfd:	mov    rdi,r15
  40fd00:	call   40b8c0 <_start@@Base+0x4f60>
  40fd05:	mov    r9d,DWORD PTR [rsp+0x34]
  40fd0a:	mov    r13,rax
  40fd0d:	test   r9d,r9d
  40fd10:	je     41149d <_start@@Base+0xab3d>
  40fd16:	cmp    rbx,r13
  40fd19:	je     40fd29 <_start@@Base+0x93c9>
  40fd1b:	cmp    BYTE PTR [r13+0x0],0x22
  40fd20:	jne    4108f0 <_start@@Base+0x9f90>
  40fd26:	inc    r13
  40fd29:	mov    r8,rbx
  40fd2c:	sub    r8,r13
  40fd2f:	cmp    r8,0x7
  40fd33:	ja     4108d0 <_start@@Base+0x9f70>
  40fd39:	mov    rsi,rbx
  40fd3c:	mov    rdi,r13
  40fd3f:	call   406a50 <_start@@Base+0xf0>
  40fd44:	cmp    rax,r12
  40fd47:	jbe    40fc70 <_start@@Base+0x9310>
  40fd4d:	mov    rdx,rax
  40fd50:	xor    dl,dl
  40fd52:	movabs rdi,0x75726c6461746100
  40fd5c:	cmp    rdx,rdi
  40fd5f:	je     410930 <_start@@Base+0x9fd0>
  40fd65:	xor    ax,ax
  40fd68:	movabs rdi,0x6e65737465640000
  40fd72:	cmp    rax,rdi
  40fd75:	jne    410898 <_start@@Base+0x9f38>
  40fd7b:	cmp    r8,0x6
  40fd7f:	jle    410898 <_start@@Base+0x9f38>
  40fd85:	mov    ecx,0x6
  40fd8a:	mov    rdx,rbx
  40fd8d:	mov    rsi,r13
  40fd90:	mov    rdi,r15
  40fd93:	call   40b830 <_start@@Base+0x4ed0>
  40fd98:	cmp    r13,rax
  40fd9b:	je     410898 <_start@@Base+0x9f38>
  40fda1:	lea    rcx,[rsp+0x40]
  40fda6:	xor    r8d,r8d
  40fda9:	mov    rdx,rbx
  40fdac:	mov    rsi,rax
  40fdaf:	mov    rdi,r15
  40fdb2:	call   41e560 <flatcc_json_parser_build_uint8_vector_base64@@Base>
  40fdb7:	mov    r10d,DWORD PTR [rsp+0x40]
  40fdbc:	mov    r13,rax
  40fdbf:	test   r10d,r10d
  40fdc2:	je     40fdda <_start@@Base+0x947a>
  40fdc4:	mov    rdi,QWORD PTR [r15]
  40fdc7:	mov    esi,0x2
  40fdcc:	call   419420 <flatcc_builder_table_add_offset@@Base>
  40fdd1:	test   rax,rax
  40fdd4:	jne    40fcee <_start@@Base+0x938e>
  40fdda:	mov    rsi,r13
  40fddd:	mov    rdi,r15
  40fde0:	mov    ecx,0x21
  40fde5:	mov    rdx,rbx
  40fde8:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40fded:	mov    edi,DWORD PTR [rsp+0x28]
  40fdf1:	mov    r13,rax
  40fdf4:	test   edi,edi
  40fdf6:	je     411ed2 <_start@@Base+0xb572>
  40fdfc:	mov    rdi,QWORD PTR [r15]
  40fdff:	mov    esi,0x23
  40fe04:	call   419420 <flatcc_builder_table_add_offset@@Base>
  40fe09:	test   rax,rax
  40fe0c:	je     411eca <_start@@Base+0xb56a>
  40fe12:	mov    edx,DWORD PTR [rsp+0x28]
  40fe16:	mov    DWORD PTR [rax],edx
  40fe18:	jmp    40e3f0 <_start@@Base+0x7a90>
  40fe1d:	nop    DWORD PTR [rax]
  40fe20:	cmp    BYTE PTR [r13+0x2],0x20
  40fe25:	jle    40f809 <_start@@Base+0x8ea9>
  40fe2b:	add    r13,0x2
  40fe2f:	jmp    40e3f0 <_start@@Base+0x7a90>
  40fe34:	nop    DWORD PTR [rax+0x0]
  40fe38:	mov    r13,rbx
  40fe3b:	jmp    40f8da <_start@@Base+0x8f7a>
  40fe40:	lea    rsi,[r12+0x6]
  40fe45:	mov    rax,rbx
  40fe48:	sub    rax,rsi
  40fe4b:	cmp    rax,0x1
  40fe4f:	jle    40fe5f <_start@@Base+0x94ff>
  40fe51:	cmp    BYTE PTR [r12+0x6],0x20
  40fe57:	jg     40fe6d <_start@@Base+0x950d>
  40fe59:	je     410664 <_start@@Base+0x9d04>
  40fe5f:	mov    rdx,rbx
  40fe62:	mov    rdi,r15
  40fe65:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  40fe6a:	mov    rsi,rax
  40fe6d:	cmp    rbx,rsi
  40fe70:	je     40fe7b <_start@@Base+0x951b>
  40fe72:	cmp    BYTE PTR [rsi],0x3a
  40fe75:	je     411644 <_start@@Base+0xace4>
  40fe7b:	mov    ecx,0x4
  40fe80:	mov    rdx,rbx
  40fe83:	mov    rdi,r15
  40fe86:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  40fe8b:	mov    r9,rax
  40fe8e:	cmp    r9,r12
  40fe91:	je     40e920 <_start@@Base+0x7fc0>
  40fe97:	lea    r12,[rsp+0x40]
  40fe9c:	mov    rsi,r9
  40fe9f:	mov    rcx,r12
  40fea2:	mov    rdx,rbx
  40fea5:	mov    rdi,r15
  40fea8:	mov    QWORD PTR [rsp+0x8],r9
  40fead:	mov    QWORD PTR [rsp+0x40],0x0
  40feb6:	call   41d660 <flatcc_json_parser_double@@Base>
  40febb:	mov    r9,QWORD PTR [rsp+0x8]
  40fec0:	mov    r13,rax
  40fec3:	cmp    r9,rax
  40fec6:	je     410230 <_start@@Base+0x98d0>
  40fecc:	vmovsd xmm0,QWORD PTR [rsp+0x40]
  40fed2:	mov    rax,QWORD PTR [rsp]
  40fed6:	vmovsd QWORD PTR [rax+0x10],xmm0
  40fedb:	jmp    40e931 <_start@@Base+0x7fd1>
  40fee0:	endbr64 
  40fee4:	movabs rax,0x746573745f747970
  40feee:	cmp    rbp,rax
  40fef1:	jne    40f290 <_start@@Base+0x8930>
  40fef7:	lea    rbp,[r13+0x8]
  40fefb:	mov    r8,rbx
  40fefe:	sub    r8,rbp
  40ff01:	cmp    r8,0x7
  40ff05:	ja     410b7f <_start@@Base+0xa21f>
  40ff0b:	mov    rsi,rbx
  40ff0e:	mov    rdi,rbp
  40ff11:	call   406a50 <_start@@Base+0xf0>
  40ff16:	movabs rdx,0xff00000000000000
  40ff20:	and    rax,rdx
  40ff23:	movabs rdx,0x6500000000000000
  40ff2d:	cmp    rax,rdx
  40ff30:	jne    410298 <_start@@Base+0x9938>
  40ff36:	cmp    r8,0x1
  40ff3a:	jle    41064e <_start@@Base+0x9cee>
  40ff40:	mov    ecx,0x1
  40ff45:	mov    rdx,rbx
  40ff48:	mov    rsi,rbp
  40ff4b:	mov    rdi,r15
  40ff4e:	call   40b830 <_start@@Base+0x4ed0>
  40ff53:	cmp    rbp,rax
  40ff56:	je     41064e <_start@@Base+0x9cee>
  40ff5c:	lea    rcx,[rip+0x450d]        # 414470 <_start@@Base+0xdb10>
  40ff63:	push   rcx
  40ff64:	lea    rdi,[rip+0x297b5]        # 439720 <__data_start@@Base+0x660>
  40ff6b:	mov    rdx,rbx
  40ff6e:	push   rdi
  40ff6f:	mov    r8d,0x8
  40ff75:	xor    ecx,ecx
  40ff77:	mov    r9,QWORD PTR [rsp+0x48]
  40ff7c:	mov    rsi,rax
  40ff7f:	mov    rdi,r15
  40ff82:	call   41ede0 <flatcc_json_parser_union_type@@Base>
  40ff87:	mov    r13,rax
  40ff8a:	pop    rax
  40ff8b:	pop    rdx
  40ff8c:	jmp    40e3f0 <_start@@Base+0x7a90>
  40ff91:	nop    DWORD PTR [rax+0x0]
  40ff98:	lea    r8,[r13+0x8]
  40ff9c:	mov    rax,rbx
  40ff9f:	sub    rax,r8
  40ffa2:	cmp    rax,0x7
  40ffa6:	ja     410bcf <_start@@Base+0xa26f>
  40ffac:	mov    rsi,rbx
  40ffaf:	mov    rdi,r8
  40ffb2:	call   406a50 <_start@@Base+0xf0>
  40ffb7:	movabs rdx,0x616d657370616365
  40ffc1:	cmp    rax,rdx
  40ffc4:	jne    410540 <_start@@Base+0x9be0>
  40ffca:	lea    rbp,[r13+0x10]
  40ffce:	mov    r8,rbx
  40ffd1:	sub    r8,rbp
  40ffd4:	cmp    r8,0x7
  40ffd8:	ja     410762 <_start@@Base+0x9e02>
  40ffde:	mov    rsi,rbx
  40ffe1:	mov    rdi,rbp
  40ffe4:	call   406a50 <_start@@Base+0xf0>
  40ffe9:	and    rax,0xffffffffff000000
  40ffef:	movabs rdx,0x5f74657374000000
  40fff9:	cmp    rax,rdx
  40fffc:	jne    4111dd <_start@@Base+0xa87d>
  410002:	cmp    r8,0x5
  410006:	jle    4117f5 <_start@@Base+0xae95>
  41000c:	mov    ecx,0x5
  410011:	mov    rdx,rbx
  410014:	mov    rsi,rbp
  410017:	mov    rdi,r15
  41001a:	call   40b830 <_start@@Base+0x4ed0>
  41001f:	cmp    rbp,rax
  410022:	je     4117f5 <_start@@Base+0xae95>
  410028:	lea    rbp,[rsp+0x28]
  41002d:	mov    rcx,rbp
  410030:	mov    rdx,rbx
  410033:	mov    rsi,rax
  410036:	mov    rdi,r15
  410039:	call   40d9a0 <_start@@Base+0x7040>
  41003e:	mov    ebp,DWORD PTR [rsp+0x28]
  410042:	mov    r13,rax
  410045:	test   ebp,ebp
  410047:	je     412039 <_start@@Base+0xb6d9>
  41004d:	mov    rdi,QWORD PTR [r15]
  410050:	mov    esi,0x22
  410055:	call   419420 <flatcc_builder_table_add_offset@@Base>
  41005a:	test   rax,rax
  41005d:	je     412031 <_start@@Base+0xb6d1>
  410063:	mov    edx,DWORD PTR [rsp+0x28]
  410067:	mov    DWORD PTR [rax],edx
  410069:	jmp    40e3f0 <_start@@Base+0x7a90>
  41006e:	xchg   ax,ax
  410070:	movabs rdx,0x7533325f666e7630
  41007a:	cmp    rax,rdx
  41007d:	ja     410320 <_start@@Base+0x99c0>
  410083:	movabs rdx,0x7336345f666e7631
  41008d:	cmp    rax,rdx
  410090:	jne    4105f6 <_start@@Base+0x9c96>
  410096:	cmp    r8,0x8
  41009a:	jle    411519 <_start@@Base+0xabb9>
  4100a0:	mov    ecx,0x8
  4100a5:	mov    rdx,rbx
  4100a8:	mov    rsi,rbp
  4100ab:	mov    rdi,r15
  4100ae:	call   40b830 <_start@@Base+0x4ed0>
  4100b3:	mov    r12,rax
  4100b6:	cmp    rbp,rax
  4100b9:	je     411519 <_start@@Base+0xabb9>
  4100bf:	lea    rbp,[rsp+0x40]
  4100c4:	mov    rcx,rbp
  4100c7:	mov    rdx,rbx
  4100ca:	mov    rsi,rax
  4100cd:	mov    rdi,r15
  4100d0:	mov    QWORD PTR [rsp+0x40],0x0
  4100d9:	call   408f90 <_start@@Base+0x2630>
  4100de:	mov    r13,rax
  4100e1:	cmp    rax,r12
  4100e4:	je     411c86 <_start@@Base+0xb326>
  4100ea:	cmp    QWORD PTR [rsp+0x40],0x0
  4100f0:	jne    4100fd <_start@@Base+0x979d>
  4100f2:	test   BYTE PTR [r15+0x10],0x2
  4100f7:	je     40e3f0 <_start@@Base+0x7a90>
  4100fd:	mov    rdi,QWORD PTR [r15]
  410100:	mov    ecx,0x8
  410105:	mov    edx,0x8
  41010a:	mov    esi,0x12
  41010f:	call   419250 <flatcc_builder_table_add@@Base>
  410114:	test   rax,rax
  410117:	je     4120e9 <_start@@Base+0xb789>
  41011d:	mov    rdx,QWORD PTR [rsp+0x40]
  410122:	mov    QWORD PTR [rax],rdx
  410125:	jmp    40e3f0 <_start@@Base+0x7a90>
  41012a:	nop    WORD PTR [rax+rax*1+0x0]
  410130:	mov    rax,QWORD PTR [rsp+0x40]
  410135:	mov    r11d,DWORD PTR [rsp+0x34]
  41013a:	mov    edx,eax
  41013c:	test   r11d,r11d
  41013f:	jne    410596 <_start@@Base+0x9c36>
  410145:	cmp    rax,0x7f
  410149:	jbe    40f910 <_start@@Base+0x8fb0>
  41014f:	mov    QWORD PTR [rsp+0x8],r9
  410154:	mov    ecx,0x7
  410159:	mov    rsi,r13
  41015c:	mov    rdx,rbx
  41015f:	mov    rdi,r15
  410162:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  410167:	mov    r9,QWORD PTR [rsp+0x8]
  41016c:	mov    r13,rax
  41016f:	cmp    r9,rax
  410172:	je     40f8da <_start@@Base+0x8f7a>
  410178:	movzx  edx,BYTE PTR [rsp+0x2c]
  41017d:	jmp    40f910 <_start@@Base+0x8fb0>
  410182:	nop    WORD PTR [rax+rax*1+0x0]
  410188:	mov    rsi,r13
  41018b:	mov    rdx,rbx
  41018e:	mov    rdi,r15
  410191:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  410196:	mov    r13,rax
  410199:	jmp    40e3f0 <_start@@Base+0x7a90>
  41019e:	xchg   ax,ax
  4101a0:	cmp    BYTE PTR [r13+0x2],0x20
  4101a5:	jle    40f955 <_start@@Base+0x8ff5>
  4101ab:	lea    r12,[r13+0x2]
  4101af:	jmp    40f966 <_start@@Base+0x9006>
  4101b4:	nop    DWORD PTR [rax+0x0]
  4101b8:	mov    rsi,r13
  4101bb:	mov    rdx,rbx
  4101be:	mov    rdi,r15
  4101c1:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  4101c6:	mov    r13,rax
  4101c9:	jmp    40e3f0 <_start@@Base+0x7a90>
  4101ce:	xchg   ax,ax
  4101d0:	mov    rsi,r13
  4101d3:	mov    rdx,rbx
  4101d6:	mov    rdi,r15
  4101d9:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  4101de:	mov    r13,rax
  4101e1:	jmp    40e3f0 <_start@@Base+0x7a90>
  4101e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4101f0:	mov    rdx,rbx
  4101f3:	mov    rsi,rbp
  4101f6:	mov    rdi,r15
  4101f9:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  4101fe:	mov    r13,rax
  410201:	jmp    40e3f0 <_start@@Base+0x7a90>
  410206:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410210:	mov    rdx,rbx
  410213:	mov    rsi,rbp
  410216:	mov    rdi,r15
  410219:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  41021e:	mov    r13,rax
  410221:	jmp    40e3f0 <_start@@Base+0x7a90>
  410226:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410230:	mov    r8,r12
  410233:	lea    rcx,[rip+0x28fc6]        # 439200 <__data_start@@Base+0x140>
  41023a:	mov    rdx,rbx
  41023d:	mov    rsi,rax
  410240:	mov    rdi,r15
  410243:	call   40a710 <_start@@Base+0x3db0>
  410248:	cmp    r13,rax
  41024b:	je     411b19 <_start@@Base+0xb1b9>
  410251:	cmp    rbx,rax
  410254:	je     411b19 <_start@@Base+0xb1b9>
  41025a:	mov    r13,rax
  41025d:	jmp    40fecc <_start@@Base+0x956c>
  410262:	nop    WORD PTR [rax+rax*1+0x0]
  410268:	mov    rdx,rbx
  41026b:	mov    rdi,r15
  41026e:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  410273:	mov    rsi,rax
  410276:	jmp    40f5f0 <_start@@Base+0x8c90>
  41027b:	nop    DWORD PTR [rax+rax*1+0x0]
  410280:	mov    rdx,rbx
  410283:	mov    rdi,r15
  410286:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41028b:	mov    rsi,rax
  41028e:	jmp    40f770 <_start@@Base+0x8e10>
  410293:	nop    DWORD PTR [rax+rax*1+0x0]
  410298:	mov    rdx,rbx
  41029b:	mov    rsi,rbp
  41029e:	mov    rdi,r15
  4102a1:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  4102a6:	mov    r13,rax
  4102a9:	jmp    40e3f0 <_start@@Base+0x7a90>
  4102ae:	xchg   ax,ax
  4102b0:	lea    r13,[r12+0x1]
  4102b5:	mov    rax,rbx
  4102b8:	sub    rax,r13
  4102bb:	mov    DWORD PTR [rsp+0x30],0x0
  4102c3:	cmp    rax,0x1
  4102c7:	jle    4102db <_start@@Base+0x997b>
  4102c9:	cmp    BYTE PTR [r12+0x1],0x20
  4102cf:	jg     40e3f0 <_start@@Base+0x7a90>
  4102d5:	je     411776 <_start@@Base+0xae16>
  4102db:	mov    rdx,rbx
  4102de:	mov    rsi,r13
  4102e1:	mov    rdi,r15
  4102e4:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  4102e9:	mov    r12,rax
  4102ec:	mov    eax,DWORD PTR [rsp+0x30]
  4102f0:	jmp    40e8a8 <_start@@Base+0x7f48>
  4102f5:	nop    DWORD PTR [rax]
  4102f8:	mov    ecx,0xa
  4102fd:	mov    rdx,rbx
  410300:	mov    rsi,rbx
  410303:	mov    rdi,r15
  410306:	mov    DWORD PTR [rsp+0x30],0x0
  41030e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  410313:	mov    r12,rax
  410316:	mov    eax,DWORD PTR [rsp+0x30]
  41031a:	jmp    40e8a8 <_start@@Base+0x7f48>
  41031f:	nop
  410320:	movabs rdx,0x7533325f666e7631
  41032a:	cmp    rax,rdx
  41032d:	je     410799 <_start@@Base+0x9e39>
  410333:	movabs rdx,0x7536345f666e7631
  41033d:	cmp    rax,rdx
  410340:	jne    411396 <_start@@Base+0xaa36>
  410346:	cmp    r8,0x8
  41034a:	jle    41180b <_start@@Base+0xaeab>
  410350:	mov    ecx,0x8
  410355:	mov    rdx,rbx
  410358:	mov    rsi,rbp
  41035b:	mov    rdi,r15
  41035e:	call   40b830 <_start@@Base+0x4ed0>
  410363:	mov    r12,rax
  410366:	cmp    rbp,rax
  410369:	je     41180b <_start@@Base+0xaeab>
  41036f:	lea    rbp,[rsp+0x40]
  410374:	mov    rcx,rbp
  410377:	mov    rdx,rbx
  41037a:	mov    rsi,rax
  41037d:	mov    rdi,r15
  410380:	mov    QWORD PTR [rsp+0x40],0x0
  410389:	call   4092a0 <_start@@Base+0x2940>
  41038e:	mov    r13,rax
  410391:	cmp    rax,r12
  410394:	je     411d3e <_start@@Base+0xb3de>
  41039a:	cmp    QWORD PTR [rsp+0x40],0x0
  4103a0:	jne    4103ad <_start@@Base+0x9a4d>
  4103a2:	test   BYTE PTR [r15+0x10],0x2
  4103a7:	je     40e3f0 <_start@@Base+0x7a90>
  4103ad:	mov    rdi,QWORD PTR [r15]
  4103b0:	mov    ecx,0x8
  4103b5:	mov    edx,0x8
  4103ba:	mov    esi,0x13
  4103bf:	call   419250 <flatcc_builder_table_add@@Base>
  4103c4:	test   rax,rax
  4103c7:	je     412141 <_start@@Base+0xb7e1>
  4103cd:	mov    rdx,QWORD PTR [rsp+0x40]
  4103d2:	mov    QWORD PTR [rax],rdx
  4103d5:	jmp    40e3f0 <_start@@Base+0x7a90>
  4103da:	nop    WORD PTR [rax+rax*1+0x0]
  4103e0:	lea    rbp,[r13+0x8]
  4103e4:	mov    r8,rbx
  4103e7:	sub    r8,rbp
  4103ea:	cmp    r8,0x7
  4103ee:	ja     41078e <_start@@Base+0x9e2e>
  4103f4:	mov    rsi,rbx
  4103f7:	mov    rdi,rbp
  4103fa:	call   406a50 <_start@@Base+0xf0>
  4103ff:	movabs rdx,0xff00000000000000
  410409:	and    rax,rdx
  41040c:	movabs rdx,0x7900000000000000
  410416:	cmp    rax,rdx
  410419:	jne    4111f3 <_start@@Base+0xa893>
  41041f:	cmp    r8,0x1
  410423:	jle    411487 <_start@@Base+0xab27>
  410429:	mov    ecx,0x1
  41042e:	mov    rdx,rbx
  410431:	mov    rsi,rbp
  410434:	mov    rdi,r15
  410437:	call   40b830 <_start@@Base+0x4ed0>
  41043c:	mov    r13,rax
  41043f:	cmp    rbp,rax
  410442:	je     411487 <_start@@Base+0xab27>
  410448:	mov    rdi,QWORD PTR [r15]
  41044b:	mov    ecx,0xffffffff
  410450:	mov    edx,0x1
  410455:	mov    esi,0x1
  41045a:	call   4177b0 <flatcc_builder_start_vector@@Base>
  41045f:	test   eax,eax
  410461:	jne    412059 <_start@@Base+0xb6f9>
  410467:	mov    rsi,r13
  41046a:	mov    rcx,r14
  41046d:	mov    rdx,rbx
  410470:	mov    rdi,r15
  410473:	call   40b790 <_start@@Base+0x4e30>
  410478:	mov    r13,rax
  41047b:	mov    eax,DWORD PTR [rsp+0x24]
  41047f:	test   eax,eax
  410481:	je     411a68 <_start@@Base+0xb108>
  410487:	lea    rbp,[rsp+0x40]
  41048c:	jmp    4104b9 <_start@@Base+0x9b59>
  41048e:	xchg   ax,ax
  410490:	movzx  edx,BYTE PTR [rsp+0x40]
  410495:	mov    rcx,r14
  410498:	mov    BYTE PTR [r12],dl
  41049c:	mov    rsi,rax
  41049f:	mov    rdx,rbx
  4104a2:	mov    rdi,r15
  4104a5:	call   40c2c0 <_start@@Base+0x5960>
  4104aa:	mov    r13,rax
  4104ad:	mov    eax,DWORD PTR [rsp+0x24]
  4104b1:	test   eax,eax
  4104b3:	je     411a68 <_start@@Base+0xb108>
  4104b9:	mov    rdi,QWORD PTR [r15]
  4104bc:	mov    esi,0x1
  4104c1:	mov    BYTE PTR [rsp+0x40],0x0
  4104c6:	call   417100 <flatcc_builder_extend_vector@@Base>
  4104cb:	mov    r12,rax
  4104ce:	test   rax,rax
  4104d1:	je     411afb <_start@@Base+0xb19b>
  4104d7:	mov    rcx,rbp
  4104da:	mov    rdx,rbx
  4104dd:	mov    rsi,r13
  4104e0:	mov    rdi,r15
  4104e3:	call   409440 <_start@@Base+0x2ae0>
  4104e8:	cmp    rax,r13
  4104eb:	jne    410490 <_start@@Base+0x9b30>
  4104ed:	mov    r8,rbp
  4104f0:	lea    rcx,[rip+0x29269]        # 439760 <__data_start@@Base+0x6a0>
  4104f7:	mov    rdx,rbx
  4104fa:	mov    rsi,r13
  4104fd:	mov    rdi,r15
  410500:	call   40ae20 <_start@@Base+0x44c0>
  410505:	cmp    rax,r13
  410508:	je     41050f <_start@@Base+0x9baf>
  41050a:	cmp    rbx,rax
  41050d:	jne    410490 <_start@@Base+0x9b30>
  41050f:	mov    r14,rax
  410512:	jmp    40dc47 <_start@@Base+0x72e7>
  410517:	nop    WORD PTR [rax+rax*1+0x0]
  410520:	mov    rdx,rbx
  410523:	mov    rsi,rbp
  410526:	mov    rdi,r15
  410529:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  41052e:	mov    r13,rax
  410531:	jmp    40e3f0 <_start@@Base+0x7a90>
  410536:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410540:	mov    rdx,rbx
  410543:	mov    rsi,r8
  410546:	mov    rdi,r15
  410549:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  41054e:	mov    r13,rax
  410551:	jmp    40e3f0 <_start@@Base+0x7a90>
  410556:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410560:	mov    rdx,rbx
  410563:	mov    rsi,rbp
  410566:	mov    rdi,r15
  410569:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  41056e:	mov    r13,rax
  410571:	jmp    40e3f0 <_start@@Base+0x7a90>
  410576:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410580:	mov    rdx,rbx
  410583:	mov    rsi,r8
  410586:	mov    rdi,r15
  410589:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  41058e:	mov    r13,rax
  410591:	jmp    40e3f0 <_start@@Base+0x7a90>
  410596:	neg    edx
  410598:	mov    ecx,0x8
  41059d:	cmp    rax,0x80
  4105a3:	jbe    40f910 <_start@@Base+0x8fb0>
  4105a9:	jmp    410159 <_start@@Base+0x97f9>
  4105ae:	mov    r8,r12
  4105b1:	lea    rcx,[rip+0x290c8]        # 439680 <__data_start@@Base+0x5c0>
  4105b8:	mov    rdx,rbx
  4105bb:	mov    rsi,rax
  4105be:	mov    rdi,r15
  4105c1:	call   40a550 <_start@@Base+0x3bf0>
  4105c6:	cmp    r13,rax
  4105c9:	je     411ee2 <_start@@Base+0xb582>
  4105cf:	cmp    rbx,rax
  4105d2:	je     411ee2 <_start@@Base+0xb582>
  4105d8:	mov    r13,rax
  4105db:	jmp    40dff8 <_start@@Base+0x7698>
  4105e0:	mov    rdx,rbx
  4105e3:	mov    rsi,rbp
  4105e6:	mov    rdi,r15
  4105e9:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  4105ee:	mov    r13,rax
  4105f1:	jmp    40e3f0 <_start@@Base+0x7a90>
  4105f6:	mov    rdx,rbx
  4105f9:	mov    rsi,rbp
  4105fc:	mov    rdi,r15
  4105ff:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  410604:	mov    r13,rax
  410607:	jmp    40e3f0 <_start@@Base+0x7a90>
  41060c:	movbe  rax,QWORD PTR [r13+0x10]
  410612:	jmp    40ead5 <_start@@Base+0x8175>
  410617:	movbe  rax,QWORD PTR [r13+0x10]
  41061d:	jmp    40f2ff <_start@@Base+0x899f>
  410622:	mov    rdx,rbx
  410625:	mov    rsi,rbp
  410628:	mov    rdi,r15
  41062b:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  410630:	mov    r13,rax
  410633:	jmp    40e3f0 <_start@@Base+0x7a90>
  410638:	mov    rsi,r13
  41063b:	mov    rdx,rbx
  41063e:	mov    rdi,r15
  410641:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  410646:	mov    r13,rax
  410649:	jmp    40e3f0 <_start@@Base+0x7a90>
  41064e:	mov    rdx,rbx
  410651:	mov    rsi,rbp
  410654:	mov    rdi,r15
  410657:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  41065c:	mov    r13,rax
  41065f:	jmp    40e3f0 <_start@@Base+0x7a90>
  410664:	cmp    BYTE PTR [r12+0x7],0x20
  41066a:	jle    40fe5f <_start@@Base+0x94ff>
  410670:	lea    rsi,[r12+0x7]
  410675:	jmp    40fe6d <_start@@Base+0x950d>
  41067a:	cmp    BYTE PTR [r12+0x7],0x20
  410680:	jle    40f855 <_start@@Base+0x8ef5>
  410686:	lea    rsi,[r12+0x7]
  41068b:	jmp    40f863 <_start@@Base+0x8f03>
  410690:	lea    r12,[rbp+0x8]
  410694:	mov    r8,rbx
  410697:	sub    r8,r12
  41069a:	cmp    r8,0x7
  41069e:	ja     4117ea <_start@@Base+0xae8a>
  4106a4:	mov    rsi,rbx
  4106a7:	mov    rdi,r12
  4106aa:	call   406a50 <_start@@Base+0xf0>
  4106af:	movabs rdx,0xff00000000000000
  4106b9:	and    rax,rdx
  4106bc:	movabs rdx,0x6100000000000000
  4106c6:	cmp    rax,rdx
  4106c9:	jne    41162e <_start@@Base+0xacce>
  4106cf:	cmp    r8,0x1
  4106d3:	jle    411ba0 <_start@@Base+0xb240>
  4106d9:	mov    ecx,0x1
  4106de:	mov    rdx,rbx
  4106e1:	mov    rsi,r12
  4106e4:	mov    rdi,r15
  4106e7:	call   40b830 <_start@@Base+0x4ed0>
  4106ec:	mov    rbp,rax
  4106ef:	cmp    r12,rax
  4106f2:	je     411ba0 <_start@@Base+0xb240>
  4106f8:	lea    r12,[rsp+0x40]
  4106fd:	mov    rcx,r12
  410700:	mov    rdx,rbx
  410703:	mov    rsi,rax
  410706:	mov    rdi,r15
  410709:	mov    DWORD PTR [rsp+0x40],0x0
  410711:	call   409510 <_start@@Base+0x2bb0>
  410716:	mov    r13,rax
  410719:	cmp    rax,rbp
  41071c:	je     411d0c <_start@@Base+0xb3ac>
  410722:	mov    r12d,DWORD PTR [rsp+0x40]
  410727:	test   r12d,r12d
  41072a:	jne    410737 <_start@@Base+0x9dd7>
  41072c:	test   BYTE PTR [r15+0x10],0x2
  410731:	je     40e3f0 <_start@@Base+0x7a90>
  410737:	mov    rdi,QWORD PTR [r15]
  41073a:	mov    ecx,0x4
  41073f:	mov    edx,0x4
  410744:	mov    esi,0x14
  410749:	call   419250 <flatcc_builder_table_add@@Base>
  41074e:	test   rax,rax
  410751:	je     4120e1 <_start@@Base+0xb781>
  410757:	mov    edx,DWORD PTR [rsp+0x40]
  41075b:	mov    DWORD PTR [rax],edx
  41075d:	jmp    40e3f0 <_start@@Base+0x7a90>
  410762:	movbe  rax,QWORD PTR [r13+0x10]
  410768:	jmp    40ffe9 <_start@@Base+0x9689>
  41076d:	movbe  rax,QWORD PTR [r13+0x10]
  410773:	jmp    40e2ba <_start@@Base+0x795a>
  410778:	mov    rdx,rbx
  41077b:	mov    rsi,rbp
  41077e:	mov    rdi,r15
  410781:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  410786:	mov    r13,rax
  410789:	jmp    40e3f0 <_start@@Base+0x7a90>
  41078e:	movbe  rax,QWORD PTR [r13+0x8]
  410794:	jmp    4103ff <_start@@Base+0x9a9f>
  410799:	cmp    r8,0x8
  41079d:	jle    4118de <_start@@Base+0xaf7e>
  4107a3:	mov    ecx,0x8
  4107a8:	mov    rdx,rbx
  4107ab:	mov    rsi,rbp
  4107ae:	mov    rdi,r15
  4107b1:	call   40b830 <_start@@Base+0x4ed0>
  4107b6:	mov    r12,rax
  4107b9:	cmp    rbp,rax
  4107bc:	je     4118de <_start@@Base+0xaf7e>
  4107c2:	lea    rbp,[rsp+0x40]
  4107c7:	mov    rcx,rbp
  4107ca:	mov    rdx,rbx
  4107cd:	mov    rsi,rax
  4107d0:	mov    rdi,r15
  4107d3:	mov    DWORD PTR [rsp+0x40],0x0
  4107db:	call   409370 <_start@@Base+0x2a10>
  4107e0:	mov    r13,rax
  4107e3:	cmp    rax,r12
  4107e6:	je     411e80 <_start@@Base+0xb520>
  4107ec:	mov    ebp,DWORD PTR [rsp+0x40]
  4107f0:	test   ebp,ebp
  4107f2:	jne    4107ff <_start@@Base+0x9e9f>
  4107f4:	test   BYTE PTR [r15+0x10],0x2
  4107f9:	je     40e3f0 <_start@@Base+0x7a90>
  4107ff:	mov    rdi,QWORD PTR [r15]
  410802:	mov    ecx,0x4
  410807:	mov    edx,0x4
  41080c:	mov    esi,0x11
  410811:	call   419250 <flatcc_builder_table_add@@Base>
  410816:	test   rax,rax
  410819:	je     412149 <_start@@Base+0xb7e9>
  41081f:	mov    edx,DWORD PTR [rsp+0x40]
  410823:	mov    DWORD PTR [rax],edx
  410825:	jmp    40e3f0 <_start@@Base+0x7a90>
  41082a:	mov    rsi,r13
  41082d:	mov    rdx,rbx
  410830:	mov    rdi,r15
  410833:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  410838:	mov    r13,rax
  41083b:	jmp    40e3f0 <_start@@Base+0x7a90>
  410840:	mov    rbp,rax
  410843:	mov    rdx,rbx
  410846:	mov    rsi,rbp
  410849:	mov    rdi,r15
  41084c:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  410851:	mov    r13,rax
  410854:	jmp    40e3f0 <_start@@Base+0x7a90>
  410859:	mov    r8,r12
  41085c:	lea    rcx,[rip+0x28f1d]        # 439780 <__data_start@@Base+0x6c0>
  410863:	mov    rdx,rbx
  410866:	mov    rsi,rax
  410869:	mov    rdi,r15
  41086c:	call   40b3c0 <_start@@Base+0x4a60>
  410871:	cmp    r13,rax
  410874:	je     412139 <_start@@Base+0xb7d9>
  41087a:	cmp    rbx,rax
  41087d:	je     412139 <_start@@Base+0xb7d9>
  410883:	mov    r13,rax
  410886:	jmp    40ea35 <_start@@Base+0x80d5>
  41088b:	mov    r14,rax
  41088e:	jmp    40dc47 <_start@@Base+0x72e7>
  410893:	nop    DWORD PTR [rax+rax*1+0x0]
  410898:	mov    rsi,r13
  41089b:	mov    rdx,rbx
  41089e:	mov    rdi,r15
  4108a1:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  4108a6:	mov    r13,rax
  4108a9:	jmp    40fcf4 <_start@@Base+0x9394>
  4108ae:	xchg   ax,ax
  4108b0:	mov    rsi,r13
  4108b3:	mov    rdx,rbx
  4108b6:	mov    rdi,r15
  4108b9:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  4108be:	mov    r13,rax
  4108c1:	jmp    40e700 <_start@@Base+0x7da0>
  4108c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4108d0:	movbe  rax,QWORD PTR [r13+0x0]
  4108d6:	jmp    40fd44 <_start@@Base+0x93e4>
  4108db:	nop    DWORD PTR [rax+rax*1+0x0]
  4108e0:	movbe  rax,QWORD PTR [r13+0x0]
  4108e6:	jmp    40e74e <_start@@Base+0x7dee>
  4108eb:	nop    DWORD PTR [rax+rax*1+0x0]
  4108f0:	mov    rsi,r13
  4108f3:	mov    ecx,0x5
  4108f8:	mov    rdx,rbx
  4108fb:	mov    rdi,r15
  4108fe:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  410903:	mov    r13,rax
  410906:	jmp    40fd29 <_start@@Base+0x93c9>
  41090b:	nop    DWORD PTR [rax+rax*1+0x0]
  410910:	mov    rsi,r13
  410913:	mov    ecx,0x5
  410918:	mov    rdx,rbx
  41091b:	mov    rdi,r15
  41091e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  410923:	mov    r13,rax
  410926:	jmp    40e733 <_start@@Base+0x7dd3>
  41092b:	nop    DWORD PTR [rax+rax*1+0x0]
  410930:	cmp    r8,0x7
  410934:	jle    410898 <_start@@Base+0x9f38>
  41093a:	mov    ecx,0x7
  41093f:	mov    rdx,rbx
  410942:	mov    rsi,r13
  410945:	mov    rdi,r15
  410948:	call   40b830 <_start@@Base+0x4ed0>
  41094d:	cmp    r13,rax
  410950:	je     410898 <_start@@Base+0x9f38>
  410956:	lea    rcx,[rsp+0x40]
  41095b:	mov    r8d,0x1
  410961:	mov    rdx,rbx
  410964:	mov    rsi,rax
  410967:	mov    rdi,r15
  41096a:	call   41e560 <flatcc_json_parser_build_uint8_vector_base64@@Base>
  41096f:	mov    r11d,DWORD PTR [rsp+0x40]
  410974:	mov    r13,rax
  410977:	test   r11d,r11d
  41097a:	je     40fdda <_start@@Base+0x947a>
  410980:	mov    rdi,QWORD PTR [r15]
  410983:	mov    esi,0x1
  410988:	call   419420 <flatcc_builder_table_add_offset@@Base>
  41098d:	test   rax,rax
  410990:	jne    40fcee <_start@@Base+0x938e>
  410996:	jmp    40fdda <_start@@Base+0x947a>
  41099b:	nop    DWORD PTR [rax+rax*1+0x0]
  4109a0:	mov    rbp,rbx
  4109a3:	xor    eax,eax
  4109a5:	jmp    40f1c9 <_start@@Base+0x8869>
  4109aa:	nop    WORD PTR [rax+rax*1+0x0]
  4109b0:	cmp    r8,0x3
  4109b4:	jle    4108b0 <_start@@Base+0x9f50>
  4109ba:	mov    ecx,0x3
  4109bf:	mov    rdx,rbx
  4109c2:	mov    rsi,r13
  4109c5:	mov    rdi,r15
  4109c8:	call   40b830 <_start@@Base+0x4ed0>
  4109cd:	mov    r14,rax
  4109d0:	cmp    r13,rax
  4109d3:	je     4108b0 <_start@@Base+0x9f50>
  4109d9:	lea    r8,[rsp+0x40]
  4109de:	mov    rcx,r8
  4109e1:	mov    rdx,rbx
  4109e4:	mov    rsi,rax
  4109e7:	mov    rdi,r15
  4109ea:	mov    QWORD PTR [rsp],r8
  4109ee:	mov    QWORD PTR [rsp+0x40],0x0
  4109f7:	call   408f90 <_start@@Base+0x2630>
  4109fc:	cmp    r14,rax
  4109ff:	mov    r13,rax
  410a02:	mov    r8,QWORD PTR [rsp]
  410a06:	je     4115ec <_start@@Base+0xac8c>
  410a0c:	cmp    QWORD PTR [rsp+0x40],0x0
  410a12:	jne    410a1f <_start@@Base+0xa0bf>
  410a14:	test   BYTE PTR [r15+0x10],0x2
  410a19:	je     40e700 <_start@@Base+0x7da0>
  410a1f:	mov    rdi,QWORD PTR [r15]
  410a22:	mov    ecx,0x8
  410a27:	mov    edx,0x8
  410a2c:	mov    esi,0x1
  410a31:	call   419250 <flatcc_builder_table_add@@Base>
  410a36:	test   rax,rax
  410a39:	je     411a5e <_start@@Base+0xb0fe>
  410a3f:	mov    rdx,QWORD PTR [rsp+0x40]
  410a44:	mov    QWORD PTR [rax],rdx
  410a47:	jmp    40e700 <_start@@Base+0x7da0>
  410a4c:	nop    DWORD PTR [rax+0x0]
  410a50:	cmp    BYTE PTR [r13+0x4],0x65
  410a55:	jne    40f187 <_start@@Base+0x8827>
  410a5b:	mov    BYTE PTR [rsp+0x30],0x0
  410a60:	lea    rbp,[r13+0x5]
  410a64:	jmp    40f1cd <_start@@Base+0x886d>
  410a69:	nop    DWORD PTR [rax+0x0]
  410a70:	mov    BYTE PTR [rsp+0x30],0x1
  410a75:	lea    rbp,[r13+0x4]
  410a79:	jmp    40f1cd <_start@@Base+0x886d>
  410a7e:	xchg   ax,ax
  410a80:	mov    eax,DWORD PTR [rsp+0x34]
  410a84:	mov    ecx,0x8
  410a89:	test   eax,eax
  410a8b:	jne    410aa9 <_start@@Base+0xa149>
  410a8d:	mov    rdx,QWORD PTR [rsp+0x40]
  410a92:	test   dl,dl
  410a94:	setne  al
  410a97:	cmp    rdx,0xff
  410a9e:	jbe    40f1c9 <_start@@Base+0x8869>
  410aa4:	mov    ecx,0x7
  410aa9:	mov    rsi,rbp
  410aac:	mov    rdx,rbx
  410aaf:	mov    rdi,r15
  410ab2:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  410ab7:	mov    rbp,rax
  410aba:	xor    eax,eax
  410abc:	jmp    40f1c9 <_start@@Base+0x8869>
  410ac1:	mov    r8,r12
  410ac4:	lea    rcx,[rip+0x28715]        # 4391e0 <__data_start@@Base+0x120>
  410acb:	mov    rdx,rbx
  410ace:	mov    rsi,rax
  410ad1:	mov    rdi,r15
  410ad4:	call   40a550 <_start@@Base+0x3bf0>
  410ad9:	cmp    r13,rax
  410adc:	je     411b19 <_start@@Base+0xb1b9>
  410ae2:	cmp    rbx,rax
  410ae5:	je     411b19 <_start@@Base+0xb1b9>
  410aeb:	mov    r13,rax
  410aee:	jmp    40f7ce <_start@@Base+0x8e6e>
  410af3:	mov    rsi,r13
  410af6:	mov    rdx,rbx
  410af9:	mov    rdi,r15
  410afc:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  410b01:	mov    r13,rax
  410b04:	jmp    40e3f0 <_start@@Base+0x7a90>
  410b09:	mov    rdi,QWORD PTR [r15]
  410b0c:	call   418670 <flatcc_builder_end_vector@@Base>
  410b11:	mov    DWORD PTR [rsp+0x28],eax
  410b15:	test   eax,eax
  410b17:	je     411ec2 <_start@@Base+0xb562>
  410b1d:	mov    rdi,QWORD PTR [r15]
  410b20:	mov    esi,0x9
  410b25:	call   419420 <flatcc_builder_table_add_offset@@Base>
  410b2a:	test   rax,rax
  410b2d:	je     411eba <_start@@Base+0xb55a>
  410b33:	mov    edx,DWORD PTR [rsp+0x28]
  410b37:	mov    DWORD PTR [rax],edx
  410b39:	jmp    40e3f0 <_start@@Base+0x7a90>
  410b3e:	xchg   ax,ax
  410b40:	mov    rsi,r13
  410b43:	mov    rdx,rbx
  410b46:	mov    rdi,r15
  410b49:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  410b4e:	mov    r13,rax
  410b51:	jmp    40e3f0 <_start@@Base+0x7a90>
  410b56:	movbe  rax,QWORD PTR [r13+0x8]
  410b5c:	jmp    40fbcf <_start@@Base+0x926f>
  410b61:	mov    r13,rbx
  410b64:	jmp    40dddf <_start@@Base+0x747f>
  410b69:	mov    rsi,r13
  410b6c:	mov    rdx,rbx
  410b6f:	mov    rdi,r15
  410b72:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  410b77:	mov    r13,rax
  410b7a:	jmp    40e3f0 <_start@@Base+0x7a90>
  410b7f:	movbe  rax,QWORD PTR [r13+0x8]
  410b85:	jmp    40ff16 <_start@@Base+0x95b6>
  410b8a:	mov    rsi,r13
  410b8d:	mov    rdx,rbx
  410b90:	mov    rdi,r15
  410b93:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  410b98:	mov    r13,rax
  410b9b:	jmp    40e3f0 <_start@@Base+0x7a90>
  410ba0:	mov    edx,DWORD PTR [rsp+0x34]
  410ba4:	mov    rax,QWORD PTR [rsp+0x40]
  410ba9:	test   edx,edx
  410bab:	je     411339 <_start@@Base+0xa9d9>
  410bb1:	mov    ecx,0x8
  410bb6:	cmp    rax,0x80
  410bbc:	ja     4119b5 <_start@@Base+0xb055>
  410bc2:	mov    edx,eax
  410bc4:	neg    edx
  410bc6:	mov    BYTE PTR [rsp+0x30],dl
  410bca:	jmp    40de18 <_start@@Base+0x74b8>
  410bcf:	movbe  rax,QWORD PTR [r13+0x8]
  410bd5:	jmp    40ffb7 <_start@@Base+0x9657>
  410bda:	movbe  rax,QWORD PTR [r13+0x8]
  410be0:	jmp    40e288 <_start@@Base+0x7928>
  410be5:	movbe  rax,QWORD PTR [r13+0x8]
  410beb:	jmp    40e561 <_start@@Base+0x7c01>
  410bf0:	lea    rbp,[r13+0x10]
  410bf4:	mov    r8,rbx
  410bf7:	sub    r8,rbp
  410bfa:	cmp    r8,0x7
  410bfe:	ja     411623 <_start@@Base+0xacc3>
  410c04:	mov    rsi,rbx
  410c07:	mov    rdi,rbp
  410c0a:	call   406a50 <_start@@Base+0xf0>
  410c0f:	movabs rdx,0xff00000000000000
  410c19:	and    rax,rdx
  410c1c:	movabs rdx,0x7300000000000000
  410c26:	cmp    rax,rdx
  410c29:	jne    4113ac <_start@@Base+0xaa4c>
  410c2f:	cmp    r8,0x1
  410c33:	jle    411760 <_start@@Base+0xae00>
  410c39:	mov    ecx,0x1
  410c3e:	mov    rdx,rbx
  410c41:	mov    rsi,rbp
  410c44:	mov    rdi,r15
  410c47:	call   40b830 <_start@@Base+0x4ed0>
  410c4c:	mov    r13,rax
  410c4f:	cmp    rbp,rax
  410c52:	je     411760 <_start@@Base+0xae00>
  410c58:	mov    rdi,QWORD PTR [r15]
  410c5b:	mov    ecx,0x1fffffff
  410c60:	mov    edx,0x8
  410c65:	mov    esi,0x8
  410c6a:	call   4177b0 <flatcc_builder_start_vector@@Base>
  410c6f:	test   eax,eax
  410c71:	jne    412111 <_start@@Base+0xb7b1>
  410c77:	mov    rsi,r13
  410c7a:	mov    rcx,r14
  410c7d:	mov    rdx,rbx
  410c80:	mov    rdi,r15
  410c83:	call   40b790 <_start@@Base+0x4e30>
  410c88:	mov    r8d,DWORD PTR [rsp+0x24]
  410c8d:	mov    r13,rax
  410c90:	test   r8d,r8d
  410c93:	je     411bfb <_start@@Base+0xb29b>
  410c99:	lea    rbp,[rsp+0x40]
  410c9e:	jmp    410ccc <_start@@Base+0xa36c>
  410ca0:	vmovsd xmm0,QWORD PTR [rsp+0x40]
  410ca6:	mov    rdi,r15
  410ca9:	vmovsd QWORD PTR [r12],xmm0
  410caf:	mov    rcx,r14
  410cb2:	mov    rdx,rbx
  410cb5:	mov    rsi,rax
  410cb8:	call   40c2c0 <_start@@Base+0x5960>
  410cbd:	mov    edi,DWORD PTR [rsp+0x24]
  410cc1:	mov    r13,rax
  410cc4:	test   edi,edi
  410cc6:	je     411bfb <_start@@Base+0xb29b>
  410ccc:	mov    rdi,QWORD PTR [r15]
  410ccf:	mov    esi,0x1
  410cd4:	mov    QWORD PTR [rsp+0x40],0x0
  410cdd:	call   417100 <flatcc_builder_extend_vector@@Base>
  410ce2:	mov    r12,rax
  410ce5:	test   rax,rax
  410ce8:	je     411c30 <_start@@Base+0xb2d0>
  410cee:	mov    rcx,rbp
  410cf1:	mov    rdx,rbx
  410cf4:	mov    rsi,r13
  410cf7:	mov    rdi,r15
  410cfa:	call   41d660 <flatcc_json_parser_double@@Base>
  410cff:	cmp    rax,r13
  410d02:	jne    410ca0 <_start@@Base+0xa340>
  410d04:	mov    r8,rbp
  410d07:	lea    rcx,[rip+0x28832]        # 439540 <__data_start@@Base+0x480>
  410d0e:	mov    rdx,rbx
  410d11:	mov    rsi,r13
  410d14:	mov    rdi,r15
  410d17:	call   40a710 <_start@@Base+0x3db0>
  410d1c:	cmp    rax,r13
  410d1f:	je     410d2a <_start@@Base+0xa3ca>
  410d21:	cmp    rbx,rax
  410d24:	jne    410ca0 <_start@@Base+0xa340>
  410d2a:	mov    r14,rax
  410d2d:	jmp    40dc47 <_start@@Base+0x72e7>
  410d32:	nop    WORD PTR [rax+rax*1+0x0]
  410d38:	movbe  rax,QWORD PTR [r13+0x8]
  410d3e:	jmp    40ed72 <_start@@Base+0x8412>
  410d43:	mov    rdi,QWORD PTR [r15]
  410d46:	call   418670 <flatcc_builder_end_vector@@Base>
  410d4b:	mov    DWORD PTR [rsp+0x28],eax
  410d4f:	test   eax,eax
  410d51:	je     411fc8 <_start@@Base+0xb668>
  410d57:	mov    rdi,QWORD PTR [r15]
  410d5a:	mov    esi,0x1f
  410d5f:	call   419420 <flatcc_builder_table_add_offset@@Base>
  410d64:	test   rax,rax
  410d67:	je     411fb8 <_start@@Base+0xb658>
  410d6d:	mov    edx,DWORD PTR [rsp+0x28]
  410d71:	mov    DWORD PTR [rax],edx
  410d73:	jmp    40e3f0 <_start@@Base+0x7a90>
  410d78:	mov    rdx,rbx
  410d7b:	mov    rsi,rbp
  410d7e:	mov    rdi,r15
  410d81:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  410d86:	mov    r13,rax
  410d89:	jmp    40e3f0 <_start@@Base+0x7a90>
  410d8e:	mov    r10,rbx
  410d91:	jmp    40e687 <_start@@Base+0x7d27>
  410d96:	mov    r14,QWORD PTR [rsp+0x8]
  410d9b:	mov    r13,rax
  410d9e:	mov    rsi,r13
  410da1:	mov    ecx,0x21
  410da6:	mov    rdx,rbx
  410da9:	mov    rdi,r15
  410dac:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  410db1:	mov    r13,rax
  410db4:	mov    eax,DWORD PTR [rsp+0x28]
  410db8:	test   eax,eax
  410dba:	je     412041 <_start@@Base+0xb6e1>
  410dc0:	mov    rdi,QWORD PTR [r15]
  410dc3:	mov    esi,0xe
  410dc8:	call   419420 <flatcc_builder_table_add_offset@@Base>
  410dcd:	test   rax,rax
  410dd0:	je     411f5e <_start@@Base+0xb5fe>
  410dd6:	mov    edx,DWORD PTR [rsp+0x28]
  410dda:	mov    DWORD PTR [rax],edx
  410ddc:	jmp    40e3f0 <_start@@Base+0x7a90>
  410de1:	mov    rdi,QWORD PTR [r15]
  410de4:	call   418670 <flatcc_builder_end_vector@@Base>
  410de9:	mov    DWORD PTR [rsp+0x28],eax
  410ded:	test   eax,eax
  410def:	je     411f76 <_start@@Base+0xb616>
  410df5:	mov    rdi,QWORD PTR [r15]
  410df8:	mov    esi,0x1e
  410dfd:	call   419420 <flatcc_builder_table_add_offset@@Base>
  410e02:	test   rax,rax
  410e05:	je     411f6e <_start@@Base+0xb60e>
  410e0b:	mov    edx,DWORD PTR [rsp+0x28]
  410e0f:	mov    DWORD PTR [rax],edx
  410e11:	jmp    40e3f0 <_start@@Base+0x7a90>
  410e16:	mov    rsi,r13
  410e19:	mov    rdx,rbx
  410e1c:	mov    rdi,r15
  410e1f:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  410e24:	mov    r13,rax
  410e27:	jmp    40e3f0 <_start@@Base+0x7a90>
  410e2c:	mov    r14,r13
  410e2f:	jmp    40dc47 <_start@@Base+0x72e7>
  410e34:	movbe  rdx,QWORD PTR [r13+0x10]
  410e3a:	movabs rcx,0x6473747275637400
  410e44:	xor    dl,dl
  410e46:	cmp    rdx,rcx
  410e49:	jne    40e500 <_start@@Base+0x7ba0>
  410e4f:	cmp    rax,0x7
  410e53:	jle    410843 <_start@@Base+0x9ee3>
  410e59:	mov    ecx,0x7
  410e5e:	mov    rdx,rbx
  410e61:	mov    rsi,rbp
  410e64:	mov    rdi,r15
  410e67:	call   40b830 <_start@@Base+0x4ed0>
  410e6c:	mov    r13,rax
  410e6f:	cmp    rbp,rax
  410e72:	je     410840 <_start@@Base+0x9ee0>
  410e78:	mov    rdi,QWORD PTR [r15]
  410e7b:	mov    ecx,0x1fffffff
  410e80:	mov    edx,0x4
  410e85:	mov    esi,0x8
  410e8a:	call   4177b0 <flatcc_builder_start_vector@@Base>
  410e8f:	test   eax,eax
  410e91:	jne    411f24 <_start@@Base+0xb5c4>
  410e97:	mov    rsi,r13
  410e9a:	mov    rcx,r14
  410e9d:	mov    rdx,rbx
  410ea0:	mov    rdi,r15
  410ea3:	call   40b790 <_start@@Base+0x4e30>
  410ea8:	mov    ebp,DWORD PTR [rsp+0x24]
  410eac:	mov    r13,rax
  410eaf:	test   ebp,ebp
  410eb1:	je     411151 <_start@@Base+0xa7f1>
  410eb7:	mov    QWORD PTR [rsp+0x18],r14
  410ebc:	movabs r12,0xffff000000000000
  410ec6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410ed0:	mov    rdi,QWORD PTR [r15]
  410ed3:	mov    esi,0x1
  410ed8:	call   417100 <flatcc_builder_extend_vector@@Base>
  410edd:	mov    r14,rax
  410ee0:	test   rax,rax
  410ee3:	je     411758 <_start@@Base+0xadf8>
  410ee9:	lea    rbp,[rsp+0x34]
  410eee:	mov    rsi,r13
  410ef1:	mov    rcx,rbp
  410ef4:	mov    rdx,rbx
  410ef7:	mov    rdi,r15
  410efa:	call   40a4b0 <_start@@Base+0x3b50>
  410eff:	mov    r11d,DWORD PTR [rsp+0x34]
  410f04:	mov    r13,rax
  410f07:	test   r11d,r11d
  410f0a:	je     411128 <_start@@Base+0xa7c8>
  410f10:	lea    rax,[rsp+0x40]
  410f15:	mov    QWORD PTR [rsp],rax
  410f19:	mov    rax,r13
  410f1c:	mov    r13,r14
  410f1f:	mov    r14,rax
  410f22:	jmp    410fe7 <_start@@Base+0xa687>
  410f27:	nop    WORD PTR [rax+rax*1+0x0]
  410f30:	mov    rsi,rbx
  410f33:	mov    rdi,r14
  410f36:	call   406a50 <_start@@Base+0xf0>
  410f3b:	mov    rdx,rax
  410f3e:	and    rdx,r12
  410f41:	movabs rdi,0x6964000000000000
  410f4b:	cmp    rdx,rdi
  410f4e:	je     411030 <_start@@Base+0xa6d0>
  410f54:	movabs rcx,0x64697374616e6365
  410f5e:	cmp    rax,rcx
  410f61:	jne    411018 <_start@@Base+0xa6b8>
  410f67:	cmp    r9,0x8
  410f6b:	jle    411018 <_start@@Base+0xa6b8>
  410f71:	mov    ecx,0x8
  410f76:	mov    rdx,rbx
  410f79:	mov    rsi,r14
  410f7c:	mov    rdi,r15
  410f7f:	call   40b830 <_start@@Base+0x4ed0>
  410f84:	cmp    r14,rax
  410f87:	je     411018 <_start@@Base+0xa6b8>
  410f8d:	mov    rcx,QWORD PTR [rsp]
  410f91:	mov    rdx,rbx
  410f94:	mov    rsi,rax
  410f97:	mov    rdi,r15
  410f9a:	mov    DWORD PTR [rsp+0x40],0x0
  410fa2:	mov    QWORD PTR [rsp+0x8],rax
  410fa7:	call   409370 <_start@@Base+0x2a10>
  410fac:	mov    r10,QWORD PTR [rsp+0x8]
  410fb1:	mov    r14,rax
  410fb4:	cmp    r10,rax
  410fb7:	je     4110e0 <_start@@Base+0xa780>
  410fbd:	mov    eax,DWORD PTR [rsp+0x40]
  410fc1:	mov    DWORD PTR [r13+0x4],eax
  410fc5:	mov    rsi,r14
  410fc8:	mov    rcx,rbp
  410fcb:	mov    rdx,rbx
  410fce:	mov    rdi,r15
  410fd1:	call   40b8c0 <_start@@Base+0x4f60>
  410fd6:	mov    r10d,DWORD PTR [rsp+0x34]
  410fdb:	mov    r14,rax
  410fde:	test   r10d,r10d
  410fe1:	je     411190 <_start@@Base+0xa830>
  410fe7:	cmp    rbx,r14
  410fea:	je     410ff9 <_start@@Base+0xa699>
  410fec:	cmp    BYTE PTR [r14],0x22
  410ff0:	jne    411090 <_start@@Base+0xa730>
  410ff6:	inc    r14
  410ff9:	mov    r9,rbx
  410ffc:	sub    r9,r14
  410fff:	cmp    r9,0x7
  411003:	jbe    410f30 <_start@@Base+0xa5d0>
  411009:	movbe  rax,QWORD PTR [r14]
  41100e:	jmp    410f3b <_start@@Base+0xa5db>
  411013:	nop    DWORD PTR [rax+rax*1+0x0]
  411018:	mov    rsi,r14
  41101b:	mov    rdx,rbx
  41101e:	mov    rdi,r15
  411021:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  411026:	mov    r14,rax
  411029:	jmp    410fc5 <_start@@Base+0xa665>
  41102b:	nop    DWORD PTR [rax+rax*1+0x0]
  411030:	cmp    r9,0x2
  411034:	jle    411018 <_start@@Base+0xa6b8>
  411036:	mov    ecx,0x2
  41103b:	mov    rdx,rbx
  41103e:	mov    rsi,r14
  411041:	mov    rdi,r15
  411044:	call   40b830 <_start@@Base+0x4ed0>
  411049:	cmp    r14,rax
  41104c:	je     411018 <_start@@Base+0xa6b8>
  41104e:	mov    rcx,QWORD PTR [rsp]
  411052:	mov    rdx,rbx
  411055:	mov    rsi,rax
  411058:	mov    rdi,r15
  41105b:	mov    DWORD PTR [rsp+0x40],0x0
  411063:	mov    QWORD PTR [rsp+0x8],rax
  411068:	call   409370 <_start@@Base+0x2a10>
  41106d:	mov    r10,QWORD PTR [rsp+0x8]
  411072:	mov    r14,rax
  411075:	cmp    r10,rax
  411078:	je     4110b0 <_start@@Base+0xa750>
  41107a:	mov    eax,DWORD PTR [rsp+0x40]
  41107e:	mov    DWORD PTR [r13+0x0],eax
  411082:	jmp    410fc5 <_start@@Base+0xa665>
  411087:	nop    WORD PTR [rax+rax*1+0x0]
  411090:	mov    rsi,r14
  411093:	mov    ecx,0x5
  411098:	mov    rdx,rbx
  41109b:	mov    rdi,r15
  41109e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  4110a3:	mov    r14,rax
  4110a6:	jmp    410ff9 <_start@@Base+0xa699>
  4110ab:	nop    DWORD PTR [rax+rax*1+0x0]
  4110b0:	mov    r8,QWORD PTR [rsp]
  4110b4:	lea    rcx,[rip+0x28085]        # 439140 <__data_start@@Base+0x80>
  4110bb:	mov    rdx,rbx
  4110be:	mov    rsi,rax
  4110c1:	mov    rdi,r15
  4110c4:	call   40b1e0 <_start@@Base+0x4880>
  4110c9:	cmp    r14,rax
  4110cc:	je     41110b <_start@@Base+0xa7ab>
  4110ce:	cmp    rbx,rax
  4110d1:	je     41110b <_start@@Base+0xa7ab>
  4110d3:	mov    r14,rax
  4110d6:	jmp    41107a <_start@@Base+0xa71a>
  4110d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4110e0:	mov    r8,QWORD PTR [rsp]
  4110e4:	lea    rcx,[rip+0x28035]        # 439120 <__data_start@@Base+0x60>
  4110eb:	mov    rdx,rbx
  4110ee:	mov    rsi,rax
  4110f1:	mov    rdi,r15
  4110f4:	call   40b1e0 <_start@@Base+0x4880>
  4110f9:	cmp    r14,rax
  4110fc:	je     41110b <_start@@Base+0xa7ab>
  4110fe:	cmp    rbx,rax
  411101:	je     41110b <_start@@Base+0xa7ab>
  411103:	mov    r14,rax
  411106:	jmp    410fbd <_start@@Base+0xa65d>
  41110b:	mov    ecx,0x21
  411110:	mov    rdx,rbx
  411113:	mov    rsi,rax
  411116:	mov    rdi,r15
  411119:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41111e:	mov    r13,rax
  411121:	nop    DWORD PTR [rax+0x0]
  411128:	mov    rcx,QWORD PTR [rsp+0x18]
  41112d:	mov    rsi,r13
  411130:	mov    rdx,rbx
  411133:	mov    rdi,r15
  411136:	call   40c2c0 <_start@@Base+0x5960>
  41113b:	mov    r9d,DWORD PTR [rsp+0x24]
  411140:	mov    r13,rax
  411143:	test   r9d,r9d
  411146:	jne    410ed0 <_start@@Base+0xa570>
  41114c:	mov    r14,QWORD PTR [rsp+0x18]
  411151:	mov    rdi,QWORD PTR [r15]
  411154:	call   418670 <flatcc_builder_end_vector@@Base>
  411159:	mov    DWORD PTR [rsp+0x28],eax
  41115d:	test   eax,eax
  41115f:	je     4120c9 <_start@@Base+0xb769>
  411165:	mov    rdi,QWORD PTR [r15]
  411168:	mov    esi,0x1d
  41116d:	call   419420 <flatcc_builder_table_add_offset@@Base>
  411172:	test   rax,rax
  411175:	je     4120c1 <_start@@Base+0xb761>
  41117b:	mov    edx,DWORD PTR [rsp+0x28]
  41117f:	mov    DWORD PTR [rax],edx
  411181:	jmp    40e3f0 <_start@@Base+0x7a90>
  411186:	nop    WORD PTR cs:[rax+rax*1+0x0]
  411190:	mov    r13,rax
  411193:	jmp    411128 <_start@@Base+0xa7c8>
  411195:	mov    eax,DWORD PTR [rsp+0x34]
  411199:	mov    ecx,0x8
  41119e:	test   eax,eax
  4111a0:	jne    411733 <_start@@Base+0xadd3>
  4111a6:	mov    rdx,QWORD PTR [rsp+0x40]
  4111ab:	cmp    rdx,0xffff
  4111b2:	ja     41172e <_start@@Base+0xadce>
  4111b8:	mov    eax,edx
  4111ba:	mov    WORD PTR [rsp+0x22],dx
  4111bf:	mov    r13,r10
  4111c2:	jmp    40e6c3 <_start@@Base+0x7d63>
  4111c7:	mov    rdx,rbx
  4111ca:	mov    rsi,rbp
  4111cd:	mov    rdi,r15
  4111d0:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  4111d5:	mov    r13,rax
  4111d8:	jmp    40e3f0 <_start@@Base+0x7a90>
  4111dd:	mov    rdx,rbx
  4111e0:	mov    rsi,rbp
  4111e3:	mov    rdi,r15
  4111e6:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  4111eb:	mov    r13,rax
  4111ee:	jmp    40e3f0 <_start@@Base+0x7a90>
  4111f3:	mov    rdx,rbx
  4111f6:	mov    rsi,rbp
  4111f9:	mov    rdi,r15
  4111fc:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  411201:	mov    r13,rax
  411204:	jmp    40e3f0 <_start@@Base+0x7a90>
  411209:	cmp    r8,0x2
  41120d:	jle    4114d9 <_start@@Base+0xab79>
  411213:	mov    ecx,0x2
  411218:	mov    rdx,rbx
  41121b:	mov    rsi,rbp
  41121e:	mov    rdi,r15
  411221:	call   40b830 <_start@@Base+0x4ed0>
  411226:	mov    r13,rax
  411229:	cmp    rbp,rax
  41122c:	je     4114d9 <_start@@Base+0xab79>
  411232:	mov    rdi,QWORD PTR [r15]
  411235:	call   417830 <flatcc_builder_start_offset_vector@@Base>
  41123a:	test   eax,eax
  41123c:	jne    4120d1 <_start@@Base+0xb771>
  411242:	mov    rsi,r13
  411245:	mov    rcx,r14
  411248:	mov    rdx,rbx
  41124b:	mov    rdi,r15
  41124e:	call   40b790 <_start@@Base+0x4e30>
  411253:	mov    r8d,DWORD PTR [rsp+0x24]
  411258:	mov    r13,rax
  41125b:	test   r8d,r8d
  41125e:	je     411b34 <_start@@Base+0xb1d4>
  411264:	lea    rbp,[rsp+0x28]
  411269:	jmp    4112ac <_start@@Base+0xa94c>
  41126b:	nop    DWORD PTR [rax+rax*1+0x0]
  411270:	mov    rdi,QWORD PTR [r15]
  411273:	mov    esi,0x1
  411278:	call   4172e0 <flatcc_builder_extend_offset_vector@@Base>
  41127d:	test   rax,rax
  411280:	je     411bb6 <_start@@Base+0xb256>
  411286:	mov    edx,DWORD PTR [rsp+0x28]
  41128a:	mov    rsi,r13
  41128d:	mov    DWORD PTR [rax],edx
  41128f:	mov    rcx,r14
  411292:	mov    rdx,rbx
  411295:	mov    rdi,r15
  411298:	call   40c2c0 <_start@@Base+0x5960>
  41129d:	mov    esi,DWORD PTR [rsp+0x24]
  4112a1:	mov    r13,rax
  4112a4:	test   esi,esi
  4112a6:	je     411b34 <_start@@Base+0xb1d4>
  4112ac:	mov    rsi,r13
  4112af:	mov    rdi,r15
  4112b2:	mov    rcx,rbp
  4112b5:	mov    rdx,rbx
  4112b8:	call   41ea20 <flatcc_json_parser_build_string@@Base>
  4112bd:	mov    edi,DWORD PTR [rsp+0x28]
  4112c1:	mov    r13,rax
  4112c4:	test   edi,edi
  4112c6:	jne    411270 <_start@@Base+0xa910>
  4112c8:	mov    r14,rax
  4112cb:	jmp    40dc47 <_start@@Base+0x72e7>
  4112d0:	mov    rsi,r13
  4112d3:	mov    rdx,rbx
  4112d6:	mov    rdi,r15
  4112d9:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  4112de:	mov    r13,rax
  4112e1:	jmp    40e3f0 <_start@@Base+0x7a90>
  4112e6:	mov    rdx,rbx
  4112e9:	mov    rsi,rbp
  4112ec:	mov    rdi,r15
  4112ef:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  4112f4:	mov    r13,rax
  4112f7:	jmp    40e3f0 <_start@@Base+0x7a90>
  4112fc:	mov    rdi,QWORD PTR [r15]
  4112ff:	call   418670 <flatcc_builder_end_vector@@Base>
  411304:	mov    DWORD PTR [rsp+0x28],eax
  411308:	test   eax,eax
  41130a:	je     411fd8 <_start@@Base+0xb678>
  411310:	mov    rdi,QWORD PTR [r15]
  411313:	mov    esi,0x18
  411318:	call   419420 <flatcc_builder_table_add_offset@@Base>
  41131d:	test   rax,rax
  411320:	je     411fd0 <_start@@Base+0xb670>
  411326:	mov    edx,DWORD PTR [rsp+0x28]
  41132a:	mov    DWORD PTR [rax],edx
  41132c:	jmp    40e3f0 <_start@@Base+0x7a90>
  411331:	mov    r14,r13
  411334:	jmp    40dc47 <_start@@Base+0x72e7>
  411339:	cmp    rax,0x7f
  41133d:	ja     4119b0 <_start@@Base+0xb050>
  411343:	mov    edx,eax
  411345:	mov    BYTE PTR [rsp+0x30],al
  411349:	jmp    40de18 <_start@@Base+0x74b8>
  41134e:	mov    rdx,rbx
  411351:	mov    rsi,rbp
  411354:	mov    rdi,r15
  411357:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  41135c:	mov    r13,rax
  41135f:	jmp    40e3f0 <_start@@Base+0x7a90>
  411364:	mov    r8,r12
  411367:	lea    rcx,[rip+0x27e52]        # 4391c0 <__data_start@@Base+0x100>
  41136e:	mov    rdx,rbx
  411371:	mov    rsi,rax
  411374:	mov    rdi,r15
  411377:	call   40a550 <_start@@Base+0x3bf0>
  41137c:	cmp    r13,rax
  41137f:	je     411b19 <_start@@Base+0xb1b9>
  411385:	cmp    rbx,rax
  411388:	je     411b19 <_start@@Base+0xb1b9>
  41138e:	mov    r13,rax
  411391:	jmp    40fb9a <_start@@Base+0x923a>
  411396:	mov    rdx,rbx
  411399:	mov    rsi,rbp
  41139c:	mov    rdi,r15
  41139f:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  4113a4:	mov    r13,rax
  4113a7:	jmp    40e3f0 <_start@@Base+0x7a90>
  4113ac:	mov    rdx,rbx
  4113af:	mov    rsi,rbp
  4113b2:	mov    rdi,r15
  4113b5:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  4113ba:	mov    r13,rax
  4113bd:	jmp    40e3f0 <_start@@Base+0x7a90>
  4113c2:	mov    rsi,r14
  4113c5:	mov    ecx,0x1d
  4113ca:	mov    rdx,rbx
  4113cd:	mov    rdi,r15
  4113d0:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  4113d5:	mov    r14,rax
  4113d8:	jmp    40dc47 <_start@@Base+0x72e7>
  4113dd:	mov    r8,r12
  4113e0:	lea    rcx,[rip+0x282b9]        # 4396a0 <__data_start@@Base+0x5e0>
  4113e7:	mov    rdx,rbx
  4113ea:	mov    rsi,rax
  4113ed:	mov    rdi,r15
  4113f0:	call   40a550 <_start@@Base+0x3bf0>
  4113f5:	cmp    r13,rax
  4113f8:	je     411f7e <_start@@Base+0xb61e>
  4113fe:	cmp    rbx,rax
  411401:	je     411f7e <_start@@Base+0xb61e>
  411407:	mov    r13,rax
  41140a:	jmp    40ef09 <_start@@Base+0x85a9>
  41140f:	mov    rsi,r9
  411412:	mov    r8,r12
  411415:	lea    rcx,[rip+0x27d84]        # 4391a0 <__data_start@@Base+0xe0>
  41141c:	mov    rdx,rbx
  41141f:	mov    rdi,r15
  411422:	call   40a550 <_start@@Base+0x3bf0>
  411427:	mov    r9,QWORD PTR [rsp+0x8]
  41142c:	cmp    r9,rax
  41142f:	je     411b19 <_start@@Base+0xb1b9>
  411435:	cmp    rbx,rax
  411438:	je     411b19 <_start@@Base+0xb1b9>
  41143e:	mov    r13,rax
  411441:	jmp    40fa1d <_start@@Base+0x90bd>
  411446:	mov    BYTE PTR [rsp+0x30],0x1
  41144b:	lea    r13,[rbp+0x4]
  41144f:	jmp    40f53e <_start@@Base+0x8bde>
  411454:	mov    esi,DWORD PTR [rsp+0x34]
  411458:	mov    ecx,0x8
  41145d:	test   esi,esi
  41145f:	jne    411aa2 <_start@@Base+0xb142>
  411465:	mov    rax,QWORD PTR [rsp+0x40]
  41146a:	cmp    rax,0xff
  411470:	ja     411a9d <_start@@Base+0xb13d>
  411476:	test   al,al
  411478:	setne  al
  41147b:	mov    BYTE PTR [rsp+0x30],al
  41147f:	mov    r13,r12
  411482:	jmp    40f536 <_start@@Base+0x8bd6>
  411487:	mov    rdx,rbx
  41148a:	mov    rsi,rbp
  41148d:	mov    rdi,r15
  411490:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  411495:	mov    r13,rax
  411498:	jmp    40e3f0 <_start@@Base+0x7a90>
  41149d:	mov    r8d,DWORD PTR [r15+0x1c]
  4114a1:	test   r8d,r8d
  4114a4:	jne    40fdda <_start@@Base+0x947a>
  4114aa:	mov    rdi,QWORD PTR [r15]
  4114ad:	call   418350 <flatcc_builder_end_table@@Base>
  4114b2:	mov    DWORD PTR [rsp+0x28],eax
  4114b6:	test   eax,eax
  4114b8:	jne    40fdfc <_start@@Base+0x949c>
  4114be:	jmp    40fdda <_start@@Base+0x947a>
  4114c3:	mov    rdx,rbx
  4114c6:	mov    rsi,rbp
  4114c9:	mov    rdi,r15
  4114cc:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  4114d1:	mov    r13,rax
  4114d4:	jmp    40e3f0 <_start@@Base+0x7a90>
  4114d9:	mov    rdx,rbx
  4114dc:	mov    rsi,rbp
  4114df:	mov    rdi,r15
  4114e2:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  4114e7:	mov    r13,rax
  4114ea:	jmp    40e3f0 <_start@@Base+0x7a90>
  4114ef:	mov    r14,QWORD PTR [rsp+0x8]
  4114f4:	mov    eax,DWORD PTR [r15+0x1c]
  4114f8:	test   eax,eax
  4114fa:	jne    410d9e <_start@@Base+0xa43e>
  411500:	mov    rdi,QWORD PTR [r15]
  411503:	call   418350 <flatcc_builder_end_table@@Base>
  411508:	mov    DWORD PTR [rsp+0x28],eax
  41150c:	test   eax,eax
  41150e:	jne    410dc0 <_start@@Base+0xa460>
  411514:	jmp    410d9e <_start@@Base+0xa43e>
  411519:	lea    r12,[rbp+0x8]
  41151d:	mov    r8,rbx
  411520:	sub    r8,r12
  411523:	cmp    r8,0x7
  411527:	ja     411b95 <_start@@Base+0xb235>
  41152d:	mov    rsi,rbx
  411530:	mov    rdi,r12
  411533:	call   406a50 <_start@@Base+0xf0>
  411538:	movabs rdx,0xff00000000000000
  411542:	and    rax,rdx
  411545:	movabs rdx,0x6100000000000000
  41154f:	cmp    rax,rdx
  411552:	jne    411a48 <_start@@Base+0xb0e8>
  411558:	cmp    r8,0x1
  41155c:	jle    411cd8 <_start@@Base+0xb378>
  411562:	mov    ecx,0x1
  411567:	mov    rdx,rbx
  41156a:	mov    rsi,r12
  41156d:	mov    rdi,r15
  411570:	call   40b830 <_start@@Base+0x4ed0>
  411575:	mov    rbp,rax
  411578:	cmp    r12,rax
  41157b:	je     411cd8 <_start@@Base+0xb378>
  411581:	lea    r12,[rsp+0x40]
  411586:	mov    rcx,r12
  411589:	mov    rdx,rbx
  41158c:	mov    rsi,rax
  41158f:	mov    rdi,r15
  411592:	mov    QWORD PTR [rsp+0x40],0x0
  41159b:	call   408f90 <_start@@Base+0x2630>
  4115a0:	mov    r13,rax
  4115a3:	cmp    rax,rbp
  4115a6:	je     411eea <_start@@Base+0xb58a>
  4115ac:	cmp    QWORD PTR [rsp+0x40],0x0
  4115b2:	jne    4115bf <_start@@Base+0xac5f>
  4115b4:	test   BYTE PTR [r15+0x10],0x2
  4115b9:	je     40e3f0 <_start@@Base+0x7a90>
  4115bf:	mov    rdi,QWORD PTR [r15]
  4115c2:	mov    ecx,0x8
  4115c7:	mov    edx,0x8
  4115cc:	mov    esi,0x16
  4115d1:	call   419250 <flatcc_builder_table_add@@Base>
  4115d6:	test   rax,rax
  4115d9:	je     412069 <_start@@Base+0xb709>
  4115df:	mov    rdx,QWORD PTR [rsp+0x40]
  4115e4:	mov    QWORD PTR [rax],rdx
  4115e7:	jmp    40e3f0 <_start@@Base+0x7a90>
  4115ec:	lea    rcx,[rip+0x27aed]        # 4390e0 <__data_start@@Base+0x20>
  4115f3:	mov    rdx,rbx
  4115f6:	mov    rsi,rax
  4115f9:	mov    rdi,r15
  4115fc:	call   40b5a0 <_start@@Base+0x4c40>
  411601:	cmp    r13,rax
  411604:	je     410d96 <_start@@Base+0xa436>
  41160a:	cmp    rbx,rax
  41160d:	je     410d96 <_start@@Base+0xa436>
  411613:	mov    r13,rax
  411616:	jmp    410a0c <_start@@Base+0xa0ac>
  41161b:	mov    r13,rbp
  41161e:	jmp    40eb1e <_start@@Base+0x81be>
  411623:	movbe  rax,QWORD PTR [r13+0x10]
  411629:	jmp    410c0f <_start@@Base+0xa2af>
  41162e:	mov    rdx,rbx
  411631:	mov    rsi,r12
  411634:	mov    rdi,r15
  411637:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  41163c:	mov    r13,rax
  41163f:	jmp    40e3f0 <_start@@Base+0x7a90>
  411644:	inc    rsi
  411647:	mov    rdx,rbx
  41164a:	mov    rdi,r15
  41164d:	call   407a60 <_start@@Base+0x1100>
  411652:	mov    r9,rax
  411655:	jmp    40fe8e <_start@@Base+0x952e>
  41165a:	inc    rsi
  41165d:	mov    rdx,rbx
  411660:	mov    rdi,r15
  411663:	call   407a60 <_start@@Base+0x1100>
  411668:	mov    r9,rax
  41166b:	jmp    40f884 <_start@@Base+0x8f24>
  411670:	mov    rdi,QWORD PTR [r15]
  411673:	call   417830 <flatcc_builder_start_offset_vector@@Base>
  411678:	test   eax,eax
  41167a:	jne    412081 <_start@@Base+0xb721>
  411680:	mov    rsi,r13
  411683:	mov    rcx,r14
  411686:	mov    rdx,rbx
  411689:	mov    rdi,r15
  41168c:	call   40b790 <_start@@Base+0x4e30>
  411691:	mov    r13,rax
  411694:	mov    eax,DWORD PTR [rsp+0x24]
  411698:	test   eax,eax
  41169a:	je     4116f9 <_start@@Base+0xad99>
  41169c:	lea    rbp,[rsp+0x28]
  4116a1:	mov    rsi,r13
  4116a4:	mov    rcx,rbp
  4116a7:	mov    rdx,rbx
  4116aa:	mov    rdi,r15
  4116ad:	call   40dc00 <_start@@Base+0x72a0>
  4116b2:	mov    r13,rax
  4116b5:	mov    eax,DWORD PTR [rsp+0x28]
  4116b9:	test   eax,eax
  4116bb:	je     411c38 <_start@@Base+0xb2d8>
  4116c1:	mov    rdi,QWORD PTR [r15]
  4116c4:	mov    esi,0x1
  4116c9:	call   4172e0 <flatcc_builder_extend_offset_vector@@Base>
  4116ce:	test   rax,rax
  4116d1:	je     411c58 <_start@@Base+0xb2f8>
  4116d7:	mov    edx,DWORD PTR [rsp+0x28]
  4116db:	mov    rsi,r13
  4116de:	mov    DWORD PTR [rax],edx
  4116e0:	mov    rcx,r14
  4116e3:	mov    rdx,rbx
  4116e6:	mov    rdi,r15
  4116e9:	call   40c2c0 <_start@@Base+0x5960>
  4116ee:	mov    r13,rax
  4116f1:	mov    eax,DWORD PTR [rsp+0x24]
  4116f5:	test   eax,eax
  4116f7:	jne    4116a1 <_start@@Base+0xad41>
  4116f9:	mov    rdi,QWORD PTR [r15]
  4116fc:	call   418790 <flatcc_builder_end_offset_vector@@Base>
  411701:	mov    DWORD PTR [rsp+0x28],eax
  411705:	test   eax,eax
  411707:	je     412189 <_start@@Base+0xb829>
  41170d:	mov    rdi,QWORD PTR [r15]
  411710:	mov    esi,0xb
  411715:	call   419420 <flatcc_builder_table_add_offset@@Base>
  41171a:	test   rax,rax
  41171d:	je     412181 <_start@@Base+0xb821>
  411723:	mov    edx,DWORD PTR [rsp+0x28]
  411727:	mov    DWORD PTR [rax],edx
  411729:	jmp    40e3f0 <_start@@Base+0x7a90>
  41172e:	mov    ecx,0x7
  411733:	mov    rdx,rbx
  411736:	mov    rsi,r10
  411739:	mov    rdi,r15
  41173c:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  411741:	mov    r13,rax
  411744:	cmp    r14,rax
  411747:	jne    40e6be <_start@@Base+0x7d5e>
  41174d:	mov    r10,r14
  411750:	jmp    40e687 <_start@@Base+0x7d27>
  411755:	nop    DWORD PTR [rax]
  411758:	mov    r14,r13
  41175b:	jmp    40dc47 <_start@@Base+0x72e7>
  411760:	mov    rdx,rbx
  411763:	mov    rsi,rbp
  411766:	mov    rdi,r15
  411769:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  41176e:	mov    r13,rax
  411771:	jmp    40e3f0 <_start@@Base+0x7a90>
  411776:	cmp    BYTE PTR [r12+0x2],0x20
  41177c:	jle    4102db <_start@@Base+0x997b>
  411782:	lea    r13,[r12+0x2]
  411787:	jmp    40e3f0 <_start@@Base+0x7a90>
  41178c:	mov    r8,r12
  41178f:	lea    rcx,[rip+0x27f2a]        # 4396c0 <__data_start@@Base+0x600>
  411796:	mov    rdx,rbx
  411799:	mov    rsi,rax
  41179c:	mov    rdi,r15
  41179f:	call   40a550 <_start@@Base+0x3bf0>
  4117a4:	cmp    r13,rax
  4117a7:	je     4120a1 <_start@@Base+0xb741>
  4117ad:	cmp    rbx,rax
  4117b0:	je     4120a1 <_start@@Base+0xb741>
  4117b6:	mov    r13,rax
  4117b9:	jmp    40f473 <_start@@Base+0x8b13>
  4117be:	inc    rsi
  4117c1:	mov    rdx,rbx
  4117c4:	mov    rdi,r15
  4117c7:	call   407a60 <_start@@Base+0x1100>
  4117cc:	mov    rsi,rax
  4117cf:	jmp    40f611 <_start@@Base+0x8cb1>
  4117d4:	inc    rsi
  4117d7:	mov    rdx,rbx
  4117da:	mov    rdi,r15
  4117dd:	call   407a60 <_start@@Base+0x1100>
  4117e2:	mov    r9,rax
  4117e5:	jmp    40f791 <_start@@Base+0x8e31>
  4117ea:	movbe  rax,QWORD PTR [rbp+0x8]
  4117f0:	jmp    4106af <_start@@Base+0x9d4f>
  4117f5:	mov    rdx,rbx
  4117f8:	mov    rsi,rbp
  4117fb:	mov    rdi,r15
  4117fe:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  411803:	mov    r13,rax
  411806:	jmp    40e3f0 <_start@@Base+0x7a90>
  41180b:	lea    r12,[rbp+0x8]
  41180f:	mov    r8,rbx
  411812:	sub    r8,r12
  411815:	cmp    r8,0x7
  411819:	ja     411c7b <_start@@Base+0xb31b>
  41181f:	mov    rsi,rbx
  411822:	mov    rdi,r12
  411825:	call   406a50 <_start@@Base+0xf0>
  41182a:	movabs rdx,0xff00000000000000
  411834:	and    rax,rdx
  411837:	movabs rdx,0x6100000000000000
  411841:	cmp    rax,rdx
  411844:	jne    411b7f <_start@@Base+0xb21f>
  41184a:	cmp    r8,0x1
  41184e:	jle    411cf6 <_start@@Base+0xb396>
  411854:	mov    ecx,0x1
  411859:	mov    rdx,rbx
  41185c:	mov    rsi,r12
  41185f:	mov    rdi,r15
  411862:	call   40b830 <_start@@Base+0x4ed0>
  411867:	mov    rbp,rax
  41186a:	cmp    r12,rax
  41186d:	je     411cf6 <_start@@Base+0xb396>
  411873:	lea    r12,[rsp+0x40]
  411878:	mov    rcx,r12
  41187b:	mov    rdx,rbx
  41187e:	mov    rsi,rax
  411881:	mov    rdi,r15
  411884:	mov    QWORD PTR [rsp+0x40],0x0
  41188d:	call   4092a0 <_start@@Base+0x2940>
  411892:	mov    r13,rax
  411895:	cmp    rax,rbp
  411898:	je     411f86 <_start@@Base+0xb626>
  41189e:	cmp    QWORD PTR [rsp+0x40],0x0
  4118a4:	jne    4118b1 <_start@@Base+0xaf51>
  4118a6:	test   BYTE PTR [r15+0x10],0x2
  4118ab:	je     40e3f0 <_start@@Base+0x7a90>
  4118b1:	mov    rdi,QWORD PTR [r15]
  4118b4:	mov    ecx,0x8
  4118b9:	mov    edx,0x8
  4118be:	mov    esi,0x17
  4118c3:	call   419250 <flatcc_builder_table_add@@Base>
  4118c8:	test   rax,rax
  4118cb:	je     412151 <_start@@Base+0xb7f1>
  4118d1:	mov    rdx,QWORD PTR [rsp+0x40]
  4118d6:	mov    QWORD PTR [rax],rdx
  4118d9:	jmp    40e3f0 <_start@@Base+0x7a90>
  4118de:	lea    r12,[rbp+0x8]
  4118e2:	mov    r8,rbx
  4118e5:	sub    r8,r12
  4118e8:	cmp    r8,0x7
  4118ec:	ja     411c60 <_start@@Base+0xb300>
  4118f2:	mov    rsi,rbx
  4118f5:	mov    rdi,r12
  4118f8:	call   406a50 <_start@@Base+0xf0>
  4118fd:	movabs rdx,0xff00000000000000
  411907:	and    rax,rdx
  41190a:	movabs rdx,0x6100000000000000
  411914:	cmp    rax,rdx
  411917:	jne    411b69 <_start@@Base+0xb209>
  41191d:	cmp    r8,0x1
  411921:	jle    411d70 <_start@@Base+0xb410>
  411927:	mov    ecx,0x1
  41192c:	mov    rdx,rbx
  41192f:	mov    rsi,r12
  411932:	mov    rdi,r15
  411935:	call   40b830 <_start@@Base+0x4ed0>
  41193a:	mov    rbp,rax
  41193d:	cmp    r12,rax
  411940:	je     411d70 <_start@@Base+0xb410>
  411946:	lea    r12,[rsp+0x40]
  41194b:	mov    rcx,r12
  41194e:	mov    rdx,rbx
  411951:	mov    rsi,rax
  411954:	mov    rdi,r15
  411957:	mov    DWORD PTR [rsp+0x40],0x0
  41195f:	call   409370 <_start@@Base+0x2a10>
  411964:	mov    r13,rax
  411967:	cmp    rax,rbp
  41196a:	je     411f2c <_start@@Base+0xb5cc>
  411970:	mov    r11d,DWORD PTR [rsp+0x40]
  411975:	test   r11d,r11d
  411978:	jne    411985 <_start@@Base+0xb025>
  41197a:	test   BYTE PTR [r15+0x10],0x2
  41197f:	je     40e3f0 <_start@@Base+0x7a90>
  411985:	mov    rdi,QWORD PTR [r15]
  411988:	mov    ecx,0x4
  41198d:	mov    edx,0x4
  411992:	mov    esi,0x15
  411997:	call   419250 <flatcc_builder_table_add@@Base>
  41199c:	test   rax,rax
  41199f:	je     412131 <_start@@Base+0xb7d1>
  4119a5:	mov    edx,DWORD PTR [rsp+0x40]
  4119a9:	mov    DWORD PTR [rax],edx
  4119ab:	jmp    40e3f0 <_start@@Base+0x7a90>
  4119b0:	mov    ecx,0x7
  4119b5:	mov    rsi,r13
  4119b8:	mov    rdx,rbx
  4119bb:	mov    rdi,r15
  4119be:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  4119c3:	mov    r13,rax
  4119c6:	cmp    rbp,rax
  4119c9:	je     40dddf <_start@@Base+0x747f>
  4119cf:	movzx  edx,BYTE PTR [rsp+0x30]
  4119d4:	jmp    40de18 <_start@@Base+0x74b8>
  4119d9:	mov    r14,r13
  4119dc:	jmp    40dc47 <_start@@Base+0x72e7>
  4119e1:	mov    rdi,QWORD PTR [r15]
  4119e4:	call   418670 <flatcc_builder_end_vector@@Base>
  4119e9:	mov    DWORD PTR [rsp+0x28],eax
  4119ed:	test   eax,eax
  4119ef:	je     412129 <_start@@Base+0xb7c9>
  4119f5:	mov    rdi,QWORD PTR [r15]
  4119f8:	mov    esi,0x20
  4119fd:	call   419420 <flatcc_builder_table_add_offset@@Base>
  411a02:	test   rax,rax
  411a05:	je     412121 <_start@@Base+0xb7c1>
  411a0b:	mov    edx,DWORD PTR [rsp+0x28]
  411a0f:	mov    DWORD PTR [rax],edx
  411a11:	jmp    40e3f0 <_start@@Base+0x7a90>
  411a16:	mov    r8,r12
  411a19:	lea    rcx,[rip+0x27d20]        # 439740 <__data_start@@Base+0x680>
  411a20:	mov    rdx,rbx
  411a23:	mov    rsi,rax
  411a26:	mov    rdi,r15
  411a29:	call   40b3c0 <_start@@Base+0x4a60>
  411a2e:	cmp    r13,rax
  411a31:	je     412089 <_start@@Base+0xb729>
  411a37:	cmp    rbx,rax
  411a3a:	je     412089 <_start@@Base+0xb729>
  411a40:	mov    r13,rax
  411a43:	jmp    40efdf <_start@@Base+0x867f>
  411a48:	mov    rdx,rbx
  411a4b:	mov    rsi,r12
  411a4e:	mov    rdi,r15
  411a51:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  411a56:	mov    r13,rax
  411a59:	jmp    40e3f0 <_start@@Base+0x7a90>
  411a5e:	mov    r14,QWORD PTR [rsp+0x8]
  411a63:	jmp    410d9e <_start@@Base+0xa43e>
  411a68:	mov    rdi,QWORD PTR [r15]
  411a6b:	call   418670 <flatcc_builder_end_vector@@Base>
  411a70:	mov    DWORD PTR [rsp+0x28],eax
  411a74:	test   eax,eax
  411a76:	je     4120b9 <_start@@Base+0xb759>
  411a7c:	mov    rdi,QWORD PTR [r15]
  411a7f:	mov    esi,0x5
  411a84:	call   419420 <flatcc_builder_table_add_offset@@Base>
  411a89:	test   rax,rax
  411a8c:	je     4120b1 <_start@@Base+0xb751>
  411a92:	mov    edx,DWORD PTR [rsp+0x28]
  411a96:	mov    DWORD PTR [rax],edx
  411a98:	jmp    40e3f0 <_start@@Base+0x7a90>
  411a9d:	mov    ecx,0x7
  411aa2:	mov    rdx,rbx
  411aa5:	mov    rsi,r12
  411aa8:	mov    rdi,r15
  411aab:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  411ab0:	mov    r13,rax
  411ab3:	mov    BYTE PTR [rsp+0x30],0x0
  411ab8:	cmp    rbp,rax
  411abb:	jne    40df1f <_start@@Base+0x75bf>
  411ac1:	mov    r12,rbp
  411ac4:	jmp    40f502 <_start@@Base+0x8ba2>
  411ac9:	mov    r8,rbp
  411acc:	lea    rcx,[rip+0x27b8d]        # 439660 <__data_start@@Base+0x5a0>
  411ad3:	mov    rdx,rbx
  411ad6:	mov    rsi,rax
  411ad9:	mov    rdi,r15
  411adc:	call   40aff0 <_start@@Base+0x4690>
  411ae1:	cmp    r13,rax
  411ae4:	je     412159 <_start@@Base+0xb7f9>
  411aea:	cmp    rbx,rax
  411aed:	je     412159 <_start@@Base+0xb7f9>
  411af3:	mov    r13,rax
  411af6:	jmp    40ed00 <_start@@Base+0x83a0>
  411afb:	mov    r14,r13
  411afe:	jmp    40dc47 <_start@@Base+0x72e7>
  411b03:	mov    rdx,rbx
  411b06:	mov    rsi,rbp
  411b09:	mov    rdi,r15
  411b0c:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  411b11:	mov    r13,rax
  411b14:	jmp    40e3f0 <_start@@Base+0x7a90>
  411b19:	mov    ecx,0x21
  411b1e:	mov    rdx,rbx
  411b21:	mov    rsi,rax
  411b24:	mov    rdi,r15
  411b27:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  411b2c:	mov    r13,rax
  411b2f:	jmp    40e3f0 <_start@@Base+0x7a90>
  411b34:	mov    rdi,QWORD PTR [r15]
  411b37:	call   418790 <flatcc_builder_end_offset_vector@@Base>
  411b3c:	mov    DWORD PTR [rsp+0x28],eax
  411b40:	test   eax,eax
  411b42:	je     4120f9 <_start@@Base+0xb799>
  411b48:	mov    rdi,QWORD PTR [r15]
  411b4b:	mov    esi,0x1c
  411b50:	call   419420 <flatcc_builder_table_add_offset@@Base>
  411b55:	test   rax,rax
  411b58:	je     4120f1 <_start@@Base+0xb791>
  411b5e:	mov    edx,DWORD PTR [rsp+0x28]
  411b62:	mov    DWORD PTR [rax],edx
  411b64:	jmp    40e3f0 <_start@@Base+0x7a90>
  411b69:	mov    rdx,rbx
  411b6c:	mov    rsi,r12
  411b6f:	mov    rdi,r15
  411b72:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  411b77:	mov    r13,rax
  411b7a:	jmp    40e3f0 <_start@@Base+0x7a90>
  411b7f:	mov    rdx,rbx
  411b82:	mov    rsi,r12
  411b85:	mov    rdi,r15
  411b88:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  411b8d:	mov    r13,rax
  411b90:	jmp    40e3f0 <_start@@Base+0x7a90>
  411b95:	movbe  rax,QWORD PTR [rbp+0x8]
  411b9b:	jmp    411538 <_start@@Base+0xabd8>
  411ba0:	mov    rdx,rbx
  411ba3:	mov    rsi,r12
  411ba6:	mov    rdi,r15
  411ba9:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  411bae:	mov    r13,rax
  411bb1:	jmp    40e3f0 <_start@@Base+0x7a90>
  411bb6:	mov    r14,r13
  411bb9:	jmp    40dc47 <_start@@Base+0x72e7>
  411bbe:	mov    rdi,QWORD PTR [r15]
  411bc1:	call   418790 <flatcc_builder_end_offset_vector@@Base>
  411bc6:	mov    DWORD PTR [rsp+0x28],eax
  411bca:	test   eax,eax
  411bcc:	je     412171 <_start@@Base+0xb811>
  411bd2:	mov    rdi,QWORD PTR [r15]
  411bd5:	mov    esi,0xa
  411bda:	call   419420 <flatcc_builder_table_add_offset@@Base>
  411bdf:	test   rax,rax
  411be2:	je     412169 <_start@@Base+0xb809>
  411be8:	mov    edx,DWORD PTR [rsp+0x28]
  411bec:	mov    DWORD PTR [rax],edx
  411bee:	jmp    40e3f0 <_start@@Base+0x7a90>
  411bf3:	mov    r14,r13
  411bf6:	jmp    40dc47 <_start@@Base+0x72e7>
  411bfb:	mov    rdi,QWORD PTR [r15]
  411bfe:	call   418670 <flatcc_builder_end_vector@@Base>
  411c03:	mov    DWORD PTR [rsp+0x28],eax
  411c07:	test   eax,eax
  411c09:	je     412099 <_start@@Base+0xb739>
  411c0f:	mov    rdi,QWORD PTR [r15]
  411c12:	mov    esi,0x21
  411c17:	call   419420 <flatcc_builder_table_add_offset@@Base>
  411c1c:	test   rax,rax
  411c1f:	je     412091 <_start@@Base+0xb731>
  411c25:	mov    edx,DWORD PTR [rsp+0x28]
  411c29:	mov    DWORD PTR [rax],edx
  411c2b:	jmp    40e3f0 <_start@@Base+0x7a90>
  411c30:	mov    r14,r13
  411c33:	jmp    40dc47 <_start@@Base+0x72e7>
  411c38:	mov    r14,r13
  411c3b:	jmp    40dc47 <_start@@Base+0x72e7>
  411c40:	mov    r14,rax
  411c43:	jmp    40dc47 <_start@@Base+0x72e7>
  411c48:	mov    r14,r13
  411c4b:	jmp    40dc47 <_start@@Base+0x72e7>
  411c50:	mov    r14,r13
  411c53:	jmp    40dc47 <_start@@Base+0x72e7>
  411c58:	mov    r14,r13
  411c5b:	jmp    40dc47 <_start@@Base+0x72e7>
  411c60:	movbe  rax,QWORD PTR [rbp+0x8]
  411c66:	jmp    4118fd <_start@@Base+0xaf9d>
  411c6b:	mov    r14,rax
  411c6e:	jmp    40dc47 <_start@@Base+0x72e7>
  411c73:	mov    r14,rax
  411c76:	jmp    40dc47 <_start@@Base+0x72e7>
  411c7b:	movbe  rax,QWORD PTR [rbp+0x8]
  411c81:	jmp    41182a <_start@@Base+0xaeca>
  411c86:	mov    r8,rbp
  411c89:	lea    rcx,[rip+0x27990]        # 439620 <__data_start@@Base+0x560>
  411c90:	mov    rdx,rbx
  411c93:	mov    rsi,rax
  411c96:	mov    rdi,r15
  411c99:	call   40b5a0 <_start@@Base+0x4c40>
  411c9e:	cmp    r13,rax
  411ca1:	je     412061 <_start@@Base+0xb701>
  411ca7:	cmp    rbx,rax
  411caa:	je     412061 <_start@@Base+0xb701>
  411cb0:	mov    r13,rax
  411cb3:	jmp    4100ea <_start@@Base+0x978a>
  411cb8:	mov    r14,rax
  411cbb:	jmp    40dc47 <_start@@Base+0x72e7>
  411cc0:	mov    r14,r13
  411cc3:	jmp    40dc47 <_start@@Base+0x72e7>
  411cc8:	mov    r14,r13
  411ccb:	jmp    40dc47 <_start@@Base+0x72e7>
  411cd0:	mov    r14,rbp
  411cd3:	jmp    40dc47 <_start@@Base+0x72e7>
  411cd8:	mov    rdx,rbx
  411cdb:	mov    rsi,r12
  411cde:	mov    rdi,r15
  411ce1:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  411ce6:	mov    r13,rax
  411ce9:	jmp    40e3f0 <_start@@Base+0x7a90>
  411cee:	mov    r14,rbp
  411cf1:	jmp    40dc47 <_start@@Base+0x72e7>
  411cf6:	mov    rdx,rbx
  411cf9:	mov    rsi,r12
  411cfc:	mov    rdi,r15
  411cff:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  411d04:	mov    r13,rax
  411d07:	jmp    40e3f0 <_start@@Base+0x7a90>
  411d0c:	mov    r8,r12
  411d0f:	lea    rcx,[rip+0x2792a]        # 439640 <__data_start@@Base+0x580>
  411d16:	mov    rdx,rbx
  411d19:	mov    rsi,rax
  411d1c:	mov    rdi,r15
  411d1f:	call   40aff0 <_start@@Base+0x4690>
  411d24:	cmp    r13,rax
  411d27:	je     4120d9 <_start@@Base+0xb779>
  411d2d:	cmp    rbx,rax
  411d30:	je     4120d9 <_start@@Base+0xb779>
  411d36:	mov    r13,rax
  411d39:	jmp    410722 <_start@@Base+0x9dc2>
  411d3e:	mov    r8,rbp
  411d41:	lea    rcx,[rip+0x27858]        # 4395a0 <__data_start@@Base+0x4e0>
  411d48:	mov    rdx,rbx
  411d4b:	mov    rsi,rax
  411d4e:	mov    rdi,r15
  411d51:	call   40a8d0 <_start@@Base+0x3f70>
  411d56:	cmp    r13,rax
  411d59:	je     412179 <_start@@Base+0xb819>
  411d5f:	cmp    rbx,rax
  411d62:	je     412179 <_start@@Base+0xb819>
  411d68:	mov    r13,rax
  411d6b:	jmp    41039a <_start@@Base+0x9a3a>
  411d70:	mov    rdx,rbx
  411d73:	mov    rsi,r12
  411d76:	mov    rdi,r15
  411d79:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  411d7e:	mov    r13,rax
  411d81:	jmp    40e3f0 <_start@@Base+0x7a90>
  411d86:	mov    r14,rbp
  411d89:	jmp    40dc47 <_start@@Base+0x72e7>
  411d8e:	mov    r14,rbp
  411d91:	jmp    40dc47 <_start@@Base+0x72e7>
  411d96:	mov    r14,r13
  411d99:	jmp    40dc47 <_start@@Base+0x72e7>
  411d9e:	mov    ecx,0xffffffff
  411da3:	mov    edx,0x1
  411da8:	mov    esi,0x1
  411dad:	call   4177b0 <flatcc_builder_start_vector@@Base>
  411db2:	test   eax,eax
  411db4:	jne    412101 <_start@@Base+0xb7a1>
  411dba:	mov    rcx,r14
  411dbd:	mov    rdx,rbx
  411dc0:	mov    rsi,r13
  411dc3:	mov    rdi,r15
  411dc6:	call   40b790 <_start@@Base+0x4e30>
  411dcb:	mov    r10d,DWORD PTR [rsp+0x24]
  411dd0:	mov    rbp,rax
  411dd3:	test   r10d,r10d
  411dd6:	je     412018 <_start@@Base+0xb6b8>
  411ddc:	lea    r12,[rsp+0x40]
  411de1:	jmp    411e13 <_start@@Base+0xb4b3>
  411de3:	nop    DWORD PTR [rax+rax*1+0x0]
  411de8:	movzx  edx,BYTE PTR [rsp+0x40]
  411ded:	mov    rcx,r14
  411df0:	mov    BYTE PTR [r13+0x0],dl
  411df4:	mov    rsi,rax
  411df7:	mov    rdx,rbx
  411dfa:	mov    rdi,r15
  411dfd:	call   40c2c0 <_start@@Base+0x5960>
  411e02:	mov    r9d,DWORD PTR [rsp+0x24]
  411e07:	mov    rbp,rax
  411e0a:	test   r9d,r9d
  411e0d:	je     412018 <_start@@Base+0xb6b8>
  411e13:	mov    rdi,QWORD PTR [r15]
  411e16:	mov    esi,0x1
  411e1b:	mov    BYTE PTR [rsp+0x40],0x0
  411e20:	call   417100 <flatcc_builder_extend_vector@@Base>
  411e25:	mov    r13,rax
  411e28:	test   rax,rax
  411e2b:	je     412010 <_start@@Base+0xb6b0>
  411e31:	mov    rcx,r12
  411e34:	mov    rdx,rbx
  411e37:	mov    rsi,rbp
  411e3a:	mov    rdi,r15
  411e3d:	call   409440 <_start@@Base+0x2ae0>
  411e42:	cmp    rax,rbp
  411e45:	jne    411de8 <_start@@Base+0xb488>
  411e47:	mov    r8,r12
  411e4a:	lea    rcx,[rip+0x2770f]        # 439560 <__data_start@@Base+0x4a0>
  411e51:	mov    rdx,rbx
  411e54:	mov    rsi,rbp
  411e57:	mov    rdi,r15
  411e5a:	call   40ae20 <_start@@Base+0x44c0>
  411e5f:	cmp    rax,rbp
  411e62:	je     412109 <_start@@Base+0xb7a9>
  411e68:	cmp    rbx,rax
  411e6b:	jne    411de8 <_start@@Base+0xb488>
  411e71:	mov    r14,rax
  411e74:	jmp    40dc47 <_start@@Base+0x72e7>
  411e79:	nop    DWORD PTR [rax+0x0]
  411e80:	mov    r8,rbp
  411e83:	lea    rcx,[rip+0x27756]        # 4395e0 <__data_start@@Base+0x520>
  411e8a:	mov    rdx,rbx
  411e8d:	mov    rsi,rax
  411e90:	mov    rdi,r15
  411e93:	call   40b1e0 <_start@@Base+0x4880>
  411e98:	cmp    r13,rax
  411e9b:	je     412119 <_start@@Base+0xb7b9>
  411ea1:	cmp    rbx,rax
  411ea4:	je     412119 <_start@@Base+0xb7b9>
  411eaa:	mov    r13,rax
  411ead:	jmp    4107ec <_start@@Base+0x9e8c>
  411eb2:	mov    r14,r13
  411eb5:	jmp    40dc47 <_start@@Base+0x72e7>
  411eba:	mov    r14,r13
  411ebd:	jmp    40dc47 <_start@@Base+0x72e7>
  411ec2:	mov    r14,r13
  411ec5:	jmp    40dc47 <_start@@Base+0x72e7>
  411eca:	mov    r14,r13
  411ecd:	jmp    40dc47 <_start@@Base+0x72e7>
  411ed2:	mov    r14,rax
  411ed5:	jmp    40dc47 <_start@@Base+0x72e7>
  411eda:	mov    r14,r13
  411edd:	jmp    40dc47 <_start@@Base+0x72e7>
  411ee2:	mov    r14,rax
  411ee5:	jmp    40dc47 <_start@@Base+0x72e7>
  411eea:	mov    r8,r12
  411eed:	lea    rcx,[rip+0x2770c]        # 439600 <__data_start@@Base+0x540>
  411ef4:	mov    rdx,rbx
  411ef7:	mov    rsi,rax
  411efa:	mov    rdi,r15
  411efd:	call   40b5a0 <_start@@Base+0x4c40>
  411f02:	cmp    r13,rax
  411f05:	je     412071 <_start@@Base+0xb711>
  411f0b:	cmp    rbx,rax
  411f0e:	je     412071 <_start@@Base+0xb711>
  411f14:	mov    r13,rax
  411f17:	jmp    4115ac <_start@@Base+0xac4c>
  411f1c:	mov    r14,r13
  411f1f:	jmp    40dc47 <_start@@Base+0x72e7>
  411f24:	mov    r14,r13
  411f27:	jmp    40dc47 <_start@@Base+0x72e7>
  411f2c:	mov    r8,r12
  411f2f:	lea    rcx,[rip+0x2768a]        # 4395c0 <__data_start@@Base+0x500>
  411f36:	mov    rdx,rbx
  411f39:	mov    rsi,rax
  411f3c:	mov    rdi,r15
  411f3f:	call   40b1e0 <_start@@Base+0x4880>
  411f44:	cmp    r13,rax
  411f47:	je     4120a9 <_start@@Base+0xb749>
  411f4d:	cmp    rbx,rax
  411f50:	je     4120a9 <_start@@Base+0xb749>
  411f56:	mov    r13,rax
  411f59:	jmp    411970 <_start@@Base+0xb010>
  411f5e:	mov    r14,r13
  411f61:	jmp    40dc47 <_start@@Base+0x72e7>
  411f66:	mov    r14,r13
  411f69:	jmp    40dc47 <_start@@Base+0x72e7>
  411f6e:	mov    r14,r13
  411f71:	jmp    40dc47 <_start@@Base+0x72e7>
  411f76:	mov    r14,r13
  411f79:	jmp    40dc47 <_start@@Base+0x72e7>
  411f7e:	mov    r14,rax
  411f81:	jmp    40dc47 <_start@@Base+0x72e7>
  411f86:	mov    r8,r12
  411f89:	lea    rcx,[rip+0x275f0]        # 439580 <__data_start@@Base+0x4c0>
  411f90:	mov    rdx,rbx
  411f93:	mov    rsi,rax
  411f96:	mov    rdi,r15
  411f99:	call   40a8d0 <_start@@Base+0x3f70>
  411f9e:	cmp    r13,rax
  411fa1:	je     412161 <_start@@Base+0xb801>
  411fa7:	cmp    rbx,rax
  411faa:	je     412161 <_start@@Base+0xb801>
  411fb0:	mov    r13,rax
  411fb3:	jmp    41189e <_start@@Base+0xaf3e>
  411fb8:	mov    r14,r13
  411fbb:	jmp    40dc47 <_start@@Base+0x72e7>
  411fc0:	mov    r14,r13
  411fc3:	jmp    40dc47 <_start@@Base+0x72e7>
  411fc8:	mov    r14,r13
  411fcb:	jmp    40dc47 <_start@@Base+0x72e7>
  411fd0:	mov    r14,r13
  411fd3:	jmp    40dc47 <_start@@Base+0x72e7>
  411fd8:	mov    r14,r13
  411fdb:	jmp    40dc47 <_start@@Base+0x72e7>
  411fe0:	mov    r14,r13
  411fe3:	jmp    40dc47 <_start@@Base+0x72e7>
  411fe8:	mov    r14,r13
  411feb:	jmp    40dc47 <_start@@Base+0x72e7>
  411ff0:	mov    r14,rax
  411ff3:	jmp    40dc47 <_start@@Base+0x72e7>
  411ff8:	mov    r14,r13
  411ffb:	jmp    40dc47 <_start@@Base+0x72e7>
  412000:	mov    r14,r13
  412003:	jmp    40dc47 <_start@@Base+0x72e7>
  412008:	mov    r14,r13
  41200b:	jmp    40dc47 <_start@@Base+0x72e7>
  412010:	mov    r14,rbp
  412013:	jmp    40dc47 <_start@@Base+0x72e7>
  412018:	mov    rdi,QWORD PTR [r15]
  41201b:	mov    r13,rbp
  41201e:	call   418670 <flatcc_builder_end_vector@@Base>
  412023:	mov    DWORD PTR [rsp+0x28],eax
  412027:	jmp    40e358 <_start@@Base+0x79f8>
  41202c:	call   4061a0 <__stack_chk_fail@plt>
  412031:	mov    r14,r13
  412034:	jmp    40dc47 <_start@@Base+0x72e7>
  412039:	mov    r14,rax
  41203c:	jmp    40dc47 <_start@@Base+0x72e7>
  412041:	mov    r14,r13
  412044:	jmp    40dc47 <_start@@Base+0x72e7>
  412049:	mov    r14,rax
  41204c:	jmp    40dc47 <_start@@Base+0x72e7>
  412051:	mov    r14,rax
  412054:	jmp    40dc47 <_start@@Base+0x72e7>
  412059:	mov    r14,r13
  41205c:	jmp    40dc47 <_start@@Base+0x72e7>
  412061:	mov    r14,rax
  412064:	jmp    40dc47 <_start@@Base+0x72e7>
  412069:	mov    r14,r13
  41206c:	jmp    40dc47 <_start@@Base+0x72e7>
  412071:	mov    r14,rax
  412074:	jmp    40dc47 <_start@@Base+0x72e7>
  412079:	mov    r14,r13
  41207c:	jmp    40dc47 <_start@@Base+0x72e7>
  412081:	mov    r14,r13
  412084:	jmp    40dc47 <_start@@Base+0x72e7>
  412089:	mov    r14,rax
  41208c:	jmp    40dc47 <_start@@Base+0x72e7>
  412091:	mov    r14,r13
  412094:	jmp    40dc47 <_start@@Base+0x72e7>
  412099:	mov    r14,r13
  41209c:	jmp    40dc47 <_start@@Base+0x72e7>
  4120a1:	mov    r14,rax
  4120a4:	jmp    40dc47 <_start@@Base+0x72e7>
  4120a9:	mov    r14,rax
  4120ac:	jmp    40dc47 <_start@@Base+0x72e7>
  4120b1:	mov    r14,r13
  4120b4:	jmp    40dc47 <_start@@Base+0x72e7>
  4120b9:	mov    r14,r13
  4120bc:	jmp    40dc47 <_start@@Base+0x72e7>
  4120c1:	mov    r14,r13
  4120c4:	jmp    40dc47 <_start@@Base+0x72e7>
  4120c9:	mov    r14,r13
  4120cc:	jmp    40dc47 <_start@@Base+0x72e7>
  4120d1:	mov    r14,r13
  4120d4:	jmp    40dc47 <_start@@Base+0x72e7>
  4120d9:	mov    r14,rax
  4120dc:	jmp    40dc47 <_start@@Base+0x72e7>
  4120e1:	mov    r14,r13
  4120e4:	jmp    40dc47 <_start@@Base+0x72e7>
  4120e9:	mov    r14,r13
  4120ec:	jmp    40dc47 <_start@@Base+0x72e7>
  4120f1:	mov    r14,r13
  4120f4:	jmp    40dc47 <_start@@Base+0x72e7>
  4120f9:	mov    r14,r13
  4120fc:	jmp    40dc47 <_start@@Base+0x72e7>
  412101:	mov    r14,r13
  412104:	jmp    40dc47 <_start@@Base+0x72e7>
  412109:	mov    r14,rax
  41210c:	jmp    40dc47 <_start@@Base+0x72e7>
  412111:	mov    r14,r13
  412114:	jmp    40dc47 <_start@@Base+0x72e7>
  412119:	mov    r14,rax
  41211c:	jmp    40dc47 <_start@@Base+0x72e7>
  412121:	mov    r14,r13
  412124:	jmp    40dc47 <_start@@Base+0x72e7>
  412129:	mov    r14,r13
  41212c:	jmp    40dc47 <_start@@Base+0x72e7>
  412131:	mov    r14,r13
  412134:	jmp    40dc47 <_start@@Base+0x72e7>
  412139:	mov    r14,rax
  41213c:	jmp    40dc47 <_start@@Base+0x72e7>
  412141:	mov    r14,r13
  412144:	jmp    40dc47 <_start@@Base+0x72e7>
  412149:	mov    r14,r13
  41214c:	jmp    40dc47 <_start@@Base+0x72e7>
  412151:	mov    r14,r13
  412154:	jmp    40dc47 <_start@@Base+0x72e7>
  412159:	mov    r14,rax
  41215c:	jmp    40dc47 <_start@@Base+0x72e7>
  412161:	mov    r14,rax
  412164:	jmp    40dc47 <_start@@Base+0x72e7>
  412169:	mov    r14,r13
  41216c:	jmp    40dc47 <_start@@Base+0x72e7>
  412171:	mov    r14,r13
  412174:	jmp    40dc47 <_start@@Base+0x72e7>
  412179:	mov    r14,rax
  41217c:	jmp    40dc47 <_start@@Base+0x72e7>
  412181:	mov    r14,r13
  412184:	jmp    40dc47 <_start@@Base+0x72e7>
  412189:	mov    r14,r13
  41218c:	jmp    40dc47 <_start@@Base+0x72e7>
  412191:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41219c:	nop    DWORD PTR [rax+0x0]
  4121a0:	endbr64 
  4121a4:	push   r15
  4121a6:	mov    r15,rsi
  4121a9:	mov    esi,0x4
  4121ae:	push   r14
  4121b0:	push   r13
  4121b2:	push   r12
  4121b4:	push   rbp
  4121b5:	mov    rbp,rdi
  4121b8:	push   rbx
  4121b9:	mov    rbx,rdx
  4121bc:	sub    rsp,0x58
  4121c0:	mov    QWORD PTR [rsp+0x8],rcx
  4121c5:	mov    rdi,QWORD PTR fs:0x28
  4121ce:	mov    QWORD PTR [rsp+0x48],rdi
  4121d3:	xor    edi,edi
  4121d5:	mov    DWORD PTR [rcx],0x0
  4121db:	mov    rdi,QWORD PTR [rbp+0x0]
  4121df:	call   4179d0 <flatcc_builder_start_table@@Base>
  4121e4:	test   eax,eax
  4121e6:	je     412228 <_start@@Base+0xb8c8>
  4121e8:	mov    ecx,0x21
  4121ed:	mov    rdx,rbx
  4121f0:	mov    rsi,r15
  4121f3:	mov    rdi,rbp
  4121f6:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  4121fb:	mov    r12,rax
  4121fe:	mov    rdi,QWORD PTR [rsp+0x48]
  412203:	xor    rdi,QWORD PTR fs:0x28
  41220c:	mov    rax,r12
  41220f:	jne    41446b <_start@@Base+0xdb0b>
  412215:	add    rsp,0x58
  412219:	pop    rbx
  41221a:	pop    rbp
  41221b:	pop    r12
  41221d:	pop    r13
  41221f:	pop    r14
  412221:	pop    r15
  412223:	ret    
  412224:	nop    DWORD PTR [rax+0x0]
  412228:	lea    r8,[rsp+0x30]
  41222d:	mov    ecx,0x1
  412232:	mov    rdx,rbx
  412235:	mov    rsi,r15
  412238:	mov    rdi,rbp
  41223b:	call   41ebe0 <flatcc_json_parser_prepare_unions@@Base>
  412240:	cmp    rax,rbx
  412243:	je     4121e8 <_start@@Base+0xb888>
  412245:	mov    rdx,rbx
  412248:	lea    rcx,[rsp+0x1c]
  41224d:	mov    rsi,r15
  412250:	mov    rdi,rbp
  412253:	call   40a4b0 <_start@@Base+0x3b50>
  412258:	mov    edx,DWORD PTR [rsp+0x1c]
  41225c:	nop    DWORD PTR [rax+0x0]
  412260:	test   edx,edx
  412262:	je     4123bd <_start@@Base+0xba5d>
  412268:	mov    rsi,rax
  41226b:	cmp    rbx,rsi
  41226e:	je     412ec0 <_start@@Base+0xc560>
  412274:	cmp    BYTE PTR [rsi],0x22
  412277:	lea    r12,[rsi+0x1]
  41227b:	jne    412df0 <_start@@Base+0xc490>
  412281:	mov    rsi,rbx
  412284:	sub    rsi,r12
  412287:	cmp    rsi,0x7
  41228b:	jbe    4124a8 <_start@@Base+0xbb48>
  412291:	movbe  rax,QWORD PTR [r12]
  412297:	movabs rdx,0x6d616e79616e795f
  4122a1:	cmp    rax,rdx
  4122a4:	jne    412431 <_start@@Base+0xbad1>
  4122aa:	lea    r13,[r12+0x8]
  4122af:	mov    r8,rbx
  4122b2:	sub    r8,r13
  4122b5:	cmp    r8,0x7
  4122b9:	ja     413c00 <_start@@Base+0xd2a0>
  4122bf:	mov    rsi,rbx
  4122c2:	mov    rdi,r13
  4122c5:	call   406a50 <_start@@Base+0xf0>
  4122ca:	movabs rdx,0xffffffff00000000
  4122d4:	and    rax,rdx
  4122d7:	movabs rdx,0x7479706500000000
  4122e1:	cmp    rax,rdx
  4122e4:	jne    412f18 <_start@@Base+0xc5b8>
  4122ea:	cmp    r8,0x4
  4122ee:	jle    412f18 <_start@@Base+0xc5b8>
  4122f4:	mov    ecx,0x4
  4122f9:	mov    rdx,rbx
  4122fc:	mov    rsi,r13
  4122ff:	mov    rdi,rbp
  412302:	call   40b830 <_start@@Base+0x4ed0>
  412307:	cmp    r13,rax
  41230a:	je     412f18 <_start@@Base+0xc5b8>
  412310:	sub    rsp,0x8
  412314:	lea    rdi,[rip+0xffffffffffff4815]        # 406b30 <_start@@Base+0x1d0>
  41231b:	push   rdi
  41231c:	lea    rdi,[rip+0x214d]        # 414470 <_start@@Base+0xdb10>
  412323:	mov    r8d,0x3
  412329:	push   rdi
  41232a:	lea    rdi,[rip+0x2714f]        # 439480 <__data_start@@Base+0x3c0>
  412331:	xor    ecx,ecx
  412333:	push   rdi
  412334:	mov    rdx,rbx
  412337:	mov    rsi,rax
  41233a:	mov    r9,QWORD PTR [rsp+0x50]
  41233f:	mov    rdi,rbp
  412342:	call   41f150 <flatcc_json_parser_union_type_vector@@Base>
  412347:	mov    r15,rax
  41234a:	add    rsp,0x20
  41234e:	xchg   ax,ax
  412350:	mov    rax,rbx
  412353:	sub    rax,r15
  412356:	cmp    rax,0x1
  41235a:	jle    412368 <_start@@Base+0xba08>
  41235c:	cmp    BYTE PTR [r15],0x20
  412360:	jg     412379 <_start@@Base+0xba19>
  412362:	je     413990 <_start@@Base+0xd030>
  412368:	mov    rsi,r15
  41236b:	mov    rdx,rbx
  41236e:	mov    rdi,rbp
  412371:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  412376:	mov    r15,rax
  412379:	cmp    rbx,r15
  41237c:	je     413940 <_start@@Base+0xcfe0>
  412382:	cmp    BYTE PTR [r15],0x2c
  412386:	je     4139a8 <_start@@Base+0xd048>
  41238c:	mov    DWORD PTR [rsp+0x1c],0x0
  412394:	cmp    BYTE PTR [r15],0x7d
  412398:	je     412ee0 <_start@@Base+0xc580>
  41239e:	mov    rdx,rbx
  4123a1:	mov    ecx,0xa
  4123a6:	mov    rsi,r15
  4123a9:	mov    rdi,rbp
  4123ac:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  4123b1:	mov    edx,DWORD PTR [rsp+0x1c]
  4123b5:	test   edx,edx
  4123b7:	jne    412268 <_start@@Base+0xb908>
  4123bd:	mov    r15,rax
  4123c0:	jmp    413948 <_start@@Base+0xcfe8>
  4123c5:	nop    DWORD PTR [rax]
  4123c8:	movsx  rcx,BYTE PTR [r12+0x6]
  4123ce:	shl    rcx,0x8
  4123d2:	movsx  rdx,BYTE PTR [r12+0x5]
  4123d8:	mov    rax,rdx
  4123db:	shl    rax,0x10
  4123df:	or     rcx,rax
  4123e2:	movsx  rdx,BYTE PTR [r12+0x4]
  4123e8:	mov    rax,rdx
  4123eb:	shl    rax,0x18
  4123ef:	or     rax,rcx
  4123f2:	movsx  rdx,BYTE PTR [r12+0x3]
  4123f8:	mov    rcx,rdx
  4123fb:	shl    rcx,0x20
  4123ff:	or     rax,rcx
  412402:	movsx  rdx,BYTE PTR [r12+0x2]
  412408:	mov    rcx,rdx
  41240b:	shl    rcx,0x28
  41240f:	or     rcx,rax
  412412:	movsx  rdx,BYTE PTR [r12+0x1]
  412418:	mov    rax,rdx
  41241b:	shl    rax,0x30
  41241f:	or     rcx,rax
  412422:	movsx  rdx,BYTE PTR [r12]
  412427:	mov    rax,rdx
  41242a:	shl    rax,0x38
  41242e:	or     rax,rcx
  412431:	mov    rcx,rax
  412434:	xor    cl,cl
  412436:	movabs rdx,0x6d616e79616e7900
  412440:	cmp    rcx,rdx
  412443:	jne    412520 <_start@@Base+0xbbc0>
  412449:	cmp    rsi,0x7
  41244d:	jle    412ec3 <_start@@Base+0xc563>
  412453:	mov    ecx,0x7
  412458:	mov    rdx,rbx
  41245b:	mov    rsi,r12
  41245e:	mov    rdi,rbp
  412461:	call   40b830 <_start@@Base+0x4ed0>
  412466:	cmp    rax,r12
  412469:	je     412ec3 <_start@@Base+0xc563>
  41246f:	sub    rsp,0x8
  412473:	lea    rdi,[rip+0x1ff6]        # 414470 <_start@@Base+0xdb10>
  41247a:	push   rdi
  41247b:	mov    r8d,0x3
  412481:	xor    ecx,ecx
  412483:	mov    r9,QWORD PTR [rsp+0x40]
  412488:	mov    rdx,rbx
  41248b:	mov    rsi,rax
  41248e:	mov    rdi,rbp
  412491:	call   41f070 <flatcc_json_parser_union_vector@@Base>
  412496:	pop    r8
  412498:	mov    r15,rax
  41249b:	pop    r9
  41249d:	jmp    412350 <_start@@Base+0xb9f0>
  4124a2:	nop    WORD PTR [rax+rax*1+0x0]
  4124a8:	lea    rdx,[rip+0x18bd9]        # 42b088 <_IO_stdin_used@@Base+0x88>
  4124af:	movsxd rax,DWORD PTR [rdx+rsi*4]
  4124b3:	add    rax,rdx
  4124b6:	notrack jmp rax
  4124b9:	nop    DWORD PTR [rax+0x0]
  4124c0:	xor    ecx,ecx
  4124c2:	jmp    4123d2 <_start@@Base+0xba72>
  4124c7:	nop    WORD PTR [rax+rax*1+0x0]
  4124d0:	xor    ecx,ecx
  4124d2:	jmp    4123e2 <_start@@Base+0xba82>
  4124d7:	nop    WORD PTR [rax+rax*1+0x0]
  4124e0:	xor    eax,eax
  4124e2:	jmp    4123f2 <_start@@Base+0xba92>
  4124e7:	nop    WORD PTR [rax+rax*1+0x0]
  4124f0:	xor    eax,eax
  4124f2:	jmp    412402 <_start@@Base+0xbaa2>
  4124f7:	nop    WORD PTR [rax+rax*1+0x0]
  412500:	xor    ecx,ecx
  412502:	jmp    412412 <_start@@Base+0xbab2>
  412507:	nop    WORD PTR [rax+rax*1+0x0]
  412510:	xor    ecx,ecx
  412512:	jmp    412422 <_start@@Base+0xbac2>
  412517:	nop    WORD PTR [rax+rax*1+0x0]
  412520:	mov    rcx,rax
  412523:	xor    cx,cx
  412526:	movabs rdx,0x7072656669780000
  412530:	cmp    rcx,rdx
  412533:	jne    4139f8 <_start@@Base+0xd098>
  412539:	cmp    rsi,0x6
  41253d:	jle    412ec3 <_start@@Base+0xc563>
  412543:	mov    ecx,0x6
  412548:	mov    rdx,rbx
  41254b:	mov    rsi,r12
  41254e:	mov    rdi,rbp
  412551:	call   40b830 <_start@@Base+0x4ed0>
  412556:	mov    r15,rax
  412559:	cmp    rax,r12
  41255c:	je     412ec3 <_start@@Base+0xc563>
  412562:	mov    rdi,QWORD PTR [rbp+0x0]
  412566:	mov    esi,0x3
  41256b:	mov    DWORD PTR [rsp+0x20],0x0
  412573:	call   4179d0 <flatcc_builder_start_table@@Base>
  412578:	test   eax,eax
  41257a:	jne    412bf2 <_start@@Base+0xc292>
  412580:	mov    rdx,rbx
  412583:	lea    rcx,[rsp+0x24]
  412588:	mov    rsi,r15
  41258b:	mov    rdi,rbp
  41258e:	call   40a4b0 <_start@@Base+0x3b50>
  412593:	mov    edx,DWORD PTR [rsp+0x24]
  412597:	nop    WORD PTR [rax+rax*1+0x0]
  4125a0:	test   edx,edx
  4125a2:	je     412670 <_start@@Base+0xbd10>
  4125a8:	cmp    rbx,rax
  4125ab:	je     4125b9 <_start@@Base+0xbc59>
  4125ad:	cmp    BYTE PTR [rax],0x22
  4125b0:	jne    4126a0 <_start@@Base+0xbd40>
  4125b6:	inc    rax
  4125b9:	mov    rdx,rbx
  4125bc:	sub    rdx,rax
  4125bf:	cmp    rdx,0x7
  4125c3:	jbe    412680 <_start@@Base+0xbd20>
  4125c9:	movbe  rdx,QWORD PTR [rax]
  4125ce:	movabs rdi,0x746573746a736f6e
  4125d8:	cmp    rdx,rdi
  4125db:	jne    412680 <_start@@Base+0xbd20>
  4125e1:	lea    rsi,[rax+0x8]
  4125e5:	mov    rdx,rbx
  4125e8:	sub    rdx,rsi
  4125eb:	cmp    rdx,0x7
  4125ef:	ja     4126c0 <_start@@Base+0xbd60>
  4125f5:	mov    rdx,rbx
  4125f8:	mov    rdi,rbp
  4125fb:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  412600:	mov    r15,rax
  412603:	mov    rax,rbx
  412606:	sub    rax,r15
  412609:	cmp    rax,0x1
  41260d:	jle    41261b <_start@@Base+0xbcbb>
  41260f:	cmp    BYTE PTR [r15],0x20
  412613:	jg     41262c <_start@@Base+0xbccc>
  412615:	je     412cc0 <_start@@Base+0xc360>
  41261b:	mov    rsi,r15
  41261e:	mov    rdx,rbx
  412621:	mov    rdi,rbp
  412624:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  412629:	mov    r15,rax
  41262c:	cmp    rbx,r15
  41262f:	je     412c90 <_start@@Base+0xc330>
  412635:	cmp    BYTE PTR [r15],0x2c
  412639:	je     412cd8 <_start@@Base+0xc378>
  41263f:	mov    DWORD PTR [rsp+0x24],0x0
  412647:	cmp    BYTE PTR [r15],0x7d
  41264b:	je     412c38 <_start@@Base+0xc2d8>
  412651:	mov    rdx,rbx
  412654:	mov    ecx,0xa
  412659:	mov    rsi,r15
  41265c:	mov    rdi,rbp
  41265f:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  412664:	mov    edx,DWORD PTR [rsp+0x24]
  412668:	test   edx,edx
  41266a:	jne    4125a8 <_start@@Base+0xbc48>
  412670:	mov    r15,rax
  412673:	jmp    412c98 <_start@@Base+0xc338>
  412678:	nop    DWORD PTR [rax+rax*1+0x0]
  412680:	mov    rdx,rbx
  412683:	mov    rsi,rax
  412686:	mov    rdi,rbp
  412689:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  41268e:	mov    r15,rax
  412691:	jmp    412603 <_start@@Base+0xbca3>
  412696:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4126a0:	mov    ecx,0x5
  4126a5:	mov    rdx,rbx
  4126a8:	mov    rsi,rax
  4126ab:	mov    rdi,rbp
  4126ae:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  4126b3:	jmp    4125b9 <_start@@Base+0xbc59>
  4126b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4126c0:	movabs rdx,0x6170786966657270
  4126ca:	cmp    QWORD PTR [rax+0x8],rdx
  4126ce:	jne    4125f5 <_start@@Base+0xbc95>
  4126d4:	lea    r12,[rax+0x10]
  4126d8:	mov    rdi,rbx
  4126db:	sub    rdi,r12
  4126de:	cmp    rdi,0x7
  4126e2:	ja     413930 <_start@@Base+0xcfd0>
  4126e8:	lea    rcx,[rip+0x189b9]        # 42b0a8 <_IO_stdin_used@@Base+0xa8>
  4126ef:	movsxd rdx,DWORD PTR [rcx+rdi*4]
  4126f3:	add    rdx,rcx
  4126f6:	notrack jmp rdx
  4126f9:	nop    DWORD PTR [rax+0x0]
  412700:	movsx  rcx,BYTE PTR [rax+0x16]
  412705:	mov    rsi,rcx
  412708:	shl    rsi,0x8
  41270c:	movsx  rdx,BYTE PTR [rax+0x15]
  412711:	mov    rcx,rdx
  412714:	shl    rcx,0x10
  412718:	or     rcx,rsi
  41271b:	movsx  rdx,BYTE PTR [rax+0x14]
  412720:	mov    rsi,rdx
  412723:	shl    rsi,0x18
  412727:	or     rcx,rsi
  41272a:	movsx  rdx,BYTE PTR [rax+0x13]
  41272f:	mov    rsi,rdx
  412732:	shl    rsi,0x20
  412736:	or     rsi,rcx
  412739:	movsx  rdx,BYTE PTR [rax+0x12]
  41273e:	mov    rcx,rdx
  412741:	shl    rcx,0x28
  412745:	or     rsi,rcx
  412748:	movsx  rdx,BYTE PTR [rax+0x11]
  41274d:	mov    rcx,rdx
  412750:	shl    rcx,0x30
  412754:	or     rcx,rsi
  412757:	movsx  rdx,BYTE PTR [rax+0x10]
  41275c:	mov    rax,rdx
  41275f:	shl    rax,0x38
  412763:	or     rax,rcx
  412766:	mov    r13,rax
  412769:	xor    r13w,r13w
  41276d:	movabs rdx,0x7273696e67320000
  412777:	cmp    r13,rdx
  41277a:	je     4134b0 <_start@@Base+0xcb50>
  412780:	and    rax,0xffffffffff000000
  412786:	movabs rdx,0x7273696e67000000
  412790:	cmp    rax,rdx
  412793:	jne    412f30 <_start@@Base+0xc5d0>
  412799:	cmp    rdi,0x5
  41279d:	jle    412f30 <_start@@Base+0xc5d0>
  4127a3:	mov    ecx,0x5
  4127a8:	mov    rdx,rbx
  4127ab:	mov    rsi,r12
  4127ae:	mov    rdi,rbp
  4127b1:	call   40b830 <_start@@Base+0x4ed0>
  4127b6:	mov    r15,rax
  4127b9:	cmp    r12,rax
  4127bc:	je     412f30 <_start@@Base+0xc5d0>
  4127c2:	mov    rdi,QWORD PTR [rbp+0x0]
  4127c6:	mov    esi,0x9
  4127cb:	call   4179d0 <flatcc_builder_start_table@@Base>
  4127d0:	test   eax,eax
  4127d2:	jne    412bd8 <_start@@Base+0xc278>
  4127d8:	lea    r12,[rsp+0x2c]
  4127dd:	mov    rdx,rbx
  4127e0:	mov    rsi,r15
  4127e3:	mov    rcx,r12
  4127e6:	mov    rdi,rbp
  4127e9:	call   40a4b0 <_start@@Base+0x3b50>
  4127ee:	mov    edx,DWORD PTR [rsp+0x2c]
  4127f2:	mov    r15,rax
  4127f5:	test   edx,edx
  4127f7:	je     414070 <_start@@Base+0xd710>
  4127fd:	movabs r13,0xffffffff00000000
  412807:	jmp    412932 <_start@@Base+0xbfd2>
  41280c:	nop    DWORD PTR [rax+0x0]
  412810:	movbe  rax,QWORD PTR [r15]
  412815:	movabs rdx,0x63636362ffffffff
  41281f:	cmp    rax,rdx
  412822:	ja     412d40 <_start@@Base+0xc3e0>
  412828:	movabs rdx,0x6161616131323334
  412832:	cmp    rax,rdx
  412835:	jne    41437b <_start@@Base+0xda1b>
  41283b:	lea    r14,[r15+0x8]
  41283f:	mov    r8,rbx
  412842:	sub    r8,r14
  412845:	cmp    r8,0x7
  412849:	ja     413c40 <_start@@Base+0xd2e0>
  41284f:	mov    rsi,rbx
  412852:	mov    rdi,r14
  412855:	call   406a50 <_start@@Base+0xf0>
  41285a:	movabs rdi,0xff00000000000000
  412864:	and    rax,rdi
  412867:	movabs rdx,0x3500000000000000
  412871:	cmp    rax,rdx
  412874:	jne    412d28 <_start@@Base+0xc3c8>
  41287a:	cmp    r8,0x1
  41287e:	jle    412d28 <_start@@Base+0xc3c8>
  412884:	mov    ecx,0x1
  412889:	mov    rdx,rbx
  41288c:	mov    rsi,r14
  41288f:	mov    rdi,rbp
  412892:	call   40b830 <_start@@Base+0x4ed0>
  412897:	cmp    r14,rax
  41289a:	je     412d28 <_start@@Base+0xc3c8>
  4128a0:	lea    r14,[rsp+0x40]
  4128a5:	mov    rcx,r14
  4128a8:	mov    rdx,rbx
  4128ab:	mov    rsi,rax
  4128ae:	mov    rdi,rbp
  4128b1:	mov    DWORD PTR [rsp+0x40],0x0
  4128b9:	mov    QWORD PTR [rsp],rax
  4128bd:	call   409370 <_start@@Base+0x2a10>
  4128c2:	mov    r9,QWORD PTR [rsp]
  4128c6:	mov    r15,rax
  4128c9:	cmp    r9,rax
  4128cc:	je     414190 <_start@@Base+0xd830>
  4128d2:	mov    eax,DWORD PTR [rsp+0x40]
  4128d6:	test   eax,eax
  4128d8:	jne    4128e0 <_start@@Base+0xbf80>
  4128da:	test   BYTE PTR [rbp+0x10],0x2
  4128de:	je     412910 <_start@@Base+0xbfb0>
  4128e0:	mov    rdi,QWORD PTR [rbp+0x0]
  4128e4:	mov    ecx,0x4
  4128e9:	mov    edx,0x4
  4128ee:	mov    esi,0x1
  4128f3:	call   419250 <flatcc_builder_table_add@@Base>
  4128f8:	test   rax,rax
  4128fb:	je     412bd8 <_start@@Base+0xc278>
  412901:	mov    edx,DWORD PTR [rsp+0x40]
  412905:	mov    DWORD PTR [rax],edx
  412907:	nop    WORD PTR [rax+rax*1+0x0]
  412910:	mov    rsi,r15
  412913:	mov    rcx,r12
  412916:	mov    rdx,rbx
  412919:	mov    rdi,rbp
  41291c:	call   40b8c0 <_start@@Base+0x4f60>
  412921:	mov    r14d,DWORD PTR [rsp+0x2c]
  412926:	mov    r15,rax
  412929:	test   r14d,r14d
  41292c:	je     414070 <_start@@Base+0xd710>
  412932:	cmp    rbx,r15
  412935:	je     412944 <_start@@Base+0xbfe4>
  412937:	cmp    BYTE PTR [r15],0x22
  41293b:	jne    412c70 <_start@@Base+0xc310>
  412941:	inc    r15
  412944:	mov    rsi,rbx
  412947:	sub    rsi,r15
  41294a:	cmp    rsi,0x7
  41294e:	ja     412810 <_start@@Base+0xbeb0>
  412954:	lea    rdx,[rip+0x1876d]        # 42b0c8 <_IO_stdin_used@@Base+0xc8>
  41295b:	movsxd rax,DWORD PTR [rdx+rsi*4]
  41295f:	add    rax,rdx
  412962:	notrack jmp rax
  412965:	nop    DWORD PTR [rax]
  412968:	movsx  rcx,BYTE PTR [r15+0x6]
  41296d:	shl    rcx,0x8
  412971:	movsx  rdx,BYTE PTR [r15+0x5]
  412976:	mov    rax,rdx
  412979:	shl    rax,0x10
  41297d:	or     rcx,rax
  412980:	movsx  rdx,BYTE PTR [r15+0x4]
  412985:	mov    rax,rdx
  412988:	shl    rax,0x18
  41298c:	or     rax,rcx
  41298f:	movsx  rdx,BYTE PTR [r15+0x3]
  412994:	mov    rcx,rdx
  412997:	shl    rcx,0x20
  41299b:	or     rax,rcx
  41299e:	movsx  rdx,BYTE PTR [r15+0x2]
  4129a3:	mov    rcx,rdx
  4129a6:	shl    rcx,0x28
  4129aa:	or     rcx,rax
  4129ad:	movsx  rdx,BYTE PTR [r15+0x1]
  4129b2:	mov    rax,rdx
  4129b5:	shl    rax,0x30
  4129b9:	or     rcx,rax
  4129bc:	movsx  rdx,BYTE PTR [r15]
  4129c0:	mov    rax,rdx
  4129c3:	shl    rax,0x38
  4129c7:	or     rax,rcx
  4129ca:	movabs rdx,0x63636362ffffffff
  4129d4:	cmp    rax,rdx
  4129d7:	ja     412b60 <_start@@Base+0xc200>
  4129dd:	and    rax,r13
  4129e0:	mov    rdx,rax
  4129e3:	movabs rax,0x6161616100000000
  4129ed:	cmp    rdx,rax
  4129f0:	jne    413b60 <_start@@Base+0xd200>
  4129f6:	cmp    rsi,0x4
  4129fa:	jle    412ac0 <_start@@Base+0xc160>
  412a00:	mov    ecx,0x4
  412a05:	mov    rdx,rbx
  412a08:	mov    rsi,r15
  412a0b:	mov    rdi,rbp
  412a0e:	call   40b830 <_start@@Base+0x4ed0>
  412a13:	cmp    rax,r15
  412a16:	je     412ac0 <_start@@Base+0xc160>
  412a1c:	lea    rcx,[rsp+0x38]
  412a21:	mov    rdx,rbx
  412a24:	mov    rsi,rax
  412a27:	mov    rdi,rbp
  412a2a:	call   41ea20 <flatcc_json_parser_build_string@@Base>
  412a2f:	mov    r15,rax
  412a32:	mov    eax,DWORD PTR [rsp+0x38]
  412a36:	test   eax,eax
  412a38:	je     412bd8 <_start@@Base+0xc278>
  412a3e:	mov    rdi,QWORD PTR [rbp+0x0]
  412a42:	xor    esi,esi
  412a44:	call   419420 <flatcc_builder_table_add_offset@@Base>
  412a49:	test   rax,rax
  412a4c:	je     412bd8 <_start@@Base+0xc278>
  412a52:	mov    edx,DWORD PTR [rsp+0x38]
  412a56:	mov    DWORD PTR [rax],edx
  412a58:	jmp    412910 <_start@@Base+0xbfb0>
  412a5d:	nop    DWORD PTR [rax]
  412a60:	xor    ecx,ecx
  412a62:	jmp    412971 <_start@@Base+0xc011>
  412a67:	nop    WORD PTR [rax+rax*1+0x0]
  412a70:	xor    ecx,ecx
  412a72:	jmp    412980 <_start@@Base+0xc020>
  412a77:	nop    WORD PTR [rax+rax*1+0x0]
  412a80:	xor    eax,eax
  412a82:	jmp    41298f <_start@@Base+0xc02f>
  412a87:	nop    WORD PTR [rax+rax*1+0x0]
  412a90:	xor    eax,eax
  412a92:	jmp    41299e <_start@@Base+0xc03e>
  412a97:	nop    WORD PTR [rax+rax*1+0x0]
  412aa0:	xor    ecx,ecx
  412aa2:	jmp    4129ad <_start@@Base+0xc04d>
  412aa7:	nop    WORD PTR [rax+rax*1+0x0]
  412ab0:	xor    ecx,ecx
  412ab2:	jmp    4129bc <_start@@Base+0xc05c>
  412ab7:	nop    WORD PTR [rax+rax*1+0x0]
  412ac0:	mov    rsi,r15
  412ac3:	mov    rdx,rbx
  412ac6:	mov    rdi,rbp
  412ac9:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  412ace:	mov    r15,rax
  412ad1:	jmp    412910 <_start@@Base+0xbfb0>
  412ad6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  412ae0:	xor    esi,esi
  412ae2:	jmp    41270c <_start@@Base+0xbdac>
  412ae7:	nop    WORD PTR [rax+rax*1+0x0]
  412af0:	xor    ecx,ecx
  412af2:	jmp    41271b <_start@@Base+0xbdbb>
  412af7:	nop    WORD PTR [rax+rax*1+0x0]
  412b00:	xor    ecx,ecx
  412b02:	jmp    41272a <_start@@Base+0xbdca>
  412b07:	nop    WORD PTR [rax+rax*1+0x0]
  412b10:	xor    esi,esi
  412b12:	jmp    412739 <_start@@Base+0xbdd9>
  412b17:	nop    WORD PTR [rax+rax*1+0x0]
  412b20:	xor    esi,esi
  412b22:	jmp    412748 <_start@@Base+0xbde8>
  412b27:	nop    WORD PTR [rax+rax*1+0x0]
  412b30:	xor    ecx,ecx
  412b32:	jmp    412757 <_start@@Base+0xbdf7>
  412b37:	nop    WORD PTR [rax+rax*1+0x0]
  412b40:	mov    rdx,rbx
  412b43:	mov    rsi,r12
  412b46:	mov    rdi,rbp
  412b49:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  412b4e:	mov    r15,rax
  412b51:	jmp    412603 <_start@@Base+0xbca3>
  412b56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  412b60:	mov    rdx,rax
  412b63:	and    rdx,r13
  412b66:	movabs rdi,0x6363636300000000
  412b70:	cmp    rdx,rdi
  412b73:	jne    412e10 <_start@@Base+0xc4b0>
  412b79:	cmp    rsi,0x4
  412b7d:	jle    412ac0 <_start@@Base+0xc160>
  412b83:	mov    ecx,0x4
  412b88:	mov    rdx,rbx
  412b8b:	mov    rsi,r15
  412b8e:	mov    rdi,rbp
  412b91:	call   40b830 <_start@@Base+0x4ed0>
  412b96:	cmp    rax,r15
  412b99:	je     412ac0 <_start@@Base+0xc160>
  412b9f:	lea    rcx,[rsp+0x38]
  412ba4:	mov    rdx,rbx
  412ba7:	mov    rsi,rax
  412baa:	mov    rdi,rbp
  412bad:	call   41ea20 <flatcc_json_parser_build_string@@Base>
  412bb2:	mov    r15,rax
  412bb5:	mov    eax,DWORD PTR [rsp+0x38]
  412bb9:	test   eax,eax
  412bbb:	je     412bd8 <_start@@Base+0xc278>
  412bbd:	mov    rdi,QWORD PTR [rbp+0x0]
  412bc1:	mov    esi,0x4
  412bc6:	call   419420 <flatcc_builder_table_add_offset@@Base>
  412bcb:	test   rax,rax
  412bce:	jne    412a52 <_start@@Base+0xc0f2>
  412bd4:	nop    DWORD PTR [rax+0x0]
  412bd8:	endbr64 
  412bdc:	mov    rsi,r15
  412bdf:	mov    ecx,0x21
  412be4:	mov    rdx,rbx
  412be7:	mov    rdi,rbp
  412bea:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  412bef:	mov    r15,rax
  412bf2:	mov    ecx,0x21
  412bf7:	mov    rsi,r15
  412bfa:	mov    rdx,rbx
  412bfd:	mov    rdi,rbp
  412c00:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  412c05:	mov    ecx,DWORD PTR [rsp+0x20]
  412c09:	mov    r15,rax
  412c0c:	test   ecx,ecx
  412c0e:	je     4121e8 <_start@@Base+0xb888>
  412c14:	mov    rdi,QWORD PTR [rbp+0x0]
  412c18:	xor    esi,esi
  412c1a:	call   419420 <flatcc_builder_table_add_offset@@Base>
  412c1f:	test   rax,rax
  412c22:	je     4121e8 <_start@@Base+0xb888>
  412c28:	mov    edx,DWORD PTR [rsp+0x20]
  412c2c:	mov    DWORD PTR [rax],edx
  412c2e:	jmp    412350 <_start@@Base+0xb9f0>
  412c33:	nop    DWORD PTR [rax+rax*1+0x0]
  412c38:	lea    rsi,[r15+0x1]
  412c3c:	mov    rax,rbx
  412c3f:	sub    rax,rsi
  412c42:	cmp    rax,0x1
  412c46:	jle    412c59 <_start@@Base+0xc2f9>
  412c48:	cmp    BYTE PTR [r15+0x1],0x20
  412c4d:	jg     413c20 <_start@@Base+0xd2c0>
  412c53:	je     413d60 <_start@@Base+0xd400>
  412c59:	mov    rdx,rbx
  412c5c:	mov    rdi,rbp
  412c5f:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  412c64:	mov    edx,DWORD PTR [rsp+0x24]
  412c68:	jmp    4125a0 <_start@@Base+0xbc40>
  412c6d:	nop    DWORD PTR [rax]
  412c70:	mov    rsi,r15
  412c73:	mov    ecx,0x5
  412c78:	mov    rdx,rbx
  412c7b:	mov    rdi,rbp
  412c7e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  412c83:	mov    r15,rax
  412c86:	jmp    412944 <_start@@Base+0xbfe4>
  412c8b:	nop    DWORD PTR [rax+rax*1+0x0]
  412c90:	mov    DWORD PTR [rsp+0x24],0x0
  412c98:	mov    esi,DWORD PTR [rbp+0x1c]
  412c9b:	test   esi,esi
  412c9d:	jne    412bf2 <_start@@Base+0xc292>
  412ca3:	mov    rdi,QWORD PTR [rbp+0x0]
  412ca7:	call   418350 <flatcc_builder_end_table@@Base>
  412cac:	mov    DWORD PTR [rsp+0x20],eax
  412cb0:	test   eax,eax
  412cb2:	jne    412c14 <_start@@Base+0xc2b4>
  412cb8:	jmp    412bf2 <_start@@Base+0xc292>
  412cbd:	nop    DWORD PTR [rax]
  412cc0:	cmp    BYTE PTR [r15+0x1],0x20
  412cc5:	jle    41261b <_start@@Base+0xbcbb>
  412ccb:	inc    r15
  412cce:	jmp    41262c <_start@@Base+0xbccc>
  412cd3:	nop    DWORD PTR [rax+rax*1+0x0]
  412cd8:	lea    rax,[r15+0x1]
  412cdc:	mov    rdx,rbx
  412cdf:	sub    rdx,rax
  412ce2:	cmp    rdx,0x1
  412ce6:	jle    412cf5 <_start@@Base+0xc395>
  412ce8:	cmp    BYTE PTR [r15+0x1],0x20
  412ced:	jg     412d03 <_start@@Base+0xc3a3>
  412cef:	je     413e90 <_start@@Base+0xd530>
  412cf5:	mov    rdx,rbx
  412cf8:	mov    rsi,rax
  412cfb:	mov    rdi,rbp
  412cfe:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  412d03:	cmp    rbx,rax
  412d06:	je     413eb0 <_start@@Base+0xd550>
  412d0c:	cmp    BYTE PTR [rax],0x7d
  412d0f:	je     413fd0 <_start@@Base+0xd670>
  412d15:	mov    DWORD PTR [rsp+0x24],0x1
  412d1d:	jmp    4125a8 <_start@@Base+0xbc48>
  412d22:	nop    WORD PTR [rax+rax*1+0x0]
  412d28:	mov    rdx,rbx
  412d2b:	mov    rsi,r14
  412d2e:	mov    rdi,rbp
  412d31:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  412d36:	mov    r15,rax
  412d39:	jmp    412910 <_start@@Base+0xbfb0>
  412d3e:	xchg   ax,ax
  412d40:	movabs rdx,0x6363636331323334
  412d4a:	cmp    rax,rdx
  412d4d:	jne    412b60 <_start@@Base+0xc200>
  412d53:	cmp    rsi,0x8
  412d57:	jle    413a78 <_start@@Base+0xd118>
  412d5d:	mov    ecx,0x8
  412d62:	mov    rdx,rbx
  412d65:	mov    rsi,r15
  412d68:	mov    rdi,rbp
  412d6b:	call   40b830 <_start@@Base+0x4ed0>
  412d70:	mov    r14,rax
  412d73:	cmp    rax,r15
  412d76:	je     413a78 <_start@@Base+0xd118>
  412d7c:	lea    r8,[rsp+0x40]
  412d81:	mov    rcx,r8
  412d84:	mov    rdx,rbx
  412d87:	mov    rsi,rax
  412d8a:	mov    rdi,rbp
  412d8d:	mov    QWORD PTR [rsp],r8
  412d91:	mov    QWORD PTR [rsp+0x40],0x0
  412d9a:	call   408f90 <_start@@Base+0x2630>
  412d9f:	cmp    r14,rax
  412da2:	mov    r15,rax
  412da5:	mov    r8,QWORD PTR [rsp]
  412da9:	je     414128 <_start@@Base+0xd7c8>
  412daf:	cmp    QWORD PTR [rsp+0x40],0x0
  412db5:	jne    412dc1 <_start@@Base+0xc461>
  412db7:	test   BYTE PTR [rbp+0x10],0x2
  412dbb:	je     412910 <_start@@Base+0xbfb0>
  412dc1:	mov    rdi,QWORD PTR [rbp+0x0]
  412dc5:	mov    ecx,0x8
  412dca:	mov    edx,0x8
  412dcf:	mov    esi,0x5
  412dd4:	call   419250 <flatcc_builder_table_add@@Base>
  412dd9:	test   rax,rax
  412ddc:	je     412bd8 <_start@@Base+0xc278>
  412de2:	mov    rdx,QWORD PTR [rsp+0x40]
  412de7:	mov    QWORD PTR [rax],rdx
  412dea:	jmp    412910 <_start@@Base+0xbfb0>
  412def:	nop
  412df0:	mov    ecx,0x5
  412df5:	mov    rdx,rbx
  412df8:	mov    rdi,rbp
  412dfb:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  412e00:	mov    r12,rax
  412e03:	jmp    412281 <_start@@Base+0xb921>
  412e08:	nop    DWORD PTR [rax+rax*1+0x0]
  412e10:	movabs rdi,0x6464646431323334
  412e1a:	cmp    rax,rdi
  412e1d:	jne    412ac0 <_start@@Base+0xc160>
  412e23:	cmp    rsi,0x8
  412e27:	jle    413c88 <_start@@Base+0xd328>
  412e2d:	mov    ecx,0x8
  412e32:	mov    rdx,rbx
  412e35:	mov    rsi,r15
  412e38:	mov    rdi,rbp
  412e3b:	call   40b830 <_start@@Base+0x4ed0>
  412e40:	mov    r14,rax
  412e43:	cmp    rax,r15
  412e46:	je     413c88 <_start@@Base+0xd328>
  412e4c:	lea    r8,[rsp+0x40]
  412e51:	mov    rcx,r8
  412e54:	mov    rdx,rbx
  412e57:	mov    rsi,rax
  412e5a:	mov    rdi,rbp
  412e5d:	mov    QWORD PTR [rsp],r8
  412e61:	mov    QWORD PTR [rsp+0x40],0x0
  412e6a:	call   408f90 <_start@@Base+0x2630>
  412e6f:	cmp    r14,rax
  412e72:	mov    r15,rax
  412e75:	mov    r8,QWORD PTR [rsp]
  412e79:	je     4141f0 <_start@@Base+0xd890>
  412e7f:	cmp    QWORD PTR [rsp+0x40],0x0
  412e85:	jne    412e91 <_start@@Base+0xc531>
  412e87:	test   BYTE PTR [rbp+0x10],0x2
  412e8b:	je     412910 <_start@@Base+0xbfb0>
  412e91:	mov    rdi,QWORD PTR [rbp+0x0]
  412e95:	mov    ecx,0x8
  412e9a:	mov    edx,0x8
  412e9f:	mov    esi,0x7
  412ea4:	call   419250 <flatcc_builder_table_add@@Base>
  412ea9:	test   rax,rax
  412eac:	jne    412de2 <_start@@Base+0xc482>
  412eb2:	jmp    412bd8 <_start@@Base+0xc278>
  412eb7:	nop    WORD PTR [rax+rax*1+0x0]
  412ec0:	mov    r12,rbx
  412ec3:	mov    rdx,rbx
  412ec6:	mov    rsi,r12
  412ec9:	mov    rdi,rbp
  412ecc:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  412ed1:	mov    r15,rax
  412ed4:	jmp    412350 <_start@@Base+0xb9f0>
  412ed9:	nop    DWORD PTR [rax+0x0]
  412ee0:	lea    rsi,[r15+0x1]
  412ee4:	mov    rax,rbx
  412ee7:	sub    rax,rsi
  412eea:	cmp    rax,0x1
  412eee:	jle    412f01 <_start@@Base+0xc5a1>
  412ef0:	cmp    BYTE PTR [r15+0x1],0x20
  412ef5:	jg     413ed8 <_start@@Base+0xd578>
  412efb:	je     413fa0 <_start@@Base+0xd640>
  412f01:	mov    rdx,rbx
  412f04:	mov    rdi,rbp
  412f07:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  412f0c:	mov    edx,DWORD PTR [rsp+0x1c]
  412f10:	jmp    412260 <_start@@Base+0xb900>
  412f15:	nop    DWORD PTR [rax]
  412f18:	mov    rdx,rbx
  412f1b:	mov    rsi,r13
  412f1e:	mov    rdi,rbp
  412f21:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  412f26:	mov    r15,rax
  412f29:	jmp    412350 <_start@@Base+0xb9f0>
  412f2e:	xchg   ax,ax
  412f30:	movabs rax,0x7273696e67330000
  412f3a:	cmp    r13,rax
  412f3d:	jne    412b40 <_start@@Base+0xc1e0>
  412f43:	mov    rax,rbx
  412f46:	sub    rax,r12
  412f49:	cmp    rax,0x6
  412f4d:	jle    412b40 <_start@@Base+0xc1e0>
  412f53:	mov    ecx,0x6
  412f58:	mov    rdx,rbx
  412f5b:	mov    rsi,r12
  412f5e:	mov    rdi,rbp
  412f61:	call   40b830 <_start@@Base+0x4ed0>
  412f66:	mov    r14,rax
  412f69:	cmp    r12,rax
  412f6c:	je     412b40 <_start@@Base+0xc1e0>
  412f72:	mov    rdi,QWORD PTR [rbp+0x0]
  412f76:	mov    esi,0x2
  412f7b:	call   4179d0 <flatcc_builder_start_table@@Base>
  412f80:	test   eax,eax
  412f82:	jne    413be0 <_start@@Base+0xd280>
  412f88:	mov    rdx,rbx
  412f8b:	lea    rcx,[rsp+0x28]
  412f90:	mov    rsi,r14
  412f93:	mov    rdi,rbp
  412f96:	call   40a4b0 <_start@@Base+0x3b50>
  412f9b:	mov    edx,DWORD PTR [rsp+0x28]
  412f9f:	movabs r13,0x616161615f626262
  412fa9:	nop    DWORD PTR [rax+0x0]
  412fb0:	test   edx,edx
  412fb2:	je     414373 <_start@@Base+0xda13>
  412fb8:	lea    r12,[rip+0x18129]        # 42b0e8 <_IO_stdin_used@@Base+0xe8>
  412fbf:	cmp    rbx,rax
  412fc2:	je     412fd0 <_start@@Base+0xc670>
  412fc4:	cmp    BYTE PTR [rax],0x22
  412fc7:	jne    413270 <_start@@Base+0xc910>
  412fcd:	inc    rax
  412fd0:	mov    rdx,rbx
  412fd3:	sub    rdx,rax
  412fd6:	cmp    rdx,0x7
  412fda:	jbe    413250 <_start@@Base+0xc8f0>
  412fe0:	movbe  rdx,QWORD PTR [rax]
  412fe5:	cmp    rdx,r13
  412fe8:	jne    413250 <_start@@Base+0xc8f0>
  412fee:	lea    r14,[rax+0x8]
  412ff2:	mov    rdi,rbx
  412ff5:	sub    rdi,r14
  412ff8:	cmp    rdi,0x7
  412ffc:	ja     413310 <_start@@Base+0xc9b0>
  413002:	movsxd rdx,DWORD PTR [r12+rdi*4]
  413006:	add    rdx,r12
  413009:	notrack jmp rdx
  41300c:	nop    DWORD PTR [rax+0x0]
  413010:	movsx  rcx,BYTE PTR [rax+0xe]
  413015:	shl    rcx,0x8
  413019:	movsx  rsi,BYTE PTR [rax+0xd]
  41301e:	shl    rsi,0x10
  413022:	or     rcx,rsi
  413025:	movsx  rsi,BYTE PTR [rax+0xc]
  41302a:	shl    rsi,0x18
  41302e:	mov    rdx,rsi
  413031:	or     rdx,rcx
  413034:	movsx  rsi,BYTE PTR [rax+0xb]
  413039:	shl    rsi,0x20
  41303d:	or     rdx,rsi
  413040:	movsx  rsi,BYTE PTR [rax+0xa]
  413045:	mov    rcx,rsi
  413048:	shl    rcx,0x28
  41304c:	or     rcx,rdx
  41304f:	movsx  rsi,BYTE PTR [rax+0x9]
  413054:	shl    rsi,0x30
  413058:	or     rcx,rsi
  41305b:	movsx  rax,BYTE PTR [rax+0x8]
  413060:	shl    rax,0x38
  413064:	mov    rdx,rax
  413067:	or     rdx,rcx
  41306a:	xor    dl,dl
  41306c:	movabs rax,0x625f737465707300
  413076:	cmp    rdx,rax
  413079:	jne    413230 <_start@@Base+0xc8d0>
  41307f:	cmp    rdi,0x7
  413083:	jle    413230 <_start@@Base+0xc8d0>
  413089:	mov    ecx,0x7
  41308e:	mov    rdx,rbx
  413091:	mov    rsi,r14
  413094:	mov    rdi,rbp
  413097:	call   40b830 <_start@@Base+0x4ed0>
  41309c:	cmp    r14,rax
  41309f:	je     413230 <_start@@Base+0xc8d0>
  4130a5:	mov    QWORD PTR [rsp+0x38],0x0
  4130ae:	mov    QWORD PTR [rsp+0x40],0x0
  4130b7:	mov    DWORD PTR [rsp+0x2c],0x0
  4130bf:	cmp    rbx,rax
  4130c2:	je     413d78 <_start@@Base+0xd418>
  4130c8:	lea    rcx,[rsp+0x2c]
  4130cd:	lea    r8,[rsp+0x40]
  4130d2:	mov    rdx,rbx
  4130d5:	mov    rsi,rax
  4130d8:	mov    rdi,rbp
  4130db:	mov    QWORD PTR [rsp],rax
  4130df:	call   41d880 <flatcc_json_parser_integer@@Base>
  4130e4:	mov    r9,QWORD PTR [rsp]
  4130e8:	mov    r15,rax
  4130eb:	cmp    r9,rax
  4130ee:	jne    413e58 <_start@@Base+0xd4f8>
  4130f4:	lea    r8,[rsp+0x38]
  4130f9:	lea    rcx,[rip+0x26240]        # 439340 <__data_start@@Base+0x280>
  413100:	mov    rdx,rbx
  413103:	mov    rsi,r15
  413106:	mov    rdi,rbp
  413109:	call   40b5a0 <_start@@Base+0x4c40>
  41310e:	cmp    rax,r15
  413111:	je     414363 <_start@@Base+0xda03>
  413117:	cmp    rbx,rax
  41311a:	je     414363 <_start@@Base+0xda03>
  413120:	mov    rdx,QWORD PTR [rsp+0x38]
  413125:	mov    r15,rax
  413128:	nop    DWORD PTR [rax+rax*1+0x0]
  413130:	test   rdx,rdx
  413133:	jne    41313b <_start@@Base+0xc7db>
  413135:	test   BYTE PTR [rbp+0x10],0x2
  413139:	je     413168 <_start@@Base+0xc808>
  41313b:	mov    rdi,QWORD PTR [rbp+0x0]
  41313f:	xor    esi,esi
  413141:	mov    ecx,0x8
  413146:	mov    edx,0x8
  41314b:	call   419250 <flatcc_builder_table_add@@Base>
  413150:	test   rax,rax
  413153:	je     412bd8 <_start@@Base+0xc278>
  413159:	mov    rdx,QWORD PTR [rsp+0x38]
  41315e:	mov    QWORD PTR [rax],rdx
  413161:	nop    DWORD PTR [rax+0x0]
  413168:	mov    rax,rbx
  41316b:	sub    rax,r15
  41316e:	cmp    rax,0x1
  413172:	jle    413180 <_start@@Base+0xc820>
  413174:	cmp    BYTE PTR [r15],0x20
  413178:	jg     413191 <_start@@Base+0xc831>
  41317a:	je     413448 <_start@@Base+0xcae8>
  413180:	mov    rsi,r15
  413183:	mov    rdx,rbx
  413186:	mov    rdi,rbp
  413189:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41318e:	mov    r15,rax
  413191:	cmp    rbx,r15
  413194:	je     4132c8 <_start@@Base+0xc968>
  41319a:	cmp    BYTE PTR [r15],0x2c
  41319e:	je     413460 <_start@@Base+0xcb00>
  4131a4:	mov    DWORD PTR [rsp+0x28],0x0
  4131ac:	cmp    BYTE PTR [r15],0x7d
  4131b0:	je     413290 <_start@@Base+0xc930>
  4131b6:	mov    rdx,rbx
  4131b9:	mov    ecx,0xa
  4131be:	mov    rsi,r15
  4131c1:	mov    rdi,rbp
  4131c4:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  4131c9:	mov    edx,DWORD PTR [rsp+0x28]
  4131cd:	jmp    412fb0 <_start@@Base+0xc650>
  4131d2:	nop    WORD PTR [rax+rax*1+0x0]
  4131d8:	xor    ecx,ecx
  4131da:	jmp    413019 <_start@@Base+0xc6b9>
  4131df:	nop
  4131e0:	xor    edx,edx
  4131e2:	jmp    413034 <_start@@Base+0xc6d4>
  4131e7:	nop    WORD PTR [rax+rax*1+0x0]
  4131f0:	xor    edx,edx
  4131f2:	jmp    413040 <_start@@Base+0xc6e0>
  4131f7:	nop    WORD PTR [rax+rax*1+0x0]
  413200:	xor    ecx,ecx
  413202:	jmp    41304f <_start@@Base+0xc6ef>
  413207:	nop    WORD PTR [rax+rax*1+0x0]
  413210:	xor    ecx,ecx
  413212:	jmp    41305b <_start@@Base+0xc6fb>
  413217:	nop    WORD PTR [rax+rax*1+0x0]
  413220:	xor    ecx,ecx
  413222:	jmp    413025 <_start@@Base+0xc6c5>
  413227:	nop    WORD PTR [rax+rax*1+0x0]
  413230:	mov    rdx,rbx
  413233:	mov    rsi,r14
  413236:	mov    rdi,rbp
  413239:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  41323e:	mov    r15,rax
  413241:	jmp    413168 <_start@@Base+0xc808>
  413246:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413250:	mov    rdx,rbx
  413253:	mov    rsi,rax
  413256:	mov    rdi,rbp
  413259:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  41325e:	mov    r15,rax
  413261:	jmp    413168 <_start@@Base+0xc808>
  413266:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413270:	mov    ecx,0x5
  413275:	mov    rdx,rbx
  413278:	mov    rsi,rax
  41327b:	mov    rdi,rbp
  41327e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  413283:	jmp    412fd0 <_start@@Base+0xc670>
  413288:	nop    DWORD PTR [rax+rax*1+0x0]
  413290:	lea    rsi,[r15+0x1]
  413294:	mov    rax,rbx
  413297:	sub    rax,rsi
  41329a:	cmp    rax,0x1
  41329e:	jle    4132b1 <_start@@Base+0xc951>
  4132a0:	cmp    BYTE PTR [r15+0x1],0x20
  4132a5:	jg     413c30 <_start@@Base+0xd2d0>
  4132ab:	je     413d80 <_start@@Base+0xd420>
  4132b1:	mov    rdx,rbx
  4132b4:	mov    rdi,rbp
  4132b7:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  4132bc:	mov    edx,DWORD PTR [rsp+0x28]
  4132c0:	jmp    412fb0 <_start@@Base+0xc650>
  4132c5:	nop    DWORD PTR [rax]
  4132c8:	mov    DWORD PTR [rsp+0x28],0x0
  4132d0:	mov    edi,DWORD PTR [rbp+0x1c]
  4132d3:	test   edi,edi
  4132d5:	jne    412bd8 <_start@@Base+0xc278>
  4132db:	mov    rdi,QWORD PTR [rbp+0x0]
  4132df:	call   418350 <flatcc_builder_end_table@@Base>
  4132e4:	mov    r12d,eax
  4132e7:	test   eax,eax
  4132e9:	je     412bd8 <_start@@Base+0xc278>
  4132ef:	mov    rdi,QWORD PTR [rbp+0x0]
  4132f3:	mov    esi,0x2
  4132f8:	call   419420 <flatcc_builder_table_add_offset@@Base>
  4132fd:	test   rax,rax
  413300:	je     412bf2 <_start@@Base+0xc292>
  413306:	mov    DWORD PTR [rax],r12d
  413309:	jmp    412603 <_start@@Base+0xbca3>
  41330e:	xchg   ax,ax
  413310:	movbe  rdx,QWORD PTR [rax+0x8]
  413316:	movabs rcx,0x625f73746172745f
  413320:	cmp    rdx,rcx
  413323:	jne    41306a <_start@@Base+0xc70a>
  413329:	lea    r14,[rax+0x10]
  41332d:	mov    r8,rbx
  413330:	sub    r8,r14
  413333:	cmp    r8,0x7
  413337:	ja     413c10 <_start@@Base+0xd2b0>
  41333d:	mov    rsi,rbx
  413340:	mov    rdi,r14
  413343:	call   406a50 <_start@@Base+0xf0>
  413348:	and    rax,0xffffffffff000000
  41334e:	movabs rdx,0x7374657073000000
  413358:	cmp    rax,rdx
  41335b:	jne    413230 <_start@@Base+0xc8d0>
  413361:	cmp    r8,0x5
  413365:	jle    413230 <_start@@Base+0xc8d0>
  41336b:	mov    ecx,0x5
  413370:	mov    rdx,rbx
  413373:	mov    rsi,r14
  413376:	mov    rdi,rbp
  413379:	call   40b830 <_start@@Base+0x4ed0>
  41337e:	cmp    r14,rax
  413381:	je     413230 <_start@@Base+0xc8d0>
  413387:	mov    DWORD PTR [rsp+0x2c],0x0
  41338f:	mov    QWORD PTR [rsp+0x40],0x0
  413398:	mov    DWORD PTR [rsp+0x38],0x0
  4133a0:	cmp    rbx,rax
  4133a3:	je     413f90 <_start@@Base+0xd630>
  4133a9:	lea    rcx,[rsp+0x38]
  4133ae:	lea    r8,[rsp+0x40]
  4133b3:	mov    rdx,rbx
  4133b6:	mov    rsi,rax
  4133b9:	mov    rdi,rbp
  4133bc:	mov    QWORD PTR [rsp],rax
  4133c0:	call   41d880 <flatcc_json_parser_integer@@Base>
  4133c5:	mov    r9,QWORD PTR [rsp]
  4133c9:	mov    r14,rax
  4133cc:	cmp    r9,rax
  4133cf:	jne    4140b0 <_start@@Base+0xd750>
  4133d5:	lea    r8,[rsp+0x2c]
  4133da:	lea    rcx,[rip+0x25f7f]        # 439360 <__data_start@@Base+0x2a0>
  4133e1:	mov    rdx,rbx
  4133e4:	mov    rsi,r14
  4133e7:	mov    rdi,rbp
  4133ea:	call   40b1e0 <_start@@Base+0x4880>
  4133ef:	mov    r15,rax
  4133f2:	cmp    rax,r14
  4133f5:	je     412bd8 <_start@@Base+0xc278>
  4133fb:	cmp    rbx,rax
  4133fe:	je     412bd8 <_start@@Base+0xc278>
  413404:	mov    eax,DWORD PTR [rsp+0x2c]
  413408:	test   eax,eax
  41340a:	jne    413416 <_start@@Base+0xcab6>
  41340c:	test   BYTE PTR [rbp+0x10],0x2
  413410:	je     413168 <_start@@Base+0xc808>
  413416:	mov    rdi,QWORD PTR [rbp+0x0]
  41341a:	mov    ecx,0x4
  41341f:	mov    edx,0x4
  413424:	mov    esi,0x1
  413429:	call   419250 <flatcc_builder_table_add@@Base>
  41342e:	test   rax,rax
  413431:	je     412bd8 <_start@@Base+0xc278>
  413437:	mov    edx,DWORD PTR [rsp+0x2c]
  41343b:	mov    DWORD PTR [rax],edx
  41343d:	jmp    413168 <_start@@Base+0xc808>
  413442:	nop    WORD PTR [rax+rax*1+0x0]
  413448:	cmp    BYTE PTR [r15+0x1],0x20
  41344d:	jle    413180 <_start@@Base+0xc820>
  413453:	inc    r15
  413456:	jmp    413191 <_start@@Base+0xc831>
  41345b:	nop    DWORD PTR [rax+rax*1+0x0]
  413460:	lea    rax,[r15+0x1]
  413464:	mov    rdx,rbx
  413467:	sub    rdx,rax
  41346a:	cmp    rdx,0x1
  41346e:	jle    41347d <_start@@Base+0xcb1d>
  413470:	cmp    BYTE PTR [r15+0x1],0x20
  413475:	jg     41348b <_start@@Base+0xcb2b>
  413477:	je     413ee0 <_start@@Base+0xd580>
  41347d:	mov    rdx,rbx
  413480:	mov    rsi,rax
  413483:	mov    rdi,rbp
  413486:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41348b:	cmp    rbx,rax
  41348e:	je     413f00 <_start@@Base+0xd5a0>
  413494:	cmp    BYTE PTR [rax],0x7d
  413497:	je     414020 <_start@@Base+0xd6c0>
  41349d:	mov    DWORD PTR [rsp+0x28],0x1
  4134a5:	jmp    412fbf <_start@@Base+0xc65f>
  4134aa:	nop    WORD PTR [rax+rax*1+0x0]
  4134b0:	cmp    rdi,0x6
  4134b4:	jle    412b40 <_start@@Base+0xc1e0>
  4134ba:	mov    ecx,0x6
  4134bf:	mov    rdx,rbx
  4134c2:	mov    rsi,r12
  4134c5:	mov    rdi,rbp
  4134c8:	call   40b830 <_start@@Base+0x4ed0>
  4134cd:	mov    r14,rax
  4134d0:	cmp    r12,rax
  4134d3:	je     412b40 <_start@@Base+0xc1e0>
  4134d9:	mov    rdi,QWORD PTR [rbp+0x0]
  4134dd:	mov    esi,0x2
  4134e2:	call   4179d0 <flatcc_builder_start_table@@Base>
  4134e7:	test   eax,eax
  4134e9:	jne    413be0 <_start@@Base+0xd280>
  4134ef:	mov    rdx,rbx
  4134f2:	mov    rsi,r14
  4134f5:	lea    rcx,[rsp+0x28]
  4134fa:	mov    rdi,rbp
  4134fd:	call   40a4b0 <_start@@Base+0x3b50>
  413502:	mov    edx,DWORD PTR [rsp+0x28]
  413506:	movabs r13,0x616161615f626262
  413510:	lea    r14,[rip+0x17bf1]        # 42b108 <_IO_stdin_used@@Base+0x108>
  413517:	nop    WORD PTR [rax+rax*1+0x0]
  413520:	test   edx,edx
  413522:	je     41436b <_start@@Base+0xda0b>
  413528:	movabs r12,0x625f73746172745f
  413532:	cmp    rbx,rax
  413535:	je     413543 <_start@@Base+0xcbe3>
  413537:	cmp    BYTE PTR [rax],0x22
  41353a:	jne    413620 <_start@@Base+0xccc0>
  413540:	inc    rax
  413543:	mov    rdx,rbx
  413546:	sub    rdx,rax
  413549:	cmp    rdx,0x7
  41354d:	jbe    413600 <_start@@Base+0xcca0>
  413553:	movbe  rdx,QWORD PTR [rax]
  413558:	cmp    rdx,r13
  41355b:	jne    413600 <_start@@Base+0xcca0>
  413561:	lea    r15,[rax+0x8]
  413565:	mov    rdx,rbx
  413568:	sub    rdx,r15
  41356b:	cmp    rdx,0x7
  41356f:	ja     4136c0 <_start@@Base+0xcd60>
  413575:	movsxd rdx,DWORD PTR [r14+rdx*4]
  413579:	add    rdx,r14
  41357c:	notrack jmp rdx
  41357f:	nop
  413580:	mov    rsi,r15
  413583:	mov    rdx,rbx
  413586:	mov    rdi,rbp
  413589:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  41358e:	mov    r15,rax
  413591:	mov    rax,rbx
  413594:	sub    rax,r15
  413597:	cmp    rax,0x1
  41359b:	jle    4135a9 <_start@@Base+0xcc49>
  41359d:	cmp    BYTE PTR [r15],0x20
  4135a1:	jg     4135ba <_start@@Base+0xcc5a>
  4135a3:	je     4138c8 <_start@@Base+0xcf68>
  4135a9:	mov    rsi,r15
  4135ac:	mov    rdx,rbx
  4135af:	mov    rdi,rbp
  4135b2:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  4135b7:	mov    r15,rax
  4135ba:	cmp    rbx,r15
  4135bd:	je     413678 <_start@@Base+0xcd18>
  4135c3:	cmp    BYTE PTR [r15],0x2c
  4135c7:	je     4138e0 <_start@@Base+0xcf80>
  4135cd:	mov    DWORD PTR [rsp+0x28],0x0
  4135d5:	cmp    BYTE PTR [r15],0x7d
  4135d9:	je     413640 <_start@@Base+0xcce0>
  4135db:	mov    rdx,rbx
  4135de:	mov    ecx,0xa
  4135e3:	mov    rsi,r15
  4135e6:	mov    rdi,rbp
  4135e9:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  4135ee:	mov    edx,DWORD PTR [rsp+0x28]
  4135f2:	jmp    413520 <_start@@Base+0xcbc0>
  4135f7:	nop    WORD PTR [rax+rax*1+0x0]
  413600:	mov    rdx,rbx
  413603:	mov    rsi,rax
  413606:	mov    rdi,rbp
  413609:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  41360e:	mov    r15,rax
  413611:	jmp    413591 <_start@@Base+0xcc31>
  413616:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413620:	mov    ecx,0x5
  413625:	mov    rdx,rbx
  413628:	mov    rsi,rax
  41362b:	mov    rdi,rbp
  41362e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  413633:	jmp    413543 <_start@@Base+0xcbe3>
  413638:	nop    DWORD PTR [rax+rax*1+0x0]
  413640:	lea    rsi,[r15+0x1]
  413644:	mov    rax,rbx
  413647:	sub    rax,rsi
  41364a:	cmp    rax,0x1
  41364e:	jle    413661 <_start@@Base+0xcd01>
  413650:	cmp    BYTE PTR [r15+0x1],0x20
  413655:	jg     413b50 <_start@@Base+0xd1f0>
  41365b:	je     413c70 <_start@@Base+0xd310>
  413661:	mov    rdx,rbx
  413664:	mov    rdi,rbp
  413667:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41366c:	mov    edx,DWORD PTR [rsp+0x28]
  413670:	jmp    413520 <_start@@Base+0xcbc0>
  413675:	nop    DWORD PTR [rax]
  413678:	mov    DWORD PTR [rsp+0x28],0x0
  413680:	mov    ecx,DWORD PTR [rbp+0x1c]
  413683:	test   ecx,ecx
  413685:	jne    412bd8 <_start@@Base+0xc278>
  41368b:	mov    rdi,QWORD PTR [rbp+0x0]
  41368f:	call   418350 <flatcc_builder_end_table@@Base>
  413694:	mov    r12d,eax
  413697:	test   eax,eax
  413699:	je     412bd8 <_start@@Base+0xc278>
  41369f:	mov    rdi,QWORD PTR [rbp+0x0]
  4136a3:	mov    esi,0x1
  4136a8:	call   419420 <flatcc_builder_table_add_offset@@Base>
  4136ad:	test   rax,rax
  4136b0:	jne    413306 <_start@@Base+0xc9a6>
  4136b6:	jmp    412bf2 <_start@@Base+0xc292>
  4136bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4136c0:	movbe  rax,QWORD PTR [rax+0x8]
  4136c6:	movabs rdi,0x625f737465707300
  4136d0:	mov    rcx,rax
  4136d3:	xor    cl,cl
  4136d5:	cmp    rcx,rdi
  4136d8:	jne    4137d0 <_start@@Base+0xce70>
  4136de:	cmp    rdx,0x7
  4136e2:	jle    413580 <_start@@Base+0xcc20>
  4136e8:	mov    ecx,0x7
  4136ed:	mov    rdx,rbx
  4136f0:	mov    rsi,r15
  4136f3:	mov    rdi,rbp
  4136f6:	call   40b830 <_start@@Base+0x4ed0>
  4136fb:	cmp    r15,rax
  4136fe:	je     413580 <_start@@Base+0xcc20>
  413704:	mov    QWORD PTR [rsp+0x38],0x0
  41370d:	mov    QWORD PTR [rsp+0x40],0x0
  413716:	mov    DWORD PTR [rsp+0x2c],0x0
  41371e:	cmp    rbx,rax
  413721:	je     413c50 <_start@@Base+0xd2f0>
  413727:	lea    rcx,[rsp+0x2c]
  41372c:	lea    r8,[rsp+0x40]
  413731:	mov    rdx,rbx
  413734:	mov    rsi,rax
  413737:	mov    rdi,rbp
  41373a:	mov    QWORD PTR [rsp],rax
  41373e:	call   41d880 <flatcc_json_parser_integer@@Base>
  413743:	mov    r9,QWORD PTR [rsp]
  413747:	mov    r15,rax
  41374a:	cmp    r9,rax
  41374d:	jne    413d98 <_start@@Base+0xd438>
  413753:	lea    r8,[rsp+0x38]
  413758:	lea    rcx,[rip+0x25d01]        # 439460 <__data_start@@Base+0x3a0>
  41375f:	mov    rdx,rbx
  413762:	mov    rsi,r15
  413765:	mov    rdi,rbp
  413768:	call   40b5a0 <_start@@Base+0x4c40>
  41376d:	cmp    rax,r15
  413770:	je     414363 <_start@@Base+0xda03>
  413776:	cmp    rbx,rax
  413779:	je     414363 <_start@@Base+0xda03>
  41377f:	mov    rdx,QWORD PTR [rsp+0x38]
  413784:	mov    r15,rax
  413787:	nop    WORD PTR [rax+rax*1+0x0]
  413790:	test   rdx,rdx
  413793:	jne    41379f <_start@@Base+0xce3f>
  413795:	test   BYTE PTR [rbp+0x10],0x2
  413799:	je     413591 <_start@@Base+0xcc31>
  41379f:	mov    rdi,QWORD PTR [rbp+0x0]
  4137a3:	xor    esi,esi
  4137a5:	mov    ecx,0x8
  4137aa:	mov    edx,0x8
  4137af:	call   419250 <flatcc_builder_table_add@@Base>
  4137b4:	test   rax,rax
  4137b7:	je     412bd8 <_start@@Base+0xc278>
  4137bd:	mov    rdx,QWORD PTR [rsp+0x38]
  4137c2:	mov    QWORD PTR [rax],rdx
  4137c5:	jmp    413591 <_start@@Base+0xcc31>
  4137ca:	nop    WORD PTR [rax+rax*1+0x0]
  4137d0:	cmp    rax,r12
  4137d3:	jne    413580 <_start@@Base+0xcc20>
  4137d9:	cmp    rdx,0x8
  4137dd:	jle    413580 <_start@@Base+0xcc20>
  4137e3:	mov    ecx,0x8
  4137e8:	mov    rdx,rbx
  4137eb:	mov    rsi,r15
  4137ee:	mov    rdi,rbp
  4137f1:	call   40b830 <_start@@Base+0x4ed0>
  4137f6:	cmp    r15,rax
  4137f9:	je     413580 <_start@@Base+0xcc20>
  4137ff:	mov    DWORD PTR [rsp+0x2c],0x0
  413807:	mov    QWORD PTR [rsp+0x40],0x0
  413810:	mov    DWORD PTR [rsp+0x38],0x0
  413818:	cmp    rbx,rax
  41381b:	je     413c60 <_start@@Base+0xd300>
  413821:	lea    rcx,[rsp+0x38]
  413826:	lea    r8,[rsp+0x40]
  41382b:	mov    rdx,rbx
  41382e:	mov    rsi,rax
  413831:	mov    rdi,rbp
  413834:	mov    QWORD PTR [rsp],rax
  413838:	call   41d880 <flatcc_json_parser_integer@@Base>
  41383d:	mov    r9,QWORD PTR [rsp]
  413841:	mov    r10,rax
  413844:	cmp    r9,rax
  413847:	jne    413dd8 <_start@@Base+0xd478>
  41384d:	mov    rsi,r10
  413850:	lea    r8,[rsp+0x2c]
  413855:	lea    rcx,[rip+0x25be4]        # 439440 <__data_start@@Base+0x380>
  41385c:	mov    rdx,rbx
  41385f:	mov    rdi,rbp
  413862:	mov    QWORD PTR [rsp],r10
  413866:	call   40b1e0 <_start@@Base+0x4880>
  41386b:	mov    r10,QWORD PTR [rsp]
  41386f:	mov    r15,rax
  413872:	cmp    rax,r10
  413875:	je     412bd8 <_start@@Base+0xc278>
  41387b:	cmp    rbx,rax
  41387e:	je     412bd8 <_start@@Base+0xc278>
  413884:	mov    eax,DWORD PTR [rsp+0x2c]
  413888:	test   eax,eax
  41388a:	jne    413896 <_start@@Base+0xcf36>
  41388c:	test   BYTE PTR [rbp+0x10],0x2
  413890:	je     413591 <_start@@Base+0xcc31>
  413896:	mov    rdi,QWORD PTR [rbp+0x0]
  41389a:	mov    ecx,0x4
  41389f:	mov    edx,0x4
  4138a4:	mov    esi,0x1
  4138a9:	call   419250 <flatcc_builder_table_add@@Base>
  4138ae:	test   rax,rax
  4138b1:	je     412bd8 <_start@@Base+0xc278>
  4138b7:	mov    edx,DWORD PTR [rsp+0x2c]
  4138bb:	mov    DWORD PTR [rax],edx
  4138bd:	jmp    413591 <_start@@Base+0xcc31>
  4138c2:	nop    WORD PTR [rax+rax*1+0x0]
  4138c8:	cmp    BYTE PTR [r15+0x1],0x20
  4138cd:	jle    4135a9 <_start@@Base+0xcc49>
  4138d3:	inc    r15
  4138d6:	jmp    4135ba <_start@@Base+0xcc5a>
  4138db:	nop    DWORD PTR [rax+rax*1+0x0]
  4138e0:	lea    rax,[r15+0x1]
  4138e4:	mov    rdx,rbx
  4138e7:	sub    rdx,rax
  4138ea:	cmp    rdx,0x1
  4138ee:	jle    4138fd <_start@@Base+0xcf9d>
  4138f0:	cmp    BYTE PTR [r15+0x1],0x20
  4138f5:	jg     41390b <_start@@Base+0xcfab>
  4138f7:	je     413e10 <_start@@Base+0xd4b0>
  4138fd:	mov    rdx,rbx
  413900:	mov    rsi,rax
  413903:	mov    rdi,rbp
  413906:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41390b:	cmp    rbx,rax
  41390e:	je     413e30 <_start@@Base+0xd4d0>
  413914:	cmp    BYTE PTR [rax],0x7d
  413917:	je     413f38 <_start@@Base+0xd5d8>
  41391d:	mov    DWORD PTR [rsp+0x28],0x1
  413925:	jmp    413532 <_start@@Base+0xcbd2>
  41392a:	nop    WORD PTR [rax+rax*1+0x0]
  413930:	movbe  rax,QWORD PTR [rax+0x10]
  413936:	jmp    412766 <_start@@Base+0xbe06>
  41393b:	nop    DWORD PTR [rax+rax*1+0x0]
  413940:	mov    DWORD PTR [rsp+0x1c],0x0
  413948:	mov    eax,DWORD PTR [rbp+0x1c]
  41394b:	test   eax,eax
  41394d:	jne    4121e8 <_start@@Base+0xb888>
  413953:	mov    rcx,QWORD PTR [rsp+0x30]
  413958:	mov    rdx,rbx
  41395b:	mov    rsi,r15
  41395e:	mov    rdi,rbp
  413961:	call   41ec60 <flatcc_json_parser_finalize_unions@@Base>
  413966:	mov    rdi,QWORD PTR [rbp+0x0]
  41396a:	mov    r12,rax
  41396d:	call   418350 <flatcc_builder_end_table@@Base>
  413972:	mov    rdi,QWORD PTR [rsp+0x8]
  413977:	mov    DWORD PTR [rdi],eax
  413979:	test   eax,eax
  41397b:	jne    4121fe <_start@@Base+0xb89e>
  413981:	mov    r15,r12
  413984:	jmp    4121e8 <_start@@Base+0xb888>
  413989:	nop    DWORD PTR [rax+0x0]
  413990:	cmp    BYTE PTR [r15+0x1],0x20
  413995:	jle    412368 <_start@@Base+0xba08>
  41399b:	inc    r15
  41399e:	jmp    412379 <_start@@Base+0xba19>
  4139a3:	nop    DWORD PTR [rax+rax*1+0x0]
  4139a8:	lea    rsi,[r15+0x1]
  4139ac:	mov    rdx,rbx
  4139af:	sub    rdx,rsi
  4139b2:	cmp    rdx,0x1
  4139b6:	jle    4139c5 <_start@@Base+0xd065>
  4139b8:	cmp    BYTE PTR [r15+0x1],0x20
  4139bd:	jg     4139d3 <_start@@Base+0xd073>
  4139bf:	je     414110 <_start@@Base+0xd7b0>
  4139c5:	mov    rdx,rbx
  4139c8:	mov    rdi,rbp
  4139cb:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  4139d0:	mov    rsi,rax
  4139d3:	cmp    rbx,rsi
  4139d6:	je     414220 <_start@@Base+0xd8c0>
  4139dc:	cmp    BYTE PTR [rsi],0x7d
  4139df:	je     4141c8 <_start@@Base+0xd868>
  4139e5:	mov    DWORD PTR [rsp+0x1c],0x1
  4139ed:	jmp    41226b <_start@@Base+0xb90b>
  4139f2:	nop    WORD PTR [rax+rax*1+0x0]
  4139f8:	and    rax,0xffffffffff000000
  4139fe:	movabs rdx,0x6d6f766965000000
  413a08:	cmp    rax,rdx
  413a0b:	jne    412ec3 <_start@@Base+0xc563>
  413a11:	cmp    rsi,0x5
  413a15:	jle    412ec3 <_start@@Base+0xc563>
  413a1b:	mov    ecx,0x5
  413a20:	mov    rdx,rbx
  413a23:	mov    rsi,r12
  413a26:	mov    rdi,rbp
  413a29:	call   40b830 <_start@@Base+0x4ed0>
  413a2e:	cmp    rax,r12
  413a31:	je     412ec3 <_start@@Base+0xc563>
  413a37:	mov    rdx,rbx
  413a3a:	lea    rcx,[rsp+0x20]
  413a3f:	mov    rsi,rax
  413a42:	mov    rdi,rbp
  413a45:	call   40ba10 <_start@@Base+0x50b0>
  413a4a:	mov    edx,DWORD PTR [rsp+0x20]
  413a4e:	mov    r15,rax
  413a51:	test   edx,edx
  413a53:	je     4121e8 <_start@@Base+0xb888>
  413a59:	mov    rdi,QWORD PTR [rbp+0x0]
  413a5d:	mov    esi,0x1
  413a62:	call   419420 <flatcc_builder_table_add_offset@@Base>
  413a67:	test   rax,rax
  413a6a:	jne    412c28 <_start@@Base+0xc2c8>
  413a70:	jmp    4121e8 <_start@@Base+0xb888>
  413a75:	nop    DWORD PTR [rax]
  413a78:	lea    r14,[r15+0x8]
  413a7c:	mov    r8,rbx
  413a7f:	sub    r8,r14
  413a82:	cmp    r8,0x7
  413a86:	ja     413f28 <_start@@Base+0xd5c8>
  413a8c:	mov    rsi,rbx
  413a8f:	mov    rdi,r14
  413a92:	call   406a50 <_start@@Base+0xf0>
  413a97:	movabs rdi,0xff00000000000000
  413aa1:	and    rax,rdi
  413aa4:	movabs rdx,0x3500000000000000
  413aae:	cmp    rax,rdx
  413ab1:	jne    412d28 <_start@@Base+0xc3c8>
  413ab7:	cmp    r8,0x1
  413abb:	jle    412d28 <_start@@Base+0xc3c8>
  413ac1:	mov    ecx,0x1
  413ac6:	mov    rdx,rbx
  413ac9:	mov    rsi,r14
  413acc:	mov    rdi,rbp
  413acf:	call   40b830 <_start@@Base+0x4ed0>
  413ad4:	cmp    r14,rax
  413ad7:	je     412d28 <_start@@Base+0xc3c8>
  413add:	lea    r14,[rsp+0x40]
  413ae2:	mov    rcx,r14
  413ae5:	mov    rdx,rbx
  413ae8:	mov    rsi,rax
  413aeb:	mov    rdi,rbp
  413aee:	mov    DWORD PTR [rsp+0x40],0x0
  413af6:	mov    QWORD PTR [rsp],rax
  413afa:	call   409370 <_start@@Base+0x2a10>
  413aff:	mov    r9,QWORD PTR [rsp]
  413b03:	mov    r15,rax
  413b06:	cmp    r9,rax
  413b09:	je     4142d9 <_start@@Base+0xd979>
  413b0f:	mov    eax,DWORD PTR [rsp+0x40]
  413b13:	test   eax,eax
  413b15:	jne    413b21 <_start@@Base+0xd1c1>
  413b17:	test   BYTE PTR [rbp+0x10],0x2
  413b1b:	je     412910 <_start@@Base+0xbfb0>
  413b21:	mov    rdi,QWORD PTR [rbp+0x0]
  413b25:	mov    ecx,0x4
  413b2a:	mov    edx,0x4
  413b2f:	mov    esi,0x6
  413b34:	call   419250 <flatcc_builder_table_add@@Base>
  413b39:	test   rax,rax
  413b3c:	jne    412901 <_start@@Base+0xbfa1>
  413b42:	jmp    412bd8 <_start@@Base+0xc278>
  413b47:	nop    WORD PTR [rax+rax*1+0x0]
  413b50:	mov    r15,rsi
  413b53:	jmp    413680 <_start@@Base+0xcd20>
  413b58:	nop    DWORD PTR [rax+rax*1+0x0]
  413b60:	movabs rax,0x6262626200000000
  413b6a:	cmp    rdx,rax
  413b6d:	jne    412ac0 <_start@@Base+0xc160>
  413b73:	cmp    rsi,0x4
  413b77:	jle    412ac0 <_start@@Base+0xc160>
  413b7d:	mov    ecx,0x4
  413b82:	mov    rdx,rbx
  413b85:	mov    rsi,r15
  413b88:	mov    rdi,rbp
  413b8b:	call   40b830 <_start@@Base+0x4ed0>
  413b90:	cmp    rax,r15
  413b93:	je     412ac0 <_start@@Base+0xc160>
  413b99:	lea    rcx,[rsp+0x38]
  413b9e:	mov    rdx,rbx
  413ba1:	mov    rsi,rax
  413ba4:	mov    rdi,rbp
  413ba7:	call   41ea20 <flatcc_json_parser_build_string@@Base>
  413bac:	mov    r15,rax
  413baf:	mov    eax,DWORD PTR [rsp+0x38]
  413bb3:	test   eax,eax
  413bb5:	je     412bd8 <_start@@Base+0xc278>
  413bbb:	mov    rdi,QWORD PTR [rbp+0x0]
  413bbf:	mov    esi,0x2
  413bc4:	call   419420 <flatcc_builder_table_add_offset@@Base>
  413bc9:	test   rax,rax
  413bcc:	jne    412a52 <_start@@Base+0xc0f2>
  413bd2:	jmp    412bd8 <_start@@Base+0xc278>
  413bd7:	nop    WORD PTR [rax+rax*1+0x0]
  413be0:	mov    ecx,0x21
  413be5:	mov    rdx,rbx
  413be8:	mov    rsi,r14
  413beb:	mov    rdi,rbp
  413bee:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  413bf3:	mov    r15,rax
  413bf6:	jmp    412bf2 <_start@@Base+0xc292>
  413bfb:	nop    DWORD PTR [rax+rax*1+0x0]
  413c00:	movbe  rax,QWORD PTR [r12+0x8]
  413c07:	jmp    4122ca <_start@@Base+0xb96a>
  413c0c:	nop    DWORD PTR [rax+0x0]
  413c10:	movbe  rax,QWORD PTR [rax+0x10]
  413c16:	jmp    413348 <_start@@Base+0xc9e8>
  413c1b:	nop    DWORD PTR [rax+rax*1+0x0]
  413c20:	mov    r15,rsi
  413c23:	jmp    412c98 <_start@@Base+0xc338>
  413c28:	nop    DWORD PTR [rax+rax*1+0x0]
  413c30:	mov    r15,rsi
  413c33:	jmp    4132d0 <_start@@Base+0xc970>
  413c38:	nop    DWORD PTR [rax+rax*1+0x0]
  413c40:	movbe  rax,QWORD PTR [r15+0x8]
  413c46:	jmp    41285a <_start@@Base+0xbefa>
  413c4b:	nop    DWORD PTR [rax+rax*1+0x0]
  413c50:	mov    r15,rbx
  413c53:	jmp    413753 <_start@@Base+0xcdf3>
  413c58:	nop    DWORD PTR [rax+rax*1+0x0]
  413c60:	mov    r10,rbx
  413c63:	jmp    41384d <_start@@Base+0xceed>
  413c68:	nop    DWORD PTR [rax+rax*1+0x0]
  413c70:	cmp    BYTE PTR [r15+0x2],0x20
  413c75:	jle    413661 <_start@@Base+0xcd01>
  413c7b:	add    r15,0x2
  413c7f:	jmp    413680 <_start@@Base+0xcd20>
  413c84:	nop    DWORD PTR [rax+0x0]
  413c88:	lea    r14,[r15+0x8]
  413c8c:	mov    r8,rbx
  413c8f:	sub    r8,r14
  413c92:	cmp    r8,0x7
  413c96:	ja     414100 <_start@@Base+0xd7a0>
  413c9c:	mov    rsi,rbx
  413c9f:	mov    rdi,r14
  413ca2:	call   406a50 <_start@@Base+0xf0>
  413ca7:	movabs rdi,0xff00000000000000
  413cb1:	and    rax,rdi
  413cb4:	movabs rdx,0x3500000000000000
  413cbe:	cmp    rax,rdx
  413cc1:	jne    412d28 <_start@@Base+0xc3c8>
  413cc7:	cmp    r8,0x1
  413ccb:	jle    412d28 <_start@@Base+0xc3c8>
  413cd1:	mov    ecx,0x1
  413cd6:	mov    rdx,rbx
  413cd9:	mov    rsi,r14
  413cdc:	mov    rdi,rbp
  413cdf:	call   40b830 <_start@@Base+0x4ed0>
  413ce4:	cmp    r14,rax
  413ce7:	je     412d28 <_start@@Base+0xc3c8>
  413ced:	lea    r14,[rsp+0x40]
  413cf2:	mov    rcx,r14
  413cf5:	mov    rdx,rbx
  413cf8:	mov    rsi,rax
  413cfb:	mov    rdi,rbp
  413cfe:	mov    DWORD PTR [rsp+0x40],0x0
  413d06:	mov    QWORD PTR [rsp],rax
  413d0a:	call   409370 <_start@@Base+0x2a10>
  413d0f:	mov    r9,QWORD PTR [rsp]
  413d13:	mov    r15,rax
  413d16:	cmp    r9,rax
  413d19:	je     414310 <_start@@Base+0xd9b0>
  413d1f:	mov    eax,DWORD PTR [rsp+0x40]
  413d23:	test   eax,eax
  413d25:	jne    413d31 <_start@@Base+0xd3d1>
  413d27:	test   BYTE PTR [rbp+0x10],0x2
  413d2b:	je     412910 <_start@@Base+0xbfb0>
  413d31:	mov    rdi,QWORD PTR [rbp+0x0]
  413d35:	mov    ecx,0x4
  413d3a:	mov    edx,0x4
  413d3f:	mov    esi,0x8
  413d44:	call   419250 <flatcc_builder_table_add@@Base>
  413d49:	test   rax,rax
  413d4c:	jne    412901 <_start@@Base+0xbfa1>
  413d52:	jmp    412bd8 <_start@@Base+0xc278>
  413d57:	nop    WORD PTR [rax+rax*1+0x0]
  413d60:	cmp    BYTE PTR [r15+0x2],0x20
  413d65:	jle    412c59 <_start@@Base+0xc2f9>
  413d6b:	add    r15,0x2
  413d6f:	jmp    412c98 <_start@@Base+0xc338>
  413d74:	nop    DWORD PTR [rax+0x0]
  413d78:	mov    r15,rbx
  413d7b:	jmp    4130f4 <_start@@Base+0xc794>
  413d80:	cmp    BYTE PTR [r15+0x2],0x20
  413d85:	jle    4132b1 <_start@@Base+0xc951>
  413d8b:	add    r15,0x2
  413d8f:	jmp    4132d0 <_start@@Base+0xc970>
  413d94:	nop    DWORD PTR [rax+0x0]
  413d98:	mov    edi,DWORD PTR [rsp+0x2c]
  413d9c:	mov    rax,QWORD PTR [rsp+0x40]
  413da1:	test   edi,edi
  413da3:	je     413fb8 <_start@@Base+0xd658>
  413da9:	movabs rdx,0x8000000000000000
  413db3:	mov    ecx,0x8
  413db8:	cmp    rax,rdx
  413dbb:	ja     41424d <_start@@Base+0xd8ed>
  413dc1:	neg    rax
  413dc4:	mov    rdx,rax
  413dc7:	mov    QWORD PTR [rsp+0x38],rax
  413dcc:	jmp    413790 <_start@@Base+0xce30>
  413dd1:	nop    DWORD PTR [rax+0x0]
  413dd8:	mov    esi,DWORD PTR [rsp+0x38]
  413ddc:	mov    ecx,0x8
  413de1:	test   esi,esi
  413de3:	jne    414169 <_start@@Base+0xd809>
  413de9:	mov    rdx,QWORD PTR [rsp+0x40]
  413dee:	mov    eax,0xffffffff
  413df3:	cmp    rdx,rax
  413df6:	ja     414160 <_start@@Base+0xd800>
  413dfc:	mov    eax,edx
  413dfe:	mov    DWORD PTR [rsp+0x2c],edx
  413e02:	mov    r15,r10
  413e05:	jmp    413888 <_start@@Base+0xcf28>
  413e0a:	nop    WORD PTR [rax+rax*1+0x0]
  413e10:	cmp    BYTE PTR [r15+0x2],0x20
  413e15:	jle    4138fd <_start@@Base+0xcf9d>
  413e1b:	lea    rax,[r15+0x2]
  413e1f:	cmp    rbx,rax
  413e22:	jne    413914 <_start@@Base+0xcfb4>
  413e28:	nop    DWORD PTR [rax+rax*1+0x0]
  413e30:	mov    rdx,rbx
  413e33:	mov    ecx,0xa
  413e38:	mov    rsi,rbx
  413e3b:	mov    rdi,rbp
  413e3e:	mov    DWORD PTR [rsp+0x28],0x0
  413e46:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  413e4b:	mov    edx,DWORD PTR [rsp+0x28]
  413e4f:	jmp    413520 <_start@@Base+0xcbc0>
  413e54:	nop    DWORD PTR [rax+0x0]
  413e58:	mov    r8d,DWORD PTR [rsp+0x2c]
  413e5d:	mov    rdx,QWORD PTR [rsp+0x40]
  413e62:	test   r8d,r8d
  413e65:	je     4140e8 <_start@@Base+0xd788>
  413e6b:	movabs rax,0x8000000000000000
  413e75:	mov    ecx,0x8
  413e7a:	cmp    rdx,rax
  413e7d:	ja     4142b1 <_start@@Base+0xd951>
  413e83:	neg    rdx
  413e86:	mov    QWORD PTR [rsp+0x38],rdx
  413e8b:	jmp    413130 <_start@@Base+0xc7d0>
  413e90:	cmp    BYTE PTR [r15+0x2],0x20
  413e95:	jle    412cf5 <_start@@Base+0xc395>
  413e9b:	lea    rax,[r15+0x2]
  413e9f:	cmp    rbx,rax
  413ea2:	jne    412d0c <_start@@Base+0xc3ac>
  413ea8:	nop    DWORD PTR [rax+rax*1+0x0]
  413eb0:	mov    rdx,rbx
  413eb3:	mov    ecx,0xa
  413eb8:	mov    rsi,rbx
  413ebb:	mov    rdi,rbp
  413ebe:	mov    DWORD PTR [rsp+0x24],0x0
  413ec6:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  413ecb:	mov    edx,DWORD PTR [rsp+0x24]
  413ecf:	jmp    4125a0 <_start@@Base+0xbc40>
  413ed4:	nop    DWORD PTR [rax+0x0]
  413ed8:	mov    r15,rsi
  413edb:	jmp    413948 <_start@@Base+0xcfe8>
  413ee0:	cmp    BYTE PTR [r15+0x2],0x20
  413ee5:	jle    41347d <_start@@Base+0xcb1d>
  413eeb:	lea    rax,[r15+0x2]
  413eef:	cmp    rbx,rax
  413ef2:	jne    413494 <_start@@Base+0xcb34>
  413ef8:	nop    DWORD PTR [rax+rax*1+0x0]
  413f00:	mov    rdx,rbx
  413f03:	mov    ecx,0xa
  413f08:	mov    rsi,rbx
  413f0b:	mov    rdi,rbp
  413f0e:	mov    DWORD PTR [rsp+0x28],0x0
  413f16:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  413f1b:	mov    edx,DWORD PTR [rsp+0x28]
  413f1f:	jmp    412fb0 <_start@@Base+0xc650>
  413f24:	nop    DWORD PTR [rax+0x0]
  413f28:	movbe  rax,QWORD PTR [r15+0x8]
  413f2e:	jmp    413a97 <_start@@Base+0xd137>
  413f33:	nop    DWORD PTR [rax+rax*1+0x0]
  413f38:	lea    r15,[rax+0x1]
  413f3c:	mov    rdx,rbx
  413f3f:	sub    rdx,r15
  413f42:	mov    DWORD PTR [rsp+0x28],0x0
  413f4a:	cmp    rdx,0x1
  413f4e:	jle    413f70 <_start@@Base+0xd610>
  413f50:	cmp    BYTE PTR [rax+0x1],0x20
  413f54:	jg     413680 <_start@@Base+0xcd20>
  413f5a:	jne    413f70 <_start@@Base+0xd610>
  413f5c:	cmp    BYTE PTR [rax+0x2],0x20
  413f60:	jg     414348 <_start@@Base+0xd9e8>
  413f66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413f70:	mov    rdx,rbx
  413f73:	mov    rsi,r15
  413f76:	mov    rdi,rbp
  413f79:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  413f7e:	mov    edx,DWORD PTR [rsp+0x28]
  413f82:	jmp    413520 <_start@@Base+0xcbc0>
  413f87:	nop    WORD PTR [rax+rax*1+0x0]
  413f90:	mov    r14,rbx
  413f93:	jmp    4133d5 <_start@@Base+0xca75>
  413f98:	nop    DWORD PTR [rax+rax*1+0x0]
  413fa0:	cmp    BYTE PTR [r15+0x2],0x20
  413fa5:	jle    412f01 <_start@@Base+0xc5a1>
  413fab:	add    r15,0x2
  413faf:	jmp    413948 <_start@@Base+0xcfe8>
  413fb4:	nop    DWORD PTR [rax+0x0]
  413fb8:	mov    rdx,rax
  413fbb:	test   rax,rax
  413fbe:	js     414244 <_start@@Base+0xd8e4>
  413fc4:	mov    QWORD PTR [rsp+0x38],rax
  413fc9:	jmp    413790 <_start@@Base+0xce30>
  413fce:	xchg   ax,ax
  413fd0:	lea    r15,[rax+0x1]
  413fd4:	mov    rdx,rbx
  413fd7:	sub    rdx,r15
  413fda:	mov    DWORD PTR [rsp+0x24],0x0
  413fe2:	cmp    rdx,0x1
  413fe6:	jle    414000 <_start@@Base+0xd6a0>
  413fe8:	cmp    BYTE PTR [rax+0x1],0x20
  413fec:	jg     412c98 <_start@@Base+0xc338>
  413ff2:	jne    414000 <_start@@Base+0xd6a0>
  413ff4:	cmp    BYTE PTR [rax+0x2],0x20
  413ff8:	jg     414351 <_start@@Base+0xd9f1>
  413ffe:	xchg   ax,ax
  414000:	mov    rdx,rbx
  414003:	mov    rsi,r15
  414006:	mov    rdi,rbp
  414009:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41400e:	mov    edx,DWORD PTR [rsp+0x24]
  414012:	jmp    4125a0 <_start@@Base+0xbc40>
  414017:	nop    WORD PTR [rax+rax*1+0x0]
  414020:	lea    r15,[rax+0x1]
  414024:	mov    rdx,rbx
  414027:	sub    rdx,r15
  41402a:	mov    DWORD PTR [rsp+0x28],0x0
  414032:	cmp    rdx,0x1
  414036:	jle    414050 <_start@@Base+0xd6f0>
  414038:	cmp    BYTE PTR [rax+0x1],0x20
  41403c:	jg     4132d0 <_start@@Base+0xc970>
  414042:	jne    414050 <_start@@Base+0xd6f0>
  414044:	cmp    BYTE PTR [rax+0x2],0x20
  414048:	jg     41435a <_start@@Base+0xd9fa>
  41404e:	xchg   ax,ax
  414050:	mov    rdx,rbx
  414053:	mov    rsi,r15
  414056:	mov    rdi,rbp
  414059:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41405e:	mov    edx,DWORD PTR [rsp+0x28]
  414062:	jmp    412fb0 <_start@@Base+0xc650>
  414067:	nop    WORD PTR [rax+rax*1+0x0]
  414070:	mov    r11d,DWORD PTR [rbp+0x1c]
  414074:	test   r11d,r11d
  414077:	jne    412bd8 <_start@@Base+0xc278>
  41407d:	mov    rdi,QWORD PTR [rbp+0x0]
  414081:	call   418350 <flatcc_builder_end_table@@Base>
  414086:	mov    r12d,eax
  414089:	test   eax,eax
  41408b:	je     412bd8 <_start@@Base+0xc278>
  414091:	mov    rdi,QWORD PTR [rbp+0x0]
  414095:	xor    esi,esi
  414097:	call   419420 <flatcc_builder_table_add_offset@@Base>
  41409c:	test   rax,rax
  41409f:	jne    413306 <_start@@Base+0xc9a6>
  4140a5:	jmp    412bf2 <_start@@Base+0xc292>
  4140aa:	nop    WORD PTR [rax+rax*1+0x0]
  4140b0:	mov    r10d,DWORD PTR [rsp+0x38]
  4140b5:	mov    ecx,0x8
  4140ba:	test   r10d,r10d
  4140bd:	jne    41427e <_start@@Base+0xd91e>
  4140c3:	mov    rdx,QWORD PTR [rsp+0x40]
  4140c8:	mov    eax,0xffffffff
  4140cd:	cmp    rdx,rax
  4140d0:	ja     414275 <_start@@Base+0xd915>
  4140d6:	mov    eax,edx
  4140d8:	mov    DWORD PTR [rsp+0x2c],edx
  4140dc:	mov    r15,r14
  4140df:	jmp    413408 <_start@@Base+0xcaa8>
  4140e4:	nop    DWORD PTR [rax+0x0]
  4140e8:	test   rdx,rdx
  4140eb:	js     4142a8 <_start@@Base+0xd948>
  4140f1:	mov    QWORD PTR [rsp+0x38],rdx
  4140f6:	jmp    413130 <_start@@Base+0xc7d0>
  4140fb:	nop    DWORD PTR [rax+rax*1+0x0]
  414100:	movbe  rax,QWORD PTR [r15+0x8]
  414106:	jmp    413ca7 <_start@@Base+0xd347>
  41410b:	nop    DWORD PTR [rax+rax*1+0x0]
  414110:	cmp    BYTE PTR [r15+0x2],0x20
  414115:	jle    4139c5 <_start@@Base+0xd065>
  41411b:	lea    rsi,[r15+0x2]
  41411f:	jmp    4139d3 <_start@@Base+0xd073>
  414124:	nop    DWORD PTR [rax+0x0]
  414128:	lea    rcx,[rip+0x252b1]        # 4393e0 <__data_start@@Base+0x320>
  41412f:	mov    rdx,rbx
  414132:	mov    rsi,rax
  414135:	mov    rdi,rbp
  414138:	call   40b5a0 <_start@@Base+0x4c40>
  41413d:	cmp    r15,rax
  414140:	mov    r15,rax
  414143:	je     412bd8 <_start@@Base+0xc278>
  414149:	cmp    rbx,rax
  41414c:	jne    412daf <_start@@Base+0xc44f>
  414152:	jmp    412bd8 <_start@@Base+0xc278>
  414157:	nop    WORD PTR [rax+rax*1+0x0]
  414160:	mov    QWORD PTR [rsp],r9
  414164:	mov    ecx,0x7
  414169:	mov    rdx,rbx
  41416c:	mov    rsi,r10
  41416f:	mov    rdi,rbp
  414172:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  414177:	mov    r9,QWORD PTR [rsp]
  41417b:	mov    r15,rax
  41417e:	cmp    r9,rax
  414181:	jne    413884 <_start@@Base+0xcf24>
  414187:	mov    r10,r9
  41418a:	jmp    41384d <_start@@Base+0xceed>
  41418f:	nop
  414190:	mov    r8,r14
  414193:	lea    rcx,[rip+0x25286]        # 439420 <__data_start@@Base+0x360>
  41419a:	mov    rdx,rbx
  41419d:	mov    rsi,rax
  4141a0:	mov    rdi,rbp
  4141a3:	call   40b1e0 <_start@@Base+0x4880>
  4141a8:	cmp    r15,rax
  4141ab:	mov    r15,rax
  4141ae:	je     412bd8 <_start@@Base+0xc278>
  4141b4:	cmp    rbx,rax
  4141b7:	jne    4128d2 <_start@@Base+0xbf72>
  4141bd:	jmp    412bd8 <_start@@Base+0xc278>
  4141c2:	nop    WORD PTR [rax+rax*1+0x0]
  4141c8:	mov    rdx,rbx
  4141cb:	lea    rsi,[rsi+0x1]
  4141cf:	mov    rdi,rbp
  4141d2:	mov    DWORD PTR [rsp+0x1c],0x0
  4141da:	call   407a60 <_start@@Base+0x1100>
  4141df:	mov    edx,DWORD PTR [rsp+0x1c]
  4141e3:	jmp    412260 <_start@@Base+0xb900>
  4141e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4141f0:	lea    rcx,[rip+0x251a9]        # 4393a0 <__data_start@@Base+0x2e0>
  4141f7:	mov    rdx,rbx
  4141fa:	mov    rsi,rax
  4141fd:	mov    rdi,rbp
  414200:	call   40b5a0 <_start@@Base+0x4c40>
  414205:	cmp    r15,rax
  414208:	mov    r15,rax
  41420b:	je     412bd8 <_start@@Base+0xc278>
  414211:	cmp    rbx,rax
  414214:	jne    412e7f <_start@@Base+0xc51f>
  41421a:	jmp    412bd8 <_start@@Base+0xc278>
  41421f:	nop
  414220:	mov    rdx,rbx
  414223:	mov    ecx,0xa
  414228:	mov    rsi,rbx
  41422b:	mov    rdi,rbp
  41422e:	mov    DWORD PTR [rsp+0x1c],0x0
  414236:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41423b:	mov    edx,DWORD PTR [rsp+0x1c]
  41423f:	jmp    412260 <_start@@Base+0xb900>
  414244:	mov    QWORD PTR [rsp],r9
  414248:	mov    ecx,0x7
  41424d:	mov    rsi,r15
  414250:	mov    rdx,rbx
  414253:	mov    rdi,rbp
  414256:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41425b:	mov    r9,QWORD PTR [rsp]
  41425f:	mov    r15,rax
  414262:	cmp    r9,rax
  414265:	je     413753 <_start@@Base+0xcdf3>
  41426b:	mov    rdx,QWORD PTR [rsp+0x38]
  414270:	jmp    413790 <_start@@Base+0xce30>
  414275:	mov    QWORD PTR [rsp],r9
  414279:	mov    ecx,0x7
  41427e:	mov    rdx,rbx
  414281:	mov    rsi,r14
  414284:	mov    rdi,rbp
  414287:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41428c:	mov    r9,QWORD PTR [rsp]
  414290:	mov    r15,rax
  414293:	cmp    r9,rax
  414296:	jne    413404 <_start@@Base+0xcaa4>
  41429c:	mov    r14,r9
  41429f:	jmp    4133d5 <_start@@Base+0xca75>
  4142a4:	nop    DWORD PTR [rax+0x0]
  4142a8:	mov    QWORD PTR [rsp],r9
  4142ac:	mov    ecx,0x7
  4142b1:	mov    rsi,r15
  4142b4:	mov    rdx,rbx
  4142b7:	mov    rdi,rbp
  4142ba:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  4142bf:	mov    r9,QWORD PTR [rsp]
  4142c3:	mov    r15,rax
  4142c6:	cmp    r9,rax
  4142c9:	je     4130f4 <_start@@Base+0xc794>
  4142cf:	mov    rdx,QWORD PTR [rsp+0x38]
  4142d4:	jmp    413130 <_start@@Base+0xc7d0>
  4142d9:	mov    r8,r14
  4142dc:	lea    rcx,[rip+0x250dd]        # 4393c0 <__data_start@@Base+0x300>
  4142e3:	mov    rdx,rbx
  4142e6:	mov    rsi,rax
  4142e9:	mov    rdi,rbp
  4142ec:	call   40b1e0 <_start@@Base+0x4880>
  4142f1:	cmp    r15,rax
  4142f4:	mov    r15,rax
  4142f7:	je     412bd8 <_start@@Base+0xc278>
  4142fd:	cmp    rbx,rax
  414300:	jne    413b0f <_start@@Base+0xd1af>
  414306:	jmp    412bd8 <_start@@Base+0xc278>
  41430b:	nop    DWORD PTR [rax+rax*1+0x0]
  414310:	mov    r8,r14
  414313:	lea    rcx,[rip+0x25066]        # 439380 <__data_start@@Base+0x2c0>
  41431a:	mov    rdx,rbx
  41431d:	mov    rsi,rax
  414320:	mov    rdi,rbp
  414323:	call   40b1e0 <_start@@Base+0x4880>
  414328:	cmp    r15,rax
  41432b:	mov    r15,rax
  41432e:	je     412bd8 <_start@@Base+0xc278>
  414334:	cmp    rbx,rax
  414337:	jne    413d1f <_start@@Base+0xd3bf>
  41433d:	jmp    412bd8 <_start@@Base+0xc278>
  414342:	nop    WORD PTR [rax+rax*1+0x0]
  414348:	lea    r15,[rax+0x2]
  41434c:	jmp    413680 <_start@@Base+0xcd20>
  414351:	lea    r15,[rax+0x2]
  414355:	jmp    412c98 <_start@@Base+0xc338>
  41435a:	lea    r15,[rax+0x2]
  41435e:	jmp    4132d0 <_start@@Base+0xc970>
  414363:	mov    r15,rax
  414366:	jmp    412bd8 <_start@@Base+0xc278>
  41436b:	mov    r15,rax
  41436e:	jmp    413680 <_start@@Base+0xcd20>
  414373:	mov    r15,rax
  414376:	jmp    4132d0 <_start@@Base+0xc970>
  41437b:	mov    rdx,rax
  41437e:	mov    ecx,0x61616161
  414383:	and    rdx,r13
  414386:	shl    rcx,0x20
  41438a:	cmp    rdx,rcx
  41438d:	je     4129f6 <_start@@Base+0xc096>
  414393:	endbr64 
  414397:	movabs rcx,0x6262626231323334
  4143a1:	cmp    rax,rcx
  4143a4:	jne    413b60 <_start@@Base+0xd200>
  4143aa:	cmp    rsi,0x8
  4143ae:	jle    412ac0 <_start@@Base+0xc160>
  4143b4:	mov    ecx,0x8
  4143b9:	mov    rdx,rbx
  4143bc:	mov    rsi,r15
  4143bf:	mov    rdi,rbp
  4143c2:	call   40b830 <_start@@Base+0x4ed0>
  4143c7:	mov    r14,rax
  4143ca:	cmp    rax,r15
  4143cd:	je     412ac0 <_start@@Base+0xc160>
  4143d3:	lea    r8,[rsp+0x40]
  4143d8:	mov    rcx,r8
  4143db:	mov    rdx,rbx
  4143de:	mov    rsi,rax
  4143e1:	mov    rdi,rbp
  4143e4:	mov    QWORD PTR [rsp],r8
  4143e8:	mov    QWORD PTR [rsp+0x40],0x0
  4143f1:	call   408f90 <_start@@Base+0x2630>
  4143f6:	cmp    r14,rax
  4143f9:	mov    r15,rax
  4143fc:	mov    r8,QWORD PTR [rsp]
  414400:	je     414440 <_start@@Base+0xdae0>
  414402:	cmp    QWORD PTR [rsp+0x40],0x0
  414408:	jne    414414 <_start@@Base+0xdab4>
  41440a:	test   BYTE PTR [rbp+0x10],0x2
  41440e:	je     412910 <_start@@Base+0xbfb0>
  414414:	mov    rdi,QWORD PTR [rbp+0x0]
  414418:	mov    ecx,0x8
  41441d:	mov    edx,0x8
  414422:	mov    esi,0x3
  414427:	call   419250 <flatcc_builder_table_add@@Base>
  41442c:	test   rax,rax
  41442f:	jne    412de2 <_start@@Base+0xc482>
  414435:	jmp    412bd8 <_start@@Base+0xc278>
  41443a:	nop    WORD PTR [rax+rax*1+0x0]
  414440:	lea    rcx,[rip+0x24fb9]        # 439400 <__data_start@@Base+0x340>
  414447:	mov    rdx,rbx
  41444a:	mov    rsi,rax
  41444d:	mov    rdi,rbp
  414450:	call   40b5a0 <_start@@Base+0x4c40>
  414455:	cmp    r15,rax
  414458:	mov    r15,rax
  41445b:	je     412bd8 <_start@@Base+0xc278>
  414461:	cmp    rbx,rax
  414464:	jne    414402 <_start@@Base+0xdaa2>
  414466:	jmp    412bd8 <_start@@Base+0xc278>
  41446b:	call   4061a0 <__stack_chk_fail@plt>
  414470:	endbr64 
  414474:	push   r15
  414476:	push   r14
  414478:	mov    r14,rsi
  41447b:	push   r13
  41447d:	push   r12
  41447f:	push   rbp
  414480:	mov    rbp,rdi
  414483:	push   rbx
  414484:	mov    rbx,rdx
  414487:	sub    rsp,0x38
  41448b:	mov    rdi,QWORD PTR fs:0x28
  414494:	mov    QWORD PTR [rsp+0x28],rdi
  414499:	xor    edi,edi
  41449b:	mov    DWORD PTR [r8],0x0
  4144a2:	cmp    cl,0x4
  4144a5:	ja     414c40 <_start@@Base+0xe2e0>
  4144ab:	lea    rdx,[rip+0x16c76]        # 42b128 <_IO_stdin_used@@Base+0x128>
  4144b2:	movzx  eax,cl
  4144b5:	movsxd rax,DWORD PTR [rdx+rax*4]
  4144b9:	mov    r12,r8
  4144bc:	add    rax,rdx
  4144bf:	notrack jmp rax
  4144c2:	nop    WORD PTR [rax+rax*1+0x0]
  4144c8:	mov    rcx,r8
  4144cb:	mov    rdx,rbx
  4144ce:	mov    rdi,rbp
  4144d1:	call   40d9a0 <_start@@Base+0x7040>
  4144d6:	mov    ecx,DWORD PTR [rbp+0x1c]
  4144d9:	test   ecx,ecx
  4144db:	jne    4144e9 <_start@@Base+0xdb89>
  4144dd:	mov    edx,DWORD PTR [r12]
  4144e1:	test   edx,edx
  4144e3:	je     414d00 <_start@@Base+0xe3a0>
  4144e9:	mov    rdi,QWORD PTR [rsp+0x28]
  4144ee:	xor    rdi,QWORD PTR fs:0x28
  4144f7:	jne    414f33 <_start@@Base+0xe5d3>
  4144fd:	add    rsp,0x38
  414501:	pop    rbx
  414502:	pop    rbp
  414503:	pop    r12
  414505:	pop    r13
  414507:	pop    r14
  414509:	pop    r15
  41450b:	ret    
  41450c:	nop    DWORD PTR [rax+0x0]
  414510:	mov    rcx,r8
  414513:	mov    rdx,rbx
  414516:	mov    rdi,rbp
  414519:	call   4121a0 <_start@@Base+0xb840>
  41451e:	jmp    4144d6 <_start@@Base+0xdb76>
  414520:	mov    rax,rbx
  414523:	sub    rax,rsi
  414526:	cmp    rax,0x3
  41452a:	jle    414538 <_start@@Base+0xdbd8>
  41452c:	cmp    DWORD PTR [rsi],0x6c6c756e
  414532:	lea    rax,[rsi+0x4]
  414536:	je     4144e9 <_start@@Base+0xdb89>
  414538:	mov    ecx,0x1a
  41453d:	mov    rdx,rbx
  414540:	mov    rsi,r14
  414543:	mov    rdi,rbp
  414546:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41454b:	jmp    4144e9 <_start@@Base+0xdb89>
  41454d:	nop    DWORD PTR [rax]
  414550:	mov    rcx,r8
  414553:	mov    rdx,rbx
  414556:	mov    rdi,rbp
  414559:	call   40dc00 <_start@@Base+0x72a0>
  41455e:	jmp    4144d6 <_start@@Base+0xdb76>
  414563:	nop    DWORD PTR [rax+rax*1+0x0]
  414568:	mov    rdi,QWORD PTR [rbp+0x0]
  41456c:	mov    esi,0x4
  414571:	call   4179d0 <flatcc_builder_start_table@@Base>
  414576:	test   eax,eax
  414578:	jne    414840 <_start@@Base+0xdee0>
  41457e:	lea    rcx,[rsp+0x18]
  414583:	mov    rdx,rbx
  414586:	mov    rsi,r14
  414589:	mov    rdi,rbp
  41458c:	call   40a4b0 <_start@@Base+0x3b50>
  414591:	mov    r15,rax
  414594:	mov    eax,DWORD PTR [rsp+0x18]
  414598:	nop    DWORD PTR [rax+rax*1+0x0]
  4145a0:	test   eax,eax
  4145a2:	je     414758 <_start@@Base+0xddf8>
  4145a8:	movabs r13,0x7563320000000000
  4145b2:	cmp    rbx,r15
  4145b5:	je     4145c4 <_start@@Base+0xdc64>
  4145b7:	cmp    BYTE PTR [r15],0x22
  4145bb:	jne    414a20 <_start@@Base+0xe0c0>
  4145c1:	inc    r15
  4145c4:	mov    rsi,rbx
  4145c7:	sub    rsi,r15
  4145ca:	cmp    rsi,0x7
  4145ce:	jbe    414860 <_start@@Base+0xdf00>
  4145d4:	movbe  rax,QWORD PTR [r15]
  4145d9:	mov    rdx,rax
  4145dc:	xor    dx,dx
  4145df:	movabs rdi,0x636f6c6f72320000
  4145e9:	cmp    rdx,rdi
  4145ec:	je     414760 <_start@@Base+0xde00>
  4145f2:	mov    rdx,rax
  4145f5:	and    rdx,0xffffffffff000000
  4145fc:	sub    rdi,0x320000
  414603:	cmp    rdx,rdi
  414606:	jne    414930 <_start@@Base+0xdfd0>
  41460c:	cmp    rsi,0x5
  414610:	jle    414910 <_start@@Base+0xdfb0>
  414616:	mov    ecx,0x5
  41461b:	mov    rdx,rbx
  41461e:	mov    rsi,r15
  414621:	mov    rdi,rbp
  414624:	call   40b830 <_start@@Base+0x4ed0>
  414629:	cmp    rax,r15
  41462c:	je     414910 <_start@@Base+0xdfb0>
  414632:	mov    BYTE PTR [rsp+0x17],0x0
  414637:	mov    QWORD PTR [rsp+0x20],0x0
  414640:	mov    DWORD PTR [rsp+0x1c],0x0
  414648:	cmp    rbx,rax
  41464b:	je     414c30 <_start@@Base+0xe2d0>
  414651:	lea    rcx,[rsp+0x1c]
  414656:	lea    r8,[rsp+0x20]
  41465b:	mov    rdx,rbx
  41465e:	mov    rsi,rax
  414661:	mov    rdi,rbp
  414664:	mov    QWORD PTR [rsp+0x8],rax
  414669:	call   41d880 <flatcc_json_parser_integer@@Base>
  41466e:	mov    r10,QWORD PTR [rsp+0x8]
  414673:	mov    r14,rax
  414676:	cmp    r10,rax
  414679:	jne    414c98 <_start@@Base+0xe338>
  41467f:	lea    r8,[rsp+0x17]
  414684:	lea    rcx,[rip+0x24e55]        # 4394e0 <__data_start@@Base+0x420>
  41468b:	mov    rdx,rbx
  41468e:	mov    rsi,r14
  414691:	mov    rdi,rbp
  414694:	call   40a2d0 <_start@@Base+0x3970>
  414699:	cmp    rax,r14
  41469c:	je     414f2b <_start@@Base+0xe5cb>
  4146a2:	cmp    rbx,rax
  4146a5:	je     414f2b <_start@@Base+0xe5cb>
  4146ab:	movzx  edx,BYTE PTR [rsp+0x17]
  4146b0:	mov    r14,rax
  4146b3:	nop    DWORD PTR [rax+rax*1+0x0]
  4146b8:	cmp    dl,0x2
  4146bb:	jne    4146c3 <_start@@Base+0xdd63>
  4146bd:	test   BYTE PTR [rbp+0x10],0x2
  4146c1:	je     4146e8 <_start@@Base+0xdd88>
  4146c3:	mov    rdi,QWORD PTR [rbp+0x0]
  4146c7:	xor    esi,esi
  4146c9:	mov    ecx,0x1
  4146ce:	mov    edx,0x1
  4146d3:	call   419250 <flatcc_builder_table_add@@Base>
  4146d8:	test   rax,rax
  4146db:	je     414840 <_start@@Base+0xdee0>
  4146e1:	movzx  edx,BYTE PTR [rsp+0x17]
  4146e6:	mov    BYTE PTR [rax],dl
  4146e8:	mov    rax,rbx
  4146eb:	sub    rax,r14
  4146ee:	cmp    rax,0x1
  4146f2:	jle    414700 <_start@@Base+0xdda0>
  4146f4:	cmp    BYTE PTR [r14],0x20
  4146f8:	jg     414711 <_start@@Base+0xddb1>
  4146fa:	je     414bb8 <_start@@Base+0xe258>
  414700:	mov    rsi,r14
  414703:	mov    rdx,rbx
  414706:	mov    rdi,rbp
  414709:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41470e:	mov    r14,rax
  414711:	cmp    rbx,r14
  414714:	je     414b80 <_start@@Base+0xe220>
  41471a:	cmp    BYTE PTR [r14],0x2c
  41471e:	je     414bd0 <_start@@Base+0xe270>
  414724:	mov    DWORD PTR [rsp+0x18],0x0
  41472c:	cmp    BYTE PTR [r14],0x7d
  414730:	je     414a40 <_start@@Base+0xe0e0>
  414736:	mov    ecx,0xa
  41473b:	mov    rdx,rbx
  41473e:	mov    rsi,r14
  414741:	mov    rdi,rbp
  414744:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  414749:	mov    r15,rax
  41474c:	mov    eax,DWORD PTR [rsp+0x18]
  414750:	test   eax,eax
  414752:	jne    4145a8 <_start@@Base+0xdc48>
  414758:	mov    r14,r15
  41475b:	jmp    414b88 <_start@@Base+0xe228>
  414760:	cmp    rsi,0x6
  414764:	jle    414910 <_start@@Base+0xdfb0>
  41476a:	mov    ecx,0x6
  41476f:	mov    rdx,rbx
  414772:	mov    rsi,r15
  414775:	mov    rdi,rbp
  414778:	call   40b830 <_start@@Base+0x4ed0>
  41477d:	cmp    rax,r15
  414780:	je     414910 <_start@@Base+0xdfb0>
  414786:	mov    BYTE PTR [rsp+0x17],0x0
  41478b:	mov    QWORD PTR [rsp+0x20],0x0
  414794:	mov    DWORD PTR [rsp+0x1c],0x0
  41479c:	cmp    rbx,rax
  41479f:	je     414c20 <_start@@Base+0xe2c0>
  4147a5:	lea    rcx,[rsp+0x1c]
  4147aa:	lea    r8,[rsp+0x20]
  4147af:	mov    rdx,rbx
  4147b2:	mov    rsi,rax
  4147b5:	mov    rdi,rbp
  4147b8:	mov    QWORD PTR [rsp+0x8],rax
  4147bd:	call   41d880 <flatcc_json_parser_integer@@Base>
  4147c2:	mov    r10,QWORD PTR [rsp+0x8]
  4147c7:	mov    r14,rax
  4147ca:	cmp    r10,rax
  4147cd:	jne    414c60 <_start@@Base+0xe300>
  4147d3:	lea    r8,[rsp+0x17]
  4147d8:	lea    rcx,[rip+0x24d21]        # 439500 <__data_start@@Base+0x440>
  4147df:	mov    rdx,rbx
  4147e2:	mov    rsi,r14
  4147e5:	mov    rdi,rbp
  4147e8:	call   40a2d0 <_start@@Base+0x3970>
  4147ed:	cmp    rax,r14
  4147f0:	je     414f2b <_start@@Base+0xe5cb>
  4147f6:	cmp    rbx,rax
  4147f9:	je     414f2b <_start@@Base+0xe5cb>
  4147ff:	movzx  edx,BYTE PTR [rsp+0x17]
  414804:	mov    r14,rax
  414807:	nop    WORD PTR [rax+rax*1+0x0]
  414810:	cmp    dl,0x2
  414813:	jne    41481f <_start@@Base+0xdebf>
  414815:	test   BYTE PTR [rbp+0x10],0x2
  414819:	je     4146e8 <_start@@Base+0xdd88>
  41481f:	mov    rdi,QWORD PTR [rbp+0x0]
  414823:	mov    ecx,0x1
  414828:	mov    edx,0x1
  41482d:	mov    esi,0x1
  414832:	call   419250 <flatcc_builder_table_add@@Base>
  414837:	test   rax,rax
  41483a:	jne    4146e1 <_start@@Base+0xdd81>
  414840:	mov    ecx,0x21
  414845:	mov    rdx,rbx
  414848:	mov    rsi,r14
  41484b:	mov    rdi,rbp
  41484e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  414853:	jmp    4144d6 <_start@@Base+0xdb76>
  414858:	nop    DWORD PTR [rax+rax*1+0x0]
  414860:	lea    rdx,[rip+0x168d5]        # 42b13c <_IO_stdin_used@@Base+0x13c>
  414867:	movsxd rax,DWORD PTR [rdx+rsi*4]
  41486b:	add    rax,rdx
  41486e:	notrack jmp rax
  414871:	nop    DWORD PTR [rax+0x0]
  414878:	movsx  rcx,BYTE PTR [r15+0x6]
  41487d:	shl    rcx,0x8
  414881:	movsx  rdx,BYTE PTR [r15+0x5]
  414886:	mov    rax,rdx
  414889:	shl    rax,0x10
  41488d:	or     rcx,rax
  414890:	movsx  rdx,BYTE PTR [r15+0x4]
  414895:	mov    rax,rdx
  414898:	shl    rax,0x18
  41489c:	or     rax,rcx
  41489f:	movsx  rdx,BYTE PTR [r15+0x3]
  4148a4:	mov    rcx,rdx
  4148a7:	shl    rcx,0x20
  4148ab:	or     rax,rcx
  4148ae:	movsx  rdx,BYTE PTR [r15+0x2]
  4148b3:	mov    rcx,rdx
  4148b6:	shl    rcx,0x28
  4148ba:	or     rcx,rax
  4148bd:	movsx  rdx,BYTE PTR [r15+0x1]
  4148c2:	mov    rax,rdx
  4148c5:	shl    rax,0x30
  4148c9:	or     rcx,rax
  4148cc:	movsx  rdx,BYTE PTR [r15]
  4148d0:	mov    rax,rdx
  4148d3:	shl    rax,0x38
  4148d7:	or     rax,rcx
  4148da:	jmp    4145d9 <_start@@Base+0xdc79>
  4148df:	nop
  4148e0:	xor    ecx,ecx
  4148e2:	jmp    414881 <_start@@Base+0xdf21>
  4148e4:	nop    DWORD PTR [rax+0x0]
  4148e8:	xor    ecx,ecx
  4148ea:	jmp    414890 <_start@@Base+0xdf30>
  4148ec:	nop    DWORD PTR [rax+0x0]
  4148f0:	xor    eax,eax
  4148f2:	jmp    41489f <_start@@Base+0xdf3f>
  4148f4:	nop    DWORD PTR [rax+0x0]
  4148f8:	xor    eax,eax
  4148fa:	jmp    4148ae <_start@@Base+0xdf4e>
  4148fc:	nop    DWORD PTR [rax+0x0]
  414900:	xor    ecx,ecx
  414902:	jmp    4148bd <_start@@Base+0xdf5d>
  414904:	nop    DWORD PTR [rax+0x0]
  414908:	xor    ecx,ecx
  41490a:	jmp    4148cc <_start@@Base+0xdf6c>
  41490c:	nop    DWORD PTR [rax+0x0]
  414910:	mov    rdx,rbx
  414913:	mov    rsi,r15
  414916:	mov    rdi,rbp
  414919:	call   41e400 <flatcc_json_parser_unmatched_symbol@@Base>
  41491e:	mov    r14,rax
  414921:	jmp    4146e8 <_start@@Base+0xdd88>
  414926:	nop    WORD PTR cs:[rax+rax*1+0x0]
  414930:	endbr64 
  414934:	movabs rdx,0xffffff0000000000
  41493e:	and    rdx,rax
  414941:	cmp    rdx,r13
  414944:	jne    414a80 <_start@@Base+0xe120>
  41494a:	cmp    rsi,0x3
  41494e:	jle    414910 <_start@@Base+0xdfb0>
  414950:	mov    ecx,0x3
  414955:	mov    rdx,rbx
  414958:	mov    rsi,r15
  41495b:	mov    rdi,rbp
  41495e:	call   40b830 <_start@@Base+0x4ed0>
  414963:	cmp    rax,r15
  414966:	je     414910 <_start@@Base+0xdfb0>
  414968:	mov    BYTE PTR [rsp+0x17],0x0
  41496d:	mov    QWORD PTR [rsp+0x20],0x0
  414976:	mov    DWORD PTR [rsp+0x1c],0x0
  41497e:	cmp    rbx,rax
  414981:	je     414ce0 <_start@@Base+0xe380>
  414987:	lea    rcx,[rsp+0x1c]
  41498c:	lea    r8,[rsp+0x20]
  414991:	mov    rdx,rbx
  414994:	mov    rsi,rax
  414997:	mov    rdi,rbp
  41499a:	mov    QWORD PTR [rsp+0x8],rax
  41499f:	call   41d880 <flatcc_json_parser_integer@@Base>
  4149a4:	mov    r10,QWORD PTR [rsp+0x8]
  4149a9:	mov    r15,rax
  4149ac:	cmp    r10,rax
  4149af:	jne    414d48 <_start@@Base+0xe3e8>
  4149b5:	lea    r8,[rsp+0x17]
  4149ba:	lea    rcx,[rip+0x24aff]        # 4394c0 <__data_start@@Base+0x400>
  4149c1:	mov    rdx,rbx
  4149c4:	mov    rsi,r15
  4149c7:	mov    rdi,rbp
  4149ca:	call   40ae20 <_start@@Base+0x44c0>
  4149cf:	mov    r14,rax
  4149d2:	cmp    rax,r15
  4149d5:	je     414840 <_start@@Base+0xdee0>
  4149db:	cmp    rbx,rax
  4149de:	je     414840 <_start@@Base+0xdee0>
  4149e4:	movzx  eax,BYTE PTR [rsp+0x17]
  4149e9:	cmp    al,0x2
  4149eb:	jne    4149f7 <_start@@Base+0xe097>
  4149ed:	test   BYTE PTR [rbp+0x10],0x2
  4149f1:	je     4146e8 <_start@@Base+0xdd88>
  4149f7:	mov    rdi,QWORD PTR [rbp+0x0]
  4149fb:	mov    ecx,0x1
  414a00:	mov    edx,0x1
  414a05:	mov    esi,0x3
  414a0a:	call   419250 <flatcc_builder_table_add@@Base>
  414a0f:	test   rax,rax
  414a12:	jne    4146e1 <_start@@Base+0xdd81>
  414a18:	jmp    414840 <_start@@Base+0xdee0>
  414a1d:	nop    DWORD PTR [rax]
  414a20:	mov    rsi,r15
  414a23:	mov    ecx,0x5
  414a28:	mov    rdx,rbx
  414a2b:	mov    rdi,rbp
  414a2e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  414a33:	mov    r15,rax
  414a36:	jmp    4145c4 <_start@@Base+0xdc64>
  414a3b:	nop    DWORD PTR [rax+rax*1+0x0]
  414a40:	lea    rsi,[r14+0x1]
  414a44:	mov    rax,rbx
  414a47:	sub    rax,rsi
  414a4a:	cmp    rax,0x1
  414a4e:	jle    414a61 <_start@@Base+0xe101>
  414a50:	cmp    BYTE PTR [r14+0x1],0x20
  414a55:	jg     414cd0 <_start@@Base+0xe370>
  414a5b:	je     414d20 <_start@@Base+0xe3c0>
  414a61:	mov    rdx,rbx
  414a64:	mov    rdi,rbp
  414a67:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  414a6c:	mov    r15,rax
  414a6f:	mov    eax,DWORD PTR [rsp+0x18]
  414a73:	jmp    4145a0 <_start@@Base+0xdc40>
  414a78:	nop    DWORD PTR [rax+rax*1+0x0]
  414a80:	movabs rdx,0xffff000000000000
  414a8a:	and    rax,rdx
  414a8d:	movabs rdx,0x7563000000000000
  414a97:	cmp    rax,rdx
  414a9a:	jne    414910 <_start@@Base+0xdfb0>
  414aa0:	cmp    rsi,0x2
  414aa4:	jle    414910 <_start@@Base+0xdfb0>
  414aaa:	mov    ecx,0x2
  414aaf:	mov    rdx,rbx
  414ab2:	mov    rsi,r15
  414ab5:	mov    rdi,rbp
  414ab8:	call   40b830 <_start@@Base+0x4ed0>
  414abd:	cmp    rax,r15
  414ac0:	je     414910 <_start@@Base+0xdfb0>
  414ac6:	mov    BYTE PTR [rsp+0x17],0x0
  414acb:	mov    QWORD PTR [rsp+0x20],0x0
  414ad4:	mov    DWORD PTR [rsp+0x1c],0x0
  414adc:	cmp    rbx,rax
  414adf:	je     414cf0 <_start@@Base+0xe390>
  414ae5:	lea    rcx,[rsp+0x1c]
  414aea:	lea    r8,[rsp+0x20]
  414aef:	mov    rdx,rbx
  414af2:	mov    rsi,rax
  414af5:	mov    rdi,rbp
  414af8:	mov    QWORD PTR [rsp+0x8],rax
  414afd:	call   41d880 <flatcc_json_parser_integer@@Base>
  414b02:	mov    r10,QWORD PTR [rsp+0x8]
  414b07:	mov    r15,rax
  414b0a:	cmp    r10,rax
  414b0d:	jne    414d80 <_start@@Base+0xe420>
  414b13:	lea    r8,[rsp+0x17]
  414b18:	lea    rcx,[rip+0x24981]        # 4394a0 <__data_start@@Base+0x3e0>
  414b1f:	mov    rdx,rbx
  414b22:	mov    rsi,r15
  414b25:	mov    rdi,rbp
  414b28:	call   40ae20 <_start@@Base+0x44c0>
  414b2d:	mov    r14,rax
  414b30:	cmp    rax,r15
  414b33:	je     414840 <_start@@Base+0xdee0>
  414b39:	cmp    rbx,rax
  414b3c:	je     414840 <_start@@Base+0xdee0>
  414b42:	movzx  eax,BYTE PTR [rsp+0x17]
  414b47:	cmp    al,0x2
  414b49:	jne    414b55 <_start@@Base+0xe1f5>
  414b4b:	test   BYTE PTR [rbp+0x10],0x2
  414b4f:	je     4146e8 <_start@@Base+0xdd88>
  414b55:	mov    rdi,QWORD PTR [rbp+0x0]
  414b59:	mov    ecx,0x1
  414b5e:	mov    edx,0x1
  414b63:	mov    esi,0x2
  414b68:	call   419250 <flatcc_builder_table_add@@Base>
  414b6d:	test   rax,rax
  414b70:	jne    4146e1 <_start@@Base+0xdd81>
  414b76:	jmp    414840 <_start@@Base+0xdee0>
  414b7b:	nop    DWORD PTR [rax+rax*1+0x0]
  414b80:	mov    DWORD PTR [rsp+0x18],0x0
  414b88:	mov    esi,DWORD PTR [rbp+0x1c]
  414b8b:	test   esi,esi
  414b8d:	jne    414840 <_start@@Base+0xdee0>
  414b93:	mov    rdi,QWORD PTR [rbp+0x0]
  414b97:	call   418350 <flatcc_builder_end_table@@Base>
  414b9c:	mov    edx,eax
  414b9e:	mov    DWORD PTR [r12],eax
  414ba2:	mov    rax,r14
  414ba5:	test   edx,edx
  414ba7:	jne    4144d6 <_start@@Base+0xdb76>
  414bad:	jmp    414840 <_start@@Base+0xdee0>
  414bb2:	nop    WORD PTR [rax+rax*1+0x0]
  414bb8:	cmp    BYTE PTR [r14+0x1],0x20
  414bbd:	jle    414700 <_start@@Base+0xdda0>
  414bc3:	inc    r14
  414bc6:	jmp    414711 <_start@@Base+0xddb1>
  414bcb:	nop    DWORD PTR [rax+rax*1+0x0]
  414bd0:	lea    r15,[r14+0x1]
  414bd4:	mov    rax,rbx
  414bd7:	sub    rax,r15
  414bda:	cmp    rax,0x1
  414bde:	jle    414bed <_start@@Base+0xe28d>
  414be0:	cmp    BYTE PTR [r14+0x1],0x20
  414be5:	jg     414bfe <_start@@Base+0xe29e>
  414be7:	je     414de8 <_start@@Base+0xe488>
  414bed:	mov    rsi,r15
  414bf0:	mov    rdx,rbx
  414bf3:	mov    rdi,rbp
  414bf6:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  414bfb:	mov    r15,rax
  414bfe:	cmp    rbx,r15
  414c01:	je     414e98 <_start@@Base+0xe538>
  414c07:	cmp    BYTE PTR [r15],0x7d
  414c0b:	je     414e70 <_start@@Base+0xe510>
  414c11:	mov    DWORD PTR [rsp+0x18],0x1
  414c19:	jmp    4145b2 <_start@@Base+0xdc52>
  414c1e:	xchg   ax,ax
  414c20:	mov    r14,rbx
  414c23:	jmp    4147d3 <_start@@Base+0xde73>
  414c28:	nop    DWORD PTR [rax+rax*1+0x0]
  414c30:	mov    r14,rbx
  414c33:	jmp    41467f <_start@@Base+0xdd1f>
  414c38:	nop    DWORD PTR [rax+rax*1+0x0]
  414c40:	test   BYTE PTR [rbp+0x10],0x1
  414c44:	jne    414d38 <_start@@Base+0xe3d8>
  414c4a:	mov    ecx,0xf
  414c4f:	mov    rdi,rbp
  414c52:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  414c57:	jmp    4144e9 <_start@@Base+0xdb89>
  414c5c:	nop    DWORD PTR [rax+0x0]
  414c60:	mov    r11d,DWORD PTR [rsp+0x1c]
  414c65:	mov    rax,QWORD PTR [rsp+0x20]
  414c6a:	test   r11d,r11d
  414c6d:	je     414db8 <_start@@Base+0xe458>
  414c73:	mov    ecx,0x8
  414c78:	cmp    rax,0x80
  414c7e:	ja     414eca <_start@@Base+0xe56a>
  414c84:	mov    edx,eax
  414c86:	neg    edx
  414c88:	mov    BYTE PTR [rsp+0x17],dl
  414c8c:	jmp    414810 <_start@@Base+0xdeb0>
  414c91:	nop    DWORD PTR [rax+0x0]
  414c98:	mov    r9d,DWORD PTR [rsp+0x1c]
  414c9d:	mov    rax,QWORD PTR [rsp+0x20]
  414ca2:	test   r9d,r9d
  414ca5:	je     414dd0 <_start@@Base+0xe470>
  414cab:	mov    ecx,0x8
  414cb0:	cmp    rax,0x80
  414cb6:	ja     414f02 <_start@@Base+0xe5a2>
  414cbc:	mov    edx,eax
  414cbe:	neg    edx
  414cc0:	mov    BYTE PTR [rsp+0x17],dl
  414cc4:	jmp    4146b8 <_start@@Base+0xdd58>
  414cc9:	nop    DWORD PTR [rax+0x0]
  414cd0:	mov    r14,rsi
  414cd3:	jmp    414b88 <_start@@Base+0xe228>
  414cd8:	nop    DWORD PTR [rax+rax*1+0x0]
  414ce0:	mov    r15,rbx
  414ce3:	jmp    4149b5 <_start@@Base+0xe055>
  414ce8:	nop    DWORD PTR [rax+rax*1+0x0]
  414cf0:	mov    r15,rbx
  414cf3:	jmp    414b13 <_start@@Base+0xe1b3>
  414cf8:	nop    DWORD PTR [rax+rax*1+0x0]
  414d00:	mov    ecx,0x21
  414d05:	mov    rdx,rbx
  414d08:	mov    rsi,rax
  414d0b:	mov    rdi,rbp
  414d0e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  414d13:	jmp    4144e9 <_start@@Base+0xdb89>
  414d18:	nop    DWORD PTR [rax+rax*1+0x0]
  414d20:	cmp    BYTE PTR [r14+0x2],0x20
  414d25:	jle    414a61 <_start@@Base+0xe101>
  414d2b:	add    r14,0x2
  414d2f:	jmp    414b88 <_start@@Base+0xe228>
  414d34:	nop    DWORD PTR [rax+0x0]
  414d38:	mov    rdi,rbp
  414d3b:	call   41d940 <flatcc_json_parser_generic_json@@Base>
  414d40:	jmp    4144e9 <_start@@Base+0xdb89>
  414d45:	nop    DWORD PTR [rax]
  414d48:	mov    r8d,DWORD PTR [rsp+0x1c]
  414d4d:	mov    ecx,0x8
  414d52:	test   r8d,r8d
  414d55:	jne    414e0a <_start@@Base+0xe4aa>
  414d5b:	mov    rdx,QWORD PTR [rsp+0x20]
  414d60:	cmp    rdx,0xff
  414d67:	ja     414e00 <_start@@Base+0xe4a0>
  414d6d:	mov    eax,edx
  414d6f:	mov    BYTE PTR [rsp+0x17],dl
  414d73:	mov    r14,r15
  414d76:	jmp    4149e9 <_start@@Base+0xe089>
  414d7b:	nop    DWORD PTR [rax+rax*1+0x0]
  414d80:	mov    edi,DWORD PTR [rsp+0x1c]
  414d84:	mov    ecx,0x8
  414d89:	test   edi,edi
  414d8b:	jne    414e42 <_start@@Base+0xe4e2>
  414d91:	mov    rdx,QWORD PTR [rsp+0x20]
  414d96:	cmp    rdx,0xff
  414d9d:	ja     414e38 <_start@@Base+0xe4d8>
  414da3:	mov    eax,edx
  414da5:	mov    BYTE PTR [rsp+0x17],dl
  414da9:	mov    r14,r15
  414dac:	jmp    414b47 <_start@@Base+0xe1e7>
  414db1:	nop    DWORD PTR [rax+0x0]
  414db8:	cmp    rax,0x7f
  414dbc:	ja     414ec0 <_start@@Base+0xe560>
  414dc2:	mov    edx,eax
  414dc4:	mov    BYTE PTR [rsp+0x17],al
  414dc8:	jmp    414810 <_start@@Base+0xdeb0>
  414dcd:	nop    DWORD PTR [rax]
  414dd0:	cmp    rax,0x7f
  414dd4:	ja     414ef8 <_start@@Base+0xe598>
  414dda:	mov    edx,eax
  414ddc:	mov    BYTE PTR [rsp+0x17],al
  414de0:	jmp    4146b8 <_start@@Base+0xdd58>
  414de5:	nop    DWORD PTR [rax]
  414de8:	cmp    BYTE PTR [r14+0x2],0x20
  414ded:	jle    414bed <_start@@Base+0xe28d>
  414df3:	lea    r15,[r14+0x2]
  414df7:	jmp    414bfe <_start@@Base+0xe29e>
  414dfc:	nop    DWORD PTR [rax+0x0]
  414e00:	mov    QWORD PTR [rsp+0x8],r10
  414e05:	mov    ecx,0x7
  414e0a:	mov    rdx,rbx
  414e0d:	mov    rsi,r15
  414e10:	mov    rdi,rbp
  414e13:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  414e18:	mov    r10,QWORD PTR [rsp+0x8]
  414e1d:	mov    r14,rax
  414e20:	cmp    r10,rax
  414e23:	jne    4149e4 <_start@@Base+0xe084>
  414e29:	mov    r15,r10
  414e2c:	jmp    4149b5 <_start@@Base+0xe055>
  414e31:	nop    DWORD PTR [rax+0x0]
  414e38:	mov    QWORD PTR [rsp+0x8],r10
  414e3d:	mov    ecx,0x7
  414e42:	mov    rdx,rbx
  414e45:	mov    rsi,r15
  414e48:	mov    rdi,rbp
  414e4b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  414e50:	mov    r10,QWORD PTR [rsp+0x8]
  414e55:	mov    r14,rax
  414e58:	cmp    r10,rax
  414e5b:	jne    414b42 <_start@@Base+0xe1e2>
  414e61:	mov    r15,r10
  414e64:	jmp    414b13 <_start@@Base+0xe1b3>
  414e69:	nop    DWORD PTR [rax+0x0]
  414e70:	lea    rsi,[r15+0x1]
  414e74:	mov    rdx,rbx
  414e77:	mov    rdi,rbp
  414e7a:	mov    DWORD PTR [rsp+0x18],0x0
  414e82:	call   407a60 <_start@@Base+0x1100>
  414e87:	mov    r15,rax
  414e8a:	mov    eax,DWORD PTR [rsp+0x18]
  414e8e:	jmp    4145a0 <_start@@Base+0xdc40>
  414e93:	nop    DWORD PTR [rax+rax*1+0x0]
  414e98:	mov    ecx,0xa
  414e9d:	mov    rdx,rbx
  414ea0:	mov    rsi,rbx
  414ea3:	mov    rdi,rbp
  414ea6:	mov    DWORD PTR [rsp+0x18],0x0
  414eae:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  414eb3:	mov    r15,rax
  414eb6:	mov    eax,DWORD PTR [rsp+0x18]
  414eba:	jmp    4145a0 <_start@@Base+0xdc40>
  414ebf:	nop
  414ec0:	mov    QWORD PTR [rsp+0x8],r10
  414ec5:	mov    ecx,0x7
  414eca:	mov    rsi,r14
  414ecd:	mov    rdx,rbx
  414ed0:	mov    rdi,rbp
  414ed3:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  414ed8:	mov    r10,QWORD PTR [rsp+0x8]
  414edd:	mov    r14,rax
  414ee0:	cmp    r10,rax
  414ee3:	je     4147d3 <_start@@Base+0xde73>
  414ee9:	movzx  edx,BYTE PTR [rsp+0x17]
  414eee:	jmp    414810 <_start@@Base+0xdeb0>
  414ef3:	nop    DWORD PTR [rax+rax*1+0x0]
  414ef8:	mov    QWORD PTR [rsp+0x8],r10
  414efd:	mov    ecx,0x7
  414f02:	mov    rsi,r14
  414f05:	mov    rdx,rbx
  414f08:	mov    rdi,rbp
  414f0b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  414f10:	mov    r10,QWORD PTR [rsp+0x8]
  414f15:	mov    r14,rax
  414f18:	cmp    r10,rax
  414f1b:	je     41467f <_start@@Base+0xdd1f>
  414f21:	movzx  edx,BYTE PTR [rsp+0x17]
  414f26:	jmp    4146b8 <_start@@Base+0xdd58>
  414f2b:	mov    r14,rax
  414f2e:	jmp    414840 <_start@@Base+0xdee0>
  414f33:	call   4061a0 <__stack_chk_fail@plt>
  414f38:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000414f40 <test_json@@Base>:
  414f40:	endbr64 
  414f44:	push   r15
  414f46:	mov    r15d,r8d
  414f49:	push   r14
  414f4b:	mov    r14d,ecx
  414f4e:	push   r13
  414f50:	mov    r13,rsi
  414f53:	push   r12
  414f55:	push   rbp
  414f56:	push   rbx
  414f57:	mov    rbx,rdi
  414f5a:	sub    rsp,0x288
  414f61:	mov    DWORD PTR [rsp+0x8],r9d
  414f66:	mov    QWORD PTR [rsp+0x10],rdx
  414f6b:	lea    rbp,[rsp+0xd0]
  414f73:	mov    rdi,rbp
  414f76:	lea    r12,[rsp+0x80]
  414f7e:	mov    rax,QWORD PTR fs:0x28
  414f87:	mov    QWORD PTR [rsp+0x278],rax
  414f8f:	xor    eax,eax
  414f91:	call   416380 <flatcc_builder_init@@Base>
  414f96:	xor    esi,esi
  414f98:	mov    rdi,r12
  414f9b:	call   42ad60 <flatcc_json_printer_init_dynamic_buffer@@Base>
  414fa0:	mov    r9d,DWORD PTR [rsp+0x8]
  414fa5:	mov    eax,r9d
  414fa8:	shr    eax,1
  414faa:	and    eax,0x1
  414fad:	mov    BYTE PTR [rsp+0xb3],al
  414fb4:	mov    eax,r9d
  414fb7:	shr    eax,0x2
  414fba:	and    eax,0x1
  414fbd:	mov    BYTE PTR [rsp+0xb2],r9b
  414fc5:	mov    BYTE PTR [rsp+0xb4],al
  414fcc:	mov    eax,r9d
  414fcf:	shr    eax,0x3
  414fd2:	and    eax,0x1
  414fd5:	and    BYTE PTR [rsp+0xb2],0x1
  414fdd:	mov    BYTE PTR [rsp+0xb5],al
  414fe4:	test   r9b,0x10
  414fe8:	je     414ff2 <test_json@@Base+0xb2>
  414fea:	mov    BYTE PTR [rsp+0xb1],0x2
  414ff2:	and    r9d,0x20
  414ff6:	je     41500d <test_json@@Base+0xcd>
  414ff8:	mov    esi,0x1
  414ffd:	mov    BYTE PTR [rsp+0xb1],0x2
  415005:	mov    WORD PTR [rsp+0xb2],si
  41500d:	mov    rdi,r13
  415010:	call   406190 <strlen@plt>
  415015:	lea    rsi,[rsp+0x40]
  41501a:	sub    rsp,0x8
  41501e:	push   QWORD PTR [rbx+0x8]
  415021:	mov    r9,QWORD PTR [rbx]
  415024:	mov    rcx,rax
  415027:	mov    rdx,r13
  41502a:	mov    r8d,r15d
  41502d:	mov    rdi,rbp
  415030:	call   41f750 <flatcc_json_parser_table_as_root@@Base>
  415035:	pop    rdx
  415036:	pop    rcx
  415037:	cmp    eax,r14d
  41503a:	jne    415280 <test_json@@Base+0x340>
  415040:	test   r14d,r14d
  415043:	je     415090 <test_json@@Base+0x150>
  415045:	xor    r13d,r13d
  415048:	xor    r14d,r14d
  41504b:	mov    rdi,r13
  41504e:	call   419b90 <flatcc_builder_aligned_free@@Base>
  415053:	mov    rdi,rbp
  415056:	call   416540 <flatcc_builder_clear@@Base>
  41505b:	mov    rdi,r12
  41505e:	call   42ae60 <flatcc_json_printer_clear@@Base>
  415063:	mov    rdx,QWORD PTR [rsp+0x278]
  41506b:	xor    rdx,QWORD PTR fs:0x28
  415074:	mov    eax,r14d
  415077:	jne    41547b <test_json@@Base+0x53b>
  41507d:	add    rsp,0x288
  415084:	pop    rbx
  415085:	pop    rbp
  415086:	pop    r12
  415088:	pop    r13
  41508a:	pop    r14
  41508c:	pop    r15
  41508e:	ret    
  41508f:	nop
  415090:	lea    rsi,[rsp+0x30]
  415095:	mov    rdi,rbp
  415098:	call   419a30 <flatcc_builder_finalize_aligned_buffer@@Base>
  41509d:	mov    rcx,QWORD PTR [rbx+0x18]
  4150a1:	mov    rdx,QWORD PTR [rbx]
  4150a4:	mov    rsi,QWORD PTR [rsp+0x30]
  4150a9:	mov    rdi,rax
  4150ac:	mov    r13,rax
  4150af:	call   41b160 <flatcc_verify_table_as_root@@Base>
  4150b4:	test   eax,eax
  4150b6:	jne    415431 <test_json@@Base+0x4f1>
  4150bc:	mov    r8,QWORD PTR [rbx+0x10]
  4150c0:	mov    rcx,QWORD PTR [rbx]
  4150c3:	mov    rdx,QWORD PTR [rsp+0x30]
  4150c8:	mov    rsi,r13
  4150cb:	mov    rdi,r12
  4150ce:	call   42a6f0 <flatcc_json_printer_table_as_root@@Base>
  4150d3:	lea    rsi,[rsp+0x38]
  4150d8:	mov    rdi,r12
  4150db:	call   42ae00 <flatcc_json_printer_get_buffer@@Base>
  4150e0:	mov    rbx,rax
  4150e3:	test   rax,rax
  4150e6:	je     415100 <test_json@@Base+0x1c0>
  4150e8:	mov    rdi,QWORD PTR [rsp+0x10]
  4150ed:	mov    rsi,rax
  4150f0:	call   4061f0 <strcmp@plt>
  4150f5:	mov    r14d,eax
  4150f8:	test   eax,eax
  4150fa:	je     41504b <test_json@@Base+0x10b>
  415100:	mov    r15,QWORD PTR [rip+0x23ee1]        # 438fe8 <stderr@GLIBC_2.2.5>
  415107:	mov    ecx,DWORD PTR [rsp+0x2c0]
  41510e:	mov    rdi,QWORD PTR [r15]
  415111:	lea    rdx,[rip+0x166d8]        # 42b7f0 <_IO_stdin_used@@Base+0x7f0>
  415118:	mov    esi,0x1
  41511d:	xor    eax,eax
  41511f:	call   406260 <__fprintf_chk@plt>
  415124:	mov    rdi,QWORD PTR [r15]
  415127:	mov    rcx,rbx
  41512a:	lea    rdx,[rip+0x163d6]        # 42b507 <_IO_stdin_used@@Base+0x507>
  415131:	mov    esi,0x1
  415136:	xor    eax,eax
  415138:	call   406260 <__fprintf_chk@plt>
  41513d:	mov    rdi,QWORD PTR [r15]
  415140:	lea    rdx,[rip+0x163a0]        # 42b4e7 <_IO_stdin_used@@Base+0x4e7>
  415147:	mov    esi,0x1
  41514c:	xor    eax,eax
  41514e:	call   406260 <__fprintf_chk@plt>
  415153:	mov    rcx,QWORD PTR [rsp+0x10]
  415158:	mov    rdi,QWORD PTR [r15]
  41515b:	lea    rdx,[rip+0x163a5]        # 42b507 <_IO_stdin_used@@Base+0x507>
  415162:	mov    esi,0x1
  415167:	xor    eax,eax
  415169:	call   406260 <__fprintf_chk@plt>
  41516e:	mov    r14d,0xffffffff
  415174:	test   r13,r13
  415177:	je     41504b <test_json@@Base+0x10b>
  41517d:	mov    rax,QWORD PTR [rsp+0x30]
  415182:	mov    r14,QWORD PTR [r15]
  415185:	mov    rbx,rax
  415188:	mov    QWORD PTR [rsp+0x10],rax
  41518d:	lea    rcx,[rip+0x1635e]        # 42b4f2 <_IO_stdin_used@@Base+0x4f2>
  415194:	lea    rdx,[rip+0x16365]        # 42b500 <_IO_stdin_used@@Base+0x500>
  41519b:	mov    esi,0x1
  4151a0:	mov    rdi,r14
  4151a3:	xor    eax,eax
  4151a5:	call   406260 <__fprintf_chk@plt>
  4151aa:	mov    DWORD PTR [rsp+0x1c],ebx
  4151ae:	test   ebx,ebx
  4151b0:	je     41546c <test_json@@Base+0x52c>
  4151b6:	mov    rax,QWORD PTR [rsp+0x10]
  4151bb:	xor    r15d,r15d
  4151be:	dec    eax
  4151c0:	lea    rcx,[rsp+0x260]
  4151c8:	mov    QWORD PTR [rsp+0x28],rbp
  4151cd:	mov    QWORD PTR [rsp+0x8],rcx
  4151d2:	mov    rbp,r15
  4151d5:	mov    QWORD PTR [rsp+0x20],r12
  4151da:	mov    r15,rax
  4151dd:	jmp    415254 <test_json@@Base+0x314>
  4151df:	nop
  4151e0:	test   ebp,ebp
  4151e2:	jne    415354 <test_json@@Base+0x414>
  4151e8:	mov    ecx,r12d
  4151eb:	lea    rdx,[rip+0x16319]        # 42b50b <_IO_stdin_used@@Base+0x50b>
  4151f2:	mov    esi,0x1
  4151f7:	mov    rdi,r14
  4151fa:	xor    eax,eax
  4151fc:	call   406260 <__fprintf_chk@plt>
  415201:	movzx  ecx,BYTE PTR [r13+rbp*1+0x0]
  415207:	lea    rdx,[rip+0x16305]        # 42b513 <_IO_stdin_used@@Base+0x513>
  41520e:	xor    eax,eax
  415210:	mov    esi,0x1
  415215:	mov    rdi,r14
  415218:	call   406260 <__fprintf_chk@plt>
  41521d:	movzx  eax,BYTE PTR [r13+rbp*1+0x0]
  415223:	mov    ecx,0x2e
  415228:	lea    edx,[rax-0x20]
  41522b:	cmp    dl,0x5f
  41522e:	cmovae eax,ecx
  415231:	mov    edx,ebx
  415233:	inc    ebx
  415235:	mov    BYTE PTR [rsp+rdx*1+0x260],al
  41523c:	mov    BYTE PTR [rsp+rbx*1+0x260],0x0
  415244:	lea    rax,[rbp+0x1]
  415248:	cmp    r15,rbp
  41524b:	je     4153c9 <test_json@@Base+0x489>
  415251:	mov    rbp,rax
  415254:	mov    ebx,ebp
  415256:	mov    r12d,ebp
  415259:	and    ebx,0xf
  41525c:	je     4151e0 <test_json@@Base+0x2a0>
  41525e:	test   bpl,0x7
  415262:	jne    415201 <test_json@@Base+0x2c1>
  415264:	lea    rdx,[rip+0x162b0]        # 42b51b <_IO_stdin_used@@Base+0x51b>
  41526b:	mov    esi,0x1
  415270:	mov    rdi,r14
  415273:	xor    eax,eax
  415275:	call   406260 <__fprintf_chk@plt>
  41527a:	jmp    415201 <test_json@@Base+0x2c1>
  41527c:	nop    DWORD PTR [rax+0x0]
  415280:	test   r14d,r14d
  415283:	je     4153a8 <test_json@@Base+0x468>
  415289:	test   eax,eax
  41528b:	je     415374 <test_json@@Base+0x434>
  415291:	mov    edi,eax
  415293:	call   41c850 <flatcc_json_parser_error_string@@Base>
  415298:	mov    r15,QWORD PTR [rip+0x23d49]        # 438fe8 <stderr@GLIBC_2.2.5>
  41529f:	mov    ecx,DWORD PTR [rsp+0x2c0]
  4152a6:	mov    rdi,QWORD PTR [r15]
  4152a9:	mov    r8,rax
  4152ac:	lea    rdx,[rip+0x163fd]        # 42b6b0 <_IO_stdin_used@@Base+0x6b0>
  4152b3:	mov    esi,0x1
  4152b8:	xor    eax,eax
  4152ba:	call   406260 <__fprintf_chk@plt>
  4152bf:	mov    edi,r14d
  4152c2:	call   41c850 <flatcc_json_parser_error_string@@Base>
  4152c7:	mov    rdi,QWORD PTR [r15]
  4152ca:	mov    rcx,rax
  4152cd:	lea    rdx,[rip+0x16404]        # 42b6d8 <_IO_stdin_used@@Base+0x6d8>
  4152d4:	mov    esi,0x1
  4152d9:	xor    eax,eax
  4152db:	call   406260 <__fprintf_chk@plt>
  4152e0:	mov    rdi,QWORD PTR [r15]
  4152e3:	mov    rcx,r13
  4152e6:	xor    eax,eax
  4152e8:	lea    rdx,[rip+0x16218]        # 42b507 <_IO_stdin_used@@Base+0x507>
  4152ef:	mov    esi,0x1
  4152f4:	call   406260 <__fprintf_chk@plt>
  4152f9:	xor    r13d,r13d
  4152fc:	cmp    DWORD PTR [rsp+0x58],0x1
  415301:	lea    r14,[rip+0x16213]        # 42b51b <_IO_stdin_used@@Base+0x51b>
  415308:	jle    415330 <test_json@@Base+0x3f0>
  41530a:	nop    WORD PTR [rax+rax*1+0x0]
  415310:	mov    rdi,QWORD PTR [r15]
  415313:	mov    rdx,r14
  415316:	mov    esi,0x1
  41531b:	xor    eax,eax
  41531d:	call   406260 <__fprintf_chk@plt>
  415322:	mov    eax,DWORD PTR [rsp+0x58]
  415326:	inc    r13d
  415329:	dec    eax
  41532b:	cmp    eax,r13d
  41532e:	jg     415310 <test_json@@Base+0x3d0>
  415330:	mov    rdi,QWORD PTR [r15]
  415333:	lea    rdx,[rip+0x161aa]        # 42b4e4 <_IO_stdin_used@@Base+0x4e4>
  41533a:	mov    esi,0x1
  41533f:	xor    eax,eax
  415341:	call   406260 <__fprintf_chk@plt>
  415346:	xor    r13d,r13d
  415349:	mov    r14d,0xffffffff
  41534f:	jmp    41504b <test_json@@Base+0x10b>
  415354:	mov    rcx,QWORD PTR [rsp+0x8]
  415359:	lea    rdx,[rip+0x161a5]        # 42b505 <_IO_stdin_used@@Base+0x505>
  415360:	mov    esi,0x1
  415365:	mov    rdi,r14
  415368:	xor    eax,eax
  41536a:	call   406260 <__fprintf_chk@plt>
  41536f:	jmp    4151e8 <test_json@@Base+0x2a8>
  415374:	mov    edi,r14d
  415377:	call   41c850 <flatcc_json_parser_error_string@@Base>
  41537c:	mov    r15,QWORD PTR [rip+0x23c65]        # 438fe8 <stderr@GLIBC_2.2.5>
  415383:	mov    ecx,DWORD PTR [rsp+0x2c0]
  41538a:	mov    r8,rax
  41538d:	lea    rdx,[rip+0x16364]        # 42b6f8 <_IO_stdin_used@@Base+0x6f8>
  415394:	mov    rdi,QWORD PTR [r15]
  415397:	mov    esi,0x1
  41539c:	xor    eax,eax
  41539e:	call   406260 <__fprintf_chk@plt>
  4153a3:	jmp    4152e0 <test_json@@Base+0x3a0>
  4153a8:	mov    edi,eax
  4153aa:	call   41c850 <flatcc_json_parser_error_string@@Base>
  4153af:	mov    r8,rax
  4153b2:	mov    r15,QWORD PTR [rip+0x23c2f]        # 438fe8 <stderr@GLIBC_2.2.5>
  4153b9:	mov    ecx,DWORD PTR [rsp+0x2c0]
  4153c0:	lea    rdx,[rip+0x16371]        # 42b738 <_IO_stdin_used@@Base+0x738>
  4153c7:	jmp    415394 <test_json@@Base+0x454>
  4153c9:	mov    r12,QWORD PTR [rsp+0x20]
  4153ce:	mov    rbp,QWORD PTR [rsp+0x28]
  4153d3:	test   BYTE PTR [rsp+0x10],0xf
  4153d8:	je     41540b <test_json@@Base+0x4cb>
  4153da:	mov    r15d,DWORD PTR [rsp+0x1c]
  4153df:	lea    rbx,[rip+0x16133]        # 42b519 <_IO_stdin_used@@Base+0x519>
  4153e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4153f0:	mov    rdx,rbx
  4153f3:	mov    esi,0x1
  4153f8:	mov    rdi,r14
  4153fb:	xor    eax,eax
  4153fd:	inc    r15d
  415400:	call   406260 <__fprintf_chk@plt>
  415405:	test   r15b,0xf
  415409:	jne    4153f0 <test_json@@Base+0x4b0>
  41540b:	mov    rcx,QWORD PTR [rsp+0x8]
  415410:	mov    rdi,r14
  415413:	lea    rdx,[rip+0x160eb]        # 42b505 <_IO_stdin_used@@Base+0x505>
  41541a:	mov    esi,0x1
  41541f:	xor    eax,eax
  415421:	call   406260 <__fprintf_chk@plt>
  415426:	mov    r14d,0xffffffff
  41542c:	jmp    41504b <test_json@@Base+0x10b>
  415431:	mov    edi,eax
  415433:	call   41a290 <flatcc_verify_error_string@@Base>
  415438:	mov    r15,QWORD PTR [rip+0x23ba9]        # 438fe8 <stderr@GLIBC_2.2.5>
  41543f:	mov    r8d,DWORD PTR [rsp+0x2c0]
  415447:	mov    rdi,QWORD PTR [r15]
  41544a:	mov    r9,rax
  41544d:	lea    rcx,[rip+0x1630c]        # 42b760 <_IO_stdin_used@@Base+0x760>
  415454:	lea    rdx,[rip+0x1636d]        # 42b7c8 <_IO_stdin_used@@Base+0x7c8>
  41545b:	mov    esi,0x1
  415460:	xor    eax,eax
  415462:	call   406260 <__fprintf_chk@plt>
  415467:	jmp    41516e <test_json@@Base+0x22e>
  41546c:	lea    rax,[rsp+0x260]
  415474:	mov    QWORD PTR [rsp+0x8],rax
  415479:	jmp    41540b <test_json@@Base+0x4cb>
  41547b:	call   4061a0 <__stack_chk_fail@plt>

0000000000415480 <edge_case_tests@@Base>:
  415480:	endbr64 
  415484:	push   rbx
  415485:	xor    r9d,r9d
  415488:	xor    r8d,r8d
  41548b:	sub    rsp,0x8
  41548f:	push   0x9e
  415494:	xor    ecx,ecx
  415496:	lea    rdx,[rip+0x16080]        # 42b51d <_IO_stdin_used@@Base+0x51d>
  41549d:	lea    rsi,[rip+0x16384]        # 42b828 <_IO_stdin_used@@Base+0x828>
  4154a4:	lea    rdi,[rip+0x23935]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4154ab:	call   414f40 <test_json@@Base>
  4154b0:	xor    r9d,r9d
  4154b3:	xor    ecx,ecx
  4154b5:	mov    r8d,0x2
  4154bb:	lea    rdx,[rip+0x1639e]        # 42b860 <_IO_stdin_used@@Base+0x860>
  4154c2:	lea    rsi,[rip+0x163bf]        # 42b888 <_IO_stdin_used@@Base+0x888>
  4154c9:	lea    rdi,[rip+0x23910]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4154d0:	mov    DWORD PTR [rsp],0xa8
  4154d7:	mov    ebx,eax
  4154d9:	call   414f40 <test_json@@Base>
  4154de:	xor    r8d,r8d
  4154e1:	xor    ecx,ecx
  4154e3:	mov    r9d,0x2
  4154e9:	lea    rdx,[rip+0x1604b]        # 42b53b <_IO_stdin_used@@Base+0x53b>
  4154f0:	lea    rsi,[rip+0x163b9]        # 42b8b0 <_IO_stdin_used@@Base+0x8b0>
  4154f7:	lea    rdi,[rip+0x238e2]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4154fe:	mov    DWORD PTR [rsp],0xac
  415505:	or     ebx,eax
  415507:	call   414f40 <test_json@@Base>
  41550c:	xor    ecx,ecx
  41550e:	mov    r9d,0x4
  415514:	mov    r8d,0x2
  41551a:	lea    rdx,[rip+0x16037]        # 42b558 <_IO_stdin_used@@Base+0x558>
  415521:	lea    rsi,[rip+0x16360]        # 42b888 <_IO_stdin_used@@Base+0x888>
  415528:	lea    rdi,[rip+0x238b1]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  41552f:	mov    DWORD PTR [rsp],0xb0
  415536:	or     ebx,eax
  415538:	call   414f40 <test_json@@Base>
  41553d:	xor    r8d,r8d
  415540:	xor    ecx,ecx
  415542:	mov    r9d,0x8
  415548:	lea    rdx,[rip+0x16389]        # 42b8d8 <_IO_stdin_used@@Base+0x8d8>
  41554f:	lea    rsi,[rip+0x1649a]        # 42b9f0 <_IO_stdin_used@@Base+0x9f0>
  415556:	lea    rdi,[rip+0x23883]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  41555d:	mov    DWORD PTR [rsp],0xb4
  415564:	or     ebx,eax
  415566:	call   414f40 <test_json@@Base>
  41556b:	xor    r9d,r9d
  41556e:	xor    ecx,ecx
  415570:	mov    r8d,0x2
  415576:	lea    rdx,[rip+0x162e3]        # 42b860 <_IO_stdin_used@@Base+0x860>
  41557d:	lea    rsi,[rip+0x16494]        # 42ba18 <_IO_stdin_used@@Base+0xa18>
  415584:	lea    rdi,[rip+0x23855]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  41558b:	mov    DWORD PTR [rsp],0xc3
  415592:	or     ebx,eax
  415594:	call   414f40 <test_json@@Base>
  415599:	xor    r9d,r9d
  41559c:	xor    ecx,ecx
  41559e:	mov    r8d,0x1
  4155a4:	lea    rdx,[rip+0x15fc0]        # 42b56b <_IO_stdin_used@@Base+0x56b>
  4155ab:	lea    rsi,[rip+0x1648e]        # 42ba40 <_IO_stdin_used@@Base+0xa40>
  4155b2:	lea    rdi,[rip+0x23827]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4155b9:	mov    DWORD PTR [rsp],0xc7
  4155c0:	or     ebx,eax
  4155c2:	call   414f40 <test_json@@Base>
  4155c7:	mov    r9d,0x1
  4155cd:	mov    r8d,0x1
  4155d3:	xor    ecx,ecx
  4155d5:	lea    rdx,[rip+0x15faa]        # 42b586 <_IO_stdin_used@@Base+0x586>
  4155dc:	lea    rsi,[rip+0x1645d]        # 42ba40 <_IO_stdin_used@@Base+0xa40>
  4155e3:	lea    rdi,[rip+0x237f6]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4155ea:	mov    DWORD PTR [rsp],0xcb
  4155f1:	or     ebx,eax
  4155f3:	call   414f40 <test_json@@Base>
  4155f8:	or     ebx,eax
  4155fa:	xor    r9d,r9d
  4155fd:	lea    rdx,[rip+0x15f67]        # 42b56b <_IO_stdin_used@@Base+0x56b>
  415604:	xor    ecx,ecx
  415606:	mov    r8d,0x1
  41560c:	lea    rsi,[rip+0x16465]        # 42ba78 <_IO_stdin_used@@Base+0xa78>
  415613:	lea    rdi,[rip+0x237c6]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  41561a:	mov    DWORD PTR [rsp],0xd1
  415621:	call   414f40 <test_json@@Base>
  415626:	pop    rdx
  415627:	pop    rcx
  415628:	or     eax,ebx
  41562a:	pop    rbx
  41562b:	ret    
  41562c:	nop    DWORD PTR [rax+0x0]

0000000000415630 <error_case_tests@@Base>:
  415630:	endbr64 
  415634:	push   rbx
  415635:	xor    r9d,r9d
  415638:	xor    r8d,r8d
  41563b:	sub    rsp,0x8
  41563f:	push   0x11d
  415644:	xor    edx,edx
  415646:	mov    ecx,0xd
  41564b:	lea    rsi,[rip+0x15f4b]        # 42b59d <_IO_stdin_used@@Base+0x59d>
  415652:	lea    rdi,[rip+0x23787]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  415659:	call   414f40 <test_json@@Base>
  41565e:	xor    r9d,r9d
  415661:	xor    r8d,r8d
  415664:	xor    edx,edx
  415666:	mov    ecx,0xd
  41566b:	lea    rsi,[rip+0x1647e]        # 42baf0 <_IO_stdin_used@@Base+0xaf0>
  415672:	lea    rdi,[rip+0x23767]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  415679:	mov    DWORD PTR [rsp],0x11f
  415680:	mov    ebx,eax
  415682:	call   414f40 <test_json@@Base>
  415687:	xor    r9d,r9d
  41568a:	xor    r8d,r8d
  41568d:	xor    edx,edx
  41568f:	mov    ecx,0xd
  415694:	lea    rsi,[rip+0x164bd]        # 42bb58 <_IO_stdin_used@@Base+0xb58>
  41569b:	lea    rdi,[rip+0x2373e]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4156a2:	mov    DWORD PTR [rsp],0x121
  4156a9:	or     ebx,eax
  4156ab:	call   414f40 <test_json@@Base>
  4156b0:	xor    r9d,r9d
  4156b3:	xor    r8d,r8d
  4156b6:	xor    edx,edx
  4156b8:	mov    ecx,0xd
  4156bd:	lea    rsi,[rip+0x164f4]        # 42bbb8 <_IO_stdin_used@@Base+0xbb8>
  4156c4:	lea    rdi,[rip+0x23715]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4156cb:	mov    DWORD PTR [rsp],0x123
  4156d2:	or     ebx,eax
  4156d4:	call   414f40 <test_json@@Base>
  4156d9:	xor    r9d,r9d
  4156dc:	xor    r8d,r8d
  4156df:	xor    edx,edx
  4156e1:	mov    ecx,0xd
  4156e6:	lea    rsi,[rip+0x16523]        # 42bc10 <_IO_stdin_used@@Base+0xc10>
  4156ed:	lea    rdi,[rip+0x236ec]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4156f4:	mov    DWORD PTR [rsp],0x125
  4156fb:	or     ebx,eax
  4156fd:	call   414f40 <test_json@@Base>
  415702:	xor    r9d,r9d
  415705:	xor    r8d,r8d
  415708:	mov    ecx,0xd
  41570d:	xor    edx,edx
  41570f:	lea    rsi,[rip+0x16552]        # 42bc68 <_IO_stdin_used@@Base+0xc68>
  415716:	lea    rdi,[rip+0x236c3]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  41571d:	mov    DWORD PTR [rsp],0x128
  415724:	or     ebx,eax
  415726:	call   414f40 <test_json@@Base>
  41572b:	or     ebx,eax
  41572d:	xor    r9d,r9d
  415730:	xor    r8d,r8d
  415733:	mov    ecx,0xd
  415738:	xor    edx,edx
  41573a:	lea    rsi,[rip+0x165c7]        # 42bd08 <_IO_stdin_used@@Base+0xd08>
  415741:	lea    rdi,[rip+0x23698]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  415748:	mov    DWORD PTR [rsp],0x12b
  41574f:	call   414f40 <test_json@@Base>
  415754:	xor    r9d,r9d
  415757:	xor    r8d,r8d
  41575a:	mov    ecx,0xd
  41575f:	xor    edx,edx
  415761:	lea    rsi,[rip+0x16640]        # 42bda8 <_IO_stdin_used@@Base+0xda8>
  415768:	lea    rdi,[rip+0x23671]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  41576f:	mov    DWORD PTR [rsp],0x12f
  415776:	or     ebx,eax
  415778:	call   414f40 <test_json@@Base>
  41577d:	xor    r9d,r9d
  415780:	xor    r8d,r8d
  415783:	mov    ecx,0xd
  415788:	xor    edx,edx
  41578a:	lea    rsi,[rip+0x166df]        # 42be70 <_IO_stdin_used@@Base+0xe70>
  415791:	lea    rdi,[rip+0x23648]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  415798:	mov    DWORD PTR [rsp],0x133
  41579f:	or     ebx,eax
  4157a1:	call   414f40 <test_json@@Base>
  4157a6:	xor    r9d,r9d
  4157a9:	xor    r8d,r8d
  4157ac:	mov    ecx,0x5
  4157b1:	xor    edx,edx
  4157b3:	lea    rsi,[rip+0x15dfd]        # 42b5b7 <_IO_stdin_used@@Base+0x5b7>
  4157ba:	lea    rdi,[rip+0x2361f]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4157c1:	mov    DWORD PTR [rsp],0x137
  4157c8:	or     ebx,eax
  4157ca:	call   414f40 <test_json@@Base>
  4157cf:	xor    r9d,r9d
  4157d2:	xor    r8d,r8d
  4157d5:	mov    ecx,0x5
  4157da:	xor    edx,edx
  4157dc:	lea    rsi,[rip+0x16755]        # 42bf38 <_IO_stdin_used@@Base+0xf38>
  4157e3:	lea    rdi,[rip+0x235f6]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4157ea:	mov    DWORD PTR [rsp],0x13a
  4157f1:	or     ebx,eax
  4157f3:	call   414f40 <test_json@@Base>
  4157f8:	mov    ecx,0x5
  4157fd:	xor    edx,edx
  4157ff:	xor    r9d,r9d
  415802:	xor    r8d,r8d
  415805:	lea    rsi,[rip+0x16754]        # 42bf60 <_IO_stdin_used@@Base+0xf60>
  41580c:	lea    rdi,[rip+0x235cd]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  415813:	mov    DWORD PTR [rsp],0x13d
  41581a:	or     ebx,eax
  41581c:	call   414f40 <test_json@@Base>
  415821:	pop    rdx
  415822:	pop    rcx
  415823:	or     eax,ebx
  415825:	pop    rbx
  415826:	ret    
  415827:	nop    WORD PTR [rax+rax*1+0x0]

0000000000415830 <base64_tests@@Base>:
  415830:	endbr64 
  415834:	push   rbx
  415835:	xor    r9d,r9d
  415838:	xor    r8d,r8d
  41583b:	sub    rsp,0x8
  41583f:	push   0x171
  415844:	xor    ecx,ecx
  415846:	lea    rdx,[rip+0x15d0b]        # 42b558 <_IO_stdin_used@@Base+0x558>
  41584d:	lea    rsi,[rip+0x15d7b]        # 42b5cf <_IO_stdin_used@@Base+0x5cf>
  415854:	lea    rdi,[rip+0x23585]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  41585b:	call   414f40 <test_json@@Base>
  415860:	xor    r9d,r9d
  415863:	xor    r8d,r8d
  415866:	xor    ecx,ecx
  415868:	lea    rdx,[rip+0x16729]        # 42bf98 <_IO_stdin_used@@Base+0xf98>
  41586f:	lea    rsi,[rip+0x1674a]        # 42bfc0 <_IO_stdin_used@@Base+0xfc0>
  415876:	lea    rdi,[rip+0x23563]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  41587d:	mov    DWORD PTR [rsp],0x174
  415884:	mov    ebx,eax
  415886:	call   414f40 <test_json@@Base>
  41588b:	xor    r9d,r9d
  41588e:	xor    r8d,r8d
  415891:	xor    ecx,ecx
  415893:	lea    rdx,[rip+0x1674e]        # 42bfe8 <_IO_stdin_used@@Base+0xfe8>
  41589a:	lea    rsi,[rip+0x167ff]        # 42c0a0 <_IO_stdin_used@@Base+0x10a0>
  4158a1:	lea    rdi,[rip+0x23538]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4158a8:	mov    DWORD PTR [rsp],0x178
  4158af:	or     ebx,eax
  4158b1:	call   414f40 <test_json@@Base>
  4158b6:	xor    r9d,r9d
  4158b9:	xor    r8d,r8d
  4158bc:	xor    ecx,ecx
  4158be:	lea    rdx,[rip+0x1689b]        # 42c160 <_IO_stdin_used@@Base+0x1160>
  4158c5:	lea    rsi,[rip+0x1694c]        # 42c218 <_IO_stdin_used@@Base+0x1218>
  4158cc:	lea    rdi,[rip+0x2350d]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4158d3:	mov    DWORD PTR [rsp],0x17b
  4158da:	or     ebx,eax
  4158dc:	call   414f40 <test_json@@Base>
  4158e1:	xor    r9d,r9d
  4158e4:	xor    r8d,r8d
  4158e7:	xor    ecx,ecx
  4158e9:	lea    rdx,[rip+0x166f8]        # 42bfe8 <_IO_stdin_used@@Base+0xfe8>
  4158f0:	lea    rsi,[rip+0x169e1]        # 42c2d8 <_IO_stdin_used@@Base+0x12d8>
  4158f7:	lea    rdi,[rip+0x234e2]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  4158fe:	mov    DWORD PTR [rsp],0x17e
  415905:	or     ebx,eax
  415907:	call   414f40 <test_json@@Base>
  41590c:	xor    r9d,r9d
  41590f:	xor    r8d,r8d
  415912:	xor    ecx,ecx
  415914:	lea    rdx,[rip+0x16845]        # 42c160 <_IO_stdin_used@@Base+0x1160>
  41591b:	lea    rsi,[rip+0x16a6e]        # 42c390 <_IO_stdin_used@@Base+0x1390>
  415922:	lea    rdi,[rip+0x234b7]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  415929:	mov    DWORD PTR [rsp],0x181
  415930:	or     ebx,eax
  415932:	call   414f40 <test_json@@Base>
  415937:	or     ebx,eax
  415939:	xor    r9d,r9d
  41593c:	xor    r8d,r8d
  41593f:	mov    ecx,0x1f
  415944:	xor    edx,edx
  415946:	lea    rsi,[rip+0x16b03]        # 42c450 <_IO_stdin_used@@Base+0x1450>
  41594d:	lea    rdi,[rip+0x2348c]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  415954:	mov    DWORD PTR [rsp],0x184
  41595b:	call   414f40 <test_json@@Base>
  415960:	mov    ecx,0x20
  415965:	xor    edx,edx
  415967:	xor    r9d,r9d
  41596a:	xor    r8d,r8d
  41596d:	lea    rsi,[rip+0x16b9c]        # 42c510 <_IO_stdin_used@@Base+0x1510>
  415974:	lea    rdi,[rip+0x23465]        # 438de0 <flatcc_builder_padding_base@@Base+0xa0c0>
  41597b:	mov    DWORD PTR [rsp],0x187
  415982:	or     ebx,eax
  415984:	call   414f40 <test_json@@Base>
  415989:	pop    rdx
  41598a:	pop    rcx
  41598b:	or     eax,ebx
  41598d:	pop    rbx
  41598e:	ret    
  41598f:	nop

0000000000415990 <mixed_type_union_tests@@Base>:
  415990:	endbr64 
  415994:	push   rbx
  415995:	xor    r9d,r9d
  415998:	xor    r8d,r8d
  41599b:	sub    rsp,0x8
  41599f:	push   0x1b0
  4159a4:	xor    ecx,ecx
  4159a6:	lea    rdx,[rip+0x16c23]        # 42c5d0 <_IO_stdin_used@@Base+0x15d0>
  4159ad:	lea    rsi,[rip+0x16c64]        # 42c618 <_IO_stdin_used@@Base+0x1618>
  4159b4:	lea    rdi,[rip+0x233e5]        # 438da0 <flatcc_builder_padding_base@@Base+0xa080>
  4159bb:	call   414f40 <test_json@@Base>
  4159c0:	xor    r9d,r9d
  4159c3:	xor    r8d,r8d
  4159c6:	xor    ecx,ecx
  4159c8:	lea    rdx,[rip+0x16c99]        # 42c668 <_IO_stdin_used@@Base+0x1668>
  4159cf:	lea    rsi,[rip+0x16d0a]        # 42c6e0 <_IO_stdin_used@@Base+0x16e0>
  4159d6:	lea    rdi,[rip+0x233c3]        # 438da0 <flatcc_builder_padding_base@@Base+0xa080>
  4159dd:	mov    DWORD PTR [rsp],0x1b5
  4159e4:	mov    ebx,eax
  4159e6:	call   414f40 <test_json@@Base>
  4159eb:	xor    r9d,r9d
  4159ee:	xor    r8d,r8d
  4159f1:	xor    ecx,ecx
  4159f3:	lea    rdx,[rip+0x16c6e]        # 42c668 <_IO_stdin_used@@Base+0x1668>
  4159fa:	lea    rsi,[rip+0x16d67]        # 42c768 <_IO_stdin_used@@Base+0x1768>
  415a01:	lea    rdi,[rip+0x23398]        # 438da0 <flatcc_builder_padding_base@@Base+0xa080>
  415a08:	mov    DWORD PTR [rsp],0x1ba
  415a0f:	or     ebx,eax
  415a11:	call   414f40 <test_json@@Base>
  415a16:	xor    r9d,r9d
  415a19:	xor    r8d,r8d
  415a1c:	xor    ecx,ecx
  415a1e:	lea    rdx,[rip+0x16ddb]        # 42c800 <_IO_stdin_used@@Base+0x1800>
  415a25:	lea    rsi,[rip+0x16e94]        # 42c8c0 <_IO_stdin_used@@Base+0x18c0>
  415a2c:	lea    rdi,[rip+0x2336d]        # 438da0 <flatcc_builder_padding_base@@Base+0xa080>
  415a33:	mov    DWORD PTR [rsp],0x1c1
  415a3a:	or     ebx,eax
  415a3c:	call   414f40 <test_json@@Base>
  415a41:	xor    r9d,r9d
  415a44:	xor    r8d,r8d
  415a47:	xor    ecx,ecx
  415a49:	lea    rdx,[rip+0x16f50]        # 42c9a0 <_IO_stdin_used@@Base+0x19a0>
  415a50:	lea    rsi,[rip+0x17029]        # 42ca80 <_IO_stdin_used@@Base+0x1a80>
  415a57:	lea    rdi,[rip+0x23342]        # 438da0 <flatcc_builder_padding_base@@Base+0xa080>
  415a5e:	mov    DWORD PTR [rsp],0x1ca
  415a65:	or     ebx,eax
  415a67:	call   414f40 <test_json@@Base>
  415a6c:	xor    r9d,r9d
  415a6f:	xor    r8d,r8d
  415a72:	xor    ecx,ecx
  415a74:	lea    rdx,[rip+0x1710d]        # 42cb88 <_IO_stdin_used@@Base+0x1b88>
  415a7b:	lea    rsi,[rip+0x1724e]        # 42ccd0 <_IO_stdin_used@@Base+0x1cd0>
  415a82:	lea    rdi,[rip+0x23317]        # 438da0 <flatcc_builder_padding_base@@Base+0xa080>
  415a89:	mov    DWORD PTR [rsp],0x1d5
  415a90:	or     ebx,eax
  415a92:	call   414f40 <test_json@@Base>
  415a97:	or     ebx,eax
  415a99:	xor    r9d,r9d
  415a9c:	xor    r8d,r8d
  415a9f:	lea    rdx,[rip+0x16bc2]        # 42c668 <_IO_stdin_used@@Base+0x1668>
  415aa6:	xor    ecx,ecx
  415aa8:	lea    rsi,[rip+0x173a9]        # 42ce58 <_IO_stdin_used@@Base+0x1e58>
  415aaf:	lea    rdi,[rip+0x232ea]        # 438da0 <flatcc_builder_padding_base@@Base+0xa080>
  415ab6:	mov    DWORD PTR [rsp],0x1da
  415abd:	call   414f40 <test_json@@Base>
  415ac2:	pop    rdx
  415ac3:	pop    rcx
  415ac4:	or     eax,ebx
  415ac6:	pop    rbx
  415ac7:	ret    
  415ac8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000415ad0 <union_vector_tests@@Base>:
  415ad0:	endbr64 
  415ad4:	push   rbx
  415ad5:	xor    r9d,r9d
  415ad8:	xor    r8d,r8d
  415adb:	sub    rsp,0x8
  415adf:	push   0x1e5
  415ae4:	xor    ecx,ecx
  415ae6:	lea    rdx,[rip+0x173fb]        # 42cee8 <_IO_stdin_used@@Base+0x1ee8>
  415aed:	lea    rsi,[rip+0x1742c]        # 42cf20 <_IO_stdin_used@@Base+0x1f20>
  415af4:	lea    rdi,[rip+0x232c5]        # 438dc0 <flatcc_builder_padding_base@@Base+0xa0a0>
  415afb:	call   414f40 <test_json@@Base>
  415b00:	xor    r9d,r9d
  415b03:	xor    r8d,r8d
  415b06:	xor    ecx,ecx
  415b08:	lea    rdx,[rip+0x17451]        # 42cf60 <_IO_stdin_used@@Base+0x1f60>
  415b0f:	lea    rsi,[rip+0x1747a]        # 42cf90 <_IO_stdin_used@@Base+0x1f90>
  415b16:	lea    rdi,[rip+0x232a3]        # 438dc0 <flatcc_builder_padding_base@@Base+0xa0a0>
  415b1d:	mov    DWORD PTR [rsp],0x1e8
  415b24:	mov    ebx,eax
  415b26:	call   414f40 <test_json@@Base>
  415b2b:	xor    r9d,r9d
  415b2e:	xor    r8d,r8d
  415b31:	xor    ecx,ecx
  415b33:	lea    rdx,[rip+0x1748e]        # 42cfc8 <_IO_stdin_used@@Base+0x1fc8>
  415b3a:	lea    rsi,[rip+0x174cf]        # 42d010 <_IO_stdin_used@@Base+0x2010>
  415b41:	lea    rdi,[rip+0x23278]        # 438dc0 <flatcc_builder_padding_base@@Base+0xa0a0>
  415b48:	mov    DWORD PTR [rsp],0x1eb
  415b4f:	or     ebx,eax
  415b51:	call   414f40 <test_json@@Base>
  415b56:	xor    r9d,r9d
  415b59:	xor    r8d,r8d
  415b5c:	xor    ecx,ecx
  415b5e:	lea    rdx,[rip+0x174fb]        # 42d060 <_IO_stdin_used@@Base+0x2060>
  415b65:	lea    rsi,[rip+0x17564]        # 42d0d0 <_IO_stdin_used@@Base+0x20d0>
  415b6c:	lea    rdi,[rip+0x2324d]        # 438dc0 <flatcc_builder_padding_base@@Base+0xa0a0>
  415b73:	mov    DWORD PTR [rsp],0x1ee
  415b7a:	or     ebx,eax
  415b7c:	call   414f40 <test_json@@Base>
  415b81:	xor    r9d,r9d
  415b84:	xor    r8d,r8d
  415b87:	xor    ecx,ecx
  415b89:	lea    rdx,[rip+0x17358]        # 42cee8 <_IO_stdin_used@@Base+0x1ee8>
  415b90:	lea    rsi,[rip+0x175b9]        # 42d150 <_IO_stdin_used@@Base+0x2150>
  415b97:	lea    rdi,[rip+0x23222]        # 438dc0 <flatcc_builder_padding_base@@Base+0xa0a0>
  415b9e:	mov    DWORD PTR [rsp],0x1f1
  415ba5:	or     ebx,eax
  415ba7:	call   414f40 <test_json@@Base>
  415bac:	xor    ecx,ecx
  415bae:	lea    rdx,[rip+0x175db]        # 42d190 <_IO_stdin_used@@Base+0x2190>
  415bb5:	xor    r9d,r9d
  415bb8:	xor    r8d,r8d
  415bbb:	lea    rsi,[rip+0x1762e]        # 42d1f0 <_IO_stdin_used@@Base+0x21f0>
  415bc2:	lea    rdi,[rip+0x231f7]        # 438dc0 <flatcc_builder_padding_base@@Base+0xa0a0>
  415bc9:	mov    DWORD PTR [rsp],0x1f4
  415bd0:	or     ebx,eax
  415bd2:	call   414f40 <test_json@@Base>
  415bd7:	pop    rdx
  415bd8:	pop    rcx
  415bd9:	or     eax,ebx
  415bdb:	pop    rbx
  415bdc:	ret    
  415bdd:	nop    DWORD PTR [rax]
  415be0:	push   rbp
  415be1:	mov    ebp,edx
  415be3:	mov    r8d,0x1
  415be9:	push   rbx
  415bea:	mov    rbx,rdi
  415bed:	mov    ecx,0x1
  415bf2:	sub    rsp,0x8
  415bf6:	mov    edx,DWORD PTR [rdi+0x28]
  415bf9:	add    rdx,rsi
  415bfc:	lea    rsi,[rdi+0x68]
  415c00:	mov    rdi,QWORD PTR [rdi+0x40]
  415c04:	call   QWORD PTR [rbx+0x50]
  415c07:	test   eax,eax
  415c09:	jne    415c38 <union_vector_tests@@Base+0x168>
  415c0b:	mov    edx,DWORD PTR [rbx+0x28]
  415c0e:	mov    rcx,rdx
  415c11:	add    rdx,QWORD PTR [rbx+0x68]
  415c15:	mov    QWORD PTR [rbx+0x18],rdx
  415c19:	mov    edx,DWORD PTR [rbx+0x70]
  415c1c:	sub    edx,ecx
  415c1e:	cmp    ebp,edx
  415c20:	cmovb  edx,ebp
  415c23:	mov    DWORD PTR [rbx+0x24],edx
  415c26:	mov    rdx,QWORD PTR [rbx+0x30]
  415c2a:	mov    DWORD PTR [rdx+0x4],ebp
  415c2d:	add    rsp,0x8
  415c31:	pop    rbx
  415c32:	pop    rbp
  415c33:	ret    
  415c34:	nop    DWORD PTR [rax+0x0]
  415c38:	mov    eax,0xffffffff
  415c3d:	jmp    415c2d <union_vector_tests@@Base+0x15d>
  415c3f:	nop

0000000000415c40 <flatcc_builder_default_alloc@@Base>:
  415c40:	endbr64 
  415c44:	push   r13
  415c46:	push   r12
  415c48:	push   rbp
  415c49:	mov    rbp,rsi
  415c4c:	push   rbx
  415c4d:	sub    rsp,0x18
  415c51:	test   rdx,rdx
  415c54:	je     415d18 <flatcc_builder_default_alloc@@Base+0xd8>
  415c5a:	mov    r13d,ecx
  415c5d:	cmp    r8d,0x4
  415c61:	je     415d50 <flatcc_builder_default_alloc@@Base+0x110>
  415c67:	jle    415ce0 <flatcc_builder_default_alloc@@Base+0xa0>
  415c69:	mov    rbx,rdx
  415c6c:	cmp    r8d,0x5
  415c70:	je     415c98 <flatcc_builder_default_alloc@@Base+0x58>
  415c72:	cmp    r8d,0x7
  415c76:	mov    ebx,0x40
  415c7b:	mov    eax,0x20
  415c80:	cmovne rbx,rax
  415c84:	cmp    rbx,rdx
  415c87:	jae    415c98 <flatcc_builder_default_alloc@@Base+0x58>
  415c89:	nop    DWORD PTR [rax+0x0]
  415c90:	add    rbx,rbx
  415c93:	cmp    rdx,rbx
  415c96:	ja     415c90 <flatcc_builder_default_alloc@@Base+0x50>
  415c98:	mov    rax,QWORD PTR [rbp+0x8]
  415c9c:	cmp    rdx,rax
  415c9f:	ja     415cae <flatcc_builder_default_alloc@@Base+0x6e>
  415ca1:	shr    rax,1
  415ca4:	mov    rdx,rax
  415ca7:	xor    eax,eax
  415ca9:	cmp    rdx,rbx
  415cac:	jae    415cd5 <flatcc_builder_default_alloc@@Base+0x95>
  415cae:	mov    rdi,QWORD PTR [rbp+0x0]
  415cb2:	mov    rsi,rbx
  415cb5:	call   406230 <realloc@plt>
  415cba:	mov    r12,rax
  415cbd:	test   rax,rax
  415cc0:	je     415d5a <flatcc_builder_default_alloc@@Base+0x11a>
  415cc6:	test   r13d,r13d
  415cc9:	jne    415cf8 <flatcc_builder_default_alloc@@Base+0xb8>
  415ccb:	mov    QWORD PTR [rbp+0x0],r12
  415ccf:	mov    QWORD PTR [rbp+0x8],rbx
  415cd3:	xor    eax,eax
  415cd5:	add    rsp,0x18
  415cd9:	pop    rbx
  415cda:	pop    rbp
  415cdb:	pop    r12
  415cdd:	pop    r13
  415cdf:	ret    
  415ce0:	cmp    r8d,0x1
  415ce4:	mov    ebx,0x100
  415ce9:	mov    eax,0x20
  415cee:	cmovne rbx,rax
  415cf2:	jmp    415c84 <flatcc_builder_default_alloc@@Base+0x44>
  415cf4:	nop    DWORD PTR [rax+0x0]
  415cf8:	mov    rax,QWORD PTR [rbp+0x8]
  415cfc:	cmp    rax,rbx
  415cff:	jae    415ccb <flatcc_builder_default_alloc@@Base+0x8b>
  415d01:	mov    rdx,rbx
  415d04:	sub    rdx,rax
  415d07:	lea    rdi,[r12+rax*1]
  415d0b:	xor    esi,esi
  415d0d:	call   4061c0 <memset@plt>
  415d12:	jmp    415ccb <flatcc_builder_default_alloc@@Base+0x8b>
  415d14:	nop    DWORD PTR [rax+0x0]
  415d18:	mov    rdi,QWORD PTR [rsi]
  415d1b:	xor    eax,eax
  415d1d:	test   rdi,rdi
  415d20:	je     415cd5 <flatcc_builder_default_alloc@@Base+0x95>
  415d22:	mov    DWORD PTR [rsp+0xc],eax
  415d26:	call   406160 <free@plt>
  415d2b:	mov    QWORD PTR [rbp+0x0],0x0
  415d33:	mov    QWORD PTR [rbp+0x8],0x0
  415d3b:	mov    eax,DWORD PTR [rsp+0xc]
  415d3f:	add    rsp,0x18
  415d43:	pop    rbx
  415d44:	pop    rbp
  415d45:	pop    r12
  415d47:	pop    r13
  415d49:	ret    
  415d4a:	nop    WORD PTR [rax+rax*1+0x0]
  415d50:	mov    ebx,0x120
  415d55:	jmp    415c84 <flatcc_builder_default_alloc@@Base+0x44>
  415d5a:	mov    eax,0xffffffff
  415d5f:	jmp    415cd5 <flatcc_builder_default_alloc@@Base+0x95>
  415d64:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  415d6f:	nop
  415d70:	push   rax
  415d71:	pop    rax
  415d72:	lea    rcx,[rip+0x18f77]        # 42ecf0 <_IO_stdin_used@@Base+0x3cf0>
  415d79:	mov    edx,0x134
  415d7e:	lea    rsi,[rip+0x184bb]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  415d85:	lea    rdi,[rip+0x1884b]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  415d8c:	sub    rsp,0x8
  415d90:	call   4061b0 <__assert_fail@plt>
  415d95:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  415da0:	push   rax
  415da1:	pop    rax
  415da2:	lea    rcx,[rip+0x18ed7]        # 42ec80 <_IO_stdin_used@@Base+0x3c80>
  415da9:	mov    edx,0x2a5
  415dae:	lea    rsi,[rip+0x1848b]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  415db5:	lea    rdi,[rip+0x1881b]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  415dbc:	sub    rsp,0x8
  415dc0:	call   4061b0 <__assert_fail@plt>
  415dc5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  415dd0:	push   rbx
  415dd1:	mov    r9,rdi
  415dd4:	sub    rsp,0xa0
  415ddb:	mov    rbx,QWORD PTR fs:0x28
  415de4:	mov    QWORD PTR [rsp+0x98],rbx
  415dec:	xor    ebx,ebx
  415dee:	test   dx,dx
  415df1:	je     415e50 <flatcc_builder_default_alloc@@Base+0x210>
  415df3:	mov    eax,edx
  415df5:	movzx  edx,dx
  415df8:	movzx  edi,WORD PTR [rsi]
  415dfb:	cmp    di,0x3
  415dff:	ja     415e0e <flatcc_builder_default_alloc@@Base+0x1ce>
  415e01:	mov    edi,0x4
  415e06:	mov    WORD PTR [rsi],di
  415e09:	mov    edi,0x4
  415e0e:	cmp    ax,di
  415e11:	jbe    415e16 <flatcc_builder_default_alloc@@Base+0x1d6>
  415e13:	mov    WORD PTR [rsi],ax
  415e16:	test   ecx,ecx
  415e18:	jne    415e27 <flatcc_builder_default_alloc@@Base+0x1e7>
  415e1a:	mov    ebx,DWORD PTR [r9+0xf4]
  415e21:	dec    edx
  415e23:	and    edx,ebx
  415e25:	jne    415e70 <flatcc_builder_default_alloc@@Base+0x230>
  415e27:	xor    eax,eax
  415e29:	mov    rbx,QWORD PTR [rsp+0x98]
  415e31:	xor    rbx,QWORD PTR fs:0x28
  415e3a:	jne    415edd <flatcc_builder_default_alloc@@Base+0x29d>
  415e40:	add    rsp,0xa0
  415e47:	pop    rbx
  415e48:	ret    
  415e49:	nop    DWORD PTR [rax+0x0]
  415e50:	movzx  eax,WORD PTR [rdi+0xec]
  415e57:	movzx  edx,ax
  415e5a:	test   ax,ax
  415e5d:	jne    415df8 <flatcc_builder_default_alloc@@Base+0x1b8>
  415e5f:	mov    edx,0x1
  415e64:	mov    eax,0x1
  415e69:	jmp    415df8 <flatcc_builder_default_alloc@@Base+0x1b8>
  415e6b:	nop    DWORD PTR [rax+rax*1+0x0]
  415e70:	mov    rax,0x42ed20
  415e77:	movsxd r8,edx
  415e7a:	add    edx,ebx
  415e7c:	mov    QWORD PTR [rsp],r8
  415e80:	mov    QWORD PTR [rsp+0x10],rax
  415e85:	mov    QWORD PTR [rsp+0x18],r8
  415e8a:	mov    DWORD PTR [rsp+0x8],0x1
  415e92:	mov    DWORD PTR [r9+0xf4],edx
  415e99:	cmp    ebx,edx
  415e9b:	jg     415ee7 <flatcc_builder_default_alloc@@Base+0x2a7>
  415e9d:	mov    rdi,QWORD PTR [r9+0x38]
  415ea1:	lea    rsi,[rsp+0x10]
  415ea6:	mov    ecx,ebx
  415ea8:	mov    edx,0x1
  415ead:	call   QWORD PTR [r9+0x48]
  415eb1:	test   eax,eax
  415eb3:	jne    415ee2 <flatcc_builder_default_alloc@@Base+0x2a2>
  415eb5:	cmp    ebx,0xffffffff
  415eb8:	jne    415e27 <flatcc_builder_default_alloc@@Base+0x1e7>
  415ebe:	lea    rcx,[rip+0x18dcb]        # 42ec90 <_IO_stdin_used@@Base+0x3c90>
  415ec5:	mov    edx,0x2be
  415eca:	lea    rsi,[rip+0x1836f]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  415ed1:	lea    rdi,[rip+0x186ff]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  415ed8:	call   4061b0 <__assert_fail@plt>
  415edd:	call   4061a0 <__stack_chk_fail@plt>
  415ee2:	call   415da0 <flatcc_builder_default_alloc@@Base+0x160>
  415ee7:	lea    rcx,[rip+0x18d92]        # 42ec80 <_IO_stdin_used@@Base+0x3c80>
  415eee:	mov    edx,0x2a1
  415ef3:	lea    rsi,[rip+0x18346]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  415efa:	lea    rdi,[rip+0x186d6]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  415f01:	call   4061b0 <__assert_fail@plt>
  415f06:	nop    WORD PTR cs:[rax+rax*1+0x0]
  415f10:	push   rax
  415f11:	pop    rax
  415f12:	lea    rcx,[rip+0x18d57]        # 42ec70 <_IO_stdin_used@@Base+0x3c70>
  415f19:	mov    edx,0x28b
  415f1e:	lea    rsi,[rip+0x1831b]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  415f25:	lea    rdi,[rip+0x186ab]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  415f2c:	sub    rsp,0x8
  415f30:	call   4061b0 <__assert_fail@plt>
  415f35:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  415f40:	push   rax
  415f41:	pop    rax
  415f42:	lea    rcx,[rip+0x18c87]        # 42ebd0 <_IO_stdin_used@@Base+0x3bd0>
  415f49:	mov    edx,0x37c
  415f4e:	lea    rsi,[rip+0x182eb]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  415f55:	lea    rdi,[rip+0x18654]        # 42e5b0 <_IO_stdin_used@@Base+0x35b0>
  415f5c:	sub    rsp,0x8
  415f60:	call   4061b0 <__assert_fail@plt>
  415f65:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  415f70:	push   r12
  415f72:	mov    r12d,esi
  415f75:	push   rbp
  415f76:	push   rbx
  415f77:	mov    rbx,rdi
  415f7a:	movsxd rax,DWORD PTR [rdi+0x104]
  415f81:	lea    edx,[rax+0x1]
  415f84:	mov    DWORD PTR [rdi+0x104],edx
  415f8a:	cmp    edx,DWORD PTR [rdi+0x108]
  415f90:	jle    416060 <flatcc_builder_default_alloc@@Base+0x420>
  415f96:	mov    ecx,DWORD PTR [rdi+0x120]
  415f9c:	cmp    edx,ecx
  415f9e:	jle    415fa8 <flatcc_builder_default_alloc@@Base+0x368>
  415fa0:	test   ecx,ecx
  415fa2:	jg     416078 <flatcc_builder_default_alloc@@Base+0x438>
  415fa8:	lea    rcx,[rax+rax*8]
  415fac:	lea    rbp,[rcx*4+0x0]
  415fb4:	lea    rdx,[rbp+0x24]
  415fb8:	cmp    rdx,QWORD PTR [rbx+0xa0]
  415fbf:	jbe    415fdf <flatcc_builder_default_alloc@@Base+0x39f>
  415fc1:	mov    rdi,QWORD PTR [rbx+0x40]
  415fc5:	xor    ecx,ecx
  415fc7:	lea    rsi,[rbx+0x98]
  415fce:	mov    r8d,0x4
  415fd4:	call   QWORD PTR [rbx+0x50]
  415fd7:	test   eax,eax
  415fd9:	jne    41607f <flatcc_builder_default_alloc@@Base+0x43f>
  415fdf:	mov    rcx,rbp
  415fe2:	add    rcx,QWORD PTR [rbx+0x98]
  415fe9:	mov    QWORD PTR [rbx+0x30],rcx
  415fed:	je     416078 <flatcc_builder_default_alloc@@Base+0x438>
  415ff3:	movabs rdx,0xe38e38e38e38e38f
  415ffd:	mov    rax,rdx
  416000:	mul    QWORD PTR [rbx+0xa0]
  416007:	mov    eax,DWORD PTR [rbx+0x120]
  41600d:	shr    rdx,0x5
  416011:	mov    DWORD PTR [rbx+0x108],edx
  416017:	cmp    eax,edx
  416019:	jge    416020 <flatcc_builder_default_alloc@@Base+0x3e0>
  41601b:	test   eax,eax
  41601d:	jg     416070 <flatcc_builder_default_alloc@@Base+0x430>
  41601f:	nop
  416020:	movzx  eax,WORD PTR [rbx+0xea]
  416027:	mov    edx,DWORD PTR [rbx+0x20]
  41602a:	mov    WORD PTR [rcx+0xc],ax
  41602e:	mov    eax,DWORD PTR [rbx+0x28]
  416031:	mov    DWORD PTR [rcx+0x8],edx
  416034:	mov    WORD PTR [rbx+0xea],r12w
  41603c:	mov    DWORD PTR [rcx],eax
  41603e:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  416045:	lea    eax,[rdx+rax*1+0x7]
  416049:	mov    DWORD PTR [rbx+0x20],0x0
  416050:	and    eax,0xfffffff8
  416053:	mov    DWORD PTR [rbx+0x28],eax
  416056:	xor    eax,eax
  416058:	pop    rbx
  416059:	pop    rbp
  41605a:	pop    r12
  41605c:	ret    
  41605d:	nop    DWORD PTR [rax]
  416060:	mov    rax,QWORD PTR [rdi+0x30]
  416064:	lea    rcx,[rax+0x24]
  416068:	mov    QWORD PTR [rdi+0x30],rcx
  41606c:	jmp    416020 <flatcc_builder_default_alloc@@Base+0x3e0>
  41606e:	xchg   ax,ax
  416070:	mov    DWORD PTR [rbx+0x108],eax
  416076:	jmp    416020 <flatcc_builder_default_alloc@@Base+0x3e0>
  416078:	mov    eax,0xffffffff
  41607d:	jmp    416058 <flatcc_builder_default_alloc@@Base+0x418>
  41607f:	call   415d70 <flatcc_builder_default_alloc@@Base+0x130>
  416084:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41608f:	nop
  416090:	push   rbp
  416091:	push   rbx
  416092:	sub    rsp,0xb8
  416099:	mov    rax,QWORD PTR fs:0x28
  4160a2:	mov    QWORD PTR [rsp+0xa8],rax
  4160aa:	xor    eax,eax
  4160ac:	cmp    edx,0x3fffffff
  4160b2:	ja     416248 <flatcc_builder_default_alloc@@Base+0x608>
  4160b8:	cmp    WORD PTR [rdi+0xe8],0x3
  4160c0:	mov    rbx,rdi
  4160c3:	ja     4160d1 <flatcc_builder_default_alloc@@Base+0x491>
  4160c5:	mov    eax,0x4
  4160ca:	mov    WORD PTR [rdi+0xe8],ax
  4160d1:	mov    edi,DWORD PTR [rbx+0xf0]
  4160d7:	mov    r9d,edx
  4160da:	mov    eax,edi
  4160dc:	lea    r8,[rsp+0xc]
  4160e1:	and    eax,0x3
  4160e4:	shl    r9d,0x2
  4160e8:	mov    QWORD PTR [rsp+0x20],r8
  4160ed:	mov    DWORD PTR [rsp+0xc],edx
  4160f1:	mov    QWORD PTR [rsp+0x10],0x4
  4160fa:	mov    QWORD PTR [rsp+0x28],0x4
  416103:	mov    DWORD PTR [rsp+0x18],0x1
  41610b:	mov    r8d,0x4
  416111:	je     416131 <flatcc_builder_default_alloc@@Base+0x4f1>
  416113:	mov    r9d,r9d
  416116:	lea    r8,[r9+0x4]
  41611a:	mov    QWORD PTR [rsp+0x10],r8
  41611f:	mov    QWORD PTR [rsp+0x30],rsi
  416124:	mov    QWORD PTR [rsp+0x38],r9
  416129:	mov    DWORD PTR [rsp+0x18],0x2
  416131:	test   eax,eax
  416133:	jne    416210 <flatcc_builder_default_alloc@@Base+0x5d0>
  416139:	mov    r10d,r8d
  41613c:	test   edx,edx
  41613e:	je     4161b6 <flatcc_builder_default_alloc@@Base+0x576>
  416140:	sub    r10d,edi
  416143:	lea    r9d,[rdx-0x1]
  416147:	xor    eax,eax
  416149:	sub    r10d,0x4
  41614d:	jmp    416178 <flatcc_builder_default_alloc@@Base+0x538>
  41614f:	nop
  416150:	mov    edi,eax
  416152:	neg    edi
  416154:	lea    edi,[r10+rdi*4]
  416158:	add    edx,edi
  41615a:	mov    DWORD PTR [rsi+rax*4],edx
  41615d:	test   rcx,rcx
  416160:	je     41616c <flatcc_builder_default_alloc@@Base+0x52c>
  416162:	cmp    BYTE PTR [rcx+rax*1],0x0
  416166:	je     41626b <flatcc_builder_default_alloc@@Base+0x62b>
  41616c:	lea    rdx,[rax+0x1]
  416170:	cmp    rax,r9
  416173:	je     4161b0 <flatcc_builder_default_alloc@@Base+0x570>
  416175:	mov    rax,rdx
  416178:	mov    edx,DWORD PTR [rsi+rax*4]
  41617b:	test   edx,edx
  41617d:	jne    416150 <flatcc_builder_default_alloc@@Base+0x510>
  41617f:	test   rcx,rcx
  416182:	je     41624c <flatcc_builder_default_alloc@@Base+0x60c>
  416188:	cmp    BYTE PTR [rcx+rax*1],0x0
  41618c:	je     41616c <flatcc_builder_default_alloc@@Base+0x52c>
  41618e:	lea    rcx,[rip+0x1875b]        # 42e8f0 <_IO_stdin_used@@Base+0x38f0>
  416195:	mov    edx,0x5b5
  41619a:	lea    rsi,[rip+0x1809f]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  4161a1:	lea    rdi,[rip+0x18431]        # 42e5d9 <_IO_stdin_used@@Base+0x35d9>
  4161a8:	call   4061b0 <__assert_fail@plt>
  4161ad:	nop    DWORD PTR [rax]
  4161b0:	mov    edi,DWORD PTR [rbx+0xf0]
  4161b6:	mov    ebp,edi
  4161b8:	sub    ebp,r8d
  4161bb:	cmp    ebp,edi
  4161bd:	jge    41628a <flatcc_builder_default_alloc@@Base+0x64a>
  4161c3:	mov    rdi,QWORD PTR [rbx+0x38]
  4161c7:	mov    edx,DWORD PTR [rsp+0x18]
  4161cb:	lea    rsi,[rsp+0x20]
  4161d0:	mov    ecx,ebp
  4161d2:	call   QWORD PTR [rbx+0x48]
  4161d5:	test   eax,eax
  4161d7:	jne    4162ae <flatcc_builder_default_alloc@@Base+0x66e>
  4161dd:	mov    DWORD PTR [rbx+0xf0],ebp
  4161e3:	mov    rbx,QWORD PTR [rsp+0xa8]
  4161eb:	xor    rbx,QWORD PTR fs:0x28
  4161f4:	mov    eax,ebp
  4161f6:	jne    4162a9 <flatcc_builder_default_alloc@@Base+0x669>
  4161fc:	add    rsp,0xb8
  416203:	pop    rbx
  416204:	pop    rbp
  416205:	ret    
  416206:	nop    WORD PTR cs:[rax+rax*1+0x0]
  416210:	movsxd r10,DWORD PTR [rsp+0x18]
  416215:	mov    r11,0x42ed20
  41621c:	mov    r9,r10
  41621f:	add    r8,rax
  416222:	shl    r10,0x4
  416226:	inc    r9d
  416229:	mov    QWORD PTR [rsp+0x10],r8
  41622e:	mov    QWORD PTR [rsp+r10*1+0x20],r11
  416233:	mov    QWORD PTR [rsp+r10*1+0x28],rax
  416238:	mov    DWORD PTR [rsp+0x18],r9d
  41623d:	jmp    416139 <flatcc_builder_default_alloc@@Base+0x4f9>
  416242:	nop    WORD PTR [rax+rax*1+0x0]
  416248:	xor    ebp,ebp
  41624a:	jmp    4161e3 <flatcc_builder_default_alloc@@Base+0x5a3>
  41624c:	lea    rcx,[rip+0x1869d]        # 42e8f0 <_IO_stdin_used@@Base+0x38f0>
  416253:	mov    edx,0x5b7
  416258:	lea    rsi,[rip+0x17fe1]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  41625f:	lea    rdi,[rip+0x18371]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  416266:	call   4061b0 <__assert_fail@plt>
  41626b:	lea    rcx,[rip+0x1867e]        # 42e8f0 <_IO_stdin_used@@Base+0x38f0>
  416272:	mov    edx,0x5b1
  416277:	lea    rsi,[rip+0x17fc2]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  41627e:	lea    rdi,[rip+0x18346]        # 42e5cb <_IO_stdin_used@@Base+0x35cb>
  416285:	call   4061b0 <__assert_fail@plt>
  41628a:	lea    rcx,[rip+0x189df]        # 42ec70 <_IO_stdin_used@@Base+0x3c70>
  416291:	mov    edx,0x287
  416296:	lea    rsi,[rip+0x17fa3]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  41629d:	lea    rdi,[rip+0x18333]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  4162a4:	call   4061b0 <__assert_fail@plt>
  4162a9:	call   4061a0 <__stack_chk_fail@plt>
  4162ae:	call   415f10 <flatcc_builder_default_alloc@@Base+0x2d0>
  4162b3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4162be:	xchg   ax,ax

00000000004162c0 <flatcc_builder_flush_vtable_cache@@Base>:
  4162c0:	endbr64 
  4162c4:	cmp    QWORD PTR [rdi+0xd8],0x0
  4162cc:	jne    4162d0 <flatcc_builder_flush_vtable_cache@@Base+0x10>
  4162ce:	ret    
  4162cf:	nop
  4162d0:	push   rbx
  4162d1:	mov    rbx,rdi
  4162d4:	xor    esi,esi
  4162d6:	mov    rdx,QWORD PTR [rbx+0xb0]
  4162dd:	mov    rdi,QWORD PTR [rdi+0xa8]
  4162e4:	call   4061c0 <memset@plt>
  4162e9:	movabs rax,0x1000000000
  4162f3:	mov    QWORD PTR [rbx+0xe0],rax
  4162fa:	pop    rbx
  4162fb:	ret    
  4162fc:	nop    DWORD PTR [rax+0x0]

0000000000416300 <flatcc_builder_custom_init@@Base>:
  416300:	endbr64 
  416304:	mov    QWORD PTR [rdi],0x0
  41630b:	mov    QWORD PTR [rdi+0x180],0x0
  416316:	mov    r9,rdi
  416319:	lea    rdi,[rdi+0x8]
  41631d:	and    rdi,0xfffffffffffffff8
  416321:	mov    r10,rcx
  416324:	mov    rcx,r9
  416327:	sub    rcx,rdi
  41632a:	add    ecx,0x188
  416330:	shr    ecx,0x3
  416333:	xor    eax,eax
  416335:	rep stos QWORD PTR es:[rdi],rax
  416338:	test   rsi,rsi
  41633b:	je     416358 <flatcc_builder_custom_init@@Base+0x58>
  41633d:	test   r10,r10
  416340:	je     416376 <flatcc_builder_custom_init@@Base+0x76>
  416342:	mov    QWORD PTR [r9+0x40],r8
  416346:	mov    QWORD PTR [r9+0x50],r10
  41634a:	mov    QWORD PTR [r9+0x38],rdx
  41634e:	mov    QWORD PTR [r9+0x48],rsi
  416352:	xor    eax,eax
  416354:	ret    
  416355:	nop    DWORD PTR [rax]
  416358:	mov    DWORD PTR [r9+0x128],0x1
  416363:	lea    rdx,[r9+0x130]
  41636a:	mov    rsi,0x419db0
  416371:	test   r10,r10
  416374:	jne    416342 <flatcc_builder_custom_init@@Base+0x42>
  416376:	mov    r10,0x415c40
  41637d:	jmp    416342 <flatcc_builder_custom_init@@Base+0x42>
  41637f:	nop

0000000000416380 <flatcc_builder_init@@Base>:
  416380:	endbr64 
  416384:	xor    r8d,r8d
  416387:	xor    ecx,ecx
  416389:	xor    edx,edx
  41638b:	xor    esi,esi
  41638d:	jmp    416300 <flatcc_builder_custom_init@@Base>
  416392:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41639d:	nop    DWORD PTR [rax]

00000000004163a0 <flatcc_builder_custom_reset@@Base>:
  4163a0:	endbr64 
  4163a4:	push   r14
  4163a6:	mov    r14d,esi
  4163a9:	push   r13
  4163ab:	mov    r13d,edx
  4163ae:	push   r12
  4163b0:	mov    r12,rdi
  4163b3:	push   rbp
  4163b4:	xor    ebp,ebp
  4163b6:	push   rbx
  4163b7:	lea    rbx,[rdi+0x58]
  4163bb:	jmp    416405 <flatcc_builder_custom_reset@@Base+0x65>
  4163bd:	nop    DWORD PTR [rax]
  4163c0:	cmp    ebp,0x5
  4163c3:	je     4163ef <flatcc_builder_custom_reset@@Base+0x4f>
  4163c5:	test   r13d,r13d
  4163c8:	je     4163ef <flatcc_builder_custom_reset@@Base+0x4f>
  4163ca:	mov    rdi,QWORD PTR [r12+0x40]
  4163cf:	mov    r8d,ebp
  4163d2:	mov    ecx,0x1
  4163d7:	mov    edx,0x1
  4163dc:	mov    rsi,rbx
  4163df:	call   QWORD PTR [r12+0x50]
  4163e4:	test   eax,eax
  4163e6:	jne    416520 <flatcc_builder_custom_reset@@Base+0x180>
  4163ec:	mov    rdi,QWORD PTR [rbx]
  4163ef:	mov    rdx,QWORD PTR [rbx+0x8]
  4163f3:	xor    esi,esi
  4163f5:	call   4061c0 <memset@plt>
  4163fa:	inc    ebp
  4163fc:	add    rbx,0x10
  416400:	cmp    ebp,0x8
  416403:	je     416438 <flatcc_builder_custom_reset@@Base+0x98>
  416405:	mov    rdi,QWORD PTR [rbx]
  416408:	test   rdi,rdi
  41640b:	jne    4163c0 <flatcc_builder_custom_reset@@Base+0x20>
  41640d:	cmp    QWORD PTR [rbx+0x8],0x0
  416412:	je     4163fa <flatcc_builder_custom_reset@@Base+0x5a>
  416414:	lea    rcx,[rip+0x188e5]        # 42ed00 <_IO_stdin_used@@Base+0x3d00>
  41641b:	mov    edx,0x1b2
  416420:	lea    rsi,[rip+0x17e19]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  416427:	lea    rdi,[rip+0x181b9]        # 42e5e7 <_IO_stdin_used@@Base+0x35e7>
  41642e:	call   4061b0 <__assert_fail@plt>
  416433:	nop    DWORD PTR [rax+rax*1+0x0]
  416438:	mov    edx,DWORD PTR [r12+0xe4]
  416440:	mov    DWORD PTR [r12+0xe0],0x0
  41644c:	test   edx,edx
  41644e:	je     41645c <flatcc_builder_custom_reset@@Base+0xbc>
  416450:	mov    DWORD PTR [r12+0xe4],0x10
  41645c:	xor    eax,eax
  41645e:	mov    WORD PTR [r12+0xe8],ax
  416467:	mov    rax,QWORD PTR [r12+0x68]
  41646c:	mov    QWORD PTR [r12+0xf0],0x0
  416478:	mov    QWORD PTR [r12+0x18],rax
  41647d:	mov    rax,QWORD PTR [r12+0x88]
  416485:	mov    QWORD PTR [r12+0x20],0x0
  41648e:	mov    QWORD PTR [r12],rax
  416492:	mov    rax,QWORD PTR [r12+0x58]
  416497:	mov    QWORD PTR [r12+0xfc],0x0
  4164a3:	mov    QWORD PTR [r12+0x104],0x0
  4164af:	mov    QWORD PTR [r12+0x8],rax
  4164b4:	mov    QWORD PTR [r12+0x30],0x0
  4164bd:	test   r14d,r14d
  4164c0:	jne    4164e0 <flatcc_builder_custom_reset@@Base+0x140>
  4164c2:	mov    eax,DWORD PTR [r12+0x128]
  4164ca:	test   eax,eax
  4164cc:	jne    416504 <flatcc_builder_custom_reset@@Base+0x164>
  4164ce:	pop    rbx
  4164cf:	pop    rbp
  4164d0:	pop    r12
  4164d2:	pop    r13
  4164d4:	pop    r14
  4164d6:	ret    
  4164d7:	nop    WORD PTR [rax+rax*1+0x0]
  4164e0:	mov    eax,DWORD PTR [r12+0x128]
  4164e8:	mov    QWORD PTR [r12+0x118],0x0
  4164f4:	mov    QWORD PTR [r12+0x120],0x0
  416500:	test   eax,eax
  416502:	je     4164ce <flatcc_builder_custom_reset@@Base+0x12e>
  416504:	lea    rdi,[r12+0x130]
  41650c:	call   419c20 <flatcc_emitter_reset@@Base>
  416511:	pop    rbx
  416512:	pop    rbp
  416513:	pop    r12
  416515:	pop    r13
  416517:	xor    eax,eax
  416519:	pop    r14
  41651b:	ret    
  41651c:	nop    DWORD PTR [rax+0x0]
  416520:	pop    rbx
  416521:	pop    rbp
  416522:	pop    r12
  416524:	pop    r13
  416526:	mov    eax,0xffffffff
  41652b:	pop    r14
  41652d:	ret    
  41652e:	xchg   ax,ax

0000000000416530 <flatcc_builder_reset@@Base>:
  416530:	endbr64 
  416534:	xor    edx,edx
  416536:	xor    esi,esi
  416538:	jmp    4163a0 <flatcc_builder_custom_reset@@Base>
  41653d:	nop    DWORD PTR [rax]

0000000000416540 <flatcc_builder_clear@@Base>:
  416540:	endbr64 
  416544:	push   r12
  416546:	lea    r12,[rdi+0x58]
  41654a:	push   rbp
  41654b:	xor    ebp,ebp
  41654d:	push   rbx
  41654e:	mov    rbx,rdi
  416551:	nop    DWORD PTR [rax+0x0]
  416558:	mov    rdi,QWORD PTR [rbx+0x40]
  41655c:	mov    r8d,ebp
  41655f:	mov    rsi,r12
  416562:	xor    ecx,ecx
  416564:	xor    edx,edx
  416566:	inc    ebp
  416568:	call   QWORD PTR [rbx+0x50]
  41656b:	add    r12,0x10
  41656f:	cmp    ebp,0x8
  416572:	jne    416558 <flatcc_builder_clear@@Base+0x18>
  416574:	mov    eax,DWORD PTR [rbx+0x128]
  41657a:	test   eax,eax
  41657c:	jne    4165b0 <flatcc_builder_clear@@Base+0x70>
  41657e:	lea    rdi,[rbx+0x8]
  416582:	and    rdi,0xfffffffffffffff8
  416586:	mov    QWORD PTR [rbx],0x0
  41658d:	mov    QWORD PTR [rbx+0x180],0x0
  416598:	sub    rbx,rdi
  41659b:	lea    ecx,[rbx+0x188]
  4165a1:	shr    ecx,0x3
  4165a4:	xor    eax,eax
  4165a6:	rep stos QWORD PTR es:[rdi],rax
  4165a9:	pop    rbx
  4165aa:	pop    rbp
  4165ab:	pop    r12
  4165ad:	ret    
  4165ae:	xchg   ax,ax
  4165b0:	lea    rdi,[rbx+0x130]
  4165b7:	call   419d10 <flatcc_emitter_clear@@Base>
  4165bc:	jmp    41657e <flatcc_builder_clear@@Base+0x3e>
  4165be:	xchg   ax,ax

00000000004165c0 <flatcc_builder_enter_user_frame_ptr@@Base>:
  4165c0:	endbr64 
  4165c4:	push   r12
  4165c6:	push   rbp
  4165c7:	lea    rbp,[rsi+0x7]
  4165cb:	and    rbp,0xfffffffffffffff8
  4165cf:	push   rbx
  4165d0:	add    rbp,0x8
  4165d4:	mov    rbx,rdi
  4165d7:	mov    r12,QWORD PTR [rdi+0x180]
  4165de:	lea    rdx,[r12+rbp*1]
  4165e2:	cmp    rdx,QWORD PTR [rdi+0xd0]
  4165e9:	jbe    416605 <flatcc_builder_enter_user_frame_ptr@@Base+0x45>
  4165eb:	lea    rsi,[rdi+0xc8]
  4165f2:	mov    rdi,QWORD PTR [rdi+0x40]
  4165f6:	xor    ecx,ecx
  4165f8:	mov    r8d,0x7
  4165fe:	call   QWORD PTR [rbx+0x50]
  416601:	test   eax,eax
  416603:	jne    416657 <flatcc_builder_enter_user_frame_ptr@@Base+0x97>
  416605:	add    r12,QWORD PTR [rbx+0xc8]
  41660c:	je     416650 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
  41660e:	mov    rdx,rbp
  416611:	mov    rdi,r12
  416614:	xor    esi,esi
  416616:	call   4061c0 <memset@plt>
  41661b:	mov    rdx,QWORD PTR [rbx+0x178]
  416622:	lea    rax,[r12+0x8]
  416627:	mov    QWORD PTR [r12],rdx
  41662b:	mov    rdx,QWORD PTR [rbx+0x180]
  416632:	add    rbp,rdx
  416635:	lea    rcx,[rdx+0x8]
  416639:	mov    QWORD PTR [rbx+0x180],rbp
  416640:	mov    QWORD PTR [rbx+0x178],rcx
  416647:	pop    rbx
  416648:	pop    rbp
  416649:	pop    r12
  41664b:	ret    
  41664c:	nop    DWORD PTR [rax+0x0]
  416650:	pop    rbx
  416651:	pop    rbp
  416652:	xor    eax,eax
  416654:	pop    r12
  416656:	ret    
  416657:	call   415d70 <flatcc_builder_default_alloc@@Base+0x130>
  41665c:	nop    DWORD PTR [rax+0x0]

0000000000416660 <flatcc_builder_enter_user_frame@@Base>:
  416660:	endbr64 
  416664:	push   r12
  416666:	push   rbp
  416667:	mov    rbp,rdi
  41666a:	push   rbx
  41666b:	lea    rbx,[rsi+0x7]
  41666f:	and    rbx,0xfffffffffffffff8
  416673:	mov    r12,QWORD PTR [rdi+0x180]
  41667a:	add    rbx,0x8
  41667e:	lea    rdx,[r12+rbx*1]
  416682:	cmp    rdx,QWORD PTR [rdi+0xd0]
  416689:	jbe    4166a5 <flatcc_builder_enter_user_frame@@Base+0x45>
  41668b:	lea    rsi,[rdi+0xc8]
  416692:	mov    rdi,QWORD PTR [rdi+0x40]
  416696:	xor    ecx,ecx
  416698:	mov    r8d,0x7
  41669e:	call   QWORD PTR [rbp+0x50]
  4166a1:	test   eax,eax
  4166a3:	jne    4166ea <flatcc_builder_enter_user_frame@@Base+0x8a>
  4166a5:	add    r12,QWORD PTR [rbp+0xc8]
  4166ac:	je     4166e2 <flatcc_builder_enter_user_frame@@Base+0x82>
  4166ae:	mov    rdx,rbx
  4166b1:	mov    rdi,r12
  4166b4:	xor    esi,esi
  4166b6:	call   4061c0 <memset@plt>
  4166bb:	mov    rax,QWORD PTR [rbp+0x178]
  4166c2:	mov    QWORD PTR [r12],rax
  4166c6:	mov    rax,QWORD PTR [rbp+0x180]
  4166cd:	lea    r12,[rax+0x8]
  4166d1:	add    rbx,rax
  4166d4:	mov    QWORD PTR [rbp+0x178],r12
  4166db:	mov    QWORD PTR [rbp+0x180],rbx
  4166e2:	pop    rbx
  4166e3:	pop    rbp
  4166e4:	mov    rax,r12
  4166e7:	pop    r12
  4166e9:	ret    
  4166ea:	call   415d70 <flatcc_builder_default_alloc@@Base+0x130>
  4166ef:	nop

00000000004166f0 <flatcc_builder_exit_user_frame@@Base>:
  4166f0:	endbr64 
  4166f4:	mov    rax,QWORD PTR [rdi+0x178]
  4166fb:	test   rax,rax
  4166fe:	je     416720 <flatcc_builder_exit_user_frame@@Base+0x30>
  416700:	mov    edx,eax
  416702:	sub    rax,0x8
  416706:	mov    QWORD PTR [rdi+0x180],rax
  41670d:	add    rdx,QWORD PTR [rdi+0xc8]
  416714:	mov    rax,QWORD PTR [rdx-0x8]
  416718:	mov    QWORD PTR [rdi+0x178],rax
  41671f:	ret    
  416720:	push   rax
  416721:	lea    rcx,[rip+0x185a8]        # 42ecd0 <_IO_stdin_used@@Base+0x3cd0>
  416728:	mov    edx,0x21e
  41672d:	lea    rsi,[rip+0x17b0c]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  416734:	lea    rdi,[rip+0x17ebe]        # 42e5f9 <_IO_stdin_used@@Base+0x35f9>
  41673b:	call   4061b0 <__assert_fail@plt>

0000000000416740 <flatcc_builder_exit_user_frame_at@@Base>:
  416740:	endbr64 
  416744:	cmp    QWORD PTR [rdi+0x178],rsi
  41674b:	jb     416759 <flatcc_builder_exit_user_frame_at@@Base+0x19>
  41674d:	mov    QWORD PTR [rdi+0x178],rsi
  416754:	jmp    4166f0 <flatcc_builder_exit_user_frame@@Base>
  416759:	push   rax
  41675a:	lea    rcx,[rip+0x1853f]        # 42eca0 <_IO_stdin_used@@Base+0x3ca0>
  416761:	mov    edx,0x227
  416766:	lea    rsi,[rip+0x17ad3]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  41676d:	lea    rdi,[rip+0x17b2c]        # 42e2a0 <_IO_stdin_used@@Base+0x32a0>
  416774:	call   4061b0 <__assert_fail@plt>
  416779:	nop    DWORD PTR [rax+0x0]

0000000000416780 <flatcc_builder_get_current_user_frame@@Base>:
  416780:	endbr64 
  416784:	mov    rax,QWORD PTR [rdi+0x178]
  41678b:	ret    
  41678c:	nop    DWORD PTR [rax+0x0]

0000000000416790 <flatcc_builder_get_user_frame_ptr@@Base>:
  416790:	endbr64 
  416794:	mov    eax,esi
  416796:	add    rax,QWORD PTR [rdi+0xc8]
  41679d:	ret    
  41679e:	xchg   ax,ax

00000000004167a0 <flatcc_builder_embed_buffer@@Base>:
  4167a0:	endbr64 
  4167a4:	push   r13
  4167a6:	mov    r13d,r9d
  4167a9:	push   r12
  4167ab:	mov    r12,rcx
  4167ae:	push   rbp
  4167af:	mov    rbp,rdx
  4167b2:	movzx  edx,si
  4167b5:	push   rbx
  4167b6:	mov    rbx,rdi
  4167b9:	sub    rsp,0xc8
  4167c0:	mov    WORD PTR [rsp+0xc],r8w
  4167c6:	mov    r8d,DWORD PTR [rdi+0x100]
  4167cd:	mov    rax,QWORD PTR fs:0x28
  4167d6:	mov    QWORD PTR [rsp+0xb8],rax
  4167de:	xor    eax,eax
  4167e0:	test   r8d,r8d
  4167e3:	setne  cl
  4167e6:	lea    rax,[rsp+0xc]
  4167eb:	movzx  ecx,cl
  4167ee:	mov    rsi,rax
  4167f1:	call   415dd0 <flatcc_builder_default_alloc@@Base+0x190>
  4167f6:	test   eax,eax
  4167f8:	jne    416930 <flatcc_builder_embed_buffer@@Base+0x190>
  4167fe:	mov    edx,DWORD PTR [rbx+0xf0]
  416804:	xor    esi,esi
  416806:	and    r13d,0x2
  41680a:	setne  sil
  41680e:	movzx  ecx,WORD PTR [rsp+0xc]
  416813:	mov    eax,edx
  416815:	shl    esi,0x2
  416818:	sub    eax,r12d
  41681b:	dec    ecx
  41681d:	sub    eax,esi
  41681f:	and    eax,ecx
  416821:	lea    ecx,[rax+r12*1]
  416825:	mov    DWORD PTR [rsp+0x1c],ecx
  416829:	mov    ecx,DWORD PTR [rbx+0x100]
  41682f:	mov    QWORD PTR [rsp+0x20],0x0
  416838:	mov    DWORD PTR [rsp+0x28],0x0
  416840:	xor    r8d,r8d
  416843:	test   ecx,ecx
  416845:	je     416871 <flatcc_builder_embed_buffer@@Base+0xd1>
  416847:	lea    rcx,[rsp+0x1c]
  41684c:	mov    QWORD PTR [rsp+0x20],0x4
  416855:	mov    QWORD PTR [rsp+0x30],rcx
  41685a:	mov    QWORD PTR [rsp+0x38],0x4
  416863:	mov    DWORD PTR [rsp+0x28],0x1
  41686b:	mov    r8d,0x4
  416871:	test   r12,r12
  416874:	je     41689a <flatcc_builder_embed_buffer@@Base+0xfa>
  416876:	movsxd rsi,DWORD PTR [rsp+0x28]
  41687b:	add    r8,r12
  41687e:	mov    rcx,rsi
  416881:	inc    ecx
  416883:	shl    rsi,0x4
  416887:	mov    QWORD PTR [rsp+0x20],r8
  41688c:	mov    QWORD PTR [rsp+rsi*1+0x30],rbp
  416891:	mov    QWORD PTR [rsp+rsi*1+0x38],r12
  416896:	mov    DWORD PTR [rsp+0x28],ecx
  41689a:	test   eax,eax
  41689c:	jne    416900 <flatcc_builder_embed_buffer@@Base+0x160>
  41689e:	mov    ebp,edx
  4168a0:	sub    ebp,r8d
  4168a3:	cmp    edx,ebp
  4168a5:	jle    416934 <flatcc_builder_embed_buffer@@Base+0x194>
  4168ab:	movabs rax,0x10000000f
  4168b5:	cmp    r8,rax
  4168b8:	ja     416934 <flatcc_builder_embed_buffer@@Base+0x194>
  4168ba:	mov    rdi,QWORD PTR [rbx+0x38]
  4168be:	mov    edx,DWORD PTR [rsp+0x28]
  4168c2:	lea    rsi,[rsp+0x30]
  4168c7:	mov    ecx,ebp
  4168c9:	call   QWORD PTR [rbx+0x48]
  4168cc:	test   eax,eax
  4168ce:	jne    416958 <flatcc_builder_embed_buffer@@Base+0x1b8>
  4168d4:	mov    DWORD PTR [rbx+0xf0],ebp
  4168da:	mov    rdi,QWORD PTR [rsp+0xb8]
  4168e2:	xor    rdi,QWORD PTR fs:0x28
  4168eb:	mov    eax,ebp
  4168ed:	jne    416953 <flatcc_builder_embed_buffer@@Base+0x1b3>
  4168ef:	add    rsp,0xc8
  4168f6:	pop    rbx
  4168f7:	pop    rbp
  4168f8:	pop    r12
  4168fa:	pop    r13
  4168fc:	ret    
  4168fd:	nop    DWORD PTR [rax]
  416900:	movsxd rsi,DWORD PTR [rsp+0x28]
  416905:	mov    rdi,0x42ed20
  41690c:	mov    rcx,rsi
  41690f:	add    r8,rax
  416912:	shl    rsi,0x4
  416916:	inc    ecx
  416918:	mov    QWORD PTR [rsp+0x20],r8
  41691d:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  416922:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  416927:	mov    DWORD PTR [rsp+0x28],ecx
  41692b:	jmp    41689e <flatcc_builder_embed_buffer@@Base+0xfe>
  416930:	xor    ebp,ebp
  416932:	jmp    4168da <flatcc_builder_embed_buffer@@Base+0x13a>
  416934:	lea    rcx,[rip+0x18335]        # 42ec70 <_IO_stdin_used@@Base+0x3c70>
  41693b:	mov    edx,0x287
  416940:	lea    rsi,[rip+0x178f9]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  416947:	lea    rdi,[rip+0x17c89]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  41694e:	call   4061b0 <__assert_fail@plt>
  416953:	call   4061a0 <__stack_chk_fail@plt>
  416958:	call   415f10 <flatcc_builder_default_alloc@@Base+0x2d0>
  41695d:	nop    DWORD PTR [rax]

0000000000416960 <flatcc_builder_create_buffer@@Base>:
  416960:	endbr64 
  416964:	push   r14
  416966:	movzx  edx,dx
  416969:	mov    r14,rsi
  41696c:	push   r13
  41696e:	mov    r13d,r9d
  416971:	push   r12
  416973:	mov    r12d,r9d
  416976:	and    r12d,0x1
  41697a:	push   rbp
  41697b:	mov    rbp,rdi
  41697e:	push   rbx
  41697f:	mov    ebx,ecx
  416981:	mov    ecx,r12d
  416984:	sub    rsp,0xc0
  41698b:	mov    WORD PTR [rsp+0xc],r8w
  416991:	lea    rsi,[rsp+0xc]
  416996:	mov    rax,QWORD PTR fs:0x28
  41699f:	mov    QWORD PTR [rsp+0xb8],rax
  4169a7:	xor    eax,eax
  4169a9:	mov    DWORD PTR [rsp+0x1c],0x0
  4169b1:	call   415dd0 <flatcc_builder_default_alloc@@Base+0x190>
  4169b6:	test   eax,eax
  4169b8:	jne    416b58 <flatcc_builder_create_buffer@@Base+0x1f8>
  4169be:	movzx  esi,WORD PTR [rsp+0xc]
  4169c3:	cmp    si,WORD PTR [rbp+0xe8]
  4169ca:	jbe    4169d3 <flatcc_builder_create_buffer@@Base+0x73>
  4169cc:	mov    WORD PTR [rbp+0xe8],si
  4169d3:	mov    edx,DWORD PTR [rsp+0x1c]
  4169d7:	test   r14,r14
  4169da:	je     4169e3 <flatcc_builder_create_buffer@@Base+0x83>
  4169dc:	mov    edx,DWORD PTR [r14]
  4169df:	mov    DWORD PTR [rsp+0x1c],edx
  4169e3:	test   edx,edx
  4169e5:	mov    eax,0x4
  4169ea:	mov    ecx,DWORD PTR [rbp+0xf0]
  4169f0:	cmovne rdx,rax
  4169f4:	xor    edi,edi
  4169f6:	test   r13b,0x2
  4169fa:	setne  dil
  4169fe:	lea    eax,[rcx-0x4]
  416a01:	shl    edi,0x2
  416a04:	sub    eax,edx
  416a06:	sub    eax,edi
  416a08:	dec    esi
  416a0a:	and    eax,esi
  416a0c:	and    r13d,0x3
  416a10:	jne    416b28 <flatcc_builder_create_buffer@@Base+0x1c8>
  416a16:	xor    r9d,r9d
  416a19:	mov    esi,0x1
  416a1e:	mov    r8d,0x4
  416a24:	movsxd rdi,r9d
  416a27:	shl    rdi,0x4
  416a2b:	lea    r10,[rsp+0x14]
  416a30:	mov    QWORD PTR [rsp+0x20],r8
  416a35:	mov    QWORD PTR [rsp+rdi*1+0x30],r10
  416a3a:	mov    QWORD PTR [rsp+rdi*1+0x38],0x4
  416a43:	mov    DWORD PTR [rsp+0x28],esi
  416a47:	test   edx,edx
  416a49:	je     416a6f <flatcc_builder_create_buffer@@Base+0x10f>
  416a4b:	shl    rsi,0x4
  416a4f:	add    r8,rdx
  416a52:	lea    rdi,[rsp+0x1c]
  416a57:	add    r9d,0x2
  416a5b:	mov    QWORD PTR [rsp+0x20],r8
  416a60:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  416a65:	mov    QWORD PTR [rsp+rsi*1+0x38],rdx
  416a6a:	mov    DWORD PTR [rsp+0x28],r9d
  416a6f:	test   eax,eax
  416a71:	je     416a9e <flatcc_builder_create_buffer@@Base+0x13e>
  416a73:	movsxd rsi,DWORD PTR [rsp+0x28]
  416a78:	mov    rdi,0x42ed20
  416a7f:	mov    rdx,rsi
  416a82:	add    r8,rax
  416a85:	shl    rsi,0x4
  416a89:	inc    edx
  416a8b:	mov    QWORD PTR [rsp+0x20],r8
  416a90:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  416a95:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  416a9a:	mov    DWORD PTR [rsp+0x28],edx
  416a9e:	mov    eax,ecx
  416aa0:	sub    eax,r8d
  416aa3:	lea    edx,[rax+0x4]
  416aa6:	test   r13d,r13d
  416aa9:	cmovne eax,edx
  416aac:	test   r12d,r12d
  416aaf:	je     416b60 <flatcc_builder_create_buffer@@Base+0x200>
  416ab5:	mov    edx,DWORD PTR [rbp+0xf8]
  416abb:	sub    edx,eax
  416abd:	sub    ebx,eax
  416abf:	mov    DWORD PTR [rsp+0x14],ebx
  416ac3:	mov    ebx,ecx
  416ac5:	sub    ebx,r8d
  416ac8:	mov    DWORD PTR [rsp+0x18],edx
  416acc:	cmp    ecx,ebx
  416ace:	jle    416b6d <flatcc_builder_create_buffer@@Base+0x20d>
  416ad4:	mov    rdi,QWORD PTR [rbp+0x38]
  416ad8:	mov    edx,DWORD PTR [rsp+0x28]
  416adc:	lea    rsi,[rsp+0x30]
  416ae1:	mov    ecx,ebx
  416ae3:	call   QWORD PTR [rbp+0x48]
  416ae6:	test   eax,eax
  416ae8:	jne    416b91 <flatcc_builder_create_buffer@@Base+0x231>
  416aee:	mov    DWORD PTR [rbp+0xf0],ebx
  416af4:	test   ebx,ebx
  416af6:	je     416b96 <flatcc_builder_create_buffer@@Base+0x236>
  416afc:	mov    rcx,QWORD PTR [rsp+0xb8]
  416b04:	xor    rcx,QWORD PTR fs:0x28
  416b0d:	mov    eax,ebx
  416b0f:	jne    416b8c <flatcc_builder_create_buffer@@Base+0x22c>
  416b11:	add    rsp,0xc0
  416b18:	pop    rbx
  416b19:	pop    rbp
  416b1a:	pop    r12
  416b1c:	pop    r13
  416b1e:	pop    r14
  416b20:	ret    
  416b21:	nop    DWORD PTR [rax+0x0]
  416b28:	lea    rsi,[rsp+0x18]
  416b2d:	mov    QWORD PTR [rsp+0x30],rsi
  416b32:	mov    QWORD PTR [rsp+0x38],0x4
  416b3b:	mov    esi,0x2
  416b40:	mov    r9d,0x1
  416b46:	mov    r8d,0x8
  416b4c:	jmp    416a24 <flatcc_builder_create_buffer@@Base+0xc4>
  416b51:	nop    DWORD PTR [rax+0x0]
  416b58:	xor    ebx,ebx
  416b5a:	jmp    416afc <flatcc_builder_create_buffer@@Base+0x19c>
  416b5c:	nop    DWORD PTR [rax+0x0]
  416b60:	mov    edx,DWORD PTR [rbp+0xf4]
  416b66:	sub    edx,eax
  416b68:	jmp    416abd <flatcc_builder_create_buffer@@Base+0x15d>
  416b6d:	lea    rcx,[rip+0x180fc]        # 42ec70 <_IO_stdin_used@@Base+0x3c70>
  416b74:	mov    edx,0x287
  416b79:	lea    rsi,[rip+0x176c0]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  416b80:	lea    rdi,[rip+0x17a50]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  416b87:	call   4061b0 <__assert_fail@plt>
  416b8c:	call   4061a0 <__stack_chk_fail@plt>
  416b91:	call   415f10 <flatcc_builder_default_alloc@@Base+0x2d0>
  416b96:	lea    rcx,[rip+0x180b3]        # 42ec50 <_IO_stdin_used@@Base+0x3c50>
  416b9d:	mov    edx,0x304
  416ba2:	lea    rsi,[rip+0x17697]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  416ba9:	lea    rdi,[rip+0x17a27]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  416bb0:	call   4061b0 <__assert_fail@plt>
  416bb5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000416bc0 <flatcc_builder_create_struct@@Base>:
  416bc0:	endbr64 
  416bc4:	push   rbp
  416bc5:	push   rbx
  416bc6:	sub    rsp,0xa8
  416bcd:	mov    rax,QWORD PTR fs:0x28
  416bd6:	mov    QWORD PTR [rsp+0x98],rax
  416bde:	xor    eax,eax
  416be0:	test   cx,cx
  416be3:	je     416d03 <flatcc_builder_create_struct@@Base+0x143>
  416be9:	mov    r8,rdx
  416bec:	mov    rbx,rdi
  416bef:	movzx  edx,cx
  416bf2:	cmp    cx,WORD PTR [rdi+0xe8]
  416bf9:	jbe    416c02 <flatcc_builder_create_struct@@Base+0x42>
  416bfb:	mov    WORD PTR [rdi+0xe8],cx
  416c02:	mov    ecx,DWORD PTR [rbx+0xf0]
  416c08:	dec    edx
  416c0a:	mov    eax,ecx
  416c0c:	sub    eax,r8d
  416c0f:	and    eax,edx
  416c11:	mov    edx,eax
  416c13:	mov    QWORD PTR [rsp],0x0
  416c1b:	mov    DWORD PTR [rsp+0x8],0x0
  416c23:	test   r8,r8
  416c26:	jne    416cb8 <flatcc_builder_create_struct@@Base+0xf8>
  416c2c:	test   eax,eax
  416c2e:	je     416ce4 <flatcc_builder_create_struct@@Base+0x124>
  416c34:	mov    r8,rdx
  416c37:	mov    esi,0x1
  416c3c:	xor    eax,eax
  416c3e:	mov    rdi,0x42ed20
  416c45:	shl    rax,0x4
  416c49:	mov    QWORD PTR [rsp],r8
  416c4d:	mov    QWORD PTR [rsp+rax*1+0x10],rdi
  416c52:	mov    QWORD PTR [rsp+rax*1+0x18],rdx
  416c57:	mov    DWORD PTR [rsp+0x8],esi
  416c5b:	mov    ebp,ecx
  416c5d:	movabs rax,0x10000000f
  416c67:	sub    ebp,r8d
  416c6a:	cmp    r8,rax
  416c6d:	ja     416ce4 <flatcc_builder_create_struct@@Base+0x124>
  416c6f:	cmp    ecx,ebp
  416c71:	jle    416ce4 <flatcc_builder_create_struct@@Base+0x124>
  416c73:	mov    rdi,QWORD PTR [rbx+0x38]
  416c77:	mov    edx,DWORD PTR [rsp+0x8]
  416c7b:	lea    rsi,[rsp+0x10]
  416c80:	mov    ecx,ebp
  416c82:	call   QWORD PTR [rbx+0x48]
  416c85:	test   eax,eax
  416c87:	jne    416d22 <flatcc_builder_create_struct@@Base+0x162>
  416c8d:	mov    DWORD PTR [rbx+0xf0],ebp
  416c93:	mov    eax,ebp
  416c95:	mov    rdi,QWORD PTR [rsp+0x98]
  416c9d:	xor    rdi,QWORD PTR fs:0x28
  416ca6:	jne    416d27 <flatcc_builder_create_struct@@Base+0x167>
  416ca8:	add    rsp,0xa8
  416caf:	pop    rbx
  416cb0:	pop    rbp
  416cb1:	ret    
  416cb2:	nop    WORD PTR [rax+rax*1+0x0]
  416cb8:	mov    QWORD PTR [rsp],r8
  416cbc:	mov    QWORD PTR [rsp+0x10],rsi
  416cc1:	mov    QWORD PTR [rsp+0x18],r8
  416cc6:	mov    DWORD PTR [rsp+0x8],0x1
  416cce:	test   eax,eax
  416cd0:	je     416c5b <flatcc_builder_create_struct@@Base+0x9b>
  416cd2:	add    r8,rdx
  416cd5:	mov    esi,0x2
  416cda:	mov    eax,0x1
  416cdf:	jmp    416c3e <flatcc_builder_create_struct@@Base+0x7e>
  416ce4:	lea    rcx,[rip+0x17f85]        # 42ec70 <_IO_stdin_used@@Base+0x3c70>
  416ceb:	mov    edx,0x287
  416cf0:	lea    rsi,[rip+0x17549]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  416cf7:	lea    rdi,[rip+0x178d9]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  416cfe:	call   4061b0 <__assert_fail@plt>
  416d03:	lea    rcx,[rip+0x17f26]        # 42ec30 <_IO_stdin_used@@Base+0x3c30>
  416d0a:	mov    edx,0x30f
  416d0f:	lea    rsi,[rip+0x1752a]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  416d16:	lea    rdi,[rip+0x178f5]        # 42e612 <_IO_stdin_used@@Base+0x3612>
  416d1d:	call   4061b0 <__assert_fail@plt>
  416d22:	call   415f10 <flatcc_builder_default_alloc@@Base+0x2d0>
  416d27:	call   4061a0 <__stack_chk_fail@plt>
  416d2c:	nop    DWORD PTR [rax+0x0]

0000000000416d30 <flatcc_builder_start_buffer@@Base>:
  416d30:	endbr64 
  416d34:	push   r13
  416d36:	mov    r13d,edx
  416d39:	push   r12
  416d3b:	mov    r12d,ecx
  416d3e:	push   rbp
  416d3f:	mov    rbp,rsi
  416d42:	push   rbx
  416d43:	mov    rbx,rdi
  416d46:	sub    rsp,0x8
  416d4a:	movzx  esi,WORD PTR [rdi+0xe8]
  416d51:	call   415f70 <flatcc_builder_default_alloc@@Base+0x330>
  416d56:	test   eax,eax
  416d58:	jne    416e08 <flatcc_builder_start_buffer@@Base+0xd8>
  416d5e:	movzx  edx,WORD PTR [rbx+0xec]
  416d65:	mov    rsi,QWORD PTR [rbx+0x30]
  416d69:	mov    ecx,0x1
  416d6e:	mov    WORD PTR [rbx+0xe8],cx
  416d75:	mov    WORD PTR [rsi+0x22],dx
  416d79:	movzx  edx,WORD PTR [rbx+0x10c]
  416d80:	mov    WORD PTR [rbx+0xec],r13w
  416d88:	mov    WORD PTR [rsi+0x20],dx
  416d8c:	mov    edx,DWORD PTR [rbx+0xf8]
  416d92:	mov    WORD PTR [rbx+0x10c],r12w
  416d9a:	mov    DWORD PTR [rsi+0x14],edx
  416d9d:	mov    edx,DWORD PTR [rbx+0x100]
  416da3:	mov    DWORD PTR [rsi+0x1c],edx
  416da6:	mov    edx,DWORD PTR [rbx+0xf0]
  416dac:	mov    DWORD PTR [rbx+0xf8],edx
  416db2:	mov    edx,DWORD PTR [rbx+0xfc]
  416db8:	lea    ecx,[rdx+0x1]
  416dbb:	mov    DWORD PTR [rbx+0x100],edx
  416dc1:	mov    edx,DWORD PTR [rbx+0x110]
  416dc7:	mov    DWORD PTR [rbx+0xfc],ecx
  416dcd:	mov    DWORD PTR [rsi+0x10],edx
  416dd0:	test   rbp,rbp
  416dd3:	je     416df8 <flatcc_builder_start_buffer@@Base+0xc8>
  416dd5:	mov    edx,DWORD PTR [rbp+0x0]
  416dd8:	mov    DWORD PTR [rbx+0x110],edx
  416dde:	mov    edx,0x1
  416de3:	mov    WORD PTR [rsi+0xe],dx
  416de7:	add    rsp,0x8
  416deb:	pop    rbx
  416dec:	pop    rbp
  416ded:	pop    r12
  416def:	pop    r13
  416df1:	ret    
  416df2:	nop    WORD PTR [rax+rax*1+0x0]
  416df8:	mov    rbp,0x42ed20
  416dff:	jmp    416dd5 <flatcc_builder_start_buffer@@Base+0xa5>
  416e01:	nop    DWORD PTR [rax+0x0]
  416e08:	mov    eax,0xffffffff
  416e0d:	jmp    416de7 <flatcc_builder_start_buffer@@Base+0xb7>
  416e0f:	nop

0000000000416e10 <flatcc_builder_end_buffer@@Base>:
  416e10:	endbr64 
  416e14:	push   rbp
  416e15:	xor    eax,eax
  416e17:	push   rbx
  416e18:	sub    rsp,0x8
  416e1c:	movzx  r9d,WORD PTR [rdi+0x10c]
  416e24:	mov    edx,DWORD PTR [rdi+0x100]
  416e2a:	and    r9d,0x2
  416e2e:	test   edx,edx
  416e30:	setne  al
  416e33:	movzx  r9d,r9w
  416e37:	or     r9d,eax
  416e3a:	mov    rax,QWORD PTR [rdi+0x30]
  416e3e:	cmp    WORD PTR [rax+0xe],0x1
  416e43:	jne    416f34 <flatcc_builder_end_buffer@@Base+0x124>
  416e49:	movzx  edx,WORD PTR [rdi+0xec]
  416e50:	movzx  eax,WORD PTR [rdi+0xe8]
  416e57:	mov    rbx,rdi
  416e5a:	mov    ecx,esi
  416e5c:	mov    r8d,edx
  416e5f:	cmp    dx,ax
  416e62:	ja     416f28 <flatcc_builder_end_buffer@@Base+0x118>
  416e68:	movzx  r8d,ax
  416e6c:	lea    rsi,[rbx+0x110]
  416e73:	mov    rdi,rbx
  416e76:	call   416960 <flatcc_builder_create_buffer@@Base>
  416e7b:	mov    ebp,eax
  416e7d:	test   eax,eax
  416e7f:	je     416f1c <flatcc_builder_end_buffer@@Base+0x10c>
  416e85:	mov    rax,QWORD PTR [rbx+0x30]
  416e89:	mov    rdi,QWORD PTR [rbx+0x18]
  416e8d:	mov    edx,DWORD PTR [rax+0x14]
  416e90:	xor    esi,esi
  416e92:	mov    DWORD PTR [rbx+0xf8],edx
  416e98:	mov    edx,DWORD PTR [rax+0x1c]
  416e9b:	mov    DWORD PTR [rbx+0x100],edx
  416ea1:	mov    edx,DWORD PTR [rax+0x10]
  416ea4:	movzx  eax,WORD PTR [rax+0x20]
  416ea8:	mov    DWORD PTR [rbx+0x110],edx
  416eae:	mov    WORD PTR [rbx+0x10c],ax
  416eb5:	mov    edx,DWORD PTR [rbx+0x20]
  416eb8:	call   4061c0 <memset@plt>
  416ebd:	mov    rax,QWORD PTR [rbx+0x30]
  416ec1:	mov    edi,DWORD PTR [rbx+0x70]
  416ec4:	mov    edx,DWORD PTR [rax+0x8]
  416ec7:	mov    esi,DWORD PTR [rax]
  416ec9:	mov    ecx,DWORD PTR [rax+0x4]
  416ecc:	mov    DWORD PTR [rbx+0x20],edx
  416ecf:	mov    rdx,rsi
  416ed2:	sub    edi,edx
  416ed4:	mov    DWORD PTR [rbx+0x28],esi
  416ed7:	mov    edx,edi
  416ed9:	add    rsi,QWORD PTR [rbx+0x68]
  416edd:	cmp    ecx,edi
  416edf:	cmovb  edx,ecx
  416ee2:	mov    QWORD PTR [rbx+0x18],rsi
  416ee6:	mov    DWORD PTR [rbx+0x24],edx
  416ee9:	movzx  edx,WORD PTR [rbx+0xea]
  416ef0:	mov    DWORD PTR [rax+0x4],ecx
  416ef3:	cmp    dx,WORD PTR [rbx+0xe8]
  416efa:	jbe    416f03 <flatcc_builder_end_buffer@@Base+0xf3>
  416efc:	mov    WORD PTR [rbx+0xe8],dx
  416f03:	movzx  edx,WORD PTR [rax+0xc]
  416f07:	sub    rax,0x24
  416f0b:	dec    DWORD PTR [rbx+0x104]
  416f11:	mov    WORD PTR [rbx+0xea],dx
  416f18:	mov    QWORD PTR [rbx+0x30],rax
  416f1c:	add    rsp,0x8
  416f20:	pop    rbx
  416f21:	mov    eax,ebp
  416f23:	pop    rbp
  416f24:	ret    
  416f25:	nop    DWORD PTR [rax]
  416f28:	mov    WORD PTR [rbx+0xe8],dx
  416f2f:	jmp    416e6c <flatcc_builder_end_buffer@@Base+0x5c>
  416f34:	lea    rcx,[rip+0x17cd5]        # 42ec10 <_IO_stdin_used@@Base+0x3c10>
  416f3b:	mov    edx,0x346
  416f40:	lea    rsi,[rip+0x172f9]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  416f47:	lea    rdi,[rip+0x17372]        # 42e2c0 <_IO_stdin_used@@Base+0x32c0>
  416f4e:	call   4061b0 <__assert_fail@plt>
  416f53:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  416f5e:	xchg   ax,ax

0000000000416f60 <flatcc_builder_start_struct@@Base>:
  416f60:	endbr64 
  416f64:	push   r12
  416f66:	push   rbp
  416f67:	mov    rbp,rsi
  416f6a:	movzx  esi,dx
  416f6d:	push   rbx
  416f6e:	mov    rbx,rdi
  416f71:	call   415f70 <flatcc_builder_default_alloc@@Base+0x330>
  416f76:	test   eax,eax
  416f78:	jne    417000 <flatcc_builder_start_struct@@Base+0xa0>
  416f7e:	mov    rcx,QWORD PTR [rbx+0x30]
  416f82:	mov    eax,0x2
  416f87:	mov    WORD PTR [rcx+0xe],ax
  416f8b:	mov    eax,DWORD PTR [rbx+0x28]
  416f8e:	mov    edi,DWORD PTR [rbx+0x70]
  416f91:	mov    rdx,rax
  416f94:	sub    edi,edx
  416f96:	add    rax,QWORD PTR [rbx+0x68]
  416f9a:	mov    QWORD PTR [rbx+0x18],rax
  416f9e:	mov    edx,edi
  416fa0:	cmp    edi,0xfffffffc
  416fa3:	ja     416fd0 <flatcc_builder_start_struct@@Base+0x70>
  416fa5:	mov    DWORD PTR [rbx+0x24],edi
  416fa8:	mov    r12d,DWORD PTR [rbx+0x20]
  416fac:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  416fb3:	mov    rsi,r12
  416fb6:	add    esi,ebp
  416fb8:	mov    DWORD PTR [rbx+0x20],esi
  416fbb:	cmp    esi,edx
  416fbd:	jae    416fe0 <flatcc_builder_start_struct@@Base+0x80>
  416fbf:	pop    rbx
  416fc0:	pop    rbp
  416fc1:	add    rax,r12
  416fc4:	pop    r12
  416fc6:	ret    
  416fc7:	nop    WORD PTR [rax+rax*1+0x0]
  416fd0:	mov    DWORD PTR [rbx+0x24],0xfffffffc
  416fd7:	mov    edx,0xfffffffc
  416fdc:	jmp    416fa8 <flatcc_builder_start_struct@@Base+0x48>
  416fde:	xchg   ax,ax
  416fe0:	inc    esi
  416fe2:	mov    edx,0xfffffffc
  416fe7:	mov    rdi,rbx
  416fea:	call   415be0 <union_vector_tests@@Base+0x110>
  416fef:	test   eax,eax
  416ff1:	jne    417000 <flatcc_builder_start_struct@@Base+0xa0>
  416ff3:	mov    rax,QWORD PTR [rbx+0x18]
  416ff7:	jmp    416fbf <flatcc_builder_start_struct@@Base+0x5f>
  416ff9:	nop    DWORD PTR [rax+0x0]
  417000:	pop    rbx
  417001:	pop    rbp
  417002:	xor    eax,eax
  417004:	pop    r12
  417006:	ret    
  417007:	nop    WORD PTR [rax+rax*1+0x0]

0000000000417010 <flatcc_builder_struct_edit@@Base>:
  417010:	endbr64 
  417014:	mov    rax,QWORD PTR [rdi+0x18]
  417018:	ret    
  417019:	nop    DWORD PTR [rax+0x0]

0000000000417020 <flatcc_builder_end_struct@@Base>:
  417020:	endbr64 
  417024:	push   rbp
  417025:	push   rbx
  417026:	sub    rsp,0x8
  41702a:	mov    rax,QWORD PTR [rdi+0x30]
  41702e:	cmp    WORD PTR [rax+0xe],0x2
  417033:	jne    4170d6 <flatcc_builder_end_struct@@Base+0xb6>
  417039:	movzx  ecx,WORD PTR [rdi+0xea]
  417040:	mov    edx,DWORD PTR [rdi+0x20]
  417043:	mov    rsi,QWORD PTR [rdi+0x18]
  417047:	mov    rbx,rdi
  41704a:	call   416bc0 <flatcc_builder_create_struct@@Base>
  41704f:	mov    ebp,eax
  417051:	test   eax,eax
  417053:	jne    417060 <flatcc_builder_end_struct@@Base+0x40>
  417055:	add    rsp,0x8
  417059:	pop    rbx
  41705a:	mov    eax,ebp
  41705c:	pop    rbp
  41705d:	ret    
  41705e:	xchg   ax,ax
  417060:	mov    edx,DWORD PTR [rbx+0x20]
  417063:	mov    rdi,QWORD PTR [rbx+0x18]
  417067:	xor    esi,esi
  417069:	call   4061c0 <memset@plt>
  41706e:	mov    rax,QWORD PTR [rbx+0x30]
  417072:	mov    edi,DWORD PTR [rbx+0x70]
  417075:	mov    edx,DWORD PTR [rax+0x8]
  417078:	mov    esi,DWORD PTR [rax]
  41707a:	mov    ecx,DWORD PTR [rax+0x4]
  41707d:	mov    DWORD PTR [rbx+0x20],edx
  417080:	mov    rdx,rsi
  417083:	sub    edi,edx
  417085:	mov    DWORD PTR [rbx+0x28],esi
  417088:	mov    edx,edi
  41708a:	add    rsi,QWORD PTR [rbx+0x68]
  41708e:	cmp    ecx,edi
  417090:	cmovb  edx,ecx
  417093:	mov    QWORD PTR [rbx+0x18],rsi
  417097:	mov    DWORD PTR [rbx+0x24],edx
  41709a:	movzx  edx,WORD PTR [rbx+0xea]
  4170a1:	mov    DWORD PTR [rax+0x4],ecx
  4170a4:	cmp    dx,WORD PTR [rbx+0xe8]
  4170ab:	jbe    4170b4 <flatcc_builder_end_struct@@Base+0x94>
  4170ad:	mov    WORD PTR [rbx+0xe8],dx
  4170b4:	movzx  edx,WORD PTR [rax+0xc]
  4170b8:	dec    DWORD PTR [rbx+0x104]
  4170be:	sub    rax,0x24
  4170c2:	mov    QWORD PTR [rbx+0x30],rax
  4170c6:	mov    WORD PTR [rbx+0xea],dx
  4170cd:	add    rsp,0x8
  4170d1:	mov    eax,ebp
  4170d3:	pop    rbx
  4170d4:	pop    rbp
  4170d5:	ret    
  4170d6:	lea    rcx,[rip+0x17b13]        # 42ebf0 <_IO_stdin_used@@Base+0x3bf0>
  4170dd:	mov    edx,0x368
  4170e2:	lea    rsi,[rip+0x17157]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  4170e9:	lea    rdi,[rip+0x17200]        # 42e2f0 <_IO_stdin_used@@Base+0x32f0>
  4170f0:	call   4061b0 <__assert_fail@plt>
  4170f5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000417100 <flatcc_builder_extend_vector@@Base>:
  417100:	endbr64 
  417104:	push   rbp
  417105:	mov    eax,esi
  417107:	push   rbx
  417108:	sub    rsp,0x8
  41710c:	mov    rdx,QWORD PTR [rdi+0x30]
  417110:	add    eax,DWORD PTR [rdx+0x14]
  417113:	setb   cl
  417116:	cmp    DWORD PTR [rdx+0x18],eax
  417119:	jb     417164 <flatcc_builder_extend_vector@@Base+0x64>
  41711b:	movzx  ecx,cl
  41711e:	test   ecx,ecx
  417120:	jne    417164 <flatcc_builder_extend_vector@@Base+0x64>
  417122:	imul   esi,DWORD PTR [rdx+0x10]
  417126:	mov    ebp,DWORD PTR [rdi+0x20]
  417129:	mov    DWORD PTR [rdx+0x14],eax
  41712c:	add    esi,ebp
  41712e:	mov    rbx,rdi
  417131:	mov    DWORD PTR [rdi+0x20],esi
  417134:	cmp    esi,DWORD PTR [rdi+0x24]
  417137:	jae    417150 <flatcc_builder_extend_vector@@Base+0x50>
  417139:	mov    rax,QWORD PTR [rbx+0x18]
  41713d:	add    rax,rbp
  417140:	add    rsp,0x8
  417144:	pop    rbx
  417145:	pop    rbp
  417146:	ret    
  417147:	nop    WORD PTR [rax+rax*1+0x0]
  417150:	inc    esi
  417152:	mov    edx,0xfffffffc
  417157:	call   415be0 <union_vector_tests@@Base+0x110>
  41715c:	test   eax,eax
  41715e:	je     417139 <flatcc_builder_extend_vector@@Base+0x39>
  417160:	xor    eax,eax
  417162:	jmp    417140 <flatcc_builder_extend_vector@@Base+0x40>
  417164:	call   415f40 <flatcc_builder_default_alloc@@Base+0x300>
  417169:	nop    DWORD PTR [rax+0x0]

0000000000417170 <flatcc_builder_vector_push@@Base>:
  417170:	endbr64 
  417174:	push   r13
  417176:	push   r12
  417178:	push   rbp
  417179:	push   rbx
  41717a:	sub    rsp,0x8
  41717e:	mov    rax,QWORD PTR [rdi+0x30]
  417182:	cmp    WORD PTR [rax+0xe],0x4
  417187:	jne    4171ed <flatcc_builder_vector_push@@Base+0x7d>
  417189:	mov    edx,DWORD PTR [rax+0x14]
  41718c:	cmp    edx,DWORD PTR [rax+0x18]
  41718f:	ja     41720c <flatcc_builder_vector_push@@Base+0x9c>
  417191:	mov    ebp,DWORD PTR [rdi+0x20]
  417194:	mov    r12d,DWORD PTR [rax+0x10]
  417198:	mov    rcx,rbp
  41719b:	inc    edx
  41719d:	add    ecx,r12d
  4171a0:	mov    DWORD PTR [rax+0x14],edx
  4171a3:	mov    rbx,rdi
  4171a6:	mov    r13,rsi
  4171a9:	mov    DWORD PTR [rdi+0x20],ecx
  4171ac:	cmp    ecx,DWORD PTR [rdi+0x24]
  4171af:	jae    4171d8 <flatcc_builder_vector_push@@Base+0x68>
  4171b1:	add    rbp,QWORD PTR [rbx+0x18]
  4171b5:	je     4171c5 <flatcc_builder_vector_push@@Base+0x55>
  4171b7:	mov    edx,r12d
  4171ba:	mov    rsi,r13
  4171bd:	mov    rdi,rbp
  4171c0:	call   406210 <memcpy@plt>
  4171c5:	add    rsp,0x8
  4171c9:	pop    rbx
  4171ca:	mov    rax,rbp
  4171cd:	pop    rbp
  4171ce:	pop    r12
  4171d0:	pop    r13
  4171d2:	ret    
  4171d3:	nop    DWORD PTR [rax+rax*1+0x0]
  4171d8:	lea    esi,[rcx+0x1]
  4171db:	mov    edx,0xfffffffc
  4171e0:	call   415be0 <union_vector_tests@@Base+0x110>
  4171e5:	test   eax,eax
  4171e7:	je     4171b1 <flatcc_builder_vector_push@@Base+0x41>
  4171e9:	xor    ebp,ebp
  4171eb:	jmp    4171c5 <flatcc_builder_vector_push@@Base+0x55>
  4171ed:	lea    rcx,[rip+0x179bc]        # 42ebb0 <_IO_stdin_used@@Base+0x3bb0>
  4171f4:	mov    edx,0x38b
  4171f9:	lea    rsi,[rip+0x17040]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  417200:	lea    rdi,[rip+0x17119]        # 42e320 <_IO_stdin_used@@Base+0x3320>
  417207:	call   4061b0 <__assert_fail@plt>
  41720c:	lea    rcx,[rip+0x1799d]        # 42ebb0 <_IO_stdin_used@@Base+0x3bb0>
  417213:	mov    edx,0x38c
  417218:	lea    rsi,[rip+0x17021]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  41721f:	lea    rdi,[rip+0x1712a]        # 42e350 <_IO_stdin_used@@Base+0x3350>
  417226:	call   4061b0 <__assert_fail@plt>
  41722b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000417230 <flatcc_builder_append_vector@@Base>:
  417230:	endbr64 
  417234:	push   r13
  417236:	push   r12
  417238:	push   rbp
  417239:	push   rbx
  41723a:	sub    rsp,0x8
  41723e:	mov    rax,QWORD PTR [rdi+0x30]
  417242:	cmp    WORD PTR [rax+0xe],0x4
  417247:	jne    4172b6 <flatcc_builder_append_vector@@Base+0x86>
  417249:	mov    ecx,edx
  41724b:	mov    r13,rsi
  41724e:	xor    esi,esi
  417250:	add    ecx,DWORD PTR [rax+0x14]
  417253:	setb   sil
  417257:	cmp    DWORD PTR [rax+0x18],ecx
  41725a:	jb     4172d5 <flatcc_builder_append_vector@@Base+0xa5>
  41725c:	test   esi,esi
  41725e:	jne    4172d5 <flatcc_builder_append_vector@@Base+0xa5>
  417260:	mov    ebx,DWORD PTR [rax+0x10]
  417263:	mov    r12d,DWORD PTR [rdi+0x20]
  417267:	imul   ebx,edx
  41726a:	mov    rdx,r12
  41726d:	mov    DWORD PTR [rax+0x14],ecx
  417270:	add    edx,ebx
  417272:	mov    rbp,rdi
  417275:	mov    DWORD PTR [rdi+0x20],edx
  417278:	cmp    edx,DWORD PTR [rdi+0x24]
  41727b:	jae    4172a0 <flatcc_builder_append_vector@@Base+0x70>
  41727d:	add    r12,QWORD PTR [rbp+0x18]
  417281:	je     417290 <flatcc_builder_append_vector@@Base+0x60>
  417283:	mov    edx,ebx
  417285:	mov    rsi,r13
  417288:	mov    rdi,r12
  41728b:	call   406210 <memcpy@plt>
  417290:	add    rsp,0x8
  417294:	pop    rbx
  417295:	pop    rbp
  417296:	mov    rax,r12
  417299:	pop    r12
  41729b:	pop    r13
  41729d:	ret    
  41729e:	xchg   ax,ax
  4172a0:	lea    esi,[rdx+0x1]
  4172a3:	mov    edx,0xfffffffc
  4172a8:	call   415be0 <union_vector_tests@@Base+0x110>
  4172ad:	test   eax,eax
  4172af:	je     41727d <flatcc_builder_append_vector@@Base+0x4d>
  4172b1:	xor    r12d,r12d
  4172b4:	jmp    417290 <flatcc_builder_append_vector@@Base+0x60>
  4172b6:	lea    rcx,[rip+0x178d3]        # 42eb90 <_IO_stdin_used@@Base+0x3b90>
  4172bd:	mov    edx,0x393
  4172c2:	lea    rsi,[rip+0x16f77]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  4172c9:	lea    rdi,[rip+0x17050]        # 42e320 <_IO_stdin_used@@Base+0x3320>
  4172d0:	call   4061b0 <__assert_fail@plt>
  4172d5:	call   415f40 <flatcc_builder_default_alloc@@Base+0x300>
  4172da:	nop    WORD PTR [rax+rax*1+0x0]

00000000004172e0 <flatcc_builder_extend_offset_vector@@Base>:
  4172e0:	endbr64 
  4172e4:	push   rbp
  4172e5:	mov    edx,esi
  4172e7:	push   rbx
  4172e8:	sub    rsp,0x8
  4172ec:	mov    rax,QWORD PTR [rdi+0x30]
  4172f0:	add    edx,DWORD PTR [rax+0x14]
  4172f3:	jb     417335 <flatcc_builder_extend_offset_vector@@Base+0x55>
  4172f5:	cmp    edx,0x3fffffff
  4172fb:	ja     417335 <flatcc_builder_extend_offset_vector@@Base+0x55>
  4172fd:	mov    ebp,DWORD PTR [rdi+0x20]
  417300:	mov    DWORD PTR [rax+0x14],edx
  417303:	lea    eax,[rbp+rsi*4+0x0]
  417307:	mov    rbx,rdi
  41730a:	mov    DWORD PTR [rdi+0x20],eax
  41730d:	cmp    eax,DWORD PTR [rdi+0x24]
  417310:	jae    417320 <flatcc_builder_extend_offset_vector@@Base+0x40>
  417312:	mov    rax,QWORD PTR [rbx+0x18]
  417316:	add    rax,rbp
  417319:	add    rsp,0x8
  41731d:	pop    rbx
  41731e:	pop    rbp
  41731f:	ret    
  417320:	lea    esi,[rax+0x1]
  417323:	mov    edx,0xfffffffc
  417328:	call   415be0 <union_vector_tests@@Base+0x110>
  41732d:	test   eax,eax
  41732f:	je     417312 <flatcc_builder_extend_offset_vector@@Base+0x32>
  417331:	xor    eax,eax
  417333:	jmp    417319 <flatcc_builder_extend_offset_vector@@Base+0x39>
  417335:	call   415f40 <flatcc_builder_default_alloc@@Base+0x300>
  41733a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000417340 <flatcc_builder_offset_vector_push@@Base>:
  417340:	endbr64 
  417344:	push   r12
  417346:	push   rbp
  417347:	push   rbx
  417348:	mov    rdx,QWORD PTR [rdi+0x30]
  41734c:	cmp    WORD PTR [rdx+0xe],0x5
  417351:	jne    4173a8 <flatcc_builder_offset_vector_push@@Base+0x68>
  417353:	mov    eax,DWORD PTR [rdx+0x14]
  417356:	cmp    eax,0x3fffffff
  41735b:	je     4173a1 <flatcc_builder_offset_vector_push@@Base+0x61>
  41735d:	mov    ebp,DWORD PTR [rdi+0x20]
  417360:	inc    eax
  417362:	mov    DWORD PTR [rdx+0x14],eax
  417365:	lea    edx,[rbp+0x4]
  417368:	mov    rbx,rdi
  41736b:	mov    r12d,esi
  41736e:	mov    DWORD PTR [rdi+0x20],edx
  417371:	cmp    edx,DWORD PTR [rdi+0x24]
  417374:	jae    417390 <flatcc_builder_offset_vector_push@@Base+0x50>
  417376:	mov    rax,rbp
  417379:	add    rax,QWORD PTR [rbx+0x18]
  41737d:	je     417382 <flatcc_builder_offset_vector_push@@Base+0x42>
  41737f:	mov    DWORD PTR [rax],r12d
  417382:	pop    rbx
  417383:	pop    rbp
  417384:	pop    r12
  417386:	ret    
  417387:	nop    WORD PTR [rax+rax*1+0x0]
  417390:	lea    esi,[rbp+0x5]
  417393:	mov    edx,0xfffffffc
  417398:	call   415be0 <union_vector_tests@@Base+0x110>
  41739d:	test   eax,eax
  41739f:	je     417376 <flatcc_builder_offset_vector_push@@Base+0x36>
  4173a1:	pop    rbx
  4173a2:	pop    rbp
  4173a3:	xor    eax,eax
  4173a5:	pop    r12
  4173a7:	ret    
  4173a8:	lea    rcx,[rip+0x177b1]        # 42eb60 <_IO_stdin_used@@Base+0x3b60>
  4173af:	mov    edx,0x3a6
  4173b4:	lea    rsi,[rip+0x16e85]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  4173bb:	lea    rdi,[rip+0x16fce]        # 42e390 <_IO_stdin_used@@Base+0x3390>
  4173c2:	call   4061b0 <__assert_fail@plt>
  4173c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004173d0 <flatcc_builder_append_offset_vector@@Base>:
  4173d0:	endbr64 
  4173d4:	push   r13
  4173d6:	push   r12
  4173d8:	push   rbp
  4173d9:	push   rbx
  4173da:	sub    rsp,0x8
  4173de:	mov    rax,QWORD PTR [rdi+0x30]
  4173e2:	cmp    WORD PTR [rax+0xe],0x5
  4173e7:	jne    417456 <flatcc_builder_append_offset_vector@@Base+0x86>
  4173e9:	mov    ecx,edx
  4173eb:	add    ecx,DWORD PTR [rax+0x14]
  4173ee:	jb     417475 <flatcc_builder_append_offset_vector@@Base+0xa5>
  4173f4:	cmp    ecx,0x3fffffff
  4173fa:	ja     417475 <flatcc_builder_append_offset_vector@@Base+0xa5>
  4173fc:	mov    r12d,DWORD PTR [rdi+0x20]
  417400:	lea    ebx,[rdx*4+0x0]
  417407:	mov    rdx,r12
  41740a:	add    edx,ebx
  41740c:	mov    DWORD PTR [rax+0x14],ecx
  41740f:	mov    rbp,rdi
  417412:	mov    r13,rsi
  417415:	mov    DWORD PTR [rdi+0x20],edx
  417418:	cmp    edx,DWORD PTR [rdi+0x24]
  41741b:	jae    417440 <flatcc_builder_append_offset_vector@@Base+0x70>
  41741d:	add    r12,QWORD PTR [rbp+0x18]
  417421:	je     417430 <flatcc_builder_append_offset_vector@@Base+0x60>
  417423:	mov    edx,ebx
  417425:	mov    rsi,r13
  417428:	mov    rdi,r12
  41742b:	call   406210 <memcpy@plt>
  417430:	add    rsp,0x8
  417434:	pop    rbx
  417435:	pop    rbp
  417436:	mov    rax,r12
  417439:	pop    r12
  41743b:	pop    r13
  41743d:	ret    
  41743e:	xchg   ax,ax
  417440:	lea    esi,[rdx+0x1]
  417443:	mov    edx,0xfffffffc
  417448:	call   415be0 <union_vector_tests@@Base+0x110>
  41744d:	test   eax,eax
  41744f:	je     41741d <flatcc_builder_append_offset_vector@@Base+0x4d>
  417451:	xor    r12d,r12d
  417454:	jmp    417430 <flatcc_builder_append_offset_vector@@Base+0x60>
  417456:	lea    rcx,[rip+0x176c3]        # 42eb20 <_IO_stdin_used@@Base+0x3b20>
  41745d:	mov    edx,0x3b4
  417462:	lea    rsi,[rip+0x16dd7]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  417469:	lea    rdi,[rip+0x16f20]        # 42e390 <_IO_stdin_used@@Base+0x3390>
  417470:	call   4061b0 <__assert_fail@plt>
  417475:	call   415f40 <flatcc_builder_default_alloc@@Base+0x300>
  41747a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000417480 <flatcc_builder_extend_string@@Base>:
  417480:	endbr64 
  417484:	push   rbp
  417485:	push   rbx
  417486:	sub    rsp,0x8
  41748a:	mov    rax,QWORD PTR [rdi+0x30]
  41748e:	cmp    WORD PTR [rax+0xe],0x6
  417493:	jne    4174d9 <flatcc_builder_extend_string@@Base+0x59>
  417495:	mov    edx,esi
  417497:	add    edx,DWORD PTR [rax+0x14]
  41749a:	jb     4174d4 <flatcc_builder_extend_string@@Base+0x54>
  41749c:	mov    ebp,DWORD PTR [rdi+0x20]
  41749f:	mov    DWORD PTR [rax+0x14],edx
  4174a2:	add    esi,ebp
  4174a4:	mov    rbx,rdi
  4174a7:	mov    DWORD PTR [rdi+0x20],esi
  4174aa:	cmp    esi,DWORD PTR [rdi+0x24]
  4174ad:	jae    4174c0 <flatcc_builder_extend_string@@Base+0x40>
  4174af:	mov    rax,QWORD PTR [rbx+0x18]
  4174b3:	add    rax,rbp
  4174b6:	add    rsp,0x8
  4174ba:	pop    rbx
  4174bb:	pop    rbp
  4174bc:	ret    
  4174bd:	nop    DWORD PTR [rax]
  4174c0:	inc    esi
  4174c2:	mov    edx,0xfffffffc
  4174c7:	call   415be0 <union_vector_tests@@Base+0x110>
  4174cc:	test   eax,eax
  4174ce:	je     4174af <flatcc_builder_extend_string@@Base+0x2f>
  4174d0:	xor    eax,eax
  4174d2:	jmp    4174b6 <flatcc_builder_extend_string@@Base+0x36>
  4174d4:	call   415f40 <flatcc_builder_default_alloc@@Base+0x300>
  4174d9:	lea    rcx,[rip+0x17610]        # 42eaf0 <_IO_stdin_used@@Base+0x3af0>
  4174e0:	mov    edx,0x3bd
  4174e5:	lea    rsi,[rip+0x16d54]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  4174ec:	lea    rdi,[rip+0x16ed5]        # 42e3c8 <_IO_stdin_used@@Base+0x33c8>
  4174f3:	call   4061b0 <__assert_fail@plt>
  4174f8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000417500 <flatcc_builder_append_string@@Base>:
  417500:	endbr64 
  417504:	push   r13
  417506:	push   r12
  417508:	push   rbp
  417509:	push   rbx
  41750a:	sub    rsp,0x8
  41750e:	mov    rax,QWORD PTR [rdi+0x30]
  417512:	cmp    WORD PTR [rax+0xe],0x6
  417517:	jne    41757b <flatcc_builder_append_string@@Base+0x7b>
  417519:	mov    rbp,rdx
  41751c:	add    edx,DWORD PTR [rax+0x14]
  41751f:	jb     417576 <flatcc_builder_append_string@@Base+0x76>
  417521:	mov    r12d,DWORD PTR [rdi+0x20]
  417525:	mov    DWORD PTR [rax+0x14],edx
  417528:	mov    rdx,r12
  41752b:	add    edx,ebp
  41752d:	mov    rbx,rdi
  417530:	mov    r13,rsi
  417533:	mov    DWORD PTR [rdi+0x20],edx
  417536:	cmp    edx,DWORD PTR [rdi+0x24]
  417539:	jae    417560 <flatcc_builder_append_string@@Base+0x60>
  41753b:	add    r12,QWORD PTR [rbx+0x18]
  41753f:	je     41754e <flatcc_builder_append_string@@Base+0x4e>
  417541:	mov    edx,ebp
  417543:	mov    rsi,r13
  417546:	mov    rdi,r12
  417549:	call   406210 <memcpy@plt>
  41754e:	add    rsp,0x8
  417552:	pop    rbx
  417553:	pop    rbp
  417554:	mov    rax,r12
  417557:	pop    r12
  417559:	pop    r13
  41755b:	ret    
  41755c:	nop    DWORD PTR [rax+0x0]
  417560:	lea    esi,[rdx+0x1]
  417563:	mov    edx,0xfffffffc
  417568:	call   415be0 <union_vector_tests@@Base+0x110>
  41756d:	test   eax,eax
  41756f:	je     41753b <flatcc_builder_append_string@@Base+0x3b>
  417571:	xor    r12d,r12d
  417574:	jmp    41754e <flatcc_builder_append_string@@Base+0x4e>
  417576:	call   415f40 <flatcc_builder_default_alloc@@Base+0x300>
  41757b:	lea    rcx,[rip+0x1754e]        # 42ead0 <_IO_stdin_used@@Base+0x3ad0>
  417582:	mov    edx,0x3c6
  417587:	lea    rsi,[rip+0x16cb2]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  41758e:	lea    rdi,[rip+0x16e33]        # 42e3c8 <_IO_stdin_used@@Base+0x33c8>
  417595:	call   4061b0 <__assert_fail@plt>
  41759a:	nop    WORD PTR [rax+rax*1+0x0]

00000000004175a0 <flatcc_builder_append_string_str@@Base>:
  4175a0:	endbr64 
  4175a4:	push   rbp
  4175a5:	mov    rbp,rdi
  4175a8:	mov    rdi,rsi
  4175ab:	push   rbx
  4175ac:	mov    rbx,rsi
  4175af:	sub    rsp,0x8
  4175b3:	call   406190 <strlen@plt>
  4175b8:	add    rsp,0x8
  4175bc:	mov    rsi,rbx
  4175bf:	pop    rbx
  4175c0:	mov    rdi,rbp
  4175c3:	mov    rdx,rax
  4175c6:	pop    rbp
  4175c7:	jmp    417500 <flatcc_builder_append_string@@Base>
  4175cc:	nop    DWORD PTR [rax+0x0]

00000000004175d0 <flatcc_builder_append_string_strn@@Base>:
  4175d0:	endbr64 
  4175d4:	push   r12
  4175d6:	mov    r12,rdi
  4175d9:	push   rbp
  4175da:	mov    rbp,rsi
  4175dd:	mov    rdi,rbp
  4175e0:	push   rbx
  4175e1:	xor    esi,esi
  4175e3:	mov    rbx,rdx
  4175e6:	call   4061d0 <memchr@plt>
  4175eb:	mov    rdx,rax
  4175ee:	sub    rdx,rbp
  4175f1:	test   rax,rax
  4175f4:	cmovne rbx,rdx
  4175f8:	mov    rsi,rbp
  4175fb:	mov    rdx,rbx
  4175fe:	pop    rbx
  4175ff:	pop    rbp
  417600:	mov    rdi,r12
  417603:	pop    r12
  417605:	jmp    417500 <flatcc_builder_append_string@@Base>
  41760a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000417610 <flatcc_builder_truncate_vector@@Base>:
  417610:	endbr64 
  417614:	sub    rsp,0x8
  417618:	mov    rax,QWORD PTR [rdi+0x30]
  41761c:	cmp    WORD PTR [rax+0xe],0x4
  417621:	jne    417656 <flatcc_builder_truncate_vector@@Base+0x46>
  417623:	mov    ecx,DWORD PTR [rax+0x14]
  417626:	mov    rdx,rcx
  417629:	cmp    rcx,rsi
  41762c:	jb     417675 <flatcc_builder_truncate_vector@@Base+0x65>
  41762e:	sub    edx,esi
  417630:	mov    DWORD PTR [rax+0x14],edx
  417633:	imul   esi,DWORD PTR [rax+0x10]
  417637:	mov    eax,DWORD PTR [rdi+0x20]
  41763a:	mov    edx,esi
  41763c:	sub    eax,esi
  41763e:	mov    DWORD PTR [rdi+0x20],eax
  417641:	add    rax,QWORD PTR [rdi+0x18]
  417645:	mov    rdi,rax
  417648:	xor    esi,esi
  41764a:	call   4061c0 <memset@plt>
  41764f:	xor    eax,eax
  417651:	add    rsp,0x8
  417655:	ret    
  417656:	lea    rcx,[rip+0x17453]        # 42eab0 <_IO_stdin_used@@Base+0x3ab0>
  41765d:	mov    edx,0x3d9
  417662:	lea    rsi,[rip+0x16bd7]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  417669:	lea    rdi,[rip+0x16cb0]        # 42e320 <_IO_stdin_used@@Base+0x3320>
  417670:	call   4061b0 <__assert_fail@plt>
  417675:	lea    rcx,[rip+0x17434]        # 42eab0 <_IO_stdin_used@@Base+0x3ab0>
  41767c:	mov    edx,0x3da
  417681:	lea    rsi,[rip+0x16bb8]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  417688:	lea    rdi,[rip+0x16d69]        # 42e3f8 <_IO_stdin_used@@Base+0x33f8>
  41768f:	call   4061b0 <__assert_fail@plt>
  417694:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41769f:	nop

00000000004176a0 <flatcc_builder_truncate_offset_vector@@Base>:
  4176a0:	endbr64 
  4176a4:	sub    rsp,0x8
  4176a8:	mov    rax,QWORD PTR [rdi+0x30]
  4176ac:	cmp    WORD PTR [rax+0xe],0x5
  4176b1:	jne    4176e2 <flatcc_builder_truncate_offset_vector@@Base+0x42>
  4176b3:	mov    edx,DWORD PTR [rax+0x14]
  4176b6:	cmp    edx,esi
  4176b8:	jb     417701 <flatcc_builder_truncate_offset_vector@@Base+0x61>
  4176ba:	sub    edx,esi
  4176bc:	mov    DWORD PTR [rax+0x14],edx
  4176bf:	imul   esi,DWORD PTR [rax+0x10]
  4176c3:	mov    eax,DWORD PTR [rdi+0x20]
  4176c6:	mov    edx,esi
  4176c8:	sub    eax,esi
  4176ca:	mov    DWORD PTR [rdi+0x20],eax
  4176cd:	add    rax,QWORD PTR [rdi+0x18]
  4176d1:	mov    rdi,rax
  4176d4:	xor    esi,esi
  4176d6:	call   4061c0 <memset@plt>
  4176db:	xor    eax,eax
  4176dd:	add    rsp,0x8
  4176e1:	ret    
  4176e2:	lea    rcx,[rip+0x17397]        # 42ea80 <_IO_stdin_used@@Base+0x3a80>
  4176e9:	mov    edx,0x3e2
  4176ee:	lea    rsi,[rip+0x16b4b]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  4176f5:	lea    rdi,[rip+0x16c94]        # 42e390 <_IO_stdin_used@@Base+0x3390>
  4176fc:	call   4061b0 <__assert_fail@plt>
  417701:	lea    rcx,[rip+0x17378]        # 42ea80 <_IO_stdin_used@@Base+0x3a80>
  417708:	mov    edx,0x3e3
  41770d:	lea    rsi,[rip+0x16b2c]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  417714:	lea    rdi,[rip+0x16d05]        # 42e420 <_IO_stdin_used@@Base+0x3420>
  41771b:	call   4061b0 <__assert_fail@plt>

0000000000417720 <flatcc_builder_truncate_string@@Base>:
  417720:	endbr64 
  417724:	sub    rsp,0x8
  417728:	mov    rdx,QWORD PTR [rdi+0x30]
  41772c:	cmp    WORD PTR [rdx+0xe],0x6
  417731:	jne    417763 <flatcc_builder_truncate_string@@Base+0x43>
  417733:	mov    ecx,DWORD PTR [rdx+0x14]
  417736:	mov    rax,rcx
  417739:	cmp    rcx,rsi
  41773c:	jb     417782 <flatcc_builder_truncate_string@@Base+0x62>
  41773e:	sub    eax,esi
  417740:	mov    DWORD PTR [rdx+0x14],eax
  417743:	mov    rdx,rsi
  417746:	mov    eax,DWORD PTR [rdi+0x20]
  417749:	sub    eax,esi
  41774b:	mov    DWORD PTR [rdi+0x20],eax
  41774e:	add    rax,QWORD PTR [rdi+0x18]
  417752:	mov    rdi,rax
  417755:	xor    esi,esi
  417757:	call   4061c0 <memset@plt>
  41775c:	xor    eax,eax
  41775e:	add    rsp,0x8
  417762:	ret    
  417763:	lea    rcx,[rip+0x172f6]        # 42ea60 <_IO_stdin_used@@Base+0x3a60>
  41776a:	mov    edx,0x3eb
  41776f:	lea    rsi,[rip+0x16aca]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  417776:	lea    rdi,[rip+0x16c4b]        # 42e3c8 <_IO_stdin_used@@Base+0x33c8>
  41777d:	call   4061b0 <__assert_fail@plt>
  417782:	lea    rcx,[rip+0x172d7]        # 42ea60 <_IO_stdin_used@@Base+0x3a60>
  417789:	mov    edx,0x3ec
  41778e:	lea    rsi,[rip+0x16aab]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  417795:	lea    rdi,[rip+0x16cc4]        # 42e460 <_IO_stdin_used@@Base+0x3460>
  41779c:	call   4061b0 <__assert_fail@plt>
  4177a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4177ac:	nop    DWORD PTR [rax+0x0]

00000000004177b0 <flatcc_builder_start_vector@@Base>:
  4177b0:	endbr64 
  4177b4:	push   r12
  4177b6:	cmp    dx,0x4
  4177ba:	mov    r12,rcx
  4177bd:	push   rbp
  4177be:	mov    rbp,rsi
  4177c1:	mov    esi,0x4
  4177c6:	push   rbx
  4177c7:	cmovae esi,edx
  4177ca:	mov    rbx,rdi
  4177cd:	movzx  esi,si
  4177d0:	call   415f70 <flatcc_builder_default_alloc@@Base+0x330>
  4177d5:	test   eax,eax
  4177d7:	jne    417820 <flatcc_builder_start_vector@@Base+0x70>
  4177d9:	mov    rsi,QWORD PTR [rbx+0x30]
  4177dd:	mov    edx,0x4
  4177e2:	mov    WORD PTR [rsi+0xe],dx
  4177e6:	mov    edx,DWORD PTR [rbx+0x28]
  4177e9:	mov    DWORD PTR [rsi+0x10],ebp
  4177ec:	mov    rcx,rdx
  4177ef:	add    rdx,QWORD PTR [rbx+0x68]
  4177f3:	mov    DWORD PTR [rsi+0x14],0x0
  4177fa:	mov    DWORD PTR [rsi+0x18],r12d
  4177fe:	mov    QWORD PTR [rbx+0x18],rdx
  417802:	mov    edx,DWORD PTR [rbx+0x70]
  417805:	sub    edx,ecx
  417807:	mov    ecx,0xfffffffc
  41780c:	cmp    edx,ecx
  41780e:	cmova  edx,ecx
  417811:	mov    DWORD PTR [rbx+0x24],edx
  417814:	mov    DWORD PTR [rsi+0x4],ecx
  417817:	pop    rbx
  417818:	pop    rbp
  417819:	pop    r12
  41781b:	ret    
  41781c:	nop    DWORD PTR [rax+0x0]
  417820:	mov    eax,0xffffffff
  417825:	jmp    417817 <flatcc_builder_start_vector@@Base+0x67>
  417827:	nop    WORD PTR [rax+rax*1+0x0]

0000000000417830 <flatcc_builder_start_offset_vector@@Base>:
  417830:	endbr64 
  417834:	push   rbx
  417835:	mov    esi,0x4
  41783a:	mov    rbx,rdi
  41783d:	call   415f70 <flatcc_builder_default_alloc@@Base+0x330>
  417842:	test   eax,eax
  417844:	jne    417880 <flatcc_builder_start_offset_vector@@Base+0x50>
  417846:	mov    rcx,QWORD PTR [rbx+0x30]
  41784a:	xor    edx,edx
  41784c:	mov    QWORD PTR [rcx+0xe],0x40005
  417854:	mov    WORD PTR [rcx+0x16],dx
  417858:	mov    edx,DWORD PTR [rbx+0x28]
  41785b:	mov    rsi,rdx
  41785e:	add    rdx,QWORD PTR [rbx+0x68]
  417862:	mov    QWORD PTR [rbx+0x18],rdx
  417866:	mov    edx,DWORD PTR [rbx+0x70]
  417869:	sub    edx,esi
  41786b:	mov    esi,0xfffffffc
  417870:	cmp    edx,esi
  417872:	cmova  edx,esi
  417875:	mov    DWORD PTR [rbx+0x24],edx
  417878:	mov    DWORD PTR [rcx+0x4],esi
  41787b:	pop    rbx
  41787c:	ret    
  41787d:	nop    DWORD PTR [rax]
  417880:	mov    eax,0xffffffff
  417885:	pop    rbx
  417886:	ret    
  417887:	nop    WORD PTR [rax+rax*1+0x0]

0000000000417890 <flatcc_builder_start_string@@Base>:
  417890:	endbr64 
  417894:	push   rbx
  417895:	mov    esi,0x1
  41789a:	mov    rbx,rdi
  41789d:	call   415f70 <flatcc_builder_default_alloc@@Base+0x330>
  4178a2:	test   eax,eax
  4178a4:	jne    4178e0 <flatcc_builder_start_string@@Base+0x50>
  4178a6:	mov    rcx,QWORD PTR [rbx+0x30]
  4178aa:	xor    edx,edx
  4178ac:	mov    QWORD PTR [rcx+0xe],0x10006
  4178b4:	mov    WORD PTR [rcx+0x16],dx
  4178b8:	mov    edx,DWORD PTR [rbx+0x28]
  4178bb:	mov    rsi,rdx
  4178be:	add    rdx,QWORD PTR [rbx+0x68]
  4178c2:	mov    QWORD PTR [rbx+0x18],rdx
  4178c6:	mov    edx,DWORD PTR [rbx+0x70]
  4178c9:	sub    edx,esi
  4178cb:	mov    esi,0xfffffffc
  4178d0:	cmp    edx,esi
  4178d2:	cmova  edx,esi
  4178d5:	mov    DWORD PTR [rbx+0x24],edx
  4178d8:	mov    DWORD PTR [rcx+0x4],esi
  4178db:	pop    rbx
  4178dc:	ret    
  4178dd:	nop    DWORD PTR [rax]
  4178e0:	mov    eax,0xffffffff
  4178e5:	pop    rbx
  4178e6:	ret    
  4178e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004178f0 <flatcc_builder_reserve_table@@Base>:
  4178f0:	endbr64 
  4178f4:	push   r12
  4178f6:	push   rbp
  4178f7:	push   rbx
  4178f8:	test   esi,esi
  4178fa:	js     4179af <flatcc_builder_reserve_table@@Base+0xbf>
  417900:	mov    rax,QWORD PTR [rdi+0x30]
  417904:	lea    r12d,[rsi+rsi*1+0x4]
  417909:	movzx  edx,WORD PTR [rax+0x1c]
  41790d:	mov    eax,DWORD PTR [rax+0x10]
  417910:	mov    rbx,rdi
  417913:	lea    ebp,[rax+rdx*2]
  417916:	mov    edx,r12d
  417919:	add    rdx,rbp
  41791c:	cmp    rdx,QWORD PTR [rdi+0x60]
  417920:	ja     417960 <flatcc_builder_reserve_table@@Base+0x70>
  417922:	add    rbp,QWORD PTR [rbx+0x58]
  417926:	je     4179a0 <flatcc_builder_reserve_table@@Base+0xb0>
  417928:	mov    rax,QWORD PTR [rbx+0x30]
  41792c:	add    rbp,0x4
  417930:	mov    QWORD PTR [rbx+0x8],rbp
  417934:	mov    ebp,DWORD PTR [rax+0x14]
  417937:	lea    edx,[r12-0x3]
  41793c:	add    rdx,rbp
  41793f:	cmp    rdx,QWORD PTR [rbx+0x90]
  417946:	ja     417980 <flatcc_builder_reserve_table@@Base+0x90>
  417948:	add    rbp,QWORD PTR [rbx+0x88]
  41794f:	sete   al
  417952:	mov    QWORD PTR [rbx],rbp
  417955:	movzx  eax,al
  417958:	neg    eax
  41795a:	pop    rbx
  41795b:	pop    rbp
  41795c:	pop    r12
  41795e:	ret    
  41795f:	nop
  417960:	lea    rsi,[rdi+0x58]
  417964:	mov    rdi,QWORD PTR [rdi+0x40]
  417968:	xor    r8d,r8d
  41796b:	mov    ecx,0x1
  417970:	call   QWORD PTR [rbx+0x50]
  417973:	test   eax,eax
  417975:	je     417922 <flatcc_builder_reserve_table@@Base+0x32>
  417977:	call   415d70 <flatcc_builder_default_alloc@@Base+0x130>
  41797c:	nop    DWORD PTR [rax+0x0]
  417980:	mov    rdi,QWORD PTR [rbx+0x40]
  417984:	xor    ecx,ecx
  417986:	lea    rsi,[rbx+0x88]
  41798d:	mov    r8d,0x3
  417993:	call   QWORD PTR [rbx+0x50]
  417996:	test   eax,eax
  417998:	je     417948 <flatcc_builder_reserve_table@@Base+0x58>
  41799a:	jmp    417977 <flatcc_builder_reserve_table@@Base+0x87>
  41799c:	nop    DWORD PTR [rax+0x0]
  4179a0:	mov    QWORD PTR [rbx+0x8],0x0
  4179a8:	mov    eax,0xffffffff
  4179ad:	jmp    41795a <flatcc_builder_reserve_table@@Base+0x6a>
  4179af:	lea    rcx,[rip+0x1708a]        # 42ea40 <_IO_stdin_used@@Base+0x3a40>
  4179b6:	mov    edx,0x429
  4179bb:	lea    rsi,[rip+0x1687e]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  4179c2:	lea    rdi,[rip+0x16c6a]        # 42e633 <_IO_stdin_used@@Base+0x3633>
  4179c9:	call   4061b0 <__assert_fail@plt>
  4179ce:	xchg   ax,ax

00000000004179d0 <flatcc_builder_start_table@@Base>:
  4179d0:	endbr64 
  4179d4:	push   r13
  4179d6:	push   r12
  4179d8:	mov    r12d,esi
  4179db:	mov    esi,0x4
  4179e0:	push   rbp
  4179e1:	push   rbx
  4179e2:	mov    rbx,rdi
  4179e5:	sub    rsp,0x8
  4179e9:	call   415f70 <flatcc_builder_default_alloc@@Base+0x330>
  4179ee:	test   eax,eax
  4179f0:	jne    417b08 <flatcc_builder_start_table@@Base+0x138>
  4179f6:	mov    rsi,QWORD PTR [rbx]
  4179f9:	mov    rdx,QWORD PTR [rbx+0x30]
  4179fd:	sub    rsi,QWORD PTR [rbx+0x88]
  417a04:	mov    rcx,QWORD PTR [rbx+0x8]
  417a08:	mov    ebp,eax
  417a0a:	mov    rax,QWORD PTR [rbx+0x58]
  417a0e:	mov    DWORD PTR [rdx+0x14],esi
  417a11:	mov    esi,DWORD PTR [rbx+0x14]
  417a14:	sub    rcx,rax
  417a17:	mov    DWORD PTR [rdx+0x18],esi
  417a1a:	movzx  esi,WORD PTR [rbx+0x10]
  417a1e:	xor    edi,edi
  417a20:	mov    r8d,0x3
  417a26:	mov    DWORD PTR [rdx+0x10],ecx
  417a29:	mov    WORD PTR [rdx+0x1c],si
  417a2d:	lea    r13d,[rcx+rsi*2]
  417a31:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  417a38:	mov    WORD PTR [rbx+0x10],di
  417a3c:	mov    WORD PTR [rdx+0xe],r8w
  417a41:	lea    edx,[r12+r12*1+0x4]
  417a46:	add    rdx,r13
  417a49:	cmp    rdx,QWORD PTR [rbx+0x60]
  417a4d:	jbe    417a6e <flatcc_builder_start_table@@Base+0x9e>
  417a4f:	mov    rdi,QWORD PTR [rbx+0x40]
  417a53:	xor    r8d,r8d
  417a56:	lea    rsi,[rbx+0x58]
  417a5a:	mov    ecx,0x1
  417a5f:	call   QWORD PTR [rbx+0x50]
  417a62:	test   eax,eax
  417a64:	jne    417afa <flatcc_builder_start_table@@Base+0x12a>
  417a6a:	mov    rax,QWORD PTR [rbx+0x58]
  417a6e:	add    rax,r13
  417a71:	je     417b00 <flatcc_builder_start_table@@Base+0x130>
  417a77:	add    rax,0x4
  417a7b:	mov    QWORD PTR [rbx+0x8],rax
  417a7f:	mov    rax,QWORD PTR [rbx+0x30]
  417a83:	lea    edx,[r12+r12*1+0x1]
  417a88:	mov    r13d,DWORD PTR [rax+0x14]
  417a8c:	add    rdx,r13
  417a8f:	cmp    rdx,QWORD PTR [rbx+0x90]
  417a96:	ja     417ae0 <flatcc_builder_start_table@@Base+0x110>
  417a98:	add    r13,QWORD PTR [rbx+0x88]
  417a9f:	mov    QWORD PTR [rbx],r13
  417aa2:	je     417b08 <flatcc_builder_start_table@@Base+0x138>
  417aa4:	mov    eax,DWORD PTR [rbx+0x28]
  417aa7:	mov    rdx,rax
  417aaa:	add    rax,QWORD PTR [rbx+0x68]
  417aae:	mov    QWORD PTR [rbx+0x18],rax
  417ab2:	mov    eax,DWORD PTR [rbx+0x70]
  417ab5:	sub    eax,edx
  417ab7:	cmp    eax,0xfffc
  417abc:	mov    edx,0xfffc
  417ac1:	cmova  eax,edx
  417ac4:	mov    DWORD PTR [rbx+0x24],eax
  417ac7:	mov    rax,QWORD PTR [rbx+0x30]
  417acb:	mov    DWORD PTR [rax+0x4],0xfffc
  417ad2:	add    rsp,0x8
  417ad6:	pop    rbx
  417ad7:	mov    eax,ebp
  417ad9:	pop    rbp
  417ada:	pop    r12
  417adc:	pop    r13
  417ade:	ret    
  417adf:	nop
  417ae0:	mov    rdi,QWORD PTR [rbx+0x40]
  417ae4:	xor    ecx,ecx
  417ae6:	lea    rsi,[rbx+0x88]
  417aed:	mov    r8d,0x3
  417af3:	call   QWORD PTR [rbx+0x50]
  417af6:	test   eax,eax
  417af8:	je     417a98 <flatcc_builder_start_table@@Base+0xc8>
  417afa:	call   415d70 <flatcc_builder_default_alloc@@Base+0x130>
  417aff:	nop
  417b00:	mov    QWORD PTR [rbx+0x8],0x0
  417b08:	mov    ebp,0xffffffff
  417b0d:	jmp    417ad2 <flatcc_builder_start_table@@Base+0x102>
  417b0f:	nop

0000000000417b10 <flatcc_builder_create_vtable@@Base>:
  417b10:	endbr64 
  417b14:	push   rbp
  417b15:	mov    rbp,rdi
  417b18:	push   rbx
  417b19:	sub    rsp,0xa8
  417b20:	mov    rax,QWORD PTR fs:0x28
  417b29:	mov    QWORD PTR [rsp+0x98],rax
  417b31:	xor    eax,eax
  417b33:	mov    QWORD PTR [rsp],0x0
  417b3b:	mov    DWORD PTR [rsp+0x8],0x0
  417b43:	mov    eax,DWORD PTR [rdi+0x100]
  417b49:	test   dx,dx
  417b4c:	je     417bd0 <flatcc_builder_create_vtable@@Base+0xc0>
  417b52:	movzx  r8d,dx
  417b56:	mov    QWORD PTR [rsp],r8
  417b5a:	mov    QWORD PTR [rsp+0x10],rsi
  417b5f:	mov    QWORD PTR [rsp+0x18],r8
  417b64:	mov    DWORD PTR [rsp+0x8],0x1
  417b6c:	movzx  edx,dx
  417b6f:	test   eax,eax
  417b71:	je     417c00 <flatcc_builder_create_vtable@@Base+0xf0>
  417b77:	mov    eax,DWORD PTR [rbp+0xf0]
  417b7d:	mov    ebx,eax
  417b7f:	sub    ebx,edx
  417b81:	cmp    eax,ebx
  417b83:	jle    417bde <flatcc_builder_create_vtable@@Base+0xce>
  417b85:	mov    rdi,QWORD PTR [rbp+0x38]
  417b89:	mov    edx,DWORD PTR [rsp+0x8]
  417b8d:	lea    rsi,[rsp+0x10]
  417b92:	mov    ecx,ebx
  417b94:	call   QWORD PTR [rbp+0x48]
  417b97:	test   eax,eax
  417b99:	jne    417c50 <flatcc_builder_create_vtable@@Base+0x140>
  417b9f:	cmp    ebx,0x1
  417ba2:	mov    DWORD PTR [rbp+0xf0],ebx
  417ba8:	sbb    ebx,0xffffffff
  417bab:	mov    rcx,QWORD PTR [rsp+0x98]
  417bb3:	xor    rcx,QWORD PTR fs:0x28
  417bbc:	mov    eax,ebx
  417bbe:	jne    417c4b <flatcc_builder_create_vtable@@Base+0x13b>
  417bc4:	add    rsp,0xa8
  417bcb:	pop    rbx
  417bcc:	pop    rbp
  417bcd:	ret    
  417bce:	xchg   ax,ax
  417bd0:	test   eax,eax
  417bd2:	jne    417bde <flatcc_builder_create_vtable@@Base+0xce>
  417bd4:	mov    eax,DWORD PTR [rdi+0x124]
  417bda:	test   eax,eax
  417bdc:	je     417c40 <flatcc_builder_create_vtable@@Base+0x130>
  417bde:	lea    rcx,[rip+0x1708b]        # 42ec70 <_IO_stdin_used@@Base+0x3c70>
  417be5:	mov    edx,0x287
  417bea:	lea    rsi,[rip+0x1664f]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  417bf1:	lea    rdi,[rip+0x169df]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  417bf8:	call   4061b0 <__assert_fail@plt>
  417bfd:	nop    DWORD PTR [rax]
  417c00:	mov    ecx,DWORD PTR [rdi+0x124]
  417c06:	test   ecx,ecx
  417c08:	jne    417b77 <flatcc_builder_create_vtable@@Base+0x67>
  417c0e:	mov    ebx,DWORD PTR [rdi+0xf4]
  417c14:	add    edx,ebx
  417c16:	mov    DWORD PTR [rdi+0xf4],edx
  417c1c:	mov    rdi,QWORD PTR [rbp+0x38]
  417c20:	mov    edx,DWORD PTR [rsp+0x8]
  417c24:	lea    rsi,[rsp+0x10]
  417c29:	mov    ecx,ebx
  417c2b:	call   QWORD PTR [rbp+0x48]
  417c2e:	test   eax,eax
  417c30:	jne    417c55 <flatcc_builder_create_vtable@@Base+0x145>
  417c32:	inc    ebx
  417c34:	jmp    417bab <flatcc_builder_create_vtable@@Base+0x9b>
  417c39:	nop    DWORD PTR [rax+0x0]
  417c40:	mov    ebx,DWORD PTR [rbp+0xf4]
  417c46:	xor    r8d,r8d
  417c49:	jmp    417c1c <flatcc_builder_create_vtable@@Base+0x10c>
  417c4b:	call   4061a0 <__stack_chk_fail@plt>
  417c50:	call   415f10 <flatcc_builder_default_alloc@@Base+0x2d0>
  417c55:	call   415da0 <flatcc_builder_default_alloc@@Base+0x160>
  417c5a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000417c60 <flatcc_builder_create_cached_vtable@@Base>:
  417c60:	endbr64 
  417c64:	push   r15
  417c66:	mov    r15,rdi
  417c69:	push   r14
  417c6b:	push   r13
  417c6d:	push   r12
  417c6f:	movzx  r12d,dx
  417c73:	push   rbp
  417c74:	mov    ebp,ecx
  417c76:	push   rbx
  417c77:	sub    rsp,0x38
  417c7b:	mov    rbx,QWORD PTR [rdi+0xd8]
  417c82:	mov    QWORD PTR [rsp+0x18],rsi
  417c87:	mov    DWORD PTR [rsp+0x2c],edx
  417c8b:	test   rbx,rbx
  417c8e:	je     417e28 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
  417c94:	mov    eax,0x20
  417c99:	sub    eax,ebx
  417c9b:	shrx   ebp,ebp,eax
  417ca0:	mov    rax,QWORD PTR [r15+0xa8]
  417ca7:	lea    r14,[rax+rbp*4]
  417cab:	test   r14,r14
  417cae:	je     417e10 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  417cb4:	mov    ebp,DWORD PTR [r14]
  417cb7:	test   ebp,ebp
  417cb9:	je     417f00 <flatcc_builder_create_cached_vtable@@Base+0x2a0>
  417cbf:	mov    QWORD PTR [rsp+0x20],0x0
  417cc8:	mov    r11,QWORD PTR [r15+0xb8]
  417ccf:	mov    r8,QWORD PTR [r15+0x78]
  417cd3:	mov    r13,r14
  417cd6:	mov    ebx,ebp
  417cd8:	add    rbx,r11
  417cdb:	mov    esi,DWORD PTR [rbx+0x8]
  417cde:	add    rsi,r8
  417ce1:	cmp    WORD PTR [rsi],r12w
  417ce5:	jne    417dd0 <flatcc_builder_create_cached_vtable@@Base+0x170>
  417ceb:	mov    rdi,QWORD PTR [rsp+0x18]
  417cf0:	movzx  edx,r12w
  417cf4:	mov    QWORD PTR [rsp+0x10],r8
  417cf9:	mov    QWORD PTR [rsp+0x8],r11
  417cfe:	call   4061e0 <memcmp@plt>
  417d03:	test   eax,eax
  417d05:	mov    r11,QWORD PTR [rsp+0x8]
  417d0a:	mov    r8,QWORD PTR [rsp+0x10]
  417d0f:	jne    417dd0 <flatcc_builder_create_cached_vtable@@Base+0x170>
  417d15:	mov    eax,DWORD PTR [r15+0x100]
  417d1c:	cmp    DWORD PTR [rbx+0x4],eax
  417d1f:	je     417de0 <flatcc_builder_create_cached_vtable@@Base+0x180>
  417d25:	mov    QWORD PTR [rsp+0x20],rbx
  417d2a:	mov    ebp,DWORD PTR [rbx+0xc]
  417d2d:	lea    r13,[rbx+0xc]
  417d31:	test   ebp,ebp
  417d33:	jne    417cd6 <flatcc_builder_create_cached_vtable@@Base+0x76>
  417d35:	mov    ebp,DWORD PTR [r15+0xe4]
  417d3c:	lea    rdx,[rbp+0x10]
  417d40:	cmp    rdx,QWORD PTR [r15+0xc0]
  417d47:	jbe    417d68 <flatcc_builder_create_cached_vtable@@Base+0x108>
  417d49:	mov    rdi,QWORD PTR [r15+0x40]
  417d4d:	xor    ecx,ecx
  417d4f:	lea    rsi,[r15+0xb8]
  417d56:	mov    r8d,0x6
  417d5c:	call   QWORD PTR [r15+0x50]
  417d60:	test   eax,eax
  417d62:	jne    417ef4 <flatcc_builder_create_cached_vtable@@Base+0x294>
  417d68:	add    rbp,QWORD PTR [r15+0xb8]
  417d6f:	je     417e10 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  417d75:	mov    eax,DWORD PTR [r15+0xe4]
  417d7c:	mov    rsi,QWORD PTR [rsp+0x18]
  417d81:	lea    edx,[rax+0x10]
  417d84:	mov    DWORD PTR [r15+0xe4],edx
  417d8b:	mov    edx,DWORD PTR [r15+0x100]
  417d92:	mov    rdi,r15
  417d95:	mov    DWORD PTR [rbp+0x4],edx
  417d98:	mov    edx,DWORD PTR [r14]
  417d9b:	mov    DWORD PTR [rbp+0xc],edx
  417d9e:	mov    DWORD PTR [r14],eax
  417da1:	mov    eax,DWORD PTR [rsp+0x2c]
  417da5:	movzx  edx,ax
  417da8:	movzx  ebx,ax
  417dab:	call   417b10 <flatcc_builder_create_vtable@@Base>
  417db0:	mov    DWORD PTR [rbp+0x0],eax
  417db3:	test   eax,eax
  417db5:	je     417e10 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  417db7:	mov    rdi,QWORD PTR [rsp+0x20]
  417dbc:	test   rdi,rdi
  417dbf:	je     417f15 <flatcc_builder_create_cached_vtable@@Base+0x2b5>
  417dc5:	mov    edx,DWORD PTR [rdi+0x8]
  417dc8:	mov    DWORD PTR [rbp+0x8],edx
  417dcb:	jmp    417df7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  417dcd:	nop    DWORD PTR [rax]
  417dd0:	lea    r13,[rbx+0xc]
  417dd4:	mov    ebp,DWORD PTR [rbx+0xc]
  417dd7:	jmp    417d31 <flatcc_builder_create_cached_vtable@@Base+0xd1>
  417ddc:	nop    DWORD PTR [rax+0x0]
  417de0:	cmp    r14,r13
  417de3:	je     417df5 <flatcc_builder_create_cached_vtable@@Base+0x195>
  417de5:	mov    eax,DWORD PTR [rbx+0xc]
  417de8:	mov    DWORD PTR [r13+0x0],eax
  417dec:	mov    eax,DWORD PTR [r14]
  417def:	mov    DWORD PTR [rbx+0xc],eax
  417df2:	mov    DWORD PTR [r14],ebp
  417df5:	mov    eax,DWORD PTR [rbx]
  417df7:	add    rsp,0x38
  417dfb:	pop    rbx
  417dfc:	pop    rbp
  417dfd:	pop    r12
  417dff:	pop    r13
  417e01:	pop    r14
  417e03:	pop    r15
  417e05:	ret    
  417e06:	nop    WORD PTR cs:[rax+rax*1+0x0]
  417e10:	add    rsp,0x38
  417e14:	pop    rbx
  417e15:	pop    rbp
  417e16:	pop    r12
  417e18:	pop    r13
  417e1a:	pop    r14
  417e1c:	xor    eax,eax
  417e1e:	pop    r15
  417e20:	ret    
  417e21:	nop    DWORD PTR [rax+0x0]
  417e28:	mov    eax,DWORD PTR [rdi+0xe4]
  417e2e:	lea    r13,[rdi+0xa8]
  417e35:	test   eax,eax
  417e37:	jne    417f9f <flatcc_builder_create_cached_vtable@@Base+0x33f>
  417e3d:	cmp    QWORD PTR [rdi+0xc0],0xf
  417e45:	jbe    417ed0 <flatcc_builder_create_cached_vtable@@Base+0x270>
  417e4b:	cmp    QWORD PTR [r15+0xb8],0x0
  417e53:	je     417e10 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  417e55:	mov    DWORD PTR [r15+0xe4],0x10
  417e60:	mov    rdi,QWORD PTR [r15+0x40]
  417e64:	mov    r8d,0x5
  417e6a:	mov    ecx,0x1
  417e6f:	mov    edx,0x100
  417e74:	mov    rsi,r13
  417e77:	call   QWORD PTR [r15+0x50]
  417e7b:	test   eax,eax
  417e7d:	jne    417e10 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  417e7f:	mov    rcx,QWORD PTR [r15+0xb0]
  417e86:	mov    eax,0x100
  417e8b:	jmp    417e93 <flatcc_builder_create_cached_vtable@@Base+0x233>
  417e8d:	nop    DWORD PTR [rax]
  417e90:	mov    rax,rdx
  417e93:	lea    rdx,[rax+rax*1]
  417e97:	cmp    rdx,rcx
  417e9a:	jbe    417e90 <flatcc_builder_create_cached_vtable@@Base+0x230>
  417e9c:	shr    rax,0x2
  417ea0:	cmp    rax,0x1
  417ea4:	jbe    417f0e <flatcc_builder_create_cached_vtable@@Base+0x2ae>
  417ea6:	mov    esi,0x1
  417eab:	nop    DWORD PTR [rax+rax*1+0x0]
  417eb0:	inc    rbx
  417eb3:	shlx   rdx,rsi,rbx
  417eb8:	cmp    rax,rdx
  417ebb:	ja     417eb0 <flatcc_builder_create_cached_vtable@@Base+0x250>
  417ebd:	mov    eax,0x20
  417ec2:	sub    eax,ebx
  417ec4:	mov    QWORD PTR [r15+0xd8],rbx
  417ecb:	jmp    417c9b <flatcc_builder_create_cached_vtable@@Base+0x3b>
  417ed0:	lea    rsi,[rdi+0xb8]
  417ed7:	mov    rdi,QWORD PTR [rdi+0x40]
  417edb:	xor    ecx,ecx
  417edd:	mov    r8d,0x6
  417ee3:	mov    edx,0x10
  417ee8:	call   QWORD PTR [r15+0x50]
  417eec:	test   eax,eax
  417eee:	je     417e4b <flatcc_builder_create_cached_vtable@@Base+0x1eb>
  417ef4:	call   415d70 <flatcc_builder_default_alloc@@Base+0x130>
  417ef9:	nop    DWORD PTR [rax+0x0]
  417f00:	mov    QWORD PTR [rsp+0x20],0x0
  417f09:	jmp    417d35 <flatcc_builder_create_cached_vtable@@Base+0xd5>
  417f0e:	mov    eax,0x20
  417f13:	jmp    417ec4 <flatcc_builder_create_cached_vtable@@Base+0x264>
  417f15:	mov    rax,QWORD PTR [r15+0x118]
  417f1c:	mov    r14d,DWORD PTR [r15+0xe0]
  417f23:	test   rax,rax
  417f26:	je     417f31 <flatcc_builder_create_cached_vtable@@Base+0x2d1>
  417f28:	lea    edx,[rbx+r14*1]
  417f2c:	cmp    rax,rdx
  417f2f:	jb     417f87 <flatcc_builder_create_cached_vtable@@Base+0x327>
  417f31:	lea    rdx,[r12+r14*1]
  417f35:	cmp    rdx,QWORD PTR [r15+0x80]
  417f3c:	jbe    417f56 <flatcc_builder_create_cached_vtable@@Base+0x2f6>
  417f3e:	mov    rdi,QWORD PTR [r15+0x40]
  417f42:	xor    ecx,ecx
  417f44:	lea    rsi,[r15+0x78]
  417f48:	mov    r8d,0x2
  417f4e:	call   QWORD PTR [r15+0x50]
  417f52:	test   eax,eax
  417f54:	jne    417ef4 <flatcc_builder_create_cached_vtable@@Base+0x294>
  417f56:	mov    rdi,r14
  417f59:	add    rdi,QWORD PTR [r15+0x78]
  417f5d:	je     417f97 <flatcc_builder_create_cached_vtable@@Base+0x337>
  417f5f:	mov    eax,DWORD PTR [r15+0xe0]
  417f66:	mov    rsi,QWORD PTR [rsp+0x18]
  417f6b:	add    ebx,eax
  417f6d:	mov    DWORD PTR [rbp+0x8],eax
  417f70:	mov    DWORD PTR [r15+0xe0],ebx
  417f77:	mov    rdx,r12
  417f7a:	call   406210 <memcpy@plt>
  417f7f:	mov    eax,DWORD PTR [rbp+0x0]
  417f82:	jmp    417df7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  417f87:	mov    rdi,r15
  417f8a:	call   4162c0 <flatcc_builder_flush_vtable_cache@@Base>
  417f8f:	mov    eax,DWORD PTR [rbp+0x0]
  417f92:	jmp    417df7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  417f97:	or     eax,0xffffffff
  417f9a:	jmp    417df7 <flatcc_builder_create_cached_vtable@@Base+0x197>
  417f9f:	lea    rcx,[rip+0x16a8a]        # 42ea30 <_IO_stdin_used@@Base+0x3a30>
  417fa6:	mov    edx,0x156
  417fab:	lea    rsi,[rip+0x1628e]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  417fb2:	lea    rdi,[rip+0x16664]        # 42e61d <_IO_stdin_used@@Base+0x361d>
  417fb9:	call   4061b0 <__assert_fail@plt>
  417fbe:	xchg   ax,ax

0000000000417fc0 <flatcc_builder_create_table@@Base>:
  417fc0:	endbr64 
  417fc4:	push   rbp
  417fc5:	push   rbx
  417fc6:	mov    rbx,rdi
  417fc9:	sub    rsp,0xb8
  417fd0:	mov    edi,DWORD PTR [rsp+0xd0]
  417fd7:	mov    rax,QWORD PTR fs:0x28
  417fe0:	mov    QWORD PTR [rsp+0xa8],rax
  417fe8:	xor    eax,eax
  417fea:	test   r9d,r9d
  417fed:	js     4181af <flatcc_builder_create_table@@Base+0x1ef>
  417ff3:	test   dil,0x1
  417ff7:	je     41818b <flatcc_builder_create_table@@Base+0x1cb>
  417ffd:	cmp    cx,0x4
  418001:	mov    eax,0x4
  418006:	cmovb  ecx,eax
  418009:	movzx  r11d,cx
  41800d:	cmp    WORD PTR [rbx+0xe8],cx
  418014:	jb     418160 <flatcc_builder_create_table@@Base+0x1a0>
  41801a:	mov    eax,DWORD PTR [rbx+0xf0]
  418020:	lea    ecx,[r11-0x1]
  418024:	mov    r10d,eax
  418027:	sub    r10d,edx
  41802a:	and    r10d,ecx
  41802d:	mov    ecx,eax
  41802f:	sub    ecx,edx
  418031:	lea    r11d,[rcx-0x4]
  418035:	dec    edi
  418037:	mov    ecx,r11d
  41803a:	sub    ecx,edi
  41803c:	sub    ecx,r10d
  41803f:	mov    DWORD PTR [rsp+0xc],ecx
  418043:	test   r9d,r9d
  418046:	je     41807d <flatcc_builder_create_table@@Base+0xbd>
  418048:	mov    edi,r10d
  41804b:	sub    edi,r11d
  41804e:	lea    eax,[r9-0x1]
  418052:	sub    edi,0x4
  418055:	lea    r9,[r8+rax*2+0x2]
  41805a:	nop    WORD PTR [rax+rax*1+0x0]
  418060:	movzx  ecx,WORD PTR [r8]
  418064:	mov    r11d,edi
  418067:	sub    r11d,ecx
  41806a:	add    r8,0x2
  41806e:	add    DWORD PTR [rsi+rcx*1],r11d
  418072:	cmp    r9,r8
  418075:	jne    418060 <flatcc_builder_create_table@@Base+0xa0>
  418077:	mov    eax,DWORD PTR [rbx+0xf0]
  41807d:	lea    rcx,[rsp+0xc]
  418082:	mov    QWORD PTR [rsp+0x10],0x4
  41808b:	mov    QWORD PTR [rsp+0x20],rcx
  418090:	mov    QWORD PTR [rsp+0x28],0x4
  418099:	mov    DWORD PTR [rsp+0x18],0x1
  4180a1:	mov    r8d,0x4
  4180a7:	test   rdx,rdx
  4180aa:	je     4180c7 <flatcc_builder_create_table@@Base+0x107>
  4180ac:	lea    r8,[rdx+0x4]
  4180b0:	mov    QWORD PTR [rsp+0x10],r8
  4180b5:	mov    QWORD PTR [rsp+0x30],rsi
  4180ba:	mov    QWORD PTR [rsp+0x38],rdx
  4180bf:	mov    DWORD PTR [rsp+0x18],0x2
  4180c7:	test   r10d,r10d
  4180ca:	jne    418130 <flatcc_builder_create_table@@Base+0x170>
  4180cc:	mov    ebp,eax
  4180ce:	movabs rdx,0x10000000f
  4180d8:	sub    ebp,r8d
  4180db:	cmp    r8,rdx
  4180de:	ja     41816c <flatcc_builder_create_table@@Base+0x1ac>
  4180e4:	cmp    ebp,eax
  4180e6:	jge    41816c <flatcc_builder_create_table@@Base+0x1ac>
  4180ec:	mov    rdi,QWORD PTR [rbx+0x38]
  4180f0:	mov    edx,DWORD PTR [rsp+0x18]
  4180f4:	lea    rsi,[rsp+0x20]
  4180f9:	mov    ecx,ebp
  4180fb:	call   QWORD PTR [rbx+0x48]
  4180fe:	test   eax,eax
  418100:	jne    4181aa <flatcc_builder_create_table@@Base+0x1ea>
  418106:	mov    DWORD PTR [rbx+0xf0],ebp
  41810c:	mov    eax,ebp
  41810e:	mov    rbx,QWORD PTR [rsp+0xa8]
  418116:	xor    rbx,QWORD PTR fs:0x28
  41811f:	jne    4181ce <flatcc_builder_create_table@@Base+0x20e>
  418125:	add    rsp,0xb8
  41812c:	pop    rbx
  41812d:	pop    rbp
  41812e:	ret    
  41812f:	nop
  418130:	movsxd rcx,DWORD PTR [rsp+0x18]
  418135:	mov    rsi,0x42ed20
  41813c:	mov    rdx,rcx
  41813f:	add    r8,r10
  418142:	shl    rcx,0x4
  418146:	inc    edx
  418148:	mov    QWORD PTR [rsp+0x10],r8
  41814d:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  418152:	mov    QWORD PTR [rsp+rcx*1+0x28],r10
  418157:	mov    DWORD PTR [rsp+0x18],edx
  41815b:	jmp    4180cc <flatcc_builder_create_table@@Base+0x10c>
  418160:	mov    WORD PTR [rbx+0xe8],cx
  418167:	jmp    41801a <flatcc_builder_create_table@@Base+0x5a>
  41816c:	lea    rcx,[rip+0x16afd]        # 42ec70 <_IO_stdin_used@@Base+0x3c70>
  418173:	mov    edx,0x287
  418178:	lea    rsi,[rip+0x160c1]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  41817f:	lea    rdi,[rip+0x16451]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  418186:	call   4061b0 <__assert_fail@plt>
  41818b:	lea    rcx,[rip+0x1687e]        # 42ea10 <_IO_stdin_used@@Base+0x3a10>
  418192:	mov    edx,0x4db
  418197:	lea    rsi,[rip+0x160a2]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  41819e:	lea    rdi,[rip+0x16499]        # 42e63e <_IO_stdin_used@@Base+0x363e>
  4181a5:	call   4061b0 <__assert_fail@plt>
  4181aa:	call   415f10 <flatcc_builder_default_alloc@@Base+0x2d0>
  4181af:	lea    rcx,[rip+0x1685a]        # 42ea10 <_IO_stdin_used@@Base+0x3a10>
  4181b6:	mov    edx,0x4d5
  4181bb:	lea    rsi,[rip+0x1607e]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  4181c2:	lea    rdi,[rip+0x16463]        # 42e62c <_IO_stdin_used@@Base+0x362c>
  4181c9:	call   4061b0 <__assert_fail@plt>
  4181ce:	call   4061a0 <__stack_chk_fail@plt>
  4181d3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4181de:	xchg   ax,ax

00000000004181e0 <flatcc_builder_check_required_field@@Base>:
  4181e0:	endbr64 
  4181e4:	mov    rax,QWORD PTR [rdi+0x30]
  4181e8:	cmp    WORD PTR [rax+0xe],0x3
  4181ed:	jne    41820a <flatcc_builder_check_required_field@@Base+0x2a>
  4181ef:	xor    eax,eax
  4181f1:	cmp    WORD PTR [rdi+0x10],si
  4181f5:	jbe    418209 <flatcc_builder_check_required_field@@Base+0x29>
  4181f7:	mov    rax,QWORD PTR [rdi+0x8]
  4181fb:	movzx  edx,si
  4181fe:	cmp    WORD PTR [rax+rdx*2],0x0
  418203:	setne  al
  418206:	movzx  eax,al
  418209:	ret    
  41820a:	push   rax
  41820b:	lea    rcx,[rip+0x167ce]        # 42e9e0 <_IO_stdin_used@@Base+0x39e0>
  418212:	mov    edx,0x4f8
  418217:	lea    rsi,[rip+0x16022]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  41821e:	lea    rdi,[rip+0x16263]        # 42e488 <_IO_stdin_used@@Base+0x3488>
  418225:	call   4061b0 <__assert_fail@plt>
  41822a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000418230 <flatcc_builder_check_union_field@@Base>:
  418230:	endbr64 
  418234:	mov    rax,QWORD PTR [rdi+0x30]
  418238:	cmp    WORD PTR [rax+0xe],0x3
  41823d:	jne    418299 <flatcc_builder_check_union_field@@Base+0x69>
  41823f:	xor    eax,eax
  418241:	test   si,si
  418244:	je     418276 <flatcc_builder_check_union_field@@Base+0x46>
  418246:	cmp    WORD PTR [rdi+0x10],si
  41824a:	jbe    418276 <flatcc_builder_check_union_field@@Base+0x46>
  41824c:	mov    rcx,QWORD PTR [rdi+0x8]
  418250:	movzx  edx,si
  418253:	movzx  eax,WORD PTR [rcx+rdx*2-0x2]
  418258:	movzx  ecx,WORD PTR [rcx+rdx*2]
  41825c:	test   ax,ax
  41825f:	je     418290 <flatcc_builder_check_union_field@@Base+0x60>
  418261:	mov    rsi,QWORD PTR [rdi+0x18]
  418265:	movzx  edx,ax
  418268:	xor    eax,eax
  41826a:	test   cx,cx
  41826d:	sete   al
  418270:	cmp    BYTE PTR [rsi+rdx*1],0x0
  418274:	jne    418280 <flatcc_builder_check_union_field@@Base+0x50>
  418276:	ret    
  418277:	nop    WORD PTR [rax+rax*1+0x0]
  418280:	xor    eax,eax
  418282:	test   cx,cx
  418285:	setne  al
  418288:	ret    
  418289:	nop    DWORD PTR [rax+0x0]
  418290:	xor    eax,eax
  418292:	test   cx,cx
  418295:	sete   al
  418298:	ret    
  418299:	push   rax
  41829a:	lea    rcx,[rip+0x166ff]        # 42e9a0 <_IO_stdin_used@@Base+0x39a0>
  4182a1:	mov    edx,0x4ff
  4182a6:	lea    rsi,[rip+0x15f93]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  4182ad:	lea    rdi,[rip+0x161d4]        # 42e488 <_IO_stdin_used@@Base+0x3488>
  4182b4:	call   4061b0 <__assert_fail@plt>
  4182b9:	nop    DWORD PTR [rax+0x0]

00000000004182c0 <flatcc_builder_check_required@@Base>:
  4182c0:	endbr64 
  4182c4:	mov    rax,QWORD PTR [rdi+0x30]
  4182c8:	cmp    WORD PTR [rax+0xe],0x3
  4182cd:	jne    418323 <flatcc_builder_check_required@@Base+0x63>
  4182cf:	movzx  ecx,WORD PTR [rdi+0x10]
  4182d3:	xor    eax,eax
  4182d5:	cmp    ecx,edx
  4182d7:	jl     418322 <flatcc_builder_check_required@@Base+0x62>
  4182d9:	test   edx,edx
  4182db:	jle    418313 <flatcc_builder_check_required@@Base+0x53>
  4182dd:	mov    rcx,QWORD PTR [rdi+0x8]
  4182e1:	movzx  edi,WORD PTR [rsi]
  4182e4:	cmp    WORD PTR [rcx+rdi*2],0x0
  4182e9:	je     418322 <flatcc_builder_check_required@@Base+0x62>
  4182eb:	add    rsi,0x2
  4182ef:	lea    eax,[rdx-0x1]
  4182f2:	lea    rdx,[rsi+rax*2]
  4182f6:	jmp    41830e <flatcc_builder_check_required@@Base+0x4e>
  4182f8:	nop    DWORD PTR [rax+rax*1+0x0]
  418300:	movzx  eax,WORD PTR [rsi]
  418303:	add    rsi,0x2
  418307:	cmp    WORD PTR [rcx+rax*2],0x0
  41830c:	je     418320 <flatcc_builder_check_required@@Base+0x60>
  41830e:	cmp    rsi,rdx
  418311:	jne    418300 <flatcc_builder_check_required@@Base+0x40>
  418313:	mov    eax,0x1
  418318:	ret    
  418319:	nop    DWORD PTR [rax+0x0]
  418320:	xor    eax,eax
  418322:	ret    
  418323:	push   rax
  418324:	lea    rcx,[rip+0x16645]        # 42e970 <_IO_stdin_used@@Base+0x3970>
  41832b:	mov    edx,0x511
  418330:	lea    rsi,[rip+0x15f09]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  418337:	lea    rdi,[rip+0x1614a]        # 42e488 <_IO_stdin_used@@Base+0x3488>
  41833e:	call   4061b0 <__assert_fail@plt>
  418343:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41834e:	xchg   ax,ax

0000000000418350 <flatcc_builder_end_table@@Base>:
  418350:	endbr64 
  418354:	push   r13
  418356:	push   r12
  418358:	push   rbp
  418359:	push   rbx
  41835a:	sub    rsp,0x8
  41835e:	mov    rax,QWORD PTR [rdi+0x30]
  418362:	cmp    WORD PTR [rax+0xe],0x3
  418367:	jne    4184bd <flatcc_builder_end_table@@Base+0x16d>
  41836d:	movzx  ebp,WORD PTR [rdi+0x10]
  418371:	movzx  eax,WORD PTR [rdi+0x20]
  418375:	lea    ebp,[rbp+rbp*1+0x4]
  418379:	movzx  ecx,bp
  41837c:	xor    ecx,DWORD PTR [rdi+0x14]
  41837f:	mov    rdx,QWORD PTR [rdi+0x8]
  418383:	imul   ecx,ecx,0x9e3779b1
  418389:	add    eax,0x4
  41838c:	mov    WORD PTR [rdx-0x2],ax
  418390:	movzx  eax,ax
  418393:	xor    ecx,eax
  418395:	imul   ecx,ecx,0x9e3779b1
  41839b:	mov    WORD PTR [rdx-0x4],bp
  41839f:	lea    r12,[rdx-0x4]
  4183a3:	mov    DWORD PTR [rdi+0x14],ecx
  4183a6:	movzx  edx,bp
  4183a9:	mov    rsi,r12
  4183ac:	mov    rbx,rdi
  4183af:	call   417c60 <flatcc_builder_create_cached_vtable@@Base>
  4183b4:	mov    r13d,eax
  4183b7:	test   eax,eax
  4183b9:	jne    4183d0 <flatcc_builder_end_table@@Base+0x80>
  4183bb:	add    rsp,0x8
  4183bf:	pop    rbx
  4183c0:	xor    ebp,ebp
  4183c2:	mov    eax,ebp
  4183c4:	pop    rbp
  4183c5:	pop    r12
  4183c7:	pop    r13
  4183c9:	ret    
  4183ca:	nop    WORD PTR [rax+rax*1+0x0]
  4183d0:	movzx  edx,bp
  4183d3:	xor    esi,esi
  4183d5:	mov    rdi,r12
  4183d8:	call   4061c0 <memset@plt>
  4183dd:	mov    rax,QWORD PTR [rbx+0x30]
  4183e1:	sub    rsp,0x8
  4183e5:	mov    r8d,DWORD PTR [rax+0x14]
  4183e9:	mov    r9,QWORD PTR [rbx]
  4183ec:	add    r8,QWORD PTR [rbx+0x88]
  4183f3:	mov    edx,DWORD PTR [rbx+0x20]
  4183f6:	movzx  ecx,WORD PTR [rbx+0xea]
  4183fd:	mov    rsi,QWORD PTR [rbx+0x18]
  418401:	push   r13
  418403:	sub    r9,r8
  418406:	sar    r9,1
  418409:	mov    rdi,rbx
  41840c:	call   417fc0 <flatcc_builder_create_table@@Base>
  418411:	mov    ebp,eax
  418413:	pop    rax
  418414:	pop    rdx
  418415:	test   ebp,ebp
  418417:	je     4183bb <flatcc_builder_end_table@@Base+0x6b>
  418419:	mov    rax,QWORD PTR [rbx+0x30]
  41841d:	mov    rdi,QWORD PTR [rbx+0x18]
  418421:	mov    edx,DWORD PTR [rax+0x18]
  418424:	xor    esi,esi
  418426:	mov    DWORD PTR [rbx+0x14],edx
  418429:	movzx  edx,WORD PTR [rax+0x1c]
  41842d:	mov    WORD PTR [rbx+0x10],dx
  418431:	mov    edx,DWORD PTR [rax+0x10]
  418434:	mov    eax,DWORD PTR [rax+0x14]
  418437:	add    rdx,QWORD PTR [rbx+0x58]
  41843b:	add    rax,QWORD PTR [rbx+0x88]
  418442:	mov    QWORD PTR [rbx+0x8],rdx
  418446:	mov    QWORD PTR [rbx],rax
  418449:	mov    edx,DWORD PTR [rbx+0x20]
  41844c:	call   4061c0 <memset@plt>
  418451:	mov    rax,QWORD PTR [rbx+0x30]
  418455:	mov    edi,DWORD PTR [rbx+0x70]
  418458:	mov    edx,DWORD PTR [rax+0x8]
  41845b:	mov    esi,DWORD PTR [rax]
  41845d:	mov    ecx,DWORD PTR [rax+0x4]
  418460:	mov    DWORD PTR [rbx+0x20],edx
  418463:	mov    rdx,rsi
  418466:	sub    edi,edx
  418468:	mov    DWORD PTR [rbx+0x28],esi
  41846b:	mov    edx,edi
  41846d:	add    rsi,QWORD PTR [rbx+0x68]
  418471:	cmp    ecx,edi
  418473:	cmovb  edx,ecx
  418476:	mov    QWORD PTR [rbx+0x18],rsi
  41847a:	mov    DWORD PTR [rbx+0x24],edx
  41847d:	movzx  edx,WORD PTR [rbx+0xea]
  418484:	mov    DWORD PTR [rax+0x4],ecx
  418487:	cmp    dx,WORD PTR [rbx+0xe8]
  41848e:	jbe    418497 <flatcc_builder_end_table@@Base+0x147>
  418490:	mov    WORD PTR [rbx+0xe8],dx
  418497:	movzx  edx,WORD PTR [rax+0xc]
  41849b:	dec    DWORD PTR [rbx+0x104]
  4184a1:	sub    rax,0x24
  4184a5:	mov    QWORD PTR [rbx+0x30],rax
  4184a9:	mov    WORD PTR [rbx+0xea],dx
  4184b0:	add    rsp,0x8
  4184b4:	mov    eax,ebp
  4184b6:	pop    rbx
  4184b7:	pop    rbp
  4184b8:	pop    r12
  4184ba:	pop    r13
  4184bc:	ret    
  4184bd:	lea    rcx,[rip+0x1648c]        # 42e950 <_IO_stdin_used@@Base+0x3950>
  4184c4:	mov    edx,0x525
  4184c9:	lea    rsi,[rip+0x15d70]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  4184d0:	lea    rdi,[rip+0x15fb1]        # 42e488 <_IO_stdin_used@@Base+0x3488>
  4184d7:	call   4061b0 <__assert_fail@plt>
  4184dc:	nop    DWORD PTR [rax+0x0]

00000000004184e0 <flatcc_builder_create_vector@@Base>:
  4184e0:	endbr64 
  4184e4:	push   rbp
  4184e5:	push   rbx
  4184e6:	sub    rsp,0xb8
  4184ed:	mov    rax,QWORD PTR fs:0x28
  4184f6:	mov    QWORD PTR [rsp+0xa8],rax
  4184fe:	xor    eax,eax
  418500:	cmp    rdx,r9
  418503:	ja     418644 <flatcc_builder_create_vector@@Base+0x164>
  418509:	cmp    r8w,0x4
  41850e:	mov    eax,0x4
  418513:	cmovb  r8d,eax
  418517:	mov    rbx,rdi
  41851a:	movzx  edi,r8w
  41851e:	cmp    r8w,WORD PTR [rbx+0xe8]
  418526:	jbe    418530 <flatcc_builder_create_vector@@Base+0x50>
  418528:	mov    WORD PTR [rbx+0xe8],r8w
  418530:	imul   ecx,edx
  418533:	mov    DWORD PTR [rsp+0xc],edx
  418537:	mov    edx,DWORD PTR [rbx+0xf0]
  41853d:	dec    edi
  41853f:	mov    eax,edx
  418541:	sub    eax,ecx
  418543:	and    eax,edi
  418545:	lea    rdi,[rsp+0xc]
  41854a:	mov    QWORD PTR [rsp+0x10],0x4
  418553:	mov    QWORD PTR [rsp+0x20],rdi
  418558:	mov    QWORD PTR [rsp+0x28],0x4
  418561:	mov    DWORD PTR [rsp+0x18],0x1
  418569:	mov    r8d,0x4
  41856f:	test   ecx,ecx
  418571:	je     41858e <flatcc_builder_create_vector@@Base+0xae>
  418573:	lea    r8,[rcx+0x4]
  418577:	mov    QWORD PTR [rsp+0x10],r8
  41857c:	mov    QWORD PTR [rsp+0x30],rsi
  418581:	mov    QWORD PTR [rsp+0x38],rcx
  418586:	mov    DWORD PTR [rsp+0x18],0x2
  41858e:	test   eax,eax
  418590:	jne    4185f0 <flatcc_builder_create_vector@@Base+0x110>
  418592:	mov    ebp,edx
  418594:	movabs rax,0x10000000f
  41859e:	sub    ebp,r8d
  4185a1:	cmp    r8,rax
  4185a4:	ja     418620 <flatcc_builder_create_vector@@Base+0x140>
  4185a6:	cmp    edx,ebp
  4185a8:	jle    418620 <flatcc_builder_create_vector@@Base+0x140>
  4185aa:	mov    rdi,QWORD PTR [rbx+0x38]
  4185ae:	mov    edx,DWORD PTR [rsp+0x18]
  4185b2:	lea    rsi,[rsp+0x20]
  4185b7:	mov    ecx,ebp
  4185b9:	call   QWORD PTR [rbx+0x48]
  4185bc:	test   eax,eax
  4185be:	jne    41863f <flatcc_builder_create_vector@@Base+0x15f>
  4185c0:	mov    DWORD PTR [rbx+0xf0],ebp
  4185c6:	mov    eax,ebp
  4185c8:	mov    rbx,QWORD PTR [rsp+0xa8]
  4185d0:	xor    rbx,QWORD PTR fs:0x28
  4185d9:	jne    418663 <flatcc_builder_create_vector@@Base+0x183>
  4185df:	add    rsp,0xb8
  4185e6:	pop    rbx
  4185e7:	pop    rbp
  4185e8:	ret    
  4185e9:	nop    DWORD PTR [rax+0x0]
  4185f0:	movsxd rsi,DWORD PTR [rsp+0x18]
  4185f5:	mov    rdi,0x42ed20
  4185fc:	mov    rcx,rsi
  4185ff:	add    r8,rax
  418602:	shl    rsi,0x4
  418606:	inc    ecx
  418608:	mov    QWORD PTR [rsp+0x10],r8
  41860d:	mov    QWORD PTR [rsp+rsi*1+0x20],rdi
  418612:	mov    QWORD PTR [rsp+rsi*1+0x28],rax
  418617:	mov    DWORD PTR [rsp+0x18],ecx
  41861b:	jmp    418592 <flatcc_builder_create_vector@@Base+0xb2>
  418620:	lea    rcx,[rip+0x16649]        # 42ec70 <_IO_stdin_used@@Base+0x3c70>
  418627:	mov    edx,0x287
  41862c:	lea    rsi,[rip+0x15c0d]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  418633:	lea    rdi,[rip+0x15f9d]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  41863a:	call   4061b0 <__assert_fail@plt>
  41863f:	call   415f10 <flatcc_builder_default_alloc@@Base+0x2d0>
  418644:	lea    rcx,[rip+0x162e5]        # 42e930 <_IO_stdin_used@@Base+0x3930>
  41864b:	mov    edx,0x555
  418650:	lea    rsi,[rip+0x15be9]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  418657:	lea    rdi,[rip+0x15feb]        # 42e649 <_IO_stdin_used@@Base+0x3649>
  41865e:	call   4061b0 <__assert_fail@plt>
  418663:	call   4061a0 <__stack_chk_fail@plt>
  418668:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000418670 <flatcc_builder_end_vector@@Base>:
  418670:	endbr64 
  418674:	push   rbp
  418675:	push   rbx
  418676:	sub    rsp,0x8
  41867a:	mov    rax,QWORD PTR [rdi+0x30]
  41867e:	cmp    WORD PTR [rax+0xe],0x4
  418683:	jne    418736 <flatcc_builder_end_vector@@Base+0xc6>
  418689:	mov    ecx,DWORD PTR [rax+0x10]
  41868c:	mov    edx,DWORD PTR [rax+0x14]
  41868f:	mov    rsi,QWORD PTR [rdi+0x18]
  418693:	mov    r9d,DWORD PTR [rax+0x18]
  418697:	movzx  r8d,WORD PTR [rdi+0xea]
  41869f:	mov    rbx,rdi
  4186a2:	call   4184e0 <flatcc_builder_create_vector@@Base>
  4186a7:	mov    ebp,eax
  4186a9:	test   eax,eax
  4186ab:	jne    4186c0 <flatcc_builder_end_vector@@Base+0x50>
  4186ad:	add    rsp,0x8
  4186b1:	pop    rbx
  4186b2:	mov    eax,ebp
  4186b4:	pop    rbp
  4186b5:	ret    
  4186b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4186c0:	mov    edx,DWORD PTR [rbx+0x20]
  4186c3:	mov    rdi,QWORD PTR [rbx+0x18]
  4186c7:	xor    esi,esi
  4186c9:	call   4061c0 <memset@plt>
  4186ce:	mov    rax,QWORD PTR [rbx+0x30]
  4186d2:	mov    edi,DWORD PTR [rbx+0x70]
  4186d5:	mov    edx,DWORD PTR [rax+0x8]
  4186d8:	mov    esi,DWORD PTR [rax]
  4186da:	mov    ecx,DWORD PTR [rax+0x4]
  4186dd:	mov    DWORD PTR [rbx+0x20],edx
  4186e0:	mov    rdx,rsi
  4186e3:	sub    edi,edx
  4186e5:	mov    DWORD PTR [rbx+0x28],esi
  4186e8:	mov    edx,edi
  4186ea:	add    rsi,QWORD PTR [rbx+0x68]
  4186ee:	cmp    ecx,edi
  4186f0:	cmovb  edx,ecx
  4186f3:	mov    QWORD PTR [rbx+0x18],rsi
  4186f7:	mov    DWORD PTR [rbx+0x24],edx
  4186fa:	movzx  edx,WORD PTR [rbx+0xea]
  418701:	mov    DWORD PTR [rax+0x4],ecx
  418704:	cmp    dx,WORD PTR [rbx+0xe8]
  41870b:	jbe    418714 <flatcc_builder_end_vector@@Base+0xa4>
  41870d:	mov    WORD PTR [rbx+0xe8],dx
  418714:	movzx  edx,WORD PTR [rax+0xc]
  418718:	dec    DWORD PTR [rbx+0x104]
  41871e:	sub    rax,0x24
  418722:	mov    QWORD PTR [rbx+0x30],rax
  418726:	mov    WORD PTR [rbx+0xea],dx
  41872d:	add    rsp,0x8
  418731:	mov    eax,ebp
  418733:	pop    rbx
  418734:	pop    rbp
  418735:	ret    
  418736:	lea    rcx,[rip+0x161d3]        # 42e910 <_IO_stdin_used@@Base+0x3910>
  41873d:	mov    edx,0x578
  418742:	lea    rsi,[rip+0x15af7]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  418749:	lea    rdi,[rip+0x15bd0]        # 42e320 <_IO_stdin_used@@Base+0x3320>
  418750:	call   4061b0 <__assert_fail@plt>
  418755:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000418760 <flatcc_builder_vector_count@@Base>:
  418760:	endbr64 
  418764:	mov    rax,QWORD PTR [rdi+0x30]
  418768:	mov    eax,DWORD PTR [rax+0x14]
  41876b:	ret    
  41876c:	nop    DWORD PTR [rax+0x0]

0000000000418770 <flatcc_builder_vector_edit@@Base>:
  418770:	endbr64 
  418774:	mov    rax,QWORD PTR [rdi+0x18]
  418778:	ret    
  418779:	nop    DWORD PTR [rax+0x0]

0000000000418780 <flatcc_builder_create_offset_vector_direct@@Base>:
  418780:	endbr64 
  418784:	xor    ecx,ecx
  418786:	jmp    416090 <flatcc_builder_default_alloc@@Base+0x450>
  41878b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000418790 <flatcc_builder_end_offset_vector@@Base>:
  418790:	endbr64 
  418794:	push   rbp
  418795:	push   rbx
  418796:	sub    rsp,0x8
  41879a:	mov    rax,QWORD PTR [rdi+0x30]
  41879e:	cmp    WORD PTR [rax+0xe],0x5
  4187a3:	jne    418846 <flatcc_builder_end_offset_vector@@Base+0xb6>
  4187a9:	mov    edx,DWORD PTR [rax+0x14]
  4187ac:	mov    rsi,QWORD PTR [rdi+0x18]
  4187b0:	mov    rbx,rdi
  4187b3:	call   418780 <flatcc_builder_create_offset_vector_direct@@Base>
  4187b8:	mov    ebp,eax
  4187ba:	test   eax,eax
  4187bc:	jne    4187d0 <flatcc_builder_end_offset_vector@@Base+0x40>
  4187be:	add    rsp,0x8
  4187c2:	pop    rbx
  4187c3:	mov    eax,ebp
  4187c5:	pop    rbp
  4187c6:	ret    
  4187c7:	nop    WORD PTR [rax+rax*1+0x0]
  4187d0:	mov    edx,DWORD PTR [rbx+0x20]
  4187d3:	mov    rdi,QWORD PTR [rbx+0x18]
  4187d7:	xor    esi,esi
  4187d9:	call   4061c0 <memset@plt>
  4187de:	mov    rax,QWORD PTR [rbx+0x30]
  4187e2:	mov    edi,DWORD PTR [rbx+0x70]
  4187e5:	mov    edx,DWORD PTR [rax+0x8]
  4187e8:	mov    esi,DWORD PTR [rax]
  4187ea:	mov    ecx,DWORD PTR [rax+0x4]
  4187ed:	mov    DWORD PTR [rbx+0x20],edx
  4187f0:	mov    rdx,rsi
  4187f3:	sub    edi,edx
  4187f5:	mov    DWORD PTR [rbx+0x28],esi
  4187f8:	mov    edx,edi
  4187fa:	add    rsi,QWORD PTR [rbx+0x68]
  4187fe:	cmp    ecx,edi
  418800:	cmovb  edx,ecx
  418803:	mov    QWORD PTR [rbx+0x18],rsi
  418807:	mov    DWORD PTR [rbx+0x24],edx
  41880a:	movzx  edx,WORD PTR [rbx+0xea]
  418811:	mov    DWORD PTR [rax+0x4],ecx
  418814:	cmp    dx,WORD PTR [rbx+0xe8]
  41881b:	jbe    418824 <flatcc_builder_end_offset_vector@@Base+0x94>
  41881d:	mov    WORD PTR [rbx+0xe8],dx
  418824:	movzx  edx,WORD PTR [rax+0xc]
  418828:	dec    DWORD PTR [rbx+0x104]
  41882e:	sub    rax,0x24
  418832:	mov    QWORD PTR [rbx+0x30],rax
  418836:	mov    WORD PTR [rbx+0xea],dx
  41883d:	add    rsp,0x8
  418841:	mov    eax,ebp
  418843:	pop    rbx
  418844:	pop    rbp
  418845:	ret    
  418846:	lea    rcx,[rip+0x16073]        # 42e8c0 <_IO_stdin_used@@Base+0x38c0>
  41884d:	mov    edx,0x5c8
  418852:	lea    rsi,[rip+0x159e7]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  418859:	lea    rdi,[rip+0x15b30]        # 42e390 <_IO_stdin_used@@Base+0x3390>
  418860:	call   4061b0 <__assert_fail@plt>
  418865:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000418870 <flatcc_builder_create_offset_vector@@Base>:
  418870:	endbr64 
  418874:	push   r12
  418876:	mov    r12,rsi
  418879:	push   rbp
  41887a:	mov    rbp,rdx
  41887d:	push   rbx
  41887e:	mov    rbx,rdi
  418881:	call   417830 <flatcc_builder_start_offset_vector@@Base>
  418886:	test   eax,eax
  418888:	je     418898 <flatcc_builder_create_offset_vector@@Base+0x28>
  41888a:	pop    rbx
  41888b:	pop    rbp
  41888c:	xor    eax,eax
  41888e:	pop    r12
  418890:	ret    
  418891:	nop    DWORD PTR [rax+0x0]
  418898:	mov    rsi,rbp
  41889b:	mov    rdi,rbx
  41889e:	call   4172e0 <flatcc_builder_extend_offset_vector@@Base>
  4188a3:	test   rax,rax
  4188a6:	je     41888a <flatcc_builder_create_offset_vector@@Base+0x1a>
  4188a8:	lea    rdx,[rbp*4+0x0]
  4188b0:	mov    rsi,r12
  4188b3:	mov    rdi,rax
  4188b6:	call   406210 <memcpy@plt>
  4188bb:	mov    rdi,rbx
  4188be:	pop    rbx
  4188bf:	pop    rbp
  4188c0:	pop    r12
  4188c2:	jmp    418790 <flatcc_builder_end_offset_vector@@Base>
  4188c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004188d0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  4188d0:	endbr64 
  4188d4:	push   rbp
  4188d5:	push   rbx
  4188d6:	sub    rsp,0x8
  4188da:	mov    rax,QWORD PTR [rdi+0x30]
  4188de:	cmp    WORD PTR [rax+0xe],0x5
  4188e3:	jne    418986 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb6>
  4188e9:	mov    rcx,rsi
  4188ec:	mov    edx,DWORD PTR [rax+0x14]
  4188ef:	mov    rsi,QWORD PTR [rdi+0x18]
  4188f3:	mov    rbx,rdi
  4188f6:	call   416090 <flatcc_builder_default_alloc@@Base+0x450>
  4188fb:	mov    ebp,eax
  4188fd:	test   eax,eax
  4188ff:	jne    418910 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
  418901:	add    rsp,0x8
  418905:	pop    rbx
  418906:	mov    eax,ebp
  418908:	pop    rbp
  418909:	ret    
  41890a:	nop    WORD PTR [rax+rax*1+0x0]
  418910:	mov    edx,DWORD PTR [rbx+0x20]
  418913:	mov    rdi,QWORD PTR [rbx+0x18]
  418917:	xor    esi,esi
  418919:	call   4061c0 <memset@plt>
  41891e:	mov    rax,QWORD PTR [rbx+0x30]
  418922:	mov    edi,DWORD PTR [rbx+0x70]
  418925:	mov    edx,DWORD PTR [rax+0x8]
  418928:	mov    esi,DWORD PTR [rax]
  41892a:	mov    ecx,DWORD PTR [rax+0x4]
  41892d:	mov    DWORD PTR [rbx+0x20],edx
  418930:	mov    rdx,rsi
  418933:	sub    edi,edx
  418935:	mov    DWORD PTR [rbx+0x28],esi
  418938:	mov    edx,edi
  41893a:	add    rsi,QWORD PTR [rbx+0x68]
  41893e:	cmp    ecx,edi
  418940:	cmovb  edx,ecx
  418943:	mov    QWORD PTR [rbx+0x18],rsi
  418947:	mov    DWORD PTR [rbx+0x24],edx
  41894a:	movzx  edx,WORD PTR [rbx+0xea]
  418951:	mov    DWORD PTR [rax+0x4],ecx
  418954:	cmp    dx,WORD PTR [rbx+0xe8]
  41895b:	jbe    418964 <flatcc_builder_end_offset_vector_for_unions@@Base+0x94>
  41895d:	mov    WORD PTR [rbx+0xe8],dx
  418964:	movzx  edx,WORD PTR [rax+0xc]
  418968:	dec    DWORD PTR [rbx+0x104]
  41896e:	sub    rax,0x24
  418972:	mov    QWORD PTR [rbx+0x30],rax
  418976:	mov    WORD PTR [rbx+0xea],dx
  41897d:	add    rsp,0x8
  418981:	mov    eax,ebp
  418983:	pop    rbx
  418984:	pop    rbp
  418985:	ret    
  418986:	lea    rcx,[rip+0x15ef3]        # 42e880 <_IO_stdin_used@@Base+0x3880>
  41898d:	mov    edx,0x5d5
  418992:	lea    rsi,[rip+0x158a7]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  418999:	lea    rdi,[rip+0x159f0]        # 42e390 <_IO_stdin_used@@Base+0x3390>
  4189a0:	call   4061b0 <__assert_fail@plt>
  4189a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004189b0 <flatcc_builder_offset_vector_edit@@Base>:
  4189b0:	endbr64 
  4189b4:	mov    rax,QWORD PTR [rdi+0x18]
  4189b8:	ret    
  4189b9:	nop    DWORD PTR [rax+0x0]

00000000004189c0 <flatcc_builder_offset_vector_count@@Base>:
  4189c0:	endbr64 
  4189c4:	mov    rax,QWORD PTR [rdi+0x30]
  4189c8:	mov    eax,DWORD PTR [rax+0x14]
  4189cb:	ret    
  4189cc:	nop    DWORD PTR [rax+0x0]

00000000004189d0 <flatcc_builder_create_union_vector_direct@@Base>:
  4189d0:	endbr64 
  4189d4:	push   r13
  4189d6:	mov    r13,rcx
  4189d9:	push   r12
  4189db:	mov    r12,rsi
  4189de:	mov    rcx,r12
  4189e1:	push   rbp
  4189e2:	mov    rsi,rdx
  4189e5:	mov    rdx,r13
  4189e8:	push   rbx
  4189e9:	mov    rbp,rdi
  4189ec:	sub    rsp,0x8
  4189f0:	call   416090 <flatcc_builder_default_alloc@@Base+0x450>
  4189f5:	test   eax,eax
  4189f7:	jne    418a10 <flatcc_builder_create_union_vector_direct@@Base+0x40>
  4189f9:	add    rsp,0x8
  4189fd:	pop    rbx
  4189fe:	pop    rbp
  4189ff:	pop    r12
  418a01:	xor    eax,eax
  418a03:	pop    r13
  418a05:	ret    
  418a06:	nop    WORD PTR cs:[rax+rax*1+0x0]
  418a10:	mov    rdx,r13
  418a13:	mov    rsi,r12
  418a16:	mov    rdi,rbp
  418a19:	mov    r9d,0xffffffff
  418a1f:	mov    r8d,0x1
  418a25:	mov    ecx,0x1
  418a2a:	mov    ebx,eax
  418a2c:	call   4184e0 <flatcc_builder_create_vector@@Base>
  418a31:	mov    edx,eax
  418a33:	mov    rsi,rbx
  418a36:	shl    rsi,0x20
  418a3a:	mov    rax,rdx
  418a3d:	or     rax,rsi
  418a40:	test   edx,edx
  418a42:	mov    rdx,rax
  418a45:	mov    rax,rsi
  418a48:	cmovne rax,rdx
  418a4c:	add    rsp,0x8
  418a50:	pop    rbx
  418a51:	pop    rbp
  418a52:	pop    r12
  418a54:	pop    r13
  418a56:	ret    
  418a57:	nop    WORD PTR [rax+rax*1+0x0]

0000000000418a60 <flatcc_builder_create_union_vector@@Base>:
  418a60:	endbr64 
  418a64:	push   r13
  418a66:	push   r12
  418a68:	mov    r12,rdx
  418a6b:	push   rbp
  418a6c:	mov    rbp,rsi
  418a6f:	push   rbx
  418a70:	mov    rbx,rdi
  418a73:	sub    rsp,0x8
  418a77:	call   417830 <flatcc_builder_start_offset_vector@@Base>
  418a7c:	test   eax,eax
  418a7e:	je     418a90 <flatcc_builder_create_union_vector@@Base+0x30>
  418a80:	add    rsp,0x8
  418a84:	pop    rbx
  418a85:	pop    rbp
  418a86:	pop    r12
  418a88:	xor    eax,eax
  418a8a:	pop    r13
  418a8c:	ret    
  418a8d:	nop    DWORD PTR [rax]
  418a90:	mov    rsi,r12
  418a93:	mov    rdi,rbx
  418a96:	call   4172e0 <flatcc_builder_extend_offset_vector@@Base>
  418a9b:	test   rax,rax
  418a9e:	je     418a80 <flatcc_builder_create_union_vector@@Base+0x20>
  418aa0:	mov    r13d,DWORD PTR [rbx+0x20]
  418aa4:	mov    rax,r13
  418aa7:	add    eax,r12d
  418aaa:	mov    DWORD PTR [rbx+0x20],eax
  418aad:	cmp    eax,DWORD PTR [rbx+0x24]
  418ab0:	jae    418b80 <flatcc_builder_create_union_vector@@Base+0x120>
  418ab6:	add    r13,QWORD PTR [rbx+0x18]
  418aba:	je     418a80 <flatcc_builder_create_union_vector@@Base+0x20>
  418abc:	mov    rdi,rbx
  418abf:	call   4189b0 <flatcc_builder_offset_vector_edit@@Base>
  418ac4:	test   r12,r12
  418ac7:	je     418ae9 <flatcc_builder_create_union_vector@@Base+0x89>
  418ac9:	xor    edi,edi
  418acb:	nop    DWORD PTR [rax+rax*1+0x0]
  418ad0:	movzx  ecx,BYTE PTR [rbp+rdi*8+0x0]
  418ad5:	mov    BYTE PTR [r13+rdi*1+0x0],cl
  418ada:	mov    ecx,DWORD PTR [rbp+rdi*8+0x4]
  418ade:	mov    DWORD PTR [rax+rdi*4],ecx
  418ae1:	inc    rdi
  418ae4:	cmp    r12,rdi
  418ae7:	jne    418ad0 <flatcc_builder_create_union_vector@@Base+0x70>
  418ae9:	mov    rcx,r12
  418aec:	mov    rdx,rax
  418aef:	mov    rsi,r13
  418af2:	mov    rdi,rbx
  418af5:	call   4189d0 <flatcc_builder_create_union_vector_direct@@Base>
  418afa:	mov    edx,DWORD PTR [rbx+0x20]
  418afd:	mov    rdi,QWORD PTR [rbx+0x18]
  418b01:	xor    esi,esi
  418b03:	mov    rbp,rax
  418b06:	call   4061c0 <memset@plt>
  418b0b:	mov    rax,QWORD PTR [rbx+0x30]
  418b0f:	mov    edx,DWORD PTR [rax+0x8]
  418b12:	mov    esi,DWORD PTR [rax]
  418b14:	mov    DWORD PTR [rbx+0x20],edx
  418b17:	mov    DWORD PTR [rbx+0x28],esi
  418b1a:	mov    rdx,rsi
  418b1d:	add    rsi,QWORD PTR [rbx+0x68]
  418b21:	mov    ecx,DWORD PTR [rax+0x4]
  418b24:	mov    QWORD PTR [rbx+0x18],rsi
  418b28:	mov    esi,DWORD PTR [rbx+0x70]
  418b2b:	sub    esi,edx
  418b2d:	mov    edx,esi
  418b2f:	cmp    ecx,esi
  418b31:	cmovb  edx,ecx
  418b34:	mov    DWORD PTR [rbx+0x24],edx
  418b37:	movzx  edx,WORD PTR [rbx+0xea]
  418b3e:	mov    DWORD PTR [rax+0x4],ecx
  418b41:	cmp    dx,WORD PTR [rbx+0xe8]
  418b48:	jbe    418b51 <flatcc_builder_create_union_vector@@Base+0xf1>
  418b4a:	mov    WORD PTR [rbx+0xe8],dx
  418b51:	movzx  edx,WORD PTR [rax+0xc]
  418b55:	sub    rax,0x24
  418b59:	mov    QWORD PTR [rbx+0x30],rax
  418b5d:	mov    WORD PTR [rbx+0xea],dx
  418b64:	dec    DWORD PTR [rbx+0x104]
  418b6a:	add    rsp,0x8
  418b6e:	pop    rbx
  418b6f:	mov    rax,rbp
  418b72:	pop    rbp
  418b73:	pop    r12
  418b75:	pop    r13
  418b77:	ret    
  418b78:	nop    DWORD PTR [rax+rax*1+0x0]
  418b80:	lea    esi,[rax+0x1]
  418b83:	mov    edx,0xfffffffc
  418b88:	mov    rdi,rbx
  418b8b:	call   415be0 <union_vector_tests@@Base+0x110>
  418b90:	test   eax,eax
  418b92:	je     418ab6 <flatcc_builder_create_union_vector@@Base+0x56>
  418b98:	jmp    418a80 <flatcc_builder_create_union_vector@@Base+0x20>
  418b9d:	nop    DWORD PTR [rax]

0000000000418ba0 <flatcc_builder_start_union_vector@@Base>:
  418ba0:	endbr64 
  418ba4:	push   rbx
  418ba5:	mov    esi,0x4
  418baa:	mov    rbx,rdi
  418bad:	call   415f70 <flatcc_builder_default_alloc@@Base+0x330>
  418bb2:	test   eax,eax
  418bb4:	jne    418bf0 <flatcc_builder_start_union_vector@@Base+0x50>
  418bb6:	mov    rcx,QWORD PTR [rbx+0x30]
  418bba:	xor    edx,edx
  418bbc:	mov    QWORD PTR [rcx+0xe],0x80007
  418bc4:	mov    WORD PTR [rcx+0x16],dx
  418bc8:	mov    edx,DWORD PTR [rbx+0x28]
  418bcb:	mov    rsi,rdx
  418bce:	add    rdx,QWORD PTR [rbx+0x68]
  418bd2:	mov    QWORD PTR [rbx+0x18],rdx
  418bd6:	mov    edx,DWORD PTR [rbx+0x70]
  418bd9:	sub    edx,esi
  418bdb:	mov    esi,0xfffffffc
  418be0:	cmp    edx,esi
  418be2:	cmova  edx,esi
  418be5:	mov    DWORD PTR [rbx+0x24],edx
  418be8:	mov    DWORD PTR [rcx+0x4],esi
  418beb:	pop    rbx
  418bec:	ret    
  418bed:	nop    DWORD PTR [rax]
  418bf0:	mov    eax,0xffffffff
  418bf5:	pop    rbx
  418bf6:	ret    
  418bf7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000418c00 <flatcc_builder_union_vector_edit@@Base>:
  418c00:	endbr64 
  418c04:	mov    rax,QWORD PTR [rdi+0x18]
  418c08:	ret    
  418c09:	nop    DWORD PTR [rax+0x0]

0000000000418c10 <flatcc_builder_union_vector_count@@Base>:
  418c10:	endbr64 
  418c14:	mov    rax,QWORD PTR [rdi+0x30]
  418c18:	mov    eax,DWORD PTR [rax+0x14]
  418c1b:	ret    
  418c1c:	nop    DWORD PTR [rax+0x0]

0000000000418c20 <flatcc_builder_end_union_vector@@Base>:
  418c20:	endbr64 
  418c24:	push   r13
  418c26:	push   r12
  418c28:	push   rbp
  418c29:	push   rbx
  418c2a:	sub    rsp,0x8
  418c2e:	mov    rax,QWORD PTR [rdi+0x30]
  418c32:	cmp    WORD PTR [rax+0xe],0x7
  418c37:	jne    418d5d <flatcc_builder_end_union_vector@@Base+0x13d>
  418c3d:	mov    rbx,rdi
  418c40:	call   418c10 <flatcc_builder_union_vector_count@@Base>
  418c45:	mov    ebp,DWORD PTR [rbx+0x20]
  418c48:	mov    r12,rax
  418c4b:	lea    eax,[rax+rax*4]
  418c4e:	add    eax,ebp
  418c50:	mov    DWORD PTR [rbx+0x20],eax
  418c53:	cmp    eax,DWORD PTR [rbx+0x24]
  418c56:	jae    418d38 <flatcc_builder_end_union_vector@@Base+0x118>
  418c5c:	add    rbp,QWORD PTR [rbx+0x18]
  418c60:	je     418d50 <flatcc_builder_end_union_vector@@Base+0x130>
  418c66:	mov    rdi,rbx
  418c69:	lea    r13,[rbp+r12*4+0x0]
  418c6e:	call   418c00 <flatcc_builder_union_vector_edit@@Base>
  418c73:	test   r12,r12
  418c76:	je     418c9c <flatcc_builder_end_union_vector@@Base+0x7c>
  418c78:	xor    edi,edi
  418c7a:	nop    WORD PTR [rax+rax*1+0x0]
  418c80:	movzx  r8d,BYTE PTR [rax+rdi*8]
  418c85:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  418c8a:	mov    r8d,DWORD PTR [rax+rdi*8+0x4]
  418c8f:	mov    DWORD PTR [rbp+rdi*4+0x0],r8d
  418c94:	inc    rdi
  418c97:	cmp    r12,rdi
  418c9a:	jne    418c80 <flatcc_builder_end_union_vector@@Base+0x60>
  418c9c:	mov    rcx,r12
  418c9f:	mov    rdx,rbp
  418ca2:	mov    rsi,r13
  418ca5:	mov    rdi,rbx
  418ca8:	call   4189d0 <flatcc_builder_create_union_vector_direct@@Base>
  418cad:	mov    edx,DWORD PTR [rbx+0x20]
  418cb0:	mov    rdi,QWORD PTR [rbx+0x18]
  418cb4:	xor    esi,esi
  418cb6:	mov    rbp,rax
  418cb9:	call   4061c0 <memset@plt>
  418cbe:	mov    rdx,QWORD PTR [rbx+0x30]
  418cc2:	mov    esi,DWORD PTR [rdx]
  418cc4:	mov    eax,DWORD PTR [rdx+0x8]
  418cc7:	mov    rcx,rsi
  418cca:	mov    DWORD PTR [rbx+0x28],esi
  418ccd:	add    rsi,QWORD PTR [rbx+0x68]
  418cd1:	mov    DWORD PTR [rbx+0x20],eax
  418cd4:	mov    eax,DWORD PTR [rdx+0x4]
  418cd7:	mov    QWORD PTR [rbx+0x18],rsi
  418cdb:	mov    esi,DWORD PTR [rbx+0x70]
  418cde:	sub    esi,ecx
  418ce0:	cmp    eax,esi
  418ce2:	mov    ecx,esi
  418ce4:	cmovb  ecx,eax
  418ce7:	mov    DWORD PTR [rbx+0x24],ecx
  418cea:	mov    DWORD PTR [rdx+0x4],eax
  418ced:	movzx  eax,WORD PTR [rbx+0xea]
  418cf4:	cmp    ax,WORD PTR [rbx+0xe8]
  418cfb:	ja     418d28 <flatcc_builder_end_union_vector@@Base+0x108>
  418cfd:	movzx  eax,WORD PTR [rdx+0xc]
  418d01:	dec    DWORD PTR [rbx+0x104]
  418d07:	sub    rdx,0x24
  418d0b:	mov    WORD PTR [rbx+0xea],ax
  418d12:	mov    QWORD PTR [rbx+0x30],rdx
  418d16:	add    rsp,0x8
  418d1a:	mov    rax,rbp
  418d1d:	pop    rbx
  418d1e:	pop    rbp
  418d1f:	pop    r12
  418d21:	pop    r13
  418d23:	ret    
  418d24:	nop    DWORD PTR [rax+0x0]
  418d28:	mov    WORD PTR [rbx+0xe8],ax
  418d2f:	jmp    418cfd <flatcc_builder_end_union_vector@@Base+0xdd>
  418d31:	nop    DWORD PTR [rax+0x0]
  418d38:	lea    esi,[rax+0x1]
  418d3b:	mov    edx,0xfffffffc
  418d40:	mov    rdi,rbx
  418d43:	call   415be0 <union_vector_tests@@Base+0x110>
  418d48:	test   eax,eax
  418d4a:	je     418c5c <flatcc_builder_end_union_vector@@Base+0x3c>
  418d50:	add    rsp,0x8
  418d54:	pop    rbx
  418d55:	pop    rbp
  418d56:	pop    r12
  418d58:	xor    eax,eax
  418d5a:	pop    r13
  418d5c:	ret    
  418d5d:	lea    rcx,[rip+0x15a9c]        # 42e800 <_IO_stdin_used@@Base+0x3800>
  418d64:	mov    edx,0x651
  418d69:	lea    rsi,[rip+0x154d0]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  418d70:	lea    rdi,[rip+0x15741]        # 42e4b8 <_IO_stdin_used@@Base+0x34b8>
  418d77:	call   4061b0 <__assert_fail@plt>
  418d7c:	nop    DWORD PTR [rax+0x0]

0000000000418d80 <flatcc_builder_extend_union_vector@@Base>:
  418d80:	endbr64 
  418d84:	push   rbp
  418d85:	mov    edx,esi
  418d87:	push   rbx
  418d88:	sub    rsp,0x8
  418d8c:	mov    rax,QWORD PTR [rdi+0x30]
  418d90:	add    edx,DWORD PTR [rax+0x14]
  418d93:	jb     418dd5 <flatcc_builder_extend_union_vector@@Base+0x55>
  418d95:	cmp    edx,0x1fffffff
  418d9b:	ja     418dd5 <flatcc_builder_extend_union_vector@@Base+0x55>
  418d9d:	mov    ebp,DWORD PTR [rdi+0x20]
  418da0:	mov    DWORD PTR [rax+0x14],edx
  418da3:	lea    eax,[rbp+rsi*8+0x0]
  418da7:	mov    rbx,rdi
  418daa:	mov    DWORD PTR [rdi+0x20],eax
  418dad:	cmp    eax,DWORD PTR [rdi+0x24]
  418db0:	jae    418dc0 <flatcc_builder_extend_union_vector@@Base+0x40>
  418db2:	mov    rax,QWORD PTR [rbx+0x18]
  418db6:	add    rax,rbp
  418db9:	add    rsp,0x8
  418dbd:	pop    rbx
  418dbe:	pop    rbp
  418dbf:	ret    
  418dc0:	lea    esi,[rax+0x1]
  418dc3:	mov    edx,0xfffffffc
  418dc8:	call   415be0 <union_vector_tests@@Base+0x110>
  418dcd:	test   eax,eax
  418dcf:	je     418db2 <flatcc_builder_extend_union_vector@@Base+0x32>
  418dd1:	xor    eax,eax
  418dd3:	jmp    418db9 <flatcc_builder_extend_union_vector@@Base+0x39>
  418dd5:	call   415f40 <flatcc_builder_default_alloc@@Base+0x300>
  418dda:	nop    WORD PTR [rax+rax*1+0x0]

0000000000418de0 <flatcc_builder_truncate_union_vector@@Base>:
  418de0:	endbr64 
  418de4:	sub    rsp,0x8
  418de8:	mov    rax,QWORD PTR [rdi+0x30]
  418dec:	cmp    WORD PTR [rax+0xe],0x7
  418df1:	jne    418e22 <flatcc_builder_truncate_union_vector@@Base+0x42>
  418df3:	mov    edx,DWORD PTR [rax+0x14]
  418df6:	cmp    edx,esi
  418df8:	jb     418e41 <flatcc_builder_truncate_union_vector@@Base+0x61>
  418dfa:	sub    edx,esi
  418dfc:	mov    DWORD PTR [rax+0x14],edx
  418dff:	imul   esi,DWORD PTR [rax+0x10]
  418e03:	mov    eax,DWORD PTR [rdi+0x20]
  418e06:	mov    edx,esi
  418e08:	sub    eax,esi
  418e0a:	mov    DWORD PTR [rdi+0x20],eax
  418e0d:	add    rax,QWORD PTR [rdi+0x18]
  418e11:	mov    rdi,rax
  418e14:	xor    esi,esi
  418e16:	call   4061c0 <memset@plt>
  418e1b:	xor    eax,eax
  418e1d:	add    rsp,0x8
  418e21:	ret    
  418e22:	lea    rcx,[rip+0x15997]        # 42e7c0 <_IO_stdin_used@@Base+0x37c0>
  418e29:	mov    edx,0x681
  418e2e:	lea    rsi,[rip+0x1540b]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  418e35:	lea    rdi,[rip+0x1567c]        # 42e4b8 <_IO_stdin_used@@Base+0x34b8>
  418e3c:	call   4061b0 <__assert_fail@plt>
  418e41:	lea    rcx,[rip+0x15978]        # 42e7c0 <_IO_stdin_used@@Base+0x37c0>
  418e48:	mov    edx,0x682
  418e4d:	lea    rsi,[rip+0x153ec]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  418e54:	lea    rdi,[rip+0x155c5]        # 42e420 <_IO_stdin_used@@Base+0x3420>
  418e5b:	call   4061b0 <__assert_fail@plt>

0000000000418e60 <flatcc_builder_union_vector_push@@Base>:
  418e60:	endbr64 
  418e64:	push   r12
  418e66:	push   rbp
  418e67:	push   rbx
  418e68:	mov    rdx,QWORD PTR [rdi+0x30]
  418e6c:	cmp    WORD PTR [rdx+0xe],0x7
  418e71:	jne    418ec8 <flatcc_builder_union_vector_push@@Base+0x68>
  418e73:	mov    eax,DWORD PTR [rdx+0x14]
  418e76:	cmp    eax,0x1fffffff
  418e7b:	je     418ec1 <flatcc_builder_union_vector_push@@Base+0x61>
  418e7d:	mov    ebp,DWORD PTR [rdi+0x20]
  418e80:	inc    eax
  418e82:	mov    DWORD PTR [rdx+0x14],eax
  418e85:	lea    edx,[rbp+0x8]
  418e88:	mov    rbx,rdi
  418e8b:	mov    r12,rsi
  418e8e:	mov    DWORD PTR [rdi+0x20],edx
  418e91:	cmp    edx,DWORD PTR [rdi+0x24]
  418e94:	jae    418eb0 <flatcc_builder_union_vector_push@@Base+0x50>
  418e96:	mov    rax,rbp
  418e99:	add    rax,QWORD PTR [rbx+0x18]
  418e9d:	je     418ea2 <flatcc_builder_union_vector_push@@Base+0x42>
  418e9f:	mov    QWORD PTR [rax],r12
  418ea2:	pop    rbx
  418ea3:	pop    rbp
  418ea4:	pop    r12
  418ea6:	ret    
  418ea7:	nop    WORD PTR [rax+rax*1+0x0]
  418eb0:	lea    esi,[rbp+0x9]
  418eb3:	mov    edx,0xfffffffc
  418eb8:	call   415be0 <union_vector_tests@@Base+0x110>
  418ebd:	test   eax,eax
  418ebf:	je     418e96 <flatcc_builder_union_vector_push@@Base+0x36>
  418ec1:	pop    rbx
  418ec2:	pop    rbp
  418ec3:	xor    eax,eax
  418ec5:	pop    r12
  418ec7:	ret    
  418ec8:	lea    rcx,[rip+0x158b1]        # 42e780 <_IO_stdin_used@@Base+0x3780>
  418ecf:	mov    edx,0x68d
  418ed4:	lea    rsi,[rip+0x15365]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  418edb:	lea    rdi,[rip+0x155d6]        # 42e4b8 <_IO_stdin_used@@Base+0x34b8>
  418ee2:	call   4061b0 <__assert_fail@plt>
  418ee7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000418ef0 <flatcc_builder_append_union_vector@@Base>:
  418ef0:	endbr64 
  418ef4:	push   r13
  418ef6:	push   r12
  418ef8:	push   rbp
  418ef9:	push   rbx
  418efa:	sub    rsp,0x8
  418efe:	mov    rax,QWORD PTR [rdi+0x30]
  418f02:	cmp    WORD PTR [rax+0xe],0x7
  418f07:	jne    418f76 <flatcc_builder_append_union_vector@@Base+0x86>
  418f09:	mov    ecx,edx
  418f0b:	add    ecx,DWORD PTR [rax+0x14]
  418f0e:	jb     418f95 <flatcc_builder_append_union_vector@@Base+0xa5>
  418f14:	cmp    ecx,0x1fffffff
  418f1a:	ja     418f95 <flatcc_builder_append_union_vector@@Base+0xa5>
  418f1c:	mov    r12d,DWORD PTR [rdi+0x20]
  418f20:	lea    ebx,[rdx*8+0x0]
  418f27:	mov    rdx,r12
  418f2a:	add    edx,ebx
  418f2c:	mov    DWORD PTR [rax+0x14],ecx
  418f2f:	mov    rbp,rdi
  418f32:	mov    r13,rsi
  418f35:	mov    DWORD PTR [rdi+0x20],edx
  418f38:	cmp    edx,DWORD PTR [rdi+0x24]
  418f3b:	jae    418f60 <flatcc_builder_append_union_vector@@Base+0x70>
  418f3d:	add    r12,QWORD PTR [rbp+0x18]
  418f41:	je     418f50 <flatcc_builder_append_union_vector@@Base+0x60>
  418f43:	mov    edx,ebx
  418f45:	mov    rsi,r13
  418f48:	mov    rdi,r12
  418f4b:	call   406210 <memcpy@plt>
  418f50:	add    rsp,0x8
  418f54:	pop    rbx
  418f55:	pop    rbp
  418f56:	mov    rax,r12
  418f59:	pop    r12
  418f5b:	pop    r13
  418f5d:	ret    
  418f5e:	xchg   ax,ax
  418f60:	lea    esi,[rdx+0x1]
  418f63:	mov    edx,0xfffffffc
  418f68:	call   415be0 <union_vector_tests@@Base+0x110>
  418f6d:	test   eax,eax
  418f6f:	je     418f3d <flatcc_builder_append_union_vector@@Base+0x4d>
  418f71:	xor    r12d,r12d
  418f74:	jmp    418f50 <flatcc_builder_append_union_vector@@Base+0x60>
  418f76:	lea    rcx,[rip+0x157c3]        # 42e740 <_IO_stdin_used@@Base+0x3740>
  418f7d:	mov    edx,0x69c
  418f82:	lea    rsi,[rip+0x152b7]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  418f89:	lea    rdi,[rip+0x15528]        # 42e4b8 <_IO_stdin_used@@Base+0x34b8>
  418f90:	call   4061b0 <__assert_fail@plt>
  418f95:	call   415f40 <flatcc_builder_default_alloc@@Base+0x300>
  418f9a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000418fa0 <flatcc_builder_create_string@@Base>:
  418fa0:	endbr64 
  418fa4:	push   rbp
  418fa5:	push   rbx
  418fa6:	sub    rsp,0xb8
  418fad:	mov    rax,QWORD PTR fs:0x28
  418fb6:	mov    QWORD PTR [rsp+0xa8],rax
  418fbe:	xor    eax,eax
  418fc0:	mov    eax,0xffffffff
  418fc5:	cmp    rdx,rax
  418fc8:	ja     419090 <flatcc_builder_create_string@@Base+0xf0>
  418fce:	mov    rbx,rdi
  418fd1:	mov    edi,DWORD PTR [rdi+0xf0]
  418fd7:	lea    rcx,[rsp+0xc]
  418fdc:	lea    eax,[rdi-0x1]
  418fdf:	sub    eax,edx
  418fe1:	and    eax,0x3
  418fe4:	mov    DWORD PTR [rsp+0xc],edx
  418fe8:	inc    eax
  418fea:	mov    QWORD PTR [rsp+0x20],rcx
  418fef:	mov    QWORD PTR [rsp+0x28],0x4
  418ff8:	test   rdx,rdx
  418ffb:	jne    419070 <flatcc_builder_create_string@@Base+0xd0>
  418ffd:	mov    edx,0x2
  419002:	mov    ecx,0x1
  419007:	mov    r8d,0x4
  41900d:	add    r8,rax
  419010:	mov    rsi,0x42ed20
  419017:	mov    ebp,edi
  419019:	shl    rcx,0x4
  41901d:	sub    ebp,r8d
  419020:	mov    QWORD PTR [rsp+0x10],r8
  419025:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  41902a:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  41902f:	mov    DWORD PTR [rsp+0x18],edx
  419033:	cmp    edi,ebp
  419035:	jle    419094 <flatcc_builder_create_string@@Base+0xf4>
  419037:	mov    rdi,QWORD PTR [rbx+0x38]
  41903b:	lea    rsi,[rsp+0x20]
  419040:	mov    ecx,ebp
  419042:	call   QWORD PTR [rbx+0x48]
  419045:	test   eax,eax
  419047:	jne    4190b8 <flatcc_builder_create_string@@Base+0x118>
  419049:	mov    DWORD PTR [rbx+0xf0],ebp
  41904f:	mov    rbx,QWORD PTR [rsp+0xa8]
  419057:	xor    rbx,QWORD PTR fs:0x28
  419060:	mov    eax,ebp
  419062:	jne    4190b3 <flatcc_builder_create_string@@Base+0x113>
  419064:	add    rsp,0xb8
  41906b:	pop    rbx
  41906c:	pop    rbp
  41906d:	ret    
  41906e:	xchg   ax,ax
  419070:	lea    r8,[rdx+0x4]
  419074:	mov    QWORD PTR [rsp+0x38],rdx
  419079:	mov    QWORD PTR [rsp+0x30],rsi
  41907e:	mov    edx,0x3
  419083:	mov    ecx,0x2
  419088:	jmp    41900d <flatcc_builder_create_string@@Base+0x6d>
  41908d:	nop    DWORD PTR [rax]
  419090:	xor    ebp,ebp
  419092:	jmp    41904f <flatcc_builder_create_string@@Base+0xaf>
  419094:	lea    rcx,[rip+0x15bd5]        # 42ec70 <_IO_stdin_used@@Base+0x3c70>
  41909b:	mov    edx,0x287
  4190a0:	lea    rsi,[rip+0x15199]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  4190a7:	lea    rdi,[rip+0x15529]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  4190ae:	call   4061b0 <__assert_fail@plt>
  4190b3:	call   4061a0 <__stack_chk_fail@plt>
  4190b8:	call   415f10 <flatcc_builder_default_alloc@@Base+0x2d0>
  4190bd:	nop    DWORD PTR [rax]

00000000004190c0 <flatcc_builder_create_string_str@@Base>:
  4190c0:	endbr64 
  4190c4:	push   rbp
  4190c5:	mov    rbp,rdi
  4190c8:	mov    rdi,rsi
  4190cb:	push   rbx
  4190cc:	mov    rbx,rsi
  4190cf:	sub    rsp,0x8
  4190d3:	call   406190 <strlen@plt>
  4190d8:	add    rsp,0x8
  4190dc:	mov    rsi,rbx
  4190df:	pop    rbx
  4190e0:	mov    rdi,rbp
  4190e3:	mov    rdx,rax
  4190e6:	pop    rbp
  4190e7:	jmp    418fa0 <flatcc_builder_create_string@@Base>
  4190ec:	nop    DWORD PTR [rax+0x0]

00000000004190f0 <flatcc_builder_create_string_strn@@Base>:
  4190f0:	endbr64 
  4190f4:	push   r12
  4190f6:	mov    r12,rdi
  4190f9:	push   rbp
  4190fa:	mov    rbp,rsi
  4190fd:	mov    rdi,rbp
  419100:	push   rbx
  419101:	xor    esi,esi
  419103:	mov    rbx,rdx
  419106:	call   4061d0 <memchr@plt>
  41910b:	mov    rdx,rax
  41910e:	sub    rdx,rbp
  419111:	test   rax,rax
  419114:	cmovne rbx,rdx
  419118:	mov    rsi,rbp
  41911b:	mov    rdx,rbx
  41911e:	pop    rbx
  41911f:	pop    rbp
  419120:	mov    rdi,r12
  419123:	pop    r12
  419125:	jmp    418fa0 <flatcc_builder_create_string@@Base>
  41912a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000419130 <flatcc_builder_end_string@@Base>:
  419130:	endbr64 
  419134:	push   rbp
  419135:	push   rbx
  419136:	sub    rsp,0x8
  41913a:	mov    rax,QWORD PTR [rdi+0x30]
  41913e:	cmp    WORD PTR [rax+0xe],0x6
  419143:	jne    419205 <flatcc_builder_end_string@@Base+0xd5>
  419149:	mov    edx,DWORD PTR [rdi+0x20]
  41914c:	mov    rbx,rdi
  41914f:	cmp    DWORD PTR [rax+0x14],edx
  419152:	jne    4191e6 <flatcc_builder_end_string@@Base+0xb6>
  419158:	mov    rsi,QWORD PTR [rdi+0x18]
  41915c:	call   418fa0 <flatcc_builder_create_string@@Base>
  419161:	mov    ebp,eax
  419163:	test   eax,eax
  419165:	jne    419170 <flatcc_builder_end_string@@Base+0x40>
  419167:	add    rsp,0x8
  41916b:	pop    rbx
  41916c:	mov    eax,ebp
  41916e:	pop    rbp
  41916f:	ret    
  419170:	mov    edx,DWORD PTR [rbx+0x20]
  419173:	mov    rdi,QWORD PTR [rbx+0x18]
  419177:	xor    esi,esi
  419179:	call   4061c0 <memset@plt>
  41917e:	mov    rax,QWORD PTR [rbx+0x30]
  419182:	mov    edi,DWORD PTR [rbx+0x70]
  419185:	mov    edx,DWORD PTR [rax+0x8]
  419188:	mov    esi,DWORD PTR [rax]
  41918a:	mov    ecx,DWORD PTR [rax+0x4]
  41918d:	mov    DWORD PTR [rbx+0x20],edx
  419190:	mov    rdx,rsi
  419193:	sub    edi,edx
  419195:	mov    DWORD PTR [rbx+0x28],esi
  419198:	mov    edx,edi
  41919a:	add    rsi,QWORD PTR [rbx+0x68]
  41919e:	cmp    ecx,edi
  4191a0:	cmovb  edx,ecx
  4191a3:	mov    QWORD PTR [rbx+0x18],rsi
  4191a7:	mov    DWORD PTR [rbx+0x24],edx
  4191aa:	movzx  edx,WORD PTR [rbx+0xea]
  4191b1:	mov    DWORD PTR [rax+0x4],ecx
  4191b4:	cmp    dx,WORD PTR [rbx+0xe8]
  4191bb:	jbe    4191c4 <flatcc_builder_end_string@@Base+0x94>
  4191bd:	mov    WORD PTR [rbx+0xe8],dx
  4191c4:	movzx  edx,WORD PTR [rax+0xc]
  4191c8:	dec    DWORD PTR [rbx+0x104]
  4191ce:	sub    rax,0x24
  4191d2:	mov    QWORD PTR [rbx+0x30],rax
  4191d6:	mov    WORD PTR [rbx+0xea],dx
  4191dd:	add    rsp,0x8
  4191e1:	mov    eax,ebp
  4191e3:	pop    rbx
  4191e4:	pop    rbp
  4191e5:	ret    
  4191e6:	lea    rcx,[rip+0x15533]        # 42e720 <_IO_stdin_used@@Base+0x3720>
  4191ed:	mov    edx,0x6c5
  4191f2:	lea    rsi,[rip+0x15047]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  4191f9:	lea    rdi,[rip+0x152f0]        # 42e4f0 <_IO_stdin_used@@Base+0x34f0>
  419200:	call   4061b0 <__assert_fail@plt>
  419205:	lea    rcx,[rip+0x15514]        # 42e720 <_IO_stdin_used@@Base+0x3720>
  41920c:	mov    edx,0x6c4
  419211:	lea    rsi,[rip+0x15028]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419218:	lea    rdi,[rip+0x151a9]        # 42e3c8 <_IO_stdin_used@@Base+0x33c8>
  41921f:	call   4061b0 <__assert_fail@plt>
  419224:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41922f:	nop

0000000000419230 <flatcc_builder_string_edit@@Base>:
  419230:	endbr64 
  419234:	mov    rax,QWORD PTR [rdi+0x18]
  419238:	ret    
  419239:	nop    DWORD PTR [rax+0x0]

0000000000419240 <flatcc_builder_string_len@@Base>:
  419240:	endbr64 
  419244:	mov    rax,QWORD PTR [rdi+0x30]
  419248:	mov    eax,DWORD PTR [rax+0x14]
  41924b:	ret    
  41924c:	nop    DWORD PTR [rax+0x0]

0000000000419250 <flatcc_builder_table_add@@Base>:
  419250:	endbr64 
  419254:	push   r13
  419256:	push   r12
  419258:	push   rbp
  419259:	push   rbx
  41925a:	sub    rsp,0x8
  41925e:	mov    rax,QWORD PTR [rdi+0x30]
  419262:	cmp    WORD PTR [rax+0xe],0x3
  419267:	jne    419334 <flatcc_builder_table_add@@Base+0xe4>
  41926d:	mov    r12d,esi
  419270:	cmp    esi,0x7ffc
  419276:	ja     419372 <flatcc_builder_table_add@@Base+0x122>
  41927c:	mov    rbx,rdi
  41927f:	cmp    WORD PTR [rdi+0xea],cx
  419286:	jb     4192f0 <flatcc_builder_table_add@@Base+0xa0>
  419288:	movsxd r13,r12d
  41928b:	mov    rsi,QWORD PTR [rbx+0x8]
  41928f:	add    r13,r13
  419292:	add    rsi,r13
  419295:	cmp    WORD PTR [rsi],0x0
  419299:	jne    419353 <flatcc_builder_table_add@@Base+0x103>
  41929f:	mov    eax,DWORD PTR [rbx+0x14]
  4192a2:	movzx  ecx,cx
  4192a5:	xor    eax,r12d
  4192a8:	imul   eax,eax,0x9e3779b1
  4192ae:	xor    eax,edx
  4192b0:	imul   eax,eax,0x9e3779b1
  4192b6:	mov    DWORD PTR [rbx+0x14],eax
  4192b9:	mov    eax,DWORD PTR [rbx+0x20]
  4192bc:	lea    ebp,[rcx+rax*1-0x1]
  4192c0:	neg    ecx
  4192c2:	and    ebp,ecx
  4192c4:	add    edx,ebp
  4192c6:	mov    DWORD PTR [rbx+0x20],edx
  4192c9:	cmp    edx,DWORD PTR [rbx+0x24]
  4192cc:	jae    419310 <flatcc_builder_table_add@@Base+0xc0>
  4192ce:	lea    eax,[rbp+0x4]
  4192d1:	mov    WORD PTR [rsi],ax
  4192d4:	cmp    r12w,WORD PTR [rbx+0x10]
  4192d9:	jae    419300 <flatcc_builder_table_add@@Base+0xb0>
  4192db:	mov    eax,ebp
  4192dd:	add    rax,QWORD PTR [rbx+0x18]
  4192e1:	add    rsp,0x8
  4192e5:	pop    rbx
  4192e6:	pop    rbp
  4192e7:	pop    r12
  4192e9:	pop    r13
  4192eb:	ret    
  4192ec:	nop    DWORD PTR [rax+0x0]
  4192f0:	mov    WORD PTR [rdi+0xea],cx
  4192f7:	jmp    419288 <flatcc_builder_table_add@@Base+0x38>
  4192f9:	nop    DWORD PTR [rax+0x0]
  419300:	inc    r12d
  419303:	mov    WORD PTR [rbx+0x10],r12w
  419308:	jmp    4192db <flatcc_builder_table_add@@Base+0x8b>
  41930a:	nop    WORD PTR [rax+rax*1+0x0]
  419310:	lea    esi,[rdx+0x1]
  419313:	mov    rdi,rbx
  419316:	mov    edx,0xfffc
  41931b:	call   415be0 <union_vector_tests@@Base+0x110>
  419320:	test   eax,eax
  419322:	jne    419330 <flatcc_builder_table_add@@Base+0xe0>
  419324:	mov    rsi,QWORD PTR [rbx+0x8]
  419328:	add    rsi,r13
  41932b:	jmp    4192ce <flatcc_builder_table_add@@Base+0x7e>
  41932d:	nop    DWORD PTR [rax]
  419330:	xor    eax,eax
  419332:	jmp    4192e1 <flatcc_builder_table_add@@Base+0x91>
  419334:	lea    rcx,[rip+0x153c5]        # 42e700 <_IO_stdin_used@@Base+0x3700>
  41933b:	mov    edx,0x6ed
  419340:	lea    rsi,[rip+0x14ef9]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419347:	lea    rdi,[rip+0x1513a]        # 42e488 <_IO_stdin_used@@Base+0x3488>
  41934e:	call   4061b0 <__assert_fail@plt>
  419353:	lea    rcx,[rip+0x153a6]        # 42e700 <_IO_stdin_used@@Base+0x3700>
  41935a:	mov    edx,0x6f8
  41935f:	lea    rsi,[rip+0x14eda]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419366:	lea    rdi,[rip+0x1526a]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  41936d:	call   4061b0 <__assert_fail@plt>
  419372:	lea    rcx,[rip+0x15387]        # 42e700 <_IO_stdin_used@@Base+0x3700>
  419379:	mov    edx,0x6ee
  41937e:	lea    rsi,[rip+0x14ebb]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419385:	lea    rdi,[rip+0x1518c]        # 42e518 <_IO_stdin_used@@Base+0x3518>
  41938c:	call   4061b0 <__assert_fail@plt>
  419391:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41939c:	nop    DWORD PTR [rax+0x0]

00000000004193a0 <flatcc_builder_table_edit@@Base>:
  4193a0:	endbr64 
  4193a4:	mov    rax,QWORD PTR [rdi+0x30]
  4193a8:	cmp    WORD PTR [rax+0xe],0x3
  4193ad:	jne    4193ba <flatcc_builder_table_edit@@Base+0x1a>
  4193af:	mov    eax,DWORD PTR [rdi+0x20]
  4193b2:	sub    rax,rsi
  4193b5:	add    rax,QWORD PTR [rdi+0x18]
  4193b9:	ret    
  4193ba:	push   rax
  4193bb:	lea    rcx,[rip+0x1531e]        # 42e6e0 <_IO_stdin_used@@Base+0x36e0>
  4193c2:	mov    edx,0x702
  4193c7:	lea    rsi,[rip+0x14e72]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  4193ce:	lea    rdi,[rip+0x150b3]        # 42e488 <_IO_stdin_used@@Base+0x3488>
  4193d5:	call   4061b0 <__assert_fail@plt>
  4193da:	nop    WORD PTR [rax+rax*1+0x0]

00000000004193e0 <flatcc_builder_table_add_copy@@Base>:
  4193e0:	endbr64 
  4193e4:	push   rbp
  4193e5:	mov    rbp,rdx
  4193e8:	push   rbx
  4193e9:	mov    rbx,rcx
  4193ec:	mov    rdx,rbx
  4193ef:	movzx  ecx,r8w
  4193f3:	sub    rsp,0x8
  4193f7:	call   419250 <flatcc_builder_table_add@@Base>
  4193fc:	mov    rcx,rax
  4193ff:	test   rax,rax
  419402:	je     419415 <flatcc_builder_table_add_copy@@Base+0x35>
  419404:	mov    rdx,rbx
  419407:	mov    rsi,rbp
  41940a:	mov    rdi,rax
  41940d:	call   406210 <memcpy@plt>
  419412:	mov    rcx,rax
  419415:	add    rsp,0x8
  419419:	pop    rbx
  41941a:	mov    rax,rcx
  41941d:	pop    rbp
  41941e:	ret    
  41941f:	nop

0000000000419420 <flatcc_builder_table_add_offset@@Base>:
  419420:	endbr64 
  419424:	push   r13
  419426:	push   r12
  419428:	push   rbp
  419429:	push   rbx
  41942a:	sub    rsp,0x8
  41942e:	mov    rax,QWORD PTR [rdi+0x30]
  419432:	cmp    WORD PTR [rax+0xe],0x3
  419437:	jne    4194f4 <flatcc_builder_table_add_offset@@Base+0xd4>
  41943d:	mov    r12d,esi
  419440:	cmp    esi,0x7ffc
  419446:	ja     419532 <flatcc_builder_table_add_offset@@Base+0x112>
  41944c:	movsxd r13,esi
  41944f:	mov    rdx,QWORD PTR [rdi+0x8]
  419453:	add    r13,r13
  419456:	add    rdx,r13
  419459:	cmp    WORD PTR [rdx],0x0
  41945d:	mov    rbx,rdi
  419460:	jne    419513 <flatcc_builder_table_add_offset@@Base+0xf3>
  419466:	mov    eax,DWORD PTR [rdi+0x14]
  419469:	xor    eax,esi
  41946b:	imul   eax,eax,0x9e3779b1
  419471:	xor    eax,0x4
  419474:	imul   eax,eax,0x9e3779b1
  41947a:	mov    DWORD PTR [rdi+0x14],eax
  41947d:	mov    eax,DWORD PTR [rdi+0x20]
  419480:	lea    ebp,[rax+0x3]
  419483:	and    ebp,0xfffffffc
  419486:	lea    esi,[rbp+0x4]
  419489:	mov    DWORD PTR [rdi+0x20],esi
  41948c:	cmp    esi,DWORD PTR [rdi+0x24]
  41948f:	ja     4194d0 <flatcc_builder_table_add_offset@@Base+0xb0>
  419491:	lea    eax,[rbp+0x4]
  419494:	mov    WORD PTR [rdx],ax
  419497:	cmp    r12w,WORD PTR [rbx+0x10]
  41949c:	jae    4194c0 <flatcc_builder_table_add_offset@@Base+0xa0>
  41949e:	mov    rax,QWORD PTR [rbx]
  4194a1:	lea    rdx,[rax+0x2]
  4194a5:	mov    QWORD PTR [rbx],rdx
  4194a8:	mov    WORD PTR [rax],bp
  4194ab:	mov    eax,ebp
  4194ad:	add    rax,QWORD PTR [rbx+0x18]
  4194b1:	add    rsp,0x8
  4194b5:	pop    rbx
  4194b6:	pop    rbp
  4194b7:	pop    r12
  4194b9:	pop    r13
  4194bb:	ret    
  4194bc:	nop    DWORD PTR [rax+0x0]
  4194c0:	lea    esi,[r12+0x1]
  4194c5:	mov    WORD PTR [rbx+0x10],si
  4194c9:	jmp    41949e <flatcc_builder_table_add_offset@@Base+0x7e>
  4194cb:	nop    DWORD PTR [rax+rax*1+0x0]
  4194d0:	mov    edx,0xfffc
  4194d5:	call   415be0 <union_vector_tests@@Base+0x110>
  4194da:	test   eax,eax
  4194dc:	jne    4194f0 <flatcc_builder_table_add_offset@@Base+0xd0>
  4194de:	mov    rdx,QWORD PTR [rbx+0x8]
  4194e2:	add    rdx,r13
  4194e5:	jmp    419491 <flatcc_builder_table_add_offset@@Base+0x71>
  4194e7:	nop    WORD PTR [rax+rax*1+0x0]
  4194f0:	xor    eax,eax
  4194f2:	jmp    4194b1 <flatcc_builder_table_add_offset@@Base+0x91>
  4194f4:	lea    rcx,[rip+0x151c5]        # 42e6c0 <_IO_stdin_used@@Base+0x36c0>
  4194fb:	mov    edx,0x713
  419500:	lea    rsi,[rip+0x14d39]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419507:	lea    rdi,[rip+0x14f7a]        # 42e488 <_IO_stdin_used@@Base+0x3488>
  41950e:	call   4061b0 <__assert_fail@plt>
  419513:	lea    rcx,[rip+0x151a6]        # 42e6c0 <_IO_stdin_used@@Base+0x36c0>
  41951a:	mov    edx,0x71b
  41951f:	lea    rsi,[rip+0x14d1a]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419526:	lea    rdi,[rip+0x150aa]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  41952d:	call   4061b0 <__assert_fail@plt>
  419532:	lea    rcx,[rip+0x15187]        # 42e6c0 <_IO_stdin_used@@Base+0x36c0>
  419539:	mov    edx,0x714
  41953e:	lea    rsi,[rip+0x14cfb]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419545:	lea    rdi,[rip+0x14fcc]        # 42e518 <_IO_stdin_used@@Base+0x3518>
  41954c:	call   4061b0 <__assert_fail@plt>
  419551:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41955c:	nop    DWORD PTR [rax+0x0]

0000000000419560 <flatcc_builder_table_add_union@@Base>:
  419560:	endbr64 
  419564:	push   r13
  419566:	mov    r13,rdx
  419569:	sar    r13,0x20
  41956d:	push   r12
  41956f:	push   rbp
  419570:	push   rbx
  419571:	sub    rsp,0x8
  419575:	mov    rax,QWORD PTR [rdi+0x30]
  419579:	cmp    WORD PTR [rax+0xe],0x3
  41957e:	jne    4195f4 <flatcc_builder_table_add_union@@Base+0x94>
  419580:	mov    r12,rdi
  419583:	mov    ebx,esi
  419585:	mov    rbp,rdx
  419588:	test   dl,dl
  41958a:	je     4195d0 <flatcc_builder_table_add_union@@Base+0x70>
  41958c:	test   r13d,r13d
  41958f:	je     4195a2 <flatcc_builder_table_add_union@@Base+0x42>
  419591:	call   419420 <flatcc_builder_table_add_offset@@Base>
  419596:	test   rax,rax
  419599:	je     419632 <flatcc_builder_table_add_union@@Base+0xd2>
  41959f:	mov    DWORD PTR [rax],r13d
  4195a2:	lea    esi,[rbx-0x1]
  4195a5:	mov    ecx,0x1
  4195aa:	mov    edx,0x1
  4195af:	mov    rdi,r12
  4195b2:	call   419250 <flatcc_builder_table_add@@Base>
  4195b7:	test   rax,rax
  4195ba:	je     419613 <flatcc_builder_table_add_union@@Base+0xb3>
  4195bc:	mov    BYTE PTR [rax],bpl
  4195bf:	add    rsp,0x8
  4195c3:	xor    eax,eax
  4195c5:	pop    rbx
  4195c6:	pop    rbp
  4195c7:	pop    r12
  4195c9:	pop    r13
  4195cb:	ret    
  4195cc:	nop    DWORD PTR [rax+0x0]
  4195d0:	test   r13d,r13d
  4195d3:	je     4195a2 <flatcc_builder_table_add_union@@Base+0x42>
  4195d5:	lea    rcx,[rip+0x15274]        # 42e850 <_IO_stdin_used@@Base+0x3850>
  4195dc:	mov    edx,0x5ef
  4195e1:	lea    rsi,[rip+0x14c58]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  4195e8:	lea    rdi,[rip+0x14f71]        # 42e560 <_IO_stdin_used@@Base+0x3560>
  4195ef:	call   4061b0 <__assert_fail@plt>
  4195f4:	lea    rcx,[rip+0x15255]        # 42e850 <_IO_stdin_used@@Base+0x3850>
  4195fb:	mov    edx,0x5ee
  419600:	lea    rsi,[rip+0x14c39]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419607:	lea    rdi,[rip+0x14e7a]        # 42e488 <_IO_stdin_used@@Base+0x3488>
  41960e:	call   4061b0 <__assert_fail@plt>
  419613:	lea    rcx,[rip+0x15236]        # 42e850 <_IO_stdin_used@@Base+0x3850>
  41961a:	mov    edx,0x5f6
  41961f:	lea    rsi,[rip+0x14c1a]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419626:	lea    rdi,[rip+0x15039]        # 42e666 <_IO_stdin_used@@Base+0x3666>
  41962d:	call   4061b0 <__assert_fail@plt>
  419632:	lea    rcx,[rip+0x15217]        # 42e850 <_IO_stdin_used@@Base+0x3850>
  419639:	mov    edx,0x5f2
  41963e:	lea    rsi,[rip+0x14bfb]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419645:	lea    rdi,[rip+0x15010]        # 42e65c <_IO_stdin_used@@Base+0x365c>
  41964c:	call   4061b0 <__assert_fail@plt>
  419651:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41965c:	nop    DWORD PTR [rax+0x0]

0000000000419660 <flatcc_builder_table_add_union_vector@@Base>:
  419660:	endbr64 
  419664:	push   r12
  419666:	push   rbp
  419667:	mov    rbp,rdx
  41966a:	sar    rbp,0x20
  41966e:	push   rbx
  41966f:	sub    rsp,0x10
  419673:	mov    rcx,QWORD PTR [rdi+0x30]
  419677:	cmp    WORD PTR [rcx+0xe],0x3
  41967c:	jne    4196f1 <flatcc_builder_table_add_union_vector@@Base+0x91>
  41967e:	test   ebp,ebp
  419680:	sete   cl
  419683:	test   edx,edx
  419685:	mov    r12d,esi
  419688:	sete   sil
  41968c:	cmp    sil,cl
  41968f:	je     4196b0 <flatcc_builder_table_add_union_vector@@Base+0x50>
  419691:	test   edx,edx
  419693:	setne  al
  419696:	cmp    cl,al
  419698:	je     419710 <flatcc_builder_table_add_union_vector@@Base+0xb0>
  41969a:	mov    eax,0xffffffff
  41969f:	add    rsp,0x10
  4196a3:	pop    rbx
  4196a4:	pop    rbp
  4196a5:	pop    r12
  4196a7:	ret    
  4196a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4196b0:	mov    eax,edx
  4196b2:	test   edx,edx
  4196b4:	je     41969f <flatcc_builder_table_add_union_vector@@Base+0x3f>
  4196b6:	lea    esi,[r12-0x1]
  4196bb:	mov    QWORD PTR [rsp+0x8],rdx
  4196c0:	mov    rbx,rdi
  4196c3:	call   419420 <flatcc_builder_table_add_offset@@Base>
  4196c8:	test   rax,rax
  4196cb:	mov    rdx,QWORD PTR [rsp+0x8]
  4196d0:	je     41974e <flatcc_builder_table_add_union_vector@@Base+0xee>
  4196d2:	mov    DWORD PTR [rax],edx
  4196d4:	mov    esi,r12d
  4196d7:	mov    rdi,rbx
  4196da:	call   419420 <flatcc_builder_table_add_offset@@Base>
  4196df:	test   rax,rax
  4196e2:	je     41972f <flatcc_builder_table_add_union_vector@@Base+0xcf>
  4196e4:	mov    DWORD PTR [rax],ebp
  4196e6:	add    rsp,0x10
  4196ea:	xor    eax,eax
  4196ec:	pop    rbx
  4196ed:	pop    rbp
  4196ee:	pop    r12
  4196f0:	ret    
  4196f1:	lea    rcx,[rip+0x15128]        # 42e820 <_IO_stdin_used@@Base+0x3820>
  4196f8:	mov    edx,0x600
  4196fd:	lea    rsi,[rip+0x14b3c]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419704:	lea    rdi,[rip+0x14d7d]        # 42e488 <_IO_stdin_used@@Base+0x3488>
  41970b:	call   4061b0 <__assert_fail@plt>
  419710:	lea    rcx,[rip+0x15109]        # 42e820 <_IO_stdin_used@@Base+0x3820>
  419717:	mov    edx,0x601
  41971c:	lea    rsi,[rip+0x14b1d]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419723:	lea    rdi,[rip+0x14e5e]        # 42e588 <_IO_stdin_used@@Base+0x3588>
  41972a:	call   4061b0 <__assert_fail@plt>
  41972f:	lea    rcx,[rip+0x150ea]        # 42e820 <_IO_stdin_used@@Base+0x3820>
  419736:	mov    edx,0x608
  41973b:	lea    rsi,[rip+0x14afe]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419742:	lea    rdi,[rip+0x14f13]        # 42e65c <_IO_stdin_used@@Base+0x365c>
  419749:	call   4061b0 <__assert_fail@plt>
  41974e:	lea    rcx,[rip+0x150cb]        # 42e820 <_IO_stdin_used@@Base+0x3820>
  419755:	mov    edx,0x604
  41975a:	lea    rsi,[rip+0x14adf]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419761:	lea    rdi,[rip+0x14ef4]        # 42e65c <_IO_stdin_used@@Base+0x365c>
  419768:	call   4061b0 <__assert_fail@plt>
  41976d:	nop    DWORD PTR [rax]

0000000000419770 <flatcc_builder_push_buffer_alignment@@Base>:
  419770:	endbr64 
  419774:	mov    edx,0x4
  419779:	movzx  eax,WORD PTR [rdi+0xe8]
  419780:	mov    WORD PTR [rdi+0xe8],dx
  419787:	ret    
  419788:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000419790 <flatcc_builder_pop_buffer_alignment@@Base>:
  419790:	endbr64 
  419794:	cmp    si,WORD PTR [rdi+0xe8]
  41979b:	jbe    4197a4 <flatcc_builder_pop_buffer_alignment@@Base+0x14>
  41979d:	mov    WORD PTR [rdi+0xe8],si
  4197a4:	ret    
  4197a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004197b0 <flatcc_builder_get_buffer_alignment@@Base>:
  4197b0:	endbr64 
  4197b4:	movzx  eax,WORD PTR [rdi+0xe8]
  4197bb:	ret    
  4197bc:	nop    DWORD PTR [rax+0x0]

00000000004197c0 <flatcc_builder_set_vtable_clustering@@Base>:
  4197c0:	endbr64 
  4197c4:	xor    eax,eax
  4197c6:	test   esi,esi
  4197c8:	sete   al
  4197cb:	mov    DWORD PTR [rdi+0x124],eax
  4197d1:	ret    
  4197d2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4197dd:	nop    DWORD PTR [rax]

00000000004197e0 <flatcc_builder_set_block_align@@Base>:
  4197e0:	endbr64 
  4197e4:	mov    WORD PTR [rdi+0xec],si
  4197eb:	ret    
  4197ec:	nop    DWORD PTR [rax+0x0]

00000000004197f0 <flatcc_builder_get_level@@Base>:
  4197f0:	endbr64 
  4197f4:	mov    eax,DWORD PTR [rdi+0x104]
  4197fa:	ret    
  4197fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000419800 <flatcc_builder_set_max_level@@Base>:
  419800:	endbr64 
  419804:	mov    DWORD PTR [rdi+0x120],esi
  41980a:	cmp    DWORD PTR [rdi+0x108],esi
  419810:	jge    419818 <flatcc_builder_set_max_level@@Base+0x18>
  419812:	mov    DWORD PTR [rdi+0x108],esi
  419818:	ret    
  419819:	nop    DWORD PTR [rax+0x0]

0000000000419820 <flatcc_builder_get_buffer_size@@Base>:
  419820:	endbr64 
  419824:	mov    eax,DWORD PTR [rdi+0xf4]
  41982a:	sub    eax,DWORD PTR [rdi+0xf0]
  419830:	cdqe   
  419832:	ret    
  419833:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41983e:	xchg   ax,ax

0000000000419840 <flatcc_builder_get_buffer_start@@Base>:
  419840:	endbr64 
  419844:	mov    eax,DWORD PTR [rdi+0xf0]
  41984a:	ret    
  41984b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000419850 <flatcc_builder_get_buffer_end@@Base>:
  419850:	endbr64 
  419854:	mov    eax,DWORD PTR [rdi+0xf4]
  41985a:	ret    
  41985b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000419860 <flatcc_builder_set_vtable_cache_limit@@Base>:
  419860:	endbr64 
  419864:	mov    QWORD PTR [rdi+0x118],rsi
  41986b:	ret    
  41986c:	nop    DWORD PTR [rax+0x0]

0000000000419870 <flatcc_builder_set_identifier@@Base>:
  419870:	endbr64 
  419874:	test   rsi,rsi
  419877:	je     419888 <flatcc_builder_set_identifier@@Base+0x18>
  419879:	mov    eax,DWORD PTR [rsi]
  41987b:	mov    DWORD PTR [rdi+0x110],eax
  419881:	ret    
  419882:	nop    WORD PTR [rax+rax*1+0x0]
  419888:	mov    rsi,0x42ed20
  41988f:	mov    eax,DWORD PTR [rsi]
  419891:	mov    DWORD PTR [rdi+0x110],eax
  419897:	ret    
  419898:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004198a0 <flatcc_builder_get_type@@Base>:
  4198a0:	endbr64 
  4198a4:	mov    rdx,QWORD PTR [rdi+0x30]
  4198a8:	xor    eax,eax
  4198aa:	test   rdx,rdx
  4198ad:	je     4198b3 <flatcc_builder_get_type@@Base+0x13>
  4198af:	movzx  eax,WORD PTR [rdx+0xe]
  4198b3:	ret    
  4198b4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4198bf:	nop

00000000004198c0 <flatcc_builder_get_type_at@@Base>:
  4198c0:	endbr64 
  4198c4:	xor    eax,eax
  4198c6:	test   esi,esi
  4198c8:	jle    4198e9 <flatcc_builder_get_type_at@@Base+0x29>
  4198ca:	mov    edx,DWORD PTR [rdi+0x104]
  4198d0:	cmp    edx,esi
  4198d2:	jl     4198e9 <flatcc_builder_get_type_at@@Base+0x29>
  4198d4:	sub    esi,edx
  4198d6:	movsxd rsi,esi
  4198d9:	mov    rdx,QWORD PTR [rdi+0x30]
  4198dd:	lea    rax,[rsi+rsi*8]
  4198e1:	lea    rax,[rdx+rax*4]
  4198e5:	movzx  eax,WORD PTR [rax+0xe]
  4198e9:	ret    
  4198ea:	nop    WORD PTR [rax+rax*1+0x0]

00000000004198f0 <flatcc_builder_get_direct_buffer@@Base>:
  4198f0:	endbr64 
  4198f4:	mov    eax,DWORD PTR [rdi+0x128]
  4198fa:	test   eax,eax
  4198fc:	jne    419910 <flatcc_builder_get_direct_buffer@@Base+0x20>
  4198fe:	xor    eax,eax
  419900:	test   rsi,rsi
  419903:	je     41990c <flatcc_builder_get_direct_buffer@@Base+0x1c>
  419905:	mov    QWORD PTR [rsi],0x0
  41990c:	ret    
  41990d:	nop    DWORD PTR [rax]
  419910:	mov    rax,QWORD PTR [rdi+0x138]
  419917:	cmp    QWORD PTR [rdi+0x130],rax
  41991e:	jne    4198fe <flatcc_builder_get_direct_buffer@@Base+0xe>
  419920:	test   rsi,rsi
  419923:	je     41992f <flatcc_builder_get_direct_buffer@@Base+0x3f>
  419925:	mov    rax,QWORD PTR [rdi+0x160]
  41992c:	mov    QWORD PTR [rsi],rax
  41992f:	mov    rax,QWORD PTR [rdi+0x140]
  419936:	ret    
  419937:	nop    WORD PTR [rax+rax*1+0x0]

0000000000419940 <flatcc_builder_copy_buffer@@Base>:
  419940:	endbr64 
  419944:	mov    eax,DWORD PTR [rdi+0x128]
  41994a:	test   eax,eax
  41994c:	je     419970 <flatcc_builder_copy_buffer@@Base+0x30>
  41994e:	sub    rsp,0x8
  419952:	add    rdi,0x130
  419959:	call   41a1b0 <flatcc_emitter_copy_buffer@@Base>
  41995e:	test   rax,rax
  419961:	je     419973 <flatcc_builder_copy_buffer@@Base+0x33>
  419963:	add    rsp,0x8
  419967:	ret    
  419968:	nop    DWORD PTR [rax+rax*1+0x0]
  419970:	xor    eax,eax
  419972:	ret    
  419973:	lea    rcx,[rip+0x14d26]        # 42e6a0 <_IO_stdin_used@@Base+0x36a0>
  41997a:	mov    edx,0x786
  41997f:	lea    rsi,[rip+0x148ba]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419986:	lea    rdi,[rip+0x11b6c]        # 42b4f9 <_IO_stdin_used@@Base+0x4f9>
  41998d:	call   4061b0 <__assert_fail@plt>
  419992:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41999d:	nop    DWORD PTR [rax]

00000000004199a0 <flatcc_builder_finalize_buffer@@Base>:
  4199a0:	endbr64 
  4199a4:	push   r12
  4199a6:	mov    r12,rdi
  4199a9:	push   rbp
  4199aa:	push   rbx
  4199ab:	mov    rbx,rsi
  4199ae:	call   419820 <flatcc_builder_get_buffer_size@@Base>
  4199b3:	mov    rbp,rax
  4199b6:	test   rbx,rbx
  4199b9:	je     4199be <flatcc_builder_finalize_buffer@@Base+0x1e>
  4199bb:	mov    QWORD PTR [rbx],rax
  4199be:	mov    rdi,rbp
  4199c1:	call   406220 <malloc@plt>
  4199c6:	mov    rbx,rax
  4199c9:	test   rax,rax
  4199cc:	je     4199e9 <flatcc_builder_finalize_buffer@@Base+0x49>
  4199ce:	mov    rdx,rbp
  4199d1:	mov    rsi,rax
  4199d4:	mov    rdi,r12
  4199d7:	call   419940 <flatcc_builder_copy_buffer@@Base>
  4199dc:	test   rax,rax
  4199df:	je     419a08 <flatcc_builder_finalize_buffer@@Base+0x68>
  4199e1:	mov    rax,rbx
  4199e4:	pop    rbx
  4199e5:	pop    rbp
  4199e6:	pop    r12
  4199e8:	ret    
  4199e9:	lea    rcx,[rip+0x14c90]        # 42e680 <_IO_stdin_used@@Base+0x3680>
  4199f0:	mov    edx,0x798
  4199f5:	lea    rsi,[rip+0x14844]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  4199fc:	lea    rdi,[rip+0x14bd4]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  419a03:	call   4061b0 <__assert_fail@plt>
  419a08:	lea    rcx,[rip+0x14c71]        # 42e680 <_IO_stdin_used@@Base+0x3680>
  419a0f:	mov    edx,0x79c
  419a14:	lea    rsi,[rip+0x14825]        # 42e240 <_IO_stdin_used@@Base+0x3240>
  419a1b:	lea    rdi,[rip+0x14bb5]        # 42e5d7 <_IO_stdin_used@@Base+0x35d7>
  419a22:	call   4061b0 <__assert_fail@plt>
  419a27:	nop    WORD PTR [rax+rax*1+0x0]

0000000000419a30 <flatcc_builder_finalize_aligned_buffer@@Base>:
  419a30:	endbr64 
  419a34:	push   r13
  419a36:	push   r12
  419a38:	mov    r12,rsi
  419a3b:	push   rbp
  419a3c:	mov    rbp,rdi
  419a3f:	push   rbx
  419a40:	sub    rsp,0x18
  419a44:	mov    rax,QWORD PTR fs:0x28
  419a4d:	mov    QWORD PTR [rsp+0x8],rax
  419a52:	xor    eax,eax
  419a54:	call   419820 <flatcc_builder_get_buffer_size@@Base>
  419a59:	mov    rbx,rax
  419a5c:	test   r12,r12
  419a5f:	je     419a65 <flatcc_builder_finalize_aligned_buffer@@Base+0x35>
  419a61:	mov    QWORD PTR [r12],rax
  419a65:	mov    rdi,rbp
  419a68:	call   4197b0 <flatcc_builder_get_buffer_alignment@@Base>
  419a6d:	movzx  eax,ax
  419a70:	lea    rdx,[rbx+rax*1-0x1]
  419a75:	mov    rbx,rax
  419a78:	neg    rbx
  419a7b:	and    rbx,rdx
  419a7e:	mov    esi,0x8
  419a83:	cmp    rax,0x8
  419a87:	cmovae rsi,rax
  419a8b:	mov    rdi,rsp
  419a8e:	mov    rdx,rbx
  419a91:	mov    QWORD PTR [rsp],0x0
  419a99:	call   406270 <posix_memalign@plt>
  419a9e:	test   eax,eax
  419aa0:	je     419ac8 <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
  419aa2:	mov    rdi,QWORD PTR [rsp]
  419aa6:	test   rdi,rdi
  419aa9:	je     419ab0 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  419aab:	call   406160 <free@plt>
  419ab0:	test   r12,r12
  419ab3:	je     419b12 <flatcc_builder_finalize_aligned_buffer@@Base+0xe2>
  419ab5:	mov    QWORD PTR [r12],0x0
  419abd:	xor    r13d,r13d
  419ac0:	jmp    419ae4 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  419ac2:	nop    WORD PTR [rax+rax*1+0x0]
  419ac8:	mov    r13,QWORD PTR [rsp]
  419acc:	test   r13,r13
  419acf:	je     419ab0 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  419ad1:	mov    rdx,rbx
  419ad4:	mov    rsi,r13
  419ad7:	mov    rdi,rbp
  419ada:	call   419940 <flatcc_builder_copy_buffer@@Base>
  419adf:	test   rax,rax
  419ae2:	je     419b08 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
  419ae4:	mov    rcx,QWORD PTR [rsp+0x8]
  419ae9:	xor    rcx,QWORD PTR fs:0x28
  419af2:	mov    rax,r13
  419af5:	jne    419b0d <flatcc_builder_finalize_aligned_buffer@@Base+0xdd>
  419af7:	add    rsp,0x18
  419afb:	pop    rbx
  419afc:	pop    rbp
  419afd:	pop    r12
  419aff:	pop    r13
  419b01:	ret    
  419b02:	nop    WORD PTR [rax+rax*1+0x0]
  419b08:	mov    rdi,r13
  419b0b:	jmp    419aab <flatcc_builder_finalize_aligned_buffer@@Base+0x7b>
  419b0d:	call   4061a0 <__stack_chk_fail@plt>
  419b12:	xor    r13d,r13d
  419b15:	jmp    419ae4 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  419b17:	nop    WORD PTR [rax+rax*1+0x0]

0000000000419b20 <flatcc_builder_aligned_alloc@@Base>:
  419b20:	endbr64 
  419b24:	sub    rsp,0x18
  419b28:	mov    rax,QWORD PTR fs:0x28
  419b31:	mov    QWORD PTR [rsp+0x8],rax
  419b36:	xor    eax,eax
  419b38:	mov    rdx,rsi
  419b3b:	cmp    rdi,0x8
  419b3f:	mov    esi,0x8
  419b44:	cmovae rsi,rdi
  419b48:	mov    rdi,rsp
  419b4b:	mov    QWORD PTR [rsp],0x0
  419b53:	call   406270 <posix_memalign@plt>
  419b58:	test   eax,eax
  419b5a:	mov    rax,QWORD PTR [rsp]
  419b5e:	je     419b6f <flatcc_builder_aligned_alloc@@Base+0x4f>
  419b60:	test   rax,rax
  419b63:	je     419b6f <flatcc_builder_aligned_alloc@@Base+0x4f>
  419b65:	mov    rdi,rax
  419b68:	call   406160 <free@plt>
  419b6d:	xor    eax,eax
  419b6f:	mov    rcx,QWORD PTR [rsp+0x8]
  419b74:	xor    rcx,QWORD PTR fs:0x28
  419b7d:	jne    419b84 <flatcc_builder_aligned_alloc@@Base+0x64>
  419b7f:	add    rsp,0x18
  419b83:	ret    
  419b84:	call   4061a0 <__stack_chk_fail@plt>
  419b89:	nop    DWORD PTR [rax+0x0]

0000000000419b90 <flatcc_builder_aligned_free@@Base>:
  419b90:	endbr64 
  419b94:	jmp    406160 <free@plt>
  419b99:	nop    DWORD PTR [rax+0x0]

0000000000419ba0 <flatcc_builder_get_emit_context@@Base>:
  419ba0:	endbr64 
  419ba4:	mov    rax,QWORD PTR [rdi+0x38]
  419ba8:	ret    
  419ba9:	nop    DWORD PTR [rax+0x0]

0000000000419bb0 <flatcc_emitter_recycle_page@@Base>:
  419bb0:	endbr64 
  419bb4:	mov    rax,QWORD PTR [rdi]
  419bb7:	cmp    rax,rsi
  419bba:	je     419c0b <flatcc_emitter_recycle_page@@Base+0x5b>
  419bbc:	cmp    QWORD PTR [rdi+0x8],rsi
  419bc0:	je     419c0b <flatcc_emitter_recycle_page@@Base+0x5b>
  419bc2:	mov    rdx,QWORD PTR [rsi+0xb88]
  419bc9:	mov    rcx,QWORD PTR [rsi+0xb80]
  419bd0:	mov    QWORD PTR [rcx+0xb88],rdx
  419bd7:	mov    QWORD PTR [rdx+0xb80],rcx
  419bde:	mov    rdx,QWORD PTR [rax+0xb88]
  419be5:	mov    QWORD PTR [rsi+0xb80],rax
  419bec:	mov    QWORD PTR [rsi+0xb88],rdx
  419bf3:	mov    QWORD PTR [rdx+0xb80],rsi
  419bfa:	mov    rax,QWORD PTR [rsi+0xb80]
  419c01:	mov    QWORD PTR [rax+0xb88],rsi
  419c08:	xor    eax,eax
  419c0a:	ret    
  419c0b:	mov    eax,0xffffffff
  419c10:	ret    
  419c11:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  419c1c:	nop    DWORD PTR [rax+0x0]

0000000000419c20 <flatcc_emitter_reset@@Base>:
  419c20:	endbr64 
  419c24:	mov    rax,QWORD PTR [rdi]
  419c27:	test   rax,rax
  419c2a:	je     419d00 <flatcc_emitter_reset@@Base+0xe0>
  419c30:	mov    rcx,QWORD PTR [rdi+0x40]
  419c34:	mov    rsi,QWORD PTR [rdi+0x30]
  419c38:	test   rcx,rcx
  419c3b:	cmove  rcx,rsi
  419c3f:	lea    rdx,[rax+0x5c0]
  419c46:	mov    QWORD PTR [rdi+0x10],rdx
  419c4a:	mov    QWORD PTR [rdi+0x20],rdx
  419c4e:	lea    rdx,[rcx+rcx*2]
  419c52:	shr    rdx,0x2
  419c56:	shr    rsi,0x2
  419c5a:	add    rdx,rsi
  419c5d:	mov    QWORD PTR [rdi+0x8],rax
  419c61:	mov    QWORD PTR [rdi+0x18],0x5c0
  419c69:	mov    QWORD PTR [rdi+0x28],0x5c0
  419c71:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  419c7b:	mov    QWORD PTR [rdi+0x40],rdx
  419c7f:	add    rdx,rdx
  419c82:	mov    QWORD PTR [rdi+0x30],0x0
  419c8a:	cmp    rdx,QWORD PTR [rdi+0x38]
  419c8e:	jae    419d00 <flatcc_emitter_reset@@Base+0xe0>
  419c90:	push   rbx
  419c91:	mov    rbx,rdi
  419c94:	mov    rdi,QWORD PTR [rax+0xb80]
  419c9b:	cmp    rax,rdi
  419c9e:	jne    419cb8 <flatcc_emitter_reset@@Base+0x98>
  419ca0:	jmp    419cf4 <flatcc_emitter_reset@@Base+0xd4>
  419ca2:	nop    WORD PTR [rax+rax*1+0x0]
  419ca8:	mov    rax,QWORD PTR [rbx+0x8]
  419cac:	mov    rdi,QWORD PTR [rax+0xb80]
  419cb3:	cmp    rdi,QWORD PTR [rbx]
  419cb6:	je     419cf4 <flatcc_emitter_reset@@Base+0xd4>
  419cb8:	mov    rdx,QWORD PTR [rdi+0xb80]
  419cbf:	mov    QWORD PTR [rax+0xb80],rdx
  419cc6:	mov    rdx,QWORD PTR [rdi+0xb80]
  419ccd:	mov    QWORD PTR [rdx+0xb88],rax
  419cd4:	call   406160 <free@plt>
  419cd9:	mov    rax,QWORD PTR [rbx+0x38]
  419cdd:	mov    rcx,QWORD PTR [rbx+0x40]
  419ce1:	sub    rax,0xb80
  419ce7:	lea    rdx,[rcx+rcx*1]
  419ceb:	mov    QWORD PTR [rbx+0x38],rax
  419cef:	cmp    rax,rdx
  419cf2:	ja     419ca8 <flatcc_emitter_reset@@Base+0x88>
  419cf4:	pop    rbx
  419cf5:	ret    
  419cf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  419d00:	ret    
  419d01:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  419d0c:	nop    DWORD PTR [rax+0x0]

0000000000419d10 <flatcc_emitter_clear@@Base>:
  419d10:	endbr64 
  419d14:	mov    rax,QWORD PTR [rdi]
  419d17:	test   rax,rax
  419d1a:	je     419d98 <flatcc_emitter_clear@@Base+0x88>
  419d1c:	push   rbp
  419d1d:	mov    rbp,rdi
  419d20:	push   rbx
  419d21:	sub    rsp,0x8
  419d25:	mov    rdx,QWORD PTR [rax+0xb88]
  419d2c:	mov    QWORD PTR [rdx+0xb80],0x0
  419d37:	mov    rbx,QWORD PTR [rax+0xb80]
  419d3e:	test   rbx,rbx
  419d41:	jne    419d4b <flatcc_emitter_clear@@Base+0x3b>
  419d43:	jmp    419da0 <flatcc_emitter_clear@@Base+0x90>
  419d45:	nop    DWORD PTR [rax]
  419d48:	mov    rbx,rax
  419d4b:	mov    rdi,QWORD PTR [rbx+0xb88]
  419d52:	call   406160 <free@plt>
  419d57:	mov    rax,QWORD PTR [rbx+0xb80]
  419d5e:	test   rax,rax
  419d61:	jne    419d48 <flatcc_emitter_clear@@Base+0x38>
  419d63:	mov    rdi,rbx
  419d66:	call   406160 <free@plt>
  419d6b:	mov    QWORD PTR [rbp+0x40],0x0
  419d73:	vpxor  xmm0,xmm0,xmm0
  419d77:	vmovups XMMWORD PTR [rbp+0x0],xmm0
  419d7c:	vmovups XMMWORD PTR [rbp+0x10],xmm0
  419d81:	vmovups XMMWORD PTR [rbp+0x20],xmm0
  419d86:	vmovups XMMWORD PTR [rbp+0x30],xmm0
  419d8b:	add    rsp,0x8
  419d8f:	pop    rbx
  419d90:	pop    rbp
  419d91:	ret    
  419d92:	nop    WORD PTR [rax+rax*1+0x0]
  419d98:	ret    
  419d99:	nop    DWORD PTR [rax+0x0]
  419da0:	mov    rbx,rax
  419da3:	jmp    419d63 <flatcc_emitter_clear@@Base+0x53>
  419da5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000419db0 <flatcc_emitter@@Base>:
  419db0:	endbr64 
  419db4:	push   r15
  419db6:	push   r14
  419db8:	push   r13
  419dba:	push   r12
  419dbc:	push   rbp
  419dbd:	mov    rbp,rsi
  419dc0:	push   rbx
  419dc1:	mov    rbx,rdi
  419dc4:	sub    rsp,0x18
  419dc8:	add    QWORD PTR [rdi+0x30],r8
  419dcc:	test   ecx,ecx
  419dce:	js     419fe0 <flatcc_emitter@@Base+0x230>
  419dd4:	mov    rax,QWORD PTR [rdi+0x28]
  419dd8:	cmp    rax,r8
  419ddb:	jae    419e68 <flatcc_emitter@@Base+0xb8>
  419de1:	test   edx,edx
  419de3:	je     419e53 <flatcc_emitter@@Base+0xa3>
  419de5:	lea    r14d,[rdx-0x1]
  419de9:	inc    r14
  419dec:	shl    r14,0x4
  419df0:	lea    rax,[rbp+r14*1+0x0]
  419df5:	mov    QWORD PTR [rsp+0x8],rax
  419dfa:	nop    WORD PTR [rax+rax*1+0x0]
  419e00:	mov    r15,QWORD PTR [rbp+0x8]
  419e04:	mov    r13,QWORD PTR [rbp+0x0]
  419e08:	test   r15,r15
  419e0b:	je     419e48 <flatcc_emitter@@Base+0x98>
  419e0d:	nop    DWORD PTR [rax]
  419e10:	mov    r12,QWORD PTR [rbx+0x28]
  419e14:	cmp    r15,r12
  419e17:	jbe    419f10 <flatcc_emitter@@Base+0x160>
  419e1d:	test   r12,r12
  419e20:	je     419eb8 <flatcc_emitter@@Base+0x108>
  419e26:	sub    r15,r12
  419e29:	mov    rdi,QWORD PTR [rbx+0x20]
  419e2d:	mov    rsi,r13
  419e30:	mov    rdx,r12
  419e33:	call   406210 <memcpy@plt>
  419e38:	add    r13,r12
  419e3b:	add    QWORD PTR [rbx+0x20],r12
  419e3f:	sub    QWORD PTR [rbx+0x28],r12
  419e43:	test   r15,r15
  419e46:	jne    419e10 <flatcc_emitter@@Base+0x60>
  419e48:	add    rbp,0x10
  419e4c:	cmp    rbp,QWORD PTR [rsp+0x8]
  419e51:	jne    419e00 <flatcc_emitter@@Base+0x50>
  419e53:	add    rsp,0x18
  419e57:	pop    rbx
  419e58:	pop    rbp
  419e59:	pop    r12
  419e5b:	pop    r13
  419e5d:	pop    r14
  419e5f:	xor    eax,eax
  419e61:	pop    r15
  419e63:	ret    
  419e64:	nop    DWORD PTR [rax+0x0]
  419e68:	mov    rcx,QWORD PTR [rdi+0x20]
  419e6c:	sub    rax,r8
  419e6f:	lea    rsi,[rcx+r8*1]
  419e73:	mov    QWORD PTR [rdi+0x20],rsi
  419e77:	mov    QWORD PTR [rdi+0x28],rax
  419e7b:	test   edx,edx
  419e7d:	je     419e53 <flatcc_emitter@@Base+0xa3>
  419e7f:	lea    ebx,[rdx-0x1]
  419e82:	inc    rbx
  419e85:	shl    rbx,0x4
  419e89:	add    rbx,rbp
  419e8c:	nop    DWORD PTR [rax+0x0]
  419e90:	mov    rsi,QWORD PTR [rbp+0x0]
  419e94:	mov    rdx,QWORD PTR [rbp+0x8]
  419e98:	mov    rdi,rcx
  419e9b:	call   406210 <memcpy@plt>
  419ea0:	mov    rcx,QWORD PTR [rbp+0x8]
  419ea4:	add    rbp,0x10
  419ea8:	add    rcx,rax
  419eab:	cmp    rbp,rbx
  419eae:	jne    419e90 <flatcc_emitter@@Base+0xe0>
  419eb0:	jmp    419e53 <flatcc_emitter@@Base+0xa3>
  419eb2:	nop    WORD PTR [rax+rax*1+0x0]
  419eb8:	mov    r12,QWORD PTR [rbx+0x8]
  419ebc:	test   r12,r12
  419ebf:	je     419f68 <flatcc_emitter@@Base+0x1b8>
  419ec5:	mov    rax,QWORD PTR [r12+0xb80]
  419ecd:	mov    r14,QWORD PTR [rbx]
  419ed0:	cmp    rax,r14
  419ed3:	je     419f20 <flatcc_emitter@@Base+0x170>
  419ed5:	mov    QWORD PTR [rbx+0x8],rax
  419ed9:	mov    QWORD PTR [rbx+0x28],0xb80
  419ee1:	mov    rdx,QWORD PTR [rax+0xb88]
  419ee8:	mov    QWORD PTR [rbx+0x20],rax
  419eec:	mov    edx,DWORD PTR [rdx+0xb90]
  419ef2:	mov    r12,QWORD PTR [rbx+0x28]
  419ef6:	add    edx,0xb80
  419efc:	mov    DWORD PTR [rax+0xb90],edx
  419f02:	cmp    r15,r12
  419f05:	ja     419e1d <flatcc_emitter@@Base+0x6d>
  419f0b:	nop    DWORD PTR [rax+rax*1+0x0]
  419f10:	mov    r12,r15
  419f13:	xor    r15d,r15d
  419f16:	jmp    419e29 <flatcc_emitter@@Base+0x79>
  419f1b:	nop    DWORD PTR [rax+rax*1+0x0]
  419f20:	mov    edi,0xb98
  419f25:	call   406220 <malloc@plt>
  419f2a:	test   rax,rax
  419f2d:	je     419fc8 <flatcc_emitter@@Base+0x218>
  419f33:	add    QWORD PTR [rbx+0x38],0xb80
  419f3b:	mov    QWORD PTR [rax+0xb88],r12
  419f42:	mov    QWORD PTR [rax+0xb80],r14
  419f49:	mov    QWORD PTR [r14+0xb88],rax
  419f50:	mov    QWORD PTR [r12+0xb80],rax
  419f58:	mov    QWORD PTR [rbx+0x8],rax
  419f5c:	jmp    419ed9 <flatcc_emitter@@Base+0x129>
  419f61:	nop    DWORD PTR [rax+0x0]
  419f68:	mov    edi,0xb98
  419f6d:	call   406220 <malloc@plt>
  419f72:	test   rax,rax
  419f75:	je     419fc8 <flatcc_emitter@@Base+0x218>
  419f77:	lea    rdx,[rax+0x5c0]
  419f7e:	add    QWORD PTR [rbx+0x38],0xb80
  419f86:	mov    QWORD PTR [rbx],rax
  419f89:	mov    QWORD PTR [rbx+0x8],rax
  419f8d:	mov    QWORD PTR [rax+0xb80],rax
  419f94:	mov    QWORD PTR [rax+0xb88],rax
  419f9b:	mov    QWORD PTR [rbx+0x10],rdx
  419f9f:	mov    QWORD PTR [rbx+0x20],rdx
  419fa3:	mov    QWORD PTR [rbx+0x18],0x5c0
  419fab:	mov    QWORD PTR [rbx+0x28],0x5c0
  419fb3:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  419fbd:	jmp    419e10 <flatcc_emitter@@Base+0x60>
  419fc2:	nop    WORD PTR [rax+rax*1+0x0]
  419fc8:	add    rsp,0x18
  419fcc:	pop    rbx
  419fcd:	pop    rbp
  419fce:	pop    r12
  419fd0:	pop    r13
  419fd2:	pop    r14
  419fd4:	mov    eax,0xffffffff
  419fd9:	pop    r15
  419fdb:	ret    
  419fdc:	nop    DWORD PTR [rax+0x0]
  419fe0:	mov    rax,QWORD PTR [rdi+0x18]
  419fe4:	cmp    rax,r8
  419fe7:	jae    41a190 <flatcc_emitter@@Base+0x3e0>
  419fed:	movsxd rax,edx
  419ff0:	shl    rax,0x4
  419ff4:	add    rbp,rax
  419ff7:	mov    edx,edx
  419ff9:	shl    rdx,0x4
  419ffd:	mov    rax,rbp
  41a000:	sub    rax,rdx
  41a003:	mov    QWORD PTR [rsp+0x8],rax
  41a008:	nop    DWORD PTR [rax+rax*1+0x0]
  41a010:	cmp    rbp,QWORD PTR [rsp+0x8]
  41a015:	je     419e53 <flatcc_emitter@@Base+0xa3>
  41a01b:	sub    rbp,0x10
  41a01f:	mov    r12,QWORD PTR [rbp+0x8]
  41a023:	mov    r13,QWORD PTR [rbp+0x0]
  41a027:	add    r13,r12
  41a02a:	test   r12,r12
  41a02d:	je     41a010 <flatcc_emitter@@Base+0x260>
  41a02f:	mov    rdx,QWORD PTR [rbx+0x18]
  41a033:	cmp    rdx,r12
  41a036:	jae    41a070 <flatcc_emitter@@Base+0x2c0>
  41a038:	test   rdx,rdx
  41a03b:	je     41a080 <flatcc_emitter@@Base+0x2d0>
  41a03d:	sub    r12,rdx
  41a040:	xor    ecx,ecx
  41a042:	mov    rdi,QWORD PTR [rbx+0x10]
  41a046:	mov    rax,rdx
  41a049:	neg    rax
  41a04c:	add    rdi,rax
  41a04f:	mov    QWORD PTR [rbx+0x10],rdi
  41a053:	mov    QWORD PTR [rbx+0x18],rcx
  41a057:	add    r13,rax
  41a05a:	mov    rsi,r13
  41a05d:	call   406210 <memcpy@plt>
  41a062:	test   r12,r12
  41a065:	je     41a010 <flatcc_emitter@@Base+0x260>
  41a067:	mov    rdx,QWORD PTR [rbx+0x18]
  41a06b:	cmp    rdx,r12
  41a06e:	jb     41a038 <flatcc_emitter@@Base+0x288>
  41a070:	mov    rcx,rdx
  41a073:	sub    rcx,r12
  41a076:	mov    rdx,r12
  41a079:	xor    r12d,r12d
  41a07c:	jmp    41a042 <flatcc_emitter@@Base+0x292>
  41a07e:	xchg   ax,ax
  41a080:	mov    r15,QWORD PTR [rbx]
  41a083:	test   r15,r15
  41a086:	je     41a128 <flatcc_emitter@@Base+0x378>
  41a08c:	mov    rax,QWORD PTR [r15+0xb88]
  41a093:	mov    r14,QWORD PTR [rbx+0x8]
  41a097:	cmp    rax,r14
  41a09a:	je     41a0e8 <flatcc_emitter@@Base+0x338>
  41a09c:	mov    edx,DWORD PTR [r15+0xb90]
  41a0a3:	sub    edx,0xb80
  41a0a9:	mov    DWORD PTR [rax+0xb90],edx
  41a0af:	mov    QWORD PTR [rbx],rax
  41a0b2:	lea    rdx,[rax+0xb80]
  41a0b9:	mov    QWORD PTR [rbx+0x10],rdx
  41a0bd:	mov    rdx,QWORD PTR [rax+0xb80]
  41a0c4:	mov    QWORD PTR [rbx+0x18],0xb80
  41a0cc:	mov    edx,DWORD PTR [rdx+0xb90]
  41a0d2:	sub    edx,0xb80
  41a0d8:	mov    DWORD PTR [rax+0xb90],edx
  41a0de:	jmp    41a02f <flatcc_emitter@@Base+0x27f>
  41a0e3:	nop    DWORD PTR [rax+rax*1+0x0]
  41a0e8:	mov    edi,0xb98
  41a0ed:	call   406220 <malloc@plt>
  41a0f2:	test   rax,rax
  41a0f5:	je     419fc8 <flatcc_emitter@@Base+0x218>
  41a0fb:	add    QWORD PTR [rbx+0x38],0xb80
  41a103:	mov    QWORD PTR [rax+0xb88],r14
  41a10a:	mov    QWORD PTR [rax+0xb80],r15
  41a111:	mov    QWORD PTR [r15+0xb88],rax
  41a118:	mov    QWORD PTR [r14+0xb80],rax
  41a11f:	mov    QWORD PTR [rbx],rax
  41a122:	jmp    41a0b2 <flatcc_emitter@@Base+0x302>
  41a124:	nop    DWORD PTR [rax+0x0]
  41a128:	mov    edi,0xb98
  41a12d:	call   406220 <malloc@plt>
  41a132:	test   rax,rax
  41a135:	je     419fc8 <flatcc_emitter@@Base+0x218>
  41a13b:	lea    rdx,[rax+0x5c0]
  41a142:	add    QWORD PTR [rbx+0x38],0xb80
  41a14a:	mov    QWORD PTR [rbx],rax
  41a14d:	mov    QWORD PTR [rbx+0x8],rax
  41a151:	mov    QWORD PTR [rax+0xb80],rax
  41a158:	mov    QWORD PTR [rax+0xb88],rax
  41a15f:	mov    QWORD PTR [rbx+0x10],rdx
  41a163:	mov    QWORD PTR [rbx+0x20],rdx
  41a167:	mov    QWORD PTR [rbx+0x18],0x5c0
  41a16f:	mov    QWORD PTR [rbx+0x28],0x5c0
  41a177:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  41a181:	jmp    41a02f <flatcc_emitter@@Base+0x27f>
  41a186:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41a190:	mov    rcx,QWORD PTR [rdi+0x10]
  41a194:	sub    rax,r8
  41a197:	sub    rcx,r8
  41a19a:	mov    QWORD PTR [rdi+0x10],rcx
  41a19e:	mov    QWORD PTR [rdi+0x18],rax
  41a1a2:	jmp    419e7b <flatcc_emitter@@Base+0xcb>
  41a1a7:	nop    WORD PTR [rax+rax*1+0x0]

000000000041a1b0 <flatcc_emitter_copy_buffer@@Base>:
  41a1b0:	endbr64 
  41a1b4:	mov    rax,QWORD PTR [rdi+0x30]
  41a1b8:	cmp    rax,rdx
  41a1bb:	ja     41a260 <flatcc_emitter_copy_buffer@@Base+0xb0>
  41a1c1:	mov    rcx,QWORD PTR [rdi]
  41a1c4:	test   rcx,rcx
  41a1c7:	je     41a262 <flatcc_emitter_copy_buffer@@Base+0xb2>
  41a1cd:	push   rbp
  41a1ce:	mov    r8,rsi
  41a1d1:	mov    rbp,rdi
  41a1d4:	push   rbx
  41a1d5:	sub    rsp,0x8
  41a1d9:	mov    rsi,QWORD PTR [rdi+0x10]
  41a1dd:	cmp    rcx,QWORD PTR [rdi+0x8]
  41a1e1:	je     41a270 <flatcc_emitter_copy_buffer@@Base+0xc0>
  41a1e7:	mov    ecx,0xb80
  41a1ec:	mov    rbx,rcx
  41a1ef:	sub    rbx,QWORD PTR [rdi+0x18]
  41a1f3:	mov    rdx,rbx
  41a1f6:	mov    rdi,r8
  41a1f9:	call   406210 <memcpy@plt>
  41a1fe:	lea    rcx,[rax+rbx*1]
  41a202:	mov    rax,QWORD PTR [rbp+0x0]
  41a206:	mov    rbx,QWORD PTR [rax+0xb80]
  41a20d:	cmp    rbx,QWORD PTR [rbp+0x8]
  41a211:	je     41a23f <flatcc_emitter_copy_buffer@@Base+0x8f>
  41a213:	nop    DWORD PTR [rax+rax*1+0x0]
  41a218:	mov    rsi,rbx
  41a21b:	mov    rdi,rcx
  41a21e:	mov    edx,0xb80
  41a223:	call   406210 <memcpy@plt>
  41a228:	mov    rbx,QWORD PTR [rbx+0xb80]
  41a22f:	mov    rcx,rax
  41a232:	add    rcx,0xb80
  41a239:	cmp    QWORD PTR [rbp+0x8],rbx
  41a23d:	jne    41a218 <flatcc_emitter_copy_buffer@@Base+0x68>
  41a23f:	mov    edx,0xb80
  41a244:	sub    rdx,QWORD PTR [rbp+0x28]
  41a248:	mov    rsi,rbx
  41a24b:	mov    rdi,rcx
  41a24e:	call   406210 <memcpy@plt>
  41a253:	add    rsp,0x8
  41a257:	mov    rcx,rax
  41a25a:	pop    rbx
  41a25b:	mov    rax,rcx
  41a25e:	pop    rbp
  41a25f:	ret    
  41a260:	xor    ecx,ecx
  41a262:	mov    rax,rcx
  41a265:	ret    
  41a266:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41a270:	mov    rdx,rax
  41a273:	mov    rdi,r8
  41a276:	call   406210 <memcpy@plt>
  41a27b:	add    rsp,0x8
  41a27f:	mov    rcx,rax
  41a282:	pop    rbx
  41a283:	mov    rax,rcx
  41a286:	pop    rbp
  41a287:	ret    
  41a288:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041a290 <flatcc_verify_error_string@@Base>:
  41a290:	endbr64 
  41a294:	cmp    edi,0x24
  41a297:	ja     41a500 <flatcc_verify_error_string@@Base+0x270>
  41a29d:	lea    rdx,[rip+0x15114]        # 42f3b8 <flatcc_builder_padding_base@@Base+0x698>
  41a2a4:	mov    edi,edi
  41a2a6:	movsxd rax,DWORD PTR [rdx+rdi*4]
  41a2aa:	add    rax,rdx
  41a2ad:	notrack jmp rax
  41a2b0:	lea    rax,[rip+0x14c71]        # 42ef28 <flatcc_builder_padding_base@@Base+0x208>
  41a2b7:	ret    
  41a2b8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a2c0:	lea    rax,[rip+0x14de5]        # 42f0ac <flatcc_builder_padding_base@@Base+0x38c>
  41a2c7:	ret    
  41a2c8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a2d0:	lea    rax,[rip+0x150b9]        # 42f390 <flatcc_builder_padding_base@@Base+0x670>
  41a2d7:	ret    
  41a2d8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a2e0:	lea    rax,[rip+0x15071]        # 42f358 <flatcc_builder_padding_base@@Base+0x638>
  41a2e7:	ret    
  41a2e8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a2f0:	lea    rax,[rip+0x15039]        # 42f330 <flatcc_builder_padding_base@@Base+0x610>
  41a2f7:	ret    
  41a2f8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a300:	lea    rax,[rip+0x15001]        # 42f308 <flatcc_builder_padding_base@@Base+0x5e8>
  41a307:	ret    
  41a308:	nop    DWORD PTR [rax+rax*1+0x0]
  41a310:	lea    rax,[rip+0x14d80]        # 42f097 <flatcc_builder_padding_base@@Base+0x377>
  41a317:	ret    
  41a318:	nop    DWORD PTR [rax+rax*1+0x0]
  41a320:	lea    rax,[rip+0x14fb9]        # 42f2e0 <flatcc_builder_padding_base@@Base+0x5c0>
  41a327:	ret    
  41a328:	nop    DWORD PTR [rax+rax*1+0x0]
  41a330:	lea    rax,[rip+0x14f81]        # 42f2b8 <flatcc_builder_padding_base@@Base+0x598>
  41a337:	ret    
  41a338:	nop    DWORD PTR [rax+rax*1+0x0]
  41a340:	lea    rax,[rip+0x14d38]        # 42f07f <flatcc_builder_padding_base@@Base+0x35f>
  41a347:	ret    
  41a348:	nop    DWORD PTR [rax+rax*1+0x0]
  41a350:	lea    rax,[rip+0x14d0d]        # 42f064 <flatcc_builder_padding_base@@Base+0x344>
  41a357:	ret    
  41a358:	nop    DWORD PTR [rax+rax*1+0x0]
  41a360:	lea    rax,[rip+0x14ce9]        # 42f050 <flatcc_builder_padding_base@@Base+0x330>
  41a367:	ret    
  41a368:	nop    DWORD PTR [rax+rax*1+0x0]
  41a370:	lea    rax,[rip+0x14f11]        # 42f288 <flatcc_builder_padding_base@@Base+0x568>
  41a377:	ret    
  41a378:	nop    DWORD PTR [rax+rax*1+0x0]
  41a380:	lea    rax,[rip+0x14ed1]        # 42f258 <flatcc_builder_padding_base@@Base+0x538>
  41a387:	ret    
  41a388:	nop    DWORD PTR [rax+rax*1+0x0]
  41a390:	lea    rax,[rip+0x14e91]        # 42f228 <flatcc_builder_padding_base@@Base+0x508>
  41a397:	ret    
  41a398:	nop    DWORD PTR [rax+rax*1+0x0]
  41a3a0:	lea    rax,[rip+0x14e49]        # 42f1f0 <flatcc_builder_padding_base@@Base+0x4d0>
  41a3a7:	ret    
  41a3a8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a3b0:	lea    rax,[rip+0x14e09]        # 42f1c0 <flatcc_builder_padding_base@@Base+0x4a0>
  41a3b7:	ret    
  41a3b8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a3c0:	lea    rax,[rip+0x14c71]        # 42f038 <flatcc_builder_padding_base@@Base+0x318>
  41a3c7:	ret    
  41a3c8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a3d0:	lea    rax,[rip+0x14dc1]        # 42f198 <flatcc_builder_padding_base@@Base+0x478>
  41a3d7:	ret    
  41a3d8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a3e0:	lea    rax,[rip+0x14c3d]        # 42f024 <flatcc_builder_padding_base@@Base+0x304>
  41a3e7:	ret    
  41a3e8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a3f0:	lea    rax,[rip+0x14d79]        # 42f170 <flatcc_builder_padding_base@@Base+0x450>
  41a3f7:	ret    
  41a3f8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a400:	lea    rax,[rip+0x14d41]        # 42f148 <flatcc_builder_padding_base@@Base+0x428>
  41a407:	ret    
  41a408:	nop    DWORD PTR [rax+rax*1+0x0]
  41a410:	lea    rax,[rip+0x14d09]        # 42f120 <flatcc_builder_padding_base@@Base+0x400>
  41a417:	ret    
  41a418:	nop    DWORD PTR [rax+rax*1+0x0]
  41a420:	lea    rax,[rip+0x14be3]        # 42f00a <flatcc_builder_padding_base@@Base+0x2ea>
  41a427:	ret    
  41a428:	nop    DWORD PTR [rax+rax*1+0x0]
  41a430:	lea    rax,[rip+0x14bba]        # 42eff1 <flatcc_builder_padding_base@@Base+0x2d1>
  41a437:	ret    
  41a438:	nop    DWORD PTR [rax+rax*1+0x0]
  41a440:	lea    rax,[rip+0x14b92]        # 42efd9 <flatcc_builder_padding_base@@Base+0x2b9>
  41a447:	ret    
  41a448:	nop    DWORD PTR [rax+rax*1+0x0]
  41a450:	lea    rax,[rip+0x14b71]        # 42efc8 <flatcc_builder_padding_base@@Base+0x2a8>
  41a457:	ret    
  41a458:	nop    DWORD PTR [rax+rax*1+0x0]
  41a460:	lea    rax,[rip+0x14b4c]        # 42efb3 <flatcc_builder_padding_base@@Base+0x293>
  41a467:	ret    
  41a468:	nop    DWORD PTR [rax+rax*1+0x0]
  41a470:	lea    rax,[rip+0x14b28]        # 42ef9f <flatcc_builder_padding_base@@Base+0x27f>
  41a477:	ret    
  41a478:	nop    DWORD PTR [rax+rax*1+0x0]
  41a480:	lea    rax,[rip+0x14b04]        # 42ef8b <flatcc_builder_padding_base@@Base+0x26b>
  41a487:	ret    
  41a488:	nop    DWORD PTR [rax+rax*1+0x0]
  41a490:	lea    rax,[rip+0x14ad9]        # 42ef70 <flatcc_builder_padding_base@@Base+0x250>
  41a497:	ret    
  41a498:	nop    DWORD PTR [rax+rax*1+0x0]
  41a4a0:	lea    rax,[rip+0x14c59]        # 42f100 <flatcc_builder_padding_base@@Base+0x3e0>
  41a4a7:	ret    
  41a4a8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a4b0:	lea    rax,[rip+0x14c21]        # 42f0d8 <flatcc_builder_padding_base@@Base+0x3b8>
  41a4b7:	ret    
  41a4b8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a4c0:	lea    rax,[rip+0x14a92]        # 42ef59 <flatcc_builder_padding_base@@Base+0x239>
  41a4c7:	ret    
  41a4c8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a4d0:	lea    rax,[rip+0x14a68]        # 42ef3f <flatcc_builder_padding_base@@Base+0x21f>
  41a4d7:	ret    
  41a4d8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a4e0:	lea    rax,[rip+0x14a44]        # 42ef2b <flatcc_builder_padding_base@@Base+0x20b>
  41a4e7:	ret    
  41a4e8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a4f0:	lea    rax,[rip+0x14bc3]        # 42f0ba <flatcc_builder_padding_base@@Base+0x39a>
  41a4f7:	ret    
  41a4f8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a500:	lea    rax,[rip+0x14a19]        # 42ef20 <flatcc_builder_padding_base@@Base+0x200>
  41a507:	ret    
  41a508:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041a510 <flatcc_verify_field@@Base>:
  41a510:	endbr64 
  41a514:	lea    esi,[rsi+rsi*1+0x4]
  41a518:	xor    eax,eax
  41a51a:	cmp    si,WORD PTR [rdi+0x1e]
  41a51e:	jae    41a559 <flatcc_verify_field@@Base+0x49>
  41a520:	mov    r8,QWORD PTR [rdi+0x10]
  41a524:	movzx  esi,si
  41a527:	movzx  esi,WORD PTR [r8+rsi*1]
  41a52c:	test   esi,esi
  41a52e:	je     41a559 <flatcc_verify_field@@Base+0x49>
  41a530:	movzx  r8d,WORD PTR [rdi+0x1c]
  41a535:	add    edx,esi
  41a537:	mov    eax,0xd
  41a53c:	cmp    edx,r8d
  41a53f:	ja     41a559 <flatcc_verify_field@@Base+0x49>
  41a541:	mov    eax,DWORD PTR [rdi+0x18]
  41a544:	movzx  ecx,cx
  41a547:	add    eax,DWORD PTR [rdi]
  41a549:	add    eax,esi
  41a54b:	dec    ecx
  41a54d:	and    eax,ecx
  41a54f:	cmp    eax,0x1
  41a552:	sbb    eax,eax
  41a554:	not    eax
  41a556:	and    eax,0xc
  41a559:	ret    
  41a55a:	nop    WORD PTR [rax+rax*1+0x0]

000000000041a560 <flatcc_verify_string_field@@Base>:
  41a560:	endbr64 
  41a564:	lea    esi,[rsi+rsi*1+0x4]
  41a568:	cmp    si,WORD PTR [rdi+0x1e]
  41a56c:	jae    41a600 <flatcc_verify_string_field@@Base+0xa0>
  41a572:	mov    rax,QWORD PTR [rdi+0x10]
  41a576:	movzx  esi,si
  41a579:	movzx  ecx,WORD PTR [rax+rsi*1]
  41a57d:	test   ecx,ecx
  41a57f:	je     41a600 <flatcc_verify_string_field@@Base+0xa0>
  41a581:	movzx  edx,WORD PTR [rdi+0x1c]
  41a585:	lea    esi,[rcx+0x4]
  41a588:	mov    eax,0xd
  41a58d:	cmp    esi,edx
  41a58f:	ja     41a5fa <flatcc_verify_string_field@@Base+0x9a>
  41a591:	add    ecx,DWORD PTR [rdi+0x18]
  41a594:	mov    edx,ecx
  41a596:	mov    eax,0xc
  41a59b:	test   cl,0x3
  41a59e:	jne    41a5fa <flatcc_verify_string_field@@Base+0x9a>
  41a5a0:	test   ecx,ecx
  41a5a2:	je     41a5f8 <flatcc_verify_string_field@@Base+0x98>
  41a5a4:	mov    rsi,QWORD PTR [rdi]
  41a5a7:	mov    eax,ecx
  41a5a9:	add    ecx,DWORD PTR [rsi+rax*1]
  41a5ac:	mov    eax,0x11
  41a5b1:	cmp    edx,ecx
  41a5b3:	jae    41a5fa <flatcc_verify_string_field@@Base+0x9a>
  41a5b5:	mov    r9d,DWORD PTR [rdi+0x8]
  41a5b9:	mov    edi,ecx
  41a5bb:	lea    r8,[rdi+0x4]
  41a5bf:	mov    rdx,r9
  41a5c2:	cmp    r8,r9
  41a5c5:	ja     41a5fa <flatcc_verify_string_field@@Base+0x9a>
  41a5c7:	mov    r9d,ecx
  41a5ca:	and    r9d,0x3
  41a5ce:	jne    41a5fa <flatcc_verify_string_field@@Base+0x9a>
  41a5d0:	mov    edi,DWORD PTR [rsi+rdi*1]
  41a5d3:	sub    edx,0x4
  41a5d6:	sub    edx,ecx
  41a5d8:	lea    ecx,[rdi+0x1]
  41a5db:	mov    eax,0x8
  41a5e0:	cmp    edx,ecx
  41a5e2:	jb     41a5fa <flatcc_verify_string_field@@Base+0x9a>
  41a5e4:	add    rsi,r8
  41a5e7:	cmp    BYTE PTR [rsi+rdi*1],0x0
  41a5eb:	mov    eax,0x7
  41a5f0:	cmove  eax,r9d
  41a5f4:	ret    
  41a5f5:	nop    DWORD PTR [rax]
  41a5f8:	xor    eax,eax
  41a5fa:	ret    
  41a5fb:	nop    DWORD PTR [rax+rax*1+0x0]
  41a600:	xor    eax,eax
  41a602:	test   edx,edx
  41a604:	setne  al
  41a607:	shl    eax,0x2
  41a60a:	ret    
  41a60b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041a610 <flatcc_verify_vector_field@@Base>:
  41a610:	endbr64 
  41a614:	lea    esi,[rsi+rsi*1+0x4]
  41a618:	cmp    si,WORD PTR [rdi+0x1e]
  41a61c:	jae    41a6c8 <flatcc_verify_vector_field@@Base+0xb8>
  41a622:	mov    rax,QWORD PTR [rdi+0x10]
  41a626:	movzx  esi,si
  41a629:	movzx  esi,WORD PTR [rax+rsi*1]
  41a62d:	test   esi,esi
  41a62f:	je     41a6c8 <flatcc_verify_vector_field@@Base+0xb8>
  41a635:	movzx  edx,WORD PTR [rdi+0x1c]
  41a639:	lea    r10d,[rsi+0x4]
  41a63d:	mov    eax,0xd
  41a642:	cmp    r10d,edx
  41a645:	ja     41a6c0 <flatcc_verify_vector_field@@Base+0xb0>
  41a647:	mov    edx,DWORD PTR [rdi+0x18]
  41a64a:	mov    eax,0xc
  41a64f:	add    edx,esi
  41a651:	test   dl,0x3
  41a654:	jne    41a6c0 <flatcc_verify_vector_field@@Base+0xb0>
  41a656:	test   edx,edx
  41a658:	je     41a6d8 <flatcc_verify_vector_field@@Base+0xc8>
  41a65a:	mov    r10,QWORD PTR [rdi]
  41a65d:	mov    eax,edx
  41a65f:	mov    esi,DWORD PTR [r10+rax*1]
  41a663:	mov    eax,0x10
  41a668:	add    esi,edx
  41a66a:	cmp    edx,esi
  41a66c:	jae    41a6c0 <flatcc_verify_vector_field@@Base+0xb0>
  41a66e:	push   rbx
  41a66f:	mov    ebx,esi
  41a671:	lea    r11,[rbx+0x4]
  41a675:	mov    edx,DWORD PTR [rdi+0x8]
  41a678:	mov    rdi,rdx
  41a67b:	cmp    r11,rdx
  41a67e:	ja     41a6bb <flatcc_verify_vector_field@@Base+0xab>
  41a680:	cmp    r8w,0x4
  41a685:	mov    edx,0x4
  41a68a:	cmovae edx,r8d
  41a68e:	movzx  edx,dx
  41a691:	dec    edx
  41a693:	or     edx,0x3
  41a696:	movsxd rdx,edx
  41a699:	test   rdx,r11
  41a69c:	jne    41a6bb <flatcc_verify_vector_field@@Base+0xab>
  41a69e:	mov    edx,DWORD PTR [r10+rbx*1]
  41a6a2:	sub    edi,0x4
  41a6a5:	mov    eax,0x19
  41a6aa:	cmp    edx,r9d
  41a6ad:	ja     41a6bb <flatcc_verify_vector_field@@Base+0xab>
  41a6af:	imul   ecx,edx
  41a6b2:	sub    edi,esi
  41a6b4:	cmp    edi,ecx
  41a6b6:	sbb    eax,eax
  41a6b8:	and    eax,0x1a
  41a6bb:	pop    rbx
  41a6bc:	ret    
  41a6bd:	nop    DWORD PTR [rax]
  41a6c0:	ret    
  41a6c1:	nop    DWORD PTR [rax+0x0]
  41a6c8:	xor    eax,eax
  41a6ca:	test   edx,edx
  41a6cc:	setne  al
  41a6cf:	shl    eax,0x2
  41a6d2:	ret    
  41a6d3:	nop    DWORD PTR [rax+rax*1+0x0]
  41a6d8:	xor    eax,eax
  41a6da:	ret    
  41a6db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041a6e0 <flatcc_verify_string_vector_field@@Base>:
  41a6e0:	endbr64 
  41a6e4:	lea    esi,[rsi+rsi*1+0x4]
  41a6e8:	cmp    si,WORD PTR [rdi+0x1e]
  41a6ec:	jae    41a840 <flatcc_verify_string_vector_field@@Base+0x160>
  41a6f2:	mov    rax,QWORD PTR [rdi+0x10]
  41a6f6:	movzx  esi,si
  41a6f9:	movzx  ecx,WORD PTR [rax+rsi*1]
  41a6fd:	test   ecx,ecx
  41a6ff:	je     41a840 <flatcc_verify_string_vector_field@@Base+0x160>
  41a705:	movzx  edx,WORD PTR [rdi+0x1c]
  41a709:	lea    esi,[rcx+0x4]
  41a70c:	mov    eax,0xd
  41a711:	cmp    esi,edx
  41a713:	ja     41a838 <flatcc_verify_string_vector_field@@Base+0x158>
  41a719:	add    ecx,DWORD PTR [rdi+0x18]
  41a71c:	mov    edx,ecx
  41a71e:	mov    eax,0xc
  41a723:	test   cl,0x3
  41a726:	jne    41a838 <flatcc_verify_string_vector_field@@Base+0x158>
  41a72c:	test   ecx,ecx
  41a72e:	je     41a880 <flatcc_verify_string_vector_field@@Base+0x1a0>
  41a734:	mov    rcx,QWORD PTR [rdi]
  41a737:	mov    eax,edx
  41a739:	mov    esi,DWORD PTR [rcx+rax*1]
  41a73c:	mov    eax,0x10
  41a741:	add    esi,edx
  41a743:	cmp    edx,esi
  41a745:	jae    41a838 <flatcc_verify_string_vector_field@@Base+0x158>
  41a74b:	mov    r9d,DWORD PTR [rdi+0x8]
  41a74f:	mov    r10d,esi
  41a752:	lea    r8,[r10+0x4]
  41a756:	mov    rdi,r9
  41a759:	cmp    r8,r9
  41a75c:	ja     41a838 <flatcc_verify_string_vector_field@@Base+0x158>
  41a762:	push   rbx
  41a763:	test   r8b,0x3
  41a767:	jne    41a850 <flatcc_verify_string_vector_field@@Base+0x170>
  41a76d:	mov    eax,DWORD PTR [rcx+r10*1]
  41a771:	lea    edx,[rsi+0x4]
  41a774:	cmp    eax,0x3fffffff
  41a779:	ja     41a850 <flatcc_verify_string_vector_field@@Base+0x170>
  41a77f:	mov    ebx,r9d
  41a782:	lea    r11d,[rax*4+0x0]
  41a78a:	sub    ebx,edx
  41a78c:	cmp    ebx,r11d
  41a78f:	jb     41a850 <flatcc_verify_string_vector_field@@Base+0x170>
  41a795:	test   eax,eax
  41a797:	je     41a888 <flatcc_verify_string_vector_field@@Base+0x1a8>
  41a79d:	mov    r8d,DWORD PTR [rcx+r10*1+0x4]
  41a7a2:	mov    eax,0x11
  41a7a7:	add    r8d,edx
  41a7aa:	cmp    r8d,edx
  41a7ad:	jbe    41a833 <flatcc_verify_string_vector_field@@Base+0x153>
  41a7b3:	mov    r10d,r8d
  41a7b6:	lea    rsi,[r10+0x4]
  41a7ba:	cmp    rsi,r9
  41a7bd:	ja     41a833 <flatcc_verify_string_vector_field@@Base+0x153>
  41a7bf:	test   r8b,0x3
  41a7c3:	jne    41a833 <flatcc_verify_string_vector_field@@Base+0x153>
  41a7c5:	mov    r10d,DWORD PTR [rcx+r10*1]
  41a7c9:	sub    edi,0x4
  41a7cc:	mov    ebx,edi
  41a7ce:	sub    ebx,r8d
  41a7d1:	lea    r8d,[r10+0x1]
  41a7d5:	mov    eax,0x8
  41a7da:	cmp    ebx,r8d
  41a7dd:	jb     41a833 <flatcc_verify_string_vector_field@@Base+0x153>
  41a7df:	lea    r8d,[rdx+r11*1]
  41a7e3:	jmp    41a80f <flatcc_verify_string_vector_field@@Base+0x12f>
  41a7e5:	nop    DWORD PTR [rax]
  41a7e8:	mov    r10d,ebx
  41a7eb:	lea    rsi,[r10+0x4]
  41a7ef:	cmp    r9,rsi
  41a7f2:	jb     41a82e <flatcc_verify_string_vector_field@@Base+0x14e>
  41a7f4:	test   al,0x3
  41a7f6:	jne    41a82e <flatcc_verify_string_vector_field@@Base+0x14e>
  41a7f8:	mov    r10d,DWORD PTR [rcx+r10*1]
  41a7fc:	mov    r11d,edi
  41a7ff:	sub    r11d,ebx
  41a802:	lea    eax,[r10+0x1]
  41a806:	cmp    r11d,eax
  41a809:	jb     41a88c <flatcc_verify_string_vector_field@@Base+0x1ac>
  41a80f:	add    rsi,rcx
  41a812:	cmp    BYTE PTR [rsi+r10*1],0x0
  41a817:	jne    41a893 <flatcc_verify_string_vector_field@@Base+0x1b3>
  41a819:	add    edx,0x4
  41a81c:	cmp    edx,r8d
  41a81f:	je     41a888 <flatcc_verify_string_vector_field@@Base+0x1a8>
  41a821:	mov    eax,edx
  41a823:	mov    ebx,DWORD PTR [rcx+rax*1]
  41a826:	add    ebx,edx
  41a828:	mov    eax,ebx
  41a82a:	cmp    edx,ebx
  41a82c:	jb     41a7e8 <flatcc_verify_string_vector_field@@Base+0x108>
  41a82e:	mov    eax,0x11
  41a833:	pop    rbx
  41a834:	ret    
  41a835:	nop    DWORD PTR [rax]
  41a838:	ret    
  41a839:	nop    DWORD PTR [rax+0x0]
  41a840:	xor    eax,eax
  41a842:	test   edx,edx
  41a844:	setne  al
  41a847:	shl    eax,0x2
  41a84a:	ret    
  41a84b:	nop    DWORD PTR [rax+rax*1+0x0]
  41a850:	and    r8d,0x3
  41a854:	mov    eax,0x10
  41a859:	jne    41a833 <flatcc_verify_string_vector_field@@Base+0x153>
  41a85b:	mov    edx,DWORD PTR [rcx+r10*1]
  41a85f:	sub    edi,0x4
  41a862:	mov    eax,0x19
  41a867:	cmp    edx,0x3fffffff
  41a86d:	ja     41a833 <flatcc_verify_string_vector_field@@Base+0x153>
  41a86f:	sub    edi,esi
  41a871:	shl    edx,0x2
  41a874:	cmp    edi,edx
  41a876:	sbb    eax,eax
  41a878:	and    eax,0x1a
  41a87b:	pop    rbx
  41a87c:	ret    
  41a87d:	nop    DWORD PTR [rax]
  41a880:	xor    eax,eax
  41a882:	ret    
  41a883:	nop    DWORD PTR [rax+rax*1+0x0]
  41a888:	xor    eax,eax
  41a88a:	pop    rbx
  41a88b:	ret    
  41a88c:	mov    eax,0x8
  41a891:	pop    rbx
  41a892:	ret    
  41a893:	mov    eax,0x7
  41a898:	pop    rbx
  41a899:	ret    
  41a89a:	nop    WORD PTR [rax+rax*1+0x0]

000000000041a8a0 <flatcc_verify_table_field@@Base>:
  41a8a0:	endbr64 
  41a8a4:	sub    rsp,0x38
  41a8a8:	lea    esi,[rsi+rsi*1+0x4]
  41a8ac:	mov    rax,QWORD PTR fs:0x28
  41a8b5:	mov    QWORD PTR [rsp+0x28],rax
  41a8ba:	xor    eax,eax
  41a8bc:	cmp    si,WORD PTR [rdi+0x1e]
  41a8c0:	jae    41a9f8 <flatcc_verify_table_field@@Base+0x158>
  41a8c6:	mov    rax,QWORD PTR [rdi+0x10]
  41a8ca:	movzx  esi,si
  41a8cd:	movzx  esi,WORD PTR [rax+rsi*1]
  41a8d1:	test   esi,esi
  41a8d3:	je     41a9f8 <flatcc_verify_table_field@@Base+0x158>
  41a8d9:	movzx  edx,WORD PTR [rdi+0x1c]
  41a8dd:	lea    r8d,[rsi+0x4]
  41a8e1:	mov    eax,0xd
  41a8e6:	cmp    r8d,edx
  41a8e9:	ja     41a9e0 <flatcc_verify_table_field@@Base+0x140>
  41a8ef:	add    esi,DWORD PTR [rdi+0x18]
  41a8f2:	mov    eax,0xc
  41a8f7:	test   sil,0x3
  41a8fb:	jne    41a9e0 <flatcc_verify_table_field@@Base+0x140>
  41a901:	test   esi,esi
  41a903:	je     41aa08 <flatcc_verify_table_field@@Base+0x168>
  41a909:	mov    edx,DWORD PTR [rdi+0xc]
  41a90c:	mov    r9,QWORD PTR [rdi]
  41a90f:	mov    eax,esi
  41a911:	dec    edx
  41a913:	mov    r8d,DWORD PTR [r9+rax*1]
  41a917:	mov    r10d,DWORD PTR [rdi+0x8]
  41a91b:	mov    DWORD PTR [rsp+0xc],edx
  41a91f:	mov    eax,0x3
  41a924:	je     41a9e0 <flatcc_verify_table_field@@Base+0x140>
  41a92a:	lea    edx,[rsi+r8*1]
  41a92e:	mov    eax,0xf
  41a933:	cmp    esi,edx
  41a935:	jae    41a9e0 <flatcc_verify_table_field@@Base+0x140>
  41a93b:	mov    esi,edx
  41a93d:	mov    edi,r10d
  41a940:	lea    r8,[rsi+0x4]
  41a944:	cmp    r8,rdi
  41a947:	ja     41a9e0 <flatcc_verify_table_field@@Base+0x140>
  41a94d:	test   dl,0x3
  41a950:	jne    41a9e0 <flatcc_verify_table_field@@Base+0x140>
  41a956:	mov    DWORD PTR [rsp+0x18],edx
  41a95a:	mov    eax,edx
  41a95c:	sub    eax,DWORD PTR [r9+rsi*1]
  41a960:	mov    esi,eax
  41a962:	js     41aa0c <flatcc_verify_table_field@@Base+0x16c>
  41a968:	mov    r8d,eax
  41a96b:	mov    eax,0x1d
  41a970:	test   sil,0x1
  41a974:	jne    41a9e0 <flatcc_verify_table_field@@Base+0x140>
  41a976:	lea    r11,[r8+0x2]
  41a97a:	mov    eax,0x1b
  41a97f:	cmp    rdi,r11
  41a982:	jb     41a9e0 <flatcc_verify_table_field@@Base+0x140>
  41a984:	lea    r11,[r9+r8*1]
  41a988:	movzx  eax,WORD PTR [r11]
  41a98c:	add    esi,eax
  41a98e:	mov    edi,eax
  41a990:	mov    WORD PTR [rsp+0x1e],ax
  41a995:	mov    eax,0x1e
  41a99a:	cmp    r10d,esi
  41a99d:	jb     41a9e0 <flatcc_verify_table_field@@Base+0x140>
  41a99f:	test   dil,0x1
  41a9a3:	jne    41a9e0 <flatcc_verify_table_field@@Base+0x140>
  41a9a5:	mov    eax,0x1c
  41a9aa:	cmp    di,0x3
  41a9ae:	jbe    41a9e0 <flatcc_verify_table_field@@Base+0x140>
  41a9b0:	movzx  eax,WORD PTR [r9+r8*1+0x2]
  41a9b6:	mov    esi,r10d
  41a9b9:	sub    esi,edx
  41a9bb:	movzx  edx,ax
  41a9be:	mov    WORD PTR [rsp+0x1c],ax
  41a9c3:	mov    eax,0x14
  41a9c8:	cmp    esi,edx
  41a9ca:	jb     41a9e0 <flatcc_verify_table_field@@Base+0x140>
  41a9cc:	mov    rdi,rsp
  41a9cf:	mov    QWORD PTR [rsp+0x10],r11
  41a9d4:	mov    QWORD PTR [rsp],r9
  41a9d8:	mov    DWORD PTR [rsp+0x8],r10d
  41a9dd:	call   rcx
  41a9df:	nop
  41a9e0:	mov    rcx,QWORD PTR [rsp+0x28]
  41a9e5:	xor    rcx,QWORD PTR fs:0x28
  41a9ee:	jne    41aa13 <flatcc_verify_table_field@@Base+0x173>
  41a9f0:	add    rsp,0x38
  41a9f4:	ret    
  41a9f5:	nop    DWORD PTR [rax]
  41a9f8:	xor    eax,eax
  41a9fa:	test   edx,edx
  41a9fc:	setne  al
  41a9ff:	shl    eax,0x2
  41aa02:	jmp    41a9e0 <flatcc_verify_table_field@@Base+0x140>
  41aa04:	nop    DWORD PTR [rax+0x0]
  41aa08:	xor    eax,eax
  41aa0a:	jmp    41a9e0 <flatcc_verify_table_field@@Base+0x140>
  41aa0c:	mov    eax,0x1d
  41aa11:	jmp    41a9e0 <flatcc_verify_table_field@@Base+0x140>
  41aa13:	call   4061a0 <__stack_chk_fail@plt>
  41aa18:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041aa20 <flatcc_verify_table_vector_field@@Base>:
  41aa20:	endbr64 
  41aa24:	push   r15
  41aa26:	lea    esi,[rsi+rsi*1+0x4]
  41aa2a:	push   r14
  41aa2c:	push   r13
  41aa2e:	push   r12
  41aa30:	push   rbp
  41aa31:	push   rbx
  41aa32:	sub    rsp,0x58
  41aa36:	mov    rax,QWORD PTR fs:0x28
  41aa3f:	mov    QWORD PTR [rsp+0x48],rax
  41aa44:	xor    eax,eax
  41aa46:	cmp    si,WORD PTR [rdi+0x1e]
  41aa4a:	jae    41ac48 <flatcc_verify_table_vector_field@@Base+0x228>
  41aa50:	mov    rax,QWORD PTR [rdi+0x10]
  41aa54:	movzx  esi,si
  41aa57:	movzx  esi,WORD PTR [rax+rsi*1]
  41aa5b:	test   esi,esi
  41aa5d:	je     41ac48 <flatcc_verify_table_vector_field@@Base+0x228>
  41aa63:	movzx  edx,WORD PTR [rdi+0x1c]
  41aa67:	lea    r8d,[rsi+0x4]
  41aa6b:	mov    eax,0xd
  41aa70:	cmp    r8d,edx
  41aa73:	ja     41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41aa79:	add    esi,DWORD PTR [rdi+0x18]
  41aa7c:	mov    eax,0xc
  41aa81:	test   sil,0x3
  41aa85:	jne    41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41aa8b:	test   esi,esi
  41aa8d:	je     41ac51 <flatcc_verify_table_vector_field@@Base+0x231>
  41aa93:	mov    r12,QWORD PTR [rdi]
  41aa96:	mov    r8d,DWORD PTR [rdi+0xc]
  41aa9a:	mov    eax,esi
  41aa9c:	mov    edx,DWORD PTR [r12+rax*1]
  41aaa0:	test   r8d,r8d
  41aaa3:	jle    41acb0 <flatcc_verify_table_vector_field@@Base+0x290>
  41aaa9:	add    edx,esi
  41aaab:	mov    eax,0x10
  41aab0:	cmp    esi,edx
  41aab2:	jae    41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41aab8:	mov    r15d,DWORD PTR [rdi+0x8]
  41aabc:	mov    edi,edx
  41aabe:	lea    rsi,[rdi+0x4]
  41aac2:	mov    r14,r15
  41aac5:	cmp    rsi,r15
  41aac8:	ja     41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41aace:	test   sil,0x3
  41aad2:	jne    41ac58 <flatcc_verify_table_vector_field@@Base+0x238>
  41aad8:	mov    eax,DWORD PTR [r12+rdi*1]
  41aadc:	lea    ebp,[rdx+0x4]
  41aadf:	cmp    eax,0x3fffffff
  41aae4:	ja     41ac58 <flatcc_verify_table_vector_field@@Base+0x238>
  41aaea:	mov    r10d,r15d
  41aaed:	lea    r9d,[rax*4+0x0]
  41aaf5:	sub    r10d,ebp
  41aaf8:	cmp    r10d,r9d
  41aafb:	jb     41ac58 <flatcc_verify_table_vector_field@@Base+0x238>
  41ab01:	test   eax,eax
  41ab03:	je     41ac51 <flatcc_verify_table_vector_field@@Base+0x231>
  41ab09:	lea    rbx,[r12+rsi*1]
  41ab0d:	lea    r13d,[r8-0x2]
  41ab11:	mov    edx,DWORD PTR [rbx]
  41ab13:	mov    eax,0x3
  41ab18:	mov    DWORD PTR [rsp+0x2c],r13d
  41ab1d:	test   r13d,r13d
  41ab20:	je     41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41ab26:	lea    eax,[rbp+rdx*1+0x0]
  41ab2a:	cmp    ebp,eax
  41ab2c:	jae    41ac07 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41ab32:	mov    esi,eax
  41ab34:	lea    rdx,[rsi+0x4]
  41ab38:	cmp    r15,rdx
  41ab3b:	jb     41ac07 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41ab41:	test   al,0x3
  41ab43:	jne    41ac07 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41ab49:	lea    rdi,[rsp+0x20]
  41ab4e:	mov    QWORD PTR [rsp+0x18],rdi
  41ab53:	lea    edx,[rbp+r9*1+0x0]
  41ab58:	nop    DWORD PTR [rax+rax*1+0x0]
  41ab60:	mov    DWORD PTR [rsp+0x38],eax
  41ab64:	mov    DWORD PTR [rsp+0xc],edx
  41ab68:	mov    edx,eax
  41ab6a:	sub    edx,DWORD PTR [r12+rsi*1]
  41ab6e:	mov    esi,edx
  41ab70:	js     41ac07 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41ab76:	mov    edi,edx
  41ab78:	test   dl,0x1
  41ab7b:	jne    41ac07 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41ab81:	lea    r9,[rdi+0x2]
  41ab85:	cmp    r15,r9
  41ab88:	jb     41ac07 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41ab8a:	lea    r10,[r12+rdi*1]
  41ab8e:	movzx  r11d,WORD PTR [r10]
  41ab92:	add    esi,r11d
  41ab95:	mov    WORD PTR [rsp+0x3e],r11w
  41ab9b:	cmp    r14d,esi
  41ab9e:	jb     41ac07 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41aba0:	test   r11b,0x1
  41aba4:	jne    41ac07 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41aba6:	cmp    r11w,0x3
  41abab:	jbe    41ac07 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41abad:	movzx  esi,WORD PTR [r12+rdi*1+0x2]
  41abb3:	mov    edx,r14d
  41abb6:	sub    edx,eax
  41abb8:	mov    WORD PTR [rsp+0x3c],si
  41abbd:	cmp    edx,esi
  41abbf:	jb     41ac07 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41abc1:	mov    rdi,QWORD PTR [rsp+0x18]
  41abc6:	mov    QWORD PTR [rsp+0x10],rcx
  41abcb:	mov    QWORD PTR [rsp+0x30],r10
  41abd0:	mov    QWORD PTR [rsp+0x20],r12
  41abd5:	mov    DWORD PTR [rsp+0x28],r14d
  41abda:	call   rcx
  41abdc:	test   eax,eax
  41abde:	mov    rcx,QWORD PTR [rsp+0x10]
  41abe3:	mov    edx,DWORD PTR [rsp+0xc]
  41abe7:	jne    41ac07 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41abe9:	add    ebp,0x4
  41abec:	cmp    ebp,edx
  41abee:	je     41ac51 <flatcc_verify_table_vector_field@@Base+0x231>
  41abf0:	mov    esi,ebp
  41abf2:	lea    rbx,[r12+rsi*1]
  41abf6:	mov    eax,DWORD PTR [rbx]
  41abf8:	mov    DWORD PTR [rsp+0x2c],r13d
  41abfd:	add    eax,ebp
  41abff:	cmp    ebp,eax
  41ac01:	jb     41ac90 <flatcc_verify_table_vector_field@@Base+0x270>
  41ac07:	mov    edx,DWORD PTR [rbx]
  41ac09:	mov    DWORD PTR [rsp+0x2c],r13d
  41ac0e:	add    edx,ebp
  41ac10:	cmp    edx,ebp
  41ac12:	ja     41acba <flatcc_verify_table_vector_field@@Base+0x29a>
  41ac18:	mov    eax,0xf
  41ac1d:	nop    DWORD PTR [rax]
  41ac20:	mov    rbx,QWORD PTR [rsp+0x48]
  41ac25:	xor    rbx,QWORD PTR fs:0x28
  41ac2e:	jne    41ad46 <flatcc_verify_table_vector_field@@Base+0x326>
  41ac34:	add    rsp,0x58
  41ac38:	pop    rbx
  41ac39:	pop    rbp
  41ac3a:	pop    r12
  41ac3c:	pop    r13
  41ac3e:	pop    r14
  41ac40:	pop    r15
  41ac42:	ret    
  41ac43:	nop    DWORD PTR [rax+rax*1+0x0]
  41ac48:	mov    eax,0x4
  41ac4d:	test   edx,edx
  41ac4f:	jne    41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41ac51:	xor    eax,eax
  41ac53:	jmp    41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41ac55:	nop    DWORD PTR [rax]
  41ac58:	and    esi,0x3
  41ac5b:	mov    eax,0x10
  41ac60:	jne    41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41ac62:	mov    ecx,DWORD PTR [r12+rdi*1]
  41ac66:	sub    r14d,0x4
  41ac6a:	mov    eax,0x19
  41ac6f:	cmp    ecx,0x3fffffff
  41ac75:	ja     41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41ac77:	sub    r14d,edx
  41ac7a:	shl    ecx,0x2
  41ac7d:	mov    eax,0x1a
  41ac82:	cmp    r14d,ecx
  41ac85:	jb     41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41ac87:	xor    eax,eax
  41ac89:	jmp    41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41ac8b:	nop    DWORD PTR [rax+rax*1+0x0]
  41ac90:	mov    esi,eax
  41ac92:	lea    rdi,[rsi+0x4]
  41ac96:	cmp    r15,rdi
  41ac99:	jb     41ac07 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41ac9f:	test   al,0x3
  41aca1:	je     41ab60 <flatcc_verify_table_vector_field@@Base+0x140>
  41aca7:	jmp    41ac07 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41acac:	nop    DWORD PTR [rax+0x0]
  41acb0:	mov    eax,0x3
  41acb5:	jmp    41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41acba:	mov    esi,edx
  41acbc:	lea    rdi,[rsi+0x4]
  41acc0:	mov    eax,0xf
  41acc5:	cmp    r15,rdi
  41acc8:	jb     41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41acce:	test   dl,0x3
  41acd1:	jne    41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41acd7:	mov    DWORD PTR [rsp+0x38],edx
  41acdb:	mov    r8d,edx
  41acde:	sub    r8d,DWORD PTR [r12+rsi*1]
  41ace2:	js     41ad4b <flatcc_verify_table_vector_field@@Base+0x32b>
  41ace4:	mov    esi,r8d
  41ace7:	test   r8b,0x1
  41aceb:	jne    41ad4b <flatcc_verify_table_vector_field@@Base+0x32b>
  41aced:	lea    rax,[rsi+0x2]
  41acf1:	cmp    r15,rax
  41acf4:	jb     41ad73 <flatcc_verify_table_vector_field@@Base+0x353>
  41acf6:	lea    r9,[r12+rsi*1]
  41acfa:	movzx  edi,WORD PTR [r9]
  41acfe:	mov    eax,edi
  41ad00:	mov    WORD PTR [rsp+0x3e],di
  41ad05:	add    edi,r8d
  41ad08:	cmp    r14d,edi
  41ad0b:	jb     41ad55 <flatcc_verify_table_vector_field@@Base+0x335>
  41ad0d:	test   al,0x1
  41ad0f:	jne    41ad55 <flatcc_verify_table_vector_field@@Base+0x335>
  41ad11:	cmp    ax,0x3
  41ad15:	jbe    41ad5f <flatcc_verify_table_vector_field@@Base+0x33f>
  41ad17:	movzx  eax,WORD PTR [r12+rsi*1+0x2]
  41ad1d:	mov    ebx,r14d
  41ad20:	sub    ebx,edx
  41ad22:	mov    WORD PTR [rsp+0x3c],ax
  41ad27:	cmp    ebx,eax
  41ad29:	jb     41ad69 <flatcc_verify_table_vector_field@@Base+0x349>
  41ad2b:	lea    rdi,[rsp+0x20]
  41ad30:	mov    QWORD PTR [rsp+0x30],r9
  41ad35:	mov    QWORD PTR [rsp+0x20],r12
  41ad3a:	mov    DWORD PTR [rsp+0x28],r14d
  41ad3f:	call   rcx
  41ad41:	jmp    41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41ad46:	call   4061a0 <__stack_chk_fail@plt>
  41ad4b:	mov    eax,0x1d
  41ad50:	jmp    41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41ad55:	mov    eax,0x1e
  41ad5a:	jmp    41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41ad5f:	mov    eax,0x1c
  41ad64:	jmp    41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41ad69:	mov    eax,0x14
  41ad6e:	jmp    41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41ad73:	mov    eax,0x1b
  41ad78:	jmp    41ac20 <flatcc_verify_table_vector_field@@Base+0x200>
  41ad7d:	nop    DWORD PTR [rax]

000000000041ad80 <flatcc_verify_union_table@@Base>:
  41ad80:	endbr64 
  41ad84:	sub    rsp,0x38
  41ad88:	mov    edx,DWORD PTR [rdi+0xc]
  41ad8b:	mov    rax,QWORD PTR fs:0x28
  41ad94:	mov    QWORD PTR [rsp+0x28],rax
  41ad99:	xor    eax,eax
  41ad9b:	dec    edx
  41ad9d:	mov    r8d,DWORD PTR [rdi+0x18]
  41ada1:	mov    ecx,DWORD PTR [rdi+0x14]
  41ada4:	mov    r9d,DWORD PTR [rdi+0x8]
  41ada8:	mov    r10,QWORD PTR [rdi]
  41adab:	mov    DWORD PTR [rsp+0xc],edx
  41adaf:	mov    eax,0x3
  41adb4:	je     41adc3 <flatcc_verify_union_table@@Base+0x43>
  41adb6:	lea    edx,[r8+rcx*1]
  41adba:	mov    eax,0xf
  41adbf:	cmp    ecx,edx
  41adc1:	jb     41ade0 <flatcc_verify_union_table@@Base+0x60>
  41adc3:	mov    rsi,QWORD PTR [rsp+0x28]
  41adc8:	xor    rsi,QWORD PTR fs:0x28
  41add1:	jne    41ae9a <flatcc_verify_union_table@@Base+0x11a>
  41add7:	add    rsp,0x38
  41addb:	ret    
  41addc:	nop    DWORD PTR [rax+0x0]
  41ade0:	mov    ecx,edx
  41ade2:	mov    edi,r9d
  41ade5:	lea    r8,[rcx+0x4]
  41ade9:	cmp    r8,rdi
  41adec:	ja     41adc3 <flatcc_verify_union_table@@Base+0x43>
  41adee:	test   dl,0x3
  41adf1:	jne    41adc3 <flatcc_verify_union_table@@Base+0x43>
  41adf3:	mov    DWORD PTR [rsp+0x18],edx
  41adf7:	mov    eax,edx
  41adf9:	sub    eax,DWORD PTR [r10+rcx*1]
  41adfd:	mov    ecx,eax
  41adff:	js     41ae90 <flatcc_verify_union_table@@Base+0x110>
  41ae05:	mov    r8d,eax
  41ae08:	mov    eax,0x1d
  41ae0d:	test   cl,0x1
  41ae10:	jne    41adc3 <flatcc_verify_union_table@@Base+0x43>
  41ae12:	lea    r11,[r8+0x2]
  41ae16:	mov    eax,0x1b
  41ae1b:	cmp    rdi,r11
  41ae1e:	jb     41adc3 <flatcc_verify_union_table@@Base+0x43>
  41ae20:	lea    r11,[r10+r8*1]
  41ae24:	movzx  eax,WORD PTR [r11]
  41ae28:	add    ecx,eax
  41ae2a:	mov    edi,eax
  41ae2c:	mov    WORD PTR [rsp+0x1e],ax
  41ae31:	mov    eax,0x1e
  41ae36:	cmp    r9d,ecx
  41ae39:	jb     41adc3 <flatcc_verify_union_table@@Base+0x43>
  41ae3b:	test   dil,0x1
  41ae3f:	jne    41adc3 <flatcc_verify_union_table@@Base+0x43>
  41ae41:	mov    eax,0x1c
  41ae46:	cmp    di,0x3
  41ae4a:	jbe    41adc3 <flatcc_verify_union_table@@Base+0x43>
  41ae50:	movzx  eax,WORD PTR [r10+r8*1+0x2]
  41ae56:	mov    ecx,r9d
  41ae59:	sub    ecx,edx
  41ae5b:	movzx  edx,ax
  41ae5e:	mov    WORD PTR [rsp+0x1c],ax
  41ae63:	mov    eax,0x14
  41ae68:	cmp    ecx,edx
  41ae6a:	jb     41adc3 <flatcc_verify_union_table@@Base+0x43>
  41ae70:	mov    rdi,rsp
  41ae73:	mov    QWORD PTR [rsp+0x10],r11
  41ae78:	mov    QWORD PTR [rsp],r10
  41ae7c:	mov    DWORD PTR [rsp+0x8],r9d
  41ae81:	call   rsi
  41ae83:	jmp    41adc3 <flatcc_verify_union_table@@Base+0x43>
  41ae88:	nop    DWORD PTR [rax+rax*1+0x0]
  41ae90:	mov    eax,0x1d
  41ae95:	jmp    41adc3 <flatcc_verify_union_table@@Base+0x43>
  41ae9a:	call   4061a0 <__stack_chk_fail@plt>
  41ae9f:	nop

000000000041aea0 <flatcc_verify_union_struct@@Base>:
  41aea0:	endbr64 
  41aea4:	mov    ecx,DWORD PTR [rdi+0x18]
  41aea7:	mov    r8d,DWORD PTR [rdi+0x14]
  41aeab:	mov    eax,0x12
  41aeb0:	mov    edi,DWORD PTR [rdi+0x8]
  41aeb3:	test   ecx,ecx
  41aeb5:	je     41aedc <flatcc_verify_union_struct@@Base+0x3c>
  41aeb7:	add    ecx,r8d
  41aeba:	cmp    edi,ecx
  41aebc:	jb     41aedc <flatcc_verify_union_struct@@Base+0x3c>
  41aebe:	add    esi,ecx
  41aec0:	jb     41aee1 <flatcc_verify_union_struct@@Base+0x41>
  41aec2:	mov    eax,0x9
  41aec7:	cmp    edi,esi
  41aec9:	jb     41aee0 <flatcc_verify_union_struct@@Base+0x40>
  41aecb:	movzx  edx,dx
  41aece:	dec    edx
  41aed0:	and    ecx,edx
  41aed2:	cmp    ecx,0x1
  41aed5:	sbb    eax,eax
  41aed7:	not    eax
  41aed9:	and    eax,0xb
  41aedc:	ret    
  41aedd:	nop    DWORD PTR [rax]
  41aee0:	ret    
  41aee1:	mov    eax,0xa
  41aee6:	ret    
  41aee7:	nop    WORD PTR [rax+rax*1+0x0]

000000000041aef0 <flatcc_verify_union_string@@Base>:
  41aef0:	endbr64 
  41aef4:	mov    ecx,DWORD PTR [rdi+0x14]
  41aef7:	mov    edx,DWORD PTR [rdi+0x18]
  41aefa:	mov    eax,0x11
  41aeff:	add    edx,ecx
  41af01:	cmp    ecx,edx
  41af03:	jae    41af48 <flatcc_verify_union_string@@Base+0x58>
  41af05:	mov    r9d,DWORD PTR [rdi+0x8]
  41af09:	mov    esi,edx
  41af0b:	lea    r8,[rsi+0x4]
  41af0f:	mov    rcx,r9
  41af12:	cmp    r8,r9
  41af15:	ja     41af48 <flatcc_verify_union_string@@Base+0x58>
  41af17:	mov    r9d,edx
  41af1a:	and    r9d,0x3
  41af1e:	jne    41af48 <flatcc_verify_union_string@@Base+0x58>
  41af20:	mov    rdi,QWORD PTR [rdi]
  41af23:	sub    ecx,0x4
  41af26:	mov    esi,DWORD PTR [rdi+rsi*1]
  41af29:	sub    ecx,edx
  41af2b:	lea    edx,[rsi+0x1]
  41af2e:	mov    eax,0x8
  41af33:	cmp    ecx,edx
  41af35:	jb     41af48 <flatcc_verify_union_string@@Base+0x58>
  41af37:	add    r8,rdi
  41af3a:	cmp    BYTE PTR [r8+rsi*1],0x0
  41af3f:	mov    eax,0x7
  41af44:	cmove  eax,r9d
  41af48:	ret    
  41af49:	nop    DWORD PTR [rax+0x0]

000000000041af50 <flatcc_verify_buffer_header@@Base>:
  41af50:	endbr64 
  41af54:	push   rbx
  41af55:	sub    rsp,0x10
  41af59:	mov    rax,QWORD PTR fs:0x28
  41af62:	mov    QWORD PTR [rsp+0x8],rax
  41af67:	xor    eax,eax
  41af69:	mov    eax,0x5
  41af6e:	test   dil,0x3
  41af72:	jne    41afba <flatcc_verify_buffer_header@@Base+0x6a>
  41af74:	mov    rcx,rdx
  41af77:	mov    edx,0xfffffff7
  41af7c:	mov    eax,0x6
  41af81:	cmp    rsi,rdx
  41af84:	ja     41afba <flatcc_verify_buffer_header@@Base+0x6a>
  41af86:	mov    eax,0x1
  41af8b:	cmp    rsi,0x7
  41af8f:	jbe    41afba <flatcc_verify_buffer_header@@Base+0x6a>
  41af91:	test   rcx,rcx
  41af94:	je     41afb8 <flatcc_verify_buffer_header@@Base+0x68>
  41af96:	mov    rbx,rdi
  41af99:	mov    edx,0x4
  41af9e:	lea    rdi,[rsp+0x4]
  41afa3:	mov    rsi,rcx
  41afa6:	call   406170 <strncpy@plt>
  41afab:	mov    eax,DWORD PTR [rsp+0x4]
  41afaf:	cmp    DWORD PTR [rbx+0x4],eax
  41afb2:	je     41afb8 <flatcc_verify_buffer_header@@Base+0x68>
  41afb4:	test   eax,eax
  41afb6:	jne    41afd0 <flatcc_verify_buffer_header@@Base+0x80>
  41afb8:	xor    eax,eax
  41afba:	mov    rcx,QWORD PTR [rsp+0x8]
  41afbf:	xor    rcx,QWORD PTR fs:0x28
  41afc8:	jne    41afd7 <flatcc_verify_buffer_header@@Base+0x87>
  41afca:	add    rsp,0x10
  41afce:	pop    rbx
  41afcf:	ret    
  41afd0:	mov    eax,0x2
  41afd5:	jmp    41afba <flatcc_verify_buffer_header@@Base+0x6a>
  41afd7:	call   4061a0 <__stack_chk_fail@plt>
  41afdc:	nop    DWORD PTR [rax+0x0]

000000000041afe0 <flatcc_verify_typed_buffer_header@@Base>:
  41afe0:	endbr64 
  41afe4:	mov    eax,0x5
  41afe9:	test   dil,0x3
  41afed:	jne    41b019 <flatcc_verify_typed_buffer_header@@Base+0x39>
  41afef:	mov    ecx,0xfffffff7
  41aff4:	mov    eax,0x6
  41aff9:	cmp    rsi,rcx
  41affc:	ja     41b019 <flatcc_verify_typed_buffer_header@@Base+0x39>
  41affe:	mov    eax,0x1
  41b003:	cmp    rsi,0x7
  41b007:	jbe    41b019 <flatcc_verify_typed_buffer_header@@Base+0x39>
  41b009:	xor    eax,eax
  41b00b:	test   edx,edx
  41b00d:	je     41b019 <flatcc_verify_typed_buffer_header@@Base+0x39>
  41b00f:	xor    eax,eax
  41b011:	cmp    edx,DWORD PTR [rdi+0x4]
  41b014:	setne  al
  41b017:	add    eax,eax
  41b019:	ret    
  41b01a:	nop    WORD PTR [rax+rax*1+0x0]

000000000041b020 <flatcc_verify_struct_as_root@@Base>:
  41b020:	endbr64 
  41b024:	push   r14
  41b026:	mov    r14,rdx
  41b029:	push   r13
  41b02b:	mov    r13d,r8d
  41b02e:	push   r12
  41b030:	mov    r12,rdi
  41b033:	push   rbp
  41b034:	mov    rbp,rsi
  41b037:	push   rbx
  41b038:	mov    rbx,rcx
  41b03b:	call   41af50 <flatcc_verify_buffer_header@@Base>
  41b040:	test   eax,eax
  41b042:	jne    41b090 <flatcc_verify_struct_as_root@@Base+0x70>
  41b044:	mov    edx,DWORD PTR [r12]
  41b048:	test   edx,edx
  41b04a:	je     41b078 <flatcc_verify_struct_as_root@@Base+0x58>
  41b04c:	cmp    edx,ebp
  41b04e:	ja     41b078 <flatcc_verify_struct_as_root@@Base+0x58>
  41b050:	add    ebx,edx
  41b052:	jb     41b0b7 <flatcc_verify_struct_as_root@@Base+0x97>
  41b054:	cmp    ebp,ebx
  41b056:	jb     41b0b0 <flatcc_verify_struct_as_root@@Base+0x90>
  41b058:	movzx  r13d,r13w
  41b05c:	dec    r13d
  41b05f:	test   r13d,edx
  41b062:	mov    edx,0xb
  41b067:	cmovne eax,edx
  41b06a:	pop    rbx
  41b06b:	pop    rbp
  41b06c:	pop    r12
  41b06e:	pop    r13
  41b070:	pop    r14
  41b072:	ret    
  41b073:	nop    DWORD PTR [rax+rax*1+0x0]
  41b078:	pop    rbx
  41b079:	pop    rbp
  41b07a:	pop    r12
  41b07c:	pop    r13
  41b07e:	mov    eax,0x12
  41b083:	pop    r14
  41b085:	ret    
  41b086:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41b090:	pop    rbx
  41b091:	mov    rsi,rbp
  41b094:	pop    rbp
  41b095:	mov    rdi,r12
  41b098:	pop    r12
  41b09a:	pop    r13
  41b09c:	mov    rdx,r14
  41b09f:	pop    r14
  41b0a1:	jmp    41af50 <flatcc_verify_buffer_header@@Base>
  41b0a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41b0b0:	mov    eax,0x9
  41b0b5:	jmp    41b06a <flatcc_verify_struct_as_root@@Base+0x4a>
  41b0b7:	mov    eax,0xa
  41b0bc:	jmp    41b06a <flatcc_verify_struct_as_root@@Base+0x4a>
  41b0be:	xchg   ax,ax

000000000041b0c0 <flatcc_verify_struct_as_typed_root@@Base>:
  41b0c0:	endbr64 
  41b0c4:	push   r14
  41b0c6:	mov    r14d,edx
  41b0c9:	push   r13
  41b0cb:	mov    r13d,r8d
  41b0ce:	push   r12
  41b0d0:	mov    r12,rdi
  41b0d3:	push   rbp
  41b0d4:	mov    rbp,rsi
  41b0d7:	push   rbx
  41b0d8:	mov    rbx,rcx
  41b0db:	call   41afe0 <flatcc_verify_typed_buffer_header@@Base>
  41b0e0:	test   eax,eax
  41b0e2:	jne    41b130 <flatcc_verify_struct_as_typed_root@@Base+0x70>
  41b0e4:	mov    edx,DWORD PTR [r12]
  41b0e8:	test   edx,edx
  41b0ea:	je     41b118 <flatcc_verify_struct_as_typed_root@@Base+0x58>
  41b0ec:	cmp    edx,ebp
  41b0ee:	ja     41b118 <flatcc_verify_struct_as_typed_root@@Base+0x58>
  41b0f0:	add    ebx,edx
  41b0f2:	jb     41b157 <flatcc_verify_struct_as_typed_root@@Base+0x97>
  41b0f4:	cmp    ebp,ebx
  41b0f6:	jb     41b150 <flatcc_verify_struct_as_typed_root@@Base+0x90>
  41b0f8:	movzx  r13d,r13w
  41b0fc:	dec    r13d
  41b0ff:	test   r13d,edx
  41b102:	mov    edx,0xb
  41b107:	cmovne eax,edx
  41b10a:	pop    rbx
  41b10b:	pop    rbp
  41b10c:	pop    r12
  41b10e:	pop    r13
  41b110:	pop    r14
  41b112:	ret    
  41b113:	nop    DWORD PTR [rax+rax*1+0x0]
  41b118:	pop    rbx
  41b119:	pop    rbp
  41b11a:	pop    r12
  41b11c:	pop    r13
  41b11e:	mov    eax,0x12
  41b123:	pop    r14
  41b125:	ret    
  41b126:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41b130:	pop    rbx
  41b131:	mov    rsi,rbp
  41b134:	pop    rbp
  41b135:	mov    rdi,r12
  41b138:	pop    r12
  41b13a:	pop    r13
  41b13c:	mov    edx,r14d
  41b13f:	pop    r14
  41b141:	jmp    41afe0 <flatcc_verify_typed_buffer_header@@Base>
  41b146:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41b150:	mov    eax,0x9
  41b155:	jmp    41b10a <flatcc_verify_struct_as_typed_root@@Base+0x4a>
  41b157:	mov    eax,0xa
  41b15c:	jmp    41b10a <flatcc_verify_struct_as_typed_root@@Base+0x4a>
  41b15e:	xchg   ax,ax

000000000041b160 <flatcc_verify_table_as_root@@Base>:
  41b160:	endbr64 
  41b164:	push   r14
  41b166:	mov    r14,rcx
  41b169:	push   r13
  41b16b:	mov    r13,rsi
  41b16e:	push   r12
  41b170:	mov    r12,rdx
  41b173:	push   rbp
  41b174:	mov    ebp,esi
  41b176:	mov    rsi,rbp
  41b179:	push   rbx
  41b17a:	mov    rbx,rdi
  41b17d:	sub    rsp,0x30
  41b181:	mov    rax,QWORD PTR fs:0x28
  41b18a:	mov    QWORD PTR [rsp+0x28],rax
  41b18f:	xor    eax,eax
  41b191:	call   41af50 <flatcc_verify_buffer_header@@Base>
  41b196:	test   eax,eax
  41b198:	jne    41b280 <flatcc_verify_table_as_root@@Base+0x120>
  41b19e:	mov    edx,DWORD PTR [rbx]
  41b1a0:	mov    DWORD PTR [rsp+0xc],0x63
  41b1a8:	mov    eax,0xf
  41b1ad:	test   edx,edx
  41b1af:	jne    41b1d8 <flatcc_verify_table_as_root@@Base+0x78>
  41b1b1:	mov    rcx,QWORD PTR [rsp+0x28]
  41b1b6:	xor    rcx,QWORD PTR fs:0x28
  41b1bf:	jne    41b2a2 <flatcc_verify_table_as_root@@Base+0x142>
  41b1c5:	add    rsp,0x30
  41b1c9:	pop    rbx
  41b1ca:	pop    rbp
  41b1cb:	pop    r12
  41b1cd:	pop    r13
  41b1cf:	pop    r14
  41b1d1:	ret    
  41b1d2:	nop    WORD PTR [rax+rax*1+0x0]
  41b1d8:	mov    ecx,edx
  41b1da:	lea    rsi,[rcx+0x4]
  41b1de:	cmp    rbp,rsi
  41b1e1:	jb     41b1b1 <flatcc_verify_table_as_root@@Base+0x51>
  41b1e3:	test   dl,0x3
  41b1e6:	jne    41b1b1 <flatcc_verify_table_as_root@@Base+0x51>
  41b1e8:	mov    eax,edx
  41b1ea:	sub    eax,DWORD PTR [rbx+rcx*1]
  41b1ed:	mov    DWORD PTR [rsp+0x18],edx
  41b1f1:	mov    ecx,eax
  41b1f3:	js     41b298 <flatcc_verify_table_as_root@@Base+0x138>
  41b1f9:	mov    edi,eax
  41b1fb:	mov    eax,0x1d
  41b200:	test   cl,0x1
  41b203:	jne    41b1b1 <flatcc_verify_table_as_root@@Base+0x51>
  41b205:	lea    rsi,[rdi+0x2]
  41b209:	mov    eax,0x1b
  41b20e:	cmp    rbp,rsi
  41b211:	jb     41b1b1 <flatcc_verify_table_as_root@@Base+0x51>
  41b213:	lea    r8,[rbx+rdi*1]
  41b217:	movzx  eax,WORD PTR [r8]
  41b21b:	add    ecx,eax
  41b21d:	mov    esi,eax
  41b21f:	mov    WORD PTR [rsp+0x1e],ax
  41b224:	mov    eax,0x1e
  41b229:	cmp    r13d,ecx
  41b22c:	jb     41b1b1 <flatcc_verify_table_as_root@@Base+0x51>
  41b22e:	test   sil,0x1
  41b232:	jne    41b1b1 <flatcc_verify_table_as_root@@Base+0x51>
  41b238:	mov    eax,0x1c
  41b23d:	cmp    si,0x3
  41b241:	jbe    41b1b1 <flatcc_verify_table_as_root@@Base+0x51>
  41b247:	movzx  eax,WORD PTR [rbx+rdi*1+0x2]
  41b24c:	mov    ecx,r13d
  41b24f:	sub    ecx,edx
  41b251:	movzx  edx,ax
  41b254:	mov    WORD PTR [rsp+0x1c],ax
  41b259:	mov    eax,0x14
  41b25e:	cmp    ecx,edx
  41b260:	jb     41b1b1 <flatcc_verify_table_as_root@@Base+0x51>
  41b266:	mov    rdi,rsp
  41b269:	mov    QWORD PTR [rsp+0x10],r8
  41b26e:	mov    QWORD PTR [rsp],rbx
  41b272:	mov    DWORD PTR [rsp+0x8],r13d
  41b277:	call   r14
  41b27a:	jmp    41b1b1 <flatcc_verify_table_as_root@@Base+0x51>
  41b27f:	nop
  41b280:	mov    rdx,r12
  41b283:	mov    rsi,rbp
  41b286:	mov    rdi,rbx
  41b289:	call   41af50 <flatcc_verify_buffer_header@@Base>
  41b28e:	jmp    41b1b1 <flatcc_verify_table_as_root@@Base+0x51>
  41b293:	nop    DWORD PTR [rax+rax*1+0x0]
  41b298:	mov    eax,0x1d
  41b29d:	jmp    41b1b1 <flatcc_verify_table_as_root@@Base+0x51>
  41b2a2:	call   4061a0 <__stack_chk_fail@plt>
  41b2a7:	nop    WORD PTR [rax+rax*1+0x0]

000000000041b2b0 <flatcc_verify_table_as_typed_root@@Base>:
  41b2b0:	endbr64 
  41b2b4:	push   r14
  41b2b6:	mov    r14,rcx
  41b2b9:	push   r13
  41b2bb:	mov    r13,rsi
  41b2be:	push   r12
  41b2c0:	mov    r12d,edx
  41b2c3:	push   rbp
  41b2c4:	mov    ebp,esi
  41b2c6:	mov    rsi,rbp
  41b2c9:	push   rbx
  41b2ca:	mov    rbx,rdi
  41b2cd:	sub    rsp,0x30
  41b2d1:	mov    rax,QWORD PTR fs:0x28
  41b2da:	mov    QWORD PTR [rsp+0x28],rax
  41b2df:	xor    eax,eax
  41b2e1:	call   41afe0 <flatcc_verify_typed_buffer_header@@Base>
  41b2e6:	test   eax,eax
  41b2e8:	jne    41b3d0 <flatcc_verify_table_as_typed_root@@Base+0x120>
  41b2ee:	mov    edx,DWORD PTR [rbx]
  41b2f0:	mov    DWORD PTR [rsp+0xc],0x63
  41b2f8:	mov    eax,0xf
  41b2fd:	test   edx,edx
  41b2ff:	jne    41b328 <flatcc_verify_table_as_typed_root@@Base+0x78>
  41b301:	mov    rcx,QWORD PTR [rsp+0x28]
  41b306:	xor    rcx,QWORD PTR fs:0x28
  41b30f:	jne    41b3f2 <flatcc_verify_table_as_typed_root@@Base+0x142>
  41b315:	add    rsp,0x30
  41b319:	pop    rbx
  41b31a:	pop    rbp
  41b31b:	pop    r12
  41b31d:	pop    r13
  41b31f:	pop    r14
  41b321:	ret    
  41b322:	nop    WORD PTR [rax+rax*1+0x0]
  41b328:	mov    ecx,edx
  41b32a:	lea    rsi,[rcx+0x4]
  41b32e:	cmp    rbp,rsi
  41b331:	jb     41b301 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41b333:	test   dl,0x3
  41b336:	jne    41b301 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41b338:	mov    eax,edx
  41b33a:	sub    eax,DWORD PTR [rbx+rcx*1]
  41b33d:	mov    DWORD PTR [rsp+0x18],edx
  41b341:	mov    ecx,eax
  41b343:	js     41b3e8 <flatcc_verify_table_as_typed_root@@Base+0x138>
  41b349:	mov    edi,eax
  41b34b:	mov    eax,0x1d
  41b350:	test   cl,0x1
  41b353:	jne    41b301 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41b355:	lea    rsi,[rdi+0x2]
  41b359:	mov    eax,0x1b
  41b35e:	cmp    rbp,rsi
  41b361:	jb     41b301 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41b363:	lea    r8,[rbx+rdi*1]
  41b367:	movzx  eax,WORD PTR [r8]
  41b36b:	add    ecx,eax
  41b36d:	mov    esi,eax
  41b36f:	mov    WORD PTR [rsp+0x1e],ax
  41b374:	mov    eax,0x1e
  41b379:	cmp    r13d,ecx
  41b37c:	jb     41b301 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41b37e:	test   sil,0x1
  41b382:	jne    41b301 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41b388:	mov    eax,0x1c
  41b38d:	cmp    si,0x3
  41b391:	jbe    41b301 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41b397:	movzx  eax,WORD PTR [rbx+rdi*1+0x2]
  41b39c:	mov    ecx,r13d
  41b39f:	sub    ecx,edx
  41b3a1:	movzx  edx,ax
  41b3a4:	mov    WORD PTR [rsp+0x1c],ax
  41b3a9:	mov    eax,0x14
  41b3ae:	cmp    ecx,edx
  41b3b0:	jb     41b301 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41b3b6:	mov    rdi,rsp
  41b3b9:	mov    QWORD PTR [rsp+0x10],r8
  41b3be:	mov    QWORD PTR [rsp],rbx
  41b3c2:	mov    DWORD PTR [rsp+0x8],r13d
  41b3c7:	call   r14
  41b3ca:	jmp    41b301 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41b3cf:	nop
  41b3d0:	mov    edx,r12d
  41b3d3:	mov    rsi,rbp
  41b3d6:	mov    rdi,rbx
  41b3d9:	call   41afe0 <flatcc_verify_typed_buffer_header@@Base>
  41b3de:	jmp    41b301 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41b3e3:	nop    DWORD PTR [rax+rax*1+0x0]
  41b3e8:	mov    eax,0x1d
  41b3ed:	jmp    41b301 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41b3f2:	call   4061a0 <__stack_chk_fail@plt>
  41b3f7:	nop    WORD PTR [rax+rax*1+0x0]

000000000041b400 <flatcc_verify_struct_as_nested_root@@Base>:
  41b400:	endbr64 
  41b404:	push   r15
  41b406:	push   r14
  41b408:	mov    r14,r8
  41b40b:	mov    r8d,0x1
  41b411:	push   r13
  41b413:	mov    r13d,r9d
  41b416:	push   r12
  41b418:	mov    r12d,edx
  41b41b:	push   rbp
  41b41c:	mov    rbp,rdi
  41b41f:	push   rbx
  41b420:	mov    ebx,esi
  41b422:	movzx  esi,si
  41b425:	sub    rsp,0x18
  41b429:	mov    QWORD PTR [rsp+0x8],rcx
  41b42e:	movzx  ecx,r9w
  41b432:	mov    r9d,0xffffffff
  41b438:	mov    r15,rcx
  41b43b:	call   41a610 <flatcc_verify_vector_field@@Base>
  41b440:	test   eax,eax
  41b442:	jne    41b4b0 <flatcc_verify_struct_as_nested_root@@Base+0xb0>
  41b444:	lea    ebx,[rbx+rbx*1+0x4]
  41b448:	cmp    bx,WORD PTR [rbp+0x1e]
  41b44c:	jae    41b498 <flatcc_verify_struct_as_nested_root@@Base+0x98>
  41b44e:	mov    rax,QWORD PTR [rbp+0x10]
  41b452:	movzx  ebx,bx
  41b455:	movzx  eax,WORD PTR [rax+rbx*1]
  41b459:	test   ax,ax
  41b45c:	je     41b498 <flatcc_verify_struct_as_nested_root@@Base+0x98>
  41b45e:	mov    edi,DWORD PTR [rbp+0x18]
  41b461:	add    rdi,rax
  41b464:	add    rdi,QWORD PTR [rbp+0x0]
  41b468:	je     41b498 <flatcc_verify_struct_as_nested_root@@Base+0x98>
  41b46a:	mov    eax,DWORD PTR [rdi]
  41b46c:	mov    rdx,QWORD PTR [rsp+0x8]
  41b471:	add    rdi,rax
  41b474:	mov    esi,DWORD PTR [rdi]
  41b476:	add    rsp,0x18
  41b47a:	pop    rbx
  41b47b:	pop    rbp
  41b47c:	pop    r12
  41b47e:	movzx  r8d,r13w
  41b482:	pop    r13
  41b484:	mov    rcx,r14
  41b487:	pop    r14
  41b489:	add    rdi,0x4
  41b48d:	pop    r15
  41b48f:	jmp    41b020 <flatcc_verify_struct_as_root@@Base>
  41b494:	nop    DWORD PTR [rax+0x0]
  41b498:	add    rsp,0x18
  41b49c:	pop    rbx
  41b49d:	pop    rbp
  41b49e:	pop    r12
  41b4a0:	pop    r13
  41b4a2:	pop    r14
  41b4a4:	xor    eax,eax
  41b4a6:	pop    r15
  41b4a8:	ret    
  41b4a9:	nop    DWORD PTR [rax+0x0]
  41b4b0:	add    rsp,0x18
  41b4b4:	movzx  esi,bx
  41b4b7:	pop    rbx
  41b4b8:	mov    rdi,rbp
  41b4bb:	pop    rbp
  41b4bc:	mov    edx,r12d
  41b4bf:	pop    r12
  41b4c1:	pop    r13
  41b4c3:	pop    r14
  41b4c5:	movzx  ecx,r15w
  41b4c9:	mov    r9d,0xffffffff
  41b4cf:	mov    r8d,0x1
  41b4d5:	pop    r15
  41b4d7:	jmp    41a610 <flatcc_verify_vector_field@@Base>
  41b4dc:	nop    DWORD PTR [rax+0x0]

000000000041b4e0 <flatcc_verify_table_as_nested_root@@Base>:
  41b4e0:	endbr64 
  41b4e4:	push   r15
  41b4e6:	push   r14
  41b4e8:	mov    r14d,edx
  41b4eb:	push   r13
  41b4ed:	mov    r13,rdi
  41b4f0:	push   r12
  41b4f2:	mov    r12,r9
  41b4f5:	mov    r9d,0xffffffff
  41b4fb:	push   rbp
  41b4fc:	mov    rbp,rcx
  41b4ff:	movzx  ecx,r8w
  41b503:	push   rbx
  41b504:	mov    r8d,0x1
  41b50a:	mov    ebx,esi
  41b50c:	sub    rsp,0x48
  41b510:	movzx  esi,si
  41b513:	mov    rax,QWORD PTR fs:0x28
  41b51c:	mov    QWORD PTR [rsp+0x38],rax
  41b521:	xor    eax,eax
  41b523:	mov    r15,rcx
  41b526:	call   41a610 <flatcc_verify_vector_field@@Base>
  41b52b:	test   eax,eax
  41b52d:	jne    41b680 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
  41b533:	lea    ebx,[rbx+rbx*1+0x4]
  41b537:	cmp    bx,WORD PTR [r13+0x1e]
  41b53c:	jae    41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b542:	mov    rdx,QWORD PTR [r13+0x10]
  41b546:	movzx  ebx,bx
  41b549:	movzx  ecx,WORD PTR [rdx+rbx*1]
  41b54d:	test   cx,cx
  41b550:	je     41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b556:	mov    edx,DWORD PTR [r13+0x18]
  41b55a:	add    rdx,rcx
  41b55d:	add    rdx,QWORD PTR [r13+0x0]
  41b561:	je     41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b567:	mov    ebx,DWORD PTR [rdx]
  41b569:	add    rbx,rdx
  41b56c:	mov    r15d,DWORD PTR [rbx]
  41b56f:	lea    r14,[rbx+0x4]
  41b573:	mov    rdx,rbp
  41b576:	mov    rsi,r15
  41b579:	mov    rdi,r14
  41b57c:	mov    DWORD PTR [rsp+0xc],r15d
  41b581:	call   41af50 <flatcc_verify_buffer_header@@Base>
  41b586:	test   eax,eax
  41b588:	jne    41b6a0 <flatcc_verify_table_as_nested_root@@Base+0x1c0>
  41b58e:	mov    edx,DWORD PTR [r13+0xc]
  41b592:	mov    esi,DWORD PTR [rbx+0x4]
  41b595:	dec    edx
  41b597:	mov    DWORD PTR [rsp+0x1c],edx
  41b59b:	mov    eax,0x3
  41b5a0:	je     41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b5a6:	mov    eax,0xf
  41b5ab:	test   esi,esi
  41b5ad:	je     41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b5b3:	mov    edx,esi
  41b5b5:	lea    rdi,[rdx+0x4]
  41b5b9:	cmp    r15,rdi
  41b5bc:	jb     41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b5c2:	test   sil,0x3
  41b5c6:	jne    41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b5cc:	mov    DWORD PTR [rsp+0x28],esi
  41b5d0:	mov    edi,esi
  41b5d2:	sub    edi,DWORD PTR [rbx+rdx*1+0x4]
  41b5d6:	js     41b6b0 <flatcc_verify_table_as_nested_root@@Base+0x1d0>
  41b5dc:	mov    edx,edi
  41b5de:	mov    eax,0x1d
  41b5e3:	test   dil,0x1
  41b5e7:	jne    41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b5e9:	lea    r9,[rdx+0x2]
  41b5ed:	mov    eax,0x1b
  41b5f2:	cmp    r15,r9
  41b5f5:	jb     41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b5f7:	add    rdx,r14
  41b5fa:	movzx  eax,WORD PTR [rdx]
  41b5fd:	mov    ecx,DWORD PTR [rsp+0xc]
  41b601:	add    edi,eax
  41b603:	mov    r8d,eax
  41b606:	mov    WORD PTR [rsp+0x2e],ax
  41b60b:	mov    eax,0x1e
  41b610:	cmp    ecx,edi
  41b612:	jb     41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b614:	test   r8b,0x1
  41b618:	jne    41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b61a:	mov    eax,0x1c
  41b61f:	cmp    r8w,0x3
  41b624:	jbe    41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b626:	movzx  eax,WORD PTR [rbx+r9*1+0x4]
  41b62c:	mov    edi,ecx
  41b62e:	sub    edi,esi
  41b630:	movzx  esi,ax
  41b633:	mov    WORD PTR [rsp+0x2c],ax
  41b638:	mov    eax,0x14
  41b63d:	cmp    edi,esi
  41b63f:	jb     41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b641:	lea    rdi,[rsp+0x10]
  41b646:	mov    QWORD PTR [rsp+0x20],rdx
  41b64b:	mov    QWORD PTR [rsp+0x10],r14
  41b650:	mov    DWORD PTR [rsp+0x18],ecx
  41b654:	call   r12
  41b657:	nop    WORD PTR [rax+rax*1+0x0]
  41b660:	mov    rdi,QWORD PTR [rsp+0x38]
  41b665:	xor    rdi,QWORD PTR fs:0x28
  41b66e:	jne    41b6b7 <flatcc_verify_table_as_nested_root@@Base+0x1d7>
  41b670:	add    rsp,0x48
  41b674:	pop    rbx
  41b675:	pop    rbp
  41b676:	pop    r12
  41b678:	pop    r13
  41b67a:	pop    r14
  41b67c:	pop    r15
  41b67e:	ret    
  41b67f:	nop
  41b680:	mov    r9d,0xffffffff
  41b686:	mov    r8d,0x1
  41b68c:	movzx  ecx,r15w
  41b690:	mov    edx,r14d
  41b693:	movzx  esi,bx
  41b696:	mov    rdi,r13
  41b699:	call   41a610 <flatcc_verify_vector_field@@Base>
  41b69e:	jmp    41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b6a0:	mov    rdx,rbp
  41b6a3:	mov    rsi,r15
  41b6a6:	mov    rdi,r14
  41b6a9:	call   41af50 <flatcc_verify_buffer_header@@Base>
  41b6ae:	jmp    41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b6b0:	mov    eax,0x1d
  41b6b5:	jmp    41b660 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41b6b7:	call   4061a0 <__stack_chk_fail@plt>
  41b6bc:	nop    DWORD PTR [rax+0x0]

000000000041b6c0 <flatcc_verify_union_field@@Base>:
  41b6c0:	endbr64 
  41b6c4:	push   r12
  41b6c6:	lea    esi,[rsi+rsi*1+0x2]
  41b6ca:	push   rbp
  41b6cb:	push   rbx
  41b6cc:	sub    rsp,0x30
  41b6d0:	movzx  r8d,WORD PTR [rdi+0x1e]
  41b6d5:	mov    rax,QWORD PTR fs:0x28
  41b6de:	mov    QWORD PTR [rsp+0x28],rax
  41b6e3:	xor    eax,eax
  41b6e5:	cmp    si,r8w
  41b6e9:	jae    41b7c0 <flatcc_verify_union_field@@Base+0x100>
  41b6ef:	mov    r11,QWORD PTR [rdi+0x10]
  41b6f3:	movzx  eax,si
  41b6f6:	movzx  eax,WORD PTR [r11+rax*1]
  41b6fb:	mov    r10,rax
  41b6fe:	test   eax,eax
  41b700:	je     41b7c0 <flatcc_verify_union_field@@Base+0x100>
  41b706:	movzx  ebx,WORD PTR [rdi+0x1c]
  41b70a:	lea    r9d,[rax+0x1]
  41b70e:	mov    eax,0xd
  41b713:	cmp    r9d,ebx
  41b716:	ja     41b7a0 <flatcc_verify_union_field@@Base+0xe0>
  41b71c:	mov    r9d,DWORD PTR [rdi+0x18]
  41b720:	mov    rbp,QWORD PTR [rdi]
  41b723:	add    r10,r9
  41b726:	add    r10,rbp
  41b729:	add    esi,0x2
  41b72c:	mov    r12,r9
  41b72f:	movzx  r9d,BYTE PTR [r10]
  41b733:	cmp    r8w,si
  41b737:	jbe    41b800 <flatcc_verify_union_field@@Base+0x140>
  41b73d:	movzx  esi,si
  41b740:	movzx  esi,WORD PTR [r11+rsi*1]
  41b745:	test   r9b,r9b
  41b748:	je     41b7f0 <flatcc_verify_union_field@@Base+0x130>
  41b74e:	test   esi,esi
  41b750:	je     41b805 <flatcc_verify_union_field@@Base+0x145>
  41b756:	lea    edx,[rsi+0x4]
  41b759:	cmp    ebx,edx
  41b75b:	jb     41b7a0 <flatcc_verify_union_field@@Base+0xe0>
  41b75d:	add    r12d,esi
  41b760:	mov    eax,0xc
  41b765:	test   r12b,0x3
  41b769:	jne    41b7a0 <flatcc_verify_union_field@@Base+0xe0>
  41b76b:	test   r12d,r12d
  41b76e:	je     41b818 <flatcc_verify_union_field@@Base+0x158>
  41b774:	mov    rax,QWORD PTR [rdi+0x8]
  41b778:	mov    DWORD PTR [rsp+0x14],r12d
  41b77d:	mov    QWORD PTR [rsp+0x8],rax
  41b782:	mov    QWORD PTR [rsp],rbp
  41b786:	mov    rdi,rsp
  41b789:	mov    eax,DWORD PTR [rbp+r12*1+0x0]
  41b78e:	mov    DWORD PTR [rsp+0x18],eax
  41b792:	movzx  eax,BYTE PTR [r10]
  41b796:	mov    BYTE PTR [rsp+0x10],al
  41b79a:	call   rcx
  41b79c:	nop    DWORD PTR [rax+0x0]
  41b7a0:	mov    rbx,QWORD PTR [rsp+0x28]
  41b7a5:	xor    rbx,QWORD PTR fs:0x28
  41b7ae:	jne    41b81c <flatcc_verify_union_field@@Base+0x15c>
  41b7b0:	add    rsp,0x30
  41b7b4:	pop    rbx
  41b7b5:	pop    rbp
  41b7b6:	pop    r12
  41b7b8:	ret    
  41b7b9:	nop    DWORD PTR [rax+0x0]
  41b7c0:	add    esi,0x2
  41b7c3:	cmp    r8w,si
  41b7c7:	jbe    41b7dc <flatcc_verify_union_field@@Base+0x11c>
  41b7c9:	mov    rcx,QWORD PTR [rdi+0x10]
  41b7cd:	movzx  esi,si
  41b7d0:	cmp    WORD PTR [rcx+rsi*1],0x0
  41b7d5:	mov    eax,0x17
  41b7da:	jne    41b7a0 <flatcc_verify_union_field@@Base+0xe0>
  41b7dc:	cmp    edx,0x1
  41b7df:	sbb    eax,eax
  41b7e1:	not    eax
  41b7e3:	and    eax,0x15
  41b7e6:	jmp    41b7a0 <flatcc_verify_union_field@@Base+0xe0>
  41b7e8:	nop    DWORD PTR [rax+rax*1+0x0]
  41b7f0:	cmp    esi,0x1
  41b7f3:	sbb    eax,eax
  41b7f5:	not    eax
  41b7f7:	and    eax,0x18
  41b7fa:	jmp    41b7a0 <flatcc_verify_union_field@@Base+0xe0>
  41b7fc:	nop    DWORD PTR [rax+0x0]
  41b800:	test   r9b,r9b
  41b803:	je     41b818 <flatcc_verify_union_field@@Base+0x158>
  41b805:	xor    eax,eax
  41b807:	test   edx,edx
  41b809:	setne  al
  41b80c:	shl    eax,0x2
  41b80f:	jmp    41b7a0 <flatcc_verify_union_field@@Base+0xe0>
  41b811:	nop    DWORD PTR [rax+0x0]
  41b818:	xor    eax,eax
  41b81a:	jmp    41b7a0 <flatcc_verify_union_field@@Base+0xe0>
  41b81c:	call   4061a0 <__stack_chk_fail@plt>
  41b821:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41b82c:	nop    DWORD PTR [rax+0x0]

000000000041b830 <flatcc_verify_union_vector_field@@Base>:
  41b830:	endbr64 
  41b834:	push   r15
  41b836:	mov    r15d,edx
  41b839:	push   r14
  41b83b:	lea    r14d,[rsi-0x1]
  41b83f:	movzx  r14d,r14w
  41b843:	push   r13
  41b845:	mov    r13,rcx
  41b848:	push   r12
  41b84a:	push   rbp
  41b84b:	mov    rbp,rdi
  41b84e:	push   rbx
  41b84f:	lea    ebx,[rsi+rsi*1+0x2]
  41b853:	sub    rsp,0x48
  41b857:	mov    rax,QWORD PTR fs:0x28
  41b860:	mov    QWORD PTR [rsp+0x38],rax
  41b865:	xor    eax,eax
  41b867:	movzx  eax,WORD PTR [rdi+0x1e]
  41b86b:	cmp    bx,ax
  41b86e:	jae    41ba50 <flatcc_verify_union_vector_field@@Base+0x220>
  41b874:	mov    rcx,QWORD PTR [rdi+0x10]
  41b878:	movzx  edx,bx
  41b87b:	cmp    WORD PTR [rcx+rdx*1],0x0
  41b880:	je     41ba50 <flatcc_verify_union_vector_field@@Base+0x220>
  41b886:	mov    r9d,0xffffffff
  41b88c:	mov    r8d,0x1
  41b892:	mov    ecx,0x1
  41b897:	mov    edx,r15d
  41b89a:	mov    esi,r14d
  41b89d:	mov    rdi,rbp
  41b8a0:	call   41a610 <flatcc_verify_vector_field@@Base>
  41b8a5:	mov    r12d,eax
  41b8a8:	test   eax,eax
  41b8aa:	jne    41baa0 <flatcc_verify_union_vector_field@@Base+0x270>
  41b8b0:	movzx  edi,WORD PTR [rbp+0x1e]
  41b8b4:	cmp    bx,di
  41b8b7:	jae    41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41b8bd:	mov    rsi,QWORD PTR [rbp+0x10]
  41b8c1:	movzx  eax,bx
  41b8c4:	movzx  edx,WORD PTR [rsi+rax*1]
  41b8c8:	test   dx,dx
  41b8cb:	je     41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41b8d1:	mov    eax,DWORD PTR [rbp+0x18]
  41b8d4:	mov    r14,QWORD PTR [rbp+0x0]
  41b8d8:	mov    rcx,rax
  41b8db:	add    rax,rdx
  41b8de:	add    rax,r14
  41b8e1:	je     41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41b8e7:	add    ebx,0x2
  41b8ea:	cmp    di,bx
  41b8ed:	jbe    41ba80 <flatcc_verify_union_vector_field@@Base+0x250>
  41b8f3:	movzx  ebx,bx
  41b8f6:	movzx  edx,WORD PTR [rsi+rbx*1]
  41b8fa:	test   edx,edx
  41b8fc:	je     41ba80 <flatcc_verify_union_vector_field@@Base+0x250>
  41b902:	movzx  esi,WORD PTR [rbp+0x1c]
  41b906:	lea    edi,[rdx+0x4]
  41b909:	cmp    edi,esi
  41b90b:	ja     41bad0 <flatcc_verify_union_vector_field@@Base+0x2a0>
  41b911:	add    ecx,edx
  41b913:	test   cl,0x3
  41b916:	jne    41bae0 <flatcc_verify_union_vector_field@@Base+0x2b0>
  41b91c:	test   ecx,ecx
  41b91e:	je     41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41b924:	mov    edi,DWORD PTR [rbp+0xc]
  41b927:	mov    esi,ecx
  41b929:	mov    edx,DWORD PTR [r14+rsi*1]
  41b92d:	test   edi,edi
  41b92f:	jle    41bb20 <flatcc_verify_union_vector_field@@Base+0x2f0>
  41b935:	add    edx,ecx
  41b937:	cmp    ecx,edx
  41b939:	jae    41ba90 <flatcc_verify_union_vector_field@@Base+0x260>
  41b93f:	mov    ecx,DWORD PTR [rbp+0x8]
  41b942:	mov    r9d,edx
  41b945:	lea    r8,[r9+0x4]
  41b949:	mov    rsi,rcx
  41b94c:	cmp    r8,rcx
  41b94f:	ja     41ba90 <flatcc_verify_union_vector_field@@Base+0x260>
  41b955:	test   r8b,0x3
  41b959:	jne    41baf0 <flatcc_verify_union_vector_field@@Base+0x2c0>
  41b95f:	mov    r10d,DWORD PTR [r14+r9*1]
  41b963:	lea    r15d,[rdx+0x4]
  41b967:	cmp    r10d,0x3fffffff
  41b96e:	ja     41baf0 <flatcc_verify_union_vector_field@@Base+0x2c0>
  41b974:	mov    r11d,ecx
  41b977:	lea    ebp,[r10*4+0x0]
  41b97f:	sub    r11d,r15d
  41b982:	cmp    r11d,ebp
  41b985:	jb     41baf0 <flatcc_verify_union_vector_field@@Base+0x2c0>
  41b98b:	mov    ebx,DWORD PTR [rax]
  41b98d:	add    rax,rbx
  41b990:	cmp    DWORD PTR [rax],r10d
  41b993:	jne    41bb2b <flatcc_verify_union_vector_field@@Base+0x2fb>
  41b999:	lea    edx,[rdi-0x1]
  41b99c:	mov    QWORD PTR [rsp+0x10],r14
  41b9a1:	mov    DWORD PTR [rsp+0x18],ecx
  41b9a5:	mov    DWORD PTR [rsp+0x1c],edx
  41b9a9:	test   r10d,r10d
  41b9ac:	je     41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41b9ae:	lea    rbx,[rax+0x4]
  41b9b2:	lea    rax,[rsp+0x10]
  41b9b7:	add    ebp,r15d
  41b9ba:	mov    QWORD PTR [rsp+0x8],rax
  41b9bf:	jmp    41b9dc <flatcc_verify_union_vector_field@@Base+0x1ac>
  41b9c1:	nop    DWORD PTR [rax+0x0]
  41b9c8:	test   dl,dl
  41b9ca:	jne    41bb41 <flatcc_verify_union_vector_field@@Base+0x311>
  41b9d0:	add    r15d,0x4
  41b9d4:	inc    rbx
  41b9d7:	cmp    r15d,ebp
  41b9da:	je     41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41b9dc:	mov    eax,r15d
  41b9df:	mov    eax,DWORD PTR [r14+rax*1]
  41b9e3:	movzx  edx,BYTE PTR [rbx]
  41b9e6:	test   eax,eax
  41b9e8:	je     41b9c8 <flatcc_verify_union_vector_field@@Base+0x198>
  41b9ea:	test   dl,dl
  41b9ec:	je     41bb4c <flatcc_verify_union_vector_field@@Base+0x31c>
  41b9f2:	mov    rdi,QWORD PTR [rsp+0x8]
  41b9f7:	mov    BYTE PTR [rsp+0x20],dl
  41b9fb:	mov    DWORD PTR [rsp+0x24],r15d
  41ba00:	mov    DWORD PTR [rsp+0x28],eax
  41ba04:	call   r13
  41ba07:	test   eax,eax
  41ba09:	je     41b9d0 <flatcc_verify_union_vector_field@@Base+0x1a0>
  41ba0b:	mov    rdi,QWORD PTR [rsp+0x8]
  41ba10:	call   r13
  41ba13:	mov    r12d,eax
  41ba16:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41ba20:	mov    rdi,QWORD PTR [rsp+0x38]
  41ba25:	xor    rdi,QWORD PTR fs:0x28
  41ba2e:	mov    eax,r12d
  41ba31:	jne    41bb57 <flatcc_verify_union_vector_field@@Base+0x327>
  41ba37:	add    rsp,0x48
  41ba3b:	pop    rbx
  41ba3c:	pop    rbp
  41ba3d:	pop    r12
  41ba3f:	pop    r13
  41ba41:	pop    r14
  41ba43:	pop    r15
  41ba45:	ret    
  41ba46:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41ba50:	lea    edx,[rbx+0x2]
  41ba53:	cmp    ax,dx
  41ba56:	jbe    41ba6a <flatcc_verify_union_vector_field@@Base+0x23a>
  41ba58:	mov    rax,QWORD PTR [rbp+0x10]
  41ba5c:	movzx  edx,dx
  41ba5f:	cmp    WORD PTR [rax+rdx*1],0x0
  41ba64:	jne    41b886 <flatcc_verify_union_vector_field@@Base+0x56>
  41ba6a:	mov    r12d,0x16
  41ba70:	test   r15d,r15d
  41ba73:	je     41b886 <flatcc_verify_union_vector_field@@Base+0x56>
  41ba79:	jmp    41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41ba7b:	nop    DWORD PTR [rax+rax*1+0x0]
  41ba80:	xor    r12d,r12d
  41ba83:	test   r15d,r15d
  41ba86:	setne  r12b
  41ba8a:	shl    r12d,0x2
  41ba8e:	jmp    41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41ba90:	mov    r12d,0x10
  41ba96:	jmp    41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41ba98:	nop    DWORD PTR [rax+rax*1+0x0]
  41baa0:	mov    r9d,0xffffffff
  41baa6:	mov    r8d,0x1
  41baac:	mov    ecx,0x1
  41bab1:	mov    edx,r15d
  41bab4:	mov    esi,r14d
  41bab7:	mov    rdi,rbp
  41baba:	call   41a610 <flatcc_verify_vector_field@@Base>
  41babf:	mov    r12d,eax
  41bac2:	jmp    41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41bac7:	nop    WORD PTR [rax+rax*1+0x0]
  41bad0:	mov    r12d,0xd
  41bad6:	jmp    41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41badb:	nop    DWORD PTR [rax+rax*1+0x0]
  41bae0:	mov    r12d,0xc
  41bae6:	jmp    41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41baeb:	nop    DWORD PTR [rax+rax*1+0x0]
  41baf0:	and    r8d,0x3
  41baf4:	jne    41ba90 <flatcc_verify_union_vector_field@@Base+0x260>
  41baf6:	mov    eax,DWORD PTR [r14+r9*1]
  41bafa:	sub    esi,0x4
  41bafd:	cmp    eax,0x3fffffff
  41bb02:	ja     41bb36 <flatcc_verify_union_vector_field@@Base+0x306>
  41bb04:	shl    eax,0x2
  41bb07:	sub    esi,edx
  41bb09:	cmp    esi,eax
  41bb0b:	mov    eax,0x1a
  41bb10:	cmovb  r12d,eax
  41bb14:	jmp    41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41bb19:	nop    DWORD PTR [rax+0x0]
  41bb20:	mov    r12d,0x3
  41bb26:	jmp    41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41bb2b:	mov    r12d,0x22
  41bb31:	jmp    41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41bb36:	mov    r12d,0x19
  41bb3c:	jmp    41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41bb41:	mov    r12d,0x20
  41bb47:	jmp    41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41bb4c:	mov    r12d,0x21
  41bb52:	jmp    41ba20 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41bb57:	call   4061a0 <__stack_chk_fail@plt>
  41bb5c:	nop    DWORD PTR [rax+0x0]
  41bb60:	mov    r9,rdi
  41bb63:	mov    eax,edx
  41bb65:	shr    r9,0x20
  41bb69:	mov    edi,edi
  41bb6b:	mov    r11,rdi
  41bb6e:	mov    r8,r9
  41bb71:	imul   rdi,rax
  41bb75:	imul   r8,rax
  41bb79:	mov    r10,rdx
  41bb7c:	shr    r10,0x20
  41bb80:	imul   r11,r10
  41bb84:	mov    rax,rdi
  41bb87:	shr    rax,0x20
  41bb8b:	mov    edi,r8d
  41bb8e:	add    rax,rdi
  41bb91:	mov    edi,0x80000000
  41bb96:	mov    edx,r11d
  41bb99:	add    rax,rdi
  41bb9c:	add    rax,rdx
  41bb9f:	imul   r9,r10
  41bba3:	mov    rdx,r8
  41bba6:	shr    rdx,0x20
  41bbaa:	shr    r11,0x20
  41bbae:	add    rdx,r11
  41bbb1:	lea    r8,[rdx+r9*1]
  41bbb5:	shr    rax,0x20
  41bbb9:	add    rax,r8
  41bbbc:	mov    QWORD PTR [rsp-0x18],rax
  41bbc1:	mov    QWORD PTR [rsp-0x10],0x0
  41bbca:	lea    eax,[rsi+rcx*1+0x40]
  41bbce:	vmovdqa xmm1,XMMWORD PTR [rsp-0x18]
  41bbd4:	vpinsrd xmm0,xmm1,eax,0x2
  41bbda:	vmovq  rax,xmm0
  41bbdf:	vpextrq rdx,xmm0,0x1
  41bbe5:	ret    
  41bbe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41bbf0:	sub    rsp,0x18
  41bbf4:	mov    QWORD PTR [rsp+0x8],rsi
  41bbf9:	mov    QWORD PTR [rsp],rdi
  41bbfd:	mov    ecx,DWORD PTR [rsp+0x8]
  41bc01:	test   rdi,rdi
  41bc04:	je     41bc68 <flatcc_verify_union_vector_field@@Base+0x438>
  41bc06:	mov    rax,rdi
  41bc09:	movabs rdi,0xffc0000000000000
  41bc13:	lea    edx,[rcx-0xa]
  41bc16:	mov    rsi,rdi
  41bc19:	test   rax,rdi
  41bc1c:	jne    41bc2e <flatcc_verify_union_vector_field@@Base+0x3fe>
  41bc1e:	xchg   ax,ax
  41bc20:	shl    rax,0xa
  41bc24:	mov    ecx,edx
  41bc26:	sub    edx,0xa
  41bc29:	test   rax,rsi
  41bc2c:	je     41bc20 <flatcc_verify_union_vector_field@@Base+0x3f0>
  41bc2e:	test   rax,rax
  41bc31:	js     41bc49 <flatcc_verify_union_vector_field@@Base+0x419>
  41bc33:	lea    edx,[rcx-0x1]
  41bc36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41bc40:	mov    ecx,edx
  41bc42:	dec    edx
  41bc44:	add    rax,rax
  41bc47:	jns    41bc40 <flatcc_verify_union_vector_field@@Base+0x410>
  41bc49:	mov    QWORD PTR [rsp],rax
  41bc4d:	vmovdqa xmm1,XMMWORD PTR [rsp]
  41bc52:	add    rsp,0x18
  41bc56:	vpinsrd xmm0,xmm1,ecx,0x2
  41bc5c:	vmovq  rax,xmm0
  41bc61:	vpextrq rdx,xmm0,0x1
  41bc67:	ret    
  41bc68:	lea    rcx,[rip+0x14591]        # 430200 <flatcc_builder_padding_base@@Base+0x14e0>
  41bc6f:	mov    edx,0x104
  41bc74:	lea    rsi,[rip+0x137d5]        # 42f450 <flatcc_builder_padding_base@@Base+0x730>
  41bc7b:	lea    rdi,[rip+0x139b2]        # 42f634 <flatcc_builder_padding_base@@Base+0x914>
  41bc82:	call   4061b0 <__assert_fail@plt>
  41bc87:	nop    WORD PTR [rax+rax*1+0x0]

000000000041bc90 <grisu3_diy_fp_encode_double@@Base>:
  41bc90:	endbr64 
  41bc94:	push   r15
  41bc96:	mov    eax,0x4
  41bc9b:	push   r14
  41bc9d:	push   r13
  41bc9f:	mov    r13d,edx
  41bca2:	push   r12
  41bca4:	mov    r12d,ecx
  41bca7:	push   rbp
  41bca8:	mov    rbp,r8
  41bcab:	push   rbx
  41bcac:	mov    ebx,esi
  41bcae:	sub    rsp,0x18
  41bcb2:	mov    QWORD PTR [rsp+0x8],0x0
  41bcbb:	mov    QWORD PTR [rsp],rdi
  41bcbf:	test   ecx,ecx
  41bcc1:	cmovne r12d,eax
  41bcc5:	vmovdqa xmm1,XMMWORD PTR [rsp]
  41bcca:	xor    eax,eax
  41bccc:	vpinsrd xmm0,xmm1,eax,0x2
  41bcd2:	vmovaps XMMWORD PTR [rsp],xmm0
  41bcd7:	mov    rsi,QWORD PTR [rsp+0x8]
  41bcdc:	mov    rdi,QWORD PTR [rsp]
  41bce0:	sub    ebx,edx
  41bce2:	call   41bbf0 <flatcc_verify_union_vector_field@@Base+0x3c0>
  41bce7:	mov    QWORD PTR [rsp+0x8],rdx
  41bcec:	mov    QWORD PTR [rsp],rax
  41bcf0:	mov    esi,DWORD PTR [rsp+0x8]
  41bcf4:	mov    rdi,QWORD PTR [rsp]
  41bcf8:	mov    ecx,esi
  41bcfa:	neg    ecx
  41bcfc:	shlx   r12d,r12d,ecx
  41bd01:	cmp    ebx,0xfffffea4
  41bd07:	jl     41bfdf <grisu3_diy_fp_encode_double@@Base+0x34f>
  41bd0d:	cmp    ebx,0x15b
  41bd13:	jg     41bfc0 <grisu3_diy_fp_encode_double@@Base+0x330>
  41bd19:	lea    eax,[rbx+0x15c]
  41bd1f:	sar    eax,0x3
  41bd22:	cdqe   
  41bd24:	lea    rdx,[rip+0x14535]        # 430260 <flatcc_builder_padding_base@@Base+0x1540>
  41bd2b:	shl    rax,0x4
  41bd2f:	add    rax,rdx
  41bd32:	movsx  edx,WORD PTR [rax+0xa]
  41bd36:	mov    r14,QWORD PTR [rax]
  41bd39:	movsx  r15d,WORD PTR [rax+0x8]
  41bd3e:	cmp    ebx,edx
  41bd40:	jl     41bfa1 <grisu3_diy_fp_encode_double@@Base+0x311>
  41bd46:	lea    eax,[rdx+0x7]
  41bd49:	cmp    ebx,eax
  41bd4b:	jg     41bf82 <grisu3_diy_fp_encode_double@@Base+0x2f2>
  41bd51:	cmp    ebx,edx
  41bd53:	je     41bda4 <grisu3_diy_fp_encode_double@@Base+0x114>
  41bd55:	sub    ebx,edx
  41bd57:	dec    ebx
  41bd59:	cmp    ebx,0x6
  41bd5c:	ja     41bffe <grisu3_diy_fp_encode_double@@Base+0x36e>
  41bd62:	movsxd rax,ebx
  41bd65:	shl    rax,0x4
  41bd69:	lea    rdx,[rip+0x1da70]        # 4397e0 <__data_start@@Base+0x720>
  41bd70:	add    rax,rdx
  41bd73:	mov    rdi,QWORD PTR [rsp]
  41bd77:	mov    ecx,DWORD PTR [rax+0x8]
  41bd7a:	mov    rdx,QWORD PTR [rax]
  41bd7d:	call   41bb60 <flatcc_verify_union_vector_field@@Base+0x330>
  41bd82:	mov    QWORD PTR [rsp],rax
  41bd86:	mov    QWORD PTR [rsp+0x8],rdx
  41bd8b:	lea    edx,[rbx+r13*1+0x1]
  41bd90:	lea    eax,[r12+0x4]
  41bd95:	cmp    edx,0x13
  41bd98:	mov    rdi,QWORD PTR [rsp]
  41bd9c:	mov    esi,DWORD PTR [rsp+0x8]
  41bda0:	cmovg  r12d,eax
  41bda4:	mov    ecx,r15d
  41bda7:	mov    rdx,r14
  41bdaa:	call   41bb60 <flatcc_verify_union_vector_field@@Base+0x330>
  41bdaf:	mov    QWORD PTR [rsp],rax
  41bdb3:	mov    QWORD PTR [rsp+0x8],rdx
  41bdb8:	xor    eax,eax
  41bdba:	mov    rdi,QWORD PTR [rsp]
  41bdbe:	test   r12d,r12d
  41bdc1:	mov    rsi,QWORD PTR [rsp+0x8]
  41bdc6:	setne  al
  41bdc9:	mov    ebx,DWORD PTR [rsp+0x8]
  41bdcd:	lea    r12d,[r12+rax*1+0x8]
  41bdd2:	call   41bbf0 <flatcc_verify_union_vector_field@@Base+0x3c0>
  41bdd7:	mov    QWORD PTR [rsp+0x8],rdx
  41bddc:	mov    QWORD PTR [rsp],rax
  41bde0:	mov    edx,DWORD PTR [rsp+0x8]
  41bde4:	mov    rax,QWORD PTR [rsp]
  41bde8:	sub    ebx,edx
  41bdea:	lea    esi,[rdx+0x40]
  41bded:	shlx   ecx,r12d,ebx
  41bdf2:	cmp    esi,0xfffffc0e
  41bdf8:	jl     41bee8 <grisu3_diy_fp_encode_double@@Base+0x258>
  41bdfe:	lea    r9d,[rcx+0x4]
  41be02:	mov    edi,0x4
  41be07:	xor    r8d,r8d
  41be0a:	xor    esi,esi
  41be0c:	cmp    esi,r9d
  41be0f:	jl     41be20 <grisu3_diy_fp_encode_double@@Base+0x190>
  41be11:	inc    rax
  41be14:	bt     rax,0x35
  41be19:	jae    41be20 <grisu3_diy_fp_encode_double@@Base+0x190>
  41be1b:	shr    rax,1
  41be1e:	inc    edx
  41be20:	movabs r10,0x1fffffffffffff
  41be2a:	lea    esi,[rdx+0x1]
  41be2d:	mov    r11,r10
  41be30:	cmp    rax,r10
  41be33:	jbe    41be44 <grisu3_diy_fp_encode_double@@Base+0x1b4>
  41be35:	nop    DWORD PTR [rax]
  41be38:	shr    rax,1
  41be3b:	mov    edx,esi
  41be3d:	inc    esi
  41be3f:	cmp    rax,r11
  41be42:	ja     41be38 <grisu3_diy_fp_encode_double@@Base+0x1a8>
  41be44:	cmp    edx,0xfffffbce
  41be4a:	jl     41bf38 <grisu3_diy_fp_encode_double@@Base+0x2a8>
  41be50:	movabs r10,0x10000000000000
  41be5a:	mov    rsi,rax
  41be5d:	and    rsi,r10
  41be60:	cmp    edx,0xfffffbce
  41be66:	je     41be9a <grisu3_diy_fp_encode_double@@Base+0x20a>
  41be68:	test   rsi,rsi
  41be6b:	je     41be84 <grisu3_diy_fp_encode_double@@Base+0x1f4>
  41be6d:	jmp    41bf70 <grisu3_diy_fp_encode_double@@Base+0x2e0>
  41be72:	nop    WORD PTR [rax+rax*1+0x0]
  41be78:	test   rsi,rsi
  41be7b:	jne    41bf48 <grisu3_diy_fp_encode_double@@Base+0x2b8>
  41be81:	mov    edx,r11d
  41be84:	add    rax,rax
  41be87:	mov    rsi,rax
  41be8a:	lea    r11d,[rdx-0x1]
  41be8e:	and    rsi,r10
  41be91:	cmp    r11d,0xfffffbce
  41be98:	jne    41be78 <grisu3_diy_fp_encode_double@@Base+0x1e8>
  41be9a:	test   rsi,rsi
  41be9d:	movabs rdx,0x10000000000000
  41bea7:	cmovne rsi,rdx
  41beab:	movabs rdx,0xfffffffffffff
  41beb5:	and    rdx,rax
  41beb8:	or     rdx,rsi
  41bebb:	sub    edi,ecx
  41bebd:	cmp    edi,r8d
  41bec0:	setge  al
  41bec3:	cmp    r9d,r8d
  41bec6:	mov    QWORD PTR [rbp+0x0],rdx
  41beca:	setle  dl
  41becd:	add    rsp,0x18
  41bed1:	pop    rbx
  41bed2:	pop    rbp
  41bed3:	pop    r12
  41bed5:	pop    r13
  41bed7:	or     eax,edx
  41bed9:	pop    r14
  41bedb:	movzx  eax,al
  41bede:	pop    r15
  41bee0:	ret    
  41bee1:	nop    DWORD PTR [rax+0x0]
  41bee8:	cmp    esi,0xfffffbcf
  41beee:	jl     41bf60 <grisu3_diy_fp_encode_double@@Base+0x2d0>
  41bef0:	lea    edi,[rdx+0x472]
  41bef6:	mov    esi,0x40
  41befb:	sub    esi,edi
  41befd:	cmp    esi,0x3c
  41bf00:	jle    41c01d <grisu3_diy_fp_encode_double@@Base+0x38d>
  41bf06:	mov    esi,0x2
  41bf0b:	sub    esi,edi
  41bf0d:	sarx   ecx,ecx,esi
  41bf12:	add    ecx,0x9
  41bf15:	shrx   rax,rax,rsi
  41bf1a:	lea    edx,[rdx+rsi*1+0x3e]
  41bf1e:	shr    rax,0x3e
  41bf22:	xor    r8d,r8d
  41bf25:	mov    r9d,ecx
  41bf28:	xor    edi,edi
  41bf2a:	mov    esi,0x3e
  41bf2f:	jmp    41be0c <grisu3_diy_fp_encode_double@@Base+0x17c>
  41bf34:	nop    DWORD PTR [rax+0x0]
  41bf38:	mov    rdx,QWORD PTR [rip+0x14891]        # 4307d0 <flatcc_builder_padding_base@@Base+0x1ab0>
  41bf3f:	jmp    41bebb <grisu3_diy_fp_encode_double@@Base+0x22b>
  41bf44:	nop    DWORD PTR [rax+0x0]
  41bf48:	add    edx,0x432
  41bf4e:	mov    rsi,rdx
  41bf51:	shl    rsi,0x34
  41bf55:	jmp    41beab <grisu3_diy_fp_encode_double@@Base+0x21b>
  41bf5a:	nop    WORD PTR [rax+rax*1+0x0]
  41bf60:	mov    esi,0x2
  41bf65:	jmp    41bf0d <grisu3_diy_fp_encode_double@@Base+0x27d>
  41bf67:	nop    WORD PTR [rax+rax*1+0x0]
  41bf70:	add    edx,0x433
  41bf76:	mov    rsi,rdx
  41bf79:	shl    rsi,0x34
  41bf7d:	jmp    41beab <grisu3_diy_fp_encode_double@@Base+0x21b>
  41bf82:	lea    rcx,[rip+0x14297]        # 430220 <flatcc_builder_padding_base@@Base+0x1500>
  41bf89:	mov    edx,0x59
  41bf8e:	lea    rsi,[rip+0x1352b]        # 42f4c0 <flatcc_builder_padding_base@@Base+0x7a0>
  41bf95:	lea    rdi,[rip+0x136b0]        # 42f64c <flatcc_builder_padding_base@@Base+0x92c>
  41bf9c:	call   4061b0 <__assert_fail@plt>
  41bfa1:	lea    rcx,[rip+0x14278]        # 430220 <flatcc_builder_padding_base@@Base+0x1500>
  41bfa8:	mov    edx,0x58
  41bfad:	lea    rsi,[rip+0x1350c]        # 42f4c0 <flatcc_builder_padding_base@@Base+0x7a0>
  41bfb4:	lea    rdi,[rip+0x13682]        # 42f63d <flatcc_builder_padding_base@@Base+0x91d>
  41bfbb:	call   4061b0 <__assert_fail@plt>
  41bfc0:	lea    rcx,[rip+0x14259]        # 430220 <flatcc_builder_padding_base@@Base+0x1500>
  41bfc7:	mov    edx,0x51
  41bfcc:	lea    rsi,[rip+0x134ed]        # 42f4c0 <flatcc_builder_padding_base@@Base+0x7a0>
  41bfd3:	lea    rdi,[rip+0x1357e]        # 42f558 <flatcc_builder_padding_base@@Base+0x838>
  41bfda:	call   4061b0 <__assert_fail@plt>
  41bfdf:	lea    rcx,[rip+0x1423a]        # 430220 <flatcc_builder_padding_base@@Base+0x1500>
  41bfe6:	mov    edx,0x50
  41bfeb:	lea    rsi,[rip+0x134ce]        # 42f4c0 <flatcc_builder_padding_base@@Base+0x7a0>
  41bff2:	lea    rdi,[rip+0x1353f]        # 42f538 <flatcc_builder_padding_base@@Base+0x818>
  41bff9:	call   4061b0 <__assert_fail@plt>
  41bffe:	lea    rcx,[rip+0x1423b]        # 430240 <flatcc_builder_padding_base@@Base+0x1520>
  41c005:	mov    edx,0xb9
  41c00a:	lea    rsi,[rip+0x134af]        # 42f4c0 <flatcc_builder_padding_base@@Base+0x7a0>
  41c011:	lea    rdi,[rip+0x1364f]        # 42f667 <flatcc_builder_padding_base@@Base+0x947>
  41c018:	call   4061b0 <__assert_fail@plt>
  41c01d:	mov    r8d,0x3f
  41c023:	sub    r8d,edi
  41c026:	mov    r10d,r8d
  41c029:	mov    r8d,0x1
  41c02f:	mov    r9d,0x8
  41c035:	shlx   r8,r8,r10
  41c03a:	and    r8,rax
  41c03d:	shlx   r9,r9,r10
  41c042:	add    edx,esi
  41c044:	mov    edi,r9d
  41c047:	shl    r8d,0x3
  41c04b:	add    r9d,ecx
  41c04e:	shrx   rax,rax,rsi
  41c053:	jmp    41be0c <grisu3_diy_fp_encode_double@@Base+0x17c>
  41c058:	nop    DWORD PTR [rax+rax*1+0x0]
  41c060:	push   r14
  41c062:	lea    r8,[rdi+0x3e9]
  41c069:	push   r13
  41c06b:	push   r12
  41c06d:	mov    r12,rdx
  41c070:	push   rbp
  41c071:	mov    rbp,rdi
  41c074:	push   rbx
  41c075:	sub    rsp,0x10
  41c079:	mov    rax,QWORD PTR fs:0x28
  41c082:	mov    QWORD PTR [rsp+0x8],rax
  41c087:	xor    eax,eax
  41c089:	mov    QWORD PTR [rdx],0x0
  41c090:	cmp    esi,0x3e8
  41c096:	jg     41c0a0 <grisu3_diy_fp_encode_double@@Base+0x410>
  41c098:	movsxd rsi,esi
  41c09b:	lea    r8,[rdi+rsi*1+0x1]
  41c0a0:	cmp    r8,rbp
  41c0a3:	je     41c390 <grisu3_diy_fp_encode_double@@Base+0x700>
  41c0a9:	movsx  edi,BYTE PTR [rbp+0x0]
  41c0ad:	cmp    dil,0x2d
  41c0b1:	je     41c2c8 <grisu3_diy_fp_encode_double@@Base+0x638>
  41c0b7:	cmp    dil,0x30
  41c0bb:	je     41c1f8 <grisu3_diy_fp_encode_double@@Base+0x568>
  41c0c1:	lea    eax,[rdi-0x31]
  41c0c4:	mov    rbx,rbp
  41c0c7:	cmp    al,0x8
  41c0c9:	ja     41c1d0 <grisu3_diy_fp_encode_double@@Base+0x540>
  41c0cf:	mov    rax,rbp
  41c0d2:	xor    r13d,r13d
  41c0d5:	sub    edi,0x30
  41c0d8:	lea    rbx,[rax+0x1]
  41c0dc:	movsxd rdi,edi
  41c0df:	cmp    r8,rbx
  41c0e2:	je     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c0e8:	movsx  rax,BYTE PTR [rax+0x1]
  41c0ed:	lea    edx,[rax-0x30]
  41c0f0:	mov    rcx,rbx
  41c0f3:	movabs rsi,0x1999999999999998
  41c0fd:	cmp    dl,0x9
  41c100:	jbe    41c119 <grisu3_diy_fp_encode_double@@Base+0x489>
  41c102:	jmp    41c7d1 <grisu3_diy_fp_encode_double@@Base+0xb41>
  41c107:	nop    WORD PTR [rax+rax*1+0x0]
  41c110:	cmp    rdi,rsi
  41c113:	ja     41c248 <grisu3_diy_fp_encode_double@@Base+0x5b8>
  41c119:	lea    rdx,[rdi+rdi*4]
  41c11d:	inc    rcx
  41c120:	lea    rdi,[rax+rdx*2-0x30]
  41c125:	cmp    r8,rcx
  41c128:	je     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c12e:	movsx  rax,BYTE PTR [rcx]
  41c132:	lea    edx,[rax-0x30]
  41c135:	cmp    dl,0x9
  41c138:	jbe    41c110 <grisu3_diy_fp_encode_double@@Base+0x480>
  41c13a:	mov    edx,ecx
  41c13c:	sub    edx,ebx
  41c13e:	xor    esi,esi
  41c140:	mov    rbx,rcx
  41c143:	xor    ecx,ecx
  41c145:	lea    r9d,[rax-0x31]
  41c149:	cmp    r9b,0x8
  41c14d:	jbe    41c313 <grisu3_diy_fp_encode_double@@Base+0x683>
  41c153:	cmp    al,0x2e
  41c155:	je     41c3a0 <grisu3_diy_fp_encode_double@@Base+0x710>
  41c15b:	or     eax,0x20
  41c15e:	add    esi,edx
  41c160:	cmp    al,0x65
  41c162:	je     41c450 <grisu3_diy_fp_encode_double@@Base+0x7c0>
  41c168:	test   rdi,rdi
  41c16b:	je     41c2a0 <grisu3_diy_fp_encode_double@@Base+0x610>
  41c171:	cmp    esi,0xfffffebc
  41c177:	jl     41c2a0 <grisu3_diy_fp_encode_double@@Base+0x610>
  41c17d:	cmp    esi,0x136
  41c183:	jg     41c368 <grisu3_diy_fp_encode_double@@Base+0x6d8>
  41c189:	movabs rax,0x1fffffffffffff
  41c193:	cmp    rdi,rax
  41c196:	ja     41c1a1 <grisu3_diy_fp_encode_double@@Base+0x511>
  41c198:	cmp    esi,0x16
  41c19b:	jbe    41c556 <grisu3_diy_fp_encode_double@@Base+0x8c6>
  41c1a1:	mov    r8,r12
  41c1a4:	call   41bc90 <grisu3_diy_fp_encode_double@@Base>
  41c1a9:	test   eax,eax
  41c1ab:	jne    41c2a0 <grisu3_diy_fp_encode_double@@Base+0x610>
  41c1b1:	mov    rsi,rsp
  41c1b4:	mov    rdi,rbp
  41c1b7:	call   406180 <strtod@plt>
  41c1bc:	mov    rax,QWORD PTR [rsp]
  41c1c0:	vmovsd QWORD PTR [r12],xmm0
  41c1c6:	cmp    rbx,rax
  41c1c9:	cmova  rbx,rax
  41c1cd:	nop    DWORD PTR [rax]
  41c1d0:	mov    rsi,QWORD PTR [rsp+0x8]
  41c1d5:	xor    rsi,QWORD PTR fs:0x28
  41c1de:	mov    rax,rbx
  41c1e1:	jne    41c83d <grisu3_diy_fp_encode_double@@Base+0xbad>
  41c1e7:	add    rsp,0x10
  41c1eb:	pop    rbx
  41c1ec:	pop    rbp
  41c1ed:	pop    r12
  41c1ef:	pop    r13
  41c1f1:	pop    r14
  41c1f3:	ret    
  41c1f4:	nop    DWORD PTR [rax+0x0]
  41c1f8:	mov    rax,rbp
  41c1fb:	xor    r13d,r13d
  41c1fe:	lea    rbx,[rax+0x1]
  41c202:	cmp    r8,rbx
  41c205:	je     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c207:	movsx  rax,BYTE PTR [rax+0x1]
  41c20c:	mov    edx,eax
  41c20e:	or     edx,0x20
  41c211:	cmp    dl,0x78
  41c214:	je     41c7b0 <grisu3_diy_fp_encode_double@@Base+0xb20>
  41c21a:	cmp    al,0x30
  41c21c:	je     41c234 <grisu3_diy_fp_encode_double@@Base+0x5a4>
  41c21e:	jmp    41c4f0 <grisu3_diy_fp_encode_double@@Base+0x860>
  41c223:	nop    DWORD PTR [rax+rax*1+0x0]
  41c228:	movsx  rax,BYTE PTR [rbx]
  41c22c:	cmp    al,0x30
  41c22e:	jne    41c4f0 <grisu3_diy_fp_encode_double@@Base+0x860>
  41c234:	inc    rbx
  41c237:	cmp    r8,rbx
  41c23a:	jne    41c228 <grisu3_diy_fp_encode_double@@Base+0x598>
  41c23c:	nop    DWORD PTR [rax+0x0]
  41c240:	xor    ebx,ebx
  41c242:	jmp    41c1d0 <grisu3_diy_fp_encode_double@@Base+0x540>
  41c244:	nop    DWORD PTR [rax+0x0]
  41c248:	xor    edx,edx
  41c24a:	cmp    al,0x34
  41c24c:	setg   dl
  41c24f:	add    rdi,rdx
  41c252:	mov    edx,ecx
  41c254:	sub    edx,ebx
  41c256:	mov    rbx,rcx
  41c259:	mov    ecx,0x1
  41c25e:	cmp    al,0x30
  41c260:	jne    41c7d5 <grisu3_diy_fp_encode_double@@Base+0xb45>
  41c266:	sub    ecx,ebx
  41c268:	jmp    41c27b <grisu3_diy_fp_encode_double@@Base+0x5eb>
  41c26a:	nop    WORD PTR [rax+rax*1+0x0]
  41c270:	movzx  eax,BYTE PTR [rbx]
  41c273:	cmp    al,0x30
  41c275:	jne    41c300 <grisu3_diy_fp_encode_double@@Base+0x670>
  41c27b:	lea    esi,[rcx+rbx*1]
  41c27e:	inc    rbx
  41c281:	cmp    r8,rbx
  41c284:	jne    41c270 <grisu3_diy_fp_encode_double@@Base+0x5e0>
  41c286:	jmp    41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c288:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14558]        # 4307e8 <flatcc_builder_padding_base@@Base+0x1ac8>
  41c290:	vmovsd QWORD PTR [r12],xmm0
  41c296:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41c2a0:	test   r13d,r13d
  41c2a3:	je     41c1d0 <grisu3_diy_fp_encode_double@@Base+0x540>
  41c2a9:	vmovsd xmm0,QWORD PTR [r12]
  41c2af:	vxorpd xmm0,xmm0,XMMWORD PTR [rip+0x11f79]        # 42e230 <_IO_stdin_used@@Base+0x3230>
  41c2b7:	vmovsd QWORD PTR [r12],xmm0
  41c2bd:	jmp    41c1d0 <grisu3_diy_fp_encode_double@@Base+0x540>
  41c2c2:	nop    WORD PTR [rax+rax*1+0x0]
  41c2c8:	lea    rax,[rbp+0x1]
  41c2cc:	cmp    r8,rax
  41c2cf:	je     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c2d5:	movsx  edi,BYTE PTR [rbp+0x1]
  41c2d9:	cmp    dil,0x30
  41c2dd:	je     41c380 <grisu3_diy_fp_encode_double@@Base+0x6f0>
  41c2e3:	lea    edx,[rdi-0x31]
  41c2e6:	xor    ebx,ebx
  41c2e8:	mov    r13d,0x1
  41c2ee:	cmp    dl,0x8
  41c2f1:	jbe    41c0d5 <grisu3_diy_fp_encode_double@@Base+0x445>
  41c2f7:	jmp    41c1d0 <grisu3_diy_fp_encode_double@@Base+0x540>
  41c2fc:	nop    DWORD PTR [rax+0x0]
  41c300:	lea    r9d,[rax-0x31]
  41c304:	mov    ecx,0x1
  41c309:	cmp    r9b,0x8
  41c30d:	ja     41c153 <grisu3_diy_fp_encode_double@@Base+0x4c3>
  41c313:	lea    rcx,[rbx+0x1]
  41c317:	lea    r10d,[rsi+0x1]
  41c31b:	cmp    r8,rcx
  41c31e:	je     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c324:	movzx  eax,BYTE PTR [rbx+0x1]
  41c328:	lea    r9d,[rax-0x30]
  41c32c:	cmp    r9b,0x9
  41c330:	ja     41c82a <grisu3_diy_fp_encode_double@@Base+0xb9a>
  41c336:	lea    r9d,[rsi+0x2]
  41c33a:	mov    rbx,rcx
  41c33d:	sub    r9d,ecx
  41c340:	lea    esi,[r9+rbx*1]
  41c344:	inc    rbx
  41c347:	cmp    r8,rbx
  41c34a:	je     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c350:	movzx  eax,BYTE PTR [rbx]
  41c353:	lea    ecx,[rax-0x30]
  41c356:	cmp    cl,0x9
  41c359:	jbe    41c340 <grisu3_diy_fp_encode_double@@Base+0x6b0>
  41c35b:	mov    ecx,0x1
  41c360:	jmp    41c153 <grisu3_diy_fp_encode_double@@Base+0x4c3>
  41c365:	nop    DWORD PTR [rax]
  41c368:	mov    rax,QWORD PTR [rip+0x14469]        # 4307d8 <flatcc_builder_padding_base@@Base+0x1ab8>
  41c36f:	mov    QWORD PTR [r12],rax
  41c373:	jmp    41c2a0 <grisu3_diy_fp_encode_double@@Base+0x610>
  41c378:	nop    DWORD PTR [rax+rax*1+0x0]
  41c380:	mov    r13d,0x1
  41c386:	jmp    41c1fe <grisu3_diy_fp_encode_double@@Base+0x56e>
  41c38b:	nop    DWORD PTR [rax+rax*1+0x0]
  41c390:	mov    rbx,r8
  41c393:	jmp    41c1d0 <grisu3_diy_fp_encode_double@@Base+0x540>
  41c398:	nop    DWORD PTR [rax+rax*1+0x0]
  41c3a0:	movsx  rax,BYTE PTR [rbx+0x1]
  41c3a5:	lea    r10,[rbx+0x1]
  41c3a9:	lea    r9d,[rax-0x30]
  41c3ad:	cmp    r9b,0x9
  41c3b1:	ja     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c3b7:	cmp    r8,r10
  41c3ba:	je     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c3c0:	movabs r11,0x1999999999999998
  41c3ca:	cmp    rdi,r11
  41c3cd:	ja     41c835 <grisu3_diy_fp_encode_double@@Base+0xba5>
  41c3d3:	mov    rbx,r10
  41c3d6:	jmp    41c3e9 <grisu3_diy_fp_encode_double@@Base+0x759>
  41c3d8:	nop    DWORD PTR [rax+rax*1+0x0]
  41c3e0:	cmp    rdi,r11
  41c3e3:	ja     41c7fc <grisu3_diy_fp_encode_double@@Base+0xb6c>
  41c3e9:	lea    rdi,[rdi+rdi*4]
  41c3ed:	inc    rbx
  41c3f0:	lea    rdi,[rax+rdi*2-0x30]
  41c3f5:	mov    eax,esi
  41c3f7:	sub    eax,ebx
  41c3f9:	lea    r9d,[rax+r10*1]
  41c3fd:	cmp    r8,rbx
  41c400:	je     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c406:	movsx  rax,BYTE PTR [rbx]
  41c40a:	lea    r14d,[rax-0x30]
  41c40e:	cmp    r14b,0x9
  41c412:	jbe    41c3e0 <grisu3_diy_fp_encode_double@@Base+0x750>
  41c414:	mov    rax,rbx
  41c417:	sub    rax,r10
  41c41a:	add    edx,eax
  41c41c:	movzx  eax,BYTE PTR [rbx]
  41c41f:	cmp    al,0x30
  41c421:	jne    41c4f7 <grisu3_diy_fp_encode_double@@Base+0x867>
  41c427:	inc    r9d
  41c42a:	sub    r9d,ebx
  41c42d:	jmp    41c43b <grisu3_diy_fp_encode_double@@Base+0x7ab>
  41c42f:	nop
  41c430:	movzx  eax,BYTE PTR [rbx]
  41c433:	cmp    al,0x30
  41c435:	jne    41c500 <grisu3_diy_fp_encode_double@@Base+0x870>
  41c43b:	lea    esi,[r9+rbx*1]
  41c43f:	inc    rbx
  41c442:	cmp    r8,rbx
  41c445:	jne    41c430 <grisu3_diy_fp_encode_double@@Base+0x7a0>
  41c447:	xor    ebx,ebx
  41c449:	jmp    41c1d0 <grisu3_diy_fp_encode_double@@Base+0x540>
  41c44e:	xchg   ax,ax
  41c450:	mov    rax,r8
  41c453:	sub    rax,rbx
  41c456:	cmp    rax,0x1
  41c45a:	jle    41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c460:	movsx  eax,BYTE PTR [rbx+0x1]
  41c464:	cmp    al,0x2b
  41c466:	je     41c7b8 <grisu3_diy_fp_encode_double@@Base+0xb28>
  41c46c:	cmp    al,0x2d
  41c46e:	je     41c7e0 <grisu3_diy_fp_encode_double@@Base+0xb50>
  41c474:	lea    r9,[rbx+0x1]
  41c478:	xor    r11d,r11d
  41c47b:	lea    r10d,[rax-0x30]
  41c47f:	cmp    r10b,0x9
  41c483:	ja     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c489:	lea    rbx,[r9+0x1]
  41c48d:	sub    eax,0x30
  41c490:	cmp    r8,rbx
  41c493:	je     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c499:	movsx  r9d,BYTE PTR [r9+0x1]
  41c49e:	lea    r10d,[r9-0x30]
  41c4a2:	cmp    r10b,0x9
  41c4a6:	ja     41c4d9 <grisu3_diy_fp_encode_double@@Base+0x849>
  41c4a8:	nop    DWORD PTR [rax+rax*1+0x0]
  41c4b0:	cmp    eax,0x7fff
  41c4b5:	jg     41c4bf <grisu3_diy_fp_encode_double@@Base+0x82f>
  41c4b7:	lea    eax,[rax+rax*4]
  41c4ba:	lea    eax,[r9+rax*2-0x30]
  41c4bf:	inc    rbx
  41c4c2:	cmp    r8,rbx
  41c4c5:	je     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c4cb:	movsx  r9d,BYTE PTR [rbx]
  41c4cf:	lea    r10d,[r9-0x30]
  41c4d3:	cmp    r10b,0x9
  41c4d7:	jbe    41c4b0 <grisu3_diy_fp_encode_double@@Base+0x820>
  41c4d9:	lea    r8d,[rsi+rax*1]
  41c4dd:	sub    esi,eax
  41c4df:	test   r11d,r11d
  41c4e2:	cmove  esi,r8d
  41c4e6:	jmp    41c168 <grisu3_diy_fp_encode_double@@Base+0x4d8>
  41c4eb:	nop    DWORD PTR [rax+rax*1+0x0]
  41c4f0:	xor    edi,edi
  41c4f2:	jmp    41c0ed <grisu3_diy_fp_encode_double@@Base+0x45d>
  41c4f7:	mov    esi,r9d
  41c4fa:	nop    WORD PTR [rax+rax*1+0x0]
  41c500:	lea    r9d,[rax-0x31]
  41c504:	cmp    r9b,0x8
  41c508:	ja     41c15b <grisu3_diy_fp_encode_double@@Base+0x4cb>
  41c50e:	lea    rcx,[rbx+0x1]
  41c512:	cmp    r8,rcx
  41c515:	je     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c51b:	movzx  eax,BYTE PTR [rbx+0x1]
  41c51f:	lea    r9d,[rax-0x30]
  41c523:	cmp    r9b,0x9
  41c527:	ja     41c549 <grisu3_diy_fp_encode_double@@Base+0x8b9>
  41c529:	nop    DWORD PTR [rax+0x0]
  41c530:	inc    rcx
  41c533:	cmp    r8,rcx
  41c536:	je     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c53c:	movzx  eax,BYTE PTR [rcx]
  41c53f:	lea    r9d,[rax-0x30]
  41c543:	cmp    r9b,0x9
  41c547:	jbe    41c530 <grisu3_diy_fp_encode_double@@Base+0x8a0>
  41c549:	mov    rbx,rcx
  41c54c:	mov    ecx,0x1
  41c551:	jmp    41c15b <grisu3_diy_fp_encode_double@@Base+0x4cb>
  41c556:	sub    esi,edx
  41c558:	vxorpd xmm0,xmm0,xmm0
  41c55c:	lea    eax,[rsi+0x16]
  41c55f:	vcvtsi2sd xmm0,xmm0,rdi
  41c564:	cmp    eax,0x2c
  41c567:	ja     41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c56d:	lea    rdx,[rip+0x1334c]        # 42f8c0 <flatcc_builder_padding_base@@Base+0xba0>
  41c574:	movsxd rax,DWORD PTR [rdx+rax*4]
  41c578:	add    rax,rdx
  41c57b:	notrack jmp rax
  41c57e:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x1426a]        # 4307f0 <flatcc_builder_padding_base@@Base+0x1ad0>
  41c586:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c58b:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14265]        # 4307f8 <flatcc_builder_padding_base@@Base+0x1ad8>
  41c593:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c598:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14260]        # 430800 <flatcc_builder_padding_base@@Base+0x1ae0>
  41c5a0:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c5a5:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x1425b]        # 430808 <flatcc_builder_padding_base@@Base+0x1ae8>
  41c5ad:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c5b2:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14256]        # 430810 <flatcc_builder_padding_base@@Base+0x1af0>
  41c5ba:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c5bf:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14251]        # 430818 <flatcc_builder_padding_base@@Base+0x1af8>
  41c5c7:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c5cc:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x1424c]        # 430820 <flatcc_builder_padding_base@@Base+0x1b00>
  41c5d4:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c5d9:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14247]        # 430828 <flatcc_builder_padding_base@@Base+0x1b08>
  41c5e1:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c5e6:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14242]        # 430830 <flatcc_builder_padding_base@@Base+0x1b10>
  41c5ee:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c5f3:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x1423d]        # 430838 <flatcc_builder_padding_base@@Base+0x1b18>
  41c5fb:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c600:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14238]        # 430840 <flatcc_builder_padding_base@@Base+0x1b20>
  41c608:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c60d:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14233]        # 430848 <flatcc_builder_padding_base@@Base+0x1b28>
  41c615:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c61a:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x1422e]        # 430850 <flatcc_builder_padding_base@@Base+0x1b30>
  41c622:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c627:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14229]        # 430858 <flatcc_builder_padding_base@@Base+0x1b38>
  41c62f:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c634:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14224]        # 430860 <flatcc_builder_padding_base@@Base+0x1b40>
  41c63c:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c641:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x1421f]        # 430868 <flatcc_builder_padding_base@@Base+0x1b48>
  41c649:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c64e:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x1421a]        # 430870 <flatcc_builder_padding_base@@Base+0x1b50>
  41c656:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c65b:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14215]        # 430878 <flatcc_builder_padding_base@@Base+0x1b58>
  41c663:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c668:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14210]        # 430880 <flatcc_builder_padding_base@@Base+0x1b60>
  41c670:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c675:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x1420b]        # 430888 <flatcc_builder_padding_base@@Base+0x1b68>
  41c67d:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c682:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14156]        # 4307e0 <flatcc_builder_padding_base@@Base+0x1ac0>
  41c68a:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c68f:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x141f1]        # 430888 <flatcc_builder_padding_base@@Base+0x1b68>
  41c697:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c69c:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x141dc]        # 430880 <flatcc_builder_padding_base@@Base+0x1b60>
  41c6a4:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c6a9:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x141c7]        # 430878 <flatcc_builder_padding_base@@Base+0x1b58>
  41c6b1:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c6b6:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x141b2]        # 430870 <flatcc_builder_padding_base@@Base+0x1b50>
  41c6be:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c6c3:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x1419d]        # 430868 <flatcc_builder_padding_base@@Base+0x1b48>
  41c6cb:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c6d0:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14188]        # 430860 <flatcc_builder_padding_base@@Base+0x1b40>
  41c6d8:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c6dd:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14173]        # 430858 <flatcc_builder_padding_base@@Base+0x1b38>
  41c6e5:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c6ea:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x1415e]        # 430850 <flatcc_builder_padding_base@@Base+0x1b30>
  41c6f2:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c6f7:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14149]        # 430848 <flatcc_builder_padding_base@@Base+0x1b28>
  41c6ff:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c704:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14134]        # 430840 <flatcc_builder_padding_base@@Base+0x1b20>
  41c70c:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c711:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x1411f]        # 430838 <flatcc_builder_padding_base@@Base+0x1b18>
  41c719:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c71e:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x1410a]        # 430830 <flatcc_builder_padding_base@@Base+0x1b10>
  41c726:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c72b:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x140f5]        # 430828 <flatcc_builder_padding_base@@Base+0x1b08>
  41c733:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c738:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x140e0]        # 430820 <flatcc_builder_padding_base@@Base+0x1b00>
  41c740:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c745:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x140cb]        # 430818 <flatcc_builder_padding_base@@Base+0x1af8>
  41c74d:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c752:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x140b6]        # 430810 <flatcc_builder_padding_base@@Base+0x1af0>
  41c75a:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c75f:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x140a1]        # 430808 <flatcc_builder_padding_base@@Base+0x1ae8>
  41c767:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c76c:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x1408c]        # 430800 <flatcc_builder_padding_base@@Base+0x1ae0>
  41c774:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c779:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14077]        # 4307f8 <flatcc_builder_padding_base@@Base+0x1ad8>
  41c781:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c786:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14052]        # 4307e0 <flatcc_builder_padding_base@@Base+0x1ac0>
  41c78e:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c793:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14055]        # 4307f0 <flatcc_builder_padding_base@@Base+0x1ad0>
  41c79b:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c7a0:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14040]        # 4307e8 <flatcc_builder_padding_base@@Base+0x1ac8>
  41c7a8:	jmp    41c290 <grisu3_diy_fp_encode_double@@Base+0x600>
  41c7ad:	nop    DWORD PTR [rax]
  41c7b0:	mov    rbx,rbp
  41c7b3:	jmp    41c1d0 <grisu3_diy_fp_encode_double@@Base+0x540>
  41c7b8:	lea    r9,[rbx+0x2]
  41c7bc:	cmp    r8,r9
  41c7bf:	je     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c7c5:	movsx  eax,BYTE PTR [rbx+0x2]
  41c7c9:	xor    r11d,r11d
  41c7cc:	jmp    41c47b <grisu3_diy_fp_encode_double@@Base+0x7eb>
  41c7d1:	xor    edx,edx
  41c7d3:	xor    ecx,ecx
  41c7d5:	xor    esi,esi
  41c7d7:	jmp    41c145 <grisu3_diy_fp_encode_double@@Base+0x4b5>
  41c7dc:	nop    DWORD PTR [rax+0x0]
  41c7e0:	lea    r9,[rbx+0x2]
  41c7e4:	cmp    r8,r9
  41c7e7:	je     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c7ed:	movsx  eax,BYTE PTR [rbx+0x2]
  41c7f1:	mov    r11d,0x1
  41c7f7:	jmp    41c47b <grisu3_diy_fp_encode_double@@Base+0x7eb>
  41c7fc:	mov    rsi,rbx
  41c7ff:	sub    rsi,r10
  41c802:	add    edx,esi
  41c804:	test   ecx,ecx
  41c806:	jne    41c41c <grisu3_diy_fp_encode_double@@Base+0x78c>
  41c80c:	cmp    al,0x34
  41c80e:	setg   al
  41c811:	movzx  eax,al
  41c814:	add    rdi,rax
  41c817:	cmp    r8,rbx
  41c81a:	je     41c240 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41c820:	mov    ecx,0x1
  41c825:	jmp    41c41c <grisu3_diy_fp_encode_double@@Base+0x78c>
  41c82a:	mov    esi,r10d
  41c82d:	mov    rbx,rcx
  41c830:	jmp    41c35b <grisu3_diy_fp_encode_double@@Base+0x6cb>
  41c835:	mov    r9d,esi
  41c838:	mov    rbx,r10
  41c83b:	jmp    41c804 <grisu3_diy_fp_encode_double@@Base+0xb74>
  41c83d:	call   4061a0 <__stack_chk_fail@plt>
  41c842:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41c84d:	nop    DWORD PTR [rax]

000000000041c850 <flatcc_json_parser_error_string@@Base>:
  41c850:	endbr64 
  41c854:	cmp    edi,0x22
  41c857:	ja     41caa0 <flatcc_json_parser_error_string@@Base+0x250>
  41c85d:	lea    rdx,[rip+0x13110]        # 42f974 <flatcc_builder_padding_base@@Base+0xc54>
  41c864:	mov    edi,edi
  41c866:	movsxd rax,DWORD PTR [rdx+rdi*4]
  41c86a:	add    rax,rdx
  41c86d:	notrack jmp rax
  41c870:	lea    rax,[rip+0x126b1]        # 42ef28 <flatcc_builder_padding_base@@Base+0x208>
  41c877:	ret    
  41c878:	nop    DWORD PTR [rax+rax*1+0x0]
  41c880:	lea    rax,[rip+0x12825]        # 42f0ac <flatcc_builder_padding_base@@Base+0x38c>
  41c887:	ret    
  41c888:	nop    DWORD PTR [rax+rax*1+0x0]
  41c890:	lea    rax,[rip+0x12fe9]        # 42f880 <flatcc_builder_padding_base@@Base+0xb60>
  41c897:	ret    
  41c898:	nop    DWORD PTR [rax+rax*1+0x0]
  41c8a0:	lea    rax,[rip+0x12fbf]        # 42f866 <flatcc_builder_padding_base@@Base+0xb46>
  41c8a7:	ret    
  41c8a8:	nop    DWORD PTR [rax+rax*1+0x0]
  41c8b0:	lea    rax,[rip+0x12f98]        # 42f84f <flatcc_builder_padding_base@@Base+0xb2f>
  41c8b7:	ret    
  41c8b8:	nop    DWORD PTR [rax+rax*1+0x0]
  41c8c0:	lea    rax,[rip+0x12f6b]        # 42f832 <flatcc_builder_padding_base@@Base+0xb12>
  41c8c7:	ret    
  41c8c8:	nop    DWORD PTR [rax+rax*1+0x0]
  41c8d0:	lea    rax,[rip+0x12682]        # 42ef59 <flatcc_builder_padding_base@@Base+0x239>
  41c8d7:	ret    
  41c8d8:	nop    DWORD PTR [rax+rax*1+0x0]
  41c8e0:	lea    rax,[rip+0x12f31]        # 42f818 <flatcc_builder_padding_base@@Base+0xaf8>
  41c8e7:	ret    
  41c8e8:	nop    DWORD PTR [rax+rax*1+0x0]
  41c8f0:	lea    rax,[rip+0x12f06]        # 42f7fd <flatcc_builder_padding_base@@Base+0xadd>
  41c8f7:	ret    
  41c8f8:	nop    DWORD PTR [rax+rax*1+0x0]
  41c900:	lea    rax,[rip+0x12ca9]        # 42f5b0 <flatcc_builder_padding_base@@Base+0x890>
  41c907:	ret    
  41c908:	nop    DWORD PTR [rax+rax*1+0x0]
  41c910:	lea    rax,[rip+0x12ec9]        # 42f7e0 <flatcc_builder_padding_base@@Base+0xac0>
  41c917:	ret    
  41c918:	nop    DWORD PTR [rax+rax*1+0x0]
  41c920:	lea    rax,[rip+0x12ea5]        # 42f7cc <flatcc_builder_padding_base@@Base+0xaac>
  41c927:	ret    
  41c928:	nop    DWORD PTR [rax+rax*1+0x0]
  41c930:	lea    rax,[rip+0x12c51]        # 42f588 <flatcc_builder_padding_base@@Base+0x868>
  41c937:	ret    
  41c938:	nop    DWORD PTR [rax+rax*1+0x0]
  41c940:	lea    rax,[rip+0x12e76]        # 42f7bd <flatcc_builder_padding_base@@Base+0xa9d>
  41c947:	ret    
  41c948:	nop    DWORD PTR [rax+rax*1+0x0]
  41c950:	lea    rax,[rip+0x12e56]        # 42f7ad <flatcc_builder_padding_base@@Base+0xa8d>
  41c957:	ret    
  41c958:	nop    DWORD PTR [rax+rax*1+0x0]
  41c960:	lea    rax,[rip+0x12e32]        # 42f799 <flatcc_builder_padding_base@@Base+0xa79>
  41c967:	ret    
  41c968:	nop    DWORD PTR [rax+rax*1+0x0]
  41c970:	lea    rax,[rip+0x12e15]        # 42f78c <flatcc_builder_padding_base@@Base+0xa6c>
  41c977:	ret    
  41c978:	nop    DWORD PTR [rax+rax*1+0x0]
  41c980:	lea    rax,[rip+0x12df6]        # 42f77d <flatcc_builder_padding_base@@Base+0xa5d>
  41c987:	ret    
  41c988:	nop    DWORD PTR [rax+rax*1+0x0]
  41c990:	lea    rax,[rip+0x12dd4]        # 42f76b <flatcc_builder_padding_base@@Base+0xa4b>
  41c997:	ret    
  41c998:	nop    DWORD PTR [rax+rax*1+0x0]
  41c9a0:	lea    rax,[rip+0x12db4]        # 42f75b <flatcc_builder_padding_base@@Base+0xa3b>
  41c9a7:	ret    
  41c9a8:	nop    DWORD PTR [rax+rax*1+0x0]
  41c9b0:	lea    rax,[rip+0x12d91]        # 42f748 <flatcc_builder_padding_base@@Base+0xa28>
  41c9b7:	ret    
  41c9b8:	nop    DWORD PTR [rax+rax*1+0x0]
  41c9c0:	lea    rax,[rip+0x12d68]        # 42f72f <flatcc_builder_padding_base@@Base+0xa0f>
  41c9c7:	ret    
  41c9c8:	nop    DWORD PTR [rax+rax*1+0x0]
  41c9d0:	lea    rax,[rip+0x12d49]        # 42f720 <flatcc_builder_padding_base@@Base+0xa00>
  41c9d7:	ret    
  41c9d8:	nop    DWORD PTR [rax+rax*1+0x0]
  41c9e0:	lea    rax,[rip+0x12d28]        # 42f70f <flatcc_builder_padding_base@@Base+0x9ef>
  41c9e7:	ret    
  41c9e8:	nop    DWORD PTR [rax+rax*1+0x0]
  41c9f0:	lea    rax,[rip+0x12d09]        # 42f700 <flatcc_builder_padding_base@@Base+0x9e0>
  41c9f7:	ret    
  41c9f8:	nop    DWORD PTR [rax+rax*1+0x0]
  41ca00:	lea    rax,[rip+0x12ce7]        # 42f6ee <flatcc_builder_padding_base@@Base+0x9ce>
  41ca07:	ret    
  41ca08:	nop    DWORD PTR [rax+rax*1+0x0]
  41ca10:	lea    rax,[rip+0x12cc6]        # 42f6dd <flatcc_builder_padding_base@@Base+0x9bd>
  41ca17:	ret    
  41ca18:	nop    DWORD PTR [rax+rax*1+0x0]
  41ca20:	lea    rax,[rip+0x12cac]        # 42f6d3 <flatcc_builder_padding_base@@Base+0x9b3>
  41ca27:	ret    
  41ca28:	nop    DWORD PTR [rax+rax*1+0x0]
  41ca30:	lea    rax,[rip+0x125e4]        # 42f01b <flatcc_builder_padding_base@@Base+0x2fb>
  41ca37:	ret    
  41ca38:	nop    DWORD PTR [rax+rax*1+0x0]
  41ca40:	lea    rax,[rip+0x12c7c]        # 42f6c3 <flatcc_builder_padding_base@@Base+0x9a3>
  41ca47:	ret    
  41ca48:	nop    DWORD PTR [rax+rax*1+0x0]
  41ca50:	lea    rax,[rip+0x12c57]        # 42f6ae <flatcc_builder_padding_base@@Base+0x98e>
  41ca57:	ret    
  41ca58:	nop    DWORD PTR [rax+rax*1+0x0]
  41ca60:	lea    rax,[rip+0x12c38]        # 42f69f <flatcc_builder_padding_base@@Base+0x97f>
  41ca67:	ret    
  41ca68:	nop    DWORD PTR [rax+rax*1+0x0]
  41ca70:	lea    rax,[rip+0x12c19]        # 42f690 <flatcc_builder_padding_base@@Base+0x970>
  41ca77:	ret    
  41ca78:	nop    DWORD PTR [rax+rax*1+0x0]
  41ca80:	lea    rax,[rip+0x12bfc]        # 42f683 <flatcc_builder_padding_base@@Base+0x963>
  41ca87:	ret    
  41ca88:	nop    DWORD PTR [rax+rax*1+0x0]
  41ca90:	lea    rax,[rip+0x12df7]        # 42f88e <flatcc_builder_padding_base@@Base+0xb6e>
  41ca97:	ret    
  41ca98:	nop    DWORD PTR [rax+rax*1+0x0]
  41caa0:	lea    rax,[rip+0x12479]        # 42ef20 <flatcc_builder_padding_base@@Base+0x200>
  41caa7:	ret    
  41caa8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041cab0 <flatcc_json_parser_set_error@@Base>:
  41cab0:	endbr64 
  41cab4:	mov    rax,rdx
  41cab7:	mov    edx,DWORD PTR [rdi+0x1c]
  41caba:	test   edx,edx
  41cabc:	jne    41cad1 <flatcc_json_parser_set_error@@Base+0x21>
  41cabe:	mov    rdx,rsi
  41cac1:	sub    rdx,QWORD PTR [rdi+0x8]
  41cac5:	inc    edx
  41cac7:	mov    DWORD PTR [rdi+0x1c],ecx
  41caca:	mov    DWORD PTR [rdi+0x18],edx
  41cacd:	mov    QWORD PTR [rdi+0x30],rsi
  41cad1:	ret    
  41cad2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41cadd:	nop    DWORD PTR [rax]

000000000041cae0 <flatcc_json_parser_string_part@@Base>:
  41cae0:	endbr64 
  41cae4:	cmp    rsi,rdx
  41cae7:	jne    41cb00 <flatcc_json_parser_string_part@@Base+0x20>
  41cae9:	jmp    41cb20 <flatcc_json_parser_string_part@@Base+0x40>
  41caeb:	nop    DWORD PTR [rax+rax*1+0x0]
  41caf0:	cmp    al,0x5c
  41caf2:	je     41cb10 <flatcc_json_parser_string_part@@Base+0x30>
  41caf4:	cmp    al,0x1f
  41caf6:	jbe    41cb10 <flatcc_json_parser_string_part@@Base+0x30>
  41caf8:	inc    rsi
  41cafb:	cmp    rdx,rsi
  41cafe:	je     41cb20 <flatcc_json_parser_string_part@@Base+0x40>
  41cb00:	movzx  eax,BYTE PTR [rsi]
  41cb03:	cmp    al,0x22
  41cb05:	jne    41caf0 <flatcc_json_parser_string_part@@Base+0x10>
  41cb07:	mov    rax,rsi
  41cb0a:	ret    
  41cb0b:	nop    DWORD PTR [rax+rax*1+0x0]
  41cb10:	cmp    al,0x1f
  41cb12:	jg     41cb07 <flatcc_json_parser_string_part@@Base+0x27>
  41cb14:	mov    ecx,0x11
  41cb19:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  41cb1e:	xchg   ax,ax
  41cb20:	mov    ecx,0x14
  41cb25:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  41cb2a:	nop    WORD PTR [rax+rax*1+0x0]

000000000041cb30 <flatcc_json_parser_space_ext@@Base>:
  41cb30:	endbr64 
  41cb34:	mov    rax,rdx
  41cb37:	sub    rax,rsi
  41cb3a:	cmp    rax,0xf
  41cb3e:	jle    41cb77 <flatcc_json_parser_space_ext@@Base+0x47>
  41cb40:	movzx  eax,BYTE PTR [rsi]
  41cb43:	cmp    al,0x20
  41cb45:	jg     41cb57 <flatcc_json_parser_space_ext@@Base+0x27>
  41cb47:	cmp    WORD PTR [rsi],0x2020
  41cb4c:	je     41cb60 <flatcc_json_parser_space_ext@@Base+0x30>
  41cb4e:	cmp    al,0x20
  41cb50:	je     41cb6c <flatcc_json_parser_space_ext@@Base+0x3c>
  41cb52:	cmp    rsi,rdx
  41cb55:	jne    41cb97 <flatcc_json_parser_space_ext@@Base+0x67>
  41cb57:	mov    rax,rsi
  41cb5a:	ret    
  41cb5b:	nop    DWORD PTR [rax+rax*1+0x0]
  41cb60:	movzx  eax,BYTE PTR [rsi+0x2]
  41cb64:	add    rsi,0x2
  41cb68:	cmp    al,0x20
  41cb6a:	jne    41cb73 <flatcc_json_parser_space_ext@@Base+0x43>
  41cb6c:	movzx  eax,BYTE PTR [rsi+0x1]
  41cb70:	inc    rsi
  41cb73:	cmp    al,0x20
  41cb75:	jg     41cb57 <flatcc_json_parser_space_ext@@Base+0x27>
  41cb77:	cmp    rdx,rsi
  41cb7a:	je     41cb57 <flatcc_json_parser_space_ext@@Base+0x27>
  41cb7c:	movzx  eax,BYTE PTR [rsi]
  41cb7f:	cmp    al,0x20
  41cb81:	jne    41cb97 <flatcc_json_parser_space_ext@@Base+0x67>
  41cb83:	nop    DWORD PTR [rax+rax*1+0x0]
  41cb88:	inc    rsi
  41cb8b:	cmp    rdx,rsi
  41cb8e:	je     41cb57 <flatcc_json_parser_space_ext@@Base+0x27>
  41cb90:	movzx  eax,BYTE PTR [rsi]
  41cb93:	cmp    al,0x20
  41cb95:	je     41cb88 <flatcc_json_parser_space_ext@@Base+0x58>
  41cb97:	cmp    al,0x20
  41cb99:	jg     41cb57 <flatcc_json_parser_space_ext@@Base+0x27>
  41cb9b:	cmp    al,0xa
  41cb9d:	je     41cbcf <flatcc_json_parser_space_ext@@Base+0x9f>
  41cb9f:	jle    41cbb8 <flatcc_json_parser_space_ext@@Base+0x88>
  41cba1:	cmp    al,0xd
  41cba3:	je     41cbe0 <flatcc_json_parser_space_ext@@Base+0xb0>
  41cba5:	cmp    al,0x20
  41cba7:	je     41cb34 <flatcc_json_parser_space_ext@@Base+0x4>
  41cba9:	mov    ecx,0x5
  41cbae:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  41cbb3:	nop    DWORD PTR [rax+rax*1+0x0]
  41cbb8:	cmp    al,0x9
  41cbba:	jne    41cba9 <flatcc_json_parser_space_ext@@Base+0x79>
  41cbbc:	inc    rsi
  41cbbf:	cmp    rdx,rsi
  41cbc2:	je     41cb57 <flatcc_json_parser_space_ext@@Base+0x27>
  41cbc4:	movzx  eax,BYTE PTR [rsi]
  41cbc7:	cmp    al,0x20
  41cbc9:	jg     41cb57 <flatcc_json_parser_space_ext@@Base+0x27>
  41cbcb:	cmp    al,0xa
  41cbcd:	jne    41cb9f <flatcc_json_parser_space_ext@@Base+0x6f>
  41cbcf:	inc    rsi
  41cbd2:	inc    DWORD PTR [rdi+0x14]
  41cbd5:	mov    QWORD PTR [rdi+0x8],rsi
  41cbd9:	jmp    41cbbf <flatcc_json_parser_space_ext@@Base+0x8f>
  41cbdb:	nop    DWORD PTR [rax+rax*1+0x0]
  41cbe0:	mov    rcx,rdx
  41cbe3:	sub    rcx,rsi
  41cbe6:	lea    rax,[rsi+0x1]
  41cbea:	cmp    rcx,0x1
  41cbee:	jle    41cbf6 <flatcc_json_parser_space_ext@@Base+0xc6>
  41cbf0:	cmp    BYTE PTR [rsi+0x1],0xa
  41cbf4:	je     41cbfb <flatcc_json_parser_space_ext@@Base+0xcb>
  41cbf6:	mov    rsi,rax
  41cbf9:	jmp    41cbd2 <flatcc_json_parser_space_ext@@Base+0xa2>
  41cbfb:	lea    rax,[rsi+0x2]
  41cbff:	jmp    41cbf6 <flatcc_json_parser_space_ext@@Base+0xc6>
  41cc01:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41cc0c:	nop    DWORD PTR [rax+0x0]
  41cc10:	push   r15
  41cc12:	push   r14
  41cc14:	push   r13
  41cc16:	push   r12
  41cc18:	mov    r12,rdi
  41cc1b:	push   rbp
  41cc1c:	push   rbx
  41cc1d:	mov    rbx,rdx
  41cc20:	sub    rsp,0x58
  41cc24:	mov    QWORD PTR [rsp+0x10],rcx
  41cc29:	mov    QWORD PTR [rsp+0x20],r8
  41cc2e:	mov    rdx,QWORD PTR fs:0x28
  41cc37:	mov    QWORD PTR [rsp+0x48],rdx
  41cc3c:	xor    edx,edx
  41cc3e:	mov    BYTE PTR [r8],0x0
  41cc42:	cmp    rsi,rbx
  41cc45:	je     41cdd2 <flatcc_json_parser_space_ext@@Base+0x2a2>
  41cc4b:	cmp    BYTE PTR [rsi],0x22
  41cc4e:	lea    r10,[rsi+0x1]
  41cc52:	jne    41cd70 <flatcc_json_parser_space_ext@@Base+0x240>
  41cc58:	mov    rax,rbx
  41cc5b:	sub    rax,r10
  41cc5e:	cmp    rax,0x1
  41cc62:	jle    41cc70 <flatcc_json_parser_space_ext@@Base+0x140>
  41cc64:	cmp    BYTE PTR [r10],0x20
  41cc68:	jg     41cc81 <flatcc_json_parser_space_ext@@Base+0x151>
  41cc6a:	je     41cdbf <flatcc_json_parser_space_ext@@Base+0x28f>
  41cc70:	mov    rsi,r10
  41cc73:	mov    rdx,rbx
  41cc76:	mov    rdi,r12
  41cc79:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41cc7e:	mov    r10,rax
  41cc81:	cmp    rbx,r10
  41cc84:	je     41cce7 <flatcc_json_parser_space_ext@@Base+0x1b7>
  41cc86:	lea    rax,[rsp+0x38]
  41cc8b:	mov    BYTE PTR [rsp+0x1f],0x0
  41cc90:	mov    QWORD PTR [rsp+0x8],rax
  41cc95:	lea    r15,[rsp+0x3c]
  41cc9a:	lea    r14,[rsp+0x40]
  41cc9f:	mov    r13,QWORD PTR [rsp+0x10]
  41cca4:	mov    rbp,r10
  41cca7:	mov    rax,QWORD PTR [r13+0x0]
  41ccab:	mov    rsi,r10
  41ccae:	jmp    41ccc9 <flatcc_json_parser_space_ext@@Base+0x199>
  41ccb0:	cmp    rbp,rax
  41ccb3:	jne    41cd10 <flatcc_json_parser_space_ext@@Base+0x1e0>
  41ccb5:	add    r13,0x8
  41ccb9:	mov    rax,QWORD PTR [r13+0x0]
  41ccbd:	mov    rbp,rsi
  41ccc0:	test   rax,rax
  41ccc3:	je     41cd50 <flatcc_json_parser_space_ext@@Base+0x220>
  41ccc9:	mov    rcx,QWORD PTR [rsp+0x8]
  41ccce:	mov    r9,r15
  41ccd1:	mov    r8,r14
  41ccd4:	mov    rdx,rbx
  41ccd7:	mov    rdi,r12
  41ccda:	call   rax
  41ccdc:	mov    rsi,rax
  41ccdf:	cmp    rbx,rax
  41cce2:	jne    41ccb0 <flatcc_json_parser_space_ext@@Base+0x180>
  41cce4:	mov    r10,rax
  41cce7:	mov    rdi,QWORD PTR [rsp+0x48]
  41ccec:	xor    rdi,QWORD PTR fs:0x28
  41ccf5:	mov    rax,r10
  41ccf8:	jne    41cdda <flatcc_json_parser_space_ext@@Base+0x2aa>
  41ccfe:	add    rsp,0x58
  41cd02:	pop    rbx
  41cd03:	pop    rbp
  41cd04:	pop    r12
  41cd06:	pop    r13
  41cd08:	pop    r14
  41cd0a:	pop    r15
  41cd0c:	ret    
  41cd0d:	nop    DWORD PTR [rax]
  41cd10:	mov    r10,rax
  41cd13:	mov    eax,DWORD PTR [rsp+0x38]
  41cd17:	test   eax,eax
  41cd19:	jne    41cd88 <flatcc_json_parser_space_ext@@Base+0x258>
  41cd1b:	mov    rax,QWORD PTR [rsp+0x40]
  41cd20:	cmp    rax,0xff
  41cd26:	ja     41cdb8 <flatcc_json_parser_space_ext@@Base+0x288>
  41cd2c:	mov    BYTE PTR [rsp+0x1f],al
  41cd30:	mov    rax,QWORD PTR [rsp+0x20]
  41cd35:	movzx  ecx,BYTE PTR [rsp+0x1f]
  41cd3a:	mov    edx,DWORD PTR [rsp+0x3c]
  41cd3e:	add    BYTE PTR [rax],cl
  41cd40:	test   edx,edx
  41cd42:	jne    41cc9f <flatcc_json_parser_space_ext@@Base+0x16f>
  41cd48:	jmp    41cce7 <flatcc_json_parser_space_ext@@Base+0x1b7>
  41cd4a:	nop    WORD PTR [rax+rax*1+0x0]
  41cd50:	mov    ecx,0x17
  41cd55:	mov    rdx,rbx
  41cd58:	mov    rdi,r12
  41cd5b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41cd60:	mov    r10,rax
  41cd63:	jmp    41cce7 <flatcc_json_parser_space_ext@@Base+0x1b7>
  41cd68:	nop    DWORD PTR [rax+rax*1+0x0]
  41cd70:	mov    ecx,0x5
  41cd75:	mov    rdx,rbx
  41cd78:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41cd7d:	mov    r10,rax
  41cd80:	jmp    41cc58 <flatcc_json_parser_space_ext@@Base+0x128>
  41cd85:	nop    DWORD PTR [rax]
  41cd88:	mov    ecx,0x8
  41cd8d:	mov    rsi,r10
  41cd90:	mov    rdx,rbx
  41cd93:	mov    rdi,r12
  41cd96:	mov    QWORD PTR [rsp+0x28],r10
  41cd9b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41cda0:	mov    r10,QWORD PTR [rsp+0x28]
  41cda5:	cmp    rbx,rax
  41cda8:	jne    41cd30 <flatcc_json_parser_space_ext@@Base+0x200>
  41cdaa:	mov    r10,rbx
  41cdad:	jmp    41cce7 <flatcc_json_parser_space_ext@@Base+0x1b7>
  41cdb2:	nop    WORD PTR [rax+rax*1+0x0]
  41cdb8:	mov    ecx,0x7
  41cdbd:	jmp    41cd8d <flatcc_json_parser_space_ext@@Base+0x25d>
  41cdbf:	cmp    BYTE PTR [r10+0x1],0x20
  41cdc4:	jle    41cc70 <flatcc_json_parser_space_ext@@Base+0x140>
  41cdca:	inc    r10
  41cdcd:	jmp    41cc81 <flatcc_json_parser_space_ext@@Base+0x151>
  41cdd2:	mov    r10,rbx
  41cdd5:	jmp    41cc70 <flatcc_json_parser_space_ext@@Base+0x140>
  41cdda:	call   4061a0 <__stack_chk_fail@plt>
  41cddf:	nop
  41cde0:	push   r15
  41cde2:	push   r14
  41cde4:	push   r13
  41cde6:	push   r12
  41cde8:	mov    r12,rsi
  41cdeb:	push   rbp
  41cdec:	mov    rbp,rdi
  41cdef:	push   rbx
  41cdf0:	mov    rbx,rdx
  41cdf3:	sub    rsp,0x38
  41cdf7:	mov    QWORD PTR [rsp],rcx
  41cdfb:	mov    DWORD PTR [rsp+0x8],r8d
  41ce00:	mov    DWORD PTR [rsp+0x1c],r9d
  41ce05:	mov    rdi,QWORD PTR [rdi]
  41ce08:	mov    r15,QWORD PTR [rsp+0x70]
  41ce0d:	mov    rax,QWORD PTR fs:0x28
  41ce16:	mov    QWORD PTR [rsp+0x28],rax
  41ce1b:	xor    eax,eax
  41ce1d:	mov    DWORD PTR [rsp+0x24],0x0
  41ce25:	call   417830 <flatcc_builder_start_offset_vector@@Base>
  41ce2a:	test   eax,eax
  41ce2c:	je     41ce70 <flatcc_json_parser_space_ext@@Base+0x340>
  41ce2e:	mov    ecx,0x21
  41ce33:	mov    rdx,rbx
  41ce36:	mov    rsi,r12
  41ce39:	mov    rdi,rbp
  41ce3c:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41ce41:	mov    r14,rax
  41ce44:	mov    rcx,QWORD PTR [rsp+0x28]
  41ce49:	xor    rcx,QWORD PTR fs:0x28
  41ce52:	mov    rax,r14
  41ce55:	jne    41d1f3 <flatcc_json_parser_space_ext@@Base+0x6c3>
  41ce5b:	add    rsp,0x38
  41ce5f:	pop    rbx
  41ce60:	pop    rbp
  41ce61:	pop    r12
  41ce63:	pop    r13
  41ce65:	pop    r14
  41ce67:	pop    r15
  41ce69:	ret    
  41ce6a:	nop    WORD PTR [rax+rax*1+0x0]
  41ce70:	cmp    r12,rbx
  41ce73:	je     41ce80 <flatcc_json_parser_space_ext@@Base+0x350>
  41ce75:	cmp    BYTE PTR [r12],0x5b
  41ce7a:	je     41cf20 <flatcc_json_parser_space_ext@@Base+0x3f0>
  41ce80:	mov    rsi,r12
  41ce83:	mov    ecx,0x16
  41ce88:	mov    rdx,rbx
  41ce8b:	mov    rdi,rbp
  41ce8e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41ce93:	mov    r14,rax
  41ce96:	mov    eax,DWORD PTR [rsp+0x8]
  41ce9a:	xor    r12d,r12d
  41ce9d:	mov    QWORD PTR [rsp+0x8],rax
  41cea2:	nop    WORD PTR [rax+rax*1+0x0]
  41cea8:	cmp    r12,QWORD PTR [rsp+0x8]
  41cead:	je     41ced0 <flatcc_json_parser_space_ext@@Base+0x3a0>
  41ceaf:	mov    rsi,r14
  41ceb2:	mov    ecx,0x1e
  41ceb7:	mov    rdx,rbx
  41ceba:	mov    rdi,rbp
  41cebd:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41cec2:	mov    r14,rax
  41cec5:	jmp    41ce44 <flatcc_json_parser_space_ext@@Base+0x314>
  41ceca:	nop    WORD PTR [rax+rax*1+0x0]
  41ced0:	mov    rsi,QWORD PTR [rsp]
  41ced4:	mov    rdi,QWORD PTR [rbp+0x0]
  41ced8:	mov    r12,r14
  41cedb:	call   416790 <flatcc_builder_get_user_frame_ptr@@Base>
  41cee0:	mov    rdi,QWORD PTR [rbp+0x0]
  41cee4:	mov    rsi,rax
  41cee7:	call   4188d0 <flatcc_builder_end_offset_vector_for_unions@@Base>
  41ceec:	mov    DWORD PTR [rsp+0x24],eax
  41cef0:	test   eax,eax
  41cef2:	je     41ce2e <flatcc_json_parser_space_ext@@Base+0x2fe>
  41cef8:	movzx  esi,WORD PTR [rsp+0x1c]
  41cefd:	mov    rdi,QWORD PTR [rbp+0x0]
  41cf01:	call   419420 <flatcc_builder_table_add_offset@@Base>
  41cf06:	test   rax,rax
  41cf09:	je     41ce2e <flatcc_json_parser_space_ext@@Base+0x2fe>
  41cf0f:	mov    edx,DWORD PTR [rsp+0x24]
  41cf13:	mov    DWORD PTR [rax],edx
  41cf15:	jmp    41ce44 <flatcc_json_parser_space_ext@@Base+0x314>
  41cf1a:	nop    WORD PTR [rax+rax*1+0x0]
  41cf20:	lea    r13,[r12+0x1]
  41cf25:	mov    rax,rbx
  41cf28:	sub    rax,r13
  41cf2b:	cmp    rax,0x1
  41cf2f:	jle    41cf3f <flatcc_json_parser_space_ext@@Base+0x40f>
  41cf31:	cmp    BYTE PTR [r12+0x1],0x20
  41cf37:	jg     41cf50 <flatcc_json_parser_space_ext@@Base+0x420>
  41cf39:	je     41d18b <flatcc_json_parser_space_ext@@Base+0x65b>
  41cf3f:	mov    rsi,r13
  41cf42:	mov    rdx,rbx
  41cf45:	mov    rdi,rbp
  41cf48:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41cf4d:	mov    r13,rax
  41cf50:	mov    eax,DWORD PTR [rsp+0x8]
  41cf54:	mov    QWORD PTR [rsp+0x8],rax
  41cf59:	cmp    rbx,r13
  41cf5c:	je     41cf69 <flatcc_json_parser_space_ext@@Base+0x439>
  41cf5e:	cmp    BYTE PTR [r13+0x0],0x5d
  41cf63:	je     41d1b1 <flatcc_json_parser_space_ext@@Base+0x681>
  41cf69:	cmp    QWORD PTR [rsp+0x8],0x0
  41cf6f:	je     41d0d0 <flatcc_json_parser_space_ext@@Base+0x5a0>
  41cf75:	lea    rax,[rsp+0x24]
  41cf7a:	mov    QWORD PTR [rsp+0x10],rax
  41cf7f:	xor    r12d,r12d
  41cf82:	nop    WORD PTR [rax+rax*1+0x0]
  41cf88:	mov    rsi,QWORD PTR [rsp]
  41cf8c:	mov    rdi,QWORD PTR [rbp+0x0]
  41cf90:	call   416790 <flatcc_builder_get_user_frame_ptr@@Base>
  41cf95:	movzx  ecx,BYTE PTR [rax+r12*1]
  41cf9a:	mov    r8,QWORD PTR [rsp+0x10]
  41cf9f:	mov    rdx,rbx
  41cfa2:	mov    rsi,r13
  41cfa5:	mov    rdi,rbp
  41cfa8:	call   r15
  41cfab:	mov    r14,rax
  41cfae:	cmp    rbx,rax
  41cfb1:	je     41ce44 <flatcc_json_parser_space_ext@@Base+0x314>
  41cfb7:	mov    rdi,QWORD PTR [rbp+0x0]
  41cfbb:	mov    esi,0x1
  41cfc0:	call   4172e0 <flatcc_builder_extend_offset_vector@@Base>
  41cfc5:	test   rax,rax
  41cfc8:	je     41d118 <flatcc_json_parser_space_ext@@Base+0x5e8>
  41cfce:	mov    edx,DWORD PTR [rsp+0x24]
  41cfd2:	mov    DWORD PTR [rax],edx
  41cfd4:	mov    rax,rbx
  41cfd7:	sub    rax,r14
  41cfda:	cmp    rax,0x1
  41cfde:	jle    41cfee <flatcc_json_parser_space_ext@@Base+0x4be>
  41cfe0:	movzx  eax,BYTE PTR [r14]
  41cfe4:	cmp    al,0x20
  41cfe6:	jg     41d008 <flatcc_json_parser_space_ext@@Base+0x4d8>
  41cfe8:	je     41d070 <flatcc_json_parser_space_ext@@Base+0x540>
  41cfee:	mov    rsi,r14
  41cff1:	mov    rdx,rbx
  41cff4:	mov    rdi,rbp
  41cff7:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41cffc:	mov    r14,rax
  41cfff:	cmp    rbx,r14
  41d002:	je     41d068 <flatcc_json_parser_space_ext@@Base+0x538>
  41d004:	movzx  eax,BYTE PTR [r14]
  41d008:	cmp    al,0x2c
  41d00a:	je     41d088 <flatcc_json_parser_space_ext@@Base+0x558>
  41d00c:	inc    r12
  41d00f:	cmp    al,0x5d
  41d011:	je     41d030 <flatcc_json_parser_space_ext@@Base+0x500>
  41d013:	mov    rsi,r14
  41d016:	mov    ecx,0x9
  41d01b:	mov    rdx,rbx
  41d01e:	mov    rdi,rbp
  41d021:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41d026:	mov    r14,rax
  41d029:	jmp    41cea8 <flatcc_json_parser_space_ext@@Base+0x378>
  41d02e:	xchg   ax,ax
  41d030:	lea    rsi,[r14+0x1]
  41d034:	mov    rax,rbx
  41d037:	sub    rax,rsi
  41d03a:	cmp    rax,0x1
  41d03e:	jle    41d051 <flatcc_json_parser_space_ext@@Base+0x521>
  41d040:	cmp    BYTE PTR [r14+0x1],0x20
  41d045:	jg     41d0f0 <flatcc_json_parser_space_ext@@Base+0x5c0>
  41d04b:	je     41d100 <flatcc_json_parser_space_ext@@Base+0x5d0>
  41d051:	mov    rdx,rbx
  41d054:	mov    rdi,rbp
  41d057:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41d05c:	mov    r14,rax
  41d05f:	jmp    41cea8 <flatcc_json_parser_space_ext@@Base+0x378>
  41d064:	nop    DWORD PTR [rax+0x0]
  41d068:	inc    r12
  41d06b:	jmp    41cea8 <flatcc_json_parser_space_ext@@Base+0x378>
  41d070:	cmp    BYTE PTR [r14+0x1],0x20
  41d075:	jle    41cfee <flatcc_json_parser_space_ext@@Base+0x4be>
  41d07b:	inc    r14
  41d07e:	jmp    41cfff <flatcc_json_parser_space_ext@@Base+0x4cf>
  41d083:	nop    DWORD PTR [rax+rax*1+0x0]
  41d088:	lea    r13,[r14+0x1]
  41d08c:	mov    rax,rbx
  41d08f:	sub    rax,r13
  41d092:	cmp    rax,0x1
  41d096:	jle    41d0a1 <flatcc_json_parser_space_ext@@Base+0x571>
  41d098:	cmp    BYTE PTR [r14+0x1],0x20
  41d09d:	jg     41d0b2 <flatcc_json_parser_space_ext@@Base+0x582>
  41d09f:	je     41d120 <flatcc_json_parser_space_ext@@Base+0x5f0>
  41d0a1:	mov    rsi,r13
  41d0a4:	mov    rdx,rbx
  41d0a7:	mov    rdi,rbp
  41d0aa:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41d0af:	mov    r13,rax
  41d0b2:	inc    r12
  41d0b5:	cmp    rbx,r13
  41d0b8:	je     41d170 <flatcc_json_parser_space_ext@@Base+0x640>
  41d0be:	cmp    BYTE PTR [r13+0x0],0x5d
  41d0c3:	je     41d138 <flatcc_json_parser_space_ext@@Base+0x608>
  41d0c5:	cmp    QWORD PTR [rsp+0x8],r12
  41d0ca:	jne    41cf88 <flatcc_json_parser_space_ext@@Base+0x458>
  41d0d0:	mov    ecx,0x1e
  41d0d5:	mov    rdx,rbx
  41d0d8:	mov    rsi,r13
  41d0db:	mov    rdi,rbp
  41d0de:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41d0e3:	mov    r14,rax
  41d0e6:	jmp    41ce44 <flatcc_json_parser_space_ext@@Base+0x314>
  41d0eb:	nop    DWORD PTR [rax+rax*1+0x0]
  41d0f0:	mov    r14,rsi
  41d0f3:	jmp    41cea8 <flatcc_json_parser_space_ext@@Base+0x378>
  41d0f8:	nop    DWORD PTR [rax+rax*1+0x0]
  41d100:	cmp    BYTE PTR [r14+0x2],0x20
  41d105:	jle    41d051 <flatcc_json_parser_space_ext@@Base+0x521>
  41d10b:	add    r14,0x2
  41d10f:	jmp    41cea8 <flatcc_json_parser_space_ext@@Base+0x378>
  41d114:	nop    DWORD PTR [rax+0x0]
  41d118:	mov    r12,r14
  41d11b:	jmp    41ce2e <flatcc_json_parser_space_ext@@Base+0x2fe>
  41d120:	cmp    BYTE PTR [r14+0x2],0x20
  41d125:	jle    41d0a1 <flatcc_json_parser_space_ext@@Base+0x571>
  41d12b:	lea    r13,[r14+0x2]
  41d12f:	jmp    41d0b2 <flatcc_json_parser_space_ext@@Base+0x582>
  41d131:	nop    DWORD PTR [rax+0x0]
  41d138:	lea    r14,[r13+0x1]
  41d13c:	mov    rax,rbx
  41d13f:	sub    rax,r14
  41d142:	cmp    rax,0x1
  41d146:	jle    41d155 <flatcc_json_parser_space_ext@@Base+0x625>
  41d148:	cmp    BYTE PTR [r13+0x1],0x20
  41d14d:	jg     41cea8 <flatcc_json_parser_space_ext@@Base+0x378>
  41d153:	je     41d1a1 <flatcc_json_parser_space_ext@@Base+0x671>
  41d155:	mov    rsi,r14
  41d158:	mov    rdx,rbx
  41d15b:	mov    rdi,rbp
  41d15e:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41d163:	mov    r14,rax
  41d166:	jmp    41cea8 <flatcc_json_parser_space_ext@@Base+0x378>
  41d16b:	nop    DWORD PTR [rax+rax*1+0x0]
  41d170:	mov    ecx,0x9
  41d175:	mov    rdx,rbx
  41d178:	mov    rsi,rbx
  41d17b:	mov    rdi,rbp
  41d17e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41d183:	mov    r14,rax
  41d186:	jmp    41cea8 <flatcc_json_parser_space_ext@@Base+0x378>
  41d18b:	cmp    BYTE PTR [r12+0x2],0x20
  41d191:	jle    41cf3f <flatcc_json_parser_space_ext@@Base+0x40f>
  41d197:	lea    r13,[r12+0x2]
  41d19c:	jmp    41cf50 <flatcc_json_parser_space_ext@@Base+0x420>
  41d1a1:	cmp    BYTE PTR [r13+0x2],0x20
  41d1a6:	jle    41d155 <flatcc_json_parser_space_ext@@Base+0x625>
  41d1a8:	lea    r14,[r13+0x2]
  41d1ac:	jmp    41cea8 <flatcc_json_parser_space_ext@@Base+0x378>
  41d1b1:	lea    r14,[r13+0x1]
  41d1b5:	mov    rax,rbx
  41d1b8:	sub    rax,r14
  41d1bb:	cmp    rax,0x1
  41d1bf:	jle    41d1d1 <flatcc_json_parser_space_ext@@Base+0x6a1>
  41d1c1:	xor    r12d,r12d
  41d1c4:	cmp    BYTE PTR [r13+0x1],0x20
  41d1c9:	jg     41cea8 <flatcc_json_parser_space_ext@@Base+0x378>
  41d1cf:	je     41d1ea <flatcc_json_parser_space_ext@@Base+0x6ba>
  41d1d1:	mov    rsi,r14
  41d1d4:	mov    rdx,rbx
  41d1d7:	mov    rdi,rbp
  41d1da:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41d1df:	mov    r14,rax
  41d1e2:	xor    r12d,r12d
  41d1e5:	jmp    41cea8 <flatcc_json_parser_space_ext@@Base+0x378>
  41d1ea:	cmp    BYTE PTR [r13+0x2],0x20
  41d1ef:	jle    41d1d1 <flatcc_json_parser_space_ext@@Base+0x6a1>
  41d1f1:	jmp    41d1a8 <flatcc_json_parser_space_ext@@Base+0x678>
  41d1f3:	call   4061a0 <__stack_chk_fail@plt>
  41d1f8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041d200 <flatcc_json_parser_string_escape@@Base>:
  41d200:	endbr64 
  41d204:	mov    r8,rdx
  41d207:	sub    r8,rsi
  41d20a:	cmp    r8,0x1
  41d20e:	jle    41d238 <flatcc_json_parser_string_escape@@Base+0x38>
  41d210:	cmp    BYTE PTR [rsi],0x5c
  41d213:	jne    41d238 <flatcc_json_parser_string_escape@@Base+0x38>
  41d215:	movzx  eax,BYTE PTR [rsi+0x1]
  41d219:	sub    eax,0x22
  41d21c:	cmp    al,0x56
  41d21e:	ja     41d238 <flatcc_json_parser_string_escape@@Base+0x38>
  41d220:	lea    r9,[rip+0x127d9]        # 42fa00 <flatcc_builder_padding_base@@Base+0xce0>
  41d227:	movzx  eax,al
  41d22a:	movsxd rax,DWORD PTR [r9+rax*4]
  41d22e:	add    rax,r9
  41d231:	notrack jmp rax
  41d234:	nop    DWORD PTR [rax+0x0]
  41d238:	mov    BYTE PTR [rcx],0x0
  41d23b:	mov    ecx,0x12
  41d240:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  41d245:	nop    DWORD PTR [rax]
  41d248:	mov    BYTE PTR [rcx],0x1
  41d24b:	cmp    r8,0x3
  41d24f:	jle    41d238 <flatcc_json_parser_string_escape@@Base+0x38>
  41d251:	movzx  eax,BYTE PTR [rsi+0x2]
  41d255:	lea    r8d,[rax-0x30]
  41d259:	cmp    r8b,0x9
  41d25d:	ja     41d3a0 <flatcc_json_parser_string_escape@@Base+0x1a0>
  41d263:	shl    eax,0x4
  41d266:	movzx  r8d,BYTE PTR [rsi+0x3]
  41d26b:	lea    r9d,[r8-0x30]
  41d26f:	cmp    r9b,0x9
  41d273:	ja     41d408 <flatcc_json_parser_string_escape@@Base+0x208>
  41d279:	or     eax,r9d
  41d27c:	mov    BYTE PTR [rcx+0x1],al
  41d27f:	lea    rax,[rsi+0x4]
  41d283:	ret    
  41d284:	nop    DWORD PTR [rax+0x0]
  41d288:	mov    edi,0x2201
  41d28d:	mov    WORD PTR [rcx],di
  41d290:	lea    rax,[rsi+0x2]
  41d294:	ret    
  41d295:	nop    DWORD PTR [rax]
  41d298:	mov    eax,0x2f01
  41d29d:	mov    WORD PTR [rcx],ax
  41d2a0:	lea    rax,[rsi+0x2]
  41d2a4:	ret    
  41d2a5:	nop    DWORD PTR [rax]
  41d2a8:	mov    edx,0x5c01
  41d2ad:	mov    WORD PTR [rcx],dx
  41d2b0:	lea    rax,[rsi+0x2]
  41d2b4:	ret    
  41d2b5:	nop    DWORD PTR [rax]
  41d2b8:	mov    r9d,0x801
  41d2be:	mov    WORD PTR [rcx],r9w
  41d2c2:	lea    rax,[rsi+0x2]
  41d2c6:	ret    
  41d2c7:	nop    WORD PTR [rax+rax*1+0x0]
  41d2d0:	mov    r8d,0xc01
  41d2d6:	mov    WORD PTR [rcx],r8w
  41d2da:	lea    rax,[rsi+0x2]
  41d2de:	ret    
  41d2df:	nop
  41d2e0:	mov    r11d,0xa01
  41d2e6:	mov    WORD PTR [rcx],r11w
  41d2ea:	lea    rax,[rsi+0x2]
  41d2ee:	ret    
  41d2ef:	nop
  41d2f0:	mov    r10d,0xd01
  41d2f6:	mov    WORD PTR [rcx],r10w
  41d2fa:	lea    rax,[rsi+0x2]
  41d2fe:	ret    
  41d2ff:	nop
  41d300:	mov    eax,0x901
  41d305:	mov    WORD PTR [rcx],ax
  41d308:	lea    rax,[rsi+0x2]
  41d30c:	ret    
  41d30d:	nop    DWORD PTR [rax]
  41d310:	cmp    r8,0x5
  41d314:	jle    41d238 <flatcc_json_parser_string_escape@@Base+0x38>
  41d31a:	movzx  eax,BYTE PTR [rsi+0x2]
  41d31e:	lea    r8d,[rax-0x30]
  41d322:	cmp    r8b,0x9
  41d326:	ja     41d3c0 <flatcc_json_parser_string_escape@@Base+0x1c0>
  41d32c:	shl    eax,0xc
  41d32f:	movzx  r8d,BYTE PTR [rsi+0x3]
  41d334:	lea    r9d,[r8-0x30]
  41d338:	cmp    r9b,0x9
  41d33c:	ja     41d3e0 <flatcc_json_parser_string_escape@@Base+0x1e0>
  41d342:	shl    r8d,0x8
  41d346:	sub    r8w,0x3000
  41d34c:	or     eax,r8d
  41d34f:	movsx  r8w,BYTE PTR [rsi+0x4]
  41d355:	lea    r9d,[r8-0x30]
  41d359:	cmp    r9b,0x9
  41d35d:	ja     41d430 <flatcc_json_parser_string_escape@@Base+0x230>
  41d363:	sub    r8d,0x30
  41d367:	shl    r8d,0x4
  41d36b:	or     eax,r8d
  41d36e:	movzx  r8d,BYTE PTR [rsi+0x5]
  41d373:	lea    r9d,[r8-0x30]
  41d377:	cmp    r9b,0x9
  41d37b:	ja     41d460 <flatcc_json_parser_string_escape@@Base+0x260>
  41d381:	movsx  dx,r8b
  41d386:	sub    edx,0x30
  41d389:	or     eax,edx
  41d38b:	cmp    ax,0x7f
  41d38f:	ja     41d488 <flatcc_json_parser_string_escape@@Base+0x288>
  41d395:	mov    BYTE PTR [rcx],0x1
  41d398:	mov    BYTE PTR [rcx+0x1],al
  41d39b:	lea    rax,[rsi+0x6]
  41d39f:	ret    
  41d3a0:	or     eax,0x20
  41d3a3:	lea    r8d,[rax-0x61]
  41d3a7:	cmp    r8b,0x5
  41d3ab:	ja     41d238 <flatcc_json_parser_string_escape@@Base+0x38>
  41d3b1:	shl    eax,0x4
  41d3b4:	sub    eax,0x70
  41d3b7:	jmp    41d266 <flatcc_json_parser_string_escape@@Base+0x66>
  41d3bc:	nop    DWORD PTR [rax+0x0]
  41d3c0:	or     eax,0x20
  41d3c3:	lea    r8d,[rax-0x61]
  41d3c7:	cmp    r8b,0x5
  41d3cb:	ja     41d238 <flatcc_json_parser_string_escape@@Base+0x38>
  41d3d1:	shl    eax,0xc
  41d3d4:	sub    ax,0x7000
  41d3d8:	jmp    41d32f <flatcc_json_parser_string_escape@@Base+0x12f>
  41d3dd:	nop    DWORD PTR [rax]
  41d3e0:	or     r8d,0x20
  41d3e4:	lea    r9d,[r8-0x61]
  41d3e8:	cmp    r9b,0x5
  41d3ec:	ja     41d238 <flatcc_json_parser_string_escape@@Base+0x38>
  41d3f2:	shl    r8d,0x8
  41d3f6:	sub    r8w,0x5700
  41d3fc:	or     eax,r8d
  41d3ff:	jmp    41d34f <flatcc_json_parser_string_escape@@Base+0x14f>
  41d404:	nop    DWORD PTR [rax+0x0]
  41d408:	or     r8d,0x20
  41d40c:	lea    r9d,[r8-0x61]
  41d410:	cmp    r9b,0x5
  41d414:	ja     41d238 <flatcc_json_parser_string_escape@@Base+0x38>
  41d41a:	sub    r8d,0x57
  41d41e:	or     eax,r8d
  41d421:	jmp    41d27c <flatcc_json_parser_string_escape@@Base+0x7c>
  41d426:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41d430:	or     r8d,0x20
  41d434:	lea    r9d,[r8-0x61]
  41d438:	cmp    r9b,0x5
  41d43c:	ja     41d238 <flatcc_json_parser_string_escape@@Base+0x38>
  41d442:	movsx  r8w,r8b
  41d447:	sub    r8d,0x57
  41d44b:	shl    r8d,0x4
  41d44f:	or     eax,r8d
  41d452:	jmp    41d36e <flatcc_json_parser_string_escape@@Base+0x16e>
  41d457:	nop    WORD PTR [rax+rax*1+0x0]
  41d460:	or     r8d,0x20
  41d464:	lea    r9d,[r8-0x61]
  41d468:	cmp    r9b,0x5
  41d46c:	ja     41d238 <flatcc_json_parser_string_escape@@Base+0x38>
  41d472:	movsx  r8w,r8b
  41d477:	lea    edx,[r8-0x57]
  41d47b:	or     eax,edx
  41d47d:	jmp    41d38b <flatcc_json_parser_string_escape@@Base+0x18b>
  41d482:	nop    WORD PTR [rax+rax*1+0x0]
  41d488:	mov    edi,eax
  41d48a:	mov    edx,eax
  41d48c:	and    edi,0x3f
  41d48f:	shr    dx,0x6
  41d493:	or     edi,0xffffff80
  41d496:	cmp    ax,0x7ff
  41d49a:	ja     41d4ae <flatcc_json_parser_string_escape@@Base+0x2ae>
  41d49c:	or     edx,0xffffffc0
  41d49f:	mov    BYTE PTR [rcx],0x2
  41d4a2:	mov    BYTE PTR [rcx+0x1],dl
  41d4a5:	mov    BYTE PTR [rcx+0x2],dil
  41d4a9:	jmp    41d39b <flatcc_json_parser_string_escape@@Base+0x19b>
  41d4ae:	shr    ax,0xc
  41d4b2:	and    edx,0x3f
  41d4b5:	or     eax,0xffffffe0
  41d4b8:	or     edx,0xffffff80
  41d4bb:	mov    BYTE PTR [rcx],0x3
  41d4be:	mov    BYTE PTR [rcx+0x1],al
  41d4c1:	mov    BYTE PTR [rcx+0x2],dl
  41d4c4:	mov    BYTE PTR [rcx+0x3],dil
  41d4c8:	jmp    41d39b <flatcc_json_parser_string_escape@@Base+0x19b>
  41d4cd:	nop    DWORD PTR [rax]

000000000041d4d0 <flatcc_json_parser_skip_constant@@Base>:
  41d4d0:	endbr64 
  41d4d4:	push   r13
  41d4d6:	push   r12
  41d4d8:	push   rbp
  41d4d9:	push   rbx
  41d4da:	mov    rbx,rsi
  41d4dd:	sub    rsp,0x8
  41d4e1:	cmp    rsi,rdx
  41d4e4:	je     41d557 <flatcc_json_parser_skip_constant@@Base+0x87>
  41d4e6:	mov    rbp,rdi
  41d4e9:	mov    r12,rdx
  41d4ec:	movabs r13,0x2000000000ffd
  41d4f6:	jmp    41d50e <flatcc_json_parser_skip_constant@@Base+0x3e>
  41d4f8:	nop    DWORD PTR [rax+rax*1+0x0]
  41d500:	bt     r13,rdx
  41d504:	jae    41d51d <flatcc_json_parser_skip_constant@@Base+0x4d>
  41d506:	inc    rbx
  41d509:	cmp    r12,rbx
  41d50c:	je     41d557 <flatcc_json_parser_skip_constant@@Base+0x87>
  41d50e:	movzx  eax,BYTE PTR [rbx]
  41d511:	test   al,al
  41d513:	js     41d506 <flatcc_json_parser_skip_constant@@Base+0x36>
  41d515:	lea    edx,[rax-0x2e]
  41d518:	cmp    dl,0x31
  41d51b:	jbe    41d500 <flatcc_json_parser_skip_constant@@Base+0x30>
  41d51d:	mov    edx,eax
  41d51f:	or     edx,0x20
  41d522:	sub    edx,0x61
  41d525:	cmp    dl,0x19
  41d528:	jbe    41d506 <flatcc_json_parser_skip_constant@@Base+0x36>
  41d52a:	mov    rdx,r12
  41d52d:	sub    rdx,rbx
  41d530:	cmp    rdx,0x1
  41d534:	jle    41d53c <flatcc_json_parser_skip_constant@@Base+0x6c>
  41d536:	cmp    al,0x20
  41d538:	jg     41d557 <flatcc_json_parser_skip_constant@@Base+0x87>
  41d53a:	je     41d568 <flatcc_json_parser_skip_constant@@Base+0x98>
  41d53c:	mov    rdx,r12
  41d53f:	mov    rsi,rbx
  41d542:	mov    rdi,rbp
  41d545:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41d54a:	cmp    rax,rbx
  41d54d:	je     41d557 <flatcc_json_parser_skip_constant@@Base+0x87>
  41d54f:	mov    rbx,rax
  41d552:	cmp    r12,rbx
  41d555:	jne    41d50e <flatcc_json_parser_skip_constant@@Base+0x3e>
  41d557:	add    rsp,0x8
  41d55b:	mov    rax,rbx
  41d55e:	pop    rbx
  41d55f:	pop    rbp
  41d560:	pop    r12
  41d562:	pop    r13
  41d564:	ret    
  41d565:	nop    DWORD PTR [rax]
  41d568:	cmp    BYTE PTR [rbx+0x1],0x20
  41d56c:	lea    rax,[rbx+0x1]
  41d570:	jle    41d53c <flatcc_json_parser_skip_constant@@Base+0x6c>
  41d572:	jmp    41d54a <flatcc_json_parser_skip_constant@@Base+0x7a>
  41d574:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41d57f:	nop

000000000041d580 <flatcc_json_parser_match_constant@@Base>:
  41d580:	endbr64 
  41d584:	mov    rax,rdx
  41d587:	sub    rax,rsi
  41d58a:	movsxd rcx,ecx
  41d58d:	cmp    rax,rcx
  41d590:	jle    41d5f0 <flatcc_json_parser_match_constant@@Base+0x70>
  41d592:	lea    r9,[rsi+rcx*1]
  41d596:	movzx  eax,BYTE PTR [r9]
  41d59a:	cmp    al,0x20
  41d59c:	je     41d5c0 <flatcc_json_parser_match_constant@@Base+0x40>
  41d59e:	cmp    al,0x22
  41d5a0:	je     41d618 <flatcc_json_parser_match_constant@@Base+0x98>
  41d5a2:	mov    DWORD PTR [r8],0x0
  41d5a9:	cmp    al,0x5c
  41d5ab:	jne    41d610 <flatcc_json_parser_match_constant@@Base+0x90>
  41d5ad:	mov    ecx,0x12
  41d5b2:	mov    rsi,r9
  41d5b5:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  41d5ba:	nop    WORD PTR [rax+rax*1+0x0]
  41d5c0:	lea    rax,[r9+0x1]
  41d5c4:	cmp    rdx,rax
  41d5c7:	je     41d5e8 <flatcc_json_parser_match_constant@@Base+0x68>
  41d5c9:	movzx  ecx,BYTE PTR [r9+0x1]
  41d5ce:	cmp    cl,0x20
  41d5d1:	je     41d5e0 <flatcc_json_parser_match_constant@@Base+0x60>
  41d5d3:	jmp    41d600 <flatcc_json_parser_match_constant@@Base+0x80>
  41d5d5:	nop    DWORD PTR [rax]
  41d5d8:	movzx  ecx,BYTE PTR [rax]
  41d5db:	cmp    cl,0x20
  41d5de:	jne    41d600 <flatcc_json_parser_match_constant@@Base+0x80>
  41d5e0:	inc    rax
  41d5e3:	cmp    rdx,rax
  41d5e6:	jne    41d5d8 <flatcc_json_parser_match_constant@@Base+0x58>
  41d5e8:	mov    DWORD PTR [r8],0x0
  41d5ef:	ret    
  41d5f0:	mov    DWORD PTR [r8],0x0
  41d5f7:	mov    rax,rsi
  41d5fa:	ret    
  41d5fb:	nop    DWORD PTR [rax+rax*1+0x0]
  41d600:	cmp    cl,0x22
  41d603:	je     41d61b <flatcc_json_parser_match_constant@@Base+0x9b>
  41d605:	mov    DWORD PTR [r8],0x1
  41d60c:	ret    
  41d60d:	nop    DWORD PTR [rax]
  41d610:	mov    rax,rsi
  41d613:	ret    
  41d614:	nop    DWORD PTR [rax+0x0]
  41d618:	mov    rax,r9
  41d61b:	lea    rsi,[rax+0x1]
  41d61f:	push   rbx
  41d620:	mov    rbx,r8
  41d623:	cmp    rsi,0xffffffffffffffff
  41d627:	jge    41d631 <flatcc_json_parser_match_constant@@Base+0xb1>
  41d629:	cmp    BYTE PTR [rax+0x1],0x20
  41d62d:	jg     41d640 <flatcc_json_parser_match_constant@@Base+0xc0>
  41d62f:	je     41d648 <flatcc_json_parser_match_constant@@Base+0xc8>
  41d631:	xor    edx,edx
  41d633:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41d638:	mov    DWORD PTR [rbx],0x0
  41d63e:	pop    rbx
  41d63f:	ret    
  41d640:	mov    rax,rsi
  41d643:	jmp    41d638 <flatcc_json_parser_match_constant@@Base+0xb8>
  41d645:	nop    DWORD PTR [rax]
  41d648:	cmp    BYTE PTR [rax+0x2],0x20
  41d64c:	jle    41d631 <flatcc_json_parser_match_constant@@Base+0xb1>
  41d64e:	add    rax,0x2
  41d652:	jmp    41d638 <flatcc_json_parser_match_constant@@Base+0xb8>
  41d654:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41d65f:	nop

000000000041d660 <flatcc_json_parser_double@@Base>:
  41d660:	endbr64 
  41d664:	mov    QWORD PTR [rcx],0x0
  41d66b:	cmp    rsi,rdx
  41d66e:	je     41d738 <flatcc_json_parser_double@@Base+0xd8>
  41d674:	xor    eax,eax
  41d676:	cmp    BYTE PTR [rsi],0x2d
  41d679:	sete   al
  41d67c:	add    rax,rsi
  41d67f:	mov    r8,rdx
  41d682:	sub    r8,rax
  41d685:	cmp    r8,0x1
  41d689:	jle    41d6a3 <flatcc_json_parser_double@@Base+0x43>
  41d68b:	movzx  r8d,BYTE PTR [rax]
  41d68f:	cmp    r8b,0x2e
  41d693:	je     41d72a <flatcc_json_parser_double@@Base+0xca>
  41d699:	cmp    r8b,0x30
  41d69d:	je     41d720 <flatcc_json_parser_double@@Base+0xc0>
  41d6a3:	push   r13
  41d6a5:	mov    r13,rdi
  41d6a8:	push   r12
  41d6aa:	mov    r12,rcx
  41d6ad:	push   rbp
  41d6ae:	mov    rbp,rdx
  41d6b1:	push   rbx
  41d6b2:	mov    rbx,rsi
  41d6b5:	mov    rsi,rdx
  41d6b8:	sub    rsp,0x8
  41d6bc:	sub    rsi,rbx
  41d6bf:	mov    rdx,rcx
  41d6c2:	mov    rdi,rbx
  41d6c5:	call   41c060 <grisu3_diy_fp_encode_double@@Base+0x3d0>
  41d6ca:	test   rax,rax
  41d6cd:	je     41d6e0 <flatcc_json_parser_double@@Base+0x80>
  41d6cf:	cmp    rbx,rax
  41d6d2:	je     41d6e0 <flatcc_json_parser_double@@Base+0x80>
  41d6d4:	add    rsp,0x8
  41d6d8:	pop    rbx
  41d6d9:	pop    rbp
  41d6da:	pop    r12
  41d6dc:	pop    r13
  41d6de:	ret    
  41d6df:	nop
  41d6e0:	vmovsd xmm0,QWORD PTR [r12]
  41d6e6:	mov    ecx,0x7
  41d6eb:	vandpd xmm0,xmm0,XMMWORD PTR [rip+0x131ad]        # 4308a0 <flatcc_builder_padding_base@@Base+0x1b80>
  41d6f3:	vucomisd xmm0,QWORD PTR [rip+0x13195]        # 430890 <flatcc_builder_padding_base@@Base+0x1b70>
  41d6fb:	ja     41d702 <flatcc_json_parser_double@@Base+0xa2>
  41d6fd:	mov    ecx,0x6
  41d702:	add    rsp,0x8
  41d706:	mov    rsi,rbx
  41d709:	pop    rbx
  41d70a:	mov    rdx,rbp
  41d70d:	pop    rbp
  41d70e:	pop    r12
  41d710:	mov    rdi,r13
  41d713:	pop    r13
  41d715:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  41d71a:	nop    WORD PTR [rax+rax*1+0x0]
  41d720:	cmp    BYTE PTR [rax+0x1],0x30
  41d724:	jne    41d6a3 <flatcc_json_parser_double@@Base+0x43>
  41d72a:	mov    ecx,0x6
  41d72f:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  41d734:	nop    DWORD PTR [rax+0x0]
  41d738:	mov    rax,rsi
  41d73b:	ret    
  41d73c:	nop    DWORD PTR [rax+0x0]

000000000041d740 <flatcc_json_parser_float@@Base>:
  41d740:	endbr64 
  41d744:	push   r13
  41d746:	push   r12
  41d748:	push   rbp
  41d749:	push   rbx
  41d74a:	mov    rbx,rsi
  41d74d:	sub    rsp,0x18
  41d751:	mov    rax,QWORD PTR fs:0x28
  41d75a:	mov    QWORD PTR [rsp+0x8],rax
  41d75f:	xor    eax,eax
  41d761:	mov    DWORD PTR [rcx],0x0
  41d767:	cmp    rsi,rdx
  41d76a:	je     41d868 <flatcc_json_parser_float@@Base+0x128>
  41d770:	xor    eax,eax
  41d772:	cmp    BYTE PTR [rsi],0x2d
  41d775:	sete   al
  41d778:	add    rax,rsi
  41d77b:	mov    rbp,rdx
  41d77e:	sub    rdx,rax
  41d781:	mov    r12,rdi
  41d784:	mov    r13,rcx
  41d787:	cmp    rdx,0x1
  41d78b:	jle    41d7a2 <flatcc_json_parser_float@@Base+0x62>
  41d78d:	movzx  edx,BYTE PTR [rax]
  41d790:	cmp    dl,0x2e
  41d793:	je     41d840 <flatcc_json_parser_float@@Base+0x100>
  41d799:	cmp    dl,0x30
  41d79c:	je     41d830 <flatcc_json_parser_float@@Base+0xf0>
  41d7a2:	mov    rsi,rbp
  41d7a5:	sub    rsi,rbx
  41d7a8:	mov    rdx,rsp
  41d7ab:	mov    rdi,rbx
  41d7ae:	call   41c060 <grisu3_diy_fp_encode_double@@Base+0x3d0>
  41d7b3:	vmovsd xmm1,QWORD PTR [rsp]
  41d7b8:	vxorps xmm0,xmm0,xmm0
  41d7bc:	vcvtsd2ss xmm0,xmm0,xmm1
  41d7c0:	vmovss DWORD PTR [r13+0x0],xmm0
  41d7c6:	vandps xmm0,xmm0,XMMWORD PTR [rip+0x130e2]        # 4308b0 <flatcc_builder_padding_base@@Base+0x1b90>
  41d7ce:	vucomiss xmm0,DWORD PTR [rip+0x130f2]        # 4308c8 <flatcc_builder_padding_base@@Base+0x1ba8>
  41d7d6:	ja     41d800 <flatcc_json_parser_float@@Base+0xc0>
  41d7d8:	test   rax,rax
  41d7db:	je     41d840 <flatcc_json_parser_float@@Base+0x100>
  41d7dd:	cmp    rbx,rax
  41d7e0:	je     41d840 <flatcc_json_parser_float@@Base+0x100>
  41d7e2:	mov    rcx,QWORD PTR [rsp+0x8]
  41d7e7:	xor    rcx,QWORD PTR fs:0x28
  41d7f0:	jne    41d870 <flatcc_json_parser_float@@Base+0x130>
  41d7f2:	add    rsp,0x18
  41d7f6:	pop    rbx
  41d7f7:	pop    rbp
  41d7f8:	pop    r12
  41d7fa:	pop    r13
  41d7fc:	ret    
  41d7fd:	nop    DWORD PTR [rax]
  41d800:	vxorpd xmm0,xmm0,xmm0
  41d804:	vcomisd xmm0,xmm1
  41d808:	ja     41d858 <flatcc_json_parser_float@@Base+0x118>
  41d80a:	vmovss xmm0,DWORD PTR [rip+0x130b2]        # 4308c4 <flatcc_builder_padding_base@@Base+0x1ba4>
  41d812:	vmovss DWORD PTR [r13+0x0],xmm0
  41d818:	mov    ecx,0x7
  41d81d:	mov    rdx,rbp
  41d820:	mov    rsi,rbx
  41d823:	mov    rdi,r12
  41d826:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41d82b:	jmp    41d7e2 <flatcc_json_parser_float@@Base+0xa2>
  41d82d:	nop    DWORD PTR [rax]
  41d830:	cmp    BYTE PTR [rax+0x1],0x30
  41d834:	jne    41d7a2 <flatcc_json_parser_float@@Base+0x62>
  41d83a:	nop    WORD PTR [rax+rax*1+0x0]
  41d840:	mov    ecx,0x6
  41d845:	mov    rdx,rbp
  41d848:	mov    rsi,rbx
  41d84b:	mov    rdi,r12
  41d84e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41d853:	jmp    41d7e2 <flatcc_json_parser_float@@Base+0xa2>
  41d855:	nop    DWORD PTR [rax]
  41d858:	vmovss xmm0,DWORD PTR [rip+0x13060]        # 4308c0 <flatcc_builder_padding_base@@Base+0x1ba0>
  41d860:	jmp    41d812 <flatcc_json_parser_float@@Base+0xd2>
  41d862:	nop    WORD PTR [rax+rax*1+0x0]
  41d868:	mov    rax,rsi
  41d86b:	jmp    41d7e2 <flatcc_json_parser_float@@Base+0xa2>
  41d870:	call   4061a0 <__stack_chk_fail@plt>
  41d875:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000041d880 <flatcc_json_parser_integer@@Base>:
  41d880:	endbr64 
  41d884:	cmp    rsi,rdx
  41d887:	je     41d920 <flatcc_json_parser_integer@@Base+0xa0>
  41d88d:	cmp    BYTE PTR [rsi],0x2d
  41d890:	sete   al
  41d893:	movzx  r9d,al
  41d897:	movzx  eax,al
  41d89a:	add    rax,rsi
  41d89d:	mov    DWORD PTR [rcx],r9d
  41d8a0:	cmp    rdx,rax
  41d8a3:	je     41d93a <flatcc_json_parser_integer@@Base+0xba>
  41d8a9:	movsx  r9,BYTE PTR [rax]
  41d8ad:	lea    ecx,[r9-0x30]
  41d8b1:	cmp    cl,0x9
  41d8b4:	ja     41d935 <flatcc_json_parser_integer@@Base+0xb5>
  41d8b6:	sub    r9,0x30
  41d8ba:	jmp    41d8d1 <flatcc_json_parser_integer@@Base+0x51>
  41d8bc:	nop    DWORD PTR [rax+0x0]
  41d8c0:	lea    r10,[r9+r9*4]
  41d8c4:	lea    rcx,[rcx+r10*2-0x30]
  41d8c9:	cmp    rcx,r9
  41d8cc:	jb     41d910 <flatcc_json_parser_integer@@Base+0x90>
  41d8ce:	mov    r9,rcx
  41d8d1:	inc    rax
  41d8d4:	cmp    rdx,rax
  41d8d7:	je     41d8ff <flatcc_json_parser_integer@@Base+0x7f>
  41d8d9:	movsx  rcx,BYTE PTR [rax]
  41d8dd:	lea    r10d,[rcx-0x30]
  41d8e1:	cmp    r10b,0x9
  41d8e5:	jbe    41d8c0 <flatcc_json_parser_integer@@Base+0x40>
  41d8e7:	cmp    rsi,rax
  41d8ea:	je     41d908 <flatcc_json_parser_integer@@Base+0x88>
  41d8ec:	movzx  ecx,BYTE PTR [rax]
  41d8ef:	mov    esi,ecx
  41d8f1:	and    esi,0xffffffdf
  41d8f4:	cmp    sil,0x45
  41d8f8:	je     41d928 <flatcc_json_parser_integer@@Base+0xa8>
  41d8fa:	cmp    cl,0x2e
  41d8fd:	je     41d928 <flatcc_json_parser_integer@@Base+0xa8>
  41d8ff:	mov    QWORD PTR [r8],r9
  41d902:	ret    
  41d903:	nop    DWORD PTR [rax+rax*1+0x0]
  41d908:	ret    
  41d909:	nop    DWORD PTR [rax+0x0]
  41d910:	mov    ecx,0x8
  41d915:	mov    rsi,rax
  41d918:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  41d91d:	nop    DWORD PTR [rax]
  41d920:	mov    rax,rsi
  41d923:	ret    
  41d924:	nop    DWORD PTR [rax+0x0]
  41d928:	mov    ecx,0xc
  41d92d:	mov    rsi,rax
  41d930:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  41d935:	xor    r9d,r9d
  41d938:	jmp    41d8e7 <flatcc_json_parser_integer@@Base+0x67>
  41d93a:	xor    r9d,r9d
  41d93d:	jmp    41d8ff <flatcc_json_parser_integer@@Base+0x7f>
  41d93f:	nop

000000000041d940 <flatcc_json_parser_generic_json@@Base>:
  41d940:	endbr64 
  41d944:	push   r15
  41d946:	mov    r11,rsi
  41d949:	push   r14
  41d94b:	push   r13
  41d94d:	push   r12
  41d94f:	push   rbp
  41d950:	push   rbx
  41d951:	sub    rsp,0x248
  41d958:	mov    rax,QWORD PTR fs:0x28
  41d961:	mov    QWORD PTR [rsp+0x238],rax
  41d969:	xor    eax,eax
  41d96b:	cmp    rsi,rdx
  41d96e:	je     41e1e0 <flatcc_json_parser_generic_json@@Base+0x8a0>
  41d974:	mov    r15,rdx
  41d977:	lea    r12,[rsp+0x30]
  41d97c:	movzx  edx,BYTE PTR [rsi]
  41d97f:	mov    rbx,rdi
  41d982:	mov    r14,r12
  41d985:	lea    r13,[rsp+0x2c]
  41d98a:	cmp    r14,r12
  41d98d:	je     41de54 <flatcc_json_parser_generic_json@@Base+0x514>
  41d993:	cmp    BYTE PTR [r14-0x1],0x7d
  41d998:	je     41def0 <flatcc_json_parser_generic_json@@Base+0x5b0>
  41d99e:	lea    eax,[rdx-0x22]
  41d9a1:	cmp    al,0x59
  41d9a3:	ja     41da40 <flatcc_json_parser_generic_json@@Base+0x100>
  41d9a9:	lea    rcx,[rip+0x121ac]        # 42fb5c <flatcc_builder_padding_base@@Base+0xe3c>
  41d9b0:	movzx  eax,al
  41d9b3:	movsxd rax,DWORD PTR [rcx+rax*4]
  41d9b7:	add    rax,rcx
  41d9ba:	notrack jmp rax
  41d9bd:	nop    DWORD PTR [rax]
  41d9c0:	lea    rax,[r12+0x200]
  41d9c8:	cmp    r14,rax
  41d9cb:	je     41e204 <flatcc_json_parser_generic_json@@Base+0x8c4>
  41d9d1:	lea    rsi,[r11+0x1]
  41d9d5:	mov    rax,r15
  41d9d8:	sub    rax,rsi
  41d9db:	lea    rbp,[r14+0x1]
  41d9df:	mov    BYTE PTR [r14],0x7d
  41d9e3:	cmp    rax,0x1
  41d9e7:	jle    41d9fa <flatcc_json_parser_generic_json@@Base+0xba>
  41d9e9:	cmp    BYTE PTR [r11+0x1],0x20
  41d9ee:	jg     41e1ce <flatcc_json_parser_generic_json@@Base+0x88e>
  41d9f4:	je     41e2c6 <flatcc_json_parser_generic_json@@Base+0x986>
  41d9fa:	mov    rdx,r15
  41d9fd:	mov    rdi,rbx
  41da00:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41da05:	mov    r11,rax
  41da08:	cmp    r15,r11
  41da0b:	je     41e1e0 <flatcc_json_parser_generic_json@@Base+0x8a0>
  41da11:	movzx  edx,BYTE PTR [r11]
  41da15:	cmp    dl,0x7d
  41da18:	jne    41dede <flatcc_json_parser_generic_json@@Base+0x59e>
  41da1e:	mov    r14,rbp
  41da21:	mov    rax,r11
  41da24:	jmp    41dc8c <flatcc_json_parser_generic_json@@Base+0x34c>
  41da29:	nop    DWORD PTR [rax+0x0]
  41da30:	mov    rax,r15
  41da33:	sub    rax,r11
  41da36:	cmp    rax,0x3
  41da3a:	jg     41e060 <flatcc_json_parser_generic_json@@Base+0x720>
  41da40:	mov    ecx,0x5
  41da45:	mov    rdx,r15
  41da48:	mov    rsi,r11
  41da4b:	mov    rdi,rbx
  41da4e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41da53:	mov    rdi,QWORD PTR [rsp+0x238]
  41da5b:	xor    rdi,QWORD PTR fs:0x28
  41da64:	jne    41e3fb <flatcc_json_parser_generic_json@@Base+0xabb>
  41da6a:	add    rsp,0x248
  41da71:	pop    rbx
  41da72:	pop    rbp
  41da73:	pop    r12
  41da75:	pop    r13
  41da77:	pop    r14
  41da79:	pop    r15
  41da7b:	ret    
  41da7c:	nop    DWORD PTR [rax+0x0]
  41da80:	mov    rax,r15
  41da83:	sub    rax,r11
  41da86:	cmp    rax,0x3
  41da8a:	jg     41e020 <flatcc_json_parser_generic_json@@Base+0x6e0>
  41da90:	mov    QWORD PTR [rsp+0x20],0x0
  41da99:	mov    DWORD PTR [rsp+0x1c],0x0
  41daa1:	mov    rax,r15
  41daa4:	cmp    r15,r11
  41daa7:	je     41dad7 <flatcc_json_parser_generic_json@@Base+0x197>
  41daa9:	mov    rsi,r11
  41daac:	lea    rcx,[rsp+0x1c]
  41dab1:	lea    r8,[rsp+0x20]
  41dab6:	mov    rdx,r15
  41dab9:	mov    rdi,rbx
  41dabc:	mov    QWORD PTR [rsp+0x8],r11
  41dac1:	call   41d880 <flatcc_json_parser_integer@@Base>
  41dac6:	mov    r11,QWORD PTR [rsp+0x8]
  41dacb:	cmp    rax,r11
  41dace:	jne    41e23d <flatcc_json_parser_generic_json@@Base+0x8fd>
  41dad4:	mov    rax,r11
  41dad7:	cmp    rax,r11
  41dada:	jne    41dc20 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41dae0:	mov    ecx,0x5
  41dae5:	mov    rdx,r15
  41dae8:	mov    rsi,rax
  41daeb:	mov    rdi,rbx
  41daee:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41daf3:	jmp    41da53 <flatcc_json_parser_generic_json@@Base+0x113>
  41daf8:	nop    DWORD PTR [rax+rax*1+0x0]
  41db00:	cmp    r15,r11
  41db03:	je     41e1e8 <flatcc_json_parser_generic_json@@Base+0x8a8>
  41db09:	cmp    dl,0x2d
  41db0c:	je     41e193 <flatcc_json_parser_generic_json@@Base+0x853>
  41db12:	movzx  eax,BYTE PTR [r11]
  41db16:	cmp    al,0x30
  41db18:	je     41e1b7 <flatcc_json_parser_generic_json@@Base+0x877>
  41db1e:	sub    eax,0x31
  41db21:	cmp    al,0x8
  41db23:	ja     41e302 <flatcc_json_parser_generic_json@@Base+0x9c2>
  41db29:	lea    rax,[r11+0x1]
  41db2d:	cmp    r15,rax
  41db30:	je     41e130 <flatcc_json_parser_generic_json@@Base+0x7f0>
  41db36:	movzx  edx,BYTE PTR [r11+0x1]
  41db3b:	lea    ecx,[rdx-0x30]
  41db3e:	cmp    cl,0x9
  41db41:	ja     41db5f <flatcc_json_parser_generic_json@@Base+0x21f>
  41db43:	nop    DWORD PTR [rax+rax*1+0x0]
  41db48:	inc    rax
  41db4b:	cmp    r15,rax
  41db4e:	je     41e130 <flatcc_json_parser_generic_json@@Base+0x7f0>
  41db54:	movzx  edx,BYTE PTR [rax]
  41db57:	lea    ecx,[rdx-0x30]
  41db5a:	cmp    cl,0x9
  41db5d:	jbe    41db48 <flatcc_json_parser_generic_json@@Base+0x208>
  41db5f:	cmp    dl,0x2e
  41db62:	je     41e27b <flatcc_json_parser_generic_json@@Base+0x93b>
  41db68:	mov    ecx,edx
  41db6a:	and    ecx,0xffffffdf
  41db6d:	cmp    cl,0x45
  41db70:	jne    41e148 <flatcc_json_parser_generic_json@@Base+0x808>
  41db76:	lea    rsi,[rax+0x1]
  41db7a:	cmp    r15,rsi
  41db7d:	je     41e19f <flatcc_json_parser_generic_json@@Base+0x85f>
  41db83:	movzx  edx,BYTE PTR [rax+0x1]
  41db87:	lea    ecx,[rdx-0x2b]
  41db8a:	and    ecx,0xfd
  41db90:	jne    41db9f <flatcc_json_parser_generic_json@@Base+0x25f>
  41db92:	lea    rsi,[rax+0x2]
  41db96:	cmp    r15,rsi
  41db99:	je     41dbab <flatcc_json_parser_generic_json@@Base+0x26b>
  41db9b:	movzx  edx,BYTE PTR [rax+0x2]
  41db9f:	sub    edx,0x30
  41dba2:	cmp    dl,0x9
  41dba5:	jbe    41e31a <flatcc_json_parser_generic_json@@Base+0x9da>
  41dbab:	mov    ecx,0x6
  41dbb0:	mov    rdx,r15
  41dbb3:	mov    rdi,rbx
  41dbb6:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41dbbb:	jmp    41dc20 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41dbbd:	cmp    r11,r15
  41dbc0:	je     41e089 <flatcc_json_parser_generic_json@@Base+0x749>
  41dbc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41dbd0:	lea    rax,[r11+0x1]
  41dbd4:	cmp    r15,rax
  41dbd7:	jne    41dc12 <flatcc_json_parser_generic_json@@Base+0x2d2>
  41dbd9:	jmp    41e0fb <flatcc_json_parser_generic_json@@Base+0x7bb>
  41dbde:	xchg   ax,ax
  41dbe0:	mov    rdx,r15
  41dbe3:	mov    rsi,rax
  41dbe6:	mov    rdi,rbx
  41dbe9:	call   41cae0 <flatcc_json_parser_string_part@@Base>
  41dbee:	cmp    r15,rax
  41dbf1:	je     41dbf8 <flatcc_json_parser_generic_json@@Base+0x2b8>
  41dbf3:	cmp    BYTE PTR [rax],0x22
  41dbf6:	je     41dc17 <flatcc_json_parser_generic_json@@Base+0x2d7>
  41dbf8:	mov    rcx,r13
  41dbfb:	mov    rdx,r15
  41dbfe:	mov    rsi,rax
  41dc01:	mov    rdi,rbx
  41dc04:	call   41d200 <flatcc_json_parser_string_escape@@Base>
  41dc09:	cmp    r15,rax
  41dc0c:	je     41e0fb <flatcc_json_parser_generic_json@@Base+0x7bb>
  41dc12:	cmp    BYTE PTR [rax],0x22
  41dc15:	jne    41dbe0 <flatcc_json_parser_generic_json@@Base+0x2a0>
  41dc17:	inc    rax
  41dc1a:	nop    WORD PTR [rax+rax*1+0x0]
  41dc20:	cmp    r15,rax
  41dc23:	jne    41dc8c <flatcc_json_parser_generic_json@@Base+0x34c>
  41dc25:	jmp    41e3f3 <flatcc_json_parser_generic_json@@Base+0xab3>
  41dc2a:	nop    WORD PTR [rax+rax*1+0x0]
  41dc30:	cmp    rdx,0x1
  41dc34:	jle    41dc41 <flatcc_json_parser_generic_json@@Base+0x301>
  41dc36:	cmp    BYTE PTR [rax],0x20
  41dc39:	jg     41dc4f <flatcc_json_parser_generic_json@@Base+0x30f>
  41dc3b:	je     41dd20 <flatcc_json_parser_generic_json@@Base+0x3e0>
  41dc41:	mov    rdx,r15
  41dc44:	mov    rsi,rax
  41dc47:	mov    rdi,rbx
  41dc4a:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41dc4f:	cmp    r15,rax
  41dc52:	je     41dd40 <flatcc_json_parser_generic_json@@Base+0x400>
  41dc58:	movzx  edx,BYTE PTR [rax]
  41dc5b:	cmp    dl,0x2c
  41dc5e:	je     41dd70 <flatcc_json_parser_generic_json@@Base+0x430>
  41dc64:	cmp    dl,0x7d
  41dc67:	je     41dcf0 <flatcc_json_parser_generic_json@@Base+0x3b0>
  41dc6d:	mov    ecx,0xa
  41dc72:	mov    rdx,r15
  41dc75:	mov    rsi,rax
  41dc78:	mov    rdi,rbx
  41dc7b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41dc80:	cmp    r15,rax
  41dc83:	je     41dd40 <flatcc_json_parser_generic_json@@Base+0x400>
  41dc89:	mov    r14,rbp
  41dc8c:	cmp    r14,r12
  41dc8f:	je     41da53 <flatcc_json_parser_generic_json@@Base+0x113>
  41dc95:	mov    rdx,r15
  41dc98:	sub    rdx,rax
  41dc9b:	cmp    BYTE PTR [r14-0x1],0x5d
  41dca0:	lea    rbp,[r14-0x1]
  41dca4:	jne    41dc30 <flatcc_json_parser_generic_json@@Base+0x2f0>
  41dca6:	cmp    rdx,0x1
  41dcaa:	jle    41dcb7 <flatcc_json_parser_generic_json@@Base+0x377>
  41dcac:	cmp    BYTE PTR [rax],0x20
  41dcaf:	jg     41dcc5 <flatcc_json_parser_generic_json@@Base+0x385>
  41dcb1:	je     41ddf0 <flatcc_json_parser_generic_json@@Base+0x4b0>
  41dcb7:	mov    rdx,r15
  41dcba:	mov    rsi,rax
  41dcbd:	mov    rdi,rbx
  41dcc0:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41dcc5:	cmp    r15,rax
  41dcc8:	je     41dd40 <flatcc_json_parser_generic_json@@Base+0x400>
  41dcca:	movzx  edx,BYTE PTR [rax]
  41dccd:	cmp    dl,0x2c
  41dcd0:	je     41de08 <flatcc_json_parser_generic_json@@Base+0x4c8>
  41dcd6:	cmp    dl,0x5d
  41dcd9:	je     41dcf0 <flatcc_json_parser_generic_json@@Base+0x3b0>
  41dcdb:	mov    ecx,0x9
  41dce0:	mov    rdx,r15
  41dce3:	mov    rsi,rax
  41dce6:	mov    rdi,rbx
  41dce9:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41dcee:	jmp    41dc80 <flatcc_json_parser_generic_json@@Base+0x340>
  41dcf0:	lea    rsi,[rax+0x1]
  41dcf4:	mov    rdx,r15
  41dcf7:	sub    rdx,rsi
  41dcfa:	cmp    rdx,0x1
  41dcfe:	jle    41dd10 <flatcc_json_parser_generic_json@@Base+0x3d0>
  41dd00:	cmp    BYTE PTR [rax+0x1],0x20
  41dd04:	jg     41de78 <flatcc_json_parser_generic_json@@Base+0x538>
  41dd0a:	je     41e008 <flatcc_json_parser_generic_json@@Base+0x6c8>
  41dd10:	mov    rdx,r15
  41dd13:	mov    rdi,rbx
  41dd16:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41dd1b:	jmp    41dc80 <flatcc_json_parser_generic_json@@Base+0x340>
  41dd20:	cmp    BYTE PTR [rax+0x1],0x20
  41dd24:	jle    41dc41 <flatcc_json_parser_generic_json@@Base+0x301>
  41dd2a:	inc    rax
  41dd2d:	cmp    r15,rax
  41dd30:	jne    41dc58 <flatcc_json_parser_generic_json@@Base+0x318>
  41dd36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41dd40:	cmp    rbp,r12
  41dd43:	je     41da53 <flatcc_json_parser_generic_json@@Base+0x113>
  41dd49:	xor    ecx,ecx
  41dd4b:	cmp    BYTE PTR [rbp-0x1],0x5d
  41dd4f:	setne  cl
  41dd52:	add    ecx,0x9
  41dd55:	mov    rdx,r15
  41dd58:	mov    rsi,rax
  41dd5b:	mov    rdi,rbx
  41dd5e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41dd63:	jmp    41da53 <flatcc_json_parser_generic_json@@Base+0x113>
  41dd68:	nop    DWORD PTR [rax+rax*1+0x0]
  41dd70:	lea    r11,[rax+0x1]
  41dd74:	mov    rdx,r15
  41dd77:	sub    rdx,r11
  41dd7a:	cmp    rdx,0x1
  41dd7e:	jle    41dd8c <flatcc_json_parser_generic_json@@Base+0x44c>
  41dd80:	cmp    BYTE PTR [rax+0x1],0x20
  41dd84:	jg     41dd9d <flatcc_json_parser_generic_json@@Base+0x45d>
  41dd86:	je     41e0c8 <flatcc_json_parser_generic_json@@Base+0x788>
  41dd8c:	mov    rsi,r11
  41dd8f:	mov    rdx,r15
  41dd92:	mov    rdi,rbx
  41dd95:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41dd9a:	mov    r11,rax
  41dd9d:	cmp    r15,r11
  41dda0:	je     41e113 <flatcc_json_parser_generic_json@@Base+0x7d3>
  41dda6:	movzx  edx,BYTE PTR [r11]
  41ddaa:	cmp    dl,0x7d
  41ddad:	jne    41d98a <flatcc_json_parser_generic_json@@Base+0x4a>
  41ddb3:	lea    rax,[r11+0x1]
  41ddb7:	mov    rdx,r15
  41ddba:	sub    rdx,rax
  41ddbd:	cmp    rdx,0x1
  41ddc1:	jle    41ddd4 <flatcc_json_parser_generic_json@@Base+0x494>
  41ddc3:	cmp    BYTE PTR [r11+0x1],0x20
  41ddc8:	jg     41dc80 <flatcc_json_parser_generic_json@@Base+0x340>
  41ddce:	je     41e2ee <flatcc_json_parser_generic_json@@Base+0x9ae>
  41ddd4:	mov    rdx,r15
  41ddd7:	mov    rsi,rax
  41ddda:	mov    rdi,rbx
  41dddd:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41dde2:	jmp    41dc80 <flatcc_json_parser_generic_json@@Base+0x340>
  41dde7:	nop    WORD PTR [rax+rax*1+0x0]
  41ddf0:	cmp    BYTE PTR [rax+0x1],0x20
  41ddf4:	jle    41dcb7 <flatcc_json_parser_generic_json@@Base+0x377>
  41ddfa:	inc    rax
  41ddfd:	jmp    41dcc5 <flatcc_json_parser_generic_json@@Base+0x385>
  41de02:	nop    WORD PTR [rax+rax*1+0x0]
  41de08:	lea    r11,[rax+0x1]
  41de0c:	mov    rdx,r15
  41de0f:	sub    rdx,r11
  41de12:	cmp    rdx,0x1
  41de16:	jle    41de24 <flatcc_json_parser_generic_json@@Base+0x4e4>
  41de18:	cmp    BYTE PTR [rax+0x1],0x20
  41de1c:	jg     41de35 <flatcc_json_parser_generic_json@@Base+0x4f5>
  41de1e:	je     41e076 <flatcc_json_parser_generic_json@@Base+0x736>
  41de24:	mov    rsi,r11
  41de27:	mov    rdx,r15
  41de2a:	mov    rdi,rbx
  41de2d:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41de32:	mov    r11,rax
  41de35:	cmp    r15,r11
  41de38:	je     41e21c <flatcc_json_parser_generic_json@@Base+0x8dc>
  41de3e:	movzx  edx,BYTE PTR [r11]
  41de42:	cmp    dl,0x5d
  41de45:	je     41ddb3 <flatcc_json_parser_generic_json@@Base+0x473>
  41de4b:	cmp    r14,r12
  41de4e:	jne    41d993 <flatcc_json_parser_generic_json@@Base+0x53>
  41de54:	lea    eax,[rdx-0x22]
  41de57:	cmp    al,0x59
  41de59:	ja     41da40 <flatcc_json_parser_generic_json@@Base+0x100>
  41de5f:	lea    rcx,[rip+0x11e5e]        # 42fcc4 <flatcc_builder_padding_base@@Base+0xfa4>
  41de66:	movzx  eax,al
  41de69:	movsxd rax,DWORD PTR [rcx+rax*4]
  41de6d:	add    rax,rcx
  41de70:	notrack jmp rax
  41de73:	nop    DWORD PTR [rax+rax*1+0x0]
  41de78:	mov    rax,rsi
  41de7b:	jmp    41dc80 <flatcc_json_parser_generic_json@@Base+0x340>
  41de80:	lea    rax,[r12+0x200]
  41de88:	cmp    r14,rax
  41de8b:	je     41e204 <flatcc_json_parser_generic_json@@Base+0x8c4>
  41de91:	lea    rsi,[r11+0x1]
  41de95:	mov    rax,r15
  41de98:	sub    rax,rsi
  41de9b:	lea    rbp,[r14+0x1]
  41de9f:	mov    BYTE PTR [r14],0x5d
  41dea3:	cmp    rax,0x1
  41dea7:	jle    41deba <flatcc_json_parser_generic_json@@Base+0x57a>
  41dea9:	cmp    BYTE PTR [r11+0x1],0x20
  41deae:	jg     41e1d6 <flatcc_json_parser_generic_json@@Base+0x896>
  41deb4:	je     41e2da <flatcc_json_parser_generic_json@@Base+0x99a>
  41deba:	mov    rdx,r15
  41debd:	mov    rdi,rbx
  41dec0:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41dec5:	mov    r11,rax
  41dec8:	cmp    r15,r11
  41decb:	je     41e1e0 <flatcc_json_parser_generic_json@@Base+0x8a0>
  41ded1:	movzx  edx,BYTE PTR [r11]
  41ded5:	cmp    dl,0x5d
  41ded8:	je     41da1e <flatcc_json_parser_generic_json@@Base+0xde>
  41dede:	mov    r14,rbp
  41dee1:	jmp    41d98a <flatcc_json_parser_generic_json@@Base+0x4a>
  41dee6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41def0:	lea    rsi,[r11+0x1]
  41def4:	cmp    dl,0x22
  41def7:	jne    41e0e0 <flatcc_json_parser_generic_json@@Base+0x7a0>
  41defd:	cmp    r15,rsi
  41df00:	je     41df50 <flatcc_json_parser_generic_json@@Base+0x610>
  41df02:	movzx  edx,BYTE PTR [rsi]
  41df05:	cmp    dl,0x22
  41df08:	jne    41df26 <flatcc_json_parser_generic_json@@Base+0x5e6>
  41df0a:	jmp    41e0b8 <flatcc_json_parser_generic_json@@Base+0x778>
  41df0f:	nop
  41df10:	lea    rsi,[rax+0x1]
  41df14:	cmp    r15,rsi
  41df17:	je     41df50 <flatcc_json_parser_generic_json@@Base+0x610>
  41df19:	movzx  edx,BYTE PTR [rax+0x1]
  41df1d:	cmp    dl,0x22
  41df20:	je     41e0b8 <flatcc_json_parser_generic_json@@Base+0x778>
  41df26:	mov    rax,rsi
  41df29:	cmp    dl,0x5c
  41df2c:	jne    41df10 <flatcc_json_parser_generic_json@@Base+0x5d0>
  41df2e:	mov    rdx,r15
  41df31:	sub    rdx,rsi
  41df34:	cmp    rdx,0x1
  41df38:	jle    41e0a1 <flatcc_json_parser_generic_json@@Base+0x761>
  41df3e:	inc    rax
  41df41:	lea    rsi,[rax+0x1]
  41df45:	cmp    r15,rsi
  41df48:	jne    41df19 <flatcc_json_parser_generic_json@@Base+0x5d9>
  41df4a:	nop    WORD PTR [rax+rax*1+0x0]
  41df50:	mov    ecx,0x14
  41df55:	mov    rdx,r15
  41df58:	mov    rdi,rbx
  41df5b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41df60:	mov    rdx,r15
  41df63:	sub    rdx,rax
  41df66:	cmp    rdx,0x1
  41df6a:	jle    41df80 <flatcc_json_parser_generic_json@@Base+0x640>
  41df6c:	cmp    BYTE PTR [rax],0x20
  41df6f:	jg     41df8e <flatcc_json_parser_generic_json@@Base+0x64e>
  41df71:	jne    41df80 <flatcc_json_parser_generic_json@@Base+0x640>
  41df73:	cmp    BYTE PTR [rax+0x1],0x20
  41df77:	jg     41e1f3 <flatcc_json_parser_generic_json@@Base+0x8b3>
  41df7d:	nop    DWORD PTR [rax]
  41df80:	mov    rdx,r15
  41df83:	mov    rsi,rax
  41df86:	mov    rdi,rbx
  41df89:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41df8e:	cmp    r15,rax
  41df91:	je     41e3db <flatcc_json_parser_generic_json@@Base+0xa9b>
  41df97:	cmp    BYTE PTR [rax],0x3a
  41df9a:	jne    41e3c3 <flatcc_json_parser_generic_json@@Base+0xa83>
  41dfa0:	lea    r11,[rax+0x1]
  41dfa4:	mov    rdx,r15
  41dfa7:	sub    rdx,r11
  41dfaa:	cmp    rdx,0x1
  41dfae:	jle    41dfd0 <flatcc_json_parser_generic_json@@Base+0x690>
  41dfb0:	movzx  edx,BYTE PTR [rax+0x1]
  41dfb4:	cmp    dl,0x20
  41dfb7:	jg     41dfe4 <flatcc_json_parser_generic_json@@Base+0x6a4>
  41dfb9:	jne    41dfd0 <flatcc_json_parser_generic_json@@Base+0x690>
  41dfbb:	movzx  edx,BYTE PTR [rax+0x2]
  41dfbf:	cmp    dl,0x20
  41dfc2:	jg     41e1fb <flatcc_json_parser_generic_json@@Base+0x8bb>
  41dfc8:	nop    DWORD PTR [rax+rax*1+0x0]
  41dfd0:	mov    rdx,r15
  41dfd3:	mov    rsi,r11
  41dfd6:	mov    rdi,rbx
  41dfd9:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41dfde:	movzx  edx,BYTE PTR [rax]
  41dfe1:	mov    r11,rax
  41dfe4:	lea    eax,[rdx-0x22]
  41dfe7:	cmp    al,0x59
  41dfe9:	ja     41da40 <flatcc_json_parser_generic_json@@Base+0x100>
  41dfef:	lea    rcx,[rip+0x11e36]        # 42fe2c <flatcc_builder_padding_base@@Base+0x110c>
  41dff6:	movzx  eax,al
  41dff9:	movsxd rax,DWORD PTR [rcx+rax*4]
  41dffd:	add    rax,rcx
  41e000:	notrack jmp rax
  41e003:	nop    DWORD PTR [rax+rax*1+0x0]
  41e008:	cmp    BYTE PTR [rax+0x2],0x20
  41e00c:	jle    41dd10 <flatcc_json_parser_generic_json@@Base+0x3d0>
  41e012:	add    rax,0x2
  41e016:	jmp    41dc80 <flatcc_json_parser_generic_json@@Base+0x340>
  41e01b:	nop    DWORD PTR [rax+rax*1+0x0]
  41e020:	cmp    DWORD PTR [r11],0x65757274
  41e027:	je     41e234 <flatcc_json_parser_generic_json@@Base+0x8f4>
  41e02d:	cmp    rax,0x4
  41e031:	je     41da90 <flatcc_json_parser_generic_json@@Base+0x150>
  41e037:	cmp    DWORD PTR [r11],0x736c6166
  41e03e:	jne    41da90 <flatcc_json_parser_generic_json@@Base+0x150>
  41e044:	cmp    BYTE PTR [r11+0x4],0x65
  41e049:	lea    rax,[r11+0x5]
  41e04d:	jne    41da90 <flatcc_json_parser_generic_json@@Base+0x150>
  41e053:	jmp    41dad7 <flatcc_json_parser_generic_json@@Base+0x197>
  41e058:	nop    DWORD PTR [rax+rax*1+0x0]
  41e060:	cmp    DWORD PTR [r11],0x6c6c756e
  41e067:	jne    41da40 <flatcc_json_parser_generic_json@@Base+0x100>
  41e06d:	lea    rax,[r11+0x4]
  41e071:	jmp    41dc20 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41e076:	cmp    BYTE PTR [rax+0x2],0x20
  41e07a:	jle    41de24 <flatcc_json_parser_generic_json@@Base+0x4e4>
  41e080:	lea    r11,[rax+0x2]
  41e084:	jmp    41de35 <flatcc_json_parser_generic_json@@Base+0x4f5>
  41e089:	mov    ecx,0x10
  41e08e:	mov    rdx,r15
  41e091:	mov    rsi,r15
  41e094:	mov    rdi,rbx
  41e097:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41e09c:	jmp    41dbd4 <flatcc_json_parser_generic_json@@Base+0x294>
  41e0a1:	cmp    r15,rsi
  41e0a4:	je     41df50 <flatcc_json_parser_generic_json@@Base+0x610>
  41e0aa:	cmp    BYTE PTR [rsi],0x22
  41e0ad:	jne    41df50 <flatcc_json_parser_generic_json@@Base+0x610>
  41e0b3:	nop    DWORD PTR [rax+rax*1+0x0]
  41e0b8:	lea    rax,[rsi+0x1]
  41e0bc:	jmp    41df60 <flatcc_json_parser_generic_json@@Base+0x620>
  41e0c1:	nop    DWORD PTR [rax+0x0]
  41e0c8:	cmp    BYTE PTR [rax+0x2],0x20
  41e0cc:	jle    41dd8c <flatcc_json_parser_generic_json@@Base+0x44c>
  41e0d2:	lea    r11,[rax+0x2]
  41e0d6:	jmp    41dd9d <flatcc_json_parser_generic_json@@Base+0x45d>
  41e0db:	nop    DWORD PTR [rax+rax*1+0x0]
  41e0e0:	mov    rsi,r11
  41e0e3:	mov    ecx,0x5
  41e0e8:	mov    rdx,r15
  41e0eb:	mov    rdi,rbx
  41e0ee:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41e0f3:	mov    rsi,rax
  41e0f6:	jmp    41defd <flatcc_json_parser_generic_json@@Base+0x5bd>
  41e0fb:	mov    ecx,0x14
  41e100:	mov    rdx,r15
  41e103:	mov    rsi,rax
  41e106:	mov    rdi,rbx
  41e109:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41e10e:	jmp    41dc20 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41e113:	mov    ecx,0xa
  41e118:	mov    rdx,r15
  41e11b:	mov    rsi,r15
  41e11e:	mov    rdi,rbx
  41e121:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41e126:	jmp    41dc80 <flatcc_json_parser_generic_json@@Base+0x340>
  41e12b:	mov    rax,r15
  41e12e:	xchg   ax,ax
  41e130:	mov    ecx,0x6
  41e135:	mov    rdx,r15
  41e138:	mov    rsi,rax
  41e13b:	mov    rdi,rbx
  41e13e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41e143:	jmp    41dc20 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41e148:	cmp    dl,0x20
  41e14b:	je     41dc20 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41e151:	jle    41e17b <flatcc_json_parser_generic_json@@Base+0x83b>
  41e153:	cmp    dl,0x3a
  41e156:	je     41dc20 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41e15c:	jle    41e171 <flatcc_json_parser_generic_json@@Base+0x831>
  41e15e:	cmp    dl,0x5d
  41e161:	je     41dc20 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41e167:	cmp    dl,0x7d
  41e16a:	jne    41e130 <flatcc_json_parser_generic_json@@Base+0x7f0>
  41e16c:	jmp    41dc20 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41e171:	cmp    dl,0x2c
  41e174:	jne    41e130 <flatcc_json_parser_generic_json@@Base+0x7f0>
  41e176:	jmp    41dc20 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41e17b:	cmp    dl,0x9
  41e17e:	jl     41e130 <flatcc_json_parser_generic_json@@Base+0x7f0>
  41e180:	cmp    dl,0xb
  41e183:	jle    41dc20 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41e189:	cmp    dl,0xd
  41e18c:	jne    41e130 <flatcc_json_parser_generic_json@@Base+0x7f0>
  41e18e:	jmp    41dc20 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41e193:	inc    r11
  41e196:	cmp    r15,r11
  41e199:	jne    41db12 <flatcc_json_parser_generic_json@@Base+0x1d2>
  41e19f:	mov    ecx,0x6
  41e1a4:	mov    rdx,r15
  41e1a7:	mov    rsi,r15
  41e1aa:	mov    rdi,rbx
  41e1ad:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41e1b2:	jmp    41dc20 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41e1b7:	lea    rax,[r11+0x1]
  41e1bb:	cmp    r15,rax
  41e1be:	je     41e130 <flatcc_json_parser_generic_json@@Base+0x7f0>
  41e1c4:	movzx  edx,BYTE PTR [r11+0x1]
  41e1c9:	jmp    41db5f <flatcc_json_parser_generic_json@@Base+0x21f>
  41e1ce:	mov    r11,rsi
  41e1d1:	jmp    41da08 <flatcc_json_parser_generic_json@@Base+0xc8>
  41e1d6:	mov    r11,rsi
  41e1d9:	jmp    41dec8 <flatcc_json_parser_generic_json@@Base+0x588>
  41e1de:	xchg   ax,ax
  41e1e0:	mov    rax,r11
  41e1e3:	jmp    41da53 <flatcc_json_parser_generic_json@@Base+0x113>
  41e1e8:	mov    rbp,r14
  41e1eb:	mov    rax,r15
  41e1ee:	jmp    41dd40 <flatcc_json_parser_generic_json@@Base+0x400>
  41e1f3:	inc    rax
  41e1f6:	jmp    41df8e <flatcc_json_parser_generic_json@@Base+0x64e>
  41e1fb:	lea    r11,[rax+0x2]
  41e1ff:	jmp    41dfe4 <flatcc_json_parser_generic_json@@Base+0x6a4>
  41e204:	mov    ecx,0x2
  41e209:	mov    rdx,r15
  41e20c:	mov    rsi,r11
  41e20f:	mov    rdi,rbx
  41e212:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41e217:	jmp    41da53 <flatcc_json_parser_generic_json@@Base+0x113>
  41e21c:	mov    ecx,0x9
  41e221:	mov    rdx,r15
  41e224:	mov    rsi,r15
  41e227:	mov    rdi,rbx
  41e22a:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41e22f:	jmp    41dc80 <flatcc_json_parser_generic_json@@Base+0x340>
  41e234:	lea    rax,[r11+0x4]
  41e238:	jmp    41dad7 <flatcc_json_parser_generic_json@@Base+0x197>
  41e23d:	mov    edx,DWORD PTR [rsp+0x1c]
  41e241:	mov    ecx,0x8
  41e246:	test   edx,edx
  41e248:	jne    41e263 <flatcc_json_parser_generic_json@@Base+0x923>
  41e24a:	cmp    QWORD PTR [rsp+0x20],0xff
  41e253:	jbe    41dad7 <flatcc_json_parser_generic_json@@Base+0x197>
  41e259:	mov    QWORD PTR [rsp+0x8],r11
  41e25e:	mov    ecx,0x7
  41e263:	mov    rdx,r15
  41e266:	mov    rsi,rax
  41e269:	mov    rdi,rbx
  41e26c:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41e271:	mov    r11,QWORD PTR [rsp+0x8]
  41e276:	jmp    41dad7 <flatcc_json_parser_generic_json@@Base+0x197>
  41e27b:	movzx  ecx,BYTE PTR [rax+0x1]
  41e27f:	lea    edx,[rcx-0x30]
  41e282:	cmp    dl,0x9
  41e285:	ja     41e3aa <flatcc_json_parser_generic_json@@Base+0xa6a>
  41e28b:	lea    rcx,[rax+0x2]
  41e28f:	cmp    r15,rcx
  41e292:	je     41e12b <flatcc_json_parser_generic_json@@Base+0x7eb>
  41e298:	movzx  edx,BYTE PTR [rax+0x2]
  41e29c:	lea    eax,[rdx-0x30]
  41e29f:	cmp    al,0x9
  41e2a1:	ja     41e2be <flatcc_json_parser_generic_json@@Base+0x97e>
  41e2a3:	nop    DWORD PTR [rax+rax*1+0x0]
  41e2a8:	inc    rcx
  41e2ab:	cmp    r15,rcx
  41e2ae:	je     41e12b <flatcc_json_parser_generic_json@@Base+0x7eb>
  41e2b4:	movzx  edx,BYTE PTR [rcx]
  41e2b7:	lea    eax,[rdx-0x30]
  41e2ba:	cmp    al,0x9
  41e2bc:	jbe    41e2a8 <flatcc_json_parser_generic_json@@Base+0x968>
  41e2be:	mov    rax,rcx
  41e2c1:	jmp    41db68 <flatcc_json_parser_generic_json@@Base+0x228>
  41e2c6:	cmp    BYTE PTR [r11+0x2],0x20
  41e2cb:	jle    41d9fa <flatcc_json_parser_generic_json@@Base+0xba>
  41e2d1:	add    r11,0x2
  41e2d5:	jmp    41da08 <flatcc_json_parser_generic_json@@Base+0xc8>
  41e2da:	cmp    BYTE PTR [r11+0x2],0x20
  41e2df:	jle    41deba <flatcc_json_parser_generic_json@@Base+0x57a>
  41e2e5:	add    r11,0x2
  41e2e9:	jmp    41dec8 <flatcc_json_parser_generic_json@@Base+0x588>
  41e2ee:	cmp    BYTE PTR [r11+0x2],0x20
  41e2f3:	jle    41ddd4 <flatcc_json_parser_generic_json@@Base+0x494>
  41e2f9:	lea    rax,[r11+0x2]
  41e2fd:	jmp    41dc80 <flatcc_json_parser_generic_json@@Base+0x340>
  41e302:	mov    ecx,0x6
  41e307:	mov    rdx,r15
  41e30a:	mov    rsi,r11
  41e30d:	mov    rdi,rbx
  41e310:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41e315:	jmp    41dc20 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41e31a:	lea    rax,[rsi+0x1]
  41e31e:	cmp    r15,rax
  41e321:	je     41e130 <flatcc_json_parser_generic_json@@Base+0x7f0>
  41e327:	movzx  edx,BYTE PTR [rsi+0x1]
  41e32b:	lea    ecx,[rdx-0x30]
  41e32e:	cmp    cl,0x9
  41e331:	ja     41e34f <flatcc_json_parser_generic_json@@Base+0xa0f>
  41e333:	nop    DWORD PTR [rax+rax*1+0x0]
  41e338:	inc    rax
  41e33b:	cmp    r15,rax
  41e33e:	je     41e130 <flatcc_json_parser_generic_json@@Base+0x7f0>
  41e344:	movzx  edx,BYTE PTR [rax]
  41e347:	lea    ecx,[rdx-0x30]
  41e34a:	cmp    cl,0x9
  41e34d:	jbe    41e338 <flatcc_json_parser_generic_json@@Base+0x9f8>
  41e34f:	cmp    dl,0x20
  41e352:	je     41dc8c <flatcc_json_parser_generic_json@@Base+0x34c>
  41e358:	jle    41e37c <flatcc_json_parser_generic_json@@Base+0xa3c>
  41e35a:	cmp    dl,0x3a
  41e35d:	je     41dc8c <flatcc_json_parser_generic_json@@Base+0x34c>
  41e363:	jle    41e39c <flatcc_json_parser_generic_json@@Base+0xa5c>
  41e365:	cmp    dl,0x5d
  41e368:	je     41dc8c <flatcc_json_parser_generic_json@@Base+0x34c>
  41e36e:	cmp    dl,0x7d
  41e371:	jne    41e130 <flatcc_json_parser_generic_json@@Base+0x7f0>
  41e377:	jmp    41dc8c <flatcc_json_parser_generic_json@@Base+0x34c>
  41e37c:	cmp    dl,0x9
  41e37f:	jl     41e130 <flatcc_json_parser_generic_json@@Base+0x7f0>
  41e385:	cmp    dl,0xb
  41e388:	jle    41dc8c <flatcc_json_parser_generic_json@@Base+0x34c>
  41e38e:	cmp    dl,0xd
  41e391:	jne    41e130 <flatcc_json_parser_generic_json@@Base+0x7f0>
  41e397:	jmp    41dc8c <flatcc_json_parser_generic_json@@Base+0x34c>
  41e39c:	cmp    dl,0x2c
  41e39f:	jne    41e130 <flatcc_json_parser_generic_json@@Base+0x7f0>
  41e3a5:	jmp    41dc8c <flatcc_json_parser_generic_json@@Base+0x34c>
  41e3aa:	lea    rsi,[rax+0x1]
  41e3ae:	mov    ecx,0x6
  41e3b3:	mov    rdx,r15
  41e3b6:	mov    rdi,rbx
  41e3b9:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41e3be:	jmp    41dc20 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41e3c3:	mov    ecx,0x4
  41e3c8:	mov    rdx,r15
  41e3cb:	mov    rsi,rax
  41e3ce:	mov    rdi,rbx
  41e3d1:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41e3d6:	jmp    41da53 <flatcc_json_parser_generic_json@@Base+0x113>
  41e3db:	mov    ecx,0xa
  41e3e0:	mov    rdx,r15
  41e3e3:	mov    rsi,r15
  41e3e6:	mov    rdi,rbx
  41e3e9:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41e3ee:	jmp    41da53 <flatcc_json_parser_generic_json@@Base+0x113>
  41e3f3:	mov    rbp,r14
  41e3f6:	jmp    41dd40 <flatcc_json_parser_generic_json@@Base+0x400>
  41e3fb:	call   4061a0 <__stack_chk_fail@plt>

000000000041e400 <flatcc_json_parser_unmatched_symbol@@Base>:
  41e400:	endbr64 
  41e404:	push   rbp
  41e405:	mov    rbp,rdi
  41e408:	push   rbx
  41e409:	mov    rbx,rdx
  41e40c:	sub    rsp,0x8
  41e410:	test   BYTE PTR [rdi+0x10],0x1
  41e414:	je     41e4d0 <flatcc_json_parser_unmatched_symbol@@Base+0xd0>
  41e41a:	cmp    rsi,rdx
  41e41d:	je     41e470 <flatcc_json_parser_unmatched_symbol@@Base+0x70>
  41e41f:	movzx  edx,BYTE PTR [rsi]
  41e422:	cmp    dl,0x22
  41e425:	jne    41e446 <flatcc_json_parser_unmatched_symbol@@Base+0x46>
  41e427:	jmp    41e4e8 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
  41e42c:	nop    DWORD PTR [rax+0x0]
  41e430:	lea    rsi,[rax+0x1]
  41e434:	cmp    rbx,rsi
  41e437:	je     41e470 <flatcc_json_parser_unmatched_symbol@@Base+0x70>
  41e439:	movzx  edx,BYTE PTR [rax+0x1]
  41e43d:	cmp    dl,0x22
  41e440:	je     41e4e8 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
  41e446:	mov    rax,rsi
  41e449:	cmp    dl,0x5c
  41e44c:	jne    41e430 <flatcc_json_parser_unmatched_symbol@@Base+0x30>
  41e44e:	mov    rdx,rbx
  41e451:	sub    rdx,rsi
  41e454:	cmp    rdx,0x1
  41e458:	jle    41e4e0 <flatcc_json_parser_unmatched_symbol@@Base+0xe0>
  41e45e:	inc    rax
  41e461:	lea    rsi,[rax+0x1]
  41e465:	cmp    rbx,rsi
  41e468:	jne    41e439 <flatcc_json_parser_unmatched_symbol@@Base+0x39>
  41e46a:	nop    WORD PTR [rax+rax*1+0x0]
  41e470:	mov    ecx,0x14
  41e475:	mov    rdx,rbx
  41e478:	mov    rdi,rbp
  41e47b:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41e480:	mov    rsi,rax
  41e483:	mov    rax,rbx
  41e486:	sub    rax,rsi
  41e489:	cmp    rax,0x1
  41e48d:	jle    41e49a <flatcc_json_parser_unmatched_symbol@@Base+0x9a>
  41e48f:	cmp    BYTE PTR [rsi],0x20
  41e492:	jg     41e4a8 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
  41e494:	je     41e530 <flatcc_json_parser_unmatched_symbol@@Base+0x130>
  41e49a:	mov    rdx,rbx
  41e49d:	mov    rdi,rbp
  41e4a0:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41e4a5:	mov    rsi,rax
  41e4a8:	cmp    rbx,rsi
  41e4ab:	je     41e4b2 <flatcc_json_parser_unmatched_symbol@@Base+0xb2>
  41e4ad:	cmp    BYTE PTR [rsi],0x3a
  41e4b0:	je     41e4f0 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
  41e4b2:	mov    ecx,0x4
  41e4b7:	add    rsp,0x8
  41e4bb:	mov    rdx,rbx
  41e4be:	pop    rbx
  41e4bf:	mov    rdi,rbp
  41e4c2:	pop    rbp
  41e4c3:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  41e4c8:	nop    DWORD PTR [rax+rax*1+0x0]
  41e4d0:	mov    ecx,0xd
  41e4d5:	jmp    41e4b7 <flatcc_json_parser_unmatched_symbol@@Base+0xb7>
  41e4d7:	nop    WORD PTR [rax+rax*1+0x0]
  41e4e0:	cmp    BYTE PTR [rsi],0x22
  41e4e3:	jne    41e470 <flatcc_json_parser_unmatched_symbol@@Base+0x70>
  41e4e5:	nop    DWORD PTR [rax]
  41e4e8:	inc    rsi
  41e4eb:	jmp    41e483 <flatcc_json_parser_unmatched_symbol@@Base+0x83>
  41e4ed:	nop    DWORD PTR [rax]
  41e4f0:	lea    rax,[rsi+0x1]
  41e4f4:	mov    rdx,rbx
  41e4f7:	sub    rdx,rax
  41e4fa:	cmp    rdx,0x1
  41e4fe:	jle    41e508 <flatcc_json_parser_unmatched_symbol@@Base+0x108>
  41e500:	cmp    BYTE PTR [rsi+0x1],0x20
  41e504:	jg     41e516 <flatcc_json_parser_unmatched_symbol@@Base+0x116>
  41e506:	je     41e548 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
  41e508:	mov    rdx,rbx
  41e50b:	mov    rsi,rax
  41e50e:	mov    rdi,rbp
  41e511:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41e516:	add    rsp,0x8
  41e51a:	mov    rdx,rbx
  41e51d:	pop    rbx
  41e51e:	mov    rdi,rbp
  41e521:	mov    rsi,rax
  41e524:	pop    rbp
  41e525:	jmp    41d940 <flatcc_json_parser_generic_json@@Base>
  41e52a:	nop    WORD PTR [rax+rax*1+0x0]
  41e530:	cmp    BYTE PTR [rsi+0x1],0x20
  41e534:	jle    41e49a <flatcc_json_parser_unmatched_symbol@@Base+0x9a>
  41e53a:	inc    rsi
  41e53d:	jmp    41e4a8 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
  41e542:	nop    WORD PTR [rax+rax*1+0x0]
  41e548:	cmp    BYTE PTR [rsi+0x2],0x20
  41e54c:	jle    41e508 <flatcc_json_parser_unmatched_symbol@@Base+0x108>
  41e54e:	lea    rax,[rsi+0x2]
  41e552:	jmp    41e516 <flatcc_json_parser_unmatched_symbol@@Base+0x116>
  41e554:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41e55f:	nop

000000000041e560 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
  41e560:	endbr64 
  41e564:	push   r15
  41e566:	push   r14
  41e568:	mov    r14d,r8d
  41e56b:	push   r13
  41e56d:	mov    r13,rcx
  41e570:	push   r12
  41e572:	push   rbp
  41e573:	mov    rbp,rdi
  41e576:	push   rbx
  41e577:	mov    rbx,rdx
  41e57a:	sub    rsp,0x38
  41e57e:	mov    rax,QWORD PTR fs:0x28
  41e587:	mov    QWORD PTR [rsp+0x28],rax
  41e58c:	xor    eax,eax
  41e58e:	cmp    rsi,rdx
  41e591:	je     41e748 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e8>
  41e597:	cmp    BYTE PTR [rsi],0x22
  41e59a:	lea    r12,[rsi+0x1]
  41e59e:	jne    41e748 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e8>
  41e5a4:	mov    rdx,rbx
  41e5a7:	mov    rsi,r12
  41e5aa:	mov    rdi,rbp
  41e5ad:	call   41cae0 <flatcc_json_parser_string_part@@Base>
  41e5b2:	mov    r8,rax
  41e5b5:	cmp    rbx,rax
  41e5b8:	je     41e700 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a0>
  41e5be:	cmp    BYTE PTR [rax],0x22
  41e5c1:	jne    41e700 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a0>
  41e5c7:	mov    r15,rax
  41e5ca:	sub    r15,r12
  41e5cd:	mov    rax,r15
  41e5d0:	mov    rdx,r15
  41e5d3:	shr    rdx,0x2
  41e5d7:	and    eax,0x3
  41e5da:	mov    QWORD PTR [rsp+0x10],r15
  41e5df:	lea    r9,[rdx+rdx*2]
  41e5e3:	cmp    rax,0x2
  41e5e7:	je     41e788 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x228>
  41e5ed:	lea    rdx,[r9+0x2]
  41e5f1:	cmp    rax,0x3
  41e5f5:	cmove  r9,rdx
  41e5f9:	mov    rdi,QWORD PTR [rbp+0x0]
  41e5fd:	mov    ecx,0xffffffff
  41e602:	mov    edx,0x1
  41e607:	mov    esi,0x1
  41e60c:	mov    QWORD PTR [rsp],r8
  41e610:	mov    QWORD PTR [rsp+0x8],r9
  41e615:	call   4177b0 <flatcc_builder_start_vector@@Base>
  41e61a:	test   eax,eax
  41e61c:	mov    r8,QWORD PTR [rsp]
  41e620:	jne    41e760 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  41e626:	mov    r9,QWORD PTR [rsp+0x8]
  41e62b:	mov    rdi,QWORD PTR [rbp+0x0]
  41e62f:	mov    rsi,r9
  41e632:	call   417100 <flatcc_builder_extend_vector@@Base>
  41e637:	test   rax,rax
  41e63a:	mov    r8,QWORD PTR [rsp]
  41e63e:	je     41e760 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  41e644:	mov    r9,QWORD PTR [rsp+0x8]
  41e649:	test   r14d,r14d
  41e64c:	lea    rcx,[rip+0x119ad]        # 430000 <flatcc_builder_padding_base@@Base+0x12e0>
  41e653:	lea    rdx,[rip+0x11aa6]        # 430100 <flatcc_builder_padding_base@@Base+0x13e0>
  41e65a:	cmovne rdx,rcx
  41e65e:	mov    rsi,0xffffffffffffffff
  41e665:	test   r9,r9
  41e668:	cmovne rsi,r9
  41e66c:	mov    QWORD PTR [rsp],r15
  41e670:	mov    QWORD PTR [rsp+0x8],rax
  41e675:	mov    rcx,r12
  41e678:	lea    r11,[rax+rsi*1]
  41e67c:	mov    rdi,r11
  41e67f:	sub    rdi,QWORD PTR [rsp+0x8]
  41e684:	cmp    QWORD PTR [rsp],0x0
  41e689:	mov    QWORD PTR [rsp+0x18],rdi
  41e68e:	je     41ea04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4a4>
  41e694:	mov    r10,QWORD PTR [rsp]
  41e698:	xor    esi,esi
  41e69a:	movzx  edi,BYTE PTR [rcx+rsi*1]
  41e69e:	movzx  edi,BYTE PTR [rdx+rdi*1]
  41e6a2:	mov    BYTE PTR [rsp+rsi*1+0x24],dil
  41e6a7:	cmp    dil,0x3f
  41e6ab:	jbe    41e790 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
  41e6b1:	cmp    dil,0x41
  41e6b5:	je     41e7b0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
  41e6bb:	mov    r11,rsi
  41e6be:	cmp    dil,0x42
  41e6c2:	je     41e7c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x260>
  41e6c8:	mov    rdx,r10
  41e6cb:	sub    rdx,r11
  41e6ce:	cmp    rsi,0x2
  41e6d2:	je     41e8f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
  41e6d8:	cmp    rsi,0x3
  41e6dc:	je     41e800 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a0>
  41e6e2:	mov    rcx,r15
  41e6e5:	sub    rcx,QWORD PTR [rsp]
  41e6e9:	test   rsi,rsi
  41e6ec:	je     41e930 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3d0>
  41e6f2:	lea    r8,[r12+rcx*1]
  41e6f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41e700:	mov    DWORD PTR [r13+0x0],0x0
  41e708:	xor    ecx,ecx
  41e70a:	test   r14d,r14d
  41e70d:	setne  cl
  41e710:	add    ecx,0x1f
  41e713:	mov    rax,QWORD PTR [rsp+0x28]
  41e718:	xor    rax,QWORD PTR fs:0x28
  41e721:	jne    41ea0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  41e727:	add    rsp,0x38
  41e72b:	mov    rdx,rbx
  41e72e:	pop    rbx
  41e72f:	mov    rdi,rbp
  41e732:	pop    rbp
  41e733:	pop    r12
  41e735:	pop    r13
  41e737:	pop    r14
  41e739:	mov    rsi,r8
  41e73c:	pop    r15
  41e73e:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  41e743:	nop    DWORD PTR [rax+rax*1+0x0]
  41e748:	mov    ecx,0x10
  41e74d:	mov    rdx,rbx
  41e750:	mov    rdi,rbp
  41e753:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41e758:	mov    r12,rax
  41e75b:	jmp    41e5a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
  41e760:	mov    DWORD PTR [r13+0x0],0x0
  41e768:	mov    rax,QWORD PTR [rsp+0x28]
  41e76d:	xor    rax,QWORD PTR fs:0x28
  41e776:	jne    41ea0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  41e77c:	mov    ecx,0x21
  41e781:	jmp    41e727 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c7>
  41e783:	nop    DWORD PTR [rax+rax*1+0x0]
  41e788:	inc    r9
  41e78b:	jmp    41e5f9 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x99>
  41e790:	inc    rsi
  41e793:	cmp    rsi,0x3
  41e797:	ja     41e977 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x417>
  41e79d:	cmp    r10,rsi
  41e7a0:	jne    41e69a <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13a>
  41e7a6:	xor    edx,edx
  41e7a8:	jmp    41e6ce <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16e>
  41e7ad:	nop    DWORD PTR [rax]
  41e7b0:	inc    rcx
  41e7b3:	dec    r10
  41e7b6:	jmp    41e793 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x233>
  41e7b8:	nop    DWORD PTR [rax+rax*1+0x0]
  41e7c0:	lea    r11,[rsi+0x1]
  41e7c4:	cmp    r11,r10
  41e7c7:	jb     41e7dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x27c>
  41e7c9:	jmp    41e6c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  41e7ce:	xchg   ax,ax
  41e7d0:	inc    r11
  41e7d3:	cmp    r11,r10
  41e7d6:	jae    41e6c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  41e7dc:	cmp    r11,0x7
  41e7e0:	ja     41e6c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  41e7e6:	movzx  edi,BYTE PTR [rcx+r11*1]
  41e7eb:	movzx  edi,BYTE PTR [rdx+rdi*1]
  41e7ef:	sub    edi,0x41
  41e7f2:	cmp    dil,0x1
  41e7f6:	jbe    41e7d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x270>
  41e7f8:	jmp    41e6c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  41e7fd:	nop    DWORD PTR [rax]
  41e800:	movzx  ecx,BYTE PTR [rsp+0x26]
  41e805:	mov    esi,ecx
  41e807:	shl    esi,0x6
  41e80a:	and    esi,0xc0
  41e810:	jne    41e920 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  41e816:	cmp    QWORD PTR [rsp+0x18],0x1
  41e81c:	je     41e920 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  41e822:	movzx  esi,BYTE PTR [rsp+0x25]
  41e827:	movzx  edi,BYTE PTR [rsp+0x24]
  41e82c:	mov    r10,QWORD PTR [rsp+0x8]
  41e831:	lea    r11d,[rdi*4+0x0]
  41e839:	mov    edi,esi
  41e83b:	shr    dil,0x4
  41e83f:	or     edi,r11d
  41e842:	shl    esi,0x4
  41e845:	shr    cl,0x2
  41e848:	mov    BYTE PTR [r10],dil
  41e84b:	or     ecx,esi
  41e84d:	mov    BYTE PTR [r10+0x1],cl
  41e851:	lea    rcx,[r10+0x2]
  41e855:	sub    rcx,rax
  41e858:	mov    rax,rcx
  41e85b:	mov    rcx,r15
  41e85e:	sub    rcx,rdx
  41e861:	mov    QWORD PTR [rsp+0x10],rcx
  41e866:	mov    rdx,rcx
  41e869:	cmp    r15,rdx
  41e86c:	je     41e880 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
  41e86e:	mov    r8,QWORD PTR [rsp+0x10]
  41e873:	add    r8,r12
  41e876:	jmp    41e700 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a0>
  41e87b:	nop    DWORD PTR [rax+rax*1+0x0]
  41e880:	mov    rdi,QWORD PTR [rbp+0x0]
  41e884:	cmp    r9,rax
  41e887:	jbe    41e8a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
  41e889:	mov    rsi,r9
  41e88c:	sub    rsi,rax
  41e88f:	mov    QWORD PTR [rsp],r8
  41e893:	call   417610 <flatcc_builder_truncate_vector@@Base>
  41e898:	test   eax,eax
  41e89a:	mov    r8,QWORD PTR [rsp]
  41e89e:	jne    41e760 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  41e8a4:	mov    rdi,QWORD PTR [rbp+0x0]
  41e8a8:	mov    QWORD PTR [rsp],r8
  41e8ac:	call   418670 <flatcc_builder_end_vector@@Base>
  41e8b1:	test   eax,eax
  41e8b3:	mov    DWORD PTR [r13+0x0],eax
  41e8b7:	mov    r8,QWORD PTR [rsp]
  41e8bb:	je     41e760 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  41e8c1:	cmp    BYTE PTR [r8],0x22
  41e8c5:	je     41e950 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f0>
  41e8cb:	mov    rax,QWORD PTR [rsp+0x28]
  41e8d0:	xor    rax,QWORD PTR fs:0x28
  41e8d9:	jne    41ea0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  41e8df:	mov    ecx,0x14
  41e8e4:	jmp    41e727 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c7>
  41e8e9:	nop    DWORD PTR [rax+0x0]
  41e8f0:	movzx  ecx,BYTE PTR [rsp+0x25]
  41e8f5:	mov    esi,ecx
  41e8f7:	shl    esi,0x4
  41e8fa:	and    esi,0xf0
  41e900:	jne    41e920 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  41e902:	movzx  esi,BYTE PTR [rsp+0x24]
  41e907:	mov    rdi,QWORD PTR [rsp+0x8]
  41e90c:	shl    esi,0x2
  41e90f:	shr    cl,0x4
  41e912:	or     ecx,esi
  41e914:	mov    BYTE PTR [rdi],cl
  41e916:	lea    rcx,[rdi+0x1]
  41e91a:	jmp    41e855 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f5>
  41e91f:	nop
  41e920:	mov    rcx,r15
  41e923:	sub    rcx,QWORD PTR [rsp]
  41e927:	jmp    41e6f2 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x192>
  41e92c:	nop    DWORD PTR [rax+0x0]
  41e930:	mov    rcx,r15
  41e933:	sub    rcx,rdx
  41e936:	mov    QWORD PTR [rsp+0x10],rcx
  41e93b:	mov    rdx,rcx
  41e93e:	mov    rcx,QWORD PTR [rsp+0x8]
  41e943:	sub    rcx,rax
  41e946:	mov    rax,rcx
  41e949:	jmp    41e869 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x309>
  41e94e:	xchg   ax,ax
  41e950:	mov    rbx,QWORD PTR [rsp+0x28]
  41e955:	xor    rbx,QWORD PTR fs:0x28
  41e95e:	lea    rax,[r8+0x1]
  41e962:	jne    41ea0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  41e968:	add    rsp,0x38
  41e96c:	pop    rbx
  41e96d:	pop    rbp
  41e96e:	pop    r12
  41e970:	pop    r13
  41e972:	pop    r14
  41e974:	pop    r15
  41e976:	ret    
  41e977:	cmp    QWORD PTR [rsp+0x18],0x2
  41e97d:	jbe    41e920 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  41e97f:	movzx  edi,BYTE PTR [rsp+0x24]
  41e984:	movzx  esi,BYTE PTR [rsp+0x25]
  41e989:	shl    edi,0x2
  41e98c:	shr    sil,0x4
  41e990:	or     esi,edi
  41e992:	mov    rdi,QWORD PTR [rsp+0x8]
  41e997:	add    rcx,0x4
  41e99b:	mov    BYTE PTR [rdi],sil
  41e99e:	movzx  esi,BYTE PTR [rsp+0x25]
  41e9a3:	movzx  edi,BYTE PTR [rsp+0x26]
  41e9a8:	shl    esi,0x4
  41e9ab:	shr    dil,0x2
  41e9af:	or     esi,edi
  41e9b1:	mov    rdi,QWORD PTR [rsp+0x8]
  41e9b6:	mov    BYTE PTR [rdi+0x1],sil
  41e9ba:	movzx  esi,BYTE PTR [rsp+0x26]
  41e9bf:	add    rdi,0x3
  41e9c3:	shl    esi,0x6
  41e9c6:	or     sil,BYTE PTR [rsp+0x27]
  41e9cb:	mov    BYTE PTR [rdi-0x1],sil
  41e9cf:	lea    rsi,[r10-0x4]
  41e9d3:	mov    QWORD PTR [rsp+0x8],rdi
  41e9d8:	mov    QWORD PTR [rsp],rsi
  41e9dc:	cmp    rdi,r11
  41e9df:	jne    41e67c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
  41e9e5:	mov    rcx,QWORD PTR [rsp+0x8]
  41e9ea:	sub    rcx,rax
  41e9ed:	mov    rax,rcx
  41e9f0:	mov    rcx,r15
  41e9f3:	sub    rcx,QWORD PTR [rsp]
  41e9f7:	mov    QWORD PTR [rsp+0x10],rcx
  41e9fc:	mov    rdx,rcx
  41e9ff:	jmp    41e869 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x309>
  41ea04:	mov    rdx,r15
  41ea07:	jmp    41e93e <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3de>
  41ea0c:	call   4061a0 <__stack_chk_fail@plt>
  41ea11:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41ea1c:	nop    DWORD PTR [rax+0x0]

000000000041ea20 <flatcc_json_parser_build_string@@Base>:
  41ea20:	endbr64 
  41ea24:	push   r15
  41ea26:	mov    r15,rcx
  41ea29:	push   r14
  41ea2b:	push   r13
  41ea2d:	push   r12
  41ea2f:	push   rbp
  41ea30:	mov    rbp,rdx
  41ea33:	push   rbx
  41ea34:	mov    rbx,rdi
  41ea37:	sub    rsp,0x28
  41ea3b:	mov    rax,QWORD PTR fs:0x28
  41ea44:	mov    QWORD PTR [rsp+0x18],rax
  41ea49:	xor    eax,eax
  41ea4b:	cmp    rsi,rdx
  41ea4e:	je     41eab8 <flatcc_json_parser_build_string@@Base+0x98>
  41ea50:	cmp    BYTE PTR [rsi],0x22
  41ea53:	lea    r12,[rsi+0x1]
  41ea57:	jne    41eab8 <flatcc_json_parser_build_string@@Base+0x98>
  41ea59:	mov    rdi,rbx
  41ea5c:	mov    rdx,rbp
  41ea5f:	mov    rsi,r12
  41ea62:	call   41cae0 <flatcc_json_parser_string_part@@Base>
  41ea67:	mov    r14,rax
  41ea6a:	mov    rdi,QWORD PTR [rbx]
  41ea6d:	cmp    rbp,rax
  41ea70:	je     41ea7b <flatcc_json_parser_build_string@@Base+0x5b>
  41ea72:	cmp    BYTE PTR [rax],0x22
  41ea75:	je     41eba0 <flatcc_json_parser_build_string@@Base+0x180>
  41ea7b:	call   417890 <flatcc_builder_start_string@@Base>
  41ea80:	test   eax,eax
  41ea82:	je     41ead0 <flatcc_json_parser_build_string@@Base+0xb0>
  41ea84:	mov    DWORD PTR [r15],0x0
  41ea8b:	mov    rcx,QWORD PTR [rsp+0x18]
  41ea90:	xor    rcx,QWORD PTR fs:0x28
  41ea99:	mov    rax,r14
  41ea9c:	jne    41ebd8 <flatcc_json_parser_build_string@@Base+0x1b8>
  41eaa2:	add    rsp,0x28
  41eaa6:	pop    rbx
  41eaa7:	pop    rbp
  41eaa8:	pop    r12
  41eaaa:	pop    r13
  41eaac:	pop    r14
  41eaae:	pop    r15
  41eab0:	ret    
  41eab1:	nop    DWORD PTR [rax+0x0]
  41eab8:	mov    ecx,0x10
  41eabd:	mov    rdx,rbp
  41eac0:	mov    rdi,rbx
  41eac3:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41eac8:	mov    r12,rax
  41eacb:	jmp    41ea59 <flatcc_json_parser_build_string@@Base+0x39>
  41eacd:	nop    DWORD PTR [rax]
  41ead0:	mov    rdx,r14
  41ead3:	mov    rdi,QWORD PTR [rbx]
  41ead6:	sub    rdx,r12
  41ead9:	mov    rsi,r12
  41eadc:	call   417500 <flatcc_builder_append_string@@Base>
  41eae1:	test   rax,rax
  41eae4:	je     41ea84 <flatcc_json_parser_build_string@@Base+0x64>
  41eae6:	cmp    rbp,r14
  41eae9:	je     41eb76 <flatcc_json_parser_build_string@@Base+0x156>
  41eaef:	cmp    BYTE PTR [r14],0x22
  41eaf3:	je     41ebc0 <flatcc_json_parser_build_string@@Base+0x1a0>
  41eaf9:	lea    r13,[rsp+0x14]
  41eafe:	lea    rax,[r13+0x1]
  41eb02:	mov    QWORD PTR [rsp+0x8],rax
  41eb07:	jmp    41eb34 <flatcc_json_parser_build_string@@Base+0x114>
  41eb09:	nop    DWORD PTR [rax+0x0]
  41eb10:	mov    rdx,rax
  41eb13:	mov    rdi,QWORD PTR [rbx]
  41eb16:	sub    rdx,r12
  41eb19:	mov    rsi,r12
  41eb1c:	call   417500 <flatcc_builder_append_string@@Base>
  41eb21:	test   rax,rax
  41eb24:	je     41ea84 <flatcc_json_parser_build_string@@Base+0x64>
  41eb2a:	cmp    BYTE PTR [r14],0x22
  41eb2e:	je     41ebc0 <flatcc_json_parser_build_string@@Base+0x1a0>
  41eb34:	mov    rdx,rbp
  41eb37:	mov    rsi,r14
  41eb3a:	mov    rdi,rbx
  41eb3d:	mov    rcx,r13
  41eb40:	call   41d200 <flatcc_json_parser_string_escape@@Base>
  41eb45:	movsx  rdx,BYTE PTR [rsp+0x14]
  41eb4b:	mov    rsi,QWORD PTR [rsp+0x8]
  41eb50:	mov    rdi,QWORD PTR [rbx]
  41eb53:	mov    r12,rax
  41eb56:	call   417500 <flatcc_builder_append_string@@Base>
  41eb5b:	test   rax,rax
  41eb5e:	je     41ebd0 <flatcc_json_parser_build_string@@Base+0x1b0>
  41eb60:	mov    rdx,rbp
  41eb63:	mov    rsi,r12
  41eb66:	mov    rdi,rbx
  41eb69:	call   41cae0 <flatcc_json_parser_string_part@@Base>
  41eb6e:	mov    r14,rax
  41eb71:	cmp    rbp,rax
  41eb74:	jne    41eb10 <flatcc_json_parser_build_string@@Base+0xf0>
  41eb76:	mov    rdi,QWORD PTR [rbx]
  41eb79:	mov    r14,rbp
  41eb7c:	call   419130 <flatcc_builder_end_string@@Base>
  41eb81:	mov    DWORD PTR [r15],eax
  41eb84:	mov    rsi,r14
  41eb87:	mov    ecx,0x14
  41eb8c:	mov    rdx,rbp
  41eb8f:	mov    rdi,rbx
  41eb92:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41eb97:	mov    r14,rax
  41eb9a:	jmp    41ea8b <flatcc_json_parser_build_string@@Base+0x6b>
  41eb9f:	nop
  41eba0:	mov    rdx,rax
  41eba3:	sub    rdx,r12
  41eba6:	mov    rsi,r12
  41eba9:	call   418fa0 <flatcc_builder_create_string@@Base>
  41ebae:	mov    DWORD PTR [r15],eax
  41ebb1:	cmp    BYTE PTR [r14],0x22
  41ebb5:	jne    41eb84 <flatcc_json_parser_build_string@@Base+0x164>
  41ebb7:	inc    r14
  41ebba:	jmp    41ea8b <flatcc_json_parser_build_string@@Base+0x6b>
  41ebbf:	nop
  41ebc0:	mov    rdi,QWORD PTR [rbx]
  41ebc3:	call   419130 <flatcc_builder_end_string@@Base>
  41ebc8:	mov    DWORD PTR [r15],eax
  41ebcb:	jmp    41ebb1 <flatcc_json_parser_build_string@@Base+0x191>
  41ebcd:	nop    DWORD PTR [rax]
  41ebd0:	mov    r14,r12
  41ebd3:	jmp    41ea84 <flatcc_json_parser_build_string@@Base+0x64>
  41ebd8:	call   4061a0 <__stack_chk_fail@plt>
  41ebdd:	nop    DWORD PTR [rax]

000000000041ebe0 <flatcc_json_parser_prepare_unions@@Base>:
  41ebe0:	endbr64 
  41ebe4:	push   r14
  41ebe6:	lea    rax,[rcx+rcx*4]
  41ebea:	mov    r14,rdx
  41ebed:	push   r13
  41ebef:	mov    r13,r8
  41ebf2:	push   r12
  41ebf4:	mov    r12,rsi
  41ebf7:	lea    rsi,[rax*8+0x10]
  41ebff:	push   rbp
  41ec00:	mov    rbp,rdi
  41ec03:	push   rbx
  41ec04:	mov    rbx,rcx
  41ec07:	mov    rdi,QWORD PTR [rdi]
  41ec0a:	call   416660 <flatcc_builder_enter_user_frame@@Base>
  41ec0f:	mov    QWORD PTR [r13+0x0],rax
  41ec13:	test   rax,rax
  41ec16:	je     41ec38 <flatcc_json_parser_prepare_unions@@Base+0x58>
  41ec18:	mov    rdi,QWORD PTR [rbp+0x0]
  41ec1c:	mov    rsi,rax
  41ec1f:	call   416790 <flatcc_builder_get_user_frame_ptr@@Base>
  41ec24:	mov    QWORD PTR [rax],rbx
  41ec27:	mov    rax,r12
  41ec2a:	pop    rbx
  41ec2b:	pop    rbp
  41ec2c:	pop    r12
  41ec2e:	pop    r13
  41ec30:	pop    r14
  41ec32:	ret    
  41ec33:	nop    DWORD PTR [rax+rax*1+0x0]
  41ec38:	pop    rbx
  41ec39:	mov    rdi,rbp
  41ec3c:	pop    rbp
  41ec3d:	mov    rsi,r12
  41ec40:	pop    r12
  41ec42:	pop    r13
  41ec44:	mov    rdx,r14
  41ec47:	mov    ecx,0x21
  41ec4c:	pop    r14
  41ec4e:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  41ec53:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41ec5e:	xchg   ax,ax

000000000041ec60 <flatcc_json_parser_finalize_unions@@Base>:
  41ec60:	endbr64 
  41ec64:	push   r13
  41ec66:	mov    r13,rdx
  41ec69:	push   r12
  41ec6b:	mov    r12,rsi
  41ec6e:	mov    rsi,rcx
  41ec71:	push   rbp
  41ec72:	mov    rbp,rcx
  41ec75:	push   rbx
  41ec76:	mov    rbx,rdi
  41ec79:	sub    rsp,0x8
  41ec7d:	mov    rdi,QWORD PTR [rdi]
  41ec80:	call   416790 <flatcc_builder_get_user_frame_ptr@@Base>
  41ec85:	cmp    QWORD PTR [rax+0x8],0x0
  41ec8a:	jne    41eca8 <flatcc_json_parser_finalize_unions@@Base+0x48>
  41ec8c:	mov    rdi,QWORD PTR [rbx]
  41ec8f:	mov    rsi,rbp
  41ec92:	call   416740 <flatcc_builder_exit_user_frame_at@@Base>
  41ec97:	add    rsp,0x8
  41ec9b:	pop    rbx
  41ec9c:	pop    rbp
  41ec9d:	mov    rax,r12
  41eca0:	pop    r12
  41eca2:	pop    r13
  41eca4:	ret    
  41eca5:	nop    DWORD PTR [rax]
  41eca8:	mov    rsi,r12
  41ecab:	mov    ecx,0x1b
  41ecb0:	mov    rdx,r13
  41ecb3:	mov    rdi,rbx
  41ecb6:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41ecbb:	mov    r12,rax
  41ecbe:	jmp    41ec8c <flatcc_json_parser_finalize_unions@@Base+0x2c>

000000000041ecc0 <flatcc_json_parser_union@@Base>:
  41ecc0:	endbr64 
  41ecc4:	push   r15
  41ecc6:	mov    r15,rcx
  41ecc9:	push   r14
  41eccb:	mov    r14d,r8d
  41ecce:	push   r13
  41ecd0:	push   r12
  41ecd2:	mov    r12,rsi
  41ecd5:	mov    rsi,r9
  41ecd8:	push   rbp
  41ecd9:	mov    rbp,rdx
  41ecdc:	push   rbx
  41ecdd:	mov    rbx,rdi
  41ece0:	sub    rsp,0x18
  41ece4:	mov    rdi,QWORD PTR [rdi]
  41ece7:	mov    rax,QWORD PTR fs:0x28
  41ecf0:	mov    QWORD PTR [rsp+0x8],rax
  41ecf5:	xor    eax,eax
  41ecf7:	mov    r13,QWORD PTR [rsp+0x50]
  41ecfc:	call   416790 <flatcc_builder_get_user_frame_ptr@@Base>
  41ed01:	lea    rdx,[r15+r15*4]
  41ed05:	lea    rdx,[rax+rdx*8]
  41ed09:	cmp    QWORD PTR [rdx+0x10],0x0
  41ed0e:	jne    41ed60 <flatcc_json_parser_union@@Base+0xa0>
  41ed10:	cmp    BYTE PTR [rdx+0x24],0x0
  41ed14:	je     41ed80 <flatcc_json_parser_union@@Base+0xc0>
  41ed16:	movzx  ecx,BYTE PTR [rdx+0x25]
  41ed1a:	mov    BYTE PTR [rsp],cl
  41ed1d:	test   cl,cl
  41ed1f:	je     41edd0 <flatcc_json_parser_union@@Base+0x110>
  41ed25:	dec    QWORD PTR [rax+0x8]
  41ed29:	mov    rsi,r12
  41ed2c:	lea    r8,[rsp+0x4]
  41ed31:	mov    rdx,rbp
  41ed34:	mov    rdi,rbx
  41ed37:	call   r13
  41ed3a:	mov    r12,rax
  41ed3d:	cmp    rbp,rax
  41ed40:	je     41eda7 <flatcc_json_parser_union@@Base+0xe7>
  41ed42:	mov    rdx,QWORD PTR [rsp]
  41ed46:	mov    rdi,QWORD PTR [rbx]
  41ed49:	movzx  esi,r14w
  41ed4d:	call   419560 <flatcc_builder_table_add_union@@Base>
  41ed52:	test   eax,eax
  41ed54:	je     41eda7 <flatcc_json_parser_union@@Base+0xe7>
  41ed56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41ed60:	mov    ecx,0x1c
  41ed65:	mov    rsi,r12
  41ed68:	mov    rdx,rbp
  41ed6b:	mov    rdi,rbx
  41ed6e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41ed73:	mov    r12,rax
  41ed76:	jmp    41eda7 <flatcc_json_parser_union@@Base+0xe7>
  41ed78:	nop    DWORD PTR [rax+rax*1+0x0]
  41ed80:	inc    QWORD PTR [rax+0x8]
  41ed84:	mov    eax,DWORD PTR [rbx+0x14]
  41ed87:	mov    rsi,r12
  41ed8a:	mov    DWORD PTR [rdx+0x20],eax
  41ed8d:	mov    rax,QWORD PTR [rbx+0x8]
  41ed91:	mov    QWORD PTR [rdx+0x10],r12
  41ed95:	mov    QWORD PTR [rdx+0x18],rax
  41ed99:	mov    rdi,rbx
  41ed9c:	mov    rdx,rbp
  41ed9f:	call   41d940 <flatcc_json_parser_generic_json@@Base>
  41eda4:	mov    r12,rax
  41eda7:	mov    rsi,QWORD PTR [rsp+0x8]
  41edac:	xor    rsi,QWORD PTR fs:0x28
  41edb5:	mov    rax,r12
  41edb8:	jne    41edd7 <flatcc_json_parser_union@@Base+0x117>
  41edba:	add    rsp,0x18
  41edbe:	pop    rbx
  41edbf:	pop    rbp
  41edc0:	pop    r12
  41edc2:	pop    r13
  41edc4:	pop    r14
  41edc6:	pop    r15
  41edc8:	ret    
  41edc9:	nop    DWORD PTR [rax+0x0]
  41edd0:	mov    ecx,0x19
  41edd5:	jmp    41ed65 <flatcc_json_parser_union@@Base+0xa5>
  41edd7:	call   4061a0 <__stack_chk_fail@plt>
  41eddc:	nop    DWORD PTR [rax+0x0]

000000000041ede0 <flatcc_json_parser_union_type@@Base>:
  41ede0:	endbr64 
  41ede4:	push   r15
  41ede6:	push   r14
  41ede8:	mov    r14,rcx
  41edeb:	push   r13
  41eded:	push   r12
  41edef:	mov    r12,rsi
  41edf2:	mov    rsi,r9
  41edf5:	push   rbp
  41edf6:	mov    rbp,rdx
  41edf9:	push   rbx
  41edfa:	mov    rbx,rdi
  41edfd:	sub    rsp,0x48
  41ee01:	mov    rax,QWORD PTR [rsp+0x80]
  41ee09:	mov    DWORD PTR [rsp+0xc],r8d
  41ee0e:	mov    QWORD PTR [rsp+0x10],rax
  41ee13:	mov    rdi,QWORD PTR [rdi]
  41ee16:	mov    r13,QWORD PTR [rsp+0x88]
  41ee1e:	mov    rax,QWORD PTR fs:0x28
  41ee27:	mov    QWORD PTR [rsp+0x38],rax
  41ee2c:	xor    eax,eax
  41ee2e:	call   416790 <flatcc_builder_get_user_frame_ptr@@Base>
  41ee33:	mov    r15,rax
  41ee36:	lea    rax,[r14+r14*4]
  41ee3a:	lea    r9,[r15+rax*8+0x10]
  41ee3f:	cmp    BYTE PTR [r9+0x14],0x0
  41ee44:	jne    41ef70 <flatcc_json_parser_union_type@@Base+0x190>
  41ee4a:	mov    edx,0x1
  41ee4f:	mov    QWORD PTR [rsp+0x30],0x0
  41ee58:	mov    DWORD PTR [rsp+0x2c],0x0
  41ee60:	mov    WORD PTR [r9+0x14],dx
  41ee65:	cmp    r12,rbp
  41ee68:	je     41ef60 <flatcc_json_parser_union_type@@Base+0x180>
  41ee6e:	lea    rcx,[rsp+0x2c]
  41ee73:	lea    r8,[rsp+0x30]
  41ee78:	mov    rdx,rbp
  41ee7b:	mov    rsi,r12
  41ee7e:	mov    rdi,rbx
  41ee81:	mov    QWORD PTR [rsp+0x18],r9
  41ee86:	call   41d880 <flatcc_json_parser_integer@@Base>
  41ee8b:	cmp    r12,rax
  41ee8e:	mov    r14,rax
  41ee91:	mov    r9,QWORD PTR [rsp+0x18]
  41ee96:	jne    41ef90 <flatcc_json_parser_union_type@@Base+0x1b0>
  41ee9c:	mov    rcx,QWORD PTR [rsp+0x10]
  41eea1:	lea    r8,[r9+0x15]
  41eea5:	mov    rsi,r14
  41eea8:	mov    rdx,rbp
  41eeab:	mov    rdi,rbx
  41eeae:	mov    QWORD PTR [rsp+0x18],r9
  41eeb3:	call   41cc10 <flatcc_json_parser_space_ext@@Base+0xe0>
  41eeb8:	mov    r9,QWORD PTR [rsp+0x18]
  41eebd:	mov    r14,rax
  41eec0:	mov    rsi,QWORD PTR [r9]
  41eec3:	mov    rax,QWORD PTR [r15+0x8]
  41eec7:	test   rsi,rsi
  41eeca:	je     41efc0 <flatcc_json_parser_union_type@@Base+0x1e0>
  41eed0:	test   rax,rax
  41eed3:	je     41f043 <flatcc_json_parser_union_type@@Base+0x263>
  41eed9:	dec    rax
  41eedc:	mov    QWORD PTR [r15+0x8],rax
  41eee0:	mov    eax,DWORD PTR [r9+0x10]
  41eee4:	mov    r15d,DWORD PTR [rbx+0x14]
  41eee8:	mov    DWORD PTR [rbx+0x14],eax
  41eeeb:	mov    rax,QWORD PTR [r9+0x8]
  41eeef:	mov    r12,QWORD PTR [rbx+0x8]
  41eef3:	mov    QWORD PTR [rbx+0x8],rax
  41eef7:	lea    r8,[rsp+0x34]
  41eefc:	mov    rdx,rbp
  41eeff:	movzx  ecx,BYTE PTR [r9+0x15]
  41ef04:	mov    rdi,rbx
  41ef07:	mov    BYTE PTR [rsp+0x30],cl
  41ef0b:	call   r13
  41ef0e:	cmp    rax,rbp
  41ef11:	je     41efe0 <flatcc_json_parser_union_type@@Base+0x200>
  41ef17:	mov    rdx,QWORD PTR [rsp+0x30]
  41ef1c:	movzx  esi,WORD PTR [rsp+0xc]
  41ef21:	mov    rdi,QWORD PTR [rbx]
  41ef24:	call   419560 <flatcc_builder_table_add_union@@Base>
  41ef29:	test   eax,eax
  41ef2b:	jne    41eff0 <flatcc_json_parser_union_type@@Base+0x210>
  41ef31:	mov    DWORD PTR [rbx+0x14],r15d
  41ef35:	mov    QWORD PTR [rbx+0x8],r12
  41ef39:	mov    rdx,QWORD PTR [rsp+0x38]
  41ef3e:	xor    rdx,QWORD PTR fs:0x28
  41ef47:	mov    rax,r14
  41ef4a:	jne    41f03e <flatcc_json_parser_union_type@@Base+0x25e>
  41ef50:	add    rsp,0x48
  41ef54:	pop    rbx
  41ef55:	pop    rbp
  41ef56:	pop    r12
  41ef58:	pop    r13
  41ef5a:	pop    r14
  41ef5c:	pop    r15
  41ef5e:	ret    
  41ef5f:	nop
  41ef60:	mov    r14,rbp
  41ef63:	jmp    41ee9c <flatcc_json_parser_union_type@@Base+0xbc>
  41ef68:	nop    DWORD PTR [rax+rax*1+0x0]
  41ef70:	mov    ecx,0x1c
  41ef75:	mov    rdx,rbp
  41ef78:	mov    rsi,r12
  41ef7b:	mov    rdi,rbx
  41ef7e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41ef83:	mov    r14,rax
  41ef86:	jmp    41ef39 <flatcc_json_parser_union_type@@Base+0x159>
  41ef88:	nop    DWORD PTR [rax+rax*1+0x0]
  41ef90:	mov    eax,DWORD PTR [rsp+0x2c]
  41ef94:	mov    ecx,0x8
  41ef99:	test   eax,eax
  41ef9b:	jne    41f01a <flatcc_json_parser_union_type@@Base+0x23a>
  41ef9d:	mov    rax,QWORD PTR [rsp+0x30]
  41efa2:	cmp    rax,0xff
  41efa8:	ja     41f010 <flatcc_json_parser_union_type@@Base+0x230>
  41efaa:	mov    BYTE PTR [r9+0x15],al
  41efae:	mov    rsi,QWORD PTR [r9]
  41efb1:	mov    rax,QWORD PTR [r15+0x8]
  41efb5:	test   rsi,rsi
  41efb8:	jne    41eed0 <flatcc_json_parser_union_type@@Base+0xf0>
  41efbe:	xchg   ax,ax
  41efc0:	xor    edx,edx
  41efc2:	cmp    BYTE PTR [r9+0x15],0x0
  41efc7:	setne  dl
  41efca:	add    rax,rdx
  41efcd:	mov    QWORD PTR [r15+0x8],rax
  41efd1:	jmp    41ef39 <flatcc_json_parser_union_type@@Base+0x159>
  41efd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41efe0:	mov    r14,rbp
  41efe3:	jmp    41ef39 <flatcc_json_parser_union_type@@Base+0x159>
  41efe8:	nop    DWORD PTR [rax+rax*1+0x0]
  41eff0:	mov    rsi,r14
  41eff3:	mov    ecx,0x1c
  41eff8:	mov    rdx,rbp
  41effb:	mov    rdi,rbx
  41effe:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41f003:	mov    r14,rax
  41f006:	jmp    41ef39 <flatcc_json_parser_union_type@@Base+0x159>
  41f00b:	nop    DWORD PTR [rax+rax*1+0x0]
  41f010:	mov    QWORD PTR [rsp+0x18],r9
  41f015:	mov    ecx,0x7
  41f01a:	mov    rsi,r14
  41f01d:	mov    rdx,rbp
  41f020:	mov    rdi,rbx
  41f023:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41f028:	mov    r14,rax
  41f02b:	mov    r9,QWORD PTR [rsp+0x18]
  41f030:	cmp    r12,rax
  41f033:	jne    41eec0 <flatcc_json_parser_union_type@@Base+0xe0>
  41f039:	jmp    41ee9c <flatcc_json_parser_union_type@@Base+0xbc>
  41f03e:	call   4061a0 <__stack_chk_fail@plt>
  41f043:	lea    rcx,[rip+0x10f86]        # 42ffd0 <flatcc_builder_padding_base@@Base+0x12b0>
  41f04a:	mov    edx,0x3c5
  41f04f:	lea    rsi,[rip+0x1057a]        # 42f5d0 <flatcc_builder_padding_base@@Base+0x8b0>
  41f056:	lea    rdi,[rip+0x10835]        # 42f892 <flatcc_builder_padding_base@@Base+0xb72>
  41f05d:	call   4061b0 <__assert_fail@plt>
  41f062:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41f06d:	nop    DWORD PTR [rax]

000000000041f070 <flatcc_json_parser_union_vector@@Base>:
  41f070:	endbr64 
  41f074:	push   r15
  41f076:	mov    r15,rsi
  41f079:	mov    rsi,r9
  41f07c:	push   r14
  41f07e:	mov    r14d,r8d
  41f081:	push   r13
  41f083:	push   r12
  41f085:	mov    r12,rdx
  41f088:	push   rbp
  41f089:	mov    rbp,rcx
  41f08c:	push   rbx
  41f08d:	mov    rbx,rdi
  41f090:	sub    rsp,0x8
  41f094:	mov    rdi,QWORD PTR [rdi]
  41f097:	mov    r13,QWORD PTR [rsp+0x40]
  41f09c:	call   416790 <flatcc_builder_get_user_frame_ptr@@Base>
  41f0a1:	lea    rdx,[rbp+rbp*4+0x0]
  41f0a6:	lea    rcx,[rax+rdx*8+0x10]
  41f0ab:	cmp    QWORD PTR [rcx],0x0
  41f0af:	jne    41f128 <flatcc_json_parser_union_vector@@Base+0xb8>
  41f0b1:	cmp    BYTE PTR [rcx+0x14],0x0
  41f0b5:	mov    rdx,QWORD PTR [rax+0x8]
  41f0b9:	jne    41f0f0 <flatcc_json_parser_union_vector@@Base+0x80>
  41f0bb:	inc    rdx
  41f0be:	mov    QWORD PTR [rax+0x8],rdx
  41f0c2:	mov    eax,DWORD PTR [rbx+0x14]
  41f0c5:	mov    rdi,rbx
  41f0c8:	mov    DWORD PTR [rcx+0x10],eax
  41f0cb:	mov    rax,QWORD PTR [rbx+0x8]
  41f0cf:	mov    QWORD PTR [rcx],r15
  41f0d2:	mov    QWORD PTR [rcx+0x8],rax
  41f0d6:	add    rsp,0x8
  41f0da:	mov    rdx,r12
  41f0dd:	pop    rbx
  41f0de:	pop    rbp
  41f0df:	pop    r12
  41f0e1:	pop    r13
  41f0e3:	pop    r14
  41f0e5:	mov    rsi,r15
  41f0e8:	pop    r15
  41f0ea:	jmp    41d940 <flatcc_json_parser_generic_json@@Base>
  41f0ef:	nop
  41f0f0:	dec    rdx
  41f0f3:	mov    QWORD PTR [rax+0x8],rdx
  41f0f7:	mov    r8d,DWORD PTR [rcx+0x18]
  41f0fb:	mov    rcx,QWORD PTR [rcx+0x20]
  41f0ff:	mov    QWORD PTR [rsp+0x40],r13
  41f104:	add    rsp,0x8
  41f108:	mov    rdi,rbx
  41f10b:	pop    rbx
  41f10c:	pop    rbp
  41f10d:	mov    rdx,r12
  41f110:	pop    r12
  41f112:	pop    r13
  41f114:	movzx  r9d,r14w
  41f118:	pop    r14
  41f11a:	mov    rsi,r15
  41f11d:	pop    r15
  41f11f:	jmp    41cde0 <flatcc_json_parser_space_ext@@Base+0x2b0>
  41f124:	nop    DWORD PTR [rax+0x0]
  41f128:	add    rsp,0x8
  41f12c:	mov    rdi,rbx
  41f12f:	pop    rbx
  41f130:	pop    rbp
  41f131:	mov    rdx,r12
  41f134:	pop    r12
  41f136:	pop    r13
  41f138:	pop    r14
  41f13a:	mov    rsi,r15
  41f13d:	mov    ecx,0x1c
  41f142:	pop    r15
  41f144:	jmp    41cab0 <flatcc_json_parser_set_error@@Base>
  41f149:	nop    DWORD PTR [rax+0x0]

000000000041f150 <flatcc_json_parser_union_type_vector@@Base>:
  41f150:	endbr64 
  41f154:	push   r15
  41f156:	push   r14
  41f158:	push   r13
  41f15a:	mov    r13,rcx
  41f15d:	push   r12
  41f15f:	mov    r12,rsi
  41f162:	mov    rsi,r9
  41f165:	push   rbp
  41f166:	mov    rbp,rdi
  41f169:	push   rbx
  41f16a:	mov    rbx,rdx
  41f16d:	sub    rsp,0x78
  41f171:	mov    rax,QWORD PTR [rsp+0xb0]
  41f179:	mov    DWORD PTR [rsp+0x2c],r8d
  41f17e:	mov    QWORD PTR [rsp+0x18],rax
  41f183:	mov    rax,QWORD PTR [rsp+0xb8]
  41f18b:	mov    QWORD PTR [rsp+0x30],r9
  41f190:	mov    QWORD PTR [rsp+0x40],rax
  41f195:	mov    rdi,QWORD PTR [rdi]
  41f198:	mov    r14,QWORD PTR [rsp+0xc0]
  41f1a0:	mov    rax,QWORD PTR fs:0x28
  41f1a9:	mov    QWORD PTR [rsp+0x68],rax
  41f1ae:	xor    eax,eax
  41f1b0:	call   416790 <flatcc_builder_get_user_frame_ptr@@Base>
  41f1b5:	lea    rdx,[r13+r13*4+0x0]
  41f1ba:	lea    rcx,[rdx*8+0x0]
  41f1c2:	lea    rax,[rax+rcx*1+0x10]
  41f1c7:	cmp    BYTE PTR [rax+0x14],0x0
  41f1cb:	mov    QWORD PTR [rsp+0x38],rcx
  41f1d0:	mov    QWORD PTR [rsp+0x10],rax
  41f1d5:	mov    ecx,0x1c
  41f1da:	jne    41f206 <flatcc_json_parser_union_type_vector@@Base+0xb6>
  41f1dc:	mov    rax,QWORD PTR [rsp+0x10]
  41f1e1:	mov    ecx,0xffffffff
  41f1e6:	mov    BYTE PTR [rax+0x14],0x1
  41f1ea:	mov    edx,0x1
  41f1ef:	mov    esi,0x1
  41f1f4:	mov    rdi,QWORD PTR [rbp+0x0]
  41f1f8:	call   4177b0 <flatcc_builder_start_vector@@Base>
  41f1fd:	test   eax,eax
  41f1ff:	je     41f240 <flatcc_json_parser_union_type_vector@@Base+0xf0>
  41f201:	mov    ecx,0x21
  41f206:	mov    rdx,rbx
  41f209:	mov    rsi,r12
  41f20c:	mov    rdi,rbp
  41f20f:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41f214:	mov    r15,rax
  41f217:	mov    rcx,QWORD PTR [rsp+0x68]
  41f21c:	xor    rcx,QWORD PTR fs:0x28
  41f225:	mov    rax,r15
  41f228:	jne    41f727 <flatcc_json_parser_union_type_vector@@Base+0x5d7>
  41f22e:	add    rsp,0x78
  41f232:	pop    rbx
  41f233:	pop    rbp
  41f234:	pop    r12
  41f236:	pop    r13
  41f238:	pop    r14
  41f23a:	pop    r15
  41f23c:	ret    
  41f23d:	nop    DWORD PTR [rax]
  41f240:	cmp    r12,rbx
  41f243:	je     41f250 <flatcc_json_parser_union_type_vector@@Base+0x100>
  41f245:	cmp    BYTE PTR [r12],0x5b
  41f24a:	je     41f388 <flatcc_json_parser_union_type_vector@@Base+0x238>
  41f250:	mov    ecx,0x16
  41f255:	mov    rdx,rbx
  41f258:	mov    rsi,r12
  41f25b:	mov    rdi,rbp
  41f25e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41f263:	mov    r15,rax
  41f266:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41f270:	mov    rdi,QWORD PTR [rbp+0x0]
  41f274:	call   418760 <flatcc_builder_vector_count@@Base>
  41f279:	mov    r13,rax
  41f27c:	mov    rax,QWORD PTR [rsp+0x10]
  41f281:	mov    edx,r13d
  41f284:	mov    DWORD PTR [rax+0x18],r13d
  41f288:	mov    rdi,QWORD PTR [rbp+0x0]
  41f28c:	mov    rsi,rdx
  41f28f:	mov    QWORD PTR [rsp],rdx
  41f293:	call   416660 <flatcc_builder_enter_user_frame@@Base>
  41f298:	mov    rdi,QWORD PTR [rbp+0x0]
  41f29c:	mov    rsi,rax
  41f29f:	mov    r14,rax
  41f2a2:	call   416790 <flatcc_builder_get_user_frame_ptr@@Base>
  41f2a7:	mov    rdi,QWORD PTR [rbp+0x0]
  41f2ab:	mov    r12,rax
  41f2ae:	call   418770 <flatcc_builder_vector_edit@@Base>
  41f2b3:	mov    rdx,QWORD PTR [rsp]
  41f2b7:	mov    rdi,r12
  41f2ba:	mov    rsi,rax
  41f2bd:	call   406210 <memcpy@plt>
  41f2c2:	mov    rdi,QWORD PTR [rbp+0x0]
  41f2c6:	mov    r12,r15
  41f2c9:	call   418670 <flatcc_builder_end_vector@@Base>
  41f2ce:	test   eax,eax
  41f2d0:	mov    DWORD PTR [rsp],eax
  41f2d3:	je     41f201 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  41f2d9:	movzx  esi,WORD PTR [rsp+0x2c]
  41f2de:	mov    rdi,QWORD PTR [rbp+0x0]
  41f2e2:	dec    esi
  41f2e4:	call   419420 <flatcc_builder_table_add_offset@@Base>
  41f2e9:	test   rax,rax
  41f2ec:	je     41f201 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  41f2f2:	mov    edx,DWORD PTR [rsp]
  41f2f5:	mov    rsi,QWORD PTR [rsp+0x30]
  41f2fa:	mov    DWORD PTR [rax],edx
  41f2fc:	mov    rdi,QWORD PTR [rbp+0x0]
  41f300:	call   416790 <flatcc_builder_get_user_frame_ptr@@Base>
  41f305:	mov    rdx,QWORD PTR [rsp+0x38]
  41f30a:	lea    rdx,[rax+rdx*1+0x10]
  41f30f:	mov    rsi,QWORD PTR [rdx]
  41f312:	mov    QWORD PTR [rdx+0x20],r14
  41f316:	test   rsi,rsi
  41f319:	je     41f716 <flatcc_json_parser_union_type_vector@@Base+0x5c6>
  41f31f:	mov    rcx,QWORD PTR [rax+0x8]
  41f323:	test   rcx,rcx
  41f326:	je     41f72c <flatcc_json_parser_union_type_vector@@Base+0x5dc>
  41f32c:	dec    rcx
  41f32f:	mov    QWORD PTR [rax+0x8],rcx
  41f333:	mov    eax,DWORD PTR [rbp+0x14]
  41f336:	sub    rsp,0x8
  41f33a:	mov    DWORD PTR [rsp+0x8],eax
  41f33e:	mov    eax,DWORD PTR [rdx+0x10]
  41f341:	mov    r12,QWORD PTR [rbp+0x8]
  41f345:	mov    DWORD PTR [rbp+0x14],eax
  41f348:	mov    rax,QWORD PTR [rdx+0x8]
  41f34c:	push   QWORD PTR [rsp+0x48]
  41f350:	mov    QWORD PTR [rbp+0x8],rax
  41f354:	mov    rcx,r14
  41f357:	movzx  r9d,WORD PTR [rsp+0x3c]
  41f35d:	mov    rdx,rbx
  41f360:	mov    r8d,r13d
  41f363:	mov    rdi,rbp
  41f366:	call   41cde0 <flatcc_json_parser_space_ext@@Base+0x2b0>
  41f36b:	pop    rdx
  41f36c:	pop    rcx
  41f36d:	cmp    rax,rbx
  41f370:	je     41f71f <flatcc_json_parser_union_type_vector@@Base+0x5cf>
  41f376:	mov    eax,DWORD PTR [rsp]
  41f379:	mov    QWORD PTR [rbp+0x8],r12
  41f37d:	mov    DWORD PTR [rbp+0x14],eax
  41f380:	jmp    41f217 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  41f385:	nop    DWORD PTR [rax]
  41f388:	lea    rsi,[r12+0x1]
  41f38d:	mov    rax,rbx
  41f390:	sub    rax,rsi
  41f393:	cmp    rax,0x1
  41f397:	jle    41f3b8 <flatcc_json_parser_union_type_vector@@Base+0x268>
  41f399:	cmp    BYTE PTR [r12+0x1],0x20
  41f39f:	jg     41f706 <flatcc_json_parser_union_type_vector@@Base+0x5b6>
  41f3a5:	jne    41f3b8 <flatcc_json_parser_union_type_vector@@Base+0x268>
  41f3a7:	cmp    BYTE PTR [r12+0x2],0x20
  41f3ad:	jle    41f3b8 <flatcc_json_parser_union_type_vector@@Base+0x268>
  41f3af:	add    r12,0x2
  41f3b3:	jmp    41f3c6 <flatcc_json_parser_union_type_vector@@Base+0x276>
  41f3b5:	nop    DWORD PTR [rax]
  41f3b8:	mov    rdx,rbx
  41f3bb:	mov    rdi,rbp
  41f3be:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41f3c3:	mov    r12,rax
  41f3c6:	cmp    rbx,r12
  41f3c9:	je     41f3d6 <flatcc_json_parser_union_type_vector@@Base+0x286>
  41f3cb:	cmp    BYTE PTR [r12],0x5d
  41f3d0:	je     41f5fa <flatcc_json_parser_union_type_vector@@Base+0x4aa>
  41f3d6:	lea    rax,[rsp+0x5b]
  41f3db:	mov    QWORD PTR [rsp+0x48],rax
  41f3e0:	lea    rax,[rsp+0x60]
  41f3e5:	mov    QWORD PTR [rsp],rax
  41f3e9:	lea    rax,[rsp+0x5c]
  41f3ee:	mov    QWORD PTR [rsp+0x8],rax
  41f3f3:	nop    DWORD PTR [rax+rax*1+0x0]
  41f3f8:	mov    rdi,QWORD PTR [rbp+0x0]
  41f3fc:	mov    esi,0x1
  41f401:	call   417100 <flatcc_builder_extend_vector@@Base>
  41f406:	mov    r13,rax
  41f409:	test   rax,rax
  41f40c:	je     41f201 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  41f412:	mov    QWORD PTR [rsp+0x60],0x0
  41f41b:	mov    DWORD PTR [rsp+0x5c],0x0
  41f423:	mov    BYTE PTR [rsp+0x5b],0x0
  41f428:	cmp    rbx,r12
  41f42b:	je     41f520 <flatcc_json_parser_union_type_vector@@Base+0x3d0>
  41f431:	mov    r8,QWORD PTR [rsp]
  41f435:	mov    rcx,QWORD PTR [rsp+0x8]
  41f43a:	mov    rdx,rbx
  41f43d:	mov    rsi,r12
  41f440:	mov    rdi,rbp
  41f443:	call   41d880 <flatcc_json_parser_integer@@Base>
  41f448:	mov    r9,rax
  41f44b:	cmp    r12,rax
  41f44e:	jne    41f530 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
  41f454:	mov    r8,QWORD PTR [rsp+0x48]
  41f459:	mov    rcx,QWORD PTR [rsp+0x18]
  41f45e:	mov    rsi,r9
  41f461:	mov    rdx,rbx
  41f464:	mov    rdi,rbp
  41f467:	mov    QWORD PTR [rsp+0x20],r9
  41f46c:	call   41cc10 <flatcc_json_parser_space_ext@@Base+0xe0>
  41f471:	mov    r9,QWORD PTR [rsp+0x20]
  41f476:	mov    r15,rax
  41f479:	cmp    rax,r9
  41f47c:	je     41f70e <flatcc_json_parser_union_type_vector@@Base+0x5be>
  41f482:	cmp    rbx,rax
  41f485:	je     41f70e <flatcc_json_parser_union_type_vector@@Base+0x5be>
  41f48b:	movzx  edi,BYTE PTR [rsp+0x5b]
  41f490:	call   r14
  41f493:	test   eax,eax
  41f495:	jne    41f510 <flatcc_json_parser_union_type_vector@@Base+0x3c0>
  41f497:	test   BYTE PTR [rbp+0x10],0x1
  41f49b:	je     41f6b0 <flatcc_json_parser_union_type_vector@@Base+0x560>
  41f4a1:	mov    BYTE PTR [rsp+0x5b],0x0
  41f4a6:	xor    eax,eax
  41f4a8:	mov    BYTE PTR [r13+0x0],al
  41f4ac:	mov    rax,rbx
  41f4af:	sub    rax,r15
  41f4b2:	cmp    rax,0x1
  41f4b6:	jle    41f4c4 <flatcc_json_parser_union_type_vector@@Base+0x374>
  41f4b8:	cmp    BYTE PTR [r15],0x20
  41f4bc:	jg     41f4d5 <flatcc_json_parser_union_type_vector@@Base+0x385>
  41f4be:	je     41f5a0 <flatcc_json_parser_union_type_vector@@Base+0x450>
  41f4c4:	mov    rsi,r15
  41f4c7:	mov    rdx,rbx
  41f4ca:	mov    rdi,rbp
  41f4cd:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41f4d2:	mov    r15,rax
  41f4d5:	cmp    rbx,r15
  41f4d8:	je     41f270 <flatcc_json_parser_union_type_vector@@Base+0x120>
  41f4de:	movzx  eax,BYTE PTR [r15]
  41f4e2:	cmp    al,0x2c
  41f4e4:	je     41f5b8 <flatcc_json_parser_union_type_vector@@Base+0x468>
  41f4ea:	cmp    al,0x5d
  41f4ec:	je     41f568 <flatcc_json_parser_union_type_vector@@Base+0x418>
  41f4ee:	mov    rsi,r15
  41f4f1:	mov    ecx,0x9
  41f4f6:	mov    rdx,rbx
  41f4f9:	mov    rdi,rbp
  41f4fc:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41f501:	mov    r15,rax
  41f504:	jmp    41f270 <flatcc_json_parser_union_type_vector@@Base+0x120>
  41f509:	nop    DWORD PTR [rax+0x0]
  41f510:	movzx  eax,BYTE PTR [rsp+0x5b]
  41f515:	jmp    41f4a8 <flatcc_json_parser_union_type_vector@@Base+0x358>
  41f517:	nop    WORD PTR [rax+rax*1+0x0]
  41f520:	mov    r9,rbx
  41f523:	jmp    41f454 <flatcc_json_parser_union_type_vector@@Base+0x304>
  41f528:	nop    DWORD PTR [rax+rax*1+0x0]
  41f530:	mov    esi,DWORD PTR [rsp+0x5c]
  41f534:	mov    ecx,0x8
  41f539:	test   esi,esi
  41f53b:	jne    41f645 <flatcc_json_parser_union_type_vector@@Base+0x4f5>
  41f541:	mov    rax,QWORD PTR [rsp+0x60]
  41f546:	cmp    rax,0xff
  41f54c:	ja     41f640 <flatcc_json_parser_union_type_vector@@Base+0x4f0>
  41f552:	movzx  edi,al
  41f555:	mov    BYTE PTR [rsp+0x5b],al
  41f559:	mov    r15,r9
  41f55c:	jmp    41f490 <flatcc_json_parser_union_type_vector@@Base+0x340>
  41f561:	nop    DWORD PTR [rax+0x0]
  41f568:	lea    rsi,[r15+0x1]
  41f56c:	mov    rax,rbx
  41f56f:	sub    rax,rsi
  41f572:	cmp    rax,0x1
  41f576:	jle    41f589 <flatcc_json_parser_union_type_vector@@Base+0x439>
  41f578:	cmp    BYTE PTR [r15+0x1],0x20
  41f57d:	jg     41f670 <flatcc_json_parser_union_type_vector@@Base+0x520>
  41f583:	je     41f680 <flatcc_json_parser_union_type_vector@@Base+0x530>
  41f589:	mov    rdx,rbx
  41f58c:	mov    rdi,rbp
  41f58f:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41f594:	mov    r15,rax
  41f597:	jmp    41f270 <flatcc_json_parser_union_type_vector@@Base+0x120>
  41f59c:	nop    DWORD PTR [rax+0x0]
  41f5a0:	cmp    BYTE PTR [r15+0x1],0x20
  41f5a5:	jle    41f4c4 <flatcc_json_parser_union_type_vector@@Base+0x374>
  41f5ab:	inc    r15
  41f5ae:	jmp    41f4d5 <flatcc_json_parser_union_type_vector@@Base+0x385>
  41f5b3:	nop    DWORD PTR [rax+rax*1+0x0]
  41f5b8:	lea    r12,[r15+0x1]
  41f5bc:	mov    rax,rbx
  41f5bf:	sub    rax,r12
  41f5c2:	cmp    rax,0x1
  41f5c6:	jle    41f5d5 <flatcc_json_parser_union_type_vector@@Base+0x485>
  41f5c8:	cmp    BYTE PTR [r15+0x1],0x20
  41f5cd:	jg     41f5e6 <flatcc_json_parser_union_type_vector@@Base+0x496>
  41f5cf:	je     41f698 <flatcc_json_parser_union_type_vector@@Base+0x548>
  41f5d5:	mov    rsi,r12
  41f5d8:	mov    rdx,rbx
  41f5db:	mov    rdi,rbp
  41f5de:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41f5e3:	mov    r12,rax
  41f5e6:	cmp    rbx,r12
  41f5e9:	je     41f6d0 <flatcc_json_parser_union_type_vector@@Base+0x580>
  41f5ef:	cmp    BYTE PTR [r12],0x5d
  41f5f4:	jne    41f3f8 <flatcc_json_parser_union_type_vector@@Base+0x2a8>
  41f5fa:	lea    r15,[r12+0x1]
  41f5ff:	mov    rax,rbx
  41f602:	sub    rax,r15
  41f605:	cmp    rax,0x1
  41f609:	jle    41f6f0 <flatcc_json_parser_union_type_vector@@Base+0x5a0>
  41f60f:	cmp    BYTE PTR [r12+0x1],0x20
  41f615:	jg     41f270 <flatcc_json_parser_union_type_vector@@Base+0x120>
  41f61b:	jne    41f6f0 <flatcc_json_parser_union_type_vector@@Base+0x5a0>
  41f621:	cmp    BYTE PTR [r12+0x2],0x20
  41f627:	jle    41f6f0 <flatcc_json_parser_union_type_vector@@Base+0x5a0>
  41f62d:	lea    r15,[r12+0x2]
  41f632:	jmp    41f270 <flatcc_json_parser_union_type_vector@@Base+0x120>
  41f637:	nop    WORD PTR [rax+rax*1+0x0]
  41f640:	mov    ecx,0x7
  41f645:	mov    rdx,rbx
  41f648:	mov    rsi,r9
  41f64b:	mov    rdi,rbp
  41f64e:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41f653:	mov    r15,rax
  41f656:	cmp    r12,rax
  41f659:	jne    41f48b <flatcc_json_parser_union_type_vector@@Base+0x33b>
  41f65f:	mov    r9,r12
  41f662:	jmp    41f454 <flatcc_json_parser_union_type_vector@@Base+0x304>
  41f667:	nop    WORD PTR [rax+rax*1+0x0]
  41f670:	mov    r15,rsi
  41f673:	jmp    41f270 <flatcc_json_parser_union_type_vector@@Base+0x120>
  41f678:	nop    DWORD PTR [rax+rax*1+0x0]
  41f680:	cmp    BYTE PTR [r15+0x2],0x20
  41f685:	jle    41f589 <flatcc_json_parser_union_type_vector@@Base+0x439>
  41f68b:	add    r15,0x2
  41f68f:	jmp    41f270 <flatcc_json_parser_union_type_vector@@Base+0x120>
  41f694:	nop    DWORD PTR [rax+0x0]
  41f698:	cmp    BYTE PTR [r15+0x2],0x20
  41f69d:	jle    41f5d5 <flatcc_json_parser_union_type_vector@@Base+0x485>
  41f6a3:	lea    r12,[r15+0x2]
  41f6a7:	jmp    41f5e6 <flatcc_json_parser_union_type_vector@@Base+0x496>
  41f6ac:	nop    DWORD PTR [rax+0x0]
  41f6b0:	mov    rsi,r15
  41f6b3:	mov    ecx,0xf
  41f6b8:	mov    rdx,rbx
  41f6bb:	mov    rdi,rbp
  41f6be:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41f6c3:	mov    r15,rax
  41f6c6:	jmp    41f217 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  41f6cb:	nop    DWORD PTR [rax+rax*1+0x0]
  41f6d0:	mov    ecx,0x9
  41f6d5:	mov    rdx,rbx
  41f6d8:	mov    rsi,rbx
  41f6db:	mov    rdi,rbp
  41f6de:	call   41cab0 <flatcc_json_parser_set_error@@Base>
  41f6e3:	mov    r15,rax
  41f6e6:	jmp    41f270 <flatcc_json_parser_union_type_vector@@Base+0x120>
  41f6eb:	nop    DWORD PTR [rax+rax*1+0x0]
  41f6f0:	mov    rsi,r15
  41f6f3:	mov    rdx,rbx
  41f6f6:	mov    rdi,rbp
  41f6f9:	call   41cb30 <flatcc_json_parser_space_ext@@Base>
  41f6fe:	mov    r15,rax
  41f701:	jmp    41f270 <flatcc_json_parser_union_type_vector@@Base+0x120>
  41f706:	mov    r12,rsi
  41f709:	jmp    41f3c6 <flatcc_json_parser_union_type_vector@@Base+0x276>
  41f70e:	mov    r12,r15
  41f711:	jmp    41f201 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  41f716:	inc    QWORD PTR [rax+0x8]
  41f71a:	jmp    41f217 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  41f71f:	mov    r15,rbx
  41f722:	jmp    41f217 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  41f727:	call   4061a0 <__stack_chk_fail@plt>
  41f72c:	lea    rcx,[rip+0x1086d]        # 42ffa0 <flatcc_builder_padding_base@@Base+0x1280>
  41f733:	mov    edx,0x462
  41f738:	lea    rsi,[rip+0xfe91]        # 42f5d0 <flatcc_builder_padding_base@@Base+0x8b0>
  41f73f:	lea    rdi,[rip+0x1014c]        # 42f892 <flatcc_builder_padding_base@@Base+0xb72>
  41f746:	call   4061b0 <__assert_fail@plt>
  41f74b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041f750 <flatcc_json_parser_table_as_root@@Base>:
  41f750:	endbr64 
  41f754:	push   r14
  41f756:	vpxor  xmm0,xmm0,xmm0
  41f75a:	push   r13
  41f75c:	mov    r13,rdi
  41f75f:	push   r12
  41f761:	mov    r12,rcx
  41f764:	mov    ecx,r8d
  41f767:	push   rbp
  41f768:	sar    ecx,1
  41f76a:	and    ecx,0x2
  41f76d:	push   rbx
  41f76e:	mov    rbx,rsi
  41f771:	mov    rbp,rdx
  41f774:	sub    rsp,0x60
  41f778:	mov    rax,QWORD PTR fs:0x28
  41f781:	mov    QWORD PTR [rsp+0x58],rax
  41f786:	xor    eax,eax
  41f788:	test   rsi,rsi
  41f78b:	lea    rax,[rsp+0x10]
  41f790:	cmove  rbx,rax
  41f794:	add    r12,rdx
  41f797:	vmovups XMMWORD PTR [rbx+0x18],xmm0
  41f79c:	mov    QWORD PTR [rbx+0x8],rdx
  41f7a0:	mov    QWORD PTR [rbx+0x20],rdx
  41f7a4:	mov    QWORD PTR [rbx+0x30],rdx
  41f7a8:	mov    QWORD PTR [rbx+0x38],0x0
  41f7b0:	mov    QWORD PTR [rbx],rdi
  41f7b3:	mov    DWORD PTR [rbx+0x14],0x1
  41f7ba:	mov    DWORD PTR [rbx+0x10],r8d
  41f7be:	mov    QWORD PTR [rbx+0x28],r12
  41f7c2:	xor    edx,edx
  41f7c4:	mov    rsi,r9
  41f7c7:	mov    r14,QWORD PTR [rsp+0x90]
  41f7cf:	call   416d30 <flatcc_builder_start_buffer@@Base>
  41f7d4:	test   eax,eax
  41f7d6:	jne    41f830 <flatcc_json_parser_table_as_root@@Base+0xe0>
  41f7d8:	mov    rdx,r12
  41f7db:	lea    rcx,[rsp+0xc]
  41f7e0:	mov    rsi,rbp
  41f7e3:	mov    rdi,rbx
  41f7e6:	call   r14
  41f7e9:	mov    r12d,DWORD PTR [rbx+0x1c]
  41f7ed:	test   r12d,r12d
  41f7f0:	je     41f818 <flatcc_json_parser_table_as_root@@Base+0xc8>
  41f7f2:	mov    rdx,QWORD PTR [rsp+0x58]
  41f7f7:	xor    rdx,QWORD PTR fs:0x28
  41f800:	mov    eax,r12d
  41f803:	jne    41f838 <flatcc_json_parser_table_as_root@@Base+0xe8>
  41f805:	add    rsp,0x60
  41f809:	pop    rbx
  41f80a:	pop    rbp
  41f80b:	pop    r12
  41f80d:	pop    r13
  41f80f:	pop    r14
  41f811:	ret    
  41f812:	nop    WORD PTR [rax+rax*1+0x0]
  41f818:	mov    esi,DWORD PTR [rsp+0xc]
  41f81c:	mov    rdi,r13
  41f81f:	call   416e10 <flatcc_builder_end_buffer@@Base>
  41f824:	test   eax,eax
  41f826:	je     41f830 <flatcc_json_parser_table_as_root@@Base+0xe0>
  41f828:	mov    QWORD PTR [rbx+0x38],rbp
  41f82c:	jmp    41f7f2 <flatcc_json_parser_table_as_root@@Base+0xa2>
  41f82e:	xchg   ax,ax
  41f830:	mov    r12d,0xffffffff
  41f836:	jmp    41f7f2 <flatcc_json_parser_table_as_root@@Base+0xa2>
  41f838:	call   4061a0 <__stack_chk_fail@plt>
  41f83d:	nop    DWORD PTR [rax]

000000000041f840 <flatcc_json_parser_struct_as_root@@Base>:
  41f840:	endbr64 
  41f844:	jmp    41f750 <flatcc_json_parser_table_as_root@@Base>
  41f849:	nop    DWORD PTR [rax+0x0]
  41f850:	mov    ecx,edi
  41f852:	cmp    di,0x3e7
  41f857:	jbe    41f920 <flatcc_json_parser_struct_as_root@@Base+0xe0>
  41f85d:	mov    r8d,0x64
  41f863:	mov    eax,edi
  41f865:	xor    edx,edx
  41f867:	div    r8w
  41f86b:	mov    eax,edi
  41f86d:	shr    ax,0x2
  41f871:	movzx  eax,ax
  41f874:	imul   eax,eax,0x147b
  41f87a:	lea    r8,[rip+0x1199f]        # 431220 <flatcc_builder_padding_base@@Base+0x2500>
  41f881:	shr    eax,0x11
  41f884:	add    rdx,rdx
  41f887:	and    edx,0xfe
  41f88d:	lea    rcx,[r8+rdx*1]
  41f891:	cmp    di,0x270f
  41f896:	jbe    41f8f0 <flatcc_json_parser_struct_as_root@@Base+0xb0>
  41f898:	mov    BYTE PTR [rsi+0x5],0x0
  41f89c:	lea    r9,[rsi+0x3]
  41f8a0:	movzx  edx,WORD PTR [rcx]
  41f8a3:	mov    WORD PTR [rsi+0x3],dx
  41f8a7:	mov    esi,0x5
  41f8ac:	mov    edx,eax
  41f8ae:	shr    dx,0x2
  41f8b2:	movzx  edx,dx
  41f8b5:	imul   edx,edx,0x147b
  41f8bb:	mov    r10d,0x64
  41f8c1:	lea    rdi,[r9-0x2]
  41f8c5:	shr    edx,0x11
  41f8c8:	mov    ecx,edx
  41f8ca:	mov    edx,eax
  41f8cc:	sar    dx,0xf
  41f8d0:	idiv   r10w
  41f8d4:	lea    rax,[rdx+rdx*1]
  41f8d8:	and    eax,0x1fffe
  41f8dd:	movzx  eax,WORD PTR [r8+rax*1]
  41f8e2:	mov    WORD PTR [r9-0x2],ax
  41f8e7:	lea    eax,[rcx+0x30]
  41f8ea:	mov    BYTE PTR [rdi-0x1],al
  41f8ed:	mov    eax,esi
  41f8ef:	ret    
  41f8f0:	mov    BYTE PTR [rsi+0x4],0x0
  41f8f4:	lea    rdx,[rsi+0x2]
  41f8f8:	movzx  ecx,WORD PTR [rcx]
  41f8fb:	mov    WORD PTR [rsi+0x2],cx
  41f8ff:	mov    esi,0x4
  41f904:	add    rax,rax
  41f907:	and    eax,0x1fffe
  41f90c:	movzx  eax,WORD PTR [r8+rax*1]
  41f911:	mov    WORD PTR [rdx-0x2],ax
  41f915:	mov    eax,esi
  41f917:	ret    
  41f918:	nop    DWORD PTR [rax+rax*1+0x0]
  41f920:	cmp    di,0x63
  41f924:	ja     41f940 <flatcc_json_parser_struct_as_root@@Base+0x100>
  41f926:	cmp    di,0x9
  41f92a:	ja     41f960 <flatcc_json_parser_struct_as_root@@Base+0x120>
  41f92c:	lea    rdi,[rsi+0x1]
  41f930:	mov    BYTE PTR [rsi+0x1],0x0
  41f934:	mov    esi,0x1
  41f939:	jmp    41f8e7 <flatcc_json_parser_struct_as_root@@Base+0xa7>
  41f93b:	nop    DWORD PTR [rax+rax*1+0x0]
  41f940:	lea    r9,[rsi+0x3]
  41f944:	mov    BYTE PTR [rsi+0x3],0x0
  41f948:	mov    eax,edi
  41f94a:	mov    esi,0x3
  41f94f:	lea    r8,[rip+0x118ca]        # 431220 <flatcc_builder_padding_base@@Base+0x2500>
  41f956:	jmp    41f8ac <flatcc_json_parser_struct_as_root@@Base+0x6c>
  41f95b:	nop    DWORD PTR [rax+rax*1+0x0]
  41f960:	lea    rdx,[rsi+0x2]
  41f964:	mov    BYTE PTR [rsi+0x2],0x0
  41f968:	mov    eax,edi
  41f96a:	mov    esi,0x2
  41f96f:	lea    r8,[rip+0x118aa]        # 431220 <flatcc_builder_padding_base@@Base+0x2500>
  41f976:	jmp    41f904 <flatcc_json_parser_struct_as_root@@Base+0xc4>
  41f978:	nop    DWORD PTR [rax+rax*1+0x0]
  41f980:	cmp    edi,0x270f
  41f986:	jbe    41fa80 <flatcc_json_parser_struct_as_root@@Base+0x240>
  41f98c:	mov    r8d,0x51eb851f
  41f992:	mov    eax,edi
  41f994:	mul    r8d
  41f997:	mov    r9d,edi
  41f99a:	push   rbp
  41f99b:	mov    ecx,edx
  41f99d:	shr    ecx,0x5
  41f9a0:	imul   eax,ecx,0x64
  41f9a3:	lea    r10,[rip+0x11876]        # 431220 <flatcc_builder_padding_base@@Base+0x2500>
  41f9aa:	push   rbx
  41f9ab:	sub    r9d,eax
  41f9ae:	mov    eax,ecx
  41f9b0:	mul    r8d
  41f9b3:	mov    eax,edi
  41f9b5:	add    r9d,r9d
  41f9b8:	shr    edx,0x5
  41f9bb:	imul   edx,edx,0x64
  41f9be:	add    r9,r10
  41f9c1:	sub    ecx,edx
  41f9c3:	mov    edx,0xd1b71759
  41f9c8:	mul    edx
  41f9ca:	add    ecx,ecx
  41f9cc:	lea    r11,[r10+rcx*1]
  41f9d0:	mov    ecx,edx
  41f9d2:	shr    ecx,0xd
  41f9d5:	cmp    edi,0x98967f
  41f9db:	jbe    41fb00 <flatcc_json_parser_struct_as_root@@Base+0x2c0>
  41f9e1:	mov    eax,ecx
  41f9e3:	mul    r8d
  41f9e6:	mov    eax,edi
  41f9e8:	shr    edx,0x5
  41f9eb:	imul   edx,edx,0x64
  41f9ee:	sub    ecx,edx
  41f9f0:	mov    edx,0x431bde83
  41f9f5:	mul    edx
  41f9f7:	lea    ebx,[rcx+rcx*1]
  41f9fa:	add    rbx,r10
  41f9fd:	mov    ecx,edx
  41f9ff:	shr    ecx,0x12
  41fa02:	cmp    edi,0x3b9ac9ff
  41fa08:	ja     41fb78 <flatcc_json_parser_struct_as_root@@Base+0x338>
  41fa0e:	cmp    edi,0x5f5e0ff
  41fa14:	jbe    41fbf8 <flatcc_json_parser_struct_as_root@@Base+0x3b8>
  41fa1a:	mov    BYTE PTR [rsi+0x9],0x0
  41fa1e:	lea    rax,[rsi+0x7]
  41fa22:	movzx  edx,WORD PTR [r9]
  41fa26:	mov    r9,r11
  41fa29:	mov    WORD PTR [rsi+0x7],dx
  41fa2d:	mov    r11,rbx
  41fa30:	mov    esi,0x9
  41fa35:	movzx  edx,WORD PTR [r9]
  41fa39:	mov    edi,0x51eb851f
  41fa3e:	mov    WORD PTR [rax-0x2],dx
  41fa42:	lea    rbx,[rax-0x2]
  41fa46:	mov    eax,ecx
  41fa48:	mul    edi
  41fa4a:	mov    edi,edx
  41fa4c:	shr    edi,0x5
  41fa4f:	imul   eax,edi,0x64
  41fa52:	sub    ecx,eax
  41fa54:	lea    r8d,[rcx+rcx*1]
  41fa58:	add    r8,r10
  41fa5b:	movzx  edx,WORD PTR [r11]
  41fa5f:	lea    rax,[rbx-0x2]
  41fa63:	mov    WORD PTR [rbx-0x2],dx
  41fa67:	add    edi,0x30
  41fa6a:	lea    rdx,[rax-0x2]
  41fa6e:	movzx  ecx,WORD PTR [r8]
  41fa72:	mov    WORD PTR [rax-0x2],cx
  41fa76:	mov    BYTE PTR [rdx-0x1],dil
  41fa7a:	mov    eax,esi
  41fa7c:	pop    rbx
  41fa7d:	pop    rbp
  41fa7e:	ret    
  41fa7f:	nop
  41fa80:	cmp    edi,0x63
  41fa83:	jbe    41fae0 <flatcc_json_parser_struct_as_root@@Base+0x2a0>
  41fa85:	mov    eax,edi
  41fa87:	mov    edx,0x51eb851f
  41fa8c:	mul    edx
  41fa8e:	mov    r8d,edi
  41fa91:	lea    r10,[rip+0x11788]        # 431220 <flatcc_builder_padding_base@@Base+0x2500>
  41fa98:	shr    edx,0x5
  41fa9b:	imul   eax,edx,0x64
  41fa9e:	mov    ecx,edx
  41faa0:	sub    r8d,eax
  41faa3:	add    r8d,r8d
  41faa6:	add    r8,r10
  41faa9:	cmp    edi,0x3e7
  41faaf:	jbe    41fb58 <flatcc_json_parser_struct_as_root@@Base+0x318>
  41fab5:	mov    BYTE PTR [rsi+0x4],0x0
  41fab9:	lea    rax,[rsi+0x4]
  41fabd:	lea    rdx,[rax-0x2]
  41fac1:	movzx  edi,WORD PTR [r8]
  41fac5:	mov    esi,0x4
  41faca:	mov    WORD PTR [rax-0x2],di
  41face:	add    ecx,ecx
  41fad0:	movzx  eax,WORD PTR [r10+rcx*1]
  41fad5:	mov    WORD PTR [rdx-0x2],ax
  41fad9:	mov    eax,esi
  41fadb:	ret    
  41fadc:	nop    DWORD PTR [rax+0x0]
  41fae0:	cmp    edi,0x9
  41fae3:	ja     41fbd8 <flatcc_json_parser_struct_as_root@@Base+0x398>
  41fae9:	lea    rdx,[rsi+0x1]
  41faed:	mov    BYTE PTR [rsi+0x1],0x0
  41faf1:	mov    esi,0x1
  41faf6:	add    edi,0x30
  41faf9:	mov    BYTE PTR [rdx-0x1],dil
  41fafd:	mov    eax,esi
  41faff:	ret    
  41fb00:	cmp    edi,0xf423f
  41fb06:	ja     41fbc0 <flatcc_json_parser_struct_as_root@@Base+0x380>
  41fb0c:	cmp    edi,0x1869f
  41fb12:	jbe    41fc10 <flatcc_json_parser_struct_as_root@@Base+0x3d0>
  41fb18:	lea    rdx,[rsi+0x6]
  41fb1c:	mov    BYTE PTR [rsi+0x6],0x0
  41fb20:	mov    r8,r11
  41fb23:	mov    rbx,r9
  41fb26:	mov    esi,0x6
  41fb2b:	movzx  edi,WORD PTR [rbx]
  41fb2e:	lea    rax,[rdx-0x2]
  41fb32:	mov    WORD PTR [rdx-0x2],di
  41fb36:	add    ecx,ecx
  41fb38:	lea    rdx,[rax-0x2]
  41fb3c:	movzx  edi,WORD PTR [r8]
  41fb40:	mov    WORD PTR [rax-0x2],di
  41fb44:	movzx  eax,WORD PTR [r10+rcx*1]
  41fb49:	mov    WORD PTR [rdx-0x2],ax
  41fb4d:	mov    eax,esi
  41fb4f:	pop    rbx
  41fb50:	pop    rbp
  41fb51:	ret    
  41fb52:	nop    WORD PTR [rax+rax*1+0x0]
  41fb58:	mov    BYTE PTR [rsi+0x3],0x0
  41fb5c:	lea    rax,[rsi+0x3]
  41fb60:	mov    edi,edx
  41fb62:	movzx  ecx,WORD PTR [r8]
  41fb66:	mov    esi,0x3
  41fb6b:	lea    rdx,[rax-0x2]
  41fb6f:	mov    WORD PTR [rax-0x2],cx
  41fb73:	jmp    41faf6 <flatcc_json_parser_struct_as_root@@Base+0x2b6>
  41fb75:	nop    DWORD PTR [rax]
  41fb78:	mov    BYTE PTR [rsi+0xa],0x0
  41fb7c:	lea    rbp,[rsi+0x8]
  41fb80:	movzx  eax,WORD PTR [r9]
  41fb84:	mov    WORD PTR [rsi+0x8],ax
  41fb88:	mov    eax,ecx
  41fb8a:	mul    r8d
  41fb8d:	mov    eax,edi
  41fb8f:	mov    esi,0xa
  41fb94:	shr    edx,0x5
  41fb97:	imul   edx,edx,0x64
  41fb9a:	sub    ecx,edx
  41fb9c:	mov    edx,0x55e63b89
  41fba1:	mul    edx
  41fba3:	lea    r8d,[rcx+rcx*1]
  41fba7:	add    r8,r10
  41fbaa:	mov    ecx,edx
  41fbac:	shr    ecx,0x19
  41fbaf:	movzx  eax,WORD PTR [r11]
  41fbb3:	lea    rdx,[rbp-0x2]
  41fbb7:	mov    WORD PTR [rbp-0x2],ax
  41fbbb:	jmp    41fb2b <flatcc_json_parser_struct_as_root@@Base+0x2eb>
  41fbc0:	lea    rax,[rsi+0x7]
  41fbc4:	mov    BYTE PTR [rsi+0x7],0x0
  41fbc8:	mov    esi,0x7
  41fbcd:	jmp    41fa35 <flatcc_json_parser_struct_as_root@@Base+0x1f5>
  41fbd2:	nop    WORD PTR [rax+rax*1+0x0]
  41fbd8:	lea    rdx,[rsi+0x2]
  41fbdc:	mov    BYTE PTR [rsi+0x2],0x0
  41fbe0:	mov    ecx,edi
  41fbe2:	mov    esi,0x2
  41fbe7:	lea    r10,[rip+0x11632]        # 431220 <flatcc_builder_padding_base@@Base+0x2500>
  41fbee:	jmp    41face <flatcc_json_parser_struct_as_root@@Base+0x28e>
  41fbf3:	nop    DWORD PTR [rax+rax*1+0x0]
  41fbf8:	lea    rbp,[rsi+0x8]
  41fbfc:	mov    BYTE PTR [rsi+0x8],0x0
  41fc00:	mov    r8,rbx
  41fc03:	mov    esi,0x8
  41fc08:	mov    rbx,r11
  41fc0b:	mov    r11,r9
  41fc0e:	jmp    41fbaf <flatcc_json_parser_struct_as_root@@Base+0x36f>
  41fc10:	lea    rbx,[rsi+0x5]
  41fc14:	mov    BYTE PTR [rsi+0x5],0x0
  41fc18:	mov    r8,r11
  41fc1b:	mov    edi,ecx
  41fc1d:	mov    r11,r9
  41fc20:	mov    esi,0x5
  41fc25:	jmp    41fa5b <flatcc_json_parser_struct_as_root@@Base+0x21b>
  41fc2a:	nop    WORD PTR [rax+rax*1+0x0]
  41fc30:	cmp    rdi,0x3b9ac9ff
  41fc37:	jbe    41ff10 <flatcc_json_parser_struct_as_root@@Base+0x6d0>
  41fc3d:	mov    rdx,rdi
  41fc40:	shr    rdx,0x2
  41fc44:	mov    rax,rdx
  41fc47:	movabs r11,0x28f5c28f5c28f5c3
  41fc51:	mul    r11
  41fc54:	push   r12
  41fc56:	lea    r8,[rip+0x115c3]        # 431220 <flatcc_builder_padding_base@@Base+0x2500>
  41fc5d:	mov    rcx,rdx
  41fc60:	shr    rcx,0x2
  41fc64:	push   rbp
  41fc65:	imul   rax,rcx,0x64
  41fc69:	mov    r10,rcx
  41fc6c:	push   rbx
  41fc6d:	mov    rbx,rdi
  41fc70:	sub    rbx,rax
  41fc73:	movabs rax,0x9184e729fff
  41fc7d:	lea    r9,[r8+rbx*2]
  41fc81:	cmp    rdi,rax
  41fc84:	jbe    41fe48 <flatcc_json_parser_struct_as_root@@Base+0x608>
  41fc8a:	shr    rdx,0x4
  41fc8e:	mov    rax,rdx
  41fc91:	mul    r11
  41fc94:	mov    rax,rdi
  41fc97:	shr    rdx,0x2
  41fc9b:	imul   rdx,rdx,0x64
  41fc9f:	sub    rcx,rdx
  41fca2:	movabs rdx,0x346dc5d63886594b
  41fcac:	mul    rdx
  41fcaf:	lea    rbx,[r8+rcx*2]
  41fcb3:	mov    r10,rdx
  41fcb6:	shr    rdx,0xd
  41fcba:	mov    rax,rdx
  41fcbd:	mul    r11
  41fcc0:	shr    r10,0xb
  41fcc4:	mov    rax,r10
  41fcc7:	shr    rdx,0x2
  41fccb:	imul   rdx,rdx,0x64
  41fccf:	sub    rax,rdx
  41fcd2:	lea    rbp,[r8+rax*2]
  41fcd6:	movabs rdx,0x431bde82d7b634db
  41fce0:	mov    rax,rdi
  41fce3:	mul    rdx
  41fce6:	movabs rax,0x2386f26fc0ffff
  41fcf0:	mov    rcx,rdx
  41fcf3:	shr    rcx,0x12
  41fcf7:	cmp    rdi,rax
  41fcfa:	ja     41ff18 <flatcc_json_parser_struct_as_root@@Base+0x6d8>
  41fd00:	movabs rax,0x38d7ea4c67fff
  41fd0a:	cmp    rdi,rax
  41fd0d:	jbe    420030 <flatcc_json_parser_struct_as_root@@Base+0x7f0>
  41fd13:	mov    BYTE PTR [rsi+0x10],0x0
  41fd17:	mov    rdx,rbp
  41fd1a:	lea    rax,[rsi+0x10]
  41fd1e:	mov    rbp,r9
  41fd21:	mov    edi,0x10
  41fd26:	mov    r9,rdx
  41fd29:	movzx  edx,WORD PTR [rbp+0x0]
  41fd2d:	lea    r10,[rax-0x2]
  41fd31:	mov    WORD PTR [rax-0x2],dx
  41fd35:	mov    rax,rcx
  41fd38:	shr    rax,0x2
  41fd3c:	movabs rdx,0x28f5c28f5c28f5c3
  41fd46:	mul    rdx
  41fd49:	mov    rax,rdx
  41fd4c:	shr    rax,0x2
  41fd50:	imul   rdx,rax,0x64
  41fd54:	sub    rcx,rdx
  41fd57:	lea    r11,[r8+rcx*2]
  41fd5b:	mov    rcx,rax
  41fd5e:	movzx  eax,WORD PTR [rbx]
  41fd61:	lea    rdx,[r10-0x2]
  41fd65:	mov    WORD PTR [r10-0x2],ax
  41fd6a:	movzx  esi,WORD PTR [r9]
  41fd6e:	lea    rax,[rdx-0x2]
  41fd72:	mov    WORD PTR [rdx-0x2],si
  41fd76:	movzx  edx,WORD PTR [r11]
  41fd7a:	lea    rsi,[rax-0x2]
  41fd7e:	mov    WORD PTR [rax-0x2],dx
  41fd82:	mov    rdx,rcx
  41fd85:	shr    rdx,0x2
  41fd89:	movabs r9,0x28f5c28f5c28f5c3
  41fd93:	mov    rax,rdx
  41fd96:	mul    r9
  41fd99:	mov    rbx,rcx
  41fd9c:	mov    r10,rdx
  41fd9f:	shr    r10,0x2
  41fda3:	imul   rax,r10,0x64
  41fda7:	shr    rdx,0x4
  41fdab:	sub    rbx,rax
  41fdae:	movzx  eax,WORD PTR [r8+rbx*2]
  41fdb3:	mov    WORD PTR [rsi-0x2],ax
  41fdb7:	mov    rax,rdx
  41fdba:	mul    r9
  41fdbd:	shr    rdx,0x2
  41fdc1:	imul   rdx,rdx,0x64
  41fdc5:	sub    r10,rdx
  41fdc8:	movzx  eax,WORD PTR [r8+r10*2]
  41fdcd:	movabs rdx,0x346dc5d63886594b
  41fdd7:	mov    WORD PTR [rsi-0x4],ax
  41fddb:	mov    rax,rcx
  41fdde:	mul    rdx
  41fde1:	mov    r10,rdx
  41fde4:	shr    rdx,0xd
  41fde8:	mov    rax,rdx
  41fdeb:	mul    r9
  41fdee:	shr    r10,0xb
  41fdf2:	shr    rdx,0x2
  41fdf6:	imul   rdx,rdx,0x64
  41fdfa:	sub    r10,rdx
  41fdfd:	movzx  eax,WORD PTR [r8+r10*2]
  41fe02:	movabs rdx,0x431bde82d7b634db
  41fe0c:	mov    WORD PTR [rsi-0x6],ax
  41fe10:	mov    rax,rcx
  41fe13:	mul    rdx
  41fe16:	mov    rcx,rdx
  41fe19:	shr    rdx,0x14
  41fe1d:	mov    rax,rdx
  41fe20:	mul    r9
  41fe23:	shr    rcx,0x12
  41fe27:	shr    rdx,0x2
  41fe2b:	imul   rdx,rdx,0x64
  41fe2f:	sub    rcx,rdx
  41fe32:	movzx  eax,WORD PTR [r8+rcx*2]
  41fe37:	mov    WORD PTR [rsi-0x8],ax
  41fe3b:	mov    eax,edi
  41fe3d:	pop    rbx
  41fe3e:	pop    rbp
  41fe3f:	pop    r12
  41fe41:	ret    
  41fe42:	nop    WORD PTR [rax+rax*1+0x0]
  41fe48:	movabs rax,0x174876e7ff
  41fe52:	cmp    rdi,rax
  41fe55:	jbe    41ffd8 <flatcc_json_parser_struct_as_root@@Base+0x798>
  41fe5b:	shr    rdx,0x4
  41fe5f:	mov    rax,rdx
  41fe62:	mul    r11
  41fe65:	mov    rax,rcx
  41fe68:	shr    rdx,0x2
  41fe6c:	imul   rdx,rdx,0x64
  41fe70:	sub    rax,rdx
  41fe73:	lea    r11,[r8+rax*2]
  41fe77:	movabs rdx,0x346dc5d63886594b
  41fe81:	mov    rax,rdi
  41fe84:	mul    rdx
  41fe87:	movabs rax,0xe8d4a50fff
  41fe91:	mov    rcx,rdx
  41fe94:	shr    rcx,0xb
  41fe98:	cmp    rdi,rax
  41fe9b:	jbe    4200b0 <flatcc_json_parser_struct_as_root@@Base+0x870>
  41fea1:	mov    BYTE PTR [rsi+0xd],0x0
  41fea5:	lea    rax,[rsi+0xd]
  41fea9:	mov    edi,0xd
  41feae:	movzx  edx,WORD PTR [r9]
  41feb2:	lea    rbx,[rax-0x2]
  41feb6:	mov    WORD PTR [rax-0x2],dx
  41feba:	movzx  eax,WORD PTR [r11]
  41febe:	movabs rdx,0xcccccccccccccccd
  41fec8:	mov    WORD PTR [rbx-0x2],ax
  41fecc:	mov    rax,rcx
  41fecf:	mul    rdx
  41fed2:	lea    rsi,[rbx-0x3]
  41fed6:	shr    rdx,0x3
  41feda:	lea    rax,[rdx+rdx*4]
  41fede:	add    rax,rax
  41fee1:	sub    rcx,rax
  41fee4:	mov    rdx,r10
  41fee7:	lea    ecx,[rcx+0x30]
  41feea:	shr    rdx,0x3
  41feee:	mov    BYTE PTR [rbx-0x3],cl
  41fef1:	mov    rax,rdx
  41fef4:	movabs rcx,0x20c49ba5e353f7cf
  41fefe:	mul    rcx
  41ff01:	mov    rcx,rdx
  41ff04:	shr    rcx,0x4
  41ff08:	jmp    41fd82 <flatcc_json_parser_struct_as_root@@Base+0x542>
  41ff0d:	nop    DWORD PTR [rax]
  41ff10:	jmp    41f980 <flatcc_json_parser_struct_as_root@@Base+0x140>
  41ff15:	nop    DWORD PTR [rax]
  41ff18:	shr    rdx,0x14
  41ff1c:	mov    rax,rdx
  41ff1f:	mul    r11
  41ff22:	mov    rax,rcx
  41ff25:	shr    rdx,0x2
  41ff29:	imul   rdx,rdx,0x64
  41ff2d:	sub    rax,rdx
  41ff30:	lea    r12,[r8+rax*2]
  41ff34:	movabs rdx,0xabcc77118461cefd
  41ff3e:	mov    rax,rdi
  41ff41:	mul    rdx
  41ff44:	movabs rax,0xde0b6b3a763ffff
  41ff4e:	mov    r10,rdx
  41ff51:	shr    r10,0x1a
  41ff55:	cmp    rdi,rax
  41ff58:	jbe    420060 <flatcc_json_parser_struct_as_root@@Base+0x820>
  41ff5e:	shr    rdx,0x1c
  41ff62:	mov    rax,rdx
  41ff65:	mul    r11
  41ff68:	mov    rax,r10
  41ff6b:	shr    rdx,0x2
  41ff6f:	imul   rdx,rdx,0x64
  41ff73:	sub    rax,rdx
  41ff76:	lea    r11,[r8+rax*2]
  41ff7a:	movabs rdx,0xdbe6fecebdedd5bf
  41ff84:	mov    rax,rdi
  41ff87:	mul    rdx
  41ff8a:	movabs rax,0x8ac7230489e7ffff
  41ff94:	mov    rcx,rdx
  41ff97:	shr    rcx,0x21
  41ff9b:	cmp    rdi,rax
  41ff9e:	ja     420000 <flatcc_json_parser_struct_as_root@@Base+0x7c0>
  41ffa0:	mov    BYTE PTR [rsi+0x13],0x0
  41ffa4:	lea    rax,[rsi+0x11]
  41ffa8:	mov    edi,0x13
  41ffad:	movzx  edx,WORD PTR [r9]
  41ffb1:	mov    r9,r12
  41ffb4:	mov    WORD PTR [rsi+0x11],dx
  41ffb8:	movzx  esi,WORD PTR [rbx]
  41ffbb:	lea    rdx,[rax-0x2]
  41ffbf:	mov    WORD PTR [rax-0x2],si
  41ffc3:	movzx  esi,WORD PTR [rbp+0x0]
  41ffc7:	lea    rax,[rdx-0x2]
  41ffcb:	mov    WORD PTR [rdx-0x2],si
  41ffcf:	jmp    41feae <flatcc_json_parser_struct_as_root@@Base+0x66e>
  41ffd4:	nop    DWORD PTR [rax+0x0]
  41ffd8:	movabs rax,0x2540be3ff
  41ffe2:	cmp    rdi,rax
  41ffe5:	ja     420090 <flatcc_json_parser_struct_as_root@@Base+0x850>
  41ffeb:	lea    rax,[rsi+0xa]
  41ffef:	mov    BYTE PTR [rsi+0xa],0x0
  41fff3:	mov    r11,r9
  41fff6:	mov    edi,0xa
  41fffb:	jmp    41fd76 <flatcc_json_parser_struct_as_root@@Base+0x536>
  420000:	mov    BYTE PTR [rsi+0x14],0x0
  420004:	lea    rdx,[rsi+0x12]
  420008:	mov    edi,0x14
  42000d:	movzx  eax,WORD PTR [r9]
  420011:	mov    r9,r11
  420014:	mov    WORD PTR [rsi+0x12],ax
  420018:	mov    rsi,rbx
  42001b:	mov    rbx,r12
  42001e:	movzx  esi,WORD PTR [rsi]
  420021:	lea    rax,[rdx-0x2]
  420025:	mov    WORD PTR [rdx-0x2],si
  420029:	jmp    41fd29 <flatcc_json_parser_struct_as_root@@Base+0x4e9>
  42002e:	xchg   ax,ax
  420030:	movabs rax,0x5af3107a3fff
  42003a:	cmp    rdi,rax
  42003d:	jbe    4200f8 <flatcc_json_parser_struct_as_root@@Base+0x8b8>
  420043:	mov    r11,rbp
  420046:	lea    rdx,[rsi+0xf]
  42004a:	mov    rbp,r9
  42004d:	mov    BYTE PTR [rsi+0xf],0x0
  420051:	mov    r9,rbx
  420054:	mov    edi,0xf
  420059:	jmp    41ffc3 <flatcc_json_parser_struct_as_root@@Base+0x783>
  42005e:	xchg   ax,ax
  420060:	movabs rax,0x16345785d89ffff
  42006a:	cmp    rdi,rax
  42006d:	jbe    4200c8 <flatcc_json_parser_struct_as_root@@Base+0x888>
  42006f:	mov    rax,rbp
  420072:	lea    rdx,[rsi+0x12]
  420076:	mov    BYTE PTR [rsi+0x12],0x0
  42007a:	mov    rbp,rbx
  42007d:	mov    rsi,r9
  420080:	mov    rcx,r10
  420083:	mov    rbx,rax
  420086:	mov    r9,r12
  420089:	mov    edi,0x12
  42008e:	jmp    42001e <flatcc_json_parser_struct_as_root@@Base+0x7de>
  420090:	mov    r10,rdi
  420093:	lea    rbx,[rsi+0xb]
  420097:	mov    BYTE PTR [rsi+0xb],0x0
  42009b:	mov    r11,r9
  42009e:	mov    edi,0xb
  4200a3:	jmp    41feba <flatcc_json_parser_struct_as_root@@Base+0x67a>
  4200a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4200b0:	lea    rdx,[rsi+0xc]
  4200b4:	mov    BYTE PTR [rsi+0xc],0x0
  4200b8:	mov    edi,0xc
  4200bd:	jmp    41fd6a <flatcc_json_parser_struct_as_root@@Base+0x52a>
  4200c2:	nop    WORD PTR [rax+rax*1+0x0]
  4200c8:	mov    rdx,r10
  4200cb:	mov    r10,rcx
  4200ce:	mov    rcx,rdx
  4200d1:	mov    rdx,rbx
  4200d4:	lea    rax,[rsi+0x11]
  4200d8:	mov    rbx,r9
  4200db:	mov    BYTE PTR [rsi+0x11],0x0
  4200df:	mov    r9,rbp
  4200e2:	mov    r11,r12
  4200e5:	mov    rbp,rdx
  4200e8:	mov    edi,0x11
  4200ed:	jmp    41ffb8 <flatcc_json_parser_struct_as_root@@Base+0x778>
  4200f2:	nop    WORD PTR [rax+rax*1+0x0]
  4200f8:	mov    rax,rbx
  4200fb:	lea    r10,[rsi+0xe]
  4200ff:	mov    rbx,r9
  420102:	mov    BYTE PTR [rsi+0xe],0x0
  420106:	mov    r11,rbp
  420109:	mov    r9,rax
  42010c:	mov    edi,0xe
  420111:	jmp    41fd5e <flatcc_json_parser_struct_as_root@@Base+0x51e>
  420116:	nop    WORD PTR cs:[rax+rax*1+0x0]
  420120:	push   r12
  420122:	mov    r11,rdx
  420125:	push   rbp
  420126:	push   rbx
  420127:	mov    rbp,QWORD PTR [rsp+0x20]
  42012c:	sub    r11,rbp
  42012f:	cmp    r11,r8
  420132:	jbe    420200 <flatcc_json_parser_struct_as_root@@Base+0x9c0>
  420138:	mov    rax,rcx
  42013b:	sub    rax,r8
  42013e:	cmp    r9,rax
  420141:	ja     420211 <flatcc_json_parser_struct_as_root@@Base+0x9d1>
  420147:	mov    rax,rcx
  42014a:	sub    rax,r9
  42014d:	movsxd r10,esi
  420150:	sub    rax,r8
  420153:	lea    rbx,[rdi+r10*1-0x1]
  420158:	nop    DWORD PTR [rax+rax*1+0x0]
  420160:	lea    r10,[r9+r8*1]
  420164:	cmp    r10,r11
  420167:	jb     4201c8 <flatcc_json_parser_struct_as_root@@Base+0x988>
  420169:	mov    rax,rbp
  42016c:	sub    rax,rdx
  42016f:	sub    r11,r8
  420172:	add    rax,r10
  420175:	cmp    r11,rax
  420178:	jb     420200 <flatcc_json_parser_struct_as_root@@Base+0x9c0>
  42017e:	movsxd rsi,esi
  420181:	add    rdx,rbp
  420184:	dec    BYTE PTR [rdi+rsi*1-0x1]
  420188:	cmp    rdx,r10
  42018b:	jbe    4201b0 <flatcc_json_parser_struct_as_root@@Base+0x970>
  42018d:	mov    rax,rcx
  420190:	sub    rax,r10
  420193:	cmp    rax,r9
  420196:	jb     4201b0 <flatcc_json_parser_struct_as_root@@Base+0x970>
  420198:	add    r9,r10
  42019b:	cmp    r9,rdx
  42019e:	jb     4201ba <flatcc_json_parser_struct_as_root@@Base+0x97a>
  4201a0:	mov    rax,rdx
  4201a3:	sub    rax,r10
  4201a6:	sub    r9,rdx
  4201a9:	cmp    rax,r9
  4201ac:	ja     4201ba <flatcc_json_parser_struct_as_root@@Base+0x97a>
  4201ae:	xchg   ax,ax
  4201b0:	lea    rax,[rbp+rbp*1+0x0]
  4201b5:	cmp    rax,r10
  4201b8:	jbe    4201e0 <flatcc_json_parser_struct_as_root@@Base+0x9a0>
  4201ba:	pop    rbx
  4201bb:	pop    rbp
  4201bc:	xor    eax,eax
  4201be:	pop    r12
  4201c0:	ret    
  4201c1:	nop    DWORD PTR [rax+0x0]
  4201c8:	mov    r12,rax
  4201cb:	dec    BYTE PTR [rbx]
  4201cd:	sub    r12,r9
  4201d0:	mov    r8,r10
  4201d3:	cmp    rax,r9
  4201d6:	jb     4201b0 <flatcc_json_parser_struct_as_root@@Base+0x970>
  4201d8:	mov    rax,r12
  4201db:	jmp    420160 <flatcc_json_parser_struct_as_root@@Base+0x920>
  4201dd:	nop    DWORD PTR [rax]
  4201e0:	shl    rbp,0x2
  4201e4:	sub    rcx,rbp
  4201e7:	mov    eax,0x1
  4201ec:	cmp    rcx,r10
  4201ef:	jb     4201ba <flatcc_json_parser_struct_as_root@@Base+0x97a>
  4201f1:	pop    rbx
  4201f2:	pop    rbp
  4201f3:	pop    r12
  4201f5:	ret    
  4201f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  420200:	mov    r10,r8
  420203:	add    rdx,rbp
  420206:	cmp    rdx,r10
  420209:	ja     42018d <flatcc_json_parser_struct_as_root@@Base+0x94d>
  42020f:	jmp    4201b0 <flatcc_json_parser_struct_as_root@@Base+0x970>
  420211:	mov    r10,r8
  420214:	jmp    4201b0 <flatcc_json_parser_struct_as_root@@Base+0x970>
  420216:	nop    WORD PTR cs:[rax+rax*1+0x0]
  420220:	mov    r9,rsi
  420223:	test   edi,edi
  420225:	jns    420230 <flatcc_json_parser_struct_as_root@@Base+0x9f0>
  420227:	mov    BYTE PTR [rsi],0x2d
  42022a:	lea    r9,[rsi+0x1]
  42022e:	neg    edi
  420230:	mov    r8,r9
  420233:	mov    ecx,0xcccccccd
  420238:	nop    DWORD PTR [rax+rax*1+0x0]
  420240:	mov    eax,edi
  420242:	mul    ecx
  420244:	inc    r8
  420247:	shr    edx,0x3
  42024a:	lea    eax,[rdx+rdx*4]
  42024d:	add    eax,eax
  42024f:	sub    edi,eax
  420251:	add    edi,0x30
  420254:	mov    BYTE PTR [r8-0x1],dil
  420258:	mov    edi,edx
  42025a:	test   edx,edx
  42025c:	jne    420240 <flatcc_json_parser_struct_as_root@@Base+0xa00>
  42025e:	mov    rdx,r8
  420261:	sub    rdx,r9
  420264:	mov    r10d,edx
  420267:	shr    r10d,0x1f
  42026b:	add    r10d,edx
  42026e:	mov    BYTE PTR [r8],0x0
  420272:	sar    r10d,1
  420275:	cmp    edx,0x1
  420278:	jle    4202a1 <flatcc_json_parser_struct_as_root@@Base+0xa61>
  42027a:	dec    edx
  42027c:	movsxd rdx,edx
  42027f:	add    rdx,r9
  420282:	xor    ecx,ecx
  420284:	nop    DWORD PTR [rax+0x0]
  420288:	movzx  edi,BYTE PTR [rdx]
  42028b:	movzx  eax,BYTE PTR [r9+rcx*1]
  420290:	mov    BYTE PTR [r9+rcx*1],dil
  420294:	inc    rcx
  420297:	mov    BYTE PTR [rdx],al
  420299:	dec    rdx
  42029c:	cmp    r10d,ecx
  42029f:	jg     420288 <flatcc_json_parser_struct_as_root@@Base+0xa48>
  4202a1:	mov    rax,r8
  4202a4:	sub    rax,rsi
  4202a7:	ret    
  4202a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4202b0:	endbr64 
  4202b4:	mov    rax,QWORD PTR [rdi+0x28]
  4202b8:	cmp    rax,QWORD PTR [rdi+0x20]
  4202bc:	jb     4202dd <flatcc_json_parser_struct_as_root@@Base+0xa9d>
  4202be:	mov    edx,DWORD PTR [rdi+0x3c]
  4202c1:	test   edx,edx
  4202c3:	jne    4202cc <flatcc_json_parser_struct_as_root@@Base+0xa8c>
  4202c5:	mov    DWORD PTR [rdi+0x3c],0x3
  4202cc:	mov    rdx,QWORD PTR [rdi]
  4202cf:	mov    QWORD PTR [rdi+0x28],rdx
  4202d3:	sub    rax,rdx
  4202d6:	add    QWORD PTR [rdi+0x18],rax
  4202da:	mov    rax,rdx
  4202dd:	mov    BYTE PTR [rax],0x0
  4202e0:	ret    
  4202e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4202ec:	nop    DWORD PTR [rax+0x0]
  4202f0:	push   r13
  4202f2:	mov    r13,rsi
  4202f5:	push   r12
  4202f7:	mov    r12,rdx
  4202fa:	push   rbp
  4202fb:	mov    rbp,rdi
  4202fe:	push   rbx
  4202ff:	sub    rsp,0x8
  420303:	mov    rdi,QWORD PTR [rdi+0x28]
  420307:	mov    rbx,QWORD PTR [rbp+0x20]
  42030b:	cmp    rdi,rbx
  42030e:	jb     420320 <flatcc_json_parser_struct_as_root@@Base+0xae0>
  420310:	mov    rdi,rbp
  420313:	xor    esi,esi
  420315:	call   QWORD PTR [rbp+0x48]
  420318:	mov    rbx,QWORD PTR [rbp+0x20]
  42031c:	mov    rdi,QWORD PTR [rbp+0x28]
  420320:	sub    rbx,rdi
  420323:	cmp    rbx,r12
  420326:	jae    42035d <flatcc_json_parser_struct_as_root@@Base+0xb1d>
  420328:	nop    DWORD PTR [rax+rax*1+0x0]
  420330:	mov    rdx,rbx
  420333:	mov    rsi,r13
  420336:	call   406210 <memcpy@plt>
  42033b:	add    QWORD PTR [rbp+0x28],rbx
  42033f:	mov    rdi,rbp
  420342:	xor    esi,esi
  420344:	add    r13,rbx
  420347:	call   QWORD PTR [rbp+0x48]
  42034a:	sub    r12,rbx
  42034d:	mov    rdi,QWORD PTR [rbp+0x28]
  420351:	mov    rbx,QWORD PTR [rbp+0x20]
  420355:	sub    rbx,rdi
  420358:	cmp    r12,rbx
  42035b:	ja     420330 <flatcc_json_parser_struct_as_root@@Base+0xaf0>
  42035d:	mov    rdx,r12
  420360:	mov    rsi,r13
  420363:	call   406210 <memcpy@plt>
  420368:	add    QWORD PTR [rbp+0x28],r12
  42036c:	add    rsp,0x8
  420370:	pop    rbx
  420371:	pop    rbp
  420372:	pop    r12
  420374:	pop    r13
  420376:	ret    
  420377:	nop    WORD PTR [rax+rax*1+0x0]
  420380:	push   r12
  420382:	mov    r12,rsi
  420385:	push   rbp
  420386:	mov    rbp,rdi
  420389:	push   rbx
  42038a:	mov    rbx,QWORD PTR [rbp+0x20]
  42038e:	mov    rdi,QWORD PTR [rdi+0x28]
  420392:	cmp    rdi,rbx
  420395:	jb     4203a7 <flatcc_json_parser_struct_as_root@@Base+0xb67>
  420397:	mov    rdi,rbp
  42039a:	xor    esi,esi
  42039c:	call   QWORD PTR [rbp+0x48]
  42039f:	mov    rbx,QWORD PTR [rbp+0x20]
  4203a3:	mov    rdi,QWORD PTR [rbp+0x28]
  4203a7:	sub    rbx,rdi
  4203aa:	cmp    rbx,r12
  4203ad:	jae    4203dc <flatcc_json_parser_struct_as_root@@Base+0xb9c>
  4203af:	nop
  4203b0:	mov    rdx,rbx
  4203b3:	mov    esi,0x20
  4203b8:	call   4061c0 <memset@plt>
  4203bd:	add    QWORD PTR [rbp+0x28],rbx
  4203c1:	mov    rdi,rbp
  4203c4:	xor    esi,esi
  4203c6:	sub    r12,rbx
  4203c9:	call   QWORD PTR [rbp+0x48]
  4203cc:	mov    rdi,QWORD PTR [rbp+0x28]
  4203d0:	mov    rbx,QWORD PTR [rbp+0x20]
  4203d4:	sub    rbx,rdi
  4203d7:	cmp    r12,rbx
  4203da:	ja     4203b0 <flatcc_json_parser_struct_as_root@@Base+0xb70>
  4203dc:	mov    rdx,r12
  4203df:	mov    esi,0x20
  4203e4:	call   4061c0 <memset@plt>
  4203e9:	pop    rbx
  4203ea:	add    QWORD PTR [rbp+0x28],r12
  4203ee:	pop    rbp
  4203ef:	pop    r12
  4203f1:	ret    
  4203f2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4203fd:	nop    DWORD PTR [rax]
  420400:	push   rbp
  420401:	push   rbx
  420402:	sub    rsp,0x8
  420406:	movzx  ebp,BYTE PTR [rdi+0x31]
  42040a:	mov    rax,QWORD PTR [rdi+0x28]
  42040e:	imul   ebp,DWORD PTR [rdi+0x38]
  420412:	movsxd rbp,ebp
  420415:	lea    rdx,[rax+rbp*1]
  420419:	cmp    QWORD PTR [rdi+0x20],rdx
  42041d:	jae    420430 <flatcc_json_parser_struct_as_root@@Base+0xbf0>
  42041f:	add    rsp,0x8
  420423:	pop    rbx
  420424:	mov    rsi,rbp
  420427:	pop    rbp
  420428:	jmp    420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42042d:	nop    DWORD PTR [rax]
  420430:	mov    rbx,rdi
  420433:	mov    rdx,rbp
  420436:	mov    esi,0x20
  42043b:	mov    rdi,rax
  42043e:	call   4061c0 <memset@plt>
  420443:	add    QWORD PTR [rbx+0x28],rbp
  420447:	add    rsp,0x8
  42044b:	pop    rbx
  42044c:	pop    rbp
  42044d:	ret    
  42044e:	xchg   ax,ax
  420450:	endbr64 
  420454:	push   rbp
  420455:	push   rbx
  420456:	mov    rbx,rdi
  420459:	sub    rsp,0x8
  42045d:	mov    rdx,QWORD PTR [rdi+0x28]
  420461:	mov    rcx,QWORD PTR [rdi+0x40]
  420465:	mov    rdi,QWORD PTR [rdi]
  420468:	test   esi,esi
  42046a:	jne    420475 <flatcc_json_parser_struct_as_root@@Base+0xc35>
  42046c:	mov    rax,QWORD PTR [rbx+0x20]
  420470:	cmp    rax,rdx
  420473:	jbe    4204a0 <flatcc_json_parser_struct_as_root@@Base+0xc60>
  420475:	sub    rdx,rdi
  420478:	mov    rbp,rdx
  42047b:	mov    rsi,rbp
  42047e:	mov    edx,0x1
  420483:	call   406250 <fwrite@plt>
  420488:	mov    rdx,QWORD PTR [rbx]
  42048b:	add    QWORD PTR [rbx+0x18],rbp
  42048f:	mov    QWORD PTR [rbx+0x28],rdx
  420493:	mov    BYTE PTR [rdx],0x0
  420496:	add    rsp,0x8
  42049a:	pop    rbx
  42049b:	pop    rbp
  42049c:	ret    
  42049d:	nop    DWORD PTR [rax]
  4204a0:	sub    rdx,rax
  4204a3:	mov    rsi,QWORD PTR [rbx+0x10]
  4204a7:	mov    rbp,rdx
  4204aa:	mov    edx,0x1
  4204af:	call   406250 <fwrite@plt>
  4204b4:	mov    rdi,QWORD PTR [rbx]
  4204b7:	mov    rsi,QWORD PTR [rbx+0x10]
  4204bb:	mov    rdx,rbp
  4204be:	add    rsi,rdi
  4204c1:	call   406210 <memcpy@plt>
  4204c6:	mov    rdx,QWORD PTR [rbx]
  4204c9:	mov    rax,QWORD PTR [rbx+0x10]
  4204cd:	add    rdx,rbp
  4204d0:	mov    QWORD PTR [rbx+0x28],rdx
  4204d4:	add    QWORD PTR [rbx+0x18],rax
  4204d8:	mov    BYTE PTR [rdx],0x0
  4204db:	add    rsp,0x8
  4204df:	pop    rbx
  4204e0:	pop    rbp
  4204e1:	ret    
  4204e2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4204ed:	nop    DWORD PTR [rax]
  4204f0:	endbr64 
  4204f4:	mov    rax,QWORD PTR [rdi+0x28]
  4204f8:	mov    rdx,QWORD PTR [rdi]
  4204fb:	mov    BYTE PTR [rax],0x0
  4204fe:	mov    rsi,QWORD PTR [rdi+0x20]
  420502:	cmp    QWORD PTR [rdi+0x28],rsi
  420506:	jae    420510 <flatcc_json_parser_struct_as_root@@Base+0xcd0>
  420508:	ret    
  420509:	nop    DWORD PTR [rax+0x0]
  420510:	push   rbp
  420511:	sub    rax,rdx
  420514:	mov    rbp,rax
  420517:	push   rbx
  420518:	mov    rbx,rdi
  42051b:	sub    rsp,0x8
  42051f:	mov    rax,QWORD PTR [rdi+0x8]
  420523:	mov    rdi,QWORD PTR [rdi]
  420526:	lea    rsi,[rax+rax*1]
  42052a:	call   406230 <realloc@plt>
  42052f:	test   rax,rax
  420532:	je     420568 <flatcc_json_parser_struct_as_root@@Base+0xd28>
  420534:	mov    rcx,QWORD PTR [rbx+0x8]
  420538:	mov    QWORD PTR [rbx],rax
  42053b:	add    rcx,rcx
  42053e:	mov    QWORD PTR [rbx+0x8],rcx
  420542:	sub    rcx,0x40
  420546:	lea    rdx,[rax+rbp*1]
  42054a:	add    rax,rcx
  42054d:	mov    QWORD PTR [rbx+0x10],rcx
  420551:	mov    QWORD PTR [rbx+0x28],rdx
  420555:	mov    QWORD PTR [rbx+0x20],rax
  420559:	mov    BYTE PTR [rdx],0x0
  42055c:	add    rsp,0x8
  420560:	pop    rbx
  420561:	pop    rbp
  420562:	ret    
  420563:	nop    DWORD PTR [rax+rax*1+0x0]
  420568:	mov    eax,DWORD PTR [rbx+0x3c]
  42056b:	test   eax,eax
  42056d:	jne    420576 <flatcc_json_parser_struct_as_root@@Base+0xd36>
  42056f:	mov    DWORD PTR [rbx+0x3c],0x3
  420576:	mov    rdx,QWORD PTR [rbx]
  420579:	add    QWORD PTR [rbx+0x18],rbp
  42057d:	mov    QWORD PTR [rbx+0x28],rdx
  420581:	mov    BYTE PTR [rdx],0x0
  420584:	add    rsp,0x8
  420588:	pop    rbx
  420589:	pop    rbp
  42058a:	ret    
  42058b:	nop    DWORD PTR [rax+rax*1+0x0]
  420590:	test   edi,edi
  420592:	je     4205a8 <flatcc_json_parser_struct_as_root@@Base+0xd68>
  420594:	mov    DWORD PTR [rsi],0x65757274
  42059a:	mov    BYTE PTR [rsi+0x4],0x0
  42059e:	mov    eax,0x4
  4205a3:	ret    
  4205a4:	nop    DWORD PTR [rax+0x0]
  4205a8:	mov    eax,0x65
  4205ad:	mov    WORD PTR [rsi+0x4],ax
  4205b1:	mov    DWORD PTR [rsi],0x736c6166
  4205b7:	mov    eax,0x5
  4205bc:	ret    
  4205bd:	nop    DWORD PTR [rax]
  4205c0:	cmp    dil,0x63
  4205c4:	ja     4205e0 <flatcc_json_parser_struct_as_root@@Base+0xda0>
  4205c6:	cmp    dil,0x9
  4205ca:	ja     420628 <flatcc_json_parser_struct_as_root@@Base+0xde8>
  4205cc:	add    edi,0x30
  4205cf:	mov    BYTE PTR [rsi+0x1],0x0
  4205d3:	mov    BYTE PTR [rsi],dil
  4205d6:	mov    eax,0x1
  4205db:	ret    
  4205dc:	nop    DWORD PTR [rax+0x0]
  4205e0:	movzx  eax,dil
  4205e4:	lea    edx,[rax+rax*4]
  4205e7:	lea    edx,[rax+rdx*8]
  4205ea:	mov    ecx,0x64
  4205ef:	shr    dx,0xc
  4205f3:	mov    eax,ecx
  4205f5:	imul   eax,edx
  4205f8:	mov    BYTE PTR [rsi+0x3],0x0
  4205fc:	add    edx,0x30
  4205ff:	sub    edi,eax
  420601:	add    rdi,rdi
  420604:	and    edi,0x1fe
  42060a:	lea    rax,[rip+0x10c0f]        # 431220 <flatcc_builder_padding_base@@Base+0x2500>
  420611:	movzx  eax,WORD PTR [rax+rdi*1]
  420615:	mov    BYTE PTR [rsi],dl
  420617:	mov    WORD PTR [rsi+0x1],ax
  42061b:	mov    eax,0x3
  420620:	ret    
  420621:	nop    DWORD PTR [rax+0x0]
  420628:	mov    BYTE PTR [rsi+0x2],0x0
  42062c:	add    rdi,rdi
  42062f:	and    edi,0x1fe
  420635:	lea    rax,[rip+0x10be4]        # 431220 <flatcc_builder_padding_base@@Base+0x2500>
  42063c:	movzx  eax,WORD PTR [rax+rdi*1]
  420640:	mov    WORD PTR [rsi],ax
  420643:	mov    eax,0x2
  420648:	ret    
  420649:	nop    DWORD PTR [rax+0x0]
  420650:	mov    r9,rdi
  420653:	mov    eax,edx
  420655:	shr    r9,0x20
  420659:	mov    edi,edi
  42065b:	mov    r11,rdi
  42065e:	mov    r8,r9
  420661:	imul   rdi,rax
  420665:	imul   r8,rax
  420669:	mov    r10,rdx
  42066c:	shr    r10,0x20
  420670:	imul   r11,r10
  420674:	mov    rax,rdi
  420677:	shr    rax,0x20
  42067b:	mov    edi,r8d
  42067e:	add    rax,rdi
  420681:	mov    edi,0x80000000
  420686:	mov    edx,r11d
  420689:	add    rax,rdi
  42068c:	add    rax,rdx
  42068f:	imul   r9,r10
  420693:	mov    rdx,r8
  420696:	shr    rdx,0x20
  42069a:	shr    r11,0x20
  42069e:	add    rdx,r11
  4206a1:	lea    r8,[rdx+r9*1]
  4206a5:	shr    rax,0x20
  4206a9:	add    rax,r8
  4206ac:	mov    QWORD PTR [rsp-0x18],rax
  4206b1:	mov    QWORD PTR [rsp-0x10],0x0
  4206ba:	lea    eax,[rsi+rcx*1+0x40]
  4206be:	vmovdqa xmm1,XMMWORD PTR [rsp-0x18]
  4206c4:	vpinsrd xmm0,xmm1,eax,0x2
  4206ca:	vmovq  rax,xmm0
  4206cf:	vpextrq rdx,xmm0,0x1
  4206d5:	ret    
  4206d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4206e0:	sub    rsp,0x18
  4206e4:	mov    QWORD PTR [rsp+0x8],rsi
  4206e9:	mov    QWORD PTR [rsp],rdi
  4206ed:	mov    ecx,DWORD PTR [rsp+0x8]
  4206f1:	test   rdi,rdi
  4206f4:	je     420758 <flatcc_json_parser_struct_as_root@@Base+0xf18>
  4206f6:	mov    rax,rdi
  4206f9:	movabs rdi,0xffc0000000000000
  420703:	lea    edx,[rcx-0xa]
  420706:	mov    rsi,rdi
  420709:	test   rax,rdi
  42070c:	jne    42071e <flatcc_json_parser_struct_as_root@@Base+0xede>
  42070e:	xchg   ax,ax
  420710:	shl    rax,0xa
  420714:	mov    ecx,edx
  420716:	sub    edx,0xa
  420719:	test   rax,rsi
  42071c:	je     420710 <flatcc_json_parser_struct_as_root@@Base+0xed0>
  42071e:	test   rax,rax
  420721:	js     420739 <flatcc_json_parser_struct_as_root@@Base+0xef9>
  420723:	lea    edx,[rcx-0x1]
  420726:	nop    WORD PTR cs:[rax+rax*1+0x0]
  420730:	mov    ecx,edx
  420732:	dec    edx
  420734:	add    rax,rax
  420737:	jns    420730 <flatcc_json_parser_struct_as_root@@Base+0xef0>
  420739:	mov    QWORD PTR [rsp],rax
  42073d:	vmovdqa xmm1,XMMWORD PTR [rsp]
  420742:	add    rsp,0x18
  420746:	vpinsrd xmm0,xmm1,ecx,0x2
  42074c:	vmovq  rax,xmm0
  420751:	vpextrq rdx,xmm0,0x1
  420757:	ret    
  420758:	lea    rcx,[rip+0x104b1]        # 430c10 <flatcc_builder_padding_base@@Base+0x1ef0>
  42075f:	mov    edx,0x104
  420764:	lea    rsi,[rip+0xece5]        # 42f450 <flatcc_builder_padding_base@@Base+0x730>
  42076b:	lea    rdi,[rip+0xeec2]        # 42f634 <flatcc_builder_padding_base@@Base+0x914>
  420772:	call   4061b0 <__assert_fail@plt>
  420777:	nop    WORD PTR [rax+rax*1+0x0]
  420780:	push   rax
  420781:	pop    rax
  420782:	lea    rcx,[rip+0x10467]        # 430bf0 <flatcc_builder_padding_base@@Base+0x1ed0>
  420789:	mov    edx,0xef
  42078e:	lea    rsi,[rip+0xecbb]        # 42f450 <flatcc_builder_padding_base@@Base+0x730>
  420795:	lea    rdi,[rip+0x10315]        # 430ab1 <flatcc_builder_padding_base@@Base+0x1d91>
  42079c:	sub    rsp,0x8
  4207a0:	call   4061b0 <__assert_fail@plt>
  4207a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4207b0:	push   r15
  4207b2:	push   r14
  4207b4:	push   r13
  4207b6:	push   r12
  4207b8:	push   rbp
  4207b9:	push   rbx
  4207ba:	sub    rsp,0x58
  4207be:	test   rdi,rdi
  4207c1:	je     420ecc <flatcc_json_parser_struct_as_root@@Base+0x168c>
  4207c7:	vmovq  r8,xmm0
  4207cc:	lea    rdx,[r8+r8*1]
  4207d0:	movabs rax,0xffe0000000000000
  4207da:	mov    r10,rdi
  4207dd:	cmp    rdx,rax
  4207e0:	ja     420c68 <flatcc_json_parser_struct_as_root@@Base+0x1428>
  4207e6:	mov    rbx,rdi
  4207e9:	test   r8,r8
  4207ec:	js     420c28 <flatcc_json_parser_struct_as_root@@Base+0x13e8>
  4207f2:	test   r8,r8
  4207f5:	je     420c45 <flatcc_json_parser_struct_as_root@@Base+0x1405>
  4207fb:	movabs r13,0x7ff0000000000000
  420805:	cmp    r8,r13
  420808:	je     420ca0 <flatcc_json_parser_struct_as_root@@Base+0x1460>
  42080e:	vmovq  r12,xmm0
  420813:	movabs rcx,0xfffffffffffff
  42081d:	and    rcx,r12
  420820:	and    r13,r12
  420823:	mov    QWORD PTR [rsp+0x48],r13
  420828:	je     420cc0 <flatcc_json_parser_struct_as_root@@Base+0x1480>
  42082e:	shr    r12,0x34
  420832:	and    r12d,0x7ff
  420839:	movabs r14,0x10000000000000
  420843:	lea    r11d,[r12-0x433]
  42084b:	add    r14,rcx
  42084e:	sub    r12d,0x434
  420855:	mov    QWORD PTR [rsp+0x8],0x0
  42085e:	mov    QWORD PTR [rsp],r14
  420862:	vmovsd QWORD PTR [rsp+0x28],xmm0
  420868:	mov    QWORD PTR [rsp+0x40],r10
  42086d:	vmovdqa xmm5,XMMWORD PTR [rsp]
  420872:	mov    QWORD PTR [rsp+0x38],rcx
  420877:	vpinsrd xmm4,xmm5,r11d,0x2
  42087d:	vmovaps XMMWORD PTR [rsp],xmm4
  420882:	mov    rsi,QWORD PTR [rsp+0x8]
  420887:	mov    rdi,QWORD PTR [rsp]
  42088b:	mov    DWORD PTR [rsp+0x30],r11d
  420890:	lea    r13,[r14+r14*1]
  420894:	call   4206e0 <flatcc_json_parser_struct_as_root@@Base+0xea0>
  420899:	mov    QWORD PTR [rsp],rax
  42089d:	lea    rax,[r13+0x1]
  4208a1:	mov    QWORD PTR [rsp+0x18],0x0
  4208aa:	mov    QWORD PTR [rsp+0x10],rax
  4208af:	mov    r15d,edx
  4208b2:	vmovdqa xmm7,XMMWORD PTR [rsp+0x10]
  4208b8:	vpinsrd xmm6,xmm7,r12d,0x2
  4208be:	vmovaps XMMWORD PTR [rsp+0x10],xmm6
  4208c4:	mov    rsi,QWORD PTR [rsp+0x18]
  4208c9:	mov    rdi,QWORD PTR [rsp+0x10]
  4208ce:	call   4206e0 <flatcc_json_parser_struct_as_root@@Base+0xea0>
  4208d3:	vmovsd xmm0,QWORD PTR [rsp+0x28]
  4208d9:	vxorpd xmm2,xmm2,xmm2
  4208dd:	vcomisd xmm0,xmm2
  4208e1:	mov    r8,rax
  4208e4:	mov    ebp,edx
  4208e6:	jbe    420eeb <flatcc_json_parser_struct_as_root@@Base+0x16ab>
  4208ec:	vmovsd xmm1,QWORD PTR [rip+0xff9c]        # 430890 <flatcc_builder_padding_base@@Base+0x1b70>
  4208f4:	mov    r11d,DWORD PTR [rsp+0x30]
  4208f9:	vcomisd xmm1,xmm0
  4208fd:	mov    rcx,QWORD PTR [rsp+0x38]
  420902:	mov    r10,QWORD PTR [rsp+0x40]
  420907:	jb     420eeb <flatcc_json_parser_struct_as_root@@Base+0x16ab>
  42090d:	test   rcx,rcx
  420910:	jne    42091e <flatcc_json_parser_struct_as_root@@Base+0x10de>
  420912:	cmp    QWORD PTR [rsp+0x48],0x0
  420918:	jne    420dd0 <flatcc_json_parser_struct_as_root@@Base+0x1590>
  42091e:	lea    r9,[r13-0x1]
  420922:	mov    eax,0xffffffc3
  420927:	sub    eax,r15d
  42092a:	vxorpd xmm1,xmm1,xmm1
  42092e:	vcvtsi2sd xmm1,xmm1,eax
  420932:	sub    r12d,ebp
  420935:	shlx   r12,r9,r12
  42093a:	vmulsd xmm1,xmm1,QWORD PTR [rip+0x109ae]        # 4312f0 <flatcc_builder_padding_base@@Base+0x25d0>
  420942:	vcomisd xmm2,xmm1
  420946:	vcvttsd2si edx,xmm1
  42094a:	ja     420968 <flatcc_json_parser_struct_as_root@@Base+0x1128>
  42094c:	vxorpd xmm3,xmm3,xmm3
  420950:	vcvtsi2sd xmm3,xmm3,edx
  420954:	vsubsd xmm1,xmm1,xmm3
  420958:	vucomisd xmm1,xmm2
  42095c:	jp     420cd8 <flatcc_json_parser_struct_as_root@@Base+0x1498>
  420962:	jne    420cd8 <flatcc_json_parser_struct_as_root@@Base+0x1498>
  420968:	lea    eax,[rdx+0x162]
  42096e:	add    edx,0x15b
  420974:	cmovns eax,edx
  420977:	lea    rdx,[rip+0x10322]        # 430ca0 <flatcc_builder_padding_base@@Base+0x1f80>
  42097e:	sar    eax,0x3
  420981:	inc    eax
  420983:	cdqe   
  420985:	shl    rax,0x4
  420989:	add    rax,rdx
  42098c:	mov    r13,QWORD PTR [rax]
  42098f:	movsx  r14d,WORD PTR [rax+0x8]
  420994:	mov    rdi,QWORD PTR [rsp]
  420998:	movsx  eax,WORD PTR [rax+0xa]
  42099c:	mov    ecx,r14d
  42099f:	mov    esi,r15d
  4209a2:	mov    rdx,r13
  4209a5:	mov    QWORD PTR [rsp+0x40],r8
  4209aa:	mov    QWORD PTR [rsp+0x38],r10
  4209af:	vmovsd QWORD PTR [rsp+0x30],xmm0
  4209b5:	mov    DWORD PTR [rsp+0x28],eax
  4209b9:	call   420650 <flatcc_json_parser_struct_as_root@@Base+0xe10>
  4209be:	mov    DWORD PTR [rsp+0x10],edx
  4209c2:	mov    rdi,r12
  4209c5:	mov    esi,ebp
  4209c7:	mov    rdx,r13
  4209ca:	mov    QWORD PTR [rsp],rax
  4209ce:	call   420650 <flatcc_json_parser_struct_as_root@@Base+0xe10>
  4209d3:	mov    r8,QWORD PTR [rsp+0x40]
  4209d8:	mov    r15,rdx
  4209db:	mov    rdi,r8
  4209de:	mov    rdx,r13
  4209e1:	mov    r12,rax
  4209e4:	call   420650 <flatcc_json_parser_struct_as_root@@Base+0xe10>
  4209e9:	lea    rdi,[rax+0x1]
  4209ed:	dec    r12
  4209f0:	mov    rcx,rdi
  4209f3:	mov    DWORD PTR [rsp+0x40],edx
  4209f7:	sub    rcx,r12
  4209fa:	cmp    r12,rdi
  4209fd:	ja     420ec7 <flatcc_json_parser_struct_as_root@@Base+0x1687>
  420a03:	cmp    edx,r15d
  420a06:	vmovsd xmm0,QWORD PTR [rsp+0x30]
  420a0c:	mov    r10,QWORD PTR [rsp+0x38]
  420a11:	jne    420ec7 <flatcc_json_parser_struct_as_root@@Base+0x1687>
  420a17:	mov    esi,DWORD PTR [rsp+0x10]
  420a1b:	mov    r9d,0x1
  420a21:	lea    ebp,[rsi+0x41]
  420a24:	imul   ebp,ebp,0x4d1
  420a2a:	mov    r14d,esi
  420a2d:	neg    r14d
  420a30:	sar    ebp,0xc
  420a33:	shlx   rax,r9,r14
  420a38:	lea    r9d,[rbp+0x1]
  420a3c:	lea    rsi,[rip+0x1021d]        # 430c60 <flatcc_builder_padding_base@@Base+0x1f40>
  420a43:	movsxd r11,r9d
  420a46:	mov    r15,rax
  420a49:	mov    r11d,DWORD PTR [rsi+r11*4]
  420a4d:	dec    r15
  420a50:	mov    r8,rdi
  420a53:	mov    QWORD PTR [rsp+0x30],rax
  420a58:	shrx   rdx,rdi,r14
  420a5d:	and    r8,r15
  420a60:	mov    eax,edx
  420a62:	cmp    edx,r11d
  420a65:	jae    420a73 <flatcc_json_parser_struct_as_root@@Base+0x1233>
  420a67:	movsxd rdx,ebp
  420a6a:	mov    r11d,DWORD PTR [rsi+rdx*4]
  420a6e:	mov    r9d,ebp
  420a71:	dec    ebp
  420a73:	test   r9d,r9d
  420a76:	jle    420eb8 <flatcc_json_parser_struct_as_root@@Base+0x1678>
  420a7c:	xor    edx,edx
  420a7e:	div    r11d
  420a81:	add    eax,0x30
  420a84:	mov    BYTE PTR [rbx],al
  420a86:	mov    eax,edx
  420a88:	mov    rsi,rax
  420a8b:	shlx   rax,rax,r14
  420a90:	add    rax,r8
  420a93:	cmp    rcx,rax
  420a96:	ja     420ce0 <flatcc_json_parser_struct_as_root@@Base+0x14a0>
  420a9c:	mov    r13d,0x1
  420aa2:	mov    r9d,0xcccccccd
  420aa8:	mov    QWORD PTR [rsp+0x38],r15
  420aad:	jmp    420ad6 <flatcc_json_parser_struct_as_root@@Base+0x1296>
  420aaf:	nop
  420ab0:	mov    eax,esi
  420ab2:	xor    edx,edx
  420ab4:	div    r11d
  420ab7:	add    eax,0x30
  420aba:	mov    BYTE PTR [rbx+r13*1],al
  420abe:	mov    eax,edx
  420ac0:	shlx   rax,rax,r14
  420ac5:	add    rax,r8
  420ac8:	mov    esi,edx
  420aca:	inc    r13
  420acd:	cmp    rcx,rax
  420ad0:	ja     420cf0 <flatcc_json_parser_struct_as_root@@Base+0x14b0>
  420ad6:	mov    eax,r11d
  420ad9:	mul    r9d
  420adc:	dec    ebp
  420ade:	lea    r12d,[r13+0x1]
  420ae2:	shr    edx,0x3
  420ae5:	mov    r11d,edx
  420ae8:	cmp    ebp,0xffffffff
  420aeb:	jne    420ab0 <flatcc_json_parser_struct_as_root@@Base+0x1270>
  420aed:	mov    r15,QWORD PTR [rsp+0x38]
  420af2:	mov    eax,r13d
  420af5:	xor    r9d,r9d
  420af8:	mov    esi,eax
  420afa:	lea    edx,[rax+0x1]
  420afd:	movsxd rdx,edx
  420b00:	mov    eax,0x1
  420b05:	add    esi,r9d
  420b08:	nop    DWORD PTR [rax+rax*1+0x0]
  420b10:	lea    r8,[r8+r8*4]
  420b14:	add    r8,r8
  420b17:	lea    rcx,[rcx+rcx*4]
  420b1b:	shrx   r9,r8,r14
  420b20:	lea    rax,[rax+rax*4]
  420b24:	add    r9d,0x30
  420b28:	mov    ebp,esi
  420b2a:	add    rcx,rcx
  420b2d:	and    r8,r15
  420b30:	mov    BYTE PTR [rbx+rdx*1-0x1],r9b
  420b35:	mov    r12d,edx
  420b38:	sub    ebp,edx
  420b3a:	add    rax,rax
  420b3d:	inc    rdx
  420b40:	cmp    rcx,r8
  420b43:	jbe    420b10 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
  420b45:	mov    rsi,QWORD PTR [rsp]
  420b49:	mov    r11d,DWORD PTR [rsp+0x10]
  420b4e:	mov    rdx,rdi
  420b51:	vmovsd QWORD PTR [rsp+0x48],xmm0
  420b57:	mov    QWORD PTR [rsp+0x38],r10
  420b5c:	sub    rdx,rsi
  420b5f:	cmp    DWORD PTR [rsp+0x40],r11d
  420b64:	jne    420ec7 <flatcc_json_parser_struct_as_root@@Base+0x1687>
  420b6a:	cmp    rdi,rsi
  420b6d:	jb     420ec7 <flatcc_json_parser_struct_as_root@@Base+0x1687>
  420b73:	sub    rsp,0x8
  420b77:	push   rax
  420b78:	imul   rdx,rax
  420b7c:	mov    esi,r12d
  420b7f:	mov    r9,QWORD PTR [rsp+0x40]
  420b84:	mov    rdi,rbx
  420b87:	call   420120 <flatcc_json_parser_struct_as_root@@Base+0x8e0>
  420b8c:	pop    rdx
  420b8d:	pop    rcx
  420b8e:	vmovsd xmm0,QWORD PTR [rsp+0x48]
  420b94:	mov    r10,QWORD PTR [rsp+0x38]
  420b99:	mov    r14d,ebp
  420b9c:	sub    r14d,DWORD PTR [rsp+0x28]
  420ba1:	test   eax,eax
  420ba3:	je     420de8 <flatcc_json_parser_struct_as_root@@Base+0x15a8>
  420ba9:	mov    r13d,0x2
  420baf:	cmp    r12d,0x2
  420bb3:	mov    edx,r13d
  420bb6:	mov    eax,DWORD PTR [rsp+0x28]
  420bba:	cmovge edx,r12d
  420bbe:	sub    eax,ebp
  420bc0:	lea    edi,[rdx-0x1]
  420bc3:	cmp    edx,eax
  420bc5:	cmovg  edi,eax
  420bc8:	test   r14d,r14d
  420bcb:	js     420d50 <flatcc_json_parser_struct_as_root@@Base+0x1510>
  420bd1:	movsxd rdx,r12d
  420bd4:	lea    rax,[rbx+rdx*1]
  420bd8:	cmp    r14d,0x2
  420bdc:	jg     420e20 <flatcc_json_parser_struct_as_root@@Base+0x15e0>
  420be2:	lea    ecx,[r14-0x1]
  420be6:	lea    rdx,[rbx+rdx*1+0x1]
  420beb:	mov    esi,ecx
  420bed:	add    rdx,rsi
  420bf0:	test   r14d,r14d
  420bf3:	jle    420c0d <flatcc_json_parser_struct_as_root@@Base+0x13cd>
  420bf5:	nop    DWORD PTR [rax]
  420bf8:	mov    BYTE PTR [rax],0x30
  420bfb:	inc    rax
  420bfe:	cmp    rdx,rax
  420c01:	jne    420bf8 <flatcc_json_parser_struct_as_root@@Base+0x13b8>
  420c03:	lea    eax,[rcx+r12*1+0x1]
  420c08:	cdqe   
  420c0a:	add    rax,rbx
  420c0d:	mov    BYTE PTR [rax],0x0
  420c10:	add    rsp,0x58
  420c14:	sub    eax,r10d
  420c17:	pop    rbx
  420c18:	pop    rbp
  420c19:	pop    r12
  420c1b:	pop    r13
  420c1d:	pop    r14
  420c1f:	pop    r15
  420c21:	ret    
  420c22:	nop    WORD PTR [rax+rax*1+0x0]
  420c28:	btc    r8,0x3f
  420c2d:	lea    rbx,[rdi+0x1]
  420c31:	mov    BYTE PTR [rdi],0x2d
  420c34:	vxorpd xmm0,xmm0,XMMWORD PTR [rip+0xd5f4]        # 42e230 <_IO_stdin_used@@Base+0x3230>
  420c3c:	test   r8,r8
  420c3f:	jne    4207fb <flatcc_json_parser_struct_as_root@@Base+0xfbb>
  420c45:	mov    r8d,0x30
  420c4b:	mov    WORD PTR [rbx],r8w
  420c4f:	lea    rax,[rbx+0x1]
  420c53:	sub    eax,r10d
  420c56:	add    rsp,0x58
  420c5a:	pop    rbx
  420c5b:	pop    rbp
  420c5c:	pop    r12
  420c5e:	pop    r13
  420c60:	pop    r14
  420c62:	pop    r15
  420c64:	ret    
  420c65:	nop    DWORD PTR [rax]
  420c68:	vmovd  r9d,xmm0
  420c6d:	shr    r8,0x20
  420c71:	lea    rcx,[rip+0xfe56]        # 430ace <flatcc_builder_padding_base@@Base+0x1dae>
  420c78:	mov    rdx,0xffffffffffffffff
  420c7f:	mov    esi,0x1
  420c84:	xor    eax,eax
  420c86:	call   406280 <__sprintf_chk@plt>
  420c8b:	add    rsp,0x58
  420c8f:	pop    rbx
  420c90:	pop    rbp
  420c91:	pop    r12
  420c93:	pop    r13
  420c95:	pop    r14
  420c97:	mov    eax,0x15
  420c9c:	pop    r15
  420c9e:	ret    
  420c9f:	nop
  420ca0:	mov    DWORD PTR [rbx],0x666e69
  420ca6:	add    rsp,0x58
  420caa:	lea    rax,[rbx+0x3]
  420cae:	pop    rbx
  420caf:	pop    rbp
  420cb0:	pop    r12
  420cb2:	pop    r13
  420cb4:	pop    r14
  420cb6:	sub    eax,r10d
  420cb9:	pop    r15
  420cbb:	ret    
  420cbc:	nop    DWORD PTR [rax+0x0]
  420cc0:	mov    r14,rcx
  420cc3:	mov    r12d,0xfffffbcd
  420cc9:	mov    r11d,0xfffffbce
  420ccf:	jmp    420855 <flatcc_json_parser_struct_as_root@@Base+0x1015>
  420cd4:	nop    DWORD PTR [rax+0x0]
  420cd8:	inc    edx
  420cda:	jmp    420968 <flatcc_json_parser_struct_as_root@@Base+0x1128>
  420cdf:	nop
  420ce0:	mov    r12d,0x1
  420ce6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  420cf0:	mov    rsi,QWORD PTR [rsp]
  420cf4:	mov    r9d,r11d
  420cf7:	mov    rdx,rdi
  420cfa:	mov    QWORD PTR [rsp+0x38],r10
  420cff:	vmovsd QWORD PTR [rsp+0x30],xmm0
  420d05:	shlx   r9,r9,r14
  420d0a:	sub    rdx,rsi
  420d0d:	cmp    rdi,rsi
  420d10:	jb     420ec7 <flatcc_json_parser_struct_as_root@@Base+0x1687>
  420d16:	mov    esi,DWORD PTR [rsp+0x10]
  420d1a:	cmp    DWORD PTR [rsp+0x40],esi
  420d1e:	jne    420ec7 <flatcc_json_parser_struct_as_root@@Base+0x1687>
  420d24:	sub    rsp,0x8
  420d28:	push   0x1
  420d2a:	mov    esi,r12d
  420d2d:	mov    rdi,rbx
  420d30:	mov    r8,rax
  420d33:	call   420120 <flatcc_json_parser_struct_as_root@@Base+0x8e0>
  420d38:	pop    rsi
  420d39:	pop    rdi
  420d3a:	vmovsd xmm0,QWORD PTR [rsp+0x30]
  420d40:	mov    r10,QWORD PTR [rsp+0x38]
  420d45:	jmp    420b99 <flatcc_json_parser_struct_as_root@@Base+0x1359>
  420d4a:	nop    WORD PTR [rax+rax*1+0x0]
  420d50:	lea    edx,[r14+r12*1]
  420d54:	cmp    edx,0xfffffffe
  420d57:	jl     420d62 <flatcc_json_parser_struct_as_root@@Base+0x1522>
  420d59:	cmp    eax,r12d
  420d5c:	jge    420e50 <flatcc_json_parser_struct_as_root@@Base+0x1610>
  420d62:	lea    rax,[rbx+0x1]
  420d66:	cmp    r12d,0x1
  420d6a:	je     420e20 <flatcc_json_parser_struct_as_root@@Base+0x15e0>
  420d70:	test   edi,edi
  420d72:	jle    420d9f <flatcc_json_parser_struct_as_root@@Base+0x155f>
  420d74:	movsxd rdx,r12d
  420d77:	lea    rcx,[rbx+rdx*1-0x1]
  420d7c:	lea    rax,[rbx+rdx*1]
  420d80:	lea    edx,[rdi-0x1]
  420d83:	sub    rcx,rdx
  420d86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  420d90:	movzx  edx,BYTE PTR [rax-0x1]
  420d94:	dec    rax
  420d97:	mov    BYTE PTR [rax+0x1],dl
  420d9a:	cmp    rcx,rax
  420d9d:	jne    420d90 <flatcc_json_parser_struct_as_root@@Base+0x1550>
  420d9f:	mov    eax,r12d
  420da2:	sub    eax,edi
  420da4:	cdqe   
  420da6:	mov    BYTE PTR [rbx+rax*1],0x2e
  420daa:	lea    eax,[r12+0x1]
  420daf:	cdqe   
  420db1:	add    rax,rbx
  420db4:	add    edi,r14d
  420db7:	je     420c0d <flatcc_json_parser_struct_as_root@@Base+0x13cd>
  420dbd:	add    r12d,0x2
  420dc1:	movsxd rsi,r12d
  420dc4:	mov    QWORD PTR [rsp],r10
  420dc8:	mov    BYTE PTR [rax],0x65
  420dcb:	add    rsi,rbx
  420dce:	jmp    420e33 <flatcc_json_parser_struct_as_root@@Base+0x15f3>
  420dd0:	lea    r9,[r14*4-0x1]
  420dd8:	lea    r12d,[r11-0x2]
  420ddc:	jmp    420922 <flatcc_json_parser_struct_as_root@@Base+0x10e2>
  420de1:	nop    DWORD PTR [rax+0x0]
  420de8:	mov    rdi,rbx
  420deb:	lea    rcx,[rip+0xfcea]        # 430adc <flatcc_builder_padding_base@@Base+0x1dbc>
  420df2:	mov    rdx,0xffffffffffffffff
  420df9:	mov    esi,0x1
  420dfe:	mov    eax,0x1
  420e03:	mov    QWORD PTR [rsp],r10
  420e07:	call   406280 <__sprintf_chk@plt>
  420e0c:	mov    r10,QWORD PTR [rsp]
  420e10:	sub    rbx,r10
  420e13:	add    eax,ebx
  420e15:	jmp    420c56 <flatcc_json_parser_struct_as_root@@Base+0x1416>
  420e1a:	nop    WORD PTR [rax+rax*1+0x0]
  420e20:	inc    r12d
  420e23:	mov    QWORD PTR [rsp],r10
  420e27:	mov    BYTE PTR [rax],0x65
  420e2a:	movsxd rsi,r12d
  420e2d:	add    rsi,rbx
  420e30:	mov    edi,r14d
  420e33:	call   420220 <flatcc_json_parser_struct_as_root@@Base+0x9e0>
  420e38:	add    eax,r12d
  420e3b:	cdqe   
  420e3d:	add    rax,rbx
  420e40:	mov    r10,QWORD PTR [rsp]
  420e44:	jmp    420c0d <flatcc_json_parser_struct_as_root@@Base+0x13cd>
  420e49:	nop    DWORD PTR [rax+0x0]
  420e50:	movsxd rdx,r12d
  420e53:	mov    edi,0x2
  420e58:	sub    rdi,rdx
  420e5b:	movsxd rax,r14d
  420e5e:	sub    rdi,rax
  420e61:	sub    r13d,r14d
  420e64:	add    rdi,rbx
  420e67:	mov    rsi,rbx
  420e6a:	sub    r13d,r12d
  420e6d:	mov    QWORD PTR [rsp],r10
  420e71:	call   406240 <memmove@plt>
  420e76:	mov    eax,0x2e30
  420e7b:	cmp    r13d,0x2
  420e7f:	mov    WORD PTR [rbx],ax
  420e82:	mov    r10,QWORD PTR [rsp]
  420e86:	jle    420ebf <flatcc_json_parser_struct_as_root@@Base+0x167f>
  420e88:	lea    edx,[r13-0x3]
  420e8c:	lea    rax,[rbx+0x2]
  420e90:	lea    rdx,[rbx+rdx*1+0x3]
  420e95:	nop    DWORD PTR [rax]
  420e98:	mov    BYTE PTR [rax],0x30
  420e9b:	inc    rax
  420e9e:	cmp    rdx,rax
  420ea1:	jne    420e98 <flatcc_json_parser_struct_as_root@@Base+0x1658>
  420ea3:	lea    eax,[r13+r12*1+0x0]
  420ea8:	cdqe   
  420eaa:	add    rax,rbx
  420ead:	jmp    420c0d <flatcc_json_parser_struct_as_root@@Base+0x13cd>
  420eb2:	nop    WORD PTR [rax+rax*1+0x0]
  420eb8:	xor    eax,eax
  420eba:	jmp    420af8 <flatcc_json_parser_struct_as_root@@Base+0x12b8>
  420ebf:	mov    r13d,0x2
  420ec5:	jmp    420ea3 <flatcc_json_parser_struct_as_root@@Base+0x1663>
  420ec7:	call   420780 <flatcc_json_parser_struct_as_root@@Base+0xf40>
  420ecc:	lea    rcx,[rip+0xfd5d]        # 430c30 <flatcc_builder_padding_base@@Base+0x1f10>
  420ed3:	mov    edx,0xbd
  420ed8:	lea    rsi,[rip+0xf9f1]        # 4308d0 <flatcc_builder_padding_base@@Base+0x1bb0>
  420edf:	lea    rdi,[rip+0xfbe4]        # 430aca <flatcc_builder_padding_base@@Base+0x1daa>
  420ee6:	call   4061b0 <__assert_fail@plt>
  420eeb:	lea    rcx,[rip+0xfd36]        # 430c28 <flatcc_builder_padding_base@@Base+0x1f08>
  420ef2:	mov    edx,0x8a
  420ef7:	lea    rsi,[rip+0xf9d2]        # 4308d0 <flatcc_builder_padding_base@@Base+0x1bb0>
  420efe:	lea    rdi,[rip+0xfa43]        # 430948 <flatcc_builder_padding_base@@Base+0x1c28>
  420f05:	call   4061b0 <__assert_fail@plt>
  420f0a:	nop    WORD PTR [rax+rax*1+0x0]
  420f10:	push   rbp
  420f11:	mov    rbp,rdi
  420f14:	push   rbx
  420f15:	sub    rsp,0x18
  420f19:	mov    rax,QWORD PTR fs:0x28
  420f22:	mov    QWORD PTR [rsp+0x8],rax
  420f27:	xor    eax,eax
  420f29:	mov    DWORD PTR [rsp+0x4],0x0
  420f31:	test   rsi,rsi
  420f34:	je     420fab <flatcc_json_parser_struct_as_root@@Base+0x176b>
  420f36:	cmp    rdx,0x7
  420f3a:	jbe    420fab <flatcc_json_parser_struct_as_root@@Base+0x176b>
  420f3c:	test   rcx,rcx
  420f3f:	je     420f63 <flatcc_json_parser_struct_as_root@@Base+0x1723>
  420f41:	mov    rbx,rsi
  420f44:	lea    rdi,[rsp+0x4]
  420f49:	mov    edx,0x4
  420f4e:	mov    rsi,rcx
  420f51:	call   406170 <strncpy@plt>
  420f56:	mov    eax,DWORD PTR [rsp+0x4]
  420f5a:	cmp    DWORD PTR [rbx+0x4],eax
  420f5d:	je     420f63 <flatcc_json_parser_struct_as_root@@Base+0x1723>
  420f5f:	test   eax,eax
  420f61:	jne    420f7f <flatcc_json_parser_struct_as_root@@Base+0x173f>
  420f63:	mov    rsi,QWORD PTR [rsp+0x8]
  420f68:	xor    rsi,QWORD PTR fs:0x28
  420f71:	mov    eax,0x1
  420f76:	jne    420fd7 <flatcc_json_parser_struct_as_root@@Base+0x1797>
  420f78:	add    rsp,0x18
  420f7c:	pop    rbx
  420f7d:	pop    rbp
  420f7e:	ret    
  420f7f:	cmp    DWORD PTR [rbp+0x3c],0x0
  420f83:	jne    420f8c <flatcc_json_parser_struct_as_root@@Base+0x174c>
  420f85:	mov    DWORD PTR [rbp+0x3c],0x1
  420f8c:	lea    rcx,[rip+0xfbcd]        # 430b60 <flatcc_builder_padding_base@@Base+0x1e40>
  420f93:	mov    edx,0x404
  420f98:	lea    rsi,[rip+0xf9d1]        # 430970 <flatcc_builder_padding_base@@Base+0x1c50>
  420f9f:	lea    rdi,[rip+0xfb3c]        # 430ae2 <flatcc_builder_padding_base@@Base+0x1dc2>
  420fa6:	call   4061b0 <__assert_fail@plt>
  420fab:	cmp    DWORD PTR [rbp+0x3c],0x0
  420faf:	jne    420fb8 <flatcc_json_parser_struct_as_root@@Base+0x1778>
  420fb1:	mov    DWORD PTR [rbp+0x3c],0x1
  420fb8:	lea    rcx,[rip+0xfba1]        # 430b60 <flatcc_builder_padding_base@@Base+0x1e40>
  420fbf:	mov    edx,0x3fb
  420fc4:	lea    rsi,[rip+0xf9a5]        # 430970 <flatcc_builder_padding_base@@Base+0x1c50>
  420fcb:	lea    rdi,[rip+0xfa06]        # 4309d8 <flatcc_builder_padding_base@@Base+0x1cb8>
  420fd2:	call   4061b0 <__assert_fail@plt>
  420fd7:	call   4061a0 <__stack_chk_fail@plt>
  420fdc:	nop    DWORD PTR [rax+0x0]
  420fe0:	mov    eax,ecx
  420fe2:	mov    r10,QWORD PTR [rdx]
  420fe5:	and    eax,0xffffff1f
  420fea:	je     421100 <flatcc_json_parser_struct_as_root@@Base+0x18c0>
  420ff0:	lea    r9,[rip+0xfa01]        # 4309f8 <flatcc_builder_padding_base@@Base+0x1cd8>
  420ff7:	cmp    eax,0x1
  420ffa:	je     421086 <flatcc_json_parser_struct_as_root@@Base+0x1846>
  421000:	xor    ecx,ecx
  421002:	mov    eax,0x3
  421007:	mov    QWORD PTR [rdx],rcx
  42100a:	ret    
  42100b:	nop    DWORD PTR [rax+rax*1+0x0]
  421010:	movzx  eax,BYTE PTR [rsi]
  421013:	sub    r10,0x3
  421017:	shr    al,0x2
  42101a:	movzx  eax,al
  42101d:	movzx  eax,BYTE PTR [r9+rax*1]
  421022:	add    rdi,0x4
  421026:	mov    BYTE PTR [rdi-0x4],al
  421029:	add    rsi,0x3
  42102d:	movzx  r8d,BYTE PTR [rsi-0x3]
  421032:	movzx  eax,BYTE PTR [rsi-0x2]
  421036:	shl    r8d,0x4
  42103a:	shr    al,0x4
  42103d:	movzx  eax,al
  421040:	and    r8d,0x30
  421044:	or     r8d,eax
  421047:	movsxd r8,r8d
  42104a:	movzx  eax,BYTE PTR [r9+r8*1]
  42104f:	mov    BYTE PTR [rdi-0x3],al
  421052:	movzx  r8d,BYTE PTR [rsi-0x2]
  421057:	movzx  eax,BYTE PTR [rsi-0x1]
  42105b:	shl    r8d,0x2
  42105f:	shr    al,0x6
  421062:	movzx  eax,al
  421065:	and    r8d,0x3c
  421069:	or     r8d,eax
  42106c:	movsxd r8,r8d
  42106f:	movzx  eax,BYTE PTR [r9+r8*1]
  421074:	mov    BYTE PTR [rdi-0x2],al
  421077:	movzx  eax,BYTE PTR [rsi-0x1]
  42107b:	and    eax,0x3f
  42107e:	movzx  eax,BYTE PTR [r9+rax*1]
  421083:	mov    BYTE PTR [rdi-0x1],al
  421086:	cmp    r10,0x2
  42108a:	ja     421010 <flatcc_json_parser_struct_as_root@@Base+0x17d0>
  42108c:	mov    eax,ecx
  42108e:	and    eax,0x80
  421093:	cmp    r10,0x1
  421097:	je     421110 <flatcc_json_parser_struct_as_root@@Base+0x18d0>
  421099:	cmp    r10,0x2
  42109d:	jne    4210ed <flatcc_json_parser_struct_as_root@@Base+0x18ad>
  42109f:	movzx  ecx,BYTE PTR [rsi]
  4210a2:	shr    cl,0x2
  4210a5:	movzx  ecx,cl
  4210a8:	movzx  ecx,BYTE PTR [r9+rcx*1]
  4210ad:	mov    BYTE PTR [rdi],cl
  4210af:	movzx  ecx,BYTE PTR [rsi]
  4210b2:	movzx  r8d,BYTE PTR [rsi+0x1]
  4210b7:	shl    ecx,0x4
  4210ba:	shr    r8b,0x4
  4210be:	and    ecx,0x30
  4210c1:	movzx  r8d,r8b
  4210c5:	or     ecx,r8d
  4210c8:	movsxd rcx,ecx
  4210cb:	movzx  ecx,BYTE PTR [r9+rcx*1]
  4210d0:	mov    BYTE PTR [rdi+0x1],cl
  4210d3:	movzx  ecx,BYTE PTR [rsi+0x1]
  4210d7:	shl    ecx,0x2
  4210da:	and    ecx,0x3c
  4210dd:	movzx  ecx,BYTE PTR [r9+rcx*1]
  4210e2:	mov    BYTE PTR [rdi+0x2],cl
  4210e5:	test   eax,eax
  4210e7:	je     421150 <flatcc_json_parser_struct_as_root@@Base+0x1910>
  4210e9:	mov    BYTE PTR [rdi+0x3],0x3d
  4210ed:	mov    rcx,QWORD PTR [rdx]
  4210f0:	xor    eax,eax
  4210f2:	mov    QWORD PTR [rdx],rcx
  4210f5:	ret    
  4210f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  421100:	lea    r9,[rip+0xf939]        # 430a40 <flatcc_builder_padding_base@@Base+0x1d20>
  421107:	jmp    421086 <flatcc_json_parser_struct_as_root@@Base+0x1846>
  42110c:	nop    DWORD PTR [rax+0x0]
  421110:	movzx  ecx,BYTE PTR [rsi]
  421113:	shr    cl,0x2
  421116:	movzx  ecx,cl
  421119:	movzx  ecx,BYTE PTR [r9+rcx*1]
  42111e:	mov    BYTE PTR [rdi],cl
  421120:	movzx  ecx,BYTE PTR [rsi]
  421123:	shl    ecx,0x4
  421126:	and    ecx,0x30
  421129:	movzx  ecx,BYTE PTR [r9+rcx*1]
  42112e:	mov    BYTE PTR [rdi+0x1],cl
  421131:	test   eax,eax
  421133:	je     421150 <flatcc_json_parser_struct_as_root@@Base+0x1910>
  421135:	mov    eax,0x3d3d
  42113a:	mov    WORD PTR [rdi+0x2],ax
  42113e:	xor    eax,eax
  421140:	mov    rcx,QWORD PTR [rdx]
  421143:	jmp    421007 <flatcc_json_parser_struct_as_root@@Base+0x17c7>
  421148:	nop    DWORD PTR [rax+rax*1+0x0]
  421150:	mov    rcx,QWORD PTR [rdx]
  421153:	mov    QWORD PTR [rdx],rcx
  421156:	ret    
  421157:	nop    WORD PTR [rax+rax*1+0x0]
  421160:	push   r14
  421162:	mov    r14,rdx
  421165:	push   r13
  421167:	mov    r13,rdi
  42116a:	push   r12
  42116c:	push   rbp
  42116d:	mov    rbp,rsi
  421170:	push   rbx
  421171:	mov    rax,QWORD PTR [rdi+0x28]
  421175:	lea    rdx,[rax+0x1]
  421179:	mov    QWORD PTR [rdi+0x28],rdx
  42117d:	mov    BYTE PTR [rax],0x22
  421180:	movzx  ebx,BYTE PTR [rsi]
  421183:	cmp    bl,0x1f
  421186:	jbe    4212ae <flatcc_json_parser_struct_as_root@@Base+0x1a6e>
  42118c:	nop    DWORD PTR [rax+0x0]
  421190:	cmp    bl,0x22
  421193:	je     4212ae <flatcc_json_parser_struct_as_root@@Base+0x1a6e>
  421199:	cmp    bl,0x5c
  42119c:	je     4212ae <flatcc_json_parser_struct_as_root@@Base+0x1a6e>
  4211a2:	nop    WORD PTR [rax+rax*1+0x0]
  4211a8:	inc    rbp
  4211ab:	movzx  ebx,BYTE PTR [rbp+0x0]
  4211af:	cmp    bl,0x1f
  4211b2:	jbe    4211be <flatcc_json_parser_struct_as_root@@Base+0x197e>
  4211b4:	cmp    bl,0x22
  4211b7:	je     4211be <flatcc_json_parser_struct_as_root@@Base+0x197e>
  4211b9:	cmp    bl,0x5c
  4211bc:	jne    4211a8 <flatcc_json_parser_struct_as_root@@Base+0x1968>
  4211be:	mov    r12,rbp
  4211c1:	sub    r12,rsi
  4211c4:	sub    r14,r12
  4211c7:	mov    rdi,QWORD PTR [r13+0x28]
  4211cb:	mov    rdx,r12
  4211ce:	lea    rax,[rdi+r12*1]
  4211d2:	cmp    QWORD PTR [r13+0x20],rax
  4211d6:	ja     4212f0 <flatcc_json_parser_struct_as_root@@Base+0x1ab0>
  4211dc:	mov    rdi,r13
  4211df:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4211e4:	mov    r12,QWORD PTR [r13+0x28]
  4211e8:	lea    rax,[r12+0x1]
  4211ed:	mov    QWORD PTR [r13+0x28],rax
  4211f1:	test   r14,r14
  4211f4:	je     42130f <flatcc_json_parser_struct_as_root@@Base+0x1acf>
  4211fa:	mov    BYTE PTR [r12],0x5c
  4211ff:	cmp    bl,0xc
  421202:	je     421320 <flatcc_json_parser_struct_as_root@@Base+0x1ae0>
  421208:	ja     4212c0 <flatcc_json_parser_struct_as_root@@Base+0x1a80>
  42120e:	cmp    bl,0x9
  421211:	je     421398 <flatcc_json_parser_struct_as_root@@Base+0x1b58>
  421217:	cmp    bl,0xa
  42121a:	je     421380 <flatcc_json_parser_struct_as_root@@Base+0x1b40>
  421220:	cmp    bl,0x8
  421223:	je     421368 <flatcc_json_parser_struct_as_root@@Base+0x1b28>
  421229:	mov    rax,QWORD PTR [r13+0x28]
  42122d:	mov    ecx,ebx
  42122f:	lea    rdx,[rax+0x1]
  421233:	mov    QWORD PTR [r13+0x28],rdx
  421237:	mov    BYTE PTR [rax],0x75
  42123a:	shr    cl,0x4
  42123d:	cmp    cl,0xa
  421240:	mov    rax,QWORD PTR [r13+0x28]
  421244:	lea    rdx,[rax+0x1]
  421248:	mov    QWORD PTR [r13+0x28],rdx
  42124c:	mov    BYTE PTR [rax],0x30
  42124f:	mov    rax,QWORD PTR [r13+0x28]
  421253:	lea    rdx,[rax+0x1]
  421257:	mov    QWORD PTR [r13+0x28],rdx
  42125b:	mov    BYTE PTR [rax],0x30
  42125e:	sbb    eax,eax
  421260:	and    eax,0xffffffd9
  421263:	mov    rdx,QWORD PTR [r13+0x28]
  421267:	lea    eax,[rax+rcx*1+0x57]
  42126b:	lea    rsi,[rdx+0x1]
  42126f:	mov    QWORD PTR [r13+0x28],rsi
  421273:	mov    BYTE PTR [rdx],al
  421275:	and    ebx,0xf
  421278:	cmp    bl,0xa
  42127b:	mov    rdx,QWORD PTR [r13+0x28]
  42127f:	sbb    eax,eax
  421281:	and    eax,0xffffffd9
  421284:	lea    rcx,[rdx+0x1]
  421288:	lea    ebx,[rax+rbx*1+0x57]
  42128c:	mov    QWORD PTR [r13+0x28],rcx
  421290:	mov    BYTE PTR [rdx],bl
  421292:	nop    WORD PTR [rax+rax*1+0x0]
  421298:	lea    rsi,[rbp+0x1]
  42129c:	movzx  ebx,BYTE PTR [rsi]
  42129f:	dec    r14
  4212a2:	mov    rbp,rsi
  4212a5:	cmp    bl,0x1f
  4212a8:	ja     421190 <flatcc_json_parser_struct_as_root@@Base+0x1950>
  4212ae:	xor    r12d,r12d
  4212b1:	jmp    4211c7 <flatcc_json_parser_struct_as_root@@Base+0x1987>
  4212b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4212c0:	cmp    bl,0x22
  4212c3:	je     421350 <flatcc_json_parser_struct_as_root@@Base+0x1b10>
  4212c9:	cmp    bl,0x5c
  4212cc:	je     421338 <flatcc_json_parser_struct_as_root@@Base+0x1af8>
  4212ce:	cmp    bl,0xd
  4212d1:	jne    421229 <flatcc_json_parser_struct_as_root@@Base+0x19e9>
  4212d7:	mov    rax,QWORD PTR [r13+0x28]
  4212db:	lea    rdx,[rax+0x1]
  4212df:	mov    QWORD PTR [r13+0x28],rdx
  4212e3:	mov    BYTE PTR [rax],0x72
  4212e6:	jmp    421298 <flatcc_json_parser_struct_as_root@@Base+0x1a58>
  4212e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4212f0:	call   406210 <memcpy@plt>
  4212f5:	add    r12,QWORD PTR [r13+0x28]
  4212f9:	lea    rax,[r12+0x1]
  4212fe:	mov    QWORD PTR [r13+0x28],r12
  421302:	mov    QWORD PTR [r13+0x28],rax
  421306:	test   r14,r14
  421309:	jne    4211fa <flatcc_json_parser_struct_as_root@@Base+0x19ba>
  42130f:	mov    BYTE PTR [r12],0x22
  421314:	pop    rbx
  421315:	pop    rbp
  421316:	pop    r12
  421318:	pop    r13
  42131a:	pop    r14
  42131c:	ret    
  42131d:	nop    DWORD PTR [rax]
  421320:	mov    rax,QWORD PTR [r13+0x28]
  421324:	lea    rdx,[rax+0x1]
  421328:	mov    QWORD PTR [r13+0x28],rdx
  42132c:	mov    BYTE PTR [rax],0x66
  42132f:	jmp    421298 <flatcc_json_parser_struct_as_root@@Base+0x1a58>
  421334:	nop    DWORD PTR [rax+0x0]
  421338:	mov    rax,QWORD PTR [r13+0x28]
  42133c:	lea    rdx,[rax+0x1]
  421340:	mov    QWORD PTR [r13+0x28],rdx
  421344:	mov    BYTE PTR [rax],0x5c
  421347:	jmp    421298 <flatcc_json_parser_struct_as_root@@Base+0x1a58>
  42134c:	nop    DWORD PTR [rax+0x0]
  421350:	mov    rax,QWORD PTR [r13+0x28]
  421354:	lea    rdx,[rax+0x1]
  421358:	mov    QWORD PTR [r13+0x28],rdx
  42135c:	mov    BYTE PTR [rax],0x22
  42135f:	jmp    421298 <flatcc_json_parser_struct_as_root@@Base+0x1a58>
  421364:	nop    DWORD PTR [rax+0x0]
  421368:	mov    rax,QWORD PTR [r13+0x28]
  42136c:	lea    rdx,[rax+0x1]
  421370:	mov    QWORD PTR [r13+0x28],rdx
  421374:	mov    BYTE PTR [rax],0x62
  421377:	jmp    421298 <flatcc_json_parser_struct_as_root@@Base+0x1a58>
  42137c:	nop    DWORD PTR [rax+0x0]
  421380:	mov    rax,QWORD PTR [r13+0x28]
  421384:	lea    rdx,[rax+0x1]
  421388:	mov    QWORD PTR [r13+0x28],rdx
  42138c:	mov    BYTE PTR [rax],0x6e
  42138f:	jmp    421298 <flatcc_json_parser_struct_as_root@@Base+0x1a58>
  421394:	nop    DWORD PTR [rax+0x0]
  421398:	mov    rax,QWORD PTR [r13+0x28]
  42139c:	lea    rdx,[rax+0x1]
  4213a0:	mov    QWORD PTR [r13+0x28],rdx
  4213a4:	mov    BYTE PTR [rax],0x74
  4213a7:	jmp    421298 <flatcc_json_parser_struct_as_root@@Base+0x1a58>
  4213ac:	nop    DWORD PTR [rax+0x0]
  4213b0:	push   r13
  4213b2:	mov    r13,rsi
  4213b5:	push   r12
  4213b7:	mov    r12,rdx
  4213ba:	push   rbp
  4213bb:	push   rbx
  4213bc:	mov    rbx,rdi
  4213bf:	sub    rsp,0x8
  4213c3:	cmp    BYTE PTR [rdi+0x31],0x0
  4213c7:	mov    rsi,QWORD PTR [rdi+0x28]
  4213cb:	jne    421470 <flatcc_json_parser_struct_as_root@@Base+0x1c30>
  4213d1:	cmp    QWORD PTR [rdi+0x20],rsi
  4213d5:	jbe    421448 <flatcc_json_parser_struct_as_root@@Base+0x1c08>
  4213d7:	mov    BYTE PTR [rsi],0x22
  4213da:	xor    edi,edi
  4213dc:	mov    rdx,r12
  4213df:	cmp    BYTE PTR [rbx+0x32],0x0
  4213e3:	sete   dil
  4213e7:	add    rdi,QWORD PTR [rbx+0x28]
  4213eb:	lea    rax,[rdi+r12*1]
  4213ef:	mov    QWORD PTR [rbx+0x28],rdi
  4213f3:	mov    rsi,r13
  4213f6:	cmp    QWORD PTR [rbx+0x20],rax
  4213fa:	jbe    421458 <flatcc_json_parser_struct_as_root@@Base+0x1c18>
  4213fc:	call   406210 <memcpy@plt>
  421401:	add    r12,QWORD PTR [rbx+0x28]
  421405:	mov    QWORD PTR [rbx+0x28],r12
  421409:	mov    BYTE PTR [r12],0x22
  42140e:	xor    eax,eax
  421410:	cmp    BYTE PTR [rbx+0x32],0x0
  421414:	sete   al
  421417:	add    rax,QWORD PTR [rbx+0x28]
  42141b:	lea    rdx,[rax+0x1]
  42141f:	mov    QWORD PTR [rbx+0x28],rdx
  421423:	mov    BYTE PTR [rax],0x3a
  421426:	mov    rax,QWORD PTR [rbx+0x28]
  42142a:	mov    BYTE PTR [rax],0x20
  42142d:	xor    eax,eax
  42142f:	cmp    BYTE PTR [rbx+0x31],0x0
  421433:	setne  al
  421436:	add    QWORD PTR [rbx+0x28],rax
  42143a:	add    rsp,0x8
  42143e:	pop    rbx
  42143f:	pop    rbp
  421440:	pop    r12
  421442:	pop    r13
  421444:	ret    
  421445:	nop    DWORD PTR [rax]
  421448:	xor    esi,esi
  42144a:	call   QWORD PTR [rdi+0x48]
  42144d:	mov    rsi,QWORD PTR [rbx+0x28]
  421451:	jmp    4213d7 <flatcc_json_parser_struct_as_root@@Base+0x1b97>
  421453:	nop    DWORD PTR [rax+rax*1+0x0]
  421458:	mov    rdi,rbx
  42145b:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  421460:	mov    r12,QWORD PTR [rbx+0x28]
  421464:	jmp    421409 <flatcc_json_parser_struct_as_root@@Base+0x1bc9>
  421466:	nop    WORD PTR cs:[rax+rax*1+0x0]
  421470:	lea    rax,[rsi+0x1]
  421474:	mov    QWORD PTR [rdi+0x28],rax
  421478:	mov    BYTE PTR [rsi],0xa
  42147b:	movzx  esi,BYTE PTR [rdi+0x31]
  42147f:	imul   esi,DWORD PTR [rdi+0x38]
  421483:	mov    rdi,QWORD PTR [rdi+0x28]
  421487:	movsxd rbp,esi
  42148a:	lea    rax,[rdi+rbp*1]
  42148e:	cmp    QWORD PTR [rbx+0x20],rax
  421492:	jae    4214b0 <flatcc_json_parser_struct_as_root@@Base+0x1c70>
  421494:	mov    rsi,rbp
  421497:	mov    rdi,rbx
  42149a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42149f:	mov    rsi,QWORD PTR [rbx+0x28]
  4214a3:	jmp    4213d7 <flatcc_json_parser_struct_as_root@@Base+0x1b97>
  4214a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4214b0:	mov    esi,0x20
  4214b5:	mov    rdx,rbp
  4214b8:	call   4061c0 <memset@plt>
  4214bd:	mov    rsi,QWORD PTR [rbx+0x28]
  4214c1:	add    rsi,rbp
  4214c4:	mov    QWORD PTR [rbx+0x28],rsi
  4214c8:	jmp    4213d7 <flatcc_json_parser_struct_as_root@@Base+0x1b97>
  4214cd:	nop    DWORD PTR [rax]

00000000004214d0 <flatcc_json_printer_error_string@@Base>:
  4214d0:	endbr64 
  4214d4:	lea    rax,[rip+0xf631]        # 430b0c <flatcc_builder_padding_base@@Base+0x1dec>
  4214db:	cmp    edi,0x1
  4214de:	je     421503 <flatcc_json_printer_error_string@@Base+0x33>
  4214e0:	jle    421508 <flatcc_json_printer_error_string@@Base+0x38>
  4214e2:	lea    rax,[rip+0xf614]        # 430afd <flatcc_builder_padding_base@@Base+0x1ddd>
  4214e9:	cmp    edi,0x2
  4214ec:	je     421503 <flatcc_json_printer_error_string@@Base+0x33>
  4214ee:	cmp    edi,0x3
  4214f1:	lea    rax,[rip+0xdb23]        # 42f01b <flatcc_builder_padding_base@@Base+0x2fb>
  4214f8:	lea    rdx,[rip+0xda21]        # 42ef20 <flatcc_builder_padding_base@@Base+0x200>
  4214ff:	cmovne rax,rdx
  421503:	ret    
  421504:	nop    DWORD PTR [rax+0x0]
  421508:	test   edi,edi
  42150a:	lea    rdx,[rip+0xda0f]        # 42ef20 <flatcc_builder_padding_base@@Base+0x200>
  421511:	lea    rax,[rip+0xda10]        # 42ef28 <flatcc_builder_padding_base@@Base+0x208>
  421518:	cmovne rax,rdx
  42151c:	ret    
  42151d:	nop    DWORD PTR [rax]

0000000000421520 <flatcc_json_printer_fmt_float@@Base>:
  421520:	endbr64 
  421524:	vcvtss2sd xmm0,xmm0,xmm0
  421528:	jmp    4207b0 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  42152d:	nop    DWORD PTR [rax]

0000000000421530 <flatcc_json_printer_fmt_double@@Base>:
  421530:	endbr64 
  421534:	jmp    4207b0 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  421539:	nop    DWORD PTR [rax+0x0]

0000000000421540 <flatcc_json_printer_fmt_bool@@Base>:
  421540:	endbr64 
  421544:	test   esi,esi
  421546:	jne    421560 <flatcc_json_printer_fmt_bool@@Base+0x20>
  421548:	mov    DWORD PTR [rdi],0x736c6166
  42154e:	mov    BYTE PTR [rdi+0x4],0x65
  421552:	mov    eax,0x5
  421557:	ret    
  421558:	nop    DWORD PTR [rax+rax*1+0x0]
  421560:	mov    DWORD PTR [rdi],0x65757274
  421566:	mov    eax,0x4
  42156b:	ret    
  42156c:	nop    DWORD PTR [rax+0x0]

0000000000421570 <flatcc_json_printer_string@@Base>:
  421570:	endbr64 
  421574:	movsxd rdx,edx
  421577:	jmp    421160 <flatcc_json_parser_struct_as_root@@Base+0x1920>
  42157c:	nop    DWORD PTR [rax+0x0]

0000000000421580 <flatcc_json_printer_write@@Base>:
  421580:	endbr64 
  421584:	push   rbp
  421585:	movsxd rbp,edx
  421588:	push   rbx
  421589:	sub    rsp,0x8
  42158d:	mov    rax,QWORD PTR [rdi+0x28]
  421591:	lea    rdx,[rax+rbp*1]
  421595:	cmp    QWORD PTR [rdi+0x20],rdx
  421599:	ja     4215b0 <flatcc_json_printer_write@@Base+0x30>
  42159b:	add    rsp,0x8
  42159f:	pop    rbx
  4215a0:	mov    rdx,rbp
  4215a3:	pop    rbp
  4215a4:	jmp    4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4215a9:	nop    DWORD PTR [rax+0x0]
  4215b0:	mov    rbx,rdi
  4215b3:	mov    rdx,rbp
  4215b6:	mov    rdi,rax
  4215b9:	call   406210 <memcpy@plt>
  4215be:	add    QWORD PTR [rbx+0x28],rbp
  4215c2:	add    rsp,0x8
  4215c6:	pop    rbx
  4215c7:	pop    rbp
  4215c8:	ret    
  4215c9:	nop    DWORD PTR [rax+0x0]

00000000004215d0 <flatcc_json_printer_nl@@Base>:
  4215d0:	endbr64 
  4215d4:	mov    rax,QWORD PTR [rdi+0x28]
  4215d8:	lea    rdx,[rax+0x1]
  4215dc:	mov    QWORD PTR [rdi+0x28],rdx
  4215e0:	mov    BYTE PTR [rax],0xa
  4215e3:	mov    rax,QWORD PTR [rdi+0x20]
  4215e7:	cmp    QWORD PTR [rdi+0x28],rax
  4215eb:	jb     4215f8 <flatcc_json_printer_nl@@Base+0x28>
  4215ed:	mov    rax,QWORD PTR [rdi+0x48]
  4215f1:	xor    esi,esi
  4215f3:	jmp    rax
  4215f5:	nop    DWORD PTR [rax]
  4215f8:	ret    
  4215f9:	nop    DWORD PTR [rax+0x0]

0000000000421600 <flatcc_json_printer_char@@Base>:
  421600:	endbr64 
  421604:	mov    rax,QWORD PTR [rdi+0x28]
  421608:	lea    rdx,[rax+0x1]
  42160c:	mov    QWORD PTR [rdi+0x28],rdx
  421610:	mov    BYTE PTR [rax],sil
  421613:	ret    
  421614:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  42161f:	nop

0000000000421620 <flatcc_json_printer_indent@@Base>:
  421620:	endbr64 
  421624:	push   rbp
  421625:	push   rbx
  421626:	sub    rsp,0x8
  42162a:	movzx  ebp,BYTE PTR [rdi+0x31]
  42162e:	mov    rax,QWORD PTR [rdi+0x28]
  421632:	imul   ebp,DWORD PTR [rdi+0x38]
  421636:	movsxd rbp,ebp
  421639:	lea    rdx,[rax+rbp*1]
  42163d:	cmp    QWORD PTR [rdi+0x20],rdx
  421641:	jae    421658 <flatcc_json_printer_indent@@Base+0x38>
  421643:	add    rsp,0x8
  421647:	pop    rbx
  421648:	mov    rsi,rbp
  42164b:	pop    rbp
  42164c:	jmp    420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  421651:	nop    DWORD PTR [rax+0x0]
  421658:	mov    rbx,rdi
  42165b:	mov    rdx,rbp
  42165e:	mov    esi,0x20
  421663:	mov    rdi,rax
  421666:	call   4061c0 <memset@plt>
  42166b:	add    QWORD PTR [rbx+0x28],rbp
  42166f:	add    rsp,0x8
  421673:	pop    rbx
  421674:	pop    rbp
  421675:	ret    
  421676:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000421680 <flatcc_json_printer_add_level@@Base>:
  421680:	endbr64 
  421684:	add    DWORD PTR [rdi+0x38],esi
  421687:	ret    
  421688:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000421690 <flatcc_json_printer_get_level@@Base>:
  421690:	endbr64 
  421694:	mov    eax,DWORD PTR [rdi+0x38]
  421697:	ret    
  421698:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004216a0 <flatcc_json_printer_uint8@@Base>:
  4216a0:	endbr64 
  4216a4:	mov    r8,rdi
  4216a7:	mov    edi,esi
  4216a9:	mov    rsi,QWORD PTR [r8+0x28]
  4216ad:	movzx  edi,dil
  4216b1:	call   4205c0 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  4216b6:	cdqe   
  4216b8:	add    QWORD PTR [r8+0x28],rax
  4216bc:	ret    
  4216bd:	nop    DWORD PTR [rax]

00000000004216c0 <flatcc_json_printer_uint16@@Base>:
  4216c0:	endbr64 
  4216c4:	mov    r11,rdi
  4216c7:	mov    edi,esi
  4216c9:	mov    rsi,QWORD PTR [r11+0x28]
  4216cd:	movzx  edi,di
  4216d0:	call   41f850 <flatcc_json_parser_struct_as_root@@Base+0x10>
  4216d5:	cdqe   
  4216d7:	add    QWORD PTR [r11+0x28],rax
  4216db:	ret    
  4216dc:	nop    DWORD PTR [rax+0x0]

00000000004216e0 <flatcc_json_printer_uint32@@Base>:
  4216e0:	endbr64 
  4216e4:	push   rbx
  4216e5:	mov    rbx,rdi
  4216e8:	mov    edi,esi
  4216ea:	mov    rsi,QWORD PTR [rbx+0x28]
  4216ee:	call   41f980 <flatcc_json_parser_struct_as_root@@Base+0x140>
  4216f3:	cdqe   
  4216f5:	add    QWORD PTR [rbx+0x28],rax
  4216f9:	pop    rbx
  4216fa:	ret    
  4216fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000421700 <flatcc_json_printer_uint64@@Base>:
  421700:	endbr64 
  421704:	push   rbx
  421705:	mov    rbx,rdi
  421708:	mov    rdi,rsi
  42170b:	mov    rsi,QWORD PTR [rbx+0x28]
  42170f:	call   41fc30 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  421714:	cdqe   
  421716:	add    QWORD PTR [rbx+0x28],rax
  42171a:	pop    rbx
  42171b:	ret    
  42171c:	nop    DWORD PTR [rax+0x0]

0000000000421720 <flatcc_json_printer_int8@@Base>:
  421720:	endbr64 
  421724:	mov    eax,esi
  421726:	movsx  r8d,al
  42172a:	mov    r9,rdi
  42172d:	mov    rsi,QWORD PTR [rdi+0x28]
  421731:	shr    r8d,0x1f
  421735:	mov    edi,eax
  421737:	test   al,al
  421739:	jns    421743 <flatcc_json_printer_int8@@Base+0x23>
  42173b:	mov    BYTE PTR [rsi],0x2d
  42173e:	neg    edi
  421740:	inc    rsi
  421743:	movzx  edi,dil
  421747:	call   4205c0 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  42174c:	add    r8d,eax
  42174f:	movsxd r8,r8d
  421752:	add    QWORD PTR [r9+0x28],r8
  421756:	ret    
  421757:	nop    WORD PTR [rax+rax*1+0x0]

0000000000421760 <flatcc_json_printer_int16@@Base>:
  421760:	endbr64 
  421764:	push   rbx
  421765:	mov    eax,esi
  421767:	movsx  r11d,ax
  42176b:	mov    rbx,rdi
  42176e:	mov    rsi,QWORD PTR [rdi+0x28]
  421772:	shr    r11d,0x1f
  421776:	mov    edi,eax
  421778:	test   ax,ax
  42177b:	jns    421785 <flatcc_json_printer_int16@@Base+0x25>
  42177d:	mov    BYTE PTR [rsi],0x2d
  421780:	neg    edi
  421782:	inc    rsi
  421785:	movzx  edi,di
  421788:	call   41f850 <flatcc_json_parser_struct_as_root@@Base+0x10>
  42178d:	add    r11d,eax
  421790:	movsxd r11,r11d
  421793:	add    QWORD PTR [rbx+0x28],r11
  421797:	pop    rbx
  421798:	ret    
  421799:	nop    DWORD PTR [rax+0x0]

00000000004217a0 <flatcc_json_printer_int32@@Base>:
  4217a0:	endbr64 
  4217a4:	push   rbp
  4217a5:	mov    rbp,rdi
  4217a8:	mov    edi,esi
  4217aa:	push   rbx
  4217ab:	mov    ebx,edi
  4217ad:	mov    rsi,QWORD PTR [rbp+0x28]
  4217b1:	shr    ebx,0x1f
  4217b4:	test   edi,edi
  4217b6:	jns    4217c0 <flatcc_json_printer_int32@@Base+0x20>
  4217b8:	mov    BYTE PTR [rsi],0x2d
  4217bb:	neg    edi
  4217bd:	inc    rsi
  4217c0:	call   41f980 <flatcc_json_parser_struct_as_root@@Base+0x140>
  4217c5:	add    ebx,eax
  4217c7:	movsxd rbx,ebx
  4217ca:	add    QWORD PTR [rbp+0x28],rbx
  4217ce:	pop    rbx
  4217cf:	pop    rbp
  4217d0:	ret    
  4217d1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4217dc:	nop    DWORD PTR [rax+0x0]

00000000004217e0 <flatcc_json_printer_int64@@Base>:
  4217e0:	endbr64 
  4217e4:	push   rbp
  4217e5:	push   rbx
  4217e6:	mov    rbx,rdi
  4217e9:	mov    rdi,rsi
  4217ec:	mov    rbp,rdi
  4217ef:	mov    rsi,QWORD PTR [rbx+0x28]
  4217f3:	shr    rbp,0x3f
  4217f7:	test   rdi,rdi
  4217fa:	jns    421805 <flatcc_json_printer_int64@@Base+0x25>
  4217fc:	mov    BYTE PTR [rsi],0x2d
  4217ff:	neg    rdi
  421802:	inc    rsi
  421805:	call   41fc30 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  42180a:	add    eax,ebp
  42180c:	cdqe   
  42180e:	add    QWORD PTR [rbx+0x28],rax
  421812:	pop    rbx
  421813:	pop    rbp
  421814:	ret    
  421815:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000421820 <flatcc_json_printer_float@@Base>:
  421820:	endbr64 
  421824:	push   rbx
  421825:	mov    rbx,rdi
  421828:	vcvtss2sd xmm0,xmm0,xmm0
  42182c:	mov    rdi,QWORD PTR [rdi+0x28]
  421830:	call   4207b0 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  421835:	cdqe   
  421837:	add    QWORD PTR [rbx+0x28],rax
  42183b:	pop    rbx
  42183c:	ret    
  42183d:	nop    DWORD PTR [rax]

0000000000421840 <flatcc_json_printer_double@@Base>:
  421840:	endbr64 
  421844:	push   rbx
  421845:	mov    rbx,rdi
  421848:	mov    rdi,QWORD PTR [rdi+0x28]
  42184c:	call   4207b0 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  421851:	cdqe   
  421853:	add    QWORD PTR [rbx+0x28],rax
  421857:	pop    rbx
  421858:	ret    
  421859:	nop    DWORD PTR [rax+0x0]

0000000000421860 <flatcc_json_printer_enum@@Base>:
  421860:	endbr64 
  421864:	push   rbp
  421865:	movsxd rbp,edx
  421868:	mov    rdx,rbp
  42186b:	push   rbx
  42186c:	mov    rbx,rdi
  42186f:	sub    rsp,0x8
  421873:	mov    rax,QWORD PTR [rdi+0x28]
  421877:	mov    BYTE PTR [rax],0x22
  42187a:	cmp    BYTE PTR [rdi+0x32],0x0
  42187e:	sete   dil
  421882:	movzx  edi,dil
  421886:	add    rdi,QWORD PTR [rbx+0x28]
  42188a:	lea    rax,[rdi+rbp*1]
  42188e:	mov    QWORD PTR [rbx+0x28],rdi
  421892:	cmp    QWORD PTR [rbx+0x20],rax
  421896:	jbe    4218c0 <flatcc_json_printer_enum@@Base+0x60>
  421898:	call   406210 <memcpy@plt>
  42189d:	add    rbp,QWORD PTR [rbx+0x28]
  4218a1:	mov    QWORD PTR [rbx+0x28],rbp
  4218a5:	mov    BYTE PTR [rbp+0x0],0x22
  4218a9:	xor    eax,eax
  4218ab:	cmp    BYTE PTR [rbx+0x32],0x0
  4218af:	sete   al
  4218b2:	add    QWORD PTR [rbx+0x28],rax
  4218b6:	add    rsp,0x8
  4218ba:	pop    rbx
  4218bb:	pop    rbp
  4218bc:	ret    
  4218bd:	nop    DWORD PTR [rax]
  4218c0:	mov    rdi,rbx
  4218c3:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4218c8:	mov    rbp,QWORD PTR [rbx+0x28]
  4218cc:	jmp    4218a5 <flatcc_json_printer_enum@@Base+0x45>
  4218ce:	xchg   ax,ax

00000000004218d0 <flatcc_json_printer_delimit_enum_flags@@Base>:
  4218d0:	endbr64 
  4218d4:	cmp    BYTE PTR [rdi+0x32],0x0
  4218d8:	sete   al
  4218db:	test   esi,esi
  4218dd:	setne  dl
  4218e0:	or     eax,edx
  4218e2:	mov    rdx,QWORD PTR [rdi+0x28]
  4218e6:	movzx  eax,al
  4218e9:	mov    BYTE PTR [rdx],0x22
  4218ec:	add    QWORD PTR [rdi+0x28],rax
  4218f0:	ret    
  4218f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4218fc:	nop    DWORD PTR [rax+0x0]

0000000000421900 <flatcc_json_printer_enum_flag@@Base>:
  421900:	endbr64 
  421904:	push   rbp
  421905:	movsxd rbp,ecx
  421908:	mov    r8,rdx
  42190b:	push   rbx
  42190c:	sub    rsp,0x8
  421910:	mov    rax,QWORD PTR [rdi+0x28]
  421914:	mov    BYTE PTR [rax],0x20
  421917:	xor    eax,eax
  421919:	test   esi,esi
  42191b:	setg   al
  42191e:	add    rax,QWORD PTR [rdi+0x28]
  421922:	lea    rdx,[rax+rbp*1]
  421926:	mov    QWORD PTR [rdi+0x28],rax
  42192a:	cmp    QWORD PTR [rdi+0x20],rdx
  42192e:	ja     421948 <flatcc_json_printer_enum_flag@@Base+0x48>
  421930:	add    rsp,0x8
  421934:	pop    rbx
  421935:	mov    rdx,rbp
  421938:	mov    rsi,r8
  42193b:	pop    rbp
  42193c:	jmp    4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  421941:	nop    DWORD PTR [rax+0x0]
  421948:	mov    rbx,rdi
  42194b:	mov    rdx,rbp
  42194e:	mov    rsi,r8
  421951:	mov    rdi,rax
  421954:	call   406210 <memcpy@plt>
  421959:	add    QWORD PTR [rbx+0x28],rbp
  42195d:	add    rsp,0x8
  421961:	pop    rbx
  421962:	pop    rbp
  421963:	ret    
  421964:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  42196f:	nop

0000000000421970 <flatcc_json_printer_string_field@@Base>:
  421970:	endbr64 
  421974:	lea    eax,[rdx+rdx*1+0x4]
  421978:	cmp    eax,DWORD PTR [rsi+0x10]
  42197b:	jge    421ae0 <flatcc_json_printer_string_field@@Base+0x170>
  421981:	mov    rdx,QWORD PTR [rsi+0x8]
  421985:	movzx  eax,WORD PTR [rdx+rax*1]
  421989:	test   ax,ax
  42198c:	je     421ae0 <flatcc_json_printer_string_field@@Base+0x170>
  421992:	push   r14
  421994:	push   r13
  421996:	push   r12
  421998:	push   rbp
  421999:	push   rbx
  42199a:	add    rax,QWORD PTR [rsi]
  42199d:	mov    r12,rax
  4219a0:	je     421a68 <flatcc_json_printer_string_field@@Base+0xf8>
  4219a6:	mov    edx,DWORD PTR [rsi+0x18]
  4219a9:	lea    eax,[rdx+0x1]
  4219ac:	mov    DWORD PTR [rsi+0x18],eax
  4219af:	mov    rax,QWORD PTR [rdi+0x28]
  4219b3:	test   edx,edx
  4219b5:	je     4219c6 <flatcc_json_printer_string_field@@Base+0x56>
  4219b7:	lea    rdx,[rax+0x1]
  4219bb:	mov    QWORD PTR [rdi+0x28],rdx
  4219bf:	mov    BYTE PTR [rax],0x2c
  4219c2:	mov    rax,QWORD PTR [rdi+0x28]
  4219c6:	cmp    BYTE PTR [rdi+0x31],0x0
  4219ca:	mov    r14,rcx
  4219cd:	mov    rbx,rdi
  4219d0:	movsxd rbp,r8d
  4219d3:	jne    421aa0 <flatcc_json_printer_string_field@@Base+0x130>
  4219d9:	cmp    QWORD PTR [rdi+0x20],rax
  4219dd:	jbe    421a90 <flatcc_json_printer_string_field@@Base+0x120>
  4219e3:	mov    BYTE PTR [rax],0x22
  4219e6:	xor    edi,edi
  4219e8:	mov    rdx,rbp
  4219eb:	cmp    BYTE PTR [rbx+0x32],0x0
  4219ef:	sete   dil
  4219f3:	add    rdi,QWORD PTR [rbx+0x28]
  4219f7:	lea    rax,[rdi+rbp*1]
  4219fb:	mov    QWORD PTR [rbx+0x28],rdi
  4219ff:	mov    rsi,r14
  421a02:	cmp    QWORD PTR [rbx+0x20],rax
  421a06:	jbe    421a78 <flatcc_json_printer_string_field@@Base+0x108>
  421a08:	call   406210 <memcpy@plt>
  421a0d:	add    rbp,QWORD PTR [rbx+0x28]
  421a11:	mov    QWORD PTR [rbx+0x28],rbp
  421a15:	mov    BYTE PTR [rbp+0x0],0x22
  421a19:	xor    eax,eax
  421a1b:	mov    rdi,rbx
  421a1e:	cmp    BYTE PTR [rbx+0x32],0x0
  421a22:	sete   al
  421a25:	add    rax,QWORD PTR [rbx+0x28]
  421a29:	lea    rdx,[rax+0x1]
  421a2d:	mov    QWORD PTR [rbx+0x28],rdx
  421a31:	mov    BYTE PTR [rax],0x3a
  421a34:	mov    rax,QWORD PTR [rbx+0x28]
  421a38:	mov    BYTE PTR [rax],0x20
  421a3b:	xor    eax,eax
  421a3d:	cmp    BYTE PTR [rbx+0x31],0x0
  421a41:	setne  al
  421a44:	add    QWORD PTR [rbx+0x28],rax
  421a48:	mov    eax,DWORD PTR [r12]
  421a4c:	add    rax,r12
  421a4f:	pop    rbx
  421a50:	pop    rbp
  421a51:	pop    r12
  421a53:	pop    r13
  421a55:	mov    edx,DWORD PTR [rax]
  421a57:	lea    rsi,[rax+0x4]
  421a5b:	pop    r14
  421a5d:	jmp    421160 <flatcc_json_parser_struct_as_root@@Base+0x1920>
  421a62:	nop    WORD PTR [rax+rax*1+0x0]
  421a68:	pop    rbx
  421a69:	pop    rbp
  421a6a:	pop    r12
  421a6c:	pop    r13
  421a6e:	pop    r14
  421a70:	ret    
  421a71:	nop    DWORD PTR [rax+0x0]
  421a78:	mov    rdi,rbx
  421a7b:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  421a80:	mov    rbp,QWORD PTR [rbx+0x28]
  421a84:	jmp    421a15 <flatcc_json_printer_string_field@@Base+0xa5>
  421a86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  421a90:	xor    esi,esi
  421a92:	call   QWORD PTR [rdi+0x48]
  421a95:	mov    rax,QWORD PTR [rbx+0x28]
  421a99:	jmp    4219e3 <flatcc_json_printer_string_field@@Base+0x73>
  421a9e:	xchg   ax,ax
  421aa0:	lea    rdx,[rax+0x1]
  421aa4:	mov    QWORD PTR [rdi+0x28],rdx
  421aa8:	mov    BYTE PTR [rax],0xa
  421aab:	movzx  eax,BYTE PTR [rdi+0x31]
  421aaf:	imul   eax,DWORD PTR [rdi+0x38]
  421ab3:	mov    rdi,QWORD PTR [rdi+0x28]
  421ab7:	movsxd r13,eax
  421aba:	lea    rax,[rdi+r13*1]
  421abe:	cmp    QWORD PTR [rbx+0x20],rax
  421ac2:	jae    421ae8 <flatcc_json_printer_string_field@@Base+0x178>
  421ac4:	mov    rsi,r13
  421ac7:	mov    rdi,rbx
  421aca:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  421acf:	mov    rax,QWORD PTR [rbx+0x28]
  421ad3:	jmp    4219e3 <flatcc_json_printer_string_field@@Base+0x73>
  421ad8:	nop    DWORD PTR [rax+rax*1+0x0]
  421ae0:	ret    
  421ae1:	nop    DWORD PTR [rax+0x0]
  421ae8:	mov    rdx,r13
  421aeb:	mov    esi,0x20
  421af0:	call   4061c0 <memset@plt>
  421af5:	mov    rax,QWORD PTR [rbx+0x28]
  421af9:	add    rax,r13
  421afc:	mov    QWORD PTR [rbx+0x28],rax
  421b00:	jmp    4219e3 <flatcc_json_printer_string_field@@Base+0x73>
  421b05:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000421b10 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
  421b10:	endbr64 
  421b14:	push   r15
  421b16:	push   r14
  421b18:	push   r13
  421b1a:	push   r12
  421b1c:	push   rbp
  421b1d:	push   rbx
  421b1e:	sub    rsp,0x38
  421b22:	mov    rax,QWORD PTR fs:0x28
  421b2b:	mov    QWORD PTR [rsp+0x28],rax
  421b30:	xor    eax,eax
  421b32:	lea    eax,[rdx+rdx*1+0x4]
  421b36:	cmp    eax,DWORD PTR [rsi+0x10]
  421b39:	jge    421d5c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x24c>
  421b3f:	mov    rdx,QWORD PTR [rsi+0x8]
  421b43:	movzx  ebp,WORD PTR [rdx+rax*1]
  421b47:	test   bp,bp
  421b4a:	je     421d5c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x24c>
  421b50:	xor    r13d,r13d
  421b53:	test   r9d,r9d
  421b56:	setne  r13b
  421b5a:	mov    eax,r13d
  421b5d:	or     al,0x80
  421b5f:	mov    DWORD PTR [rsp+0xc],eax
  421b63:	add    rbp,QWORD PTR [rsi]
  421b66:	je     421d5c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x24c>
  421b6c:	mov    eax,DWORD PTR [rsi+0x18]
  421b6f:	mov    rbx,rdi
  421b72:	lea    edx,[rax+0x1]
  421b75:	mov    DWORD PTR [rsi+0x18],edx
  421b78:	mov    r14,rcx
  421b7b:	mov    rsi,QWORD PTR [rdi+0x28]
  421b7f:	test   eax,eax
  421b81:	je     421b92 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x82>
  421b83:	lea    rax,[rsi+0x1]
  421b87:	mov    QWORD PTR [rdi+0x28],rax
  421b8b:	mov    BYTE PTR [rsi],0x2c
  421b8e:	mov    rsi,QWORD PTR [rdi+0x28]
  421b92:	cmp    BYTE PTR [rbx+0x31],0x0
  421b96:	movsxd r15,r8d
  421b99:	jne    421d80 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x270>
  421b9f:	cmp    QWORD PTR [rbx+0x20],rsi
  421ba3:	ja     421bb1 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa1>
  421ba5:	xor    esi,esi
  421ba7:	mov    rdi,rbx
  421baa:	call   QWORD PTR [rbx+0x48]
  421bad:	mov    rsi,QWORD PTR [rbx+0x28]
  421bb1:	mov    BYTE PTR [rsi],0x22
  421bb4:	xor    edi,edi
  421bb6:	mov    rdx,r15
  421bb9:	cmp    BYTE PTR [rbx+0x32],0x0
  421bbd:	sete   dil
  421bc1:	add    rdi,QWORD PTR [rbx+0x28]
  421bc5:	lea    rax,[rdi+r15*1]
  421bc9:	mov    QWORD PTR [rbx+0x28],rdi
  421bcd:	mov    rsi,r14
  421bd0:	cmp    QWORD PTR [rbx+0x20],rax
  421bd4:	jbe    421dc0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2b0>
  421bda:	call   406210 <memcpy@plt>
  421bdf:	mov    r8,QWORD PTR [rbx+0x28]
  421be3:	add    r8,r15
  421be6:	mov    QWORD PTR [rbx+0x28],r8
  421bea:	mov    BYTE PTR [r8],0x22
  421bee:	xor    eax,eax
  421bf0:	movabs r12,0xaaaaaaaaaaaaaaab
  421bfa:	cmp    BYTE PTR [rbx+0x32],0x0
  421bfe:	sete   al
  421c01:	add    rax,QWORD PTR [rbx+0x28]
  421c05:	lea    rdx,[rax+0x1]
  421c09:	mov    QWORD PTR [rbx+0x28],rdx
  421c0d:	mov    BYTE PTR [rax],0x3a
  421c10:	mov    rax,QWORD PTR [rbx+0x28]
  421c14:	mov    BYTE PTR [rax],0x20
  421c17:	xor    eax,eax
  421c19:	mov    edx,DWORD PTR [rbp+0x0]
  421c1c:	cmp    BYTE PTR [rbx+0x31],0x0
  421c20:	setne  al
  421c23:	add    rbp,rdx
  421c26:	add    rax,QWORD PTR [rbx+0x28]
  421c2a:	mov    ecx,DWORD PTR [rbp+0x0]
  421c2d:	lea    rdx,[rax+0x1]
  421c31:	mov    QWORD PTR [rbx+0x28],rdx
  421c35:	mov    QWORD PTR [rsp+0x18],rcx
  421c3a:	mov    BYTE PTR [rax],0x22
  421c3d:	add    rbp,0x4
  421c41:	mov    rax,QWORD PTR [rsp+0x18]
  421c46:	mov    rdi,QWORD PTR [rbx+0x28]
  421c4a:	lea    rdx,[rax*4+0x0]
  421c52:	mov    rax,rdx
  421c55:	mul    r12
  421c58:	shr    rdx,1
  421c5b:	mov    r8,rdx
  421c5e:	add    r8,0x3
  421c62:	mov    r15,r8
  421c65:	and    r15,0xfffffffffffffffc
  421c69:	lea    rax,[rdi+r15*1]
  421c6d:	cmp    rax,QWORD PTR [rbx+0x20]
  421c71:	jb     421d38 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x228>
  421c77:	mov    rdi,rbx
  421c7a:	xor    esi,esi
  421c7c:	call   QWORD PTR [rbx+0x48]
  421c7f:	mov    rdi,QWORD PTR [rbx+0x28]
  421c83:	mov    r11,QWORD PTR [rbx+0x20]
  421c87:	lea    rax,[rdi+r15*1]
  421c8b:	cmp    rax,r11
  421c8e:	jbe    421d38 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x228>
  421c94:	sub    r11,rdi
  421c97:	and    r11,0xfffffffffffffffc
  421c9b:	lea    rax,[r11+r11*2]
  421c9f:	mov    r15,rax
  421ca2:	shr    r15,0x2
  421ca6:	cmp    rax,0x3
  421caa:	jbe    421df5 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2e5>
  421cb0:	lea    r14,[rsp+0x20]
  421cb5:	jmp    421cdc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1cc>
  421cb7:	nop    WORD PTR [rax+rax*1+0x0]
  421cc0:	sub    r11,rdi
  421cc3:	and    r11,0xfffffffffffffffc
  421cc7:	lea    rax,[r11+r11*2]
  421ccb:	mov    r15,rax
  421cce:	shr    r15,0x2
  421cd2:	cmp    rax,0x3
  421cd6:	jbe    421df5 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2e5>
  421cdc:	mov    rdx,r14
  421cdf:	mov    rsi,rbp
  421ce2:	mov    ecx,r13d
  421ce5:	mov    QWORD PTR [rsp+0x20],r15
  421cea:	call   420fe0 <flatcc_json_parser_struct_as_root@@Base+0x17a0>
  421cef:	add    QWORD PTR [rbx+0x28],r11
  421cf3:	sub    QWORD PTR [rsp+0x18],r15
  421cf8:	mov    rdi,rbx
  421cfb:	xor    esi,esi
  421cfd:	add    rbp,r15
  421d00:	call   QWORD PTR [rbx+0x48]
  421d03:	mov    rax,QWORD PTR [rsp+0x18]
  421d08:	mov    rdi,QWORD PTR [rbx+0x28]
  421d0c:	lea    rdx,[rax*4+0x0]
  421d14:	mov    rax,rdx
  421d17:	mul    r12
  421d1a:	mov    r11,QWORD PTR [rbx+0x20]
  421d1e:	shr    rdx,1
  421d21:	mov    r8,rdx
  421d24:	add    r8,0x3
  421d28:	and    r8,0xfffffffffffffffc
  421d2c:	lea    rax,[rdi+r8*1]
  421d30:	mov    r15,r8
  421d33:	cmp    r11,rax
  421d36:	jb     421cc0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1b0>
  421d38:	mov    ecx,DWORD PTR [rsp+0xc]
  421d3c:	lea    rdx,[rsp+0x18]
  421d41:	mov    rsi,rbp
  421d44:	call   420fe0 <flatcc_json_parser_struct_as_root@@Base+0x17a0>
  421d49:	mov    r8,QWORD PTR [rbx+0x28]
  421d4d:	add    r8,r15
  421d50:	lea    rax,[r8+0x1]
  421d54:	mov    QWORD PTR [rbx+0x28],rax
  421d58:	mov    BYTE PTR [r8],0x22
  421d5c:	mov    rax,QWORD PTR [rsp+0x28]
  421d61:	xor    rax,QWORD PTR fs:0x28
  421d6a:	jne    421e14 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x304>
  421d70:	add    rsp,0x38
  421d74:	pop    rbx
  421d75:	pop    rbp
  421d76:	pop    r12
  421d78:	pop    r13
  421d7a:	pop    r14
  421d7c:	pop    r15
  421d7e:	ret    
  421d7f:	nop
  421d80:	lea    rax,[rsi+0x1]
  421d84:	mov    QWORD PTR [rbx+0x28],rax
  421d88:	mov    BYTE PTR [rsi],0xa
  421d8b:	movzx  esi,BYTE PTR [rbx+0x31]
  421d8f:	mov    rdi,QWORD PTR [rbx+0x28]
  421d93:	imul   esi,DWORD PTR [rbx+0x38]
  421d97:	movsxd r12,esi
  421d9a:	lea    rax,[rdi+r12*1]
  421d9e:	cmp    QWORD PTR [rbx+0x20],rax
  421da2:	jae    421dd8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2c8>
  421da4:	mov    rsi,r12
  421da7:	mov    rdi,rbx
  421daa:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  421daf:	mov    rsi,QWORD PTR [rbx+0x28]
  421db3:	jmp    421bb1 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa1>
  421db8:	nop    DWORD PTR [rax+rax*1+0x0]
  421dc0:	mov    rdi,rbx
  421dc3:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  421dc8:	mov    r8,QWORD PTR [rbx+0x28]
  421dcc:	jmp    421bea <flatcc_json_printer_uint8_vector_base64_field@@Base+0xda>
  421dd1:	nop    DWORD PTR [rax+0x0]
  421dd8:	mov    esi,0x20
  421ddd:	mov    rdx,r12
  421de0:	call   4061c0 <memset@plt>
  421de5:	mov    rsi,QWORD PTR [rbx+0x28]
  421de9:	add    rsi,r12
  421dec:	mov    QWORD PTR [rbx+0x28],rsi
  421df0:	jmp    421bb1 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa1>
  421df5:	lea    rcx,[rip+0xedc4]        # 430bc0 <flatcc_builder_padding_base@@Base+0x1ea0>
  421dfc:	mov    edx,0x115
  421e01:	lea    rsi,[rip+0xeb68]        # 430970 <flatcc_builder_padding_base@@Base+0x1c50>
  421e08:	lea    rdi,[rip+0xed07]        # 430b16 <flatcc_builder_padding_base@@Base+0x1df6>
  421e0f:	call   4061b0 <__assert_fail@plt>
  421e14:	call   4061a0 <__stack_chk_fail@plt>
  421e19:	nop    DWORD PTR [rax+0x0]

0000000000421e20 <flatcc_json_printer_uint8_field@@Base>:
  421e20:	endbr64 
  421e24:	push   r14
  421e26:	lea    eax,[rdx+rdx*1+0x4]
  421e2a:	push   r13
  421e2c:	push   r12
  421e2e:	push   rbp
  421e2f:	push   rbx
  421e30:	cmp    eax,DWORD PTR [rsi+0x10]
  421e33:	jge    421f28 <flatcc_json_printer_uint8_field@@Base+0x108>
  421e39:	mov    rdx,QWORD PTR [rsi+0x8]
  421e3d:	movzx  eax,WORD PTR [rdx+rax*1]
  421e41:	test   ax,ax
  421e44:	je     421f28 <flatcc_json_printer_uint8_field@@Base+0x108>
  421e4a:	add    rax,QWORD PTR [rsi]
  421e4d:	je     421f28 <flatcc_json_printer_uint8_field@@Base+0x108>
  421e53:	movzx  r13d,BYTE PTR [rax]
  421e57:	cmp    r9b,r13b
  421e5a:	je     421fb0 <flatcc_json_printer_uint8_field@@Base+0x190>
  421e60:	mov    eax,DWORD PTR [rsi+0x18]
  421e63:	lea    edx,[rax+0x1]
  421e66:	mov    DWORD PTR [rsi+0x18],edx
  421e69:	mov    rdx,QWORD PTR [rdi+0x28]
  421e6d:	test   eax,eax
  421e6f:	je     421e80 <flatcc_json_printer_uint8_field@@Base+0x60>
  421e71:	lea    rax,[rdx+0x1]
  421e75:	mov    QWORD PTR [rdi+0x28],rax
  421e79:	mov    BYTE PTR [rdx],0x2c
  421e7c:	mov    rdx,QWORD PTR [rdi+0x28]
  421e80:	cmp    BYTE PTR [rdi+0x31],0x0
  421e84:	mov    r14,rcx
  421e87:	mov    rbx,rdi
  421e8a:	movsxd rbp,r8d
  421e8d:	jne    421f50 <flatcc_json_printer_uint8_field@@Base+0x130>
  421e93:	cmp    QWORD PTR [rdi+0x20],rdx
  421e97:	ja     421ea2 <flatcc_json_printer_uint8_field@@Base+0x82>
  421e99:	xor    esi,esi
  421e9b:	call   QWORD PTR [rdi+0x48]
  421e9e:	mov    rdx,QWORD PTR [rbx+0x28]
  421ea2:	mov    BYTE PTR [rdx],0x22
  421ea5:	xor    edi,edi
  421ea7:	mov    rdx,rbp
  421eaa:	cmp    BYTE PTR [rbx+0x32],0x0
  421eae:	sete   dil
  421eb2:	add    rdi,QWORD PTR [rbx+0x28]
  421eb6:	lea    rax,[rdi+rbp*1]
  421eba:	mov    QWORD PTR [rbx+0x28],rdi
  421ebe:	mov    rsi,r14
  421ec1:	cmp    QWORD PTR [rbx+0x20],rax
  421ec5:	jbe    421f40 <flatcc_json_printer_uint8_field@@Base+0x120>
  421ec7:	call   406210 <memcpy@plt>
  421ecc:	add    rbp,QWORD PTR [rbx+0x28]
  421ed0:	mov    QWORD PTR [rbx+0x28],rbp
  421ed4:	mov    BYTE PTR [rbp+0x0],0x22
  421ed8:	xor    eax,eax
  421eda:	movzx  edi,r13b
  421ede:	cmp    BYTE PTR [rbx+0x32],0x0
  421ee2:	sete   al
  421ee5:	add    rax,QWORD PTR [rbx+0x28]
  421ee9:	lea    rdx,[rax+0x1]
  421eed:	mov    QWORD PTR [rbx+0x28],rdx
  421ef1:	mov    BYTE PTR [rax],0x3a
  421ef4:	xor    esi,esi
  421ef6:	mov    rax,QWORD PTR [rbx+0x28]
  421efa:	mov    BYTE PTR [rax],0x20
  421efd:	cmp    BYTE PTR [rbx+0x31],0x0
  421f01:	setne  sil
  421f05:	add    rsi,QWORD PTR [rbx+0x28]
  421f09:	mov    QWORD PTR [rbx+0x28],rsi
  421f0d:	call   4205c0 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  421f12:	cdqe   
  421f14:	add    QWORD PTR [rbx+0x28],rax
  421f18:	pop    rbx
  421f19:	pop    rbp
  421f1a:	pop    r12
  421f1c:	pop    r13
  421f1e:	pop    r14
  421f20:	ret    
  421f21:	nop    DWORD PTR [rax+0x0]
  421f28:	cmp    BYTE PTR [rdi+0x35],0x0
  421f2c:	je     421f18 <flatcc_json_printer_uint8_field@@Base+0xf8>
  421f2e:	mov    r13d,r9d
  421f31:	jmp    421e60 <flatcc_json_printer_uint8_field@@Base+0x40>
  421f36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  421f40:	mov    rdi,rbx
  421f43:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  421f48:	mov    rbp,QWORD PTR [rbx+0x28]
  421f4c:	jmp    421ed4 <flatcc_json_printer_uint8_field@@Base+0xb4>
  421f4e:	xchg   ax,ax
  421f50:	lea    rax,[rdx+0x1]
  421f54:	mov    QWORD PTR [rdi+0x28],rax
  421f58:	mov    BYTE PTR [rdx],0xa
  421f5b:	movzx  edx,BYTE PTR [rdi+0x31]
  421f5f:	imul   edx,DWORD PTR [rdi+0x38]
  421f63:	mov    rdi,QWORD PTR [rdi+0x28]
  421f67:	movsxd r12,edx
  421f6a:	lea    rax,[rdi+r12*1]
  421f6e:	cmp    QWORD PTR [rbx+0x20],rax
  421f72:	jae    421f90 <flatcc_json_printer_uint8_field@@Base+0x170>
  421f74:	mov    rsi,r12
  421f77:	mov    rdi,rbx
  421f7a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  421f7f:	mov    rdx,QWORD PTR [rbx+0x28]
  421f83:	jmp    421ea2 <flatcc_json_printer_uint8_field@@Base+0x82>
  421f88:	nop    DWORD PTR [rax+rax*1+0x0]
  421f90:	mov    rdx,r12
  421f93:	mov    esi,0x20
  421f98:	call   4061c0 <memset@plt>
  421f9d:	mov    rdx,QWORD PTR [rbx+0x28]
  421fa1:	add    rdx,r12
  421fa4:	mov    QWORD PTR [rbx+0x28],rdx
  421fa8:	jmp    421ea2 <flatcc_json_printer_uint8_field@@Base+0x82>
  421fad:	nop    DWORD PTR [rax]
  421fb0:	cmp    BYTE PTR [rdi+0x34],0x0
  421fb4:	je     421e60 <flatcc_json_printer_uint8_field@@Base+0x40>
  421fba:	jmp    421f18 <flatcc_json_printer_uint8_field@@Base+0xf8>
  421fbf:	nop

0000000000421fc0 <flatcc_json_printer_uint16_field@@Base>:
  421fc0:	endbr64 
  421fc4:	push   r14
  421fc6:	lea    eax,[rdx+rdx*1+0x4]
  421fca:	push   r13
  421fcc:	push   r12
  421fce:	push   rbp
  421fcf:	push   rbx
  421fd0:	cmp    eax,DWORD PTR [rsi+0x10]
  421fd3:	jge    4220c8 <flatcc_json_printer_uint16_field@@Base+0x108>
  421fd9:	mov    rdx,QWORD PTR [rsi+0x8]
  421fdd:	movzx  eax,WORD PTR [rdx+rax*1]
  421fe1:	test   ax,ax
  421fe4:	je     4220c8 <flatcc_json_printer_uint16_field@@Base+0x108>
  421fea:	add    rax,QWORD PTR [rsi]
  421fed:	je     4220c8 <flatcc_json_printer_uint16_field@@Base+0x108>
  421ff3:	movzx  r13d,WORD PTR [rax]
  421ff7:	cmp    r9w,r13w
  421ffb:	je     422150 <flatcc_json_printer_uint16_field@@Base+0x190>
  422001:	mov    eax,DWORD PTR [rsi+0x18]
  422004:	lea    edx,[rax+0x1]
  422007:	mov    DWORD PTR [rsi+0x18],edx
  42200a:	mov    rdx,QWORD PTR [rdi+0x28]
  42200e:	test   eax,eax
  422010:	je     422021 <flatcc_json_printer_uint16_field@@Base+0x61>
  422012:	lea    rax,[rdx+0x1]
  422016:	mov    QWORD PTR [rdi+0x28],rax
  42201a:	mov    BYTE PTR [rdx],0x2c
  42201d:	mov    rdx,QWORD PTR [rdi+0x28]
  422021:	cmp    BYTE PTR [rdi+0x31],0x0
  422025:	mov    r14,rcx
  422028:	mov    rbx,rdi
  42202b:	movsxd rbp,r8d
  42202e:	jne    4220f0 <flatcc_json_printer_uint16_field@@Base+0x130>
  422034:	cmp    QWORD PTR [rdi+0x20],rdx
  422038:	ja     422043 <flatcc_json_printer_uint16_field@@Base+0x83>
  42203a:	xor    esi,esi
  42203c:	call   QWORD PTR [rdi+0x48]
  42203f:	mov    rdx,QWORD PTR [rbx+0x28]
  422043:	mov    BYTE PTR [rdx],0x22
  422046:	xor    edi,edi
  422048:	mov    rdx,rbp
  42204b:	cmp    BYTE PTR [rbx+0x32],0x0
  42204f:	sete   dil
  422053:	add    rdi,QWORD PTR [rbx+0x28]
  422057:	lea    rax,[rdi+rbp*1]
  42205b:	mov    QWORD PTR [rbx+0x28],rdi
  42205f:	mov    rsi,r14
  422062:	cmp    QWORD PTR [rbx+0x20],rax
  422066:	jbe    4220e0 <flatcc_json_printer_uint16_field@@Base+0x120>
  422068:	call   406210 <memcpy@plt>
  42206d:	add    rbp,QWORD PTR [rbx+0x28]
  422071:	mov    QWORD PTR [rbx+0x28],rbp
  422075:	mov    BYTE PTR [rbp+0x0],0x22
  422079:	xor    eax,eax
  42207b:	movzx  edi,r13w
  42207f:	cmp    BYTE PTR [rbx+0x32],0x0
  422083:	sete   al
  422086:	add    rax,QWORD PTR [rbx+0x28]
  42208a:	lea    rdx,[rax+0x1]
  42208e:	mov    QWORD PTR [rbx+0x28],rdx
  422092:	mov    BYTE PTR [rax],0x3a
  422095:	xor    esi,esi
  422097:	mov    rax,QWORD PTR [rbx+0x28]
  42209b:	mov    BYTE PTR [rax],0x20
  42209e:	cmp    BYTE PTR [rbx+0x31],0x0
  4220a2:	setne  sil
  4220a6:	add    rsi,QWORD PTR [rbx+0x28]
  4220aa:	mov    QWORD PTR [rbx+0x28],rsi
  4220ae:	call   41f850 <flatcc_json_parser_struct_as_root@@Base+0x10>
  4220b3:	cdqe   
  4220b5:	add    QWORD PTR [rbx+0x28],rax
  4220b9:	pop    rbx
  4220ba:	pop    rbp
  4220bb:	pop    r12
  4220bd:	pop    r13
  4220bf:	pop    r14
  4220c1:	ret    
  4220c2:	nop    WORD PTR [rax+rax*1+0x0]
  4220c8:	cmp    BYTE PTR [rdi+0x35],0x0
  4220cc:	je     4220b9 <flatcc_json_printer_uint16_field@@Base+0xf9>
  4220ce:	mov    r13d,r9d
  4220d1:	jmp    422001 <flatcc_json_printer_uint16_field@@Base+0x41>
  4220d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4220e0:	mov    rdi,rbx
  4220e3:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4220e8:	mov    rbp,QWORD PTR [rbx+0x28]
  4220ec:	jmp    422075 <flatcc_json_printer_uint16_field@@Base+0xb5>
  4220ee:	xchg   ax,ax
  4220f0:	lea    rax,[rdx+0x1]
  4220f4:	mov    QWORD PTR [rdi+0x28],rax
  4220f8:	mov    BYTE PTR [rdx],0xa
  4220fb:	movzx  edx,BYTE PTR [rdi+0x31]
  4220ff:	imul   edx,DWORD PTR [rdi+0x38]
  422103:	mov    rdi,QWORD PTR [rdi+0x28]
  422107:	movsxd r12,edx
  42210a:	lea    rax,[rdi+r12*1]
  42210e:	cmp    QWORD PTR [rbx+0x20],rax
  422112:	jae    422130 <flatcc_json_printer_uint16_field@@Base+0x170>
  422114:	mov    rsi,r12
  422117:	mov    rdi,rbx
  42211a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42211f:	mov    rdx,QWORD PTR [rbx+0x28]
  422123:	jmp    422043 <flatcc_json_printer_uint16_field@@Base+0x83>
  422128:	nop    DWORD PTR [rax+rax*1+0x0]
  422130:	mov    rdx,r12
  422133:	mov    esi,0x20
  422138:	call   4061c0 <memset@plt>
  42213d:	mov    rdx,QWORD PTR [rbx+0x28]
  422141:	add    rdx,r12
  422144:	mov    QWORD PTR [rbx+0x28],rdx
  422148:	jmp    422043 <flatcc_json_printer_uint16_field@@Base+0x83>
  42214d:	nop    DWORD PTR [rax]
  422150:	cmp    BYTE PTR [rdi+0x34],0x0
  422154:	je     422001 <flatcc_json_printer_uint16_field@@Base+0x41>
  42215a:	jmp    4220b9 <flatcc_json_printer_uint16_field@@Base+0xf9>
  42215f:	nop

0000000000422160 <flatcc_json_printer_uint32_field@@Base>:
  422160:	endbr64 
  422164:	push   r14
  422166:	lea    eax,[rdx+rdx*1+0x4]
  42216a:	push   r13
  42216c:	push   r12
  42216e:	push   rbp
  42216f:	push   rbx
  422170:	cmp    eax,DWORD PTR [rsi+0x10]
  422173:	jge    422260 <flatcc_json_printer_uint32_field@@Base+0x100>
  422179:	mov    rdx,QWORD PTR [rsi+0x8]
  42217d:	movzx  eax,WORD PTR [rdx+rax*1]
  422181:	test   ax,ax
  422184:	je     422260 <flatcc_json_printer_uint32_field@@Base+0x100>
  42218a:	add    rax,QWORD PTR [rsi]
  42218d:	je     422260 <flatcc_json_printer_uint32_field@@Base+0x100>
  422193:	mov    r13d,DWORD PTR [rax]
  422196:	cmp    r9d,r13d
  422199:	je     4222e0 <flatcc_json_printer_uint32_field@@Base+0x180>
  42219f:	mov    eax,DWORD PTR [rsi+0x18]
  4221a2:	lea    edx,[rax+0x1]
  4221a5:	mov    DWORD PTR [rsi+0x18],edx
  4221a8:	mov    rdx,QWORD PTR [rdi+0x28]
  4221ac:	test   eax,eax
  4221ae:	je     4221bf <flatcc_json_printer_uint32_field@@Base+0x5f>
  4221b0:	lea    rax,[rdx+0x1]
  4221b4:	mov    QWORD PTR [rdi+0x28],rax
  4221b8:	mov    BYTE PTR [rdx],0x2c
  4221bb:	mov    rdx,QWORD PTR [rdi+0x28]
  4221bf:	cmp    BYTE PTR [rdi+0x31],0x0
  4221c3:	mov    r14,rcx
  4221c6:	mov    rbx,rdi
  4221c9:	movsxd rbp,r8d
  4221cc:	jne    422280 <flatcc_json_printer_uint32_field@@Base+0x120>
  4221d2:	cmp    QWORD PTR [rdi+0x20],rdx
  4221d6:	ja     4221e1 <flatcc_json_printer_uint32_field@@Base+0x81>
  4221d8:	xor    esi,esi
  4221da:	call   QWORD PTR [rdi+0x48]
  4221dd:	mov    rdx,QWORD PTR [rbx+0x28]
  4221e1:	mov    BYTE PTR [rdx],0x22
  4221e4:	xor    edi,edi
  4221e6:	mov    rdx,rbp
  4221e9:	cmp    BYTE PTR [rbx+0x32],0x0
  4221ed:	sete   dil
  4221f1:	add    rdi,QWORD PTR [rbx+0x28]
  4221f5:	lea    rax,[rdi+rbp*1]
  4221f9:	mov    QWORD PTR [rbx+0x28],rdi
  4221fd:	mov    rsi,r14
  422200:	cmp    QWORD PTR [rbx+0x20],rax
  422204:	jbe    422270 <flatcc_json_printer_uint32_field@@Base+0x110>
  422206:	call   406210 <memcpy@plt>
  42220b:	add    rbp,QWORD PTR [rbx+0x28]
  42220f:	mov    QWORD PTR [rbx+0x28],rbp
  422213:	mov    BYTE PTR [rbp+0x0],0x22
  422217:	xor    eax,eax
  422219:	mov    edi,r13d
  42221c:	cmp    BYTE PTR [rbx+0x32],0x0
  422220:	sete   al
  422223:	add    rax,QWORD PTR [rbx+0x28]
  422227:	lea    rdx,[rax+0x1]
  42222b:	mov    QWORD PTR [rbx+0x28],rdx
  42222f:	mov    BYTE PTR [rax],0x3a
  422232:	xor    esi,esi
  422234:	mov    rax,QWORD PTR [rbx+0x28]
  422238:	mov    BYTE PTR [rax],0x20
  42223b:	cmp    BYTE PTR [rbx+0x31],0x0
  42223f:	setne  sil
  422243:	add    rsi,QWORD PTR [rbx+0x28]
  422247:	mov    QWORD PTR [rbx+0x28],rsi
  42224b:	call   41f980 <flatcc_json_parser_struct_as_root@@Base+0x140>
  422250:	cdqe   
  422252:	add    QWORD PTR [rbx+0x28],rax
  422256:	pop    rbx
  422257:	pop    rbp
  422258:	pop    r12
  42225a:	pop    r13
  42225c:	pop    r14
  42225e:	ret    
  42225f:	nop
  422260:	cmp    BYTE PTR [rdi+0x35],0x0
  422264:	je     422256 <flatcc_json_printer_uint32_field@@Base+0xf6>
  422266:	mov    r13d,r9d
  422269:	jmp    42219f <flatcc_json_printer_uint32_field@@Base+0x3f>
  42226e:	xchg   ax,ax
  422270:	mov    rdi,rbx
  422273:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  422278:	mov    rbp,QWORD PTR [rbx+0x28]
  42227c:	jmp    422213 <flatcc_json_printer_uint32_field@@Base+0xb3>
  42227e:	xchg   ax,ax
  422280:	lea    rax,[rdx+0x1]
  422284:	mov    QWORD PTR [rdi+0x28],rax
  422288:	mov    BYTE PTR [rdx],0xa
  42228b:	movzx  edx,BYTE PTR [rdi+0x31]
  42228f:	imul   edx,DWORD PTR [rdi+0x38]
  422293:	mov    rdi,QWORD PTR [rdi+0x28]
  422297:	movsxd r12,edx
  42229a:	lea    rax,[rdi+r12*1]
  42229e:	cmp    QWORD PTR [rbx+0x20],rax
  4222a2:	jae    4222c0 <flatcc_json_printer_uint32_field@@Base+0x160>
  4222a4:	mov    rsi,r12
  4222a7:	mov    rdi,rbx
  4222aa:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4222af:	mov    rdx,QWORD PTR [rbx+0x28]
  4222b3:	jmp    4221e1 <flatcc_json_printer_uint32_field@@Base+0x81>
  4222b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4222c0:	mov    rdx,r12
  4222c3:	mov    esi,0x20
  4222c8:	call   4061c0 <memset@plt>
  4222cd:	mov    rdx,QWORD PTR [rbx+0x28]
  4222d1:	add    rdx,r12
  4222d4:	mov    QWORD PTR [rbx+0x28],rdx
  4222d8:	jmp    4221e1 <flatcc_json_printer_uint32_field@@Base+0x81>
  4222dd:	nop    DWORD PTR [rax]
  4222e0:	cmp    BYTE PTR [rdi+0x34],0x0
  4222e4:	je     42219f <flatcc_json_printer_uint32_field@@Base+0x3f>
  4222ea:	jmp    422256 <flatcc_json_printer_uint32_field@@Base+0xf6>
  4222ef:	nop

00000000004222f0 <flatcc_json_printer_uint64_field@@Base>:
  4222f0:	endbr64 
  4222f4:	push   r14
  4222f6:	lea    eax,[rdx+rdx*1+0x4]
  4222fa:	push   r13
  4222fc:	push   r12
  4222fe:	push   rbp
  4222ff:	push   rbx
  422300:	cmp    eax,DWORD PTR [rsi+0x10]
  422303:	jge    4223f0 <flatcc_json_printer_uint64_field@@Base+0x100>
  422309:	mov    rdx,QWORD PTR [rsi+0x8]
  42230d:	movzx  eax,WORD PTR [rdx+rax*1]
  422311:	test   ax,ax
  422314:	je     4223f0 <flatcc_json_printer_uint64_field@@Base+0x100>
  42231a:	add    rax,QWORD PTR [rsi]
  42231d:	je     4223f0 <flatcc_json_printer_uint64_field@@Base+0x100>
  422323:	mov    r13,QWORD PTR [rax]
  422326:	cmp    r9,r13
  422329:	je     422470 <flatcc_json_printer_uint64_field@@Base+0x180>
  42232f:	mov    eax,DWORD PTR [rsi+0x18]
  422332:	lea    edx,[rax+0x1]
  422335:	mov    DWORD PTR [rsi+0x18],edx
  422338:	mov    rdx,QWORD PTR [rdi+0x28]
  42233c:	test   eax,eax
  42233e:	je     42234f <flatcc_json_printer_uint64_field@@Base+0x5f>
  422340:	lea    rax,[rdx+0x1]
  422344:	mov    QWORD PTR [rdi+0x28],rax
  422348:	mov    BYTE PTR [rdx],0x2c
  42234b:	mov    rdx,QWORD PTR [rdi+0x28]
  42234f:	cmp    BYTE PTR [rdi+0x31],0x0
  422353:	mov    r14,rcx
  422356:	mov    rbx,rdi
  422359:	movsxd rbp,r8d
  42235c:	jne    422410 <flatcc_json_printer_uint64_field@@Base+0x120>
  422362:	cmp    QWORD PTR [rdi+0x20],rdx
  422366:	ja     422371 <flatcc_json_printer_uint64_field@@Base+0x81>
  422368:	xor    esi,esi
  42236a:	call   QWORD PTR [rdi+0x48]
  42236d:	mov    rdx,QWORD PTR [rbx+0x28]
  422371:	mov    BYTE PTR [rdx],0x22
  422374:	xor    edi,edi
  422376:	mov    rdx,rbp
  422379:	cmp    BYTE PTR [rbx+0x32],0x0
  42237d:	sete   dil
  422381:	add    rdi,QWORD PTR [rbx+0x28]
  422385:	lea    rax,[rdi+rbp*1]
  422389:	mov    QWORD PTR [rbx+0x28],rdi
  42238d:	mov    rsi,r14
  422390:	cmp    QWORD PTR [rbx+0x20],rax
  422394:	jbe    422400 <flatcc_json_printer_uint64_field@@Base+0x110>
  422396:	call   406210 <memcpy@plt>
  42239b:	add    rbp,QWORD PTR [rbx+0x28]
  42239f:	mov    QWORD PTR [rbx+0x28],rbp
  4223a3:	mov    BYTE PTR [rbp+0x0],0x22
  4223a7:	xor    eax,eax
  4223a9:	mov    rdi,r13
  4223ac:	cmp    BYTE PTR [rbx+0x32],0x0
  4223b0:	sete   al
  4223b3:	add    rax,QWORD PTR [rbx+0x28]
  4223b7:	lea    rdx,[rax+0x1]
  4223bb:	mov    QWORD PTR [rbx+0x28],rdx
  4223bf:	mov    BYTE PTR [rax],0x3a
  4223c2:	xor    esi,esi
  4223c4:	mov    rax,QWORD PTR [rbx+0x28]
  4223c8:	mov    BYTE PTR [rax],0x20
  4223cb:	cmp    BYTE PTR [rbx+0x31],0x0
  4223cf:	setne  sil
  4223d3:	add    rsi,QWORD PTR [rbx+0x28]
  4223d7:	mov    QWORD PTR [rbx+0x28],rsi
  4223db:	call   41fc30 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  4223e0:	cdqe   
  4223e2:	add    QWORD PTR [rbx+0x28],rax
  4223e6:	pop    rbx
  4223e7:	pop    rbp
  4223e8:	pop    r12
  4223ea:	pop    r13
  4223ec:	pop    r14
  4223ee:	ret    
  4223ef:	nop
  4223f0:	cmp    BYTE PTR [rdi+0x35],0x0
  4223f4:	je     4223e6 <flatcc_json_printer_uint64_field@@Base+0xf6>
  4223f6:	mov    r13,r9
  4223f9:	jmp    42232f <flatcc_json_printer_uint64_field@@Base+0x3f>
  4223fe:	xchg   ax,ax
  422400:	mov    rdi,rbx
  422403:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  422408:	mov    rbp,QWORD PTR [rbx+0x28]
  42240c:	jmp    4223a3 <flatcc_json_printer_uint64_field@@Base+0xb3>
  42240e:	xchg   ax,ax
  422410:	lea    rax,[rdx+0x1]
  422414:	mov    QWORD PTR [rdi+0x28],rax
  422418:	mov    BYTE PTR [rdx],0xa
  42241b:	movzx  edx,BYTE PTR [rdi+0x31]
  42241f:	imul   edx,DWORD PTR [rdi+0x38]
  422423:	mov    rdi,QWORD PTR [rdi+0x28]
  422427:	movsxd r12,edx
  42242a:	lea    rax,[rdi+r12*1]
  42242e:	cmp    QWORD PTR [rbx+0x20],rax
  422432:	jae    422450 <flatcc_json_printer_uint64_field@@Base+0x160>
  422434:	mov    rsi,r12
  422437:	mov    rdi,rbx
  42243a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42243f:	mov    rdx,QWORD PTR [rbx+0x28]
  422443:	jmp    422371 <flatcc_json_printer_uint64_field@@Base+0x81>
  422448:	nop    DWORD PTR [rax+rax*1+0x0]
  422450:	mov    rdx,r12
  422453:	mov    esi,0x20
  422458:	call   4061c0 <memset@plt>
  42245d:	mov    rdx,QWORD PTR [rbx+0x28]
  422461:	add    rdx,r12
  422464:	mov    QWORD PTR [rbx+0x28],rdx
  422468:	jmp    422371 <flatcc_json_printer_uint64_field@@Base+0x81>
  42246d:	nop    DWORD PTR [rax]
  422470:	cmp    BYTE PTR [rdi+0x34],0x0
  422474:	je     42232f <flatcc_json_printer_uint64_field@@Base+0x3f>
  42247a:	jmp    4223e6 <flatcc_json_printer_uint64_field@@Base+0xf6>
  42247f:	nop

0000000000422480 <flatcc_json_printer_int8_field@@Base>:
  422480:	endbr64 
  422484:	push   r14
  422486:	lea    eax,[rdx+rdx*1+0x4]
  42248a:	push   r13
  42248c:	push   r12
  42248e:	push   rbp
  42248f:	push   rbx
  422490:	cmp    eax,DWORD PTR [rsi+0x10]
  422493:	jge    4225a0 <flatcc_json_printer_int8_field@@Base+0x120>
  422499:	mov    rdx,QWORD PTR [rsi+0x8]
  42249d:	movzx  eax,WORD PTR [rdx+rax*1]
  4224a1:	test   ax,ax
  4224a4:	je     4225a0 <flatcc_json_printer_int8_field@@Base+0x120>
  4224aa:	add    rax,QWORD PTR [rsi]
  4224ad:	je     4225a0 <flatcc_json_printer_int8_field@@Base+0x120>
  4224b3:	movzx  r13d,BYTE PTR [rax]
  4224b7:	cmp    r9b,r13b
  4224ba:	je     422620 <flatcc_json_printer_int8_field@@Base+0x1a0>
  4224c0:	mov    eax,DWORD PTR [rsi+0x18]
  4224c3:	lea    edx,[rax+0x1]
  4224c6:	mov    DWORD PTR [rsi+0x18],edx
  4224c9:	mov    rdx,QWORD PTR [rdi+0x28]
  4224cd:	test   eax,eax
  4224cf:	je     4224e0 <flatcc_json_printer_int8_field@@Base+0x60>
  4224d1:	lea    rax,[rdx+0x1]
  4224d5:	mov    QWORD PTR [rdi+0x28],rax
  4224d9:	mov    BYTE PTR [rdx],0x2c
  4224dc:	mov    rdx,QWORD PTR [rdi+0x28]
  4224e0:	cmp    BYTE PTR [rdi+0x31],0x0
  4224e4:	mov    r14,rcx
  4224e7:	mov    rbx,rdi
  4224ea:	movsxd rbp,r8d
  4224ed:	jne    4225c8 <flatcc_json_printer_int8_field@@Base+0x148>
  4224f3:	cmp    QWORD PTR [rdi+0x20],rdx
  4224f7:	ja     422502 <flatcc_json_printer_int8_field@@Base+0x82>
  4224f9:	xor    esi,esi
  4224fb:	call   QWORD PTR [rdi+0x48]
  4224fe:	mov    rdx,QWORD PTR [rbx+0x28]
  422502:	mov    BYTE PTR [rdx],0x22
  422505:	xor    edi,edi
  422507:	mov    rdx,rbp
  42250a:	cmp    BYTE PTR [rbx+0x32],0x0
  42250e:	sete   dil
  422512:	add    rdi,QWORD PTR [rbx+0x28]
  422516:	lea    rax,[rdi+rbp*1]
  42251a:	mov    QWORD PTR [rbx+0x28],rdi
  42251e:	mov    rsi,r14
  422521:	cmp    QWORD PTR [rbx+0x20],rax
  422525:	jbe    4225b0 <flatcc_json_printer_int8_field@@Base+0x130>
  42252b:	call   406210 <memcpy@plt>
  422530:	add    rbp,QWORD PTR [rbx+0x28]
  422534:	mov    QWORD PTR [rbx+0x28],rbp
  422538:	mov    BYTE PTR [rbp+0x0],0x22
  42253c:	xor    eax,eax
  42253e:	movsx  r8d,r13b
  422542:	cmp    BYTE PTR [rbx+0x32],0x0
  422546:	sete   al
  422549:	add    rax,QWORD PTR [rbx+0x28]
  42254d:	lea    rdx,[rax+0x1]
  422551:	mov    QWORD PTR [rbx+0x28],rdx
  422555:	mov    BYTE PTR [rax],0x3a
  422558:	xor    esi,esi
  42255a:	mov    rax,QWORD PTR [rbx+0x28]
  42255e:	mov    BYTE PTR [rax],0x20
  422561:	cmp    BYTE PTR [rbx+0x31],0x0
  422565:	setne  sil
  422569:	add    rsi,QWORD PTR [rbx+0x28]
  42256d:	mov    QWORD PTR [rbx+0x28],rsi
  422571:	shr    r8d,0x1f
  422575:	test   r13b,r13b
  422578:	jns    422583 <flatcc_json_printer_int8_field@@Base+0x103>
  42257a:	mov    BYTE PTR [rsi],0x2d
  42257d:	neg    r13d
  422580:	inc    rsi
  422583:	movzx  edi,r13b
  422587:	call   4205c0 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  42258c:	add    r8d,eax
  42258f:	movsxd r8,r8d
  422592:	add    QWORD PTR [rbx+0x28],r8
  422596:	pop    rbx
  422597:	pop    rbp
  422598:	pop    r12
  42259a:	pop    r13
  42259c:	pop    r14
  42259e:	ret    
  42259f:	nop
  4225a0:	cmp    BYTE PTR [rdi+0x35],0x0
  4225a4:	je     422596 <flatcc_json_printer_int8_field@@Base+0x116>
  4225a6:	mov    r13d,r9d
  4225a9:	jmp    4224c0 <flatcc_json_printer_int8_field@@Base+0x40>
  4225ae:	xchg   ax,ax
  4225b0:	mov    rdi,rbx
  4225b3:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4225b8:	mov    rbp,QWORD PTR [rbx+0x28]
  4225bc:	jmp    422538 <flatcc_json_printer_int8_field@@Base+0xb8>
  4225c1:	nop    DWORD PTR [rax+0x0]
  4225c8:	lea    rax,[rdx+0x1]
  4225cc:	mov    QWORD PTR [rdi+0x28],rax
  4225d0:	mov    BYTE PTR [rdx],0xa
  4225d3:	movzx  edx,BYTE PTR [rdi+0x31]
  4225d7:	imul   edx,DWORD PTR [rdi+0x38]
  4225db:	mov    rdi,QWORD PTR [rdi+0x28]
  4225df:	movsxd r12,edx
  4225e2:	lea    rax,[rdi+r12*1]
  4225e6:	cmp    QWORD PTR [rbx+0x20],rax
  4225ea:	jae    422600 <flatcc_json_printer_int8_field@@Base+0x180>
  4225ec:	mov    rsi,r12
  4225ef:	mov    rdi,rbx
  4225f2:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4225f7:	mov    rdx,QWORD PTR [rbx+0x28]
  4225fb:	jmp    422502 <flatcc_json_printer_int8_field@@Base+0x82>
  422600:	mov    rdx,r12
  422603:	mov    esi,0x20
  422608:	call   4061c0 <memset@plt>
  42260d:	mov    rdx,QWORD PTR [rbx+0x28]
  422611:	add    rdx,r12
  422614:	mov    QWORD PTR [rbx+0x28],rdx
  422618:	jmp    422502 <flatcc_json_printer_int8_field@@Base+0x82>
  42261d:	nop    DWORD PTR [rax]
  422620:	cmp    BYTE PTR [rdi+0x34],0x0
  422624:	je     4224c0 <flatcc_json_printer_int8_field@@Base+0x40>
  42262a:	jmp    422596 <flatcc_json_printer_int8_field@@Base+0x116>
  42262f:	nop

0000000000422630 <flatcc_json_printer_int16_field@@Base>:
  422630:	endbr64 
  422634:	push   r14
  422636:	lea    eax,[rdx+rdx*1+0x4]
  42263a:	push   r13
  42263c:	push   r12
  42263e:	push   rbp
  42263f:	push   rbx
  422640:	cmp    eax,DWORD PTR [rsi+0x10]
  422643:	jge    422758 <flatcc_json_printer_int16_field@@Base+0x128>
  422649:	mov    rdx,QWORD PTR [rsi+0x8]
  42264d:	movzx  eax,WORD PTR [rdx+rax*1]
  422651:	test   ax,ax
  422654:	je     422758 <flatcc_json_printer_int16_field@@Base+0x128>
  42265a:	add    rax,QWORD PTR [rsi]
  42265d:	je     422758 <flatcc_json_printer_int16_field@@Base+0x128>
  422663:	movzx  r13d,WORD PTR [rax]
  422667:	cmp    r9w,r13w
  42266b:	je     4227e0 <flatcc_json_printer_int16_field@@Base+0x1b0>
  422671:	mov    eax,DWORD PTR [rsi+0x18]
  422674:	lea    edx,[rax+0x1]
  422677:	mov    DWORD PTR [rsi+0x18],edx
  42267a:	mov    rdx,QWORD PTR [rdi+0x28]
  42267e:	test   eax,eax
  422680:	je     422691 <flatcc_json_printer_int16_field@@Base+0x61>
  422682:	lea    rax,[rdx+0x1]
  422686:	mov    QWORD PTR [rdi+0x28],rax
  42268a:	mov    BYTE PTR [rdx],0x2c
  42268d:	mov    rdx,QWORD PTR [rdi+0x28]
  422691:	cmp    BYTE PTR [rdi+0x31],0x0
  422695:	mov    r14,rcx
  422698:	mov    rbx,rdi
  42269b:	movsxd rbp,r8d
  42269e:	jne    422788 <flatcc_json_printer_int16_field@@Base+0x158>
  4226a4:	cmp    QWORD PTR [rdi+0x20],rdx
  4226a8:	ja     4226b3 <flatcc_json_printer_int16_field@@Base+0x83>
  4226aa:	xor    esi,esi
  4226ac:	call   QWORD PTR [rdi+0x48]
  4226af:	mov    rdx,QWORD PTR [rbx+0x28]
  4226b3:	mov    BYTE PTR [rdx],0x22
  4226b6:	xor    edi,edi
  4226b8:	mov    rdx,rbp
  4226bb:	cmp    BYTE PTR [rbx+0x32],0x0
  4226bf:	sete   dil
  4226c3:	add    rdi,QWORD PTR [rbx+0x28]
  4226c7:	lea    rax,[rdi+rbp*1]
  4226cb:	mov    QWORD PTR [rbx+0x28],rdi
  4226cf:	mov    rsi,r14
  4226d2:	cmp    QWORD PTR [rbx+0x20],rax
  4226d6:	jbe    422770 <flatcc_json_printer_int16_field@@Base+0x140>
  4226dc:	call   406210 <memcpy@plt>
  4226e1:	add    rbp,QWORD PTR [rbx+0x28]
  4226e5:	mov    QWORD PTR [rbx+0x28],rbp
  4226e9:	mov    BYTE PTR [rbp+0x0],0x22
  4226ed:	xor    eax,eax
  4226ef:	movsx  r11d,r13w
  4226f3:	cmp    BYTE PTR [rbx+0x32],0x0
  4226f7:	sete   al
  4226fa:	add    rax,QWORD PTR [rbx+0x28]
  4226fe:	lea    rdx,[rax+0x1]
  422702:	mov    QWORD PTR [rbx+0x28],rdx
  422706:	mov    BYTE PTR [rax],0x3a
  422709:	xor    esi,esi
  42270b:	mov    rax,QWORD PTR [rbx+0x28]
  42270f:	mov    BYTE PTR [rax],0x20
  422712:	cmp    BYTE PTR [rbx+0x31],0x0
  422716:	setne  sil
  42271a:	add    rsi,QWORD PTR [rbx+0x28]
  42271e:	mov    QWORD PTR [rbx+0x28],rsi
  422722:	shr    r11d,0x1f
  422726:	test   r13w,r13w
  42272a:	jns    422735 <flatcc_json_printer_int16_field@@Base+0x105>
  42272c:	mov    BYTE PTR [rsi],0x2d
  42272f:	neg    r13d
  422732:	inc    rsi
  422735:	movzx  edi,r13w
  422739:	call   41f850 <flatcc_json_parser_struct_as_root@@Base+0x10>
  42273e:	add    r11d,eax
  422741:	movsxd r11,r11d
  422744:	add    QWORD PTR [rbx+0x28],r11
  422748:	pop    rbx
  422749:	pop    rbp
  42274a:	pop    r12
  42274c:	pop    r13
  42274e:	pop    r14
  422750:	ret    
  422751:	nop    DWORD PTR [rax+0x0]
  422758:	cmp    BYTE PTR [rdi+0x35],0x0
  42275c:	je     422748 <flatcc_json_printer_int16_field@@Base+0x118>
  42275e:	mov    r13d,r9d
  422761:	jmp    422671 <flatcc_json_printer_int16_field@@Base+0x41>
  422766:	nop    WORD PTR cs:[rax+rax*1+0x0]
  422770:	mov    rdi,rbx
  422773:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  422778:	mov    rbp,QWORD PTR [rbx+0x28]
  42277c:	jmp    4226e9 <flatcc_json_printer_int16_field@@Base+0xb9>
  422781:	nop    DWORD PTR [rax+0x0]
  422788:	lea    rax,[rdx+0x1]
  42278c:	mov    QWORD PTR [rdi+0x28],rax
  422790:	mov    BYTE PTR [rdx],0xa
  422793:	movzx  edx,BYTE PTR [rdi+0x31]
  422797:	imul   edx,DWORD PTR [rdi+0x38]
  42279b:	mov    rdi,QWORD PTR [rdi+0x28]
  42279f:	movsxd r12,edx
  4227a2:	lea    rax,[rdi+r12*1]
  4227a6:	cmp    QWORD PTR [rbx+0x20],rax
  4227aa:	jae    4227c0 <flatcc_json_printer_int16_field@@Base+0x190>
  4227ac:	mov    rsi,r12
  4227af:	mov    rdi,rbx
  4227b2:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4227b7:	mov    rdx,QWORD PTR [rbx+0x28]
  4227bb:	jmp    4226b3 <flatcc_json_printer_int16_field@@Base+0x83>
  4227c0:	mov    rdx,r12
  4227c3:	mov    esi,0x20
  4227c8:	call   4061c0 <memset@plt>
  4227cd:	mov    rdx,QWORD PTR [rbx+0x28]
  4227d1:	add    rdx,r12
  4227d4:	mov    QWORD PTR [rbx+0x28],rdx
  4227d8:	jmp    4226b3 <flatcc_json_printer_int16_field@@Base+0x83>
  4227dd:	nop    DWORD PTR [rax]
  4227e0:	cmp    BYTE PTR [rdi+0x34],0x0
  4227e4:	je     422671 <flatcc_json_printer_int16_field@@Base+0x41>
  4227ea:	jmp    422748 <flatcc_json_printer_int16_field@@Base+0x118>
  4227ef:	nop

00000000004227f0 <flatcc_json_printer_int32_field@@Base>:
  4227f0:	endbr64 
  4227f4:	push   r14
  4227f6:	lea    eax,[rdx+rdx*1+0x4]
  4227fa:	push   r13
  4227fc:	push   r12
  4227fe:	push   rbp
  4227ff:	push   rbx
  422800:	cmp    eax,DWORD PTR [rsi+0x10]
  422803:	jge    422910 <flatcc_json_printer_int32_field@@Base+0x120>
  422809:	mov    rdx,QWORD PTR [rsi+0x8]
  42280d:	movzx  eax,WORD PTR [rdx+rax*1]
  422811:	test   ax,ax
  422814:	je     422910 <flatcc_json_printer_int32_field@@Base+0x120>
  42281a:	add    rax,QWORD PTR [rsi]
  42281d:	je     422910 <flatcc_json_printer_int32_field@@Base+0x120>
  422823:	mov    r13d,DWORD PTR [rax]
  422826:	cmp    r9d,r13d
  422829:	je     422990 <flatcc_json_printer_int32_field@@Base+0x1a0>
  42282f:	mov    eax,DWORD PTR [rsi+0x18]
  422832:	lea    edx,[rax+0x1]
  422835:	mov    DWORD PTR [rsi+0x18],edx
  422838:	mov    rdx,QWORD PTR [rdi+0x28]
  42283c:	test   eax,eax
  42283e:	je     42284f <flatcc_json_printer_int32_field@@Base+0x5f>
  422840:	lea    rax,[rdx+0x1]
  422844:	mov    QWORD PTR [rdi+0x28],rax
  422848:	mov    BYTE PTR [rdx],0x2c
  42284b:	mov    rdx,QWORD PTR [rdi+0x28]
  42284f:	cmp    BYTE PTR [rdi+0x31],0x0
  422853:	mov    r14,rcx
  422856:	mov    rbx,rdi
  422859:	movsxd rbp,r8d
  42285c:	jne    422938 <flatcc_json_printer_int32_field@@Base+0x148>
  422862:	cmp    QWORD PTR [rdi+0x20],rdx
  422866:	ja     422871 <flatcc_json_printer_int32_field@@Base+0x81>
  422868:	xor    esi,esi
  42286a:	call   QWORD PTR [rdi+0x48]
  42286d:	mov    rdx,QWORD PTR [rbx+0x28]
  422871:	mov    BYTE PTR [rdx],0x22
  422874:	xor    edi,edi
  422876:	mov    rdx,rbp
  422879:	cmp    BYTE PTR [rbx+0x32],0x0
  42287d:	sete   dil
  422881:	add    rdi,QWORD PTR [rbx+0x28]
  422885:	lea    rax,[rdi+rbp*1]
  422889:	mov    QWORD PTR [rbx+0x28],rdi
  42288d:	mov    rsi,r14
  422890:	cmp    QWORD PTR [rbx+0x20],rax
  422894:	jbe    422920 <flatcc_json_printer_int32_field@@Base+0x130>
  42289a:	call   406210 <memcpy@plt>
  42289f:	add    rbp,QWORD PTR [rbx+0x28]
  4228a3:	mov    QWORD PTR [rbx+0x28],rbp
  4228a7:	mov    BYTE PTR [rbp+0x0],0x22
  4228ab:	xor    eax,eax
  4228ad:	mov    ebp,r13d
  4228b0:	cmp    BYTE PTR [rbx+0x32],0x0
  4228b4:	sete   al
  4228b7:	add    rax,QWORD PTR [rbx+0x28]
  4228bb:	lea    rdx,[rax+0x1]
  4228bf:	mov    QWORD PTR [rbx+0x28],rdx
  4228c3:	mov    BYTE PTR [rax],0x3a
  4228c6:	xor    esi,esi
  4228c8:	mov    rax,QWORD PTR [rbx+0x28]
  4228cc:	mov    BYTE PTR [rax],0x20
  4228cf:	cmp    BYTE PTR [rbx+0x31],0x0
  4228d3:	setne  sil
  4228d7:	add    rsi,QWORD PTR [rbx+0x28]
  4228db:	mov    QWORD PTR [rbx+0x28],rsi
  4228df:	shr    ebp,0x1f
  4228e2:	test   r13d,r13d
  4228e5:	jns    4228f0 <flatcc_json_printer_int32_field@@Base+0x100>
  4228e7:	mov    BYTE PTR [rsi],0x2d
  4228ea:	neg    r13d
  4228ed:	inc    rsi
  4228f0:	mov    edi,r13d
  4228f3:	call   41f980 <flatcc_json_parser_struct_as_root@@Base+0x140>
  4228f8:	add    ebp,eax
  4228fa:	movsxd rbp,ebp
  4228fd:	add    QWORD PTR [rbx+0x28],rbp
  422901:	pop    rbx
  422902:	pop    rbp
  422903:	pop    r12
  422905:	pop    r13
  422907:	pop    r14
  422909:	ret    
  42290a:	nop    WORD PTR [rax+rax*1+0x0]
  422910:	cmp    BYTE PTR [rdi+0x35],0x0
  422914:	je     422901 <flatcc_json_printer_int32_field@@Base+0x111>
  422916:	mov    r13d,r9d
  422919:	jmp    42282f <flatcc_json_printer_int32_field@@Base+0x3f>
  42291e:	xchg   ax,ax
  422920:	mov    rdi,rbx
  422923:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  422928:	mov    rbp,QWORD PTR [rbx+0x28]
  42292c:	jmp    4228a7 <flatcc_json_printer_int32_field@@Base+0xb7>
  422931:	nop    DWORD PTR [rax+0x0]
  422938:	lea    rax,[rdx+0x1]
  42293c:	mov    QWORD PTR [rdi+0x28],rax
  422940:	mov    BYTE PTR [rdx],0xa
  422943:	movzx  edx,BYTE PTR [rdi+0x31]
  422947:	imul   edx,DWORD PTR [rdi+0x38]
  42294b:	mov    rdi,QWORD PTR [rdi+0x28]
  42294f:	movsxd r12,edx
  422952:	lea    rax,[rdi+r12*1]
  422956:	cmp    QWORD PTR [rbx+0x20],rax
  42295a:	jae    422970 <flatcc_json_printer_int32_field@@Base+0x180>
  42295c:	mov    rsi,r12
  42295f:	mov    rdi,rbx
  422962:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  422967:	mov    rdx,QWORD PTR [rbx+0x28]
  42296b:	jmp    422871 <flatcc_json_printer_int32_field@@Base+0x81>
  422970:	mov    rdx,r12
  422973:	mov    esi,0x20
  422978:	call   4061c0 <memset@plt>
  42297d:	mov    rdx,QWORD PTR [rbx+0x28]
  422981:	add    rdx,r12
  422984:	mov    QWORD PTR [rbx+0x28],rdx
  422988:	jmp    422871 <flatcc_json_printer_int32_field@@Base+0x81>
  42298d:	nop    DWORD PTR [rax]
  422990:	cmp    BYTE PTR [rdi+0x34],0x0
  422994:	je     42282f <flatcc_json_printer_int32_field@@Base+0x3f>
  42299a:	jmp    422901 <flatcc_json_printer_int32_field@@Base+0x111>
  42299f:	nop

00000000004229a0 <flatcc_json_printer_int64_field@@Base>:
  4229a0:	endbr64 
  4229a4:	push   r14
  4229a6:	lea    eax,[rdx+rdx*1+0x4]
  4229aa:	push   r13
  4229ac:	push   r12
  4229ae:	push   rbp
  4229af:	push   rbx
  4229b0:	cmp    eax,DWORD PTR [rsi+0x10]
  4229b3:	jge    422ac0 <flatcc_json_printer_int64_field@@Base+0x120>
  4229b9:	mov    rdx,QWORD PTR [rsi+0x8]
  4229bd:	movzx  eax,WORD PTR [rdx+rax*1]
  4229c1:	test   ax,ax
  4229c4:	je     422ac0 <flatcc_json_printer_int64_field@@Base+0x120>
  4229ca:	add    rax,QWORD PTR [rsi]
  4229cd:	je     422ac0 <flatcc_json_printer_int64_field@@Base+0x120>
  4229d3:	mov    r13,QWORD PTR [rax]
  4229d6:	cmp    r9,r13
  4229d9:	je     422b40 <flatcc_json_printer_int64_field@@Base+0x1a0>
  4229df:	mov    eax,DWORD PTR [rsi+0x18]
  4229e2:	lea    edx,[rax+0x1]
  4229e5:	mov    DWORD PTR [rsi+0x18],edx
  4229e8:	mov    rdx,QWORD PTR [rdi+0x28]
  4229ec:	test   eax,eax
  4229ee:	je     4229ff <flatcc_json_printer_int64_field@@Base+0x5f>
  4229f0:	lea    rax,[rdx+0x1]
  4229f4:	mov    QWORD PTR [rdi+0x28],rax
  4229f8:	mov    BYTE PTR [rdx],0x2c
  4229fb:	mov    rdx,QWORD PTR [rdi+0x28]
  4229ff:	cmp    BYTE PTR [rdi+0x31],0x0
  422a03:	mov    r14,rcx
  422a06:	mov    rbx,rdi
  422a09:	movsxd rbp,r8d
  422a0c:	jne    422ae8 <flatcc_json_printer_int64_field@@Base+0x148>
  422a12:	cmp    QWORD PTR [rdi+0x20],rdx
  422a16:	ja     422a21 <flatcc_json_printer_int64_field@@Base+0x81>
  422a18:	xor    esi,esi
  422a1a:	call   QWORD PTR [rdi+0x48]
  422a1d:	mov    rdx,QWORD PTR [rbx+0x28]
  422a21:	mov    BYTE PTR [rdx],0x22
  422a24:	xor    edi,edi
  422a26:	mov    rdx,rbp
  422a29:	cmp    BYTE PTR [rbx+0x32],0x0
  422a2d:	sete   dil
  422a31:	add    rdi,QWORD PTR [rbx+0x28]
  422a35:	lea    rax,[rdi+rbp*1]
  422a39:	mov    QWORD PTR [rbx+0x28],rdi
  422a3d:	mov    rsi,r14
  422a40:	cmp    QWORD PTR [rbx+0x20],rax
  422a44:	jbe    422ad0 <flatcc_json_printer_int64_field@@Base+0x130>
  422a4a:	call   406210 <memcpy@plt>
  422a4f:	add    rbp,QWORD PTR [rbx+0x28]
  422a53:	mov    QWORD PTR [rbx+0x28],rbp
  422a57:	mov    BYTE PTR [rbp+0x0],0x22
  422a5b:	xor    eax,eax
  422a5d:	mov    rbp,r13
  422a60:	cmp    BYTE PTR [rbx+0x32],0x0
  422a64:	sete   al
  422a67:	add    rax,QWORD PTR [rbx+0x28]
  422a6b:	lea    rdx,[rax+0x1]
  422a6f:	mov    QWORD PTR [rbx+0x28],rdx
  422a73:	mov    BYTE PTR [rax],0x3a
  422a76:	xor    esi,esi
  422a78:	mov    rax,QWORD PTR [rbx+0x28]
  422a7c:	mov    BYTE PTR [rax],0x20
  422a7f:	cmp    BYTE PTR [rbx+0x31],0x0
  422a83:	setne  sil
  422a87:	add    rsi,QWORD PTR [rbx+0x28]
  422a8b:	mov    QWORD PTR [rbx+0x28],rsi
  422a8f:	shr    rbp,0x3f
  422a93:	test   r13,r13
  422a96:	jns    422aa1 <flatcc_json_printer_int64_field@@Base+0x101>
  422a98:	mov    BYTE PTR [rsi],0x2d
  422a9b:	neg    r13
  422a9e:	inc    rsi
  422aa1:	mov    rdi,r13
  422aa4:	call   41fc30 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  422aa9:	add    eax,ebp
  422aab:	cdqe   
  422aad:	add    QWORD PTR [rbx+0x28],rax
  422ab1:	pop    rbx
  422ab2:	pop    rbp
  422ab3:	pop    r12
  422ab5:	pop    r13
  422ab7:	pop    r14
  422ab9:	ret    
  422aba:	nop    WORD PTR [rax+rax*1+0x0]
  422ac0:	cmp    BYTE PTR [rdi+0x35],0x0
  422ac4:	je     422ab1 <flatcc_json_printer_int64_field@@Base+0x111>
  422ac6:	mov    r13,r9
  422ac9:	jmp    4229df <flatcc_json_printer_int64_field@@Base+0x3f>
  422ace:	xchg   ax,ax
  422ad0:	mov    rdi,rbx
  422ad3:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  422ad8:	mov    rbp,QWORD PTR [rbx+0x28]
  422adc:	jmp    422a57 <flatcc_json_printer_int64_field@@Base+0xb7>
  422ae1:	nop    DWORD PTR [rax+0x0]
  422ae8:	lea    rax,[rdx+0x1]
  422aec:	mov    QWORD PTR [rdi+0x28],rax
  422af0:	mov    BYTE PTR [rdx],0xa
  422af3:	movzx  edx,BYTE PTR [rdi+0x31]
  422af7:	imul   edx,DWORD PTR [rdi+0x38]
  422afb:	mov    rdi,QWORD PTR [rdi+0x28]
  422aff:	movsxd r12,edx
  422b02:	lea    rax,[rdi+r12*1]
  422b06:	cmp    QWORD PTR [rbx+0x20],rax
  422b0a:	jae    422b20 <flatcc_json_printer_int64_field@@Base+0x180>
  422b0c:	mov    rsi,r12
  422b0f:	mov    rdi,rbx
  422b12:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  422b17:	mov    rdx,QWORD PTR [rbx+0x28]
  422b1b:	jmp    422a21 <flatcc_json_printer_int64_field@@Base+0x81>
  422b20:	mov    rdx,r12
  422b23:	mov    esi,0x20
  422b28:	call   4061c0 <memset@plt>
  422b2d:	mov    rdx,QWORD PTR [rbx+0x28]
  422b31:	add    rdx,r12
  422b34:	mov    QWORD PTR [rbx+0x28],rdx
  422b38:	jmp    422a21 <flatcc_json_printer_int64_field@@Base+0x81>
  422b3d:	nop    DWORD PTR [rax]
  422b40:	cmp    BYTE PTR [rdi+0x34],0x0
  422b44:	je     4229df <flatcc_json_printer_int64_field@@Base+0x3f>
  422b4a:	jmp    422ab1 <flatcc_json_printer_int64_field@@Base+0x111>
  422b4f:	nop

0000000000422b50 <flatcc_json_printer_bool_field@@Base>:
  422b50:	endbr64 
  422b54:	push   r14
  422b56:	lea    eax,[rdx+rdx*1+0x4]
  422b5a:	push   r13
  422b5c:	push   r12
  422b5e:	push   rbp
  422b5f:	push   rbx
  422b60:	cmp    eax,DWORD PTR [rsi+0x10]
  422b63:	jge    422c58 <flatcc_json_printer_bool_field@@Base+0x108>
  422b69:	mov    rdx,QWORD PTR [rsi+0x8]
  422b6d:	movzx  eax,WORD PTR [rdx+rax*1]
  422b71:	test   ax,ax
  422b74:	je     422c58 <flatcc_json_printer_bool_field@@Base+0x108>
  422b7a:	add    rax,QWORD PTR [rsi]
  422b7d:	je     422c58 <flatcc_json_printer_bool_field@@Base+0x108>
  422b83:	movzx  r13d,BYTE PTR [rax]
  422b87:	cmp    r9b,r13b
  422b8a:	je     422ce0 <flatcc_json_printer_bool_field@@Base+0x190>
  422b90:	mov    eax,DWORD PTR [rsi+0x18]
  422b93:	lea    edx,[rax+0x1]
  422b96:	mov    DWORD PTR [rsi+0x18],edx
  422b99:	mov    rdx,QWORD PTR [rdi+0x28]
  422b9d:	test   eax,eax
  422b9f:	je     422bb0 <flatcc_json_printer_bool_field@@Base+0x60>
  422ba1:	lea    rax,[rdx+0x1]
  422ba5:	mov    QWORD PTR [rdi+0x28],rax
  422ba9:	mov    BYTE PTR [rdx],0x2c
  422bac:	mov    rdx,QWORD PTR [rdi+0x28]
  422bb0:	cmp    BYTE PTR [rdi+0x31],0x0
  422bb4:	mov    r14,rcx
  422bb7:	mov    rbx,rdi
  422bba:	movsxd rbp,r8d
  422bbd:	jne    422c80 <flatcc_json_printer_bool_field@@Base+0x130>
  422bc3:	cmp    QWORD PTR [rdi+0x20],rdx
  422bc7:	ja     422bd2 <flatcc_json_printer_bool_field@@Base+0x82>
  422bc9:	xor    esi,esi
  422bcb:	call   QWORD PTR [rdi+0x48]
  422bce:	mov    rdx,QWORD PTR [rbx+0x28]
  422bd2:	mov    BYTE PTR [rdx],0x22
  422bd5:	xor    edi,edi
  422bd7:	mov    rdx,rbp
  422bda:	cmp    BYTE PTR [rbx+0x32],0x0
  422bde:	sete   dil
  422be2:	add    rdi,QWORD PTR [rbx+0x28]
  422be6:	lea    rax,[rdi+rbp*1]
  422bea:	mov    QWORD PTR [rbx+0x28],rdi
  422bee:	mov    rsi,r14
  422bf1:	cmp    QWORD PTR [rbx+0x20],rax
  422bf5:	jbe    422c70 <flatcc_json_printer_bool_field@@Base+0x120>
  422bf7:	call   406210 <memcpy@plt>
  422bfc:	add    rbp,QWORD PTR [rbx+0x28]
  422c00:	mov    QWORD PTR [rbx+0x28],rbp
  422c04:	mov    BYTE PTR [rbp+0x0],0x22
  422c08:	xor    eax,eax
  422c0a:	movzx  edi,r13b
  422c0e:	cmp    BYTE PTR [rbx+0x32],0x0
  422c12:	sete   al
  422c15:	add    rax,QWORD PTR [rbx+0x28]
  422c19:	lea    rdx,[rax+0x1]
  422c1d:	mov    QWORD PTR [rbx+0x28],rdx
  422c21:	mov    BYTE PTR [rax],0x3a
  422c24:	xor    esi,esi
  422c26:	mov    rax,QWORD PTR [rbx+0x28]
  422c2a:	mov    BYTE PTR [rax],0x20
  422c2d:	cmp    BYTE PTR [rbx+0x31],0x0
  422c31:	setne  sil
  422c35:	add    rsi,QWORD PTR [rbx+0x28]
  422c39:	mov    QWORD PTR [rbx+0x28],rsi
  422c3d:	call   420590 <flatcc_json_parser_struct_as_root@@Base+0xd50>
  422c42:	cdqe   
  422c44:	add    QWORD PTR [rbx+0x28],rax
  422c48:	pop    rbx
  422c49:	pop    rbp
  422c4a:	pop    r12
  422c4c:	pop    r13
  422c4e:	pop    r14
  422c50:	ret    
  422c51:	nop    DWORD PTR [rax+0x0]
  422c58:	cmp    BYTE PTR [rdi+0x35],0x0
  422c5c:	je     422c48 <flatcc_json_printer_bool_field@@Base+0xf8>
  422c5e:	mov    r13d,r9d
  422c61:	jmp    422b90 <flatcc_json_printer_bool_field@@Base+0x40>
  422c66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  422c70:	mov    rdi,rbx
  422c73:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  422c78:	mov    rbp,QWORD PTR [rbx+0x28]
  422c7c:	jmp    422c04 <flatcc_json_printer_bool_field@@Base+0xb4>
  422c7e:	xchg   ax,ax
  422c80:	lea    rax,[rdx+0x1]
  422c84:	mov    QWORD PTR [rdi+0x28],rax
  422c88:	mov    BYTE PTR [rdx],0xa
  422c8b:	movzx  edx,BYTE PTR [rdi+0x31]
  422c8f:	imul   edx,DWORD PTR [rdi+0x38]
  422c93:	mov    rdi,QWORD PTR [rdi+0x28]
  422c97:	movsxd r12,edx
  422c9a:	lea    rax,[rdi+r12*1]
  422c9e:	cmp    QWORD PTR [rbx+0x20],rax
  422ca2:	jae    422cc0 <flatcc_json_printer_bool_field@@Base+0x170>
  422ca4:	mov    rsi,r12
  422ca7:	mov    rdi,rbx
  422caa:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  422caf:	mov    rdx,QWORD PTR [rbx+0x28]
  422cb3:	jmp    422bd2 <flatcc_json_printer_bool_field@@Base+0x82>
  422cb8:	nop    DWORD PTR [rax+rax*1+0x0]
  422cc0:	mov    rdx,r12
  422cc3:	mov    esi,0x20
  422cc8:	call   4061c0 <memset@plt>
  422ccd:	mov    rdx,QWORD PTR [rbx+0x28]
  422cd1:	add    rdx,r12
  422cd4:	mov    QWORD PTR [rbx+0x28],rdx
  422cd8:	jmp    422bd2 <flatcc_json_printer_bool_field@@Base+0x82>
  422cdd:	nop    DWORD PTR [rax]
  422ce0:	cmp    BYTE PTR [rdi+0x34],0x0
  422ce4:	je     422b90 <flatcc_json_printer_bool_field@@Base+0x40>
  422cea:	jmp    422c48 <flatcc_json_printer_bool_field@@Base+0xf8>
  422cef:	nop

0000000000422cf0 <flatcc_json_printer_float_field@@Base>:
  422cf0:	endbr64 
  422cf4:	push   r13
  422cf6:	lea    eax,[rdx+rdx*1+0x4]
  422cfa:	push   r12
  422cfc:	push   rbp
  422cfd:	push   rbx
  422cfe:	sub    rsp,0x18
  422d02:	cmp    eax,DWORD PTR [rsi+0x10]
  422d05:	jge    422d40 <flatcc_json_printer_float_field@@Base+0x50>
  422d07:	mov    rdx,QWORD PTR [rsi+0x8]
  422d0b:	movzx  eax,WORD PTR [rdx+rax*1]
  422d0f:	test   ax,ax
  422d12:	je     422d40 <flatcc_json_printer_float_field@@Base+0x50>
  422d14:	add    rax,QWORD PTR [rsi]
  422d17:	je     422d40 <flatcc_json_printer_float_field@@Base+0x50>
  422d19:	vmovss xmm2,DWORD PTR [rax]
  422d1d:	vucomiss xmm0,xmm2
  422d21:	vmovss DWORD PTR [rsp+0xc],xmm2
  422d27:	jp     422d4c <flatcc_json_printer_float_field@@Base+0x5c>
  422d29:	jne    422d4c <flatcc_json_printer_float_field@@Base+0x5c>
  422d2b:	cmp    BYTE PTR [rdi+0x34],0x0
  422d2f:	je     422d4c <flatcc_json_printer_float_field@@Base+0x5c>
  422d31:	add    rsp,0x18
  422d35:	pop    rbx
  422d36:	pop    rbp
  422d37:	pop    r12
  422d39:	pop    r13
  422d3b:	ret    
  422d3c:	nop    DWORD PTR [rax+0x0]
  422d40:	cmp    BYTE PTR [rdi+0x35],0x0
  422d44:	je     422d31 <flatcc_json_printer_float_field@@Base+0x41>
  422d46:	vmovss DWORD PTR [rsp+0xc],xmm0
  422d4c:	mov    eax,DWORD PTR [rsi+0x18]
  422d4f:	lea    edx,[rax+0x1]
  422d52:	mov    DWORD PTR [rsi+0x18],edx
  422d55:	mov    rdx,QWORD PTR [rdi+0x28]
  422d59:	test   eax,eax
  422d5b:	je     422d6c <flatcc_json_printer_float_field@@Base+0x7c>
  422d5d:	lea    rax,[rdx+0x1]
  422d61:	mov    QWORD PTR [rdi+0x28],rax
  422d65:	mov    BYTE PTR [rdx],0x2c
  422d68:	mov    rdx,QWORD PTR [rdi+0x28]
  422d6c:	cmp    BYTE PTR [rdi+0x31],0x0
  422d70:	mov    r13,rcx
  422d73:	mov    rbx,rdi
  422d76:	movsxd rbp,r8d
  422d79:	jne    422e30 <flatcc_json_printer_float_field@@Base+0x140>
  422d7f:	cmp    QWORD PTR [rdi+0x20],rdx
  422d83:	ja     422d8e <flatcc_json_printer_float_field@@Base+0x9e>
  422d85:	xor    esi,esi
  422d87:	call   QWORD PTR [rdi+0x48]
  422d8a:	mov    rdx,QWORD PTR [rbx+0x28]
  422d8e:	mov    BYTE PTR [rdx],0x22
  422d91:	xor    edi,edi
  422d93:	mov    rdx,rbp
  422d96:	cmp    BYTE PTR [rbx+0x32],0x0
  422d9a:	sete   dil
  422d9e:	add    rdi,QWORD PTR [rbx+0x28]
  422da2:	lea    rax,[rdi+rbp*1]
  422da6:	mov    QWORD PTR [rbx+0x28],rdi
  422daa:	mov    rsi,r13
  422dad:	cmp    QWORD PTR [rbx+0x20],rax
  422db1:	jbe    422e18 <flatcc_json_printer_float_field@@Base+0x128>
  422db3:	call   406210 <memcpy@plt>
  422db8:	add    rbp,QWORD PTR [rbx+0x28]
  422dbc:	mov    QWORD PTR [rbx+0x28],rbp
  422dc0:	mov    BYTE PTR [rbp+0x0],0x22
  422dc4:	xor    eax,eax
  422dc6:	vxorpd xmm0,xmm0,xmm0
  422dca:	cmp    BYTE PTR [rbx+0x32],0x0
  422dce:	sete   al
  422dd1:	add    rax,QWORD PTR [rbx+0x28]
  422dd5:	lea    rdx,[rax+0x1]
  422dd9:	mov    QWORD PTR [rbx+0x28],rdx
  422ddd:	mov    BYTE PTR [rax],0x3a
  422de0:	xor    edi,edi
  422de2:	vcvtss2sd xmm0,xmm0,DWORD PTR [rsp+0xc]
  422de8:	mov    rax,QWORD PTR [rbx+0x28]
  422dec:	mov    BYTE PTR [rax],0x20
  422def:	cmp    BYTE PTR [rbx+0x31],0x0
  422df3:	setne  dil
  422df7:	add    rdi,QWORD PTR [rbx+0x28]
  422dfb:	mov    QWORD PTR [rbx+0x28],rdi
  422dff:	call   4207b0 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  422e04:	cdqe   
  422e06:	add    QWORD PTR [rbx+0x28],rax
  422e0a:	add    rsp,0x18
  422e0e:	pop    rbx
  422e0f:	pop    rbp
  422e10:	pop    r12
  422e12:	pop    r13
  422e14:	ret    
  422e15:	nop    DWORD PTR [rax]
  422e18:	mov    rdi,rbx
  422e1b:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  422e20:	mov    rbp,QWORD PTR [rbx+0x28]
  422e24:	jmp    422dc0 <flatcc_json_printer_float_field@@Base+0xd0>
  422e26:	nop    WORD PTR cs:[rax+rax*1+0x0]
  422e30:	lea    rax,[rdx+0x1]
  422e34:	mov    QWORD PTR [rdi+0x28],rax
  422e38:	mov    BYTE PTR [rdx],0xa
  422e3b:	movzx  edx,BYTE PTR [rdi+0x31]
  422e3f:	imul   edx,DWORD PTR [rdi+0x38]
  422e43:	mov    rdi,QWORD PTR [rdi+0x28]
  422e47:	movsxd r12,edx
  422e4a:	lea    rax,[rdi+r12*1]
  422e4e:	cmp    QWORD PTR [rbx+0x20],rax
  422e52:	jae    422e70 <flatcc_json_printer_float_field@@Base+0x180>
  422e54:	mov    rsi,r12
  422e57:	mov    rdi,rbx
  422e5a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  422e5f:	mov    rdx,QWORD PTR [rbx+0x28]
  422e63:	jmp    422d8e <flatcc_json_printer_float_field@@Base+0x9e>
  422e68:	nop    DWORD PTR [rax+rax*1+0x0]
  422e70:	mov    rdx,r12
  422e73:	mov    esi,0x20
  422e78:	call   4061c0 <memset@plt>
  422e7d:	mov    rdx,QWORD PTR [rbx+0x28]
  422e81:	add    rdx,r12
  422e84:	mov    QWORD PTR [rbx+0x28],rdx
  422e88:	jmp    422d8e <flatcc_json_printer_float_field@@Base+0x9e>
  422e8d:	nop    DWORD PTR [rax]

0000000000422e90 <flatcc_json_printer_double_field@@Base>:
  422e90:	endbr64 
  422e94:	push   r13
  422e96:	lea    eax,[rdx+rdx*1+0x4]
  422e9a:	push   r12
  422e9c:	push   rbp
  422e9d:	push   rbx
  422e9e:	sub    rsp,0x18
  422ea2:	cmp    eax,DWORD PTR [rsi+0x10]
  422ea5:	jge    422ee0 <flatcc_json_printer_double_field@@Base+0x50>
  422ea7:	mov    rdx,QWORD PTR [rsi+0x8]
  422eab:	movzx  eax,WORD PTR [rdx+rax*1]
  422eaf:	test   ax,ax
  422eb2:	je     422ee0 <flatcc_json_printer_double_field@@Base+0x50>
  422eb4:	add    rax,QWORD PTR [rsi]
  422eb7:	je     422ee0 <flatcc_json_printer_double_field@@Base+0x50>
  422eb9:	vmovsd xmm1,QWORD PTR [rax]
  422ebd:	vucomisd xmm0,xmm1
  422ec1:	vmovsd QWORD PTR [rsp+0x8],xmm1
  422ec7:	jp     422eec <flatcc_json_printer_double_field@@Base+0x5c>
  422ec9:	jne    422eec <flatcc_json_printer_double_field@@Base+0x5c>
  422ecb:	cmp    BYTE PTR [rdi+0x34],0x0
  422ecf:	je     422eec <flatcc_json_printer_double_field@@Base+0x5c>
  422ed1:	add    rsp,0x18
  422ed5:	pop    rbx
  422ed6:	pop    rbp
  422ed7:	pop    r12
  422ed9:	pop    r13
  422edb:	ret    
  422edc:	nop    DWORD PTR [rax+0x0]
  422ee0:	cmp    BYTE PTR [rdi+0x35],0x0
  422ee4:	je     422ed1 <flatcc_json_printer_double_field@@Base+0x41>
  422ee6:	vmovsd QWORD PTR [rsp+0x8],xmm0
  422eec:	mov    eax,DWORD PTR [rsi+0x18]
  422eef:	lea    edx,[rax+0x1]
  422ef2:	mov    DWORD PTR [rsi+0x18],edx
  422ef5:	mov    rdx,QWORD PTR [rdi+0x28]
  422ef9:	test   eax,eax
  422efb:	je     422f0c <flatcc_json_printer_double_field@@Base+0x7c>
  422efd:	lea    rax,[rdx+0x1]
  422f01:	mov    QWORD PTR [rdi+0x28],rax
  422f05:	mov    BYTE PTR [rdx],0x2c
  422f08:	mov    rdx,QWORD PTR [rdi+0x28]
  422f0c:	cmp    BYTE PTR [rdi+0x31],0x0
  422f10:	mov    r13,rcx
  422f13:	mov    rbx,rdi
  422f16:	movsxd rbp,r8d
  422f19:	jne    422fd0 <flatcc_json_printer_double_field@@Base+0x140>
  422f1f:	cmp    QWORD PTR [rdi+0x20],rdx
  422f23:	ja     422f2e <flatcc_json_printer_double_field@@Base+0x9e>
  422f25:	xor    esi,esi
  422f27:	call   QWORD PTR [rdi+0x48]
  422f2a:	mov    rdx,QWORD PTR [rbx+0x28]
  422f2e:	mov    BYTE PTR [rdx],0x22
  422f31:	xor    edi,edi
  422f33:	mov    rdx,rbp
  422f36:	cmp    BYTE PTR [rbx+0x32],0x0
  422f3a:	sete   dil
  422f3e:	add    rdi,QWORD PTR [rbx+0x28]
  422f42:	lea    rax,[rdi+rbp*1]
  422f46:	mov    QWORD PTR [rbx+0x28],rdi
  422f4a:	mov    rsi,r13
  422f4d:	cmp    QWORD PTR [rbx+0x20],rax
  422f51:	jbe    422fb8 <flatcc_json_printer_double_field@@Base+0x128>
  422f53:	call   406210 <memcpy@plt>
  422f58:	add    rbp,QWORD PTR [rbx+0x28]
  422f5c:	mov    QWORD PTR [rbx+0x28],rbp
  422f60:	mov    BYTE PTR [rbp+0x0],0x22
  422f64:	xor    eax,eax
  422f66:	vmovsd xmm0,QWORD PTR [rsp+0x8]
  422f6c:	cmp    BYTE PTR [rbx+0x32],0x0
  422f70:	sete   al
  422f73:	add    rax,QWORD PTR [rbx+0x28]
  422f77:	lea    rdx,[rax+0x1]
  422f7b:	mov    QWORD PTR [rbx+0x28],rdx
  422f7f:	mov    BYTE PTR [rax],0x3a
  422f82:	xor    edi,edi
  422f84:	mov    rax,QWORD PTR [rbx+0x28]
  422f88:	mov    BYTE PTR [rax],0x20
  422f8b:	cmp    BYTE PTR [rbx+0x31],0x0
  422f8f:	setne  dil
  422f93:	add    rdi,QWORD PTR [rbx+0x28]
  422f97:	mov    QWORD PTR [rbx+0x28],rdi
  422f9b:	call   4207b0 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  422fa0:	cdqe   
  422fa2:	add    QWORD PTR [rbx+0x28],rax
  422fa6:	add    rsp,0x18
  422faa:	pop    rbx
  422fab:	pop    rbp
  422fac:	pop    r12
  422fae:	pop    r13
  422fb0:	ret    
  422fb1:	nop    DWORD PTR [rax+0x0]
  422fb8:	mov    rdi,rbx
  422fbb:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  422fc0:	mov    rbp,QWORD PTR [rbx+0x28]
  422fc4:	jmp    422f60 <flatcc_json_printer_double_field@@Base+0xd0>
  422fc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  422fd0:	lea    rax,[rdx+0x1]
  422fd4:	mov    QWORD PTR [rdi+0x28],rax
  422fd8:	mov    BYTE PTR [rdx],0xa
  422fdb:	movzx  edx,BYTE PTR [rdi+0x31]
  422fdf:	imul   edx,DWORD PTR [rdi+0x38]
  422fe3:	mov    rdi,QWORD PTR [rdi+0x28]
  422fe7:	movsxd r12,edx
  422fea:	lea    rax,[rdi+r12*1]
  422fee:	cmp    QWORD PTR [rbx+0x20],rax
  422ff2:	jae    423010 <flatcc_json_printer_double_field@@Base+0x180>
  422ff4:	mov    rsi,r12
  422ff7:	mov    rdi,rbx
  422ffa:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  422fff:	mov    rdx,QWORD PTR [rbx+0x28]
  423003:	jmp    422f2e <flatcc_json_printer_double_field@@Base+0x9e>
  423008:	nop    DWORD PTR [rax+rax*1+0x0]
  423010:	mov    rdx,r12
  423013:	mov    esi,0x20
  423018:	call   4061c0 <memset@plt>
  42301d:	mov    rdx,QWORD PTR [rbx+0x28]
  423021:	add    rdx,r12
  423024:	mov    QWORD PTR [rbx+0x28],rdx
  423028:	jmp    422f2e <flatcc_json_printer_double_field@@Base+0x9e>
  42302d:	nop    DWORD PTR [rax]

0000000000423030 <flatcc_json_printer_uint8_enum_field@@Base>:
  423030:	endbr64 
  423034:	push   r15
  423036:	lea    eax,[rdx+rdx*1+0x4]
  42303a:	push   r14
  42303c:	push   r13
  42303e:	push   r12
  423040:	push   rbp
  423041:	push   rbx
  423042:	sub    rsp,0x8
  423046:	mov    r13,QWORD PTR [rsp+0x40]
  42304b:	cmp    eax,DWORD PTR [rsi+0x10]
  42304e:	jge    423150 <flatcc_json_printer_uint8_enum_field@@Base+0x120>
  423054:	mov    rdx,QWORD PTR [rsi+0x8]
  423058:	movzx  eax,WORD PTR [rdx+rax*1]
  42305c:	test   ax,ax
  42305f:	je     423150 <flatcc_json_printer_uint8_enum_field@@Base+0x120>
  423065:	add    rax,QWORD PTR [rsi]
  423068:	je     423150 <flatcc_json_printer_uint8_enum_field@@Base+0x120>
  42306e:	movzx  r12d,BYTE PTR [rax]
  423072:	cmp    r9b,r12b
  423075:	je     4231f0 <flatcc_json_printer_uint8_enum_field@@Base+0x1c0>
  42307b:	mov    eax,DWORD PTR [rsi+0x18]
  42307e:	lea    edx,[rax+0x1]
  423081:	mov    DWORD PTR [rsi+0x18],edx
  423084:	mov    rdx,QWORD PTR [rdi+0x28]
  423088:	test   eax,eax
  42308a:	je     42309b <flatcc_json_printer_uint8_enum_field@@Base+0x6b>
  42308c:	lea    rax,[rdx+0x1]
  423090:	mov    QWORD PTR [rdi+0x28],rax
  423094:	mov    BYTE PTR [rdx],0x2c
  423097:	mov    rdx,QWORD PTR [rdi+0x28]
  42309b:	cmp    BYTE PTR [rdi+0x31],0x0
  42309f:	mov    r15,rcx
  4230a2:	mov    rbx,rdi
  4230a5:	movsxd rbp,r8d
  4230a8:	jne    423198 <flatcc_json_printer_uint8_enum_field@@Base+0x168>
  4230ae:	cmp    QWORD PTR [rdi+0x20],rdx
  4230b2:	ja     4230bd <flatcc_json_printer_uint8_enum_field@@Base+0x8d>
  4230b4:	xor    esi,esi
  4230b6:	call   QWORD PTR [rdi+0x48]
  4230b9:	mov    rdx,QWORD PTR [rbx+0x28]
  4230bd:	mov    BYTE PTR [rdx],0x22
  4230c0:	xor    edi,edi
  4230c2:	mov    rdx,rbp
  4230c5:	cmp    BYTE PTR [rbx+0x32],0x0
  4230c9:	sete   dil
  4230cd:	add    rdi,QWORD PTR [rbx+0x28]
  4230d1:	lea    rax,[rdi+rbp*1]
  4230d5:	mov    QWORD PTR [rbx+0x28],rdi
  4230d9:	mov    rsi,r15
  4230dc:	cmp    QWORD PTR [rbx+0x20],rax
  4230e0:	jbe    423180 <flatcc_json_printer_uint8_enum_field@@Base+0x150>
  4230e6:	call   406210 <memcpy@plt>
  4230eb:	add    rbp,QWORD PTR [rbx+0x28]
  4230ef:	mov    QWORD PTR [rbx+0x28],rbp
  4230f3:	mov    BYTE PTR [rbp+0x0],0x22
  4230f7:	xor    eax,eax
  4230f9:	cmp    BYTE PTR [rbx+0x32],0x0
  4230fd:	sete   al
  423100:	add    rax,QWORD PTR [rbx+0x28]
  423104:	lea    rdx,[rax+0x1]
  423108:	mov    QWORD PTR [rbx+0x28],rdx
  42310c:	mov    BYTE PTR [rax],0x3a
  42310f:	xor    esi,esi
  423111:	mov    rax,QWORD PTR [rbx+0x28]
  423115:	mov    BYTE PTR [rax],0x20
  423118:	cmp    BYTE PTR [rbx+0x31],0x0
  42311c:	setne  sil
  423120:	add    rsi,QWORD PTR [rbx+0x28]
  423124:	cmp    BYTE PTR [rbx+0x33],0x0
  423128:	mov    QWORD PTR [rbx+0x28],rsi
  42312c:	jne    423160 <flatcc_json_printer_uint8_enum_field@@Base+0x130>
  42312e:	add    rsp,0x8
  423132:	mov    rdi,rbx
  423135:	pop    rbx
  423136:	pop    rbp
  423137:	movzx  esi,r12b
  42313b:	pop    r12
  42313d:	mov    rax,r13
  423140:	pop    r13
  423142:	pop    r14
  423144:	pop    r15
  423146:	jmp    rax
  423148:	nop    DWORD PTR [rax+rax*1+0x0]
  423150:	cmp    BYTE PTR [rdi+0x35],0x0
  423154:	je     42316f <flatcc_json_printer_uint8_enum_field@@Base+0x13f>
  423156:	mov    r12d,r9d
  423159:	jmp    42307b <flatcc_json_printer_uint8_enum_field@@Base+0x4b>
  42315e:	xchg   ax,ax
  423160:	movzx  edi,r12b
  423164:	call   4205c0 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  423169:	cdqe   
  42316b:	add    QWORD PTR [rbx+0x28],rax
  42316f:	add    rsp,0x8
  423173:	pop    rbx
  423174:	pop    rbp
  423175:	pop    r12
  423177:	pop    r13
  423179:	pop    r14
  42317b:	pop    r15
  42317d:	ret    
  42317e:	xchg   ax,ax
  423180:	mov    rdi,rbx
  423183:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  423188:	mov    rbp,QWORD PTR [rbx+0x28]
  42318c:	jmp    4230f3 <flatcc_json_printer_uint8_enum_field@@Base+0xc3>
  423191:	nop    DWORD PTR [rax+0x0]
  423198:	lea    rax,[rdx+0x1]
  42319c:	mov    QWORD PTR [rdi+0x28],rax
  4231a0:	mov    BYTE PTR [rdx],0xa
  4231a3:	movzx  edx,BYTE PTR [rdi+0x31]
  4231a7:	imul   edx,DWORD PTR [rdi+0x38]
  4231ab:	mov    rdi,QWORD PTR [rdi+0x28]
  4231af:	movsxd r14,edx
  4231b2:	lea    rax,[rdi+r14*1]
  4231b6:	cmp    QWORD PTR [rbx+0x20],rax
  4231ba:	jae    4231d0 <flatcc_json_printer_uint8_enum_field@@Base+0x1a0>
  4231bc:	mov    rsi,r14
  4231bf:	mov    rdi,rbx
  4231c2:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4231c7:	mov    rdx,QWORD PTR [rbx+0x28]
  4231cb:	jmp    4230bd <flatcc_json_printer_uint8_enum_field@@Base+0x8d>
  4231d0:	mov    rdx,r14
  4231d3:	mov    esi,0x20
  4231d8:	call   4061c0 <memset@plt>
  4231dd:	mov    rdx,QWORD PTR [rbx+0x28]
  4231e1:	add    rdx,r14
  4231e4:	mov    QWORD PTR [rbx+0x28],rdx
  4231e8:	jmp    4230bd <flatcc_json_printer_uint8_enum_field@@Base+0x8d>
  4231ed:	nop    DWORD PTR [rax]
  4231f0:	cmp    BYTE PTR [rdi+0x34],0x0
  4231f4:	je     42307b <flatcc_json_printer_uint8_enum_field@@Base+0x4b>
  4231fa:	jmp    42316f <flatcc_json_printer_uint8_enum_field@@Base+0x13f>
  4231ff:	nop

0000000000423200 <flatcc_json_printer_uint16_enum_field@@Base>:
  423200:	endbr64 
  423204:	push   r15
  423206:	lea    eax,[rdx+rdx*1+0x4]
  42320a:	push   r14
  42320c:	push   r13
  42320e:	push   r12
  423210:	push   rbp
  423211:	push   rbx
  423212:	sub    rsp,0x8
  423216:	mov    r13,QWORD PTR [rsp+0x40]
  42321b:	cmp    eax,DWORD PTR [rsi+0x10]
  42321e:	jge    423320 <flatcc_json_printer_uint16_enum_field@@Base+0x120>
  423224:	mov    rdx,QWORD PTR [rsi+0x8]
  423228:	movzx  eax,WORD PTR [rdx+rax*1]
  42322c:	test   ax,ax
  42322f:	je     423320 <flatcc_json_printer_uint16_enum_field@@Base+0x120>
  423235:	add    rax,QWORD PTR [rsi]
  423238:	je     423320 <flatcc_json_printer_uint16_enum_field@@Base+0x120>
  42323e:	movzx  r12d,WORD PTR [rax]
  423242:	cmp    r9w,r12w
  423246:	je     4233c0 <flatcc_json_printer_uint16_enum_field@@Base+0x1c0>
  42324c:	mov    eax,DWORD PTR [rsi+0x18]
  42324f:	lea    edx,[rax+0x1]
  423252:	mov    DWORD PTR [rsi+0x18],edx
  423255:	mov    rdx,QWORD PTR [rdi+0x28]
  423259:	test   eax,eax
  42325b:	je     42326c <flatcc_json_printer_uint16_enum_field@@Base+0x6c>
  42325d:	lea    rax,[rdx+0x1]
  423261:	mov    QWORD PTR [rdi+0x28],rax
  423265:	mov    BYTE PTR [rdx],0x2c
  423268:	mov    rdx,QWORD PTR [rdi+0x28]
  42326c:	cmp    BYTE PTR [rdi+0x31],0x0
  423270:	mov    r15,rcx
  423273:	mov    rbx,rdi
  423276:	movsxd rbp,r8d
  423279:	jne    423368 <flatcc_json_printer_uint16_enum_field@@Base+0x168>
  42327f:	cmp    QWORD PTR [rdi+0x20],rdx
  423283:	ja     42328e <flatcc_json_printer_uint16_enum_field@@Base+0x8e>
  423285:	xor    esi,esi
  423287:	call   QWORD PTR [rdi+0x48]
  42328a:	mov    rdx,QWORD PTR [rbx+0x28]
  42328e:	mov    BYTE PTR [rdx],0x22
  423291:	xor    edi,edi
  423293:	mov    rdx,rbp
  423296:	cmp    BYTE PTR [rbx+0x32],0x0
  42329a:	sete   dil
  42329e:	add    rdi,QWORD PTR [rbx+0x28]
  4232a2:	lea    rax,[rdi+rbp*1]
  4232a6:	mov    QWORD PTR [rbx+0x28],rdi
  4232aa:	mov    rsi,r15
  4232ad:	cmp    QWORD PTR [rbx+0x20],rax
  4232b1:	jbe    423350 <flatcc_json_printer_uint16_enum_field@@Base+0x150>
  4232b7:	call   406210 <memcpy@plt>
  4232bc:	add    rbp,QWORD PTR [rbx+0x28]
  4232c0:	mov    QWORD PTR [rbx+0x28],rbp
  4232c4:	mov    BYTE PTR [rbp+0x0],0x22
  4232c8:	xor    eax,eax
  4232ca:	cmp    BYTE PTR [rbx+0x32],0x0
  4232ce:	sete   al
  4232d1:	add    rax,QWORD PTR [rbx+0x28]
  4232d5:	lea    rdx,[rax+0x1]
  4232d9:	mov    QWORD PTR [rbx+0x28],rdx
  4232dd:	mov    BYTE PTR [rax],0x3a
  4232e0:	xor    esi,esi
  4232e2:	mov    rax,QWORD PTR [rbx+0x28]
  4232e6:	mov    BYTE PTR [rax],0x20
  4232e9:	cmp    BYTE PTR [rbx+0x31],0x0
  4232ed:	setne  sil
  4232f1:	add    rsi,QWORD PTR [rbx+0x28]
  4232f5:	cmp    BYTE PTR [rbx+0x33],0x0
  4232f9:	mov    QWORD PTR [rbx+0x28],rsi
  4232fd:	jne    423330 <flatcc_json_printer_uint16_enum_field@@Base+0x130>
  4232ff:	add    rsp,0x8
  423303:	mov    rdi,rbx
  423306:	pop    rbx
  423307:	pop    rbp
  423308:	movzx  esi,r12w
  42330c:	pop    r12
  42330e:	mov    rax,r13
  423311:	pop    r13
  423313:	pop    r14
  423315:	pop    r15
  423317:	jmp    rax
  423319:	nop    DWORD PTR [rax+0x0]
  423320:	cmp    BYTE PTR [rdi+0x35],0x0
  423324:	je     42333f <flatcc_json_printer_uint16_enum_field@@Base+0x13f>
  423326:	mov    r12d,r9d
  423329:	jmp    42324c <flatcc_json_printer_uint16_enum_field@@Base+0x4c>
  42332e:	xchg   ax,ax
  423330:	movzx  edi,r12w
  423334:	call   41f850 <flatcc_json_parser_struct_as_root@@Base+0x10>
  423339:	cdqe   
  42333b:	add    QWORD PTR [rbx+0x28],rax
  42333f:	add    rsp,0x8
  423343:	pop    rbx
  423344:	pop    rbp
  423345:	pop    r12
  423347:	pop    r13
  423349:	pop    r14
  42334b:	pop    r15
  42334d:	ret    
  42334e:	xchg   ax,ax
  423350:	mov    rdi,rbx
  423353:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  423358:	mov    rbp,QWORD PTR [rbx+0x28]
  42335c:	jmp    4232c4 <flatcc_json_printer_uint16_enum_field@@Base+0xc4>
  423361:	nop    DWORD PTR [rax+0x0]
  423368:	lea    rax,[rdx+0x1]
  42336c:	mov    QWORD PTR [rdi+0x28],rax
  423370:	mov    BYTE PTR [rdx],0xa
  423373:	movzx  edx,BYTE PTR [rdi+0x31]
  423377:	imul   edx,DWORD PTR [rdi+0x38]
  42337b:	mov    rdi,QWORD PTR [rdi+0x28]
  42337f:	movsxd r14,edx
  423382:	lea    rax,[rdi+r14*1]
  423386:	cmp    QWORD PTR [rbx+0x20],rax
  42338a:	jae    4233a0 <flatcc_json_printer_uint16_enum_field@@Base+0x1a0>
  42338c:	mov    rsi,r14
  42338f:	mov    rdi,rbx
  423392:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  423397:	mov    rdx,QWORD PTR [rbx+0x28]
  42339b:	jmp    42328e <flatcc_json_printer_uint16_enum_field@@Base+0x8e>
  4233a0:	mov    rdx,r14
  4233a3:	mov    esi,0x20
  4233a8:	call   4061c0 <memset@plt>
  4233ad:	mov    rdx,QWORD PTR [rbx+0x28]
  4233b1:	add    rdx,r14
  4233b4:	mov    QWORD PTR [rbx+0x28],rdx
  4233b8:	jmp    42328e <flatcc_json_printer_uint16_enum_field@@Base+0x8e>
  4233bd:	nop    DWORD PTR [rax]
  4233c0:	cmp    BYTE PTR [rdi+0x34],0x0
  4233c4:	je     42324c <flatcc_json_printer_uint16_enum_field@@Base+0x4c>
  4233ca:	jmp    42333f <flatcc_json_printer_uint16_enum_field@@Base+0x13f>
  4233cf:	nop

00000000004233d0 <flatcc_json_printer_uint32_enum_field@@Base>:
  4233d0:	endbr64 
  4233d4:	push   r15
  4233d6:	lea    eax,[rdx+rdx*1+0x4]
  4233da:	push   r14
  4233dc:	push   r13
  4233de:	push   r12
  4233e0:	push   rbp
  4233e1:	push   rbx
  4233e2:	sub    rsp,0x8
  4233e6:	mov    r13,QWORD PTR [rsp+0x40]
  4233eb:	cmp    eax,DWORD PTR [rsi+0x10]
  4233ee:	jge    4234f0 <flatcc_json_printer_uint32_enum_field@@Base+0x120>
  4233f4:	mov    rdx,QWORD PTR [rsi+0x8]
  4233f8:	movzx  eax,WORD PTR [rdx+rax*1]
  4233fc:	test   ax,ax
  4233ff:	je     4234f0 <flatcc_json_printer_uint32_enum_field@@Base+0x120>
  423405:	add    rax,QWORD PTR [rsi]
  423408:	je     4234f0 <flatcc_json_printer_uint32_enum_field@@Base+0x120>
  42340e:	mov    r12d,DWORD PTR [rax]
  423411:	cmp    r9d,r12d
  423414:	je     423590 <flatcc_json_printer_uint32_enum_field@@Base+0x1c0>
  42341a:	mov    eax,DWORD PTR [rsi+0x18]
  42341d:	lea    edx,[rax+0x1]
  423420:	mov    DWORD PTR [rsi+0x18],edx
  423423:	mov    rdx,QWORD PTR [rdi+0x28]
  423427:	test   eax,eax
  423429:	je     42343a <flatcc_json_printer_uint32_enum_field@@Base+0x6a>
  42342b:	lea    rax,[rdx+0x1]
  42342f:	mov    QWORD PTR [rdi+0x28],rax
  423433:	mov    BYTE PTR [rdx],0x2c
  423436:	mov    rdx,QWORD PTR [rdi+0x28]
  42343a:	cmp    BYTE PTR [rdi+0x31],0x0
  42343e:	mov    r15,rcx
  423441:	mov    rbx,rdi
  423444:	movsxd rbp,r8d
  423447:	jne    423538 <flatcc_json_printer_uint32_enum_field@@Base+0x168>
  42344d:	cmp    QWORD PTR [rdi+0x20],rdx
  423451:	ja     42345c <flatcc_json_printer_uint32_enum_field@@Base+0x8c>
  423453:	xor    esi,esi
  423455:	call   QWORD PTR [rdi+0x48]
  423458:	mov    rdx,QWORD PTR [rbx+0x28]
  42345c:	mov    BYTE PTR [rdx],0x22
  42345f:	xor    edi,edi
  423461:	mov    rdx,rbp
  423464:	cmp    BYTE PTR [rbx+0x32],0x0
  423468:	sete   dil
  42346c:	add    rdi,QWORD PTR [rbx+0x28]
  423470:	lea    rax,[rdi+rbp*1]
  423474:	mov    QWORD PTR [rbx+0x28],rdi
  423478:	mov    rsi,r15
  42347b:	cmp    QWORD PTR [rbx+0x20],rax
  42347f:	jbe    423520 <flatcc_json_printer_uint32_enum_field@@Base+0x150>
  423485:	call   406210 <memcpy@plt>
  42348a:	add    rbp,QWORD PTR [rbx+0x28]
  42348e:	mov    QWORD PTR [rbx+0x28],rbp
  423492:	mov    BYTE PTR [rbp+0x0],0x22
  423496:	xor    eax,eax
  423498:	cmp    BYTE PTR [rbx+0x32],0x0
  42349c:	sete   al
  42349f:	add    rax,QWORD PTR [rbx+0x28]
  4234a3:	lea    rdx,[rax+0x1]
  4234a7:	mov    QWORD PTR [rbx+0x28],rdx
  4234ab:	mov    BYTE PTR [rax],0x3a
  4234ae:	xor    esi,esi
  4234b0:	mov    rax,QWORD PTR [rbx+0x28]
  4234b4:	mov    BYTE PTR [rax],0x20
  4234b7:	cmp    BYTE PTR [rbx+0x31],0x0
  4234bb:	setne  sil
  4234bf:	add    rsi,QWORD PTR [rbx+0x28]
  4234c3:	cmp    BYTE PTR [rbx+0x33],0x0
  4234c7:	mov    QWORD PTR [rbx+0x28],rsi
  4234cb:	jne    423500 <flatcc_json_printer_uint32_enum_field@@Base+0x130>
  4234cd:	add    rsp,0x8
  4234d1:	mov    rdi,rbx
  4234d4:	pop    rbx
  4234d5:	pop    rbp
  4234d6:	mov    esi,r12d
  4234d9:	pop    r12
  4234db:	mov    rax,r13
  4234de:	pop    r13
  4234e0:	pop    r14
  4234e2:	pop    r15
  4234e4:	jmp    rax
  4234e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4234f0:	cmp    BYTE PTR [rdi+0x35],0x0
  4234f4:	je     42350e <flatcc_json_printer_uint32_enum_field@@Base+0x13e>
  4234f6:	mov    r12d,r9d
  4234f9:	jmp    42341a <flatcc_json_printer_uint32_enum_field@@Base+0x4a>
  4234fe:	xchg   ax,ax
  423500:	mov    edi,r12d
  423503:	call   41f980 <flatcc_json_parser_struct_as_root@@Base+0x140>
  423508:	cdqe   
  42350a:	add    QWORD PTR [rbx+0x28],rax
  42350e:	add    rsp,0x8
  423512:	pop    rbx
  423513:	pop    rbp
  423514:	pop    r12
  423516:	pop    r13
  423518:	pop    r14
  42351a:	pop    r15
  42351c:	ret    
  42351d:	nop    DWORD PTR [rax]
  423520:	mov    rdi,rbx
  423523:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  423528:	mov    rbp,QWORD PTR [rbx+0x28]
  42352c:	jmp    423492 <flatcc_json_printer_uint32_enum_field@@Base+0xc2>
  423531:	nop    DWORD PTR [rax+0x0]
  423538:	lea    rax,[rdx+0x1]
  42353c:	mov    QWORD PTR [rdi+0x28],rax
  423540:	mov    BYTE PTR [rdx],0xa
  423543:	movzx  edx,BYTE PTR [rdi+0x31]
  423547:	imul   edx,DWORD PTR [rdi+0x38]
  42354b:	mov    rdi,QWORD PTR [rdi+0x28]
  42354f:	movsxd r14,edx
  423552:	lea    rax,[rdi+r14*1]
  423556:	cmp    QWORD PTR [rbx+0x20],rax
  42355a:	jae    423570 <flatcc_json_printer_uint32_enum_field@@Base+0x1a0>
  42355c:	mov    rsi,r14
  42355f:	mov    rdi,rbx
  423562:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  423567:	mov    rdx,QWORD PTR [rbx+0x28]
  42356b:	jmp    42345c <flatcc_json_printer_uint32_enum_field@@Base+0x8c>
  423570:	mov    rdx,r14
  423573:	mov    esi,0x20
  423578:	call   4061c0 <memset@plt>
  42357d:	mov    rdx,QWORD PTR [rbx+0x28]
  423581:	add    rdx,r14
  423584:	mov    QWORD PTR [rbx+0x28],rdx
  423588:	jmp    42345c <flatcc_json_printer_uint32_enum_field@@Base+0x8c>
  42358d:	nop    DWORD PTR [rax]
  423590:	cmp    BYTE PTR [rdi+0x34],0x0
  423594:	je     42341a <flatcc_json_printer_uint32_enum_field@@Base+0x4a>
  42359a:	jmp    42350e <flatcc_json_printer_uint32_enum_field@@Base+0x13e>
  42359f:	nop

00000000004235a0 <flatcc_json_printer_uint64_enum_field@@Base>:
  4235a0:	endbr64 
  4235a4:	push   r15
  4235a6:	lea    eax,[rdx+rdx*1+0x4]
  4235aa:	push   r14
  4235ac:	push   r13
  4235ae:	push   r12
  4235b0:	push   rbp
  4235b1:	push   rbx
  4235b2:	sub    rsp,0x8
  4235b6:	mov    r13,QWORD PTR [rsp+0x40]
  4235bb:	cmp    eax,DWORD PTR [rsi+0x10]
  4235be:	jge    4236c0 <flatcc_json_printer_uint64_enum_field@@Base+0x120>
  4235c4:	mov    rdx,QWORD PTR [rsi+0x8]
  4235c8:	movzx  eax,WORD PTR [rdx+rax*1]
  4235cc:	test   ax,ax
  4235cf:	je     4236c0 <flatcc_json_printer_uint64_enum_field@@Base+0x120>
  4235d5:	add    rax,QWORD PTR [rsi]
  4235d8:	je     4236c0 <flatcc_json_printer_uint64_enum_field@@Base+0x120>
  4235de:	mov    r12,QWORD PTR [rax]
  4235e1:	cmp    r9,r12
  4235e4:	je     423760 <flatcc_json_printer_uint64_enum_field@@Base+0x1c0>
  4235ea:	mov    eax,DWORD PTR [rsi+0x18]
  4235ed:	lea    edx,[rax+0x1]
  4235f0:	mov    DWORD PTR [rsi+0x18],edx
  4235f3:	mov    rdx,QWORD PTR [rdi+0x28]
  4235f7:	test   eax,eax
  4235f9:	je     42360a <flatcc_json_printer_uint64_enum_field@@Base+0x6a>
  4235fb:	lea    rax,[rdx+0x1]
  4235ff:	mov    QWORD PTR [rdi+0x28],rax
  423603:	mov    BYTE PTR [rdx],0x2c
  423606:	mov    rdx,QWORD PTR [rdi+0x28]
  42360a:	cmp    BYTE PTR [rdi+0x31],0x0
  42360e:	mov    r15,rcx
  423611:	mov    rbx,rdi
  423614:	movsxd rbp,r8d
  423617:	jne    423708 <flatcc_json_printer_uint64_enum_field@@Base+0x168>
  42361d:	cmp    QWORD PTR [rdi+0x20],rdx
  423621:	ja     42362c <flatcc_json_printer_uint64_enum_field@@Base+0x8c>
  423623:	xor    esi,esi
  423625:	call   QWORD PTR [rdi+0x48]
  423628:	mov    rdx,QWORD PTR [rbx+0x28]
  42362c:	mov    BYTE PTR [rdx],0x22
  42362f:	xor    edi,edi
  423631:	mov    rdx,rbp
  423634:	cmp    BYTE PTR [rbx+0x32],0x0
  423638:	sete   dil
  42363c:	add    rdi,QWORD PTR [rbx+0x28]
  423640:	lea    rax,[rdi+rbp*1]
  423644:	mov    QWORD PTR [rbx+0x28],rdi
  423648:	mov    rsi,r15
  42364b:	cmp    QWORD PTR [rbx+0x20],rax
  42364f:	jbe    4236f0 <flatcc_json_printer_uint64_enum_field@@Base+0x150>
  423655:	call   406210 <memcpy@plt>
  42365a:	add    rbp,QWORD PTR [rbx+0x28]
  42365e:	mov    QWORD PTR [rbx+0x28],rbp
  423662:	mov    BYTE PTR [rbp+0x0],0x22
  423666:	xor    eax,eax
  423668:	cmp    BYTE PTR [rbx+0x32],0x0
  42366c:	sete   al
  42366f:	add    rax,QWORD PTR [rbx+0x28]
  423673:	lea    rdx,[rax+0x1]
  423677:	mov    QWORD PTR [rbx+0x28],rdx
  42367b:	mov    BYTE PTR [rax],0x3a
  42367e:	xor    esi,esi
  423680:	mov    rax,QWORD PTR [rbx+0x28]
  423684:	mov    BYTE PTR [rax],0x20
  423687:	cmp    BYTE PTR [rbx+0x31],0x0
  42368b:	setne  sil
  42368f:	add    rsi,QWORD PTR [rbx+0x28]
  423693:	cmp    BYTE PTR [rbx+0x33],0x0
  423697:	mov    QWORD PTR [rbx+0x28],rsi
  42369b:	jne    4236d0 <flatcc_json_printer_uint64_enum_field@@Base+0x130>
  42369d:	add    rsp,0x8
  4236a1:	mov    rdi,rbx
  4236a4:	pop    rbx
  4236a5:	pop    rbp
  4236a6:	mov    rsi,r12
  4236a9:	pop    r12
  4236ab:	mov    rax,r13
  4236ae:	pop    r13
  4236b0:	pop    r14
  4236b2:	pop    r15
  4236b4:	jmp    rax
  4236b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4236c0:	cmp    BYTE PTR [rdi+0x35],0x0
  4236c4:	je     4236de <flatcc_json_printer_uint64_enum_field@@Base+0x13e>
  4236c6:	mov    r12,r9
  4236c9:	jmp    4235ea <flatcc_json_printer_uint64_enum_field@@Base+0x4a>
  4236ce:	xchg   ax,ax
  4236d0:	mov    rdi,r12
  4236d3:	call   41fc30 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  4236d8:	cdqe   
  4236da:	add    QWORD PTR [rbx+0x28],rax
  4236de:	add    rsp,0x8
  4236e2:	pop    rbx
  4236e3:	pop    rbp
  4236e4:	pop    r12
  4236e6:	pop    r13
  4236e8:	pop    r14
  4236ea:	pop    r15
  4236ec:	ret    
  4236ed:	nop    DWORD PTR [rax]
  4236f0:	mov    rdi,rbx
  4236f3:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4236f8:	mov    rbp,QWORD PTR [rbx+0x28]
  4236fc:	jmp    423662 <flatcc_json_printer_uint64_enum_field@@Base+0xc2>
  423701:	nop    DWORD PTR [rax+0x0]
  423708:	lea    rax,[rdx+0x1]
  42370c:	mov    QWORD PTR [rdi+0x28],rax
  423710:	mov    BYTE PTR [rdx],0xa
  423713:	movzx  edx,BYTE PTR [rdi+0x31]
  423717:	imul   edx,DWORD PTR [rdi+0x38]
  42371b:	mov    rdi,QWORD PTR [rdi+0x28]
  42371f:	movsxd r14,edx
  423722:	lea    rax,[rdi+r14*1]
  423726:	cmp    QWORD PTR [rbx+0x20],rax
  42372a:	jae    423740 <flatcc_json_printer_uint64_enum_field@@Base+0x1a0>
  42372c:	mov    rsi,r14
  42372f:	mov    rdi,rbx
  423732:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  423737:	mov    rdx,QWORD PTR [rbx+0x28]
  42373b:	jmp    42362c <flatcc_json_printer_uint64_enum_field@@Base+0x8c>
  423740:	mov    rdx,r14
  423743:	mov    esi,0x20
  423748:	call   4061c0 <memset@plt>
  42374d:	mov    rdx,QWORD PTR [rbx+0x28]
  423751:	add    rdx,r14
  423754:	mov    QWORD PTR [rbx+0x28],rdx
  423758:	jmp    42362c <flatcc_json_printer_uint64_enum_field@@Base+0x8c>
  42375d:	nop    DWORD PTR [rax]
  423760:	cmp    BYTE PTR [rdi+0x34],0x0
  423764:	je     4235ea <flatcc_json_printer_uint64_enum_field@@Base+0x4a>
  42376a:	jmp    4236de <flatcc_json_printer_uint64_enum_field@@Base+0x13e>
  42376f:	nop

0000000000423770 <flatcc_json_printer_int8_enum_field@@Base>:
  423770:	endbr64 
  423774:	push   r15
  423776:	lea    eax,[rdx+rdx*1+0x4]
  42377a:	push   r14
  42377c:	push   r13
  42377e:	push   r12
  423780:	push   rbp
  423781:	push   rbx
  423782:	sub    rsp,0x8
  423786:	mov    r13,QWORD PTR [rsp+0x40]
  42378b:	cmp    eax,DWORD PTR [rsi+0x10]
  42378e:	jge    4238b0 <flatcc_json_printer_int8_enum_field@@Base+0x140>
  423794:	mov    rdx,QWORD PTR [rsi+0x8]
  423798:	movzx  eax,WORD PTR [rdx+rax*1]
  42379c:	test   ax,ax
  42379f:	je     4238b0 <flatcc_json_printer_int8_enum_field@@Base+0x140>
  4237a5:	add    rax,QWORD PTR [rsi]
  4237a8:	je     4238b0 <flatcc_json_printer_int8_enum_field@@Base+0x140>
  4237ae:	movzx  r12d,BYTE PTR [rax]
  4237b2:	cmp    r9b,r12b
  4237b5:	je     423950 <flatcc_json_printer_int8_enum_field@@Base+0x1e0>
  4237bb:	mov    eax,DWORD PTR [rsi+0x18]
  4237be:	lea    edx,[rax+0x1]
  4237c1:	mov    DWORD PTR [rsi+0x18],edx
  4237c4:	mov    rdx,QWORD PTR [rdi+0x28]
  4237c8:	test   eax,eax
  4237ca:	je     4237db <flatcc_json_printer_int8_enum_field@@Base+0x6b>
  4237cc:	lea    rax,[rdx+0x1]
  4237d0:	mov    QWORD PTR [rdi+0x28],rax
  4237d4:	mov    BYTE PTR [rdx],0x2c
  4237d7:	mov    rdx,QWORD PTR [rdi+0x28]
  4237db:	cmp    BYTE PTR [rdi+0x31],0x0
  4237df:	mov    r15,rcx
  4237e2:	mov    rbx,rdi
  4237e5:	movsxd rbp,r8d
  4237e8:	jne    4238f8 <flatcc_json_printer_int8_enum_field@@Base+0x188>
  4237ee:	cmp    QWORD PTR [rdi+0x20],rdx
  4237f2:	ja     4237fd <flatcc_json_printer_int8_enum_field@@Base+0x8d>
  4237f4:	xor    esi,esi
  4237f6:	call   QWORD PTR [rdi+0x48]
  4237f9:	mov    rdx,QWORD PTR [rbx+0x28]
  4237fd:	mov    BYTE PTR [rdx],0x22
  423800:	xor    edi,edi
  423802:	mov    rdx,rbp
  423805:	cmp    BYTE PTR [rbx+0x32],0x0
  423809:	sete   dil
  42380d:	add    rdi,QWORD PTR [rbx+0x28]
  423811:	lea    rax,[rdi+rbp*1]
  423815:	mov    QWORD PTR [rbx+0x28],rdi
  423819:	mov    rsi,r15
  42381c:	cmp    QWORD PTR [rbx+0x20],rax
  423820:	jbe    4238e0 <flatcc_json_printer_int8_enum_field@@Base+0x170>
  423826:	call   406210 <memcpy@plt>
  42382b:	add    rbp,QWORD PTR [rbx+0x28]
  42382f:	mov    QWORD PTR [rbx+0x28],rbp
  423833:	mov    BYTE PTR [rbp+0x0],0x22
  423837:	xor    eax,eax
  423839:	cmp    BYTE PTR [rbx+0x32],0x0
  42383d:	sete   al
  423840:	add    rax,QWORD PTR [rbx+0x28]
  423844:	lea    rdx,[rax+0x1]
  423848:	mov    QWORD PTR [rbx+0x28],rdx
  42384c:	mov    BYTE PTR [rax],0x3a
  42384f:	xor    esi,esi
  423851:	mov    rax,QWORD PTR [rbx+0x28]
  423855:	mov    BYTE PTR [rax],0x20
  423858:	cmp    BYTE PTR [rbx+0x31],0x0
  42385c:	setne  sil
  423860:	add    rsi,QWORD PTR [rbx+0x28]
  423864:	cmp    BYTE PTR [rbx+0x33],0x0
  423868:	mov    QWORD PTR [rbx+0x28],rsi
  42386c:	je     4238c0 <flatcc_json_printer_int8_enum_field@@Base+0x150>
  42386e:	movsx  r8d,r12b
  423872:	shr    r8d,0x1f
  423876:	test   r12b,r12b
  423879:	jns    423884 <flatcc_json_printer_int8_enum_field@@Base+0x114>
  42387b:	mov    BYTE PTR [rsi],0x2d
  42387e:	neg    r12d
  423881:	inc    rsi
  423884:	movzx  edi,r12b
  423888:	call   4205c0 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  42388d:	add    r8d,eax
  423890:	movsxd r8,r8d
  423893:	add    QWORD PTR [rbx+0x28],r8
  423897:	add    rsp,0x8
  42389b:	pop    rbx
  42389c:	pop    rbp
  42389d:	pop    r12
  42389f:	pop    r13
  4238a1:	pop    r14
  4238a3:	pop    r15
  4238a5:	ret    
  4238a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4238b0:	cmp    BYTE PTR [rdi+0x35],0x0
  4238b4:	je     423897 <flatcc_json_printer_int8_enum_field@@Base+0x127>
  4238b6:	mov    r12d,r9d
  4238b9:	jmp    4237bb <flatcc_json_printer_int8_enum_field@@Base+0x4b>
  4238be:	xchg   ax,ax
  4238c0:	add    rsp,0x8
  4238c4:	mov    rdi,rbx
  4238c7:	pop    rbx
  4238c8:	pop    rbp
  4238c9:	movsx  esi,r12b
  4238cd:	pop    r12
  4238cf:	mov    rax,r13
  4238d2:	pop    r13
  4238d4:	pop    r14
  4238d6:	pop    r15
  4238d8:	jmp    rax
  4238da:	nop    WORD PTR [rax+rax*1+0x0]
  4238e0:	mov    rdi,rbx
  4238e3:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4238e8:	mov    rbp,QWORD PTR [rbx+0x28]
  4238ec:	jmp    423833 <flatcc_json_printer_int8_enum_field@@Base+0xc3>
  4238f1:	nop    DWORD PTR [rax+0x0]
  4238f8:	lea    rax,[rdx+0x1]
  4238fc:	mov    QWORD PTR [rdi+0x28],rax
  423900:	mov    BYTE PTR [rdx],0xa
  423903:	movzx  edx,BYTE PTR [rdi+0x31]
  423907:	imul   edx,DWORD PTR [rdi+0x38]
  42390b:	mov    rdi,QWORD PTR [rdi+0x28]
  42390f:	movsxd r14,edx
  423912:	lea    rax,[rdi+r14*1]
  423916:	cmp    QWORD PTR [rbx+0x20],rax
  42391a:	jae    423930 <flatcc_json_printer_int8_enum_field@@Base+0x1c0>
  42391c:	mov    rsi,r14
  42391f:	mov    rdi,rbx
  423922:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  423927:	mov    rdx,QWORD PTR [rbx+0x28]
  42392b:	jmp    4237fd <flatcc_json_printer_int8_enum_field@@Base+0x8d>
  423930:	mov    rdx,r14
  423933:	mov    esi,0x20
  423938:	call   4061c0 <memset@plt>
  42393d:	mov    rdx,QWORD PTR [rbx+0x28]
  423941:	add    rdx,r14
  423944:	mov    QWORD PTR [rbx+0x28],rdx
  423948:	jmp    4237fd <flatcc_json_printer_int8_enum_field@@Base+0x8d>
  42394d:	nop    DWORD PTR [rax]
  423950:	cmp    BYTE PTR [rdi+0x34],0x0
  423954:	je     4237bb <flatcc_json_printer_int8_enum_field@@Base+0x4b>
  42395a:	jmp    423897 <flatcc_json_printer_int8_enum_field@@Base+0x127>
  42395f:	nop

0000000000423960 <flatcc_json_printer_int16_enum_field@@Base>:
  423960:	endbr64 
  423964:	push   r15
  423966:	lea    eax,[rdx+rdx*1+0x4]
  42396a:	push   r14
  42396c:	push   r13
  42396e:	push   r12
  423970:	push   rbp
  423971:	push   rbx
  423972:	sub    rsp,0x8
  423976:	mov    r13,QWORD PTR [rsp+0x40]
  42397b:	cmp    eax,DWORD PTR [rsi+0x10]
  42397e:	jge    423aa0 <flatcc_json_printer_int16_enum_field@@Base+0x140>
  423984:	mov    rdx,QWORD PTR [rsi+0x8]
  423988:	movzx  eax,WORD PTR [rdx+rax*1]
  42398c:	test   ax,ax
  42398f:	je     423aa0 <flatcc_json_printer_int16_enum_field@@Base+0x140>
  423995:	add    rax,QWORD PTR [rsi]
  423998:	je     423aa0 <flatcc_json_printer_int16_enum_field@@Base+0x140>
  42399e:	movzx  r12d,WORD PTR [rax]
  4239a2:	cmp    r9w,r12w
  4239a6:	je     423b40 <flatcc_json_printer_int16_enum_field@@Base+0x1e0>
  4239ac:	mov    eax,DWORD PTR [rsi+0x18]
  4239af:	lea    edx,[rax+0x1]
  4239b2:	mov    DWORD PTR [rsi+0x18],edx
  4239b5:	mov    rdx,QWORD PTR [rdi+0x28]
  4239b9:	test   eax,eax
  4239bb:	je     4239cc <flatcc_json_printer_int16_enum_field@@Base+0x6c>
  4239bd:	lea    rax,[rdx+0x1]
  4239c1:	mov    QWORD PTR [rdi+0x28],rax
  4239c5:	mov    BYTE PTR [rdx],0x2c
  4239c8:	mov    rdx,QWORD PTR [rdi+0x28]
  4239cc:	cmp    BYTE PTR [rdi+0x31],0x0
  4239d0:	mov    r15,rcx
  4239d3:	mov    rbx,rdi
  4239d6:	movsxd rbp,r8d
  4239d9:	jne    423ae8 <flatcc_json_printer_int16_enum_field@@Base+0x188>
  4239df:	cmp    QWORD PTR [rdi+0x20],rdx
  4239e3:	ja     4239ee <flatcc_json_printer_int16_enum_field@@Base+0x8e>
  4239e5:	xor    esi,esi
  4239e7:	call   QWORD PTR [rdi+0x48]
  4239ea:	mov    rdx,QWORD PTR [rbx+0x28]
  4239ee:	mov    BYTE PTR [rdx],0x22
  4239f1:	xor    edi,edi
  4239f3:	mov    rdx,rbp
  4239f6:	cmp    BYTE PTR [rbx+0x32],0x0
  4239fa:	sete   dil
  4239fe:	add    rdi,QWORD PTR [rbx+0x28]
  423a02:	lea    rax,[rdi+rbp*1]
  423a06:	mov    QWORD PTR [rbx+0x28],rdi
  423a0a:	mov    rsi,r15
  423a0d:	cmp    QWORD PTR [rbx+0x20],rax
  423a11:	jbe    423ad0 <flatcc_json_printer_int16_enum_field@@Base+0x170>
  423a17:	call   406210 <memcpy@plt>
  423a1c:	add    rbp,QWORD PTR [rbx+0x28]
  423a20:	mov    QWORD PTR [rbx+0x28],rbp
  423a24:	mov    BYTE PTR [rbp+0x0],0x22
  423a28:	xor    eax,eax
  423a2a:	cmp    BYTE PTR [rbx+0x32],0x0
  423a2e:	sete   al
  423a31:	add    rax,QWORD PTR [rbx+0x28]
  423a35:	lea    rdx,[rax+0x1]
  423a39:	mov    QWORD PTR [rbx+0x28],rdx
  423a3d:	mov    BYTE PTR [rax],0x3a
  423a40:	xor    esi,esi
  423a42:	mov    rax,QWORD PTR [rbx+0x28]
  423a46:	mov    BYTE PTR [rax],0x20
  423a49:	cmp    BYTE PTR [rbx+0x31],0x0
  423a4d:	setne  sil
  423a51:	add    rsi,QWORD PTR [rbx+0x28]
  423a55:	cmp    BYTE PTR [rbx+0x33],0x0
  423a59:	mov    QWORD PTR [rbx+0x28],rsi
  423a5d:	je     423ab0 <flatcc_json_printer_int16_enum_field@@Base+0x150>
  423a5f:	movsx  r11d,r12w
  423a63:	shr    r11d,0x1f
  423a67:	test   r12w,r12w
  423a6b:	jns    423a76 <flatcc_json_printer_int16_enum_field@@Base+0x116>
  423a6d:	mov    BYTE PTR [rsi],0x2d
  423a70:	neg    r12d
  423a73:	inc    rsi
  423a76:	movzx  edi,r12w
  423a7a:	call   41f850 <flatcc_json_parser_struct_as_root@@Base+0x10>
  423a7f:	add    r11d,eax
  423a82:	movsxd r11,r11d
  423a85:	add    QWORD PTR [rbx+0x28],r11
  423a89:	add    rsp,0x8
  423a8d:	pop    rbx
  423a8e:	pop    rbp
  423a8f:	pop    r12
  423a91:	pop    r13
  423a93:	pop    r14
  423a95:	pop    r15
  423a97:	ret    
  423a98:	nop    DWORD PTR [rax+rax*1+0x0]
  423aa0:	cmp    BYTE PTR [rdi+0x35],0x0
  423aa4:	je     423a89 <flatcc_json_printer_int16_enum_field@@Base+0x129>
  423aa6:	mov    r12d,r9d
  423aa9:	jmp    4239ac <flatcc_json_printer_int16_enum_field@@Base+0x4c>
  423aae:	xchg   ax,ax
  423ab0:	add    rsp,0x8
  423ab4:	mov    rdi,rbx
  423ab7:	pop    rbx
  423ab8:	pop    rbp
  423ab9:	movsx  esi,r12w
  423abd:	pop    r12
  423abf:	mov    rax,r13
  423ac2:	pop    r13
  423ac4:	pop    r14
  423ac6:	pop    r15
  423ac8:	jmp    rax
  423aca:	nop    WORD PTR [rax+rax*1+0x0]
  423ad0:	mov    rdi,rbx
  423ad3:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  423ad8:	mov    rbp,QWORD PTR [rbx+0x28]
  423adc:	jmp    423a24 <flatcc_json_printer_int16_enum_field@@Base+0xc4>
  423ae1:	nop    DWORD PTR [rax+0x0]
  423ae8:	lea    rax,[rdx+0x1]
  423aec:	mov    QWORD PTR [rdi+0x28],rax
  423af0:	mov    BYTE PTR [rdx],0xa
  423af3:	movzx  edx,BYTE PTR [rdi+0x31]
  423af7:	imul   edx,DWORD PTR [rdi+0x38]
  423afb:	mov    rdi,QWORD PTR [rdi+0x28]
  423aff:	movsxd r14,edx
  423b02:	lea    rax,[rdi+r14*1]
  423b06:	cmp    QWORD PTR [rbx+0x20],rax
  423b0a:	jae    423b20 <flatcc_json_printer_int16_enum_field@@Base+0x1c0>
  423b0c:	mov    rsi,r14
  423b0f:	mov    rdi,rbx
  423b12:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  423b17:	mov    rdx,QWORD PTR [rbx+0x28]
  423b1b:	jmp    4239ee <flatcc_json_printer_int16_enum_field@@Base+0x8e>
  423b20:	mov    rdx,r14
  423b23:	mov    esi,0x20
  423b28:	call   4061c0 <memset@plt>
  423b2d:	mov    rdx,QWORD PTR [rbx+0x28]
  423b31:	add    rdx,r14
  423b34:	mov    QWORD PTR [rbx+0x28],rdx
  423b38:	jmp    4239ee <flatcc_json_printer_int16_enum_field@@Base+0x8e>
  423b3d:	nop    DWORD PTR [rax]
  423b40:	cmp    BYTE PTR [rdi+0x34],0x0
  423b44:	je     4239ac <flatcc_json_printer_int16_enum_field@@Base+0x4c>
  423b4a:	jmp    423a89 <flatcc_json_printer_int16_enum_field@@Base+0x129>
  423b4f:	nop

0000000000423b50 <flatcc_json_printer_int32_enum_field@@Base>:
  423b50:	endbr64 
  423b54:	push   r15
  423b56:	lea    eax,[rdx+rdx*1+0x4]
  423b5a:	push   r14
  423b5c:	push   r13
  423b5e:	push   r12
  423b60:	push   rbp
  423b61:	push   rbx
  423b62:	sub    rsp,0x8
  423b66:	mov    r13,QWORD PTR [rsp+0x40]
  423b6b:	cmp    eax,DWORD PTR [rsi+0x10]
  423b6e:	jge    423c88 <flatcc_json_printer_int32_enum_field@@Base+0x138>
  423b74:	mov    rdx,QWORD PTR [rsi+0x8]
  423b78:	movzx  eax,WORD PTR [rdx+rax*1]
  423b7c:	test   ax,ax
  423b7f:	je     423c88 <flatcc_json_printer_int32_enum_field@@Base+0x138>
  423b85:	add    rax,QWORD PTR [rsi]
  423b88:	je     423c88 <flatcc_json_printer_int32_enum_field@@Base+0x138>
  423b8e:	mov    r14d,DWORD PTR [rax]
  423b91:	cmp    r9d,r14d
  423b94:	je     423d30 <flatcc_json_printer_int32_enum_field@@Base+0x1e0>
  423b9a:	mov    eax,DWORD PTR [rsi+0x18]
  423b9d:	lea    edx,[rax+0x1]
  423ba0:	mov    DWORD PTR [rsi+0x18],edx
  423ba3:	mov    rdx,QWORD PTR [rdi+0x28]
  423ba7:	test   eax,eax
  423ba9:	je     423bba <flatcc_json_printer_int32_enum_field@@Base+0x6a>
  423bab:	lea    rax,[rdx+0x1]
  423baf:	mov    QWORD PTR [rdi+0x28],rax
  423bb3:	mov    BYTE PTR [rdx],0x2c
  423bb6:	mov    rdx,QWORD PTR [rdi+0x28]
  423bba:	cmp    BYTE PTR [rdi+0x31],0x0
  423bbe:	mov    r15,rcx
  423bc1:	mov    rbx,rdi
  423bc4:	movsxd rbp,r8d
  423bc7:	jne    423cd8 <flatcc_json_printer_int32_enum_field@@Base+0x188>
  423bcd:	cmp    QWORD PTR [rdi+0x20],rdx
  423bd1:	ja     423bdc <flatcc_json_printer_int32_enum_field@@Base+0x8c>
  423bd3:	xor    esi,esi
  423bd5:	call   QWORD PTR [rdi+0x48]
  423bd8:	mov    rdx,QWORD PTR [rbx+0x28]
  423bdc:	mov    BYTE PTR [rdx],0x22
  423bdf:	xor    edi,edi
  423be1:	mov    rdx,rbp
  423be4:	cmp    BYTE PTR [rbx+0x32],0x0
  423be8:	sete   dil
  423bec:	add    rdi,QWORD PTR [rbx+0x28]
  423bf0:	lea    rax,[rdi+rbp*1]
  423bf4:	mov    QWORD PTR [rbx+0x28],rdi
  423bf8:	mov    rsi,r15
  423bfb:	cmp    QWORD PTR [rbx+0x20],rax
  423bff:	jbe    423cc0 <flatcc_json_printer_int32_enum_field@@Base+0x170>
  423c05:	call   406210 <memcpy@plt>
  423c0a:	add    rbp,QWORD PTR [rbx+0x28]
  423c0e:	mov    QWORD PTR [rbx+0x28],rbp
  423c12:	mov    BYTE PTR [rbp+0x0],0x22
  423c16:	xor    eax,eax
  423c18:	cmp    BYTE PTR [rbx+0x32],0x0
  423c1c:	sete   al
  423c1f:	add    rax,QWORD PTR [rbx+0x28]
  423c23:	lea    rdx,[rax+0x1]
  423c27:	mov    QWORD PTR [rbx+0x28],rdx
  423c2b:	mov    BYTE PTR [rax],0x3a
  423c2e:	xor    esi,esi
  423c30:	mov    rax,QWORD PTR [rbx+0x28]
  423c34:	mov    BYTE PTR [rax],0x20
  423c37:	cmp    BYTE PTR [rbx+0x31],0x0
  423c3b:	setne  sil
  423c3f:	add    rsi,QWORD PTR [rbx+0x28]
  423c43:	cmp    BYTE PTR [rbx+0x33],0x0
  423c47:	mov    QWORD PTR [rbx+0x28],rsi
  423c4b:	je     423ca0 <flatcc_json_printer_int32_enum_field@@Base+0x150>
  423c4d:	mov    ebp,r14d
  423c50:	shr    ebp,0x1f
  423c53:	test   r14d,r14d
  423c56:	jns    423c61 <flatcc_json_printer_int32_enum_field@@Base+0x111>
  423c58:	mov    BYTE PTR [rsi],0x2d
  423c5b:	neg    r14d
  423c5e:	inc    rsi
  423c61:	mov    edi,r14d
  423c64:	call   41f980 <flatcc_json_parser_struct_as_root@@Base+0x140>
  423c69:	add    ebp,eax
  423c6b:	movsxd rbp,ebp
  423c6e:	add    QWORD PTR [rbx+0x28],rbp
  423c72:	add    rsp,0x8
  423c76:	pop    rbx
  423c77:	pop    rbp
  423c78:	pop    r12
  423c7a:	pop    r13
  423c7c:	pop    r14
  423c7e:	pop    r15
  423c80:	ret    
  423c81:	nop    DWORD PTR [rax+0x0]
  423c88:	cmp    BYTE PTR [rdi+0x35],0x0
  423c8c:	je     423c72 <flatcc_json_printer_int32_enum_field@@Base+0x122>
  423c8e:	mov    r14d,r9d
  423c91:	jmp    423b9a <flatcc_json_printer_int32_enum_field@@Base+0x4a>
  423c96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  423ca0:	add    rsp,0x8
  423ca4:	mov    rdi,rbx
  423ca7:	pop    rbx
  423ca8:	pop    rbp
  423ca9:	pop    r12
  423cab:	mov    rax,r13
  423cae:	pop    r13
  423cb0:	mov    esi,r14d
  423cb3:	pop    r14
  423cb5:	pop    r15
  423cb7:	jmp    rax
  423cb9:	nop    DWORD PTR [rax+0x0]
  423cc0:	mov    rdi,rbx
  423cc3:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  423cc8:	mov    rbp,QWORD PTR [rbx+0x28]
  423ccc:	jmp    423c12 <flatcc_json_printer_int32_enum_field@@Base+0xc2>
  423cd1:	nop    DWORD PTR [rax+0x0]
  423cd8:	lea    rax,[rdx+0x1]
  423cdc:	mov    QWORD PTR [rdi+0x28],rax
  423ce0:	mov    BYTE PTR [rdx],0xa
  423ce3:	movzx  edx,BYTE PTR [rdi+0x31]
  423ce7:	imul   edx,DWORD PTR [rdi+0x38]
  423ceb:	mov    rdi,QWORD PTR [rdi+0x28]
  423cef:	movsxd r12,edx
  423cf2:	lea    rax,[rdi+r12*1]
  423cf6:	cmp    QWORD PTR [rbx+0x20],rax
  423cfa:	jae    423d10 <flatcc_json_printer_int32_enum_field@@Base+0x1c0>
  423cfc:	mov    rsi,r12
  423cff:	mov    rdi,rbx
  423d02:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  423d07:	mov    rdx,QWORD PTR [rbx+0x28]
  423d0b:	jmp    423bdc <flatcc_json_printer_int32_enum_field@@Base+0x8c>
  423d10:	mov    rdx,r12
  423d13:	mov    esi,0x20
  423d18:	call   4061c0 <memset@plt>
  423d1d:	mov    rdx,QWORD PTR [rbx+0x28]
  423d21:	add    rdx,r12
  423d24:	mov    QWORD PTR [rbx+0x28],rdx
  423d28:	jmp    423bdc <flatcc_json_printer_int32_enum_field@@Base+0x8c>
  423d2d:	nop    DWORD PTR [rax]
  423d30:	cmp    BYTE PTR [rdi+0x34],0x0
  423d34:	je     423b9a <flatcc_json_printer_int32_enum_field@@Base+0x4a>
  423d3a:	jmp    423c72 <flatcc_json_printer_int32_enum_field@@Base+0x122>
  423d3f:	nop

0000000000423d40 <flatcc_json_printer_int64_enum_field@@Base>:
  423d40:	endbr64 
  423d44:	push   r15
  423d46:	lea    eax,[rdx+rdx*1+0x4]
  423d4a:	push   r14
  423d4c:	push   r13
  423d4e:	push   r12
  423d50:	push   rbp
  423d51:	push   rbx
  423d52:	sub    rsp,0x8
  423d56:	mov    r13,QWORD PTR [rsp+0x40]
  423d5b:	cmp    eax,DWORD PTR [rsi+0x10]
  423d5e:	jge    423e78 <flatcc_json_printer_int64_enum_field@@Base+0x138>
  423d64:	mov    rdx,QWORD PTR [rsi+0x8]
  423d68:	movzx  eax,WORD PTR [rdx+rax*1]
  423d6c:	test   ax,ax
  423d6f:	je     423e78 <flatcc_json_printer_int64_enum_field@@Base+0x138>
  423d75:	add    rax,QWORD PTR [rsi]
  423d78:	je     423e78 <flatcc_json_printer_int64_enum_field@@Base+0x138>
  423d7e:	mov    r14,QWORD PTR [rax]
  423d81:	cmp    r9,r14
  423d84:	je     423f20 <flatcc_json_printer_int64_enum_field@@Base+0x1e0>
  423d8a:	mov    eax,DWORD PTR [rsi+0x18]
  423d8d:	lea    edx,[rax+0x1]
  423d90:	mov    DWORD PTR [rsi+0x18],edx
  423d93:	mov    rdx,QWORD PTR [rdi+0x28]
  423d97:	test   eax,eax
  423d99:	je     423daa <flatcc_json_printer_int64_enum_field@@Base+0x6a>
  423d9b:	lea    rax,[rdx+0x1]
  423d9f:	mov    QWORD PTR [rdi+0x28],rax
  423da3:	mov    BYTE PTR [rdx],0x2c
  423da6:	mov    rdx,QWORD PTR [rdi+0x28]
  423daa:	cmp    BYTE PTR [rdi+0x31],0x0
  423dae:	mov    r15,rcx
  423db1:	mov    rbx,rdi
  423db4:	movsxd rbp,r8d
  423db7:	jne    423ec8 <flatcc_json_printer_int64_enum_field@@Base+0x188>
  423dbd:	cmp    QWORD PTR [rdi+0x20],rdx
  423dc1:	ja     423dcc <flatcc_json_printer_int64_enum_field@@Base+0x8c>
  423dc3:	xor    esi,esi
  423dc5:	call   QWORD PTR [rdi+0x48]
  423dc8:	mov    rdx,QWORD PTR [rbx+0x28]
  423dcc:	mov    BYTE PTR [rdx],0x22
  423dcf:	xor    edi,edi
  423dd1:	mov    rdx,rbp
  423dd4:	cmp    BYTE PTR [rbx+0x32],0x0
  423dd8:	sete   dil
  423ddc:	add    rdi,QWORD PTR [rbx+0x28]
  423de0:	lea    rax,[rdi+rbp*1]
  423de4:	mov    QWORD PTR [rbx+0x28],rdi
  423de8:	mov    rsi,r15
  423deb:	cmp    QWORD PTR [rbx+0x20],rax
  423def:	jbe    423eb0 <flatcc_json_printer_int64_enum_field@@Base+0x170>
  423df5:	call   406210 <memcpy@plt>
  423dfa:	add    rbp,QWORD PTR [rbx+0x28]
  423dfe:	mov    QWORD PTR [rbx+0x28],rbp
  423e02:	mov    BYTE PTR [rbp+0x0],0x22
  423e06:	xor    eax,eax
  423e08:	cmp    BYTE PTR [rbx+0x32],0x0
  423e0c:	sete   al
  423e0f:	add    rax,QWORD PTR [rbx+0x28]
  423e13:	lea    rdx,[rax+0x1]
  423e17:	mov    QWORD PTR [rbx+0x28],rdx
  423e1b:	mov    BYTE PTR [rax],0x3a
  423e1e:	xor    esi,esi
  423e20:	mov    rax,QWORD PTR [rbx+0x28]
  423e24:	mov    BYTE PTR [rax],0x20
  423e27:	cmp    BYTE PTR [rbx+0x31],0x0
  423e2b:	setne  sil
  423e2f:	add    rsi,QWORD PTR [rbx+0x28]
  423e33:	cmp    BYTE PTR [rbx+0x33],0x0
  423e37:	mov    QWORD PTR [rbx+0x28],rsi
  423e3b:	je     423e90 <flatcc_json_printer_int64_enum_field@@Base+0x150>
  423e3d:	mov    rbp,r14
  423e40:	shr    rbp,0x3f
  423e44:	test   r14,r14
  423e47:	jns    423e52 <flatcc_json_printer_int64_enum_field@@Base+0x112>
  423e49:	mov    BYTE PTR [rsi],0x2d
  423e4c:	neg    r14
  423e4f:	inc    rsi
  423e52:	mov    rdi,r14
  423e55:	call   41fc30 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  423e5a:	add    eax,ebp
  423e5c:	cdqe   
  423e5e:	add    QWORD PTR [rbx+0x28],rax
  423e62:	add    rsp,0x8
  423e66:	pop    rbx
  423e67:	pop    rbp
  423e68:	pop    r12
  423e6a:	pop    r13
  423e6c:	pop    r14
  423e6e:	pop    r15
  423e70:	ret    
  423e71:	nop    DWORD PTR [rax+0x0]
  423e78:	cmp    BYTE PTR [rdi+0x35],0x0
  423e7c:	je     423e62 <flatcc_json_printer_int64_enum_field@@Base+0x122>
  423e7e:	mov    r14,r9
  423e81:	jmp    423d8a <flatcc_json_printer_int64_enum_field@@Base+0x4a>
  423e86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  423e90:	add    rsp,0x8
  423e94:	mov    rdi,rbx
  423e97:	pop    rbx
  423e98:	pop    rbp
  423e99:	pop    r12
  423e9b:	mov    rax,r13
  423e9e:	pop    r13
  423ea0:	mov    rsi,r14
  423ea3:	pop    r14
  423ea5:	pop    r15
  423ea7:	jmp    rax
  423ea9:	nop    DWORD PTR [rax+0x0]
  423eb0:	mov    rdi,rbx
  423eb3:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  423eb8:	mov    rbp,QWORD PTR [rbx+0x28]
  423ebc:	jmp    423e02 <flatcc_json_printer_int64_enum_field@@Base+0xc2>
  423ec1:	nop    DWORD PTR [rax+0x0]
  423ec8:	lea    rax,[rdx+0x1]
  423ecc:	mov    QWORD PTR [rdi+0x28],rax
  423ed0:	mov    BYTE PTR [rdx],0xa
  423ed3:	movzx  edx,BYTE PTR [rdi+0x31]
  423ed7:	imul   edx,DWORD PTR [rdi+0x38]
  423edb:	mov    rdi,QWORD PTR [rdi+0x28]
  423edf:	movsxd r12,edx
  423ee2:	lea    rax,[rdi+r12*1]
  423ee6:	cmp    QWORD PTR [rbx+0x20],rax
  423eea:	jae    423f00 <flatcc_json_printer_int64_enum_field@@Base+0x1c0>
  423eec:	mov    rsi,r12
  423eef:	mov    rdi,rbx
  423ef2:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  423ef7:	mov    rdx,QWORD PTR [rbx+0x28]
  423efb:	jmp    423dcc <flatcc_json_printer_int64_enum_field@@Base+0x8c>
  423f00:	mov    rdx,r12
  423f03:	mov    esi,0x20
  423f08:	call   4061c0 <memset@plt>
  423f0d:	mov    rdx,QWORD PTR [rbx+0x28]
  423f11:	add    rdx,r12
  423f14:	mov    QWORD PTR [rbx+0x28],rdx
  423f18:	jmp    423dcc <flatcc_json_printer_int64_enum_field@@Base+0x8c>
  423f1d:	nop    DWORD PTR [rax]
  423f20:	cmp    BYTE PTR [rdi+0x34],0x0
  423f24:	je     423d8a <flatcc_json_printer_int64_enum_field@@Base+0x4a>
  423f2a:	jmp    423e62 <flatcc_json_printer_int64_enum_field@@Base+0x122>
  423f2f:	nop

0000000000423f30 <flatcc_json_printer_bool_enum_field@@Base>:
  423f30:	endbr64 
  423f34:	push   r15
  423f36:	lea    eax,[rdx+rdx*1+0x4]
  423f3a:	push   r14
  423f3c:	push   r13
  423f3e:	push   r12
  423f40:	push   rbp
  423f41:	push   rbx
  423f42:	sub    rsp,0x8
  423f46:	mov    r13,QWORD PTR [rsp+0x40]
  423f4b:	cmp    eax,DWORD PTR [rsi+0x10]
  423f4e:	jge    424050 <flatcc_json_printer_bool_enum_field@@Base+0x120>
  423f54:	mov    rdx,QWORD PTR [rsi+0x8]
  423f58:	movzx  eax,WORD PTR [rdx+rax*1]
  423f5c:	test   ax,ax
  423f5f:	je     424050 <flatcc_json_printer_bool_enum_field@@Base+0x120>
  423f65:	add    rax,QWORD PTR [rsi]
  423f68:	je     424050 <flatcc_json_printer_bool_enum_field@@Base+0x120>
  423f6e:	movzx  r12d,BYTE PTR [rax]
  423f72:	cmp    r9b,r12b
  423f75:	je     4240f0 <flatcc_json_printer_bool_enum_field@@Base+0x1c0>
  423f7b:	mov    eax,DWORD PTR [rsi+0x18]
  423f7e:	lea    edx,[rax+0x1]
  423f81:	mov    DWORD PTR [rsi+0x18],edx
  423f84:	mov    rdx,QWORD PTR [rdi+0x28]
  423f88:	test   eax,eax
  423f8a:	je     423f9b <flatcc_json_printer_bool_enum_field@@Base+0x6b>
  423f8c:	lea    rax,[rdx+0x1]
  423f90:	mov    QWORD PTR [rdi+0x28],rax
  423f94:	mov    BYTE PTR [rdx],0x2c
  423f97:	mov    rdx,QWORD PTR [rdi+0x28]
  423f9b:	cmp    BYTE PTR [rdi+0x31],0x0
  423f9f:	mov    r15,rcx
  423fa2:	mov    rbx,rdi
  423fa5:	movsxd rbp,r8d
  423fa8:	jne    424098 <flatcc_json_printer_bool_enum_field@@Base+0x168>
  423fae:	cmp    QWORD PTR [rdi+0x20],rdx
  423fb2:	ja     423fbd <flatcc_json_printer_bool_enum_field@@Base+0x8d>
  423fb4:	xor    esi,esi
  423fb6:	call   QWORD PTR [rdi+0x48]
  423fb9:	mov    rdx,QWORD PTR [rbx+0x28]
  423fbd:	mov    BYTE PTR [rdx],0x22
  423fc0:	xor    edi,edi
  423fc2:	mov    rdx,rbp
  423fc5:	cmp    BYTE PTR [rbx+0x32],0x0
  423fc9:	sete   dil
  423fcd:	add    rdi,QWORD PTR [rbx+0x28]
  423fd1:	lea    rax,[rdi+rbp*1]
  423fd5:	mov    QWORD PTR [rbx+0x28],rdi
  423fd9:	mov    rsi,r15
  423fdc:	cmp    QWORD PTR [rbx+0x20],rax
  423fe0:	jbe    424080 <flatcc_json_printer_bool_enum_field@@Base+0x150>
  423fe6:	call   406210 <memcpy@plt>
  423feb:	add    rbp,QWORD PTR [rbx+0x28]
  423fef:	mov    QWORD PTR [rbx+0x28],rbp
  423ff3:	mov    BYTE PTR [rbp+0x0],0x22
  423ff7:	xor    eax,eax
  423ff9:	cmp    BYTE PTR [rbx+0x32],0x0
  423ffd:	sete   al
  424000:	add    rax,QWORD PTR [rbx+0x28]
  424004:	lea    rdx,[rax+0x1]
  424008:	mov    QWORD PTR [rbx+0x28],rdx
  42400c:	mov    BYTE PTR [rax],0x3a
  42400f:	xor    esi,esi
  424011:	mov    rax,QWORD PTR [rbx+0x28]
  424015:	mov    BYTE PTR [rax],0x20
  424018:	cmp    BYTE PTR [rbx+0x31],0x0
  42401c:	setne  sil
  424020:	add    rsi,QWORD PTR [rbx+0x28]
  424024:	cmp    BYTE PTR [rbx+0x33],0x0
  424028:	mov    QWORD PTR [rbx+0x28],rsi
  42402c:	jne    424060 <flatcc_json_printer_bool_enum_field@@Base+0x130>
  42402e:	add    rsp,0x8
  424032:	mov    rdi,rbx
  424035:	pop    rbx
  424036:	pop    rbp
  424037:	movzx  esi,r12b
  42403b:	pop    r12
  42403d:	mov    rax,r13
  424040:	pop    r13
  424042:	pop    r14
  424044:	pop    r15
  424046:	jmp    rax
  424048:	nop    DWORD PTR [rax+rax*1+0x0]
  424050:	cmp    BYTE PTR [rdi+0x35],0x0
  424054:	je     42406f <flatcc_json_printer_bool_enum_field@@Base+0x13f>
  424056:	mov    r12d,r9d
  424059:	jmp    423f7b <flatcc_json_printer_bool_enum_field@@Base+0x4b>
  42405e:	xchg   ax,ax
  424060:	movzx  edi,r12b
  424064:	call   420590 <flatcc_json_parser_struct_as_root@@Base+0xd50>
  424069:	cdqe   
  42406b:	add    QWORD PTR [rbx+0x28],rax
  42406f:	add    rsp,0x8
  424073:	pop    rbx
  424074:	pop    rbp
  424075:	pop    r12
  424077:	pop    r13
  424079:	pop    r14
  42407b:	pop    r15
  42407d:	ret    
  42407e:	xchg   ax,ax
  424080:	mov    rdi,rbx
  424083:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  424088:	mov    rbp,QWORD PTR [rbx+0x28]
  42408c:	jmp    423ff3 <flatcc_json_printer_bool_enum_field@@Base+0xc3>
  424091:	nop    DWORD PTR [rax+0x0]
  424098:	lea    rax,[rdx+0x1]
  42409c:	mov    QWORD PTR [rdi+0x28],rax
  4240a0:	mov    BYTE PTR [rdx],0xa
  4240a3:	movzx  edx,BYTE PTR [rdi+0x31]
  4240a7:	imul   edx,DWORD PTR [rdi+0x38]
  4240ab:	mov    rdi,QWORD PTR [rdi+0x28]
  4240af:	movsxd r14,edx
  4240b2:	lea    rax,[rdi+r14*1]
  4240b6:	cmp    QWORD PTR [rbx+0x20],rax
  4240ba:	jae    4240d0 <flatcc_json_printer_bool_enum_field@@Base+0x1a0>
  4240bc:	mov    rsi,r14
  4240bf:	mov    rdi,rbx
  4240c2:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4240c7:	mov    rdx,QWORD PTR [rbx+0x28]
  4240cb:	jmp    423fbd <flatcc_json_printer_bool_enum_field@@Base+0x8d>
  4240d0:	mov    rdx,r14
  4240d3:	mov    esi,0x20
  4240d8:	call   4061c0 <memset@plt>
  4240dd:	mov    rdx,QWORD PTR [rbx+0x28]
  4240e1:	add    rdx,r14
  4240e4:	mov    QWORD PTR [rbx+0x28],rdx
  4240e8:	jmp    423fbd <flatcc_json_printer_bool_enum_field@@Base+0x8d>
  4240ed:	nop    DWORD PTR [rax]
  4240f0:	cmp    BYTE PTR [rdi+0x34],0x0
  4240f4:	je     423f7b <flatcc_json_printer_bool_enum_field@@Base+0x4b>
  4240fa:	jmp    42406f <flatcc_json_printer_bool_enum_field@@Base+0x13f>
  4240ff:	nop

0000000000424100 <flatcc_json_printer_uint8_struct_field@@Base>:
  424100:	endbr64 
  424104:	push   r14
  424106:	mov    r14,r8
  424109:	push   r13
  42410b:	push   r12
  42410d:	push   rbp
  42410e:	push   rbx
  42410f:	mov    rbx,rdi
  424112:	movzx  r12d,BYTE PTR [rdx+rcx*1]
  424117:	mov    rax,QWORD PTR [rdi+0x28]
  42411b:	test   esi,esi
  42411d:	je     42412e <flatcc_json_printer_uint8_struct_field@@Base+0x2e>
  42411f:	lea    rdx,[rax+0x1]
  424123:	mov    QWORD PTR [rdi+0x28],rdx
  424127:	mov    BYTE PTR [rax],0x2c
  42412a:	mov    rax,QWORD PTR [rdi+0x28]
  42412e:	cmp    BYTE PTR [rbx+0x31],0x0
  424132:	movsxd r13,r9d
  424135:	jne    4241e0 <flatcc_json_printer_uint8_struct_field@@Base+0xe0>
  42413b:	cmp    QWORD PTR [rbx+0x20],rax
  42413f:	ja     42414d <flatcc_json_printer_uint8_struct_field@@Base+0x4d>
  424141:	xor    esi,esi
  424143:	mov    rdi,rbx
  424146:	call   QWORD PTR [rbx+0x48]
  424149:	mov    rax,QWORD PTR [rbx+0x28]
  42414d:	mov    BYTE PTR [rax],0x22
  424150:	xor    edi,edi
  424152:	mov    rdx,r13
  424155:	cmp    BYTE PTR [rbx+0x32],0x0
  424159:	sete   dil
  42415d:	add    rdi,QWORD PTR [rbx+0x28]
  424161:	lea    rax,[rdi+r13*1]
  424165:	mov    QWORD PTR [rbx+0x28],rdi
  424169:	mov    rsi,r14
  42416c:	cmp    QWORD PTR [rbx+0x20],rax
  424170:	ja     4241d0 <flatcc_json_printer_uint8_struct_field@@Base+0xd0>
  424172:	mov    rdi,rbx
  424175:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42417a:	mov    r13,QWORD PTR [rbx+0x28]
  42417e:	mov    BYTE PTR [r13+0x0],0x22
  424183:	xor    eax,eax
  424185:	movzx  edi,r12b
  424189:	cmp    BYTE PTR [rbx+0x32],0x0
  42418d:	sete   al
  424190:	add    rax,QWORD PTR [rbx+0x28]
  424194:	lea    rdx,[rax+0x1]
  424198:	mov    QWORD PTR [rbx+0x28],rdx
  42419c:	mov    BYTE PTR [rax],0x3a
  42419f:	xor    esi,esi
  4241a1:	mov    rax,QWORD PTR [rbx+0x28]
  4241a5:	mov    BYTE PTR [rax],0x20
  4241a8:	cmp    BYTE PTR [rbx+0x31],0x0
  4241ac:	setne  sil
  4241b0:	add    rsi,QWORD PTR [rbx+0x28]
  4241b4:	mov    QWORD PTR [rbx+0x28],rsi
  4241b8:	call   4205c0 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  4241bd:	cdqe   
  4241bf:	add    QWORD PTR [rbx+0x28],rax
  4241c3:	pop    rbx
  4241c4:	pop    rbp
  4241c5:	pop    r12
  4241c7:	pop    r13
  4241c9:	pop    r14
  4241cb:	ret    
  4241cc:	nop    DWORD PTR [rax+0x0]
  4241d0:	call   406210 <memcpy@plt>
  4241d5:	add    r13,QWORD PTR [rbx+0x28]
  4241d9:	mov    QWORD PTR [rbx+0x28],r13
  4241dd:	jmp    42417e <flatcc_json_printer_uint8_struct_field@@Base+0x7e>
  4241df:	nop
  4241e0:	lea    rdx,[rax+0x1]
  4241e4:	mov    QWORD PTR [rbx+0x28],rdx
  4241e8:	mov    BYTE PTR [rax],0xa
  4241eb:	movzx  eax,BYTE PTR [rbx+0x31]
  4241ef:	mov    rdi,QWORD PTR [rbx+0x28]
  4241f3:	imul   eax,DWORD PTR [rbx+0x38]
  4241f7:	movsxd rbp,eax
  4241fa:	lea    rax,[rdi+rbp*1]
  4241fe:	cmp    QWORD PTR [rbx+0x20],rax
  424202:	jae    424220 <flatcc_json_printer_uint8_struct_field@@Base+0x120>
  424204:	mov    rsi,rbp
  424207:	mov    rdi,rbx
  42420a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42420f:	mov    rax,QWORD PTR [rbx+0x28]
  424213:	jmp    42414d <flatcc_json_printer_uint8_struct_field@@Base+0x4d>
  424218:	nop    DWORD PTR [rax+rax*1+0x0]
  424220:	mov    rdx,rbp
  424223:	mov    esi,0x20
  424228:	call   4061c0 <memset@plt>
  42422d:	mov    rax,QWORD PTR [rbx+0x28]
  424231:	add    rax,rbp
  424234:	mov    QWORD PTR [rbx+0x28],rax
  424238:	jmp    42414d <flatcc_json_printer_uint8_struct_field@@Base+0x4d>
  42423d:	nop    DWORD PTR [rax]

0000000000424240 <flatcc_json_printer_uint16_struct_field@@Base>:
  424240:	endbr64 
  424244:	push   r14
  424246:	mov    r14,r8
  424249:	push   r13
  42424b:	push   r12
  42424d:	push   rbp
  42424e:	push   rbx
  42424f:	mov    rbx,rdi
  424252:	movzx  r12d,WORD PTR [rdx+rcx*1]
  424257:	mov    rax,QWORD PTR [rdi+0x28]
  42425b:	test   esi,esi
  42425d:	je     42426e <flatcc_json_printer_uint16_struct_field@@Base+0x2e>
  42425f:	lea    rdx,[rax+0x1]
  424263:	mov    QWORD PTR [rdi+0x28],rdx
  424267:	mov    BYTE PTR [rax],0x2c
  42426a:	mov    rax,QWORD PTR [rdi+0x28]
  42426e:	cmp    BYTE PTR [rbx+0x31],0x0
  424272:	movsxd r13,r9d
  424275:	jne    424320 <flatcc_json_printer_uint16_struct_field@@Base+0xe0>
  42427b:	cmp    QWORD PTR [rbx+0x20],rax
  42427f:	ja     42428d <flatcc_json_printer_uint16_struct_field@@Base+0x4d>
  424281:	xor    esi,esi
  424283:	mov    rdi,rbx
  424286:	call   QWORD PTR [rbx+0x48]
  424289:	mov    rax,QWORD PTR [rbx+0x28]
  42428d:	mov    BYTE PTR [rax],0x22
  424290:	xor    edi,edi
  424292:	mov    rdx,r13
  424295:	cmp    BYTE PTR [rbx+0x32],0x0
  424299:	sete   dil
  42429d:	add    rdi,QWORD PTR [rbx+0x28]
  4242a1:	lea    rax,[rdi+r13*1]
  4242a5:	mov    QWORD PTR [rbx+0x28],rdi
  4242a9:	mov    rsi,r14
  4242ac:	cmp    QWORD PTR [rbx+0x20],rax
  4242b0:	ja     424310 <flatcc_json_printer_uint16_struct_field@@Base+0xd0>
  4242b2:	mov    rdi,rbx
  4242b5:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4242ba:	mov    r13,QWORD PTR [rbx+0x28]
  4242be:	mov    BYTE PTR [r13+0x0],0x22
  4242c3:	xor    eax,eax
  4242c5:	movzx  edi,r12w
  4242c9:	cmp    BYTE PTR [rbx+0x32],0x0
  4242cd:	sete   al
  4242d0:	add    rax,QWORD PTR [rbx+0x28]
  4242d4:	lea    rdx,[rax+0x1]
  4242d8:	mov    QWORD PTR [rbx+0x28],rdx
  4242dc:	mov    BYTE PTR [rax],0x3a
  4242df:	xor    esi,esi
  4242e1:	mov    rax,QWORD PTR [rbx+0x28]
  4242e5:	mov    BYTE PTR [rax],0x20
  4242e8:	cmp    BYTE PTR [rbx+0x31],0x0
  4242ec:	setne  sil
  4242f0:	add    rsi,QWORD PTR [rbx+0x28]
  4242f4:	mov    QWORD PTR [rbx+0x28],rsi
  4242f8:	call   41f850 <flatcc_json_parser_struct_as_root@@Base+0x10>
  4242fd:	cdqe   
  4242ff:	add    QWORD PTR [rbx+0x28],rax
  424303:	pop    rbx
  424304:	pop    rbp
  424305:	pop    r12
  424307:	pop    r13
  424309:	pop    r14
  42430b:	ret    
  42430c:	nop    DWORD PTR [rax+0x0]
  424310:	call   406210 <memcpy@plt>
  424315:	add    r13,QWORD PTR [rbx+0x28]
  424319:	mov    QWORD PTR [rbx+0x28],r13
  42431d:	jmp    4242be <flatcc_json_printer_uint16_struct_field@@Base+0x7e>
  42431f:	nop
  424320:	lea    rdx,[rax+0x1]
  424324:	mov    QWORD PTR [rbx+0x28],rdx
  424328:	mov    BYTE PTR [rax],0xa
  42432b:	movzx  eax,BYTE PTR [rbx+0x31]
  42432f:	mov    rdi,QWORD PTR [rbx+0x28]
  424333:	imul   eax,DWORD PTR [rbx+0x38]
  424337:	movsxd rbp,eax
  42433a:	lea    rax,[rdi+rbp*1]
  42433e:	cmp    QWORD PTR [rbx+0x20],rax
  424342:	jae    424360 <flatcc_json_printer_uint16_struct_field@@Base+0x120>
  424344:	mov    rsi,rbp
  424347:	mov    rdi,rbx
  42434a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42434f:	mov    rax,QWORD PTR [rbx+0x28]
  424353:	jmp    42428d <flatcc_json_printer_uint16_struct_field@@Base+0x4d>
  424358:	nop    DWORD PTR [rax+rax*1+0x0]
  424360:	mov    rdx,rbp
  424363:	mov    esi,0x20
  424368:	call   4061c0 <memset@plt>
  42436d:	mov    rax,QWORD PTR [rbx+0x28]
  424371:	add    rax,rbp
  424374:	mov    QWORD PTR [rbx+0x28],rax
  424378:	jmp    42428d <flatcc_json_printer_uint16_struct_field@@Base+0x4d>
  42437d:	nop    DWORD PTR [rax]

0000000000424380 <flatcc_json_printer_uint32_struct_field@@Base>:
  424380:	endbr64 
  424384:	push   r14
  424386:	mov    r14,r8
  424389:	push   r13
  42438b:	push   r12
  42438d:	push   rbp
  42438e:	push   rbx
  42438f:	mov    rbx,rdi
  424392:	mov    r12d,DWORD PTR [rdx+rcx*1]
  424396:	mov    rax,QWORD PTR [rdi+0x28]
  42439a:	test   esi,esi
  42439c:	je     4243ad <flatcc_json_printer_uint32_struct_field@@Base+0x2d>
  42439e:	lea    rdx,[rax+0x1]
  4243a2:	mov    QWORD PTR [rdi+0x28],rdx
  4243a6:	mov    BYTE PTR [rax],0x2c
  4243a9:	mov    rax,QWORD PTR [rdi+0x28]
  4243ad:	cmp    BYTE PTR [rbx+0x31],0x0
  4243b1:	movsxd r13,r9d
  4243b4:	jne    424460 <flatcc_json_printer_uint32_struct_field@@Base+0xe0>
  4243ba:	cmp    QWORD PTR [rbx+0x20],rax
  4243be:	ja     4243cc <flatcc_json_printer_uint32_struct_field@@Base+0x4c>
  4243c0:	xor    esi,esi
  4243c2:	mov    rdi,rbx
  4243c5:	call   QWORD PTR [rbx+0x48]
  4243c8:	mov    rax,QWORD PTR [rbx+0x28]
  4243cc:	mov    BYTE PTR [rax],0x22
  4243cf:	xor    edi,edi
  4243d1:	mov    rdx,r13
  4243d4:	cmp    BYTE PTR [rbx+0x32],0x0
  4243d8:	sete   dil
  4243dc:	add    rdi,QWORD PTR [rbx+0x28]
  4243e0:	lea    rax,[rdi+r13*1]
  4243e4:	mov    QWORD PTR [rbx+0x28],rdi
  4243e8:	mov    rsi,r14
  4243eb:	cmp    QWORD PTR [rbx+0x20],rax
  4243ef:	ja     424450 <flatcc_json_printer_uint32_struct_field@@Base+0xd0>
  4243f1:	mov    rdi,rbx
  4243f4:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4243f9:	mov    r13,QWORD PTR [rbx+0x28]
  4243fd:	mov    BYTE PTR [r13+0x0],0x22
  424402:	xor    eax,eax
  424404:	mov    edi,r12d
  424407:	cmp    BYTE PTR [rbx+0x32],0x0
  42440b:	sete   al
  42440e:	add    rax,QWORD PTR [rbx+0x28]
  424412:	lea    rdx,[rax+0x1]
  424416:	mov    QWORD PTR [rbx+0x28],rdx
  42441a:	mov    BYTE PTR [rax],0x3a
  42441d:	xor    esi,esi
  42441f:	mov    rax,QWORD PTR [rbx+0x28]
  424423:	mov    BYTE PTR [rax],0x20
  424426:	cmp    BYTE PTR [rbx+0x31],0x0
  42442a:	setne  sil
  42442e:	add    rsi,QWORD PTR [rbx+0x28]
  424432:	mov    QWORD PTR [rbx+0x28],rsi
  424436:	call   41f980 <flatcc_json_parser_struct_as_root@@Base+0x140>
  42443b:	cdqe   
  42443d:	add    QWORD PTR [rbx+0x28],rax
  424441:	pop    rbx
  424442:	pop    rbp
  424443:	pop    r12
  424445:	pop    r13
  424447:	pop    r14
  424449:	ret    
  42444a:	nop    WORD PTR [rax+rax*1+0x0]
  424450:	call   406210 <memcpy@plt>
  424455:	add    r13,QWORD PTR [rbx+0x28]
  424459:	mov    QWORD PTR [rbx+0x28],r13
  42445d:	jmp    4243fd <flatcc_json_printer_uint32_struct_field@@Base+0x7d>
  42445f:	nop
  424460:	lea    rdx,[rax+0x1]
  424464:	mov    QWORD PTR [rbx+0x28],rdx
  424468:	mov    BYTE PTR [rax],0xa
  42446b:	movzx  eax,BYTE PTR [rbx+0x31]
  42446f:	mov    rdi,QWORD PTR [rbx+0x28]
  424473:	imul   eax,DWORD PTR [rbx+0x38]
  424477:	movsxd rbp,eax
  42447a:	lea    rax,[rdi+rbp*1]
  42447e:	cmp    QWORD PTR [rbx+0x20],rax
  424482:	jae    4244a0 <flatcc_json_printer_uint32_struct_field@@Base+0x120>
  424484:	mov    rsi,rbp
  424487:	mov    rdi,rbx
  42448a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42448f:	mov    rax,QWORD PTR [rbx+0x28]
  424493:	jmp    4243cc <flatcc_json_printer_uint32_struct_field@@Base+0x4c>
  424498:	nop    DWORD PTR [rax+rax*1+0x0]
  4244a0:	mov    rdx,rbp
  4244a3:	mov    esi,0x20
  4244a8:	call   4061c0 <memset@plt>
  4244ad:	mov    rax,QWORD PTR [rbx+0x28]
  4244b1:	add    rax,rbp
  4244b4:	mov    QWORD PTR [rbx+0x28],rax
  4244b8:	jmp    4243cc <flatcc_json_printer_uint32_struct_field@@Base+0x4c>
  4244bd:	nop    DWORD PTR [rax]

00000000004244c0 <flatcc_json_printer_uint64_struct_field@@Base>:
  4244c0:	endbr64 
  4244c4:	push   r14
  4244c6:	mov    r14,r8
  4244c9:	push   r13
  4244cb:	push   r12
  4244cd:	push   rbp
  4244ce:	push   rbx
  4244cf:	mov    rbx,rdi
  4244d2:	mov    r12,QWORD PTR [rdx+rcx*1]
  4244d6:	mov    rax,QWORD PTR [rdi+0x28]
  4244da:	test   esi,esi
  4244dc:	je     4244ed <flatcc_json_printer_uint64_struct_field@@Base+0x2d>
  4244de:	lea    rdx,[rax+0x1]
  4244e2:	mov    QWORD PTR [rdi+0x28],rdx
  4244e6:	mov    BYTE PTR [rax],0x2c
  4244e9:	mov    rax,QWORD PTR [rdi+0x28]
  4244ed:	cmp    BYTE PTR [rbx+0x31],0x0
  4244f1:	movsxd r13,r9d
  4244f4:	jne    4245a0 <flatcc_json_printer_uint64_struct_field@@Base+0xe0>
  4244fa:	cmp    QWORD PTR [rbx+0x20],rax
  4244fe:	ja     42450c <flatcc_json_printer_uint64_struct_field@@Base+0x4c>
  424500:	xor    esi,esi
  424502:	mov    rdi,rbx
  424505:	call   QWORD PTR [rbx+0x48]
  424508:	mov    rax,QWORD PTR [rbx+0x28]
  42450c:	mov    BYTE PTR [rax],0x22
  42450f:	xor    edi,edi
  424511:	mov    rdx,r13
  424514:	cmp    BYTE PTR [rbx+0x32],0x0
  424518:	sete   dil
  42451c:	add    rdi,QWORD PTR [rbx+0x28]
  424520:	lea    rax,[rdi+r13*1]
  424524:	mov    QWORD PTR [rbx+0x28],rdi
  424528:	mov    rsi,r14
  42452b:	cmp    QWORD PTR [rbx+0x20],rax
  42452f:	ja     424590 <flatcc_json_printer_uint64_struct_field@@Base+0xd0>
  424531:	mov    rdi,rbx
  424534:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  424539:	mov    r13,QWORD PTR [rbx+0x28]
  42453d:	mov    BYTE PTR [r13+0x0],0x22
  424542:	xor    eax,eax
  424544:	mov    rdi,r12
  424547:	cmp    BYTE PTR [rbx+0x32],0x0
  42454b:	sete   al
  42454e:	add    rax,QWORD PTR [rbx+0x28]
  424552:	lea    rdx,[rax+0x1]
  424556:	mov    QWORD PTR [rbx+0x28],rdx
  42455a:	mov    BYTE PTR [rax],0x3a
  42455d:	xor    esi,esi
  42455f:	mov    rax,QWORD PTR [rbx+0x28]
  424563:	mov    BYTE PTR [rax],0x20
  424566:	cmp    BYTE PTR [rbx+0x31],0x0
  42456a:	setne  sil
  42456e:	add    rsi,QWORD PTR [rbx+0x28]
  424572:	mov    QWORD PTR [rbx+0x28],rsi
  424576:	call   41fc30 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  42457b:	cdqe   
  42457d:	add    QWORD PTR [rbx+0x28],rax
  424581:	pop    rbx
  424582:	pop    rbp
  424583:	pop    r12
  424585:	pop    r13
  424587:	pop    r14
  424589:	ret    
  42458a:	nop    WORD PTR [rax+rax*1+0x0]
  424590:	call   406210 <memcpy@plt>
  424595:	add    r13,QWORD PTR [rbx+0x28]
  424599:	mov    QWORD PTR [rbx+0x28],r13
  42459d:	jmp    42453d <flatcc_json_printer_uint64_struct_field@@Base+0x7d>
  42459f:	nop
  4245a0:	lea    rdx,[rax+0x1]
  4245a4:	mov    QWORD PTR [rbx+0x28],rdx
  4245a8:	mov    BYTE PTR [rax],0xa
  4245ab:	movzx  eax,BYTE PTR [rbx+0x31]
  4245af:	mov    rdi,QWORD PTR [rbx+0x28]
  4245b3:	imul   eax,DWORD PTR [rbx+0x38]
  4245b7:	movsxd rbp,eax
  4245ba:	lea    rax,[rdi+rbp*1]
  4245be:	cmp    QWORD PTR [rbx+0x20],rax
  4245c2:	jae    4245e0 <flatcc_json_printer_uint64_struct_field@@Base+0x120>
  4245c4:	mov    rsi,rbp
  4245c7:	mov    rdi,rbx
  4245ca:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4245cf:	mov    rax,QWORD PTR [rbx+0x28]
  4245d3:	jmp    42450c <flatcc_json_printer_uint64_struct_field@@Base+0x4c>
  4245d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4245e0:	mov    rdx,rbp
  4245e3:	mov    esi,0x20
  4245e8:	call   4061c0 <memset@plt>
  4245ed:	mov    rax,QWORD PTR [rbx+0x28]
  4245f1:	add    rax,rbp
  4245f4:	mov    QWORD PTR [rbx+0x28],rax
  4245f8:	jmp    42450c <flatcc_json_printer_uint64_struct_field@@Base+0x4c>
  4245fd:	nop    DWORD PTR [rax]

0000000000424600 <flatcc_json_printer_int8_struct_field@@Base>:
  424600:	endbr64 
  424604:	push   r14
  424606:	mov    r14,r8
  424609:	push   r13
  42460b:	push   r12
  42460d:	push   rbp
  42460e:	push   rbx
  42460f:	mov    rbx,rdi
  424612:	movzx  r12d,BYTE PTR [rdx+rcx*1]
  424617:	mov    rax,QWORD PTR [rdi+0x28]
  42461b:	test   esi,esi
  42461d:	je     42462e <flatcc_json_printer_int8_struct_field@@Base+0x2e>
  42461f:	lea    rdx,[rax+0x1]
  424623:	mov    QWORD PTR [rdi+0x28],rdx
  424627:	mov    BYTE PTR [rax],0x2c
  42462a:	mov    rax,QWORD PTR [rdi+0x28]
  42462e:	cmp    BYTE PTR [rbx+0x31],0x0
  424632:	movsxd r13,r9d
  424635:	jne    424708 <flatcc_json_printer_int8_struct_field@@Base+0x108>
  42463b:	cmp    QWORD PTR [rbx+0x20],rax
  42463f:	ja     42464d <flatcc_json_printer_int8_struct_field@@Base+0x4d>
  424641:	xor    esi,esi
  424643:	mov    rdi,rbx
  424646:	call   QWORD PTR [rbx+0x48]
  424649:	mov    rax,QWORD PTR [rbx+0x28]
  42464d:	mov    BYTE PTR [rax],0x22
  424650:	xor    edi,edi
  424652:	mov    rdx,r13
  424655:	cmp    BYTE PTR [rbx+0x32],0x0
  424659:	sete   dil
  42465d:	add    rdi,QWORD PTR [rbx+0x28]
  424661:	lea    rax,[rdi+r13*1]
  424665:	mov    QWORD PTR [rbx+0x28],rdi
  424669:	mov    rsi,r14
  42466c:	cmp    QWORD PTR [rbx+0x20],rax
  424670:	ja     4246f0 <flatcc_json_printer_int8_struct_field@@Base+0xf0>
  424672:	mov    rdi,rbx
  424675:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42467a:	mov    r13,QWORD PTR [rbx+0x28]
  42467e:	mov    BYTE PTR [r13+0x0],0x22
  424683:	xor    eax,eax
  424685:	movsx  r8d,r12b
  424689:	cmp    BYTE PTR [rbx+0x32],0x0
  42468d:	sete   al
  424690:	add    rax,QWORD PTR [rbx+0x28]
  424694:	lea    rdx,[rax+0x1]
  424698:	mov    QWORD PTR [rbx+0x28],rdx
  42469c:	mov    BYTE PTR [rax],0x3a
  42469f:	xor    esi,esi
  4246a1:	mov    rax,QWORD PTR [rbx+0x28]
  4246a5:	mov    BYTE PTR [rax],0x20
  4246a8:	cmp    BYTE PTR [rbx+0x31],0x0
  4246ac:	setne  sil
  4246b0:	add    rsi,QWORD PTR [rbx+0x28]
  4246b4:	mov    QWORD PTR [rbx+0x28],rsi
  4246b8:	shr    r8d,0x1f
  4246bc:	test   r12b,r12b
  4246bf:	jns    4246ca <flatcc_json_printer_int8_struct_field@@Base+0xca>
  4246c1:	mov    BYTE PTR [rsi],0x2d
  4246c4:	neg    r12d
  4246c7:	inc    rsi
  4246ca:	movzx  edi,r12b
  4246ce:	call   4205c0 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  4246d3:	add    r8d,eax
  4246d6:	movsxd r8,r8d
  4246d9:	add    QWORD PTR [rbx+0x28],r8
  4246dd:	pop    rbx
  4246de:	pop    rbp
  4246df:	pop    r12
  4246e1:	pop    r13
  4246e3:	pop    r14
  4246e5:	ret    
  4246e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4246f0:	call   406210 <memcpy@plt>
  4246f5:	add    r13,QWORD PTR [rbx+0x28]
  4246f9:	mov    QWORD PTR [rbx+0x28],r13
  4246fd:	jmp    42467e <flatcc_json_printer_int8_struct_field@@Base+0x7e>
  424702:	nop    WORD PTR [rax+rax*1+0x0]
  424708:	lea    rdx,[rax+0x1]
  42470c:	mov    QWORD PTR [rbx+0x28],rdx
  424710:	mov    BYTE PTR [rax],0xa
  424713:	movzx  eax,BYTE PTR [rbx+0x31]
  424717:	mov    rdi,QWORD PTR [rbx+0x28]
  42471b:	imul   eax,DWORD PTR [rbx+0x38]
  42471f:	movsxd rbp,eax
  424722:	lea    rax,[rdi+rbp*1]
  424726:	cmp    QWORD PTR [rbx+0x20],rax
  42472a:	jae    424740 <flatcc_json_printer_int8_struct_field@@Base+0x140>
  42472c:	mov    rsi,rbp
  42472f:	mov    rdi,rbx
  424732:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  424737:	mov    rax,QWORD PTR [rbx+0x28]
  42473b:	jmp    42464d <flatcc_json_printer_int8_struct_field@@Base+0x4d>
  424740:	mov    rdx,rbp
  424743:	mov    esi,0x20
  424748:	call   4061c0 <memset@plt>
  42474d:	mov    rax,QWORD PTR [rbx+0x28]
  424751:	add    rax,rbp
  424754:	mov    QWORD PTR [rbx+0x28],rax
  424758:	jmp    42464d <flatcc_json_printer_int8_struct_field@@Base+0x4d>
  42475d:	nop    DWORD PTR [rax]

0000000000424760 <flatcc_json_printer_int16_struct_field@@Base>:
  424760:	endbr64 
  424764:	push   r14
  424766:	mov    r14,r8
  424769:	push   r13
  42476b:	push   r12
  42476d:	push   rbp
  42476e:	push   rbx
  42476f:	mov    rbx,rdi
  424772:	movzx  r12d,WORD PTR [rdx+rcx*1]
  424777:	mov    rax,QWORD PTR [rdi+0x28]
  42477b:	test   esi,esi
  42477d:	je     42478e <flatcc_json_printer_int16_struct_field@@Base+0x2e>
  42477f:	lea    rdx,[rax+0x1]
  424783:	mov    QWORD PTR [rdi+0x28],rdx
  424787:	mov    BYTE PTR [rax],0x2c
  42478a:	mov    rax,QWORD PTR [rdi+0x28]
  42478e:	cmp    BYTE PTR [rbx+0x31],0x0
  424792:	movsxd r13,r9d
  424795:	jne    424868 <flatcc_json_printer_int16_struct_field@@Base+0x108>
  42479b:	cmp    QWORD PTR [rbx+0x20],rax
  42479f:	ja     4247ad <flatcc_json_printer_int16_struct_field@@Base+0x4d>
  4247a1:	xor    esi,esi
  4247a3:	mov    rdi,rbx
  4247a6:	call   QWORD PTR [rbx+0x48]
  4247a9:	mov    rax,QWORD PTR [rbx+0x28]
  4247ad:	mov    BYTE PTR [rax],0x22
  4247b0:	xor    edi,edi
  4247b2:	mov    rdx,r13
  4247b5:	cmp    BYTE PTR [rbx+0x32],0x0
  4247b9:	sete   dil
  4247bd:	add    rdi,QWORD PTR [rbx+0x28]
  4247c1:	lea    rax,[rdi+r13*1]
  4247c5:	mov    QWORD PTR [rbx+0x28],rdi
  4247c9:	mov    rsi,r14
  4247cc:	cmp    QWORD PTR [rbx+0x20],rax
  4247d0:	ja     424850 <flatcc_json_printer_int16_struct_field@@Base+0xf0>
  4247d2:	mov    rdi,rbx
  4247d5:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4247da:	mov    r13,QWORD PTR [rbx+0x28]
  4247de:	mov    BYTE PTR [r13+0x0],0x22
  4247e3:	xor    eax,eax
  4247e5:	movsx  r11d,r12w
  4247e9:	cmp    BYTE PTR [rbx+0x32],0x0
  4247ed:	sete   al
  4247f0:	add    rax,QWORD PTR [rbx+0x28]
  4247f4:	lea    rdx,[rax+0x1]
  4247f8:	mov    QWORD PTR [rbx+0x28],rdx
  4247fc:	mov    BYTE PTR [rax],0x3a
  4247ff:	xor    esi,esi
  424801:	mov    rax,QWORD PTR [rbx+0x28]
  424805:	mov    BYTE PTR [rax],0x20
  424808:	cmp    BYTE PTR [rbx+0x31],0x0
  42480c:	setne  sil
  424810:	add    rsi,QWORD PTR [rbx+0x28]
  424814:	mov    QWORD PTR [rbx+0x28],rsi
  424818:	shr    r11d,0x1f
  42481c:	test   r12w,r12w
  424820:	jns    42482b <flatcc_json_printer_int16_struct_field@@Base+0xcb>
  424822:	mov    BYTE PTR [rsi],0x2d
  424825:	neg    r12d
  424828:	inc    rsi
  42482b:	movzx  edi,r12w
  42482f:	call   41f850 <flatcc_json_parser_struct_as_root@@Base+0x10>
  424834:	add    r11d,eax
  424837:	movsxd r11,r11d
  42483a:	add    QWORD PTR [rbx+0x28],r11
  42483e:	pop    rbx
  42483f:	pop    rbp
  424840:	pop    r12
  424842:	pop    r13
  424844:	pop    r14
  424846:	ret    
  424847:	nop    WORD PTR [rax+rax*1+0x0]
  424850:	call   406210 <memcpy@plt>
  424855:	add    r13,QWORD PTR [rbx+0x28]
  424859:	mov    QWORD PTR [rbx+0x28],r13
  42485d:	jmp    4247de <flatcc_json_printer_int16_struct_field@@Base+0x7e>
  424862:	nop    WORD PTR [rax+rax*1+0x0]
  424868:	lea    rdx,[rax+0x1]
  42486c:	mov    QWORD PTR [rbx+0x28],rdx
  424870:	mov    BYTE PTR [rax],0xa
  424873:	movzx  eax,BYTE PTR [rbx+0x31]
  424877:	mov    rdi,QWORD PTR [rbx+0x28]
  42487b:	imul   eax,DWORD PTR [rbx+0x38]
  42487f:	movsxd rbp,eax
  424882:	lea    rax,[rdi+rbp*1]
  424886:	cmp    QWORD PTR [rbx+0x20],rax
  42488a:	jae    4248a0 <flatcc_json_printer_int16_struct_field@@Base+0x140>
  42488c:	mov    rsi,rbp
  42488f:	mov    rdi,rbx
  424892:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  424897:	mov    rax,QWORD PTR [rbx+0x28]
  42489b:	jmp    4247ad <flatcc_json_printer_int16_struct_field@@Base+0x4d>
  4248a0:	mov    rdx,rbp
  4248a3:	mov    esi,0x20
  4248a8:	call   4061c0 <memset@plt>
  4248ad:	mov    rax,QWORD PTR [rbx+0x28]
  4248b1:	add    rax,rbp
  4248b4:	mov    QWORD PTR [rbx+0x28],rax
  4248b8:	jmp    4247ad <flatcc_json_printer_int16_struct_field@@Base+0x4d>
  4248bd:	nop    DWORD PTR [rax]

00000000004248c0 <flatcc_json_printer_int32_struct_field@@Base>:
  4248c0:	endbr64 
  4248c4:	push   r14
  4248c6:	mov    r14,r8
  4248c9:	push   r13
  4248cb:	push   r12
  4248cd:	push   rbp
  4248ce:	push   rbx
  4248cf:	mov    rbx,rdi
  4248d2:	mov    r13d,DWORD PTR [rdx+rcx*1]
  4248d6:	mov    rax,QWORD PTR [rdi+0x28]
  4248da:	test   esi,esi
  4248dc:	je     4248ed <flatcc_json_printer_int32_struct_field@@Base+0x2d>
  4248de:	lea    rdx,[rax+0x1]
  4248e2:	mov    QWORD PTR [rdi+0x28],rdx
  4248e6:	mov    BYTE PTR [rax],0x2c
  4248e9:	mov    rax,QWORD PTR [rdi+0x28]
  4248ed:	cmp    BYTE PTR [rbx+0x31],0x0
  4248f1:	movsxd r12,r9d
  4248f4:	jne    4249c0 <flatcc_json_printer_int32_struct_field@@Base+0x100>
  4248fa:	cmp    QWORD PTR [rbx+0x20],rax
  4248fe:	ja     42490c <flatcc_json_printer_int32_struct_field@@Base+0x4c>
  424900:	xor    esi,esi
  424902:	mov    rdi,rbx
  424905:	call   QWORD PTR [rbx+0x48]
  424908:	mov    rax,QWORD PTR [rbx+0x28]
  42490c:	mov    BYTE PTR [rax],0x22
  42490f:	xor    edi,edi
  424911:	mov    rdx,r12
  424914:	cmp    BYTE PTR [rbx+0x32],0x0
  424918:	sete   dil
  42491c:	add    rdi,QWORD PTR [rbx+0x28]
  424920:	lea    rax,[rdi+r12*1]
  424924:	mov    QWORD PTR [rbx+0x28],rdi
  424928:	mov    rsi,r14
  42492b:	cmp    QWORD PTR [rbx+0x20],rax
  42492f:	ja     4249a8 <flatcc_json_printer_int32_struct_field@@Base+0xe8>
  424931:	mov    rdi,rbx
  424934:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  424939:	mov    r12,QWORD PTR [rbx+0x28]
  42493d:	mov    BYTE PTR [r12],0x22
  424942:	xor    eax,eax
  424944:	mov    ebp,r13d
  424947:	cmp    BYTE PTR [rbx+0x32],0x0
  42494b:	sete   al
  42494e:	add    rax,QWORD PTR [rbx+0x28]
  424952:	lea    rdx,[rax+0x1]
  424956:	mov    QWORD PTR [rbx+0x28],rdx
  42495a:	mov    BYTE PTR [rax],0x3a
  42495d:	xor    esi,esi
  42495f:	mov    rax,QWORD PTR [rbx+0x28]
  424963:	mov    BYTE PTR [rax],0x20
  424966:	cmp    BYTE PTR [rbx+0x31],0x0
  42496a:	setne  sil
  42496e:	add    rsi,QWORD PTR [rbx+0x28]
  424972:	mov    QWORD PTR [rbx+0x28],rsi
  424976:	shr    ebp,0x1f
  424979:	test   r13d,r13d
  42497c:	jns    424987 <flatcc_json_printer_int32_struct_field@@Base+0xc7>
  42497e:	mov    BYTE PTR [rsi],0x2d
  424981:	neg    r13d
  424984:	inc    rsi
  424987:	mov    edi,r13d
  42498a:	call   41f980 <flatcc_json_parser_struct_as_root@@Base+0x140>
  42498f:	add    ebp,eax
  424991:	movsxd rbp,ebp
  424994:	add    QWORD PTR [rbx+0x28],rbp
  424998:	pop    rbx
  424999:	pop    rbp
  42499a:	pop    r12
  42499c:	pop    r13
  42499e:	pop    r14
  4249a0:	ret    
  4249a1:	nop    DWORD PTR [rax+0x0]
  4249a8:	call   406210 <memcpy@plt>
  4249ad:	add    r12,QWORD PTR [rbx+0x28]
  4249b1:	mov    QWORD PTR [rbx+0x28],r12
  4249b5:	jmp    42493d <flatcc_json_printer_int32_struct_field@@Base+0x7d>
  4249b7:	nop    WORD PTR [rax+rax*1+0x0]
  4249c0:	lea    rdx,[rax+0x1]
  4249c4:	mov    QWORD PTR [rbx+0x28],rdx
  4249c8:	mov    BYTE PTR [rax],0xa
  4249cb:	movzx  eax,BYTE PTR [rbx+0x31]
  4249cf:	mov    rdi,QWORD PTR [rbx+0x28]
  4249d3:	imul   eax,DWORD PTR [rbx+0x38]
  4249d7:	movsxd rbp,eax
  4249da:	lea    rax,[rdi+rbp*1]
  4249de:	cmp    QWORD PTR [rbx+0x20],rax
  4249e2:	jae    424a00 <flatcc_json_printer_int32_struct_field@@Base+0x140>
  4249e4:	mov    rsi,rbp
  4249e7:	mov    rdi,rbx
  4249ea:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4249ef:	mov    rax,QWORD PTR [rbx+0x28]
  4249f3:	jmp    42490c <flatcc_json_printer_int32_struct_field@@Base+0x4c>
  4249f8:	nop    DWORD PTR [rax+rax*1+0x0]
  424a00:	mov    rdx,rbp
  424a03:	mov    esi,0x20
  424a08:	call   4061c0 <memset@plt>
  424a0d:	mov    rax,QWORD PTR [rbx+0x28]
  424a11:	add    rax,rbp
  424a14:	mov    QWORD PTR [rbx+0x28],rax
  424a18:	jmp    42490c <flatcc_json_printer_int32_struct_field@@Base+0x4c>
  424a1d:	nop    DWORD PTR [rax]

0000000000424a20 <flatcc_json_printer_int64_struct_field@@Base>:
  424a20:	endbr64 
  424a24:	push   r14
  424a26:	mov    r14,r8
  424a29:	push   r13
  424a2b:	push   r12
  424a2d:	push   rbp
  424a2e:	push   rbx
  424a2f:	mov    rbx,rdi
  424a32:	mov    r13,QWORD PTR [rdx+rcx*1]
  424a36:	mov    rax,QWORD PTR [rdi+0x28]
  424a3a:	test   esi,esi
  424a3c:	je     424a4d <flatcc_json_printer_int64_struct_field@@Base+0x2d>
  424a3e:	lea    rdx,[rax+0x1]
  424a42:	mov    QWORD PTR [rdi+0x28],rdx
  424a46:	mov    BYTE PTR [rax],0x2c
  424a49:	mov    rax,QWORD PTR [rdi+0x28]
  424a4d:	cmp    BYTE PTR [rbx+0x31],0x0
  424a51:	movsxd r12,r9d
  424a54:	jne    424b20 <flatcc_json_printer_int64_struct_field@@Base+0x100>
  424a5a:	cmp    QWORD PTR [rbx+0x20],rax
  424a5e:	ja     424a6c <flatcc_json_printer_int64_struct_field@@Base+0x4c>
  424a60:	xor    esi,esi
  424a62:	mov    rdi,rbx
  424a65:	call   QWORD PTR [rbx+0x48]
  424a68:	mov    rax,QWORD PTR [rbx+0x28]
  424a6c:	mov    BYTE PTR [rax],0x22
  424a6f:	xor    edi,edi
  424a71:	mov    rdx,r12
  424a74:	cmp    BYTE PTR [rbx+0x32],0x0
  424a78:	sete   dil
  424a7c:	add    rdi,QWORD PTR [rbx+0x28]
  424a80:	lea    rax,[rdi+r12*1]
  424a84:	mov    QWORD PTR [rbx+0x28],rdi
  424a88:	mov    rsi,r14
  424a8b:	cmp    QWORD PTR [rbx+0x20],rax
  424a8f:	ja     424b08 <flatcc_json_printer_int64_struct_field@@Base+0xe8>
  424a91:	mov    rdi,rbx
  424a94:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  424a99:	mov    r12,QWORD PTR [rbx+0x28]
  424a9d:	mov    BYTE PTR [r12],0x22
  424aa2:	xor    eax,eax
  424aa4:	mov    rbp,r13
  424aa7:	cmp    BYTE PTR [rbx+0x32],0x0
  424aab:	sete   al
  424aae:	add    rax,QWORD PTR [rbx+0x28]
  424ab2:	lea    rdx,[rax+0x1]
  424ab6:	mov    QWORD PTR [rbx+0x28],rdx
  424aba:	mov    BYTE PTR [rax],0x3a
  424abd:	xor    esi,esi
  424abf:	mov    rax,QWORD PTR [rbx+0x28]
  424ac3:	mov    BYTE PTR [rax],0x20
  424ac6:	cmp    BYTE PTR [rbx+0x31],0x0
  424aca:	setne  sil
  424ace:	add    rsi,QWORD PTR [rbx+0x28]
  424ad2:	mov    QWORD PTR [rbx+0x28],rsi
  424ad6:	shr    rbp,0x3f
  424ada:	test   r13,r13
  424add:	jns    424ae8 <flatcc_json_printer_int64_struct_field@@Base+0xc8>
  424adf:	mov    BYTE PTR [rsi],0x2d
  424ae2:	neg    r13
  424ae5:	inc    rsi
  424ae8:	mov    rdi,r13
  424aeb:	call   41fc30 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  424af0:	add    eax,ebp
  424af2:	cdqe   
  424af4:	add    QWORD PTR [rbx+0x28],rax
  424af8:	pop    rbx
  424af9:	pop    rbp
  424afa:	pop    r12
  424afc:	pop    r13
  424afe:	pop    r14
  424b00:	ret    
  424b01:	nop    DWORD PTR [rax+0x0]
  424b08:	call   406210 <memcpy@plt>
  424b0d:	add    r12,QWORD PTR [rbx+0x28]
  424b11:	mov    QWORD PTR [rbx+0x28],r12
  424b15:	jmp    424a9d <flatcc_json_printer_int64_struct_field@@Base+0x7d>
  424b17:	nop    WORD PTR [rax+rax*1+0x0]
  424b20:	lea    rdx,[rax+0x1]
  424b24:	mov    QWORD PTR [rbx+0x28],rdx
  424b28:	mov    BYTE PTR [rax],0xa
  424b2b:	movzx  eax,BYTE PTR [rbx+0x31]
  424b2f:	mov    rdi,QWORD PTR [rbx+0x28]
  424b33:	imul   eax,DWORD PTR [rbx+0x38]
  424b37:	movsxd rbp,eax
  424b3a:	lea    rax,[rdi+rbp*1]
  424b3e:	cmp    QWORD PTR [rbx+0x20],rax
  424b42:	jae    424b60 <flatcc_json_printer_int64_struct_field@@Base+0x140>
  424b44:	mov    rsi,rbp
  424b47:	mov    rdi,rbx
  424b4a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  424b4f:	mov    rax,QWORD PTR [rbx+0x28]
  424b53:	jmp    424a6c <flatcc_json_printer_int64_struct_field@@Base+0x4c>
  424b58:	nop    DWORD PTR [rax+rax*1+0x0]
  424b60:	mov    rdx,rbp
  424b63:	mov    esi,0x20
  424b68:	call   4061c0 <memset@plt>
  424b6d:	mov    rax,QWORD PTR [rbx+0x28]
  424b71:	add    rax,rbp
  424b74:	mov    QWORD PTR [rbx+0x28],rax
  424b78:	jmp    424a6c <flatcc_json_printer_int64_struct_field@@Base+0x4c>
  424b7d:	nop    DWORD PTR [rax]

0000000000424b80 <flatcc_json_printer_bool_struct_field@@Base>:
  424b80:	endbr64 
  424b84:	push   r14
  424b86:	mov    r14,r8
  424b89:	push   r13
  424b8b:	push   r12
  424b8d:	push   rbp
  424b8e:	push   rbx
  424b8f:	mov    rbx,rdi
  424b92:	movzx  r12d,BYTE PTR [rdx+rcx*1]
  424b97:	mov    rax,QWORD PTR [rdi+0x28]
  424b9b:	test   esi,esi
  424b9d:	je     424bae <flatcc_json_printer_bool_struct_field@@Base+0x2e>
  424b9f:	lea    rdx,[rax+0x1]
  424ba3:	mov    QWORD PTR [rdi+0x28],rdx
  424ba7:	mov    BYTE PTR [rax],0x2c
  424baa:	mov    rax,QWORD PTR [rdi+0x28]
  424bae:	cmp    BYTE PTR [rbx+0x31],0x0
  424bb2:	movsxd r13,r9d
  424bb5:	jne    424c60 <flatcc_json_printer_bool_struct_field@@Base+0xe0>
  424bbb:	cmp    QWORD PTR [rbx+0x20],rax
  424bbf:	ja     424bcd <flatcc_json_printer_bool_struct_field@@Base+0x4d>
  424bc1:	xor    esi,esi
  424bc3:	mov    rdi,rbx
  424bc6:	call   QWORD PTR [rbx+0x48]
  424bc9:	mov    rax,QWORD PTR [rbx+0x28]
  424bcd:	mov    BYTE PTR [rax],0x22
  424bd0:	xor    edi,edi
  424bd2:	mov    rdx,r13
  424bd5:	cmp    BYTE PTR [rbx+0x32],0x0
  424bd9:	sete   dil
  424bdd:	add    rdi,QWORD PTR [rbx+0x28]
  424be1:	lea    rax,[rdi+r13*1]
  424be5:	mov    QWORD PTR [rbx+0x28],rdi
  424be9:	mov    rsi,r14
  424bec:	cmp    QWORD PTR [rbx+0x20],rax
  424bf0:	ja     424c50 <flatcc_json_printer_bool_struct_field@@Base+0xd0>
  424bf2:	mov    rdi,rbx
  424bf5:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  424bfa:	mov    r13,QWORD PTR [rbx+0x28]
  424bfe:	mov    BYTE PTR [r13+0x0],0x22
  424c03:	xor    eax,eax
  424c05:	movzx  edi,r12b
  424c09:	cmp    BYTE PTR [rbx+0x32],0x0
  424c0d:	sete   al
  424c10:	add    rax,QWORD PTR [rbx+0x28]
  424c14:	lea    rdx,[rax+0x1]
  424c18:	mov    QWORD PTR [rbx+0x28],rdx
  424c1c:	mov    BYTE PTR [rax],0x3a
  424c1f:	xor    esi,esi
  424c21:	mov    rax,QWORD PTR [rbx+0x28]
  424c25:	mov    BYTE PTR [rax],0x20
  424c28:	cmp    BYTE PTR [rbx+0x31],0x0
  424c2c:	setne  sil
  424c30:	add    rsi,QWORD PTR [rbx+0x28]
  424c34:	mov    QWORD PTR [rbx+0x28],rsi
  424c38:	call   420590 <flatcc_json_parser_struct_as_root@@Base+0xd50>
  424c3d:	cdqe   
  424c3f:	add    QWORD PTR [rbx+0x28],rax
  424c43:	pop    rbx
  424c44:	pop    rbp
  424c45:	pop    r12
  424c47:	pop    r13
  424c49:	pop    r14
  424c4b:	ret    
  424c4c:	nop    DWORD PTR [rax+0x0]
  424c50:	call   406210 <memcpy@plt>
  424c55:	add    r13,QWORD PTR [rbx+0x28]
  424c59:	mov    QWORD PTR [rbx+0x28],r13
  424c5d:	jmp    424bfe <flatcc_json_printer_bool_struct_field@@Base+0x7e>
  424c5f:	nop
  424c60:	lea    rdx,[rax+0x1]
  424c64:	mov    QWORD PTR [rbx+0x28],rdx
  424c68:	mov    BYTE PTR [rax],0xa
  424c6b:	movzx  eax,BYTE PTR [rbx+0x31]
  424c6f:	mov    rdi,QWORD PTR [rbx+0x28]
  424c73:	imul   eax,DWORD PTR [rbx+0x38]
  424c77:	movsxd rbp,eax
  424c7a:	lea    rax,[rdi+rbp*1]
  424c7e:	cmp    QWORD PTR [rbx+0x20],rax
  424c82:	jae    424ca0 <flatcc_json_printer_bool_struct_field@@Base+0x120>
  424c84:	mov    rsi,rbp
  424c87:	mov    rdi,rbx
  424c8a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  424c8f:	mov    rax,QWORD PTR [rbx+0x28]
  424c93:	jmp    424bcd <flatcc_json_printer_bool_struct_field@@Base+0x4d>
  424c98:	nop    DWORD PTR [rax+rax*1+0x0]
  424ca0:	mov    rdx,rbp
  424ca3:	mov    esi,0x20
  424ca8:	call   4061c0 <memset@plt>
  424cad:	mov    rax,QWORD PTR [rbx+0x28]
  424cb1:	add    rax,rbp
  424cb4:	mov    QWORD PTR [rbx+0x28],rax
  424cb8:	jmp    424bcd <flatcc_json_printer_bool_struct_field@@Base+0x4d>
  424cbd:	nop    DWORD PTR [rax]

0000000000424cc0 <flatcc_json_printer_float_struct_field@@Base>:
  424cc0:	endbr64 
  424cc4:	push   r13
  424cc6:	mov    r13,r8
  424cc9:	push   r12
  424ccb:	push   rbp
  424ccc:	push   rbx
  424ccd:	mov    rbx,rdi
  424cd0:	sub    rsp,0x18
  424cd4:	vmovss xmm1,DWORD PTR [rdx+rcx*1]
  424cd9:	mov    rax,QWORD PTR [rdi+0x28]
  424cdd:	vmovss DWORD PTR [rsp+0xc],xmm1
  424ce3:	test   esi,esi
  424ce5:	je     424cf6 <flatcc_json_printer_float_struct_field@@Base+0x36>
  424ce7:	lea    rdx,[rax+0x1]
  424ceb:	mov    QWORD PTR [rdi+0x28],rdx
  424cef:	mov    BYTE PTR [rax],0x2c
  424cf2:	mov    rax,QWORD PTR [rdi+0x28]
  424cf6:	cmp    BYTE PTR [rbx+0x31],0x0
  424cfa:	movsxd r12,r9d
  424cfd:	jne    424db0 <flatcc_json_printer_float_struct_field@@Base+0xf0>
  424d03:	cmp    QWORD PTR [rbx+0x20],rax
  424d07:	ja     424d15 <flatcc_json_printer_float_struct_field@@Base+0x55>
  424d09:	xor    esi,esi
  424d0b:	mov    rdi,rbx
  424d0e:	call   QWORD PTR [rbx+0x48]
  424d11:	mov    rax,QWORD PTR [rbx+0x28]
  424d15:	mov    BYTE PTR [rax],0x22
  424d18:	xor    edi,edi
  424d1a:	mov    rdx,r12
  424d1d:	cmp    BYTE PTR [rbx+0x32],0x0
  424d21:	sete   dil
  424d25:	add    rdi,QWORD PTR [rbx+0x28]
  424d29:	lea    rax,[rdi+r12*1]
  424d2d:	mov    QWORD PTR [rbx+0x28],rdi
  424d31:	mov    rsi,r13
  424d34:	cmp    QWORD PTR [rbx+0x20],rax
  424d38:	ja     424da0 <flatcc_json_printer_float_struct_field@@Base+0xe0>
  424d3a:	mov    rdi,rbx
  424d3d:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  424d42:	mov    r12,QWORD PTR [rbx+0x28]
  424d46:	mov    BYTE PTR [r12],0x22
  424d4b:	xor    eax,eax
  424d4d:	vxorpd xmm0,xmm0,xmm0
  424d51:	cmp    BYTE PTR [rbx+0x32],0x0
  424d55:	sete   al
  424d58:	add    rax,QWORD PTR [rbx+0x28]
  424d5c:	lea    rdx,[rax+0x1]
  424d60:	mov    QWORD PTR [rbx+0x28],rdx
  424d64:	mov    BYTE PTR [rax],0x3a
  424d67:	xor    edi,edi
  424d69:	vcvtss2sd xmm0,xmm0,DWORD PTR [rsp+0xc]
  424d6f:	mov    rax,QWORD PTR [rbx+0x28]
  424d73:	mov    BYTE PTR [rax],0x20
  424d76:	cmp    BYTE PTR [rbx+0x31],0x0
  424d7a:	setne  dil
  424d7e:	add    rdi,QWORD PTR [rbx+0x28]
  424d82:	mov    QWORD PTR [rbx+0x28],rdi
  424d86:	call   4207b0 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  424d8b:	cdqe   
  424d8d:	add    QWORD PTR [rbx+0x28],rax
  424d91:	add    rsp,0x18
  424d95:	pop    rbx
  424d96:	pop    rbp
  424d97:	pop    r12
  424d99:	pop    r13
  424d9b:	ret    
  424d9c:	nop    DWORD PTR [rax+0x0]
  424da0:	call   406210 <memcpy@plt>
  424da5:	add    r12,QWORD PTR [rbx+0x28]
  424da9:	mov    QWORD PTR [rbx+0x28],r12
  424dad:	jmp    424d46 <flatcc_json_printer_float_struct_field@@Base+0x86>
  424daf:	nop
  424db0:	lea    rdx,[rax+0x1]
  424db4:	mov    QWORD PTR [rbx+0x28],rdx
  424db8:	mov    BYTE PTR [rax],0xa
  424dbb:	movzx  eax,BYTE PTR [rbx+0x31]
  424dbf:	mov    rdi,QWORD PTR [rbx+0x28]
  424dc3:	imul   eax,DWORD PTR [rbx+0x38]
  424dc7:	movsxd rbp,eax
  424dca:	lea    rax,[rdi+rbp*1]
  424dce:	cmp    QWORD PTR [rbx+0x20],rax
  424dd2:	jae    424df0 <flatcc_json_printer_float_struct_field@@Base+0x130>
  424dd4:	mov    rsi,rbp
  424dd7:	mov    rdi,rbx
  424dda:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  424ddf:	mov    rax,QWORD PTR [rbx+0x28]
  424de3:	jmp    424d15 <flatcc_json_printer_float_struct_field@@Base+0x55>
  424de8:	nop    DWORD PTR [rax+rax*1+0x0]
  424df0:	mov    rdx,rbp
  424df3:	mov    esi,0x20
  424df8:	call   4061c0 <memset@plt>
  424dfd:	mov    rax,QWORD PTR [rbx+0x28]
  424e01:	add    rax,rbp
  424e04:	mov    QWORD PTR [rbx+0x28],rax
  424e08:	jmp    424d15 <flatcc_json_printer_float_struct_field@@Base+0x55>
  424e0d:	nop    DWORD PTR [rax]

0000000000424e10 <flatcc_json_printer_double_struct_field@@Base>:
  424e10:	endbr64 
  424e14:	push   r13
  424e16:	mov    r13,r8
  424e19:	push   r12
  424e1b:	push   rbp
  424e1c:	push   rbx
  424e1d:	mov    rbx,rdi
  424e20:	sub    rsp,0x18
  424e24:	vmovsd xmm1,QWORD PTR [rdx+rcx*1]
  424e29:	mov    rax,QWORD PTR [rdi+0x28]
  424e2d:	vmovsd QWORD PTR [rsp+0x8],xmm1
  424e33:	test   esi,esi
  424e35:	je     424e46 <flatcc_json_printer_double_struct_field@@Base+0x36>
  424e37:	lea    rdx,[rax+0x1]
  424e3b:	mov    QWORD PTR [rdi+0x28],rdx
  424e3f:	mov    BYTE PTR [rax],0x2c
  424e42:	mov    rax,QWORD PTR [rdi+0x28]
  424e46:	cmp    BYTE PTR [rbx+0x31],0x0
  424e4a:	movsxd r12,r9d
  424e4d:	jne    424f00 <flatcc_json_printer_double_struct_field@@Base+0xf0>
  424e53:	cmp    QWORD PTR [rbx+0x20],rax
  424e57:	ja     424e65 <flatcc_json_printer_double_struct_field@@Base+0x55>
  424e59:	xor    esi,esi
  424e5b:	mov    rdi,rbx
  424e5e:	call   QWORD PTR [rbx+0x48]
  424e61:	mov    rax,QWORD PTR [rbx+0x28]
  424e65:	mov    BYTE PTR [rax],0x22
  424e68:	xor    edi,edi
  424e6a:	mov    rdx,r12
  424e6d:	cmp    BYTE PTR [rbx+0x32],0x0
  424e71:	sete   dil
  424e75:	add    rdi,QWORD PTR [rbx+0x28]
  424e79:	lea    rax,[rdi+r12*1]
  424e7d:	mov    QWORD PTR [rbx+0x28],rdi
  424e81:	mov    rsi,r13
  424e84:	cmp    QWORD PTR [rbx+0x20],rax
  424e88:	ja     424ef0 <flatcc_json_printer_double_struct_field@@Base+0xe0>
  424e8a:	mov    rdi,rbx
  424e8d:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  424e92:	mov    r12,QWORD PTR [rbx+0x28]
  424e96:	mov    BYTE PTR [r12],0x22
  424e9b:	xor    eax,eax
  424e9d:	vmovsd xmm0,QWORD PTR [rsp+0x8]
  424ea3:	cmp    BYTE PTR [rbx+0x32],0x0
  424ea7:	sete   al
  424eaa:	add    rax,QWORD PTR [rbx+0x28]
  424eae:	lea    rdx,[rax+0x1]
  424eb2:	mov    QWORD PTR [rbx+0x28],rdx
  424eb6:	mov    BYTE PTR [rax],0x3a
  424eb9:	xor    edi,edi
  424ebb:	mov    rax,QWORD PTR [rbx+0x28]
  424ebf:	mov    BYTE PTR [rax],0x20
  424ec2:	cmp    BYTE PTR [rbx+0x31],0x0
  424ec6:	setne  dil
  424eca:	add    rdi,QWORD PTR [rbx+0x28]
  424ece:	mov    QWORD PTR [rbx+0x28],rdi
  424ed2:	call   4207b0 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  424ed7:	cdqe   
  424ed9:	add    QWORD PTR [rbx+0x28],rax
  424edd:	add    rsp,0x18
  424ee1:	pop    rbx
  424ee2:	pop    rbp
  424ee3:	pop    r12
  424ee5:	pop    r13
  424ee7:	ret    
  424ee8:	nop    DWORD PTR [rax+rax*1+0x0]
  424ef0:	call   406210 <memcpy@plt>
  424ef5:	add    r12,QWORD PTR [rbx+0x28]
  424ef9:	mov    QWORD PTR [rbx+0x28],r12
  424efd:	jmp    424e96 <flatcc_json_printer_double_struct_field@@Base+0x86>
  424eff:	nop
  424f00:	lea    rdx,[rax+0x1]
  424f04:	mov    QWORD PTR [rbx+0x28],rdx
  424f08:	mov    BYTE PTR [rax],0xa
  424f0b:	movzx  eax,BYTE PTR [rbx+0x31]
  424f0f:	mov    rdi,QWORD PTR [rbx+0x28]
  424f13:	imul   eax,DWORD PTR [rbx+0x38]
  424f17:	movsxd rbp,eax
  424f1a:	lea    rax,[rdi+rbp*1]
  424f1e:	cmp    QWORD PTR [rbx+0x20],rax
  424f22:	jae    424f40 <flatcc_json_printer_double_struct_field@@Base+0x130>
  424f24:	mov    rsi,rbp
  424f27:	mov    rdi,rbx
  424f2a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  424f2f:	mov    rax,QWORD PTR [rbx+0x28]
  424f33:	jmp    424e65 <flatcc_json_printer_double_struct_field@@Base+0x55>
  424f38:	nop    DWORD PTR [rax+rax*1+0x0]
  424f40:	mov    rdx,rbp
  424f43:	mov    esi,0x20
  424f48:	call   4061c0 <memset@plt>
  424f4d:	mov    rax,QWORD PTR [rbx+0x28]
  424f51:	add    rax,rbp
  424f54:	mov    QWORD PTR [rbx+0x28],rax
  424f58:	jmp    424e65 <flatcc_json_printer_double_struct_field@@Base+0x55>
  424f5d:	nop    DWORD PTR [rax]

0000000000424f60 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
  424f60:	endbr64 
  424f64:	push   r15
  424f66:	mov    r15,r8
  424f69:	push   r14
  424f6b:	push   r13
  424f6d:	push   r12
  424f6f:	push   rbp
  424f70:	push   rbx
  424f71:	mov    rbx,rdi
  424f74:	sub    rsp,0x8
  424f78:	mov    r13,QWORD PTR [rsp+0x40]
  424f7d:	movzx  r12d,BYTE PTR [rdx+rcx*1]
  424f82:	mov    rax,QWORD PTR [rdi+0x28]
  424f86:	test   esi,esi
  424f88:	je     424f99 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x39>
  424f8a:	lea    rdx,[rax+0x1]
  424f8e:	mov    QWORD PTR [rdi+0x28],rdx
  424f92:	mov    BYTE PTR [rax],0x2c
  424f95:	mov    rax,QWORD PTR [rdi+0x28]
  424f99:	cmp    BYTE PTR [rbx+0x31],0x0
  424f9d:	movsxd r14,r9d
  424fa0:	jne    425070 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x110>
  424fa6:	cmp    QWORD PTR [rbx+0x20],rax
  424faa:	ja     424fb8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x58>
  424fac:	xor    esi,esi
  424fae:	mov    rdi,rbx
  424fb1:	call   QWORD PTR [rbx+0x48]
  424fb4:	mov    rax,QWORD PTR [rbx+0x28]
  424fb8:	mov    BYTE PTR [rax],0x22
  424fbb:	xor    edi,edi
  424fbd:	mov    rdx,r14
  424fc0:	cmp    BYTE PTR [rbx+0x32],0x0
  424fc4:	sete   dil
  424fc8:	add    rdi,QWORD PTR [rbx+0x28]
  424fcc:	lea    rax,[rdi+r14*1]
  424fd0:	mov    QWORD PTR [rbx+0x28],rdi
  424fd4:	mov    rsi,r15
  424fd7:	cmp    QWORD PTR [rbx+0x20],rax
  424fdb:	ja     425040 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xe0>
  424fdd:	mov    rdi,rbx
  424fe0:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  424fe5:	mov    r14,QWORD PTR [rbx+0x28]
  424fe9:	mov    BYTE PTR [r14],0x22
  424fed:	xor    eax,eax
  424fef:	cmp    BYTE PTR [rbx+0x32],0x0
  424ff3:	sete   al
  424ff6:	add    rax,QWORD PTR [rbx+0x28]
  424ffa:	lea    rdx,[rax+0x1]
  424ffe:	mov    QWORD PTR [rbx+0x28],rdx
  425002:	mov    BYTE PTR [rax],0x3a
  425005:	xor    esi,esi
  425007:	mov    rax,QWORD PTR [rbx+0x28]
  42500b:	mov    BYTE PTR [rax],0x20
  42500e:	cmp    BYTE PTR [rbx+0x31],0x0
  425012:	setne  sil
  425016:	add    rsi,QWORD PTR [rbx+0x28]
  42501a:	cmp    BYTE PTR [rbx+0x33],0x0
  42501e:	mov    QWORD PTR [rbx+0x28],rsi
  425022:	jne    425050 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xf0>
  425024:	add    rsp,0x8
  425028:	mov    rdi,rbx
  42502b:	pop    rbx
  42502c:	pop    rbp
  42502d:	movzx  esi,r12b
  425031:	pop    r12
  425033:	mov    rax,r13
  425036:	pop    r13
  425038:	pop    r14
  42503a:	pop    r15
  42503c:	jmp    rax
  42503e:	xchg   ax,ax
  425040:	call   406210 <memcpy@plt>
  425045:	add    r14,QWORD PTR [rbx+0x28]
  425049:	mov    QWORD PTR [rbx+0x28],r14
  42504d:	jmp    424fe9 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x89>
  42504f:	nop
  425050:	movzx  edi,r12b
  425054:	call   4205c0 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  425059:	cdqe   
  42505b:	add    QWORD PTR [rbx+0x28],rax
  42505f:	add    rsp,0x8
  425063:	pop    rbx
  425064:	pop    rbp
  425065:	pop    r12
  425067:	pop    r13
  425069:	pop    r14
  42506b:	pop    r15
  42506d:	ret    
  42506e:	xchg   ax,ax
  425070:	lea    rdx,[rax+0x1]
  425074:	mov    QWORD PTR [rbx+0x28],rdx
  425078:	mov    BYTE PTR [rax],0xa
  42507b:	movzx  eax,BYTE PTR [rbx+0x31]
  42507f:	mov    rdi,QWORD PTR [rbx+0x28]
  425083:	imul   eax,DWORD PTR [rbx+0x38]
  425087:	movsxd rbp,eax
  42508a:	lea    rax,[rdi+rbp*1]
  42508e:	cmp    QWORD PTR [rbx+0x20],rax
  425092:	jae    4250b0 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x150>
  425094:	mov    rsi,rbp
  425097:	mov    rdi,rbx
  42509a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42509f:	mov    rax,QWORD PTR [rbx+0x28]
  4250a3:	jmp    424fb8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x58>
  4250a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4250b0:	mov    rdx,rbp
  4250b3:	mov    esi,0x20
  4250b8:	call   4061c0 <memset@plt>
  4250bd:	mov    rax,QWORD PTR [rbx+0x28]
  4250c1:	add    rax,rbp
  4250c4:	mov    QWORD PTR [rbx+0x28],rax
  4250c8:	jmp    424fb8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x58>
  4250cd:	nop    DWORD PTR [rax]

00000000004250d0 <flatcc_json_printer_uint16_enum_struct_field@@Base>:
  4250d0:	endbr64 
  4250d4:	push   r15
  4250d6:	mov    r15,r8
  4250d9:	push   r14
  4250db:	push   r13
  4250dd:	push   r12
  4250df:	push   rbp
  4250e0:	push   rbx
  4250e1:	mov    rbx,rdi
  4250e4:	sub    rsp,0x8
  4250e8:	mov    r13,QWORD PTR [rsp+0x40]
  4250ed:	movzx  r12d,WORD PTR [rdx+rcx*1]
  4250f2:	mov    rax,QWORD PTR [rdi+0x28]
  4250f6:	test   esi,esi
  4250f8:	je     425109 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x39>
  4250fa:	lea    rdx,[rax+0x1]
  4250fe:	mov    QWORD PTR [rdi+0x28],rdx
  425102:	mov    BYTE PTR [rax],0x2c
  425105:	mov    rax,QWORD PTR [rdi+0x28]
  425109:	cmp    BYTE PTR [rbx+0x31],0x0
  42510d:	movsxd r14,r9d
  425110:	jne    4251e0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x110>
  425116:	cmp    QWORD PTR [rbx+0x20],rax
  42511a:	ja     425128 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x58>
  42511c:	xor    esi,esi
  42511e:	mov    rdi,rbx
  425121:	call   QWORD PTR [rbx+0x48]
  425124:	mov    rax,QWORD PTR [rbx+0x28]
  425128:	mov    BYTE PTR [rax],0x22
  42512b:	xor    edi,edi
  42512d:	mov    rdx,r14
  425130:	cmp    BYTE PTR [rbx+0x32],0x0
  425134:	sete   dil
  425138:	add    rdi,QWORD PTR [rbx+0x28]
  42513c:	lea    rax,[rdi+r14*1]
  425140:	mov    QWORD PTR [rbx+0x28],rdi
  425144:	mov    rsi,r15
  425147:	cmp    QWORD PTR [rbx+0x20],rax
  42514b:	ja     4251b0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xe0>
  42514d:	mov    rdi,rbx
  425150:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  425155:	mov    r14,QWORD PTR [rbx+0x28]
  425159:	mov    BYTE PTR [r14],0x22
  42515d:	xor    eax,eax
  42515f:	cmp    BYTE PTR [rbx+0x32],0x0
  425163:	sete   al
  425166:	add    rax,QWORD PTR [rbx+0x28]
  42516a:	lea    rdx,[rax+0x1]
  42516e:	mov    QWORD PTR [rbx+0x28],rdx
  425172:	mov    BYTE PTR [rax],0x3a
  425175:	xor    esi,esi
  425177:	mov    rax,QWORD PTR [rbx+0x28]
  42517b:	mov    BYTE PTR [rax],0x20
  42517e:	cmp    BYTE PTR [rbx+0x31],0x0
  425182:	setne  sil
  425186:	add    rsi,QWORD PTR [rbx+0x28]
  42518a:	cmp    BYTE PTR [rbx+0x33],0x0
  42518e:	mov    QWORD PTR [rbx+0x28],rsi
  425192:	jne    4251c0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xf0>
  425194:	add    rsp,0x8
  425198:	mov    rdi,rbx
  42519b:	pop    rbx
  42519c:	pop    rbp
  42519d:	movzx  esi,r12w
  4251a1:	pop    r12
  4251a3:	mov    rax,r13
  4251a6:	pop    r13
  4251a8:	pop    r14
  4251aa:	pop    r15
  4251ac:	jmp    rax
  4251ae:	xchg   ax,ax
  4251b0:	call   406210 <memcpy@plt>
  4251b5:	add    r14,QWORD PTR [rbx+0x28]
  4251b9:	mov    QWORD PTR [rbx+0x28],r14
  4251bd:	jmp    425159 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x89>
  4251bf:	nop
  4251c0:	movzx  edi,r12w
  4251c4:	call   41f850 <flatcc_json_parser_struct_as_root@@Base+0x10>
  4251c9:	cdqe   
  4251cb:	add    QWORD PTR [rbx+0x28],rax
  4251cf:	add    rsp,0x8
  4251d3:	pop    rbx
  4251d4:	pop    rbp
  4251d5:	pop    r12
  4251d7:	pop    r13
  4251d9:	pop    r14
  4251db:	pop    r15
  4251dd:	ret    
  4251de:	xchg   ax,ax
  4251e0:	lea    rdx,[rax+0x1]
  4251e4:	mov    QWORD PTR [rbx+0x28],rdx
  4251e8:	mov    BYTE PTR [rax],0xa
  4251eb:	movzx  eax,BYTE PTR [rbx+0x31]
  4251ef:	mov    rdi,QWORD PTR [rbx+0x28]
  4251f3:	imul   eax,DWORD PTR [rbx+0x38]
  4251f7:	movsxd rbp,eax
  4251fa:	lea    rax,[rdi+rbp*1]
  4251fe:	cmp    QWORD PTR [rbx+0x20],rax
  425202:	jae    425220 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x150>
  425204:	mov    rsi,rbp
  425207:	mov    rdi,rbx
  42520a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42520f:	mov    rax,QWORD PTR [rbx+0x28]
  425213:	jmp    425128 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x58>
  425218:	nop    DWORD PTR [rax+rax*1+0x0]
  425220:	mov    rdx,rbp
  425223:	mov    esi,0x20
  425228:	call   4061c0 <memset@plt>
  42522d:	mov    rax,QWORD PTR [rbx+0x28]
  425231:	add    rax,rbp
  425234:	mov    QWORD PTR [rbx+0x28],rax
  425238:	jmp    425128 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x58>
  42523d:	nop    DWORD PTR [rax]

0000000000425240 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
  425240:	endbr64 
  425244:	push   r15
  425246:	mov    r15,r8
  425249:	push   r14
  42524b:	push   r13
  42524d:	push   r12
  42524f:	push   rbp
  425250:	push   rbx
  425251:	mov    rbx,rdi
  425254:	sub    rsp,0x8
  425258:	mov    r13,QWORD PTR [rsp+0x40]
  42525d:	mov    r12d,DWORD PTR [rdx+rcx*1]
  425261:	mov    rax,QWORD PTR [rdi+0x28]
  425265:	test   esi,esi
  425267:	je     425278 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x38>
  425269:	lea    rdx,[rax+0x1]
  42526d:	mov    QWORD PTR [rdi+0x28],rdx
  425271:	mov    BYTE PTR [rax],0x2c
  425274:	mov    rax,QWORD PTR [rdi+0x28]
  425278:	cmp    BYTE PTR [rbx+0x31],0x0
  42527c:	movsxd r14,r9d
  42527f:	jne    425350 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x110>
  425285:	cmp    QWORD PTR [rbx+0x20],rax
  425289:	ja     425297 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x57>
  42528b:	xor    esi,esi
  42528d:	mov    rdi,rbx
  425290:	call   QWORD PTR [rbx+0x48]
  425293:	mov    rax,QWORD PTR [rbx+0x28]
  425297:	mov    BYTE PTR [rax],0x22
  42529a:	xor    edi,edi
  42529c:	mov    rdx,r14
  42529f:	cmp    BYTE PTR [rbx+0x32],0x0
  4252a3:	sete   dil
  4252a7:	add    rdi,QWORD PTR [rbx+0x28]
  4252ab:	lea    rax,[rdi+r14*1]
  4252af:	mov    QWORD PTR [rbx+0x28],rdi
  4252b3:	mov    rsi,r15
  4252b6:	cmp    QWORD PTR [rbx+0x20],rax
  4252ba:	ja     425320 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xe0>
  4252bc:	mov    rdi,rbx
  4252bf:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4252c4:	mov    r14,QWORD PTR [rbx+0x28]
  4252c8:	mov    BYTE PTR [r14],0x22
  4252cc:	xor    eax,eax
  4252ce:	cmp    BYTE PTR [rbx+0x32],0x0
  4252d2:	sete   al
  4252d5:	add    rax,QWORD PTR [rbx+0x28]
  4252d9:	lea    rdx,[rax+0x1]
  4252dd:	mov    QWORD PTR [rbx+0x28],rdx
  4252e1:	mov    BYTE PTR [rax],0x3a
  4252e4:	xor    esi,esi
  4252e6:	mov    rax,QWORD PTR [rbx+0x28]
  4252ea:	mov    BYTE PTR [rax],0x20
  4252ed:	cmp    BYTE PTR [rbx+0x31],0x0
  4252f1:	setne  sil
  4252f5:	add    rsi,QWORD PTR [rbx+0x28]
  4252f9:	cmp    BYTE PTR [rbx+0x33],0x0
  4252fd:	mov    QWORD PTR [rbx+0x28],rsi
  425301:	jne    425330 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xf0>
  425303:	add    rsp,0x8
  425307:	mov    rdi,rbx
  42530a:	pop    rbx
  42530b:	pop    rbp
  42530c:	mov    esi,r12d
  42530f:	pop    r12
  425311:	mov    rax,r13
  425314:	pop    r13
  425316:	pop    r14
  425318:	pop    r15
  42531a:	jmp    rax
  42531c:	nop    DWORD PTR [rax+0x0]
  425320:	call   406210 <memcpy@plt>
  425325:	add    r14,QWORD PTR [rbx+0x28]
  425329:	mov    QWORD PTR [rbx+0x28],r14
  42532d:	jmp    4252c8 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x88>
  42532f:	nop
  425330:	mov    edi,r12d
  425333:	call   41f980 <flatcc_json_parser_struct_as_root@@Base+0x140>
  425338:	cdqe   
  42533a:	add    QWORD PTR [rbx+0x28],rax
  42533e:	add    rsp,0x8
  425342:	pop    rbx
  425343:	pop    rbp
  425344:	pop    r12
  425346:	pop    r13
  425348:	pop    r14
  42534a:	pop    r15
  42534c:	ret    
  42534d:	nop    DWORD PTR [rax]
  425350:	lea    rdx,[rax+0x1]
  425354:	mov    QWORD PTR [rbx+0x28],rdx
  425358:	mov    BYTE PTR [rax],0xa
  42535b:	movzx  eax,BYTE PTR [rbx+0x31]
  42535f:	mov    rdi,QWORD PTR [rbx+0x28]
  425363:	imul   eax,DWORD PTR [rbx+0x38]
  425367:	movsxd rbp,eax
  42536a:	lea    rax,[rdi+rbp*1]
  42536e:	cmp    QWORD PTR [rbx+0x20],rax
  425372:	jae    425390 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x150>
  425374:	mov    rsi,rbp
  425377:	mov    rdi,rbx
  42537a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42537f:	mov    rax,QWORD PTR [rbx+0x28]
  425383:	jmp    425297 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x57>
  425388:	nop    DWORD PTR [rax+rax*1+0x0]
  425390:	mov    rdx,rbp
  425393:	mov    esi,0x20
  425398:	call   4061c0 <memset@plt>
  42539d:	mov    rax,QWORD PTR [rbx+0x28]
  4253a1:	add    rax,rbp
  4253a4:	mov    QWORD PTR [rbx+0x28],rax
  4253a8:	jmp    425297 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x57>
  4253ad:	nop    DWORD PTR [rax]

00000000004253b0 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
  4253b0:	endbr64 
  4253b4:	push   r15
  4253b6:	mov    r15,r8
  4253b9:	push   r14
  4253bb:	push   r13
  4253bd:	push   r12
  4253bf:	push   rbp
  4253c0:	push   rbx
  4253c1:	mov    rbx,rdi
  4253c4:	sub    rsp,0x8
  4253c8:	mov    r13,QWORD PTR [rsp+0x40]
  4253cd:	mov    r12,QWORD PTR [rdx+rcx*1]
  4253d1:	mov    rax,QWORD PTR [rdi+0x28]
  4253d5:	test   esi,esi
  4253d7:	je     4253e8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x38>
  4253d9:	lea    rdx,[rax+0x1]
  4253dd:	mov    QWORD PTR [rdi+0x28],rdx
  4253e1:	mov    BYTE PTR [rax],0x2c
  4253e4:	mov    rax,QWORD PTR [rdi+0x28]
  4253e8:	cmp    BYTE PTR [rbx+0x31],0x0
  4253ec:	movsxd r14,r9d
  4253ef:	jne    4254c0 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x110>
  4253f5:	cmp    QWORD PTR [rbx+0x20],rax
  4253f9:	ja     425407 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x57>
  4253fb:	xor    esi,esi
  4253fd:	mov    rdi,rbx
  425400:	call   QWORD PTR [rbx+0x48]
  425403:	mov    rax,QWORD PTR [rbx+0x28]
  425407:	mov    BYTE PTR [rax],0x22
  42540a:	xor    edi,edi
  42540c:	mov    rdx,r14
  42540f:	cmp    BYTE PTR [rbx+0x32],0x0
  425413:	sete   dil
  425417:	add    rdi,QWORD PTR [rbx+0x28]
  42541b:	lea    rax,[rdi+r14*1]
  42541f:	mov    QWORD PTR [rbx+0x28],rdi
  425423:	mov    rsi,r15
  425426:	cmp    QWORD PTR [rbx+0x20],rax
  42542a:	ja     425490 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xe0>
  42542c:	mov    rdi,rbx
  42542f:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  425434:	mov    r14,QWORD PTR [rbx+0x28]
  425438:	mov    BYTE PTR [r14],0x22
  42543c:	xor    eax,eax
  42543e:	cmp    BYTE PTR [rbx+0x32],0x0
  425442:	sete   al
  425445:	add    rax,QWORD PTR [rbx+0x28]
  425449:	lea    rdx,[rax+0x1]
  42544d:	mov    QWORD PTR [rbx+0x28],rdx
  425451:	mov    BYTE PTR [rax],0x3a
  425454:	xor    esi,esi
  425456:	mov    rax,QWORD PTR [rbx+0x28]
  42545a:	mov    BYTE PTR [rax],0x20
  42545d:	cmp    BYTE PTR [rbx+0x31],0x0
  425461:	setne  sil
  425465:	add    rsi,QWORD PTR [rbx+0x28]
  425469:	cmp    BYTE PTR [rbx+0x33],0x0
  42546d:	mov    QWORD PTR [rbx+0x28],rsi
  425471:	jne    4254a0 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xf0>
  425473:	add    rsp,0x8
  425477:	mov    rdi,rbx
  42547a:	pop    rbx
  42547b:	pop    rbp
  42547c:	mov    rsi,r12
  42547f:	pop    r12
  425481:	mov    rax,r13
  425484:	pop    r13
  425486:	pop    r14
  425488:	pop    r15
  42548a:	jmp    rax
  42548c:	nop    DWORD PTR [rax+0x0]
  425490:	call   406210 <memcpy@plt>
  425495:	add    r14,QWORD PTR [rbx+0x28]
  425499:	mov    QWORD PTR [rbx+0x28],r14
  42549d:	jmp    425438 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x88>
  42549f:	nop
  4254a0:	mov    rdi,r12
  4254a3:	call   41fc30 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  4254a8:	cdqe   
  4254aa:	add    QWORD PTR [rbx+0x28],rax
  4254ae:	add    rsp,0x8
  4254b2:	pop    rbx
  4254b3:	pop    rbp
  4254b4:	pop    r12
  4254b6:	pop    r13
  4254b8:	pop    r14
  4254ba:	pop    r15
  4254bc:	ret    
  4254bd:	nop    DWORD PTR [rax]
  4254c0:	lea    rdx,[rax+0x1]
  4254c4:	mov    QWORD PTR [rbx+0x28],rdx
  4254c8:	mov    BYTE PTR [rax],0xa
  4254cb:	movzx  eax,BYTE PTR [rbx+0x31]
  4254cf:	mov    rdi,QWORD PTR [rbx+0x28]
  4254d3:	imul   eax,DWORD PTR [rbx+0x38]
  4254d7:	movsxd rbp,eax
  4254da:	lea    rax,[rdi+rbp*1]
  4254de:	cmp    QWORD PTR [rbx+0x20],rax
  4254e2:	jae    425500 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x150>
  4254e4:	mov    rsi,rbp
  4254e7:	mov    rdi,rbx
  4254ea:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4254ef:	mov    rax,QWORD PTR [rbx+0x28]
  4254f3:	jmp    425407 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x57>
  4254f8:	nop    DWORD PTR [rax+rax*1+0x0]
  425500:	mov    rdx,rbp
  425503:	mov    esi,0x20
  425508:	call   4061c0 <memset@plt>
  42550d:	mov    rax,QWORD PTR [rbx+0x28]
  425511:	add    rax,rbp
  425514:	mov    QWORD PTR [rbx+0x28],rax
  425518:	jmp    425407 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x57>
  42551d:	nop    DWORD PTR [rax]

0000000000425520 <flatcc_json_printer_int8_enum_struct_field@@Base>:
  425520:	endbr64 
  425524:	push   r15
  425526:	mov    r15,r8
  425529:	push   r14
  42552b:	push   r13
  42552d:	push   r12
  42552f:	push   rbp
  425530:	push   rbx
  425531:	mov    rbx,rdi
  425534:	sub    rsp,0x8
  425538:	mov    r13,QWORD PTR [rsp+0x40]
  42553d:	movzx  r12d,BYTE PTR [rdx+rcx*1]
  425542:	mov    rax,QWORD PTR [rdi+0x28]
  425546:	test   esi,esi
  425548:	je     425559 <flatcc_json_printer_int8_enum_struct_field@@Base+0x39>
  42554a:	lea    rdx,[rax+0x1]
  42554e:	mov    QWORD PTR [rdi+0x28],rdx
  425552:	mov    BYTE PTR [rax],0x2c
  425555:	mov    rax,QWORD PTR [rdi+0x28]
  425559:	cmp    BYTE PTR [rbx+0x31],0x0
  42555d:	movsxd r14,r9d
  425560:	jne    425658 <flatcc_json_printer_int8_enum_struct_field@@Base+0x138>
  425566:	cmp    QWORD PTR [rbx+0x20],rax
  42556a:	ja     425578 <flatcc_json_printer_int8_enum_struct_field@@Base+0x58>
  42556c:	xor    esi,esi
  42556e:	mov    rdi,rbx
  425571:	call   QWORD PTR [rbx+0x48]
  425574:	mov    rax,QWORD PTR [rbx+0x28]
  425578:	mov    BYTE PTR [rax],0x22
  42557b:	xor    edi,edi
  42557d:	mov    rdx,r14
  425580:	cmp    BYTE PTR [rbx+0x32],0x0
  425584:	sete   dil
  425588:	add    rdi,QWORD PTR [rbx+0x28]
  42558c:	lea    rax,[rdi+r14*1]
  425590:	mov    QWORD PTR [rbx+0x28],rdi
  425594:	mov    rsi,r15
  425597:	cmp    QWORD PTR [rbx+0x20],rax
  42559b:	ja     425620 <flatcc_json_printer_int8_enum_struct_field@@Base+0x100>
  4255a1:	mov    rdi,rbx
  4255a4:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4255a9:	mov    r14,QWORD PTR [rbx+0x28]
  4255ad:	mov    BYTE PTR [r14],0x22
  4255b1:	xor    eax,eax
  4255b3:	cmp    BYTE PTR [rbx+0x32],0x0
  4255b7:	sete   al
  4255ba:	add    rax,QWORD PTR [rbx+0x28]
  4255be:	lea    rdx,[rax+0x1]
  4255c2:	mov    QWORD PTR [rbx+0x28],rdx
  4255c6:	mov    BYTE PTR [rax],0x3a
  4255c9:	xor    esi,esi
  4255cb:	mov    rax,QWORD PTR [rbx+0x28]
  4255cf:	mov    BYTE PTR [rax],0x20
  4255d2:	cmp    BYTE PTR [rbx+0x31],0x0
  4255d6:	setne  sil
  4255da:	add    rsi,QWORD PTR [rbx+0x28]
  4255de:	cmp    BYTE PTR [rbx+0x33],0x0
  4255e2:	mov    QWORD PTR [rbx+0x28],rsi
  4255e6:	je     425638 <flatcc_json_printer_int8_enum_struct_field@@Base+0x118>
  4255e8:	movsx  r8d,r12b
  4255ec:	shr    r8d,0x1f
  4255f0:	test   r12b,r12b
  4255f3:	jns    4255fe <flatcc_json_printer_int8_enum_struct_field@@Base+0xde>
  4255f5:	mov    BYTE PTR [rsi],0x2d
  4255f8:	neg    r12d
  4255fb:	inc    rsi
  4255fe:	movzx  edi,r12b
  425602:	call   4205c0 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  425607:	add    r8d,eax
  42560a:	movsxd r8,r8d
  42560d:	add    QWORD PTR [rbx+0x28],r8
  425611:	add    rsp,0x8
  425615:	pop    rbx
  425616:	pop    rbp
  425617:	pop    r12
  425619:	pop    r13
  42561b:	pop    r14
  42561d:	pop    r15
  42561f:	ret    
  425620:	call   406210 <memcpy@plt>
  425625:	add    r14,QWORD PTR [rbx+0x28]
  425629:	mov    QWORD PTR [rbx+0x28],r14
  42562d:	jmp    4255ad <flatcc_json_printer_int8_enum_struct_field@@Base+0x8d>
  425632:	nop    WORD PTR [rax+rax*1+0x0]
  425638:	add    rsp,0x8
  42563c:	mov    rdi,rbx
  42563f:	pop    rbx
  425640:	pop    rbp
  425641:	movsx  esi,r12b
  425645:	pop    r12
  425647:	mov    rax,r13
  42564a:	pop    r13
  42564c:	pop    r14
  42564e:	pop    r15
  425650:	jmp    rax
  425652:	nop    WORD PTR [rax+rax*1+0x0]
  425658:	lea    rdx,[rax+0x1]
  42565c:	mov    QWORD PTR [rbx+0x28],rdx
  425660:	mov    BYTE PTR [rax],0xa
  425663:	movzx  eax,BYTE PTR [rbx+0x31]
  425667:	mov    rdi,QWORD PTR [rbx+0x28]
  42566b:	imul   eax,DWORD PTR [rbx+0x38]
  42566f:	movsxd rbp,eax
  425672:	lea    rax,[rdi+rbp*1]
  425676:	cmp    QWORD PTR [rbx+0x20],rax
  42567a:	jae    425690 <flatcc_json_printer_int8_enum_struct_field@@Base+0x170>
  42567c:	mov    rsi,rbp
  42567f:	mov    rdi,rbx
  425682:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  425687:	mov    rax,QWORD PTR [rbx+0x28]
  42568b:	jmp    425578 <flatcc_json_printer_int8_enum_struct_field@@Base+0x58>
  425690:	mov    rdx,rbp
  425693:	mov    esi,0x20
  425698:	call   4061c0 <memset@plt>
  42569d:	mov    rax,QWORD PTR [rbx+0x28]
  4256a1:	add    rax,rbp
  4256a4:	mov    QWORD PTR [rbx+0x28],rax
  4256a8:	jmp    425578 <flatcc_json_printer_int8_enum_struct_field@@Base+0x58>
  4256ad:	nop    DWORD PTR [rax]

00000000004256b0 <flatcc_json_printer_int16_enum_struct_field@@Base>:
  4256b0:	endbr64 
  4256b4:	push   r15
  4256b6:	mov    r15,r8
  4256b9:	push   r14
  4256bb:	push   r13
  4256bd:	push   r12
  4256bf:	push   rbp
  4256c0:	push   rbx
  4256c1:	mov    rbx,rdi
  4256c4:	sub    rsp,0x8
  4256c8:	mov    r13,QWORD PTR [rsp+0x40]
  4256cd:	movzx  r12d,WORD PTR [rdx+rcx*1]
  4256d2:	mov    rax,QWORD PTR [rdi+0x28]
  4256d6:	test   esi,esi
  4256d8:	je     4256e9 <flatcc_json_printer_int16_enum_struct_field@@Base+0x39>
  4256da:	lea    rdx,[rax+0x1]
  4256de:	mov    QWORD PTR [rdi+0x28],rdx
  4256e2:	mov    BYTE PTR [rax],0x2c
  4256e5:	mov    rax,QWORD PTR [rdi+0x28]
  4256e9:	cmp    BYTE PTR [rbx+0x31],0x0
  4256ed:	movsxd r14,r9d
  4256f0:	jne    4257f0 <flatcc_json_printer_int16_enum_struct_field@@Base+0x140>
  4256f6:	cmp    QWORD PTR [rbx+0x20],rax
  4256fa:	ja     425708 <flatcc_json_printer_int16_enum_struct_field@@Base+0x58>
  4256fc:	xor    esi,esi
  4256fe:	mov    rdi,rbx
  425701:	call   QWORD PTR [rbx+0x48]
  425704:	mov    rax,QWORD PTR [rbx+0x28]
  425708:	mov    BYTE PTR [rax],0x22
  42570b:	xor    edi,edi
  42570d:	mov    rdx,r14
  425710:	cmp    BYTE PTR [rbx+0x32],0x0
  425714:	sete   dil
  425718:	add    rdi,QWORD PTR [rbx+0x28]
  42571c:	lea    rax,[rdi+r14*1]
  425720:	mov    QWORD PTR [rbx+0x28],rdi
  425724:	mov    rsi,r15
  425727:	cmp    QWORD PTR [rbx+0x20],rax
  42572b:	ja     4257b8 <flatcc_json_printer_int16_enum_struct_field@@Base+0x108>
  425731:	mov    rdi,rbx
  425734:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  425739:	mov    r14,QWORD PTR [rbx+0x28]
  42573d:	mov    BYTE PTR [r14],0x22
  425741:	xor    eax,eax
  425743:	cmp    BYTE PTR [rbx+0x32],0x0
  425747:	sete   al
  42574a:	add    rax,QWORD PTR [rbx+0x28]
  42574e:	lea    rdx,[rax+0x1]
  425752:	mov    QWORD PTR [rbx+0x28],rdx
  425756:	mov    BYTE PTR [rax],0x3a
  425759:	xor    esi,esi
  42575b:	mov    rax,QWORD PTR [rbx+0x28]
  42575f:	mov    BYTE PTR [rax],0x20
  425762:	cmp    BYTE PTR [rbx+0x31],0x0
  425766:	setne  sil
  42576a:	add    rsi,QWORD PTR [rbx+0x28]
  42576e:	cmp    BYTE PTR [rbx+0x33],0x0
  425772:	mov    QWORD PTR [rbx+0x28],rsi
  425776:	je     4257d0 <flatcc_json_printer_int16_enum_struct_field@@Base+0x120>
  425778:	movsx  r11d,r12w
  42577c:	shr    r11d,0x1f
  425780:	test   r12w,r12w
  425784:	jns    42578f <flatcc_json_printer_int16_enum_struct_field@@Base+0xdf>
  425786:	mov    BYTE PTR [rsi],0x2d
  425789:	neg    r12d
  42578c:	inc    rsi
  42578f:	movzx  edi,r12w
  425793:	call   41f850 <flatcc_json_parser_struct_as_root@@Base+0x10>
  425798:	add    r11d,eax
  42579b:	movsxd r11,r11d
  42579e:	add    QWORD PTR [rbx+0x28],r11
  4257a2:	add    rsp,0x8
  4257a6:	pop    rbx
  4257a7:	pop    rbp
  4257a8:	pop    r12
  4257aa:	pop    r13
  4257ac:	pop    r14
  4257ae:	pop    r15
  4257b0:	ret    
  4257b1:	nop    DWORD PTR [rax+0x0]
  4257b8:	call   406210 <memcpy@plt>
  4257bd:	add    r14,QWORD PTR [rbx+0x28]
  4257c1:	mov    QWORD PTR [rbx+0x28],r14
  4257c5:	jmp    42573d <flatcc_json_printer_int16_enum_struct_field@@Base+0x8d>
  4257ca:	nop    WORD PTR [rax+rax*1+0x0]
  4257d0:	add    rsp,0x8
  4257d4:	mov    rdi,rbx
  4257d7:	pop    rbx
  4257d8:	pop    rbp
  4257d9:	movsx  esi,r12w
  4257dd:	pop    r12
  4257df:	mov    rax,r13
  4257e2:	pop    r13
  4257e4:	pop    r14
  4257e6:	pop    r15
  4257e8:	jmp    rax
  4257ea:	nop    WORD PTR [rax+rax*1+0x0]
  4257f0:	lea    rdx,[rax+0x1]
  4257f4:	mov    QWORD PTR [rbx+0x28],rdx
  4257f8:	mov    BYTE PTR [rax],0xa
  4257fb:	movzx  eax,BYTE PTR [rbx+0x31]
  4257ff:	mov    rdi,QWORD PTR [rbx+0x28]
  425803:	imul   eax,DWORD PTR [rbx+0x38]
  425807:	movsxd rbp,eax
  42580a:	lea    rax,[rdi+rbp*1]
  42580e:	cmp    QWORD PTR [rbx+0x20],rax
  425812:	jae    425830 <flatcc_json_printer_int16_enum_struct_field@@Base+0x180>
  425814:	mov    rsi,rbp
  425817:	mov    rdi,rbx
  42581a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42581f:	mov    rax,QWORD PTR [rbx+0x28]
  425823:	jmp    425708 <flatcc_json_printer_int16_enum_struct_field@@Base+0x58>
  425828:	nop    DWORD PTR [rax+rax*1+0x0]
  425830:	mov    rdx,rbp
  425833:	mov    esi,0x20
  425838:	call   4061c0 <memset@plt>
  42583d:	mov    rax,QWORD PTR [rbx+0x28]
  425841:	add    rax,rbp
  425844:	mov    QWORD PTR [rbx+0x28],rax
  425848:	jmp    425708 <flatcc_json_printer_int16_enum_struct_field@@Base+0x58>
  42584d:	nop    DWORD PTR [rax]

0000000000425850 <flatcc_json_printer_int32_enum_struct_field@@Base>:
  425850:	endbr64 
  425854:	push   r15
  425856:	mov    r15,r8
  425859:	push   r14
  42585b:	push   r13
  42585d:	push   r12
  42585f:	push   rbp
  425860:	push   rbx
  425861:	mov    rbx,rdi
  425864:	sub    rsp,0x8
  425868:	mov    r13,QWORD PTR [rsp+0x40]
  42586d:	mov    r12d,DWORD PTR [rdx+rcx*1]
  425871:	mov    rax,QWORD PTR [rdi+0x28]
  425875:	test   esi,esi
  425877:	je     425888 <flatcc_json_printer_int32_enum_struct_field@@Base+0x38>
  425879:	lea    rdx,[rax+0x1]
  42587d:	mov    QWORD PTR [rdi+0x28],rdx
  425881:	mov    BYTE PTR [rax],0x2c
  425884:	mov    rax,QWORD PTR [rdi+0x28]
  425888:	cmp    BYTE PTR [rbx+0x31],0x0
  42588c:	movsxd r14,r9d
  42588f:	jne    425988 <flatcc_json_printer_int32_enum_struct_field@@Base+0x138>
  425895:	cmp    QWORD PTR [rbx+0x20],rax
  425899:	ja     4258a7 <flatcc_json_printer_int32_enum_struct_field@@Base+0x57>
  42589b:	xor    esi,esi
  42589d:	mov    rdi,rbx
  4258a0:	call   QWORD PTR [rbx+0x48]
  4258a3:	mov    rax,QWORD PTR [rbx+0x28]
  4258a7:	mov    BYTE PTR [rax],0x22
  4258aa:	xor    edi,edi
  4258ac:	mov    rdx,r14
  4258af:	cmp    BYTE PTR [rbx+0x32],0x0
  4258b3:	sete   dil
  4258b7:	add    rdi,QWORD PTR [rbx+0x28]
  4258bb:	lea    rax,[rdi+r14*1]
  4258bf:	mov    QWORD PTR [rbx+0x28],rdi
  4258c3:	mov    rsi,r15
  4258c6:	cmp    QWORD PTR [rbx+0x20],rax
  4258ca:	ja     425950 <flatcc_json_printer_int32_enum_struct_field@@Base+0x100>
  4258d0:	mov    rdi,rbx
  4258d3:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4258d8:	mov    r14,QWORD PTR [rbx+0x28]
  4258dc:	mov    BYTE PTR [r14],0x22
  4258e0:	xor    eax,eax
  4258e2:	cmp    BYTE PTR [rbx+0x32],0x0
  4258e6:	sete   al
  4258e9:	add    rax,QWORD PTR [rbx+0x28]
  4258ed:	lea    rdx,[rax+0x1]
  4258f1:	mov    QWORD PTR [rbx+0x28],rdx
  4258f5:	mov    BYTE PTR [rax],0x3a
  4258f8:	xor    esi,esi
  4258fa:	mov    rax,QWORD PTR [rbx+0x28]
  4258fe:	mov    BYTE PTR [rax],0x20
  425901:	cmp    BYTE PTR [rbx+0x31],0x0
  425905:	setne  sil
  425909:	add    rsi,QWORD PTR [rbx+0x28]
  42590d:	cmp    BYTE PTR [rbx+0x33],0x0
  425911:	mov    QWORD PTR [rbx+0x28],rsi
  425915:	je     425968 <flatcc_json_printer_int32_enum_struct_field@@Base+0x118>
  425917:	mov    ebp,r12d
  42591a:	shr    ebp,0x1f
  42591d:	test   r12d,r12d
  425920:	jns    42592b <flatcc_json_printer_int32_enum_struct_field@@Base+0xdb>
  425922:	mov    BYTE PTR [rsi],0x2d
  425925:	neg    r12d
  425928:	inc    rsi
  42592b:	mov    edi,r12d
  42592e:	call   41f980 <flatcc_json_parser_struct_as_root@@Base+0x140>
  425933:	add    ebp,eax
  425935:	movsxd rbp,ebp
  425938:	add    QWORD PTR [rbx+0x28],rbp
  42593c:	add    rsp,0x8
  425940:	pop    rbx
  425941:	pop    rbp
  425942:	pop    r12
  425944:	pop    r13
  425946:	pop    r14
  425948:	pop    r15
  42594a:	ret    
  42594b:	nop    DWORD PTR [rax+rax*1+0x0]
  425950:	call   406210 <memcpy@plt>
  425955:	add    r14,QWORD PTR [rbx+0x28]
  425959:	mov    QWORD PTR [rbx+0x28],r14
  42595d:	jmp    4258dc <flatcc_json_printer_int32_enum_struct_field@@Base+0x8c>
  425962:	nop    WORD PTR [rax+rax*1+0x0]
  425968:	add    rsp,0x8
  42596c:	mov    rdi,rbx
  42596f:	pop    rbx
  425970:	pop    rbp
  425971:	mov    esi,r12d
  425974:	pop    r12
  425976:	mov    rax,r13
  425979:	pop    r13
  42597b:	pop    r14
  42597d:	pop    r15
  42597f:	jmp    rax
  425981:	nop    DWORD PTR [rax+0x0]
  425988:	lea    rdx,[rax+0x1]
  42598c:	mov    QWORD PTR [rbx+0x28],rdx
  425990:	mov    BYTE PTR [rax],0xa
  425993:	movzx  eax,BYTE PTR [rbx+0x31]
  425997:	mov    rdi,QWORD PTR [rbx+0x28]
  42599b:	imul   eax,DWORD PTR [rbx+0x38]
  42599f:	movsxd rbp,eax
  4259a2:	lea    rax,[rdi+rbp*1]
  4259a6:	cmp    QWORD PTR [rbx+0x20],rax
  4259aa:	jae    4259c0 <flatcc_json_printer_int32_enum_struct_field@@Base+0x170>
  4259ac:	mov    rsi,rbp
  4259af:	mov    rdi,rbx
  4259b2:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4259b7:	mov    rax,QWORD PTR [rbx+0x28]
  4259bb:	jmp    4258a7 <flatcc_json_printer_int32_enum_struct_field@@Base+0x57>
  4259c0:	mov    rdx,rbp
  4259c3:	mov    esi,0x20
  4259c8:	call   4061c0 <memset@plt>
  4259cd:	mov    rax,QWORD PTR [rbx+0x28]
  4259d1:	add    rax,rbp
  4259d4:	mov    QWORD PTR [rbx+0x28],rax
  4259d8:	jmp    4258a7 <flatcc_json_printer_int32_enum_struct_field@@Base+0x57>
  4259dd:	nop    DWORD PTR [rax]

00000000004259e0 <flatcc_json_printer_int64_enum_struct_field@@Base>:
  4259e0:	endbr64 
  4259e4:	push   r15
  4259e6:	mov    r15,r8
  4259e9:	push   r14
  4259eb:	push   r13
  4259ed:	push   r12
  4259ef:	push   rbp
  4259f0:	push   rbx
  4259f1:	mov    rbx,rdi
  4259f4:	sub    rsp,0x8
  4259f8:	mov    r13,QWORD PTR [rsp+0x40]
  4259fd:	mov    r12,QWORD PTR [rdx+rcx*1]
  425a01:	mov    rax,QWORD PTR [rdi+0x28]
  425a05:	test   esi,esi
  425a07:	je     425a18 <flatcc_json_printer_int64_enum_struct_field@@Base+0x38>
  425a09:	lea    rdx,[rax+0x1]
  425a0d:	mov    QWORD PTR [rdi+0x28],rdx
  425a11:	mov    BYTE PTR [rax],0x2c
  425a14:	mov    rax,QWORD PTR [rdi+0x28]
  425a18:	cmp    BYTE PTR [rbx+0x31],0x0
  425a1c:	movsxd r14,r9d
  425a1f:	jne    425b18 <flatcc_json_printer_int64_enum_struct_field@@Base+0x138>
  425a25:	cmp    QWORD PTR [rbx+0x20],rax
  425a29:	ja     425a37 <flatcc_json_printer_int64_enum_struct_field@@Base+0x57>
  425a2b:	xor    esi,esi
  425a2d:	mov    rdi,rbx
  425a30:	call   QWORD PTR [rbx+0x48]
  425a33:	mov    rax,QWORD PTR [rbx+0x28]
  425a37:	mov    BYTE PTR [rax],0x22
  425a3a:	xor    edi,edi
  425a3c:	mov    rdx,r14
  425a3f:	cmp    BYTE PTR [rbx+0x32],0x0
  425a43:	sete   dil
  425a47:	add    rdi,QWORD PTR [rbx+0x28]
  425a4b:	lea    rax,[rdi+r14*1]
  425a4f:	mov    QWORD PTR [rbx+0x28],rdi
  425a53:	mov    rsi,r15
  425a56:	cmp    QWORD PTR [rbx+0x20],rax
  425a5a:	ja     425ae0 <flatcc_json_printer_int64_enum_struct_field@@Base+0x100>
  425a60:	mov    rdi,rbx
  425a63:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  425a68:	mov    r14,QWORD PTR [rbx+0x28]
  425a6c:	mov    BYTE PTR [r14],0x22
  425a70:	xor    eax,eax
  425a72:	cmp    BYTE PTR [rbx+0x32],0x0
  425a76:	sete   al
  425a79:	add    rax,QWORD PTR [rbx+0x28]
  425a7d:	lea    rdx,[rax+0x1]
  425a81:	mov    QWORD PTR [rbx+0x28],rdx
  425a85:	mov    BYTE PTR [rax],0x3a
  425a88:	xor    esi,esi
  425a8a:	mov    rax,QWORD PTR [rbx+0x28]
  425a8e:	mov    BYTE PTR [rax],0x20
  425a91:	cmp    BYTE PTR [rbx+0x31],0x0
  425a95:	setne  sil
  425a99:	add    rsi,QWORD PTR [rbx+0x28]
  425a9d:	cmp    BYTE PTR [rbx+0x33],0x0
  425aa1:	mov    QWORD PTR [rbx+0x28],rsi
  425aa5:	je     425af8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x118>
  425aa7:	mov    rbp,r12
  425aaa:	shr    rbp,0x3f
  425aae:	test   r12,r12
  425ab1:	jns    425abc <flatcc_json_printer_int64_enum_struct_field@@Base+0xdc>
  425ab3:	mov    BYTE PTR [rsi],0x2d
  425ab6:	neg    r12
  425ab9:	inc    rsi
  425abc:	mov    rdi,r12
  425abf:	call   41fc30 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  425ac4:	add    eax,ebp
  425ac6:	cdqe   
  425ac8:	add    QWORD PTR [rbx+0x28],rax
  425acc:	add    rsp,0x8
  425ad0:	pop    rbx
  425ad1:	pop    rbp
  425ad2:	pop    r12
  425ad4:	pop    r13
  425ad6:	pop    r14
  425ad8:	pop    r15
  425ada:	ret    
  425adb:	nop    DWORD PTR [rax+rax*1+0x0]
  425ae0:	call   406210 <memcpy@plt>
  425ae5:	add    r14,QWORD PTR [rbx+0x28]
  425ae9:	mov    QWORD PTR [rbx+0x28],r14
  425aed:	jmp    425a6c <flatcc_json_printer_int64_enum_struct_field@@Base+0x8c>
  425af2:	nop    WORD PTR [rax+rax*1+0x0]
  425af8:	add    rsp,0x8
  425afc:	mov    rdi,rbx
  425aff:	pop    rbx
  425b00:	pop    rbp
  425b01:	mov    rsi,r12
  425b04:	pop    r12
  425b06:	mov    rax,r13
  425b09:	pop    r13
  425b0b:	pop    r14
  425b0d:	pop    r15
  425b0f:	jmp    rax
  425b11:	nop    DWORD PTR [rax+0x0]
  425b18:	lea    rdx,[rax+0x1]
  425b1c:	mov    QWORD PTR [rbx+0x28],rdx
  425b20:	mov    BYTE PTR [rax],0xa
  425b23:	movzx  eax,BYTE PTR [rbx+0x31]
  425b27:	mov    rdi,QWORD PTR [rbx+0x28]
  425b2b:	imul   eax,DWORD PTR [rbx+0x38]
  425b2f:	movsxd rbp,eax
  425b32:	lea    rax,[rdi+rbp*1]
  425b36:	cmp    QWORD PTR [rbx+0x20],rax
  425b3a:	jae    425b50 <flatcc_json_printer_int64_enum_struct_field@@Base+0x170>
  425b3c:	mov    rsi,rbp
  425b3f:	mov    rdi,rbx
  425b42:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  425b47:	mov    rax,QWORD PTR [rbx+0x28]
  425b4b:	jmp    425a37 <flatcc_json_printer_int64_enum_struct_field@@Base+0x57>
  425b50:	mov    rdx,rbp
  425b53:	mov    esi,0x20
  425b58:	call   4061c0 <memset@plt>
  425b5d:	mov    rax,QWORD PTR [rbx+0x28]
  425b61:	add    rax,rbp
  425b64:	mov    QWORD PTR [rbx+0x28],rax
  425b68:	jmp    425a37 <flatcc_json_printer_int64_enum_struct_field@@Base+0x57>
  425b6d:	nop    DWORD PTR [rax]

0000000000425b70 <flatcc_json_printer_bool_enum_struct_field@@Base>:
  425b70:	endbr64 
  425b74:	push   r15
  425b76:	mov    r15,r8
  425b79:	push   r14
  425b7b:	push   r13
  425b7d:	push   r12
  425b7f:	push   rbp
  425b80:	push   rbx
  425b81:	mov    rbx,rdi
  425b84:	sub    rsp,0x8
  425b88:	mov    r13,QWORD PTR [rsp+0x40]
  425b8d:	movzx  r12d,BYTE PTR [rdx+rcx*1]
  425b92:	mov    rax,QWORD PTR [rdi+0x28]
  425b96:	test   esi,esi
  425b98:	je     425ba9 <flatcc_json_printer_bool_enum_struct_field@@Base+0x39>
  425b9a:	lea    rdx,[rax+0x1]
  425b9e:	mov    QWORD PTR [rdi+0x28],rdx
  425ba2:	mov    BYTE PTR [rax],0x2c
  425ba5:	mov    rax,QWORD PTR [rdi+0x28]
  425ba9:	cmp    BYTE PTR [rbx+0x31],0x0
  425bad:	movsxd r14,r9d
  425bb0:	jne    425c80 <flatcc_json_printer_bool_enum_struct_field@@Base+0x110>
  425bb6:	cmp    QWORD PTR [rbx+0x20],rax
  425bba:	ja     425bc8 <flatcc_json_printer_bool_enum_struct_field@@Base+0x58>
  425bbc:	xor    esi,esi
  425bbe:	mov    rdi,rbx
  425bc1:	call   QWORD PTR [rbx+0x48]
  425bc4:	mov    rax,QWORD PTR [rbx+0x28]
  425bc8:	mov    BYTE PTR [rax],0x22
  425bcb:	xor    edi,edi
  425bcd:	mov    rdx,r14
  425bd0:	cmp    BYTE PTR [rbx+0x32],0x0
  425bd4:	sete   dil
  425bd8:	add    rdi,QWORD PTR [rbx+0x28]
  425bdc:	lea    rax,[rdi+r14*1]
  425be0:	mov    QWORD PTR [rbx+0x28],rdi
  425be4:	mov    rsi,r15
  425be7:	cmp    QWORD PTR [rbx+0x20],rax
  425beb:	ja     425c50 <flatcc_json_printer_bool_enum_struct_field@@Base+0xe0>
  425bed:	mov    rdi,rbx
  425bf0:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  425bf5:	mov    r14,QWORD PTR [rbx+0x28]
  425bf9:	mov    BYTE PTR [r14],0x22
  425bfd:	xor    eax,eax
  425bff:	cmp    BYTE PTR [rbx+0x32],0x0
  425c03:	sete   al
  425c06:	add    rax,QWORD PTR [rbx+0x28]
  425c0a:	lea    rdx,[rax+0x1]
  425c0e:	mov    QWORD PTR [rbx+0x28],rdx
  425c12:	mov    BYTE PTR [rax],0x3a
  425c15:	xor    esi,esi
  425c17:	mov    rax,QWORD PTR [rbx+0x28]
  425c1b:	mov    BYTE PTR [rax],0x20
  425c1e:	cmp    BYTE PTR [rbx+0x31],0x0
  425c22:	setne  sil
  425c26:	add    rsi,QWORD PTR [rbx+0x28]
  425c2a:	cmp    BYTE PTR [rbx+0x33],0x0
  425c2e:	mov    QWORD PTR [rbx+0x28],rsi
  425c32:	jne    425c60 <flatcc_json_printer_bool_enum_struct_field@@Base+0xf0>
  425c34:	add    rsp,0x8
  425c38:	mov    rdi,rbx
  425c3b:	pop    rbx
  425c3c:	pop    rbp
  425c3d:	movzx  esi,r12b
  425c41:	pop    r12
  425c43:	mov    rax,r13
  425c46:	pop    r13
  425c48:	pop    r14
  425c4a:	pop    r15
  425c4c:	jmp    rax
  425c4e:	xchg   ax,ax
  425c50:	call   406210 <memcpy@plt>
  425c55:	add    r14,QWORD PTR [rbx+0x28]
  425c59:	mov    QWORD PTR [rbx+0x28],r14
  425c5d:	jmp    425bf9 <flatcc_json_printer_bool_enum_struct_field@@Base+0x89>
  425c5f:	nop
  425c60:	movzx  edi,r12b
  425c64:	call   420590 <flatcc_json_parser_struct_as_root@@Base+0xd50>
  425c69:	cdqe   
  425c6b:	add    QWORD PTR [rbx+0x28],rax
  425c6f:	add    rsp,0x8
  425c73:	pop    rbx
  425c74:	pop    rbp
  425c75:	pop    r12
  425c77:	pop    r13
  425c79:	pop    r14
  425c7b:	pop    r15
  425c7d:	ret    
  425c7e:	xchg   ax,ax
  425c80:	lea    rdx,[rax+0x1]
  425c84:	mov    QWORD PTR [rbx+0x28],rdx
  425c88:	mov    BYTE PTR [rax],0xa
  425c8b:	movzx  eax,BYTE PTR [rbx+0x31]
  425c8f:	mov    rdi,QWORD PTR [rbx+0x28]
  425c93:	imul   eax,DWORD PTR [rbx+0x38]
  425c97:	movsxd rbp,eax
  425c9a:	lea    rax,[rdi+rbp*1]
  425c9e:	cmp    QWORD PTR [rbx+0x20],rax
  425ca2:	jae    425cc0 <flatcc_json_printer_bool_enum_struct_field@@Base+0x150>
  425ca4:	mov    rsi,rbp
  425ca7:	mov    rdi,rbx
  425caa:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  425caf:	mov    rax,QWORD PTR [rbx+0x28]
  425cb3:	jmp    425bc8 <flatcc_json_printer_bool_enum_struct_field@@Base+0x58>
  425cb8:	nop    DWORD PTR [rax+rax*1+0x0]
  425cc0:	mov    rdx,rbp
  425cc3:	mov    esi,0x20
  425cc8:	call   4061c0 <memset@plt>
  425ccd:	mov    rax,QWORD PTR [rbx+0x28]
  425cd1:	add    rax,rbp
  425cd4:	mov    QWORD PTR [rbx+0x28],rax
  425cd8:	jmp    425bc8 <flatcc_json_printer_bool_enum_struct_field@@Base+0x58>
  425cdd:	nop    DWORD PTR [rax]

0000000000425ce0 <flatcc_json_printer_uint8_vector_field@@Base>:
  425ce0:	endbr64 
  425ce4:	lea    eax,[rdx+rdx*1+0x4]
  425ce8:	cmp    eax,DWORD PTR [rsi+0x10]
  425ceb:	jge    425ec0 <flatcc_json_printer_uint8_vector_field@@Base+0x1e0>
  425cf1:	push   r13
  425cf3:	push   r12
  425cf5:	push   rbp
  425cf6:	push   rbx
  425cf7:	sub    rsp,0x8
  425cfb:	mov    rdx,QWORD PTR [rsi+0x8]
  425cff:	movzx  ebp,WORD PTR [rdx+rax*1]
  425d03:	test   bp,bp
  425d06:	je     425e51 <flatcc_json_printer_uint8_vector_field@@Base+0x171>
  425d0c:	add    rbp,QWORD PTR [rsi]
  425d0f:	je     425e51 <flatcc_json_printer_uint8_vector_field@@Base+0x171>
  425d15:	mov    eax,DWORD PTR [rsi+0x18]
  425d18:	lea    edx,[rax+0x1]
  425d1b:	mov    DWORD PTR [rsi+0x18],edx
  425d1e:	test   eax,eax
  425d20:	je     425d31 <flatcc_json_printer_uint8_vector_field@@Base+0x51>
  425d22:	mov    rax,QWORD PTR [rdi+0x28]
  425d26:	lea    rdx,[rax+0x1]
  425d2a:	mov    QWORD PTR [rdi+0x28],rdx
  425d2e:	mov    BYTE PTR [rax],0x2c
  425d31:	mov    eax,DWORD PTR [rbp+0x0]
  425d34:	mov    rbx,rdi
  425d37:	add    rbp,rax
  425d3a:	movsxd rdx,r8d
  425d3d:	mov    rsi,rcx
  425d40:	mov    r12d,DWORD PTR [rbp+0x0]
  425d44:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  425d49:	mov    rax,QWORD PTR [rbx+0x28]
  425d4d:	inc    DWORD PTR [rbx+0x38]
  425d50:	lea    rdx,[rax+0x1]
  425d54:	mov    QWORD PTR [rbx+0x28],rdx
  425d58:	mov    BYTE PTR [rax],0x5b
  425d5b:	test   r12d,r12d
  425d5e:	je     425e38 <flatcc_json_printer_uint8_vector_field@@Base+0x158>
  425d64:	cmp    BYTE PTR [rbx+0x31],0x0
  425d68:	mov    rsi,QWORD PTR [rbx+0x28]
  425d6c:	jne    425e60 <flatcc_json_printer_uint8_vector_field@@Base+0x180>
  425d72:	cmp    QWORD PTR [rbx+0x20],rsi
  425d76:	ja     425d84 <flatcc_json_printer_uint8_vector_field@@Base+0xa4>
  425d78:	xor    esi,esi
  425d7a:	mov    rdi,rbx
  425d7d:	call   QWORD PTR [rbx+0x48]
  425d80:	mov    rsi,QWORD PTR [rbx+0x28]
  425d84:	movzx  edi,BYTE PTR [rbp+0x4]
  425d88:	lea    r13,[rbp+0x5]
  425d8c:	call   4205c0 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  425d91:	cdqe   
  425d93:	add    rax,QWORD PTR [rbx+0x28]
  425d97:	mov    QWORD PTR [rbx+0x28],rax
  425d9b:	lea    edx,[r12-0x2]
  425da0:	cmp    r12d,0x1
  425da4:	je     425e3c <flatcc_json_printer_uint8_vector_field@@Base+0x15c>
  425daa:	lea    rbp,[rbp+rdx*1+0x6]
  425daf:	jmp    425dea <flatcc_json_printer_uint8_vector_field@@Base+0x10a>
  425db1:	nop    DWORD PTR [rax+0x0]
  425db8:	mov    rsi,QWORD PTR [rbx+0x28]
  425dbc:	cmp    rsi,QWORD PTR [rbx+0x20]
  425dc0:	jb     425dce <flatcc_json_printer_uint8_vector_field@@Base+0xee>
  425dc2:	xor    esi,esi
  425dc4:	mov    rdi,rbx
  425dc7:	call   QWORD PTR [rbx+0x48]
  425dca:	mov    rsi,QWORD PTR [rbx+0x28]
  425dce:	movzx  edi,BYTE PTR [r13+0x0]
  425dd3:	inc    r13
  425dd6:	call   4205c0 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  425ddb:	cdqe   
  425ddd:	add    rax,QWORD PTR [rbx+0x28]
  425de1:	mov    QWORD PTR [rbx+0x28],rax
  425de5:	cmp    r13,rbp
  425de8:	je     425e3c <flatcc_json_printer_uint8_vector_field@@Base+0x15c>
  425dea:	lea    rdx,[rax+0x1]
  425dee:	mov    QWORD PTR [rbx+0x28],rdx
  425df2:	mov    BYTE PTR [rax],0x2c
  425df5:	cmp    BYTE PTR [rbx+0x31],0x0
  425df9:	je     425db8 <flatcc_json_printer_uint8_vector_field@@Base+0xd8>
  425dfb:	mov    rax,QWORD PTR [rbx+0x28]
  425dff:	lea    rdx,[rax+0x1]
  425e03:	mov    QWORD PTR [rbx+0x28],rdx
  425e07:	mov    BYTE PTR [rax],0xa
  425e0a:	movzx  esi,BYTE PTR [rbx+0x31]
  425e0e:	mov    rdi,QWORD PTR [rbx+0x28]
  425e12:	imul   esi,DWORD PTR [rbx+0x38]
  425e16:	movsxd r12,esi
  425e19:	lea    rax,[rdi+r12*1]
  425e1d:	cmp    QWORD PTR [rbx+0x20],rax
  425e21:	jae    425ea0 <flatcc_json_printer_uint8_vector_field@@Base+0x1c0>
  425e23:	mov    rsi,r12
  425e26:	mov    rdi,rbx
  425e29:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  425e2e:	mov    rsi,QWORD PTR [rbx+0x28]
  425e32:	jmp    425dce <flatcc_json_printer_uint8_vector_field@@Base+0xee>
  425e34:	nop    DWORD PTR [rax+0x0]
  425e38:	mov    rax,QWORD PTR [rbx+0x28]
  425e3c:	cmp    BYTE PTR [rbx+0x31],0x0
  425e40:	lea    rdx,[rax+0x1]
  425e44:	jne    425ec8 <flatcc_json_printer_uint8_vector_field@@Base+0x1e8>
  425e4a:	mov    QWORD PTR [rbx+0x28],rdx
  425e4e:	mov    BYTE PTR [rax],0x5d
  425e51:	add    rsp,0x8
  425e55:	pop    rbx
  425e56:	pop    rbp
  425e57:	pop    r12
  425e59:	pop    r13
  425e5b:	ret    
  425e5c:	nop    DWORD PTR [rax+0x0]
  425e60:	lea    rax,[rsi+0x1]
  425e64:	mov    QWORD PTR [rbx+0x28],rax
  425e68:	mov    BYTE PTR [rsi],0xa
  425e6b:	movzx  esi,BYTE PTR [rbx+0x31]
  425e6f:	mov    rdi,QWORD PTR [rbx+0x28]
  425e73:	imul   esi,DWORD PTR [rbx+0x38]
  425e77:	movsxd r13,esi
  425e7a:	lea    rax,[rdi+r13*1]
  425e7e:	cmp    QWORD PTR [rbx+0x20],rax
  425e82:	jae    425f2d <flatcc_json_printer_uint8_vector_field@@Base+0x24d>
  425e88:	mov    rsi,r13
  425e8b:	mov    rdi,rbx
  425e8e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  425e93:	mov    rsi,QWORD PTR [rbx+0x28]
  425e97:	jmp    425d84 <flatcc_json_printer_uint8_vector_field@@Base+0xa4>
  425e9c:	nop    DWORD PTR [rax+0x0]
  425ea0:	mov    esi,0x20
  425ea5:	mov    rdx,r12
  425ea8:	call   4061c0 <memset@plt>
  425ead:	mov    rsi,QWORD PTR [rbx+0x28]
  425eb1:	add    rsi,r12
  425eb4:	mov    QWORD PTR [rbx+0x28],rsi
  425eb8:	jmp    425dce <flatcc_json_printer_uint8_vector_field@@Base+0xee>
  425ebd:	nop    DWORD PTR [rax]
  425ec0:	ret    
  425ec1:	nop    DWORD PTR [rax+0x0]
  425ec8:	mov    QWORD PTR [rbx+0x28],rdx
  425ecc:	mov    BYTE PTR [rax],0xa
  425ecf:	mov    eax,DWORD PTR [rbx+0x38]
  425ed2:	mov    rdi,QWORD PTR [rbx+0x28]
  425ed6:	lea    ebp,[rax-0x1]
  425ed9:	movzx  eax,BYTE PTR [rbx+0x31]
  425edd:	mov    DWORD PTR [rbx+0x38],ebp
  425ee0:	imul   eax,ebp
  425ee3:	movsxd rbp,eax
  425ee6:	lea    rax,[rdi+rbp*1]
  425eea:	cmp    QWORD PTR [rbx+0x20],rax
  425eee:	jae    425f10 <flatcc_json_printer_uint8_vector_field@@Base+0x230>
  425ef0:	mov    rsi,rbp
  425ef3:	mov    rdi,rbx
  425ef6:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  425efb:	mov    rax,QWORD PTR [rbx+0x28]
  425eff:	lea    rdx,[rax+0x1]
  425f03:	jmp    425e4a <flatcc_json_printer_uint8_vector_field@@Base+0x16a>
  425f08:	nop    DWORD PTR [rax+rax*1+0x0]
  425f10:	mov    rdx,rbp
  425f13:	mov    esi,0x20
  425f18:	call   4061c0 <memset@plt>
  425f1d:	mov    rax,QWORD PTR [rbx+0x28]
  425f21:	add    rax,rbp
  425f24:	lea    rdx,[rax+0x1]
  425f28:	jmp    425e4a <flatcc_json_printer_uint8_vector_field@@Base+0x16a>
  425f2d:	mov    esi,0x20
  425f32:	mov    rdx,r13
  425f35:	call   4061c0 <memset@plt>
  425f3a:	mov    rsi,QWORD PTR [rbx+0x28]
  425f3e:	add    rsi,r13
  425f41:	mov    QWORD PTR [rbx+0x28],rsi
  425f45:	jmp    425d84 <flatcc_json_printer_uint8_vector_field@@Base+0xa4>
  425f4a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000425f50 <flatcc_json_printer_utype_vector_field@@Base>:
  425f50:	endbr64 
  425f54:	jmp    425ce0 <flatcc_json_printer_uint8_vector_field@@Base>
  425f59:	nop    DWORD PTR [rax+0x0]

0000000000425f60 <flatcc_json_printer_uint16_vector_field@@Base>:
  425f60:	endbr64 
  425f64:	lea    eax,[rdx+rdx*1+0x4]
  425f68:	cmp    eax,DWORD PTR [rsi+0x10]
  425f6b:	jge    426140 <flatcc_json_printer_uint16_vector_field@@Base+0x1e0>
  425f71:	push   r13
  425f73:	push   r12
  425f75:	push   rbp
  425f76:	push   rbx
  425f77:	sub    rsp,0x8
  425f7b:	mov    rdx,QWORD PTR [rsi+0x8]
  425f7f:	movzx  ebp,WORD PTR [rdx+rax*1]
  425f83:	test   bp,bp
  425f86:	je     4260d1 <flatcc_json_printer_uint16_vector_field@@Base+0x171>
  425f8c:	add    rbp,QWORD PTR [rsi]
  425f8f:	je     4260d1 <flatcc_json_printer_uint16_vector_field@@Base+0x171>
  425f95:	mov    eax,DWORD PTR [rsi+0x18]
  425f98:	lea    edx,[rax+0x1]
  425f9b:	mov    DWORD PTR [rsi+0x18],edx
  425f9e:	test   eax,eax
  425fa0:	je     425fb1 <flatcc_json_printer_uint16_vector_field@@Base+0x51>
  425fa2:	mov    rax,QWORD PTR [rdi+0x28]
  425fa6:	lea    rdx,[rax+0x1]
  425faa:	mov    QWORD PTR [rdi+0x28],rdx
  425fae:	mov    BYTE PTR [rax],0x2c
  425fb1:	mov    eax,DWORD PTR [rbp+0x0]
  425fb4:	mov    rbx,rdi
  425fb7:	add    rbp,rax
  425fba:	movsxd rdx,r8d
  425fbd:	mov    rsi,rcx
  425fc0:	mov    r12d,DWORD PTR [rbp+0x0]
  425fc4:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  425fc9:	mov    rax,QWORD PTR [rbx+0x28]
  425fcd:	inc    DWORD PTR [rbx+0x38]
  425fd0:	lea    rdx,[rax+0x1]
  425fd4:	mov    QWORD PTR [rbx+0x28],rdx
  425fd8:	mov    BYTE PTR [rax],0x5b
  425fdb:	test   r12d,r12d
  425fde:	je     4260b8 <flatcc_json_printer_uint16_vector_field@@Base+0x158>
  425fe4:	cmp    BYTE PTR [rbx+0x31],0x0
  425fe8:	mov    rsi,QWORD PTR [rbx+0x28]
  425fec:	jne    4260e0 <flatcc_json_printer_uint16_vector_field@@Base+0x180>
  425ff2:	cmp    QWORD PTR [rbx+0x20],rsi
  425ff6:	ja     426004 <flatcc_json_printer_uint16_vector_field@@Base+0xa4>
  425ff8:	xor    esi,esi
  425ffa:	mov    rdi,rbx
  425ffd:	call   QWORD PTR [rbx+0x48]
  426000:	mov    rsi,QWORD PTR [rbx+0x28]
  426004:	movzx  edi,WORD PTR [rbp+0x4]
  426008:	lea    r13,[rbp+0x6]
  42600c:	call   41f850 <flatcc_json_parser_struct_as_root@@Base+0x10>
  426011:	cdqe   
  426013:	add    rax,QWORD PTR [rbx+0x28]
  426017:	mov    QWORD PTR [rbx+0x28],rax
  42601b:	lea    edx,[r12-0x2]
  426020:	cmp    r12d,0x1
  426024:	je     4260bc <flatcc_json_printer_uint16_vector_field@@Base+0x15c>
  42602a:	lea    rbp,[rbp+rdx*2+0x8]
  42602f:	jmp    42606b <flatcc_json_printer_uint16_vector_field@@Base+0x10b>
  426031:	nop    DWORD PTR [rax+0x0]
  426038:	mov    rsi,QWORD PTR [rbx+0x28]
  42603c:	cmp    rsi,QWORD PTR [rbx+0x20]
  426040:	jb     42604e <flatcc_json_printer_uint16_vector_field@@Base+0xee>
  426042:	xor    esi,esi
  426044:	mov    rdi,rbx
  426047:	call   QWORD PTR [rbx+0x48]
  42604a:	mov    rsi,QWORD PTR [rbx+0x28]
  42604e:	movzx  edi,WORD PTR [r13+0x0]
  426053:	add    r13,0x2
  426057:	call   41f850 <flatcc_json_parser_struct_as_root@@Base+0x10>
  42605c:	cdqe   
  42605e:	add    rax,QWORD PTR [rbx+0x28]
  426062:	mov    QWORD PTR [rbx+0x28],rax
  426066:	cmp    r13,rbp
  426069:	je     4260bc <flatcc_json_printer_uint16_vector_field@@Base+0x15c>
  42606b:	lea    rdx,[rax+0x1]
  42606f:	mov    QWORD PTR [rbx+0x28],rdx
  426073:	mov    BYTE PTR [rax],0x2c
  426076:	cmp    BYTE PTR [rbx+0x31],0x0
  42607a:	je     426038 <flatcc_json_printer_uint16_vector_field@@Base+0xd8>
  42607c:	mov    rax,QWORD PTR [rbx+0x28]
  426080:	lea    rdx,[rax+0x1]
  426084:	mov    QWORD PTR [rbx+0x28],rdx
  426088:	mov    BYTE PTR [rax],0xa
  42608b:	movzx  esi,BYTE PTR [rbx+0x31]
  42608f:	mov    rdi,QWORD PTR [rbx+0x28]
  426093:	imul   esi,DWORD PTR [rbx+0x38]
  426097:	movsxd r12,esi
  42609a:	lea    rax,[rdi+r12*1]
  42609e:	cmp    QWORD PTR [rbx+0x20],rax
  4260a2:	jae    426120 <flatcc_json_printer_uint16_vector_field@@Base+0x1c0>
  4260a4:	mov    rsi,r12
  4260a7:	mov    rdi,rbx
  4260aa:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4260af:	mov    rsi,QWORD PTR [rbx+0x28]
  4260b3:	jmp    42604e <flatcc_json_printer_uint16_vector_field@@Base+0xee>
  4260b5:	nop    DWORD PTR [rax]
  4260b8:	mov    rax,QWORD PTR [rbx+0x28]
  4260bc:	cmp    BYTE PTR [rbx+0x31],0x0
  4260c0:	lea    rdx,[rax+0x1]
  4260c4:	jne    426148 <flatcc_json_printer_uint16_vector_field@@Base+0x1e8>
  4260ca:	mov    QWORD PTR [rbx+0x28],rdx
  4260ce:	mov    BYTE PTR [rax],0x5d
  4260d1:	add    rsp,0x8
  4260d5:	pop    rbx
  4260d6:	pop    rbp
  4260d7:	pop    r12
  4260d9:	pop    r13
  4260db:	ret    
  4260dc:	nop    DWORD PTR [rax+0x0]
  4260e0:	lea    rax,[rsi+0x1]
  4260e4:	mov    QWORD PTR [rbx+0x28],rax
  4260e8:	mov    BYTE PTR [rsi],0xa
  4260eb:	movzx  esi,BYTE PTR [rbx+0x31]
  4260ef:	mov    rdi,QWORD PTR [rbx+0x28]
  4260f3:	imul   esi,DWORD PTR [rbx+0x38]
  4260f7:	movsxd r13,esi
  4260fa:	lea    rax,[rdi+r13*1]
  4260fe:	cmp    QWORD PTR [rbx+0x20],rax
  426102:	jae    4261ad <flatcc_json_printer_uint16_vector_field@@Base+0x24d>
  426108:	mov    rsi,r13
  42610b:	mov    rdi,rbx
  42610e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426113:	mov    rsi,QWORD PTR [rbx+0x28]
  426117:	jmp    426004 <flatcc_json_printer_uint16_vector_field@@Base+0xa4>
  42611c:	nop    DWORD PTR [rax+0x0]
  426120:	mov    esi,0x20
  426125:	mov    rdx,r12
  426128:	call   4061c0 <memset@plt>
  42612d:	mov    rsi,QWORD PTR [rbx+0x28]
  426131:	add    rsi,r12
  426134:	mov    QWORD PTR [rbx+0x28],rsi
  426138:	jmp    42604e <flatcc_json_printer_uint16_vector_field@@Base+0xee>
  42613d:	nop    DWORD PTR [rax]
  426140:	ret    
  426141:	nop    DWORD PTR [rax+0x0]
  426148:	mov    QWORD PTR [rbx+0x28],rdx
  42614c:	mov    BYTE PTR [rax],0xa
  42614f:	mov    eax,DWORD PTR [rbx+0x38]
  426152:	mov    rdi,QWORD PTR [rbx+0x28]
  426156:	lea    ebp,[rax-0x1]
  426159:	movzx  eax,BYTE PTR [rbx+0x31]
  42615d:	mov    DWORD PTR [rbx+0x38],ebp
  426160:	imul   eax,ebp
  426163:	movsxd rbp,eax
  426166:	lea    rax,[rdi+rbp*1]
  42616a:	cmp    QWORD PTR [rbx+0x20],rax
  42616e:	jae    426190 <flatcc_json_printer_uint16_vector_field@@Base+0x230>
  426170:	mov    rsi,rbp
  426173:	mov    rdi,rbx
  426176:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42617b:	mov    rax,QWORD PTR [rbx+0x28]
  42617f:	lea    rdx,[rax+0x1]
  426183:	jmp    4260ca <flatcc_json_printer_uint16_vector_field@@Base+0x16a>
  426188:	nop    DWORD PTR [rax+rax*1+0x0]
  426190:	mov    rdx,rbp
  426193:	mov    esi,0x20
  426198:	call   4061c0 <memset@plt>
  42619d:	mov    rax,QWORD PTR [rbx+0x28]
  4261a1:	add    rax,rbp
  4261a4:	lea    rdx,[rax+0x1]
  4261a8:	jmp    4260ca <flatcc_json_printer_uint16_vector_field@@Base+0x16a>
  4261ad:	mov    esi,0x20
  4261b2:	mov    rdx,r13
  4261b5:	call   4061c0 <memset@plt>
  4261ba:	mov    rsi,QWORD PTR [rbx+0x28]
  4261be:	add    rsi,r13
  4261c1:	mov    QWORD PTR [rbx+0x28],rsi
  4261c5:	jmp    426004 <flatcc_json_printer_uint16_vector_field@@Base+0xa4>
  4261ca:	nop    WORD PTR [rax+rax*1+0x0]

00000000004261d0 <flatcc_json_printer_uint32_vector_field@@Base>:
  4261d0:	endbr64 
  4261d4:	lea    eax,[rdx+rdx*1+0x4]
  4261d8:	cmp    eax,DWORD PTR [rsi+0x10]
  4261db:	jge    426328 <flatcc_json_printer_uint32_vector_field@@Base+0x158>
  4261e1:	mov    rdx,QWORD PTR [rsi+0x8]
  4261e5:	movzx  eax,WORD PTR [rdx+rax*1]
  4261e9:	test   ax,ax
  4261ec:	je     426328 <flatcc_json_printer_uint32_vector_field@@Base+0x158>
  4261f2:	add    rax,QWORD PTR [rsi]
  4261f5:	je     426328 <flatcc_json_printer_uint32_vector_field@@Base+0x158>
  4261fb:	push   r13
  4261fd:	push   r12
  4261ff:	push   rbp
  426200:	push   rbx
  426201:	sub    rsp,0x8
  426205:	mov    edx,DWORD PTR [rsi+0x18]
  426208:	lea    r9d,[rdx+0x1]
  42620c:	mov    DWORD PTR [rsi+0x18],r9d
  426210:	test   edx,edx
  426212:	je     426223 <flatcc_json_printer_uint32_vector_field@@Base+0x53>
  426214:	mov    rdx,QWORD PTR [rdi+0x28]
  426218:	lea    rsi,[rdx+0x1]
  42621c:	mov    QWORD PTR [rdi+0x28],rsi
  426220:	mov    BYTE PTR [rdx],0x2c
  426223:	mov    r12d,DWORD PTR [rax]
  426226:	mov    rbx,rdi
  426229:	add    r12,rax
  42622c:	movsxd rdx,r8d
  42622f:	mov    rsi,rcx
  426232:	mov    ebp,DWORD PTR [r12]
  426236:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  42623b:	mov    rax,QWORD PTR [rbx+0x28]
  42623f:	inc    DWORD PTR [rbx+0x38]
  426242:	lea    rdx,[rax+0x1]
  426246:	mov    QWORD PTR [rbx+0x28],rdx
  42624a:	mov    BYTE PTR [rax],0x5b
  42624d:	test   ebp,ebp
  42624f:	je     426330 <flatcc_json_printer_uint32_vector_field@@Base+0x160>
  426255:	cmp    BYTE PTR [rbx+0x31],0x0
  426259:	mov    rsi,QWORD PTR [rbx+0x28]
  42625d:	jne    426350 <flatcc_json_printer_uint32_vector_field@@Base+0x180>
  426263:	cmp    QWORD PTR [rbx+0x20],rsi
  426267:	ja     426275 <flatcc_json_printer_uint32_vector_field@@Base+0xa5>
  426269:	xor    esi,esi
  42626b:	mov    rdi,rbx
  42626e:	call   QWORD PTR [rbx+0x48]
  426271:	mov    rsi,QWORD PTR [rbx+0x28]
  426275:	mov    edi,DWORD PTR [r12+0x4]
  42627a:	lea    r13,[r12+0x8]
  42627f:	call   41f980 <flatcc_json_parser_struct_as_root@@Base+0x140>
  426284:	cdqe   
  426286:	add    rax,QWORD PTR [rbx+0x28]
  42628a:	mov    QWORD PTR [rbx+0x28],rax
  42628e:	lea    edx,[rbp-0x2]
  426291:	cmp    ebp,0x1
  426294:	je     426334 <flatcc_json_printer_uint32_vector_field@@Base+0x164>
  42629a:	lea    rbp,[r12+rdx*4+0xc]
  42629f:	jmp    4262da <flatcc_json_printer_uint32_vector_field@@Base+0x10a>
  4262a1:	nop    DWORD PTR [rax+0x0]
  4262a8:	mov    rsi,QWORD PTR [rbx+0x28]
  4262ac:	cmp    rsi,QWORD PTR [rbx+0x20]
  4262b0:	jb     4262be <flatcc_json_printer_uint32_vector_field@@Base+0xee>
  4262b2:	xor    esi,esi
  4262b4:	mov    rdi,rbx
  4262b7:	call   QWORD PTR [rbx+0x48]
  4262ba:	mov    rsi,QWORD PTR [rbx+0x28]
  4262be:	mov    edi,DWORD PTR [r13+0x0]
  4262c2:	add    r13,0x4
  4262c6:	call   41f980 <flatcc_json_parser_struct_as_root@@Base+0x140>
  4262cb:	cdqe   
  4262cd:	add    rax,QWORD PTR [rbx+0x28]
  4262d1:	mov    QWORD PTR [rbx+0x28],rax
  4262d5:	cmp    r13,rbp
  4262d8:	je     426334 <flatcc_json_printer_uint32_vector_field@@Base+0x164>
  4262da:	lea    rdx,[rax+0x1]
  4262de:	mov    QWORD PTR [rbx+0x28],rdx
  4262e2:	mov    BYTE PTR [rax],0x2c
  4262e5:	cmp    BYTE PTR [rbx+0x31],0x0
  4262e9:	je     4262a8 <flatcc_json_printer_uint32_vector_field@@Base+0xd8>
  4262eb:	mov    rax,QWORD PTR [rbx+0x28]
  4262ef:	lea    rdx,[rax+0x1]
  4262f3:	mov    QWORD PTR [rbx+0x28],rdx
  4262f7:	mov    BYTE PTR [rax],0xa
  4262fa:	movzx  esi,BYTE PTR [rbx+0x31]
  4262fe:	mov    rdi,QWORD PTR [rbx+0x28]
  426302:	imul   esi,DWORD PTR [rbx+0x38]
  426306:	movsxd r12,esi
  426309:	lea    rax,[rdi+r12*1]
  42630d:	cmp    QWORD PTR [rbx+0x20],rax
  426311:	jae    426390 <flatcc_json_printer_uint32_vector_field@@Base+0x1c0>
  426313:	mov    rsi,r12
  426316:	mov    rdi,rbx
  426319:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42631e:	mov    rsi,QWORD PTR [rbx+0x28]
  426322:	jmp    4262be <flatcc_json_printer_uint32_vector_field@@Base+0xee>
  426324:	nop    DWORD PTR [rax+0x0]
  426328:	ret    
  426329:	nop    DWORD PTR [rax+0x0]
  426330:	mov    rax,QWORD PTR [rbx+0x28]
  426334:	cmp    BYTE PTR [rbx+0x31],0x0
  426338:	lea    rdx,[rax+0x1]
  42633c:	jne    4263b0 <flatcc_json_printer_uint32_vector_field@@Base+0x1e0>
  42633e:	mov    QWORD PTR [rbx+0x28],rdx
  426342:	mov    BYTE PTR [rax],0x5d
  426345:	add    rsp,0x8
  426349:	pop    rbx
  42634a:	pop    rbp
  42634b:	pop    r12
  42634d:	pop    r13
  42634f:	ret    
  426350:	lea    rax,[rsi+0x1]
  426354:	mov    QWORD PTR [rbx+0x28],rax
  426358:	mov    BYTE PTR [rsi],0xa
  42635b:	movzx  esi,BYTE PTR [rbx+0x31]
  42635f:	mov    rdi,QWORD PTR [rbx+0x28]
  426363:	imul   esi,DWORD PTR [rbx+0x38]
  426367:	movsxd r13,esi
  42636a:	lea    rax,[rdi+r13*1]
  42636e:	cmp    QWORD PTR [rbx+0x20],rax
  426372:	jae    42640d <flatcc_json_printer_uint32_vector_field@@Base+0x23d>
  426378:	mov    rsi,r13
  42637b:	mov    rdi,rbx
  42637e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426383:	mov    rsi,QWORD PTR [rbx+0x28]
  426387:	jmp    426275 <flatcc_json_printer_uint32_vector_field@@Base+0xa5>
  42638c:	nop    DWORD PTR [rax+0x0]
  426390:	mov    esi,0x20
  426395:	mov    rdx,r12
  426398:	call   4061c0 <memset@plt>
  42639d:	mov    rsi,QWORD PTR [rbx+0x28]
  4263a1:	add    rsi,r12
  4263a4:	mov    QWORD PTR [rbx+0x28],rsi
  4263a8:	jmp    4262be <flatcc_json_printer_uint32_vector_field@@Base+0xee>
  4263ad:	nop    DWORD PTR [rax]
  4263b0:	mov    QWORD PTR [rbx+0x28],rdx
  4263b4:	mov    BYTE PTR [rax],0xa
  4263b7:	mov    eax,DWORD PTR [rbx+0x38]
  4263ba:	mov    rdi,QWORD PTR [rbx+0x28]
  4263be:	lea    ebp,[rax-0x1]
  4263c1:	movzx  eax,BYTE PTR [rbx+0x31]
  4263c5:	mov    DWORD PTR [rbx+0x38],ebp
  4263c8:	imul   eax,ebp
  4263cb:	movsxd rbp,eax
  4263ce:	lea    rax,[rdi+rbp*1]
  4263d2:	cmp    QWORD PTR [rbx+0x20],rax
  4263d6:	jae    4263f0 <flatcc_json_printer_uint32_vector_field@@Base+0x220>
  4263d8:	mov    rsi,rbp
  4263db:	mov    rdi,rbx
  4263de:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4263e3:	mov    rax,QWORD PTR [rbx+0x28]
  4263e7:	lea    rdx,[rax+0x1]
  4263eb:	jmp    42633e <flatcc_json_printer_uint32_vector_field@@Base+0x16e>
  4263f0:	mov    rdx,rbp
  4263f3:	mov    esi,0x20
  4263f8:	call   4061c0 <memset@plt>
  4263fd:	mov    rax,QWORD PTR [rbx+0x28]
  426401:	add    rax,rbp
  426404:	lea    rdx,[rax+0x1]
  426408:	jmp    42633e <flatcc_json_printer_uint32_vector_field@@Base+0x16e>
  42640d:	mov    esi,0x20
  426412:	mov    rdx,r13
  426415:	call   4061c0 <memset@plt>
  42641a:	mov    rsi,QWORD PTR [rbx+0x28]
  42641e:	add    rsi,r13
  426421:	mov    QWORD PTR [rbx+0x28],rsi
  426425:	jmp    426275 <flatcc_json_printer_uint32_vector_field@@Base+0xa5>
  42642a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000426430 <flatcc_json_printer_uint64_vector_field@@Base>:
  426430:	endbr64 
  426434:	lea    eax,[rdx+rdx*1+0x4]
  426438:	cmp    eax,DWORD PTR [rsi+0x10]
  42643b:	jge    426588 <flatcc_json_printer_uint64_vector_field@@Base+0x158>
  426441:	mov    rdx,QWORD PTR [rsi+0x8]
  426445:	movzx  eax,WORD PTR [rdx+rax*1]
  426449:	test   ax,ax
  42644c:	je     426588 <flatcc_json_printer_uint64_vector_field@@Base+0x158>
  426452:	add    rax,QWORD PTR [rsi]
  426455:	je     426588 <flatcc_json_printer_uint64_vector_field@@Base+0x158>
  42645b:	push   r13
  42645d:	push   r12
  42645f:	push   rbp
  426460:	push   rbx
  426461:	sub    rsp,0x8
  426465:	mov    edx,DWORD PTR [rsi+0x18]
  426468:	lea    r9d,[rdx+0x1]
  42646c:	mov    DWORD PTR [rsi+0x18],r9d
  426470:	test   edx,edx
  426472:	je     426483 <flatcc_json_printer_uint64_vector_field@@Base+0x53>
  426474:	mov    rdx,QWORD PTR [rdi+0x28]
  426478:	lea    rsi,[rdx+0x1]
  42647c:	mov    QWORD PTR [rdi+0x28],rsi
  426480:	mov    BYTE PTR [rdx],0x2c
  426483:	mov    r12d,DWORD PTR [rax]
  426486:	mov    rbx,rdi
  426489:	add    r12,rax
  42648c:	movsxd rdx,r8d
  42648f:	mov    rsi,rcx
  426492:	mov    ebp,DWORD PTR [r12]
  426496:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  42649b:	mov    rax,QWORD PTR [rbx+0x28]
  42649f:	inc    DWORD PTR [rbx+0x38]
  4264a2:	lea    rdx,[rax+0x1]
  4264a6:	mov    QWORD PTR [rbx+0x28],rdx
  4264aa:	mov    BYTE PTR [rax],0x5b
  4264ad:	test   ebp,ebp
  4264af:	je     426590 <flatcc_json_printer_uint64_vector_field@@Base+0x160>
  4264b5:	cmp    BYTE PTR [rbx+0x31],0x0
  4264b9:	mov    rsi,QWORD PTR [rbx+0x28]
  4264bd:	jne    4265b0 <flatcc_json_printer_uint64_vector_field@@Base+0x180>
  4264c3:	cmp    QWORD PTR [rbx+0x20],rsi
  4264c7:	ja     4264d5 <flatcc_json_printer_uint64_vector_field@@Base+0xa5>
  4264c9:	xor    esi,esi
  4264cb:	mov    rdi,rbx
  4264ce:	call   QWORD PTR [rbx+0x48]
  4264d1:	mov    rsi,QWORD PTR [rbx+0x28]
  4264d5:	mov    rdi,QWORD PTR [r12+0x4]
  4264da:	lea    r13,[r12+0xc]
  4264df:	call   41fc30 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  4264e4:	cdqe   
  4264e6:	add    rax,QWORD PTR [rbx+0x28]
  4264ea:	mov    QWORD PTR [rbx+0x28],rax
  4264ee:	lea    edx,[rbp-0x2]
  4264f1:	cmp    ebp,0x1
  4264f4:	je     426594 <flatcc_json_printer_uint64_vector_field@@Base+0x164>
  4264fa:	lea    rbp,[r12+rdx*8+0x14]
  4264ff:	jmp    42653a <flatcc_json_printer_uint64_vector_field@@Base+0x10a>
  426501:	nop    DWORD PTR [rax+0x0]
  426508:	mov    rsi,QWORD PTR [rbx+0x28]
  42650c:	cmp    rsi,QWORD PTR [rbx+0x20]
  426510:	jb     42651e <flatcc_json_printer_uint64_vector_field@@Base+0xee>
  426512:	xor    esi,esi
  426514:	mov    rdi,rbx
  426517:	call   QWORD PTR [rbx+0x48]
  42651a:	mov    rsi,QWORD PTR [rbx+0x28]
  42651e:	mov    rdi,QWORD PTR [r13+0x0]
  426522:	add    r13,0x8
  426526:	call   41fc30 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  42652b:	cdqe   
  42652d:	add    rax,QWORD PTR [rbx+0x28]
  426531:	mov    QWORD PTR [rbx+0x28],rax
  426535:	cmp    r13,rbp
  426538:	je     426594 <flatcc_json_printer_uint64_vector_field@@Base+0x164>
  42653a:	lea    rdx,[rax+0x1]
  42653e:	mov    QWORD PTR [rbx+0x28],rdx
  426542:	mov    BYTE PTR [rax],0x2c
  426545:	cmp    BYTE PTR [rbx+0x31],0x0
  426549:	je     426508 <flatcc_json_printer_uint64_vector_field@@Base+0xd8>
  42654b:	mov    rax,QWORD PTR [rbx+0x28]
  42654f:	lea    rdx,[rax+0x1]
  426553:	mov    QWORD PTR [rbx+0x28],rdx
  426557:	mov    BYTE PTR [rax],0xa
  42655a:	movzx  esi,BYTE PTR [rbx+0x31]
  42655e:	mov    rdi,QWORD PTR [rbx+0x28]
  426562:	imul   esi,DWORD PTR [rbx+0x38]
  426566:	movsxd r12,esi
  426569:	lea    rax,[rdi+r12*1]
  42656d:	cmp    QWORD PTR [rbx+0x20],rax
  426571:	jae    4265f0 <flatcc_json_printer_uint64_vector_field@@Base+0x1c0>
  426573:	mov    rsi,r12
  426576:	mov    rdi,rbx
  426579:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42657e:	mov    rsi,QWORD PTR [rbx+0x28]
  426582:	jmp    42651e <flatcc_json_printer_uint64_vector_field@@Base+0xee>
  426584:	nop    DWORD PTR [rax+0x0]
  426588:	ret    
  426589:	nop    DWORD PTR [rax+0x0]
  426590:	mov    rax,QWORD PTR [rbx+0x28]
  426594:	cmp    BYTE PTR [rbx+0x31],0x0
  426598:	lea    rdx,[rax+0x1]
  42659c:	jne    426610 <flatcc_json_printer_uint64_vector_field@@Base+0x1e0>
  42659e:	mov    QWORD PTR [rbx+0x28],rdx
  4265a2:	mov    BYTE PTR [rax],0x5d
  4265a5:	add    rsp,0x8
  4265a9:	pop    rbx
  4265aa:	pop    rbp
  4265ab:	pop    r12
  4265ad:	pop    r13
  4265af:	ret    
  4265b0:	lea    rax,[rsi+0x1]
  4265b4:	mov    QWORD PTR [rbx+0x28],rax
  4265b8:	mov    BYTE PTR [rsi],0xa
  4265bb:	movzx  esi,BYTE PTR [rbx+0x31]
  4265bf:	mov    rdi,QWORD PTR [rbx+0x28]
  4265c3:	imul   esi,DWORD PTR [rbx+0x38]
  4265c7:	movsxd r13,esi
  4265ca:	lea    rax,[rdi+r13*1]
  4265ce:	cmp    QWORD PTR [rbx+0x20],rax
  4265d2:	jae    42666d <flatcc_json_printer_uint64_vector_field@@Base+0x23d>
  4265d8:	mov    rsi,r13
  4265db:	mov    rdi,rbx
  4265de:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4265e3:	mov    rsi,QWORD PTR [rbx+0x28]
  4265e7:	jmp    4264d5 <flatcc_json_printer_uint64_vector_field@@Base+0xa5>
  4265ec:	nop    DWORD PTR [rax+0x0]
  4265f0:	mov    esi,0x20
  4265f5:	mov    rdx,r12
  4265f8:	call   4061c0 <memset@plt>
  4265fd:	mov    rsi,QWORD PTR [rbx+0x28]
  426601:	add    rsi,r12
  426604:	mov    QWORD PTR [rbx+0x28],rsi
  426608:	jmp    42651e <flatcc_json_printer_uint64_vector_field@@Base+0xee>
  42660d:	nop    DWORD PTR [rax]
  426610:	mov    QWORD PTR [rbx+0x28],rdx
  426614:	mov    BYTE PTR [rax],0xa
  426617:	mov    eax,DWORD PTR [rbx+0x38]
  42661a:	mov    rdi,QWORD PTR [rbx+0x28]
  42661e:	lea    ebp,[rax-0x1]
  426621:	movzx  eax,BYTE PTR [rbx+0x31]
  426625:	mov    DWORD PTR [rbx+0x38],ebp
  426628:	imul   eax,ebp
  42662b:	movsxd rbp,eax
  42662e:	lea    rax,[rdi+rbp*1]
  426632:	cmp    QWORD PTR [rbx+0x20],rax
  426636:	jae    426650 <flatcc_json_printer_uint64_vector_field@@Base+0x220>
  426638:	mov    rsi,rbp
  42663b:	mov    rdi,rbx
  42663e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426643:	mov    rax,QWORD PTR [rbx+0x28]
  426647:	lea    rdx,[rax+0x1]
  42664b:	jmp    42659e <flatcc_json_printer_uint64_vector_field@@Base+0x16e>
  426650:	mov    rdx,rbp
  426653:	mov    esi,0x20
  426658:	call   4061c0 <memset@plt>
  42665d:	mov    rax,QWORD PTR [rbx+0x28]
  426661:	add    rax,rbp
  426664:	lea    rdx,[rax+0x1]
  426668:	jmp    42659e <flatcc_json_printer_uint64_vector_field@@Base+0x16e>
  42666d:	mov    esi,0x20
  426672:	mov    rdx,r13
  426675:	call   4061c0 <memset@plt>
  42667a:	mov    rsi,QWORD PTR [rbx+0x28]
  42667e:	add    rsi,r13
  426681:	mov    QWORD PTR [rbx+0x28],rsi
  426685:	jmp    4264d5 <flatcc_json_printer_uint64_vector_field@@Base+0xa5>
  42668a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000426690 <flatcc_json_printer_int8_vector_field@@Base>:
  426690:	endbr64 
  426694:	lea    eax,[rdx+rdx*1+0x4]
  426698:	cmp    eax,DWORD PTR [rsi+0x10]
  42669b:	jge    426820 <flatcc_json_printer_int8_vector_field@@Base+0x190>
  4266a1:	mov    rdx,QWORD PTR [rsi+0x8]
  4266a5:	movzx  eax,WORD PTR [rdx+rax*1]
  4266a9:	test   ax,ax
  4266ac:	je     426820 <flatcc_json_printer_int8_vector_field@@Base+0x190>
  4266b2:	add    rax,QWORD PTR [rsi]
  4266b5:	je     426820 <flatcc_json_printer_int8_vector_field@@Base+0x190>
  4266bb:	push   r13
  4266bd:	push   r12
  4266bf:	push   rbp
  4266c0:	push   rbx
  4266c1:	sub    rsp,0x8
  4266c5:	mov    edx,DWORD PTR [rsi+0x18]
  4266c8:	lea    r9d,[rdx+0x1]
  4266cc:	mov    DWORD PTR [rsi+0x18],r9d
  4266d0:	test   edx,edx
  4266d2:	je     4266e3 <flatcc_json_printer_int8_vector_field@@Base+0x53>
  4266d4:	mov    rdx,QWORD PTR [rdi+0x28]
  4266d8:	lea    rsi,[rdx+0x1]
  4266dc:	mov    QWORD PTR [rdi+0x28],rsi
  4266e0:	mov    BYTE PTR [rdx],0x2c
  4266e3:	mov    r12d,DWORD PTR [rax]
  4266e6:	mov    rbp,rdi
  4266e9:	add    r12,rax
  4266ec:	movsxd rdx,r8d
  4266ef:	mov    rsi,rcx
  4266f2:	mov    ebx,DWORD PTR [r12]
  4266f6:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  4266fb:	mov    rax,QWORD PTR [rbp+0x28]
  4266ff:	inc    DWORD PTR [rbp+0x38]
  426702:	lea    rdx,[rax+0x1]
  426706:	mov    QWORD PTR [rbp+0x28],rdx
  42670a:	mov    BYTE PTR [rax],0x5b
  42670d:	test   ebx,ebx
  42670f:	je     426828 <flatcc_json_printer_int8_vector_field@@Base+0x198>
  426715:	cmp    BYTE PTR [rbp+0x31],0x0
  426719:	mov    rsi,QWORD PTR [rbp+0x28]
  42671d:	jne    426850 <flatcc_json_printer_int8_vector_field@@Base+0x1c0>
  426723:	cmp    QWORD PTR [rbp+0x20],rsi
  426727:	ja     426735 <flatcc_json_printer_int8_vector_field@@Base+0xa5>
  426729:	xor    esi,esi
  42672b:	mov    rdi,rbp
  42672e:	call   QWORD PTR [rbp+0x48]
  426731:	mov    rsi,QWORD PTR [rbp+0x28]
  426735:	movsx  r8d,BYTE PTR [r12+0x4]
  42673b:	mov    edi,r8d
  42673e:	shr    r8d,0x1f
  426742:	test   dil,dil
  426745:	jns    42674f <flatcc_json_printer_int8_vector_field@@Base+0xbf>
  426747:	mov    BYTE PTR [rsi],0x2d
  42674a:	neg    edi
  42674c:	inc    rsi
  42674f:	movzx  edi,dil
  426753:	call   4205c0 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  426758:	add    eax,r8d
  42675b:	cdqe   
  42675d:	add    rax,QWORD PTR [rbp+0x28]
  426761:	mov    QWORD PTR [rbp+0x28],rax
  426765:	lea    r13,[r12+0x5]
  42676a:	lea    edx,[rbx-0x2]
  42676d:	cmp    ebx,0x1
  426770:	je     42682c <flatcc_json_printer_int8_vector_field@@Base+0x19c>
  426776:	lea    rbx,[r12+rdx*1+0x6]
  42677b:	jmp    4267cd <flatcc_json_printer_int8_vector_field@@Base+0x13d>
  42677d:	nop    DWORD PTR [rax]
  426780:	mov    rsi,QWORD PTR [rbp+0x28]
  426784:	cmp    rsi,QWORD PTR [rbp+0x20]
  426788:	jb     426796 <flatcc_json_printer_int8_vector_field@@Base+0x106>
  42678a:	xor    esi,esi
  42678c:	mov    rdi,rbp
  42678f:	call   QWORD PTR [rbp+0x48]
  426792:	mov    rsi,QWORD PTR [rbp+0x28]
  426796:	movsx  r8d,BYTE PTR [r13+0x0]
  42679b:	mov    edi,r8d
  42679e:	shr    r8d,0x1f
  4267a2:	test   dil,dil
  4267a5:	jns    4267af <flatcc_json_printer_int8_vector_field@@Base+0x11f>
  4267a7:	mov    BYTE PTR [rsi],0x2d
  4267aa:	neg    edi
  4267ac:	inc    rsi
  4267af:	movzx  edi,dil
  4267b3:	call   4205c0 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  4267b8:	add    eax,r8d
  4267bb:	cdqe   
  4267bd:	add    rax,QWORD PTR [rbp+0x28]
  4267c1:	inc    r13
  4267c4:	mov    QWORD PTR [rbp+0x28],rax
  4267c8:	cmp    rbx,r13
  4267cb:	je     42682c <flatcc_json_printer_int8_vector_field@@Base+0x19c>
  4267cd:	lea    rdx,[rax+0x1]
  4267d1:	mov    QWORD PTR [rbp+0x28],rdx
  4267d5:	mov    BYTE PTR [rax],0x2c
  4267d8:	cmp    BYTE PTR [rbp+0x31],0x0
  4267dc:	je     426780 <flatcc_json_printer_int8_vector_field@@Base+0xf0>
  4267de:	mov    rax,QWORD PTR [rbp+0x28]
  4267e2:	lea    rdx,[rax+0x1]
  4267e6:	mov    QWORD PTR [rbp+0x28],rdx
  4267ea:	mov    BYTE PTR [rax],0xa
  4267ed:	movzx  esi,BYTE PTR [rbp+0x31]
  4267f1:	mov    rdi,QWORD PTR [rbp+0x28]
  4267f5:	imul   esi,DWORD PTR [rbp+0x38]
  4267f9:	movsxd r12,esi
  4267fc:	lea    rax,[rdi+r12*1]
  426800:	cmp    QWORD PTR [rbp+0x20],rax
  426804:	jae    426870 <flatcc_json_printer_int8_vector_field@@Base+0x1e0>
  426806:	mov    rsi,r12
  426809:	mov    rdi,rbp
  42680c:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426811:	mov    rsi,QWORD PTR [rbp+0x28]
  426815:	jmp    426796 <flatcc_json_printer_int8_vector_field@@Base+0x106>
  42681a:	nop    WORD PTR [rax+rax*1+0x0]
  426820:	ret    
  426821:	nop    DWORD PTR [rax+0x0]
  426828:	mov    rax,QWORD PTR [rbp+0x28]
  42682c:	cmp    BYTE PTR [rbp+0x31],0x0
  426830:	lea    rdx,[rax+0x1]
  426834:	jne    426890 <flatcc_json_printer_int8_vector_field@@Base+0x200>
  426836:	mov    QWORD PTR [rbp+0x28],rdx
  42683a:	mov    BYTE PTR [rax],0x5d
  42683d:	add    rsp,0x8
  426841:	pop    rbx
  426842:	pop    rbp
  426843:	pop    r12
  426845:	pop    r13
  426847:	ret    
  426848:	nop    DWORD PTR [rax+rax*1+0x0]
  426850:	lea    rax,[rsi+0x1]
  426854:	mov    QWORD PTR [rbp+0x28],rax
  426858:	mov    BYTE PTR [rsi],0xa
  42685b:	mov    rdi,rbp
  42685e:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  426863:	mov    rsi,QWORD PTR [rbp+0x28]
  426867:	jmp    426735 <flatcc_json_printer_int8_vector_field@@Base+0xa5>
  42686c:	nop    DWORD PTR [rax+0x0]
  426870:	mov    esi,0x20
  426875:	mov    rdx,r12
  426878:	call   4061c0 <memset@plt>
  42687d:	mov    rsi,QWORD PTR [rbp+0x28]
  426881:	add    rsi,r12
  426884:	mov    QWORD PTR [rbp+0x28],rsi
  426888:	jmp    426796 <flatcc_json_printer_int8_vector_field@@Base+0x106>
  42688d:	nop    DWORD PTR [rax]
  426890:	mov    QWORD PTR [rbp+0x28],rdx
  426894:	mov    BYTE PTR [rax],0xa
  426897:	mov    eax,DWORD PTR [rbp+0x38]
  42689a:	mov    rdi,QWORD PTR [rbp+0x28]
  42689e:	lea    ebx,[rax-0x1]
  4268a1:	movzx  eax,BYTE PTR [rbp+0x31]
  4268a5:	mov    DWORD PTR [rbp+0x38],ebx
  4268a8:	imul   eax,ebx
  4268ab:	movsxd rbx,eax
  4268ae:	lea    rax,[rdi+rbx*1]
  4268b2:	cmp    QWORD PTR [rbp+0x20],rax
  4268b6:	jae    4268d0 <flatcc_json_printer_int8_vector_field@@Base+0x240>
  4268b8:	mov    rsi,rbx
  4268bb:	mov    rdi,rbp
  4268be:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4268c3:	mov    rax,QWORD PTR [rbp+0x28]
  4268c7:	lea    rdx,[rax+0x1]
  4268cb:	jmp    426836 <flatcc_json_printer_int8_vector_field@@Base+0x1a6>
  4268d0:	mov    rdx,rbx
  4268d3:	mov    esi,0x20
  4268d8:	call   4061c0 <memset@plt>
  4268dd:	mov    rax,QWORD PTR [rbp+0x28]
  4268e1:	add    rax,rbx
  4268e4:	lea    rdx,[rax+0x1]
  4268e8:	jmp    426836 <flatcc_json_printer_int8_vector_field@@Base+0x1a6>
  4268ed:	nop    DWORD PTR [rax]

00000000004268f0 <flatcc_json_printer_int16_vector_field@@Base>:
  4268f0:	endbr64 
  4268f4:	lea    eax,[rdx+rdx*1+0x4]
  4268f8:	cmp    eax,DWORD PTR [rsi+0x10]
  4268fb:	jge    426a80 <flatcc_json_printer_int16_vector_field@@Base+0x190>
  426901:	mov    rdx,QWORD PTR [rsi+0x8]
  426905:	movzx  eax,WORD PTR [rdx+rax*1]
  426909:	test   ax,ax
  42690c:	je     426a80 <flatcc_json_printer_int16_vector_field@@Base+0x190>
  426912:	add    rax,QWORD PTR [rsi]
  426915:	je     426a80 <flatcc_json_printer_int16_vector_field@@Base+0x190>
  42691b:	push   r13
  42691d:	push   r12
  42691f:	push   rbp
  426920:	push   rbx
  426921:	sub    rsp,0x8
  426925:	mov    edx,DWORD PTR [rsi+0x18]
  426928:	lea    r9d,[rdx+0x1]
  42692c:	mov    DWORD PTR [rsi+0x18],r9d
  426930:	test   edx,edx
  426932:	je     426943 <flatcc_json_printer_int16_vector_field@@Base+0x53>
  426934:	mov    rdx,QWORD PTR [rdi+0x28]
  426938:	lea    rsi,[rdx+0x1]
  42693c:	mov    QWORD PTR [rdi+0x28],rsi
  426940:	mov    BYTE PTR [rdx],0x2c
  426943:	mov    r12d,DWORD PTR [rax]
  426946:	mov    rbp,rdi
  426949:	add    r12,rax
  42694c:	movsxd rdx,r8d
  42694f:	mov    rsi,rcx
  426952:	mov    ebx,DWORD PTR [r12]
  426956:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  42695b:	mov    rax,QWORD PTR [rbp+0x28]
  42695f:	inc    DWORD PTR [rbp+0x38]
  426962:	lea    rdx,[rax+0x1]
  426966:	mov    QWORD PTR [rbp+0x28],rdx
  42696a:	mov    BYTE PTR [rax],0x5b
  42696d:	test   ebx,ebx
  42696f:	je     426a88 <flatcc_json_printer_int16_vector_field@@Base+0x198>
  426975:	cmp    BYTE PTR [rbp+0x31],0x0
  426979:	mov    rsi,QWORD PTR [rbp+0x28]
  42697d:	jne    426ab0 <flatcc_json_printer_int16_vector_field@@Base+0x1c0>
  426983:	cmp    QWORD PTR [rbp+0x20],rsi
  426987:	ja     426995 <flatcc_json_printer_int16_vector_field@@Base+0xa5>
  426989:	xor    esi,esi
  42698b:	mov    rdi,rbp
  42698e:	call   QWORD PTR [rbp+0x48]
  426991:	mov    rsi,QWORD PTR [rbp+0x28]
  426995:	movsx  r11d,WORD PTR [r12+0x4]
  42699b:	mov    edi,r11d
  42699e:	shr    r11d,0x1f
  4269a2:	test   di,di
  4269a5:	jns    4269af <flatcc_json_printer_int16_vector_field@@Base+0xbf>
  4269a7:	mov    BYTE PTR [rsi],0x2d
  4269aa:	neg    edi
  4269ac:	inc    rsi
  4269af:	movzx  edi,di
  4269b2:	call   41f850 <flatcc_json_parser_struct_as_root@@Base+0x10>
  4269b7:	add    eax,r11d
  4269ba:	cdqe   
  4269bc:	add    rax,QWORD PTR [rbp+0x28]
  4269c0:	mov    QWORD PTR [rbp+0x28],rax
  4269c4:	lea    r13,[r12+0x6]
  4269c9:	lea    edx,[rbx-0x2]
  4269cc:	cmp    ebx,0x1
  4269cf:	je     426a8c <flatcc_json_printer_int16_vector_field@@Base+0x19c>
  4269d5:	lea    rbx,[r12+rdx*2+0x8]
  4269da:	jmp    426a2d <flatcc_json_printer_int16_vector_field@@Base+0x13d>
  4269dc:	nop    DWORD PTR [rax+0x0]
  4269e0:	mov    rsi,QWORD PTR [rbp+0x28]
  4269e4:	cmp    rsi,QWORD PTR [rbp+0x20]
  4269e8:	jb     4269f6 <flatcc_json_printer_int16_vector_field@@Base+0x106>
  4269ea:	xor    esi,esi
  4269ec:	mov    rdi,rbp
  4269ef:	call   QWORD PTR [rbp+0x48]
  4269f2:	mov    rsi,QWORD PTR [rbp+0x28]
  4269f6:	movsx  r11d,WORD PTR [r13+0x0]
  4269fb:	mov    edi,r11d
  4269fe:	shr    r11d,0x1f
  426a02:	test   di,di
  426a05:	jns    426a0f <flatcc_json_printer_int16_vector_field@@Base+0x11f>
  426a07:	mov    BYTE PTR [rsi],0x2d
  426a0a:	neg    edi
  426a0c:	inc    rsi
  426a0f:	movzx  edi,di
  426a12:	call   41f850 <flatcc_json_parser_struct_as_root@@Base+0x10>
  426a17:	add    eax,r11d
  426a1a:	cdqe   
  426a1c:	add    rax,QWORD PTR [rbp+0x28]
  426a20:	add    r13,0x2
  426a24:	mov    QWORD PTR [rbp+0x28],rax
  426a28:	cmp    r13,rbx
  426a2b:	je     426a8c <flatcc_json_printer_int16_vector_field@@Base+0x19c>
  426a2d:	lea    rdx,[rax+0x1]
  426a31:	mov    QWORD PTR [rbp+0x28],rdx
  426a35:	mov    BYTE PTR [rax],0x2c
  426a38:	cmp    BYTE PTR [rbp+0x31],0x0
  426a3c:	je     4269e0 <flatcc_json_printer_int16_vector_field@@Base+0xf0>
  426a3e:	mov    rax,QWORD PTR [rbp+0x28]
  426a42:	lea    rdx,[rax+0x1]
  426a46:	mov    QWORD PTR [rbp+0x28],rdx
  426a4a:	mov    BYTE PTR [rax],0xa
  426a4d:	movzx  esi,BYTE PTR [rbp+0x31]
  426a51:	mov    rdi,QWORD PTR [rbp+0x28]
  426a55:	imul   esi,DWORD PTR [rbp+0x38]
  426a59:	movsxd r12,esi
  426a5c:	lea    rax,[rdi+r12*1]
  426a60:	cmp    QWORD PTR [rbp+0x20],rax
  426a64:	jae    426ad0 <flatcc_json_printer_int16_vector_field@@Base+0x1e0>
  426a66:	mov    rsi,r12
  426a69:	mov    rdi,rbp
  426a6c:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426a71:	mov    rsi,QWORD PTR [rbp+0x28]
  426a75:	jmp    4269f6 <flatcc_json_printer_int16_vector_field@@Base+0x106>
  426a7a:	nop    WORD PTR [rax+rax*1+0x0]
  426a80:	ret    
  426a81:	nop    DWORD PTR [rax+0x0]
  426a88:	mov    rax,QWORD PTR [rbp+0x28]
  426a8c:	cmp    BYTE PTR [rbp+0x31],0x0
  426a90:	lea    rdx,[rax+0x1]
  426a94:	jne    426af0 <flatcc_json_printer_int16_vector_field@@Base+0x200>
  426a96:	mov    QWORD PTR [rbp+0x28],rdx
  426a9a:	mov    BYTE PTR [rax],0x5d
  426a9d:	add    rsp,0x8
  426aa1:	pop    rbx
  426aa2:	pop    rbp
  426aa3:	pop    r12
  426aa5:	pop    r13
  426aa7:	ret    
  426aa8:	nop    DWORD PTR [rax+rax*1+0x0]
  426ab0:	lea    rax,[rsi+0x1]
  426ab4:	mov    QWORD PTR [rbp+0x28],rax
  426ab8:	mov    BYTE PTR [rsi],0xa
  426abb:	mov    rdi,rbp
  426abe:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  426ac3:	mov    rsi,QWORD PTR [rbp+0x28]
  426ac7:	jmp    426995 <flatcc_json_printer_int16_vector_field@@Base+0xa5>
  426acc:	nop    DWORD PTR [rax+0x0]
  426ad0:	mov    esi,0x20
  426ad5:	mov    rdx,r12
  426ad8:	call   4061c0 <memset@plt>
  426add:	mov    rsi,QWORD PTR [rbp+0x28]
  426ae1:	add    rsi,r12
  426ae4:	mov    QWORD PTR [rbp+0x28],rsi
  426ae8:	jmp    4269f6 <flatcc_json_printer_int16_vector_field@@Base+0x106>
  426aed:	nop    DWORD PTR [rax]
  426af0:	mov    QWORD PTR [rbp+0x28],rdx
  426af4:	mov    BYTE PTR [rax],0xa
  426af7:	mov    eax,DWORD PTR [rbp+0x38]
  426afa:	mov    rdi,QWORD PTR [rbp+0x28]
  426afe:	lea    ebx,[rax-0x1]
  426b01:	movzx  eax,BYTE PTR [rbp+0x31]
  426b05:	mov    DWORD PTR [rbp+0x38],ebx
  426b08:	imul   eax,ebx
  426b0b:	movsxd rbx,eax
  426b0e:	lea    rax,[rdi+rbx*1]
  426b12:	cmp    QWORD PTR [rbp+0x20],rax
  426b16:	jae    426b30 <flatcc_json_printer_int16_vector_field@@Base+0x240>
  426b18:	mov    rsi,rbx
  426b1b:	mov    rdi,rbp
  426b1e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426b23:	mov    rax,QWORD PTR [rbp+0x28]
  426b27:	lea    rdx,[rax+0x1]
  426b2b:	jmp    426a96 <flatcc_json_printer_int16_vector_field@@Base+0x1a6>
  426b30:	mov    rdx,rbx
  426b33:	mov    esi,0x20
  426b38:	call   4061c0 <memset@plt>
  426b3d:	mov    rax,QWORD PTR [rbp+0x28]
  426b41:	add    rax,rbx
  426b44:	lea    rdx,[rax+0x1]
  426b48:	jmp    426a96 <flatcc_json_printer_int16_vector_field@@Base+0x1a6>
  426b4d:	nop    DWORD PTR [rax]

0000000000426b50 <flatcc_json_printer_int32_vector_field@@Base>:
  426b50:	endbr64 
  426b54:	lea    eax,[rdx+rdx*1+0x4]
  426b58:	cmp    eax,DWORD PTR [rsi+0x10]
  426b5b:	jge    426d30 <flatcc_json_printer_int32_vector_field@@Base+0x1e0>
  426b61:	push   r14
  426b63:	push   r13
  426b65:	push   r12
  426b67:	push   rbp
  426b68:	push   rbx
  426b69:	mov    rdx,QWORD PTR [rsi+0x8]
  426b6d:	movzx  r12d,WORD PTR [rdx+rax*1]
  426b72:	test   r12w,r12w
  426b76:	je     426ce5 <flatcc_json_printer_int32_vector_field@@Base+0x195>
  426b7c:	add    r12,QWORD PTR [rsi]
  426b7f:	je     426ce5 <flatcc_json_printer_int32_vector_field@@Base+0x195>
  426b85:	mov    eax,DWORD PTR [rsi+0x18]
  426b88:	lea    edx,[rax+0x1]
  426b8b:	mov    DWORD PTR [rsi+0x18],edx
  426b8e:	test   eax,eax
  426b90:	je     426ba1 <flatcc_json_printer_int32_vector_field@@Base+0x51>
  426b92:	mov    rax,QWORD PTR [rdi+0x28]
  426b96:	lea    rdx,[rax+0x1]
  426b9a:	mov    QWORD PTR [rdi+0x28],rdx
  426b9e:	mov    BYTE PTR [rax],0x2c
  426ba1:	mov    eax,DWORD PTR [r12]
  426ba5:	mov    rbx,rdi
  426ba8:	add    r12,rax
  426bab:	movsxd rdx,r8d
  426bae:	mov    rsi,rcx
  426bb1:	mov    r13d,DWORD PTR [r12]
  426bb5:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  426bba:	mov    rax,QWORD PTR [rbx+0x28]
  426bbe:	inc    DWORD PTR [rbx+0x38]
  426bc1:	lea    rdx,[rax+0x1]
  426bc5:	mov    QWORD PTR [rbx+0x28],rdx
  426bc9:	mov    BYTE PTR [rax],0x5b
  426bcc:	test   r13d,r13d
  426bcf:	je     426cd0 <flatcc_json_printer_int32_vector_field@@Base+0x180>
  426bd5:	cmp    BYTE PTR [rbx+0x31],0x0
  426bd9:	mov    rsi,QWORD PTR [rbx+0x28]
  426bdd:	jne    426cf0 <flatcc_json_printer_int32_vector_field@@Base+0x1a0>
  426be3:	cmp    QWORD PTR [rbx+0x20],rsi
  426be7:	ja     426bf5 <flatcc_json_printer_int32_vector_field@@Base+0xa5>
  426be9:	xor    esi,esi
  426beb:	mov    rdi,rbx
  426bee:	call   QWORD PTR [rbx+0x48]
  426bf1:	mov    rsi,QWORD PTR [rbx+0x28]
  426bf5:	mov    edi,DWORD PTR [r12+0x4]
  426bfa:	mov    ebp,edi
  426bfc:	shr    ebp,0x1f
  426bff:	test   edi,edi
  426c01:	jns    426c0b <flatcc_json_printer_int32_vector_field@@Base+0xbb>
  426c03:	mov    BYTE PTR [rsi],0x2d
  426c06:	neg    edi
  426c08:	inc    rsi
  426c0b:	call   41f980 <flatcc_json_parser_struct_as_root@@Base+0x140>
  426c10:	add    eax,ebp
  426c12:	cdqe   
  426c14:	add    rax,QWORD PTR [rbx+0x28]
  426c18:	mov    QWORD PTR [rbx+0x28],rax
  426c1c:	lea    r14,[r12+0x8]
  426c21:	lea    edx,[r13-0x2]
  426c25:	cmp    r13d,0x1
  426c29:	je     426cd4 <flatcc_json_printer_int32_vector_field@@Base+0x184>
  426c2f:	lea    r12,[r12+rdx*4+0xc]
  426c34:	jmp    426c84 <flatcc_json_printer_int32_vector_field@@Base+0x134>
  426c36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  426c40:	mov    rsi,QWORD PTR [rbx+0x28]
  426c44:	cmp    rsi,QWORD PTR [rbx+0x20]
  426c48:	jb     426c56 <flatcc_json_printer_int32_vector_field@@Base+0x106>
  426c4a:	xor    esi,esi
  426c4c:	mov    rdi,rbx
  426c4f:	call   QWORD PTR [rbx+0x48]
  426c52:	mov    rsi,QWORD PTR [rbx+0x28]
  426c56:	mov    edi,DWORD PTR [r14]
  426c59:	mov    ebp,edi
  426c5b:	shr    ebp,0x1f
  426c5e:	test   edi,edi
  426c60:	jns    426c6a <flatcc_json_printer_int32_vector_field@@Base+0x11a>
  426c62:	mov    BYTE PTR [rsi],0x2d
  426c65:	neg    edi
  426c67:	inc    rsi
  426c6a:	call   41f980 <flatcc_json_parser_struct_as_root@@Base+0x140>
  426c6f:	add    eax,ebp
  426c71:	cdqe   
  426c73:	add    rax,QWORD PTR [rbx+0x28]
  426c77:	add    r14,0x4
  426c7b:	mov    QWORD PTR [rbx+0x28],rax
  426c7f:	cmp    r14,r12
  426c82:	je     426cd4 <flatcc_json_printer_int32_vector_field@@Base+0x184>
  426c84:	lea    rdx,[rax+0x1]
  426c88:	mov    QWORD PTR [rbx+0x28],rdx
  426c8c:	mov    BYTE PTR [rax],0x2c
  426c8f:	cmp    BYTE PTR [rbx+0x31],0x0
  426c93:	je     426c40 <flatcc_json_printer_int32_vector_field@@Base+0xf0>
  426c95:	mov    rax,QWORD PTR [rbx+0x28]
  426c99:	lea    rdx,[rax+0x1]
  426c9d:	mov    QWORD PTR [rbx+0x28],rdx
  426ca1:	mov    BYTE PTR [rax],0xa
  426ca4:	movzx  esi,BYTE PTR [rbx+0x31]
  426ca8:	mov    rdi,QWORD PTR [rbx+0x28]
  426cac:	imul   esi,DWORD PTR [rbx+0x38]
  426cb0:	movsxd rbp,esi
  426cb3:	lea    rax,[rdi+rbp*1]
  426cb7:	cmp    QWORD PTR [rbx+0x20],rax
  426cbb:	jae    426d10 <flatcc_json_printer_int32_vector_field@@Base+0x1c0>
  426cbd:	mov    rsi,rbp
  426cc0:	mov    rdi,rbx
  426cc3:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426cc8:	mov    rsi,QWORD PTR [rbx+0x28]
  426ccc:	jmp    426c56 <flatcc_json_printer_int32_vector_field@@Base+0x106>
  426cce:	xchg   ax,ax
  426cd0:	mov    rax,QWORD PTR [rbx+0x28]
  426cd4:	cmp    BYTE PTR [rbx+0x31],0x0
  426cd8:	lea    rdx,[rax+0x1]
  426cdc:	jne    426d38 <flatcc_json_printer_int32_vector_field@@Base+0x1e8>
  426cde:	mov    QWORD PTR [rbx+0x28],rdx
  426ce2:	mov    BYTE PTR [rax],0x5d
  426ce5:	pop    rbx
  426ce6:	pop    rbp
  426ce7:	pop    r12
  426ce9:	pop    r13
  426ceb:	pop    r14
  426ced:	ret    
  426cee:	xchg   ax,ax
  426cf0:	lea    rax,[rsi+0x1]
  426cf4:	mov    QWORD PTR [rbx+0x28],rax
  426cf8:	mov    BYTE PTR [rsi],0xa
  426cfb:	mov    rdi,rbx
  426cfe:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  426d03:	mov    rsi,QWORD PTR [rbx+0x28]
  426d07:	jmp    426bf5 <flatcc_json_printer_int32_vector_field@@Base+0xa5>
  426d0c:	nop    DWORD PTR [rax+0x0]
  426d10:	mov    esi,0x20
  426d15:	mov    rdx,rbp
  426d18:	call   4061c0 <memset@plt>
  426d1d:	mov    rsi,QWORD PTR [rbx+0x28]
  426d21:	add    rsi,rbp
  426d24:	mov    QWORD PTR [rbx+0x28],rsi
  426d28:	jmp    426c56 <flatcc_json_printer_int32_vector_field@@Base+0x106>
  426d2d:	nop    DWORD PTR [rax]
  426d30:	ret    
  426d31:	nop    DWORD PTR [rax+0x0]
  426d38:	mov    QWORD PTR [rbx+0x28],rdx
  426d3c:	mov    BYTE PTR [rax],0xa
  426d3f:	mov    eax,DWORD PTR [rbx+0x38]
  426d42:	mov    rdi,QWORD PTR [rbx+0x28]
  426d46:	lea    ebp,[rax-0x1]
  426d49:	movzx  eax,BYTE PTR [rbx+0x31]
  426d4d:	mov    DWORD PTR [rbx+0x38],ebp
  426d50:	imul   eax,ebp
  426d53:	movsxd rbp,eax
  426d56:	lea    rax,[rdi+rbp*1]
  426d5a:	cmp    QWORD PTR [rbx+0x20],rax
  426d5e:	jae    426d80 <flatcc_json_printer_int32_vector_field@@Base+0x230>
  426d60:	mov    rsi,rbp
  426d63:	mov    rdi,rbx
  426d66:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426d6b:	mov    rax,QWORD PTR [rbx+0x28]
  426d6f:	lea    rdx,[rax+0x1]
  426d73:	jmp    426cde <flatcc_json_printer_int32_vector_field@@Base+0x18e>
  426d78:	nop    DWORD PTR [rax+rax*1+0x0]
  426d80:	mov    rdx,rbp
  426d83:	mov    esi,0x20
  426d88:	call   4061c0 <memset@plt>
  426d8d:	mov    rax,QWORD PTR [rbx+0x28]
  426d91:	add    rax,rbp
  426d94:	lea    rdx,[rax+0x1]
  426d98:	jmp    426cde <flatcc_json_printer_int32_vector_field@@Base+0x18e>
  426d9d:	nop    DWORD PTR [rax]

0000000000426da0 <flatcc_json_printer_int64_vector_field@@Base>:
  426da0:	endbr64 
  426da4:	lea    eax,[rdx+rdx*1+0x4]
  426da8:	cmp    eax,DWORD PTR [rsi+0x10]
  426dab:	jge    426f90 <flatcc_json_printer_int64_vector_field@@Base+0x1f0>
  426db1:	push   r13
  426db3:	push   r12
  426db5:	push   rbp
  426db6:	push   rbx
  426db7:	sub    rsp,0x8
  426dbb:	mov    rdx,QWORD PTR [rsi+0x8]
  426dbf:	movzx  ebp,WORD PTR [rdx+rax*1]
  426dc3:	test   bp,bp
  426dc6:	je     426f3d <flatcc_json_printer_int64_vector_field@@Base+0x19d>
  426dcc:	add    rbp,QWORD PTR [rsi]
  426dcf:	je     426f3d <flatcc_json_printer_int64_vector_field@@Base+0x19d>
  426dd5:	mov    eax,DWORD PTR [rsi+0x18]
  426dd8:	lea    edx,[rax+0x1]
  426ddb:	mov    DWORD PTR [rsi+0x18],edx
  426dde:	test   eax,eax
  426de0:	je     426df1 <flatcc_json_printer_int64_vector_field@@Base+0x51>
  426de2:	mov    rax,QWORD PTR [rdi+0x28]
  426de6:	lea    rdx,[rax+0x1]
  426dea:	mov    QWORD PTR [rdi+0x28],rdx
  426dee:	mov    BYTE PTR [rax],0x2c
  426df1:	mov    eax,DWORD PTR [rbp+0x0]
  426df4:	mov    rbx,rdi
  426df7:	add    rbp,rax
  426dfa:	movsxd rdx,r8d
  426dfd:	mov    rsi,rcx
  426e00:	mov    r12d,DWORD PTR [rbp+0x0]
  426e04:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  426e09:	mov    rax,QWORD PTR [rbx+0x28]
  426e0d:	inc    DWORD PTR [rbx+0x38]
  426e10:	lea    rdx,[rax+0x1]
  426e14:	mov    QWORD PTR [rbx+0x28],rdx
  426e18:	mov    BYTE PTR [rax],0x5b
  426e1b:	test   r12d,r12d
  426e1e:	je     426f28 <flatcc_json_printer_int64_vector_field@@Base+0x188>
  426e24:	cmp    BYTE PTR [rbx+0x31],0x0
  426e28:	mov    rsi,QWORD PTR [rbx+0x28]
  426e2c:	jne    426f50 <flatcc_json_printer_int64_vector_field@@Base+0x1b0>
  426e32:	cmp    QWORD PTR [rbx+0x20],rsi
  426e36:	ja     426e44 <flatcc_json_printer_int64_vector_field@@Base+0xa4>
  426e38:	xor    esi,esi
  426e3a:	mov    rdi,rbx
  426e3d:	call   QWORD PTR [rbx+0x48]
  426e40:	mov    rsi,QWORD PTR [rbx+0x28]
  426e44:	mov    rdi,QWORD PTR [rbp+0x4]
  426e48:	mov    r13,rdi
  426e4b:	shr    r13,0x3f
  426e4f:	test   rdi,rdi
  426e52:	jns    426e5d <flatcc_json_printer_int64_vector_field@@Base+0xbd>
  426e54:	mov    BYTE PTR [rsi],0x2d
  426e57:	neg    rdi
  426e5a:	inc    rsi
  426e5d:	call   41fc30 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  426e62:	add    eax,r13d
  426e65:	cdqe   
  426e67:	add    rax,QWORD PTR [rbx+0x28]
  426e6b:	mov    QWORD PTR [rbx+0x28],rax
  426e6f:	lea    r13,[rbp+0xc]
  426e73:	lea    edx,[r12-0x2]
  426e78:	cmp    r12d,0x1
  426e7c:	je     426f2c <flatcc_json_printer_int64_vector_field@@Base+0x18c>
  426e82:	lea    rbp,[rbp+rdx*8+0x14]
  426e87:	jmp    426eda <flatcc_json_printer_int64_vector_field@@Base+0x13a>
  426e89:	nop    DWORD PTR [rax+0x0]
  426e90:	mov    rsi,QWORD PTR [rbx+0x28]
  426e94:	cmp    rsi,QWORD PTR [rbx+0x20]
  426e98:	jb     426ea6 <flatcc_json_printer_int64_vector_field@@Base+0x106>
  426e9a:	xor    esi,esi
  426e9c:	mov    rdi,rbx
  426e9f:	call   QWORD PTR [rbx+0x48]
  426ea2:	mov    rsi,QWORD PTR [rbx+0x28]
  426ea6:	mov    rdi,QWORD PTR [r13+0x0]
  426eaa:	mov    r12,rdi
  426ead:	shr    r12,0x3f
  426eb1:	test   rdi,rdi
  426eb4:	jns    426ebf <flatcc_json_printer_int64_vector_field@@Base+0x11f>
  426eb6:	mov    BYTE PTR [rsi],0x2d
  426eb9:	neg    rdi
  426ebc:	inc    rsi
  426ebf:	call   41fc30 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  426ec4:	add    eax,r12d
  426ec7:	cdqe   
  426ec9:	add    rax,QWORD PTR [rbx+0x28]
  426ecd:	add    r13,0x8
  426ed1:	mov    QWORD PTR [rbx+0x28],rax
  426ed5:	cmp    r13,rbp
  426ed8:	je     426f2c <flatcc_json_printer_int64_vector_field@@Base+0x18c>
  426eda:	lea    rdx,[rax+0x1]
  426ede:	mov    QWORD PTR [rbx+0x28],rdx
  426ee2:	mov    BYTE PTR [rax],0x2c
  426ee5:	cmp    BYTE PTR [rbx+0x31],0x0
  426ee9:	je     426e90 <flatcc_json_printer_int64_vector_field@@Base+0xf0>
  426eeb:	mov    rax,QWORD PTR [rbx+0x28]
  426eef:	lea    rdx,[rax+0x1]
  426ef3:	mov    QWORD PTR [rbx+0x28],rdx
  426ef7:	mov    BYTE PTR [rax],0xa
  426efa:	movzx  esi,BYTE PTR [rbx+0x31]
  426efe:	mov    rdi,QWORD PTR [rbx+0x28]
  426f02:	imul   esi,DWORD PTR [rbx+0x38]
  426f06:	movsxd r12,esi
  426f09:	lea    rax,[rdi+r12*1]
  426f0d:	cmp    QWORD PTR [rbx+0x20],rax
  426f11:	jae    426f70 <flatcc_json_printer_int64_vector_field@@Base+0x1d0>
  426f13:	mov    rsi,r12
  426f16:	mov    rdi,rbx
  426f19:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426f1e:	mov    rsi,QWORD PTR [rbx+0x28]
  426f22:	jmp    426ea6 <flatcc_json_printer_int64_vector_field@@Base+0x106>
  426f24:	nop    DWORD PTR [rax+0x0]
  426f28:	mov    rax,QWORD PTR [rbx+0x28]
  426f2c:	cmp    BYTE PTR [rbx+0x31],0x0
  426f30:	lea    rdx,[rax+0x1]
  426f34:	jne    426f98 <flatcc_json_printer_int64_vector_field@@Base+0x1f8>
  426f36:	mov    QWORD PTR [rbx+0x28],rdx
  426f3a:	mov    BYTE PTR [rax],0x5d
  426f3d:	add    rsp,0x8
  426f41:	pop    rbx
  426f42:	pop    rbp
  426f43:	pop    r12
  426f45:	pop    r13
  426f47:	ret    
  426f48:	nop    DWORD PTR [rax+rax*1+0x0]
  426f50:	lea    rax,[rsi+0x1]
  426f54:	mov    QWORD PTR [rbx+0x28],rax
  426f58:	mov    BYTE PTR [rsi],0xa
  426f5b:	mov    rdi,rbx
  426f5e:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  426f63:	mov    rsi,QWORD PTR [rbx+0x28]
  426f67:	jmp    426e44 <flatcc_json_printer_int64_vector_field@@Base+0xa4>
  426f6c:	nop    DWORD PTR [rax+0x0]
  426f70:	mov    esi,0x20
  426f75:	mov    rdx,r12
  426f78:	call   4061c0 <memset@plt>
  426f7d:	mov    rsi,QWORD PTR [rbx+0x28]
  426f81:	add    rsi,r12
  426f84:	mov    QWORD PTR [rbx+0x28],rsi
  426f88:	jmp    426ea6 <flatcc_json_printer_int64_vector_field@@Base+0x106>
  426f8d:	nop    DWORD PTR [rax]
  426f90:	ret    
  426f91:	nop    DWORD PTR [rax+0x0]
  426f98:	mov    QWORD PTR [rbx+0x28],rdx
  426f9c:	mov    BYTE PTR [rax],0xa
  426f9f:	mov    eax,DWORD PTR [rbx+0x38]
  426fa2:	mov    rdi,QWORD PTR [rbx+0x28]
  426fa6:	lea    ebp,[rax-0x1]
  426fa9:	movzx  eax,BYTE PTR [rbx+0x31]
  426fad:	mov    DWORD PTR [rbx+0x38],ebp
  426fb0:	imul   eax,ebp
  426fb3:	movsxd rbp,eax
  426fb6:	lea    rax,[rdi+rbp*1]
  426fba:	cmp    QWORD PTR [rbx+0x20],rax
  426fbe:	jae    426fe0 <flatcc_json_printer_int64_vector_field@@Base+0x240>
  426fc0:	mov    rsi,rbp
  426fc3:	mov    rdi,rbx
  426fc6:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426fcb:	mov    rax,QWORD PTR [rbx+0x28]
  426fcf:	lea    rdx,[rax+0x1]
  426fd3:	jmp    426f36 <flatcc_json_printer_int64_vector_field@@Base+0x196>
  426fd8:	nop    DWORD PTR [rax+rax*1+0x0]
  426fe0:	mov    rdx,rbp
  426fe3:	mov    esi,0x20
  426fe8:	call   4061c0 <memset@plt>
  426fed:	mov    rax,QWORD PTR [rbx+0x28]
  426ff1:	add    rax,rbp
  426ff4:	lea    rdx,[rax+0x1]
  426ff8:	jmp    426f36 <flatcc_json_printer_int64_vector_field@@Base+0x196>
  426ffd:	nop    DWORD PTR [rax]

0000000000427000 <flatcc_json_printer_bool_vector_field@@Base>:
  427000:	endbr64 
  427004:	lea    eax,[rdx+rdx*1+0x4]
  427008:	cmp    eax,DWORD PTR [rsi+0x10]
  42700b:	jge    4271e0 <flatcc_json_printer_bool_vector_field@@Base+0x1e0>
  427011:	push   r13
  427013:	push   r12
  427015:	push   rbp
  427016:	push   rbx
  427017:	sub    rsp,0x8
  42701b:	mov    rdx,QWORD PTR [rsi+0x8]
  42701f:	movzx  ebp,WORD PTR [rdx+rax*1]
  427023:	test   bp,bp
  427026:	je     427171 <flatcc_json_printer_bool_vector_field@@Base+0x171>
  42702c:	add    rbp,QWORD PTR [rsi]
  42702f:	je     427171 <flatcc_json_printer_bool_vector_field@@Base+0x171>
  427035:	mov    eax,DWORD PTR [rsi+0x18]
  427038:	lea    edx,[rax+0x1]
  42703b:	mov    DWORD PTR [rsi+0x18],edx
  42703e:	test   eax,eax
  427040:	je     427051 <flatcc_json_printer_bool_vector_field@@Base+0x51>
  427042:	mov    rax,QWORD PTR [rdi+0x28]
  427046:	lea    rdx,[rax+0x1]
  42704a:	mov    QWORD PTR [rdi+0x28],rdx
  42704e:	mov    BYTE PTR [rax],0x2c
  427051:	mov    eax,DWORD PTR [rbp+0x0]
  427054:	mov    rbx,rdi
  427057:	add    rbp,rax
  42705a:	movsxd rdx,r8d
  42705d:	mov    rsi,rcx
  427060:	mov    r12d,DWORD PTR [rbp+0x0]
  427064:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  427069:	mov    rax,QWORD PTR [rbx+0x28]
  42706d:	inc    DWORD PTR [rbx+0x38]
  427070:	lea    rdx,[rax+0x1]
  427074:	mov    QWORD PTR [rbx+0x28],rdx
  427078:	mov    BYTE PTR [rax],0x5b
  42707b:	test   r12d,r12d
  42707e:	je     427158 <flatcc_json_printer_bool_vector_field@@Base+0x158>
  427084:	cmp    BYTE PTR [rbx+0x31],0x0
  427088:	mov    rsi,QWORD PTR [rbx+0x28]
  42708c:	jne    427180 <flatcc_json_printer_bool_vector_field@@Base+0x180>
  427092:	cmp    QWORD PTR [rbx+0x20],rsi
  427096:	ja     4270a4 <flatcc_json_printer_bool_vector_field@@Base+0xa4>
  427098:	xor    esi,esi
  42709a:	mov    rdi,rbx
  42709d:	call   QWORD PTR [rbx+0x48]
  4270a0:	mov    rsi,QWORD PTR [rbx+0x28]
  4270a4:	movzx  edi,BYTE PTR [rbp+0x4]
  4270a8:	lea    r13,[rbp+0x5]
  4270ac:	call   420590 <flatcc_json_parser_struct_as_root@@Base+0xd50>
  4270b1:	cdqe   
  4270b3:	add    rax,QWORD PTR [rbx+0x28]
  4270b7:	mov    QWORD PTR [rbx+0x28],rax
  4270bb:	lea    edx,[r12-0x2]
  4270c0:	cmp    r12d,0x1
  4270c4:	je     42715c <flatcc_json_printer_bool_vector_field@@Base+0x15c>
  4270ca:	lea    rbp,[rbp+rdx*1+0x6]
  4270cf:	jmp    42710a <flatcc_json_printer_bool_vector_field@@Base+0x10a>
  4270d1:	nop    DWORD PTR [rax+0x0]
  4270d8:	mov    rsi,QWORD PTR [rbx+0x28]
  4270dc:	cmp    rsi,QWORD PTR [rbx+0x20]
  4270e0:	jb     4270ee <flatcc_json_printer_bool_vector_field@@Base+0xee>
  4270e2:	xor    esi,esi
  4270e4:	mov    rdi,rbx
  4270e7:	call   QWORD PTR [rbx+0x48]
  4270ea:	mov    rsi,QWORD PTR [rbx+0x28]
  4270ee:	movzx  edi,BYTE PTR [r13+0x0]
  4270f3:	inc    r13
  4270f6:	call   420590 <flatcc_json_parser_struct_as_root@@Base+0xd50>
  4270fb:	cdqe   
  4270fd:	add    rax,QWORD PTR [rbx+0x28]
  427101:	mov    QWORD PTR [rbx+0x28],rax
  427105:	cmp    r13,rbp
  427108:	je     42715c <flatcc_json_printer_bool_vector_field@@Base+0x15c>
  42710a:	lea    rdx,[rax+0x1]
  42710e:	mov    QWORD PTR [rbx+0x28],rdx
  427112:	mov    BYTE PTR [rax],0x2c
  427115:	cmp    BYTE PTR [rbx+0x31],0x0
  427119:	je     4270d8 <flatcc_json_printer_bool_vector_field@@Base+0xd8>
  42711b:	mov    rax,QWORD PTR [rbx+0x28]
  42711f:	lea    rdx,[rax+0x1]
  427123:	mov    QWORD PTR [rbx+0x28],rdx
  427127:	mov    BYTE PTR [rax],0xa
  42712a:	movzx  esi,BYTE PTR [rbx+0x31]
  42712e:	mov    rdi,QWORD PTR [rbx+0x28]
  427132:	imul   esi,DWORD PTR [rbx+0x38]
  427136:	movsxd r12,esi
  427139:	lea    rax,[rdi+r12*1]
  42713d:	cmp    QWORD PTR [rbx+0x20],rax
  427141:	jae    4271c0 <flatcc_json_printer_bool_vector_field@@Base+0x1c0>
  427143:	mov    rsi,r12
  427146:	mov    rdi,rbx
  427149:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42714e:	mov    rsi,QWORD PTR [rbx+0x28]
  427152:	jmp    4270ee <flatcc_json_printer_bool_vector_field@@Base+0xee>
  427154:	nop    DWORD PTR [rax+0x0]
  427158:	mov    rax,QWORD PTR [rbx+0x28]
  42715c:	cmp    BYTE PTR [rbx+0x31],0x0
  427160:	lea    rdx,[rax+0x1]
  427164:	jne    4271e8 <flatcc_json_printer_bool_vector_field@@Base+0x1e8>
  42716a:	mov    QWORD PTR [rbx+0x28],rdx
  42716e:	mov    BYTE PTR [rax],0x5d
  427171:	add    rsp,0x8
  427175:	pop    rbx
  427176:	pop    rbp
  427177:	pop    r12
  427179:	pop    r13
  42717b:	ret    
  42717c:	nop    DWORD PTR [rax+0x0]
  427180:	lea    rax,[rsi+0x1]
  427184:	mov    QWORD PTR [rbx+0x28],rax
  427188:	mov    BYTE PTR [rsi],0xa
  42718b:	movzx  esi,BYTE PTR [rbx+0x31]
  42718f:	mov    rdi,QWORD PTR [rbx+0x28]
  427193:	imul   esi,DWORD PTR [rbx+0x38]
  427197:	movsxd r13,esi
  42719a:	lea    rax,[rdi+r13*1]
  42719e:	cmp    QWORD PTR [rbx+0x20],rax
  4271a2:	jae    42724d <flatcc_json_printer_bool_vector_field@@Base+0x24d>
  4271a8:	mov    rsi,r13
  4271ab:	mov    rdi,rbx
  4271ae:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4271b3:	mov    rsi,QWORD PTR [rbx+0x28]
  4271b7:	jmp    4270a4 <flatcc_json_printer_bool_vector_field@@Base+0xa4>
  4271bc:	nop    DWORD PTR [rax+0x0]
  4271c0:	mov    esi,0x20
  4271c5:	mov    rdx,r12
  4271c8:	call   4061c0 <memset@plt>
  4271cd:	mov    rsi,QWORD PTR [rbx+0x28]
  4271d1:	add    rsi,r12
  4271d4:	mov    QWORD PTR [rbx+0x28],rsi
  4271d8:	jmp    4270ee <flatcc_json_printer_bool_vector_field@@Base+0xee>
  4271dd:	nop    DWORD PTR [rax]
  4271e0:	ret    
  4271e1:	nop    DWORD PTR [rax+0x0]
  4271e8:	mov    QWORD PTR [rbx+0x28],rdx
  4271ec:	mov    BYTE PTR [rax],0xa
  4271ef:	mov    eax,DWORD PTR [rbx+0x38]
  4271f2:	mov    rdi,QWORD PTR [rbx+0x28]
  4271f6:	lea    ebp,[rax-0x1]
  4271f9:	movzx  eax,BYTE PTR [rbx+0x31]
  4271fd:	mov    DWORD PTR [rbx+0x38],ebp
  427200:	imul   eax,ebp
  427203:	movsxd rbp,eax
  427206:	lea    rax,[rdi+rbp*1]
  42720a:	cmp    QWORD PTR [rbx+0x20],rax
  42720e:	jae    427230 <flatcc_json_printer_bool_vector_field@@Base+0x230>
  427210:	mov    rsi,rbp
  427213:	mov    rdi,rbx
  427216:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42721b:	mov    rax,QWORD PTR [rbx+0x28]
  42721f:	lea    rdx,[rax+0x1]
  427223:	jmp    42716a <flatcc_json_printer_bool_vector_field@@Base+0x16a>
  427228:	nop    DWORD PTR [rax+rax*1+0x0]
  427230:	mov    rdx,rbp
  427233:	mov    esi,0x20
  427238:	call   4061c0 <memset@plt>
  42723d:	mov    rax,QWORD PTR [rbx+0x28]
  427241:	add    rax,rbp
  427244:	lea    rdx,[rax+0x1]
  427248:	jmp    42716a <flatcc_json_printer_bool_vector_field@@Base+0x16a>
  42724d:	mov    esi,0x20
  427252:	mov    rdx,r13
  427255:	call   4061c0 <memset@plt>
  42725a:	mov    rsi,QWORD PTR [rbx+0x28]
  42725e:	add    rsi,r13
  427261:	mov    QWORD PTR [rbx+0x28],rsi
  427265:	jmp    4270a4 <flatcc_json_printer_bool_vector_field@@Base+0xa4>
  42726a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000427270 <flatcc_json_printer_float_vector_field@@Base>:
  427270:	endbr64 
  427274:	lea    eax,[rdx+rdx*1+0x4]
  427278:	cmp    eax,DWORD PTR [rsi+0x10]
  42727b:	jge    427460 <flatcc_json_printer_float_vector_field@@Base+0x1f0>
  427281:	push   r13
  427283:	push   r12
  427285:	push   rbp
  427286:	push   rbx
  427287:	sub    rsp,0x8
  42728b:	mov    rdx,QWORD PTR [rsi+0x8]
  42728f:	movzx  ebp,WORD PTR [rdx+rax*1]
  427293:	test   bp,bp
  427296:	je     4273f1 <flatcc_json_printer_float_vector_field@@Base+0x181>
  42729c:	add    rbp,QWORD PTR [rsi]
  42729f:	je     4273f1 <flatcc_json_printer_float_vector_field@@Base+0x181>
  4272a5:	mov    eax,DWORD PTR [rsi+0x18]
  4272a8:	lea    edx,[rax+0x1]
  4272ab:	mov    DWORD PTR [rsi+0x18],edx
  4272ae:	test   eax,eax
  4272b0:	je     4272c1 <flatcc_json_printer_float_vector_field@@Base+0x51>
  4272b2:	mov    rax,QWORD PTR [rdi+0x28]
  4272b6:	lea    rdx,[rax+0x1]
  4272ba:	mov    QWORD PTR [rdi+0x28],rdx
  4272be:	mov    BYTE PTR [rax],0x2c
  4272c1:	mov    eax,DWORD PTR [rbp+0x0]
  4272c4:	mov    rbx,rdi
  4272c7:	add    rbp,rax
  4272ca:	movsxd rdx,r8d
  4272cd:	mov    rsi,rcx
  4272d0:	mov    r12d,DWORD PTR [rbp+0x0]
  4272d4:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  4272d9:	mov    rax,QWORD PTR [rbx+0x28]
  4272dd:	inc    DWORD PTR [rbx+0x38]
  4272e0:	lea    rdx,[rax+0x1]
  4272e4:	mov    QWORD PTR [rbx+0x28],rdx
  4272e8:	mov    BYTE PTR [rax],0x5b
  4272eb:	test   r12d,r12d
  4272ee:	je     4273d8 <flatcc_json_printer_float_vector_field@@Base+0x168>
  4272f4:	cmp    BYTE PTR [rbx+0x31],0x0
  4272f8:	mov    rdi,QWORD PTR [rbx+0x28]
  4272fc:	jne    427400 <flatcc_json_printer_float_vector_field@@Base+0x190>
  427302:	cmp    QWORD PTR [rbx+0x20],rdi
  427306:	ja     427314 <flatcc_json_printer_float_vector_field@@Base+0xa4>
  427308:	mov    rdi,rbx
  42730b:	xor    esi,esi
  42730d:	call   QWORD PTR [rbx+0x48]
  427310:	mov    rdi,QWORD PTR [rbx+0x28]
  427314:	vxorpd xmm0,xmm0,xmm0
  427318:	vcvtss2sd xmm0,xmm0,DWORD PTR [rbp+0x4]
  42731d:	call   4207b0 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  427322:	cdqe   
  427324:	add    rax,QWORD PTR [rbx+0x28]
  427328:	mov    QWORD PTR [rbx+0x28],rax
  42732c:	lea    r13,[rbp+0x8]
  427330:	lea    edx,[r12-0x2]
  427335:	cmp    r12d,0x1
  427339:	je     4273dc <flatcc_json_printer_float_vector_field@@Base+0x16c>
  42733f:	lea    rbp,[rbp+rdx*4+0xc]
  427344:	jmp    427388 <flatcc_json_printer_float_vector_field@@Base+0x118>
  427346:	nop    WORD PTR cs:[rax+rax*1+0x0]
  427350:	mov    rdi,QWORD PTR [rbx+0x28]
  427354:	cmp    rdi,QWORD PTR [rbx+0x20]
  427358:	jb     427366 <flatcc_json_printer_float_vector_field@@Base+0xf6>
  42735a:	mov    rdi,rbx
  42735d:	xor    esi,esi
  42735f:	call   QWORD PTR [rbx+0x48]
  427362:	mov    rdi,QWORD PTR [rbx+0x28]
  427366:	vxorpd xmm0,xmm0,xmm0
  42736a:	vcvtss2sd xmm0,xmm0,DWORD PTR [r13+0x0]
  427370:	call   4207b0 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  427375:	cdqe   
  427377:	add    rax,QWORD PTR [rbx+0x28]
  42737b:	add    r13,0x4
  42737f:	mov    QWORD PTR [rbx+0x28],rax
  427383:	cmp    r13,rbp
  427386:	je     4273dc <flatcc_json_printer_float_vector_field@@Base+0x16c>
  427388:	lea    rdx,[rax+0x1]
  42738c:	mov    QWORD PTR [rbx+0x28],rdx
  427390:	mov    BYTE PTR [rax],0x2c
  427393:	cmp    BYTE PTR [rbx+0x31],0x0
  427397:	je     427350 <flatcc_json_printer_float_vector_field@@Base+0xe0>
  427399:	mov    rax,QWORD PTR [rbx+0x28]
  42739d:	lea    rdx,[rax+0x1]
  4273a1:	mov    QWORD PTR [rbx+0x28],rdx
  4273a5:	mov    BYTE PTR [rax],0xa
  4273a8:	movzx  edi,BYTE PTR [rbx+0x31]
  4273ac:	imul   edi,DWORD PTR [rbx+0x38]
  4273b0:	movsxd r12,edi
  4273b3:	mov    rdi,QWORD PTR [rbx+0x28]
  4273b7:	lea    rax,[rdi+r12*1]
  4273bb:	cmp    QWORD PTR [rbx+0x20],rax
  4273bf:	jae    427440 <flatcc_json_printer_float_vector_field@@Base+0x1d0>
  4273c1:	mov    rdi,rbx
  4273c4:	mov    rsi,r12
  4273c7:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4273cc:	mov    rdi,QWORD PTR [rbx+0x28]
  4273d0:	jmp    427366 <flatcc_json_printer_float_vector_field@@Base+0xf6>
  4273d2:	nop    WORD PTR [rax+rax*1+0x0]
  4273d8:	mov    rax,QWORD PTR [rbx+0x28]
  4273dc:	cmp    BYTE PTR [rbx+0x31],0x0
  4273e0:	lea    rdx,[rax+0x1]
  4273e4:	jne    427468 <flatcc_json_printer_float_vector_field@@Base+0x1f8>
  4273ea:	mov    QWORD PTR [rbx+0x28],rdx
  4273ee:	mov    BYTE PTR [rax],0x5d
  4273f1:	add    rsp,0x8
  4273f5:	pop    rbx
  4273f6:	pop    rbp
  4273f7:	pop    r12
  4273f9:	pop    r13
  4273fb:	ret    
  4273fc:	nop    DWORD PTR [rax+0x0]
  427400:	lea    rax,[rdi+0x1]
  427404:	mov    QWORD PTR [rbx+0x28],rax
  427408:	mov    BYTE PTR [rdi],0xa
  42740b:	movzx  edi,BYTE PTR [rbx+0x31]
  42740f:	imul   edi,DWORD PTR [rbx+0x38]
  427413:	movsxd r13,edi
  427416:	mov    rdi,QWORD PTR [rbx+0x28]
  42741a:	lea    rax,[rdi+r13*1]
  42741e:	cmp    QWORD PTR [rbx+0x20],rax
  427422:	jae    4274cd <flatcc_json_printer_float_vector_field@@Base+0x25d>
  427428:	mov    rdi,rbx
  42742b:	mov    rsi,r13
  42742e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427433:	mov    rdi,QWORD PTR [rbx+0x28]
  427437:	jmp    427314 <flatcc_json_printer_float_vector_field@@Base+0xa4>
  42743c:	nop    DWORD PTR [rax+0x0]
  427440:	mov    rdx,r12
  427443:	mov    esi,0x20
  427448:	call   4061c0 <memset@plt>
  42744d:	mov    rdi,QWORD PTR [rbx+0x28]
  427451:	add    rdi,r12
  427454:	mov    QWORD PTR [rbx+0x28],rdi
  427458:	jmp    427366 <flatcc_json_printer_float_vector_field@@Base+0xf6>
  42745d:	nop    DWORD PTR [rax]
  427460:	ret    
  427461:	nop    DWORD PTR [rax+0x0]
  427468:	mov    QWORD PTR [rbx+0x28],rdx
  42746c:	mov    BYTE PTR [rax],0xa
  42746f:	mov    eax,DWORD PTR [rbx+0x38]
  427472:	mov    rdi,QWORD PTR [rbx+0x28]
  427476:	lea    ebp,[rax-0x1]
  427479:	movzx  eax,BYTE PTR [rbx+0x31]
  42747d:	mov    DWORD PTR [rbx+0x38],ebp
  427480:	imul   eax,ebp
  427483:	movsxd rbp,eax
  427486:	lea    rax,[rdi+rbp*1]
  42748a:	cmp    QWORD PTR [rbx+0x20],rax
  42748e:	jae    4274b0 <flatcc_json_printer_float_vector_field@@Base+0x240>
  427490:	mov    rsi,rbp
  427493:	mov    rdi,rbx
  427496:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42749b:	mov    rax,QWORD PTR [rbx+0x28]
  42749f:	lea    rdx,[rax+0x1]
  4274a3:	jmp    4273ea <flatcc_json_printer_float_vector_field@@Base+0x17a>
  4274a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4274b0:	mov    rdx,rbp
  4274b3:	mov    esi,0x20
  4274b8:	call   4061c0 <memset@plt>
  4274bd:	mov    rax,QWORD PTR [rbx+0x28]
  4274c1:	add    rax,rbp
  4274c4:	lea    rdx,[rax+0x1]
  4274c8:	jmp    4273ea <flatcc_json_printer_float_vector_field@@Base+0x17a>
  4274cd:	mov    rdx,r13
  4274d0:	mov    esi,0x20
  4274d5:	call   4061c0 <memset@plt>
  4274da:	mov    rdi,QWORD PTR [rbx+0x28]
  4274de:	add    rdi,r13
  4274e1:	mov    QWORD PTR [rbx+0x28],rdi
  4274e5:	jmp    427314 <flatcc_json_printer_float_vector_field@@Base+0xa4>
  4274ea:	nop    WORD PTR [rax+rax*1+0x0]

00000000004274f0 <flatcc_json_printer_double_vector_field@@Base>:
  4274f0:	endbr64 
  4274f4:	lea    eax,[rdx+rdx*1+0x4]
  4274f8:	cmp    eax,DWORD PTR [rsi+0x10]
  4274fb:	jge    427650 <flatcc_json_printer_double_vector_field@@Base+0x160>
  427501:	mov    rdx,QWORD PTR [rsi+0x8]
  427505:	movzx  eax,WORD PTR [rdx+rax*1]
  427509:	test   ax,ax
  42750c:	je     427650 <flatcc_json_printer_double_vector_field@@Base+0x160>
  427512:	add    rax,QWORD PTR [rsi]
  427515:	je     427650 <flatcc_json_printer_double_vector_field@@Base+0x160>
  42751b:	push   r13
  42751d:	push   r12
  42751f:	push   rbp
  427520:	push   rbx
  427521:	sub    rsp,0x8
  427525:	mov    edx,DWORD PTR [rsi+0x18]
  427528:	lea    r9d,[rdx+0x1]
  42752c:	mov    DWORD PTR [rsi+0x18],r9d
  427530:	test   edx,edx
  427532:	je     427543 <flatcc_json_printer_double_vector_field@@Base+0x53>
  427534:	mov    rdx,QWORD PTR [rdi+0x28]
  427538:	lea    rsi,[rdx+0x1]
  42753c:	mov    QWORD PTR [rdi+0x28],rsi
  427540:	mov    BYTE PTR [rdx],0x2c
  427543:	mov    r12d,DWORD PTR [rax]
  427546:	mov    rbx,rdi
  427549:	add    r12,rax
  42754c:	movsxd rdx,r8d
  42754f:	mov    rsi,rcx
  427552:	mov    ebp,DWORD PTR [r12]
  427556:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  42755b:	mov    rax,QWORD PTR [rbx+0x28]
  42755f:	inc    DWORD PTR [rbx+0x38]
  427562:	lea    rdx,[rax+0x1]
  427566:	mov    QWORD PTR [rbx+0x28],rdx
  42756a:	mov    BYTE PTR [rax],0x5b
  42756d:	test   ebp,ebp
  42756f:	je     427658 <flatcc_json_printer_double_vector_field@@Base+0x168>
  427575:	cmp    BYTE PTR [rbx+0x31],0x0
  427579:	mov    rdi,QWORD PTR [rbx+0x28]
  42757d:	jne    427680 <flatcc_json_printer_double_vector_field@@Base+0x190>
  427583:	cmp    QWORD PTR [rbx+0x20],rdi
  427587:	ja     427595 <flatcc_json_printer_double_vector_field@@Base+0xa5>
  427589:	mov    rdi,rbx
  42758c:	xor    esi,esi
  42758e:	call   QWORD PTR [rbx+0x48]
  427591:	mov    rdi,QWORD PTR [rbx+0x28]
  427595:	vmovsd xmm0,QWORD PTR [r12+0x4]
  42759c:	lea    r13,[r12+0xc]
  4275a1:	call   4207b0 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  4275a6:	cdqe   
  4275a8:	add    rax,QWORD PTR [rbx+0x28]
  4275ac:	mov    QWORD PTR [rbx+0x28],rax
  4275b0:	lea    edx,[rbp-0x2]
  4275b3:	cmp    ebp,0x1
  4275b6:	je     42765c <flatcc_json_printer_double_vector_field@@Base+0x16c>
  4275bc:	lea    rbp,[r12+rdx*8+0x14]
  4275c1:	jmp    4275fc <flatcc_json_printer_double_vector_field@@Base+0x10c>
  4275c3:	nop    DWORD PTR [rax+rax*1+0x0]
  4275c8:	mov    rdi,QWORD PTR [rbx+0x28]
  4275cc:	cmp    rdi,QWORD PTR [rbx+0x20]
  4275d0:	jb     4275de <flatcc_json_printer_double_vector_field@@Base+0xee>
  4275d2:	mov    rdi,rbx
  4275d5:	xor    esi,esi
  4275d7:	call   QWORD PTR [rbx+0x48]
  4275da:	mov    rdi,QWORD PTR [rbx+0x28]
  4275de:	vmovsd xmm0,QWORD PTR [r13+0x0]
  4275e4:	add    r13,0x8
  4275e8:	call   4207b0 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  4275ed:	cdqe   
  4275ef:	add    rax,QWORD PTR [rbx+0x28]
  4275f3:	mov    QWORD PTR [rbx+0x28],rax
  4275f7:	cmp    r13,rbp
  4275fa:	je     42765c <flatcc_json_printer_double_vector_field@@Base+0x16c>
  4275fc:	lea    rdx,[rax+0x1]
  427600:	mov    QWORD PTR [rbx+0x28],rdx
  427604:	mov    BYTE PTR [rax],0x2c
  427607:	cmp    BYTE PTR [rbx+0x31],0x0
  42760b:	je     4275c8 <flatcc_json_printer_double_vector_field@@Base+0xd8>
  42760d:	mov    rax,QWORD PTR [rbx+0x28]
  427611:	lea    rdx,[rax+0x1]
  427615:	mov    QWORD PTR [rbx+0x28],rdx
  427619:	mov    BYTE PTR [rax],0xa
  42761c:	movzx  edi,BYTE PTR [rbx+0x31]
  427620:	imul   edi,DWORD PTR [rbx+0x38]
  427624:	movsxd r12,edi
  427627:	mov    rdi,QWORD PTR [rbx+0x28]
  42762b:	lea    rax,[rdi+r12*1]
  42762f:	cmp    QWORD PTR [rbx+0x20],rax
  427633:	jae    4276c0 <flatcc_json_printer_double_vector_field@@Base+0x1d0>
  427639:	mov    rdi,rbx
  42763c:	mov    rsi,r12
  42763f:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427644:	mov    rdi,QWORD PTR [rbx+0x28]
  427648:	jmp    4275de <flatcc_json_printer_double_vector_field@@Base+0xee>
  42764a:	nop    WORD PTR [rax+rax*1+0x0]
  427650:	ret    
  427651:	nop    DWORD PTR [rax+0x0]
  427658:	mov    rax,QWORD PTR [rbx+0x28]
  42765c:	cmp    BYTE PTR [rbx+0x31],0x0
  427660:	lea    rdx,[rax+0x1]
  427664:	jne    4276e0 <flatcc_json_printer_double_vector_field@@Base+0x1f0>
  427666:	mov    QWORD PTR [rbx+0x28],rdx
  42766a:	mov    BYTE PTR [rax],0x5d
  42766d:	add    rsp,0x8
  427671:	pop    rbx
  427672:	pop    rbp
  427673:	pop    r12
  427675:	pop    r13
  427677:	ret    
  427678:	nop    DWORD PTR [rax+rax*1+0x0]
  427680:	lea    rax,[rdi+0x1]
  427684:	mov    QWORD PTR [rbx+0x28],rax
  427688:	mov    BYTE PTR [rdi],0xa
  42768b:	movzx  edi,BYTE PTR [rbx+0x31]
  42768f:	imul   edi,DWORD PTR [rbx+0x38]
  427693:	movsxd r13,edi
  427696:	mov    rdi,QWORD PTR [rbx+0x28]
  42769a:	lea    rax,[rdi+r13*1]
  42769e:	cmp    QWORD PTR [rbx+0x20],rax
  4276a2:	jae    42773d <flatcc_json_printer_double_vector_field@@Base+0x24d>
  4276a8:	mov    rdi,rbx
  4276ab:	mov    rsi,r13
  4276ae:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4276b3:	mov    rdi,QWORD PTR [rbx+0x28]
  4276b7:	jmp    427595 <flatcc_json_printer_double_vector_field@@Base+0xa5>
  4276bc:	nop    DWORD PTR [rax+0x0]
  4276c0:	mov    rdx,r12
  4276c3:	mov    esi,0x20
  4276c8:	call   4061c0 <memset@plt>
  4276cd:	mov    rdi,QWORD PTR [rbx+0x28]
  4276d1:	add    rdi,r12
  4276d4:	mov    QWORD PTR [rbx+0x28],rdi
  4276d8:	jmp    4275de <flatcc_json_printer_double_vector_field@@Base+0xee>
  4276dd:	nop    DWORD PTR [rax]
  4276e0:	mov    QWORD PTR [rbx+0x28],rdx
  4276e4:	mov    BYTE PTR [rax],0xa
  4276e7:	mov    eax,DWORD PTR [rbx+0x38]
  4276ea:	mov    rdi,QWORD PTR [rbx+0x28]
  4276ee:	lea    ebp,[rax-0x1]
  4276f1:	movzx  eax,BYTE PTR [rbx+0x31]
  4276f5:	mov    DWORD PTR [rbx+0x38],ebp
  4276f8:	imul   eax,ebp
  4276fb:	movsxd rbp,eax
  4276fe:	lea    rax,[rdi+rbp*1]
  427702:	cmp    QWORD PTR [rbx+0x20],rax
  427706:	jae    427720 <flatcc_json_printer_double_vector_field@@Base+0x230>
  427708:	mov    rsi,rbp
  42770b:	mov    rdi,rbx
  42770e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427713:	mov    rax,QWORD PTR [rbx+0x28]
  427717:	lea    rdx,[rax+0x1]
  42771b:	jmp    427666 <flatcc_json_printer_double_vector_field@@Base+0x176>
  427720:	mov    rdx,rbp
  427723:	mov    esi,0x20
  427728:	call   4061c0 <memset@plt>
  42772d:	mov    rax,QWORD PTR [rbx+0x28]
  427731:	add    rax,rbp
  427734:	lea    rdx,[rax+0x1]
  427738:	jmp    427666 <flatcc_json_printer_double_vector_field@@Base+0x176>
  42773d:	mov    rdx,r13
  427740:	mov    esi,0x20
  427745:	call   4061c0 <memset@plt>
  42774a:	mov    rdi,QWORD PTR [rbx+0x28]
  42774e:	add    rdi,r13
  427751:	mov    QWORD PTR [rbx+0x28],rdi
  427755:	jmp    427595 <flatcc_json_printer_double_vector_field@@Base+0xa5>
  42775a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000427760 <flatcc_json_printer_utype_enum_vector_field@@Base>:
  427760:	endbr64 
  427764:	cmp    BYTE PTR [rdi+0x33],0x0
  427768:	jne    4278c8 <flatcc_json_printer_utype_enum_vector_field@@Base+0x168>
  42776e:	lea    eax,[rdx+rdx*1+0x4]
  427772:	cmp    eax,DWORD PTR [rsi+0x10]
  427775:	jge    4278c0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x160>
  42777b:	mov    rdx,QWORD PTR [rsi+0x8]
  42777f:	movzx  eax,WORD PTR [rdx+rax*1]
  427783:	test   ax,ax
  427786:	je     4278c0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x160>
  42778c:	add    rax,QWORD PTR [rsi]
  42778f:	je     4278c0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x160>
  427795:	push   r14
  427797:	push   r13
  427799:	push   r12
  42779b:	push   rbp
  42779c:	push   rbx
  42779d:	mov    edx,DWORD PTR [rsi+0x18]
  4277a0:	lea    r10d,[rdx+0x1]
  4277a4:	mov    DWORD PTR [rsi+0x18],r10d
  4277a8:	test   edx,edx
  4277aa:	je     4277bb <flatcc_json_printer_utype_enum_vector_field@@Base+0x5b>
  4277ac:	mov    rdx,QWORD PTR [rdi+0x28]
  4277b0:	lea    rsi,[rdx+0x1]
  4277b4:	mov    QWORD PTR [rdi+0x28],rsi
  4277b8:	mov    BYTE PTR [rdx],0x2c
  4277bb:	mov    r12d,DWORD PTR [rax]
  4277be:	mov    rbx,rdi
  4277c1:	add    r12,rax
  4277c4:	movsxd rdx,r8d
  4277c7:	mov    rsi,rcx
  4277ca:	mov    r13,r9
  4277cd:	mov    r14d,DWORD PTR [r12]
  4277d1:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  4277d6:	mov    rax,QWORD PTR [rbx+0x28]
  4277da:	inc    DWORD PTR [rbx+0x38]
  4277dd:	lea    rdx,[rax+0x1]
  4277e1:	mov    QWORD PTR [rbx+0x28],rdx
  4277e5:	mov    BYTE PTR [rax],0x5b
  4277e8:	test   r14d,r14d
  4277eb:	je     4278a0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x140>
  4277f1:	cmp    BYTE PTR [rbx+0x31],0x0
  4277f5:	mov    rax,QWORD PTR [rbx+0x28]
  4277f9:	jne    427930 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d0>
  4277ff:	cmp    QWORD PTR [rbx+0x20],rax
  427803:	ja     42780d <flatcc_json_printer_utype_enum_vector_field@@Base+0xad>
  427805:	xor    esi,esi
  427807:	mov    rdi,rbx
  42780a:	call   QWORD PTR [rbx+0x48]
  42780d:	movzx  esi,BYTE PTR [r12+0x4]
  427813:	mov    rdi,rbx
  427816:	call   r13
  427819:	lea    rbp,[r12+0x5]
  42781e:	lea    eax,[r14-0x2]
  427822:	cmp    r14d,0x1
  427826:	je     4278a0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x140>
  427828:	lea    r14,[r12+rax*1+0x6]
  42782d:	jmp    427854 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf4>
  42782f:	nop
  427830:	mov    rax,QWORD PTR [rbx+0x20]
  427834:	cmp    QWORD PTR [rbx+0x28],rax
  427838:	jb     427842 <flatcc_json_printer_utype_enum_vector_field@@Base+0xe2>
  42783a:	xor    esi,esi
  42783c:	mov    rdi,rbx
  42783f:	call   QWORD PTR [rbx+0x48]
  427842:	movzx  esi,BYTE PTR [rbp+0x0]
  427846:	mov    rdi,rbx
  427849:	inc    rbp
  42784c:	call   r13
  42784f:	cmp    rbp,r14
  427852:	je     4278a0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x140>
  427854:	mov    rax,QWORD PTR [rbx+0x28]
  427858:	lea    rdx,[rax+0x1]
  42785c:	mov    QWORD PTR [rbx+0x28],rdx
  427860:	mov    BYTE PTR [rax],0x2c
  427863:	cmp    BYTE PTR [rbx+0x31],0x0
  427867:	je     427830 <flatcc_json_printer_utype_enum_vector_field@@Base+0xd0>
  427869:	mov    rax,QWORD PTR [rbx+0x28]
  42786d:	lea    rdx,[rax+0x1]
  427871:	mov    QWORD PTR [rbx+0x28],rdx
  427875:	mov    BYTE PTR [rax],0xa
  427878:	movzx  r12d,BYTE PTR [rbx+0x31]
  42787d:	mov    rdi,QWORD PTR [rbx+0x28]
  427881:	imul   r12d,DWORD PTR [rbx+0x38]
  427886:	movsxd r12,r12d
  427889:	lea    rax,[rdi+r12*1]
  42788d:	cmp    QWORD PTR [rbx+0x20],rax
  427891:	jae    4278d0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x170>
  427893:	mov    rsi,r12
  427896:	mov    rdi,rbx
  427899:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42789e:	jmp    427842 <flatcc_json_printer_utype_enum_vector_field@@Base+0xe2>
  4278a0:	mov    rax,QWORD PTR [rbx+0x28]
  4278a4:	cmp    BYTE PTR [rbx+0x31],0x0
  4278a8:	lea    rdx,[rax+0x1]
  4278ac:	jne    4278f0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x190>
  4278ae:	mov    QWORD PTR [rbx+0x28],rdx
  4278b2:	mov    BYTE PTR [rax],0x5d
  4278b5:	pop    rbx
  4278b6:	pop    rbp
  4278b7:	pop    r12
  4278b9:	pop    r13
  4278bb:	pop    r14
  4278bd:	ret    
  4278be:	xchg   ax,ax
  4278c0:	ret    
  4278c1:	nop    DWORD PTR [rax+0x0]
  4278c8:	jmp    425f50 <flatcc_json_printer_utype_vector_field@@Base>
  4278cd:	nop    DWORD PTR [rax]
  4278d0:	mov    rdx,r12
  4278d3:	mov    esi,0x20
  4278d8:	call   4061c0 <memset@plt>
  4278dd:	add    QWORD PTR [rbx+0x28],r12
  4278e1:	jmp    427842 <flatcc_json_printer_utype_enum_vector_field@@Base+0xe2>
  4278e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4278f0:	mov    QWORD PTR [rbx+0x28],rdx
  4278f4:	mov    BYTE PTR [rax],0xa
  4278f7:	mov    eax,DWORD PTR [rbx+0x38]
  4278fa:	mov    rdi,QWORD PTR [rbx+0x28]
  4278fe:	lea    ebp,[rax-0x1]
  427901:	movzx  eax,BYTE PTR [rbx+0x31]
  427905:	mov    DWORD PTR [rbx+0x38],ebp
  427908:	imul   eax,ebp
  42790b:	movsxd rbp,eax
  42790e:	lea    rax,[rdi+rbp*1]
  427912:	cmp    QWORD PTR [rbx+0x20],rax
  427916:	jae    427950 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1f0>
  427918:	mov    rsi,rbp
  42791b:	mov    rdi,rbx
  42791e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427923:	mov    rax,QWORD PTR [rbx+0x28]
  427927:	lea    rdx,[rax+0x1]
  42792b:	jmp    4278ae <flatcc_json_printer_utype_enum_vector_field@@Base+0x14e>
  42792d:	nop    DWORD PTR [rax]
  427930:	lea    rdx,[rax+0x1]
  427934:	mov    QWORD PTR [rbx+0x28],rdx
  427938:	mov    BYTE PTR [rax],0xa
  42793b:	mov    rdi,rbx
  42793e:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  427943:	jmp    42780d <flatcc_json_printer_utype_enum_vector_field@@Base+0xad>
  427948:	nop    DWORD PTR [rax+rax*1+0x0]
  427950:	mov    rdx,rbp
  427953:	mov    esi,0x20
  427958:	call   4061c0 <memset@plt>
  42795d:	mov    rax,QWORD PTR [rbx+0x28]
  427961:	add    rax,rbp
  427964:	lea    rdx,[rax+0x1]
  427968:	jmp    4278ae <flatcc_json_printer_utype_enum_vector_field@@Base+0x14e>
  42796d:	nop    DWORD PTR [rax]

0000000000427970 <flatcc_json_printer_uint8_enum_vector_field@@Base>:
  427970:	endbr64 
  427974:	cmp    BYTE PTR [rdi+0x33],0x0
  427978:	jne    427ad8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x168>
  42797e:	lea    eax,[rdx+rdx*1+0x4]
  427982:	cmp    eax,DWORD PTR [rsi+0x10]
  427985:	jge    427ad0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x160>
  42798b:	mov    rdx,QWORD PTR [rsi+0x8]
  42798f:	movzx  eax,WORD PTR [rdx+rax*1]
  427993:	test   ax,ax
  427996:	je     427ad0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x160>
  42799c:	add    rax,QWORD PTR [rsi]
  42799f:	je     427ad0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x160>
  4279a5:	push   r14
  4279a7:	push   r13
  4279a9:	push   r12
  4279ab:	push   rbp
  4279ac:	push   rbx
  4279ad:	mov    edx,DWORD PTR [rsi+0x18]
  4279b0:	lea    r10d,[rdx+0x1]
  4279b4:	mov    DWORD PTR [rsi+0x18],r10d
  4279b8:	test   edx,edx
  4279ba:	je     4279cb <flatcc_json_printer_uint8_enum_vector_field@@Base+0x5b>
  4279bc:	mov    rdx,QWORD PTR [rdi+0x28]
  4279c0:	lea    rsi,[rdx+0x1]
  4279c4:	mov    QWORD PTR [rdi+0x28],rsi
  4279c8:	mov    BYTE PTR [rdx],0x2c
  4279cb:	mov    r12d,DWORD PTR [rax]
  4279ce:	mov    rbx,rdi
  4279d1:	add    r12,rax
  4279d4:	movsxd rdx,r8d
  4279d7:	mov    rsi,rcx
  4279da:	mov    r13,r9
  4279dd:	mov    r14d,DWORD PTR [r12]
  4279e1:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  4279e6:	mov    rax,QWORD PTR [rbx+0x28]
  4279ea:	inc    DWORD PTR [rbx+0x38]
  4279ed:	lea    rdx,[rax+0x1]
  4279f1:	mov    QWORD PTR [rbx+0x28],rdx
  4279f5:	mov    BYTE PTR [rax],0x5b
  4279f8:	test   r14d,r14d
  4279fb:	je     427ab0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
  427a01:	cmp    BYTE PTR [rbx+0x31],0x0
  427a05:	mov    rax,QWORD PTR [rbx+0x28]
  427a09:	jne    427b40 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d0>
  427a0f:	cmp    QWORD PTR [rbx+0x20],rax
  427a13:	ja     427a1d <flatcc_json_printer_uint8_enum_vector_field@@Base+0xad>
  427a15:	xor    esi,esi
  427a17:	mov    rdi,rbx
  427a1a:	call   QWORD PTR [rbx+0x48]
  427a1d:	movzx  esi,BYTE PTR [r12+0x4]
  427a23:	mov    rdi,rbx
  427a26:	call   r13
  427a29:	lea    rbp,[r12+0x5]
  427a2e:	lea    eax,[r14-0x2]
  427a32:	cmp    r14d,0x1
  427a36:	je     427ab0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
  427a38:	lea    r14,[r12+rax*1+0x6]
  427a3d:	jmp    427a64 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf4>
  427a3f:	nop
  427a40:	mov    rax,QWORD PTR [rbx+0x20]
  427a44:	cmp    QWORD PTR [rbx+0x28],rax
  427a48:	jb     427a52 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xe2>
  427a4a:	xor    esi,esi
  427a4c:	mov    rdi,rbx
  427a4f:	call   QWORD PTR [rbx+0x48]
  427a52:	movzx  esi,BYTE PTR [rbp+0x0]
  427a56:	mov    rdi,rbx
  427a59:	inc    rbp
  427a5c:	call   r13
  427a5f:	cmp    rbp,r14
  427a62:	je     427ab0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
  427a64:	mov    rax,QWORD PTR [rbx+0x28]
  427a68:	lea    rdx,[rax+0x1]
  427a6c:	mov    QWORD PTR [rbx+0x28],rdx
  427a70:	mov    BYTE PTR [rax],0x2c
  427a73:	cmp    BYTE PTR [rbx+0x31],0x0
  427a77:	je     427a40 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xd0>
  427a79:	mov    rax,QWORD PTR [rbx+0x28]
  427a7d:	lea    rdx,[rax+0x1]
  427a81:	mov    QWORD PTR [rbx+0x28],rdx
  427a85:	mov    BYTE PTR [rax],0xa
  427a88:	movzx  r12d,BYTE PTR [rbx+0x31]
  427a8d:	mov    rdi,QWORD PTR [rbx+0x28]
  427a91:	imul   r12d,DWORD PTR [rbx+0x38]
  427a96:	movsxd r12,r12d
  427a99:	lea    rax,[rdi+r12*1]
  427a9d:	cmp    QWORD PTR [rbx+0x20],rax
  427aa1:	jae    427ae0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x170>
  427aa3:	mov    rsi,r12
  427aa6:	mov    rdi,rbx
  427aa9:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427aae:	jmp    427a52 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xe2>
  427ab0:	mov    rax,QWORD PTR [rbx+0x28]
  427ab4:	cmp    BYTE PTR [rbx+0x31],0x0
  427ab8:	lea    rdx,[rax+0x1]
  427abc:	jne    427b00 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x190>
  427abe:	mov    QWORD PTR [rbx+0x28],rdx
  427ac2:	mov    BYTE PTR [rax],0x5d
  427ac5:	pop    rbx
  427ac6:	pop    rbp
  427ac7:	pop    r12
  427ac9:	pop    r13
  427acb:	pop    r14
  427acd:	ret    
  427ace:	xchg   ax,ax
  427ad0:	ret    
  427ad1:	nop    DWORD PTR [rax+0x0]
  427ad8:	jmp    425ce0 <flatcc_json_printer_uint8_vector_field@@Base>
  427add:	nop    DWORD PTR [rax]
  427ae0:	mov    rdx,r12
  427ae3:	mov    esi,0x20
  427ae8:	call   4061c0 <memset@plt>
  427aed:	add    QWORD PTR [rbx+0x28],r12
  427af1:	jmp    427a52 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xe2>
  427af6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  427b00:	mov    QWORD PTR [rbx+0x28],rdx
  427b04:	mov    BYTE PTR [rax],0xa
  427b07:	mov    eax,DWORD PTR [rbx+0x38]
  427b0a:	mov    rdi,QWORD PTR [rbx+0x28]
  427b0e:	lea    ebp,[rax-0x1]
  427b11:	movzx  eax,BYTE PTR [rbx+0x31]
  427b15:	mov    DWORD PTR [rbx+0x38],ebp
  427b18:	imul   eax,ebp
  427b1b:	movsxd rbp,eax
  427b1e:	lea    rax,[rdi+rbp*1]
  427b22:	cmp    QWORD PTR [rbx+0x20],rax
  427b26:	jae    427b60 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1f0>
  427b28:	mov    rsi,rbp
  427b2b:	mov    rdi,rbx
  427b2e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427b33:	mov    rax,QWORD PTR [rbx+0x28]
  427b37:	lea    rdx,[rax+0x1]
  427b3b:	jmp    427abe <flatcc_json_printer_uint8_enum_vector_field@@Base+0x14e>
  427b3d:	nop    DWORD PTR [rax]
  427b40:	lea    rdx,[rax+0x1]
  427b44:	mov    QWORD PTR [rbx+0x28],rdx
  427b48:	mov    BYTE PTR [rax],0xa
  427b4b:	mov    rdi,rbx
  427b4e:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  427b53:	jmp    427a1d <flatcc_json_printer_uint8_enum_vector_field@@Base+0xad>
  427b58:	nop    DWORD PTR [rax+rax*1+0x0]
  427b60:	mov    rdx,rbp
  427b63:	mov    esi,0x20
  427b68:	call   4061c0 <memset@plt>
  427b6d:	mov    rax,QWORD PTR [rbx+0x28]
  427b71:	add    rax,rbp
  427b74:	lea    rdx,[rax+0x1]
  427b78:	jmp    427abe <flatcc_json_printer_uint8_enum_vector_field@@Base+0x14e>
  427b7d:	nop    DWORD PTR [rax]

0000000000427b80 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
  427b80:	endbr64 
  427b84:	cmp    BYTE PTR [rdi+0x33],0x0
  427b88:	jne    427cf8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x178>
  427b8e:	lea    eax,[rdx+rdx*1+0x4]
  427b92:	cmp    eax,DWORD PTR [rsi+0x10]
  427b95:	jge    427cf0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x170>
  427b9b:	mov    rdx,QWORD PTR [rsi+0x8]
  427b9f:	movzx  eax,WORD PTR [rdx+rax*1]
  427ba3:	test   ax,ax
  427ba6:	je     427cf0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x170>
  427bac:	add    rax,QWORD PTR [rsi]
  427baf:	je     427cf0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x170>
  427bb5:	push   r14
  427bb7:	push   r13
  427bb9:	push   r12
  427bbb:	push   rbp
  427bbc:	push   rbx
  427bbd:	mov    edx,DWORD PTR [rsi+0x18]
  427bc0:	lea    r10d,[rdx+0x1]
  427bc4:	mov    DWORD PTR [rsi+0x18],r10d
  427bc8:	test   edx,edx
  427bca:	je     427bdb <flatcc_json_printer_uint16_enum_vector_field@@Base+0x5b>
  427bcc:	mov    rdx,QWORD PTR [rdi+0x28]
  427bd0:	lea    rsi,[rdx+0x1]
  427bd4:	mov    QWORD PTR [rdi+0x28],rsi
  427bd8:	mov    BYTE PTR [rdx],0x2c
  427bdb:	mov    r12d,DWORD PTR [rax]
  427bde:	mov    rbx,rdi
  427be1:	add    r12,rax
  427be4:	movsxd rdx,r8d
  427be7:	mov    rsi,rcx
  427bea:	mov    r13,r9
  427bed:	mov    r14d,DWORD PTR [r12]
  427bf1:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  427bf6:	mov    rax,QWORD PTR [rbx+0x28]
  427bfa:	inc    DWORD PTR [rbx+0x38]
  427bfd:	lea    rdx,[rax+0x1]
  427c01:	mov    QWORD PTR [rbx+0x28],rdx
  427c05:	mov    BYTE PTR [rax],0x5b
  427c08:	test   r14d,r14d
  427c0b:	je     427cd0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x150>
  427c11:	cmp    BYTE PTR [rbx+0x31],0x0
  427c15:	mov    rax,QWORD PTR [rbx+0x28]
  427c19:	jne    427d60 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1e0>
  427c1f:	cmp    QWORD PTR [rbx+0x20],rax
  427c23:	ja     427c2d <flatcc_json_printer_uint16_enum_vector_field@@Base+0xad>
  427c25:	xor    esi,esi
  427c27:	mov    rdi,rbx
  427c2a:	call   QWORD PTR [rbx+0x48]
  427c2d:	movzx  esi,WORD PTR [r12+0x4]
  427c33:	mov    rdi,rbx
  427c36:	call   r13
  427c39:	lea    rbp,[r12+0x6]
  427c3e:	lea    eax,[r14-0x2]
  427c42:	cmp    r14d,0x1
  427c46:	je     427cd0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x150>
  427c4c:	lea    r14,[r12+rax*2+0x8]
  427c51:	jmp    427c7d <flatcc_json_printer_uint16_enum_vector_field@@Base+0xfd>
  427c53:	nop    DWORD PTR [rax+rax*1+0x0]
  427c58:	mov    rax,QWORD PTR [rbx+0x20]
  427c5c:	cmp    QWORD PTR [rbx+0x28],rax
  427c60:	jb     427c6a <flatcc_json_printer_uint16_enum_vector_field@@Base+0xea>
  427c62:	xor    esi,esi
  427c64:	mov    rdi,rbx
  427c67:	call   QWORD PTR [rbx+0x48]
  427c6a:	movzx  esi,WORD PTR [rbp+0x0]
  427c6e:	mov    rdi,rbx
  427c71:	add    rbp,0x2
  427c75:	call   r13
  427c78:	cmp    rbp,r14
  427c7b:	je     427cd0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x150>
  427c7d:	mov    rax,QWORD PTR [rbx+0x28]
  427c81:	lea    rdx,[rax+0x1]
  427c85:	mov    QWORD PTR [rbx+0x28],rdx
  427c89:	mov    BYTE PTR [rax],0x2c
  427c8c:	cmp    BYTE PTR [rbx+0x31],0x0
  427c90:	je     427c58 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xd8>
  427c92:	mov    rax,QWORD PTR [rbx+0x28]
  427c96:	lea    rdx,[rax+0x1]
  427c9a:	mov    QWORD PTR [rbx+0x28],rdx
  427c9e:	mov    BYTE PTR [rax],0xa
  427ca1:	movzx  r12d,BYTE PTR [rbx+0x31]
  427ca6:	mov    rdi,QWORD PTR [rbx+0x28]
  427caa:	imul   r12d,DWORD PTR [rbx+0x38]
  427caf:	movsxd r12,r12d
  427cb2:	lea    rax,[rdi+r12*1]
  427cb6:	cmp    QWORD PTR [rbx+0x20],rax
  427cba:	jae    427d00 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x180>
  427cbc:	mov    rsi,r12
  427cbf:	mov    rdi,rbx
  427cc2:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427cc7:	jmp    427c6a <flatcc_json_printer_uint16_enum_vector_field@@Base+0xea>
  427cc9:	nop    DWORD PTR [rax+0x0]
  427cd0:	mov    rax,QWORD PTR [rbx+0x28]
  427cd4:	cmp    BYTE PTR [rbx+0x31],0x0
  427cd8:	lea    rdx,[rax+0x1]
  427cdc:	jne    427d20 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1a0>
  427cde:	mov    QWORD PTR [rbx+0x28],rdx
  427ce2:	mov    BYTE PTR [rax],0x5d
  427ce5:	pop    rbx
  427ce6:	pop    rbp
  427ce7:	pop    r12
  427ce9:	pop    r13
  427ceb:	pop    r14
  427ced:	ret    
  427cee:	xchg   ax,ax
  427cf0:	ret    
  427cf1:	nop    DWORD PTR [rax+0x0]
  427cf8:	jmp    425f60 <flatcc_json_printer_uint16_vector_field@@Base>
  427cfd:	nop    DWORD PTR [rax]
  427d00:	mov    rdx,r12
  427d03:	mov    esi,0x20
  427d08:	call   4061c0 <memset@plt>
  427d0d:	add    QWORD PTR [rbx+0x28],r12
  427d11:	jmp    427c6a <flatcc_json_printer_uint16_enum_vector_field@@Base+0xea>
  427d16:	nop    WORD PTR cs:[rax+rax*1+0x0]
  427d20:	mov    QWORD PTR [rbx+0x28],rdx
  427d24:	mov    BYTE PTR [rax],0xa
  427d27:	mov    eax,DWORD PTR [rbx+0x38]
  427d2a:	mov    rdi,QWORD PTR [rbx+0x28]
  427d2e:	lea    ebp,[rax-0x1]
  427d31:	movzx  eax,BYTE PTR [rbx+0x31]
  427d35:	mov    DWORD PTR [rbx+0x38],ebp
  427d38:	imul   eax,ebp
  427d3b:	movsxd rbp,eax
  427d3e:	lea    rax,[rdi+rbp*1]
  427d42:	cmp    QWORD PTR [rbx+0x20],rax
  427d46:	jae    427d80 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x200>
  427d48:	mov    rsi,rbp
  427d4b:	mov    rdi,rbx
  427d4e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427d53:	mov    rax,QWORD PTR [rbx+0x28]
  427d57:	lea    rdx,[rax+0x1]
  427d5b:	jmp    427cde <flatcc_json_printer_uint16_enum_vector_field@@Base+0x15e>
  427d60:	lea    rdx,[rax+0x1]
  427d64:	mov    QWORD PTR [rbx+0x28],rdx
  427d68:	mov    BYTE PTR [rax],0xa
  427d6b:	mov    rdi,rbx
  427d6e:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  427d73:	jmp    427c2d <flatcc_json_printer_uint16_enum_vector_field@@Base+0xad>
  427d78:	nop    DWORD PTR [rax+rax*1+0x0]
  427d80:	mov    rdx,rbp
  427d83:	mov    esi,0x20
  427d88:	call   4061c0 <memset@plt>
  427d8d:	mov    rax,QWORD PTR [rbx+0x28]
  427d91:	add    rax,rbp
  427d94:	lea    rdx,[rax+0x1]
  427d98:	jmp    427cde <flatcc_json_printer_uint16_enum_vector_field@@Base+0x15e>
  427d9d:	nop    DWORD PTR [rax]

0000000000427da0 <flatcc_json_printer_uint32_enum_vector_field@@Base>:
  427da0:	endbr64 
  427da4:	cmp    BYTE PTR [rdi+0x33],0x0
  427da8:	jne    427f08 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x168>
  427dae:	lea    eax,[rdx+rdx*1+0x4]
  427db2:	cmp    eax,DWORD PTR [rsi+0x10]
  427db5:	jge    427f00 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x160>
  427dbb:	mov    rdx,QWORD PTR [rsi+0x8]
  427dbf:	movzx  eax,WORD PTR [rdx+rax*1]
  427dc3:	test   ax,ax
  427dc6:	je     427f00 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x160>
  427dcc:	add    rax,QWORD PTR [rsi]
  427dcf:	je     427f00 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x160>
  427dd5:	push   r14
  427dd7:	push   r13
  427dd9:	push   r12
  427ddb:	push   rbp
  427ddc:	push   rbx
  427ddd:	mov    edx,DWORD PTR [rsi+0x18]
  427de0:	lea    r10d,[rdx+0x1]
  427de4:	mov    DWORD PTR [rsi+0x18],r10d
  427de8:	test   edx,edx
  427dea:	je     427dfb <flatcc_json_printer_uint32_enum_vector_field@@Base+0x5b>
  427dec:	mov    rdx,QWORD PTR [rdi+0x28]
  427df0:	lea    rsi,[rdx+0x1]
  427df4:	mov    QWORD PTR [rdi+0x28],rsi
  427df8:	mov    BYTE PTR [rdx],0x2c
  427dfb:	mov    r12d,DWORD PTR [rax]
  427dfe:	mov    rbx,rdi
  427e01:	add    r12,rax
  427e04:	movsxd rdx,r8d
  427e07:	mov    rsi,rcx
  427e0a:	mov    r13,r9
  427e0d:	mov    r14d,DWORD PTR [r12]
  427e11:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  427e16:	mov    rax,QWORD PTR [rbx+0x28]
  427e1a:	inc    DWORD PTR [rbx+0x38]
  427e1d:	lea    rdx,[rax+0x1]
  427e21:	mov    QWORD PTR [rbx+0x28],rdx
  427e25:	mov    BYTE PTR [rax],0x5b
  427e28:	test   r14d,r14d
  427e2b:	je     427ee0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x140>
  427e31:	cmp    BYTE PTR [rbx+0x31],0x0
  427e35:	mov    rax,QWORD PTR [rbx+0x28]
  427e39:	jne    427f70 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d0>
  427e3f:	cmp    QWORD PTR [rbx+0x20],rax
  427e43:	ja     427e4d <flatcc_json_printer_uint32_enum_vector_field@@Base+0xad>
  427e45:	xor    esi,esi
  427e47:	mov    rdi,rbx
  427e4a:	call   QWORD PTR [rbx+0x48]
  427e4d:	mov    esi,DWORD PTR [r12+0x4]
  427e52:	mov    rdi,rbx
  427e55:	call   r13
  427e58:	lea    rbp,[r12+0x8]
  427e5d:	lea    eax,[r14-0x2]
  427e61:	cmp    r14d,0x1
  427e65:	je     427ee0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x140>
  427e67:	lea    r14,[r12+rax*4+0xc]
  427e6c:	jmp    427e94 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
  427e6e:	xchg   ax,ax
  427e70:	mov    rax,QWORD PTR [rbx+0x20]
  427e74:	cmp    QWORD PTR [rbx+0x28],rax
  427e78:	jb     427e82 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xe2>
  427e7a:	xor    esi,esi
  427e7c:	mov    rdi,rbx
  427e7f:	call   QWORD PTR [rbx+0x48]
  427e82:	mov    esi,DWORD PTR [rbp+0x0]
  427e85:	mov    rdi,rbx
  427e88:	add    rbp,0x4
  427e8c:	call   r13
  427e8f:	cmp    rbp,r14
  427e92:	je     427ee0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x140>
  427e94:	mov    rax,QWORD PTR [rbx+0x28]
  427e98:	lea    rdx,[rax+0x1]
  427e9c:	mov    QWORD PTR [rbx+0x28],rdx
  427ea0:	mov    BYTE PTR [rax],0x2c
  427ea3:	cmp    BYTE PTR [rbx+0x31],0x0
  427ea7:	je     427e70 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xd0>
  427ea9:	mov    rax,QWORD PTR [rbx+0x28]
  427ead:	lea    rdx,[rax+0x1]
  427eb1:	mov    QWORD PTR [rbx+0x28],rdx
  427eb5:	mov    BYTE PTR [rax],0xa
  427eb8:	movzx  r12d,BYTE PTR [rbx+0x31]
  427ebd:	mov    rdi,QWORD PTR [rbx+0x28]
  427ec1:	imul   r12d,DWORD PTR [rbx+0x38]
  427ec6:	movsxd r12,r12d
  427ec9:	lea    rax,[rdi+r12*1]
  427ecd:	cmp    QWORD PTR [rbx+0x20],rax
  427ed1:	jae    427f10 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x170>
  427ed3:	mov    rsi,r12
  427ed6:	mov    rdi,rbx
  427ed9:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427ede:	jmp    427e82 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xe2>
  427ee0:	mov    rax,QWORD PTR [rbx+0x28]
  427ee4:	cmp    BYTE PTR [rbx+0x31],0x0
  427ee8:	lea    rdx,[rax+0x1]
  427eec:	jne    427f30 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x190>
  427eee:	mov    QWORD PTR [rbx+0x28],rdx
  427ef2:	mov    BYTE PTR [rax],0x5d
  427ef5:	pop    rbx
  427ef6:	pop    rbp
  427ef7:	pop    r12
  427ef9:	pop    r13
  427efb:	pop    r14
  427efd:	ret    
  427efe:	xchg   ax,ax
  427f00:	ret    
  427f01:	nop    DWORD PTR [rax+0x0]
  427f08:	jmp    4261d0 <flatcc_json_printer_uint32_vector_field@@Base>
  427f0d:	nop    DWORD PTR [rax]
  427f10:	mov    rdx,r12
  427f13:	mov    esi,0x20
  427f18:	call   4061c0 <memset@plt>
  427f1d:	add    QWORD PTR [rbx+0x28],r12
  427f21:	jmp    427e82 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xe2>
  427f26:	nop    WORD PTR cs:[rax+rax*1+0x0]
  427f30:	mov    QWORD PTR [rbx+0x28],rdx
  427f34:	mov    BYTE PTR [rax],0xa
  427f37:	mov    eax,DWORD PTR [rbx+0x38]
  427f3a:	mov    rdi,QWORD PTR [rbx+0x28]
  427f3e:	lea    ebp,[rax-0x1]
  427f41:	movzx  eax,BYTE PTR [rbx+0x31]
  427f45:	mov    DWORD PTR [rbx+0x38],ebp
  427f48:	imul   eax,ebp
  427f4b:	movsxd rbp,eax
  427f4e:	lea    rax,[rdi+rbp*1]
  427f52:	cmp    QWORD PTR [rbx+0x20],rax
  427f56:	jae    427f90 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1f0>
  427f58:	mov    rsi,rbp
  427f5b:	mov    rdi,rbx
  427f5e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427f63:	mov    rax,QWORD PTR [rbx+0x28]
  427f67:	lea    rdx,[rax+0x1]
  427f6b:	jmp    427eee <flatcc_json_printer_uint32_enum_vector_field@@Base+0x14e>
  427f6d:	nop    DWORD PTR [rax]
  427f70:	lea    rdx,[rax+0x1]
  427f74:	mov    QWORD PTR [rbx+0x28],rdx
  427f78:	mov    BYTE PTR [rax],0xa
  427f7b:	mov    rdi,rbx
  427f7e:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  427f83:	jmp    427e4d <flatcc_json_printer_uint32_enum_vector_field@@Base+0xad>
  427f88:	nop    DWORD PTR [rax+rax*1+0x0]
  427f90:	mov    rdx,rbp
  427f93:	mov    esi,0x20
  427f98:	call   4061c0 <memset@plt>
  427f9d:	mov    rax,QWORD PTR [rbx+0x28]
  427fa1:	add    rax,rbp
  427fa4:	lea    rdx,[rax+0x1]
  427fa8:	jmp    427eee <flatcc_json_printer_uint32_enum_vector_field@@Base+0x14e>
  427fad:	nop    DWORD PTR [rax]

0000000000427fb0 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
  427fb0:	endbr64 
  427fb4:	cmp    BYTE PTR [rdi+0x33],0x0
  427fb8:	jne    428128 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x178>
  427fbe:	lea    eax,[rdx+rdx*1+0x4]
  427fc2:	cmp    eax,DWORD PTR [rsi+0x10]
  427fc5:	jge    428120 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x170>
  427fcb:	mov    rdx,QWORD PTR [rsi+0x8]
  427fcf:	movzx  eax,WORD PTR [rdx+rax*1]
  427fd3:	test   ax,ax
  427fd6:	je     428120 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x170>
  427fdc:	add    rax,QWORD PTR [rsi]
  427fdf:	je     428120 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x170>
  427fe5:	push   r14
  427fe7:	push   r13
  427fe9:	push   r12
  427feb:	push   rbp
  427fec:	push   rbx
  427fed:	mov    edx,DWORD PTR [rsi+0x18]
  427ff0:	lea    r10d,[rdx+0x1]
  427ff4:	mov    DWORD PTR [rsi+0x18],r10d
  427ff8:	test   edx,edx
  427ffa:	je     42800b <flatcc_json_printer_uint64_enum_vector_field@@Base+0x5b>
  427ffc:	mov    rdx,QWORD PTR [rdi+0x28]
  428000:	lea    rsi,[rdx+0x1]
  428004:	mov    QWORD PTR [rdi+0x28],rsi
  428008:	mov    BYTE PTR [rdx],0x2c
  42800b:	mov    r12d,DWORD PTR [rax]
  42800e:	mov    rbx,rdi
  428011:	add    r12,rax
  428014:	movsxd rdx,r8d
  428017:	mov    rsi,rcx
  42801a:	mov    r13,r9
  42801d:	mov    r14d,DWORD PTR [r12]
  428021:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  428026:	mov    rax,QWORD PTR [rbx+0x28]
  42802a:	inc    DWORD PTR [rbx+0x38]
  42802d:	lea    rdx,[rax+0x1]
  428031:	mov    QWORD PTR [rbx+0x28],rdx
  428035:	mov    BYTE PTR [rax],0x5b
  428038:	test   r14d,r14d
  42803b:	je     428100 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x150>
  428041:	cmp    BYTE PTR [rbx+0x31],0x0
  428045:	mov    rax,QWORD PTR [rbx+0x28]
  428049:	jne    428190 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1e0>
  42804f:	cmp    QWORD PTR [rbx+0x20],rax
  428053:	ja     42805d <flatcc_json_printer_uint64_enum_vector_field@@Base+0xad>
  428055:	xor    esi,esi
  428057:	mov    rdi,rbx
  42805a:	call   QWORD PTR [rbx+0x48]
  42805d:	mov    rsi,QWORD PTR [r12+0x4]
  428062:	mov    rdi,rbx
  428065:	call   r13
  428068:	lea    rbp,[r12+0xc]
  42806d:	lea    eax,[r14-0x2]
  428071:	cmp    r14d,0x1
  428075:	je     428100 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x150>
  42807b:	lea    r14,[r12+rax*8+0x14]
  428080:	jmp    4280ad <flatcc_json_printer_uint64_enum_vector_field@@Base+0xfd>
  428082:	nop    WORD PTR [rax+rax*1+0x0]
  428088:	mov    rax,QWORD PTR [rbx+0x20]
  42808c:	cmp    QWORD PTR [rbx+0x28],rax
  428090:	jb     42809a <flatcc_json_printer_uint64_enum_vector_field@@Base+0xea>
  428092:	xor    esi,esi
  428094:	mov    rdi,rbx
  428097:	call   QWORD PTR [rbx+0x48]
  42809a:	mov    rsi,QWORD PTR [rbp+0x0]
  42809e:	mov    rdi,rbx
  4280a1:	add    rbp,0x8
  4280a5:	call   r13
  4280a8:	cmp    rbp,r14
  4280ab:	je     428100 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x150>
  4280ad:	mov    rax,QWORD PTR [rbx+0x28]
  4280b1:	lea    rdx,[rax+0x1]
  4280b5:	mov    QWORD PTR [rbx+0x28],rdx
  4280b9:	mov    BYTE PTR [rax],0x2c
  4280bc:	cmp    BYTE PTR [rbx+0x31],0x0
  4280c0:	je     428088 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xd8>
  4280c2:	mov    rax,QWORD PTR [rbx+0x28]
  4280c6:	lea    rdx,[rax+0x1]
  4280ca:	mov    QWORD PTR [rbx+0x28],rdx
  4280ce:	mov    BYTE PTR [rax],0xa
  4280d1:	movzx  r12d,BYTE PTR [rbx+0x31]
  4280d6:	mov    rdi,QWORD PTR [rbx+0x28]
  4280da:	imul   r12d,DWORD PTR [rbx+0x38]
  4280df:	movsxd r12,r12d
  4280e2:	lea    rax,[rdi+r12*1]
  4280e6:	cmp    QWORD PTR [rbx+0x20],rax
  4280ea:	jae    428130 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x180>
  4280ec:	mov    rsi,r12
  4280ef:	mov    rdi,rbx
  4280f2:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4280f7:	jmp    42809a <flatcc_json_printer_uint64_enum_vector_field@@Base+0xea>
  4280f9:	nop    DWORD PTR [rax+0x0]
  428100:	mov    rax,QWORD PTR [rbx+0x28]
  428104:	cmp    BYTE PTR [rbx+0x31],0x0
  428108:	lea    rdx,[rax+0x1]
  42810c:	jne    428150 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1a0>
  42810e:	mov    QWORD PTR [rbx+0x28],rdx
  428112:	mov    BYTE PTR [rax],0x5d
  428115:	pop    rbx
  428116:	pop    rbp
  428117:	pop    r12
  428119:	pop    r13
  42811b:	pop    r14
  42811d:	ret    
  42811e:	xchg   ax,ax
  428120:	ret    
  428121:	nop    DWORD PTR [rax+0x0]
  428128:	jmp    426430 <flatcc_json_printer_uint64_vector_field@@Base>
  42812d:	nop    DWORD PTR [rax]
  428130:	mov    rdx,r12
  428133:	mov    esi,0x20
  428138:	call   4061c0 <memset@plt>
  42813d:	add    QWORD PTR [rbx+0x28],r12
  428141:	jmp    42809a <flatcc_json_printer_uint64_enum_vector_field@@Base+0xea>
  428146:	nop    WORD PTR cs:[rax+rax*1+0x0]
  428150:	mov    QWORD PTR [rbx+0x28],rdx
  428154:	mov    BYTE PTR [rax],0xa
  428157:	mov    eax,DWORD PTR [rbx+0x38]
  42815a:	mov    rdi,QWORD PTR [rbx+0x28]
  42815e:	lea    ebp,[rax-0x1]
  428161:	movzx  eax,BYTE PTR [rbx+0x31]
  428165:	mov    DWORD PTR [rbx+0x38],ebp
  428168:	imul   eax,ebp
  42816b:	movsxd rbp,eax
  42816e:	lea    rax,[rdi+rbp*1]
  428172:	cmp    QWORD PTR [rbx+0x20],rax
  428176:	jae    4281b0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x200>
  428178:	mov    rsi,rbp
  42817b:	mov    rdi,rbx
  42817e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428183:	mov    rax,QWORD PTR [rbx+0x28]
  428187:	lea    rdx,[rax+0x1]
  42818b:	jmp    42810e <flatcc_json_printer_uint64_enum_vector_field@@Base+0x15e>
  428190:	lea    rdx,[rax+0x1]
  428194:	mov    QWORD PTR [rbx+0x28],rdx
  428198:	mov    BYTE PTR [rax],0xa
  42819b:	mov    rdi,rbx
  42819e:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  4281a3:	jmp    42805d <flatcc_json_printer_uint64_enum_vector_field@@Base+0xad>
  4281a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4281b0:	mov    rdx,rbp
  4281b3:	mov    esi,0x20
  4281b8:	call   4061c0 <memset@plt>
  4281bd:	mov    rax,QWORD PTR [rbx+0x28]
  4281c1:	add    rax,rbp
  4281c4:	lea    rdx,[rax+0x1]
  4281c8:	jmp    42810e <flatcc_json_printer_uint64_enum_vector_field@@Base+0x15e>
  4281cd:	nop    DWORD PTR [rax]

00000000004281d0 <flatcc_json_printer_int8_enum_vector_field@@Base>:
  4281d0:	endbr64 
  4281d4:	cmp    BYTE PTR [rdi+0x33],0x0
  4281d8:	jne    428338 <flatcc_json_printer_int8_enum_vector_field@@Base+0x168>
  4281de:	lea    eax,[rdx+rdx*1+0x4]
  4281e2:	cmp    eax,DWORD PTR [rsi+0x10]
  4281e5:	jge    428330 <flatcc_json_printer_int8_enum_vector_field@@Base+0x160>
  4281eb:	mov    rdx,QWORD PTR [rsi+0x8]
  4281ef:	movzx  eax,WORD PTR [rdx+rax*1]
  4281f3:	test   ax,ax
  4281f6:	je     428330 <flatcc_json_printer_int8_enum_vector_field@@Base+0x160>
  4281fc:	add    rax,QWORD PTR [rsi]
  4281ff:	je     428330 <flatcc_json_printer_int8_enum_vector_field@@Base+0x160>
  428205:	push   r14
  428207:	push   r13
  428209:	push   r12
  42820b:	push   rbp
  42820c:	push   rbx
  42820d:	mov    edx,DWORD PTR [rsi+0x18]
  428210:	lea    r10d,[rdx+0x1]
  428214:	mov    DWORD PTR [rsi+0x18],r10d
  428218:	test   edx,edx
  42821a:	je     42822b <flatcc_json_printer_int8_enum_vector_field@@Base+0x5b>
  42821c:	mov    rdx,QWORD PTR [rdi+0x28]
  428220:	lea    rsi,[rdx+0x1]
  428224:	mov    QWORD PTR [rdi+0x28],rsi
  428228:	mov    BYTE PTR [rdx],0x2c
  42822b:	mov    r12d,DWORD PTR [rax]
  42822e:	mov    rbx,rdi
  428231:	add    r12,rax
  428234:	movsxd rdx,r8d
  428237:	mov    rsi,rcx
  42823a:	mov    r13,r9
  42823d:	mov    r14d,DWORD PTR [r12]
  428241:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  428246:	mov    rax,QWORD PTR [rbx+0x28]
  42824a:	inc    DWORD PTR [rbx+0x38]
  42824d:	lea    rdx,[rax+0x1]
  428251:	mov    QWORD PTR [rbx+0x28],rdx
  428255:	mov    BYTE PTR [rax],0x5b
  428258:	test   r14d,r14d
  42825b:	je     428310 <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
  428261:	cmp    BYTE PTR [rbx+0x31],0x0
  428265:	mov    rax,QWORD PTR [rbx+0x28]
  428269:	jne    4283a0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d0>
  42826f:	cmp    QWORD PTR [rbx+0x20],rax
  428273:	ja     42827d <flatcc_json_printer_int8_enum_vector_field@@Base+0xad>
  428275:	xor    esi,esi
  428277:	mov    rdi,rbx
  42827a:	call   QWORD PTR [rbx+0x48]
  42827d:	movsx  esi,BYTE PTR [r12+0x4]
  428283:	mov    rdi,rbx
  428286:	call   r13
  428289:	lea    rbp,[r12+0x5]
  42828e:	lea    eax,[r14-0x2]
  428292:	cmp    r14d,0x1
  428296:	je     428310 <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
  428298:	lea    r14,[r12+rax*1+0x6]
  42829d:	jmp    4282c4 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf4>
  42829f:	nop
  4282a0:	mov    rax,QWORD PTR [rbx+0x20]
  4282a4:	cmp    QWORD PTR [rbx+0x28],rax
  4282a8:	jb     4282b2 <flatcc_json_printer_int8_enum_vector_field@@Base+0xe2>
  4282aa:	xor    esi,esi
  4282ac:	mov    rdi,rbx
  4282af:	call   QWORD PTR [rbx+0x48]
  4282b2:	movsx  esi,BYTE PTR [rbp+0x0]
  4282b6:	mov    rdi,rbx
  4282b9:	inc    rbp
  4282bc:	call   r13
  4282bf:	cmp    rbp,r14
  4282c2:	je     428310 <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
  4282c4:	mov    rax,QWORD PTR [rbx+0x28]
  4282c8:	lea    rdx,[rax+0x1]
  4282cc:	mov    QWORD PTR [rbx+0x28],rdx
  4282d0:	mov    BYTE PTR [rax],0x2c
  4282d3:	cmp    BYTE PTR [rbx+0x31],0x0
  4282d7:	je     4282a0 <flatcc_json_printer_int8_enum_vector_field@@Base+0xd0>
  4282d9:	mov    rax,QWORD PTR [rbx+0x28]
  4282dd:	lea    rdx,[rax+0x1]
  4282e1:	mov    QWORD PTR [rbx+0x28],rdx
  4282e5:	mov    BYTE PTR [rax],0xa
  4282e8:	movzx  r12d,BYTE PTR [rbx+0x31]
  4282ed:	mov    rdi,QWORD PTR [rbx+0x28]
  4282f1:	imul   r12d,DWORD PTR [rbx+0x38]
  4282f6:	movsxd r12,r12d
  4282f9:	lea    rax,[rdi+r12*1]
  4282fd:	cmp    QWORD PTR [rbx+0x20],rax
  428301:	jae    428340 <flatcc_json_printer_int8_enum_vector_field@@Base+0x170>
  428303:	mov    rsi,r12
  428306:	mov    rdi,rbx
  428309:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42830e:	jmp    4282b2 <flatcc_json_printer_int8_enum_vector_field@@Base+0xe2>
  428310:	mov    rax,QWORD PTR [rbx+0x28]
  428314:	cmp    BYTE PTR [rbx+0x31],0x0
  428318:	lea    rdx,[rax+0x1]
  42831c:	jne    428360 <flatcc_json_printer_int8_enum_vector_field@@Base+0x190>
  42831e:	mov    QWORD PTR [rbx+0x28],rdx
  428322:	mov    BYTE PTR [rax],0x5d
  428325:	pop    rbx
  428326:	pop    rbp
  428327:	pop    r12
  428329:	pop    r13
  42832b:	pop    r14
  42832d:	ret    
  42832e:	xchg   ax,ax
  428330:	ret    
  428331:	nop    DWORD PTR [rax+0x0]
  428338:	jmp    426690 <flatcc_json_printer_int8_vector_field@@Base>
  42833d:	nop    DWORD PTR [rax]
  428340:	mov    rdx,r12
  428343:	mov    esi,0x20
  428348:	call   4061c0 <memset@plt>
  42834d:	add    QWORD PTR [rbx+0x28],r12
  428351:	jmp    4282b2 <flatcc_json_printer_int8_enum_vector_field@@Base+0xe2>
  428356:	nop    WORD PTR cs:[rax+rax*1+0x0]
  428360:	mov    QWORD PTR [rbx+0x28],rdx
  428364:	mov    BYTE PTR [rax],0xa
  428367:	mov    eax,DWORD PTR [rbx+0x38]
  42836a:	mov    rdi,QWORD PTR [rbx+0x28]
  42836e:	lea    ebp,[rax-0x1]
  428371:	movzx  eax,BYTE PTR [rbx+0x31]
  428375:	mov    DWORD PTR [rbx+0x38],ebp
  428378:	imul   eax,ebp
  42837b:	movsxd rbp,eax
  42837e:	lea    rax,[rdi+rbp*1]
  428382:	cmp    QWORD PTR [rbx+0x20],rax
  428386:	jae    4283c0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1f0>
  428388:	mov    rsi,rbp
  42838b:	mov    rdi,rbx
  42838e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428393:	mov    rax,QWORD PTR [rbx+0x28]
  428397:	lea    rdx,[rax+0x1]
  42839b:	jmp    42831e <flatcc_json_printer_int8_enum_vector_field@@Base+0x14e>
  42839d:	nop    DWORD PTR [rax]
  4283a0:	lea    rdx,[rax+0x1]
  4283a4:	mov    QWORD PTR [rbx+0x28],rdx
  4283a8:	mov    BYTE PTR [rax],0xa
  4283ab:	mov    rdi,rbx
  4283ae:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  4283b3:	jmp    42827d <flatcc_json_printer_int8_enum_vector_field@@Base+0xad>
  4283b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4283c0:	mov    rdx,rbp
  4283c3:	mov    esi,0x20
  4283c8:	call   4061c0 <memset@plt>
  4283cd:	mov    rax,QWORD PTR [rbx+0x28]
  4283d1:	add    rax,rbp
  4283d4:	lea    rdx,[rax+0x1]
  4283d8:	jmp    42831e <flatcc_json_printer_int8_enum_vector_field@@Base+0x14e>
  4283dd:	nop    DWORD PTR [rax]

00000000004283e0 <flatcc_json_printer_int16_enum_vector_field@@Base>:
  4283e0:	endbr64 
  4283e4:	cmp    BYTE PTR [rdi+0x33],0x0
  4283e8:	jne    428558 <flatcc_json_printer_int16_enum_vector_field@@Base+0x178>
  4283ee:	lea    eax,[rdx+rdx*1+0x4]
  4283f2:	cmp    eax,DWORD PTR [rsi+0x10]
  4283f5:	jge    428550 <flatcc_json_printer_int16_enum_vector_field@@Base+0x170>
  4283fb:	mov    rdx,QWORD PTR [rsi+0x8]
  4283ff:	movzx  eax,WORD PTR [rdx+rax*1]
  428403:	test   ax,ax
  428406:	je     428550 <flatcc_json_printer_int16_enum_vector_field@@Base+0x170>
  42840c:	add    rax,QWORD PTR [rsi]
  42840f:	je     428550 <flatcc_json_printer_int16_enum_vector_field@@Base+0x170>
  428415:	push   r14
  428417:	push   r13
  428419:	push   r12
  42841b:	push   rbp
  42841c:	push   rbx
  42841d:	mov    edx,DWORD PTR [rsi+0x18]
  428420:	lea    r10d,[rdx+0x1]
  428424:	mov    DWORD PTR [rsi+0x18],r10d
  428428:	test   edx,edx
  42842a:	je     42843b <flatcc_json_printer_int16_enum_vector_field@@Base+0x5b>
  42842c:	mov    rdx,QWORD PTR [rdi+0x28]
  428430:	lea    rsi,[rdx+0x1]
  428434:	mov    QWORD PTR [rdi+0x28],rsi
  428438:	mov    BYTE PTR [rdx],0x2c
  42843b:	mov    r12d,DWORD PTR [rax]
  42843e:	mov    rbx,rdi
  428441:	add    r12,rax
  428444:	movsxd rdx,r8d
  428447:	mov    rsi,rcx
  42844a:	mov    r13,r9
  42844d:	mov    r14d,DWORD PTR [r12]
  428451:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  428456:	mov    rax,QWORD PTR [rbx+0x28]
  42845a:	inc    DWORD PTR [rbx+0x38]
  42845d:	lea    rdx,[rax+0x1]
  428461:	mov    QWORD PTR [rbx+0x28],rdx
  428465:	mov    BYTE PTR [rax],0x5b
  428468:	test   r14d,r14d
  42846b:	je     428530 <flatcc_json_printer_int16_enum_vector_field@@Base+0x150>
  428471:	cmp    BYTE PTR [rbx+0x31],0x0
  428475:	mov    rax,QWORD PTR [rbx+0x28]
  428479:	jne    4285c0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1e0>
  42847f:	cmp    QWORD PTR [rbx+0x20],rax
  428483:	ja     42848d <flatcc_json_printer_int16_enum_vector_field@@Base+0xad>
  428485:	xor    esi,esi
  428487:	mov    rdi,rbx
  42848a:	call   QWORD PTR [rbx+0x48]
  42848d:	movsx  esi,WORD PTR [r12+0x4]
  428493:	mov    rdi,rbx
  428496:	call   r13
  428499:	lea    rbp,[r12+0x6]
  42849e:	lea    eax,[r14-0x2]
  4284a2:	cmp    r14d,0x1
  4284a6:	je     428530 <flatcc_json_printer_int16_enum_vector_field@@Base+0x150>
  4284ac:	lea    r14,[r12+rax*2+0x8]
  4284b1:	jmp    4284dd <flatcc_json_printer_int16_enum_vector_field@@Base+0xfd>
  4284b3:	nop    DWORD PTR [rax+rax*1+0x0]
  4284b8:	mov    rax,QWORD PTR [rbx+0x20]
  4284bc:	cmp    QWORD PTR [rbx+0x28],rax
  4284c0:	jb     4284ca <flatcc_json_printer_int16_enum_vector_field@@Base+0xea>
  4284c2:	xor    esi,esi
  4284c4:	mov    rdi,rbx
  4284c7:	call   QWORD PTR [rbx+0x48]
  4284ca:	movsx  esi,WORD PTR [rbp+0x0]
  4284ce:	mov    rdi,rbx
  4284d1:	add    rbp,0x2
  4284d5:	call   r13
  4284d8:	cmp    rbp,r14
  4284db:	je     428530 <flatcc_json_printer_int16_enum_vector_field@@Base+0x150>
  4284dd:	mov    rax,QWORD PTR [rbx+0x28]
  4284e1:	lea    rdx,[rax+0x1]
  4284e5:	mov    QWORD PTR [rbx+0x28],rdx
  4284e9:	mov    BYTE PTR [rax],0x2c
  4284ec:	cmp    BYTE PTR [rbx+0x31],0x0
  4284f0:	je     4284b8 <flatcc_json_printer_int16_enum_vector_field@@Base+0xd8>
  4284f2:	mov    rax,QWORD PTR [rbx+0x28]
  4284f6:	lea    rdx,[rax+0x1]
  4284fa:	mov    QWORD PTR [rbx+0x28],rdx
  4284fe:	mov    BYTE PTR [rax],0xa
  428501:	movzx  r12d,BYTE PTR [rbx+0x31]
  428506:	mov    rdi,QWORD PTR [rbx+0x28]
  42850a:	imul   r12d,DWORD PTR [rbx+0x38]
  42850f:	movsxd r12,r12d
  428512:	lea    rax,[rdi+r12*1]
  428516:	cmp    QWORD PTR [rbx+0x20],rax
  42851a:	jae    428560 <flatcc_json_printer_int16_enum_vector_field@@Base+0x180>
  42851c:	mov    rsi,r12
  42851f:	mov    rdi,rbx
  428522:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428527:	jmp    4284ca <flatcc_json_printer_int16_enum_vector_field@@Base+0xea>
  428529:	nop    DWORD PTR [rax+0x0]
  428530:	mov    rax,QWORD PTR [rbx+0x28]
  428534:	cmp    BYTE PTR [rbx+0x31],0x0
  428538:	lea    rdx,[rax+0x1]
  42853c:	jne    428580 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1a0>
  42853e:	mov    QWORD PTR [rbx+0x28],rdx
  428542:	mov    BYTE PTR [rax],0x5d
  428545:	pop    rbx
  428546:	pop    rbp
  428547:	pop    r12
  428549:	pop    r13
  42854b:	pop    r14
  42854d:	ret    
  42854e:	xchg   ax,ax
  428550:	ret    
  428551:	nop    DWORD PTR [rax+0x0]
  428558:	jmp    4268f0 <flatcc_json_printer_int16_vector_field@@Base>
  42855d:	nop    DWORD PTR [rax]
  428560:	mov    rdx,r12
  428563:	mov    esi,0x20
  428568:	call   4061c0 <memset@plt>
  42856d:	add    QWORD PTR [rbx+0x28],r12
  428571:	jmp    4284ca <flatcc_json_printer_int16_enum_vector_field@@Base+0xea>
  428576:	nop    WORD PTR cs:[rax+rax*1+0x0]
  428580:	mov    QWORD PTR [rbx+0x28],rdx
  428584:	mov    BYTE PTR [rax],0xa
  428587:	mov    eax,DWORD PTR [rbx+0x38]
  42858a:	mov    rdi,QWORD PTR [rbx+0x28]
  42858e:	lea    ebp,[rax-0x1]
  428591:	movzx  eax,BYTE PTR [rbx+0x31]
  428595:	mov    DWORD PTR [rbx+0x38],ebp
  428598:	imul   eax,ebp
  42859b:	movsxd rbp,eax
  42859e:	lea    rax,[rdi+rbp*1]
  4285a2:	cmp    QWORD PTR [rbx+0x20],rax
  4285a6:	jae    4285e0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x200>
  4285a8:	mov    rsi,rbp
  4285ab:	mov    rdi,rbx
  4285ae:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4285b3:	mov    rax,QWORD PTR [rbx+0x28]
  4285b7:	lea    rdx,[rax+0x1]
  4285bb:	jmp    42853e <flatcc_json_printer_int16_enum_vector_field@@Base+0x15e>
  4285c0:	lea    rdx,[rax+0x1]
  4285c4:	mov    QWORD PTR [rbx+0x28],rdx
  4285c8:	mov    BYTE PTR [rax],0xa
  4285cb:	mov    rdi,rbx
  4285ce:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  4285d3:	jmp    42848d <flatcc_json_printer_int16_enum_vector_field@@Base+0xad>
  4285d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4285e0:	mov    rdx,rbp
  4285e3:	mov    esi,0x20
  4285e8:	call   4061c0 <memset@plt>
  4285ed:	mov    rax,QWORD PTR [rbx+0x28]
  4285f1:	add    rax,rbp
  4285f4:	lea    rdx,[rax+0x1]
  4285f8:	jmp    42853e <flatcc_json_printer_int16_enum_vector_field@@Base+0x15e>
  4285fd:	nop    DWORD PTR [rax]

0000000000428600 <flatcc_json_printer_int32_enum_vector_field@@Base>:
  428600:	endbr64 
  428604:	cmp    BYTE PTR [rdi+0x33],0x0
  428608:	jne    428768 <flatcc_json_printer_int32_enum_vector_field@@Base+0x168>
  42860e:	lea    eax,[rdx+rdx*1+0x4]
  428612:	cmp    eax,DWORD PTR [rsi+0x10]
  428615:	jge    428760 <flatcc_json_printer_int32_enum_vector_field@@Base+0x160>
  42861b:	mov    rdx,QWORD PTR [rsi+0x8]
  42861f:	movzx  eax,WORD PTR [rdx+rax*1]
  428623:	test   ax,ax
  428626:	je     428760 <flatcc_json_printer_int32_enum_vector_field@@Base+0x160>
  42862c:	add    rax,QWORD PTR [rsi]
  42862f:	je     428760 <flatcc_json_printer_int32_enum_vector_field@@Base+0x160>
  428635:	push   r14
  428637:	push   r13
  428639:	push   r12
  42863b:	push   rbp
  42863c:	push   rbx
  42863d:	mov    edx,DWORD PTR [rsi+0x18]
  428640:	lea    r10d,[rdx+0x1]
  428644:	mov    DWORD PTR [rsi+0x18],r10d
  428648:	test   edx,edx
  42864a:	je     42865b <flatcc_json_printer_int32_enum_vector_field@@Base+0x5b>
  42864c:	mov    rdx,QWORD PTR [rdi+0x28]
  428650:	lea    rsi,[rdx+0x1]
  428654:	mov    QWORD PTR [rdi+0x28],rsi
  428658:	mov    BYTE PTR [rdx],0x2c
  42865b:	mov    r12d,DWORD PTR [rax]
  42865e:	mov    rbx,rdi
  428661:	add    r12,rax
  428664:	movsxd rdx,r8d
  428667:	mov    rsi,rcx
  42866a:	mov    r13,r9
  42866d:	mov    r14d,DWORD PTR [r12]
  428671:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  428676:	mov    rax,QWORD PTR [rbx+0x28]
  42867a:	inc    DWORD PTR [rbx+0x38]
  42867d:	lea    rdx,[rax+0x1]
  428681:	mov    QWORD PTR [rbx+0x28],rdx
  428685:	mov    BYTE PTR [rax],0x5b
  428688:	test   r14d,r14d
  42868b:	je     428740 <flatcc_json_printer_int32_enum_vector_field@@Base+0x140>
  428691:	cmp    BYTE PTR [rbx+0x31],0x0
  428695:	mov    rax,QWORD PTR [rbx+0x28]
  428699:	jne    4287d0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d0>
  42869f:	cmp    QWORD PTR [rbx+0x20],rax
  4286a3:	ja     4286ad <flatcc_json_printer_int32_enum_vector_field@@Base+0xad>
  4286a5:	xor    esi,esi
  4286a7:	mov    rdi,rbx
  4286aa:	call   QWORD PTR [rbx+0x48]
  4286ad:	mov    esi,DWORD PTR [r12+0x4]
  4286b2:	mov    rdi,rbx
  4286b5:	call   r13
  4286b8:	lea    rbp,[r12+0x8]
  4286bd:	lea    eax,[r14-0x2]
  4286c1:	cmp    r14d,0x1
  4286c5:	je     428740 <flatcc_json_printer_int32_enum_vector_field@@Base+0x140>
  4286c7:	lea    r14,[r12+rax*4+0xc]
  4286cc:	jmp    4286f4 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
  4286ce:	xchg   ax,ax
  4286d0:	mov    rax,QWORD PTR [rbx+0x20]
  4286d4:	cmp    QWORD PTR [rbx+0x28],rax
  4286d8:	jb     4286e2 <flatcc_json_printer_int32_enum_vector_field@@Base+0xe2>
  4286da:	xor    esi,esi
  4286dc:	mov    rdi,rbx
  4286df:	call   QWORD PTR [rbx+0x48]
  4286e2:	mov    esi,DWORD PTR [rbp+0x0]
  4286e5:	mov    rdi,rbx
  4286e8:	add    rbp,0x4
  4286ec:	call   r13
  4286ef:	cmp    rbp,r14
  4286f2:	je     428740 <flatcc_json_printer_int32_enum_vector_field@@Base+0x140>
  4286f4:	mov    rax,QWORD PTR [rbx+0x28]
  4286f8:	lea    rdx,[rax+0x1]
  4286fc:	mov    QWORD PTR [rbx+0x28],rdx
  428700:	mov    BYTE PTR [rax],0x2c
  428703:	cmp    BYTE PTR [rbx+0x31],0x0
  428707:	je     4286d0 <flatcc_json_printer_int32_enum_vector_field@@Base+0xd0>
  428709:	mov    rax,QWORD PTR [rbx+0x28]
  42870d:	lea    rdx,[rax+0x1]
  428711:	mov    QWORD PTR [rbx+0x28],rdx
  428715:	mov    BYTE PTR [rax],0xa
  428718:	movzx  r12d,BYTE PTR [rbx+0x31]
  42871d:	mov    rdi,QWORD PTR [rbx+0x28]
  428721:	imul   r12d,DWORD PTR [rbx+0x38]
  428726:	movsxd r12,r12d
  428729:	lea    rax,[rdi+r12*1]
  42872d:	cmp    QWORD PTR [rbx+0x20],rax
  428731:	jae    428770 <flatcc_json_printer_int32_enum_vector_field@@Base+0x170>
  428733:	mov    rsi,r12
  428736:	mov    rdi,rbx
  428739:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42873e:	jmp    4286e2 <flatcc_json_printer_int32_enum_vector_field@@Base+0xe2>
  428740:	mov    rax,QWORD PTR [rbx+0x28]
  428744:	cmp    BYTE PTR [rbx+0x31],0x0
  428748:	lea    rdx,[rax+0x1]
  42874c:	jne    428790 <flatcc_json_printer_int32_enum_vector_field@@Base+0x190>
  42874e:	mov    QWORD PTR [rbx+0x28],rdx
  428752:	mov    BYTE PTR [rax],0x5d
  428755:	pop    rbx
  428756:	pop    rbp
  428757:	pop    r12
  428759:	pop    r13
  42875b:	pop    r14
  42875d:	ret    
  42875e:	xchg   ax,ax
  428760:	ret    
  428761:	nop    DWORD PTR [rax+0x0]
  428768:	jmp    426b50 <flatcc_json_printer_int32_vector_field@@Base>
  42876d:	nop    DWORD PTR [rax]
  428770:	mov    rdx,r12
  428773:	mov    esi,0x20
  428778:	call   4061c0 <memset@plt>
  42877d:	add    QWORD PTR [rbx+0x28],r12
  428781:	jmp    4286e2 <flatcc_json_printer_int32_enum_vector_field@@Base+0xe2>
  428786:	nop    WORD PTR cs:[rax+rax*1+0x0]
  428790:	mov    QWORD PTR [rbx+0x28],rdx
  428794:	mov    BYTE PTR [rax],0xa
  428797:	mov    eax,DWORD PTR [rbx+0x38]
  42879a:	mov    rdi,QWORD PTR [rbx+0x28]
  42879e:	lea    ebp,[rax-0x1]
  4287a1:	movzx  eax,BYTE PTR [rbx+0x31]
  4287a5:	mov    DWORD PTR [rbx+0x38],ebp
  4287a8:	imul   eax,ebp
  4287ab:	movsxd rbp,eax
  4287ae:	lea    rax,[rdi+rbp*1]
  4287b2:	cmp    QWORD PTR [rbx+0x20],rax
  4287b6:	jae    4287f0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1f0>
  4287b8:	mov    rsi,rbp
  4287bb:	mov    rdi,rbx
  4287be:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4287c3:	mov    rax,QWORD PTR [rbx+0x28]
  4287c7:	lea    rdx,[rax+0x1]
  4287cb:	jmp    42874e <flatcc_json_printer_int32_enum_vector_field@@Base+0x14e>
  4287cd:	nop    DWORD PTR [rax]
  4287d0:	lea    rdx,[rax+0x1]
  4287d4:	mov    QWORD PTR [rbx+0x28],rdx
  4287d8:	mov    BYTE PTR [rax],0xa
  4287db:	mov    rdi,rbx
  4287de:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  4287e3:	jmp    4286ad <flatcc_json_printer_int32_enum_vector_field@@Base+0xad>
  4287e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4287f0:	mov    rdx,rbp
  4287f3:	mov    esi,0x20
  4287f8:	call   4061c0 <memset@plt>
  4287fd:	mov    rax,QWORD PTR [rbx+0x28]
  428801:	add    rax,rbp
  428804:	lea    rdx,[rax+0x1]
  428808:	jmp    42874e <flatcc_json_printer_int32_enum_vector_field@@Base+0x14e>
  42880d:	nop    DWORD PTR [rax]

0000000000428810 <flatcc_json_printer_int64_enum_vector_field@@Base>:
  428810:	endbr64 
  428814:	cmp    BYTE PTR [rdi+0x33],0x0
  428818:	jne    428988 <flatcc_json_printer_int64_enum_vector_field@@Base+0x178>
  42881e:	lea    eax,[rdx+rdx*1+0x4]
  428822:	cmp    eax,DWORD PTR [rsi+0x10]
  428825:	jge    428980 <flatcc_json_printer_int64_enum_vector_field@@Base+0x170>
  42882b:	mov    rdx,QWORD PTR [rsi+0x8]
  42882f:	movzx  eax,WORD PTR [rdx+rax*1]
  428833:	test   ax,ax
  428836:	je     428980 <flatcc_json_printer_int64_enum_vector_field@@Base+0x170>
  42883c:	add    rax,QWORD PTR [rsi]
  42883f:	je     428980 <flatcc_json_printer_int64_enum_vector_field@@Base+0x170>
  428845:	push   r14
  428847:	push   r13
  428849:	push   r12
  42884b:	push   rbp
  42884c:	push   rbx
  42884d:	mov    edx,DWORD PTR [rsi+0x18]
  428850:	lea    r10d,[rdx+0x1]
  428854:	mov    DWORD PTR [rsi+0x18],r10d
  428858:	test   edx,edx
  42885a:	je     42886b <flatcc_json_printer_int64_enum_vector_field@@Base+0x5b>
  42885c:	mov    rdx,QWORD PTR [rdi+0x28]
  428860:	lea    rsi,[rdx+0x1]
  428864:	mov    QWORD PTR [rdi+0x28],rsi
  428868:	mov    BYTE PTR [rdx],0x2c
  42886b:	mov    r12d,DWORD PTR [rax]
  42886e:	mov    rbx,rdi
  428871:	add    r12,rax
  428874:	movsxd rdx,r8d
  428877:	mov    rsi,rcx
  42887a:	mov    r13,r9
  42887d:	mov    r14d,DWORD PTR [r12]
  428881:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  428886:	mov    rax,QWORD PTR [rbx+0x28]
  42888a:	inc    DWORD PTR [rbx+0x38]
  42888d:	lea    rdx,[rax+0x1]
  428891:	mov    QWORD PTR [rbx+0x28],rdx
  428895:	mov    BYTE PTR [rax],0x5b
  428898:	test   r14d,r14d
  42889b:	je     428960 <flatcc_json_printer_int64_enum_vector_field@@Base+0x150>
  4288a1:	cmp    BYTE PTR [rbx+0x31],0x0
  4288a5:	mov    rax,QWORD PTR [rbx+0x28]
  4288a9:	jne    4289f0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1e0>
  4288af:	cmp    QWORD PTR [rbx+0x20],rax
  4288b3:	ja     4288bd <flatcc_json_printer_int64_enum_vector_field@@Base+0xad>
  4288b5:	xor    esi,esi
  4288b7:	mov    rdi,rbx
  4288ba:	call   QWORD PTR [rbx+0x48]
  4288bd:	mov    rsi,QWORD PTR [r12+0x4]
  4288c2:	mov    rdi,rbx
  4288c5:	call   r13
  4288c8:	lea    rbp,[r12+0xc]
  4288cd:	lea    eax,[r14-0x2]
  4288d1:	cmp    r14d,0x1
  4288d5:	je     428960 <flatcc_json_printer_int64_enum_vector_field@@Base+0x150>
  4288db:	lea    r14,[r12+rax*8+0x14]
  4288e0:	jmp    42890d <flatcc_json_printer_int64_enum_vector_field@@Base+0xfd>
  4288e2:	nop    WORD PTR [rax+rax*1+0x0]
  4288e8:	mov    rax,QWORD PTR [rbx+0x20]
  4288ec:	cmp    QWORD PTR [rbx+0x28],rax
  4288f0:	jb     4288fa <flatcc_json_printer_int64_enum_vector_field@@Base+0xea>
  4288f2:	xor    esi,esi
  4288f4:	mov    rdi,rbx
  4288f7:	call   QWORD PTR [rbx+0x48]
  4288fa:	mov    rsi,QWORD PTR [rbp+0x0]
  4288fe:	mov    rdi,rbx
  428901:	add    rbp,0x8
  428905:	call   r13
  428908:	cmp    rbp,r14
  42890b:	je     428960 <flatcc_json_printer_int64_enum_vector_field@@Base+0x150>
  42890d:	mov    rax,QWORD PTR [rbx+0x28]
  428911:	lea    rdx,[rax+0x1]
  428915:	mov    QWORD PTR [rbx+0x28],rdx
  428919:	mov    BYTE PTR [rax],0x2c
  42891c:	cmp    BYTE PTR [rbx+0x31],0x0
  428920:	je     4288e8 <flatcc_json_printer_int64_enum_vector_field@@Base+0xd8>
  428922:	mov    rax,QWORD PTR [rbx+0x28]
  428926:	lea    rdx,[rax+0x1]
  42892a:	mov    QWORD PTR [rbx+0x28],rdx
  42892e:	mov    BYTE PTR [rax],0xa
  428931:	movzx  r12d,BYTE PTR [rbx+0x31]
  428936:	mov    rdi,QWORD PTR [rbx+0x28]
  42893a:	imul   r12d,DWORD PTR [rbx+0x38]
  42893f:	movsxd r12,r12d
  428942:	lea    rax,[rdi+r12*1]
  428946:	cmp    QWORD PTR [rbx+0x20],rax
  42894a:	jae    428990 <flatcc_json_printer_int64_enum_vector_field@@Base+0x180>
  42894c:	mov    rsi,r12
  42894f:	mov    rdi,rbx
  428952:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428957:	jmp    4288fa <flatcc_json_printer_int64_enum_vector_field@@Base+0xea>
  428959:	nop    DWORD PTR [rax+0x0]
  428960:	mov    rax,QWORD PTR [rbx+0x28]
  428964:	cmp    BYTE PTR [rbx+0x31],0x0
  428968:	lea    rdx,[rax+0x1]
  42896c:	jne    4289b0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1a0>
  42896e:	mov    QWORD PTR [rbx+0x28],rdx
  428972:	mov    BYTE PTR [rax],0x5d
  428975:	pop    rbx
  428976:	pop    rbp
  428977:	pop    r12
  428979:	pop    r13
  42897b:	pop    r14
  42897d:	ret    
  42897e:	xchg   ax,ax
  428980:	ret    
  428981:	nop    DWORD PTR [rax+0x0]
  428988:	jmp    426da0 <flatcc_json_printer_int64_vector_field@@Base>
  42898d:	nop    DWORD PTR [rax]
  428990:	mov    rdx,r12
  428993:	mov    esi,0x20
  428998:	call   4061c0 <memset@plt>
  42899d:	add    QWORD PTR [rbx+0x28],r12
  4289a1:	jmp    4288fa <flatcc_json_printer_int64_enum_vector_field@@Base+0xea>
  4289a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4289b0:	mov    QWORD PTR [rbx+0x28],rdx
  4289b4:	mov    BYTE PTR [rax],0xa
  4289b7:	mov    eax,DWORD PTR [rbx+0x38]
  4289ba:	mov    rdi,QWORD PTR [rbx+0x28]
  4289be:	lea    ebp,[rax-0x1]
  4289c1:	movzx  eax,BYTE PTR [rbx+0x31]
  4289c5:	mov    DWORD PTR [rbx+0x38],ebp
  4289c8:	imul   eax,ebp
  4289cb:	movsxd rbp,eax
  4289ce:	lea    rax,[rdi+rbp*1]
  4289d2:	cmp    QWORD PTR [rbx+0x20],rax
  4289d6:	jae    428a10 <flatcc_json_printer_int64_enum_vector_field@@Base+0x200>
  4289d8:	mov    rsi,rbp
  4289db:	mov    rdi,rbx
  4289de:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4289e3:	mov    rax,QWORD PTR [rbx+0x28]
  4289e7:	lea    rdx,[rax+0x1]
  4289eb:	jmp    42896e <flatcc_json_printer_int64_enum_vector_field@@Base+0x15e>
  4289f0:	lea    rdx,[rax+0x1]
  4289f4:	mov    QWORD PTR [rbx+0x28],rdx
  4289f8:	mov    BYTE PTR [rax],0xa
  4289fb:	mov    rdi,rbx
  4289fe:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  428a03:	jmp    4288bd <flatcc_json_printer_int64_enum_vector_field@@Base+0xad>
  428a08:	nop    DWORD PTR [rax+rax*1+0x0]
  428a10:	mov    rdx,rbp
  428a13:	mov    esi,0x20
  428a18:	call   4061c0 <memset@plt>
  428a1d:	mov    rax,QWORD PTR [rbx+0x28]
  428a21:	add    rax,rbp
  428a24:	lea    rdx,[rax+0x1]
  428a28:	jmp    42896e <flatcc_json_printer_int64_enum_vector_field@@Base+0x15e>
  428a2d:	nop    DWORD PTR [rax]

0000000000428a30 <flatcc_json_printer_bool_enum_vector_field@@Base>:
  428a30:	endbr64 
  428a34:	cmp    BYTE PTR [rdi+0x33],0x0
  428a38:	jne    428b98 <flatcc_json_printer_bool_enum_vector_field@@Base+0x168>
  428a3e:	lea    eax,[rdx+rdx*1+0x4]
  428a42:	cmp    eax,DWORD PTR [rsi+0x10]
  428a45:	jge    428b90 <flatcc_json_printer_bool_enum_vector_field@@Base+0x160>
  428a4b:	mov    rdx,QWORD PTR [rsi+0x8]
  428a4f:	movzx  eax,WORD PTR [rdx+rax*1]
  428a53:	test   ax,ax
  428a56:	je     428b90 <flatcc_json_printer_bool_enum_vector_field@@Base+0x160>
  428a5c:	add    rax,QWORD PTR [rsi]
  428a5f:	je     428b90 <flatcc_json_printer_bool_enum_vector_field@@Base+0x160>
  428a65:	push   r14
  428a67:	push   r13
  428a69:	push   r12
  428a6b:	push   rbp
  428a6c:	push   rbx
  428a6d:	mov    edx,DWORD PTR [rsi+0x18]
  428a70:	lea    r10d,[rdx+0x1]
  428a74:	mov    DWORD PTR [rsi+0x18],r10d
  428a78:	test   edx,edx
  428a7a:	je     428a8b <flatcc_json_printer_bool_enum_vector_field@@Base+0x5b>
  428a7c:	mov    rdx,QWORD PTR [rdi+0x28]
  428a80:	lea    rsi,[rdx+0x1]
  428a84:	mov    QWORD PTR [rdi+0x28],rsi
  428a88:	mov    BYTE PTR [rdx],0x2c
  428a8b:	mov    r12d,DWORD PTR [rax]
  428a8e:	mov    rbx,rdi
  428a91:	add    r12,rax
  428a94:	movsxd rdx,r8d
  428a97:	mov    rsi,rcx
  428a9a:	mov    r13,r9
  428a9d:	mov    r14d,DWORD PTR [r12]
  428aa1:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  428aa6:	mov    rax,QWORD PTR [rbx+0x28]
  428aaa:	inc    DWORD PTR [rbx+0x38]
  428aad:	lea    rdx,[rax+0x1]
  428ab1:	mov    QWORD PTR [rbx+0x28],rdx
  428ab5:	mov    BYTE PTR [rax],0x5b
  428ab8:	test   r14d,r14d
  428abb:	je     428b70 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
  428ac1:	cmp    BYTE PTR [rbx+0x31],0x0
  428ac5:	mov    rax,QWORD PTR [rbx+0x28]
  428ac9:	jne    428c00 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d0>
  428acf:	cmp    QWORD PTR [rbx+0x20],rax
  428ad3:	ja     428add <flatcc_json_printer_bool_enum_vector_field@@Base+0xad>
  428ad5:	xor    esi,esi
  428ad7:	mov    rdi,rbx
  428ada:	call   QWORD PTR [rbx+0x48]
  428add:	movzx  esi,BYTE PTR [r12+0x4]
  428ae3:	mov    rdi,rbx
  428ae6:	call   r13
  428ae9:	lea    rbp,[r12+0x5]
  428aee:	lea    eax,[r14-0x2]
  428af2:	cmp    r14d,0x1
  428af6:	je     428b70 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
  428af8:	lea    r14,[r12+rax*1+0x6]
  428afd:	jmp    428b24 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf4>
  428aff:	nop
  428b00:	mov    rax,QWORD PTR [rbx+0x20]
  428b04:	cmp    QWORD PTR [rbx+0x28],rax
  428b08:	jb     428b12 <flatcc_json_printer_bool_enum_vector_field@@Base+0xe2>
  428b0a:	xor    esi,esi
  428b0c:	mov    rdi,rbx
  428b0f:	call   QWORD PTR [rbx+0x48]
  428b12:	movzx  esi,BYTE PTR [rbp+0x0]
  428b16:	mov    rdi,rbx
  428b19:	inc    rbp
  428b1c:	call   r13
  428b1f:	cmp    rbp,r14
  428b22:	je     428b70 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
  428b24:	mov    rax,QWORD PTR [rbx+0x28]
  428b28:	lea    rdx,[rax+0x1]
  428b2c:	mov    QWORD PTR [rbx+0x28],rdx
  428b30:	mov    BYTE PTR [rax],0x2c
  428b33:	cmp    BYTE PTR [rbx+0x31],0x0
  428b37:	je     428b00 <flatcc_json_printer_bool_enum_vector_field@@Base+0xd0>
  428b39:	mov    rax,QWORD PTR [rbx+0x28]
  428b3d:	lea    rdx,[rax+0x1]
  428b41:	mov    QWORD PTR [rbx+0x28],rdx
  428b45:	mov    BYTE PTR [rax],0xa
  428b48:	movzx  r12d,BYTE PTR [rbx+0x31]
  428b4d:	mov    rdi,QWORD PTR [rbx+0x28]
  428b51:	imul   r12d,DWORD PTR [rbx+0x38]
  428b56:	movsxd r12,r12d
  428b59:	lea    rax,[rdi+r12*1]
  428b5d:	cmp    QWORD PTR [rbx+0x20],rax
  428b61:	jae    428ba0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x170>
  428b63:	mov    rsi,r12
  428b66:	mov    rdi,rbx
  428b69:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428b6e:	jmp    428b12 <flatcc_json_printer_bool_enum_vector_field@@Base+0xe2>
  428b70:	mov    rax,QWORD PTR [rbx+0x28]
  428b74:	cmp    BYTE PTR [rbx+0x31],0x0
  428b78:	lea    rdx,[rax+0x1]
  428b7c:	jne    428bc0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x190>
  428b7e:	mov    QWORD PTR [rbx+0x28],rdx
  428b82:	mov    BYTE PTR [rax],0x5d
  428b85:	pop    rbx
  428b86:	pop    rbp
  428b87:	pop    r12
  428b89:	pop    r13
  428b8b:	pop    r14
  428b8d:	ret    
  428b8e:	xchg   ax,ax
  428b90:	ret    
  428b91:	nop    DWORD PTR [rax+0x0]
  428b98:	jmp    427000 <flatcc_json_printer_bool_vector_field@@Base>
  428b9d:	nop    DWORD PTR [rax]
  428ba0:	mov    rdx,r12
  428ba3:	mov    esi,0x20
  428ba8:	call   4061c0 <memset@plt>
  428bad:	add    QWORD PTR [rbx+0x28],r12
  428bb1:	jmp    428b12 <flatcc_json_printer_bool_enum_vector_field@@Base+0xe2>
  428bb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  428bc0:	mov    QWORD PTR [rbx+0x28],rdx
  428bc4:	mov    BYTE PTR [rax],0xa
  428bc7:	mov    eax,DWORD PTR [rbx+0x38]
  428bca:	mov    rdi,QWORD PTR [rbx+0x28]
  428bce:	lea    ebp,[rax-0x1]
  428bd1:	movzx  eax,BYTE PTR [rbx+0x31]
  428bd5:	mov    DWORD PTR [rbx+0x38],ebp
  428bd8:	imul   eax,ebp
  428bdb:	movsxd rbp,eax
  428bde:	lea    rax,[rdi+rbp*1]
  428be2:	cmp    QWORD PTR [rbx+0x20],rax
  428be6:	jae    428c20 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1f0>
  428be8:	mov    rsi,rbp
  428beb:	mov    rdi,rbx
  428bee:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428bf3:	mov    rax,QWORD PTR [rbx+0x28]
  428bf7:	lea    rdx,[rax+0x1]
  428bfb:	jmp    428b7e <flatcc_json_printer_bool_enum_vector_field@@Base+0x14e>
  428bfd:	nop    DWORD PTR [rax]
  428c00:	lea    rdx,[rax+0x1]
  428c04:	mov    QWORD PTR [rbx+0x28],rdx
  428c08:	mov    BYTE PTR [rax],0xa
  428c0b:	mov    rdi,rbx
  428c0e:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  428c13:	jmp    428add <flatcc_json_printer_bool_enum_vector_field@@Base+0xad>
  428c18:	nop    DWORD PTR [rax+rax*1+0x0]
  428c20:	mov    rdx,rbp
  428c23:	mov    esi,0x20
  428c28:	call   4061c0 <memset@plt>
  428c2d:	mov    rax,QWORD PTR [rbx+0x28]
  428c31:	add    rax,rbp
  428c34:	lea    rdx,[rax+0x1]
  428c38:	jmp    428b7e <flatcc_json_printer_bool_enum_vector_field@@Base+0x14e>
  428c3d:	nop    DWORD PTR [rax]

0000000000428c40 <flatcc_json_printer_struct_vector_field@@Base>:
  428c40:	endbr64 
  428c44:	push   r15
  428c46:	lea    eax,[rdx+rdx*1+0x4]
  428c4a:	push   r14
  428c4c:	push   r13
  428c4e:	push   r12
  428c50:	push   rbp
  428c51:	push   rbx
  428c52:	sub    rsp,0x8
  428c56:	mov    r14,QWORD PTR [rsp+0x40]
  428c5b:	cmp    eax,DWORD PTR [rsi+0x10]
  428c5e:	jge    428df9 <flatcc_json_printer_struct_vector_field@@Base+0x1b9>
  428c64:	mov    rdx,QWORD PTR [rsi+0x8]
  428c68:	movzx  eax,WORD PTR [rdx+rax*1]
  428c6c:	test   ax,ax
  428c6f:	je     428df9 <flatcc_json_printer_struct_vector_field@@Base+0x1b9>
  428c75:	add    rax,QWORD PTR [rsi]
  428c78:	je     428df9 <flatcc_json_printer_struct_vector_field@@Base+0x1b9>
  428c7e:	mov    edx,DWORD PTR [rsi+0x18]
  428c81:	lea    r10d,[rdx+0x1]
  428c85:	mov    DWORD PTR [rsi+0x18],r10d
  428c89:	test   edx,edx
  428c8b:	je     428c9c <flatcc_json_printer_struct_vector_field@@Base+0x5c>
  428c8d:	mov    rdx,QWORD PTR [rdi+0x28]
  428c91:	lea    rsi,[rdx+0x1]
  428c95:	mov    QWORD PTR [rdi+0x28],rsi
  428c99:	mov    BYTE PTR [rdx],0x2c
  428c9c:	mov    ebp,DWORD PTR [rax]
  428c9e:	mov    rbx,rdi
  428ca1:	add    rbp,rax
  428ca4:	movsxd rdx,r8d
  428ca7:	mov    rsi,rcx
  428caa:	mov    r13,r9
  428cad:	mov    r15d,DWORD PTR [rbp+0x0]
  428cb1:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  428cb6:	mov    rax,QWORD PTR [rbx+0x28]
  428cba:	inc    DWORD PTR [rbx+0x38]
  428cbd:	lea    rdx,[rax+0x1]
  428cc1:	mov    QWORD PTR [rbx+0x28],rdx
  428cc5:	mov    BYTE PTR [rax],0x5b
  428cc8:	test   r15d,r15d
  428ccb:	je     428de0 <flatcc_json_printer_struct_vector_field@@Base+0x1a0>
  428cd1:	cmp    BYTE PTR [rbx+0x31],0x0
  428cd5:	mov    rax,QWORD PTR [rbx+0x28]
  428cd9:	jne    428e10 <flatcc_json_printer_struct_vector_field@@Base+0x1d0>
  428cdf:	cmp    QWORD PTR [rbx+0x20],rax
  428ce3:	ja     428cf1 <flatcc_json_printer_struct_vector_field@@Base+0xb1>
  428ce5:	xor    esi,esi
  428ce7:	mov    rdi,rbx
  428cea:	call   QWORD PTR [rbx+0x48]
  428ced:	mov    rax,QWORD PTR [rbx+0x28]
  428cf1:	inc    DWORD PTR [rbx+0x38]
  428cf4:	lea    rdx,[rax+0x1]
  428cf8:	mov    QWORD PTR [rbx+0x28],rdx
  428cfc:	mov    BYTE PTR [rax],0x7b
  428cff:	add    rbp,0x4
  428d03:	mov    rsi,rbp
  428d06:	mov    rdi,rbx
  428d09:	call   r14
  428d0c:	cmp    BYTE PTR [rbx+0x31],0x0
  428d10:	jne    428f00 <flatcc_json_printer_struct_vector_field@@Base+0x2c0>
  428d16:	mov    rax,QWORD PTR [rbx+0x28]
  428d1a:	lea    r12d,[r15-0x2]
  428d1e:	lea    rdx,[rax+0x1]
  428d22:	mov    QWORD PTR [rbx+0x28],rdx
  428d26:	mov    BYTE PTR [rax],0x7d
  428d29:	cmp    r15d,0x1
  428d2d:	jne    428d87 <flatcc_json_printer_struct_vector_field@@Base+0x147>
  428d2f:	jmp    428de0 <flatcc_json_printer_struct_vector_field@@Base+0x1a0>
  428d34:	nop    DWORD PTR [rax+0x0]
  428d38:	mov    rsi,QWORD PTR [rbx+0x28]
  428d3c:	cmp    rsi,QWORD PTR [rbx+0x20]
  428d40:	jb     428d4e <flatcc_json_printer_struct_vector_field@@Base+0x10e>
  428d42:	xor    esi,esi
  428d44:	mov    rdi,rbx
  428d47:	call   QWORD PTR [rbx+0x48]
  428d4a:	mov    rsi,QWORD PTR [rbx+0x28]
  428d4e:	inc    DWORD PTR [rbx+0x38]
  428d51:	lea    rax,[rsi+0x1]
  428d55:	mov    QWORD PTR [rbx+0x28],rax
  428d59:	mov    BYTE PTR [rsi],0x7b
  428d5c:	mov    rdi,rbx
  428d5f:	mov    rsi,rbp
  428d62:	call   r14
  428d65:	cmp    BYTE PTR [rbx+0x31],0x0
  428d69:	jne    428e30 <flatcc_json_printer_struct_vector_field@@Base+0x1f0>
  428d6f:	mov    rsi,QWORD PTR [rbx+0x28]
  428d73:	lea    rax,[rsi+0x1]
  428d77:	dec    r12d
  428d7a:	mov    QWORD PTR [rbx+0x28],rax
  428d7e:	mov    BYTE PTR [rsi],0x7d
  428d81:	cmp    r12d,0xffffffff
  428d85:	je     428de0 <flatcc_json_printer_struct_vector_field@@Base+0x1a0>
  428d87:	mov    rax,QWORD PTR [rbx+0x28]
  428d8b:	add    rbp,r13
  428d8e:	lea    rdx,[rax+0x1]
  428d92:	mov    QWORD PTR [rbx+0x28],rdx
  428d96:	mov    BYTE PTR [rax],0x2c
  428d99:	cmp    BYTE PTR [rbx+0x31],0x0
  428d9d:	je     428d38 <flatcc_json_printer_struct_vector_field@@Base+0xf8>
  428d9f:	mov    rax,QWORD PTR [rbx+0x28]
  428da3:	lea    rdx,[rax+0x1]
  428da7:	mov    QWORD PTR [rbx+0x28],rdx
  428dab:	mov    BYTE PTR [rax],0xa
  428dae:	movzx  esi,BYTE PTR [rbx+0x31]
  428db2:	mov    rdi,QWORD PTR [rbx+0x28]
  428db6:	imul   esi,DWORD PTR [rbx+0x38]
  428dba:	movsxd r15,esi
  428dbd:	lea    rax,[rdi+r15*1]
  428dc1:	cmp    QWORD PTR [rbx+0x20],rax
  428dc5:	jae    428e78 <flatcc_json_printer_struct_vector_field@@Base+0x238>
  428dcb:	mov    rsi,r15
  428dce:	mov    rdi,rbx
  428dd1:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428dd6:	mov    rsi,QWORD PTR [rbx+0x28]
  428dda:	jmp    428d4e <flatcc_json_printer_struct_vector_field@@Base+0x10e>
  428ddf:	nop
  428de0:	mov    rax,QWORD PTR [rbx+0x28]
  428de4:	cmp    BYTE PTR [rbx+0x31],0x0
  428de8:	lea    rdx,[rax+0x1]
  428dec:	jne    428eb8 <flatcc_json_printer_struct_vector_field@@Base+0x278>
  428df2:	mov    QWORD PTR [rbx+0x28],rdx
  428df6:	mov    BYTE PTR [rax],0x5d
  428df9:	add    rsp,0x8
  428dfd:	pop    rbx
  428dfe:	pop    rbp
  428dff:	pop    r12
  428e01:	pop    r13
  428e03:	pop    r14
  428e05:	pop    r15
  428e07:	ret    
  428e08:	nop    DWORD PTR [rax+rax*1+0x0]
  428e10:	lea    rdx,[rax+0x1]
  428e14:	mov    QWORD PTR [rbx+0x28],rdx
  428e18:	mov    BYTE PTR [rax],0xa
  428e1b:	mov    rdi,rbx
  428e1e:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  428e23:	mov    rax,QWORD PTR [rbx+0x28]
  428e27:	jmp    428cf1 <flatcc_json_printer_struct_vector_field@@Base+0xb1>
  428e2c:	nop    DWORD PTR [rax+0x0]
  428e30:	mov    rax,QWORD PTR [rbx+0x28]
  428e34:	lea    rdx,[rax+0x1]
  428e38:	mov    QWORD PTR [rbx+0x28],rdx
  428e3c:	mov    BYTE PTR [rax],0xa
  428e3f:	mov    eax,DWORD PTR [rbx+0x38]
  428e42:	movzx  esi,BYTE PTR [rbx+0x31]
  428e46:	lea    r15d,[rax-0x1]
  428e4a:	imul   esi,r15d
  428e4e:	mov    rdi,QWORD PTR [rbx+0x28]
  428e52:	mov    DWORD PTR [rbx+0x38],r15d
  428e56:	movsxd r15,esi
  428e59:	lea    rax,[rdi+r15*1]
  428e5d:	cmp    QWORD PTR [rbx+0x20],rax
  428e61:	jae    428e98 <flatcc_json_printer_struct_vector_field@@Base+0x258>
  428e63:	mov    rsi,r15
  428e66:	mov    rdi,rbx
  428e69:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428e6e:	jmp    428d6f <flatcc_json_printer_struct_vector_field@@Base+0x12f>
  428e73:	nop    DWORD PTR [rax+rax*1+0x0]
  428e78:	mov    esi,0x20
  428e7d:	mov    rdx,r15
  428e80:	call   4061c0 <memset@plt>
  428e85:	mov    rsi,QWORD PTR [rbx+0x28]
  428e89:	add    rsi,r15
  428e8c:	jmp    428d4e <flatcc_json_printer_struct_vector_field@@Base+0x10e>
  428e91:	nop    DWORD PTR [rax+0x0]
  428e98:	mov    esi,0x20
  428e9d:	mov    rdx,r15
  428ea0:	call   4061c0 <memset@plt>
  428ea5:	mov    rsi,QWORD PTR [rbx+0x28]
  428ea9:	add    rsi,r15
  428eac:	jmp    428d73 <flatcc_json_printer_struct_vector_field@@Base+0x133>
  428eb1:	nop    DWORD PTR [rax+0x0]
  428eb8:	mov    QWORD PTR [rbx+0x28],rdx
  428ebc:	mov    BYTE PTR [rax],0xa
  428ebf:	mov    eax,DWORD PTR [rbx+0x38]
  428ec2:	mov    rdi,QWORD PTR [rbx+0x28]
  428ec6:	lea    ebp,[rax-0x1]
  428ec9:	movzx  eax,BYTE PTR [rbx+0x31]
  428ecd:	mov    DWORD PTR [rbx+0x38],ebp
  428ed0:	imul   eax,ebp
  428ed3:	movsxd rbp,eax
  428ed6:	lea    rax,[rdi+rbp*1]
  428eda:	cmp    QWORD PTR [rbx+0x20],rax
  428ede:	jae    428f20 <flatcc_json_printer_struct_vector_field@@Base+0x2e0>
  428ee0:	mov    rsi,rbp
  428ee3:	mov    rdi,rbx
  428ee6:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428eeb:	mov    rax,QWORD PTR [rbx+0x28]
  428eef:	lea    rdx,[rax+0x1]
  428ef3:	jmp    428df2 <flatcc_json_printer_struct_vector_field@@Base+0x1b2>
  428ef8:	nop    DWORD PTR [rax+rax*1+0x0]
  428f00:	mov    rax,QWORD PTR [rbx+0x28]
  428f04:	mov    rdi,rbx
  428f07:	lea    rdx,[rax+0x1]
  428f0b:	mov    QWORD PTR [rbx+0x28],rdx
  428f0f:	mov    BYTE PTR [rax],0xa
  428f12:	dec    DWORD PTR [rbx+0x38]
  428f15:	call   420400 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  428f1a:	jmp    428d16 <flatcc_json_printer_struct_vector_field@@Base+0xd6>
  428f1f:	nop
  428f20:	mov    rdx,rbp
  428f23:	mov    esi,0x20
  428f28:	call   4061c0 <memset@plt>
  428f2d:	mov    rax,QWORD PTR [rbx+0x28]
  428f31:	add    rax,rbp
  428f34:	lea    rdx,[rax+0x1]
  428f38:	jmp    428df2 <flatcc_json_printer_struct_vector_field@@Base+0x1b2>
  428f3d:	nop    DWORD PTR [rax]

0000000000428f40 <flatcc_json_printer_string_vector_field@@Base>:
  428f40:	endbr64 
  428f44:	lea    eax,[rdx+rdx*1+0x4]
  428f48:	cmp    eax,DWORD PTR [rsi+0x10]
  428f4b:	jge    429110 <flatcc_json_printer_string_vector_field@@Base+0x1d0>
  428f51:	mov    rdx,QWORD PTR [rsi+0x8]
  428f55:	movzx  eax,WORD PTR [rdx+rax*1]
  428f59:	test   ax,ax
  428f5c:	je     429110 <flatcc_json_printer_string_vector_field@@Base+0x1d0>
  428f62:	add    rax,QWORD PTR [rsi]
  428f65:	je     429110 <flatcc_json_printer_string_vector_field@@Base+0x1d0>
  428f6b:	push   r15
  428f6d:	push   r14
  428f6f:	push   r13
  428f71:	push   r12
  428f73:	push   rbp
  428f74:	push   rbx
  428f75:	sub    rsp,0x8
  428f79:	mov    r9d,DWORD PTR [rsi+0x18]
  428f7d:	lea    edx,[r9+0x1]
  428f81:	mov    DWORD PTR [rsi+0x18],edx
  428f84:	mov    rdx,QWORD PTR [rdi+0x28]
  428f88:	test   r9d,r9d
  428f8b:	je     428f9c <flatcc_json_printer_string_vector_field@@Base+0x5c>
  428f8d:	lea    rsi,[rdx+0x1]
  428f91:	mov    QWORD PTR [rdi+0x28],rsi
  428f95:	mov    BYTE PTR [rdx],0x2c
  428f98:	mov    rdx,QWORD PTR [rdi+0x28]
  428f9c:	mov    r12d,DWORD PTR [rax]
  428f9f:	mov    r15,rcx
  428fa2:	add    r12,rax
  428fa5:	cmp    BYTE PTR [rdi+0x31],0x0
  428fa9:	mov    rbx,rdi
  428fac:	mov    r13d,DWORD PTR [r12]
  428fb0:	movsxd rbp,r8d
  428fb3:	jne    4291d0 <flatcc_json_printer_string_vector_field@@Base+0x290>
  428fb9:	cmp    QWORD PTR [rdi+0x20],rdx
  428fbd:	jbe    429158 <flatcc_json_printer_string_vector_field@@Base+0x218>
  428fc3:	mov    BYTE PTR [rdx],0x22
  428fc6:	xor    edi,edi
  428fc8:	mov    rdx,rbp
  428fcb:	cmp    BYTE PTR [rbx+0x32],0x0
  428fcf:	sete   dil
  428fd3:	add    rdi,QWORD PTR [rbx+0x28]
  428fd7:	lea    rax,[rdi+rbp*1]
  428fdb:	mov    QWORD PTR [rbx+0x28],rdi
  428fdf:	mov    rsi,r15
  428fe2:	cmp    QWORD PTR [rbx+0x20],rax
  428fe6:	jbe    429140 <flatcc_json_printer_string_vector_field@@Base+0x200>
  428fec:	call   406210 <memcpy@plt>
  428ff1:	add    rbp,QWORD PTR [rbx+0x28]
  428ff5:	mov    QWORD PTR [rbx+0x28],rbp
  428ff9:	mov    BYTE PTR [rbp+0x0],0x22
  428ffd:	xor    eax,eax
  428fff:	cmp    BYTE PTR [rbx+0x32],0x0
  429003:	sete   al
  429006:	add    rax,QWORD PTR [rbx+0x28]
  42900a:	lea    rdx,[rax+0x1]
  42900e:	mov    QWORD PTR [rbx+0x28],rdx
  429012:	mov    BYTE PTR [rax],0x3a
  429015:	mov    rax,QWORD PTR [rbx+0x28]
  429019:	mov    BYTE PTR [rax],0x20
  42901c:	xor    eax,eax
  42901e:	cmp    BYTE PTR [rbx+0x31],0x0
  429022:	setne  al
  429025:	add    rax,QWORD PTR [rbx+0x28]
  429029:	lea    rdx,[rax+0x1]
  42902d:	inc    DWORD PTR [rbx+0x38]
  429030:	mov    QWORD PTR [rbx+0x28],rdx
  429034:	mov    BYTE PTR [rax],0x5b
  429037:	test   r13d,r13d
  42903a:	je     429118 <flatcc_json_printer_string_vector_field@@Base+0x1d8>
  429040:	cmp    BYTE PTR [rbx+0x31],0x0
  429044:	mov    rax,QWORD PTR [rbx+0x28]
  429048:	jne    429170 <flatcc_json_printer_string_vector_field@@Base+0x230>
  42904e:	cmp    QWORD PTR [rbx+0x20],rax
  429052:	ja     42905c <flatcc_json_printer_string_vector_field@@Base+0x11c>
  429054:	xor    esi,esi
  429056:	mov    rdi,rbx
  429059:	call   QWORD PTR [rbx+0x48]
  42905c:	mov    esi,DWORD PTR [r12+0x4]
  429061:	lea    rbp,[r12+0x4]
  429066:	add    rsi,rbp
  429069:	mov    edx,DWORD PTR [rsi]
  42906b:	mov    rdi,rbx
  42906e:	add    rsi,0x4
  429072:	call   421160 <flatcc_json_parser_struct_as_root@@Base+0x1920>
  429077:	lea    eax,[r13-0x2]
  42907b:	cmp    r13d,0x1
  42907f:	je     429118 <flatcc_json_printer_string_vector_field@@Base+0x1d8>
  429085:	lea    r12,[r12+rax*4+0x8]
  42908a:	jmp    4290bb <flatcc_json_printer_string_vector_field@@Base+0x17b>
  42908c:	nop    DWORD PTR [rax+0x0]
  429090:	mov    rax,QWORD PTR [rbx+0x20]
  429094:	cmp    QWORD PTR [rbx+0x28],rax
  429098:	jb     4290a2 <flatcc_json_printer_string_vector_field@@Base+0x162>
  42909a:	xor    esi,esi
  42909c:	mov    rdi,rbx
  42909f:	call   QWORD PTR [rbx+0x48]
  4290a2:	mov    esi,DWORD PTR [rbp+0x0]
  4290a5:	mov    rdi,rbx
  4290a8:	add    rsi,rbp
  4290ab:	mov    edx,DWORD PTR [rsi]
  4290ad:	add    rsi,0x4
  4290b1:	call   421160 <flatcc_json_parser_struct_as_root@@Base+0x1920>
  4290b6:	cmp    rbp,r12
  4290b9:	je     429118 <flatcc_json_printer_string_vector_field@@Base+0x1d8>
  4290bb:	mov    rax,QWORD PTR [rbx+0x28]
  4290bf:	add    rbp,0x4
  4290c3:	lea    rdx,[rax+0x1]
  4290c7:	mov    QWORD PTR [rbx+0x28],rdx
  4290cb:	mov    BYTE PTR [rax],0x2c
  4290ce:	cmp    BYTE PTR [rbx+0x31],0x0
  4290d2:	je     429090 <flatcc_json_printer_string_vector_field@@Base+0x150>
  4290d4:	mov    rax,QWORD PTR [rbx+0x28]
  4290d8:	lea    rdx,[rax+0x1]
  4290dc:	mov    QWORD PTR [rbx+0x28],rdx
  4290e0:	mov    BYTE PTR [rax],0xa
  4290e3:	movzx  r13d,BYTE PTR [rbx+0x31]
  4290e8:	mov    rdi,QWORD PTR [rbx+0x28]
  4290ec:	imul   r13d,DWORD PTR [rbx+0x38]
  4290f1:	movsxd r13,r13d
  4290f4:	lea    rax,[rdi+r13*1]
  4290f8:	cmp    QWORD PTR [rbx+0x20],rax
  4290fc:	jae    4291b0 <flatcc_json_printer_string_vector_field@@Base+0x270>
  429102:	mov    rsi,r13
  429105:	mov    rdi,rbx
  429108:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42910d:	jmp    4290a2 <flatcc_json_printer_string_vector_field@@Base+0x162>
  42910f:	nop
  429110:	ret    
  429111:	nop    DWORD PTR [rax+0x0]
  429118:	mov    rax,QWORD PTR [rbx+0x28]
  42911c:	cmp    BYTE PTR [rbx+0x31],0x0
  429120:	lea    rdx,[rax+0x1]
  429124:	jne    429210 <flatcc_json_printer_string_vector_field@@Base+0x2d0>
  42912a:	mov    QWORD PTR [rbx+0x28],rdx
  42912e:	mov    BYTE PTR [rax],0x5d
  429131:	add    rsp,0x8
  429135:	pop    rbx
  429136:	pop    rbp
  429137:	pop    r12
  429139:	pop    r13
  42913b:	pop    r14
  42913d:	pop    r15
  42913f:	ret    
  429140:	mov    rdi,rbx
  429143:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  429148:	mov    rbp,QWORD PTR [rbx+0x28]
  42914c:	jmp    428ff9 <flatcc_json_printer_string_vector_field@@Base+0xb9>
  429151:	nop    DWORD PTR [rax+0x0]
  429158:	xor    esi,esi
  42915a:	call   QWORD PTR [rdi+0x48]
  42915d:	mov    rdx,QWORD PTR [rbx+0x28]
  429161:	jmp    428fc3 <flatcc_json_printer_string_vector_field@@Base+0x83>
  429166:	nop    WORD PTR cs:[rax+rax*1+0x0]
  429170:	lea    rdx,[rax+0x1]
  429174:	mov    QWORD PTR [rbx+0x28],rdx
  429178:	mov    BYTE PTR [rax],0xa
  42917b:	movzx  ebp,BYTE PTR [rbx+0x31]
  42917f:	mov    rdi,QWORD PTR [rbx+0x28]
  429183:	imul   ebp,DWORD PTR [rbx+0x38]
  429187:	movsxd rbp,ebp
  42918a:	lea    rax,[rdi+rbp*1]
  42918e:	cmp    QWORD PTR [rbx+0x20],rax
  429192:	jae    42928d <flatcc_json_printer_string_vector_field@@Base+0x34d>
  429198:	mov    rsi,rbp
  42919b:	mov    rdi,rbx
  42919e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4291a3:	jmp    42905c <flatcc_json_printer_string_vector_field@@Base+0x11c>
  4291a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4291b0:	mov    rdx,r13
  4291b3:	mov    esi,0x20
  4291b8:	call   4061c0 <memset@plt>
  4291bd:	add    QWORD PTR [rbx+0x28],r13
  4291c1:	jmp    4290a2 <flatcc_json_printer_string_vector_field@@Base+0x162>
  4291c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4291d0:	lea    rax,[rdx+0x1]
  4291d4:	mov    QWORD PTR [rdi+0x28],rax
  4291d8:	mov    BYTE PTR [rdx],0xa
  4291db:	movzx  edx,BYTE PTR [rdi+0x31]
  4291df:	imul   edx,DWORD PTR [rdi+0x38]
  4291e3:	mov    rdi,QWORD PTR [rdi+0x28]
  4291e7:	movsxd r14,edx
  4291ea:	lea    rax,[rdi+r14*1]
  4291ee:	cmp    QWORD PTR [rbx+0x20],rax
  4291f2:	jae    429250 <flatcc_json_printer_string_vector_field@@Base+0x310>
  4291f4:	mov    rsi,r14
  4291f7:	mov    rdi,rbx
  4291fa:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4291ff:	mov    rdx,QWORD PTR [rbx+0x28]
  429203:	jmp    428fc3 <flatcc_json_printer_string_vector_field@@Base+0x83>
  429208:	nop    DWORD PTR [rax+rax*1+0x0]
  429210:	mov    QWORD PTR [rbx+0x28],rdx
  429214:	mov    BYTE PTR [rax],0xa
  429217:	mov    eax,DWORD PTR [rbx+0x38]
  42921a:	mov    rdi,QWORD PTR [rbx+0x28]
  42921e:	lea    ebp,[rax-0x1]
  429221:	movzx  eax,BYTE PTR [rbx+0x31]
  429225:	mov    DWORD PTR [rbx+0x38],ebp
  429228:	imul   eax,ebp
  42922b:	movsxd rbp,eax
  42922e:	lea    rax,[rdi+rbp*1]
  429232:	cmp    QWORD PTR [rbx+0x20],rax
  429236:	jae    429270 <flatcc_json_printer_string_vector_field@@Base+0x330>
  429238:	mov    rsi,rbp
  42923b:	mov    rdi,rbx
  42923e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429243:	mov    rax,QWORD PTR [rbx+0x28]
  429247:	lea    rdx,[rax+0x1]
  42924b:	jmp    42912a <flatcc_json_printer_string_vector_field@@Base+0x1ea>
  429250:	mov    rdx,r14
  429253:	mov    esi,0x20
  429258:	call   4061c0 <memset@plt>
  42925d:	mov    rdx,QWORD PTR [rbx+0x28]
  429261:	add    rdx,r14
  429264:	mov    QWORD PTR [rbx+0x28],rdx
  429268:	jmp    428fc3 <flatcc_json_printer_string_vector_field@@Base+0x83>
  42926d:	nop    DWORD PTR [rax]
  429270:	mov    rdx,rbp
  429273:	mov    esi,0x20
  429278:	call   4061c0 <memset@plt>
  42927d:	mov    rax,QWORD PTR [rbx+0x28]
  429281:	add    rax,rbp
  429284:	lea    rdx,[rax+0x1]
  429288:	jmp    42912a <flatcc_json_printer_string_vector_field@@Base+0x1ea>
  42928d:	mov    rdx,rbp
  429290:	mov    esi,0x20
  429295:	call   4061c0 <memset@plt>
  42929a:	add    QWORD PTR [rbx+0x28],rbp
  42929e:	jmp    42905c <flatcc_json_printer_string_vector_field@@Base+0x11c>
  4292a3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4292ae:	xchg   ax,ax

00000000004292b0 <flatcc_json_printer_table_vector_field@@Base>:
  4292b0:	endbr64 
  4292b4:	push   r15
  4292b6:	push   r14
  4292b8:	push   r13
  4292ba:	push   r12
  4292bc:	push   rbp
  4292bd:	push   rbx
  4292be:	sub    rsp,0x48
  4292c2:	mov    rax,QWORD PTR fs:0x28
  4292cb:	mov    QWORD PTR [rsp+0x38],rax
  4292d0:	xor    eax,eax
  4292d2:	lea    eax,[rdx+rdx*1+0x4]
  4292d6:	cmp    eax,DWORD PTR [rsi+0x10]
  4292d9:	jge    4293d9 <flatcc_json_printer_table_vector_field@@Base+0x129>
  4292df:	mov    rdx,QWORD PTR [rsi+0x8]
  4292e3:	mov    r14,rsi
  4292e6:	movzx  ebp,WORD PTR [rdx+rax*1]
  4292ea:	test   bp,bp
  4292ed:	je     4293d9 <flatcc_json_printer_table_vector_field@@Base+0x129>
  4292f3:	add    rbp,QWORD PTR [rsi]
  4292f6:	je     4293d9 <flatcc_json_printer_table_vector_field@@Base+0x129>
  4292fc:	mov    edx,DWORD PTR [rsi+0x18]
  4292ff:	mov    rbx,rdi
  429302:	lea    eax,[rdx+0x1]
  429305:	mov    DWORD PTR [rsi+0x18],eax
  429308:	mov    r12,r9
  42930b:	mov    rax,QWORD PTR [rdi+0x28]
  42930f:	test   edx,edx
  429311:	je     429322 <flatcc_json_printer_table_vector_field@@Base+0x72>
  429313:	lea    rdx,[rax+0x1]
  429317:	mov    QWORD PTR [rdi+0x28],rdx
  42931b:	mov    BYTE PTR [rax],0x2c
  42931e:	mov    rax,QWORD PTR [rdi+0x28]
  429322:	mov    edx,DWORD PTR [rbp+0x0]
  429325:	movsxd r15,r8d
  429328:	add    rbp,rdx
  42932b:	cmp    BYTE PTR [rbx+0x31],0x0
  42932f:	mov    r13d,DWORD PTR [rbp+0x0]
  429333:	jne    429438 <flatcc_json_printer_table_vector_field@@Base+0x188>
  429339:	cmp    QWORD PTR [rbx+0x20],rax
  42933d:	jbe    429418 <flatcc_json_printer_table_vector_field@@Base+0x168>
  429343:	mov    BYTE PTR [rax],0x22
  429346:	xor    edi,edi
  429348:	mov    rdx,r15
  42934b:	cmp    BYTE PTR [rbx+0x32],0x0
  42934f:	sete   dil
  429353:	add    rdi,QWORD PTR [rbx+0x28]
  429357:	lea    rax,[rdi+r15*1]
  42935b:	mov    QWORD PTR [rbx+0x28],rdi
  42935f:	mov    rsi,rcx
  429362:	cmp    QWORD PTR [rbx+0x20],rax
  429366:	jbe    429400 <flatcc_json_printer_table_vector_field@@Base+0x150>
  42936c:	call   406210 <memcpy@plt>
  429371:	add    r15,QWORD PTR [rbx+0x28]
  429375:	mov    QWORD PTR [rbx+0x28],r15
  429379:	mov    BYTE PTR [r15],0x22
  42937d:	xor    eax,eax
  42937f:	cmp    BYTE PTR [rbx+0x32],0x0
  429383:	sete   al
  429386:	add    rax,QWORD PTR [rbx+0x28]
  42938a:	lea    rdx,[rax+0x1]
  42938e:	mov    QWORD PTR [rbx+0x28],rdx
  429392:	mov    BYTE PTR [rax],0x3a
  429395:	mov    rax,QWORD PTR [rbx+0x28]
  429399:	mov    BYTE PTR [rax],0x20
  42939c:	xor    eax,eax
  42939e:	cmp    BYTE PTR [rbx+0x31],0x0
  4293a2:	setne  al
  4293a5:	add    rax,QWORD PTR [rbx+0x28]
  4293a9:	lea    rdx,[rax+0x1]
  4293ad:	inc    DWORD PTR [rbx+0x38]
  4293b0:	mov    QWORD PTR [rbx+0x28],rdx
  4293b4:	mov    BYTE PTR [rax],0x5b
  4293b7:	test   r13d,r13d
  4293ba:	jne    4294c8 <flatcc_json_printer_table_vector_field@@Base+0x218>
  4293c0:	mov    rax,QWORD PTR [rbx+0x28]
  4293c4:	lea    rdx,[rax+0x1]
  4293c8:	cmp    BYTE PTR [rbx+0x31],0x0
  4293cc:	jne    429480 <flatcc_json_printer_table_vector_field@@Base+0x1d0>
  4293d2:	mov    QWORD PTR [rbx+0x28],rdx
  4293d6:	mov    BYTE PTR [rax],0x5d
  4293d9:	mov    rax,QWORD PTR [rsp+0x38]
  4293de:	xor    rax,QWORD PTR fs:0x28
  4293e7:	jne    429718 <flatcc_json_printer_table_vector_field@@Base+0x468>
  4293ed:	add    rsp,0x48
  4293f1:	pop    rbx
  4293f2:	pop    rbp
  4293f3:	pop    r12
  4293f5:	pop    r13
  4293f7:	pop    r14
  4293f9:	pop    r15
  4293fb:	ret    
  4293fc:	nop    DWORD PTR [rax+0x0]
  429400:	mov    rdi,rbx
  429403:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  429408:	mov    r15,QWORD PTR [rbx+0x28]
  42940c:	jmp    429379 <flatcc_json_printer_table_vector_field@@Base+0xc9>
  429411:	nop    DWORD PTR [rax+0x0]
  429418:	xor    esi,esi
  42941a:	mov    rdi,rbx
  42941d:	mov    QWORD PTR [rsp],rcx
  429421:	call   QWORD PTR [rbx+0x48]
  429424:	mov    rax,QWORD PTR [rbx+0x28]
  429428:	mov    rcx,QWORD PTR [rsp]
  42942c:	jmp    429343 <flatcc_json_printer_table_vector_field@@Base+0x93>
  429431:	nop    DWORD PTR [rax+0x0]
  429438:	lea    rdx,[rax+0x1]
  42943c:	mov    QWORD PTR [rbx+0x28],rdx
  429440:	mov    BYTE PTR [rax],0xa
  429443:	movzx  eax,BYTE PTR [rbx+0x31]
  429447:	mov    rdi,QWORD PTR [rbx+0x28]
  42944b:	imul   eax,DWORD PTR [rbx+0x38]
  42944f:	movsxd r8,eax
  429452:	lea    rax,[rdi+r8*1]
  429456:	cmp    QWORD PTR [rbx+0x20],rax
  42945a:	jae    429648 <flatcc_json_printer_table_vector_field@@Base+0x398>
  429460:	mov    rsi,r8
  429463:	mov    rdi,rbx
  429466:	mov    QWORD PTR [rsp],rcx
  42946a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42946f:	mov    rax,QWORD PTR [rbx+0x28]
  429473:	mov    rcx,QWORD PTR [rsp]
  429477:	jmp    429343 <flatcc_json_printer_table_vector_field@@Base+0x93>
  42947c:	nop    DWORD PTR [rax+0x0]
  429480:	mov    QWORD PTR [rbx+0x28],rdx
  429484:	mov    BYTE PTR [rax],0xa
  429487:	mov    eax,DWORD PTR [rbx+0x38]
  42948a:	mov    rdi,QWORD PTR [rbx+0x28]
  42948e:	lea    ebp,[rax-0x1]
  429491:	movzx  eax,BYTE PTR [rbx+0x31]
  429495:	mov    DWORD PTR [rbx+0x38],ebp
  429498:	imul   eax,ebp
  42949b:	movsxd rbp,eax
  42949e:	lea    rax,[rdi+rbp*1]
  4294a2:	cmp    QWORD PTR [rbx+0x20],rax
  4294a6:	jae    429680 <flatcc_json_printer_table_vector_field@@Base+0x3d0>
  4294ac:	mov    rsi,rbp
  4294af:	mov    rdi,rbx
  4294b2:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4294b7:	mov    rax,QWORD PTR [rbx+0x28]
  4294bb:	lea    rdx,[rax+0x1]
  4294bf:	jmp    4293d2 <flatcc_json_printer_table_vector_field@@Base+0x122>
  4294c4:	nop    DWORD PTR [rax+0x0]
  4294c8:	mov    ecx,DWORD PTR [r14+0x14]
  4294cc:	lea    r15,[rbp+0x4]
  4294d0:	mov    rax,QWORD PTR [rbx+0x28]
  4294d4:	dec    ecx
  4294d6:	je     4296a0 <flatcc_json_printer_table_vector_field@@Base+0x3f0>
  4294dc:	mov    edx,DWORD PTR [rbp+0x4]
  4294df:	lea    rsi,[rax+0x1]
  4294e3:	inc    DWORD PTR [rbx+0x38]
  4294e6:	mov    QWORD PTR [rbx+0x28],rsi
  4294ea:	mov    BYTE PTR [rax],0x7b
  4294ed:	mov    DWORD PTR [rsp+0x28],0x0
  4294f5:	mov    DWORD PTR [rsp+0x24],ecx
  4294f9:	add    rdx,r15
  4294fc:	mov    QWORD PTR [rsp+0x10],rdx
  429501:	movsxd rax,DWORD PTR [rdx]
  429504:	lea    rsi,[rsp+0x10]
  429509:	sub    rdx,rax
  42950c:	movzx  eax,WORD PTR [rdx]
  42950f:	mov    rdi,rbx
  429512:	mov    DWORD PTR [rsp+0x20],eax
  429516:	mov    QWORD PTR [rsp+0x18],rdx
  42951b:	call   r12
  42951e:	cmp    BYTE PTR [rbx+0x31],0x0
  429522:	mov    rax,QWORD PTR [rbx+0x28]
  429526:	jne    4296b7 <flatcc_json_printer_table_vector_field@@Base+0x407>
  42952c:	lea    rdx,[rax+0x1]
  429530:	mov    QWORD PTR [rbx+0x28],rdx
  429534:	mov    BYTE PTR [rax],0x7d
  429537:	mov    rax,QWORD PTR [rbx+0x28]
  42953b:	lea    edx,[r13-0x1]
  42953f:	lea    rbp,[rbp+rdx*4+0x4]
  429544:	lea    r13,[rsp+0x10]
  429549:	jmp    4295ad <flatcc_json_printer_table_vector_field@@Base+0x2fd>
  42954b:	nop    DWORD PTR [rax+rax*1+0x0]
  429550:	mov    rcx,QWORD PTR [rbx+0x28]
  429554:	mov    eax,DWORD PTR [r15]
  429557:	lea    rsi,[rcx+0x1]
  42955b:	inc    DWORD PTR [rbx+0x38]
  42955e:	mov    QWORD PTR [rbx+0x28],rsi
  429562:	mov    BYTE PTR [rcx],0x7b
  429565:	mov    DWORD PTR [rsp+0x28],0x0
  42956d:	mov    DWORD PTR [rsp+0x24],edx
  429571:	add    rax,r15
  429574:	mov    QWORD PTR [rsp+0x10],rax
  429579:	movsxd rdx,DWORD PTR [rax]
  42957c:	mov    rsi,r13
  42957f:	sub    rax,rdx
  429582:	mov    QWORD PTR [rsp+0x18],rax
  429587:	movzx  eax,WORD PTR [rax]
  42958a:	mov    rdi,rbx
  42958d:	mov    DWORD PTR [rsp+0x20],eax
  429591:	call   r12
  429594:	cmp    BYTE PTR [rbx+0x31],0x0
  429598:	jne    4295e0 <flatcc_json_printer_table_vector_field@@Base+0x330>
  42959a:	mov    rsi,QWORD PTR [rbx+0x28]
  42959e:	lea    rax,[rsi+0x1]
  4295a2:	mov    QWORD PTR [rbx+0x28],rax
  4295a6:	mov    BYTE PTR [rsi],0x7d
  4295a9:	mov    rax,QWORD PTR [rbx+0x28]
  4295ad:	lea    rdx,[rax+0x1]
  4295b1:	cmp    r15,rbp
  4295b4:	je     4293c8 <flatcc_json_printer_table_vector_field@@Base+0x118>
  4295ba:	mov    QWORD PTR [rbx+0x28],rdx
  4295be:	mov    BYTE PTR [rax],0x2c
  4295c1:	add    r15,0x4
  4295c5:	mov    edx,DWORD PTR [r14+0x14]
  4295c9:	dec    edx
  4295cb:	jne    429550 <flatcc_json_printer_table_vector_field@@Base+0x2a0>
  4295cd:	mov    eax,DWORD PTR [rbx+0x3c]
  4295d0:	test   eax,eax
  4295d2:	jne    4295a9 <flatcc_json_printer_table_vector_field@@Base+0x2f9>
  4295d4:	mov    DWORD PTR [rbx+0x3c],0x2
  4295db:	jmp    4295a9 <flatcc_json_printer_table_vector_field@@Base+0x2f9>
  4295dd:	nop    DWORD PTR [rax]
  4295e0:	mov    rax,QWORD PTR [rbx+0x28]
  4295e4:	lea    rdx,[rax+0x1]
  4295e8:	mov    QWORD PTR [rbx+0x28],rdx
  4295ec:	mov    BYTE PTR [rax],0xa
  4295ef:	mov    eax,DWORD PTR [rbx+0x38]
  4295f2:	movzx  esi,BYTE PTR [rbx+0x31]
  4295f6:	lea    ecx,[rax-0x1]
  4295f9:	imul   esi,ecx
  4295fc:	mov    rdi,QWORD PTR [rbx+0x28]
  429600:	mov    DWORD PTR [rbx+0x38],ecx
  429603:	movsxd rcx,esi
  429606:	lea    rax,[rdi+rcx*1]
  42960a:	cmp    QWORD PTR [rbx+0x20],rax
  42960e:	jae    429620 <flatcc_json_printer_table_vector_field@@Base+0x370>
  429610:	mov    rsi,rcx
  429613:	mov    rdi,rbx
  429616:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42961b:	jmp    42959a <flatcc_json_printer_table_vector_field@@Base+0x2ea>
  429620:	mov    rdx,rcx
  429623:	mov    esi,0x20
  429628:	mov    QWORD PTR [rsp],rcx
  42962c:	call   4061c0 <memset@plt>
  429631:	mov    rcx,QWORD PTR [rsp]
  429635:	add    rcx,QWORD PTR [rbx+0x28]
  429639:	mov    rsi,rcx
  42963c:	jmp    42959e <flatcc_json_printer_table_vector_field@@Base+0x2ee>
  429641:	nop    DWORD PTR [rax+0x0]
  429648:	mov    rdx,r8
  42964b:	mov    esi,0x20
  429650:	mov    QWORD PTR [rsp+0x8],rcx
  429655:	mov    QWORD PTR [rsp],r8
  429659:	call   4061c0 <memset@plt>
  42965e:	mov    rax,QWORD PTR [rbx+0x28]
  429662:	mov    r8,QWORD PTR [rsp]
  429666:	mov    rcx,QWORD PTR [rsp+0x8]
  42966b:	add    rax,r8
  42966e:	mov    QWORD PTR [rbx+0x28],rax
  429672:	jmp    429343 <flatcc_json_printer_table_vector_field@@Base+0x93>
  429677:	nop    WORD PTR [rax+rax*1+0x0]
  429680:	mov    rdx,rbp
  429683:	mov    esi,0x20
  429688:	call   4061c0 <memset@plt>
  42968d:	mov    rax,QWORD PTR [rbx+0x28]
  429691:	add    rax,rbp
  429694:	lea    rdx,[rax+0x1]
  429698:	jmp    4293d2 <flatcc_json_printer_table_vector_field@@Base+0x122>
  42969d:	nop    DWORD PTR [rax]
  4296a0:	mov    edx,DWORD PTR [rbx+0x3c]
  4296a3:	test   edx,edx
  4296a5:	jne    42953b <flatcc_json_printer_table_vector_field@@Base+0x28b>
  4296ab:	mov    DWORD PTR [rbx+0x3c],0x2
  4296b2:	jmp    42953b <flatcc_json_printer_table_vector_field@@Base+0x28b>
  4296b7:	lea    rdx,[rax+0x1]
  4296bb:	mov    QWORD PTR [rbx+0x28],rdx
  4296bf:	mov    BYTE PTR [rax],0xa
  4296c2:	mov    eax,DWORD PTR [rbx+0x38]
  4296c5:	mov    rdi,QWORD PTR [rbx+0x28]
  4296c9:	lea    ecx,[rax-0x1]
  4296cc:	movzx  eax,BYTE PTR [rbx+0x31]
  4296d0:	mov    DWORD PTR [rbx+0x38],ecx
  4296d3:	imul   eax,ecx
  4296d6:	movsxd rcx,eax
  4296d9:	lea    rax,[rdi+rcx*1]
  4296dd:	cmp    QWORD PTR [rbx+0x20],rax
  4296e1:	jae    4296f7 <flatcc_json_printer_table_vector_field@@Base+0x447>
  4296e3:	mov    rsi,rcx
  4296e6:	mov    rdi,rbx
  4296e9:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4296ee:	mov    rax,QWORD PTR [rbx+0x28]
  4296f2:	jmp    42952c <flatcc_json_printer_table_vector_field@@Base+0x27c>
  4296f7:	mov    rdx,rcx
  4296fa:	mov    esi,0x20
  4296ff:	mov    QWORD PTR [rsp],rcx
  429703:	call   4061c0 <memset@plt>
  429708:	mov    rcx,QWORD PTR [rsp]
  42970c:	mov    rax,QWORD PTR [rbx+0x28]
  429710:	add    rax,rcx
  429713:	jmp    42952c <flatcc_json_printer_table_vector_field@@Base+0x27c>
  429718:	call   4061a0 <__stack_chk_fail@plt>
  42971d:	nop    DWORD PTR [rax]

0000000000429720 <flatcc_json_printer_union_vector_field@@Base>:
  429720:	endbr64 
  429724:	push   r15
  429726:	push   r14
  429728:	push   r13
  42972a:	mov    r13d,edx
  42972d:	push   r12
  42972f:	push   rbp
  429730:	mov    rbp,rsi
  429733:	push   rbx
  429734:	mov    rbx,rdi
  429737:	sub    rsp,0xb8
  42973e:	mov    QWORD PTR [rsp],rcx
  429742:	mov    ecx,DWORD PTR [rsi+0x10]
  429745:	mov    r14,QWORD PTR [rsp+0xf0]
  42974d:	mov    rax,QWORD PTR fs:0x28
  429756:	mov    QWORD PTR [rsp+0xa8],rax
  42975e:	xor    eax,eax
  429760:	lea    eax,[rdx+rdx*1+0x2]
  429764:	cmp    eax,ecx
  429766:	jge    429980 <flatcc_json_printer_union_vector_field@@Base+0x260>
  42976c:	mov    rsi,QWORD PTR [rsi+0x8]
  429770:	mov    edx,eax
  429772:	movzx  edx,WORD PTR [rsi+rdx*1]
  429776:	test   dx,dx
  429779:	je     429980 <flatcc_json_printer_union_vector_field@@Base+0x260>
  42977f:	add    rdx,QWORD PTR [rbp+0x0]
  429783:	mov    QWORD PTR [rsp+0x8],rdx
  429788:	add    eax,0x2
  42978b:	mov    edx,DWORD PTR [rbp+0x14]
  42978e:	cmp    eax,ecx
  429790:	jge    429958 <flatcc_json_printer_union_vector_field@@Base+0x238>
  429796:	mov    rcx,QWORD PTR [rbp+0x8]
  42979a:	movzx  r12d,WORD PTR [rcx+rax*1]
  42979f:	test   r12w,r12w
  4297a3:	je     429958 <flatcc_json_printer_union_vector_field@@Base+0x238>
  4297a9:	add    r12,QWORD PTR [rbp+0x0]
  4297ad:	mov    DWORD PTR [rsp+0x28],edx
  4297b1:	cmp    r8d,0x64
  4297b5:	jg     429a8a <flatcc_json_printer_union_vector_field@@Base+0x36a>
  4297bb:	movsxd r15,r8d
  4297be:	lea    r11,[rsp+0x30]
  4297c3:	mov    rsi,QWORD PTR [rsp]
  4297c7:	mov    rdi,r11
  4297ca:	mov    ecx,0x69
  4297cf:	mov    rdx,r15
  4297d2:	mov    QWORD PTR [rsp+0x18],r9
  4297d7:	mov    DWORD PTR [rsp+0x14],r8d
  4297dc:	call   406200 <__memcpy_chk@plt>
  4297e1:	mov    r11,rax
  4297e4:	lea    rax,[rax+r15*1]
  4297e8:	mov    DWORD PTR [rax],0x7079745f
  4297ee:	mov    BYTE PTR [rax+0x4],0x65
  4297f2:	test   r12,r12
  4297f5:	je     429929 <flatcc_json_printer_union_vector_field@@Base+0x209>
  4297fb:	cmp    QWORD PTR [rsp+0x8],0x0
  429801:	je     429929 <flatcc_json_printer_union_vector_field@@Base+0x209>
  429807:	mov    r8d,DWORD PTR [rsp+0x14]
  42980c:	mov    r9,QWORD PTR [rsp+0x18]
  429811:	lea    edx,[r13-0x1]
  429815:	add    r8d,0x5
  429819:	mov    rcx,r11
  42981c:	mov    rsi,rbp
  42981f:	mov    rdi,rbx
  429822:	call   427760 <flatcc_json_printer_utype_enum_vector_field@@Base>
  429827:	mov    eax,DWORD PTR [rbp+0x18]
  42982a:	lea    edx,[rax+0x1]
  42982d:	mov    DWORD PTR [rbp+0x18],edx
  429830:	test   eax,eax
  429832:	je     429843 <flatcc_json_printer_union_vector_field@@Base+0x123>
  429834:	mov    rax,QWORD PTR [rbx+0x28]
  429838:	lea    rdx,[rax+0x1]
  42983c:	mov    QWORD PTR [rbx+0x28],rdx
  429840:	mov    BYTE PTR [rax],0x2c
  429843:	mov    eax,DWORD PTR [r12]
  429847:	mov    rsi,QWORD PTR [rsp]
  42984b:	add    r12,rax
  42984e:	mov    rax,QWORD PTR [rsp+0x8]
  429853:	mov    rdx,r15
  429856:	mov    rdi,rbx
  429859:	mov    ebp,DWORD PTR [rax]
  42985b:	mov    r13d,DWORD PTR [r12]
  42985f:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  429864:	mov    rax,QWORD PTR [rbx+0x28]
  429868:	inc    DWORD PTR [rbx+0x38]
  42986b:	lea    rdx,[rax+0x1]
  42986f:	mov    QWORD PTR [rbx+0x28],rdx
  429873:	mov    BYTE PTR [rax],0x5b
  429876:	test   r13d,r13d
  429879:	je     429910 <flatcc_json_printer_union_vector_field@@Base+0x1f0>
  42987f:	mov    r15d,ebp
  429882:	add    r15,QWORD PTR [rsp+0x8]
  429887:	movzx  eax,BYTE PTR [r15+0x4]
  42988c:	lea    rbp,[r12+0x4]
  429891:	test   al,al
  429893:	je     429a20 <flatcc_json_printer_union_vector_field@@Base+0x300>
  429899:	lea    rsi,[rsp+0x20]
  42989e:	mov    rdi,rbx
  4298a1:	mov    BYTE PTR [rsp+0x2c],al
  4298a5:	mov    QWORD PTR [rsp+0x20],rbp
  4298aa:	call   r14
  4298ad:	lea    eax,[r13-0x1]
  4298b1:	add    r15,0x4
  4298b5:	lea    r12,[r12+rax*4+0x4]
  4298ba:	lea    r13,[rsp+0x20]
  4298bf:	nop
  4298c0:	mov    rax,QWORD PTR [rbx+0x28]
  4298c4:	lea    rcx,[rax+0x1]
  4298c8:	cmp    rbp,r12
  4298cb:	je     429918 <flatcc_json_printer_union_vector_field@@Base+0x1f8>
  4298cd:	inc    r15
  4298d0:	movzx  edx,BYTE PTR [r15]
  4298d4:	add    rbp,0x4
  4298d8:	mov    QWORD PTR [rbx+0x28],rcx
  4298dc:	mov    BYTE PTR [rax],0x2c
  4298df:	test   dl,dl
  4298e1:	je     429990 <flatcc_json_printer_union_vector_field@@Base+0x270>
  4298e7:	mov    rsi,r13
  4298ea:	mov    rdi,rbx
  4298ed:	mov    BYTE PTR [rsp+0x2c],dl
  4298f1:	mov    QWORD PTR [rsp+0x20],rbp
  4298f6:	call   r14
  4298f9:	mov    rax,QWORD PTR [rbx+0x28]
  4298fd:	lea    rcx,[rax+0x1]
  429901:	cmp    rbp,r12
  429904:	jne    4298cd <flatcc_json_printer_union_vector_field@@Base+0x1ad>
  429906:	jmp    429918 <flatcc_json_printer_union_vector_field@@Base+0x1f8>
  429908:	nop    DWORD PTR [rax+rax*1+0x0]
  429910:	mov    rax,QWORD PTR [rbx+0x28]
  429914:	lea    rcx,[rax+0x1]
  429918:	cmp    BYTE PTR [rbx+0x31],0x0
  42991c:	jne    4299d8 <flatcc_json_printer_union_vector_field@@Base+0x2b8>
  429922:	mov    QWORD PTR [rbx+0x28],rcx
  429926:	mov    BYTE PTR [rax],0x5d
  429929:	mov    rax,QWORD PTR [rsp+0xa8]
  429931:	xor    rax,QWORD PTR fs:0x28
  42993a:	jne    429a85 <flatcc_json_printer_union_vector_field@@Base+0x365>
  429940:	add    rsp,0xb8
  429947:	pop    rbx
  429948:	pop    rbp
  429949:	pop    r12
  42994b:	pop    r13
  42994d:	pop    r14
  42994f:	pop    r15
  429951:	ret    
  429952:	nop    WORD PTR [rax+rax*1+0x0]
  429958:	mov    DWORD PTR [rsp+0x28],edx
  42995c:	cmp    r8d,0x64
  429960:	jg     429a8a <flatcc_json_printer_union_vector_field@@Base+0x36a>
  429966:	mov    rsi,QWORD PTR [rsp]
  42996a:	movsxd rdx,r8d
  42996d:	lea    rdi,[rsp+0x30]
  429972:	mov    ecx,0x69
  429977:	call   406200 <__memcpy_chk@plt>
  42997c:	jmp    429929 <flatcc_json_printer_union_vector_field@@Base+0x209>
  42997e:	xchg   ax,ax
  429980:	mov    QWORD PTR [rsp+0x8],0x0
  429989:	jmp    429788 <flatcc_json_printer_union_vector_field@@Base+0x68>
  42998e:	xchg   ax,ax
  429990:	mov    rax,QWORD PTR [rbx+0x28]
  429994:	lea    rdx,[rax+0x1]
  429998:	mov    QWORD PTR [rbx+0x28],rdx
  42999c:	mov    BYTE PTR [rax],0x6e
  42999f:	mov    rax,QWORD PTR [rbx+0x28]
  4299a3:	lea    rdx,[rax+0x1]
  4299a7:	mov    QWORD PTR [rbx+0x28],rdx
  4299ab:	mov    BYTE PTR [rax],0x75
  4299ae:	mov    rax,QWORD PTR [rbx+0x28]
  4299b2:	lea    rdx,[rax+0x1]
  4299b6:	mov    QWORD PTR [rbx+0x28],rdx
  4299ba:	mov    BYTE PTR [rax],0x6c
  4299bd:	mov    rax,QWORD PTR [rbx+0x28]
  4299c1:	lea    rdx,[rax+0x1]
  4299c5:	mov    QWORD PTR [rbx+0x28],rdx
  4299c9:	mov    BYTE PTR [rax],0x6c
  4299cc:	jmp    4298c0 <flatcc_json_printer_union_vector_field@@Base+0x1a0>
  4299d1:	nop    DWORD PTR [rax+0x0]
  4299d8:	mov    QWORD PTR [rbx+0x28],rcx
  4299dc:	mov    BYTE PTR [rax],0xa
  4299df:	mov    eax,DWORD PTR [rbx+0x38]
  4299e2:	mov    rdi,QWORD PTR [rbx+0x28]
  4299e6:	lea    ebp,[rax-0x1]
  4299e9:	movzx  eax,BYTE PTR [rbx+0x31]
  4299ed:	mov    DWORD PTR [rbx+0x38],ebp
  4299f0:	imul   eax,ebp
  4299f3:	movsxd rbp,eax
  4299f6:	lea    rax,[rdi+rbp*1]
  4299fa:	cmp    QWORD PTR [rbx+0x20],rax
  4299fe:	jae    429a68 <flatcc_json_printer_union_vector_field@@Base+0x348>
  429a00:	mov    rsi,rbp
  429a03:	mov    rdi,rbx
  429a06:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429a0b:	mov    rax,QWORD PTR [rbx+0x28]
  429a0f:	lea    rcx,[rax+0x1]
  429a13:	jmp    429922 <flatcc_json_printer_union_vector_field@@Base+0x202>
  429a18:	nop    DWORD PTR [rax+rax*1+0x0]
  429a20:	mov    rax,QWORD PTR [rbx+0x28]
  429a24:	lea    rdx,[rax+0x1]
  429a28:	mov    QWORD PTR [rbx+0x28],rdx
  429a2c:	mov    BYTE PTR [rax],0x6e
  429a2f:	mov    rax,QWORD PTR [rbx+0x28]
  429a33:	lea    rdx,[rax+0x1]
  429a37:	mov    QWORD PTR [rbx+0x28],rdx
  429a3b:	mov    BYTE PTR [rax],0x75
  429a3e:	mov    rax,QWORD PTR [rbx+0x28]
  429a42:	lea    rdx,[rax+0x1]
  429a46:	mov    QWORD PTR [rbx+0x28],rdx
  429a4a:	mov    BYTE PTR [rax],0x6c
  429a4d:	mov    rax,QWORD PTR [rbx+0x28]
  429a51:	lea    rdx,[rax+0x1]
  429a55:	mov    QWORD PTR [rbx+0x28],rdx
  429a59:	mov    BYTE PTR [rax],0x6c
  429a5c:	jmp    4298ad <flatcc_json_printer_union_vector_field@@Base+0x18d>
  429a61:	nop    DWORD PTR [rax+0x0]
  429a68:	mov    rdx,rbp
  429a6b:	mov    esi,0x20
  429a70:	call   4061c0 <memset@plt>
  429a75:	mov    rax,QWORD PTR [rbx+0x28]
  429a79:	add    rax,rbp
  429a7c:	lea    rcx,[rax+0x1]
  429a80:	jmp    429922 <flatcc_json_printer_union_vector_field@@Base+0x202>
  429a85:	call   4061a0 <__stack_chk_fail@plt>
  429a8a:	cmp    DWORD PTR [rbx+0x3c],0x0
  429a8e:	jne    429a97 <flatcc_json_printer_union_vector_field@@Base+0x377>
  429a90:	mov    DWORD PTR [rbx+0x3c],0x1
  429a97:	lea    rcx,[rip+0x70e2]        # 430b80 <flatcc_builder_padding_base@@Base+0x1e60>
  429a9e:	mov    edx,0x34b
  429aa3:	lea    rsi,[rip+0x6ec6]        # 430970 <flatcc_builder_padding_base@@Base+0x1c50>
  429aaa:	lea    rdi,[rip+0x706b]        # 430b1c <flatcc_builder_padding_base@@Base+0x1dfc>
  429ab1:	call   4061b0 <__assert_fail@plt>
  429ab6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000429ac0 <flatcc_json_printer_table_field@@Base>:
  429ac0:	endbr64 
  429ac4:	push   r15
  429ac6:	push   r14
  429ac8:	push   r13
  429aca:	push   r12
  429acc:	push   rbp
  429acd:	push   rbx
  429ace:	sub    rsp,0x48
  429ad2:	mov    rax,QWORD PTR fs:0x28
  429adb:	mov    QWORD PTR [rsp+0x38],rax
  429ae0:	xor    eax,eax
  429ae2:	lea    eax,[rdx+rdx*1+0x4]
  429ae6:	cmp    eax,DWORD PTR [rsi+0x10]
  429ae9:	jge    429c1f <flatcc_json_printer_table_field@@Base+0x15f>
  429aef:	mov    rdx,QWORD PTR [rsi+0x8]
  429af3:	mov    r13,rsi
  429af6:	movzx  eax,WORD PTR [rdx+rax*1]
  429afa:	test   ax,ax
  429afd:	je     429c1f <flatcc_json_printer_table_field@@Base+0x15f>
  429b03:	add    rax,QWORD PTR [rsi]
  429b06:	mov    rbp,rax
  429b09:	je     429c1f <flatcc_json_printer_table_field@@Base+0x15f>
  429b0f:	mov    eax,DWORD PTR [rsi+0x18]
  429b12:	mov    rbx,rdi
  429b15:	lea    edx,[rax+0x1]
  429b18:	mov    DWORD PTR [rsi+0x18],edx
  429b1b:	mov    r12,r9
  429b1e:	mov    rsi,QWORD PTR [rdi+0x28]
  429b22:	test   eax,eax
  429b24:	je     429b35 <flatcc_json_printer_table_field@@Base+0x75>
  429b26:	lea    rax,[rsi+0x1]
  429b2a:	mov    QWORD PTR [rdi+0x28],rax
  429b2e:	mov    BYTE PTR [rsi],0x2c
  429b31:	mov    rsi,QWORD PTR [rdi+0x28]
  429b35:	cmp    BYTE PTR [rbx+0x31],0x0
  429b39:	movsxd r14,r8d
  429b3c:	jne    429c90 <flatcc_json_printer_table_field@@Base+0x1d0>
  429b42:	cmp    QWORD PTR [rbx+0x20],rsi
  429b46:	jbe    429c60 <flatcc_json_printer_table_field@@Base+0x1a0>
  429b4c:	mov    BYTE PTR [rsi],0x22
  429b4f:	xor    edi,edi
  429b51:	mov    rdx,r14
  429b54:	cmp    BYTE PTR [rbx+0x32],0x0
  429b58:	sete   dil
  429b5c:	add    rdi,QWORD PTR [rbx+0x28]
  429b60:	lea    rax,[rdi+r14*1]
  429b64:	mov    QWORD PTR [rbx+0x28],rdi
  429b68:	mov    rsi,rcx
  429b6b:	cmp    QWORD PTR [rbx+0x20],rax
  429b6f:	jbe    429c48 <flatcc_json_printer_table_field@@Base+0x188>
  429b75:	call   406210 <memcpy@plt>
  429b7a:	add    r14,QWORD PTR [rbx+0x28]
  429b7e:	mov    QWORD PTR [rbx+0x28],r14
  429b82:	mov    BYTE PTR [r14],0x22
  429b86:	xor    eax,eax
  429b88:	cmp    BYTE PTR [rbx+0x32],0x0
  429b8c:	sete   al
  429b8f:	add    rax,QWORD PTR [rbx+0x28]
  429b93:	lea    rdx,[rax+0x1]
  429b97:	mov    QWORD PTR [rbx+0x28],rdx
  429b9b:	mov    BYTE PTR [rax],0x3a
  429b9e:	xor    edx,edx
  429ba0:	mov    rax,QWORD PTR [rbx+0x28]
  429ba4:	mov    BYTE PTR [rax],0x20
  429ba7:	cmp    BYTE PTR [rbx+0x31],0x0
  429bab:	mov    eax,DWORD PTR [r13+0x14]
  429baf:	setne  dl
  429bb2:	add    rdx,QWORD PTR [rbx+0x28]
  429bb6:	dec    eax
  429bb8:	mov    QWORD PTR [rbx+0x28],rdx
  429bbc:	mov    ecx,eax
  429bbe:	je     429c80 <flatcc_json_printer_table_field@@Base+0x1c0>
  429bc4:	mov    eax,DWORD PTR [rbp+0x0]
  429bc7:	lea    rsi,[rdx+0x1]
  429bcb:	inc    DWORD PTR [rbx+0x38]
  429bce:	mov    QWORD PTR [rbx+0x28],rsi
  429bd2:	mov    BYTE PTR [rdx],0x7b
  429bd5:	mov    DWORD PTR [rsp+0x28],0x0
  429bdd:	mov    DWORD PTR [rsp+0x24],ecx
  429be1:	add    rax,rbp
  429be4:	mov    QWORD PTR [rsp+0x10],rax
  429be9:	movsxd rdx,DWORD PTR [rax]
  429bec:	lea    rsi,[rsp+0x10]
  429bf1:	sub    rax,rdx
  429bf4:	mov    QWORD PTR [rsp+0x18],rax
  429bf9:	movzx  eax,WORD PTR [rax]
  429bfc:	mov    rdi,rbx
  429bff:	mov    DWORD PTR [rsp+0x20],eax
  429c03:	call   r12
  429c06:	cmp    BYTE PTR [rbx+0x31],0x0
  429c0a:	jne    429cd8 <flatcc_json_printer_table_field@@Base+0x218>
  429c10:	mov    rsi,QWORD PTR [rbx+0x28]
  429c14:	lea    rax,[rsi+0x1]
  429c18:	mov    QWORD PTR [rbx+0x28],rax
  429c1c:	mov    BYTE PTR [rsi],0x7d
  429c1f:	mov    rax,QWORD PTR [rsp+0x38]
  429c24:	xor    rax,QWORD PTR fs:0x28
  429c2d:	jne    429d61 <flatcc_json_printer_table_field@@Base+0x2a1>
  429c33:	add    rsp,0x48
  429c37:	pop    rbx
  429c38:	pop    rbp
  429c39:	pop    r12
  429c3b:	pop    r13
  429c3d:	pop    r14
  429c3f:	pop    r15
  429c41:	ret    
  429c42:	nop    WORD PTR [rax+rax*1+0x0]
  429c48:	mov    rdi,rbx
  429c4b:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  429c50:	mov    r14,QWORD PTR [rbx+0x28]
  429c54:	jmp    429b82 <flatcc_json_printer_table_field@@Base+0xc2>
  429c59:	nop    DWORD PTR [rax+0x0]
  429c60:	xor    esi,esi
  429c62:	mov    rdi,rbx
  429c65:	mov    QWORD PTR [rsp+0x8],rcx
  429c6a:	call   QWORD PTR [rbx+0x48]
  429c6d:	mov    rsi,QWORD PTR [rbx+0x28]
  429c71:	mov    rcx,QWORD PTR [rsp+0x8]
  429c76:	jmp    429b4c <flatcc_json_printer_table_field@@Base+0x8c>
  429c7b:	nop    DWORD PTR [rax+rax*1+0x0]
  429c80:	mov    eax,DWORD PTR [rbx+0x3c]
  429c83:	test   eax,eax
  429c85:	jne    429c1f <flatcc_json_printer_table_field@@Base+0x15f>
  429c87:	mov    DWORD PTR [rbx+0x3c],0x2
  429c8e:	jmp    429c1f <flatcc_json_printer_table_field@@Base+0x15f>
  429c90:	lea    rax,[rsi+0x1]
  429c94:	mov    QWORD PTR [rbx+0x28],rax
  429c98:	mov    BYTE PTR [rsi],0xa
  429c9b:	mov    QWORD PTR [rsp+0x8],rcx
  429ca0:	movzx  esi,BYTE PTR [rbx+0x31]
  429ca4:	mov    rdi,QWORD PTR [rbx+0x28]
  429ca8:	imul   esi,DWORD PTR [rbx+0x38]
  429cac:	movsxd r15,esi
  429caf:	lea    rax,[rdi+r15*1]
  429cb3:	cmp    QWORD PTR [rbx+0x20],rax
  429cb7:	jae    429d20 <flatcc_json_printer_table_field@@Base+0x260>
  429cb9:	mov    rsi,r15
  429cbc:	mov    rdi,rbx
  429cbf:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429cc4:	mov    rsi,QWORD PTR [rbx+0x28]
  429cc8:	mov    rcx,QWORD PTR [rsp+0x8]
  429ccd:	jmp    429b4c <flatcc_json_printer_table_field@@Base+0x8c>
  429cd2:	nop    WORD PTR [rax+rax*1+0x0]
  429cd8:	mov    rax,QWORD PTR [rbx+0x28]
  429cdc:	lea    rdx,[rax+0x1]
  429ce0:	mov    QWORD PTR [rbx+0x28],rdx
  429ce4:	mov    BYTE PTR [rax],0xa
  429ce7:	mov    eax,DWORD PTR [rbx+0x38]
  429cea:	movzx  esi,BYTE PTR [rbx+0x31]
  429cee:	lea    ebp,[rax-0x1]
  429cf1:	imul   esi,ebp
  429cf4:	mov    rdi,QWORD PTR [rbx+0x28]
  429cf8:	mov    DWORD PTR [rbx+0x38],ebp
  429cfb:	movsxd rbp,esi
  429cfe:	lea    rax,[rdi+rbp*1]
  429d02:	cmp    QWORD PTR [rbx+0x20],rax
  429d06:	jae    429d48 <flatcc_json_printer_table_field@@Base+0x288>
  429d08:	mov    rsi,rbp
  429d0b:	mov    rdi,rbx
  429d0e:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429d13:	jmp    429c10 <flatcc_json_printer_table_field@@Base+0x150>
  429d18:	nop    DWORD PTR [rax+rax*1+0x0]
  429d20:	mov    esi,0x20
  429d25:	mov    rdx,r15
  429d28:	call   4061c0 <memset@plt>
  429d2d:	mov    rsi,QWORD PTR [rbx+0x28]
  429d31:	mov    rcx,QWORD PTR [rsp+0x8]
  429d36:	add    rsi,r15
  429d39:	mov    QWORD PTR [rbx+0x28],rsi
  429d3d:	jmp    429b4c <flatcc_json_printer_table_field@@Base+0x8c>
  429d42:	nop    WORD PTR [rax+rax*1+0x0]
  429d48:	mov    esi,0x20
  429d4d:	mov    rdx,rbp
  429d50:	call   4061c0 <memset@plt>
  429d55:	mov    rsi,QWORD PTR [rbx+0x28]
  429d59:	add    rsi,rbp
  429d5c:	jmp    429c14 <flatcc_json_printer_table_field@@Base+0x154>
  429d61:	call   4061a0 <__stack_chk_fail@plt>
  429d66:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000429d70 <flatcc_json_printer_union_field@@Base>:
  429d70:	endbr64 
  429d74:	push   r15
  429d76:	mov    r15,rdi
  429d79:	push   r14
  429d7b:	mov    r14,rsi
  429d7e:	push   r13
  429d80:	mov    r13,rcx
  429d83:	push   r12
  429d85:	push   rbp
  429d86:	push   rbx
  429d87:	sub    rsp,0x48
  429d8b:	mov    rax,QWORD PTR [rsp+0x80]
  429d93:	mov    QWORD PTR [rsp+0x8],r9
  429d98:	mov    QWORD PTR [rsp+0x10],rax
  429d9d:	mov    ecx,DWORD PTR [rsi+0x10]
  429da0:	mov    rax,QWORD PTR fs:0x28
  429da9:	mov    QWORD PTR [rsp+0x38],rax
  429dae:	xor    eax,eax
  429db0:	lea    eax,[rdx+rdx*1+0x2]
  429db4:	cmp    eax,ecx
  429db6:	jge    429ff0 <flatcc_json_printer_union_field@@Base+0x280>
  429dbc:	mov    rsi,QWORD PTR [rsi+0x8]
  429dc0:	mov    edx,eax
  429dc2:	movzx  edx,WORD PTR [rsi+rdx*1]
  429dc6:	test   dx,dx
  429dc9:	je     429ff0 <flatcc_json_printer_union_field@@Base+0x280>
  429dcf:	add    rdx,QWORD PTR [r14]
  429dd2:	add    eax,0x2
  429dd5:	cmp    eax,ecx
  429dd7:	jge    429f43 <flatcc_json_printer_union_field@@Base+0x1d3>
  429ddd:	mov    rcx,QWORD PTR [r14+0x8]
  429de1:	movzx  ebx,WORD PTR [rcx+rax*1]
  429de5:	test   bx,bx
  429de8:	je     429f43 <flatcc_json_printer_union_field@@Base+0x1d3>
  429dee:	add    rbx,QWORD PTR [r14]
  429df1:	je     429f43 <flatcc_json_printer_union_field@@Base+0x1d3>
  429df7:	test   rdx,rdx
  429dfa:	je     429f43 <flatcc_json_printer_union_field@@Base+0x1d3>
  429e00:	mov    eax,DWORD PTR [r14+0x18]
  429e04:	movzx  r12d,BYTE PTR [rdx]
  429e08:	lea    edx,[rax+0x1]
  429e0b:	mov    DWORD PTR [r14+0x18],edx
  429e0f:	mov    rsi,QWORD PTR [r15+0x28]
  429e13:	test   eax,eax
  429e15:	je     429e26 <flatcc_json_printer_union_field@@Base+0xb6>
  429e17:	lea    rax,[rsi+0x1]
  429e1b:	mov    QWORD PTR [r15+0x28],rax
  429e1f:	mov    BYTE PTR [rsi],0x2c
  429e22:	mov    rsi,QWORD PTR [r15+0x28]
  429e26:	cmp    BYTE PTR [r15+0x31],0x0
  429e2b:	jne    429f70 <flatcc_json_printer_union_field@@Base+0x200>
  429e31:	cmp    QWORD PTR [r15+0x20],rsi
  429e35:	ja     429e4e <flatcc_json_printer_union_field@@Base+0xde>
  429e37:	xor    esi,esi
  429e39:	mov    rdi,r15
  429e3c:	mov    DWORD PTR [rsp+0x1c],r8d
  429e41:	call   QWORD PTR [r15+0x48]
  429e45:	mov    rsi,QWORD PTR [r15+0x28]
  429e49:	mov    r8d,DWORD PTR [rsp+0x1c]
  429e4e:	mov    BYTE PTR [rsi],0x22
  429e51:	xor    edi,edi
  429e53:	movsxd rbp,r8d
  429e56:	cmp    BYTE PTR [r15+0x32],0x0
  429e5b:	sete   dil
  429e5f:	add    rdi,QWORD PTR [r15+0x28]
  429e63:	lea    rax,[rdi+rbp*1]
  429e67:	mov    QWORD PTR [r15+0x28],rdi
  429e6b:	mov    rdx,rbp
  429e6e:	mov    rsi,r13
  429e71:	cmp    QWORD PTR [r15+0x20],rax
  429e75:	jbe    429fd8 <flatcc_json_printer_union_field@@Base+0x268>
  429e7b:	call   406210 <memcpy@plt>
  429e80:	mov    rax,QWORD PTR [r15+0x28]
  429e84:	add    rax,rbp
  429e87:	mov    QWORD PTR [r15+0x28],rax
  429e8b:	lea    rdx,[rax+0x5]
  429e8f:	cmp    QWORD PTR [r15+0x20],rdx
  429e93:	ja     429fb8 <flatcc_json_printer_union_field@@Base+0x248>
  429e99:	mov    edx,0x5
  429e9e:	lea    rsi,[rip+0x6c92]        # 430b37 <flatcc_builder_padding_base@@Base+0x1e17>
  429ea5:	mov    rdi,r15
  429ea8:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  429ead:	mov    rax,QWORD PTR [r15+0x28]
  429eb1:	mov    BYTE PTR [rax],0x22
  429eb4:	xor    eax,eax
  429eb6:	cmp    BYTE PTR [r15+0x32],0x0
  429ebb:	sete   al
  429ebe:	add    rax,QWORD PTR [r15+0x28]
  429ec2:	lea    rdx,[rax+0x1]
  429ec6:	mov    QWORD PTR [r15+0x28],rdx
  429eca:	mov    BYTE PTR [rax],0x3a
  429ecd:	xor    esi,esi
  429ecf:	mov    rax,QWORD PTR [r15+0x28]
  429ed3:	mov    BYTE PTR [rax],0x20
  429ed6:	cmp    BYTE PTR [r15+0x31],0x0
  429edb:	setne  sil
  429edf:	add    rsi,QWORD PTR [r15+0x28]
  429ee3:	cmp    BYTE PTR [r15+0x33],0x0
  429ee8:	mov    QWORD PTR [r15+0x28],rsi
  429eec:	jne    42a000 <flatcc_json_printer_union_field@@Base+0x290>
  429ef2:	mov    rax,QWORD PTR [rsp+0x8]
  429ef7:	movzx  esi,r12b
  429efb:	mov    rdi,r15
  429efe:	call   rax
  429f00:	test   r12b,r12b
  429f03:	je     429f43 <flatcc_json_printer_union_field@@Base+0x1d3>
  429f05:	mov    rax,QWORD PTR [r15+0x28]
  429f09:	mov    rsi,r13
  429f0c:	lea    rdx,[rax+0x1]
  429f10:	mov    QWORD PTR [r15+0x28],rdx
  429f14:	mov    BYTE PTR [rax],0x2c
  429f17:	mov    rdi,r15
  429f1a:	mov    rdx,rbp
  429f1d:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  429f22:	mov    eax,DWORD PTR [r14+0x14]
  429f26:	lea    rsi,[rsp+0x20]
  429f2b:	mov    DWORD PTR [rsp+0x28],eax
  429f2f:	mov    rax,QWORD PTR [rsp+0x10]
  429f34:	mov    rdi,r15
  429f37:	mov    BYTE PTR [rsp+0x2c],r12b
  429f3c:	mov    QWORD PTR [rsp+0x20],rbx
  429f41:	call   rax
  429f43:	mov    rax,QWORD PTR [rsp+0x38]
  429f48:	xor    rax,QWORD PTR fs:0x28
  429f51:	jne    42a03a <flatcc_json_printer_union_field@@Base+0x2ca>
  429f57:	add    rsp,0x48
  429f5b:	pop    rbx
  429f5c:	pop    rbp
  429f5d:	pop    r12
  429f5f:	pop    r13
  429f61:	pop    r14
  429f63:	pop    r15
  429f65:	ret    
  429f66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  429f70:	lea    rax,[rsi+0x1]
  429f74:	mov    QWORD PTR [r15+0x28],rax
  429f78:	mov    BYTE PTR [rsi],0xa
  429f7b:	mov    DWORD PTR [rsp+0x1c],r8d
  429f80:	movzx  esi,BYTE PTR [r15+0x31]
  429f85:	mov    rdi,QWORD PTR [r15+0x28]
  429f89:	imul   esi,DWORD PTR [r15+0x38]
  429f8e:	movsxd rbp,esi
  429f91:	lea    rax,[rdi+rbp*1]
  429f95:	cmp    QWORD PTR [r15+0x20],rax
  429f99:	jae    42a018 <flatcc_json_printer_union_field@@Base+0x2a8>
  429f9b:	mov    rsi,rbp
  429f9e:	mov    rdi,r15
  429fa1:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429fa6:	mov    rsi,QWORD PTR [r15+0x28]
  429faa:	mov    r8d,DWORD PTR [rsp+0x1c]
  429faf:	jmp    429e4e <flatcc_json_printer_union_field@@Base+0xde>
  429fb4:	nop    DWORD PTR [rax+0x0]
  429fb8:	mov    DWORD PTR [rax],0x7079745f
  429fbe:	mov    BYTE PTR [rax+0x4],0x65
  429fc2:	mov    rax,QWORD PTR [r15+0x28]
  429fc6:	add    rax,0x5
  429fca:	mov    QWORD PTR [r15+0x28],rax
  429fce:	jmp    429eb1 <flatcc_json_printer_union_field@@Base+0x141>
  429fd3:	nop    DWORD PTR [rax+rax*1+0x0]
  429fd8:	mov    rdi,r15
  429fdb:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  429fe0:	mov    rax,QWORD PTR [r15+0x28]
  429fe4:	jmp    429e8b <flatcc_json_printer_union_field@@Base+0x11b>
  429fe9:	nop    DWORD PTR [rax+0x0]
  429ff0:	xor    edx,edx
  429ff2:	jmp    429dd2 <flatcc_json_printer_union_field@@Base+0x62>
  429ff7:	nop    WORD PTR [rax+rax*1+0x0]
  42a000:	movzx  edi,r12b
  42a004:	call   4205c0 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  42a009:	cdqe   
  42a00b:	add    QWORD PTR [r15+0x28],rax
  42a00f:	jmp    429f00 <flatcc_json_printer_union_field@@Base+0x190>
  42a014:	nop    DWORD PTR [rax+0x0]
  42a018:	mov    esi,0x20
  42a01d:	mov    rdx,rbp
  42a020:	call   4061c0 <memset@plt>
  42a025:	mov    rsi,QWORD PTR [r15+0x28]
  42a029:	mov    r8d,DWORD PTR [rsp+0x1c]
  42a02e:	add    rsi,rbp
  42a031:	mov    QWORD PTR [r15+0x28],rsi
  42a035:	jmp    429e4e <flatcc_json_printer_union_field@@Base+0xde>
  42a03a:	call   4061a0 <__stack_chk_fail@plt>
  42a03f:	nop

000000000042a040 <flatcc_json_printer_union_table@@Base>:
  42a040:	endbr64 
  42a044:	push   rbp
  42a045:	push   rbx
  42a046:	mov    rbx,rdi
  42a049:	sub    rsp,0x38
  42a04d:	mov    ecx,DWORD PTR [rsi+0x8]
  42a050:	mov    rax,QWORD PTR fs:0x28
  42a059:	mov    QWORD PTR [rsp+0x28],rax
  42a05e:	xor    eax,eax
  42a060:	dec    ecx
  42a062:	je     42a120 <flatcc_json_printer_union_table@@Base+0xe0>
  42a068:	mov    rax,QWORD PTR [rsi]
  42a06b:	mov    esi,DWORD PTR [rax]
  42a06d:	inc    DWORD PTR [rdi+0x38]
  42a070:	add    rax,rsi
  42a073:	mov    rsi,QWORD PTR [rdi+0x28]
  42a077:	lea    rdi,[rsi+0x1]
  42a07b:	mov    QWORD PTR [rbx+0x28],rdi
  42a07f:	mov    BYTE PTR [rsi],0x7b
  42a082:	mov    DWORD PTR [rsp+0x18],0x0
  42a08a:	mov    DWORD PTR [rsp+0x14],ecx
  42a08e:	mov    QWORD PTR [rsp],rax
  42a092:	mov    rsi,rsp
  42a095:	movsxd rcx,DWORD PTR [rax]
  42a098:	mov    rdi,rbx
  42a09b:	sub    rax,rcx
  42a09e:	mov    QWORD PTR [rsp+0x8],rax
  42a0a3:	movzx  eax,WORD PTR [rax]
  42a0a6:	mov    DWORD PTR [rsp+0x10],eax
  42a0aa:	call   rdx
  42a0ac:	cmp    BYTE PTR [rbx+0x31],0x0
  42a0b0:	jne    42a0e0 <flatcc_json_printer_union_table@@Base+0xa0>
  42a0b2:	mov    rsi,QWORD PTR [rbx+0x28]
  42a0b6:	lea    rax,[rsi+0x1]
  42a0ba:	mov    QWORD PTR [rbx+0x28],rax
  42a0be:	mov    BYTE PTR [rsi],0x7d
  42a0c1:	mov    rax,QWORD PTR [rsp+0x28]
  42a0c6:	xor    rax,QWORD PTR fs:0x28
  42a0cf:	jne    42a149 <flatcc_json_printer_union_table@@Base+0x109>
  42a0d1:	add    rsp,0x38
  42a0d5:	pop    rbx
  42a0d6:	pop    rbp
  42a0d7:	ret    
  42a0d8:	nop    DWORD PTR [rax+rax*1+0x0]
  42a0e0:	mov    rax,QWORD PTR [rbx+0x28]
  42a0e4:	lea    rdx,[rax+0x1]
  42a0e8:	mov    QWORD PTR [rbx+0x28],rdx
  42a0ec:	mov    BYTE PTR [rax],0xa
  42a0ef:	mov    eax,DWORD PTR [rbx+0x38]
  42a0f2:	movzx  esi,BYTE PTR [rbx+0x31]
  42a0f6:	lea    ebp,[rax-0x1]
  42a0f9:	imul   esi,ebp
  42a0fc:	mov    rdi,QWORD PTR [rbx+0x28]
  42a100:	mov    DWORD PTR [rbx+0x38],ebp
  42a103:	movsxd rbp,esi
  42a106:	lea    rax,[rdi+rbp*1]
  42a10a:	cmp    QWORD PTR [rbx+0x20],rax
  42a10e:	jae    42a130 <flatcc_json_printer_union_table@@Base+0xf0>
  42a110:	mov    rsi,rbp
  42a113:	mov    rdi,rbx
  42a116:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42a11b:	jmp    42a0b2 <flatcc_json_printer_union_table@@Base+0x72>
  42a11d:	nop    DWORD PTR [rax]
  42a120:	mov    eax,DWORD PTR [rdi+0x3c]
  42a123:	test   eax,eax
  42a125:	jne    42a0c1 <flatcc_json_printer_union_table@@Base+0x81>
  42a127:	mov    DWORD PTR [rdi+0x3c],0x2
  42a12e:	jmp    42a0c1 <flatcc_json_printer_union_table@@Base+0x81>
  42a130:	mov    esi,0x20
  42a135:	mov    rdx,rbp
  42a138:	call   4061c0 <memset@plt>
  42a13d:	mov    rsi,QWORD PTR [rbx+0x28]
  42a141:	add    rsi,rbp
  42a144:	jmp    42a0b6 <flatcc_json_printer_union_table@@Base+0x76>
  42a149:	call   4061a0 <__stack_chk_fail@plt>
  42a14e:	xchg   ax,ax

000000000042a150 <flatcc_json_printer_union_struct@@Base>:
  42a150:	endbr64 
  42a154:	push   rbp
  42a155:	push   rbx
  42a156:	mov    rbx,rdi
  42a159:	sub    rsp,0x8
  42a15d:	mov    rax,QWORD PTR [rdi+0x28]
  42a161:	inc    DWORD PTR [rdi+0x38]
  42a164:	lea    rcx,[rax+0x1]
  42a168:	mov    QWORD PTR [rdi+0x28],rcx
  42a16c:	mov    BYTE PTR [rax],0x7b
  42a16f:	mov    rsi,QWORD PTR [rsi]
  42a172:	mov    eax,DWORD PTR [rsi]
  42a174:	add    rsi,rax
  42a177:	call   rdx
  42a179:	cmp    BYTE PTR [rbx+0x31],0x0
  42a17d:	jne    42a198 <flatcc_json_printer_union_struct@@Base+0x48>
  42a17f:	mov    rsi,QWORD PTR [rbx+0x28]
  42a183:	lea    rax,[rsi+0x1]
  42a187:	mov    QWORD PTR [rbx+0x28],rax
  42a18b:	mov    BYTE PTR [rsi],0x7d
  42a18e:	add    rsp,0x8
  42a192:	pop    rbx
  42a193:	pop    rbp
  42a194:	ret    
  42a195:	nop    DWORD PTR [rax]
  42a198:	mov    rax,QWORD PTR [rbx+0x28]
  42a19c:	lea    rdx,[rax+0x1]
  42a1a0:	mov    QWORD PTR [rbx+0x28],rdx
  42a1a4:	mov    BYTE PTR [rax],0xa
  42a1a7:	mov    eax,DWORD PTR [rbx+0x38]
  42a1aa:	movzx  esi,BYTE PTR [rbx+0x31]
  42a1ae:	lea    ebp,[rax-0x1]
  42a1b1:	imul   esi,ebp
  42a1b4:	mov    rdi,QWORD PTR [rbx+0x28]
  42a1b8:	mov    DWORD PTR [rbx+0x38],ebp
  42a1bb:	movsxd rbp,esi
  42a1be:	lea    rax,[rdi+rbp*1]
  42a1c2:	cmp    QWORD PTR [rbx+0x20],rax
  42a1c6:	jae    42a1d8 <flatcc_json_printer_union_struct@@Base+0x88>
  42a1c8:	mov    rsi,rbp
  42a1cb:	mov    rdi,rbx
  42a1ce:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42a1d3:	jmp    42a17f <flatcc_json_printer_union_struct@@Base+0x2f>
  42a1d5:	nop    DWORD PTR [rax]
  42a1d8:	mov    esi,0x20
  42a1dd:	mov    rdx,rbp
  42a1e0:	call   4061c0 <memset@plt>
  42a1e5:	mov    rsi,QWORD PTR [rbx+0x28]
  42a1e9:	add    rsi,rbp
  42a1ec:	jmp    42a183 <flatcc_json_printer_union_struct@@Base+0x33>
  42a1ee:	xchg   ax,ax

000000000042a1f0 <flatcc_json_printer_union_string@@Base>:
  42a1f0:	endbr64 
  42a1f4:	mov    rsi,QWORD PTR [rsi]
  42a1f7:	mov    eax,DWORD PTR [rsi]
  42a1f9:	add    rsi,rax
  42a1fc:	mov    edx,DWORD PTR [rsi]
  42a1fe:	add    rsi,0x4
  42a202:	jmp    421160 <flatcc_json_parser_struct_as_root@@Base+0x1920>
  42a207:	nop    WORD PTR [rax+rax*1+0x0]

000000000042a210 <flatcc_json_printer_embedded_struct_field@@Base>:
  42a210:	endbr64 
  42a214:	push   r15
  42a216:	mov    r15,r8
  42a219:	push   r14
  42a21b:	push   r13
  42a21d:	mov    r13,rcx
  42a220:	push   r12
  42a222:	mov    r12,rdx
  42a225:	push   rbp
  42a226:	push   rbx
  42a227:	mov    rbx,rdi
  42a22a:	sub    rsp,0x8
  42a22e:	mov    rax,QWORD PTR [rdi+0x28]
  42a232:	test   esi,esi
  42a234:	je     42a245 <flatcc_json_printer_embedded_struct_field@@Base+0x35>
  42a236:	lea    rdx,[rax+0x1]
  42a23a:	mov    QWORD PTR [rdi+0x28],rdx
  42a23e:	mov    BYTE PTR [rax],0x2c
  42a241:	mov    rax,QWORD PTR [rdi+0x28]
  42a245:	cmp    BYTE PTR [rbx+0x31],0x0
  42a249:	movsxd r14,r9d
  42a24c:	jne    42a360 <flatcc_json_printer_embedded_struct_field@@Base+0x150>
  42a252:	cmp    QWORD PTR [rbx+0x20],rax
  42a256:	ja     42a264 <flatcc_json_printer_embedded_struct_field@@Base+0x54>
  42a258:	xor    esi,esi
  42a25a:	mov    rdi,rbx
  42a25d:	call   QWORD PTR [rbx+0x48]
  42a260:	mov    rax,QWORD PTR [rbx+0x28]
  42a264:	mov    BYTE PTR [rax],0x22
  42a267:	xor    edi,edi
  42a269:	mov    rdx,r14
  42a26c:	cmp    BYTE PTR [rbx+0x32],0x0
  42a270:	sete   dil
  42a274:	add    rdi,QWORD PTR [rbx+0x28]
  42a278:	lea    rax,[rdi+r14*1]
  42a27c:	mov    QWORD PTR [rbx+0x28],rdi
  42a280:	mov    rsi,r15
  42a283:	cmp    QWORD PTR [rbx+0x20],rax
  42a287:	ja     42a308 <flatcc_json_printer_embedded_struct_field@@Base+0xf8>
  42a289:	mov    rdi,rbx
  42a28c:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42a291:	mov    r14,QWORD PTR [rbx+0x28]
  42a295:	mov    BYTE PTR [r14],0x22
  42a299:	xor    eax,eax
  42a29b:	lea    rsi,[r12+r13*1]
  42a29f:	cmp    BYTE PTR [rbx+0x32],0x0
  42a2a3:	sete   al
  42a2a6:	add    rax,QWORD PTR [rbx+0x28]
  42a2aa:	lea    rdx,[rax+0x1]
  42a2ae:	mov    QWORD PTR [rbx+0x28],rdx
  42a2b2:	mov    BYTE PTR [rax],0x3a
  42a2b5:	mov    rdi,rbx
  42a2b8:	mov    rax,QWORD PTR [rbx+0x28]
  42a2bc:	mov    BYTE PTR [rax],0x20
  42a2bf:	xor    eax,eax
  42a2c1:	cmp    BYTE PTR [rbx+0x31],0x0
  42a2c5:	setne  al
  42a2c8:	add    rax,QWORD PTR [rbx+0x28]
  42a2cc:	inc    DWORD PTR [rbx+0x38]
  42a2cf:	lea    rdx,[rax+0x1]
  42a2d3:	mov    QWORD PTR [rbx+0x28],rdx
  42a2d7:	mov    BYTE PTR [rax],0x7b
  42a2da:	call   QWORD PTR [rsp+0x40]
  42a2de:	cmp    BYTE PTR [rbx+0x31],0x0
  42a2e2:	jne    42a320 <flatcc_json_printer_embedded_struct_field@@Base+0x110>
  42a2e4:	mov    rsi,QWORD PTR [rbx+0x28]
  42a2e8:	lea    rax,[rsi+0x1]
  42a2ec:	mov    QWORD PTR [rbx+0x28],rax
  42a2f0:	mov    BYTE PTR [rsi],0x7d
  42a2f3:	add    rsp,0x8
  42a2f7:	pop    rbx
  42a2f8:	pop    rbp
  42a2f9:	pop    r12
  42a2fb:	pop    r13
  42a2fd:	pop    r14
  42a2ff:	pop    r15
  42a301:	ret    
  42a302:	nop    WORD PTR [rax+rax*1+0x0]
  42a308:	call   406210 <memcpy@plt>
  42a30d:	add    r14,QWORD PTR [rbx+0x28]
  42a311:	mov    QWORD PTR [rbx+0x28],r14
  42a315:	jmp    42a295 <flatcc_json_printer_embedded_struct_field@@Base+0x85>
  42a31a:	nop    WORD PTR [rax+rax*1+0x0]
  42a320:	mov    rax,QWORD PTR [rbx+0x28]
  42a324:	lea    rdx,[rax+0x1]
  42a328:	mov    QWORD PTR [rbx+0x28],rdx
  42a32c:	mov    BYTE PTR [rax],0xa
  42a32f:	mov    eax,DWORD PTR [rbx+0x38]
  42a332:	movzx  esi,BYTE PTR [rbx+0x31]
  42a336:	lea    ebp,[rax-0x1]
  42a339:	imul   esi,ebp
  42a33c:	mov    rdi,QWORD PTR [rbx+0x28]
  42a340:	mov    DWORD PTR [rbx+0x38],ebp
  42a343:	movsxd rbp,esi
  42a346:	lea    rax,[rdi+rbp*1]
  42a34a:	cmp    QWORD PTR [rbx+0x20],rax
  42a34e:	jae    42a3c0 <flatcc_json_printer_embedded_struct_field@@Base+0x1b0>
  42a350:	mov    rsi,rbp
  42a353:	mov    rdi,rbx
  42a356:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42a35b:	jmp    42a2e4 <flatcc_json_printer_embedded_struct_field@@Base+0xd4>
  42a35d:	nop    DWORD PTR [rax]
  42a360:	lea    rdx,[rax+0x1]
  42a364:	mov    QWORD PTR [rbx+0x28],rdx
  42a368:	mov    BYTE PTR [rax],0xa
  42a36b:	movzx  eax,BYTE PTR [rbx+0x31]
  42a36f:	mov    rdi,QWORD PTR [rbx+0x28]
  42a373:	imul   eax,DWORD PTR [rbx+0x38]
  42a377:	movsxd rbp,eax
  42a37a:	lea    rax,[rdi+rbp*1]
  42a37e:	cmp    QWORD PTR [rbx+0x20],rax
  42a382:	jae    42a3a0 <flatcc_json_printer_embedded_struct_field@@Base+0x190>
  42a384:	mov    rsi,rbp
  42a387:	mov    rdi,rbx
  42a38a:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42a38f:	mov    rax,QWORD PTR [rbx+0x28]
  42a393:	jmp    42a264 <flatcc_json_printer_embedded_struct_field@@Base+0x54>
  42a398:	nop    DWORD PTR [rax+rax*1+0x0]
  42a3a0:	mov    rdx,rbp
  42a3a3:	mov    esi,0x20
  42a3a8:	call   4061c0 <memset@plt>
  42a3ad:	mov    rax,QWORD PTR [rbx+0x28]
  42a3b1:	add    rax,rbp
  42a3b4:	mov    QWORD PTR [rbx+0x28],rax
  42a3b8:	jmp    42a264 <flatcc_json_printer_embedded_struct_field@@Base+0x54>
  42a3bd:	nop    DWORD PTR [rax]
  42a3c0:	mov    esi,0x20
  42a3c5:	mov    rdx,rbp
  42a3c8:	call   4061c0 <memset@plt>
  42a3cd:	mov    rsi,QWORD PTR [rbx+0x28]
  42a3d1:	add    rsi,rbp
  42a3d4:	jmp    42a2e8 <flatcc_json_printer_embedded_struct_field@@Base+0xd8>
  42a3d9:	nop    DWORD PTR [rax+0x0]

000000000042a3e0 <flatcc_json_printer_struct_field@@Base>:
  42a3e0:	endbr64 
  42a3e4:	lea    eax,[rdx+rdx*1+0x4]
  42a3e8:	cmp    eax,DWORD PTR [rsi+0x10]
  42a3eb:	jge    42a520 <flatcc_json_printer_struct_field@@Base+0x140>
  42a3f1:	mov    rdx,QWORD PTR [rsi+0x8]
  42a3f5:	movzx  eax,WORD PTR [rdx+rax*1]
  42a3f9:	test   ax,ax
  42a3fc:	je     42a520 <flatcc_json_printer_struct_field@@Base+0x140>
  42a402:	push   r15
  42a404:	push   r14
  42a406:	push   r13
  42a408:	push   r12
  42a40a:	push   rbp
  42a40b:	push   rbx
  42a40c:	sub    rsp,0x8
  42a410:	add    rax,QWORD PTR [rsi]
  42a413:	mov    r12,rax
  42a416:	je     42a4ee <flatcc_json_printer_struct_field@@Base+0x10e>
  42a41c:	mov    edx,DWORD PTR [rsi+0x18]
  42a41f:	lea    eax,[rdx+0x1]
  42a422:	mov    DWORD PTR [rsi+0x18],eax
  42a425:	mov    rax,QWORD PTR [rdi+0x28]
  42a429:	test   edx,edx
  42a42b:	je     42a43c <flatcc_json_printer_struct_field@@Base+0x5c>
  42a42d:	lea    rdx,[rax+0x1]
  42a431:	mov    QWORD PTR [rdi+0x28],rdx
  42a435:	mov    BYTE PTR [rax],0x2c
  42a438:	mov    rax,QWORD PTR [rdi+0x28]
  42a43c:	cmp    BYTE PTR [rdi+0x31],0x0
  42a440:	mov    r13,r9
  42a443:	mov    r15,rcx
  42a446:	mov    rbx,rdi
  42a449:	movsxd rbp,r8d
  42a44c:	jne    42a528 <flatcc_json_printer_struct_field@@Base+0x148>
  42a452:	cmp    QWORD PTR [rdi+0x20],rax
  42a456:	jbe    42a510 <flatcc_json_printer_struct_field@@Base+0x130>
  42a45c:	mov    BYTE PTR [rax],0x22
  42a45f:	xor    edi,edi
  42a461:	mov    rdx,rbp
  42a464:	cmp    BYTE PTR [rbx+0x32],0x0
  42a468:	sete   dil
  42a46c:	add    rdi,QWORD PTR [rbx+0x28]
  42a470:	lea    rax,[rdi+rbp*1]
  42a474:	mov    QWORD PTR [rbx+0x28],rdi
  42a478:	mov    rsi,r15
  42a47b:	cmp    QWORD PTR [rbx+0x20],rax
  42a47f:	jbe    42a500 <flatcc_json_printer_struct_field@@Base+0x120>
  42a481:	call   406210 <memcpy@plt>
  42a486:	add    rbp,QWORD PTR [rbx+0x28]
  42a48a:	mov    QWORD PTR [rbx+0x28],rbp
  42a48e:	mov    BYTE PTR [rbp+0x0],0x22
  42a492:	xor    eax,eax
  42a494:	mov    rsi,r12
  42a497:	cmp    BYTE PTR [rbx+0x32],0x0
  42a49b:	sete   al
  42a49e:	add    rax,QWORD PTR [rbx+0x28]
  42a4a2:	lea    rdx,[rax+0x1]
  42a4a6:	mov    QWORD PTR [rbx+0x28],rdx
  42a4aa:	mov    BYTE PTR [rax],0x3a
  42a4ad:	mov    rdi,rbx
  42a4b0:	mov    rax,QWORD PTR [rbx+0x28]
  42a4b4:	mov    BYTE PTR [rax],0x20
  42a4b7:	xor    eax,eax
  42a4b9:	cmp    BYTE PTR [rbx+0x31],0x0
  42a4bd:	setne  al
  42a4c0:	add    rax,QWORD PTR [rbx+0x28]
  42a4c4:	inc    DWORD PTR [rbx+0x38]
  42a4c7:	lea    rdx,[rax+0x1]
  42a4cb:	mov    QWORD PTR [rbx+0x28],rdx
  42a4cf:	mov    BYTE PTR [rax],0x7b
  42a4d2:	call   r13
  42a4d5:	cmp    BYTE PTR [rbx+0x31],0x0
  42a4d9:	jne    42a560 <flatcc_json_printer_struct_field@@Base+0x180>
  42a4df:	mov    rsi,QWORD PTR [rbx+0x28]
  42a4e3:	lea    rax,[rsi+0x1]
  42a4e7:	mov    QWORD PTR [rbx+0x28],rax
  42a4eb:	mov    BYTE PTR [rsi],0x7d
  42a4ee:	add    rsp,0x8
  42a4f2:	pop    rbx
  42a4f3:	pop    rbp
  42a4f4:	pop    r12
  42a4f6:	pop    r13
  42a4f8:	pop    r14
  42a4fa:	pop    r15
  42a4fc:	ret    
  42a4fd:	nop    DWORD PTR [rax]
  42a500:	mov    rdi,rbx
  42a503:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42a508:	mov    rbp,QWORD PTR [rbx+0x28]
  42a50c:	jmp    42a48e <flatcc_json_printer_struct_field@@Base+0xae>
  42a50e:	xchg   ax,ax
  42a510:	xor    esi,esi
  42a512:	call   QWORD PTR [rdi+0x48]
  42a515:	mov    rax,QWORD PTR [rbx+0x28]
  42a519:	jmp    42a45c <flatcc_json_printer_struct_field@@Base+0x7c>
  42a51e:	xchg   ax,ax
  42a520:	ret    
  42a521:	nop    DWORD PTR [rax+0x0]
  42a528:	lea    rdx,[rax+0x1]
  42a52c:	mov    QWORD PTR [rdi+0x28],rdx
  42a530:	mov    BYTE PTR [rax],0xa
  42a533:	movzx  eax,BYTE PTR [rdi+0x31]
  42a537:	imul   eax,DWORD PTR [rdi+0x38]
  42a53b:	mov    rdi,QWORD PTR [rdi+0x28]
  42a53f:	movsxd r14,eax
  42a542:	lea    rax,[rdi+r14*1]
  42a546:	cmp    QWORD PTR [rbx+0x20],rax
  42a54a:	jae    42a5a0 <flatcc_json_printer_struct_field@@Base+0x1c0>
  42a54c:	mov    rsi,r14
  42a54f:	mov    rdi,rbx
  42a552:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42a557:	mov    rax,QWORD PTR [rbx+0x28]
  42a55b:	jmp    42a45c <flatcc_json_printer_struct_field@@Base+0x7c>
  42a560:	mov    rax,QWORD PTR [rbx+0x28]
  42a564:	lea    rdx,[rax+0x1]
  42a568:	mov    QWORD PTR [rbx+0x28],rdx
  42a56c:	mov    BYTE PTR [rax],0xa
  42a56f:	mov    eax,DWORD PTR [rbx+0x38]
  42a572:	movzx  esi,BYTE PTR [rbx+0x31]
  42a576:	lea    ebp,[rax-0x1]
  42a579:	imul   esi,ebp
  42a57c:	mov    rdi,QWORD PTR [rbx+0x28]
  42a580:	mov    DWORD PTR [rbx+0x38],ebp
  42a583:	movsxd rbp,esi
  42a586:	lea    rax,[rdi+rbp*1]
  42a58a:	cmp    QWORD PTR [rbx+0x20],rax
  42a58e:	jae    42a5c0 <flatcc_json_printer_struct_field@@Base+0x1e0>
  42a590:	mov    rsi,rbp
  42a593:	mov    rdi,rbx
  42a596:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42a59b:	jmp    42a4df <flatcc_json_printer_struct_field@@Base+0xff>
  42a5a0:	mov    rdx,r14
  42a5a3:	mov    esi,0x20
  42a5a8:	call   4061c0 <memset@plt>
  42a5ad:	mov    rax,QWORD PTR [rbx+0x28]
  42a5b1:	add    rax,r14
  42a5b4:	mov    QWORD PTR [rbx+0x28],rax
  42a5b8:	jmp    42a45c <flatcc_json_printer_struct_field@@Base+0x7c>
  42a5bd:	nop    DWORD PTR [rax]
  42a5c0:	mov    esi,0x20
  42a5c5:	mov    rdx,rbp
  42a5c8:	call   4061c0 <memset@plt>
  42a5cd:	mov    rsi,QWORD PTR [rbx+0x28]
  42a5d1:	add    rsi,rbp
  42a5d4:	jmp    42a4e3 <flatcc_json_printer_struct_field@@Base+0x103>
  42a5d9:	nop    DWORD PTR [rax+0x0]

000000000042a5e0 <flatcc_json_printer_struct_as_root@@Base>:
  42a5e0:	endbr64 
  42a5e4:	push   r12
  42a5e6:	mov    r12,r8
  42a5e9:	push   rbp
  42a5ea:	mov    rbp,rsi
  42a5ed:	push   rbx
  42a5ee:	mov    rbx,rdi
  42a5f1:	call   420f10 <flatcc_json_parser_struct_as_root@@Base+0x16d0>
  42a5f6:	test   eax,eax
  42a5f8:	je     42a6e0 <flatcc_json_printer_struct_as_root@@Base+0x100>
  42a5fe:	mov    rax,QWORD PTR [rbx+0x28]
  42a602:	inc    DWORD PTR [rbx+0x38]
  42a605:	lea    rdx,[rax+0x1]
  42a609:	mov    QWORD PTR [rbx+0x28],rdx
  42a60d:	mov    BYTE PTR [rax],0x7b
  42a610:	mov    rdi,rbx
  42a613:	mov    esi,DWORD PTR [rbp+0x0]
  42a616:	add    rsi,rbp
  42a619:	call   r12
  42a61c:	cmp    BYTE PTR [rbx+0x31],0x0
  42a620:	jne    42a680 <flatcc_json_printer_struct_as_root@@Base+0xa0>
  42a622:	mov    rsi,QWORD PTR [rbx+0x28]
  42a626:	lea    rax,[rsi+0x1]
  42a62a:	mov    QWORD PTR [rbx+0x28],rax
  42a62e:	mov    BYTE PTR [rsi],0x7d
  42a631:	cmp    BYTE PTR [rbx+0x31],0x0
  42a635:	jne    42a660 <flatcc_json_printer_struct_as_root@@Base+0x80>
  42a637:	mov    esi,0x1
  42a63c:	mov    rdi,rbx
  42a63f:	call   QWORD PTR [rbx+0x48]
  42a642:	mov    eax,DWORD PTR [rbx+0x3c]
  42a645:	test   eax,eax
  42a647:	jne    42a6e0 <flatcc_json_printer_struct_as_root@@Base+0x100>
  42a64d:	mov    rax,QWORD PTR [rbx+0x28]
  42a651:	sub    rax,QWORD PTR [rbx]
  42a654:	add    eax,DWORD PTR [rbx+0x18]
  42a657:	pop    rbx
  42a658:	pop    rbp
  42a659:	pop    r12
  42a65b:	ret    
  42a65c:	nop    DWORD PTR [rax+0x0]
  42a660:	mov    edx,DWORD PTR [rbx+0x38]
  42a663:	test   edx,edx
  42a665:	jne    42a637 <flatcc_json_printer_struct_as_root@@Base+0x57>
  42a667:	mov    rax,QWORD PTR [rbx+0x28]
  42a66b:	lea    rdx,[rax+0x1]
  42a66f:	mov    QWORD PTR [rbx+0x28],rdx
  42a673:	mov    BYTE PTR [rax],0xa
  42a676:	jmp    42a637 <flatcc_json_printer_struct_as_root@@Base+0x57>
  42a678:	nop    DWORD PTR [rax+rax*1+0x0]
  42a680:	mov    rax,QWORD PTR [rbx+0x28]
  42a684:	lea    rdx,[rax+0x1]
  42a688:	mov    QWORD PTR [rbx+0x28],rdx
  42a68c:	mov    BYTE PTR [rax],0xa
  42a68f:	mov    eax,DWORD PTR [rbx+0x38]
  42a692:	movzx  esi,BYTE PTR [rbx+0x31]
  42a696:	lea    ebp,[rax-0x1]
  42a699:	imul   esi,ebp
  42a69c:	mov    rdi,QWORD PTR [rbx+0x28]
  42a6a0:	mov    DWORD PTR [rbx+0x38],ebp
  42a6a3:	movsxd rbp,esi
  42a6a6:	lea    rax,[rdi+rbp*1]
  42a6aa:	cmp    QWORD PTR [rbx+0x20],rax
  42a6ae:	jae    42a6c0 <flatcc_json_printer_struct_as_root@@Base+0xe0>
  42a6b0:	mov    rsi,rbp
  42a6b3:	mov    rdi,rbx
  42a6b6:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42a6bb:	jmp    42a622 <flatcc_json_printer_struct_as_root@@Base+0x42>
  42a6c0:	mov    esi,0x20
  42a6c5:	mov    rdx,rbp
  42a6c8:	call   4061c0 <memset@plt>
  42a6cd:	mov    rsi,QWORD PTR [rbx+0x28]
  42a6d1:	add    rsi,rbp
  42a6d4:	jmp    42a626 <flatcc_json_printer_struct_as_root@@Base+0x46>
  42a6d9:	nop    DWORD PTR [rax+0x0]
  42a6e0:	mov    eax,0xffffffff
  42a6e5:	jmp    42a657 <flatcc_json_printer_struct_as_root@@Base+0x77>
  42a6ea:	nop    WORD PTR [rax+rax*1+0x0]

000000000042a6f0 <flatcc_json_printer_table_as_root@@Base>:
  42a6f0:	endbr64 
  42a6f4:	push   r12
  42a6f6:	mov    r12,r8
  42a6f9:	push   rbp
  42a6fa:	mov    rbp,rsi
  42a6fd:	push   rbx
  42a6fe:	mov    rbx,rdi
  42a701:	sub    rsp,0x30
  42a705:	mov    rax,QWORD PTR fs:0x28
  42a70e:	mov    QWORD PTR [rsp+0x28],rax
  42a713:	xor    eax,eax
  42a715:	call   420f10 <flatcc_json_parser_struct_as_root@@Base+0x16d0>
  42a71a:	test   eax,eax
  42a71c:	je     42a840 <flatcc_json_printer_table_as_root@@Base+0x150>
  42a722:	mov    eax,DWORD PTR [rbp+0x0]
  42a725:	inc    DWORD PTR [rbx+0x38]
  42a728:	add    rbp,rax
  42a72b:	mov    rax,QWORD PTR [rbx+0x28]
  42a72f:	mov    rsi,rsp
  42a732:	lea    rdx,[rax+0x1]
  42a736:	mov    QWORD PTR [rbx+0x28],rdx
  42a73a:	mov    BYTE PTR [rax],0x7b
  42a73d:	mov    QWORD PTR [rsp+0x14],0x63
  42a746:	mov    QWORD PTR [rsp],rbp
  42a74a:	mov    rdi,rbx
  42a74d:	movsxd rax,DWORD PTR [rbp+0x0]
  42a751:	sub    rbp,rax
  42a754:	movzx  eax,WORD PTR [rbp+0x0]
  42a758:	mov    QWORD PTR [rsp+0x8],rbp
  42a75d:	mov    DWORD PTR [rsp+0x10],eax
  42a761:	call   r12
  42a764:	cmp    BYTE PTR [rbx+0x31],0x0
  42a768:	jne    42a7e0 <flatcc_json_printer_table_as_root@@Base+0xf0>
  42a76a:	mov    rsi,QWORD PTR [rbx+0x28]
  42a76e:	lea    rax,[rsi+0x1]
  42a772:	mov    QWORD PTR [rbx+0x28],rax
  42a776:	mov    BYTE PTR [rsi],0x7d
  42a779:	cmp    BYTE PTR [rbx+0x31],0x0
  42a77d:	jne    42a7c0 <flatcc_json_printer_table_as_root@@Base+0xd0>
  42a77f:	mov    esi,0x1
  42a784:	mov    rdi,rbx
  42a787:	call   QWORD PTR [rbx+0x48]
  42a78a:	mov    eax,DWORD PTR [rbx+0x3c]
  42a78d:	test   eax,eax
  42a78f:	jne    42a840 <flatcc_json_printer_table_as_root@@Base+0x150>
  42a795:	mov    rax,QWORD PTR [rbx+0x28]
  42a799:	sub    rax,QWORD PTR [rbx]
  42a79c:	add    eax,DWORD PTR [rbx+0x18]
  42a79f:	mov    rcx,QWORD PTR [rsp+0x28]
  42a7a4:	xor    rcx,QWORD PTR fs:0x28
  42a7ad:	jne    42a84a <flatcc_json_printer_table_as_root@@Base+0x15a>
  42a7b3:	add    rsp,0x30
  42a7b7:	pop    rbx
  42a7b8:	pop    rbp
  42a7b9:	pop    r12
  42a7bb:	ret    
  42a7bc:	nop    DWORD PTR [rax+0x0]
  42a7c0:	mov    edx,DWORD PTR [rbx+0x38]
  42a7c3:	test   edx,edx
  42a7c5:	jne    42a77f <flatcc_json_printer_table_as_root@@Base+0x8f>
  42a7c7:	mov    rax,QWORD PTR [rbx+0x28]
  42a7cb:	lea    rdx,[rax+0x1]
  42a7cf:	mov    QWORD PTR [rbx+0x28],rdx
  42a7d3:	mov    BYTE PTR [rax],0xa
  42a7d6:	jmp    42a77f <flatcc_json_printer_table_as_root@@Base+0x8f>
  42a7d8:	nop    DWORD PTR [rax+rax*1+0x0]
  42a7e0:	mov    rax,QWORD PTR [rbx+0x28]
  42a7e4:	lea    rdx,[rax+0x1]
  42a7e8:	mov    QWORD PTR [rbx+0x28],rdx
  42a7ec:	mov    BYTE PTR [rax],0xa
  42a7ef:	mov    eax,DWORD PTR [rbx+0x38]
  42a7f2:	movzx  esi,BYTE PTR [rbx+0x31]
  42a7f6:	lea    ebp,[rax-0x1]
  42a7f9:	imul   esi,ebp
  42a7fc:	mov    rdi,QWORD PTR [rbx+0x28]
  42a800:	mov    DWORD PTR [rbx+0x38],ebp
  42a803:	movsxd rbp,esi
  42a806:	lea    rax,[rdi+rbp*1]
  42a80a:	cmp    QWORD PTR [rbx+0x20],rax
  42a80e:	jae    42a820 <flatcc_json_printer_table_as_root@@Base+0x130>
  42a810:	mov    rsi,rbp
  42a813:	mov    rdi,rbx
  42a816:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42a81b:	jmp    42a76a <flatcc_json_printer_table_as_root@@Base+0x7a>
  42a820:	mov    esi,0x20
  42a825:	mov    rdx,rbp
  42a828:	call   4061c0 <memset@plt>
  42a82d:	mov    rsi,QWORD PTR [rbx+0x28]
  42a831:	add    rsi,rbp
  42a834:	jmp    42a76e <flatcc_json_printer_table_as_root@@Base+0x7e>
  42a839:	nop    DWORD PTR [rax+0x0]
  42a840:	mov    eax,0xffffffff
  42a845:	jmp    42a79f <flatcc_json_printer_table_as_root@@Base+0xaf>
  42a84a:	call   4061a0 <__stack_chk_fail@plt>
  42a84f:	nop

000000000042a850 <flatcc_json_printer_struct_as_nested_root@@Base>:
  42a850:	endbr64 
  42a854:	lea    eax,[rdx+rdx*1+0x4]
  42a858:	cmp    eax,DWORD PTR [rsi+0x10]
  42a85b:	jge    42a900 <flatcc_json_printer_struct_as_nested_root@@Base+0xb0>
  42a861:	mov    r10,QWORD PTR [rsi+0x8]
  42a865:	movzx  eax,WORD PTR [r10+rax*1]
  42a86a:	test   ax,ax
  42a86d:	je     42a900 <flatcc_json_printer_struct_as_nested_root@@Base+0xb0>
  42a873:	add    rax,QWORD PTR [rsi]
  42a876:	je     42a900 <flatcc_json_printer_struct_as_nested_root@@Base+0xb0>
  42a87c:	push   r14
  42a87e:	mov    r14,rsi
  42a881:	push   r13
  42a883:	mov    r13,rcx
  42a886:	mov    rcx,r9
  42a889:	push   r12
  42a88b:	mov    r12d,r8d
  42a88e:	push   rbp
  42a88f:	mov    rbp,rdi
  42a892:	push   rbx
  42a893:	mov    ebx,DWORD PTR [rax]
  42a895:	add    rbx,rax
  42a898:	mov    edx,DWORD PTR [rbx]
  42a89a:	mov    rsi,rbx
  42a89d:	call   420f10 <flatcc_json_parser_struct_as_root@@Base+0x16d0>
  42a8a2:	test   eax,eax
  42a8a4:	je     42a8f6 <flatcc_json_printer_struct_as_nested_root@@Base+0xa6>
  42a8a6:	mov    eax,DWORD PTR [r14+0x18]
  42a8aa:	lea    edx,[rax+0x1]
  42a8ad:	mov    DWORD PTR [r14+0x18],edx
  42a8b1:	test   eax,eax
  42a8b3:	jne    42a908 <flatcc_json_printer_struct_as_nested_root@@Base+0xb8>
  42a8b5:	movsxd rdx,r12d
  42a8b8:	mov    rsi,r13
  42a8bb:	mov    rdi,rbp
  42a8be:	call   4213b0 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  42a8c3:	mov    rax,QWORD PTR [rbp+0x28]
  42a8c7:	inc    DWORD PTR [rbp+0x38]
  42a8ca:	lea    rdx,[rax+0x1]
  42a8ce:	mov    QWORD PTR [rbp+0x28],rdx
  42a8d2:	mov    BYTE PTR [rax],0x7b
  42a8d5:	mov    rdi,rbp
  42a8d8:	mov    esi,DWORD PTR [rbx]
  42a8da:	add    rsi,rbx
  42a8dd:	call   QWORD PTR [rsp+0x30]
  42a8e1:	cmp    BYTE PTR [rbp+0x31],0x0
  42a8e5:	jne    42a920 <flatcc_json_printer_struct_as_nested_root@@Base+0xd0>
  42a8e7:	mov    rsi,QWORD PTR [rbp+0x28]
  42a8eb:	lea    rax,[rsi+0x1]
  42a8ef:	mov    QWORD PTR [rbp+0x28],rax
  42a8f3:	mov    BYTE PTR [rsi],0x7d
  42a8f6:	pop    rbx
  42a8f7:	pop    rbp
  42a8f8:	pop    r12
  42a8fa:	pop    r13
  42a8fc:	pop    r14
  42a8fe:	ret    
  42a8ff:	nop
  42a900:	ret    
  42a901:	nop    DWORD PTR [rax+0x0]
  42a908:	mov    rax,QWORD PTR [rbp+0x28]
  42a90c:	lea    rdx,[rax+0x1]
  42a910:	mov    QWORD PTR [rbp+0x28],rdx
  42a914:	mov    BYTE PTR [rax],0x2c
  42a917:	jmp    42a8b5 <flatcc_json_printer_struct_as_nested_root@@Base+0x65>
  42a919:	nop    DWORD PTR [rax+0x0]
  42a920:	mov    rax,QWORD PTR [rbp+0x28]
  42a924:	lea    rdx,[rax+0x1]
  42a928:	mov    QWORD PTR [rbp+0x28],rdx
  42a92c:	mov    BYTE PTR [rax],0xa
  42a92f:	mov    eax,DWORD PTR [rbp+0x38]
  42a932:	movzx  esi,BYTE PTR [rbp+0x31]
  42a936:	lea    ebx,[rax-0x1]
  42a939:	imul   esi,ebx
  42a93c:	mov    rdi,QWORD PTR [rbp+0x28]
  42a940:	mov    DWORD PTR [rbp+0x38],ebx
  42a943:	movsxd rbx,esi
  42a946:	lea    rax,[rdi+rbx*1]
  42a94a:	cmp    QWORD PTR [rbp+0x20],rax
  42a94e:	jae    42a960 <flatcc_json_printer_struct_as_nested_root@@Base+0x110>
  42a950:	mov    rsi,rbx
  42a953:	mov    rdi,rbp
  42a956:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42a95b:	jmp    42a8e7 <flatcc_json_printer_struct_as_nested_root@@Base+0x97>
  42a95d:	nop    DWORD PTR [rax]
  42a960:	mov    rdx,rbx
  42a963:	mov    esi,0x20
  42a968:	call   4061c0 <memset@plt>
  42a96d:	add    rbx,QWORD PTR [rbp+0x28]
  42a971:	mov    rsi,rbx
  42a974:	jmp    42a8eb <flatcc_json_printer_struct_as_nested_root@@Base+0x9b>
  42a979:	nop    DWORD PTR [rax+0x0]

000000000042a980 <flatcc_json_printer_table_as_nested_root@@Base>:
  42a980:	endbr64 
  42a984:	push   r15
  42a986:	push   r14
  42a988:	push   r13
  42a98a:	push   r12
  42a98c:	push   rbp
  42a98d:	push   rbx
  42a98e:	sub    rsp,0x48
  42a992:	mov    DWORD PTR [rsp],r8d
  42a996:	mov    r13,QWORD PTR [rsp+0x80]
  42a99e:	mov    rax,QWORD PTR fs:0x28
  42a9a7:	mov    QWORD PTR [rsp+0x38],rax
  42a9ac:	xor    eax,eax
  42a9ae:	lea    eax,[rdx+rdx*1+0x4]
  42a9b2:	cmp    eax,DWORD PTR [rsi+0x10]
  42a9b5:	jge    42ab0d <flatcc_json_printer_table_as_nested_root@@Base+0x18d>
  42a9bb:	mov    rdx,QWORD PTR [rsi+0x8]
  42a9bf:	mov    r14,rsi
  42a9c2:	movzx  eax,WORD PTR [rdx+rax*1]
  42a9c6:	test   ax,ax
  42a9c9:	je     42ab0d <flatcc_json_printer_table_as_nested_root@@Base+0x18d>
  42a9cf:	add    rax,QWORD PTR [rsi]
  42a9d2:	je     42ab0d <flatcc_json_printer_table_as_nested_root@@Base+0x18d>
  42a9d8:	mov    ebp,DWORD PTR [rax]
  42a9da:	mov    r12,rcx
  42a9dd:	add    rbp,rax
  42a9e0:	lea    r15,[rbp+0x4]
  42a9e4:	mov    edx,DWORD PTR [rbp+0x0]
  42a9e7:	mov    rcx,r9
  42a9ea:	mov    rsi,r15
  42a9ed:	mov    rbx,rdi
  42a9f0:	call   420f10 <flatcc_json_parser_struct_as_root@@Base+0x16d0>
  42a9f5:	test   eax,eax
  42a9f7:	je     42ab0d <flatcc_json_printer_table_as_nested_root@@Base+0x18d>
  42a9fd:	mov    eax,DWORD PTR [r14+0x18]
  42aa01:	mov    rsi,QWORD PTR [rbx+0x28]
  42aa05:	lea    edx,[rax+0x1]
  42aa08:	test   eax,eax
  42aa0a:	mov    DWORD PTR [r14+0x18],edx
  42aa0e:	movsxd r8,DWORD PTR [rsp]
  42aa12:	jne    42ab50 <flatcc_json_printer_table_as_nested_root@@Base+0x1d0>
  42aa18:	cmp    BYTE PTR [rbx+0x31],0x0
  42aa1c:	jne    42ab69 <flatcc_json_printer_table_as_nested_root@@Base+0x1e9>
  42aa22:	cmp    QWORD PTR [rbx+0x20],rsi
  42aa26:	ja     42aa3c <flatcc_json_printer_table_as_nested_root@@Base+0xbc>
  42aa28:	xor    esi,esi
  42aa2a:	mov    rdi,rbx
  42aa2d:	mov    QWORD PTR [rsp],r8
  42aa31:	call   QWORD PTR [rbx+0x48]
  42aa34:	mov    rsi,QWORD PTR [rbx+0x28]
  42aa38:	mov    r8,QWORD PTR [rsp]
  42aa3c:	mov    BYTE PTR [rsi],0x22
  42aa3f:	xor    edi,edi
  42aa41:	mov    rdx,r8
  42aa44:	cmp    BYTE PTR [rbx+0x32],0x0
  42aa48:	sete   dil
  42aa4c:	add    rdi,QWORD PTR [rbx+0x28]
  42aa50:	lea    rax,[rdi+r8*1]
  42aa54:	mov    QWORD PTR [rbx+0x28],rdi
  42aa58:	cmp    QWORD PTR [rbx+0x20],rax
  42aa5c:	ja     42ab30 <flatcc_json_printer_table_as_nested_root@@Base+0x1b0>
  42aa62:	mov    rsi,r12
  42aa65:	mov    rdi,rbx
  42aa68:	call   4202f0 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42aa6d:	mov    r8,QWORD PTR [rbx+0x28]
  42aa71:	mov    BYTE PTR [r8],0x22
  42aa75:	xor    eax,eax
  42aa77:	cmp    BYTE PTR [rbx+0x32],0x0
  42aa7b:	sete   al
  42aa7e:	add    rax,QWORD PTR [rbx+0x28]
  42aa82:	lea    rdx,[rax+0x1]
  42aa86:	mov    QWORD PTR [rbx+0x28],rdx
  42aa8a:	mov    BYTE PTR [rax],0x3a
  42aa8d:	mov    rax,QWORD PTR [rbx+0x28]
  42aa91:	mov    BYTE PTR [rax],0x20
  42aa94:	xor    eax,eax
  42aa96:	cmp    BYTE PTR [rbx+0x31],0x0
  42aa9a:	setne  al
  42aa9d:	mov    edx,DWORD PTR [r14+0x14]
  42aaa1:	add    rax,QWORD PTR [rbx+0x28]
  42aaa5:	mov    QWORD PTR [rbx+0x28],rax
  42aaa9:	dec    edx
  42aaab:	je     42abb0 <flatcc_json_printer_table_as_nested_root@@Base+0x230>
  42aab1:	mov    ecx,DWORD PTR [rbp+0x4]
  42aab4:	inc    DWORD PTR [rbx+0x38]
  42aab7:	add    r15,rcx
  42aaba:	lea    rcx,[rax+0x1]
  42aabe:	mov    QWORD PTR [rbx+0x28],rcx
  42aac2:	mov    BYTE PTR [rax],0x7b
  42aac5:	mov    DWORD PTR [rsp+0x28],0x0
  42aacd:	mov    DWORD PTR [rsp+0x24],edx
  42aad1:	mov    QWORD PTR [rsp+0x10],r15
  42aad6:	lea    rsi,[rsp+0x10]
  42aadb:	movsxd rax,DWORD PTR [r15]
  42aade:	mov    rdi,rbx
  42aae1:	sub    r15,rax
  42aae4:	movzx  eax,WORD PTR [r15]
  42aae8:	mov    QWORD PTR [rsp+0x18],r15
  42aaed:	mov    DWORD PTR [rsp+0x20],eax
  42aaf1:	call   r13
  42aaf4:	cmp    BYTE PTR [rbx+0x31],0x0
  42aaf8:	jne    42abd0 <flatcc_json_printer_table_as_nested_root@@Base+0x250>
  42aafe:	mov    rsi,QWORD PTR [rbx+0x28]
  42ab02:	lea    rax,[rsi+0x1]
  42ab06:	mov    QWORD PTR [rbx+0x28],rax
  42ab0a:	mov    BYTE PTR [rsi],0x7d
  42ab0d:	mov    rax,QWORD PTR [rsp+0x38]
  42ab12:	xor    rax,QWORD PTR fs:0x28
  42ab1b:	jne    42ac59 <flatcc_json_printer_table_as_nested_root@@Base+0x2d9>
  42ab21:	add    rsp,0x48
  42ab25:	pop    rbx
  42ab26:	pop    rbp
  42ab27:	pop    r12
  42ab29:	pop    r13
  42ab2b:	pop    r14
  42ab2d:	pop    r15
  42ab2f:	ret    
  42ab30:	mov    rsi,r12
  42ab33:	mov    QWORD PTR [rsp],r8
  42ab37:	call   406210 <memcpy@plt>
  42ab3c:	mov    r8,QWORD PTR [rsp]
  42ab40:	add    r8,QWORD PTR [rbx+0x28]
  42ab44:	mov    QWORD PTR [rbx+0x28],r8
  42ab48:	jmp    42aa71 <flatcc_json_printer_table_as_nested_root@@Base+0xf1>
  42ab4d:	nop    DWORD PTR [rax]
  42ab50:	lea    rax,[rsi+0x1]
  42ab54:	mov    QWORD PTR [rbx+0x28],rax
  42ab58:	mov    BYTE PTR [rsi],0x2c
  42ab5b:	cmp    BYTE PTR [rbx+0x31],0x0
  42ab5f:	mov    rsi,QWORD PTR [rbx+0x28]
  42ab63:	je     42aa22 <flatcc_json_printer_table_as_nested_root@@Base+0xa2>
  42ab69:	lea    rax,[rsi+0x1]
  42ab6d:	mov    QWORD PTR [rbx+0x28],rax
  42ab71:	mov    BYTE PTR [rsi],0xa
  42ab74:	movzx  esi,BYTE PTR [rbx+0x31]
  42ab78:	mov    rdi,QWORD PTR [rbx+0x28]
  42ab7c:	imul   esi,DWORD PTR [rbx+0x38]
  42ab80:	movsxd rcx,esi
  42ab83:	lea    rax,[rdi+rcx*1]
  42ab87:	cmp    QWORD PTR [rbx+0x20],rax
  42ab8b:	jae    42ac10 <flatcc_json_printer_table_as_nested_root@@Base+0x290>
  42ab91:	mov    rsi,rcx
  42ab94:	mov    rdi,rbx
  42ab97:	mov    QWORD PTR [rsp],r8
  42ab9b:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42aba0:	mov    rsi,QWORD PTR [rbx+0x28]
  42aba4:	mov    r8,QWORD PTR [rsp]
  42aba8:	jmp    42aa3c <flatcc_json_printer_table_as_nested_root@@Base+0xbc>
  42abad:	nop    DWORD PTR [rax]
  42abb0:	mov    eax,DWORD PTR [rbx+0x3c]
  42abb3:	test   eax,eax
  42abb5:	jne    42ab0d <flatcc_json_printer_table_as_nested_root@@Base+0x18d>
  42abbb:	mov    DWORD PTR [rbx+0x3c],0x2
  42abc2:	jmp    42ab0d <flatcc_json_printer_table_as_nested_root@@Base+0x18d>
  42abc7:	nop    WORD PTR [rax+rax*1+0x0]
  42abd0:	mov    rax,QWORD PTR [rbx+0x28]
  42abd4:	lea    rdx,[rax+0x1]
  42abd8:	mov    QWORD PTR [rbx+0x28],rdx
  42abdc:	mov    BYTE PTR [rax],0xa
  42abdf:	mov    eax,DWORD PTR [rbx+0x38]
  42abe2:	movzx  esi,BYTE PTR [rbx+0x31]
  42abe6:	lea    ebp,[rax-0x1]
  42abe9:	imul   esi,ebp
  42abec:	mov    rdi,QWORD PTR [rbx+0x28]
  42abf0:	mov    DWORD PTR [rbx+0x38],ebp
  42abf3:	movsxd rbp,esi
  42abf6:	lea    rax,[rdi+rbp*1]
  42abfa:	cmp    QWORD PTR [rbx+0x20],rax
  42abfe:	jae    42ac40 <flatcc_json_printer_table_as_nested_root@@Base+0x2c0>
  42ac00:	mov    rsi,rbp
  42ac03:	mov    rdi,rbx
  42ac06:	call   420380 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42ac0b:	jmp    42aafe <flatcc_json_printer_table_as_nested_root@@Base+0x17e>
  42ac10:	mov    rdx,rcx
  42ac13:	mov    esi,0x20
  42ac18:	mov    QWORD PTR [rsp+0x8],r8
  42ac1d:	mov    QWORD PTR [rsp],rcx
  42ac21:	call   4061c0 <memset@plt>
  42ac26:	mov    rcx,QWORD PTR [rsp]
  42ac2a:	mov    r8,QWORD PTR [rsp+0x8]
  42ac2f:	add    rcx,QWORD PTR [rbx+0x28]
  42ac33:	mov    rsi,rcx
  42ac36:	mov    QWORD PTR [rbx+0x28],rcx
  42ac3a:	jmp    42aa3c <flatcc_json_printer_table_as_nested_root@@Base+0xbc>
  42ac3f:	nop
  42ac40:	mov    esi,0x20
  42ac45:	mov    rdx,rbp
  42ac48:	call   4061c0 <memset@plt>
  42ac4d:	mov    rsi,QWORD PTR [rbx+0x28]
  42ac51:	add    rsi,rbp
  42ac54:	jmp    42ab02 <flatcc_json_printer_table_as_nested_root@@Base+0x182>
  42ac59:	call   4061a0 <__stack_chk_fail@plt>
  42ac5e:	xchg   ax,ax

000000000042ac60 <flatcc_json_printer_init@@Base>:
  42ac60:	endbr64 
  42ac64:	vpxor  xmm0,xmm0,xmm0
  42ac68:	push   rbx
  42ac69:	mov    rbx,rdi
  42ac6c:	vmovups XMMWORD PTR [rdi],xmm0
  42ac70:	vmovups XMMWORD PTR [rdi+0x10],xmm0
  42ac75:	vmovups XMMWORD PTR [rdi+0x20],xmm0
  42ac7a:	vmovups XMMWORD PTR [rdi+0x30],xmm0
  42ac7f:	vmovups XMMWORD PTR [rdi+0x40],xmm0
  42ac84:	test   rsi,rsi
  42ac87:	je     42acd0 <flatcc_json_printer_init@@Base+0x70>
  42ac89:	lea    rax,[rip+0xffffffffffff57c0]        # 420450 <flatcc_json_parser_struct_as_root@@Base+0xc10>
  42ac90:	mov    QWORD PTR [rbx+0x40],rsi
  42ac94:	mov    QWORD PTR [rbx+0x48],rax
  42ac98:	mov    edi,0x4040
  42ac9d:	call   406220 <malloc@plt>
  42aca2:	mov    QWORD PTR [rbx],rax
  42aca5:	test   rax,rax
  42aca8:	je     42acdc <flatcc_json_printer_init@@Base+0x7c>
  42acaa:	mov    QWORD PTR [rbx+0x28],rax
  42acae:	add    rax,0x4000
  42acb4:	mov    QWORD PTR [rbx+0x20],rax
  42acb8:	mov    BYTE PTR [rbx+0x30],0x1
  42acbc:	mov    QWORD PTR [rbx+0x8],0x4040
  42acc4:	mov    QWORD PTR [rbx+0x10],0x4000
  42accc:	xor    eax,eax
  42acce:	pop    rbx
  42accf:	ret    
  42acd0:	mov    rax,QWORD PTR [rip+0xe2f9]        # 438fd0 <stdout@GLIBC_2.2.5>
  42acd7:	mov    rsi,QWORD PTR [rax]
  42acda:	jmp    42ac89 <flatcc_json_printer_init@@Base+0x29>
  42acdc:	mov    eax,0xffffffff
  42ace1:	pop    rbx
  42ace2:	ret    
  42ace3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  42acee:	xchg   ax,ax

000000000042acf0 <flatcc_json_printer_init_buffer@@Base>:
  42acf0:	endbr64 
  42acf4:	cmp    rdx,0x3f
  42acf8:	jbe    42ad35 <flatcc_json_printer_init_buffer@@Base+0x45>
  42acfa:	mov    QWORD PTR [rdi+0x8],rdx
  42acfe:	sub    rdx,0x40
  42ad02:	vpxor  xmm0,xmm0,xmm0
  42ad06:	mov    QWORD PTR [rdi+0x10],rdx
  42ad0a:	lea    rax,[rip+0xffffffffffff559f]        # 4202b0 <flatcc_json_parser_struct_as_root@@Base+0xa70>
  42ad11:	add    rdx,rsi
  42ad14:	vmovups XMMWORD PTR [rdi+0x18],xmm0
  42ad19:	vmovups XMMWORD PTR [rdi+0x28],xmm0
  42ad1e:	mov    QWORD PTR [rdi+0x48],rax
  42ad22:	vmovups XMMWORD PTR [rdi+0x38],xmm0
  42ad27:	mov    QWORD PTR [rdi],rsi
  42ad2a:	mov    QWORD PTR [rdi+0x28],rsi
  42ad2e:	mov    QWORD PTR [rdi+0x20],rdx
  42ad32:	xor    eax,eax
  42ad34:	ret    
  42ad35:	push   rax
  42ad36:	lea    rcx,[rip+0x5e03]        # 430b40 <flatcc_builder_padding_base@@Base+0x1e20>
  42ad3d:	mov    edx,0x48d
  42ad42:	lea    rsi,[rip+0x5c27]        # 430970 <flatcc_builder_padding_base@@Base+0x1c50>
  42ad49:	lea    rdi,[rip+0x5d38]        # 430a88 <flatcc_builder_padding_base@@Base+0x1d68>
  42ad50:	call   4061b0 <__assert_fail@plt>
  42ad55:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000042ad60 <flatcc_json_printer_init_dynamic_buffer@@Base>:
  42ad60:	endbr64 
  42ad64:	push   r12
  42ad66:	push   rbp
  42ad67:	push   rbx
  42ad68:	mov    rbx,rdi
  42ad6b:	test   rsi,rsi
  42ad6e:	je     42add0 <flatcc_json_printer_init_dynamic_buffer@@Base+0x70>
  42ad70:	cmp    rsi,0x40
  42ad74:	mov    ebp,0x40
  42ad79:	cmovae rbp,rsi
  42ad7d:	lea    r12,[rbp-0x40]
  42ad81:	vpxor  xmm0,xmm0,xmm0
  42ad85:	vmovups XMMWORD PTR [rbx+0x18],xmm0
  42ad8a:	vmovups XMMWORD PTR [rbx+0x28],xmm0
  42ad8f:	vmovups XMMWORD PTR [rbx+0x38],xmm0
  42ad94:	mov    rdi,rbp
  42ad97:	call   406220 <malloc@plt>
  42ad9c:	mov    QWORD PTR [rbx+0x10],r12
  42ada0:	lea    rdx,[rip+0xffffffffffff5749]        # 4204f0 <flatcc_json_parser_struct_as_root@@Base+0xcb0>
  42ada7:	add    r12,rax
  42adaa:	mov    QWORD PTR [rbx],rax
  42adad:	mov    BYTE PTR [rbx+0x30],0x1
  42adb1:	mov    QWORD PTR [rbx+0x8],rbp
  42adb5:	mov    QWORD PTR [rbx+0x28],rax
  42adb9:	mov    QWORD PTR [rbx+0x20],r12
  42adbd:	mov    QWORD PTR [rbx+0x48],rdx
  42adc1:	test   rax,rax
  42adc4:	je     42addd <flatcc_json_printer_init_dynamic_buffer@@Base+0x7d>
  42adc6:	xor    eax,eax
  42adc8:	pop    rbx
  42adc9:	pop    rbp
  42adca:	pop    r12
  42adcc:	ret    
  42adcd:	nop    DWORD PTR [rax]
  42add0:	mov    r12d,0xfc0
  42add6:	mov    ebp,0x1000
  42addb:	jmp    42ad81 <flatcc_json_printer_init_dynamic_buffer@@Base+0x21>
  42addd:	mov    edx,DWORD PTR [rbx+0x3c]
  42ade0:	mov    eax,0xffffffff
  42ade5:	test   edx,edx
  42ade7:	jne    42adc8 <flatcc_json_printer_init_dynamic_buffer@@Base+0x68>
  42ade9:	mov    DWORD PTR [rbx+0x3c],0x3
  42adf0:	jmp    42adc8 <flatcc_json_printer_init_dynamic_buffer@@Base+0x68>
  42adf2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  42adfd:	nop    DWORD PTR [rax]

000000000042ae00 <flatcc_json_printer_get_buffer@@Base>:
  42ae00:	endbr64 
  42ae04:	push   rbp
  42ae05:	mov    rbp,rsi
  42ae08:	xor    esi,esi
  42ae0a:	push   rbx
  42ae0b:	mov    rbx,rdi
  42ae0e:	sub    rsp,0x8
  42ae12:	call   QWORD PTR [rdi+0x48]
  42ae15:	mov    rax,QWORD PTR [rbx]
  42ae18:	test   rbp,rbp
  42ae1b:	je     42ae28 <flatcc_json_printer_get_buffer@@Base+0x28>
  42ae1d:	mov    rdx,QWORD PTR [rbx+0x28]
  42ae21:	sub    rdx,rax
  42ae24:	mov    QWORD PTR [rbp+0x0],rdx
  42ae28:	add    rsp,0x8
  42ae2c:	pop    rbx
  42ae2d:	pop    rbp
  42ae2e:	ret    
  42ae2f:	nop

000000000042ae30 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
  42ae30:	endbr64 
  42ae34:	push   rbx
  42ae35:	mov    rbx,rdi
  42ae38:	call   42ae00 <flatcc_json_printer_get_buffer@@Base>
  42ae3d:	vpxor  xmm0,xmm0,xmm0
  42ae41:	vmovups XMMWORD PTR [rbx],xmm0
  42ae45:	vmovups XMMWORD PTR [rbx+0x10],xmm0
  42ae4a:	vmovups XMMWORD PTR [rbx+0x20],xmm0
  42ae4f:	vmovups XMMWORD PTR [rbx+0x30],xmm0
  42ae54:	vmovups XMMWORD PTR [rbx+0x40],xmm0
  42ae59:	pop    rbx
  42ae5a:	ret    
  42ae5b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000042ae60 <flatcc_json_printer_clear@@Base>:
  42ae60:	endbr64 
  42ae64:	push   rbx
  42ae65:	mov    rbx,rdi
  42ae68:	cmp    BYTE PTR [rdi+0x30],0x0
  42ae6c:	je     42ae7b <flatcc_json_printer_clear@@Base+0x1b>
  42ae6e:	mov    rdi,QWORD PTR [rdi]
  42ae71:	test   rdi,rdi
  42ae74:	je     42ae7b <flatcc_json_printer_clear@@Base+0x1b>
  42ae76:	call   406160 <free@plt>
  42ae7b:	vpxor  xmm0,xmm0,xmm0
  42ae7f:	vmovups XMMWORD PTR [rbx],xmm0
  42ae83:	vmovups XMMWORD PTR [rbx+0x10],xmm0
  42ae88:	vmovups XMMWORD PTR [rbx+0x20],xmm0
  42ae8d:	vmovups XMMWORD PTR [rbx+0x30],xmm0
  42ae92:	vmovups XMMWORD PTR [rbx+0x40],xmm0
  42ae97:	pop    rbx
  42ae98:	ret    
  42ae99:	nop    DWORD PTR [rax+0x0]

000000000042aea0 <__libc_csu_init@@Base>:
  42aea0:	endbr64 
  42aea4:	push   r15
  42aea6:	lea    r15,[rip+0xdee3]        # 438d90 <flatcc_builder_padding_base@@Base+0xa070>
  42aead:	push   r14
  42aeaf:	mov    r14,rdx
  42aeb2:	push   r13
  42aeb4:	mov    r13,rsi
  42aeb7:	push   r12
  42aeb9:	mov    r12d,edi
  42aebc:	push   rbp
  42aebd:	lea    rbp,[rip+0xded4]        # 438d98 <flatcc_builder_padding_base@@Base+0xa078>
  42aec4:	push   rbx
  42aec5:	sub    rbp,r15
  42aec8:	sub    rsp,0x8
  42aecc:	call   406000 <free@plt-0x160>
  42aed1:	sar    rbp,0x3
  42aed5:	je     42aef6 <__libc_csu_init@@Base+0x56>
  42aed7:	xor    ebx,ebx
  42aed9:	nop    DWORD PTR [rax+0x0]
  42aee0:	mov    rdx,r14
  42aee3:	mov    rsi,r13
  42aee6:	mov    edi,r12d
  42aee9:	call   QWORD PTR [r15+rbx*8]
  42aeed:	add    rbx,0x1
  42aef1:	cmp    rbp,rbx
  42aef4:	jne    42aee0 <__libc_csu_init@@Base+0x40>
  42aef6:	add    rsp,0x8
  42aefa:	pop    rbx
  42aefb:	pop    rbp
  42aefc:	pop    r12
  42aefe:	pop    r13
  42af00:	pop    r14
  42af02:	pop    r15
  42af04:	ret    
  42af05:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000042af10 <__libc_csu_fini@@Base>:
  42af10:	endbr64 
  42af14:	ret    

Disassembly of section .fini:

000000000042af18 <.fini>:
  42af18:	endbr64 
  42af1c:	sub    rsp,0x8
  42af20:	add    rsp,0x8
  42af24:	ret    
