
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_concat/monster_test_concat:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0xbfe9]        # 40eff8 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0xbfe2]        # 40f008 <flatcc_builder_padding_base@@Base+0x43c8>
  403026:	jmp    QWORD PTR [rip+0xbfe4]        # 40f010 <flatcc_builder_padding_base@@Base+0x43d0>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0xbfe2]        # 40f018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <strncpy@plt>:
  403040:	jmp    QWORD PTR [rip+0xbfda]        # 40f020 <strncpy@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <strlen@plt>:
  403050:	jmp    QWORD PTR [rip+0xbfd2]        # 40f028 <strlen@GLIBC_2.2.5>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <__stack_chk_fail@plt>:
  403060:	jmp    QWORD PTR [rip+0xbfca]        # 40f030 <__stack_chk_fail@GLIBC_2.4>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <__assert_fail@plt>:
  403070:	jmp    QWORD PTR [rip+0xbfc2]        # 40f038 <__assert_fail@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <memset@plt>:
  403080:	jmp    QWORD PTR [rip+0xbfba]        # 40f040 <memset@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <memchr@plt>:
  403090:	jmp    QWORD PTR [rip+0xbfb2]        # 40f048 <memchr@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <memcmp@plt>:
  4030a0:	jmp    QWORD PTR [rip+0xbfaa]        # 40f050 <memcmp@GLIBC_2.2.5>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <memcpy@plt>:
  4030b0:	jmp    QWORD PTR [rip+0xbfa2]        # 40f058 <memcpy@GLIBC_2.14>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <malloc@plt>:
  4030c0:	jmp    QWORD PTR [rip+0xbf9a]        # 40f060 <malloc@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <realloc@plt>:
  4030d0:	jmp    QWORD PTR [rip+0xbf92]        # 40f068 <realloc@GLIBC_2.2.5>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

00000000004030e0 <posix_memalign@plt>:
  4030e0:	jmp    QWORD PTR [rip+0xbf8a]        # 40f070 <posix_memalign@GLIBC_2.2.5>
  4030e6:	push   0xb
  4030eb:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

00000000004030f0 <main@@Base-0x90>:
  4030f0:	lea    rcx,[rip+0x7b19]        # 40ac10 <_IO_stdin_used@@Base+0xc10>
  4030f7:	lea    rsi,[rip+0x7062]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4030fe:	lea    rdi,[rip+0x73f2]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  403105:	sub    rsp,0x8
  403109:	mov    edx,0x134
  40310e:	call   403070 <__assert_fail@plt>
  403113:	lea    rcx,[rip+0x7a86]        # 40aba0 <_IO_stdin_used@@Base+0xba0>
  40311a:	lea    rsi,[rip+0x703f]        # 40a160 <_IO_stdin_used@@Base+0x160>
  403121:	lea    rdi,[rip+0x73cf]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  403128:	sub    rsp,0x8
  40312c:	mov    edx,0x2a1
  403131:	call   403070 <__assert_fail@plt>
  403136:	lea    rcx,[rip+0x7a53]        # 40ab90 <_IO_stdin_used@@Base+0xb90>
  40313d:	lea    rsi,[rip+0x701c]        # 40a160 <_IO_stdin_used@@Base+0x160>
  403144:	lea    rdi,[rip+0x73ac]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  40314b:	sub    rsp,0x8
  40314f:	mov    edx,0x28b
  403154:	call   403070 <__assert_fail@plt>
  403159:	lea    rcx,[rip+0x7990]        # 40aaf0 <_IO_stdin_used@@Base+0xaf0>
  403160:	lea    rsi,[rip+0x6ff9]        # 40a160 <_IO_stdin_used@@Base+0x160>
  403167:	lea    rdi,[rip+0x7362]        # 40a4d0 <_IO_stdin_used@@Base+0x4d0>
  40316e:	sub    rsp,0x8
  403172:	mov    edx,0x37c
  403177:	call   403070 <__assert_fail@plt>
  40317c:	nop    DWORD PTR [rax+0x0]

0000000000403180 <main@@Base>:
  403180:	push   rbp
  403181:	push   rbx
  403182:	sub    rsp,0x1a8
  403189:	lea    rbx,[rsp+0x10]
  40318e:	mov    rax,QWORD PTR fs:0x28
  403197:	mov    QWORD PTR [rsp+0x198],rax
  40319f:	xor    eax,eax
  4031a1:	mov    rdi,rbx
  4031a4:	call   4043e0 <flatcc_builder_init@@Base>
  4031a9:	lea    rsi,[rip+0x6e54]        # 40a004 <_IO_stdin_used@@Base+0x4>
  4031b0:	xor    ecx,ecx
  4031b2:	xor    edx,edx
  4031b4:	mov    rdi,rbx
  4031b7:	call   404de0 <flatcc_builder_start_buffer@@Base>
  4031bc:	test   eax,eax
  4031be:	jne    4031cd <main@@Base+0x4d>
  4031c0:	mov    esi,0x24
  4031c5:	mov    rdi,rbx
  4031c8:	call   405a50 <flatcc_builder_start_table@@Base>
  4031cd:	lea    rsi,[rip+0x6e35]        # 40a009 <_IO_stdin_used@@Base+0x9>
  4031d4:	mov    rdi,rbx
  4031d7:	call   407160 <flatcc_builder_create_string_str@@Base>
  4031dc:	test   eax,eax
  4031de:	mov    ebp,eax
  4031e0:	je     4031f6 <main@@Base+0x76>
  4031e2:	mov    esi,0x3
  4031e7:	mov    rdi,rbx
  4031ea:	call   4074c0 <flatcc_builder_table_add_offset@@Base>
  4031ef:	test   rax,rax
  4031f2:	je     4031f6 <main@@Base+0x76>
  4031f4:	mov    DWORD PTR [rax],ebp
  4031f6:	lea    rsi,[rip+0x6f5f]        # 40a15c <_IO_stdin_used@@Base+0x15c>
  4031fd:	mov    edx,0x1
  403202:	mov    rdi,rbx
  403205:	call   406390 <flatcc_builder_check_required@@Base>
  40320a:	test   eax,eax
  40320c:	je     403271 <main@@Base+0xf1>
  40320e:	mov    rdi,rbx
  403211:	call   406410 <flatcc_builder_end_table@@Base>
  403216:	mov    rdi,rbx
  403219:	mov    esi,eax
  40321b:	call   404ec0 <flatcc_builder_end_buffer@@Base>
  403220:	lea    rsi,[rsp+0x8]
  403225:	mov    rdi,rbx
  403228:	call   407980 <flatcc_builder_get_direct_buffer@@Base>
  40322d:	mov    rsi,QWORD PTR [rsp+0x8]
  403232:	lea    rcx,[rip+0x3f7]        # 403630 <_start@@Base+0x390>
  403239:	lea    rdx,[rip+0x6dc4]        # 40a004 <_IO_stdin_used@@Base+0x4>
  403240:	mov    rdi,rax
  403243:	call   4091d0 <flatcc_verify_table_as_root@@Base>
  403248:	mov    rdi,rbx
  40324b:	mov    ebp,eax
  40324d:	call   4045b0 <flatcc_builder_clear@@Base>
  403252:	mov    rcx,QWORD PTR [rsp+0x198]
  40325a:	xor    rcx,QWORD PTR fs:0x28
  403263:	mov    eax,ebp
  403265:	jne    403290 <main@@Base+0x110>
  403267:	add    rsp,0x1a8
  40326e:	pop    rbx
  40326f:	pop    rbp
  403270:	ret    
  403271:	lea    rcx,[rip+0x6ec8]        # 40a140 <_IO_stdin_used@@Base+0x140>
  403278:	lea    rsi,[rip+0x6d99]        # 40a018 <_IO_stdin_used@@Base+0x18>
  40327f:	lea    rdi,[rip+0x6e12]        # 40a098 <_IO_stdin_used@@Base+0x98>
  403286:	mov    edx,0x95e
  40328b:	call   403070 <__assert_fail@plt>
  403290:	call   403060 <__stack_chk_fail@plt>
  403295:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40329f:	nop

00000000004032a0 <_start@@Base>:
  4032a0:	endbr64 
  4032a4:	xor    ebp,ebp
  4032a6:	mov    r9,rdx
  4032a9:	pop    rsi
  4032aa:	mov    rdx,rsp
  4032ad:	and    rsp,0xfffffffffffffff0
  4032b1:	push   rax
  4032b2:	push   rsp
  4032b3:	mov    r8,0x409be0
  4032ba:	mov    rcx,0x409b70
  4032c1:	mov    rdi,0x403180
  4032c8:	call   QWORD PTR [rip+0xbd22]        # 40eff0 <__libc_start_main@GLIBC_2.2.5>
  4032ce:	hlt    
  4032cf:	nop
  4032d0:	endbr64 
  4032d4:	ret    
  4032d5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4032df:	nop
  4032e0:	mov    eax,0x40f08f
  4032e5:	push   rbp
  4032e6:	sub    rax,0x40f088
  4032ec:	cmp    rax,0xe
  4032f0:	mov    rbp,rsp
  4032f3:	jbe    403310 <_start@@Base+0x70>
  4032f5:	mov    eax,0x0
  4032fa:	test   rax,rax
  4032fd:	je     403310 <_start@@Base+0x70>
  4032ff:	pop    rbp
  403300:	mov    edi,0x40f088
  403305:	jmp    rax
  403307:	nop    WORD PTR [rax+rax*1+0x0]
  403310:	pop    rbp
  403311:	ret    
  403312:	nop    DWORD PTR [rax+0x0]
  403316:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403320:	mov    esi,0x40f088
  403325:	push   rbp
  403326:	sub    rsi,0x40f088
  40332d:	sar    rsi,0x3
  403331:	mov    rbp,rsp
  403334:	mov    rax,rsi
  403337:	shr    rax,0x3f
  40333b:	add    rsi,rax
  40333e:	sar    rsi,1
  403341:	je     403358 <_start@@Base+0xb8>
  403343:	mov    eax,0x0
  403348:	test   rax,rax
  40334b:	je     403358 <_start@@Base+0xb8>
  40334d:	pop    rbp
  40334e:	mov    edi,0x40f088
  403353:	jmp    rax
  403355:	nop    DWORD PTR [rax]
  403358:	pop    rbp
  403359:	ret    
  40335a:	nop    WORD PTR [rax+rax*1+0x0]
  403360:	cmp    BYTE PTR [rip+0xbd21],0x0        # 40f088 <__bss_start@@Base>
  403367:	jne    40337a <_start@@Base+0xda>
  403369:	push   rbp
  40336a:	mov    rbp,rsp
  40336d:	call   4032e0 <_start@@Base+0x40>
  403372:	pop    rbp
  403373:	mov    BYTE PTR [rip+0xbd0e],0x1        # 40f088 <__bss_start@@Base>
  40337a:	repz ret 
  40337c:	nop    DWORD PTR [rax+0x0]
  403380:	mov    edi,0x40ee18
  403385:	cmp    QWORD PTR [rdi],0x0
  403389:	jne    403390 <_start@@Base+0xf0>
  40338b:	jmp    403320 <_start@@Base+0x80>
  40338d:	nop    DWORD PTR [rax]
  403390:	mov    eax,0x0
  403395:	test   rax,rax
  403398:	je     40338b <_start@@Base+0xeb>
  40339a:	push   rbp
  40339b:	mov    rbp,rsp
  40339e:	call   rax
  4033a0:	pop    rbp
  4033a1:	jmp    403320 <_start@@Base+0x80>
  4033a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4033b0:	xor    eax,eax
  4033b2:	ret    
  4033b3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4033be:	xchg   ax,ax
  4033c0:	mov    ecx,0x4
  4033c5:	mov    edx,0x4
  4033ca:	xor    esi,esi
  4033cc:	jmp    4085c0 <flatcc_verify_field@@Base>
  4033d1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4033dc:	nop    DWORD PTR [rax+0x0]
  4033e0:	push   rbx
  4033e1:	xor    esi,esi
  4033e3:	mov    ecx,0x8
  4033e8:	mov    edx,0x8
  4033ed:	mov    rbx,rdi
  4033f0:	call   4085c0 <flatcc_verify_field@@Base>
  4033f5:	test   eax,eax
  4033f7:	je     403400 <_start@@Base+0x160>
  4033f9:	pop    rbx
  4033fa:	ret    
  4033fb:	nop    DWORD PTR [rax+rax*1+0x0]
  403400:	mov    rdi,rbx
  403403:	mov    ecx,0x4
  403408:	mov    edx,0x4
  40340d:	pop    rbx
  40340e:	mov    esi,0x1
  403413:	jmp    4085c0 <flatcc_verify_field@@Base>
  403418:	nop    DWORD PTR [rax+rax*1+0x0]
  403420:	push   rbx
  403421:	xor    esi,esi
  403423:	mov    ecx,0x1
  403428:	mov    edx,0x1
  40342d:	mov    rbx,rdi
  403430:	call   4085c0 <flatcc_verify_field@@Base>
  403435:	test   eax,eax
  403437:	je     403440 <_start@@Base+0x1a0>
  403439:	pop    rbx
  40343a:	ret    
  40343b:	nop    DWORD PTR [rax+rax*1+0x0]
  403440:	mov    ecx,0x1
  403445:	mov    edx,0x1
  40344a:	mov    esi,0x1
  40344f:	mov    rdi,rbx
  403452:	call   4085c0 <flatcc_verify_field@@Base>
  403457:	test   eax,eax
  403459:	jne    403439 <_start@@Base+0x199>
  40345b:	mov    ecx,0x1
  403460:	mov    edx,0x1
  403465:	mov    esi,0x2
  40346a:	mov    rdi,rbx
  40346d:	call   4085c0 <flatcc_verify_field@@Base>
  403472:	test   eax,eax
  403474:	jne    403439 <_start@@Base+0x199>
  403476:	mov    rdi,rbx
  403479:	mov    ecx,0x1
  40347e:	mov    edx,0x1
  403483:	pop    rbx
  403484:	mov    esi,0x3
  403489:	jmp    4085c0 <flatcc_verify_field@@Base>
  40348e:	xchg   ax,ax
  403490:	push   rbx
  403491:	xor    edx,edx
  403493:	xor    esi,esi
  403495:	mov    rbx,rdi
  403498:	call   408620 <flatcc_verify_string_field@@Base>
  40349d:	test   eax,eax
  40349f:	je     4034a8 <_start@@Base+0x208>
  4034a1:	pop    rbx
  4034a2:	ret    
  4034a3:	nop    DWORD PTR [rax+rax*1+0x0]
  4034a8:	mov    ecx,0x8
  4034ad:	mov    edx,0x8
  4034b2:	mov    esi,0x1
  4034b7:	mov    rdi,rbx
  4034ba:	call   4085c0 <flatcc_verify_field@@Base>
  4034bf:	test   eax,eax
  4034c1:	jne    4034a1 <_start@@Base+0x201>
  4034c3:	mov    rdi,rbx
  4034c6:	mov    ecx,0x2
  4034cb:	mov    edx,0x2
  4034d0:	pop    rbx
  4034d1:	mov    esi,0x2
  4034d6:	jmp    4085c0 <flatcc_verify_field@@Base>
  4034db:	nop    DWORD PTR [rax+rax*1+0x0]
  4034e0:	push   rbx
  4034e1:	xor    edx,edx
  4034e3:	xor    esi,esi
  4034e5:	mov    rbx,rdi
  4034e8:	call   408620 <flatcc_verify_string_field@@Base>
  4034ed:	test   eax,eax
  4034ef:	je     4034f8 <_start@@Base+0x258>
  4034f1:	pop    rbx
  4034f2:	ret    
  4034f3:	nop    DWORD PTR [rax+rax*1+0x0]
  4034f8:	mov    ecx,0x4
  4034fd:	mov    edx,0x4
  403502:	mov    esi,0x1
  403507:	mov    rdi,rbx
  40350a:	call   4085c0 <flatcc_verify_field@@Base>
  40350f:	test   eax,eax
  403511:	jne    4034f1 <_start@@Base+0x251>
  403513:	xor    edx,edx
  403515:	mov    esi,0x2
  40351a:	mov    rdi,rbx
  40351d:	call   408620 <flatcc_verify_string_field@@Base>
  403522:	test   eax,eax
  403524:	jne    4034f1 <_start@@Base+0x251>
  403526:	mov    ecx,0x8
  40352b:	mov    edx,0x8
  403530:	mov    esi,0x3
  403535:	mov    rdi,rbx
  403538:	call   4085c0 <flatcc_verify_field@@Base>
  40353d:	test   eax,eax
  40353f:	jne    4034f1 <_start@@Base+0x251>
  403541:	xor    edx,edx
  403543:	mov    esi,0x4
  403548:	mov    rdi,rbx
  40354b:	call   408620 <flatcc_verify_string_field@@Base>
  403550:	test   eax,eax
  403552:	jne    4034f1 <_start@@Base+0x251>
  403554:	mov    ecx,0x8
  403559:	mov    edx,0x8
  40355e:	mov    esi,0x5
  403563:	mov    rdi,rbx
  403566:	call   4085c0 <flatcc_verify_field@@Base>
  40356b:	test   eax,eax
  40356d:	jne    4034f1 <_start@@Base+0x251>
  40356f:	mov    ecx,0x4
  403574:	mov    edx,0x4
  403579:	mov    esi,0x6
  40357e:	mov    rdi,rbx
  403581:	call   4085c0 <flatcc_verify_field@@Base>
  403586:	test   eax,eax
  403588:	jne    4034f1 <_start@@Base+0x251>
  40358e:	mov    ecx,0x8
  403593:	mov    edx,0x8
  403598:	mov    esi,0x7
  40359d:	mov    rdi,rbx
  4035a0:	call   4085c0 <flatcc_verify_field@@Base>
  4035a5:	test   eax,eax
  4035a7:	jne    4034f1 <_start@@Base+0x251>
  4035ad:	mov    rdi,rbx
  4035b0:	mov    ecx,0x4
  4035b5:	mov    edx,0x4
  4035ba:	pop    rbx
  4035bb:	mov    esi,0x8
  4035c0:	jmp    4085c0 <flatcc_verify_field@@Base>
  4035c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4035d0:	push   rbx
  4035d1:	lea    rcx,[rip+0xffffffffffffff08]        # 4034e0 <_start@@Base+0x240>
  4035d8:	xor    edx,edx
  4035da:	xor    esi,esi
  4035dc:	mov    rbx,rdi
  4035df:	call   408950 <flatcc_verify_table_field@@Base>
  4035e4:	test   eax,eax
  4035e6:	je     4035f0 <_start@@Base+0x350>
  4035e8:	pop    rbx
  4035e9:	ret    
  4035ea:	nop    WORD PTR [rax+rax*1+0x0]
  4035f0:	lea    rcx,[rip+0x6b9]        # 403cb0 <_start@@Base+0xa10>
  4035f7:	xor    edx,edx
  4035f9:	mov    esi,0x1
  4035fe:	mov    rdi,rbx
  403601:	call   408950 <flatcc_verify_table_field@@Base>
  403606:	test   eax,eax
  403608:	jne    4035e8 <_start@@Base+0x348>
  40360a:	mov    rdi,rbx
  40360d:	lea    rcx,[rip+0xfffffffffffffdcc]        # 4033e0 <_start@@Base+0x140>
  403614:	xor    edx,edx
  403616:	pop    rbx
  403617:	mov    esi,0x2
  40361c:	jmp    408950 <flatcc_verify_table_field@@Base>
  403621:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40362c:	nop    DWORD PTR [rax+0x0]
  403630:	push   rbx
  403631:	xor    esi,esi
  403633:	mov    ecx,0x10
  403638:	mov    edx,0x20
  40363d:	mov    rbx,rdi
  403640:	call   4085c0 <flatcc_verify_field@@Base>
  403645:	test   eax,eax
  403647:	je     403650 <_start@@Base+0x3b0>
  403649:	pop    rbx
  40364a:	ret    
  40364b:	nop    DWORD PTR [rax+rax*1+0x0]
  403650:	mov    ecx,0x2
  403655:	mov    edx,0x2
  40365a:	mov    esi,0x2
  40365f:	mov    rdi,rbx
  403662:	call   4085c0 <flatcc_verify_field@@Base>
  403667:	test   eax,eax
  403669:	jne    403649 <_start@@Base+0x3a9>
  40366b:	mov    ecx,0x2
  403670:	mov    edx,0x2
  403675:	mov    esi,0x1
  40367a:	mov    rdi,rbx
  40367d:	call   4085c0 <flatcc_verify_field@@Base>
  403682:	test   eax,eax
  403684:	jne    403649 <_start@@Base+0x3a9>
  403686:	mov    edx,0x1
  40368b:	mov    esi,0x3
  403690:	mov    rdi,rbx
  403693:	call   408620 <flatcc_verify_string_field@@Base>
  403698:	test   eax,eax
  40369a:	jne    403649 <_start@@Base+0x3a9>
  40369c:	mov    ecx,0x1
  4036a1:	mov    edx,0x1
  4036a6:	mov    esi,0x6
  4036ab:	mov    rdi,rbx
  4036ae:	call   4085c0 <flatcc_verify_field@@Base>
  4036b3:	test   eax,eax
  4036b5:	jne    403649 <_start@@Base+0x3a9>
  4036b7:	xor    edx,edx
  4036b9:	mov    r9d,0xffffffff
  4036bf:	mov    r8d,0x1
  4036c5:	mov    ecx,0x1
  4036ca:	mov    esi,0x5
  4036cf:	mov    rdi,rbx
  4036d2:	call   4086d0 <flatcc_verify_vector_field@@Base>
  4036d7:	test   eax,eax
  4036d9:	jne    403649 <_start@@Base+0x3a9>
  4036df:	lea    rcx,[rip+0xffffffffffffff4a]        # 403630 <_start@@Base+0x390>
  4036e6:	xor    edx,edx
  4036e8:	mov    esi,0xb
  4036ed:	mov    rdi,rbx
  4036f0:	call   408aa0 <flatcc_verify_table_vector_field@@Base>
  4036f5:	test   eax,eax
  4036f7:	jne    403649 <_start@@Base+0x3a9>
  4036fd:	xor    edx,edx
  4036ff:	mov    esi,0xa
  403704:	mov    rdi,rbx
  403707:	call   4087b0 <flatcc_verify_string_vector_field@@Base>
  40370c:	test   eax,eax
  40370e:	jne    403649 <_start@@Base+0x3a9>
  403714:	xor    edx,edx
  403716:	mov    esi,0x1c
  40371b:	mov    rdi,rbx
  40371e:	call   4087b0 <flatcc_verify_string_vector_field@@Base>
  403723:	test   eax,eax
  403725:	jne    403649 <_start@@Base+0x3a9>
  40372b:	xor    edx,edx
  40372d:	mov    r9d,0xffffffff
  403733:	mov    r8d,0x1
  403739:	mov    ecx,0x1
  40373e:	mov    esi,0x18
  403743:	mov    rdi,rbx
  403746:	call   4086d0 <flatcc_verify_vector_field@@Base>
  40374b:	test   eax,eax
  40374d:	jne    403649 <_start@@Base+0x3a9>
  403753:	xor    edx,edx
  403755:	mov    r9d,0x1fffffff
  40375b:	mov    r8d,0x4
  403761:	mov    ecx,0x8
  403766:	mov    esi,0x1d
  40376b:	mov    rdi,rbx
  40376e:	call   4086d0 <flatcc_verify_vector_field@@Base>
  403773:	test   eax,eax
  403775:	jne    403649 <_start@@Base+0x3a9>
  40377b:	lea    rcx,[rip+0xfffffffffffffeae]        # 403630 <_start@@Base+0x390>
  403782:	xor    edx,edx
  403784:	mov    esi,0xc
  403789:	mov    rdi,rbx
  40378c:	call   408950 <flatcc_verify_table_field@@Base>
  403791:	test   eax,eax
  403793:	jne    403649 <_start@@Base+0x3a9>
  403799:	lea    rcx,[rip+0x340]        # 403ae0 <_start@@Base+0x840>
  4037a0:	xor    edx,edx
  4037a2:	mov    esi,0x8
  4037a7:	mov    rdi,rbx
  4037aa:	call   409740 <flatcc_verify_union_field@@Base>
  4037af:	test   eax,eax
  4037b1:	jne    403649 <_start@@Base+0x3a9>
  4037b7:	xor    edx,edx
  4037b9:	mov    r9d,0x3fffffff
  4037bf:	mov    r8d,0x2
  4037c5:	mov    ecx,0x4
  4037ca:	mov    esi,0x9
  4037cf:	mov    rdi,rbx
  4037d2:	call   4086d0 <flatcc_verify_vector_field@@Base>
  4037d7:	test   eax,eax
  4037d9:	jne    403649 <_start@@Base+0x3a9>
  4037df:	xor    edx,edx
  4037e1:	mov    r9d,0x3fffffff
  4037e7:	mov    r8d,0x2
  4037ed:	mov    ecx,0x4
  4037f2:	mov    esi,0x1f
  4037f7:	mov    rdi,rbx
  4037fa:	call   4086d0 <flatcc_verify_vector_field@@Base>
  4037ff:	test   eax,eax
  403801:	jne    403649 <_start@@Base+0x3a9>
  403807:	lea    r9,[rip+0xfffffffffffffe22]        # 403630 <_start@@Base+0x390>
  40380e:	xor    ecx,ecx
  403810:	xor    edx,edx
  403812:	mov    r8d,0x1
  403818:	mov    esi,0xd
  40381d:	mov    rdi,rbx
  403820:	call   409550 <flatcc_verify_table_as_nested_root@@Base>
  403825:	test   eax,eax
  403827:	jne    403649 <_start@@Base+0x3a9>
  40382d:	lea    rcx,[rip+0xfffffffffffffc5c]        # 403490 <_start@@Base+0x1f0>
  403834:	xor    edx,edx
  403836:	mov    esi,0xe
  40383b:	mov    rdi,rbx
  40383e:	call   408950 <flatcc_verify_table_field@@Base>
  403843:	test   eax,eax
  403845:	jne    403649 <_start@@Base+0x3a9>
  40384b:	mov    ecx,0x1
  403850:	mov    edx,0x1
  403855:	mov    esi,0xf
  40385a:	mov    rdi,rbx
  40385d:	call   4085c0 <flatcc_verify_field@@Base>
  403862:	test   eax,eax
  403864:	jne    403649 <_start@@Base+0x3a9>
  40386a:	mov    ecx,0x4
  40386f:	mov    edx,0x4
  403874:	mov    esi,0x10
  403879:	mov    rdi,rbx
  40387c:	call   4085c0 <flatcc_verify_field@@Base>
  403881:	test   eax,eax
  403883:	jne    403649 <_start@@Base+0x3a9>
  403889:	mov    ecx,0x4
  40388e:	mov    edx,0x4
  403893:	mov    esi,0x11
  403898:	mov    rdi,rbx
  40389b:	call   4085c0 <flatcc_verify_field@@Base>
  4038a0:	test   eax,eax
  4038a2:	jne    403649 <_start@@Base+0x3a9>
  4038a8:	mov    ecx,0x8
  4038ad:	mov    edx,0x8
  4038b2:	mov    esi,0x12
  4038b7:	mov    rdi,rbx
  4038ba:	call   4085c0 <flatcc_verify_field@@Base>
  4038bf:	test   eax,eax
  4038c1:	jne    403649 <_start@@Base+0x3a9>
  4038c7:	mov    ecx,0x8
  4038cc:	mov    edx,0x8
  4038d1:	mov    esi,0x13
  4038d6:	mov    rdi,rbx
  4038d9:	call   4085c0 <flatcc_verify_field@@Base>
  4038de:	test   eax,eax
  4038e0:	jne    403649 <_start@@Base+0x3a9>
  4038e6:	mov    ecx,0x4
  4038eb:	mov    edx,0x4
  4038f0:	mov    esi,0x14
  4038f5:	mov    rdi,rbx
  4038f8:	call   4085c0 <flatcc_verify_field@@Base>
  4038fd:	test   eax,eax
  4038ff:	jne    403649 <_start@@Base+0x3a9>
  403905:	mov    ecx,0x4
  40390a:	mov    edx,0x4
  40390f:	mov    esi,0x15
  403914:	mov    rdi,rbx
  403917:	call   4085c0 <flatcc_verify_field@@Base>
  40391c:	test   eax,eax
  40391e:	jne    403649 <_start@@Base+0x3a9>
  403924:	mov    ecx,0x8
  403929:	mov    edx,0x8
  40392e:	mov    esi,0x16
  403933:	mov    rdi,rbx
  403936:	call   4085c0 <flatcc_verify_field@@Base>
  40393b:	test   eax,eax
  40393d:	jne    403649 <_start@@Base+0x3a9>
  403943:	mov    ecx,0x8
  403948:	mov    edx,0x8
  40394d:	mov    esi,0x17
  403952:	mov    rdi,rbx
  403955:	call   4085c0 <flatcc_verify_field@@Base>
  40395a:	test   eax,eax
  40395c:	jne    403649 <_start@@Base+0x3a9>
  403962:	mov    ecx,0x4
  403967:	mov    edx,0x4
  40396c:	mov    esi,0x19
  403971:	mov    rdi,rbx
  403974:	call   4085c0 <flatcc_verify_field@@Base>
  403979:	test   eax,eax
  40397b:	jne    403649 <_start@@Base+0x3a9>
  403981:	mov    ecx,0x4
  403986:	mov    edx,0x4
  40398b:	mov    esi,0x1a
  403990:	mov    rdi,rbx
  403993:	call   4085c0 <flatcc_verify_field@@Base>
  403998:	test   eax,eax
  40399a:	jne    403649 <_start@@Base+0x3a9>
  4039a0:	mov    ecx,0x4
  4039a5:	mov    edx,0x4
  4039aa:	mov    esi,0x1b
  4039af:	mov    rdi,rbx
  4039b2:	call   4085c0 <flatcc_verify_field@@Base>
  4039b7:	test   eax,eax
  4039b9:	jne    403649 <_start@@Base+0x3a9>
  4039bf:	xor    edx,edx
  4039c1:	mov    r9d,0xffffffff
  4039c7:	mov    r8d,0x1
  4039cd:	mov    ecx,0x1
  4039d2:	mov    esi,0x1e
  4039d7:	mov    rdi,rbx
  4039da:	call   4086d0 <flatcc_verify_vector_field@@Base>
  4039df:	test   eax,eax
  4039e1:	jne    403649 <_start@@Base+0x3a9>
  4039e7:	xor    edx,edx
  4039e9:	mov    r9d,0x1fffffff
  4039ef:	mov    r8d,0x8
  4039f5:	mov    ecx,0x8
  4039fa:	mov    esi,0x20
  4039ff:	mov    rdi,rbx
  403a02:	call   4086d0 <flatcc_verify_vector_field@@Base>
  403a07:	test   eax,eax
  403a09:	jne    403649 <_start@@Base+0x3a9>
  403a0f:	xor    edx,edx
  403a11:	mov    r9d,0x1fffffff
  403a17:	mov    r8d,0x8
  403a1d:	mov    ecx,0x8
  403a22:	mov    esi,0x21
  403a27:	mov    rdi,rbx
  403a2a:	call   4086d0 <flatcc_verify_vector_field@@Base>
  403a2f:	test   eax,eax
  403a31:	jne    403649 <_start@@Base+0x3a9>
  403a37:	lea    rcx,[rip+0x262]        # 403ca0 <_start@@Base+0xa00>
  403a3e:	xor    edx,edx
  403a40:	mov    esi,0x22
  403a45:	mov    rdi,rbx
  403a48:	call   408950 <flatcc_verify_table_field@@Base>
  403a4d:	test   eax,eax
  403a4f:	jne    403649 <_start@@Base+0x3a9>
  403a55:	mov    rdi,rbx
  403a58:	lea    rcx,[rip+0x11]        # 403a70 <_start@@Base+0x7d0>
  403a5f:	xor    edx,edx
  403a61:	pop    rbx
  403a62:	mov    esi,0x23
  403a67:	jmp    408950 <flatcc_verify_table_field@@Base>
  403a6c:	nop    DWORD PTR [rax+0x0]
  403a70:	push   rbx
  403a71:	xor    edx,edx
  403a73:	xor    esi,esi
  403a75:	mov    r9d,0xffffffff
  403a7b:	mov    r8d,0x1
  403a81:	mov    ecx,0x1
  403a86:	mov    rbx,rdi
  403a89:	call   4086d0 <flatcc_verify_vector_field@@Base>
  403a8e:	test   eax,eax
  403a90:	je     403a98 <_start@@Base+0x7f8>
  403a92:	pop    rbx
  403a93:	ret    
  403a94:	nop    DWORD PTR [rax+0x0]
  403a98:	xor    edx,edx
  403a9a:	mov    r9d,0xffffffff
  403aa0:	mov    r8d,0x1
  403aa6:	mov    ecx,0x1
  403aab:	mov    esi,0x1
  403ab0:	mov    rdi,rbx
  403ab3:	call   4086d0 <flatcc_verify_vector_field@@Base>
  403ab8:	test   eax,eax
  403aba:	jne    403a92 <_start@@Base+0x7f2>
  403abc:	mov    rdi,rbx
  403abf:	lea    r9,[rip+0xfffffffffffffb6a]        # 403630 <_start@@Base+0x390>
  403ac6:	mov    r8d,0x1
  403acc:	pop    rbx
  403acd:	xor    ecx,ecx
  403acf:	xor    edx,edx
  403ad1:	mov    esi,0x2
  403ad6:	jmp    409550 <flatcc_verify_table_as_nested_root@@Base>
  403adb:	nop    DWORD PTR [rax+rax*1+0x0]
  403ae0:	movzx  eax,BYTE PTR [rdi+0x10]
  403ae4:	cmp    al,0x2
  403ae6:	je     403b28 <_start@@Base+0x888>
  403ae8:	jbe    403b10 <_start@@Base+0x870>
  403aea:	cmp    al,0x3
  403aec:	je     403b00 <_start@@Base+0x860>
  403aee:	cmp    al,0x4
  403af0:	jne    403b20 <_start@@Base+0x880>
  403af2:	lea    rsi,[rip+0x47]        # 403b40 <_start@@Base+0x8a0>
  403af9:	jmp    408dd0 <flatcc_verify_union_table@@Base>
  403afe:	xchg   ax,ax
  403b00:	lea    rsi,[rip+0xfffffffffffff8a9]        # 4033b0 <_start@@Base+0x110>
  403b07:	jmp    408dd0 <flatcc_verify_union_table@@Base>
  403b0c:	nop    DWORD PTR [rax+0x0]
  403b10:	cmp    al,0x1
  403b12:	jne    403b20 <_start@@Base+0x880>
  403b14:	lea    rsi,[rip+0xfffffffffffffb15]        # 403630 <_start@@Base+0x390>
  403b1b:	jmp    408dd0 <flatcc_verify_union_table@@Base>
  403b20:	xor    eax,eax
  403b22:	ret    
  403b23:	nop    DWORD PTR [rax+rax*1+0x0]
  403b28:	lea    rsi,[rip+0xfffffffffffff8f1]        # 403420 <_start@@Base+0x180>
  403b2f:	jmp    408dd0 <flatcc_verify_union_table@@Base>
  403b34:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403b3f:	nop
  403b40:	push   rbx
  403b41:	lea    rcx,[rip+0xfffffffffffffa88]        # 4035d0 <_start@@Base+0x330>
  403b48:	xor    edx,edx
  403b4a:	xor    esi,esi
  403b4c:	mov    rbx,rdi
  403b4f:	call   408950 <flatcc_verify_table_field@@Base>
  403b54:	test   eax,eax
  403b56:	je     403b60 <_start@@Base+0x8c0>
  403b58:	pop    rbx
  403b59:	ret    
  403b5a:	nop    WORD PTR [rax+rax*1+0x0]
  403b60:	lea    rcx,[rip+0x39]        # 403ba0 <_start@@Base+0x900>
  403b67:	xor    edx,edx
  403b69:	mov    esi,0x1
  403b6e:	mov    rdi,rbx
  403b71:	call   408950 <flatcc_verify_table_field@@Base>
  403b76:	test   eax,eax
  403b78:	jne    403b58 <_start@@Base+0x8b8>
  403b7a:	mov    rdi,rbx
  403b7d:	lea    rcx,[rip+0xffffffffffffff5c]        # 403ae0 <_start@@Base+0x840>
  403b84:	xor    edx,edx
  403b86:	pop    rbx
  403b87:	mov    esi,0x3
  403b8c:	jmp    4098a0 <flatcc_verify_union_vector_field@@Base>
  403b91:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403b9c:	nop    DWORD PTR [rax+0x0]
  403ba0:	push   rbx
  403ba1:	lea    rcx,[rip+0x88]        # 403c30 <_start@@Base+0x990>
  403ba8:	xor    edx,edx
  403baa:	mov    esi,0x1
  403baf:	mov    rbx,rdi
  403bb2:	call   409740 <flatcc_verify_union_field@@Base>
  403bb7:	test   eax,eax
  403bb9:	je     403bc0 <_start@@Base+0x920>
  403bbb:	pop    rbx
  403bbc:	ret    
  403bbd:	nop    DWORD PTR [rax]
  403bc0:	lea    rcx,[rip+0x69]        # 403c30 <_start@@Base+0x990>
  403bc7:	xor    edx,edx
  403bc9:	mov    esi,0x3
  403bce:	mov    rdi,rbx
  403bd1:	call   409740 <flatcc_verify_union_field@@Base>
  403bd6:	test   eax,eax
  403bd8:	jne    403bbb <_start@@Base+0x91b>
  403bda:	lea    rcx,[rip+0x4f]        # 403c30 <_start@@Base+0x990>
  403be1:	xor    edx,edx
  403be3:	mov    esi,0x5
  403be8:	mov    rdi,rbx
  403beb:	call   409740 <flatcc_verify_union_field@@Base>
  403bf0:	test   eax,eax
  403bf2:	jne    403bbb <_start@@Base+0x91b>
  403bf4:	lea    rcx,[rip+0x35]        # 403c30 <_start@@Base+0x990>
  403bfb:	xor    edx,edx
  403bfd:	mov    esi,0x7
  403c02:	mov    rdi,rbx
  403c05:	call   409740 <flatcc_verify_union_field@@Base>
  403c0a:	test   eax,eax
  403c0c:	jne    403bbb <_start@@Base+0x91b>
  403c0e:	mov    rdi,rbx
  403c11:	lea    rcx,[rip+0x18]        # 403c30 <_start@@Base+0x990>
  403c18:	xor    edx,edx
  403c1a:	pop    rbx
  403c1b:	mov    esi,0x9
  403c20:	jmp    4098a0 <flatcc_verify_union_vector_field@@Base>
  403c25:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403c30:	movzx  eax,BYTE PTR [rdi+0x10]
  403c34:	cmp    al,0x9
  403c36:	je     403c70 <_start@@Base+0x9d0>
  403c38:	jbe    403c50 <_start@@Base+0x9b0>
  403c3a:	cmp    al,0xb
  403c3c:	je     403c44 <_start@@Base+0x9a4>
  403c3e:	jb     403c70 <_start@@Base+0x9d0>
  403c40:	cmp    al,0xff
  403c42:	jne    403c80 <_start@@Base+0x9e0>
  403c44:	jmp    408f40 <flatcc_verify_union_string@@Base>
  403c49:	nop    DWORD PTR [rax+0x0]
  403c50:	cmp    al,0x2
  403c52:	je     403c88 <_start@@Base+0x9e8>
  403c54:	cmp    al,0x8
  403c56:	jne    403c80 <_start@@Base+0x9e0>
  403c58:	mov    edx,0x2
  403c5d:	mov    esi,0x2
  403c62:	jmp    408ef0 <flatcc_verify_union_struct@@Base>
  403c67:	nop    WORD PTR [rax+rax*1+0x0]
  403c70:	mov    edx,0x4
  403c75:	mov    esi,0x4
  403c7a:	jmp    408ef0 <flatcc_verify_union_struct@@Base>
  403c7f:	nop
  403c80:	xor    eax,eax
  403c82:	ret    
  403c83:	nop    DWORD PTR [rax+rax*1+0x0]
  403c88:	lea    rsi,[rip+0xfffffffffffff731]        # 4033c0 <_start@@Base+0x120>
  403c8f:	jmp    408dd0 <flatcc_verify_union_table@@Base>
  403c94:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403c9f:	nop
  403ca0:	xor    eax,eax
  403ca2:	ret    
  403ca3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403cae:	xchg   ax,ax
  403cb0:	push   rbx
  403cb1:	xor    esi,esi
  403cb3:	mov    ecx,0x8
  403cb8:	mov    edx,0x8
  403cbd:	mov    rbx,rdi
  403cc0:	call   4085c0 <flatcc_verify_field@@Base>
  403cc5:	test   eax,eax
  403cc7:	je     403cd0 <_start@@Base+0xa30>
  403cc9:	pop    rbx
  403cca:	ret    
  403ccb:	nop    DWORD PTR [rax+rax*1+0x0]
  403cd0:	mov    rdi,rbx
  403cd3:	mov    ecx,0x4
  403cd8:	mov    edx,0x4
  403cdd:	pop    rbx
  403cde:	mov    esi,0x1
  403ce3:	jmp    4085c0 <flatcc_verify_field@@Base>
  403ce8:	nop    DWORD PTR [rax+rax*1+0x0]
  403cf0:	push   rbp
  403cf1:	push   rbx
  403cf2:	mov    ebp,edx
  403cf4:	mov    rbx,rdi
  403cf7:	mov    r8d,0x1
  403cfd:	mov    ecx,0x1
  403d02:	sub    rsp,0x8
  403d06:	mov    edx,DWORD PTR [rdi+0x28]
  403d09:	add    rdx,rsi
  403d0c:	lea    rsi,[rdi+0x68]
  403d10:	mov    rdi,QWORD PTR [rdi+0x40]
  403d14:	call   QWORD PTR [rbx+0x50]
  403d17:	test   eax,eax
  403d19:	jne    403d48 <_start@@Base+0xaa8>
  403d1b:	mov    edx,DWORD PTR [rbx+0x28]
  403d1e:	mov    rcx,rdx
  403d21:	add    rdx,QWORD PTR [rbx+0x68]
  403d25:	mov    QWORD PTR [rbx+0x18],rdx
  403d29:	mov    edx,DWORD PTR [rbx+0x70]
  403d2c:	sub    edx,ecx
  403d2e:	cmp    ebp,edx
  403d30:	cmovb  edx,ebp
  403d33:	mov    DWORD PTR [rbx+0x24],edx
  403d36:	mov    rdx,QWORD PTR [rbx+0x30]
  403d3a:	mov    DWORD PTR [rdx+0x4],ebp
  403d3d:	add    rsp,0x8
  403d41:	pop    rbx
  403d42:	pop    rbp
  403d43:	ret    
  403d44:	nop    DWORD PTR [rax+0x0]
  403d48:	mov    eax,0xffffffff
  403d4d:	jmp    403d3d <_start@@Base+0xa9d>
  403d4f:	nop

0000000000403d50 <flatcc_builder_default_alloc@@Base>:
  403d50:	push   r12
  403d52:	push   rbp
  403d53:	mov    rbp,rsi
  403d56:	push   rbx
  403d57:	sub    rsp,0x10
  403d5b:	test   rdx,rdx
  403d5e:	jne    403d90 <flatcc_builder_default_alloc@@Base+0x40>
  403d60:	mov    rdi,QWORD PTR [rsi]
  403d63:	xor    eax,eax
  403d65:	test   rdi,rdi
  403d68:	je     403d87 <flatcc_builder_default_alloc@@Base+0x37>
  403d6a:	mov    DWORD PTR [rsp+0xc],eax
  403d6e:	call   403030 <free@plt>
  403d73:	mov    eax,DWORD PTR [rsp+0xc]
  403d77:	mov    QWORD PTR [rbp+0x0],0x0
  403d7f:	mov    QWORD PTR [rbp+0x8],0x0
  403d87:	add    rsp,0x10
  403d8b:	pop    rbx
  403d8c:	pop    rbp
  403d8d:	pop    r12
  403d8f:	ret    
  403d90:	cmp    r8d,0x4
  403d94:	je     403e30 <flatcc_builder_default_alloc@@Base+0xe0>
  403d9a:	jle    403e40 <flatcc_builder_default_alloc@@Base+0xf0>
  403da0:	cmp    r8d,0x5
  403da4:	mov    rbx,rdx
  403da7:	je     403dc8 <flatcc_builder_default_alloc@@Base+0x78>
  403da9:	cmp    r8d,0x7
  403dad:	mov    ebx,0x40
  403db2:	je     403dc3 <flatcc_builder_default_alloc@@Base+0x73>
  403db4:	jmp    403e4f <flatcc_builder_default_alloc@@Base+0xff>
  403db9:	nop    DWORD PTR [rax+0x0]
  403dc0:	add    rbx,rbx
  403dc3:	cmp    rdx,rbx
  403dc6:	ja     403dc0 <flatcc_builder_default_alloc@@Base+0x70>
  403dc8:	mov    rax,QWORD PTR [rbp+0x8]
  403dcc:	cmp    rdx,rax
  403dcf:	ja     403dde <flatcc_builder_default_alloc@@Base+0x8e>
  403dd1:	shr    rax,1
  403dd4:	mov    rdx,rax
  403dd7:	xor    eax,eax
  403dd9:	cmp    rdx,rbx
  403ddc:	jae    403d87 <flatcc_builder_default_alloc@@Base+0x37>
  403dde:	mov    rdi,QWORD PTR [rbp+0x0]
  403de2:	mov    rsi,rbx
  403de5:	mov    DWORD PTR [rsp+0xc],ecx
  403de9:	call   4030d0 <realloc@plt>
  403dee:	test   rax,rax
  403df1:	mov    r12,rax
  403df4:	je     403e59 <flatcc_builder_default_alloc@@Base+0x109>
  403df6:	mov    ecx,DWORD PTR [rsp+0xc]
  403dfa:	test   ecx,ecx
  403dfc:	je     403e18 <flatcc_builder_default_alloc@@Base+0xc8>
  403dfe:	mov    rax,QWORD PTR [rbp+0x8]
  403e02:	cmp    rax,rbx
  403e05:	jae    403e18 <flatcc_builder_default_alloc@@Base+0xc8>
  403e07:	mov    rdx,rbx
  403e0a:	lea    rdi,[r12+rax*1]
  403e0e:	xor    esi,esi
  403e10:	sub    rdx,rax
  403e13:	call   403080 <memset@plt>
  403e18:	mov    QWORD PTR [rbp+0x0],r12
  403e1c:	mov    QWORD PTR [rbp+0x8],rbx
  403e20:	add    rsp,0x10
  403e24:	pop    rbx
  403e25:	xor    eax,eax
  403e27:	pop    rbp
  403e28:	pop    r12
  403e2a:	ret    
  403e2b:	nop    DWORD PTR [rax+rax*1+0x0]
  403e30:	mov    ebx,0x120
  403e35:	jmp    403dc3 <flatcc_builder_default_alloc@@Base+0x73>
  403e37:	nop    WORD PTR [rax+rax*1+0x0]
  403e40:	cmp    r8d,0x1
  403e44:	mov    ebx,0x100
  403e49:	je     403dc3 <flatcc_builder_default_alloc@@Base+0x73>
  403e4f:	mov    ebx,0x20
  403e54:	jmp    403dc3 <flatcc_builder_default_alloc@@Base+0x73>
  403e59:	mov    eax,0xffffffff
  403e5e:	jmp    403d87 <flatcc_builder_default_alloc@@Base+0x37>
  403e63:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403e6e:	xchg   ax,ax
  403e70:	push   rbx
  403e71:	mov    r9,rdi
  403e74:	sub    rsp,0xa0
  403e7b:	mov    rbx,QWORD PTR fs:0x28
  403e84:	mov    QWORD PTR [rsp+0x98],rbx
  403e8c:	xor    ebx,ebx
  403e8e:	test   dx,dx
  403e91:	je     403ef0 <flatcc_builder_default_alloc@@Base+0x1a0>
  403e93:	mov    eax,edx
  403e95:	movzx  edx,dx
  403e98:	movzx  edi,WORD PTR [rsi]
  403e9b:	cmp    di,0x3
  403e9f:	ja     403eae <flatcc_builder_default_alloc@@Base+0x15e>
  403ea1:	mov    edi,0x4
  403ea6:	mov    WORD PTR [rsi],di
  403ea9:	mov    edi,0x4
  403eae:	cmp    ax,di
  403eb1:	jbe    403eb6 <flatcc_builder_default_alloc@@Base+0x166>
  403eb3:	mov    WORD PTR [rsi],ax
  403eb6:	test   ecx,ecx
  403eb8:	jne    403ec8 <flatcc_builder_default_alloc@@Base+0x178>
  403eba:	mov    ebx,DWORD PTR [r9+0xf4]
  403ec1:	sub    edx,0x1
  403ec4:	and    edx,ebx
  403ec6:	jne    403f10 <flatcc_builder_default_alloc@@Base+0x1c0>
  403ec8:	xor    eax,eax
  403eca:	mov    rbx,QWORD PTR [rsp+0x98]
  403ed2:	xor    rbx,QWORD PTR fs:0x28
  403edb:	jne    403f7d <flatcc_builder_default_alloc@@Base+0x22d>
  403ee1:	add    rsp,0xa0
  403ee8:	pop    rbx
  403ee9:	ret    
  403eea:	nop    WORD PTR [rax+rax*1+0x0]
  403ef0:	movzx  eax,WORD PTR [rdi+0xec]
  403ef7:	test   ax,ax
  403efa:	movzx  edx,ax
  403efd:	jne    403e98 <flatcc_builder_default_alloc@@Base+0x148>
  403eff:	mov    edx,0x1
  403f04:	mov    eax,0x1
  403f09:	jmp    403e98 <flatcc_builder_default_alloc@@Base+0x148>
  403f0b:	nop    DWORD PTR [rax+rax*1+0x0]
  403f10:	mov    rax,0x40ac40
  403f17:	movsxd r8,edx
  403f1a:	add    edx,ebx
  403f1c:	cmp    ebx,edx
  403f1e:	mov    QWORD PTR [rsp],r8
  403f22:	mov    QWORD PTR [rsp+0x18],r8
  403f27:	mov    DWORD PTR [rsp+0x8],0x1
  403f2f:	mov    DWORD PTR [r9+0xf4],edx
  403f36:	mov    QWORD PTR [rsp+0x10],rax
  403f3b:	jg     403f82 <flatcc_builder_default_alloc@@Base+0x232>
  403f3d:	lea    rsi,[rsp+0x10]
  403f42:	mov    rdi,QWORD PTR [r9+0x38]
  403f46:	mov    ecx,ebx
  403f48:	mov    edx,0x1
  403f4d:	call   QWORD PTR [r9+0x48]
  403f51:	test   eax,eax
  403f53:	jne    403f87 <flatcc_builder_default_alloc@@Base+0x237>
  403f55:	cmp    ebx,0xffffffff
  403f58:	jne    403ec8 <flatcc_builder_default_alloc@@Base+0x178>
  403f5e:	lea    rcx,[rip+0x6c4b]        # 40abb0 <_IO_stdin_used@@Base+0xbb0>
  403f65:	lea    rsi,[rip+0x61f4]        # 40a160 <_IO_stdin_used@@Base+0x160>
  403f6c:	lea    rdi,[rip+0x6584]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  403f73:	mov    edx,0x2be
  403f78:	call   403070 <__assert_fail@plt>
  403f7d:	call   403060 <__stack_chk_fail@plt>
  403f82:	call   403113 <posix_memalign@plt+0x33>
  403f87:	lea    rcx,[rip+0x6c12]        # 40aba0 <_IO_stdin_used@@Base+0xba0>
  403f8e:	lea    rsi,[rip+0x61cb]        # 40a160 <_IO_stdin_used@@Base+0x160>
  403f95:	lea    rdi,[rip+0x655b]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  403f9c:	mov    edx,0x2a5
  403fa1:	call   403070 <__assert_fail@plt>
  403fa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403fb0:	push   r12
  403fb2:	push   rbp
  403fb3:	mov    r12d,esi
  403fb6:	push   rbx
  403fb7:	movsxd rax,DWORD PTR [rdi+0x104]
  403fbe:	mov    rbx,rdi
  403fc1:	lea    edx,[rax+0x1]
  403fc4:	cmp    edx,DWORD PTR [rdi+0x108]
  403fca:	mov    DWORD PTR [rdi+0x104],edx
  403fd0:	jle    404050 <flatcc_builder_default_alloc@@Base+0x300>
  403fd2:	mov    ecx,DWORD PTR [rdi+0x120]
  403fd8:	test   ecx,ecx
  403fda:	jle    403fe4 <flatcc_builder_default_alloc@@Base+0x294>
  403fdc:	cmp    edx,ecx
  403fde:	jg     4040d0 <flatcc_builder_default_alloc@@Base+0x380>
  403fe4:	lea    rcx,[rax+rax*8]
  403fe8:	lea    rbp,[rcx*4+0x0]
  403ff0:	lea    rdx,[rbp+0x24]
  403ff4:	cmp    rdx,QWORD PTR [rbx+0xa0]
  403ffb:	ja     4040a8 <flatcc_builder_default_alloc@@Base+0x358>
  404001:	mov    rcx,rbp
  404004:	add    rcx,QWORD PTR [rbx+0x98]
  40400b:	test   rcx,rcx
  40400e:	mov    QWORD PTR [rbx+0x30],rcx
  404012:	je     4040d0 <flatcc_builder_default_alloc@@Base+0x380>
  404018:	movabs rdx,0xe38e38e38e38e38f
  404022:	mov    rax,rdx
  404025:	mul    QWORD PTR [rbx+0xa0]
  40402c:	mov    eax,DWORD PTR [rbx+0x120]
  404032:	shr    rdx,0x5
  404036:	test   eax,eax
  404038:	mov    DWORD PTR [rbx+0x108],edx
  40403e:	jle    4040a0 <flatcc_builder_default_alloc@@Base+0x350>
  404040:	cmp    eax,edx
  404042:	jge    4040a0 <flatcc_builder_default_alloc@@Base+0x350>
  404044:	mov    DWORD PTR [rbx+0x108],eax
  40404a:	mov    rax,rcx
  40404d:	jmp    40405c <flatcc_builder_default_alloc@@Base+0x30c>
  40404f:	nop
  404050:	mov    rax,QWORD PTR [rdi+0x30]
  404054:	add    rax,0x24
  404058:	mov    QWORD PTR [rdi+0x30],rax
  40405c:	movzx  edx,WORD PTR [rbx+0xea]
  404063:	mov    ecx,DWORD PTR [rbx+0x20]
  404066:	mov    DWORD PTR [rax+0x8],ecx
  404069:	mov    WORD PTR [rax+0xc],dx
  40406d:	mov    edx,DWORD PTR [rbx+0x28]
  404070:	mov    WORD PTR [rbx+0xea],r12w
  404078:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40407f:	mov    DWORD PTR [rax],edx
  404081:	lea    eax,[rcx+rdx*1+0x7]
  404085:	mov    DWORD PTR [rbx+0x20],0x0
  40408c:	and    eax,0xfffffff8
  40408f:	mov    DWORD PTR [rbx+0x28],eax
  404092:	xor    eax,eax
  404094:	pop    rbx
  404095:	pop    rbp
  404096:	pop    r12
  404098:	ret    
  404099:	nop    DWORD PTR [rax+0x0]
  4040a0:	mov    rax,rcx
  4040a3:	jmp    40405c <flatcc_builder_default_alloc@@Base+0x30c>
  4040a5:	nop    DWORD PTR [rax]
  4040a8:	xor    ecx,ecx
  4040aa:	lea    rsi,[rbx+0x98]
  4040b1:	mov    rdi,QWORD PTR [rbx+0x40]
  4040b5:	mov    r8d,0x4
  4040bb:	call   QWORD PTR [rbx+0x50]
  4040be:	test   eax,eax
  4040c0:	je     404001 <flatcc_builder_default_alloc@@Base+0x2b1>
  4040c6:	call   4030f0 <posix_memalign@plt+0x10>
  4040cb:	nop    DWORD PTR [rax+rax*1+0x0]
  4040d0:	mov    eax,0xffffffff
  4040d5:	jmp    404094 <flatcc_builder_default_alloc@@Base+0x344>
  4040d7:	nop    WORD PTR [rax+rax*1+0x0]
  4040e0:	push   rbp
  4040e1:	push   rbx
  4040e2:	sub    rsp,0xb8
  4040e9:	mov    rax,QWORD PTR fs:0x28
  4040f2:	mov    QWORD PTR [rsp+0xa8],rax
  4040fa:	xor    eax,eax
  4040fc:	cmp    edx,0x3fffffff
  404102:	ja     404298 <flatcc_builder_default_alloc@@Base+0x548>
  404108:	cmp    WORD PTR [rdi+0xe8],0x3
  404110:	mov    rbx,rdi
  404113:	mov    r10d,edx
  404116:	ja     404124 <flatcc_builder_default_alloc@@Base+0x3d4>
  404118:	mov    eax,0x4
  40411d:	mov    WORD PTR [rdi+0xe8],ax
  404124:	mov    eax,DWORD PTR [rbx+0xf0]
  40412a:	lea    r9d,[rdx*4+0x0]
  404132:	lea    r8,[rsp+0xc]
  404137:	mov    DWORD PTR [rsp+0xc],edx
  40413b:	mov    QWORD PTR [rsp+0x10],0x4
  404144:	mov    QWORD PTR [rsp+0x20],r8
  404149:	mov    QWORD PTR [rsp+0x28],0x4
  404152:	mov    r8d,0x4
  404158:	mov    edi,eax
  40415a:	mov    DWORD PTR [rsp+0x18],0x1
  404162:	and    edi,0x3
  404165:	test   r9d,r9d
  404168:	je     404185 <flatcc_builder_default_alloc@@Base+0x435>
  40416a:	lea    r8,[r9+0x4]
  40416e:	mov    QWORD PTR [rsp+0x30],rsi
  404173:	mov    QWORD PTR [rsp+0x38],r9
  404178:	mov    DWORD PTR [rsp+0x18],0x2
  404180:	mov    QWORD PTR [rsp+0x10],r8
  404185:	test   edi,edi
  404187:	jne    404260 <flatcc_builder_default_alloc@@Base+0x510>
  40418d:	mov    r11d,eax
  404190:	sub    r11d,r8d
  404193:	test   edx,edx
  404195:	je     404206 <flatcc_builder_default_alloc@@Base+0x4b6>
  404197:	mov    edx,0xfffffffc
  40419c:	xor    eax,eax
  40419e:	jmp    4041c7 <flatcc_builder_default_alloc@@Base+0x477>
  4041a0:	mov    r9d,edx
  4041a3:	sub    r9d,r11d
  4041a6:	add    edi,r9d
  4041a9:	test   rcx,rcx
  4041ac:	mov    DWORD PTR [rsi+rax*4],edi
  4041af:	je     4041bb <flatcc_builder_default_alloc@@Base+0x46b>
  4041b1:	cmp    BYTE PTR [rcx+rax*1],0x0
  4041b5:	je     4042bb <flatcc_builder_default_alloc@@Base+0x56b>
  4041bb:	add    rax,0x1
  4041bf:	sub    edx,0x4
  4041c2:	cmp    r10d,eax
  4041c5:	jbe    404200 <flatcc_builder_default_alloc@@Base+0x4b0>
  4041c7:	mov    edi,DWORD PTR [rsi+rax*4]
  4041ca:	test   edi,edi
  4041cc:	jne    4041a0 <flatcc_builder_default_alloc@@Base+0x450>
  4041ce:	test   rcx,rcx
  4041d1:	je     40429c <flatcc_builder_default_alloc@@Base+0x54c>
  4041d7:	cmp    BYTE PTR [rcx+rax*1],0x0
  4041db:	je     4041bb <flatcc_builder_default_alloc@@Base+0x46b>
  4041dd:	lea    rcx,[rip+0x662c]        # 40a810 <_IO_stdin_used@@Base+0x810>
  4041e4:	lea    rsi,[rip+0x5f75]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4041eb:	lea    rdi,[rip+0x6307]        # 40a4f9 <_IO_stdin_used@@Base+0x4f9>
  4041f2:	mov    edx,0x5b5
  4041f7:	call   403070 <__assert_fail@plt>
  4041fc:	nop    DWORD PTR [rax+0x0]
  404200:	mov    eax,DWORD PTR [rbx+0xf0]
  404206:	mov    ebp,eax
  404208:	sub    ebp,r8d
  40420b:	cmp    ebp,eax
  40420d:	jge    4042da <flatcc_builder_default_alloc@@Base+0x58a>
  404213:	lea    rsi,[rsp+0x20]
  404218:	mov    rdi,QWORD PTR [rbx+0x38]
  40421c:	mov    ecx,ebp
  40421e:	mov    edx,DWORD PTR [rsp+0x18]
  404222:	call   QWORD PTR [rbx+0x48]
  404225:	test   eax,eax
  404227:	jne    4042fe <flatcc_builder_default_alloc@@Base+0x5ae>
  40422d:	mov    DWORD PTR [rbx+0xf0],ebp
  404233:	mov    rbx,QWORD PTR [rsp+0xa8]
  40423b:	xor    rbx,QWORD PTR fs:0x28
  404244:	mov    eax,ebp
  404246:	jne    4042f9 <flatcc_builder_default_alloc@@Base+0x5a9>
  40424c:	add    rsp,0xb8
  404253:	pop    rbx
  404254:	pop    rbp
  404255:	ret    
  404256:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404260:	movsxd r11,DWORD PTR [rsp+0x18]
  404265:	mov    rbp,0x40ac40
  40426c:	add    r8,rdi
  40426f:	mov    QWORD PTR [rsp+0x10],r8
  404274:	mov    r9,r11
  404277:	shl    r11,0x4
  40427b:	add    r9d,0x1
  40427f:	mov    QWORD PTR [rsp+r11*1+0x20],rbp
  404284:	mov    QWORD PTR [rsp+r11*1+0x28],rdi
  404289:	mov    DWORD PTR [rsp+0x18],r9d
  40428e:	jmp    40418d <flatcc_builder_default_alloc@@Base+0x43d>
  404293:	nop    DWORD PTR [rax+rax*1+0x0]
  404298:	xor    ebp,ebp
  40429a:	jmp    404233 <flatcc_builder_default_alloc@@Base+0x4e3>
  40429c:	lea    rcx,[rip+0x656d]        # 40a810 <_IO_stdin_used@@Base+0x810>
  4042a3:	lea    rsi,[rip+0x5eb6]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4042aa:	lea    rdi,[rip+0x6246]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  4042b1:	mov    edx,0x5b7
  4042b6:	call   403070 <__assert_fail@plt>
  4042bb:	lea    rcx,[rip+0x654e]        # 40a810 <_IO_stdin_used@@Base+0x810>
  4042c2:	lea    rsi,[rip+0x5e97]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4042c9:	lea    rdi,[rip+0x621b]        # 40a4eb <_IO_stdin_used@@Base+0x4eb>
  4042d0:	mov    edx,0x5b1
  4042d5:	call   403070 <__assert_fail@plt>
  4042da:	lea    rcx,[rip+0x68af]        # 40ab90 <_IO_stdin_used@@Base+0xb90>
  4042e1:	lea    rsi,[rip+0x5e78]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4042e8:	lea    rdi,[rip+0x6208]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  4042ef:	mov    edx,0x287
  4042f4:	call   403070 <__assert_fail@plt>
  4042f9:	call   403060 <__stack_chk_fail@plt>
  4042fe:	call   403136 <posix_memalign@plt+0x56>
  404303:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40430e:	xchg   ax,ax

0000000000404310 <flatcc_builder_flush_vtable_cache@@Base>:
  404310:	cmp    QWORD PTR [rdi+0xd8],0x0
  404318:	jne    404320 <flatcc_builder_flush_vtable_cache@@Base+0x10>
  40431a:	ret    
  40431b:	nop    DWORD PTR [rax+rax*1+0x0]
  404320:	push   rbx
  404321:	mov    rbx,rdi
  404324:	mov    rdi,QWORD PTR [rdi+0xa8]
  40432b:	mov    rdx,QWORD PTR [rbx+0xb0]
  404332:	xor    esi,esi
  404334:	call   403080 <memset@plt>
  404339:	mov    DWORD PTR [rbx+0xe4],0x10
  404343:	mov    DWORD PTR [rbx+0xe0],0x0
  40434d:	pop    rbx
  40434e:	ret    
  40434f:	nop

0000000000404350 <flatcc_builder_custom_init@@Base>:
  404350:	mov    QWORD PTR [rdi],0x0
  404357:	mov    QWORD PTR [rdi+0x180],0x0
  404362:	mov    r9,rdi
  404365:	lea    rdi,[rdi+0x8]
  404369:	mov    r10,rcx
  40436c:	mov    rcx,r9
  40436f:	xor    eax,eax
  404371:	and    rdi,0xfffffffffffffff8
  404375:	sub    rcx,rdi
  404378:	add    ecx,0x188
  40437e:	shr    ecx,0x3
  404381:	test   rsi,rsi
  404384:	rep stos QWORD PTR es:[rdi],rax
  404387:	je     4043b8 <flatcc_builder_custom_init@@Base+0x68>
  404389:	test   r10,r10
  40438c:	je     4043a8 <flatcc_builder_custom_init@@Base+0x58>
  40438e:	mov    QWORD PTR [r9+0x40],r8
  404392:	mov    QWORD PTR [r9+0x50],r10
  404396:	xor    eax,eax
  404398:	mov    QWORD PTR [r9+0x38],rdx
  40439c:	mov    QWORD PTR [r9+0x48],rsi
  4043a0:	ret    
  4043a1:	nop    DWORD PTR [rax+0x0]
  4043a8:	mov    r10,0x403d50
  4043af:	jmp    40438e <flatcc_builder_custom_init@@Base+0x3e>
  4043b1:	nop    DWORD PTR [rax+0x0]
  4043b8:	mov    DWORD PTR [r9+0x128],0x1
  4043c3:	lea    rdx,[r9+0x130]
  4043ca:	mov    rsi,0x407e00
  4043d1:	jmp    404389 <flatcc_builder_custom_init@@Base+0x39>
  4043d3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4043de:	xchg   ax,ax

00000000004043e0 <flatcc_builder_init@@Base>:
  4043e0:	xor    r8d,r8d
  4043e3:	xor    ecx,ecx
  4043e5:	xor    edx,edx
  4043e7:	xor    esi,esi
  4043e9:	jmp    404350 <flatcc_builder_custom_init@@Base>
  4043ee:	xchg   ax,ax

00000000004043f0 <flatcc_builder_custom_reset@@Base>:
  4043f0:	push   r14
  4043f2:	mov    r14d,esi
  4043f5:	push   r13
  4043f7:	mov    r13d,edx
  4043fa:	push   r12
  4043fc:	mov    r12,rdi
  4043ff:	push   rbp
  404400:	xor    ebp,ebp
  404402:	push   rbx
  404403:	lea    rbx,[rdi+0x58]
  404407:	jmp    404456 <flatcc_builder_custom_reset@@Base+0x66>
  404409:	nop    DWORD PTR [rax+0x0]
  404410:	cmp    ebp,0x5
  404413:	je     40443f <flatcc_builder_custom_reset@@Base+0x4f>
  404415:	test   r13d,r13d
  404418:	je     40443f <flatcc_builder_custom_reset@@Base+0x4f>
  40441a:	mov    rdi,QWORD PTR [r12+0x40]
  40441f:	mov    r8d,ebp
  404422:	mov    ecx,0x1
  404427:	mov    edx,0x1
  40442c:	mov    rsi,rbx
  40442f:	call   QWORD PTR [r12+0x50]
  404434:	test   eax,eax
  404436:	jne    404590 <flatcc_builder_custom_reset@@Base+0x1a0>
  40443c:	mov    rdi,QWORD PTR [rbx]
  40443f:	mov    rdx,QWORD PTR [rbx+0x8]
  404443:	xor    esi,esi
  404445:	call   403080 <memset@plt>
  40444a:	add    ebp,0x1
  40444d:	add    rbx,0x10
  404451:	cmp    ebp,0x8
  404454:	je     404488 <flatcc_builder_custom_reset@@Base+0x98>
  404456:	mov    rdi,QWORD PTR [rbx]
  404459:	test   rdi,rdi
  40445c:	jne    404410 <flatcc_builder_custom_reset@@Base+0x20>
  40445e:	cmp    QWORD PTR [rbx+0x8],0x0
  404463:	je     40444a <flatcc_builder_custom_reset@@Base+0x5a>
  404465:	lea    rcx,[rip+0x67b4]        # 40ac20 <_IO_stdin_used@@Base+0xc20>
  40446c:	lea    rsi,[rip+0x5ced]        # 40a160 <_IO_stdin_used@@Base+0x160>
  404473:	lea    rdi,[rip+0x608d]        # 40a507 <_IO_stdin_used@@Base+0x507>
  40447a:	mov    edx,0x1b2
  40447f:	call   403070 <__assert_fail@plt>
  404484:	nop    DWORD PTR [rax+0x0]
  404488:	mov    edx,DWORD PTR [r12+0xe4]
  404490:	mov    DWORD PTR [r12+0xe0],0x0
  40449c:	test   edx,edx
  40449e:	je     4044ac <flatcc_builder_custom_reset@@Base+0xbc>
  4044a0:	mov    DWORD PTR [r12+0xe4],0x10
  4044ac:	xor    eax,eax
  4044ae:	test   r14d,r14d
  4044b1:	mov    DWORD PTR [r12+0xf0],0x0
  4044bd:	mov    WORD PTR [r12+0xe8],ax
  4044c6:	mov    rax,QWORD PTR [r12+0x68]
  4044cb:	mov    DWORD PTR [r12+0xf4],0x0
  4044d7:	mov    DWORD PTR [r12+0x104],0x0
  4044e3:	mov    DWORD PTR [r12+0x108],0x0
  4044ef:	mov    DWORD PTR [r12+0x20],0x0
  4044f8:	mov    QWORD PTR [r12+0x18],rax
  4044fd:	mov    rax,QWORD PTR [r12+0x88]
  404505:	mov    DWORD PTR [r12+0x24],0x0
  40450e:	mov    DWORD PTR [r12+0xfc],0x0
  40451a:	mov    DWORD PTR [r12+0x100],0x0
  404526:	mov    QWORD PTR [r12+0x30],0x0
  40452f:	mov    QWORD PTR [r12],rax
  404533:	mov    rax,QWORD PTR [r12+0x58]
  404538:	mov    QWORD PTR [r12+0x8],rax
  40453d:	jne    404568 <flatcc_builder_custom_reset@@Base+0x178>
  40453f:	mov    eax,DWORD PTR [r12+0x128]
  404547:	test   eax,eax
  404549:	je     40455a <flatcc_builder_custom_reset@@Base+0x16a>
  40454b:	lea    rdi,[r12+0x130]
  404553:	call   407c90 <flatcc_emitter_reset@@Base>
  404558:	xor    eax,eax
  40455a:	pop    rbx
  40455b:	pop    rbp
  40455c:	pop    r12
  40455e:	pop    r13
  404560:	pop    r14
  404562:	ret    
  404563:	nop    DWORD PTR [rax+rax*1+0x0]
  404568:	mov    QWORD PTR [r12+0x118],0x0
  404574:	mov    DWORD PTR [r12+0x120],0x0
  404580:	mov    DWORD PTR [r12+0x124],0x0
  40458c:	jmp    40453f <flatcc_builder_custom_reset@@Base+0x14f>
  40458e:	xchg   ax,ax
  404590:	mov    eax,0xffffffff
  404595:	jmp    40455a <flatcc_builder_custom_reset@@Base+0x16a>
  404597:	nop    WORD PTR [rax+rax*1+0x0]

00000000004045a0 <flatcc_builder_reset@@Base>:
  4045a0:	xor    edx,edx
  4045a2:	xor    esi,esi
  4045a4:	jmp    4043f0 <flatcc_builder_custom_reset@@Base>
  4045a9:	nop    DWORD PTR [rax+0x0]

00000000004045b0 <flatcc_builder_clear@@Base>:
  4045b0:	push   r12
  4045b2:	lea    r12,[rdi+0x58]
  4045b6:	push   rbp
  4045b7:	xor    ebp,ebp
  4045b9:	push   rbx
  4045ba:	mov    rbx,rdi
  4045bd:	nop    DWORD PTR [rax]
  4045c0:	mov    r8d,ebp
  4045c3:	add    ebp,0x1
  4045c6:	xor    ecx,ecx
  4045c8:	xor    edx,edx
  4045ca:	mov    rsi,r12
  4045cd:	mov    rdi,QWORD PTR [rbx+0x40]
  4045d1:	add    r12,0x10
  4045d5:	call   QWORD PTR [rbx+0x50]
  4045d8:	cmp    ebp,0x8
  4045db:	jne    4045c0 <flatcc_builder_clear@@Base+0x10>
  4045dd:	mov    eax,DWORD PTR [rbx+0x128]
  4045e3:	test   eax,eax
  4045e5:	je     4045f3 <flatcc_builder_clear@@Base+0x43>
  4045e7:	lea    rdi,[rbx+0x130]
  4045ee:	call   407d70 <flatcc_emitter_clear@@Base>
  4045f3:	lea    rdi,[rbx+0x8]
  4045f7:	mov    QWORD PTR [rbx],0x0
  4045fe:	mov    QWORD PTR [rbx+0x180],0x0
  404609:	xor    eax,eax
  40460b:	and    rdi,0xfffffffffffffff8
  40460f:	sub    rbx,rdi
  404612:	lea    ecx,[rbx+0x188]
  404618:	shr    ecx,0x3
  40461b:	rep stos QWORD PTR es:[rdi],rax
  40461e:	pop    rbx
  40461f:	pop    rbp
  404620:	pop    r12
  404622:	ret    
  404623:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40462e:	xchg   ax,ax

0000000000404630 <flatcc_builder_enter_user_frame_ptr@@Base>:
  404630:	push   r12
  404632:	push   rbp
  404633:	mov    r12,rdi
  404636:	push   rbx
  404637:	lea    rbx,[rsi+0x7]
  40463b:	mov    rbp,QWORD PTR [rdi+0x180]
  404642:	and    rbx,0xfffffffffffffff8
  404646:	add    rbx,0x8
  40464a:	lea    rdx,[rbx+rbp*1]
  40464e:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404655:	ja     4046a8 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
  404657:	add    rbp,QWORD PTR [r12+0xc8]
  40465f:	je     4046d0 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
  404661:	mov    rdx,rbx
  404664:	xor    esi,esi
  404666:	mov    rdi,rbp
  404669:	call   403080 <memset@plt>
  40466e:	mov    rax,QWORD PTR [r12+0x178]
  404676:	mov    QWORD PTR [rbp+0x0],rax
  40467a:	mov    rax,QWORD PTR [r12+0x180]
  404682:	lea    rdx,[rax+0x8]
  404686:	add    rbx,rax
  404689:	lea    rax,[rbp+0x8]
  40468d:	mov    QWORD PTR [r12+0x180],rbx
  404695:	mov    QWORD PTR [r12+0x178],rdx
  40469d:	pop    rbx
  40469e:	pop    rbp
  40469f:	pop    r12
  4046a1:	ret    
  4046a2:	nop    WORD PTR [rax+rax*1+0x0]
  4046a8:	lea    rsi,[rdi+0xc8]
  4046af:	xor    ecx,ecx
  4046b1:	mov    rdi,QWORD PTR [rdi+0x40]
  4046b5:	mov    r8d,0x7
  4046bb:	call   QWORD PTR [r12+0x50]
  4046c0:	test   eax,eax
  4046c2:	je     404657 <flatcc_builder_enter_user_frame_ptr@@Base+0x27>
  4046c4:	call   4030f0 <posix_memalign@plt+0x10>
  4046c9:	nop    DWORD PTR [rax+0x0]
  4046d0:	xor    eax,eax
  4046d2:	jmp    40469d <flatcc_builder_enter_user_frame_ptr@@Base+0x6d>
  4046d4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4046df:	nop

00000000004046e0 <flatcc_builder_enter_user_frame@@Base>:
  4046e0:	push   r12
  4046e2:	push   rbp
  4046e3:	mov    r12,rdi
  4046e6:	push   rbx
  4046e7:	lea    rbx,[rsi+0x7]
  4046eb:	mov    rbp,QWORD PTR [rdi+0x180]
  4046f2:	and    rbx,0xfffffffffffffff8
  4046f6:	add    rbx,0x8
  4046fa:	lea    rdx,[rbx+rbp*1]
  4046fe:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404705:	ja     404750 <flatcc_builder_enter_user_frame@@Base+0x70>
  404707:	xor    eax,eax
  404709:	add    rbp,QWORD PTR [r12+0xc8]
  404711:	je     40474b <flatcc_builder_enter_user_frame@@Base+0x6b>
  404713:	mov    rdx,rbx
  404716:	xor    esi,esi
  404718:	mov    rdi,rbp
  40471b:	call   403080 <memset@plt>
  404720:	mov    rax,QWORD PTR [r12+0x178]
  404728:	mov    QWORD PTR [rbp+0x0],rax
  40472c:	mov    rdx,QWORD PTR [r12+0x180]
  404734:	lea    rax,[rdx+0x8]
  404738:	add    rbx,rdx
  40473b:	mov    QWORD PTR [r12+0x180],rbx
  404743:	mov    QWORD PTR [r12+0x178],rax
  40474b:	pop    rbx
  40474c:	pop    rbp
  40474d:	pop    r12
  40474f:	ret    
  404750:	lea    rsi,[rdi+0xc8]
  404757:	xor    ecx,ecx
  404759:	mov    rdi,QWORD PTR [rdi+0x40]
  40475d:	mov    r8d,0x7
  404763:	call   QWORD PTR [r12+0x50]
  404768:	test   eax,eax
  40476a:	je     404707 <flatcc_builder_enter_user_frame@@Base+0x27>
  40476c:	call   4030f0 <posix_memalign@plt+0x10>
  404771:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40477c:	nop    DWORD PTR [rax+0x0]

0000000000404780 <flatcc_builder_exit_user_frame@@Base>:
  404780:	mov    rax,QWORD PTR [rdi+0x178]
  404787:	test   rax,rax
  40478a:	je     4047ac <flatcc_builder_exit_user_frame@@Base+0x2c>
  40478c:	mov    edx,eax
  40478e:	add    rdx,QWORD PTR [rdi+0xc8]
  404795:	sub    rax,0x8
  404799:	mov    QWORD PTR [rdi+0x180],rax
  4047a0:	mov    rax,QWORD PTR [rdx-0x8]
  4047a4:	mov    QWORD PTR [rdi+0x178],rax
  4047ab:	ret    
  4047ac:	lea    rcx,[rip+0x643d]        # 40abf0 <_IO_stdin_used@@Base+0xbf0>
  4047b3:	lea    rsi,[rip+0x59a6]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4047ba:	lea    rdi,[rip+0x5d58]        # 40a519 <_IO_stdin_used@@Base+0x519>
  4047c1:	sub    rsp,0x8
  4047c5:	mov    edx,0x21e
  4047ca:	call   403070 <__assert_fail@plt>
  4047cf:	nop

00000000004047d0 <flatcc_builder_exit_user_frame_at@@Base>:
  4047d0:	cmp    QWORD PTR [rdi+0x178],rsi
  4047d7:	jb     4047e5 <flatcc_builder_exit_user_frame_at@@Base+0x15>
  4047d9:	mov    QWORD PTR [rdi+0x178],rsi
  4047e0:	jmp    404780 <flatcc_builder_exit_user_frame@@Base>
  4047e5:	lea    rcx,[rip+0x63d4]        # 40abc0 <_IO_stdin_used@@Base+0xbc0>
  4047ec:	lea    rsi,[rip+0x596d]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4047f3:	lea    rdi,[rip+0x59c6]        # 40a1c0 <_IO_stdin_used@@Base+0x1c0>
  4047fa:	sub    rsp,0x8
  4047fe:	mov    edx,0x227
  404803:	call   403070 <__assert_fail@plt>
  404808:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404810 <flatcc_builder_get_current_user_frame@@Base>:
  404810:	mov    rax,QWORD PTR [rdi+0x178]
  404817:	ret    
  404818:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404820 <flatcc_builder_get_user_frame_ptr@@Base>:
  404820:	mov    eax,esi
  404822:	add    rax,QWORD PTR [rdi+0xc8]
  404829:	ret    
  40482a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404830 <flatcc_builder_embed_buffer@@Base>:
  404830:	push   r13
  404832:	push   r12
  404834:	mov    r12,rcx
  404837:	push   rbp
  404838:	push   rbx
  404839:	xor    ecx,ecx
  40483b:	mov    rbp,rdx
  40483e:	movzx  edx,si
  404841:	mov    rbx,rdi
  404844:	sub    rsp,0xc8
  40484b:	mov    r13d,r9d
  40484e:	mov    WORD PTR [rsp+0xc],r8w
  404854:	mov    r8d,DWORD PTR [rdi+0x100]
  40485b:	lea    rsi,[rsp+0xc]
  404860:	mov    rax,QWORD PTR fs:0x28
  404869:	mov    QWORD PTR [rsp+0xb8],rax
  404871:	xor    eax,eax
  404873:	test   r8d,r8d
  404876:	setne  cl
  404879:	call   403e70 <flatcc_builder_default_alloc@@Base+0x120>
  40487e:	test   eax,eax
  404880:	jne    4049c8 <flatcc_builder_embed_buffer@@Base+0x198>
  404886:	mov    edx,DWORD PTR [rbx+0xf0]
  40488c:	movzx  ecx,WORD PTR [rsp+0xc]
  404891:	xor    esi,esi
  404893:	and    r13d,0x2
  404897:	mov    QWORD PTR [rsp+0x20],0x0
  4048a0:	mov    DWORD PTR [rsp+0x28],0x0
  4048a8:	setne  sil
  4048ac:	xor    r8d,r8d
  4048af:	mov    eax,edx
  4048b1:	shl    esi,0x2
  4048b4:	sub    eax,r12d
  4048b7:	sub    ecx,0x1
  4048ba:	sub    eax,esi
  4048bc:	and    eax,ecx
  4048be:	lea    ecx,[rax+r12*1]
  4048c2:	mov    DWORD PTR [rsp+0x1c],ecx
  4048c6:	mov    ecx,DWORD PTR [rbx+0x100]
  4048cc:	test   ecx,ecx
  4048ce:	je     4048fa <flatcc_builder_embed_buffer@@Base+0xca>
  4048d0:	lea    rcx,[rsp+0x1c]
  4048d5:	mov    QWORD PTR [rsp+0x20],0x4
  4048de:	mov    QWORD PTR [rsp+0x38],0x4
  4048e7:	mov    DWORD PTR [rsp+0x28],0x1
  4048ef:	mov    r8d,0x4
  4048f5:	mov    QWORD PTR [rsp+0x30],rcx
  4048fa:	test   r12,r12
  4048fd:	je     404924 <flatcc_builder_embed_buffer@@Base+0xf4>
  4048ff:	movsxd rsi,DWORD PTR [rsp+0x28]
  404904:	add    r8,r12
  404907:	mov    QWORD PTR [rsp+0x20],r8
  40490c:	mov    rcx,rsi
  40490f:	shl    rsi,0x4
  404913:	add    ecx,0x1
  404916:	mov    QWORD PTR [rsp+rsi*1+0x30],rbp
  40491b:	mov    QWORD PTR [rsp+rsi*1+0x38],r12
  404920:	mov    DWORD PTR [rsp+0x28],ecx
  404924:	test   eax,eax
  404926:	jne    404990 <flatcc_builder_embed_buffer@@Base+0x160>
  404928:	mov    ebp,edx
  40492a:	sub    ebp,r8d
  40492d:	cmp    edx,ebp
  40492f:	jle    4049cc <flatcc_builder_embed_buffer@@Base+0x19c>
  404935:	movabs rax,0x10000000f
  40493f:	cmp    r8,rax
  404942:	ja     4049cc <flatcc_builder_embed_buffer@@Base+0x19c>
  404948:	lea    rsi,[rsp+0x30]
  40494d:	mov    rdi,QWORD PTR [rbx+0x38]
  404951:	mov    ecx,ebp
  404953:	mov    edx,DWORD PTR [rsp+0x28]
  404957:	call   QWORD PTR [rbx+0x48]
  40495a:	test   eax,eax
  40495c:	jne    4049f0 <flatcc_builder_embed_buffer@@Base+0x1c0>
  404962:	mov    DWORD PTR [rbx+0xf0],ebp
  404968:	mov    rdi,QWORD PTR [rsp+0xb8]
  404970:	xor    rdi,QWORD PTR fs:0x28
  404979:	mov    eax,ebp
  40497b:	jne    4049eb <flatcc_builder_embed_buffer@@Base+0x1bb>
  40497d:	add    rsp,0xc8
  404984:	pop    rbx
  404985:	pop    rbp
  404986:	pop    r12
  404988:	pop    r13
  40498a:	ret    
  40498b:	nop    DWORD PTR [rax+rax*1+0x0]
  404990:	movsxd rsi,DWORD PTR [rsp+0x28]
  404995:	mov    rdi,0x40ac40
  40499c:	add    r8,rax
  40499f:	mov    QWORD PTR [rsp+0x20],r8
  4049a4:	mov    rcx,rsi
  4049a7:	shl    rsi,0x4
  4049ab:	add    ecx,0x1
  4049ae:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  4049b3:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  4049b8:	mov    DWORD PTR [rsp+0x28],ecx
  4049bc:	jmp    404928 <flatcc_builder_embed_buffer@@Base+0xf8>
  4049c1:	nop    DWORD PTR [rax+0x0]
  4049c8:	xor    ebp,ebp
  4049ca:	jmp    404968 <flatcc_builder_embed_buffer@@Base+0x138>
  4049cc:	lea    rcx,[rip+0x61bd]        # 40ab90 <_IO_stdin_used@@Base+0xb90>
  4049d3:	lea    rsi,[rip+0x5786]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4049da:	lea    rdi,[rip+0x5b16]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  4049e1:	mov    edx,0x287
  4049e6:	call   403070 <__assert_fail@plt>
  4049eb:	call   403060 <__stack_chk_fail@plt>
  4049f0:	call   403136 <posix_memalign@plt+0x56>
  4049f5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000404a00 <flatcc_builder_create_buffer@@Base>:
  404a00:	push   r14
  404a02:	push   r13
  404a04:	mov    r13d,r9d
  404a07:	push   r12
  404a09:	push   rbp
  404a0a:	and    r13d,0x1
  404a0e:	push   rbx
  404a0f:	mov    r14,rsi
  404a12:	mov    r12d,ecx
  404a15:	movzx  edx,dx
  404a18:	mov    ecx,r13d
  404a1b:	mov    rbp,rdi
  404a1e:	sub    rsp,0xc0
  404a25:	mov    ebx,r9d
  404a28:	lea    rsi,[rsp+0xc]
  404a2d:	mov    WORD PTR [rsp+0xc],r8w
  404a33:	mov    DWORD PTR [rsp+0x1c],0x0
  404a3b:	mov    rax,QWORD PTR fs:0x28
  404a44:	mov    QWORD PTR [rsp+0xb8],rax
  404a4c:	xor    eax,eax
  404a4e:	call   403e70 <flatcc_builder_default_alloc@@Base+0x120>
  404a53:	test   eax,eax
  404a55:	jne    404c10 <flatcc_builder_create_buffer@@Base+0x210>
  404a5b:	movzx  ecx,WORD PTR [rsp+0xc]
  404a60:	cmp    cx,WORD PTR [rbp+0xe8]
  404a67:	ja     404c00 <flatcc_builder_create_buffer@@Base+0x200>
  404a6d:	test   r14,r14
  404a70:	mov    eax,DWORD PTR [rsp+0x1c]
  404a74:	je     404a7d <flatcc_builder_create_buffer@@Base+0x7d>
  404a76:	mov    eax,DWORD PTR [r14]
  404a79:	mov    DWORD PTR [rsp+0x1c],eax
  404a7d:	xor    r10d,r10d
  404a80:	test   eax,eax
  404a82:	mov    edi,ebx
  404a84:	setne  r10b
  404a88:	and    edi,0x1
  404a8b:	mov    edx,DWORD PTR [rbp+0xf0]
  404a91:	shl    r10d,0x2
  404a95:	and    ebx,0x2
  404a98:	jne    404bc8 <flatcc_builder_create_buffer@@Base+0x1c8>
  404a9e:	lea    eax,[rdx-0x4]
  404aa1:	sub    ecx,0x1
  404aa4:	sub    eax,r10d
  404aa7:	and    eax,ecx
  404aa9:	test   dil,dil
  404aac:	jne    404bd3 <flatcc_builder_create_buffer@@Base+0x1d3>
  404ab2:	mov    ecx,0x1
  404ab7:	mov    r8d,0x4
  404abd:	movsxd rsi,ebx
  404ac0:	lea    r9,[rsp+0x14]
  404ac5:	mov    QWORD PTR [rsp+0x20],r8
  404aca:	shl    rsi,0x4
  404ace:	test   r10d,r10d
  404ad1:	mov    DWORD PTR [rsp+0x28],ecx
  404ad5:	mov    QWORD PTR [rsp+rsi*1+0x30],r9
  404ada:	mov    QWORD PTR [rsp+rsi*1+0x38],0x4
  404ae3:	je     404b07 <flatcc_builder_create_buffer@@Base+0x107>
  404ae5:	lea    rsi,[rsp+0x1c]
  404aea:	shl    rcx,0x4
  404aee:	add    r8,r10
  404af1:	add    ebx,0x2
  404af4:	mov    QWORD PTR [rsp+0x20],r8
  404af9:	mov    QWORD PTR [rsp+rcx*1+0x38],r10
  404afe:	mov    QWORD PTR [rsp+rcx*1+0x30],rsi
  404b03:	mov    DWORD PTR [rsp+0x28],ebx
  404b07:	test   eax,eax
  404b09:	je     404b37 <flatcc_builder_create_buffer@@Base+0x137>
  404b0b:	movsxd rsi,DWORD PTR [rsp+0x28]
  404b10:	mov    r9,0x40ac40
  404b17:	add    r8,rax
  404b1a:	mov    QWORD PTR [rsp+0x20],r8
  404b1f:	mov    rcx,rsi
  404b22:	shl    rsi,0x4
  404b26:	add    ecx,0x1
  404b29:	mov    QWORD PTR [rsp+rsi*1+0x30],r9
  404b2e:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  404b33:	mov    DWORD PTR [rsp+0x28],ecx
  404b37:	mov    eax,edx
  404b39:	sub    eax,r8d
  404b3c:	test   dil,dil
  404b3f:	je     404c18 <flatcc_builder_create_buffer@@Base+0x218>
  404b45:	add    eax,0x4
  404b48:	test   r13d,r13d
  404b4b:	je     404c18 <flatcc_builder_create_buffer@@Base+0x218>
  404b51:	mov    ecx,DWORD PTR [rbp+0xf8]
  404b57:	sub    ecx,eax
  404b59:	mov    DWORD PTR [rsp+0x18],ecx
  404b5d:	mov    ebx,edx
  404b5f:	sub    r12d,eax
  404b62:	sub    ebx,r8d
  404b65:	mov    DWORD PTR [rsp+0x14],r12d
  404b6a:	cmp    ebx,edx
  404b6c:	jge    404c29 <flatcc_builder_create_buffer@@Base+0x229>
  404b72:	lea    rsi,[rsp+0x30]
  404b77:	mov    rdi,QWORD PTR [rbp+0x38]
  404b7b:	mov    ecx,ebx
  404b7d:	mov    edx,DWORD PTR [rsp+0x28]
  404b81:	call   QWORD PTR [rbp+0x48]
  404b84:	test   eax,eax
  404b86:	jne    404c4d <flatcc_builder_create_buffer@@Base+0x24d>
  404b8c:	test   ebx,ebx
  404b8e:	mov    DWORD PTR [rbp+0xf0],ebx
  404b94:	je     404c52 <flatcc_builder_create_buffer@@Base+0x252>
  404b9a:	mov    rdi,QWORD PTR [rsp+0xb8]
  404ba2:	xor    rdi,QWORD PTR fs:0x28
  404bab:	mov    eax,ebx
  404bad:	jne    404c48 <flatcc_builder_create_buffer@@Base+0x248>
  404bb3:	add    rsp,0xc0
  404bba:	pop    rbx
  404bbb:	pop    rbp
  404bbc:	pop    r12
  404bbe:	pop    r13
  404bc0:	pop    r14
  404bc2:	ret    
  404bc3:	nop    DWORD PTR [rax+rax*1+0x0]
  404bc8:	lea    eax,[rdx-0x8]
  404bcb:	sub    ecx,0x1
  404bce:	sub    eax,r10d
  404bd1:	and    eax,ecx
  404bd3:	lea    rcx,[rsp+0x18]
  404bd8:	mov    QWORD PTR [rsp+0x38],0x4
  404be1:	mov    ebx,0x1
  404be6:	mov    r8d,0x8
  404bec:	mov    edi,0x1
  404bf1:	mov    QWORD PTR [rsp+0x30],rcx
  404bf6:	mov    ecx,0x2
  404bfb:	jmp    404abd <flatcc_builder_create_buffer@@Base+0xbd>
  404c00:	mov    WORD PTR [rbp+0xe8],cx
  404c07:	jmp    404a6d <flatcc_builder_create_buffer@@Base+0x6d>
  404c0c:	nop    DWORD PTR [rax+0x0]
  404c10:	xor    ebx,ebx
  404c12:	jmp    404b9a <flatcc_builder_create_buffer@@Base+0x19a>
  404c14:	nop    DWORD PTR [rax+0x0]
  404c18:	mov    ecx,DWORD PTR [rbp+0xf4]
  404c1e:	sub    ecx,eax
  404c20:	mov    DWORD PTR [rsp+0x18],ecx
  404c24:	jmp    404b5d <flatcc_builder_create_buffer@@Base+0x15d>
  404c29:	lea    rcx,[rip+0x5f60]        # 40ab90 <_IO_stdin_used@@Base+0xb90>
  404c30:	lea    rsi,[rip+0x5529]        # 40a160 <_IO_stdin_used@@Base+0x160>
  404c37:	lea    rdi,[rip+0x58b9]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  404c3e:	mov    edx,0x287
  404c43:	call   403070 <__assert_fail@plt>
  404c48:	call   403060 <__stack_chk_fail@plt>
  404c4d:	call   403136 <posix_memalign@plt+0x56>
  404c52:	lea    rcx,[rip+0x5f17]        # 40ab70 <_IO_stdin_used@@Base+0xb70>
  404c59:	lea    rsi,[rip+0x5500]        # 40a160 <_IO_stdin_used@@Base+0x160>
  404c60:	lea    rdi,[rip+0x5890]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  404c67:	mov    edx,0x304
  404c6c:	call   403070 <__assert_fail@plt>
  404c71:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404c7c:	nop    DWORD PTR [rax+0x0]

0000000000404c80 <flatcc_builder_create_struct@@Base>:
  404c80:	push   rbp
  404c81:	push   rbx
  404c82:	sub    rsp,0xa8
  404c89:	mov    rax,QWORD PTR fs:0x28
  404c92:	mov    QWORD PTR [rsp+0x98],rax
  404c9a:	xor    eax,eax
  404c9c:	test   cx,cx
  404c9f:	je     404daf <flatcc_builder_create_struct@@Base+0x12f>
  404ca5:	mov    rbx,rdi
  404ca8:	mov    r8,rdx
  404cab:	movzx  edi,cx
  404cae:	cmp    cx,WORD PTR [rbx+0xe8]
  404cb5:	jbe    404cbe <flatcc_builder_create_struct@@Base+0x3e>
  404cb7:	mov    WORD PTR [rbx+0xe8],cx
  404cbe:	mov    edx,DWORD PTR [rbx+0xf0]
  404cc4:	lea    ecx,[rdi-0x1]
  404cc7:	mov    QWORD PTR [rsp],0x0
  404ccf:	mov    DWORD PTR [rsp+0x8],0x0
  404cd7:	mov    eax,edx
  404cd9:	sub    eax,r8d
  404cdc:	and    eax,ecx
  404cde:	test   r8,r8
  404ce1:	jne    404d70 <flatcc_builder_create_struct@@Base+0xf0>
  404ce7:	test   eax,eax
  404ce9:	je     404d16 <flatcc_builder_create_struct@@Base+0x96>
  404ceb:	movsxd rsi,DWORD PTR [rsp+0x8]
  404cf0:	mov    rdi,0x40ac40
  404cf7:	add    r8,rax
  404cfa:	mov    QWORD PTR [rsp],r8
  404cfe:	mov    rcx,rsi
  404d01:	shl    rsi,0x4
  404d05:	add    ecx,0x1
  404d08:	mov    QWORD PTR [rsp+rsi*1+0x10],rdi
  404d0d:	mov    QWORD PTR [rsp+rsi*1+0x18],rax
  404d12:	mov    DWORD PTR [rsp+0x8],ecx
  404d16:	mov    ebp,edx
  404d18:	movabs rax,0x10000000f
  404d22:	sub    ebp,r8d
  404d25:	cmp    r8,rax
  404d28:	ja     404d8b <flatcc_builder_create_struct@@Base+0x10b>
  404d2a:	cmp    edx,ebp
  404d2c:	jle    404d8b <flatcc_builder_create_struct@@Base+0x10b>
  404d2e:	lea    rsi,[rsp+0x10]
  404d33:	mov    rdi,QWORD PTR [rbx+0x38]
  404d37:	mov    ecx,ebp
  404d39:	mov    edx,DWORD PTR [rsp+0x8]
  404d3d:	call   QWORD PTR [rbx+0x48]
  404d40:	test   eax,eax
  404d42:	jne    404daa <flatcc_builder_create_struct@@Base+0x12a>
  404d44:	mov    rdx,QWORD PTR [rsp+0x98]
  404d4c:	xor    rdx,QWORD PTR fs:0x28
  404d55:	mov    DWORD PTR [rbx+0xf0],ebp
  404d5b:	mov    eax,ebp
  404d5d:	jne    404dce <flatcc_builder_create_struct@@Base+0x14e>
  404d5f:	add    rsp,0xa8
  404d66:	pop    rbx
  404d67:	pop    rbp
  404d68:	ret    
  404d69:	nop    DWORD PTR [rax+0x0]
  404d70:	mov    QWORD PTR [rsp],r8
  404d74:	mov    QWORD PTR [rsp+0x10],rsi
  404d79:	mov    QWORD PTR [rsp+0x18],r8
  404d7e:	mov    DWORD PTR [rsp+0x8],0x1
  404d86:	jmp    404ce7 <flatcc_builder_create_struct@@Base+0x67>
  404d8b:	lea    rcx,[rip+0x5dfe]        # 40ab90 <_IO_stdin_used@@Base+0xb90>
  404d92:	lea    rsi,[rip+0x53c7]        # 40a160 <_IO_stdin_used@@Base+0x160>
  404d99:	lea    rdi,[rip+0x5757]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  404da0:	mov    edx,0x287
  404da5:	call   403070 <__assert_fail@plt>
  404daa:	call   403136 <posix_memalign@plt+0x56>
  404daf:	lea    rcx,[rip+0x5d9a]        # 40ab50 <_IO_stdin_used@@Base+0xb50>
  404db6:	lea    rsi,[rip+0x53a3]        # 40a160 <_IO_stdin_used@@Base+0x160>
  404dbd:	lea    rdi,[rip+0x576e]        # 40a532 <_IO_stdin_used@@Base+0x532>
  404dc4:	mov    edx,0x30f
  404dc9:	call   403070 <__assert_fail@plt>
  404dce:	call   403060 <__stack_chk_fail@plt>
  404dd3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404dde:	xchg   ax,ax

0000000000404de0 <flatcc_builder_start_buffer@@Base>:
  404de0:	push   r13
  404de2:	push   r12
  404de4:	mov    r13d,edx
  404de7:	push   rbp
  404de8:	push   rbx
  404de9:	mov    rbp,rsi
  404dec:	mov    rbx,rdi
  404def:	mov    r12d,ecx
  404df2:	sub    rsp,0x8
  404df6:	movzx  esi,WORD PTR [rdi+0xe8]
  404dfd:	call   403fb0 <flatcc_builder_default_alloc@@Base+0x260>
  404e02:	test   eax,eax
  404e04:	jne    404eb0 <flatcc_builder_start_buffer@@Base+0xd0>
  404e0a:	movzx  edx,WORD PTR [rbx+0xec]
  404e11:	mov    rdi,QWORD PTR [rbx+0x30]
  404e15:	mov    ecx,0x1
  404e1a:	mov    WORD PTR [rbx+0xe8],cx
  404e21:	test   rbp,rbp
  404e24:	mov    rsi,rbp
  404e27:	mov    WORD PTR [rdi+0x22],dx
  404e2b:	movzx  edx,WORD PTR [rbx+0x10c]
  404e32:	mov    WORD PTR [rbx+0xec],r13w
  404e3a:	mov    WORD PTR [rdi+0x20],dx
  404e3e:	mov    edx,DWORD PTR [rbx+0xf8]
  404e44:	mov    WORD PTR [rbx+0x10c],r12w
  404e4c:	mov    DWORD PTR [rdi+0x14],edx
  404e4f:	mov    edx,DWORD PTR [rbx+0x100]
  404e55:	mov    DWORD PTR [rdi+0x1c],edx
  404e58:	mov    edx,DWORD PTR [rbx+0xf0]
  404e5e:	mov    DWORD PTR [rbx+0xf8],edx
  404e64:	mov    edx,DWORD PTR [rbx+0xfc]
  404e6a:	lea    ecx,[rdx+0x1]
  404e6d:	mov    DWORD PTR [rbx+0x100],edx
  404e73:	mov    edx,DWORD PTR [rbx+0x110]
  404e79:	mov    DWORD PTR [rbx+0xfc],ecx
  404e7f:	mov    DWORD PTR [rdi+0x10],edx
  404e82:	je     404ea0 <flatcc_builder_start_buffer@@Base+0xc0>
  404e84:	mov    edx,DWORD PTR [rsi]
  404e86:	mov    DWORD PTR [rbx+0x110],edx
  404e8c:	mov    edx,0x1
  404e91:	mov    WORD PTR [rdi+0xe],dx
  404e95:	add    rsp,0x8
  404e99:	pop    rbx
  404e9a:	pop    rbp
  404e9b:	pop    r12
  404e9d:	pop    r13
  404e9f:	ret    
  404ea0:	mov    rsi,0x40ac40
  404ea7:	jmp    404e84 <flatcc_builder_start_buffer@@Base+0xa4>
  404ea9:	nop    DWORD PTR [rax+0x0]
  404eb0:	mov    eax,0xffffffff
  404eb5:	jmp    404e95 <flatcc_builder_start_buffer@@Base+0xb5>
  404eb7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404ec0 <flatcc_builder_end_buffer@@Base>:
  404ec0:	push   rbp
  404ec1:	push   rbx
  404ec2:	xor    eax,eax
  404ec4:	sub    rsp,0x8
  404ec8:	movzx  r9d,WORD PTR [rdi+0x10c]
  404ed0:	mov    edx,DWORD PTR [rdi+0x100]
  404ed6:	and    r9d,0x2
  404eda:	test   edx,edx
  404edc:	setne  al
  404edf:	or     r9d,eax
  404ee2:	mov    rax,QWORD PTR [rdi+0x30]
  404ee6:	cmp    WORD PTR [rax+0xe],0x1
  404eeb:	jne    404fe1 <flatcc_builder_end_buffer@@Base+0x121>
  404ef1:	movzx  edx,WORD PTR [rdi+0xec]
  404ef8:	movzx  r8d,WORD PTR [rdi+0xe8]
  404f00:	mov    rbx,rdi
  404f03:	mov    ecx,esi
  404f05:	cmp    dx,r8w
  404f09:	ja     404f30 <flatcc_builder_end_buffer@@Base+0x70>
  404f0b:	lea    rsi,[rbx+0x110]
  404f12:	mov    rdi,rbx
  404f15:	call   404a00 <flatcc_builder_create_buffer@@Base>
  404f1a:	test   eax,eax
  404f1c:	mov    ebp,eax
  404f1e:	jne    404f40 <flatcc_builder_end_buffer@@Base+0x80>
  404f20:	add    rsp,0x8
  404f24:	mov    eax,ebp
  404f26:	pop    rbx
  404f27:	pop    rbp
  404f28:	ret    
  404f29:	nop    DWORD PTR [rax+0x0]
  404f30:	mov    WORD PTR [rbx+0xe8],dx
  404f37:	mov    r8d,edx
  404f3a:	jmp    404f0b <flatcc_builder_end_buffer@@Base+0x4b>
  404f3c:	nop    DWORD PTR [rax+0x0]
  404f40:	mov    rax,QWORD PTR [rbx+0x30]
  404f44:	mov    rdi,QWORD PTR [rbx+0x18]
  404f48:	xor    esi,esi
  404f4a:	mov    edx,DWORD PTR [rax+0x14]
  404f4d:	mov    DWORD PTR [rbx+0xf8],edx
  404f53:	mov    edx,DWORD PTR [rax+0x1c]
  404f56:	mov    DWORD PTR [rbx+0x100],edx
  404f5c:	mov    edx,DWORD PTR [rax+0x10]
  404f5f:	mov    DWORD PTR [rbx+0x110],edx
  404f65:	movzx  eax,WORD PTR [rax+0x20]
  404f69:	mov    edx,DWORD PTR [rbx+0x20]
  404f6c:	mov    WORD PTR [rbx+0x10c],ax
  404f73:	call   403080 <memset@plt>
  404f78:	mov    rax,QWORD PTR [rbx+0x30]
  404f7c:	mov    edi,DWORD PTR [rbx+0x70]
  404f7f:	mov    esi,DWORD PTR [rax]
  404f81:	mov    edx,DWORD PTR [rax+0x8]
  404f84:	mov    ecx,DWORD PTR [rax+0x4]
  404f87:	mov    DWORD PTR [rbx+0x20],edx
  404f8a:	mov    rdx,rsi
  404f8d:	mov    DWORD PTR [rbx+0x28],esi
  404f90:	add    rsi,QWORD PTR [rbx+0x68]
  404f94:	sub    edi,edx
  404f96:	cmp    ecx,edi
  404f98:	mov    edx,edi
  404f9a:	cmovb  edx,ecx
  404f9d:	mov    DWORD PTR [rbx+0x24],edx
  404fa0:	movzx  edx,WORD PTR [rbx+0xea]
  404fa7:	cmp    dx,WORD PTR [rbx+0xe8]
  404fae:	mov    QWORD PTR [rbx+0x18],rsi
  404fb2:	mov    DWORD PTR [rax+0x4],ecx
  404fb5:	jbe    404fbe <flatcc_builder_end_buffer@@Base+0xfe>
  404fb7:	mov    WORD PTR [rbx+0xe8],dx
  404fbe:	movzx  edx,WORD PTR [rax+0xc]
  404fc2:	sub    rax,0x24
  404fc6:	sub    DWORD PTR [rbx+0x104],0x1
  404fcd:	mov    QWORD PTR [rbx+0x30],rax
  404fd1:	mov    eax,ebp
  404fd3:	mov    WORD PTR [rbx+0xea],dx
  404fda:	add    rsp,0x8
  404fde:	pop    rbx
  404fdf:	pop    rbp
  404fe0:	ret    
  404fe1:	lea    rcx,[rip+0x5b48]        # 40ab30 <_IO_stdin_used@@Base+0xb30>
  404fe8:	lea    rsi,[rip+0x5171]        # 40a160 <_IO_stdin_used@@Base+0x160>
  404fef:	lea    rdi,[rip+0x51ea]        # 40a1e0 <_IO_stdin_used@@Base+0x1e0>
  404ff6:	mov    edx,0x346
  404ffb:	call   403070 <__assert_fail@plt>

0000000000405000 <flatcc_builder_start_struct@@Base>:
  405000:	push   r12
  405002:	push   rbp
  405003:	mov    rbp,rsi
  405006:	push   rbx
  405007:	movzx  esi,dx
  40500a:	mov    rbx,rdi
  40500d:	call   403fb0 <flatcc_builder_default_alloc@@Base+0x260>
  405012:	test   eax,eax
  405014:	jne    405090 <flatcc_builder_start_struct@@Base+0x90>
  405016:	mov    rcx,QWORD PTR [rbx+0x30]
  40501a:	mov    eax,0x2
  40501f:	mov    edi,DWORD PTR [rbx+0x70]
  405022:	mov    WORD PTR [rcx+0xe],ax
  405026:	mov    eax,DWORD PTR [rbx+0x28]
  405029:	mov    rdx,rax
  40502c:	add    rax,QWORD PTR [rbx+0x68]
  405030:	sub    edi,edx
  405032:	cmp    edi,0xfffffffc
  405035:	mov    edx,edi
  405037:	mov    QWORD PTR [rbx+0x18],rax
  40503b:	ja     405060 <flatcc_builder_start_struct@@Base+0x60>
  40503d:	mov    DWORD PTR [rbx+0x24],edi
  405040:	mov    r12d,DWORD PTR [rbx+0x20]
  405044:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40504b:	mov    rsi,r12
  40504e:	add    esi,ebp
  405050:	cmp    esi,edx
  405052:	mov    DWORD PTR [rbx+0x20],esi
  405055:	jae    405070 <flatcc_builder_start_struct@@Base+0x70>
  405057:	add    rax,r12
  40505a:	pop    rbx
  40505b:	pop    rbp
  40505c:	pop    r12
  40505e:	ret    
  40505f:	nop
  405060:	mov    DWORD PTR [rbx+0x24],0xfffffffc
  405067:	mov    edx,0xfffffffc
  40506c:	jmp    405040 <flatcc_builder_start_struct@@Base+0x40>
  40506e:	xchg   ax,ax
  405070:	add    esi,0x1
  405073:	mov    edx,0xfffffffc
  405078:	mov    rdi,rbx
  40507b:	call   403cf0 <_start@@Base+0xa50>
  405080:	test   eax,eax
  405082:	jne    405090 <flatcc_builder_start_struct@@Base+0x90>
  405084:	mov    rax,QWORD PTR [rbx+0x18]
  405088:	jmp    405057 <flatcc_builder_start_struct@@Base+0x57>
  40508a:	nop    WORD PTR [rax+rax*1+0x0]
  405090:	pop    rbx
  405091:	xor    eax,eax
  405093:	pop    rbp
  405094:	pop    r12
  405096:	ret    
  405097:	nop    WORD PTR [rax+rax*1+0x0]

00000000004050a0 <flatcc_builder_struct_edit@@Base>:
  4050a0:	mov    rax,QWORD PTR [rdi+0x18]
  4050a4:	ret    
  4050a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004050b0 <flatcc_builder_end_struct@@Base>:
  4050b0:	push   rbp
  4050b1:	push   rbx
  4050b2:	sub    rsp,0x8
  4050b6:	mov    rax,QWORD PTR [rdi+0x30]
  4050ba:	cmp    WORD PTR [rax+0xe],0x2
  4050bf:	jne    405167 <flatcc_builder_end_struct@@Base+0xb7>
  4050c5:	movzx  ecx,WORD PTR [rdi+0xea]
  4050cc:	mov    edx,DWORD PTR [rdi+0x20]
  4050cf:	mov    rbx,rdi
  4050d2:	mov    rsi,QWORD PTR [rdi+0x18]
  4050d6:	call   404c80 <flatcc_builder_create_struct@@Base>
  4050db:	test   eax,eax
  4050dd:	mov    ebp,eax
  4050df:	jne    4050f0 <flatcc_builder_end_struct@@Base+0x40>
  4050e1:	add    rsp,0x8
  4050e5:	mov    eax,ebp
  4050e7:	pop    rbx
  4050e8:	pop    rbp
  4050e9:	ret    
  4050ea:	nop    WORD PTR [rax+rax*1+0x0]
  4050f0:	mov    edx,DWORD PTR [rbx+0x20]
  4050f3:	mov    rdi,QWORD PTR [rbx+0x18]
  4050f7:	xor    esi,esi
  4050f9:	call   403080 <memset@plt>
  4050fe:	mov    rax,QWORD PTR [rbx+0x30]
  405102:	mov    edi,DWORD PTR [rbx+0x70]
  405105:	mov    esi,DWORD PTR [rax]
  405107:	mov    edx,DWORD PTR [rax+0x8]
  40510a:	mov    ecx,DWORD PTR [rax+0x4]
  40510d:	mov    DWORD PTR [rbx+0x20],edx
  405110:	mov    rdx,rsi
  405113:	mov    DWORD PTR [rbx+0x28],esi
  405116:	add    rsi,QWORD PTR [rbx+0x68]
  40511a:	sub    edi,edx
  40511c:	cmp    ecx,edi
  40511e:	mov    edx,edi
  405120:	cmovb  edx,ecx
  405123:	mov    DWORD PTR [rbx+0x24],edx
  405126:	movzx  edx,WORD PTR [rbx+0xea]
  40512d:	cmp    dx,WORD PTR [rbx+0xe8]
  405134:	mov    QWORD PTR [rbx+0x18],rsi
  405138:	mov    DWORD PTR [rax+0x4],ecx
  40513b:	jbe    405144 <flatcc_builder_end_struct@@Base+0x94>
  40513d:	mov    WORD PTR [rbx+0xe8],dx
  405144:	movzx  edx,WORD PTR [rax+0xc]
  405148:	sub    rax,0x24
  40514c:	sub    DWORD PTR [rbx+0x104],0x1
  405153:	mov    QWORD PTR [rbx+0x30],rax
  405157:	mov    eax,ebp
  405159:	mov    WORD PTR [rbx+0xea],dx
  405160:	add    rsp,0x8
  405164:	pop    rbx
  405165:	pop    rbp
  405166:	ret    
  405167:	lea    rcx,[rip+0x59a2]        # 40ab10 <_IO_stdin_used@@Base+0xb10>
  40516e:	lea    rsi,[rip+0x4feb]        # 40a160 <_IO_stdin_used@@Base+0x160>
  405175:	lea    rdi,[rip+0x5094]        # 40a210 <_IO_stdin_used@@Base+0x210>
  40517c:	mov    edx,0x368
  405181:	call   403070 <__assert_fail@plt>
  405186:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000405190 <flatcc_builder_extend_vector@@Base>:
  405190:	push   rbp
  405191:	push   rbx
  405192:	mov    eax,esi
  405194:	sub    rsp,0x8
  405198:	mov    rdx,QWORD PTR [rdi+0x30]
  40519c:	add    eax,DWORD PTR [rdx+0x14]
  40519f:	setb   cl
  4051a2:	cmp    DWORD PTR [rdx+0x18],eax
  4051a5:	jb     4051ed <flatcc_builder_extend_vector@@Base+0x5d>
  4051a7:	movzx  ecx,cl
  4051aa:	test   ecx,ecx
  4051ac:	jne    4051ed <flatcc_builder_extend_vector@@Base+0x5d>
  4051ae:	imul   esi,DWORD PTR [rdx+0x10]
  4051b2:	mov    DWORD PTR [rdx+0x14],eax
  4051b5:	mov    ebp,DWORD PTR [rdi+0x20]
  4051b8:	mov    rbx,rdi
  4051bb:	add    esi,ebp
  4051bd:	cmp    esi,DWORD PTR [rdi+0x24]
  4051c0:	mov    DWORD PTR [rdi+0x20],esi
  4051c3:	jae    4051d8 <flatcc_builder_extend_vector@@Base+0x48>
  4051c5:	mov    rax,rbp
  4051c8:	add    rax,QWORD PTR [rbx+0x18]
  4051cc:	add    rsp,0x8
  4051d0:	pop    rbx
  4051d1:	pop    rbp
  4051d2:	ret    
  4051d3:	nop    DWORD PTR [rax+rax*1+0x0]
  4051d8:	add    esi,0x1
  4051db:	mov    edx,0xfffffffc
  4051e0:	call   403cf0 <_start@@Base+0xa50>
  4051e5:	test   eax,eax
  4051e7:	je     4051c5 <flatcc_builder_extend_vector@@Base+0x35>
  4051e9:	xor    eax,eax
  4051eb:	jmp    4051cc <flatcc_builder_extend_vector@@Base+0x3c>
  4051ed:	call   403159 <posix_memalign@plt+0x79>
  4051f2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4051fd:	nop    DWORD PTR [rax]

0000000000405200 <flatcc_builder_vector_push@@Base>:
  405200:	push   r13
  405202:	push   r12
  405204:	push   rbp
  405205:	push   rbx
  405206:	sub    rsp,0x8
  40520a:	mov    rax,QWORD PTR [rdi+0x30]
  40520e:	cmp    WORD PTR [rax+0xe],0x4
  405213:	jne    405294 <flatcc_builder_vector_push@@Base+0x94>
  405215:	mov    edx,DWORD PTR [rax+0x14]
  405218:	cmp    edx,DWORD PTR [rax+0x18]
  40521b:	ja     405275 <flatcc_builder_vector_push@@Base+0x75>
  40521d:	add    edx,0x1
  405220:	mov    r12d,DWORD PTR [rax+0x10]
  405224:	mov    rbx,rdi
  405227:	mov    DWORD PTR [rax+0x14],edx
  40522a:	mov    ebp,DWORD PTR [rdi+0x20]
  40522d:	mov    r13,rsi
  405230:	mov    rcx,rbp
  405233:	add    ecx,r12d
  405236:	cmp    ecx,DWORD PTR [rdi+0x24]
  405239:	mov    DWORD PTR [rdi+0x20],ecx
  40523c:	jae    405260 <flatcc_builder_vector_push@@Base+0x60>
  40523e:	add    rbp,QWORD PTR [rbx+0x18]
  405242:	je     405252 <flatcc_builder_vector_push@@Base+0x52>
  405244:	mov    edx,r12d
  405247:	mov    rsi,r13
  40524a:	mov    rdi,rbp
  40524d:	call   4030b0 <memcpy@plt>
  405252:	add    rsp,0x8
  405256:	mov    rax,rbp
  405259:	pop    rbx
  40525a:	pop    rbp
  40525b:	pop    r12
  40525d:	pop    r13
  40525f:	ret    
  405260:	lea    esi,[rcx+0x1]
  405263:	mov    edx,0xfffffffc
  405268:	call   403cf0 <_start@@Base+0xa50>
  40526d:	test   eax,eax
  40526f:	je     40523e <flatcc_builder_vector_push@@Base+0x3e>
  405271:	xor    ebp,ebp
  405273:	jmp    405252 <flatcc_builder_vector_push@@Base+0x52>
  405275:	lea    rcx,[rip+0x5854]        # 40aad0 <_IO_stdin_used@@Base+0xad0>
  40527c:	lea    rsi,[rip+0x4edd]        # 40a160 <_IO_stdin_used@@Base+0x160>
  405283:	lea    rdi,[rip+0x4fe6]        # 40a270 <_IO_stdin_used@@Base+0x270>
  40528a:	mov    edx,0x38c
  40528f:	call   403070 <__assert_fail@plt>
  405294:	lea    rcx,[rip+0x5835]        # 40aad0 <_IO_stdin_used@@Base+0xad0>
  40529b:	lea    rsi,[rip+0x4ebe]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4052a2:	lea    rdi,[rip+0x4f97]        # 40a240 <_IO_stdin_used@@Base+0x240>
  4052a9:	mov    edx,0x38b
  4052ae:	call   403070 <__assert_fail@plt>
  4052b3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4052be:	xchg   ax,ax

00000000004052c0 <flatcc_builder_append_vector@@Base>:
  4052c0:	push   r13
  4052c2:	push   r12
  4052c4:	push   rbp
  4052c5:	push   rbx
  4052c6:	sub    rsp,0x8
  4052ca:	mov    rax,QWORD PTR [rdi+0x30]
  4052ce:	cmp    WORD PTR [rax+0xe],0x4
  4052d3:	jne    40534b <flatcc_builder_append_vector@@Base+0x8b>
  4052d5:	mov    r13,rsi
  4052d8:	mov    ecx,edx
  4052da:	xor    esi,esi
  4052dc:	add    ecx,DWORD PTR [rax+0x14]
  4052df:	setb   sil
  4052e3:	cmp    DWORD PTR [rax+0x18],ecx
  4052e6:	jb     405346 <flatcc_builder_append_vector@@Base+0x86>
  4052e8:	test   esi,esi
  4052ea:	jne    405346 <flatcc_builder_append_vector@@Base+0x86>
  4052ec:	mov    ebx,DWORD PTR [rax+0x10]
  4052ef:	mov    DWORD PTR [rax+0x14],ecx
  4052f2:	mov    rbp,rdi
  4052f5:	mov    r12d,DWORD PTR [rdi+0x20]
  4052f9:	imul   ebx,edx
  4052fc:	mov    rdx,r12
  4052ff:	add    edx,ebx
  405301:	cmp    edx,DWORD PTR [rdi+0x24]
  405304:	mov    DWORD PTR [rdi+0x20],edx
  405307:	jae    405330 <flatcc_builder_append_vector@@Base+0x70>
  405309:	add    r12,QWORD PTR [rbp+0x18]
  40530d:	je     40531c <flatcc_builder_append_vector@@Base+0x5c>
  40530f:	mov    edx,ebx
  405311:	mov    rsi,r13
  405314:	mov    rdi,r12
  405317:	call   4030b0 <memcpy@plt>
  40531c:	add    rsp,0x8
  405320:	mov    rax,r12
  405323:	pop    rbx
  405324:	pop    rbp
  405325:	pop    r12
  405327:	pop    r13
  405329:	ret    
  40532a:	nop    WORD PTR [rax+rax*1+0x0]
  405330:	lea    esi,[rdx+0x1]
  405333:	mov    edx,0xfffffffc
  405338:	call   403cf0 <_start@@Base+0xa50>
  40533d:	test   eax,eax
  40533f:	je     405309 <flatcc_builder_append_vector@@Base+0x49>
  405341:	xor    r12d,r12d
  405344:	jmp    40531c <flatcc_builder_append_vector@@Base+0x5c>
  405346:	call   403159 <posix_memalign@plt+0x79>
  40534b:	lea    rcx,[rip+0x575e]        # 40aab0 <_IO_stdin_used@@Base+0xab0>
  405352:	lea    rsi,[rip+0x4e07]        # 40a160 <_IO_stdin_used@@Base+0x160>
  405359:	lea    rdi,[rip+0x4ee0]        # 40a240 <_IO_stdin_used@@Base+0x240>
  405360:	mov    edx,0x393
  405365:	call   403070 <__assert_fail@plt>
  40536a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405370 <flatcc_builder_extend_offset_vector@@Base>:
  405370:	push   rbp
  405371:	push   rbx
  405372:	xor    edx,edx
  405374:	mov    ecx,esi
  405376:	sub    rsp,0x8
  40537a:	mov    rax,QWORD PTR [rdi+0x30]
  40537e:	add    ecx,DWORD PTR [rax+0x14]
  405381:	setb   dl
  405384:	test   edx,edx
  405386:	jne    4053cd <flatcc_builder_extend_offset_vector@@Base+0x5d>
  405388:	cmp    ecx,0x3fffffff
  40538e:	ja     4053cd <flatcc_builder_extend_offset_vector@@Base+0x5d>
  405390:	mov    DWORD PTR [rax+0x14],ecx
  405393:	mov    ebp,DWORD PTR [rdi+0x20]
  405396:	mov    rbx,rdi
  405399:	lea    eax,[rbp+rsi*4+0x0]
  40539d:	cmp    eax,DWORD PTR [rdi+0x24]
  4053a0:	mov    DWORD PTR [rdi+0x20],eax
  4053a3:	jae    4053b8 <flatcc_builder_extend_offset_vector@@Base+0x48>
  4053a5:	mov    rax,rbp
  4053a8:	add    rax,QWORD PTR [rbx+0x18]
  4053ac:	add    rsp,0x8
  4053b0:	pop    rbx
  4053b1:	pop    rbp
  4053b2:	ret    
  4053b3:	nop    DWORD PTR [rax+rax*1+0x0]
  4053b8:	lea    esi,[rax+0x1]
  4053bb:	mov    edx,0xfffffffc
  4053c0:	call   403cf0 <_start@@Base+0xa50>
  4053c5:	test   eax,eax
  4053c7:	je     4053a5 <flatcc_builder_extend_offset_vector@@Base+0x35>
  4053c9:	xor    eax,eax
  4053cb:	jmp    4053ac <flatcc_builder_extend_offset_vector@@Base+0x3c>
  4053cd:	call   403159 <posix_memalign@plt+0x79>
  4053d2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4053dd:	nop    DWORD PTR [rax]

00000000004053e0 <flatcc_builder_offset_vector_push@@Base>:
  4053e0:	push   r12
  4053e2:	push   rbp
  4053e3:	push   rbx
  4053e4:	mov    rdx,QWORD PTR [rdi+0x30]
  4053e8:	cmp    WORD PTR [rdx+0xe],0x5
  4053ed:	jne    405440 <flatcc_builder_offset_vector_push@@Base+0x60>
  4053ef:	mov    eax,DWORD PTR [rdx+0x14]
  4053f2:	cmp    eax,0x3fffffff
  4053f7:	je     405439 <flatcc_builder_offset_vector_push@@Base+0x59>
  4053f9:	add    eax,0x1
  4053fc:	mov    rbp,rdi
  4053ff:	mov    r12d,esi
  405402:	mov    DWORD PTR [rdx+0x14],eax
  405405:	mov    ebx,DWORD PTR [rdi+0x20]
  405408:	lea    edx,[rbx+0x4]
  40540b:	cmp    edx,DWORD PTR [rdi+0x24]
  40540e:	mov    DWORD PTR [rdi+0x20],edx
  405411:	jae    405428 <flatcc_builder_offset_vector_push@@Base+0x48>
  405413:	mov    rax,rbx
  405416:	add    rax,QWORD PTR [rbp+0x18]
  40541a:	je     405439 <flatcc_builder_offset_vector_push@@Base+0x59>
  40541c:	mov    DWORD PTR [rax],r12d
  40541f:	pop    rbx
  405420:	pop    rbp
  405421:	pop    r12
  405423:	ret    
  405424:	nop    DWORD PTR [rax+0x0]
  405428:	lea    esi,[rbx+0x5]
  40542b:	mov    edx,0xfffffffc
  405430:	call   403cf0 <_start@@Base+0xa50>
  405435:	test   eax,eax
  405437:	je     405413 <flatcc_builder_offset_vector_push@@Base+0x33>
  405439:	pop    rbx
  40543a:	xor    eax,eax
  40543c:	pop    rbp
  40543d:	pop    r12
  40543f:	ret    
  405440:	lea    rcx,[rip+0x5639]        # 40aa80 <_IO_stdin_used@@Base+0xa80>
  405447:	lea    rsi,[rip+0x4d12]        # 40a160 <_IO_stdin_used@@Base+0x160>
  40544e:	lea    rdi,[rip+0x4e5b]        # 40a2b0 <_IO_stdin_used@@Base+0x2b0>
  405455:	mov    edx,0x3a6
  40545a:	call   403070 <__assert_fail@plt>
  40545f:	nop

0000000000405460 <flatcc_builder_append_offset_vector@@Base>:
  405460:	push   r13
  405462:	push   r12
  405464:	push   rbp
  405465:	push   rbx
  405466:	sub    rsp,0x8
  40546a:	mov    rax,QWORD PTR [rdi+0x30]
  40546e:	cmp    WORD PTR [rax+0xe],0x5
  405473:	jne    4054eb <flatcc_builder_append_offset_vector@@Base+0x8b>
  405475:	mov    r13,rsi
  405478:	mov    ecx,edx
  40547a:	xor    esi,esi
  40547c:	add    ecx,DWORD PTR [rax+0x14]
  40547f:	setb   sil
  405483:	test   esi,esi
  405485:	jne    4054e6 <flatcc_builder_append_offset_vector@@Base+0x86>
  405487:	cmp    ecx,0x3fffffff
  40548d:	ja     4054e6 <flatcc_builder_append_offset_vector@@Base+0x86>
  40548f:	mov    DWORD PTR [rax+0x14],ecx
  405492:	mov    r12d,DWORD PTR [rdi+0x20]
  405496:	lea    ebx,[rdx*4+0x0]
  40549d:	mov    rbp,rdi
  4054a0:	mov    rdx,r12
  4054a3:	add    edx,ebx
  4054a5:	cmp    edx,DWORD PTR [rdi+0x24]
  4054a8:	mov    DWORD PTR [rdi+0x20],edx
  4054ab:	jae    4054d0 <flatcc_builder_append_offset_vector@@Base+0x70>
  4054ad:	add    r12,QWORD PTR [rbp+0x18]
  4054b1:	je     4054c0 <flatcc_builder_append_offset_vector@@Base+0x60>
  4054b3:	mov    edx,ebx
  4054b5:	mov    rsi,r13
  4054b8:	mov    rdi,r12
  4054bb:	call   4030b0 <memcpy@plt>
  4054c0:	add    rsp,0x8
  4054c4:	mov    rax,r12
  4054c7:	pop    rbx
  4054c8:	pop    rbp
  4054c9:	pop    r12
  4054cb:	pop    r13
  4054cd:	ret    
  4054ce:	xchg   ax,ax
  4054d0:	lea    esi,[rdx+0x1]
  4054d3:	mov    edx,0xfffffffc
  4054d8:	call   403cf0 <_start@@Base+0xa50>
  4054dd:	test   eax,eax
  4054df:	je     4054ad <flatcc_builder_append_offset_vector@@Base+0x4d>
  4054e1:	xor    r12d,r12d
  4054e4:	jmp    4054c0 <flatcc_builder_append_offset_vector@@Base+0x60>
  4054e6:	call   403159 <posix_memalign@plt+0x79>
  4054eb:	lea    rcx,[rip+0x554e]        # 40aa40 <_IO_stdin_used@@Base+0xa40>
  4054f2:	lea    rsi,[rip+0x4c67]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4054f9:	lea    rdi,[rip+0x4db0]        # 40a2b0 <_IO_stdin_used@@Base+0x2b0>
  405500:	mov    edx,0x3b4
  405505:	call   403070 <__assert_fail@plt>
  40550a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405510 <flatcc_builder_extend_string@@Base>:
  405510:	push   rbp
  405511:	push   rbx
  405512:	sub    rsp,0x8
  405516:	mov    rax,QWORD PTR [rdi+0x30]
  40551a:	cmp    WORD PTR [rax+0xe],0x6
  40551f:	jne    40556a <flatcc_builder_extend_string@@Base+0x5a>
  405521:	mov    edx,esi
  405523:	add    edx,DWORD PTR [rax+0x14]
  405526:	jb     405565 <flatcc_builder_extend_string@@Base+0x55>
  405528:	mov    DWORD PTR [rax+0x14],edx
  40552b:	mov    ebp,DWORD PTR [rdi+0x20]
  40552e:	mov    rbx,rdi
  405531:	add    esi,ebp
  405533:	cmp    esi,DWORD PTR [rdi+0x24]
  405536:	mov    DWORD PTR [rdi+0x20],esi
  405539:	jae    405550 <flatcc_builder_extend_string@@Base+0x40>
  40553b:	mov    rax,rbp
  40553e:	add    rax,QWORD PTR [rbx+0x18]
  405542:	add    rsp,0x8
  405546:	pop    rbx
  405547:	pop    rbp
  405548:	ret    
  405549:	nop    DWORD PTR [rax+0x0]
  405550:	add    esi,0x1
  405553:	mov    edx,0xfffffffc
  405558:	call   403cf0 <_start@@Base+0xa50>
  40555d:	test   eax,eax
  40555f:	je     40553b <flatcc_builder_extend_string@@Base+0x2b>
  405561:	xor    eax,eax
  405563:	jmp    405542 <flatcc_builder_extend_string@@Base+0x32>
  405565:	call   403159 <posix_memalign@plt+0x79>
  40556a:	lea    rcx,[rip+0x549f]        # 40aa10 <_IO_stdin_used@@Base+0xa10>
  405571:	lea    rsi,[rip+0x4be8]        # 40a160 <_IO_stdin_used@@Base+0x160>
  405578:	lea    rdi,[rip+0x4d69]        # 40a2e8 <_IO_stdin_used@@Base+0x2e8>
  40557f:	mov    edx,0x3bd
  405584:	call   403070 <__assert_fail@plt>
  405589:	nop    DWORD PTR [rax+0x0]

0000000000405590 <flatcc_builder_append_string@@Base>:
  405590:	push   r13
  405592:	push   r12
  405594:	push   rbp
  405595:	push   rbx
  405596:	sub    rsp,0x8
  40559a:	mov    rax,QWORD PTR [rdi+0x30]
  40559e:	cmp    WORD PTR [rax+0xe],0x6
  4055a3:	jne    40560b <flatcc_builder_append_string@@Base+0x7b>
  4055a5:	mov    rbp,rdx
  4055a8:	add    edx,DWORD PTR [rax+0x14]
  4055ab:	jb     405606 <flatcc_builder_append_string@@Base+0x76>
  4055ad:	mov    DWORD PTR [rax+0x14],edx
  4055b0:	mov    r12d,DWORD PTR [rdi+0x20]
  4055b4:	mov    rbx,rdi
  4055b7:	mov    r13,rsi
  4055ba:	mov    rdx,r12
  4055bd:	add    edx,ebp
  4055bf:	cmp    edx,DWORD PTR [rdi+0x24]
  4055c2:	mov    DWORD PTR [rdi+0x20],edx
  4055c5:	jae    4055f0 <flatcc_builder_append_string@@Base+0x60>
  4055c7:	add    r12,QWORD PTR [rbx+0x18]
  4055cb:	je     4055da <flatcc_builder_append_string@@Base+0x4a>
  4055cd:	mov    edx,ebp
  4055cf:	mov    rsi,r13
  4055d2:	mov    rdi,r12
  4055d5:	call   4030b0 <memcpy@plt>
  4055da:	add    rsp,0x8
  4055de:	mov    rax,r12
  4055e1:	pop    rbx
  4055e2:	pop    rbp
  4055e3:	pop    r12
  4055e5:	pop    r13
  4055e7:	ret    
  4055e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4055f0:	lea    esi,[rdx+0x1]
  4055f3:	mov    edx,0xfffffffc
  4055f8:	call   403cf0 <_start@@Base+0xa50>
  4055fd:	test   eax,eax
  4055ff:	je     4055c7 <flatcc_builder_append_string@@Base+0x37>
  405601:	xor    r12d,r12d
  405604:	jmp    4055da <flatcc_builder_append_string@@Base+0x4a>
  405606:	call   403159 <posix_memalign@plt+0x79>
  40560b:	lea    rcx,[rip+0x53de]        # 40a9f0 <_IO_stdin_used@@Base+0x9f0>
  405612:	lea    rsi,[rip+0x4b47]        # 40a160 <_IO_stdin_used@@Base+0x160>
  405619:	lea    rdi,[rip+0x4cc8]        # 40a2e8 <_IO_stdin_used@@Base+0x2e8>
  405620:	mov    edx,0x3c6
  405625:	call   403070 <__assert_fail@plt>
  40562a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405630 <flatcc_builder_append_string_str@@Base>:
  405630:	push   rbp
  405631:	push   rbx
  405632:	mov    rbp,rdi
  405635:	mov    rdi,rsi
  405638:	mov    rbx,rsi
  40563b:	sub    rsp,0x8
  40563f:	call   403050 <strlen@plt>
  405644:	add    rsp,0x8
  405648:	mov    rsi,rbx
  40564b:	mov    rdi,rbp
  40564e:	pop    rbx
  40564f:	pop    rbp
  405650:	mov    rdx,rax
  405653:	jmp    405590 <flatcc_builder_append_string@@Base>
  405658:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405660 <flatcc_builder_append_string_strn@@Base>:
  405660:	push   r12
  405662:	push   rbp
  405663:	mov    rbp,rsi
  405666:	push   rbx
  405667:	mov    r12,rdi
  40566a:	xor    esi,esi
  40566c:	mov    rdi,rbp
  40566f:	mov    rbx,rdx
  405672:	call   403090 <memchr@plt>
  405677:	mov    rdx,rax
  40567a:	mov    rsi,rbp
  40567d:	mov    rdi,r12
  405680:	sub    rdx,rbp
  405683:	test   rax,rax
  405686:	cmovne rbx,rdx
  40568a:	mov    rdx,rbx
  40568d:	pop    rbx
  40568e:	pop    rbp
  40568f:	pop    r12
  405691:	jmp    405590 <flatcc_builder_append_string@@Base>
  405696:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004056a0 <flatcc_builder_truncate_vector@@Base>:
  4056a0:	sub    rsp,0x8
  4056a4:	mov    rax,QWORD PTR [rdi+0x30]
  4056a8:	cmp    WORD PTR [rax+0xe],0x4
  4056ad:	jne    4056e3 <flatcc_builder_truncate_vector@@Base+0x43>
  4056af:	mov    ecx,DWORD PTR [rax+0x14]
  4056b2:	cmp    rcx,rsi
  4056b5:	mov    rdx,rcx
  4056b8:	jb     405702 <flatcc_builder_truncate_vector@@Base+0x62>
  4056ba:	sub    edx,esi
  4056bc:	imul   esi,DWORD PTR [rax+0x10]
  4056c0:	mov    DWORD PTR [rax+0x14],edx
  4056c3:	mov    eax,DWORD PTR [rdi+0x20]
  4056c6:	mov    rcx,QWORD PTR [rdi+0x18]
  4056ca:	sub    eax,esi
  4056cc:	mov    edx,esi
  4056ce:	xor    esi,esi
  4056d0:	mov    DWORD PTR [rdi+0x20],eax
  4056d3:	lea    rdi,[rcx+rax*1]
  4056d7:	call   403080 <memset@plt>
  4056dc:	xor    eax,eax
  4056de:	add    rsp,0x8
  4056e2:	ret    
  4056e3:	lea    rcx,[rip+0x52e6]        # 40a9d0 <_IO_stdin_used@@Base+0x9d0>
  4056ea:	lea    rsi,[rip+0x4a6f]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4056f1:	lea    rdi,[rip+0x4b48]        # 40a240 <_IO_stdin_used@@Base+0x240>
  4056f8:	mov    edx,0x3d9
  4056fd:	call   403070 <__assert_fail@plt>
  405702:	lea    rcx,[rip+0x52c7]        # 40a9d0 <_IO_stdin_used@@Base+0x9d0>
  405709:	lea    rsi,[rip+0x4a50]        # 40a160 <_IO_stdin_used@@Base+0x160>
  405710:	lea    rdi,[rip+0x4c01]        # 40a318 <_IO_stdin_used@@Base+0x318>
  405717:	mov    edx,0x3da
  40571c:	call   403070 <__assert_fail@plt>
  405721:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40572c:	nop    DWORD PTR [rax+0x0]

0000000000405730 <flatcc_builder_truncate_offset_vector@@Base>:
  405730:	sub    rsp,0x8
  405734:	mov    rax,QWORD PTR [rdi+0x30]
  405738:	cmp    WORD PTR [rax+0xe],0x5
  40573d:	jne    40576f <flatcc_builder_truncate_offset_vector@@Base+0x3f>
  40573f:	mov    edx,DWORD PTR [rax+0x14]
  405742:	cmp    edx,esi
  405744:	jb     40578e <flatcc_builder_truncate_offset_vector@@Base+0x5e>
  405746:	sub    edx,esi
  405748:	imul   esi,DWORD PTR [rax+0x10]
  40574c:	mov    DWORD PTR [rax+0x14],edx
  40574f:	mov    eax,DWORD PTR [rdi+0x20]
  405752:	mov    rcx,QWORD PTR [rdi+0x18]
  405756:	sub    eax,esi
  405758:	mov    edx,esi
  40575a:	xor    esi,esi
  40575c:	mov    DWORD PTR [rdi+0x20],eax
  40575f:	lea    rdi,[rcx+rax*1]
  405763:	call   403080 <memset@plt>
  405768:	xor    eax,eax
  40576a:	add    rsp,0x8
  40576e:	ret    
  40576f:	lea    rcx,[rip+0x522a]        # 40a9a0 <_IO_stdin_used@@Base+0x9a0>
  405776:	lea    rsi,[rip+0x49e3]        # 40a160 <_IO_stdin_used@@Base+0x160>
  40577d:	lea    rdi,[rip+0x4b2c]        # 40a2b0 <_IO_stdin_used@@Base+0x2b0>
  405784:	mov    edx,0x3e2
  405789:	call   403070 <__assert_fail@plt>
  40578e:	lea    rcx,[rip+0x520b]        # 40a9a0 <_IO_stdin_used@@Base+0x9a0>
  405795:	lea    rsi,[rip+0x49c4]        # 40a160 <_IO_stdin_used@@Base+0x160>
  40579c:	lea    rdi,[rip+0x4b9d]        # 40a340 <_IO_stdin_used@@Base+0x340>
  4057a3:	mov    edx,0x3e3
  4057a8:	call   403070 <__assert_fail@plt>
  4057ad:	nop    DWORD PTR [rax]

00000000004057b0 <flatcc_builder_truncate_string@@Base>:
  4057b0:	sub    rsp,0x8
  4057b4:	mov    rdx,QWORD PTR [rdi+0x30]
  4057b8:	cmp    WORD PTR [rdx+0xe],0x6
  4057bd:	jne    4057f0 <flatcc_builder_truncate_string@@Base+0x40>
  4057bf:	mov    ecx,DWORD PTR [rdx+0x14]
  4057c2:	cmp    rcx,rsi
  4057c5:	mov    rax,rcx
  4057c8:	jb     40580f <flatcc_builder_truncate_string@@Base+0x5f>
  4057ca:	sub    eax,esi
  4057cc:	mov    DWORD PTR [rdx+0x14],eax
  4057cf:	mov    eax,DWORD PTR [rdi+0x20]
  4057d2:	mov    rdx,QWORD PTR [rdi+0x18]
  4057d6:	sub    eax,esi
  4057d8:	mov    DWORD PTR [rdi+0x20],eax
  4057db:	lea    rdi,[rdx+rax*1]
  4057df:	mov    rdx,rsi
  4057e2:	xor    esi,esi
  4057e4:	call   403080 <memset@plt>
  4057e9:	xor    eax,eax
  4057eb:	add    rsp,0x8
  4057ef:	ret    
  4057f0:	lea    rcx,[rip+0x5189]        # 40a980 <_IO_stdin_used@@Base+0x980>
  4057f7:	lea    rsi,[rip+0x4962]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4057fe:	lea    rdi,[rip+0x4ae3]        # 40a2e8 <_IO_stdin_used@@Base+0x2e8>
  405805:	mov    edx,0x3eb
  40580a:	call   403070 <__assert_fail@plt>
  40580f:	lea    rcx,[rip+0x516a]        # 40a980 <_IO_stdin_used@@Base+0x980>
  405816:	lea    rsi,[rip+0x4943]        # 40a160 <_IO_stdin_used@@Base+0x160>
  40581d:	lea    rdi,[rip+0x4b5c]        # 40a380 <_IO_stdin_used@@Base+0x380>
  405824:	mov    edx,0x3ec
  405829:	call   403070 <__assert_fail@plt>
  40582e:	xchg   ax,ax

0000000000405830 <flatcc_builder_start_vector@@Base>:
  405830:	push   r12
  405832:	cmp    dx,0x4
  405836:	push   rbp
  405837:	mov    rbp,rsi
  40583a:	mov    esi,0x4
  40583f:	push   rbx
  405840:	cmovb  edx,esi
  405843:	mov    rbx,rdi
  405846:	mov    r12,rcx
  405849:	movzx  esi,dx
  40584c:	call   403fb0 <flatcc_builder_default_alloc@@Base+0x260>
  405851:	test   eax,eax
  405853:	jne    4058a0 <flatcc_builder_start_vector@@Base+0x70>
  405855:	mov    rsi,QWORD PTR [rbx+0x30]
  405859:	mov    edx,0x4
  40585e:	mov    DWORD PTR [rsi+0x10],ebp
  405861:	mov    DWORD PTR [rsi+0x14],0x0
  405868:	mov    DWORD PTR [rsi+0x18],r12d
  40586c:	mov    WORD PTR [rsi+0xe],dx
  405870:	mov    edx,DWORD PTR [rbx+0x28]
  405873:	mov    rcx,rdx
  405876:	add    rdx,QWORD PTR [rbx+0x68]
  40587a:	mov    QWORD PTR [rbx+0x18],rdx
  40587e:	mov    edx,DWORD PTR [rbx+0x70]
  405881:	sub    edx,ecx
  405883:	mov    ecx,0xfffffffc
  405888:	cmp    edx,ecx
  40588a:	cmova  edx,ecx
  40588d:	mov    DWORD PTR [rbx+0x24],edx
  405890:	mov    DWORD PTR [rsi+0x4],ecx
  405893:	pop    rbx
  405894:	pop    rbp
  405895:	pop    r12
  405897:	ret    
  405898:	nop    DWORD PTR [rax+rax*1+0x0]
  4058a0:	mov    eax,0xffffffff
  4058a5:	jmp    405893 <flatcc_builder_start_vector@@Base+0x63>
  4058a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004058b0 <flatcc_builder_start_offset_vector@@Base>:
  4058b0:	push   rbx
  4058b1:	mov    esi,0x4
  4058b6:	mov    rbx,rdi
  4058b9:	call   403fb0 <flatcc_builder_default_alloc@@Base+0x260>
  4058be:	test   eax,eax
  4058c0:	jne    405908 <flatcc_builder_start_offset_vector@@Base+0x58>
  4058c2:	mov    rcx,QWORD PTR [rbx+0x30]
  4058c6:	mov    edx,0x5
  4058cb:	mov    DWORD PTR [rcx+0x10],0x4
  4058d2:	mov    DWORD PTR [rcx+0x14],0x0
  4058d9:	mov    WORD PTR [rcx+0xe],dx
  4058dd:	mov    edx,DWORD PTR [rbx+0x28]
  4058e0:	mov    rsi,rdx
  4058e3:	add    rdx,QWORD PTR [rbx+0x68]
  4058e7:	mov    QWORD PTR [rbx+0x18],rdx
  4058eb:	mov    edx,DWORD PTR [rbx+0x70]
  4058ee:	sub    edx,esi
  4058f0:	mov    esi,0xfffffffc
  4058f5:	cmp    edx,esi
  4058f7:	cmova  edx,esi
  4058fa:	mov    DWORD PTR [rbx+0x24],edx
  4058fd:	mov    DWORD PTR [rcx+0x4],esi
  405900:	pop    rbx
  405901:	ret    
  405902:	nop    WORD PTR [rax+rax*1+0x0]
  405908:	mov    eax,0xffffffff
  40590d:	pop    rbx
  40590e:	ret    
  40590f:	nop

0000000000405910 <flatcc_builder_start_string@@Base>:
  405910:	push   rbx
  405911:	mov    esi,0x1
  405916:	mov    rbx,rdi
  405919:	call   403fb0 <flatcc_builder_default_alloc@@Base+0x260>
  40591e:	test   eax,eax
  405920:	jne    405968 <flatcc_builder_start_string@@Base+0x58>
  405922:	mov    rcx,QWORD PTR [rbx+0x30]
  405926:	mov    edx,0x6
  40592b:	mov    DWORD PTR [rcx+0x10],0x1
  405932:	mov    DWORD PTR [rcx+0x14],0x0
  405939:	mov    WORD PTR [rcx+0xe],dx
  40593d:	mov    edx,DWORD PTR [rbx+0x28]
  405940:	mov    rsi,rdx
  405943:	add    rdx,QWORD PTR [rbx+0x68]
  405947:	mov    QWORD PTR [rbx+0x18],rdx
  40594b:	mov    edx,DWORD PTR [rbx+0x70]
  40594e:	sub    edx,esi
  405950:	mov    esi,0xfffffffc
  405955:	cmp    edx,esi
  405957:	cmova  edx,esi
  40595a:	mov    DWORD PTR [rbx+0x24],edx
  40595d:	mov    DWORD PTR [rcx+0x4],esi
  405960:	pop    rbx
  405961:	ret    
  405962:	nop    WORD PTR [rax+rax*1+0x0]
  405968:	mov    eax,0xffffffff
  40596d:	pop    rbx
  40596e:	ret    
  40596f:	nop

0000000000405970 <flatcc_builder_reserve_table@@Base>:
  405970:	test   esi,esi
  405972:	push   r12
  405974:	push   rbp
  405975:	push   rbx
  405976:	js     405a2f <flatcc_builder_reserve_table@@Base+0xbf>
  40597c:	mov    rax,QWORD PTR [rdi+0x30]
  405980:	lea    r12d,[rsi+rsi*1+0x4]
  405985:	mov    rbx,rdi
  405988:	movzx  edx,WORD PTR [rax+0x1c]
  40598c:	mov    eax,DWORD PTR [rax+0x10]
  40598f:	lea    ebp,[rax+rdx*2]
  405992:	mov    edx,r12d
  405995:	add    rdx,rbp
  405998:	cmp    rdx,QWORD PTR [rdi+0x60]
  40599c:	ja     4059e0 <flatcc_builder_reserve_table@@Base+0x70>
  40599e:	add    rbp,QWORD PTR [rbx+0x58]
  4059a2:	je     405a20 <flatcc_builder_reserve_table@@Base+0xb0>
  4059a4:	mov    rax,QWORD PTR [rbx+0x30]
  4059a8:	add    rbp,0x4
  4059ac:	lea    edx,[r12-0x3]
  4059b1:	mov    QWORD PTR [rbx+0x8],rbp
  4059b5:	mov    ebp,DWORD PTR [rax+0x14]
  4059b8:	add    rdx,rbp
  4059bb:	cmp    rdx,QWORD PTR [rbx+0x90]
  4059c2:	ja     405a00 <flatcc_builder_reserve_table@@Base+0x90>
  4059c4:	add    rbp,QWORD PTR [rbx+0x88]
  4059cb:	xor    eax,eax
  4059cd:	test   rbp,rbp
  4059d0:	mov    QWORD PTR [rbx],rbp
  4059d3:	sete   al
  4059d6:	neg    eax
  4059d8:	pop    rbx
  4059d9:	pop    rbp
  4059da:	pop    r12
  4059dc:	ret    
  4059dd:	nop    DWORD PTR [rax]
  4059e0:	lea    rsi,[rdi+0x58]
  4059e4:	xor    r8d,r8d
  4059e7:	mov    rdi,QWORD PTR [rdi+0x40]
  4059eb:	mov    ecx,0x1
  4059f0:	call   QWORD PTR [rbx+0x50]
  4059f3:	test   eax,eax
  4059f5:	je     40599e <flatcc_builder_reserve_table@@Base+0x2e>
  4059f7:	call   4030f0 <posix_memalign@plt+0x10>
  4059fc:	nop    DWORD PTR [rax+0x0]
  405a00:	xor    ecx,ecx
  405a02:	lea    rsi,[rbx+0x88]
  405a09:	mov    rdi,QWORD PTR [rbx+0x40]
  405a0d:	mov    r8d,0x3
  405a13:	call   QWORD PTR [rbx+0x50]
  405a16:	test   eax,eax
  405a18:	je     4059c4 <flatcc_builder_reserve_table@@Base+0x54>
  405a1a:	jmp    4059f7 <flatcc_builder_reserve_table@@Base+0x87>
  405a1c:	nop    DWORD PTR [rax+0x0]
  405a20:	mov    QWORD PTR [rbx+0x8],0x0
  405a28:	mov    eax,0xffffffff
  405a2d:	jmp    4059d8 <flatcc_builder_reserve_table@@Base+0x68>
  405a2f:	lea    rcx,[rip+0x4f2a]        # 40a960 <_IO_stdin_used@@Base+0x960>
  405a36:	lea    rsi,[rip+0x4723]        # 40a160 <_IO_stdin_used@@Base+0x160>
  405a3d:	lea    rdi,[rip+0x4b0f]        # 40a553 <_IO_stdin_used@@Base+0x553>
  405a44:	mov    edx,0x429
  405a49:	call   403070 <__assert_fail@plt>
  405a4e:	xchg   ax,ax

0000000000405a50 <flatcc_builder_start_table@@Base>:
  405a50:	push   r13
  405a52:	push   r12
  405a54:	mov    r12d,esi
  405a57:	push   rbp
  405a58:	push   rbx
  405a59:	mov    esi,0x4
  405a5e:	mov    rbx,rdi
  405a61:	sub    rsp,0x8
  405a65:	call   403fb0 <flatcc_builder_default_alloc@@Base+0x260>
  405a6a:	test   eax,eax
  405a6c:	jne    405ba0 <flatcc_builder_start_table@@Base+0x150>
  405a72:	mov    rcx,QWORD PTR [rbx+0x8]
  405a76:	mov    ebp,eax
  405a78:	mov    rax,QWORD PTR [rbx+0x58]
  405a7c:	mov    rdx,QWORD PTR [rbx+0x30]
  405a80:	xor    edi,edi
  405a82:	mov    r8d,0x3
  405a88:	sub    rcx,rax
  405a8b:	mov    DWORD PTR [rdx+0x10],ecx
  405a8e:	mov    rsi,QWORD PTR [rbx]
  405a91:	sub    rsi,QWORD PTR [rbx+0x88]
  405a98:	mov    DWORD PTR [rdx+0x14],esi
  405a9b:	mov    esi,DWORD PTR [rbx+0x14]
  405a9e:	mov    DWORD PTR [rdx+0x18],esi
  405aa1:	movzx  esi,WORD PTR [rbx+0x10]
  405aa5:	mov    WORD PTR [rdx+0x1c],si
  405aa9:	lea    r13d,[rcx+rsi*2]
  405aad:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  405ab4:	mov    WORD PTR [rbx+0x10],di
  405ab8:	mov    WORD PTR [rdx+0xe],r8w
  405abd:	lea    edx,[r12+r12*1+0x4]
  405ac2:	add    rdx,r13
  405ac5:	cmp    rdx,QWORD PTR [rbx+0x60]
  405ac9:	ja     405b48 <flatcc_builder_start_table@@Base+0xf8>
  405acb:	add    rax,r13
  405ace:	je     405b98 <flatcc_builder_start_table@@Base+0x148>
  405ad4:	add    rax,0x4
  405ad8:	lea    edx,[r12+r12*1+0x1]
  405add:	mov    QWORD PTR [rbx+0x8],rax
  405ae1:	mov    rax,QWORD PTR [rbx+0x30]
  405ae5:	mov    r13d,DWORD PTR [rax+0x14]
  405ae9:	add    rdx,r13
  405aec:	cmp    rdx,QWORD PTR [rbx+0x90]
  405af3:	ja     405b70 <flatcc_builder_start_table@@Base+0x120>
  405af5:	add    r13,QWORD PTR [rbx+0x88]
  405afc:	test   r13,r13
  405aff:	mov    QWORD PTR [rbx],r13
  405b02:	je     405ba0 <flatcc_builder_start_table@@Base+0x150>
  405b08:	mov    eax,DWORD PTR [rbx+0x28]
  405b0b:	mov    rdx,rax
  405b0e:	add    rax,QWORD PTR [rbx+0x68]
  405b12:	mov    QWORD PTR [rbx+0x18],rax
  405b16:	mov    eax,DWORD PTR [rbx+0x70]
  405b19:	sub    eax,edx
  405b1b:	mov    edx,0xfffc
  405b20:	cmp    eax,0xfffc
  405b25:	cmova  eax,edx
  405b28:	mov    DWORD PTR [rbx+0x24],eax
  405b2b:	mov    rax,QWORD PTR [rbx+0x30]
  405b2f:	mov    DWORD PTR [rax+0x4],0xfffc
  405b36:	add    rsp,0x8
  405b3a:	mov    eax,ebp
  405b3c:	pop    rbx
  405b3d:	pop    rbp
  405b3e:	pop    r12
  405b40:	pop    r13
  405b42:	ret    
  405b43:	nop    DWORD PTR [rax+rax*1+0x0]
  405b48:	xor    r8d,r8d
  405b4b:	lea    rsi,[rbx+0x58]
  405b4f:	mov    rdi,QWORD PTR [rbx+0x40]
  405b53:	mov    ecx,0x1
  405b58:	call   QWORD PTR [rbx+0x50]
  405b5b:	test   eax,eax
  405b5d:	jne    405b8e <flatcc_builder_start_table@@Base+0x13e>
  405b5f:	mov    rax,QWORD PTR [rbx+0x58]
  405b63:	jmp    405acb <flatcc_builder_start_table@@Base+0x7b>
  405b68:	nop    DWORD PTR [rax+rax*1+0x0]
  405b70:	xor    ecx,ecx
  405b72:	lea    rsi,[rbx+0x88]
  405b79:	mov    rdi,QWORD PTR [rbx+0x40]
  405b7d:	mov    r8d,0x3
  405b83:	call   QWORD PTR [rbx+0x50]
  405b86:	test   eax,eax
  405b88:	je     405af5 <flatcc_builder_start_table@@Base+0xa5>
  405b8e:	call   4030f0 <posix_memalign@plt+0x10>
  405b93:	nop    DWORD PTR [rax+rax*1+0x0]
  405b98:	mov    QWORD PTR [rbx+0x8],0x0
  405ba0:	add    rsp,0x8
  405ba4:	mov    ebp,0xffffffff
  405ba9:	pop    rbx
  405baa:	mov    eax,ebp
  405bac:	pop    rbp
  405bad:	pop    r12
  405baf:	pop    r13
  405bb1:	ret    
  405bb2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  405bbd:	nop    DWORD PTR [rax]

0000000000405bc0 <flatcc_builder_create_vtable@@Base>:
  405bc0:	push   rbp
  405bc1:	push   rbx
  405bc2:	mov    rbp,rdi
  405bc5:	sub    rsp,0xa8
  405bcc:	mov    rax,QWORD PTR fs:0x28
  405bd5:	mov    QWORD PTR [rsp+0x98],rax
  405bdd:	xor    eax,eax
  405bdf:	test   dx,dx
  405be2:	mov    QWORD PTR [rsp],0x0
  405bea:	mov    DWORD PTR [rsp+0x8],0x0
  405bf2:	je     405c80 <flatcc_builder_create_vtable@@Base+0xc0>
  405bf8:	mov    QWORD PTR [rsp+0x10],rsi
  405bfd:	mov    esi,DWORD PTR [rdi+0x100]
  405c03:	movzx  r8d,dx
  405c07:	mov    QWORD PTR [rsp],r8
  405c0b:	mov    QWORD PTR [rsp+0x18],r8
  405c10:	movzx  edx,dx
  405c13:	mov    DWORD PTR [rsp+0x8],0x1
  405c1b:	test   esi,esi
  405c1d:	je     405cb8 <flatcc_builder_create_vtable@@Base+0xf8>
  405c23:	mov    eax,DWORD PTR [rbp+0xf0]
  405c29:	mov    ebx,eax
  405c2b:	sub    ebx,edx
  405c2d:	cmp    eax,ebx
  405c2f:	jle    405c94 <flatcc_builder_create_vtable@@Base+0xd4>
  405c31:	lea    rsi,[rsp+0x10]
  405c36:	mov    rdi,QWORD PTR [rbp+0x38]
  405c3a:	mov    ecx,ebx
  405c3c:	mov    edx,DWORD PTR [rsp+0x8]
  405c40:	call   QWORD PTR [rbp+0x48]
  405c43:	test   eax,eax
  405c45:	jne    405d10 <flatcc_builder_create_vtable@@Base+0x150>
  405c4b:	cmp    ebx,0x1
  405c4e:	mov    DWORD PTR [rbp+0xf0],ebx
  405c54:	sbb    ebx,0xffffffff
  405c57:	mov    rcx,QWORD PTR [rsp+0x98]
  405c5f:	xor    rcx,QWORD PTR fs:0x28
  405c68:	mov    eax,ebx
  405c6a:	jne    405d0b <flatcc_builder_create_vtable@@Base+0x14b>
  405c70:	add    rsp,0xa8
  405c77:	pop    rbx
  405c78:	pop    rbp
  405c79:	ret    
  405c7a:	nop    WORD PTR [rax+rax*1+0x0]
  405c80:	mov    edx,DWORD PTR [rdi+0x100]
  405c86:	test   edx,edx
  405c88:	jne    405c94 <flatcc_builder_create_vtable@@Base+0xd4>
  405c8a:	mov    eax,DWORD PTR [rdi+0x124]
  405c90:	test   eax,eax
  405c92:	je     405d00 <flatcc_builder_create_vtable@@Base+0x140>
  405c94:	lea    rcx,[rip+0x4ef5]        # 40ab90 <_IO_stdin_used@@Base+0xb90>
  405c9b:	lea    rsi,[rip+0x44be]        # 40a160 <_IO_stdin_used@@Base+0x160>
  405ca2:	lea    rdi,[rip+0x484e]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  405ca9:	mov    edx,0x287
  405cae:	call   403070 <__assert_fail@plt>
  405cb3:	nop    DWORD PTR [rax+rax*1+0x0]
  405cb8:	mov    ecx,DWORD PTR [rdi+0x124]
  405cbe:	test   ecx,ecx
  405cc0:	jne    405c23 <flatcc_builder_create_vtable@@Base+0x63>
  405cc6:	mov    ebx,DWORD PTR [rdi+0xf4]
  405ccc:	add    edx,ebx
  405cce:	cmp    ebx,edx
  405cd0:	mov    DWORD PTR [rdi+0xf4],edx
  405cd6:	jg     405d34 <flatcc_builder_create_vtable@@Base+0x174>
  405cd8:	lea    rsi,[rsp+0x10]
  405cdd:	mov    rdi,QWORD PTR [rbp+0x38]
  405ce1:	mov    ecx,ebx
  405ce3:	mov    edx,DWORD PTR [rsp+0x8]
  405ce7:	call   QWORD PTR [rbp+0x48]
  405cea:	test   eax,eax
  405cec:	jne    405d15 <flatcc_builder_create_vtable@@Base+0x155>
  405cee:	add    ebx,0x1
  405cf1:	jmp    405c57 <flatcc_builder_create_vtable@@Base+0x97>
  405cf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405d00:	mov    ebx,DWORD PTR [rbp+0xf4]
  405d06:	xor    r8d,r8d
  405d09:	jmp    405cd8 <flatcc_builder_create_vtable@@Base+0x118>
  405d0b:	call   403060 <__stack_chk_fail@plt>
  405d10:	call   403136 <posix_memalign@plt+0x56>
  405d15:	lea    rcx,[rip+0x4e84]        # 40aba0 <_IO_stdin_used@@Base+0xba0>
  405d1c:	lea    rsi,[rip+0x443d]        # 40a160 <_IO_stdin_used@@Base+0x160>
  405d23:	lea    rdi,[rip+0x47cd]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  405d2a:	mov    edx,0x2a5
  405d2f:	call   403070 <__assert_fail@plt>
  405d34:	call   403113 <posix_memalign@plt+0x33>
  405d39:	nop    DWORD PTR [rax+0x0]

0000000000405d40 <flatcc_builder_create_cached_vtable@@Base>:
  405d40:	push   r15
  405d42:	push   r14
  405d44:	mov    r15,rdi
  405d47:	push   r13
  405d49:	push   r12
  405d4b:	movzx  r14d,dx
  405d4f:	push   rbp
  405d50:	push   rbx
  405d51:	mov    ebp,ecx
  405d53:	sub    rsp,0x38
  405d57:	mov    rbx,QWORD PTR [rdi+0xd8]
  405d5e:	mov    QWORD PTR [rsp+0x10],rsi
  405d63:	mov    DWORD PTR [rsp+0x2c],edx
  405d67:	test   rbx,rbx
  405d6a:	je     405ef8 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
  405d70:	mov    eax,0x20
  405d75:	sub    eax,ebx
  405d77:	shrx   ebp,ebp,eax
  405d7c:	mov    rax,QWORD PTR [r15+0xa8]
  405d83:	lea    r12,[rax+rbp*4]
  405d87:	test   r12,r12
  405d8a:	je     405ee0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405d90:	mov    ebp,DWORD PTR [r12]
  405d94:	test   ebp,ebp
  405d96:	je     406000 <flatcc_builder_create_cached_vtable@@Base+0x2c0>
  405d9c:	movzx  eax,r14w
  405da0:	mov    r11,QWORD PTR [r15+0xb8]
  405da7:	mov    r8,QWORD PTR [r15+0x78]
  405dab:	mov    r13,r12
  405dae:	mov    QWORD PTR [rsp+0x20],0x0
  405db7:	mov    QWORD PTR [rsp+0x18],rax
  405dbc:	jmp    405dcb <flatcc_builder_create_cached_vtable@@Base+0x8b>
  405dbe:	xchg   ax,ax
  405dc0:	mov    ebp,DWORD PTR [rbx+0xc]
  405dc3:	lea    r13,[rbx+0xc]
  405dc7:	test   ebp,ebp
  405dc9:	je     405e28 <flatcc_builder_create_cached_vtable@@Base+0xe8>
  405dcb:	mov    ebx,ebp
  405dcd:	add    rbx,r11
  405dd0:	mov    esi,DWORD PTR [rbx+0x8]
  405dd3:	add    rsi,r8
  405dd6:	cmp    WORD PTR [rsi],r14w
  405dda:	jne    405dc0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  405ddc:	mov    rdx,QWORD PTR [rsp+0x18]
  405de1:	mov    rdi,QWORD PTR [rsp+0x10]
  405de6:	mov    QWORD PTR [rsp+0x8],r8
  405deb:	mov    QWORD PTR [rsp],r11
  405def:	call   4030a0 <memcmp@plt>
  405df4:	test   eax,eax
  405df6:	mov    r11,QWORD PTR [rsp]
  405dfa:	mov    r8,QWORD PTR [rsp+0x8]
  405dff:	jne    405dc0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  405e01:	mov    eax,DWORD PTR [r15+0x100]
  405e08:	cmp    DWORD PTR [rbx+0x4],eax
  405e0b:	je     405eb0 <flatcc_builder_create_cached_vtable@@Base+0x170>
  405e11:	mov    ebp,DWORD PTR [rbx+0xc]
  405e14:	lea    r13,[rbx+0xc]
  405e18:	mov    QWORD PTR [rsp+0x20],rbx
  405e1d:	test   ebp,ebp
  405e1f:	jne    405dcb <flatcc_builder_create_cached_vtable@@Base+0x8b>
  405e21:	nop    DWORD PTR [rax+0x0]
  405e28:	mov    ebx,DWORD PTR [r15+0xe4]
  405e2f:	lea    rdx,[rbx+0x10]
  405e33:	cmp    rdx,QWORD PTR [r15+0xc0]
  405e3a:	ja     405fd8 <flatcc_builder_create_cached_vtable@@Base+0x298>
  405e40:	add    rbx,QWORD PTR [r15+0xb8]
  405e47:	je     405ee0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405e4d:	mov    eax,DWORD PTR [r15+0xe4]
  405e54:	movzx  ebp,WORD PTR [rsp+0x2c]
  405e59:	mov    rdi,r15
  405e5c:	mov    rsi,QWORD PTR [rsp+0x10]
  405e61:	lea    edx,[rax+0x10]
  405e64:	mov    DWORD PTR [r15+0xe4],edx
  405e6b:	mov    edx,DWORD PTR [r15+0x100]
  405e72:	mov    DWORD PTR [rbx+0x4],edx
  405e75:	mov    edx,DWORD PTR [r12]
  405e79:	mov    DWORD PTR [rbx+0xc],edx
  405e7c:	mov    DWORD PTR [r12],eax
  405e80:	mov    edx,ebp
  405e82:	call   405bc0 <flatcc_builder_create_vtable@@Base>
  405e87:	test   eax,eax
  405e89:	mov    DWORD PTR [rbx],eax
  405e8b:	je     405ee0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405e8d:	mov    rdi,QWORD PTR [rsp+0x20]
  405e92:	test   rdi,rdi
  405e95:	je     40600e <flatcc_builder_create_cached_vtable@@Base+0x2ce>
  405e9b:	mov    edx,DWORD PTR [rdi+0x8]
  405e9e:	mov    DWORD PTR [rbx+0x8],edx
  405ea1:	add    rsp,0x38
  405ea5:	pop    rbx
  405ea6:	pop    rbp
  405ea7:	pop    r12
  405ea9:	pop    r13
  405eab:	pop    r14
  405ead:	pop    r15
  405eaf:	ret    
  405eb0:	cmp    r12,r13
  405eb3:	je     405ec7 <flatcc_builder_create_cached_vtable@@Base+0x187>
  405eb5:	mov    eax,DWORD PTR [rbx+0xc]
  405eb8:	mov    DWORD PTR [r13+0x0],eax
  405ebc:	mov    eax,DWORD PTR [r12]
  405ec0:	mov    DWORD PTR [rbx+0xc],eax
  405ec3:	mov    DWORD PTR [r12],ebp
  405ec7:	mov    eax,DWORD PTR [rbx]
  405ec9:	add    rsp,0x38
  405ecd:	pop    rbx
  405ece:	pop    rbp
  405ecf:	pop    r12
  405ed1:	pop    r13
  405ed3:	pop    r14
  405ed5:	pop    r15
  405ed7:	ret    
  405ed8:	nop    DWORD PTR [rax+rax*1+0x0]
  405ee0:	add    rsp,0x38
  405ee4:	xor    eax,eax
  405ee6:	pop    rbx
  405ee7:	pop    rbp
  405ee8:	pop    r12
  405eea:	pop    r13
  405eec:	pop    r14
  405eee:	pop    r15
  405ef0:	ret    
  405ef1:	nop    DWORD PTR [rax+0x0]
  405ef8:	mov    eax,DWORD PTR [rdi+0xe4]
  405efe:	lea    r12,[rdi+0xa8]
  405f05:	test   eax,eax
  405f07:	jne    40609f <flatcc_builder_create_cached_vtable@@Base+0x35f>
  405f0d:	cmp    QWORD PTR [rdi+0xc0],0xf
  405f15:	jbe    405fa8 <flatcc_builder_create_cached_vtable@@Base+0x268>
  405f1b:	cmp    QWORD PTR [r15+0xb8],0x0
  405f23:	je     405ee0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405f25:	mov    DWORD PTR [r15+0xe4],0x10
  405f30:	mov    rdi,QWORD PTR [r15+0x40]
  405f34:	mov    r8d,0x5
  405f3a:	mov    ecx,0x1
  405f3f:	mov    edx,0x100
  405f44:	mov    rsi,r12
  405f47:	call   QWORD PTR [r15+0x50]
  405f4b:	test   eax,eax
  405f4d:	jne    405ee0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405f4f:	mov    rcx,QWORD PTR [r15+0xb0]
  405f56:	mov    eax,0x100
  405f5b:	jmp    405f63 <flatcc_builder_create_cached_vtable@@Base+0x223>
  405f5d:	nop    DWORD PTR [rax]
  405f60:	mov    rax,rdx
  405f63:	lea    rdx,[rax+rax*1]
  405f67:	cmp    rdx,rcx
  405f6a:	jbe    405f60 <flatcc_builder_create_cached_vtable@@Base+0x220>
  405f6c:	shr    rax,0x2
  405f70:	cmp    rax,0x1
  405f74:	jbe    406068 <flatcc_builder_create_cached_vtable@@Base+0x328>
  405f7a:	mov    esi,0x1
  405f7f:	nop
  405f80:	add    rbx,0x1
  405f84:	shlx   rdx,rsi,rbx
  405f89:	cmp    rax,rdx
  405f8c:	ja     405f80 <flatcc_builder_create_cached_vtable@@Base+0x240>
  405f8e:	mov    eax,0x20
  405f93:	sub    eax,ebx
  405f95:	mov    QWORD PTR [r15+0xd8],rbx
  405f9c:	jmp    405d77 <flatcc_builder_create_cached_vtable@@Base+0x37>
  405fa1:	nop    DWORD PTR [rax+0x0]
  405fa8:	lea    rsi,[rdi+0xb8]
  405faf:	xor    ecx,ecx
  405fb1:	mov    rdi,QWORD PTR [rdi+0x40]
  405fb5:	mov    r8d,0x6
  405fbb:	mov    edx,0x10
  405fc0:	call   QWORD PTR [r15+0x50]
  405fc4:	test   eax,eax
  405fc6:	je     405f1b <flatcc_builder_create_cached_vtable@@Base+0x1db>
  405fcc:	jmp    40608a <flatcc_builder_create_cached_vtable@@Base+0x34a>
  405fd1:	nop    DWORD PTR [rax+0x0]
  405fd8:	xor    ecx,ecx
  405fda:	lea    rsi,[r15+0xb8]
  405fe1:	mov    rdi,QWORD PTR [r15+0x40]
  405fe5:	mov    r8d,0x6
  405feb:	call   QWORD PTR [r15+0x50]
  405fef:	test   eax,eax
  405ff1:	je     405e40 <flatcc_builder_create_cached_vtable@@Base+0x100>
  405ff7:	jmp    40608a <flatcc_builder_create_cached_vtable@@Base+0x34a>
  405ffc:	nop    DWORD PTR [rax+0x0]
  406000:	mov    QWORD PTR [rsp+0x20],0x0
  406009:	jmp    405e28 <flatcc_builder_create_cached_vtable@@Base+0xe8>
  40600e:	mov    rax,QWORD PTR [r15+0x118]
  406015:	mov    r12d,DWORD PTR [r15+0xe0]
  40601c:	test   rax,rax
  40601f:	je     40602b <flatcc_builder_create_cached_vtable@@Base+0x2eb>
  406021:	lea    edx,[rbp+r12*1+0x0]
  406026:	cmp    rax,rdx
  406029:	jb     406090 <flatcc_builder_create_cached_vtable@@Base+0x350>
  40602b:	lea    rdx,[r14+r12*1]
  40602f:	cmp    rdx,QWORD PTR [r15+0x80]
  406036:	ja     406072 <flatcc_builder_create_cached_vtable@@Base+0x332>
  406038:	mov    rdi,r12
  40603b:	add    rdi,QWORD PTR [r15+0x78]
  40603f:	je     4060be <flatcc_builder_create_cached_vtable@@Base+0x37e>
  406041:	mov    eax,DWORD PTR [r15+0xe0]
  406048:	mov    rsi,QWORD PTR [rsp+0x10]
  40604d:	mov    rdx,r14
  406050:	add    ebp,eax
  406052:	mov    DWORD PTR [rbx+0x8],eax
  406055:	mov    DWORD PTR [r15+0xe0],ebp
  40605c:	call   4030b0 <memcpy@plt>
  406061:	mov    eax,DWORD PTR [rbx]
  406063:	jmp    405ea1 <flatcc_builder_create_cached_vtable@@Base+0x161>
  406068:	mov    eax,0x20
  40606d:	jmp    405f95 <flatcc_builder_create_cached_vtable@@Base+0x255>
  406072:	xor    ecx,ecx
  406074:	lea    rsi,[r15+0x78]
  406078:	mov    rdi,QWORD PTR [r15+0x40]
  40607c:	mov    r8d,0x2
  406082:	call   QWORD PTR [r15+0x50]
  406086:	test   eax,eax
  406088:	je     406038 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
  40608a:	call   4030f0 <posix_memalign@plt+0x10>
  40608f:	nop
  406090:	mov    rdi,r15
  406093:	call   404310 <flatcc_builder_flush_vtable_cache@@Base>
  406098:	mov    eax,DWORD PTR [rbx]
  40609a:	jmp    405ec9 <flatcc_builder_create_cached_vtable@@Base+0x189>
  40609f:	lea    rcx,[rip+0x48aa]        # 40a950 <_IO_stdin_used@@Base+0x950>
  4060a6:	lea    rsi,[rip+0x40b3]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4060ad:	lea    rdi,[rip+0x4489]        # 40a53d <_IO_stdin_used@@Base+0x53d>
  4060b4:	mov    edx,0x156
  4060b9:	call   403070 <__assert_fail@plt>
  4060be:	mov    eax,0xffffffff
  4060c3:	jmp    405ea1 <flatcc_builder_create_cached_vtable@@Base+0x161>
  4060c8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004060d0 <flatcc_builder_create_table@@Base>:
  4060d0:	push   rbp
  4060d1:	push   rbx
  4060d2:	sub    rsp,0xb8
  4060d9:	mov    rax,QWORD PTR fs:0x28
  4060e2:	mov    QWORD PTR [rsp+0xa8],rax
  4060ea:	xor    eax,eax
  4060ec:	test   r9d,r9d
  4060ef:	mov    r11d,DWORD PTR [rsp+0xd0]
  4060f7:	js     40629d <flatcc_builder_create_table@@Base+0x1cd>
  4060fd:	test   r11b,0x1
  406101:	je     40627e <flatcc_builder_create_table@@Base+0x1ae>
  406107:	cmp    cx,0x4
  40610b:	mov    eax,0x4
  406110:	mov    rbx,rdi
  406113:	cmovb  ecx,eax
  406116:	cmp    WORD PTR [rdi+0xe8],cx
  40611d:	movzx  eax,cx
  406120:	jae    406129 <flatcc_builder_create_table@@Base+0x59>
  406122:	mov    WORD PTR [rdi+0xe8],cx
  406129:	mov    ecx,DWORD PTR [rbx+0xf0]
  40612f:	sub    eax,0x1
  406132:	mov    edi,0xfffffffc
  406137:	sub    r11d,0x1
  40613b:	mov    r10d,ecx
  40613e:	sub    r10d,edx
  406141:	and    r10d,eax
  406144:	mov    eax,edi
  406146:	sub    eax,edx
  406148:	add    eax,ecx
  40614a:	sub    eax,r10d
  40614d:	mov    ebp,eax
  40614f:	sub    ebp,r11d
  406152:	test   r9d,r9d
  406155:	mov    DWORD PTR [rsp+0xc],ebp
  406159:	je     40618d <flatcc_builder_create_table@@Base+0xbd>
  40615b:	lea    ecx,[r9-0x1]
  40615f:	sub    edi,eax
  406161:	lea    r9,[r8+rcx*2+0x2]
  406166:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406170:	movzx  ecx,WORD PTR [r8]
  406174:	mov    r11d,edi
  406177:	add    r8,0x2
  40617b:	sub    r11d,ecx
  40617e:	add    DWORD PTR [rsi+rcx*1],r11d
  406182:	cmp    r9,r8
  406185:	jne    406170 <flatcc_builder_create_table@@Base+0xa0>
  406187:	mov    ecx,DWORD PTR [rbx+0xf0]
  40618d:	lea    rax,[rsp+0xc]
  406192:	test   rdx,rdx
  406195:	mov    QWORD PTR [rsp+0x10],0x4
  40619e:	mov    QWORD PTR [rsp+0x28],0x4
  4061a7:	mov    DWORD PTR [rsp+0x18],0x1
  4061af:	mov    r8d,0x4
  4061b5:	mov    QWORD PTR [rsp+0x20],rax
  4061ba:	je     4061d7 <flatcc_builder_create_table@@Base+0x107>
  4061bc:	lea    r8,[rdx+0x4]
  4061c0:	mov    QWORD PTR [rsp+0x30],rsi
  4061c5:	mov    QWORD PTR [rsp+0x38],rdx
  4061ca:	mov    DWORD PTR [rsp+0x18],0x2
  4061d2:	mov    QWORD PTR [rsp+0x10],r8
  4061d7:	test   r10d,r10d
  4061da:	je     406208 <flatcc_builder_create_table@@Base+0x138>
  4061dc:	movsxd rdx,DWORD PTR [rsp+0x18]
  4061e1:	mov    rsi,0x40ac40
  4061e8:	add    r8,r10
  4061eb:	mov    QWORD PTR [rsp+0x10],r8
  4061f0:	mov    rax,rdx
  4061f3:	shl    rdx,0x4
  4061f7:	add    eax,0x1
  4061fa:	mov    QWORD PTR [rsp+rdx*1+0x20],rsi
  4061ff:	mov    QWORD PTR [rsp+rdx*1+0x28],r10
  406204:	mov    DWORD PTR [rsp+0x18],eax
  406208:	mov    ebp,ecx
  40620a:	movabs rax,0x10000000f
  406214:	sub    ebp,r8d
  406217:	cmp    r8,rax
  40621a:	ja     40625f <flatcc_builder_create_table@@Base+0x18f>
  40621c:	cmp    ebp,ecx
  40621e:	jge    40625f <flatcc_builder_create_table@@Base+0x18f>
  406220:	lea    rsi,[rsp+0x20]
  406225:	mov    rdi,QWORD PTR [rbx+0x38]
  406229:	mov    ecx,ebp
  40622b:	mov    edx,DWORD PTR [rsp+0x18]
  40622f:	call   QWORD PTR [rbx+0x48]
  406232:	test   eax,eax
  406234:	jne    4062c1 <flatcc_builder_create_table@@Base+0x1f1>
  40623a:	mov    DWORD PTR [rbx+0xf0],ebp
  406240:	mov    eax,ebp
  406242:	mov    rbx,QWORD PTR [rsp+0xa8]
  40624a:	xor    rbx,QWORD PTR fs:0x28
  406253:	jne    4062bc <flatcc_builder_create_table@@Base+0x1ec>
  406255:	add    rsp,0xb8
  40625c:	pop    rbx
  40625d:	pop    rbp
  40625e:	ret    
  40625f:	lea    rcx,[rip+0x492a]        # 40ab90 <_IO_stdin_used@@Base+0xb90>
  406266:	lea    rsi,[rip+0x3ef3]        # 40a160 <_IO_stdin_used@@Base+0x160>
  40626d:	lea    rdi,[rip+0x4283]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  406274:	mov    edx,0x287
  406279:	call   403070 <__assert_fail@plt>
  40627e:	lea    rcx,[rip+0x46ab]        # 40a930 <_IO_stdin_used@@Base+0x930>
  406285:	lea    rsi,[rip+0x3ed4]        # 40a160 <_IO_stdin_used@@Base+0x160>
  40628c:	lea    rdi,[rip+0x42cb]        # 40a55e <_IO_stdin_used@@Base+0x55e>
  406293:	mov    edx,0x4db
  406298:	call   403070 <__assert_fail@plt>
  40629d:	lea    rcx,[rip+0x468c]        # 40a930 <_IO_stdin_used@@Base+0x930>
  4062a4:	lea    rsi,[rip+0x3eb5]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4062ab:	lea    rdi,[rip+0x429a]        # 40a54c <_IO_stdin_used@@Base+0x54c>
  4062b2:	mov    edx,0x4d5
  4062b7:	call   403070 <__assert_fail@plt>
  4062bc:	call   403060 <__stack_chk_fail@plt>
  4062c1:	call   403136 <posix_memalign@plt+0x56>
  4062c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004062d0 <flatcc_builder_check_required_field@@Base>:
  4062d0:	mov    rax,QWORD PTR [rdi+0x30]
  4062d4:	cmp    WORD PTR [rax+0xe],0x3
  4062d9:	jne    4062f6 <flatcc_builder_check_required_field@@Base+0x26>
  4062db:	xor    eax,eax
  4062dd:	cmp    WORD PTR [rdi+0x10],si
  4062e1:	jbe    4062f2 <flatcc_builder_check_required_field@@Base+0x22>
  4062e3:	mov    rax,QWORD PTR [rdi+0x8]
  4062e7:	movzx  edx,si
  4062ea:	cmp    WORD PTR [rax+rdx*2],0x0
  4062ef:	setne  al
  4062f2:	movzx  eax,al
  4062f5:	ret    
  4062f6:	lea    rcx,[rip+0x4603]        # 40a900 <_IO_stdin_used@@Base+0x900>
  4062fd:	lea    rsi,[rip+0x3e5c]        # 40a160 <_IO_stdin_used@@Base+0x160>
  406304:	lea    rdi,[rip+0x409d]        # 40a3a8 <_IO_stdin_used@@Base+0x3a8>
  40630b:	sub    rsp,0x8
  40630f:	mov    edx,0x4f8
  406314:	call   403070 <__assert_fail@plt>
  406319:	nop    DWORD PTR [rax+0x0]

0000000000406320 <flatcc_builder_check_union_field@@Base>:
  406320:	mov    rax,QWORD PTR [rdi+0x30]
  406324:	cmp    WORD PTR [rax+0xe],0x3
  406329:	jne    40636b <flatcc_builder_check_union_field@@Base+0x4b>
  40632b:	xor    eax,eax
  40632d:	test   si,si
  406330:	je     40635d <flatcc_builder_check_union_field@@Base+0x3d>
  406332:	cmp    si,WORD PTR [rdi+0x10]
  406336:	jae    40635d <flatcc_builder_check_union_field@@Base+0x3d>
  406338:	mov    rcx,QWORD PTR [rdi+0x8]
  40633c:	movzx  edx,si
  40633f:	movzx  eax,WORD PTR [rcx+rdx*2-0x2]
  406344:	test   ax,ax
  406347:	je     406353 <flatcc_builder_check_union_field@@Base+0x33>
  406349:	mov    rsi,QWORD PTR [rdi+0x18]
  40634d:	cmp    BYTE PTR [rsi+rax*1],0x0
  406351:	jne    406360 <flatcc_builder_check_union_field@@Base+0x40>
  406353:	xor    eax,eax
  406355:	cmp    WORD PTR [rcx+rdx*2],0x0
  40635a:	sete   al
  40635d:	repz ret 
  40635f:	nop
  406360:	xor    eax,eax
  406362:	cmp    WORD PTR [rcx+rdx*2],0x0
  406367:	setne  al
  40636a:	ret    
  40636b:	lea    rcx,[rip+0x454e]        # 40a8c0 <_IO_stdin_used@@Base+0x8c0>
  406372:	lea    rsi,[rip+0x3de7]        # 40a160 <_IO_stdin_used@@Base+0x160>
  406379:	lea    rdi,[rip+0x4028]        # 40a3a8 <_IO_stdin_used@@Base+0x3a8>
  406380:	sub    rsp,0x8
  406384:	mov    edx,0x4ff
  406389:	call   403070 <__assert_fail@plt>
  40638e:	xchg   ax,ax

0000000000406390 <flatcc_builder_check_required@@Base>:
  406390:	mov    rax,QWORD PTR [rdi+0x30]
  406394:	cmp    WORD PTR [rax+0xe],0x3
  406399:	jne    4063eb <flatcc_builder_check_required@@Base+0x5b>
  40639b:	movzx  ecx,WORD PTR [rdi+0x10]
  40639f:	xor    eax,eax
  4063a1:	cmp    ecx,edx
  4063a3:	jl     4063e0 <flatcc_builder_check_required@@Base+0x50>
  4063a5:	test   edx,edx
  4063a7:	jle    4063db <flatcc_builder_check_required@@Base+0x4b>
  4063a9:	mov    rcx,QWORD PTR [rdi+0x8]
  4063ad:	movzx  edi,WORD PTR [rsi]
  4063b0:	cmp    WORD PTR [rcx+rdi*2],0x0
  4063b5:	je     4063e0 <flatcc_builder_check_required@@Base+0x50>
  4063b7:	sub    edx,0x1
  4063ba:	lea    rax,[rsi+0x2]
  4063be:	lea    rsi,[rsi+rdx*2+0x2]
  4063c3:	jmp    4063d6 <flatcc_builder_check_required@@Base+0x46>
  4063c5:	nop    DWORD PTR [rax]
  4063c8:	movzx  edx,WORD PTR [rax]
  4063cb:	add    rax,0x2
  4063cf:	cmp    WORD PTR [rcx+rdx*2],0x0
  4063d4:	je     4063e8 <flatcc_builder_check_required@@Base+0x58>
  4063d6:	cmp    rax,rsi
  4063d9:	jne    4063c8 <flatcc_builder_check_required@@Base+0x38>
  4063db:	mov    eax,0x1
  4063e0:	repz ret 
  4063e2:	nop    WORD PTR [rax+rax*1+0x0]
  4063e8:	xor    eax,eax
  4063ea:	ret    
  4063eb:	lea    rcx,[rip+0x449e]        # 40a890 <_IO_stdin_used@@Base+0x890>
  4063f2:	lea    rsi,[rip+0x3d67]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4063f9:	lea    rdi,[rip+0x3fa8]        # 40a3a8 <_IO_stdin_used@@Base+0x3a8>
  406400:	sub    rsp,0x8
  406404:	mov    edx,0x511
  406409:	call   403070 <__assert_fail@plt>
  40640e:	xchg   ax,ax

0000000000406410 <flatcc_builder_end_table@@Base>:
  406410:	push   r13
  406412:	push   r12
  406414:	push   rbp
  406415:	push   rbx
  406416:	sub    rsp,0x8
  40641a:	mov    rax,QWORD PTR [rdi+0x30]
  40641e:	cmp    WORD PTR [rax+0xe],0x3
  406423:	jne    40657e <flatcc_builder_end_table@@Base+0x16e>
  406429:	movzx  ebp,WORD PTR [rdi+0x10]
  40642d:	movzx  eax,WORD PTR [rdi+0x20]
  406431:	mov    rbx,rdi
  406434:	mov    rcx,QWORD PTR [rdi+0x8]
  406438:	add    ebp,0x2
  40643b:	add    eax,0x4
  40643e:	lea    r12,[rcx-0x4]
  406442:	add    ebp,ebp
  406444:	mov    WORD PTR [rcx-0x2],ax
  406448:	movzx  eax,ax
  40644b:	mov    WORD PTR [rcx-0x4],bp
  40644f:	mov    ecx,DWORD PTR [rdi+0x14]
  406452:	movzx  edx,bp
  406455:	mov    rsi,r12
  406458:	xor    ecx,edx
  40645a:	imul   ecx,ecx,0x9e3779b1
  406460:	xor    ecx,eax
  406462:	imul   ecx,ecx,0x9e3779b1
  406468:	mov    DWORD PTR [rdi+0x14],ecx
  40646b:	call   405d40 <flatcc_builder_create_cached_vtable@@Base>
  406470:	test   eax,eax
  406472:	mov    r13d,eax
  406475:	jne    406490 <flatcc_builder_end_table@@Base+0x80>
  406477:	add    rsp,0x8
  40647b:	xor    ebp,ebp
  40647d:	pop    rbx
  40647e:	mov    eax,ebp
  406480:	pop    rbp
  406481:	pop    r12
  406483:	pop    r13
  406485:	ret    
  406486:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406490:	movzx  edx,bp
  406493:	xor    esi,esi
  406495:	mov    rdi,r12
  406498:	call   403080 <memset@plt>
  40649d:	mov    rax,QWORD PTR [rbx+0x30]
  4064a1:	mov    r9,QWORD PTR [rbx]
  4064a4:	sub    rsp,0x8
  4064a8:	mov    edx,DWORD PTR [rbx+0x20]
  4064ab:	movzx  ecx,WORD PTR [rbx+0xea]
  4064b2:	mov    rdi,rbx
  4064b5:	mov    rsi,QWORD PTR [rbx+0x18]
  4064b9:	mov    r8d,DWORD PTR [rax+0x14]
  4064bd:	add    r8,QWORD PTR [rbx+0x88]
  4064c4:	push   r13
  4064c6:	sub    r9,r8
  4064c9:	shr    r9,1
  4064cc:	call   4060d0 <flatcc_builder_create_table@@Base>
  4064d1:	mov    ebp,eax
  4064d3:	test   ebp,ebp
  4064d5:	pop    rax
  4064d6:	pop    rdx
  4064d7:	je     406477 <flatcc_builder_end_table@@Base+0x67>
  4064d9:	mov    rax,QWORD PTR [rbx+0x30]
  4064dd:	mov    rdi,QWORD PTR [rbx+0x18]
  4064e1:	xor    esi,esi
  4064e3:	mov    edx,DWORD PTR [rax+0x18]
  4064e6:	mov    DWORD PTR [rbx+0x14],edx
  4064e9:	movzx  edx,WORD PTR [rax+0x1c]
  4064ed:	mov    WORD PTR [rbx+0x10],dx
  4064f1:	mov    edx,DWORD PTR [rax+0x10]
  4064f4:	add    rdx,QWORD PTR [rbx+0x58]
  4064f8:	mov    QWORD PTR [rbx+0x8],rdx
  4064fc:	mov    eax,DWORD PTR [rax+0x14]
  4064ff:	add    rax,QWORD PTR [rbx+0x88]
  406506:	mov    edx,DWORD PTR [rbx+0x20]
  406509:	mov    QWORD PTR [rbx],rax
  40650c:	call   403080 <memset@plt>
  406511:	mov    rax,QWORD PTR [rbx+0x30]
  406515:	mov    edi,DWORD PTR [rbx+0x70]
  406518:	mov    esi,DWORD PTR [rax]
  40651a:	mov    edx,DWORD PTR [rax+0x8]
  40651d:	mov    ecx,DWORD PTR [rax+0x4]
  406520:	mov    DWORD PTR [rbx+0x20],edx
  406523:	mov    rdx,rsi
  406526:	mov    DWORD PTR [rbx+0x28],esi
  406529:	add    rsi,QWORD PTR [rbx+0x68]
  40652d:	sub    edi,edx
  40652f:	cmp    ecx,edi
  406531:	mov    edx,edi
  406533:	cmovb  edx,ecx
  406536:	mov    DWORD PTR [rbx+0x24],edx
  406539:	movzx  edx,WORD PTR [rbx+0xea]
  406540:	cmp    dx,WORD PTR [rbx+0xe8]
  406547:	mov    QWORD PTR [rbx+0x18],rsi
  40654b:	mov    DWORD PTR [rax+0x4],ecx
  40654e:	jbe    406557 <flatcc_builder_end_table@@Base+0x147>
  406550:	mov    WORD PTR [rbx+0xe8],dx
  406557:	movzx  edx,WORD PTR [rax+0xc]
  40655b:	sub    rax,0x24
  40655f:	sub    DWORD PTR [rbx+0x104],0x1
  406566:	mov    QWORD PTR [rbx+0x30],rax
  40656a:	mov    eax,ebp
  40656c:	mov    WORD PTR [rbx+0xea],dx
  406573:	add    rsp,0x8
  406577:	pop    rbx
  406578:	pop    rbp
  406579:	pop    r12
  40657b:	pop    r13
  40657d:	ret    
  40657e:	lea    rcx,[rip+0x42eb]        # 40a870 <_IO_stdin_used@@Base+0x870>
  406585:	lea    rsi,[rip+0x3bd4]        # 40a160 <_IO_stdin_used@@Base+0x160>
  40658c:	lea    rdi,[rip+0x3e15]        # 40a3a8 <_IO_stdin_used@@Base+0x3a8>
  406593:	mov    edx,0x525
  406598:	call   403070 <__assert_fail@plt>
  40659d:	nop    DWORD PTR [rax]

00000000004065a0 <flatcc_builder_create_vector@@Base>:
  4065a0:	push   rbp
  4065a1:	push   rbx
  4065a2:	sub    rsp,0xb8
  4065a9:	mov    rax,QWORD PTR fs:0x28
  4065b2:	mov    QWORD PTR [rsp+0xa8],rax
  4065ba:	xor    eax,eax
  4065bc:	cmp    rdx,r9
  4065bf:	ja     406704 <flatcc_builder_create_vector@@Base+0x164>
  4065c5:	mov    rbx,rdi
  4065c8:	cmp    r8w,0x4
  4065cd:	mov    eax,0x4
  4065d2:	cmovb  r8d,eax
  4065d6:	cmp    r8w,WORD PTR [rbx+0xe8]
  4065de:	movzx  edi,r8w
  4065e2:	jbe    4065ec <flatcc_builder_create_vector@@Base+0x4c>
  4065e4:	mov    WORD PTR [rbx+0xe8],r8w
  4065ec:	imul   ecx,edx
  4065ef:	mov    DWORD PTR [rsp+0xc],edx
  4065f3:	mov    edx,DWORD PTR [rbx+0xf0]
  4065f9:	sub    edi,0x1
  4065fc:	mov    QWORD PTR [rsp+0x10],0x4
  406605:	mov    QWORD PTR [rsp+0x28],0x4
  40660e:	mov    DWORD PTR [rsp+0x18],0x1
  406616:	mov    r8d,0x4
  40661c:	mov    eax,edx
  40661e:	sub    eax,ecx
  406620:	and    eax,edi
  406622:	lea    rdi,[rsp+0xc]
  406627:	test   ecx,ecx
  406629:	mov    QWORD PTR [rsp+0x20],rdi
  40662e:	jne    4066c0 <flatcc_builder_create_vector@@Base+0x120>
  406634:	test   eax,eax
  406636:	je     406664 <flatcc_builder_create_vector@@Base+0xc4>
  406638:	movsxd rsi,DWORD PTR [rsp+0x18]
  40663d:	mov    rdi,0x40ac40
  406644:	add    r8,rax
  406647:	mov    QWORD PTR [rsp+0x10],r8
  40664c:	mov    rcx,rsi
  40664f:	shl    rsi,0x4
  406653:	add    ecx,0x1
  406656:	mov    QWORD PTR [rsp+rsi*1+0x20],rdi
  40665b:	mov    QWORD PTR [rsp+rsi*1+0x28],rax
  406660:	mov    DWORD PTR [rsp+0x18],ecx
  406664:	mov    ebp,edx
  406666:	movabs rax,0x10000000f
  406670:	sub    ebp,r8d
  406673:	cmp    r8,rax
  406676:	ja     4066e0 <flatcc_builder_create_vector@@Base+0x140>
  406678:	cmp    edx,ebp
  40667a:	jle    4066e0 <flatcc_builder_create_vector@@Base+0x140>
  40667c:	lea    rsi,[rsp+0x20]
  406681:	mov    rdi,QWORD PTR [rbx+0x38]
  406685:	mov    ecx,ebp
  406687:	mov    edx,DWORD PTR [rsp+0x18]
  40668b:	call   QWORD PTR [rbx+0x48]
  40668e:	test   eax,eax
  406690:	jne    4066ff <flatcc_builder_create_vector@@Base+0x15f>
  406692:	mov    DWORD PTR [rbx+0xf0],ebp
  406698:	mov    eax,ebp
  40669a:	mov    rbx,QWORD PTR [rsp+0xa8]
  4066a2:	xor    rbx,QWORD PTR fs:0x28
  4066ab:	jne    406723 <flatcc_builder_create_vector@@Base+0x183>
  4066ad:	add    rsp,0xb8
  4066b4:	pop    rbx
  4066b5:	pop    rbp
  4066b6:	ret    
  4066b7:	nop    WORD PTR [rax+rax*1+0x0]
  4066c0:	lea    r8,[rcx+0x4]
  4066c4:	mov    QWORD PTR [rsp+0x30],rsi
  4066c9:	mov    QWORD PTR [rsp+0x38],rcx
  4066ce:	mov    DWORD PTR [rsp+0x18],0x2
  4066d6:	mov    QWORD PTR [rsp+0x10],r8
  4066db:	jmp    406634 <flatcc_builder_create_vector@@Base+0x94>
  4066e0:	lea    rcx,[rip+0x44a9]        # 40ab90 <_IO_stdin_used@@Base+0xb90>
  4066e7:	lea    rsi,[rip+0x3a72]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4066ee:	lea    rdi,[rip+0x3e02]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  4066f5:	mov    edx,0x287
  4066fa:	call   403070 <__assert_fail@plt>
  4066ff:	call   403136 <posix_memalign@plt+0x56>
  406704:	lea    rcx,[rip+0x4145]        # 40a850 <_IO_stdin_used@@Base+0x850>
  40670b:	lea    rsi,[rip+0x3a4e]        # 40a160 <_IO_stdin_used@@Base+0x160>
  406712:	lea    rdi,[rip+0x3e50]        # 40a569 <_IO_stdin_used@@Base+0x569>
  406719:	mov    edx,0x555
  40671e:	call   403070 <__assert_fail@plt>
  406723:	call   403060 <__stack_chk_fail@plt>
  406728:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406730 <flatcc_builder_end_vector@@Base>:
  406730:	push   rbp
  406731:	push   rbx
  406732:	sub    rsp,0x8
  406736:	mov    rax,QWORD PTR [rdi+0x30]
  40673a:	cmp    WORD PTR [rax+0xe],0x4
  40673f:	jne    4067ef <flatcc_builder_end_vector@@Base+0xbf>
  406745:	mov    ecx,DWORD PTR [rax+0x10]
  406748:	mov    edx,DWORD PTR [rax+0x14]
  40674b:	mov    rbx,rdi
  40674e:	mov    r9d,DWORD PTR [rax+0x18]
  406752:	movzx  r8d,WORD PTR [rdi+0xea]
  40675a:	mov    rsi,QWORD PTR [rdi+0x18]
  40675e:	call   4065a0 <flatcc_builder_create_vector@@Base>
  406763:	test   eax,eax
  406765:	mov    ebp,eax
  406767:	jne    406778 <flatcc_builder_end_vector@@Base+0x48>
  406769:	add    rsp,0x8
  40676d:	mov    eax,ebp
  40676f:	pop    rbx
  406770:	pop    rbp
  406771:	ret    
  406772:	nop    WORD PTR [rax+rax*1+0x0]
  406778:	mov    edx,DWORD PTR [rbx+0x20]
  40677b:	mov    rdi,QWORD PTR [rbx+0x18]
  40677f:	xor    esi,esi
  406781:	call   403080 <memset@plt>
  406786:	mov    rax,QWORD PTR [rbx+0x30]
  40678a:	mov    edi,DWORD PTR [rbx+0x70]
  40678d:	mov    esi,DWORD PTR [rax]
  40678f:	mov    edx,DWORD PTR [rax+0x8]
  406792:	mov    ecx,DWORD PTR [rax+0x4]
  406795:	mov    DWORD PTR [rbx+0x20],edx
  406798:	mov    rdx,rsi
  40679b:	mov    DWORD PTR [rbx+0x28],esi
  40679e:	add    rsi,QWORD PTR [rbx+0x68]
  4067a2:	sub    edi,edx
  4067a4:	cmp    ecx,edi
  4067a6:	mov    edx,edi
  4067a8:	cmovb  edx,ecx
  4067ab:	mov    DWORD PTR [rbx+0x24],edx
  4067ae:	movzx  edx,WORD PTR [rbx+0xea]
  4067b5:	cmp    dx,WORD PTR [rbx+0xe8]
  4067bc:	mov    QWORD PTR [rbx+0x18],rsi
  4067c0:	mov    DWORD PTR [rax+0x4],ecx
  4067c3:	jbe    4067cc <flatcc_builder_end_vector@@Base+0x9c>
  4067c5:	mov    WORD PTR [rbx+0xe8],dx
  4067cc:	movzx  edx,WORD PTR [rax+0xc]
  4067d0:	sub    rax,0x24
  4067d4:	sub    DWORD PTR [rbx+0x104],0x1
  4067db:	mov    QWORD PTR [rbx+0x30],rax
  4067df:	mov    eax,ebp
  4067e1:	mov    WORD PTR [rbx+0xea],dx
  4067e8:	add    rsp,0x8
  4067ec:	pop    rbx
  4067ed:	pop    rbp
  4067ee:	ret    
  4067ef:	lea    rcx,[rip+0x403a]        # 40a830 <_IO_stdin_used@@Base+0x830>
  4067f6:	lea    rsi,[rip+0x3963]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4067fd:	lea    rdi,[rip+0x3a3c]        # 40a240 <_IO_stdin_used@@Base+0x240>
  406804:	mov    edx,0x578
  406809:	call   403070 <__assert_fail@plt>
  40680e:	xchg   ax,ax

0000000000406810 <flatcc_builder_vector_count@@Base>:
  406810:	mov    rax,QWORD PTR [rdi+0x30]
  406814:	mov    eax,DWORD PTR [rax+0x14]
  406817:	ret    
  406818:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406820 <flatcc_builder_vector_edit@@Base>:
  406820:	mov    rax,QWORD PTR [rdi+0x18]
  406824:	ret    
  406825:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406830 <flatcc_builder_create_offset_vector_direct@@Base>:
  406830:	xor    ecx,ecx
  406832:	jmp    4040e0 <flatcc_builder_default_alloc@@Base+0x390>
  406837:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406840 <flatcc_builder_end_offset_vector@@Base>:
  406840:	push   rbp
  406841:	push   rbx
  406842:	sub    rsp,0x8
  406846:	mov    rax,QWORD PTR [rdi+0x30]
  40684a:	cmp    WORD PTR [rax+0xe],0x5
  40684f:	jne    4068ef <flatcc_builder_end_offset_vector@@Base+0xaf>
  406855:	mov    edx,DWORD PTR [rax+0x14]
  406858:	mov    rsi,QWORD PTR [rdi+0x18]
  40685c:	mov    rbx,rdi
  40685f:	call   406830 <flatcc_builder_create_offset_vector_direct@@Base>
  406864:	test   eax,eax
  406866:	mov    ebp,eax
  406868:	jne    406878 <flatcc_builder_end_offset_vector@@Base+0x38>
  40686a:	add    rsp,0x8
  40686e:	mov    eax,ebp
  406870:	pop    rbx
  406871:	pop    rbp
  406872:	ret    
  406873:	nop    DWORD PTR [rax+rax*1+0x0]
  406878:	mov    edx,DWORD PTR [rbx+0x20]
  40687b:	mov    rdi,QWORD PTR [rbx+0x18]
  40687f:	xor    esi,esi
  406881:	call   403080 <memset@plt>
  406886:	mov    rax,QWORD PTR [rbx+0x30]
  40688a:	mov    edi,DWORD PTR [rbx+0x70]
  40688d:	mov    esi,DWORD PTR [rax]
  40688f:	mov    edx,DWORD PTR [rax+0x8]
  406892:	mov    ecx,DWORD PTR [rax+0x4]
  406895:	mov    DWORD PTR [rbx+0x20],edx
  406898:	mov    rdx,rsi
  40689b:	mov    DWORD PTR [rbx+0x28],esi
  40689e:	add    rsi,QWORD PTR [rbx+0x68]
  4068a2:	sub    edi,edx
  4068a4:	cmp    ecx,edi
  4068a6:	mov    edx,edi
  4068a8:	cmovb  edx,ecx
  4068ab:	mov    DWORD PTR [rbx+0x24],edx
  4068ae:	movzx  edx,WORD PTR [rbx+0xea]
  4068b5:	cmp    dx,WORD PTR [rbx+0xe8]
  4068bc:	mov    QWORD PTR [rbx+0x18],rsi
  4068c0:	mov    DWORD PTR [rax+0x4],ecx
  4068c3:	jbe    4068cc <flatcc_builder_end_offset_vector@@Base+0x8c>
  4068c5:	mov    WORD PTR [rbx+0xe8],dx
  4068cc:	movzx  edx,WORD PTR [rax+0xc]
  4068d0:	sub    rax,0x24
  4068d4:	sub    DWORD PTR [rbx+0x104],0x1
  4068db:	mov    QWORD PTR [rbx+0x30],rax
  4068df:	mov    eax,ebp
  4068e1:	mov    WORD PTR [rbx+0xea],dx
  4068e8:	add    rsp,0x8
  4068ec:	pop    rbx
  4068ed:	pop    rbp
  4068ee:	ret    
  4068ef:	lea    rcx,[rip+0x3eea]        # 40a7e0 <_IO_stdin_used@@Base+0x7e0>
  4068f6:	lea    rsi,[rip+0x3863]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4068fd:	lea    rdi,[rip+0x39ac]        # 40a2b0 <_IO_stdin_used@@Base+0x2b0>
  406904:	mov    edx,0x5c8
  406909:	call   403070 <__assert_fail@plt>
  40690e:	xchg   ax,ax

0000000000406910 <flatcc_builder_create_offset_vector@@Base>:
  406910:	push   r12
  406912:	push   rbp
  406913:	mov    r12,rsi
  406916:	push   rbx
  406917:	mov    rbp,rdx
  40691a:	mov    rbx,rdi
  40691d:	call   4058b0 <flatcc_builder_start_offset_vector@@Base>
  406922:	test   eax,eax
  406924:	je     406930 <flatcc_builder_create_offset_vector@@Base+0x20>
  406926:	pop    rbx
  406927:	xor    eax,eax
  406929:	pop    rbp
  40692a:	pop    r12
  40692c:	ret    
  40692d:	nop    DWORD PTR [rax]
  406930:	mov    rsi,rbp
  406933:	mov    rdi,rbx
  406936:	call   405370 <flatcc_builder_extend_offset_vector@@Base>
  40693b:	test   rax,rax
  40693e:	je     406926 <flatcc_builder_create_offset_vector@@Base+0x16>
  406940:	lea    rdx,[rbp*4+0x0]
  406948:	mov    rsi,r12
  40694b:	mov    rdi,rax
  40694e:	call   4030b0 <memcpy@plt>
  406953:	mov    rdi,rbx
  406956:	pop    rbx
  406957:	pop    rbp
  406958:	pop    r12
  40695a:	jmp    406840 <flatcc_builder_end_offset_vector@@Base>
  40695f:	nop

0000000000406960 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  406960:	push   rbp
  406961:	push   rbx
  406962:	sub    rsp,0x8
  406966:	mov    rax,QWORD PTR [rdi+0x30]
  40696a:	cmp    WORD PTR [rax+0xe],0x5
  40696f:	jne    406a17 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb7>
  406975:	mov    edx,DWORD PTR [rax+0x14]
  406978:	mov    rcx,rsi
  40697b:	mov    rsi,QWORD PTR [rdi+0x18]
  40697f:	mov    rbx,rdi
  406982:	call   4040e0 <flatcc_builder_default_alloc@@Base+0x390>
  406987:	test   eax,eax
  406989:	mov    ebp,eax
  40698b:	jne    4069a0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
  40698d:	add    rsp,0x8
  406991:	mov    eax,ebp
  406993:	pop    rbx
  406994:	pop    rbp
  406995:	ret    
  406996:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4069a0:	mov    edx,DWORD PTR [rbx+0x20]
  4069a3:	mov    rdi,QWORD PTR [rbx+0x18]
  4069a7:	xor    esi,esi
  4069a9:	call   403080 <memset@plt>
  4069ae:	mov    rax,QWORD PTR [rbx+0x30]
  4069b2:	mov    edi,DWORD PTR [rbx+0x70]
  4069b5:	mov    esi,DWORD PTR [rax]
  4069b7:	mov    edx,DWORD PTR [rax+0x8]
  4069ba:	mov    ecx,DWORD PTR [rax+0x4]
  4069bd:	mov    DWORD PTR [rbx+0x20],edx
  4069c0:	mov    rdx,rsi
  4069c3:	mov    DWORD PTR [rbx+0x28],esi
  4069c6:	add    rsi,QWORD PTR [rbx+0x68]
  4069ca:	sub    edi,edx
  4069cc:	cmp    ecx,edi
  4069ce:	mov    edx,edi
  4069d0:	cmovb  edx,ecx
  4069d3:	mov    DWORD PTR [rbx+0x24],edx
  4069d6:	movzx  edx,WORD PTR [rbx+0xea]
  4069dd:	cmp    dx,WORD PTR [rbx+0xe8]
  4069e4:	mov    QWORD PTR [rbx+0x18],rsi
  4069e8:	mov    DWORD PTR [rax+0x4],ecx
  4069eb:	jbe    4069f4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x94>
  4069ed:	mov    WORD PTR [rbx+0xe8],dx
  4069f4:	movzx  edx,WORD PTR [rax+0xc]
  4069f8:	sub    rax,0x24
  4069fc:	sub    DWORD PTR [rbx+0x104],0x1
  406a03:	mov    QWORD PTR [rbx+0x30],rax
  406a07:	mov    eax,ebp
  406a09:	mov    WORD PTR [rbx+0xea],dx
  406a10:	add    rsp,0x8
  406a14:	pop    rbx
  406a15:	pop    rbp
  406a16:	ret    
  406a17:	lea    rcx,[rip+0x3d82]        # 40a7a0 <_IO_stdin_used@@Base+0x7a0>
  406a1e:	lea    rsi,[rip+0x373b]        # 40a160 <_IO_stdin_used@@Base+0x160>
  406a25:	lea    rdi,[rip+0x3884]        # 40a2b0 <_IO_stdin_used@@Base+0x2b0>
  406a2c:	mov    edx,0x5d5
  406a31:	call   403070 <__assert_fail@plt>
  406a36:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000406a40 <flatcc_builder_offset_vector_edit@@Base>:
  406a40:	mov    rax,QWORD PTR [rdi+0x18]
  406a44:	ret    
  406a45:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406a50 <flatcc_builder_offset_vector_count@@Base>:
  406a50:	mov    rax,QWORD PTR [rdi+0x30]
  406a54:	mov    eax,DWORD PTR [rax+0x14]
  406a57:	ret    
  406a58:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406a60 <flatcc_builder_create_union_vector_direct@@Base>:
  406a60:	push   r13
  406a62:	push   r12
  406a64:	mov    r13,rcx
  406a67:	push   rbp
  406a68:	push   rbx
  406a69:	mov    r12,rsi
  406a6c:	mov    rcx,r12
  406a6f:	mov    rsi,rdx
  406a72:	mov    rdx,r13
  406a75:	sub    rsp,0x8
  406a79:	mov    rbp,rdi
  406a7c:	call   4040e0 <flatcc_builder_default_alloc@@Base+0x390>
  406a81:	test   eax,eax
  406a83:	jne    406a98 <flatcc_builder_create_union_vector_direct@@Base+0x38>
  406a85:	add    rsp,0x8
  406a89:	xor    eax,eax
  406a8b:	pop    rbx
  406a8c:	pop    rbp
  406a8d:	pop    r12
  406a8f:	pop    r13
  406a91:	ret    
  406a92:	nop    WORD PTR [rax+rax*1+0x0]
  406a98:	mov    ebx,eax
  406a9a:	mov    rdx,r13
  406a9d:	mov    ecx,0x1
  406aa2:	mov    rsi,r12
  406aa5:	mov    rdi,rbp
  406aa8:	mov    r9d,0xffffffff
  406aae:	mov    r8d,0x1
  406ab4:	call   4065a0 <flatcc_builder_create_vector@@Base>
  406ab9:	mov    rcx,rbx
  406abc:	mov    edx,eax
  406abe:	shl    rcx,0x20
  406ac2:	mov    rbx,rcx
  406ac5:	or     rbx,rdx
  406ac8:	test   eax,eax
  406aca:	mov    rax,rcx
  406acd:	cmovne rax,rbx
  406ad1:	add    rsp,0x8
  406ad5:	pop    rbx
  406ad6:	pop    rbp
  406ad7:	pop    r12
  406ad9:	pop    r13
  406adb:	ret    
  406adc:	nop    DWORD PTR [rax+0x0]

0000000000406ae0 <flatcc_builder_create_union_vector@@Base>:
  406ae0:	push   r13
  406ae2:	push   r12
  406ae4:	mov    r12,rdx
  406ae7:	push   rbp
  406ae8:	push   rbx
  406ae9:	mov    rbp,rsi
  406aec:	mov    rbx,rdi
  406aef:	sub    rsp,0x8
  406af3:	call   4058b0 <flatcc_builder_start_offset_vector@@Base>
  406af8:	test   eax,eax
  406afa:	je     406b10 <flatcc_builder_create_union_vector@@Base+0x30>
  406afc:	add    rsp,0x8
  406b00:	xor    eax,eax
  406b02:	pop    rbx
  406b03:	pop    rbp
  406b04:	pop    r12
  406b06:	pop    r13
  406b08:	ret    
  406b09:	nop    DWORD PTR [rax+0x0]
  406b10:	mov    rsi,r12
  406b13:	mov    rdi,rbx
  406b16:	call   405370 <flatcc_builder_extend_offset_vector@@Base>
  406b1b:	test   rax,rax
  406b1e:	je     406afc <flatcc_builder_create_union_vector@@Base+0x1c>
  406b20:	mov    r13d,DWORD PTR [rbx+0x20]
  406b24:	mov    rax,r13
  406b27:	add    eax,r12d
  406b2a:	cmp    eax,DWORD PTR [rbx+0x24]
  406b2d:	mov    DWORD PTR [rbx+0x20],eax
  406b30:	jae    406c10 <flatcc_builder_create_union_vector@@Base+0x130>
  406b36:	add    r13,QWORD PTR [rbx+0x18]
  406b3a:	je     406afc <flatcc_builder_create_union_vector@@Base+0x1c>
  406b3c:	mov    rdi,rbx
  406b3f:	call   406a40 <flatcc_builder_offset_vector_edit@@Base>
  406b44:	xor    edi,edi
  406b46:	test   r12,r12
  406b49:	je     406b6d <flatcc_builder_create_union_vector@@Base+0x8d>
  406b4b:	nop    DWORD PTR [rax+rax*1+0x0]
  406b50:	movzx  r8d,BYTE PTR [rbp+rdi*8+0x0]
  406b56:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  406b5b:	mov    r8d,DWORD PTR [rbp+rdi*8+0x4]
  406b60:	mov    DWORD PTR [rax+rdi*4],r8d
  406b64:	add    rdi,0x1
  406b68:	cmp    r12,rdi
  406b6b:	jne    406b50 <flatcc_builder_create_union_vector@@Base+0x70>
  406b6d:	mov    rcx,r12
  406b70:	mov    rdx,rax
  406b73:	mov    rsi,r13
  406b76:	mov    rdi,rbx
  406b79:	call   406a60 <flatcc_builder_create_union_vector_direct@@Base>
  406b7e:	mov    edx,DWORD PTR [rbx+0x20]
  406b81:	mov    rdi,QWORD PTR [rbx+0x18]
  406b85:	xor    esi,esi
  406b87:	mov    r12,rax
  406b8a:	mov    rbp,rax
  406b8d:	sar    r12,0x20
  406b91:	call   403080 <memset@plt>
  406b96:	mov    rax,QWORD PTR [rbx+0x30]
  406b9a:	mov    esi,DWORD PTR [rax]
  406b9c:	mov    edx,DWORD PTR [rax+0x8]
  406b9f:	mov    ecx,DWORD PTR [rax+0x4]
  406ba2:	mov    DWORD PTR [rbx+0x20],edx
  406ba5:	mov    DWORD PTR [rbx+0x28],esi
  406ba8:	mov    rdx,rsi
  406bab:	add    rsi,QWORD PTR [rbx+0x68]
  406baf:	mov    QWORD PTR [rbx+0x18],rsi
  406bb3:	mov    esi,DWORD PTR [rbx+0x70]
  406bb6:	sub    esi,edx
  406bb8:	cmp    ecx,esi
  406bba:	mov    edx,esi
  406bbc:	cmovb  edx,ecx
  406bbf:	mov    DWORD PTR [rbx+0x24],edx
  406bc2:	movzx  edx,WORD PTR [rbx+0xea]
  406bc9:	cmp    dx,WORD PTR [rbx+0xe8]
  406bd0:	mov    DWORD PTR [rax+0x4],ecx
  406bd3:	jbe    406bdc <flatcc_builder_create_union_vector@@Base+0xfc>
  406bd5:	mov    WORD PTR [rbx+0xe8],dx
  406bdc:	movzx  edx,WORD PTR [rax+0xc]
  406be0:	sub    rax,0x24
  406be4:	sub    DWORD PTR [rbx+0x104],0x1
  406beb:	mov    QWORD PTR [rbx+0x30],rax
  406bef:	shl    r12,0x20
  406bf3:	mov    eax,ebp
  406bf5:	or     rax,r12
  406bf8:	mov    WORD PTR [rbx+0xea],dx
  406bff:	add    rsp,0x8
  406c03:	pop    rbx
  406c04:	pop    rbp
  406c05:	pop    r12
  406c07:	pop    r13
  406c09:	ret    
  406c0a:	nop    WORD PTR [rax+rax*1+0x0]
  406c10:	lea    esi,[rax+0x1]
  406c13:	mov    edx,0xfffffffc
  406c18:	mov    rdi,rbx
  406c1b:	call   403cf0 <_start@@Base+0xa50>
  406c20:	test   eax,eax
  406c22:	je     406b36 <flatcc_builder_create_union_vector@@Base+0x56>
  406c28:	jmp    406afc <flatcc_builder_create_union_vector@@Base+0x1c>
  406c2d:	nop    DWORD PTR [rax]

0000000000406c30 <flatcc_builder_start_union_vector@@Base>:
  406c30:	push   rbx
  406c31:	mov    esi,0x4
  406c36:	mov    rbx,rdi
  406c39:	call   403fb0 <flatcc_builder_default_alloc@@Base+0x260>
  406c3e:	test   eax,eax
  406c40:	jne    406c88 <flatcc_builder_start_union_vector@@Base+0x58>
  406c42:	mov    rcx,QWORD PTR [rbx+0x30]
  406c46:	mov    edx,0x7
  406c4b:	mov    DWORD PTR [rcx+0x10],0x8
  406c52:	mov    DWORD PTR [rcx+0x14],0x0
  406c59:	mov    WORD PTR [rcx+0xe],dx
  406c5d:	mov    edx,DWORD PTR [rbx+0x28]
  406c60:	mov    rsi,rdx
  406c63:	add    rdx,QWORD PTR [rbx+0x68]
  406c67:	mov    QWORD PTR [rbx+0x18],rdx
  406c6b:	mov    edx,DWORD PTR [rbx+0x70]
  406c6e:	sub    edx,esi
  406c70:	mov    esi,0xfffffffc
  406c75:	cmp    edx,esi
  406c77:	cmova  edx,esi
  406c7a:	mov    DWORD PTR [rbx+0x24],edx
  406c7d:	mov    DWORD PTR [rcx+0x4],esi
  406c80:	pop    rbx
  406c81:	ret    
  406c82:	nop    WORD PTR [rax+rax*1+0x0]
  406c88:	mov    eax,0xffffffff
  406c8d:	pop    rbx
  406c8e:	ret    
  406c8f:	nop

0000000000406c90 <flatcc_builder_union_vector_edit@@Base>:
  406c90:	mov    rax,QWORD PTR [rdi+0x18]
  406c94:	ret    
  406c95:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406ca0 <flatcc_builder_union_vector_count@@Base>:
  406ca0:	mov    rax,QWORD PTR [rdi+0x30]
  406ca4:	mov    eax,DWORD PTR [rax+0x14]
  406ca7:	ret    
  406ca8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406cb0 <flatcc_builder_end_union_vector@@Base>:
  406cb0:	push   r13
  406cb2:	push   r12
  406cb4:	push   rbp
  406cb5:	push   rbx
  406cb6:	sub    rsp,0x8
  406cba:	mov    rax,QWORD PTR [rdi+0x30]
  406cbe:	cmp    WORD PTR [rax+0xe],0x7
  406cc3:	jne    406df5 <flatcc_builder_end_union_vector@@Base+0x145>
  406cc9:	mov    rbx,rdi
  406ccc:	call   406ca0 <flatcc_builder_union_vector_count@@Base>
  406cd1:	mov    ebp,DWORD PTR [rbx+0x20]
  406cd4:	mov    r12,rax
  406cd7:	lea    eax,[rax+rax*4]
  406cda:	add    eax,ebp
  406cdc:	cmp    eax,DWORD PTR [rbx+0x24]
  406cdf:	mov    DWORD PTR [rbx+0x20],eax
  406ce2:	jae    406dd0 <flatcc_builder_end_union_vector@@Base+0x120>
  406ce8:	add    rbp,QWORD PTR [rbx+0x18]
  406cec:	je     406de8 <flatcc_builder_end_union_vector@@Base+0x138>
  406cf2:	mov    rdi,rbx
  406cf5:	lea    r13,[rbp+r12*4+0x0]
  406cfa:	call   406c90 <flatcc_builder_union_vector_edit@@Base>
  406cff:	xor    edi,edi
  406d01:	test   r12,r12
  406d04:	je     406d2d <flatcc_builder_end_union_vector@@Base+0x7d>
  406d06:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406d10:	movzx  r8d,BYTE PTR [rax+rdi*8]
  406d15:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  406d1a:	mov    r8d,DWORD PTR [rax+rdi*8+0x4]
  406d1f:	mov    DWORD PTR [rbp+rdi*4+0x0],r8d
  406d24:	add    rdi,0x1
  406d28:	cmp    r12,rdi
  406d2b:	jne    406d10 <flatcc_builder_end_union_vector@@Base+0x60>
  406d2d:	mov    rcx,r12
  406d30:	mov    rdx,rbp
  406d33:	mov    rsi,r13
  406d36:	mov    rdi,rbx
  406d39:	call   406a60 <flatcc_builder_create_union_vector_direct@@Base>
  406d3e:	mov    edx,DWORD PTR [rbx+0x20]
  406d41:	mov    rdi,QWORD PTR [rbx+0x18]
  406d45:	xor    esi,esi
  406d47:	mov    r12,rax
  406d4a:	mov    rbp,rax
  406d4d:	sar    r12,0x20
  406d51:	call   403080 <memset@plt>
  406d56:	mov    rax,QWORD PTR [rbx+0x30]
  406d5a:	mov    esi,DWORD PTR [rax]
  406d5c:	mov    edx,DWORD PTR [rax+0x8]
  406d5f:	mov    ecx,DWORD PTR [rax+0x4]
  406d62:	mov    DWORD PTR [rbx+0x20],edx
  406d65:	mov    DWORD PTR [rbx+0x28],esi
  406d68:	mov    rdx,rsi
  406d6b:	add    rsi,QWORD PTR [rbx+0x68]
  406d6f:	mov    QWORD PTR [rbx+0x18],rsi
  406d73:	mov    esi,DWORD PTR [rbx+0x70]
  406d76:	sub    esi,edx
  406d78:	cmp    ecx,esi
  406d7a:	mov    edx,esi
  406d7c:	cmovb  edx,ecx
  406d7f:	mov    DWORD PTR [rbx+0x24],edx
  406d82:	movzx  edx,WORD PTR [rbx+0xea]
  406d89:	cmp    dx,WORD PTR [rbx+0xe8]
  406d90:	mov    DWORD PTR [rax+0x4],ecx
  406d93:	jbe    406d9c <flatcc_builder_end_union_vector@@Base+0xec>
  406d95:	mov    WORD PTR [rbx+0xe8],dx
  406d9c:	movzx  edx,WORD PTR [rax+0xc]
  406da0:	sub    rax,0x24
  406da4:	sub    DWORD PTR [rbx+0x104],0x1
  406dab:	mov    QWORD PTR [rbx+0x30],rax
  406daf:	shl    r12,0x20
  406db3:	mov    eax,ebp
  406db5:	or     rax,r12
  406db8:	mov    WORD PTR [rbx+0xea],dx
  406dbf:	add    rsp,0x8
  406dc3:	pop    rbx
  406dc4:	pop    rbp
  406dc5:	pop    r12
  406dc7:	pop    r13
  406dc9:	ret    
  406dca:	nop    WORD PTR [rax+rax*1+0x0]
  406dd0:	lea    esi,[rax+0x1]
  406dd3:	mov    edx,0xfffffffc
  406dd8:	mov    rdi,rbx
  406ddb:	call   403cf0 <_start@@Base+0xa50>
  406de0:	test   eax,eax
  406de2:	je     406ce8 <flatcc_builder_end_union_vector@@Base+0x38>
  406de8:	add    rsp,0x8
  406dec:	xor    eax,eax
  406dee:	pop    rbx
  406def:	pop    rbp
  406df0:	pop    r12
  406df2:	pop    r13
  406df4:	ret    
  406df5:	lea    rcx,[rip+0x3924]        # 40a720 <_IO_stdin_used@@Base+0x720>
  406dfc:	lea    rsi,[rip+0x335d]        # 40a160 <_IO_stdin_used@@Base+0x160>
  406e03:	lea    rdi,[rip+0x35ce]        # 40a3d8 <_IO_stdin_used@@Base+0x3d8>
  406e0a:	mov    edx,0x651
  406e0f:	call   403070 <__assert_fail@plt>
  406e14:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406e1f:	nop

0000000000406e20 <flatcc_builder_extend_union_vector@@Base>:
  406e20:	push   rbp
  406e21:	push   rbx
  406e22:	xor    edx,edx
  406e24:	mov    ecx,esi
  406e26:	sub    rsp,0x8
  406e2a:	mov    rax,QWORD PTR [rdi+0x30]
  406e2e:	add    ecx,DWORD PTR [rax+0x14]
  406e31:	setb   dl
  406e34:	test   edx,edx
  406e36:	jne    406e7d <flatcc_builder_extend_union_vector@@Base+0x5d>
  406e38:	cmp    ecx,0x1fffffff
  406e3e:	ja     406e7d <flatcc_builder_extend_union_vector@@Base+0x5d>
  406e40:	mov    DWORD PTR [rax+0x14],ecx
  406e43:	mov    ebp,DWORD PTR [rdi+0x20]
  406e46:	mov    rbx,rdi
  406e49:	lea    eax,[rbp+rsi*8+0x0]
  406e4d:	cmp    eax,DWORD PTR [rdi+0x24]
  406e50:	mov    DWORD PTR [rdi+0x20],eax
  406e53:	jae    406e68 <flatcc_builder_extend_union_vector@@Base+0x48>
  406e55:	mov    rax,rbp
  406e58:	add    rax,QWORD PTR [rbx+0x18]
  406e5c:	add    rsp,0x8
  406e60:	pop    rbx
  406e61:	pop    rbp
  406e62:	ret    
  406e63:	nop    DWORD PTR [rax+rax*1+0x0]
  406e68:	lea    esi,[rax+0x1]
  406e6b:	mov    edx,0xfffffffc
  406e70:	call   403cf0 <_start@@Base+0xa50>
  406e75:	test   eax,eax
  406e77:	je     406e55 <flatcc_builder_extend_union_vector@@Base+0x35>
  406e79:	xor    eax,eax
  406e7b:	jmp    406e5c <flatcc_builder_extend_union_vector@@Base+0x3c>
  406e7d:	call   403159 <posix_memalign@plt+0x79>
  406e82:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406e8d:	nop    DWORD PTR [rax]

0000000000406e90 <flatcc_builder_truncate_union_vector@@Base>:
  406e90:	sub    rsp,0x8
  406e94:	mov    rax,QWORD PTR [rdi+0x30]
  406e98:	cmp    WORD PTR [rax+0xe],0x7
  406e9d:	jne    406ecf <flatcc_builder_truncate_union_vector@@Base+0x3f>
  406e9f:	mov    edx,DWORD PTR [rax+0x14]
  406ea2:	cmp    edx,esi
  406ea4:	jb     406eee <flatcc_builder_truncate_union_vector@@Base+0x5e>
  406ea6:	sub    edx,esi
  406ea8:	imul   esi,DWORD PTR [rax+0x10]
  406eac:	mov    DWORD PTR [rax+0x14],edx
  406eaf:	mov    eax,DWORD PTR [rdi+0x20]
  406eb2:	mov    rcx,QWORD PTR [rdi+0x18]
  406eb6:	sub    eax,esi
  406eb8:	mov    edx,esi
  406eba:	xor    esi,esi
  406ebc:	mov    DWORD PTR [rdi+0x20],eax
  406ebf:	lea    rdi,[rcx+rax*1]
  406ec3:	call   403080 <memset@plt>
  406ec8:	xor    eax,eax
  406eca:	add    rsp,0x8
  406ece:	ret    
  406ecf:	lea    rcx,[rip+0x380a]        # 40a6e0 <_IO_stdin_used@@Base+0x6e0>
  406ed6:	lea    rsi,[rip+0x3283]        # 40a160 <_IO_stdin_used@@Base+0x160>
  406edd:	lea    rdi,[rip+0x34f4]        # 40a3d8 <_IO_stdin_used@@Base+0x3d8>
  406ee4:	mov    edx,0x681
  406ee9:	call   403070 <__assert_fail@plt>
  406eee:	lea    rcx,[rip+0x37eb]        # 40a6e0 <_IO_stdin_used@@Base+0x6e0>
  406ef5:	lea    rsi,[rip+0x3264]        # 40a160 <_IO_stdin_used@@Base+0x160>
  406efc:	lea    rdi,[rip+0x343d]        # 40a340 <_IO_stdin_used@@Base+0x340>
  406f03:	mov    edx,0x682
  406f08:	call   403070 <__assert_fail@plt>
  406f0d:	nop    DWORD PTR [rax]

0000000000406f10 <flatcc_builder_union_vector_push@@Base>:
  406f10:	push   r12
  406f12:	push   rbp
  406f13:	push   rbx
  406f14:	mov    rdx,QWORD PTR [rdi+0x30]
  406f18:	cmp    WORD PTR [rdx+0xe],0x7
  406f1d:	jne    406f70 <flatcc_builder_union_vector_push@@Base+0x60>
  406f1f:	mov    eax,DWORD PTR [rdx+0x14]
  406f22:	cmp    eax,0x1fffffff
  406f27:	je     406f69 <flatcc_builder_union_vector_push@@Base+0x59>
  406f29:	add    eax,0x1
  406f2c:	mov    rbp,rdi
  406f2f:	mov    r12,rsi
  406f32:	mov    DWORD PTR [rdx+0x14],eax
  406f35:	mov    ebx,DWORD PTR [rdi+0x20]
  406f38:	lea    edx,[rbx+0x8]
  406f3b:	cmp    edx,DWORD PTR [rdi+0x24]
  406f3e:	mov    DWORD PTR [rdi+0x20],edx
  406f41:	jae    406f58 <flatcc_builder_union_vector_push@@Base+0x48>
  406f43:	mov    rax,rbx
  406f46:	add    rax,QWORD PTR [rbp+0x18]
  406f4a:	je     406f69 <flatcc_builder_union_vector_push@@Base+0x59>
  406f4c:	mov    QWORD PTR [rax],r12
  406f4f:	pop    rbx
  406f50:	pop    rbp
  406f51:	pop    r12
  406f53:	ret    
  406f54:	nop    DWORD PTR [rax+0x0]
  406f58:	lea    esi,[rbx+0x9]
  406f5b:	mov    edx,0xfffffffc
  406f60:	call   403cf0 <_start@@Base+0xa50>
  406f65:	test   eax,eax
  406f67:	je     406f43 <flatcc_builder_union_vector_push@@Base+0x33>
  406f69:	pop    rbx
  406f6a:	xor    eax,eax
  406f6c:	pop    rbp
  406f6d:	pop    r12
  406f6f:	ret    
  406f70:	lea    rcx,[rip+0x3729]        # 40a6a0 <_IO_stdin_used@@Base+0x6a0>
  406f77:	lea    rsi,[rip+0x31e2]        # 40a160 <_IO_stdin_used@@Base+0x160>
  406f7e:	lea    rdi,[rip+0x3453]        # 40a3d8 <_IO_stdin_used@@Base+0x3d8>
  406f85:	mov    edx,0x68d
  406f8a:	call   403070 <__assert_fail@plt>
  406f8f:	nop

0000000000406f90 <flatcc_builder_append_union_vector@@Base>:
  406f90:	push   r13
  406f92:	push   r12
  406f94:	push   rbp
  406f95:	push   rbx
  406f96:	sub    rsp,0x8
  406f9a:	mov    rax,QWORD PTR [rdi+0x30]
  406f9e:	cmp    WORD PTR [rax+0xe],0x7
  406fa3:	jne    40701b <flatcc_builder_append_union_vector@@Base+0x8b>
  406fa5:	mov    r13,rsi
  406fa8:	mov    ecx,edx
  406faa:	xor    esi,esi
  406fac:	add    ecx,DWORD PTR [rax+0x14]
  406faf:	setb   sil
  406fb3:	test   esi,esi
  406fb5:	jne    407016 <flatcc_builder_append_union_vector@@Base+0x86>
  406fb7:	cmp    ecx,0x1fffffff
  406fbd:	ja     407016 <flatcc_builder_append_union_vector@@Base+0x86>
  406fbf:	mov    DWORD PTR [rax+0x14],ecx
  406fc2:	mov    r12d,DWORD PTR [rdi+0x20]
  406fc6:	lea    ebx,[rdx*8+0x0]
  406fcd:	mov    rbp,rdi
  406fd0:	mov    rdx,r12
  406fd3:	add    edx,ebx
  406fd5:	cmp    edx,DWORD PTR [rdi+0x24]
  406fd8:	mov    DWORD PTR [rdi+0x20],edx
  406fdb:	jae    407000 <flatcc_builder_append_union_vector@@Base+0x70>
  406fdd:	add    r12,QWORD PTR [rbp+0x18]
  406fe1:	je     406ff0 <flatcc_builder_append_union_vector@@Base+0x60>
  406fe3:	mov    edx,ebx
  406fe5:	mov    rsi,r13
  406fe8:	mov    rdi,r12
  406feb:	call   4030b0 <memcpy@plt>
  406ff0:	add    rsp,0x8
  406ff4:	mov    rax,r12
  406ff7:	pop    rbx
  406ff8:	pop    rbp
  406ff9:	pop    r12
  406ffb:	pop    r13
  406ffd:	ret    
  406ffe:	xchg   ax,ax
  407000:	lea    esi,[rdx+0x1]
  407003:	mov    edx,0xfffffffc
  407008:	call   403cf0 <_start@@Base+0xa50>
  40700d:	test   eax,eax
  40700f:	je     406fdd <flatcc_builder_append_union_vector@@Base+0x4d>
  407011:	xor    r12d,r12d
  407014:	jmp    406ff0 <flatcc_builder_append_union_vector@@Base+0x60>
  407016:	call   403159 <posix_memalign@plt+0x79>
  40701b:	lea    rcx,[rip+0x363e]        # 40a660 <_IO_stdin_used@@Base+0x660>
  407022:	lea    rsi,[rip+0x3137]        # 40a160 <_IO_stdin_used@@Base+0x160>
  407029:	lea    rdi,[rip+0x33a8]        # 40a3d8 <_IO_stdin_used@@Base+0x3d8>
  407030:	mov    edx,0x69c
  407035:	call   403070 <__assert_fail@plt>
  40703a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407040 <flatcc_builder_create_string@@Base>:
  407040:	push   rbp
  407041:	push   rbx
  407042:	sub    rsp,0xb8
  407049:	mov    rax,QWORD PTR fs:0x28
  407052:	mov    QWORD PTR [rsp+0xa8],rax
  40705a:	xor    eax,eax
  40705c:	mov    eax,0xffffffff
  407061:	cmp    rdx,rax
  407064:	ja     407130 <flatcc_builder_create_string@@Base+0xf0>
  40706a:	mov    rbx,rdi
  40706d:	mov    edi,DWORD PTR [rdi+0xf0]
  407073:	lea    rcx,[rsp+0xc]
  407078:	mov    DWORD PTR [rsp+0xc],edx
  40707c:	mov    QWORD PTR [rsp+0x28],0x4
  407085:	mov    QWORD PTR [rsp+0x20],rcx
  40708a:	lea    eax,[rdi-0x1]
  40708d:	sub    eax,edx
  40708f:	and    eax,0x3
  407092:	add    eax,0x1
  407095:	test   rdx,rdx
  407098:	jne    407110 <flatcc_builder_create_string@@Base+0xd0>
  40709a:	mov    edx,0x2
  40709f:	mov    ecx,0x1
  4070a4:	mov    r8d,0x4
  4070aa:	add    r8,rax
  4070ad:	mov    rsi,0x40ac40
  4070b4:	mov    ebp,edi
  4070b6:	sub    ebp,r8d
  4070b9:	shl    rcx,0x4
  4070bd:	mov    QWORD PTR [rsp+0x10],r8
  4070c2:	cmp    edi,ebp
  4070c4:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  4070c9:	mov    DWORD PTR [rsp+0x18],edx
  4070cd:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  4070d2:	jle    407134 <flatcc_builder_create_string@@Base+0xf4>
  4070d4:	lea    rsi,[rsp+0x20]
  4070d9:	mov    rdi,QWORD PTR [rbx+0x38]
  4070dd:	mov    ecx,ebp
  4070df:	call   QWORD PTR [rbx+0x48]
  4070e2:	test   eax,eax
  4070e4:	jne    407158 <flatcc_builder_create_string@@Base+0x118>
  4070e6:	mov    DWORD PTR [rbx+0xf0],ebp
  4070ec:	mov    rbx,QWORD PTR [rsp+0xa8]
  4070f4:	xor    rbx,QWORD PTR fs:0x28
  4070fd:	mov    eax,ebp
  4070ff:	jne    407153 <flatcc_builder_create_string@@Base+0x113>
  407101:	add    rsp,0xb8
  407108:	pop    rbx
  407109:	pop    rbp
  40710a:	ret    
  40710b:	nop    DWORD PTR [rax+rax*1+0x0]
  407110:	lea    r8,[rdx+0x4]
  407114:	mov    QWORD PTR [rsp+0x38],rdx
  407119:	mov    QWORD PTR [rsp+0x30],rsi
  40711e:	mov    edx,0x3
  407123:	mov    ecx,0x2
  407128:	jmp    4070aa <flatcc_builder_create_string@@Base+0x6a>
  40712d:	nop    DWORD PTR [rax]
  407130:	xor    ebp,ebp
  407132:	jmp    4070ec <flatcc_builder_create_string@@Base+0xac>
  407134:	lea    rcx,[rip+0x3a55]        # 40ab90 <_IO_stdin_used@@Base+0xb90>
  40713b:	lea    rsi,[rip+0x301e]        # 40a160 <_IO_stdin_used@@Base+0x160>
  407142:	lea    rdi,[rip+0x33ae]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  407149:	mov    edx,0x287
  40714e:	call   403070 <__assert_fail@plt>
  407153:	call   403060 <__stack_chk_fail@plt>
  407158:	call   403136 <posix_memalign@plt+0x56>
  40715d:	nop    DWORD PTR [rax]

0000000000407160 <flatcc_builder_create_string_str@@Base>:
  407160:	push   rbp
  407161:	push   rbx
  407162:	mov    rbp,rdi
  407165:	mov    rdi,rsi
  407168:	mov    rbx,rsi
  40716b:	sub    rsp,0x8
  40716f:	call   403050 <strlen@plt>
  407174:	add    rsp,0x8
  407178:	mov    rsi,rbx
  40717b:	mov    rdi,rbp
  40717e:	pop    rbx
  40717f:	pop    rbp
  407180:	mov    rdx,rax
  407183:	jmp    407040 <flatcc_builder_create_string@@Base>
  407188:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407190 <flatcc_builder_create_string_strn@@Base>:
  407190:	push   r12
  407192:	push   rbp
  407193:	mov    rbp,rsi
  407196:	push   rbx
  407197:	mov    r12,rdi
  40719a:	xor    esi,esi
  40719c:	mov    rdi,rbp
  40719f:	mov    rbx,rdx
  4071a2:	call   403090 <memchr@plt>
  4071a7:	mov    rdx,rax
  4071aa:	mov    rsi,rbp
  4071ad:	mov    rdi,r12
  4071b0:	sub    rdx,rbp
  4071b3:	test   rax,rax
  4071b6:	cmovne rbx,rdx
  4071ba:	mov    rdx,rbx
  4071bd:	pop    rbx
  4071be:	pop    rbp
  4071bf:	pop    r12
  4071c1:	jmp    407040 <flatcc_builder_create_string@@Base>
  4071c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004071d0 <flatcc_builder_end_string@@Base>:
  4071d0:	push   rbp
  4071d1:	push   rbx
  4071d2:	sub    rsp,0x8
  4071d6:	mov    rax,QWORD PTR [rdi+0x30]
  4071da:	cmp    WORD PTR [rax+0xe],0x6
  4071df:	jne    4072a6 <flatcc_builder_end_string@@Base+0xd6>
  4071e5:	mov    edx,DWORD PTR [rax+0x14]
  4071e8:	mov    rbx,rdi
  4071eb:	cmp    edx,DWORD PTR [rdi+0x20]
  4071ee:	jne    407287 <flatcc_builder_end_string@@Base+0xb7>
  4071f4:	mov    rsi,QWORD PTR [rdi+0x18]
  4071f8:	call   407040 <flatcc_builder_create_string@@Base>
  4071fd:	test   eax,eax
  4071ff:	mov    ebp,eax
  407201:	jne    407210 <flatcc_builder_end_string@@Base+0x40>
  407203:	add    rsp,0x8
  407207:	mov    eax,ebp
  407209:	pop    rbx
  40720a:	pop    rbp
  40720b:	ret    
  40720c:	nop    DWORD PTR [rax+0x0]
  407210:	mov    edx,DWORD PTR [rbx+0x20]
  407213:	mov    rdi,QWORD PTR [rbx+0x18]
  407217:	xor    esi,esi
  407219:	call   403080 <memset@plt>
  40721e:	mov    rax,QWORD PTR [rbx+0x30]
  407222:	mov    edi,DWORD PTR [rbx+0x70]
  407225:	mov    esi,DWORD PTR [rax]
  407227:	mov    edx,DWORD PTR [rax+0x8]
  40722a:	mov    ecx,DWORD PTR [rax+0x4]
  40722d:	mov    DWORD PTR [rbx+0x20],edx
  407230:	mov    rdx,rsi
  407233:	mov    DWORD PTR [rbx+0x28],esi
  407236:	add    rsi,QWORD PTR [rbx+0x68]
  40723a:	sub    edi,edx
  40723c:	cmp    ecx,edi
  40723e:	mov    edx,edi
  407240:	cmovb  edx,ecx
  407243:	mov    DWORD PTR [rbx+0x24],edx
  407246:	movzx  edx,WORD PTR [rbx+0xea]
  40724d:	cmp    dx,WORD PTR [rbx+0xe8]
  407254:	mov    QWORD PTR [rbx+0x18],rsi
  407258:	mov    DWORD PTR [rax+0x4],ecx
  40725b:	jbe    407264 <flatcc_builder_end_string@@Base+0x94>
  40725d:	mov    WORD PTR [rbx+0xe8],dx
  407264:	movzx  edx,WORD PTR [rax+0xc]
  407268:	sub    rax,0x24
  40726c:	sub    DWORD PTR [rbx+0x104],0x1
  407273:	mov    QWORD PTR [rbx+0x30],rax
  407277:	mov    eax,ebp
  407279:	mov    WORD PTR [rbx+0xea],dx
  407280:	add    rsp,0x8
  407284:	pop    rbx
  407285:	pop    rbp
  407286:	ret    
  407287:	lea    rcx,[rip+0x33b2]        # 40a640 <_IO_stdin_used@@Base+0x640>
  40728e:	lea    rsi,[rip+0x2ecb]        # 40a160 <_IO_stdin_used@@Base+0x160>
  407295:	lea    rdi,[rip+0x3174]        # 40a410 <_IO_stdin_used@@Base+0x410>
  40729c:	mov    edx,0x6c5
  4072a1:	call   403070 <__assert_fail@plt>
  4072a6:	lea    rcx,[rip+0x3393]        # 40a640 <_IO_stdin_used@@Base+0x640>
  4072ad:	lea    rsi,[rip+0x2eac]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4072b4:	lea    rdi,[rip+0x302d]        # 40a2e8 <_IO_stdin_used@@Base+0x2e8>
  4072bb:	mov    edx,0x6c4
  4072c0:	call   403070 <__assert_fail@plt>
  4072c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004072d0 <flatcc_builder_string_edit@@Base>:
  4072d0:	mov    rax,QWORD PTR [rdi+0x18]
  4072d4:	ret    
  4072d5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004072e0 <flatcc_builder_string_len@@Base>:
  4072e0:	mov    rax,QWORD PTR [rdi+0x30]
  4072e4:	mov    eax,DWORD PTR [rax+0x14]
  4072e7:	ret    
  4072e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004072f0 <flatcc_builder_table_add@@Base>:
  4072f0:	push   r13
  4072f2:	push   r12
  4072f4:	push   rbp
  4072f5:	push   rbx
  4072f6:	sub    rsp,0x8
  4072fa:	mov    rax,QWORD PTR [rdi+0x30]
  4072fe:	cmp    WORD PTR [rax+0xe],0x3
  407303:	jne    407412 <flatcc_builder_table_add@@Base+0x122>
  407309:	cmp    esi,0x7ffc
  40730f:	mov    r12d,esi
  407312:	ja     4073f3 <flatcc_builder_table_add@@Base+0x103>
  407318:	cmp    WORD PTR [rdi+0xea],cx
  40731f:	mov    rbx,rdi
  407322:	jb     407390 <flatcc_builder_table_add@@Base+0xa0>
  407324:	movsxd r13,r12d
  407327:	add    r13,r13
  40732a:	mov    rsi,r13
  40732d:	add    rsi,QWORD PTR [rbx+0x8]
  407331:	cmp    WORD PTR [rsi],0x0
  407335:	jne    4073d4 <flatcc_builder_table_add@@Base+0xe4>
  40733b:	mov    eax,DWORD PTR [rbx+0x14]
  40733e:	movzx  ecx,cx
  407341:	xor    eax,r12d
  407344:	imul   eax,eax,0x9e3779b1
  40734a:	xor    eax,edx
  40734c:	imul   eax,eax,0x9e3779b1
  407352:	mov    DWORD PTR [rbx+0x14],eax
  407355:	mov    eax,DWORD PTR [rbx+0x20]
  407358:	lea    ebp,[rcx+rax*1-0x1]
  40735c:	neg    ecx
  40735e:	and    ebp,ecx
  407360:	add    edx,ebp
  407362:	cmp    edx,DWORD PTR [rbx+0x24]
  407365:	mov    DWORD PTR [rbx+0x20],edx
  407368:	jae    4073b0 <flatcc_builder_table_add@@Base+0xc0>
  40736a:	lea    eax,[rbp+0x4]
  40736d:	mov    WORD PTR [rsi],ax
  407370:	cmp    r12w,WORD PTR [rbx+0x10]
  407375:	jae    4073a0 <flatcc_builder_table_add@@Base+0xb0>
  407377:	mov    eax,ebp
  407379:	add    rax,QWORD PTR [rbx+0x18]
  40737d:	add    rsp,0x8
  407381:	pop    rbx
  407382:	pop    rbp
  407383:	pop    r12
  407385:	pop    r13
  407387:	ret    
  407388:	nop    DWORD PTR [rax+rax*1+0x0]
  407390:	mov    WORD PTR [rdi+0xea],cx
  407397:	jmp    407324 <flatcc_builder_table_add@@Base+0x34>
  407399:	nop    DWORD PTR [rax+0x0]
  4073a0:	add    r12d,0x1
  4073a4:	mov    WORD PTR [rbx+0x10],r12w
  4073a9:	jmp    407377 <flatcc_builder_table_add@@Base+0x87>
  4073ab:	nop    DWORD PTR [rax+rax*1+0x0]
  4073b0:	lea    esi,[rdx+0x1]
  4073b3:	mov    rdi,rbx
  4073b6:	mov    edx,0xfffc
  4073bb:	call   403cf0 <_start@@Base+0xa50>
  4073c0:	test   eax,eax
  4073c2:	jne    4073d0 <flatcc_builder_table_add@@Base+0xe0>
  4073c4:	mov    rsi,r13
  4073c7:	add    rsi,QWORD PTR [rbx+0x8]
  4073cb:	jmp    40736a <flatcc_builder_table_add@@Base+0x7a>
  4073cd:	nop    DWORD PTR [rax]
  4073d0:	xor    eax,eax
  4073d2:	jmp    40737d <flatcc_builder_table_add@@Base+0x8d>
  4073d4:	lea    rcx,[rip+0x3245]        # 40a620 <_IO_stdin_used@@Base+0x620>
  4073db:	lea    rsi,[rip+0x2d7e]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4073e2:	lea    rdi,[rip+0x310e]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  4073e9:	mov    edx,0x6f8
  4073ee:	call   403070 <__assert_fail@plt>
  4073f3:	lea    rcx,[rip+0x3226]        # 40a620 <_IO_stdin_used@@Base+0x620>
  4073fa:	lea    rsi,[rip+0x2d5f]        # 40a160 <_IO_stdin_used@@Base+0x160>
  407401:	lea    rdi,[rip+0x3030]        # 40a438 <_IO_stdin_used@@Base+0x438>
  407408:	mov    edx,0x6ee
  40740d:	call   403070 <__assert_fail@plt>
  407412:	lea    rcx,[rip+0x3207]        # 40a620 <_IO_stdin_used@@Base+0x620>
  407419:	lea    rsi,[rip+0x2d40]        # 40a160 <_IO_stdin_used@@Base+0x160>
  407420:	lea    rdi,[rip+0x2f81]        # 40a3a8 <_IO_stdin_used@@Base+0x3a8>
  407427:	mov    edx,0x6ed
  40742c:	call   403070 <__assert_fail@plt>
  407431:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40743c:	nop    DWORD PTR [rax+0x0]

0000000000407440 <flatcc_builder_table_edit@@Base>:
  407440:	mov    rax,QWORD PTR [rdi+0x30]
  407444:	cmp    WORD PTR [rax+0xe],0x3
  407449:	jne    407456 <flatcc_builder_table_edit@@Base+0x16>
  40744b:	mov    eax,DWORD PTR [rdi+0x20]
  40744e:	sub    rax,rsi
  407451:	add    rax,QWORD PTR [rdi+0x18]
  407455:	ret    
  407456:	lea    rcx,[rip+0x31a3]        # 40a600 <_IO_stdin_used@@Base+0x600>
  40745d:	lea    rsi,[rip+0x2cfc]        # 40a160 <_IO_stdin_used@@Base+0x160>
  407464:	lea    rdi,[rip+0x2f3d]        # 40a3a8 <_IO_stdin_used@@Base+0x3a8>
  40746b:	sub    rsp,0x8
  40746f:	mov    edx,0x702
  407474:	call   403070 <__assert_fail@plt>
  407479:	nop    DWORD PTR [rax+0x0]

0000000000407480 <flatcc_builder_table_add_copy@@Base>:
  407480:	push   rbp
  407481:	push   rbx
  407482:	mov    rbx,rcx
  407485:	mov    rbp,rdx
  407488:	movzx  ecx,r8w
  40748c:	mov    rdx,rbx
  40748f:	sub    rsp,0x8
  407493:	call   4072f0 <flatcc_builder_table_add@@Base>
  407498:	test   rax,rax
  40749b:	mov    rcx,rax
  40749e:	je     4074b1 <flatcc_builder_table_add_copy@@Base+0x31>
  4074a0:	mov    rdx,rbx
  4074a3:	mov    rsi,rbp
  4074a6:	mov    rdi,rax
  4074a9:	call   4030b0 <memcpy@plt>
  4074ae:	mov    rcx,rax
  4074b1:	add    rsp,0x8
  4074b5:	mov    rax,rcx
  4074b8:	pop    rbx
  4074b9:	pop    rbp
  4074ba:	ret    
  4074bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004074c0 <flatcc_builder_table_add_offset@@Base>:
  4074c0:	push   r13
  4074c2:	push   r12
  4074c4:	push   rbp
  4074c5:	push   rbx
  4074c6:	sub    rsp,0x8
  4074ca:	mov    rax,QWORD PTR [rdi+0x30]
  4074ce:	cmp    WORD PTR [rax+0xe],0x3
  4074d3:	jne    4075d2 <flatcc_builder_table_add_offset@@Base+0x112>
  4074d9:	cmp    esi,0x7ffc
  4074df:	mov    r12d,esi
  4074e2:	ja     4075b3 <flatcc_builder_table_add_offset@@Base+0xf3>
  4074e8:	movsxd r13,esi
  4074eb:	mov    rbx,rdi
  4074ee:	add    r13,r13
  4074f1:	mov    rdx,r13
  4074f4:	add    rdx,QWORD PTR [rdi+0x8]
  4074f8:	cmp    WORD PTR [rdx],0x0
  4074fc:	jne    407594 <flatcc_builder_table_add_offset@@Base+0xd4>
  407502:	mov    eax,DWORD PTR [rdi+0x14]
  407505:	xor    eax,esi
  407507:	imul   eax,eax,0x9e3779b1
  40750d:	xor    eax,0x4
  407510:	imul   eax,eax,0x9e3779b1
  407516:	mov    DWORD PTR [rdi+0x14],eax
  407519:	mov    eax,DWORD PTR [rdi+0x20]
  40751c:	lea    ebp,[rax+0x3]
  40751f:	and    ebp,0xfffffffc
  407522:	lea    esi,[rbp+0x4]
  407525:	cmp    esi,DWORD PTR [rdi+0x24]
  407528:	mov    DWORD PTR [rdi+0x20],esi
  40752b:	ja     407570 <flatcc_builder_table_add_offset@@Base+0xb0>
  40752d:	lea    eax,[rbp+0x4]
  407530:	mov    WORD PTR [rdx],ax
  407533:	cmp    r12w,WORD PTR [rbx+0x10]
  407538:	jae    407560 <flatcc_builder_table_add_offset@@Base+0xa0>
  40753a:	mov    rax,QWORD PTR [rbx]
  40753d:	lea    rdx,[rax+0x2]
  407541:	mov    QWORD PTR [rbx],rdx
  407544:	mov    WORD PTR [rax],bp
  407547:	mov    eax,ebp
  407549:	add    rax,QWORD PTR [rbx+0x18]
  40754d:	add    rsp,0x8
  407551:	pop    rbx
  407552:	pop    rbp
  407553:	pop    r12
  407555:	pop    r13
  407557:	ret    
  407558:	nop    DWORD PTR [rax+rax*1+0x0]
  407560:	lea    esi,[r12+0x1]
  407565:	mov    WORD PTR [rbx+0x10],si
  407569:	jmp    40753a <flatcc_builder_table_add_offset@@Base+0x7a>
  40756b:	nop    DWORD PTR [rax+rax*1+0x0]
  407570:	mov    edx,0xfffc
  407575:	call   403cf0 <_start@@Base+0xa50>
  40757a:	test   eax,eax
  40757c:	jne    407590 <flatcc_builder_table_add_offset@@Base+0xd0>
  40757e:	mov    rdx,r13
  407581:	add    rdx,QWORD PTR [rbx+0x8]
  407585:	jmp    40752d <flatcc_builder_table_add_offset@@Base+0x6d>
  407587:	nop    WORD PTR [rax+rax*1+0x0]
  407590:	xor    eax,eax
  407592:	jmp    40754d <flatcc_builder_table_add_offset@@Base+0x8d>
  407594:	lea    rcx,[rip+0x3045]        # 40a5e0 <_IO_stdin_used@@Base+0x5e0>
  40759b:	lea    rsi,[rip+0x2bbe]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4075a2:	lea    rdi,[rip+0x2f4e]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  4075a9:	mov    edx,0x71b
  4075ae:	call   403070 <__assert_fail@plt>
  4075b3:	lea    rcx,[rip+0x3026]        # 40a5e0 <_IO_stdin_used@@Base+0x5e0>
  4075ba:	lea    rsi,[rip+0x2b9f]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4075c1:	lea    rdi,[rip+0x2e70]        # 40a438 <_IO_stdin_used@@Base+0x438>
  4075c8:	mov    edx,0x714
  4075cd:	call   403070 <__assert_fail@plt>
  4075d2:	lea    rcx,[rip+0x3007]        # 40a5e0 <_IO_stdin_used@@Base+0x5e0>
  4075d9:	lea    rsi,[rip+0x2b80]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4075e0:	lea    rdi,[rip+0x2dc1]        # 40a3a8 <_IO_stdin_used@@Base+0x3a8>
  4075e7:	mov    edx,0x713
  4075ec:	call   403070 <__assert_fail@plt>
  4075f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4075fc:	nop    DWORD PTR [rax+0x0]

0000000000407600 <flatcc_builder_table_add_union@@Base>:
  407600:	push   r13
  407602:	push   r12
  407604:	mov    r13,rdx
  407607:	push   rbp
  407608:	push   rbx
  407609:	sar    r13,0x20
  40760d:	sub    rsp,0x8
  407611:	mov    rax,QWORD PTR [rdi+0x30]
  407615:	cmp    WORD PTR [rax+0xe],0x3
  40761a:	jne    407694 <flatcc_builder_table_add_union@@Base+0x94>
  40761c:	test   dl,dl
  40761e:	mov    r12,rdi
  407621:	mov    ebx,esi
  407623:	mov    rbp,rdx
  407626:	je     407670 <flatcc_builder_table_add_union@@Base+0x70>
  407628:	test   r13d,r13d
  40762b:	je     40763e <flatcc_builder_table_add_union@@Base+0x3e>
  40762d:	call   4074c0 <flatcc_builder_table_add_offset@@Base>
  407632:	test   rax,rax
  407635:	je     4076d2 <flatcc_builder_table_add_union@@Base+0xd2>
  40763b:	mov    DWORD PTR [rax],r13d
  40763e:	lea    esi,[rbx-0x1]
  407641:	mov    ecx,0x1
  407646:	mov    edx,0x1
  40764b:	mov    rdi,r12
  40764e:	call   4072f0 <flatcc_builder_table_add@@Base>
  407653:	test   rax,rax
  407656:	je     4076b3 <flatcc_builder_table_add_union@@Base+0xb3>
  407658:	mov    BYTE PTR [rax],bpl
  40765b:	add    rsp,0x8
  40765f:	xor    eax,eax
  407661:	pop    rbx
  407662:	pop    rbp
  407663:	pop    r12
  407665:	pop    r13
  407667:	ret    
  407668:	nop    DWORD PTR [rax+rax*1+0x0]
  407670:	test   r13d,r13d
  407673:	je     40763e <flatcc_builder_table_add_union@@Base+0x3e>
  407675:	lea    rcx,[rip+0x30f4]        # 40a770 <_IO_stdin_used@@Base+0x770>
  40767c:	lea    rsi,[rip+0x2add]        # 40a160 <_IO_stdin_used@@Base+0x160>
  407683:	lea    rdi,[rip+0x2df6]        # 40a480 <_IO_stdin_used@@Base+0x480>
  40768a:	mov    edx,0x5ef
  40768f:	call   403070 <__assert_fail@plt>
  407694:	lea    rcx,[rip+0x30d5]        # 40a770 <_IO_stdin_used@@Base+0x770>
  40769b:	lea    rsi,[rip+0x2abe]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4076a2:	lea    rdi,[rip+0x2cff]        # 40a3a8 <_IO_stdin_used@@Base+0x3a8>
  4076a9:	mov    edx,0x5ee
  4076ae:	call   403070 <__assert_fail@plt>
  4076b3:	lea    rcx,[rip+0x30b6]        # 40a770 <_IO_stdin_used@@Base+0x770>
  4076ba:	lea    rsi,[rip+0x2a9f]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4076c1:	lea    rdi,[rip+0x2ebe]        # 40a586 <_IO_stdin_used@@Base+0x586>
  4076c8:	mov    edx,0x5f6
  4076cd:	call   403070 <__assert_fail@plt>
  4076d2:	lea    rcx,[rip+0x3097]        # 40a770 <_IO_stdin_used@@Base+0x770>
  4076d9:	lea    rsi,[rip+0x2a80]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4076e0:	lea    rdi,[rip+0x2e95]        # 40a57c <_IO_stdin_used@@Base+0x57c>
  4076e7:	mov    edx,0x5f2
  4076ec:	call   403070 <__assert_fail@plt>
  4076f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4076fc:	nop    DWORD PTR [rax+0x0]

0000000000407700 <flatcc_builder_table_add_union_vector@@Base>:
  407700:	push   r13
  407702:	push   r12
  407704:	push   rbp
  407705:	push   rbx
  407706:	mov    rbp,rdx
  407709:	sar    rbp,0x20
  40770d:	sub    rsp,0x18
  407711:	mov    rax,QWORD PTR [rdi+0x30]
  407715:	cmp    WORD PTR [rax+0xe],0x3
  40771a:	jne    407796 <flatcc_builder_table_add_union_vector@@Base+0x96>
  40771c:	test   ebp,ebp
  40771e:	sete   al
  407721:	test   edx,edx
  407723:	sete   cl
  407726:	cmp    cl,al
  407728:	je     407750 <flatcc_builder_table_add_union_vector@@Base+0x50>
  40772a:	test   edx,edx
  40772c:	setne  dl
  40772f:	cmp    al,dl
  407731:	je     4077b5 <flatcc_builder_table_add_union_vector@@Base+0xb5>
  407737:	mov    r12d,0xffffffff
  40773d:	add    rsp,0x18
  407741:	mov    eax,r12d
  407744:	pop    rbx
  407745:	pop    rbp
  407746:	pop    r12
  407748:	pop    r13
  40774a:	ret    
  40774b:	nop    DWORD PTR [rax+rax*1+0x0]
  407750:	xor    r12d,r12d
  407753:	test   edx,edx
  407755:	je     40773d <flatcc_builder_table_add_union_vector@@Base+0x3d>
  407757:	mov    r13d,esi
  40775a:	lea    esi,[rsi-0x1]
  40775d:	mov    QWORD PTR [rsp+0x8],rdx
  407762:	mov    rbx,rdi
  407765:	call   4074c0 <flatcc_builder_table_add_offset@@Base>
  40776a:	test   rax,rax
  40776d:	mov    rdx,QWORD PTR [rsp+0x8]
  407772:	je     4077f3 <flatcc_builder_table_add_union_vector@@Base+0xf3>
  407774:	mov    DWORD PTR [rax],edx
  407776:	mov    esi,r13d
  407779:	mov    rdi,rbx
  40777c:	call   4074c0 <flatcc_builder_table_add_offset@@Base>
  407781:	test   rax,rax
  407784:	je     4077d4 <flatcc_builder_table_add_union_vector@@Base+0xd4>
  407786:	mov    DWORD PTR [rax],ebp
  407788:	add    rsp,0x18
  40778c:	mov    eax,r12d
  40778f:	pop    rbx
  407790:	pop    rbp
  407791:	pop    r12
  407793:	pop    r13
  407795:	ret    
  407796:	lea    rcx,[rip+0x2fa3]        # 40a740 <_IO_stdin_used@@Base+0x740>
  40779d:	lea    rsi,[rip+0x29bc]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4077a4:	lea    rdi,[rip+0x2bfd]        # 40a3a8 <_IO_stdin_used@@Base+0x3a8>
  4077ab:	mov    edx,0x600
  4077b0:	call   403070 <__assert_fail@plt>
  4077b5:	lea    rcx,[rip+0x2f84]        # 40a740 <_IO_stdin_used@@Base+0x740>
  4077bc:	lea    rsi,[rip+0x299d]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4077c3:	lea    rdi,[rip+0x2cde]        # 40a4a8 <_IO_stdin_used@@Base+0x4a8>
  4077ca:	mov    edx,0x601
  4077cf:	call   403070 <__assert_fail@plt>
  4077d4:	lea    rcx,[rip+0x2f65]        # 40a740 <_IO_stdin_used@@Base+0x740>
  4077db:	lea    rsi,[rip+0x297e]        # 40a160 <_IO_stdin_used@@Base+0x160>
  4077e2:	lea    rdi,[rip+0x2d93]        # 40a57c <_IO_stdin_used@@Base+0x57c>
  4077e9:	mov    edx,0x608
  4077ee:	call   403070 <__assert_fail@plt>
  4077f3:	lea    rcx,[rip+0x2f46]        # 40a740 <_IO_stdin_used@@Base+0x740>
  4077fa:	lea    rsi,[rip+0x295f]        # 40a160 <_IO_stdin_used@@Base+0x160>
  407801:	lea    rdi,[rip+0x2d74]        # 40a57c <_IO_stdin_used@@Base+0x57c>
  407808:	mov    edx,0x604
  40780d:	call   403070 <__assert_fail@plt>
  407812:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40781d:	nop    DWORD PTR [rax]

0000000000407820 <flatcc_builder_push_buffer_alignment@@Base>:
  407820:	mov    edx,0x4
  407825:	movzx  eax,WORD PTR [rdi+0xe8]
  40782c:	mov    WORD PTR [rdi+0xe8],dx
  407833:	ret    
  407834:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40783f:	nop

0000000000407840 <flatcc_builder_pop_buffer_alignment@@Base>:
  407840:	cmp    si,WORD PTR [rdi+0xe8]
  407847:	jbe    407850 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  407849:	mov    WORD PTR [rdi+0xe8],si
  407850:	repz ret 
  407852:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40785d:	nop    DWORD PTR [rax]

0000000000407860 <flatcc_builder_get_buffer_alignment@@Base>:
  407860:	movzx  eax,WORD PTR [rdi+0xe8]
  407867:	ret    
  407868:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407870 <flatcc_builder_set_vtable_clustering@@Base>:
  407870:	xor    eax,eax
  407872:	test   esi,esi
  407874:	sete   al
  407877:	mov    DWORD PTR [rdi+0x124],eax
  40787d:	ret    
  40787e:	xchg   ax,ax

0000000000407880 <flatcc_builder_set_block_align@@Base>:
  407880:	mov    WORD PTR [rdi+0xec],si
  407887:	ret    
  407888:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407890 <flatcc_builder_get_level@@Base>:
  407890:	mov    eax,DWORD PTR [rdi+0x104]
  407896:	ret    
  407897:	nop    WORD PTR [rax+rax*1+0x0]

00000000004078a0 <flatcc_builder_set_max_level@@Base>:
  4078a0:	cmp    esi,DWORD PTR [rdi+0x108]
  4078a6:	mov    DWORD PTR [rdi+0x120],esi
  4078ac:	jle    4078b4 <flatcc_builder_set_max_level@@Base+0x14>
  4078ae:	mov    DWORD PTR [rdi+0x108],esi
  4078b4:	repz ret 
  4078b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004078c0 <flatcc_builder_get_buffer_size@@Base>:
  4078c0:	mov    eax,DWORD PTR [rdi+0xf4]
  4078c6:	sub    eax,DWORD PTR [rdi+0xf0]
  4078cc:	cdqe   
  4078ce:	ret    
  4078cf:	nop

00000000004078d0 <flatcc_builder_get_buffer_start@@Base>:
  4078d0:	mov    eax,DWORD PTR [rdi+0xf0]
  4078d6:	ret    
  4078d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004078e0 <flatcc_builder_get_buffer_end@@Base>:
  4078e0:	mov    eax,DWORD PTR [rdi+0xf4]
  4078e6:	ret    
  4078e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004078f0 <flatcc_builder_set_vtable_cache_limit@@Base>:
  4078f0:	mov    QWORD PTR [rdi+0x118],rsi
  4078f7:	ret    
  4078f8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407900 <flatcc_builder_set_identifier@@Base>:
  407900:	test   rsi,rsi
  407903:	je     407910 <flatcc_builder_set_identifier@@Base+0x10>
  407905:	mov    eax,DWORD PTR [rsi]
  407907:	mov    DWORD PTR [rdi+0x110],eax
  40790d:	ret    
  40790e:	xchg   ax,ax
  407910:	mov    rsi,0x40ac40
  407917:	mov    eax,DWORD PTR [rsi]
  407919:	mov    DWORD PTR [rdi+0x110],eax
  40791f:	ret    

0000000000407920 <flatcc_builder_get_type@@Base>:
  407920:	mov    rax,QWORD PTR [rdi+0x30]
  407924:	test   rax,rax
  407927:	je     407930 <flatcc_builder_get_type@@Base+0x10>
  407929:	movzx  eax,WORD PTR [rax+0xe]
  40792d:	ret    
  40792e:	xchg   ax,ax
  407930:	xor    eax,eax
  407932:	ret    
  407933:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40793e:	xchg   ax,ax

0000000000407940 <flatcc_builder_get_type_at@@Base>:
  407940:	test   esi,esi
  407942:	jle    407970 <flatcc_builder_get_type_at@@Base+0x30>
  407944:	mov    edx,DWORD PTR [rdi+0x104]
  40794a:	xor    eax,eax
  40794c:	cmp    esi,edx
  40794e:	jg     407972 <flatcc_builder_get_type_at@@Base+0x32>
  407950:	sub    esi,edx
  407952:	mov    rdx,QWORD PTR [rdi+0x30]
  407956:	movsxd rsi,esi
  407959:	lea    rax,[rsi+rsi*8]
  40795d:	lea    rax,[rdx+rax*4]
  407961:	movzx  eax,WORD PTR [rax+0xe]
  407965:	ret    
  407966:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407970:	xor    eax,eax
  407972:	repz ret 
  407974:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40797f:	nop

0000000000407980 <flatcc_builder_get_direct_buffer@@Base>:
  407980:	mov    eax,DWORD PTR [rdi+0x128]
  407986:	test   eax,eax
  407988:	je     40799a <flatcc_builder_get_direct_buffer@@Base+0x1a>
  40798a:	mov    rax,QWORD PTR [rdi+0x138]
  407991:	cmp    QWORD PTR [rdi+0x130],rax
  407998:	je     4079b0 <flatcc_builder_get_direct_buffer@@Base+0x30>
  40799a:	test   rsi,rsi
  40799d:	jne    4079a2 <flatcc_builder_get_direct_buffer@@Base+0x22>
  40799f:	xor    eax,eax
  4079a1:	ret    
  4079a2:	mov    QWORD PTR [rsi],0x0
  4079a9:	xor    eax,eax
  4079ab:	ret    
  4079ac:	nop    DWORD PTR [rax+0x0]
  4079b0:	test   rsi,rsi
  4079b3:	je     4079bf <flatcc_builder_get_direct_buffer@@Base+0x3f>
  4079b5:	mov    rax,QWORD PTR [rdi+0x160]
  4079bc:	mov    QWORD PTR [rsi],rax
  4079bf:	mov    rax,QWORD PTR [rdi+0x140]
  4079c6:	ret    
  4079c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004079d0 <flatcc_builder_copy_buffer@@Base>:
  4079d0:	mov    eax,DWORD PTR [rdi+0x128]
  4079d6:	test   eax,eax
  4079d8:	je     4079f8 <flatcc_builder_copy_buffer@@Base+0x28>
  4079da:	sub    rsp,0x8
  4079de:	add    rdi,0x130
  4079e5:	call   4081d0 <flatcc_emitter_copy_buffer@@Base>
  4079ea:	test   rax,rax
  4079ed:	je     4079fb <flatcc_builder_copy_buffer@@Base+0x2b>
  4079ef:	add    rsp,0x8
  4079f3:	ret    
  4079f4:	nop    DWORD PTR [rax+0x0]
  4079f8:	xor    eax,eax
  4079fa:	ret    
  4079fb:	lea    rcx,[rip+0x2bbe]        # 40a5c0 <_IO_stdin_used@@Base+0x5c0>
  407a02:	lea    rsi,[rip+0x2757]        # 40a160 <_IO_stdin_used@@Base+0x160>
  407a09:	lea    rdi,[rip+0x2b82]        # 40a592 <_IO_stdin_used@@Base+0x592>
  407a10:	mov    edx,0x786
  407a15:	call   403070 <__assert_fail@plt>
  407a1a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407a20 <flatcc_builder_finalize_buffer@@Base>:
  407a20:	push   r12
  407a22:	push   rbp
  407a23:	mov    r12,rdi
  407a26:	push   rbx
  407a27:	mov    rbx,rsi
  407a2a:	call   4078c0 <flatcc_builder_get_buffer_size@@Base>
  407a2f:	test   rbx,rbx
  407a32:	mov    rbp,rax
  407a35:	je     407a3a <flatcc_builder_finalize_buffer@@Base+0x1a>
  407a37:	mov    QWORD PTR [rbx],rax
  407a3a:	mov    rdi,rbp
  407a3d:	call   4030c0 <malloc@plt>
  407a42:	test   rax,rax
  407a45:	mov    rbx,rax
  407a48:	je     407a65 <flatcc_builder_finalize_buffer@@Base+0x45>
  407a4a:	mov    rdx,rbp
  407a4d:	mov    rsi,rax
  407a50:	mov    rdi,r12
  407a53:	call   4079d0 <flatcc_builder_copy_buffer@@Base>
  407a58:	test   rax,rax
  407a5b:	je     407a84 <flatcc_builder_finalize_buffer@@Base+0x64>
  407a5d:	mov    rax,rbx
  407a60:	pop    rbx
  407a61:	pop    rbp
  407a62:	pop    r12
  407a64:	ret    
  407a65:	lea    rcx,[rip+0x2b34]        # 40a5a0 <_IO_stdin_used@@Base+0x5a0>
  407a6c:	lea    rsi,[rip+0x26ed]        # 40a160 <_IO_stdin_used@@Base+0x160>
  407a73:	lea    rdi,[rip+0x2a7d]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  407a7a:	mov    edx,0x798
  407a7f:	call   403070 <__assert_fail@plt>
  407a84:	lea    rcx,[rip+0x2b15]        # 40a5a0 <_IO_stdin_used@@Base+0x5a0>
  407a8b:	lea    rsi,[rip+0x26ce]        # 40a160 <_IO_stdin_used@@Base+0x160>
  407a92:	lea    rdi,[rip+0x2a5e]        # 40a4f7 <_IO_stdin_used@@Base+0x4f7>
  407a99:	mov    edx,0x79c
  407a9e:	call   403070 <__assert_fail@plt>
  407aa3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407aae:	xchg   ax,ax

0000000000407ab0 <flatcc_builder_finalize_aligned_buffer@@Base>:
  407ab0:	push   r13
  407ab2:	push   r12
  407ab4:	mov    r12,rdi
  407ab7:	push   rbp
  407ab8:	push   rbx
  407ab9:	mov    rbp,rsi
  407abc:	sub    rsp,0x18
  407ac0:	mov    rax,QWORD PTR fs:0x28
  407ac9:	mov    QWORD PTR [rsp+0x8],rax
  407ace:	xor    eax,eax
  407ad0:	call   4078c0 <flatcc_builder_get_buffer_size@@Base>
  407ad5:	test   rbp,rbp
  407ad8:	mov    rbx,rax
  407adb:	je     407ae1 <flatcc_builder_finalize_aligned_buffer@@Base+0x31>
  407add:	mov    QWORD PTR [rbp+0x0],rax
  407ae1:	mov    rdi,r12
  407ae4:	call   407860 <flatcc_builder_get_buffer_alignment@@Base>
  407ae9:	movzx  eax,ax
  407aec:	mov    esi,0x8
  407af1:	mov    rdi,rsp
  407af4:	lea    rdx,[rbx+rax*1-0x1]
  407af9:	mov    rbx,rax
  407afc:	mov    QWORD PTR [rsp],0x0
  407b04:	neg    rbx
  407b07:	and    rbx,rdx
  407b0a:	cmp    rax,0x8
  407b0e:	cmovae rsi,rax
  407b12:	mov    rdx,rbx
  407b15:	call   4030e0 <posix_memalign@plt>
  407b1a:	test   eax,eax
  407b1c:	je     407b60 <flatcc_builder_finalize_aligned_buffer@@Base+0xb0>
  407b1e:	mov    rdi,QWORD PTR [rsp]
  407b22:	test   rdi,rdi
  407b25:	je     407b2c <flatcc_builder_finalize_aligned_buffer@@Base+0x7c>
  407b27:	call   403030 <free@plt>
  407b2c:	test   rbp,rbp
  407b2f:	je     407b86 <flatcc_builder_finalize_aligned_buffer@@Base+0xd6>
  407b31:	mov    QWORD PTR [rbp+0x0],0x0
  407b39:	xor    r13d,r13d
  407b3c:	mov    rcx,QWORD PTR [rsp+0x8]
  407b41:	xor    rcx,QWORD PTR fs:0x28
  407b4a:	mov    rax,r13
  407b4d:	jne    407b81 <flatcc_builder_finalize_aligned_buffer@@Base+0xd1>
  407b4f:	add    rsp,0x18
  407b53:	pop    rbx
  407b54:	pop    rbp
  407b55:	pop    r12
  407b57:	pop    r13
  407b59:	ret    
  407b5a:	nop    WORD PTR [rax+rax*1+0x0]
  407b60:	mov    r13,QWORD PTR [rsp]
  407b64:	test   r13,r13
  407b67:	je     407b2c <flatcc_builder_finalize_aligned_buffer@@Base+0x7c>
  407b69:	mov    rdx,rbx
  407b6c:	mov    rsi,r13
  407b6f:	mov    rdi,r12
  407b72:	call   4079d0 <flatcc_builder_copy_buffer@@Base>
  407b77:	test   rax,rax
  407b7a:	jne    407b3c <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
  407b7c:	mov    rdi,r13
  407b7f:	jmp    407b27 <flatcc_builder_finalize_aligned_buffer@@Base+0x77>
  407b81:	call   403060 <__stack_chk_fail@plt>
  407b86:	xor    r13d,r13d
  407b89:	jmp    407b3c <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
  407b8b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407b90 <flatcc_builder_aligned_alloc@@Base>:
  407b90:	sub    rsp,0x18
  407b94:	mov    rdx,rsi
  407b97:	mov    esi,0x8
  407b9c:	mov    rax,QWORD PTR fs:0x28
  407ba5:	mov    QWORD PTR [rsp+0x8],rax
  407baa:	xor    eax,eax
  407bac:	cmp    rdi,0x8
  407bb0:	mov    QWORD PTR [rsp],0x0
  407bb8:	cmovae rsi,rdi
  407bbc:	mov    rdi,rsp
  407bbf:	call   4030e0 <posix_memalign@plt>
  407bc4:	test   eax,eax
  407bc6:	mov    rax,QWORD PTR [rsp]
  407bca:	je     407bdb <flatcc_builder_aligned_alloc@@Base+0x4b>
  407bcc:	test   rax,rax
  407bcf:	je     407bdb <flatcc_builder_aligned_alloc@@Base+0x4b>
  407bd1:	mov    rdi,rax
  407bd4:	call   403030 <free@plt>
  407bd9:	xor    eax,eax
  407bdb:	mov    rcx,QWORD PTR [rsp+0x8]
  407be0:	xor    rcx,QWORD PTR fs:0x28
  407be9:	jne    407bf0 <flatcc_builder_aligned_alloc@@Base+0x60>
  407beb:	add    rsp,0x18
  407bef:	ret    
  407bf0:	call   403060 <__stack_chk_fail@plt>
  407bf5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407c00 <flatcc_builder_aligned_free@@Base>:
  407c00:	jmp    403030 <free@plt>
  407c05:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407c10 <flatcc_builder_get_emit_context@@Base>:
  407c10:	mov    rax,QWORD PTR [rdi+0x38]
  407c14:	ret    
  407c15:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407c1f:	nop

0000000000407c20 <flatcc_emitter_recycle_page@@Base>:
  407c20:	mov    rax,QWORD PTR [rdi]
  407c23:	cmp    rax,rsi
  407c26:	je     407c80 <flatcc_emitter_recycle_page@@Base+0x60>
  407c28:	cmp    rsi,QWORD PTR [rdi+0x8]
  407c2c:	je     407c80 <flatcc_emitter_recycle_page@@Base+0x60>
  407c2e:	mov    rdx,QWORD PTR [rsi+0xb80]
  407c35:	mov    rcx,QWORD PTR [rsi+0xb88]
  407c3c:	mov    QWORD PTR [rdx+0xb88],rcx
  407c43:	mov    rcx,QWORD PTR [rsi+0xb88]
  407c4a:	mov    QWORD PTR [rcx+0xb80],rdx
  407c51:	mov    rdx,QWORD PTR [rax+0xb88]
  407c58:	mov    QWORD PTR [rsi+0xb80],rax
  407c5f:	mov    QWORD PTR [rsi+0xb88],rdx
  407c66:	mov    QWORD PTR [rdx+0xb80],rsi
  407c6d:	mov    rax,QWORD PTR [rsi+0xb80]
  407c74:	mov    QWORD PTR [rax+0xb88],rsi
  407c7b:	xor    eax,eax
  407c7d:	ret    
  407c7e:	xchg   ax,ax
  407c80:	mov    eax,0xffffffff
  407c85:	ret    
  407c86:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000407c90 <flatcc_emitter_reset@@Base>:
  407c90:	mov    rax,QWORD PTR [rdi]
  407c93:	test   rax,rax
  407c96:	je     407d5d <flatcc_emitter_reset@@Base+0xcd>
  407c9c:	lea    rdx,[rax+0x5c0]
  407ca3:	mov    QWORD PTR [rdi+0x8],rax
  407ca7:	mov    QWORD PTR [rdi+0x18],0x5c0
  407caf:	mov    QWORD PTR [rdi+0x28],0x5c0
  407cb7:	mov    rcx,QWORD PTR [rdi+0x30]
  407cbb:	mov    QWORD PTR [rdi+0x10],rdx
  407cbf:	mov    QWORD PTR [rdi+0x20],rdx
  407cc3:	mov    rdx,QWORD PTR [rdi+0x40]
  407cc7:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  407cd1:	test   rdx,rdx
  407cd4:	je     407d60 <flatcc_emitter_reset@@Base+0xd0>
  407cda:	lea    rdx,[rdx+rdx*2]
  407cde:	shr    rcx,0x2
  407ce2:	mov    QWORD PTR [rdi+0x30],0x0
  407cea:	shr    rdx,0x2
  407cee:	add    rdx,rcx
  407cf1:	mov    QWORD PTR [rdi+0x40],rdx
  407cf5:	add    rdx,rdx
  407cf8:	cmp    QWORD PTR [rdi+0x38],rdx
  407cfc:	jbe    407d5d <flatcc_emitter_reset@@Base+0xcd>
  407cfe:	push   rbx
  407cff:	mov    rbx,rdi
  407d02:	mov    rdi,QWORD PTR [rax+0xb80]
  407d09:	cmp    rax,rdi
  407d0c:	jne    407d20 <flatcc_emitter_reset@@Base+0x90>
  407d0e:	jmp    407d5c <flatcc_emitter_reset@@Base+0xcc>
  407d10:	mov    rax,QWORD PTR [rbx+0x8]
  407d14:	mov    rdi,QWORD PTR [rax+0xb80]
  407d1b:	cmp    rdi,QWORD PTR [rbx]
  407d1e:	je     407d5c <flatcc_emitter_reset@@Base+0xcc>
  407d20:	mov    rdx,QWORD PTR [rdi+0xb80]
  407d27:	mov    QWORD PTR [rax+0xb80],rdx
  407d2e:	mov    rdx,QWORD PTR [rdi+0xb80]
  407d35:	mov    QWORD PTR [rdx+0xb88],rax
  407d3c:	call   403030 <free@plt>
  407d41:	mov    rsi,QWORD PTR [rbx+0x40]
  407d45:	mov    rax,QWORD PTR [rbx+0x38]
  407d49:	lea    rdx,[rsi+rsi*1]
  407d4d:	sub    rax,0xb80
  407d53:	mov    QWORD PTR [rbx+0x38],rax
  407d57:	cmp    rdx,rax
  407d5a:	jb     407d10 <flatcc_emitter_reset@@Base+0x80>
  407d5c:	pop    rbx
  407d5d:	repz ret 
  407d5f:	nop
  407d60:	mov    rdx,rcx
  407d63:	jmp    407cda <flatcc_emitter_reset@@Base+0x4a>
  407d68:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407d70 <flatcc_emitter_clear@@Base>:
  407d70:	mov    rax,QWORD PTR [rdi]
  407d73:	test   rax,rax
  407d76:	je     407df7 <flatcc_emitter_clear@@Base+0x87>
  407d78:	push   rbp
  407d79:	push   rbx
  407d7a:	mov    rbp,rdi
  407d7d:	sub    rsp,0x8
  407d81:	mov    rdx,QWORD PTR [rax+0xb88]
  407d88:	mov    QWORD PTR [rdx+0xb80],0x0
  407d93:	mov    rbx,QWORD PTR [rax+0xb80]
  407d9a:	test   rbx,rbx
  407d9d:	jne    407dab <flatcc_emitter_clear@@Base+0x3b>
  407d9f:	jmp    407df9 <flatcc_emitter_clear@@Base+0x89>
  407da1:	nop    DWORD PTR [rax+0x0]
  407da8:	mov    rbx,rax
  407dab:	mov    rdi,QWORD PTR [rbx+0xb88]
  407db2:	call   403030 <free@plt>
  407db7:	mov    rax,QWORD PTR [rbx+0xb80]
  407dbe:	test   rax,rax
  407dc1:	jne    407da8 <flatcc_emitter_clear@@Base+0x38>
  407dc3:	mov    rdi,rbx
  407dc6:	call   403030 <free@plt>
  407dcb:	lea    rdi,[rbp+0x8]
  407dcf:	mov    QWORD PTR [rbp+0x0],0x0
  407dd7:	mov    QWORD PTR [rbp+0x40],0x0
  407ddf:	xor    eax,eax
  407de1:	and    rdi,0xfffffffffffffff8
  407de5:	sub    rbp,rdi
  407de8:	lea    ecx,[rbp+0x48]
  407deb:	shr    ecx,0x3
  407dee:	rep stos QWORD PTR es:[rdi],rax
  407df1:	add    rsp,0x8
  407df5:	pop    rbx
  407df6:	pop    rbp
  407df7:	repz ret 
  407df9:	mov    rbx,rax
  407dfc:	jmp    407dc3 <flatcc_emitter_clear@@Base+0x53>
  407dfe:	xchg   ax,ax

0000000000407e00 <flatcc_emitter@@Base>:
  407e00:	push   r15
  407e02:	push   r14
  407e04:	mov    r14,rsi
  407e07:	push   r13
  407e09:	push   r12
  407e0b:	push   rbp
  407e0c:	push   rbx
  407e0d:	mov    rbx,rdi
  407e10:	sub    rsp,0x18
  407e14:	add    QWORD PTR [rdi+0x30],r8
  407e18:	test   ecx,ecx
  407e1a:	js     40800e <flatcc_emitter@@Base+0x20e>
  407e20:	mov    rax,QWORD PTR [rdi+0x28]
  407e24:	cmp    r8,rax
  407e27:	jbe    407eb4 <flatcc_emitter@@Base+0xb4>
  407e2d:	test   edx,edx
  407e2f:	je     407ea3 <flatcc_emitter@@Base+0xa3>
  407e31:	lea    r15d,[rdx-0x1]
  407e35:	add    r15,0x1
  407e39:	shl    r15,0x4
  407e3d:	lea    rax,[rsi+r15*1]
  407e41:	mov    QWORD PTR [rsp+0x8],rax
  407e46:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407e50:	mov    r12,QWORD PTR [r14+0x8]
  407e54:	mov    r13,QWORD PTR [r14]
  407e57:	test   r12,r12
  407e5a:	je     407e98 <flatcc_emitter@@Base+0x98>
  407e5c:	nop    DWORD PTR [rax+0x0]
  407e60:	mov    rbp,QWORD PTR [rbx+0x28]
  407e64:	cmp    rbp,r12
  407e67:	jae    407f08 <flatcc_emitter@@Base+0x108>
  407e6d:	test   rbp,rbp
  407e70:	je     407f18 <flatcc_emitter@@Base+0x118>
  407e76:	sub    r12,rbp
  407e79:	mov    rdi,QWORD PTR [rbx+0x20]
  407e7d:	mov    rsi,r13
  407e80:	mov    rdx,rbp
  407e83:	add    r13,rbp
  407e86:	call   4030b0 <memcpy@plt>
  407e8b:	add    QWORD PTR [rbx+0x20],rbp
  407e8f:	sub    QWORD PTR [rbx+0x28],rbp
  407e93:	test   r12,r12
  407e96:	jne    407e60 <flatcc_emitter@@Base+0x60>
  407e98:	add    r14,0x10
  407e9c:	cmp    r14,QWORD PTR [rsp+0x8]
  407ea1:	jne    407e50 <flatcc_emitter@@Base+0x50>
  407ea3:	add    rsp,0x18
  407ea7:	xor    eax,eax
  407ea9:	pop    rbx
  407eaa:	pop    rbp
  407eab:	pop    r12
  407ead:	pop    r13
  407eaf:	pop    r14
  407eb1:	pop    r15
  407eb3:	ret    
  407eb4:	mov    rcx,QWORD PTR [rdi+0x20]
  407eb8:	sub    rax,r8
  407ebb:	mov    QWORD PTR [rdi+0x28],rax
  407ebf:	lea    rsi,[rcx+r8*1]
  407ec3:	mov    QWORD PTR [rdi+0x20],rsi
  407ec7:	test   edx,edx
  407ec9:	je     407ea3 <flatcc_emitter@@Base+0xa3>
  407ecb:	lea    ebx,[rdx-0x1]
  407ece:	add    rbx,0x1
  407ed2:	shl    rbx,0x4
  407ed6:	add    rbx,r14
  407ed9:	nop    DWORD PTR [rax+0x0]
  407ee0:	mov    rsi,QWORD PTR [r14]
  407ee3:	mov    rdx,QWORD PTR [r14+0x8]
  407ee7:	mov    rdi,rcx
  407eea:	add    r14,0x10
  407eee:	call   4030b0 <memcpy@plt>
  407ef3:	mov    rcx,rax
  407ef6:	add    rcx,QWORD PTR [r14-0x8]
  407efa:	cmp    rbx,r14
  407efd:	jne    407ee0 <flatcc_emitter@@Base+0xe0>
  407eff:	jmp    407ea3 <flatcc_emitter@@Base+0xa3>
  407f01:	nop    DWORD PTR [rax+0x0]
  407f08:	mov    rbp,r12
  407f0b:	xor    r12d,r12d
  407f0e:	jmp    407e79 <flatcc_emitter@@Base+0x79>
  407f13:	nop    DWORD PTR [rax+rax*1+0x0]
  407f18:	mov    r15,QWORD PTR [rbx+0x8]
  407f1c:	test   r15,r15
  407f1f:	je     407fa0 <flatcc_emitter@@Base+0x1a0>
  407f21:	mov    rbp,QWORD PTR [r15+0xb80]
  407f28:	cmp    rbp,QWORD PTR [rbx]
  407f2b:	je     407f60 <flatcc_emitter@@Base+0x160>
  407f2d:	mov    QWORD PTR [rbx+0x8],rbp
  407f31:	mov    rax,QWORD PTR [rbp+0xb88]
  407f38:	mov    QWORD PTR [rbx+0x20],rbp
  407f3c:	mov    QWORD PTR [rbx+0x28],0xb80
  407f44:	mov    eax,DWORD PTR [rax+0xb90]
  407f4a:	add    eax,0xb80
  407f4f:	mov    DWORD PTR [rbp+0xb90],eax
  407f55:	jmp    407e60 <flatcc_emitter@@Base+0x60>
  407f5a:	nop    WORD PTR [rax+rax*1+0x0]
  407f60:	mov    edi,0xb98
  407f65:	call   4030c0 <malloc@plt>
  407f6a:	test   rax,rax
  407f6d:	je     407faf <flatcc_emitter@@Base+0x1af>
  407f6f:	mov    QWORD PTR [rax+0xb80],rbp
  407f76:	add    QWORD PTR [rbx+0x38],0xb80
  407f7e:	mov    QWORD PTR [rax+0xb88],r15
  407f85:	mov    QWORD PTR [rbp+0xb88],rax
  407f8c:	mov    rbp,rax
  407f8f:	mov    QWORD PTR [r15+0xb80],rax
  407f96:	mov    QWORD PTR [rbx+0x8],rax
  407f9a:	jmp    407f31 <flatcc_emitter@@Base+0x131>
  407f9c:	nop    DWORD PTR [rax+0x0]
  407fa0:	mov    edi,0xb98
  407fa5:	call   4030c0 <malloc@plt>
  407faa:	test   rax,rax
  407fad:	jne    407fc3 <flatcc_emitter@@Base+0x1c3>
  407faf:	add    rsp,0x18
  407fb3:	mov    eax,0xffffffff
  407fb8:	pop    rbx
  407fb9:	pop    rbp
  407fba:	pop    r12
  407fbc:	pop    r13
  407fbe:	pop    r14
  407fc0:	pop    r15
  407fc2:	ret    
  407fc3:	lea    rdx,[rax+0x5c0]
  407fca:	add    QWORD PTR [rbx+0x38],0xb80
  407fd2:	mov    QWORD PTR [rbx],rax
  407fd5:	mov    QWORD PTR [rbx+0x8],rax
  407fd9:	mov    QWORD PTR [rax+0xb80],rax
  407fe0:	mov    QWORD PTR [rax+0xb88],rax
  407fe7:	mov    QWORD PTR [rbx+0x10],rdx
  407feb:	mov    QWORD PTR [rbx+0x20],rdx
  407fef:	mov    QWORD PTR [rbx+0x18],0x5c0
  407ff7:	mov    QWORD PTR [rbx+0x28],0x5c0
  407fff:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408009:	jmp    407e60 <flatcc_emitter@@Base+0x60>
  40800e:	mov    rax,QWORD PTR [rdi+0x18]
  408012:	cmp    r8,rax
  408015:	jbe    4080ac <flatcc_emitter@@Base+0x2ac>
  40801b:	movsxd rax,edx
  40801e:	shl    rax,0x4
  408022:	add    r14,rax
  408025:	mov    eax,edx
  408027:	shl    rax,0x4
  40802b:	mov    rcx,r14
  40802e:	sub    rcx,rax
  408031:	mov    QWORD PTR [rsp+0x8],rcx
  408036:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408040:	cmp    r14,QWORD PTR [rsp+0x8]
  408045:	je     407ea3 <flatcc_emitter@@Base+0xa3>
  40804b:	sub    r14,0x10
  40804f:	mov    rbp,QWORD PTR [r14+0x8]
  408053:	mov    r12,rbp
  408056:	add    r12,QWORD PTR [r14]
  408059:	test   rbp,rbp
  40805c:	je     408040 <flatcc_emitter@@Base+0x240>
  40805e:	mov    rdx,QWORD PTR [rbx+0x18]
  408062:	cmp    rdx,rbp
  408065:	jae    40809f <flatcc_emitter@@Base+0x29f>
  408067:	test   rdx,rdx
  40806a:	je     4080c8 <flatcc_emitter@@Base+0x2c8>
  40806c:	sub    rbp,rdx
  40806f:	xor    ecx,ecx
  408071:	mov    rax,rdx
  408074:	mov    QWORD PTR [rbx+0x18],rcx
  408078:	neg    rax
  40807b:	mov    rdi,rax
  40807e:	add    rdi,QWORD PTR [rbx+0x10]
  408082:	add    r12,rax
  408085:	mov    rsi,r12
  408088:	mov    QWORD PTR [rbx+0x10],rdi
  40808c:	call   4030b0 <memcpy@plt>
  408091:	test   rbp,rbp
  408094:	je     408040 <flatcc_emitter@@Base+0x240>
  408096:	mov    rdx,QWORD PTR [rbx+0x18]
  40809a:	cmp    rdx,rbp
  40809d:	jb     408067 <flatcc_emitter@@Base+0x267>
  40809f:	mov    rcx,rdx
  4080a2:	mov    rdx,rbp
  4080a5:	sub    rcx,rbp
  4080a8:	xor    ebp,ebp
  4080aa:	jmp    408071 <flatcc_emitter@@Base+0x271>
  4080ac:	mov    rcx,QWORD PTR [rdi+0x10]
  4080b0:	sub    rax,r8
  4080b3:	mov    QWORD PTR [rdi+0x18],rax
  4080b7:	sub    rcx,r8
  4080ba:	mov    QWORD PTR [rdi+0x10],rcx
  4080be:	jmp    407ec7 <flatcc_emitter@@Base+0xc7>
  4080c3:	nop    DWORD PTR [rax+rax*1+0x0]
  4080c8:	mov    r13,QWORD PTR [rbx]
  4080cb:	test   r13,r13
  4080ce:	je     40816f <flatcc_emitter@@Base+0x36f>
  4080d4:	mov    r15,QWORD PTR [r13+0xb88]
  4080db:	cmp    r15,QWORD PTR [rbx+0x8]
  4080df:	je     408130 <flatcc_emitter@@Base+0x330>
  4080e1:	mov    eax,DWORD PTR [r13+0xb90]
  4080e8:	sub    eax,0xb80
  4080ed:	mov    DWORD PTR [r15+0xb90],eax
  4080f4:	mov    QWORD PTR [rbx],r15
  4080f7:	lea    rax,[r15+0xb80]
  4080fe:	mov    QWORD PTR [rbx+0x18],0xb80
  408106:	mov    QWORD PTR [rbx+0x10],rax
  40810a:	mov    rax,QWORD PTR [r15+0xb80]
  408111:	mov    eax,DWORD PTR [rax+0xb90]
  408117:	sub    eax,0xb80
  40811c:	mov    DWORD PTR [r15+0xb90],eax
  408123:	jmp    40805e <flatcc_emitter@@Base+0x25e>
  408128:	nop    DWORD PTR [rax+rax*1+0x0]
  408130:	mov    edi,0xb98
  408135:	call   4030c0 <malloc@plt>
  40813a:	test   rax,rax
  40813d:	je     407faf <flatcc_emitter@@Base+0x1af>
  408143:	mov    QWORD PTR [rax+0xb88],r15
  40814a:	add    QWORD PTR [rbx+0x38],0xb80
  408152:	mov    QWORD PTR [rax+0xb80],r13
  408159:	mov    QWORD PTR [r13+0xb88],rax
  408160:	mov    QWORD PTR [r15+0xb80],rax
  408167:	mov    QWORD PTR [rbx],rax
  40816a:	mov    r15,rax
  40816d:	jmp    4080f7 <flatcc_emitter@@Base+0x2f7>
  40816f:	mov    edi,0xb98
  408174:	call   4030c0 <malloc@plt>
  408179:	test   rax,rax
  40817c:	je     407faf <flatcc_emitter@@Base+0x1af>
  408182:	lea    rdx,[rax+0x5c0]
  408189:	add    QWORD PTR [rbx+0x38],0xb80
  408191:	mov    QWORD PTR [rbx],rax
  408194:	mov    QWORD PTR [rbx+0x8],rax
  408198:	mov    QWORD PTR [rax+0xb80],rax
  40819f:	mov    QWORD PTR [rax+0xb88],rax
  4081a6:	mov    QWORD PTR [rbx+0x10],rdx
  4081aa:	mov    QWORD PTR [rbx+0x20],rdx
  4081ae:	mov    QWORD PTR [rbx+0x18],0x5c0
  4081b6:	mov    QWORD PTR [rbx+0x28],0x5c0
  4081be:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4081c8:	jmp    40805e <flatcc_emitter@@Base+0x25e>
  4081cd:	nop    DWORD PTR [rax]

00000000004081d0 <flatcc_emitter_copy_buffer@@Base>:
  4081d0:	push   rbp
  4081d1:	push   rbx
  4081d2:	sub    rsp,0x8
  4081d6:	mov    r9,QWORD PTR [rdi+0x30]
  4081da:	cmp    r9,rdx
  4081dd:	ja     4082a0 <flatcc_emitter_copy_buffer@@Base+0xd0>
  4081e3:	mov    rax,QWORD PTR [rdi]
  4081e6:	test   rax,rax
  4081e9:	je     4082a0 <flatcc_emitter_copy_buffer@@Base+0xd0>
  4081ef:	cmp    rax,QWORD PTR [rdi+0x8]
  4081f3:	mov    rcx,rsi
  4081f6:	mov    rbx,rdi
  4081f9:	je     4082b0 <flatcc_emitter_copy_buffer@@Base+0xe0>
  4081ff:	mov    r8d,0xb80
  408205:	sub    r8,QWORD PTR [rdi+0x18]
  408209:	mov    rsi,QWORD PTR [rdi+0x10]
  40820d:	mov    rdi,rcx
  408210:	mov    rbp,r8
  408213:	mov    rdx,r8
  408216:	call   4030b0 <memcpy@plt>
  40821b:	add    rbp,rax
  40821e:	mov    rax,QWORD PTR [rbx]
  408221:	mov    rsi,QWORD PTR [rbx+0x8]
  408225:	mov    rax,QWORD PTR [rax+0xb80]
  40822c:	cmp    rax,rsi
  40822f:	je     408284 <flatcc_emitter_copy_buffer@@Base+0xb4>
  408231:	nop    DWORD PTR [rax+0x0]
  408238:	mov    rdx,QWORD PTR [rax]
  40823b:	lea    rdi,[rbp+0x8]
  40823f:	mov    rcx,rbp
  408242:	mov    rsi,rax
  408245:	add    rbp,0xb80
  40824c:	and    rdi,0xfffffffffffffff8
  408250:	mov    QWORD PTR [rbp-0xb80],rdx
  408257:	mov    rdx,QWORD PTR [rax+0xb78]
  40825e:	sub    rcx,rdi
  408261:	sub    rsi,rcx
  408264:	add    ecx,0xb80
  40826a:	shr    ecx,0x3
  40826d:	mov    QWORD PTR [rbp-0x8],rdx
  408271:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
  408274:	mov    rax,QWORD PTR [rax+0xb80]
  40827b:	mov    rsi,QWORD PTR [rbx+0x8]
  40827f:	cmp    rsi,rax
  408282:	jne    408238 <flatcc_emitter_copy_buffer@@Base+0x68>
  408284:	mov    edx,0xb80
  408289:	sub    rdx,QWORD PTR [rbx+0x28]
  40828d:	mov    rdi,rbp
  408290:	call   4030b0 <memcpy@plt>
  408295:	add    rsp,0x8
  408299:	mov    rax,rbp
  40829c:	pop    rbx
  40829d:	pop    rbp
  40829e:	ret    
  40829f:	nop
  4082a0:	xor    ebp,ebp
  4082a2:	add    rsp,0x8
  4082a6:	mov    rax,rbp
  4082a9:	pop    rbx
  4082aa:	pop    rbp
  4082ab:	ret    
  4082ac:	nop    DWORD PTR [rax+0x0]
  4082b0:	mov    rsi,QWORD PTR [rdi+0x10]
  4082b4:	mov    rdx,r9
  4082b7:	mov    rdi,rcx
  4082ba:	call   4030b0 <memcpy@plt>
  4082bf:	mov    rbp,rax
  4082c2:	jmp    408295 <flatcc_emitter_copy_buffer@@Base+0xc5>
  4082c4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4082ce:	xchg   ax,ax
  4082d0:	mov    eax,0x4
  4082d5:	lea    esi,[rax+rsi*2]
  4082d8:	cmp    si,WORD PTR [rdi+0x1e]
  4082dc:	jae    408308 <flatcc_emitter_copy_buffer@@Base+0x138>
  4082de:	mov    rax,QWORD PTR [rdi+0x10]
  4082e2:	movzx  esi,si
  4082e5:	movzx  esi,WORD PTR [rax+rsi*1]
  4082e9:	test   esi,esi
  4082eb:	je     408308 <flatcc_emitter_copy_buffer@@Base+0x138>
  4082ed:	movzx  edx,WORD PTR [rdi+0x1c]
  4082f1:	lea    r8d,[rsi+0x4]
  4082f5:	mov    eax,0xd
  4082fa:	cmp    r8d,edx
  4082fd:	jbe    408320 <flatcc_emitter_copy_buffer@@Base+0x150>
  4082ff:	repz ret 
  408301:	nop    DWORD PTR [rax+0x0]
  408308:	xor    eax,eax
  40830a:	test   edx,edx
  40830c:	mov    DWORD PTR [rcx],0x0
  408312:	setne  al
  408315:	shl    eax,0x2
  408318:	ret    
  408319:	nop    DWORD PTR [rax+0x0]
  408320:	add    esi,DWORD PTR [rdi+0x18]
  408323:	mov    eax,0xc
  408328:	test   sil,0x3
  40832c:	jne    4082ff <flatcc_emitter_copy_buffer@@Base+0x12f>
  40832e:	mov    DWORD PTR [rcx],esi
  408330:	xor    eax,eax
  408332:	ret    
  408333:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40833e:	xchg   ax,ax

0000000000408340 <flatcc_verify_error_string@@Base>:
  408340:	cmp    edi,0x24
  408343:	ja     4085b0 <flatcc_verify_error_string@@Base+0x270>
  408349:	lea    rdx,[rip+0x2f88]        # 40b2d8 <flatcc_builder_padding_base@@Base+0x698>
  408350:	mov    edi,edi
  408352:	movsxd rax,DWORD PTR [rdx+rdi*4]
  408356:	add    rax,rdx
  408359:	jmp    rax
  40835b:	nop    DWORD PTR [rax+rax*1+0x0]
  408360:	lea    rax,[rip+0x2ad9]        # 40ae40 <flatcc_builder_padding_base@@Base+0x200>
  408367:	ret    
  408368:	nop    DWORD PTR [rax+rax*1+0x0]
  408370:	lea    rax,[rip+0x2c65]        # 40afdc <flatcc_builder_padding_base@@Base+0x39c>
  408377:	ret    
  408378:	nop    DWORD PTR [rax+rax*1+0x0]
  408380:	lea    rax,[rip+0x2f29]        # 40b2b0 <flatcc_builder_padding_base@@Base+0x670>
  408387:	ret    
  408388:	nop    DWORD PTR [rax+rax*1+0x0]
  408390:	lea    rax,[rip+0x2ee1]        # 40b278 <flatcc_builder_padding_base@@Base+0x638>
  408397:	ret    
  408398:	nop    DWORD PTR [rax+rax*1+0x0]
  4083a0:	lea    rax,[rip+0x2ea9]        # 40b250 <flatcc_builder_padding_base@@Base+0x610>
  4083a7:	ret    
  4083a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4083b0:	lea    rax,[rip+0x2e71]        # 40b228 <flatcc_builder_padding_base@@Base+0x5e8>
  4083b7:	ret    
  4083b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4083c0:	lea    rax,[rip+0x2c00]        # 40afc7 <flatcc_builder_padding_base@@Base+0x387>
  4083c7:	ret    
  4083c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4083d0:	lea    rax,[rip+0x2e29]        # 40b200 <flatcc_builder_padding_base@@Base+0x5c0>
  4083d7:	ret    
  4083d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4083e0:	lea    rax,[rip+0x2df1]        # 40b1d8 <flatcc_builder_padding_base@@Base+0x598>
  4083e7:	ret    
  4083e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4083f0:	lea    rax,[rip+0x2bb8]        # 40afaf <flatcc_builder_padding_base@@Base+0x36f>
  4083f7:	ret    
  4083f8:	nop    DWORD PTR [rax+rax*1+0x0]
  408400:	lea    rax,[rip+0x2b8d]        # 40af94 <flatcc_builder_padding_base@@Base+0x354>
  408407:	ret    
  408408:	nop    DWORD PTR [rax+rax*1+0x0]
  408410:	lea    rax,[rip+0x2b69]        # 40af80 <flatcc_builder_padding_base@@Base+0x340>
  408417:	ret    
  408418:	nop    DWORD PTR [rax+rax*1+0x0]
  408420:	lea    rax,[rip+0x2d81]        # 40b1a8 <flatcc_builder_padding_base@@Base+0x568>
  408427:	ret    
  408428:	nop    DWORD PTR [rax+rax*1+0x0]
  408430:	lea    rax,[rip+0x2d41]        # 40b178 <flatcc_builder_padding_base@@Base+0x538>
  408437:	ret    
  408438:	nop    DWORD PTR [rax+rax*1+0x0]
  408440:	lea    rax,[rip+0x2d01]        # 40b148 <flatcc_builder_padding_base@@Base+0x508>
  408447:	ret    
  408448:	nop    DWORD PTR [rax+rax*1+0x0]
  408450:	lea    rax,[rip+0x2cb9]        # 40b110 <flatcc_builder_padding_base@@Base+0x4d0>
  408457:	ret    
  408458:	nop    DWORD PTR [rax+rax*1+0x0]
  408460:	lea    rax,[rip+0x2c79]        # 40b0e0 <flatcc_builder_padding_base@@Base+0x4a0>
  408467:	ret    
  408468:	nop    DWORD PTR [rax+rax*1+0x0]
  408470:	lea    rax,[rip+0x2af1]        # 40af68 <flatcc_builder_padding_base@@Base+0x328>
  408477:	ret    
  408478:	nop    DWORD PTR [rax+rax*1+0x0]
  408480:	lea    rax,[rip+0x2c31]        # 40b0b8 <flatcc_builder_padding_base@@Base+0x478>
  408487:	ret    
  408488:	nop    DWORD PTR [rax+rax*1+0x0]
  408490:	lea    rax,[rip+0x2abd]        # 40af54 <flatcc_builder_padding_base@@Base+0x314>
  408497:	ret    
  408498:	nop    DWORD PTR [rax+rax*1+0x0]
  4084a0:	lea    rax,[rip+0x2be9]        # 40b090 <flatcc_builder_padding_base@@Base+0x450>
  4084a7:	ret    
  4084a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4084b0:	lea    rax,[rip+0x2bb1]        # 40b068 <flatcc_builder_padding_base@@Base+0x428>
  4084b7:	ret    
  4084b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4084c0:	lea    rax,[rip+0x2b79]        # 40b040 <flatcc_builder_padding_base@@Base+0x400>
  4084c7:	ret    
  4084c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4084d0:	lea    rax,[rip+0x2a63]        # 40af3a <flatcc_builder_padding_base@@Base+0x2fa>
  4084d7:	ret    
  4084d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4084e0:	lea    rax,[rip+0x2a3a]        # 40af21 <flatcc_builder_padding_base@@Base+0x2e1>
  4084e7:	ret    
  4084e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4084f0:	lea    rax,[rip+0x2a12]        # 40af09 <flatcc_builder_padding_base@@Base+0x2c9>
  4084f7:	ret    
  4084f8:	nop    DWORD PTR [rax+rax*1+0x0]
  408500:	lea    rax,[rip+0x29f1]        # 40aef8 <flatcc_builder_padding_base@@Base+0x2b8>
  408507:	ret    
  408508:	nop    DWORD PTR [rax+rax*1+0x0]
  408510:	lea    rax,[rip+0x29cc]        # 40aee3 <flatcc_builder_padding_base@@Base+0x2a3>
  408517:	ret    
  408518:	nop    DWORD PTR [rax+rax*1+0x0]
  408520:	lea    rax,[rip+0x29a8]        # 40aecf <flatcc_builder_padding_base@@Base+0x28f>
  408527:	ret    
  408528:	nop    DWORD PTR [rax+rax*1+0x0]
  408530:	lea    rax,[rip+0x2984]        # 40aebb <flatcc_builder_padding_base@@Base+0x27b>
  408537:	ret    
  408538:	nop    DWORD PTR [rax+rax*1+0x0]
  408540:	lea    rax,[rip+0x2959]        # 40aea0 <flatcc_builder_padding_base@@Base+0x260>
  408547:	ret    
  408548:	nop    DWORD PTR [rax+rax*1+0x0]
  408550:	lea    rax,[rip+0x2ac9]        # 40b020 <flatcc_builder_padding_base@@Base+0x3e0>
  408557:	ret    
  408558:	nop    DWORD PTR [rax+rax*1+0x0]
  408560:	lea    rax,[rip+0x2a91]        # 40aff8 <flatcc_builder_padding_base@@Base+0x3b8>
  408567:	ret    
  408568:	nop    DWORD PTR [rax+rax*1+0x0]
  408570:	lea    rax,[rip+0x2912]        # 40ae89 <flatcc_builder_padding_base@@Base+0x249>
  408577:	ret    
  408578:	nop    DWORD PTR [rax+rax*1+0x0]
  408580:	lea    rax,[rip+0x28e8]        # 40ae6f <flatcc_builder_padding_base@@Base+0x22f>
  408587:	ret    
  408588:	nop    DWORD PTR [rax+rax*1+0x0]
  408590:	lea    rax,[rip+0x28c4]        # 40ae5b <flatcc_builder_padding_base@@Base+0x21b>
  408597:	ret    
  408598:	nop    DWORD PTR [rax+rax*1+0x0]
  4085a0:	lea    rax,[rip+0x289c]        # 40ae43 <flatcc_builder_padding_base@@Base+0x203>
  4085a7:	ret    
  4085a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4085b0:	lea    rax,[rip+0x2a33]        # 40afea <flatcc_builder_padding_base@@Base+0x3aa>
  4085b7:	ret    
  4085b8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004085c0 <flatcc_verify_field@@Base>:
  4085c0:	mov    eax,0x4
  4085c5:	lea    esi,[rax+rsi*2]
  4085c8:	xor    eax,eax
  4085ca:	cmp    si,WORD PTR [rdi+0x1e]
  4085ce:	jae    4085f9 <flatcc_verify_field@@Base+0x39>
  4085d0:	mov    r8,QWORD PTR [rdi+0x10]
  4085d4:	movzx  esi,si
  4085d7:	movzx  r8d,WORD PTR [r8+rsi*1]
  4085dc:	test   r8d,r8d
  4085df:	je     4085f9 <flatcc_verify_field@@Base+0x39>
  4085e1:	movzx  r9d,WORD PTR [rdi+0x1c]
  4085e6:	add    edx,r8d
  4085e9:	movzx  ecx,cx
  4085ec:	mov    rsi,QWORD PTR [rdi]
  4085ef:	mov    eax,0xd
  4085f4:	cmp    edx,r9d
  4085f7:	jbe    408600 <flatcc_verify_field@@Base+0x40>
  4085f9:	repz ret 
  4085fb:	nop    DWORD PTR [rax+rax*1+0x0]
  408600:	add    esi,DWORD PTR [rdi+0x18]
  408603:	sub    ecx,0x1
  408606:	add    esi,r8d
  408609:	and    ecx,esi
  40860b:	cmp    ecx,0x1
  40860e:	sbb    eax,eax
  408610:	not    eax
  408612:	and    eax,0xc
  408615:	ret    
  408616:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000408620 <flatcc_verify_string_field@@Base>:
  408620:	sub    rsp,0x18
  408624:	movzx  esi,si
  408627:	mov    r9,rdi
  40862a:	lea    rcx,[rsp+0x4]
  40862f:	mov    rax,QWORD PTR fs:0x28
  408638:	mov    QWORD PTR [rsp+0x8],rax
  40863d:	xor    eax,eax
  40863f:	call   4082d0 <flatcc_emitter_copy_buffer@@Base+0x100>
  408644:	test   eax,eax
  408646:	jne    408690 <flatcc_verify_string_field@@Base+0x70>
  408648:	mov    edx,DWORD PTR [rsp+0x4]
  40864c:	test   edx,edx
  40864e:	je     408690 <flatcc_verify_string_field@@Base+0x70>
  408650:	mov    rsi,QWORD PTR [rdi]
  408653:	mov    ecx,edx
  408655:	mov    edi,DWORD PTR [rsi+rcx*1]
  408658:	add    edi,edx
  40865a:	cmp    edx,edi
  40865c:	mov    ecx,edi
  40865e:	jae    4086a8 <flatcc_verify_string_field@@Base+0x88>
  408660:	mov    r8d,DWORD PTR [r9+0x8]
  408664:	mov    edi,edi
  408666:	lea    r9,[rdi+0x4]
  40866a:	cmp    r9,r8
  40866d:	mov    rdx,r8
  408670:	ja     4086a8 <flatcc_verify_string_field@@Base+0x88>
  408672:	test   cl,0x3
  408675:	jne    4086a8 <flatcc_verify_string_field@@Base+0x88>
  408677:	mov    edi,DWORD PTR [rsi+rdi*1]
  40867a:	add    ecx,0x4
  40867d:	sub    edx,ecx
  40867f:	lea    r8d,[rdi+0x1]
  408683:	cmp    edx,r8d
  408686:	jae    4086b0 <flatcc_verify_string_field@@Base+0x90>
  408688:	mov    eax,0x8
  40868d:	nop    DWORD PTR [rax]
  408690:	mov    rdi,QWORD PTR [rsp+0x8]
  408695:	xor    rdi,QWORD PTR fs:0x28
  40869e:	jne    4086c1 <flatcc_verify_string_field@@Base+0xa1>
  4086a0:	add    rsp,0x18
  4086a4:	ret    
  4086a5:	nop    DWORD PTR [rax]
  4086a8:	mov    eax,0x11
  4086ad:	jmp    408690 <flatcc_verify_string_field@@Base+0x70>
  4086af:	nop
  4086b0:	add    rcx,rsi
  4086b3:	mov    edx,0x7
  4086b8:	cmp    BYTE PTR [rcx+rdi*1],0x0
  4086bc:	cmovne eax,edx
  4086bf:	jmp    408690 <flatcc_verify_string_field@@Base+0x70>
  4086c1:	call   403060 <__stack_chk_fail@plt>
  4086c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004086d0 <flatcc_verify_vector_field@@Base>:
  4086d0:	push   rbx
  4086d1:	mov    rbx,rcx
  4086d4:	movzx  esi,si
  4086d7:	mov    r10,rdi
  4086da:	mov    r11d,r8d
  4086dd:	sub    rsp,0x10
  4086e1:	lea    rcx,[rsp+0x4]
  4086e6:	mov    rax,QWORD PTR fs:0x28
  4086ef:	mov    QWORD PTR [rsp+0x8],rax
  4086f4:	xor    eax,eax
  4086f6:	call   4082d0 <flatcc_emitter_copy_buffer@@Base+0x100>
  4086fb:	test   eax,eax
  4086fd:	jne    408760 <flatcc_verify_vector_field@@Base+0x90>
  4086ff:	mov    edx,DWORD PTR [rsp+0x4]
  408703:	test   edx,edx
  408705:	je     408760 <flatcc_verify_vector_field@@Base+0x90>
  408707:	mov    rsi,QWORD PTR [rdi]
  40870a:	mov    ecx,edx
  40870c:	mov    edi,DWORD PTR [rsi+rcx*1]
  40870f:	add    edi,edx
  408711:	cmp    edx,edi
  408713:	mov    ecx,edi
  408715:	jae    408780 <flatcc_verify_vector_field@@Base+0xb0>
  408717:	mov    edx,DWORD PTR [r10+0x8]
  40871b:	mov    r10d,ecx
  40871e:	lea    r8,[r10+0x4]
  408722:	cmp    r8,rdx
  408725:	mov    rdi,rdx
  408728:	ja     408780 <flatcc_verify_vector_field@@Base+0xb0>
  40872a:	cmp    r11w,0x4
  40872f:	mov    edx,0x4
  408734:	cmovae edx,r11d
  408738:	movzx  edx,dx
  40873b:	sub    edx,0x1
  40873e:	or     edx,0x3
  408741:	movsxd rdx,edx
  408744:	test   rdx,r8
  408747:	jne    408780 <flatcc_verify_vector_field@@Base+0xb0>
  408749:	mov    edx,DWORD PTR [rsi+r10*1]
  40874d:	cmp    edx,r9d
  408750:	jbe    408790 <flatcc_verify_vector_field@@Base+0xc0>
  408752:	mov    eax,0x19
  408757:	nop    WORD PTR [rax+rax*1+0x0]
  408760:	mov    rbx,QWORD PTR [rsp+0x8]
  408765:	xor    rbx,QWORD PTR fs:0x28
  40876e:	jne    4087a4 <flatcc_verify_vector_field@@Base+0xd4>
  408770:	add    rsp,0x10
  408774:	pop    rbx
  408775:	ret    
  408776:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408780:	mov    eax,0x10
  408785:	jmp    408760 <flatcc_verify_vector_field@@Base+0x90>
  408787:	nop    WORD PTR [rax+rax*1+0x0]
  408790:	imul   ebx,edx
  408793:	sub    edi,0x4
  408796:	mov    edx,0x1a
  40879b:	sub    edi,ecx
  40879d:	cmp    edi,ebx
  40879f:	cmovb  eax,edx
  4087a2:	jmp    408760 <flatcc_verify_vector_field@@Base+0x90>
  4087a4:	call   403060 <__stack_chk_fail@plt>
  4087a9:	nop    DWORD PTR [rax+0x0]

00000000004087b0 <flatcc_verify_string_vector_field@@Base>:
  4087b0:	push   rbp
  4087b1:	push   rbx
  4087b2:	movzx  esi,si
  4087b5:	mov    r9,rdi
  4087b8:	sub    rsp,0x18
  4087bc:	lea    rcx,[rsp+0x4]
  4087c1:	mov    rax,QWORD PTR fs:0x28
  4087ca:	mov    QWORD PTR [rsp+0x8],rax
  4087cf:	xor    eax,eax
  4087d1:	call   4082d0 <flatcc_emitter_copy_buffer@@Base+0x100>
  4087d6:	test   eax,eax
  4087d8:	jne    408830 <flatcc_verify_string_vector_field@@Base+0x80>
  4087da:	mov    edx,DWORD PTR [rsp+0x4]
  4087de:	test   edx,edx
  4087e0:	je     408830 <flatcc_verify_string_vector_field@@Base+0x80>
  4087e2:	mov    rsi,QWORD PTR [rdi]
  4087e5:	mov    ecx,edx
  4087e7:	mov    edi,DWORD PTR [rsi+rcx*1]
  4087ea:	add    edi,edx
  4087ec:	cmp    edx,edi
  4087ee:	mov    ecx,edi
  4087f0:	jae    408850 <flatcc_verify_string_vector_field@@Base+0xa0>
  4087f2:	mov    r10d,DWORD PTR [r9+0x8]
  4087f6:	mov    r9d,edi
  4087f9:	lea    rbx,[r9+0x4]
  4087fd:	cmp    rbx,r10
  408800:	mov    r11,r10
  408803:	ja     408850 <flatcc_verify_string_vector_field@@Base+0xa0>
  408805:	test   bl,0x3
  408808:	jne    408816 <flatcc_verify_string_vector_field@@Base+0x66>
  40880a:	mov    edi,DWORD PTR [rsi+r9*1]
  40880e:	cmp    edi,0x3fffffff
  408814:	jbe    408860 <flatcc_verify_string_vector_field@@Base+0xb0>
  408816:	and    ebx,0x3
  408819:	jne    408850 <flatcc_verify_string_vector_field@@Base+0xa0>
  40881b:	mov    edx,DWORD PTR [rsi+r9*1]
  40881f:	cmp    edx,0x3fffffff
  408825:	jbe    4088d0 <flatcc_verify_string_vector_field@@Base+0x120>
  40882b:	mov    eax,0x19
  408830:	mov    rdi,QWORD PTR [rsp+0x8]
  408835:	xor    rdi,QWORD PTR fs:0x28
  40883e:	jne    40894b <flatcc_verify_string_vector_field@@Base+0x19b>
  408844:	add    rsp,0x18
  408848:	pop    rbx
  408849:	pop    rbp
  40884a:	ret    
  40884b:	nop    DWORD PTR [rax+rax*1+0x0]
  408850:	mov    eax,0x10
  408855:	jmp    408830 <flatcc_verify_string_vector_field@@Base+0x80>
  408857:	nop    WORD PTR [rax+rax*1+0x0]
  408860:	lea    edx,[rcx+0x4]
  408863:	lea    r8d,[rdi*4+0x0]
  40886b:	mov    ebp,r11d
  40886e:	sub    ebp,edx
  408870:	cmp    ebp,r8d
  408873:	jb     408816 <flatcc_verify_string_vector_field@@Base+0x66>
  408875:	test   edi,edi
  408877:	je     408830 <flatcc_verify_string_vector_field@@Base+0x80>
  408879:	mov    ecx,edx
  40887b:	mov    ebx,DWORD PTR [rsi+rcx*1]
  40887e:	add    ebx,edx
  408880:	cmp    edx,ebx
  408882:	mov    ecx,ebx
  408884:	jae    4088c0 <flatcc_verify_string_vector_field@@Base+0x110>
  408886:	mov    edi,ebx
  408888:	lea    r9,[rdi+0x4]
  40888c:	cmp    r10,r9
  40888f:	jb     4088c0 <flatcc_verify_string_vector_field@@Base+0x110>
  408891:	test   bl,0x3
  408894:	jne    4088c0 <flatcc_verify_string_vector_field@@Base+0x110>
  408896:	mov    edi,DWORD PTR [rsi+rdi*1]
  408899:	add    ecx,0x4
  40889c:	mov    ebx,r11d
  40889f:	sub    ebx,ecx
  4088a1:	lea    r9d,[rdi+0x1]
  4088a5:	cmp    ebx,r9d
  4088a8:	jae    4088ea <flatcc_verify_string_vector_field@@Base+0x13a>
  4088aa:	nop    WORD PTR [rax+rax*1+0x0]
  4088b0:	mov    eax,0x8
  4088b5:	jmp    408830 <flatcc_verify_string_vector_field@@Base+0x80>
  4088ba:	nop    WORD PTR [rax+rax*1+0x0]
  4088c0:	mov    eax,0x11
  4088c5:	jmp    408830 <flatcc_verify_string_vector_field@@Base+0x80>
  4088ca:	nop    WORD PTR [rax+rax*1+0x0]
  4088d0:	sub    r11d,0x4
  4088d4:	shl    edx,0x2
  4088d7:	sub    r11d,ecx
  4088da:	cmp    r11d,edx
  4088dd:	mov    edx,0x1a
  4088e2:	cmovb  eax,edx
  4088e5:	jmp    408830 <flatcc_verify_string_vector_field@@Base+0x80>
  4088ea:	add    r8d,edx
  4088ed:	nop    DWORD PTR [rax]
  4088f0:	add    rcx,rsi
  4088f3:	cmp    BYTE PTR [rcx+rdi*1],0x0
  4088f7:	je     408908 <flatcc_verify_string_vector_field@@Base+0x158>
  4088f9:	mov    eax,0x7
  4088fe:	jmp    408830 <flatcc_verify_string_vector_field@@Base+0x80>
  408903:	nop    DWORD PTR [rax+rax*1+0x0]
  408908:	add    edx,0x4
  40890b:	cmp    r8d,edx
  40890e:	je     408830 <flatcc_verify_string_vector_field@@Base+0x80>
  408914:	mov    ecx,edx
  408916:	mov    ebx,DWORD PTR [rsi+rcx*1]
  408919:	add    ebx,edx
  40891b:	cmp    edx,ebx
  40891d:	mov    ecx,ebx
  40891f:	jae    4088c0 <flatcc_verify_string_vector_field@@Base+0x110>
  408921:	mov    edi,ebx
  408923:	lea    r9,[rdi+0x4]
  408927:	cmp    r10,r9
  40892a:	jb     4088c0 <flatcc_verify_string_vector_field@@Base+0x110>
  40892c:	test   bl,0x3
  40892f:	jne    4088c0 <flatcc_verify_string_vector_field@@Base+0x110>
  408931:	mov    edi,DWORD PTR [rsi+rdi*1]
  408934:	add    ecx,0x4
  408937:	mov    ebx,r11d
  40893a:	sub    ebx,ecx
  40893c:	lea    r9d,[rdi+0x1]
  408940:	cmp    ebx,r9d
  408943:	jb     4088b0 <flatcc_verify_string_vector_field@@Base+0x100>
  408949:	jmp    4088f0 <flatcc_verify_string_vector_field@@Base+0x140>
  40894b:	call   403060 <__stack_chk_fail@plt>

0000000000408950 <flatcc_verify_table_field@@Base>:
  408950:	sub    rsp,0x48
  408954:	mov    r10,rcx
  408957:	movzx  esi,si
  40895a:	lea    rcx,[rsp+0xc]
  40895f:	mov    r9,rdi
  408962:	mov    rax,QWORD PTR fs:0x28
  40896b:	mov    QWORD PTR [rsp+0x38],rax
  408970:	xor    eax,eax
  408972:	call   4082d0 <flatcc_emitter_copy_buffer@@Base+0x100>
  408977:	test   eax,eax
  408979:	jne    408983 <flatcc_verify_table_field@@Base+0x33>
  40897b:	mov    edx,DWORD PTR [rsp+0xc]
  40897f:	test   edx,edx
  408981:	jne    4089a0 <flatcc_verify_table_field@@Base+0x50>
  408983:	mov    rdi,QWORD PTR [rsp+0x38]
  408988:	xor    rdi,QWORD PTR fs:0x28
  408991:	jne    408a92 <flatcc_verify_table_field@@Base+0x142>
  408997:	add    rsp,0x48
  40899b:	ret    
  40899c:	nop    DWORD PTR [rax+0x0]
  4089a0:	mov    ecx,DWORD PTR [r9+0xc]
  4089a4:	mov    rdi,QWORD PTR [rdi]
  4089a7:	mov    eax,edx
  4089a9:	mov    r8d,DWORD PTR [r9+0x8]
  4089ad:	sub    ecx,0x1
  4089b0:	mov    esi,DWORD PTR [rdi+rax*1]
  4089b3:	mov    eax,0x3
  4089b8:	test   ecx,ecx
  4089ba:	mov    DWORD PTR [rsp+0x1c],ecx
  4089be:	je     408983 <flatcc_verify_table_field@@Base+0x33>
  4089c0:	add    esi,edx
  4089c2:	mov    eax,0xf
  4089c7:	cmp    edx,esi
  4089c9:	jae    408983 <flatcc_verify_table_field@@Base+0x33>
  4089cb:	mov    edx,esi
  4089cd:	mov    ecx,r8d
  4089d0:	lea    r9,[rdx+0x4]
  4089d4:	cmp    r9,rcx
  4089d7:	ja     408983 <flatcc_verify_table_field@@Base+0x33>
  4089d9:	test   sil,0x3
  4089dd:	jne    408983 <flatcc_verify_table_field@@Base+0x33>
  4089df:	mov    DWORD PTR [rsp+0x28],esi
  4089e3:	mov    eax,esi
  4089e5:	sub    eax,DWORD PTR [rdi+rdx*1]
  4089e8:	mov    edx,eax
  4089ea:	js     408a88 <flatcc_verify_table_field@@Base+0x138>
  4089f0:	test   dl,0x1
  4089f3:	jne    408a88 <flatcc_verify_table_field@@Base+0x138>
  4089f9:	mov    r9d,edx
  4089fc:	mov    eax,0x1b
  408a01:	lea    r11,[r9+0x2]
  408a05:	cmp    rcx,r11
  408a08:	jb     408983 <flatcc_verify_table_field@@Base+0x33>
  408a0e:	add    r9,rdi
  408a11:	mov    eax,0x1e
  408a16:	movzx  r11d,WORD PTR [r9]
  408a1a:	mov    ecx,r11d
  408a1d:	mov    WORD PTR [rsp+0x2e],r11w
  408a23:	add    r11d,edx
  408a26:	cmp    r8d,r11d
  408a29:	jb     408983 <flatcc_verify_table_field@@Base+0x33>
  408a2f:	test   cl,0x1
  408a32:	jne    408983 <flatcc_verify_table_field@@Base+0x33>
  408a38:	cmp    cx,0x3
  408a3c:	mov    eax,0x1c
  408a41:	jbe    408983 <flatcc_verify_table_field@@Base+0x33>
  408a47:	lea    eax,[rdx+0x2]
  408a4a:	mov    ecx,r8d
  408a4d:	sub    ecx,esi
  408a4f:	movzx  edx,WORD PTR [rdi+rax*1]
  408a53:	mov    eax,0x14
  408a58:	cmp    ecx,edx
  408a5a:	mov    WORD PTR [rsp+0x2c],dx
  408a5f:	jb     408983 <flatcc_verify_table_field@@Base+0x33>
  408a65:	mov    QWORD PTR [rsp+0x10],rdi
  408a6a:	mov    QWORD PTR [rsp+0x20],r9
  408a6f:	lea    rdi,[rsp+0x10]
  408a74:	mov    DWORD PTR [rsp+0x18],r8d
  408a79:	call   r10
  408a7c:	jmp    408983 <flatcc_verify_table_field@@Base+0x33>
  408a81:	nop    DWORD PTR [rax+0x0]
  408a88:	mov    eax,0x1d
  408a8d:	jmp    408983 <flatcc_verify_table_field@@Base+0x33>
  408a92:	call   403060 <__stack_chk_fail@plt>
  408a97:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408aa0 <flatcc_verify_table_vector_field@@Base>:
  408aa0:	push   r15
  408aa2:	push   r14
  408aa4:	movzx  esi,si
  408aa7:	push   r13
  408aa9:	push   r12
  408aab:	mov    r12,rcx
  408aae:	push   rbp
  408aaf:	push   rbx
  408ab0:	mov    r9,rdi
  408ab3:	sub    rsp,0x68
  408ab7:	lea    rcx,[rsp+0x2c]
  408abc:	mov    rax,QWORD PTR fs:0x28
  408ac5:	mov    QWORD PTR [rsp+0x58],rax
  408aca:	xor    eax,eax
  408acc:	call   4082d0 <flatcc_emitter_copy_buffer@@Base+0x100>
  408ad1:	test   eax,eax
  408ad3:	mov    ebp,eax
  408ad5:	jne    408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408ad7:	mov    eax,DWORD PTR [rsp+0x2c]
  408adb:	test   eax,eax
  408add:	jne    408b08 <flatcc_verify_table_vector_field@@Base+0x68>
  408adf:	mov    rdi,QWORD PTR [rsp+0x58]
  408ae4:	xor    rdi,QWORD PTR fs:0x28
  408aed:	mov    eax,ebp
  408aef:	jne    408dc6 <flatcc_verify_table_vector_field@@Base+0x326>
  408af5:	add    rsp,0x68
  408af9:	pop    rbx
  408afa:	pop    rbp
  408afb:	pop    r12
  408afd:	pop    r13
  408aff:	pop    r14
  408b01:	pop    r15
  408b03:	ret    
  408b04:	nop    DWORD PTR [rax+0x0]
  408b08:	mov    r14d,DWORD PTR [rdi+0xc]
  408b0c:	test   r14d,r14d
  408b0f:	jle    408b58 <flatcc_verify_table_vector_field@@Base+0xb8>
  408b11:	mov    r15,QWORD PTR [rdi]
  408b14:	mov    edx,eax
  408b16:	mov    edi,DWORD PTR [r15+rdx*1]
  408b1a:	add    edi,eax
  408b1c:	cmp    eax,edi
  408b1e:	jae    408b60 <flatcc_verify_table_vector_field@@Base+0xc0>
  408b20:	mov    ecx,DWORD PTR [r9+0x8]
  408b24:	mov    r8d,edi
  408b27:	lea    r9,[r8+0x4]
  408b2b:	cmp    r9,rcx
  408b2e:	mov    rsi,rcx
  408b31:	ja     408b60 <flatcc_verify_table_vector_field@@Base+0xc0>
  408b33:	test   r9b,0x3
  408b37:	je     408b70 <flatcc_verify_table_vector_field@@Base+0xd0>
  408b39:	and    r9d,0x3
  408b3d:	jne    408b60 <flatcc_verify_table_vector_field@@Base+0xc0>
  408b3f:	mov    eax,DWORD PTR [r15+r8*1]
  408b43:	cmp    eax,0x3fffffff
  408b48:	jbe    408da5 <flatcc_verify_table_vector_field@@Base+0x305>
  408b4e:	mov    ebp,0x19
  408b53:	jmp    408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408b55:	nop    DWORD PTR [rax]
  408b58:	mov    ebp,0x3
  408b5d:	jmp    408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408b5f:	nop
  408b60:	mov    ebp,0x10
  408b65:	jmp    408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408b6a:	nop    WORD PTR [rax+rax*1+0x0]
  408b70:	mov    eax,DWORD PTR [r15+r8*1]
  408b74:	cmp    eax,0x3fffffff
  408b79:	ja     408b39 <flatcc_verify_table_vector_field@@Base+0x99>
  408b7b:	lea    ebx,[rdi+0x4]
  408b7e:	lea    edx,[rax*4+0x0]
  408b85:	mov    r10d,esi
  408b88:	sub    r10d,ebx
  408b8b:	cmp    r10d,edx
  408b8e:	jb     408b39 <flatcc_verify_table_vector_field@@Base+0x99>
  408b90:	test   eax,eax
  408b92:	je     408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408b98:	sub    r14d,0x2
  408b9c:	mov    r13d,ebx
  408b9f:	add    r13,r15
  408ba2:	test   r14d,r14d
  408ba5:	mov    eax,DWORD PTR [r13+0x0]
  408ba9:	mov    DWORD PTR [rsp+0x3c],r14d
  408bae:	je     408b58 <flatcc_verify_table_vector_field@@Base+0xb8>
  408bb0:	add    eax,ebx
  408bb2:	cmp    ebx,eax
  408bb4:	jae    408c00 <flatcc_verify_table_vector_field@@Base+0x160>
  408bb6:	mov    edi,eax
  408bb8:	lea    r8,[rdi+0x4]
  408bbc:	cmp    rcx,r8
  408bbf:	jb     408c00 <flatcc_verify_table_vector_field@@Base+0x160>
  408bc1:	test   al,0x3
  408bc3:	jne    408c00 <flatcc_verify_table_vector_field@@Base+0x160>
  408bc5:	lea    r8,[rsp+0x30]
  408bca:	add    edx,ebx
  408bcc:	nop    DWORD PTR [rax+0x0]
  408bd0:	mov    DWORD PTR [rsp+0x48],eax
  408bd4:	mov    r11d,eax
  408bd7:	sub    r11d,DWORD PTR [r15+rdi*1]
  408bdb:	mov    edi,r11d
  408bde:	js     408c00 <flatcc_verify_table_vector_field@@Base+0x160>
  408be0:	test   dil,0x1
  408be4:	jne    408c00 <flatcc_verify_table_vector_field@@Base+0x160>
  408be6:	mov    r9d,edi
  408be9:	lea    r10,[r9+0x2]
  408bed:	cmp    rcx,r10
  408bf0:	jae    408cd8 <flatcc_verify_table_vector_field@@Base+0x238>
  408bf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408c00:	mov    eax,DWORD PTR [r13+0x0]
  408c04:	mov    ebp,0xf
  408c09:	mov    DWORD PTR [rsp+0x3c],r14d
  408c0e:	add    eax,ebx
  408c10:	cmp    ebx,eax
  408c12:	jae    408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408c18:	mov    edx,eax
  408c1a:	lea    rdi,[rdx+0x4]
  408c1e:	cmp    rcx,rdi
  408c21:	jb     408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408c27:	test   al,0x3
  408c29:	jne    408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408c2f:	mov    DWORD PTR [rsp+0x48],eax
  408c33:	mov    ebx,eax
  408c35:	sub    ebx,DWORD PTR [r15+rdx*1]
  408c39:	mov    edx,ebx
  408c3b:	js     408dbc <flatcc_verify_table_vector_field@@Base+0x31c>
  408c41:	test   dl,0x1
  408c44:	jne    408dbc <flatcc_verify_table_vector_field@@Base+0x31c>
  408c4a:	mov    edi,edx
  408c4c:	mov    ebp,0x1b
  408c51:	lea    r8,[rdi+0x2]
  408c55:	cmp    rcx,r8
  408c58:	jb     408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408c5e:	lea    rcx,[r15+rdi*1]
  408c62:	mov    ebp,0x1e
  408c67:	movzx  r8d,WORD PTR [rcx]
  408c6b:	mov    edi,r8d
  408c6e:	mov    WORD PTR [rsp+0x4e],r8w
  408c74:	add    r8d,edx
  408c77:	cmp    esi,r8d
  408c7a:	jb     408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408c80:	test   dil,0x1
  408c84:	jne    408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408c8a:	cmp    di,0x3
  408c8e:	mov    ebp,0x1c
  408c93:	jbe    408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408c99:	add    edx,0x2
  408c9c:	mov    ebx,esi
  408c9e:	mov    ebp,0x14
  408ca3:	movzx  edx,WORD PTR [r15+rdx*1]
  408ca8:	sub    ebx,eax
  408caa:	cmp    ebx,edx
  408cac:	mov    WORD PTR [rsp+0x4c],dx
  408cb1:	jb     408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408cb7:	mov    QWORD PTR [rsp+0x40],rcx
  408cbc:	mov    QWORD PTR [rsp+0x30],r15
  408cc1:	lea    rdi,[rsp+0x30]
  408cc6:	mov    DWORD PTR [rsp+0x38],esi
  408cca:	call   r12
  408ccd:	mov    ebp,eax
  408ccf:	jmp    408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408cd4:	nop    DWORD PTR [rax+0x0]
  408cd8:	add    r9,r15
  408cdb:	movzx  r10d,WORD PTR [r9]
  408cdf:	mov    r11d,r10d
  408ce2:	mov    WORD PTR [rsp+0x4e],r10w
  408ce8:	add    r10d,edi
  408ceb:	cmp    esi,r10d
  408cee:	jb     408c00 <flatcc_verify_table_vector_field@@Base+0x160>
  408cf4:	test   r11b,0x1
  408cf8:	jne    408c00 <flatcc_verify_table_vector_field@@Base+0x160>
  408cfe:	cmp    r11w,0x3
  408d03:	jbe    408c00 <flatcc_verify_table_vector_field@@Base+0x160>
  408d09:	add    edi,0x2
  408d0c:	mov    r10d,esi
  408d0f:	movzx  edi,WORD PTR [r15+rdi*1]
  408d14:	sub    r10d,eax
  408d17:	cmp    r10d,edi
  408d1a:	mov    WORD PTR [rsp+0x4c],di
  408d1f:	jb     408c00 <flatcc_verify_table_vector_field@@Base+0x160>
  408d25:	mov    DWORD PTR [rsp+0x1c],edx
  408d29:	mov    QWORD PTR [rsp+0x10],rcx
  408d2e:	mov    rdi,r8
  408d31:	mov    DWORD PTR [rsp+0x38],esi
  408d35:	mov    DWORD PTR [rsp+0x18],esi
  408d39:	mov    QWORD PTR [rsp+0x8],r8
  408d3e:	mov    QWORD PTR [rsp+0x40],r9
  408d43:	mov    QWORD PTR [rsp+0x30],r15
  408d48:	call   r12
  408d4b:	test   eax,eax
  408d4d:	mov    r8,QWORD PTR [rsp+0x8]
  408d52:	mov    esi,DWORD PTR [rsp+0x18]
  408d56:	mov    rcx,QWORD PTR [rsp+0x10]
  408d5b:	mov    edx,DWORD PTR [rsp+0x1c]
  408d5f:	jne    408c00 <flatcc_verify_table_vector_field@@Base+0x160>
  408d65:	add    ebx,0x4
  408d68:	cmp    ebx,edx
  408d6a:	je     408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408d70:	mov    r13d,ebx
  408d73:	add    r13,r15
  408d76:	mov    eax,DWORD PTR [r13+0x0]
  408d7a:	mov    DWORD PTR [rsp+0x3c],r14d
  408d7f:	add    eax,ebx
  408d81:	cmp    ebx,eax
  408d83:	jae    408c00 <flatcc_verify_table_vector_field@@Base+0x160>
  408d89:	mov    edi,eax
  408d8b:	lea    r9,[rdi+0x4]
  408d8f:	cmp    rcx,r9
  408d92:	jb     408c00 <flatcc_verify_table_vector_field@@Base+0x160>
  408d98:	test   al,0x3
  408d9a:	je     408bd0 <flatcc_verify_table_vector_field@@Base+0x130>
  408da0:	jmp    408c00 <flatcc_verify_table_vector_field@@Base+0x160>
  408da5:	sub    esi,0x4
  408da8:	shl    eax,0x2
  408dab:	sub    esi,edi
  408dad:	cmp    esi,eax
  408daf:	mov    eax,0x1a
  408db4:	cmovb  ebp,eax
  408db7:	jmp    408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408dbc:	mov    ebp,0x1d
  408dc1:	jmp    408adf <flatcc_verify_table_vector_field@@Base+0x3f>
  408dc6:	call   403060 <__stack_chk_fail@plt>
  408dcb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408dd0 <flatcc_verify_union_table@@Base>:
  408dd0:	sub    rsp,0x38
  408dd4:	mov    edx,DWORD PTR [rdi+0xc]
  408dd7:	mov    r8d,DWORD PTR [rdi+0x18]
  408ddb:	mov    rax,QWORD PTR fs:0x28
  408de4:	mov    QWORD PTR [rsp+0x28],rax
  408de9:	xor    eax,eax
  408deb:	mov    ecx,DWORD PTR [rdi+0x14]
  408dee:	mov    r10d,DWORD PTR [rdi+0x8]
  408df2:	mov    eax,0x3
  408df7:	sub    edx,0x1
  408dfa:	mov    r9,QWORD PTR [rdi]
  408dfd:	test   edx,edx
  408dff:	mov    DWORD PTR [rsp+0xc],edx
  408e03:	jne    408e20 <flatcc_verify_union_table@@Base+0x50>
  408e05:	mov    rsi,QWORD PTR [rsp+0x28]
  408e0a:	xor    rsi,QWORD PTR fs:0x28
  408e13:	jne    408eea <flatcc_verify_union_table@@Base+0x11a>
  408e19:	add    rsp,0x38
  408e1d:	ret    
  408e1e:	xchg   ax,ax
  408e20:	add    r8d,ecx
  408e23:	mov    eax,0xf
  408e28:	cmp    ecx,r8d
  408e2b:	jae    408e05 <flatcc_verify_union_table@@Base+0x35>
  408e2d:	mov    edx,r8d
  408e30:	mov    ecx,r10d
  408e33:	lea    rdi,[rdx+0x4]
  408e37:	cmp    rdi,rcx
  408e3a:	ja     408e05 <flatcc_verify_union_table@@Base+0x35>
  408e3c:	test   r8b,0x3
  408e40:	jne    408e05 <flatcc_verify_union_table@@Base+0x35>
  408e42:	mov    DWORD PTR [rsp+0x18],r8d
  408e47:	mov    eax,r8d
  408e4a:	sub    eax,DWORD PTR [r9+rdx*1]
  408e4e:	mov    edx,eax
  408e50:	js     408ee0 <flatcc_verify_union_table@@Base+0x110>
  408e56:	test   dl,0x1
  408e59:	jne    408ee0 <flatcc_verify_union_table@@Base+0x110>
  408e5f:	mov    edi,edx
  408e61:	mov    eax,0x1b
  408e66:	lea    r11,[rdi+0x2]
  408e6a:	cmp    rcx,r11
  408e6d:	jb     408e05 <flatcc_verify_union_table@@Base+0x35>
  408e6f:	add    rdi,r9
  408e72:	mov    eax,0x1e
  408e77:	movzx  ecx,WORD PTR [rdi]
  408e7a:	mov    r11d,ecx
  408e7d:	mov    WORD PTR [rsp+0x1e],cx
  408e82:	add    ecx,edx
  408e84:	cmp    r10d,ecx
  408e87:	jb     408e05 <flatcc_verify_union_table@@Base+0x35>
  408e8d:	test   r11b,0x1
  408e91:	jne    408e05 <flatcc_verify_union_table@@Base+0x35>
  408e97:	cmp    r11w,0x3
  408e9c:	mov    eax,0x1c
  408ea1:	jbe    408e05 <flatcc_verify_union_table@@Base+0x35>
  408ea7:	lea    eax,[rdx+0x2]
  408eaa:	mov    ecx,r10d
  408ead:	sub    ecx,r8d
  408eb0:	movzx  edx,WORD PTR [r9+rax*1]
  408eb5:	mov    eax,0x14
  408eba:	cmp    ecx,edx
  408ebc:	mov    WORD PTR [rsp+0x1c],dx
  408ec1:	jb     408e05 <flatcc_verify_union_table@@Base+0x35>
  408ec7:	mov    QWORD PTR [rsp+0x10],rdi
  408ecc:	mov    QWORD PTR [rsp],r9
  408ed0:	mov    rdi,rsp
  408ed3:	mov    DWORD PTR [rsp+0x8],r10d
  408ed8:	call   rsi
  408eda:	jmp    408e05 <flatcc_verify_union_table@@Base+0x35>
  408edf:	nop
  408ee0:	mov    eax,0x1d
  408ee5:	jmp    408e05 <flatcc_verify_union_table@@Base+0x35>
  408eea:	call   403060 <__stack_chk_fail@plt>
  408eef:	nop

0000000000408ef0 <flatcc_verify_union_struct@@Base>:
  408ef0:	mov    ecx,DWORD PTR [rdi+0x18]
  408ef3:	mov    r8d,DWORD PTR [rdi+0x14]
  408ef7:	mov    eax,0x12
  408efc:	mov    edi,DWORD PTR [rdi+0x8]
  408eff:	test   ecx,ecx
  408f01:	jne    408f08 <flatcc_verify_union_struct@@Base+0x18>
  408f03:	repz ret 
  408f05:	nop    DWORD PTR [rax]
  408f08:	add    ecx,r8d
  408f0b:	cmp    edi,ecx
  408f0d:	jb     408f03 <flatcc_verify_union_struct@@Base+0x13>
  408f0f:	add    esi,ecx
  408f11:	jb     408f2f <flatcc_verify_union_struct@@Base+0x3f>
  408f13:	cmp    edi,esi
  408f15:	mov    eax,0x9
  408f1a:	jb     408f03 <flatcc_verify_union_struct@@Base+0x13>
  408f1c:	movzx  eax,dx
  408f1f:	sub    eax,0x1
  408f22:	and    ecx,eax
  408f24:	cmp    ecx,0x1
  408f27:	sbb    eax,eax
  408f29:	not    eax
  408f2b:	and    eax,0xb
  408f2e:	ret    
  408f2f:	mov    eax,0xa
  408f34:	ret    
  408f35:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000408f40 <flatcc_verify_union_string@@Base>:
  408f40:	mov    ecx,DWORD PTR [rdi+0x14]
  408f43:	mov    edx,DWORD PTR [rdi+0x18]
  408f46:	mov    eax,0x11
  408f4b:	add    edx,ecx
  408f4d:	cmp    ecx,edx
  408f4f:	jae    408f81 <flatcc_verify_union_string@@Base+0x41>
  408f51:	mov    r8d,DWORD PTR [rdi+0x8]
  408f55:	mov    esi,edx
  408f57:	lea    r9,[rsi+0x4]
  408f5b:	cmp    r9,r8
  408f5e:	mov    rcx,r8
  408f61:	ja     408f81 <flatcc_verify_union_string@@Base+0x41>
  408f63:	test   dl,0x3
  408f66:	jne    408f88 <flatcc_verify_union_string@@Base+0x48>
  408f68:	mov    rdi,QWORD PTR [rdi]
  408f6b:	add    edx,0x4
  408f6e:	mov    eax,0x8
  408f73:	sub    ecx,edx
  408f75:	mov    esi,DWORD PTR [rdi+rsi*1]
  408f78:	lea    r8d,[rsi+0x1]
  408f7c:	cmp    ecx,r8d
  408f7f:	jae    408f90 <flatcc_verify_union_string@@Base+0x50>
  408f81:	repz ret 
  408f83:	nop    DWORD PTR [rax+rax*1+0x0]
  408f88:	repz ret 
  408f8a:	nop    WORD PTR [rax+rax*1+0x0]
  408f90:	add    rdx,rdi
  408f93:	add    rdx,rsi
  408f96:	cmp    BYTE PTR [rdx],0x1
  408f99:	sbb    eax,eax
  408f9b:	not    eax
  408f9d:	and    eax,0x7
  408fa0:	ret    
  408fa1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  408fac:	nop    DWORD PTR [rax+0x0]

0000000000408fb0 <flatcc_verify_buffer_header@@Base>:
  408fb0:	push   rbx
  408fb1:	sub    rsp,0x10
  408fb5:	mov    rax,QWORD PTR fs:0x28
  408fbe:	mov    QWORD PTR [rsp+0x8],rax
  408fc3:	xor    eax,eax
  408fc5:	test   dil,0x3
  408fc9:	mov    eax,0x5
  408fce:	je     408ff0 <flatcc_verify_buffer_header@@Base+0x40>
  408fd0:	mov    rcx,QWORD PTR [rsp+0x8]
  408fd5:	xor    rcx,QWORD PTR fs:0x28
  408fde:	jne    409045 <flatcc_verify_buffer_header@@Base+0x95>
  408fe0:	add    rsp,0x10
  408fe4:	pop    rbx
  408fe5:	ret    
  408fe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408ff0:	mov    rcx,rdx
  408ff3:	mov    edx,0xfffffff7
  408ff8:	mov    eax,0x6
  408ffd:	cmp    rsi,rdx
  409000:	ja     408fd0 <flatcc_verify_buffer_header@@Base+0x20>
  409002:	cmp    rsi,0x7
  409006:	mov    eax,0x1
  40900b:	jbe    408fd0 <flatcc_verify_buffer_header@@Base+0x20>
  40900d:	test   rcx,rcx
  409010:	je     409041 <flatcc_verify_buffer_header@@Base+0x91>
  409012:	mov    rbx,rdi
  409015:	lea    rdi,[rsp+0x4]
  40901a:	mov    edx,0x4
  40901f:	mov    rsi,rcx
  409022:	mov    DWORD PTR [rsp+0x4],0x0
  40902a:	call   403040 <strncpy@plt>
  40902f:	mov    edx,DWORD PTR [rsp+0x4]
  409033:	cmp    DWORD PTR [rbx+0x4],edx
  409036:	je     409041 <flatcc_verify_buffer_header@@Base+0x91>
  409038:	test   edx,edx
  40903a:	mov    eax,0x2
  40903f:	jne    408fd0 <flatcc_verify_buffer_header@@Base+0x20>
  409041:	xor    eax,eax
  409043:	jmp    408fd0 <flatcc_verify_buffer_header@@Base+0x20>
  409045:	call   403060 <__stack_chk_fail@plt>
  40904a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000409050 <flatcc_verify_typed_buffer_header@@Base>:
  409050:	test   dil,0x3
  409054:	mov    eax,0x5
  409059:	je     409060 <flatcc_verify_typed_buffer_header@@Base+0x10>
  40905b:	repz ret 
  40905d:	nop    DWORD PTR [rax]
  409060:	mov    ecx,0xfffffff7
  409065:	mov    eax,0x6
  40906a:	cmp    rsi,rcx
  40906d:	ja     40905b <flatcc_verify_typed_buffer_header@@Base+0xb>
  40906f:	cmp    rsi,0x7
  409073:	mov    eax,0x1
  409078:	jbe    40905b <flatcc_verify_typed_buffer_header@@Base+0xb>
  40907a:	xor    eax,eax
  40907c:	test   edx,edx
  40907e:	je     40905b <flatcc_verify_typed_buffer_header@@Base+0xb>
  409080:	xor    eax,eax
  409082:	cmp    edx,DWORD PTR [rdi+0x4]
  409085:	setne  al
  409088:	add    eax,eax
  40908a:	ret    
  40908b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000409090 <flatcc_verify_struct_as_root@@Base>:
  409090:	push   r14
  409092:	push   r13
  409094:	mov    r14d,r8d
  409097:	push   r12
  409099:	push   rbp
  40909a:	mov    r12,rdx
  40909d:	push   rbx
  40909e:	mov    rbp,rdi
  4090a1:	mov    rbx,rsi
  4090a4:	mov    r13,rcx
  4090a7:	call   408fb0 <flatcc_verify_buffer_header@@Base>
  4090ac:	test   eax,eax
  4090ae:	jne    4090d0 <flatcc_verify_struct_as_root@@Base+0x40>
  4090b0:	mov    edx,DWORD PTR [rbp+0x0]
  4090b3:	cmp    edx,ebx
  4090b5:	ja     4090bb <flatcc_verify_struct_as_root@@Base+0x2b>
  4090b7:	test   edx,edx
  4090b9:	jne    4090f0 <flatcc_verify_struct_as_root@@Base+0x60>
  4090bb:	mov    eax,0x12
  4090c0:	pop    rbx
  4090c1:	pop    rbp
  4090c2:	pop    r12
  4090c4:	pop    r13
  4090c6:	pop    r14
  4090c8:	ret    
  4090c9:	nop    DWORD PTR [rax+0x0]
  4090d0:	mov    rdx,r12
  4090d3:	mov    rsi,rbx
  4090d6:	mov    rdi,rbp
  4090d9:	pop    rbx
  4090da:	pop    rbp
  4090db:	pop    r12
  4090dd:	pop    r13
  4090df:	pop    r14
  4090e1:	jmp    408fb0 <flatcc_verify_buffer_header@@Base>
  4090e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4090f0:	add    r13d,edx
  4090f3:	jb     40911b <flatcc_verify_struct_as_root@@Base+0x8b>
  4090f5:	cmp    ebx,r13d
  4090f8:	jae    409108 <flatcc_verify_struct_as_root@@Base+0x78>
  4090fa:	mov    eax,0x9
  4090ff:	jmp    4090c0 <flatcc_verify_struct_as_root@@Base+0x30>
  409101:	nop    DWORD PTR [rax+0x0]
  409108:	movzx  ecx,r14w
  40910c:	sub    ecx,0x1
  40910f:	test   ecx,edx
  409111:	mov    edx,0xb
  409116:	cmovne eax,edx
  409119:	jmp    4090c0 <flatcc_verify_struct_as_root@@Base+0x30>
  40911b:	mov    eax,0xa
  409120:	jmp    4090c0 <flatcc_verify_struct_as_root@@Base+0x30>
  409122:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40912d:	nop    DWORD PTR [rax]

0000000000409130 <flatcc_verify_struct_as_typed_root@@Base>:
  409130:	push   r14
  409132:	push   r13
  409134:	mov    r14d,r8d
  409137:	push   r12
  409139:	push   rbp
  40913a:	mov    r12d,edx
  40913d:	push   rbx
  40913e:	mov    rbp,rdi
  409141:	mov    rbx,rsi
  409144:	mov    r13,rcx
  409147:	call   409050 <flatcc_verify_typed_buffer_header@@Base>
  40914c:	test   eax,eax
  40914e:	jne    409170 <flatcc_verify_struct_as_typed_root@@Base+0x40>
  409150:	mov    edx,DWORD PTR [rbp+0x0]
  409153:	cmp    edx,ebx
  409155:	ja     40915b <flatcc_verify_struct_as_typed_root@@Base+0x2b>
  409157:	test   edx,edx
  409159:	jne    409190 <flatcc_verify_struct_as_typed_root@@Base+0x60>
  40915b:	mov    eax,0x12
  409160:	pop    rbx
  409161:	pop    rbp
  409162:	pop    r12
  409164:	pop    r13
  409166:	pop    r14
  409168:	ret    
  409169:	nop    DWORD PTR [rax+0x0]
  409170:	mov    edx,r12d
  409173:	mov    rsi,rbx
  409176:	mov    rdi,rbp
  409179:	pop    rbx
  40917a:	pop    rbp
  40917b:	pop    r12
  40917d:	pop    r13
  40917f:	pop    r14
  409181:	jmp    409050 <flatcc_verify_typed_buffer_header@@Base>
  409186:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409190:	add    r13d,edx
  409193:	jb     4091bb <flatcc_verify_struct_as_typed_root@@Base+0x8b>
  409195:	cmp    ebx,r13d
  409198:	jae    4091a8 <flatcc_verify_struct_as_typed_root@@Base+0x78>
  40919a:	mov    eax,0x9
  40919f:	jmp    409160 <flatcc_verify_struct_as_typed_root@@Base+0x30>
  4091a1:	nop    DWORD PTR [rax+0x0]
  4091a8:	movzx  ecx,r14w
  4091ac:	sub    ecx,0x1
  4091af:	test   ecx,edx
  4091b1:	mov    edx,0xb
  4091b6:	cmovne eax,edx
  4091b9:	jmp    409160 <flatcc_verify_struct_as_typed_root@@Base+0x30>
  4091bb:	mov    eax,0xa
  4091c0:	jmp    409160 <flatcc_verify_struct_as_typed_root@@Base+0x30>
  4091c2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4091cd:	nop    DWORD PTR [rax]

00000000004091d0 <flatcc_verify_table_as_root@@Base>:
  4091d0:	push   r14
  4091d2:	push   r13
  4091d4:	mov    r13,rsi
  4091d7:	push   r12
  4091d9:	push   rbp
  4091da:	mov    ebp,esi
  4091dc:	push   rbx
  4091dd:	mov    rsi,rbp
  4091e0:	mov    rbx,rdi
  4091e3:	mov    r12,rdx
  4091e6:	mov    r14,rcx
  4091e9:	sub    rsp,0x30
  4091ed:	mov    rax,QWORD PTR fs:0x28
  4091f6:	mov    QWORD PTR [rsp+0x28],rax
  4091fb:	xor    eax,eax
  4091fd:	call   408fb0 <flatcc_verify_buffer_header@@Base>
  409202:	test   eax,eax
  409204:	jne    409258 <flatcc_verify_table_as_root@@Base+0x88>
  409206:	mov    edx,DWORD PTR [rbx]
  409208:	mov    DWORD PTR [rsp+0xc],0x63
  409210:	mov    eax,0xf
  409215:	test   edx,edx
  409217:	je     409230 <flatcc_verify_table_as_root@@Base+0x60>
  409219:	mov    ecx,edx
  40921b:	lea    rsi,[rcx+0x4]
  40921f:	cmp    rbp,rsi
  409222:	jb     409230 <flatcc_verify_table_as_root@@Base+0x60>
  409224:	test   dl,0x3
  409227:	je     409270 <flatcc_verify_table_as_root@@Base+0xa0>
  409229:	nop    DWORD PTR [rax+0x0]
  409230:	mov    rcx,QWORD PTR [rsp+0x28]
  409235:	xor    rcx,QWORD PTR fs:0x28
  40923e:	jne    40931a <flatcc_verify_table_as_root@@Base+0x14a>
  409244:	add    rsp,0x30
  409248:	pop    rbx
  409249:	pop    rbp
  40924a:	pop    r12
  40924c:	pop    r13
  40924e:	pop    r14
  409250:	ret    
  409251:	nop    DWORD PTR [rax+0x0]
  409258:	mov    rdx,r12
  40925b:	mov    rsi,rbp
  40925e:	mov    rdi,rbx
  409261:	call   408fb0 <flatcc_verify_buffer_header@@Base>
  409266:	jmp    409230 <flatcc_verify_table_as_root@@Base+0x60>
  409268:	nop    DWORD PTR [rax+rax*1+0x0]
  409270:	mov    eax,edx
  409272:	sub    eax,DWORD PTR [rbx+rcx*1]
  409275:	mov    DWORD PTR [rsp+0x18],edx
  409279:	mov    ecx,eax
  40927b:	js     409310 <flatcc_verify_table_as_root@@Base+0x140>
  409281:	test   cl,0x1
  409284:	jne    409310 <flatcc_verify_table_as_root@@Base+0x140>
  40928a:	mov    esi,ecx
  40928c:	mov    eax,0x1b
  409291:	lea    rdi,[rsi+0x2]
  409295:	cmp    rbp,rdi
  409298:	jb     409230 <flatcc_verify_table_as_root@@Base+0x60>
  40929a:	add    rsi,rbx
  40929d:	mov    eax,0x1e
  4092a2:	movzx  edi,WORD PTR [rsi]
  4092a5:	mov    r8d,edi
  4092a8:	mov    WORD PTR [rsp+0x1e],di
  4092ad:	add    edi,ecx
  4092af:	cmp    r13d,edi
  4092b2:	jb     409230 <flatcc_verify_table_as_root@@Base+0x60>
  4092b8:	test   r8b,0x1
  4092bc:	jne    409230 <flatcc_verify_table_as_root@@Base+0x60>
  4092c2:	cmp    r8w,0x3
  4092c7:	mov    eax,0x1c
  4092cc:	jbe    409230 <flatcc_verify_table_as_root@@Base+0x60>
  4092d2:	lea    eax,[rcx+0x2]
  4092d5:	mov    ecx,r13d
  4092d8:	sub    ecx,edx
  4092da:	movzx  eax,WORD PTR [rbx+rax*1]
  4092de:	movzx  edx,ax
  4092e1:	mov    WORD PTR [rsp+0x1c],ax
  4092e6:	mov    eax,0x14
  4092eb:	cmp    ecx,edx
  4092ed:	jb     409230 <flatcc_verify_table_as_root@@Base+0x60>
  4092f3:	mov    QWORD PTR [rsp+0x10],rsi
  4092f8:	mov    QWORD PTR [rsp],rbx
  4092fc:	mov    rdi,rsp
  4092ff:	mov    DWORD PTR [rsp+0x8],r13d
  409304:	call   r14
  409307:	jmp    409230 <flatcc_verify_table_as_root@@Base+0x60>
  40930c:	nop    DWORD PTR [rax+0x0]
  409310:	mov    eax,0x1d
  409315:	jmp    409230 <flatcc_verify_table_as_root@@Base+0x60>
  40931a:	call   403060 <__stack_chk_fail@plt>
  40931f:	nop

0000000000409320 <flatcc_verify_table_as_typed_root@@Base>:
  409320:	push   r14
  409322:	push   r13
  409324:	mov    r13,rsi
  409327:	push   r12
  409329:	push   rbp
  40932a:	mov    ebp,esi
  40932c:	push   rbx
  40932d:	mov    rsi,rbp
  409330:	mov    rbx,rdi
  409333:	mov    r12d,edx
  409336:	mov    r14,rcx
  409339:	sub    rsp,0x30
  40933d:	mov    rax,QWORD PTR fs:0x28
  409346:	mov    QWORD PTR [rsp+0x28],rax
  40934b:	xor    eax,eax
  40934d:	call   409050 <flatcc_verify_typed_buffer_header@@Base>
  409352:	test   eax,eax
  409354:	jne    4093a8 <flatcc_verify_table_as_typed_root@@Base+0x88>
  409356:	mov    edx,DWORD PTR [rbx]
  409358:	mov    DWORD PTR [rsp+0xc],0x63
  409360:	mov    eax,0xf
  409365:	test   edx,edx
  409367:	je     409380 <flatcc_verify_table_as_typed_root@@Base+0x60>
  409369:	mov    ecx,edx
  40936b:	lea    rsi,[rcx+0x4]
  40936f:	cmp    rbp,rsi
  409372:	jb     409380 <flatcc_verify_table_as_typed_root@@Base+0x60>
  409374:	test   dl,0x3
  409377:	je     4093c0 <flatcc_verify_table_as_typed_root@@Base+0xa0>
  409379:	nop    DWORD PTR [rax+0x0]
  409380:	mov    rcx,QWORD PTR [rsp+0x28]
  409385:	xor    rcx,QWORD PTR fs:0x28
  40938e:	jne    40946a <flatcc_verify_table_as_typed_root@@Base+0x14a>
  409394:	add    rsp,0x30
  409398:	pop    rbx
  409399:	pop    rbp
  40939a:	pop    r12
  40939c:	pop    r13
  40939e:	pop    r14
  4093a0:	ret    
  4093a1:	nop    DWORD PTR [rax+0x0]
  4093a8:	mov    edx,r12d
  4093ab:	mov    rsi,rbp
  4093ae:	mov    rdi,rbx
  4093b1:	call   409050 <flatcc_verify_typed_buffer_header@@Base>
  4093b6:	jmp    409380 <flatcc_verify_table_as_typed_root@@Base+0x60>
  4093b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4093c0:	mov    eax,edx
  4093c2:	sub    eax,DWORD PTR [rbx+rcx*1]
  4093c5:	mov    DWORD PTR [rsp+0x18],edx
  4093c9:	mov    ecx,eax
  4093cb:	js     409460 <flatcc_verify_table_as_typed_root@@Base+0x140>
  4093d1:	test   cl,0x1
  4093d4:	jne    409460 <flatcc_verify_table_as_typed_root@@Base+0x140>
  4093da:	mov    esi,ecx
  4093dc:	mov    eax,0x1b
  4093e1:	lea    rdi,[rsi+0x2]
  4093e5:	cmp    rbp,rdi
  4093e8:	jb     409380 <flatcc_verify_table_as_typed_root@@Base+0x60>
  4093ea:	add    rsi,rbx
  4093ed:	mov    eax,0x1e
  4093f2:	movzx  edi,WORD PTR [rsi]
  4093f5:	mov    r8d,edi
  4093f8:	mov    WORD PTR [rsp+0x1e],di
  4093fd:	add    edi,ecx
  4093ff:	cmp    r13d,edi
  409402:	jb     409380 <flatcc_verify_table_as_typed_root@@Base+0x60>
  409408:	test   r8b,0x1
  40940c:	jne    409380 <flatcc_verify_table_as_typed_root@@Base+0x60>
  409412:	cmp    r8w,0x3
  409417:	mov    eax,0x1c
  40941c:	jbe    409380 <flatcc_verify_table_as_typed_root@@Base+0x60>
  409422:	lea    eax,[rcx+0x2]
  409425:	mov    ecx,r13d
  409428:	sub    ecx,edx
  40942a:	movzx  eax,WORD PTR [rbx+rax*1]
  40942e:	movzx  edx,ax
  409431:	mov    WORD PTR [rsp+0x1c],ax
  409436:	mov    eax,0x14
  40943b:	cmp    ecx,edx
  40943d:	jb     409380 <flatcc_verify_table_as_typed_root@@Base+0x60>
  409443:	mov    QWORD PTR [rsp+0x10],rsi
  409448:	mov    QWORD PTR [rsp],rbx
  40944c:	mov    rdi,rsp
  40944f:	mov    DWORD PTR [rsp+0x8],r13d
  409454:	call   r14
  409457:	jmp    409380 <flatcc_verify_table_as_typed_root@@Base+0x60>
  40945c:	nop    DWORD PTR [rax+0x0]
  409460:	mov    eax,0x1d
  409465:	jmp    409380 <flatcc_verify_table_as_typed_root@@Base+0x60>
  40946a:	call   403060 <__stack_chk_fail@plt>
  40946f:	nop

0000000000409470 <flatcc_verify_struct_as_nested_root@@Base>:
  409470:	push   r15
  409472:	push   r14
  409474:	mov    r14,r8
  409477:	push   r13
  409479:	push   r12
  40947b:	movzx  r12d,r9w
  40947f:	push   rbp
  409480:	push   rbx
  409481:	movzx  ebx,si
  409484:	mov    r13d,r9d
  409487:	mov    r8d,0x1
  40948d:	mov    r9d,0xffffffff
  409493:	sub    rsp,0x18
  409497:	mov    esi,ebx
  409499:	mov    r15,rdi
  40949c:	mov    QWORD PTR [rsp+0x8],rcx
  4094a1:	mov    rcx,r12
  4094a4:	mov    ebp,edx
  4094a6:	call   4086d0 <flatcc_verify_vector_field@@Base>
  4094ab:	test   eax,eax
  4094ad:	jne    409508 <flatcc_verify_struct_as_nested_root@@Base+0x98>
  4094af:	add    ebx,0x2
  4094b2:	add    ebx,ebx
  4094b4:	cmp    bx,WORD PTR [r15+0x1e]
  4094b9:	jae    409538 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
  4094bb:	mov    rax,QWORD PTR [r15+0x10]
  4094bf:	movzx  ebx,bx
  4094c2:	movzx  eax,WORD PTR [rax+rbx*1]
  4094c6:	test   ax,ax
  4094c9:	je     409538 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
  4094cb:	mov    edi,DWORD PTR [r15+0x18]
  4094cf:	add    rdi,rax
  4094d2:	add    rdi,QWORD PTR [r15]
  4094d5:	je     409538 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
  4094d7:	mov    eax,DWORD PTR [rdi]
  4094d9:	mov    rdx,QWORD PTR [rsp+0x8]
  4094de:	movzx  r8d,r13w
  4094e2:	mov    rcx,r14
  4094e5:	add    rdi,rax
  4094e8:	mov    esi,DWORD PTR [rdi]
  4094ea:	add    rsp,0x18
  4094ee:	add    rdi,0x4
  4094f2:	pop    rbx
  4094f3:	pop    rbp
  4094f4:	pop    r12
  4094f6:	pop    r13
  4094f8:	pop    r14
  4094fa:	pop    r15
  4094fc:	jmp    409090 <flatcc_verify_struct_as_root@@Base>
  409501:	nop    DWORD PTR [rax+0x0]
  409508:	add    rsp,0x18
  40950c:	mov    rcx,r12
  40950f:	mov    edx,ebp
  409511:	mov    esi,ebx
  409513:	mov    rdi,r15
  409516:	mov    r9d,0xffffffff
  40951c:	pop    rbx
  40951d:	pop    rbp
  40951e:	pop    r12
  409520:	pop    r13
  409522:	pop    r14
  409524:	pop    r15
  409526:	mov    r8d,0x1
  40952c:	jmp    4086d0 <flatcc_verify_vector_field@@Base>
  409531:	nop    DWORD PTR [rax+0x0]
  409538:	add    rsp,0x18
  40953c:	xor    eax,eax
  40953e:	pop    rbx
  40953f:	pop    rbp
  409540:	pop    r12
  409542:	pop    r13
  409544:	pop    r14
  409546:	pop    r15
  409548:	ret    
  409549:	nop    DWORD PTR [rax+0x0]

0000000000409550 <flatcc_verify_table_as_nested_root@@Base>:
  409550:	push   r15
  409552:	push   r14
  409554:	movzx  r14d,r8w
  409558:	push   r13
  40955a:	push   r12
  40955c:	mov    r8d,0x1
  409562:	push   rbp
  409563:	push   rbx
  409564:	movzx  ebx,si
  409567:	mov    r12,rcx
  40956a:	mov    esi,ebx
  40956c:	mov    rcx,r14
  40956f:	sub    rsp,0x48
  409573:	mov    r15,rdi
  409576:	mov    ebp,edx
  409578:	mov    QWORD PTR [rsp+0x8],r9
  40957d:	mov    r9d,0xffffffff
  409583:	mov    rax,QWORD PTR fs:0x28
  40958c:	mov    QWORD PTR [rsp+0x38],rax
  409591:	xor    eax,eax
  409593:	call   4086d0 <flatcc_verify_vector_field@@Base>
  409598:	test   eax,eax
  40959a:	jne    409640 <flatcc_verify_table_as_nested_root@@Base+0xf0>
  4095a0:	add    ebx,0x2
  4095a3:	add    ebx,ebx
  4095a5:	cmp    bx,WORD PTR [r15+0x1e]
  4095aa:	jae    409600 <flatcc_verify_table_as_nested_root@@Base+0xb0>
  4095ac:	mov    rdx,QWORD PTR [r15+0x10]
  4095b0:	movzx  ebx,bx
  4095b3:	movzx  edx,WORD PTR [rdx+rbx*1]
  4095b7:	test   dx,dx
  4095ba:	je     409600 <flatcc_verify_table_as_nested_root@@Base+0xb0>
  4095bc:	mov    ebx,DWORD PTR [r15+0x18]
  4095c0:	add    rbx,rdx
  4095c3:	add    rbx,QWORD PTR [r15]
  4095c6:	je     409600 <flatcc_verify_table_as_nested_root@@Base+0xb0>
  4095c8:	mov    eax,DWORD PTR [rbx]
  4095ca:	mov    rdx,r12
  4095cd:	add    rbx,rax
  4095d0:	mov    r14d,DWORD PTR [rbx]
  4095d3:	lea    r13,[rbx+0x4]
  4095d7:	mov    rdi,r13
  4095da:	mov    rsi,r14
  4095dd:	mov    rbp,r14
  4095e0:	call   408fb0 <flatcc_verify_buffer_header@@Base>
  4095e5:	test   eax,eax
  4095e7:	jne    409628 <flatcc_verify_table_as_nested_root@@Base+0xd8>
  4095e9:	mov    edx,DWORD PTR [r15+0xc]
  4095ed:	mov    esi,DWORD PTR [rbx+0x4]
  4095f0:	mov    eax,0x3
  4095f5:	sub    edx,0x1
  4095f8:	test   edx,edx
  4095fa:	mov    DWORD PTR [rsp+0x1c],edx
  4095fe:	jne    409660 <flatcc_verify_table_as_nested_root@@Base+0x110>
  409600:	mov    rcx,QWORD PTR [rsp+0x38]
  409605:	xor    rcx,QWORD PTR fs:0x28
  40960e:	jne    409732 <flatcc_verify_table_as_nested_root@@Base+0x1e2>
  409614:	add    rsp,0x48
  409618:	pop    rbx
  409619:	pop    rbp
  40961a:	pop    r12
  40961c:	pop    r13
  40961e:	pop    r14
  409620:	pop    r15
  409622:	ret    
  409623:	nop    DWORD PTR [rax+rax*1+0x0]
  409628:	mov    rdx,r12
  40962b:	mov    rsi,r14
  40962e:	mov    rdi,r13
  409631:	call   408fb0 <flatcc_verify_buffer_header@@Base>
  409636:	jmp    409600 <flatcc_verify_table_as_nested_root@@Base+0xb0>
  409638:	nop    DWORD PTR [rax+rax*1+0x0]
  409640:	mov    r9d,0xffffffff
  409646:	mov    r8d,0x1
  40964c:	mov    rcx,r14
  40964f:	mov    edx,ebp
  409651:	mov    esi,ebx
  409653:	mov    rdi,r15
  409656:	call   4086d0 <flatcc_verify_vector_field@@Base>
  40965b:	jmp    409600 <flatcc_verify_table_as_nested_root@@Base+0xb0>
  40965d:	nop    DWORD PTR [rax]
  409660:	test   esi,esi
  409662:	mov    eax,0xf
  409667:	je     409600 <flatcc_verify_table_as_nested_root@@Base+0xb0>
  409669:	mov    edx,esi
  40966b:	lea    rdi,[rdx+0x4]
  40966f:	cmp    r14,rdi
  409672:	jb     409600 <flatcc_verify_table_as_nested_root@@Base+0xb0>
  409674:	test   sil,0x3
  409678:	jne    409600 <flatcc_verify_table_as_nested_root@@Base+0xb0>
  40967a:	mov    DWORD PTR [rsp+0x28],esi
  40967e:	mov    eax,esi
  409680:	sub    eax,DWORD PTR [rbx+rdx*1+0x4]
  409684:	mov    edx,eax
  409686:	js     409728 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
  40968c:	test   dl,0x1
  40968f:	jne    409728 <flatcc_verify_table_as_nested_root@@Base+0x1d8>
  409695:	mov    edi,edx
  409697:	mov    eax,0x1b
  40969c:	lea    r8,[rdi+0x2]
  4096a0:	cmp    r14,r8
  4096a3:	jb     409600 <flatcc_verify_table_as_nested_root@@Base+0xb0>
  4096a9:	add    rdi,r13
  4096ac:	mov    eax,0x1e
  4096b1:	movzx  r8d,WORD PTR [rdi]
  4096b5:	mov    r9d,r8d
  4096b8:	mov    WORD PTR [rsp+0x2e],r8w
  4096be:	add    r8d,edx
  4096c1:	cmp    ebp,r8d
  4096c4:	jb     409600 <flatcc_verify_table_as_nested_root@@Base+0xb0>
  4096ca:	test   r9b,0x1
  4096ce:	jne    409600 <flatcc_verify_table_as_nested_root@@Base+0xb0>
  4096d4:	cmp    r9w,0x3
  4096d9:	mov    eax,0x1c
  4096de:	jbe    409600 <flatcc_verify_table_as_nested_root@@Base+0xb0>
  4096e4:	lea    eax,[rdx+0x2]
  4096e7:	mov    ecx,ebp
  4096e9:	sub    ecx,esi
  4096eb:	movzx  edx,WORD PTR [rbx+rax*1+0x4]
  4096f0:	mov    eax,0x14
  4096f5:	cmp    ecx,edx
  4096f7:	mov    WORD PTR [rsp+0x2c],dx
  4096fc:	jb     409600 <flatcc_verify_table_as_nested_root@@Base+0xb0>
  409702:	mov    QWORD PTR [rsp+0x20],rdi
  409707:	mov    QWORD PTR [rsp+0x10],r13
  40970c:	lea    rdi,[rsp+0x10]
  409711:	mov    DWORD PTR [rsp+0x18],ebp
  409715:	mov    rax,QWORD PTR [rsp+0x8]
  40971a:	call   rax
  40971c:	jmp    409600 <flatcc_verify_table_as_nested_root@@Base+0xb0>
  409721:	nop    DWORD PTR [rax+0x0]
  409728:	mov    eax,0x1d
  40972d:	jmp    409600 <flatcc_verify_table_as_nested_root@@Base+0xb0>
  409732:	call   403060 <__stack_chk_fail@plt>
  409737:	nop    WORD PTR [rax+rax*1+0x0]

0000000000409740 <flatcc_verify_union_field@@Base>:
  409740:	push   rbx
  409741:	mov    r10,rcx
  409744:	mov    r9,rdi
  409747:	sub    rsp,0x40
  40974b:	movzx  ecx,WORD PTR [rdi+0x1e]
  40974f:	mov    rax,QWORD PTR fs:0x28
  409758:	mov    QWORD PTR [rsp+0x38],rax
  40975d:	xor    eax,eax
  40975f:	lea    eax,[rsi+rsi*1]
  409762:	add    eax,0x2
  409765:	cmp    ax,cx
  409768:	jae    4097b0 <flatcc_verify_union_field@@Base+0x70>
  40976a:	mov    rbx,QWORD PTR [rdi+0x10]
  40976e:	movzx  eax,ax
  409771:	movzx  eax,WORD PTR [rbx+rax*1]
  409775:	test   eax,eax
  409777:	mov    r8,rax
  40977a:	je     4097b0 <flatcc_verify_union_field@@Base+0x70>
  40977c:	movzx  r11d,WORD PTR [r9+0x1c]
  409781:	lea    edi,[rax+0x1]
  409784:	mov    eax,0xd
  409789:	cmp    edi,r11d
  40978c:	jbe    4097d8 <flatcc_verify_union_field@@Base+0x98>
  40978e:	mov    rbx,QWORD PTR [rsp+0x38]
  409793:	xor    rbx,QWORD PTR fs:0x28
  40979c:	jne    409890 <flatcc_verify_union_field@@Base+0x150>
  4097a2:	add    rsp,0x40
  4097a6:	pop    rbx
  4097a7:	ret    
  4097a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4097b0:	mov    eax,0x4
  4097b5:	lea    esi,[rax+rsi*2]
  4097b8:	cmp    cx,si
  4097bb:	jbe    409810 <flatcc_verify_union_field@@Base+0xd0>
  4097bd:	mov    rax,QWORD PTR [r9+0x10]
  4097c1:	movzx  esi,si
  4097c4:	cmp    WORD PTR [rax+rsi*1],0x0
  4097c9:	je     409810 <flatcc_verify_union_field@@Base+0xd0>
  4097cb:	mov    eax,0x17
  4097d0:	jmp    40978e <flatcc_verify_union_field@@Base+0x4e>
  4097d2:	nop    WORD PTR [rax+rax*1+0x0]
  4097d8:	movzx  esi,si
  4097db:	mov    rdi,QWORD PTR [r9]
  4097de:	lea    eax,[rsi+0x2]
  4097e1:	add    eax,eax
  4097e3:	cmp    cx,ax
  4097e6:	jbe    409828 <flatcc_verify_union_field@@Base+0xe8>
  4097e8:	mov    r11d,DWORD PTR [r9+0x18]
  4097ec:	movzx  eax,ax
  4097ef:	add    r11,r8
  4097f2:	add    r11,rdi
  4097f5:	cmp    WORD PTR [rbx+rax*1],0x0
  4097fa:	movzx  ecx,BYTE PTR [r11]
  4097fe:	je     409837 <flatcc_verify_union_field@@Base+0xf7>
  409800:	test   cl,cl
  409802:	jne    409837 <flatcc_verify_union_field@@Base+0xf7>
  409804:	mov    eax,0x18
  409809:	jmp    40978e <flatcc_verify_union_field@@Base+0x4e>
  40980b:	nop    DWORD PTR [rax+rax*1+0x0]
  409810:	test   edx,edx
  409812:	mov    eax,0x15
  409817:	jne    40978e <flatcc_verify_union_field@@Base+0x4e>
  40981d:	xor    eax,eax
  40981f:	jmp    40978e <flatcc_verify_union_field@@Base+0x4e>
  409824:	nop    DWORD PTR [rax+0x0]
  409828:	mov    r11d,DWORD PTR [r9+0x18]
  40982c:	add    r8,r11
  40982f:	lea    r11,[rdi+r8*1]
  409833:	movzx  ecx,BYTE PTR [r11]
  409837:	test   cl,cl
  409839:	je     40981d <flatcc_verify_union_field@@Base+0xdd>
  40983b:	lea    rcx,[rsp+0xc]
  409840:	mov    rdi,r9
  409843:	call   4082d0 <flatcc_emitter_copy_buffer@@Base+0x100>
  409848:	test   eax,eax
  40984a:	jne    40978e <flatcc_verify_union_field@@Base+0x4e>
  409850:	mov    eax,DWORD PTR [rsp+0xc]
  409854:	test   eax,eax
  409856:	je     40981d <flatcc_verify_union_field@@Base+0xdd>
  409858:	mov    ecx,DWORD PTR [r9+0x8]
  40985c:	mov    rdx,QWORD PTR [r9]
  40985f:	lea    rdi,[rsp+0x10]
  409864:	mov    DWORD PTR [rsp+0x24],eax
  409868:	mov    DWORD PTR [rsp+0x18],ecx
  40986c:	mov    ecx,DWORD PTR [r9+0xc]
  409870:	mov    QWORD PTR [rsp+0x10],rdx
  409875:	mov    DWORD PTR [rsp+0x1c],ecx
  409879:	mov    eax,DWORD PTR [rdx+rax*1]
  40987c:	mov    DWORD PTR [rsp+0x28],eax
  409880:	movzx  eax,BYTE PTR [r11]
  409884:	mov    BYTE PTR [rsp+0x20],al
  409888:	call   r10
  40988b:	jmp    40978e <flatcc_verify_union_field@@Base+0x4e>
  409890:	call   403060 <__stack_chk_fail@plt>
  409895:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004098a0 <flatcc_verify_union_vector_field@@Base>:
  4098a0:	push   r15
  4098a2:	push   r14
  4098a4:	mov    r15d,edx
  4098a7:	push   r13
  4098a9:	push   r12
  4098ab:	lea    r12d,[rsi-0x1]
  4098af:	push   rbp
  4098b0:	push   rbx
  4098b1:	mov    r14d,esi
  4098b4:	movzx  r12d,r12w
  4098b8:	mov    rbx,rdi
  4098bb:	mov    r13,rcx
  4098be:	sub    rsp,0x48
  4098c2:	movzx  edx,WORD PTR [rdi+0x1e]
  4098c6:	lea    ebp,[r12+0x2]
  4098cb:	mov    rax,QWORD PTR fs:0x28
  4098d4:	mov    QWORD PTR [rsp+0x38],rax
  4098d9:	xor    eax,eax
  4098db:	add    ebp,ebp
  4098dd:	cmp    bp,dx
  4098e0:	jae    4099a0 <flatcc_verify_union_vector_field@@Base+0x100>
  4098e6:	mov    rcx,QWORD PTR [rdi+0x10]
  4098ea:	movzx  eax,bp
  4098ed:	cmp    WORD PTR [rcx+rax*1],0x0
  4098f2:	je     4099a0 <flatcc_verify_union_vector_field@@Base+0x100>
  4098f8:	mov    r9d,0xffffffff
  4098fe:	mov    r8d,0x1
  409904:	mov    ecx,0x1
  409909:	mov    edx,r15d
  40990c:	mov    esi,r12d
  40990f:	mov    rdi,rbx
  409912:	call   4086d0 <flatcc_verify_vector_field@@Base>
  409917:	test   eax,eax
  409919:	mov    r9d,eax
  40991c:	jne    409a70 <flatcc_verify_union_vector_field@@Base+0x1d0>
  409922:	cmp    bp,WORD PTR [rbx+0x1e]
  409926:	jae    409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  409928:	mov    rax,QWORD PTR [rbx+0x10]
  40992c:	movzx  ebp,bp
  40992f:	movzx  edx,WORD PTR [rax+rbp*1]
  409933:	test   dx,dx
  409936:	je     409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  409938:	mov    eax,DWORD PTR [rbx+0x18]
  40993b:	add    rax,rdx
  40993e:	add    rax,QWORD PTR [rbx]
  409941:	je     409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  409943:	mov    r10d,DWORD PTR [rax]
  409946:	lea    rcx,[rsp+0xc]
  40994b:	movzx  esi,r14w
  40994f:	mov    edx,r15d
  409952:	mov    rdi,rbx
  409955:	add    r10,rax
  409958:	mov    r11d,DWORD PTR [r10]
  40995b:	call   4082d0 <flatcc_emitter_copy_buffer@@Base+0x100>
  409960:	test   eax,eax
  409962:	jne    409a60 <flatcc_verify_union_vector_field@@Base+0x1c0>
  409968:	mov    eax,DWORD PTR [rsp+0xc]
  40996c:	test   eax,eax
  40996e:	jne    4099d8 <flatcc_verify_union_vector_field@@Base+0x138>
  409970:	mov    rdi,QWORD PTR [rsp+0x38]
  409975:	xor    rdi,QWORD PTR fs:0x28
  40997e:	mov    eax,r9d
  409981:	jne    409b62 <flatcc_verify_union_vector_field@@Base+0x2c2>
  409987:	add    rsp,0x48
  40998b:	pop    rbx
  40998c:	pop    rbp
  40998d:	pop    r12
  40998f:	pop    r13
  409991:	pop    r14
  409993:	pop    r15
  409995:	ret    
  409996:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4099a0:	lea    eax,[r14+r14*1]
  4099a4:	add    eax,0x4
  4099a7:	cmp    dx,ax
  4099aa:	ja     4099c0 <flatcc_verify_union_vector_field@@Base+0x120>
  4099ac:	test   r15d,r15d
  4099af:	mov    r9d,0x16
  4099b5:	jne    409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  4099b7:	jmp    4098f8 <flatcc_verify_union_vector_field@@Base+0x58>
  4099bc:	nop    DWORD PTR [rax+0x0]
  4099c0:	mov    rdx,QWORD PTR [rbx+0x10]
  4099c4:	movzx  eax,ax
  4099c7:	cmp    WORD PTR [rdx+rax*1],0x0
  4099cc:	jne    4098f8 <flatcc_verify_union_vector_field@@Base+0x58>
  4099d2:	jmp    4099ac <flatcc_verify_union_vector_field@@Base+0x10c>
  4099d4:	nop    DWORD PTR [rax+0x0]
  4099d8:	mov    edx,DWORD PTR [rbx+0xc]
  4099db:	mov    r9d,0x3
  4099e1:	test   edx,edx
  4099e3:	jle    409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  4099e5:	mov    r12,QWORD PTR [rbx]
  4099e8:	mov    ecx,eax
  4099ea:	mov    r9d,0x10
  4099f0:	mov    esi,DWORD PTR [r12+rcx*1]
  4099f4:	add    esi,eax
  4099f6:	cmp    eax,esi
  4099f8:	mov    ecx,esi
  4099fa:	jae    409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  409a00:	mov    eax,DWORD PTR [rbx+0x8]
  409a03:	mov    esi,esi
  409a05:	lea    r8,[rsi+0x4]
  409a09:	cmp    r8,rax
  409a0c:	mov    rdi,rax
  409a0f:	ja     409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  409a15:	test   r8b,0x3
  409a19:	je     409a97 <flatcc_verify_union_vector_field@@Base+0x1f7>
  409a1b:	and    r8d,0x3
  409a1f:	mov    r9d,0x10
  409a25:	jne    409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  409a2b:	mov    eax,DWORD PTR [r12+rsi*1]
  409a2f:	mov    r9d,0x19
  409a35:	cmp    eax,0x3fffffff
  409a3a:	ja     409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  409a40:	sub    edi,0x4
  409a43:	shl    eax,0x2
  409a46:	mov    r9d,0x1a
  409a4c:	sub    edi,ecx
  409a4e:	cmp    edi,eax
  409a50:	jb     409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  409a56:	xor    r9d,r9d
  409a59:	jmp    409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  409a5e:	xchg   ax,ax
  409a60:	mov    r9d,eax
  409a63:	jmp    409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  409a68:	nop    DWORD PTR [rax+rax*1+0x0]
  409a70:	mov    r9d,0xffffffff
  409a76:	mov    r8d,0x1
  409a7c:	mov    ecx,0x1
  409a81:	mov    edx,r15d
  409a84:	mov    esi,r12d
  409a87:	mov    rdi,rbx
  409a8a:	call   4086d0 <flatcc_verify_vector_field@@Base>
  409a8f:	mov    r9d,eax
  409a92:	jmp    409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  409a97:	mov    eax,DWORD PTR [r12+rsi*1]
  409a9b:	cmp    eax,0x3fffffff
  409aa0:	ja     409a1b <flatcc_verify_union_vector_field@@Base+0x17b>
  409aa6:	lea    ebx,[rcx+0x4]
  409aa9:	lea    r14d,[rax*4+0x0]
  409ab1:	mov    r9d,edi
  409ab4:	sub    r9d,ebx
  409ab7:	cmp    r9d,r14d
  409aba:	jb     409a1b <flatcc_verify_union_vector_field@@Base+0x17b>
  409ac0:	cmp    r11d,eax
  409ac3:	mov    r9d,0x22
  409ac9:	jne    409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  409acf:	sub    edx,0x1
  409ad2:	test   r11d,r11d
  409ad5:	mov    QWORD PTR [rsp+0x10],r12
  409ada:	mov    DWORD PTR [rsp+0x18],edi
  409ade:	mov    DWORD PTR [rsp+0x1c],edx
  409ae2:	je     409a56 <flatcc_verify_union_vector_field@@Base+0x1b6>
  409ae8:	lea    rbp,[r10+0x4]
  409aec:	add    r14d,ebx
  409aef:	lea    r15,[rsp+0x10]
  409af4:	jmp    409b16 <flatcc_verify_union_vector_field@@Base+0x276>
  409af6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409b00:	cmp    BYTE PTR [rbp+0x0],0x0
  409b04:	jne    409b4c <flatcc_verify_union_vector_field@@Base+0x2ac>
  409b06:	add    ebx,0x4
  409b09:	add    rbp,0x1
  409b0d:	cmp    ebx,r14d
  409b10:	je     409a56 <flatcc_verify_union_vector_field@@Base+0x1b6>
  409b16:	mov    eax,ebx
  409b18:	mov    eax,DWORD PTR [r12+rax*1]
  409b1c:	test   eax,eax
  409b1e:	je     409b00 <flatcc_verify_union_vector_field@@Base+0x260>
  409b20:	movzx  edx,BYTE PTR [rbp+0x0]
  409b24:	test   dl,dl
  409b26:	je     409b57 <flatcc_verify_union_vector_field@@Base+0x2b7>
  409b28:	mov    BYTE PTR [rsp+0x20],dl
  409b2c:	mov    DWORD PTR [rsp+0x24],ebx
  409b30:	mov    rdi,r15
  409b33:	mov    DWORD PTR [rsp+0x28],eax
  409b37:	call   r13
  409b3a:	test   eax,eax
  409b3c:	je     409b06 <flatcc_verify_union_vector_field@@Base+0x266>
  409b3e:	mov    rdi,r15
  409b41:	call   r13
  409b44:	mov    r9d,eax
  409b47:	jmp    409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  409b4c:	mov    r9d,0x20
  409b52:	jmp    409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  409b57:	mov    r9d,0x21
  409b5d:	jmp    409970 <flatcc_verify_union_vector_field@@Base+0xd0>
  409b62:	call   403060 <__stack_chk_fail@plt>
  409b67:	nop    WORD PTR [rax+rax*1+0x0]

0000000000409b70 <__libc_csu_init@@Base>:
  409b70:	endbr64 
  409b74:	push   r15
  409b76:	lea    r15,[rip+0x528b]        # 40ee08 <flatcc_builder_padding_base@@Base+0x41c8>
  409b7d:	push   r14
  409b7f:	mov    r14,rdx
  409b82:	push   r13
  409b84:	mov    r13,rsi
  409b87:	push   r12
  409b89:	mov    r12d,edi
  409b8c:	push   rbp
  409b8d:	lea    rbp,[rip+0x527c]        # 40ee10 <flatcc_builder_padding_base@@Base+0x41d0>
  409b94:	push   rbx
  409b95:	sub    rbp,r15
  409b98:	sub    rsp,0x8
  409b9c:	call   403000 <free@plt-0x30>
  409ba1:	sar    rbp,0x3
  409ba5:	je     409bc6 <__libc_csu_init@@Base+0x56>
  409ba7:	xor    ebx,ebx
  409ba9:	nop    DWORD PTR [rax+0x0]
  409bb0:	mov    rdx,r14
  409bb3:	mov    rsi,r13
  409bb6:	mov    edi,r12d
  409bb9:	call   QWORD PTR [r15+rbx*8]
  409bbd:	add    rbx,0x1
  409bc1:	cmp    rbp,rbx
  409bc4:	jne    409bb0 <__libc_csu_init@@Base+0x40>
  409bc6:	add    rsp,0x8
  409bca:	pop    rbx
  409bcb:	pop    rbp
  409bcc:	pop    r12
  409bce:	pop    r13
  409bd0:	pop    r14
  409bd2:	pop    r15
  409bd4:	ret    
  409bd5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000409be0 <__libc_csu_fini@@Base>:
  409be0:	endbr64 
  409be4:	ret    

Disassembly of section .fini:

0000000000409be8 <.fini>:
  409be8:	endbr64 
  409bec:	sub    rsp,0x8
  409bf0:	add    rsp,0x8
  409bf4:	ret    
