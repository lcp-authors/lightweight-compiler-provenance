
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0x9fe9]        # 40cff8 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x12a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <.plt>:
  403020:	push   QWORD PTR [rip+0x9fe2]        # 40d008 <flatcc_builder_padding_base@@Base+0x3048>
  403026:	bnd jmp QWORD PTR [rip+0x9fe3]        # 40d010 <flatcc_builder_padding_base@@Base+0x3050>
  40302d:	nop    DWORD PTR [rax]
  403030:	endbr64 
  403034:	push   0x0
  403039:	bnd jmp 403020 <free@plt-0x120>
  40303f:	nop
  403040:	endbr64 
  403044:	push   0x1
  403049:	bnd jmp 403020 <free@plt-0x120>
  40304f:	nop
  403050:	endbr64 
  403054:	push   0x2
  403059:	bnd jmp 403020 <free@plt-0x120>
  40305f:	nop
  403060:	endbr64 
  403064:	push   0x3
  403069:	bnd jmp 403020 <free@plt-0x120>
  40306f:	nop
  403070:	endbr64 
  403074:	push   0x4
  403079:	bnd jmp 403020 <free@plt-0x120>
  40307f:	nop
  403080:	endbr64 
  403084:	push   0x5
  403089:	bnd jmp 403020 <free@plt-0x120>
  40308f:	nop
  403090:	endbr64 
  403094:	push   0x6
  403099:	bnd jmp 403020 <free@plt-0x120>
  40309f:	nop
  4030a0:	endbr64 
  4030a4:	push   0x7
  4030a9:	bnd jmp 403020 <free@plt-0x120>
  4030af:	nop
  4030b0:	endbr64 
  4030b4:	push   0x8
  4030b9:	bnd jmp 403020 <free@plt-0x120>
  4030bf:	nop
  4030c0:	endbr64 
  4030c4:	push   0x9
  4030c9:	bnd jmp 403020 <free@plt-0x120>
  4030cf:	nop
  4030d0:	endbr64 
  4030d4:	push   0xa
  4030d9:	bnd jmp 403020 <free@plt-0x120>
  4030df:	nop
  4030e0:	endbr64 
  4030e4:	push   0xb
  4030e9:	bnd jmp 403020 <free@plt-0x120>
  4030ef:	nop
  4030f0:	endbr64 
  4030f4:	push   0xc
  4030f9:	bnd jmp 403020 <free@plt-0x120>
  4030ff:	nop
  403100:	endbr64 
  403104:	push   0xd
  403109:	bnd jmp 403020 <free@plt-0x120>
  40310f:	nop
  403110:	endbr64 
  403114:	push   0xe
  403119:	bnd jmp 403020 <free@plt-0x120>
  40311f:	nop
  403120:	endbr64 
  403124:	push   0xf
  403129:	bnd jmp 403020 <free@plt-0x120>
  40312f:	nop
  403130:	endbr64 
  403134:	push   0x10
  403139:	bnd jmp 403020 <free@plt-0x120>
  40313f:	nop

Disassembly of section .plt.sec:

0000000000403140 <free@plt>:
  403140:	endbr64 
  403144:	bnd jmp QWORD PTR [rip+0x9ecd]        # 40d018 <free@GLIBC_2.2.5>
  40314b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403150 <fclose@plt>:
  403150:	endbr64 
  403154:	bnd jmp QWORD PTR [rip+0x9ec5]        # 40d020 <fclose@GLIBC_2.2.5>
  40315b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403160 <strlen@plt>:
  403160:	endbr64 
  403164:	bnd jmp QWORD PTR [rip+0x9ebd]        # 40d028 <strlen@GLIBC_2.2.5>
  40316b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403170 <__stack_chk_fail@plt>:
  403170:	endbr64 
  403174:	bnd jmp QWORD PTR [rip+0x9eb5]        # 40d030 <__stack_chk_fail@GLIBC_2.4>
  40317b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403180 <gettimeofday@plt>:
  403180:	endbr64 
  403184:	bnd jmp QWORD PTR [rip+0x9ead]        # 40d038 <gettimeofday@GLIBC_2.2.5>
  40318b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403190 <__assert_fail@plt>:
  403190:	endbr64 
  403194:	bnd jmp QWORD PTR [rip+0x9ea5]        # 40d040 <__assert_fail@GLIBC_2.2.5>
  40319b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031a0 <memset@plt>:
  4031a0:	endbr64 
  4031a4:	bnd jmp QWORD PTR [rip+0x9e9d]        # 40d048 <memset@GLIBC_2.2.5>
  4031ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031b0 <memchr@plt>:
  4031b0:	endbr64 
  4031b4:	bnd jmp QWORD PTR [rip+0x9e95]        # 40d050 <memchr@GLIBC_2.2.5>
  4031bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031c0 <memcmp@plt>:
  4031c0:	endbr64 
  4031c4:	bnd jmp QWORD PTR [rip+0x9e8d]        # 40d058 <memcmp@GLIBC_2.2.5>
  4031cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031d0 <strcmp@plt>:
  4031d0:	endbr64 
  4031d4:	bnd jmp QWORD PTR [rip+0x9e85]        # 40d060 <strcmp@GLIBC_2.2.5>
  4031db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031e0 <memcpy@plt>:
  4031e0:	endbr64 
  4031e4:	bnd jmp QWORD PTR [rip+0x9e7d]        # 40d068 <memcpy@GLIBC_2.14>
  4031eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031f0 <malloc@plt>:
  4031f0:	endbr64 
  4031f4:	bnd jmp QWORD PTR [rip+0x9e75]        # 40d070 <malloc@GLIBC_2.2.5>
  4031fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403200 <realloc@plt>:
  403200:	endbr64 
  403204:	bnd jmp QWORD PTR [rip+0x9e6d]        # 40d078 <realloc@GLIBC_2.2.5>
  40320b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403210 <__printf_chk@plt>:
  403210:	endbr64 
  403214:	bnd jmp QWORD PTR [rip+0x9e65]        # 40d080 <__printf_chk@GLIBC_2.3.4>
  40321b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403220 <fopen@plt>:
  403220:	endbr64 
  403224:	bnd jmp QWORD PTR [rip+0x9e5d]        # 40d088 <fopen@GLIBC_2.2.5>
  40322b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403230 <fwrite@plt>:
  403230:	endbr64 
  403234:	bnd jmp QWORD PTR [rip+0x9e55]        # 40d090 <fwrite@GLIBC_2.2.5>
  40323b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403240 <posix_memalign@plt>:
  403240:	endbr64 
  403244:	bnd jmp QWORD PTR [rip+0x9e4d]        # 40d098 <posix_memalign@GLIBC_2.2.5>
  40324b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

0000000000403250 <main@@Base>:
  403250:	endbr64 
  403254:	push   r15
  403256:	push   r14
  403258:	push   r13
  40325a:	push   r12
  40325c:	push   rbp
  40325d:	push   rbx
  40325e:	sub    rsp,0x1c8
  403265:	lea    r13,[rsp+0x30]
  40326a:	mov    rdi,r13
  40326d:	mov    rax,QWORD PTR fs:0x28
  403276:	mov    QWORD PTR [rsp+0x1b8],rax
  40327e:	xor    eax,eax
  403280:	call   4043b0 <flatcc_builder_init@@Base>
  403285:	mov    rdi,r13
  403288:	call   4039e0 <_start@@Base+0x180>
  40328d:	lea    rsi,[rsp+0x28]
  403292:	mov    rdi,r13
  403295:	call   4079d0 <flatcc_builder_finalize_buffer@@Base>
  40329a:	lea    rsi,[rip+0x5d82]        # 409023 <_IO_stdin_used@@Base+0x23>
  4032a1:	lea    rdi,[rip+0x5d7e]        # 409026 <_IO_stdin_used@@Base+0x26>
  4032a8:	mov    rbx,rax
  4032ab:	call   403220 <fopen@plt>
  4032b0:	test   rax,rax
  4032b3:	je     403386 <main@@Base+0x136>
  4032b9:	mov    rdx,QWORD PTR [rsp+0x28]
  4032be:	mov    rdi,rbx
  4032c1:	mov    rcx,rax
  4032c4:	mov    esi,0x1
  4032c9:	mov    rbp,rax
  4032cc:	call   403230 <fwrite@plt>
  4032d1:	mov    r12,QWORD PTR [rsp+0x28]
  4032d6:	mov    r14,rax
  4032d9:	mov    rdi,rbp
  4032dc:	call   403150 <fclose@plt>
  4032e1:	cmp    r14,r12
  4032e4:	je     403301 <main@@Base+0xb1>
  4032e6:	mov    rdi,r13
  4032e9:	call   404570 <flatcc_builder_clear@@Base>
  4032ee:	mov    rdi,rbx
  4032f1:	call   403140 <free@plt>
  4032f6:	mov    r15d,0x1
  4032fc:	jmp    40339a <main@@Base+0x14a>
  403301:	mov    rdx,QWORD PTR [rsp+0x28]
  403306:	lea    rsi,[rip+0x5d2f]        # 40903c <_IO_stdin_used@@Base+0x3c>
  40330d:	mov    edi,0x1
  403312:	xor    eax,eax
  403314:	call   403210 <__printf_chk@plt>
  403319:	lea    rsi,[rip+0x5d2e]        # 40904e <_IO_stdin_used@@Base+0x4e>
  403320:	mov    edi,0x1
  403325:	xor    eax,eax
  403327:	call   403210 <__printf_chk@plt>
  40332c:	call   403950 <_start@@Base+0xf0>
  403331:	mov    DWORD PTR [rsp+0x14],0xa
  403339:	vmovsd QWORD PTR [rsp+0x18],xmm0
  40333f:	lea    rbp,[rip+0x9dba]        # 40d100 <__bss_start@@Base+0x50>
  403346:	mov    rdi,r13
  403349:	call   4039e0 <_start@@Base+0x180>
  40334e:	mov    rdx,QWORD PTR [rsp+0x28]
  403353:	mov    rsi,rbx
  403356:	mov    rdi,r13
  403359:	call   407970 <flatcc_builder_copy_buffer@@Base>
  40335e:	cmp    DWORD PTR [rbx+0x4],0x534e4f4d
  403365:	je     4033d9 <main@@Base+0x189>
  403367:	lea    rcx,[rip+0x60d2]        # 409440 <_IO_stdin_used@@Base+0x440>
  40336e:	mov    edx,0x2bb
  403373:	lea    rsi,[rip+0x5f66]        # 4092e0 <_IO_stdin_used@@Base+0x2e0>
  40337a:	lea    rdi,[rip+0x5fdf]        # 409360 <_IO_stdin_used@@Base+0x360>
  403381:	call   403190 <__assert_fail@plt>
  403386:	mov    rdi,r13
  403389:	call   404570 <flatcc_builder_clear@@Base>
  40338e:	mov    rdi,rbx
  403391:	call   403140 <free@plt>
  403396:	or     r15d,0xffffffff
  40339a:	lea    rsi,[rip+0x5d96]        # 409137 <_IO_stdin_used@@Base+0x137>
  4033a1:	mov    edi,0x1
  4033a6:	xor    eax,eax
  4033a8:	call   403210 <__printf_chk@plt>
  4033ad:	mov    rbx,QWORD PTR [rsp+0x1b8]
  4033b5:	xor    rbx,QWORD PTR fs:0x28
  4033be:	mov    eax,r15d
  4033c1:	jne    40377e <main@@Base+0x52e>
  4033c7:	add    rsp,0x1c8
  4033ce:	pop    rbx
  4033cf:	pop    rbp
  4033d0:	pop    r12
  4033d2:	pop    r13
  4033d4:	pop    r14
  4033d6:	pop    r15
  4033d8:	ret    
  4033d9:	mov    r12d,DWORD PTR [rbx]
  4033dc:	add    r12,rbx
  4033df:	je     403367 <main@@Base+0x117>
  4033e1:	movsxd rax,DWORD PTR [r12]
  4033e5:	mov    r14,r12
  4033e8:	sub    r14,rax
  4033eb:	movzx  r15d,WORD PTR [r14]
  4033ef:	cmp    r15w,0xb
  4033f4:	jbe    4037c1 <main@@Base+0x571>
  4033fa:	movzx  eax,WORD PTR [r14+0xa]
  4033ff:	test   ax,ax
  403402:	je     4037c1 <main@@Base+0x571>
  403408:	add    rax,r12
  40340b:	mov    ecx,DWORD PTR [rax]
  40340d:	lea    rsi,[rip+0x5bf5]        # 409009 <_IO_stdin_used@@Base+0x9>
  403414:	lea    rdi,[rax+rcx*1+0x4]
  403419:	call   4031d0 <strcmp@plt>
  40341e:	test   eax,eax
  403420:	jne    4037a2 <main@@Base+0x552>
  403426:	cmp    r15w,0x1b
  40342b:	jbe    403783 <main@@Base+0x533>
  403431:	movzx  eax,WORD PTR [r14+0x1a]
  403436:	test   ax,ax
  403439:	je     403783 <main@@Base+0x533>
  40343f:	add    r12,rax
  403442:	mov    eax,DWORD PTR [r12]
  403446:	lea    r14,[r12+rax*1+0x4]
  40344b:	test   r14,r14
  40344e:	je     403783 <main@@Base+0x533>
  403454:	cmp    DWORD PTR [r14-0x4],0x3e8
  40345c:	jne    403783 <main@@Base+0x533>
  403462:	mov    rax,r14
  403465:	add    rax,0xfa0
  40346b:	mov    QWORD PTR [rsp],r14
  40346f:	mov    QWORD PTR [rsp+0x8],rax
  403474:	mov    rax,QWORD PTR [rsp]
  403478:	mov    edx,DWORD PTR [rax]
  40347a:	add    rdx,rax
  40347d:	je     403367 <main@@Base+0x117>
  403483:	movsxd rax,DWORD PTR [rdx]
  403486:	mov    rsi,rdx
  403489:	sub    rsi,rax
  40348c:	movzx  edi,WORD PTR [rsi]
  40348f:	cmp    di,0xb
  403493:	jbe    4037c1 <main@@Base+0x571>
  403499:	movzx  eax,WORD PTR [rsi+0xa]
  40349d:	test   ax,ax
  4034a0:	je     4037c1 <main@@Base+0x571>
  4034a6:	add    rax,rdx
  4034a9:	mov    ecx,DWORD PTR [rax]
  4034ab:	lea    rcx,[rax+rcx*1+0x4]
  4034b0:	cmp    di,0xf
  4034b4:	jbe    40373a <main@@Base+0x4ea>
  4034ba:	movzx  esi,WORD PTR [rsi+0xe]
  4034be:	xor    eax,eax
  4034c0:	test   si,si
  4034c3:	je     4034cf <main@@Base+0x27f>
  4034c5:	add    rdx,rsi
  4034c8:	mov    eax,DWORD PTR [rdx]
  4034ca:	lea    rax,[rdx+rax*1+0x4]
  4034cf:	test   rcx,rcx
  4034d2:	je     40371b <main@@Base+0x4cb>
  4034d8:	cmp    DWORD PTR [rcx-0x4],0x2bc
  4034df:	jne    40371b <main@@Base+0x4cb>
  4034e5:	test   rax,rax
  4034e8:	je     403741 <main@@Base+0x4f1>
  4034ee:	cmp    DWORD PTR [rax-0x4],0x186a0
  4034f5:	jne    403741 <main@@Base+0x4f1>
  4034fb:	xor    edx,edx
  4034fd:	nop    DWORD PTR [rax]
  403500:	lea    r12,[rcx+rdx*8]
  403504:	sub    r12,rdx
  403507:	cmp    DWORD PTR [r12],0x736e6f4d
  40350f:	je     403560 <main@@Base+0x310>
  403511:	lea    rsi,[rip+0x5e98]        # 4093b0 <_IO_stdin_used@@Base+0x3b0>
  403518:	mov    edi,0x1
  40351d:	xor    eax,eax
  40351f:	call   403210 <__printf_chk@plt>
  403524:	mov    rdx,r12
  403527:	sub    rdx,rbx
  40352a:	lea    rsi,[rip+0x5b38]        # 409069 <_IO_stdin_used@@Base+0x69>
  403531:	mov    edi,0x1
  403536:	xor    eax,eax
  403538:	call   403210 <__printf_chk@plt>
  40353d:	lea    rcx,[rip+0x5eec]        # 409430 <_IO_stdin_used@@Base+0x430>
  403544:	mov    edx,0x55
  403549:	lea    rsi,[rip+0x5d28]        # 409278 <_IO_stdin_used@@Base+0x278>
  403550:	lea    rdi,[rip+0x6310]        # 409867 <_IO_stdin_used@@Base+0x867>
  403557:	call   403190 <__assert_fail@plt>
  40355c:	nop    DWORD PTR [rax+0x0]
  403560:	cmp    WORD PTR [r12+0x4],0x6574
  403568:	jne    403511 <main@@Base+0x2c1>
  40356a:	cmp    BYTE PTR [r12+0x6],0x72
  403570:	jne    403511 <main@@Base+0x2c1>
  403572:	inc    rdx
  403575:	cmp    rdx,0x64
  403579:	jne    403500 <main@@Base+0x2b0>
  40357b:	mov    r14,rax
  40357e:	lea    r12,[rax+0x186a0]
  403585:	nop    DWORD PTR [rax]
  403588:	mov    edx,0x3e8
  40358d:	mov    rsi,rbp
  403590:	mov    rdi,r14
  403593:	call   4031c0 <memcmp@plt>
  403598:	mov    r15d,eax
  40359b:	test   eax,eax
  40359d:	jne    4037e0 <main@@Base+0x590>
  4035a3:	add    r14,0x3e8
  4035aa:	cmp    r14,r12
  4035ad:	jne    403588 <main@@Base+0x338>
  4035af:	add    QWORD PTR [rsp],0x4
  4035b4:	mov    rax,QWORD PTR [rsp]
  4035b8:	cmp    QWORD PTR [rsp+0x8],rax
  4035bd:	jne    403474 <main@@Base+0x224>
  4035c3:	dec    DWORD PTR [rsp+0x14]
  4035c7:	jne    403346 <main@@Base+0xf6>
  4035cd:	call   403950 <_start@@Base+0xf0>
  4035d2:	vsubsd xmm4,xmm0,QWORD PTR [rsp+0x18]
  4035d8:	lea    rdx,[rip+0x5df1]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4035df:	lea    rsi,[rip+0x5a90]        # 409076 <_IO_stdin_used@@Base+0x76>
  4035e6:	mov    edi,0x1
  4035eb:	xor    eax,eax
  4035ed:	mov    rbp,QWORD PTR [rsp+0x28]
  4035f2:	vmovsd QWORD PTR [rsp],xmm4
  4035f7:	call   403210 <__printf_chk@plt>
  4035fc:	vmovsd xmm0,QWORD PTR [rsp]
  403601:	lea    rsi,[rip+0x5a7d]        # 409085 <_IO_stdin_used@@Base+0x85>
  403608:	mov    edi,0x1
  40360d:	mov    eax,0x1
  403612:	call   403210 <__printf_chk@plt>
  403617:	mov    edx,0xa
  40361c:	lea    rsi,[rip+0x5a7a]        # 40909d <_IO_stdin_used@@Base+0x9d>
  403623:	mov    edi,0x1
  403628:	xor    eax,eax
  40362a:	call   403210 <__printf_chk@plt>
  40362f:	xor    eax,eax
  403631:	mov    rdx,rbp
  403634:	lea    rsi,[rip+0x5a72]        # 4090ad <_IO_stdin_used@@Base+0xad>
  40363b:	mov    edi,0x1
  403640:	call   403210 <__printf_chk@plt>
  403645:	test   rbp,rbp
  403648:	js     403760 <main@@Base+0x510>
  40364e:	vxorpd xmm0,xmm0,xmm0
  403652:	vcvtsi2sd xmm0,xmm0,rbp
  403657:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x5e59]        # 4094b8 <_IO_stdin_used@@Base+0x4b8>
  40365f:	lea    rsi,[rip+0x5a5a]        # 4090c0 <_IO_stdin_used@@Base+0xc0>
  403666:	mov    edi,0x1
  40366b:	mov    eax,0x1
  403670:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5e38]        # 4094b0 <_IO_stdin_used@@Base+0x4b0>
  403678:	vdivsd xmm0,xmm0,QWORD PTR [rsp]
  40367d:	call   403210 <__printf_chk@plt>
  403682:	vmovsd xmm6,QWORD PTR [rip+0x5e2e]        # 4094b8 <_IO_stdin_used@@Base+0x4b8>
  40368a:	lea    rsi,[rip+0x5d6f]        # 409400 <_IO_stdin_used@@Base+0x400>
  403691:	mov    edi,0x1
  403696:	mov    eax,0x1
  40369b:	vdivsd xmm0,xmm6,QWORD PTR [rsp]
  4036a0:	call   403210 <__printf_chk@plt>
  4036a5:	vmovsd xmm1,QWORD PTR [rip+0x5e13]        # 4094c0 <_IO_stdin_used@@Base+0x4c0>
  4036ad:	vmovsd xmm2,QWORD PTR [rip+0x5e13]        # 4094c8 <_IO_stdin_used@@Base+0x4c8>
  4036b5:	vmulsd xmm0,xmm1,QWORD PTR [rsp]
  4036ba:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5df6]        # 4094b8 <_IO_stdin_used@@Base+0x4b8>
  4036c2:	vcomisd xmm2,xmm0
  4036c6:	ja     40383d <main@@Base+0x5ed>
  4036cc:	vmovsd xmm7,QWORD PTR [rip+0x5ddc]        # 4094b0 <_IO_stdin_used@@Base+0x4b0>
  4036d4:	vcomisd xmm7,xmm0
  4036d8:	ja     40381e <main@@Base+0x5ce>
  4036de:	vcomisd xmm1,xmm0
  4036e2:	jbe    4037ff <main@@Base+0x5af>
  4036e8:	lea    rsi,[rip+0x5a19]        # 409108 <_IO_stdin_used@@Base+0x108>
  4036ef:	mov    edi,0x1
  4036f4:	mov    eax,0x1
  4036f9:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5daf]        # 4094b0 <_IO_stdin_used@@Base+0x4b0>
  403701:	call   403210 <__printf_chk@plt>
  403706:	mov    rdi,r13
  403709:	call   404570 <flatcc_builder_clear@@Base>
  40370e:	mov    rdi,rbx
  403711:	call   403140 <free@plt>
  403716:	jmp    4033ad <main@@Base+0x15d>
  40371b:	lea    rcx,[rip+0x5d0e]        # 409430 <_IO_stdin_used@@Base+0x430>
  403722:	mov    edx,0x4a
  403727:	lea    rsi,[rip+0x5b4a]        # 409278 <_IO_stdin_used@@Base+0x278>
  40372e:	lea    rdi,[rip+0x6132]        # 409867 <_IO_stdin_used@@Base+0x867>
  403735:	call   403190 <__assert_fail@plt>
  40373a:	xor    eax,eax
  40373c:	jmp    4034cf <main@@Base+0x27f>
  403741:	lea    rcx,[rip+0x5ce8]        # 409430 <_IO_stdin_used@@Base+0x430>
  403748:	mov    edx,0x4e
  40374d:	lea    rsi,[rip+0x5b24]        # 409278 <_IO_stdin_used@@Base+0x278>
  403754:	lea    rdi,[rip+0x610c]        # 409867 <_IO_stdin_used@@Base+0x867>
  40375b:	call   403190 <__assert_fail@plt>
  403760:	mov    rax,rbp
  403763:	shr    rax,1
  403766:	and    ebp,0x1
  403769:	or     rax,rbp
  40376c:	vxorpd xmm0,xmm0,xmm0
  403770:	vcvtsi2sd xmm0,xmm0,rax
  403775:	vaddsd xmm0,xmm0,xmm0
  403779:	jmp    403657 <main@@Base+0x407>
  40377e:	call   403170 <__stack_chk_fail@plt>
  403783:	lea    rcx,[rip+0x5d1a]        # 4094a4 <_IO_stdin_used@@Base+0x4a4>
  40378a:	mov    edx,0x8f
  40378f:	lea    rsi,[rip+0x5ae2]        # 409278 <_IO_stdin_used@@Base+0x278>
  403796:	lea    rdi,[rip+0x58c3]        # 409060 <_IO_stdin_used@@Base+0x60>
  40379d:	call   403190 <__assert_fail@plt>
  4037a2:	lea    rcx,[rip+0x5cfb]        # 4094a4 <_IO_stdin_used@@Base+0x4a4>
  4037a9:	mov    edx,0x8b
  4037ae:	lea    rsi,[rip+0x5ac3]        # 409278 <_IO_stdin_used@@Base+0x278>
  4037b5:	lea    rdi,[rip+0x58a4]        # 409060 <_IO_stdin_used@@Base+0x60>
  4037bc:	call   403190 <__assert_fail@plt>
  4037c1:	lea    rcx,[rip+0x5c78]        # 409440 <_IO_stdin_used@@Base+0x440>
  4037c8:	mov    edx,0x2bb
  4037cd:	lea    rsi,[rip+0x5b0c]        # 4092e0 <_IO_stdin_used@@Base+0x2e0>
  4037d4:	lea    rdi,[rip+0x5bad]        # 409388 <_IO_stdin_used@@Base+0x388>
  4037db:	call   403190 <__assert_fail@plt>
  4037e0:	lea    rcx,[rip+0x5c49]        # 409430 <_IO_stdin_used@@Base+0x430>
  4037e7:	mov    edx,0x5b
  4037ec:	lea    rsi,[rip+0x5a85]        # 409278 <_IO_stdin_used@@Base+0x278>
  4037f3:	lea    rdi,[rip+0x606d]        # 409867 <_IO_stdin_used@@Base+0x867>
  4037fa:	call   403190 <__assert_fail@plt>
  4037ff:	vdivsd xmm0,xmm0,xmm1
  403803:	lea    rsi,[rip+0x5916]        # 409120 <_IO_stdin_used@@Base+0x120>
  40380a:	mov    edi,0x1
  40380f:	mov    eax,0x1
  403814:	call   403210 <__printf_chk@plt>
  403819:	jmp    403706 <main@@Base+0x4b6>
  40381e:	vdivsd xmm0,xmm0,xmm2
  403822:	lea    rsi,[rip+0x58c7]        # 4090f0 <_IO_stdin_used@@Base+0xf0>
  403829:	mov    edi,0x1
  40382e:	mov    eax,0x1
  403833:	call   403210 <__printf_chk@plt>
  403838:	jmp    403706 <main@@Base+0x4b6>
  40383d:	lea    rsi,[rip+0x5894]        # 4090d8 <_IO_stdin_used@@Base+0xd8>
  403844:	mov    edi,0x1
  403849:	mov    eax,0x1
  40384e:	call   403210 <__printf_chk@plt>
  403853:	jmp    403706 <main@@Base+0x4b6>
  403858:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403860 <_start@@Base>:
  403860:	endbr64 
  403864:	xor    ebp,ebp
  403866:	mov    r9,rdx
  403869:	pop    rsi
  40386a:	mov    rdx,rsp
  40386d:	and    rsp,0xfffffffffffffff0
  403871:	push   rax
  403872:	push   rsp
  403873:	mov    r8,0x408330
  40387a:	mov    rcx,0x4082c0
  403881:	mov    rdi,0x403250
  403888:	call   QWORD PTR [rip+0x9762]        # 40cff0 <__libc_start_main@GLIBC_2.2.5>
  40388e:	hlt    
  40388f:	nop
  403890:	endbr64 
  403894:	ret    
  403895:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40389f:	nop
  4038a0:	mov    eax,0x40d0b0
  4038a5:	cmp    rax,0x40d0b0
  4038ab:	je     4038c0 <_start@@Base+0x60>
  4038ad:	mov    eax,0x0
  4038b2:	test   rax,rax
  4038b5:	je     4038c0 <_start@@Base+0x60>
  4038b7:	mov    edi,0x40d0b0
  4038bc:	jmp    rax
  4038be:	xchg   ax,ax
  4038c0:	ret    
  4038c1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4038cc:	nop    DWORD PTR [rax+0x0]
  4038d0:	mov    esi,0x40d0b0
  4038d5:	sub    rsi,0x40d0b0
  4038dc:	sar    rsi,0x3
  4038e0:	mov    rax,rsi
  4038e3:	shr    rax,0x3f
  4038e7:	add    rsi,rax
  4038ea:	sar    rsi,1
  4038ed:	je     403900 <_start@@Base+0xa0>
  4038ef:	mov    eax,0x0
  4038f4:	test   rax,rax
  4038f7:	je     403900 <_start@@Base+0xa0>
  4038f9:	mov    edi,0x40d0b0
  4038fe:	jmp    rax
  403900:	ret    
  403901:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40390c:	nop    DWORD PTR [rax+0x0]
  403910:	endbr64 
  403914:	cmp    BYTE PTR [rip+0x97a5],0x0        # 40d0c0 <__bss_start@@Base+0x10>
  40391b:	jne    403930 <_start@@Base+0xd0>
  40391d:	push   rbp
  40391e:	mov    rbp,rsp
  403921:	call   4038a0 <_start@@Base+0x40>
  403926:	mov    BYTE PTR [rip+0x9793],0x1        # 40d0c0 <__bss_start@@Base+0x10>
  40392d:	pop    rbp
  40392e:	ret    
  40392f:	nop
  403930:	ret    
  403931:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40393c:	nop    DWORD PTR [rax+0x0]
  403940:	endbr64 
  403944:	jmp    4038d0 <_start@@Base+0x70>
  403946:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403950:	sub    rsp,0x28
  403954:	xor    esi,esi
  403956:	mov    rdi,rsp
  403959:	mov    rax,QWORD PTR fs:0x28
  403962:	mov    QWORD PTR [rsp+0x18],rax
  403967:	xor    eax,eax
  403969:	call   403180 <gettimeofday@plt>
  40396e:	cmp    QWORD PTR [rip+0x976a],0x0        # 40d0e0 <__bss_start@@Base+0x30>
  403976:	jne    403985 <_start@@Base+0x125>
  403978:	vmovdqa xmm2,XMMWORD PTR [rsp]
  40397d:	vmovaps XMMWORD PTR [rip+0x975b],xmm2        # 40d0e0 <__bss_start@@Base+0x30>
  403985:	mov    rax,QWORD PTR [rsp+0x8]
  40398a:	vxorpd xmm0,xmm0,xmm0
  40398e:	sub    rax,QWORD PTR [rip+0x9753]        # 40d0e8 <__bss_start@@Base+0x38>
  403995:	vcvtsi2sd xmm0,xmm0,rax
  40399a:	mov    rax,QWORD PTR [rsp]
  40399e:	vxorpd xmm1,xmm1,xmm1
  4039a2:	sub    rax,QWORD PTR [rip+0x9737]        # 40d0e0 <__bss_start@@Base+0x30>
  4039a9:	vcvtsi2sd xmm1,xmm1,rax
  4039ae:	mov    rax,QWORD PTR [rsp+0x18]
  4039b3:	xor    rax,QWORD PTR fs:0x28
  4039bc:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5aec]        # 4094b0 <_IO_stdin_used@@Base+0x4b0>
  4039c4:	vaddsd xmm0,xmm0,xmm1
  4039c8:	jne    4039cf <_start@@Base+0x16f>
  4039ca:	add    rsp,0x28
  4039ce:	ret    
  4039cf:	call   403170 <__stack_chk_fail@plt>
  4039d4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4039df:	nop
  4039e0:	push   r15
  4039e2:	push   r14
  4039e4:	push   r13
  4039e6:	push   r12
  4039e8:	push   rbp
  4039e9:	push   rbx
  4039ea:	mov    rbx,rdi
  4039ed:	sub    rsp,0x8
  4039f1:	call   404560 <flatcc_builder_reset@@Base>
  4039f6:	xor    ecx,ecx
  4039f8:	xor    edx,edx
  4039fa:	lea    rsi,[rip+0x5603]        # 409004 <_IO_stdin_used@@Base+0x4>
  403a01:	mov    rdi,rbx
  403a04:	call   404d60 <flatcc_builder_start_buffer@@Base>
  403a09:	test   eax,eax
  403a0b:	jne    403a1a <_start@@Base+0x1ba>
  403a0d:	mov    esi,0x24
  403a12:	mov    rdi,rbx
  403a15:	call   405a00 <flatcc_builder_start_table@@Base>
  403a1a:	lea    rsi,[rip+0x55e8]        # 409009 <_IO_stdin_used@@Base+0x9>
  403a21:	mov    rdi,rbx
  403a24:	call   4070f0 <flatcc_builder_create_string_str@@Base>
  403a29:	mov    ebp,eax
  403a2b:	test   eax,eax
  403a2d:	je     403a43 <_start@@Base+0x1e3>
  403a2f:	mov    esi,0x3
  403a34:	mov    rdi,rbx
  403a37:	call   407450 <flatcc_builder_table_add_offset@@Base>
  403a3c:	test   rax,rax
  403a3f:	je     403a43 <_start@@Base+0x1e3>
  403a41:	mov    DWORD PTR [rax],ebp
  403a43:	mov    rdi,rbx
  403a46:	call   405860 <flatcc_builder_start_offset_vector@@Base>
  403a4b:	mov    ebp,0x3e8
  403a50:	lea    r15,[rip+0x55bf]        # 409016 <_IO_stdin_used@@Base+0x16>
  403a57:	mov    r14d,0xffffffff
  403a5d:	lea    r13,[rip+0x969c]        # 40d100 <__bss_start@@Base+0x50>
  403a64:	nop    DWORD PTR [rax+0x0]
  403a68:	mov    esi,0x24
  403a6d:	mov    rdi,rbx
  403a70:	call   405a00 <flatcc_builder_start_table@@Base>
  403a75:	mov    rdi,rbx
  403a78:	call   4058c0 <flatcc_builder_start_string@@Base>
  403a7d:	mov    r12d,0x64
  403a83:	mov    edx,0x7
  403a88:	mov    rsi,r15
  403a8b:	mov    rdi,rbx
  403a8e:	call   405530 <flatcc_builder_append_string@@Base>
  403a93:	dec    r12
  403a96:	jne    403a83 <_start@@Base+0x223>
  403a98:	mov    rdi,rbx
  403a9b:	call   407160 <flatcc_builder_end_string@@Base>
  403aa0:	mov    r12d,eax
  403aa3:	test   eax,eax
  403aa5:	je     403abc <_start@@Base+0x25c>
  403aa7:	mov    esi,0x3
  403aac:	mov    rdi,rbx
  403aaf:	call   407450 <flatcc_builder_table_add_offset@@Base>
  403ab4:	test   rax,rax
  403ab7:	je     403abc <_start@@Base+0x25c>
  403ab9:	mov    DWORD PTR [rax],r12d
  403abc:	mov    rcx,r14
  403abf:	mov    edx,0x1
  403ac4:	mov    esi,0x1
  403ac9:	mov    rdi,rbx
  403acc:	call   4057e0 <flatcc_builder_start_vector@@Base>
  403ad1:	mov    r12d,0x64
  403ad7:	mov    edx,0x3e8
  403adc:	mov    rsi,r13
  403adf:	mov    rdi,rbx
  403ae2:	call   405260 <flatcc_builder_append_vector@@Base>
  403ae7:	dec    r12
  403aea:	jne    403ad7 <_start@@Base+0x277>
  403aec:	mov    rdi,rbx
  403aef:	call   4066a0 <flatcc_builder_end_vector@@Base>
  403af4:	mov    r12d,eax
  403af7:	test   eax,eax
  403af9:	je     403b10 <_start@@Base+0x2b0>
  403afb:	mov    esi,0x5
  403b00:	mov    rdi,rbx
  403b03:	call   407450 <flatcc_builder_table_add_offset@@Base>
  403b08:	test   rax,rax
  403b0b:	je     403b10 <_start@@Base+0x2b0>
  403b0d:	mov    DWORD PTR [rax],r12d
  403b10:	mov    edx,0x1
  403b15:	lea    rsi,[rip+0x598e]        # 4094aa <_IO_stdin_used@@Base+0x4aa>
  403b1c:	mov    rdi,rbx
  403b1f:	call   4062f0 <flatcc_builder_check_required@@Base>
  403b24:	test   eax,eax
  403b26:	je     403bb0 <_start@@Base+0x350>
  403b2c:	mov    rdi,rbx
  403b2f:	call   406380 <flatcc_builder_end_table@@Base>
  403b34:	test   eax,eax
  403b36:	je     403bd0 <_start@@Base+0x370>
  403b3c:	mov    esi,eax
  403b3e:	mov    rdi,rbx
  403b41:	call   405370 <flatcc_builder_offset_vector_push@@Base>
  403b46:	dec    rbp
  403b49:	jne    403a68 <_start@@Base+0x208>
  403b4f:	mov    rdi,rbx
  403b52:	call   4067c0 <flatcc_builder_end_offset_vector@@Base>
  403b57:	mov    ebp,eax
  403b59:	test   eax,eax
  403b5b:	je     403bef <_start@@Base+0x38f>
  403b61:	mov    esi,0xb
  403b66:	mov    rdi,rbx
  403b69:	call   407450 <flatcc_builder_table_add_offset@@Base>
  403b6e:	test   rax,rax
  403b71:	je     403b75 <_start@@Base+0x315>
  403b73:	mov    DWORD PTR [rax],ebp
  403b75:	mov    edx,0x1
  403b7a:	lea    rsi,[rip+0x5929]        # 4094aa <_IO_stdin_used@@Base+0x4aa>
  403b81:	mov    rdi,rbx
  403b84:	call   4062f0 <flatcc_builder_check_required@@Base>
  403b89:	test   eax,eax
  403b8b:	je     403bb0 <_start@@Base+0x350>
  403b8d:	mov    rdi,rbx
  403b90:	call   406380 <flatcc_builder_end_table@@Base>
  403b95:	mov    esi,eax
  403b97:	mov    rdi,rbx
  403b9a:	call   404e40 <flatcc_builder_end_buffer@@Base>
  403b9f:	add    rsp,0x8
  403ba3:	pop    rbx
  403ba4:	pop    rbp
  403ba5:	pop    r12
  403ba7:	pop    r13
  403ba9:	pop    r14
  403bab:	xor    eax,eax
  403bad:	pop    r15
  403baf:	ret    
  403bb0:	lea    rcx,[rip+0x58a9]        # 409460 <_IO_stdin_used@@Base+0x460>
  403bb7:	mov    edx,0xeb
  403bbc:	lea    rsi,[rip+0x558d]        # 409150 <_IO_stdin_used@@Base+0x150>
  403bc3:	lea    rdi,[rip+0x5606]        # 4091d0 <_IO_stdin_used@@Base+0x1d0>
  403bca:	call   403190 <__assert_fail@plt>
  403bcf:	nop
  403bd0:	lea    rcx,[rip+0x58a9]        # 409480 <_IO_stdin_used@@Base+0x480>
  403bd7:	mov    edx,0x2a
  403bdc:	lea    rsi,[rip+0x5695]        # 409278 <_IO_stdin_used@@Base+0x278>
  403be3:	lea    rdi,[rip+0x5434]        # 40901e <_IO_stdin_used@@Base+0x1e>
  403bea:	call   403190 <__assert_fail@plt>
  403bef:	lea    rcx,[rip+0x589a]        # 409490 <_IO_stdin_used@@Base+0x490>
  403bf6:	mov    edx,0x38
  403bfb:	lea    rsi,[rip+0x5676]        # 409278 <_IO_stdin_used@@Base+0x278>
  403c02:	lea    rdi,[rip+0x5417]        # 409020 <_IO_stdin_used@@Base+0x20>
  403c09:	call   403190 <__assert_fail@plt>
  403c0e:	xchg   ax,ax
  403c10:	push   rbp
  403c11:	mov    ebp,edx
  403c13:	mov    r8d,0x1
  403c19:	push   rbx
  403c1a:	mov    rbx,rdi
  403c1d:	mov    ecx,0x1
  403c22:	sub    rsp,0x8
  403c26:	mov    edx,DWORD PTR [rdi+0x28]
  403c29:	add    rdx,rsi
  403c2c:	lea    rsi,[rdi+0x68]
  403c30:	mov    rdi,QWORD PTR [rdi+0x40]
  403c34:	call   QWORD PTR [rbx+0x50]
  403c37:	test   eax,eax
  403c39:	jne    403c68 <_start@@Base+0x408>
  403c3b:	mov    edx,DWORD PTR [rbx+0x28]
  403c3e:	mov    rcx,rdx
  403c41:	add    rdx,QWORD PTR [rbx+0x68]
  403c45:	mov    QWORD PTR [rbx+0x18],rdx
  403c49:	mov    edx,DWORD PTR [rbx+0x70]
  403c4c:	sub    edx,ecx
  403c4e:	cmp    ebp,edx
  403c50:	cmovb  edx,ebp
  403c53:	mov    DWORD PTR [rbx+0x24],edx
  403c56:	mov    rdx,QWORD PTR [rbx+0x30]
  403c5a:	mov    DWORD PTR [rdx+0x4],ebp
  403c5d:	add    rsp,0x8
  403c61:	pop    rbx
  403c62:	pop    rbp
  403c63:	ret    
  403c64:	nop    DWORD PTR [rax+0x0]
  403c68:	mov    eax,0xffffffff
  403c6d:	jmp    403c5d <_start@@Base+0x3fd>
  403c6f:	nop

0000000000403c70 <flatcc_builder_default_alloc@@Base>:
  403c70:	endbr64 
  403c74:	push   r13
  403c76:	push   r12
  403c78:	push   rbp
  403c79:	mov    rbp,rsi
  403c7c:	push   rbx
  403c7d:	sub    rsp,0x18
  403c81:	test   rdx,rdx
  403c84:	je     403d48 <flatcc_builder_default_alloc@@Base+0xd8>
  403c8a:	mov    r13d,ecx
  403c8d:	cmp    r8d,0x4
  403c91:	je     403d80 <flatcc_builder_default_alloc@@Base+0x110>
  403c97:	jle    403d10 <flatcc_builder_default_alloc@@Base+0xa0>
  403c99:	mov    rbx,rdx
  403c9c:	cmp    r8d,0x5
  403ca0:	je     403cc8 <flatcc_builder_default_alloc@@Base+0x58>
  403ca2:	cmp    r8d,0x7
  403ca6:	mov    ebx,0x40
  403cab:	mov    eax,0x20
  403cb0:	cmovne rbx,rax
  403cb4:	cmp    rbx,rdx
  403cb7:	jae    403cc8 <flatcc_builder_default_alloc@@Base+0x58>
  403cb9:	nop    DWORD PTR [rax+0x0]
  403cc0:	add    rbx,rbx
  403cc3:	cmp    rdx,rbx
  403cc6:	ja     403cc0 <flatcc_builder_default_alloc@@Base+0x50>
  403cc8:	mov    rax,QWORD PTR [rbp+0x8]
  403ccc:	cmp    rdx,rax
  403ccf:	ja     403cde <flatcc_builder_default_alloc@@Base+0x6e>
  403cd1:	shr    rax,1
  403cd4:	mov    rdx,rax
  403cd7:	xor    eax,eax
  403cd9:	cmp    rdx,rbx
  403cdc:	jae    403d05 <flatcc_builder_default_alloc@@Base+0x95>
  403cde:	mov    rdi,QWORD PTR [rbp+0x0]
  403ce2:	mov    rsi,rbx
  403ce5:	call   403200 <realloc@plt>
  403cea:	mov    r12,rax
  403ced:	test   rax,rax
  403cf0:	je     403d8a <flatcc_builder_default_alloc@@Base+0x11a>
  403cf6:	test   r13d,r13d
  403cf9:	jne    403d28 <flatcc_builder_default_alloc@@Base+0xb8>
  403cfb:	mov    QWORD PTR [rbp+0x0],r12
  403cff:	mov    QWORD PTR [rbp+0x8],rbx
  403d03:	xor    eax,eax
  403d05:	add    rsp,0x18
  403d09:	pop    rbx
  403d0a:	pop    rbp
  403d0b:	pop    r12
  403d0d:	pop    r13
  403d0f:	ret    
  403d10:	cmp    r8d,0x1
  403d14:	mov    ebx,0x100
  403d19:	mov    eax,0x20
  403d1e:	cmovne rbx,rax
  403d22:	jmp    403cb4 <flatcc_builder_default_alloc@@Base+0x44>
  403d24:	nop    DWORD PTR [rax+0x0]
  403d28:	mov    rax,QWORD PTR [rbp+0x8]
  403d2c:	cmp    rax,rbx
  403d2f:	jae    403cfb <flatcc_builder_default_alloc@@Base+0x8b>
  403d31:	mov    rdx,rbx
  403d34:	sub    rdx,rax
  403d37:	lea    rdi,[r12+rax*1]
  403d3b:	xor    esi,esi
  403d3d:	call   4031a0 <memset@plt>
  403d42:	jmp    403cfb <flatcc_builder_default_alloc@@Base+0x8b>
  403d44:	nop    DWORD PTR [rax+0x0]
  403d48:	mov    rdi,QWORD PTR [rsi]
  403d4b:	xor    eax,eax
  403d4d:	test   rdi,rdi
  403d50:	je     403d05 <flatcc_builder_default_alloc@@Base+0x95>
  403d52:	mov    DWORD PTR [rsp+0xc],eax
  403d56:	call   403140 <free@plt>
  403d5b:	mov    QWORD PTR [rbp+0x0],0x0
  403d63:	mov    QWORD PTR [rbp+0x8],0x0
  403d6b:	mov    eax,DWORD PTR [rsp+0xc]
  403d6f:	add    rsp,0x18
  403d73:	pop    rbx
  403d74:	pop    rbp
  403d75:	pop    r12
  403d77:	pop    r13
  403d79:	ret    
  403d7a:	nop    WORD PTR [rax+rax*1+0x0]
  403d80:	mov    ebx,0x120
  403d85:	jmp    403cb4 <flatcc_builder_default_alloc@@Base+0x44>
  403d8a:	mov    eax,0xffffffff
  403d8f:	jmp    403d05 <flatcc_builder_default_alloc@@Base+0x95>
  403d94:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403d9f:	nop
  403da0:	push   rax
  403da1:	pop    rax
  403da2:	lea    rcx,[rip+0x61e7]        # 409f90 <_IO_stdin_used@@Base+0xf90>
  403da9:	mov    edx,0x134
  403dae:	lea    rsi,[rip+0x571b]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  403db5:	lea    rdi,[rip+0x5aab]        # 409867 <_IO_stdin_used@@Base+0x867>
  403dbc:	sub    rsp,0x8
  403dc0:	call   403190 <__assert_fail@plt>
  403dc5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403dd0:	push   rax
  403dd1:	pop    rax
  403dd2:	lea    rcx,[rip+0x6147]        # 409f20 <_IO_stdin_used@@Base+0xf20>
  403dd9:	mov    edx,0x2a5
  403dde:	lea    rsi,[rip+0x56eb]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  403de5:	lea    rdi,[rip+0x5a7b]        # 409867 <_IO_stdin_used@@Base+0x867>
  403dec:	sub    rsp,0x8
  403df0:	call   403190 <__assert_fail@plt>
  403df5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403e00:	push   rbx
  403e01:	mov    r9,rdi
  403e04:	sub    rsp,0xa0
  403e0b:	mov    rbx,QWORD PTR fs:0x28
  403e14:	mov    QWORD PTR [rsp+0x98],rbx
  403e1c:	xor    ebx,ebx
  403e1e:	test   dx,dx
  403e21:	je     403e80 <flatcc_builder_default_alloc@@Base+0x210>
  403e23:	mov    eax,edx
  403e25:	movzx  edx,dx
  403e28:	movzx  edi,WORD PTR [rsi]
  403e2b:	cmp    di,0x3
  403e2f:	ja     403e3e <flatcc_builder_default_alloc@@Base+0x1ce>
  403e31:	mov    edi,0x4
  403e36:	mov    WORD PTR [rsi],di
  403e39:	mov    edi,0x4
  403e3e:	cmp    ax,di
  403e41:	jbe    403e46 <flatcc_builder_default_alloc@@Base+0x1d6>
  403e43:	mov    WORD PTR [rsi],ax
  403e46:	test   ecx,ecx
  403e48:	jne    403e57 <flatcc_builder_default_alloc@@Base+0x1e7>
  403e4a:	mov    ebx,DWORD PTR [r9+0xf4]
  403e51:	dec    edx
  403e53:	and    edx,ebx
  403e55:	jne    403ea0 <flatcc_builder_default_alloc@@Base+0x230>
  403e57:	xor    eax,eax
  403e59:	mov    rbx,QWORD PTR [rsp+0x98]
  403e61:	xor    rbx,QWORD PTR fs:0x28
  403e6a:	jne    403f0d <flatcc_builder_default_alloc@@Base+0x29d>
  403e70:	add    rsp,0xa0
  403e77:	pop    rbx
  403e78:	ret    
  403e79:	nop    DWORD PTR [rax+0x0]
  403e80:	movzx  eax,WORD PTR [rdi+0xec]
  403e87:	movzx  edx,ax
  403e8a:	test   ax,ax
  403e8d:	jne    403e28 <flatcc_builder_default_alloc@@Base+0x1b8>
  403e8f:	mov    edx,0x1
  403e94:	mov    eax,0x1
  403e99:	jmp    403e28 <flatcc_builder_default_alloc@@Base+0x1b8>
  403e9b:	nop    DWORD PTR [rax+rax*1+0x0]
  403ea0:	mov    rax,0x409fc0
  403ea7:	movsxd r8,edx
  403eaa:	add    edx,ebx
  403eac:	mov    QWORD PTR [rsp],r8
  403eb0:	mov    QWORD PTR [rsp+0x10],rax
  403eb5:	mov    QWORD PTR [rsp+0x18],r8
  403eba:	mov    DWORD PTR [rsp+0x8],0x1
  403ec2:	mov    DWORD PTR [r9+0xf4],edx
  403ec9:	cmp    ebx,edx
  403ecb:	jg     403f17 <flatcc_builder_default_alloc@@Base+0x2a7>
  403ecd:	mov    rdi,QWORD PTR [r9+0x38]
  403ed1:	lea    rsi,[rsp+0x10]
  403ed6:	mov    ecx,ebx
  403ed8:	mov    edx,0x1
  403edd:	call   QWORD PTR [r9+0x48]
  403ee1:	test   eax,eax
  403ee3:	jne    403f12 <flatcc_builder_default_alloc@@Base+0x2a2>
  403ee5:	cmp    ebx,0xffffffff
  403ee8:	jne    403e57 <flatcc_builder_default_alloc@@Base+0x1e7>
  403eee:	lea    rcx,[rip+0x603b]        # 409f30 <_IO_stdin_used@@Base+0xf30>
  403ef5:	mov    edx,0x2be
  403efa:	lea    rsi,[rip+0x55cf]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  403f01:	lea    rdi,[rip+0x595f]        # 409867 <_IO_stdin_used@@Base+0x867>
  403f08:	call   403190 <__assert_fail@plt>
  403f0d:	call   403170 <__stack_chk_fail@plt>
  403f12:	call   403dd0 <flatcc_builder_default_alloc@@Base+0x160>
  403f17:	lea    rcx,[rip+0x6002]        # 409f20 <_IO_stdin_used@@Base+0xf20>
  403f1e:	mov    edx,0x2a1
  403f23:	lea    rsi,[rip+0x55a6]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  403f2a:	lea    rdi,[rip+0x5936]        # 409867 <_IO_stdin_used@@Base+0x867>
  403f31:	call   403190 <__assert_fail@plt>
  403f36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403f40:	push   rax
  403f41:	pop    rax
  403f42:	lea    rcx,[rip+0x5fc7]        # 409f10 <_IO_stdin_used@@Base+0xf10>
  403f49:	mov    edx,0x28b
  403f4e:	lea    rsi,[rip+0x557b]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  403f55:	lea    rdi,[rip+0x590b]        # 409867 <_IO_stdin_used@@Base+0x867>
  403f5c:	sub    rsp,0x8
  403f60:	call   403190 <__assert_fail@plt>
  403f65:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403f70:	push   rax
  403f71:	pop    rax
  403f72:	lea    rcx,[rip+0x5ef7]        # 409e70 <_IO_stdin_used@@Base+0xe70>
  403f79:	mov    edx,0x37c
  403f7e:	lea    rsi,[rip+0x554b]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  403f85:	lea    rdi,[rip+0x58b4]        # 409840 <_IO_stdin_used@@Base+0x840>
  403f8c:	sub    rsp,0x8
  403f90:	call   403190 <__assert_fail@plt>
  403f95:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403fa0:	push   r12
  403fa2:	mov    r12d,esi
  403fa5:	push   rbp
  403fa6:	push   rbx
  403fa7:	mov    rbx,rdi
  403faa:	movsxd rax,DWORD PTR [rdi+0x104]
  403fb1:	lea    edx,[rax+0x1]
  403fb4:	mov    DWORD PTR [rdi+0x104],edx
  403fba:	cmp    edx,DWORD PTR [rdi+0x108]
  403fc0:	jle    404090 <flatcc_builder_default_alloc@@Base+0x420>
  403fc6:	mov    ecx,DWORD PTR [rdi+0x120]
  403fcc:	cmp    edx,ecx
  403fce:	jle    403fd8 <flatcc_builder_default_alloc@@Base+0x368>
  403fd0:	test   ecx,ecx
  403fd2:	jg     4040a8 <flatcc_builder_default_alloc@@Base+0x438>
  403fd8:	lea    rcx,[rax+rax*8]
  403fdc:	lea    rbp,[rcx*4+0x0]
  403fe4:	lea    rdx,[rbp+0x24]
  403fe8:	cmp    rdx,QWORD PTR [rbx+0xa0]
  403fef:	jbe    40400f <flatcc_builder_default_alloc@@Base+0x39f>
  403ff1:	mov    rdi,QWORD PTR [rbx+0x40]
  403ff5:	xor    ecx,ecx
  403ff7:	lea    rsi,[rbx+0x98]
  403ffe:	mov    r8d,0x4
  404004:	call   QWORD PTR [rbx+0x50]
  404007:	test   eax,eax
  404009:	jne    4040af <flatcc_builder_default_alloc@@Base+0x43f>
  40400f:	mov    rcx,rbp
  404012:	add    rcx,QWORD PTR [rbx+0x98]
  404019:	mov    QWORD PTR [rbx+0x30],rcx
  40401d:	je     4040a8 <flatcc_builder_default_alloc@@Base+0x438>
  404023:	movabs rdx,0xe38e38e38e38e38f
  40402d:	mov    rax,rdx
  404030:	mul    QWORD PTR [rbx+0xa0]
  404037:	mov    eax,DWORD PTR [rbx+0x120]
  40403d:	shr    rdx,0x5
  404041:	mov    DWORD PTR [rbx+0x108],edx
  404047:	cmp    eax,edx
  404049:	jge    404050 <flatcc_builder_default_alloc@@Base+0x3e0>
  40404b:	test   eax,eax
  40404d:	jg     4040a0 <flatcc_builder_default_alloc@@Base+0x430>
  40404f:	nop
  404050:	movzx  eax,WORD PTR [rbx+0xea]
  404057:	mov    edx,DWORD PTR [rbx+0x20]
  40405a:	mov    WORD PTR [rcx+0xc],ax
  40405e:	mov    eax,DWORD PTR [rbx+0x28]
  404061:	mov    DWORD PTR [rcx+0x8],edx
  404064:	mov    WORD PTR [rbx+0xea],r12w
  40406c:	mov    DWORD PTR [rcx],eax
  40406e:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404075:	lea    eax,[rdx+rax*1+0x7]
  404079:	mov    DWORD PTR [rbx+0x20],0x0
  404080:	and    eax,0xfffffff8
  404083:	mov    DWORD PTR [rbx+0x28],eax
  404086:	xor    eax,eax
  404088:	pop    rbx
  404089:	pop    rbp
  40408a:	pop    r12
  40408c:	ret    
  40408d:	nop    DWORD PTR [rax]
  404090:	mov    rax,QWORD PTR [rdi+0x30]
  404094:	lea    rcx,[rax+0x24]
  404098:	mov    QWORD PTR [rdi+0x30],rcx
  40409c:	jmp    404050 <flatcc_builder_default_alloc@@Base+0x3e0>
  40409e:	xchg   ax,ax
  4040a0:	mov    DWORD PTR [rbx+0x108],eax
  4040a6:	jmp    404050 <flatcc_builder_default_alloc@@Base+0x3e0>
  4040a8:	mov    eax,0xffffffff
  4040ad:	jmp    404088 <flatcc_builder_default_alloc@@Base+0x418>
  4040af:	call   403da0 <flatcc_builder_default_alloc@@Base+0x130>
  4040b4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4040bf:	nop
  4040c0:	push   rbp
  4040c1:	push   rbx
  4040c2:	sub    rsp,0xb8
  4040c9:	mov    rax,QWORD PTR fs:0x28
  4040d2:	mov    QWORD PTR [rsp+0xa8],rax
  4040da:	xor    eax,eax
  4040dc:	cmp    edx,0x3fffffff
  4040e2:	ja     404278 <flatcc_builder_default_alloc@@Base+0x608>
  4040e8:	cmp    WORD PTR [rdi+0xe8],0x3
  4040f0:	mov    rbx,rdi
  4040f3:	ja     404101 <flatcc_builder_default_alloc@@Base+0x491>
  4040f5:	mov    eax,0x4
  4040fa:	mov    WORD PTR [rdi+0xe8],ax
  404101:	mov    edi,DWORD PTR [rbx+0xf0]
  404107:	mov    r9d,edx
  40410a:	mov    eax,edi
  40410c:	lea    r8,[rsp+0xc]
  404111:	and    eax,0x3
  404114:	shl    r9d,0x2
  404118:	mov    QWORD PTR [rsp+0x20],r8
  40411d:	mov    DWORD PTR [rsp+0xc],edx
  404121:	mov    QWORD PTR [rsp+0x10],0x4
  40412a:	mov    QWORD PTR [rsp+0x28],0x4
  404133:	mov    DWORD PTR [rsp+0x18],0x1
  40413b:	mov    r8d,0x4
  404141:	je     404161 <flatcc_builder_default_alloc@@Base+0x4f1>
  404143:	mov    r9d,r9d
  404146:	lea    r8,[r9+0x4]
  40414a:	mov    QWORD PTR [rsp+0x10],r8
  40414f:	mov    QWORD PTR [rsp+0x30],rsi
  404154:	mov    QWORD PTR [rsp+0x38],r9
  404159:	mov    DWORD PTR [rsp+0x18],0x2
  404161:	test   eax,eax
  404163:	jne    404240 <flatcc_builder_default_alloc@@Base+0x5d0>
  404169:	mov    r10d,r8d
  40416c:	test   edx,edx
  40416e:	je     4041e6 <flatcc_builder_default_alloc@@Base+0x576>
  404170:	sub    r10d,edi
  404173:	lea    r9d,[rdx-0x1]
  404177:	xor    eax,eax
  404179:	sub    r10d,0x4
  40417d:	jmp    4041a8 <flatcc_builder_default_alloc@@Base+0x538>
  40417f:	nop
  404180:	mov    edi,eax
  404182:	neg    edi
  404184:	lea    edi,[r10+rdi*4]
  404188:	add    edx,edi
  40418a:	mov    DWORD PTR [rsi+rax*4],edx
  40418d:	test   rcx,rcx
  404190:	je     40419c <flatcc_builder_default_alloc@@Base+0x52c>
  404192:	cmp    BYTE PTR [rcx+rax*1],0x0
  404196:	je     40429b <flatcc_builder_default_alloc@@Base+0x62b>
  40419c:	lea    rdx,[rax+0x1]
  4041a0:	cmp    rax,r9
  4041a3:	je     4041e0 <flatcc_builder_default_alloc@@Base+0x570>
  4041a5:	mov    rax,rdx
  4041a8:	mov    edx,DWORD PTR [rsi+rax*4]
  4041ab:	test   edx,edx
  4041ad:	jne    404180 <flatcc_builder_default_alloc@@Base+0x510>
  4041af:	test   rcx,rcx
  4041b2:	je     40427c <flatcc_builder_default_alloc@@Base+0x60c>
  4041b8:	cmp    BYTE PTR [rcx+rax*1],0x0
  4041bc:	je     40419c <flatcc_builder_default_alloc@@Base+0x52c>
  4041be:	lea    rcx,[rip+0x59cb]        # 409b90 <_IO_stdin_used@@Base+0xb90>
  4041c5:	mov    edx,0x5b5
  4041ca:	lea    rsi,[rip+0x52ff]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4041d1:	lea    rdi,[rip+0x5691]        # 409869 <_IO_stdin_used@@Base+0x869>
  4041d8:	call   403190 <__assert_fail@plt>
  4041dd:	nop    DWORD PTR [rax]
  4041e0:	mov    edi,DWORD PTR [rbx+0xf0]
  4041e6:	mov    ebp,edi
  4041e8:	sub    ebp,r8d
  4041eb:	cmp    ebp,edi
  4041ed:	jge    4042ba <flatcc_builder_default_alloc@@Base+0x64a>
  4041f3:	mov    rdi,QWORD PTR [rbx+0x38]
  4041f7:	mov    edx,DWORD PTR [rsp+0x18]
  4041fb:	lea    rsi,[rsp+0x20]
  404200:	mov    ecx,ebp
  404202:	call   QWORD PTR [rbx+0x48]
  404205:	test   eax,eax
  404207:	jne    4042de <flatcc_builder_default_alloc@@Base+0x66e>
  40420d:	mov    DWORD PTR [rbx+0xf0],ebp
  404213:	mov    rbx,QWORD PTR [rsp+0xa8]
  40421b:	xor    rbx,QWORD PTR fs:0x28
  404224:	mov    eax,ebp
  404226:	jne    4042d9 <flatcc_builder_default_alloc@@Base+0x669>
  40422c:	add    rsp,0xb8
  404233:	pop    rbx
  404234:	pop    rbp
  404235:	ret    
  404236:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404240:	movsxd r10,DWORD PTR [rsp+0x18]
  404245:	mov    r11,0x409fc0
  40424c:	mov    r9,r10
  40424f:	add    r8,rax
  404252:	shl    r10,0x4
  404256:	inc    r9d
  404259:	mov    QWORD PTR [rsp+0x10],r8
  40425e:	mov    QWORD PTR [rsp+r10*1+0x20],r11
  404263:	mov    QWORD PTR [rsp+r10*1+0x28],rax
  404268:	mov    DWORD PTR [rsp+0x18],r9d
  40426d:	jmp    404169 <flatcc_builder_default_alloc@@Base+0x4f9>
  404272:	nop    WORD PTR [rax+rax*1+0x0]
  404278:	xor    ebp,ebp
  40427a:	jmp    404213 <flatcc_builder_default_alloc@@Base+0x5a3>
  40427c:	lea    rcx,[rip+0x590d]        # 409b90 <_IO_stdin_used@@Base+0xb90>
  404283:	mov    edx,0x5b7
  404288:	lea    rsi,[rip+0x5241]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  40428f:	lea    rdi,[rip+0x55d1]        # 409867 <_IO_stdin_used@@Base+0x867>
  404296:	call   403190 <__assert_fail@plt>
  40429b:	lea    rcx,[rip+0x58ee]        # 409b90 <_IO_stdin_used@@Base+0xb90>
  4042a2:	mov    edx,0x5b1
  4042a7:	lea    rsi,[rip+0x5222]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4042ae:	lea    rdi,[rip+0x55a6]        # 40985b <_IO_stdin_used@@Base+0x85b>
  4042b5:	call   403190 <__assert_fail@plt>
  4042ba:	lea    rcx,[rip+0x5c4f]        # 409f10 <_IO_stdin_used@@Base+0xf10>
  4042c1:	mov    edx,0x287
  4042c6:	lea    rsi,[rip+0x5203]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4042cd:	lea    rdi,[rip+0x5593]        # 409867 <_IO_stdin_used@@Base+0x867>
  4042d4:	call   403190 <__assert_fail@plt>
  4042d9:	call   403170 <__stack_chk_fail@plt>
  4042de:	call   403f40 <flatcc_builder_default_alloc@@Base+0x2d0>
  4042e3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4042ee:	xchg   ax,ax

00000000004042f0 <flatcc_builder_flush_vtable_cache@@Base>:
  4042f0:	endbr64 
  4042f4:	cmp    QWORD PTR [rdi+0xd8],0x0
  4042fc:	jne    404300 <flatcc_builder_flush_vtable_cache@@Base+0x10>
  4042fe:	ret    
  4042ff:	nop
  404300:	push   rbx
  404301:	mov    rbx,rdi
  404304:	xor    esi,esi
  404306:	mov    rdx,QWORD PTR [rbx+0xb0]
  40430d:	mov    rdi,QWORD PTR [rdi+0xa8]
  404314:	call   4031a0 <memset@plt>
  404319:	movabs rax,0x1000000000
  404323:	mov    QWORD PTR [rbx+0xe0],rax
  40432a:	pop    rbx
  40432b:	ret    
  40432c:	nop    DWORD PTR [rax+0x0]

0000000000404330 <flatcc_builder_custom_init@@Base>:
  404330:	endbr64 
  404334:	mov    QWORD PTR [rdi],0x0
  40433b:	mov    QWORD PTR [rdi+0x180],0x0
  404346:	mov    r9,rdi
  404349:	lea    rdi,[rdi+0x8]
  40434d:	and    rdi,0xfffffffffffffff8
  404351:	mov    r10,rcx
  404354:	mov    rcx,r9
  404357:	sub    rcx,rdi
  40435a:	add    ecx,0x188
  404360:	shr    ecx,0x3
  404363:	xor    eax,eax
  404365:	rep stos QWORD PTR es:[rdi],rax
  404368:	test   rsi,rsi
  40436b:	je     404388 <flatcc_builder_custom_init@@Base+0x58>
  40436d:	test   r10,r10
  404370:	je     4043a6 <flatcc_builder_custom_init@@Base+0x76>
  404372:	mov    QWORD PTR [r9+0x40],r8
  404376:	mov    QWORD PTR [r9+0x50],r10
  40437a:	mov    QWORD PTR [r9+0x38],rdx
  40437e:	mov    QWORD PTR [r9+0x48],rsi
  404382:	xor    eax,eax
  404384:	ret    
  404385:	nop    DWORD PTR [rax]
  404388:	mov    DWORD PTR [r9+0x128],0x1
  404393:	lea    rdx,[r9+0x130]
  40439a:	mov    rsi,0x407de0
  4043a1:	test   r10,r10
  4043a4:	jne    404372 <flatcc_builder_custom_init@@Base+0x42>
  4043a6:	mov    r10,0x403c70
  4043ad:	jmp    404372 <flatcc_builder_custom_init@@Base+0x42>
  4043af:	nop

00000000004043b0 <flatcc_builder_init@@Base>:
  4043b0:	endbr64 
  4043b4:	xor    r8d,r8d
  4043b7:	xor    ecx,ecx
  4043b9:	xor    edx,edx
  4043bb:	xor    esi,esi
  4043bd:	jmp    404330 <flatcc_builder_custom_init@@Base>
  4043c2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4043cd:	nop    DWORD PTR [rax]

00000000004043d0 <flatcc_builder_custom_reset@@Base>:
  4043d0:	endbr64 
  4043d4:	push   r14
  4043d6:	mov    r14d,esi
  4043d9:	push   r13
  4043db:	mov    r13d,edx
  4043de:	push   r12
  4043e0:	mov    r12,rdi
  4043e3:	push   rbp
  4043e4:	xor    ebp,ebp
  4043e6:	push   rbx
  4043e7:	lea    rbx,[rdi+0x58]
  4043eb:	jmp    404435 <flatcc_builder_custom_reset@@Base+0x65>
  4043ed:	nop    DWORD PTR [rax]
  4043f0:	cmp    ebp,0x5
  4043f3:	je     40441f <flatcc_builder_custom_reset@@Base+0x4f>
  4043f5:	test   r13d,r13d
  4043f8:	je     40441f <flatcc_builder_custom_reset@@Base+0x4f>
  4043fa:	mov    rdi,QWORD PTR [r12+0x40]
  4043ff:	mov    r8d,ebp
  404402:	mov    ecx,0x1
  404407:	mov    edx,0x1
  40440c:	mov    rsi,rbx
  40440f:	call   QWORD PTR [r12+0x50]
  404414:	test   eax,eax
  404416:	jne    404550 <flatcc_builder_custom_reset@@Base+0x180>
  40441c:	mov    rdi,QWORD PTR [rbx]
  40441f:	mov    rdx,QWORD PTR [rbx+0x8]
  404423:	xor    esi,esi
  404425:	call   4031a0 <memset@plt>
  40442a:	inc    ebp
  40442c:	add    rbx,0x10
  404430:	cmp    ebp,0x8
  404433:	je     404468 <flatcc_builder_custom_reset@@Base+0x98>
  404435:	mov    rdi,QWORD PTR [rbx]
  404438:	test   rdi,rdi
  40443b:	jne    4043f0 <flatcc_builder_custom_reset@@Base+0x20>
  40443d:	cmp    QWORD PTR [rbx+0x8],0x0
  404442:	je     40442a <flatcc_builder_custom_reset@@Base+0x5a>
  404444:	lea    rcx,[rip+0x5b55]        # 409fa0 <_IO_stdin_used@@Base+0xfa0>
  40444b:	mov    edx,0x1b2
  404450:	lea    rsi,[rip+0x5079]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  404457:	lea    rdi,[rip+0x5419]        # 409877 <_IO_stdin_used@@Base+0x877>
  40445e:	call   403190 <__assert_fail@plt>
  404463:	nop    DWORD PTR [rax+rax*1+0x0]
  404468:	mov    edx,DWORD PTR [r12+0xe4]
  404470:	mov    DWORD PTR [r12+0xe0],0x0
  40447c:	test   edx,edx
  40447e:	je     40448c <flatcc_builder_custom_reset@@Base+0xbc>
  404480:	mov    DWORD PTR [r12+0xe4],0x10
  40448c:	xor    eax,eax
  40448e:	mov    WORD PTR [r12+0xe8],ax
  404497:	mov    rax,QWORD PTR [r12+0x68]
  40449c:	mov    QWORD PTR [r12+0xf0],0x0
  4044a8:	mov    QWORD PTR [r12+0x18],rax
  4044ad:	mov    rax,QWORD PTR [r12+0x88]
  4044b5:	mov    QWORD PTR [r12+0x20],0x0
  4044be:	mov    QWORD PTR [r12],rax
  4044c2:	mov    rax,QWORD PTR [r12+0x58]
  4044c7:	mov    QWORD PTR [r12+0xfc],0x0
  4044d3:	mov    QWORD PTR [r12+0x104],0x0
  4044df:	mov    QWORD PTR [r12+0x8],rax
  4044e4:	mov    QWORD PTR [r12+0x30],0x0
  4044ed:	test   r14d,r14d
  4044f0:	jne    404510 <flatcc_builder_custom_reset@@Base+0x140>
  4044f2:	mov    eax,DWORD PTR [r12+0x128]
  4044fa:	test   eax,eax
  4044fc:	jne    404534 <flatcc_builder_custom_reset@@Base+0x164>
  4044fe:	pop    rbx
  4044ff:	pop    rbp
  404500:	pop    r12
  404502:	pop    r13
  404504:	pop    r14
  404506:	ret    
  404507:	nop    WORD PTR [rax+rax*1+0x0]
  404510:	mov    eax,DWORD PTR [r12+0x128]
  404518:	mov    QWORD PTR [r12+0x118],0x0
  404524:	mov    QWORD PTR [r12+0x120],0x0
  404530:	test   eax,eax
  404532:	je     4044fe <flatcc_builder_custom_reset@@Base+0x12e>
  404534:	lea    rdi,[r12+0x130]
  40453c:	call   407c50 <flatcc_emitter_reset@@Base>
  404541:	pop    rbx
  404542:	pop    rbp
  404543:	pop    r12
  404545:	pop    r13
  404547:	xor    eax,eax
  404549:	pop    r14
  40454b:	ret    
  40454c:	nop    DWORD PTR [rax+0x0]
  404550:	pop    rbx
  404551:	pop    rbp
  404552:	pop    r12
  404554:	pop    r13
  404556:	mov    eax,0xffffffff
  40455b:	pop    r14
  40455d:	ret    
  40455e:	xchg   ax,ax

0000000000404560 <flatcc_builder_reset@@Base>:
  404560:	endbr64 
  404564:	xor    edx,edx
  404566:	xor    esi,esi
  404568:	jmp    4043d0 <flatcc_builder_custom_reset@@Base>
  40456d:	nop    DWORD PTR [rax]

0000000000404570 <flatcc_builder_clear@@Base>:
  404570:	endbr64 
  404574:	push   r12
  404576:	lea    r12,[rdi+0x58]
  40457a:	push   rbp
  40457b:	xor    ebp,ebp
  40457d:	push   rbx
  40457e:	mov    rbx,rdi
  404581:	nop    DWORD PTR [rax+0x0]
  404588:	mov    rdi,QWORD PTR [rbx+0x40]
  40458c:	mov    r8d,ebp
  40458f:	mov    rsi,r12
  404592:	xor    ecx,ecx
  404594:	xor    edx,edx
  404596:	inc    ebp
  404598:	call   QWORD PTR [rbx+0x50]
  40459b:	add    r12,0x10
  40459f:	cmp    ebp,0x8
  4045a2:	jne    404588 <flatcc_builder_clear@@Base+0x18>
  4045a4:	mov    eax,DWORD PTR [rbx+0x128]
  4045aa:	test   eax,eax
  4045ac:	jne    4045e0 <flatcc_builder_clear@@Base+0x70>
  4045ae:	lea    rdi,[rbx+0x8]
  4045b2:	and    rdi,0xfffffffffffffff8
  4045b6:	mov    QWORD PTR [rbx],0x0
  4045bd:	mov    QWORD PTR [rbx+0x180],0x0
  4045c8:	sub    rbx,rdi
  4045cb:	lea    ecx,[rbx+0x188]
  4045d1:	shr    ecx,0x3
  4045d4:	xor    eax,eax
  4045d6:	rep stos QWORD PTR es:[rdi],rax
  4045d9:	pop    rbx
  4045da:	pop    rbp
  4045db:	pop    r12
  4045dd:	ret    
  4045de:	xchg   ax,ax
  4045e0:	lea    rdi,[rbx+0x130]
  4045e7:	call   407d40 <flatcc_emitter_clear@@Base>
  4045ec:	jmp    4045ae <flatcc_builder_clear@@Base+0x3e>
  4045ee:	xchg   ax,ax

00000000004045f0 <flatcc_builder_enter_user_frame_ptr@@Base>:
  4045f0:	endbr64 
  4045f4:	push   r12
  4045f6:	push   rbp
  4045f7:	lea    rbp,[rsi+0x7]
  4045fb:	and    rbp,0xfffffffffffffff8
  4045ff:	push   rbx
  404600:	add    rbp,0x8
  404604:	mov    rbx,rdi
  404607:	mov    r12,QWORD PTR [rdi+0x180]
  40460e:	lea    rdx,[r12+rbp*1]
  404612:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404619:	jbe    404635 <flatcc_builder_enter_user_frame_ptr@@Base+0x45>
  40461b:	lea    rsi,[rdi+0xc8]
  404622:	mov    rdi,QWORD PTR [rdi+0x40]
  404626:	xor    ecx,ecx
  404628:	mov    r8d,0x7
  40462e:	call   QWORD PTR [rbx+0x50]
  404631:	test   eax,eax
  404633:	jne    404687 <flatcc_builder_enter_user_frame_ptr@@Base+0x97>
  404635:	add    r12,QWORD PTR [rbx+0xc8]
  40463c:	je     404680 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
  40463e:	mov    rdx,rbp
  404641:	mov    rdi,r12
  404644:	xor    esi,esi
  404646:	call   4031a0 <memset@plt>
  40464b:	mov    rdx,QWORD PTR [rbx+0x178]
  404652:	lea    rax,[r12+0x8]
  404657:	mov    QWORD PTR [r12],rdx
  40465b:	mov    rdx,QWORD PTR [rbx+0x180]
  404662:	add    rbp,rdx
  404665:	lea    rcx,[rdx+0x8]
  404669:	mov    QWORD PTR [rbx+0x180],rbp
  404670:	mov    QWORD PTR [rbx+0x178],rcx
  404677:	pop    rbx
  404678:	pop    rbp
  404679:	pop    r12
  40467b:	ret    
  40467c:	nop    DWORD PTR [rax+0x0]
  404680:	pop    rbx
  404681:	pop    rbp
  404682:	xor    eax,eax
  404684:	pop    r12
  404686:	ret    
  404687:	call   403da0 <flatcc_builder_default_alloc@@Base+0x130>
  40468c:	nop    DWORD PTR [rax+0x0]

0000000000404690 <flatcc_builder_enter_user_frame@@Base>:
  404690:	endbr64 
  404694:	push   r12
  404696:	push   rbp
  404697:	mov    rbp,rdi
  40469a:	push   rbx
  40469b:	lea    rbx,[rsi+0x7]
  40469f:	and    rbx,0xfffffffffffffff8
  4046a3:	mov    r12,QWORD PTR [rdi+0x180]
  4046aa:	add    rbx,0x8
  4046ae:	lea    rdx,[r12+rbx*1]
  4046b2:	cmp    rdx,QWORD PTR [rdi+0xd0]
  4046b9:	jbe    4046d5 <flatcc_builder_enter_user_frame@@Base+0x45>
  4046bb:	lea    rsi,[rdi+0xc8]
  4046c2:	mov    rdi,QWORD PTR [rdi+0x40]
  4046c6:	xor    ecx,ecx
  4046c8:	mov    r8d,0x7
  4046ce:	call   QWORD PTR [rbp+0x50]
  4046d1:	test   eax,eax
  4046d3:	jne    40471a <flatcc_builder_enter_user_frame@@Base+0x8a>
  4046d5:	add    r12,QWORD PTR [rbp+0xc8]
  4046dc:	je     404712 <flatcc_builder_enter_user_frame@@Base+0x82>
  4046de:	mov    rdx,rbx
  4046e1:	mov    rdi,r12
  4046e4:	xor    esi,esi
  4046e6:	call   4031a0 <memset@plt>
  4046eb:	mov    rax,QWORD PTR [rbp+0x178]
  4046f2:	mov    QWORD PTR [r12],rax
  4046f6:	mov    rax,QWORD PTR [rbp+0x180]
  4046fd:	lea    r12,[rax+0x8]
  404701:	add    rbx,rax
  404704:	mov    QWORD PTR [rbp+0x178],r12
  40470b:	mov    QWORD PTR [rbp+0x180],rbx
  404712:	pop    rbx
  404713:	pop    rbp
  404714:	mov    rax,r12
  404717:	pop    r12
  404719:	ret    
  40471a:	call   403da0 <flatcc_builder_default_alloc@@Base+0x130>
  40471f:	nop

0000000000404720 <flatcc_builder_exit_user_frame@@Base>:
  404720:	endbr64 
  404724:	mov    rax,QWORD PTR [rdi+0x178]
  40472b:	test   rax,rax
  40472e:	je     404750 <flatcc_builder_exit_user_frame@@Base+0x30>
  404730:	mov    edx,eax
  404732:	sub    rax,0x8
  404736:	mov    QWORD PTR [rdi+0x180],rax
  40473d:	add    rdx,QWORD PTR [rdi+0xc8]
  404744:	mov    rax,QWORD PTR [rdx-0x8]
  404748:	mov    QWORD PTR [rdi+0x178],rax
  40474f:	ret    
  404750:	push   rax
  404751:	lea    rcx,[rip+0x5818]        # 409f70 <_IO_stdin_used@@Base+0xf70>
  404758:	mov    edx,0x21e
  40475d:	lea    rsi,[rip+0x4d6c]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  404764:	lea    rdi,[rip+0x511e]        # 409889 <_IO_stdin_used@@Base+0x889>
  40476b:	call   403190 <__assert_fail@plt>

0000000000404770 <flatcc_builder_exit_user_frame_at@@Base>:
  404770:	endbr64 
  404774:	cmp    QWORD PTR [rdi+0x178],rsi
  40477b:	jb     404789 <flatcc_builder_exit_user_frame_at@@Base+0x19>
  40477d:	mov    QWORD PTR [rdi+0x178],rsi
  404784:	jmp    404720 <flatcc_builder_exit_user_frame@@Base>
  404789:	push   rax
  40478a:	lea    rcx,[rip+0x57af]        # 409f40 <_IO_stdin_used@@Base+0xf40>
  404791:	mov    edx,0x227
  404796:	lea    rsi,[rip+0x4d33]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  40479d:	lea    rdi,[rip+0x4d8c]        # 409530 <_IO_stdin_used@@Base+0x530>
  4047a4:	call   403190 <__assert_fail@plt>
  4047a9:	nop    DWORD PTR [rax+0x0]

00000000004047b0 <flatcc_builder_get_current_user_frame@@Base>:
  4047b0:	endbr64 
  4047b4:	mov    rax,QWORD PTR [rdi+0x178]
  4047bb:	ret    
  4047bc:	nop    DWORD PTR [rax+0x0]

00000000004047c0 <flatcc_builder_get_user_frame_ptr@@Base>:
  4047c0:	endbr64 
  4047c4:	mov    eax,esi
  4047c6:	add    rax,QWORD PTR [rdi+0xc8]
  4047cd:	ret    
  4047ce:	xchg   ax,ax

00000000004047d0 <flatcc_builder_embed_buffer@@Base>:
  4047d0:	endbr64 
  4047d4:	push   r13
  4047d6:	mov    r13d,r9d
  4047d9:	push   r12
  4047db:	mov    r12,rcx
  4047de:	push   rbp
  4047df:	mov    rbp,rdx
  4047e2:	movzx  edx,si
  4047e5:	push   rbx
  4047e6:	mov    rbx,rdi
  4047e9:	sub    rsp,0xc8
  4047f0:	mov    WORD PTR [rsp+0xc],r8w
  4047f6:	mov    r8d,DWORD PTR [rdi+0x100]
  4047fd:	mov    rax,QWORD PTR fs:0x28
  404806:	mov    QWORD PTR [rsp+0xb8],rax
  40480e:	xor    eax,eax
  404810:	test   r8d,r8d
  404813:	setne  cl
  404816:	lea    rax,[rsp+0xc]
  40481b:	movzx  ecx,cl
  40481e:	mov    rsi,rax
  404821:	call   403e00 <flatcc_builder_default_alloc@@Base+0x190>
  404826:	test   eax,eax
  404828:	jne    404960 <flatcc_builder_embed_buffer@@Base+0x190>
  40482e:	mov    edx,DWORD PTR [rbx+0xf0]
  404834:	xor    esi,esi
  404836:	and    r13d,0x2
  40483a:	setne  sil
  40483e:	movzx  ecx,WORD PTR [rsp+0xc]
  404843:	mov    eax,edx
  404845:	shl    esi,0x2
  404848:	sub    eax,r12d
  40484b:	dec    ecx
  40484d:	sub    eax,esi
  40484f:	and    eax,ecx
  404851:	lea    ecx,[rax+r12*1]
  404855:	mov    DWORD PTR [rsp+0x1c],ecx
  404859:	mov    ecx,DWORD PTR [rbx+0x100]
  40485f:	mov    QWORD PTR [rsp+0x20],0x0
  404868:	mov    DWORD PTR [rsp+0x28],0x0
  404870:	xor    r8d,r8d
  404873:	test   ecx,ecx
  404875:	je     4048a1 <flatcc_builder_embed_buffer@@Base+0xd1>
  404877:	lea    rcx,[rsp+0x1c]
  40487c:	mov    QWORD PTR [rsp+0x20],0x4
  404885:	mov    QWORD PTR [rsp+0x30],rcx
  40488a:	mov    QWORD PTR [rsp+0x38],0x4
  404893:	mov    DWORD PTR [rsp+0x28],0x1
  40489b:	mov    r8d,0x4
  4048a1:	test   r12,r12
  4048a4:	je     4048ca <flatcc_builder_embed_buffer@@Base+0xfa>
  4048a6:	movsxd rsi,DWORD PTR [rsp+0x28]
  4048ab:	add    r8,r12
  4048ae:	mov    rcx,rsi
  4048b1:	inc    ecx
  4048b3:	shl    rsi,0x4
  4048b7:	mov    QWORD PTR [rsp+0x20],r8
  4048bc:	mov    QWORD PTR [rsp+rsi*1+0x30],rbp
  4048c1:	mov    QWORD PTR [rsp+rsi*1+0x38],r12
  4048c6:	mov    DWORD PTR [rsp+0x28],ecx
  4048ca:	test   eax,eax
  4048cc:	jne    404930 <flatcc_builder_embed_buffer@@Base+0x160>
  4048ce:	mov    ebp,edx
  4048d0:	sub    ebp,r8d
  4048d3:	cmp    edx,ebp
  4048d5:	jle    404964 <flatcc_builder_embed_buffer@@Base+0x194>
  4048db:	movabs rax,0x10000000f
  4048e5:	cmp    r8,rax
  4048e8:	ja     404964 <flatcc_builder_embed_buffer@@Base+0x194>
  4048ea:	mov    rdi,QWORD PTR [rbx+0x38]
  4048ee:	mov    edx,DWORD PTR [rsp+0x28]
  4048f2:	lea    rsi,[rsp+0x30]
  4048f7:	mov    ecx,ebp
  4048f9:	call   QWORD PTR [rbx+0x48]
  4048fc:	test   eax,eax
  4048fe:	jne    404988 <flatcc_builder_embed_buffer@@Base+0x1b8>
  404904:	mov    DWORD PTR [rbx+0xf0],ebp
  40490a:	mov    rdi,QWORD PTR [rsp+0xb8]
  404912:	xor    rdi,QWORD PTR fs:0x28
  40491b:	mov    eax,ebp
  40491d:	jne    404983 <flatcc_builder_embed_buffer@@Base+0x1b3>
  40491f:	add    rsp,0xc8
  404926:	pop    rbx
  404927:	pop    rbp
  404928:	pop    r12
  40492a:	pop    r13
  40492c:	ret    
  40492d:	nop    DWORD PTR [rax]
  404930:	movsxd rsi,DWORD PTR [rsp+0x28]
  404935:	mov    rdi,0x409fc0
  40493c:	mov    rcx,rsi
  40493f:	add    r8,rax
  404942:	shl    rsi,0x4
  404946:	inc    ecx
  404948:	mov    QWORD PTR [rsp+0x20],r8
  40494d:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  404952:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  404957:	mov    DWORD PTR [rsp+0x28],ecx
  40495b:	jmp    4048ce <flatcc_builder_embed_buffer@@Base+0xfe>
  404960:	xor    ebp,ebp
  404962:	jmp    40490a <flatcc_builder_embed_buffer@@Base+0x13a>
  404964:	lea    rcx,[rip+0x55a5]        # 409f10 <_IO_stdin_used@@Base+0xf10>
  40496b:	mov    edx,0x287
  404970:	lea    rsi,[rip+0x4b59]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  404977:	lea    rdi,[rip+0x4ee9]        # 409867 <_IO_stdin_used@@Base+0x867>
  40497e:	call   403190 <__assert_fail@plt>
  404983:	call   403170 <__stack_chk_fail@plt>
  404988:	call   403f40 <flatcc_builder_default_alloc@@Base+0x2d0>
  40498d:	nop    DWORD PTR [rax]

0000000000404990 <flatcc_builder_create_buffer@@Base>:
  404990:	endbr64 
  404994:	push   r14
  404996:	movzx  edx,dx
  404999:	mov    r14,rsi
  40499c:	push   r13
  40499e:	mov    r13d,r9d
  4049a1:	push   r12
  4049a3:	mov    r12d,r9d
  4049a6:	and    r12d,0x1
  4049aa:	push   rbp
  4049ab:	mov    rbp,rdi
  4049ae:	push   rbx
  4049af:	mov    ebx,ecx
  4049b1:	mov    ecx,r12d
  4049b4:	sub    rsp,0xc0
  4049bb:	mov    WORD PTR [rsp+0xc],r8w
  4049c1:	lea    rsi,[rsp+0xc]
  4049c6:	mov    rax,QWORD PTR fs:0x28
  4049cf:	mov    QWORD PTR [rsp+0xb8],rax
  4049d7:	xor    eax,eax
  4049d9:	mov    DWORD PTR [rsp+0x1c],0x0
  4049e1:	call   403e00 <flatcc_builder_default_alloc@@Base+0x190>
  4049e6:	test   eax,eax
  4049e8:	jne    404b88 <flatcc_builder_create_buffer@@Base+0x1f8>
  4049ee:	movzx  esi,WORD PTR [rsp+0xc]
  4049f3:	cmp    si,WORD PTR [rbp+0xe8]
  4049fa:	jbe    404a03 <flatcc_builder_create_buffer@@Base+0x73>
  4049fc:	mov    WORD PTR [rbp+0xe8],si
  404a03:	mov    edx,DWORD PTR [rsp+0x1c]
  404a07:	test   r14,r14
  404a0a:	je     404a13 <flatcc_builder_create_buffer@@Base+0x83>
  404a0c:	mov    edx,DWORD PTR [r14]
  404a0f:	mov    DWORD PTR [rsp+0x1c],edx
  404a13:	test   edx,edx
  404a15:	mov    eax,0x4
  404a1a:	mov    ecx,DWORD PTR [rbp+0xf0]
  404a20:	cmovne rdx,rax
  404a24:	xor    edi,edi
  404a26:	test   r13b,0x2
  404a2a:	setne  dil
  404a2e:	lea    eax,[rcx-0x4]
  404a31:	shl    edi,0x2
  404a34:	sub    eax,edx
  404a36:	sub    eax,edi
  404a38:	dec    esi
  404a3a:	and    eax,esi
  404a3c:	and    r13d,0x3
  404a40:	jne    404b58 <flatcc_builder_create_buffer@@Base+0x1c8>
  404a46:	xor    r9d,r9d
  404a49:	mov    esi,0x1
  404a4e:	mov    r8d,0x4
  404a54:	movsxd rdi,r9d
  404a57:	shl    rdi,0x4
  404a5b:	lea    r10,[rsp+0x14]
  404a60:	mov    QWORD PTR [rsp+0x20],r8
  404a65:	mov    QWORD PTR [rsp+rdi*1+0x30],r10
  404a6a:	mov    QWORD PTR [rsp+rdi*1+0x38],0x4
  404a73:	mov    DWORD PTR [rsp+0x28],esi
  404a77:	test   edx,edx
  404a79:	je     404a9f <flatcc_builder_create_buffer@@Base+0x10f>
  404a7b:	shl    rsi,0x4
  404a7f:	add    r8,rdx
  404a82:	lea    rdi,[rsp+0x1c]
  404a87:	add    r9d,0x2
  404a8b:	mov    QWORD PTR [rsp+0x20],r8
  404a90:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  404a95:	mov    QWORD PTR [rsp+rsi*1+0x38],rdx
  404a9a:	mov    DWORD PTR [rsp+0x28],r9d
  404a9f:	test   eax,eax
  404aa1:	je     404ace <flatcc_builder_create_buffer@@Base+0x13e>
  404aa3:	movsxd rsi,DWORD PTR [rsp+0x28]
  404aa8:	mov    rdi,0x409fc0
  404aaf:	mov    rdx,rsi
  404ab2:	add    r8,rax
  404ab5:	shl    rsi,0x4
  404ab9:	inc    edx
  404abb:	mov    QWORD PTR [rsp+0x20],r8
  404ac0:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  404ac5:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  404aca:	mov    DWORD PTR [rsp+0x28],edx
  404ace:	mov    eax,ecx
  404ad0:	sub    eax,r8d
  404ad3:	lea    edx,[rax+0x4]
  404ad6:	test   r13d,r13d
  404ad9:	cmovne eax,edx
  404adc:	test   r12d,r12d
  404adf:	je     404b90 <flatcc_builder_create_buffer@@Base+0x200>
  404ae5:	mov    edx,DWORD PTR [rbp+0xf8]
  404aeb:	sub    edx,eax
  404aed:	sub    ebx,eax
  404aef:	mov    DWORD PTR [rsp+0x14],ebx
  404af3:	mov    ebx,ecx
  404af5:	sub    ebx,r8d
  404af8:	mov    DWORD PTR [rsp+0x18],edx
  404afc:	cmp    ecx,ebx
  404afe:	jle    404b9d <flatcc_builder_create_buffer@@Base+0x20d>
  404b04:	mov    rdi,QWORD PTR [rbp+0x38]
  404b08:	mov    edx,DWORD PTR [rsp+0x28]
  404b0c:	lea    rsi,[rsp+0x30]
  404b11:	mov    ecx,ebx
  404b13:	call   QWORD PTR [rbp+0x48]
  404b16:	test   eax,eax
  404b18:	jne    404bc1 <flatcc_builder_create_buffer@@Base+0x231>
  404b1e:	mov    DWORD PTR [rbp+0xf0],ebx
  404b24:	test   ebx,ebx
  404b26:	je     404bc6 <flatcc_builder_create_buffer@@Base+0x236>
  404b2c:	mov    rcx,QWORD PTR [rsp+0xb8]
  404b34:	xor    rcx,QWORD PTR fs:0x28
  404b3d:	mov    eax,ebx
  404b3f:	jne    404bbc <flatcc_builder_create_buffer@@Base+0x22c>
  404b41:	add    rsp,0xc0
  404b48:	pop    rbx
  404b49:	pop    rbp
  404b4a:	pop    r12
  404b4c:	pop    r13
  404b4e:	pop    r14
  404b50:	ret    
  404b51:	nop    DWORD PTR [rax+0x0]
  404b58:	lea    rsi,[rsp+0x18]
  404b5d:	mov    QWORD PTR [rsp+0x30],rsi
  404b62:	mov    QWORD PTR [rsp+0x38],0x4
  404b6b:	mov    esi,0x2
  404b70:	mov    r9d,0x1
  404b76:	mov    r8d,0x8
  404b7c:	jmp    404a54 <flatcc_builder_create_buffer@@Base+0xc4>
  404b81:	nop    DWORD PTR [rax+0x0]
  404b88:	xor    ebx,ebx
  404b8a:	jmp    404b2c <flatcc_builder_create_buffer@@Base+0x19c>
  404b8c:	nop    DWORD PTR [rax+0x0]
  404b90:	mov    edx,DWORD PTR [rbp+0xf4]
  404b96:	sub    edx,eax
  404b98:	jmp    404aed <flatcc_builder_create_buffer@@Base+0x15d>
  404b9d:	lea    rcx,[rip+0x536c]        # 409f10 <_IO_stdin_used@@Base+0xf10>
  404ba4:	mov    edx,0x287
  404ba9:	lea    rsi,[rip+0x4920]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  404bb0:	lea    rdi,[rip+0x4cb0]        # 409867 <_IO_stdin_used@@Base+0x867>
  404bb7:	call   403190 <__assert_fail@plt>
  404bbc:	call   403170 <__stack_chk_fail@plt>
  404bc1:	call   403f40 <flatcc_builder_default_alloc@@Base+0x2d0>
  404bc6:	lea    rcx,[rip+0x5323]        # 409ef0 <_IO_stdin_used@@Base+0xef0>
  404bcd:	mov    edx,0x304
  404bd2:	lea    rsi,[rip+0x48f7]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  404bd9:	lea    rdi,[rip+0x4c87]        # 409867 <_IO_stdin_used@@Base+0x867>
  404be0:	call   403190 <__assert_fail@plt>
  404be5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000404bf0 <flatcc_builder_create_struct@@Base>:
  404bf0:	endbr64 
  404bf4:	push   rbp
  404bf5:	push   rbx
  404bf6:	sub    rsp,0xa8
  404bfd:	mov    rax,QWORD PTR fs:0x28
  404c06:	mov    QWORD PTR [rsp+0x98],rax
  404c0e:	xor    eax,eax
  404c10:	test   cx,cx
  404c13:	je     404d33 <flatcc_builder_create_struct@@Base+0x143>
  404c19:	mov    r8,rdx
  404c1c:	mov    rbx,rdi
  404c1f:	movzx  edx,cx
  404c22:	cmp    cx,WORD PTR [rdi+0xe8]
  404c29:	jbe    404c32 <flatcc_builder_create_struct@@Base+0x42>
  404c2b:	mov    WORD PTR [rdi+0xe8],cx
  404c32:	mov    ecx,DWORD PTR [rbx+0xf0]
  404c38:	dec    edx
  404c3a:	mov    eax,ecx
  404c3c:	sub    eax,r8d
  404c3f:	and    eax,edx
  404c41:	mov    edx,eax
  404c43:	mov    QWORD PTR [rsp],0x0
  404c4b:	mov    DWORD PTR [rsp+0x8],0x0
  404c53:	test   r8,r8
  404c56:	jne    404ce8 <flatcc_builder_create_struct@@Base+0xf8>
  404c5c:	test   eax,eax
  404c5e:	je     404d14 <flatcc_builder_create_struct@@Base+0x124>
  404c64:	mov    r8,rdx
  404c67:	mov    esi,0x1
  404c6c:	xor    eax,eax
  404c6e:	mov    rdi,0x409fc0
  404c75:	shl    rax,0x4
  404c79:	mov    QWORD PTR [rsp],r8
  404c7d:	mov    QWORD PTR [rsp+rax*1+0x10],rdi
  404c82:	mov    QWORD PTR [rsp+rax*1+0x18],rdx
  404c87:	mov    DWORD PTR [rsp+0x8],esi
  404c8b:	mov    ebp,ecx
  404c8d:	movabs rax,0x10000000f
  404c97:	sub    ebp,r8d
  404c9a:	cmp    r8,rax
  404c9d:	ja     404d14 <flatcc_builder_create_struct@@Base+0x124>
  404c9f:	cmp    ecx,ebp
  404ca1:	jle    404d14 <flatcc_builder_create_struct@@Base+0x124>
  404ca3:	mov    rdi,QWORD PTR [rbx+0x38]
  404ca7:	mov    edx,DWORD PTR [rsp+0x8]
  404cab:	lea    rsi,[rsp+0x10]
  404cb0:	mov    ecx,ebp
  404cb2:	call   QWORD PTR [rbx+0x48]
  404cb5:	test   eax,eax
  404cb7:	jne    404d52 <flatcc_builder_create_struct@@Base+0x162>
  404cbd:	mov    DWORD PTR [rbx+0xf0],ebp
  404cc3:	mov    eax,ebp
  404cc5:	mov    rdi,QWORD PTR [rsp+0x98]
  404ccd:	xor    rdi,QWORD PTR fs:0x28
  404cd6:	jne    404d57 <flatcc_builder_create_struct@@Base+0x167>
  404cd8:	add    rsp,0xa8
  404cdf:	pop    rbx
  404ce0:	pop    rbp
  404ce1:	ret    
  404ce2:	nop    WORD PTR [rax+rax*1+0x0]
  404ce8:	mov    QWORD PTR [rsp],r8
  404cec:	mov    QWORD PTR [rsp+0x10],rsi
  404cf1:	mov    QWORD PTR [rsp+0x18],r8
  404cf6:	mov    DWORD PTR [rsp+0x8],0x1
  404cfe:	test   eax,eax
  404d00:	je     404c8b <flatcc_builder_create_struct@@Base+0x9b>
  404d02:	add    r8,rdx
  404d05:	mov    esi,0x2
  404d0a:	mov    eax,0x1
  404d0f:	jmp    404c6e <flatcc_builder_create_struct@@Base+0x7e>
  404d14:	lea    rcx,[rip+0x51f5]        # 409f10 <_IO_stdin_used@@Base+0xf10>
  404d1b:	mov    edx,0x287
  404d20:	lea    rsi,[rip+0x47a9]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  404d27:	lea    rdi,[rip+0x4b39]        # 409867 <_IO_stdin_used@@Base+0x867>
  404d2e:	call   403190 <__assert_fail@plt>
  404d33:	lea    rcx,[rip+0x5196]        # 409ed0 <_IO_stdin_used@@Base+0xed0>
  404d3a:	mov    edx,0x30f
  404d3f:	lea    rsi,[rip+0x478a]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  404d46:	lea    rdi,[rip+0x4b55]        # 4098a2 <_IO_stdin_used@@Base+0x8a2>
  404d4d:	call   403190 <__assert_fail@plt>
  404d52:	call   403f40 <flatcc_builder_default_alloc@@Base+0x2d0>
  404d57:	call   403170 <__stack_chk_fail@plt>
  404d5c:	nop    DWORD PTR [rax+0x0]

0000000000404d60 <flatcc_builder_start_buffer@@Base>:
  404d60:	endbr64 
  404d64:	push   r13
  404d66:	mov    r13d,edx
  404d69:	push   r12
  404d6b:	mov    r12d,ecx
  404d6e:	push   rbp
  404d6f:	mov    rbp,rsi
  404d72:	push   rbx
  404d73:	mov    rbx,rdi
  404d76:	sub    rsp,0x8
  404d7a:	movzx  esi,WORD PTR [rdi+0xe8]
  404d81:	call   403fa0 <flatcc_builder_default_alloc@@Base+0x330>
  404d86:	test   eax,eax
  404d88:	jne    404e38 <flatcc_builder_start_buffer@@Base+0xd8>
  404d8e:	movzx  edx,WORD PTR [rbx+0xec]
  404d95:	mov    rsi,QWORD PTR [rbx+0x30]
  404d99:	mov    ecx,0x1
  404d9e:	mov    WORD PTR [rbx+0xe8],cx
  404da5:	mov    WORD PTR [rsi+0x22],dx
  404da9:	movzx  edx,WORD PTR [rbx+0x10c]
  404db0:	mov    WORD PTR [rbx+0xec],r13w
  404db8:	mov    WORD PTR [rsi+0x20],dx
  404dbc:	mov    edx,DWORD PTR [rbx+0xf8]
  404dc2:	mov    WORD PTR [rbx+0x10c],r12w
  404dca:	mov    DWORD PTR [rsi+0x14],edx
  404dcd:	mov    edx,DWORD PTR [rbx+0x100]
  404dd3:	mov    DWORD PTR [rsi+0x1c],edx
  404dd6:	mov    edx,DWORD PTR [rbx+0xf0]
  404ddc:	mov    DWORD PTR [rbx+0xf8],edx
  404de2:	mov    edx,DWORD PTR [rbx+0xfc]
  404de8:	lea    ecx,[rdx+0x1]
  404deb:	mov    DWORD PTR [rbx+0x100],edx
  404df1:	mov    edx,DWORD PTR [rbx+0x110]
  404df7:	mov    DWORD PTR [rbx+0xfc],ecx
  404dfd:	mov    DWORD PTR [rsi+0x10],edx
  404e00:	test   rbp,rbp
  404e03:	je     404e28 <flatcc_builder_start_buffer@@Base+0xc8>
  404e05:	mov    edx,DWORD PTR [rbp+0x0]
  404e08:	mov    DWORD PTR [rbx+0x110],edx
  404e0e:	mov    edx,0x1
  404e13:	mov    WORD PTR [rsi+0xe],dx
  404e17:	add    rsp,0x8
  404e1b:	pop    rbx
  404e1c:	pop    rbp
  404e1d:	pop    r12
  404e1f:	pop    r13
  404e21:	ret    
  404e22:	nop    WORD PTR [rax+rax*1+0x0]
  404e28:	mov    rbp,0x409fc0
  404e2f:	jmp    404e05 <flatcc_builder_start_buffer@@Base+0xa5>
  404e31:	nop    DWORD PTR [rax+0x0]
  404e38:	mov    eax,0xffffffff
  404e3d:	jmp    404e17 <flatcc_builder_start_buffer@@Base+0xb7>
  404e3f:	nop

0000000000404e40 <flatcc_builder_end_buffer@@Base>:
  404e40:	endbr64 
  404e44:	push   rbp
  404e45:	xor    eax,eax
  404e47:	push   rbx
  404e48:	sub    rsp,0x8
  404e4c:	movzx  r9d,WORD PTR [rdi+0x10c]
  404e54:	mov    edx,DWORD PTR [rdi+0x100]
  404e5a:	and    r9d,0x2
  404e5e:	test   edx,edx
  404e60:	setne  al
  404e63:	movzx  r9d,r9w
  404e67:	or     r9d,eax
  404e6a:	mov    rax,QWORD PTR [rdi+0x30]
  404e6e:	cmp    WORD PTR [rax+0xe],0x1
  404e73:	jne    404f64 <flatcc_builder_end_buffer@@Base+0x124>
  404e79:	movzx  edx,WORD PTR [rdi+0xec]
  404e80:	movzx  eax,WORD PTR [rdi+0xe8]
  404e87:	mov    rbx,rdi
  404e8a:	mov    ecx,esi
  404e8c:	mov    r8d,edx
  404e8f:	cmp    dx,ax
  404e92:	ja     404f58 <flatcc_builder_end_buffer@@Base+0x118>
  404e98:	movzx  r8d,ax
  404e9c:	lea    rsi,[rbx+0x110]
  404ea3:	mov    rdi,rbx
  404ea6:	call   404990 <flatcc_builder_create_buffer@@Base>
  404eab:	mov    ebp,eax
  404ead:	test   eax,eax
  404eaf:	je     404f4c <flatcc_builder_end_buffer@@Base+0x10c>
  404eb5:	mov    rax,QWORD PTR [rbx+0x30]
  404eb9:	mov    rdi,QWORD PTR [rbx+0x18]
  404ebd:	mov    edx,DWORD PTR [rax+0x14]
  404ec0:	xor    esi,esi
  404ec2:	mov    DWORD PTR [rbx+0xf8],edx
  404ec8:	mov    edx,DWORD PTR [rax+0x1c]
  404ecb:	mov    DWORD PTR [rbx+0x100],edx
  404ed1:	mov    edx,DWORD PTR [rax+0x10]
  404ed4:	movzx  eax,WORD PTR [rax+0x20]
  404ed8:	mov    DWORD PTR [rbx+0x110],edx
  404ede:	mov    WORD PTR [rbx+0x10c],ax
  404ee5:	mov    edx,DWORD PTR [rbx+0x20]
  404ee8:	call   4031a0 <memset@plt>
  404eed:	mov    rax,QWORD PTR [rbx+0x30]
  404ef1:	mov    edi,DWORD PTR [rbx+0x70]
  404ef4:	mov    edx,DWORD PTR [rax+0x8]
  404ef7:	mov    esi,DWORD PTR [rax]
  404ef9:	mov    ecx,DWORD PTR [rax+0x4]
  404efc:	mov    DWORD PTR [rbx+0x20],edx
  404eff:	mov    rdx,rsi
  404f02:	sub    edi,edx
  404f04:	mov    DWORD PTR [rbx+0x28],esi
  404f07:	mov    edx,edi
  404f09:	add    rsi,QWORD PTR [rbx+0x68]
  404f0d:	cmp    ecx,edi
  404f0f:	cmovb  edx,ecx
  404f12:	mov    QWORD PTR [rbx+0x18],rsi
  404f16:	mov    DWORD PTR [rbx+0x24],edx
  404f19:	movzx  edx,WORD PTR [rbx+0xea]
  404f20:	mov    DWORD PTR [rax+0x4],ecx
  404f23:	cmp    dx,WORD PTR [rbx+0xe8]
  404f2a:	jbe    404f33 <flatcc_builder_end_buffer@@Base+0xf3>
  404f2c:	mov    WORD PTR [rbx+0xe8],dx
  404f33:	movzx  edx,WORD PTR [rax+0xc]
  404f37:	sub    rax,0x24
  404f3b:	dec    DWORD PTR [rbx+0x104]
  404f41:	mov    WORD PTR [rbx+0xea],dx
  404f48:	mov    QWORD PTR [rbx+0x30],rax
  404f4c:	add    rsp,0x8
  404f50:	pop    rbx
  404f51:	mov    eax,ebp
  404f53:	pop    rbp
  404f54:	ret    
  404f55:	nop    DWORD PTR [rax]
  404f58:	mov    WORD PTR [rbx+0xe8],dx
  404f5f:	jmp    404e9c <flatcc_builder_end_buffer@@Base+0x5c>
  404f64:	lea    rcx,[rip+0x4f45]        # 409eb0 <_IO_stdin_used@@Base+0xeb0>
  404f6b:	mov    edx,0x346
  404f70:	lea    rsi,[rip+0x4559]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  404f77:	lea    rdi,[rip+0x45d2]        # 409550 <_IO_stdin_used@@Base+0x550>
  404f7e:	call   403190 <__assert_fail@plt>
  404f83:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404f8e:	xchg   ax,ax

0000000000404f90 <flatcc_builder_start_struct@@Base>:
  404f90:	endbr64 
  404f94:	push   r12
  404f96:	push   rbp
  404f97:	mov    rbp,rsi
  404f9a:	movzx  esi,dx
  404f9d:	push   rbx
  404f9e:	mov    rbx,rdi
  404fa1:	call   403fa0 <flatcc_builder_default_alloc@@Base+0x330>
  404fa6:	test   eax,eax
  404fa8:	jne    405030 <flatcc_builder_start_struct@@Base+0xa0>
  404fae:	mov    rcx,QWORD PTR [rbx+0x30]
  404fb2:	mov    eax,0x2
  404fb7:	mov    WORD PTR [rcx+0xe],ax
  404fbb:	mov    eax,DWORD PTR [rbx+0x28]
  404fbe:	mov    edi,DWORD PTR [rbx+0x70]
  404fc1:	mov    rdx,rax
  404fc4:	sub    edi,edx
  404fc6:	add    rax,QWORD PTR [rbx+0x68]
  404fca:	mov    QWORD PTR [rbx+0x18],rax
  404fce:	mov    edx,edi
  404fd0:	cmp    edi,0xfffffffc
  404fd3:	ja     405000 <flatcc_builder_start_struct@@Base+0x70>
  404fd5:	mov    DWORD PTR [rbx+0x24],edi
  404fd8:	mov    r12d,DWORD PTR [rbx+0x20]
  404fdc:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404fe3:	mov    rsi,r12
  404fe6:	add    esi,ebp
  404fe8:	mov    DWORD PTR [rbx+0x20],esi
  404feb:	cmp    esi,edx
  404fed:	jae    405010 <flatcc_builder_start_struct@@Base+0x80>
  404fef:	pop    rbx
  404ff0:	pop    rbp
  404ff1:	add    rax,r12
  404ff4:	pop    r12
  404ff6:	ret    
  404ff7:	nop    WORD PTR [rax+rax*1+0x0]
  405000:	mov    DWORD PTR [rbx+0x24],0xfffffffc
  405007:	mov    edx,0xfffffffc
  40500c:	jmp    404fd8 <flatcc_builder_start_struct@@Base+0x48>
  40500e:	xchg   ax,ax
  405010:	inc    esi
  405012:	mov    edx,0xfffffffc
  405017:	mov    rdi,rbx
  40501a:	call   403c10 <_start@@Base+0x3b0>
  40501f:	test   eax,eax
  405021:	jne    405030 <flatcc_builder_start_struct@@Base+0xa0>
  405023:	mov    rax,QWORD PTR [rbx+0x18]
  405027:	jmp    404fef <flatcc_builder_start_struct@@Base+0x5f>
  405029:	nop    DWORD PTR [rax+0x0]
  405030:	pop    rbx
  405031:	pop    rbp
  405032:	xor    eax,eax
  405034:	pop    r12
  405036:	ret    
  405037:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405040 <flatcc_builder_struct_edit@@Base>:
  405040:	endbr64 
  405044:	mov    rax,QWORD PTR [rdi+0x18]
  405048:	ret    
  405049:	nop    DWORD PTR [rax+0x0]

0000000000405050 <flatcc_builder_end_struct@@Base>:
  405050:	endbr64 
  405054:	push   rbp
  405055:	push   rbx
  405056:	sub    rsp,0x8
  40505a:	mov    rax,QWORD PTR [rdi+0x30]
  40505e:	cmp    WORD PTR [rax+0xe],0x2
  405063:	jne    405106 <flatcc_builder_end_struct@@Base+0xb6>
  405069:	movzx  ecx,WORD PTR [rdi+0xea]
  405070:	mov    edx,DWORD PTR [rdi+0x20]
  405073:	mov    rsi,QWORD PTR [rdi+0x18]
  405077:	mov    rbx,rdi
  40507a:	call   404bf0 <flatcc_builder_create_struct@@Base>
  40507f:	mov    ebp,eax
  405081:	test   eax,eax
  405083:	jne    405090 <flatcc_builder_end_struct@@Base+0x40>
  405085:	add    rsp,0x8
  405089:	pop    rbx
  40508a:	mov    eax,ebp
  40508c:	pop    rbp
  40508d:	ret    
  40508e:	xchg   ax,ax
  405090:	mov    edx,DWORD PTR [rbx+0x20]
  405093:	mov    rdi,QWORD PTR [rbx+0x18]
  405097:	xor    esi,esi
  405099:	call   4031a0 <memset@plt>
  40509e:	mov    rax,QWORD PTR [rbx+0x30]
  4050a2:	mov    edi,DWORD PTR [rbx+0x70]
  4050a5:	mov    edx,DWORD PTR [rax+0x8]
  4050a8:	mov    esi,DWORD PTR [rax]
  4050aa:	mov    ecx,DWORD PTR [rax+0x4]
  4050ad:	mov    DWORD PTR [rbx+0x20],edx
  4050b0:	mov    rdx,rsi
  4050b3:	sub    edi,edx
  4050b5:	mov    DWORD PTR [rbx+0x28],esi
  4050b8:	mov    edx,edi
  4050ba:	add    rsi,QWORD PTR [rbx+0x68]
  4050be:	cmp    ecx,edi
  4050c0:	cmovb  edx,ecx
  4050c3:	mov    QWORD PTR [rbx+0x18],rsi
  4050c7:	mov    DWORD PTR [rbx+0x24],edx
  4050ca:	movzx  edx,WORD PTR [rbx+0xea]
  4050d1:	mov    DWORD PTR [rax+0x4],ecx
  4050d4:	cmp    dx,WORD PTR [rbx+0xe8]
  4050db:	jbe    4050e4 <flatcc_builder_end_struct@@Base+0x94>
  4050dd:	mov    WORD PTR [rbx+0xe8],dx
  4050e4:	movzx  edx,WORD PTR [rax+0xc]
  4050e8:	dec    DWORD PTR [rbx+0x104]
  4050ee:	sub    rax,0x24
  4050f2:	mov    QWORD PTR [rbx+0x30],rax
  4050f6:	mov    WORD PTR [rbx+0xea],dx
  4050fd:	add    rsp,0x8
  405101:	mov    eax,ebp
  405103:	pop    rbx
  405104:	pop    rbp
  405105:	ret    
  405106:	lea    rcx,[rip+0x4d83]        # 409e90 <_IO_stdin_used@@Base+0xe90>
  40510d:	mov    edx,0x368
  405112:	lea    rsi,[rip+0x43b7]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  405119:	lea    rdi,[rip+0x4460]        # 409580 <_IO_stdin_used@@Base+0x580>
  405120:	call   403190 <__assert_fail@plt>
  405125:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000405130 <flatcc_builder_extend_vector@@Base>:
  405130:	endbr64 
  405134:	push   rbp
  405135:	mov    eax,esi
  405137:	push   rbx
  405138:	sub    rsp,0x8
  40513c:	mov    rdx,QWORD PTR [rdi+0x30]
  405140:	add    eax,DWORD PTR [rdx+0x14]
  405143:	setb   cl
  405146:	cmp    DWORD PTR [rdx+0x18],eax
  405149:	jb     405194 <flatcc_builder_extend_vector@@Base+0x64>
  40514b:	movzx  ecx,cl
  40514e:	test   ecx,ecx
  405150:	jne    405194 <flatcc_builder_extend_vector@@Base+0x64>
  405152:	imul   esi,DWORD PTR [rdx+0x10]
  405156:	mov    ebp,DWORD PTR [rdi+0x20]
  405159:	mov    DWORD PTR [rdx+0x14],eax
  40515c:	add    esi,ebp
  40515e:	mov    rbx,rdi
  405161:	mov    DWORD PTR [rdi+0x20],esi
  405164:	cmp    esi,DWORD PTR [rdi+0x24]
  405167:	jae    405180 <flatcc_builder_extend_vector@@Base+0x50>
  405169:	mov    rax,QWORD PTR [rbx+0x18]
  40516d:	add    rax,rbp
  405170:	add    rsp,0x8
  405174:	pop    rbx
  405175:	pop    rbp
  405176:	ret    
  405177:	nop    WORD PTR [rax+rax*1+0x0]
  405180:	inc    esi
  405182:	mov    edx,0xfffffffc
  405187:	call   403c10 <_start@@Base+0x3b0>
  40518c:	test   eax,eax
  40518e:	je     405169 <flatcc_builder_extend_vector@@Base+0x39>
  405190:	xor    eax,eax
  405192:	jmp    405170 <flatcc_builder_extend_vector@@Base+0x40>
  405194:	call   403f70 <flatcc_builder_default_alloc@@Base+0x300>
  405199:	nop    DWORD PTR [rax+0x0]

00000000004051a0 <flatcc_builder_vector_push@@Base>:
  4051a0:	endbr64 
  4051a4:	push   r13
  4051a6:	push   r12
  4051a8:	push   rbp
  4051a9:	push   rbx
  4051aa:	sub    rsp,0x8
  4051ae:	mov    rax,QWORD PTR [rdi+0x30]
  4051b2:	cmp    WORD PTR [rax+0xe],0x4
  4051b7:	jne    40521d <flatcc_builder_vector_push@@Base+0x7d>
  4051b9:	mov    edx,DWORD PTR [rax+0x14]
  4051bc:	cmp    edx,DWORD PTR [rax+0x18]
  4051bf:	ja     40523c <flatcc_builder_vector_push@@Base+0x9c>
  4051c1:	mov    ebp,DWORD PTR [rdi+0x20]
  4051c4:	mov    r12d,DWORD PTR [rax+0x10]
  4051c8:	mov    rcx,rbp
  4051cb:	inc    edx
  4051cd:	add    ecx,r12d
  4051d0:	mov    DWORD PTR [rax+0x14],edx
  4051d3:	mov    rbx,rdi
  4051d6:	mov    r13,rsi
  4051d9:	mov    DWORD PTR [rdi+0x20],ecx
  4051dc:	cmp    ecx,DWORD PTR [rdi+0x24]
  4051df:	jae    405208 <flatcc_builder_vector_push@@Base+0x68>
  4051e1:	add    rbp,QWORD PTR [rbx+0x18]
  4051e5:	je     4051f5 <flatcc_builder_vector_push@@Base+0x55>
  4051e7:	mov    edx,r12d
  4051ea:	mov    rsi,r13
  4051ed:	mov    rdi,rbp
  4051f0:	call   4031e0 <memcpy@plt>
  4051f5:	add    rsp,0x8
  4051f9:	pop    rbx
  4051fa:	mov    rax,rbp
  4051fd:	pop    rbp
  4051fe:	pop    r12
  405200:	pop    r13
  405202:	ret    
  405203:	nop    DWORD PTR [rax+rax*1+0x0]
  405208:	lea    esi,[rcx+0x1]
  40520b:	mov    edx,0xfffffffc
  405210:	call   403c10 <_start@@Base+0x3b0>
  405215:	test   eax,eax
  405217:	je     4051e1 <flatcc_builder_vector_push@@Base+0x41>
  405219:	xor    ebp,ebp
  40521b:	jmp    4051f5 <flatcc_builder_vector_push@@Base+0x55>
  40521d:	lea    rcx,[rip+0x4c2c]        # 409e50 <_IO_stdin_used@@Base+0xe50>
  405224:	mov    edx,0x38b
  405229:	lea    rsi,[rip+0x42a0]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  405230:	lea    rdi,[rip+0x4379]        # 4095b0 <_IO_stdin_used@@Base+0x5b0>
  405237:	call   403190 <__assert_fail@plt>
  40523c:	lea    rcx,[rip+0x4c0d]        # 409e50 <_IO_stdin_used@@Base+0xe50>
  405243:	mov    edx,0x38c
  405248:	lea    rsi,[rip+0x4281]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  40524f:	lea    rdi,[rip+0x438a]        # 4095e0 <_IO_stdin_used@@Base+0x5e0>
  405256:	call   403190 <__assert_fail@plt>
  40525b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405260 <flatcc_builder_append_vector@@Base>:
  405260:	endbr64 
  405264:	push   r13
  405266:	push   r12
  405268:	push   rbp
  405269:	push   rbx
  40526a:	sub    rsp,0x8
  40526e:	mov    rax,QWORD PTR [rdi+0x30]
  405272:	cmp    WORD PTR [rax+0xe],0x4
  405277:	jne    4052e6 <flatcc_builder_append_vector@@Base+0x86>
  405279:	mov    ecx,edx
  40527b:	mov    r13,rsi
  40527e:	xor    esi,esi
  405280:	add    ecx,DWORD PTR [rax+0x14]
  405283:	setb   sil
  405287:	cmp    DWORD PTR [rax+0x18],ecx
  40528a:	jb     405305 <flatcc_builder_append_vector@@Base+0xa5>
  40528c:	test   esi,esi
  40528e:	jne    405305 <flatcc_builder_append_vector@@Base+0xa5>
  405290:	mov    ebx,DWORD PTR [rax+0x10]
  405293:	mov    r12d,DWORD PTR [rdi+0x20]
  405297:	imul   ebx,edx
  40529a:	mov    rdx,r12
  40529d:	mov    DWORD PTR [rax+0x14],ecx
  4052a0:	add    edx,ebx
  4052a2:	mov    rbp,rdi
  4052a5:	mov    DWORD PTR [rdi+0x20],edx
  4052a8:	cmp    edx,DWORD PTR [rdi+0x24]
  4052ab:	jae    4052d0 <flatcc_builder_append_vector@@Base+0x70>
  4052ad:	add    r12,QWORD PTR [rbp+0x18]
  4052b1:	je     4052c0 <flatcc_builder_append_vector@@Base+0x60>
  4052b3:	mov    edx,ebx
  4052b5:	mov    rsi,r13
  4052b8:	mov    rdi,r12
  4052bb:	call   4031e0 <memcpy@plt>
  4052c0:	add    rsp,0x8
  4052c4:	pop    rbx
  4052c5:	pop    rbp
  4052c6:	mov    rax,r12
  4052c9:	pop    r12
  4052cb:	pop    r13
  4052cd:	ret    
  4052ce:	xchg   ax,ax
  4052d0:	lea    esi,[rdx+0x1]
  4052d3:	mov    edx,0xfffffffc
  4052d8:	call   403c10 <_start@@Base+0x3b0>
  4052dd:	test   eax,eax
  4052df:	je     4052ad <flatcc_builder_append_vector@@Base+0x4d>
  4052e1:	xor    r12d,r12d
  4052e4:	jmp    4052c0 <flatcc_builder_append_vector@@Base+0x60>
  4052e6:	lea    rcx,[rip+0x4b43]        # 409e30 <_IO_stdin_used@@Base+0xe30>
  4052ed:	mov    edx,0x393
  4052f2:	lea    rsi,[rip+0x41d7]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4052f9:	lea    rdi,[rip+0x42b0]        # 4095b0 <_IO_stdin_used@@Base+0x5b0>
  405300:	call   403190 <__assert_fail@plt>
  405305:	call   403f70 <flatcc_builder_default_alloc@@Base+0x300>
  40530a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405310 <flatcc_builder_extend_offset_vector@@Base>:
  405310:	endbr64 
  405314:	push   rbp
  405315:	mov    edx,esi
  405317:	push   rbx
  405318:	sub    rsp,0x8
  40531c:	mov    rax,QWORD PTR [rdi+0x30]
  405320:	add    edx,DWORD PTR [rax+0x14]
  405323:	jb     405365 <flatcc_builder_extend_offset_vector@@Base+0x55>
  405325:	cmp    edx,0x3fffffff
  40532b:	ja     405365 <flatcc_builder_extend_offset_vector@@Base+0x55>
  40532d:	mov    ebp,DWORD PTR [rdi+0x20]
  405330:	mov    DWORD PTR [rax+0x14],edx
  405333:	lea    eax,[rbp+rsi*4+0x0]
  405337:	mov    rbx,rdi
  40533a:	mov    DWORD PTR [rdi+0x20],eax
  40533d:	cmp    eax,DWORD PTR [rdi+0x24]
  405340:	jae    405350 <flatcc_builder_extend_offset_vector@@Base+0x40>
  405342:	mov    rax,QWORD PTR [rbx+0x18]
  405346:	add    rax,rbp
  405349:	add    rsp,0x8
  40534d:	pop    rbx
  40534e:	pop    rbp
  40534f:	ret    
  405350:	lea    esi,[rax+0x1]
  405353:	mov    edx,0xfffffffc
  405358:	call   403c10 <_start@@Base+0x3b0>
  40535d:	test   eax,eax
  40535f:	je     405342 <flatcc_builder_extend_offset_vector@@Base+0x32>
  405361:	xor    eax,eax
  405363:	jmp    405349 <flatcc_builder_extend_offset_vector@@Base+0x39>
  405365:	call   403f70 <flatcc_builder_default_alloc@@Base+0x300>
  40536a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405370 <flatcc_builder_offset_vector_push@@Base>:
  405370:	endbr64 
  405374:	push   r12
  405376:	push   rbp
  405377:	push   rbx
  405378:	mov    rdx,QWORD PTR [rdi+0x30]
  40537c:	cmp    WORD PTR [rdx+0xe],0x5
  405381:	jne    4053d8 <flatcc_builder_offset_vector_push@@Base+0x68>
  405383:	mov    eax,DWORD PTR [rdx+0x14]
  405386:	cmp    eax,0x3fffffff
  40538b:	je     4053d1 <flatcc_builder_offset_vector_push@@Base+0x61>
  40538d:	mov    ebp,DWORD PTR [rdi+0x20]
  405390:	inc    eax
  405392:	mov    DWORD PTR [rdx+0x14],eax
  405395:	lea    edx,[rbp+0x4]
  405398:	mov    rbx,rdi
  40539b:	mov    r12d,esi
  40539e:	mov    DWORD PTR [rdi+0x20],edx
  4053a1:	cmp    edx,DWORD PTR [rdi+0x24]
  4053a4:	jae    4053c0 <flatcc_builder_offset_vector_push@@Base+0x50>
  4053a6:	mov    rax,rbp
  4053a9:	add    rax,QWORD PTR [rbx+0x18]
  4053ad:	je     4053b2 <flatcc_builder_offset_vector_push@@Base+0x42>
  4053af:	mov    DWORD PTR [rax],r12d
  4053b2:	pop    rbx
  4053b3:	pop    rbp
  4053b4:	pop    r12
  4053b6:	ret    
  4053b7:	nop    WORD PTR [rax+rax*1+0x0]
  4053c0:	lea    esi,[rbp+0x5]
  4053c3:	mov    edx,0xfffffffc
  4053c8:	call   403c10 <_start@@Base+0x3b0>
  4053cd:	test   eax,eax
  4053cf:	je     4053a6 <flatcc_builder_offset_vector_push@@Base+0x36>
  4053d1:	pop    rbx
  4053d2:	pop    rbp
  4053d3:	xor    eax,eax
  4053d5:	pop    r12
  4053d7:	ret    
  4053d8:	lea    rcx,[rip+0x4a21]        # 409e00 <_IO_stdin_used@@Base+0xe00>
  4053df:	mov    edx,0x3a6
  4053e4:	lea    rsi,[rip+0x40e5]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4053eb:	lea    rdi,[rip+0x422e]        # 409620 <_IO_stdin_used@@Base+0x620>
  4053f2:	call   403190 <__assert_fail@plt>
  4053f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405400 <flatcc_builder_append_offset_vector@@Base>:
  405400:	endbr64 
  405404:	push   r13
  405406:	push   r12
  405408:	push   rbp
  405409:	push   rbx
  40540a:	sub    rsp,0x8
  40540e:	mov    rax,QWORD PTR [rdi+0x30]
  405412:	cmp    WORD PTR [rax+0xe],0x5
  405417:	jne    405486 <flatcc_builder_append_offset_vector@@Base+0x86>
  405419:	mov    ecx,edx
  40541b:	add    ecx,DWORD PTR [rax+0x14]
  40541e:	jb     4054a5 <flatcc_builder_append_offset_vector@@Base+0xa5>
  405424:	cmp    ecx,0x3fffffff
  40542a:	ja     4054a5 <flatcc_builder_append_offset_vector@@Base+0xa5>
  40542c:	mov    r12d,DWORD PTR [rdi+0x20]
  405430:	lea    ebx,[rdx*4+0x0]
  405437:	mov    rdx,r12
  40543a:	add    edx,ebx
  40543c:	mov    DWORD PTR [rax+0x14],ecx
  40543f:	mov    rbp,rdi
  405442:	mov    r13,rsi
  405445:	mov    DWORD PTR [rdi+0x20],edx
  405448:	cmp    edx,DWORD PTR [rdi+0x24]
  40544b:	jae    405470 <flatcc_builder_append_offset_vector@@Base+0x70>
  40544d:	add    r12,QWORD PTR [rbp+0x18]
  405451:	je     405460 <flatcc_builder_append_offset_vector@@Base+0x60>
  405453:	mov    edx,ebx
  405455:	mov    rsi,r13
  405458:	mov    rdi,r12
  40545b:	call   4031e0 <memcpy@plt>
  405460:	add    rsp,0x8
  405464:	pop    rbx
  405465:	pop    rbp
  405466:	mov    rax,r12
  405469:	pop    r12
  40546b:	pop    r13
  40546d:	ret    
  40546e:	xchg   ax,ax
  405470:	lea    esi,[rdx+0x1]
  405473:	mov    edx,0xfffffffc
  405478:	call   403c10 <_start@@Base+0x3b0>
  40547d:	test   eax,eax
  40547f:	je     40544d <flatcc_builder_append_offset_vector@@Base+0x4d>
  405481:	xor    r12d,r12d
  405484:	jmp    405460 <flatcc_builder_append_offset_vector@@Base+0x60>
  405486:	lea    rcx,[rip+0x4933]        # 409dc0 <_IO_stdin_used@@Base+0xdc0>
  40548d:	mov    edx,0x3b4
  405492:	lea    rsi,[rip+0x4037]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  405499:	lea    rdi,[rip+0x4180]        # 409620 <_IO_stdin_used@@Base+0x620>
  4054a0:	call   403190 <__assert_fail@plt>
  4054a5:	call   403f70 <flatcc_builder_default_alloc@@Base+0x300>
  4054aa:	nop    WORD PTR [rax+rax*1+0x0]

00000000004054b0 <flatcc_builder_extend_string@@Base>:
  4054b0:	endbr64 
  4054b4:	push   rbp
  4054b5:	push   rbx
  4054b6:	sub    rsp,0x8
  4054ba:	mov    rax,QWORD PTR [rdi+0x30]
  4054be:	cmp    WORD PTR [rax+0xe],0x6
  4054c3:	jne    405509 <flatcc_builder_extend_string@@Base+0x59>
  4054c5:	mov    edx,esi
  4054c7:	add    edx,DWORD PTR [rax+0x14]
  4054ca:	jb     405504 <flatcc_builder_extend_string@@Base+0x54>
  4054cc:	mov    ebp,DWORD PTR [rdi+0x20]
  4054cf:	mov    DWORD PTR [rax+0x14],edx
  4054d2:	add    esi,ebp
  4054d4:	mov    rbx,rdi
  4054d7:	mov    DWORD PTR [rdi+0x20],esi
  4054da:	cmp    esi,DWORD PTR [rdi+0x24]
  4054dd:	jae    4054f0 <flatcc_builder_extend_string@@Base+0x40>
  4054df:	mov    rax,QWORD PTR [rbx+0x18]
  4054e3:	add    rax,rbp
  4054e6:	add    rsp,0x8
  4054ea:	pop    rbx
  4054eb:	pop    rbp
  4054ec:	ret    
  4054ed:	nop    DWORD PTR [rax]
  4054f0:	inc    esi
  4054f2:	mov    edx,0xfffffffc
  4054f7:	call   403c10 <_start@@Base+0x3b0>
  4054fc:	test   eax,eax
  4054fe:	je     4054df <flatcc_builder_extend_string@@Base+0x2f>
  405500:	xor    eax,eax
  405502:	jmp    4054e6 <flatcc_builder_extend_string@@Base+0x36>
  405504:	call   403f70 <flatcc_builder_default_alloc@@Base+0x300>
  405509:	lea    rcx,[rip+0x4880]        # 409d90 <_IO_stdin_used@@Base+0xd90>
  405510:	mov    edx,0x3bd
  405515:	lea    rsi,[rip+0x3fb4]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  40551c:	lea    rdi,[rip+0x4135]        # 409658 <_IO_stdin_used@@Base+0x658>
  405523:	call   403190 <__assert_fail@plt>
  405528:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405530 <flatcc_builder_append_string@@Base>:
  405530:	endbr64 
  405534:	push   r13
  405536:	push   r12
  405538:	push   rbp
  405539:	push   rbx
  40553a:	sub    rsp,0x8
  40553e:	mov    rax,QWORD PTR [rdi+0x30]
  405542:	cmp    WORD PTR [rax+0xe],0x6
  405547:	jne    4055ab <flatcc_builder_append_string@@Base+0x7b>
  405549:	mov    rbp,rdx
  40554c:	add    edx,DWORD PTR [rax+0x14]
  40554f:	jb     4055a6 <flatcc_builder_append_string@@Base+0x76>
  405551:	mov    r12d,DWORD PTR [rdi+0x20]
  405555:	mov    DWORD PTR [rax+0x14],edx
  405558:	mov    rdx,r12
  40555b:	add    edx,ebp
  40555d:	mov    rbx,rdi
  405560:	mov    r13,rsi
  405563:	mov    DWORD PTR [rdi+0x20],edx
  405566:	cmp    edx,DWORD PTR [rdi+0x24]
  405569:	jae    405590 <flatcc_builder_append_string@@Base+0x60>
  40556b:	add    r12,QWORD PTR [rbx+0x18]
  40556f:	je     40557e <flatcc_builder_append_string@@Base+0x4e>
  405571:	mov    edx,ebp
  405573:	mov    rsi,r13
  405576:	mov    rdi,r12
  405579:	call   4031e0 <memcpy@plt>
  40557e:	add    rsp,0x8
  405582:	pop    rbx
  405583:	pop    rbp
  405584:	mov    rax,r12
  405587:	pop    r12
  405589:	pop    r13
  40558b:	ret    
  40558c:	nop    DWORD PTR [rax+0x0]
  405590:	lea    esi,[rdx+0x1]
  405593:	mov    edx,0xfffffffc
  405598:	call   403c10 <_start@@Base+0x3b0>
  40559d:	test   eax,eax
  40559f:	je     40556b <flatcc_builder_append_string@@Base+0x3b>
  4055a1:	xor    r12d,r12d
  4055a4:	jmp    40557e <flatcc_builder_append_string@@Base+0x4e>
  4055a6:	call   403f70 <flatcc_builder_default_alloc@@Base+0x300>
  4055ab:	lea    rcx,[rip+0x47be]        # 409d70 <_IO_stdin_used@@Base+0xd70>
  4055b2:	mov    edx,0x3c6
  4055b7:	lea    rsi,[rip+0x3f12]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4055be:	lea    rdi,[rip+0x4093]        # 409658 <_IO_stdin_used@@Base+0x658>
  4055c5:	call   403190 <__assert_fail@plt>
  4055ca:	nop    WORD PTR [rax+rax*1+0x0]

00000000004055d0 <flatcc_builder_append_string_str@@Base>:
  4055d0:	endbr64 
  4055d4:	push   rbp
  4055d5:	mov    rbp,rdi
  4055d8:	mov    rdi,rsi
  4055db:	push   rbx
  4055dc:	mov    rbx,rsi
  4055df:	sub    rsp,0x8
  4055e3:	call   403160 <strlen@plt>
  4055e8:	add    rsp,0x8
  4055ec:	mov    rsi,rbx
  4055ef:	pop    rbx
  4055f0:	mov    rdi,rbp
  4055f3:	mov    rdx,rax
  4055f6:	pop    rbp
  4055f7:	jmp    405530 <flatcc_builder_append_string@@Base>
  4055fc:	nop    DWORD PTR [rax+0x0]

0000000000405600 <flatcc_builder_append_string_strn@@Base>:
  405600:	endbr64 
  405604:	push   r12
  405606:	mov    r12,rdi
  405609:	push   rbp
  40560a:	mov    rbp,rsi
  40560d:	mov    rdi,rbp
  405610:	push   rbx
  405611:	xor    esi,esi
  405613:	mov    rbx,rdx
  405616:	call   4031b0 <memchr@plt>
  40561b:	mov    rdx,rax
  40561e:	sub    rdx,rbp
  405621:	test   rax,rax
  405624:	cmovne rbx,rdx
  405628:	mov    rsi,rbp
  40562b:	mov    rdx,rbx
  40562e:	pop    rbx
  40562f:	pop    rbp
  405630:	mov    rdi,r12
  405633:	pop    r12
  405635:	jmp    405530 <flatcc_builder_append_string@@Base>
  40563a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405640 <flatcc_builder_truncate_vector@@Base>:
  405640:	endbr64 
  405644:	sub    rsp,0x8
  405648:	mov    rax,QWORD PTR [rdi+0x30]
  40564c:	cmp    WORD PTR [rax+0xe],0x4
  405651:	jne    405686 <flatcc_builder_truncate_vector@@Base+0x46>
  405653:	mov    ecx,DWORD PTR [rax+0x14]
  405656:	mov    rdx,rcx
  405659:	cmp    rcx,rsi
  40565c:	jb     4056a5 <flatcc_builder_truncate_vector@@Base+0x65>
  40565e:	sub    edx,esi
  405660:	mov    DWORD PTR [rax+0x14],edx
  405663:	imul   esi,DWORD PTR [rax+0x10]
  405667:	mov    eax,DWORD PTR [rdi+0x20]
  40566a:	mov    edx,esi
  40566c:	sub    eax,esi
  40566e:	mov    DWORD PTR [rdi+0x20],eax
  405671:	add    rax,QWORD PTR [rdi+0x18]
  405675:	mov    rdi,rax
  405678:	xor    esi,esi
  40567a:	call   4031a0 <memset@plt>
  40567f:	xor    eax,eax
  405681:	add    rsp,0x8
  405685:	ret    
  405686:	lea    rcx,[rip+0x46c3]        # 409d50 <_IO_stdin_used@@Base+0xd50>
  40568d:	mov    edx,0x3d9
  405692:	lea    rsi,[rip+0x3e37]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  405699:	lea    rdi,[rip+0x3f10]        # 4095b0 <_IO_stdin_used@@Base+0x5b0>
  4056a0:	call   403190 <__assert_fail@plt>
  4056a5:	lea    rcx,[rip+0x46a4]        # 409d50 <_IO_stdin_used@@Base+0xd50>
  4056ac:	mov    edx,0x3da
  4056b1:	lea    rsi,[rip+0x3e18]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4056b8:	lea    rdi,[rip+0x3fc9]        # 409688 <_IO_stdin_used@@Base+0x688>
  4056bf:	call   403190 <__assert_fail@plt>
  4056c4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4056cf:	nop

00000000004056d0 <flatcc_builder_truncate_offset_vector@@Base>:
  4056d0:	endbr64 
  4056d4:	sub    rsp,0x8
  4056d8:	mov    rax,QWORD PTR [rdi+0x30]
  4056dc:	cmp    WORD PTR [rax+0xe],0x5
  4056e1:	jne    405712 <flatcc_builder_truncate_offset_vector@@Base+0x42>
  4056e3:	mov    edx,DWORD PTR [rax+0x14]
  4056e6:	cmp    edx,esi
  4056e8:	jb     405731 <flatcc_builder_truncate_offset_vector@@Base+0x61>
  4056ea:	sub    edx,esi
  4056ec:	mov    DWORD PTR [rax+0x14],edx
  4056ef:	imul   esi,DWORD PTR [rax+0x10]
  4056f3:	mov    eax,DWORD PTR [rdi+0x20]
  4056f6:	mov    edx,esi
  4056f8:	sub    eax,esi
  4056fa:	mov    DWORD PTR [rdi+0x20],eax
  4056fd:	add    rax,QWORD PTR [rdi+0x18]
  405701:	mov    rdi,rax
  405704:	xor    esi,esi
  405706:	call   4031a0 <memset@plt>
  40570b:	xor    eax,eax
  40570d:	add    rsp,0x8
  405711:	ret    
  405712:	lea    rcx,[rip+0x4607]        # 409d20 <_IO_stdin_used@@Base+0xd20>
  405719:	mov    edx,0x3e2
  40571e:	lea    rsi,[rip+0x3dab]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  405725:	lea    rdi,[rip+0x3ef4]        # 409620 <_IO_stdin_used@@Base+0x620>
  40572c:	call   403190 <__assert_fail@plt>
  405731:	lea    rcx,[rip+0x45e8]        # 409d20 <_IO_stdin_used@@Base+0xd20>
  405738:	mov    edx,0x3e3
  40573d:	lea    rsi,[rip+0x3d8c]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  405744:	lea    rdi,[rip+0x3f65]        # 4096b0 <_IO_stdin_used@@Base+0x6b0>
  40574b:	call   403190 <__assert_fail@plt>

0000000000405750 <flatcc_builder_truncate_string@@Base>:
  405750:	endbr64 
  405754:	sub    rsp,0x8
  405758:	mov    rdx,QWORD PTR [rdi+0x30]
  40575c:	cmp    WORD PTR [rdx+0xe],0x6
  405761:	jne    405793 <flatcc_builder_truncate_string@@Base+0x43>
  405763:	mov    ecx,DWORD PTR [rdx+0x14]
  405766:	mov    rax,rcx
  405769:	cmp    rcx,rsi
  40576c:	jb     4057b2 <flatcc_builder_truncate_string@@Base+0x62>
  40576e:	sub    eax,esi
  405770:	mov    DWORD PTR [rdx+0x14],eax
  405773:	mov    rdx,rsi
  405776:	mov    eax,DWORD PTR [rdi+0x20]
  405779:	sub    eax,esi
  40577b:	mov    DWORD PTR [rdi+0x20],eax
  40577e:	add    rax,QWORD PTR [rdi+0x18]
  405782:	mov    rdi,rax
  405785:	xor    esi,esi
  405787:	call   4031a0 <memset@plt>
  40578c:	xor    eax,eax
  40578e:	add    rsp,0x8
  405792:	ret    
  405793:	lea    rcx,[rip+0x4566]        # 409d00 <_IO_stdin_used@@Base+0xd00>
  40579a:	mov    edx,0x3eb
  40579f:	lea    rsi,[rip+0x3d2a]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4057a6:	lea    rdi,[rip+0x3eab]        # 409658 <_IO_stdin_used@@Base+0x658>
  4057ad:	call   403190 <__assert_fail@plt>
  4057b2:	lea    rcx,[rip+0x4547]        # 409d00 <_IO_stdin_used@@Base+0xd00>
  4057b9:	mov    edx,0x3ec
  4057be:	lea    rsi,[rip+0x3d0b]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4057c5:	lea    rdi,[rip+0x3f24]        # 4096f0 <_IO_stdin_used@@Base+0x6f0>
  4057cc:	call   403190 <__assert_fail@plt>
  4057d1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4057dc:	nop    DWORD PTR [rax+0x0]

00000000004057e0 <flatcc_builder_start_vector@@Base>:
  4057e0:	endbr64 
  4057e4:	push   r12
  4057e6:	cmp    dx,0x4
  4057ea:	mov    r12,rcx
  4057ed:	push   rbp
  4057ee:	mov    rbp,rsi
  4057f1:	mov    esi,0x4
  4057f6:	push   rbx
  4057f7:	cmovae esi,edx
  4057fa:	mov    rbx,rdi
  4057fd:	movzx  esi,si
  405800:	call   403fa0 <flatcc_builder_default_alloc@@Base+0x330>
  405805:	test   eax,eax
  405807:	jne    405850 <flatcc_builder_start_vector@@Base+0x70>
  405809:	mov    rsi,QWORD PTR [rbx+0x30]
  40580d:	mov    edx,0x4
  405812:	mov    WORD PTR [rsi+0xe],dx
  405816:	mov    edx,DWORD PTR [rbx+0x28]
  405819:	mov    DWORD PTR [rsi+0x10],ebp
  40581c:	mov    rcx,rdx
  40581f:	add    rdx,QWORD PTR [rbx+0x68]
  405823:	mov    DWORD PTR [rsi+0x14],0x0
  40582a:	mov    DWORD PTR [rsi+0x18],r12d
  40582e:	mov    QWORD PTR [rbx+0x18],rdx
  405832:	mov    edx,DWORD PTR [rbx+0x70]
  405835:	sub    edx,ecx
  405837:	mov    ecx,0xfffffffc
  40583c:	cmp    edx,ecx
  40583e:	cmova  edx,ecx
  405841:	mov    DWORD PTR [rbx+0x24],edx
  405844:	mov    DWORD PTR [rsi+0x4],ecx
  405847:	pop    rbx
  405848:	pop    rbp
  405849:	pop    r12
  40584b:	ret    
  40584c:	nop    DWORD PTR [rax+0x0]
  405850:	mov    eax,0xffffffff
  405855:	jmp    405847 <flatcc_builder_start_vector@@Base+0x67>
  405857:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405860 <flatcc_builder_start_offset_vector@@Base>:
  405860:	endbr64 
  405864:	push   rbx
  405865:	mov    esi,0x4
  40586a:	mov    rbx,rdi
  40586d:	call   403fa0 <flatcc_builder_default_alloc@@Base+0x330>
  405872:	test   eax,eax
  405874:	jne    4058b0 <flatcc_builder_start_offset_vector@@Base+0x50>
  405876:	mov    rcx,QWORD PTR [rbx+0x30]
  40587a:	xor    edx,edx
  40587c:	mov    QWORD PTR [rcx+0xe],0x40005
  405884:	mov    WORD PTR [rcx+0x16],dx
  405888:	mov    edx,DWORD PTR [rbx+0x28]
  40588b:	mov    rsi,rdx
  40588e:	add    rdx,QWORD PTR [rbx+0x68]
  405892:	mov    QWORD PTR [rbx+0x18],rdx
  405896:	mov    edx,DWORD PTR [rbx+0x70]
  405899:	sub    edx,esi
  40589b:	mov    esi,0xfffffffc
  4058a0:	cmp    edx,esi
  4058a2:	cmova  edx,esi
  4058a5:	mov    DWORD PTR [rbx+0x24],edx
  4058a8:	mov    DWORD PTR [rcx+0x4],esi
  4058ab:	pop    rbx
  4058ac:	ret    
  4058ad:	nop    DWORD PTR [rax]
  4058b0:	mov    eax,0xffffffff
  4058b5:	pop    rbx
  4058b6:	ret    
  4058b7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004058c0 <flatcc_builder_start_string@@Base>:
  4058c0:	endbr64 
  4058c4:	push   rbx
  4058c5:	mov    esi,0x1
  4058ca:	mov    rbx,rdi
  4058cd:	call   403fa0 <flatcc_builder_default_alloc@@Base+0x330>
  4058d2:	test   eax,eax
  4058d4:	jne    405910 <flatcc_builder_start_string@@Base+0x50>
  4058d6:	mov    rcx,QWORD PTR [rbx+0x30]
  4058da:	xor    edx,edx
  4058dc:	mov    QWORD PTR [rcx+0xe],0x10006
  4058e4:	mov    WORD PTR [rcx+0x16],dx
  4058e8:	mov    edx,DWORD PTR [rbx+0x28]
  4058eb:	mov    rsi,rdx
  4058ee:	add    rdx,QWORD PTR [rbx+0x68]
  4058f2:	mov    QWORD PTR [rbx+0x18],rdx
  4058f6:	mov    edx,DWORD PTR [rbx+0x70]
  4058f9:	sub    edx,esi
  4058fb:	mov    esi,0xfffffffc
  405900:	cmp    edx,esi
  405902:	cmova  edx,esi
  405905:	mov    DWORD PTR [rbx+0x24],edx
  405908:	mov    DWORD PTR [rcx+0x4],esi
  40590b:	pop    rbx
  40590c:	ret    
  40590d:	nop    DWORD PTR [rax]
  405910:	mov    eax,0xffffffff
  405915:	pop    rbx
  405916:	ret    
  405917:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405920 <flatcc_builder_reserve_table@@Base>:
  405920:	endbr64 
  405924:	push   r12
  405926:	push   rbp
  405927:	push   rbx
  405928:	test   esi,esi
  40592a:	js     4059df <flatcc_builder_reserve_table@@Base+0xbf>
  405930:	mov    rax,QWORD PTR [rdi+0x30]
  405934:	lea    r12d,[rsi+rsi*1+0x4]
  405939:	movzx  edx,WORD PTR [rax+0x1c]
  40593d:	mov    eax,DWORD PTR [rax+0x10]
  405940:	mov    rbx,rdi
  405943:	lea    ebp,[rax+rdx*2]
  405946:	mov    edx,r12d
  405949:	add    rdx,rbp
  40594c:	cmp    rdx,QWORD PTR [rdi+0x60]
  405950:	ja     405990 <flatcc_builder_reserve_table@@Base+0x70>
  405952:	add    rbp,QWORD PTR [rbx+0x58]
  405956:	je     4059d0 <flatcc_builder_reserve_table@@Base+0xb0>
  405958:	mov    rax,QWORD PTR [rbx+0x30]
  40595c:	add    rbp,0x4
  405960:	mov    QWORD PTR [rbx+0x8],rbp
  405964:	mov    ebp,DWORD PTR [rax+0x14]
  405967:	lea    edx,[r12-0x3]
  40596c:	add    rdx,rbp
  40596f:	cmp    rdx,QWORD PTR [rbx+0x90]
  405976:	ja     4059b0 <flatcc_builder_reserve_table@@Base+0x90>
  405978:	add    rbp,QWORD PTR [rbx+0x88]
  40597f:	sete   al
  405982:	mov    QWORD PTR [rbx],rbp
  405985:	movzx  eax,al
  405988:	neg    eax
  40598a:	pop    rbx
  40598b:	pop    rbp
  40598c:	pop    r12
  40598e:	ret    
  40598f:	nop
  405990:	lea    rsi,[rdi+0x58]
  405994:	mov    rdi,QWORD PTR [rdi+0x40]
  405998:	xor    r8d,r8d
  40599b:	mov    ecx,0x1
  4059a0:	call   QWORD PTR [rbx+0x50]
  4059a3:	test   eax,eax
  4059a5:	je     405952 <flatcc_builder_reserve_table@@Base+0x32>
  4059a7:	call   403da0 <flatcc_builder_default_alloc@@Base+0x130>
  4059ac:	nop    DWORD PTR [rax+0x0]
  4059b0:	mov    rdi,QWORD PTR [rbx+0x40]
  4059b4:	xor    ecx,ecx
  4059b6:	lea    rsi,[rbx+0x88]
  4059bd:	mov    r8d,0x3
  4059c3:	call   QWORD PTR [rbx+0x50]
  4059c6:	test   eax,eax
  4059c8:	je     405978 <flatcc_builder_reserve_table@@Base+0x58>
  4059ca:	jmp    4059a7 <flatcc_builder_reserve_table@@Base+0x87>
  4059cc:	nop    DWORD PTR [rax+0x0]
  4059d0:	mov    QWORD PTR [rbx+0x8],0x0
  4059d8:	mov    eax,0xffffffff
  4059dd:	jmp    40598a <flatcc_builder_reserve_table@@Base+0x6a>
  4059df:	lea    rcx,[rip+0x42fa]        # 409ce0 <_IO_stdin_used@@Base+0xce0>
  4059e6:	mov    edx,0x429
  4059eb:	lea    rsi,[rip+0x3ade]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4059f2:	lea    rdi,[rip+0x3eca]        # 4098c3 <_IO_stdin_used@@Base+0x8c3>
  4059f9:	call   403190 <__assert_fail@plt>
  4059fe:	xchg   ax,ax

0000000000405a00 <flatcc_builder_start_table@@Base>:
  405a00:	endbr64 
  405a04:	push   r13
  405a06:	push   r12
  405a08:	mov    r12d,esi
  405a0b:	mov    esi,0x4
  405a10:	push   rbp
  405a11:	push   rbx
  405a12:	mov    rbx,rdi
  405a15:	sub    rsp,0x8
  405a19:	call   403fa0 <flatcc_builder_default_alloc@@Base+0x330>
  405a1e:	test   eax,eax
  405a20:	jne    405b38 <flatcc_builder_start_table@@Base+0x138>
  405a26:	mov    rsi,QWORD PTR [rbx]
  405a29:	mov    rdx,QWORD PTR [rbx+0x30]
  405a2d:	sub    rsi,QWORD PTR [rbx+0x88]
  405a34:	mov    rcx,QWORD PTR [rbx+0x8]
  405a38:	mov    ebp,eax
  405a3a:	mov    rax,QWORD PTR [rbx+0x58]
  405a3e:	mov    DWORD PTR [rdx+0x14],esi
  405a41:	mov    esi,DWORD PTR [rbx+0x14]
  405a44:	sub    rcx,rax
  405a47:	mov    DWORD PTR [rdx+0x18],esi
  405a4a:	movzx  esi,WORD PTR [rbx+0x10]
  405a4e:	xor    edi,edi
  405a50:	mov    r8d,0x3
  405a56:	mov    DWORD PTR [rdx+0x10],ecx
  405a59:	mov    WORD PTR [rdx+0x1c],si
  405a5d:	lea    r13d,[rcx+rsi*2]
  405a61:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  405a68:	mov    WORD PTR [rbx+0x10],di
  405a6c:	mov    WORD PTR [rdx+0xe],r8w
  405a71:	lea    edx,[r12+r12*1+0x4]
  405a76:	add    rdx,r13
  405a79:	cmp    rdx,QWORD PTR [rbx+0x60]
  405a7d:	jbe    405a9e <flatcc_builder_start_table@@Base+0x9e>
  405a7f:	mov    rdi,QWORD PTR [rbx+0x40]
  405a83:	xor    r8d,r8d
  405a86:	lea    rsi,[rbx+0x58]
  405a8a:	mov    ecx,0x1
  405a8f:	call   QWORD PTR [rbx+0x50]
  405a92:	test   eax,eax
  405a94:	jne    405b2a <flatcc_builder_start_table@@Base+0x12a>
  405a9a:	mov    rax,QWORD PTR [rbx+0x58]
  405a9e:	add    rax,r13
  405aa1:	je     405b30 <flatcc_builder_start_table@@Base+0x130>
  405aa7:	add    rax,0x4
  405aab:	mov    QWORD PTR [rbx+0x8],rax
  405aaf:	mov    rax,QWORD PTR [rbx+0x30]
  405ab3:	lea    edx,[r12+r12*1+0x1]
  405ab8:	mov    r13d,DWORD PTR [rax+0x14]
  405abc:	add    rdx,r13
  405abf:	cmp    rdx,QWORD PTR [rbx+0x90]
  405ac6:	ja     405b10 <flatcc_builder_start_table@@Base+0x110>
  405ac8:	add    r13,QWORD PTR [rbx+0x88]
  405acf:	mov    QWORD PTR [rbx],r13
  405ad2:	je     405b38 <flatcc_builder_start_table@@Base+0x138>
  405ad4:	mov    eax,DWORD PTR [rbx+0x28]
  405ad7:	mov    rdx,rax
  405ada:	add    rax,QWORD PTR [rbx+0x68]
  405ade:	mov    QWORD PTR [rbx+0x18],rax
  405ae2:	mov    eax,DWORD PTR [rbx+0x70]
  405ae5:	sub    eax,edx
  405ae7:	cmp    eax,0xfffc
  405aec:	mov    edx,0xfffc
  405af1:	cmova  eax,edx
  405af4:	mov    DWORD PTR [rbx+0x24],eax
  405af7:	mov    rax,QWORD PTR [rbx+0x30]
  405afb:	mov    DWORD PTR [rax+0x4],0xfffc
  405b02:	add    rsp,0x8
  405b06:	pop    rbx
  405b07:	mov    eax,ebp
  405b09:	pop    rbp
  405b0a:	pop    r12
  405b0c:	pop    r13
  405b0e:	ret    
  405b0f:	nop
  405b10:	mov    rdi,QWORD PTR [rbx+0x40]
  405b14:	xor    ecx,ecx
  405b16:	lea    rsi,[rbx+0x88]
  405b1d:	mov    r8d,0x3
  405b23:	call   QWORD PTR [rbx+0x50]
  405b26:	test   eax,eax
  405b28:	je     405ac8 <flatcc_builder_start_table@@Base+0xc8>
  405b2a:	call   403da0 <flatcc_builder_default_alloc@@Base+0x130>
  405b2f:	nop
  405b30:	mov    QWORD PTR [rbx+0x8],0x0
  405b38:	mov    ebp,0xffffffff
  405b3d:	jmp    405b02 <flatcc_builder_start_table@@Base+0x102>
  405b3f:	nop

0000000000405b40 <flatcc_builder_create_vtable@@Base>:
  405b40:	endbr64 
  405b44:	push   rbp
  405b45:	mov    rbp,rdi
  405b48:	push   rbx
  405b49:	sub    rsp,0xa8
  405b50:	mov    rax,QWORD PTR fs:0x28
  405b59:	mov    QWORD PTR [rsp+0x98],rax
  405b61:	xor    eax,eax
  405b63:	mov    QWORD PTR [rsp],0x0
  405b6b:	mov    DWORD PTR [rsp+0x8],0x0
  405b73:	mov    eax,DWORD PTR [rdi+0x100]
  405b79:	test   dx,dx
  405b7c:	je     405c00 <flatcc_builder_create_vtable@@Base+0xc0>
  405b82:	movzx  r8d,dx
  405b86:	mov    QWORD PTR [rsp],r8
  405b8a:	mov    QWORD PTR [rsp+0x10],rsi
  405b8f:	mov    QWORD PTR [rsp+0x18],r8
  405b94:	mov    DWORD PTR [rsp+0x8],0x1
  405b9c:	movzx  edx,dx
  405b9f:	test   eax,eax
  405ba1:	je     405c30 <flatcc_builder_create_vtable@@Base+0xf0>
  405ba7:	mov    eax,DWORD PTR [rbp+0xf0]
  405bad:	mov    ebx,eax
  405baf:	sub    ebx,edx
  405bb1:	cmp    eax,ebx
  405bb3:	jle    405c0e <flatcc_builder_create_vtable@@Base+0xce>
  405bb5:	mov    rdi,QWORD PTR [rbp+0x38]
  405bb9:	mov    edx,DWORD PTR [rsp+0x8]
  405bbd:	lea    rsi,[rsp+0x10]
  405bc2:	mov    ecx,ebx
  405bc4:	call   QWORD PTR [rbp+0x48]
  405bc7:	test   eax,eax
  405bc9:	jne    405c80 <flatcc_builder_create_vtable@@Base+0x140>
  405bcf:	cmp    ebx,0x1
  405bd2:	mov    DWORD PTR [rbp+0xf0],ebx
  405bd8:	sbb    ebx,0xffffffff
  405bdb:	mov    rcx,QWORD PTR [rsp+0x98]
  405be3:	xor    rcx,QWORD PTR fs:0x28
  405bec:	mov    eax,ebx
  405bee:	jne    405c7b <flatcc_builder_create_vtable@@Base+0x13b>
  405bf4:	add    rsp,0xa8
  405bfb:	pop    rbx
  405bfc:	pop    rbp
  405bfd:	ret    
  405bfe:	xchg   ax,ax
  405c00:	test   eax,eax
  405c02:	jne    405c0e <flatcc_builder_create_vtable@@Base+0xce>
  405c04:	mov    eax,DWORD PTR [rdi+0x124]
  405c0a:	test   eax,eax
  405c0c:	je     405c70 <flatcc_builder_create_vtable@@Base+0x130>
  405c0e:	lea    rcx,[rip+0x42fb]        # 409f10 <_IO_stdin_used@@Base+0xf10>
  405c15:	mov    edx,0x287
  405c1a:	lea    rsi,[rip+0x38af]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  405c21:	lea    rdi,[rip+0x3c3f]        # 409867 <_IO_stdin_used@@Base+0x867>
  405c28:	call   403190 <__assert_fail@plt>
  405c2d:	nop    DWORD PTR [rax]
  405c30:	mov    ecx,DWORD PTR [rdi+0x124]
  405c36:	test   ecx,ecx
  405c38:	jne    405ba7 <flatcc_builder_create_vtable@@Base+0x67>
  405c3e:	mov    ebx,DWORD PTR [rdi+0xf4]
  405c44:	add    edx,ebx
  405c46:	mov    DWORD PTR [rdi+0xf4],edx
  405c4c:	mov    rdi,QWORD PTR [rbp+0x38]
  405c50:	mov    edx,DWORD PTR [rsp+0x8]
  405c54:	lea    rsi,[rsp+0x10]
  405c59:	mov    ecx,ebx
  405c5b:	call   QWORD PTR [rbp+0x48]
  405c5e:	test   eax,eax
  405c60:	jne    405c85 <flatcc_builder_create_vtable@@Base+0x145>
  405c62:	inc    ebx
  405c64:	jmp    405bdb <flatcc_builder_create_vtable@@Base+0x9b>
  405c69:	nop    DWORD PTR [rax+0x0]
  405c70:	mov    ebx,DWORD PTR [rbp+0xf4]
  405c76:	xor    r8d,r8d
  405c79:	jmp    405c4c <flatcc_builder_create_vtable@@Base+0x10c>
  405c7b:	call   403170 <__stack_chk_fail@plt>
  405c80:	call   403f40 <flatcc_builder_default_alloc@@Base+0x2d0>
  405c85:	call   403dd0 <flatcc_builder_default_alloc@@Base+0x160>
  405c8a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405c90 <flatcc_builder_create_cached_vtable@@Base>:
  405c90:	endbr64 
  405c94:	push   r15
  405c96:	mov    r15,rdi
  405c99:	push   r14
  405c9b:	push   r13
  405c9d:	push   r12
  405c9f:	movzx  r12d,dx
  405ca3:	push   rbp
  405ca4:	mov    ebp,ecx
  405ca6:	push   rbx
  405ca7:	sub    rsp,0x38
  405cab:	mov    rbx,QWORD PTR [rdi+0xd8]
  405cb2:	mov    QWORD PTR [rsp+0x18],rsi
  405cb7:	mov    DWORD PTR [rsp+0x2c],edx
  405cbb:	test   rbx,rbx
  405cbe:	je     405e58 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
  405cc4:	mov    eax,0x20
  405cc9:	sub    eax,ebx
  405ccb:	shrx   ebp,ebp,eax
  405cd0:	mov    rax,QWORD PTR [r15+0xa8]
  405cd7:	lea    r14,[rax+rbp*4]
  405cdb:	test   r14,r14
  405cde:	je     405e40 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405ce4:	mov    ebp,DWORD PTR [r14]
  405ce7:	test   ebp,ebp
  405ce9:	je     405f30 <flatcc_builder_create_cached_vtable@@Base+0x2a0>
  405cef:	mov    QWORD PTR [rsp+0x20],0x0
  405cf8:	mov    r11,QWORD PTR [r15+0xb8]
  405cff:	mov    r8,QWORD PTR [r15+0x78]
  405d03:	mov    r13,r14
  405d06:	mov    ebx,ebp
  405d08:	add    rbx,r11
  405d0b:	mov    esi,DWORD PTR [rbx+0x8]
  405d0e:	add    rsi,r8
  405d11:	cmp    WORD PTR [rsi],r12w
  405d15:	jne    405e00 <flatcc_builder_create_cached_vtable@@Base+0x170>
  405d1b:	mov    rdi,QWORD PTR [rsp+0x18]
  405d20:	movzx  edx,r12w
  405d24:	mov    QWORD PTR [rsp+0x10],r8
  405d29:	mov    QWORD PTR [rsp+0x8],r11
  405d2e:	call   4031c0 <memcmp@plt>
  405d33:	test   eax,eax
  405d35:	mov    r11,QWORD PTR [rsp+0x8]
  405d3a:	mov    r8,QWORD PTR [rsp+0x10]
  405d3f:	jne    405e00 <flatcc_builder_create_cached_vtable@@Base+0x170>
  405d45:	mov    eax,DWORD PTR [r15+0x100]
  405d4c:	cmp    DWORD PTR [rbx+0x4],eax
  405d4f:	je     405e10 <flatcc_builder_create_cached_vtable@@Base+0x180>
  405d55:	mov    QWORD PTR [rsp+0x20],rbx
  405d5a:	mov    ebp,DWORD PTR [rbx+0xc]
  405d5d:	lea    r13,[rbx+0xc]
  405d61:	test   ebp,ebp
  405d63:	jne    405d06 <flatcc_builder_create_cached_vtable@@Base+0x76>
  405d65:	mov    ebp,DWORD PTR [r15+0xe4]
  405d6c:	lea    rdx,[rbp+0x10]
  405d70:	cmp    rdx,QWORD PTR [r15+0xc0]
  405d77:	jbe    405d98 <flatcc_builder_create_cached_vtable@@Base+0x108>
  405d79:	mov    rdi,QWORD PTR [r15+0x40]
  405d7d:	xor    ecx,ecx
  405d7f:	lea    rsi,[r15+0xb8]
  405d86:	mov    r8d,0x6
  405d8c:	call   QWORD PTR [r15+0x50]
  405d90:	test   eax,eax
  405d92:	jne    405f24 <flatcc_builder_create_cached_vtable@@Base+0x294>
  405d98:	add    rbp,QWORD PTR [r15+0xb8]
  405d9f:	je     405e40 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405da5:	mov    eax,DWORD PTR [r15+0xe4]
  405dac:	mov    rsi,QWORD PTR [rsp+0x18]
  405db1:	lea    edx,[rax+0x10]
  405db4:	mov    DWORD PTR [r15+0xe4],edx
  405dbb:	mov    edx,DWORD PTR [r15+0x100]
  405dc2:	mov    rdi,r15
  405dc5:	mov    DWORD PTR [rbp+0x4],edx
  405dc8:	mov    edx,DWORD PTR [r14]
  405dcb:	mov    DWORD PTR [rbp+0xc],edx
  405dce:	mov    DWORD PTR [r14],eax
  405dd1:	mov    eax,DWORD PTR [rsp+0x2c]
  405dd5:	movzx  edx,ax
  405dd8:	movzx  ebx,ax
  405ddb:	call   405b40 <flatcc_builder_create_vtable@@Base>
  405de0:	mov    DWORD PTR [rbp+0x0],eax
  405de3:	test   eax,eax
  405de5:	je     405e40 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405de7:	mov    rdi,QWORD PTR [rsp+0x20]
  405dec:	test   rdi,rdi
  405def:	je     405f45 <flatcc_builder_create_cached_vtable@@Base+0x2b5>
  405df5:	mov    edx,DWORD PTR [rdi+0x8]
  405df8:	mov    DWORD PTR [rbp+0x8],edx
  405dfb:	jmp    405e27 <flatcc_builder_create_cached_vtable@@Base+0x197>
  405dfd:	nop    DWORD PTR [rax]
  405e00:	lea    r13,[rbx+0xc]
  405e04:	mov    ebp,DWORD PTR [rbx+0xc]
  405e07:	jmp    405d61 <flatcc_builder_create_cached_vtable@@Base+0xd1>
  405e0c:	nop    DWORD PTR [rax+0x0]
  405e10:	cmp    r14,r13
  405e13:	je     405e25 <flatcc_builder_create_cached_vtable@@Base+0x195>
  405e15:	mov    eax,DWORD PTR [rbx+0xc]
  405e18:	mov    DWORD PTR [r13+0x0],eax
  405e1c:	mov    eax,DWORD PTR [r14]
  405e1f:	mov    DWORD PTR [rbx+0xc],eax
  405e22:	mov    DWORD PTR [r14],ebp
  405e25:	mov    eax,DWORD PTR [rbx]
  405e27:	add    rsp,0x38
  405e2b:	pop    rbx
  405e2c:	pop    rbp
  405e2d:	pop    r12
  405e2f:	pop    r13
  405e31:	pop    r14
  405e33:	pop    r15
  405e35:	ret    
  405e36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405e40:	add    rsp,0x38
  405e44:	pop    rbx
  405e45:	pop    rbp
  405e46:	pop    r12
  405e48:	pop    r13
  405e4a:	pop    r14
  405e4c:	xor    eax,eax
  405e4e:	pop    r15
  405e50:	ret    
  405e51:	nop    DWORD PTR [rax+0x0]
  405e58:	mov    eax,DWORD PTR [rdi+0xe4]
  405e5e:	lea    r13,[rdi+0xa8]
  405e65:	test   eax,eax
  405e67:	jne    405fcf <flatcc_builder_create_cached_vtable@@Base+0x33f>
  405e6d:	cmp    QWORD PTR [rdi+0xc0],0xf
  405e75:	jbe    405f00 <flatcc_builder_create_cached_vtable@@Base+0x270>
  405e7b:	cmp    QWORD PTR [r15+0xb8],0x0
  405e83:	je     405e40 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405e85:	mov    DWORD PTR [r15+0xe4],0x10
  405e90:	mov    rdi,QWORD PTR [r15+0x40]
  405e94:	mov    r8d,0x5
  405e9a:	mov    ecx,0x1
  405e9f:	mov    edx,0x100
  405ea4:	mov    rsi,r13
  405ea7:	call   QWORD PTR [r15+0x50]
  405eab:	test   eax,eax
  405ead:	jne    405e40 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405eaf:	mov    rcx,QWORD PTR [r15+0xb0]
  405eb6:	mov    eax,0x100
  405ebb:	jmp    405ec3 <flatcc_builder_create_cached_vtable@@Base+0x233>
  405ebd:	nop    DWORD PTR [rax]
  405ec0:	mov    rax,rdx
  405ec3:	lea    rdx,[rax+rax*1]
  405ec7:	cmp    rdx,rcx
  405eca:	jbe    405ec0 <flatcc_builder_create_cached_vtable@@Base+0x230>
  405ecc:	shr    rax,0x2
  405ed0:	cmp    rax,0x1
  405ed4:	jbe    405f3e <flatcc_builder_create_cached_vtable@@Base+0x2ae>
  405ed6:	mov    esi,0x1
  405edb:	nop    DWORD PTR [rax+rax*1+0x0]
  405ee0:	inc    rbx
  405ee3:	shlx   rdx,rsi,rbx
  405ee8:	cmp    rax,rdx
  405eeb:	ja     405ee0 <flatcc_builder_create_cached_vtable@@Base+0x250>
  405eed:	mov    eax,0x20
  405ef2:	sub    eax,ebx
  405ef4:	mov    QWORD PTR [r15+0xd8],rbx
  405efb:	jmp    405ccb <flatcc_builder_create_cached_vtable@@Base+0x3b>
  405f00:	lea    rsi,[rdi+0xb8]
  405f07:	mov    rdi,QWORD PTR [rdi+0x40]
  405f0b:	xor    ecx,ecx
  405f0d:	mov    r8d,0x6
  405f13:	mov    edx,0x10
  405f18:	call   QWORD PTR [r15+0x50]
  405f1c:	test   eax,eax
  405f1e:	je     405e7b <flatcc_builder_create_cached_vtable@@Base+0x1eb>
  405f24:	call   403da0 <flatcc_builder_default_alloc@@Base+0x130>
  405f29:	nop    DWORD PTR [rax+0x0]
  405f30:	mov    QWORD PTR [rsp+0x20],0x0
  405f39:	jmp    405d65 <flatcc_builder_create_cached_vtable@@Base+0xd5>
  405f3e:	mov    eax,0x20
  405f43:	jmp    405ef4 <flatcc_builder_create_cached_vtable@@Base+0x264>
  405f45:	mov    rax,QWORD PTR [r15+0x118]
  405f4c:	mov    r14d,DWORD PTR [r15+0xe0]
  405f53:	test   rax,rax
  405f56:	je     405f61 <flatcc_builder_create_cached_vtable@@Base+0x2d1>
  405f58:	lea    edx,[rbx+r14*1]
  405f5c:	cmp    rax,rdx
  405f5f:	jb     405fb7 <flatcc_builder_create_cached_vtable@@Base+0x327>
  405f61:	lea    rdx,[r12+r14*1]
  405f65:	cmp    rdx,QWORD PTR [r15+0x80]
  405f6c:	jbe    405f86 <flatcc_builder_create_cached_vtable@@Base+0x2f6>
  405f6e:	mov    rdi,QWORD PTR [r15+0x40]
  405f72:	xor    ecx,ecx
  405f74:	lea    rsi,[r15+0x78]
  405f78:	mov    r8d,0x2
  405f7e:	call   QWORD PTR [r15+0x50]
  405f82:	test   eax,eax
  405f84:	jne    405f24 <flatcc_builder_create_cached_vtable@@Base+0x294>
  405f86:	mov    rdi,r14
  405f89:	add    rdi,QWORD PTR [r15+0x78]
  405f8d:	je     405fc7 <flatcc_builder_create_cached_vtable@@Base+0x337>
  405f8f:	mov    eax,DWORD PTR [r15+0xe0]
  405f96:	mov    rsi,QWORD PTR [rsp+0x18]
  405f9b:	add    ebx,eax
  405f9d:	mov    DWORD PTR [rbp+0x8],eax
  405fa0:	mov    DWORD PTR [r15+0xe0],ebx
  405fa7:	mov    rdx,r12
  405faa:	call   4031e0 <memcpy@plt>
  405faf:	mov    eax,DWORD PTR [rbp+0x0]
  405fb2:	jmp    405e27 <flatcc_builder_create_cached_vtable@@Base+0x197>
  405fb7:	mov    rdi,r15
  405fba:	call   4042f0 <flatcc_builder_flush_vtable_cache@@Base>
  405fbf:	mov    eax,DWORD PTR [rbp+0x0]
  405fc2:	jmp    405e27 <flatcc_builder_create_cached_vtable@@Base+0x197>
  405fc7:	or     eax,0xffffffff
  405fca:	jmp    405e27 <flatcc_builder_create_cached_vtable@@Base+0x197>
  405fcf:	lea    rcx,[rip+0x3cfa]        # 409cd0 <_IO_stdin_used@@Base+0xcd0>
  405fd6:	mov    edx,0x156
  405fdb:	lea    rsi,[rip+0x34ee]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  405fe2:	lea    rdi,[rip+0x38c4]        # 4098ad <_IO_stdin_used@@Base+0x8ad>
  405fe9:	call   403190 <__assert_fail@plt>
  405fee:	xchg   ax,ax

0000000000405ff0 <flatcc_builder_create_table@@Base>:
  405ff0:	endbr64 
  405ff4:	push   rbp
  405ff5:	push   rbx
  405ff6:	mov    rbx,rdi
  405ff9:	sub    rsp,0xb8
  406000:	mov    edi,DWORD PTR [rsp+0xd0]
  406007:	mov    rax,QWORD PTR fs:0x28
  406010:	mov    QWORD PTR [rsp+0xa8],rax
  406018:	xor    eax,eax
  40601a:	test   r9d,r9d
  40601d:	js     4061df <flatcc_builder_create_table@@Base+0x1ef>
  406023:	test   dil,0x1
  406027:	je     4061bb <flatcc_builder_create_table@@Base+0x1cb>
  40602d:	cmp    cx,0x4
  406031:	mov    eax,0x4
  406036:	cmovb  ecx,eax
  406039:	movzx  r11d,cx
  40603d:	cmp    WORD PTR [rbx+0xe8],cx
  406044:	jb     406190 <flatcc_builder_create_table@@Base+0x1a0>
  40604a:	mov    eax,DWORD PTR [rbx+0xf0]
  406050:	lea    ecx,[r11-0x1]
  406054:	mov    r10d,eax
  406057:	sub    r10d,edx
  40605a:	and    r10d,ecx
  40605d:	mov    ecx,eax
  40605f:	sub    ecx,edx
  406061:	lea    r11d,[rcx-0x4]
  406065:	dec    edi
  406067:	mov    ecx,r11d
  40606a:	sub    ecx,edi
  40606c:	sub    ecx,r10d
  40606f:	mov    DWORD PTR [rsp+0xc],ecx
  406073:	test   r9d,r9d
  406076:	je     4060ad <flatcc_builder_create_table@@Base+0xbd>
  406078:	mov    edi,r10d
  40607b:	sub    edi,r11d
  40607e:	lea    eax,[r9-0x1]
  406082:	sub    edi,0x4
  406085:	lea    r9,[r8+rax*2+0x2]
  40608a:	nop    WORD PTR [rax+rax*1+0x0]
  406090:	movzx  ecx,WORD PTR [r8]
  406094:	mov    r11d,edi
  406097:	sub    r11d,ecx
  40609a:	add    r8,0x2
  40609e:	add    DWORD PTR [rsi+rcx*1],r11d
  4060a2:	cmp    r9,r8
  4060a5:	jne    406090 <flatcc_builder_create_table@@Base+0xa0>
  4060a7:	mov    eax,DWORD PTR [rbx+0xf0]
  4060ad:	lea    rcx,[rsp+0xc]
  4060b2:	mov    QWORD PTR [rsp+0x10],0x4
  4060bb:	mov    QWORD PTR [rsp+0x20],rcx
  4060c0:	mov    QWORD PTR [rsp+0x28],0x4
  4060c9:	mov    DWORD PTR [rsp+0x18],0x1
  4060d1:	mov    r8d,0x4
  4060d7:	test   rdx,rdx
  4060da:	je     4060f7 <flatcc_builder_create_table@@Base+0x107>
  4060dc:	lea    r8,[rdx+0x4]
  4060e0:	mov    QWORD PTR [rsp+0x10],r8
  4060e5:	mov    QWORD PTR [rsp+0x30],rsi
  4060ea:	mov    QWORD PTR [rsp+0x38],rdx
  4060ef:	mov    DWORD PTR [rsp+0x18],0x2
  4060f7:	test   r10d,r10d
  4060fa:	jne    406160 <flatcc_builder_create_table@@Base+0x170>
  4060fc:	mov    ebp,eax
  4060fe:	movabs rdx,0x10000000f
  406108:	sub    ebp,r8d
  40610b:	cmp    r8,rdx
  40610e:	ja     40619c <flatcc_builder_create_table@@Base+0x1ac>
  406114:	cmp    ebp,eax
  406116:	jge    40619c <flatcc_builder_create_table@@Base+0x1ac>
  40611c:	mov    rdi,QWORD PTR [rbx+0x38]
  406120:	mov    edx,DWORD PTR [rsp+0x18]
  406124:	lea    rsi,[rsp+0x20]
  406129:	mov    ecx,ebp
  40612b:	call   QWORD PTR [rbx+0x48]
  40612e:	test   eax,eax
  406130:	jne    4061da <flatcc_builder_create_table@@Base+0x1ea>
  406136:	mov    DWORD PTR [rbx+0xf0],ebp
  40613c:	mov    eax,ebp
  40613e:	mov    rbx,QWORD PTR [rsp+0xa8]
  406146:	xor    rbx,QWORD PTR fs:0x28
  40614f:	jne    4061fe <flatcc_builder_create_table@@Base+0x20e>
  406155:	add    rsp,0xb8
  40615c:	pop    rbx
  40615d:	pop    rbp
  40615e:	ret    
  40615f:	nop
  406160:	movsxd rcx,DWORD PTR [rsp+0x18]
  406165:	mov    rsi,0x409fc0
  40616c:	mov    rdx,rcx
  40616f:	add    r8,r10
  406172:	shl    rcx,0x4
  406176:	inc    edx
  406178:	mov    QWORD PTR [rsp+0x10],r8
  40617d:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  406182:	mov    QWORD PTR [rsp+rcx*1+0x28],r10
  406187:	mov    DWORD PTR [rsp+0x18],edx
  40618b:	jmp    4060fc <flatcc_builder_create_table@@Base+0x10c>
  406190:	mov    WORD PTR [rbx+0xe8],cx
  406197:	jmp    40604a <flatcc_builder_create_table@@Base+0x5a>
  40619c:	lea    rcx,[rip+0x3d6d]        # 409f10 <_IO_stdin_used@@Base+0xf10>
  4061a3:	mov    edx,0x287
  4061a8:	lea    rsi,[rip+0x3321]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4061af:	lea    rdi,[rip+0x36b1]        # 409867 <_IO_stdin_used@@Base+0x867>
  4061b6:	call   403190 <__assert_fail@plt>
  4061bb:	lea    rcx,[rip+0x3aee]        # 409cb0 <_IO_stdin_used@@Base+0xcb0>
  4061c2:	mov    edx,0x4db
  4061c7:	lea    rsi,[rip+0x3302]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4061ce:	lea    rdi,[rip+0x36f9]        # 4098ce <_IO_stdin_used@@Base+0x8ce>
  4061d5:	call   403190 <__assert_fail@plt>
  4061da:	call   403f40 <flatcc_builder_default_alloc@@Base+0x2d0>
  4061df:	lea    rcx,[rip+0x3aca]        # 409cb0 <_IO_stdin_used@@Base+0xcb0>
  4061e6:	mov    edx,0x4d5
  4061eb:	lea    rsi,[rip+0x32de]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4061f2:	lea    rdi,[rip+0x36c3]        # 4098bc <_IO_stdin_used@@Base+0x8bc>
  4061f9:	call   403190 <__assert_fail@plt>
  4061fe:	call   403170 <__stack_chk_fail@plt>
  406203:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40620e:	xchg   ax,ax

0000000000406210 <flatcc_builder_check_required_field@@Base>:
  406210:	endbr64 
  406214:	mov    rax,QWORD PTR [rdi+0x30]
  406218:	cmp    WORD PTR [rax+0xe],0x3
  40621d:	jne    40623a <flatcc_builder_check_required_field@@Base+0x2a>
  40621f:	xor    eax,eax
  406221:	cmp    WORD PTR [rdi+0x10],si
  406225:	jbe    406239 <flatcc_builder_check_required_field@@Base+0x29>
  406227:	mov    rax,QWORD PTR [rdi+0x8]
  40622b:	movzx  edx,si
  40622e:	cmp    WORD PTR [rax+rdx*2],0x0
  406233:	setne  al
  406236:	movzx  eax,al
  406239:	ret    
  40623a:	push   rax
  40623b:	lea    rcx,[rip+0x3a3e]        # 409c80 <_IO_stdin_used@@Base+0xc80>
  406242:	mov    edx,0x4f8
  406247:	lea    rsi,[rip+0x3282]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  40624e:	lea    rdi,[rip+0x34c3]        # 409718 <_IO_stdin_used@@Base+0x718>
  406255:	call   403190 <__assert_fail@plt>
  40625a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406260 <flatcc_builder_check_union_field@@Base>:
  406260:	endbr64 
  406264:	mov    rax,QWORD PTR [rdi+0x30]
  406268:	cmp    WORD PTR [rax+0xe],0x3
  40626d:	jne    4062c9 <flatcc_builder_check_union_field@@Base+0x69>
  40626f:	xor    eax,eax
  406271:	test   si,si
  406274:	je     4062a6 <flatcc_builder_check_union_field@@Base+0x46>
  406276:	cmp    WORD PTR [rdi+0x10],si
  40627a:	jbe    4062a6 <flatcc_builder_check_union_field@@Base+0x46>
  40627c:	mov    rcx,QWORD PTR [rdi+0x8]
  406280:	movzx  edx,si
  406283:	movzx  eax,WORD PTR [rcx+rdx*2-0x2]
  406288:	movzx  ecx,WORD PTR [rcx+rdx*2]
  40628c:	test   ax,ax
  40628f:	je     4062c0 <flatcc_builder_check_union_field@@Base+0x60>
  406291:	mov    rsi,QWORD PTR [rdi+0x18]
  406295:	movzx  edx,ax
  406298:	xor    eax,eax
  40629a:	test   cx,cx
  40629d:	sete   al
  4062a0:	cmp    BYTE PTR [rsi+rdx*1],0x0
  4062a4:	jne    4062b0 <flatcc_builder_check_union_field@@Base+0x50>
  4062a6:	ret    
  4062a7:	nop    WORD PTR [rax+rax*1+0x0]
  4062b0:	xor    eax,eax
  4062b2:	test   cx,cx
  4062b5:	setne  al
  4062b8:	ret    
  4062b9:	nop    DWORD PTR [rax+0x0]
  4062c0:	xor    eax,eax
  4062c2:	test   cx,cx
  4062c5:	sete   al
  4062c8:	ret    
  4062c9:	push   rax
  4062ca:	lea    rcx,[rip+0x396f]        # 409c40 <_IO_stdin_used@@Base+0xc40>
  4062d1:	mov    edx,0x4ff
  4062d6:	lea    rsi,[rip+0x31f3]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4062dd:	lea    rdi,[rip+0x3434]        # 409718 <_IO_stdin_used@@Base+0x718>
  4062e4:	call   403190 <__assert_fail@plt>
  4062e9:	nop    DWORD PTR [rax+0x0]

00000000004062f0 <flatcc_builder_check_required@@Base>:
  4062f0:	endbr64 
  4062f4:	mov    rax,QWORD PTR [rdi+0x30]
  4062f8:	cmp    WORD PTR [rax+0xe],0x3
  4062fd:	jne    406353 <flatcc_builder_check_required@@Base+0x63>
  4062ff:	movzx  ecx,WORD PTR [rdi+0x10]
  406303:	xor    eax,eax
  406305:	cmp    ecx,edx
  406307:	jl     406352 <flatcc_builder_check_required@@Base+0x62>
  406309:	test   edx,edx
  40630b:	jle    406343 <flatcc_builder_check_required@@Base+0x53>
  40630d:	mov    rcx,QWORD PTR [rdi+0x8]
  406311:	movzx  edi,WORD PTR [rsi]
  406314:	cmp    WORD PTR [rcx+rdi*2],0x0
  406319:	je     406352 <flatcc_builder_check_required@@Base+0x62>
  40631b:	add    rsi,0x2
  40631f:	lea    eax,[rdx-0x1]
  406322:	lea    rdx,[rsi+rax*2]
  406326:	jmp    40633e <flatcc_builder_check_required@@Base+0x4e>
  406328:	nop    DWORD PTR [rax+rax*1+0x0]
  406330:	movzx  eax,WORD PTR [rsi]
  406333:	add    rsi,0x2
  406337:	cmp    WORD PTR [rcx+rax*2],0x0
  40633c:	je     406350 <flatcc_builder_check_required@@Base+0x60>
  40633e:	cmp    rsi,rdx
  406341:	jne    406330 <flatcc_builder_check_required@@Base+0x40>
  406343:	mov    eax,0x1
  406348:	ret    
  406349:	nop    DWORD PTR [rax+0x0]
  406350:	xor    eax,eax
  406352:	ret    
  406353:	push   rax
  406354:	lea    rcx,[rip+0x38b5]        # 409c10 <_IO_stdin_used@@Base+0xc10>
  40635b:	mov    edx,0x511
  406360:	lea    rsi,[rip+0x3169]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  406367:	lea    rdi,[rip+0x33aa]        # 409718 <_IO_stdin_used@@Base+0x718>
  40636e:	call   403190 <__assert_fail@plt>
  406373:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40637e:	xchg   ax,ax

0000000000406380 <flatcc_builder_end_table@@Base>:
  406380:	endbr64 
  406384:	push   r13
  406386:	push   r12
  406388:	push   rbp
  406389:	push   rbx
  40638a:	sub    rsp,0x8
  40638e:	mov    rax,QWORD PTR [rdi+0x30]
  406392:	cmp    WORD PTR [rax+0xe],0x3
  406397:	jne    4064ed <flatcc_builder_end_table@@Base+0x16d>
  40639d:	movzx  ebp,WORD PTR [rdi+0x10]
  4063a1:	movzx  eax,WORD PTR [rdi+0x20]
  4063a5:	lea    ebp,[rbp+rbp*1+0x4]
  4063a9:	movzx  ecx,bp
  4063ac:	xor    ecx,DWORD PTR [rdi+0x14]
  4063af:	mov    rdx,QWORD PTR [rdi+0x8]
  4063b3:	imul   ecx,ecx,0x9e3779b1
  4063b9:	add    eax,0x4
  4063bc:	mov    WORD PTR [rdx-0x2],ax
  4063c0:	movzx  eax,ax
  4063c3:	xor    ecx,eax
  4063c5:	imul   ecx,ecx,0x9e3779b1
  4063cb:	mov    WORD PTR [rdx-0x4],bp
  4063cf:	lea    r12,[rdx-0x4]
  4063d3:	mov    DWORD PTR [rdi+0x14],ecx
  4063d6:	movzx  edx,bp
  4063d9:	mov    rsi,r12
  4063dc:	mov    rbx,rdi
  4063df:	call   405c90 <flatcc_builder_create_cached_vtable@@Base>
  4063e4:	mov    r13d,eax
  4063e7:	test   eax,eax
  4063e9:	jne    406400 <flatcc_builder_end_table@@Base+0x80>
  4063eb:	add    rsp,0x8
  4063ef:	pop    rbx
  4063f0:	xor    ebp,ebp
  4063f2:	mov    eax,ebp
  4063f4:	pop    rbp
  4063f5:	pop    r12
  4063f7:	pop    r13
  4063f9:	ret    
  4063fa:	nop    WORD PTR [rax+rax*1+0x0]
  406400:	movzx  edx,bp
  406403:	xor    esi,esi
  406405:	mov    rdi,r12
  406408:	call   4031a0 <memset@plt>
  40640d:	mov    rax,QWORD PTR [rbx+0x30]
  406411:	sub    rsp,0x8
  406415:	mov    r8d,DWORD PTR [rax+0x14]
  406419:	mov    r9,QWORD PTR [rbx]
  40641c:	add    r8,QWORD PTR [rbx+0x88]
  406423:	mov    edx,DWORD PTR [rbx+0x20]
  406426:	movzx  ecx,WORD PTR [rbx+0xea]
  40642d:	mov    rsi,QWORD PTR [rbx+0x18]
  406431:	push   r13
  406433:	sub    r9,r8
  406436:	sar    r9,1
  406439:	mov    rdi,rbx
  40643c:	call   405ff0 <flatcc_builder_create_table@@Base>
  406441:	mov    ebp,eax
  406443:	pop    rax
  406444:	pop    rdx
  406445:	test   ebp,ebp
  406447:	je     4063eb <flatcc_builder_end_table@@Base+0x6b>
  406449:	mov    rax,QWORD PTR [rbx+0x30]
  40644d:	mov    rdi,QWORD PTR [rbx+0x18]
  406451:	mov    edx,DWORD PTR [rax+0x18]
  406454:	xor    esi,esi
  406456:	mov    DWORD PTR [rbx+0x14],edx
  406459:	movzx  edx,WORD PTR [rax+0x1c]
  40645d:	mov    WORD PTR [rbx+0x10],dx
  406461:	mov    edx,DWORD PTR [rax+0x10]
  406464:	mov    eax,DWORD PTR [rax+0x14]
  406467:	add    rdx,QWORD PTR [rbx+0x58]
  40646b:	add    rax,QWORD PTR [rbx+0x88]
  406472:	mov    QWORD PTR [rbx+0x8],rdx
  406476:	mov    QWORD PTR [rbx],rax
  406479:	mov    edx,DWORD PTR [rbx+0x20]
  40647c:	call   4031a0 <memset@plt>
  406481:	mov    rax,QWORD PTR [rbx+0x30]
  406485:	mov    edi,DWORD PTR [rbx+0x70]
  406488:	mov    edx,DWORD PTR [rax+0x8]
  40648b:	mov    esi,DWORD PTR [rax]
  40648d:	mov    ecx,DWORD PTR [rax+0x4]
  406490:	mov    DWORD PTR [rbx+0x20],edx
  406493:	mov    rdx,rsi
  406496:	sub    edi,edx
  406498:	mov    DWORD PTR [rbx+0x28],esi
  40649b:	mov    edx,edi
  40649d:	add    rsi,QWORD PTR [rbx+0x68]
  4064a1:	cmp    ecx,edi
  4064a3:	cmovb  edx,ecx
  4064a6:	mov    QWORD PTR [rbx+0x18],rsi
  4064aa:	mov    DWORD PTR [rbx+0x24],edx
  4064ad:	movzx  edx,WORD PTR [rbx+0xea]
  4064b4:	mov    DWORD PTR [rax+0x4],ecx
  4064b7:	cmp    dx,WORD PTR [rbx+0xe8]
  4064be:	jbe    4064c7 <flatcc_builder_end_table@@Base+0x147>
  4064c0:	mov    WORD PTR [rbx+0xe8],dx
  4064c7:	movzx  edx,WORD PTR [rax+0xc]
  4064cb:	dec    DWORD PTR [rbx+0x104]
  4064d1:	sub    rax,0x24
  4064d5:	mov    QWORD PTR [rbx+0x30],rax
  4064d9:	mov    WORD PTR [rbx+0xea],dx
  4064e0:	add    rsp,0x8
  4064e4:	mov    eax,ebp
  4064e6:	pop    rbx
  4064e7:	pop    rbp
  4064e8:	pop    r12
  4064ea:	pop    r13
  4064ec:	ret    
  4064ed:	lea    rcx,[rip+0x36fc]        # 409bf0 <_IO_stdin_used@@Base+0xbf0>
  4064f4:	mov    edx,0x525
  4064f9:	lea    rsi,[rip+0x2fd0]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  406500:	lea    rdi,[rip+0x3211]        # 409718 <_IO_stdin_used@@Base+0x718>
  406507:	call   403190 <__assert_fail@plt>
  40650c:	nop    DWORD PTR [rax+0x0]

0000000000406510 <flatcc_builder_create_vector@@Base>:
  406510:	endbr64 
  406514:	push   rbp
  406515:	push   rbx
  406516:	sub    rsp,0xb8
  40651d:	mov    rax,QWORD PTR fs:0x28
  406526:	mov    QWORD PTR [rsp+0xa8],rax
  40652e:	xor    eax,eax
  406530:	cmp    rdx,r9
  406533:	ja     406674 <flatcc_builder_create_vector@@Base+0x164>
  406539:	cmp    r8w,0x4
  40653e:	mov    eax,0x4
  406543:	cmovb  r8d,eax
  406547:	mov    rbx,rdi
  40654a:	movzx  edi,r8w
  40654e:	cmp    r8w,WORD PTR [rbx+0xe8]
  406556:	jbe    406560 <flatcc_builder_create_vector@@Base+0x50>
  406558:	mov    WORD PTR [rbx+0xe8],r8w
  406560:	imul   ecx,edx
  406563:	mov    DWORD PTR [rsp+0xc],edx
  406567:	mov    edx,DWORD PTR [rbx+0xf0]
  40656d:	dec    edi
  40656f:	mov    eax,edx
  406571:	sub    eax,ecx
  406573:	and    eax,edi
  406575:	lea    rdi,[rsp+0xc]
  40657a:	mov    QWORD PTR [rsp+0x10],0x4
  406583:	mov    QWORD PTR [rsp+0x20],rdi
  406588:	mov    QWORD PTR [rsp+0x28],0x4
  406591:	mov    DWORD PTR [rsp+0x18],0x1
  406599:	mov    r8d,0x4
  40659f:	test   ecx,ecx
  4065a1:	je     4065be <flatcc_builder_create_vector@@Base+0xae>
  4065a3:	lea    r8,[rcx+0x4]
  4065a7:	mov    QWORD PTR [rsp+0x10],r8
  4065ac:	mov    QWORD PTR [rsp+0x30],rsi
  4065b1:	mov    QWORD PTR [rsp+0x38],rcx
  4065b6:	mov    DWORD PTR [rsp+0x18],0x2
  4065be:	test   eax,eax
  4065c0:	jne    406620 <flatcc_builder_create_vector@@Base+0x110>
  4065c2:	mov    ebp,edx
  4065c4:	movabs rax,0x10000000f
  4065ce:	sub    ebp,r8d
  4065d1:	cmp    r8,rax
  4065d4:	ja     406650 <flatcc_builder_create_vector@@Base+0x140>
  4065d6:	cmp    edx,ebp
  4065d8:	jle    406650 <flatcc_builder_create_vector@@Base+0x140>
  4065da:	mov    rdi,QWORD PTR [rbx+0x38]
  4065de:	mov    edx,DWORD PTR [rsp+0x18]
  4065e2:	lea    rsi,[rsp+0x20]
  4065e7:	mov    ecx,ebp
  4065e9:	call   QWORD PTR [rbx+0x48]
  4065ec:	test   eax,eax
  4065ee:	jne    40666f <flatcc_builder_create_vector@@Base+0x15f>
  4065f0:	mov    DWORD PTR [rbx+0xf0],ebp
  4065f6:	mov    eax,ebp
  4065f8:	mov    rbx,QWORD PTR [rsp+0xa8]
  406600:	xor    rbx,QWORD PTR fs:0x28
  406609:	jne    406693 <flatcc_builder_create_vector@@Base+0x183>
  40660f:	add    rsp,0xb8
  406616:	pop    rbx
  406617:	pop    rbp
  406618:	ret    
  406619:	nop    DWORD PTR [rax+0x0]
  406620:	movsxd rsi,DWORD PTR [rsp+0x18]
  406625:	mov    rdi,0x409fc0
  40662c:	mov    rcx,rsi
  40662f:	add    r8,rax
  406632:	shl    rsi,0x4
  406636:	inc    ecx
  406638:	mov    QWORD PTR [rsp+0x10],r8
  40663d:	mov    QWORD PTR [rsp+rsi*1+0x20],rdi
  406642:	mov    QWORD PTR [rsp+rsi*1+0x28],rax
  406647:	mov    DWORD PTR [rsp+0x18],ecx
  40664b:	jmp    4065c2 <flatcc_builder_create_vector@@Base+0xb2>
  406650:	lea    rcx,[rip+0x38b9]        # 409f10 <_IO_stdin_used@@Base+0xf10>
  406657:	mov    edx,0x287
  40665c:	lea    rsi,[rip+0x2e6d]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  406663:	lea    rdi,[rip+0x31fd]        # 409867 <_IO_stdin_used@@Base+0x867>
  40666a:	call   403190 <__assert_fail@plt>
  40666f:	call   403f40 <flatcc_builder_default_alloc@@Base+0x2d0>
  406674:	lea    rcx,[rip+0x3555]        # 409bd0 <_IO_stdin_used@@Base+0xbd0>
  40667b:	mov    edx,0x555
  406680:	lea    rsi,[rip+0x2e49]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  406687:	lea    rdi,[rip+0x324b]        # 4098d9 <_IO_stdin_used@@Base+0x8d9>
  40668e:	call   403190 <__assert_fail@plt>
  406693:	call   403170 <__stack_chk_fail@plt>
  406698:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004066a0 <flatcc_builder_end_vector@@Base>:
  4066a0:	endbr64 
  4066a4:	push   rbp
  4066a5:	push   rbx
  4066a6:	sub    rsp,0x8
  4066aa:	mov    rax,QWORD PTR [rdi+0x30]
  4066ae:	cmp    WORD PTR [rax+0xe],0x4
  4066b3:	jne    406766 <flatcc_builder_end_vector@@Base+0xc6>
  4066b9:	mov    ecx,DWORD PTR [rax+0x10]
  4066bc:	mov    edx,DWORD PTR [rax+0x14]
  4066bf:	mov    rsi,QWORD PTR [rdi+0x18]
  4066c3:	mov    r9d,DWORD PTR [rax+0x18]
  4066c7:	movzx  r8d,WORD PTR [rdi+0xea]
  4066cf:	mov    rbx,rdi
  4066d2:	call   406510 <flatcc_builder_create_vector@@Base>
  4066d7:	mov    ebp,eax
  4066d9:	test   eax,eax
  4066db:	jne    4066f0 <flatcc_builder_end_vector@@Base+0x50>
  4066dd:	add    rsp,0x8
  4066e1:	pop    rbx
  4066e2:	mov    eax,ebp
  4066e4:	pop    rbp
  4066e5:	ret    
  4066e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4066f0:	mov    edx,DWORD PTR [rbx+0x20]
  4066f3:	mov    rdi,QWORD PTR [rbx+0x18]
  4066f7:	xor    esi,esi
  4066f9:	call   4031a0 <memset@plt>
  4066fe:	mov    rax,QWORD PTR [rbx+0x30]
  406702:	mov    edi,DWORD PTR [rbx+0x70]
  406705:	mov    edx,DWORD PTR [rax+0x8]
  406708:	mov    esi,DWORD PTR [rax]
  40670a:	mov    ecx,DWORD PTR [rax+0x4]
  40670d:	mov    DWORD PTR [rbx+0x20],edx
  406710:	mov    rdx,rsi
  406713:	sub    edi,edx
  406715:	mov    DWORD PTR [rbx+0x28],esi
  406718:	mov    edx,edi
  40671a:	add    rsi,QWORD PTR [rbx+0x68]
  40671e:	cmp    ecx,edi
  406720:	cmovb  edx,ecx
  406723:	mov    QWORD PTR [rbx+0x18],rsi
  406727:	mov    DWORD PTR [rbx+0x24],edx
  40672a:	movzx  edx,WORD PTR [rbx+0xea]
  406731:	mov    DWORD PTR [rax+0x4],ecx
  406734:	cmp    dx,WORD PTR [rbx+0xe8]
  40673b:	jbe    406744 <flatcc_builder_end_vector@@Base+0xa4>
  40673d:	mov    WORD PTR [rbx+0xe8],dx
  406744:	movzx  edx,WORD PTR [rax+0xc]
  406748:	dec    DWORD PTR [rbx+0x104]
  40674e:	sub    rax,0x24
  406752:	mov    QWORD PTR [rbx+0x30],rax
  406756:	mov    WORD PTR [rbx+0xea],dx
  40675d:	add    rsp,0x8
  406761:	mov    eax,ebp
  406763:	pop    rbx
  406764:	pop    rbp
  406765:	ret    
  406766:	lea    rcx,[rip+0x3443]        # 409bb0 <_IO_stdin_used@@Base+0xbb0>
  40676d:	mov    edx,0x578
  406772:	lea    rsi,[rip+0x2d57]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  406779:	lea    rdi,[rip+0x2e30]        # 4095b0 <_IO_stdin_used@@Base+0x5b0>
  406780:	call   403190 <__assert_fail@plt>
  406785:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406790 <flatcc_builder_vector_count@@Base>:
  406790:	endbr64 
  406794:	mov    rax,QWORD PTR [rdi+0x30]
  406798:	mov    eax,DWORD PTR [rax+0x14]
  40679b:	ret    
  40679c:	nop    DWORD PTR [rax+0x0]

00000000004067a0 <flatcc_builder_vector_edit@@Base>:
  4067a0:	endbr64 
  4067a4:	mov    rax,QWORD PTR [rdi+0x18]
  4067a8:	ret    
  4067a9:	nop    DWORD PTR [rax+0x0]

00000000004067b0 <flatcc_builder_create_offset_vector_direct@@Base>:
  4067b0:	endbr64 
  4067b4:	xor    ecx,ecx
  4067b6:	jmp    4040c0 <flatcc_builder_default_alloc@@Base+0x450>
  4067bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004067c0 <flatcc_builder_end_offset_vector@@Base>:
  4067c0:	endbr64 
  4067c4:	push   rbp
  4067c5:	push   rbx
  4067c6:	sub    rsp,0x8
  4067ca:	mov    rax,QWORD PTR [rdi+0x30]
  4067ce:	cmp    WORD PTR [rax+0xe],0x5
  4067d3:	jne    406876 <flatcc_builder_end_offset_vector@@Base+0xb6>
  4067d9:	mov    edx,DWORD PTR [rax+0x14]
  4067dc:	mov    rsi,QWORD PTR [rdi+0x18]
  4067e0:	mov    rbx,rdi
  4067e3:	call   4067b0 <flatcc_builder_create_offset_vector_direct@@Base>
  4067e8:	mov    ebp,eax
  4067ea:	test   eax,eax
  4067ec:	jne    406800 <flatcc_builder_end_offset_vector@@Base+0x40>
  4067ee:	add    rsp,0x8
  4067f2:	pop    rbx
  4067f3:	mov    eax,ebp
  4067f5:	pop    rbp
  4067f6:	ret    
  4067f7:	nop    WORD PTR [rax+rax*1+0x0]
  406800:	mov    edx,DWORD PTR [rbx+0x20]
  406803:	mov    rdi,QWORD PTR [rbx+0x18]
  406807:	xor    esi,esi
  406809:	call   4031a0 <memset@plt>
  40680e:	mov    rax,QWORD PTR [rbx+0x30]
  406812:	mov    edi,DWORD PTR [rbx+0x70]
  406815:	mov    edx,DWORD PTR [rax+0x8]
  406818:	mov    esi,DWORD PTR [rax]
  40681a:	mov    ecx,DWORD PTR [rax+0x4]
  40681d:	mov    DWORD PTR [rbx+0x20],edx
  406820:	mov    rdx,rsi
  406823:	sub    edi,edx
  406825:	mov    DWORD PTR [rbx+0x28],esi
  406828:	mov    edx,edi
  40682a:	add    rsi,QWORD PTR [rbx+0x68]
  40682e:	cmp    ecx,edi
  406830:	cmovb  edx,ecx
  406833:	mov    QWORD PTR [rbx+0x18],rsi
  406837:	mov    DWORD PTR [rbx+0x24],edx
  40683a:	movzx  edx,WORD PTR [rbx+0xea]
  406841:	mov    DWORD PTR [rax+0x4],ecx
  406844:	cmp    dx,WORD PTR [rbx+0xe8]
  40684b:	jbe    406854 <flatcc_builder_end_offset_vector@@Base+0x94>
  40684d:	mov    WORD PTR [rbx+0xe8],dx
  406854:	movzx  edx,WORD PTR [rax+0xc]
  406858:	dec    DWORD PTR [rbx+0x104]
  40685e:	sub    rax,0x24
  406862:	mov    QWORD PTR [rbx+0x30],rax
  406866:	mov    WORD PTR [rbx+0xea],dx
  40686d:	add    rsp,0x8
  406871:	mov    eax,ebp
  406873:	pop    rbx
  406874:	pop    rbp
  406875:	ret    
  406876:	lea    rcx,[rip+0x32e3]        # 409b60 <_IO_stdin_used@@Base+0xb60>
  40687d:	mov    edx,0x5c8
  406882:	lea    rsi,[rip+0x2c47]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  406889:	lea    rdi,[rip+0x2d90]        # 409620 <_IO_stdin_used@@Base+0x620>
  406890:	call   403190 <__assert_fail@plt>
  406895:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004068a0 <flatcc_builder_create_offset_vector@@Base>:
  4068a0:	endbr64 
  4068a4:	push   r12
  4068a6:	mov    r12,rsi
  4068a9:	push   rbp
  4068aa:	mov    rbp,rdx
  4068ad:	push   rbx
  4068ae:	mov    rbx,rdi
  4068b1:	call   405860 <flatcc_builder_start_offset_vector@@Base>
  4068b6:	test   eax,eax
  4068b8:	je     4068c8 <flatcc_builder_create_offset_vector@@Base+0x28>
  4068ba:	pop    rbx
  4068bb:	pop    rbp
  4068bc:	xor    eax,eax
  4068be:	pop    r12
  4068c0:	ret    
  4068c1:	nop    DWORD PTR [rax+0x0]
  4068c8:	mov    rsi,rbp
  4068cb:	mov    rdi,rbx
  4068ce:	call   405310 <flatcc_builder_extend_offset_vector@@Base>
  4068d3:	test   rax,rax
  4068d6:	je     4068ba <flatcc_builder_create_offset_vector@@Base+0x1a>
  4068d8:	lea    rdx,[rbp*4+0x0]
  4068e0:	mov    rsi,r12
  4068e3:	mov    rdi,rax
  4068e6:	call   4031e0 <memcpy@plt>
  4068eb:	mov    rdi,rbx
  4068ee:	pop    rbx
  4068ef:	pop    rbp
  4068f0:	pop    r12
  4068f2:	jmp    4067c0 <flatcc_builder_end_offset_vector@@Base>
  4068f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406900 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  406900:	endbr64 
  406904:	push   rbp
  406905:	push   rbx
  406906:	sub    rsp,0x8
  40690a:	mov    rax,QWORD PTR [rdi+0x30]
  40690e:	cmp    WORD PTR [rax+0xe],0x5
  406913:	jne    4069b6 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb6>
  406919:	mov    rcx,rsi
  40691c:	mov    edx,DWORD PTR [rax+0x14]
  40691f:	mov    rsi,QWORD PTR [rdi+0x18]
  406923:	mov    rbx,rdi
  406926:	call   4040c0 <flatcc_builder_default_alloc@@Base+0x450>
  40692b:	mov    ebp,eax
  40692d:	test   eax,eax
  40692f:	jne    406940 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
  406931:	add    rsp,0x8
  406935:	pop    rbx
  406936:	mov    eax,ebp
  406938:	pop    rbp
  406939:	ret    
  40693a:	nop    WORD PTR [rax+rax*1+0x0]
  406940:	mov    edx,DWORD PTR [rbx+0x20]
  406943:	mov    rdi,QWORD PTR [rbx+0x18]
  406947:	xor    esi,esi
  406949:	call   4031a0 <memset@plt>
  40694e:	mov    rax,QWORD PTR [rbx+0x30]
  406952:	mov    edi,DWORD PTR [rbx+0x70]
  406955:	mov    edx,DWORD PTR [rax+0x8]
  406958:	mov    esi,DWORD PTR [rax]
  40695a:	mov    ecx,DWORD PTR [rax+0x4]
  40695d:	mov    DWORD PTR [rbx+0x20],edx
  406960:	mov    rdx,rsi
  406963:	sub    edi,edx
  406965:	mov    DWORD PTR [rbx+0x28],esi
  406968:	mov    edx,edi
  40696a:	add    rsi,QWORD PTR [rbx+0x68]
  40696e:	cmp    ecx,edi
  406970:	cmovb  edx,ecx
  406973:	mov    QWORD PTR [rbx+0x18],rsi
  406977:	mov    DWORD PTR [rbx+0x24],edx
  40697a:	movzx  edx,WORD PTR [rbx+0xea]
  406981:	mov    DWORD PTR [rax+0x4],ecx
  406984:	cmp    dx,WORD PTR [rbx+0xe8]
  40698b:	jbe    406994 <flatcc_builder_end_offset_vector_for_unions@@Base+0x94>
  40698d:	mov    WORD PTR [rbx+0xe8],dx
  406994:	movzx  edx,WORD PTR [rax+0xc]
  406998:	dec    DWORD PTR [rbx+0x104]
  40699e:	sub    rax,0x24
  4069a2:	mov    QWORD PTR [rbx+0x30],rax
  4069a6:	mov    WORD PTR [rbx+0xea],dx
  4069ad:	add    rsp,0x8
  4069b1:	mov    eax,ebp
  4069b3:	pop    rbx
  4069b4:	pop    rbp
  4069b5:	ret    
  4069b6:	lea    rcx,[rip+0x3163]        # 409b20 <_IO_stdin_used@@Base+0xb20>
  4069bd:	mov    edx,0x5d5
  4069c2:	lea    rsi,[rip+0x2b07]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4069c9:	lea    rdi,[rip+0x2c50]        # 409620 <_IO_stdin_used@@Base+0x620>
  4069d0:	call   403190 <__assert_fail@plt>
  4069d5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004069e0 <flatcc_builder_offset_vector_edit@@Base>:
  4069e0:	endbr64 
  4069e4:	mov    rax,QWORD PTR [rdi+0x18]
  4069e8:	ret    
  4069e9:	nop    DWORD PTR [rax+0x0]

00000000004069f0 <flatcc_builder_offset_vector_count@@Base>:
  4069f0:	endbr64 
  4069f4:	mov    rax,QWORD PTR [rdi+0x30]
  4069f8:	mov    eax,DWORD PTR [rax+0x14]
  4069fb:	ret    
  4069fc:	nop    DWORD PTR [rax+0x0]

0000000000406a00 <flatcc_builder_create_union_vector_direct@@Base>:
  406a00:	endbr64 
  406a04:	push   r13
  406a06:	mov    r13,rcx
  406a09:	push   r12
  406a0b:	mov    r12,rsi
  406a0e:	mov    rcx,r12
  406a11:	push   rbp
  406a12:	mov    rsi,rdx
  406a15:	mov    rdx,r13
  406a18:	push   rbx
  406a19:	mov    rbp,rdi
  406a1c:	sub    rsp,0x8
  406a20:	call   4040c0 <flatcc_builder_default_alloc@@Base+0x450>
  406a25:	test   eax,eax
  406a27:	jne    406a40 <flatcc_builder_create_union_vector_direct@@Base+0x40>
  406a29:	add    rsp,0x8
  406a2d:	pop    rbx
  406a2e:	pop    rbp
  406a2f:	pop    r12
  406a31:	xor    eax,eax
  406a33:	pop    r13
  406a35:	ret    
  406a36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406a40:	mov    rdx,r13
  406a43:	mov    rsi,r12
  406a46:	mov    rdi,rbp
  406a49:	mov    r9d,0xffffffff
  406a4f:	mov    r8d,0x1
  406a55:	mov    ecx,0x1
  406a5a:	mov    ebx,eax
  406a5c:	call   406510 <flatcc_builder_create_vector@@Base>
  406a61:	mov    edx,eax
  406a63:	mov    rsi,rbx
  406a66:	shl    rsi,0x20
  406a6a:	mov    rax,rdx
  406a6d:	or     rax,rsi
  406a70:	test   edx,edx
  406a72:	mov    rdx,rax
  406a75:	mov    rax,rsi
  406a78:	cmovne rax,rdx
  406a7c:	add    rsp,0x8
  406a80:	pop    rbx
  406a81:	pop    rbp
  406a82:	pop    r12
  406a84:	pop    r13
  406a86:	ret    
  406a87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406a90 <flatcc_builder_create_union_vector@@Base>:
  406a90:	endbr64 
  406a94:	push   r13
  406a96:	push   r12
  406a98:	mov    r12,rdx
  406a9b:	push   rbp
  406a9c:	mov    rbp,rsi
  406a9f:	push   rbx
  406aa0:	mov    rbx,rdi
  406aa3:	sub    rsp,0x8
  406aa7:	call   405860 <flatcc_builder_start_offset_vector@@Base>
  406aac:	test   eax,eax
  406aae:	je     406ac0 <flatcc_builder_create_union_vector@@Base+0x30>
  406ab0:	add    rsp,0x8
  406ab4:	pop    rbx
  406ab5:	pop    rbp
  406ab6:	pop    r12
  406ab8:	xor    eax,eax
  406aba:	pop    r13
  406abc:	ret    
  406abd:	nop    DWORD PTR [rax]
  406ac0:	mov    rsi,r12
  406ac3:	mov    rdi,rbx
  406ac6:	call   405310 <flatcc_builder_extend_offset_vector@@Base>
  406acb:	test   rax,rax
  406ace:	je     406ab0 <flatcc_builder_create_union_vector@@Base+0x20>
  406ad0:	mov    r13d,DWORD PTR [rbx+0x20]
  406ad4:	mov    rax,r13
  406ad7:	add    eax,r12d
  406ada:	mov    DWORD PTR [rbx+0x20],eax
  406add:	cmp    eax,DWORD PTR [rbx+0x24]
  406ae0:	jae    406bb0 <flatcc_builder_create_union_vector@@Base+0x120>
  406ae6:	add    r13,QWORD PTR [rbx+0x18]
  406aea:	je     406ab0 <flatcc_builder_create_union_vector@@Base+0x20>
  406aec:	mov    rdi,rbx
  406aef:	call   4069e0 <flatcc_builder_offset_vector_edit@@Base>
  406af4:	test   r12,r12
  406af7:	je     406b19 <flatcc_builder_create_union_vector@@Base+0x89>
  406af9:	xor    edi,edi
  406afb:	nop    DWORD PTR [rax+rax*1+0x0]
  406b00:	movzx  ecx,BYTE PTR [rbp+rdi*8+0x0]
  406b05:	mov    BYTE PTR [r13+rdi*1+0x0],cl
  406b0a:	mov    ecx,DWORD PTR [rbp+rdi*8+0x4]
  406b0e:	mov    DWORD PTR [rax+rdi*4],ecx
  406b11:	inc    rdi
  406b14:	cmp    r12,rdi
  406b17:	jne    406b00 <flatcc_builder_create_union_vector@@Base+0x70>
  406b19:	mov    rcx,r12
  406b1c:	mov    rdx,rax
  406b1f:	mov    rsi,r13
  406b22:	mov    rdi,rbx
  406b25:	call   406a00 <flatcc_builder_create_union_vector_direct@@Base>
  406b2a:	mov    edx,DWORD PTR [rbx+0x20]
  406b2d:	mov    rdi,QWORD PTR [rbx+0x18]
  406b31:	xor    esi,esi
  406b33:	mov    rbp,rax
  406b36:	call   4031a0 <memset@plt>
  406b3b:	mov    rax,QWORD PTR [rbx+0x30]
  406b3f:	mov    edx,DWORD PTR [rax+0x8]
  406b42:	mov    esi,DWORD PTR [rax]
  406b44:	mov    DWORD PTR [rbx+0x20],edx
  406b47:	mov    DWORD PTR [rbx+0x28],esi
  406b4a:	mov    rdx,rsi
  406b4d:	add    rsi,QWORD PTR [rbx+0x68]
  406b51:	mov    ecx,DWORD PTR [rax+0x4]
  406b54:	mov    QWORD PTR [rbx+0x18],rsi
  406b58:	mov    esi,DWORD PTR [rbx+0x70]
  406b5b:	sub    esi,edx
  406b5d:	mov    edx,esi
  406b5f:	cmp    ecx,esi
  406b61:	cmovb  edx,ecx
  406b64:	mov    DWORD PTR [rbx+0x24],edx
  406b67:	movzx  edx,WORD PTR [rbx+0xea]
  406b6e:	mov    DWORD PTR [rax+0x4],ecx
  406b71:	cmp    dx,WORD PTR [rbx+0xe8]
  406b78:	jbe    406b81 <flatcc_builder_create_union_vector@@Base+0xf1>
  406b7a:	mov    WORD PTR [rbx+0xe8],dx
  406b81:	movzx  edx,WORD PTR [rax+0xc]
  406b85:	sub    rax,0x24
  406b89:	mov    QWORD PTR [rbx+0x30],rax
  406b8d:	mov    WORD PTR [rbx+0xea],dx
  406b94:	dec    DWORD PTR [rbx+0x104]
  406b9a:	add    rsp,0x8
  406b9e:	pop    rbx
  406b9f:	mov    rax,rbp
  406ba2:	pop    rbp
  406ba3:	pop    r12
  406ba5:	pop    r13
  406ba7:	ret    
  406ba8:	nop    DWORD PTR [rax+rax*1+0x0]
  406bb0:	lea    esi,[rax+0x1]
  406bb3:	mov    edx,0xfffffffc
  406bb8:	mov    rdi,rbx
  406bbb:	call   403c10 <_start@@Base+0x3b0>
  406bc0:	test   eax,eax
  406bc2:	je     406ae6 <flatcc_builder_create_union_vector@@Base+0x56>
  406bc8:	jmp    406ab0 <flatcc_builder_create_union_vector@@Base+0x20>
  406bcd:	nop    DWORD PTR [rax]

0000000000406bd0 <flatcc_builder_start_union_vector@@Base>:
  406bd0:	endbr64 
  406bd4:	push   rbx
  406bd5:	mov    esi,0x4
  406bda:	mov    rbx,rdi
  406bdd:	call   403fa0 <flatcc_builder_default_alloc@@Base+0x330>
  406be2:	test   eax,eax
  406be4:	jne    406c20 <flatcc_builder_start_union_vector@@Base+0x50>
  406be6:	mov    rcx,QWORD PTR [rbx+0x30]
  406bea:	xor    edx,edx
  406bec:	mov    QWORD PTR [rcx+0xe],0x80007
  406bf4:	mov    WORD PTR [rcx+0x16],dx
  406bf8:	mov    edx,DWORD PTR [rbx+0x28]
  406bfb:	mov    rsi,rdx
  406bfe:	add    rdx,QWORD PTR [rbx+0x68]
  406c02:	mov    QWORD PTR [rbx+0x18],rdx
  406c06:	mov    edx,DWORD PTR [rbx+0x70]
  406c09:	sub    edx,esi
  406c0b:	mov    esi,0xfffffffc
  406c10:	cmp    edx,esi
  406c12:	cmova  edx,esi
  406c15:	mov    DWORD PTR [rbx+0x24],edx
  406c18:	mov    DWORD PTR [rcx+0x4],esi
  406c1b:	pop    rbx
  406c1c:	ret    
  406c1d:	nop    DWORD PTR [rax]
  406c20:	mov    eax,0xffffffff
  406c25:	pop    rbx
  406c26:	ret    
  406c27:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406c30 <flatcc_builder_union_vector_edit@@Base>:
  406c30:	endbr64 
  406c34:	mov    rax,QWORD PTR [rdi+0x18]
  406c38:	ret    
  406c39:	nop    DWORD PTR [rax+0x0]

0000000000406c40 <flatcc_builder_union_vector_count@@Base>:
  406c40:	endbr64 
  406c44:	mov    rax,QWORD PTR [rdi+0x30]
  406c48:	mov    eax,DWORD PTR [rax+0x14]
  406c4b:	ret    
  406c4c:	nop    DWORD PTR [rax+0x0]

0000000000406c50 <flatcc_builder_end_union_vector@@Base>:
  406c50:	endbr64 
  406c54:	push   r13
  406c56:	push   r12
  406c58:	push   rbp
  406c59:	push   rbx
  406c5a:	sub    rsp,0x8
  406c5e:	mov    rax,QWORD PTR [rdi+0x30]
  406c62:	cmp    WORD PTR [rax+0xe],0x7
  406c67:	jne    406d8d <flatcc_builder_end_union_vector@@Base+0x13d>
  406c6d:	mov    rbx,rdi
  406c70:	call   406c40 <flatcc_builder_union_vector_count@@Base>
  406c75:	mov    ebp,DWORD PTR [rbx+0x20]
  406c78:	mov    r12,rax
  406c7b:	lea    eax,[rax+rax*4]
  406c7e:	add    eax,ebp
  406c80:	mov    DWORD PTR [rbx+0x20],eax
  406c83:	cmp    eax,DWORD PTR [rbx+0x24]
  406c86:	jae    406d68 <flatcc_builder_end_union_vector@@Base+0x118>
  406c8c:	add    rbp,QWORD PTR [rbx+0x18]
  406c90:	je     406d80 <flatcc_builder_end_union_vector@@Base+0x130>
  406c96:	mov    rdi,rbx
  406c99:	lea    r13,[rbp+r12*4+0x0]
  406c9e:	call   406c30 <flatcc_builder_union_vector_edit@@Base>
  406ca3:	test   r12,r12
  406ca6:	je     406ccc <flatcc_builder_end_union_vector@@Base+0x7c>
  406ca8:	xor    edi,edi
  406caa:	nop    WORD PTR [rax+rax*1+0x0]
  406cb0:	movzx  r8d,BYTE PTR [rax+rdi*8]
  406cb5:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  406cba:	mov    r8d,DWORD PTR [rax+rdi*8+0x4]
  406cbf:	mov    DWORD PTR [rbp+rdi*4+0x0],r8d
  406cc4:	inc    rdi
  406cc7:	cmp    r12,rdi
  406cca:	jne    406cb0 <flatcc_builder_end_union_vector@@Base+0x60>
  406ccc:	mov    rcx,r12
  406ccf:	mov    rdx,rbp
  406cd2:	mov    rsi,r13
  406cd5:	mov    rdi,rbx
  406cd8:	call   406a00 <flatcc_builder_create_union_vector_direct@@Base>
  406cdd:	mov    edx,DWORD PTR [rbx+0x20]
  406ce0:	mov    rdi,QWORD PTR [rbx+0x18]
  406ce4:	xor    esi,esi
  406ce6:	mov    rbp,rax
  406ce9:	call   4031a0 <memset@plt>
  406cee:	mov    rdx,QWORD PTR [rbx+0x30]
  406cf2:	mov    esi,DWORD PTR [rdx]
  406cf4:	mov    eax,DWORD PTR [rdx+0x8]
  406cf7:	mov    rcx,rsi
  406cfa:	mov    DWORD PTR [rbx+0x28],esi
  406cfd:	add    rsi,QWORD PTR [rbx+0x68]
  406d01:	mov    DWORD PTR [rbx+0x20],eax
  406d04:	mov    eax,DWORD PTR [rdx+0x4]
  406d07:	mov    QWORD PTR [rbx+0x18],rsi
  406d0b:	mov    esi,DWORD PTR [rbx+0x70]
  406d0e:	sub    esi,ecx
  406d10:	cmp    eax,esi
  406d12:	mov    ecx,esi
  406d14:	cmovb  ecx,eax
  406d17:	mov    DWORD PTR [rbx+0x24],ecx
  406d1a:	mov    DWORD PTR [rdx+0x4],eax
  406d1d:	movzx  eax,WORD PTR [rbx+0xea]
  406d24:	cmp    ax,WORD PTR [rbx+0xe8]
  406d2b:	ja     406d58 <flatcc_builder_end_union_vector@@Base+0x108>
  406d2d:	movzx  eax,WORD PTR [rdx+0xc]
  406d31:	dec    DWORD PTR [rbx+0x104]
  406d37:	sub    rdx,0x24
  406d3b:	mov    WORD PTR [rbx+0xea],ax
  406d42:	mov    QWORD PTR [rbx+0x30],rdx
  406d46:	add    rsp,0x8
  406d4a:	mov    rax,rbp
  406d4d:	pop    rbx
  406d4e:	pop    rbp
  406d4f:	pop    r12
  406d51:	pop    r13
  406d53:	ret    
  406d54:	nop    DWORD PTR [rax+0x0]
  406d58:	mov    WORD PTR [rbx+0xe8],ax
  406d5f:	jmp    406d2d <flatcc_builder_end_union_vector@@Base+0xdd>
  406d61:	nop    DWORD PTR [rax+0x0]
  406d68:	lea    esi,[rax+0x1]
  406d6b:	mov    edx,0xfffffffc
  406d70:	mov    rdi,rbx
  406d73:	call   403c10 <_start@@Base+0x3b0>
  406d78:	test   eax,eax
  406d7a:	je     406c8c <flatcc_builder_end_union_vector@@Base+0x3c>
  406d80:	add    rsp,0x8
  406d84:	pop    rbx
  406d85:	pop    rbp
  406d86:	pop    r12
  406d88:	xor    eax,eax
  406d8a:	pop    r13
  406d8c:	ret    
  406d8d:	lea    rcx,[rip+0x2d0c]        # 409aa0 <_IO_stdin_used@@Base+0xaa0>
  406d94:	mov    edx,0x651
  406d99:	lea    rsi,[rip+0x2730]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  406da0:	lea    rdi,[rip+0x29a1]        # 409748 <_IO_stdin_used@@Base+0x748>
  406da7:	call   403190 <__assert_fail@plt>
  406dac:	nop    DWORD PTR [rax+0x0]

0000000000406db0 <flatcc_builder_extend_union_vector@@Base>:
  406db0:	endbr64 
  406db4:	push   rbp
  406db5:	mov    edx,esi
  406db7:	push   rbx
  406db8:	sub    rsp,0x8
  406dbc:	mov    rax,QWORD PTR [rdi+0x30]
  406dc0:	add    edx,DWORD PTR [rax+0x14]
  406dc3:	jb     406e05 <flatcc_builder_extend_union_vector@@Base+0x55>
  406dc5:	cmp    edx,0x1fffffff
  406dcb:	ja     406e05 <flatcc_builder_extend_union_vector@@Base+0x55>
  406dcd:	mov    ebp,DWORD PTR [rdi+0x20]
  406dd0:	mov    DWORD PTR [rax+0x14],edx
  406dd3:	lea    eax,[rbp+rsi*8+0x0]
  406dd7:	mov    rbx,rdi
  406dda:	mov    DWORD PTR [rdi+0x20],eax
  406ddd:	cmp    eax,DWORD PTR [rdi+0x24]
  406de0:	jae    406df0 <flatcc_builder_extend_union_vector@@Base+0x40>
  406de2:	mov    rax,QWORD PTR [rbx+0x18]
  406de6:	add    rax,rbp
  406de9:	add    rsp,0x8
  406ded:	pop    rbx
  406dee:	pop    rbp
  406def:	ret    
  406df0:	lea    esi,[rax+0x1]
  406df3:	mov    edx,0xfffffffc
  406df8:	call   403c10 <_start@@Base+0x3b0>
  406dfd:	test   eax,eax
  406dff:	je     406de2 <flatcc_builder_extend_union_vector@@Base+0x32>
  406e01:	xor    eax,eax
  406e03:	jmp    406de9 <flatcc_builder_extend_union_vector@@Base+0x39>
  406e05:	call   403f70 <flatcc_builder_default_alloc@@Base+0x300>
  406e0a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406e10 <flatcc_builder_truncate_union_vector@@Base>:
  406e10:	endbr64 
  406e14:	sub    rsp,0x8
  406e18:	mov    rax,QWORD PTR [rdi+0x30]
  406e1c:	cmp    WORD PTR [rax+0xe],0x7
  406e21:	jne    406e52 <flatcc_builder_truncate_union_vector@@Base+0x42>
  406e23:	mov    edx,DWORD PTR [rax+0x14]
  406e26:	cmp    edx,esi
  406e28:	jb     406e71 <flatcc_builder_truncate_union_vector@@Base+0x61>
  406e2a:	sub    edx,esi
  406e2c:	mov    DWORD PTR [rax+0x14],edx
  406e2f:	imul   esi,DWORD PTR [rax+0x10]
  406e33:	mov    eax,DWORD PTR [rdi+0x20]
  406e36:	mov    edx,esi
  406e38:	sub    eax,esi
  406e3a:	mov    DWORD PTR [rdi+0x20],eax
  406e3d:	add    rax,QWORD PTR [rdi+0x18]
  406e41:	mov    rdi,rax
  406e44:	xor    esi,esi
  406e46:	call   4031a0 <memset@plt>
  406e4b:	xor    eax,eax
  406e4d:	add    rsp,0x8
  406e51:	ret    
  406e52:	lea    rcx,[rip+0x2c07]        # 409a60 <_IO_stdin_used@@Base+0xa60>
  406e59:	mov    edx,0x681
  406e5e:	lea    rsi,[rip+0x266b]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  406e65:	lea    rdi,[rip+0x28dc]        # 409748 <_IO_stdin_used@@Base+0x748>
  406e6c:	call   403190 <__assert_fail@plt>
  406e71:	lea    rcx,[rip+0x2be8]        # 409a60 <_IO_stdin_used@@Base+0xa60>
  406e78:	mov    edx,0x682
  406e7d:	lea    rsi,[rip+0x264c]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  406e84:	lea    rdi,[rip+0x2825]        # 4096b0 <_IO_stdin_used@@Base+0x6b0>
  406e8b:	call   403190 <__assert_fail@plt>

0000000000406e90 <flatcc_builder_union_vector_push@@Base>:
  406e90:	endbr64 
  406e94:	push   r12
  406e96:	push   rbp
  406e97:	push   rbx
  406e98:	mov    rdx,QWORD PTR [rdi+0x30]
  406e9c:	cmp    WORD PTR [rdx+0xe],0x7
  406ea1:	jne    406ef8 <flatcc_builder_union_vector_push@@Base+0x68>
  406ea3:	mov    eax,DWORD PTR [rdx+0x14]
  406ea6:	cmp    eax,0x1fffffff
  406eab:	je     406ef1 <flatcc_builder_union_vector_push@@Base+0x61>
  406ead:	mov    ebp,DWORD PTR [rdi+0x20]
  406eb0:	inc    eax
  406eb2:	mov    DWORD PTR [rdx+0x14],eax
  406eb5:	lea    edx,[rbp+0x8]
  406eb8:	mov    rbx,rdi
  406ebb:	mov    r12,rsi
  406ebe:	mov    DWORD PTR [rdi+0x20],edx
  406ec1:	cmp    edx,DWORD PTR [rdi+0x24]
  406ec4:	jae    406ee0 <flatcc_builder_union_vector_push@@Base+0x50>
  406ec6:	mov    rax,rbp
  406ec9:	add    rax,QWORD PTR [rbx+0x18]
  406ecd:	je     406ed2 <flatcc_builder_union_vector_push@@Base+0x42>
  406ecf:	mov    QWORD PTR [rax],r12
  406ed2:	pop    rbx
  406ed3:	pop    rbp
  406ed4:	pop    r12
  406ed6:	ret    
  406ed7:	nop    WORD PTR [rax+rax*1+0x0]
  406ee0:	lea    esi,[rbp+0x9]
  406ee3:	mov    edx,0xfffffffc
  406ee8:	call   403c10 <_start@@Base+0x3b0>
  406eed:	test   eax,eax
  406eef:	je     406ec6 <flatcc_builder_union_vector_push@@Base+0x36>
  406ef1:	pop    rbx
  406ef2:	pop    rbp
  406ef3:	xor    eax,eax
  406ef5:	pop    r12
  406ef7:	ret    
  406ef8:	lea    rcx,[rip+0x2b21]        # 409a20 <_IO_stdin_used@@Base+0xa20>
  406eff:	mov    edx,0x68d
  406f04:	lea    rsi,[rip+0x25c5]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  406f0b:	lea    rdi,[rip+0x2836]        # 409748 <_IO_stdin_used@@Base+0x748>
  406f12:	call   403190 <__assert_fail@plt>
  406f17:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406f20 <flatcc_builder_append_union_vector@@Base>:
  406f20:	endbr64 
  406f24:	push   r13
  406f26:	push   r12
  406f28:	push   rbp
  406f29:	push   rbx
  406f2a:	sub    rsp,0x8
  406f2e:	mov    rax,QWORD PTR [rdi+0x30]
  406f32:	cmp    WORD PTR [rax+0xe],0x7
  406f37:	jne    406fa6 <flatcc_builder_append_union_vector@@Base+0x86>
  406f39:	mov    ecx,edx
  406f3b:	add    ecx,DWORD PTR [rax+0x14]
  406f3e:	jb     406fc5 <flatcc_builder_append_union_vector@@Base+0xa5>
  406f44:	cmp    ecx,0x1fffffff
  406f4a:	ja     406fc5 <flatcc_builder_append_union_vector@@Base+0xa5>
  406f4c:	mov    r12d,DWORD PTR [rdi+0x20]
  406f50:	lea    ebx,[rdx*8+0x0]
  406f57:	mov    rdx,r12
  406f5a:	add    edx,ebx
  406f5c:	mov    DWORD PTR [rax+0x14],ecx
  406f5f:	mov    rbp,rdi
  406f62:	mov    r13,rsi
  406f65:	mov    DWORD PTR [rdi+0x20],edx
  406f68:	cmp    edx,DWORD PTR [rdi+0x24]
  406f6b:	jae    406f90 <flatcc_builder_append_union_vector@@Base+0x70>
  406f6d:	add    r12,QWORD PTR [rbp+0x18]
  406f71:	je     406f80 <flatcc_builder_append_union_vector@@Base+0x60>
  406f73:	mov    edx,ebx
  406f75:	mov    rsi,r13
  406f78:	mov    rdi,r12
  406f7b:	call   4031e0 <memcpy@plt>
  406f80:	add    rsp,0x8
  406f84:	pop    rbx
  406f85:	pop    rbp
  406f86:	mov    rax,r12
  406f89:	pop    r12
  406f8b:	pop    r13
  406f8d:	ret    
  406f8e:	xchg   ax,ax
  406f90:	lea    esi,[rdx+0x1]
  406f93:	mov    edx,0xfffffffc
  406f98:	call   403c10 <_start@@Base+0x3b0>
  406f9d:	test   eax,eax
  406f9f:	je     406f6d <flatcc_builder_append_union_vector@@Base+0x4d>
  406fa1:	xor    r12d,r12d
  406fa4:	jmp    406f80 <flatcc_builder_append_union_vector@@Base+0x60>
  406fa6:	lea    rcx,[rip+0x2a33]        # 4099e0 <_IO_stdin_used@@Base+0x9e0>
  406fad:	mov    edx,0x69c
  406fb2:	lea    rsi,[rip+0x2517]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  406fb9:	lea    rdi,[rip+0x2788]        # 409748 <_IO_stdin_used@@Base+0x748>
  406fc0:	call   403190 <__assert_fail@plt>
  406fc5:	call   403f70 <flatcc_builder_default_alloc@@Base+0x300>
  406fca:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406fd0 <flatcc_builder_create_string@@Base>:
  406fd0:	endbr64 
  406fd4:	push   rbp
  406fd5:	push   rbx
  406fd6:	sub    rsp,0xb8
  406fdd:	mov    rax,QWORD PTR fs:0x28
  406fe6:	mov    QWORD PTR [rsp+0xa8],rax
  406fee:	xor    eax,eax
  406ff0:	mov    eax,0xffffffff
  406ff5:	cmp    rdx,rax
  406ff8:	ja     4070c0 <flatcc_builder_create_string@@Base+0xf0>
  406ffe:	mov    rbx,rdi
  407001:	mov    edi,DWORD PTR [rdi+0xf0]
  407007:	lea    rcx,[rsp+0xc]
  40700c:	lea    eax,[rdi-0x1]
  40700f:	sub    eax,edx
  407011:	and    eax,0x3
  407014:	mov    DWORD PTR [rsp+0xc],edx
  407018:	inc    eax
  40701a:	mov    QWORD PTR [rsp+0x20],rcx
  40701f:	mov    QWORD PTR [rsp+0x28],0x4
  407028:	test   rdx,rdx
  40702b:	jne    4070a0 <flatcc_builder_create_string@@Base+0xd0>
  40702d:	mov    edx,0x2
  407032:	mov    ecx,0x1
  407037:	mov    r8d,0x4
  40703d:	add    r8,rax
  407040:	mov    rsi,0x409fc0
  407047:	mov    ebp,edi
  407049:	shl    rcx,0x4
  40704d:	sub    ebp,r8d
  407050:	mov    QWORD PTR [rsp+0x10],r8
  407055:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  40705a:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  40705f:	mov    DWORD PTR [rsp+0x18],edx
  407063:	cmp    edi,ebp
  407065:	jle    4070c4 <flatcc_builder_create_string@@Base+0xf4>
  407067:	mov    rdi,QWORD PTR [rbx+0x38]
  40706b:	lea    rsi,[rsp+0x20]
  407070:	mov    ecx,ebp
  407072:	call   QWORD PTR [rbx+0x48]
  407075:	test   eax,eax
  407077:	jne    4070e8 <flatcc_builder_create_string@@Base+0x118>
  407079:	mov    DWORD PTR [rbx+0xf0],ebp
  40707f:	mov    rbx,QWORD PTR [rsp+0xa8]
  407087:	xor    rbx,QWORD PTR fs:0x28
  407090:	mov    eax,ebp
  407092:	jne    4070e3 <flatcc_builder_create_string@@Base+0x113>
  407094:	add    rsp,0xb8
  40709b:	pop    rbx
  40709c:	pop    rbp
  40709d:	ret    
  40709e:	xchg   ax,ax
  4070a0:	lea    r8,[rdx+0x4]
  4070a4:	mov    QWORD PTR [rsp+0x38],rdx
  4070a9:	mov    QWORD PTR [rsp+0x30],rsi
  4070ae:	mov    edx,0x3
  4070b3:	mov    ecx,0x2
  4070b8:	jmp    40703d <flatcc_builder_create_string@@Base+0x6d>
  4070bd:	nop    DWORD PTR [rax]
  4070c0:	xor    ebp,ebp
  4070c2:	jmp    40707f <flatcc_builder_create_string@@Base+0xaf>
  4070c4:	lea    rcx,[rip+0x2e45]        # 409f10 <_IO_stdin_used@@Base+0xf10>
  4070cb:	mov    edx,0x287
  4070d0:	lea    rsi,[rip+0x23f9]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4070d7:	lea    rdi,[rip+0x2789]        # 409867 <_IO_stdin_used@@Base+0x867>
  4070de:	call   403190 <__assert_fail@plt>
  4070e3:	call   403170 <__stack_chk_fail@plt>
  4070e8:	call   403f40 <flatcc_builder_default_alloc@@Base+0x2d0>
  4070ed:	nop    DWORD PTR [rax]

00000000004070f0 <flatcc_builder_create_string_str@@Base>:
  4070f0:	endbr64 
  4070f4:	push   rbp
  4070f5:	mov    rbp,rdi
  4070f8:	mov    rdi,rsi
  4070fb:	push   rbx
  4070fc:	mov    rbx,rsi
  4070ff:	sub    rsp,0x8
  407103:	call   403160 <strlen@plt>
  407108:	add    rsp,0x8
  40710c:	mov    rsi,rbx
  40710f:	pop    rbx
  407110:	mov    rdi,rbp
  407113:	mov    rdx,rax
  407116:	pop    rbp
  407117:	jmp    406fd0 <flatcc_builder_create_string@@Base>
  40711c:	nop    DWORD PTR [rax+0x0]

0000000000407120 <flatcc_builder_create_string_strn@@Base>:
  407120:	endbr64 
  407124:	push   r12
  407126:	mov    r12,rdi
  407129:	push   rbp
  40712a:	mov    rbp,rsi
  40712d:	mov    rdi,rbp
  407130:	push   rbx
  407131:	xor    esi,esi
  407133:	mov    rbx,rdx
  407136:	call   4031b0 <memchr@plt>
  40713b:	mov    rdx,rax
  40713e:	sub    rdx,rbp
  407141:	test   rax,rax
  407144:	cmovne rbx,rdx
  407148:	mov    rsi,rbp
  40714b:	mov    rdx,rbx
  40714e:	pop    rbx
  40714f:	pop    rbp
  407150:	mov    rdi,r12
  407153:	pop    r12
  407155:	jmp    406fd0 <flatcc_builder_create_string@@Base>
  40715a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407160 <flatcc_builder_end_string@@Base>:
  407160:	endbr64 
  407164:	push   rbp
  407165:	push   rbx
  407166:	sub    rsp,0x8
  40716a:	mov    rax,QWORD PTR [rdi+0x30]
  40716e:	cmp    WORD PTR [rax+0xe],0x6
  407173:	jne    407235 <flatcc_builder_end_string@@Base+0xd5>
  407179:	mov    edx,DWORD PTR [rdi+0x20]
  40717c:	mov    rbx,rdi
  40717f:	cmp    DWORD PTR [rax+0x14],edx
  407182:	jne    407216 <flatcc_builder_end_string@@Base+0xb6>
  407188:	mov    rsi,QWORD PTR [rdi+0x18]
  40718c:	call   406fd0 <flatcc_builder_create_string@@Base>
  407191:	mov    ebp,eax
  407193:	test   eax,eax
  407195:	jne    4071a0 <flatcc_builder_end_string@@Base+0x40>
  407197:	add    rsp,0x8
  40719b:	pop    rbx
  40719c:	mov    eax,ebp
  40719e:	pop    rbp
  40719f:	ret    
  4071a0:	mov    edx,DWORD PTR [rbx+0x20]
  4071a3:	mov    rdi,QWORD PTR [rbx+0x18]
  4071a7:	xor    esi,esi
  4071a9:	call   4031a0 <memset@plt>
  4071ae:	mov    rax,QWORD PTR [rbx+0x30]
  4071b2:	mov    edi,DWORD PTR [rbx+0x70]
  4071b5:	mov    edx,DWORD PTR [rax+0x8]
  4071b8:	mov    esi,DWORD PTR [rax]
  4071ba:	mov    ecx,DWORD PTR [rax+0x4]
  4071bd:	mov    DWORD PTR [rbx+0x20],edx
  4071c0:	mov    rdx,rsi
  4071c3:	sub    edi,edx
  4071c5:	mov    DWORD PTR [rbx+0x28],esi
  4071c8:	mov    edx,edi
  4071ca:	add    rsi,QWORD PTR [rbx+0x68]
  4071ce:	cmp    ecx,edi
  4071d0:	cmovb  edx,ecx
  4071d3:	mov    QWORD PTR [rbx+0x18],rsi
  4071d7:	mov    DWORD PTR [rbx+0x24],edx
  4071da:	movzx  edx,WORD PTR [rbx+0xea]
  4071e1:	mov    DWORD PTR [rax+0x4],ecx
  4071e4:	cmp    dx,WORD PTR [rbx+0xe8]
  4071eb:	jbe    4071f4 <flatcc_builder_end_string@@Base+0x94>
  4071ed:	mov    WORD PTR [rbx+0xe8],dx
  4071f4:	movzx  edx,WORD PTR [rax+0xc]
  4071f8:	dec    DWORD PTR [rbx+0x104]
  4071fe:	sub    rax,0x24
  407202:	mov    QWORD PTR [rbx+0x30],rax
  407206:	mov    WORD PTR [rbx+0xea],dx
  40720d:	add    rsp,0x8
  407211:	mov    eax,ebp
  407213:	pop    rbx
  407214:	pop    rbp
  407215:	ret    
  407216:	lea    rcx,[rip+0x27a3]        # 4099c0 <_IO_stdin_used@@Base+0x9c0>
  40721d:	mov    edx,0x6c5
  407222:	lea    rsi,[rip+0x22a7]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407229:	lea    rdi,[rip+0x2550]        # 409780 <_IO_stdin_used@@Base+0x780>
  407230:	call   403190 <__assert_fail@plt>
  407235:	lea    rcx,[rip+0x2784]        # 4099c0 <_IO_stdin_used@@Base+0x9c0>
  40723c:	mov    edx,0x6c4
  407241:	lea    rsi,[rip+0x2288]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407248:	lea    rdi,[rip+0x2409]        # 409658 <_IO_stdin_used@@Base+0x658>
  40724f:	call   403190 <__assert_fail@plt>
  407254:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40725f:	nop

0000000000407260 <flatcc_builder_string_edit@@Base>:
  407260:	endbr64 
  407264:	mov    rax,QWORD PTR [rdi+0x18]
  407268:	ret    
  407269:	nop    DWORD PTR [rax+0x0]

0000000000407270 <flatcc_builder_string_len@@Base>:
  407270:	endbr64 
  407274:	mov    rax,QWORD PTR [rdi+0x30]
  407278:	mov    eax,DWORD PTR [rax+0x14]
  40727b:	ret    
  40727c:	nop    DWORD PTR [rax+0x0]

0000000000407280 <flatcc_builder_table_add@@Base>:
  407280:	endbr64 
  407284:	push   r13
  407286:	push   r12
  407288:	push   rbp
  407289:	push   rbx
  40728a:	sub    rsp,0x8
  40728e:	mov    rax,QWORD PTR [rdi+0x30]
  407292:	cmp    WORD PTR [rax+0xe],0x3
  407297:	jne    407364 <flatcc_builder_table_add@@Base+0xe4>
  40729d:	mov    r12d,esi
  4072a0:	cmp    esi,0x7ffc
  4072a6:	ja     4073a2 <flatcc_builder_table_add@@Base+0x122>
  4072ac:	mov    rbx,rdi
  4072af:	cmp    WORD PTR [rdi+0xea],cx
  4072b6:	jb     407320 <flatcc_builder_table_add@@Base+0xa0>
  4072b8:	movsxd r13,r12d
  4072bb:	mov    rsi,QWORD PTR [rbx+0x8]
  4072bf:	add    r13,r13
  4072c2:	add    rsi,r13
  4072c5:	cmp    WORD PTR [rsi],0x0
  4072c9:	jne    407383 <flatcc_builder_table_add@@Base+0x103>
  4072cf:	mov    eax,DWORD PTR [rbx+0x14]
  4072d2:	movzx  ecx,cx
  4072d5:	xor    eax,r12d
  4072d8:	imul   eax,eax,0x9e3779b1
  4072de:	xor    eax,edx
  4072e0:	imul   eax,eax,0x9e3779b1
  4072e6:	mov    DWORD PTR [rbx+0x14],eax
  4072e9:	mov    eax,DWORD PTR [rbx+0x20]
  4072ec:	lea    ebp,[rcx+rax*1-0x1]
  4072f0:	neg    ecx
  4072f2:	and    ebp,ecx
  4072f4:	add    edx,ebp
  4072f6:	mov    DWORD PTR [rbx+0x20],edx
  4072f9:	cmp    edx,DWORD PTR [rbx+0x24]
  4072fc:	jae    407340 <flatcc_builder_table_add@@Base+0xc0>
  4072fe:	lea    eax,[rbp+0x4]
  407301:	mov    WORD PTR [rsi],ax
  407304:	cmp    r12w,WORD PTR [rbx+0x10]
  407309:	jae    407330 <flatcc_builder_table_add@@Base+0xb0>
  40730b:	mov    eax,ebp
  40730d:	add    rax,QWORD PTR [rbx+0x18]
  407311:	add    rsp,0x8
  407315:	pop    rbx
  407316:	pop    rbp
  407317:	pop    r12
  407319:	pop    r13
  40731b:	ret    
  40731c:	nop    DWORD PTR [rax+0x0]
  407320:	mov    WORD PTR [rdi+0xea],cx
  407327:	jmp    4072b8 <flatcc_builder_table_add@@Base+0x38>
  407329:	nop    DWORD PTR [rax+0x0]
  407330:	inc    r12d
  407333:	mov    WORD PTR [rbx+0x10],r12w
  407338:	jmp    40730b <flatcc_builder_table_add@@Base+0x8b>
  40733a:	nop    WORD PTR [rax+rax*1+0x0]
  407340:	lea    esi,[rdx+0x1]
  407343:	mov    rdi,rbx
  407346:	mov    edx,0xfffc
  40734b:	call   403c10 <_start@@Base+0x3b0>
  407350:	test   eax,eax
  407352:	jne    407360 <flatcc_builder_table_add@@Base+0xe0>
  407354:	mov    rsi,QWORD PTR [rbx+0x8]
  407358:	add    rsi,r13
  40735b:	jmp    4072fe <flatcc_builder_table_add@@Base+0x7e>
  40735d:	nop    DWORD PTR [rax]
  407360:	xor    eax,eax
  407362:	jmp    407311 <flatcc_builder_table_add@@Base+0x91>
  407364:	lea    rcx,[rip+0x2635]        # 4099a0 <_IO_stdin_used@@Base+0x9a0>
  40736b:	mov    edx,0x6ed
  407370:	lea    rsi,[rip+0x2159]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407377:	lea    rdi,[rip+0x239a]        # 409718 <_IO_stdin_used@@Base+0x718>
  40737e:	call   403190 <__assert_fail@plt>
  407383:	lea    rcx,[rip+0x2616]        # 4099a0 <_IO_stdin_used@@Base+0x9a0>
  40738a:	mov    edx,0x6f8
  40738f:	lea    rsi,[rip+0x213a]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407396:	lea    rdi,[rip+0x24ca]        # 409867 <_IO_stdin_used@@Base+0x867>
  40739d:	call   403190 <__assert_fail@plt>
  4073a2:	lea    rcx,[rip+0x25f7]        # 4099a0 <_IO_stdin_used@@Base+0x9a0>
  4073a9:	mov    edx,0x6ee
  4073ae:	lea    rsi,[rip+0x211b]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4073b5:	lea    rdi,[rip+0x23ec]        # 4097a8 <_IO_stdin_used@@Base+0x7a8>
  4073bc:	call   403190 <__assert_fail@plt>
  4073c1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4073cc:	nop    DWORD PTR [rax+0x0]

00000000004073d0 <flatcc_builder_table_edit@@Base>:
  4073d0:	endbr64 
  4073d4:	mov    rax,QWORD PTR [rdi+0x30]
  4073d8:	cmp    WORD PTR [rax+0xe],0x3
  4073dd:	jne    4073ea <flatcc_builder_table_edit@@Base+0x1a>
  4073df:	mov    eax,DWORD PTR [rdi+0x20]
  4073e2:	sub    rax,rsi
  4073e5:	add    rax,QWORD PTR [rdi+0x18]
  4073e9:	ret    
  4073ea:	push   rax
  4073eb:	lea    rcx,[rip+0x258e]        # 409980 <_IO_stdin_used@@Base+0x980>
  4073f2:	mov    edx,0x702
  4073f7:	lea    rsi,[rip+0x20d2]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4073fe:	lea    rdi,[rip+0x2313]        # 409718 <_IO_stdin_used@@Base+0x718>
  407405:	call   403190 <__assert_fail@plt>
  40740a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407410 <flatcc_builder_table_add_copy@@Base>:
  407410:	endbr64 
  407414:	push   rbp
  407415:	mov    rbp,rdx
  407418:	push   rbx
  407419:	mov    rbx,rcx
  40741c:	mov    rdx,rbx
  40741f:	movzx  ecx,r8w
  407423:	sub    rsp,0x8
  407427:	call   407280 <flatcc_builder_table_add@@Base>
  40742c:	mov    rcx,rax
  40742f:	test   rax,rax
  407432:	je     407445 <flatcc_builder_table_add_copy@@Base+0x35>
  407434:	mov    rdx,rbx
  407437:	mov    rsi,rbp
  40743a:	mov    rdi,rax
  40743d:	call   4031e0 <memcpy@plt>
  407442:	mov    rcx,rax
  407445:	add    rsp,0x8
  407449:	pop    rbx
  40744a:	mov    rax,rcx
  40744d:	pop    rbp
  40744e:	ret    
  40744f:	nop

0000000000407450 <flatcc_builder_table_add_offset@@Base>:
  407450:	endbr64 
  407454:	push   r13
  407456:	push   r12
  407458:	push   rbp
  407459:	push   rbx
  40745a:	sub    rsp,0x8
  40745e:	mov    rax,QWORD PTR [rdi+0x30]
  407462:	cmp    WORD PTR [rax+0xe],0x3
  407467:	jne    407524 <flatcc_builder_table_add_offset@@Base+0xd4>
  40746d:	mov    r12d,esi
  407470:	cmp    esi,0x7ffc
  407476:	ja     407562 <flatcc_builder_table_add_offset@@Base+0x112>
  40747c:	movsxd r13,esi
  40747f:	mov    rdx,QWORD PTR [rdi+0x8]
  407483:	add    r13,r13
  407486:	add    rdx,r13
  407489:	cmp    WORD PTR [rdx],0x0
  40748d:	mov    rbx,rdi
  407490:	jne    407543 <flatcc_builder_table_add_offset@@Base+0xf3>
  407496:	mov    eax,DWORD PTR [rdi+0x14]
  407499:	xor    eax,esi
  40749b:	imul   eax,eax,0x9e3779b1
  4074a1:	xor    eax,0x4
  4074a4:	imul   eax,eax,0x9e3779b1
  4074aa:	mov    DWORD PTR [rdi+0x14],eax
  4074ad:	mov    eax,DWORD PTR [rdi+0x20]
  4074b0:	lea    ebp,[rax+0x3]
  4074b3:	and    ebp,0xfffffffc
  4074b6:	lea    esi,[rbp+0x4]
  4074b9:	mov    DWORD PTR [rdi+0x20],esi
  4074bc:	cmp    esi,DWORD PTR [rdi+0x24]
  4074bf:	ja     407500 <flatcc_builder_table_add_offset@@Base+0xb0>
  4074c1:	lea    eax,[rbp+0x4]
  4074c4:	mov    WORD PTR [rdx],ax
  4074c7:	cmp    r12w,WORD PTR [rbx+0x10]
  4074cc:	jae    4074f0 <flatcc_builder_table_add_offset@@Base+0xa0>
  4074ce:	mov    rax,QWORD PTR [rbx]
  4074d1:	lea    rdx,[rax+0x2]
  4074d5:	mov    QWORD PTR [rbx],rdx
  4074d8:	mov    WORD PTR [rax],bp
  4074db:	mov    eax,ebp
  4074dd:	add    rax,QWORD PTR [rbx+0x18]
  4074e1:	add    rsp,0x8
  4074e5:	pop    rbx
  4074e6:	pop    rbp
  4074e7:	pop    r12
  4074e9:	pop    r13
  4074eb:	ret    
  4074ec:	nop    DWORD PTR [rax+0x0]
  4074f0:	lea    esi,[r12+0x1]
  4074f5:	mov    WORD PTR [rbx+0x10],si
  4074f9:	jmp    4074ce <flatcc_builder_table_add_offset@@Base+0x7e>
  4074fb:	nop    DWORD PTR [rax+rax*1+0x0]
  407500:	mov    edx,0xfffc
  407505:	call   403c10 <_start@@Base+0x3b0>
  40750a:	test   eax,eax
  40750c:	jne    407520 <flatcc_builder_table_add_offset@@Base+0xd0>
  40750e:	mov    rdx,QWORD PTR [rbx+0x8]
  407512:	add    rdx,r13
  407515:	jmp    4074c1 <flatcc_builder_table_add_offset@@Base+0x71>
  407517:	nop    WORD PTR [rax+rax*1+0x0]
  407520:	xor    eax,eax
  407522:	jmp    4074e1 <flatcc_builder_table_add_offset@@Base+0x91>
  407524:	lea    rcx,[rip+0x2435]        # 409960 <_IO_stdin_used@@Base+0x960>
  40752b:	mov    edx,0x713
  407530:	lea    rsi,[rip+0x1f99]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407537:	lea    rdi,[rip+0x21da]        # 409718 <_IO_stdin_used@@Base+0x718>
  40753e:	call   403190 <__assert_fail@plt>
  407543:	lea    rcx,[rip+0x2416]        # 409960 <_IO_stdin_used@@Base+0x960>
  40754a:	mov    edx,0x71b
  40754f:	lea    rsi,[rip+0x1f7a]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407556:	lea    rdi,[rip+0x230a]        # 409867 <_IO_stdin_used@@Base+0x867>
  40755d:	call   403190 <__assert_fail@plt>
  407562:	lea    rcx,[rip+0x23f7]        # 409960 <_IO_stdin_used@@Base+0x960>
  407569:	mov    edx,0x714
  40756e:	lea    rsi,[rip+0x1f5b]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407575:	lea    rdi,[rip+0x222c]        # 4097a8 <_IO_stdin_used@@Base+0x7a8>
  40757c:	call   403190 <__assert_fail@plt>
  407581:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40758c:	nop    DWORD PTR [rax+0x0]

0000000000407590 <flatcc_builder_table_add_union@@Base>:
  407590:	endbr64 
  407594:	push   r13
  407596:	mov    r13,rdx
  407599:	sar    r13,0x20
  40759d:	push   r12
  40759f:	push   rbp
  4075a0:	push   rbx
  4075a1:	sub    rsp,0x8
  4075a5:	mov    rax,QWORD PTR [rdi+0x30]
  4075a9:	cmp    WORD PTR [rax+0xe],0x3
  4075ae:	jne    407624 <flatcc_builder_table_add_union@@Base+0x94>
  4075b0:	mov    r12,rdi
  4075b3:	mov    ebx,esi
  4075b5:	mov    rbp,rdx
  4075b8:	test   dl,dl
  4075ba:	je     407600 <flatcc_builder_table_add_union@@Base+0x70>
  4075bc:	test   r13d,r13d
  4075bf:	je     4075d2 <flatcc_builder_table_add_union@@Base+0x42>
  4075c1:	call   407450 <flatcc_builder_table_add_offset@@Base>
  4075c6:	test   rax,rax
  4075c9:	je     407662 <flatcc_builder_table_add_union@@Base+0xd2>
  4075cf:	mov    DWORD PTR [rax],r13d
  4075d2:	lea    esi,[rbx-0x1]
  4075d5:	mov    ecx,0x1
  4075da:	mov    edx,0x1
  4075df:	mov    rdi,r12
  4075e2:	call   407280 <flatcc_builder_table_add@@Base>
  4075e7:	test   rax,rax
  4075ea:	je     407643 <flatcc_builder_table_add_union@@Base+0xb3>
  4075ec:	mov    BYTE PTR [rax],bpl
  4075ef:	add    rsp,0x8
  4075f3:	xor    eax,eax
  4075f5:	pop    rbx
  4075f6:	pop    rbp
  4075f7:	pop    r12
  4075f9:	pop    r13
  4075fb:	ret    
  4075fc:	nop    DWORD PTR [rax+0x0]
  407600:	test   r13d,r13d
  407603:	je     4075d2 <flatcc_builder_table_add_union@@Base+0x42>
  407605:	lea    rcx,[rip+0x24e4]        # 409af0 <_IO_stdin_used@@Base+0xaf0>
  40760c:	mov    edx,0x5ef
  407611:	lea    rsi,[rip+0x1eb8]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407618:	lea    rdi,[rip+0x21d1]        # 4097f0 <_IO_stdin_used@@Base+0x7f0>
  40761f:	call   403190 <__assert_fail@plt>
  407624:	lea    rcx,[rip+0x24c5]        # 409af0 <_IO_stdin_used@@Base+0xaf0>
  40762b:	mov    edx,0x5ee
  407630:	lea    rsi,[rip+0x1e99]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407637:	lea    rdi,[rip+0x20da]        # 409718 <_IO_stdin_used@@Base+0x718>
  40763e:	call   403190 <__assert_fail@plt>
  407643:	lea    rcx,[rip+0x24a6]        # 409af0 <_IO_stdin_used@@Base+0xaf0>
  40764a:	mov    edx,0x5f6
  40764f:	lea    rsi,[rip+0x1e7a]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407656:	lea    rdi,[rip+0x2299]        # 4098f6 <_IO_stdin_used@@Base+0x8f6>
  40765d:	call   403190 <__assert_fail@plt>
  407662:	lea    rcx,[rip+0x2487]        # 409af0 <_IO_stdin_used@@Base+0xaf0>
  407669:	mov    edx,0x5f2
  40766e:	lea    rsi,[rip+0x1e5b]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407675:	lea    rdi,[rip+0x2270]        # 4098ec <_IO_stdin_used@@Base+0x8ec>
  40767c:	call   403190 <__assert_fail@plt>
  407681:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40768c:	nop    DWORD PTR [rax+0x0]

0000000000407690 <flatcc_builder_table_add_union_vector@@Base>:
  407690:	endbr64 
  407694:	push   r12
  407696:	push   rbp
  407697:	mov    rbp,rdx
  40769a:	sar    rbp,0x20
  40769e:	push   rbx
  40769f:	sub    rsp,0x10
  4076a3:	mov    rcx,QWORD PTR [rdi+0x30]
  4076a7:	cmp    WORD PTR [rcx+0xe],0x3
  4076ac:	jne    407721 <flatcc_builder_table_add_union_vector@@Base+0x91>
  4076ae:	test   ebp,ebp
  4076b0:	sete   cl
  4076b3:	test   edx,edx
  4076b5:	mov    r12d,esi
  4076b8:	sete   sil
  4076bc:	cmp    sil,cl
  4076bf:	je     4076e0 <flatcc_builder_table_add_union_vector@@Base+0x50>
  4076c1:	test   edx,edx
  4076c3:	setne  al
  4076c6:	cmp    cl,al
  4076c8:	je     407740 <flatcc_builder_table_add_union_vector@@Base+0xb0>
  4076ca:	mov    eax,0xffffffff
  4076cf:	add    rsp,0x10
  4076d3:	pop    rbx
  4076d4:	pop    rbp
  4076d5:	pop    r12
  4076d7:	ret    
  4076d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4076e0:	mov    eax,edx
  4076e2:	test   edx,edx
  4076e4:	je     4076cf <flatcc_builder_table_add_union_vector@@Base+0x3f>
  4076e6:	lea    esi,[r12-0x1]
  4076eb:	mov    QWORD PTR [rsp+0x8],rdx
  4076f0:	mov    rbx,rdi
  4076f3:	call   407450 <flatcc_builder_table_add_offset@@Base>
  4076f8:	test   rax,rax
  4076fb:	mov    rdx,QWORD PTR [rsp+0x8]
  407700:	je     40777e <flatcc_builder_table_add_union_vector@@Base+0xee>
  407702:	mov    DWORD PTR [rax],edx
  407704:	mov    esi,r12d
  407707:	mov    rdi,rbx
  40770a:	call   407450 <flatcc_builder_table_add_offset@@Base>
  40770f:	test   rax,rax
  407712:	je     40775f <flatcc_builder_table_add_union_vector@@Base+0xcf>
  407714:	mov    DWORD PTR [rax],ebp
  407716:	add    rsp,0x10
  40771a:	xor    eax,eax
  40771c:	pop    rbx
  40771d:	pop    rbp
  40771e:	pop    r12
  407720:	ret    
  407721:	lea    rcx,[rip+0x2398]        # 409ac0 <_IO_stdin_used@@Base+0xac0>
  407728:	mov    edx,0x600
  40772d:	lea    rsi,[rip+0x1d9c]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407734:	lea    rdi,[rip+0x1fdd]        # 409718 <_IO_stdin_used@@Base+0x718>
  40773b:	call   403190 <__assert_fail@plt>
  407740:	lea    rcx,[rip+0x2379]        # 409ac0 <_IO_stdin_used@@Base+0xac0>
  407747:	mov    edx,0x601
  40774c:	lea    rsi,[rip+0x1d7d]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407753:	lea    rdi,[rip+0x20be]        # 409818 <_IO_stdin_used@@Base+0x818>
  40775a:	call   403190 <__assert_fail@plt>
  40775f:	lea    rcx,[rip+0x235a]        # 409ac0 <_IO_stdin_used@@Base+0xac0>
  407766:	mov    edx,0x608
  40776b:	lea    rsi,[rip+0x1d5e]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407772:	lea    rdi,[rip+0x2173]        # 4098ec <_IO_stdin_used@@Base+0x8ec>
  407779:	call   403190 <__assert_fail@plt>
  40777e:	lea    rcx,[rip+0x233b]        # 409ac0 <_IO_stdin_used@@Base+0xac0>
  407785:	mov    edx,0x604
  40778a:	lea    rsi,[rip+0x1d3f]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407791:	lea    rdi,[rip+0x2154]        # 4098ec <_IO_stdin_used@@Base+0x8ec>
  407798:	call   403190 <__assert_fail@plt>
  40779d:	nop    DWORD PTR [rax]

00000000004077a0 <flatcc_builder_push_buffer_alignment@@Base>:
  4077a0:	endbr64 
  4077a4:	mov    edx,0x4
  4077a9:	movzx  eax,WORD PTR [rdi+0xe8]
  4077b0:	mov    WORD PTR [rdi+0xe8],dx
  4077b7:	ret    
  4077b8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004077c0 <flatcc_builder_pop_buffer_alignment@@Base>:
  4077c0:	endbr64 
  4077c4:	cmp    si,WORD PTR [rdi+0xe8]
  4077cb:	jbe    4077d4 <flatcc_builder_pop_buffer_alignment@@Base+0x14>
  4077cd:	mov    WORD PTR [rdi+0xe8],si
  4077d4:	ret    
  4077d5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004077e0 <flatcc_builder_get_buffer_alignment@@Base>:
  4077e0:	endbr64 
  4077e4:	movzx  eax,WORD PTR [rdi+0xe8]
  4077eb:	ret    
  4077ec:	nop    DWORD PTR [rax+0x0]

00000000004077f0 <flatcc_builder_set_vtable_clustering@@Base>:
  4077f0:	endbr64 
  4077f4:	xor    eax,eax
  4077f6:	test   esi,esi
  4077f8:	sete   al
  4077fb:	mov    DWORD PTR [rdi+0x124],eax
  407801:	ret    
  407802:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40780d:	nop    DWORD PTR [rax]

0000000000407810 <flatcc_builder_set_block_align@@Base>:
  407810:	endbr64 
  407814:	mov    WORD PTR [rdi+0xec],si
  40781b:	ret    
  40781c:	nop    DWORD PTR [rax+0x0]

0000000000407820 <flatcc_builder_get_level@@Base>:
  407820:	endbr64 
  407824:	mov    eax,DWORD PTR [rdi+0x104]
  40782a:	ret    
  40782b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407830 <flatcc_builder_set_max_level@@Base>:
  407830:	endbr64 
  407834:	mov    DWORD PTR [rdi+0x120],esi
  40783a:	cmp    DWORD PTR [rdi+0x108],esi
  407840:	jge    407848 <flatcc_builder_set_max_level@@Base+0x18>
  407842:	mov    DWORD PTR [rdi+0x108],esi
  407848:	ret    
  407849:	nop    DWORD PTR [rax+0x0]

0000000000407850 <flatcc_builder_get_buffer_size@@Base>:
  407850:	endbr64 
  407854:	mov    eax,DWORD PTR [rdi+0xf4]
  40785a:	sub    eax,DWORD PTR [rdi+0xf0]
  407860:	cdqe   
  407862:	ret    
  407863:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40786e:	xchg   ax,ax

0000000000407870 <flatcc_builder_get_buffer_start@@Base>:
  407870:	endbr64 
  407874:	mov    eax,DWORD PTR [rdi+0xf0]
  40787a:	ret    
  40787b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407880 <flatcc_builder_get_buffer_end@@Base>:
  407880:	endbr64 
  407884:	mov    eax,DWORD PTR [rdi+0xf4]
  40788a:	ret    
  40788b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407890 <flatcc_builder_set_vtable_cache_limit@@Base>:
  407890:	endbr64 
  407894:	mov    QWORD PTR [rdi+0x118],rsi
  40789b:	ret    
  40789c:	nop    DWORD PTR [rax+0x0]

00000000004078a0 <flatcc_builder_set_identifier@@Base>:
  4078a0:	endbr64 
  4078a4:	test   rsi,rsi
  4078a7:	je     4078b8 <flatcc_builder_set_identifier@@Base+0x18>
  4078a9:	mov    eax,DWORD PTR [rsi]
  4078ab:	mov    DWORD PTR [rdi+0x110],eax
  4078b1:	ret    
  4078b2:	nop    WORD PTR [rax+rax*1+0x0]
  4078b8:	mov    rsi,0x409fc0
  4078bf:	mov    eax,DWORD PTR [rsi]
  4078c1:	mov    DWORD PTR [rdi+0x110],eax
  4078c7:	ret    
  4078c8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004078d0 <flatcc_builder_get_type@@Base>:
  4078d0:	endbr64 
  4078d4:	mov    rdx,QWORD PTR [rdi+0x30]
  4078d8:	xor    eax,eax
  4078da:	test   rdx,rdx
  4078dd:	je     4078e3 <flatcc_builder_get_type@@Base+0x13>
  4078df:	movzx  eax,WORD PTR [rdx+0xe]
  4078e3:	ret    
  4078e4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4078ef:	nop

00000000004078f0 <flatcc_builder_get_type_at@@Base>:
  4078f0:	endbr64 
  4078f4:	xor    eax,eax
  4078f6:	test   esi,esi
  4078f8:	jle    407919 <flatcc_builder_get_type_at@@Base+0x29>
  4078fa:	mov    edx,DWORD PTR [rdi+0x104]
  407900:	cmp    edx,esi
  407902:	jl     407919 <flatcc_builder_get_type_at@@Base+0x29>
  407904:	sub    esi,edx
  407906:	movsxd rsi,esi
  407909:	mov    rdx,QWORD PTR [rdi+0x30]
  40790d:	lea    rax,[rsi+rsi*8]
  407911:	lea    rax,[rdx+rax*4]
  407915:	movzx  eax,WORD PTR [rax+0xe]
  407919:	ret    
  40791a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407920 <flatcc_builder_get_direct_buffer@@Base>:
  407920:	endbr64 
  407924:	mov    eax,DWORD PTR [rdi+0x128]
  40792a:	test   eax,eax
  40792c:	jne    407940 <flatcc_builder_get_direct_buffer@@Base+0x20>
  40792e:	xor    eax,eax
  407930:	test   rsi,rsi
  407933:	je     40793c <flatcc_builder_get_direct_buffer@@Base+0x1c>
  407935:	mov    QWORD PTR [rsi],0x0
  40793c:	ret    
  40793d:	nop    DWORD PTR [rax]
  407940:	mov    rax,QWORD PTR [rdi+0x138]
  407947:	cmp    QWORD PTR [rdi+0x130],rax
  40794e:	jne    40792e <flatcc_builder_get_direct_buffer@@Base+0xe>
  407950:	test   rsi,rsi
  407953:	je     40795f <flatcc_builder_get_direct_buffer@@Base+0x3f>
  407955:	mov    rax,QWORD PTR [rdi+0x160]
  40795c:	mov    QWORD PTR [rsi],rax
  40795f:	mov    rax,QWORD PTR [rdi+0x140]
  407966:	ret    
  407967:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407970 <flatcc_builder_copy_buffer@@Base>:
  407970:	endbr64 
  407974:	mov    eax,DWORD PTR [rdi+0x128]
  40797a:	test   eax,eax
  40797c:	je     4079a0 <flatcc_builder_copy_buffer@@Base+0x30>
  40797e:	sub    rsp,0x8
  407982:	add    rdi,0x130
  407989:	call   4081e0 <flatcc_emitter_copy_buffer@@Base>
  40798e:	test   rax,rax
  407991:	je     4079a3 <flatcc_builder_copy_buffer@@Base+0x33>
  407993:	add    rsp,0x8
  407997:	ret    
  407998:	nop    DWORD PTR [rax+rax*1+0x0]
  4079a0:	xor    eax,eax
  4079a2:	ret    
  4079a3:	lea    rcx,[rip+0x1f96]        # 409940 <_IO_stdin_used@@Base+0x940>
  4079aa:	mov    edx,0x786
  4079af:	lea    rsi,[rip+0x1b1a]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  4079b6:	lea    rdi,[rip+0x1f45]        # 409902 <_IO_stdin_used@@Base+0x902>
  4079bd:	call   403190 <__assert_fail@plt>
  4079c2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4079cd:	nop    DWORD PTR [rax]

00000000004079d0 <flatcc_builder_finalize_buffer@@Base>:
  4079d0:	endbr64 
  4079d4:	push   r12
  4079d6:	mov    r12,rdi
  4079d9:	push   rbp
  4079da:	push   rbx
  4079db:	mov    rbx,rsi
  4079de:	call   407850 <flatcc_builder_get_buffer_size@@Base>
  4079e3:	mov    rbp,rax
  4079e6:	test   rbx,rbx
  4079e9:	je     4079ee <flatcc_builder_finalize_buffer@@Base+0x1e>
  4079eb:	mov    QWORD PTR [rbx],rax
  4079ee:	mov    rdi,rbp
  4079f1:	call   4031f0 <malloc@plt>
  4079f6:	mov    rbx,rax
  4079f9:	test   rax,rax
  4079fc:	je     407a19 <flatcc_builder_finalize_buffer@@Base+0x49>
  4079fe:	mov    rdx,rbp
  407a01:	mov    rsi,rax
  407a04:	mov    rdi,r12
  407a07:	call   407970 <flatcc_builder_copy_buffer@@Base>
  407a0c:	test   rax,rax
  407a0f:	je     407a38 <flatcc_builder_finalize_buffer@@Base+0x68>
  407a11:	mov    rax,rbx
  407a14:	pop    rbx
  407a15:	pop    rbp
  407a16:	pop    r12
  407a18:	ret    
  407a19:	lea    rcx,[rip+0x1f00]        # 409920 <_IO_stdin_used@@Base+0x920>
  407a20:	mov    edx,0x798
  407a25:	lea    rsi,[rip+0x1aa4]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407a2c:	lea    rdi,[rip+0x1e34]        # 409867 <_IO_stdin_used@@Base+0x867>
  407a33:	call   403190 <__assert_fail@plt>
  407a38:	lea    rcx,[rip+0x1ee1]        # 409920 <_IO_stdin_used@@Base+0x920>
  407a3f:	mov    edx,0x79c
  407a44:	lea    rsi,[rip+0x1a85]        # 4094d0 <_IO_stdin_used@@Base+0x4d0>
  407a4b:	lea    rdi,[rip+0x1e15]        # 409867 <_IO_stdin_used@@Base+0x867>
  407a52:	call   403190 <__assert_fail@plt>
  407a57:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407a60 <flatcc_builder_finalize_aligned_buffer@@Base>:
  407a60:	endbr64 
  407a64:	push   r13
  407a66:	push   r12
  407a68:	mov    r12,rsi
  407a6b:	push   rbp
  407a6c:	mov    rbp,rdi
  407a6f:	push   rbx
  407a70:	sub    rsp,0x18
  407a74:	mov    rax,QWORD PTR fs:0x28
  407a7d:	mov    QWORD PTR [rsp+0x8],rax
  407a82:	xor    eax,eax
  407a84:	call   407850 <flatcc_builder_get_buffer_size@@Base>
  407a89:	mov    rbx,rax
  407a8c:	test   r12,r12
  407a8f:	je     407a95 <flatcc_builder_finalize_aligned_buffer@@Base+0x35>
  407a91:	mov    QWORD PTR [r12],rax
  407a95:	mov    rdi,rbp
  407a98:	call   4077e0 <flatcc_builder_get_buffer_alignment@@Base>
  407a9d:	movzx  eax,ax
  407aa0:	lea    rdx,[rbx+rax*1-0x1]
  407aa5:	mov    rbx,rax
  407aa8:	neg    rbx
  407aab:	and    rbx,rdx
  407aae:	mov    esi,0x8
  407ab3:	cmp    rax,0x8
  407ab7:	cmovae rsi,rax
  407abb:	mov    rdi,rsp
  407abe:	mov    rdx,rbx
  407ac1:	mov    QWORD PTR [rsp],0x0
  407ac9:	call   403240 <posix_memalign@plt>
  407ace:	test   eax,eax
  407ad0:	je     407af8 <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
  407ad2:	mov    rdi,QWORD PTR [rsp]
  407ad6:	test   rdi,rdi
  407ad9:	je     407ae0 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  407adb:	call   403140 <free@plt>
  407ae0:	test   r12,r12
  407ae3:	je     407b42 <flatcc_builder_finalize_aligned_buffer@@Base+0xe2>
  407ae5:	mov    QWORD PTR [r12],0x0
  407aed:	xor    r13d,r13d
  407af0:	jmp    407b14 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  407af2:	nop    WORD PTR [rax+rax*1+0x0]
  407af8:	mov    r13,QWORD PTR [rsp]
  407afc:	test   r13,r13
  407aff:	je     407ae0 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  407b01:	mov    rdx,rbx
  407b04:	mov    rsi,r13
  407b07:	mov    rdi,rbp
  407b0a:	call   407970 <flatcc_builder_copy_buffer@@Base>
  407b0f:	test   rax,rax
  407b12:	je     407b38 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
  407b14:	mov    rcx,QWORD PTR [rsp+0x8]
  407b19:	xor    rcx,QWORD PTR fs:0x28
  407b22:	mov    rax,r13
  407b25:	jne    407b3d <flatcc_builder_finalize_aligned_buffer@@Base+0xdd>
  407b27:	add    rsp,0x18
  407b2b:	pop    rbx
  407b2c:	pop    rbp
  407b2d:	pop    r12
  407b2f:	pop    r13
  407b31:	ret    
  407b32:	nop    WORD PTR [rax+rax*1+0x0]
  407b38:	mov    rdi,r13
  407b3b:	jmp    407adb <flatcc_builder_finalize_aligned_buffer@@Base+0x7b>
  407b3d:	call   403170 <__stack_chk_fail@plt>
  407b42:	xor    r13d,r13d
  407b45:	jmp    407b14 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  407b47:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407b50 <flatcc_builder_aligned_alloc@@Base>:
  407b50:	endbr64 
  407b54:	sub    rsp,0x18
  407b58:	mov    rax,QWORD PTR fs:0x28
  407b61:	mov    QWORD PTR [rsp+0x8],rax
  407b66:	xor    eax,eax
  407b68:	mov    rdx,rsi
  407b6b:	cmp    rdi,0x8
  407b6f:	mov    esi,0x8
  407b74:	cmovae rsi,rdi
  407b78:	mov    rdi,rsp
  407b7b:	mov    QWORD PTR [rsp],0x0
  407b83:	call   403240 <posix_memalign@plt>
  407b88:	test   eax,eax
  407b8a:	mov    rax,QWORD PTR [rsp]
  407b8e:	je     407b9f <flatcc_builder_aligned_alloc@@Base+0x4f>
  407b90:	test   rax,rax
  407b93:	je     407b9f <flatcc_builder_aligned_alloc@@Base+0x4f>
  407b95:	mov    rdi,rax
  407b98:	call   403140 <free@plt>
  407b9d:	xor    eax,eax
  407b9f:	mov    rcx,QWORD PTR [rsp+0x8]
  407ba4:	xor    rcx,QWORD PTR fs:0x28
  407bad:	jne    407bb4 <flatcc_builder_aligned_alloc@@Base+0x64>
  407baf:	add    rsp,0x18
  407bb3:	ret    
  407bb4:	call   403170 <__stack_chk_fail@plt>
  407bb9:	nop    DWORD PTR [rax+0x0]

0000000000407bc0 <flatcc_builder_aligned_free@@Base>:
  407bc0:	endbr64 
  407bc4:	jmp    403140 <free@plt>
  407bc9:	nop    DWORD PTR [rax+0x0]

0000000000407bd0 <flatcc_builder_get_emit_context@@Base>:
  407bd0:	endbr64 
  407bd4:	mov    rax,QWORD PTR [rdi+0x38]
  407bd8:	ret    
  407bd9:	nop    DWORD PTR [rax+0x0]

0000000000407be0 <flatcc_emitter_recycle_page@@Base>:
  407be0:	endbr64 
  407be4:	mov    rax,QWORD PTR [rdi]
  407be7:	cmp    rax,rsi
  407bea:	je     407c3b <flatcc_emitter_recycle_page@@Base+0x5b>
  407bec:	cmp    QWORD PTR [rdi+0x8],rsi
  407bf0:	je     407c3b <flatcc_emitter_recycle_page@@Base+0x5b>
  407bf2:	mov    rdx,QWORD PTR [rsi+0xb88]
  407bf9:	mov    rcx,QWORD PTR [rsi+0xb80]
  407c00:	mov    QWORD PTR [rcx+0xb88],rdx
  407c07:	mov    QWORD PTR [rdx+0xb80],rcx
  407c0e:	mov    rdx,QWORD PTR [rax+0xb88]
  407c15:	mov    QWORD PTR [rsi+0xb80],rax
  407c1c:	mov    QWORD PTR [rsi+0xb88],rdx
  407c23:	mov    QWORD PTR [rdx+0xb80],rsi
  407c2a:	mov    rax,QWORD PTR [rsi+0xb80]
  407c31:	mov    QWORD PTR [rax+0xb88],rsi
  407c38:	xor    eax,eax
  407c3a:	ret    
  407c3b:	mov    eax,0xffffffff
  407c40:	ret    
  407c41:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407c4c:	nop    DWORD PTR [rax+0x0]

0000000000407c50 <flatcc_emitter_reset@@Base>:
  407c50:	endbr64 
  407c54:	mov    rax,QWORD PTR [rdi]
  407c57:	test   rax,rax
  407c5a:	je     407d30 <flatcc_emitter_reset@@Base+0xe0>
  407c60:	mov    rcx,QWORD PTR [rdi+0x40]
  407c64:	mov    rsi,QWORD PTR [rdi+0x30]
  407c68:	test   rcx,rcx
  407c6b:	cmove  rcx,rsi
  407c6f:	lea    rdx,[rax+0x5c0]
  407c76:	mov    QWORD PTR [rdi+0x10],rdx
  407c7a:	mov    QWORD PTR [rdi+0x20],rdx
  407c7e:	lea    rdx,[rcx+rcx*2]
  407c82:	shr    rdx,0x2
  407c86:	shr    rsi,0x2
  407c8a:	add    rdx,rsi
  407c8d:	mov    QWORD PTR [rdi+0x8],rax
  407c91:	mov    QWORD PTR [rdi+0x18],0x5c0
  407c99:	mov    QWORD PTR [rdi+0x28],0x5c0
  407ca1:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  407cab:	mov    QWORD PTR [rdi+0x40],rdx
  407caf:	add    rdx,rdx
  407cb2:	mov    QWORD PTR [rdi+0x30],0x0
  407cba:	cmp    rdx,QWORD PTR [rdi+0x38]
  407cbe:	jae    407d30 <flatcc_emitter_reset@@Base+0xe0>
  407cc0:	push   rbx
  407cc1:	mov    rbx,rdi
  407cc4:	mov    rdi,QWORD PTR [rax+0xb80]
  407ccb:	cmp    rax,rdi
  407cce:	jne    407ce8 <flatcc_emitter_reset@@Base+0x98>
  407cd0:	jmp    407d24 <flatcc_emitter_reset@@Base+0xd4>
  407cd2:	nop    WORD PTR [rax+rax*1+0x0]
  407cd8:	mov    rax,QWORD PTR [rbx+0x8]
  407cdc:	mov    rdi,QWORD PTR [rax+0xb80]
  407ce3:	cmp    rdi,QWORD PTR [rbx]
  407ce6:	je     407d24 <flatcc_emitter_reset@@Base+0xd4>
  407ce8:	mov    rdx,QWORD PTR [rdi+0xb80]
  407cef:	mov    QWORD PTR [rax+0xb80],rdx
  407cf6:	mov    rdx,QWORD PTR [rdi+0xb80]
  407cfd:	mov    QWORD PTR [rdx+0xb88],rax
  407d04:	call   403140 <free@plt>
  407d09:	mov    rax,QWORD PTR [rbx+0x38]
  407d0d:	mov    rcx,QWORD PTR [rbx+0x40]
  407d11:	sub    rax,0xb80
  407d17:	lea    rdx,[rcx+rcx*1]
  407d1b:	mov    QWORD PTR [rbx+0x38],rax
  407d1f:	cmp    rax,rdx
  407d22:	ja     407cd8 <flatcc_emitter_reset@@Base+0x88>
  407d24:	pop    rbx
  407d25:	ret    
  407d26:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407d30:	ret    
  407d31:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407d3c:	nop    DWORD PTR [rax+0x0]

0000000000407d40 <flatcc_emitter_clear@@Base>:
  407d40:	endbr64 
  407d44:	mov    rax,QWORD PTR [rdi]
  407d47:	test   rax,rax
  407d4a:	je     407dc8 <flatcc_emitter_clear@@Base+0x88>
  407d4c:	push   rbp
  407d4d:	mov    rbp,rdi
  407d50:	push   rbx
  407d51:	sub    rsp,0x8
  407d55:	mov    rdx,QWORD PTR [rax+0xb88]
  407d5c:	mov    QWORD PTR [rdx+0xb80],0x0
  407d67:	mov    rbx,QWORD PTR [rax+0xb80]
  407d6e:	test   rbx,rbx
  407d71:	jne    407d7b <flatcc_emitter_clear@@Base+0x3b>
  407d73:	jmp    407dd0 <flatcc_emitter_clear@@Base+0x90>
  407d75:	nop    DWORD PTR [rax]
  407d78:	mov    rbx,rax
  407d7b:	mov    rdi,QWORD PTR [rbx+0xb88]
  407d82:	call   403140 <free@plt>
  407d87:	mov    rax,QWORD PTR [rbx+0xb80]
  407d8e:	test   rax,rax
  407d91:	jne    407d78 <flatcc_emitter_clear@@Base+0x38>
  407d93:	mov    rdi,rbx
  407d96:	call   403140 <free@plt>
  407d9b:	mov    QWORD PTR [rbp+0x40],0x0
  407da3:	vpxor  xmm0,xmm0,xmm0
  407da7:	vmovups XMMWORD PTR [rbp+0x0],xmm0
  407dac:	vmovups XMMWORD PTR [rbp+0x10],xmm0
  407db1:	vmovups XMMWORD PTR [rbp+0x20],xmm0
  407db6:	vmovups XMMWORD PTR [rbp+0x30],xmm0
  407dbb:	add    rsp,0x8
  407dbf:	pop    rbx
  407dc0:	pop    rbp
  407dc1:	ret    
  407dc2:	nop    WORD PTR [rax+rax*1+0x0]
  407dc8:	ret    
  407dc9:	nop    DWORD PTR [rax+0x0]
  407dd0:	mov    rbx,rax
  407dd3:	jmp    407d93 <flatcc_emitter_clear@@Base+0x53>
  407dd5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407de0 <flatcc_emitter@@Base>:
  407de0:	endbr64 
  407de4:	push   r15
  407de6:	push   r14
  407de8:	push   r13
  407dea:	push   r12
  407dec:	push   rbp
  407ded:	mov    rbp,rsi
  407df0:	push   rbx
  407df1:	mov    rbx,rdi
  407df4:	sub    rsp,0x18
  407df8:	add    QWORD PTR [rdi+0x30],r8
  407dfc:	test   ecx,ecx
  407dfe:	js     408010 <flatcc_emitter@@Base+0x230>
  407e04:	mov    rax,QWORD PTR [rdi+0x28]
  407e08:	cmp    rax,r8
  407e0b:	jae    407e98 <flatcc_emitter@@Base+0xb8>
  407e11:	test   edx,edx
  407e13:	je     407e83 <flatcc_emitter@@Base+0xa3>
  407e15:	lea    r14d,[rdx-0x1]
  407e19:	inc    r14
  407e1c:	shl    r14,0x4
  407e20:	lea    rax,[rbp+r14*1+0x0]
  407e25:	mov    QWORD PTR [rsp+0x8],rax
  407e2a:	nop    WORD PTR [rax+rax*1+0x0]
  407e30:	mov    r15,QWORD PTR [rbp+0x8]
  407e34:	mov    r13,QWORD PTR [rbp+0x0]
  407e38:	test   r15,r15
  407e3b:	je     407e78 <flatcc_emitter@@Base+0x98>
  407e3d:	nop    DWORD PTR [rax]
  407e40:	mov    r12,QWORD PTR [rbx+0x28]
  407e44:	cmp    r15,r12
  407e47:	jbe    407f40 <flatcc_emitter@@Base+0x160>
  407e4d:	test   r12,r12
  407e50:	je     407ee8 <flatcc_emitter@@Base+0x108>
  407e56:	sub    r15,r12
  407e59:	mov    rdi,QWORD PTR [rbx+0x20]
  407e5d:	mov    rsi,r13
  407e60:	mov    rdx,r12
  407e63:	call   4031e0 <memcpy@plt>
  407e68:	add    r13,r12
  407e6b:	add    QWORD PTR [rbx+0x20],r12
  407e6f:	sub    QWORD PTR [rbx+0x28],r12
  407e73:	test   r15,r15
  407e76:	jne    407e40 <flatcc_emitter@@Base+0x60>
  407e78:	add    rbp,0x10
  407e7c:	cmp    rbp,QWORD PTR [rsp+0x8]
  407e81:	jne    407e30 <flatcc_emitter@@Base+0x50>
  407e83:	add    rsp,0x18
  407e87:	pop    rbx
  407e88:	pop    rbp
  407e89:	pop    r12
  407e8b:	pop    r13
  407e8d:	pop    r14
  407e8f:	xor    eax,eax
  407e91:	pop    r15
  407e93:	ret    
  407e94:	nop    DWORD PTR [rax+0x0]
  407e98:	mov    rcx,QWORD PTR [rdi+0x20]
  407e9c:	sub    rax,r8
  407e9f:	lea    rsi,[rcx+r8*1]
  407ea3:	mov    QWORD PTR [rdi+0x20],rsi
  407ea7:	mov    QWORD PTR [rdi+0x28],rax
  407eab:	test   edx,edx
  407ead:	je     407e83 <flatcc_emitter@@Base+0xa3>
  407eaf:	lea    ebx,[rdx-0x1]
  407eb2:	inc    rbx
  407eb5:	shl    rbx,0x4
  407eb9:	add    rbx,rbp
  407ebc:	nop    DWORD PTR [rax+0x0]
  407ec0:	mov    rsi,QWORD PTR [rbp+0x0]
  407ec4:	mov    rdx,QWORD PTR [rbp+0x8]
  407ec8:	mov    rdi,rcx
  407ecb:	call   4031e0 <memcpy@plt>
  407ed0:	mov    rcx,QWORD PTR [rbp+0x8]
  407ed4:	add    rbp,0x10
  407ed8:	add    rcx,rax
  407edb:	cmp    rbp,rbx
  407ede:	jne    407ec0 <flatcc_emitter@@Base+0xe0>
  407ee0:	jmp    407e83 <flatcc_emitter@@Base+0xa3>
  407ee2:	nop    WORD PTR [rax+rax*1+0x0]
  407ee8:	mov    r12,QWORD PTR [rbx+0x8]
  407eec:	test   r12,r12
  407eef:	je     407f98 <flatcc_emitter@@Base+0x1b8>
  407ef5:	mov    rax,QWORD PTR [r12+0xb80]
  407efd:	mov    r14,QWORD PTR [rbx]
  407f00:	cmp    rax,r14
  407f03:	je     407f50 <flatcc_emitter@@Base+0x170>
  407f05:	mov    QWORD PTR [rbx+0x8],rax
  407f09:	mov    QWORD PTR [rbx+0x28],0xb80
  407f11:	mov    rdx,QWORD PTR [rax+0xb88]
  407f18:	mov    QWORD PTR [rbx+0x20],rax
  407f1c:	mov    edx,DWORD PTR [rdx+0xb90]
  407f22:	mov    r12,QWORD PTR [rbx+0x28]
  407f26:	add    edx,0xb80
  407f2c:	mov    DWORD PTR [rax+0xb90],edx
  407f32:	cmp    r15,r12
  407f35:	ja     407e4d <flatcc_emitter@@Base+0x6d>
  407f3b:	nop    DWORD PTR [rax+rax*1+0x0]
  407f40:	mov    r12,r15
  407f43:	xor    r15d,r15d
  407f46:	jmp    407e59 <flatcc_emitter@@Base+0x79>
  407f4b:	nop    DWORD PTR [rax+rax*1+0x0]
  407f50:	mov    edi,0xb98
  407f55:	call   4031f0 <malloc@plt>
  407f5a:	test   rax,rax
  407f5d:	je     407ff8 <flatcc_emitter@@Base+0x218>
  407f63:	add    QWORD PTR [rbx+0x38],0xb80
  407f6b:	mov    QWORD PTR [rax+0xb88],r12
  407f72:	mov    QWORD PTR [rax+0xb80],r14
  407f79:	mov    QWORD PTR [r14+0xb88],rax
  407f80:	mov    QWORD PTR [r12+0xb80],rax
  407f88:	mov    QWORD PTR [rbx+0x8],rax
  407f8c:	jmp    407f09 <flatcc_emitter@@Base+0x129>
  407f91:	nop    DWORD PTR [rax+0x0]
  407f98:	mov    edi,0xb98
  407f9d:	call   4031f0 <malloc@plt>
  407fa2:	test   rax,rax
  407fa5:	je     407ff8 <flatcc_emitter@@Base+0x218>
  407fa7:	lea    rdx,[rax+0x5c0]
  407fae:	add    QWORD PTR [rbx+0x38],0xb80
  407fb6:	mov    QWORD PTR [rbx],rax
  407fb9:	mov    QWORD PTR [rbx+0x8],rax
  407fbd:	mov    QWORD PTR [rax+0xb80],rax
  407fc4:	mov    QWORD PTR [rax+0xb88],rax
  407fcb:	mov    QWORD PTR [rbx+0x10],rdx
  407fcf:	mov    QWORD PTR [rbx+0x20],rdx
  407fd3:	mov    QWORD PTR [rbx+0x18],0x5c0
  407fdb:	mov    QWORD PTR [rbx+0x28],0x5c0
  407fe3:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  407fed:	jmp    407e40 <flatcc_emitter@@Base+0x60>
  407ff2:	nop    WORD PTR [rax+rax*1+0x0]
  407ff8:	add    rsp,0x18
  407ffc:	pop    rbx
  407ffd:	pop    rbp
  407ffe:	pop    r12
  408000:	pop    r13
  408002:	pop    r14
  408004:	mov    eax,0xffffffff
  408009:	pop    r15
  40800b:	ret    
  40800c:	nop    DWORD PTR [rax+0x0]
  408010:	mov    rax,QWORD PTR [rdi+0x18]
  408014:	cmp    rax,r8
  408017:	jae    4081c0 <flatcc_emitter@@Base+0x3e0>
  40801d:	movsxd rax,edx
  408020:	shl    rax,0x4
  408024:	add    rbp,rax
  408027:	mov    edx,edx
  408029:	shl    rdx,0x4
  40802d:	mov    rax,rbp
  408030:	sub    rax,rdx
  408033:	mov    QWORD PTR [rsp+0x8],rax
  408038:	nop    DWORD PTR [rax+rax*1+0x0]
  408040:	cmp    rbp,QWORD PTR [rsp+0x8]
  408045:	je     407e83 <flatcc_emitter@@Base+0xa3>
  40804b:	sub    rbp,0x10
  40804f:	mov    r12,QWORD PTR [rbp+0x8]
  408053:	mov    r13,QWORD PTR [rbp+0x0]
  408057:	add    r13,r12
  40805a:	test   r12,r12
  40805d:	je     408040 <flatcc_emitter@@Base+0x260>
  40805f:	mov    rdx,QWORD PTR [rbx+0x18]
  408063:	cmp    rdx,r12
  408066:	jae    4080a0 <flatcc_emitter@@Base+0x2c0>
  408068:	test   rdx,rdx
  40806b:	je     4080b0 <flatcc_emitter@@Base+0x2d0>
  40806d:	sub    r12,rdx
  408070:	xor    ecx,ecx
  408072:	mov    rdi,QWORD PTR [rbx+0x10]
  408076:	mov    rax,rdx
  408079:	neg    rax
  40807c:	add    rdi,rax
  40807f:	mov    QWORD PTR [rbx+0x10],rdi
  408083:	mov    QWORD PTR [rbx+0x18],rcx
  408087:	add    r13,rax
  40808a:	mov    rsi,r13
  40808d:	call   4031e0 <memcpy@plt>
  408092:	test   r12,r12
  408095:	je     408040 <flatcc_emitter@@Base+0x260>
  408097:	mov    rdx,QWORD PTR [rbx+0x18]
  40809b:	cmp    rdx,r12
  40809e:	jb     408068 <flatcc_emitter@@Base+0x288>
  4080a0:	mov    rcx,rdx
  4080a3:	sub    rcx,r12
  4080a6:	mov    rdx,r12
  4080a9:	xor    r12d,r12d
  4080ac:	jmp    408072 <flatcc_emitter@@Base+0x292>
  4080ae:	xchg   ax,ax
  4080b0:	mov    r15,QWORD PTR [rbx]
  4080b3:	test   r15,r15
  4080b6:	je     408158 <flatcc_emitter@@Base+0x378>
  4080bc:	mov    rax,QWORD PTR [r15+0xb88]
  4080c3:	mov    r14,QWORD PTR [rbx+0x8]
  4080c7:	cmp    rax,r14
  4080ca:	je     408118 <flatcc_emitter@@Base+0x338>
  4080cc:	mov    edx,DWORD PTR [r15+0xb90]
  4080d3:	sub    edx,0xb80
  4080d9:	mov    DWORD PTR [rax+0xb90],edx
  4080df:	mov    QWORD PTR [rbx],rax
  4080e2:	lea    rdx,[rax+0xb80]
  4080e9:	mov    QWORD PTR [rbx+0x10],rdx
  4080ed:	mov    rdx,QWORD PTR [rax+0xb80]
  4080f4:	mov    QWORD PTR [rbx+0x18],0xb80
  4080fc:	mov    edx,DWORD PTR [rdx+0xb90]
  408102:	sub    edx,0xb80
  408108:	mov    DWORD PTR [rax+0xb90],edx
  40810e:	jmp    40805f <flatcc_emitter@@Base+0x27f>
  408113:	nop    DWORD PTR [rax+rax*1+0x0]
  408118:	mov    edi,0xb98
  40811d:	call   4031f0 <malloc@plt>
  408122:	test   rax,rax
  408125:	je     407ff8 <flatcc_emitter@@Base+0x218>
  40812b:	add    QWORD PTR [rbx+0x38],0xb80
  408133:	mov    QWORD PTR [rax+0xb88],r14
  40813a:	mov    QWORD PTR [rax+0xb80],r15
  408141:	mov    QWORD PTR [r15+0xb88],rax
  408148:	mov    QWORD PTR [r14+0xb80],rax
  40814f:	mov    QWORD PTR [rbx],rax
  408152:	jmp    4080e2 <flatcc_emitter@@Base+0x302>
  408154:	nop    DWORD PTR [rax+0x0]
  408158:	mov    edi,0xb98
  40815d:	call   4031f0 <malloc@plt>
  408162:	test   rax,rax
  408165:	je     407ff8 <flatcc_emitter@@Base+0x218>
  40816b:	lea    rdx,[rax+0x5c0]
  408172:	add    QWORD PTR [rbx+0x38],0xb80
  40817a:	mov    QWORD PTR [rbx],rax
  40817d:	mov    QWORD PTR [rbx+0x8],rax
  408181:	mov    QWORD PTR [rax+0xb80],rax
  408188:	mov    QWORD PTR [rax+0xb88],rax
  40818f:	mov    QWORD PTR [rbx+0x10],rdx
  408193:	mov    QWORD PTR [rbx+0x20],rdx
  408197:	mov    QWORD PTR [rbx+0x18],0x5c0
  40819f:	mov    QWORD PTR [rbx+0x28],0x5c0
  4081a7:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4081b1:	jmp    40805f <flatcc_emitter@@Base+0x27f>
  4081b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4081c0:	mov    rcx,QWORD PTR [rdi+0x10]
  4081c4:	sub    rax,r8
  4081c7:	sub    rcx,r8
  4081ca:	mov    QWORD PTR [rdi+0x10],rcx
  4081ce:	mov    QWORD PTR [rdi+0x18],rax
  4081d2:	jmp    407eab <flatcc_emitter@@Base+0xcb>
  4081d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004081e0 <flatcc_emitter_copy_buffer@@Base>:
  4081e0:	endbr64 
  4081e4:	mov    rax,QWORD PTR [rdi+0x30]
  4081e8:	cmp    rax,rdx
  4081eb:	ja     408290 <flatcc_emitter_copy_buffer@@Base+0xb0>
  4081f1:	mov    rcx,QWORD PTR [rdi]
  4081f4:	test   rcx,rcx
  4081f7:	je     408292 <flatcc_emitter_copy_buffer@@Base+0xb2>
  4081fd:	push   rbp
  4081fe:	mov    r8,rsi
  408201:	mov    rbp,rdi
  408204:	push   rbx
  408205:	sub    rsp,0x8
  408209:	mov    rsi,QWORD PTR [rdi+0x10]
  40820d:	cmp    rcx,QWORD PTR [rdi+0x8]
  408211:	je     4082a0 <flatcc_emitter_copy_buffer@@Base+0xc0>
  408217:	mov    ecx,0xb80
  40821c:	mov    rbx,rcx
  40821f:	sub    rbx,QWORD PTR [rdi+0x18]
  408223:	mov    rdx,rbx
  408226:	mov    rdi,r8
  408229:	call   4031e0 <memcpy@plt>
  40822e:	lea    rcx,[rax+rbx*1]
  408232:	mov    rax,QWORD PTR [rbp+0x0]
  408236:	mov    rbx,QWORD PTR [rax+0xb80]
  40823d:	cmp    rbx,QWORD PTR [rbp+0x8]
  408241:	je     40826f <flatcc_emitter_copy_buffer@@Base+0x8f>
  408243:	nop    DWORD PTR [rax+rax*1+0x0]
  408248:	mov    rsi,rbx
  40824b:	mov    rdi,rcx
  40824e:	mov    edx,0xb80
  408253:	call   4031e0 <memcpy@plt>
  408258:	mov    rbx,QWORD PTR [rbx+0xb80]
  40825f:	mov    rcx,rax
  408262:	add    rcx,0xb80
  408269:	cmp    QWORD PTR [rbp+0x8],rbx
  40826d:	jne    408248 <flatcc_emitter_copy_buffer@@Base+0x68>
  40826f:	mov    edx,0xb80
  408274:	sub    rdx,QWORD PTR [rbp+0x28]
  408278:	mov    rsi,rbx
  40827b:	mov    rdi,rcx
  40827e:	call   4031e0 <memcpy@plt>
  408283:	add    rsp,0x8
  408287:	mov    rcx,rax
  40828a:	pop    rbx
  40828b:	mov    rax,rcx
  40828e:	pop    rbp
  40828f:	ret    
  408290:	xor    ecx,ecx
  408292:	mov    rax,rcx
  408295:	ret    
  408296:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4082a0:	mov    rdx,rax
  4082a3:	mov    rdi,r8
  4082a6:	call   4031e0 <memcpy@plt>
  4082ab:	add    rsp,0x8
  4082af:	mov    rcx,rax
  4082b2:	pop    rbx
  4082b3:	mov    rax,rcx
  4082b6:	pop    rbp
  4082b7:	ret    
  4082b8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004082c0 <__libc_csu_init@@Base>:
  4082c0:	endbr64 
  4082c4:	push   r15
  4082c6:	lea    r15,[rip+0x4b43]        # 40ce10 <flatcc_builder_padding_base@@Base+0x2e50>
  4082cd:	push   r14
  4082cf:	mov    r14,rdx
  4082d2:	push   r13
  4082d4:	mov    r13,rsi
  4082d7:	push   r12
  4082d9:	mov    r12d,edi
  4082dc:	push   rbp
  4082dd:	lea    rbp,[rip+0x4b34]        # 40ce18 <flatcc_builder_padding_base@@Base+0x2e58>
  4082e4:	push   rbx
  4082e5:	sub    rbp,r15
  4082e8:	sub    rsp,0x8
  4082ec:	call   403000 <free@plt-0x140>
  4082f1:	sar    rbp,0x3
  4082f5:	je     408316 <__libc_csu_init@@Base+0x56>
  4082f7:	xor    ebx,ebx
  4082f9:	nop    DWORD PTR [rax+0x0]
  408300:	mov    rdx,r14
  408303:	mov    rsi,r13
  408306:	mov    edi,r12d
  408309:	call   QWORD PTR [r15+rbx*8]
  40830d:	add    rbx,0x1
  408311:	cmp    rbp,rbx
  408314:	jne    408300 <__libc_csu_init@@Base+0x40>
  408316:	add    rsp,0x8
  40831a:	pop    rbx
  40831b:	pop    rbp
  40831c:	pop    r12
  40831e:	pop    r13
  408320:	pop    r14
  408322:	pop    r15
  408324:	ret    
  408325:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000408330 <__libc_csu_fini@@Base>:
  408330:	endbr64 
  408334:	ret    

Disassembly of section .fini:

0000000000408338 <.fini>:
  408338:	endbr64 
  40833c:	sub    rsp,0x8
  408340:	add    rsp,0x8
  408344:	ret    
