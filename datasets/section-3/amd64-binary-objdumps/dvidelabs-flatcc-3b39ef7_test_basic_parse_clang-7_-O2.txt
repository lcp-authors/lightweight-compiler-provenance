
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0x10fe1]        # 413ff0 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0x10fe2]        # 414008 <flatcc_builder_padding_base@@Base+0x5ca8>
  403026:	jmp    QWORD PTR [rip+0x10fe4]        # 414010 <flatcc_builder_padding_base@@Base+0x5cb0>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0x10fe2]        # 414018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <strtod@plt>:
  403040:	jmp    QWORD PTR [rip+0x10fda]        # 414020 <strtod@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <strlen@plt>:
  403050:	jmp    QWORD PTR [rip+0x10fd2]        # 414028 <strlen@GLIBC_2.2.5>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <__assert_fail@plt>:
  403060:	jmp    QWORD PTR [rip+0x10fca]        # 414030 <__assert_fail@GLIBC_2.2.5>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <memset@plt>:
  403070:	jmp    QWORD PTR [rip+0x10fc2]        # 414038 <memset@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <memchr@plt>:
  403080:	jmp    QWORD PTR [rip+0x10fba]        # 414040 <memchr@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <memcmp@plt>:
  403090:	jmp    QWORD PTR [rip+0x10fb2]        # 414048 <memcmp@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <fprintf@plt>:
  4030a0:	jmp    QWORD PTR [rip+0x10faa]        # 414050 <fprintf@GLIBC_2.2.5>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <memcpy@plt>:
  4030b0:	jmp    QWORD PTR [rip+0x10fa2]        # 414058 <memcpy@GLIBC_2.14>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <malloc@plt>:
  4030c0:	jmp    QWORD PTR [rip+0x10f9a]        # 414060 <malloc@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <realloc@plt>:
  4030d0:	jmp    QWORD PTR [rip+0x10f92]        # 414068 <realloc@GLIBC_2.2.5>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

00000000004030e0 <fwrite@plt>:
  4030e0:	jmp    QWORD PTR [rip+0x10f8a]        # 414070 <fwrite@GLIBC_2.2.5>
  4030e6:	push   0xb
  4030eb:	jmp    403020 <free@plt-0x10>

00000000004030f0 <posix_memalign@plt>:
  4030f0:	jmp    QWORD PTR [rip+0x10f82]        # 414078 <posix_memalign@GLIBC_2.2.5>
  4030f6:	push   0xc
  4030fb:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

0000000000403100 <_start@@Base>:
  403100:	endbr64 
  403104:	xor    ebp,ebp
  403106:	mov    r9,rdx
  403109:	pop    rsi
  40310a:	mov    rdx,rsp
  40310d:	and    rsp,0xfffffffffffffff0
  403111:	push   rax
  403112:	push   rsp
  403113:	mov    r8,0x40d400
  40311a:	mov    rcx,0x40d390
  403121:	mov    rdi,0x4044b0
  403128:	call   QWORD PTR [rip+0x10eba]        # 413fe8 <__libc_start_main@GLIBC_2.2.5>
  40312e:	hlt    
  40312f:	nop
  403130:	endbr64 
  403134:	ret    
  403135:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40313f:	nop
  403140:	mov    eax,0x414090
  403145:	cmp    rax,0x414090
  40314b:	je     403160 <_start@@Base+0x60>
  40314d:	mov    eax,0x0
  403152:	test   rax,rax
  403155:	je     403160 <_start@@Base+0x60>
  403157:	mov    edi,0x414090
  40315c:	jmp    rax
  40315e:	xchg   ax,ax
  403160:	ret    
  403161:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40316c:	nop    DWORD PTR [rax+0x0]
  403170:	mov    esi,0x414090
  403175:	sub    rsi,0x414090
  40317c:	mov    rax,rsi
  40317f:	shr    rsi,0x3f
  403183:	sar    rax,0x3
  403187:	add    rsi,rax
  40318a:	sar    rsi,1
  40318d:	je     4031a0 <_start@@Base+0xa0>
  40318f:	mov    eax,0x0
  403194:	test   rax,rax
  403197:	je     4031a0 <_start@@Base+0xa0>
  403199:	mov    edi,0x414090
  40319e:	jmp    rax
  4031a0:	ret    
  4031a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031ac:	nop    DWORD PTR [rax+0x0]
  4031b0:	endbr64 
  4031b4:	cmp    BYTE PTR [rip+0x10ed5],0x0        # 414090 <__bss_start@@Base>
  4031bb:	jne    4031d0 <_start@@Base+0xd0>
  4031bd:	push   rbp
  4031be:	mov    rbp,rsp
  4031c1:	call   403140 <_start@@Base+0x40>
  4031c6:	mov    BYTE PTR [rip+0x10ec3],0x1        # 414090 <__bss_start@@Base>
  4031cd:	pop    rbp
  4031ce:	ret    
  4031cf:	nop
  4031d0:	ret    
  4031d1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031dc:	nop    DWORD PTR [rax+0x0]
  4031e0:	endbr64 
  4031e4:	jmp    403170 <_start@@Base+0x70>
  4031e6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004031f0 <test@@Base>:
  4031f0:	push   rbp
  4031f1:	mov    rbp,rsp
  4031f4:	push   r15
  4031f6:	push   r14
  4031f8:	push   r13
  4031fa:	push   r12
  4031fc:	push   rbx
  4031fd:	and    rsp,0xffffffffffffffe0
  403201:	sub    rsp,0xa0
  403208:	vxorps xmm0,xmm0,xmm0
  40320c:	vmovaps YMMWORD PTR [rsp+0x20],ymm0
  403212:	mov    r14,rcx
  403215:	mov    r13,rdx
  403218:	mov    rbx,rsi
  40321b:	vmovaps YMMWORD PTR [rsp+0x40],ymm0
  403221:	mov    QWORD PTR [rsp+0x60],0x0
  40322a:	mov    DWORD PTR [rsp+0x38],0x1
  403232:	mov    QWORD PTR [rsp+0x28],rsi
  403237:	lea    rsi,[rip+0xb098]        # 40e2d6 <g_data@@Base+0x286>
  40323e:	xor    edx,edx
  403240:	xor    ecx,ecx
  403242:	mov    QWORD PTR [rsp+0x10],rdi
  403247:	vzeroupper 
  40324a:	call   405470 <flatcc_builder_start_buffer@@Base>
  40324f:	mov    rax,r13
  403252:	sub    rax,rbx
  403255:	cmp    rax,0x2
  403259:	jl     40326e <test@@Base+0x7e>
  40325b:	cmp    BYTE PTR [rbx],0x20
  40325e:	jg     403281 <test@@Base+0x91>
  403260:	jne    40326e <test@@Base+0x7e>
  403262:	cmp    BYTE PTR [rbx+0x1],0x20
  403266:	jle    40326e <test@@Base+0x7e>
  403268:	add    rbx,0x1
  40326c:	jmp    403281 <test@@Base+0x91>
  40326e:	lea    rdi,[rsp+0x20]
  403273:	mov    rsi,rbx
  403276:	mov    rdx,r13
  403279:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40327e:	mov    rbx,rax
  403281:	cmp    rbx,r13
  403284:	mov    QWORD PTR [rsp+0x80],r14
  40328c:	je     40427b <test@@Base+0x108b>
  403292:	jae    4042af <test@@Base+0x10bf>
  403298:	cmp    BYTE PTR [rbx],0x7b
  40329b:	jne    4042af <test@@Base+0x10bf>
  4032a1:	lea    r12,[rbx+0x1]
  4032a5:	mov    rax,r13
  4032a8:	sub    rax,r12
  4032ab:	cmp    rax,0x2
  4032af:	jl     4032d1 <test@@Base+0xe1>
  4032b1:	cmp    BYTE PTR [r12],0x20
  4032b6:	jg     4032e4 <test@@Base+0xf4>
  4032b8:	jne    4032d1 <test@@Base+0xe1>
  4032ba:	cmp    BYTE PTR [rbx+0x2],0x20
  4032be:	jle    4032d1 <test@@Base+0xe1>
  4032c0:	add    rbx,0x2
  4032c4:	mov    r12,rbx
  4032c7:	cmp    r12,r13
  4032ca:	jne    4032ed <test@@Base+0xfd>
  4032cc:	jmp    40427b <test@@Base+0x108b>
  4032d1:	lea    rdi,[rsp+0x20]
  4032d6:	mov    rsi,r12
  4032d9:	mov    rdx,r13
  4032dc:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  4032e1:	mov    r12,rax
  4032e4:	cmp    r12,r13
  4032e7:	je     40427b <test@@Base+0x108b>
  4032ed:	movabs r14,0x7365636f6e640000
  4032f7:	mov    esi,0xb
  4032fc:	mov    rdi,QWORD PTR [rsp+0x10]
  403301:	call   406740 <flatcc_builder_start_table@@Base>
  403306:	mov    rax,r13
  403309:	cmp    r12,r13
  40330c:	je     40335b <test@@Base+0x16b>
  40330e:	mov    al,BYTE PTR [r12]
  403312:	cmp    al,0x2e
  403314:	je     403330 <test@@Base+0x140>
  403316:	cmp    al,0x22
  403318:	jne    403350 <test@@Base+0x160>
  40331a:	add    r12,0x1
  40331e:	mov    DWORD PTR [rsp+0x34],0x0
  403326:	jmp    403358 <test@@Base+0x168>
  403328:	nop    DWORD PTR [rax+rax*1+0x0]
  403330:	mov    ecx,0x5
  403335:	lea    rdi,[rsp+0x20]
  40333a:	mov    rsi,r12
  40333d:	mov    rdx,r13
  403340:	call   409b80 <flatcc_json_parser_set_error@@Base>
  403345:	jmp    40335b <test@@Base+0x16b>
  403347:	nop    WORD PTR [rax+rax*1+0x0]
  403350:	mov    DWORD PTR [rsp+0x34],0x1
  403358:	mov    rax,r12
  40335b:	mov    r11,r13
  40335e:	sub    r11,rax
  403361:	cmp    r11,0x8
  403365:	jb     403380 <test@@Base+0x190>
  403367:	movbe  rdx,QWORD PTR [rax]
  40336c:	jmp    403410 <test@@Base+0x220>
  403371:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40337b:	nop    DWORD PTR [rax+rax*1+0x0]
  403380:	mov    edx,r11d
  403383:	and    dl,0xf
  403386:	add    dl,0xff
  403389:	cmp    dl,0x7
  40338c:	ja     4042a0 <test@@Base+0x10b0>
  403392:	movzx  edx,dl
  403395:	lea    rcx,[rip+0xac74]        # 40e010 <_IO_stdin_used@@Base+0x10>
  40339c:	mov    rsi,rcx
  40339f:	movsxd rcx,DWORD PTR [rcx+rdx*4]
  4033a3:	add    rcx,rsi
  4033a6:	xor    r8d,r8d
  4033a9:	xor    r9d,r9d
  4033ac:	xor    r10d,r10d
  4033af:	xor    edi,edi
  4033b1:	xor    ebx,ebx
  4033b3:	xor    edx,edx
  4033b5:	xor    esi,esi
  4033b7:	jmp    rcx
  4033b9:	movsx  r8,BYTE PTR [rax+0x7]
  4033be:	movsx  r9,BYTE PTR [rax+0x6]
  4033c3:	shl    r9,0x8
  4033c7:	or     r9,r8
  4033ca:	movsx  r10,BYTE PTR [rax+0x5]
  4033cf:	shl    r10,0x10
  4033d3:	or     r10,r9
  4033d6:	movsx  rdi,BYTE PTR [rax+0x4]
  4033db:	shl    rdi,0x18
  4033df:	or     rdi,r10
  4033e2:	movsx  rbx,BYTE PTR [rax+0x3]
  4033e7:	shl    rbx,0x20
  4033eb:	or     rbx,rdi
  4033ee:	movsx  rdx,BYTE PTR [rax+0x2]
  4033f3:	shl    rdx,0x28
  4033f7:	or     rdx,rbx
  4033fa:	movsx  rsi,BYTE PTR [rax+0x1]
  4033ff:	shl    rsi,0x30
  403403:	or     rsi,rdx
  403406:	movzx  edx,BYTE PTR [rax]
  403409:	shl    rdx,0x38
  40340d:	or     rdx,rsi
  403410:	lea    rsi,[rax+0x8]
  403414:	cmp    r11,0x8
  403418:	cmovle rsi,r13
  40341c:	mov    rcx,rdx
  40341f:	and    rcx,0xffffffffffff0000
  403426:	cmp    rcx,r14
  403429:	jae    4034e0 <test@@Base+0x2f0>
  40342f:	shr    rdx,0x18
  403433:	movabs rcx,0x6669727374
  40343d:	cmp    rdx,rcx
  403440:	jne    4042a0 <test@@Base+0x10b0>
  403446:	lea    rsi,[rax+0x5]
  40344a:	cmp    DWORD PTR [rsp+0x34],0x0
  40344f:	je     403647 <test@@Base+0x457>
  403455:	mov    rbx,r13
  403458:	cmp    rsi,r13
  40345b:	lea    r14,[rsp+0x20]
  403460:	je     403a67 <test@@Base+0x877>
  403466:	mov    dl,BYTE PTR [rsi]
  403468:	cmp    dl,0x21
  40346b:	jl     403a64 <test@@Base+0x874>
  403471:	add    rax,0x6
  403475:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40347f:	nop
  403480:	mov    ecx,edx
  403482:	cmp    dl,0x2e
  403485:	je     4034b0 <test@@Base+0x2c0>
  403487:	cmp    cl,0x5f
  40348a:	je     4034b0 <test@@Base+0x2c0>
  40348c:	mov    edx,ecx
  40348e:	add    dl,0xd0
  403491:	cmp    dl,0x9
  403494:	jbe    4034b0 <test@@Base+0x2c0>
  403496:	mov    edx,ecx
  403498:	or     dl,0x20
  40349b:	add    dl,0x9f
  40349e:	cmp    dl,0x1a
  4034a1:	jae    403a54 <test@@Base+0x864>
  4034a7:	nop    WORD PTR [rax+rax*1+0x0]
  4034b0:	cmp    r13,rax
  4034b3:	je     403925 <test@@Base+0x735>
  4034b9:	add    rsi,0x1
  4034bd:	movzx  edx,BYTE PTR [rax]
  4034c0:	add    rax,0x1
  4034c4:	cmp    dl,0x21
  4034c7:	jge    403480 <test@@Base+0x290>
  4034c9:	cmp    cl,0x2e
  4034cc:	je     403931 <test@@Base+0x741>
  4034d2:	jmp    403a64 <test@@Base+0x874>
  4034d7:	nop    WORD PTR [rax+rax*1+0x0]
  4034e0:	mov    rbx,rdx
  4034e3:	movabs rdi,0xffffffff00000000
  4034ed:	and    rbx,rdi
  4034f0:	mov    rdi,rbx
  4034f3:	shr    rdi,0x20
  4034f7:	cmp    rdi,0x7a756c74
  4034fe:	ja     4035a0 <test@@Base+0x3b0>
  403504:	lea    rdi,[r14+0x7320]
  40350b:	cmp    rdx,rdi
  40350e:	jae    403695 <test@@Base+0x4a5>
  403514:	cmp    rcx,r14
  403517:	jne    4042a0 <test@@Base+0x10b0>
  40351d:	lea    rsi,[rax+0x6]
  403521:	cmp    DWORD PTR [rsp+0x34],0x0
  403526:	je     4038d7 <test@@Base+0x6e7>
  40352c:	mov    rbx,r13
  40352f:	cmp    rsi,r13
  403532:	lea    r14,[rsp+0x20]
  403537:	je     404178 <test@@Base+0xf88>
  40353d:	mov    dl,BYTE PTR [rsi]
  40353f:	cmp    dl,0x21
  403542:	jl     404175 <test@@Base+0xf85>
  403548:	add    rax,0x7
  40354c:	nop    DWORD PTR [rax+0x0]
  403550:	mov    ecx,edx
  403552:	cmp    dl,0x2e
  403555:	je     403580 <test@@Base+0x390>
  403557:	cmp    cl,0x5f
  40355a:	je     403580 <test@@Base+0x390>
  40355c:	mov    edx,ecx
  40355e:	add    dl,0xd0
  403561:	cmp    dl,0x9
  403564:	jbe    403580 <test@@Base+0x390>
  403566:	mov    edx,ecx
  403568:	or     dl,0x20
  40356b:	add    dl,0x9f
  40356e:	cmp    dl,0x1a
  403571:	jae    404165 <test@@Base+0xf75>
  403577:	nop    WORD PTR [rax+rax*1+0x0]
  403580:	cmp    r13,rax
  403583:	je     403a3b <test@@Base+0x84b>
  403589:	add    rsi,0x1
  40358d:	movzx  edx,BYTE PTR [rax]
  403590:	add    rax,0x1
  403594:	cmp    dl,0x21
  403597:	jge    403550 <test@@Base+0x360>
  403599:	jmp    403a3e <test@@Base+0x84e>
  40359e:	xchg   ax,ax
  4035a0:	movabs rcx,0x7a756c7500000000
  4035aa:	cmp    rbx,rcx
  4035ad:	jne    4042a0 <test@@Base+0x10b0>
  4035b3:	lea    rsi,[rax+0x4]
  4035b7:	cmp    DWORD PTR [rsp+0x34],0x0
  4035bc:	je     4036b6 <test@@Base+0x4c6>
  4035c2:	mov    r14,r13
  4035c5:	cmp    rsi,r13
  4035c8:	je     403cd8 <test@@Base+0xae8>
  4035ce:	mov    dl,BYTE PTR [rsi]
  4035d0:	cmp    dl,0x21
  4035d3:	jl     403cd5 <test@@Base+0xae5>
  4035d9:	add    rax,0x5
  4035dd:	lea    rdi,[rsp+0x20]
  4035e2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4035ec:	nop    DWORD PTR [rax+0x0]
  4035f0:	mov    ecx,edx
  4035f2:	cmp    dl,0x2e
  4035f5:	je     403620 <test@@Base+0x430>
  4035f7:	cmp    cl,0x5f
  4035fa:	je     403620 <test@@Base+0x430>
  4035fc:	mov    edx,ecx
  4035fe:	add    dl,0xd0
  403601:	cmp    dl,0x9
  403604:	jbe    403620 <test@@Base+0x430>
  403606:	mov    edx,ecx
  403608:	or     dl,0x20
  40360b:	add    dl,0x9f
  40360e:	cmp    dl,0x1a
  403611:	jae    403cc5 <test@@Base+0xad5>
  403617:	nop    WORD PTR [rax+rax*1+0x0]
  403620:	cmp    r13,rax
  403623:	je     403962 <test@@Base+0x772>
  403629:	add    rsi,0x1
  40362d:	movzx  edx,BYTE PTR [rax]
  403630:	add    rax,0x1
  403634:	cmp    dl,0x21
  403637:	jge    4035f0 <test@@Base+0x400>
  403639:	cmp    cl,0x2e
  40363c:	je     40396e <test@@Base+0x77e>
  403642:	jmp    403cd5 <test@@Base+0xae5>
  403647:	mov    rax,r13
  40364a:	cmp    rsi,r13
  40364d:	lea    r14,[rsp+0x20]
  403652:	je     403947 <test@@Base+0x757>
  403658:	nop    DWORD PTR [rax+rax*1+0x0]
  403660:	movzx  eax,BYTE PTR [rsi]
  403663:	cmp    al,0x5c
  403665:	je     403670 <test@@Base+0x480>
  403667:	cmp    al,0x22
  403669:	jne    403684 <test@@Base+0x494>
  40366b:	jmp    4038ce <test@@Base+0x6de>
  403670:	mov    rax,r13
  403673:	sub    rax,rsi
  403676:	cmp    rax,0x2
  40367a:	jl     403944 <test@@Base+0x754>
  403680:	add    rsi,0x1
  403684:	add    rsi,0x1
  403688:	cmp    rsi,r13
  40368b:	jne    403660 <test@@Base+0x470>
  40368d:	mov    rax,r13
  403690:	jmp    403947 <test@@Base+0x757>
  403695:	jne    4042a0 <test@@Base+0x10b0>
  40369b:	mov    rax,r13
  40369e:	sub    rax,rsi
  4036a1:	cmp    rax,0x8
  4036a5:	jb     403705 <test@@Base+0x515>
  4036a7:	movbe  rax,QWORD PTR [rsi]
  4036ac:	lea    r14,[rsp+0x20]
  4036b1:	jmp    403791 <test@@Base+0x5a1>
  4036b6:	mov    rax,r13
  4036b9:	cmp    rsi,r13
  4036bc:	lea    rdi,[rsp+0x20]
  4036c1:	je     403a23 <test@@Base+0x833>
  4036c7:	nop    WORD PTR [rax+rax*1+0x0]
  4036d0:	movzx  eax,BYTE PTR [rsi]
  4036d3:	cmp    al,0x5c
  4036d5:	je     4036e0 <test@@Base+0x4f0>
  4036d7:	cmp    al,0x22
  4036d9:	jne    4036f4 <test@@Base+0x504>
  4036db:	jmp    40393b <test@@Base+0x74b>
  4036e0:	mov    rax,r13
  4036e3:	sub    rax,rsi
  4036e6:	cmp    rax,0x2
  4036ea:	jl     403a20 <test@@Base+0x830>
  4036f0:	add    rsi,0x1
  4036f4:	add    rsi,0x1
  4036f8:	cmp    rsi,r13
  4036fb:	jne    4036d0 <test@@Base+0x4e0>
  4036fd:	mov    rax,r13
  403700:	jmp    403a23 <test@@Base+0x833>
  403705:	and    al,0xf
  403707:	add    al,0xff
  403709:	cmp    al,0x7
  40370b:	lea    r14,[rsp+0x20]
  403710:	ja     404494 <test@@Base+0x12a4>
  403716:	movzx  eax,al
  403719:	lea    rcx,[rip+0xa910]        # 40e030 <_IO_stdin_used@@Base+0x30>
  403720:	movsxd rax,DWORD PTR [rcx+rax*4]
  403724:	add    rax,rcx
  403727:	xor    r8d,r8d
  40372a:	xor    r9d,r9d
  40372d:	xor    r10d,r10d
  403730:	xor    edx,edx
  403732:	xor    ebx,ebx
  403734:	xor    edi,edi
  403736:	xor    ecx,ecx
  403738:	jmp    rax
  40373a:	movsx  r8,BYTE PTR [rsi+0x7]
  40373f:	movsx  r9,BYTE PTR [rsi+0x6]
  403744:	shl    r9,0x8
  403748:	or     r9,r8
  40374b:	movsx  r10,BYTE PTR [rsi+0x5]
  403750:	shl    r10,0x10
  403754:	or     r10,r9
  403757:	movsx  rdx,BYTE PTR [rsi+0x4]
  40375c:	shl    rdx,0x18
  403760:	or     rdx,r10
  403763:	movsx  rbx,BYTE PTR [rsi+0x3]
  403768:	shl    rbx,0x20
  40376c:	or     rbx,rdx
  40376f:	movsx  rdi,BYTE PTR [rsi+0x2]
  403774:	shl    rdi,0x28
  403778:	or     rdi,rbx
  40377b:	movsx  rcx,BYTE PTR [rsi+0x1]
  403780:	shl    rcx,0x30
  403784:	or     rcx,rdi
  403787:	movzx  eax,BYTE PTR [rsi]
  40378a:	shl    rax,0x38
  40378e:	or     rax,rcx
  403791:	movabs rcx,0xffffffff00000000
  40379b:	and    rax,rcx
  40379e:	mov    rcx,rax
  4037a1:	shr    rcx,0x22
  4037a5:	cmp    rcx,0x1b19599c
  4037ac:	ja     40383e <test@@Base+0x64e>
  4037b2:	movabs rcx,0x6c65616400000000
  4037bc:	cmp    rax,rcx
  4037bf:	jne    404494 <test@@Base+0x12a4>
  4037c5:	lea    rax,[rsi+0x4]
  4037c9:	cmp    DWORD PTR [rsp+0x34],0x0
  4037ce:	je     403978 <test@@Base+0x788>
  4037d4:	mov    rbx,r13
  4037d7:	cmp    rax,r13
  4037da:	je     403f03 <test@@Base+0xd13>
  4037e0:	mov    dl,BYTE PTR [rax]
  4037e2:	cmp    dl,0x21
  4037e5:	jl     403f00 <test@@Base+0xd10>
  4037eb:	add    rsi,0x5
  4037ef:	nop
  4037f0:	mov    ecx,edx
  4037f2:	cmp    dl,0x2e
  4037f5:	je     403820 <test@@Base+0x630>
  4037f7:	cmp    cl,0x5f
  4037fa:	je     403820 <test@@Base+0x630>
  4037fc:	mov    edx,ecx
  4037fe:	add    dl,0xd0
  403801:	cmp    dl,0x9
  403804:	jbe    403820 <test@@Base+0x630>
  403806:	mov    edx,ecx
  403808:	or     dl,0x20
  40380b:	add    dl,0x9f
  40380e:	cmp    dl,0x1a
  403811:	jae    404251 <test@@Base+0x1061>
  403817:	nop    WORD PTR [rax+rax*1+0x0]
  403820:	cmp    r13,rsi
  403823:	je     403c8d <test@@Base+0xa9d>
  403829:	add    rax,0x1
  40382d:	movzx  edx,BYTE PTR [rsi]
  403830:	add    rsi,0x1
  403834:	cmp    dl,0x21
  403837:	jge    4037f0 <test@@Base+0x600>
  403839:	jmp    403c90 <test@@Base+0xaa0>
  40383e:	movabs rcx,0x6c65667400000000
  403848:	cmp    rax,rcx
  40384b:	jne    404494 <test@@Base+0x12a4>
  403851:	lea    rax,[rsi+0x4]
  403855:	cmp    DWORD PTR [rsp+0x34],0x0
  40385a:	je     4039c7 <test@@Base+0x7d7>
  403860:	mov    rbx,r13
  403863:	cmp    rax,r13
  403866:	je     404048 <test@@Base+0xe58>
  40386c:	mov    dl,BYTE PTR [rax]
  40386e:	cmp    dl,0x21
  403871:	jl     404045 <test@@Base+0xe55>
  403877:	add    rsi,0x5
  40387b:	nop    DWORD PTR [rax+rax*1+0x0]
  403880:	mov    ecx,edx
  403882:	cmp    dl,0x2e
  403885:	je     4038b0 <test@@Base+0x6c0>
  403887:	cmp    cl,0x5f
  40388a:	je     4038b0 <test@@Base+0x6c0>
  40388c:	mov    edx,ecx
  40388e:	add    dl,0xd0
  403891:	cmp    dl,0x9
  403894:	jbe    4038b0 <test@@Base+0x6c0>
  403896:	mov    edx,ecx
  403898:	or     dl,0x20
  40389b:	add    dl,0x9f
  40389e:	cmp    dl,0x1a
  4038a1:	jae    404266 <test@@Base+0x1076>
  4038a7:	nop    WORD PTR [rax+rax*1+0x0]
  4038b0:	cmp    r13,rsi
  4038b3:	je     403ca9 <test@@Base+0xab9>
  4038b9:	add    rax,0x1
  4038bd:	movzx  edx,BYTE PTR [rsi]
  4038c0:	add    rsi,0x1
  4038c4:	cmp    dl,0x21
  4038c7:	jge    403880 <test@@Base+0x690>
  4038c9:	jmp    403cac <test@@Base+0xabc>
  4038ce:	add    rsi,0x1
  4038d2:	jmp    403a64 <test@@Base+0x874>
  4038d7:	mov    rax,r13
  4038da:	cmp    rsi,r13
  4038dd:	lea    r14,[rsp+0x20]
  4038e2:	je     403c60 <test@@Base+0xa70>
  4038e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4038f0:	movzx  eax,BYTE PTR [rsi]
  4038f3:	cmp    al,0x5c
  4038f5:	je     403900 <test@@Base+0x710>
  4038f7:	cmp    al,0x22
  4038f9:	jne    403914 <test@@Base+0x724>
  4038fb:	jmp    403a17 <test@@Base+0x827>
  403900:	mov    rax,r13
  403903:	sub    rax,rsi
  403906:	cmp    rax,0x2
  40390a:	jl     403c5d <test@@Base+0xa6d>
  403910:	add    rsi,0x1
  403914:	add    rsi,0x1
  403918:	cmp    rsi,r13
  40391b:	jne    4038f0 <test@@Base+0x700>
  40391d:	mov    rax,r13
  403920:	jmp    403c60 <test@@Base+0xa70>
  403925:	mov    rsi,r13
  403928:	cmp    cl,0x2e
  40392b:	jne    403a64 <test@@Base+0x874>
  403931:	mov    ecx,0x5
  403936:	mov    rdi,r14
  403939:	jmp    403952 <test@@Base+0x762>
  40393b:	add    rsi,0x1
  40393f:	jmp    403cd5 <test@@Base+0xae5>
  403944:	mov    rax,rsi
  403947:	mov    ecx,0x14
  40394c:	mov    rdi,r14
  40394f:	mov    rsi,rax
  403952:	mov    rdx,r13
  403955:	call   409b80 <flatcc_json_parser_set_error@@Base>
  40395a:	mov    rbx,rax
  40395d:	jmp    403a67 <test@@Base+0x877>
  403962:	mov    rsi,r13
  403965:	cmp    cl,0x2e
  403968:	jne    403cd5 <test@@Base+0xae5>
  40396e:	mov    ecx,0x5
  403973:	jmp    403a2b <test@@Base+0x83b>
  403978:	mov    rsi,r13
  40397b:	cmp    rax,r13
  40397e:	je     403ef0 <test@@Base+0xd00>
  403984:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40398e:	xchg   ax,ax
  403990:	movzx  ecx,BYTE PTR [rax]
  403993:	cmp    cl,0x5c
  403996:	je     4039a2 <test@@Base+0x7b2>
  403998:	cmp    cl,0x22
  40399b:	jne    4039b6 <test@@Base+0x7c6>
  40399d:	jmp    403c7b <test@@Base+0xa8b>
  4039a2:	mov    rcx,r13
  4039a5:	sub    rcx,rax
  4039a8:	cmp    rcx,0x2
  4039ac:	jl     403eed <test@@Base+0xcfd>
  4039b2:	add    rax,0x1
  4039b6:	add    rax,0x1
  4039ba:	cmp    rax,r13
  4039bd:	jne    403990 <test@@Base+0x7a0>
  4039bf:	mov    rsi,r13
  4039c2:	jmp    403ef0 <test@@Base+0xd00>
  4039c7:	mov    rsi,r13
  4039ca:	cmp    rax,r13
  4039cd:	je     404035 <test@@Base+0xe45>
  4039d3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4039dd:	nop    DWORD PTR [rax]
  4039e0:	movzx  ecx,BYTE PTR [rax]
  4039e3:	cmp    cl,0x5c
  4039e6:	je     4039f2 <test@@Base+0x802>
  4039e8:	cmp    cl,0x22
  4039eb:	jne    403a06 <test@@Base+0x816>
  4039ed:	jmp    403c84 <test@@Base+0xa94>
  4039f2:	mov    rcx,r13
  4039f5:	sub    rcx,rax
  4039f8:	cmp    rcx,0x2
  4039fc:	jl     404032 <test@@Base+0xe42>
  403a02:	add    rax,0x1
  403a06:	add    rax,0x1
  403a0a:	cmp    rax,r13
  403a0d:	jne    4039e0 <test@@Base+0x7f0>
  403a0f:	mov    rsi,r13
  403a12:	jmp    404035 <test@@Base+0xe45>
  403a17:	add    rsi,0x1
  403a1b:	jmp    404175 <test@@Base+0xf85>
  403a20:	mov    rax,rsi
  403a23:	mov    ecx,0x14
  403a28:	mov    rsi,rax
  403a2b:	mov    rdx,r13
  403a2e:	call   409b80 <flatcc_json_parser_set_error@@Base>
  403a33:	mov    r14,rax
  403a36:	jmp    403cd8 <test@@Base+0xae8>
  403a3b:	mov    rsi,r13
  403a3e:	cmp    cl,0x2e
  403a41:	jne    404175 <test@@Base+0xf85>
  403a47:	mov    ecx,0x5
  403a4c:	mov    rdi,r14
  403a4f:	jmp    403c6b <test@@Base+0xa7b>
  403a54:	add    rax,0xffffffffffffffff
  403a58:	mov    rsi,rax
  403a5b:	cmp    cl,0x2e
  403a5e:	je     403931 <test@@Base+0x741>
  403a64:	mov    rbx,rsi
  403a67:	mov    rax,r13
  403a6a:	sub    rax,rbx
  403a6d:	cmp    rax,0x2
  403a71:	jl     403ad0 <test@@Base+0x8e0>
  403a73:	cmp    BYTE PTR [rbx],0x20
  403a76:	jg     403ae1 <test@@Base+0x8f1>
  403a78:	jne    403ad0 <test@@Base+0x8e0>
  403a7a:	cmp    BYTE PTR [rbx+0x1],0x20
  403a7e:	jle    403ad0 <test@@Base+0x8e0>
  403a80:	add    rbx,0x1
  403a84:	cmp    rbx,r13
  403a87:	je     40427b <test@@Base+0x108b>
  403a8d:	nop    DWORD PTR [rax]
  403a90:	jae    4042c7 <test@@Base+0x10d7>
  403a96:	cmp    BYTE PTR [rbx],0x3a
  403a99:	jne    4042c7 <test@@Base+0x10d7>
  403a9f:	lea    r15,[rbx+0x1]
  403aa3:	mov    rax,r13
  403aa6:	sub    rax,r15
  403aa9:	cmp    rax,0x2
  403aad:	jl     403af0 <test@@Base+0x900>
  403aaf:	cmp    BYTE PTR [r15],0x20
  403ab3:	jg     403b01 <test@@Base+0x911>
  403ab5:	jne    403af0 <test@@Base+0x900>
  403ab7:	cmp    BYTE PTR [rbx+0x2],0x20
  403abb:	jle    403af0 <test@@Base+0x900>
  403abd:	add    rbx,0x2
  403ac1:	mov    r15,rbx
  403ac4:	cmp    r15,r13
  403ac7:	jne    403b0a <test@@Base+0x91a>
  403ac9:	jmp    40427b <test@@Base+0x108b>
  403ace:	xchg   ax,ax
  403ad0:	mov    rdi,r14
  403ad3:	mov    rsi,rbx
  403ad6:	mov    rdx,r13
  403ad9:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  403ade:	mov    rbx,rax
  403ae1:	cmp    rbx,r13
  403ae4:	jne    403a90 <test@@Base+0x8a0>
  403ae6:	jmp    40427b <test@@Base+0x108b>
  403aeb:	nop    DWORD PTR [rax+rax*1+0x0]
  403af0:	mov    rdi,r14
  403af3:	mov    rsi,r15
  403af6:	mov    rdx,r13
  403af9:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  403afe:	mov    r15,rax
  403b01:	cmp    r15,r13
  403b04:	je     40427b <test@@Base+0x108b>
  403b0a:	xor    esi,esi
  403b0c:	mov    edx,0x1
  403b11:	mov    ecx,0x1
  403b16:	mov    rdi,QWORD PTR [rsp+0x10]
  403b1b:	call   407ac0 <flatcc_builder_table_add@@Base>
  403b20:	test   rax,rax
  403b23:	je     4042fc <test@@Base+0x110c>
  403b29:	mov    rbx,rax
  403b2c:	mov    QWORD PTR [rsp+0x18],0x0
  403b35:	mov    DWORD PTR [rsp+0xc],0x0
  403b3d:	mov    BYTE PTR [rax],0x0
  403b40:	mov    rdi,r14
  403b43:	mov    rsi,r15
  403b46:	mov    rdx,r13
  403b49:	lea    rcx,[rsp+0xc]
  403b4e:	lea    r8,[rsp+0x18]
  403b53:	call   40b820 <flatcc_json_parser_integer@@Base>
  403b58:	mov    r14,r15
  403b5b:	cmp    rax,r15
  403b5e:	je     403b98 <test@@Base+0x9a8>
  403b60:	cmp    DWORD PTR [rsp+0xc],0x0
  403b65:	je     403b6e <test@@Base+0x97e>
  403b67:	mov    ecx,0x8
  403b6c:	jmp    403b85 <test@@Base+0x995>
  403b6e:	mov    rcx,QWORD PTR [rsp+0x18]
  403b73:	cmp    rcx,0x100
  403b7a:	jb     403c56 <test@@Base+0xa66>
  403b80:	mov    ecx,0x7
  403b85:	lea    rdi,[rsp+0x20]
  403b8a:	mov    rsi,rax
  403b8d:	mov    rdx,r13
  403b90:	call   409b80 <flatcc_json_parser_set_error@@Base>
  403b95:	mov    r14,rax
  403b98:	cmp    r15,r14
  403b9b:	je     4042fc <test@@Base+0x110c>
  403ba1:	mov    rax,r13
  403ba4:	sub    rax,r14
  403ba7:	cmp    rax,0x2
  403bab:	jl     403bd0 <test@@Base+0x9e0>
  403bad:	cmp    BYTE PTR [r14],0x20
  403bb1:	jg     403be3 <test@@Base+0x9f3>
  403bb3:	jne    403bd0 <test@@Base+0x9e0>
  403bb5:	cmp    BYTE PTR [r14+0x1],0x20
  403bba:	jle    403bd0 <test@@Base+0x9e0>
  403bbc:	add    r14,0x1
  403bc0:	cmp    r14,r13
  403bc3:	jne    403bec <test@@Base+0x9fc>
  403bc5:	jmp    40427b <test@@Base+0x108b>
  403bca:	nop    WORD PTR [rax+rax*1+0x0]
  403bd0:	lea    rdi,[rsp+0x20]
  403bd5:	mov    rsi,r14
  403bd8:	mov    rdx,r13
  403bdb:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  403be0:	mov    r14,rax
  403be3:	cmp    r14,r13
  403be6:	je     40427b <test@@Base+0x108b>
  403bec:	mov    al,BYTE PTR [r14]
  403bef:	cmp    al,0x2c
  403bf1:	jne    40438b <test@@Base+0x119b>
  403bf7:	lea    r12,[r14+0x1]
  403bfb:	mov    rax,r13
  403bfe:	sub    rax,r12
  403c01:	cmp    rax,0x2
  403c05:	jl     403c20 <test@@Base+0xa30>
  403c07:	cmp    BYTE PTR [r12],0x20
  403c0c:	jg     403c33 <test@@Base+0xa43>
  403c0e:	jne    403c20 <test@@Base+0xa30>
  403c10:	cmp    BYTE PTR [r14+0x2],0x20
  403c15:	jle    403c20 <test@@Base+0xa30>
  403c17:	add    r14,0x2
  403c1b:	mov    r12,r14
  403c1e:	jmp    403c33 <test@@Base+0xa43>
  403c20:	lea    rdi,[rsp+0x20]
  403c25:	mov    rsi,r12
  403c28:	mov    rdx,r13
  403c2b:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  403c30:	mov    r12,rax
  403c33:	movabs r14,0x7365636f6e640000
  403c3d:	cmp    r12,r13
  403c40:	je     40427b <test@@Base+0x108b>
  403c46:	cmp    BYTE PTR [r12],0x7d
  403c4b:	jne    403306 <test@@Base+0x116>
  403c51:	jmp    4043e0 <test@@Base+0x11f0>
  403c56:	mov    BYTE PTR [rbx],cl
  403c58:	jmp    403b95 <test@@Base+0x9a5>
  403c5d:	mov    rax,rsi
  403c60:	mov    ecx,0x14
  403c65:	mov    rdi,r14
  403c68:	mov    rsi,rax
  403c6b:	mov    rdx,r13
  403c6e:	call   409b80 <flatcc_json_parser_set_error@@Base>
  403c73:	mov    rbx,rax
  403c76:	jmp    404178 <test@@Base+0xf88>
  403c7b:	add    rax,0x1
  403c7f:	jmp    403f00 <test@@Base+0xd10>
  403c84:	add    rax,0x1
  403c88:	jmp    404045 <test@@Base+0xe55>
  403c8d:	mov    rax,r13
  403c90:	cmp    cl,0x2e
  403c93:	jne    403f00 <test@@Base+0xd10>
  403c99:	mov    ecx,0x5
  403c9e:	mov    rdi,r14
  403ca1:	mov    rsi,rax
  403ca4:	jmp    403ef8 <test@@Base+0xd08>
  403ca9:	mov    rax,r13
  403cac:	cmp    cl,0x2e
  403caf:	jne    404045 <test@@Base+0xe55>
  403cb5:	mov    ecx,0x5
  403cba:	mov    rdi,r14
  403cbd:	mov    rsi,rax
  403cc0:	jmp    40403d <test@@Base+0xe4d>
  403cc5:	add    rax,0xffffffffffffffff
  403cc9:	mov    rsi,rax
  403ccc:	cmp    cl,0x2e
  403ccf:	je     40396e <test@@Base+0x77e>
  403cd5:	mov    r14,rsi
  403cd8:	mov    rax,r13
  403cdb:	sub    rax,r14
  403cde:	cmp    rax,0x2
  403ce2:	jl     403d01 <test@@Base+0xb11>
  403ce4:	cmp    BYTE PTR [r14],0x20
  403ce8:	jg     403d14 <test@@Base+0xb24>
  403cea:	jne    403d01 <test@@Base+0xb11>
  403cec:	cmp    BYTE PTR [r14+0x1],0x20
  403cf1:	jle    403d01 <test@@Base+0xb11>
  403cf3:	add    r14,0x1
  403cf7:	cmp    r14,r13
  403cfa:	jne    403d1d <test@@Base+0xb2d>
  403cfc:	jmp    40427b <test@@Base+0x108b>
  403d01:	lea    rdi,[rsp+0x20]
  403d06:	mov    rsi,r14
  403d09:	mov    rdx,r13
  403d0c:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  403d11:	mov    r14,rax
  403d14:	cmp    r14,r13
  403d17:	je     40427b <test@@Base+0x108b>
  403d1d:	jae    404416 <test@@Base+0x1226>
  403d23:	cmp    BYTE PTR [r14],0x3a
  403d27:	jne    404416 <test@@Base+0x1226>
  403d2d:	lea    r12,[r14+0x1]
  403d31:	mov    rax,r13
  403d34:	sub    rax,r12
  403d37:	cmp    rax,0x2
  403d3b:	jl     403d6f <test@@Base+0xb7f>
  403d3d:	cmp    BYTE PTR [r12],0x20
  403d42:	jg     403d54 <test@@Base+0xb64>
  403d44:	jne    403d6f <test@@Base+0xb7f>
  403d46:	cmp    BYTE PTR [r14+0x2],0x20
  403d4b:	jle    403d6f <test@@Base+0xb7f>
  403d4d:	add    r14,0x2
  403d51:	mov    r12,r14
  403d54:	lea    rbx,[rsp+0x20]
  403d59:	cmp    r12,r13
  403d5c:	je     40427b <test@@Base+0x108b>
  403d62:	cmp    BYTE PTR [r12],0x22
  403d67:	jne    403d8f <test@@Base+0xb9f>
  403d69:	add    r12,0x1
  403d6d:	jmp    403da5 <test@@Base+0xbb5>
  403d6f:	lea    rbx,[rsp+0x20]
  403d74:	mov    rdi,rbx
  403d77:	mov    rsi,r12
  403d7a:	mov    rdx,r13
  403d7d:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  403d82:	mov    r12,rax
  403d85:	cmp    r12,r13
  403d88:	jne    403d62 <test@@Base+0xb72>
  403d8a:	jmp    40427b <test@@Base+0x108b>
  403d8f:	mov    ecx,0x10
  403d94:	mov    rdi,rbx
  403d97:	mov    rsi,r12
  403d9a:	mov    rdx,r13
  403d9d:	call   409b80 <flatcc_json_parser_set_error@@Base>
  403da2:	mov    r12,rax
  403da5:	mov    rdi,rbx
  403da8:	mov    rsi,r12
  403dab:	mov    rdx,r13
  403dae:	call   409bb0 <flatcc_json_parser_string_part@@Base>
  403db3:	cmp    rax,r13
  403db6:	je     40448c <test@@Base+0x129c>
  403dbc:	mov    r14,rax
  403dbf:	cmp    BYTE PTR [rax],0x22
  403dc2:	jne    403de6 <test@@Base+0xbf6>
  403dc4:	mov    rdx,r14
  403dc7:	sub    rdx,r12
  403dca:	mov    rdi,QWORD PTR [rsp+0x10]
  403dcf:	mov    rsi,r12
  403dd2:	call   408870 <flatcc_builder_create_string@@Base>
  403dd7:	mov    ebx,eax
  403dd9:	test   ebx,ebx
  403ddb:	jne    403ea2 <test@@Base+0xcb2>
  403de1:	jmp    404484 <test@@Base+0x1294>
  403de6:	mov    r15,QWORD PTR [rsp+0x10]
  403deb:	mov    rdi,r15
  403dee:	call   4065d0 <flatcc_builder_start_string@@Base>
  403df3:	mov    rbx,r14
  403df6:	sub    rbx,r12
  403df9:	mov    rdi,r15
  403dfc:	mov    rsi,rbx
  403dff:	call   405ef0 <flatcc_builder_extend_string@@Base>
  403e04:	test   rax,rax
  403e07:	je     404484 <test@@Base+0x1294>
  403e0d:	mov    QWORD PTR [rsp+0x78],r13
  403e12:	mov    rdi,rax
  403e15:	mov    rsi,r12
  403e18:	mov    rdx,rbx
  403e1b:	call   4030b0 <memcpy@plt>
  403e20:	mov    r13,QWORD PTR [rsp+0x10]
  403e25:	lea    r15,[rsp+0x20]
  403e2a:	mov    rdi,r15
  403e2d:	mov    rsi,r14
  403e30:	mov    r12,QWORD PTR [rsp+0x78]
  403e35:	mov    rdx,r12
  403e38:	lea    rcx,[rsp+0x74]
  403e3d:	call   409d00 <flatcc_json_parser_string_escape@@Base>
  403e42:	mov    rbx,rax
  403e45:	movsx  rdx,BYTE PTR [rsp+0x74]
  403e4b:	mov    rdi,r13
  403e4e:	lea    rsi,[rsp+0x75]
  403e53:	call   405fd0 <flatcc_builder_append_string@@Base>
  403e58:	mov    rdi,r15
  403e5b:	mov    rsi,rbx
  403e5e:	mov    rdx,r12
  403e61:	call   409bb0 <flatcc_json_parser_string_part@@Base>
  403e66:	cmp    rax,r12
  403e69:	je     404381 <test@@Base+0x1191>
  403e6f:	mov    r14,rax
  403e72:	mov    rdx,rax
  403e75:	sub    rdx,rbx
  403e78:	mov    rdi,r13
  403e7b:	mov    rsi,rbx
  403e7e:	call   405fd0 <flatcc_builder_append_string@@Base>
  403e83:	cmp    BYTE PTR [r14],0x22
  403e87:	jne    403e20 <test@@Base+0xc30>
  403e89:	mov    rdi,QWORD PTR [rsp+0x10]
  403e8e:	call   408a20 <flatcc_builder_end_string@@Base>
  403e93:	mov    ebx,eax
  403e95:	mov    r13,QWORD PTR [rsp+0x78]
  403e9a:	test   ebx,ebx
  403e9c:	je     404484 <test@@Base+0x1294>
  403ea2:	mov    esi,0xa
  403ea7:	mov    rdi,QWORD PTR [rsp+0x10]
  403eac:	call   407960 <flatcc_builder_table_add_offset@@Base>
  403eb1:	test   rax,rax
  403eb4:	je     404484 <test@@Base+0x1294>
  403eba:	mov    DWORD PTR [rax],ebx
  403ebc:	cmp    r14,r13
  403ebf:	je     403ed0 <test@@Base+0xce0>
  403ec1:	cmp    BYTE PTR [r14],0x22
  403ec5:	jne    403ed0 <test@@Base+0xce0>
  403ec7:	add    r14,0x1
  403ecb:	jmp    403ba1 <test@@Base+0x9b1>
  403ed0:	mov    ecx,0x14
  403ed5:	lea    rdi,[rsp+0x20]
  403eda:	mov    rsi,r14
  403edd:	mov    rdx,r13
  403ee0:	call   409b80 <flatcc_json_parser_set_error@@Base>
  403ee5:	mov    r14,rax
  403ee8:	jmp    403ba1 <test@@Base+0x9b1>
  403eed:	mov    rsi,rax
  403ef0:	mov    ecx,0x14
  403ef5:	mov    rdi,r14
  403ef8:	mov    rdx,r13
  403efb:	call   409b80 <flatcc_json_parser_set_error@@Base>
  403f00:	mov    rbx,rax
  403f03:	mov    rax,r13
  403f06:	sub    rax,rbx
  403f09:	cmp    rax,0x2
  403f0d:	jl     403f2a <test@@Base+0xd3a>
  403f0f:	cmp    BYTE PTR [rbx],0x20
  403f12:	jg     403f3b <test@@Base+0xd4b>
  403f14:	jne    403f2a <test@@Base+0xd3a>
  403f16:	cmp    BYTE PTR [rbx+0x1],0x20
  403f1a:	jle    403f2a <test@@Base+0xd3a>
  403f1c:	add    rbx,0x1
  403f20:	cmp    rbx,r13
  403f23:	jne    403f44 <test@@Base+0xd54>
  403f25:	jmp    40427b <test@@Base+0x108b>
  403f2a:	mov    rdi,r14
  403f2d:	mov    rsi,rbx
  403f30:	mov    rdx,r13
  403f33:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  403f38:	mov    rbx,rax
  403f3b:	cmp    rbx,r13
  403f3e:	je     40427b <test@@Base+0x108b>
  403f44:	jae    4042c7 <test@@Base+0x10d7>
  403f4a:	cmp    BYTE PTR [rbx],0x3a
  403f4d:	jne    4042c7 <test@@Base+0x10d7>
  403f53:	lea    r15,[rbx+0x1]
  403f57:	mov    rax,r13
  403f5a:	sub    rax,r15
  403f5d:	cmp    rax,0x2
  403f61:	jl     403f82 <test@@Base+0xd92>
  403f63:	cmp    BYTE PTR [r15],0x20
  403f67:	jg     403f93 <test@@Base+0xda3>
  403f69:	jne    403f82 <test@@Base+0xd92>
  403f6b:	cmp    BYTE PTR [rbx+0x2],0x20
  403f6f:	jle    403f82 <test@@Base+0xd92>
  403f71:	add    rbx,0x2
  403f75:	mov    r15,rbx
  403f78:	cmp    r15,r13
  403f7b:	jne    403f9c <test@@Base+0xdac>
  403f7d:	jmp    40427b <test@@Base+0x108b>
  403f82:	mov    rdi,r14
  403f85:	mov    rsi,r15
  403f88:	mov    rdx,r13
  403f8b:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  403f90:	mov    r15,rax
  403f93:	cmp    r15,r13
  403f96:	je     40427b <test@@Base+0x108b>
  403f9c:	mov    esi,0x3
  403fa1:	mov    edx,0x8
  403fa6:	mov    ecx,0x8
  403fab:	mov    rdi,QWORD PTR [rsp+0x10]
  403fb0:	call   407ac0 <flatcc_builder_table_add@@Base>
  403fb5:	test   rax,rax
  403fb8:	je     4042fc <test@@Base+0x110c>
  403fbe:	mov    rbx,rax
  403fc1:	mov    QWORD PTR [rsp+0x18],0x0
  403fca:	mov    DWORD PTR [rsp+0xc],0x0
  403fd2:	mov    QWORD PTR [rax],0x0
  403fd9:	mov    rdi,r14
  403fdc:	mov    rsi,r15
  403fdf:	mov    rdx,r13
  403fe2:	lea    rcx,[rsp+0xc]
  403fe7:	lea    r8,[rsp+0x18]
  403fec:	call   40b820 <flatcc_json_parser_integer@@Base>
  403ff1:	mov    r14,r15
  403ff4:	cmp    rax,r15
  403ff7:	je     403b98 <test@@Base+0x9a8>
  403ffd:	mov    rcx,QWORD PTR [rsp+0x18]
  404002:	cmp    DWORD PTR [rsp+0xc],0x0
  404007:	je     404021 <test@@Base+0xe31>
  404009:	movabs rdx,0x8000000000000001
  404013:	cmp    rcx,rdx
  404016:	jae    403b67 <test@@Base+0x977>
  40401c:	neg    rcx
  40401f:	jmp    40402a <test@@Base+0xe3a>
  404021:	test   rcx,rcx
  404024:	js     403b80 <test@@Base+0x990>
  40402a:	mov    QWORD PTR [rbx],rcx
  40402d:	jmp    403b95 <test@@Base+0x9a5>
  404032:	mov    rsi,rax
  404035:	mov    ecx,0x14
  40403a:	mov    rdi,r14
  40403d:	mov    rdx,r13
  404040:	call   409b80 <flatcc_json_parser_set_error@@Base>
  404045:	mov    rbx,rax
  404048:	mov    rax,r13
  40404b:	sub    rax,rbx
  40404e:	cmp    rax,0x2
  404052:	jl     40406f <test@@Base+0xe7f>
  404054:	cmp    BYTE PTR [rbx],0x20
  404057:	jg     404080 <test@@Base+0xe90>
  404059:	jne    40406f <test@@Base+0xe7f>
  40405b:	cmp    BYTE PTR [rbx+0x1],0x20
  40405f:	jle    40406f <test@@Base+0xe7f>
  404061:	add    rbx,0x1
  404065:	cmp    rbx,r13
  404068:	jne    404089 <test@@Base+0xe99>
  40406a:	jmp    40427b <test@@Base+0x108b>
  40406f:	mov    rdi,r14
  404072:	mov    rsi,rbx
  404075:	mov    rdx,r13
  404078:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40407d:	mov    rbx,rax
  404080:	cmp    rbx,r13
  404083:	je     40427b <test@@Base+0x108b>
  404089:	jae    4042c7 <test@@Base+0x10d7>
  40408f:	cmp    BYTE PTR [rbx],0x3a
  404092:	jne    4042c7 <test@@Base+0x10d7>
  404098:	lea    r15,[rbx+0x1]
  40409c:	mov    rax,r13
  40409f:	sub    rax,r15
  4040a2:	cmp    rax,0x2
  4040a6:	jl     4040c7 <test@@Base+0xed7>
  4040a8:	cmp    BYTE PTR [r15],0x20
  4040ac:	jg     4040d8 <test@@Base+0xee8>
  4040ae:	jne    4040c7 <test@@Base+0xed7>
  4040b0:	cmp    BYTE PTR [rbx+0x2],0x20
  4040b4:	jle    4040c7 <test@@Base+0xed7>
  4040b6:	add    rbx,0x2
  4040ba:	mov    r15,rbx
  4040bd:	cmp    r15,r13
  4040c0:	jne    4040e1 <test@@Base+0xef1>
  4040c2:	jmp    40427b <test@@Base+0x108b>
  4040c7:	mov    rdi,r14
  4040ca:	mov    rsi,r15
  4040cd:	mov    rdx,r13
  4040d0:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  4040d5:	mov    r15,rax
  4040d8:	cmp    r15,r13
  4040db:	je     40427b <test@@Base+0x108b>
  4040e1:	mov    esi,0x2
  4040e6:	mov    edx,0x4
  4040eb:	mov    ecx,0x4
  4040f0:	mov    rdi,QWORD PTR [rsp+0x10]
  4040f5:	call   407ac0 <flatcc_builder_table_add@@Base>
  4040fa:	test   rax,rax
  4040fd:	je     4042fc <test@@Base+0x110c>
  404103:	mov    rbx,rax
  404106:	mov    QWORD PTR [rsp+0x18],0x0
  40410f:	mov    DWORD PTR [rsp+0xc],0x0
  404117:	mov    DWORD PTR [rax],0x0
  40411d:	mov    rdi,r14
  404120:	mov    rsi,r15
  404123:	mov    rdx,r13
  404126:	lea    rcx,[rsp+0xc]
  40412b:	lea    r8,[rsp+0x18]
  404130:	call   40b820 <flatcc_json_parser_integer@@Base>
  404135:	mov    r14,r15
  404138:	cmp    rax,r15
  40413b:	je     403b98 <test@@Base+0x9a8>
  404141:	cmp    DWORD PTR [rsp+0xc],0x0
  404146:	jne    403b67 <test@@Base+0x977>
  40414c:	mov    rcx,QWORD PTR [rsp+0x18]
  404151:	mov    rdx,rcx
  404154:	shr    rdx,0x20
  404158:	jne    403b80 <test@@Base+0x990>
  40415e:	mov    DWORD PTR [rbx],ecx
  404160:	jmp    403b95 <test@@Base+0x9a5>
  404165:	add    rax,0xffffffffffffffff
  404169:	mov    rsi,rax
  40416c:	cmp    cl,0x2e
  40416f:	je     403a47 <test@@Base+0x857>
  404175:	mov    rbx,rsi
  404178:	mov    rax,r13
  40417b:	sub    rax,rbx
  40417e:	cmp    rax,0x2
  404182:	jl     40419f <test@@Base+0xfaf>
  404184:	cmp    BYTE PTR [rbx],0x20
  404187:	jg     4041b0 <test@@Base+0xfc0>
  404189:	jne    40419f <test@@Base+0xfaf>
  40418b:	cmp    BYTE PTR [rbx+0x1],0x20
  40418f:	jle    40419f <test@@Base+0xfaf>
  404191:	add    rbx,0x1
  404195:	cmp    rbx,r13
  404198:	jne    4041b9 <test@@Base+0xfc9>
  40419a:	jmp    40427b <test@@Base+0x108b>
  40419f:	mov    rdi,r14
  4041a2:	mov    rsi,rbx
  4041a5:	mov    rdx,r13
  4041a8:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  4041ad:	mov    rbx,rax
  4041b0:	cmp    rbx,r13
  4041b3:	je     40427b <test@@Base+0x108b>
  4041b9:	jae    4042c7 <test@@Base+0x10d7>
  4041bf:	cmp    BYTE PTR [rbx],0x3a
  4041c2:	jne    4042c7 <test@@Base+0x10d7>
  4041c8:	lea    r15,[rbx+0x1]
  4041cc:	mov    rax,r13
  4041cf:	sub    rax,r15
  4041d2:	cmp    rax,0x2
  4041d6:	jl     4041f7 <test@@Base+0x1007>
  4041d8:	cmp    BYTE PTR [r15],0x20
  4041dc:	jg     404208 <test@@Base+0x1018>
  4041de:	jne    4041f7 <test@@Base+0x1007>
  4041e0:	cmp    BYTE PTR [rbx+0x2],0x20
  4041e4:	jle    4041f7 <test@@Base+0x1007>
  4041e6:	add    rbx,0x2
  4041ea:	mov    r15,rbx
  4041ed:	cmp    r15,r13
  4041f0:	jne    40420d <test@@Base+0x101d>
  4041f2:	jmp    40427b <test@@Base+0x108b>
  4041f7:	mov    rdi,r14
  4041fa:	mov    rsi,r15
  4041fd:	mov    rdx,r13
  404200:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  404205:	mov    r15,rax
  404208:	cmp    r15,r13
  40420b:	je     40427b <test@@Base+0x108b>
  40420d:	mov    esi,0x1
  404212:	mov    edx,0x8
  404217:	mov    ecx,0x8
  40421c:	mov    rdi,QWORD PTR [rsp+0x10]
  404221:	call   407ac0 <flatcc_builder_table_add@@Base>
  404226:	test   rax,rax
  404229:	je     4042fc <test@@Base+0x110c>
  40422f:	mov    rdi,r14
  404232:	mov    rsi,r15
  404235:	mov    rdx,r13
  404238:	mov    rcx,rax
  40423b:	call   40af20 <flatcc_json_parser_double@@Base>
  404240:	mov    r14,rax
  404243:	cmp    r15,rax
  404246:	jne    403ba1 <test@@Base+0x9b1>
  40424c:	jmp    4042fc <test@@Base+0x110c>
  404251:	add    rsi,0xffffffffffffffff
  404255:	mov    rax,rsi
  404258:	cmp    cl,0x2e
  40425b:	je     403c99 <test@@Base+0xaa9>
  404261:	jmp    403f00 <test@@Base+0xd10>
  404266:	add    rsi,0xffffffffffffffff
  40426a:	mov    rax,rsi
  40426d:	cmp    cl,0x2e
  404270:	je     403cb5 <test@@Base+0xac5>
  404276:	jmp    404045 <test@@Base+0xe55>
  40427b:	mov    rax,QWORD PTR [rip+0xfd76]        # 413ff8 <stderr@GLIBC_2.2.5>
  404282:	mov    rcx,QWORD PTR [rax]
  404285:	lea    rdi,[rip+0xa04f]        # 40e2db <g_data@@Base+0x28b>
  40428c:	mov    esi,0xd
  404291:	mov    edx,0x1
  404296:	call   4030e0 <fwrite@plt>
  40429b:	mov    r15,r13
  40429e:	jmp    4042fc <test@@Base+0x110c>
  4042a0:	lea    rdi,[rsp+0x20]
  4042a5:	mov    ecx,0xd
  4042aa:	mov    rsi,rax
  4042ad:	jmp    4042f1 <test@@Base+0x1101>
  4042af:	mov    rax,QWORD PTR [rip+0xfd42]        # 413ff8 <stderr@GLIBC_2.2.5>
  4042b6:	mov    rdi,QWORD PTR [rax]
  4042b9:	lea    rsi,[rip+0xa029]        # 40e2e9 <g_data@@Base+0x299>
  4042c0:	mov    edx,0x7b
  4042c5:	jmp    4042dd <test@@Base+0x10ed>
  4042c7:	mov    rax,QWORD PTR [rip+0xfd2a]        # 413ff8 <stderr@GLIBC_2.2.5>
  4042ce:	mov    rdi,QWORD PTR [rax]
  4042d1:	lea    rsi,[rip+0xa011]        # 40e2e9 <g_data@@Base+0x299>
  4042d8:	mov    edx,0x3a
  4042dd:	xor    eax,eax
  4042df:	call   4030a0 <fprintf@plt>
  4042e4:	lea    rdi,[rsp+0x20]
  4042e9:	mov    ecx,0x11
  4042ee:	mov    rsi,rbx
  4042f1:	mov    rdx,r13
  4042f4:	call   409b80 <flatcc_json_parser_set_error@@Base>
  4042f9:	mov    r15,rax
  4042fc:	mov    edi,DWORD PTR [rsp+0x40]
  404300:	mov    rax,QWORD PTR [rip+0xfcf1]        # 413ff8 <stderr@GLIBC_2.2.5>
  404307:	mov    r13,QWORD PTR [rax]
  40430a:	test   edi,edi
  40430c:	jne    404329 <test@@Base+0x1139>
  40430e:	lea    rdi,[rip+0xa010]        # 40e325 <g_data@@Base+0x2d5>
  404315:	mov    esi,0xf
  40431a:	mov    edx,0x1
  40431f:	mov    rcx,r13
  404322:	call   4030e0 <fwrite@plt>
  404327:	jmp    404361 <test@@Base+0x1171>
  404329:	mov    r14d,DWORD PTR [rsp+0x38]
  40432e:	mov    ebx,DWORD PTR [rsp+0x58]
  404332:	sub    ebx,DWORD PTR [rsp+0x28]
  404336:	add    ebx,0x1
  404339:	call   409b60 <flatcc_json_parser_error_string@@Base>
  40433e:	mov    r8,rax
  404341:	lea    rsi,[rip+0x9fd2]        # 40e31a <g_data@@Base+0x2ca>
  404348:	xor    eax,eax
  40434a:	mov    rdi,r13
  40434d:	mov    edx,r14d
  404350:	mov    ecx,ebx
  404352:	call   4030a0 <fprintf@plt>
  404357:	mov    rdi,QWORD PTR [rsp+0x10]
  40435c:	call   4048d0 <flatcc_builder_reset@@Base>
  404361:	mov    rcx,QWORD PTR [rsp+0x80]
  404369:	mov    eax,DWORD PTR [rsp+0x40]
  40436d:	mov    DWORD PTR [rcx],eax
  40436f:	mov    rax,r15
  404372:	lea    rsp,[rbp-0x28]
  404376:	pop    rbx
  404377:	pop    r12
  404379:	pop    r13
  40437b:	pop    r14
  40437d:	pop    r15
  40437f:	pop    rbp
  404380:	ret    
  404381:	mov    r15,QWORD PTR [rsp+0x78]
  404386:	jmp    4042fc <test@@Base+0x110c>
  40438b:	mov    r12,r14
  40438e:	cmp    r12,r13
  404391:	jae    4043e7 <test@@Base+0x11f7>
  404393:	cmp    al,0x7d
  404395:	jne    4043e7 <test@@Base+0x11f7>
  404397:	lea    r14,[r12+0x1]
  40439c:	mov    rbx,QWORD PTR [rsp+0x10]
  4043a1:	mov    rdi,rbx
  4043a4:	call   407150 <flatcc_builder_end_table@@Base>
  4043a9:	mov    rdi,rbx
  4043ac:	mov    esi,eax
  4043ae:	call   405690 <flatcc_builder_end_buffer@@Base>
  4043b3:	mov    rax,r13
  4043b6:	sub    rax,r14
  4043b9:	cmp    rax,0x2
  4043bd:	jl     404445 <test@@Base+0x1255>
  4043c3:	cmp    BYTE PTR [r14],0x20
  4043c7:	jg     404458 <test@@Base+0x1268>
  4043cd:	jne    404445 <test@@Base+0x1255>
  4043cf:	cmp    BYTE PTR [r12+0x2],0x20
  4043d5:	jle    404445 <test@@Base+0x1255>
  4043d7:	add    r12,0x2
  4043db:	mov    r14,r12
  4043de:	jmp    404458 <test@@Base+0x1268>
  4043e0:	mov    al,0x7d
  4043e2:	cmp    r12,r13
  4043e5:	jb     404393 <test@@Base+0x11a3>
  4043e7:	mov    rax,QWORD PTR [rip+0xfc0a]        # 413ff8 <stderr@GLIBC_2.2.5>
  4043ee:	mov    rdi,QWORD PTR [rax]
  4043f1:	lea    rsi,[rip+0x9ef1]        # 40e2e9 <g_data@@Base+0x299>
  4043f8:	mov    edx,0x7d
  4043fd:	xor    eax,eax
  4043ff:	call   4030a0 <fprintf@plt>
  404404:	lea    rdi,[rsp+0x20]
  404409:	mov    ecx,0x11
  40440e:	mov    rsi,r12
  404411:	jmp    4042f1 <test@@Base+0x1101>
  404416:	mov    rax,QWORD PTR [rip+0xfbdb]        # 413ff8 <stderr@GLIBC_2.2.5>
  40441d:	mov    rdi,QWORD PTR [rax]
  404420:	lea    rsi,[rip+0x9ec2]        # 40e2e9 <g_data@@Base+0x299>
  404427:	mov    edx,0x3a
  40442c:	xor    eax,eax
  40442e:	call   4030a0 <fprintf@plt>
  404433:	lea    rdi,[rsp+0x20]
  404438:	mov    ecx,0x11
  40443d:	mov    rsi,r14
  404440:	jmp    4042f1 <test@@Base+0x1101>
  404445:	lea    rdi,[rsp+0x20]
  40444a:	mov    rsi,r14
  40444d:	mov    rdx,r13
  404450:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  404455:	mov    r14,rax
  404458:	mov    r15,r13
  40445b:	cmp    r14,r13
  40445e:	je     4042fc <test@@Base+0x110c>
  404464:	mov    rax,QWORD PTR [rip+0xfb8d]        # 413ff8 <stderr@GLIBC_2.2.5>
  40446b:	mov    rcx,QWORD PTR [rax]
  40446e:	lea    rdi,[rip+0x9e8a]        # 40e2ff <g_data@@Base+0x2af>
  404475:	mov    esi,0x1a
  40447a:	mov    edx,0x1
  40447f:	call   4030e0 <fwrite@plt>
  404484:	mov    r15,r14
  404487:	jmp    4042fc <test@@Base+0x110c>
  40448c:	mov    r15,r13
  40448f:	jmp    4042fc <test@@Base+0x110c>
  404494:	lea    rdi,[rsp+0x20]
  404499:	mov    ecx,0xd
  40449e:	jmp    4042f1 <test@@Base+0x1101>
  4044a3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4044ad:	nop    DWORD PTR [rax]

00000000004044b0 <main@@Base>:
  4044b0:	push   rbx
  4044b1:	sub    rsp,0x190
  4044b8:	mov    DWORD PTR [rsp+0x4],0xffffffff
  4044c0:	lea    rbx,[rsp+0x8]
  4044c5:	mov    rdi,rbx
  4044c8:	call   4046d0 <flatcc_builder_init@@Base>
  4044cd:	lea    rsi,[rip+0x9b7c]        # 40e050 <g_data@@Base>
  4044d4:	lea    rcx,[rsp+0x4]
  4044d9:	lea    rdx,[rsi+0x285]
  4044e0:	mov    rdi,rbx
  4044e3:	call   4031f0 <test@@Base>
  4044e8:	mov    rdi,rbx
  4044eb:	call   404a90 <flatcc_builder_clear@@Base>
  4044f0:	mov    eax,DWORD PTR [rsp+0x4]
  4044f4:	add    rsp,0x190
  4044fb:	pop    rbx
  4044fc:	ret    
  4044fd:	nop    DWORD PTR [rax]

0000000000404500 <flatcc_builder_default_alloc@@Base>:
  404500:	push   rbp
  404501:	push   r15
  404503:	push   r14
  404505:	push   r12
  404507:	push   rbx
  404508:	mov    rbx,rsi
  40450b:	test   rdx,rdx
  40450e:	je     404539 <flatcc_builder_default_alloc@@Base+0x39>
  404510:	mov    r14d,ecx
  404513:	add    r8d,0xffffffff
  404517:	cmp    r8d,0x6
  40451b:	ja     404557 <flatcc_builder_default_alloc@@Base+0x57>
  40451d:	mov    eax,0x100
  404522:	lea    rcx,[rip+0x9e17]        # 40e340 <g_data@@Base+0x2f0>
  404529:	movsxd rsi,DWORD PTR [rcx+r8*4]
  40452d:	add    rsi,rcx
  404530:	jmp    rsi
  404532:	mov    eax,0x120
  404537:	jmp    404570 <flatcc_builder_default_alloc@@Base+0x70>
  404539:	mov    rdi,QWORD PTR [rbx]
  40453c:	xor    r15d,r15d
  40453f:	test   rdi,rdi
  404542:	je     4045d0 <flatcc_builder_default_alloc@@Base+0xd0>
  404548:	call   403030 <free@plt>
  40454d:	vxorps xmm0,xmm0,xmm0
  404551:	vmovups XMMWORD PTR [rbx],xmm0
  404555:	jmp    4045d0 <flatcc_builder_default_alloc@@Base+0xd0>
  404557:	mov    eax,0x20
  40455c:	jmp    404570 <flatcc_builder_default_alloc@@Base+0x70>
  40455e:	mov    rax,rdx
  404561:	jmp    404570 <flatcc_builder_default_alloc@@Base+0x70>
  404563:	mov    eax,0x40
  404568:	nop    DWORD PTR [rax+rax*1+0x0]
  404570:	mov    rbp,rax
  404573:	lea    rax,[rax+rax*1]
  404577:	cmp    rbp,rdx
  40457a:	jb     404570 <flatcc_builder_default_alloc@@Base+0x70>
  40457c:	mov    rax,QWORD PTR [rbx+0x8]
  404580:	xor    r15d,r15d
  404583:	cmp    rax,rdx
  404586:	jb     404590 <flatcc_builder_default_alloc@@Base+0x90>
  404588:	shr    rax,1
  40458b:	cmp    rax,rbp
  40458e:	jae    4045d0 <flatcc_builder_default_alloc@@Base+0xd0>
  404590:	mov    rdi,QWORD PTR [rbx]
  404593:	mov    rsi,rbp
  404596:	call   4030d0 <realloc@plt>
  40459b:	test   rax,rax
  40459e:	je     4045ca <flatcc_builder_default_alloc@@Base+0xca>
  4045a0:	mov    r12,rax
  4045a3:	test   r14d,r14d
  4045a6:	je     4045c1 <flatcc_builder_default_alloc@@Base+0xc1>
  4045a8:	mov    rax,QWORD PTR [rbx+0x8]
  4045ac:	mov    rdx,rbp
  4045af:	sub    rdx,rax
  4045b2:	jbe    4045c1 <flatcc_builder_default_alloc@@Base+0xc1>
  4045b4:	mov    rdi,r12
  4045b7:	add    rdi,rax
  4045ba:	xor    esi,esi
  4045bc:	call   403070 <memset@plt>
  4045c1:	mov    QWORD PTR [rbx],r12
  4045c4:	mov    QWORD PTR [rbx+0x8],rbp
  4045c8:	jmp    4045d0 <flatcc_builder_default_alloc@@Base+0xd0>
  4045ca:	mov    r15d,0xffffffff
  4045d0:	mov    eax,r15d
  4045d3:	pop    rbx
  4045d4:	pop    r12
  4045d6:	pop    r14
  4045d8:	pop    r15
  4045da:	pop    rbp
  4045db:	ret    
  4045dc:	nop    DWORD PTR [rax+0x0]

00000000004045e0 <flatcc_builder_flush_vtable_cache@@Base>:
  4045e0:	cmp    QWORD PTR [rdi+0xd8],0x0
  4045e8:	je     404615 <flatcc_builder_flush_vtable_cache@@Base+0x35>
  4045ea:	push   rbx
  4045eb:	mov    rbx,rdi
  4045ee:	mov    rdi,QWORD PTR [rdi+0xa8]
  4045f5:	mov    rdx,QWORD PTR [rbx+0xb0]
  4045fc:	xor    esi,esi
  4045fe:	call   403070 <memset@plt>
  404603:	movabs rax,0x1000000000
  40460d:	mov    QWORD PTR [rbx+0xe0],rax
  404614:	pop    rbx
  404615:	ret    
  404616:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000404620 <flatcc_builder_custom_init@@Base>:
  404620:	vxorps xmm0,xmm0,xmm0
  404624:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  40462c:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  404634:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  40463c:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  404644:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  40464c:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  404654:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  40465c:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  404664:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  404669:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  40466e:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  404673:	vmovups YMMWORD PTR [rdi],ymm0
  404677:	mov    QWORD PTR [rdi+0x180],0x0
  404682:	test   rsi,rsi
  404685:	je     4046a9 <flatcc_builder_custom_init@@Base+0x89>
  404687:	test   rcx,rcx
  40468a:	jne    404693 <flatcc_builder_custom_init@@Base+0x73>
  40468c:	lea    rcx,[rip+0xfffffffffffffe6d]        # 404500 <flatcc_builder_default_alloc@@Base>
  404693:	mov    QWORD PTR [rdi+0x40],r8
  404697:	mov    QWORD PTR [rdi+0x50],rcx
  40469b:	mov    QWORD PTR [rdi+0x38],rdx
  40469f:	mov    QWORD PTR [rdi+0x48],rsi
  4046a3:	xor    eax,eax
  4046a5:	vzeroupper 
  4046a8:	ret    
  4046a9:	mov    DWORD PTR [rdi+0x128],0x1
  4046b3:	lea    rdx,[rdi+0x130]
  4046ba:	lea    rsi,[rip+0x4acf]        # 409190 <flatcc_emitter@@Base>
  4046c1:	test   rcx,rcx
  4046c4:	je     40468c <flatcc_builder_custom_init@@Base+0x6c>
  4046c6:	jmp    404693 <flatcc_builder_custom_init@@Base+0x73>
  4046c8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004046d0 <flatcc_builder_init@@Base>:
  4046d0:	vxorps xmm0,xmm0,xmm0
  4046d4:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  4046dc:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  4046e1:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  4046e6:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  4046ee:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  4046f6:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  4046fe:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  404706:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  40470e:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  404716:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  40471e:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  404723:	vmovups YMMWORD PTR [rdi],ymm0
  404727:	mov    QWORD PTR [rdi+0x180],0x0
  404732:	mov    DWORD PTR [rdi+0x128],0x1
  40473c:	lea    rax,[rdi+0x130]
  404743:	mov    QWORD PTR [rdi+0x40],0x0
  40474b:	lea    rcx,[rip+0xfffffffffffffdae]        # 404500 <flatcc_builder_default_alloc@@Base>
  404752:	mov    QWORD PTR [rdi+0x50],rcx
  404756:	mov    QWORD PTR [rdi+0x38],rax
  40475a:	lea    rax,[rip+0x4a2f]        # 409190 <flatcc_emitter@@Base>
  404761:	mov    QWORD PTR [rdi+0x48],rax
  404765:	xor    eax,eax
  404767:	vzeroupper 
  40476a:	ret    
  40476b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404770 <flatcc_builder_custom_reset@@Base>:
  404770:	push   rbp
  404771:	push   r15
  404773:	push   r14
  404775:	push   r12
  404777:	push   rbx
  404778:	mov    r15d,edx
  40477b:	mov    r14d,esi
  40477e:	mov    r12,rdi
  404781:	lea    rbp,[rdi+0x58]
  404785:	xor    ebx,ebx
  404787:	nop    WORD PTR [rax+rax*1+0x0]
  404790:	mov    rdi,QWORD PTR [rbp+0x0]
  404794:	test   rdi,rdi
  404797:	je     4047e0 <flatcc_builder_custom_reset@@Base+0x70>
  404799:	test   r15d,r15d
  40479c:	je     4047ca <flatcc_builder_custom_reset@@Base+0x5a>
  40479e:	cmp    rbx,0x5
  4047a2:	je     4047ca <flatcc_builder_custom_reset@@Base+0x5a>
  4047a4:	mov    rdi,QWORD PTR [r12+0x40]
  4047a9:	mov    edx,0x1
  4047ae:	mov    ecx,0x1
  4047b3:	mov    rsi,rbp
  4047b6:	mov    r8d,ebx
  4047b9:	call   QWORD PTR [r12+0x50]
  4047be:	test   eax,eax
  4047c0:	jne    4048a0 <flatcc_builder_custom_reset@@Base+0x130>
  4047c6:	mov    rdi,QWORD PTR [rbp+0x0]
  4047ca:	mov    rdx,QWORD PTR [rbp+0x8]
  4047ce:	xor    esi,esi
  4047d0:	call   403070 <memset@plt>
  4047d5:	jmp    4047eb <flatcc_builder_custom_reset@@Base+0x7b>
  4047d7:	nop    WORD PTR [rax+rax*1+0x0]
  4047e0:	cmp    QWORD PTR [rbp+0x8],0x0
  4047e5:	jne    4048b0 <flatcc_builder_custom_reset@@Base+0x140>
  4047eb:	add    rbx,0x1
  4047ef:	add    rbp,0x10
  4047f3:	cmp    rbx,0x8
  4047f7:	jb     404790 <flatcc_builder_custom_reset@@Base+0x20>
  4047f9:	mov    DWORD PTR [r12+0xe0],0x0
  404805:	cmp    DWORD PTR [r12+0xe4],0x0
  40480e:	je     40481c <flatcc_builder_custom_reset@@Base+0xac>
  404810:	mov    DWORD PTR [r12+0xe4],0x10
  40481c:	mov    WORD PTR [r12+0xe8],0x0
  404827:	mov    QWORD PTR [r12+0xf0],0x0
  404833:	mov    QWORD PTR [r12+0x20],0x0
  40483c:	vxorps xmm0,xmm0,xmm0
  404840:	vmovups XMMWORD PTR [r12+0xfc],xmm0
  40484a:	mov    rax,QWORD PTR [r12+0x58]
  40484f:	mov    rcx,QWORD PTR [r12+0x68]
  404854:	mov    QWORD PTR [r12+0x18],rcx
  404859:	mov    rcx,QWORD PTR [r12+0x88]
  404861:	mov    QWORD PTR [r12],rcx
  404865:	mov    QWORD PTR [r12+0x8],rax
  40486a:	mov    QWORD PTR [r12+0x30],0x0
  404873:	test   r14d,r14d
  404876:	je     404882 <flatcc_builder_custom_reset@@Base+0x112>
  404878:	vmovups XMMWORD PTR [r12+0x118],xmm0
  404882:	xor    ebx,ebx
  404884:	cmp    DWORD PTR [r12+0x128],0x0
  40488d:	je     4048a5 <flatcc_builder_custom_reset@@Base+0x135>
  40488f:	add    r12,0x130
  404896:	mov    rdi,r12
  404899:	call   409010 <flatcc_emitter_reset@@Base>
  40489e:	jmp    4048a5 <flatcc_builder_custom_reset@@Base+0x135>
  4048a0:	mov    ebx,0xffffffff
  4048a5:	mov    eax,ebx
  4048a7:	pop    rbx
  4048a8:	pop    r12
  4048aa:	pop    r14
  4048ac:	pop    r15
  4048ae:	pop    rbp
  4048af:	ret    
  4048b0:	lea    rdi,[rip+0x9d19]        # 40e5d0 <flatcc_builder_padding_base@@Base+0x270>
  4048b7:	lea    rsi,[rip+0x9d24]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4048be:	lea    rcx,[rip+0x9d7d]        # 40e642 <flatcc_builder_padding_base@@Base+0x2e2>
  4048c5:	mov    edx,0x1b2
  4048ca:	call   403060 <__assert_fail@plt>
  4048cf:	nop

00000000004048d0 <flatcc_builder_reset@@Base>:
  4048d0:	push   rbx
  4048d1:	mov    rbx,rdi
  4048d4:	mov    rdi,QWORD PTR [rdi+0x58]
  4048d8:	mov    rdx,QWORD PTR [rbx+0x60]
  4048dc:	test   rdi,rdi
  4048df:	je     4048ea <flatcc_builder_reset@@Base+0x1a>
  4048e1:	xor    esi,esi
  4048e3:	call   403070 <memset@plt>
  4048e8:	jmp    4048f3 <flatcc_builder_reset@@Base+0x23>
  4048ea:	test   rdx,rdx
  4048ed:	jne    404a70 <flatcc_builder_reset@@Base+0x1a0>
  4048f3:	mov    rdi,QWORD PTR [rbx+0x68]
  4048f7:	mov    rdx,QWORD PTR [rbx+0x70]
  4048fb:	test   rdi,rdi
  4048fe:	je     404909 <flatcc_builder_reset@@Base+0x39>
  404900:	xor    esi,esi
  404902:	call   403070 <memset@plt>
  404907:	jmp    404912 <flatcc_builder_reset@@Base+0x42>
  404909:	test   rdx,rdx
  40490c:	jne    404a70 <flatcc_builder_reset@@Base+0x1a0>
  404912:	mov    rdi,QWORD PTR [rbx+0x78]
  404916:	mov    rdx,QWORD PTR [rbx+0x80]
  40491d:	test   rdi,rdi
  404920:	je     40492b <flatcc_builder_reset@@Base+0x5b>
  404922:	xor    esi,esi
  404924:	call   403070 <memset@plt>
  404929:	jmp    404934 <flatcc_builder_reset@@Base+0x64>
  40492b:	test   rdx,rdx
  40492e:	jne    404a70 <flatcc_builder_reset@@Base+0x1a0>
  404934:	mov    rdi,QWORD PTR [rbx+0x88]
  40493b:	mov    rdx,QWORD PTR [rbx+0x90]
  404942:	test   rdi,rdi
  404945:	je     404950 <flatcc_builder_reset@@Base+0x80>
  404947:	xor    esi,esi
  404949:	call   403070 <memset@plt>
  40494e:	jmp    404959 <flatcc_builder_reset@@Base+0x89>
  404950:	test   rdx,rdx
  404953:	jne    404a70 <flatcc_builder_reset@@Base+0x1a0>
  404959:	mov    rdi,QWORD PTR [rbx+0x98]
  404960:	mov    rdx,QWORD PTR [rbx+0xa0]
  404967:	test   rdi,rdi
  40496a:	je     404975 <flatcc_builder_reset@@Base+0xa5>
  40496c:	xor    esi,esi
  40496e:	call   403070 <memset@plt>
  404973:	jmp    40497e <flatcc_builder_reset@@Base+0xae>
  404975:	test   rdx,rdx
  404978:	jne    404a70 <flatcc_builder_reset@@Base+0x1a0>
  40497e:	mov    rdi,QWORD PTR [rbx+0xa8]
  404985:	mov    rdx,QWORD PTR [rbx+0xb0]
  40498c:	test   rdi,rdi
  40498f:	je     40499a <flatcc_builder_reset@@Base+0xca>
  404991:	xor    esi,esi
  404993:	call   403070 <memset@plt>
  404998:	jmp    4049a3 <flatcc_builder_reset@@Base+0xd3>
  40499a:	test   rdx,rdx
  40499d:	jne    404a70 <flatcc_builder_reset@@Base+0x1a0>
  4049a3:	mov    rdi,QWORD PTR [rbx+0xb8]
  4049aa:	mov    rdx,QWORD PTR [rbx+0xc0]
  4049b1:	test   rdi,rdi
  4049b4:	je     4049bf <flatcc_builder_reset@@Base+0xef>
  4049b6:	xor    esi,esi
  4049b8:	call   403070 <memset@plt>
  4049bd:	jmp    4049c8 <flatcc_builder_reset@@Base+0xf8>
  4049bf:	test   rdx,rdx
  4049c2:	jne    404a70 <flatcc_builder_reset@@Base+0x1a0>
  4049c8:	mov    rdi,QWORD PTR [rbx+0xc8]
  4049cf:	mov    rdx,QWORD PTR [rbx+0xd0]
  4049d6:	test   rdi,rdi
  4049d9:	je     4049e4 <flatcc_builder_reset@@Base+0x114>
  4049db:	xor    esi,esi
  4049dd:	call   403070 <memset@plt>
  4049e2:	jmp    4049ed <flatcc_builder_reset@@Base+0x11d>
  4049e4:	test   rdx,rdx
  4049e7:	jne    404a70 <flatcc_builder_reset@@Base+0x1a0>
  4049ed:	mov    DWORD PTR [rbx+0xe0],0x0
  4049f7:	cmp    DWORD PTR [rbx+0xe4],0x0
  4049fe:	je     404a0a <flatcc_builder_reset@@Base+0x13a>
  404a00:	mov    DWORD PTR [rbx+0xe4],0x10
  404a0a:	mov    WORD PTR [rbx+0xe8],0x0
  404a13:	mov    QWORD PTR [rbx+0xf0],0x0
  404a1e:	mov    QWORD PTR [rbx+0x20],0x0
  404a26:	vxorps xmm0,xmm0,xmm0
  404a2a:	vmovups XMMWORD PTR [rbx+0xfc],xmm0
  404a32:	mov    rax,QWORD PTR [rbx+0x58]
  404a36:	mov    rcx,QWORD PTR [rbx+0x68]
  404a3a:	mov    QWORD PTR [rbx+0x18],rcx
  404a3e:	mov    rcx,QWORD PTR [rbx+0x88]
  404a45:	mov    QWORD PTR [rbx],rcx
  404a48:	mov    QWORD PTR [rbx+0x8],rax
  404a4c:	mov    QWORD PTR [rbx+0x30],0x0
  404a54:	cmp    DWORD PTR [rbx+0x128],0x0
  404a5b:	je     404a6c <flatcc_builder_reset@@Base+0x19c>
  404a5d:	add    rbx,0x130
  404a64:	mov    rdi,rbx
  404a67:	call   409010 <flatcc_emitter_reset@@Base>
  404a6c:	xor    eax,eax
  404a6e:	pop    rbx
  404a6f:	ret    
  404a70:	lea    rdi,[rip+0x9b59]        # 40e5d0 <flatcc_builder_padding_base@@Base+0x270>
  404a77:	lea    rsi,[rip+0x9b64]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404a7e:	lea    rcx,[rip+0x9bbd]        # 40e642 <flatcc_builder_padding_base@@Base+0x2e2>
  404a85:	mov    edx,0x1b2
  404a8a:	call   403060 <__assert_fail@plt>
  404a8f:	nop

0000000000404a90 <flatcc_builder_clear@@Base>:
  404a90:	push   rbx
  404a91:	mov    rbx,rdi
  404a94:	lea    rsi,[rdi+0x58]
  404a98:	mov    rdi,QWORD PTR [rdi+0x40]
  404a9c:	xor    edx,edx
  404a9e:	xor    ecx,ecx
  404aa0:	xor    r8d,r8d
  404aa3:	call   QWORD PTR [rbx+0x50]
  404aa6:	lea    rsi,[rbx+0x68]
  404aaa:	mov    rdi,QWORD PTR [rbx+0x40]
  404aae:	xor    edx,edx
  404ab0:	xor    ecx,ecx
  404ab2:	mov    r8d,0x1
  404ab8:	call   QWORD PTR [rbx+0x50]
  404abb:	lea    rsi,[rbx+0x78]
  404abf:	mov    rdi,QWORD PTR [rbx+0x40]
  404ac3:	xor    edx,edx
  404ac5:	xor    ecx,ecx
  404ac7:	mov    r8d,0x2
  404acd:	call   QWORD PTR [rbx+0x50]
  404ad0:	lea    rsi,[rbx+0x88]
  404ad7:	mov    rdi,QWORD PTR [rbx+0x40]
  404adb:	xor    edx,edx
  404add:	xor    ecx,ecx
  404adf:	mov    r8d,0x3
  404ae5:	call   QWORD PTR [rbx+0x50]
  404ae8:	lea    rsi,[rbx+0x98]
  404aef:	mov    rdi,QWORD PTR [rbx+0x40]
  404af3:	xor    edx,edx
  404af5:	xor    ecx,ecx
  404af7:	mov    r8d,0x4
  404afd:	call   QWORD PTR [rbx+0x50]
  404b00:	lea    rsi,[rbx+0xa8]
  404b07:	mov    rdi,QWORD PTR [rbx+0x40]
  404b0b:	xor    edx,edx
  404b0d:	xor    ecx,ecx
  404b0f:	mov    r8d,0x5
  404b15:	call   QWORD PTR [rbx+0x50]
  404b18:	lea    rsi,[rbx+0xb8]
  404b1f:	mov    rdi,QWORD PTR [rbx+0x40]
  404b23:	xor    edx,edx
  404b25:	xor    ecx,ecx
  404b27:	mov    r8d,0x6
  404b2d:	call   QWORD PTR [rbx+0x50]
  404b30:	lea    rsi,[rbx+0xc8]
  404b37:	mov    rdi,QWORD PTR [rbx+0x40]
  404b3b:	xor    edx,edx
  404b3d:	xor    ecx,ecx
  404b3f:	mov    r8d,0x7
  404b45:	call   QWORD PTR [rbx+0x50]
  404b48:	cmp    DWORD PTR [rbx+0x128],0x0
  404b4f:	je     404b5d <flatcc_builder_clear@@Base+0xcd>
  404b51:	lea    rdi,[rbx+0x130]
  404b58:	call   409110 <flatcc_emitter_clear@@Base>
  404b5d:	vxorps xmm0,xmm0,xmm0
  404b61:	vmovups YMMWORD PTR [rbx+0x160],ymm0
  404b69:	vmovups YMMWORD PTR [rbx+0x140],ymm0
  404b71:	vmovups YMMWORD PTR [rbx+0x120],ymm0
  404b79:	vmovups YMMWORD PTR [rbx+0x100],ymm0
  404b81:	vmovups YMMWORD PTR [rbx+0xe0],ymm0
  404b89:	vmovups YMMWORD PTR [rbx+0xc0],ymm0
  404b91:	vmovups YMMWORD PTR [rbx+0xa0],ymm0
  404b99:	vmovups YMMWORD PTR [rbx+0x80],ymm0
  404ba1:	vmovups YMMWORD PTR [rbx+0x60],ymm0
  404ba6:	vmovups YMMWORD PTR [rbx+0x40],ymm0
  404bab:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  404bb0:	vmovups YMMWORD PTR [rbx],ymm0
  404bb4:	mov    QWORD PTR [rbx+0x180],0x0
  404bbf:	pop    rbx
  404bc0:	vzeroupper 
  404bc3:	ret    
  404bc4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404bce:	xchg   ax,ax

0000000000404bd0 <flatcc_builder_enter_user_frame_ptr@@Base>:
  404bd0:	push   r15
  404bd2:	push   r14
  404bd4:	push   r12
  404bd6:	push   rbx
  404bd7:	push   rax
  404bd8:	mov    r14,rsi
  404bdb:	mov    r15,rdi
  404bde:	add    r14,0xf
  404be2:	and    r14,0xfffffffffffffff8
  404be6:	mov    rbx,QWORD PTR [rdi+0x180]
  404bed:	lea    r12,[rdi+0xc8]
  404bf4:	lea    rdx,[rbx+r14*1]
  404bf8:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404bff:	jbe    404c18 <flatcc_builder_enter_user_frame_ptr@@Base+0x48>
  404c01:	mov    rdi,QWORD PTR [r15+0x40]
  404c05:	xor    ecx,ecx
  404c07:	mov    r8d,0x7
  404c0d:	mov    rsi,r12
  404c10:	call   QWORD PTR [r15+0x50]
  404c14:	test   eax,eax
  404c16:	jne    404c68 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
  404c18:	add    rbx,QWORD PTR [r12]
  404c1c:	je     404c57 <flatcc_builder_enter_user_frame_ptr@@Base+0x87>
  404c1e:	xor    esi,esi
  404c20:	mov    rdi,rbx
  404c23:	mov    rdx,r14
  404c26:	call   403070 <memset@plt>
  404c2b:	mov    rax,QWORD PTR [r15+0x178]
  404c32:	mov    QWORD PTR [rbx],rax
  404c35:	add    rbx,0x8
  404c39:	mov    rax,QWORD PTR [r15+0x180]
  404c40:	lea    rcx,[rax+0x8]
  404c44:	mov    QWORD PTR [r15+0x178],rcx
  404c4b:	add    rax,r14
  404c4e:	mov    QWORD PTR [r15+0x180],rax
  404c55:	jmp    404c59 <flatcc_builder_enter_user_frame_ptr@@Base+0x89>
  404c57:	xor    ebx,ebx
  404c59:	mov    rax,rbx
  404c5c:	add    rsp,0x8
  404c60:	pop    rbx
  404c61:	pop    r12
  404c63:	pop    r14
  404c65:	pop    r15
  404c67:	ret    
  404c68:	lea    rdi,[rip+0xab33]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  404c6f:	lea    rsi,[rip+0x996c]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404c76:	lea    rcx,[rip+0xa95f]        # 40f5dc <flatcc_builder_padding_base@@Base+0x127c>
  404c7d:	mov    edx,0x134
  404c82:	call   403060 <__assert_fail@plt>
  404c87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404c90 <flatcc_builder_enter_user_frame@@Base>:
  404c90:	push   r15
  404c92:	push   r14
  404c94:	push   r12
  404c96:	push   rbx
  404c97:	push   rax
  404c98:	mov    r14,rsi
  404c9b:	mov    rbx,rdi
  404c9e:	add    r14,0xf
  404ca2:	and    r14,0xfffffffffffffff8
  404ca6:	mov    r15,QWORD PTR [rdi+0x180]
  404cad:	lea    r12,[rdi+0xc8]
  404cb4:	lea    rdx,[r15+r14*1]
  404cb8:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404cbf:	jbe    404cd7 <flatcc_builder_enter_user_frame@@Base+0x47>
  404cc1:	mov    rdi,QWORD PTR [rbx+0x40]
  404cc5:	xor    ecx,ecx
  404cc7:	mov    r8d,0x7
  404ccd:	mov    rsi,r12
  404cd0:	call   QWORD PTR [rbx+0x50]
  404cd3:	test   eax,eax
  404cd5:	jne    404d20 <flatcc_builder_enter_user_frame@@Base+0x90>
  404cd7:	add    r15,QWORD PTR [r12]
  404cdb:	je     404d12 <flatcc_builder_enter_user_frame@@Base+0x82>
  404cdd:	xor    esi,esi
  404cdf:	mov    rdi,r15
  404ce2:	mov    rdx,r14
  404ce5:	call   403070 <memset@plt>
  404cea:	mov    rax,QWORD PTR [rbx+0x178]
  404cf1:	mov    QWORD PTR [r15],rax
  404cf4:	mov    rcx,QWORD PTR [rbx+0x180]
  404cfb:	lea    rax,[rcx+0x8]
  404cff:	mov    QWORD PTR [rbx+0x178],rax
  404d06:	add    rcx,r14
  404d09:	mov    QWORD PTR [rbx+0x180],rcx
  404d10:	jmp    404d14 <flatcc_builder_enter_user_frame@@Base+0x84>
  404d12:	xor    eax,eax
  404d14:	add    rsp,0x8
  404d18:	pop    rbx
  404d19:	pop    r12
  404d1b:	pop    r14
  404d1d:	pop    r15
  404d1f:	ret    
  404d20:	lea    rdi,[rip+0xaa7b]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  404d27:	lea    rsi,[rip+0x98b4]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404d2e:	lea    rcx,[rip+0xa8a7]        # 40f5dc <flatcc_builder_padding_base@@Base+0x127c>
  404d35:	mov    edx,0x134
  404d3a:	call   403060 <__assert_fail@plt>
  404d3f:	nop

0000000000404d40 <flatcc_builder_exit_user_frame@@Base>:
  404d40:	mov    rax,QWORD PTR [rdi+0x178]
  404d47:	test   rax,rax
  404d4a:	je     404d6d <flatcc_builder_exit_user_frame@@Base+0x2d>
  404d4c:	mov    rcx,QWORD PTR [rdi+0xc8]
  404d53:	mov    edx,eax
  404d55:	add    rax,0xfffffffffffffff8
  404d59:	mov    QWORD PTR [rdi+0x180],rax
  404d60:	mov    rax,QWORD PTR [rcx+rdx*1-0x8]
  404d65:	mov    QWORD PTR [rdi+0x178],rax
  404d6c:	ret    
  404d6d:	push   rax
  404d6e:	lea    rdi,[rip+0x990b]        # 40e680 <flatcc_builder_padding_base@@Base+0x320>
  404d75:	lea    rsi,[rip+0x9866]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404d7c:	lea    rcx,[rip+0x9916]        # 40e699 <flatcc_builder_padding_base@@Base+0x339>
  404d83:	mov    edx,0x21e
  404d88:	call   403060 <__assert_fail@plt>
  404d8d:	nop    DWORD PTR [rax]

0000000000404d90 <flatcc_builder_exit_user_frame_at@@Base>:
  404d90:	push   rax
  404d91:	cmp    QWORD PTR [rdi+0x178],rsi
  404d98:	jb     404dc8 <flatcc_builder_exit_user_frame_at@@Base+0x38>
  404d9a:	mov    QWORD PTR [rdi+0x178],rsi
  404da1:	test   rsi,rsi
  404da4:	je     404de7 <flatcc_builder_exit_user_frame_at@@Base+0x57>
  404da6:	mov    rax,QWORD PTR [rdi+0xc8]
  404dad:	mov    ecx,esi
  404daf:	add    rsi,0xfffffffffffffff8
  404db3:	mov    QWORD PTR [rdi+0x180],rsi
  404dba:	mov    rax,QWORD PTR [rax+rcx*1-0x8]
  404dbf:	mov    QWORD PTR [rdi+0x178],rax
  404dc6:	pop    rcx
  404dc7:	ret    
  404dc8:	lea    rdi,[rip+0x9904]        # 40e6d3 <flatcc_builder_padding_base@@Base+0x373>
  404dcf:	lea    rsi,[rip+0x980c]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404dd6:	lea    rcx,[rip+0x9915]        # 40e6f2 <flatcc_builder_padding_base@@Base+0x392>
  404ddd:	mov    edx,0x227
  404de2:	call   403060 <__assert_fail@plt>
  404de7:	lea    rdi,[rip+0x9892]        # 40e680 <flatcc_builder_padding_base@@Base+0x320>
  404dee:	lea    rsi,[rip+0x97ed]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404df5:	lea    rcx,[rip+0x989d]        # 40e699 <flatcc_builder_padding_base@@Base+0x339>
  404dfc:	mov    edx,0x21e
  404e01:	call   403060 <__assert_fail@plt>
  404e06:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000404e10 <flatcc_builder_get_current_user_frame@@Base>:
  404e10:	mov    rax,QWORD PTR [rdi+0x178]
  404e17:	ret    
  404e18:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404e20 <flatcc_builder_get_user_frame_ptr@@Base>:
  404e20:	mov    eax,esi
  404e22:	add    rax,QWORD PTR [rdi+0xc8]
  404e29:	ret    
  404e2a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404e30 <flatcc_builder_embed_buffer@@Base>:
  404e30:	push   rbp
  404e31:	push   r15
  404e33:	push   r14
  404e35:	push   r12
  404e37:	push   rbx
  404e38:	sub    rsp,0xa0
  404e3f:	mov    ebx,r9d
  404e42:	mov    rbp,rcx
  404e45:	mov    r15,rdx
  404e48:	mov    eax,esi
  404e4a:	mov    r12,rdi
  404e4d:	mov    WORD PTR [rsp+0xa],r8w
  404e53:	xor    ecx,ecx
  404e55:	cmp    DWORD PTR [rdi+0x100],0x0
  404e5c:	setne  cl
  404e5f:	lea    rsi,[rsp+0xa]
  404e64:	mov    edx,eax
  404e66:	call   404fd0 <flatcc_builder_embed_buffer@@Base+0x1a0>
  404e6b:	and    ebx,0x2
  404e6e:	movzx  eax,WORD PTR [rsp+0xa]
  404e73:	mov    r14d,DWORD PTR [r12+0xf0]
  404e7b:	lea    ecx,[rbp+rbx*2+0x0]
  404e7f:	mov    edx,r14d
  404e82:	sub    edx,ecx
  404e84:	add    eax,0xffffffff
  404e87:	and    eax,edx
  404e89:	lea    ecx,[rax+rbp*1]
  404e8c:	mov    DWORD PTR [rsp+0xc],ecx
  404e90:	mov    QWORD PTR [rsp+0x10],0x0
  404e99:	mov    DWORD PTR [rsp+0x18],0x0
  404ea1:	cmp    DWORD PTR [r12+0x100],0x0
  404eaa:	je     404f7e <flatcc_builder_embed_buffer@@Base+0x14e>
  404eb0:	mov    QWORD PTR [rsp+0x10],0x4
  404eb9:	lea    rcx,[rsp+0xc]
  404ebe:	mov    QWORD PTR [rsp+0x20],rcx
  404ec3:	mov    QWORD PTR [rsp+0x28],0x4
  404ecc:	mov    DWORD PTR [rsp+0x18],0x1
  404ed4:	mov    edx,0x1
  404ed9:	mov    r8d,0x4
  404edf:	test   rbp,rbp
  404ee2:	je     404f03 <flatcc_builder_embed_buffer@@Base+0xd3>
  404ee4:	add    r8,rbp
  404ee7:	mov    QWORD PTR [rsp+0x10],r8
  404eec:	mov    ecx,edx
  404eee:	shl    rcx,0x4
  404ef2:	mov    QWORD PTR [rsp+rcx*1+0x20],r15
  404ef7:	mov    QWORD PTR [rsp+rcx*1+0x28],rbp
  404efc:	add    edx,0x1
  404eff:	mov    DWORD PTR [rsp+0x18],edx
  404f03:	test   eax,eax
  404f05:	je     404f2f <flatcc_builder_embed_buffer@@Base+0xff>
  404f07:	mov    eax,eax
  404f09:	add    r8,rax
  404f0c:	mov    QWORD PTR [rsp+0x10],r8
  404f11:	mov    ecx,edx
  404f13:	shl    rcx,0x4
  404f17:	lea    rsi,[rip+0x9442]        # 40e360 <flatcc_builder_padding_base@@Base>
  404f1e:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  404f23:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  404f28:	add    edx,0x1
  404f2b:	mov    DWORD PTR [rsp+0x18],edx
  404f2f:	cmp    r8,0x11
  404f33:	setb   al
  404f36:	lea    rcx,[r8-0x10]
  404f3a:	shr    rcx,0x20
  404f3e:	sete   cl
  404f41:	test   r8d,r8d
  404f44:	jle    404f91 <flatcc_builder_embed_buffer@@Base+0x161>
  404f46:	or     al,cl
  404f48:	je     404f91 <flatcc_builder_embed_buffer@@Base+0x161>
  404f4a:	sub    r14d,r8d
  404f4d:	mov    rdi,QWORD PTR [r12+0x38]
  404f52:	lea    rsi,[rsp+0x20]
  404f57:	mov    ecx,r14d
  404f5a:	call   QWORD PTR [r12+0x48]
  404f5f:	test   eax,eax
  404f61:	jne    404fb0 <flatcc_builder_embed_buffer@@Base+0x180>
  404f63:	mov    DWORD PTR [r12+0xf0],r14d
  404f6b:	mov    eax,r14d
  404f6e:	add    rsp,0xa0
  404f75:	pop    rbx
  404f76:	pop    r12
  404f78:	pop    r14
  404f7a:	pop    r15
  404f7c:	pop    rbp
  404f7d:	ret    
  404f7e:	xor    edx,edx
  404f80:	xor    r8d,r8d
  404f83:	test   rbp,rbp
  404f86:	jne    404ee4 <flatcc_builder_embed_buffer@@Base+0xb4>
  404f8c:	jmp    404f03 <flatcc_builder_embed_buffer@@Base+0xd3>
  404f91:	lea    rdi,[rip+0xa80a]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  404f98:	lea    rsi,[rip+0x9643]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404f9f:	lea    rcx,[rip+0xa6bb]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  404fa6:	mov    edx,0x287
  404fab:	call   403060 <__assert_fail@plt>
  404fb0:	lea    rdi,[rip+0xa7eb]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  404fb7:	lea    rsi,[rip+0x9624]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404fbe:	lea    rcx,[rip+0xa69c]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  404fc5:	mov    edx,0x28b
  404fca:	call   403060 <__assert_fail@plt>
  404fcf:	nop
  404fd0:	push   rbx
  404fd1:	sub    rsp,0x90
  404fd8:	mov    rax,rdi
  404fdb:	test   dx,dx
  404fde:	jne    404ff1 <flatcc_builder_embed_buffer@@Base+0x1c1>
  404fe0:	mov    edi,DWORD PTR [rax+0xec]
  404fe6:	test   di,di
  404fe9:	mov    edx,0x1
  404fee:	cmovne edx,edi
  404ff1:	movzx  ebx,WORD PTR [rsi]
  404ff4:	mov    edi,0x4
  404ff9:	cmp    ebx,0x4
  404ffc:	cmovae edi,ebx
  404fff:	jb     40500c <flatcc_builder_embed_buffer@@Base+0x1dc>
  405001:	cmp    di,dx
  405004:	jb     40500c <flatcc_builder_embed_buffer@@Base+0x1dc>
  405006:	test   ecx,ecx
  405008:	jne    405074 <flatcc_builder_embed_buffer@@Base+0x244>
  40500a:	jmp    405019 <flatcc_builder_embed_buffer@@Base+0x1e9>
  40500c:	cmp    di,dx
  40500f:	cmovb  edi,edx
  405012:	mov    WORD PTR [rsi],di
  405015:	test   ecx,ecx
  405017:	jne    405074 <flatcc_builder_embed_buffer@@Base+0x244>
  405019:	mov    ebx,DWORD PTR [rax+0xf4]
  40501f:	movzx  r8d,dx
  405023:	add    r8d,0xffffffff
  405027:	and    r8d,ebx
  40502a:	je     405074 <flatcc_builder_embed_buffer@@Base+0x244>
  40502c:	mov    QWORD PTR [rsp],r8
  405030:	lea    rcx,[rip+0x9329]        # 40e360 <flatcc_builder_padding_base@@Base>
  405037:	mov    QWORD PTR [rsp+0x10],rcx
  40503c:	mov    QWORD PTR [rsp+0x18],r8
  405041:	mov    DWORD PTR [rsp+0x8],0x1
  405049:	lea    ecx,[r8+rbx*1]
  40504d:	mov    DWORD PTR [rax+0xf4],ecx
  405053:	test   r8d,r8d
  405056:	js     40507d <flatcc_builder_embed_buffer@@Base+0x24d>
  405058:	mov    rdi,QWORD PTR [rax+0x38]
  40505c:	lea    rsi,[rsp+0x10]
  405061:	mov    edx,0x1
  405066:	mov    ecx,ebx
  405068:	call   QWORD PTR [rax+0x48]
  40506b:	test   eax,eax
  40506d:	jne    40509c <flatcc_builder_embed_buffer@@Base+0x26c>
  40506f:	cmp    ebx,0xffffffff
  405072:	je     4050bb <flatcc_builder_embed_buffer@@Base+0x28b>
  405074:	add    rsp,0x90
  40507b:	pop    rbx
  40507c:	ret    
  40507d:	lea    rdi,[rip+0xa71e]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  405084:	lea    rsi,[rip+0x9557]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40508b:	lea    rcx,[rip+0xa68b]        # 40f71d <flatcc_builder_padding_base@@Base+0x13bd>
  405092:	mov    edx,0x2a1
  405097:	call   403060 <__assert_fail@plt>
  40509c:	lea    rdi,[rip+0xa6ff]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  4050a3:	lea    rsi,[rip+0x9538]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4050aa:	lea    rcx,[rip+0xa66c]        # 40f71d <flatcc_builder_padding_base@@Base+0x13bd>
  4050b1:	mov    edx,0x2a5
  4050b6:	call   403060 <__assert_fail@plt>
  4050bb:	lea    rdi,[rip+0xa6e0]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  4050c2:	lea    rsi,[rip+0x9519]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4050c9:	lea    rcx,[rip+0xa54f]        # 40f61f <flatcc_builder_padding_base@@Base+0x12bf>
  4050d0:	mov    edx,0x2be
  4050d5:	call   403060 <__assert_fail@plt>
  4050da:	nop    WORD PTR [rax+rax*1+0x0]

00000000004050e0 <flatcc_builder_create_buffer@@Base>:
  4050e0:	push   rbp
  4050e1:	push   r15
  4050e3:	push   r14
  4050e5:	push   r13
  4050e7:	push   r12
  4050e9:	push   rbx
  4050ea:	sub    rsp,0xa8
  4050f1:	mov    r12d,r9d
  4050f4:	mov    r14d,ecx
  4050f7:	mov    rbp,rsi
  4050fa:	mov    r13,rdi
  4050fd:	mov    WORD PTR [rsp+0xa],r8w
  405103:	mov    DWORD PTR [rsp+0xc],0x0
  40510b:	mov    r15d,r9d
  40510e:	and    r15d,0x1
  405112:	lea    rsi,[rsp+0xa]
  405117:	mov    ecx,r15d
  40511a:	call   404fd0 <flatcc_builder_embed_buffer@@Base+0x1a0>
  40511f:	movzx  eax,WORD PTR [rsp+0xa]
  405124:	cmp    WORD PTR [r13+0xe8],ax
  40512c:	jae    405136 <flatcc_builder_create_buffer@@Base+0x56>
  40512e:	mov    WORD PTR [r13+0xe8],ax
  405136:	movzx  edx,ax
  405139:	xor    eax,eax
  40513b:	test   rbp,rbp
  40513e:	je     405158 <flatcc_builder_create_buffer@@Base+0x78>
  405140:	mov    ecx,DWORD PTR [rbp+0x0]
  405143:	mov    DWORD PTR [rsp+0xc],ecx
  405147:	xor    edi,edi
  405149:	test   ecx,ecx
  40514b:	setne  dil
  40514f:	mov    rsi,rdi
  405152:	shl    rsi,0x2
  405156:	jmp    40515c <flatcc_builder_create_buffer@@Base+0x7c>
  405158:	xor    edi,edi
  40515a:	xor    esi,esi
  40515c:	lea    ecx,[r12+r12*1]
  405160:	and    ecx,0x4
  405163:	mov    ebp,DWORD PTR [r13+0xf0]
  40516a:	xor    ecx,0xfffffffc
  40516d:	add    ecx,ebp
  40516f:	sub    ecx,esi
  405171:	add    edx,0xffffffff
  405174:	mov    QWORD PTR [rsp+0x18],0x0
  40517d:	mov    DWORD PTR [rsp+0x20],0x0
  405185:	test   r12b,0x3
  405189:	je     4051bc <flatcc_builder_create_buffer@@Base+0xdc>
  40518b:	mov    QWORD PTR [rsp+0x18],0x4
  405194:	lea    rax,[rsp+0x10]
  405199:	mov    QWORD PTR [rsp+0x28],rax
  40519e:	mov    QWORD PTR [rsp+0x30],0x4
  4051a7:	mov    DWORD PTR [rsp+0x20],0x1
  4051af:	mov    eax,0x1
  4051b4:	mov    r8d,0x8
  4051ba:	jmp    4051c2 <flatcc_builder_create_buffer@@Base+0xe2>
  4051bc:	mov    r8d,0x4
  4051c2:	and    ecx,edx
  4051c4:	mov    QWORD PTR [rsp+0x18],r8
  4051c9:	mov    edx,eax
  4051cb:	shl    rdx,0x4
  4051cf:	lea    rbx,[rsp+0x14]
  4051d4:	mov    QWORD PTR [rsp+rdx*1+0x28],rbx
  4051d9:	mov    QWORD PTR [rsp+rdx*1+0x30],0x4
  4051e2:	lea    edx,[rax+0x1]
  4051e5:	mov    DWORD PTR [rsp+0x20],edx
  4051e9:	test   dil,dil
  4051ec:	je     405214 <flatcc_builder_create_buffer@@Base+0x134>
  4051ee:	add    r8,rsi
  4051f1:	mov    QWORD PTR [rsp+0x18],r8
  4051f6:	mov    edx,edx
  4051f8:	shl    rdx,0x4
  4051fc:	lea    rdi,[rsp+0xc]
  405201:	mov    QWORD PTR [rsp+rdx*1+0x28],rdi
  405206:	mov    QWORD PTR [rsp+rdx*1+0x30],rsi
  40520b:	or     eax,0x2
  40520e:	mov    DWORD PTR [rsp+0x20],eax
  405212:	mov    edx,eax
  405214:	test   ecx,ecx
  405216:	je     405240 <flatcc_builder_create_buffer@@Base+0x160>
  405218:	mov    eax,ecx
  40521a:	add    r8,rax
  40521d:	mov    QWORD PTR [rsp+0x18],r8
  405222:	mov    ecx,edx
  405224:	shl    rcx,0x4
  405228:	lea    rsi,[rip+0x9131]        # 40e360 <flatcc_builder_padding_base@@Base>
  40522f:	mov    QWORD PTR [rsp+rcx*1+0x28],rsi
  405234:	mov    QWORD PTR [rsp+rcx*1+0x30],rax
  405239:	add    edx,0x1
  40523c:	mov    DWORD PTR [rsp+0x20],edx
  405240:	xor    eax,eax
  405242:	test   r12b,0x3
  405246:	setne  al
  405249:	sub    ebp,r8d
  40524c:	lea    eax,[rbp+rax*4+0x0]
  405250:	mov    ecx,r15d
  405253:	mov    ecx,DWORD PTR [r13+rcx*4+0xf4]
  40525b:	sub    ecx,eax
  40525d:	mov    DWORD PTR [rsp+0x10],ecx
  405261:	sub    r14d,eax
  405264:	mov    DWORD PTR [rsp+0x14],r14d
  405269:	cmp    r8,0x11
  40526d:	setb   al
  405270:	lea    rcx,[r8-0x10]
  405274:	shr    rcx,0x20
  405278:	sete   cl
  40527b:	test   r8d,r8d
  40527e:	jle    4052b6 <flatcc_builder_create_buffer@@Base+0x1d6>
  405280:	or     al,cl
  405282:	je     4052b6 <flatcc_builder_create_buffer@@Base+0x1d6>
  405284:	mov    rdi,QWORD PTR [r13+0x38]
  405288:	lea    rsi,[rsp+0x28]
  40528d:	mov    ecx,ebp
  40528f:	call   QWORD PTR [r13+0x48]
  405293:	test   eax,eax
  405295:	jne    4052d5 <flatcc_builder_create_buffer@@Base+0x1f5>
  405297:	mov    DWORD PTR [r13+0xf0],ebp
  40529e:	test   ebp,ebp
  4052a0:	je     4052f4 <flatcc_builder_create_buffer@@Base+0x214>
  4052a2:	mov    eax,ebp
  4052a4:	add    rsp,0xa8
  4052ab:	pop    rbx
  4052ac:	pop    r12
  4052ae:	pop    r13
  4052b0:	pop    r14
  4052b2:	pop    r15
  4052b4:	pop    rbp
  4052b5:	ret    
  4052b6:	lea    rdi,[rip+0xa4e5]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  4052bd:	lea    rsi,[rip+0x931e]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4052c4:	lea    rcx,[rip+0xa396]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  4052cb:	mov    edx,0x287
  4052d0:	call   403060 <__assert_fail@plt>
  4052d5:	lea    rdi,[rip+0xa4c6]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  4052dc:	lea    rsi,[rip+0x92ff]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4052e3:	lea    rcx,[rip+0xa377]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  4052ea:	mov    edx,0x28b
  4052ef:	call   403060 <__assert_fail@plt>
  4052f4:	lea    rdi,[rip+0xa4a7]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  4052fb:	lea    rsi,[rip+0x92e0]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405302:	lea    rcx,[rip+0x942e]        # 40e737 <flatcc_builder_padding_base@@Base+0x3d7>
  405309:	mov    edx,0x304
  40530e:	call   403060 <__assert_fail@plt>
  405313:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40531d:	nop    DWORD PTR [rax]

0000000000405320 <flatcc_builder_create_struct@@Base>:
  405320:	push   rbp
  405321:	push   r14
  405323:	push   rbx
  405324:	sub    rsp,0x90
  40532b:	test   cx,cx
  40532e:	je     405429 <flatcc_builder_create_struct@@Base+0x109>
  405334:	mov    rax,rdx
  405337:	mov    r14,rdi
  40533a:	cmp    WORD PTR [rdi+0xe8],cx
  405341:	jae    40534b <flatcc_builder_create_struct@@Base+0x2b>
  405343:	mov    WORD PTR [r14+0xe8],cx
  40534b:	mov    ebp,DWORD PTR [r14+0xf0]
  405352:	mov    edx,ebp
  405354:	sub    edx,eax
  405356:	movzx  ecx,cx
  405359:	add    ecx,0xffffffff
  40535c:	and    ecx,edx
  40535e:	mov    QWORD PTR [rsp],0x0
  405366:	mov    DWORD PTR [rsp+0x8],0x0
  40536e:	test   rax,rax
  405371:	je     405402 <flatcc_builder_create_struct@@Base+0xe2>
  405377:	mov    QWORD PTR [rsp],rax
  40537b:	mov    QWORD PTR [rsp+0x10],rsi
  405380:	mov    QWORD PTR [rsp+0x18],rax
  405385:	mov    DWORD PTR [rsp+0x8],0x1
  40538d:	mov    edx,0x1
  405392:	test   ecx,ecx
  405394:	je     4053bb <flatcc_builder_create_struct@@Base+0x9b>
  405396:	add    rax,rcx
  405399:	mov    QWORD PTR [rsp],rax
  40539d:	mov    esi,edx
  40539f:	shl    rsi,0x4
  4053a3:	lea    rdi,[rip+0x8fb6]        # 40e360 <flatcc_builder_padding_base@@Base>
  4053aa:	mov    QWORD PTR [rsp+rsi*1+0x10],rdi
  4053af:	mov    QWORD PTR [rsp+rsi*1+0x18],rcx
  4053b4:	add    edx,0x1
  4053b7:	mov    DWORD PTR [rsp+0x8],edx
  4053bb:	cmp    rax,0x11
  4053bf:	setb   cl
  4053c2:	lea    rsi,[rax-0x10]
  4053c6:	shr    rsi,0x20
  4053ca:	sete   bl
  4053cd:	test   eax,eax
  4053cf:	jle    40540a <flatcc_builder_create_struct@@Base+0xea>
  4053d1:	or     cl,bl
  4053d3:	je     40540a <flatcc_builder_create_struct@@Base+0xea>
  4053d5:	sub    ebp,eax
  4053d7:	mov    rdi,QWORD PTR [r14+0x38]
  4053db:	lea    rsi,[rsp+0x10]
  4053e0:	mov    ecx,ebp
  4053e2:	mov    r8,rax
  4053e5:	call   QWORD PTR [r14+0x48]
  4053e9:	test   eax,eax
  4053eb:	jne    405448 <flatcc_builder_create_struct@@Base+0x128>
  4053ed:	mov    DWORD PTR [r14+0xf0],ebp
  4053f4:	mov    eax,ebp
  4053f6:	add    rsp,0x90
  4053fd:	pop    rbx
  4053fe:	pop    r14
  405400:	pop    rbp
  405401:	ret    
  405402:	xor    edx,edx
  405404:	test   ecx,ecx
  405406:	jne    405396 <flatcc_builder_create_struct@@Base+0x76>
  405408:	jmp    4053bb <flatcc_builder_create_struct@@Base+0x9b>
  40540a:	lea    rdi,[rip+0xa391]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  405411:	lea    rsi,[rip+0x91ca]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405418:	lea    rcx,[rip+0xa242]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  40541f:	mov    edx,0x287
  405424:	call   403060 <__assert_fail@plt>
  405429:	lea    rdi,[rip+0x938a]        # 40e7ba <flatcc_builder_padding_base@@Base+0x45a>
  405430:	lea    rsi,[rip+0x91ab]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405437:	lea    rcx,[rip+0x9387]        # 40e7c5 <flatcc_builder_padding_base@@Base+0x465>
  40543e:	mov    edx,0x30f
  405443:	call   403060 <__assert_fail@plt>
  405448:	lea    rdi,[rip+0xa353]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  40544f:	lea    rsi,[rip+0x918c]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405456:	lea    rcx,[rip+0xa204]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  40545d:	mov    edx,0x28b
  405462:	call   403060 <__assert_fail@plt>
  405467:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405470 <flatcc_builder_start_buffer@@Base>:
  405470:	push   rbp
  405471:	push   r15
  405473:	push   r14
  405475:	push   rbx
  405476:	push   rax
  405477:	mov    r15d,ecx
  40547a:	mov    ebp,edx
  40547c:	mov    r14,rsi
  40547f:	mov    rbx,rdi
  405482:	movzx  esi,WORD PTR [rdi+0xe8]
  405489:	call   405550 <flatcc_builder_start_buffer@@Base+0xe0>
  40548e:	mov    ecx,eax
  405490:	mov    eax,0xffffffff
  405495:	test   ecx,ecx
  405497:	jne    40553c <flatcc_builder_start_buffer@@Base+0xcc>
  40549d:	mov    WORD PTR [rbx+0xe8],0x1
  4054a6:	movzx  eax,WORD PTR [rbx+0xec]
  4054ad:	mov    rcx,QWORD PTR [rbx+0x30]
  4054b1:	mov    WORD PTR [rcx+0x22],ax
  4054b5:	mov    WORD PTR [rbx+0xec],bp
  4054bc:	movzx  eax,WORD PTR [rbx+0x10c]
  4054c3:	mov    rcx,QWORD PTR [rbx+0x30]
  4054c7:	mov    WORD PTR [rcx+0x20],ax
  4054cb:	mov    WORD PTR [rbx+0x10c],r15w
  4054d3:	mov    eax,DWORD PTR [rbx+0xf8]
  4054d9:	mov    rcx,QWORD PTR [rbx+0x30]
  4054dd:	mov    DWORD PTR [rcx+0x14],eax
  4054e0:	mov    eax,DWORD PTR [rbx+0x100]
  4054e6:	mov    rcx,QWORD PTR [rbx+0x30]
  4054ea:	mov    DWORD PTR [rcx+0x1c],eax
  4054ed:	mov    eax,DWORD PTR [rbx+0xf0]
  4054f3:	mov    DWORD PTR [rbx+0xf8],eax
  4054f9:	mov    eax,DWORD PTR [rbx+0xfc]
  4054ff:	lea    ecx,[rax+0x1]
  405502:	mov    DWORD PTR [rbx+0xfc],ecx
  405508:	mov    DWORD PTR [rbx+0x100],eax
  40550e:	mov    eax,DWORD PTR [rbx+0x110]
  405514:	mov    rcx,QWORD PTR [rbx+0x30]
  405518:	mov    DWORD PTR [rcx+0x10],eax
  40551b:	test   r14,r14
  40551e:	jne    405527 <flatcc_builder_start_buffer@@Base+0xb7>
  405520:	lea    r14,[rip+0x8e39]        # 40e360 <flatcc_builder_padding_base@@Base>
  405527:	mov    eax,DWORD PTR [r14]
  40552a:	mov    DWORD PTR [rbx+0x110],eax
  405530:	mov    rax,QWORD PTR [rbx+0x30]
  405534:	mov    WORD PTR [rax+0xe],0x1
  40553a:	xor    eax,eax
  40553c:	add    rsp,0x8
  405540:	pop    rbx
  405541:	pop    r14
  405543:	pop    r15
  405545:	pop    rbp
  405546:	ret    
  405547:	nop    WORD PTR [rax+rax*1+0x0]
  405550:	push   rbp
  405551:	push   r15
  405553:	push   r14
  405555:	push   rbx
  405556:	push   rax
  405557:	mov    r14d,esi
  40555a:	mov    rbx,rdi
  40555d:	movsxd rbp,DWORD PTR [rdi+0x104]
  405564:	lea    eax,[rbp+0x1]
  405567:	mov    DWORD PTR [rdi+0x104],eax
  40556d:	cmp    ebp,DWORD PTR [rdi+0x108]
  405573:	jge    405586 <flatcc_builder_start_buffer@@Base+0x116>
  405575:	mov    rax,QWORD PTR [rbx+0x30]
  405579:	add    rax,0x24
  40557d:	mov    QWORD PTR [rbx+0x30],rax
  405581:	jmp    40561b <flatcc_builder_start_buffer@@Base+0x1ab>
  405586:	mov    eax,DWORD PTR [rbx+0x120]
  40558c:	mov    r15d,0xffffffff
  405592:	test   eax,eax
  405594:	jle    40559e <flatcc_builder_start_buffer@@Base+0x12e>
  405596:	cmp    ebp,eax
  405598:	jge    405656 <flatcc_builder_start_buffer@@Base+0x1e6>
  40559e:	shl    rbp,0x2
  4055a2:	lea    rdx,[rbp*8+0x24]
  4055aa:	add    rdx,rbp
  4055ad:	cmp    rdx,QWORD PTR [rbx+0xa0]
  4055b4:	jbe    4055d4 <flatcc_builder_start_buffer@@Base+0x164>
  4055b6:	lea    rsi,[rbx+0x98]
  4055bd:	mov    rdi,QWORD PTR [rbx+0x40]
  4055c1:	xor    ecx,ecx
  4055c3:	mov    r8d,0x4
  4055c9:	call   QWORD PTR [rbx+0x50]
  4055cc:	test   eax,eax
  4055ce:	jne    405664 <flatcc_builder_start_buffer@@Base+0x1f4>
  4055d4:	lea    rax,[rbp*8+0x0]
  4055dc:	add    rax,rbp
  4055df:	add    rax,QWORD PTR [rbx+0x98]
  4055e6:	mov    QWORD PTR [rbx+0x30],rax
  4055ea:	je     405656 <flatcc_builder_start_buffer@@Base+0x1e6>
  4055ec:	movabs rdx,0xe38e38e38e38e38f
  4055f6:	mulx   rdx,rcx,QWORD PTR [rbx+0xa0]
  4055ff:	shr    rdx,0x5
  405603:	mov    ecx,DWORD PTR [rbx+0x120]
  405609:	cmp    ecx,edx
  40560b:	mov    esi,edx
  40560d:	cmovle esi,ecx
  405610:	test   ecx,ecx
  405612:	cmovle esi,edx
  405615:	mov    DWORD PTR [rbx+0x108],esi
  40561b:	mov    ecx,DWORD PTR [rbx+0x20]
  40561e:	mov    DWORD PTR [rax+0x8],ecx
  405621:	movzx  edx,WORD PTR [rbx+0xea]
  405628:	mov    WORD PTR [rax+0xc],dx
  40562c:	mov    WORD PTR [rbx+0xea],r14w
  405634:	mov    edx,DWORD PTR [rbx+0x28]
  405637:	mov    DWORD PTR [rax],edx
  405639:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405640:	lea    eax,[rcx+rdx*1]
  405643:	add    eax,0x7
  405646:	and    eax,0xfffffff8
  405649:	mov    DWORD PTR [rbx+0x28],eax
  40564c:	mov    DWORD PTR [rbx+0x20],0x0
  405653:	xor    r15d,r15d
  405656:	mov    eax,r15d
  405659:	add    rsp,0x8
  40565d:	pop    rbx
  40565e:	pop    r14
  405660:	pop    r15
  405662:	pop    rbp
  405663:	ret    
  405664:	lea    rdi,[rip+0xa137]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  40566b:	lea    rsi,[rip+0x8f70]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405672:	lea    rcx,[rip+0x9f63]        # 40f5dc <flatcc_builder_padding_base@@Base+0x127c>
  405679:	mov    edx,0x134
  40567e:	call   403060 <__assert_fail@plt>
  405683:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40568d:	nop    DWORD PTR [rax]

0000000000405690 <flatcc_builder_end_buffer@@Base>:
  405690:	push   rbp
  405691:	push   rbx
  405692:	push   rax
  405693:	mov    rcx,QWORD PTR [rdi+0x30]
  405697:	movzx  ecx,WORD PTR [rcx+0xe]
  40569b:	cmp    ecx,0x1
  40569e:	jne    40579e <flatcc_builder_end_buffer@@Base+0x10e>
  4056a4:	mov    eax,esi
  4056a6:	mov    rbx,rdi
  4056a9:	movzx  ecx,WORD PTR [rdi+0x10c]
  4056b0:	and    ecx,0x2
  4056b3:	xor    r9d,r9d
  4056b6:	cmp    DWORD PTR [rdi+0x100],0x0
  4056bd:	setne  r9b
  4056c1:	or     r9d,ecx
  4056c4:	movzx  edi,WORD PTR [rdi+0xe8]
  4056cb:	movzx  ecx,WORD PTR [rbx+0xec]
  4056d2:	cmp    di,cx
  4056d5:	jae    4056e0 <flatcc_builder_end_buffer@@Base+0x50>
  4056d7:	mov    WORD PTR [rbx+0xe8],cx
  4056de:	mov    edi,ecx
  4056e0:	lea    rsi,[rbx+0x110]
  4056e7:	movzx  edx,cx
  4056ea:	movzx  r8d,di
  4056ee:	mov    rdi,rbx
  4056f1:	mov    ecx,eax
  4056f3:	call   4050e0 <flatcc_builder_create_buffer@@Base>
  4056f8:	mov    ebp,eax
  4056fa:	test   eax,eax
  4056fc:	je     405795 <flatcc_builder_end_buffer@@Base+0x105>
  405702:	mov    rax,QWORD PTR [rbx+0x30]
  405706:	mov    ecx,DWORD PTR [rax+0x14]
  405709:	mov    DWORD PTR [rbx+0xf8],ecx
  40570f:	mov    ecx,DWORD PTR [rax+0x1c]
  405712:	mov    DWORD PTR [rbx+0x100],ecx
  405718:	mov    ecx,DWORD PTR [rax+0x10]
  40571b:	mov    DWORD PTR [rbx+0x110],ecx
  405721:	movzx  eax,WORD PTR [rax+0x20]
  405725:	mov    WORD PTR [rbx+0x10c],ax
  40572c:	mov    rdi,QWORD PTR [rbx+0x18]
  405730:	mov    edx,DWORD PTR [rbx+0x20]
  405733:	xor    esi,esi
  405735:	call   403070 <memset@plt>
  40573a:	mov    rax,QWORD PTR [rbx+0x30]
  40573e:	mov    ecx,DWORD PTR [rax+0x8]
  405741:	mov    DWORD PTR [rbx+0x20],ecx
  405744:	mov    ecx,DWORD PTR [rax]
  405746:	mov    DWORD PTR [rbx+0x28],ecx
  405749:	mov    edx,DWORD PTR [rax+0x4]
  40574c:	mov    rsi,rcx
  40574f:	add    rsi,QWORD PTR [rbx+0x68]
  405753:	mov    QWORD PTR [rbx+0x18],rsi
  405757:	mov    esi,DWORD PTR [rbx+0x70]
  40575a:	sub    esi,ecx
  40575c:	cmp    esi,edx
  40575e:	cmova  esi,edx
  405761:	mov    DWORD PTR [rbx+0x24],esi
  405764:	movzx  ecx,WORD PTR [rbx+0xea]
  40576b:	cmp    WORD PTR [rbx+0xe8],cx
  405772:	jae    40577b <flatcc_builder_end_buffer@@Base+0xeb>
  405774:	mov    WORD PTR [rbx+0xe8],cx
  40577b:	movzx  ecx,WORD PTR [rax+0xc]
  40577f:	mov    WORD PTR [rbx+0xea],cx
  405786:	add    rax,0xffffffffffffffdc
  40578a:	mov    QWORD PTR [rbx+0x30],rax
  40578e:	add    DWORD PTR [rbx+0x104],0xffffffff
  405795:	mov    eax,ebp
  405797:	add    rsp,0x8
  40579b:	pop    rbx
  40579c:	pop    rbp
  40579d:	ret    
  40579e:	lea    rdi,[rip+0x9086]        # 40e82b <flatcc_builder_padding_base@@Base+0x4cb>
  4057a5:	lea    rsi,[rip+0x8e36]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4057ac:	lea    rcx,[rip+0x90a4]        # 40e857 <flatcc_builder_padding_base@@Base+0x4f7>
  4057b3:	mov    edx,0x346
  4057b8:	call   403060 <__assert_fail@plt>
  4057bd:	nop    DWORD PTR [rax]

00000000004057c0 <flatcc_builder_start_struct@@Base>:
  4057c0:	push   r15
  4057c2:	push   r14
  4057c4:	push   rbx
  4057c5:	mov    r14,rsi
  4057c8:	mov    rbx,rdi
  4057cb:	mov    esi,edx
  4057cd:	call   405550 <flatcc_builder_start_buffer@@Base+0xe0>
  4057d2:	test   eax,eax
  4057d4:	je     4057dd <flatcc_builder_start_struct@@Base+0x1d>
  4057d6:	xor    eax,eax
  4057d8:	jmp    405872 <flatcc_builder_start_struct@@Base+0xb2>
  4057dd:	mov    rdx,QWORD PTR [rbx+0x30]
  4057e1:	mov    WORD PTR [rdx+0xe],0x2
  4057e7:	mov    ecx,DWORD PTR [rbx+0x28]
  4057ea:	mov    esi,DWORD PTR [rbx+0x70]
  4057ed:	mov    rax,QWORD PTR [rbx+0x68]
  4057f1:	add    rax,rcx
  4057f4:	mov    QWORD PTR [rbx+0x18],rax
  4057f8:	sub    esi,ecx
  4057fa:	cmp    esi,0xfffffffc
  4057fd:	mov    edi,0xfffffffc
  405802:	cmovb  edi,esi
  405805:	mov    DWORD PTR [rbx+0x24],edi
  405808:	mov    DWORD PTR [rdx+0x4],0xfffffffc
  40580f:	mov    r15d,DWORD PTR [rbx+0x20]
  405813:	add    r14d,r15d
  405816:	mov    DWORD PTR [rbx+0x20],r14d
  40581a:	cmp    r14d,edi
  40581d:	jb     40586f <flatcc_builder_start_struct@@Base+0xaf>
  40581f:	add    r14d,0x1
  405823:	lea    rsi,[rbx+0x68]
  405827:	mov    rdi,QWORD PTR [rbx+0x40]
  40582b:	add    r14,rcx
  40582e:	mov    ecx,0x1
  405833:	mov    r8d,0x1
  405839:	mov    rdx,r14
  40583c:	call   QWORD PTR [rbx+0x50]
  40583f:	test   eax,eax
  405841:	jne    4057d6 <flatcc_builder_start_struct@@Base+0x16>
  405843:	mov    ecx,DWORD PTR [rbx+0x28]
  405846:	mov    rax,rcx
  405849:	add    rax,QWORD PTR [rbx+0x68]
  40584d:	mov    QWORD PTR [rbx+0x18],rax
  405851:	mov    edx,DWORD PTR [rbx+0x70]
  405854:	sub    edx,ecx
  405856:	cmp    edx,0xfffffffc
  405859:	mov    ecx,0xfffffffc
  40585e:	cmovb  ecx,edx
  405861:	mov    DWORD PTR [rbx+0x24],ecx
  405864:	mov    rcx,QWORD PTR [rbx+0x30]
  405868:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40586f:	add    rax,r15
  405872:	pop    rbx
  405873:	pop    r14
  405875:	pop    r15
  405877:	ret    
  405878:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405880 <flatcc_builder_struct_edit@@Base>:
  405880:	mov    rax,QWORD PTR [rdi+0x18]
  405884:	ret    
  405885:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40588f:	nop

0000000000405890 <flatcc_builder_end_struct@@Base>:
  405890:	push   rbp
  405891:	push   rbx
  405892:	push   rax
  405893:	mov    rax,QWORD PTR [rdi+0x30]
  405897:	movzx  eax,WORD PTR [rax+0xe]
  40589b:	cmp    eax,0x2
  40589e:	jne    405932 <flatcc_builder_end_struct@@Base+0xa2>
  4058a4:	mov    rbx,rdi
  4058a7:	mov    rsi,QWORD PTR [rdi+0x18]
  4058ab:	mov    edx,DWORD PTR [rdi+0x20]
  4058ae:	movzx  ecx,WORD PTR [rdi+0xea]
  4058b5:	call   405320 <flatcc_builder_create_struct@@Base>
  4058ba:	mov    ebp,eax
  4058bc:	test   eax,eax
  4058be:	je     405929 <flatcc_builder_end_struct@@Base+0x99>
  4058c0:	mov    rdi,QWORD PTR [rbx+0x18]
  4058c4:	mov    edx,DWORD PTR [rbx+0x20]
  4058c7:	xor    esi,esi
  4058c9:	call   403070 <memset@plt>
  4058ce:	mov    rax,QWORD PTR [rbx+0x30]
  4058d2:	mov    ecx,DWORD PTR [rax+0x8]
  4058d5:	mov    DWORD PTR [rbx+0x20],ecx
  4058d8:	mov    ecx,DWORD PTR [rax]
  4058da:	mov    DWORD PTR [rbx+0x28],ecx
  4058dd:	mov    edx,DWORD PTR [rax+0x4]
  4058e0:	mov    rsi,rcx
  4058e3:	add    rsi,QWORD PTR [rbx+0x68]
  4058e7:	mov    QWORD PTR [rbx+0x18],rsi
  4058eb:	mov    esi,DWORD PTR [rbx+0x70]
  4058ee:	sub    esi,ecx
  4058f0:	cmp    esi,edx
  4058f2:	cmova  esi,edx
  4058f5:	mov    DWORD PTR [rbx+0x24],esi
  4058f8:	movzx  ecx,WORD PTR [rbx+0xea]
  4058ff:	cmp    WORD PTR [rbx+0xe8],cx
  405906:	jae    40590f <flatcc_builder_end_struct@@Base+0x7f>
  405908:	mov    WORD PTR [rbx+0xe8],cx
  40590f:	movzx  ecx,WORD PTR [rax+0xc]
  405913:	mov    WORD PTR [rbx+0xea],cx
  40591a:	add    rax,0xffffffffffffffdc
  40591e:	mov    QWORD PTR [rbx+0x30],rax
  405922:	add    DWORD PTR [rbx+0x104],0xffffffff
  405929:	mov    eax,ebp
  40592b:	add    rsp,0x8
  40592f:	pop    rbx
  405930:	pop    rbp
  405931:	ret    
  405932:	lea    rdi,[rip+0x8f77]        # 40e8b0 <flatcc_builder_padding_base@@Base+0x550>
  405939:	lea    rsi,[rip+0x8ca2]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405940:	lea    rcx,[rip+0x8f95]        # 40e8dc <flatcc_builder_padding_base@@Base+0x57c>
  405947:	mov    edx,0x368
  40594c:	call   403060 <__assert_fail@plt>
  405951:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40595b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405960 <flatcc_builder_extend_vector@@Base>:
  405960:	push   r14
  405962:	push   rbx
  405963:	push   rax
  405964:	mov    rax,QWORD PTR [rdi+0x30]
  405968:	mov    ecx,DWORD PTR [rax+0x14]
  40596b:	add    ecx,esi
  40596d:	jb     405a00 <flatcc_builder_extend_vector@@Base+0xa0>
  405973:	cmp    ecx,DWORD PTR [rax+0x18]
  405976:	ja     405a00 <flatcc_builder_extend_vector@@Base+0xa0>
  40597c:	mov    rbx,rdi
  40597f:	mov    DWORD PTR [rax+0x14],ecx
  405982:	mov    rax,QWORD PTR [rdi+0x30]
  405986:	imul   esi,DWORD PTR [rax+0x10]
  40598a:	mov    r14d,DWORD PTR [rdi+0x20]
  40598e:	add    esi,r14d
  405991:	mov    DWORD PTR [rdi+0x20],esi
  405994:	cmp    esi,DWORD PTR [rdi+0x24]
  405997:	jae    40599f <flatcc_builder_extend_vector@@Base+0x3f>
  405999:	mov    rax,QWORD PTR [rbx+0x18]
  40599d:	jmp    4059f5 <flatcc_builder_extend_vector@@Base+0x95>
  40599f:	add    esi,0x1
  4059a2:	lea    rax,[rbx+0x68]
  4059a6:	mov    rdi,QWORD PTR [rbx+0x40]
  4059aa:	mov    edx,DWORD PTR [rbx+0x28]
  4059ad:	add    rdx,rsi
  4059b0:	mov    ecx,0x1
  4059b5:	mov    r8d,0x1
  4059bb:	mov    rsi,rax
  4059be:	call   QWORD PTR [rbx+0x50]
  4059c1:	test   eax,eax
  4059c3:	je     4059c9 <flatcc_builder_extend_vector@@Base+0x69>
  4059c5:	xor    eax,eax
  4059c7:	jmp    4059f8 <flatcc_builder_extend_vector@@Base+0x98>
  4059c9:	mov    ecx,DWORD PTR [rbx+0x28]
  4059cc:	mov    rax,rcx
  4059cf:	add    rax,QWORD PTR [rbx+0x68]
  4059d3:	mov    QWORD PTR [rbx+0x18],rax
  4059d7:	mov    edx,DWORD PTR [rbx+0x70]
  4059da:	sub    edx,ecx
  4059dc:	cmp    edx,0xfffffffc
  4059df:	mov    ecx,0xfffffffc
  4059e4:	cmovb  ecx,edx
  4059e7:	mov    DWORD PTR [rbx+0x24],ecx
  4059ea:	mov    rcx,QWORD PTR [rbx+0x30]
  4059ee:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4059f5:	add    rax,r14
  4059f8:	add    rsp,0x8
  4059fc:	pop    rbx
  4059fd:	pop    r14
  4059ff:	ret    
  405a00:	lea    rdi,[rip+0x9ca4]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  405a07:	lea    rsi,[rip+0x8bd4]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405a0e:	lea    rcx,[rip+0x9cb1]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  405a15:	mov    edx,0x37c
  405a1a:	call   403060 <__assert_fail@plt>
  405a1f:	nop

0000000000405a20 <flatcc_builder_vector_push@@Base>:
  405a20:	push   r15
  405a22:	push   r14
  405a24:	push   r13
  405a26:	push   r12
  405a28:	push   rbx
  405a29:	mov    rax,QWORD PTR [rdi+0x30]
  405a2d:	movzx  ecx,WORD PTR [rax+0xe]
  405a31:	cmp    ecx,0x4
  405a34:	jne    405ae9 <flatcc_builder_vector_push@@Base+0xc9>
  405a3a:	mov    ecx,DWORD PTR [rax+0x14]
  405a3d:	cmp    ecx,DWORD PTR [rax+0x18]
  405a40:	ja     405b08 <flatcc_builder_vector_push@@Base+0xe8>
  405a46:	mov    r14,rsi
  405a49:	mov    rbx,rdi
  405a4c:	add    ecx,0x1
  405a4f:	mov    DWORD PTR [rax+0x14],ecx
  405a52:	mov    rax,QWORD PTR [rdi+0x30]
  405a56:	mov    r15d,DWORD PTR [rax+0x10]
  405a5a:	mov    r13d,DWORD PTR [rdi+0x20]
  405a5e:	lea    eax,[r15+r13*1]
  405a62:	mov    DWORD PTR [rdi+0x20],eax
  405a65:	cmp    eax,DWORD PTR [rdi+0x24]
  405a68:	jae    405a75 <flatcc_builder_vector_push@@Base+0x55>
  405a6a:	mov    r12,QWORD PTR [rbx+0x18]
  405a6e:	add    r12,r13
  405a71:	jne    405ace <flatcc_builder_vector_push@@Base+0xae>
  405a73:	jmp    405a98 <flatcc_builder_vector_push@@Base+0x78>
  405a75:	add    eax,0x1
  405a78:	lea    rsi,[rbx+0x68]
  405a7c:	mov    rdi,QWORD PTR [rbx+0x40]
  405a80:	mov    edx,DWORD PTR [rbx+0x28]
  405a83:	add    rdx,rax
  405a86:	mov    ecx,0x1
  405a8b:	mov    r8d,0x1
  405a91:	call   QWORD PTR [rbx+0x50]
  405a94:	test   eax,eax
  405a96:	je     405a9d <flatcc_builder_vector_push@@Base+0x7d>
  405a98:	xor    r12d,r12d
  405a9b:	jmp    405adc <flatcc_builder_vector_push@@Base+0xbc>
  405a9d:	mov    eax,DWORD PTR [rbx+0x28]
  405aa0:	mov    r12,rax
  405aa3:	add    r12,QWORD PTR [rbx+0x68]
  405aa7:	mov    QWORD PTR [rbx+0x18],r12
  405aab:	mov    ecx,DWORD PTR [rbx+0x70]
  405aae:	sub    ecx,eax
  405ab0:	cmp    ecx,0xfffffffc
  405ab3:	mov    eax,0xfffffffc
  405ab8:	cmovb  eax,ecx
  405abb:	mov    DWORD PTR [rbx+0x24],eax
  405abe:	mov    rax,QWORD PTR [rbx+0x30]
  405ac2:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405ac9:	add    r12,r13
  405acc:	je     405a98 <flatcc_builder_vector_push@@Base+0x78>
  405ace:	mov    rdi,r12
  405ad1:	mov    rsi,r14
  405ad4:	mov    rdx,r15
  405ad7:	call   4030b0 <memcpy@plt>
  405adc:	mov    rax,r12
  405adf:	pop    rbx
  405ae0:	pop    r12
  405ae2:	pop    r13
  405ae4:	pop    r14
  405ae6:	pop    r15
  405ae8:	ret    
  405ae9:	lea    rdi,[rip+0x8e2f]        # 40e91f <flatcc_builder_padding_base@@Base+0x5bf>
  405af0:	lea    rsi,[rip+0x8aeb]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405af7:	lea    rcx,[rip+0x8e4d]        # 40e94b <flatcc_builder_padding_base@@Base+0x5eb>
  405afe:	mov    edx,0x38b
  405b03:	call   403060 <__assert_fail@plt>
  405b08:	lea    rdi,[rip+0x8e7f]        # 40e98e <flatcc_builder_padding_base@@Base+0x62e>
  405b0f:	lea    rsi,[rip+0x8acc]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405b16:	lea    rcx,[rip+0x8e2e]        # 40e94b <flatcc_builder_padding_base@@Base+0x5eb>
  405b1d:	mov    edx,0x38c
  405b22:	call   403060 <__assert_fail@plt>
  405b27:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405b30 <flatcc_builder_append_vector@@Base>:
  405b30:	push   r15
  405b32:	push   r14
  405b34:	push   r13
  405b36:	push   r12
  405b38:	push   rbx
  405b39:	mov    rax,QWORD PTR [rdi+0x30]
  405b3d:	movzx  ecx,WORD PTR [rax+0xe]
  405b41:	cmp    ecx,0x4
  405b44:	jne    405c22 <flatcc_builder_append_vector@@Base+0xf2>
  405b4a:	mov    r15,rdx
  405b4d:	mov    ecx,DWORD PTR [rax+0x14]
  405b50:	add    ecx,r15d
  405b53:	jb     405c03 <flatcc_builder_append_vector@@Base+0xd3>
  405b59:	cmp    ecx,DWORD PTR [rax+0x18]
  405b5c:	ja     405c03 <flatcc_builder_append_vector@@Base+0xd3>
  405b62:	mov    r14,rsi
  405b65:	mov    rbx,rdi
  405b68:	mov    DWORD PTR [rax+0x14],ecx
  405b6b:	mov    rax,QWORD PTR [rdi+0x30]
  405b6f:	imul   r15d,DWORD PTR [rax+0x10]
  405b74:	mov    r13d,DWORD PTR [rdi+0x20]
  405b78:	lea    eax,[r15+r13*1]
  405b7c:	mov    DWORD PTR [rdi+0x20],eax
  405b7f:	cmp    eax,DWORD PTR [rdi+0x24]
  405b82:	jae    405b8f <flatcc_builder_append_vector@@Base+0x5f>
  405b84:	mov    r12,QWORD PTR [rbx+0x18]
  405b88:	add    r12,r13
  405b8b:	jne    405be8 <flatcc_builder_append_vector@@Base+0xb8>
  405b8d:	jmp    405bb2 <flatcc_builder_append_vector@@Base+0x82>
  405b8f:	add    eax,0x1
  405b92:	lea    rsi,[rbx+0x68]
  405b96:	mov    rdi,QWORD PTR [rbx+0x40]
  405b9a:	mov    edx,DWORD PTR [rbx+0x28]
  405b9d:	add    rdx,rax
  405ba0:	mov    ecx,0x1
  405ba5:	mov    r8d,0x1
  405bab:	call   QWORD PTR [rbx+0x50]
  405bae:	test   eax,eax
  405bb0:	je     405bb7 <flatcc_builder_append_vector@@Base+0x87>
  405bb2:	xor    r12d,r12d
  405bb5:	jmp    405bf6 <flatcc_builder_append_vector@@Base+0xc6>
  405bb7:	mov    eax,DWORD PTR [rbx+0x28]
  405bba:	mov    r12,rax
  405bbd:	add    r12,QWORD PTR [rbx+0x68]
  405bc1:	mov    QWORD PTR [rbx+0x18],r12
  405bc5:	mov    ecx,DWORD PTR [rbx+0x70]
  405bc8:	sub    ecx,eax
  405bca:	cmp    ecx,0xfffffffc
  405bcd:	mov    eax,0xfffffffc
  405bd2:	cmovb  eax,ecx
  405bd5:	mov    DWORD PTR [rbx+0x24],eax
  405bd8:	mov    rax,QWORD PTR [rbx+0x30]
  405bdc:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405be3:	add    r12,r13
  405be6:	je     405bb2 <flatcc_builder_append_vector@@Base+0x82>
  405be8:	mov    edx,r15d
  405beb:	mov    rdi,r12
  405bee:	mov    rsi,r14
  405bf1:	call   4030b0 <memcpy@plt>
  405bf6:	mov    rax,r12
  405bf9:	pop    rbx
  405bfa:	pop    r12
  405bfc:	pop    r13
  405bfe:	pop    r14
  405c00:	pop    r15
  405c02:	ret    
  405c03:	lea    rdi,[rip+0x9aa1]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  405c0a:	lea    rsi,[rip+0x89d1]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405c11:	lea    rcx,[rip+0x9aae]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  405c18:	mov    edx,0x37c
  405c1d:	call   403060 <__assert_fail@plt>
  405c22:	lea    rdi,[rip+0x8cf6]        # 40e91f <flatcc_builder_padding_base@@Base+0x5bf>
  405c29:	lea    rsi,[rip+0x89b2]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405c30:	lea    rcx,[rip+0x8d94]        # 40e9cb <flatcc_builder_padding_base@@Base+0x66b>
  405c37:	mov    edx,0x393
  405c3c:	call   403060 <__assert_fail@plt>
  405c41:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405c4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405c50 <flatcc_builder_extend_offset_vector@@Base>:
  405c50:	push   r14
  405c52:	push   rbx
  405c53:	push   rax
  405c54:	mov    rax,QWORD PTR [rdi+0x30]
  405c58:	mov    ecx,DWORD PTR [rax+0x14]
  405c5b:	add    ecx,esi
  405c5d:	jb     405ce5 <flatcc_builder_extend_offset_vector@@Base+0x95>
  405c63:	cmp    ecx,0x40000000
  405c69:	jae    405ce5 <flatcc_builder_extend_offset_vector@@Base+0x95>
  405c6b:	mov    rbx,rdi
  405c6e:	mov    DWORD PTR [rax+0x14],ecx
  405c71:	mov    r14d,DWORD PTR [rdi+0x20]
  405c75:	lea    eax,[r14+rsi*4]
  405c79:	mov    DWORD PTR [rdi+0x20],eax
  405c7c:	cmp    eax,DWORD PTR [rdi+0x24]
  405c7f:	jae    405c87 <flatcc_builder_extend_offset_vector@@Base+0x37>
  405c81:	mov    rax,QWORD PTR [rbx+0x18]
  405c85:	jmp    405cda <flatcc_builder_extend_offset_vector@@Base+0x8a>
  405c87:	add    eax,0x1
  405c8a:	lea    rsi,[rbx+0x68]
  405c8e:	mov    rdi,QWORD PTR [rbx+0x40]
  405c92:	mov    edx,DWORD PTR [rbx+0x28]
  405c95:	add    rdx,rax
  405c98:	mov    ecx,0x1
  405c9d:	mov    r8d,0x1
  405ca3:	call   QWORD PTR [rbx+0x50]
  405ca6:	test   eax,eax
  405ca8:	je     405cae <flatcc_builder_extend_offset_vector@@Base+0x5e>
  405caa:	xor    eax,eax
  405cac:	jmp    405cdd <flatcc_builder_extend_offset_vector@@Base+0x8d>
  405cae:	mov    ecx,DWORD PTR [rbx+0x28]
  405cb1:	mov    rax,rcx
  405cb4:	add    rax,QWORD PTR [rbx+0x68]
  405cb8:	mov    QWORD PTR [rbx+0x18],rax
  405cbc:	mov    edx,DWORD PTR [rbx+0x70]
  405cbf:	sub    edx,ecx
  405cc1:	cmp    edx,0xfffffffc
  405cc4:	mov    ecx,0xfffffffc
  405cc9:	cmovb  ecx,edx
  405ccc:	mov    DWORD PTR [rbx+0x24],ecx
  405ccf:	mov    rcx,QWORD PTR [rbx+0x30]
  405cd3:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405cda:	add    rax,r14
  405cdd:	add    rsp,0x8
  405ce1:	pop    rbx
  405ce2:	pop    r14
  405ce4:	ret    
  405ce5:	lea    rdi,[rip+0x99bf]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  405cec:	lea    rsi,[rip+0x88ef]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405cf3:	lea    rcx,[rip+0x99cc]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  405cfa:	mov    edx,0x37c
  405cff:	call   403060 <__assert_fail@plt>
  405d04:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405d0e:	xchg   ax,ax

0000000000405d10 <flatcc_builder_offset_vector_push@@Base>:
  405d10:	push   rbp
  405d11:	push   r14
  405d13:	push   rbx
  405d14:	mov    rax,QWORD PTR [rdi+0x30]
  405d18:	movzx  ecx,WORD PTR [rax+0xe]
  405d1c:	cmp    ecx,0x5
  405d1f:	jne    405db5 <flatcc_builder_offset_vector_push@@Base+0xa5>
  405d25:	mov    ecx,DWORD PTR [rax+0x14]
  405d28:	cmp    ecx,0x3fffffff
  405d2e:	je     405d78 <flatcc_builder_offset_vector_push@@Base+0x68>
  405d30:	mov    r14d,esi
  405d33:	mov    rbx,rdi
  405d36:	add    ecx,0x1
  405d39:	mov    DWORD PTR [rax+0x14],ecx
  405d3c:	mov    ebp,DWORD PTR [rdi+0x20]
  405d3f:	lea    eax,[rbp+0x4]
  405d42:	mov    DWORD PTR [rdi+0x20],eax
  405d45:	cmp    eax,DWORD PTR [rdi+0x24]
  405d48:	jae    405d55 <flatcc_builder_offset_vector_push@@Base+0x45>
  405d4a:	mov    rax,QWORD PTR [rbx+0x18]
  405d4e:	add    rax,rbp
  405d51:	jne    405dad <flatcc_builder_offset_vector_push@@Base+0x9d>
  405d53:	jmp    405d78 <flatcc_builder_offset_vector_push@@Base+0x68>
  405d55:	lea    eax,[rbp+0x5]
  405d58:	lea    rsi,[rbx+0x68]
  405d5c:	mov    rdi,QWORD PTR [rbx+0x40]
  405d60:	mov    edx,DWORD PTR [rbx+0x28]
  405d63:	add    rdx,rax
  405d66:	mov    ecx,0x1
  405d6b:	mov    r8d,0x1
  405d71:	call   QWORD PTR [rbx+0x50]
  405d74:	test   eax,eax
  405d76:	je     405d7c <flatcc_builder_offset_vector_push@@Base+0x6c>
  405d78:	xor    eax,eax
  405d7a:	jmp    405db0 <flatcc_builder_offset_vector_push@@Base+0xa0>
  405d7c:	mov    ecx,DWORD PTR [rbx+0x28]
  405d7f:	mov    rax,rcx
  405d82:	add    rax,QWORD PTR [rbx+0x68]
  405d86:	mov    QWORD PTR [rbx+0x18],rax
  405d8a:	mov    edx,DWORD PTR [rbx+0x70]
  405d8d:	sub    edx,ecx
  405d8f:	cmp    edx,0xfffffffc
  405d92:	mov    ecx,0xfffffffc
  405d97:	cmovb  ecx,edx
  405d9a:	mov    DWORD PTR [rbx+0x24],ecx
  405d9d:	mov    rcx,QWORD PTR [rbx+0x30]
  405da1:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405da8:	add    rax,rbp
  405dab:	je     405d78 <flatcc_builder_offset_vector_push@@Base+0x68>
  405dad:	mov    DWORD PTR [rax],r14d
  405db0:	pop    rbx
  405db1:	pop    r14
  405db3:	pop    rbp
  405db4:	ret    
  405db5:	lea    rdi,[rip+0x8c5c]        # 40ea18 <flatcc_builder_padding_base@@Base+0x6b8>
  405dbc:	lea    rsi,[rip+0x881f]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405dc3:	lea    rcx,[rip+0x8c81]        # 40ea4b <flatcc_builder_padding_base@@Base+0x6eb>
  405dca:	mov    edx,0x3a6
  405dcf:	call   403060 <__assert_fail@plt>
  405dd4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405dde:	xchg   ax,ax

0000000000405de0 <flatcc_builder_append_offset_vector@@Base>:
  405de0:	push   r15
  405de2:	push   r14
  405de4:	push   r13
  405de6:	push   r12
  405de8:	push   rbx
  405de9:	mov    rax,QWORD PTR [rdi+0x30]
  405ded:	movzx  ecx,WORD PTR [rax+0xe]
  405df1:	cmp    ecx,0x5
  405df4:	jne    405ed1 <flatcc_builder_append_offset_vector@@Base+0xf1>
  405dfa:	mov    r15,rdx
  405dfd:	mov    ecx,DWORD PTR [rax+0x14]
  405e00:	add    ecx,r15d
  405e03:	jb     405eb2 <flatcc_builder_append_offset_vector@@Base+0xd2>
  405e09:	cmp    ecx,0x40000000
  405e0f:	jae    405eb2 <flatcc_builder_append_offset_vector@@Base+0xd2>
  405e15:	mov    r14,rsi
  405e18:	mov    rbx,rdi
  405e1b:	mov    DWORD PTR [rax+0x14],ecx
  405e1e:	mov    r13d,DWORD PTR [rdi+0x20]
  405e22:	lea    eax,[r13+r15*4+0x0]
  405e27:	mov    DWORD PTR [rdi+0x20],eax
  405e2a:	cmp    eax,DWORD PTR [rdi+0x24]
  405e2d:	jae    405e3a <flatcc_builder_append_offset_vector@@Base+0x5a>
  405e2f:	mov    r12,QWORD PTR [rbx+0x18]
  405e33:	add    r12,r13
  405e36:	jne    405e93 <flatcc_builder_append_offset_vector@@Base+0xb3>
  405e38:	jmp    405e5d <flatcc_builder_append_offset_vector@@Base+0x7d>
  405e3a:	add    eax,0x1
  405e3d:	lea    rsi,[rbx+0x68]
  405e41:	mov    rdi,QWORD PTR [rbx+0x40]
  405e45:	mov    edx,DWORD PTR [rbx+0x28]
  405e48:	add    rdx,rax
  405e4b:	mov    ecx,0x1
  405e50:	mov    r8d,0x1
  405e56:	call   QWORD PTR [rbx+0x50]
  405e59:	test   eax,eax
  405e5b:	je     405e62 <flatcc_builder_append_offset_vector@@Base+0x82>
  405e5d:	xor    r12d,r12d
  405e60:	jmp    405ea5 <flatcc_builder_append_offset_vector@@Base+0xc5>
  405e62:	mov    eax,DWORD PTR [rbx+0x28]
  405e65:	mov    r12,rax
  405e68:	add    r12,QWORD PTR [rbx+0x68]
  405e6c:	mov    QWORD PTR [rbx+0x18],r12
  405e70:	mov    ecx,DWORD PTR [rbx+0x70]
  405e73:	sub    ecx,eax
  405e75:	cmp    ecx,0xfffffffc
  405e78:	mov    eax,0xfffffffc
  405e7d:	cmovb  eax,ecx
  405e80:	mov    DWORD PTR [rbx+0x24],eax
  405e83:	mov    rax,QWORD PTR [rbx+0x30]
  405e87:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405e8e:	add    r12,r13
  405e91:	je     405e5d <flatcc_builder_append_offset_vector@@Base+0x7d>
  405e93:	shl    r15d,0x2
  405e97:	mov    edx,r15d
  405e9a:	mov    rdi,r12
  405e9d:	mov    rsi,r14
  405ea0:	call   4030b0 <memcpy@plt>
  405ea5:	mov    rax,r12
  405ea8:	pop    rbx
  405ea9:	pop    r12
  405eab:	pop    r13
  405ead:	pop    r14
  405eaf:	pop    r15
  405eb1:	ret    
  405eb2:	lea    rdi,[rip+0x97f2]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  405eb9:	lea    rsi,[rip+0x8722]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405ec0:	lea    rcx,[rip+0x97ff]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  405ec7:	mov    edx,0x37c
  405ecc:	call   403060 <__assert_fail@plt>
  405ed1:	lea    rdi,[rip+0x8b40]        # 40ea18 <flatcc_builder_padding_base@@Base+0x6b8>
  405ed8:	lea    rsi,[rip+0x8703]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405edf:	lea    rcx,[rip+0x8bc7]        # 40eaad <flatcc_builder_padding_base@@Base+0x74d>
  405ee6:	mov    edx,0x3b4
  405eeb:	call   403060 <__assert_fail@plt>

0000000000405ef0 <flatcc_builder_extend_string@@Base>:
  405ef0:	push   r14
  405ef2:	push   rbx
  405ef3:	push   rax
  405ef4:	mov    rax,QWORD PTR [rdi+0x30]
  405ef8:	movzx  ecx,WORD PTR [rax+0xe]
  405efc:	cmp    ecx,0x6
  405eff:	jne    405f8c <flatcc_builder_extend_string@@Base+0x9c>
  405f05:	mov    ecx,DWORD PTR [rax+0x14]
  405f08:	add    ecx,esi
  405f0a:	jb     405fab <flatcc_builder_extend_string@@Base+0xbb>
  405f10:	mov    rbx,rdi
  405f13:	mov    DWORD PTR [rax+0x14],ecx
  405f16:	mov    r14d,DWORD PTR [rdi+0x20]
  405f1a:	add    esi,r14d
  405f1d:	mov    DWORD PTR [rdi+0x20],esi
  405f20:	cmp    esi,DWORD PTR [rdi+0x24]
  405f23:	jae    405f2b <flatcc_builder_extend_string@@Base+0x3b>
  405f25:	mov    rax,QWORD PTR [rbx+0x18]
  405f29:	jmp    405f81 <flatcc_builder_extend_string@@Base+0x91>
  405f2b:	add    esi,0x1
  405f2e:	lea    rax,[rbx+0x68]
  405f32:	mov    rdi,QWORD PTR [rbx+0x40]
  405f36:	mov    edx,DWORD PTR [rbx+0x28]
  405f39:	add    rdx,rsi
  405f3c:	mov    ecx,0x1
  405f41:	mov    r8d,0x1
  405f47:	mov    rsi,rax
  405f4a:	call   QWORD PTR [rbx+0x50]
  405f4d:	test   eax,eax
  405f4f:	je     405f55 <flatcc_builder_extend_string@@Base+0x65>
  405f51:	xor    eax,eax
  405f53:	jmp    405f84 <flatcc_builder_extend_string@@Base+0x94>
  405f55:	mov    ecx,DWORD PTR [rbx+0x28]
  405f58:	mov    rax,rcx
  405f5b:	add    rax,QWORD PTR [rbx+0x68]
  405f5f:	mov    QWORD PTR [rbx+0x18],rax
  405f63:	mov    edx,DWORD PTR [rbx+0x70]
  405f66:	sub    edx,ecx
  405f68:	cmp    edx,0xfffffffc
  405f6b:	mov    ecx,0xfffffffc
  405f70:	cmovb  ecx,edx
  405f73:	mov    DWORD PTR [rbx+0x24],ecx
  405f76:	mov    rcx,QWORD PTR [rbx+0x30]
  405f7a:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405f81:	add    rax,r14
  405f84:	add    rsp,0x8
  405f88:	pop    rbx
  405f89:	pop    r14
  405f8b:	ret    
  405f8c:	lea    rdi,[rip+0x8b8e]        # 40eb21 <flatcc_builder_padding_base@@Base+0x7c1>
  405f93:	lea    rsi,[rip+0x8648]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405f9a:	lea    rcx,[rip+0x8bac]        # 40eb4d <flatcc_builder_padding_base@@Base+0x7ed>
  405fa1:	mov    edx,0x3bd
  405fa6:	call   403060 <__assert_fail@plt>
  405fab:	lea    rdi,[rip+0x96f9]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  405fb2:	lea    rsi,[rip+0x8629]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405fb9:	lea    rcx,[rip+0x9706]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  405fc0:	mov    edx,0x37c
  405fc5:	call   403060 <__assert_fail@plt>
  405fca:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405fd0 <flatcc_builder_append_string@@Base>:
  405fd0:	push   r15
  405fd2:	push   r14
  405fd4:	push   r13
  405fd6:	push   r12
  405fd8:	push   rbx
  405fd9:	mov    rax,QWORD PTR [rdi+0x30]
  405fdd:	movzx  ecx,WORD PTR [rax+0xe]
  405fe1:	cmp    ecx,0x6
  405fe4:	jne    406091 <flatcc_builder_append_string@@Base+0xc1>
  405fea:	mov    r15,rdx
  405fed:	mov    ecx,DWORD PTR [rax+0x14]
  405ff0:	add    ecx,r15d
  405ff3:	jb     4060b0 <flatcc_builder_append_string@@Base+0xe0>
  405ff9:	mov    r14,rsi
  405ffc:	mov    rbx,rdi
  405fff:	mov    DWORD PTR [rax+0x14],ecx
  406002:	mov    r13d,DWORD PTR [rdi+0x20]
  406006:	lea    eax,[r15+r13*1]
  40600a:	mov    DWORD PTR [rdi+0x20],eax
  40600d:	cmp    eax,DWORD PTR [rdi+0x24]
  406010:	jae    40601d <flatcc_builder_append_string@@Base+0x4d>
  406012:	mov    r12,QWORD PTR [rbx+0x18]
  406016:	add    r12,r13
  406019:	jne    406076 <flatcc_builder_append_string@@Base+0xa6>
  40601b:	jmp    406040 <flatcc_builder_append_string@@Base+0x70>
  40601d:	add    eax,0x1
  406020:	lea    rsi,[rbx+0x68]
  406024:	mov    rdi,QWORD PTR [rbx+0x40]
  406028:	mov    edx,DWORD PTR [rbx+0x28]
  40602b:	add    rdx,rax
  40602e:	mov    ecx,0x1
  406033:	mov    r8d,0x1
  406039:	call   QWORD PTR [rbx+0x50]
  40603c:	test   eax,eax
  40603e:	je     406045 <flatcc_builder_append_string@@Base+0x75>
  406040:	xor    r12d,r12d
  406043:	jmp    406084 <flatcc_builder_append_string@@Base+0xb4>
  406045:	mov    eax,DWORD PTR [rbx+0x28]
  406048:	mov    r12,rax
  40604b:	add    r12,QWORD PTR [rbx+0x68]
  40604f:	mov    QWORD PTR [rbx+0x18],r12
  406053:	mov    ecx,DWORD PTR [rbx+0x70]
  406056:	sub    ecx,eax
  406058:	cmp    ecx,0xfffffffc
  40605b:	mov    eax,0xfffffffc
  406060:	cmovb  eax,ecx
  406063:	mov    DWORD PTR [rbx+0x24],eax
  406066:	mov    rax,QWORD PTR [rbx+0x30]
  40606a:	mov    DWORD PTR [rax+0x4],0xfffffffc
  406071:	add    r12,r13
  406074:	je     406040 <flatcc_builder_append_string@@Base+0x70>
  406076:	mov    edx,r15d
  406079:	mov    rdi,r12
  40607c:	mov    rsi,r14
  40607f:	call   4030b0 <memcpy@plt>
  406084:	mov    rax,r12
  406087:	pop    rbx
  406088:	pop    r12
  40608a:	pop    r13
  40608c:	pop    r14
  40608e:	pop    r15
  406090:	ret    
  406091:	lea    rdi,[rip+0x8a89]        # 40eb21 <flatcc_builder_padding_base@@Base+0x7c1>
  406098:	lea    rsi,[rip+0x8543]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40609f:	lea    rcx,[rip+0x8ae6]        # 40eb8c <flatcc_builder_padding_base@@Base+0x82c>
  4060a6:	mov    edx,0x3c6
  4060ab:	call   403060 <__assert_fail@plt>
  4060b0:	lea    rdi,[rip+0x95f4]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  4060b7:	lea    rsi,[rip+0x8524]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4060be:	lea    rcx,[rip+0x9601]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  4060c5:	mov    edx,0x37c
  4060ca:	call   403060 <__assert_fail@plt>
  4060cf:	nop

00000000004060d0 <flatcc_builder_append_string_str@@Base>:
  4060d0:	push   r14
  4060d2:	push   rbx
  4060d3:	push   rax
  4060d4:	mov    rbx,rsi
  4060d7:	mov    r14,rdi
  4060da:	mov    rdi,rsi
  4060dd:	call   403050 <strlen@plt>
  4060e2:	mov    rdi,r14
  4060e5:	mov    rsi,rbx
  4060e8:	mov    rdx,rax
  4060eb:	add    rsp,0x8
  4060ef:	pop    rbx
  4060f0:	pop    r14
  4060f2:	jmp    405fd0 <flatcc_builder_append_string@@Base>
  4060f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406100 <flatcc_builder_append_string_strn@@Base>:
  406100:	push   r15
  406102:	push   r14
  406104:	push   rbx
  406105:	mov    rbx,rdx
  406108:	mov    r14,rsi
  40610b:	mov    r15,rdi
  40610e:	xor    esi,esi
  406110:	mov    rdi,r14
  406113:	call   403080 <memchr@plt>
  406118:	mov    rcx,rax
  40611b:	sub    rcx,r14
  40611e:	test   rax,rax
  406121:	cmovne rbx,rcx
  406125:	mov    rdi,r15
  406128:	mov    rsi,r14
  40612b:	mov    rdx,rbx
  40612e:	pop    rbx
  40612f:	pop    r14
  406131:	pop    r15
  406133:	jmp    405fd0 <flatcc_builder_append_string@@Base>
  406138:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406140 <flatcc_builder_truncate_vector@@Base>:
  406140:	push   rax
  406141:	mov    rcx,QWORD PTR [rdi+0x30]
  406145:	movzx  edx,WORD PTR [rcx+0xe]
  406149:	cmp    edx,0x4
  40614c:	jne    406183 <flatcc_builder_truncate_vector@@Base+0x43>
  40614e:	mov    rax,rsi
  406151:	mov    edx,DWORD PTR [rcx+0x14]
  406154:	cmp    rdx,rsi
  406157:	jb     4061a2 <flatcc_builder_truncate_vector@@Base+0x62>
  406159:	sub    edx,eax
  40615b:	mov    DWORD PTR [rcx+0x14],edx
  40615e:	mov    rcx,QWORD PTR [rdi+0x30]
  406162:	imul   eax,DWORD PTR [rcx+0x10]
  406166:	mov    ecx,DWORD PTR [rdi+0x20]
  406169:	sub    ecx,eax
  40616b:	mov    DWORD PTR [rdi+0x20],ecx
  40616e:	add    rcx,QWORD PTR [rdi+0x18]
  406172:	xor    esi,esi
  406174:	mov    rdi,rcx
  406177:	mov    rdx,rax
  40617a:	call   403070 <memset@plt>
  40617f:	xor    eax,eax
  406181:	pop    rcx
  406182:	ret    
  406183:	lea    rdi,[rip+0x8795]        # 40e91f <flatcc_builder_padding_base@@Base+0x5bf>
  40618a:	lea    rsi,[rip+0x8451]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406191:	lea    rcx,[rip+0x8a41]        # 40ebd9 <flatcc_builder_padding_base@@Base+0x879>
  406198:	mov    edx,0x3d9
  40619d:	call   403060 <__assert_fail@plt>
  4061a2:	lea    rdi,[rip+0x8a6f]        # 40ec18 <flatcc_builder_padding_base@@Base+0x8b8>
  4061a9:	lea    rsi,[rip+0x8432]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4061b0:	lea    rcx,[rip+0x8a22]        # 40ebd9 <flatcc_builder_padding_base@@Base+0x879>
  4061b7:	mov    edx,0x3da
  4061bc:	call   403060 <__assert_fail@plt>
  4061c1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4061cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004061d0 <flatcc_builder_truncate_offset_vector@@Base>:
  4061d0:	push   rax
  4061d1:	mov    rcx,QWORD PTR [rdi+0x30]
  4061d5:	movzx  edx,WORD PTR [rcx+0xe]
  4061d9:	cmp    edx,0x5
  4061dc:	jne    406210 <flatcc_builder_truncate_offset_vector@@Base+0x40>
  4061de:	mov    rax,rsi
  4061e1:	mov    edx,DWORD PTR [rcx+0x14]
  4061e4:	sub    edx,eax
  4061e6:	jb     40622f <flatcc_builder_truncate_offset_vector@@Base+0x5f>
  4061e8:	mov    DWORD PTR [rcx+0x14],edx
  4061eb:	mov    rcx,QWORD PTR [rdi+0x30]
  4061ef:	imul   eax,DWORD PTR [rcx+0x10]
  4061f3:	mov    ecx,DWORD PTR [rdi+0x20]
  4061f6:	sub    ecx,eax
  4061f8:	mov    DWORD PTR [rdi+0x20],ecx
  4061fb:	add    rcx,QWORD PTR [rdi+0x18]
  4061ff:	xor    esi,esi
  406201:	mov    rdi,rcx
  406204:	mov    rdx,rax
  406207:	call   403070 <memset@plt>
  40620c:	xor    eax,eax
  40620e:	pop    rcx
  40620f:	ret    
  406210:	lea    rdi,[rip+0x8801]        # 40ea18 <flatcc_builder_padding_base@@Base+0x6b8>
  406217:	lea    rsi,[rip+0x83c4]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40621e:	lea    rcx,[rip+0x8a17]        # 40ec3c <flatcc_builder_padding_base@@Base+0x8dc>
  406225:	mov    edx,0x3e2
  40622a:	call   403060 <__assert_fail@plt>
  40622f:	lea    rdi,[rip+0x8a4c]        # 40ec82 <flatcc_builder_padding_base@@Base+0x922>
  406236:	lea    rsi,[rip+0x83a5]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40623d:	lea    rcx,[rip+0x89f8]        # 40ec3c <flatcc_builder_padding_base@@Base+0x8dc>
  406244:	mov    edx,0x3e3
  406249:	call   403060 <__assert_fail@plt>
  40624e:	xchg   ax,ax

0000000000406250 <flatcc_builder_truncate_string@@Base>:
  406250:	push   rax
  406251:	mov    rax,QWORD PTR [rdi+0x30]
  406255:	movzx  ecx,WORD PTR [rax+0xe]
  406259:	cmp    ecx,0x6
  40625c:	jne    406287 <flatcc_builder_truncate_string@@Base+0x37>
  40625e:	mov    ecx,DWORD PTR [rax+0x14]
  406261:	cmp    rcx,rsi
  406264:	jb     4062a6 <flatcc_builder_truncate_string@@Base+0x56>
  406266:	sub    ecx,esi
  406268:	mov    DWORD PTR [rax+0x14],ecx
  40626b:	mov    eax,DWORD PTR [rdi+0x20]
  40626e:	sub    eax,esi
  406270:	mov    DWORD PTR [rdi+0x20],eax
  406273:	add    rax,QWORD PTR [rdi+0x18]
  406277:	mov    edx,esi
  406279:	xor    esi,esi
  40627b:	mov    rdi,rax
  40627e:	call   403070 <memset@plt>
  406283:	xor    eax,eax
  406285:	pop    rcx
  406286:	ret    
  406287:	lea    rdi,[rip+0x8893]        # 40eb21 <flatcc_builder_padding_base@@Base+0x7c1>
  40628e:	lea    rsi,[rip+0x834d]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406295:	lea    rcx,[rip+0x8a21]        # 40ecbd <flatcc_builder_padding_base@@Base+0x95d>
  40629c:	mov    edx,0x3eb
  4062a1:	call   403060 <__assert_fail@plt>
  4062a6:	lea    rdi,[rip+0x8a4f]        # 40ecfc <flatcc_builder_padding_base@@Base+0x99c>
  4062ad:	lea    rsi,[rip+0x832e]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4062b4:	lea    rcx,[rip+0x8a02]        # 40ecbd <flatcc_builder_padding_base@@Base+0x95d>
  4062bb:	mov    edx,0x3ec
  4062c0:	call   403060 <__assert_fail@plt>
  4062c5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4062cf:	nop

00000000004062d0 <flatcc_builder_start_vector@@Base>:
  4062d0:	push   r15
  4062d2:	push   r14
  4062d4:	push   rbx
  4062d5:	mov    r14,rcx
  4062d8:	mov    r15,rsi
  4062db:	mov    rbx,rdi
  4062de:	cmp    edx,0x4
  4062e1:	mov    esi,0x4
  4062e6:	cmova  esi,edx
  4062e9:	call   405550 <flatcc_builder_start_buffer@@Base+0xe0>
  4062ee:	mov    ecx,eax
  4062f0:	mov    eax,0xffffffff
  4062f5:	test   ecx,ecx
  4062f7:	jne    406345 <flatcc_builder_start_vector@@Base+0x75>
  4062f9:	mov    rax,QWORD PTR [rbx+0x30]
  4062fd:	mov    DWORD PTR [rax+0x10],r15d
  406301:	mov    rax,QWORD PTR [rbx+0x30]
  406305:	mov    DWORD PTR [rax+0x14],0x0
  40630c:	mov    rax,QWORD PTR [rbx+0x30]
  406310:	mov    DWORD PTR [rax+0x18],r14d
  406314:	mov    rax,QWORD PTR [rbx+0x30]
  406318:	mov    WORD PTR [rax+0xe],0x4
  40631e:	mov    ecx,DWORD PTR [rbx+0x28]
  406321:	mov    edx,DWORD PTR [rbx+0x70]
  406324:	sub    edx,ecx
  406326:	add    rcx,QWORD PTR [rbx+0x68]
  40632a:	mov    QWORD PTR [rbx+0x18],rcx
  40632e:	cmp    edx,0xfffffffc
  406331:	mov    ecx,0xfffffffc
  406336:	cmovb  ecx,edx
  406339:	mov    DWORD PTR [rbx+0x24],ecx
  40633c:	mov    DWORD PTR [rax+0x4],0xfffffffc
  406343:	xor    eax,eax
  406345:	pop    rbx
  406346:	pop    r14
  406348:	pop    r15
  40634a:	ret    
  40634b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406350 <flatcc_builder_start_offset_vector@@Base>:
  406350:	push   rbx
  406351:	mov    rbx,rdi
  406354:	mov    esi,0x4
  406359:	call   405550 <flatcc_builder_start_buffer@@Base+0xe0>
  40635e:	mov    ecx,eax
  406360:	mov    eax,0xffffffff
  406365:	test   ecx,ecx
  406367:	je     40636b <flatcc_builder_start_offset_vector@@Base+0x1b>
  406369:	pop    rbx
  40636a:	ret    
  40636b:	mov    rax,QWORD PTR [rbx+0x30]
  40636f:	mov    DWORD PTR [rax+0x10],0x4
  406376:	mov    rax,QWORD PTR [rbx+0x30]
  40637a:	mov    DWORD PTR [rax+0x14],0x0
  406381:	mov    rax,QWORD PTR [rbx+0x30]
  406385:	mov    WORD PTR [rax+0xe],0x5
  40638b:	mov    ecx,DWORD PTR [rbx+0x28]
  40638e:	mov    edx,DWORD PTR [rbx+0x70]
  406391:	sub    edx,ecx
  406393:	add    rcx,QWORD PTR [rbx+0x68]
  406397:	mov    QWORD PTR [rbx+0x18],rcx
  40639b:	cmp    edx,0xfffffffc
  40639e:	mov    ecx,0xfffffffc
  4063a3:	cmovb  ecx,edx
  4063a6:	mov    DWORD PTR [rbx+0x24],ecx
  4063a9:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4063b0:	xor    eax,eax
  4063b2:	pop    rbx
  4063b3:	ret    
  4063b4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4063be:	xchg   ax,ax

00000000004063c0 <flatcc_builder_create_offset_vector@@Base>:
  4063c0:	push   r15
  4063c2:	push   r14
  4063c4:	push   r12
  4063c6:	push   rbx
  4063c7:	push   rax
  4063c8:	mov    r14,rdx
  4063cb:	mov    r15,rsi
  4063ce:	mov    rbx,rdi
  4063d1:	mov    esi,0x4
  4063d6:	call   405550 <flatcc_builder_start_buffer@@Base+0xe0>
  4063db:	test   eax,eax
  4063dd:	je     4063ed <flatcc_builder_create_offset_vector@@Base+0x2d>
  4063df:	xor    eax,eax
  4063e1:	add    rsp,0x8
  4063e5:	pop    rbx
  4063e6:	pop    r12
  4063e8:	pop    r14
  4063ea:	pop    r15
  4063ec:	ret    
  4063ed:	mov    rax,QWORD PTR [rbx+0x30]
  4063f1:	mov    DWORD PTR [rax+0x10],0x4
  4063f8:	mov    rax,QWORD PTR [rbx+0x30]
  4063fc:	mov    DWORD PTR [rax+0x14],0x0
  406403:	mov    rax,QWORD PTR [rbx+0x30]
  406407:	mov    WORD PTR [rax+0xe],0x5
  40640d:	mov    ecx,DWORD PTR [rbx+0x28]
  406410:	mov    edx,DWORD PTR [rbx+0x70]
  406413:	sub    edx,ecx
  406415:	add    rcx,QWORD PTR [rbx+0x68]
  406419:	mov    QWORD PTR [rbx+0x18],rcx
  40641d:	cmp    edx,0xfffffffc
  406420:	mov    ecx,0xfffffffc
  406425:	cmovb  ecx,edx
  406428:	mov    DWORD PTR [rbx+0x24],ecx
  40642b:	mov    DWORD PTR [rax+0x4],0xfffffffc
  406432:	mov    ecx,DWORD PTR [rax+0x14]
  406435:	add    ecx,r14d
  406438:	jb     4064e9 <flatcc_builder_create_offset_vector@@Base+0x129>
  40643e:	cmp    ecx,0x40000000
  406444:	jae    4064e9 <flatcc_builder_create_offset_vector@@Base+0x129>
  40644a:	mov    DWORD PTR [rax+0x14],ecx
  40644d:	mov    r12d,DWORD PTR [rbx+0x20]
  406451:	lea    eax,[r12+r14*4]
  406455:	mov    DWORD PTR [rbx+0x20],eax
  406458:	cmp    eax,DWORD PTR [rbx+0x24]
  40645b:	jae    40646b <flatcc_builder_create_offset_vector@@Base+0xab>
  40645d:	mov    rdi,QWORD PTR [rbx+0x18]
  406461:	add    rdi,r12
  406464:	jne    4064c7 <flatcc_builder_create_offset_vector@@Base+0x107>
  406466:	jmp    4063df <flatcc_builder_create_offset_vector@@Base+0x1f>
  40646b:	add    eax,0x1
  40646e:	lea    rsi,[rbx+0x68]
  406472:	mov    rdi,QWORD PTR [rbx+0x40]
  406476:	mov    edx,DWORD PTR [rbx+0x28]
  406479:	add    rdx,rax
  40647c:	mov    ecx,0x1
  406481:	mov    r8d,0x1
  406487:	call   QWORD PTR [rbx+0x50]
  40648a:	test   eax,eax
  40648c:	jne    4063df <flatcc_builder_create_offset_vector@@Base+0x1f>
  406492:	mov    eax,DWORD PTR [rbx+0x28]
  406495:	mov    rdi,rax
  406498:	add    rdi,QWORD PTR [rbx+0x68]
  40649c:	mov    QWORD PTR [rbx+0x18],rdi
  4064a0:	mov    ecx,DWORD PTR [rbx+0x70]
  4064a3:	sub    ecx,eax
  4064a5:	cmp    ecx,0xfffffffc
  4064a8:	mov    eax,0xfffffffc
  4064ad:	cmovb  eax,ecx
  4064b0:	mov    DWORD PTR [rbx+0x24],eax
  4064b3:	mov    rax,QWORD PTR [rbx+0x30]
  4064b7:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4064be:	add    rdi,r12
  4064c1:	je     4063df <flatcc_builder_create_offset_vector@@Base+0x1f>
  4064c7:	shl    r14,0x2
  4064cb:	mov    rsi,r15
  4064ce:	mov    rdx,r14
  4064d1:	call   4030b0 <memcpy@plt>
  4064d6:	mov    rdi,rbx
  4064d9:	add    rsp,0x8
  4064dd:	pop    rbx
  4064de:	pop    r12
  4064e0:	pop    r14
  4064e2:	pop    r15
  4064e4:	jmp    406510 <flatcc_builder_end_offset_vector@@Base>
  4064e9:	lea    rdi,[rip+0x91bb]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  4064f0:	lea    rsi,[rip+0x80eb]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4064f7:	lea    rcx,[rip+0x91c8]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  4064fe:	mov    edx,0x37c
  406503:	call   403060 <__assert_fail@plt>
  406508:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406510 <flatcc_builder_end_offset_vector@@Base>:
  406510:	push   rbp
  406511:	push   rbx
  406512:	push   rax
  406513:	mov    rax,QWORD PTR [rdi+0x30]
  406517:	movzx  ecx,WORD PTR [rax+0xe]
  40651b:	cmp    ecx,0x5
  40651e:	jne    4065ad <flatcc_builder_end_offset_vector@@Base+0x9d>
  406524:	mov    rbx,rdi
  406527:	mov    rsi,QWORD PTR [rdi+0x18]
  40652b:	mov    edx,DWORD PTR [rax+0x14]
  40652e:	xor    ecx,ecx
  406530:	call   407560 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  406535:	mov    ebp,eax
  406537:	test   eax,eax
  406539:	je     4065a4 <flatcc_builder_end_offset_vector@@Base+0x94>
  40653b:	mov    rdi,QWORD PTR [rbx+0x18]
  40653f:	mov    edx,DWORD PTR [rbx+0x20]
  406542:	xor    esi,esi
  406544:	call   403070 <memset@plt>
  406549:	mov    rax,QWORD PTR [rbx+0x30]
  40654d:	mov    ecx,DWORD PTR [rax+0x8]
  406550:	mov    DWORD PTR [rbx+0x20],ecx
  406553:	mov    ecx,DWORD PTR [rax]
  406555:	mov    DWORD PTR [rbx+0x28],ecx
  406558:	mov    edx,DWORD PTR [rax+0x4]
  40655b:	mov    rsi,rcx
  40655e:	add    rsi,QWORD PTR [rbx+0x68]
  406562:	mov    QWORD PTR [rbx+0x18],rsi
  406566:	mov    esi,DWORD PTR [rbx+0x70]
  406569:	sub    esi,ecx
  40656b:	cmp    esi,edx
  40656d:	cmova  esi,edx
  406570:	mov    DWORD PTR [rbx+0x24],esi
  406573:	movzx  ecx,WORD PTR [rbx+0xea]
  40657a:	cmp    WORD PTR [rbx+0xe8],cx
  406581:	jae    40658a <flatcc_builder_end_offset_vector@@Base+0x7a>
  406583:	mov    WORD PTR [rbx+0xe8],cx
  40658a:	movzx  ecx,WORD PTR [rax+0xc]
  40658e:	mov    WORD PTR [rbx+0xea],cx
  406595:	add    rax,0xffffffffffffffdc
  406599:	mov    QWORD PTR [rbx+0x30],rax
  40659d:	add    DWORD PTR [rbx+0x104],0xffffffff
  4065a4:	mov    eax,ebp
  4065a6:	add    rsp,0x8
  4065aa:	pop    rbx
  4065ab:	pop    rbp
  4065ac:	ret    
  4065ad:	lea    rdi,[rip+0x8464]        # 40ea18 <flatcc_builder_padding_base@@Base+0x6b8>
  4065b4:	lea    rsi,[rip+0x8027]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4065bb:	lea    rcx,[rip+0x8a85]        # 40f047 <flatcc_builder_padding_base@@Base+0xce7>
  4065c2:	mov    edx,0x5c8
  4065c7:	call   403060 <__assert_fail@plt>
  4065cc:	nop    DWORD PTR [rax+0x0]

00000000004065d0 <flatcc_builder_start_string@@Base>:
  4065d0:	push   rbx
  4065d1:	mov    rbx,rdi
  4065d4:	mov    esi,0x1
  4065d9:	call   405550 <flatcc_builder_start_buffer@@Base+0xe0>
  4065de:	mov    ecx,eax
  4065e0:	mov    eax,0xffffffff
  4065e5:	test   ecx,ecx
  4065e7:	je     4065eb <flatcc_builder_start_string@@Base+0x1b>
  4065e9:	pop    rbx
  4065ea:	ret    
  4065eb:	mov    rax,QWORD PTR [rbx+0x30]
  4065ef:	mov    DWORD PTR [rax+0x10],0x1
  4065f6:	mov    rax,QWORD PTR [rbx+0x30]
  4065fa:	mov    DWORD PTR [rax+0x14],0x0
  406601:	mov    rax,QWORD PTR [rbx+0x30]
  406605:	mov    WORD PTR [rax+0xe],0x6
  40660b:	mov    ecx,DWORD PTR [rbx+0x28]
  40660e:	mov    edx,DWORD PTR [rbx+0x70]
  406611:	sub    edx,ecx
  406613:	add    rcx,QWORD PTR [rbx+0x68]
  406617:	mov    QWORD PTR [rbx+0x18],rcx
  40661b:	cmp    edx,0xfffffffc
  40661e:	mov    ecx,0xfffffffc
  406623:	cmovb  ecx,edx
  406626:	mov    DWORD PTR [rbx+0x24],ecx
  406629:	mov    DWORD PTR [rax+0x4],0xfffffffc
  406630:	xor    eax,eax
  406632:	pop    rbx
  406633:	ret    
  406634:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40663e:	xchg   ax,ax

0000000000406640 <flatcc_builder_reserve_table@@Base>:
  406640:	push   r15
  406642:	push   r14
  406644:	push   rbx
  406645:	test   esi,esi
  406647:	js     4066f4 <flatcc_builder_reserve_table@@Base+0xb4>
  40664d:	mov    r14d,esi
  406650:	mov    r15,rdi
  406653:	mov    rax,QWORD PTR [rdi+0x30]
  406657:	movzx  ebx,WORD PTR [rax+0x1c]
  40665b:	add    ebx,ebx
  40665d:	add    ebx,DWORD PTR [rax+0x10]
  406660:	lea    edx,[r14+r14*1]
  406664:	add    edx,0x4
  406667:	add    rdx,rbx
  40666a:	cmp    rdx,QWORD PTR [rdi+0x60]
  40666e:	jbe    40668c <flatcc_builder_reserve_table@@Base+0x4c>
  406670:	lea    rsi,[r15+0x58]
  406674:	mov    rdi,QWORD PTR [r15+0x40]
  406678:	mov    ecx,0x1
  40667d:	xor    r8d,r8d
  406680:	call   QWORD PTR [r15+0x50]
  406684:	test   eax,eax
  406686:	jne    406713 <flatcc_builder_reserve_table@@Base+0xd3>
  40668c:	add    rbx,QWORD PTR [r15+0x58]
  406690:	mov    QWORD PTR [r15+0x8],rbx
  406694:	je     4066e9 <flatcc_builder_reserve_table@@Base+0xa9>
  406696:	add    r14d,r14d
  406699:	add    rbx,0x4
  40669d:	mov    QWORD PTR [r15+0x8],rbx
  4066a1:	mov    rax,QWORD PTR [r15+0x30]
  4066a5:	mov    ebx,DWORD PTR [rax+0x14]
  4066a8:	or     r14d,0x1
  4066ac:	add    r14,rbx
  4066af:	cmp    r14,QWORD PTR [r15+0x90]
  4066b6:	jbe    4066d6 <flatcc_builder_reserve_table@@Base+0x96>
  4066b8:	lea    rsi,[r15+0x88]
  4066bf:	mov    rdi,QWORD PTR [r15+0x40]
  4066c3:	xor    ecx,ecx
  4066c5:	mov    r8d,0x3
  4066cb:	mov    rdx,r14
  4066ce:	call   QWORD PTR [r15+0x50]
  4066d2:	test   eax,eax
  4066d4:	jne    406713 <flatcc_builder_reserve_table@@Base+0xd3>
  4066d6:	xor    eax,eax
  4066d8:	add    rbx,QWORD PTR [r15+0x88]
  4066df:	mov    QWORD PTR [r15],rbx
  4066e2:	sete   al
  4066e5:	neg    eax
  4066e7:	jmp    4066ee <flatcc_builder_reserve_table@@Base+0xae>
  4066e9:	mov    eax,0xffffffff
  4066ee:	pop    rbx
  4066ef:	pop    r14
  4066f1:	pop    r15
  4066f3:	ret    
  4066f4:	lea    rdi,[rip+0x8664]        # 40ed5f <flatcc_builder_padding_base@@Base+0x9ff>
  4066fb:	lea    rsi,[rip+0x7ee0]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406702:	lea    rcx,[rip+0x8615]        # 40ed1e <flatcc_builder_padding_base@@Base+0x9be>
  406709:	mov    edx,0x429
  40670e:	call   403060 <__assert_fail@plt>
  406713:	lea    rdi,[rip+0x9088]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  40671a:	lea    rsi,[rip+0x7ec1]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406721:	lea    rcx,[rip+0x8eb4]        # 40f5dc <flatcc_builder_padding_base@@Base+0x127c>
  406728:	mov    edx,0x134
  40672d:	call   403060 <__assert_fail@plt>
  406732:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40673c:	nop    DWORD PTR [rax+0x0]

0000000000406740 <flatcc_builder_start_table@@Base>:
  406740:	push   rbp
  406741:	push   r15
  406743:	push   r14
  406745:	push   rbx
  406746:	push   rax
  406747:	mov    r15d,esi
  40674a:	mov    rbx,rdi
  40674d:	mov    esi,0x4
  406752:	call   405550 <flatcc_builder_start_buffer@@Base+0xe0>
  406757:	mov    r14d,0xffffffff
  40675d:	test   eax,eax
  40675f:	je     40676f <flatcc_builder_start_table@@Base+0x2f>
  406761:	mov    eax,r14d
  406764:	add    rsp,0x8
  406768:	pop    rbx
  406769:	pop    r14
  40676b:	pop    r15
  40676d:	pop    rbp
  40676e:	ret    
  40676f:	mov    eax,DWORD PTR [rbx+0x8]
  406772:	sub    eax,DWORD PTR [rbx+0x58]
  406775:	mov    rcx,QWORD PTR [rbx+0x30]
  406779:	mov    DWORD PTR [rcx+0x10],eax
  40677c:	mov    eax,DWORD PTR [rbx]
  40677e:	sub    eax,DWORD PTR [rbx+0x88]
  406784:	mov    rcx,QWORD PTR [rbx+0x30]
  406788:	mov    DWORD PTR [rcx+0x14],eax
  40678b:	mov    eax,DWORD PTR [rbx+0x14]
  40678e:	mov    rcx,QWORD PTR [rbx+0x30]
  406792:	mov    DWORD PTR [rcx+0x18],eax
  406795:	movzx  eax,WORD PTR [rbx+0x10]
  406799:	mov    rcx,QWORD PTR [rbx+0x30]
  40679d:	mov    WORD PTR [rcx+0x1c],ax
  4067a1:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  4067a8:	mov    WORD PTR [rbx+0x10],0x0
  4067ae:	mov    rax,QWORD PTR [rbx+0x30]
  4067b2:	mov    WORD PTR [rax+0xe],0x3
  4067b8:	movzx  ebp,WORD PTR [rax+0x1c]
  4067bc:	add    ebp,ebp
  4067be:	add    ebp,DWORD PTR [rax+0x10]
  4067c1:	lea    edx,[r15+r15*1]
  4067c5:	add    edx,0x4
  4067c8:	add    rdx,rbp
  4067cb:	cmp    rdx,QWORD PTR [rbx+0x60]
  4067cf:	jbe    4067ec <flatcc_builder_start_table@@Base+0xac>
  4067d1:	lea    rsi,[rbx+0x58]
  4067d5:	mov    rdi,QWORD PTR [rbx+0x40]
  4067d9:	mov    ecx,0x1
  4067de:	xor    r8d,r8d
  4067e1:	call   QWORD PTR [rbx+0x50]
  4067e4:	test   eax,eax
  4067e6:	jne    406880 <flatcc_builder_start_table@@Base+0x140>
  4067ec:	add    rbp,QWORD PTR [rbx+0x58]
  4067f0:	mov    QWORD PTR [rbx+0x8],rbp
  4067f4:	je     406761 <flatcc_builder_start_table@@Base+0x21>
  4067fa:	add    r15d,r15d
  4067fd:	add    rbp,0x4
  406801:	mov    QWORD PTR [rbx+0x8],rbp
  406805:	mov    rax,QWORD PTR [rbx+0x30]
  406809:	mov    ebp,DWORD PTR [rax+0x14]
  40680c:	or     r15d,0x1
  406810:	add    r15,rbp
  406813:	cmp    r15,QWORD PTR [rbx+0x90]
  40681a:	jbe    406839 <flatcc_builder_start_table@@Base+0xf9>
  40681c:	lea    rsi,[rbx+0x88]
  406823:	mov    rdi,QWORD PTR [rbx+0x40]
  406827:	xor    ecx,ecx
  406829:	mov    r8d,0x3
  40682f:	mov    rdx,r15
  406832:	call   QWORD PTR [rbx+0x50]
  406835:	test   eax,eax
  406837:	jne    406880 <flatcc_builder_start_table@@Base+0x140>
  406839:	add    rbp,QWORD PTR [rbx+0x88]
  406840:	mov    QWORD PTR [rbx],rbp
  406843:	je     406761 <flatcc_builder_start_table@@Base+0x21>
  406849:	mov    eax,DWORD PTR [rbx+0x28]
  40684c:	mov    rcx,rax
  40684f:	add    rcx,QWORD PTR [rbx+0x68]
  406853:	mov    QWORD PTR [rbx+0x18],rcx
  406857:	mov    ecx,DWORD PTR [rbx+0x70]
  40685a:	sub    ecx,eax
  40685c:	cmp    ecx,0xfffc
  406862:	mov    eax,0xfffc
  406867:	cmovb  eax,ecx
  40686a:	mov    DWORD PTR [rbx+0x24],eax
  40686d:	mov    rax,QWORD PTR [rbx+0x30]
  406871:	mov    DWORD PTR [rax+0x4],0xfffc
  406878:	xor    r14d,r14d
  40687b:	jmp    406761 <flatcc_builder_start_table@@Base+0x21>
  406880:	lea    rdi,[rip+0x8f1b]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  406887:	lea    rsi,[rip+0x7d54]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40688e:	lea    rcx,[rip+0x8d47]        # 40f5dc <flatcc_builder_padding_base@@Base+0x127c>
  406895:	mov    edx,0x134
  40689a:	call   403060 <__assert_fail@plt>
  40689f:	nop

00000000004068a0 <flatcc_builder_create_vtable@@Base>:
  4068a0:	push   r14
  4068a2:	push   rbx
  4068a3:	sub    rsp,0x98
  4068aa:	mov    r14,rdi
  4068ad:	mov    QWORD PTR [rsp+0x8],0x0
  4068b6:	mov    DWORD PTR [rsp+0x10],0x0
  4068be:	test   dx,dx
  4068c1:	je     406927 <flatcc_builder_create_vtable@@Base+0x87>
  4068c3:	movzx  r8d,dx
  4068c7:	mov    QWORD PTR [rsp+0x8],r8
  4068cc:	mov    QWORD PTR [rsp+0x18],rsi
  4068d1:	mov    QWORD PTR [rsp+0x20],r8
  4068d6:	mov    DWORD PTR [rsp+0x10],0x1
  4068de:	mov    edx,0x1
  4068e3:	cmp    DWORD PTR [r14+0x100],0x0
  4068eb:	jne    406936 <flatcc_builder_create_vtable@@Base+0x96>
  4068ed:	cmp    DWORD PTR [r14+0x124],0x0
  4068f5:	jne    406936 <flatcc_builder_create_vtable@@Base+0x96>
  4068f7:	mov    ebx,DWORD PTR [r14+0xf4]
  4068fe:	lea    eax,[r8+rbx*1]
  406902:	mov    DWORD PTR [r14+0xf4],eax
  406909:	mov    rdi,QWORD PTR [r14+0x38]
  40690d:	lea    rsi,[rsp+0x18]
  406912:	mov    ecx,ebx
  406914:	call   QWORD PTR [r14+0x48]
  406918:	test   eax,eax
  40691a:	jne    4069cb <flatcc_builder_create_vtable@@Base+0x12b>
  406920:	add    ebx,0x1
  406923:	jne    406980 <flatcc_builder_create_vtable@@Base+0xe0>
  406925:	jmp    40697e <flatcc_builder_create_vtable@@Base+0xde>
  406927:	xor    edx,edx
  406929:	xor    r8d,r8d
  40692c:	cmp    DWORD PTR [r14+0x100],0x0
  406934:	je     4068ed <flatcc_builder_create_vtable@@Base+0x4d>
  406936:	cmp    r8,0x11
  40693a:	setb   al
  40693d:	lea    rcx,[r8-0x10]
  406941:	shr    rcx,0x20
  406945:	sete   cl
  406948:	test   r8d,r8d
  40694b:	je     40698d <flatcc_builder_create_vtable@@Base+0xed>
  40694d:	or     al,cl
  40694f:	je     40698d <flatcc_builder_create_vtable@@Base+0xed>
  406951:	mov    ebx,DWORD PTR [r14+0xf0]
  406958:	sub    ebx,r8d
  40695b:	mov    rdi,QWORD PTR [r14+0x38]
  40695f:	lea    rsi,[rsp+0x18]
  406964:	mov    ecx,ebx
  406966:	call   QWORD PTR [r14+0x48]
  40696a:	test   eax,eax
  40696c:	jne    4069ac <flatcc_builder_create_vtable@@Base+0x10c>
  40696e:	mov    DWORD PTR [r14+0xf0],ebx
  406975:	test   ebx,ebx
  406977:	je     40697e <flatcc_builder_create_vtable@@Base+0xde>
  406979:	add    ebx,0x1
  40697c:	jmp    406980 <flatcc_builder_create_vtable@@Base+0xe0>
  40697e:	xor    ebx,ebx
  406980:	mov    eax,ebx
  406982:	add    rsp,0x98
  406989:	pop    rbx
  40698a:	pop    r14
  40698c:	ret    
  40698d:	lea    rdi,[rip+0x8e0e]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  406994:	lea    rsi,[rip+0x7c47]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40699b:	lea    rcx,[rip+0x8cbf]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  4069a2:	mov    edx,0x287
  4069a7:	call   403060 <__assert_fail@plt>
  4069ac:	lea    rdi,[rip+0x8def]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  4069b3:	lea    rsi,[rip+0x7c28]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4069ba:	lea    rcx,[rip+0x8ca0]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  4069c1:	mov    edx,0x28b
  4069c6:	call   403060 <__assert_fail@plt>
  4069cb:	lea    rdi,[rip+0x8dd0]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  4069d2:	lea    rsi,[rip+0x7c09]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4069d9:	lea    rcx,[rip+0x8d3d]        # 40f71d <flatcc_builder_padding_base@@Base+0x13bd>
  4069e0:	mov    edx,0x2a5
  4069e5:	call   403060 <__assert_fail@plt>
  4069ea:	nop    WORD PTR [rax+rax*1+0x0]

00000000004069f0 <flatcc_builder_create_cached_vtable@@Base>:
  4069f0:	push   rbp
  4069f1:	push   r15
  4069f3:	push   r14
  4069f5:	push   r13
  4069f7:	push   r12
  4069f9:	push   rbx
  4069fa:	sub    rsp,0x28
  4069fe:	mov    r15d,ecx
  406a01:	mov    r8d,edx
  406a04:	mov    QWORD PTR [rsp+0x18],rsi
  406a09:	mov    r13,rdi
  406a0c:	mov    rax,QWORD PTR [rdi+0xd8]
  406a13:	test   rax,rax
  406a16:	je     406aea <flatcc_builder_create_cached_vtable@@Base+0xfa>
  406a1c:	mov    ecx,0x20
  406a21:	sub    ecx,eax
  406a23:	shrx   r15d,r15d,ecx
  406a28:	shl    r15,0x2
  406a2c:	add    r15,QWORD PTR [r13+0xa8]
  406a33:	je     406bba <flatcc_builder_create_cached_vtable@@Base+0x1ca>
  406a39:	mov    ebp,DWORD PTR [r15]
  406a3c:	test   ebp,ebp
  406a3e:	je     406bc2 <flatcc_builder_create_cached_vtable@@Base+0x1d2>
  406a44:	mov    rbx,QWORD PTR [r13+0x78]
  406a48:	mov    QWORD PTR [rsp+0x10],r13
  406a4d:	mov    r13,QWORD PTR [r13+0xb8]
  406a54:	movzx  eax,r8w
  406a58:	mov    QWORD PTR [rsp+0x20],rax
  406a5d:	xor    eax,eax
  406a5f:	mov    QWORD PTR [rsp],rax
  406a63:	mov    QWORD PTR [rsp+0x8],r15
  406a68:	mov    r14,r15
  406a6b:	nop    DWORD PTR [rax+rax*1+0x0]
  406a70:	mov    eax,ebp
  406a72:	lea    r15,[rax+r13*1]
  406a76:	mov    esi,DWORD PTR [r13+rax*1+0x8]
  406a7b:	cmp    WORD PTR [rbx+rsi*1],r8w
  406a80:	jne    406a9e <flatcc_builder_create_cached_vtable@@Base+0xae>
  406a82:	add    rsi,rbx
  406a85:	mov    rdi,QWORD PTR [rsp+0x18]
  406a8a:	mov    rdx,QWORD PTR [rsp+0x20]
  406a8f:	mov    r12d,r8d
  406a92:	call   403090 <memcmp@plt>
  406a97:	mov    r8d,r12d
  406a9a:	test   eax,eax
  406a9c:	je     406aaf <flatcc_builder_create_cached_vtable@@Base+0xbf>
  406a9e:	mov    ebp,DWORD PTR [r15+0xc]
  406aa2:	add    r15,0xc
  406aa6:	mov    r14,r15
  406aa9:	test   ebp,ebp
  406aab:	jne    406a70 <flatcc_builder_create_cached_vtable@@Base+0x80>
  406aad:	jmp    406adb <flatcc_builder_create_cached_vtable@@Base+0xeb>
  406aaf:	mov    eax,DWORD PTR [r15+0x4]
  406ab3:	mov    rcx,QWORD PTR [rsp+0x10]
  406ab8:	cmp    eax,DWORD PTR [rcx+0x100]
  406abe:	je     406d24 <flatcc_builder_create_cached_vtable@@Base+0x334>
  406ac4:	lea    r14,[r15+0xc]
  406ac8:	mov    ebp,DWORD PTR [r15+0xc]
  406acc:	mov    rax,r15
  406acf:	mov    QWORD PTR [rsp],r15
  406ad3:	test   ebp,ebp
  406ad5:	jne    406a70 <flatcc_builder_create_cached_vtable@@Base+0x80>
  406ad7:	mov    QWORD PTR [rsp],r15
  406adb:	mov    r13,QWORD PTR [rsp+0x10]
  406ae0:	mov    r15,QWORD PTR [rsp+0x8]
  406ae5:	jmp    406bc8 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
  406aea:	cmp    DWORD PTR [r13+0xe4],0x0
  406af2:	jne    406d61 <flatcc_builder_create_cached_vtable@@Base+0x371>
  406af8:	lea    rbx,[r13+0xb8]
  406aff:	cmp    QWORD PTR [r13+0xc0],0xf
  406b07:	ja     406b2f <flatcc_builder_create_cached_vtable@@Base+0x13f>
  406b09:	mov    rdi,QWORD PTR [r13+0x40]
  406b0d:	mov    edx,0x10
  406b12:	xor    ecx,ecx
  406b14:	mov    ebp,r8d
  406b17:	mov    r8d,0x6
  406b1d:	mov    rsi,rbx
  406b20:	call   QWORD PTR [r13+0x50]
  406b24:	mov    r8d,ebp
  406b27:	test   eax,eax
  406b29:	jne    406d42 <flatcc_builder_create_cached_vtable@@Base+0x352>
  406b2f:	xor    r12d,r12d
  406b32:	cmp    QWORD PTR [rbx],0x0
  406b36:	je     406d0a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406b3c:	mov    ebx,r8d
  406b3f:	lea    rsi,[r13+0xa8]
  406b46:	mov    DWORD PTR [r13+0xe4],0x10
  406b51:	mov    rdi,QWORD PTR [r13+0x40]
  406b55:	mov    edx,0x100
  406b5a:	mov    ecx,0x1
  406b5f:	mov    r8d,0x5
  406b65:	call   QWORD PTR [r13+0x50]
  406b69:	test   eax,eax
  406b6b:	jne    406d0a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406b71:	mov    rax,QWORD PTR [r13+0xb0]
  406b78:	mov    edx,0x100
  406b7d:	nop    DWORD PTR [rax]
  406b80:	mov    rcx,rdx
  406b83:	lea    rdx,[rdx+rdx*1]
  406b87:	cmp    rdx,rax
  406b8a:	jbe    406b80 <flatcc_builder_create_cached_vtable@@Base+0x190>
  406b8c:	shr    rcx,0x2
  406b90:	mov    rax,0xffffffffffffffff
  406b97:	mov    edx,0x1
  406b9c:	mov    r8d,ebx
  406b9f:	nop
  406ba0:	add    rax,0x1
  406ba4:	shlx   rsi,rdx,rax
  406ba9:	cmp    rsi,rcx
  406bac:	jb     406ba0 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  406bae:	mov    QWORD PTR [r13+0xd8],rax
  406bb5:	jmp    406a1c <flatcc_builder_create_cached_vtable@@Base+0x2c>
  406bba:	xor    r12d,r12d
  406bbd:	jmp    406d0a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406bc2:	xor    eax,eax
  406bc4:	mov    QWORD PTR [rsp],rax
  406bc8:	mov    ebp,DWORD PTR [r13+0xe4]
  406bcf:	lea    rbx,[r13+0xb8]
  406bd6:	lea    rdx,[rbp+0x10]
  406bda:	cmp    rdx,QWORD PTR [r13+0xc0]
  406be1:	jbe    406c04 <flatcc_builder_create_cached_vtable@@Base+0x214>
  406be3:	mov    rdi,QWORD PTR [r13+0x40]
  406be7:	xor    ecx,ecx
  406be9:	mov    r14d,r8d
  406bec:	mov    r8d,0x6
  406bf2:	mov    rsi,rbx
  406bf5:	call   QWORD PTR [r13+0x50]
  406bf9:	mov    r8d,r14d
  406bfc:	test   eax,eax
  406bfe:	jne    406d42 <flatcc_builder_create_cached_vtable@@Base+0x352>
  406c04:	xor    r12d,r12d
  406c07:	add    rbp,QWORD PTR [rbx]
  406c0a:	je     406d0a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406c10:	mov    eax,DWORD PTR [r13+0xe4]
  406c17:	mov    ecx,DWORD PTR [r13+0x100]
  406c1e:	lea    edx,[rax+0x10]
  406c21:	mov    DWORD PTR [r13+0xe4],edx
  406c28:	mov    DWORD PTR [rbp+0x4],ecx
  406c2b:	mov    ecx,DWORD PTR [r15]
  406c2e:	mov    DWORD PTR [rbp+0xc],ecx
  406c31:	mov    DWORD PTR [r15],eax
  406c34:	movzx  ebx,r8w
  406c38:	mov    rdi,r13
  406c3b:	mov    rsi,QWORD PTR [rsp+0x18]
  406c40:	mov    edx,ebx
  406c42:	call   4068a0 <flatcc_builder_create_vtable@@Base>
  406c47:	mov    DWORD PTR [rbp+0x0],eax
  406c4a:	test   eax,eax
  406c4c:	je     406d0a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406c52:	mov    rax,QWORD PTR [rsp]
  406c56:	test   rax,rax
  406c59:	je     406c66 <flatcc_builder_create_cached_vtable@@Base+0x276>
  406c5b:	mov    eax,DWORD PTR [rax+0x8]
  406c5e:	mov    DWORD PTR [rbp+0x8],eax
  406c61:	jmp    406d06 <flatcc_builder_create_cached_vtable@@Base+0x316>
  406c66:	mov    rax,QWORD PTR [r13+0x118]
  406c6d:	mov    r14d,DWORD PTR [r13+0xe0]
  406c74:	test   rax,rax
  406c77:	je     406cb4 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
  406c79:	lea    ecx,[r14+rbx*1]
  406c7d:	cmp    rax,rcx
  406c80:	jae    406cb4 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
  406c82:	cmp    QWORD PTR [r13+0xd8],0x0
  406c8a:	je     406d06 <flatcc_builder_create_cached_vtable@@Base+0x316>
  406c8c:	mov    rdi,QWORD PTR [r13+0xa8]
  406c93:	mov    rdx,QWORD PTR [r13+0xb0]
  406c9a:	xor    esi,esi
  406c9c:	call   403070 <memset@plt>
  406ca1:	movabs rax,0x1000000000
  406cab:	mov    QWORD PTR [r13+0xe0],rax
  406cb2:	jmp    406d06 <flatcc_builder_create_cached_vtable@@Base+0x316>
  406cb4:	lea    r15,[r13+0x78]
  406cb8:	lea    rdx,[r14+rbx*1]
  406cbc:	cmp    rdx,QWORD PTR [r13+0x80]
  406cc3:	jbe    406cdc <flatcc_builder_create_cached_vtable@@Base+0x2ec>
  406cc5:	mov    rdi,QWORD PTR [r13+0x40]
  406cc9:	xor    ecx,ecx
  406ccb:	mov    r8d,0x2
  406cd1:	mov    rsi,r15
  406cd4:	call   QWORD PTR [r13+0x50]
  406cd8:	test   eax,eax
  406cda:	jne    406d42 <flatcc_builder_create_cached_vtable@@Base+0x352>
  406cdc:	add    r14,QWORD PTR [r15]
  406cdf:	je     406d1c <flatcc_builder_create_cached_vtable@@Base+0x32c>
  406ce1:	mov    eax,DWORD PTR [r13+0xe0]
  406ce8:	mov    DWORD PTR [rbp+0x8],eax
  406ceb:	mov    ecx,ebx
  406ced:	add    ecx,eax
  406cef:	mov    DWORD PTR [r13+0xe0],ecx
  406cf6:	mov    rdi,r14
  406cf9:	mov    rsi,QWORD PTR [rsp+0x18]
  406cfe:	mov    rdx,rbx
  406d01:	call   4030b0 <memcpy@plt>
  406d06:	mov    r12d,DWORD PTR [rbp+0x0]
  406d0a:	mov    eax,r12d
  406d0d:	add    rsp,0x28
  406d11:	pop    rbx
  406d12:	pop    r12
  406d14:	pop    r13
  406d16:	pop    r14
  406d18:	pop    r15
  406d1a:	pop    rbp
  406d1b:	ret    
  406d1c:	mov    r12d,0xffffffff
  406d22:	jmp    406d0a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406d24:	mov    rcx,QWORD PTR [rsp+0x8]
  406d29:	cmp    r14,rcx
  406d2c:	je     406d3d <flatcc_builder_create_cached_vtable@@Base+0x34d>
  406d2e:	mov    eax,DWORD PTR [r15+0xc]
  406d32:	mov    DWORD PTR [r14],eax
  406d35:	mov    eax,DWORD PTR [rcx]
  406d37:	mov    DWORD PTR [r15+0xc],eax
  406d3b:	mov    DWORD PTR [rcx],ebp
  406d3d:	mov    r12d,DWORD PTR [r15]
  406d40:	jmp    406d0a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406d42:	lea    rdi,[rip+0x8a59]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  406d49:	lea    rsi,[rip+0x7892]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406d50:	lea    rcx,[rip+0x8885]        # 40f5dc <flatcc_builder_padding_base@@Base+0x127c>
  406d57:	mov    edx,0x134
  406d5c:	call   403060 <__assert_fail@plt>
  406d61:	lea    rdi,[rip+0x89fe]        # 40f766 <flatcc_builder_padding_base@@Base+0x1406>
  406d68:	lea    rsi,[rip+0x7873]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406d6f:	lea    rcx,[rip+0x89ff]        # 40f775 <flatcc_builder_padding_base@@Base+0x1415>
  406d76:	mov    edx,0x156
  406d7b:	call   403060 <__assert_fail@plt>

0000000000406d80 <flatcc_builder_create_table@@Base>:
  406d80:	push   rbp
  406d81:	push   r14
  406d83:	push   rbx
  406d84:	sub    rsp,0xa0
  406d8b:	test   r9d,r9d
  406d8e:	js     406fa5 <flatcc_builder_create_table@@Base+0x225>
  406d94:	mov    r14,rdi
  406d97:	mov    edi,DWORD PTR [rsp+0xc0]
  406d9e:	test   dil,0x1
  406da2:	je     406fc4 <flatcc_builder_create_table@@Base+0x244>
  406da8:	movzx  ecx,cx
  406dab:	cmp    ecx,0x4
  406dae:	mov    eax,0x4
  406db3:	cmova  eax,ecx
  406db6:	cmp    WORD PTR [r14+0xe8],ax
  406dbe:	jae    406dc8 <flatcc_builder_create_table@@Base+0x48>
  406dc0:	mov    WORD PTR [r14+0xe8],ax
  406dc8:	mov    ebp,DWORD PTR [r14+0xf0]
  406dcf:	mov    ecx,ebp
  406dd1:	sub    ecx,edx
  406dd3:	movzx  r10d,ax
  406dd7:	add    r10d,0xffffffff
  406ddb:	and    r10d,ecx
  406dde:	mov    ecx,0xfffffffc
  406de3:	mov    ebx,0xfffffffc
  406de8:	sub    ebx,edx
  406dea:	add    edi,r10d
  406ded:	lea    eax,[rbx+rbp*1]
  406df0:	add    eax,0x1
  406df3:	sub    eax,edi
  406df5:	mov    DWORD PTR [rsp+0xc],eax
  406df9:	test   r9d,r9d
  406dfc:	jle    406ea7 <flatcc_builder_create_table@@Base+0x127>
  406e02:	add    ebx,ebp
  406e04:	sub    ebx,r10d
  406e07:	sub    ecx,ebx
  406e09:	mov    edi,r9d
  406e0c:	lea    rax,[rdi-0x1]
  406e10:	mov    r9d,edi
  406e13:	and    r9d,0x3
  406e17:	cmp    rax,0x3
  406e1b:	jae    406e29 <flatcc_builder_create_table@@Base+0xa9>
  406e1d:	xor    ebx,ebx
  406e1f:	test   r9,r9
  406e22:	jne    406e7d <flatcc_builder_create_table@@Base+0xfd>
  406e24:	jmp    406ea7 <flatcc_builder_create_table@@Base+0x127>
  406e29:	sub    rdi,r9
  406e2c:	xor    ebx,ebx
  406e2e:	xchg   ax,ax
  406e30:	movzx  eax,WORD PTR [r8+rbx*2]
  406e35:	mov    ebp,DWORD PTR [rax+rsi*1]
  406e38:	add    ebp,ecx
  406e3a:	sub    ebp,eax
  406e3c:	mov    DWORD PTR [rax+rsi*1],ebp
  406e3f:	movzx  eax,WORD PTR [r8+rbx*2+0x2]
  406e45:	mov    ebp,DWORD PTR [rax+rsi*1]
  406e48:	add    ebp,ecx
  406e4a:	sub    ebp,eax
  406e4c:	mov    DWORD PTR [rax+rsi*1],ebp
  406e4f:	movzx  eax,WORD PTR [r8+rbx*2+0x4]
  406e55:	mov    ebp,DWORD PTR [rax+rsi*1]
  406e58:	add    ebp,ecx
  406e5a:	sub    ebp,eax
  406e5c:	mov    DWORD PTR [rax+rsi*1],ebp
  406e5f:	movzx  eax,WORD PTR [r8+rbx*2+0x6]
  406e65:	mov    ebp,DWORD PTR [rax+rsi*1]
  406e68:	add    ebp,ecx
  406e6a:	sub    ebp,eax
  406e6c:	mov    DWORD PTR [rax+rsi*1],ebp
  406e6f:	add    rbx,0x4
  406e73:	cmp    rdi,rbx
  406e76:	jne    406e30 <flatcc_builder_create_table@@Base+0xb0>
  406e78:	test   r9,r9
  406e7b:	je     406ea7 <flatcc_builder_create_table@@Base+0x127>
  406e7d:	lea    rdi,[r8+rbx*2]
  406e81:	xor    ebx,ebx
  406e83:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406e8d:	nop    DWORD PTR [rax]
  406e90:	movzx  eax,WORD PTR [rdi+rbx*2]
  406e94:	mov    ebp,DWORD PTR [rax+rsi*1]
  406e97:	add    ebp,ecx
  406e99:	sub    ebp,eax
  406e9b:	mov    DWORD PTR [rax+rsi*1],ebp
  406e9e:	add    rbx,0x1
  406ea2:	cmp    r9,rbx
  406ea5:	jne    406e90 <flatcc_builder_create_table@@Base+0x110>
  406ea7:	mov    QWORD PTR [rsp+0x10],0x4
  406eb0:	lea    rax,[rsp+0xc]
  406eb5:	mov    QWORD PTR [rsp+0x20],rax
  406eba:	mov    QWORD PTR [rsp+0x28],0x4
  406ec3:	mov    DWORD PTR [rsp+0x18],0x1
  406ecb:	test   rdx,rdx
  406ece:	je     406f70 <flatcc_builder_create_table@@Base+0x1f0>
  406ed4:	lea    r8,[rdx+0x4]
  406ed8:	mov    QWORD PTR [rsp+0x10],r8
  406edd:	mov    QWORD PTR [rsp+0x30],rsi
  406ee2:	mov    QWORD PTR [rsp+0x38],rdx
  406ee7:	mov    DWORD PTR [rsp+0x18],0x2
  406eef:	mov    edx,0x2
  406ef4:	test   r10d,r10d
  406ef7:	je     406f1f <flatcc_builder_create_table@@Base+0x19f>
  406ef9:	add    r8,r10
  406efc:	mov    QWORD PTR [rsp+0x10],r8
  406f01:	mov    eax,edx
  406f03:	shl    rax,0x4
  406f07:	lea    rcx,[rip+0x7452]        # 40e360 <flatcc_builder_padding_base@@Base>
  406f0e:	mov    QWORD PTR [rsp+rax*1+0x20],rcx
  406f13:	mov    QWORD PTR [rsp+rax*1+0x28],r10
  406f18:	add    edx,0x1
  406f1b:	mov    DWORD PTR [rsp+0x18],edx
  406f1f:	cmp    r8,0x11
  406f23:	setb   al
  406f26:	lea    rcx,[r8-0x10]
  406f2a:	shr    rcx,0x20
  406f2e:	sete   cl
  406f31:	test   r8d,r8d
  406f34:	jle    406f86 <flatcc_builder_create_table@@Base+0x206>
  406f36:	or     al,cl
  406f38:	je     406f86 <flatcc_builder_create_table@@Base+0x206>
  406f3a:	mov    ebp,DWORD PTR [r14+0xf0]
  406f41:	sub    ebp,r8d
  406f44:	mov    rdi,QWORD PTR [r14+0x38]
  406f48:	lea    rsi,[rsp+0x20]
  406f4d:	mov    ecx,ebp
  406f4f:	call   QWORD PTR [r14+0x48]
  406f53:	test   eax,eax
  406f55:	jne    406fe3 <flatcc_builder_create_table@@Base+0x263>
  406f5b:	mov    DWORD PTR [r14+0xf0],ebp
  406f62:	mov    eax,ebp
  406f64:	add    rsp,0xa0
  406f6b:	pop    rbx
  406f6c:	pop    r14
  406f6e:	pop    rbp
  406f6f:	ret    
  406f70:	mov    edx,0x1
  406f75:	mov    r8d,0x4
  406f7b:	test   r10d,r10d
  406f7e:	jne    406ef9 <flatcc_builder_create_table@@Base+0x179>
  406f84:	jmp    406f1f <flatcc_builder_create_table@@Base+0x19f>
  406f86:	lea    rdi,[rip+0x8815]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  406f8d:	lea    rsi,[rip+0x764e]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406f94:	lea    rcx,[rip+0x86c6]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  406f9b:	mov    edx,0x287
  406fa0:	call   403060 <__assert_fail@plt>
  406fa5:	lea    rdi,[rip+0x7dac]        # 40ed58 <flatcc_builder_padding_base@@Base+0x9f8>
  406fac:	lea    rsi,[rip+0x762f]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406fb3:	lea    rcx,[rip+0x7db0]        # 40ed6a <flatcc_builder_padding_base@@Base+0xa0a>
  406fba:	mov    edx,0x4d5
  406fbf:	call   403060 <__assert_fail@plt>
  406fc4:	lea    rdi,[rip+0x7e3b]        # 40ee06 <flatcc_builder_padding_base@@Base+0xaa6>
  406fcb:	lea    rsi,[rip+0x7610]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406fd2:	lea    rcx,[rip+0x7d91]        # 40ed6a <flatcc_builder_padding_base@@Base+0xa0a>
  406fd9:	mov    edx,0x4db
  406fde:	call   403060 <__assert_fail@plt>
  406fe3:	lea    rdi,[rip+0x87b8]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  406fea:	lea    rsi,[rip+0x75f1]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406ff1:	lea    rcx,[rip+0x8669]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  406ff8:	mov    edx,0x28b
  406ffd:	call   403060 <__assert_fail@plt>
  407002:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40700c:	nop    DWORD PTR [rax+0x0]

0000000000407010 <flatcc_builder_check_required_field@@Base>:
  407010:	mov    rax,QWORD PTR [rdi+0x30]
  407014:	movzx  eax,WORD PTR [rax+0xe]
  407018:	cmp    eax,0x3
  40701b:	jne    407037 <flatcc_builder_check_required_field@@Base+0x27>
  40701d:	xor    eax,eax
  40701f:	cmp    WORD PTR [rdi+0x10],si
  407023:	jbe    407036 <flatcc_builder_check_required_field@@Base+0x26>
  407025:	mov    rcx,QWORD PTR [rdi+0x8]
  407029:	movzx  edx,si
  40702c:	xor    eax,eax
  40702e:	cmp    WORD PTR [rcx+rdx*2],0x0
  407033:	setne  al
  407036:	ret    
  407037:	push   rax
  407038:	lea    rdi,[rip+0x7dd2]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  40703f:	lea    rsi,[rip+0x759c]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407046:	lea    rcx,[rip+0x7def]        # 40ee3c <flatcc_builder_padding_base@@Base+0xadc>
  40704d:	mov    edx,0x4f8
  407052:	call   403060 <__assert_fail@plt>
  407057:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407060 <flatcc_builder_check_union_field@@Base>:
  407060:	mov    rax,QWORD PTR [rdi+0x30]
  407064:	movzx  eax,WORD PTR [rax+0xe]
  407068:	cmp    eax,0x3
  40706b:	jne    4070be <flatcc_builder_check_union_field@@Base+0x5e>
  40706d:	test   si,si
  407070:	je     4070a1 <flatcc_builder_check_union_field@@Base+0x41>
  407072:	cmp    WORD PTR [rdi+0x10],si
  407076:	jbe    4070a7 <flatcc_builder_check_union_field@@Base+0x47>
  407078:	movzx  eax,si
  40707b:	mov    rcx,QWORD PTR [rdi+0x8]
  40707f:	movzx  edx,WORD PTR [rcx+rax*2-0x2]
  407084:	test   rdx,rdx
  407087:	je     4070ad <flatcc_builder_check_union_field@@Base+0x4d>
  407089:	mov    rsi,QWORD PTR [rdi+0x18]
  40708d:	cmp    BYTE PTR [rsi+rdx*1],0x0
  407091:	movzx  eax,WORD PTR [rcx+rax*2]
  407095:	je     4070b4 <flatcc_builder_check_union_field@@Base+0x54>
  407097:	test   ax,ax
  40709a:	setne  al
  40709d:	movzx  eax,al
  4070a0:	ret    
  4070a1:	xor    eax,eax
  4070a3:	movzx  eax,al
  4070a6:	ret    
  4070a7:	xor    eax,eax
  4070a9:	movzx  eax,al
  4070ac:	ret    
  4070ad:	cmp    WORD PTR [rcx+rax*2],0x0
  4070b2:	jmp    4070b7 <flatcc_builder_check_union_field@@Base+0x57>
  4070b4:	test   ax,ax
  4070b7:	sete   al
  4070ba:	movzx  eax,al
  4070bd:	ret    
  4070be:	push   rax
  4070bf:	lea    rdi,[rip+0x7d4b]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  4070c6:	lea    rsi,[rip+0x7515]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4070cd:	lea    rcx,[rip+0x7dbb]        # 40ee8f <flatcc_builder_padding_base@@Base+0xb2f>
  4070d4:	mov    edx,0x4ff
  4070d9:	call   403060 <__assert_fail@plt>
  4070de:	xchg   ax,ax

00000000004070e0 <flatcc_builder_check_required@@Base>:
  4070e0:	mov    rax,QWORD PTR [rdi+0x30]
  4070e4:	movzx  eax,WORD PTR [rax+0xe]
  4070e8:	cmp    eax,0x3
  4070eb:	jne    407128 <flatcc_builder_check_required@@Base+0x48>
  4070ed:	movzx  ecx,WORD PTR [rdi+0x10]
  4070f1:	xor    eax,eax
  4070f3:	cmp    ecx,edx
  4070f5:	jl     407124 <flatcc_builder_check_required@@Base+0x44>
  4070f7:	mov    eax,0x1
  4070fc:	test   edx,edx
  4070fe:	jle    407124 <flatcc_builder_check_required@@Base+0x44>
  407100:	mov    rcx,QWORD PTR [rdi+0x8]
  407104:	movsxd r8,edx
  407107:	xor    edi,edi
  407109:	nop    DWORD PTR [rax+0x0]
  407110:	movzx  edx,WORD PTR [rsi+rdi*2]
  407114:	cmp    WORD PTR [rcx+rdx*2],0x0
  407119:	je     407125 <flatcc_builder_check_required@@Base+0x45>
  40711b:	add    rdi,0x1
  40711f:	cmp    rdi,r8
  407122:	jl     407110 <flatcc_builder_check_required@@Base+0x30>
  407124:	ret    
  407125:	xor    eax,eax
  407127:	ret    
  407128:	push   rax
  407129:	lea    rdi,[rip+0x7ce1]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  407130:	lea    rsi,[rip+0x74ab]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407137:	lea    rcx,[rip+0x7da1]        # 40eedf <flatcc_builder_padding_base@@Base+0xb7f>
  40713e:	mov    edx,0x511
  407143:	call   403060 <__assert_fail@plt>
  407148:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407150 <flatcc_builder_end_table@@Base>:
  407150:	push   rbp
  407151:	push   r15
  407153:	push   r14
  407155:	push   r12
  407157:	push   rbx
  407158:	sub    rsp,0x10
  40715c:	mov    rax,QWORD PTR [rdi+0x30]
  407160:	movzx  eax,WORD PTR [rax+0xe]
  407164:	cmp    eax,0x3
  407167:	jne    4072b8 <flatcc_builder_end_table@@Base+0x168>
  40716d:	mov    rbx,rdi
  407170:	mov    rax,QWORD PTR [rdi+0x8]
  407174:	mov    ecx,DWORD PTR [rdi+0x10]
  407177:	lea    ecx,[rcx+rcx*1]
  40717a:	add    ecx,0x4
  40717d:	mov    WORD PTR [rax-0x4],cx
  407181:	mov    edx,DWORD PTR [rdi+0x20]
  407184:	add    edx,0x4
  407187:	mov    WORD PTR [rax-0x2],dx
  40718b:	lea    r12,[rax-0x4]
  40718f:	movzx  ebp,cx
  407192:	mov    eax,DWORD PTR [rdi+0x14]
  407195:	xor    eax,ebp
  407197:	imul   eax,eax,0x9e3779b1
  40719d:	movzx  ecx,dx
  4071a0:	xor    ecx,eax
  4071a2:	imul   ecx,ecx,0x9e3779b1
  4071a8:	mov    DWORD PTR [rdi+0x14],ecx
  4071ab:	mov    rsi,r12
  4071ae:	mov    edx,ebp
  4071b0:	call   4069f0 <flatcc_builder_create_cached_vtable@@Base>
  4071b5:	test   eax,eax
  4071b7:	je     4072a5 <flatcc_builder_end_table@@Base+0x155>
  4071bd:	mov    r14d,eax
  4071c0:	xor    r15d,r15d
  4071c3:	xor    esi,esi
  4071c5:	mov    rdi,r12
  4071c8:	mov    rdx,rbp
  4071cb:	call   403070 <memset@plt>
  4071d0:	mov    rax,QWORD PTR [rbx+0x30]
  4071d4:	mov    r8d,DWORD PTR [rax+0x14]
  4071d8:	add    r8,QWORD PTR [rbx+0x88]
  4071df:	mov    r9,QWORD PTR [rbx]
  4071e2:	mov    rsi,QWORD PTR [rbx+0x18]
  4071e6:	sub    r9,r8
  4071e9:	shr    r9,1
  4071ec:	mov    edx,DWORD PTR [rbx+0x20]
  4071ef:	movzx  ecx,WORD PTR [rbx+0xea]
  4071f6:	mov    DWORD PTR [rsp],r14d
  4071fa:	mov    rdi,rbx
  4071fd:	call   406d80 <flatcc_builder_create_table@@Base>
  407202:	test   eax,eax
  407204:	je     4072a8 <flatcc_builder_end_table@@Base+0x158>
  40720a:	mov    r14d,eax
  40720d:	mov    rax,QWORD PTR [rbx+0x30]
  407211:	mov    ecx,DWORD PTR [rax+0x18]
  407214:	mov    DWORD PTR [rbx+0x14],ecx
  407217:	movzx  ecx,WORD PTR [rax+0x1c]
  40721b:	mov    WORD PTR [rbx+0x10],cx
  40721f:	mov    ecx,DWORD PTR [rax+0x10]
  407222:	add    rcx,QWORD PTR [rbx+0x58]
  407226:	mov    QWORD PTR [rbx+0x8],rcx
  40722a:	mov    eax,DWORD PTR [rax+0x14]
  40722d:	add    rax,QWORD PTR [rbx+0x88]
  407234:	mov    QWORD PTR [rbx],rax
  407237:	mov    rdi,QWORD PTR [rbx+0x18]
  40723b:	mov    edx,DWORD PTR [rbx+0x20]
  40723e:	xor    esi,esi
  407240:	call   403070 <memset@plt>
  407245:	mov    rax,QWORD PTR [rbx+0x30]
  407249:	mov    ecx,DWORD PTR [rax+0x8]
  40724c:	mov    DWORD PTR [rbx+0x20],ecx
  40724f:	mov    ecx,DWORD PTR [rax]
  407251:	mov    DWORD PTR [rbx+0x28],ecx
  407254:	mov    edx,DWORD PTR [rax+0x4]
  407257:	mov    rsi,rcx
  40725a:	add    rsi,QWORD PTR [rbx+0x68]
  40725e:	mov    QWORD PTR [rbx+0x18],rsi
  407262:	mov    esi,DWORD PTR [rbx+0x70]
  407265:	sub    esi,ecx
  407267:	cmp    esi,edx
  407269:	cmova  esi,edx
  40726c:	mov    DWORD PTR [rbx+0x24],esi
  40726f:	movzx  ecx,WORD PTR [rbx+0xea]
  407276:	cmp    WORD PTR [rbx+0xe8],cx
  40727d:	jae    407286 <flatcc_builder_end_table@@Base+0x136>
  40727f:	mov    WORD PTR [rbx+0xe8],cx
  407286:	movzx  ecx,WORD PTR [rax+0xc]
  40728a:	mov    WORD PTR [rbx+0xea],cx
  407291:	add    rax,0xffffffffffffffdc
  407295:	mov    QWORD PTR [rbx+0x30],rax
  407299:	add    DWORD PTR [rbx+0x104],0xffffffff
  4072a0:	mov    r15d,r14d
  4072a3:	jmp    4072a8 <flatcc_builder_end_table@@Base+0x158>
  4072a5:	xor    r15d,r15d
  4072a8:	mov    eax,r15d
  4072ab:	add    rsp,0x10
  4072af:	pop    rbx
  4072b0:	pop    r12
  4072b2:	pop    r14
  4072b4:	pop    r15
  4072b6:	pop    rbp
  4072b7:	ret    
  4072b8:	lea    rdi,[rip+0x7b52]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  4072bf:	lea    rsi,[rip+0x731c]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4072c6:	lea    rcx,[rip+0x7c6c]        # 40ef39 <flatcc_builder_padding_base@@Base+0xbd9>
  4072cd:	mov    edx,0x525
  4072d2:	call   403060 <__assert_fail@plt>
  4072d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004072e0 <flatcc_builder_create_vector@@Base>:
  4072e0:	push   rbp
  4072e1:	push   rbx
  4072e2:	sub    rsp,0x98
  4072e9:	cmp    rdx,r9
  4072ec:	ja     407419 <flatcc_builder_create_vector@@Base+0x139>
  4072f2:	mov    rbx,rdi
  4072f5:	movzx  edi,r8w
  4072f9:	cmp    edi,0x4
  4072fc:	mov    eax,0x4
  407301:	cmova  eax,edi
  407304:	cmp    WORD PTR [rbx+0xe8],ax
  40730b:	jae    407314 <flatcc_builder_create_vector@@Base+0x34>
  40730d:	mov    WORD PTR [rbx+0xe8],ax
  407314:	imul   ecx,edx
  407317:	mov    DWORD PTR [rsp+0x4],edx
  40731b:	mov    ebp,DWORD PTR [rbx+0xf0]
  407321:	mov    edx,ebp
  407323:	sub    edx,ecx
  407325:	movzx  eax,ax
  407328:	add    eax,0xffffffff
  40732b:	and    eax,edx
  40732d:	mov    QWORD PTR [rsp+0x8],0x4
  407336:	lea    rdx,[rsp+0x4]
  40733b:	mov    QWORD PTR [rsp+0x18],rdx
  407340:	mov    QWORD PTR [rsp+0x20],0x4
  407349:	mov    DWORD PTR [rsp+0x10],0x1
  407351:	test   ecx,ecx
  407353:	je     4073e9 <flatcc_builder_create_vector@@Base+0x109>
  407359:	mov    ecx,ecx
  40735b:	lea    r8,[rcx+0x4]
  40735f:	mov    QWORD PTR [rsp+0x8],r8
  407364:	mov    QWORD PTR [rsp+0x28],rsi
  407369:	mov    QWORD PTR [rsp+0x30],rcx
  40736e:	mov    DWORD PTR [rsp+0x10],0x2
  407376:	mov    edx,0x2
  40737b:	test   eax,eax
  40737d:	je     4073a7 <flatcc_builder_create_vector@@Base+0xc7>
  40737f:	mov    eax,eax
  407381:	add    r8,rax
  407384:	mov    QWORD PTR [rsp+0x8],r8
  407389:	mov    ecx,edx
  40738b:	shl    rcx,0x4
  40738f:	lea    rsi,[rip+0x6fca]        # 40e360 <flatcc_builder_padding_base@@Base>
  407396:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  40739b:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  4073a0:	add    edx,0x1
  4073a3:	mov    DWORD PTR [rsp+0x10],edx
  4073a7:	cmp    r8,0x11
  4073ab:	setb   al
  4073ae:	lea    rcx,[r8-0x10]
  4073b2:	shr    rcx,0x20
  4073b6:	sete   cl
  4073b9:	test   r8d,r8d
  4073bc:	jle    4073fa <flatcc_builder_create_vector@@Base+0x11a>
  4073be:	or     al,cl
  4073c0:	je     4073fa <flatcc_builder_create_vector@@Base+0x11a>
  4073c2:	sub    ebp,r8d
  4073c5:	mov    rdi,QWORD PTR [rbx+0x38]
  4073c9:	lea    rsi,[rsp+0x18]
  4073ce:	mov    ecx,ebp
  4073d0:	call   QWORD PTR [rbx+0x48]
  4073d3:	test   eax,eax
  4073d5:	jne    407438 <flatcc_builder_create_vector@@Base+0x158>
  4073d7:	mov    DWORD PTR [rbx+0xf0],ebp
  4073dd:	mov    eax,ebp
  4073df:	add    rsp,0x98
  4073e6:	pop    rbx
  4073e7:	pop    rbp
  4073e8:	ret    
  4073e9:	mov    edx,0x1
  4073ee:	mov    r8d,0x4
  4073f4:	test   eax,eax
  4073f6:	jne    40737f <flatcc_builder_create_vector@@Base+0x9f>
  4073f8:	jmp    4073a7 <flatcc_builder_create_vector@@Base+0xc7>
  4073fa:	lea    rdi,[rip+0x83a1]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  407401:	lea    rsi,[rip+0x71da]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407408:	lea    rcx,[rip+0x8252]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  40740f:	mov    edx,0x287
  407414:	call   403060 <__assert_fail@plt>
  407419:	lea    rdi,[rip+0x7b5b]        # 40ef7b <flatcc_builder_padding_base@@Base+0xc1b>
  407420:	lea    rsi,[rip+0x71bb]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407427:	lea    rcx,[rip+0x7b60]        # 40ef8e <flatcc_builder_padding_base@@Base+0xc2e>
  40742e:	mov    edx,0x555
  407433:	call   403060 <__assert_fail@plt>
  407438:	lea    rdi,[rip+0x8363]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  40743f:	lea    rsi,[rip+0x719c]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407446:	lea    rcx,[rip+0x8214]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  40744d:	mov    edx,0x28b
  407452:	call   403060 <__assert_fail@plt>
  407457:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407460 <flatcc_builder_end_vector@@Base>:
  407460:	push   rbp
  407461:	push   rbx
  407462:	push   rax
  407463:	mov    rax,QWORD PTR [rdi+0x30]
  407467:	movzx  ecx,WORD PTR [rax+0xe]
  40746b:	cmp    ecx,0x4
  40746e:	jne    40750a <flatcc_builder_end_vector@@Base+0xaa>
  407474:	mov    rbx,rdi
  407477:	mov    rsi,QWORD PTR [rdi+0x18]
  40747b:	mov    ecx,DWORD PTR [rax+0x10]
  40747e:	mov    edx,DWORD PTR [rax+0x14]
  407481:	movzx  r8d,WORD PTR [rdi+0xea]
  407489:	mov    r9d,DWORD PTR [rax+0x18]
  40748d:	call   4072e0 <flatcc_builder_create_vector@@Base>
  407492:	mov    ebp,eax
  407494:	test   eax,eax
  407496:	je     407501 <flatcc_builder_end_vector@@Base+0xa1>
  407498:	mov    rdi,QWORD PTR [rbx+0x18]
  40749c:	mov    edx,DWORD PTR [rbx+0x20]
  40749f:	xor    esi,esi
  4074a1:	call   403070 <memset@plt>
  4074a6:	mov    rax,QWORD PTR [rbx+0x30]
  4074aa:	mov    ecx,DWORD PTR [rax+0x8]
  4074ad:	mov    DWORD PTR [rbx+0x20],ecx
  4074b0:	mov    ecx,DWORD PTR [rax]
  4074b2:	mov    DWORD PTR [rbx+0x28],ecx
  4074b5:	mov    edx,DWORD PTR [rax+0x4]
  4074b8:	mov    rsi,rcx
  4074bb:	add    rsi,QWORD PTR [rbx+0x68]
  4074bf:	mov    QWORD PTR [rbx+0x18],rsi
  4074c3:	mov    esi,DWORD PTR [rbx+0x70]
  4074c6:	sub    esi,ecx
  4074c8:	cmp    esi,edx
  4074ca:	cmova  esi,edx
  4074cd:	mov    DWORD PTR [rbx+0x24],esi
  4074d0:	movzx  ecx,WORD PTR [rbx+0xea]
  4074d7:	cmp    WORD PTR [rbx+0xe8],cx
  4074de:	jae    4074e7 <flatcc_builder_end_vector@@Base+0x87>
  4074e0:	mov    WORD PTR [rbx+0xe8],cx
  4074e7:	movzx  ecx,WORD PTR [rax+0xc]
  4074eb:	mov    WORD PTR [rbx+0xea],cx
  4074f2:	add    rax,0xffffffffffffffdc
  4074f6:	mov    QWORD PTR [rbx+0x30],rax
  4074fa:	add    DWORD PTR [rbx+0x104],0xffffffff
  407501:	mov    eax,ebp
  407503:	add    rsp,0x8
  407507:	pop    rbx
  407508:	pop    rbp
  407509:	ret    
  40750a:	lea    rdi,[rip+0x740e]        # 40e91f <flatcc_builder_padding_base@@Base+0x5bf>
  407511:	lea    rsi,[rip+0x70ca]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407518:	lea    rcx,[rip+0x7ae5]        # 40f004 <flatcc_builder_padding_base@@Base+0xca4>
  40751f:	mov    edx,0x578
  407524:	call   403060 <__assert_fail@plt>
  407529:	nop    DWORD PTR [rax+0x0]

0000000000407530 <flatcc_builder_vector_count@@Base>:
  407530:	mov    rax,QWORD PTR [rdi+0x30]
  407534:	mov    eax,DWORD PTR [rax+0x14]
  407537:	ret    
  407538:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407540 <flatcc_builder_vector_edit@@Base>:
  407540:	mov    rax,QWORD PTR [rdi+0x18]
  407544:	ret    
  407545:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40754f:	nop

0000000000407550 <flatcc_builder_create_offset_vector_direct@@Base>:
  407550:	xor    ecx,ecx
  407552:	jmp    407560 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  407554:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40755e:	xchg   ax,ax
  407560:	push   r14
  407562:	push   rbx
  407563:	sub    rsp,0x98
  40756a:	mov    r10,rdx
  40756d:	xor    ebx,ebx
  40756f:	test   r10d,0xc0000000
  407576:	jne    4076ca <flatcc_builder_create_offset_vector_direct@@Base+0x17a>
  40757c:	mov    r14,rdi
  40757f:	movzx  edx,WORD PTR [rdi+0xe8]
  407586:	cmp    edx,0x3
  407589:	ja     407595 <flatcc_builder_create_offset_vector_direct@@Base+0x45>
  40758b:	mov    WORD PTR [r14+0xe8],0x4
  407595:	lea    r8d,[r10*4+0x0]
  40759d:	mov    DWORD PTR [rsp+0x4],r10d
  4075a2:	mov    ebx,DWORD PTR [r14+0xf0]
  4075a9:	mov    r9d,ebx
  4075ac:	and    r9d,0x3
  4075b0:	mov    QWORD PTR [rsp+0x8],0x4
  4075b9:	lea    rdx,[rsp+0x4]
  4075be:	mov    QWORD PTR [rsp+0x18],rdx
  4075c3:	mov    QWORD PTR [rsp+0x20],0x4
  4075cc:	mov    DWORD PTR [rsp+0x10],0x1
  4075d4:	test   r8d,r8d
  4075d7:	je     4076d7 <flatcc_builder_create_offset_vector_direct@@Base+0x187>
  4075dd:	mov    edx,r8d
  4075e0:	lea    r8,[rdx+0x4]
  4075e4:	mov    QWORD PTR [rsp+0x8],r8
  4075e9:	mov    QWORD PTR [rsp+0x28],rsi
  4075ee:	mov    QWORD PTR [rsp+0x30],rdx
  4075f3:	mov    DWORD PTR [rsp+0x10],0x2
  4075fb:	mov    edx,0x2
  407600:	test   r9d,r9d
  407603:	je     40762b <flatcc_builder_create_offset_vector_direct@@Base+0xdb>
  407605:	add    r8,r9
  407608:	mov    QWORD PTR [rsp+0x8],r8
  40760d:	mov    edi,edx
  40760f:	shl    rdi,0x4
  407613:	lea    rax,[rip+0x6d46]        # 40e360 <flatcc_builder_padding_base@@Base>
  40761a:	mov    QWORD PTR [rsp+rdi*1+0x18],rax
  40761f:	mov    QWORD PTR [rsp+rdi*1+0x20],r9
  407624:	add    edx,0x1
  407627:	mov    DWORD PTR [rsp+0x10],edx
  40762b:	test   r10d,r10d
  40762e:	je     407686 <flatcc_builder_create_offset_vector_direct@@Base+0x136>
  407630:	mov    edi,0xfffffffc
  407635:	sub    edi,ebx
  407637:	add    edi,r8d
  40763a:	mov    r9d,r10d
  40763d:	xor    ebx,ebx
  40763f:	nop
  407640:	mov    eax,DWORD PTR [rsi+rbx*4]
  407643:	test   eax,eax
  407645:	je     407660 <flatcc_builder_create_offset_vector_direct@@Base+0x110>
  407647:	add    eax,edi
  407649:	mov    DWORD PTR [rsi+rbx*4],eax
  40764c:	test   rcx,rcx
  40764f:	je     407673 <flatcc_builder_create_offset_vector_direct@@Base+0x123>
  407651:	cmp    BYTE PTR [rcx+rbx*1],0x0
  407655:	jne    407673 <flatcc_builder_create_offset_vector_direct@@Base+0x123>
  407657:	jmp    4076f0 <flatcc_builder_create_offset_vector_direct@@Base+0x1a0>
  40765c:	nop    DWORD PTR [rax+0x0]
  407660:	test   rcx,rcx
  407663:	je     40770f <flatcc_builder_create_offset_vector_direct@@Base+0x1bf>
  407669:	cmp    BYTE PTR [rcx+rbx*1],0x0
  40766d:	jne    40772e <flatcc_builder_create_offset_vector_direct@@Base+0x1de>
  407673:	add    rbx,0x1
  407677:	add    edi,0xfffffffc
  40767a:	cmp    rbx,r9
  40767d:	jb     407640 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  40767f:	mov    ebx,DWORD PTR [r14+0xf0]
  407686:	cmp    r8,0x11
  40768a:	setb   al
  40768d:	lea    rcx,[r8-0x10]
  407691:	shr    rcx,0x20
  407695:	sete   cl
  407698:	test   r8d,r8d
  40769b:	jle    40774d <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  4076a1:	or     al,cl
  4076a3:	je     40774d <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  4076a9:	sub    ebx,r8d
  4076ac:	mov    rdi,QWORD PTR [r14+0x38]
  4076b0:	lea    rsi,[rsp+0x18]
  4076b5:	mov    ecx,ebx
  4076b7:	call   QWORD PTR [r14+0x48]
  4076bb:	test   eax,eax
  4076bd:	jne    40776c <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
  4076c3:	mov    DWORD PTR [r14+0xf0],ebx
  4076ca:	mov    eax,ebx
  4076cc:	add    rsp,0x98
  4076d3:	pop    rbx
  4076d4:	pop    r14
  4076d6:	ret    
  4076d7:	mov    edx,0x1
  4076dc:	mov    r8d,0x4
  4076e2:	test   r9d,r9d
  4076e5:	jne    407605 <flatcc_builder_create_offset_vector_direct@@Base+0xb5>
  4076eb:	jmp    40762b <flatcc_builder_create_offset_vector_direct@@Base+0xdb>
  4076f0:	lea    rdi,[rip+0x809f]        # 40f796 <flatcc_builder_padding_base@@Base+0x1436>
  4076f7:	lea    rsi,[rip+0x6ee4]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4076fe:	lea    rcx,[rip+0x809f]        # 40f7a4 <flatcc_builder_padding_base@@Base+0x1444>
  407705:	mov    edx,0x5b1
  40770a:	call   403060 <__assert_fail@plt>
  40770f:	lea    rdi,[rip+0x808c]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  407716:	lea    rsi,[rip+0x6ec5]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40771d:	lea    rcx,[rip+0x8080]        # 40f7a4 <flatcc_builder_padding_base@@Base+0x1444>
  407724:	mov    edx,0x5b7
  407729:	call   403060 <__assert_fail@plt>
  40772e:	lea    rdi,[rip+0x80f2]        # 40f827 <flatcc_builder_padding_base@@Base+0x14c7>
  407735:	lea    rsi,[rip+0x6ea6]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40773c:	lea    rcx,[rip+0x8061]        # 40f7a4 <flatcc_builder_padding_base@@Base+0x1444>
  407743:	mov    edx,0x5b5
  407748:	call   403060 <__assert_fail@plt>
  40774d:	lea    rdi,[rip+0x804e]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  407754:	lea    rsi,[rip+0x6e87]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40775b:	lea    rcx,[rip+0x7eff]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  407762:	mov    edx,0x287
  407767:	call   403060 <__assert_fail@plt>
  40776c:	lea    rdi,[rip+0x802f]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  407773:	lea    rsi,[rip+0x6e68]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40777a:	lea    rcx,[rip+0x7ee0]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  407781:	mov    edx,0x28b
  407786:	call   403060 <__assert_fail@plt>
  40778b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407790 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  407790:	push   rbp
  407791:	push   rbx
  407792:	push   rax
  407793:	mov    rcx,QWORD PTR [rdi+0x30]
  407797:	movzx  edx,WORD PTR [rcx+0xe]
  40779b:	cmp    edx,0x5
  40779e:	jne    407831 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa1>
  4077a4:	mov    rax,rsi
  4077a7:	mov    rbx,rdi
  4077aa:	mov    rsi,QWORD PTR [rdi+0x18]
  4077ae:	mov    edx,DWORD PTR [rcx+0x14]
  4077b1:	mov    rcx,rax
  4077b4:	call   407560 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  4077b9:	mov    ebp,eax
  4077bb:	test   eax,eax
  4077bd:	je     407828 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
  4077bf:	mov    rdi,QWORD PTR [rbx+0x18]
  4077c3:	mov    edx,DWORD PTR [rbx+0x20]
  4077c6:	xor    esi,esi
  4077c8:	call   403070 <memset@plt>
  4077cd:	mov    rax,QWORD PTR [rbx+0x30]
  4077d1:	mov    ecx,DWORD PTR [rax+0x8]
  4077d4:	mov    DWORD PTR [rbx+0x20],ecx
  4077d7:	mov    ecx,DWORD PTR [rax]
  4077d9:	mov    DWORD PTR [rbx+0x28],ecx
  4077dc:	mov    edx,DWORD PTR [rax+0x4]
  4077df:	mov    rsi,rcx
  4077e2:	add    rsi,QWORD PTR [rbx+0x68]
  4077e6:	mov    QWORD PTR [rbx+0x18],rsi
  4077ea:	mov    esi,DWORD PTR [rbx+0x70]
  4077ed:	sub    esi,ecx
  4077ef:	cmp    esi,edx
  4077f1:	cmova  esi,edx
  4077f4:	mov    DWORD PTR [rbx+0x24],esi
  4077f7:	movzx  ecx,WORD PTR [rbx+0xea]
  4077fe:	cmp    WORD PTR [rbx+0xe8],cx
  407805:	jae    40780e <flatcc_builder_end_offset_vector_for_unions@@Base+0x7e>
  407807:	mov    WORD PTR [rbx+0xe8],cx
  40780e:	movzx  ecx,WORD PTR [rax+0xc]
  407812:	mov    WORD PTR [rbx+0xea],cx
  407819:	add    rax,0xffffffffffffffdc
  40781d:	mov    QWORD PTR [rbx+0x30],rax
  407821:	add    DWORD PTR [rbx+0x104],0xffffffff
  407828:	mov    eax,ebp
  40782a:	add    rsp,0x8
  40782e:	pop    rbx
  40782f:	pop    rbp
  407830:	ret    
  407831:	lea    rdi,[rip+0x71e0]        # 40ea18 <flatcc_builder_padding_base@@Base+0x6b8>
  407838:	lea    rsi,[rip+0x6da3]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40783f:	lea    rcx,[rip+0x784b]        # 40f091 <flatcc_builder_padding_base@@Base+0xd31>
  407846:	mov    edx,0x5d5
  40784b:	call   403060 <__assert_fail@plt>

0000000000407850 <flatcc_builder_offset_vector_edit@@Base>:
  407850:	mov    rax,QWORD PTR [rdi+0x18]
  407854:	ret    
  407855:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40785f:	nop

0000000000407860 <flatcc_builder_offset_vector_count@@Base>:
  407860:	mov    rax,QWORD PTR [rdi+0x30]
  407864:	mov    eax,DWORD PTR [rax+0x14]
  407867:	ret    
  407868:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407870 <flatcc_builder_table_add_union@@Base>:
  407870:	push   rbp
  407871:	push   r15
  407873:	push   r14
  407875:	push   rbx
  407876:	push   rax
  407877:	mov    rax,QWORD PTR [rdi+0x30]
  40787b:	movzx  eax,WORD PTR [rax+0xe]
  40787f:	cmp    eax,0x3
  407882:	jne    4078e1 <flatcc_builder_table_add_union@@Base+0x71>
  407884:	mov    r14,rdx
  407887:	mov    ebp,esi
  407889:	mov    r15,rdi
  40788c:	mov    rbx,rdx
  40788f:	shr    rbx,0x20
  407893:	test   r14b,r14b
  407896:	jne    40789c <flatcc_builder_table_add_union@@Base+0x2c>
  407898:	test   ebx,ebx
  40789a:	jne    407900 <flatcc_builder_table_add_union@@Base+0x90>
  40789c:	test   ebx,ebx
  40789e:	je     4078b5 <flatcc_builder_table_add_union@@Base+0x45>
  4078a0:	mov    rdi,r15
  4078a3:	mov    esi,ebp
  4078a5:	call   407960 <flatcc_builder_table_add_offset@@Base>
  4078aa:	test   rax,rax
  4078ad:	je     40793e <flatcc_builder_table_add_union@@Base+0xce>
  4078b3:	mov    DWORD PTR [rax],ebx
  4078b5:	add    ebp,0xffffffff
  4078b8:	mov    edx,0x1
  4078bd:	mov    ecx,0x1
  4078c2:	mov    rdi,r15
  4078c5:	mov    esi,ebp
  4078c7:	call   407ac0 <flatcc_builder_table_add@@Base>
  4078cc:	test   rax,rax
  4078cf:	je     40791f <flatcc_builder_table_add_union@@Base+0xaf>
  4078d1:	mov    BYTE PTR [rax],r14b
  4078d4:	xor    eax,eax
  4078d6:	add    rsp,0x8
  4078da:	pop    rbx
  4078db:	pop    r14
  4078dd:	pop    r15
  4078df:	pop    rbp
  4078e0:	ret    
  4078e1:	lea    rdi,[rip+0x7529]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  4078e8:	lea    rsi,[rip+0x6cf3]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4078ef:	lea    rcx,[rip+0x780d]        # 40f103 <flatcc_builder_padding_base@@Base+0xda3>
  4078f6:	mov    edx,0x5ee
  4078fb:	call   403060 <__assert_fail@plt>
  407900:	lea    rdi,[rip+0x7854]        # 40f15b <flatcc_builder_padding_base@@Base+0xdfb>
  407907:	lea    rsi,[rip+0x6cd4]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40790e:	lea    rcx,[rip+0x77ee]        # 40f103 <flatcc_builder_padding_base@@Base+0xda3>
  407915:	mov    edx,0x5ef
  40791a:	call   403060 <__assert_fail@plt>
  40791f:	lea    rdi,[rip+0x7861]        # 40f187 <flatcc_builder_padding_base@@Base+0xe27>
  407926:	lea    rsi,[rip+0x6cb5]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40792d:	lea    rcx,[rip+0x77cf]        # 40f103 <flatcc_builder_padding_base@@Base+0xda3>
  407934:	mov    edx,0x5f6
  407939:	call   403060 <__assert_fail@plt>
  40793e:	lea    rdi,[rip+0x7838]        # 40f17d <flatcc_builder_padding_base@@Base+0xe1d>
  407945:	lea    rsi,[rip+0x6c96]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40794c:	lea    rcx,[rip+0x77b0]        # 40f103 <flatcc_builder_padding_base@@Base+0xda3>
  407953:	mov    edx,0x5f2
  407958:	call   403060 <__assert_fail@plt>
  40795d:	nop    DWORD PTR [rax]

0000000000407960 <flatcc_builder_table_add_offset@@Base>:
  407960:	push   rbp
  407961:	push   r15
  407963:	push   r14
  407965:	push   rbx
  407966:	push   rax
  407967:	mov    rax,QWORD PTR [rdi+0x30]
  40796b:	movzx  eax,WORD PTR [rax+0xe]
  40796f:	cmp    eax,0x3
  407972:	jne    407a5e <flatcc_builder_table_add_offset@@Base+0xfe>
  407978:	mov    r14d,esi
  40797b:	cmp    esi,0x7ffd
  407981:	jae    407a7d <flatcc_builder_table_add_offset@@Base+0x11d>
  407987:	mov    rbx,rdi
  40798a:	mov    rax,QWORD PTR [rdi+0x8]
  40798e:	movsxd rcx,r14d
  407991:	cmp    WORD PTR [rax+rcx*2],0x0
  407996:	jne    407a9c <flatcc_builder_table_add_offset@@Base+0x13c>
  40799c:	mov    ecx,DWORD PTR [rbx+0x14]
  40799f:	xor    ecx,r14d
  4079a2:	imul   ecx,ecx,0x9e3779b1
  4079a8:	xor    ecx,0x4
  4079ab:	imul   ecx,ecx,0x9e3779b1
  4079b1:	mov    DWORD PTR [rbx+0x14],ecx
  4079b4:	mov    ebp,DWORD PTR [rbx+0x20]
  4079b7:	mov    ecx,DWORD PTR [rbx+0x24]
  4079ba:	add    ebp,0x3
  4079bd:	and    ebp,0xfffffffc
  4079c0:	lea    r15,[rbp+0x4]
  4079c4:	mov    DWORD PTR [rbx+0x20],r15d
  4079c8:	cmp    ecx,r15d
  4079cb:	jae    407a27 <flatcc_builder_table_add_offset@@Base+0xc7>
  4079cd:	lea    eax,[rbp+0x4]
  4079d0:	lea    rsi,[rbx+0x68]
  4079d4:	mov    rdi,QWORD PTR [rbx+0x40]
  4079d8:	mov    edx,DWORD PTR [rbx+0x28]
  4079db:	add    rdx,rax
  4079de:	mov    ecx,0x1
  4079e3:	mov    r8d,0x1
  4079e9:	call   QWORD PTR [rbx+0x50]
  4079ec:	test   eax,eax
  4079ee:	je     4079f4 <flatcc_builder_table_add_offset@@Base+0x94>
  4079f0:	xor    ebp,ebp
  4079f2:	jmp    407a50 <flatcc_builder_table_add_offset@@Base+0xf0>
  4079f4:	mov    eax,DWORD PTR [rbx+0x28]
  4079f7:	mov    rcx,rax
  4079fa:	add    rcx,QWORD PTR [rbx+0x68]
  4079fe:	mov    QWORD PTR [rbx+0x18],rcx
  407a02:	mov    ecx,DWORD PTR [rbx+0x70]
  407a05:	sub    ecx,eax
  407a07:	cmp    ecx,0xfffc
  407a0d:	mov    eax,0xfffc
  407a12:	cmovb  eax,ecx
  407a15:	mov    DWORD PTR [rbx+0x24],eax
  407a18:	mov    rax,QWORD PTR [rbx+0x30]
  407a1c:	mov    DWORD PTR [rax+0x4],0xfffc
  407a23:	mov    rax,QWORD PTR [rbx+0x8]
  407a27:	movzx  ecx,r14w
  407a2b:	mov    WORD PTR [rax+rcx*2],r15w
  407a30:	cmp    WORD PTR [rbx+0x10],cx
  407a34:	ja     407a3f <flatcc_builder_table_add_offset@@Base+0xdf>
  407a36:	add    r14d,0x1
  407a3a:	mov    WORD PTR [rbx+0x10],r14w
  407a3f:	mov    rax,QWORD PTR [rbx]
  407a42:	lea    rcx,[rax+0x2]
  407a46:	mov    QWORD PTR [rbx],rcx
  407a49:	mov    WORD PTR [rax],bp
  407a4c:	add    rbp,QWORD PTR [rbx+0x18]
  407a50:	mov    rax,rbp
  407a53:	add    rsp,0x8
  407a57:	pop    rbx
  407a58:	pop    r14
  407a5a:	pop    r15
  407a5c:	pop    rbp
  407a5d:	ret    
  407a5e:	lea    rdi,[rip+0x73ac]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  407a65:	lea    rsi,[rip+0x6b76]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407a6c:	lea    rcx,[rip+0x7a92]        # 40f505 <flatcc_builder_padding_base@@Base+0x11a5>
  407a73:	mov    edx,0x713
  407a78:	call   403060 <__assert_fail@plt>
  407a7d:	lea    rdi,[rip+0x7a01]        # 40f485 <flatcc_builder_padding_base@@Base+0x1125>
  407a84:	lea    rsi,[rip+0x6b57]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407a8b:	lea    rcx,[rip+0x7a73]        # 40f505 <flatcc_builder_padding_base@@Base+0x11a5>
  407a92:	mov    edx,0x714
  407a97:	call   403060 <__assert_fail@plt>
  407a9c:	lea    rdi,[rip+0x7cff]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  407aa3:	lea    rsi,[rip+0x6b38]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407aaa:	lea    rcx,[rip+0x7a54]        # 40f505 <flatcc_builder_padding_base@@Base+0x11a5>
  407ab1:	mov    edx,0x71b
  407ab6:	call   403060 <__assert_fail@plt>
  407abb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407ac0 <flatcc_builder_table_add@@Base>:
  407ac0:	push   rbp
  407ac1:	push   r14
  407ac3:	push   rbx
  407ac4:	mov    rax,QWORD PTR [rdi+0x30]
  407ac8:	movzx  eax,WORD PTR [rax+0xe]
  407acc:	cmp    eax,0x3
  407acf:	jne    407bbc <flatcc_builder_table_add@@Base+0xfc>
  407ad5:	mov    r14d,esi
  407ad8:	cmp    esi,0x7ffd
  407ade:	jae    407bdb <flatcc_builder_table_add@@Base+0x11b>
  407ae4:	mov    rbx,rdi
  407ae7:	cmp    WORD PTR [rdi+0xea],cx
  407aee:	jae    407af7 <flatcc_builder_table_add@@Base+0x37>
  407af0:	mov    WORD PTR [rbx+0xea],cx
  407af7:	mov    rsi,QWORD PTR [rbx+0x8]
  407afb:	movsxd rax,r14d
  407afe:	cmp    WORD PTR [rsi+rax*2],0x0
  407b03:	jne    407bfa <flatcc_builder_table_add@@Base+0x13a>
  407b09:	mov    eax,DWORD PTR [rbx+0x14]
  407b0c:	xor    eax,r14d
  407b0f:	imul   eax,eax,0x9e3779b1
  407b15:	xor    eax,edx
  407b17:	imul   eax,eax,0x9e3779b1
  407b1d:	mov    DWORD PTR [rbx+0x14],eax
  407b20:	mov    eax,DWORD PTR [rbx+0x20]
  407b23:	movzx  ebp,cx
  407b26:	lea    eax,[rax+rbp*1]
  407b29:	add    eax,0xffffffff
  407b2c:	neg    ebp
  407b2e:	and    ebp,eax
  407b30:	add    edx,ebp
  407b32:	mov    DWORD PTR [rbx+0x20],edx
  407b35:	cmp    edx,DWORD PTR [rbx+0x24]
  407b38:	jb     407b97 <flatcc_builder_table_add@@Base+0xd7>
  407b3a:	add    edx,0x1
  407b3d:	lea    rsi,[rbx+0x68]
  407b41:	mov    rdi,QWORD PTR [rbx+0x40]
  407b45:	mov    eax,DWORD PTR [rbx+0x28]
  407b48:	add    rax,rdx
  407b4b:	mov    ecx,0x1
  407b50:	mov    r8d,0x1
  407b56:	mov    rdx,rax
  407b59:	call   QWORD PTR [rbx+0x50]
  407b5c:	test   eax,eax
  407b5e:	je     407b64 <flatcc_builder_table_add@@Base+0xa4>
  407b60:	xor    eax,eax
  407b62:	jmp    407bb7 <flatcc_builder_table_add@@Base+0xf7>
  407b64:	mov    eax,DWORD PTR [rbx+0x28]
  407b67:	mov    rcx,rax
  407b6a:	add    rcx,QWORD PTR [rbx+0x68]
  407b6e:	mov    QWORD PTR [rbx+0x18],rcx
  407b72:	mov    ecx,DWORD PTR [rbx+0x70]
  407b75:	sub    ecx,eax
  407b77:	cmp    ecx,0xfffc
  407b7d:	mov    eax,0xfffc
  407b82:	cmovb  eax,ecx
  407b85:	mov    DWORD PTR [rbx+0x24],eax
  407b88:	mov    rax,QWORD PTR [rbx+0x30]
  407b8c:	mov    DWORD PTR [rax+0x4],0xfffc
  407b93:	mov    rsi,QWORD PTR [rbx+0x8]
  407b97:	mov    eax,ebp
  407b99:	add    ebp,0x4
  407b9c:	movzx  ecx,r14w
  407ba0:	mov    WORD PTR [rsi+rcx*2],bp
  407ba4:	cmp    WORD PTR [rbx+0x10],cx
  407ba8:	ja     407bb3 <flatcc_builder_table_add@@Base+0xf3>
  407baa:	add    r14d,0x1
  407bae:	mov    WORD PTR [rbx+0x10],r14w
  407bb3:	add    rax,QWORD PTR [rbx+0x18]
  407bb7:	pop    rbx
  407bb8:	pop    r14
  407bba:	pop    rbp
  407bbb:	ret    
  407bbc:	lea    rdi,[rip+0x724e]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  407bc3:	lea    rsi,[rip+0x6a18]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407bca:	lea    rcx,[rip+0x786a]        # 40f43b <flatcc_builder_padding_base@@Base+0x10db>
  407bd1:	mov    edx,0x6ed
  407bd6:	call   403060 <__assert_fail@plt>
  407bdb:	lea    rdi,[rip+0x78a3]        # 40f485 <flatcc_builder_padding_base@@Base+0x1125>
  407be2:	lea    rsi,[rip+0x69f9]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407be9:	lea    rcx,[rip+0x784b]        # 40f43b <flatcc_builder_padding_base@@Base+0x10db>
  407bf0:	mov    edx,0x6ee
  407bf5:	call   403060 <__assert_fail@plt>
  407bfa:	lea    rdi,[rip+0x7ba1]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  407c01:	lea    rsi,[rip+0x69da]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407c08:	lea    rcx,[rip+0x782c]        # 40f43b <flatcc_builder_padding_base@@Base+0x10db>
  407c0f:	mov    edx,0x6f8
  407c14:	call   403060 <__assert_fail@plt>
  407c19:	nop    DWORD PTR [rax+0x0]

0000000000407c20 <flatcc_builder_table_add_union_vector@@Base>:
  407c20:	push   r15
  407c22:	push   r14
  407c24:	push   r12
  407c26:	push   rbx
  407c27:	push   rax
  407c28:	mov    rax,QWORD PTR [rdi+0x30]
  407c2c:	movzx  eax,WORD PTR [rax+0xe]
  407c30:	cmp    eax,0x3
  407c33:	jne    407c89 <flatcc_builder_table_add_union_vector@@Base+0x69>
  407c35:	mov    rbx,rdx
  407c38:	mov    r12,rdx
  407c3b:	shr    r12,0x20
  407c3f:	test   ebx,ebx
  407c41:	sete   al
  407c44:	test   r12d,r12d
  407c47:	sete   cl
  407c4a:	cmp    al,cl
  407c4c:	jne    407ca8 <flatcc_builder_table_add_union_vector@@Base+0x88>
  407c4e:	test   ebx,ebx
  407c50:	je     407c7b <flatcc_builder_table_add_union_vector@@Base+0x5b>
  407c52:	mov    r14d,esi
  407c55:	mov    r15,rdi
  407c58:	lea    esi,[r14-0x1]
  407c5c:	call   407960 <flatcc_builder_table_add_offset@@Base>
  407c61:	test   rax,rax
  407c64:	je     407cc7 <flatcc_builder_table_add_union_vector@@Base+0xa7>
  407c66:	mov    DWORD PTR [rax],ebx
  407c68:	mov    rdi,r15
  407c6b:	mov    esi,r14d
  407c6e:	call   407960 <flatcc_builder_table_add_offset@@Base>
  407c73:	test   rax,rax
  407c76:	je     407ce6 <flatcc_builder_table_add_union_vector@@Base+0xc6>
  407c78:	mov    DWORD PTR [rax],r12d
  407c7b:	xor    eax,eax
  407c7d:	add    rsp,0x8
  407c81:	pop    rbx
  407c82:	pop    r12
  407c84:	pop    r14
  407c86:	pop    r15
  407c88:	ret    
  407c89:	lea    rdi,[rip+0x7181]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  407c90:	lea    rsi,[rip+0x694b]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407c97:	lea    rcx,[rip+0x74f5]        # 40f193 <flatcc_builder_padding_base@@Base+0xe33>
  407c9e:	mov    edx,0x600
  407ca3:	call   403060 <__assert_fail@plt>
  407ca8:	lea    rdi,[rip+0x7547]        # 40f1f6 <flatcc_builder_padding_base@@Base+0xe96>
  407caf:	lea    rsi,[rip+0x692c]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407cb6:	lea    rcx,[rip+0x74d6]        # 40f193 <flatcc_builder_padding_base@@Base+0xe33>
  407cbd:	mov    edx,0x601
  407cc2:	call   403060 <__assert_fail@plt>
  407cc7:	lea    rdi,[rip+0x74af]        # 40f17d <flatcc_builder_padding_base@@Base+0xe1d>
  407cce:	lea    rsi,[rip+0x690d]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407cd5:	lea    rcx,[rip+0x74b7]        # 40f193 <flatcc_builder_padding_base@@Base+0xe33>
  407cdc:	mov    edx,0x604
  407ce1:	call   403060 <__assert_fail@plt>
  407ce6:	lea    rdi,[rip+0x7490]        # 40f17d <flatcc_builder_padding_base@@Base+0xe1d>
  407ced:	lea    rsi,[rip+0x68ee]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407cf4:	lea    rcx,[rip+0x7498]        # 40f193 <flatcc_builder_padding_base@@Base+0xe33>
  407cfb:	mov    edx,0x608
  407d00:	call   403060 <__assert_fail@plt>
  407d05:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407d0f:	nop

0000000000407d10 <flatcc_builder_create_union_vector@@Base>:
  407d10:	push   r15
  407d12:	push   r14
  407d14:	push   r13
  407d16:	push   r12
  407d18:	push   rbx
  407d19:	mov    r14,rdx
  407d1c:	mov    r15,rsi
  407d1f:	mov    rbx,rdi
  407d22:	mov    esi,0x4
  407d27:	call   405550 <flatcc_builder_start_buffer@@Base+0xe0>
  407d2c:	test   eax,eax
  407d2e:	je     407d40 <flatcc_builder_create_union_vector@@Base+0x30>
  407d30:	xor    r14d,r14d
  407d33:	mov    rax,r14
  407d36:	pop    rbx
  407d37:	pop    r12
  407d39:	pop    r13
  407d3b:	pop    r14
  407d3d:	pop    r15
  407d3f:	ret    
  407d40:	mov    rax,QWORD PTR [rbx+0x30]
  407d44:	mov    DWORD PTR [rax+0x10],0x4
  407d4b:	mov    rax,QWORD PTR [rbx+0x30]
  407d4f:	mov    DWORD PTR [rax+0x14],0x0
  407d56:	mov    rax,QWORD PTR [rbx+0x30]
  407d5a:	mov    WORD PTR [rax+0xe],0x5
  407d60:	mov    ecx,DWORD PTR [rbx+0x28]
  407d63:	mov    edx,DWORD PTR [rbx+0x70]
  407d66:	sub    edx,ecx
  407d68:	add    rcx,QWORD PTR [rbx+0x68]
  407d6c:	mov    QWORD PTR [rbx+0x18],rcx
  407d70:	cmp    edx,0xfffffffc
  407d73:	mov    ecx,0xfffffffc
  407d78:	cmovb  ecx,edx
  407d7b:	mov    DWORD PTR [rbx+0x24],ecx
  407d7e:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407d85:	mov    ecx,DWORD PTR [rax+0x14]
  407d88:	add    ecx,r14d
  407d8b:	jb     407ffa <flatcc_builder_create_union_vector@@Base+0x2ea>
  407d91:	cmp    ecx,0x40000000
  407d97:	jae    407ffa <flatcc_builder_create_union_vector@@Base+0x2ea>
  407d9d:	mov    DWORD PTR [rax+0x14],ecx
  407da0:	mov    r12d,DWORD PTR [rbx+0x20]
  407da4:	mov    eax,DWORD PTR [rbx+0x24]
  407da7:	lea    ecx,[r12+r14*4]
  407dab:	mov    DWORD PTR [rbx+0x20],ecx
  407dae:	cmp    ecx,eax
  407db0:	jae    407dc0 <flatcc_builder_create_union_vector@@Base+0xb0>
  407db2:	mov    rsi,QWORD PTR [rbx+0x18]
  407db6:	add    r12,rsi
  407db9:	jne    407e1c <flatcc_builder_create_union_vector@@Base+0x10c>
  407dbb:	jmp    407d30 <flatcc_builder_create_union_vector@@Base+0x20>
  407dc0:	add    ecx,0x1
  407dc3:	lea    rsi,[rbx+0x68]
  407dc7:	mov    rdi,QWORD PTR [rbx+0x40]
  407dcb:	mov    edx,DWORD PTR [rbx+0x28]
  407dce:	add    rdx,rcx
  407dd1:	mov    ecx,0x1
  407dd6:	mov    r8d,0x1
  407ddc:	call   QWORD PTR [rbx+0x50]
  407ddf:	test   eax,eax
  407de1:	jne    407d30 <flatcc_builder_create_union_vector@@Base+0x20>
  407de7:	mov    eax,DWORD PTR [rbx+0x28]
  407dea:	mov    rsi,rax
  407ded:	add    rsi,QWORD PTR [rbx+0x68]
  407df1:	mov    QWORD PTR [rbx+0x18],rsi
  407df5:	mov    ecx,DWORD PTR [rbx+0x70]
  407df8:	sub    ecx,eax
  407dfa:	cmp    ecx,0xfffffffc
  407dfd:	mov    eax,0xfffffffc
  407e02:	cmovb  eax,ecx
  407e05:	mov    DWORD PTR [rbx+0x24],eax
  407e08:	mov    rcx,QWORD PTR [rbx+0x30]
  407e0c:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407e13:	add    r12,rsi
  407e16:	je     407d30 <flatcc_builder_create_union_vector@@Base+0x20>
  407e1c:	mov    r13d,DWORD PTR [rbx+0x20]
  407e20:	lea    ecx,[r14+r13*1]
  407e24:	mov    DWORD PTR [rbx+0x20],ecx
  407e27:	cmp    ecx,eax
  407e29:	jb     407e7e <flatcc_builder_create_union_vector@@Base+0x16e>
  407e2b:	add    ecx,0x1
  407e2e:	lea    rsi,[rbx+0x68]
  407e32:	mov    rdi,QWORD PTR [rbx+0x40]
  407e36:	mov    edx,DWORD PTR [rbx+0x28]
  407e39:	add    rdx,rcx
  407e3c:	mov    ecx,0x1
  407e41:	mov    r8d,0x1
  407e47:	call   QWORD PTR [rbx+0x50]
  407e4a:	test   eax,eax
  407e4c:	jne    407d30 <flatcc_builder_create_union_vector@@Base+0x20>
  407e52:	mov    eax,DWORD PTR [rbx+0x28]
  407e55:	mov    rsi,rax
  407e58:	add    rsi,QWORD PTR [rbx+0x68]
  407e5c:	mov    QWORD PTR [rbx+0x18],rsi
  407e60:	mov    ecx,DWORD PTR [rbx+0x70]
  407e63:	sub    ecx,eax
  407e65:	cmp    ecx,0xfffffffc
  407e68:	mov    eax,0xfffffffc
  407e6d:	cmovb  eax,ecx
  407e70:	mov    DWORD PTR [rbx+0x24],eax
  407e73:	mov    rax,QWORD PTR [rbx+0x30]
  407e77:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407e7e:	mov    r12,rsi
  407e81:	add    r12,r13
  407e84:	je     407d30 <flatcc_builder_create_union_vector@@Base+0x20>
  407e8a:	test   r14,r14
  407e8d:	je     407f49 <flatcc_builder_create_union_vector@@Base+0x239>
  407e93:	lea    rcx,[r14-0x1]
  407e97:	mov    r8d,r14d
  407e9a:	and    r8d,0x3
  407e9e:	cmp    rcx,0x3
  407ea2:	jae    407eb0 <flatcc_builder_create_union_vector@@Base+0x1a0>
  407ea4:	xor    ecx,ecx
  407ea6:	test   r8,r8
  407ea9:	jne    407f17 <flatcc_builder_create_union_vector@@Base+0x207>
  407eab:	jmp    407f49 <flatcc_builder_create_union_vector@@Base+0x239>
  407eb0:	mov    rdx,r14
  407eb3:	sub    rdx,r8
  407eb6:	lea    rdi,[rsi+r13*1]
  407eba:	add    rdi,0x3
  407ebe:	xor    ecx,ecx
  407ec0:	movzx  eax,BYTE PTR [r15+rcx*8]
  407ec5:	mov    BYTE PTR [rdi+rcx*1-0x3],al
  407ec9:	mov    eax,DWORD PTR [r15+rcx*8+0x4]
  407ece:	mov    DWORD PTR [rsi+rcx*4],eax
  407ed1:	movzx  eax,BYTE PTR [r15+rcx*8+0x8]
  407ed7:	mov    BYTE PTR [rdi+rcx*1-0x2],al
  407edb:	mov    eax,DWORD PTR [r15+rcx*8+0xc]
  407ee0:	mov    DWORD PTR [rsi+rcx*4+0x4],eax
  407ee4:	movzx  eax,BYTE PTR [r15+rcx*8+0x10]
  407eea:	mov    BYTE PTR [rdi+rcx*1-0x1],al
  407eee:	mov    eax,DWORD PTR [r15+rcx*8+0x14]
  407ef3:	mov    DWORD PTR [rsi+rcx*4+0x8],eax
  407ef7:	movzx  eax,BYTE PTR [r15+rcx*8+0x18]
  407efd:	mov    BYTE PTR [rdi+rcx*1],al
  407f00:	mov    eax,DWORD PTR [r15+rcx*8+0x1c]
  407f05:	mov    DWORD PTR [rsi+rcx*4+0xc],eax
  407f09:	add    rcx,0x4
  407f0d:	cmp    rdx,rcx
  407f10:	jne    407ec0 <flatcc_builder_create_union_vector@@Base+0x1b0>
  407f12:	test   r8,r8
  407f15:	je     407f49 <flatcc_builder_create_union_vector@@Base+0x239>
  407f17:	lea    rdx,[rsi+rcx*4]
  407f1b:	lea    rdi,[r15+rcx*8]
  407f1f:	add    rdi,0x4
  407f23:	add    r13,rcx
  407f26:	add    r13,rsi
  407f29:	xor    ecx,ecx
  407f2b:	nop    DWORD PTR [rax+rax*1+0x0]
  407f30:	movzx  eax,BYTE PTR [rdi+rcx*8-0x4]
  407f35:	mov    BYTE PTR [r13+rcx*1+0x0],al
  407f3a:	mov    eax,DWORD PTR [rdi+rcx*8]
  407f3d:	mov    DWORD PTR [rdx+rcx*4],eax
  407f40:	add    rcx,0x1
  407f44:	cmp    r8,rcx
  407f47:	jne    407f30 <flatcc_builder_create_union_vector@@Base+0x220>
  407f49:	mov    rdi,rbx
  407f4c:	mov    rdx,r14
  407f4f:	mov    rcx,r12
  407f52:	call   407560 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  407f57:	mov    r15d,eax
  407f5a:	test   eax,eax
  407f5c:	je     407f82 <flatcc_builder_create_union_vector@@Base+0x272>
  407f5e:	mov    ecx,0x1
  407f63:	mov    r8d,0x1
  407f69:	mov    r9d,0xffffffff
  407f6f:	mov    rdi,rbx
  407f72:	mov    rsi,r12
  407f75:	mov    rdx,r14
  407f78:	call   4072e0 <flatcc_builder_create_vector@@Base>
  407f7d:	mov    r14d,eax
  407f80:	jmp    407f85 <flatcc_builder_create_union_vector@@Base+0x275>
  407f82:	xor    r14d,r14d
  407f85:	shl    r15,0x20
  407f89:	mov    rdi,QWORD PTR [rbx+0x18]
  407f8d:	mov    edx,DWORD PTR [rbx+0x20]
  407f90:	xor    esi,esi
  407f92:	call   403070 <memset@plt>
  407f97:	mov    rax,QWORD PTR [rbx+0x30]
  407f9b:	mov    ecx,DWORD PTR [rax+0x8]
  407f9e:	mov    DWORD PTR [rbx+0x20],ecx
  407fa1:	mov    ecx,DWORD PTR [rax]
  407fa3:	mov    DWORD PTR [rbx+0x28],ecx
  407fa6:	mov    edx,DWORD PTR [rax+0x4]
  407fa9:	mov    rsi,rcx
  407fac:	add    rsi,QWORD PTR [rbx+0x68]
  407fb0:	mov    QWORD PTR [rbx+0x18],rsi
  407fb4:	mov    esi,DWORD PTR [rbx+0x70]
  407fb7:	sub    esi,ecx
  407fb9:	cmp    esi,edx
  407fbb:	cmova  esi,edx
  407fbe:	mov    DWORD PTR [rbx+0x24],esi
  407fc1:	movzx  ecx,WORD PTR [rbx+0xea]
  407fc8:	cmp    WORD PTR [rbx+0xe8],cx
  407fcf:	jae    407fd8 <flatcc_builder_create_union_vector@@Base+0x2c8>
  407fd1:	mov    WORD PTR [rbx+0xe8],cx
  407fd8:	or     r14,r15
  407fdb:	movzx  ecx,WORD PTR [rax+0xc]
  407fdf:	mov    WORD PTR [rbx+0xea],cx
  407fe6:	add    rax,0xffffffffffffffdc
  407fea:	mov    QWORD PTR [rbx+0x30],rax
  407fee:	add    DWORD PTR [rbx+0x104],0xffffffff
  407ff5:	jmp    407d33 <flatcc_builder_create_union_vector@@Base+0x23>
  407ffa:	lea    rdi,[rip+0x76aa]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  408001:	lea    rsi,[rip+0x65da]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408008:	lea    rcx,[rip+0x76b7]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  40800f:	mov    edx,0x37c
  408014:	call   403060 <__assert_fail@plt>
  408019:	nop    DWORD PTR [rax+0x0]

0000000000408020 <flatcc_builder_create_union_vector_direct@@Base>:
  408020:	push   r15
  408022:	push   r14
  408024:	push   r12
  408026:	push   rbx
  408027:	push   rax
  408028:	mov    r14,rcx
  40802b:	mov    r15,rsi
  40802e:	mov    r12,rdi
  408031:	mov    rsi,rdx
  408034:	mov    rdx,rcx
  408037:	mov    rcx,r15
  40803a:	call   407560 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  40803f:	mov    ebx,eax
  408041:	test   eax,eax
  408043:	je     408068 <flatcc_builder_create_union_vector_direct@@Base+0x48>
  408045:	mov    ecx,0x1
  40804a:	mov    r8d,0x1
  408050:	mov    r9d,0xffffffff
  408056:	mov    rdi,r12
  408059:	mov    rsi,r15
  40805c:	mov    rdx,r14
  40805f:	call   4072e0 <flatcc_builder_create_vector@@Base>
  408064:	mov    eax,eax
  408066:	jmp    40806a <flatcc_builder_create_union_vector_direct@@Base+0x4a>
  408068:	xor    eax,eax
  40806a:	shl    rbx,0x20
  40806e:	or     rbx,rax
  408071:	mov    rax,rbx
  408074:	add    rsp,0x8
  408078:	pop    rbx
  408079:	pop    r12
  40807b:	pop    r14
  40807d:	pop    r15
  40807f:	ret    

0000000000408080 <flatcc_builder_start_union_vector@@Base>:
  408080:	push   rbx
  408081:	mov    rbx,rdi
  408084:	mov    esi,0x4
  408089:	call   405550 <flatcc_builder_start_buffer@@Base+0xe0>
  40808e:	mov    ecx,eax
  408090:	mov    eax,0xffffffff
  408095:	test   ecx,ecx
  408097:	je     40809b <flatcc_builder_start_union_vector@@Base+0x1b>
  408099:	pop    rbx
  40809a:	ret    
  40809b:	mov    rax,QWORD PTR [rbx+0x30]
  40809f:	mov    DWORD PTR [rax+0x10],0x8
  4080a6:	mov    rax,QWORD PTR [rbx+0x30]
  4080aa:	mov    DWORD PTR [rax+0x14],0x0
  4080b1:	mov    rax,QWORD PTR [rbx+0x30]
  4080b5:	mov    WORD PTR [rax+0xe],0x7
  4080bb:	mov    ecx,DWORD PTR [rbx+0x28]
  4080be:	mov    edx,DWORD PTR [rbx+0x70]
  4080c1:	sub    edx,ecx
  4080c3:	add    rcx,QWORD PTR [rbx+0x68]
  4080c7:	mov    QWORD PTR [rbx+0x18],rcx
  4080cb:	cmp    edx,0xfffffffc
  4080ce:	mov    ecx,0xfffffffc
  4080d3:	cmovb  ecx,edx
  4080d6:	mov    DWORD PTR [rbx+0x24],ecx
  4080d9:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4080e0:	xor    eax,eax
  4080e2:	pop    rbx
  4080e3:	ret    
  4080e4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4080ee:	xchg   ax,ax

00000000004080f0 <flatcc_builder_end_union_vector@@Base>:
  4080f0:	push   rbp
  4080f1:	push   r15
  4080f3:	push   r14
  4080f5:	push   r13
  4080f7:	push   r12
  4080f9:	push   rbx
  4080fa:	push   rax
  4080fb:	mov    rax,QWORD PTR [rdi+0x30]
  4080ff:	movzx  ecx,WORD PTR [rax+0xe]
  408103:	cmp    ecx,0x7
  408106:	jne    408506 <flatcc_builder_end_union_vector@@Base+0x416>
  40810c:	mov    r13,rdi
  40810f:	mov    r14d,DWORD PTR [rax+0x14]
  408113:	lea    eax,[r14+r14*4]
  408117:	mov    r12d,DWORD PTR [rdi+0x20]
  40811b:	add    eax,r12d
  40811e:	mov    DWORD PTR [rdi+0x20],eax
  408121:	cmp    eax,DWORD PTR [rdi+0x24]
  408124:	jae    40812c <flatcc_builder_end_union_vector@@Base+0x3c>
  408126:	mov    r8,QWORD PTR [r13+0x18]
  40812a:	jmp    408184 <flatcc_builder_end_union_vector@@Base+0x94>
  40812c:	add    eax,0x1
  40812f:	lea    rsi,[r13+0x68]
  408133:	mov    rdi,QWORD PTR [r13+0x40]
  408137:	mov    edx,DWORD PTR [r13+0x28]
  40813b:	add    rdx,rax
  40813e:	mov    ecx,0x1
  408143:	mov    r8d,0x1
  408149:	call   QWORD PTR [r13+0x50]
  40814d:	test   eax,eax
  40814f:	jne    4082c6 <flatcc_builder_end_union_vector@@Base+0x1d6>
  408155:	mov    eax,DWORD PTR [r13+0x28]
  408159:	mov    r8,rax
  40815c:	add    r8,QWORD PTR [r13+0x68]
  408160:	mov    QWORD PTR [r13+0x18],r8
  408164:	mov    ecx,DWORD PTR [r13+0x70]
  408168:	sub    ecx,eax
  40816a:	cmp    ecx,0xfffffffc
  40816d:	mov    eax,0xfffffffc
  408172:	cmovb  eax,ecx
  408175:	mov    DWORD PTR [r13+0x24],eax
  408179:	mov    rax,QWORD PTR [r13+0x30]
  40817d:	mov    DWORD PTR [rax+0x4],0xfffffffc
  408184:	mov    rsi,r8
  408187:	add    rsi,r12
  40818a:	je     4082c6 <flatcc_builder_end_union_vector@@Base+0x1d6>
  408190:	lea    r15,[rsi+r14*4]
  408194:	test   r14d,r14d
  408197:	je     40828a <flatcc_builder_end_union_vector@@Base+0x19a>
  40819d:	cmp    r14d,0x9
  4081a1:	jae    40835a <flatcc_builder_end_union_vector@@Base+0x26a>
  4081a7:	xor    r9d,r9d
  4081aa:	mov    r11d,r14d
  4081ad:	sub    r11d,r9d
  4081b0:	mov    r10,r9
  4081b3:	not    r10
  4081b6:	add    r10,r14
  4081b9:	and    r11,0x3
  4081bd:	je     408202 <flatcc_builder_end_union_vector@@Base+0x112>
  4081bf:	mov    rdx,r9
  4081c2:	neg    rdx
  4081c5:	lea    rbp,[r12+r9*4]
  4081c9:	add    rbp,r8
  4081cc:	lea    rbx,[r8+r9*8]
  4081d0:	add    rbx,0x4
  4081d4:	lea    rax,[r9+r14*4]
  4081d8:	add    rax,r12
  4081db:	add    rax,r8
  4081de:	xor    edi,edi
  4081e0:	movzx  ecx,BYTE PTR [rbx+rdi*8-0x4]
  4081e5:	mov    BYTE PTR [rax+rdi*1],cl
  4081e8:	mov    ecx,DWORD PTR [rbx+rdi*8]
  4081eb:	mov    DWORD PTR [rbp+rdi*4+0x0],ecx
  4081ef:	add    rdx,0xffffffffffffffff
  4081f3:	add    rdi,0x1
  4081f7:	cmp    r11,rdi
  4081fa:	jne    4081e0 <flatcc_builder_end_union_vector@@Base+0xf0>
  4081fc:	neg    rdx
  4081ff:	mov    r9,rdx
  408202:	cmp    r10,0x3
  408206:	jb     40828a <flatcc_builder_end_union_vector@@Base+0x19a>
  40820c:	mov    rbp,r14
  40820f:	sub    rbp,r9
  408212:	lea    rcx,[r12+r9*4]
  408216:	lea    rdx,[r8+rcx*1]
  40821a:	add    rdx,0xc
  40821e:	lea    rdi,[r8+r9*8]
  408222:	add    rdi,0x1c
  408226:	lea    rcx,[r9+r14*4]
  40822a:	add    rcx,r12
  40822d:	add    rcx,r8
  408230:	add    rcx,0x3
  408234:	xor    ebx,ebx
  408236:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408240:	movzx  eax,BYTE PTR [rdi+rbx*8-0x1c]
  408245:	mov    BYTE PTR [rcx+rbx*1-0x3],al
  408249:	mov    eax,DWORD PTR [rdi+rbx*8-0x18]
  40824d:	mov    DWORD PTR [rdx+rbx*4-0xc],eax
  408251:	movzx  eax,BYTE PTR [rdi+rbx*8-0x14]
  408256:	mov    BYTE PTR [rcx+rbx*1-0x2],al
  40825a:	mov    eax,DWORD PTR [rdi+rbx*8-0x10]
  40825e:	mov    DWORD PTR [rdx+rbx*4-0x8],eax
  408262:	movzx  eax,BYTE PTR [rdi+rbx*8-0xc]
  408267:	mov    BYTE PTR [rcx+rbx*1-0x1],al
  40826b:	mov    eax,DWORD PTR [rdi+rbx*8-0x8]
  40826f:	mov    DWORD PTR [rdx+rbx*4-0x4],eax
  408273:	movzx  eax,BYTE PTR [rdi+rbx*8-0x4]
  408278:	mov    BYTE PTR [rcx+rbx*1],al
  40827b:	mov    eax,DWORD PTR [rdi+rbx*8]
  40827e:	mov    DWORD PTR [rdx+rbx*4],eax
  408281:	add    rbx,0x4
  408285:	cmp    rbp,rbx
  408288:	jne    408240 <flatcc_builder_end_union_vector@@Base+0x150>
  40828a:	mov    rdi,r13
  40828d:	mov    rdx,r14
  408290:	mov    rcx,r15
  408293:	vzeroupper 
  408296:	call   407560 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  40829b:	mov    r12d,eax
  40829e:	test   eax,eax
  4082a0:	je     4082cb <flatcc_builder_end_union_vector@@Base+0x1db>
  4082a2:	mov    ecx,0x1
  4082a7:	mov    r8d,0x1
  4082ad:	mov    r9d,0xffffffff
  4082b3:	mov    rdi,r13
  4082b6:	mov    rsi,r15
  4082b9:	mov    rdx,r14
  4082bc:	call   4072e0 <flatcc_builder_create_vector@@Base>
  4082c1:	mov    r14d,eax
  4082c4:	jmp    4082ce <flatcc_builder_end_union_vector@@Base+0x1de>
  4082c6:	xor    r14d,r14d
  4082c9:	jmp    408348 <flatcc_builder_end_union_vector@@Base+0x258>
  4082cb:	xor    r14d,r14d
  4082ce:	shl    r12,0x20
  4082d2:	mov    rdi,QWORD PTR [r13+0x18]
  4082d6:	mov    edx,DWORD PTR [r13+0x20]
  4082da:	xor    esi,esi
  4082dc:	call   403070 <memset@plt>
  4082e1:	mov    rax,QWORD PTR [r13+0x30]
  4082e5:	mov    ecx,DWORD PTR [rax+0x8]
  4082e8:	mov    DWORD PTR [r13+0x20],ecx
  4082ec:	mov    ecx,DWORD PTR [rax]
  4082ee:	mov    DWORD PTR [r13+0x28],ecx
  4082f2:	mov    edx,DWORD PTR [rax+0x4]
  4082f5:	mov    rsi,rcx
  4082f8:	add    rsi,QWORD PTR [r13+0x68]
  4082fc:	mov    QWORD PTR [r13+0x18],rsi
  408300:	mov    esi,DWORD PTR [r13+0x70]
  408304:	sub    esi,ecx
  408306:	cmp    esi,edx
  408308:	cmova  esi,edx
  40830b:	mov    DWORD PTR [r13+0x24],esi
  40830f:	movzx  ecx,WORD PTR [r13+0xea]
  408317:	cmp    WORD PTR [r13+0xe8],cx
  40831f:	jae    408329 <flatcc_builder_end_union_vector@@Base+0x239>
  408321:	mov    WORD PTR [r13+0xe8],cx
  408329:	or     r14,r12
  40832c:	movzx  ecx,WORD PTR [rax+0xc]
  408330:	mov    WORD PTR [r13+0xea],cx
  408338:	add    rax,0xffffffffffffffdc
  40833c:	mov    QWORD PTR [r13+0x30],rax
  408340:	add    DWORD PTR [r13+0x104],0xffffffff
  408348:	mov    rax,r14
  40834b:	add    rsp,0x8
  40834f:	pop    rbx
  408350:	pop    r12
  408352:	pop    r13
  408354:	pop    r14
  408356:	pop    r15
  408358:	pop    rbp
  408359:	ret    
  40835a:	lea    rax,[r14-0x1]
  40835e:	mov    ecx,0x8
  408363:	mul    rcx
  408366:	seto   cl
  408369:	lea    rdi,[r8+0x4]
  40836d:	mov    rdx,rax
  408370:	add    rdx,rdi
  408373:	setb   dl
  408376:	xor    r9d,r9d
  408379:	add    rax,r8
  40837c:	jb     4081aa <flatcc_builder_end_union_vector@@Base+0xba>
  408382:	test   cl,cl
  408384:	jne    4081aa <flatcc_builder_end_union_vector@@Base+0xba>
  40838a:	test   dl,dl
  40838c:	jne    4081aa <flatcc_builder_end_union_vector@@Base+0xba>
  408392:	test   cl,cl
  408394:	jne    4081aa <flatcc_builder_end_union_vector@@Base+0xba>
  40839a:	lea    rcx,[r14+r14*4]
  40839e:	add    rcx,r12
  4083a1:	add    rcx,r8
  4083a4:	lea    rdx,[r8+r14*8]
  4083a8:	add    rdx,0xfffffffffffffff9
  4083ac:	cmp    rdx,r15
  4083af:	seta   r11b
  4083b3:	lea    rbx,[r8+r14*8]
  4083b7:	cmp    r8,rcx
  4083ba:	setb   r10b
  4083be:	cmp    rbx,r15
  4083c1:	seta   al
  4083c4:	cmp    rdi,rcx
  4083c7:	setb   bpl
  4083cb:	cmp    rsi,rdx
  4083ce:	setb   cl
  4083d1:	cmp    r8,r15
  4083d4:	setb   BYTE PTR [rsp+0x7]
  4083d9:	cmp    rsi,rbx
  4083dc:	setb   dl
  4083df:	cmp    rdi,r15
  4083e2:	setb   dil
  4083e6:	xor    r9d,r9d
  4083e9:	test   r11b,r10b
  4083ec:	jne    4081aa <flatcc_builder_end_union_vector@@Base+0xba>
  4083f2:	and    al,bpl
  4083f5:	jne    4081aa <flatcc_builder_end_union_vector@@Base+0xba>
  4083fb:	and    cl,BYTE PTR [rsp+0x7]
  4083ff:	jne    4081aa <flatcc_builder_end_union_vector@@Base+0xba>
  408405:	and    dl,dil
  408408:	jne    4081aa <flatcc_builder_end_union_vector@@Base+0xba>
  40840e:	mov    eax,r14d
  408411:	and    eax,0x7
  408414:	test   rax,rax
  408417:	mov    ecx,0x8
  40841c:	cmovne rcx,rax
  408420:	mov    r9,r14
  408423:	sub    r9,rcx
  408426:	vmovdqa ymm0,YMMWORD PTR [rip+0x6132]        # 40e560 <flatcc_builder_padding_base@@Base+0x200>
  40842e:	vmovdqa ymm1,YMMWORD PTR [rip+0x614a]        # 40e580 <flatcc_builder_padding_base@@Base+0x220>
  408436:	xor    eax,eax
  408438:	vmovdqa xmm8,XMMWORD PTR [rip+0x6160]        # 40e5a0 <flatcc_builder_padding_base@@Base+0x240>
  408440:	vmovdqa xmm9,XMMWORD PTR [rip+0x6168]        # 40e5b0 <flatcc_builder_padding_base@@Base+0x250>
  408448:	vpbroadcastq ymm4,QWORD PTR [rip+0x616f]        # 40e5c0 <flatcc_builder_padding_base@@Base+0x260>
  408451:	vpbroadcastq ymm5,QWORD PTR [rip+0x616e]        # 40e5c8 <flatcc_builder_padding_base@@Base+0x268>
  40845a:	mov    rdi,r8
  40845d:	nop    DWORD PTR [rax]
  408460:	vmovdqu ymm6,YMMWORD PTR [rdi]
  408464:	vmovdqu ymm7,YMMWORD PTR [rdi+0x20]
  408469:	vextracti128 xmm2,ymm7,0x1
  40846f:	vpshufb xmm2,xmm2,xmm8
  408474:	vpshufb xmm7,xmm7,xmm8
  408479:	vpunpcklwd xmm2,xmm7,xmm2
  40847d:	vextracti128 xmm7,ymm6,0x1
  408483:	vpshufb xmm7,xmm7,xmm9
  408488:	vpshufb xmm6,xmm6,xmm9
  40848d:	vpunpcklwd xmm6,xmm6,xmm7
  408491:	vpblendd xmm2,xmm6,xmm2,0x2
  408497:	vmovq  QWORD PTR [r15+rax*1],xmm2
  40849d:	vpsllq ymm2,ymm1,0x3
  4084a2:	vmovq  xmm6,r8
  4084a7:	vpbroadcastq ymm6,xmm6
  4084ac:	vpaddq ymm2,ymm6,ymm2
  4084b0:	vpaddq ymm2,ymm2,ymm4
  4084b4:	vpsllq ymm7,ymm0,0x3
  4084b9:	vpaddq ymm6,ymm6,ymm7
  4084bd:	vpaddq ymm6,ymm6,ymm4
  4084c1:	vpcmpeqd xmm7,xmm7,xmm7
  4084c5:	vpgatherqd xmm3,DWORD PTR [ymm6*1+0x0],xmm7
  4084cf:	vpcmpeqd xmm6,xmm6,xmm6
  4084d3:	vpgatherqd xmm7,DWORD PTR [ymm2*1+0x0],xmm6
  4084dd:	vinserti128 ymm2,ymm7,xmm3,0x1
  4084e3:	vmovdqu YMMWORD PTR [rsi+rax*4],ymm2
  4084e8:	add    rax,0x8
  4084ec:	vpaddq ymm1,ymm1,ymm5
  4084f0:	vpaddq ymm0,ymm0,ymm5
  4084f4:	add    rdi,0x40
  4084f8:	cmp    r9,rax
  4084fb:	jne    408460 <flatcc_builder_end_union_vector@@Base+0x370>
  408501:	jmp    4081aa <flatcc_builder_end_union_vector@@Base+0xba>
  408506:	lea    rdi,[rip+0x6d11]        # 40f21e <flatcc_builder_padding_base@@Base+0xebe>
  40850d:	lea    rsi,[rip+0x60ce]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408514:	lea    rcx,[rip+0x6d35]        # 40f250 <flatcc_builder_padding_base@@Base+0xef0>
  40851b:	mov    edx,0x651
  408520:	call   403060 <__assert_fail@plt>
  408525:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40852f:	nop

0000000000408530 <flatcc_builder_union_vector_count@@Base>:
  408530:	mov    rax,QWORD PTR [rdi+0x30]
  408534:	mov    eax,DWORD PTR [rax+0x14]
  408537:	ret    
  408538:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408540 <flatcc_builder_union_vector_edit@@Base>:
  408540:	mov    rax,QWORD PTR [rdi+0x18]
  408544:	ret    
  408545:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40854f:	nop

0000000000408550 <flatcc_builder_extend_union_vector@@Base>:
  408550:	push   r14
  408552:	push   rbx
  408553:	push   rax
  408554:	mov    rax,QWORD PTR [rdi+0x30]
  408558:	mov    ecx,DWORD PTR [rax+0x14]
  40855b:	add    ecx,esi
  40855d:	jb     4085e5 <flatcc_builder_extend_union_vector@@Base+0x95>
  408563:	cmp    ecx,0x20000000
  408569:	jae    4085e5 <flatcc_builder_extend_union_vector@@Base+0x95>
  40856b:	mov    rbx,rdi
  40856e:	mov    DWORD PTR [rax+0x14],ecx
  408571:	mov    r14d,DWORD PTR [rdi+0x20]
  408575:	lea    eax,[r14+rsi*8]
  408579:	mov    DWORD PTR [rdi+0x20],eax
  40857c:	cmp    eax,DWORD PTR [rdi+0x24]
  40857f:	jae    408587 <flatcc_builder_extend_union_vector@@Base+0x37>
  408581:	mov    rax,QWORD PTR [rbx+0x18]
  408585:	jmp    4085da <flatcc_builder_extend_union_vector@@Base+0x8a>
  408587:	add    eax,0x1
  40858a:	lea    rsi,[rbx+0x68]
  40858e:	mov    rdi,QWORD PTR [rbx+0x40]
  408592:	mov    edx,DWORD PTR [rbx+0x28]
  408595:	add    rdx,rax
  408598:	mov    ecx,0x1
  40859d:	mov    r8d,0x1
  4085a3:	call   QWORD PTR [rbx+0x50]
  4085a6:	test   eax,eax
  4085a8:	je     4085ae <flatcc_builder_extend_union_vector@@Base+0x5e>
  4085aa:	xor    eax,eax
  4085ac:	jmp    4085dd <flatcc_builder_extend_union_vector@@Base+0x8d>
  4085ae:	mov    ecx,DWORD PTR [rbx+0x28]
  4085b1:	mov    rax,rcx
  4085b4:	add    rax,QWORD PTR [rbx+0x68]
  4085b8:	mov    QWORD PTR [rbx+0x18],rax
  4085bc:	mov    edx,DWORD PTR [rbx+0x70]
  4085bf:	sub    edx,ecx
  4085c1:	cmp    edx,0xfffffffc
  4085c4:	mov    ecx,0xfffffffc
  4085c9:	cmovb  ecx,edx
  4085cc:	mov    DWORD PTR [rbx+0x24],ecx
  4085cf:	mov    rcx,QWORD PTR [rbx+0x30]
  4085d3:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4085da:	add    rax,r14
  4085dd:	add    rsp,0x8
  4085e1:	pop    rbx
  4085e2:	pop    r14
  4085e4:	ret    
  4085e5:	lea    rdi,[rip+0x70bf]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  4085ec:	lea    rsi,[rip+0x5fef]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4085f3:	lea    rcx,[rip+0x70cc]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  4085fa:	mov    edx,0x37c
  4085ff:	call   403060 <__assert_fail@plt>
  408604:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40860e:	xchg   ax,ax

0000000000408610 <flatcc_builder_truncate_union_vector@@Base>:
  408610:	push   rax
  408611:	mov    rcx,QWORD PTR [rdi+0x30]
  408615:	movzx  edx,WORD PTR [rcx+0xe]
  408619:	cmp    edx,0x7
  40861c:	jne    408650 <flatcc_builder_truncate_union_vector@@Base+0x40>
  40861e:	mov    rax,rsi
  408621:	mov    edx,DWORD PTR [rcx+0x14]
  408624:	sub    edx,eax
  408626:	jb     40866f <flatcc_builder_truncate_union_vector@@Base+0x5f>
  408628:	mov    DWORD PTR [rcx+0x14],edx
  40862b:	mov    rcx,QWORD PTR [rdi+0x30]
  40862f:	imul   eax,DWORD PTR [rcx+0x10]
  408633:	mov    ecx,DWORD PTR [rdi+0x20]
  408636:	sub    ecx,eax
  408638:	mov    DWORD PTR [rdi+0x20],ecx
  40863b:	add    rcx,QWORD PTR [rdi+0x18]
  40863f:	xor    esi,esi
  408641:	mov    rdi,rcx
  408644:	mov    rdx,rax
  408647:	call   403070 <memset@plt>
  40864c:	xor    eax,eax
  40864e:	pop    rcx
  40864f:	ret    
  408650:	lea    rdi,[rip+0x6bc7]        # 40f21e <flatcc_builder_padding_base@@Base+0xebe>
  408657:	lea    rsi,[rip+0x5f84]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40865e:	lea    rcx,[rip+0x6c3e]        # 40f2a3 <flatcc_builder_padding_base@@Base+0xf43>
  408665:	mov    edx,0x681
  40866a:	call   403060 <__assert_fail@plt>
  40866f:	lea    rdi,[rip+0x660c]        # 40ec82 <flatcc_builder_padding_base@@Base+0x922>
  408676:	lea    rsi,[rip+0x5f65]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40867d:	lea    rcx,[rip+0x6c1f]        # 40f2a3 <flatcc_builder_padding_base@@Base+0xf43>
  408684:	mov    edx,0x682
  408689:	call   403060 <__assert_fail@plt>
  40868e:	xchg   ax,ax

0000000000408690 <flatcc_builder_union_vector_push@@Base>:
  408690:	push   r15
  408692:	push   r14
  408694:	push   rbx
  408695:	mov    rax,QWORD PTR [rdi+0x30]
  408699:	movzx  ecx,WORD PTR [rax+0xe]
  40869d:	cmp    ecx,0x7
  4086a0:	jne    40873a <flatcc_builder_union_vector_push@@Base+0xaa>
  4086a6:	mov    ecx,DWORD PTR [rax+0x14]
  4086a9:	cmp    ecx,0x1fffffff
  4086af:	je     4086fc <flatcc_builder_union_vector_push@@Base+0x6c>
  4086b1:	mov    r14,rsi
  4086b4:	mov    rbx,rdi
  4086b7:	add    ecx,0x1
  4086ba:	mov    DWORD PTR [rax+0x14],ecx
  4086bd:	mov    r15d,DWORD PTR [rdi+0x20]
  4086c1:	lea    eax,[r15+0x8]
  4086c5:	mov    DWORD PTR [rdi+0x20],eax
  4086c8:	cmp    eax,DWORD PTR [rdi+0x24]
  4086cb:	jae    4086d8 <flatcc_builder_union_vector_push@@Base+0x48>
  4086cd:	mov    rax,QWORD PTR [rbx+0x18]
  4086d1:	add    rax,r15
  4086d4:	jne    408731 <flatcc_builder_union_vector_push@@Base+0xa1>
  4086d6:	jmp    4086fc <flatcc_builder_union_vector_push@@Base+0x6c>
  4086d8:	lea    eax,[r15+0x9]
  4086dc:	lea    rsi,[rbx+0x68]
  4086e0:	mov    rdi,QWORD PTR [rbx+0x40]
  4086e4:	mov    edx,DWORD PTR [rbx+0x28]
  4086e7:	add    rdx,rax
  4086ea:	mov    ecx,0x1
  4086ef:	mov    r8d,0x1
  4086f5:	call   QWORD PTR [rbx+0x50]
  4086f8:	test   eax,eax
  4086fa:	je     408700 <flatcc_builder_union_vector_push@@Base+0x70>
  4086fc:	xor    eax,eax
  4086fe:	jmp    408734 <flatcc_builder_union_vector_push@@Base+0xa4>
  408700:	mov    ecx,DWORD PTR [rbx+0x28]
  408703:	mov    rax,rcx
  408706:	add    rax,QWORD PTR [rbx+0x68]
  40870a:	mov    QWORD PTR [rbx+0x18],rax
  40870e:	mov    edx,DWORD PTR [rbx+0x70]
  408711:	sub    edx,ecx
  408713:	cmp    edx,0xfffffffc
  408716:	mov    ecx,0xfffffffc
  40871b:	cmovb  ecx,edx
  40871e:	mov    DWORD PTR [rbx+0x24],ecx
  408721:	mov    rcx,QWORD PTR [rbx+0x30]
  408725:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40872c:	add    rax,r15
  40872f:	je     4086fc <flatcc_builder_union_vector_push@@Base+0x6c>
  408731:	mov    QWORD PTR [rax],r14
  408734:	pop    rbx
  408735:	pop    r14
  408737:	pop    r15
  408739:	ret    
  40873a:	lea    rdi,[rip+0x6add]        # 40f21e <flatcc_builder_padding_base@@Base+0xebe>
  408741:	lea    rsi,[rip+0x5e9a]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408748:	lea    rcx,[rip+0x6b99]        # 40f2e8 <flatcc_builder_padding_base@@Base+0xf88>
  40874f:	mov    edx,0x68d
  408754:	call   403060 <__assert_fail@plt>
  408759:	nop    DWORD PTR [rax+0x0]

0000000000408760 <flatcc_builder_append_union_vector@@Base>:
  408760:	push   r15
  408762:	push   r14
  408764:	push   r13
  408766:	push   r12
  408768:	push   rbx
  408769:	mov    rax,QWORD PTR [rdi+0x30]
  40876d:	movzx  ecx,WORD PTR [rax+0xe]
  408771:	cmp    ecx,0x7
  408774:	jne    408851 <flatcc_builder_append_union_vector@@Base+0xf1>
  40877a:	mov    r15,rdx
  40877d:	mov    ecx,DWORD PTR [rax+0x14]
  408780:	add    ecx,r15d
  408783:	jb     408832 <flatcc_builder_append_union_vector@@Base+0xd2>
  408789:	cmp    ecx,0x20000000
  40878f:	jae    408832 <flatcc_builder_append_union_vector@@Base+0xd2>
  408795:	mov    r14,rsi
  408798:	mov    rbx,rdi
  40879b:	mov    DWORD PTR [rax+0x14],ecx
  40879e:	mov    r13d,DWORD PTR [rdi+0x20]
  4087a2:	lea    eax,[r13+r15*8+0x0]
  4087a7:	mov    DWORD PTR [rdi+0x20],eax
  4087aa:	cmp    eax,DWORD PTR [rdi+0x24]
  4087ad:	jae    4087ba <flatcc_builder_append_union_vector@@Base+0x5a>
  4087af:	mov    r12,QWORD PTR [rbx+0x18]
  4087b3:	add    r12,r13
  4087b6:	jne    408813 <flatcc_builder_append_union_vector@@Base+0xb3>
  4087b8:	jmp    4087dd <flatcc_builder_append_union_vector@@Base+0x7d>
  4087ba:	add    eax,0x1
  4087bd:	lea    rsi,[rbx+0x68]
  4087c1:	mov    rdi,QWORD PTR [rbx+0x40]
  4087c5:	mov    edx,DWORD PTR [rbx+0x28]
  4087c8:	add    rdx,rax
  4087cb:	mov    ecx,0x1
  4087d0:	mov    r8d,0x1
  4087d6:	call   QWORD PTR [rbx+0x50]
  4087d9:	test   eax,eax
  4087db:	je     4087e2 <flatcc_builder_append_union_vector@@Base+0x82>
  4087dd:	xor    r12d,r12d
  4087e0:	jmp    408825 <flatcc_builder_append_union_vector@@Base+0xc5>
  4087e2:	mov    eax,DWORD PTR [rbx+0x28]
  4087e5:	mov    r12,rax
  4087e8:	add    r12,QWORD PTR [rbx+0x68]
  4087ec:	mov    QWORD PTR [rbx+0x18],r12
  4087f0:	mov    ecx,DWORD PTR [rbx+0x70]
  4087f3:	sub    ecx,eax
  4087f5:	cmp    ecx,0xfffffffc
  4087f8:	mov    eax,0xfffffffc
  4087fd:	cmovb  eax,ecx
  408800:	mov    DWORD PTR [rbx+0x24],eax
  408803:	mov    rax,QWORD PTR [rbx+0x30]
  408807:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40880e:	add    r12,r13
  408811:	je     4087dd <flatcc_builder_append_union_vector@@Base+0x7d>
  408813:	shl    r15d,0x3
  408817:	mov    edx,r15d
  40881a:	mov    rdi,r12
  40881d:	mov    rsi,r14
  408820:	call   4030b0 <memcpy@plt>
  408825:	mov    rax,r12
  408828:	pop    rbx
  408829:	pop    r12
  40882b:	pop    r13
  40882d:	pop    r14
  40882f:	pop    r15
  408831:	ret    
  408832:	lea    rdi,[rip+0x6e72]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  408839:	lea    rsi,[rip+0x5da2]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408840:	lea    rcx,[rip+0x6e7f]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  408847:	mov    edx,0x37c
  40884c:	call   403060 <__assert_fail@plt>
  408851:	lea    rdi,[rip+0x69c6]        # 40f21e <flatcc_builder_padding_base@@Base+0xebe>
  408858:	lea    rsi,[rip+0x5d83]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40885f:	lea    rcx,[rip+0x6aef]        # 40f355 <flatcc_builder_padding_base@@Base+0xff5>
  408866:	mov    edx,0x69c
  40886b:	call   403060 <__assert_fail@plt>

0000000000408870 <flatcc_builder_create_string@@Base>:
  408870:	push   rbp
  408871:	push   rbx
  408872:	sub    rsp,0x98
  408879:	xor    ebp,ebp
  40887b:	mov    rax,rdx
  40887e:	shr    rax,0x20
  408882:	jne    408958 <flatcc_builder_create_string@@Base+0xe8>
  408888:	mov    rbx,rdi
  40888b:	mov    DWORD PTR [rsp+0x4],edx
  40888f:	mov    ebp,DWORD PTR [rdi+0xf0]
  408895:	mov    eax,edx
  408897:	not    eax
  408899:	add    eax,ebp
  40889b:	and    eax,0x3
  40889e:	add    eax,0x1
  4088a1:	mov    QWORD PTR [rsp+0x8],0x4
  4088aa:	lea    rcx,[rsp+0x4]
  4088af:	mov    QWORD PTR [rsp+0x18],rcx
  4088b4:	mov    QWORD PTR [rsp+0x20],0x4
  4088bd:	mov    DWORD PTR [rsp+0x10],0x1
  4088c5:	test   rdx,rdx
  4088c8:	je     4088ec <flatcc_builder_create_string@@Base+0x7c>
  4088ca:	lea    rcx,[rdx+0x4]
  4088ce:	mov    QWORD PTR [rsp+0x8],rcx
  4088d3:	mov    QWORD PTR [rsp+0x28],rsi
  4088d8:	mov    QWORD PTR [rsp+0x30],rdx
  4088dd:	mov    DWORD PTR [rsp+0x10],0x2
  4088e5:	mov    edx,0x2
  4088ea:	jmp    4088f6 <flatcc_builder_create_string@@Base+0x86>
  4088ec:	mov    edx,0x1
  4088f1:	mov    ecx,0x4
  4088f6:	mov    esi,eax
  4088f8:	lea    r8,[rcx+rsi*1]
  4088fc:	mov    QWORD PTR [rsp+0x8],r8
  408901:	mov    eax,edx
  408903:	shl    rax,0x4
  408907:	lea    rdi,[rip+0x5a52]        # 40e360 <flatcc_builder_padding_base@@Base>
  40890e:	mov    QWORD PTR [rsp+rax*1+0x18],rdi
  408913:	mov    QWORD PTR [rsp+rax*1+0x20],rsi
  408918:	add    edx,0x1
  40891b:	mov    DWORD PTR [rsp+0x10],edx
  40891f:	cmp    r8,0x11
  408923:	setb   al
  408926:	add    rcx,rsi
  408929:	add    rcx,0xfffffffffffffff0
  40892d:	shr    rcx,0x20
  408931:	sete   cl
  408934:	test   r8d,r8d
  408937:	jle    408964 <flatcc_builder_create_string@@Base+0xf4>
  408939:	or     al,cl
  40893b:	je     408964 <flatcc_builder_create_string@@Base+0xf4>
  40893d:	sub    ebp,r8d
  408940:	mov    rdi,QWORD PTR [rbx+0x38]
  408944:	lea    rsi,[rsp+0x18]
  408949:	mov    ecx,ebp
  40894b:	call   QWORD PTR [rbx+0x48]
  40894e:	test   eax,eax
  408950:	jne    408983 <flatcc_builder_create_string@@Base+0x113>
  408952:	mov    DWORD PTR [rbx+0xf0],ebp
  408958:	mov    eax,ebp
  40895a:	add    rsp,0x98
  408961:	pop    rbx
  408962:	pop    rbp
  408963:	ret    
  408964:	lea    rdi,[rip+0x6e37]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  40896b:	lea    rsi,[rip+0x5c70]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408972:	lea    rcx,[rip+0x6ce8]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  408979:	mov    edx,0x287
  40897e:	call   403060 <__assert_fail@plt>
  408983:	lea    rdi,[rip+0x6e18]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  40898a:	lea    rsi,[rip+0x5c51]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408991:	lea    rcx,[rip+0x6cc9]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  408998:	mov    edx,0x28b
  40899d:	call   403060 <__assert_fail@plt>
  4089a2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4089ac:	nop    DWORD PTR [rax+0x0]

00000000004089b0 <flatcc_builder_create_string_str@@Base>:
  4089b0:	push   r14
  4089b2:	push   rbx
  4089b3:	push   rax
  4089b4:	mov    rbx,rsi
  4089b7:	mov    r14,rdi
  4089ba:	mov    rdi,rsi
  4089bd:	call   403050 <strlen@plt>
  4089c2:	mov    rdi,r14
  4089c5:	mov    rsi,rbx
  4089c8:	mov    rdx,rax
  4089cb:	add    rsp,0x8
  4089cf:	pop    rbx
  4089d0:	pop    r14
  4089d2:	jmp    408870 <flatcc_builder_create_string@@Base>
  4089d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004089e0 <flatcc_builder_create_string_strn@@Base>:
  4089e0:	push   r15
  4089e2:	push   r14
  4089e4:	push   rbx
  4089e5:	mov    rbx,rdx
  4089e8:	mov    r14,rsi
  4089eb:	mov    r15,rdi
  4089ee:	xor    esi,esi
  4089f0:	mov    rdi,r14
  4089f3:	call   403080 <memchr@plt>
  4089f8:	mov    rcx,rax
  4089fb:	sub    rcx,r14
  4089fe:	test   rax,rax
  408a01:	cmovne rbx,rcx
  408a05:	mov    rdi,r15
  408a08:	mov    rsi,r14
  408a0b:	mov    rdx,rbx
  408a0e:	pop    rbx
  408a0f:	pop    r14
  408a11:	pop    r15
  408a13:	jmp    408870 <flatcc_builder_create_string@@Base>
  408a18:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408a20 <flatcc_builder_end_string@@Base>:
  408a20:	push   rbp
  408a21:	push   rbx
  408a22:	push   rax
  408a23:	mov    rax,QWORD PTR [rdi+0x30]
  408a27:	movzx  ecx,WORD PTR [rax+0xe]
  408a2b:	cmp    ecx,0x6
  408a2e:	jne    408ac7 <flatcc_builder_end_string@@Base+0xa7>
  408a34:	mov    rbx,rdi
  408a37:	mov    edx,DWORD PTR [rax+0x14]
  408a3a:	cmp    edx,DWORD PTR [rdi+0x20]
  408a3d:	jne    408ae6 <flatcc_builder_end_string@@Base+0xc6>
  408a43:	mov    rsi,QWORD PTR [rbx+0x18]
  408a47:	mov    rdi,rbx
  408a4a:	call   408870 <flatcc_builder_create_string@@Base>
  408a4f:	mov    ebp,eax
  408a51:	test   eax,eax
  408a53:	je     408abe <flatcc_builder_end_string@@Base+0x9e>
  408a55:	mov    rdi,QWORD PTR [rbx+0x18]
  408a59:	mov    edx,DWORD PTR [rbx+0x20]
  408a5c:	xor    esi,esi
  408a5e:	call   403070 <memset@plt>
  408a63:	mov    rax,QWORD PTR [rbx+0x30]
  408a67:	mov    ecx,DWORD PTR [rax+0x8]
  408a6a:	mov    DWORD PTR [rbx+0x20],ecx
  408a6d:	mov    ecx,DWORD PTR [rax]
  408a6f:	mov    DWORD PTR [rbx+0x28],ecx
  408a72:	mov    edx,DWORD PTR [rax+0x4]
  408a75:	mov    rsi,rcx
  408a78:	add    rsi,QWORD PTR [rbx+0x68]
  408a7c:	mov    QWORD PTR [rbx+0x18],rsi
  408a80:	mov    esi,DWORD PTR [rbx+0x70]
  408a83:	sub    esi,ecx
  408a85:	cmp    esi,edx
  408a87:	cmova  esi,edx
  408a8a:	mov    DWORD PTR [rbx+0x24],esi
  408a8d:	movzx  ecx,WORD PTR [rbx+0xea]
  408a94:	cmp    WORD PTR [rbx+0xe8],cx
  408a9b:	jae    408aa4 <flatcc_builder_end_string@@Base+0x84>
  408a9d:	mov    WORD PTR [rbx+0xe8],cx
  408aa4:	movzx  ecx,WORD PTR [rax+0xc]
  408aa8:	mov    WORD PTR [rbx+0xea],cx
  408aaf:	add    rax,0xffffffffffffffdc
  408ab3:	mov    QWORD PTR [rbx+0x30],rax
  408ab7:	add    DWORD PTR [rbx+0x104],0xffffffff
  408abe:	mov    eax,ebp
  408ac0:	add    rsp,0x8
  408ac4:	pop    rbx
  408ac5:	pop    rbp
  408ac6:	ret    
  408ac7:	lea    rdi,[rip+0x6053]        # 40eb21 <flatcc_builder_padding_base@@Base+0x7c1>
  408ace:	lea    rsi,[rip+0x5b0d]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408ad5:	lea    rcx,[rip+0x68f8]        # 40f3d4 <flatcc_builder_padding_base@@Base+0x1074>
  408adc:	mov    edx,0x6c4
  408ae1:	call   403060 <__assert_fail@plt>
  408ae6:	lea    rdi,[rip+0x692a]        # 40f417 <flatcc_builder_padding_base@@Base+0x10b7>
  408aed:	lea    rsi,[rip+0x5aee]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408af4:	lea    rcx,[rip+0x68d9]        # 40f3d4 <flatcc_builder_padding_base@@Base+0x1074>
  408afb:	mov    edx,0x6c5
  408b00:	call   403060 <__assert_fail@plt>
  408b05:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408b0f:	nop

0000000000408b10 <flatcc_builder_string_edit@@Base>:
  408b10:	mov    rax,QWORD PTR [rdi+0x18]
  408b14:	ret    
  408b15:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408b1f:	nop

0000000000408b20 <flatcc_builder_string_len@@Base>:
  408b20:	mov    rax,QWORD PTR [rdi+0x30]
  408b24:	mov    eax,DWORD PTR [rax+0x14]
  408b27:	ret    
  408b28:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408b30 <flatcc_builder_table_edit@@Base>:
  408b30:	mov    rax,QWORD PTR [rdi+0x30]
  408b34:	movzx  eax,WORD PTR [rax+0xe]
  408b38:	cmp    eax,0x3
  408b3b:	jne    408b48 <flatcc_builder_table_edit@@Base+0x18>
  408b3d:	mov    eax,DWORD PTR [rdi+0x20]
  408b40:	add    rax,QWORD PTR [rdi+0x18]
  408b44:	sub    rax,rsi
  408b47:	ret    
  408b48:	push   rax
  408b49:	lea    rdi,[rip+0x62c1]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  408b50:	lea    rsi,[rip+0x5a8b]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408b57:	lea    rcx,[rip+0x696b]        # 40f4c9 <flatcc_builder_padding_base@@Base+0x1169>
  408b5e:	mov    edx,0x702
  408b63:	call   403060 <__assert_fail@plt>
  408b68:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408b70 <flatcc_builder_table_add_copy@@Base>:
  408b70:	push   r15
  408b72:	push   r14
  408b74:	push   rbx
  408b75:	mov    r15,rcx
  408b78:	mov    r14,rdx
  408b7b:	mov    rdx,rcx
  408b7e:	mov    ecx,r8d
  408b81:	call   407ac0 <flatcc_builder_table_add@@Base>
  408b86:	mov    rbx,rax
  408b89:	test   rax,rax
  408b8c:	je     408b9c <flatcc_builder_table_add_copy@@Base+0x2c>
  408b8e:	mov    rdi,rbx
  408b91:	mov    rsi,r14
  408b94:	mov    rdx,r15
  408b97:	call   4030b0 <memcpy@plt>
  408b9c:	mov    rax,rbx
  408b9f:	pop    rbx
  408ba0:	pop    r14
  408ba2:	pop    r15
  408ba4:	ret    
  408ba5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408baf:	nop

0000000000408bb0 <flatcc_builder_push_buffer_alignment@@Base>:
  408bb0:	movzx  eax,WORD PTR [rdi+0xe8]
  408bb7:	mov    WORD PTR [rdi+0xe8],0x4
  408bc0:	ret    
  408bc1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408bcb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408bd0 <flatcc_builder_pop_buffer_alignment@@Base>:
  408bd0:	cmp    WORD PTR [rdi+0xe8],si
  408bd7:	jae    408be0 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  408bd9:	mov    WORD PTR [rdi+0xe8],si
  408be0:	ret    
  408be1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408beb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408bf0 <flatcc_builder_get_buffer_alignment@@Base>:
  408bf0:	movzx  eax,WORD PTR [rdi+0xe8]
  408bf7:	ret    
  408bf8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408c00 <flatcc_builder_set_vtable_clustering@@Base>:
  408c00:	xor    eax,eax
  408c02:	test   esi,esi
  408c04:	sete   al
  408c07:	mov    DWORD PTR [rdi+0x124],eax
  408c0d:	ret    
  408c0e:	xchg   ax,ax

0000000000408c10 <flatcc_builder_set_block_align@@Base>:
  408c10:	mov    WORD PTR [rdi+0xec],si
  408c17:	ret    
  408c18:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408c20 <flatcc_builder_get_level@@Base>:
  408c20:	mov    eax,DWORD PTR [rdi+0x104]
  408c26:	ret    
  408c27:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408c30 <flatcc_builder_set_max_level@@Base>:
  408c30:	mov    DWORD PTR [rdi+0x120],esi
  408c36:	cmp    DWORD PTR [rdi+0x108],esi
  408c3c:	jge    408c44 <flatcc_builder_set_max_level@@Base+0x14>
  408c3e:	mov    DWORD PTR [rdi+0x108],esi
  408c44:	ret    
  408c45:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408c4f:	nop

0000000000408c50 <flatcc_builder_get_buffer_size@@Base>:
  408c50:	movsxd rax,DWORD PTR [rdi+0xf4]
  408c57:	movsxd rcx,DWORD PTR [rdi+0xf0]
  408c5e:	sub    rax,rcx
  408c61:	ret    
  408c62:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408c6c:	nop    DWORD PTR [rax+0x0]

0000000000408c70 <flatcc_builder_get_buffer_start@@Base>:
  408c70:	mov    eax,DWORD PTR [rdi+0xf0]
  408c76:	ret    
  408c77:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408c80 <flatcc_builder_get_buffer_end@@Base>:
  408c80:	mov    eax,DWORD PTR [rdi+0xf4]
  408c86:	ret    
  408c87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408c90 <flatcc_builder_set_vtable_cache_limit@@Base>:
  408c90:	mov    QWORD PTR [rdi+0x118],rsi
  408c97:	ret    
  408c98:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408ca0 <flatcc_builder_set_identifier@@Base>:
  408ca0:	test   rsi,rsi
  408ca3:	jne    408cac <flatcc_builder_set_identifier@@Base+0xc>
  408ca5:	lea    rsi,[rip+0x56b4]        # 40e360 <flatcc_builder_padding_base@@Base>
  408cac:	mov    eax,DWORD PTR [rsi]
  408cae:	mov    DWORD PTR [rdi+0x110],eax
  408cb4:	ret    
  408cb5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408cbf:	nop

0000000000408cc0 <flatcc_builder_get_type@@Base>:
  408cc0:	mov    rax,QWORD PTR [rdi+0x30]
  408cc4:	test   rax,rax
  408cc7:	je     408cce <flatcc_builder_get_type@@Base+0xe>
  408cc9:	movzx  eax,WORD PTR [rax+0xe]
  408ccd:	ret    
  408cce:	xor    eax,eax
  408cd0:	ret    
  408cd1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408cdb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408ce0 <flatcc_builder_get_type_at@@Base>:
  408ce0:	xor    eax,eax
  408ce2:	test   esi,esi
  408ce4:	jle    408d02 <flatcc_builder_get_type_at@@Base+0x22>
  408ce6:	mov    ecx,DWORD PTR [rdi+0x104]
  408cec:	cmp    ecx,esi
  408cee:	jl     408d02 <flatcc_builder_get_type_at@@Base+0x22>
  408cf0:	mov    rax,QWORD PTR [rdi+0x30]
  408cf4:	sub    esi,ecx
  408cf6:	movsxd rcx,esi
  408cf9:	lea    rcx,[rcx+rcx*8]
  408cfd:	movzx  eax,WORD PTR [rax+rcx*4+0xe]
  408d02:	ret    
  408d03:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408d0d:	nop    DWORD PTR [rax]

0000000000408d10 <flatcc_builder_get_direct_buffer@@Base>:
  408d10:	cmp    DWORD PTR [rdi+0x128],0x0
  408d17:	je     408d29 <flatcc_builder_get_direct_buffer@@Base+0x19>
  408d19:	mov    rax,QWORD PTR [rdi+0x130]
  408d20:	cmp    rax,QWORD PTR [rdi+0x138]
  408d27:	je     408d38 <flatcc_builder_get_direct_buffer@@Base+0x28>
  408d29:	test   rsi,rsi
  408d2c:	je     408d35 <flatcc_builder_get_direct_buffer@@Base+0x25>
  408d2e:	mov    QWORD PTR [rsi],0x0
  408d35:	xor    eax,eax
  408d37:	ret    
  408d38:	test   rsi,rsi
  408d3b:	je     408d47 <flatcc_builder_get_direct_buffer@@Base+0x37>
  408d3d:	mov    rax,QWORD PTR [rdi+0x160]
  408d44:	mov    QWORD PTR [rsi],rax
  408d47:	mov    rax,QWORD PTR [rdi+0x140]
  408d4e:	ret    
  408d4f:	nop

0000000000408d50 <flatcc_builder_copy_buffer@@Base>:
  408d50:	push   rax
  408d51:	cmp    DWORD PTR [rdi+0x128],0x0
  408d58:	je     408d6d <flatcc_builder_copy_buffer@@Base+0x1d>
  408d5a:	add    rdi,0x130
  408d61:	call   409670 <flatcc_emitter_copy_buffer@@Base>
  408d66:	test   rax,rax
  408d69:	je     408d71 <flatcc_builder_copy_buffer@@Base+0x21>
  408d6b:	pop    rcx
  408d6c:	ret    
  408d6d:	xor    eax,eax
  408d6f:	pop    rcx
  408d70:	ret    
  408d71:	lea    rdi,[rip+0x5ad8]        # 40e850 <flatcc_builder_padding_base@@Base+0x4f0>
  408d78:	lea    rsi,[rip+0x5863]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408d7f:	lea    rcx,[rip+0x67ce]        # 40f554 <flatcc_builder_padding_base@@Base+0x11f4>
  408d86:	mov    edx,0x786
  408d8b:	call   403060 <__assert_fail@plt>

0000000000408d90 <flatcc_builder_finalize_buffer@@Base>:
  408d90:	push   r15
  408d92:	push   r14
  408d94:	push   rbx
  408d95:	mov    rbx,rdi
  408d98:	movsxd r14,DWORD PTR [rdi+0xf4]
  408d9f:	movsxd rax,DWORD PTR [rdi+0xf0]
  408da6:	sub    r14,rax
  408da9:	test   rsi,rsi
  408dac:	je     408db1 <flatcc_builder_finalize_buffer@@Base+0x21>
  408dae:	mov    QWORD PTR [rsi],r14
  408db1:	mov    rdi,r14
  408db4:	call   4030c0 <malloc@plt>
  408db9:	test   rax,rax
  408dbc:	je     408ded <flatcc_builder_finalize_buffer@@Base+0x5d>
  408dbe:	cmp    DWORD PTR [rbx+0x128],0x0
  408dc5:	je     408e0c <flatcc_builder_finalize_buffer@@Base+0x7c>
  408dc7:	mov    r15,rax
  408dca:	add    rbx,0x130
  408dd1:	mov    rdi,rbx
  408dd4:	mov    rsi,rax
  408dd7:	mov    rdx,r14
  408dda:	call   409670 <flatcc_emitter_copy_buffer@@Base>
  408ddf:	test   rax,rax
  408de2:	je     408e2b <flatcc_builder_finalize_buffer@@Base+0x9b>
  408de4:	mov    rax,r15
  408de7:	pop    rbx
  408de8:	pop    r14
  408dea:	pop    r15
  408dec:	ret    
  408ded:	lea    rdi,[rip+0x69ae]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  408df4:	lea    rsi,[rip+0x57e7]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408dfb:	lea    rcx,[rip+0x6797]        # 40f599 <flatcc_builder_padding_base@@Base+0x1239>
  408e02:	mov    edx,0x798
  408e07:	call   403060 <__assert_fail@plt>
  408e0c:	lea    rdi,[rip+0x698f]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  408e13:	lea    rsi,[rip+0x57c8]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408e1a:	lea    rcx,[rip+0x6778]        # 40f599 <flatcc_builder_padding_base@@Base+0x1239>
  408e21:	mov    edx,0x79c
  408e26:	call   403060 <__assert_fail@plt>
  408e2b:	lea    rdi,[rip+0x5a1e]        # 40e850 <flatcc_builder_padding_base@@Base+0x4f0>
  408e32:	lea    rsi,[rip+0x57a9]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408e39:	lea    rcx,[rip+0x6714]        # 40f554 <flatcc_builder_padding_base@@Base+0x11f4>
  408e40:	mov    edx,0x786
  408e45:	call   403060 <__assert_fail@plt>
  408e4a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408e50 <flatcc_builder_finalize_aligned_buffer@@Base>:
  408e50:	push   r15
  408e52:	push   r14
  408e54:	push   r12
  408e56:	push   rbx
  408e57:	push   rax
  408e58:	mov    r14,rsi
  408e5b:	mov    r15,rdi
  408e5e:	movsxd rax,DWORD PTR [rdi+0xf4]
  408e65:	movsxd rcx,DWORD PTR [rdi+0xf0]
  408e6c:	sub    rax,rcx
  408e6f:	test   rsi,rsi
  408e72:	je     408e77 <flatcc_builder_finalize_aligned_buffer@@Base+0x27>
  408e74:	mov    QWORD PTR [r14],rax
  408e77:	movzx  ecx,WORD PTR [r15+0xe8]
  408e7f:	add    rax,rcx
  408e82:	add    rax,0xffffffffffffffff
  408e86:	mov    rbx,rcx
  408e89:	neg    rbx
  408e8c:	and    rbx,rax
  408e8f:	cmp    rcx,0x8
  408e93:	mov    QWORD PTR [rsp],0x0
  408e9b:	mov    esi,0x8
  408ea0:	cmova  rsi,rcx
  408ea4:	mov    rdi,rsp
  408ea7:	mov    rdx,rbx
  408eaa:	call   4030f0 <posix_memalign@plt>
  408eaf:	mov    r12,QWORD PTR [rsp]
  408eb3:	test   eax,eax
  408eb5:	je     408ec6 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  408eb7:	test   r12,r12
  408eba:	je     408ec6 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  408ebc:	mov    rdi,r12
  408ebf:	call   403030 <free@plt>
  408ec4:	jmp    408f0e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  408ec6:	test   r12,r12
  408ec9:	je     408f0e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  408ecb:	cmp    DWORD PTR [r15+0x128],0x0
  408ed3:	je     408ebc <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
  408ed5:	add    r15,0x130
  408edc:	mov    rdi,r15
  408edf:	mov    rsi,r12
  408ee2:	mov    rdx,rbx
  408ee5:	call   409670 <flatcc_emitter_copy_buffer@@Base>
  408eea:	test   rax,rax
  408eed:	jne    408f1d <flatcc_builder_finalize_aligned_buffer@@Base+0xcd>
  408eef:	lea    rdi,[rip+0x595a]        # 40e850 <flatcc_builder_padding_base@@Base+0x4f0>
  408ef6:	lea    rsi,[rip+0x56e5]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408efd:	lea    rcx,[rip+0x6650]        # 40f554 <flatcc_builder_padding_base@@Base+0x11f4>
  408f04:	mov    edx,0x786
  408f09:	call   403060 <__assert_fail@plt>
  408f0e:	test   r14,r14
  408f11:	je     408f1a <flatcc_builder_finalize_aligned_buffer@@Base+0xca>
  408f13:	mov    QWORD PTR [r14],0x0
  408f1a:	xor    r12d,r12d
  408f1d:	mov    rax,r12
  408f20:	add    rsp,0x8
  408f24:	pop    rbx
  408f25:	pop    r12
  408f27:	pop    r14
  408f29:	pop    r15
  408f2b:	ret    
  408f2c:	nop    DWORD PTR [rax+0x0]

0000000000408f30 <flatcc_builder_aligned_alloc@@Base>:
  408f30:	push   rax
  408f31:	mov    rax,rsi
  408f34:	mov    QWORD PTR [rsp],0x0
  408f3c:	cmp    rdi,0x8
  408f40:	mov    esi,0x8
  408f45:	cmova  rsi,rdi
  408f49:	mov    rdi,rsp
  408f4c:	mov    rdx,rax
  408f4f:	call   4030f0 <posix_memalign@plt>
  408f54:	mov    ecx,eax
  408f56:	mov    rax,QWORD PTR [rsp]
  408f5a:	test   ecx,ecx
  408f5c:	je     408f75 <flatcc_builder_aligned_alloc@@Base+0x45>
  408f5e:	test   rax,rax
  408f61:	je     408f75 <flatcc_builder_aligned_alloc@@Base+0x45>
  408f63:	mov    rdi,rax
  408f66:	call   403030 <free@plt>
  408f6b:	mov    QWORD PTR [rsp],0x0
  408f73:	xor    eax,eax
  408f75:	pop    rcx
  408f76:	ret    
  408f77:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408f80 <flatcc_builder_aligned_free@@Base>:
  408f80:	jmp    403030 <free@plt>
  408f85:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408f8f:	nop

0000000000408f90 <flatcc_builder_get_emit_context@@Base>:
  408f90:	mov    rax,QWORD PTR [rdi+0x38]
  408f94:	ret    
  408f95:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408f9f:	nop

0000000000408fa0 <flatcc_emitter_recycle_page@@Base>:
  408fa0:	mov    rcx,QWORD PTR [rdi]
  408fa3:	mov    eax,0xffffffff
  408fa8:	cmp    rcx,rsi
  408fab:	je     409002 <flatcc_emitter_recycle_page@@Base+0x62>
  408fad:	cmp    QWORD PTR [rdi+0x8],rsi
  408fb1:	je     409002 <flatcc_emitter_recycle_page@@Base+0x62>
  408fb3:	mov    rax,QWORD PTR [rsi+0xb80]
  408fba:	mov    rdx,QWORD PTR [rsi+0xb88]
  408fc1:	mov    QWORD PTR [rax+0xb88],rdx
  408fc8:	mov    rdx,QWORD PTR [rsi+0xb88]
  408fcf:	mov    QWORD PTR [rdx+0xb80],rax
  408fd6:	mov    rax,QWORD PTR [rcx+0xb88]
  408fdd:	mov    QWORD PTR [rsi+0xb88],rax
  408fe4:	mov    QWORD PTR [rsi+0xb80],rcx
  408feb:	mov    QWORD PTR [rax+0xb80],rsi
  408ff2:	mov    rax,QWORD PTR [rsi+0xb80]
  408ff9:	mov    QWORD PTR [rax+0xb88],rsi
  409000:	xor    eax,eax
  409002:	ret    
  409003:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40900d:	nop    DWORD PTR [rax]

0000000000409010 <flatcc_emitter_reset@@Base>:
  409010:	push   r14
  409012:	push   rbx
  409013:	push   rax
  409014:	mov    rax,QWORD PTR [rdi]
  409017:	test   rax,rax
  40901a:	je     4090fb <flatcc_emitter_reset@@Base+0xeb>
  409020:	mov    rbx,rdi
  409023:	mov    QWORD PTR [rdi+0x8],rax
  409027:	lea    rcx,[rax+0x5c0]
  40902e:	mov    QWORD PTR [rdi+0x10],rcx
  409032:	mov    QWORD PTR [rdi+0x20],rcx
  409036:	mov    QWORD PTR [rdi+0x18],0x5c0
  40903e:	mov    QWORD PTR [rdi+0x28],0x5c0
  409046:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  409050:	mov    rcx,QWORD PTR [rdi+0x30]
  409054:	mov    rdx,QWORD PTR [rdi+0x40]
  409058:	test   rdx,rdx
  40905b:	jne    409064 <flatcc_emitter_reset@@Base+0x54>
  40905d:	mov    QWORD PTR [rbx+0x40],rcx
  409061:	mov    rdx,rcx
  409064:	lea    rdx,[rdx+rdx*2]
  409068:	shr    rdx,0x2
  40906c:	shr    rcx,0x2
  409070:	add    rcx,rdx
  409073:	mov    QWORD PTR [rbx+0x40],rcx
  409077:	mov    QWORD PTR [rbx+0x30],0x0
  40907f:	add    rcx,rcx
  409082:	cmp    rcx,QWORD PTR [rbx+0x38]
  409086:	jae    4090fb <flatcc_emitter_reset@@Base+0xeb>
  409088:	mov    rdi,QWORD PTR [rax+0xb80]
  40908f:	cmp    rdi,rax
  409092:	je     4090fb <flatcc_emitter_reset@@Base+0xeb>
  409094:	lea    rcx,[rax+0xb80]
  40909b:	mov    r14,0xfffffffffffff480
  4090a2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4090ac:	nop    DWORD PTR [rax+0x0]
  4090b0:	mov    rdx,QWORD PTR [rdi+0xb80]
  4090b7:	mov    QWORD PTR [rcx],rdx
  4090ba:	mov    rcx,QWORD PTR [rdi+0xb80]
  4090c1:	mov    QWORD PTR [rcx+0xb88],rax
  4090c8:	call   403030 <free@plt>
  4090cd:	mov    rax,QWORD PTR [rbx+0x38]
  4090d1:	add    rax,r14
  4090d4:	mov    QWORD PTR [rbx+0x38],rax
  4090d8:	mov    rcx,QWORD PTR [rbx+0x40]
  4090dc:	add    rcx,rcx
  4090df:	cmp    rcx,rax
  4090e2:	jae    4090fb <flatcc_emitter_reset@@Base+0xeb>
  4090e4:	mov    rax,QWORD PTR [rbx+0x8]
  4090e8:	lea    rcx,[rax+0xb80]
  4090ef:	mov    rdi,QWORD PTR [rax+0xb80]
  4090f6:	cmp    rdi,QWORD PTR [rbx]
  4090f9:	jne    4090b0 <flatcc_emitter_reset@@Base+0xa0>
  4090fb:	add    rsp,0x8
  4090ff:	pop    rbx
  409100:	pop    r14
  409102:	ret    
  409103:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40910d:	nop    DWORD PTR [rax]

0000000000409110 <flatcc_emitter_clear@@Base>:
  409110:	push   r14
  409112:	push   rbx
  409113:	push   rax
  409114:	mov    rbx,QWORD PTR [rdi]
  409117:	test   rbx,rbx
  40911a:	je     40917a <flatcc_emitter_clear@@Base+0x6a>
  40911c:	mov    r14,rdi
  40911f:	mov    rax,QWORD PTR [rbx+0xb88]
  409126:	mov    QWORD PTR [rax+0xb80],0x0
  409131:	jmp    40914f <flatcc_emitter_clear@@Base+0x3f>
  409133:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40913d:	nop    DWORD PTR [rax]
  409140:	mov    rbx,rax
  409143:	mov    rdi,QWORD PTR [rax+0xb88]
  40914a:	call   403030 <free@plt>
  40914f:	mov    rax,QWORD PTR [rbx+0xb80]
  409156:	test   rax,rax
  409159:	jne    409140 <flatcc_emitter_clear@@Base+0x30>
  40915b:	mov    rdi,rbx
  40915e:	call   403030 <free@plt>
  409163:	vxorps xmm0,xmm0,xmm0
  409167:	vmovups YMMWORD PTR [r14+0x20],ymm0
  40916d:	vmovups YMMWORD PTR [r14],ymm0
  409172:	mov    QWORD PTR [r14+0x40],0x0
  40917a:	add    rsp,0x8
  40917e:	pop    rbx
  40917f:	pop    r14
  409181:	vzeroupper 
  409184:	ret    
  409185:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40918f:	nop

0000000000409190 <flatcc_emitter@@Base>:
  409190:	push   rbp
  409191:	push   r15
  409193:	push   r14
  409195:	push   r13
  409197:	push   r12
  409199:	push   rbx
  40919a:	sub    rsp,0x18
  40919e:	mov    r13d,edx
  4091a1:	mov    r14,rsi
  4091a4:	mov    r12,rdi
  4091a7:	add    QWORD PTR [rdi+0x30],r8
  4091ab:	test   ecx,ecx
  4091ad:	js     409341 <flatcc_emitter@@Base+0x1b1>
  4091b3:	mov    rdx,QWORD PTR [r12+0x28]
  4091b8:	cmp    rdx,r8
  4091bb:	jae    409528 <flatcc_emitter@@Base+0x398>
  4091c1:	xor    eax,eax
  4091c3:	test   r13d,r13d
  4091c6:	je     40965f <flatcc_emitter@@Base+0x4cf>
  4091cc:	mov    QWORD PTR [rsp+0x8],r13
  4091d1:	mov    r15,QWORD PTR [r14+0x8]
  4091d5:	test   r15,r15
  4091d8:	je     409326 <flatcc_emitter@@Base+0x196>
  4091de:	mov    r13,QWORD PTR [r14]
  4091e1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4091eb:	nop    DWORD PTR [rax+rax*1+0x0]
  4091f0:	mov    rbp,r15
  4091f3:	cmp    r15,rdx
  4091f6:	jbe    4092f8 <flatcc_emitter@@Base+0x168>
  4091fc:	mov    rbp,rdx
  4091ff:	nop
  409200:	test   rbp,rbp
  409203:	jne    4092f8 <flatcc_emitter@@Base+0x168>
  409209:	mov    rbx,QWORD PTR [r12+0x8]
  40920e:	test   rbx,rbx
  409211:	je     409220 <flatcc_emitter@@Base+0x90>
  409213:	mov    rax,QWORD PTR [rbx+0xb80]
  40921a:	cmp    rax,QWORD PTR [r12]
  40921e:	jne    409261 <flatcc_emitter@@Base+0xd1>
  409220:	mov    edi,0xb98
  409225:	call   4030c0 <malloc@plt>
  40922a:	test   rax,rax
  40922d:	je     40953d <flatcc_emitter@@Base+0x3ad>
  409233:	add    QWORD PTR [r12+0x38],0xb80
  40923c:	test   rbx,rbx
  40923f:	je     4092a0 <flatcc_emitter@@Base+0x110>
  409241:	mov    QWORD PTR [rax+0xb88],rbx
  409248:	mov    rcx,QWORD PTR [r12]
  40924c:	mov    QWORD PTR [rax+0xb80],rcx
  409253:	mov    QWORD PTR [rcx+0xb88],rax
  40925a:	mov    QWORD PTR [rbx+0xb80],rax
  409261:	mov    QWORD PTR [r12+0x8],rax
  409266:	mov    QWORD PTR [r12+0x20],rax
  40926b:	mov    QWORD PTR [r12+0x28],0xb80
  409274:	mov    rcx,QWORD PTR [rax+0xb88]
  40927b:	mov    ecx,DWORD PTR [rcx+0xb90]
  409281:	mov    edx,0xb80
  409286:	add    ecx,edx
  409288:	mov    DWORD PTR [rax+0xb90],ecx
  40928e:	mov    ebp,0xb80
  409293:	cmp    r15,rbp
  409296:	ja     409200 <flatcc_emitter@@Base+0x70>
  40929c:	jmp    4092f5 <flatcc_emitter@@Base+0x165>
  40929e:	xchg   ax,ax
  4092a0:	mov    QWORD PTR [r12],rax
  4092a4:	mov    QWORD PTR [r12+0x8],rax
  4092a9:	mov    QWORD PTR [rax+0xb80],rax
  4092b0:	mov    QWORD PTR [rax+0xb88],rax
  4092b7:	mov    rcx,rax
  4092ba:	add    rcx,0x5c0
  4092c1:	mov    QWORD PTR [r12+0x10],rcx
  4092c6:	mov    QWORD PTR [r12+0x20],rcx
  4092cb:	mov    QWORD PTR [r12+0x18],0x5c0
  4092d4:	mov    QWORD PTR [r12+0x28],0x5c0
  4092dd:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4092e7:	mov    ebp,0x5c0
  4092ec:	cmp    r15,rbp
  4092ef:	ja     409200 <flatcc_emitter@@Base+0x70>
  4092f5:	mov    rbp,r15
  4092f8:	mov    rdi,QWORD PTR [r12+0x20]
  4092fd:	mov    rsi,r13
  409300:	mov    rdx,rbp
  409303:	call   4030b0 <memcpy@plt>
  409308:	add    QWORD PTR [r12+0x20],rbp
  40930d:	add    r13,rbp
  409310:	mov    rdx,QWORD PTR [r12+0x28]
  409315:	sub    rdx,rbp
  409318:	mov    QWORD PTR [r12+0x28],rdx
  40931d:	sub    r15,rbp
  409320:	jne    4091f0 <flatcc_emitter@@Base+0x60>
  409326:	mov    r13,QWORD PTR [rsp+0x8]
  40932b:	add    r13d,0xffffffff
  40932f:	add    r14,0x10
  409333:	test   r13d,r13d
  409336:	jne    4091cc <flatcc_emitter@@Base+0x3c>
  40933c:	jmp    40965d <flatcc_emitter@@Base+0x4cd>
  409341:	lea    rsi,[r12+0x18]
  409346:	mov    rdx,QWORD PTR [r12+0x18]
  40934b:	cmp    rdx,r8
  40934e:	jae    409547 <flatcc_emitter@@Base+0x3b7>
  409354:	xor    eax,eax
  409356:	test   r13d,r13d
  409359:	je     40965f <flatcc_emitter@@Base+0x4cf>
  40935f:	mov    QWORD PTR [rsp+0x10],rsi
  409364:	movsxd rax,r13d
  409367:	shl    rax,0x4
  40936b:	add    r14,rax
  40936e:	mov    esi,0xfffff480
  409373:	mov    QWORD PTR [rsp+0x8],r13
  409378:	mov    r15,QWORD PTR [r14-0x8]
  40937c:	add    r14,0xfffffffffffffff0
  409380:	test   r15,r15
  409383:	je     409514 <flatcc_emitter@@Base+0x384>
  409389:	mov    r13,QWORD PTR [r14]
  40938c:	add    r13,r15
  40938f:	nop
  409390:	mov    rax,QWORD PTR [rsp+0x10]
  409395:	mov    rax,QWORD PTR [rax]
  409398:	cmp    r15,rax
  40939b:	jbe    4094e0 <flatcc_emitter@@Base+0x350>
  4093a1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4093ab:	nop    DWORD PTR [rax+rax*1+0x0]
  4093b0:	mov    rbp,rax
  4093b3:	test   rax,rax
  4093b6:	jne    4094e3 <flatcc_emitter@@Base+0x353>
  4093bc:	mov    rbx,QWORD PTR [r12]
  4093c0:	test   rbx,rbx
  4093c3:	je     4093f0 <flatcc_emitter@@Base+0x260>
  4093c5:	mov    rax,QWORD PTR [rbx+0xb88]
  4093cc:	cmp    rax,QWORD PTR [r12+0x8]
  4093d1:	je     4093f0 <flatcc_emitter@@Base+0x260>
  4093d3:	mov    edx,DWORD PTR [rbx+0xb90]
  4093d9:	add    edx,esi
  4093db:	lea    rcx,[rax+0xb90]
  4093e2:	mov    DWORD PTR [rax+0xb90],edx
  4093e8:	mov    QWORD PTR [r12],rax
  4093ec:	jmp    409445 <flatcc_emitter@@Base+0x2b5>
  4093ee:	xchg   ax,ax
  4093f0:	mov    edi,0xb98
  4093f5:	call   4030c0 <malloc@plt>
  4093fa:	test   rax,rax
  4093fd:	je     40953d <flatcc_emitter@@Base+0x3ad>
  409403:	add    QWORD PTR [r12+0x38],0xb80
  40940c:	test   rbx,rbx
  40940f:	je     409480 <flatcc_emitter@@Base+0x2f0>
  409411:	mov    rcx,QWORD PTR [r12+0x8]
  409416:	mov    QWORD PTR [rax+0xb88],rcx
  40941d:	mov    QWORD PTR [rax+0xb80],rbx
  409424:	mov    QWORD PTR [rbx+0xb88],rax
  40942b:	mov    QWORD PTR [rcx+0xb80],rax
  409432:	mov    QWORD PTR [r12],rax
  409436:	mov    rcx,rax
  409439:	add    rcx,0xb90
  409440:	mov    esi,0xfffff480
  409445:	lea    rdx,[rax+0xb80]
  40944c:	mov    QWORD PTR [r12+0x10],rdx
  409451:	mov    QWORD PTR [r12+0x18],0xb80
  40945a:	mov    rax,QWORD PTR [rax+0xb80]
  409461:	mov    eax,DWORD PTR [rax+0xb90]
  409467:	add    eax,esi
  409469:	mov    DWORD PTR [rcx],eax
  40946b:	mov    eax,0xb80
  409470:	cmp    r15,rax
  409473:	ja     4093b0 <flatcc_emitter@@Base+0x220>
  409479:	jmp    4094e0 <flatcc_emitter@@Base+0x350>
  40947b:	nop    DWORD PTR [rax+rax*1+0x0]
  409480:	mov    QWORD PTR [r12],rax
  409484:	mov    QWORD PTR [r12+0x8],rax
  409489:	mov    QWORD PTR [rax+0xb80],rax
  409490:	mov    QWORD PTR [rax+0xb88],rax
  409497:	mov    rcx,rax
  40949a:	add    rcx,0x5c0
  4094a1:	mov    QWORD PTR [r12+0x10],rcx
  4094a6:	mov    QWORD PTR [r12+0x20],rcx
  4094ab:	mov    QWORD PTR [r12+0x18],0x5c0
  4094b4:	mov    QWORD PTR [r12+0x28],0x5c0
  4094bd:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4094c7:	mov    eax,0x5c0
  4094cc:	mov    esi,0xfffff480
  4094d1:	cmp    r15,rax
  4094d4:	ja     4093b0 <flatcc_emitter@@Base+0x220>
  4094da:	nop    WORD PTR [rax+rax*1+0x0]
  4094e0:	mov    rbp,r15
  4094e3:	mov    rdi,QWORD PTR [r12+0x10]
  4094e8:	sub    rdi,rbp
  4094eb:	mov    QWORD PTR [r12+0x10],rdi
  4094f0:	sub    rax,rbp
  4094f3:	mov    QWORD PTR [r12+0x18],rax
  4094f8:	sub    r13,rbp
  4094fb:	mov    rsi,r13
  4094fe:	mov    rdx,rbp
  409501:	call   4030b0 <memcpy@plt>
  409506:	mov    esi,0xfffff480
  40950b:	sub    r15,rbp
  40950e:	jne    409390 <flatcc_emitter@@Base+0x200>
  409514:	mov    r13,QWORD PTR [rsp+0x8]
  409519:	add    r13d,0xffffffff
  40951d:	jne    409373 <flatcc_emitter@@Base+0x1e3>
  409523:	jmp    40965d <flatcc_emitter@@Base+0x4cd>
  409528:	lea    rsi,[r12+0x28]
  40952d:	mov    rbp,QWORD PTR [r12+0x20]
  409532:	lea    rcx,[r8+rbp*1]
  409536:	mov    QWORD PTR [r12+0x20],rcx
  40953b:	jmp    409554 <flatcc_emitter@@Base+0x3c4>
  40953d:	mov    eax,0xffffffff
  409542:	jmp    40965f <flatcc_emitter@@Base+0x4cf>
  409547:	mov    rbp,QWORD PTR [r12+0x10]
  40954c:	sub    rbp,r8
  40954f:	mov    QWORD PTR [r12+0x10],rbp
  409554:	sub    rdx,r8
  409557:	mov    QWORD PTR [rsi],rdx
  40955a:	xor    eax,eax
  40955c:	test   r13d,r13d
  40955f:	je     40965f <flatcc_emitter@@Base+0x4cf>
  409565:	lea    r15d,[r13-0x1]
  409569:	mov    r12d,r13d
  40956c:	and    r12d,0x7
  409570:	je     4095a2 <flatcc_emitter@@Base+0x412>
  409572:	xor    ebx,ebx
  409574:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40957e:	xchg   ax,ax
  409580:	mov    rsi,QWORD PTR [r14]
  409583:	mov    rdx,QWORD PTR [r14+0x8]
  409587:	mov    rdi,rbp
  40958a:	call   4030b0 <memcpy@plt>
  40958f:	add    rbp,QWORD PTR [r14+0x8]
  409593:	add    r14,0x10
  409597:	add    ebx,0x1
  40959a:	cmp    r12d,ebx
  40959d:	jne    409580 <flatcc_emitter@@Base+0x3f0>
  40959f:	sub    r13d,ebx
  4095a2:	cmp    r15d,0x7
  4095a6:	jb     40965d <flatcc_emitter@@Base+0x4cd>
  4095ac:	nop    DWORD PTR [rax+0x0]
  4095b0:	mov    rsi,QWORD PTR [r14]
  4095b3:	mov    rdx,QWORD PTR [r14+0x8]
  4095b7:	mov    rdi,rbp
  4095ba:	call   4030b0 <memcpy@plt>
  4095bf:	add    rbp,QWORD PTR [r14+0x8]
  4095c3:	mov    rsi,QWORD PTR [r14+0x10]
  4095c7:	mov    rdx,QWORD PTR [r14+0x18]
  4095cb:	mov    rdi,rbp
  4095ce:	call   4030b0 <memcpy@plt>
  4095d3:	add    rbp,QWORD PTR [r14+0x18]
  4095d7:	mov    rsi,QWORD PTR [r14+0x20]
  4095db:	mov    rdx,QWORD PTR [r14+0x28]
  4095df:	mov    rdi,rbp
  4095e2:	call   4030b0 <memcpy@plt>
  4095e7:	add    rbp,QWORD PTR [r14+0x28]
  4095eb:	mov    rsi,QWORD PTR [r14+0x30]
  4095ef:	mov    rdx,QWORD PTR [r14+0x38]
  4095f3:	mov    rdi,rbp
  4095f6:	call   4030b0 <memcpy@plt>
  4095fb:	add    rbp,QWORD PTR [r14+0x38]
  4095ff:	mov    rsi,QWORD PTR [r14+0x40]
  409603:	mov    rdx,QWORD PTR [r14+0x48]
  409607:	mov    rdi,rbp
  40960a:	call   4030b0 <memcpy@plt>
  40960f:	add    rbp,QWORD PTR [r14+0x48]
  409613:	mov    rsi,QWORD PTR [r14+0x50]
  409617:	mov    rdx,QWORD PTR [r14+0x58]
  40961b:	mov    rdi,rbp
  40961e:	call   4030b0 <memcpy@plt>
  409623:	add    rbp,QWORD PTR [r14+0x58]
  409627:	mov    rsi,QWORD PTR [r14+0x60]
  40962b:	mov    rdx,QWORD PTR [r14+0x68]
  40962f:	mov    rdi,rbp
  409632:	call   4030b0 <memcpy@plt>
  409637:	add    rbp,QWORD PTR [r14+0x68]
  40963b:	mov    rsi,QWORD PTR [r14+0x70]
  40963f:	mov    rdx,QWORD PTR [r14+0x78]
  409643:	mov    rdi,rbp
  409646:	call   4030b0 <memcpy@plt>
  40964b:	add    rbp,QWORD PTR [r14+0x78]
  40964f:	sub    r14,0xffffffffffffff80
  409653:	add    r13d,0xfffffff8
  409657:	jne    4095b0 <flatcc_emitter@@Base+0x420>
  40965d:	xor    eax,eax
  40965f:	add    rsp,0x18
  409663:	pop    rbx
  409664:	pop    r12
  409666:	pop    r13
  409668:	pop    r14
  40966a:	pop    r15
  40966c:	pop    rbp
  40966d:	ret    
  40966e:	xchg   ax,ax

0000000000409670 <flatcc_emitter_copy_buffer@@Base>:
  409670:	push   r15
  409672:	push   r14
  409674:	push   r12
  409676:	push   rbx
  409677:	push   rax
  409678:	mov    rax,rdx
  40967b:	mov    rdx,QWORD PTR [rdi+0x30]
  40967f:	cmp    rdx,rax
  409682:	ja     40970d <flatcc_emitter_copy_buffer@@Base+0x9d>
  409688:	mov    r14,rdi
  40968b:	mov    rax,QWORD PTR [rdi]
  40968e:	test   rax,rax
  409691:	je     40970d <flatcc_emitter_copy_buffer@@Base+0x9d>
  409693:	mov    r15,rsi
  409696:	cmp    rax,QWORD PTR [r14+0x8]
  40969a:	je     40971f <flatcc_emitter_copy_buffer@@Base+0xaf>
  4096a0:	mov    r12d,0xb80
  4096a6:	sub    r12,QWORD PTR [r14+0x18]
  4096aa:	mov    rsi,QWORD PTR [r14+0x10]
  4096ae:	mov    rdi,r15
  4096b1:	mov    rdx,r12
  4096b4:	call   4030b0 <memcpy@plt>
  4096b9:	add    r12,r15
  4096bc:	mov    rax,QWORD PTR [r14]
  4096bf:	mov    rbx,QWORD PTR [rax+0xb80]
  4096c6:	cmp    rbx,QWORD PTR [r14+0x8]
  4096ca:	je     4096f4 <flatcc_emitter_copy_buffer@@Base+0x84>
  4096cc:	nop    DWORD PTR [rax+0x0]
  4096d0:	mov    edx,0xb80
  4096d5:	mov    rdi,r12
  4096d8:	mov    rsi,rbx
  4096db:	call   4030b0 <memcpy@plt>
  4096e0:	add    r12,0xb80
  4096e7:	mov    rbx,QWORD PTR [rbx+0xb80]
  4096ee:	cmp    rbx,QWORD PTR [r14+0x8]
  4096f2:	jne    4096d0 <flatcc_emitter_copy_buffer@@Base+0x60>
  4096f4:	mov    edx,0xb80
  4096f9:	sub    rdx,QWORD PTR [r14+0x28]
  4096fd:	mov    rdi,r12
  409700:	mov    rsi,rbx
  409703:	call   4030b0 <memcpy@plt>
  409708:	mov    r15,r12
  40970b:	jmp    409710 <flatcc_emitter_copy_buffer@@Base+0xa0>
  40970d:	xor    r15d,r15d
  409710:	mov    rax,r15
  409713:	add    rsp,0x8
  409717:	pop    rbx
  409718:	pop    r12
  40971a:	pop    r14
  40971c:	pop    r15
  40971e:	ret    
  40971f:	mov    rsi,QWORD PTR [r14+0x10]
  409723:	mov    rdi,r15
  409726:	call   4030b0 <memcpy@plt>
  40972b:	jmp    409710 <flatcc_emitter_copy_buffer@@Base+0xa0>
  40972d:	nop    DWORD PTR [rax]

0000000000409730 <grisu3_diy_fp_encode_double@@Base>:
  409730:	push   rbp
  409731:	push   r15
  409733:	push   r14
  409735:	push   r13
  409737:	push   r12
  409739:	push   rbx
  40973a:	push   rax
  40973b:	xor    ebx,ebx
  40973d:	test   ecx,ecx
  40973f:	setne  r10b
  409743:	test   rdi,rdi
  409746:	je     409a9e <grisu3_diy_fp_encode_double@@Base+0x36e>
  40974c:	movabs r9,0x40000000000000
  409756:	xor    eax,eax
  409758:	mov    rcx,rdi
  40975b:	shr    rcx,0x36
  40975f:	jne    40977c <grisu3_diy_fp_encode_double@@Base+0x4c>
  409761:	xor    eax,eax
  409763:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40976d:	nop    DWORD PTR [rax]
  409770:	shl    rdi,0xa
  409774:	add    eax,0xfffffff6
  409777:	cmp    rdi,r9
  40977a:	jb     409770 <grisu3_diy_fp_encode_double@@Base+0x40>
  40977c:	sub    esi,edx
  40977e:	test   rdi,rdi
  409781:	js     40979b <grisu3_diy_fp_encode_double@@Base+0x6b>
  409783:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40978d:	nop    DWORD PTR [rax]
  409790:	add    rdi,rdi
  409793:	add    eax,0xffffffff
  409796:	test   rdi,rdi
  409799:	jns    409790 <grisu3_diy_fp_encode_double@@Base+0x60>
  40979b:	cmp    esi,0xfffffea3
  4097a1:	jle    409abd <grisu3_diy_fp_encode_double@@Base+0x38d>
  4097a7:	cmp    esi,0x15c
  4097ad:	jge    409adc <grisu3_diy_fp_encode_double@@Base+0x3ac>
  4097b3:	lea    ecx,[rsi+0x15c]
  4097b9:	sar    ecx,0x1f
  4097bc:	shr    ecx,0x1d
  4097bf:	lea    ecx,[rsi+rcx*1]
  4097c2:	add    ecx,0x15c
  4097c8:	sar    ecx,0x3
  4097cb:	movsxd r11,ecx
  4097ce:	shl    r11,0x4
  4097d2:	lea    r14,[rip+0x6347]        # 40fb20 <flatcc_builder_padding_base@@Base+0x17c0>
  4097d9:	movsx  ecx,WORD PTR [r11+r14*1+0xa]
  4097df:	cmp    esi,ecx
  4097e1:	jl     409afb <grisu3_diy_fp_encode_double@@Base+0x3cb>
  4097e7:	lea    ebp,[rcx+0x8]
  4097ea:	cmp    ebp,esi
  4097ec:	jle    409b1a <grisu3_diy_fp_encode_double@@Base+0x3ea>
  4097f2:	mov    bl,r10b
  4097f5:	shl    ebx,0x2
  4097f8:	mov    ebp,eax
  4097fa:	neg    ebp
  4097fc:	shlx   r10d,ebx,ebp
  409801:	cmp    esi,ecx
  409803:	je     409895 <grisu3_diy_fp_encode_double@@Base+0x165>
  409809:	not    ecx
  40980b:	add    esi,ecx
  40980d:	cmp    esi,0x7
  409810:	jae    409b39 <grisu3_diy_fp_encode_double@@Base+0x409>
  409816:	movsxd rcx,esi
  409819:	shl    rcx,0x4
  40981d:	lea    rbx,[rip+0x628c]        # 40fab0 <flatcc_builder_padding_base@@Base+0x1750>
  409824:	mov    rbp,QWORD PTR [rcx+rbx*1]
  409828:	mov    r15d,DWORD PTR [rcx+rbx*1+0x8]
  40982d:	mov    rbx,rdi
  409830:	shr    rbx,0x20
  409834:	mov    r12d,edi
  409837:	mov    edi,ebp
  409839:	mov    rcx,rbp
  40983c:	shr    rcx,0x20
  409840:	mov    r13,rcx
  409843:	imul   r13,rbx
  409847:	imul   rcx,r12
  40984b:	imul   rbx,rdi
  40984f:	imul   rdi,r12
  409853:	shr    rdi,0x20
  409857:	mov    ebp,ebx
  409859:	add    rbp,rdi
  40985c:	mov    edi,ecx
  40985e:	add    rdi,rbp
  409861:	sub    rdi,0xffffffff80000000
  409868:	shr    rbx,0x20
  40986c:	add    rbx,r13
  40986f:	shr    rcx,0x20
  409873:	add    rcx,rbx
  409876:	shr    rdi,0x20
  40987a:	add    rdi,rcx
  40987d:	lea    eax,[rax+r15*1]
  409881:	add    eax,0x40
  409884:	lea    ecx,[rdx+rsi*1]
  409887:	add    ecx,0x1
  40988a:	lea    edx,[r10+0x4]
  40988e:	cmp    ecx,0x13
  409891:	cmovg  r10d,edx
  409895:	mov    rsi,QWORD PTR [r11+r14*1]
  409899:	mov    rdx,rdi
  40989c:	shr    rdx,0x20
  4098a0:	mov    ecx,edi
  4098a2:	mov    edi,esi
  4098a4:	shr    rsi,0x20
  4098a8:	mov    rbx,rdx
  4098ab:	imul   rbx,rsi
  4098af:	imul   rsi,rcx
  4098b3:	imul   rdx,rdi
  4098b7:	imul   rcx,rdi
  4098bb:	shr    rcx,0x20
  4098bf:	mov    edi,edx
  4098c1:	add    rdi,rcx
  4098c4:	mov    ecx,esi
  4098c6:	add    rcx,rdi
  4098c9:	sub    rcx,0xffffffff80000000
  4098d0:	shr    rdx,0x20
  4098d4:	add    rdx,rbx
  4098d7:	shr    rsi,0x20
  4098db:	add    rsi,rdx
  4098de:	shr    rcx,0x20
  4098e2:	cmp    r10d,0x1
  4098e6:	sbb    r10d,0x0
  4098ea:	add    rcx,rsi
  4098ed:	je     409a9e <grisu3_diy_fp_encode_double@@Base+0x36e>
  4098f3:	movsx  edx,WORD PTR [r11+r14*1+0x8]
  4098f9:	lea    eax,[rdx+rax*1]
  4098fc:	add    eax,0x40
  4098ff:	mov    edx,eax
  409901:	cmp    rcx,r9
  409904:	jae    40991c <grisu3_diy_fp_encode_double@@Base+0x1ec>
  409906:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409910:	shl    rcx,0xa
  409914:	add    edx,0xfffffff6
  409917:	cmp    rcx,r9
  40991a:	jb     409910 <grisu3_diy_fp_encode_double@@Base+0x1e0>
  40991c:	add    r10d,0x9
  409920:	test   rcx,rcx
  409923:	js     40993b <grisu3_diy_fp_encode_double@@Base+0x20b>
  409925:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40992f:	nop
  409930:	add    rcx,rcx
  409933:	add    edx,0xffffffff
  409936:	test   rcx,rcx
  409939:	jns    409930 <grisu3_diy_fp_encode_double@@Base+0x200>
  40993b:	sub    eax,edx
  40993d:	shlx   r14d,r10d,eax
  409942:	xor    ebx,ebx
  409944:	cmp    edx,0xfffffbcd
  40994a:	jg     409981 <grisu3_diy_fp_encode_double@@Base+0x251>
  40994c:	mov    ebx,0x40
  409951:	cmp    edx,0xfffffb8f
  409957:	jl     409965 <grisu3_diy_fp_encode_double@@Base+0x235>
  409959:	mov    ebx,0xfffffbce
  40995e:	sub    ebx,edx
  409960:	cmp    ebx,0x3d
  409963:	jl     409981 <grisu3_diy_fp_encode_double@@Base+0x251>
  409965:	lea    eax,[rbx-0x3e]
  409968:	shrx   rcx,rcx,rax
  40996d:	lea    edx,[rbx+rdx*1]
  409970:	add    edx,0xffffffc2
  409973:	sarx   r14d,r14d,eax
  409978:	add    r14d,0x9
  40997c:	mov    ebx,0x3e
  409981:	movabs r11,0x1fffffffffffff
  40998b:	shrx   rax,rcx,rbx
  409990:	add    edx,ebx
  409992:	lea    esi,[rbx-0x1]
  409995:	mov    edi,0x1
  40999a:	shlx   r15,rdi,rsi
  40999f:	lea    r10d,[r14+r15*8]
  4099a3:	cmp    ebx,r10d
  4099a6:	jl     4099bb <grisu3_diy_fp_encode_double@@Base+0x28b>
  4099a8:	add    rax,0x1
  4099ac:	lea    rsi,[r11+0x1]
  4099b0:	test   rax,rsi
  4099b3:	je     4099bb <grisu3_diy_fp_encode_double@@Base+0x28b>
  4099b5:	shr    rax,1
  4099b8:	add    edx,0x1
  4099bb:	and    ecx,r15d
  4099be:	cmp    rax,r11
  4099c1:	jbe    4099e0 <grisu3_diy_fp_encode_double@@Base+0x2b0>
  4099c3:	add    r9,0xffffffffffffffff
  4099c7:	mov    rdi,rax
  4099ca:	nop    WORD PTR [rax+rax*1+0x0]
  4099d0:	shr    rdi,1
  4099d3:	add    edx,0x1
  4099d6:	cmp    rax,r9
  4099d9:	mov    rax,rdi
  4099dc:	ja     4099d0 <grisu3_diy_fp_encode_double@@Base+0x2a0>
  4099de:	jmp    4099e3 <grisu3_diy_fp_encode_double@@Base+0x2b3>
  4099e0:	mov    rdi,rax
  4099e3:	shl    ecx,0x3
  4099e6:	shl    r15d,0x3
  4099ea:	vpxor  xmm0,xmm0,xmm0
  4099ee:	cmp    edx,0xfffffbce
  4099f4:	jl     409a76 <grisu3_diy_fp_encode_double@@Base+0x346>
  4099fa:	movabs r9,0xfffffffffffff
  409a04:	lea    rsi,[r9+0x1]
  409a08:	and    rsi,rdi
  409a0b:	sete   al
  409a0e:	cmp    edx,0xfffffbce
  409a14:	je     409a4f <grisu3_diy_fp_encode_double@@Base+0x31f>
  409a16:	test   rsi,rsi
  409a19:	jne    409a4f <grisu3_diy_fp_encode_double@@Base+0x31f>
  409a1b:	movabs rsi,0x8000000000000
  409a25:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409a2f:	nop
  409a30:	mov    ebp,edx
  409a32:	lea    edx,[rbp-0x1]
  409a35:	mov    rbx,rdi
  409a38:	and    rbx,rsi
  409a3b:	lea    rdi,[rdi+rdi*1]
  409a3f:	sete   al
  409a42:	cmp    ebp,0xfffffbd0
  409a48:	jl     409a4f <grisu3_diy_fp_encode_double@@Base+0x31f>
  409a4a:	test   rbx,rbx
  409a4d:	je     409a30 <grisu3_diy_fp_encode_double@@Base+0x300>
  409a4f:	lea    esi,[rdx+0x433]
  409a55:	shl    rsi,0x34
  409a59:	xor    ebp,ebp
  409a5b:	test   al,al
  409a5d:	cmove  rbp,rsi
  409a61:	cmp    edx,0xfffffbce
  409a67:	cmovne rbp,rsi
  409a6b:	and    rdi,r9
  409a6e:	or     rdi,rbp
  409a71:	vmovq  xmm0,rdi
  409a76:	vmovq  QWORD PTR [r8],xmm0
  409a7b:	sub    r15d,r14d
  409a7e:	cmp    r15d,ecx
  409a81:	setge  al
  409a84:	cmp    ecx,r10d
  409a87:	setge  cl
  409a8a:	or     cl,al
  409a8c:	movzx  eax,cl
  409a8f:	add    rsp,0x8
  409a93:	pop    rbx
  409a94:	pop    r12
  409a96:	pop    r13
  409a98:	pop    r14
  409a9a:	pop    r15
  409a9c:	pop    rbp
  409a9d:	ret    
  409a9e:	lea    rdi,[rip+0x6e86]        # 41092b <flatcc_builder_padding_base@@Base+0x25cb>
  409aa5:	lea    rsi,[rip+0x6e88]        # 410934 <flatcc_builder_padding_base@@Base+0x25d4>
  409aac:	lea    rcx,[rip+0x6ef1]        # 4109a4 <flatcc_builder_padding_base@@Base+0x2644>
  409ab3:	mov    edx,0x104
  409ab8:	call   403060 <__assert_fail@plt>
  409abd:	lea    rdi,[rip+0x6f19]        # 4109dd <flatcc_builder_padding_base@@Base+0x267d>
  409ac4:	lea    rsi,[rip+0x68e9]        # 4103b4 <flatcc_builder_padding_base@@Base+0x2054>
  409acb:	lea    rcx,[rip+0x6f2a]        # 4109fc <flatcc_builder_padding_base@@Base+0x269c>
  409ad2:	mov    edx,0x50
  409ad7:	call   403060 <__assert_fail@plt>
  409adc:	lea    rdi,[rip+0x6f52]        # 410a35 <flatcc_builder_padding_base@@Base+0x26d5>
  409ae3:	lea    rsi,[rip+0x68ca]        # 4103b4 <flatcc_builder_padding_base@@Base+0x2054>
  409aea:	lea    rcx,[rip+0x6f0b]        # 4109fc <flatcc_builder_padding_base@@Base+0x269c>
  409af1:	mov    edx,0x51
  409af6:	call   403060 <__assert_fail@plt>
  409afb:	lea    rdi,[rip+0x6f5e]        # 410a60 <flatcc_builder_padding_base@@Base+0x2700>
  409b02:	lea    rsi,[rip+0x68ab]        # 4103b4 <flatcc_builder_padding_base@@Base+0x2054>
  409b09:	lea    rcx,[rip+0x6eec]        # 4109fc <flatcc_builder_padding_base@@Base+0x269c>
  409b10:	mov    edx,0x58
  409b15:	call   403060 <__assert_fail@plt>
  409b1a:	lea    rdi,[rip+0x6f4e]        # 410a6f <flatcc_builder_padding_base@@Base+0x270f>
  409b21:	lea    rsi,[rip+0x688c]        # 4103b4 <flatcc_builder_padding_base@@Base+0x2054>
  409b28:	lea    rcx,[rip+0x6ecd]        # 4109fc <flatcc_builder_padding_base@@Base+0x269c>
  409b2f:	mov    edx,0x59
  409b34:	call   403060 <__assert_fail@plt>
  409b39:	lea    rdi,[rip+0x6858]        # 410398 <flatcc_builder_padding_base@@Base+0x2038>
  409b40:	lea    rsi,[rip+0x686d]        # 4103b4 <flatcc_builder_padding_base@@Base+0x2054>
  409b47:	lea    rcx,[rip+0x68d7]        # 410425 <flatcc_builder_padding_base@@Base+0x20c5>
  409b4e:	mov    edx,0xb9
  409b53:	call   403060 <__assert_fail@plt>
  409b58:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000409b60 <flatcc_json_parser_error_string@@Base>:
  409b60:	cmp    edi,0x22
  409b63:	ja     409b74 <flatcc_json_parser_error_string@@Base+0x14>
  409b65:	movsxd rax,edi
  409b68:	lea    rcx,[rip+0xa181]        # 413cf0 <flatcc_builder_padding_base@@Base+0x5990>
  409b6f:	mov    rax,QWORD PTR [rcx+rax*8]
  409b73:	ret    
  409b74:	lea    rax,[rip+0x6b70]        # 4106eb <flatcc_builder_padding_base@@Base+0x238b>
  409b7b:	ret    
  409b7c:	nop    DWORD PTR [rax+0x0]

0000000000409b80 <flatcc_json_parser_set_error@@Base>:
  409b80:	cmp    DWORD PTR [rdi+0x20],0x0
  409b84:	je     409b8a <flatcc_json_parser_set_error@@Base+0xa>
  409b86:	mov    rax,rdx
  409b89:	ret    
  409b8a:	mov    DWORD PTR [rdi+0x20],ecx
  409b8d:	mov    eax,DWORD PTR [rdi+0x8]
  409b90:	mov    ecx,esi
  409b92:	sub    ecx,eax
  409b94:	add    ecx,0x1
  409b97:	mov    DWORD PTR [rdi+0x1c],ecx
  409b9a:	mov    QWORD PTR [rdi+0x38],rsi
  409b9e:	mov    rax,rdx
  409ba1:	ret    
  409ba2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409bac:	nop    DWORD PTR [rax+0x0]

0000000000409bb0 <flatcc_json_parser_string_part@@Base>:
  409bb0:	cmp    rsi,rdx
  409bb3:	je     409bdb <flatcc_json_parser_string_part@@Base+0x2b>
  409bb5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409bbf:	nop
  409bc0:	movzx  eax,BYTE PTR [rsi]
  409bc3:	cmp    al,0x20
  409bc5:	jb     409bea <flatcc_json_parser_string_part@@Base+0x3a>
  409bc7:	cmp    al,0x22
  409bc9:	je     409c0b <flatcc_json_parser_string_part@@Base+0x5b>
  409bcb:	cmp    al,0x5c
  409bcd:	je     409c0b <flatcc_json_parser_string_part@@Base+0x5b>
  409bcf:	add    rsi,0x1
  409bd3:	cmp    rdx,rsi
  409bd6:	jne    409bc0 <flatcc_json_parser_string_part@@Base+0x10>
  409bd8:	mov    rsi,rdx
  409bdb:	cmp    DWORD PTR [rdi+0x20],0x0
  409bdf:	jne    409c08 <flatcc_json_parser_string_part@@Base+0x58>
  409be1:	mov    DWORD PTR [rdi+0x20],0x14
  409be8:	jmp    409bf7 <flatcc_json_parser_string_part@@Base+0x47>
  409bea:	cmp    DWORD PTR [rdi+0x20],0x0
  409bee:	jne    409c08 <flatcc_json_parser_string_part@@Base+0x58>
  409bf0:	mov    DWORD PTR [rdi+0x20],0x11
  409bf7:	mov    eax,DWORD PTR [rdi+0x8]
  409bfa:	mov    ecx,esi
  409bfc:	sub    ecx,eax
  409bfe:	add    ecx,0x1
  409c01:	mov    DWORD PTR [rdi+0x1c],ecx
  409c04:	mov    QWORD PTR [rdi+0x38],rsi
  409c08:	mov    rsi,rdx
  409c0b:	mov    rax,rsi
  409c0e:	ret    
  409c0f:	nop

0000000000409c10 <flatcc_json_parser_space_ext@@Base>:
  409c10:	lea    rax,[rip+0x5c29]        # 40f840 <flatcc_builder_padding_base@@Base+0x14e0>
  409c17:	mov    rcx,rdx
  409c1a:	sub    rcx,rsi
  409c1d:	cmp    rcx,0x10
  409c21:	jl     409c53 <flatcc_json_parser_space_ext@@Base+0x43>
  409c23:	cmp    BYTE PTR [rsi],0x20
  409c26:	jg     409cf1 <flatcc_json_parser_space_ext@@Base+0xe1>
  409c2c:	movzx  r8d,WORD PTR [rsi]
  409c30:	lea    rcx,[rsi+0x2]
  409c34:	cmp    r8d,0x2020
  409c3b:	cmovne rcx,rsi
  409c3f:	lea    rsi,[rcx+0x1]
  409c43:	cmp    BYTE PTR [rcx],0x20
  409c46:	cmovne rsi,rcx
  409c4a:	cmp    BYTE PTR [rsi],0x20
  409c4d:	jg     409cf1 <flatcc_json_parser_space_ext@@Base+0xe1>
  409c53:	cmp    rsi,rdx
  409c56:	je     409cee <flatcc_json_parser_space_ext@@Base+0xde>
  409c5c:	nop    DWORD PTR [rax+0x0]
  409c60:	cmp    BYTE PTR [rsi],0x20
  409c63:	jne    409c70 <flatcc_json_parser_space_ext@@Base+0x60>
  409c65:	add    rsi,0x1
  409c69:	cmp    rdx,rsi
  409c6c:	jne    409c60 <flatcc_json_parser_space_ext@@Base+0x50>
  409c6e:	jmp    409cee <flatcc_json_parser_space_ext@@Base+0xde>
  409c70:	cmp    rdx,rsi
  409c73:	je     409cee <flatcc_json_parser_space_ext@@Base+0xde>
  409c75:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409c7f:	nop
  409c80:	movsx  ecx,BYTE PTR [rsi]
  409c83:	cmp    ecx,0x20
  409c86:	jg     409cf1 <flatcc_json_parser_space_ext@@Base+0xe1>
  409c88:	add    ecx,0xfffffff7
  409c8b:	cmp    ecx,0x17
  409c8e:	ja     409cd0 <flatcc_json_parser_space_ext@@Base+0xc0>
  409c90:	movsxd rcx,DWORD PTR [rax+rcx*4]
  409c94:	add    rcx,rax
  409c97:	jmp    rcx
  409c99:	add    rsi,0x1
  409c9d:	jmp    409cc9 <flatcc_json_parser_space_ext@@Base+0xb9>
  409c9f:	nop
  409ca0:	mov    rcx,rdx
  409ca3:	sub    rcx,rsi
  409ca6:	cmp    rcx,0x2
  409caa:	jl     409cb5 <flatcc_json_parser_space_ext@@Base+0xa5>
  409cac:	cmp    BYTE PTR [rsi+0x1],0xa
  409cb0:	sete   cl
  409cb3:	jmp    409cb7 <flatcc_json_parser_space_ext@@Base+0xa7>
  409cb5:	xor    ecx,ecx
  409cb7:	movzx  ecx,cl
  409cba:	add    rsi,rcx
  409cbd:	add    DWORD PTR [rdi+0x18],0x1
  409cc1:	add    rsi,0x1
  409cc5:	mov    QWORD PTR [rdi+0x8],rsi
  409cc9:	cmp    rsi,rdx
  409ccc:	jne    409c80 <flatcc_json_parser_space_ext@@Base+0x70>
  409cce:	jmp    409cee <flatcc_json_parser_space_ext@@Base+0xde>
  409cd0:	cmp    DWORD PTR [rdi+0x20],0x0
  409cd4:	jne    409cee <flatcc_json_parser_space_ext@@Base+0xde>
  409cd6:	mov    DWORD PTR [rdi+0x20],0x5
  409cdd:	mov    eax,DWORD PTR [rdi+0x8]
  409ce0:	mov    ecx,esi
  409ce2:	sub    ecx,eax
  409ce4:	add    ecx,0x1
  409ce7:	mov    DWORD PTR [rdi+0x1c],ecx
  409cea:	mov    QWORD PTR [rdi+0x38],rsi
  409cee:	mov    rsi,rdx
  409cf1:	mov    rax,rsi
  409cf4:	ret    
  409cf5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409cff:	nop

0000000000409d00 <flatcc_json_parser_string_escape@@Base>:
  409d00:	push   rbp
  409d01:	push   r14
  409d03:	push   rbx
  409d04:	mov    rax,rdx
  409d07:	sub    rax,rsi
  409d0a:	cmp    rax,0x2
  409d0e:	jl     409d9d <flatcc_json_parser_string_escape@@Base+0x9d>
  409d14:	cmp    BYTE PTR [rsi],0x5c
  409d17:	jne    409d9d <flatcc_json_parser_string_escape@@Base+0x9d>
  409d1d:	movsx  ebp,BYTE PTR [rsi+0x1]
  409d21:	add    ebp,0xffffffde
  409d24:	cmp    ebp,0x56
  409d27:	ja     409d9d <flatcc_json_parser_string_escape@@Base+0x9d>
  409d29:	lea    rbx,[rip+0x5b70]        # 40f8a0 <flatcc_builder_padding_base@@Base+0x1540>
  409d30:	movsxd rbp,DWORD PTR [rbx+rbp*4]
  409d34:	add    rbp,rbx
  409d37:	jmp    rbp
  409d39:	mov    WORD PTR [rcx],0x2201
  409d3e:	jmp    409d6f <flatcc_json_parser_string_escape@@Base+0x6f>
  409d40:	mov    WORD PTR [rcx],0x2f01
  409d45:	jmp    409d6f <flatcc_json_parser_string_escape@@Base+0x6f>
  409d47:	mov    WORD PTR [rcx],0x5c01
  409d4c:	jmp    409d6f <flatcc_json_parser_string_escape@@Base+0x6f>
  409d4e:	mov    WORD PTR [rcx],0x801
  409d53:	jmp    409d6f <flatcc_json_parser_string_escape@@Base+0x6f>
  409d55:	mov    WORD PTR [rcx],0xc01
  409d5a:	jmp    409d6f <flatcc_json_parser_string_escape@@Base+0x6f>
  409d5c:	mov    WORD PTR [rcx],0xa01
  409d61:	jmp    409d6f <flatcc_json_parser_string_escape@@Base+0x6f>
  409d63:	mov    WORD PTR [rcx],0xd01
  409d68:	jmp    409d6f <flatcc_json_parser_string_escape@@Base+0x6f>
  409d6a:	mov    WORD PTR [rcx],0x901
  409d6f:	add    rsi,0x2
  409d73:	mov    rdx,rsi
  409d76:	jmp    409dbe <flatcc_json_parser_string_escape@@Base+0xbe>
  409d78:	cmp    rax,0x5
  409d7c:	jle    409d9d <flatcc_json_parser_string_escape@@Base+0x9d>
  409d7e:	movzx  eax,BYTE PTR [rsi+0x2]
  409d82:	mov    ebx,eax
  409d84:	add    bl,0xd0
  409d87:	cmp    bl,0x9
  409d8a:	ja     409de0 <flatcc_json_parser_string_escape@@Base+0xe0>
  409d8c:	movzx  eax,ax
  409d8f:	shl    eax,0xc
  409d92:	jmp    409df8 <flatcc_json_parser_string_escape@@Base+0xf8>
  409d94:	mov    BYTE PTR [rcx],0x1
  409d97:	cmp    rax,0x3
  409d9b:	jg     409dc6 <flatcc_json_parser_string_escape@@Base+0xc6>
  409d9d:	mov    BYTE PTR [rcx],0x0
  409da0:	cmp    DWORD PTR [rdi+0x20],0x0
  409da4:	jne    409dbe <flatcc_json_parser_string_escape@@Base+0xbe>
  409da6:	mov    DWORD PTR [rdi+0x20],0x12
  409dad:	mov    eax,DWORD PTR [rdi+0x8]
  409db0:	mov    ecx,esi
  409db2:	sub    ecx,eax
  409db4:	add    ecx,0x1
  409db7:	mov    DWORD PTR [rdi+0x1c],ecx
  409dba:	mov    QWORD PTR [rdi+0x38],rsi
  409dbe:	mov    rax,rdx
  409dc1:	pop    rbx
  409dc2:	pop    r14
  409dc4:	pop    rbp
  409dc5:	ret    
  409dc6:	mov    r8b,BYTE PTR [rsi+0x2]
  409dca:	mov    eax,r8d
  409dcd:	add    al,0xd0
  409dcf:	cmp    al,0x9
  409dd1:	ja     409eb6 <flatcc_json_parser_string_escape@@Base+0x1b6>
  409dd7:	shl    r8b,0x4
  409ddb:	jmp    409ecd <flatcc_json_parser_string_escape@@Base+0x1cd>
  409de0:	mov    ebx,eax
  409de2:	or     bl,0x20
  409de5:	add    bl,0x9f
  409de8:	cmp    bl,0x5
  409deb:	ja     409d9d <flatcc_json_parser_string_escape@@Base+0x9d>
  409ded:	movzx  eax,ax
  409df0:	shl    eax,0xc
  409df3:	add    eax,0xffff9000
  409df8:	mov    r8b,BYTE PTR [rsi+0x3]
  409dfc:	mov    ebx,r8d
  409dff:	add    bl,0xd0
  409e02:	mov    r9w,0xd000
  409e07:	cmp    bl,0xa
  409e0a:	jb     409e24 <flatcc_json_parser_string_escape@@Base+0x124>
  409e0c:	or     r8b,0x20
  409e10:	mov    ebx,r8d
  409e13:	add    bl,0x9f
  409e16:	mov    r9w,0xa900
  409e1b:	cmp    bl,0x6
  409e1e:	jae    409d9d <flatcc_json_parser_string_escape@@Base+0x9d>
  409e24:	mov    r10b,BYTE PTR [rsi+0x4]
  409e28:	mov    ebx,r10d
  409e2b:	add    bl,0xd0
  409e2e:	mov    r11w,0xfd00
  409e33:	cmp    bl,0xa
  409e36:	jb     409e50 <flatcc_json_parser_string_escape@@Base+0x150>
  409e38:	or     r10b,0x20
  409e3c:	mov    ebx,r10d
  409e3f:	add    bl,0x9f
  409e42:	mov    r11w,0xfa90
  409e47:	cmp    bl,0x6
  409e4a:	jae    409d9d <flatcc_json_parser_string_escape@@Base+0x9d>
  409e50:	mov    r14b,BYTE PTR [rsi+0x5]
  409e54:	mov    ebx,r14d
  409e57:	add    bl,0xd0
  409e5a:	mov    bp,0xffd0
  409e5e:	cmp    bl,0xa
  409e61:	jb     409e7a <flatcc_json_parser_string_escape@@Base+0x17a>
  409e63:	or     r14b,0x20
  409e67:	mov    ebx,r14d
  409e6a:	add    bl,0x9f
  409e6d:	mov    bp,0xffa9
  409e71:	cmp    bl,0x6
  409e74:	jae    409d9d <flatcc_json_parser_string_escape@@Base+0x9d>
  409e7a:	movzx  edx,r8b
  409e7e:	shl    edx,0x8
  409e81:	add    r9d,edx
  409e84:	or     eax,r9d
  409e87:	movsx  edx,r10b
  409e8b:	shl    edx,0x4
  409e8e:	movsx  edi,r11w
  409e92:	add    edi,edx
  409e94:	or     eax,edi
  409e96:	movsx  edx,r14b
  409e9a:	movsx  edi,bp
  409e9d:	add    edi,edx
  409e9f:	or     eax,edi
  409ea1:	movzx  edx,ax
  409ea4:	cmp    edx,0x7f
  409ea7:	ja     409f06 <flatcc_json_parser_string_escape@@Base+0x206>
  409ea9:	mov    BYTE PTR [rcx],0x1
  409eac:	mov    edi,0x1
  409eb1:	jmp    409f4d <flatcc_json_parser_string_escape@@Base+0x24d>
  409eb6:	mov    eax,r8d
  409eb9:	or     al,0x20
  409ebb:	add    al,0x9f
  409ebd:	cmp    al,0x5
  409ebf:	ja     409d9d <flatcc_json_parser_string_escape@@Base+0x9d>
  409ec5:	shl    r8b,0x4
  409ec9:	add    r8b,0x90
  409ecd:	mov    r9b,BYTE PTR [rsi+0x3]
  409ed1:	mov    ebx,r9d
  409ed4:	add    bl,0xd0
  409ed7:	cmp    bl,0xa
  409eda:	jb     409ef4 <flatcc_json_parser_string_escape@@Base+0x1f4>
  409edc:	or     r9b,0x20
  409ee0:	mov    eax,r9d
  409ee3:	add    al,0x9f
  409ee5:	cmp    al,0x5
  409ee7:	ja     409d9d <flatcc_json_parser_string_escape@@Base+0x9d>
  409eed:	add    r9b,0xa9
  409ef1:	mov    ebx,r9d
  409ef4:	or     bl,r8b
  409ef7:	mov    BYTE PTR [rcx+0x1],bl
  409efa:	add    rsi,0x4
  409efe:	mov    rdx,rsi
  409f01:	jmp    409dbe <flatcc_json_parser_string_escape@@Base+0xbe>
  409f06:	cmp    edx,0x7ff
  409f0c:	ja     409f27 <flatcc_json_parser_string_escape@@Base+0x227>
  409f0e:	mov    BYTE PTR [rcx],0x2
  409f11:	mov    edx,eax
  409f13:	shr    edx,0x6
  409f16:	or     dl,0xc0
  409f19:	mov    BYTE PTR [rcx+0x1],dl
  409f1c:	and    al,0x3f
  409f1e:	or     al,0x80
  409f20:	mov    edi,0x2
  409f25:	jmp    409f4d <flatcc_json_parser_string_escape@@Base+0x24d>
  409f27:	mov    BYTE PTR [rcx],0x3
  409f2a:	mov    eax,edx
  409f2c:	shr    eax,0xc
  409f2f:	or     al,0xe0
  409f31:	mov    BYTE PTR [rcx+0x1],al
  409f34:	mov    eax,edx
  409f36:	shr    eax,0x6
  409f39:	and    al,0x3f
  409f3b:	or     al,0x80
  409f3d:	mov    BYTE PTR [rcx+0x2],al
  409f40:	and    dl,0x3f
  409f43:	or     dl,0x80
  409f46:	mov    edi,0x3
  409f4b:	mov    eax,edx
  409f4d:	mov    BYTE PTR [rcx+rdi*1],al
  409f50:	add    rsi,0x6
  409f54:	mov    rdx,rsi
  409f57:	jmp    409dbe <flatcc_json_parser_string_escape@@Base+0xbe>
  409f5c:	nop    DWORD PTR [rax+0x0]

0000000000409f60 <flatcc_json_parser_skip_constant@@Base>:
  409f60:	push   r15
  409f62:	push   r14
  409f64:	push   rbx
  409f65:	mov    rbx,rsi
  409f68:	cmp    rsi,rdx
  409f6b:	je     409ff1 <flatcc_json_parser_skip_constant@@Base+0x91>
  409f71:	mov    r14,rdx
  409f74:	mov    r15,rdi
  409f77:	nop    WORD PTR [rax+rax*1+0x0]
  409f80:	movzx  eax,BYTE PTR [rbx]
  409f83:	test   al,al
  409f85:	js     409fb0 <flatcc_json_parser_skip_constant@@Base+0x50>
  409f87:	cmp    al,0x5f
  409f89:	je     409fb0 <flatcc_json_parser_skip_constant@@Base+0x50>
  409f8b:	cmp    al,0x2e
  409f8d:	je     409fb0 <flatcc_json_parser_skip_constant@@Base+0x50>
  409f8f:	mov    ecx,eax
  409f91:	add    cl,0xd0
  409f94:	cmp    cl,0x9
  409f97:	jbe    409fb0 <flatcc_json_parser_skip_constant@@Base+0x50>
  409f99:	mov    ecx,eax
  409f9b:	or     cl,0x20
  409f9e:	add    cl,0x9f
  409fa1:	cmp    cl,0x19
  409fa4:	ja     409fc1 <flatcc_json_parser_skip_constant@@Base+0x61>
  409fa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409fb0:	add    rbx,0x1
  409fb4:	mov    rax,rbx
  409fb7:	mov    rbx,rax
  409fba:	cmp    rax,r14
  409fbd:	jne    409f80 <flatcc_json_parser_skip_constant@@Base+0x20>
  409fbf:	jmp    409fee <flatcc_json_parser_skip_constant@@Base+0x8e>
  409fc1:	mov    rcx,r14
  409fc4:	sub    rcx,rbx
  409fc7:	cmp    rcx,0x2
  409fcb:	jl     409fd9 <flatcc_json_parser_skip_constant@@Base+0x79>
  409fcd:	cmp    al,0x20
  409fcf:	jg     409ff1 <flatcc_json_parser_skip_constant@@Base+0x91>
  409fd1:	jne    409fd9 <flatcc_json_parser_skip_constant@@Base+0x79>
  409fd3:	cmp    BYTE PTR [rbx+0x1],0x20
  409fd7:	jg     409fb0 <flatcc_json_parser_skip_constant@@Base+0x50>
  409fd9:	mov    rdi,r15
  409fdc:	mov    rsi,rbx
  409fdf:	mov    rdx,r14
  409fe2:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  409fe7:	cmp    rax,rbx
  409fea:	jne    409fb7 <flatcc_json_parser_skip_constant@@Base+0x57>
  409fec:	jmp    409ff1 <flatcc_json_parser_skip_constant@@Base+0x91>
  409fee:	mov    rbx,r14
  409ff1:	mov    rax,rbx
  409ff4:	pop    rbx
  409ff5:	pop    r14
  409ff7:	pop    r15
  409ff9:	ret    
  409ffa:	nop    WORD PTR [rax+rax*1+0x0]

000000000040a000 <flatcc_json_parser_match_constant@@Base>:
  40a000:	push   r15
  40a002:	push   r14
  40a004:	push   r12
  40a006:	push   rbx
  40a007:	push   rax
  40a008:	mov    r14,r8
  40a00b:	mov    r15,rsi
  40a00e:	movsxd rbx,ecx
  40a011:	mov    rax,rdx
  40a014:	sub    rax,rsi
  40a017:	cmp    rax,rbx
  40a01a:	jle    40a105 <flatcc_json_parser_match_constant@@Base+0x105>
  40a020:	mov    r12,rdx
  40a023:	add    rbx,r15
  40a026:	cmp    DWORD PTR [rdi+0x14],0x0
  40a02a:	je     40a08a <flatcc_json_parser_match_constant@@Base+0x8a>
  40a02c:	mov    rax,r12
  40a02f:	sub    rax,rbx
  40a032:	cmp    rax,0x2
  40a036:	jl     40a053 <flatcc_json_parser_match_constant@@Base+0x53>
  40a038:	cmp    BYTE PTR [rbx],0x20
  40a03b:	mov    rax,rbx
  40a03e:	jg     40a05e <flatcc_json_parser_match_constant@@Base+0x5e>
  40a040:	jne    40a053 <flatcc_json_parser_match_constant@@Base+0x53>
  40a042:	cmp    BYTE PTR [rbx+0x1],0x20
  40a046:	jle    40a053 <flatcc_json_parser_match_constant@@Base+0x53>
  40a048:	lea    rax,[rbx+0x1]
  40a04c:	cmp    rax,r12
  40a04f:	jne    40a063 <flatcc_json_parser_match_constant@@Base+0x63>
  40a051:	jmp    40a0c3 <flatcc_json_parser_match_constant@@Base+0xc3>
  40a053:	mov    rsi,rbx
  40a056:	mov    rdx,r12
  40a059:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40a05e:	cmp    rax,r12
  40a061:	je     40a0c3 <flatcc_json_parser_match_constant@@Base+0xc3>
  40a063:	cmp    rax,rbx
  40a066:	je     40a0cf <flatcc_json_parser_match_constant@@Base+0xcf>
  40a068:	mov    cl,BYTE PTR [rax]
  40a06a:	cmp    cl,0x5f
  40a06d:	je     40a07e <flatcc_json_parser_match_constant@@Base+0x7e>
  40a06f:	test   cl,cl
  40a071:	js     40a07e <flatcc_json_parser_match_constant@@Base+0x7e>
  40a073:	or     cl,0x20
  40a076:	add    cl,0x9f
  40a079:	cmp    cl,0x19
  40a07c:	ja     40a0cf <flatcc_json_parser_match_constant@@Base+0xcf>
  40a07e:	mov    DWORD PTR [r14],0x1
  40a085:	jmp    40a10f <flatcc_json_parser_match_constant@@Base+0x10f>
  40a08a:	movsx  eax,BYTE PTR [rbx]
  40a08d:	cmp    eax,0x20
  40a090:	jne    40a0e9 <flatcc_json_parser_match_constant@@Base+0xe9>
  40a092:	lea    rax,[r12-0x1]
  40a097:	nop    WORD PTR [rax+rax*1+0x0]
  40a0a0:	cmp    rax,rbx
  40a0a3:	je     40a0c3 <flatcc_json_parser_match_constant@@Base+0xc3>
  40a0a5:	movzx  ecx,BYTE PTR [rbx+0x1]
  40a0a9:	add    rbx,0x1
  40a0ad:	cmp    cl,0x20
  40a0b0:	je     40a0a0 <flatcc_json_parser_match_constant@@Base+0xa0>
  40a0b2:	cmp    cl,0x22
  40a0b5:	je     40a11b <flatcc_json_parser_match_constant@@Base+0x11b>
  40a0b7:	mov    DWORD PTR [r14],0x1
  40a0be:	mov    rax,rbx
  40a0c1:	jmp    40a10f <flatcc_json_parser_match_constant@@Base+0x10f>
  40a0c3:	mov    DWORD PTR [r14],0x0
  40a0ca:	mov    rax,r12
  40a0cd:	jmp    40a10f <flatcc_json_parser_match_constant@@Base+0x10f>
  40a0cf:	mov    DWORD PTR [r14],0x0
  40a0d6:	mov    cl,BYTE PTR [rax]
  40a0d8:	cmp    cl,0x2c
  40a0db:	je     40a10f <flatcc_json_parser_match_constant@@Base+0x10f>
  40a0dd:	cmp    cl,0x5d
  40a0e0:	je     40a10f <flatcc_json_parser_match_constant@@Base+0x10f>
  40a0e2:	cmp    cl,0x7d
  40a0e5:	jne    40a10c <flatcc_json_parser_match_constant@@Base+0x10c>
  40a0e7:	jmp    40a10f <flatcc_json_parser_match_constant@@Base+0x10f>
  40a0e9:	cmp    eax,0x22
  40a0ec:	je     40a11b <flatcc_json_parser_match_constant@@Base+0x11b>
  40a0ee:	cmp    eax,0x5c
  40a0f1:	jne    40a105 <flatcc_json_parser_match_constant@@Base+0x105>
  40a0f3:	mov    DWORD PTR [r14],0x0
  40a0fa:	cmp    DWORD PTR [rdi+0x20],0x0
  40a0fe:	je     40a15b <flatcc_json_parser_match_constant@@Base+0x15b>
  40a100:	mov    rax,r12
  40a103:	jmp    40a10f <flatcc_json_parser_match_constant@@Base+0x10f>
  40a105:	mov    DWORD PTR [r14],0x0
  40a10c:	mov    rax,r15
  40a10f:	add    rsp,0x8
  40a113:	pop    rbx
  40a114:	pop    r12
  40a116:	pop    r14
  40a118:	pop    r15
  40a11a:	ret    
  40a11b:	lea    rax,[rbx+0x1]
  40a11f:	mov    rcx,rbx
  40a122:	not    rcx
  40a125:	cmp    rcx,0x2
  40a129:	jl     40a148 <flatcc_json_parser_match_constant@@Base+0x148>
  40a12b:	cmp    BYTE PTR [rax],0x20
  40a12e:	jg     40a152 <flatcc_json_parser_match_constant@@Base+0x152>
  40a130:	jne    40a148 <flatcc_json_parser_match_constant@@Base+0x148>
  40a132:	cmp    BYTE PTR [rbx+0x2],0x20
  40a136:	jle    40a148 <flatcc_json_parser_match_constant@@Base+0x148>
  40a138:	add    rbx,0x2
  40a13c:	mov    rax,rbx
  40a13f:	mov    DWORD PTR [r14],0x0
  40a146:	jmp    40a10f <flatcc_json_parser_match_constant@@Base+0x10f>
  40a148:	xor    edx,edx
  40a14a:	mov    rsi,rax
  40a14d:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40a152:	mov    DWORD PTR [r14],0x0
  40a159:	jmp    40a10f <flatcc_json_parser_match_constant@@Base+0x10f>
  40a15b:	mov    DWORD PTR [rdi+0x20],0x12
  40a162:	mov    eax,DWORD PTR [rdi+0x8]
  40a165:	mov    ecx,ebx
  40a167:	sub    ecx,eax
  40a169:	add    ecx,0x1
  40a16c:	mov    DWORD PTR [rdi+0x1c],ecx
  40a16f:	mov    QWORD PTR [rdi+0x38],rbx
  40a173:	mov    rax,r12
  40a176:	jmp    40a10f <flatcc_json_parser_match_constant@@Base+0x10f>
  40a178:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040a180 <flatcc_json_parser_unmatched_symbol@@Base>:
  40a180:	push   r14
  40a182:	push   rbx
  40a183:	push   rax
  40a184:	mov    rbx,rdx
  40a187:	mov    r14,rdi
  40a18a:	test   BYTE PTR [rdi+0x10],0x1
  40a18e:	jne    40a1bb <flatcc_json_parser_unmatched_symbol@@Base+0x3b>
  40a190:	cmp    DWORD PTR [r14+0x20],0x0
  40a195:	jne    40a32b <flatcc_json_parser_unmatched_symbol@@Base+0x1ab>
  40a19b:	mov    DWORD PTR [r14+0x20],0xd
  40a1a3:	mov    eax,DWORD PTR [r14+0x8]
  40a1a7:	mov    ecx,esi
  40a1a9:	sub    ecx,eax
  40a1ab:	add    ecx,0x1
  40a1ae:	mov    DWORD PTR [r14+0x1c],ecx
  40a1b2:	mov    QWORD PTR [r14+0x38],rsi
  40a1b6:	jmp    40a32b <flatcc_json_parser_unmatched_symbol@@Base+0x1ab>
  40a1bb:	cmp    DWORD PTR [r14+0x14],0x0
  40a1c0:	je     40a228 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
  40a1c2:	cmp    rsi,rbx
  40a1c5:	je     40a2a7 <flatcc_json_parser_unmatched_symbol@@Base+0x127>
  40a1cb:	mov    dl,BYTE PTR [rsi]
  40a1cd:	cmp    dl,0x21
  40a1d0:	jl     40a2a7 <flatcc_json_parser_unmatched_symbol@@Base+0x127>
  40a1d6:	lea    rcx,[rbx-0x1]
  40a1da:	nop    WORD PTR [rax+rax*1+0x0]
  40a1e0:	mov    eax,edx
  40a1e2:	cmp    dl,0x2e
  40a1e5:	je     40a210 <flatcc_json_parser_unmatched_symbol@@Base+0x90>
  40a1e7:	cmp    al,0x5f
  40a1e9:	je     40a210 <flatcc_json_parser_unmatched_symbol@@Base+0x90>
  40a1eb:	mov    edx,eax
  40a1ed:	add    dl,0xd0
  40a1f0:	cmp    dl,0x9
  40a1f3:	jbe    40a210 <flatcc_json_parser_unmatched_symbol@@Base+0x90>
  40a1f5:	mov    edx,eax
  40a1f7:	or     dl,0x20
  40a1fa:	add    dl,0x9f
  40a1fd:	cmp    dl,0x1a
  40a200:	jae    40a222 <flatcc_json_parser_unmatched_symbol@@Base+0xa2>
  40a202:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a20c:	nop    DWORD PTR [rax+0x0]
  40a210:	cmp    rcx,rsi
  40a213:	je     40a276 <flatcc_json_parser_unmatched_symbol@@Base+0xf6>
  40a215:	movzx  edx,BYTE PTR [rsi+0x1]
  40a219:	add    rsi,0x1
  40a21d:	cmp    dl,0x21
  40a220:	jge    40a1e0 <flatcc_json_parser_unmatched_symbol@@Base+0x60>
  40a222:	cmp    al,0x2e
  40a224:	je     40a27d <flatcc_json_parser_unmatched_symbol@@Base+0xfd>
  40a226:	jmp    40a2a7 <flatcc_json_parser_unmatched_symbol@@Base+0x127>
  40a228:	cmp    rsi,rbx
  40a22b:	je     40a25c <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
  40a22d:	nop    DWORD PTR [rax]
  40a230:	movzx  eax,BYTE PTR [rsi]
  40a233:	cmp    al,0x5c
  40a235:	je     40a240 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
  40a237:	cmp    al,0x22
  40a239:	jne    40a250 <flatcc_json_parser_unmatched_symbol@@Base+0xd0>
  40a23b:	jmp    40a270 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
  40a23d:	nop    DWORD PTR [rax]
  40a240:	mov    rax,rbx
  40a243:	sub    rax,rsi
  40a246:	cmp    rax,0x2
  40a24a:	jl     40a25c <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
  40a24c:	add    rsi,0x1
  40a250:	add    rsi,0x1
  40a254:	cmp    rsi,rbx
  40a257:	jne    40a230 <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
  40a259:	mov    rsi,rbx
  40a25c:	cmp    DWORD PTR [r14+0x20],0x0
  40a261:	mov    rax,rbx
  40a264:	jne    40a2aa <flatcc_json_parser_unmatched_symbol@@Base+0x12a>
  40a266:	mov    DWORD PTR [r14+0x20],0x14
  40a26e:	jmp    40a28f <flatcc_json_parser_unmatched_symbol@@Base+0x10f>
  40a270:	add    rsi,0x1
  40a274:	jmp    40a2a7 <flatcc_json_parser_unmatched_symbol@@Base+0x127>
  40a276:	mov    rsi,rbx
  40a279:	cmp    al,0x2e
  40a27b:	jne    40a2a7 <flatcc_json_parser_unmatched_symbol@@Base+0x127>
  40a27d:	cmp    DWORD PTR [r14+0x20],0x0
  40a282:	mov    rax,rbx
  40a285:	jne    40a2aa <flatcc_json_parser_unmatched_symbol@@Base+0x12a>
  40a287:	mov    DWORD PTR [r14+0x20],0x5
  40a28f:	mov    eax,DWORD PTR [r14+0x8]
  40a293:	mov    ecx,esi
  40a295:	sub    ecx,eax
  40a297:	add    ecx,0x1
  40a29a:	mov    DWORD PTR [r14+0x1c],ecx
  40a29e:	mov    QWORD PTR [r14+0x38],rsi
  40a2a2:	mov    rax,rbx
  40a2a5:	jmp    40a2aa <flatcc_json_parser_unmatched_symbol@@Base+0x12a>
  40a2a7:	mov    rax,rsi
  40a2aa:	mov    rcx,rbx
  40a2ad:	sub    rcx,rax
  40a2b0:	cmp    rcx,0x2
  40a2b4:	jl     40a2ce <flatcc_json_parser_unmatched_symbol@@Base+0x14e>
  40a2b6:	cmp    BYTE PTR [rax],0x20
  40a2b9:	jg     40a2dc <flatcc_json_parser_unmatched_symbol@@Base+0x15c>
  40a2bb:	jne    40a2ce <flatcc_json_parser_unmatched_symbol@@Base+0x14e>
  40a2bd:	cmp    BYTE PTR [rax+0x1],0x20
  40a2c1:	jle    40a2ce <flatcc_json_parser_unmatched_symbol@@Base+0x14e>
  40a2c3:	add    rax,0x1
  40a2c7:	cmp    rax,rbx
  40a2ca:	jne    40a2e1 <flatcc_json_parser_unmatched_symbol@@Base+0x161>
  40a2cc:	jmp    40a309 <flatcc_json_parser_unmatched_symbol@@Base+0x189>
  40a2ce:	mov    rdi,r14
  40a2d1:	mov    rsi,rax
  40a2d4:	mov    rdx,rbx
  40a2d7:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40a2dc:	cmp    rax,rbx
  40a2df:	je     40a309 <flatcc_json_parser_unmatched_symbol@@Base+0x189>
  40a2e1:	cmp    BYTE PTR [rax],0x3a
  40a2e4:	jne    40a309 <flatcc_json_parser_unmatched_symbol@@Base+0x189>
  40a2e6:	lea    rsi,[rax+0x1]
  40a2ea:	mov    rcx,rbx
  40a2ed:	sub    rcx,rsi
  40a2f0:	cmp    rcx,0x2
  40a2f4:	jl     40a336 <flatcc_json_parser_unmatched_symbol@@Base+0x1b6>
  40a2f6:	cmp    BYTE PTR [rsi],0x20
  40a2f9:	jg     40a344 <flatcc_json_parser_unmatched_symbol@@Base+0x1c4>
  40a2fb:	jne    40a336 <flatcc_json_parser_unmatched_symbol@@Base+0x1b6>
  40a2fd:	cmp    BYTE PTR [rax+0x2],0x20
  40a301:	jle    40a336 <flatcc_json_parser_unmatched_symbol@@Base+0x1b6>
  40a303:	add    rax,0x2
  40a307:	jmp    40a341 <flatcc_json_parser_unmatched_symbol@@Base+0x1c1>
  40a309:	cmp    DWORD PTR [r14+0x20],0x0
  40a30e:	jne    40a32b <flatcc_json_parser_unmatched_symbol@@Base+0x1ab>
  40a310:	mov    DWORD PTR [r14+0x20],0x4
  40a318:	mov    ecx,DWORD PTR [r14+0x8]
  40a31c:	mov    edx,eax
  40a31e:	sub    edx,ecx
  40a320:	add    edx,0x1
  40a323:	mov    DWORD PTR [r14+0x1c],edx
  40a327:	mov    QWORD PTR [r14+0x38],rax
  40a32b:	mov    rax,rbx
  40a32e:	add    rsp,0x8
  40a332:	pop    rbx
  40a333:	pop    r14
  40a335:	ret    
  40a336:	mov    rdi,r14
  40a339:	mov    rdx,rbx
  40a33c:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40a341:	mov    rsi,rax
  40a344:	mov    rdi,r14
  40a347:	mov    rdx,rbx
  40a34a:	add    rsp,0x8
  40a34e:	pop    rbx
  40a34f:	pop    r14
  40a351:	jmp    40a360 <flatcc_json_parser_generic_json@@Base>
  40a356:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000040a360 <flatcc_json_parser_generic_json@@Base>:
  40a360:	push   rbp
  40a361:	push   r15
  40a363:	push   r14
  40a365:	push   r13
  40a367:	push   r12
  40a369:	push   rbx
  40a36a:	sub    rsp,0x238
  40a371:	mov    rbx,rsi
  40a374:	cmp    rsi,rdx
  40a377:	je     40ae88 <flatcc_json_parser_generic_json@@Base+0xb28>
  40a37d:	mov    r12,rdx
  40a380:	mov    r14,rdi
  40a383:	lea    rax,[rsp+0x30]
  40a388:	lea    r15,[rdi+0x20]
  40a38c:	lea    rcx,[rdi+0x8]
  40a390:	mov    QWORD PTR [rsp+0x8],rcx
  40a395:	lea    rcx,[rdi+0x1c]
  40a399:	mov    QWORD PTR [rsp+0x10],rcx
  40a39e:	lea    rcx,[rdi+0x38]
  40a3a2:	mov    QWORD PTR [rsp+0x18],rcx
  40a3a7:	lea    rcx,[rdx-0x1]
  40a3ab:	mov    QWORD PTR [rsp+0x20],rcx
  40a3b0:	xor    ebp,ebp
  40a3b2:	test   rbp,rbp
  40a3b5:	je     40a5d4 <flatcc_json_parser_generic_json@@Base+0x274>
  40a3bb:	cmp    BYTE PTR [rax-0x1],0x7d
  40a3bf:	jne    40a5d4 <flatcc_json_parser_generic_json@@Base+0x274>
  40a3c5:	mov    al,BYTE PTR [rbx]
  40a3c7:	cmp    al,0x2e
  40a3c9:	je     40a425 <flatcc_json_parser_generic_json@@Base+0xc5>
  40a3cb:	cmp    al,0x22
  40a3cd:	jne    40a465 <flatcc_json_parser_generic_json@@Base+0x105>
  40a3d3:	add    rbx,0x1
  40a3d7:	mov    DWORD PTR [r14+0x14],0x0
  40a3df:	mov    rcx,r12
  40a3e2:	cmp    rbx,r12
  40a3e5:	je     40a51a <flatcc_json_parser_generic_json@@Base+0x1ba>
  40a3eb:	nop    DWORD PTR [rax+rax*1+0x0]
  40a3f0:	movzx  eax,BYTE PTR [rbx]
  40a3f3:	cmp    al,0x5c
  40a3f5:	je     40a400 <flatcc_json_parser_generic_json@@Base+0xa0>
  40a3f7:	cmp    al,0x22
  40a3f9:	jne    40a414 <flatcc_json_parser_generic_json@@Base+0xb4>
  40a3fb:	jmp    40a4d6 <flatcc_json_parser_generic_json@@Base+0x176>
  40a400:	mov    rax,r12
  40a403:	sub    rax,rbx
  40a406:	cmp    rax,0x2
  40a40a:	jl     40a517 <flatcc_json_parser_generic_json@@Base+0x1b7>
  40a410:	add    rbx,0x1
  40a414:	add    rbx,0x1
  40a418:	cmp    rbx,r12
  40a41b:	jne    40a3f0 <flatcc_json_parser_generic_json@@Base+0x90>
  40a41d:	mov    rcx,r12
  40a420:	jmp    40a51a <flatcc_json_parser_generic_json@@Base+0x1ba>
  40a425:	cmp    DWORD PTR [r15],0x0
  40a429:	jne    40a44f <flatcc_json_parser_generic_json@@Base+0xef>
  40a42b:	mov    DWORD PTR [r15],0x5
  40a432:	mov    rax,QWORD PTR [rsp+0x8]
  40a437:	mov    eax,DWORD PTR [rax]
  40a439:	mov    ecx,ebx
  40a43b:	sub    ecx,eax
  40a43d:	add    ecx,0x1
  40a440:	mov    rax,QWORD PTR [rsp+0x10]
  40a445:	mov    DWORD PTR [rax],ecx
  40a447:	mov    rax,QWORD PTR [rsp+0x18]
  40a44c:	mov    QWORD PTR [rax],rbx
  40a44f:	cmp    DWORD PTR [r14+0x14],0x0
  40a454:	mov    rcx,r12
  40a457:	mov    rax,r12
  40a45a:	jne    40a550 <flatcc_json_parser_generic_json@@Base+0x1f0>
  40a460:	jmp    40a51a <flatcc_json_parser_generic_json@@Base+0x1ba>
  40a465:	mov    DWORD PTR [r14+0x14],0x1
  40a46d:	mov    rax,r12
  40a470:	cmp    rbx,r12
  40a473:	je     40a550 <flatcc_json_parser_generic_json@@Base+0x1f0>
  40a479:	mov    cl,BYTE PTR [rbx]
  40a47b:	mov    rax,rbx
  40a47e:	cmp    cl,0x21
  40a481:	jl     40a550 <flatcc_json_parser_generic_json@@Base+0x1f0>
  40a487:	nop    WORD PTR [rax+rax*1+0x0]
  40a490:	mov    eax,ecx
  40a492:	cmp    cl,0x2e
  40a495:	je     40a4c0 <flatcc_json_parser_generic_json@@Base+0x160>
  40a497:	cmp    al,0x5f
  40a499:	je     40a4c0 <flatcc_json_parser_generic_json@@Base+0x160>
  40a49b:	mov    ecx,eax
  40a49d:	add    cl,0xd0
  40a4a0:	cmp    cl,0x9
  40a4a3:	jbe    40a4c0 <flatcc_json_parser_generic_json@@Base+0x160>
  40a4a5:	mov    ecx,eax
  40a4a7:	or     cl,0x20
  40a4aa:	add    cl,0x9f
  40a4ad:	cmp    cl,0x1a
  40a4b0:	jae    40a4df <flatcc_json_parser_generic_json@@Base+0x17f>
  40a4b2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a4bc:	nop    DWORD PTR [rax+0x0]
  40a4c0:	cmp    QWORD PTR [rsp+0x20],rbx
  40a4c5:	je     40a4dc <flatcc_json_parser_generic_json@@Base+0x17c>
  40a4c7:	movzx  ecx,BYTE PTR [rbx+0x1]
  40a4cb:	add    rbx,0x1
  40a4cf:	cmp    cl,0x21
  40a4d2:	jge    40a490 <flatcc_json_parser_generic_json@@Base+0x130>
  40a4d4:	jmp    40a4df <flatcc_json_parser_generic_json@@Base+0x17f>
  40a4d6:	add    rbx,0x1
  40a4da:	jmp    40a512 <flatcc_json_parser_generic_json@@Base+0x1b2>
  40a4dc:	mov    rbx,r12
  40a4df:	cmp    al,0x2e
  40a4e1:	jne    40a512 <flatcc_json_parser_generic_json@@Base+0x1b2>
  40a4e3:	cmp    DWORD PTR [r15],0x0
  40a4e7:	mov    rax,r12
  40a4ea:	jne    40a550 <flatcc_json_parser_generic_json@@Base+0x1f0>
  40a4ec:	mov    DWORD PTR [r15],0x5
  40a4f3:	mov    rax,QWORD PTR [rsp+0x8]
  40a4f8:	mov    eax,DWORD PTR [rax]
  40a4fa:	mov    ecx,ebx
  40a4fc:	sub    ecx,eax
  40a4fe:	add    ecx,0x1
  40a501:	mov    rax,QWORD PTR [rsp+0x10]
  40a506:	mov    DWORD PTR [rax],ecx
  40a508:	mov    rax,QWORD PTR [rsp+0x18]
  40a50d:	mov    QWORD PTR [rax],rbx
  40a510:	jmp    40a547 <flatcc_json_parser_generic_json@@Base+0x1e7>
  40a512:	mov    rax,rbx
  40a515:	jmp    40a550 <flatcc_json_parser_generic_json@@Base+0x1f0>
  40a517:	mov    rcx,rbx
  40a51a:	cmp    DWORD PTR [r15],0x0
  40a51e:	mov    rax,r12
  40a521:	jne    40a550 <flatcc_json_parser_generic_json@@Base+0x1f0>
  40a523:	mov    DWORD PTR [r15],0x14
  40a52a:	mov    rax,QWORD PTR [rsp+0x8]
  40a52f:	mov    eax,DWORD PTR [rax]
  40a531:	mov    edx,ecx
  40a533:	sub    edx,eax
  40a535:	add    edx,0x1
  40a538:	mov    rax,QWORD PTR [rsp+0x10]
  40a53d:	mov    DWORD PTR [rax],edx
  40a53f:	mov    rax,QWORD PTR [rsp+0x18]
  40a544:	mov    QWORD PTR [rax],rcx
  40a547:	mov    rax,r12
  40a54a:	nop    WORD PTR [rax+rax*1+0x0]
  40a550:	mov    rcx,r12
  40a553:	sub    rcx,rax
  40a556:	cmp    rcx,0x2
  40a55a:	jl     40a577 <flatcc_json_parser_generic_json@@Base+0x217>
  40a55c:	cmp    BYTE PTR [rax],0x20
  40a55f:	jg     40a585 <flatcc_json_parser_generic_json@@Base+0x225>
  40a561:	jne    40a577 <flatcc_json_parser_generic_json@@Base+0x217>
  40a563:	cmp    BYTE PTR [rax+0x1],0x20
  40a567:	jle    40a577 <flatcc_json_parser_generic_json@@Base+0x217>
  40a569:	add    rax,0x1
  40a56d:	cmp    rax,r12
  40a570:	jne    40a58e <flatcc_json_parser_generic_json@@Base+0x22e>
  40a572:	jmp    40ae9d <flatcc_json_parser_generic_json@@Base+0xb3d>
  40a577:	mov    rdi,r14
  40a57a:	mov    rsi,rax
  40a57d:	mov    rdx,r12
  40a580:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40a585:	cmp    rax,r12
  40a588:	je     40ae9d <flatcc_json_parser_generic_json@@Base+0xb3d>
  40a58e:	cmp    BYTE PTR [rax],0x3a
  40a591:	jne    40aeac <flatcc_json_parser_generic_json@@Base+0xb4c>
  40a597:	lea    r13,[rax+0x1]
  40a59b:	mov    rcx,r12
  40a59e:	sub    rcx,r13
  40a5a1:	cmp    rcx,0x2
  40a5a5:	jl     40a5c3 <flatcc_json_parser_generic_json@@Base+0x263>
  40a5a7:	mov    cl,BYTE PTR [r13+0x0]
  40a5ab:	cmp    cl,0x20
  40a5ae:	jg     40a5d9 <flatcc_json_parser_generic_json@@Base+0x279>
  40a5b0:	jne    40a5c3 <flatcc_json_parser_generic_json@@Base+0x263>
  40a5b2:	mov    cl,BYTE PTR [rax+0x2]
  40a5b5:	cmp    cl,0x20
  40a5b8:	jle    40a5c3 <flatcc_json_parser_generic_json@@Base+0x263>
  40a5ba:	add    rax,0x2
  40a5be:	mov    r13,rax
  40a5c1:	jmp    40a5d9 <flatcc_json_parser_generic_json@@Base+0x279>
  40a5c3:	mov    rdi,r14
  40a5c6:	mov    rsi,r13
  40a5c9:	mov    rdx,r12
  40a5cc:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40a5d1:	mov    rbx,rax
  40a5d4:	mov    cl,BYTE PTR [rbx]
  40a5d6:	mov    r13,rbx
  40a5d9:	movsx  eax,cl
  40a5dc:	lea    edx,[rax-0x30]
  40a5df:	cmp    edx,0xa
  40a5e2:	jae    40a650 <flatcc_json_parser_generic_json@@Base+0x2f0>
  40a5e4:	cmp    r13,r12
  40a5e7:	je     40ab60 <flatcc_json_parser_generic_json@@Base+0x800>
  40a5ed:	cmp    cl,0x2d
  40a5f0:	jne    40a603 <flatcc_json_parser_generic_json@@Base+0x2a3>
  40a5f2:	add    r13,0x1
  40a5f6:	cmp    r13,r12
  40a5f9:	je     40aa3d <flatcc_json_parser_generic_json@@Base+0x6dd>
  40a5ff:	mov    cl,BYTE PTR [r13+0x0]
  40a603:	cmp    cl,0x30
  40a606:	jne    40a668 <flatcc_json_parser_generic_json@@Base+0x308>
  40a608:	add    r13,0x1
  40a60c:	mov    rcx,r12
  40a60f:	cmp    r13,r12
  40a612:	je     40ab30 <flatcc_json_parser_generic_json@@Base+0x7d0>
  40a618:	mov    al,BYTE PTR [r13+0x0]
  40a61c:	cmp    al,0x2e
  40a61e:	jne    40a9aa <flatcc_json_parser_generic_json@@Base+0x64a>
  40a624:	mov    al,BYTE PTR [r13+0x1]
  40a628:	add    al,0xd0
  40a62a:	cmp    al,0xa
  40a62c:	jb     40a96e <flatcc_json_parser_generic_json@@Base+0x60e>
  40a632:	cmp    DWORD PTR [r15],0x0
  40a636:	jne    40ab60 <flatcc_json_parser_generic_json@@Base+0x800>
  40a63c:	add    r13,0x1
  40a640:	jmp    40a67e <flatcc_json_parser_generic_json@@Base+0x31e>
  40a642:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a64c:	nop    DWORD PTR [rax+0x0]
  40a650:	cmp    eax,0x5a
  40a653:	jg     40a6a8 <flatcc_json_parser_generic_json@@Base+0x348>
  40a655:	cmp    eax,0x22
  40a658:	je     40a73d <flatcc_json_parser_generic_json@@Base+0x3dd>
  40a65e:	cmp    eax,0x2d
  40a661:	je     40a5e4 <flatcc_json_parser_generic_json@@Base+0x284>
  40a663:	jmp    40a885 <flatcc_json_parser_generic_json@@Base+0x525>
  40a668:	add    cl,0xcf
  40a66b:	cmp    cl,0x8
  40a66e:	jbe    40a70f <flatcc_json_parser_generic_json@@Base+0x3af>
  40a674:	cmp    DWORD PTR [r15],0x0
  40a678:	jne    40ab60 <flatcc_json_parser_generic_json@@Base+0x800>
  40a67e:	mov    DWORD PTR [r15],0x6
  40a685:	mov    rax,QWORD PTR [rsp+0x8]
  40a68a:	mov    eax,DWORD PTR [rax]
  40a68c:	mov    ecx,r13d
  40a68f:	sub    ecx,eax
  40a691:	add    ecx,0x1
  40a694:	mov    rax,QWORD PTR [rsp+0x10]
  40a699:	mov    DWORD PTR [rax],ecx
  40a69b:	mov    rax,QWORD PTR [rsp+0x18]
  40a6a0:	mov    QWORD PTR [rax],r13
  40a6a3:	jmp    40ab60 <flatcc_json_parser_generic_json@@Base+0x800>
  40a6a8:	cmp    eax,0x5b
  40a6ab:	je     40a830 <flatcc_json_parser_generic_json@@Base+0x4d0>
  40a6b1:	cmp    eax,0x7b
  40a6b4:	jne    40a885 <flatcc_json_parser_generic_json@@Base+0x525>
  40a6ba:	cmp    rbp,0x200
  40a6c1:	je     40aed8 <flatcc_json_parser_generic_json@@Base+0xb78>
  40a6c7:	mov    BYTE PTR [rsp+rbp*1+0x30],0x7d
  40a6cc:	lea    rbx,[r13+0x1]
  40a6d0:	mov    rax,r12
  40a6d3:	sub    rax,rbx
  40a6d6:	cmp    rax,0x2
  40a6da:	jl     40a916 <flatcc_json_parser_generic_json@@Base+0x5b6>
  40a6e0:	cmp    BYTE PTR [rbx],0x20
  40a6e3:	jg     40a927 <flatcc_json_parser_generic_json@@Base+0x5c7>
  40a6e9:	jne    40a916 <flatcc_json_parser_generic_json@@Base+0x5b6>
  40a6ef:	cmp    BYTE PTR [r13+0x2],0x20
  40a6f4:	jle    40a916 <flatcc_json_parser_generic_json@@Base+0x5b6>
  40a6fa:	add    r13,0x2
  40a6fe:	mov    rbx,r13
  40a701:	cmp    rbx,r12
  40a704:	jne    40a930 <flatcc_json_parser_generic_json@@Base+0x5d0>
  40a70a:	jmp    40ae85 <flatcc_json_parser_generic_json@@Base+0xb25>
  40a70f:	mov    rcx,QWORD PTR [rsp+0x20]
  40a714:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a71e:	xchg   ax,ax
  40a720:	cmp    rcx,r13
  40a723:	je     40a998 <flatcc_json_parser_generic_json@@Base+0x638>
  40a729:	movzx  eax,BYTE PTR [r13+0x1]
  40a72e:	add    r13,0x1
  40a732:	add    al,0xd0
  40a734:	cmp    al,0xa
  40a736:	jb     40a720 <flatcc_json_parser_generic_json@@Base+0x3c0>
  40a738:	jmp    40a60c <flatcc_json_parser_generic_json@@Base+0x2ac>
  40a73d:	cmp    cl,0x22
  40a740:	jne    40aa71 <flatcc_json_parser_generic_json@@Base+0x711>
  40a746:	cmp    r13,r12
  40a749:	je     40aa71 <flatcc_json_parser_generic_json@@Base+0x711>
  40a74f:	add    r13,0x1
  40a753:	mov    rax,r12
  40a756:	cmp    r13,r12
  40a759:	je     40ab01 <flatcc_json_parser_generic_json@@Base+0x7a1>
  40a75f:	nop
  40a760:	mov    al,BYTE PTR [r13+0x0]
  40a764:	cmp    al,0x22
  40a766:	je     40aae9 <flatcc_json_parser_generic_json@@Base+0x789>
  40a76c:	cmp    al,0x20
  40a76e:	mov    rcx,QWORD PTR [rsp+0x20]
  40a773:	jb     40a79a <flatcc_json_parser_generic_json@@Base+0x43a>
  40a775:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a77f:	nop
  40a780:	cmp    al,0x22
  40a782:	je     40a7ca <flatcc_json_parser_generic_json@@Base+0x46a>
  40a784:	cmp    al,0x5c
  40a786:	je     40a7ca <flatcc_json_parser_generic_json@@Base+0x46a>
  40a788:	cmp    rcx,r13
  40a78b:	je     40a7de <flatcc_json_parser_generic_json@@Base+0x47e>
  40a78d:	movzx  eax,BYTE PTR [r13+0x1]
  40a792:	add    r13,0x1
  40a796:	cmp    al,0x20
  40a798:	jae    40a780 <flatcc_json_parser_generic_json@@Base+0x420>
  40a79a:	cmp    DWORD PTR [r15],0x0
  40a79e:	mov    rsi,r12
  40a7a1:	jne    40a80f <flatcc_json_parser_generic_json@@Base+0x4af>
  40a7a3:	mov    DWORD PTR [r15],0x11
  40a7aa:	mov    rax,QWORD PTR [rsp+0x8]
  40a7af:	mov    eax,DWORD PTR [rax]
  40a7b1:	mov    ecx,r13d
  40a7b4:	sub    ecx,eax
  40a7b6:	add    ecx,0x1
  40a7b9:	mov    rax,QWORD PTR [rsp+0x10]
  40a7be:	mov    DWORD PTR [rax],ecx
  40a7c0:	mov    rax,QWORD PTR [rsp+0x18]
  40a7c5:	mov    QWORD PTR [rax],r13
  40a7c8:	jmp    40a80c <flatcc_json_parser_generic_json@@Base+0x4ac>
  40a7ca:	mov    rsi,r12
  40a7cd:	cmp    r12,r13
  40a7d0:	je     40a80f <flatcc_json_parser_generic_json@@Base+0x4af>
  40a7d2:	mov    rsi,r13
  40a7d5:	cmp    al,0x22
  40a7d7:	jne    40a80f <flatcc_json_parser_generic_json@@Base+0x4af>
  40a7d9:	jmp    40aae9 <flatcc_json_parser_generic_json@@Base+0x789>
  40a7de:	cmp    DWORD PTR [r15],0x0
  40a7e2:	mov    rsi,r12
  40a7e5:	jne    40a80f <flatcc_json_parser_generic_json@@Base+0x4af>
  40a7e7:	mov    DWORD PTR [r15],0x14
  40a7ee:	mov    rax,QWORD PTR [rsp+0x8]
  40a7f3:	mov    eax,DWORD PTR [rax]
  40a7f5:	mov    ecx,r12d
  40a7f8:	sub    ecx,eax
  40a7fa:	add    ecx,0x1
  40a7fd:	mov    rax,QWORD PTR [rsp+0x10]
  40a802:	mov    DWORD PTR [rax],ecx
  40a804:	mov    rax,QWORD PTR [rsp+0x18]
  40a809:	mov    QWORD PTR [rax],r12
  40a80c:	mov    rsi,r12
  40a80f:	mov    rdi,r14
  40a812:	mov    rdx,r12
  40a815:	lea    rcx,[rsp+0x2c]
  40a81a:	call   409d00 <flatcc_json_parser_string_escape@@Base>
  40a81f:	mov    r13,rax
  40a822:	cmp    rax,r12
  40a825:	jne    40a760 <flatcc_json_parser_generic_json@@Base+0x400>
  40a82b:	jmp    40aaa0 <flatcc_json_parser_generic_json@@Base+0x740>
  40a830:	cmp    rbp,0x200
  40a837:	je     40aed8 <flatcc_json_parser_generic_json@@Base+0xb78>
  40a83d:	mov    BYTE PTR [rsp+rbp*1+0x30],0x5d
  40a842:	lea    rbx,[r13+0x1]
  40a846:	mov    rax,r12
  40a849:	sub    rax,rbx
  40a84c:	cmp    rax,0x2
  40a850:	jl     40a942 <flatcc_json_parser_generic_json@@Base+0x5e2>
  40a856:	cmp    BYTE PTR [rbx],0x20
  40a859:	jg     40a953 <flatcc_json_parser_generic_json@@Base+0x5f3>
  40a85f:	jne    40a942 <flatcc_json_parser_generic_json@@Base+0x5e2>
  40a865:	cmp    BYTE PTR [r13+0x2],0x20
  40a86a:	jle    40a942 <flatcc_json_parser_generic_json@@Base+0x5e2>
  40a870:	add    r13,0x2
  40a874:	mov    rbx,r13
  40a877:	cmp    rbx,r12
  40a87a:	jne    40a95c <flatcc_json_parser_generic_json@@Base+0x5fc>
  40a880:	jmp    40ae85 <flatcc_json_parser_generic_json@@Base+0xb25>
  40a885:	mov    rbx,r12
  40a888:	cmp    r13,r12
  40a88b:	je     40a908 <flatcc_json_parser_generic_json@@Base+0x5a8>
  40a88d:	mov    rbx,r13
  40a890:	test   cl,cl
  40a892:	js     40a8f9 <flatcc_json_parser_generic_json@@Base+0x599>
  40a894:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a89e:	xchg   ax,ax
  40a8a0:	cmp    cl,0x5f
  40a8a3:	je     40a8f9 <flatcc_json_parser_generic_json@@Base+0x599>
  40a8a5:	cmp    cl,0x2e
  40a8a8:	je     40a8f9 <flatcc_json_parser_generic_json@@Base+0x599>
  40a8aa:	mov    eax,ecx
  40a8ac:	add    al,0xd0
  40a8ae:	cmp    al,0x9
  40a8b0:	jbe    40a8f9 <flatcc_json_parser_generic_json@@Base+0x599>
  40a8b2:	mov    eax,ecx
  40a8b4:	or     al,0x20
  40a8b6:	add    al,0x9f
  40a8b8:	cmp    al,0x19
  40a8ba:	jbe    40a8f9 <flatcc_json_parser_generic_json@@Base+0x599>
  40a8bc:	mov    rax,r12
  40a8bf:	sub    rax,rbx
  40a8c2:	cmp    rax,0x2
  40a8c6:	jl     40a8d5 <flatcc_json_parser_generic_json@@Base+0x575>
  40a8c8:	cmp    cl,0x20
  40a8cb:	jg     40a908 <flatcc_json_parser_generic_json@@Base+0x5a8>
  40a8cd:	jne    40a8d5 <flatcc_json_parser_generic_json@@Base+0x575>
  40a8cf:	cmp    BYTE PTR [rbx+0x1],0x20
  40a8d3:	jg     40a8f9 <flatcc_json_parser_generic_json@@Base+0x599>
  40a8d5:	mov    rdi,r14
  40a8d8:	mov    rsi,rbx
  40a8db:	mov    rdx,r12
  40a8de:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40a8e3:	cmp    rax,rbx
  40a8e6:	jne    40a900 <flatcc_json_parser_generic_json@@Base+0x5a0>
  40a8e8:	jmp    40a908 <flatcc_json_parser_generic_json@@Base+0x5a8>
  40a8ea:	nop    WORD PTR [rax+rax*1+0x0]
  40a8f0:	mov    cl,BYTE PTR [rax]
  40a8f2:	mov    rbx,rax
  40a8f5:	test   cl,cl
  40a8f7:	jns    40a8a0 <flatcc_json_parser_generic_json@@Base+0x540>
  40a8f9:	add    rbx,0x1
  40a8fd:	mov    rax,rbx
  40a900:	cmp    rax,r12
  40a903:	jne    40a8f0 <flatcc_json_parser_generic_json@@Base+0x590>
  40a905:	mov    rbx,r12
  40a908:	cmp    r13,rbx
  40a90b:	jne    40ab63 <flatcc_json_parser_generic_json@@Base+0x803>
  40a911:	jmp    40aee7 <flatcc_json_parser_generic_json@@Base+0xb87>
  40a916:	mov    rdi,r14
  40a919:	mov    rsi,rbx
  40a91c:	mov    rdx,r12
  40a91f:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40a924:	mov    rbx,rax
  40a927:	cmp    rbx,r12
  40a92a:	je     40ae85 <flatcc_json_parser_generic_json@@Base+0xb25>
  40a930:	add    rbp,0x1
  40a934:	cmp    BYTE PTR [rbx],0x7d
  40a937:	je     40ab63 <flatcc_json_parser_generic_json@@Base+0x803>
  40a93d:	jmp    40ae32 <flatcc_json_parser_generic_json@@Base+0xad2>
  40a942:	mov    rdi,r14
  40a945:	mov    rsi,rbx
  40a948:	mov    rdx,r12
  40a94b:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40a950:	mov    rbx,rax
  40a953:	cmp    rbx,r12
  40a956:	je     40ae85 <flatcc_json_parser_generic_json@@Base+0xb25>
  40a95c:	add    rbp,0x1
  40a960:	cmp    BYTE PTR [rbx],0x5d
  40a963:	je     40ab63 <flatcc_json_parser_generic_json@@Base+0x803>
  40a969:	jmp    40ae32 <flatcc_json_parser_generic_json@@Base+0xad2>
  40a96e:	add    r13,0x2
  40a972:	mov    rcx,r12
  40a975:	cmp    r13,r12
  40a978:	je     40ab30 <flatcc_json_parser_generic_json@@Base+0x7d0>
  40a97e:	xchg   ax,ax
  40a980:	movzx  eax,BYTE PTR [r13+0x0]
  40a985:	mov    ecx,eax
  40a987:	add    cl,0xd0
  40a98a:	cmp    cl,0x9
  40a98d:	ja     40a9aa <flatcc_json_parser_generic_json@@Base+0x64a>
  40a98f:	add    r13,0x1
  40a993:	cmp    r12,r13
  40a996:	jne    40a980 <flatcc_json_parser_generic_json@@Base+0x620>
  40a998:	mov    rcx,r12
  40a99b:	cmp    DWORD PTR [r15],0x0
  40a99f:	jne    40ab60 <flatcc_json_parser_generic_json@@Base+0x800>
  40a9a5:	jmp    40ab36 <flatcc_json_parser_generic_json@@Base+0x7d6>
  40a9aa:	mov    rcx,r12
  40a9ad:	cmp    r13,r12
  40a9b0:	je     40ab30 <flatcc_json_parser_generic_json@@Base+0x7d0>
  40a9b6:	mov    ecx,eax
  40a9b8:	or     cl,0x20
  40a9bb:	cmp    cl,0x65
  40a9be:	jne    40aaaf <flatcc_json_parser_generic_json@@Base+0x74f>
  40a9c4:	lea    rbx,[r13+0x1]
  40a9c8:	cmp    rbx,r12
  40a9cb:	je     40aa3d <flatcc_json_parser_generic_json@@Base+0x6dd>
  40a9cd:	mov    al,BYTE PTR [rbx]
  40a9cf:	cmp    al,0x2d
  40a9d1:	je     40a9d7 <flatcc_json_parser_generic_json@@Base+0x677>
  40a9d3:	cmp    al,0x2b
  40a9d5:	jne    40a9de <flatcc_json_parser_generic_json@@Base+0x67e>
  40a9d7:	add    r13,0x2
  40a9db:	mov    rbx,r13
  40a9de:	cmp    rbx,r12
  40a9e1:	je     40a9eb <flatcc_json_parser_generic_json@@Base+0x68b>
  40a9e3:	mov    al,BYTE PTR [rbx]
  40a9e5:	add    al,0xd0
  40a9e7:	cmp    al,0x9
  40a9e9:	jbe    40aa1e <flatcc_json_parser_generic_json@@Base+0x6be>
  40a9eb:	cmp    DWORD PTR [r15],0x0
  40a9ef:	jne    40ab60 <flatcc_json_parser_generic_json@@Base+0x800>
  40a9f5:	mov    DWORD PTR [r15],0x6
  40a9fc:	mov    rax,QWORD PTR [rsp+0x8]
  40aa01:	mov    eax,DWORD PTR [rax]
  40aa03:	mov    ecx,ebx
  40aa05:	sub    ecx,eax
  40aa07:	add    ecx,0x1
  40aa0a:	mov    rax,QWORD PTR [rsp+0x10]
  40aa0f:	mov    DWORD PTR [rax],ecx
  40aa11:	mov    rax,QWORD PTR [rsp+0x18]
  40aa16:	mov    QWORD PTR [rax],rbx
  40aa19:	jmp    40ab60 <flatcc_json_parser_generic_json@@Base+0x800>
  40aa1e:	cmp    QWORD PTR [rsp+0x20],rbx
  40aa23:	je     40ab2d <flatcc_json_parser_generic_json@@Base+0x7cd>
  40aa29:	movzx  eax,BYTE PTR [rbx+0x1]
  40aa2d:	add    rbx,0x1
  40aa31:	mov    ecx,eax
  40aa33:	add    cl,0xd0
  40aa36:	cmp    cl,0xa
  40aa39:	jb     40aa1e <flatcc_json_parser_generic_json@@Base+0x6be>
  40aa3b:	jmp    40aab2 <flatcc_json_parser_generic_json@@Base+0x752>
  40aa3d:	cmp    DWORD PTR [r15],0x0
  40aa41:	jne    40ab60 <flatcc_json_parser_generic_json@@Base+0x800>
  40aa47:	mov    DWORD PTR [r15],0x6
  40aa4e:	mov    rax,QWORD PTR [rsp+0x8]
  40aa53:	mov    eax,DWORD PTR [rax]
  40aa55:	mov    ecx,r12d
  40aa58:	sub    ecx,eax
  40aa5a:	add    ecx,0x1
  40aa5d:	mov    rax,QWORD PTR [rsp+0x10]
  40aa62:	mov    DWORD PTR [rax],ecx
  40aa64:	mov    rax,QWORD PTR [rsp+0x18]
  40aa69:	mov    QWORD PTR [rax],r12
  40aa6c:	jmp    40ab60 <flatcc_json_parser_generic_json@@Base+0x800>
  40aa71:	cmp    DWORD PTR [r15],0x0
  40aa75:	jne    40ab60 <flatcc_json_parser_generic_json@@Base+0x800>
  40aa7b:	mov    DWORD PTR [r15],0x10
  40aa82:	mov    rax,QWORD PTR [rsp+0x8]
  40aa87:	mov    eax,DWORD PTR [rax]
  40aa89:	mov    ecx,r13d
  40aa8c:	sub    ecx,eax
  40aa8e:	add    ecx,0x1
  40aa91:	mov    rax,QWORD PTR [rsp+0x10]
  40aa96:	mov    DWORD PTR [rax],ecx
  40aa98:	mov    rax,QWORD PTR [rsp+0x18]
  40aa9d:	mov    QWORD PTR [rax],r13
  40aaa0:	mov    rax,r12
  40aaa3:	cmp    DWORD PTR [r15],0x0
  40aaa7:	jne    40ab60 <flatcc_json_parser_generic_json@@Base+0x800>
  40aaad:	jmp    40ab07 <flatcc_json_parser_generic_json@@Base+0x7a7>
  40aaaf:	mov    rbx,r13
  40aab2:	mov    rcx,r12
  40aab5:	cmp    rbx,r12
  40aab8:	je     40ab30 <flatcc_json_parser_generic_json@@Base+0x7d0>
  40aaba:	movsx  eax,al
  40aabd:	cmp    eax,0x3a
  40aac0:	ja     40aad6 <flatcc_json_parser_generic_json@@Base+0x776>
  40aac2:	movabs rcx,0x400100100002e00
  40aacc:	bt     rcx,rax
  40aad0:	jb     40ab63 <flatcc_json_parser_generic_json@@Base+0x803>
  40aad6:	cmp    eax,0x5d
  40aad9:	je     40ab63 <flatcc_json_parser_generic_json@@Base+0x803>
  40aadf:	mov    rcx,rbx
  40aae2:	cmp    eax,0x7d
  40aae5:	je     40ab63 <flatcc_json_parser_generic_json@@Base+0x803>
  40aae7:	jmp    40ab30 <flatcc_json_parser_generic_json@@Base+0x7d0>
  40aae9:	cmp    r13,r12
  40aaec:	je     40aafe <flatcc_json_parser_generic_json@@Base+0x79e>
  40aaee:	cmp    BYTE PTR [r13+0x0],0x22
  40aaf3:	jne    40aafe <flatcc_json_parser_generic_json@@Base+0x79e>
  40aaf5:	add    r13,0x1
  40aaf9:	mov    rbx,r13
  40aafc:	jmp    40ab63 <flatcc_json_parser_generic_json@@Base+0x803>
  40aafe:	mov    rax,r13
  40ab01:	cmp    DWORD PTR [r15],0x0
  40ab05:	jne    40ab60 <flatcc_json_parser_generic_json@@Base+0x800>
  40ab07:	mov    DWORD PTR [r15],0x14
  40ab0e:	mov    rcx,QWORD PTR [rsp+0x8]
  40ab13:	mov    ecx,DWORD PTR [rcx]
  40ab15:	mov    edx,eax
  40ab17:	sub    edx,ecx
  40ab19:	add    edx,0x1
  40ab1c:	mov    rcx,QWORD PTR [rsp+0x10]
  40ab21:	mov    DWORD PTR [rcx],edx
  40ab23:	mov    rcx,QWORD PTR [rsp+0x18]
  40ab28:	mov    QWORD PTR [rcx],rax
  40ab2b:	jmp    40ab60 <flatcc_json_parser_generic_json@@Base+0x800>
  40ab2d:	mov    rcx,r12
  40ab30:	cmp    DWORD PTR [r15],0x0
  40ab34:	jne    40ab60 <flatcc_json_parser_generic_json@@Base+0x800>
  40ab36:	mov    DWORD PTR [r15],0x6
  40ab3d:	mov    rax,QWORD PTR [rsp+0x8]
  40ab42:	mov    eax,DWORD PTR [rax]
  40ab44:	mov    edx,ecx
  40ab46:	sub    edx,eax
  40ab48:	add    edx,0x1
  40ab4b:	mov    rax,QWORD PTR [rsp+0x10]
  40ab50:	mov    DWORD PTR [rax],edx
  40ab52:	mov    rax,QWORD PTR [rsp+0x18]
  40ab57:	mov    QWORD PTR [rax],rcx
  40ab5a:	nop    WORD PTR [rax+rax*1+0x0]
  40ab60:	mov    rbx,r12
  40ab63:	cmp    rbx,r12
  40ab66:	setne  al
  40ab69:	test   rbp,rbp
  40ab6c:	setne  cl
  40ab6f:	je     40ae45 <flatcc_json_parser_generic_json@@Base+0xae5>
  40ab75:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ab7f:	nop
  40ab80:	cmp    rbx,r12
  40ab83:	je     40ae45 <flatcc_json_parser_generic_json@@Base+0xae5>
  40ab89:	mov    rax,r12
  40ab8c:	sub    rax,rbx
  40ab8f:	cmp    BYTE PTR [rsp+rbp*1+0x2f],0x5d
  40ab94:	jne    40abb0 <flatcc_json_parser_generic_json@@Base+0x850>
  40ab96:	cmp    rax,0x2
  40ab9a:	jl     40abe0 <flatcc_json_parser_generic_json@@Base+0x880>
  40ab9c:	cmp    BYTE PTR [rbx],0x20
  40ab9f:	jle    40abc7 <flatcc_json_parser_generic_json@@Base+0x867>
  40aba1:	mov    rax,rbx
  40aba4:	jmp    40abee <flatcc_json_parser_generic_json@@Base+0x88e>
  40aba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40abb0:	cmp    rax,0x2
  40abb4:	jl     40ac40 <flatcc_json_parser_generic_json@@Base+0x8e0>
  40abba:	cmp    BYTE PTR [rbx],0x20
  40abbd:	jle    40ac24 <flatcc_json_parser_generic_json@@Base+0x8c4>
  40abbf:	mov    rax,rbx
  40abc2:	jmp    40ac4e <flatcc_json_parser_generic_json@@Base+0x8ee>
  40abc7:	jne    40abe0 <flatcc_json_parser_generic_json@@Base+0x880>
  40abc9:	cmp    BYTE PTR [rbx+0x1],0x20
  40abcd:	jle    40abe0 <flatcc_json_parser_generic_json@@Base+0x880>
  40abcf:	add    rbx,0x1
  40abd3:	mov    rax,rbx
  40abd6:	jmp    40abee <flatcc_json_parser_generic_json@@Base+0x88e>
  40abd8:	nop    DWORD PTR [rax+rax*1+0x0]
  40abe0:	mov    rdi,r14
  40abe3:	mov    rsi,rbx
  40abe6:	mov    rdx,r12
  40abe9:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40abee:	mov    rbx,r12
  40abf1:	cmp    rax,r12
  40abf4:	je     40add1 <flatcc_json_parser_generic_json@@Base+0xa71>
  40abfa:	movzx  ecx,BYTE PTR [rax]
  40abfd:	cmp    cl,0x2c
  40ac00:	je     40aca1 <flatcc_json_parser_generic_json@@Base+0x941>
  40ac06:	cmp    cl,0x5d
  40ac09:	je     40ac6b <flatcc_json_parser_generic_json@@Base+0x90b>
  40ac0b:	cmp    DWORD PTR [r15],0x0
  40ac0f:	mov    rbx,r12
  40ac12:	jne    40add1 <flatcc_json_parser_generic_json@@Base+0xa71>
  40ac18:	mov    DWORD PTR [r15],0x9
  40ac1f:	jmp    40ad16 <flatcc_json_parser_generic_json@@Base+0x9b6>
  40ac24:	jne    40ac40 <flatcc_json_parser_generic_json@@Base+0x8e0>
  40ac26:	cmp    BYTE PTR [rbx+0x1],0x20
  40ac2a:	jle    40ac40 <flatcc_json_parser_generic_json@@Base+0x8e0>
  40ac2c:	add    rbx,0x1
  40ac30:	mov    rax,rbx
  40ac33:	jmp    40ac4e <flatcc_json_parser_generic_json@@Base+0x8ee>
  40ac35:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ac3f:	nop
  40ac40:	mov    rdi,r14
  40ac43:	mov    rsi,rbx
  40ac46:	mov    rdx,r12
  40ac49:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40ac4e:	mov    rbx,r12
  40ac51:	cmp    rax,r12
  40ac54:	je     40add1 <flatcc_json_parser_generic_json@@Base+0xa71>
  40ac5a:	movzx  ecx,BYTE PTR [rax]
  40ac5d:	cmp    cl,0x2c
  40ac60:	je     40accc <flatcc_json_parser_generic_json@@Base+0x96c>
  40ac62:	cmp    cl,0x7d
  40ac65:	jne    40ad02 <flatcc_json_parser_generic_json@@Base+0x9a2>
  40ac6b:	lea    rbx,[rax+0x1]
  40ac6f:	mov    rcx,r12
  40ac72:	sub    rcx,rbx
  40ac75:	cmp    rcx,0x2
  40ac79:	jl     40adc0 <flatcc_json_parser_generic_json@@Base+0xa60>
  40ac7f:	cmp    BYTE PTR [rbx],0x20
  40ac82:	jg     40add1 <flatcc_json_parser_generic_json@@Base+0xa71>
  40ac88:	jne    40adc0 <flatcc_json_parser_generic_json@@Base+0xa60>
  40ac8e:	cmp    BYTE PTR [rax+0x2],0x20
  40ac92:	jle    40adc0 <flatcc_json_parser_generic_json@@Base+0xa60>
  40ac98:	add    rax,0x2
  40ac9c:	jmp    40adce <flatcc_json_parser_generic_json@@Base+0xa6e>
  40aca1:	lea    rcx,[rax+0x1]
  40aca5:	mov    rdx,r12
  40aca8:	sub    rdx,rcx
  40acab:	cmp    rdx,0x2
  40acaf:	jl     40ad3b <flatcc_json_parser_generic_json@@Base+0x9db>
  40acb5:	cmp    BYTE PTR [rcx],0x20
  40acb8:	jg     40ad4c <flatcc_json_parser_generic_json@@Base+0x9ec>
  40acbe:	jne    40ad3b <flatcc_json_parser_generic_json@@Base+0x9db>
  40acc0:	cmp    BYTE PTR [rax+0x2],0x20
  40acc4:	jle    40ad3b <flatcc_json_parser_generic_json@@Base+0x9db>
  40acc6:	add    rax,0x2
  40acca:	jmp    40ad49 <flatcc_json_parser_generic_json@@Base+0x9e9>
  40accc:	lea    rcx,[rax+0x1]
  40acd0:	mov    rdx,r12
  40acd3:	sub    rdx,rcx
  40acd6:	cmp    rdx,0x2
  40acda:	jl     40ad84 <flatcc_json_parser_generic_json@@Base+0xa24>
  40ace0:	cmp    BYTE PTR [rcx],0x20
  40ace3:	jg     40ad95 <flatcc_json_parser_generic_json@@Base+0xa35>
  40ace9:	jne    40ad84 <flatcc_json_parser_generic_json@@Base+0xa24>
  40acef:	cmp    BYTE PTR [rax+0x2],0x20
  40acf3:	jle    40ad84 <flatcc_json_parser_generic_json@@Base+0xa24>
  40acf9:	add    rax,0x2
  40acfd:	jmp    40ad92 <flatcc_json_parser_generic_json@@Base+0xa32>
  40ad02:	cmp    DWORD PTR [r15],0x0
  40ad06:	mov    rbx,r12
  40ad09:	jne    40add1 <flatcc_json_parser_generic_json@@Base+0xa71>
  40ad0f:	mov    DWORD PTR [r15],0xa
  40ad16:	mov    rcx,QWORD PTR [rsp+0x8]
  40ad1b:	mov    ecx,DWORD PTR [rcx]
  40ad1d:	mov    edx,eax
  40ad1f:	sub    edx,ecx
  40ad21:	add    edx,0x1
  40ad24:	mov    rcx,QWORD PTR [rsp+0x10]
  40ad29:	mov    DWORD PTR [rcx],edx
  40ad2b:	mov    rcx,QWORD PTR [rsp+0x18]
  40ad30:	mov    QWORD PTR [rcx],rax
  40ad33:	mov    rbx,r12
  40ad36:	jmp    40add1 <flatcc_json_parser_generic_json@@Base+0xa71>
  40ad3b:	mov    rdi,r14
  40ad3e:	mov    rsi,rcx
  40ad41:	mov    rdx,r12
  40ad44:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40ad49:	mov    rcx,rax
  40ad4c:	cmp    rcx,r12
  40ad4f:	je     40adea <flatcc_json_parser_generic_json@@Base+0xa8a>
  40ad55:	cmp    BYTE PTR [rcx],0x5d
  40ad58:	jne    40ae2f <flatcc_json_parser_generic_json@@Base+0xacf>
  40ad5e:	lea    rbx,[rcx+0x1]
  40ad62:	mov    rax,r12
  40ad65:	sub    rax,rbx
  40ad68:	cmp    rax,0x2
  40ad6c:	jl     40adc0 <flatcc_json_parser_generic_json@@Base+0xa60>
  40ad6e:	cmp    BYTE PTR [rbx],0x20
  40ad71:	jg     40add1 <flatcc_json_parser_generic_json@@Base+0xa71>
  40ad73:	jne    40adc0 <flatcc_json_parser_generic_json@@Base+0xa60>
  40ad75:	cmp    BYTE PTR [rcx+0x2],0x20
  40ad79:	jle    40adc0 <flatcc_json_parser_generic_json@@Base+0xa60>
  40ad7b:	add    rcx,0x2
  40ad7f:	mov    rbx,rcx
  40ad82:	jmp    40add1 <flatcc_json_parser_generic_json@@Base+0xa71>
  40ad84:	mov    rdi,r14
  40ad87:	mov    rsi,rcx
  40ad8a:	mov    rdx,r12
  40ad8d:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40ad92:	mov    rcx,rax
  40ad95:	cmp    rcx,r12
  40ad98:	je     40adfc <flatcc_json_parser_generic_json@@Base+0xa9c>
  40ad9a:	cmp    BYTE PTR [rcx],0x7d
  40ad9d:	jne    40ae2f <flatcc_json_parser_generic_json@@Base+0xacf>
  40ada3:	lea    rbx,[rcx+0x1]
  40ada7:	mov    rax,r12
  40adaa:	sub    rax,rbx
  40adad:	cmp    rax,0x2
  40adb1:	jl     40adc0 <flatcc_json_parser_generic_json@@Base+0xa60>
  40adb3:	cmp    BYTE PTR [rbx],0x20
  40adb6:	jg     40add1 <flatcc_json_parser_generic_json@@Base+0xa71>
  40adb8:	je     40ad75 <flatcc_json_parser_generic_json@@Base+0xa15>
  40adba:	nop    WORD PTR [rax+rax*1+0x0]
  40adc0:	mov    rdi,r14
  40adc3:	mov    rsi,rbx
  40adc6:	mov    rdx,r12
  40adc9:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40adce:	mov    rbx,rax
  40add1:	cmp    rbx,r12
  40add4:	setne  al
  40add7:	cmp    rbp,0x1
  40addb:	lea    rbp,[rbp-0x1]
  40addf:	setne  cl
  40ade2:	jne    40ab80 <flatcc_json_parser_generic_json@@Base+0x820>
  40ade8:	jmp    40ae45 <flatcc_json_parser_generic_json@@Base+0xae5>
  40adea:	cmp    DWORD PTR [r15],0x0
  40adee:	mov    rbx,r12
  40adf1:	jne    40add1 <flatcc_json_parser_generic_json@@Base+0xa71>
  40adf3:	mov    DWORD PTR [r15],0x9
  40adfa:	jmp    40ae0c <flatcc_json_parser_generic_json@@Base+0xaac>
  40adfc:	cmp    DWORD PTR [r15],0x0
  40ae00:	mov    rbx,r12
  40ae03:	jne    40add1 <flatcc_json_parser_generic_json@@Base+0xa71>
  40ae05:	mov    DWORD PTR [r15],0xa
  40ae0c:	mov    rax,QWORD PTR [rsp+0x8]
  40ae11:	mov    eax,DWORD PTR [rax]
  40ae13:	mov    ecx,r12d
  40ae16:	sub    ecx,eax
  40ae18:	add    ecx,0x1
  40ae1b:	mov    rax,QWORD PTR [rsp+0x10]
  40ae20:	mov    DWORD PTR [rax],ecx
  40ae22:	mov    rax,QWORD PTR [rsp+0x18]
  40ae27:	mov    QWORD PTR [rax],r12
  40ae2a:	mov    rbx,r12
  40ae2d:	jmp    40add1 <flatcc_json_parser_generic_json@@Base+0xa71>
  40ae2f:	mov    rbx,rcx
  40ae32:	lea    rax,[rsp+rbp*1]
  40ae36:	add    rax,0x30
  40ae3a:	cmp    rbx,r12
  40ae3d:	jne    40a3b2 <flatcc_json_parser_generic_json@@Base+0x52>
  40ae43:	jmp    40ae85 <flatcc_json_parser_generic_json@@Base+0xb25>
  40ae45:	test   al,al
  40ae47:	jne    40ae88 <flatcc_json_parser_generic_json@@Base+0xb28>
  40ae49:	test   cl,cl
  40ae4b:	je     40ae88 <flatcc_json_parser_generic_json@@Base+0xb28>
  40ae4d:	cmp    DWORD PTR [r15],0x0
  40ae51:	jne    40ae85 <flatcc_json_parser_generic_json@@Base+0xb25>
  40ae53:	xor    eax,eax
  40ae55:	cmp    BYTE PTR [rsp+rbp*1+0x2f],0x5d
  40ae5a:	sete   al
  40ae5d:	mov    ecx,0xa
  40ae62:	sub    ecx,eax
  40ae64:	mov    DWORD PTR [r15],ecx
  40ae67:	mov    rax,QWORD PTR [rsp+0x8]
  40ae6c:	mov    eax,DWORD PTR [rax]
  40ae6e:	mov    ecx,r12d
  40ae71:	sub    ecx,eax
  40ae73:	add    ecx,0x1
  40ae76:	mov    rax,QWORD PTR [rsp+0x10]
  40ae7b:	mov    DWORD PTR [rax],ecx
  40ae7d:	mov    rax,QWORD PTR [rsp+0x18]
  40ae82:	mov    QWORD PTR [rax],r12
  40ae85:	mov    rbx,r12
  40ae88:	mov    rax,rbx
  40ae8b:	add    rsp,0x238
  40ae92:	pop    rbx
  40ae93:	pop    r12
  40ae95:	pop    r13
  40ae97:	pop    r14
  40ae99:	pop    r15
  40ae9b:	pop    rbp
  40ae9c:	ret    
  40ae9d:	cmp    DWORD PTR [r15],0x0
  40aea1:	jne    40ae85 <flatcc_json_parser_generic_json@@Base+0xb25>
  40aea3:	mov    DWORD PTR [r15],0xa
  40aeaa:	jmp    40ae67 <flatcc_json_parser_generic_json@@Base+0xb07>
  40aeac:	cmp    DWORD PTR [r15],0x0
  40aeb0:	jne    40ae85 <flatcc_json_parser_generic_json@@Base+0xb25>
  40aeb2:	mov    DWORD PTR [r15],0x4
  40aeb9:	mov    rcx,QWORD PTR [rsp+0x8]
  40aebe:	mov    ecx,DWORD PTR [rcx]
  40aec0:	mov    edx,eax
  40aec2:	sub    edx,ecx
  40aec4:	add    edx,0x1
  40aec7:	mov    rcx,QWORD PTR [rsp+0x10]
  40aecc:	mov    DWORD PTR [rcx],edx
  40aece:	mov    rcx,QWORD PTR [rsp+0x18]
  40aed3:	mov    QWORD PTR [rcx],rax
  40aed6:	jmp    40ae85 <flatcc_json_parser_generic_json@@Base+0xb25>
  40aed8:	cmp    DWORD PTR [r15],0x0
  40aedc:	jne    40ae85 <flatcc_json_parser_generic_json@@Base+0xb25>
  40aede:	mov    DWORD PTR [r15],0x2
  40aee5:	jmp    40aef4 <flatcc_json_parser_generic_json@@Base+0xb94>
  40aee7:	cmp    DWORD PTR [r15],0x0
  40aeeb:	jne    40ae85 <flatcc_json_parser_generic_json@@Base+0xb25>
  40aeed:	mov    DWORD PTR [r15],0x5
  40aef4:	mov    rax,QWORD PTR [rsp+0x8]
  40aef9:	mov    eax,DWORD PTR [rax]
  40aefb:	mov    ecx,r13d
  40aefe:	sub    ecx,eax
  40af00:	add    ecx,0x1
  40af03:	mov    rax,QWORD PTR [rsp+0x10]
  40af08:	mov    DWORD PTR [rax],ecx
  40af0a:	mov    rax,QWORD PTR [rsp+0x18]
  40af0f:	mov    QWORD PTR [rax],r13
  40af12:	jmp    40ae85 <flatcc_json_parser_generic_json@@Base+0xb25>
  40af17:	nop    WORD PTR [rax+rax*1+0x0]

000000000040af20 <flatcc_json_parser_double@@Base>:
  40af20:	push   r15
  40af22:	push   r14
  40af24:	push   r12
  40af26:	push   rbx
  40af27:	push   rax
  40af28:	mov    rbx,rsi
  40af2b:	mov    QWORD PTR [rcx],0x0
  40af32:	cmp    rsi,rdx
  40af35:	je     40afc2 <flatcc_json_parser_double@@Base+0xa2>
  40af3b:	mov    r12,rcx
  40af3e:	mov    r14,rdx
  40af41:	mov    r15,rdi
  40af44:	lea    rax,[rbx+0x1]
  40af48:	xor    ecx,ecx
  40af4a:	cmp    BYTE PTR [rbx],0x2d
  40af4d:	sete   dl
  40af50:	cmovne rax,rbx
  40af54:	mov    rsi,r14
  40af57:	sub    rsi,rax
  40af5a:	cmp    rsi,0x2
  40af5e:	jl     40af7e <flatcc_json_parser_double@@Base+0x5e>
  40af60:	mov    cl,dl
  40af62:	mov    cl,BYTE PTR [rbx+rcx*1]
  40af65:	cmp    cl,0x2e
  40af68:	je     40af75 <flatcc_json_parser_double@@Base+0x55>
  40af6a:	cmp    cl,0x30
  40af6d:	jne    40af7e <flatcc_json_parser_double@@Base+0x5e>
  40af6f:	cmp    BYTE PTR [rax+0x1],0x30
  40af73:	jne    40af7e <flatcc_json_parser_double@@Base+0x5e>
  40af75:	cmp    DWORD PTR [r15+0x20],0x0
  40af7a:	jne    40afe6 <flatcc_json_parser_double@@Base+0xc6>
  40af7c:	jmp    40afcb <flatcc_json_parser_double@@Base+0xab>
  40af7e:	mov    esi,r14d
  40af81:	sub    esi,ebx
  40af83:	mov    rdi,rbx
  40af86:	mov    rdx,r12
  40af89:	call   40b000 <flatcc_json_parser_double@@Base+0xe0>
  40af8e:	test   rax,rax
  40af91:	je     40af98 <flatcc_json_parser_double@@Base+0x78>
  40af93:	cmp    rax,rbx
  40af96:	jne    40afe9 <flatcc_json_parser_double@@Base+0xc9>
  40af98:	vmovsd xmm0,QWORD PTR [r12]
  40af9e:	vandps xmm0,xmm0,XMMWORD PTR [rip+0x52ea]        # 410290 <flatcc_builder_padding_base@@Base+0x1f30>
  40afa6:	vucomisd xmm0,QWORD PTR [rip+0x5322]        # 4102d0 <flatcc_builder_padding_base@@Base+0x1f70>
  40afae:	mov    eax,DWORD PTR [r15+0x20]
  40afb2:	jb     40afc7 <flatcc_json_parser_double@@Base+0xa7>
  40afb4:	test   eax,eax
  40afb6:	jne    40afe6 <flatcc_json_parser_double@@Base+0xc6>
  40afb8:	mov    DWORD PTR [r15+0x20],0x7
  40afc0:	jmp    40afd3 <flatcc_json_parser_double@@Base+0xb3>
  40afc2:	mov    rax,rbx
  40afc5:	jmp    40afe9 <flatcc_json_parser_double@@Base+0xc9>
  40afc7:	test   eax,eax
  40afc9:	jne    40afe6 <flatcc_json_parser_double@@Base+0xc6>
  40afcb:	mov    DWORD PTR [r15+0x20],0x6
  40afd3:	mov    eax,DWORD PTR [r15+0x8]
  40afd7:	mov    ecx,ebx
  40afd9:	sub    ecx,eax
  40afdb:	add    ecx,0x1
  40afde:	mov    DWORD PTR [r15+0x1c],ecx
  40afe2:	mov    QWORD PTR [r15+0x38],rbx
  40afe6:	mov    rax,r14
  40afe9:	add    rsp,0x8
  40afed:	pop    rbx
  40afee:	pop    r12
  40aff0:	pop    r14
  40aff2:	pop    r15
  40aff4:	ret    
  40aff5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40afff:	nop
  40b000:	push   rbp
  40b001:	push   r15
  40b003:	push   r14
  40b005:	push   r13
  40b007:	push   r12
  40b009:	push   rbx
  40b00a:	sub    rsp,0x28
  40b00e:	mov    r13,rdx
  40b011:	mov    r14,rdi
  40b014:	mov    QWORD PTR [rdx],0x0
  40b01b:	cmp    esi,0x3e9
  40b021:	mov    edx,0x3e8
  40b026:	cmovl  edx,esi
  40b029:	movsxd r12,edx
  40b02c:	lea    r15,[rdi+r12*1]
  40b030:	add    r15,0x1
  40b034:	cmp    r15,rdi
  40b037:	je     40b440 <flatcc_json_parser_double@@Base+0x520>
  40b03d:	mov    al,BYTE PTR [r14]
  40b040:	xor    ebx,ebx
  40b042:	mov    rcx,r14
  40b045:	cmp    al,0x2d
  40b047:	jne    40b05c <flatcc_json_parser_double@@Base+0x13c>
  40b049:	test   edx,edx
  40b04b:	je     40b43d <flatcc_json_parser_double@@Base+0x51d>
  40b051:	lea    rcx,[r14+0x1]
  40b055:	mov    al,BYTE PTR [rcx]
  40b057:	mov    ebx,0x1
  40b05c:	lea    r8,[r14+r12*1]
  40b060:	cmp    al,0x30
  40b062:	jne    40b086 <flatcc_json_parser_double@@Base+0x166>
  40b064:	lea    rsi,[rcx+0x1]
  40b068:	cmp    rcx,r8
  40b06b:	je     40b0b6 <flatcc_json_parser_double@@Base+0x196>
  40b06d:	mov    al,BYTE PTR [rsi]
  40b06f:	mov    edx,eax
  40b071:	or     dl,0x20
  40b074:	cmp    dl,0x78
  40b077:	jne    40b0c2 <flatcc_json_parser_double@@Base+0x1a2>
  40b079:	mov    QWORD PTR [r13+0x0],0x0
  40b081:	jmp    40b440 <flatcc_json_parser_double@@Base+0x520>
  40b086:	mov    edx,eax
  40b088:	add    dl,0xcf
  40b08b:	cmp    dl,0x9
  40b08e:	jb     40b09d <flatcc_json_parser_double@@Base+0x17d>
  40b090:	xor    eax,eax
  40b092:	test   ebx,ebx
  40b094:	cmovne r14,rax
  40b098:	jmp    40b440 <flatcc_json_parser_double@@Base+0x520>
  40b09d:	movsx  rdi,al
  40b0a1:	add    rcx,0x1
  40b0a5:	add    rdi,0xffffffffffffffd0
  40b0a9:	mov    rsi,rcx
  40b0ac:	cmp    rsi,r15
  40b0af:	jne    40b0ee <flatcc_json_parser_double@@Base+0x1ce>
  40b0b1:	jmp    40b43d <flatcc_json_parser_double@@Base+0x51d>
  40b0b6:	xor    edi,edi
  40b0b8:	cmp    rsi,r15
  40b0bb:	jne    40b0ee <flatcc_json_parser_double@@Base+0x1ce>
  40b0bd:	jmp    40b43d <flatcc_json_parser_double@@Base+0x51d>
  40b0c2:	cmp    al,0x30
  40b0c4:	jne    40b0e3 <flatcc_json_parser_double@@Base+0x1c3>
  40b0c6:	add    rcx,0x2
  40b0ca:	xor    edi,edi
  40b0cc:	nop    DWORD PTR [rax+0x0]
  40b0d0:	mov    rsi,rcx
  40b0d3:	cmp    r15,rcx
  40b0d6:	je     40b0e5 <flatcc_json_parser_double@@Base+0x1c5>
  40b0d8:	lea    rcx,[rsi+0x1]
  40b0dc:	cmp    BYTE PTR [rsi],0x30
  40b0df:	je     40b0d0 <flatcc_json_parser_double@@Base+0x1b0>
  40b0e1:	jmp    40b0e5 <flatcc_json_parser_double@@Base+0x1c5>
  40b0e3:	xor    edi,edi
  40b0e5:	cmp    rsi,r15
  40b0e8:	je     40b43d <flatcc_json_parser_double@@Base+0x51d>
  40b0ee:	movabs r11,0x1999999999999998
  40b0f8:	mov    rbp,rsi
  40b0fb:	nop    DWORD PTR [rax+rax*1+0x0]
  40b100:	movsx  rax,BYTE PTR [rbp+0x0]
  40b105:	mov    edx,eax
  40b107:	add    dl,0xd0
  40b10a:	xor    ecx,ecx
  40b10c:	cmp    dl,0x9
  40b10f:	ja     40b12b <flatcc_json_parser_double@@Base+0x20b>
  40b111:	cmp    rdi,r11
  40b114:	ja     40b135 <flatcc_json_parser_double@@Base+0x215>
  40b116:	lea    rdx,[rdi+rdi*4]
  40b11a:	add    rbp,0x1
  40b11e:	lea    rdi,[rax+rdx*2]
  40b122:	add    rdi,0xffffffffffffffd0
  40b126:	cmp    r15,rbp
  40b129:	jne    40b100 <flatcc_json_parser_double@@Base+0x1e0>
  40b12b:	cmp    rbp,r15
  40b12e:	jne    40b14d <flatcc_json_parser_double@@Base+0x22d>
  40b130:	jmp    40b43d <flatcc_json_parser_double@@Base+0x51d>
  40b135:	xor    ecx,ecx
  40b137:	cmp    al,0x34
  40b139:	setg   cl
  40b13c:	add    rdi,rcx
  40b13f:	mov    ecx,0x1
  40b144:	cmp    rbp,r15
  40b147:	je     40b43d <flatcc_json_parser_double@@Base+0x51d>
  40b14d:	mov    DWORD PTR [rsp+0xc],ebx
  40b151:	mov    r10d,ebp
  40b154:	sub    r10d,esi
  40b157:	lea    r9,[r12+0x1]
  40b15c:	mov    rdx,r9
  40b15f:	sub    rdx,rbp
  40b162:	add    rdx,r14
  40b165:	xor    esi,esi
  40b167:	nop    WORD PTR [rax+rax*1+0x0]
  40b170:	movzx  eax,BYTE PTR [rbp+rsi*1+0x0]
  40b175:	cmp    al,0x30
  40b177:	jne    40b184 <flatcc_json_parser_double@@Base+0x264>
  40b179:	add    rsi,0x1
  40b17d:	cmp    rdx,rsi
  40b180:	jne    40b170 <flatcc_json_parser_double@@Base+0x250>
  40b182:	jmp    40b1cb <flatcc_json_parser_double@@Base+0x2ab>
  40b184:	add    al,0xcf
  40b186:	cmp    al,0x9
  40b188:	jae    40b1cb <flatcc_json_parser_double@@Base+0x2ab>
  40b18a:	add    rsi,0x1
  40b18e:	mov    rax,rsi
  40b191:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b19b:	nop    DWORD PTR [rax+rax*1+0x0]
  40b1a0:	mov    rsi,rax
  40b1a3:	cmp    rdx,rax
  40b1a6:	je     40b1b9 <flatcc_json_parser_double@@Base+0x299>
  40b1a8:	movzx  ecx,BYTE PTR [rbp+rsi*1+0x0]
  40b1ad:	add    cl,0xd0
  40b1b0:	lea    rax,[rsi+0x1]
  40b1b4:	cmp    cl,0xa
  40b1b7:	jb     40b1a0 <flatcc_json_parser_double@@Base+0x280>
  40b1b9:	add    rbp,rsi
  40b1bc:	mov    ecx,0x1
  40b1c1:	cmp    rbp,r15
  40b1c4:	jne    40b1d7 <flatcc_json_parser_double@@Base+0x2b7>
  40b1c6:	jmp    40b43d <flatcc_json_parser_double@@Base+0x51d>
  40b1cb:	add    rbp,rsi
  40b1ce:	cmp    rbp,r15
  40b1d1:	je     40b43d <flatcc_json_parser_double@@Base+0x51d>
  40b1d7:	cmp    BYTE PTR [rbp+0x0],0x2e
  40b1db:	jne    40b258 <flatcc_json_parser_double@@Base+0x338>
  40b1dd:	mov    QWORD PTR [rsp+0x18],r13
  40b1e2:	mov    r13b,BYTE PTR [rbp+0x1]
  40b1e6:	mov    eax,r13d
  40b1e9:	add    al,0xd0
  40b1eb:	cmp    al,0x9
  40b1ed:	ja     40b43d <flatcc_json_parser_double@@Base+0x51d>
  40b1f3:	lea    rax,[rbp+0x1]
  40b1f7:	cmp    rbp,r8
  40b1fa:	je     40b2fd <flatcc_json_parser_double@@Base+0x3dd>
  40b200:	mov    QWORD PTR [rsp+0x10],rax
  40b205:	add    r12,0xffffffffffffffff
  40b209:	sub    r12,rbp
  40b20c:	add    r12,r14
  40b20f:	xor    edx,edx
  40b211:	mov    rax,rdx
  40b214:	cmp    rdi,r11
  40b217:	ja     40b302 <flatcc_json_parser_double@@Base+0x3e2>
  40b21d:	lea    rdx,[rdi+rdi*4]
  40b221:	movsx  rdi,r13b
  40b225:	lea    rdi,[rdi+rdx*2]
  40b229:	add    rdi,0xffffffffffffffd0
  40b22d:	cmp    r12,rax
  40b230:	je     40b247 <flatcc_json_parser_double@@Base+0x327>
  40b232:	movzx  r13d,BYTE PTR [rbp+rax*1+0x2]
  40b238:	mov    ebx,r13d
  40b23b:	add    bl,0xd0
  40b23e:	lea    rdx,[rax+0x1]
  40b242:	cmp    bl,0xa
  40b245:	jb     40b211 <flatcc_json_parser_double@@Base+0x2f1>
  40b247:	add    rbp,rax
  40b24a:	add    rbp,0x2
  40b24e:	add    esi,0xffffffff
  40b251:	sub    esi,eax
  40b253:	jmp    40b323 <flatcc_json_parser_double@@Base+0x403>
  40b258:	mov    edx,r10d
  40b25b:	xor    r9d,r9d
  40b25e:	cmp    rbp,r15
  40b261:	je     40b43d <flatcc_json_parser_double@@Base+0x51d>
  40b267:	mov    al,BYTE PTR [rbp+0x0]
  40b26a:	or     al,0x20
  40b26c:	cmp    al,0x65
  40b26e:	jne    40b2ab <flatcc_json_parser_double@@Base+0x38b>
  40b270:	mov    rax,r15
  40b273:	sub    rax,rbp
  40b276:	xor    r9d,r9d
  40b279:	cmp    rax,0x2
  40b27d:	jl     40b43d <flatcc_json_parser_double@@Base+0x51d>
  40b283:	mov    al,BYTE PTR [rbp+0x1]
  40b286:	cmp    al,0x2d
  40b288:	je     40b41a <flatcc_json_parser_double@@Base+0x4fa>
  40b28e:	cmp    al,0x2b
  40b290:	jne    40b42b <flatcc_json_parser_double@@Base+0x50b>
  40b296:	add    rbp,0x2
  40b29a:	xor    r9d,r9d
  40b29d:	cmp    rbp,r15
  40b2a0:	jne    40b42f <flatcc_json_parser_double@@Base+0x50f>
  40b2a6:	jmp    40b43d <flatcc_json_parser_double@@Base+0x51d>
  40b2ab:	xor    r10d,r10d
  40b2ae:	cmp    rbp,r15
  40b2b1:	je     40b43d <flatcc_json_parser_double@@Base+0x51d>
  40b2b7:	mov    eax,r10d
  40b2ba:	neg    eax
  40b2bc:	test   r9d,r9d
  40b2bf:	cmove  eax,r10d
  40b2c3:	vxorpd xmm0,xmm0,xmm0
  40b2c7:	test   rdi,rdi
  40b2ca:	je     40b3a0 <flatcc_json_parser_double@@Base+0x480>
  40b2d0:	add    esi,edx
  40b2d2:	add    esi,eax
  40b2d4:	cmp    esi,0xfffffebc
  40b2da:	mov    ebx,DWORD PTR [rsp+0xc]
  40b2de:	jl     40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b2e4:	cmp    esi,0x136
  40b2ea:	jle    40b3c7 <flatcc_json_parser_double@@Base+0x4a7>
  40b2f0:	vmovsd xmm0,QWORD PTR [rip+0x4fd8]        # 4102d0 <flatcc_builder_padding_base@@Base+0x1f70>
  40b2f8:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b2fd:	mov    rbp,rax
  40b300:	jmp    40b328 <flatcc_json_parser_double@@Base+0x408>
  40b302:	mov    esi,esi
  40b304:	sub    rsi,rax
  40b307:	add    rbp,rax
  40b30a:	add    rbp,0x1
  40b30e:	test   ecx,ecx
  40b310:	jne    40b323 <flatcc_json_parser_double@@Base+0x403>
  40b312:	xor    eax,eax
  40b314:	cmp    r13b,0x34
  40b318:	setg   al
  40b31b:	add    rdi,rax
  40b31e:	mov    ecx,0x1
  40b323:	mov    rax,QWORD PTR [rsp+0x10]
  40b328:	cmp    rbp,r15
  40b32b:	mov    r13,QWORD PTR [rsp+0x18]
  40b330:	je     40b43d <flatcc_json_parser_double@@Base+0x51d>
  40b336:	mov    edx,ebp
  40b338:	sub    edx,eax
  40b33a:	add    edx,r10d
  40b33d:	lea    r10,[rbp+0x1]
  40b341:	sub    r9,rbp
  40b344:	add    r9,r14
  40b347:	xor    ebx,ebx
  40b349:	xor    r11d,r11d
  40b34c:	movzx  eax,BYTE PTR [rbp+rbx*1+0x0]
  40b351:	cmp    al,0x30
  40b353:	jne    40b36a <flatcc_json_parser_double@@Base+0x44a>
  40b355:	add    r11,0xffffffffffffffff
  40b359:	add    rbx,0x1
  40b35d:	mov    rax,r9
  40b360:	add    rax,r11
  40b363:	jne    40b34c <flatcc_json_parser_double@@Base+0x42c>
  40b365:	sub    esi,r11d
  40b368:	jmp    40b398 <flatcc_json_parser_double@@Base+0x478>
  40b36a:	add    al,0xcf
  40b36c:	mov    esi,esi
  40b36e:	sub    rsi,r11
  40b371:	cmp    al,0x9
  40b373:	jae    40b398 <flatcc_json_parser_double@@Base+0x478>
  40b375:	sub    r10,r11
  40b378:	mov    rbp,r10
  40b37b:	cmp    r15,r10
  40b37e:	je     40b38e <flatcc_json_parser_double@@Base+0x46e>
  40b380:	movzx  eax,BYTE PTR [rbp+0x0]
  40b384:	add    al,0xd0
  40b386:	lea    r10,[rbp+0x1]
  40b38a:	cmp    al,0xa
  40b38c:	jb     40b378 <flatcc_json_parser_double@@Base+0x458>
  40b38e:	mov    ecx,0x1
  40b393:	jmp    40b25b <flatcc_json_parser_double@@Base+0x33b>
  40b398:	sub    rbp,r11
  40b39b:	jmp    40b25b <flatcc_json_parser_double@@Base+0x33b>
  40b3a0:	mov    ebx,DWORD PTR [rsp+0xc]
  40b3a4:	vmovsd QWORD PTR [r13+0x0],xmm0
  40b3aa:	test   ebx,ebx
  40b3ac:	je     40b3c2 <flatcc_json_parser_double@@Base+0x4a2>
  40b3ae:	vmovsd xmm0,QWORD PTR [r13+0x0]
  40b3b4:	vxorpd xmm0,xmm0,XMMWORD PTR [rip+0x4f04]        # 4102c0 <flatcc_builder_padding_base@@Base+0x1f60>
  40b3bc:	vmovlpd QWORD PTR [r13+0x0],xmm0
  40b3c2:	mov    r14,rbp
  40b3c5:	jmp    40b440 <flatcc_json_parser_double@@Base+0x520>
  40b3c7:	mov    rax,rdi
  40b3ca:	shr    rax,0x35
  40b3ce:	jne    40b498 <flatcc_json_parser_double@@Base+0x578>
  40b3d4:	cmp    esi,0x16
  40b3d7:	ja     40b498 <flatcc_json_parser_double@@Base+0x578>
  40b3dd:	vmovq  xmm0,rdi
  40b3e2:	vpunpckldq xmm0,xmm0,XMMWORD PTR [rip+0x4eb6]        # 4102a0 <flatcc_builder_padding_base@@Base+0x1f40>
  40b3ea:	vsubpd xmm0,xmm0,XMMWORD PTR [rip+0x4ebe]        # 4102b0 <flatcc_builder_padding_base@@Base+0x1f50>
  40b3f2:	vhaddpd xmm0,xmm0,xmm0
  40b3f6:	sub    esi,edx
  40b3f8:	add    esi,0x16
  40b3fb:	cmp    esi,0x2c
  40b3fe:	ja     40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b400:	lea    rax,[rip+0x45f5]        # 40f9fc <flatcc_builder_padding_base@@Base+0x169c>
  40b407:	movsxd rcx,DWORD PTR [rax+rsi*4]
  40b40b:	add    rcx,rax
  40b40e:	jmp    rcx
  40b410:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4f68]        # 410380 <flatcc_builder_padding_base@@Base+0x2020>
  40b418:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b41a:	add    rbp,0x2
  40b41e:	mov    r9d,0x1
  40b424:	cmp    rbp,r15
  40b427:	jne    40b42f <flatcc_json_parser_double@@Base+0x50f>
  40b429:	jmp    40b43d <flatcc_json_parser_double@@Base+0x51d>
  40b42b:	add    rbp,0x1
  40b42f:	movsx  r10d,BYTE PTR [rbp+0x0]
  40b434:	mov    eax,r10d
  40b437:	add    al,0xd0
  40b439:	cmp    al,0x9
  40b43b:	jbe    40b452 <flatcc_json_parser_double@@Base+0x532>
  40b43d:	xor    r14d,r14d
  40b440:	mov    rax,r14
  40b443:	add    rsp,0x28
  40b447:	pop    rbx
  40b448:	pop    r12
  40b44a:	pop    r13
  40b44c:	pop    r14
  40b44e:	pop    r15
  40b450:	pop    rbp
  40b451:	ret    
  40b452:	add    r10d,0xffffffd0
  40b456:	cmp    rbp,r8
  40b459:	lea    rbp,[rbp+0x1]
  40b45d:	je     40b2ae <flatcc_json_parser_double@@Base+0x38e>
  40b463:	movsx  eax,BYTE PTR [rbp+0x0]
  40b467:	mov    ebx,eax
  40b469:	add    bl,0xd0
  40b46c:	cmp    bl,0x9
  40b46f:	ja     40b2ae <flatcc_json_parser_double@@Base+0x38e>
  40b475:	cmp    r10d,0x7fff
  40b47c:	jg     40b48a <flatcc_json_parser_double@@Base+0x56a>
  40b47e:	lea    ebx,[r10+r10*4]
  40b482:	lea    r10d,[rax+rbx*2]
  40b486:	add    r10d,0xffffffd0
  40b48a:	add    rbp,0x1
  40b48e:	cmp    r15,rbp
  40b491:	jne    40b463 <flatcc_json_parser_double@@Base+0x543>
  40b493:	jmp    40b2ae <flatcc_json_parser_double@@Base+0x38e>
  40b498:	mov    r8,r13
  40b49b:	call   409730 <grisu3_diy_fp_encode_double@@Base>
  40b4a0:	mov    ebx,DWORD PTR [rsp+0xc]
  40b4a4:	test   eax,eax
  40b4a6:	jne    40b3aa <flatcc_json_parser_double@@Base+0x48a>
  40b4ac:	lea    rsi,[rsp+0x20]
  40b4b1:	mov    rdi,r14
  40b4b4:	call   403040 <strtod@plt>
  40b4b9:	vmovsd QWORD PTR [r13+0x0],xmm0
  40b4bf:	mov    rax,QWORD PTR [rsp+0x20]
  40b4c4:	cmp    rax,rbp
  40b4c7:	cmovb  rbp,rax
  40b4cb:	jmp    40b3c2 <flatcc_json_parser_double@@Base+0x4a2>
  40b4d0:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4e00]        # 4102d8 <flatcc_builder_padding_base@@Base+0x1f78>
  40b4d8:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b4dd:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4dfb]        # 4102e0 <flatcc_builder_padding_base@@Base+0x1f80>
  40b4e5:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b4ea:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4df6]        # 4102e8 <flatcc_builder_padding_base@@Base+0x1f88>
  40b4f2:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b4f7:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4df1]        # 4102f0 <flatcc_builder_padding_base@@Base+0x1f90>
  40b4ff:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b504:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4dec]        # 4102f8 <flatcc_builder_padding_base@@Base+0x1f98>
  40b50c:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b511:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4de7]        # 410300 <flatcc_builder_padding_base@@Base+0x1fa0>
  40b519:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b51e:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4de2]        # 410308 <flatcc_builder_padding_base@@Base+0x1fa8>
  40b526:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b52b:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4ddd]        # 410310 <flatcc_builder_padding_base@@Base+0x1fb0>
  40b533:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b538:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4dd8]        # 410318 <flatcc_builder_padding_base@@Base+0x1fb8>
  40b540:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b545:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4dd3]        # 410320 <flatcc_builder_padding_base@@Base+0x1fc0>
  40b54d:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b552:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4dce]        # 410328 <flatcc_builder_padding_base@@Base+0x1fc8>
  40b55a:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b55f:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4dc9]        # 410330 <flatcc_builder_padding_base@@Base+0x1fd0>
  40b567:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b56c:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4dc4]        # 410338 <flatcc_builder_padding_base@@Base+0x1fd8>
  40b574:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b579:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4dbf]        # 410340 <flatcc_builder_padding_base@@Base+0x1fe0>
  40b581:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b586:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4dba]        # 410348 <flatcc_builder_padding_base@@Base+0x1fe8>
  40b58e:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b593:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4db5]        # 410350 <flatcc_builder_padding_base@@Base+0x1ff0>
  40b59b:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b5a0:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4db0]        # 410358 <flatcc_builder_padding_base@@Base+0x1ff8>
  40b5a8:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b5ad:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4dab]        # 410360 <flatcc_builder_padding_base@@Base+0x2000>
  40b5b5:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b5ba:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4da6]        # 410368 <flatcc_builder_padding_base@@Base+0x2008>
  40b5c2:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b5c7:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4da1]        # 410370 <flatcc_builder_padding_base@@Base+0x2010>
  40b5cf:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b5d4:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x4d9c]        # 410378 <flatcc_builder_padding_base@@Base+0x2018>
  40b5dc:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b5e1:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4d8f]        # 410378 <flatcc_builder_padding_base@@Base+0x2018>
  40b5e9:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b5ee:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4d7a]        # 410370 <flatcc_builder_padding_base@@Base+0x2010>
  40b5f6:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b5fb:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4d65]        # 410368 <flatcc_builder_padding_base@@Base+0x2008>
  40b603:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b608:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4d50]        # 410360 <flatcc_builder_padding_base@@Base+0x2000>
  40b610:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b615:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4d3b]        # 410358 <flatcc_builder_padding_base@@Base+0x1ff8>
  40b61d:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b622:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4d26]        # 410350 <flatcc_builder_padding_base@@Base+0x1ff0>
  40b62a:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b62f:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4d11]        # 410348 <flatcc_builder_padding_base@@Base+0x1fe8>
  40b637:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b63c:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4cfc]        # 410340 <flatcc_builder_padding_base@@Base+0x1fe0>
  40b644:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b649:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4ce7]        # 410338 <flatcc_builder_padding_base@@Base+0x1fd8>
  40b651:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b656:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4cd2]        # 410330 <flatcc_builder_padding_base@@Base+0x1fd0>
  40b65e:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b663:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4cbd]        # 410328 <flatcc_builder_padding_base@@Base+0x1fc8>
  40b66b:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b670:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4ca8]        # 410320 <flatcc_builder_padding_base@@Base+0x1fc0>
  40b678:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b67d:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4c93]        # 410318 <flatcc_builder_padding_base@@Base+0x1fb8>
  40b685:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b68a:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4c7e]        # 410310 <flatcc_builder_padding_base@@Base+0x1fb0>
  40b692:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b697:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4c69]        # 410308 <flatcc_builder_padding_base@@Base+0x1fa8>
  40b69f:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b6a4:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4c54]        # 410300 <flatcc_builder_padding_base@@Base+0x1fa0>
  40b6ac:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b6b1:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4c3f]        # 4102f8 <flatcc_builder_padding_base@@Base+0x1f98>
  40b6b9:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b6be:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4c2a]        # 4102f0 <flatcc_builder_padding_base@@Base+0x1f90>
  40b6c6:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b6cb:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4c15]        # 4102e8 <flatcc_builder_padding_base@@Base+0x1f88>
  40b6d3:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b6d8:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4c00]        # 4102e0 <flatcc_builder_padding_base@@Base+0x1f80>
  40b6e0:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b6e5:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4beb]        # 4102d8 <flatcc_builder_padding_base@@Base+0x1f78>
  40b6ed:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b6f2:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4c86]        # 410380 <flatcc_builder_padding_base@@Base+0x2020>
  40b6fa:	jmp    40b3a4 <flatcc_json_parser_double@@Base+0x484>
  40b6ff:	nop

000000000040b700 <flatcc_json_parser_float@@Base>:
  40b700:	push   r15
  40b702:	push   r14
  40b704:	push   r12
  40b706:	push   rbx
  40b707:	push   rax
  40b708:	mov    rbx,rsi
  40b70b:	mov    DWORD PTR [rcx],0x0
  40b711:	cmp    rsi,rdx
  40b714:	je     40b7e3 <flatcc_json_parser_float@@Base+0xe3>
  40b71a:	mov    r12,rcx
  40b71d:	mov    r14,rdx
  40b720:	mov    r15,rdi
  40b723:	lea    rax,[rbx+0x1]
  40b727:	xor    ecx,ecx
  40b729:	cmp    BYTE PTR [rbx],0x2d
  40b72c:	sete   dl
  40b72f:	cmovne rax,rbx
  40b733:	mov    rsi,r14
  40b736:	sub    rsi,rax
  40b739:	cmp    rsi,0x2
  40b73d:	jl     40b764 <flatcc_json_parser_float@@Base+0x64>
  40b73f:	mov    cl,dl
  40b741:	mov    cl,BYTE PTR [rbx+rcx*1]
  40b744:	cmp    cl,0x2e
  40b747:	je     40b754 <flatcc_json_parser_float@@Base+0x54>
  40b749:	cmp    cl,0x30
  40b74c:	jne    40b764 <flatcc_json_parser_float@@Base+0x64>
  40b74e:	cmp    BYTE PTR [rax+0x1],0x30
  40b752:	jne    40b764 <flatcc_json_parser_float@@Base+0x64>
  40b754:	cmp    DWORD PTR [r15+0x20],0x0
  40b759:	jne    40b807 <flatcc_json_parser_float@@Base+0x107>
  40b75f:	jmp    40b7ec <flatcc_json_parser_float@@Base+0xec>
  40b764:	mov    esi,r14d
  40b767:	sub    esi,ebx
  40b769:	mov    rdx,rsp
  40b76c:	mov    rdi,rbx
  40b76f:	call   40b000 <flatcc_json_parser_double@@Base+0xe0>
  40b774:	vmovsd xmm0,QWORD PTR [rsp]
  40b779:	vxorps xmm1,xmm1,xmm1
  40b77d:	xor    ecx,ecx
  40b77f:	vucomisd xmm1,xmm0
  40b783:	seta   dl
  40b786:	vcvtsd2ss xmm1,xmm0,xmm0
  40b78a:	vbroadcastss xmm0,DWORD PTR [rip+0x4bfd]        # 410390 <flatcc_builder_padding_base@@Base+0x2030>
  40b793:	vandps xmm2,xmm1,xmm0
  40b797:	vucomiss xmm2,DWORD PTR [rip+0x4bf5]        # 410394 <flatcc_builder_padding_base@@Base+0x2034>
  40b79f:	jb     40b7af <flatcc_json_parser_float@@Base+0xaf>
  40b7a1:	mov    cl,dl
  40b7a3:	lea    rdx,[rip+0x4bde]        # 410388 <flatcc_builder_padding_base@@Base+0x2028>
  40b7aa:	vmovss xmm1,DWORD PTR [rdx+rcx*4]
  40b7af:	cmovae rax,rbx
  40b7b3:	vmovss DWORD PTR [r12],xmm1
  40b7b9:	test   rax,rax
  40b7bc:	je     40b7c3 <flatcc_json_parser_float@@Base+0xc3>
  40b7be:	cmp    rax,rbx
  40b7c1:	jne    40b80a <flatcc_json_parser_float@@Base+0x10a>
  40b7c3:	vandps xmm0,xmm1,xmm0
  40b7c7:	vucomiss xmm0,DWORD PTR [rip+0x4bc5]        # 410394 <flatcc_builder_padding_base@@Base+0x2034>
  40b7cf:	mov    eax,DWORD PTR [r15+0x20]
  40b7d3:	jb     40b7e8 <flatcc_json_parser_float@@Base+0xe8>
  40b7d5:	test   eax,eax
  40b7d7:	jne    40b807 <flatcc_json_parser_float@@Base+0x107>
  40b7d9:	mov    DWORD PTR [r15+0x20],0x7
  40b7e1:	jmp    40b7f4 <flatcc_json_parser_float@@Base+0xf4>
  40b7e3:	mov    rax,rbx
  40b7e6:	jmp    40b80a <flatcc_json_parser_float@@Base+0x10a>
  40b7e8:	test   eax,eax
  40b7ea:	jne    40b807 <flatcc_json_parser_float@@Base+0x107>
  40b7ec:	mov    DWORD PTR [r15+0x20],0x6
  40b7f4:	mov    eax,DWORD PTR [r15+0x8]
  40b7f8:	mov    ecx,ebx
  40b7fa:	sub    ecx,eax
  40b7fc:	add    ecx,0x1
  40b7ff:	mov    DWORD PTR [r15+0x1c],ecx
  40b803:	mov    QWORD PTR [r15+0x38],rbx
  40b807:	mov    rax,r14
  40b80a:	add    rsp,0x8
  40b80e:	pop    rbx
  40b80f:	pop    r12
  40b811:	pop    r14
  40b813:	pop    r15
  40b815:	ret    
  40b816:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000040b820 <flatcc_json_parser_integer@@Base>:
  40b820:	cmp    rsi,rdx
  40b823:	je     40b8bb <flatcc_json_parser_integer@@Base+0x9b>
  40b829:	xor    r10d,r10d
  40b82c:	cmp    BYTE PTR [rsi],0x2d
  40b82f:	sete   r10b
  40b833:	mov    DWORD PTR [rcx],r10d
  40b836:	add    r10,rsi
  40b839:	xor    r9d,r9d
  40b83c:	cmp    r10,rdx
  40b83f:	je     40b8b1 <flatcc_json_parser_integer@@Base+0x91>
  40b841:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b84b:	nop    DWORD PTR [rax+rax*1+0x0]
  40b850:	movsx  r11,BYTE PTR [r10]
  40b854:	mov    eax,r11d
  40b857:	add    al,0xd0
  40b859:	cmp    al,0x9
  40b85b:	ja     40b8c9 <flatcc_json_parser_integer@@Base+0xa9>
  40b85d:	lea    rax,[r9+r9*4]
  40b861:	lea    rax,[r11+rax*2]
  40b865:	add    rax,0xffffffffffffffd0
  40b869:	cmp    r9,rax
  40b86c:	ja     40b8d2 <flatcc_json_parser_integer@@Base+0xb2>
  40b86e:	add    r10,0x1
  40b872:	mov    r9,rax
  40b875:	cmp    rdx,r10
  40b878:	jne    40b850 <flatcc_json_parser_integer@@Base+0x30>
  40b87a:	xor    ecx,ecx
  40b87c:	mov    r10,rdx
  40b87f:	mov    r9,rax
  40b882:	cmp    r10,rsi
  40b885:	je     40b8bb <flatcc_json_parser_integer@@Base+0x9b>
  40b887:	test   cl,cl
  40b889:	je     40b8bf <flatcc_json_parser_integer@@Base+0x9f>
  40b88b:	mov    al,BYTE PTR [r10]
  40b88e:	add    al,0xd2
  40b890:	cmp    al,0x37
  40b892:	ja     40b8bf <flatcc_json_parser_integer@@Base+0x9f>
  40b894:	movzx  eax,al
  40b897:	movabs rcx,0x80000000800001
  40b8a1:	bt     rcx,rax
  40b8a5:	jae    40b8bf <flatcc_json_parser_integer@@Base+0x9f>
  40b8a7:	cmp    DWORD PTR [rdi+0x20],0x0
  40b8ab:	je     40b8dc <flatcc_json_parser_integer@@Base+0xbc>
  40b8ad:	mov    rax,rdx
  40b8b0:	ret    
  40b8b1:	mov    r10,rdx
  40b8b4:	xor    ecx,ecx
  40b8b6:	cmp    r10,rsi
  40b8b9:	jne    40b887 <flatcc_json_parser_integer@@Base+0x67>
  40b8bb:	mov    rax,rsi
  40b8be:	ret    
  40b8bf:	mov    QWORD PTR [r8],r9
  40b8c2:	mov    rsi,r10
  40b8c5:	mov    rax,rsi
  40b8c8:	ret    
  40b8c9:	mov    cl,0x1
  40b8cb:	cmp    r10,rsi
  40b8ce:	jne    40b887 <flatcc_json_parser_integer@@Base+0x67>
  40b8d0:	jmp    40b8bb <flatcc_json_parser_integer@@Base+0x9b>
  40b8d2:	cmp    DWORD PTR [rdi+0x20],0x0
  40b8d6:	je     40b8e5 <flatcc_json_parser_integer@@Base+0xc5>
  40b8d8:	mov    rax,rdx
  40b8db:	ret    
  40b8dc:	mov    DWORD PTR [rdi+0x20],0xc
  40b8e3:	jmp    40b8f4 <flatcc_json_parser_integer@@Base+0xd4>
  40b8e5:	cmp    rcx,0x1
  40b8e9:	mov    eax,0x8
  40b8ee:	sbb    eax,0x0
  40b8f1:	mov    DWORD PTR [rdi+0x20],eax
  40b8f4:	mov    eax,DWORD PTR [rdi+0x8]
  40b8f7:	mov    ecx,r10d
  40b8fa:	sub    ecx,eax
  40b8fc:	add    ecx,0x1
  40b8ff:	mov    DWORD PTR [rdi+0x1c],ecx
  40b902:	mov    QWORD PTR [rdi+0x38],r10
  40b906:	mov    rax,rdx
  40b909:	ret    
  40b90a:	nop    WORD PTR [rax+rax*1+0x0]

000000000040b910 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
  40b910:	push   rbp
  40b911:	push   r15
  40b913:	push   r14
  40b915:	push   r13
  40b917:	push   r12
  40b919:	push   rbx
  40b91a:	sub    rsp,0x28
  40b91e:	mov    r12d,r8d
  40b921:	mov    r15,rcx
  40b924:	mov    r14,rdx
  40b927:	mov    r13,rsi
  40b92a:	mov    rbx,rdi
  40b92d:	cmp    rsi,rdx
  40b930:	je     40b97a <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6a>
  40b932:	cmp    BYTE PTR [r13+0x0],0x22
  40b937:	jne    40b97a <flatcc_json_parser_build_uint8_vector_base64@@Base+0x6a>
  40b939:	add    r13,0x1
  40b93d:	cmp    r13,r14
  40b940:	je     40b999 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x89>
  40b942:	mov    rbp,r13
  40b945:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b94f:	nop
  40b950:	movzx  ecx,BYTE PTR [rbp+0x0]
  40b954:	cmp    cl,0x20
  40b957:	jb     40b9fd <flatcc_json_parser_build_uint8_vector_base64@@Base+0xed>
  40b95d:	cmp    cl,0x22
  40b960:	je     40ba20 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x110>
  40b966:	cmp    cl,0x5c
  40b969:	je     40ba20 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x110>
  40b96f:	add    rbp,0x1
  40b973:	cmp    r14,rbp
  40b976:	jne    40b950 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
  40b978:	jmp    40b999 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x89>
  40b97a:	cmp    DWORD PTR [rbx+0x20],0x0
  40b97e:	jne    40b999 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x89>
  40b980:	mov    DWORD PTR [rbx+0x20],0x10
  40b987:	mov    eax,DWORD PTR [rbx+0x8]
  40b98a:	mov    ecx,r13d
  40b98d:	sub    ecx,eax
  40b98f:	add    ecx,0x1
  40b992:	mov    DWORD PTR [rbx+0x1c],ecx
  40b995:	mov    QWORD PTR [rbx+0x38],r13
  40b999:	cmp    DWORD PTR [rbx+0x20],0x0
  40b99d:	mov    rax,r14
  40b9a0:	jne    40b9be <flatcc_json_parser_build_uint8_vector_base64@@Base+0xae>
  40b9a2:	mov    DWORD PTR [rbx+0x20],0x14
  40b9a9:	mov    eax,DWORD PTR [rbx+0x8]
  40b9ac:	mov    ecx,r14d
  40b9af:	sub    ecx,eax
  40b9b1:	add    ecx,0x1
  40b9b4:	mov    DWORD PTR [rbx+0x1c],ecx
  40b9b7:	mov    QWORD PTR [rbx+0x38],r14
  40b9bb:	mov    rax,r14
  40b9be:	mov    DWORD PTR [r15],0x0
  40b9c5:	cmp    DWORD PTR [rbx+0x20],0x0
  40b9c9:	jne    40b9eb <flatcc_json_parser_build_uint8_vector_base64@@Base+0xdb>
  40b9cb:	cmp    r12d,0x1
  40b9cf:	mov    ecx,0x1f
  40b9d4:	sbb    ecx,0xffffffff
  40b9d7:	mov    DWORD PTR [rbx+0x20],ecx
  40b9da:	mov    ecx,DWORD PTR [rbx+0x8]
  40b9dd:	mov    edx,eax
  40b9df:	sub    edx,ecx
  40b9e1:	add    edx,0x1
  40b9e4:	mov    DWORD PTR [rbx+0x1c],edx
  40b9e7:	mov    QWORD PTR [rbx+0x38],rax
  40b9eb:	mov    rax,r14
  40b9ee:	add    rsp,0x28
  40b9f2:	pop    rbx
  40b9f3:	pop    r12
  40b9f5:	pop    r13
  40b9f7:	pop    r14
  40b9f9:	pop    r15
  40b9fb:	pop    rbp
  40b9fc:	ret    
  40b9fd:	cmp    DWORD PTR [rbx+0x20],0x0
  40ba01:	mov    rax,r14
  40ba04:	jne    40b9be <flatcc_json_parser_build_uint8_vector_base64@@Base+0xae>
  40ba06:	mov    DWORD PTR [rbx+0x20],0x11
  40ba0d:	mov    eax,DWORD PTR [rbx+0x8]
  40ba10:	mov    ecx,ebp
  40ba12:	sub    ecx,eax
  40ba14:	add    ecx,0x1
  40ba17:	mov    DWORD PTR [rbx+0x1c],ecx
  40ba1a:	mov    QWORD PTR [rbx+0x38],rbp
  40ba1e:	jmp    40b9bb <flatcc_json_parser_build_uint8_vector_base64@@Base+0xab>
  40ba20:	mov    rax,r14
  40ba23:	cmp    r14,rbp
  40ba26:	je     40b9be <flatcc_json_parser_build_uint8_vector_base64@@Base+0xae>
  40ba28:	cmp    cl,0x22
  40ba2b:	jne    40ba55 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x145>
  40ba2d:	mov    rcx,rbp
  40ba30:	sub    rcx,r13
  40ba33:	mov    rax,rcx
  40ba36:	shr    rax,0x2
  40ba3a:	lea    rdx,[rax+rax*2]
  40ba3e:	mov    QWORD PTR [rsp+0x18],rcx
  40ba43:	mov    eax,ecx
  40ba45:	and    al,0x3
  40ba47:	cmp    al,0x2
  40ba49:	je     40ba5d <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14d>
  40ba4b:	cmp    al,0x3
  40ba4d:	jne    40ba61 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x151>
  40ba4f:	add    rdx,0x2
  40ba53:	jmp    40ba61 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x151>
  40ba55:	mov    rax,rbp
  40ba58:	jmp    40b9be <flatcc_json_parser_build_uint8_vector_base64@@Base+0xae>
  40ba5d:	add    rdx,0x1
  40ba61:	mov    QWORD PTR [rsp+0x8],rdx
  40ba66:	mov    rdi,QWORD PTR [rbx]
  40ba69:	mov    esi,0x1
  40ba6e:	mov    edx,0x1
  40ba73:	mov    ecx,0xffffffff
  40ba78:	call   4062d0 <flatcc_builder_start_vector@@Base>
  40ba7d:	test   eax,eax
  40ba7f:	je     40baaf <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19f>
  40ba81:	mov    DWORD PTR [r15],0x0
  40ba88:	cmp    DWORD PTR [rbx+0x20],0x0
  40ba8c:	jne    40b9eb <flatcc_json_parser_build_uint8_vector_base64@@Base+0xdb>
  40ba92:	mov    DWORD PTR [rbx+0x20],0x21
  40ba99:	mov    eax,DWORD PTR [rbx+0x8]
  40ba9c:	mov    ecx,ebp
  40ba9e:	sub    ecx,eax
  40baa0:	add    ecx,0x1
  40baa3:	mov    DWORD PTR [rbx+0x1c],ecx
  40baa6:	mov    QWORD PTR [rbx+0x38],rbp
  40baaa:	jmp    40b9eb <flatcc_json_parser_build_uint8_vector_base64@@Base+0xdb>
  40baaf:	mov    rdi,QWORD PTR [rbx]
  40bab2:	mov    rsi,QWORD PTR [rsp+0x8]
  40bab7:	call   405960 <flatcc_builder_extend_vector@@Base>
  40babc:	test   rax,rax
  40babf:	je     40ba81 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x171>
  40bac1:	test   r12d,r12d
  40bac4:	lea    rcx,[rip+0x46c5]        # 410190 <flatcc_builder_padding_base@@Base+0x1e30>
  40bacb:	lea    r11,[rip+0x45be]        # 410090 <flatcc_builder_padding_base@@Base+0x1d30>
  40bad2:	cmovne r11,rcx
  40bad6:	mov    rcx,QWORD PTR [rsp+0x8]
  40badb:	cmp    rcx,0x1
  40badf:	sbb    r10,r10
  40bae2:	or     r10,rcx
  40bae5:	mov    QWORD PTR [rsp+0x20],rax
  40baea:	mov    r9,rax
  40baed:	mov    rdi,QWORD PTR [rsp+0x18]
  40baf2:	mov    r8,r13
  40baf5:	mov    rsi,rdi
  40baf8:	xor    edx,edx
  40bafa:	cmp    rsi,rdx
  40bafd:	je     40bb91 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x281>
  40bb03:	movzx  ecx,BYTE PTR [r8+rdx*1]
  40bb08:	movzx  ecx,BYTE PTR [r11+rcx*1]
  40bb0d:	mov    BYTE PTR [rsp+rdx*1+0x4],cl
  40bb11:	cmp    cl,0x40
  40bb14:	jb     40bb2b <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21b>
  40bb16:	cmp    cl,0x41
  40bb19:	jne    40bbeb <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2db>
  40bb1f:	add    r8,0x1
  40bb23:	add    rsi,0xffffffffffffffff
  40bb27:	add    rdx,0xffffffffffffffff
  40bb2b:	add    rdx,0x1
  40bb2f:	cmp    rdx,0x4
  40bb33:	jb     40bafa <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ea>
  40bb35:	cmp    r10,0x3
  40bb39:	jb     40bc70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
  40bb3f:	mov    al,BYTE PTR [rsp+0x4]
  40bb43:	mov    cl,BYTE PTR [rsp+0x5]
  40bb47:	shl    al,0x2
  40bb4a:	mov    edx,ecx
  40bb4c:	shr    dl,0x4
  40bb4f:	or     dl,al
  40bb51:	mov    BYTE PTR [r9],dl
  40bb54:	shl    cl,0x4
  40bb57:	mov    al,BYTE PTR [rsp+0x6]
  40bb5b:	shr    al,0x2
  40bb5e:	or     al,cl
  40bb60:	mov    BYTE PTR [r9+0x1],al
  40bb64:	mov    al,BYTE PTR [rsp+0x6]
  40bb68:	shl    al,0x6
  40bb6b:	or     al,BYTE PTR [rsp+0x7]
  40bb6f:	mov    BYTE PTR [r9+0x2],al
  40bb73:	add    r9,0x3
  40bb77:	add    r8,0x4
  40bb7b:	add    rsi,0xfffffffffffffffc
  40bb7f:	mov    rdi,rsi
  40bb82:	add    r10,0xfffffffffffffffd
  40bb86:	jne    40baf8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e8>
  40bb8c:	jmp    40bc61 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x351>
  40bb91:	mov    QWORD PTR [rsp+0x10],rdi
  40bb96:	mov    rdx,rsi
  40bb99:	mov    rdi,rsi
  40bb9c:	sub    rsi,rdi
  40bb9f:	test   rdx,rdx
  40bba2:	je     40bc61 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x351>
  40bba8:	cmp    rdx,0x3
  40bbac:	je     40bc24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x314>
  40bbae:	cmp    rdx,0x2
  40bbb2:	mov    rdi,QWORD PTR [rsp+0x10]
  40bbb7:	jne    40bc70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
  40bbbd:	mov    cl,BYTE PTR [rsp+0x5]
  40bbc1:	test   cl,0xf
  40bbc4:	jne    40bc70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
  40bbca:	mov    al,BYTE PTR [rsp+0x4]
  40bbce:	shl    al,0x2
  40bbd1:	shr    cl,0x4
  40bbd4:	or     cl,al
  40bbd6:	mov    BYTE PTR [r9],cl
  40bbd9:	add    r9,0x1
  40bbdd:	test   rsi,rsi
  40bbe0:	jne    40bc66 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x356>
  40bbe6:	jmp    40bc83 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x373>
  40bbeb:	mov    QWORD PTR [rsp+0x10],rdi
  40bbf0:	cmp    cl,0x42
  40bbf3:	jne    40bcc9 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b9>
  40bbf9:	lea    rcx,[rdx+0x1]
  40bbfd:	mov    rdi,rcx
  40bc00:	cmp    rcx,rsi
  40bc03:	jae    40bb9c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x28c>
  40bc05:	cmp    rdi,0x7
  40bc09:	ja     40bb9c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x28c>
  40bc0b:	movzx  ecx,BYTE PTR [r8+rdi*1]
  40bc10:	movzx  eax,BYTE PTR [r11+rcx*1]
  40bc15:	add    al,0xbf
  40bc17:	lea    rcx,[rdi+0x1]
  40bc1b:	cmp    al,0x2
  40bc1d:	jb     40bbfd <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ed>
  40bc1f:	jmp    40bb9c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x28c>
  40bc24:	cmp    r10,0x2
  40bc28:	mov    rdi,QWORD PTR [rsp+0x10]
  40bc2d:	jb     40bc70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
  40bc2f:	mov    cl,BYTE PTR [rsp+0x6]
  40bc33:	mov    eax,ecx
  40bc35:	and    al,0x3
  40bc37:	jne    40bc70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
  40bc39:	mov    dil,BYTE PTR [rsp+0x4]
  40bc3e:	mov    al,BYTE PTR [rsp+0x5]
  40bc42:	shl    dil,0x2
  40bc46:	mov    edx,eax
  40bc48:	shr    dl,0x4
  40bc4b:	or     dl,dil
  40bc4e:	mov    BYTE PTR [r9],dl
  40bc51:	shl    al,0x4
  40bc54:	shr    cl,0x2
  40bc57:	or     cl,al
  40bc59:	mov    BYTE PTR [r9+0x1],cl
  40bc5d:	add    r9,0x2
  40bc61:	test   rsi,rsi
  40bc64:	je     40bc83 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x373>
  40bc66:	mov    rax,QWORD PTR [rsp+0x18]
  40bc6b:	sub    rax,rsi
  40bc6e:	jmp    40bc78 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x368>
  40bc70:	mov    rax,QWORD PTR [rsp+0x18]
  40bc75:	sub    rax,rdi
  40bc78:	add    r13,rax
  40bc7b:	mov    rax,r13
  40bc7e:	jmp    40b9be <flatcc_json_parser_build_uint8_vector_base64@@Base+0xae>
  40bc83:	sub    r9,QWORD PTR [rsp+0x20]
  40bc88:	sub    QWORD PTR [rsp+0x8],r9
  40bc8d:	jbe    40bca4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x394>
  40bc8f:	mov    rdi,QWORD PTR [rbx]
  40bc92:	mov    rsi,QWORD PTR [rsp+0x8]
  40bc97:	call   406140 <flatcc_builder_truncate_vector@@Base>
  40bc9c:	test   eax,eax
  40bc9e:	jne    40ba81 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x171>
  40bca4:	mov    rdi,QWORD PTR [rbx]
  40bca7:	call   407460 <flatcc_builder_end_vector@@Base>
  40bcac:	mov    DWORD PTR [r15],eax
  40bcaf:	test   eax,eax
  40bcb1:	je     40ba81 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x171>
  40bcb7:	cmp    BYTE PTR [rbp+0x0],0x22
  40bcbb:	jne    40bcd1 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c1>
  40bcbd:	add    rbp,0x1
  40bcc1:	mov    r14,rbp
  40bcc4:	jmp    40b9eb <flatcc_json_parser_build_uint8_vector_base64@@Base+0xdb>
  40bcc9:	mov    rdi,rdx
  40bccc:	jmp    40bb9c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x28c>
  40bcd1:	cmp    DWORD PTR [rbx+0x20],0x0
  40bcd5:	jne    40b9eb <flatcc_json_parser_build_uint8_vector_base64@@Base+0xdb>
  40bcdb:	mov    DWORD PTR [rbx+0x20],0x14
  40bce2:	jmp    40ba99 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x189>
  40bce7:	nop    WORD PTR [rax+rax*1+0x0]

000000000040bcf0 <flatcc_json_parser_build_string@@Base>:
  40bcf0:	push   rbp
  40bcf1:	push   r15
  40bcf3:	push   r14
  40bcf5:	push   r13
  40bcf7:	push   r12
  40bcf9:	push   rbx
  40bcfa:	push   rax
  40bcfb:	mov    r15,rcx
  40bcfe:	mov    r12,rdx
  40bd01:	mov    r14,rdi
  40bd04:	cmp    rsi,rdx
  40bd07:	je     40bd50 <flatcc_json_parser_build_string@@Base+0x60>
  40bd09:	cmp    BYTE PTR [rsi],0x22
  40bd0c:	jne    40bd50 <flatcc_json_parser_build_string@@Base+0x60>
  40bd0e:	add    rsi,0x1
  40bd12:	mov    rbp,r12
  40bd15:	cmp    rsi,r12
  40bd18:	je     40bd5e <flatcc_json_parser_build_string@@Base+0x6e>
  40bd1a:	mov    rbx,rsi
  40bd1d:	nop    DWORD PTR [rax]
  40bd20:	movzx  eax,BYTE PTR [rbx]
  40bd23:	cmp    al,0x20
  40bd25:	jb     40bea0 <flatcc_json_parser_build_string@@Base+0x1b0>
  40bd2b:	cmp    al,0x22
  40bd2d:	je     40bec4 <flatcc_json_parser_build_string@@Base+0x1d4>
  40bd33:	cmp    al,0x5c
  40bd35:	je     40bec4 <flatcc_json_parser_build_string@@Base+0x1d4>
  40bd3b:	add    rbx,0x1
  40bd3f:	cmp    r12,rbx
  40bd42:	jne    40bd20 <flatcc_json_parser_build_string@@Base+0x30>
  40bd44:	mov    rbp,rsi
  40bd47:	cmp    DWORD PTR [r14+0x20],0x0
  40bd4c:	jne    40bd81 <flatcc_json_parser_build_string@@Base+0x91>
  40bd4e:	jmp    40bd65 <flatcc_json_parser_build_string@@Base+0x75>
  40bd50:	cmp    DWORD PTR [r14+0x20],0x0
  40bd55:	mov    rbp,r12
  40bd58:	je     40be72 <flatcc_json_parser_build_string@@Base+0x182>
  40bd5e:	cmp    DWORD PTR [r14+0x20],0x0
  40bd63:	jne    40bd81 <flatcc_json_parser_build_string@@Base+0x91>
  40bd65:	mov    DWORD PTR [r14+0x20],0x14
  40bd6d:	mov    eax,DWORD PTR [r14+0x8]
  40bd71:	mov    ecx,r12d
  40bd74:	sub    ecx,eax
  40bd76:	add    ecx,0x1
  40bd79:	mov    DWORD PTR [r14+0x1c],ecx
  40bd7d:	mov    QWORD PTR [r14+0x38],r12
  40bd81:	mov    rbx,r12
  40bd84:	mov    rdi,QWORD PTR [r14]
  40bd87:	call   4065d0 <flatcc_builder_start_string@@Base>
  40bd8c:	test   eax,eax
  40bd8e:	je     40bdac <flatcc_json_parser_build_string@@Base+0xbc>
  40bd90:	mov    DWORD PTR [r15],0x0
  40bd97:	mov    r12,rbx
  40bd9a:	mov    rax,r12
  40bd9d:	add    rsp,0x8
  40bda1:	pop    rbx
  40bda2:	pop    r12
  40bda4:	pop    r13
  40bda6:	pop    r14
  40bda8:	pop    r15
  40bdaa:	pop    rbp
  40bdab:	ret    
  40bdac:	mov    rdi,QWORD PTR [r14]
  40bdaf:	mov    rdx,rbx
  40bdb2:	sub    rdx,rbp
  40bdb5:	mov    rsi,rbp
  40bdb8:	call   405fd0 <flatcc_builder_append_string@@Base>
  40bdbd:	test   rax,rax
  40bdc0:	je     40bd90 <flatcc_json_parser_build_string@@Base+0xa0>
  40bdc2:	mov    rbp,r12
  40bdc5:	cmp    rbx,r12
  40bdc8:	je     40bf38 <flatcc_json_parser_build_string@@Base+0x248>
  40bdce:	lea    rbp,[rsp+0x4]
  40bdd3:	cmp    BYTE PTR [rbx],0x22
  40bdd6:	je     40bf84 <flatcc_json_parser_build_string@@Base+0x294>
  40bddc:	mov    rdi,r14
  40bddf:	mov    rsi,rbx
  40bde2:	mov    rdx,r12
  40bde5:	mov    rcx,rbp
  40bde8:	call   409d00 <flatcc_json_parser_string_escape@@Base>
  40bded:	mov    r13,rax
  40bdf0:	mov    rdi,QWORD PTR [r14]
  40bdf3:	movsx  rdx,BYTE PTR [rsp+0x4]
  40bdf9:	lea    rsi,[rsp+0x5]
  40bdfe:	call   405fd0 <flatcc_builder_append_string@@Base>
  40be03:	test   rax,rax
  40be06:	je     40bf89 <flatcc_json_parser_build_string@@Base+0x299>
  40be0c:	cmp    r13,r12
  40be0f:	je     40bee8 <flatcc_json_parser_build_string@@Base+0x1f8>
  40be15:	mov    rbx,r13
  40be18:	nop    DWORD PTR [rax+rax*1+0x0]
  40be20:	movzx  eax,BYTE PTR [rbx]
  40be23:	cmp    al,0x20
  40be25:	jb     40bf10 <flatcc_json_parser_build_string@@Base+0x220>
  40be2b:	cmp    al,0x22
  40be2d:	je     40be41 <flatcc_json_parser_build_string@@Base+0x151>
  40be2f:	cmp    al,0x5c
  40be31:	je     40be41 <flatcc_json_parser_build_string@@Base+0x151>
  40be33:	add    rbx,0x1
  40be37:	cmp    r12,rbx
  40be3a:	jne    40be20 <flatcc_json_parser_build_string@@Base+0x130>
  40be3c:	jmp    40bee8 <flatcc_json_parser_build_string@@Base+0x1f8>
  40be41:	cmp    r12,rbx
  40be44:	je     40bf35 <flatcc_json_parser_build_string@@Base+0x245>
  40be4a:	mov    rdi,QWORD PTR [r14]
  40be4d:	mov    rdx,rbx
  40be50:	sub    rdx,r13
  40be53:	mov    rsi,r13
  40be56:	call   405fd0 <flatcc_builder_append_string@@Base>
  40be5b:	test   rax,rax
  40be5e:	je     40bd90 <flatcc_json_parser_build_string@@Base+0xa0>
  40be64:	cmp    r12,rbx
  40be67:	jne    40bdd3 <flatcc_json_parser_build_string@@Base+0xe3>
  40be6d:	jmp    40bf35 <flatcc_json_parser_build_string@@Base+0x245>
  40be72:	mov    DWORD PTR [r14+0x20],0x10
  40be7a:	mov    eax,DWORD PTR [r14+0x8]
  40be7e:	mov    ecx,esi
  40be80:	sub    ecx,eax
  40be82:	add    ecx,0x1
  40be85:	mov    DWORD PTR [r14+0x1c],ecx
  40be89:	mov    QWORD PTR [r14+0x38],rsi
  40be8d:	mov    rbp,r12
  40be90:	cmp    DWORD PTR [r14+0x20],0x0
  40be95:	jne    40bd81 <flatcc_json_parser_build_string@@Base+0x91>
  40be9b:	jmp    40bd65 <flatcc_json_parser_build_string@@Base+0x75>
  40bea0:	cmp    DWORD PTR [r14+0x20],0x0
  40bea5:	jne    40bedd <flatcc_json_parser_build_string@@Base+0x1ed>
  40bea7:	mov    DWORD PTR [r14+0x20],0x11
  40beaf:	mov    eax,DWORD PTR [r14+0x8]
  40beb3:	mov    ecx,ebx
  40beb5:	sub    ecx,eax
  40beb7:	add    ecx,0x1
  40beba:	mov    DWORD PTR [r14+0x1c],ecx
  40bebe:	mov    QWORD PTR [r14+0x38],rbx
  40bec2:	jmp    40bedd <flatcc_json_parser_build_string@@Base+0x1ed>
  40bec4:	cmp    r12,rbx
  40bec7:	je     40bedd <flatcc_json_parser_build_string@@Base+0x1ed>
  40bec9:	cmp    al,0x22
  40becb:	jne    40bee0 <flatcc_json_parser_build_string@@Base+0x1f0>
  40becd:	mov    rdi,QWORD PTR [r14]
  40bed0:	mov    rdx,rbx
  40bed3:	sub    rdx,rsi
  40bed6:	call   408870 <flatcc_builder_create_string@@Base>
  40bedb:	jmp    40bf43 <flatcc_json_parser_build_string@@Base+0x253>
  40bedd:	mov    rbx,r12
  40bee0:	mov    rbp,rsi
  40bee3:	jmp    40bd84 <flatcc_json_parser_build_string@@Base+0x94>
  40bee8:	cmp    DWORD PTR [r14+0x20],0x0
  40beed:	mov    rbp,r12
  40bef0:	jne    40bf38 <flatcc_json_parser_build_string@@Base+0x248>
  40bef2:	mov    DWORD PTR [r14+0x20],0x14
  40befa:	mov    eax,DWORD PTR [r14+0x8]
  40befe:	mov    ecx,r12d
  40bf01:	sub    ecx,eax
  40bf03:	add    ecx,0x1
  40bf06:	mov    DWORD PTR [r14+0x1c],ecx
  40bf0a:	mov    QWORD PTR [r14+0x38],r12
  40bf0e:	jmp    40bf35 <flatcc_json_parser_build_string@@Base+0x245>
  40bf10:	cmp    DWORD PTR [r14+0x20],0x0
  40bf15:	mov    rbp,r12
  40bf18:	jne    40bf38 <flatcc_json_parser_build_string@@Base+0x248>
  40bf1a:	mov    DWORD PTR [r14+0x20],0x11
  40bf22:	mov    eax,DWORD PTR [r14+0x8]
  40bf26:	mov    ecx,ebx
  40bf28:	sub    ecx,eax
  40bf2a:	add    ecx,0x1
  40bf2d:	mov    DWORD PTR [r14+0x1c],ecx
  40bf31:	mov    QWORD PTR [r14+0x38],rbx
  40bf35:	mov    rbp,r12
  40bf38:	mov    rdi,QWORD PTR [r14]
  40bf3b:	call   408a20 <flatcc_builder_end_string@@Base>
  40bf40:	mov    rbx,rbp
  40bf43:	mov    DWORD PTR [r15],eax
  40bf46:	cmp    rbx,r12
  40bf49:	je     40bf59 <flatcc_json_parser_build_string@@Base+0x269>
  40bf4b:	cmp    BYTE PTR [rbx],0x22
  40bf4e:	jne    40bf59 <flatcc_json_parser_build_string@@Base+0x269>
  40bf50:	add    rbx,0x1
  40bf54:	jmp    40bd97 <flatcc_json_parser_build_string@@Base+0xa7>
  40bf59:	cmp    DWORD PTR [r14+0x20],0x0
  40bf5e:	jne    40bd9a <flatcc_json_parser_build_string@@Base+0xaa>
  40bf64:	mov    DWORD PTR [r14+0x20],0x14
  40bf6c:	mov    eax,DWORD PTR [r14+0x8]
  40bf70:	mov    ecx,ebx
  40bf72:	sub    ecx,eax
  40bf74:	add    ecx,0x1
  40bf77:	mov    DWORD PTR [r14+0x1c],ecx
  40bf7b:	mov    QWORD PTR [r14+0x38],rbx
  40bf7f:	jmp    40bd9a <flatcc_json_parser_build_string@@Base+0xaa>
  40bf84:	mov    rbp,rbx
  40bf87:	jmp    40bf38 <flatcc_json_parser_build_string@@Base+0x248>
  40bf89:	mov    rbx,r13
  40bf8c:	jmp    40bd90 <flatcc_json_parser_build_string@@Base+0xa0>
  40bf91:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40bf9b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040bfa0 <flatcc_json_parser_prepare_unions@@Base>:
  40bfa0:	push   r15
  40bfa2:	push   r14
  40bfa4:	push   r13
  40bfa6:	push   r12
  40bfa8:	push   rbx
  40bfa9:	mov    r13,r8
  40bfac:	mov    r12,rcx
  40bfaf:	mov    r15,rdx
  40bfb2:	mov    r14,rsi
  40bfb5:	mov    rbx,rdi
  40bfb8:	mov    rdi,QWORD PTR [rdi]
  40bfbb:	lea    rax,[rcx+rcx*4]
  40bfbf:	lea    rsi,[rax*8+0x10]
  40bfc7:	call   404c90 <flatcc_builder_enter_user_frame@@Base>
  40bfcc:	mov    QWORD PTR [r13+0x0],rax
  40bfd0:	test   rax,rax
  40bfd3:	je     40bfe8 <flatcc_json_parser_prepare_unions@@Base+0x48>
  40bfd5:	mov    rdi,QWORD PTR [rbx]
  40bfd8:	mov    rsi,rax
  40bfdb:	call   404e20 <flatcc_builder_get_user_frame_ptr@@Base>
  40bfe0:	mov    QWORD PTR [rax],r12
  40bfe3:	mov    r15,r14
  40bfe6:	jmp    40c007 <flatcc_json_parser_prepare_unions@@Base+0x67>
  40bfe8:	cmp    DWORD PTR [rbx+0x20],0x0
  40bfec:	jne    40c007 <flatcc_json_parser_prepare_unions@@Base+0x67>
  40bfee:	mov    DWORD PTR [rbx+0x20],0x21
  40bff5:	mov    eax,DWORD PTR [rbx+0x8]
  40bff8:	mov    ecx,r14d
  40bffb:	sub    ecx,eax
  40bffd:	add    ecx,0x1
  40c000:	mov    DWORD PTR [rbx+0x1c],ecx
  40c003:	mov    QWORD PTR [rbx+0x38],r14
  40c007:	mov    rax,r15
  40c00a:	pop    rbx
  40c00b:	pop    r12
  40c00d:	pop    r13
  40c00f:	pop    r14
  40c011:	pop    r15
  40c013:	ret    
  40c014:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c01e:	xchg   ax,ax

000000000040c020 <flatcc_json_parser_finalize_unions@@Base>:
  40c020:	push   r15
  40c022:	push   r14
  40c024:	push   r12
  40c026:	push   rbx
  40c027:	push   rax
  40c028:	mov    r15,rcx
  40c02b:	mov    r14,rdx
  40c02e:	mov    r12,rsi
  40c031:	mov    rbx,rdi
  40c034:	mov    rdi,QWORD PTR [rdi]
  40c037:	mov    rsi,rcx
  40c03a:	call   404e20 <flatcc_builder_get_user_frame_ptr@@Base>
  40c03f:	cmp    QWORD PTR [rax+0x8],0x0
  40c044:	je     40c067 <flatcc_json_parser_finalize_unions@@Base+0x47>
  40c046:	cmp    DWORD PTR [rbx+0x20],0x0
  40c04a:	jne    40c06a <flatcc_json_parser_finalize_unions@@Base+0x4a>
  40c04c:	mov    DWORD PTR [rbx+0x20],0x1b
  40c053:	mov    eax,DWORD PTR [rbx+0x8]
  40c056:	mov    ecx,r12d
  40c059:	sub    ecx,eax
  40c05b:	add    ecx,0x1
  40c05e:	mov    DWORD PTR [rbx+0x1c],ecx
  40c061:	mov    QWORD PTR [rbx+0x38],r12
  40c065:	jmp    40c06a <flatcc_json_parser_finalize_unions@@Base+0x4a>
  40c067:	mov    r14,r12
  40c06a:	mov    rdi,QWORD PTR [rbx]
  40c06d:	mov    rsi,r15
  40c070:	call   404d90 <flatcc_builder_exit_user_frame_at@@Base>
  40c075:	mov    rax,r14
  40c078:	add    rsp,0x8
  40c07c:	pop    rbx
  40c07d:	pop    r12
  40c07f:	pop    r14
  40c081:	pop    r15
  40c083:	ret    
  40c084:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c08e:	xchg   ax,ax

000000000040c090 <flatcc_json_parser_union@@Base>:
  40c090:	push   rbp
  40c091:	push   r15
  40c093:	push   r14
  40c095:	push   r12
  40c097:	push   rbx
  40c098:	sub    rsp,0x10
  40c09c:	mov    r12d,r8d
  40c09f:	mov    rbp,rcx
  40c0a2:	mov    r14,rdx
  40c0a5:	mov    r15,rsi
  40c0a8:	mov    rbx,rdi
  40c0ab:	mov    rdi,QWORD PTR [rdi]
  40c0ae:	mov    rsi,r9
  40c0b1:	call   404e20 <flatcc_builder_get_user_frame_ptr@@Base>
  40c0b6:	lea    rcx,[rbp*4+0x0]
  40c0be:	add    rcx,rbp
  40c0c1:	cmp    QWORD PTR [rax+rcx*8+0x10],0x0
  40c0c7:	je     40c0f1 <flatcc_json_parser_union@@Base+0x61>
  40c0c9:	cmp    DWORD PTR [rbx+0x20],0x0
  40c0cd:	jne    40c180 <flatcc_json_parser_union@@Base+0xf0>
  40c0d3:	mov    DWORD PTR [rbx+0x20],0x1c
  40c0da:	mov    eax,DWORD PTR [rbx+0x8]
  40c0dd:	mov    ecx,r15d
  40c0e0:	sub    ecx,eax
  40c0e2:	add    ecx,0x1
  40c0e5:	mov    DWORD PTR [rbx+0x1c],ecx
  40c0e8:	mov    QWORD PTR [rbx+0x38],r15
  40c0ec:	jmp    40c180 <flatcc_json_parser_union@@Base+0xf0>
  40c0f1:	lea    rdx,[rax+0x10]
  40c0f5:	cmp    BYTE PTR [rdx+rcx*8+0x14],0x0
  40c0fa:	je     40c147 <flatcc_json_parser_union@@Base+0xb7>
  40c0fc:	mov    cl,BYTE PTR [rdx+rcx*8+0x15]
  40c100:	mov    BYTE PTR [rsp+0x8],cl
  40c104:	test   cl,cl
  40c106:	je     40c17a <flatcc_json_parser_union@@Base+0xea>
  40c108:	mov    rbp,QWORD PTR [rsp+0x40]
  40c10d:	add    QWORD PTR [rax+0x8],0xffffffffffffffff
  40c112:	lea    r8,[rsp+0xc]
  40c117:	movzx  ecx,cl
  40c11a:	mov    rdi,rbx
  40c11d:	mov    rsi,r15
  40c120:	mov    rdx,r14
  40c123:	call   rbp
  40c125:	cmp    rax,r14
  40c128:	je     40c180 <flatcc_json_parser_union@@Base+0xf0>
  40c12a:	mov    r15,rax
  40c12d:	mov    rdi,QWORD PTR [rbx]
  40c130:	movzx  esi,r12w
  40c134:	mov    rdx,QWORD PTR [rsp+0x8]
  40c139:	call   407870 <flatcc_builder_table_add_union@@Base>
  40c13e:	test   eax,eax
  40c140:	jne    40c0c9 <flatcc_json_parser_union@@Base+0x39>
  40c142:	mov    r14,r15
  40c145:	jmp    40c180 <flatcc_json_parser_union@@Base+0xf0>
  40c147:	add    QWORD PTR [rax+0x8],0x1
  40c14c:	lea    rax,[rax+rcx*8]
  40c150:	add    rax,0x10
  40c154:	mov    esi,DWORD PTR [rbx+0x18]
  40c157:	mov    DWORD PTR [rdx+rcx*8+0x10],esi
  40c15b:	mov    rsi,QWORD PTR [rbx+0x8]
  40c15f:	mov    QWORD PTR [rdx+rcx*8+0x8],rsi
  40c164:	mov    QWORD PTR [rax],r15
  40c167:	mov    rdi,rbx
  40c16a:	mov    rsi,r15
  40c16d:	mov    rdx,r14
  40c170:	call   40a360 <flatcc_json_parser_generic_json@@Base>
  40c175:	mov    r14,rax
  40c178:	jmp    40c180 <flatcc_json_parser_union@@Base+0xf0>
  40c17a:	cmp    DWORD PTR [rbx+0x20],0x0
  40c17e:	je     40c190 <flatcc_json_parser_union@@Base+0x100>
  40c180:	mov    rax,r14
  40c183:	add    rsp,0x10
  40c187:	pop    rbx
  40c188:	pop    r12
  40c18a:	pop    r14
  40c18c:	pop    r15
  40c18e:	pop    rbp
  40c18f:	ret    
  40c190:	mov    DWORD PTR [rbx+0x20],0x19
  40c197:	jmp    40c0da <flatcc_json_parser_union@@Base+0x4a>
  40c19c:	nop    DWORD PTR [rax+0x0]

000000000040c1a0 <flatcc_json_parser_union_type@@Base>:
  40c1a0:	push   rbp
  40c1a1:	push   r15
  40c1a3:	push   r14
  40c1a5:	push   r13
  40c1a7:	push   r12
  40c1a9:	push   rbx
  40c1aa:	sub    rsp,0x18
  40c1ae:	mov    ebx,r8d
  40c1b1:	mov    rbp,rcx
  40c1b4:	mov    r14,rdx
  40c1b7:	mov    r12,rsi
  40c1ba:	mov    r15,rdi
  40c1bd:	mov    rdi,QWORD PTR [rdi]
  40c1c0:	mov    rsi,r9
  40c1c3:	call   404e20 <flatcc_builder_get_user_frame_ptr@@Base>
  40c1c8:	lea    r13,[rbp*4+0x0]
  40c1d0:	add    r13,rbp
  40c1d3:	cmp    BYTE PTR [rax+r13*8+0x24],0x0
  40c1d9:	je     40c207 <flatcc_json_parser_union_type@@Base+0x67>
  40c1db:	cmp    DWORD PTR [r15+0x20],0x0
  40c1e0:	jne    40c436 <flatcc_json_parser_union_type@@Base+0x296>
  40c1e6:	mov    DWORD PTR [r15+0x20],0x1c
  40c1ee:	mov    eax,DWORD PTR [r15+0x8]
  40c1f2:	mov    ecx,r12d
  40c1f5:	sub    ecx,eax
  40c1f7:	add    ecx,0x1
  40c1fa:	mov    DWORD PTR [r15+0x1c],ecx
  40c1fe:	mov    QWORD PTR [r15+0x38],r12
  40c202:	jmp    40c436 <flatcc_json_parser_union_type@@Base+0x296>
  40c207:	mov    r11,rax
  40c20a:	mov    DWORD PTR [rsp+0xc],ebx
  40c20e:	lea    r10,[rax+0x10]
  40c212:	lea    rax,[rax+r13*8]
  40c216:	add    rax,0x24
  40c21a:	mov    BYTE PTR [rax],0x1
  40c21d:	lea    r8,[r10+r13*8]
  40c221:	add    r8,0x15
  40c225:	mov    BYTE PTR [r10+r13*8+0x15],0x0
  40c22b:	cmp    r12,r14
  40c22e:	je     40c362 <flatcc_json_parser_union_type@@Base+0x1c2>
  40c234:	mov    r9b,BYTE PTR [r12]
  40c238:	xor    eax,eax
  40c23a:	cmp    r9b,0x2d
  40c23e:	sete   al
  40c241:	add    rax,r12
  40c244:	xor    edx,edx
  40c246:	cmp    rax,r14
  40c249:	je     40c28d <flatcc_json_parser_union_type@@Base+0xed>
  40c24b:	nop    DWORD PTR [rax+rax*1+0x0]
  40c250:	movsx  rdi,BYTE PTR [rax]
  40c254:	mov    ecx,edi
  40c256:	add    cl,0xd0
  40c259:	cmp    cl,0x9
  40c25c:	ja     40c2cd <flatcc_json_parser_union_type@@Base+0x12d>
  40c25e:	lea    rcx,[rdx+rdx*4]
  40c262:	lea    rdi,[rdi+rcx*2]
  40c266:	add    rdi,0xffffffffffffffd0
  40c26a:	cmp    rdx,rdi
  40c26d:	ja     40c2d9 <flatcc_json_parser_union_type@@Base+0x139>
  40c26f:	add    rax,0x1
  40c273:	mov    rdx,rdi
  40c276:	cmp    r14,rax
  40c279:	jne    40c250 <flatcc_json_parser_union_type@@Base+0xb0>
  40c27b:	xor    ecx,ecx
  40c27d:	mov    rax,r14
  40c280:	mov    rdx,rdi
  40c283:	cmp    rax,r12
  40c286:	jne    40c29b <flatcc_json_parser_union_type@@Base+0xfb>
  40c288:	jmp    40c362 <flatcc_json_parser_union_type@@Base+0x1c2>
  40c28d:	mov    rax,r14
  40c290:	xor    ecx,ecx
  40c292:	cmp    rax,r12
  40c295:	je     40c362 <flatcc_json_parser_union_type@@Base+0x1c2>
  40c29b:	test   cl,cl
  40c29d:	je     40c300 <flatcc_json_parser_union_type@@Base+0x160>
  40c29f:	mov    cl,BYTE PTR [rax]
  40c2a1:	add    cl,0xd2
  40c2a4:	cmp    cl,0x37
  40c2a7:	ja     40c300 <flatcc_json_parser_union_type@@Base+0x160>
  40c2a9:	movzx  ecx,cl
  40c2ac:	movabs rdi,0x80000000800001
  40c2b6:	bt     rdi,rcx
  40c2ba:	jae    40c300 <flatcc_json_parser_union_type@@Base+0x160>
  40c2bc:	cmp    DWORD PTR [r15+0x20],0x0
  40c2c1:	jne    40c2fb <flatcc_json_parser_union_type@@Base+0x15b>
  40c2c3:	mov    DWORD PTR [r15+0x20],0xc
  40c2cb:	jmp    40c2e8 <flatcc_json_parser_union_type@@Base+0x148>
  40c2cd:	mov    cl,0x1
  40c2cf:	cmp    rax,r12
  40c2d2:	jne    40c29b <flatcc_json_parser_union_type@@Base+0xfb>
  40c2d4:	jmp    40c362 <flatcc_json_parser_union_type@@Base+0x1c2>
  40c2d9:	cmp    DWORD PTR [r15+0x20],0x0
  40c2de:	jne    40c2fb <flatcc_json_parser_union_type@@Base+0x15b>
  40c2e0:	mov    DWORD PTR [r15+0x20],0x8
  40c2e8:	mov    ecx,DWORD PTR [r15+0x8]
  40c2ec:	mov    edx,eax
  40c2ee:	sub    edx,ecx
  40c2f0:	add    edx,0x1
  40c2f3:	mov    DWORD PTR [r15+0x1c],edx
  40c2f7:	mov    QWORD PTR [r15+0x38],rax
  40c2fb:	xor    edx,edx
  40c2fd:	mov    rax,r14
  40c300:	cmp    rax,r12
  40c303:	je     40c362 <flatcc_json_parser_union_type@@Base+0x1c2>
  40c305:	cmp    r9b,0x2d
  40c309:	jne    40c31f <flatcc_json_parser_union_type@@Base+0x17f>
  40c30b:	cmp    DWORD PTR [r15+0x20],0x0
  40c310:	mov    rbp,r14
  40c313:	jne    40c35d <flatcc_json_parser_union_type@@Base+0x1bd>
  40c315:	mov    DWORD PTR [r15+0x20],0x8
  40c31d:	jmp    40c33a <flatcc_json_parser_union_type@@Base+0x19a>
  40c31f:	cmp    rdx,0x100
  40c326:	jb     40c357 <flatcc_json_parser_union_type@@Base+0x1b7>
  40c328:	cmp    DWORD PTR [r15+0x20],0x0
  40c32d:	mov    rbp,r14
  40c330:	jne    40c35d <flatcc_json_parser_union_type@@Base+0x1bd>
  40c332:	mov    DWORD PTR [r15+0x20],0x7
  40c33a:	mov    ecx,DWORD PTR [r15+0x8]
  40c33e:	mov    edx,eax
  40c340:	sub    edx,ecx
  40c342:	add    edx,0x1
  40c345:	mov    DWORD PTR [r15+0x1c],edx
  40c349:	mov    QWORD PTR [r15+0x38],rax
  40c34d:	mov    rbp,r14
  40c350:	cmp    rbp,r12
  40c353:	jne    40c38a <flatcc_json_parser_union_type@@Base+0x1ea>
  40c355:	jmp    40c362 <flatcc_json_parser_union_type@@Base+0x1c2>
  40c357:	mov    BYTE PTR [r8],dl
  40c35a:	mov    rbp,rax
  40c35d:	cmp    rbp,r12
  40c360:	jne    40c38a <flatcc_json_parser_union_type@@Base+0x1ea>
  40c362:	mov    rcx,QWORD PTR [rsp+0x50]
  40c367:	mov    rdi,r15
  40c36a:	mov    rsi,r12
  40c36d:	mov    rdx,r14
  40c370:	mov    rbx,r8
  40c373:	mov    rbp,r10
  40c376:	mov    r12,r11
  40c379:	call   40c470 <flatcc_json_parser_union_type@@Base+0x2d0>
  40c37e:	mov    r11,r12
  40c381:	mov    r10,rbp
  40c384:	mov    r8,rbx
  40c387:	mov    rbp,rax
  40c38a:	mov    rsi,QWORD PTR [r10+r13*8]
  40c38e:	test   rsi,rsi
  40c391:	je     40c420 <flatcc_json_parser_union_type@@Base+0x280>
  40c397:	mov    rax,QWORD PTR [r11+0x8]
  40c39b:	test   rax,rax
  40c39e:	je     40c448 <flatcc_json_parser_union_type@@Base+0x2a8>
  40c3a4:	mov    r9,QWORD PTR [rsp+0x58]
  40c3a9:	add    rax,0xffffffffffffffff
  40c3ad:	mov    QWORD PTR [r11+0x8],rax
  40c3b1:	mov    r12d,DWORD PTR [r15+0x18]
  40c3b5:	mov    rbx,QWORD PTR [r15+0x8]
  40c3b9:	mov    eax,DWORD PTR [r10+r13*8+0x10]
  40c3be:	mov    DWORD PTR [r15+0x18],eax
  40c3c2:	mov    rax,QWORD PTR [r10+r13*8+0x8]
  40c3c7:	mov    QWORD PTR [r15+0x8],rax
  40c3cb:	movzx  ecx,BYTE PTR [r8]
  40c3cf:	mov    BYTE PTR [rsp+0x10],cl
  40c3d3:	lea    r8,[rsp+0x14]
  40c3d8:	mov    rdi,r15
  40c3db:	mov    rdx,r14
  40c3de:	call   r9
  40c3e1:	cmp    rax,r14
  40c3e4:	je     40c436 <flatcc_json_parser_union_type@@Base+0x296>
  40c3e6:	mov    rdi,QWORD PTR [r15]
  40c3e9:	movzx  esi,WORD PTR [rsp+0xc]
  40c3ee:	mov    rdx,QWORD PTR [rsp+0x10]
  40c3f3:	call   407870 <flatcc_builder_table_add_union@@Base>
  40c3f8:	test   eax,eax
  40c3fa:	je     40c42b <flatcc_json_parser_union_type@@Base+0x28b>
  40c3fc:	cmp    DWORD PTR [r15+0x20],0x0
  40c401:	jne    40c436 <flatcc_json_parser_union_type@@Base+0x296>
  40c403:	mov    DWORD PTR [r15+0x20],0x1c
  40c40b:	mov    eax,DWORD PTR [r15+0x8]
  40c40f:	mov    ecx,ebp
  40c411:	sub    ecx,eax
  40c413:	add    ecx,0x1
  40c416:	mov    DWORD PTR [r15+0x1c],ecx
  40c41a:	mov    QWORD PTR [r15+0x38],rbp
  40c41e:	jmp    40c436 <flatcc_json_parser_union_type@@Base+0x296>
  40c420:	cmp    BYTE PTR [r8],0x1
  40c424:	sbb    QWORD PTR [r11+0x8],0xffffffffffffffff
  40c429:	jmp    40c433 <flatcc_json_parser_union_type@@Base+0x293>
  40c42b:	mov    DWORD PTR [r15+0x18],r12d
  40c42f:	mov    QWORD PTR [r15+0x8],rbx
  40c433:	mov    r14,rbp
  40c436:	mov    rax,r14
  40c439:	add    rsp,0x18
  40c43d:	pop    rbx
  40c43e:	pop    r12
  40c440:	pop    r13
  40c442:	pop    r14
  40c444:	pop    r15
  40c446:	pop    rbp
  40c447:	ret    
  40c448:	lea    rdi,[rip+0x42a4]        # 4106f3 <flatcc_builder_padding_base@@Base+0x2393>
  40c44f:	lea    rsi,[rip+0x42ac]        # 410702 <flatcc_builder_padding_base@@Base+0x23a2>
  40c456:	lea    rcx,[rip+0x4309]        # 410766 <flatcc_builder_padding_base@@Base+0x2406>
  40c45d:	mov    edx,0x3c5
  40c462:	call   403060 <__assert_fail@plt>
  40c467:	nop    WORD PTR [rax+rax*1+0x0]
  40c470:	push   rbp
  40c471:	push   r15
  40c473:	push   r14
  40c475:	push   r13
  40c477:	push   r12
  40c479:	push   rbx
  40c47a:	sub    rsp,0x38
  40c47e:	mov    rbx,r8
  40c481:	mov    rbp,rcx
  40c484:	mov    r13,rdx
  40c487:	mov    r14,rdi
  40c48a:	mov    BYTE PTR [r8],0x0
  40c48e:	cmp    rsi,rdx
  40c491:	je     40c4e4 <flatcc_json_parser_union_type@@Base+0x344>
  40c493:	mov    al,BYTE PTR [rsi]
  40c495:	cmp    al,0x2e
  40c497:	je     40c4ab <flatcc_json_parser_union_type@@Base+0x30b>
  40c499:	cmp    al,0x22
  40c49b:	jne    40c4dc <flatcc_json_parser_union_type@@Base+0x33c>
  40c49d:	add    rsi,0x1
  40c4a1:	mov    DWORD PTR [r14+0x14],0x0
  40c4a9:	jmp    40c4e4 <flatcc_json_parser_union_type@@Base+0x344>
  40c4ab:	cmp    DWORD PTR [r14+0x20],0x0
  40c4b0:	mov    r15,r13
  40c4b3:	jne    40c4e7 <flatcc_json_parser_union_type@@Base+0x347>
  40c4b5:	mov    DWORD PTR [r14+0x20],0x5
  40c4bd:	mov    eax,DWORD PTR [r14+0x8]
  40c4c1:	mov    ecx,esi
  40c4c3:	sub    ecx,eax
  40c4c5:	add    ecx,0x1
  40c4c8:	mov    DWORD PTR [r14+0x1c],ecx
  40c4cc:	mov    QWORD PTR [r14+0x38],rsi
  40c4d0:	mov    r15,r13
  40c4d3:	cmp    DWORD PTR [r14+0x14],0x0
  40c4d8:	jne    40c528 <flatcc_json_parser_union_type@@Base+0x388>
  40c4da:	jmp    40c4ee <flatcc_json_parser_union_type@@Base+0x34e>
  40c4dc:	mov    DWORD PTR [r14+0x14],0x1
  40c4e4:	mov    r15,rsi
  40c4e7:	cmp    DWORD PTR [r14+0x14],0x0
  40c4ec:	jne    40c528 <flatcc_json_parser_union_type@@Base+0x388>
  40c4ee:	mov    rax,r13
  40c4f1:	sub    rax,r15
  40c4f4:	cmp    rax,0x2
  40c4f8:	jl     40c517 <flatcc_json_parser_union_type@@Base+0x377>
  40c4fa:	cmp    BYTE PTR [r15],0x20
  40c4fe:	jg     40c528 <flatcc_json_parser_union_type@@Base+0x388>
  40c500:	jne    40c517 <flatcc_json_parser_union_type@@Base+0x377>
  40c502:	cmp    BYTE PTR [r15+0x1],0x20
  40c507:	jle    40c517 <flatcc_json_parser_union_type@@Base+0x377>
  40c509:	add    r15,0x1
  40c50d:	cmp    r15,r13
  40c510:	jne    40c531 <flatcc_json_parser_union_type@@Base+0x391>
  40c512:	jmp    40c60f <flatcc_json_parser_union_type@@Base+0x46f>
  40c517:	mov    rdi,r14
  40c51a:	mov    rsi,r15
  40c51d:	mov    rdx,r13
  40c520:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40c525:	mov    r15,rax
  40c528:	cmp    r15,r13
  40c52b:	je     40c60f <flatcc_json_parser_union_type@@Base+0x46f>
  40c531:	lea    rcx,[rbp+0x8]
  40c535:	xor    edx,edx
  40c537:	lea    r12,[rsp+0x10]
  40c53c:	mov    QWORD PTR [rsp+0x28],rbx
  40c541:	mov    QWORD PTR [rsp+0x20],rbp
  40c546:	mov    QWORD PTR [rsp+0x18],rcx
  40c54b:	mov    DWORD PTR [rsp+0xc],edx
  40c54f:	mov    rbx,QWORD PTR [rbp+0x0]
  40c553:	mov    rbp,rcx
  40c556:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c560:	mov    rdi,r14
  40c563:	mov    rsi,r15
  40c566:	mov    rdx,r13
  40c569:	lea    rcx,[rsp+0x14]
  40c56e:	lea    r8,[rsp+0x30]
  40c573:	mov    r9,r12
  40c576:	call   rbx
  40c578:	cmp    rax,r13
  40c57b:	je     40c60f <flatcc_json_parser_union_type@@Base+0x46f>
  40c581:	cmp    rax,r15
  40c584:	jne    40c5a0 <flatcc_json_parser_union_type@@Base+0x400>
  40c586:	mov    rbx,QWORD PTR [rbp+0x0]
  40c58a:	add    rbp,0x8
  40c58e:	test   rbx,rbx
  40c591:	jne    40c560 <flatcc_json_parser_union_type@@Base+0x3c0>
  40c593:	jmp    40c5ec <flatcc_json_parser_union_type@@Base+0x44c>
  40c595:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c59f:	nop
  40c5a0:	mov    edx,DWORD PTR [rsp+0xc]
  40c5a4:	test   edx,edx
  40c5a6:	je     40c5b3 <flatcc_json_parser_union_type@@Base+0x413>
  40c5a8:	cmp    DWORD PTR [r14+0x14],0x0
  40c5ad:	jne    40c643 <flatcc_json_parser_union_type@@Base+0x4a3>
  40c5b3:	cmp    DWORD PTR [rsp+0x14],0x0
  40c5b8:	jne    40c621 <flatcc_json_parser_union_type@@Base+0x481>
  40c5ba:	mov    rcx,QWORD PTR [rsp+0x30]
  40c5bf:	cmp    rcx,0x100
  40c5c6:	jae    40c632 <flatcc_json_parser_union_type@@Base+0x492>
  40c5c8:	add    edx,0x1
  40c5cb:	mov    r15,rax
  40c5ce:	mov    rbx,QWORD PTR [rsp+0x28]
  40c5d3:	add    BYTE PTR [rbx],cl
  40c5d5:	cmp    DWORD PTR [rsp+0x10],0x0
  40c5da:	mov    rbp,QWORD PTR [rsp+0x20]
  40c5df:	mov    rcx,QWORD PTR [rsp+0x18]
  40c5e4:	jne    40c54b <flatcc_json_parser_union_type@@Base+0x3ab>
  40c5ea:	jmp    40c612 <flatcc_json_parser_union_type@@Base+0x472>
  40c5ec:	cmp    DWORD PTR [r14+0x20],0x0
  40c5f1:	jne    40c60f <flatcc_json_parser_union_type@@Base+0x46f>
  40c5f3:	mov    DWORD PTR [r14+0x20],0x17
  40c5fb:	mov    eax,DWORD PTR [r14+0x8]
  40c5ff:	mov    ecx,r15d
  40c602:	sub    ecx,eax
  40c604:	add    ecx,0x1
  40c607:	mov    DWORD PTR [r14+0x1c],ecx
  40c60b:	mov    QWORD PTR [r14+0x38],r15
  40c60f:	mov    rax,r13
  40c612:	add    rsp,0x38
  40c616:	pop    rbx
  40c617:	pop    r12
  40c619:	pop    r13
  40c61b:	pop    r14
  40c61d:	pop    r15
  40c61f:	pop    rbp
  40c620:	ret    
  40c621:	cmp    DWORD PTR [r14+0x20],0x0
  40c626:	jne    40c60f <flatcc_json_parser_union_type@@Base+0x46f>
  40c628:	mov    DWORD PTR [r14+0x20],0x8
  40c630:	jmp    40c652 <flatcc_json_parser_union_type@@Base+0x4b2>
  40c632:	cmp    DWORD PTR [r14+0x20],0x0
  40c637:	jne    40c60f <flatcc_json_parser_union_type@@Base+0x46f>
  40c639:	mov    DWORD PTR [r14+0x20],0x7
  40c641:	jmp    40c652 <flatcc_json_parser_union_type@@Base+0x4b2>
  40c643:	cmp    DWORD PTR [r14+0x20],0x0
  40c648:	jne    40c60f <flatcc_json_parser_union_type@@Base+0x46f>
  40c64a:	mov    DWORD PTR [r14+0x20],0xe
  40c652:	mov    ecx,DWORD PTR [r14+0x8]
  40c656:	mov    edx,eax
  40c658:	sub    edx,ecx
  40c65a:	add    edx,0x1
  40c65d:	mov    DWORD PTR [r14+0x1c],edx
  40c661:	mov    QWORD PTR [r14+0x38],rax
  40c665:	jmp    40c60f <flatcc_json_parser_union_type@@Base+0x46f>
  40c667:	nop    WORD PTR [rax+rax*1+0x0]

000000000040c670 <flatcc_json_parser_union_vector@@Base>:
  40c670:	push   rbp
  40c671:	push   r15
  40c673:	push   r14
  40c675:	push   r12
  40c677:	push   rbx
  40c678:	mov    r12d,r8d
  40c67b:	mov    rbp,rcx
  40c67e:	mov    r14,rdx
  40c681:	mov    r15,rsi
  40c684:	mov    rbx,rdi
  40c687:	mov    rdi,QWORD PTR [rdi]
  40c68a:	mov    rsi,r9
  40c68d:	call   404e20 <flatcc_builder_get_user_frame_ptr@@Base>
  40c692:	lea    rdx,[rbp*4+0x0]
  40c69a:	add    rdx,rbp
  40c69d:	cmp    QWORD PTR [rax+rdx*8+0x10],0x0
  40c6a3:	je     40c6d0 <flatcc_json_parser_union_vector@@Base+0x60>
  40c6a5:	cmp    DWORD PTR [rbx+0x20],0x0
  40c6a9:	jne    40c6c4 <flatcc_json_parser_union_vector@@Base+0x54>
  40c6ab:	mov    DWORD PTR [rbx+0x20],0x1c
  40c6b2:	mov    eax,DWORD PTR [rbx+0x8]
  40c6b5:	mov    ecx,r15d
  40c6b8:	sub    ecx,eax
  40c6ba:	add    ecx,0x1
  40c6bd:	mov    DWORD PTR [rbx+0x1c],ecx
  40c6c0:	mov    QWORD PTR [rbx+0x38],r15
  40c6c4:	mov    rax,r14
  40c6c7:	pop    rbx
  40c6c8:	pop    r12
  40c6ca:	pop    r14
  40c6cc:	pop    r15
  40c6ce:	pop    rbp
  40c6cf:	ret    
  40c6d0:	lea    rsi,[rax+0x10]
  40c6d4:	cmp    BYTE PTR [rsi+rdx*8+0x14],0x0
  40c6d9:	mov    rcx,QWORD PTR [rax+0x8]
  40c6dd:	je     40c708 <flatcc_json_parser_union_vector@@Base+0x98>
  40c6df:	add    rcx,0xffffffffffffffff
  40c6e3:	mov    QWORD PTR [rax+0x8],rcx
  40c6e7:	mov    rcx,QWORD PTR [rsi+rdx*8+0x20]
  40c6ec:	mov    r8d,DWORD PTR [rsi+rdx*8+0x18]
  40c6f1:	movzx  r9d,r12w
  40c6f5:	mov    rdi,rbx
  40c6f8:	mov    rsi,r15
  40c6fb:	mov    rdx,r14
  40c6fe:	pop    rbx
  40c6ff:	pop    r12
  40c701:	pop    r14
  40c703:	pop    r15
  40c705:	pop    rbp
  40c706:	jmp    40c750 <flatcc_json_parser_union_vector@@Base+0xe0>
  40c708:	lea    rdi,[rax+rdx*8]
  40c70c:	add    rdi,0x10
  40c710:	add    rcx,0x1
  40c714:	mov    QWORD PTR [rax+0x8],rcx
  40c718:	mov    eax,DWORD PTR [rbx+0x18]
  40c71b:	mov    DWORD PTR [rsi+rdx*8+0x10],eax
  40c71f:	mov    rax,QWORD PTR [rbx+0x8]
  40c723:	mov    QWORD PTR [rsi+rdx*8+0x8],rax
  40c728:	mov    QWORD PTR [rdi],r15
  40c72b:	mov    rdi,rbx
  40c72e:	mov    rsi,r15
  40c731:	mov    rdx,r14
  40c734:	pop    rbx
  40c735:	pop    r12
  40c737:	pop    r14
  40c739:	pop    r15
  40c73b:	pop    rbp
  40c73c:	jmp    40a360 <flatcc_json_parser_generic_json@@Base>
  40c741:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c74b:	nop    DWORD PTR [rax+rax*1+0x0]
  40c750:	push   rbp
  40c751:	push   r15
  40c753:	push   r14
  40c755:	push   r13
  40c757:	push   r12
  40c759:	push   rbx
  40c75a:	sub    rsp,0x18
  40c75e:	mov    r15d,r9d
  40c761:	mov    r13d,r8d
  40c764:	mov    r12,rcx
  40c767:	mov    r14,rdx
  40c76a:	mov    rbp,rsi
  40c76d:	mov    rbx,rdi
  40c770:	mov    DWORD PTR [rsp+0xc],0x0
  40c778:	mov    rdi,QWORD PTR [rdi]
  40c77b:	call   406350 <flatcc_builder_start_offset_vector@@Base>
  40c780:	test   eax,eax
  40c782:	je     40c79a <flatcc_json_parser_union_vector@@Base+0x12a>
  40c784:	cmp    DWORD PTR [rbx+0x20],0x0
  40c788:	jne    40c9cb <flatcc_json_parser_union_vector@@Base+0x35b>
  40c78e:	mov    DWORD PTR [rbx+0x20],0x21
  40c795:	jmp    40c9ba <flatcc_json_parser_union_vector@@Base+0x34a>
  40c79a:	cmp    rbp,r14
  40c79d:	je     40c7d0 <flatcc_json_parser_union_vector@@Base+0x160>
  40c79f:	cmp    BYTE PTR [rbp+0x0],0x5b
  40c7a3:	jne    40c7d0 <flatcc_json_parser_union_vector@@Base+0x160>
  40c7a5:	lea    rax,[rbp+0x1]
  40c7a9:	mov    rcx,r14
  40c7ac:	sub    rcx,rax
  40c7af:	cmp    rcx,0x2
  40c7b3:	mov    DWORD PTR [rsp+0x8],r15d
  40c7b8:	jl     40c7fd <flatcc_json_parser_union_vector@@Base+0x18d>
  40c7ba:	cmp    BYTE PTR [rax],0x20
  40c7bd:	jg     40c80b <flatcc_json_parser_union_vector@@Base+0x19b>
  40c7bf:	jne    40c7fd <flatcc_json_parser_union_vector@@Base+0x18d>
  40c7c1:	cmp    BYTE PTR [rbp+0x2],0x20
  40c7c5:	jle    40c7fd <flatcc_json_parser_union_vector@@Base+0x18d>
  40c7c7:	add    rbp,0x2
  40c7cb:	mov    rax,rbp
  40c7ce:	jmp    40c80b <flatcc_json_parser_union_vector@@Base+0x19b>
  40c7d0:	cmp    DWORD PTR [rbx+0x20],0x0
  40c7d4:	mov    rcx,r14
  40c7d7:	jne    40c9a1 <flatcc_json_parser_union_vector@@Base+0x331>
  40c7dd:	mov    DWORD PTR [rbx+0x20],0x16
  40c7e4:	mov    eax,DWORD PTR [rbx+0x8]
  40c7e7:	mov    ecx,ebp
  40c7e9:	sub    ecx,eax
  40c7eb:	add    ecx,0x1
  40c7ee:	mov    DWORD PTR [rbx+0x1c],ecx
  40c7f1:	mov    QWORD PTR [rbx+0x38],rbp
  40c7f5:	mov    rcx,r14
  40c7f8:	jmp    40c9a1 <flatcc_json_parser_union_vector@@Base+0x331>
  40c7fd:	mov    rdi,rbx
  40c800:	mov    rsi,rax
  40c803:	mov    rdx,r14
  40c806:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40c80b:	mov    r15,r14
  40c80e:	cmp    rax,r14
  40c811:	je     40c856 <flatcc_json_parser_union_vector@@Base+0x1e6>
  40c813:	cmp    BYTE PTR [rax],0x5d
  40c816:	jne    40c853 <flatcc_json_parser_union_vector@@Base+0x1e3>
  40c818:	lea    rcx,[rax+0x1]
  40c81c:	mov    rdx,r14
  40c81f:	sub    rdx,rcx
  40c822:	cmp    rdx,0x2
  40c826:	mov    r15d,DWORD PTR [rsp+0x8]
  40c82b:	jl     40c990 <flatcc_json_parser_union_vector@@Base+0x320>
  40c831:	cmp    BYTE PTR [rcx],0x20
  40c834:	jg     40c9a1 <flatcc_json_parser_union_vector@@Base+0x331>
  40c83a:	jne    40c990 <flatcc_json_parser_union_vector@@Base+0x320>
  40c840:	cmp    BYTE PTR [rax+0x2],0x20
  40c844:	jle    40c990 <flatcc_json_parser_union_vector@@Base+0x320>
  40c84a:	add    rax,0x2
  40c84e:	jmp    40c99e <flatcc_json_parser_union_vector@@Base+0x32e>
  40c853:	mov    r15,rax
  40c856:	test   r13d,r13d
  40c859:	je     40c96f <flatcc_json_parser_union_vector@@Base+0x2ff>
  40c85f:	mov    eax,r13d
  40c862:	mov    QWORD PTR [rsp+0x10],rax
  40c867:	xor    r13d,r13d
  40c86a:	nop    WORD PTR [rax+rax*1+0x0]
  40c870:	mov    rdi,QWORD PTR [rbx]
  40c873:	mov    rsi,r12
  40c876:	call   404e20 <flatcc_builder_get_user_frame_ptr@@Base>
  40c87b:	movzx  ecx,BYTE PTR [rax+r13*1]
  40c880:	mov    rdi,rbx
  40c883:	mov    rsi,r15
  40c886:	mov    rdx,r14
  40c889:	lea    r8,[rsp+0xc]
  40c88e:	call   QWORD PTR [rsp+0x50]
  40c892:	cmp    rax,r14
  40c895:	je     40c9cb <flatcc_json_parser_union_vector@@Base+0x35b>
  40c89b:	mov    rbp,rax
  40c89e:	mov    rdi,QWORD PTR [rbx]
  40c8a1:	mov    esi,0x1
  40c8a6:	call   405c50 <flatcc_builder_extend_offset_vector@@Base>
  40c8ab:	test   rax,rax
  40c8ae:	je     40c784 <flatcc_json_parser_union_vector@@Base+0x114>
  40c8b4:	mov    ecx,DWORD PTR [rsp+0xc]
  40c8b8:	mov    DWORD PTR [rax],ecx
  40c8ba:	mov    rax,r14
  40c8bd:	sub    rax,rbp
  40c8c0:	cmp    rax,0x2
  40c8c4:	mov    r15d,DWORD PTR [rsp+0x8]
  40c8c9:	jl     40c8e7 <flatcc_json_parser_union_vector@@Base+0x277>
  40c8cb:	cmp    BYTE PTR [rbp+0x0],0x20
  40c8cf:	jg     40c8f8 <flatcc_json_parser_union_vector@@Base+0x288>
  40c8d1:	jne    40c8e7 <flatcc_json_parser_union_vector@@Base+0x277>
  40c8d3:	cmp    BYTE PTR [rbp+0x1],0x20
  40c8d7:	jle    40c8e7 <flatcc_json_parser_union_vector@@Base+0x277>
  40c8d9:	add    rbp,0x1
  40c8dd:	cmp    rbp,r14
  40c8e0:	jne    40c901 <flatcc_json_parser_union_vector@@Base+0x291>
  40c8e2:	jmp    40c9dd <flatcc_json_parser_union_vector@@Base+0x36d>
  40c8e7:	mov    rdi,rbx
  40c8ea:	mov    rsi,rbp
  40c8ed:	mov    rdx,r14
  40c8f0:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40c8f5:	mov    rbp,rax
  40c8f8:	cmp    rbp,r14
  40c8fb:	je     40c9dd <flatcc_json_parser_union_vector@@Base+0x36d>
  40c901:	movzx  eax,BYTE PTR [rbp+0x0]
  40c905:	cmp    al,0x2c
  40c907:	jne    40c9e5 <flatcc_json_parser_union_vector@@Base+0x375>
  40c90d:	lea    r15,[rbp+0x1]
  40c911:	mov    rax,r14
  40c914:	sub    rax,r15
  40c917:	cmp    rax,0x2
  40c91b:	jl     40c93c <flatcc_json_parser_union_vector@@Base+0x2cc>
  40c91d:	cmp    BYTE PTR [r15],0x20
  40c921:	jg     40c94d <flatcc_json_parser_union_vector@@Base+0x2dd>
  40c923:	jne    40c93c <flatcc_json_parser_union_vector@@Base+0x2cc>
  40c925:	cmp    BYTE PTR [rbp+0x2],0x20
  40c929:	jle    40c93c <flatcc_json_parser_union_vector@@Base+0x2cc>
  40c92b:	add    rbp,0x2
  40c92f:	mov    r15,rbp
  40c932:	cmp    r15,r14
  40c935:	jne    40c956 <flatcc_json_parser_union_vector@@Base+0x2e6>
  40c937:	jmp    40ca26 <flatcc_json_parser_union_vector@@Base+0x3b6>
  40c93c:	mov    rdi,rbx
  40c93f:	mov    rsi,r15
  40c942:	mov    rdx,r14
  40c945:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40c94a:	mov    r15,rax
  40c94d:	cmp    r15,r14
  40c950:	je     40ca26 <flatcc_json_parser_union_vector@@Base+0x3b6>
  40c956:	cmp    BYTE PTR [r15],0x5d
  40c95a:	je     40ca56 <flatcc_json_parser_union_vector@@Base+0x3e6>
  40c960:	add    r13,0x1
  40c964:	cmp    QWORD PTR [rsp+0x10],r13
  40c969:	jne    40c870 <flatcc_json_parser_union_vector@@Base+0x200>
  40c96f:	cmp    DWORD PTR [rbx+0x20],0x0
  40c973:	jne    40c9cb <flatcc_json_parser_union_vector@@Base+0x35b>
  40c975:	mov    DWORD PTR [rbx+0x20],0x1e
  40c97c:	mov    eax,DWORD PTR [rbx+0x8]
  40c97f:	mov    ecx,r15d
  40c982:	sub    ecx,eax
  40c984:	add    ecx,0x1
  40c987:	mov    DWORD PTR [rbx+0x1c],ecx
  40c98a:	mov    QWORD PTR [rbx+0x38],r15
  40c98e:	jmp    40c9cb <flatcc_json_parser_union_vector@@Base+0x35b>
  40c990:	mov    rdi,rbx
  40c993:	mov    rsi,rcx
  40c996:	mov    rdx,r14
  40c999:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40c99e:	mov    rcx,rax
  40c9a1:	mov    rbp,rcx
  40c9a4:	test   r13d,r13d
  40c9a7:	je     40cadb <flatcc_json_parser_union_vector@@Base+0x46b>
  40c9ad:	cmp    DWORD PTR [rbx+0x20],0x0
  40c9b1:	jne    40c9cb <flatcc_json_parser_union_vector@@Base+0x35b>
  40c9b3:	mov    DWORD PTR [rbx+0x20],0x1e
  40c9ba:	mov    eax,DWORD PTR [rbx+0x8]
  40c9bd:	mov    ecx,ebp
  40c9bf:	sub    ecx,eax
  40c9c1:	add    ecx,0x1
  40c9c4:	mov    DWORD PTR [rbx+0x1c],ecx
  40c9c7:	mov    QWORD PTR [rbx+0x38],rbp
  40c9cb:	mov    rax,r14
  40c9ce:	add    rsp,0x18
  40c9d2:	pop    rbx
  40c9d3:	pop    r12
  40c9d5:	pop    r13
  40c9d7:	pop    r14
  40c9d9:	pop    r15
  40c9db:	pop    rbp
  40c9dc:	ret    
  40c9dd:	mov    rax,r14
  40c9e0:	jmp    40cac6 <flatcc_json_parser_union_vector@@Base+0x456>
  40c9e5:	cmp    al,0x5d
  40c9e7:	jne    40ca92 <flatcc_json_parser_union_vector@@Base+0x422>
  40c9ed:	lea    rax,[rbp+0x1]
  40c9f1:	mov    rcx,r14
  40c9f4:	sub    rcx,rax
  40c9f7:	cmp    rcx,0x2
  40c9fb:	jl     40cab8 <flatcc_json_parser_union_vector@@Base+0x448>
  40ca01:	cmp    BYTE PTR [rax],0x20
  40ca04:	jg     40cac6 <flatcc_json_parser_union_vector@@Base+0x456>
  40ca0a:	jne    40cab8 <flatcc_json_parser_union_vector@@Base+0x448>
  40ca10:	cmp    BYTE PTR [rbp+0x2],0x20
  40ca14:	jle    40cab8 <flatcc_json_parser_union_vector@@Base+0x448>
  40ca1a:	add    rbp,0x2
  40ca1e:	mov    rax,rbp
  40ca21:	jmp    40cac6 <flatcc_json_parser_union_vector@@Base+0x456>
  40ca26:	cmp    DWORD PTR [rbx+0x20],0x0
  40ca2a:	mov    rax,r14
  40ca2d:	mov    r15d,DWORD PTR [rsp+0x8]
  40ca32:	jne    40cac6 <flatcc_json_parser_union_vector@@Base+0x456>
  40ca38:	mov    DWORD PTR [rbx+0x20],0x9
  40ca3f:	mov    eax,DWORD PTR [rbx+0x8]
  40ca42:	mov    ecx,r14d
  40ca45:	sub    ecx,eax
  40ca47:	add    ecx,0x1
  40ca4a:	mov    DWORD PTR [rbx+0x1c],ecx
  40ca4d:	mov    QWORD PTR [rbx+0x38],r14
  40ca51:	mov    rax,r14
  40ca54:	jmp    40cac6 <flatcc_json_parser_union_vector@@Base+0x456>
  40ca56:	lea    rax,[r15+0x1]
  40ca5a:	mov    rcx,r14
  40ca5d:	sub    rcx,rax
  40ca60:	cmp    rcx,0x2
  40ca64:	jl     40ca7d <flatcc_json_parser_union_vector@@Base+0x40d>
  40ca66:	cmp    BYTE PTR [rax],0x20
  40ca69:	jg     40ca8b <flatcc_json_parser_union_vector@@Base+0x41b>
  40ca6b:	jne    40ca7d <flatcc_json_parser_union_vector@@Base+0x40d>
  40ca6d:	cmp    BYTE PTR [r15+0x2],0x20
  40ca72:	jle    40ca7d <flatcc_json_parser_union_vector@@Base+0x40d>
  40ca74:	add    r15,0x2
  40ca78:	mov    rax,r15
  40ca7b:	jmp    40ca8b <flatcc_json_parser_union_vector@@Base+0x41b>
  40ca7d:	mov    rdi,rbx
  40ca80:	mov    rsi,rax
  40ca83:	mov    rdx,r14
  40ca86:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40ca8b:	mov    r15d,DWORD PTR [rsp+0x8]
  40ca90:	jmp    40cac6 <flatcc_json_parser_union_vector@@Base+0x456>
  40ca92:	cmp    DWORD PTR [rbx+0x20],0x0
  40ca96:	mov    rax,r14
  40ca99:	jne    40cac6 <flatcc_json_parser_union_vector@@Base+0x456>
  40ca9b:	mov    DWORD PTR [rbx+0x20],0x9
  40caa2:	mov    eax,DWORD PTR [rbx+0x8]
  40caa5:	mov    ecx,ebp
  40caa7:	sub    ecx,eax
  40caa9:	add    ecx,0x1
  40caac:	mov    DWORD PTR [rbx+0x1c],ecx
  40caaf:	mov    QWORD PTR [rbx+0x38],rbp
  40cab3:	mov    rax,r14
  40cab6:	jmp    40cac6 <flatcc_json_parser_union_vector@@Base+0x456>
  40cab8:	mov    rdi,rbx
  40cabb:	mov    rsi,rax
  40cabe:	mov    rdx,r14
  40cac1:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40cac6:	mov    rcx,QWORD PTR [rsp+0x10]
  40cacb:	add    rcx,0xffffffffffffffff
  40cacf:	mov    rbp,rax
  40cad2:	cmp    rcx,r13
  40cad5:	jne    40c9ad <flatcc_json_parser_union_vector@@Base+0x33d>
  40cadb:	mov    rdi,QWORD PTR [rbx]
  40cade:	mov    rsi,r12
  40cae1:	call   404e20 <flatcc_builder_get_user_frame_ptr@@Base>
  40cae6:	mov    rdi,QWORD PTR [rbx]
  40cae9:	mov    rsi,rax
  40caec:	call   407790 <flatcc_builder_end_offset_vector_for_unions@@Base>
  40caf1:	mov    DWORD PTR [rsp+0xc],eax
  40caf5:	test   eax,eax
  40caf7:	je     40c784 <flatcc_json_parser_union_vector@@Base+0x114>
  40cafd:	mov    rdi,QWORD PTR [rbx]
  40cb00:	movzx  esi,r15w
  40cb04:	call   407960 <flatcc_builder_table_add_offset@@Base>
  40cb09:	test   rax,rax
  40cb0c:	je     40c784 <flatcc_json_parser_union_vector@@Base+0x114>
  40cb12:	mov    ecx,DWORD PTR [rsp+0xc]
  40cb16:	mov    DWORD PTR [rax],ecx
  40cb18:	mov    r14,rbp
  40cb1b:	jmp    40c9cb <flatcc_json_parser_union_vector@@Base+0x35b>

000000000040cb20 <flatcc_json_parser_union_type_vector@@Base>:
  40cb20:	push   rbp
  40cb21:	push   r15
  40cb23:	push   r14
  40cb25:	push   r13
  40cb27:	push   r12
  40cb29:	push   rbx
  40cb2a:	sub    rsp,0x48
  40cb2e:	mov    r12,r9
  40cb31:	mov    ebx,r8d
  40cb34:	mov    rbp,rcx
  40cb37:	mov    QWORD PTR [rsp+0x18],rdx
  40cb3c:	mov    r14,rsi
  40cb3f:	mov    r13,rdi
  40cb42:	mov    rdi,QWORD PTR [rdi]
  40cb45:	mov    rsi,r9
  40cb48:	call   404e20 <flatcc_builder_get_user_frame_ptr@@Base>
  40cb4d:	lea    rbp,[rbp+rbp*4+0x0]
  40cb52:	cmp    BYTE PTR [rax+rbp*8+0x24],0x0
  40cb57:	je     40cb86 <flatcc_json_parser_union_type_vector@@Base+0x66>
  40cb59:	cmp    DWORD PTR [r13+0x20],0x0
  40cb5e:	jne    40cb7c <flatcc_json_parser_union_type_vector@@Base+0x5c>
  40cb60:	mov    DWORD PTR [r13+0x20],0x1c
  40cb68:	mov    eax,DWORD PTR [r13+0x8]
  40cb6c:	mov    ecx,r14d
  40cb6f:	sub    ecx,eax
  40cb71:	add    ecx,0x1
  40cb74:	mov    DWORD PTR [r13+0x1c],ecx
  40cb78:	mov    QWORD PTR [r13+0x38],r14
  40cb7c:	mov    r15,QWORD PTR [rsp+0x18]
  40cb81:	jmp    40d169 <flatcc_json_parser_union_type_vector@@Base+0x649>
  40cb86:	mov    r15,rax
  40cb89:	lea    rax,[rax+rbp*8]
  40cb8d:	add    rax,0x24
  40cb91:	mov    BYTE PTR [rax],0x1
  40cb94:	mov    QWORD PTR [rsp+0x20],r13
  40cb99:	mov    rdi,QWORD PTR [r13+0x0]
  40cb9d:	mov    esi,0x1
  40cba2:	mov    edx,0x1
  40cba7:	mov    ecx,0xffffffff
  40cbac:	call   4062d0 <flatcc_builder_start_vector@@Base>
  40cbb1:	test   eax,eax
  40cbb3:	je     40cbd2 <flatcc_json_parser_union_type_vector@@Base+0xb2>
  40cbb5:	mov    r15,QWORD PTR [rsp+0x18]
  40cbba:	mov    rsi,r14
  40cbbd:	mov    r13,QWORD PTR [rsp+0x20]
  40cbc2:	cmp    DWORD PTR [r13+0x20],0x0
  40cbc7:	jne    40d169 <flatcc_json_parser_union_type_vector@@Base+0x649>
  40cbcd:	jmp    40d14e <flatcc_json_parser_union_type_vector@@Base+0x62e>
  40cbd2:	mov    QWORD PTR [rsp+0x40],r15
  40cbd7:	cmp    r14,QWORD PTR [rsp+0x18]
  40cbdc:	mov    QWORD PTR [rsp+0x28],rbp
  40cbe1:	mov    QWORD PTR [rsp+0x38],r12
  40cbe6:	mov    DWORD PTR [rsp+0x34],ebx
  40cbea:	je     40cc10 <flatcc_json_parser_union_type_vector@@Base+0xf0>
  40cbec:	cmp    BYTE PTR [r14],0x5b
  40cbf0:	jne    40cc10 <flatcc_json_parser_union_type_vector@@Base+0xf0>
  40cbf2:	lea    rax,[r14+0x1]
  40cbf6:	mov    rcx,QWORD PTR [rsp+0x18]
  40cbfb:	sub    rcx,rax
  40cbfe:	cmp    rcx,0x2
  40cc02:	jl     40cc68 <flatcc_json_parser_union_type_vector@@Base+0x148>
  40cc04:	cmp    BYTE PTR [rax],0x20
  40cc07:	jle    40cc51 <flatcc_json_parser_union_type_vector@@Base+0x131>
  40cc09:	mov    r13,QWORD PTR [rsp+0x18]
  40cc0e:	jmp    40cc7d <flatcc_json_parser_union_type_vector@@Base+0x15d>
  40cc10:	mov    r13,QWORD PTR [rsp+0x20]
  40cc15:	cmp    DWORD PTR [r13+0x20],0x0
  40cc1a:	mov    r15,QWORD PTR [rsp+0x18]
  40cc1f:	mov    rdx,r15
  40cc22:	mov    rbp,QWORD PTR [rsp+0x28]
  40cc27:	jne    40d020 <flatcc_json_parser_union_type_vector@@Base+0x500>
  40cc2d:	mov    DWORD PTR [r13+0x20],0x16
  40cc35:	mov    eax,DWORD PTR [r13+0x8]
  40cc39:	mov    ecx,r14d
  40cc3c:	sub    ecx,eax
  40cc3e:	add    ecx,0x1
  40cc41:	mov    DWORD PTR [r13+0x1c],ecx
  40cc45:	mov    QWORD PTR [r13+0x38],r14
  40cc49:	mov    rdx,r15
  40cc4c:	jmp    40d020 <flatcc_json_parser_union_type_vector@@Base+0x500>
  40cc51:	jne    40cc68 <flatcc_json_parser_union_type_vector@@Base+0x148>
  40cc53:	cmp    BYTE PTR [r14+0x2],0x20
  40cc58:	jle    40cc68 <flatcc_json_parser_union_type_vector@@Base+0x148>
  40cc5a:	add    r14,0x2
  40cc5e:	mov    rax,r14
  40cc61:	mov    r13,QWORD PTR [rsp+0x18]
  40cc66:	jmp    40cc7d <flatcc_json_parser_union_type_vector@@Base+0x15d>
  40cc68:	mov    rdi,QWORD PTR [rsp+0x20]
  40cc6d:	mov    rsi,rax
  40cc70:	mov    r13,QWORD PTR [rsp+0x18]
  40cc75:	mov    rdx,r13
  40cc78:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40cc7d:	mov    rcx,r13
  40cc80:	cmp    rax,r13
  40cc83:	mov    r13,QWORD PTR [rsp+0x20]
  40cc88:	je     40ccd2 <flatcc_json_parser_union_type_vector@@Base+0x1b2>
  40cc8a:	cmp    BYTE PTR [rax],0x5d
  40cc8d:	jne    40cccf <flatcc_json_parser_union_type_vector@@Base+0x1af>
  40cc8f:	lea    rdx,[rax+0x1]
  40cc93:	mov    r15,QWORD PTR [rsp+0x18]
  40cc98:	mov    rcx,r15
  40cc9b:	sub    rcx,rdx
  40cc9e:	cmp    rcx,0x2
  40cca2:	mov    rbp,QWORD PTR [rsp+0x28]
  40cca7:	jl     40d00f <flatcc_json_parser_union_type_vector@@Base+0x4ef>
  40ccad:	cmp    BYTE PTR [rdx],0x20
  40ccb0:	jg     40d020 <flatcc_json_parser_union_type_vector@@Base+0x500>
  40ccb6:	jne    40d00f <flatcc_json_parser_union_type_vector@@Base+0x4ef>
  40ccbc:	cmp    BYTE PTR [rax+0x2],0x20
  40ccc0:	jle    40d00f <flatcc_json_parser_union_type_vector@@Base+0x4ef>
  40ccc6:	add    rax,0x2
  40ccca:	jmp    40d01d <flatcc_json_parser_union_type_vector@@Base+0x4fd>
  40cccf:	mov    rcx,rax
  40ccd2:	mov    rbp,rcx
  40ccd5:	mov    rdi,QWORD PTR [r13+0x0]
  40ccd9:	mov    esi,0x1
  40ccde:	call   405960 <flatcc_builder_extend_vector@@Base>
  40cce3:	test   rax,rax
  40cce6:	je     40cf78 <flatcc_json_parser_union_type_vector@@Base+0x458>
  40ccec:	mov    rbx,rax
  40ccef:	mov    r14,QWORD PTR [rsp+0x90]
  40ccf7:	mov    r15,QWORD PTR [rsp+0x18]
  40ccfc:	mov    rsi,rbp
  40ccff:	mov    BYTE PTR [rsp+0x17],0x0
  40cd04:	cmp    rsi,r15
  40cd07:	je     40ce3a <flatcc_json_parser_union_type_vector@@Base+0x31a>
  40cd0d:	mov    al,BYTE PTR [rsi]
  40cd0f:	xor    r12d,r12d
  40cd12:	cmp    al,0x2d
  40cd14:	sete   r12b
  40cd18:	add    r12,rsi
  40cd1b:	xor    ebp,ebp
  40cd1d:	cmp    r12,r15
  40cd20:	je     40cd75 <flatcc_json_parser_union_type_vector@@Base+0x255>
  40cd22:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40cd2c:	nop    DWORD PTR [rax+0x0]
  40cd30:	movsx  rcx,BYTE PTR [r12]
  40cd35:	mov    edx,ecx
  40cd37:	add    dl,0xd0
  40cd3a:	cmp    dl,0x9
  40cd3d:	ja     40cd81 <flatcc_json_parser_union_type_vector@@Base+0x261>
  40cd3f:	lea    rdx,[rbp*4+0x0]
  40cd47:	add    rdx,rbp
  40cd4a:	lea    rdx,[rcx+rdx*2]
  40cd4e:	add    rdx,0xffffffffffffffd0
  40cd52:	cmp    rbp,rdx
  40cd55:	ja     40cdbc <flatcc_json_parser_union_type_vector@@Base+0x29c>
  40cd57:	add    r12,0x1
  40cd5b:	mov    rbp,rdx
  40cd5e:	cmp    r15,r12
  40cd61:	jne    40cd30 <flatcc_json_parser_union_type_vector@@Base+0x210>
  40cd63:	xor    ecx,ecx
  40cd65:	mov    r12,r15
  40cd68:	mov    rbp,rdx
  40cd6b:	cmp    r12,rsi
  40cd6e:	jne    40cd88 <flatcc_json_parser_union_type_vector@@Base+0x268>
  40cd70:	jmp    40cdfe <flatcc_json_parser_union_type_vector@@Base+0x2de>
  40cd75:	mov    r12,r15
  40cd78:	xor    ecx,ecx
  40cd7a:	cmp    r12,rsi
  40cd7d:	jne    40cd88 <flatcc_json_parser_union_type_vector@@Base+0x268>
  40cd7f:	jmp    40cdfe <flatcc_json_parser_union_type_vector@@Base+0x2de>
  40cd81:	mov    cl,0x1
  40cd83:	cmp    r12,rsi
  40cd86:	je     40cdfe <flatcc_json_parser_union_type_vector@@Base+0x2de>
  40cd88:	test   cl,cl
  40cd8a:	je     40cde4 <flatcc_json_parser_union_type_vector@@Base+0x2c4>
  40cd8c:	mov    cl,BYTE PTR [r12]
  40cd90:	add    cl,0xd2
  40cd93:	cmp    cl,0x37
  40cd96:	ja     40cde4 <flatcc_json_parser_union_type_vector@@Base+0x2c4>
  40cd98:	movzx  ecx,cl
  40cd9b:	movabs rdx,0x80000000800001
  40cda5:	bt     rdx,rcx
  40cda9:	jae    40cde4 <flatcc_json_parser_union_type_vector@@Base+0x2c4>
  40cdab:	cmp    DWORD PTR [r13+0x20],0x0
  40cdb0:	jne    40cddf <flatcc_json_parser_union_type_vector@@Base+0x2bf>
  40cdb2:	mov    DWORD PTR [r13+0x20],0xc
  40cdba:	jmp    40cdcb <flatcc_json_parser_union_type_vector@@Base+0x2ab>
  40cdbc:	cmp    DWORD PTR [r13+0x20],0x0
  40cdc1:	jne    40cddf <flatcc_json_parser_union_type_vector@@Base+0x2bf>
  40cdc3:	mov    DWORD PTR [r13+0x20],0x8
  40cdcb:	mov    ecx,DWORD PTR [r13+0x8]
  40cdcf:	mov    edx,r12d
  40cdd2:	sub    edx,ecx
  40cdd4:	add    edx,0x1
  40cdd7:	mov    DWORD PTR [r13+0x1c],edx
  40cddb:	mov    QWORD PTR [r13+0x38],r12
  40cddf:	xor    ebp,ebp
  40cde1:	mov    r12,r15
  40cde4:	cmp    r12,rsi
  40cde7:	je     40cdfe <flatcc_json_parser_union_type_vector@@Base+0x2de>
  40cde9:	cmp    al,0x2d
  40cdeb:	jne    40ce0a <flatcc_json_parser_union_type_vector@@Base+0x2ea>
  40cded:	cmp    DWORD PTR [r13+0x20],0x0
  40cdf2:	jne    40ce3a <flatcc_json_parser_union_type_vector@@Base+0x31a>
  40cdf4:	mov    DWORD PTR [r13+0x20],0x8
  40cdfc:	jmp    40ce26 <flatcc_json_parser_union_type_vector@@Base+0x306>
  40cdfe:	xor    ebp,ebp
  40ce00:	mov    r12,rsi
  40ce03:	cmp    rsi,r12
  40ce06:	jne    40ce79 <flatcc_json_parser_union_type_vector@@Base+0x359>
  40ce08:	jmp    40ce44 <flatcc_json_parser_union_type_vector@@Base+0x324>
  40ce0a:	cmp    rbp,0x100
  40ce11:	jb     40cf65 <flatcc_json_parser_union_type_vector@@Base+0x445>
  40ce17:	cmp    DWORD PTR [r13+0x20],0x0
  40ce1c:	jne    40ce3a <flatcc_json_parser_union_type_vector@@Base+0x31a>
  40ce1e:	mov    DWORD PTR [r13+0x20],0x7
  40ce26:	mov    eax,DWORD PTR [r13+0x8]
  40ce2a:	mov    ecx,r12d
  40ce2d:	sub    ecx,eax
  40ce2f:	add    ecx,0x1
  40ce32:	mov    DWORD PTR [r13+0x1c],ecx
  40ce36:	mov    QWORD PTR [r13+0x38],r12
  40ce3a:	xor    ebp,ebp
  40ce3c:	mov    r12,r15
  40ce3f:	cmp    rsi,r12
  40ce42:	jne    40ce79 <flatcc_json_parser_union_type_vector@@Base+0x359>
  40ce44:	mov    rdi,r13
  40ce47:	mov    rbp,rsi
  40ce4a:	mov    rdx,r15
  40ce4d:	mov    rcx,QWORD PTR [rsp+0x80]
  40ce55:	lea    r8,[rsp+0x17]
  40ce5a:	call   40c470 <flatcc_json_parser_union_type@@Base+0x2d0>
  40ce5f:	mov    r12,rax
  40ce62:	cmp    rax,rbp
  40ce65:	je     40d1ba <flatcc_json_parser_union_type_vector@@Base+0x69a>
  40ce6b:	cmp    r12,r15
  40ce6e:	je     40d1ba <flatcc_json_parser_union_type_vector@@Base+0x69a>
  40ce74:	mov    bpl,BYTE PTR [rsp+0x17]
  40ce79:	movzx  edi,bpl
  40ce7d:	call   r14
  40ce80:	test   eax,eax
  40ce82:	jne    40ce96 <flatcc_json_parser_union_type_vector@@Base+0x376>
  40ce84:	test   BYTE PTR [r13+0x10],0x1
  40ce89:	je     40d1c6 <flatcc_json_parser_union_type_vector@@Base+0x6a6>
  40ce8f:	mov    BYTE PTR [rsp+0x17],0x0
  40ce94:	xor    ebp,ebp
  40ce96:	mov    BYTE PTR [rbx],bpl
  40ce99:	mov    rax,r15
  40ce9c:	sub    rax,r12
  40ce9f:	cmp    rax,0x2
  40cea3:	mov    rbp,QWORD PTR [rsp+0x28]
  40cea8:	jl     40cec9 <flatcc_json_parser_union_type_vector@@Base+0x3a9>
  40ceaa:	cmp    BYTE PTR [r12],0x20
  40ceaf:	jg     40ceda <flatcc_json_parser_union_type_vector@@Base+0x3ba>
  40ceb1:	jne    40cec9 <flatcc_json_parser_union_type_vector@@Base+0x3a9>
  40ceb3:	cmp    BYTE PTR [r12+0x1],0x20
  40ceb9:	jle    40cec9 <flatcc_json_parser_union_type_vector@@Base+0x3a9>
  40cebb:	add    r12,0x1
  40cebf:	cmp    r12,r15
  40cec2:	jne    40cee3 <flatcc_json_parser_union_type_vector@@Base+0x3c3>
  40cec4:	jmp    40cf90 <flatcc_json_parser_union_type_vector@@Base+0x470>
  40cec9:	mov    rdi,r13
  40cecc:	mov    rsi,r12
  40cecf:	mov    rdx,r15
  40ced2:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40ced7:	mov    r12,rax
  40ceda:	cmp    r12,r15
  40cedd:	je     40cf90 <flatcc_json_parser_union_type_vector@@Base+0x470>
  40cee3:	mov    al,BYTE PTR [r12]
  40cee7:	cmp    al,0x2c
  40cee9:	jne    40cf98 <flatcc_json_parser_union_type_vector@@Base+0x478>
  40ceef:	lea    rax,[r12+0x1]
  40cef4:	mov    rcx,r15
  40cef7:	sub    rcx,rax
  40cefa:	cmp    rcx,0x2
  40cefe:	jl     40cf20 <flatcc_json_parser_union_type_vector@@Base+0x400>
  40cf00:	cmp    BYTE PTR [rax],0x20
  40cf03:	jg     40cf2e <flatcc_json_parser_union_type_vector@@Base+0x40e>
  40cf05:	jne    40cf20 <flatcc_json_parser_union_type_vector@@Base+0x400>
  40cf07:	cmp    BYTE PTR [r12+0x2],0x20
  40cf0d:	jle    40cf20 <flatcc_json_parser_union_type_vector@@Base+0x400>
  40cf0f:	add    r12,0x2
  40cf13:	mov    rax,r12
  40cf16:	cmp    rax,r15
  40cf19:	jne    40cf37 <flatcc_json_parser_union_type_vector@@Base+0x417>
  40cf1b:	jmp    40cfc9 <flatcc_json_parser_union_type_vector@@Base+0x4a9>
  40cf20:	mov    rdi,r13
  40cf23:	mov    rsi,rax
  40cf26:	mov    rdx,r15
  40cf29:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40cf2e:	cmp    rax,r15
  40cf31:	je     40cfc9 <flatcc_json_parser_union_type_vector@@Base+0x4a9>
  40cf37:	cmp    BYTE PTR [rax],0x5d
  40cf3a:	je     40cff4 <flatcc_json_parser_union_type_vector@@Base+0x4d4>
  40cf40:	mov    rdi,QWORD PTR [r13+0x0]
  40cf44:	mov    rbx,rax
  40cf47:	mov    esi,0x1
  40cf4c:	call   405960 <flatcc_builder_extend_vector@@Base>
  40cf51:	mov    rsi,rbx
  40cf54:	mov    rbx,rax
  40cf57:	test   rax,rax
  40cf5a:	jne    40ccff <flatcc_json_parser_union_type_vector@@Base+0x1df>
  40cf60:	jmp    40d147 <flatcc_json_parser_union_type_vector@@Base+0x627>
  40cf65:	mov    BYTE PTR [rsp+0x17],bpl
  40cf6a:	cmp    rsi,r12
  40cf6d:	jne    40ce79 <flatcc_json_parser_union_type_vector@@Base+0x359>
  40cf73:	jmp    40ce44 <flatcc_json_parser_union_type_vector@@Base+0x324>
  40cf78:	mov    r15,QWORD PTR [rsp+0x18]
  40cf7d:	mov    rsi,rbp
  40cf80:	cmp    DWORD PTR [r13+0x20],0x0
  40cf85:	jne    40d169 <flatcc_json_parser_union_type_vector@@Base+0x649>
  40cf8b:	jmp    40d14e <flatcc_json_parser_union_type_vector@@Base+0x62e>
  40cf90:	mov    rdx,r15
  40cf93:	jmp    40d020 <flatcc_json_parser_union_type_vector@@Base+0x500>
  40cf98:	cmp    al,0x5d
  40cf9a:	jne    40d188 <flatcc_json_parser_union_type_vector@@Base+0x668>
  40cfa0:	lea    rdx,[r12+0x1]
  40cfa5:	mov    rax,r15
  40cfa8:	sub    rax,rdx
  40cfab:	cmp    rax,0x2
  40cfaf:	jl     40d00f <flatcc_json_parser_union_type_vector@@Base+0x4ef>
  40cfb1:	cmp    BYTE PTR [rdx],0x20
  40cfb4:	jg     40d020 <flatcc_json_parser_union_type_vector@@Base+0x500>
  40cfb6:	jne    40d00f <flatcc_json_parser_union_type_vector@@Base+0x4ef>
  40cfb8:	cmp    BYTE PTR [r12+0x2],0x20
  40cfbe:	jle    40d00f <flatcc_json_parser_union_type_vector@@Base+0x4ef>
  40cfc0:	add    r12,0x2
  40cfc4:	mov    rdx,r12
  40cfc7:	jmp    40d020 <flatcc_json_parser_union_type_vector@@Base+0x500>
  40cfc9:	cmp    DWORD PTR [r13+0x20],0x0
  40cfce:	mov    rdx,r15
  40cfd1:	jne    40d020 <flatcc_json_parser_union_type_vector@@Base+0x500>
  40cfd3:	mov    DWORD PTR [r13+0x20],0x9
  40cfdb:	mov    eax,DWORD PTR [r13+0x8]
  40cfdf:	mov    ecx,r15d
  40cfe2:	sub    ecx,eax
  40cfe4:	add    ecx,0x1
  40cfe7:	mov    DWORD PTR [r13+0x1c],ecx
  40cfeb:	mov    QWORD PTR [r13+0x38],r15
  40cfef:	mov    rdx,r15
  40cff2:	jmp    40d020 <flatcc_json_parser_union_type_vector@@Base+0x500>
  40cff4:	lea    rdx,[rax+0x1]
  40cff8:	mov    rcx,r15
  40cffb:	sub    rcx,rdx
  40cffe:	cmp    rcx,0x2
  40d002:	jl     40d00f <flatcc_json_parser_union_type_vector@@Base+0x4ef>
  40d004:	cmp    BYTE PTR [rdx],0x20
  40d007:	jg     40d020 <flatcc_json_parser_union_type_vector@@Base+0x500>
  40d009:	je     40ccbc <flatcc_json_parser_union_type_vector@@Base+0x19c>
  40d00f:	mov    rdi,r13
  40d012:	mov    rsi,rdx
  40d015:	mov    rdx,r15
  40d018:	call   409c10 <flatcc_json_parser_space_ext@@Base>
  40d01d:	mov    rdx,rax
  40d020:	mov    QWORD PTR [rsp+0x18],rdx
  40d025:	mov    rbx,QWORD PTR [rsp+0x40]
  40d02a:	add    rbx,0x10
  40d02e:	mov    rdi,QWORD PTR [r13+0x0]
  40d032:	call   407530 <flatcc_builder_vector_count@@Base>
  40d037:	mov    r12,rax
  40d03a:	mov    DWORD PTR [rbx+rbp*8+0x18],r12d
  40d03f:	mov    rbx,r13
  40d042:	mov    r13d,r12d
  40d045:	mov    rdi,QWORD PTR [rbx]
  40d048:	mov    rsi,r13
  40d04b:	call   404c90 <flatcc_builder_enter_user_frame@@Base>
  40d050:	mov    r14,rax
  40d053:	mov    rdi,QWORD PTR [rbx]
  40d056:	mov    rsi,rax
  40d059:	call   404e20 <flatcc_builder_get_user_frame_ptr@@Base>
  40d05e:	mov    rbp,rax
  40d061:	mov    rdi,QWORD PTR [rbx]
  40d064:	call   407540 <flatcc_builder_vector_edit@@Base>
  40d069:	mov    rdi,rbp
  40d06c:	mov    rsi,rax
  40d06f:	mov    rdx,r13
  40d072:	call   4030b0 <memcpy@plt>
  40d077:	mov    rdi,QWORD PTR [rbx]
  40d07a:	call   407460 <flatcc_builder_end_vector@@Base>
  40d07f:	test   eax,eax
  40d081:	je     40d13f <flatcc_json_parser_union_type_vector@@Base+0x61f>
  40d087:	mov    r13d,eax
  40d08a:	mov    rdi,QWORD PTR [rbx]
  40d08d:	movzx  ebp,WORD PTR [rsp+0x34]
  40d092:	lea    esi,[rbp-0x1]
  40d095:	call   407960 <flatcc_builder_table_add_offset@@Base>
  40d09a:	test   rax,rax
  40d09d:	je     40d13f <flatcc_json_parser_union_type_vector@@Base+0x61f>
  40d0a3:	mov    DWORD PTR [rax],r13d
  40d0a6:	mov    rdi,QWORD PTR [rbx]
  40d0a9:	mov    rsi,QWORD PTR [rsp+0x38]
  40d0ae:	call   404e20 <flatcc_builder_get_user_frame_ptr@@Base>
  40d0b3:	mov    rcx,QWORD PTR [rsp+0x28]
  40d0b8:	mov    QWORD PTR [rax+rcx*8+0x30],r14
  40d0bd:	mov    rsi,QWORD PTR [rax+rcx*8+0x10]
  40d0c2:	mov    rcx,QWORD PTR [rax+0x8]
  40d0c6:	test   rsi,rsi
  40d0c9:	je     40d17b <flatcc_json_parser_union_type_vector@@Base+0x65b>
  40d0cf:	test   rcx,rcx
  40d0d2:	je     40d1ee <flatcc_json_parser_union_type_vector@@Base+0x6ce>
  40d0d8:	mov    r9,rbp
  40d0db:	mov    rdx,QWORD PTR [rsp+0x88]
  40d0e3:	mov    rdi,rax
  40d0e6:	add    rdi,0x10
  40d0ea:	add    rcx,0xffffffffffffffff
  40d0ee:	mov    QWORD PTR [rax+0x8],rcx
  40d0f2:	mov    eax,DWORD PTR [rbx+0x18]
  40d0f5:	mov    DWORD PTR [rsp+0x20],eax
  40d0f9:	mov    rbp,rbx
  40d0fc:	mov    r13,QWORD PTR [rbx+0x8]
  40d100:	mov    rcx,QWORD PTR [rsp+0x28]
  40d105:	mov    eax,DWORD PTR [rdi+rcx*8+0x10]
  40d109:	mov    DWORD PTR [rbx+0x18],eax
  40d10c:	mov    rax,QWORD PTR [rdi+rcx*8+0x8]
  40d111:	mov    QWORD PTR [rbx+0x8],rax
  40d115:	mov    QWORD PTR [rsp],rdx
  40d119:	mov    rdi,rbx
  40d11c:	mov    rdx,r15
  40d11f:	mov    rcx,r14
  40d122:	mov    r8d,r12d
  40d125:	call   40c750 <flatcc_json_parser_union_vector@@Base+0xe0>
  40d12a:	cmp    rax,r15
  40d12d:	je     40d169 <flatcc_json_parser_union_type_vector@@Base+0x649>
  40d12f:	mov    eax,DWORD PTR [rsp+0x20]
  40d133:	mov    DWORD PTR [rbp+0x18],eax
  40d136:	mov    QWORD PTR [rbp+0x8],r13
  40d13a:	jmp    40cb7c <flatcc_json_parser_union_type_vector@@Base+0x5c>
  40d13f:	mov    rsi,QWORD PTR [rsp+0x18]
  40d144:	mov    r13,rbx
  40d147:	cmp    DWORD PTR [r13+0x20],0x0
  40d14c:	jne    40d169 <flatcc_json_parser_union_type_vector@@Base+0x649>
  40d14e:	mov    DWORD PTR [r13+0x20],0x21
  40d156:	mov    eax,DWORD PTR [r13+0x8]
  40d15a:	mov    ecx,esi
  40d15c:	sub    ecx,eax
  40d15e:	add    ecx,0x1
  40d161:	mov    DWORD PTR [r13+0x1c],ecx
  40d165:	mov    QWORD PTR [r13+0x38],rsi
  40d169:	mov    rax,r15
  40d16c:	add    rsp,0x48
  40d170:	pop    rbx
  40d171:	pop    r12
  40d173:	pop    r13
  40d175:	pop    r14
  40d177:	pop    r15
  40d179:	pop    rbp
  40d17a:	ret    
  40d17b:	add    rcx,0x1
  40d17f:	mov    QWORD PTR [rax+0x8],rcx
  40d183:	jmp    40cb7c <flatcc_json_parser_union_type_vector@@Base+0x5c>
  40d188:	cmp    DWORD PTR [r13+0x20],0x0
  40d18d:	mov    rdx,r15
  40d190:	jne    40d020 <flatcc_json_parser_union_type_vector@@Base+0x500>
  40d196:	mov    DWORD PTR [r13+0x20],0x9
  40d19e:	mov    eax,DWORD PTR [r13+0x8]
  40d1a2:	mov    ecx,r12d
  40d1a5:	sub    ecx,eax
  40d1a7:	add    ecx,0x1
  40d1aa:	mov    DWORD PTR [r13+0x1c],ecx
  40d1ae:	mov    QWORD PTR [r13+0x38],r12
  40d1b2:	mov    rdx,r15
  40d1b5:	jmp    40d020 <flatcc_json_parser_union_type_vector@@Base+0x500>
  40d1ba:	mov    rsi,r12
  40d1bd:	cmp    DWORD PTR [r13+0x20],0x0
  40d1c2:	jne    40d169 <flatcc_json_parser_union_type_vector@@Base+0x649>
  40d1c4:	jmp    40d14e <flatcc_json_parser_union_type_vector@@Base+0x62e>
  40d1c6:	cmp    DWORD PTR [r13+0x20],0x0
  40d1cb:	jne    40d169 <flatcc_json_parser_union_type_vector@@Base+0x649>
  40d1cd:	mov    DWORD PTR [r13+0x20],0xf
  40d1d5:	mov    eax,DWORD PTR [r13+0x8]
  40d1d9:	mov    ecx,r12d
  40d1dc:	sub    ecx,eax
  40d1de:	add    ecx,0x1
  40d1e1:	mov    DWORD PTR [r13+0x1c],ecx
  40d1e5:	mov    QWORD PTR [r13+0x38],r12
  40d1e9:	jmp    40d169 <flatcc_json_parser_union_type_vector@@Base+0x649>
  40d1ee:	lea    rdi,[rip+0x34fe]        # 4106f3 <flatcc_builder_padding_base@@Base+0x2393>
  40d1f5:	lea    rsi,[rip+0x3506]        # 410702 <flatcc_builder_padding_base@@Base+0x23a2>
  40d1fc:	lea    rcx,[rip+0x362f]        # 410832 <flatcc_builder_padding_base@@Base+0x24d2>
  40d203:	mov    edx,0x462
  40d208:	call   403060 <__assert_fail@plt>
  40d20d:	nop    DWORD PTR [rax]

000000000040d210 <flatcc_json_parser_table_as_root@@Base>:
  40d210:	push   r15
  40d212:	push   r14
  40d214:	push   r12
  40d216:	push   rbx
  40d217:	sub    rsp,0x58
  40d21b:	mov    r12,rcx
  40d21e:	mov    r14,rdx
  40d221:	mov    r15,rdi
  40d224:	mov    ecx,r8d
  40d227:	shr    ecx,1
  40d229:	and    ecx,0x2
  40d22c:	test   rsi,rsi
  40d22f:	lea    rbx,[rsp+0x10]
  40d234:	cmovne rbx,rsi
  40d238:	add    r12,rdx
  40d23b:	vxorps xmm0,xmm0,xmm0
  40d23f:	vmovups YMMWORD PTR [rbx],ymm0
  40d243:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  40d248:	mov    QWORD PTR [rbx+0x40],0x0
  40d250:	mov    QWORD PTR [rbx],rdi
  40d253:	mov    QWORD PTR [rbx+0x8],rdx
  40d257:	mov    DWORD PTR [rbx+0x18],0x1
  40d25e:	mov    DWORD PTR [rbx+0x10],r8d
  40d262:	mov    QWORD PTR [rbx+0x28],rdx
  40d266:	mov    QWORD PTR [rbx+0x30],r12
  40d26a:	mov    QWORD PTR [rbx+0x38],rdx
  40d26e:	xor    edx,edx
  40d270:	mov    rsi,r9
  40d273:	vzeroupper 
  40d276:	call   405470 <flatcc_builder_start_buffer@@Base>
  40d27b:	mov    ecx,eax
  40d27d:	mov    eax,0xffffffff
  40d282:	test   ecx,ecx
  40d284:	jne    40d2bf <flatcc_json_parser_table_as_root@@Base+0xaf>
  40d286:	lea    rcx,[rsp+0xc]
  40d28b:	mov    rdi,rbx
  40d28e:	mov    rsi,r14
  40d291:	mov    rdx,r12
  40d294:	call   QWORD PTR [rsp+0x80]
  40d29b:	mov    eax,DWORD PTR [rbx+0x20]
  40d29e:	test   eax,eax
  40d2a0:	jne    40d2bf <flatcc_json_parser_table_as_root@@Base+0xaf>
  40d2a2:	mov    esi,DWORD PTR [rsp+0xc]
  40d2a6:	mov    rdi,r15
  40d2a9:	call   405690 <flatcc_builder_end_buffer@@Base>
  40d2ae:	mov    ecx,eax
  40d2b0:	mov    eax,0xffffffff
  40d2b5:	test   ecx,ecx
  40d2b7:	je     40d2bf <flatcc_json_parser_table_as_root@@Base+0xaf>
  40d2b9:	mov    QWORD PTR [rbx+0x40],r14
  40d2bd:	xor    eax,eax
  40d2bf:	add    rsp,0x58
  40d2c3:	pop    rbx
  40d2c4:	pop    r12
  40d2c6:	pop    r14
  40d2c8:	pop    r15
  40d2ca:	ret    
  40d2cb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040d2d0 <flatcc_json_parser_struct_as_root@@Base>:
  40d2d0:	push   r15
  40d2d2:	push   r14
  40d2d4:	push   r12
  40d2d6:	push   rbx
  40d2d7:	sub    rsp,0x58
  40d2db:	mov    r12,rcx
  40d2de:	mov    r14,rdx
  40d2e1:	mov    r15,rdi
  40d2e4:	mov    ecx,r8d
  40d2e7:	shr    ecx,1
  40d2e9:	and    ecx,0x2
  40d2ec:	test   rsi,rsi
  40d2ef:	lea    rbx,[rsp+0x10]
  40d2f4:	cmovne rbx,rsi
  40d2f8:	add    r12,rdx
  40d2fb:	vxorps xmm0,xmm0,xmm0
  40d2ff:	vmovups YMMWORD PTR [rbx],ymm0
  40d303:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  40d308:	mov    QWORD PTR [rbx+0x40],0x0
  40d310:	mov    QWORD PTR [rbx],rdi
  40d313:	mov    QWORD PTR [rbx+0x8],rdx
  40d317:	mov    DWORD PTR [rbx+0x18],0x1
  40d31e:	mov    DWORD PTR [rbx+0x10],r8d
  40d322:	mov    QWORD PTR [rbx+0x28],rdx
  40d326:	mov    QWORD PTR [rbx+0x30],r12
  40d32a:	mov    QWORD PTR [rbx+0x38],rdx
  40d32e:	xor    edx,edx
  40d330:	mov    rsi,r9
  40d333:	vzeroupper 
  40d336:	call   405470 <flatcc_builder_start_buffer@@Base>
  40d33b:	mov    ecx,eax
  40d33d:	mov    eax,0xffffffff
  40d342:	test   ecx,ecx
  40d344:	jne    40d37f <flatcc_json_parser_struct_as_root@@Base+0xaf>
  40d346:	lea    rcx,[rsp+0xc]
  40d34b:	mov    rdi,rbx
  40d34e:	mov    rsi,r14
  40d351:	mov    rdx,r12
  40d354:	call   QWORD PTR [rsp+0x80]
  40d35b:	mov    eax,DWORD PTR [rbx+0x20]
  40d35e:	test   eax,eax
  40d360:	jne    40d37f <flatcc_json_parser_struct_as_root@@Base+0xaf>
  40d362:	mov    esi,DWORD PTR [rsp+0xc]
  40d366:	mov    rdi,r15
  40d369:	call   405690 <flatcc_builder_end_buffer@@Base>
  40d36e:	mov    ecx,eax
  40d370:	mov    eax,0xffffffff
  40d375:	test   ecx,ecx
  40d377:	je     40d37f <flatcc_json_parser_struct_as_root@@Base+0xaf>
  40d379:	mov    QWORD PTR [rbx+0x40],r14
  40d37d:	xor    eax,eax
  40d37f:	add    rsp,0x58
  40d383:	pop    rbx
  40d384:	pop    r12
  40d386:	pop    r14
  40d388:	pop    r15
  40d38a:	ret    
  40d38b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040d390 <__libc_csu_init@@Base>:
  40d390:	endbr64 
  40d394:	push   r15
  40d396:	lea    r15,[rip+0x6943]        # 413ce0 <flatcc_builder_padding_base@@Base+0x5980>
  40d39d:	push   r14
  40d39f:	mov    r14,rdx
  40d3a2:	push   r13
  40d3a4:	mov    r13,rsi
  40d3a7:	push   r12
  40d3a9:	mov    r12d,edi
  40d3ac:	push   rbp
  40d3ad:	lea    rbp,[rip+0x6934]        # 413ce8 <flatcc_builder_padding_base@@Base+0x5988>
  40d3b4:	push   rbx
  40d3b5:	sub    rbp,r15
  40d3b8:	sub    rsp,0x8
  40d3bc:	call   403000 <free@plt-0x30>
  40d3c1:	sar    rbp,0x3
  40d3c5:	je     40d3e6 <__libc_csu_init@@Base+0x56>
  40d3c7:	xor    ebx,ebx
  40d3c9:	nop    DWORD PTR [rax+0x0]
  40d3d0:	mov    rdx,r14
  40d3d3:	mov    rsi,r13
  40d3d6:	mov    edi,r12d
  40d3d9:	call   QWORD PTR [r15+rbx*8]
  40d3dd:	add    rbx,0x1
  40d3e1:	cmp    rbp,rbx
  40d3e4:	jne    40d3d0 <__libc_csu_init@@Base+0x40>
  40d3e6:	add    rsp,0x8
  40d3ea:	pop    rbx
  40d3eb:	pop    rbp
  40d3ec:	pop    r12
  40d3ee:	pop    r13
  40d3f0:	pop    r14
  40d3f2:	pop    r15
  40d3f4:	ret    
  40d3f5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000040d400 <__libc_csu_fini@@Base>:
  40d400:	endbr64 
  40d404:	ret    

Disassembly of section .fini:

000000000040d408 <.fini>:
  40d408:	endbr64 
  40d40c:	sub    rsp,0x8
  40d410:	add    rsp,0x8
  40d414:	ret    
