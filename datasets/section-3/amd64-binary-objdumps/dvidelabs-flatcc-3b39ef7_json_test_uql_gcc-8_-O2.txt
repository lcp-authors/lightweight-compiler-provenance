
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uql:     file format elf64-x86-64


Disassembly of section .init:

0000000000406000 <.init>:
  406000:	endbr64 
  406004:	sub    rsp,0x8
  406008:	mov    rax,QWORD PTR [rip+0x33fd1]        # 439fe0 <__gmon_start__>
  40600f:	test   rax,rax
  406012:	je     406016 <free@plt-0x14a>
  406014:	call   rax
  406016:	add    rsp,0x8
  40601a:	ret    

Disassembly of section .plt:

0000000000406020 <.plt>:
  406020:	push   QWORD PTR [rip+0x33fe2]        # 43a008 <flatcc_builder_padding_base@@Base+0x95e8>
  406026:	bnd jmp QWORD PTR [rip+0x33fe3]        # 43a010 <flatcc_builder_padding_base@@Base+0x95f0>
  40602d:	nop    DWORD PTR [rax]
  406030:	endbr64 
  406034:	push   0x0
  406039:	bnd jmp 406020 <free@plt-0x140>
  40603f:	nop
  406040:	endbr64 
  406044:	push   0x1
  406049:	bnd jmp 406020 <free@plt-0x140>
  40604f:	nop
  406050:	endbr64 
  406054:	push   0x2
  406059:	bnd jmp 406020 <free@plt-0x140>
  40605f:	nop
  406060:	endbr64 
  406064:	push   0x3
  406069:	bnd jmp 406020 <free@plt-0x140>
  40606f:	nop
  406070:	endbr64 
  406074:	push   0x4
  406079:	bnd jmp 406020 <free@plt-0x140>
  40607f:	nop
  406080:	endbr64 
  406084:	push   0x5
  406089:	bnd jmp 406020 <free@plt-0x140>
  40608f:	nop
  406090:	endbr64 
  406094:	push   0x6
  406099:	bnd jmp 406020 <free@plt-0x140>
  40609f:	nop
  4060a0:	endbr64 
  4060a4:	push   0x7
  4060a9:	bnd jmp 406020 <free@plt-0x140>
  4060af:	nop
  4060b0:	endbr64 
  4060b4:	push   0x8
  4060b9:	bnd jmp 406020 <free@plt-0x140>
  4060bf:	nop
  4060c0:	endbr64 
  4060c4:	push   0x9
  4060c9:	bnd jmp 406020 <free@plt-0x140>
  4060cf:	nop
  4060d0:	endbr64 
  4060d4:	push   0xa
  4060d9:	bnd jmp 406020 <free@plt-0x140>
  4060df:	nop
  4060e0:	endbr64 
  4060e4:	push   0xb
  4060e9:	bnd jmp 406020 <free@plt-0x140>
  4060ef:	nop
  4060f0:	endbr64 
  4060f4:	push   0xc
  4060f9:	bnd jmp 406020 <free@plt-0x140>
  4060ff:	nop
  406100:	endbr64 
  406104:	push   0xd
  406109:	bnd jmp 406020 <free@plt-0x140>
  40610f:	nop
  406110:	endbr64 
  406114:	push   0xe
  406119:	bnd jmp 406020 <free@plt-0x140>
  40611f:	nop
  406120:	endbr64 
  406124:	push   0xf
  406129:	bnd jmp 406020 <free@plt-0x140>
  40612f:	nop
  406130:	endbr64 
  406134:	push   0x10
  406139:	bnd jmp 406020 <free@plt-0x140>
  40613f:	nop
  406140:	endbr64 
  406144:	push   0x11
  406149:	bnd jmp 406020 <free@plt-0x140>
  40614f:	nop
  406150:	endbr64 
  406154:	push   0x12
  406159:	bnd jmp 406020 <free@plt-0x140>
  40615f:	nop

Disassembly of section .plt.sec:

0000000000406160 <free@plt>:
  406160:	endbr64 
  406164:	bnd jmp QWORD PTR [rip+0x33ead]        # 43a018 <free@GLIBC_2.2.5>
  40616b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406170 <strncpy@plt>:
  406170:	endbr64 
  406174:	bnd jmp QWORD PTR [rip+0x33ea5]        # 43a020 <strncpy@GLIBC_2.2.5>
  40617b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406180 <strtod@plt>:
  406180:	endbr64 
  406184:	bnd jmp QWORD PTR [rip+0x33e9d]        # 43a028 <strtod@GLIBC_2.2.5>
  40618b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406190 <strlen@plt>:
  406190:	endbr64 
  406194:	bnd jmp QWORD PTR [rip+0x33e95]        # 43a030 <strlen@GLIBC_2.2.5>
  40619b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004061a0 <__stack_chk_fail@plt>:
  4061a0:	endbr64 
  4061a4:	bnd jmp QWORD PTR [rip+0x33e8d]        # 43a038 <__stack_chk_fail@GLIBC_2.4>
  4061ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004061b0 <__assert_fail@plt>:
  4061b0:	endbr64 
  4061b4:	bnd jmp QWORD PTR [rip+0x33e85]        # 43a040 <__assert_fail@GLIBC_2.2.5>
  4061bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004061c0 <memset@plt>:
  4061c0:	endbr64 
  4061c4:	bnd jmp QWORD PTR [rip+0x33e7d]        # 43a048 <memset@GLIBC_2.2.5>
  4061cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004061d0 <memchr@plt>:
  4061d0:	endbr64 
  4061d4:	bnd jmp QWORD PTR [rip+0x33e75]        # 43a050 <memchr@GLIBC_2.2.5>
  4061db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004061e0 <memcmp@plt>:
  4061e0:	endbr64 
  4061e4:	bnd jmp QWORD PTR [rip+0x33e6d]        # 43a058 <memcmp@GLIBC_2.2.5>
  4061eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004061f0 <strcmp@plt>:
  4061f0:	endbr64 
  4061f4:	bnd jmp QWORD PTR [rip+0x33e65]        # 43a060 <strcmp@GLIBC_2.2.5>
  4061fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406200 <__memcpy_chk@plt>:
  406200:	endbr64 
  406204:	bnd jmp QWORD PTR [rip+0x33e5d]        # 43a068 <__memcpy_chk@GLIBC_2.3.4>
  40620b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406210 <memcpy@plt>:
  406210:	endbr64 
  406214:	bnd jmp QWORD PTR [rip+0x33e55]        # 43a070 <memcpy@GLIBC_2.14>
  40621b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406220 <malloc@plt>:
  406220:	endbr64 
  406224:	bnd jmp QWORD PTR [rip+0x33e4d]        # 43a078 <malloc@GLIBC_2.2.5>
  40622b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406230 <realloc@plt>:
  406230:	endbr64 
  406234:	bnd jmp QWORD PTR [rip+0x33e45]        # 43a080 <realloc@GLIBC_2.2.5>
  40623b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406240 <memmove@plt>:
  406240:	endbr64 
  406244:	bnd jmp QWORD PTR [rip+0x33e3d]        # 43a088 <memmove@GLIBC_2.2.5>
  40624b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406250 <fwrite@plt>:
  406250:	endbr64 
  406254:	bnd jmp QWORD PTR [rip+0x33e35]        # 43a090 <fwrite@GLIBC_2.2.5>
  40625b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406260 <__fprintf_chk@plt>:
  406260:	endbr64 
  406264:	bnd jmp QWORD PTR [rip+0x33e2d]        # 43a098 <__fprintf_chk@GLIBC_2.3.4>
  40626b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406270 <posix_memalign@plt>:
  406270:	endbr64 
  406274:	bnd jmp QWORD PTR [rip+0x33e25]        # 43a0a0 <posix_memalign@GLIBC_2.2.5>
  40627b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406280 <__sprintf_chk@plt>:
  406280:	endbr64 
  406284:	bnd jmp QWORD PTR [rip+0x33e1d]        # 43a0a8 <__sprintf_chk@GLIBC_2.3.4>
  40628b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

0000000000406290 <main@@Base>:
  406290:	endbr64 
  406294:	push   rbx
  406295:	xor    eax,eax
  406297:	call   415d40 <edge_case_tests@@Base>
  40629c:	mov    ebx,eax
  40629e:	xor    eax,eax
  4062a0:	call   416070 <error_case_tests@@Base>
  4062a5:	or     ebx,eax
  4062a7:	xor    eax,eax
  4062a9:	call   416660 <union_vector_tests@@Base>
  4062ae:	or     ebx,eax
  4062b0:	xor    eax,eax
  4062b2:	call   416360 <base64_tests@@Base>
  4062b7:	or     ebx,eax
  4062b9:	xor    eax,eax
  4062bb:	call   416520 <mixed_type_union_tests@@Base>
  4062c0:	sub    rsp,0x8
  4062c4:	push   0x20d
  4062c9:	xor    r9d,r9d
  4062cc:	xor    r8d,r8d
  4062cf:	xor    ecx,ecx
  4062d1:	lea    rdx,[rip+0x26260]        # 42c538 <_IO_stdin_used@@Base+0x538>
  4062d8:	lea    rsi,[rip+0x26316]        # 42c5f5 <_IO_stdin_used@@Base+0x5f5>
  4062df:	lea    rdi,[rip+0x33afa]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4062e6:	or     ebx,eax
  4062e8:	call   415800 <test_json@@Base>
  4062ed:	xor    r9d,r9d
  4062f0:	xor    r8d,r8d
  4062f3:	xor    ecx,ecx
  4062f5:	lea    rdx,[rip+0x28824]        # 42eb20 <_IO_stdin_used@@Base+0x2b20>
  4062fc:	lea    rsi,[rip+0x28845]        # 42eb48 <_IO_stdin_used@@Base+0x2b48>
  406303:	lea    rdi,[rip+0x33ad6]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  40630a:	or     ebx,eax
  40630c:	mov    DWORD PTR [rsp],0x210
  406313:	call   415800 <test_json@@Base>
  406318:	xor    r9d,r9d
  40631b:	xor    r8d,r8d
  40631e:	xor    ecx,ecx
  406320:	lea    rdx,[rip+0x28849]        # 42eb70 <_IO_stdin_used@@Base+0x2b70>
  406327:	lea    rsi,[rip+0x2886a]        # 42eb98 <_IO_stdin_used@@Base+0x2b98>
  40632e:	lea    rdi,[rip+0x33aab]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406335:	or     ebx,eax
  406337:	mov    DWORD PTR [rsp],0x213
  40633e:	call   415800 <test_json@@Base>
  406343:	or     ebx,eax
  406345:	xor    r9d,r9d
  406348:	xor    r8d,r8d
  40634b:	lea    rdx,[rip+0x2886e]        # 42ebc0 <_IO_stdin_used@@Base+0x2bc0>
  406352:	xor    ecx,ecx
  406354:	lea    rsi,[rip+0x28895]        # 42ebf0 <_IO_stdin_used@@Base+0x2bf0>
  40635b:	lea    rdi,[rip+0x33a7e]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406362:	mov    DWORD PTR [rsp],0x216
  406369:	call   415800 <test_json@@Base>
  40636e:	xor    r9d,r9d
  406371:	xor    r8d,r8d
  406374:	xor    ecx,ecx
  406376:	lea    rdx,[rip+0x28843]        # 42ebc0 <_IO_stdin_used@@Base+0x2bc0>
  40637d:	lea    rsi,[rip+0x288a4]        # 42ec28 <_IO_stdin_used@@Base+0x2c28>
  406384:	lea    rdi,[rip+0x33a55]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  40638b:	or     ebx,eax
  40638d:	mov    DWORD PTR [rsp],0x219
  406394:	call   415800 <test_json@@Base>
  406399:	xor    r9d,r9d
  40639c:	xor    r8d,r8d
  40639f:	xor    ecx,ecx
  4063a1:	lea    rdx,[rip+0x28778]        # 42eb20 <_IO_stdin_used@@Base+0x2b20>
  4063a8:	lea    rsi,[rip+0x288b9]        # 42ec68 <_IO_stdin_used@@Base+0x2c68>
  4063af:	lea    rdi,[rip+0x33a2a]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4063b6:	or     ebx,eax
  4063b8:	mov    DWORD PTR [rsp],0x21c
  4063bf:	call   415800 <test_json@@Base>
  4063c4:	xor    r9d,r9d
  4063c7:	xor    r8d,r8d
  4063ca:	xor    ecx,ecx
  4063cc:	lea    rdx,[rip+0x2879d]        # 42eb70 <_IO_stdin_used@@Base+0x2b70>
  4063d3:	lea    rsi,[rip+0x288b6]        # 42ec90 <_IO_stdin_used@@Base+0x2c90>
  4063da:	lea    rdi,[rip+0x339ff]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4063e1:	or     ebx,eax
  4063e3:	mov    DWORD PTR [rsp],0x21f
  4063ea:	call   415800 <test_json@@Base>
  4063ef:	xor    r9d,r9d
  4063f2:	xor    r8d,r8d
  4063f5:	xor    ecx,ecx
  4063f7:	lea    rdx,[rip+0x2613a]        # 42c538 <_IO_stdin_used@@Base+0x538>
  4063fe:	lea    rsi,[rip+0x288bb]        # 42ecc0 <_IO_stdin_used@@Base+0x2cc0>
  406405:	lea    rdi,[rip+0x339d4]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  40640c:	or     ebx,eax
  40640e:	mov    DWORD PTR [rsp],0x223
  406415:	call   415800 <test_json@@Base>
  40641a:	xor    r9d,r9d
  40641d:	xor    r8d,r8d
  406420:	xor    ecx,ecx
  406422:	lea    rdx,[rip+0x2610f]        # 42c538 <_IO_stdin_used@@Base+0x538>
  406429:	lea    rsi,[rip+0x26548]        # 42c978 <_IO_stdin_used@@Base+0x978>
  406430:	lea    rdi,[rip+0x339a9]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406437:	or     ebx,eax
  406439:	mov    DWORD PTR [rsp],0x227
  406440:	call   415800 <test_json@@Base>
  406445:	xor    r9d,r9d
  406448:	xor    r8d,r8d
  40644b:	xor    ecx,ecx
  40644d:	lea    rdx,[rip+0x260e4]        # 42c538 <_IO_stdin_used@@Base+0x538>
  406454:	lea    rsi,[rip+0x261b1]        # 42c60c <_IO_stdin_used@@Base+0x60c>
  40645b:	lea    rdi,[rip+0x3397e]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406462:	mov    DWORD PTR [rsp],0x22b
  406469:	or     ebx,eax
  40646b:	call   415800 <test_json@@Base>
  406470:	or     ebx,eax
  406472:	lea    rdx,[rip+0x286a7]        # 42eb20 <_IO_stdin_used@@Base+0x2b20>
  406479:	xor    r9d,r9d
  40647c:	xor    r8d,r8d
  40647f:	xor    ecx,ecx
  406481:	lea    rsi,[rip+0x28860]        # 42ece8 <_IO_stdin_used@@Base+0x2ce8>
  406488:	lea    rdi,[rip+0x33951]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  40648f:	mov    DWORD PTR [rsp],0x22e
  406496:	call   415800 <test_json@@Base>
  40649b:	xor    r9d,r9d
  40649e:	xor    r8d,r8d
  4064a1:	xor    ecx,ecx
  4064a3:	lea    rdx,[rip+0x286c6]        # 42eb70 <_IO_stdin_used@@Base+0x2b70>
  4064aa:	lea    rsi,[rip+0x2885f]        # 42ed10 <_IO_stdin_used@@Base+0x2d10>
  4064b1:	lea    rdi,[rip+0x33928]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4064b8:	or     ebx,eax
  4064ba:	mov    DWORD PTR [rsp],0x231
  4064c1:	call   415800 <test_json@@Base>
  4064c6:	xor    r9d,r9d
  4064c9:	xor    r8d,r8d
  4064cc:	xor    ecx,ecx
  4064ce:	lea    rdx,[rip+0x286eb]        # 42ebc0 <_IO_stdin_used@@Base+0x2bc0>
  4064d5:	lea    rsi,[rip+0x2885c]        # 42ed38 <_IO_stdin_used@@Base+0x2d38>
  4064dc:	lea    rdi,[rip+0x338fd]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4064e3:	or     ebx,eax
  4064e5:	mov    DWORD PTR [rsp],0x234
  4064ec:	call   415800 <test_json@@Base>
  4064f1:	xor    r9d,r9d
  4064f4:	xor    r8d,r8d
  4064f7:	xor    ecx,ecx
  4064f9:	lea    rdx,[rip+0x286c0]        # 42ebc0 <_IO_stdin_used@@Base+0x2bc0>
  406500:	lea    rsi,[rip+0x28861]        # 42ed68 <_IO_stdin_used@@Base+0x2d68>
  406507:	lea    rdi,[rip+0x338d2]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  40650e:	or     ebx,eax
  406510:	mov    DWORD PTR [rsp],0x237
  406517:	call   415800 <test_json@@Base>
  40651c:	xor    r9d,r9d
  40651f:	xor    r8d,r8d
  406522:	xor    ecx,ecx
  406524:	lea    rdx,[rip+0x285f5]        # 42eb20 <_IO_stdin_used@@Base+0x2b20>
  40652b:	lea    rsi,[rip+0x2886e]        # 42eda0 <_IO_stdin_used@@Base+0x2da0>
  406532:	lea    rdi,[rip+0x338a7]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406539:	or     ebx,eax
  40653b:	mov    DWORD PTR [rsp],0x23a
  406542:	call   415800 <test_json@@Base>
  406547:	xor    r9d,r9d
  40654a:	xor    ecx,ecx
  40654c:	xor    r8d,r8d
  40654f:	lea    rdx,[rip+0x2861a]        # 42eb70 <_IO_stdin_used@@Base+0x2b70>
  406556:	lea    rsi,[rip+0x28863]        # 42edc0 <_IO_stdin_used@@Base+0x2dc0>
  40655d:	lea    rdi,[rip+0x3387c]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406564:	or     ebx,eax
  406566:	mov    DWORD PTR [rsp],0x23d
  40656d:	call   415800 <test_json@@Base>
  406572:	or     ebx,eax
  406574:	xor    r9d,r9d
  406577:	lea    rdx,[rip+0x25fba]        # 42c538 <_IO_stdin_used@@Base+0x538>
  40657e:	xor    r8d,r8d
  406581:	lea    rsi,[rip+0x28860]        # 42ede8 <_IO_stdin_used@@Base+0x2de8>
  406588:	xor    ecx,ecx
  40658a:	lea    rdi,[rip+0x3384f]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406591:	mov    DWORD PTR [rsp],0x241
  406598:	call   415800 <test_json@@Base>
  40659d:	xor    r9d,r9d
  4065a0:	xor    r8d,r8d
  4065a3:	xor    ecx,ecx
  4065a5:	lea    rdx,[rip+0x25f8c]        # 42c538 <_IO_stdin_used@@Base+0x538>
  4065ac:	lea    rsi,[rip+0x25fca]        # 42c57d <_IO_stdin_used@@Base+0x57d>
  4065b3:	lea    rdi,[rip+0x33826]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4065ba:	or     ebx,eax
  4065bc:	mov    DWORD PTR [rsp],0x245
  4065c3:	call   415800 <test_json@@Base>
  4065c8:	xor    r9d,r9d
  4065cb:	xor    r8d,r8d
  4065ce:	xor    ecx,ecx
  4065d0:	lea    rdx,[rip+0x28839]        # 42ee10 <_IO_stdin_used@@Base+0x2e10>
  4065d7:	lea    rsi,[rip+0x2885a]        # 42ee38 <_IO_stdin_used@@Base+0x2e38>
  4065de:	lea    rdi,[rip+0x337fb]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4065e5:	or     ebx,eax
  4065e7:	mov    DWORD PTR [rsp],0x249
  4065ee:	call   415800 <test_json@@Base>
  4065f3:	xor    r9d,r9d
  4065f6:	xor    r8d,r8d
  4065f9:	xor    ecx,ecx
  4065fb:	lea    rdx,[rip+0x2880e]        # 42ee10 <_IO_stdin_used@@Base+0x2e10>
  406602:	lea    rsi,[rip+0x28857]        # 42ee60 <_IO_stdin_used@@Base+0x2e60>
  406609:	lea    rdi,[rip+0x337d0]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406610:	or     ebx,eax
  406612:	mov    DWORD PTR [rsp],0x24f
  406619:	call   415800 <test_json@@Base>
  40661e:	xor    r9d,r9d
  406621:	xor    r8d,r8d
  406624:	xor    ecx,ecx
  406626:	lea    rdx,[rip+0x287e3]        # 42ee10 <_IO_stdin_used@@Base+0x2e10>
  40662d:	lea    rsi,[rip+0x28854]        # 42ee88 <_IO_stdin_used@@Base+0x2e88>
  406634:	lea    rdi,[rip+0x337a5]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  40663b:	or     ebx,eax
  40663d:	mov    DWORD PTR [rsp],0x252
  406644:	call   415800 <test_json@@Base>
  406649:	xor    r9d,r9d
  40664c:	xor    r8d,r8d
  40664f:	xor    ecx,ecx
  406651:	lea    rdx,[rip+0x28568]        # 42ebc0 <_IO_stdin_used@@Base+0x2bc0>
  406658:	lea    rsi,[rip+0x28851]        # 42eeb0 <_IO_stdin_used@@Base+0x2eb0>
  40665f:	lea    rdi,[rip+0x3377a]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406666:	or     ebx,eax
  406668:	mov    DWORD PTR [rsp],0x255
  40666f:	call   415800 <test_json@@Base>
  406674:	xor    r9d,r9d
  406677:	xor    r8d,r8d
  40667a:	xor    ecx,ecx
  40667c:	lea    rdx,[rip+0x2849d]        # 42eb20 <_IO_stdin_used@@Base+0x2b20>
  406683:	lea    rsi,[rip+0x28856]        # 42eee0 <_IO_stdin_used@@Base+0x2ee0>
  40668a:	lea    rdi,[rip+0x3374f]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406691:	mov    DWORD PTR [rsp],0x259
  406698:	or     ebx,eax
  40669a:	call   415800 <test_json@@Base>
  40669f:	xor    r9d,r9d
  4066a2:	xor    r8d,r8d
  4066a5:	xor    ecx,ecx
  4066a7:	lea    rdx,[rip+0x284c2]        # 42eb70 <_IO_stdin_used@@Base+0x2b70>
  4066ae:	lea    rsi,[rip+0x28853]        # 42ef08 <_IO_stdin_used@@Base+0x2f08>
  4066b5:	lea    rdi,[rip+0x33724]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4066bc:	or     ebx,eax
  4066be:	mov    DWORD PTR [rsp],0x25c
  4066c5:	call   415800 <test_json@@Base>
  4066ca:	xor    r9d,r9d
  4066cd:	xor    r8d,r8d
  4066d0:	xor    ecx,ecx
  4066d2:	lea    rdx,[rip+0x28857]        # 42ef30 <_IO_stdin_used@@Base+0x2f30>
  4066d9:	lea    rsi,[rip+0x28878]        # 42ef58 <_IO_stdin_used@@Base+0x2f58>
  4066e0:	lea    rdi,[rip+0x336f9]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4066e7:	or     ebx,eax
  4066e9:	mov    DWORD PTR [rsp],0x25f
  4066f0:	call   415800 <test_json@@Base>
  4066f5:	xor    r9d,r9d
  4066f8:	xor    r8d,r8d
  4066fb:	xor    ecx,ecx
  4066fd:	lea    rdx,[rip+0x284bc]        # 42ebc0 <_IO_stdin_used@@Base+0x2bc0>
  406704:	lea    rsi,[rip+0x28875]        # 42ef80 <_IO_stdin_used@@Base+0x2f80>
  40670b:	lea    rdi,[rip+0x336ce]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406712:	or     ebx,eax
  406714:	mov    DWORD PTR [rsp],0x262
  40671b:	call   415800 <test_json@@Base>
  406720:	xor    r9d,r9d
  406723:	xor    r8d,r8d
  406726:	xor    ecx,ecx
  406728:	lea    rdx,[rip+0x25ef2]        # 42c621 <_IO_stdin_used@@Base+0x621>
  40672f:	lea    rsi,[rip+0x28872]        # 42efa8 <_IO_stdin_used@@Base+0x2fa8>
  406736:	lea    rdi,[rip+0x336a3]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  40673d:	or     ebx,eax
  40673f:	mov    DWORD PTR [rsp],0x265
  406746:	call   415800 <test_json@@Base>
  40674b:	xor    r9d,r9d
  40674e:	xor    r8d,r8d
  406751:	xor    ecx,ecx
  406753:	lea    rdx,[rip+0x25ee5]        # 42c63f <_IO_stdin_used@@Base+0x63f>
  40675a:	lea    rsi,[rip+0x2886f]        # 42efd0 <_IO_stdin_used@@Base+0x2fd0>
  406761:	lea    rdi,[rip+0x33678]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406768:	or     ebx,eax
  40676a:	mov    DWORD PTR [rsp],0x268
  406771:	call   415800 <test_json@@Base>
  406776:	xor    r8d,r8d
  406779:	xor    ecx,ecx
  40677b:	xor    r9d,r9d
  40677e:	lea    rdx,[rip+0x25ed8]        # 42c65d <_IO_stdin_used@@Base+0x65d>
  406785:	lea    rsi,[rip+0x2886c]        # 42eff8 <_IO_stdin_used@@Base+0x2ff8>
  40678c:	lea    rdi,[rip+0x3364d]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406793:	or     ebx,eax
  406795:	mov    DWORD PTR [rsp],0x26b
  40679c:	call   415800 <test_json@@Base>
  4067a1:	or     ebx,eax
  4067a3:	lea    rdx,[rip+0x28376]        # 42eb20 <_IO_stdin_used@@Base+0x2b20>
  4067aa:	xor    r9d,r9d
  4067ad:	lea    rsi,[rip+0x2886c]        # 42f020 <_IO_stdin_used@@Base+0x3020>
  4067b4:	xor    r8d,r8d
  4067b7:	xor    ecx,ecx
  4067b9:	lea    rdi,[rip+0x33620]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4067c0:	mov    DWORD PTR [rsp],0x26e
  4067c7:	call   415800 <test_json@@Base>
  4067cc:	xor    r9d,r9d
  4067cf:	xor    r8d,r8d
  4067d2:	xor    ecx,ecx
  4067d4:	lea    rdx,[rip+0x28345]        # 42eb20 <_IO_stdin_used@@Base+0x2b20>
  4067db:	lea    rsi,[rip+0x2886e]        # 42f050 <_IO_stdin_used@@Base+0x3050>
  4067e2:	lea    rdi,[rip+0x335f7]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4067e9:	or     ebx,eax
  4067eb:	mov    DWORD PTR [rsp],0x271
  4067f2:	call   415800 <test_json@@Base>
  4067f7:	xor    r9d,r9d
  4067fa:	xor    r8d,r8d
  4067fd:	xor    ecx,ecx
  4067ff:	lea    rdx,[rip+0x25e74]        # 42c67a <_IO_stdin_used@@Base+0x67a>
  406806:	lea    rsi,[rip+0x28883]        # 42f090 <_IO_stdin_used@@Base+0x3090>
  40680d:	lea    rdi,[rip+0x335cc]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406814:	or     ebx,eax
  406816:	mov    DWORD PTR [rsp],0x274
  40681d:	call   415800 <test_json@@Base>
  406822:	xor    r9d,r9d
  406825:	xor    r8d,r8d
  406828:	xor    ecx,ecx
  40682a:	lea    rdx,[rip+0x25e49]        # 42c67a <_IO_stdin_used@@Base+0x67a>
  406831:	lea    rsi,[rip+0x28858]        # 42f090 <_IO_stdin_used@@Base+0x3090>
  406838:	lea    rdi,[rip+0x335a1]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  40683f:	or     ebx,eax
  406841:	mov    DWORD PTR [rsp],0x277
  406848:	call   415800 <test_json@@Base>
  40684d:	xor    r9d,r9d
  406850:	xor    r8d,r8d
  406853:	xor    ecx,ecx
  406855:	lea    rdx,[rip+0x28864]        # 42f0c0 <_IO_stdin_used@@Base+0x30c0>
  40685c:	lea    rsi,[rip+0x288a5]        # 42f108 <_IO_stdin_used@@Base+0x3108>
  406863:	lea    rdi,[rip+0x33576]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  40686a:	or     ebx,eax
  40686c:	mov    DWORD PTR [rsp],0x27a
  406873:	call   415800 <test_json@@Base>
  406878:	xor    r9d,r9d
  40687b:	xor    r8d,r8d
  40687e:	xor    ecx,ecx
  406880:	lea    rdx,[rip+0x288d9]        # 42f160 <_IO_stdin_used@@Base+0x3160>
  406887:	lea    rsi,[rip+0x28922]        # 42f1b0 <_IO_stdin_used@@Base+0x31b0>
  40688e:	lea    rdi,[rip+0x3354b]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406895:	or     ebx,eax
  406897:	mov    DWORD PTR [rsp],0x27e
  40689e:	call   415800 <test_json@@Base>
  4068a3:	or     ebx,eax
  4068a5:	xor    r9d,r9d
  4068a8:	xor    r8d,r8d
  4068ab:	lea    rdx,[rip+0x28956]        # 42f208 <_IO_stdin_used@@Base+0x3208>
  4068b2:	xor    ecx,ecx
  4068b4:	lea    rsi,[rip+0x289b5]        # 42f270 <_IO_stdin_used@@Base+0x3270>
  4068bb:	lea    rdi,[rip+0x3351e]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4068c2:	mov    DWORD PTR [rsp],0x282
  4068c9:	call   415800 <test_json@@Base>
  4068ce:	xor    r9d,r9d
  4068d1:	xor    r8d,r8d
  4068d4:	xor    ecx,ecx
  4068d6:	lea    rdx,[rip+0x25c5b]        # 42c538 <_IO_stdin_used@@Base+0x538>
  4068dd:	lea    rsi,[rip+0x289fc]        # 42f2e0 <_IO_stdin_used@@Base+0x32e0>
  4068e4:	lea    rdi,[rip+0x334f5]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4068eb:	or     ebx,eax
  4068ed:	mov    DWORD PTR [rsp],0x286
  4068f4:	call   415800 <test_json@@Base>
  4068f9:	xor    r9d,r9d
  4068fc:	xor    r8d,r8d
  4068ff:	xor    ecx,ecx
  406901:	lea    rdx,[rip+0x25c30]        # 42c538 <_IO_stdin_used@@Base+0x538>
  406908:	lea    rsi,[rip+0x28a01]        # 42f310 <_IO_stdin_used@@Base+0x3310>
  40690f:	lea    rdi,[rip+0x334ca]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406916:	or     ebx,eax
  406918:	mov    DWORD PTR [rsp],0x289
  40691f:	call   415800 <test_json@@Base>
  406924:	xor    r9d,r9d
  406927:	xor    r8d,r8d
  40692a:	xor    ecx,ecx
  40692c:	lea    rdx,[rip+0x281ed]        # 42eb20 <_IO_stdin_used@@Base+0x2b20>
  406933:	lea    rsi,[rip+0x25d5a]        # 42c694 <_IO_stdin_used@@Base+0x694>
  40693a:	lea    rdi,[rip+0x3349f]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406941:	or     ebx,eax
  406943:	mov    DWORD PTR [rsp],0x28d
  40694a:	call   415800 <test_json@@Base>
  40694f:	xor    r9d,r9d
  406952:	xor    r8d,r8d
  406955:	xor    ecx,ecx
  406957:	lea    rdx,[rip+0x28212]        # 42eb70 <_IO_stdin_used@@Base+0x2b70>
  40695e:	lea    rsi,[rip+0x25d4c]        # 42c6b1 <_IO_stdin_used@@Base+0x6b1>
  406965:	lea    rdi,[rip+0x33474]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  40696c:	or     ebx,eax
  40696e:	mov    DWORD PTR [rsp],0x290
  406975:	call   415800 <test_json@@Base>
  40697a:	xor    r9d,r9d
  40697d:	xor    r8d,r8d
  406980:	xor    ecx,ecx
  406982:	lea    rdx,[rip+0x285a7]        # 42ef30 <_IO_stdin_used@@Base+0x2f30>
  406989:	lea    rsi,[rip+0x25d3e]        # 42c6ce <_IO_stdin_used@@Base+0x6ce>
  406990:	lea    rdi,[rip+0x33449]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406997:	or     ebx,eax
  406999:	mov    DWORD PTR [rsp],0x293
  4069a0:	call   415800 <test_json@@Base>
  4069a5:	xor    r9d,r9d
  4069a8:	xor    r8d,r8d
  4069ab:	xor    ecx,ecx
  4069ad:	lea    rdx,[rip+0x2820c]        # 42ebc0 <_IO_stdin_used@@Base+0x2bc0>
  4069b4:	lea    rsi,[rip+0x25d30]        # 42c6eb <_IO_stdin_used@@Base+0x6eb>
  4069bb:	lea    rdi,[rip+0x3341e]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4069c2:	mov    DWORD PTR [rsp],0x296
  4069c9:	or     ebx,eax
  4069cb:	call   415800 <test_json@@Base>
  4069d0:	or     ebx,eax
  4069d2:	lea    rdx,[rip+0x25c48]        # 42c621 <_IO_stdin_used@@Base+0x621>
  4069d9:	xor    r9d,r9d
  4069dc:	xor    r8d,r8d
  4069df:	xor    ecx,ecx
  4069e1:	lea    rsi,[rip+0x25d21]        # 42c709 <_IO_stdin_used@@Base+0x709>
  4069e8:	lea    rdi,[rip+0x333f1]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4069ef:	mov    DWORD PTR [rsp],0x299
  4069f6:	call   415800 <test_json@@Base>
  4069fb:	xor    r9d,r9d
  4069fe:	xor    r8d,r8d
  406a01:	xor    ecx,ecx
  406a03:	lea    rdx,[rip+0x25c35]        # 42c63f <_IO_stdin_used@@Base+0x63f>
  406a0a:	lea    rsi,[rip+0x25d16]        # 42c727 <_IO_stdin_used@@Base+0x727>
  406a11:	lea    rdi,[rip+0x333c8]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406a18:	or     ebx,eax
  406a1a:	mov    DWORD PTR [rsp],0x29c
  406a21:	call   415800 <test_json@@Base>
  406a26:	xor    r9d,r9d
  406a29:	xor    r8d,r8d
  406a2c:	xor    ecx,ecx
  406a2e:	lea    rdx,[rip+0x25c28]        # 42c65d <_IO_stdin_used@@Base+0x65d>
  406a35:	lea    rsi,[rip+0x25d09]        # 42c745 <_IO_stdin_used@@Base+0x745>
  406a3c:	lea    rdi,[rip+0x3339d]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406a43:	or     ebx,eax
  406a45:	mov    DWORD PTR [rsp],0x29f
  406a4c:	call   415800 <test_json@@Base>
  406a51:	xor    r9d,r9d
  406a54:	xor    r8d,r8d
  406a57:	xor    ecx,ecx
  406a59:	lea    rdx,[rip+0x280c0]        # 42eb20 <_IO_stdin_used@@Base+0x2b20>
  406a60:	lea    rsi,[rip+0x288d1]        # 42f338 <_IO_stdin_used@@Base+0x3338>
  406a67:	lea    rdi,[rip+0x33372]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406a6e:	or     ebx,eax
  406a70:	mov    DWORD PTR [rsp],0x2a2
  406a77:	call   415800 <test_json@@Base>
  406a7c:	xor    r9d,r9d
  406a7f:	xor    r8d,r8d
  406a82:	xor    ecx,ecx
  406a84:	lea    rdx,[rip+0x28095]        # 42eb20 <_IO_stdin_used@@Base+0x2b20>
  406a8b:	lea    rsi,[rip+0x288ce]        # 42f360 <_IO_stdin_used@@Base+0x3360>
  406a92:	lea    rdi,[rip+0x33347]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406a99:	or     ebx,eax
  406a9b:	mov    DWORD PTR [rsp],0x2a5
  406aa2:	call   415800 <test_json@@Base>
  406aa7:	xor    r9d,r9d
  406aaa:	xor    ecx,ecx
  406aac:	xor    r8d,r8d
  406aaf:	lea    rdx,[rip+0x25bc4]        # 42c67a <_IO_stdin_used@@Base+0x67a>
  406ab6:	lea    rsi,[rip+0x288db]        # 42f398 <_IO_stdin_used@@Base+0x3398>
  406abd:	lea    rdi,[rip+0x3331c]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406ac4:	or     ebx,eax
  406ac6:	mov    DWORD PTR [rsp],0x2a8
  406acd:	call   415800 <test_json@@Base>
  406ad2:	or     ebx,eax
  406ad4:	xor    r9d,r9d
  406ad7:	lea    rdx,[rip+0x25b9c]        # 42c67a <_IO_stdin_used@@Base+0x67a>
  406ade:	xor    r8d,r8d
  406ae1:	lea    rsi,[rip+0x288b0]        # 42f398 <_IO_stdin_used@@Base+0x3398>
  406ae8:	xor    ecx,ecx
  406aea:	lea    rdi,[rip+0x332ef]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406af1:	mov    DWORD PTR [rsp],0x2ab
  406af8:	call   415800 <test_json@@Base>
  406afd:	xor    r9d,r9d
  406b00:	xor    r8d,r8d
  406b03:	xor    ecx,ecx
  406b05:	lea    rdx,[rip+0x285b4]        # 42f0c0 <_IO_stdin_used@@Base+0x30c0>
  406b0c:	lea    rsi,[rip+0x288ad]        # 42f3c0 <_IO_stdin_used@@Base+0x33c0>
  406b13:	lea    rdi,[rip+0x332c6]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406b1a:	or     ebx,eax
  406b1c:	mov    DWORD PTR [rsp],0x2ae
  406b23:	call   415800 <test_json@@Base>
  406b28:	xor    r9d,r9d
  406b2b:	xor    r8d,r8d
  406b2e:	xor    ecx,ecx
  406b30:	lea    rdx,[rip+0x28629]        # 42f160 <_IO_stdin_used@@Base+0x3160>
  406b37:	lea    rsi,[rip+0x288ca]        # 42f408 <_IO_stdin_used@@Base+0x3408>
  406b3e:	lea    rdi,[rip+0x3329b]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406b45:	or     ebx,eax
  406b47:	mov    DWORD PTR [rsp],0x2b2
  406b4e:	call   415800 <test_json@@Base>
  406b53:	xor    r9d,r9d
  406b56:	xor    r8d,r8d
  406b59:	xor    ecx,ecx
  406b5b:	lea    rdx,[rip+0x286a6]        # 42f208 <_IO_stdin_used@@Base+0x3208>
  406b62:	lea    rsi,[rip+0x288ef]        # 42f458 <_IO_stdin_used@@Base+0x3458>
  406b69:	lea    rdi,[rip+0x33270]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406b70:	or     ebx,eax
  406b72:	mov    DWORD PTR [rsp],0x2b6
  406b79:	call   415800 <test_json@@Base>
  406b7e:	xor    r9d,r9d
  406b81:	xor    r8d,r8d
  406b84:	xor    ecx,ecx
  406b86:	lea    rdx,[rip+0x259ab]        # 42c538 <_IO_stdin_used@@Base+0x538>
  406b8d:	lea    rsi,[rip+0x28924]        # 42f4b8 <_IO_stdin_used@@Base+0x34b8>
  406b94:	lea    rdi,[rip+0x33245]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406b9b:	or     ebx,eax
  406b9d:	mov    DWORD PTR [rsp],0x2ba
  406ba4:	call   415800 <test_json@@Base>
  406ba9:	xor    r9d,r9d
  406bac:	xor    r8d,r8d
  406baf:	xor    ecx,ecx
  406bb1:	lea    rdx,[rip+0x25980]        # 42c538 <_IO_stdin_used@@Base+0x538>
  406bb8:	lea    rsi,[rip+0x28921]        # 42f4e0 <_IO_stdin_used@@Base+0x34e0>
  406bbf:	lea    rdi,[rip+0x3321a]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406bc6:	or     ebx,eax
  406bc8:	mov    DWORD PTR [rsp],0x2bd
  406bcf:	call   415800 <test_json@@Base>
  406bd4:	xor    r9d,r9d
  406bd7:	xor    r8d,r8d
  406bda:	xor    ecx,ecx
  406bdc:	lea    rdx,[rip+0x28925]        # 42f508 <_IO_stdin_used@@Base+0x3508>
  406be3:	lea    rsi,[rip+0x2897e]        # 42f568 <_IO_stdin_used@@Base+0x3568>
  406bea:	lea    rdi,[rip+0x331ef]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406bf1:	mov    DWORD PTR [rsp],0x2c7
  406bf8:	or     ebx,eax
  406bfa:	call   415800 <test_json@@Base>
  406bff:	xor    r9d,r9d
  406c02:	xor    r8d,r8d
  406c05:	xor    ecx,ecx
  406c07:	lea    rdx,[rip+0x288fa]        # 42f508 <_IO_stdin_used@@Base+0x3508>
  406c0e:	lea    rsi,[rip+0x289b3]        # 42f5c8 <_IO_stdin_used@@Base+0x35c8>
  406c15:	lea    rdi,[rip+0x331c4]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406c1c:	or     ebx,eax
  406c1e:	mov    DWORD PTR [rsp],0x2cc
  406c25:	call   415800 <test_json@@Base>
  406c2a:	xor    r9d,r9d
  406c2d:	xor    r8d,r8d
  406c30:	xor    ecx,ecx
  406c32:	lea    rdx,[rip+0x289ff]        # 42f638 <_IO_stdin_used@@Base+0x3638>
  406c39:	lea    rsi,[rip+0x28a28]        # 42f668 <_IO_stdin_used@@Base+0x3668>
  406c40:	lea    rdi,[rip+0x33199]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406c47:	or     ebx,eax
  406c49:	mov    DWORD PTR [rsp],0x2db
  406c50:	call   415800 <test_json@@Base>
  406c55:	xor    r9d,r9d
  406c58:	xor    r8d,r8d
  406c5b:	xor    ecx,ecx
  406c5d:	lea    rdx,[rip+0x25afe]        # 42c762 <_IO_stdin_used@@Base+0x762>
  406c64:	lea    rsi,[rip+0x25b09]        # 42c774 <_IO_stdin_used@@Base+0x774>
  406c6b:	lea    rdi,[rip+0x3316e]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406c72:	or     ebx,eax
  406c74:	mov    DWORD PTR [rsp],0x2de
  406c7b:	call   415800 <test_json@@Base>
  406c80:	xor    r9d,r9d
  406c83:	xor    r8d,r8d
  406c86:	xor    ecx,ecx
  406c88:	lea    rdx,[rip+0x28a19]        # 42f6a8 <_IO_stdin_used@@Base+0x36a8>
  406c8f:	lea    rsi,[rip+0x28a5a]        # 42f6f0 <_IO_stdin_used@@Base+0x36f0>
  406c96:	lea    rdi,[rip+0x33143]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406c9d:	or     ebx,eax
  406c9f:	mov    DWORD PTR [rsp],0x2e2
  406ca6:	call   415800 <test_json@@Base>
  406cab:	xor    r9d,r9d
  406cae:	xor    r8d,r8d
  406cb1:	xor    ecx,ecx
  406cb3:	lea    rdx,[rip+0x289ee]        # 42f6a8 <_IO_stdin_used@@Base+0x36a8>
  406cba:	lea    rsi,[rip+0x28a77]        # 42f738 <_IO_stdin_used@@Base+0x3738>
  406cc1:	lea    rdi,[rip+0x33118]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406cc8:	or     ebx,eax
  406cca:	mov    DWORD PTR [rsp],0x2ee
  406cd1:	call   415800 <test_json@@Base>
  406cd6:	xor    r8d,r8d
  406cd9:	xor    ecx,ecx
  406cdb:	xor    r9d,r9d
  406cde:	lea    rdx,[rip+0x28af3]        # 42f7d8 <_IO_stdin_used@@Base+0x37d8>
  406ce5:	lea    rsi,[rip+0x28b14]        # 42f800 <_IO_stdin_used@@Base+0x3800>
  406cec:	lea    rdi,[rip+0x330ed]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406cf3:	or     ebx,eax
  406cf5:	mov    DWORD PTR [rsp],0x2fe
  406cfc:	call   415800 <test_json@@Base>
  406d01:	or     ebx,eax
  406d03:	lea    rdx,[rip+0x28b1e]        # 42f828 <_IO_stdin_used@@Base+0x3828>
  406d0a:	xor    r9d,r9d
  406d0d:	lea    rsi,[rip+0x28b44]        # 42f858 <_IO_stdin_used@@Base+0x3858>
  406d14:	xor    r8d,r8d
  406d17:	xor    ecx,ecx
  406d19:	lea    rdi,[rip+0x330c0]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406d20:	mov    DWORD PTR [rsp],0x302
  406d27:	call   415800 <test_json@@Base>
  406d2c:	xor    r9d,r9d
  406d2f:	xor    r8d,r8d
  406d32:	xor    ecx,ecx
  406d34:	lea    rdx,[rip+0x28b4d]        # 42f888 <_IO_stdin_used@@Base+0x3888>
  406d3b:	lea    rsi,[rip+0x28bb6]        # 42f8f8 <_IO_stdin_used@@Base+0x38f8>
  406d42:	lea    rdi,[rip+0x33097]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406d49:	or     ebx,eax
  406d4b:	mov    DWORD PTR [rsp],0x308
  406d52:	call   415800 <test_json@@Base>
  406d57:	xor    r9d,r9d
  406d5a:	xor    r8d,r8d
  406d5d:	xor    ecx,ecx
  406d5f:	lea    rdx,[rip+0x257d2]        # 42c538 <_IO_stdin_used@@Base+0x538>
  406d66:	lea    rsi,[rip+0x28c0b]        # 42f978 <_IO_stdin_used@@Base+0x3978>
  406d6d:	lea    rdi,[rip+0x3306c]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406d74:	or     ebx,eax
  406d76:	mov    DWORD PTR [rsp],0x30d
  406d7d:	call   415800 <test_json@@Base>
  406d82:	xor    r9d,r9d
  406d85:	xor    r8d,r8d
  406d88:	xor    ecx,ecx
  406d8a:	lea    rdx,[rip+0x28c5f]        # 42f9f0 <_IO_stdin_used@@Base+0x39f0>
  406d91:	lea    rsi,[rip+0x28cc8]        # 42fa60 <_IO_stdin_used@@Base+0x3a60>
  406d98:	lea    rdi,[rip+0x33041]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406d9f:	or     ebx,eax
  406da1:	mov    DWORD PTR [rsp],0x312
  406da8:	call   415800 <test_json@@Base>
  406dad:	xor    r9d,r9d
  406db0:	xor    r8d,r8d
  406db3:	xor    ecx,ecx
  406db5:	lea    rdx,[rip+0x28d24]        # 42fae0 <_IO_stdin_used@@Base+0x3ae0>
  406dbc:	lea    rsi,[rip+0x28d9d]        # 42fb60 <_IO_stdin_used@@Base+0x3b60>
  406dc3:	lea    rdi,[rip+0x33016]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406dca:	or     ebx,eax
  406dcc:	mov    DWORD PTR [rsp],0x317
  406dd3:	call   415800 <test_json@@Base>
  406dd8:	xor    r9d,r9d
  406ddb:	xor    r8d,r8d
  406dde:	xor    ecx,ecx
  406de0:	lea    rdx,[rip+0x28e09]        # 42fbf0 <_IO_stdin_used@@Base+0x3bf0>
  406de7:	lea    rsi,[rip+0x28e72]        # 42fc60 <_IO_stdin_used@@Base+0x3c60>
  406dee:	lea    rdi,[rip+0x32feb]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406df5:	or     ebx,eax
  406df7:	mov    DWORD PTR [rsp],0x31c
  406dfe:	call   415800 <test_json@@Base>
  406e03:	or     ebx,eax
  406e05:	xor    r9d,r9d
  406e08:	xor    r8d,r8d
  406e0b:	lea    rdx,[rip+0x28ece]        # 42fce0 <_IO_stdin_used@@Base+0x3ce0>
  406e12:	xor    ecx,ecx
  406e14:	lea    rsi,[rip+0x28f45]        # 42fd60 <_IO_stdin_used@@Base+0x3d60>
  406e1b:	lea    rdi,[rip+0x32fbe]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406e22:	mov    DWORD PTR [rsp],0x321
  406e29:	call   415800 <test_json@@Base>
  406e2e:	xor    ecx,ecx
  406e30:	xor    r9d,r9d
  406e33:	xor    r8d,r8d
  406e36:	lea    rdx,[rip+0x28fb3]        # 42fdf0 <_IO_stdin_used@@Base+0x3df0>
  406e3d:	lea    rsi,[rip+0x29034]        # 42fe78 <_IO_stdin_used@@Base+0x3e78>
  406e44:	lea    rdi,[rip+0x32f95]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  406e4b:	or     ebx,eax
  406e4d:	mov    DWORD PTR [rsp],0x326
  406e54:	call   415800 <test_json@@Base>
  406e59:	or     ebx,eax
  406e5b:	pop    rdx
  406e5c:	setne  al
  406e5f:	pop    rcx
  406e60:	movzx  eax,al
  406e63:	neg    eax
  406e65:	pop    rbx
  406e66:	ret    
  406e67:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406e70 <_start@@Base>:
  406e70:	endbr64 
  406e74:	xor    ebp,ebp
  406e76:	mov    r9,rdx
  406e79:	pop    rsi
  406e7a:	mov    rdx,rsp
  406e7d:	and    rsp,0xfffffffffffffff0
  406e81:	push   rax
  406e82:	push   rsp
  406e83:	mov    r8,0x42bca0
  406e8a:	mov    rcx,0x42bc30
  406e91:	mov    rdi,0x406290
  406e98:	call   QWORD PTR [rip+0x3313a]        # 439fd8 <__libc_start_main@GLIBC_2.2.5>
  406e9e:	hlt    
  406e9f:	nop
  406ea0:	endbr64 
  406ea4:	ret    
  406ea5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406eaf:	nop
  406eb0:	mov    eax,0x43a850
  406eb5:	cmp    rax,0x43a850
  406ebb:	je     406ed0 <_start@@Base+0x60>
  406ebd:	mov    eax,0x0
  406ec2:	test   rax,rax
  406ec5:	je     406ed0 <_start@@Base+0x60>
  406ec7:	mov    edi,0x43a850
  406ecc:	jmp    rax
  406ece:	xchg   ax,ax
  406ed0:	ret    
  406ed1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406edc:	nop    DWORD PTR [rax+0x0]
  406ee0:	mov    esi,0x43a850
  406ee5:	sub    rsi,0x43a850
  406eec:	sar    rsi,0x3
  406ef0:	mov    rax,rsi
  406ef3:	shr    rax,0x3f
  406ef7:	add    rsi,rax
  406efa:	sar    rsi,1
  406efd:	je     406f10 <_start@@Base+0xa0>
  406eff:	mov    eax,0x0
  406f04:	test   rax,rax
  406f07:	je     406f10 <_start@@Base+0xa0>
  406f09:	mov    edi,0x43a850
  406f0e:	jmp    rax
  406f10:	ret    
  406f11:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406f1c:	nop    DWORD PTR [rax+0x0]
  406f20:	endbr64 
  406f24:	cmp    BYTE PTR [rip+0x33925],0x0        # 43a850 <__bss_start@@Base>
  406f2b:	jne    406f40 <_start@@Base+0xd0>
  406f2d:	push   rbp
  406f2e:	mov    rbp,rsp
  406f31:	call   406eb0 <_start@@Base+0x40>
  406f36:	mov    BYTE PTR [rip+0x33913],0x1        # 43a850 <__bss_start@@Base>
  406f3d:	pop    rbp
  406f3e:	ret    
  406f3f:	nop
  406f40:	ret    
  406f41:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406f4c:	nop    DWORD PTR [rax+0x0]
  406f50:	endbr64 
  406f54:	jmp    406ee0 <_start@@Base+0x70>
  406f56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406f60:	sub    rsi,rdi
  406f63:	cmp    rsi,0x8
  406f67:	ja     406f80 <_start@@Base+0x110>
  406f69:	lea    rdx,[rip+0x25094]        # 42c004 <_IO_stdin_used@@Base+0x4>
  406f70:	movsxd rax,DWORD PTR [rdx+rsi*4]
  406f74:	add    rax,rdx
  406f77:	notrack jmp rax
  406f7a:	nop    WORD PTR [rax+rax*1+0x0]
  406f80:	movsx  rax,BYTE PTR [rdi+0x7]
  406f85:	movsx  rdx,BYTE PTR [rdi+0x6]
  406f8a:	mov    rcx,rdx
  406f8d:	shl    rcx,0x8
  406f91:	or     rcx,rax
  406f94:	movsx  rdx,BYTE PTR [rdi+0x5]
  406f99:	mov    rax,rdx
  406f9c:	shl    rax,0x10
  406fa0:	or     rcx,rax
  406fa3:	movsx  rdx,BYTE PTR [rdi+0x4]
  406fa8:	mov    rax,rdx
  406fab:	shl    rax,0x18
  406faf:	or     rax,rcx
  406fb2:	movsx  rdx,BYTE PTR [rdi+0x3]
  406fb7:	shl    rdx,0x20
  406fbb:	or     rax,rdx
  406fbe:	movsx  rdx,BYTE PTR [rdi+0x2]
  406fc3:	mov    rcx,rdx
  406fc6:	shl    rcx,0x28
  406fca:	or     rcx,rax
  406fcd:	movsx  rdx,BYTE PTR [rdi+0x1]
  406fd2:	mov    rax,rdx
  406fd5:	shl    rax,0x30
  406fd9:	or     rcx,rax
  406fdc:	movsx  rdx,BYTE PTR [rdi]
  406fe0:	mov    rax,rdx
  406fe3:	shl    rax,0x38
  406fe7:	or     rax,rcx
  406fea:	ret    
  406feb:	nop    DWORD PTR [rax+rax*1+0x0]
  406ff0:	xor    eax,eax
  406ff2:	jmp    406f85 <_start@@Base+0x115>
  406ff4:	nop    DWORD PTR [rax+0x0]
  406ff8:	xor    ecx,ecx
  406ffa:	jmp    406fdc <_start@@Base+0x16c>
  406ffc:	nop    DWORD PTR [rax+0x0]
  407000:	xor    ecx,ecx
  407002:	jmp    406fcd <_start@@Base+0x15d>
  407004:	nop    DWORD PTR [rax+0x0]
  407008:	xor    eax,eax
  40700a:	jmp    406fbe <_start@@Base+0x14e>
  40700c:	nop    DWORD PTR [rax+0x0]
  407010:	xor    eax,eax
  407012:	jmp    406fb2 <_start@@Base+0x142>
  407014:	nop    DWORD PTR [rax+0x0]
  407018:	xor    ecx,ecx
  40701a:	jmp    406fa3 <_start@@Base+0x133>
  40701c:	nop    DWORD PTR [rax+0x0]
  407020:	xor    ecx,ecx
  407022:	jmp    406f94 <_start@@Base+0x124>
  407027:	nop    WORD PTR [rax+rax*1+0x0]
  407030:	xor    eax,eax
  407032:	ret    
  407033:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40703e:	xchg   ax,ax
  407040:	endbr64 
  407044:	xor    eax,eax
  407046:	cmp    dil,0x4
  40704a:	setbe  al
  40704d:	ret    
  40704e:	xchg   ax,ax
  407050:	endbr64 
  407054:	cmp    dil,0xb
  407058:	ja     407078 <_start@@Base+0x208>
  40705a:	mov    eax,0x1
  40705f:	cmp    dil,0x8
  407063:	jae    407088 <_start@@Base+0x218>
  407065:	test   dil,dil
  407068:	je     407088 <_start@@Base+0x218>
  40706a:	xor    eax,eax
  40706c:	cmp    dil,0x2
  407070:	sete   al
  407073:	ret    
  407074:	nop    DWORD PTR [rax+0x0]
  407078:	xor    eax,eax
  40707a:	cmp    dil,0xff
  40707e:	sete   al
  407081:	ret    
  407082:	nop    WORD PTR [rax+rax*1+0x0]
  407088:	ret    
  407089:	nop    DWORD PTR [rax+0x0]
  407090:	endbr64 
  407094:	ret    
  407095:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4070a0:	endbr64 
  4070a4:	xor    eax,eax
  4070a6:	ret    
  4070a7:	nop    WORD PTR [rax+rax*1+0x0]
  4070b0:	endbr64 
  4070b4:	mov    ecx,0x4
  4070b9:	mov    edx,0x4
  4070be:	xor    esi,esi
  4070c0:	jmp    41b0a0 <flatcc_verify_field@@Base>
  4070c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4070d0:	endbr64 
  4070d4:	push   rbp
  4070d5:	lea    r9,[rip+0x134]        # 407210 <_start@@Base+0x3a0>
  4070dc:	mov    rbp,rsi
  4070df:	push   rbx
  4070e0:	mov    r8d,0x15
  4070e6:	mov    rbx,rdi
  4070e9:	sub    rsp,0x8
  4070ed:	lea    rcx,[rip+0x25048]        # 42c13c <_IO_stdin_used@@Base+0x13c>
  4070f4:	xor    edx,edx
  4070f6:	call   42a850 <flatcc_json_printer_table_field@@Base>
  4070fb:	mov    rsi,rbp
  4070fe:	mov    rdi,rbx
  407101:	lea    r9,[rip+0xb8]        # 4071c0 <_start@@Base+0x350>
  407108:	mov    r8d,0x16
  40710e:	lea    rcx,[rip+0x2503d]        # 42c152 <_IO_stdin_used@@Base+0x152>
  407115:	mov    edx,0x1
  40711a:	call   42a850 <flatcc_json_printer_table_field@@Base>
  40711f:	add    rsp,0x8
  407123:	mov    rdi,rbx
  407126:	pop    rbx
  407127:	mov    rsi,rbp
  40712a:	lea    r9,[rip+0x3f]        # 407170 <_start@@Base+0x300>
  407131:	mov    r8d,0x16
  407137:	lea    rcx,[rip+0x2502b]        # 42c169 <_IO_stdin_used@@Base+0x169>
  40713e:	mov    edx,0x2
  407143:	pop    rbp
  407144:	jmp    42a850 <flatcc_json_printer_table_field@@Base>
  407149:	nop    DWORD PTR [rax+0x0]
  407150:	endbr64 
  407154:	xor    r9d,r9d
  407157:	mov    r8d,0x13
  40715d:	lea    rcx,[rip+0x2501c]        # 42c180 <_IO_stdin_used@@Base+0x180>
  407164:	xor    edx,edx
  407166:	jmp    423580 <flatcc_json_printer_int32_field@@Base>
  40716b:	nop    DWORD PTR [rax+rax*1+0x0]
  407170:	endbr64 
  407174:	push   rbp
  407175:	xor    r9d,r9d
  407178:	mov    r8d,0xf
  40717e:	push   rbx
  40717f:	lea    rcx,[rip+0x2500e]        # 42c194 <_IO_stdin_used@@Base+0x194>
  407186:	xor    edx,edx
  407188:	sub    rsp,0x8
  40718c:	mov    rbx,rdi
  40718f:	mov    rbp,rsi
  407192:	call   423730 <flatcc_json_printer_int64_field@@Base>
  407197:	add    rsp,0x8
  40719b:	mov    rdi,rbx
  40719e:	pop    rbx
  40719f:	mov    rsi,rbp
  4071a2:	xor    r9d,r9d
  4071a5:	mov    r8d,0x15
  4071ab:	lea    rcx,[rip+0x24ff2]        # 42c1a4 <_IO_stdin_used@@Base+0x1a4>
  4071b2:	mov    edx,0x1
  4071b7:	pop    rbp
  4071b8:	jmp    422ef0 <flatcc_json_printer_uint32_field@@Base>
  4071bd:	nop    DWORD PTR [rax]
  4071c0:	endbr64 
  4071c4:	push   rbp
  4071c5:	xor    r9d,r9d
  4071c8:	mov    r8d,0xf
  4071ce:	push   rbx
  4071cf:	lea    rcx,[rip+0x24fbe]        # 42c194 <_IO_stdin_used@@Base+0x194>
  4071d6:	xor    edx,edx
  4071d8:	sub    rsp,0x8
  4071dc:	mov    rbx,rdi
  4071df:	mov    rbp,rsi
  4071e2:	call   423730 <flatcc_json_printer_int64_field@@Base>
  4071e7:	add    rsp,0x8
  4071eb:	mov    rdi,rbx
  4071ee:	pop    rbx
  4071ef:	mov    rsi,rbp
  4071f2:	xor    r9d,r9d
  4071f5:	mov    r8d,0x10
  4071fb:	lea    rcx,[rip+0x24fb8]        # 42c1ba <_IO_stdin_used@@Base+0x1ba>
  407202:	mov    edx,0x1
  407207:	pop    rbp
  407208:	jmp    422ef0 <flatcc_json_printer_uint32_field@@Base>
  40720d:	nop    DWORD PTR [rax]
  407210:	endbr64 
  407214:	push   rbp
  407215:	mov    r8d,0x4
  40721b:	mov    rbp,rsi
  40721e:	push   rbx
  40721f:	lea    rcx,[rip+0x24fa5]        # 42c1cb <_IO_stdin_used@@Base+0x1cb>
  407226:	mov    rbx,rdi
  407229:	sub    rsp,0x8
  40722d:	xor    edx,edx
  40722f:	call   422700 <flatcc_json_printer_string_field@@Base>
  407234:	xor    r9d,r9d
  407237:	mov    rsi,rbp
  40723a:	mov    rdi,rbx
  40723d:	mov    r8d,0x9
  407243:	lea    rcx,[rip+0x24f86]        # 42c1d0 <_IO_stdin_used@@Base+0x1d0>
  40724a:	mov    edx,0x1
  40724f:	call   422ef0 <flatcc_json_printer_uint32_field@@Base>
  407254:	mov    rsi,rbp
  407257:	mov    rdi,rbx
  40725a:	mov    r8d,0x4
  407260:	lea    rcx,[rip+0x24f73]        # 42c1da <_IO_stdin_used@@Base+0x1da>
  407267:	mov    edx,0x2
  40726c:	call   422700 <flatcc_json_printer_string_field@@Base>
  407271:	xor    r9d,r9d
  407274:	mov    rsi,rbp
  407277:	mov    rdi,rbx
  40727a:	mov    r8d,0x8
  407280:	lea    rcx,[rip+0x24f58]        # 42c1df <_IO_stdin_used@@Base+0x1df>
  407287:	mov    edx,0x3
  40728c:	call   423730 <flatcc_json_printer_int64_field@@Base>
  407291:	mov    rsi,rbp
  407294:	mov    rdi,rbx
  407297:	mov    r8d,0x4
  40729d:	lea    rcx,[rip+0x24f44]        # 42c1e8 <_IO_stdin_used@@Base+0x1e8>
  4072a4:	mov    edx,0x4
  4072a9:	call   422700 <flatcc_json_printer_string_field@@Base>
  4072ae:	mov    rsi,rbp
  4072b1:	mov    rdi,rbx
  4072b4:	xor    r9d,r9d
  4072b7:	mov    r8d,0x8
  4072bd:	lea    rcx,[rip+0x24f29]        # 42c1ed <_IO_stdin_used@@Base+0x1ed>
  4072c4:	mov    edx,0x5
  4072c9:	call   423730 <flatcc_json_printer_int64_field@@Base>
  4072ce:	mov    rsi,rbp
  4072d1:	mov    rdi,rbx
  4072d4:	xor    r9d,r9d
  4072d7:	mov    r8d,0x9
  4072dd:	lea    rcx,[rip+0x24f12]        # 42c1f6 <_IO_stdin_used@@Base+0x1f6>
  4072e4:	mov    edx,0x6
  4072e9:	call   422ef0 <flatcc_json_printer_uint32_field@@Base>
  4072ee:	mov    rsi,rbp
  4072f1:	mov    rdi,rbx
  4072f4:	xor    r9d,r9d
  4072f7:	mov    r8d,0x8
  4072fd:	lea    rcx,[rip+0x24efc]        # 42c200 <_IO_stdin_used@@Base+0x200>
  407304:	mov    edx,0x7
  407309:	call   423730 <flatcc_json_printer_int64_field@@Base>
  40730e:	add    rsp,0x8
  407312:	mov    rdi,rbx
  407315:	pop    rbx
  407316:	mov    rsi,rbp
  407319:	xor    r9d,r9d
  40731c:	mov    r8d,0x9
  407322:	lea    rcx,[rip+0x24ee0]        # 42c209 <_IO_stdin_used@@Base+0x209>
  407329:	mov    edx,0x8
  40732e:	pop    rbp
  40732f:	jmp    422ef0 <flatcc_json_printer_uint32_field@@Base>
  407334:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40733f:	nop
  407340:	endbr64 
  407344:	push   r12
  407346:	xor    edx,edx
  407348:	lea    r9,[rip+0xb21]        # 407e70 <_start@@Base+0x1000>
  40734f:	push   rbp
  407350:	mov    r8d,0x3
  407356:	mov    rbp,rsi
  407359:	push   rbx
  40735a:	lea    rcx,[rip+0x24eb2]        # 42c213 <_IO_stdin_used@@Base+0x213>
  407361:	mov    rbx,rdi
  407364:	call   42b170 <flatcc_json_printer_struct_field@@Base>
  407369:	mov    rsi,rbp
  40736c:	mov    rdi,rbx
  40736f:	mov    r9d,0x96
  407375:	mov    r8d,0x4
  40737b:	lea    rcx,[rip+0x24e95]        # 42c217 <_IO_stdin_used@@Base+0x217>
  407382:	mov    edx,0x1
  407387:	call   4233c0 <flatcc_json_printer_int16_field@@Base>
  40738c:	mov    r9d,0x64
  407392:	mov    rsi,rbp
  407395:	mov    rdi,rbx
  407398:	mov    r8d,0x2
  40739e:	lea    rcx,[rip+0x24e77]        # 42c21c <_IO_stdin_used@@Base+0x21c>
  4073a5:	mov    edx,0x2
  4073aa:	call   4233c0 <flatcc_json_printer_int16_field@@Base>
  4073af:	mov    rsi,rbp
  4073b2:	mov    rdi,rbx
  4073b5:	mov    r8d,0x4
  4073bb:	lea    rcx,[rip+0x24e5d]        # 42c21f <_IO_stdin_used@@Base+0x21f>
  4073c2:	mov    edx,0x3
  4073c7:	call   422700 <flatcc_json_printer_string_field@@Base>
  4073cc:	mov    rsi,rbp
  4073cf:	mov    rdi,rbx
  4073d2:	mov    r8d,0x9
  4073d8:	lea    rcx,[rip+0x24e45]        # 42c224 <_IO_stdin_used@@Base+0x224>
  4073df:	mov    edx,0x5
  4073e4:	call   426a70 <flatcc_json_printer_uint8_vector_field@@Base>
  4073e9:	sub    rsp,0x8
  4073ed:	lea    rax,[rip+0x9ac]        # 407da0 <_start@@Base+0xf30>
  4073f4:	push   rax
  4073f5:	mov    rsi,rbp
  4073f8:	mov    rdi,rbx
  4073fb:	mov    r9d,0x8
  407401:	mov    r8d,0x5
  407407:	lea    rcx,[rip+0x24e20]        # 42c22e <_IO_stdin_used@@Base+0x22e>
  40740e:	mov    edx,0x6
  407413:	call   424500 <flatcc_json_printer_int8_enum_field@@Base>
  407418:	lea    rax,[rip+0x571]        # 407990 <_start@@Base+0xb20>
  40741f:	mov    rsi,rbp
  407422:	mov    rdi,rbx
  407425:	lea    r9,[rip+0x1fd4]        # 409400 <_start@@Base+0x2590>
  40742c:	mov    r8d,0x4
  407432:	lea    rcx,[rip+0x24f6d]        # 42c3a6 <_IO_stdin_used@@Base+0x3a6>
  407439:	mov    edx,0x8
  40743e:	mov    QWORD PTR [rsp],rax
  407442:	lea    r12,[rip+0x4e7]        # 407930 <_start@@Base+0xac0>
  407449:	call   42ab00 <flatcc_json_printer_union_field@@Base>
  40744e:	mov    r9d,0x4
  407454:	mov    rsi,rbp
  407457:	mov    rdi,rbx
  40745a:	mov    r8d,0x5
  407460:	lea    rcx,[rip+0x24dcd]        # 42c234 <_IO_stdin_used@@Base+0x234>
  407467:	mov    edx,0x9
  40746c:	mov    QWORD PTR [rsp],r12
  407470:	call   4299d0 <flatcc_json_printer_struct_vector_field@@Base>
  407475:	mov    rsi,rbp
  407478:	mov    rdi,rbx
  40747b:	mov    r8d,0x11
  407481:	lea    rcx,[rip+0x24db2]        # 42c23a <_IO_stdin_used@@Base+0x23a>
  407488:	mov    edx,0xa
  40748d:	call   429cd0 <flatcc_json_printer_string_vector_field@@Base>
  407492:	mov    rsi,rbp
  407495:	mov    rdi,rbx
  407498:	lea    r9,[rip+0xfffffffffffffea1]        # 407340 <_start@@Base+0x4d0>
  40749f:	mov    r8d,0x11
  4074a5:	lea    rcx,[rip+0x24da0]        # 42c24c <_IO_stdin_used@@Base+0x24c>
  4074ac:	mov    edx,0xb
  4074b1:	call   42a040 <flatcc_json_printer_table_vector_field@@Base>
  4074b6:	mov    rsi,rbp
  4074b9:	mov    rdi,rbx
  4074bc:	lea    r9,[rip+0xfffffffffffffe7d]        # 407340 <_start@@Base+0x4d0>
  4074c3:	mov    r8d,0x5
  4074c9:	lea    rcx,[rip+0x24d8e]        # 42c25e <_IO_stdin_used@@Base+0x25e>
  4074d0:	mov    edx,0xc
  4074d5:	call   42a850 <flatcc_json_printer_table_field@@Base>
  4074da:	lea    rax,[rip+0xfffffffffffffe5f]        # 407340 <_start@@Base+0x4d0>
  4074e1:	xor    r9d,r9d
  4074e4:	mov    rsi,rbp
  4074e7:	mov    rdi,rbx
  4074ea:	mov    r8d,0x14
  4074f0:	lea    rcx,[rip+0x24d6d]        # 42c264 <_IO_stdin_used@@Base+0x264>
  4074f7:	mov    edx,0xd
  4074fc:	mov    QWORD PTR [rsp],rax
  407500:	call   42b710 <flatcc_json_printer_table_as_nested_root@@Base>
  407505:	mov    rsi,rbp
  407508:	mov    rdi,rbx
  40750b:	lea    r9,[rip+0x3ae]        # 4078c0 <_start@@Base+0xa50>
  407512:	mov    r8d,0x9
  407518:	lea    rcx,[rip+0x24d5a]        # 42c279 <_IO_stdin_used@@Base+0x279>
  40751f:	mov    edx,0xe
  407524:	call   42a850 <flatcc_json_printer_table_field@@Base>
  407529:	mov    rsi,rbp
  40752c:	mov    rdi,rbx
  40752f:	mov    r9d,0x1
  407535:	mov    r8d,0x8
  40753b:	lea    rcx,[rip+0x24d41]        # 42c283 <_IO_stdin_used@@Base+0x283>
  407542:	mov    edx,0xf
  407547:	call   4238e0 <flatcc_json_printer_bool_field@@Base>
  40754c:	xor    r9d,r9d
  40754f:	mov    rsi,rbp
  407552:	mov    rdi,rbx
  407555:	mov    r8d,0x10
  40755b:	lea    rcx,[rip+0x24d2a]        # 42c28c <_IO_stdin_used@@Base+0x28c>
  407562:	mov    edx,0x10
  407567:	call   423580 <flatcc_json_printer_int32_field@@Base>
  40756c:	xor    r9d,r9d
  40756f:	mov    rsi,rbp
  407572:	mov    rdi,rbx
  407575:	mov    r8d,0x10
  40757b:	lea    rcx,[rip+0x24d1b]        # 42c29d <_IO_stdin_used@@Base+0x29d>
  407582:	mov    edx,0x11
  407587:	call   422ef0 <flatcc_json_printer_uint32_field@@Base>
  40758c:	xor    r9d,r9d
  40758f:	mov    rsi,rbp
  407592:	mov    rdi,rbx
  407595:	mov    r8d,0x10
  40759b:	lea    rcx,[rip+0x24d0c]        # 42c2ae <_IO_stdin_used@@Base+0x2ae>
  4075a2:	mov    edx,0x12
  4075a7:	call   423730 <flatcc_json_printer_int64_field@@Base>
  4075ac:	xor    r9d,r9d
  4075af:	mov    rsi,rbp
  4075b2:	mov    rdi,rbx
  4075b5:	mov    r8d,0x10
  4075bb:	lea    rcx,[rip+0x24cfd]        # 42c2bf <_IO_stdin_used@@Base+0x2bf>
  4075c2:	mov    edx,0x13
  4075c7:	call   423080 <flatcc_json_printer_uint64_field@@Base>
  4075cc:	xor    r9d,r9d
  4075cf:	mov    rsi,rbp
  4075d2:	mov    rdi,rbx
  4075d5:	mov    r8d,0x11
  4075db:	lea    rcx,[rip+0x24cee]        # 42c2d0 <_IO_stdin_used@@Base+0x2d0>
  4075e2:	mov    edx,0x14
  4075e7:	call   423580 <flatcc_json_printer_int32_field@@Base>
  4075ec:	xor    r9d,r9d
  4075ef:	mov    rsi,rbp
  4075f2:	mov    rdi,rbx
  4075f5:	mov    r8d,0x11
  4075fb:	lea    rcx,[rip+0x24ce0]        # 42c2e2 <_IO_stdin_used@@Base+0x2e2>
  407602:	mov    edx,0x15
  407607:	call   422ef0 <flatcc_json_printer_uint32_field@@Base>
  40760c:	xor    r9d,r9d
  40760f:	mov    rsi,rbp
  407612:	mov    rdi,rbx
  407615:	mov    r8d,0x11
  40761b:	lea    rcx,[rip+0x24cd2]        # 42c2f4 <_IO_stdin_used@@Base+0x2f4>
  407622:	mov    edx,0x16
  407627:	call   423730 <flatcc_json_printer_int64_field@@Base>
  40762c:	xor    r9d,r9d
  40762f:	mov    rsi,rbp
  407632:	mov    rdi,rbx
  407635:	mov    r8d,0x11
  40763b:	lea    rcx,[rip+0x24cc4]        # 42c306 <_IO_stdin_used@@Base+0x306>
  407642:	mov    edx,0x17
  407647:	call   423080 <flatcc_json_printer_uint64_field@@Base>
  40764c:	mov    rsi,rbp
  40764f:	mov    rdi,rbx
  407652:	mov    r8d,0x10
  407658:	lea    rcx,[rip+0x24cb9]        # 42c318 <_IO_stdin_used@@Base+0x318>
  40765f:	mov    edx,0x18
  407664:	call   427d90 <flatcc_json_printer_bool_vector_field@@Base>
  407669:	vmovss xmm0,DWORD PTR [rip+0x28897]        # 42ff08 <_IO_stdin_used@@Base+0x3f08>
  407671:	mov    rsi,rbp
  407674:	mov    rdi,rbx
  407677:	mov    r8d,0x5
  40767d:	lea    rcx,[rip+0x24ca5]        # 42c329 <_IO_stdin_used@@Base+0x329>
  407684:	mov    edx,0x19
  407689:	call   423a80 <flatcc_json_printer_float_field@@Base>
  40768e:	vmovss xmm0,DWORD PTR [rip+0x28876]        # 42ff0c <_IO_stdin_used@@Base+0x3f0c>
  407696:	mov    rsi,rbp
  407699:	mov    rdi,rbx
  40769c:	mov    r8d,0x6
  4076a2:	lea    rcx,[rip+0x24c86]        # 42c32f <_IO_stdin_used@@Base+0x32f>
  4076a9:	mov    edx,0x1a
  4076ae:	call   423a80 <flatcc_json_printer_float_field@@Base>
  4076b3:	vxorps xmm0,xmm0,xmm0
  4076b7:	mov    rsi,rbp
  4076ba:	mov    rdi,rbx
  4076bd:	mov    r8d,0x6
  4076c3:	lea    rcx,[rip+0x24c6c]        # 42c336 <_IO_stdin_used@@Base+0x336>
  4076ca:	mov    edx,0x1b
  4076cf:	call   423a80 <flatcc_json_printer_float_field@@Base>
  4076d4:	mov    rsi,rbp
  4076d7:	mov    rdi,rbx
  4076da:	mov    r8d,0x12
  4076e0:	lea    rcx,[rip+0x24c56]        # 42c33d <_IO_stdin_used@@Base+0x33d>
  4076e7:	mov    edx,0x1c
  4076ec:	call   429cd0 <flatcc_json_printer_string_vector_field@@Base>
  4076f1:	lea    rax,[rip+0x168]        # 407860 <_start@@Base+0x9f0>
  4076f8:	mov    r9d,0x8
  4076fe:	mov    rsi,rbp
  407701:	mov    rdi,rbx
  407704:	mov    r8d,0x17
  40770a:	lea    rcx,[rip+0x24c3f]        # 42c350 <_IO_stdin_used@@Base+0x350>
  407711:	mov    edx,0x1d
  407716:	mov    QWORD PTR [rsp],rax
  40771a:	call   4299d0 <flatcc_json_printer_struct_vector_field@@Base>
  40771f:	mov    rsi,rbp
  407722:	mov    rdi,rbx
  407725:	mov    r8d,0x4
  40772b:	lea    rcx,[rip+0x24c36]        # 42c368 <_IO_stdin_used@@Base+0x368>
  407732:	mov    edx,0x1e
  407737:	call   426a70 <flatcc_json_printer_uint8_vector_field@@Base>
  40773c:	mov    r9d,0x4
  407742:	mov    rsi,rbp
  407745:	mov    rdi,rbx
  407748:	mov    r8d,0x5
  40774e:	lea    rcx,[rip+0x24c18]        # 42c36d <_IO_stdin_used@@Base+0x36d>
  407755:	mov    edx,0x1f
  40775a:	mov    QWORD PTR [rsp],r12
  40775e:	call   4299d0 <flatcc_json_printer_struct_vector_field@@Base>
  407763:	mov    rsi,rbp
  407766:	mov    rdi,rbx
  407769:	mov    r8d,0xf
  40776f:	lea    rcx,[rip+0x24bfd]        # 42c373 <_IO_stdin_used@@Base+0x373>
  407776:	mov    edx,0x20
  40777b:	call   427b30 <flatcc_json_printer_int64_vector_field@@Base>
  407780:	mov    rsi,rbp
  407783:	mov    rdi,rbx
  407786:	mov    r8d,0x11
  40778c:	lea    rcx,[rip+0x24bf0]        # 42c383 <_IO_stdin_used@@Base+0x383>
  407793:	mov    edx,0x21
  407798:	call   428280 <flatcc_json_printer_double_vector_field@@Base>
  40779d:	mov    rsi,rbp
  4077a0:	mov    rdi,rbx
  4077a3:	lea    r9,[rip+0xfffffffffffff8e6]        # 407090 <_start@@Base+0x220>
  4077aa:	mov    r8d,0x15
  4077b0:	lea    rcx,[rip+0x24bde]        # 42c395 <_IO_stdin_used@@Base+0x395>
  4077b7:	mov    edx,0x22
  4077bc:	call   42a850 <flatcc_json_printer_table_field@@Base>
  4077c1:	pop    rax
  4077c2:	pop    rdx
  4077c3:	mov    rdi,rbx
  4077c6:	pop    rbx
  4077c7:	mov    rsi,rbp
  4077ca:	pop    rbp
  4077cb:	lea    r9,[rip+0x1e]        # 4077f0 <_start@@Base+0x980>
  4077d2:	mov    r8d,0xa
  4077d8:	lea    rcx,[rip+0x24bcc]        # 42c3ab <_IO_stdin_used@@Base+0x3ab>
  4077df:	mov    edx,0x23
  4077e4:	pop    r12
  4077e6:	jmp    42a850 <flatcc_json_printer_table_field@@Base>
  4077eb:	nop    DWORD PTR [rax+rax*1+0x0]
  4077f0:	endbr64 
  4077f4:	push   rbp
  4077f5:	xor    r9d,r9d
  4077f8:	mov    rbp,rsi
  4077fb:	push   rbx
  4077fc:	mov    r8d,0x4
  407802:	mov    rbx,rdi
  407805:	sub    rsp,0x8
  407809:	lea    rcx,[rip+0x24ba9]        # 42c3b9 <_IO_stdin_used@@Base+0x3b9>
  407810:	xor    edx,edx
  407812:	call   4228a0 <flatcc_json_printer_uint8_vector_base64_field@@Base>
  407817:	mov    rsi,rbp
  40781a:	mov    rdi,rbx
  40781d:	mov    r9d,0x1
  407823:	mov    r8d,0x7
  407829:	lea    rcx,[rip+0x24b86]        # 42c3b6 <_IO_stdin_used@@Base+0x3b6>
  407830:	mov    edx,0x1
  407835:	call   4228a0 <flatcc_json_printer_uint8_vector_base64_field@@Base>
  40783a:	add    rsp,0x8
  40783e:	mov    rdi,rbx
  407841:	pop    rbx
  407842:	mov    rsi,rbp
  407845:	xor    r9d,r9d
  407848:	mov    r8d,0x6
  40784e:	lea    rcx,[rip+0x24b69]        # 42c3be <_IO_stdin_used@@Base+0x3be>
  407855:	mov    edx,0x2
  40785a:	pop    rbp
  40785b:	jmp    4228a0 <flatcc_json_printer_uint8_vector_base64_field@@Base>
  407860:	endbr64 
  407864:	push   rbp
  407865:	mov    rdx,rsi
  407868:	mov    rbp,rsi
  40786b:	push   rbx
  40786c:	mov    r9d,0x2
  407872:	lea    r8,[rip+0x24b4c]        # 42c3c5 <_IO_stdin_used@@Base+0x3c5>
  407879:	sub    rsp,0x8
  40787d:	xor    ecx,ecx
  40787f:	xor    esi,esi
  407881:	mov    rbx,rdi
  407884:	call   425110 <flatcc_json_printer_uint32_struct_field@@Base>
  407889:	add    rsp,0x8
  40788d:	mov    rdi,rbx
  407890:	pop    rbx
  407891:	mov    rdx,rbp
  407894:	mov    r9d,0x8
  40789a:	lea    r8,[rip+0x24b27]        # 42c3c8 <_IO_stdin_used@@Base+0x3c8>
  4078a1:	mov    ecx,0x4
  4078a6:	mov    esi,0x1
  4078ab:	pop    rbp
  4078ac:	jmp    425110 <flatcc_json_printer_uint32_struct_field@@Base>
  4078b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4078bc:	nop    DWORD PTR [rax+0x0]
  4078c0:	endbr64 
  4078c4:	push   rbp
  4078c5:	mov    r8d,0x2
  4078cb:	mov    rbp,rsi
  4078ce:	push   rbx
  4078cf:	lea    rcx,[rip+0x24aef]        # 42c3c5 <_IO_stdin_used@@Base+0x3c5>
  4078d6:	mov    rbx,rdi
  4078d9:	sub    rsp,0x8
  4078dd:	xor    edx,edx
  4078df:	call   422700 <flatcc_json_printer_string_field@@Base>
  4078e4:	mov    rsi,rbp
  4078e7:	mov    rdi,rbx
  4078ea:	xor    r9d,r9d
  4078ed:	mov    r8d,0x3
  4078f3:	lea    rcx,[rip+0x24ad7]        # 42c3d1 <_IO_stdin_used@@Base+0x3d1>
  4078fa:	mov    edx,0x1
  4078ff:	call   423730 <flatcc_json_printer_int64_field@@Base>
  407904:	add    rsp,0x8
  407908:	mov    rdi,rbx
  40790b:	pop    rbx
  40790c:	mov    rsi,rbp
  40790f:	xor    r9d,r9d
  407912:	mov    r8d,0x5
  407918:	lea    rcx,[rip+0x29c7c]        # 43159b <flatcc_builder_padding_base@@Base+0xb7b>
  40791f:	mov    edx,0x2
  407924:	pop    rbp
  407925:	jmp    422d50 <flatcc_json_printer_uint16_field@@Base>
  40792a:	nop    WORD PTR [rax+rax*1+0x0]
  407930:	endbr64 
  407934:	push   rbp
  407935:	mov    rdx,rsi
  407938:	mov    rbp,rsi
  40793b:	push   rbx
  40793c:	mov    r9d,0x1
  407942:	lea    r8,[rip+0x24997]        # 42c2e0 <_IO_stdin_used@@Base+0x2e0>
  407949:	sub    rsp,0x8
  40794d:	xor    ecx,ecx
  40794f:	xor    esi,esi
  407951:	mov    rbx,rdi
  407954:	call   4254f0 <flatcc_json_printer_int16_struct_field@@Base>
  407959:	add    rsp,0x8
  40795d:	mov    rdi,rbx
  407960:	pop    rbx
  407961:	mov    rdx,rbp
  407964:	mov    r9d,0x1
  40796a:	lea    r8,[rip+0x2486c]        # 42c1dd <_IO_stdin_used@@Base+0x1dd>
  407971:	mov    ecx,0x2
  407976:	mov    esi,0x1
  40797b:	pop    rbp
  40797c:	jmp    425390 <flatcc_json_printer_int8_struct_field@@Base>
  407981:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40798c:	nop    DWORD PTR [rax+0x0]
  407990:	endbr64 
  407994:	movzx  eax,BYTE PTR [rsi+0xc]
  407998:	cmp    al,0x2
  40799a:	je     4079f0 <_start@@Base+0xb80>
  40799c:	jbe    4079b8 <_start@@Base+0xb48>
  40799e:	cmp    al,0x3
  4079a0:	je     4079e0 <_start@@Base+0xb70>
  4079a2:	cmp    al,0x4
  4079a4:	jne    4079d0 <_start@@Base+0xb60>
  4079a6:	lea    rdx,[rip+0x53]        # 407a00 <_start@@Base+0xb90>
  4079ad:	jmp    42add0 <flatcc_json_printer_union_table@@Base>
  4079b2:	nop    WORD PTR [rax+rax*1+0x0]
  4079b8:	cmp    al,0x1
  4079ba:	jne    4079d8 <_start@@Base+0xb68>
  4079bc:	lea    rdx,[rip+0xfffffffffffff97d]        # 407340 <_start@@Base+0x4d0>
  4079c3:	jmp    42add0 <flatcc_json_printer_union_table@@Base>
  4079c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4079d0:	ret    
  4079d1:	nop    DWORD PTR [rax+0x0]
  4079d8:	ret    
  4079d9:	nop    DWORD PTR [rax+0x0]
  4079e0:	lea    rdx,[rip+0x1e89]        # 409870 <_start@@Base+0x2a00>
  4079e7:	jmp    42add0 <flatcc_json_printer_union_table@@Base>
  4079ec:	nop    DWORD PTR [rax+0x0]
  4079f0:	lea    rdx,[rip+0x2f9]        # 407cf0 <_start@@Base+0xe80>
  4079f7:	jmp    42add0 <flatcc_json_printer_union_table@@Base>
  4079fc:	nop    DWORD PTR [rax+0x0]
  407a00:	endbr64 
  407a04:	push   rbp
  407a05:	lea    r9,[rip+0xfffffffffffff6c4]        # 4070d0 <_start@@Base+0x260>
  407a0c:	mov    rbp,rsi
  407a0f:	push   rbx
  407a10:	mov    r8d,0x6
  407a16:	mov    rbx,rdi
  407a19:	sub    rsp,0x8
  407a1d:	lea    rcx,[rip+0x249b1]        # 42c3d5 <_IO_stdin_used@@Base+0x3d5>
  407a24:	xor    edx,edx
  407a26:	call   42a850 <flatcc_json_printer_table_field@@Base>
  407a2b:	mov    rsi,rbp
  407a2e:	mov    rdi,rbx
  407a31:	lea    r9,[rip+0x58]        # 407a90 <_start@@Base+0xc20>
  407a38:	mov    r8d,0x5
  407a3e:	lea    rcx,[rip+0x24997]        # 42c3dc <_IO_stdin_used@@Base+0x3dc>
  407a45:	mov    edx,0x1
  407a4a:	call   42a850 <flatcc_json_printer_table_field@@Base>
  407a4f:	sub    rsp,0x8
  407a53:	lea    rax,[rip+0xffffffffffffff36]        # 407990 <_start@@Base+0xb20>
  407a5a:	push   rax
  407a5b:	mov    rsi,rbp
  407a5e:	mov    rdi,rbx
  407a61:	lea    r9,[rip+0x1998]        # 409400 <_start@@Base+0x2590>
  407a68:	mov    r8d,0x7
  407a6e:	lea    rcx,[rip+0x2496d]        # 42c3e2 <_IO_stdin_used@@Base+0x3e2>
  407a75:	mov    edx,0x3
  407a7a:	call   42a4b0 <flatcc_json_printer_union_vector_field@@Base>
  407a7f:	add    rsp,0x18
  407a83:	pop    rbx
  407a84:	pop    rbp
  407a85:	ret    
  407a86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407a90:	endbr64 
  407a94:	push   r12
  407a96:	lea    r12,[rip+0xd3]        # 407b70 <_start@@Base+0xd00>
  407a9d:	lea    r9,[rip+0x17c]        # 407c20 <_start@@Base+0xdb0>
  407aa4:	push   rbp
  407aa5:	mov    r8d,0xe
  407aab:	mov    rbp,rsi
  407aae:	push   rbx
  407aaf:	lea    rcx,[rip+0x24934]        # 42c3ea <_IO_stdin_used@@Base+0x3ea>
  407ab6:	mov    rbx,rdi
  407ab9:	sub    rsp,0x8
  407abd:	push   r12
  407abf:	mov    edx,0x1
  407ac4:	call   42ab00 <flatcc_json_printer_union_field@@Base>
  407ac9:	mov    rsi,rbp
  407acc:	mov    rdi,rbx
  407acf:	lea    r9,[rip+0x14a]        # 407c20 <_start@@Base+0xdb0>
  407ad6:	mov    r8d,0xa
  407adc:	lea    rcx,[rip+0x24916]        # 42c3f9 <_IO_stdin_used@@Base+0x3f9>
  407ae3:	mov    edx,0x3
  407ae8:	mov    QWORD PTR [rsp],r12
  407aec:	call   42ab00 <flatcc_json_printer_union_field@@Base>
  407af1:	mov    rsi,rbp
  407af4:	mov    rdi,rbx
  407af7:	lea    r9,[rip+0x122]        # 407c20 <_start@@Base+0xdb0>
  407afe:	mov    r8d,0x9
  407b04:	lea    rcx,[rip+0x248f9]        # 42c404 <_IO_stdin_used@@Base+0x404>
  407b0b:	mov    edx,0x5
  407b10:	mov    QWORD PTR [rsp],r12
  407b14:	call   42ab00 <flatcc_json_printer_union_field@@Base>
  407b19:	mov    rsi,rbp
  407b1c:	mov    rdi,rbx
  407b1f:	lea    r9,[rip+0xfa]        # 407c20 <_start@@Base+0xdb0>
  407b26:	mov    r8d,0x5
  407b2c:	lea    rcx,[rip+0x248db]        # 42c40e <_IO_stdin_used@@Base+0x40e>
  407b33:	mov    edx,0x7
  407b38:	mov    QWORD PTR [rsp],r12
  407b3c:	call   42ab00 <flatcc_json_printer_union_field@@Base>
  407b41:	mov    edx,0x9
  407b46:	mov    rsi,rbp
  407b49:	mov    rdi,rbx
  407b4c:	lea    r9,[rip+0xcd]        # 407c20 <_start@@Base+0xdb0>
  407b53:	mov    r8d,0xa
  407b59:	lea    rcx,[rip+0x248b4]        # 42c414 <_IO_stdin_used@@Base+0x414>
  407b60:	mov    QWORD PTR [rsp],r12
  407b64:	call   42a4b0 <flatcc_json_printer_union_vector_field@@Base>
  407b69:	pop    rax
  407b6a:	pop    rdx
  407b6b:	pop    rbx
  407b6c:	pop    rbp
  407b6d:	pop    r12
  407b6f:	ret    
  407b70:	endbr64 
  407b74:	movzx  eax,BYTE PTR [rsi+0xc]
  407b78:	cmp    al,0xa
  407b7a:	ja     407b98 <_start@@Base+0xd28>
  407b7c:	cmp    al,0x9
  407b7e:	jae    407bb8 <_start@@Base+0xd48>
  407b80:	cmp    al,0x2
  407b82:	je     407bc8 <_start@@Base+0xd58>
  407b84:	cmp    al,0x8
  407b86:	jne    407ba8 <_start@@Base+0xd38>
  407b88:	lea    rdx,[rip+0x71]        # 407c00 <_start@@Base+0xd90>
  407b8f:	jmp    42aee0 <flatcc_json_printer_union_struct@@Base>
  407b94:	nop    DWORD PTR [rax+0x0]
  407b98:	cmp    al,0xb
  407b9a:	je     407ba0 <_start@@Base+0xd30>
  407b9c:	cmp    al,0xff
  407b9e:	jne    407bb0 <_start@@Base+0xd40>
  407ba0:	jmp    42af80 <flatcc_json_printer_union_string@@Base>
  407ba5:	nop    DWORD PTR [rax]
  407ba8:	ret    
  407ba9:	nop    DWORD PTR [rax+0x0]
  407bb0:	ret    
  407bb1:	nop    DWORD PTR [rax+0x0]
  407bb8:	lea    rdx,[rip+0x21]        # 407be0 <_start@@Base+0xd70>
  407bbf:	jmp    42aee0 <flatcc_json_printer_union_struct@@Base>
  407bc4:	nop    DWORD PTR [rax+0x0]
  407bc8:	lea    rdx,[rip+0xfffffffffffff581]        # 407150 <_start@@Base+0x2e0>
  407bcf:	jmp    42add0 <flatcc_json_printer_union_table@@Base>
  407bd4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407bdf:	nop
  407be0:	endbr64 
  407be4:	mov    rdx,rsi
  407be7:	mov    r9d,0xa
  407bed:	lea    r8,[rip+0x2482b]        # 42c41f <_IO_stdin_used@@Base+0x41f>
  407bf4:	xor    ecx,ecx
  407bf6:	xor    esi,esi
  407bf8:	jmp    425650 <flatcc_json_printer_int32_struct_field@@Base>
  407bfd:	nop    DWORD PTR [rax]
  407c00:	endbr64 
  407c04:	mov    rdx,rsi
  407c07:	mov    r9d,0xb
  407c0d:	lea    r8,[rip+0x24816]        # 42c42a <_IO_stdin_used@@Base+0x42a>
  407c14:	xor    ecx,ecx
  407c16:	xor    esi,esi
  407c18:	jmp    424fd0 <flatcc_json_printer_uint16_struct_field@@Base>
  407c1d:	nop    DWORD PTR [rax]
  407c20:	endbr64 
  407c24:	cmp    sil,0x9
  407c28:	je     407c70 <_start@@Base+0xe00>
  407c2a:	jbe    407c50 <_start@@Base+0xde0>
  407c2c:	cmp    sil,0xb
  407c30:	je     407c88 <_start@@Base+0xe18>
  407c32:	jb     407ca0 <_start@@Base+0xe30>
  407c34:	cmp    sil,0xff
  407c38:	jne    407cb8 <_start@@Base+0xe48>
  407c3a:	mov    edx,0x6
  407c3f:	lea    rsi,[rip+0x24813]        # 42c459 <_IO_stdin_used@@Base+0x459>
  407c46:	jmp    4225f0 <flatcc_json_printer_enum@@Base>
  407c4b:	nop    DWORD PTR [rax+rax*1+0x0]
  407c50:	cmp    sil,0x2
  407c54:	je     407cd0 <_start@@Base+0xe60>
  407c56:	cmp    sil,0x8
  407c5a:	jne    407cb8 <_start@@Base+0xe48>
  407c5c:	mov    edx,0x8
  407c61:	lea    rsi,[rip+0x247d4]        # 42c43c <_IO_stdin_used@@Base+0x43c>
  407c68:	jmp    4225f0 <flatcc_json_printer_enum@@Base>
  407c6d:	nop    DWORD PTR [rax]
  407c70:	mov    edx,0x5
  407c75:	lea    rsi,[rip+0x247c9]        # 42c445 <_IO_stdin_used@@Base+0x445>
  407c7c:	jmp    4225f0 <flatcc_json_printer_enum@@Base>
  407c81:	nop    DWORD PTR [rax+0x0]
  407c88:	mov    edx,0x5
  407c8d:	lea    rsi,[rip+0x247bf]        # 42c453 <_IO_stdin_used@@Base+0x453>
  407c94:	jmp    4225f0 <flatcc_json_printer_enum@@Base>
  407c99:	nop    DWORD PTR [rax+0x0]
  407ca0:	mov    edx,0x7
  407ca5:	lea    rsi,[rip+0x2479f]        # 42c44b <_IO_stdin_used@@Base+0x44b>
  407cac:	jmp    4225f0 <flatcc_json_printer_enum@@Base>
  407cb1:	nop    DWORD PTR [rax+0x0]
  407cb8:	mov    edx,0x4
  407cbd:	lea    rsi,[rip+0x29834]        # 4314f8 <flatcc_builder_padding_base@@Base+0xad8>
  407cc4:	jmp    4225f0 <flatcc_json_printer_enum@@Base>
  407cc9:	nop    DWORD PTR [rax+0x0]
  407cd0:	mov    edx,0x5
  407cd5:	lea    rsi,[rip+0x2475a]        # 42c436 <_IO_stdin_used@@Base+0x436>
  407cdc:	jmp    4225f0 <flatcc_json_printer_enum@@Base>
  407ce1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407cec:	nop    DWORD PTR [rax+0x0]
  407cf0:	endbr64 
  407cf4:	push   r12
  407cf6:	lea    r12,[rip+0xa3]        # 407da0 <_start@@Base+0xf30>
  407cfd:	mov    r9d,0x2
  407d03:	push   rbp
  407d04:	mov    r8d,0x5
  407d0a:	mov    rbp,rsi
  407d0d:	push   rbx
  407d0e:	lea    rcx,[rip+0x24519]        # 42c22e <_IO_stdin_used@@Base+0x22e>
  407d15:	mov    rbx,rdi
  407d18:	sub    rsp,0x8
  407d1c:	push   r12
  407d1e:	xor    edx,edx
  407d20:	call   424500 <flatcc_json_printer_int8_enum_field@@Base>
  407d25:	mov    rsi,rbp
  407d28:	mov    rdi,rbx
  407d2b:	mov    r9d,0x2
  407d31:	mov    r8d,0x6
  407d37:	lea    rcx,[rip+0x24722]        # 42c460 <_IO_stdin_used@@Base+0x460>
  407d3e:	mov    edx,0x1
  407d43:	mov    QWORD PTR [rsp],r12
  407d47:	call   424500 <flatcc_json_printer_int8_enum_field@@Base>
  407d4c:	mov    rsi,rbp
  407d4f:	mov    rdi,rbx
  407d52:	mov    r9d,0x2
  407d58:	mov    r8d,0x2
  407d5e:	lea    rcx,[rip+0x24702]        # 42c467 <_IO_stdin_used@@Base+0x467>
  407d65:	mov    edx,0x2
  407d6a:	call   422bb0 <flatcc_json_printer_uint8_field@@Base>
  407d6f:	pop    rax
  407d70:	pop    rdx
  407d71:	mov    rdi,rbx
  407d74:	pop    rbx
  407d75:	mov    rsi,rbp
  407d78:	pop    rbp
  407d79:	mov    r9d,0x2
  407d7f:	mov    r8d,0x3
  407d85:	lea    rcx,[rip+0x246de]        # 42c46a <_IO_stdin_used@@Base+0x46a>
  407d8c:	mov    edx,0x3
  407d91:	pop    r12
  407d93:	jmp    422bb0 <flatcc_json_printer_uint8_field@@Base>
  407d98:	nop    DWORD PTR [rax+rax*1+0x0]
  407da0:	endbr64 
  407da4:	test   sil,0xf4
  407da8:	jne    407e00 <_start@@Base+0xf90>
  407daa:	test   sil,sil
  407dad:	je     407e00 <_start@@Base+0xf90>
  407daf:	push   r13
  407db1:	movzx  eax,sil
  407db5:	push   r12
  407db7:	push   rbp
  407db8:	mov    rbp,rdi
  407dbb:	push   rbx
  407dbc:	mov    ebx,esi
  407dbe:	sub    rsp,0x8
  407dc2:	blsr   eax,eax
  407dc7:	setne  sil
  407dcb:	movzx  r12d,sil
  407dcf:	movzx  esi,sil
  407dd3:	call   422660 <flatcc_json_printer_delimit_enum_flags@@Base>
  407dd8:	xor    esi,esi
  407dda:	test   bl,0x1
  407ddd:	jne    407e10 <_start@@Base+0xfa0>
  407ddf:	test   bl,0x2
  407de2:	jne    407e2e <_start@@Base+0xfbe>
  407de4:	and    ebx,0x8
  407de7:	jne    407e4e <_start@@Base+0xfde>
  407de9:	add    rsp,0x8
  407ded:	pop    rbx
  407dee:	mov    rdi,rbp
  407df1:	pop    rbp
  407df2:	mov    esi,r12d
  407df5:	pop    r12
  407df7:	pop    r13
  407df9:	jmp    422660 <flatcc_json_printer_delimit_enum_flags@@Base>
  407dfe:	xchg   ax,ax
  407e00:	movsx  esi,sil
  407e04:	jmp    4224b0 <flatcc_json_printer_int8@@Base>
  407e09:	nop    DWORD PTR [rax+0x0]
  407e10:	mov    ecx,0x3
  407e15:	lea    rdx,[rip+0x24652]        # 42c46e <_IO_stdin_used@@Base+0x46e>
  407e1c:	mov    rdi,rbp
  407e1f:	call   422690 <flatcc_json_printer_enum_flag@@Base>
  407e24:	mov    esi,0x1
  407e29:	test   bl,0x2
  407e2c:	je     407de4 <_start@@Base+0xf74>
  407e2e:	mov    ecx,0x5
  407e33:	lea    rdx,[rip+0x24638]        # 42c472 <_IO_stdin_used@@Base+0x472>
  407e3a:	mov    rdi,rbp
  407e3d:	lea    r13d,[rsi+0x1]
  407e41:	call   422690 <flatcc_json_printer_enum_flag@@Base>
  407e46:	and    ebx,0x8
  407e49:	mov    esi,r13d
  407e4c:	je     407de9 <_start@@Base+0xf79>
  407e4e:	mov    ecx,0x4
  407e53:	lea    rdx,[rip+0x2461e]        # 42c478 <_IO_stdin_used@@Base+0x478>
  407e5a:	mov    rdi,rbp
  407e5d:	call   422690 <flatcc_json_printer_enum_flag@@Base>
  407e62:	jmp    407de9 <_start@@Base+0xf79>
  407e64:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407e6f:	nop
  407e70:	endbr64 
  407e74:	push   rbp
  407e75:	mov    rdx,rsi
  407e78:	mov    rbp,rsi
  407e7b:	push   rbx
  407e7c:	mov    r9d,0x1
  407e82:	mov    rbx,rdi
  407e85:	sub    rsp,0x8
  407e89:	lea    r8,[rip+0x24667]        # 42c4f7 <_IO_stdin_used@@Base+0x4f7>
  407e90:	xor    ecx,ecx
  407e92:	xor    esi,esi
  407e94:	call   425a50 <flatcc_json_printer_float_struct_field@@Base>
  407e99:	mov    rdx,rbp
  407e9c:	mov    rdi,rbx
  407e9f:	mov    r9d,0x1
  407ea5:	lea    r8,[rip+0x29540]        # 4313ec <flatcc_builder_padding_base@@Base+0x9cc>
  407eac:	mov    ecx,0x4
  407eb1:	mov    esi,0x1
  407eb6:	call   425a50 <flatcc_json_printer_float_struct_field@@Base>
  407ebb:	mov    rdx,rbp
  407ebe:	mov    rdi,rbx
  407ec1:	mov    r9d,0x1
  407ec7:	lea    r8,[rip+0x245af]        # 42c47d <_IO_stdin_used@@Base+0x47d>
  407ece:	mov    ecx,0x8
  407ed3:	mov    esi,0x2
  407ed8:	call   425a50 <flatcc_json_printer_float_struct_field@@Base>
  407edd:	mov    rdx,rbp
  407ee0:	mov    rdi,rbx
  407ee3:	mov    r9d,0x5
  407ee9:	lea    r8,[rip+0x2458f]        # 42c47f <_IO_stdin_used@@Base+0x47f>
  407ef0:	mov    ecx,0x10
  407ef5:	mov    esi,0x3
  407efa:	call   425ba0 <flatcc_json_printer_double_struct_field@@Base>
  407eff:	sub    rsp,0x8
  407f03:	lea    rax,[rip+0xfffffffffffffe96]        # 407da0 <_start@@Base+0xf30>
  407f0a:	push   rax
  407f0b:	mov    rdx,rbp
  407f0e:	mov    rdi,rbx
  407f11:	mov    r9d,0x5
  407f17:	lea    r8,[rip+0x24567]        # 42c485 <_IO_stdin_used@@Base+0x485>
  407f1e:	mov    ecx,0x18
  407f23:	mov    esi,0x4
  407f28:	call   4262b0 <flatcc_json_printer_int8_enum_struct_field@@Base>
  407f2d:	lea    rax,[rip+0xfffffffffffff9fc]        # 407930 <_start@@Base+0xac0>
  407f34:	mov    rdx,rbp
  407f37:	mov    rdi,rbx
  407f3a:	mov    r9d,0x5
  407f40:	lea    r8,[rip+0x24544]        # 42c48b <_IO_stdin_used@@Base+0x48b>
  407f47:	mov    ecx,0x1a
  407f4c:	mov    esi,0x5
  407f51:	mov    QWORD PTR [rsp],rax
  407f55:	call   42afa0 <flatcc_json_printer_embedded_struct_field@@Base>
  407f5a:	add    rsp,0x18
  407f5e:	pop    rbx
  407f5f:	pop    rbp
  407f60:	ret    
  407f61:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407f6c:	nop    DWORD PTR [rax+0x0]
  407f70:	mov    rax,rdx
  407f73:	sub    rax,rsi
  407f76:	cmp    rax,0x1
  407f7a:	jle    407f83 <_start@@Base+0x1113>
  407f7c:	cmp    BYTE PTR [rsi],0x20
  407f7f:	jg     407f90 <_start@@Base+0x1120>
  407f81:	je     407f98 <_start@@Base+0x1128>
  407f83:	jmp    41d6c0 <flatcc_json_parser_space_ext@@Base>
  407f88:	nop    DWORD PTR [rax+rax*1+0x0]
  407f90:	mov    rax,rsi
  407f93:	ret    
  407f94:	nop    DWORD PTR [rax+0x0]
  407f98:	cmp    BYTE PTR [rsi+0x1],0x20
  407f9c:	jle    407f83 <_start@@Base+0x1113>
  407f9e:	lea    rax,[rsi+0x1]
  407fa2:	ret    
  407fa3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407fae:	xchg   ax,ax
  407fb0:	endbr64 
  407fb4:	push   r12
  407fb6:	mov    rax,rdx
  407fb9:	sub    rax,rsi
  407fbc:	push   rbp
  407fbd:	mov    r11,rdi
  407fc0:	mov    r10,rdx
  407fc3:	push   rbx
  407fc4:	mov    rbp,rcx
  407fc7:	mov    rbx,rsi
  407fca:	mov    r12,r8
  407fcd:	cmp    rax,0x7
  407fd1:	ja     4080f0 <_start@@Base+0x1280>
  407fd7:	mov    rsi,rdx
  407fda:	mov    rdi,rbx
  407fdd:	call   406f60 <_start@@Base+0xf0>
  407fe2:	movabs rdx,0x4e4f4e44ffffffff
  407fec:	cmp    rax,rdx
  407fef:	ja     408088 <_start@@Base+0x1218>
  407ff5:	mov    rdx,rax
  407ff8:	movabs rcx,0x426f6f6b46616dff
  408002:	and    rdx,0xffffffffff000000
  408009:	cmp    rax,rcx
  40800c:	ja     408030 <_start@@Base+0x11c0>
  40800e:	movabs rax,0x42656c6c65000000
  408018:	cmp    rdx,rax
  40801b:	je     4081d0 <_start@@Base+0x1360>
  408021:	mov    rax,rbx
  408024:	pop    rbx
  408025:	pop    rbp
  408026:	pop    r12
  408028:	ret    
  408029:	nop    DWORD PTR [rax+0x0]
  408030:	movabs rcx,0x4d754c616e000000
  40803a:	cmp    rdx,rcx
  40803d:	je     408210 <_start@@Base+0x13a0>
  408043:	xor    al,al
  408045:	movabs rdx,0x426f6f6b46616e00
  40804f:	cmp    rax,rdx
  408052:	jne    408021 <_start@@Base+0x11b1>
  408054:	mov    r8,r9
  408057:	mov    ecx,0x7
  40805c:	mov    rdx,r10
  40805f:	mov    rsi,rbx
  408062:	mov    rdi,r11
  408065:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  40806a:	cmp    rbx,rax
  40806d:	je     408021 <_start@@Base+0x11b1>
  40806f:	mov    QWORD PTR [r12],0xa
  408077:	mov    rbx,rax
  40807a:	mov    DWORD PTR [rbp+0x0],0x0
  408081:	jmp    408021 <_start@@Base+0x11b1>
  408083:	nop    DWORD PTR [rax+rax*1+0x0]
  408088:	movabs rdx,0x4f74686571ffffff
  408092:	cmp    rax,rdx
  408095:	ja     408100 <_start@@Base+0x1290>
  408097:	movabs rdx,0xffffffff00000000
  4080a1:	and    rax,rdx
  4080a4:	movabs rdx,0x4e4f4e4500000000
  4080ae:	cmp    rax,rdx
  4080b1:	jne    408021 <_start@@Base+0x11b1>
  4080b7:	mov    r8,r9
  4080ba:	mov    ecx,0x4
  4080bf:	mov    rdx,r10
  4080c2:	mov    rsi,rbx
  4080c5:	mov    rdi,r11
  4080c8:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  4080cd:	cmp    rbx,rax
  4080d0:	je     408021 <_start@@Base+0x11b1>
  4080d6:	mov    QWORD PTR [r12],0x0
  4080de:	mov    rbx,rax
  4080e1:	mov    DWORD PTR [rbp+0x0],0x0
  4080e8:	jmp    408021 <_start@@Base+0x11b1>
  4080ed:	nop    DWORD PTR [rax]
  4080f0:	movbe  rax,QWORD PTR [rsi]
  4080f5:	jmp    407fe2 <_start@@Base+0x1172>
  4080fa:	nop    WORD PTR [rax+rax*1+0x0]
  408100:	movabs rdx,0x526170756e7a656b
  40810a:	cmp    rax,rdx
  40810d:	jbe    408178 <_start@@Base+0x1308>
  40810f:	mov    rcx,rax
  408112:	xor    cx,cx
  408115:	movabs rdx,0x556e757365640000
  40811f:	cmp    rcx,rdx
  408122:	je     408250 <_start@@Base+0x13e0>
  408128:	movabs rdx,0x526170756e7a656c
  408132:	cmp    rax,rdx
  408135:	jne    408021 <_start@@Base+0x11b1>
  40813b:	mov    r8,r9
  40813e:	mov    ecx,0x8
  408143:	mov    rdx,r10
  408146:	mov    rsi,rbx
  408149:	mov    rdi,r11
  40814c:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  408151:	cmp    rbx,rax
  408154:	je     408021 <_start@@Base+0x11b1>
  40815a:	mov    QWORD PTR [r12],0x8
  408162:	mov    rbx,rax
  408165:	mov    DWORD PTR [rbp+0x0],0x0
  40816c:	jmp    408021 <_start@@Base+0x11b1>
  408171:	nop    DWORD PTR [rax+0x0]
  408178:	and    rax,0xffffffffff000000
  40817e:	movabs rdx,0x4f74686572000000
  408188:	cmp    rax,rdx
  40818b:	jne    408021 <_start@@Base+0x11b1>
  408191:	mov    r8,r9
  408194:	mov    ecx,0x5
  408199:	mov    rdx,r10
  40819c:	mov    rsi,rbx
  40819f:	mov    rdi,r11
  4081a2:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  4081a7:	cmp    rbx,rax
  4081aa:	je     408021 <_start@@Base+0x11b1>
  4081b0:	mov    QWORD PTR [r12],0xb
  4081b8:	mov    rbx,rax
  4081bb:	mov    DWORD PTR [rbp+0x0],0x0
  4081c2:	jmp    408021 <_start@@Base+0x11b1>
  4081c7:	nop    WORD PTR [rax+rax*1+0x0]
  4081d0:	mov    r8,r9
  4081d3:	mov    ecx,0x5
  4081d8:	mov    rdx,r10
  4081db:	mov    rsi,rbx
  4081de:	mov    rdi,r11
  4081e1:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  4081e6:	cmp    rbx,rax
  4081e9:	je     408021 <_start@@Base+0x11b1>
  4081ef:	mov    QWORD PTR [r12],0x9
  4081f7:	mov    rbx,rax
  4081fa:	mov    DWORD PTR [rbp+0x0],0x0
  408201:	jmp    408021 <_start@@Base+0x11b1>
  408206:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408210:	mov    r8,r9
  408213:	mov    ecx,0x5
  408218:	mov    rdx,r10
  40821b:	mov    rsi,rbx
  40821e:	mov    rdi,r11
  408221:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  408226:	cmp    rbx,rax
  408229:	je     408021 <_start@@Base+0x11b1>
  40822f:	mov    QWORD PTR [r12],0x2
  408237:	mov    rbx,rax
  40823a:	mov    DWORD PTR [rbp+0x0],0x0
  408241:	jmp    408021 <_start@@Base+0x11b1>
  408246:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408250:	mov    r8,r9
  408253:	mov    ecx,0x6
  408258:	mov    rdx,r10
  40825b:	mov    rsi,rbx
  40825e:	mov    rdi,r11
  408261:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  408266:	cmp    rbx,rax
  408269:	je     408021 <_start@@Base+0x11b1>
  40826f:	mov    QWORD PTR [r12],0xff
  408277:	mov    rbx,rax
  40827a:	mov    DWORD PTR [rbp+0x0],0x0
  408281:	jmp    408021 <_start@@Base+0x11b1>
  408286:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408290:	endbr64 
  408294:	push   r13
  408296:	mov    rax,rdx
  408299:	sub    rax,rsi
  40829c:	push   r12
  40829e:	mov    r11,rdi
  4082a1:	mov    r10,rdx
  4082a4:	push   rbp
  4082a5:	mov    r12,r8
  4082a8:	mov    rbp,rcx
  4082ab:	push   rbx
  4082ac:	mov    rbx,rsi
  4082af:	sub    rsp,0x8
  4082b3:	cmp    rax,0x7
  4082b7:	ja     408400 <_start@@Base+0x1590>
  4082bd:	mov    rsi,rdx
  4082c0:	mov    rdi,rbx
  4082c3:	call   406f60 <_start@@Base+0xf0>
  4082c8:	movabs rdx,0x4d6f6e73746571ff
  4082d2:	cmp    rax,rdx
  4082d5:	ja     408308 <_start@@Base+0x1498>
  4082d7:	movabs rdx,0xffffff0000000000
  4082e1:	and    rax,rdx
  4082e4:	movabs rdx,0x416c740000000000
  4082ee:	cmp    rax,rdx
  4082f1:	je     408410 <_start@@Base+0x15a0>
  4082f7:	mov    rax,rbx
  4082fa:	add    rsp,0x8
  4082fe:	pop    rbx
  4082ff:	pop    rbp
  408300:	pop    r12
  408302:	pop    r13
  408304:	ret    
  408305:	nop    DWORD PTR [rax]
  408308:	movabs rdx,0x4d6f6e7374657232
  408312:	cmp    rax,rdx
  408315:	je     4084c0 <_start@@Base+0x1650>
  40831b:	mov    rcx,rax
  40831e:	xor    cl,cl
  408320:	movabs rdx,0x4d6f6e7374657200
  40832a:	cmp    rcx,rdx
  40832d:	je     408488 <_start@@Base+0x1618>
  408333:	endbr64 
  408337:	movabs rdx,0xffffffff00000000
  408341:	and    rdx,rax
  408344:	movabs rcx,0x4e4f4e4500000000
  40834e:	cmp    rdx,rcx
  408351:	je     408450 <_start@@Base+0x15e0>
  408357:	endbr64 
  40835b:	movabs rdx,0x5465737453696d70
  408365:	cmp    rax,rdx
  408368:	jne    4082f7 <_start@@Base+0x1487>
  40836a:	lea    rdi,[rbx+0x8]
  40836e:	mov    rax,r10
  408371:	sub    rax,rdi
  408374:	cmp    rax,0x7
  408378:	ja     408508 <_start@@Base+0x1698>
  40837e:	mov    rsi,r10
  408381:	call   406f60 <_start@@Base+0xf0>
  408386:	movabs rdx,0x6c655461626c6557
  408390:	cmp    rax,rdx
  408393:	jne    4082f7 <_start@@Base+0x1487>
  408399:	lea    r13,[rbx+0x10]
  40839d:	mov    rax,r10
  4083a0:	sub    rax,r13
  4083a3:	cmp    rax,0x7
  4083a7:	ja     4084f8 <_start@@Base+0x1688>
  4083ad:	mov    rsi,r10
  4083b0:	mov    rdi,r13
  4083b3:	call   406f60 <_start@@Base+0xf0>
  4083b8:	xor    al,al
  4083ba:	movabs rdx,0x697468456e756d00
  4083c4:	cmp    rax,rdx
  4083c7:	jne    4082f7 <_start@@Base+0x1487>
  4083cd:	mov    r8,r9
  4083d0:	mov    ecx,0x7
  4083d5:	mov    rdx,r10
  4083d8:	mov    rsi,r13
  4083db:	mov    rdi,r11
  4083de:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  4083e3:	cmp    r13,rax
  4083e6:	je     4082f7 <_start@@Base+0x1487>
  4083ec:	mov    QWORD PTR [r12],0x2
  4083f4:	mov    DWORD PTR [rbp+0x0],0x0
  4083fb:	jmp    4082fa <_start@@Base+0x148a>
  408400:	movbe  rax,QWORD PTR [rsi]
  408405:	jmp    4082c8 <_start@@Base+0x1458>
  40840a:	nop    WORD PTR [rax+rax*1+0x0]
  408410:	mov    r8,r9
  408413:	mov    ecx,0x3
  408418:	mov    rdx,r10
  40841b:	mov    rsi,rbx
  40841e:	mov    rdi,r11
  408421:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  408426:	cmp    rbx,rax
  408429:	je     4082fa <_start@@Base+0x148a>
  40842f:	mov    QWORD PTR [r12],0x4
  408437:	mov    DWORD PTR [rbp+0x0],0x0
  40843e:	add    rsp,0x8
  408442:	pop    rbx
  408443:	pop    rbp
  408444:	pop    r12
  408446:	pop    r13
  408448:	ret    
  408449:	nop    DWORD PTR [rax+0x0]
  408450:	mov    r8,r9
  408453:	mov    ecx,0x4
  408458:	mov    rdx,r10
  40845b:	mov    rsi,rbx
  40845e:	mov    rdi,r11
  408461:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  408466:	cmp    rbx,rax
  408469:	je     4082fa <_start@@Base+0x148a>
  40846f:	mov    QWORD PTR [r12],0x0
  408477:	mov    DWORD PTR [rbp+0x0],0x0
  40847e:	jmp    4082fa <_start@@Base+0x148a>
  408483:	nop    DWORD PTR [rax+rax*1+0x0]
  408488:	mov    r8,r9
  40848b:	mov    ecx,0x7
  408490:	mov    rdx,r10
  408493:	mov    rsi,rbx
  408496:	mov    rdi,r11
  408499:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  40849e:	cmp    rbx,rax
  4084a1:	je     4082f7 <_start@@Base+0x1487>
  4084a7:	mov    QWORD PTR [r12],0x1
  4084af:	mov    DWORD PTR [rbp+0x0],0x0
  4084b6:	jmp    4082fa <_start@@Base+0x148a>
  4084bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4084c0:	mov    r8,r9
  4084c3:	mov    ecx,0x8
  4084c8:	mov    rdx,r10
  4084cb:	mov    rsi,rbx
  4084ce:	mov    rdi,r11
  4084d1:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  4084d6:	cmp    rbx,rax
  4084d9:	je     4082f7 <_start@@Base+0x1487>
  4084df:	mov    QWORD PTR [r12],0x3
  4084e7:	mov    DWORD PTR [rbp+0x0],0x0
  4084ee:	jmp    4082fa <_start@@Base+0x148a>
  4084f3:	nop    DWORD PTR [rax+rax*1+0x0]
  4084f8:	movbe  rax,QWORD PTR [rbx+0x10]
  4084fe:	jmp    4083b8 <_start@@Base+0x1548>
  408503:	nop    DWORD PTR [rax+rax*1+0x0]
  408508:	movbe  rax,QWORD PTR [rbx+0x8]
  40850e:	jmp    408386 <_start@@Base+0x1516>
  408513:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40851e:	xchg   ax,ax
  408520:	push   r12
  408522:	mov    rax,rdx
  408525:	sub    rax,rsi
  408528:	push   rbp
  408529:	mov    r11,rdi
  40852c:	mov    r10,rdx
  40852f:	push   rbx
  408530:	mov    rbp,rcx
  408533:	mov    rbx,rsi
  408536:	mov    r12,r8
  408539:	cmp    rax,0x7
  40853d:	ja     4085f8 <_start@@Base+0x1788>
  408543:	mov    rsi,rdx
  408546:	mov    rdi,rbx
  408549:	call   406f60 <_start@@Base+0xf0>
  40854e:	movabs rdx,0x68657831ffffffff
  408558:	cmp    rax,rdx
  40855b:	ja     408588 <_start@@Base+0x1718>
  40855d:	movabs rdx,0xffffffff00000000
  408567:	and    rax,rdx
  40856a:	movabs rdx,0x6865783100000000
  408574:	cmp    rax,rdx
  408577:	je     408608 <_start@@Base+0x1798>
  40857d:	mov    rax,rbx
  408580:	pop    rbx
  408581:	pop    rbp
  408582:	pop    r12
  408584:	ret    
  408585:	nop    DWORD PTR [rax]
  408588:	mov    rcx,rax
  40858b:	xor    cx,cx
  40858e:	movabs rdx,0x6865786e65670000
  408598:	cmp    rcx,rdx
  40859b:	je     408648 <_start@@Base+0x17d8>
  4085a1:	movabs rdx,0xffffffff00000000
  4085ab:	and    rax,rdx
  4085ae:	movabs rdx,0x6865783200000000
  4085b8:	cmp    rax,rdx
  4085bb:	jne    40857d <_start@@Base+0x170d>
  4085bd:	mov    r8,r9
  4085c0:	mov    ecx,0x4
  4085c5:	mov    rdx,r10
  4085c8:	mov    rsi,rbx
  4085cb:	mov    rdi,r11
  4085ce:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  4085d3:	cmp    rbx,rax
  4085d6:	je     40857d <_start@@Base+0x170d>
  4085d8:	mov    rbx,rax
  4085db:	mov    rax,rbx
  4085de:	pop    rbx
  4085df:	mov    QWORD PTR [r12],0x7eafbeaf
  4085e7:	mov    DWORD PTR [rbp+0x0],0x0
  4085ee:	pop    rbp
  4085ef:	pop    r12
  4085f1:	ret    
  4085f2:	nop    WORD PTR [rax+rax*1+0x0]
  4085f8:	movbe  rax,QWORD PTR [rsi]
  4085fd:	jmp    40854e <_start@@Base+0x16de>
  408602:	nop    WORD PTR [rax+rax*1+0x0]
  408608:	mov    r8,r9
  40860b:	mov    ecx,0x4
  408610:	mov    rdx,r10
  408613:	mov    rsi,rbx
  408616:	mov    rdi,r11
  408619:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  40861e:	cmp    rbx,rax
  408621:	je     40857d <_start@@Base+0x170d>
  408627:	mov    rbx,rax
  40862a:	mov    rax,rbx
  40862d:	pop    rbx
  40862e:	mov    QWORD PTR [r12],0x3
  408636:	mov    DWORD PTR [rbp+0x0],0x0
  40863d:	pop    rbp
  40863e:	pop    r12
  408640:	ret    
  408641:	nop    DWORD PTR [rax+0x0]
  408648:	mov    r8,r9
  40864b:	mov    ecx,0x6
  408650:	mov    rdx,r10
  408653:	mov    rsi,rbx
  408656:	mov    rdi,r11
  408659:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  40865e:	cmp    rbx,rax
  408661:	je     40857d <_start@@Base+0x170d>
  408667:	mov    QWORD PTR [r12],0xfffffffffffffffe
  40866f:	mov    rbx,rax
  408672:	mov    DWORD PTR [rbp+0x0],0x1
  408679:	jmp    40857d <_start@@Base+0x170d>
  40867e:	xchg   ax,ax
  408680:	push   r12
  408682:	mov    rax,rdx
  408685:	sub    rax,rsi
  408688:	push   rbp
  408689:	mov    r10,rdi
  40868c:	mov    r12,rsi
  40868f:	push   rbx
  408690:	mov    r11,rdx
  408693:	mov    rbx,rcx
  408696:	mov    rbp,r8
  408699:	cmp    rax,0x7
  40869d:	ja     408748 <_start@@Base+0x18d8>
  4086a3:	mov    rsi,rdx
  4086a6:	mov    rdi,r12
  4086a9:	call   406f60 <_start@@Base+0xf0>
  4086ae:	movabs rdx,0x696e7431ffffffff
  4086b8:	cmp    rax,rdx
  4086bb:	ja     4086e8 <_start@@Base+0x1878>
  4086bd:	movabs rdx,0xffffffff00000000
  4086c7:	and    rax,rdx
  4086ca:	movabs rdx,0x696e743100000000
  4086d4:	cmp    rax,rdx
  4086d7:	je     4087c0 <_start@@Base+0x1950>
  4086dd:	pop    rbx
  4086de:	pop    rbp
  4086df:	mov    rax,r12
  4086e2:	pop    r12
  4086e4:	ret    
  4086e5:	nop    DWORD PTR [rax]
  4086e8:	movabs rdx,0x696e746e6566ffff
  4086f2:	cmp    rax,rdx
  4086f5:	ja     408758 <_start@@Base+0x18e8>
  4086f7:	movabs rdx,0xffffffff00000000
  408701:	and    rax,rdx
  408704:	movabs rdx,0x696e743200000000
  40870e:	cmp    rax,rdx
  408711:	jne    4086dd <_start@@Base+0x186d>
  408713:	mov    r8,r9
  408716:	mov    ecx,0x4
  40871b:	mov    rdx,r11
  40871e:	mov    rsi,r12
  408721:	mov    rdi,r10
  408724:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  408729:	cmp    r12,rax
  40872c:	je     4086dd <_start@@Base+0x186d>
  40872e:	mov    QWORD PTR [rbp+0x0],0x2a
  408736:	mov    r12,rax
  408739:	mov    DWORD PTR [rbx],0x0
  40873f:	jmp    4086dd <_start@@Base+0x186d>
  408741:	nop    DWORD PTR [rax+0x0]
  408748:	movbe  rax,QWORD PTR [rsi]
  40874d:	jmp    4086ae <_start@@Base+0x183e>
  408752:	nop    WORD PTR [rax+rax*1+0x0]
  408758:	mov    rcx,rax
  40875b:	xor    cl,cl
  40875d:	movabs rdx,0x696e746e65673200
  408767:	cmp    rcx,rdx
  40876a:	je     408800 <_start@@Base+0x1990>
  408770:	xor    ax,ax
  408773:	movabs rdx,0x696e746e65670000
  40877d:	cmp    rax,rdx
  408780:	jne    4086dd <_start@@Base+0x186d>
  408786:	mov    r8,r9
  408789:	mov    ecx,0x6
  40878e:	mov    rdx,r11
  408791:	mov    rsi,r12
  408794:	mov    rdi,r10
  408797:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  40879c:	cmp    r12,rax
  40879f:	je     4086dd <_start@@Base+0x186d>
  4087a5:	mov    QWORD PTR [rbp+0x0],0xfffffffffffffffe
  4087ad:	mov    r12,rax
  4087b0:	mov    DWORD PTR [rbx],0x1
  4087b6:	jmp    4086dd <_start@@Base+0x186d>
  4087bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4087c0:	mov    r8,r9
  4087c3:	mov    ecx,0x4
  4087c8:	mov    rdx,r11
  4087cb:	mov    rsi,r12
  4087ce:	mov    rdi,r10
  4087d1:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  4087d6:	cmp    r12,rax
  4087d9:	je     4086dd <_start@@Base+0x186d>
  4087df:	mov    QWORD PTR [rbp+0x0],0x2
  4087e7:	mov    DWORD PTR [rbx],0x0
  4087ed:	pop    rbx
  4087ee:	mov    r12,rax
  4087f1:	pop    rbp
  4087f2:	mov    rax,r12
  4087f5:	pop    r12
  4087f7:	ret    
  4087f8:	nop    DWORD PTR [rax+rax*1+0x0]
  408800:	mov    r8,r9
  408803:	mov    ecx,0x7
  408808:	mov    rdx,r11
  40880b:	mov    rsi,r12
  40880e:	mov    rdi,r10
  408811:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  408816:	cmp    r12,rax
  408819:	je     4086dd <_start@@Base+0x186d>
  40881f:	mov    QWORD PTR [rbp+0x0],0xffffffffffffffff
  408827:	mov    r12,rax
  40882a:	mov    DWORD PTR [rbx],0x1
  408830:	jmp    4086dd <_start@@Base+0x186d>
  408835:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  408840:	push   r12
  408842:	mov    rax,rdx
  408845:	sub    rax,rsi
  408848:	push   rbp
  408849:	mov    r11,rdi
  40884c:	mov    r10,rdx
  40884f:	push   rbx
  408850:	mov    rbp,rcx
  408853:	mov    rbx,rsi
  408856:	mov    r12,r8
  408859:	cmp    rax,0x7
  40885d:	ja     408900 <_start@@Base+0x1a90>
  408863:	mov    rsi,rdx
  408866:	mov    rdi,rbx
  408869:	call   406f60 <_start@@Base+0xf0>
  40886e:	movabs rcx,0xffffffff00000000
  408878:	movabs rdx,0x6e656731ffffffff
  408882:	and    rcx,rax
  408885:	cmp    rax,rdx
  408888:	ja     4088a8 <_start@@Base+0x1a38>
  40888a:	movabs rax,0x6e65673100000000
  408894:	cmp    rcx,rax
  408897:	je     408910 <_start@@Base+0x1aa0>
  408899:	mov    rax,rbx
  40889c:	pop    rbx
  40889d:	pop    rbp
  40889e:	pop    r12
  4088a0:	ret    
  4088a1:	nop    DWORD PTR [rax+0x0]
  4088a8:	movabs rax,0x6e65673300000000
  4088b2:	cmp    rcx,rax
  4088b5:	je     408950 <_start@@Base+0x1ae0>
  4088bb:	movabs rax,0x6e65673200000000
  4088c5:	cmp    rcx,rax
  4088c8:	jne    408899 <_start@@Base+0x1a29>
  4088ca:	mov    r8,r9
  4088cd:	mov    ecx,0x4
  4088d2:	mov    rdx,r10
  4088d5:	mov    rsi,rbx
  4088d8:	mov    rdi,r11
  4088db:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  4088e0:	cmp    rbx,rax
  4088e3:	je     408899 <_start@@Base+0x1a29>
  4088e5:	mov    rbx,rax
  4088e8:	mov    rax,rbx
  4088eb:	pop    rbx
  4088ec:	mov    QWORD PTR [r12],0xfffffffffffffff5
  4088f4:	mov    DWORD PTR [rbp+0x0],0x1
  4088fb:	pop    rbp
  4088fc:	pop    r12
  4088fe:	ret    
  4088ff:	nop
  408900:	movbe  rax,QWORD PTR [rsi]
  408905:	jmp    40886e <_start@@Base+0x19fe>
  40890a:	nop    WORD PTR [rax+rax*1+0x0]
  408910:	mov    r8,r9
  408913:	mov    ecx,0x4
  408918:	mov    rdx,r10
  40891b:	mov    rsi,rbx
  40891e:	mov    rdi,r11
  408921:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  408926:	cmp    rbx,rax
  408929:	je     408899 <_start@@Base+0x1a29>
  40892f:	mov    rbx,rax
  408932:	mov    rax,rbx
  408935:	pop    rbx
  408936:	mov    QWORD PTR [r12],0xfffffffffffffff4
  40893e:	mov    DWORD PTR [rbp+0x0],0x1
  408945:	pop    rbp
  408946:	pop    r12
  408948:	ret    
  408949:	nop    DWORD PTR [rax+0x0]
  408950:	mov    r8,r9
  408953:	mov    ecx,0x4
  408958:	mov    rdx,r10
  40895b:	mov    rsi,rbx
  40895e:	mov    rdi,r11
  408961:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  408966:	cmp    rbx,rax
  408969:	je     408899 <_start@@Base+0x1a29>
  40896f:	mov    QWORD PTR [r12],0xfffffffffffffff6
  408977:	mov    rbx,rax
  40897a:	mov    DWORD PTR [rbp+0x0],0x1
  408981:	jmp    408899 <_start@@Base+0x1a29>
  408986:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408990:	endbr64 
  408994:	push   r12
  408996:	mov    rax,rdx
  408999:	sub    rax,rsi
  40899c:	push   rbp
  40899d:	mov    r11,rdi
  4089a0:	mov    r10,rdx
  4089a3:	push   rbx
  4089a4:	mov    rbp,rcx
  4089a7:	mov    rbx,rsi
  4089aa:	mov    r12,r8
  4089ad:	cmp    rax,0x7
  4089b1:	ja     408a70 <_start@@Base+0x1c00>
  4089b7:	mov    rsi,rdx
  4089ba:	mov    rdi,rbx
  4089bd:	call   406f60 <_start@@Base+0xf0>
  4089c2:	movabs rdx,0x477265656dffffff
  4089cc:	cmp    rax,rdx
  4089cf:	ja     408a00 <_start@@Base+0x1b90>
  4089d1:	movabs rdx,0xffffffff00000000
  4089db:	and    rax,rdx
  4089de:	movabs rdx,0x426c756500000000
  4089e8:	cmp    rax,rdx
  4089eb:	je     408a80 <_start@@Base+0x1c10>
  4089f1:	mov    rax,rbx
  4089f4:	pop    rbx
  4089f5:	pop    rbp
  4089f6:	pop    r12
  4089f8:	ret    
  4089f9:	nop    DWORD PTR [rax+0x0]
  408a00:	movabs rdx,0xffffff0000000000
  408a0a:	and    rdx,rax
  408a0d:	movabs rcx,0x5265640000000000
  408a17:	cmp    rdx,rcx
  408a1a:	je     408ac0 <_start@@Base+0x1c50>
  408a20:	and    rax,0xffffffffff000000
  408a26:	movabs rdx,0x477265656e000000
  408a30:	cmp    rax,rdx
  408a33:	jne    4089f1 <_start@@Base+0x1b81>
  408a35:	mov    r8,r9
  408a38:	mov    ecx,0x5
  408a3d:	mov    rdx,r10
  408a40:	mov    rsi,rbx
  408a43:	mov    rdi,r11
  408a46:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  408a4b:	cmp    rbx,rax
  408a4e:	je     4089f1 <_start@@Base+0x1b81>
  408a50:	mov    rbx,rax
  408a53:	mov    rax,rbx
  408a56:	pop    rbx
  408a57:	mov    QWORD PTR [r12],0x2
  408a5f:	mov    DWORD PTR [rbp+0x0],0x0
  408a66:	pop    rbp
  408a67:	pop    r12
  408a69:	ret    
  408a6a:	nop    WORD PTR [rax+rax*1+0x0]
  408a70:	movbe  rax,QWORD PTR [rsi]
  408a75:	jmp    4089c2 <_start@@Base+0x1b52>
  408a7a:	nop    WORD PTR [rax+rax*1+0x0]
  408a80:	mov    r8,r9
  408a83:	mov    ecx,0x4
  408a88:	mov    rdx,r10
  408a8b:	mov    rsi,rbx
  408a8e:	mov    rdi,r11
  408a91:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  408a96:	cmp    rbx,rax
  408a99:	je     4089f1 <_start@@Base+0x1b81>
  408a9f:	mov    rbx,rax
  408aa2:	mov    rax,rbx
  408aa5:	pop    rbx
  408aa6:	mov    QWORD PTR [r12],0x8
  408aae:	mov    DWORD PTR [rbp+0x0],0x0
  408ab5:	pop    rbp
  408ab6:	pop    r12
  408ab8:	ret    
  408ab9:	nop    DWORD PTR [rax+0x0]
  408ac0:	mov    r8,r9
  408ac3:	mov    ecx,0x3
  408ac8:	mov    rdx,r10
  408acb:	mov    rsi,rbx
  408ace:	mov    rdi,r11
  408ad1:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  408ad6:	cmp    rbx,rax
  408ad9:	je     4089f1 <_start@@Base+0x1b81>
  408adf:	mov    QWORD PTR [r12],0x1
  408ae7:	mov    rbx,rax
  408aea:	mov    DWORD PTR [rbp+0x0],0x0
  408af1:	jmp    4089f1 <_start@@Base+0x1b81>
  408af6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408b00:	endbr64 
  408b04:	push   rbx
  408b05:	xor    esi,esi
  408b07:	mov    ecx,0x8
  408b0c:	mov    edx,0x8
  408b11:	mov    rbx,rdi
  408b14:	call   41b0a0 <flatcc_verify_field@@Base>
  408b19:	test   eax,eax
  408b1b:	je     408b20 <_start@@Base+0x1cb0>
  408b1d:	pop    rbx
  408b1e:	ret    
  408b1f:	nop
  408b20:	mov    rdi,rbx
  408b23:	mov    ecx,0x4
  408b28:	mov    edx,0x4
  408b2d:	mov    esi,0x1
  408b32:	pop    rbx
  408b33:	jmp    41b0a0 <flatcc_verify_field@@Base>
  408b38:	nop    DWORD PTR [rax+rax*1+0x0]
  408b40:	endbr64 
  408b44:	push   rbx
  408b45:	xor    esi,esi
  408b47:	mov    ecx,0x1
  408b4c:	mov    edx,0x1
  408b51:	mov    rbx,rdi
  408b54:	call   41b0a0 <flatcc_verify_field@@Base>
  408b59:	test   eax,eax
  408b5b:	je     408b60 <_start@@Base+0x1cf0>
  408b5d:	pop    rbx
  408b5e:	ret    
  408b5f:	nop
  408b60:	mov    ecx,0x1
  408b65:	mov    edx,0x1
  408b6a:	mov    esi,0x1
  408b6f:	mov    rdi,rbx
  408b72:	call   41b0a0 <flatcc_verify_field@@Base>
  408b77:	test   eax,eax
  408b79:	jne    408b5d <_start@@Base+0x1ced>
  408b7b:	mov    ecx,0x1
  408b80:	mov    edx,0x1
  408b85:	mov    esi,0x2
  408b8a:	mov    rdi,rbx
  408b8d:	call   41b0a0 <flatcc_verify_field@@Base>
  408b92:	test   eax,eax
  408b94:	jne    408b5d <_start@@Base+0x1ced>
  408b96:	mov    rdi,rbx
  408b99:	mov    ecx,0x1
  408b9e:	mov    edx,0x1
  408ba3:	mov    esi,0x3
  408ba8:	pop    rbx
  408ba9:	jmp    41b0a0 <flatcc_verify_field@@Base>
  408bae:	xchg   ax,ax
  408bb0:	endbr64 
  408bb4:	push   rbx
  408bb5:	xor    edx,edx
  408bb7:	xor    esi,esi
  408bb9:	mov    rbx,rdi
  408bbc:	call   41b0f0 <flatcc_verify_string_field@@Base>
  408bc1:	test   eax,eax
  408bc3:	je     408bd0 <_start@@Base+0x1d60>
  408bc5:	pop    rbx
  408bc6:	ret    
  408bc7:	nop    WORD PTR [rax+rax*1+0x0]
  408bd0:	mov    ecx,0x8
  408bd5:	mov    edx,0x8
  408bda:	mov    esi,0x1
  408bdf:	mov    rdi,rbx
  408be2:	call   41b0a0 <flatcc_verify_field@@Base>
  408be7:	test   eax,eax
  408be9:	jne    408bc5 <_start@@Base+0x1d55>
  408beb:	mov    rdi,rbx
  408bee:	mov    ecx,0x2
  408bf3:	mov    edx,0x2
  408bf8:	mov    esi,0x2
  408bfd:	pop    rbx
  408bfe:	jmp    41b0a0 <flatcc_verify_field@@Base>
  408c03:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  408c0e:	xchg   ax,ax
  408c10:	endbr64 
  408c14:	push   rbx
  408c15:	xor    edx,edx
  408c17:	xor    esi,esi
  408c19:	mov    rbx,rdi
  408c1c:	call   41b0f0 <flatcc_verify_string_field@@Base>
  408c21:	test   eax,eax
  408c23:	je     408c30 <_start@@Base+0x1dc0>
  408c25:	pop    rbx
  408c26:	ret    
  408c27:	nop    WORD PTR [rax+rax*1+0x0]
  408c30:	mov    ecx,0x4
  408c35:	mov    edx,0x4
  408c3a:	mov    esi,0x1
  408c3f:	mov    rdi,rbx
  408c42:	call   41b0a0 <flatcc_verify_field@@Base>
  408c47:	test   eax,eax
  408c49:	jne    408c25 <_start@@Base+0x1db5>
  408c4b:	xor    edx,edx
  408c4d:	mov    esi,0x2
  408c52:	mov    rdi,rbx
  408c55:	call   41b0f0 <flatcc_verify_string_field@@Base>
  408c5a:	test   eax,eax
  408c5c:	jne    408c25 <_start@@Base+0x1db5>
  408c5e:	mov    ecx,0x8
  408c63:	mov    edx,0x8
  408c68:	mov    esi,0x3
  408c6d:	mov    rdi,rbx
  408c70:	call   41b0a0 <flatcc_verify_field@@Base>
  408c75:	test   eax,eax
  408c77:	jne    408c25 <_start@@Base+0x1db5>
  408c79:	xor    edx,edx
  408c7b:	mov    esi,0x4
  408c80:	mov    rdi,rbx
  408c83:	call   41b0f0 <flatcc_verify_string_field@@Base>
  408c88:	test   eax,eax
  408c8a:	jne    408c25 <_start@@Base+0x1db5>
  408c8c:	mov    ecx,0x8
  408c91:	mov    edx,0x8
  408c96:	mov    esi,0x5
  408c9b:	mov    rdi,rbx
  408c9e:	call   41b0a0 <flatcc_verify_field@@Base>
  408ca3:	test   eax,eax
  408ca5:	jne    408c25 <_start@@Base+0x1db5>
  408cab:	mov    ecx,0x4
  408cb0:	mov    edx,0x4
  408cb5:	mov    esi,0x6
  408cba:	mov    rdi,rbx
  408cbd:	call   41b0a0 <flatcc_verify_field@@Base>
  408cc2:	test   eax,eax
  408cc4:	jne    408c25 <_start@@Base+0x1db5>
  408cca:	mov    ecx,0x8
  408ccf:	mov    edx,0x8
  408cd4:	mov    esi,0x7
  408cd9:	mov    rdi,rbx
  408cdc:	call   41b0a0 <flatcc_verify_field@@Base>
  408ce1:	test   eax,eax
  408ce3:	jne    408c25 <_start@@Base+0x1db5>
  408ce9:	mov    rdi,rbx
  408cec:	mov    ecx,0x4
  408cf1:	mov    edx,0x4
  408cf6:	mov    esi,0x8
  408cfb:	pop    rbx
  408cfc:	jmp    41b0a0 <flatcc_verify_field@@Base>
  408d01:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  408d0c:	nop    DWORD PTR [rax+0x0]
  408d10:	endbr64 
  408d14:	push   rbx
  408d15:	xor    edx,edx
  408d17:	xor    esi,esi
  408d19:	lea    rcx,[rip+0xfffffffffffffef0]        # 408c10 <_start@@Base+0x1da0>
  408d20:	mov    rbx,rdi
  408d23:	call   41b430 <flatcc_verify_table_field@@Base>
  408d28:	test   eax,eax
  408d2a:	je     408d30 <_start@@Base+0x1ec0>
  408d2c:	pop    rbx
  408d2d:	ret    
  408d2e:	xchg   ax,ax
  408d30:	xor    edx,edx
  408d32:	lea    rcx,[rip+0xec7]        # 409c00 <_start@@Base+0x2d90>
  408d39:	mov    esi,0x1
  408d3e:	mov    rdi,rbx
  408d41:	call   41b430 <flatcc_verify_table_field@@Base>
  408d46:	test   eax,eax
  408d48:	jne    408d2c <_start@@Base+0x1ebc>
  408d4a:	mov    rdi,rbx
  408d4d:	lea    rcx,[rip+0xfffffffffffffdac]        # 408b00 <_start@@Base+0x1c90>
  408d54:	xor    edx,edx
  408d56:	mov    esi,0x2
  408d5b:	pop    rbx
  408d5c:	jmp    41b430 <flatcc_verify_table_field@@Base>
  408d61:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  408d6c:	nop    DWORD PTR [rax+0x0]
  408d70:	endbr64 
  408d74:	push   rbx
  408d75:	xor    esi,esi
  408d77:	mov    ecx,0x10
  408d7c:	mov    edx,0x20
  408d81:	mov    rbx,rdi
  408d84:	call   41b0a0 <flatcc_verify_field@@Base>
  408d89:	test   eax,eax
  408d8b:	je     408d90 <_start@@Base+0x1f20>
  408d8d:	pop    rbx
  408d8e:	ret    
  408d8f:	nop
  408d90:	mov    ecx,0x2
  408d95:	mov    edx,0x2
  408d9a:	mov    esi,0x2
  408d9f:	mov    rdi,rbx
  408da2:	call   41b0a0 <flatcc_verify_field@@Base>
  408da7:	test   eax,eax
  408da9:	jne    408d8d <_start@@Base+0x1f1d>
  408dab:	mov    ecx,0x2
  408db0:	mov    edx,0x2
  408db5:	mov    esi,0x1
  408dba:	mov    rdi,rbx
  408dbd:	call   41b0a0 <flatcc_verify_field@@Base>
  408dc2:	test   eax,eax
  408dc4:	jne    408d8d <_start@@Base+0x1f1d>
  408dc6:	mov    edx,0x1
  408dcb:	mov    esi,0x3
  408dd0:	mov    rdi,rbx
  408dd3:	call   41b0f0 <flatcc_verify_string_field@@Base>
  408dd8:	test   eax,eax
  408dda:	jne    408d8d <_start@@Base+0x1f1d>
  408ddc:	mov    ecx,0x1
  408de1:	mov    edx,0x1
  408de6:	mov    esi,0x6
  408deb:	mov    rdi,rbx
  408dee:	call   41b0a0 <flatcc_verify_field@@Base>
  408df3:	test   eax,eax
  408df5:	jne    408d8d <_start@@Base+0x1f1d>
  408df7:	xor    edx,edx
  408df9:	mov    r9d,0xffffffff
  408dff:	mov    r8d,0x1
  408e05:	mov    ecx,0x1
  408e0a:	mov    esi,0x5
  408e0f:	mov    rdi,rbx
  408e12:	call   41b1a0 <flatcc_verify_vector_field@@Base>
  408e17:	test   eax,eax
  408e19:	jne    408d8d <_start@@Base+0x1f1d>
  408e1f:	xor    edx,edx
  408e21:	lea    rcx,[rip+0xffffffffffffff48]        # 408d70 <_start@@Base+0x1f00>
  408e28:	mov    esi,0xb
  408e2d:	mov    rdi,rbx
  408e30:	call   41b5b0 <flatcc_verify_table_vector_field@@Base>
  408e35:	test   eax,eax
  408e37:	jne    408d8d <_start@@Base+0x1f1d>
  408e3d:	xor    edx,edx
  408e3f:	mov    esi,0xa
  408e44:	mov    rdi,rbx
  408e47:	call   41b270 <flatcc_verify_string_vector_field@@Base>
  408e4c:	test   eax,eax
  408e4e:	jne    408d8d <_start@@Base+0x1f1d>
  408e54:	xor    edx,edx
  408e56:	mov    esi,0x1c
  408e5b:	mov    rdi,rbx
  408e5e:	call   41b270 <flatcc_verify_string_vector_field@@Base>
  408e63:	test   eax,eax
  408e65:	jne    408d8d <_start@@Base+0x1f1d>
  408e6b:	xor    edx,edx
  408e6d:	mov    r9d,0xffffffff
  408e73:	mov    r8d,0x1
  408e79:	mov    ecx,0x1
  408e7e:	mov    esi,0x18
  408e83:	mov    rdi,rbx
  408e86:	call   41b1a0 <flatcc_verify_vector_field@@Base>
  408e8b:	test   eax,eax
  408e8d:	jne    408d8d <_start@@Base+0x1f1d>
  408e93:	xor    edx,edx
  408e95:	mov    r9d,0x1fffffff
  408e9b:	mov    r8d,0x4
  408ea1:	mov    ecx,0x8
  408ea6:	mov    esi,0x1d
  408eab:	mov    rdi,rbx
  408eae:	call   41b1a0 <flatcc_verify_vector_field@@Base>
  408eb3:	test   eax,eax
  408eb5:	jne    408d8d <_start@@Base+0x1f1d>
  408ebb:	xor    edx,edx
  408ebd:	lea    rcx,[rip+0xfffffffffffffeac]        # 408d70 <_start@@Base+0x1f00>
  408ec4:	mov    esi,0xc
  408ec9:	mov    rdi,rbx
  408ecc:	call   41b430 <flatcc_verify_table_field@@Base>
  408ed1:	test   eax,eax
  408ed3:	jne    408d8d <_start@@Base+0x1f1d>
  408ed9:	xor    edx,edx
  408edb:	lea    rcx,[rip+0x34e]        # 409230 <_start@@Base+0x23c0>
  408ee2:	mov    esi,0x8
  408ee7:	mov    rdi,rbx
  408eea:	call   41c250 <flatcc_verify_union_field@@Base>
  408eef:	test   eax,eax
  408ef1:	jne    408d8d <_start@@Base+0x1f1d>
  408ef7:	xor    edx,edx
  408ef9:	mov    r9d,0x3fffffff
  408eff:	mov    r8d,0x2
  408f05:	mov    ecx,0x4
  408f0a:	mov    esi,0x9
  408f0f:	mov    rdi,rbx
  408f12:	call   41b1a0 <flatcc_verify_vector_field@@Base>
  408f17:	test   eax,eax
  408f19:	jne    408d8d <_start@@Base+0x1f1d>
  408f1f:	xor    edx,edx
  408f21:	mov    r9d,0x3fffffff
  408f27:	mov    r8d,0x2
  408f2d:	mov    ecx,0x4
  408f32:	mov    esi,0x1f
  408f37:	mov    rdi,rbx
  408f3a:	call   41b1a0 <flatcc_verify_vector_field@@Base>
  408f3f:	test   eax,eax
  408f41:	jne    408d8d <_start@@Base+0x1f1d>
  408f47:	xor    ecx,ecx
  408f49:	xor    edx,edx
  408f4b:	lea    r9,[rip+0xfffffffffffffe1e]        # 408d70 <_start@@Base+0x1f00>
  408f52:	mov    r8d,0x1
  408f58:	mov    esi,0xd
  408f5d:	mov    rdi,rbx
  408f60:	call   41c070 <flatcc_verify_table_as_nested_root@@Base>
  408f65:	test   eax,eax
  408f67:	jne    408d8d <_start@@Base+0x1f1d>
  408f6d:	xor    edx,edx
  408f6f:	lea    rcx,[rip+0xfffffffffffffc3a]        # 408bb0 <_start@@Base+0x1d40>
  408f76:	mov    esi,0xe
  408f7b:	mov    rdi,rbx
  408f7e:	call   41b430 <flatcc_verify_table_field@@Base>
  408f83:	test   eax,eax
  408f85:	jne    408d8d <_start@@Base+0x1f1d>
  408f8b:	mov    ecx,0x1
  408f90:	mov    edx,0x1
  408f95:	mov    esi,0xf
  408f9a:	mov    rdi,rbx
  408f9d:	call   41b0a0 <flatcc_verify_field@@Base>
  408fa2:	test   eax,eax
  408fa4:	jne    408d8d <_start@@Base+0x1f1d>
  408faa:	mov    ecx,0x4
  408faf:	mov    edx,0x4
  408fb4:	mov    esi,0x10
  408fb9:	mov    rdi,rbx
  408fbc:	call   41b0a0 <flatcc_verify_field@@Base>
  408fc1:	test   eax,eax
  408fc3:	jne    408d8d <_start@@Base+0x1f1d>
  408fc9:	mov    ecx,0x4
  408fce:	mov    edx,0x4
  408fd3:	mov    esi,0x11
  408fd8:	mov    rdi,rbx
  408fdb:	call   41b0a0 <flatcc_verify_field@@Base>
  408fe0:	test   eax,eax
  408fe2:	jne    408d8d <_start@@Base+0x1f1d>
  408fe8:	mov    ecx,0x8
  408fed:	mov    edx,0x8
  408ff2:	mov    esi,0x12
  408ff7:	mov    rdi,rbx
  408ffa:	call   41b0a0 <flatcc_verify_field@@Base>
  408fff:	test   eax,eax
  409001:	jne    408d8d <_start@@Base+0x1f1d>
  409007:	mov    ecx,0x8
  40900c:	mov    edx,0x8
  409011:	mov    esi,0x13
  409016:	mov    rdi,rbx
  409019:	call   41b0a0 <flatcc_verify_field@@Base>
  40901e:	test   eax,eax
  409020:	jne    408d8d <_start@@Base+0x1f1d>
  409026:	mov    ecx,0x4
  40902b:	mov    edx,0x4
  409030:	mov    esi,0x14
  409035:	mov    rdi,rbx
  409038:	call   41b0a0 <flatcc_verify_field@@Base>
  40903d:	test   eax,eax
  40903f:	jne    408d8d <_start@@Base+0x1f1d>
  409045:	mov    ecx,0x4
  40904a:	mov    edx,0x4
  40904f:	mov    esi,0x15
  409054:	mov    rdi,rbx
  409057:	call   41b0a0 <flatcc_verify_field@@Base>
  40905c:	test   eax,eax
  40905e:	jne    408d8d <_start@@Base+0x1f1d>
  409064:	mov    ecx,0x8
  409069:	mov    edx,0x8
  40906e:	mov    esi,0x16
  409073:	mov    rdi,rbx
  409076:	call   41b0a0 <flatcc_verify_field@@Base>
  40907b:	test   eax,eax
  40907d:	jne    408d8d <_start@@Base+0x1f1d>
  409083:	mov    ecx,0x8
  409088:	mov    edx,0x8
  40908d:	mov    esi,0x17
  409092:	mov    rdi,rbx
  409095:	call   41b0a0 <flatcc_verify_field@@Base>
  40909a:	test   eax,eax
  40909c:	jne    408d8d <_start@@Base+0x1f1d>
  4090a2:	mov    ecx,0x4
  4090a7:	mov    edx,0x4
  4090ac:	mov    esi,0x19
  4090b1:	mov    rdi,rbx
  4090b4:	call   41b0a0 <flatcc_verify_field@@Base>
  4090b9:	test   eax,eax
  4090bb:	jne    408d8d <_start@@Base+0x1f1d>
  4090c1:	mov    ecx,0x4
  4090c6:	mov    edx,0x4
  4090cb:	mov    esi,0x1a
  4090d0:	mov    rdi,rbx
  4090d3:	call   41b0a0 <flatcc_verify_field@@Base>
  4090d8:	test   eax,eax
  4090da:	jne    408d8d <_start@@Base+0x1f1d>
  4090e0:	mov    ecx,0x4
  4090e5:	mov    edx,0x4
  4090ea:	mov    esi,0x1b
  4090ef:	mov    rdi,rbx
  4090f2:	call   41b0a0 <flatcc_verify_field@@Base>
  4090f7:	test   eax,eax
  4090f9:	jne    408d8d <_start@@Base+0x1f1d>
  4090ff:	xor    edx,edx
  409101:	mov    r9d,0xffffffff
  409107:	mov    r8d,0x1
  40910d:	mov    ecx,0x1
  409112:	mov    esi,0x1e
  409117:	mov    rdi,rbx
  40911a:	call   41b1a0 <flatcc_verify_vector_field@@Base>
  40911f:	test   eax,eax
  409121:	jne    408d8d <_start@@Base+0x1f1d>
  409127:	xor    edx,edx
  409129:	mov    r9d,0x1fffffff
  40912f:	mov    r8d,0x8
  409135:	mov    ecx,0x8
  40913a:	mov    esi,0x20
  40913f:	mov    rdi,rbx
  409142:	call   41b1a0 <flatcc_verify_vector_field@@Base>
  409147:	test   eax,eax
  409149:	jne    408d8d <_start@@Base+0x1f1d>
  40914f:	xor    edx,edx
  409151:	mov    r9d,0x1fffffff
  409157:	mov    r8d,0x8
  40915d:	mov    ecx,0x8
  409162:	mov    esi,0x21
  409167:	mov    rdi,rbx
  40916a:	call   41b1a0 <flatcc_verify_vector_field@@Base>
  40916f:	test   eax,eax
  409171:	jne    408d8d <_start@@Base+0x1f1d>
  409177:	xor    edx,edx
  409179:	lea    rcx,[rip+0xffffffffffffdf20]        # 4070a0 <_start@@Base+0x230>
  409180:	mov    esi,0x22
  409185:	mov    rdi,rbx
  409188:	call   41b430 <flatcc_verify_table_field@@Base>
  40918d:	test   eax,eax
  40918f:	jne    408d8d <_start@@Base+0x1f1d>
  409195:	mov    rdi,rbx
  409198:	lea    rcx,[rip+0x11]        # 4091b0 <_start@@Base+0x2340>
  40919f:	xor    edx,edx
  4091a1:	mov    esi,0x23
  4091a6:	pop    rbx
  4091a7:	jmp    41b430 <flatcc_verify_table_field@@Base>
  4091ac:	nop    DWORD PTR [rax+0x0]
  4091b0:	endbr64 
  4091b4:	push   rbx
  4091b5:	xor    edx,edx
  4091b7:	xor    esi,esi
  4091b9:	mov    r9d,0xffffffff
  4091bf:	mov    r8d,0x1
  4091c5:	mov    ecx,0x1
  4091ca:	mov    rbx,rdi
  4091cd:	call   41b1a0 <flatcc_verify_vector_field@@Base>
  4091d2:	test   eax,eax
  4091d4:	je     4091e0 <_start@@Base+0x2370>
  4091d6:	pop    rbx
  4091d7:	ret    
  4091d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4091e0:	xor    edx,edx
  4091e2:	mov    r9d,0xffffffff
  4091e8:	mov    r8d,0x1
  4091ee:	mov    ecx,0x1
  4091f3:	mov    esi,0x1
  4091f8:	mov    rdi,rbx
  4091fb:	call   41b1a0 <flatcc_verify_vector_field@@Base>
  409200:	test   eax,eax
  409202:	jne    4091d6 <_start@@Base+0x2366>
  409204:	mov    rdi,rbx
  409207:	lea    r9,[rip+0xfffffffffffffb62]        # 408d70 <_start@@Base+0x1f00>
  40920e:	mov    r8d,0x1
  409214:	xor    ecx,ecx
  409216:	xor    edx,edx
  409218:	mov    esi,0x2
  40921d:	pop    rbx
  40921e:	jmp    41c070 <flatcc_verify_table_as_nested_root@@Base>
  409223:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40922e:	xchg   ax,ax
  409230:	endbr64 
  409234:	movzx  eax,BYTE PTR [rdi+0x10]
  409238:	cmp    al,0x2
  40923a:	je     409270 <_start@@Base+0x2400>
  40923c:	jbe    409258 <_start@@Base+0x23e8>
  40923e:	cmp    al,0x3
  409240:	je     409280 <_start@@Base+0x2410>
  409242:	cmp    al,0x4
  409244:	jne    409290 <_start@@Base+0x2420>
  409246:	lea    rsi,[rip+0x53]        # 4092a0 <_start@@Base+0x2430>
  40924d:	jmp    41b910 <flatcc_verify_union_table@@Base>
  409252:	nop    WORD PTR [rax+rax*1+0x0]
  409258:	cmp    al,0x1
  40925a:	jne    409290 <_start@@Base+0x2420>
  40925c:	lea    rsi,[rip+0xfffffffffffffb0d]        # 408d70 <_start@@Base+0x1f00>
  409263:	jmp    41b910 <flatcc_verify_union_table@@Base>
  409268:	nop    DWORD PTR [rax+rax*1+0x0]
  409270:	lea    rsi,[rip+0xfffffffffffff8c9]        # 408b40 <_start@@Base+0x1cd0>
  409277:	jmp    41b910 <flatcc_verify_union_table@@Base>
  40927c:	nop    DWORD PTR [rax+0x0]
  409280:	lea    rsi,[rip+0x5d9]        # 409860 <_start@@Base+0x29f0>
  409287:	jmp    41b910 <flatcc_verify_union_table@@Base>
  40928c:	nop    DWORD PTR [rax+0x0]
  409290:	xor    eax,eax
  409292:	ret    
  409293:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40929e:	xchg   ax,ax
  4092a0:	endbr64 
  4092a4:	push   rbx
  4092a5:	xor    edx,edx
  4092a7:	xor    esi,esi
  4092a9:	lea    rcx,[rip+0xfffffffffffffa60]        # 408d10 <_start@@Base+0x1ea0>
  4092b0:	mov    rbx,rdi
  4092b3:	call   41b430 <flatcc_verify_table_field@@Base>
  4092b8:	test   eax,eax
  4092ba:	je     4092c0 <_start@@Base+0x2450>
  4092bc:	pop    rbx
  4092bd:	ret    
  4092be:	xchg   ax,ax
  4092c0:	xor    edx,edx
  4092c2:	lea    rcx,[rip+0x37]        # 409300 <_start@@Base+0x2490>
  4092c9:	mov    esi,0x1
  4092ce:	mov    rdi,rbx
  4092d1:	call   41b430 <flatcc_verify_table_field@@Base>
  4092d6:	test   eax,eax
  4092d8:	jne    4092bc <_start@@Base+0x244c>
  4092da:	mov    rdi,rbx
  4092dd:	lea    rcx,[rip+0xffffffffffffff4c]        # 409230 <_start@@Base+0x23c0>
  4092e4:	xor    edx,edx
  4092e6:	mov    esi,0x3
  4092eb:	pop    rbx
  4092ec:	jmp    41c3c0 <flatcc_verify_union_vector_field@@Base>
  4092f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4092fc:	nop    DWORD PTR [rax+0x0]
  409300:	endbr64 
  409304:	push   rbx
  409305:	xor    edx,edx
  409307:	lea    rcx,[rip+0x82]        # 409390 <_start@@Base+0x2520>
  40930e:	mov    esi,0x1
  409313:	mov    rbx,rdi
  409316:	call   41c250 <flatcc_verify_union_field@@Base>
  40931b:	test   eax,eax
  40931d:	je     409328 <_start@@Base+0x24b8>
  40931f:	pop    rbx
  409320:	ret    
  409321:	nop    DWORD PTR [rax+0x0]
  409328:	xor    edx,edx
  40932a:	lea    rcx,[rip+0x5f]        # 409390 <_start@@Base+0x2520>
  409331:	mov    esi,0x3
  409336:	mov    rdi,rbx
  409339:	call   41c250 <flatcc_verify_union_field@@Base>
  40933e:	test   eax,eax
  409340:	jne    40931f <_start@@Base+0x24af>
  409342:	xor    edx,edx
  409344:	lea    rcx,[rip+0x45]        # 409390 <_start@@Base+0x2520>
  40934b:	mov    esi,0x5
  409350:	mov    rdi,rbx
  409353:	call   41c250 <flatcc_verify_union_field@@Base>
  409358:	test   eax,eax
  40935a:	jne    40931f <_start@@Base+0x24af>
  40935c:	xor    edx,edx
  40935e:	lea    rcx,[rip+0x2b]        # 409390 <_start@@Base+0x2520>
  409365:	mov    esi,0x7
  40936a:	mov    rdi,rbx
  40936d:	call   41c250 <flatcc_verify_union_field@@Base>
  409372:	test   eax,eax
  409374:	jne    40931f <_start@@Base+0x24af>
  409376:	mov    rdi,rbx
  409379:	lea    rcx,[rip+0x10]        # 409390 <_start@@Base+0x2520>
  409380:	xor    edx,edx
  409382:	mov    esi,0x9
  409387:	pop    rbx
  409388:	jmp    41c3c0 <flatcc_verify_union_vector_field@@Base>
  40938d:	nop    DWORD PTR [rax]
  409390:	endbr64 
  409394:	movzx  eax,BYTE PTR [rdi+0x10]
  409398:	cmp    al,0xa
  40939a:	ja     4093c0 <_start@@Base+0x2550>
  40939c:	cmp    al,0x9
  40939e:	jae    4093d0 <_start@@Base+0x2560>
  4093a0:	cmp    al,0x2
  4093a2:	je     4093e8 <_start@@Base+0x2578>
  4093a4:	cmp    al,0x8
  4093a6:	jne    4093e0 <_start@@Base+0x2570>
  4093a8:	mov    edx,0x2
  4093ad:	mov    esi,0x2
  4093b2:	jmp    41ba30 <flatcc_verify_union_struct@@Base>
  4093b7:	nop    WORD PTR [rax+rax*1+0x0]
  4093c0:	cmp    al,0xb
  4093c2:	je     4093c8 <_start@@Base+0x2558>
  4093c4:	cmp    al,0xff
  4093c6:	jne    4093e0 <_start@@Base+0x2570>
  4093c8:	jmp    41ba80 <flatcc_verify_union_string@@Base>
  4093cd:	nop    DWORD PTR [rax]
  4093d0:	mov    edx,0x4
  4093d5:	mov    esi,0x4
  4093da:	jmp    41ba30 <flatcc_verify_union_struct@@Base>
  4093df:	nop
  4093e0:	xor    eax,eax
  4093e2:	ret    
  4093e3:	nop    DWORD PTR [rax+rax*1+0x0]
  4093e8:	lea    rsi,[rip+0xffffffffffffdcc1]        # 4070b0 <_start@@Base+0x240>
  4093ef:	jmp    41b910 <flatcc_verify_union_table@@Base>
  4093f4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4093ff:	nop
  409400:	endbr64 
  409404:	cmp    sil,0x2
  409408:	je     409450 <_start@@Base+0x25e0>
  40940a:	jbe    409430 <_start@@Base+0x25c0>
  40940c:	cmp    sil,0x3
  409410:	je     409480 <_start@@Base+0x2610>
  409412:	cmp    sil,0x4
  409416:	jne    409468 <_start@@Base+0x25f8>
  409418:	mov    edx,0x3
  40941d:	lea    rsi,[rip+0x23096]        # 42c4ba <_IO_stdin_used@@Base+0x4ba>
  409424:	jmp    4225f0 <flatcc_json_printer_enum@@Base>
  409429:	nop    DWORD PTR [rax+0x0]
  409430:	cmp    sil,0x1
  409434:	jne    409468 <_start@@Base+0x25f8>
  409436:	mov    edx,0x7
  40943b:	lea    rsi,[rip+0x2304f]        # 42c491 <_IO_stdin_used@@Base+0x491>
  409442:	jmp    4225f0 <flatcc_json_printer_enum@@Base>
  409447:	nop    WORD PTR [rax+rax*1+0x0]
  409450:	mov    edx,0x17
  409455:	lea    rsi,[rip+0x2303d]        # 42c499 <_IO_stdin_used@@Base+0x499>
  40945c:	jmp    4225f0 <flatcc_json_printer_enum@@Base>
  409461:	nop    DWORD PTR [rax+0x0]
  409468:	mov    edx,0x4
  40946d:	lea    rsi,[rip+0x28084]        # 4314f8 <flatcc_builder_padding_base@@Base+0xad8>
  409474:	jmp    4225f0 <flatcc_json_printer_enum@@Base>
  409479:	nop    DWORD PTR [rax+0x0]
  409480:	mov    edx,0x8
  409485:	lea    rsi,[rip+0x23025]        # 42c4b1 <_IO_stdin_used@@Base+0x4b1>
  40948c:	jmp    4225f0 <flatcc_json_printer_enum@@Base>
  409491:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40949c:	nop    DWORD PTR [rax+0x0]
  4094a0:	push   r13
  4094a2:	push   r12
  4094a4:	push   rbp
  4094a5:	push   rbx
  4094a6:	sub    rsp,0x28
  4094aa:	mov    rax,QWORD PTR fs:0x28
  4094b3:	mov    QWORD PTR [rsp+0x18],rax
  4094b8:	xor    eax,eax
  4094ba:	mov    QWORD PTR [rsp+0x10],0x0
  4094c3:	mov    DWORD PTR [rsp+0xc],0x0
  4094cb:	mov    QWORD PTR [rcx],0x0
  4094d2:	mov    rax,rsi
  4094d5:	cmp    rsi,rdx
  4094d8:	je     4094fa <_start@@Base+0x268a>
  4094da:	mov    r12,rcx
  4094dd:	lea    r8,[rsp+0x10]
  4094e2:	lea    rcx,[rsp+0xc]
  4094e7:	mov    rbp,rsi
  4094ea:	mov    r13,rdi
  4094ed:	mov    rbx,rdx
  4094f0:	call   41f220 <flatcc_json_parser_integer@@Base>
  4094f5:	cmp    rbp,rax
  4094f8:	jne    409518 <_start@@Base+0x26a8>
  4094fa:	mov    rsi,QWORD PTR [rsp+0x18]
  4094ff:	xor    rsi,QWORD PTR fs:0x28
  409508:	jne    409580 <_start@@Base+0x2710>
  40950a:	add    rsp,0x28
  40950e:	pop    rbx
  40950f:	pop    rbp
  409510:	pop    r12
  409512:	pop    r13
  409514:	ret    
  409515:	nop    DWORD PTR [rax]
  409518:	mov    ecx,DWORD PTR [rsp+0xc]
  40951c:	mov    rdx,QWORD PTR [rsp+0x10]
  409521:	test   ecx,ecx
  409523:	je     409540 <_start@@Base+0x26d0>
  409525:	movabs rcx,0x8000000000000000
  40952f:	cmp    rdx,rcx
  409532:	ja     409550 <_start@@Base+0x26e0>
  409534:	neg    rdx
  409537:	mov    QWORD PTR [r12],rdx
  40953b:	jmp    4094fa <_start@@Base+0x268a>
  40953d:	nop    DWORD PTR [rax]
  409540:	test   rdx,rdx
  409543:	js     409568 <_start@@Base+0x26f8>
  409545:	mov    QWORD PTR [r12],rdx
  409549:	jmp    4094fa <_start@@Base+0x268a>
  40954b:	nop    DWORD PTR [rax+rax*1+0x0]
  409550:	mov    ecx,0x8
  409555:	mov    rdx,rbx
  409558:	mov    rsi,rax
  40955b:	mov    rdi,r13
  40955e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  409563:	jmp    4094fa <_start@@Base+0x268a>
  409565:	nop    DWORD PTR [rax]
  409568:	mov    ecx,0x7
  40956d:	mov    rdx,rbx
  409570:	mov    rsi,rax
  409573:	mov    rdi,r13
  409576:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40957b:	jmp    4094fa <_start@@Base+0x268a>
  409580:	call   4061a0 <__stack_chk_fail@plt>
  409585:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  409590:	push   r13
  409592:	mov    rax,rdx
  409595:	sub    rax,rsi
  409598:	push   r12
  40959a:	mov    r11,rdi
  40959d:	mov    r10,rdx
  4095a0:	push   rbp
  4095a1:	mov    r12,r8
  4095a4:	mov    rbp,rcx
  4095a7:	push   rbx
  4095a8:	mov    rbx,rsi
  4095ab:	sub    rsp,0x8
  4095af:	cmp    rax,0x7
  4095b3:	ja     4096d8 <_start@@Base+0x2868>
  4095b9:	mov    rsi,rdx
  4095bc:	mov    rdi,rbx
  4095bf:	call   406f60 <_start@@Base+0xf0>
  4095c4:	movabs rdx,0x496e506172656e74
  4095ce:	cmp    rax,rdx
  4095d1:	je     409638 <_start@@Base+0x27c8>
  4095d3:	movabs rdx,0xffffffff00000000
  4095dd:	and    rax,rdx
  4095e0:	movabs rdx,0x4e4f4e4500000000
  4095ea:	cmp    rax,rdx
  4095ed:	je     409600 <_start@@Base+0x2790>
  4095ef:	mov    rax,rbx
  4095f2:	add    rsp,0x8
  4095f6:	pop    rbx
  4095f7:	pop    rbp
  4095f8:	pop    r12
  4095fa:	pop    r13
  4095fc:	ret    
  4095fd:	nop    DWORD PTR [rax]
  409600:	mov    r8,r9
  409603:	mov    ecx,0x4
  409608:	mov    rdx,r10
  40960b:	mov    rsi,rbx
  40960e:	mov    rdi,r11
  409611:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  409616:	cmp    rbx,rax
  409619:	je     4095f2 <_start@@Base+0x2782>
  40961b:	mov    QWORD PTR [r12],0x0
  409623:	mov    DWORD PTR [rbp+0x0],0x0
  40962a:	add    rsp,0x8
  40962e:	pop    rbx
  40962f:	pop    rbp
  409630:	pop    r12
  409632:	pop    r13
  409634:	ret    
  409635:	nop    DWORD PTR [rax]
  409638:	lea    rdi,[rbx+0x8]
  40963c:	mov    rax,r10
  40963f:	sub    rax,rdi
  409642:	cmp    rax,0x7
  409646:	ja     4096e8 <_start@@Base+0x2878>
  40964c:	mov    rsi,r10
  40964f:	call   406f60 <_start@@Base+0xf0>
  409654:	movabs rdx,0x4e616d6573706163
  40965e:	cmp    rax,rdx
  409661:	jne    4095ef <_start@@Base+0x277f>
  409663:	lea    r13,[rbx+0x10]
  409667:	mov    rax,r10
  40966a:	sub    rax,r13
  40966d:	cmp    rax,0x7
  409671:	ja     4096f8 <_start@@Base+0x2888>
  409677:	mov    rsi,r10
  40967a:	mov    rdi,r13
  40967d:	call   406f60 <_start@@Base+0xf0>
  409682:	movabs rdx,0xff00000000000000
  40968c:	and    rax,rdx
  40968f:	movabs rdx,0x6500000000000000
  409699:	cmp    rax,rdx
  40969c:	jne    4095ef <_start@@Base+0x277f>
  4096a2:	mov    r8,r9
  4096a5:	mov    ecx,0x1
  4096aa:	mov    rdx,r10
  4096ad:	mov    rsi,r13
  4096b0:	mov    rdi,r11
  4096b3:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  4096b8:	cmp    r13,rax
  4096bb:	je     4095ef <_start@@Base+0x277f>
  4096c1:	mov    QWORD PTR [r12],0x1
  4096c9:	mov    DWORD PTR [rbp+0x0],0x0
  4096d0:	jmp    4095f2 <_start@@Base+0x2782>
  4096d5:	nop    DWORD PTR [rax]
  4096d8:	movbe  rax,QWORD PTR [rsi]
  4096dd:	jmp    4095c4 <_start@@Base+0x2754>
  4096e2:	nop    WORD PTR [rax+rax*1+0x0]
  4096e8:	movbe  rax,QWORD PTR [rbx+0x8]
  4096ee:	jmp    409654 <_start@@Base+0x27e4>
  4096f3:	nop    DWORD PTR [rax+rax*1+0x0]
  4096f8:	movbe  rax,QWORD PTR [rbx+0x10]
  4096fe:	jmp    409682 <_start@@Base+0x2812>
  409703:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40970e:	xchg   ax,ax
  409710:	push   r12
  409712:	mov    rax,rdx
  409715:	sub    rax,rsi
  409718:	push   rbp
  409719:	mov    r11,rdi
  40971c:	mov    r10,rdx
  40971f:	push   rbx
  409720:	mov    rbp,rcx
  409723:	mov    rbx,rsi
  409726:	mov    r12,r8
  409729:	cmp    rax,0x7
  40972d:	ja     409760 <_start@@Base+0x28f0>
  40972f:	mov    rsi,rdx
  409732:	mov    rdi,rbx
  409735:	call   406f60 <_start@@Base+0xf0>
  40973a:	movabs rdx,0xff00000000000000
  409744:	and    rax,rdx
  409747:	movabs rdx,0x7800000000000000
  409751:	cmp    rax,rdx
  409754:	je     409770 <_start@@Base+0x2900>
  409756:	mov    rax,rbx
  409759:	pop    rbx
  40975a:	pop    rbp
  40975b:	pop    r12
  40975d:	ret    
  40975e:	xchg   ax,ax
  409760:	movbe  rax,QWORD PTR [rsi]
  409765:	jmp    40973a <_start@@Base+0x28ca>
  409767:	nop    WORD PTR [rax+rax*1+0x0]
  409770:	mov    r8,r9
  409773:	mov    ecx,0x1
  409778:	mov    rdx,r10
  40977b:	mov    rsi,rbx
  40977e:	mov    rdi,r11
  409781:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  409786:	cmp    rbx,rax
  409789:	je     409756 <_start@@Base+0x28e6>
  40978b:	mov    rbx,rax
  40978e:	mov    rax,rbx
  409791:	pop    rbx
  409792:	mov    QWORD PTR [r12],0x0
  40979a:	mov    DWORD PTR [rbp+0x0],0x0
  4097a1:	pop    rbp
  4097a2:	pop    r12
  4097a4:	ret    
  4097a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4097b0:	push   r13
  4097b2:	push   r12
  4097b4:	push   rbp
  4097b5:	push   rbx
  4097b6:	sub    rsp,0x28
  4097ba:	mov    rax,QWORD PTR fs:0x28
  4097c3:	mov    QWORD PTR [rsp+0x18],rax
  4097c8:	xor    eax,eax
  4097ca:	mov    QWORD PTR [rsp+0x10],0x0
  4097d3:	mov    DWORD PTR [rsp+0xc],0x0
  4097db:	mov    QWORD PTR [rcx],0x0
  4097e2:	mov    rax,rsi
  4097e5:	cmp    rsi,rdx
  4097e8:	je     40981b <_start@@Base+0x29ab>
  4097ea:	mov    r12,rcx
  4097ed:	lea    r8,[rsp+0x10]
  4097f2:	lea    rcx,[rsp+0xc]
  4097f7:	mov    rbp,rsi
  4097fa:	mov    r13,rdi
  4097fd:	mov    rbx,rdx
  409800:	call   41f220 <flatcc_json_parser_integer@@Base>
  409805:	cmp    rbp,rax
  409808:	je     40981b <_start@@Base+0x29ab>
  40980a:	mov    edx,DWORD PTR [rsp+0xc]
  40980e:	test   edx,edx
  409810:	jne    409840 <_start@@Base+0x29d0>
  409812:	mov    rdx,QWORD PTR [rsp+0x10]
  409817:	mov    QWORD PTR [r12],rdx
  40981b:	mov    rsi,QWORD PTR [rsp+0x18]
  409820:	xor    rsi,QWORD PTR fs:0x28
  409829:	jne    409855 <_start@@Base+0x29e5>
  40982b:	add    rsp,0x28
  40982f:	pop    rbx
  409830:	pop    rbp
  409831:	pop    r12
  409833:	pop    r13
  409835:	ret    
  409836:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409840:	mov    ecx,0x8
  409845:	mov    rdx,rbx
  409848:	mov    rsi,rax
  40984b:	mov    rdi,r13
  40984e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  409853:	jmp    40981b <_start@@Base+0x29ab>
  409855:	call   4061a0 <__stack_chk_fail@plt>
  40985a:	nop    WORD PTR [rax+rax*1+0x0]
  409860:	endbr64 
  409864:	xor    eax,eax
  409866:	ret    
  409867:	nop    WORD PTR [rax+rax*1+0x0]
  409870:	endbr64 
  409874:	ret    
  409875:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  409880:	push   r13
  409882:	push   r12
  409884:	push   rbp
  409885:	push   rbx
  409886:	sub    rsp,0x28
  40988a:	mov    rax,QWORD PTR fs:0x28
  409893:	mov    QWORD PTR [rsp+0x18],rax
  409898:	xor    eax,eax
  40989a:	mov    QWORD PTR [rsp+0x10],0x0
  4098a3:	mov    DWORD PTR [rsp+0xc],0x0
  4098ab:	mov    DWORD PTR [rcx],0x0
  4098b1:	mov    rax,rsi
  4098b4:	cmp    rsi,rdx
  4098b7:	je     4098d9 <_start@@Base+0x2a69>
  4098b9:	mov    r12,rcx
  4098bc:	lea    r8,[rsp+0x10]
  4098c1:	lea    rcx,[rsp+0xc]
  4098c6:	mov    rbp,rsi
  4098c9:	mov    r13,rdi
  4098cc:	mov    rbx,rdx
  4098cf:	call   41f220 <flatcc_json_parser_integer@@Base>
  4098d4:	cmp    rbp,rax
  4098d7:	jne    4098f8 <_start@@Base+0x2a88>
  4098d9:	mov    rsi,QWORD PTR [rsp+0x18]
  4098de:	xor    rsi,QWORD PTR fs:0x28
  4098e7:	jne    409945 <_start@@Base+0x2ad5>
  4098e9:	add    rsp,0x28
  4098ed:	pop    rbx
  4098ee:	pop    rbp
  4098ef:	pop    r12
  4098f1:	pop    r13
  4098f3:	ret    
  4098f4:	nop    DWORD PTR [rax+0x0]
  4098f8:	mov    edx,DWORD PTR [rsp+0xc]
  4098fc:	test   edx,edx
  4098fe:	jne    409918 <_start@@Base+0x2aa8>
  409900:	mov    rdx,QWORD PTR [rsp+0x10]
  409905:	mov    ecx,0xffffffff
  40990a:	cmp    rdx,rcx
  40990d:	ja     409930 <_start@@Base+0x2ac0>
  40990f:	mov    DWORD PTR [r12],edx
  409913:	jmp    4098d9 <_start@@Base+0x2a69>
  409915:	nop    DWORD PTR [rax]
  409918:	mov    ecx,0x8
  40991d:	mov    rdx,rbx
  409920:	mov    rsi,rax
  409923:	mov    rdi,r13
  409926:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40992b:	jmp    4098d9 <_start@@Base+0x2a69>
  40992d:	nop    DWORD PTR [rax]
  409930:	mov    ecx,0x7
  409935:	mov    rdx,rbx
  409938:	mov    rsi,rax
  40993b:	mov    rdi,r13
  40993e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  409943:	jmp    4098d9 <_start@@Base+0x2a69>
  409945:	call   4061a0 <__stack_chk_fail@plt>
  40994a:	nop    WORD PTR [rax+rax*1+0x0]
  409950:	push   r13
  409952:	push   r12
  409954:	push   rbp
  409955:	push   rbx
  409956:	sub    rsp,0x28
  40995a:	mov    rax,QWORD PTR fs:0x28
  409963:	mov    QWORD PTR [rsp+0x18],rax
  409968:	xor    eax,eax
  40996a:	mov    QWORD PTR [rsp+0x10],0x0
  409973:	mov    DWORD PTR [rsp+0xc],0x0
  40997b:	mov    BYTE PTR [rcx],0x0
  40997e:	mov    rax,rsi
  409981:	cmp    rsi,rdx
  409984:	je     4099a6 <_start@@Base+0x2b36>
  409986:	mov    r12,rcx
  409989:	lea    r8,[rsp+0x10]
  40998e:	lea    rcx,[rsp+0xc]
  409993:	mov    rbp,rsi
  409996:	mov    r13,rdi
  409999:	mov    rbx,rdx
  40999c:	call   41f220 <flatcc_json_parser_integer@@Base>
  4099a1:	cmp    rbp,rax
  4099a4:	jne    4099c8 <_start@@Base+0x2b58>
  4099a6:	mov    rsi,QWORD PTR [rsp+0x18]
  4099ab:	xor    rsi,QWORD PTR fs:0x28
  4099b4:	jne    409a15 <_start@@Base+0x2ba5>
  4099b6:	add    rsp,0x28
  4099ba:	pop    rbx
  4099bb:	pop    rbp
  4099bc:	pop    r12
  4099be:	pop    r13
  4099c0:	ret    
  4099c1:	nop    DWORD PTR [rax+0x0]
  4099c8:	mov    edx,DWORD PTR [rsp+0xc]
  4099cc:	test   edx,edx
  4099ce:	jne    4099e8 <_start@@Base+0x2b78>
  4099d0:	mov    rdx,QWORD PTR [rsp+0x10]
  4099d5:	cmp    rdx,0xff
  4099dc:	ja     409a00 <_start@@Base+0x2b90>
  4099de:	mov    BYTE PTR [r12],dl
  4099e2:	jmp    4099a6 <_start@@Base+0x2b36>
  4099e4:	nop    DWORD PTR [rax+0x0]
  4099e8:	mov    ecx,0x8
  4099ed:	mov    rdx,rbx
  4099f0:	mov    rsi,rax
  4099f3:	mov    rdi,r13
  4099f6:	call   41d640 <flatcc_json_parser_set_error@@Base>
  4099fb:	jmp    4099a6 <_start@@Base+0x2b36>
  4099fd:	nop    DWORD PTR [rax]
  409a00:	mov    ecx,0x7
  409a05:	mov    rdx,rbx
  409a08:	mov    rsi,rax
  409a0b:	mov    rdi,r13
  409a0e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  409a13:	jmp    4099a6 <_start@@Base+0x2b36>
  409a15:	call   4061a0 <__stack_chk_fail@plt>
  409a1a:	nop    WORD PTR [rax+rax*1+0x0]
  409a20:	push   r13
  409a22:	push   r12
  409a24:	push   rbp
  409a25:	push   rbx
  409a26:	sub    rsp,0x28
  409a2a:	mov    rax,QWORD PTR fs:0x28
  409a33:	mov    QWORD PTR [rsp+0x18],rax
  409a38:	xor    eax,eax
  409a3a:	mov    QWORD PTR [rsp+0x10],0x0
  409a43:	mov    DWORD PTR [rsp+0xc],0x0
  409a4b:	mov    DWORD PTR [rcx],0x0
  409a51:	mov    rax,rsi
  409a54:	cmp    rsi,rdx
  409a57:	je     409a79 <_start@@Base+0x2c09>
  409a59:	mov    r12,rcx
  409a5c:	lea    r8,[rsp+0x10]
  409a61:	lea    rcx,[rsp+0xc]
  409a66:	mov    rbp,rsi
  409a69:	mov    r13,rdi
  409a6c:	mov    rbx,rdx
  409a6f:	call   41f220 <flatcc_json_parser_integer@@Base>
  409a74:	cmp    rbp,rax
  409a77:	jne    409a98 <_start@@Base+0x2c28>
  409a79:	mov    rsi,QWORD PTR [rsp+0x18]
  409a7e:	xor    rsi,QWORD PTR fs:0x28
  409a87:	jne    409b00 <_start@@Base+0x2c90>
  409a89:	add    rsp,0x28
  409a8d:	pop    rbx
  409a8e:	pop    rbp
  409a8f:	pop    r12
  409a91:	pop    r13
  409a93:	ret    
  409a94:	nop    DWORD PTR [rax+0x0]
  409a98:	mov    ecx,DWORD PTR [rsp+0xc]
  409a9c:	mov    rdx,QWORD PTR [rsp+0x10]
  409aa1:	test   ecx,ecx
  409aa3:	je     409ac0 <_start@@Base+0x2c50>
  409aa5:	mov    ecx,0x80000000
  409aaa:	cmp    rdx,rcx
  409aad:	ja     409ae8 <_start@@Base+0x2c78>
  409aaf:	neg    edx
  409ab1:	mov    DWORD PTR [r12],edx
  409ab5:	jmp    409a79 <_start@@Base+0x2c09>
  409ab7:	nop    WORD PTR [rax+rax*1+0x0]
  409ac0:	cmp    rdx,0x7fffffff
  409ac7:	ja     409ad0 <_start@@Base+0x2c60>
  409ac9:	mov    DWORD PTR [r12],edx
  409acd:	jmp    409a79 <_start@@Base+0x2c09>
  409acf:	nop
  409ad0:	mov    ecx,0x7
  409ad5:	mov    rdx,rbx
  409ad8:	mov    rsi,rax
  409adb:	mov    rdi,r13
  409ade:	call   41d640 <flatcc_json_parser_set_error@@Base>
  409ae3:	jmp    409a79 <_start@@Base+0x2c09>
  409ae5:	nop    DWORD PTR [rax]
  409ae8:	mov    ecx,0x8
  409aed:	mov    rdx,rbx
  409af0:	mov    rsi,rax
  409af3:	mov    rdi,r13
  409af6:	call   41d640 <flatcc_json_parser_set_error@@Base>
  409afb:	jmp    409a79 <_start@@Base+0x2c09>
  409b00:	call   4061a0 <__stack_chk_fail@plt>
  409b05:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  409b10:	push   r13
  409b12:	xor    r8d,r8d
  409b15:	push   r12
  409b17:	push   rbp
  409b18:	push   rbx
  409b19:	sub    rsp,0x28
  409b1d:	mov    rax,QWORD PTR fs:0x28
  409b26:	mov    QWORD PTR [rsp+0x18],rax
  409b2b:	xor    eax,eax
  409b2d:	mov    QWORD PTR [rsp+0x10],0x0
  409b36:	mov    DWORD PTR [rsp+0xc],0x0
  409b3e:	mov    WORD PTR [rcx],r8w
  409b42:	mov    rax,rsi
  409b45:	cmp    rsi,rdx
  409b48:	je     409b6a <_start@@Base+0x2cfa>
  409b4a:	mov    r12,rcx
  409b4d:	lea    r8,[rsp+0x10]
  409b52:	lea    rcx,[rsp+0xc]
  409b57:	mov    rbp,rsi
  409b5a:	mov    r13,rdi
  409b5d:	mov    rbx,rdx
  409b60:	call   41f220 <flatcc_json_parser_integer@@Base>
  409b65:	cmp    rbp,rax
  409b68:	jne    409b88 <_start@@Base+0x2d18>
  409b6a:	mov    rsi,QWORD PTR [rsp+0x18]
  409b6f:	xor    rsi,QWORD PTR fs:0x28
  409b78:	jne    409bf0 <_start@@Base+0x2d80>
  409b7a:	add    rsp,0x28
  409b7e:	pop    rbx
  409b7f:	pop    rbp
  409b80:	pop    r12
  409b82:	pop    r13
  409b84:	ret    
  409b85:	nop    DWORD PTR [rax]
  409b88:	mov    ecx,DWORD PTR [rsp+0xc]
  409b8c:	mov    rdx,QWORD PTR [rsp+0x10]
  409b91:	test   ecx,ecx
  409b93:	je     409bb0 <_start@@Base+0x2d40>
  409b95:	cmp    rdx,0x8000
  409b9c:	ja     409bd8 <_start@@Base+0x2d68>
  409b9e:	neg    edx
  409ba0:	mov    WORD PTR [r12],dx
  409ba5:	jmp    409b6a <_start@@Base+0x2cfa>
  409ba7:	nop    WORD PTR [rax+rax*1+0x0]
  409bb0:	cmp    rdx,0x7fff
  409bb7:	ja     409bc0 <_start@@Base+0x2d50>
  409bb9:	mov    WORD PTR [r12],dx
  409bbe:	jmp    409b6a <_start@@Base+0x2cfa>
  409bc0:	mov    ecx,0x7
  409bc5:	mov    rdx,rbx
  409bc8:	mov    rsi,rax
  409bcb:	mov    rdi,r13
  409bce:	call   41d640 <flatcc_json_parser_set_error@@Base>
  409bd3:	jmp    409b6a <_start@@Base+0x2cfa>
  409bd5:	nop    DWORD PTR [rax]
  409bd8:	mov    ecx,0x8
  409bdd:	mov    rdx,rbx
  409be0:	mov    rsi,rax
  409be3:	mov    rdi,r13
  409be6:	call   41d640 <flatcc_json_parser_set_error@@Base>
  409beb:	jmp    409b6a <_start@@Base+0x2cfa>
  409bf0:	call   4061a0 <__stack_chk_fail@plt>
  409bf5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  409c00:	endbr64 
  409c04:	push   rbx
  409c05:	xor    esi,esi
  409c07:	mov    ecx,0x8
  409c0c:	mov    edx,0x8
  409c11:	mov    rbx,rdi
  409c14:	call   41b0a0 <flatcc_verify_field@@Base>
  409c19:	test   eax,eax
  409c1b:	je     409c20 <_start@@Base+0x2db0>
  409c1d:	pop    rbx
  409c1e:	ret    
  409c1f:	nop
  409c20:	mov    rdi,rbx
  409c23:	mov    ecx,0x4
  409c28:	mov    edx,0x4
  409c2d:	mov    esi,0x1
  409c32:	pop    rbx
  409c33:	jmp    41b0a0 <flatcc_verify_field@@Base>
  409c38:	nop    DWORD PTR [rax+rax*1+0x0]
  409c40:	endbr64 
  409c44:	push   r13
  409c46:	mov    rax,rdx
  409c49:	sub    rax,rsi
  409c4c:	push   r12
  409c4e:	mov    r10,rsi
  409c51:	mov    r11,rdx
  409c54:	push   rbp
  409c55:	mov    rbp,rcx
  409c58:	push   rbx
  409c59:	mov    rbx,rdi
  409c5c:	sub    rsp,0x8
  409c60:	cmp    rax,0x7
  409c64:	ja     409cd0 <_start@@Base+0x2e60>
  409c66:	mov    rsi,rdx
  409c69:	mov    rdi,r10
  409c6c:	call   406f60 <_start@@Base+0xf0>
  409c71:	movabs rdx,0x4368617261637465
  409c7b:	cmp    rax,rdx
  409c7e:	jne    409cbd <_start@@Base+0x2e4d>
  409c80:	lea    r12,[r10+0x8]
  409c84:	mov    r13,r11
  409c87:	sub    r13,r12
  409c8a:	cmp    r13,0x7
  409c8e:	ja     409ce0 <_start@@Base+0x2e70>
  409c90:	mov    rsi,r11
  409c93:	mov    rdi,r12
  409c96:	call   406f60 <_start@@Base+0xf0>
  409c9b:	movabs rdx,0xff00000000000000
  409ca5:	and    rax,rdx
  409ca8:	movabs rdx,0x7200000000000000
  409cb2:	cmp    rax,rdx
  409cb5:	jne    409cbd <_start@@Base+0x2e4d>
  409cb7:	cmp    r13,0x1
  409cbb:	jg     409cf0 <_start@@Base+0x2e80>
  409cbd:	add    rsp,0x8
  409cc1:	pop    rbx
  409cc2:	pop    rbp
  409cc3:	pop    r12
  409cc5:	mov    rax,r10
  409cc8:	pop    r13
  409cca:	ret    
  409ccb:	nop    DWORD PTR [rax+rax*1+0x0]
  409cd0:	movbe  rax,QWORD PTR [rsi]
  409cd5:	jmp    409c71 <_start@@Base+0x2e01>
  409cd7:	nop    WORD PTR [rax+rax*1+0x0]
  409ce0:	movbe  rax,QWORD PTR [r10+0x8]
  409ce6:	jmp    409c9b <_start@@Base+0x2e2b>
  409ce8:	nop    DWORD PTR [rax+rax*1+0x0]
  409cf0:	cmp    BYTE PTR [r10+0x9],0x2e
  409cf5:	jne    409cbd <_start@@Base+0x2e4d>
  409cf7:	lea    rsi,[r10+0xa]
  409cfb:	cmp    r12,rsi
  409cfe:	je     409cbd <_start@@Base+0x2e4d>
  409d00:	add    rsp,0x8
  409d04:	mov    rdi,rbx
  409d07:	pop    rbx
  409d08:	mov    rcx,rbp
  409d0b:	pop    rbp
  409d0c:	pop    r12
  409d0e:	mov    rdx,r11
  409d11:	pop    r13
  409d13:	jmp    407fb0 <_start@@Base+0x1140>
  409d18:	nop    DWORD PTR [rax+rax*1+0x0]
  409d20:	endbr64 
  409d24:	push   r13
  409d26:	mov    r10,rsi
  409d29:	mov    r11,rdx
  409d2c:	push   r12
  409d2e:	mov    r12,rcx
  409d31:	push   rbp
  409d32:	mov    rbp,rdi
  409d35:	push   rbx
  409d36:	mov    rbx,rdx
  409d39:	sub    rbx,rsi
  409d3c:	sub    rsp,0x8
  409d40:	cmp    rbx,0x7
  409d44:	ja     409e68 <_start@@Base+0x2ff8>
  409d4a:	mov    rsi,rdx
  409d4d:	mov    rdi,r10
  409d50:	call   406f60 <_start@@Base+0xf0>
  409d55:	movabs rdx,0x6865785f656e756c
  409d5f:	cmp    rax,rdx
  409d62:	ja     409e10 <_start@@Base+0x2fa0>
  409d68:	movabs rdx,0xffffff0000000000
  409d72:	movabs rcx,0x436f6c6f71ffffff
  409d7c:	and    rdx,rax
  409d7f:	cmp    rax,rcx
  409d82:	ja     409db8 <_start@@Base+0x2f48>
  409d84:	movabs rax,0x416e790000000000
  409d8e:	cmp    rdx,rax
  409d91:	jne    409da4 <_start@@Base+0x2f34>
  409d93:	cmp    rbx,0x3
  409d97:	jle    409da4 <_start@@Base+0x2f34>
  409d99:	cmp    BYTE PTR [r10+0x3],0x2e
  409d9e:	je     409fb0 <_start@@Base+0x3140>
  409da4:	add    rsp,0x8
  409da8:	pop    rbx
  409da9:	pop    rbp
  409daa:	pop    r12
  409dac:	mov    rax,r10
  409daf:	pop    r13
  409db1:	ret    
  409db2:	nop    WORD PTR [rax+rax*1+0x0]
  409db8:	movabs rcx,0x466f6f0000000000
  409dc2:	cmp    rdx,rcx
  409dc5:	je     409f78 <_start@@Base+0x3108>
  409dcb:	and    rax,0xffffffffff000000
  409dd1:	movabs rdx,0x436f6c6f72000000
  409ddb:	cmp    rax,rdx
  409dde:	jne    409da4 <_start@@Base+0x2f34>
  409de0:	cmp    rbx,0x5
  409de4:	jle    409da4 <_start@@Base+0x2f34>
  409de6:	cmp    BYTE PTR [r10+0x5],0x2e
  409deb:	jne    409da4 <_start@@Base+0x2f34>
  409ded:	add    rsp,0x8
  409df1:	pop    rbx
  409df2:	mov    rdi,rbp
  409df5:	pop    rbp
  409df6:	mov    rcx,r12
  409df9:	pop    r12
  409dfb:	lea    rsi,[r10+0x6]
  409dff:	mov    rdx,r11
  409e02:	pop    r13
  409e04:	jmp    408990 <_start@@Base+0x1b20>
  409e09:	nop    DWORD PTR [rax+0x0]
  409e10:	movabs rdx,0x696e745f656e756c
  409e1a:	cmp    rax,rdx
  409e1d:	ja     409e78 <_start@@Base+0x3008>
  409e1f:	movabs rdx,0x6865785f656e756d
  409e29:	cmp    rax,rdx
  409e2c:	jne    409da4 <_start@@Base+0x2f34>
  409e32:	cmp    rbx,0x8
  409e36:	jle    409da4 <_start@@Base+0x2f34>
  409e3c:	cmp    BYTE PTR [r10+0x8],0x2e
  409e41:	jne    409da4 <_start@@Base+0x2f34>
  409e47:	add    rsp,0x8
  409e4b:	pop    rbx
  409e4c:	mov    rdi,rbp
  409e4f:	pop    rbp
  409e50:	mov    rcx,r12
  409e53:	pop    r12
  409e55:	lea    rsi,[r10+0x9]
  409e59:	mov    rdx,r11
  409e5c:	pop    r13
  409e5e:	jmp    408520 <_start@@Base+0x16b0>
  409e63:	nop    DWORD PTR [rax+rax*1+0x0]
  409e68:	movbe  rax,QWORD PTR [rsi]
  409e6d:	jmp    409d55 <_start@@Base+0x2ee5>
  409e72:	nop    WORD PTR [rax+rax*1+0x0]
  409e78:	movabs rdx,0x6e65675f656e756c
  409e82:	cmp    rax,rdx
  409e85:	ja     409ed0 <_start@@Base+0x3060>
  409e87:	movabs rdx,0x696e745f656e756d
  409e91:	cmp    rax,rdx
  409e94:	jne    409da4 <_start@@Base+0x2f34>
  409e9a:	cmp    rbx,0x8
  409e9e:	jle    409da4 <_start@@Base+0x2f34>
  409ea4:	cmp    BYTE PTR [r10+0x8],0x2e
  409ea9:	jne    409da4 <_start@@Base+0x2f34>
  409eaf:	add    rsp,0x8
  409eb3:	pop    rbx
  409eb4:	mov    rdi,rbp
  409eb7:	pop    rbp
  409eb8:	mov    rcx,r12
  409ebb:	pop    r12
  409ebd:	lea    rsi,[r10+0x9]
  409ec1:	mov    rdx,r11
  409ec4:	pop    r13
  409ec6:	jmp    408680 <_start@@Base+0x1810>
  409ecb:	nop    DWORD PTR [rax+rax*1+0x0]
  409ed0:	movabs rdx,0x6e65675f656e756d
  409eda:	cmp    rax,rdx
  409edd:	je     409fd0 <_start@@Base+0x3160>
  409ee3:	endbr64 
  409ee7:	movabs rdx,0x6e6f74656d707479
  409ef1:	cmp    rax,rdx
  409ef4:	jne    409da4 <_start@@Base+0x2f34>
  409efa:	lea    rbx,[r10+0x8]
  409efe:	mov    r13,r11
  409f01:	sub    r13,rbx
  409f04:	cmp    r13,0x7
  409f08:	ja     40a008 <_start@@Base+0x3198>
  409f0e:	mov    rsi,r11
  409f11:	mov    rdi,rbx
  409f14:	call   406f60 <_start@@Base+0xf0>
  409f19:	movabs rdx,0xffffffff00000000
  409f23:	and    rax,rdx
  409f26:	movabs rdx,0x656e756d00000000
  409f30:	cmp    rax,rdx
  409f33:	jne    409da4 <_start@@Base+0x2f34>
  409f39:	cmp    r13,0x4
  409f3d:	jle    409da4 <_start@@Base+0x2f34>
  409f43:	cmp    BYTE PTR [r10+0xc],0x2e
  409f48:	jne    409da4 <_start@@Base+0x2f34>
  409f4e:	lea    rsi,[r10+0xd]
  409f52:	cmp    rbx,rsi
  409f55:	je     409da4 <_start@@Base+0x2f34>
  409f5b:	add    rsp,0x8
  409f5f:	pop    rbx
  409f60:	mov    rdi,rbp
  409f63:	pop    rbp
  409f64:	mov    rcx,r12
  409f67:	pop    r12
  409f69:	mov    rdx,r11
  409f6c:	pop    r13
  409f6e:	jmp    409710 <_start@@Base+0x28a0>
  409f73:	nop    DWORD PTR [rax+rax*1+0x0]
  409f78:	cmp    rbx,0x3
  409f7c:	jle    409da4 <_start@@Base+0x2f34>
  409f82:	cmp    BYTE PTR [r10+0x3],0x2e
  409f87:	jne    409da4 <_start@@Base+0x2f34>
  409f8d:	add    rsp,0x8
  409f91:	pop    rbx
  409f92:	mov    rdi,rbp
  409f95:	pop    rbp
  409f96:	mov    rcx,r12
  409f99:	pop    r12
  409f9b:	lea    rsi,[r10+0x4]
  409f9f:	mov    rdx,r11
  409fa2:	pop    r13
  409fa4:	jmp    409590 <_start@@Base+0x2720>
  409fa9:	nop    DWORD PTR [rax+0x0]
  409fb0:	add    rsp,0x8
  409fb4:	pop    rbx
  409fb5:	mov    rdi,rbp
  409fb8:	pop    rbp
  409fb9:	mov    rcx,r12
  409fbc:	pop    r12
  409fbe:	lea    rsi,[r10+0x4]
  409fc2:	mov    rdx,r11
  409fc5:	pop    r13
  409fc7:	jmp    408290 <_start@@Base+0x1420>
  409fcc:	nop    DWORD PTR [rax+0x0]
  409fd0:	cmp    rbx,0x8
  409fd4:	jle    409da4 <_start@@Base+0x2f34>
  409fda:	cmp    BYTE PTR [r10+0x8],0x2e
  409fdf:	jne    409da4 <_start@@Base+0x2f34>
  409fe5:	add    rsp,0x8
  409fe9:	pop    rbx
  409fea:	mov    rdi,rbp
  409fed:	pop    rbp
  409fee:	mov    rcx,r12
  409ff1:	pop    r12
  409ff3:	lea    rsi,[r10+0x9]
  409ff7:	mov    rdx,r11
  409ffa:	pop    r13
  409ffc:	jmp    408840 <_start@@Base+0x19d0>
  40a001:	nop    DWORD PTR [rax+0x0]
  40a008:	movbe  rax,QWORD PTR [r10+0x8]
  40a00e:	jmp    409f19 <_start@@Base+0x30a9>
  40a013:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40a01e:	xchg   ax,ax
  40a020:	endbr64 
  40a024:	push   r14
  40a026:	mov    rax,rdx
  40a029:	sub    rax,rsi
  40a02c:	push   r13
  40a02e:	mov    r10,rsi
  40a031:	mov    r11,rdx
  40a034:	push   r12
  40a036:	mov    r12,rdi
  40a039:	push   rbp
  40a03a:	mov    rbp,r8
  40a03d:	push   rbx
  40a03e:	mov    rbx,rcx
  40a041:	cmp    rax,0x7
  40a045:	ja     40a2c8 <_start@@Base+0x3458>
  40a04b:	mov    rsi,rdx
  40a04e:	mov    rdi,r10
  40a051:	call   406f60 <_start@@Base+0xf0>
  40a056:	movabs rdx,0x4d7947616d652e44
  40a060:	cmp    rax,rdx
  40a063:	ja     40a0f8 <_start@@Base+0x3288>
  40a069:	movabs rdx,0x46616e746173792e
  40a073:	cmp    rax,rdx
  40a076:	jne    40a0e5 <_start@@Base+0x3275>
  40a078:	lea    rdi,[r10+0x8]
  40a07c:	mov    rax,r11
  40a07f:	sub    rax,rdi
  40a082:	cmp    rax,0x7
  40a086:	ja     40a2d8 <_start@@Base+0x3468>
  40a08c:	mov    rsi,r11
  40a08f:	call   406f60 <_start@@Base+0xf0>
  40a094:	movabs rdx,0x4368617261637465
  40a09e:	cmp    rax,rdx
  40a0a1:	jne    40a0e5 <_start@@Base+0x3275>
  40a0a3:	lea    rdi,[r10+0x10]
  40a0a7:	mov    r8,r11
  40a0aa:	sub    r8,rdi
  40a0ad:	cmp    r8,0x7
  40a0b1:	ja     40a590 <_start@@Base+0x3720>
  40a0b7:	mov    rsi,r11
  40a0ba:	call   406f60 <_start@@Base+0xf0>
  40a0bf:	movabs rdx,0xff00000000000000
  40a0c9:	and    rax,rdx
  40a0cc:	movabs rdx,0x7200000000000000
  40a0d6:	cmp    rax,rdx
  40a0d9:	jne    40a0e5 <_start@@Base+0x3275>
  40a0db:	cmp    r8,0x1
  40a0df:	jg     40a568 <_start@@Base+0x36f8>
  40a0e5:	pop    rbx
  40a0e6:	pop    rbp
  40a0e7:	pop    r12
  40a0e9:	pop    r13
  40a0eb:	mov    rax,r10
  40a0ee:	pop    r14
  40a0f0:	ret    
  40a0f1:	nop    DWORD PTR [rax+0x0]
  40a0f8:	movabs rdx,0x4d7947616d652e45
  40a102:	cmp    rax,rdx
  40a105:	je     40a2e8 <_start@@Base+0x3478>
  40a10b:	movabs rdx,0x4d7947616d652e4f
  40a115:	cmp    rax,rdx
  40a118:	jne    40a0e5 <_start@@Base+0x3275>
  40a11a:	lea    rdi,[r10+0x8]
  40a11e:	mov    rax,r11
  40a121:	sub    rax,rdi
  40a124:	cmp    rax,0x7
  40a128:	ja     40a470 <_start@@Base+0x3600>
  40a12e:	mov    rsi,r11
  40a131:	call   406f60 <_start@@Base+0xf0>
  40a136:	movabs rdx,0x746865724e616d65
  40a140:	cmp    rax,rdx
  40a143:	jne    40a0e5 <_start@@Base+0x3275>
  40a145:	lea    rdi,[r10+0x10]
  40a149:	mov    rax,r11
  40a14c:	sub    rax,rdi
  40a14f:	cmp    rax,0x7
  40a153:	ja     40a5a0 <_start@@Base+0x3730>
  40a159:	mov    rsi,r11
  40a15c:	call   406f60 <_start@@Base+0xf0>
  40a161:	movabs rdx,0x53706163652e4672
  40a16b:	cmp    rax,rdx
  40a16e:	jne    40a0e5 <_start@@Base+0x3275>
  40a174:	lea    rdi,[r10+0x18]
  40a178:	mov    rax,r11
  40a17b:	sub    rax,rdi
  40a17e:	cmp    rax,0x7
  40a182:	ja     40a6f0 <_start@@Base+0x3880>
  40a188:	mov    rsi,r11
  40a18b:	call   406f60 <_start@@Base+0xf0>
  40a190:	movabs rdx,0x6f6d496e636c7564
  40a19a:	cmp    rax,rdx
  40a19d:	jne    40a0e5 <_start@@Base+0x3275>
  40a1a3:	lea    rdi,[r10+0x20]
  40a1a7:	mov    r8,r11
  40a1aa:	sub    r8,rdi
  40a1ad:	cmp    r8,0x7
  40a1b1:	ja     40a706 <_start@@Base+0x3896>
  40a1b7:	mov    rsi,r11
  40a1ba:	call   406f60 <_start@@Base+0xf0>
  40a1bf:	movabs rdx,0xff00000000000000
  40a1c9:	and    rax,rdx
  40a1cc:	movabs rdx,0x6500000000000000
  40a1d6:	cmp    rax,rdx
  40a1d9:	jne    40a0e5 <_start@@Base+0x3275>
  40a1df:	cmp    r8,0x1
  40a1e3:	jle    40a0e5 <_start@@Base+0x3275>
  40a1e9:	cmp    BYTE PTR [r10+0x21],0x2e
  40a1ee:	jne    40a0e5 <_start@@Base+0x3275>
  40a1f4:	lea    r13,[r10+0x22]
  40a1f8:	mov    rax,r11
  40a1fb:	sub    rax,r13
  40a1fe:	cmp    rax,0x7
  40a202:	ja     40a778 <_start@@Base+0x3908>
  40a208:	mov    rsi,r11
  40a20b:	mov    rdi,r13
  40a20e:	call   406f60 <_start@@Base+0xf0>
  40a213:	movabs rdx,0xffffff0000000000
  40a21d:	and    rdx,rax
  40a220:	movabs rcx,0x466f6f0000000000
  40a22a:	cmp    rdx,rcx
  40a22d:	je     40a783 <_start@@Base+0x3913>
  40a233:	endbr64 
  40a237:	movabs rdx,0x496e636c75646556
  40a241:	cmp    rax,rdx
  40a244:	jne    40a7b8 <_start@@Base+0x3948>
  40a24a:	lea    r14,[r10+0x2a]
  40a24e:	mov    rax,r11
  40a251:	sub    rax,r14
  40a254:	cmp    rax,0x7
  40a258:	ja     40a7cb <_start@@Base+0x395b>
  40a25e:	mov    rsi,r11
  40a261:	mov    rdi,r14
  40a264:	call   406f60 <_start@@Base+0xf0>
  40a269:	movabs rdx,0xffff000000000000
  40a273:	and    rax,rdx
  40a276:	movabs rdx,0x616c000000000000
  40a280:	mov    r10,r13
  40a283:	cmp    rax,rdx
  40a286:	jne    40a0e5 <_start@@Base+0x3275>
  40a28c:	mov    r8,r9
  40a28f:	mov    ecx,0x2
  40a294:	mov    rdx,r11
  40a297:	mov    rsi,r14
  40a29a:	mov    rdi,r12
  40a29d:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  40a2a2:	mov    r10,rax
  40a2a5:	cmp    r14,rax
  40a2a8:	je     40a7b8 <_start@@Base+0x3948>
  40a2ae:	mov    QWORD PTR [rbp+0x0],0x0
  40a2b6:	mov    DWORD PTR [rbx],0x0
  40a2bc:	jmp    40a0e5 <_start@@Base+0x3275>
  40a2c1:	nop    DWORD PTR [rax+0x0]
  40a2c8:	movbe  rax,QWORD PTR [rsi]
  40a2cd:	jmp    40a056 <_start@@Base+0x31e6>
  40a2d2:	nop    WORD PTR [rax+rax*1+0x0]
  40a2d8:	movbe  rax,QWORD PTR [r10+0x8]
  40a2de:	jmp    40a094 <_start@@Base+0x3224>
  40a2e3:	nop    DWORD PTR [rax+rax*1+0x0]
  40a2e8:	lea    rdi,[r10+0x8]
  40a2ec:	mov    rax,r11
  40a2ef:	sub    rax,rdi
  40a2f2:	cmp    rax,0x7
  40a2f6:	ja     40a460 <_start@@Base+0x35f0>
  40a2fc:	mov    rsi,r11
  40a2ff:	call   406f60 <_start@@Base+0xf0>
  40a304:	movabs rdx,0x78616d706c652e67
  40a30e:	cmp    rax,rdx
  40a311:	ja     40a3c0 <_start@@Base+0x3550>
  40a317:	sub    rdx,0x25
  40a31b:	cmp    rax,rdx
  40a31e:	jbe    40a4e8 <_start@@Base+0x3678>
  40a324:	movabs rdx,0x78616d706c652e43
  40a32e:	cmp    rax,rdx
  40a331:	je     40a680 <_start@@Base+0x3810>
  40a337:	movabs rdx,0x78616d706c652e46
  40a341:	cmp    rax,rdx
  40a344:	jne    40a0e5 <_start@@Base+0x3275>
  40a34a:	lea    rdi,[r10+0x10]
  40a34e:	mov    r8,r11
  40a351:	sub    r8,rdi
  40a354:	cmp    r8,0x7
  40a358:	ja     40a71c <_start@@Base+0x38ac>
  40a35e:	mov    rsi,r11
  40a361:	call   406f60 <_start@@Base+0xf0>
  40a366:	movabs rdx,0xffff000000000000
  40a370:	and    rax,rdx
  40a373:	movabs rdx,0x6f6f000000000000
  40a37d:	cmp    rax,rdx
  40a380:	jne    40a0e5 <_start@@Base+0x3275>
  40a386:	cmp    r8,0x2
  40a38a:	jle    40a0e5 <_start@@Base+0x3275>
  40a390:	cmp    BYTE PTR [r10+0x12],0x2e
  40a395:	jne    40a0e5 <_start@@Base+0x3275>
  40a39b:	mov    rcx,rbx
  40a39e:	pop    rbx
  40a39f:	mov    r8,rbp
  40a3a2:	pop    rbp
  40a3a3:	mov    rdi,r12
  40a3a6:	pop    r12
  40a3a8:	pop    r13
  40a3aa:	lea    rsi,[r10+0x13]
  40a3ae:	mov    rdx,r11
  40a3b1:	pop    r14
  40a3b3:	jmp    409590 <_start@@Base+0x2720>
  40a3b8:	nop    DWORD PTR [rax+rax*1+0x0]
  40a3c0:	movabs rdx,0x78616d706c652e68
  40a3ca:	cmp    rax,rdx
  40a3cd:	je     40a480 <_start@@Base+0x3610>
  40a3d3:	movabs rdx,0x78616d706c652e6d
  40a3dd:	cmp    rax,rdx
  40a3e0:	ja     40a5b0 <_start@@Base+0x3740>
  40a3e6:	sub    rdx,0x4
  40a3ea:	cmp    rax,rdx
  40a3ed:	jne    40a0e5 <_start@@Base+0x3275>
  40a3f3:	lea    rax,[r10+0x10]
  40a3f7:	mov    rcx,r11
  40a3fa:	sub    rcx,rax
  40a3fd:	mov    rax,rcx
  40a400:	cmp    rcx,0x7
  40a404:	jbe    40a0e5 <_start@@Base+0x3275>
  40a40a:	movbe  rdx,QWORD PTR [r10+0x10]
  40a410:	movabs rcx,0x6e745f656e756d00
  40a41a:	xor    dl,dl
  40a41c:	cmp    rdx,rcx
  40a41f:	jne    40a0e5 <_start@@Base+0x3275>
  40a425:	cmp    rax,0x7
  40a429:	jle    40a0e5 <_start@@Base+0x3275>
  40a42f:	cmp    BYTE PTR [r10+0x17],0x2e
  40a434:	jne    40a0e5 <_start@@Base+0x3275>
  40a43a:	mov    rcx,rbx
  40a43d:	pop    rbx
  40a43e:	mov    r8,rbp
  40a441:	pop    rbp
  40a442:	mov    rdi,r12
  40a445:	pop    r12
  40a447:	pop    r13
  40a449:	lea    rsi,[r10+0x18]
  40a44d:	mov    rdx,r11
  40a450:	pop    r14
  40a452:	jmp    408680 <_start@@Base+0x1810>
  40a457:	nop    WORD PTR [rax+rax*1+0x0]
  40a460:	movbe  rax,QWORD PTR [r10+0x8]
  40a466:	jmp    40a304 <_start@@Base+0x3494>
  40a46b:	nop    DWORD PTR [rax+rax*1+0x0]
  40a470:	movbe  rax,QWORD PTR [r10+0x8]
  40a476:	jmp    40a136 <_start@@Base+0x32c6>
  40a47b:	nop    DWORD PTR [rax+rax*1+0x0]
  40a480:	lea    rax,[r10+0x10]
  40a484:	mov    rcx,r11
  40a487:	sub    rcx,rax
  40a48a:	mov    rax,rcx
  40a48d:	cmp    rcx,0x7
  40a491:	jbe    40a0e5 <_start@@Base+0x3275>
  40a497:	movbe  rdx,QWORD PTR [r10+0x10]
  40a49d:	movabs rcx,0x65785f656e756d00
  40a4a7:	xor    dl,dl
  40a4a9:	cmp    rdx,rcx
  40a4ac:	jne    40a0e5 <_start@@Base+0x3275>
  40a4b2:	cmp    rax,0x7
  40a4b6:	jle    40a0e5 <_start@@Base+0x3275>
  40a4bc:	cmp    BYTE PTR [r10+0x17],0x2e
  40a4c1:	jne    40a0e5 <_start@@Base+0x3275>
  40a4c7:	mov    rcx,rbx
  40a4ca:	pop    rbx
  40a4cb:	mov    r8,rbp
  40a4ce:	pop    rbp
  40a4cf:	mov    rdi,r12
  40a4d2:	pop    r12
  40a4d4:	pop    r13
  40a4d6:	lea    rsi,[r10+0x18]
  40a4da:	mov    rdx,r11
  40a4dd:	pop    r14
  40a4df:	jmp    408520 <_start@@Base+0x16b0>
  40a4e4:	nop    DWORD PTR [rax+0x0]
  40a4e8:	dec    rdx
  40a4eb:	cmp    rax,rdx
  40a4ee:	jne    40a0e5 <_start@@Base+0x3275>
  40a4f4:	lea    rdi,[r10+0x10]
  40a4f8:	mov    r8,r11
  40a4fb:	sub    r8,rdi
  40a4fe:	cmp    r8,0x7
  40a502:	ja     40a6fb <_start@@Base+0x388b>
  40a508:	mov    rsi,r11
  40a50b:	call   406f60 <_start@@Base+0xf0>
  40a510:	movabs rdx,0xffff000000000000
  40a51a:	and    rax,rdx
  40a51d:	movabs rdx,0x6e79000000000000
  40a527:	cmp    rax,rdx
  40a52a:	jne    40a0e5 <_start@@Base+0x3275>
  40a530:	cmp    r8,0x2
  40a534:	jle    40a0e5 <_start@@Base+0x3275>
  40a53a:	cmp    BYTE PTR [r10+0x12],0x2e
  40a53f:	jne    40a0e5 <_start@@Base+0x3275>
  40a545:	mov    rcx,rbx
  40a548:	pop    rbx
  40a549:	mov    r8,rbp
  40a54c:	pop    rbp
  40a54d:	mov    rdi,r12
  40a550:	pop    r12
  40a552:	pop    r13
  40a554:	lea    rsi,[r10+0x13]
  40a558:	mov    rdx,r11
  40a55b:	pop    r14
  40a55d:	jmp    408290 <_start@@Base+0x1420>
  40a562:	nop    WORD PTR [rax+rax*1+0x0]
  40a568:	cmp    BYTE PTR [r10+0x11],0x2e
  40a56d:	jne    40a0e5 <_start@@Base+0x3275>
  40a573:	mov    rcx,rbx
  40a576:	pop    rbx
  40a577:	mov    r8,rbp
  40a57a:	pop    rbp
  40a57b:	mov    rdi,r12
  40a57e:	pop    r12
  40a580:	pop    r13
  40a582:	lea    rsi,[r10+0x12]
  40a586:	mov    rdx,r11
  40a589:	pop    r14
  40a58b:	jmp    407fb0 <_start@@Base+0x1140>
  40a590:	movbe  rax,QWORD PTR [r10+0x10]
  40a596:	jmp    40a0bf <_start@@Base+0x324f>
  40a59b:	nop    DWORD PTR [rax+rax*1+0x0]
  40a5a0:	movbe  rax,QWORD PTR [r10+0x10]
  40a5a6:	jmp    40a161 <_start@@Base+0x32f1>
  40a5ab:	nop    DWORD PTR [rax+rax*1+0x0]
  40a5b0:	movabs rdx,0x78616d706c652e6e
  40a5ba:	cmp    rax,rdx
  40a5bd:	jne    40a0e5 <_start@@Base+0x3275>
  40a5c3:	lea    rdi,[r10+0x10]
  40a5c7:	mov    rdx,r11
  40a5ca:	sub    rdx,rdi
  40a5cd:	cmp    rdx,0x7
  40a5d1:	ja     40a727 <_start@@Base+0x38b7>
  40a5d7:	mov    rsi,r11
  40a5da:	call   406f60 <_start@@Base+0xf0>
  40a5df:	mov    rcx,rax
  40a5e2:	xor    cl,cl
  40a5e4:	movabs rdx,0x65675f656e756d00
  40a5ee:	cmp    rcx,rdx
  40a5f1:	je     40a0e5 <_start@@Base+0x3275>
  40a5f7:	movabs rdx,0x6f74656d70747965
  40a601:	cmp    rax,rdx
  40a604:	jne    40a0e5 <_start@@Base+0x3275>
  40a60a:	lea    rdi,[r10+0x18]
  40a60e:	mov    r8,r11
  40a611:	sub    r8,rdi
  40a614:	cmp    r8,0x7
  40a618:	ja     40a7c0 <_start@@Base+0x3950>
  40a61e:	mov    rsi,r11
  40a621:	call   406f60 <_start@@Base+0xf0>
  40a626:	movabs rdx,0xffffff0000000000
  40a630:	and    rax,rdx
  40a633:	movabs rdx,0x6e756d0000000000
  40a63d:	cmp    rax,rdx
  40a640:	jne    40a0e5 <_start@@Base+0x3275>
  40a646:	cmp    r8,0x3
  40a64a:	jle    40a0e5 <_start@@Base+0x3275>
  40a650:	cmp    BYTE PTR [r10+0x1b],0x2e
  40a655:	jne    40a0e5 <_start@@Base+0x3275>
  40a65b:	mov    rcx,rbx
  40a65e:	pop    rbx
  40a65f:	mov    r8,rbp
  40a662:	pop    rbp
  40a663:	mov    rdi,r12
  40a666:	pop    r12
  40a668:	pop    r13
  40a66a:	lea    rsi,[r10+0x1c]
  40a66e:	mov    rdx,r11
  40a671:	pop    r14
  40a673:	jmp    409710 <_start@@Base+0x28a0>
  40a678:	nop    DWORD PTR [rax+rax*1+0x0]
  40a680:	lea    rdi,[r10+0x10]
  40a684:	mov    r8,r11
  40a687:	sub    r8,rdi
  40a68a:	cmp    r8,0x7
  40a68e:	ja     40a711 <_start@@Base+0x38a1>
  40a694:	mov    rsi,r11
  40a697:	call   406f60 <_start@@Base+0xf0>
  40a69c:	movabs rdx,0xffffffff00000000
  40a6a6:	and    rax,rdx
  40a6a9:	movabs rdx,0x6f6c6f7200000000
  40a6b3:	cmp    rax,rdx
  40a6b6:	jne    40a0e5 <_start@@Base+0x3275>
  40a6bc:	cmp    r8,0x4
  40a6c0:	jle    40a0e5 <_start@@Base+0x3275>
  40a6c6:	cmp    BYTE PTR [r10+0x14],0x2e
  40a6cb:	jne    40a0e5 <_start@@Base+0x3275>
  40a6d1:	mov    rcx,rbx
  40a6d4:	pop    rbx
  40a6d5:	mov    r8,rbp
  40a6d8:	pop    rbp
  40a6d9:	mov    rdi,r12
  40a6dc:	pop    r12
  40a6de:	pop    r13
  40a6e0:	lea    rsi,[r10+0x15]
  40a6e4:	mov    rdx,r11
  40a6e7:	pop    r14
  40a6e9:	jmp    408990 <_start@@Base+0x1b20>
  40a6ee:	xchg   ax,ax
  40a6f0:	movbe  rax,QWORD PTR [r10+0x18]
  40a6f6:	jmp    40a190 <_start@@Base+0x3320>
  40a6fb:	movbe  rax,QWORD PTR [r10+0x10]
  40a701:	jmp    40a510 <_start@@Base+0x36a0>
  40a706:	movbe  rax,QWORD PTR [r10+0x20]
  40a70c:	jmp    40a1bf <_start@@Base+0x334f>
  40a711:	movbe  rax,QWORD PTR [r10+0x10]
  40a717:	jmp    40a69c <_start@@Base+0x382c>
  40a71c:	movbe  rax,QWORD PTR [r10+0x10]
  40a722:	jmp    40a366 <_start@@Base+0x34f6>
  40a727:	movbe  rax,QWORD PTR [r10+0x10]
  40a72d:	movabs rcx,0x65675f656e756d00
  40a737:	mov    rsi,rax
  40a73a:	xor    sil,sil
  40a73d:	cmp    rsi,rcx
  40a740:	jne    40a5f7 <_start@@Base+0x3787>
  40a746:	cmp    rdx,0x7
  40a74a:	jle    40a0e5 <_start@@Base+0x3275>
  40a750:	cmp    BYTE PTR [r10+0x17],0x2e
  40a755:	jne    40a0e5 <_start@@Base+0x3275>
  40a75b:	mov    rcx,rbx
  40a75e:	pop    rbx
  40a75f:	mov    r8,rbp
  40a762:	pop    rbp
  40a763:	mov    rdi,r12
  40a766:	pop    r12
  40a768:	pop    r13
  40a76a:	lea    rsi,[r10+0x18]
  40a76e:	mov    rdx,r11
  40a771:	pop    r14
  40a773:	jmp    408840 <_start@@Base+0x19d0>
  40a778:	movbe  rax,QWORD PTR [r10+0x22]
  40a77e:	jmp    40a213 <_start@@Base+0x33a3>
  40a783:	mov    r8,r9
  40a786:	mov    ecx,0x3
  40a78b:	mov    rdx,r11
  40a78e:	mov    rsi,r13
  40a791:	mov    rdi,r12
  40a794:	call   41e170 <flatcc_json_parser_match_constant@@Base>
  40a799:	mov    r10,rax
  40a79c:	cmp    r13,rax
  40a79f:	je     40a0e5 <_start@@Base+0x3275>
  40a7a5:	mov    QWORD PTR [rbp+0x0],0x11
  40a7ad:	mov    DWORD PTR [rbx],0x0
  40a7b3:	jmp    40a0e5 <_start@@Base+0x3275>
  40a7b8:	mov    r10,r13
  40a7bb:	jmp    40a0e5 <_start@@Base+0x3275>
  40a7c0:	movbe  rax,QWORD PTR [r10+0x18]
  40a7c6:	jmp    40a626 <_start@@Base+0x37b6>
  40a7cb:	movbe  rax,QWORD PTR [r10+0x2a]
  40a7d1:	jmp    40a269 <_start@@Base+0x33f9>
  40a7d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a7e0:	cmp    rsi,rdx
  40a7e3:	je     40a7ea <_start@@Base+0x397a>
  40a7e5:	cmp    BYTE PTR [rsi],0x7b
  40a7e8:	je     40a800 <_start@@Base+0x3990>
  40a7ea:	mov    DWORD PTR [rcx],0x0
  40a7f0:	mov    ecx,0x15
  40a7f5:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  40a7fa:	nop    WORD PTR [rax+rax*1+0x0]
  40a800:	push   r12
  40a802:	lea    rax,[rsi+0x1]
  40a806:	mov    r12,rdi
  40a809:	push   rbp
  40a80a:	mov    rbp,rcx
  40a80d:	push   rbx
  40a80e:	mov    rbx,rdx
  40a811:	sub    rdx,rax
  40a814:	cmp    rdx,0x1
  40a818:	jle    40a822 <_start@@Base+0x39b2>
  40a81a:	cmp    BYTE PTR [rsi+0x1],0x20
  40a81e:	jg     40a830 <_start@@Base+0x39c0>
  40a820:	je     40a850 <_start@@Base+0x39e0>
  40a822:	mov    rdx,rbx
  40a825:	mov    rsi,rax
  40a828:	mov    rdi,r12
  40a82b:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40a830:	cmp    rbx,rax
  40a833:	je     40a83a <_start@@Base+0x39ca>
  40a835:	cmp    BYTE PTR [rax],0x7d
  40a838:	je     40a860 <_start@@Base+0x39f0>
  40a83a:	mov    DWORD PTR [rbp+0x0],0x1
  40a841:	pop    rbx
  40a842:	pop    rbp
  40a843:	pop    r12
  40a845:	ret    
  40a846:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a850:	cmp    BYTE PTR [rsi+0x2],0x20
  40a854:	jle    40a822 <_start@@Base+0x39b2>
  40a856:	lea    rax,[rsi+0x2]
  40a85a:	jmp    40a830 <_start@@Base+0x39c0>
  40a85c:	nop    DWORD PTR [rax+0x0]
  40a860:	mov    DWORD PTR [rbp+0x0],0x0
  40a867:	mov    rdx,rbx
  40a86a:	mov    rdi,r12
  40a86d:	pop    rbx
  40a86e:	pop    rbp
  40a86f:	lea    rsi,[rax+0x1]
  40a873:	pop    r12
  40a875:	jmp    407f70 <_start@@Base+0x1100>
  40a87a:	nop    WORD PTR [rax+rax*1+0x0]
  40a880:	movsxd rcx,ecx
  40a883:	mov    r9d,DWORD PTR [rdi+0x14]
  40a887:	lea    rax,[rsi+rcx*1]
  40a88b:	movzx  r8d,BYTE PTR [rax]
  40a88f:	test   r9d,r9d
  40a892:	je     40a900 <_start@@Base+0x3a90>
  40a894:	cmp    r8b,0x20
  40a898:	jle    40a8a8 <_start@@Base+0x3a38>
  40a89a:	cmp    r8b,0x3a
  40a89e:	je     40a8a8 <_start@@Base+0x3a38>
  40a8a0:	mov    rax,rsi
  40a8a3:	ret    
  40a8a4:	nop    DWORD PTR [rax+0x0]
  40a8a8:	mov    DWORD PTR [rdi+0x14],0x0
  40a8af:	push   rbp
  40a8b0:	mov    rbp,rdx
  40a8b3:	sub    rdx,rax
  40a8b6:	push   rbx
  40a8b7:	mov    rbx,rdi
  40a8ba:	sub    rsp,0x8
  40a8be:	cmp    rdx,0x1
  40a8c2:	jle    40a8cb <_start@@Base+0x3a5b>
  40a8c4:	cmp    BYTE PTR [rax],0x20
  40a8c7:	jg     40a8d9 <_start@@Base+0x3a69>
  40a8c9:	je     40a910 <_start@@Base+0x3aa0>
  40a8cb:	mov    rdx,rbp
  40a8ce:	mov    rsi,rax
  40a8d1:	mov    rdi,rbx
  40a8d4:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40a8d9:	cmp    rbp,rax
  40a8dc:	je     40a8e3 <_start@@Base+0x3a73>
  40a8de:	cmp    BYTE PTR [rax],0x3a
  40a8e1:	je     40a920 <_start@@Base+0x3ab0>
  40a8e3:	add    rsp,0x8
  40a8e7:	mov    rdi,rbx
  40a8ea:	pop    rbx
  40a8eb:	mov    rdx,rbp
  40a8ee:	mov    ecx,0x4
  40a8f3:	mov    rsi,rax
  40a8f6:	pop    rbp
  40a8f7:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  40a8fc:	nop    DWORD PTR [rax+0x0]
  40a900:	cmp    r8b,0x22
  40a904:	jne    40a8a0 <_start@@Base+0x3a30>
  40a906:	lea    rax,[rsi+rcx*1+0x1]
  40a90b:	jmp    40a8af <_start@@Base+0x3a3f>
  40a90d:	nop    DWORD PTR [rax]
  40a910:	cmp    BYTE PTR [rax+0x1],0x20
  40a914:	jle    40a8cb <_start@@Base+0x3a5b>
  40a916:	inc    rax
  40a919:	jmp    40a8d9 <_start@@Base+0x3a69>
  40a91b:	nop    DWORD PTR [rax+rax*1+0x0]
  40a920:	add    rsp,0x8
  40a924:	mov    rdi,rbx
  40a927:	pop    rbx
  40a928:	mov    rdx,rbp
  40a92b:	lea    rsi,[rax+0x1]
  40a92f:	pop    rbp
  40a930:	jmp    407f70 <_start@@Base+0x1100>
  40a935:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40a940:	cmp    rsi,rdx
  40a943:	je     40a94a <_start@@Base+0x3ada>
  40a945:	cmp    BYTE PTR [rsi],0x5b
  40a948:	je     40a960 <_start@@Base+0x3af0>
  40a94a:	mov    DWORD PTR [rcx],0x0
  40a950:	mov    ecx,0x16
  40a955:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  40a95a:	nop    WORD PTR [rax+rax*1+0x0]
  40a960:	push   r12
  40a962:	lea    rax,[rsi+0x1]
  40a966:	mov    r12,rdi
  40a969:	push   rbp
  40a96a:	mov    rbp,rcx
  40a96d:	push   rbx
  40a96e:	mov    rbx,rdx
  40a971:	sub    rdx,rax
  40a974:	cmp    rdx,0x1
  40a978:	jle    40a982 <_start@@Base+0x3b12>
  40a97a:	cmp    BYTE PTR [rsi+0x1],0x20
  40a97e:	jg     40a990 <_start@@Base+0x3b20>
  40a980:	je     40a9b0 <_start@@Base+0x3b40>
  40a982:	mov    rdx,rbx
  40a985:	mov    rsi,rax
  40a988:	mov    rdi,r12
  40a98b:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40a990:	cmp    rbx,rax
  40a993:	je     40a99a <_start@@Base+0x3b2a>
  40a995:	cmp    BYTE PTR [rax],0x5d
  40a998:	je     40a9c0 <_start@@Base+0x3b50>
  40a99a:	mov    DWORD PTR [rbp+0x0],0x1
  40a9a1:	pop    rbx
  40a9a2:	pop    rbp
  40a9a3:	pop    r12
  40a9a5:	ret    
  40a9a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a9b0:	cmp    BYTE PTR [rsi+0x2],0x20
  40a9b4:	jle    40a982 <_start@@Base+0x3b12>
  40a9b6:	lea    rax,[rsi+0x2]
  40a9ba:	jmp    40a990 <_start@@Base+0x3b20>
  40a9bc:	nop    DWORD PTR [rax+0x0]
  40a9c0:	mov    DWORD PTR [rbp+0x0],0x0
  40a9c7:	mov    rdx,rbx
  40a9ca:	mov    rdi,r12
  40a9cd:	pop    rbx
  40a9ce:	pop    rbp
  40a9cf:	lea    rsi,[rax+0x1]
  40a9d3:	pop    r12
  40a9d5:	jmp    407f70 <_start@@Base+0x1100>
  40a9da:	nop    WORD PTR [rax+rax*1+0x0]
  40a9e0:	push   r15
  40a9e2:	push   r14
  40a9e4:	push   r13
  40a9e6:	push   r12
  40a9e8:	mov    r12,rdi
  40a9eb:	push   rbp
  40a9ec:	push   rbx
  40a9ed:	mov    rbx,rdx
  40a9f0:	sub    rsp,0x48
  40a9f4:	mov    QWORD PTR [rsp+0x10],rcx
  40a9f9:	mov    QWORD PTR [rsp+0x18],r8
  40a9fe:	mov    rcx,QWORD PTR fs:0x28
  40aa07:	mov    QWORD PTR [rsp+0x38],rcx
  40aa0c:	xor    ecx,ecx
  40aa0e:	mov    DWORD PTR [r8],0x0
  40aa15:	cmp    rsi,rdx
  40aa18:	je     40ab83 <_start@@Base+0x3d13>
  40aa1e:	movzx  eax,BYTE PTR [rsi]
  40aa21:	cmp    al,0x22
  40aa23:	je     40ab48 <_start@@Base+0x3cd8>
  40aa29:	cmp    al,0x2e
  40aa2b:	je     40aab8 <_start@@Base+0x3c48>
  40aa31:	mov    DWORD PTR [rdi+0x14],0x1
  40aa38:	mov    rax,rsi
  40aa3b:	lea    rcx,[rsp+0x28]
  40aa40:	mov    QWORD PTR [rsp+0x8],rcx
  40aa45:	lea    r15,[rsp+0x2c]
  40aa4a:	lea    r14,[rsp+0x30]
  40aa4f:	mov    r13,QWORD PTR [rsp+0x10]
  40aa54:	mov    rbp,rax
  40aa57:	mov    r11,QWORD PTR [r13+0x0]
  40aa5b:	jmp    40aa79 <_start@@Base+0x3c09>
  40aa5d:	nop    DWORD PTR [rax]
  40aa60:	cmp    rbp,rax
  40aa63:	jne    40aae0 <_start@@Base+0x3c70>
  40aa65:	add    r13,0x8
  40aa69:	mov    r11,QWORD PTR [r13+0x0]
  40aa6d:	mov    rbp,rax
  40aa70:	test   r11,r11
  40aa73:	je     40aba0 <_start@@Base+0x3d30>
  40aa79:	mov    rcx,QWORD PTR [rsp+0x8]
  40aa7e:	mov    r9,r15
  40aa81:	mov    r8,r14
  40aa84:	mov    rdx,rbx
  40aa87:	mov    rsi,rax
  40aa8a:	mov    rdi,r12
  40aa8d:	call   r11
  40aa90:	cmp    rbx,rax
  40aa93:	jne    40aa60 <_start@@Base+0x3bf0>
  40aa95:	mov    rsi,QWORD PTR [rsp+0x38]
  40aa9a:	xor    rsi,QWORD PTR fs:0x28
  40aaa3:	jne    40abb8 <_start@@Base+0x3d48>
  40aaa9:	add    rsp,0x48
  40aaad:	pop    rbx
  40aaae:	pop    rbp
  40aaaf:	pop    r12
  40aab1:	pop    r13
  40aab3:	pop    r14
  40aab5:	pop    r15
  40aab7:	ret    
  40aab8:	mov    ecx,0x5
  40aabd:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40aac2:	mov    esi,DWORD PTR [r12+0x14]
  40aac7:	test   esi,esi
  40aac9:	je     40ab53 <_start@@Base+0x3ce3>
  40aacf:	cmp    rbx,rax
  40aad2:	jne    40aa3b <_start@@Base+0x3bcb>
  40aad8:	jmp    40aa95 <_start@@Base+0x3c25>
  40aada:	nop    WORD PTR [rax+rax*1+0x0]
  40aae0:	mov    rdx,QWORD PTR [rsp+0x30]
  40aae5:	test   rdx,rdx
  40aae8:	js     40ab28 <_start@@Base+0x3cb8>
  40aaea:	vxorps xmm0,xmm0,xmm0
  40aaee:	vcvtsi2ss xmm0,xmm0,rdx
  40aaf3:	mov    edx,DWORD PTR [rsp+0x28]
  40aaf7:	test   edx,edx
  40aaf9:	je     40ab03 <_start@@Base+0x3c93>
  40aafb:	vxorps xmm0,xmm0,XMMWORD PTR [rip+0x2540d]        # 42ff10 <_IO_stdin_used@@Base+0x3f10>
  40ab03:	mov    rdi,QWORD PTR [rsp+0x18]
  40ab08:	mov    ecx,DWORD PTR [rsp+0x2c]
  40ab0c:	vaddss xmm0,xmm0,DWORD PTR [rdi]
  40ab10:	vmovss DWORD PTR [rdi],xmm0
  40ab14:	test   ecx,ecx
  40ab16:	jne    40aa4f <_start@@Base+0x3bdf>
  40ab1c:	jmp    40aa95 <_start@@Base+0x3c25>
  40ab21:	nop    DWORD PTR [rax+0x0]
  40ab28:	mov    rcx,rdx
  40ab2b:	shr    rcx,1
  40ab2e:	and    edx,0x1
  40ab31:	or     rcx,rdx
  40ab34:	vxorps xmm0,xmm0,xmm0
  40ab38:	vcvtsi2ss xmm0,xmm0,rcx
  40ab3d:	vaddss xmm0,xmm0,xmm0
  40ab41:	jmp    40aaf3 <_start@@Base+0x3c83>
  40ab43:	nop    DWORD PTR [rax+rax*1+0x0]
  40ab48:	mov    DWORD PTR [rdi+0x14],0x0
  40ab4f:	lea    rax,[rsi+0x1]
  40ab53:	mov    rdx,rbx
  40ab56:	sub    rdx,rax
  40ab59:	cmp    rdx,0x1
  40ab5d:	jle    40ab70 <_start@@Base+0x3d00>
  40ab5f:	cmp    BYTE PTR [rax],0x20
  40ab62:	jg     40aacf <_start@@Base+0x3c5f>
  40ab68:	jne    40ab70 <_start@@Base+0x3d00>
  40ab6a:	cmp    BYTE PTR [rax+0x1],0x20
  40ab6e:	jg     40ab97 <_start@@Base+0x3d27>
  40ab70:	mov    rdx,rbx
  40ab73:	mov    rsi,rax
  40ab76:	mov    rdi,r12
  40ab79:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40ab7e:	jmp    40aacf <_start@@Base+0x3c5f>
  40ab83:	mov    eax,DWORD PTR [rdi+0x14]
  40ab86:	test   eax,eax
  40ab88:	je     40ab92 <_start@@Base+0x3d22>
  40ab8a:	mov    rax,rsi
  40ab8d:	jmp    40aa95 <_start@@Base+0x3c25>
  40ab92:	mov    rax,rbx
  40ab95:	jmp    40ab53 <_start@@Base+0x3ce3>
  40ab97:	inc    rax
  40ab9a:	jmp    40aacf <_start@@Base+0x3c5f>
  40ab9f:	nop
  40aba0:	mov    ecx,0x17
  40aba5:	mov    rdx,rbx
  40aba8:	mov    rsi,rax
  40abab:	mov    rdi,r12
  40abae:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40abb3:	jmp    40aa95 <_start@@Base+0x3c25>
  40abb8:	call   4061a0 <__stack_chk_fail@plt>
  40abbd:	nop    DWORD PTR [rax]
  40abc0:	push   r15
  40abc2:	push   r14
  40abc4:	push   r13
  40abc6:	push   r12
  40abc8:	mov    r12,rdi
  40abcb:	push   rbp
  40abcc:	push   rbx
  40abcd:	mov    rbx,rdx
  40abd0:	sub    rsp,0x48
  40abd4:	mov    QWORD PTR [rsp+0x10],rcx
  40abd9:	mov    QWORD PTR [rsp+0x18],r8
  40abde:	mov    rcx,QWORD PTR fs:0x28
  40abe7:	mov    QWORD PTR [rsp+0x38],rcx
  40abec:	xor    ecx,ecx
  40abee:	mov    QWORD PTR [r8],0x0
  40abf5:	cmp    rsi,rdx
  40abf8:	je     40ad63 <_start@@Base+0x3ef3>
  40abfe:	movzx  eax,BYTE PTR [rsi]
  40ac01:	cmp    al,0x22
  40ac03:	je     40ad28 <_start@@Base+0x3eb8>
  40ac09:	cmp    al,0x2e
  40ac0b:	je     40ac98 <_start@@Base+0x3e28>
  40ac11:	mov    DWORD PTR [rdi+0x14],0x1
  40ac18:	mov    rax,rsi
  40ac1b:	lea    rcx,[rsp+0x28]
  40ac20:	mov    QWORD PTR [rsp+0x8],rcx
  40ac25:	lea    r15,[rsp+0x2c]
  40ac2a:	lea    r14,[rsp+0x30]
  40ac2f:	mov    r13,QWORD PTR [rsp+0x10]
  40ac34:	mov    rbp,rax
  40ac37:	mov    r11,QWORD PTR [r13+0x0]
  40ac3b:	jmp    40ac59 <_start@@Base+0x3de9>
  40ac3d:	nop    DWORD PTR [rax]
  40ac40:	cmp    rbp,rax
  40ac43:	jne    40acc0 <_start@@Base+0x3e50>
  40ac45:	add    r13,0x8
  40ac49:	mov    r11,QWORD PTR [r13+0x0]
  40ac4d:	mov    rbp,rax
  40ac50:	test   r11,r11
  40ac53:	je     40ad80 <_start@@Base+0x3f10>
  40ac59:	mov    rcx,QWORD PTR [rsp+0x8]
  40ac5e:	mov    r9,r15
  40ac61:	mov    r8,r14
  40ac64:	mov    rdx,rbx
  40ac67:	mov    rsi,rax
  40ac6a:	mov    rdi,r12
  40ac6d:	call   r11
  40ac70:	cmp    rbx,rax
  40ac73:	jne    40ac40 <_start@@Base+0x3dd0>
  40ac75:	mov    rsi,QWORD PTR [rsp+0x38]
  40ac7a:	xor    rsi,QWORD PTR fs:0x28
  40ac83:	jne    40ad98 <_start@@Base+0x3f28>
  40ac89:	add    rsp,0x48
  40ac8d:	pop    rbx
  40ac8e:	pop    rbp
  40ac8f:	pop    r12
  40ac91:	pop    r13
  40ac93:	pop    r14
  40ac95:	pop    r15
  40ac97:	ret    
  40ac98:	mov    ecx,0x5
  40ac9d:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40aca2:	mov    esi,DWORD PTR [r12+0x14]
  40aca7:	test   esi,esi
  40aca9:	je     40ad33 <_start@@Base+0x3ec3>
  40acaf:	cmp    rbx,rax
  40acb2:	jne    40ac1b <_start@@Base+0x3dab>
  40acb8:	jmp    40ac75 <_start@@Base+0x3e05>
  40acba:	nop    WORD PTR [rax+rax*1+0x0]
  40acc0:	mov    rdx,QWORD PTR [rsp+0x30]
  40acc5:	test   rdx,rdx
  40acc8:	js     40ad08 <_start@@Base+0x3e98>
  40acca:	vxorpd xmm0,xmm0,xmm0
  40acce:	vcvtsi2sd xmm0,xmm0,rdx
  40acd3:	mov    edx,DWORD PTR [rsp+0x28]
  40acd7:	test   edx,edx
  40acd9:	je     40ace3 <_start@@Base+0x3e73>
  40acdb:	vxorpd xmm0,xmm0,XMMWORD PTR [rip+0x2523d]        # 42ff20 <_IO_stdin_used@@Base+0x3f20>
  40ace3:	mov    rdi,QWORD PTR [rsp+0x18]
  40ace8:	mov    ecx,DWORD PTR [rsp+0x2c]
  40acec:	vaddsd xmm0,xmm0,QWORD PTR [rdi]
  40acf0:	vmovsd QWORD PTR [rdi],xmm0
  40acf4:	test   ecx,ecx
  40acf6:	jne    40ac2f <_start@@Base+0x3dbf>
  40acfc:	jmp    40ac75 <_start@@Base+0x3e05>
  40ad01:	nop    DWORD PTR [rax+0x0]
  40ad08:	mov    rcx,rdx
  40ad0b:	shr    rcx,1
  40ad0e:	and    edx,0x1
  40ad11:	or     rcx,rdx
  40ad14:	vxorpd xmm0,xmm0,xmm0
  40ad18:	vcvtsi2sd xmm0,xmm0,rcx
  40ad1d:	vaddsd xmm0,xmm0,xmm0
  40ad21:	jmp    40acd3 <_start@@Base+0x3e63>
  40ad23:	nop    DWORD PTR [rax+rax*1+0x0]
  40ad28:	mov    DWORD PTR [rdi+0x14],0x0
  40ad2f:	lea    rax,[rsi+0x1]
  40ad33:	mov    rdx,rbx
  40ad36:	sub    rdx,rax
  40ad39:	cmp    rdx,0x1
  40ad3d:	jle    40ad50 <_start@@Base+0x3ee0>
  40ad3f:	cmp    BYTE PTR [rax],0x20
  40ad42:	jg     40acaf <_start@@Base+0x3e3f>
  40ad48:	jne    40ad50 <_start@@Base+0x3ee0>
  40ad4a:	cmp    BYTE PTR [rax+0x1],0x20
  40ad4e:	jg     40ad77 <_start@@Base+0x3f07>
  40ad50:	mov    rdx,rbx
  40ad53:	mov    rsi,rax
  40ad56:	mov    rdi,r12
  40ad59:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40ad5e:	jmp    40acaf <_start@@Base+0x3e3f>
  40ad63:	mov    eax,DWORD PTR [rdi+0x14]
  40ad66:	test   eax,eax
  40ad68:	je     40ad72 <_start@@Base+0x3f02>
  40ad6a:	mov    rax,rsi
  40ad6d:	jmp    40ac75 <_start@@Base+0x3e05>
  40ad72:	mov    rax,rbx
  40ad75:	jmp    40ad33 <_start@@Base+0x3ec3>
  40ad77:	inc    rax
  40ad7a:	jmp    40acaf <_start@@Base+0x3e3f>
  40ad7f:	nop
  40ad80:	mov    ecx,0x17
  40ad85:	mov    rdx,rbx
  40ad88:	mov    rsi,rax
  40ad8b:	mov    rdi,r12
  40ad8e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40ad93:	jmp    40ac75 <_start@@Base+0x3e05>
  40ad98:	call   4061a0 <__stack_chk_fail@plt>
  40ad9d:	nop    DWORD PTR [rax]
  40ada0:	push   r15
  40ada2:	push   r14
  40ada4:	push   r13
  40ada6:	push   r12
  40ada8:	mov    r12,rdi
  40adab:	push   rbp
  40adac:	push   rbx
  40adad:	mov    rbx,rdx
  40adb0:	sub    rsp,0x58
  40adb4:	mov    QWORD PTR [rsp+0x18],rcx
  40adb9:	mov    QWORD PTR [rsp+0x20],r8
  40adbe:	mov    rdx,QWORD PTR fs:0x28
  40adc7:	mov    QWORD PTR [rsp+0x48],rdx
  40adcc:	xor    edx,edx
  40adce:	mov    QWORD PTR [r8],0x0
  40add5:	cmp    rsi,rbx
  40add8:	je     40af08 <_start@@Base+0x4098>
  40adde:	movzx  eax,BYTE PTR [rsi]
  40ade1:	cmp    al,0x22
  40ade3:	je     40af60 <_start@@Base+0x40f0>
  40ade9:	cmp    al,0x2e
  40adeb:	je     40ae91 <_start@@Base+0x4021>
  40adf1:	mov    DWORD PTR [rdi+0x14],0x1
  40adf8:	mov    r10,rsi
  40adfb:	lea    rax,[rsp+0x38]
  40ae00:	mov    QWORD PTR [rsp+0x10],0x0
  40ae09:	mov    QWORD PTR [rsp+0x8],rax
  40ae0e:	lea    r15,[rsp+0x3c]
  40ae13:	lea    r14,[rsp+0x40]
  40ae18:	mov    r13,QWORD PTR [rsp+0x18]
  40ae1d:	mov    rbp,r10
  40ae20:	mov    rax,QWORD PTR [r13+0x0]
  40ae24:	mov    rsi,r10
  40ae27:	jmp    40ae4d <_start@@Base+0x3fdd>
  40ae29:	nop    DWORD PTR [rax+0x0]
  40ae30:	cmp    rbp,rax
  40ae33:	jne    40aeb8 <_start@@Base+0x4048>
  40ae39:	add    r13,0x8
  40ae3d:	mov    rax,QWORD PTR [r13+0x0]
  40ae41:	mov    rbp,rsi
  40ae44:	test   rax,rax
  40ae47:	je     40aef0 <_start@@Base+0x4080>
  40ae4d:	mov    rcx,QWORD PTR [rsp+0x8]
  40ae52:	mov    r9,r15
  40ae55:	mov    r8,r14
  40ae58:	mov    rdx,rbx
  40ae5b:	mov    rdi,r12
  40ae5e:	call   rax
  40ae60:	mov    rsi,rax
  40ae63:	cmp    rbx,rax
  40ae66:	jne    40ae30 <_start@@Base+0x3fc0>
  40ae68:	mov    r10,rsi
  40ae6b:	mov    rdi,QWORD PTR [rsp+0x48]
  40ae70:	xor    rdi,QWORD PTR fs:0x28
  40ae79:	mov    rax,r10
  40ae7c:	jne    40afa6 <_start@@Base+0x4136>
  40ae82:	add    rsp,0x58
  40ae86:	pop    rbx
  40ae87:	pop    rbp
  40ae88:	pop    r12
  40ae8a:	pop    r13
  40ae8c:	pop    r14
  40ae8e:	pop    r15
  40ae90:	ret    
  40ae91:	mov    ecx,0x5
  40ae96:	mov    rdx,rbx
  40ae99:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40ae9e:	mov    esi,DWORD PTR [r12+0x14]
  40aea3:	mov    r10,rax
  40aea6:	test   esi,esi
  40aea8:	je     40af20 <_start@@Base+0x40b0>
  40aeaa:	cmp    rbx,r10
  40aead:	jne    40adfb <_start@@Base+0x3f8b>
  40aeb3:	jmp    40ae6b <_start@@Base+0x3ffb>
  40aeb5:	nop    DWORD PTR [rax]
  40aeb8:	mov    edx,DWORD PTR [rsp+0x38]
  40aebc:	mov    r10,rax
  40aebf:	test   edx,edx
  40aec1:	jne    40af70 <_start@@Base+0x4100>
  40aec7:	mov    rax,QWORD PTR [rsp+0x40]
  40aecc:	mov    QWORD PTR [rsp+0x10],rax
  40aed1:	mov    rcx,QWORD PTR [rsp+0x10]
  40aed6:	mov    rax,QWORD PTR [rsp+0x20]
  40aedb:	add    QWORD PTR [rax],rcx
  40aede:	mov    ecx,DWORD PTR [rsp+0x3c]
  40aee2:	test   ecx,ecx
  40aee4:	jne    40ae18 <_start@@Base+0x3fa8>
  40aeea:	jmp    40ae6b <_start@@Base+0x3ffb>
  40aeef:	nop
  40aef0:	mov    ecx,0x17
  40aef5:	mov    rdx,rbx
  40aef8:	mov    rdi,r12
  40aefb:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40af00:	mov    r10,rax
  40af03:	jmp    40ae6b <_start@@Base+0x3ffb>
  40af08:	mov    eax,DWORD PTR [rdi+0x14]
  40af0b:	test   eax,eax
  40af0d:	jne    40ae68 <_start@@Base+0x3ff8>
  40af13:	mov    r10,rbx
  40af16:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40af20:	mov    rax,rbx
  40af23:	sub    rax,r10
  40af26:	cmp    rax,0x1
  40af2a:	jle    40af40 <_start@@Base+0x40d0>
  40af2c:	cmp    BYTE PTR [r10],0x20
  40af30:	jg     40aeaa <_start@@Base+0x403a>
  40af36:	jne    40af40 <_start@@Base+0x40d0>
  40af38:	cmp    BYTE PTR [r10+0x1],0x20
  40af3d:	jg     40af9e <_start@@Base+0x412e>
  40af3f:	nop
  40af40:	mov    rsi,r10
  40af43:	mov    rdx,rbx
  40af46:	mov    rdi,r12
  40af49:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40af4e:	mov    r10,rax
  40af51:	jmp    40aeaa <_start@@Base+0x403a>
  40af56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40af60:	lea    r10,[rsi+0x1]
  40af64:	mov    DWORD PTR [rdi+0x14],0x0
  40af6b:	jmp    40af20 <_start@@Base+0x40b0>
  40af6d:	nop    DWORD PTR [rax]
  40af70:	mov    rsi,r10
  40af73:	mov    ecx,0x8
  40af78:	mov    rdx,rbx
  40af7b:	mov    rdi,r12
  40af7e:	mov    QWORD PTR [rsp+0x28],r10
  40af83:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40af88:	cmp    rbx,rax
  40af8b:	mov    r10,QWORD PTR [rsp+0x28]
  40af90:	jne    40aed1 <_start@@Base+0x4061>
  40af96:	mov    r10,rbx
  40af99:	jmp    40ae6b <_start@@Base+0x3ffb>
  40af9e:	inc    r10
  40afa1:	jmp    40aeaa <_start@@Base+0x403a>
  40afa6:	call   4061a0 <__stack_chk_fail@plt>
  40afab:	nop    DWORD PTR [rax+rax*1+0x0]
  40afb0:	push   r15
  40afb2:	push   r14
  40afb4:	push   r13
  40afb6:	push   r12
  40afb8:	mov    r12,rdi
  40afbb:	push   rbp
  40afbc:	push   rbx
  40afbd:	mov    rbx,rdx
  40afc0:	sub    rsp,0x58
  40afc4:	mov    QWORD PTR [rsp+0x18],rcx
  40afc9:	mov    QWORD PTR [rsp+0x20],r8
  40afce:	mov    rdx,QWORD PTR fs:0x28
  40afd7:	mov    QWORD PTR [rsp+0x48],rdx
  40afdc:	xor    edx,edx
  40afde:	mov    BYTE PTR [r8],0x0
  40afe2:	cmp    rsi,rbx
  40afe5:	je     40b118 <_start@@Base+0x42a8>
  40afeb:	movzx  eax,BYTE PTR [rsi]
  40afee:	cmp    al,0x22
  40aff0:	je     40b170 <_start@@Base+0x4300>
  40aff6:	cmp    al,0x2e
  40aff8:	je     40b099 <_start@@Base+0x4229>
  40affe:	mov    DWORD PTR [rdi+0x14],0x1
  40b005:	mov    r10,rsi
  40b008:	lea    rax,[rsp+0x38]
  40b00d:	mov    BYTE PTR [rsp+0x17],0x0
  40b012:	mov    QWORD PTR [rsp+0x8],rax
  40b017:	lea    r15,[rsp+0x3c]
  40b01c:	lea    r14,[rsp+0x40]
  40b021:	mov    r13,QWORD PTR [rsp+0x18]
  40b026:	mov    rbp,r10
  40b029:	mov    rax,QWORD PTR [r13+0x0]
  40b02d:	mov    rsi,r10
  40b030:	jmp    40b055 <_start@@Base+0x41e5>
  40b032:	nop    WORD PTR [rax+rax*1+0x0]
  40b038:	cmp    rbp,rax
  40b03b:	jne    40b0c0 <_start@@Base+0x4250>
  40b041:	add    r13,0x8
  40b045:	mov    rax,QWORD PTR [r13+0x0]
  40b049:	mov    rbp,rsi
  40b04c:	test   rax,rax
  40b04f:	je     40b100 <_start@@Base+0x4290>
  40b055:	mov    rcx,QWORD PTR [rsp+0x8]
  40b05a:	mov    r9,r15
  40b05d:	mov    r8,r14
  40b060:	mov    rdx,rbx
  40b063:	mov    rdi,r12
  40b066:	call   rax
  40b068:	mov    rsi,rax
  40b06b:	cmp    rbx,rax
  40b06e:	jne    40b038 <_start@@Base+0x41c8>
  40b070:	mov    r10,rsi
  40b073:	mov    rdi,QWORD PTR [rsp+0x48]
  40b078:	xor    rdi,QWORD PTR fs:0x28
  40b081:	mov    rax,r10
  40b084:	jne    40b1b6 <_start@@Base+0x4346>
  40b08a:	add    rsp,0x58
  40b08e:	pop    rbx
  40b08f:	pop    rbp
  40b090:	pop    r12
  40b092:	pop    r13
  40b094:	pop    r14
  40b096:	pop    r15
  40b098:	ret    
  40b099:	mov    ecx,0x5
  40b09e:	mov    rdx,rbx
  40b0a1:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40b0a6:	mov    esi,DWORD PTR [r12+0x14]
  40b0ab:	mov    r10,rax
  40b0ae:	test   esi,esi
  40b0b0:	je     40b130 <_start@@Base+0x42c0>
  40b0b2:	cmp    rbx,r10
  40b0b5:	jne    40b008 <_start@@Base+0x4198>
  40b0bb:	jmp    40b073 <_start@@Base+0x4203>
  40b0bd:	nop    DWORD PTR [rax]
  40b0c0:	mov    edx,DWORD PTR [rsp+0x38]
  40b0c4:	mov    r10,rax
  40b0c7:	test   edx,edx
  40b0c9:	jne    40b180 <_start@@Base+0x4310>
  40b0cf:	cmp    QWORD PTR [rsp+0x40],0x0
  40b0d5:	setne  BYTE PTR [rsp+0x17]
  40b0da:	movzx  ecx,BYTE PTR [rsp+0x17]
  40b0df:	mov    rax,QWORD PTR [rsp+0x20]
  40b0e4:	add    BYTE PTR [rax],cl
  40b0e6:	mov    ecx,DWORD PTR [rsp+0x3c]
  40b0ea:	test   ecx,ecx
  40b0ec:	jne    40b021 <_start@@Base+0x41b1>
  40b0f2:	jmp    40b073 <_start@@Base+0x4203>
  40b0f7:	nop    WORD PTR [rax+rax*1+0x0]
  40b100:	mov    ecx,0x17
  40b105:	mov    rdx,rbx
  40b108:	mov    rdi,r12
  40b10b:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40b110:	mov    r10,rax
  40b113:	jmp    40b073 <_start@@Base+0x4203>
  40b118:	mov    eax,DWORD PTR [rdi+0x14]
  40b11b:	test   eax,eax
  40b11d:	jne    40b070 <_start@@Base+0x4200>
  40b123:	mov    r10,rbx
  40b126:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b130:	mov    rax,rbx
  40b133:	sub    rax,r10
  40b136:	cmp    rax,0x1
  40b13a:	jle    40b150 <_start@@Base+0x42e0>
  40b13c:	cmp    BYTE PTR [r10],0x20
  40b140:	jg     40b0b2 <_start@@Base+0x4242>
  40b146:	jne    40b150 <_start@@Base+0x42e0>
  40b148:	cmp    BYTE PTR [r10+0x1],0x20
  40b14d:	jg     40b1ae <_start@@Base+0x433e>
  40b14f:	nop
  40b150:	mov    rsi,r10
  40b153:	mov    rdx,rbx
  40b156:	mov    rdi,r12
  40b159:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40b15e:	mov    r10,rax
  40b161:	jmp    40b0b2 <_start@@Base+0x4242>
  40b166:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b170:	lea    r10,[rsi+0x1]
  40b174:	mov    DWORD PTR [rdi+0x14],0x0
  40b17b:	jmp    40b130 <_start@@Base+0x42c0>
  40b17d:	nop    DWORD PTR [rax]
  40b180:	mov    rsi,r10
  40b183:	mov    ecx,0x8
  40b188:	mov    rdx,rbx
  40b18b:	mov    rdi,r12
  40b18e:	mov    QWORD PTR [rsp+0x28],r10
  40b193:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40b198:	cmp    rbx,rax
  40b19b:	mov    r10,QWORD PTR [rsp+0x28]
  40b1a0:	jne    40b0da <_start@@Base+0x426a>
  40b1a6:	mov    r10,rbx
  40b1a9:	jmp    40b073 <_start@@Base+0x4203>
  40b1ae:	inc    r10
  40b1b1:	jmp    40b0b2 <_start@@Base+0x4242>
  40b1b6:	call   4061a0 <__stack_chk_fail@plt>
  40b1bb:	nop    DWORD PTR [rax+rax*1+0x0]
  40b1c0:	push   r15
  40b1c2:	push   r14
  40b1c4:	push   r13
  40b1c6:	push   r12
  40b1c8:	mov    r12,rdi
  40b1cb:	push   rbp
  40b1cc:	push   rbx
  40b1cd:	mov    rbx,rdx
  40b1d0:	sub    rsp,0x58
  40b1d4:	mov    QWORD PTR [rsp+0x18],rcx
  40b1d9:	mov    QWORD PTR [rsp+0x20],r8
  40b1de:	mov    rdi,QWORD PTR fs:0x28
  40b1e7:	mov    QWORD PTR [rsp+0x48],rdi
  40b1ec:	xor    edi,edi
  40b1ee:	mov    DWORD PTR [r8],0x0
  40b1f5:	cmp    rsi,rdx
  40b1f8:	je     40b34e <_start@@Base+0x44de>
  40b1fe:	movzx  eax,BYTE PTR [rsi]
  40b201:	cmp    al,0x22
  40b203:	je     40b3a0 <_start@@Base+0x4530>
  40b209:	cmp    al,0x2e
  40b20b:	je     40b2b1 <_start@@Base+0x4441>
  40b211:	mov    DWORD PTR [r12+0x14],0x1
  40b21a:	mov    r10,rsi
  40b21d:	lea    rax,[rsp+0x38]
  40b222:	mov    DWORD PTR [rsp+0x14],0x0
  40b22a:	mov    QWORD PTR [rsp+0x8],rax
  40b22f:	lea    r15,[rsp+0x3c]
  40b234:	lea    r14,[rsp+0x40]
  40b239:	mov    r13,QWORD PTR [rsp+0x18]
  40b23e:	mov    rbp,r10
  40b241:	mov    rax,QWORD PTR [r13+0x0]
  40b245:	mov    rsi,r10
  40b248:	jmp    40b26d <_start@@Base+0x43fd>
  40b24a:	nop    WORD PTR [rax+rax*1+0x0]
  40b250:	cmp    rbp,rax
  40b253:	jne    40b2e0 <_start@@Base+0x4470>
  40b259:	add    r13,0x8
  40b25d:	mov    rax,QWORD PTR [r13+0x0]
  40b261:	mov    rbp,rsi
  40b264:	test   rax,rax
  40b267:	je     40b328 <_start@@Base+0x44b8>
  40b26d:	mov    rcx,QWORD PTR [rsp+0x8]
  40b272:	mov    r9,r15
  40b275:	mov    r8,r14
  40b278:	mov    rdx,rbx
  40b27b:	mov    rdi,r12
  40b27e:	call   rax
  40b280:	mov    rsi,rax
  40b283:	cmp    rbx,rax
  40b286:	jne    40b250 <_start@@Base+0x43e0>
  40b288:	mov    r10,rsi
  40b28b:	mov    rdi,QWORD PTR [rsp+0x48]
  40b290:	xor    rdi,QWORD PTR fs:0x28
  40b299:	mov    rax,r10
  40b29c:	jne    40b3e5 <_start@@Base+0x4575>
  40b2a2:	add    rsp,0x58
  40b2a6:	pop    rbx
  40b2a7:	pop    rbp
  40b2a8:	pop    r12
  40b2aa:	pop    r13
  40b2ac:	pop    r14
  40b2ae:	pop    r15
  40b2b0:	ret    
  40b2b1:	mov    ecx,0x5
  40b2b6:	mov    rdi,r12
  40b2b9:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40b2be:	mov    esi,DWORD PTR [r12+0x14]
  40b2c3:	mov    r10,rax
  40b2c6:	test   esi,esi
  40b2c8:	je     40b360 <_start@@Base+0x44f0>
  40b2ce:	cmp    rbx,r10
  40b2d1:	jne    40b21d <_start@@Base+0x43ad>
  40b2d7:	jmp    40b28b <_start@@Base+0x441b>
  40b2d9:	nop    DWORD PTR [rax+0x0]
  40b2e0:	mov    edx,DWORD PTR [rsp+0x38]
  40b2e4:	mov    r10,rax
  40b2e7:	mov    rax,QWORD PTR [rsp+0x40]
  40b2ec:	test   edx,edx
  40b2ee:	je     40b340 <_start@@Base+0x44d0>
  40b2f0:	mov    edx,0x80000000
  40b2f5:	mov    ecx,0x8
  40b2fa:	cmp    rax,rdx
  40b2fd:	ja     40b3b4 <_start@@Base+0x4544>
  40b303:	neg    eax
  40b305:	mov    DWORD PTR [rsp+0x14],eax
  40b309:	mov    ecx,DWORD PTR [rsp+0x14]
  40b30d:	mov    rax,QWORD PTR [rsp+0x20]
  40b312:	add    DWORD PTR [rax],ecx
  40b314:	mov    ecx,DWORD PTR [rsp+0x3c]
  40b318:	test   ecx,ecx
  40b31a:	jne    40b239 <_start@@Base+0x43c9>
  40b320:	jmp    40b28b <_start@@Base+0x441b>
  40b325:	nop    DWORD PTR [rax]
  40b328:	mov    ecx,0x17
  40b32d:	mov    rdx,rbx
  40b330:	mov    rdi,r12
  40b333:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40b338:	mov    r10,rax
  40b33b:	jmp    40b28b <_start@@Base+0x441b>
  40b340:	cmp    rax,0x7fffffff
  40b346:	ja     40b3af <_start@@Base+0x453f>
  40b348:	mov    DWORD PTR [rsp+0x14],eax
  40b34c:	jmp    40b309 <_start@@Base+0x4499>
  40b34e:	mov    eax,DWORD PTR [r12+0x14]
  40b353:	test   eax,eax
  40b355:	jne    40b288 <_start@@Base+0x4418>
  40b35b:	mov    r10,rbx
  40b35e:	xchg   ax,ax
  40b360:	mov    rax,rbx
  40b363:	sub    rax,r10
  40b366:	cmp    rax,0x1
  40b36a:	jle    40b380 <_start@@Base+0x4510>
  40b36c:	cmp    BYTE PTR [r10],0x20
  40b370:	jg     40b2ce <_start@@Base+0x445e>
  40b376:	jne    40b380 <_start@@Base+0x4510>
  40b378:	cmp    BYTE PTR [r10+0x1],0x20
  40b37d:	jg     40b3dd <_start@@Base+0x456d>
  40b37f:	nop
  40b380:	mov    rsi,r10
  40b383:	mov    rdx,rbx
  40b386:	mov    rdi,r12
  40b389:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40b38e:	mov    r10,rax
  40b391:	jmp    40b2ce <_start@@Base+0x445e>
  40b396:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b3a0:	lea    r10,[rsi+0x1]
  40b3a4:	mov    DWORD PTR [r12+0x14],0x0
  40b3ad:	jmp    40b360 <_start@@Base+0x44f0>
  40b3af:	mov    ecx,0x7
  40b3b4:	mov    rsi,r10
  40b3b7:	mov    rdx,rbx
  40b3ba:	mov    rdi,r12
  40b3bd:	mov    QWORD PTR [rsp+0x28],r10
  40b3c2:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40b3c7:	mov    r10,QWORD PTR [rsp+0x28]
  40b3cc:	cmp    rbx,rax
  40b3cf:	jne    40b309 <_start@@Base+0x4499>
  40b3d5:	mov    r10,rbx
  40b3d8:	jmp    40b28b <_start@@Base+0x441b>
  40b3dd:	inc    r10
  40b3e0:	jmp    40b2ce <_start@@Base+0x445e>
  40b3e5:	call   4061a0 <__stack_chk_fail@plt>
  40b3ea:	nop    WORD PTR [rax+rax*1+0x0]
  40b3f0:	push   r15
  40b3f2:	push   r14
  40b3f4:	push   r13
  40b3f6:	push   r12
  40b3f8:	mov    r12,rdi
  40b3fb:	push   rbp
  40b3fc:	push   rbx
  40b3fd:	mov    rbx,rdx
  40b400:	sub    rsp,0x58
  40b404:	mov    QWORD PTR [rsp+0x10],rcx
  40b409:	mov    QWORD PTR [rsp+0x20],r8
  40b40e:	mov    rdi,QWORD PTR fs:0x28
  40b417:	mov    QWORD PTR [rsp+0x48],rdi
  40b41c:	xor    edi,edi
  40b41e:	mov    DWORD PTR [r8],0x0
  40b425:	cmp    rsi,rdx
  40b428:	je     40b570 <_start@@Base+0x4700>
  40b42e:	movzx  eax,BYTE PTR [rsi]
  40b431:	cmp    al,0x22
  40b433:	je     40b5c0 <_start@@Base+0x4750>
  40b439:	cmp    al,0x2e
  40b43b:	je     40b4e1 <_start@@Base+0x4671>
  40b441:	mov    DWORD PTR [r12+0x14],0x1
  40b44a:	mov    r10,rsi
  40b44d:	lea    rax,[rsp+0x38]
  40b452:	mov    DWORD PTR [rsp+0x1c],0x0
  40b45a:	mov    QWORD PTR [rsp+0x8],rax
  40b45f:	lea    r15,[rsp+0x3c]
  40b464:	lea    r14,[rsp+0x40]
  40b469:	mov    r13,QWORD PTR [rsp+0x10]
  40b46e:	mov    rbp,r10
  40b471:	mov    rax,QWORD PTR [r13+0x0]
  40b475:	mov    rsi,r10
  40b478:	jmp    40b49d <_start@@Base+0x462d>
  40b47a:	nop    WORD PTR [rax+rax*1+0x0]
  40b480:	cmp    rbp,rax
  40b483:	jne    40b510 <_start@@Base+0x46a0>
  40b489:	add    r13,0x8
  40b48d:	mov    rax,QWORD PTR [r13+0x0]
  40b491:	mov    rbp,rsi
  40b494:	test   rax,rax
  40b497:	je     40b558 <_start@@Base+0x46e8>
  40b49d:	mov    rcx,QWORD PTR [rsp+0x8]
  40b4a2:	mov    r9,r15
  40b4a5:	mov    r8,r14
  40b4a8:	mov    rdx,rbx
  40b4ab:	mov    rdi,r12
  40b4ae:	call   rax
  40b4b0:	mov    rsi,rax
  40b4b3:	cmp    rbx,rax
  40b4b6:	jne    40b480 <_start@@Base+0x4610>
  40b4b8:	mov    r10,rsi
  40b4bb:	mov    rdi,QWORD PTR [rsp+0x48]
  40b4c0:	xor    rdi,QWORD PTR fs:0x28
  40b4c9:	mov    rax,r10
  40b4cc:	jne    40b60f <_start@@Base+0x479f>
  40b4d2:	add    rsp,0x58
  40b4d6:	pop    rbx
  40b4d7:	pop    rbp
  40b4d8:	pop    r12
  40b4da:	pop    r13
  40b4dc:	pop    r14
  40b4de:	pop    r15
  40b4e0:	ret    
  40b4e1:	mov    ecx,0x5
  40b4e6:	mov    rdi,r12
  40b4e9:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40b4ee:	mov    esi,DWORD PTR [r12+0x14]
  40b4f3:	mov    r10,rax
  40b4f6:	test   esi,esi
  40b4f8:	je     40b580 <_start@@Base+0x4710>
  40b4fe:	cmp    rbx,r10
  40b501:	jne    40b44d <_start@@Base+0x45dd>
  40b507:	jmp    40b4bb <_start@@Base+0x464b>
  40b509:	nop    DWORD PTR [rax+0x0]
  40b510:	mov    edx,DWORD PTR [rsp+0x38]
  40b514:	mov    r10,rax
  40b517:	test   edx,edx
  40b519:	jne    40b5d0 <_start@@Base+0x4760>
  40b51f:	mov    rax,QWORD PTR [rsp+0x40]
  40b524:	mov    edx,0xffffffff
  40b529:	cmp    rax,rdx
  40b52c:	ja     40b600 <_start@@Base+0x4790>
  40b532:	mov    DWORD PTR [rsp+0x1c],eax
  40b536:	mov    ecx,DWORD PTR [rsp+0x1c]
  40b53a:	mov    rax,QWORD PTR [rsp+0x20]
  40b53f:	add    DWORD PTR [rax],ecx
  40b541:	mov    ecx,DWORD PTR [rsp+0x3c]
  40b545:	test   ecx,ecx
  40b547:	jne    40b469 <_start@@Base+0x45f9>
  40b54d:	jmp    40b4bb <_start@@Base+0x464b>
  40b552:	nop    WORD PTR [rax+rax*1+0x0]
  40b558:	mov    ecx,0x17
  40b55d:	mov    rdx,rbx
  40b560:	mov    rdi,r12
  40b563:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40b568:	mov    r10,rax
  40b56b:	jmp    40b4bb <_start@@Base+0x464b>
  40b570:	mov    eax,DWORD PTR [r12+0x14]
  40b575:	test   eax,eax
  40b577:	jne    40b4b8 <_start@@Base+0x4648>
  40b57d:	mov    r10,rbx
  40b580:	mov    rax,rbx
  40b583:	sub    rax,r10
  40b586:	cmp    rax,0x1
  40b58a:	jle    40b5a0 <_start@@Base+0x4730>
  40b58c:	cmp    BYTE PTR [r10],0x20
  40b590:	jg     40b4fe <_start@@Base+0x468e>
  40b596:	jne    40b5a0 <_start@@Base+0x4730>
  40b598:	cmp    BYTE PTR [r10+0x1],0x20
  40b59d:	jg     40b607 <_start@@Base+0x4797>
  40b59f:	nop
  40b5a0:	mov    rsi,r10
  40b5a3:	mov    rdx,rbx
  40b5a6:	mov    rdi,r12
  40b5a9:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40b5ae:	mov    r10,rax
  40b5b1:	jmp    40b4fe <_start@@Base+0x468e>
  40b5b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b5c0:	lea    r10,[rsi+0x1]
  40b5c4:	mov    DWORD PTR [r12+0x14],0x0
  40b5cd:	jmp    40b580 <_start@@Base+0x4710>
  40b5cf:	nop
  40b5d0:	mov    ecx,0x8
  40b5d5:	mov    rsi,r10
  40b5d8:	mov    rdx,rbx
  40b5db:	mov    rdi,r12
  40b5de:	mov    QWORD PTR [rsp+0x28],r10
  40b5e3:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40b5e8:	mov    r10,QWORD PTR [rsp+0x28]
  40b5ed:	cmp    rbx,rax
  40b5f0:	jne    40b536 <_start@@Base+0x46c6>
  40b5f6:	mov    r10,rbx
  40b5f9:	jmp    40b4bb <_start@@Base+0x464b>
  40b5fe:	xchg   ax,ax
  40b600:	mov    ecx,0x7
  40b605:	jmp    40b5d5 <_start@@Base+0x4765>
  40b607:	inc    r10
  40b60a:	jmp    40b4fe <_start@@Base+0x468e>
  40b60f:	call   4061a0 <__stack_chk_fail@plt>
  40b614:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40b61f:	nop
  40b620:	push   r15
  40b622:	xor    r9d,r9d
  40b625:	push   r14
  40b627:	push   r13
  40b629:	push   r12
  40b62b:	mov    r12,rdi
  40b62e:	push   rbp
  40b62f:	push   rbx
  40b630:	mov    rbx,rdx
  40b633:	sub    rsp,0x58
  40b637:	mov    QWORD PTR [rsp+0x10],rcx
  40b63c:	mov    QWORD PTR [rsp+0x18],r8
  40b641:	mov    rdx,QWORD PTR fs:0x28
  40b64a:	mov    QWORD PTR [rsp+0x48],rdx
  40b64f:	xor    edx,edx
  40b651:	mov    WORD PTR [r8],r9w
  40b655:	cmp    rsi,rbx
  40b658:	je     40b7af <_start@@Base+0x493f>
  40b65e:	movzx  eax,BYTE PTR [rsi]
  40b661:	cmp    al,0x22
  40b663:	je     40b800 <_start@@Base+0x4990>
  40b669:	cmp    al,0x2e
  40b66b:	je     40b711 <_start@@Base+0x48a1>
  40b671:	mov    DWORD PTR [rdi+0x14],0x1
  40b678:	mov    r10,rsi
  40b67b:	xor    esi,esi
  40b67d:	lea    rax,[rsp+0x38]
  40b682:	mov    WORD PTR [rsp+0x26],si
  40b687:	mov    QWORD PTR [rsp+0x8],rax
  40b68c:	lea    r15,[rsp+0x3c]
  40b691:	lea    r14,[rsp+0x40]
  40b696:	mov    r13,QWORD PTR [rsp+0x10]
  40b69b:	mov    rbp,r10
  40b69e:	mov    rax,QWORD PTR [r13+0x0]
  40b6a2:	mov    rsi,r10
  40b6a5:	jmp    40b6cd <_start@@Base+0x485d>
  40b6a7:	nop    WORD PTR [rax+rax*1+0x0]
  40b6b0:	cmp    rbp,rax
  40b6b3:	jne    40b740 <_start@@Base+0x48d0>
  40b6b9:	add    r13,0x8
  40b6bd:	mov    rax,QWORD PTR [r13+0x0]
  40b6c1:	mov    rbp,rsi
  40b6c4:	test   rax,rax
  40b6c7:	je     40b788 <_start@@Base+0x4918>
  40b6cd:	mov    rcx,QWORD PTR [rsp+0x8]
  40b6d2:	mov    r9,r15
  40b6d5:	mov    r8,r14
  40b6d8:	mov    rdx,rbx
  40b6db:	mov    rdi,r12
  40b6de:	call   rax
  40b6e0:	mov    rsi,rax
  40b6e3:	cmp    rbx,rax
  40b6e6:	jne    40b6b0 <_start@@Base+0x4840>
  40b6e8:	mov    r10,rsi
  40b6eb:	mov    rdi,QWORD PTR [rsp+0x48]
  40b6f0:	xor    rdi,QWORD PTR fs:0x28
  40b6f9:	mov    rax,r10
  40b6fc:	jne    40b849 <_start@@Base+0x49d9>
  40b702:	add    rsp,0x58
  40b706:	pop    rbx
  40b707:	pop    rbp
  40b708:	pop    r12
  40b70a:	pop    r13
  40b70c:	pop    r14
  40b70e:	pop    r15
  40b710:	ret    
  40b711:	mov    ecx,0x5
  40b716:	mov    rdx,rbx
  40b719:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40b71e:	mov    edi,DWORD PTR [r12+0x14]
  40b723:	mov    r10,rax
  40b726:	test   edi,edi
  40b728:	je     40b7c0 <_start@@Base+0x4950>
  40b72e:	cmp    rbx,r10
  40b731:	jne    40b67b <_start@@Base+0x480b>
  40b737:	jmp    40b6eb <_start@@Base+0x487b>
  40b739:	nop    DWORD PTR [rax+0x0]
  40b740:	mov    edx,DWORD PTR [rsp+0x38]
  40b744:	mov    r10,rax
  40b747:	mov    rax,QWORD PTR [rsp+0x40]
  40b74c:	test   edx,edx
  40b74e:	je     40b7a0 <_start@@Base+0x4930>
  40b750:	mov    ecx,0x8
  40b755:	cmp    rax,0x8000
  40b75b:	ja     40b812 <_start@@Base+0x49a2>
  40b761:	neg    eax
  40b763:	mov    WORD PTR [rsp+0x26],ax
  40b768:	mov    rcx,QWORD PTR [rsp+0x18]
  40b76d:	add    WORD PTR [rcx],ax
  40b770:	mov    ecx,DWORD PTR [rsp+0x3c]
  40b774:	test   ecx,ecx
  40b776:	jne    40b696 <_start@@Base+0x4826>
  40b77c:	jmp    40b6eb <_start@@Base+0x487b>
  40b781:	nop    DWORD PTR [rax+0x0]
  40b788:	mov    ecx,0x17
  40b78d:	mov    rdx,rbx
  40b790:	mov    rdi,r12
  40b793:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40b798:	mov    r10,rax
  40b79b:	jmp    40b6eb <_start@@Base+0x487b>
  40b7a0:	cmp    rax,0x7fff
  40b7a6:	ja     40b80d <_start@@Base+0x499d>
  40b7a8:	mov    WORD PTR [rsp+0x26],ax
  40b7ad:	jmp    40b768 <_start@@Base+0x48f8>
  40b7af:	mov    eax,DWORD PTR [rdi+0x14]
  40b7b2:	test   eax,eax
  40b7b4:	jne    40b6e8 <_start@@Base+0x4878>
  40b7ba:	mov    r10,rbx
  40b7bd:	nop    DWORD PTR [rax]
  40b7c0:	mov    rax,rbx
  40b7c3:	sub    rax,r10
  40b7c6:	cmp    rax,0x1
  40b7ca:	jle    40b7e0 <_start@@Base+0x4970>
  40b7cc:	cmp    BYTE PTR [r10],0x20
  40b7d0:	jg     40b72e <_start@@Base+0x48be>
  40b7d6:	jne    40b7e0 <_start@@Base+0x4970>
  40b7d8:	cmp    BYTE PTR [r10+0x1],0x20
  40b7dd:	jg     40b839 <_start@@Base+0x49c9>
  40b7df:	nop
  40b7e0:	mov    rsi,r10
  40b7e3:	mov    rdx,rbx
  40b7e6:	mov    rdi,r12
  40b7e9:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40b7ee:	mov    r10,rax
  40b7f1:	jmp    40b72e <_start@@Base+0x48be>
  40b7f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b800:	lea    r10,[rsi+0x1]
  40b804:	mov    DWORD PTR [rdi+0x14],0x0
  40b80b:	jmp    40b7c0 <_start@@Base+0x4950>
  40b80d:	mov    ecx,0x7
  40b812:	mov    rsi,r10
  40b815:	mov    rdx,rbx
  40b818:	mov    rdi,r12
  40b81b:	mov    QWORD PTR [rsp+0x28],r10
  40b820:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40b825:	mov    r10,QWORD PTR [rsp+0x28]
  40b82a:	cmp    rbx,rax
  40b82d:	je     40b841 <_start@@Base+0x49d1>
  40b82f:	movzx  eax,WORD PTR [rsp+0x26]
  40b834:	jmp    40b768 <_start@@Base+0x48f8>
  40b839:	inc    r10
  40b83c:	jmp    40b72e <_start@@Base+0x48be>
  40b841:	mov    r10,rbx
  40b844:	jmp    40b6eb <_start@@Base+0x487b>
  40b849:	call   4061a0 <__stack_chk_fail@plt>
  40b84e:	xchg   ax,ax
  40b850:	push   r15
  40b852:	push   r14
  40b854:	push   r13
  40b856:	push   r12
  40b858:	mov    r12,rdi
  40b85b:	push   rbp
  40b85c:	push   rbx
  40b85d:	mov    rbx,rdx
  40b860:	sub    rsp,0x58
  40b864:	mov    QWORD PTR [rsp+0x10],rcx
  40b869:	mov    QWORD PTR [rsp+0x18],r8
  40b86e:	mov    rdx,QWORD PTR fs:0x28
  40b877:	mov    QWORD PTR [rsp+0x48],rdx
  40b87c:	xor    edx,edx
  40b87e:	mov    BYTE PTR [r8],0x0
  40b882:	cmp    rsi,rbx
  40b885:	je     40b9dc <_start@@Base+0x4b6c>
  40b88b:	movzx  eax,BYTE PTR [rsi]
  40b88e:	cmp    al,0x22
  40b890:	je     40ba30 <_start@@Base+0x4bc0>
  40b896:	cmp    al,0x2e
  40b898:	je     40b939 <_start@@Base+0x4ac9>
  40b89e:	mov    DWORD PTR [rdi+0x14],0x1
  40b8a5:	mov    r10,rsi
  40b8a8:	lea    rax,[rsp+0x38]
  40b8ad:	mov    BYTE PTR [rsp+0x27],0x0
  40b8b2:	mov    QWORD PTR [rsp+0x8],rax
  40b8b7:	lea    r15,[rsp+0x3c]
  40b8bc:	lea    r14,[rsp+0x40]
  40b8c1:	mov    r13,QWORD PTR [rsp+0x10]
  40b8c6:	mov    rbp,r10
  40b8c9:	mov    rax,QWORD PTR [r13+0x0]
  40b8cd:	mov    rsi,r10
  40b8d0:	jmp    40b8f5 <_start@@Base+0x4a85>
  40b8d2:	nop    WORD PTR [rax+rax*1+0x0]
  40b8d8:	cmp    rbp,rax
  40b8db:	jne    40b968 <_start@@Base+0x4af8>
  40b8e1:	add    r13,0x8
  40b8e5:	mov    rax,QWORD PTR [r13+0x0]
  40b8e9:	mov    rbp,rsi
  40b8ec:	test   rax,rax
  40b8ef:	je     40b9b0 <_start@@Base+0x4b40>
  40b8f5:	mov    rcx,QWORD PTR [rsp+0x8]
  40b8fa:	mov    r9,r15
  40b8fd:	mov    r8,r14
  40b900:	mov    rdx,rbx
  40b903:	mov    rdi,r12
  40b906:	call   rax
  40b908:	mov    rsi,rax
  40b90b:	cmp    rbx,rax
  40b90e:	jne    40b8d8 <_start@@Base+0x4a68>
  40b910:	mov    r10,rsi
  40b913:	mov    rdi,QWORD PTR [rsp+0x48]
  40b918:	xor    rdi,QWORD PTR fs:0x28
  40b921:	mov    rax,r10
  40b924:	jne    40ba79 <_start@@Base+0x4c09>
  40b92a:	add    rsp,0x58
  40b92e:	pop    rbx
  40b92f:	pop    rbp
  40b930:	pop    r12
  40b932:	pop    r13
  40b934:	pop    r14
  40b936:	pop    r15
  40b938:	ret    
  40b939:	mov    ecx,0x5
  40b93e:	mov    rdx,rbx
  40b941:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40b946:	mov    esi,DWORD PTR [r12+0x14]
  40b94b:	mov    r10,rax
  40b94e:	test   esi,esi
  40b950:	je     40b9f0 <_start@@Base+0x4b80>
  40b956:	cmp    rbx,r10
  40b959:	jne    40b8a8 <_start@@Base+0x4a38>
  40b95f:	jmp    40b913 <_start@@Base+0x4aa3>
  40b961:	nop    DWORD PTR [rax+0x0]
  40b968:	mov    edx,DWORD PTR [rsp+0x38]
  40b96c:	mov    r10,rax
  40b96f:	mov    rax,QWORD PTR [rsp+0x40]
  40b974:	test   edx,edx
  40b976:	je     40b9d0 <_start@@Base+0x4b60>
  40b978:	mov    ecx,0x8
  40b97d:	cmp    rax,0x80
  40b983:	ja     40ba42 <_start@@Base+0x4bd2>
  40b989:	neg    eax
  40b98b:	mov    BYTE PTR [rsp+0x27],al
  40b98f:	mov    rcx,QWORD PTR [rsp+0x18]
  40b994:	add    BYTE PTR [rcx],al
  40b996:	mov    ecx,DWORD PTR [rsp+0x3c]
  40b99a:	test   ecx,ecx
  40b99c:	jne    40b8c1 <_start@@Base+0x4a51>
  40b9a2:	jmp    40b913 <_start@@Base+0x4aa3>
  40b9a7:	nop    WORD PTR [rax+rax*1+0x0]
  40b9b0:	mov    ecx,0x17
  40b9b5:	mov    rdx,rbx
  40b9b8:	mov    rdi,r12
  40b9bb:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40b9c0:	mov    r10,rax
  40b9c3:	jmp    40b913 <_start@@Base+0x4aa3>
  40b9c8:	nop    DWORD PTR [rax+rax*1+0x0]
  40b9d0:	cmp    rax,0x7f
  40b9d4:	ja     40ba3d <_start@@Base+0x4bcd>
  40b9d6:	mov    BYTE PTR [rsp+0x27],al
  40b9da:	jmp    40b98f <_start@@Base+0x4b1f>
  40b9dc:	mov    eax,DWORD PTR [rdi+0x14]
  40b9df:	test   eax,eax
  40b9e1:	jne    40b910 <_start@@Base+0x4aa0>
  40b9e7:	mov    r10,rbx
  40b9ea:	nop    WORD PTR [rax+rax*1+0x0]
  40b9f0:	mov    rax,rbx
  40b9f3:	sub    rax,r10
  40b9f6:	cmp    rax,0x1
  40b9fa:	jle    40ba10 <_start@@Base+0x4ba0>
  40b9fc:	cmp    BYTE PTR [r10],0x20
  40ba00:	jg     40b956 <_start@@Base+0x4ae6>
  40ba06:	jne    40ba10 <_start@@Base+0x4ba0>
  40ba08:	cmp    BYTE PTR [r10+0x1],0x20
  40ba0d:	jg     40ba69 <_start@@Base+0x4bf9>
  40ba0f:	nop
  40ba10:	mov    rsi,r10
  40ba13:	mov    rdx,rbx
  40ba16:	mov    rdi,r12
  40ba19:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40ba1e:	mov    r10,rax
  40ba21:	jmp    40b956 <_start@@Base+0x4ae6>
  40ba26:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ba30:	lea    r10,[rsi+0x1]
  40ba34:	mov    DWORD PTR [rdi+0x14],0x0
  40ba3b:	jmp    40b9f0 <_start@@Base+0x4b80>
  40ba3d:	mov    ecx,0x7
  40ba42:	mov    rsi,r10
  40ba45:	mov    rdx,rbx
  40ba48:	mov    rdi,r12
  40ba4b:	mov    QWORD PTR [rsp+0x28],r10
  40ba50:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40ba55:	mov    r10,QWORD PTR [rsp+0x28]
  40ba5a:	cmp    rbx,rax
  40ba5d:	je     40ba71 <_start@@Base+0x4c01>
  40ba5f:	movzx  eax,BYTE PTR [rsp+0x27]
  40ba64:	jmp    40b98f <_start@@Base+0x4b1f>
  40ba69:	inc    r10
  40ba6c:	jmp    40b956 <_start@@Base+0x4ae6>
  40ba71:	mov    r10,rbx
  40ba74:	jmp    40b913 <_start@@Base+0x4aa3>
  40ba79:	call   4061a0 <__stack_chk_fail@plt>
  40ba7e:	xchg   ax,ax
  40ba80:	push   r15
  40ba82:	xor    r9d,r9d
  40ba85:	push   r14
  40ba87:	push   r13
  40ba89:	push   r12
  40ba8b:	mov    r12,rdi
  40ba8e:	push   rbp
  40ba8f:	push   rbx
  40ba90:	mov    rbx,rdx
  40ba93:	sub    rsp,0x58
  40ba97:	mov    QWORD PTR [rsp+0x10],rcx
  40ba9c:	mov    QWORD PTR [rsp+0x20],r8
  40baa1:	mov    rdx,QWORD PTR fs:0x28
  40baaa:	mov    QWORD PTR [rsp+0x48],rdx
  40baaf:	xor    edx,edx
  40bab1:	mov    WORD PTR [r8],r9w
  40bab5:	cmp    rsi,rbx
  40bab8:	je     40bc00 <_start@@Base+0x4d90>
  40babe:	movzx  eax,BYTE PTR [rsi]
  40bac1:	cmp    al,0x22
  40bac3:	je     40bc50 <_start@@Base+0x4de0>
  40bac9:	cmp    al,0x2e
  40bacb:	je     40bb71 <_start@@Base+0x4d01>
  40bad1:	mov    DWORD PTR [rdi+0x14],0x1
  40bad8:	mov    r10,rsi
  40badb:	xor    esi,esi
  40badd:	lea    rax,[rsp+0x38]
  40bae2:	mov    WORD PTR [rsp+0x1e],si
  40bae7:	mov    QWORD PTR [rsp+0x8],rax
  40baec:	lea    r15,[rsp+0x3c]
  40baf1:	lea    r14,[rsp+0x40]
  40baf6:	mov    r13,QWORD PTR [rsp+0x10]
  40bafb:	mov    rbp,r10
  40bafe:	mov    rax,QWORD PTR [r13+0x0]
  40bb02:	mov    rsi,r10
  40bb05:	jmp    40bb2d <_start@@Base+0x4cbd>
  40bb07:	nop    WORD PTR [rax+rax*1+0x0]
  40bb10:	cmp    rbp,rax
  40bb13:	jne    40bba0 <_start@@Base+0x4d30>
  40bb19:	add    r13,0x8
  40bb1d:	mov    rax,QWORD PTR [r13+0x0]
  40bb21:	mov    rbp,rsi
  40bb24:	test   rax,rax
  40bb27:	je     40bbe8 <_start@@Base+0x4d78>
  40bb2d:	mov    rcx,QWORD PTR [rsp+0x8]
  40bb32:	mov    r9,r15
  40bb35:	mov    r8,r14
  40bb38:	mov    rdx,rbx
  40bb3b:	mov    rdi,r12
  40bb3e:	call   rax
  40bb40:	mov    rsi,rax
  40bb43:	cmp    rbx,rax
  40bb46:	jne    40bb10 <_start@@Base+0x4ca0>
  40bb48:	mov    r10,rsi
  40bb4b:	mov    rdi,QWORD PTR [rsp+0x48]
  40bb50:	xor    rdi,QWORD PTR fs:0x28
  40bb59:	mov    rax,r10
  40bb5c:	jne    40bc9f <_start@@Base+0x4e2f>
  40bb62:	add    rsp,0x58
  40bb66:	pop    rbx
  40bb67:	pop    rbp
  40bb68:	pop    r12
  40bb6a:	pop    r13
  40bb6c:	pop    r14
  40bb6e:	pop    r15
  40bb70:	ret    
  40bb71:	mov    ecx,0x5
  40bb76:	mov    rdx,rbx
  40bb79:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40bb7e:	mov    edi,DWORD PTR [r12+0x14]
  40bb83:	mov    r10,rax
  40bb86:	test   edi,edi
  40bb88:	je     40bc10 <_start@@Base+0x4da0>
  40bb8e:	cmp    rbx,r10
  40bb91:	jne    40badb <_start@@Base+0x4c6b>
  40bb97:	jmp    40bb4b <_start@@Base+0x4cdb>
  40bb99:	nop    DWORD PTR [rax+0x0]
  40bba0:	mov    edx,DWORD PTR [rsp+0x38]
  40bba4:	mov    r10,rax
  40bba7:	test   edx,edx
  40bba9:	jne    40bc60 <_start@@Base+0x4df0>
  40bbaf:	mov    rax,QWORD PTR [rsp+0x40]
  40bbb4:	cmp    rax,0xffff
  40bbba:	ja     40bc90 <_start@@Base+0x4e20>
  40bbc0:	mov    WORD PTR [rsp+0x1e],ax
  40bbc5:	movzx  ecx,WORD PTR [rsp+0x1e]
  40bbca:	mov    rax,QWORD PTR [rsp+0x20]
  40bbcf:	add    WORD PTR [rax],cx
  40bbd2:	mov    ecx,DWORD PTR [rsp+0x3c]
  40bbd6:	test   ecx,ecx
  40bbd8:	jne    40baf6 <_start@@Base+0x4c86>
  40bbde:	jmp    40bb4b <_start@@Base+0x4cdb>
  40bbe3:	nop    DWORD PTR [rax+rax*1+0x0]
  40bbe8:	mov    ecx,0x17
  40bbed:	mov    rdx,rbx
  40bbf0:	mov    rdi,r12
  40bbf3:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40bbf8:	mov    r10,rax
  40bbfb:	jmp    40bb4b <_start@@Base+0x4cdb>
  40bc00:	mov    eax,DWORD PTR [rdi+0x14]
  40bc03:	test   eax,eax
  40bc05:	jne    40bb48 <_start@@Base+0x4cd8>
  40bc0b:	mov    r10,rbx
  40bc0e:	xchg   ax,ax
  40bc10:	mov    rax,rbx
  40bc13:	sub    rax,r10
  40bc16:	cmp    rax,0x1
  40bc1a:	jle    40bc30 <_start@@Base+0x4dc0>
  40bc1c:	cmp    BYTE PTR [r10],0x20
  40bc20:	jg     40bb8e <_start@@Base+0x4d1e>
  40bc26:	jne    40bc30 <_start@@Base+0x4dc0>
  40bc28:	cmp    BYTE PTR [r10+0x1],0x20
  40bc2d:	jg     40bc97 <_start@@Base+0x4e27>
  40bc2f:	nop
  40bc30:	mov    rsi,r10
  40bc33:	mov    rdx,rbx
  40bc36:	mov    rdi,r12
  40bc39:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40bc3e:	mov    r10,rax
  40bc41:	jmp    40bb8e <_start@@Base+0x4d1e>
  40bc46:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40bc50:	lea    r10,[rsi+0x1]
  40bc54:	mov    DWORD PTR [rdi+0x14],0x0
  40bc5b:	jmp    40bc10 <_start@@Base+0x4da0>
  40bc5d:	nop    DWORD PTR [rax]
  40bc60:	mov    ecx,0x8
  40bc65:	mov    rsi,r10
  40bc68:	mov    rdx,rbx
  40bc6b:	mov    rdi,r12
  40bc6e:	mov    QWORD PTR [rsp+0x28],r10
  40bc73:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40bc78:	mov    r10,QWORD PTR [rsp+0x28]
  40bc7d:	cmp    rbx,rax
  40bc80:	jne    40bbc5 <_start@@Base+0x4d55>
  40bc86:	mov    r10,rbx
  40bc89:	jmp    40bb4b <_start@@Base+0x4cdb>
  40bc8e:	xchg   ax,ax
  40bc90:	mov    ecx,0x7
  40bc95:	jmp    40bc65 <_start@@Base+0x4df5>
  40bc97:	inc    r10
  40bc9a:	jmp    40bb8e <_start@@Base+0x4d1e>
  40bc9f:	call   4061a0 <__stack_chk_fail@plt>
  40bca4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40bcaf:	nop
  40bcb0:	push   r15
  40bcb2:	push   r14
  40bcb4:	push   r13
  40bcb6:	push   r12
  40bcb8:	mov    r12,rdi
  40bcbb:	push   rbp
  40bcbc:	push   rbx
  40bcbd:	mov    rbx,rdx
  40bcc0:	sub    rsp,0x58
  40bcc4:	mov    QWORD PTR [rsp+0x18],rcx
  40bcc9:	mov    QWORD PTR [rsp+0x20],r8
  40bcce:	mov    rdi,QWORD PTR fs:0x28
  40bcd7:	mov    QWORD PTR [rsp+0x48],rdi
  40bcdc:	xor    edi,edi
  40bcde:	mov    QWORD PTR [r8],0x0
  40bce5:	cmp    rsi,rdx
  40bce8:	je     40be72 <_start@@Base+0x5002>
  40bcee:	movzx  eax,BYTE PTR [rsi]
  40bcf1:	cmp    al,0x22
  40bcf3:	je     40bed0 <_start@@Base+0x5060>
  40bcf9:	cmp    al,0x2e
  40bcfb:	je     40bda1 <_start@@Base+0x4f31>
  40bd01:	mov    DWORD PTR [r12+0x14],0x1
  40bd0a:	mov    r10,rsi
  40bd0d:	lea    rax,[rsp+0x38]
  40bd12:	mov    QWORD PTR [rsp+0x10],0x0
  40bd1b:	mov    QWORD PTR [rsp+0x8],rax
  40bd20:	lea    r15,[rsp+0x3c]
  40bd25:	lea    r14,[rsp+0x40]
  40bd2a:	mov    r13,QWORD PTR [rsp+0x18]
  40bd2f:	mov    rbp,r10
  40bd32:	mov    rax,QWORD PTR [r13+0x0]
  40bd36:	mov    rsi,r10
  40bd39:	jmp    40bd5d <_start@@Base+0x4eed>
  40bd3b:	nop    DWORD PTR [rax+rax*1+0x0]
  40bd40:	cmp    rbp,rax
  40bd43:	jne    40bdd0 <_start@@Base+0x4f60>
  40bd49:	add    r13,0x8
  40bd4d:	mov    rax,QWORD PTR [r13+0x0]
  40bd51:	mov    rbp,rsi
  40bd54:	test   rax,rax
  40bd57:	je     40be20 <_start@@Base+0x4fb0>
  40bd5d:	mov    rcx,QWORD PTR [rsp+0x8]
  40bd62:	mov    r9,r15
  40bd65:	mov    r8,r14
  40bd68:	mov    rdx,rbx
  40bd6b:	mov    rdi,r12
  40bd6e:	call   rax
  40bd70:	mov    rsi,rax
  40bd73:	cmp    rbx,rax
  40bd76:	jne    40bd40 <_start@@Base+0x4ed0>
  40bd78:	mov    r10,rsi
  40bd7b:	mov    rdi,QWORD PTR [rsp+0x48]
  40bd80:	xor    rdi,QWORD PTR fs:0x28
  40bd89:	mov    rax,r10
  40bd8c:	jne    40bee7 <_start@@Base+0x5077>
  40bd92:	add    rsp,0x58
  40bd96:	pop    rbx
  40bd97:	pop    rbp
  40bd98:	pop    r12
  40bd9a:	pop    r13
  40bd9c:	pop    r14
  40bd9e:	pop    r15
  40bda0:	ret    
  40bda1:	mov    ecx,0x5
  40bda6:	mov    rdi,r12
  40bda9:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40bdae:	mov    esi,DWORD PTR [r12+0x14]
  40bdb3:	mov    r10,rax
  40bdb6:	test   esi,esi
  40bdb8:	je     40be88 <_start@@Base+0x5018>
  40bdbe:	cmp    rbx,r10
  40bdc1:	jne    40bd0d <_start@@Base+0x4e9d>
  40bdc7:	jmp    40bd7b <_start@@Base+0x4f0b>
  40bdc9:	nop    DWORD PTR [rax+0x0]
  40bdd0:	mov    edx,DWORD PTR [rsp+0x38]
  40bdd4:	mov    r10,rax
  40bdd7:	mov    rax,QWORD PTR [rsp+0x40]
  40bddc:	test   edx,edx
  40bdde:	je     40be40 <_start@@Base+0x4fd0>
  40bde0:	mov    rdx,rax
  40bde3:	movabs rdi,0x8000000000000000
  40bded:	neg    rdx
  40bdf0:	mov    ecx,0x8
  40bdf5:	cmp    rax,rdi
  40bdf8:	ja     40be4d <_start@@Base+0x4fdd>
  40bdfa:	mov    QWORD PTR [rsp+0x10],rdx
  40bdff:	mov    rcx,QWORD PTR [rsp+0x10]
  40be04:	mov    rax,QWORD PTR [rsp+0x20]
  40be09:	add    QWORD PTR [rax],rcx
  40be0c:	mov    ecx,DWORD PTR [rsp+0x3c]
  40be10:	test   ecx,ecx
  40be12:	jne    40bd2a <_start@@Base+0x4eba>
  40be18:	jmp    40bd7b <_start@@Base+0x4f0b>
  40be1d:	nop    DWORD PTR [rax]
  40be20:	mov    ecx,0x17
  40be25:	mov    rdx,rbx
  40be28:	mov    rdi,r12
  40be2b:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40be30:	mov    r10,rax
  40be33:	jmp    40bd7b <_start@@Base+0x4f0b>
  40be38:	nop    DWORD PTR [rax+rax*1+0x0]
  40be40:	mov    rdx,rax
  40be43:	test   rax,rax
  40be46:	jns    40bdfa <_start@@Base+0x4f8a>
  40be48:	mov    ecx,0x7
  40be4d:	mov    rsi,r10
  40be50:	mov    rdx,rbx
  40be53:	mov    rdi,r12
  40be56:	mov    QWORD PTR [rsp+0x28],r10
  40be5b:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40be60:	mov    r10,QWORD PTR [rsp+0x28]
  40be65:	cmp    rbx,rax
  40be68:	jne    40bdff <_start@@Base+0x4f8f>
  40be6a:	mov    r10,rbx
  40be6d:	jmp    40bd7b <_start@@Base+0x4f0b>
  40be72:	mov    eax,DWORD PTR [r12+0x14]
  40be77:	test   eax,eax
  40be79:	jne    40bd78 <_start@@Base+0x4f08>
  40be7f:	mov    r10,rbx
  40be82:	nop    WORD PTR [rax+rax*1+0x0]
  40be88:	mov    rax,rbx
  40be8b:	sub    rax,r10
  40be8e:	cmp    rax,0x1
  40be92:	jle    40beb0 <_start@@Base+0x5040>
  40be94:	cmp    BYTE PTR [r10],0x20
  40be98:	jg     40bdbe <_start@@Base+0x4f4e>
  40be9e:	jne    40beb0 <_start@@Base+0x5040>
  40bea0:	cmp    BYTE PTR [r10+0x1],0x20
  40bea5:	jg     40bedf <_start@@Base+0x506f>
  40bea7:	nop    WORD PTR [rax+rax*1+0x0]
  40beb0:	mov    rsi,r10
  40beb3:	mov    rdx,rbx
  40beb6:	mov    rdi,r12
  40beb9:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40bebe:	mov    r10,rax
  40bec1:	jmp    40bdbe <_start@@Base+0x4f4e>
  40bec6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40bed0:	lea    r10,[rsi+0x1]
  40bed4:	mov    DWORD PTR [r12+0x14],0x0
  40bedd:	jmp    40be88 <_start@@Base+0x5018>
  40bedf:	inc    r10
  40bee2:	jmp    40bdbe <_start@@Base+0x4f4e>
  40bee7:	call   4061a0 <__stack_chk_fail@plt>
  40beec:	nop    DWORD PTR [rax+0x0]
  40bef0:	push   r15
  40bef2:	push   r14
  40bef4:	push   r13
  40bef6:	push   r12
  40bef8:	mov    r12,rdi
  40befb:	push   rbp
  40befc:	push   rbx
  40befd:	mov    rbx,rdx
  40bf00:	sub    rsp,0x58
  40bf04:	mov    QWORD PTR [rsp+0x10],rcx
  40bf09:	mov    QWORD PTR [rsp+0x20],r8
  40bf0e:	mov    rdx,QWORD PTR fs:0x28
  40bf17:	mov    QWORD PTR [rsp+0x48],rdx
  40bf1c:	xor    edx,edx
  40bf1e:	mov    BYTE PTR [r8],0x0
  40bf22:	cmp    rsi,rbx
  40bf25:	je     40c060 <_start@@Base+0x51f0>
  40bf2b:	movzx  eax,BYTE PTR [rsi]
  40bf2e:	cmp    al,0x22
  40bf30:	je     40c0b0 <_start@@Base+0x5240>
  40bf36:	cmp    al,0x2e
  40bf38:	je     40bfd9 <_start@@Base+0x5169>
  40bf3e:	mov    DWORD PTR [rdi+0x14],0x1
  40bf45:	mov    r10,rsi
  40bf48:	lea    rax,[rsp+0x38]
  40bf4d:	mov    BYTE PTR [rsp+0x1f],0x0
  40bf52:	mov    QWORD PTR [rsp+0x8],rax
  40bf57:	lea    r15,[rsp+0x3c]
  40bf5c:	lea    r14,[rsp+0x40]
  40bf61:	mov    r13,QWORD PTR [rsp+0x10]
  40bf66:	mov    rbp,r10
  40bf69:	mov    rax,QWORD PTR [r13+0x0]
  40bf6d:	mov    rsi,r10
  40bf70:	jmp    40bf95 <_start@@Base+0x5125>
  40bf72:	nop    WORD PTR [rax+rax*1+0x0]
  40bf78:	cmp    rbp,rax
  40bf7b:	jne    40c000 <_start@@Base+0x5190>
  40bf81:	add    r13,0x8
  40bf85:	mov    rax,QWORD PTR [r13+0x0]
  40bf89:	mov    rbp,rsi
  40bf8c:	test   rax,rax
  40bf8f:	je     40c048 <_start@@Base+0x51d8>
  40bf95:	mov    rcx,QWORD PTR [rsp+0x8]
  40bf9a:	mov    r9,r15
  40bf9d:	mov    r8,r14
  40bfa0:	mov    rdx,rbx
  40bfa3:	mov    rdi,r12
  40bfa6:	call   rax
  40bfa8:	mov    rsi,rax
  40bfab:	cmp    rbx,rax
  40bfae:	jne    40bf78 <_start@@Base+0x5108>
  40bfb0:	mov    r10,rsi
  40bfb3:	mov    rdi,QWORD PTR [rsp+0x48]
  40bfb8:	xor    rdi,QWORD PTR fs:0x28
  40bfc1:	mov    rax,r10
  40bfc4:	jne    40c0ff <_start@@Base+0x528f>
  40bfca:	add    rsp,0x58
  40bfce:	pop    rbx
  40bfcf:	pop    rbp
  40bfd0:	pop    r12
  40bfd2:	pop    r13
  40bfd4:	pop    r14
  40bfd6:	pop    r15
  40bfd8:	ret    
  40bfd9:	mov    ecx,0x5
  40bfde:	mov    rdx,rbx
  40bfe1:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40bfe6:	mov    esi,DWORD PTR [r12+0x14]
  40bfeb:	mov    r10,rax
  40bfee:	test   esi,esi
  40bff0:	je     40c070 <_start@@Base+0x5200>
  40bff2:	cmp    rbx,r10
  40bff5:	jne    40bf48 <_start@@Base+0x50d8>
  40bffb:	jmp    40bfb3 <_start@@Base+0x5143>
  40bffd:	nop    DWORD PTR [rax]
  40c000:	mov    edx,DWORD PTR [rsp+0x38]
  40c004:	mov    r10,rax
  40c007:	test   edx,edx
  40c009:	jne    40c0c0 <_start@@Base+0x5250>
  40c00f:	mov    rax,QWORD PTR [rsp+0x40]
  40c014:	cmp    rax,0xff
  40c01a:	ja     40c0f0 <_start@@Base+0x5280>
  40c020:	mov    BYTE PTR [rsp+0x1f],al
  40c024:	movzx  ecx,BYTE PTR [rsp+0x1f]
  40c029:	mov    rax,QWORD PTR [rsp+0x20]
  40c02e:	add    BYTE PTR [rax],cl
  40c030:	mov    ecx,DWORD PTR [rsp+0x3c]
  40c034:	test   ecx,ecx
  40c036:	jne    40bf61 <_start@@Base+0x50f1>
  40c03c:	jmp    40bfb3 <_start@@Base+0x5143>
  40c041:	nop    DWORD PTR [rax+0x0]
  40c048:	mov    ecx,0x17
  40c04d:	mov    rdx,rbx
  40c050:	mov    rdi,r12
  40c053:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40c058:	mov    r10,rax
  40c05b:	jmp    40bfb3 <_start@@Base+0x5143>
  40c060:	mov    eax,DWORD PTR [rdi+0x14]
  40c063:	test   eax,eax
  40c065:	jne    40bfb0 <_start@@Base+0x5140>
  40c06b:	mov    r10,rbx
  40c06e:	xchg   ax,ax
  40c070:	mov    rax,rbx
  40c073:	sub    rax,r10
  40c076:	cmp    rax,0x1
  40c07a:	jle    40c090 <_start@@Base+0x5220>
  40c07c:	cmp    BYTE PTR [r10],0x20
  40c080:	jg     40bff2 <_start@@Base+0x5182>
  40c086:	jne    40c090 <_start@@Base+0x5220>
  40c088:	cmp    BYTE PTR [r10+0x1],0x20
  40c08d:	jg     40c0f7 <_start@@Base+0x5287>
  40c08f:	nop
  40c090:	mov    rsi,r10
  40c093:	mov    rdx,rbx
  40c096:	mov    rdi,r12
  40c099:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40c09e:	mov    r10,rax
  40c0a1:	jmp    40bff2 <_start@@Base+0x5182>
  40c0a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c0b0:	lea    r10,[rsi+0x1]
  40c0b4:	mov    DWORD PTR [rdi+0x14],0x0
  40c0bb:	jmp    40c070 <_start@@Base+0x5200>
  40c0bd:	nop    DWORD PTR [rax]
  40c0c0:	mov    ecx,0x8
  40c0c5:	mov    rsi,r10
  40c0c8:	mov    rdx,rbx
  40c0cb:	mov    rdi,r12
  40c0ce:	mov    QWORD PTR [rsp+0x28],r10
  40c0d3:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40c0d8:	mov    r10,QWORD PTR [rsp+0x28]
  40c0dd:	cmp    rbx,rax
  40c0e0:	jne    40c024 <_start@@Base+0x51b4>
  40c0e6:	mov    r10,rbx
  40c0e9:	jmp    40bfb3 <_start@@Base+0x5143>
  40c0ee:	xchg   ax,ax
  40c0f0:	mov    ecx,0x7
  40c0f5:	jmp    40c0c5 <_start@@Base+0x5255>
  40c0f7:	inc    r10
  40c0fa:	jmp    40bff2 <_start@@Base+0x5182>
  40c0ff:	call   4061a0 <__stack_chk_fail@plt>
  40c104:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40c10f:	nop
  40c110:	push   r15
  40c112:	push   r14
  40c114:	mov    r14,rsi
  40c117:	mov    esi,0x4
  40c11c:	push   r13
  40c11e:	mov    r13,rcx
  40c121:	push   r12
  40c123:	push   rbp
  40c124:	mov    rbp,rdi
  40c127:	push   rbx
  40c128:	mov    rbx,rdx
  40c12b:	mov    edx,0x4
  40c130:	sub    rsp,0x28
  40c134:	mov    rax,QWORD PTR fs:0x28
  40c13d:	mov    QWORD PTR [rsp+0x18],rax
  40c142:	xor    eax,eax
  40c144:	mov    DWORD PTR [rcx],0x0
  40c14a:	mov    rdi,QWORD PTR [rdi]
  40c14d:	call   417af0 <flatcc_builder_start_struct@@Base>
  40c152:	test   rax,rax
  40c155:	je     40c1a0 <_start@@Base+0x5330>
  40c157:	cmp    r14,rbx
  40c15a:	je     40c162 <_start@@Base+0x52f2>
  40c15c:	cmp    BYTE PTR [r14],0x7b
  40c160:	je     40c1e0 <_start@@Base+0x5370>
  40c162:	mov    ecx,0x15
  40c167:	nop    WORD PTR [rax+rax*1+0x0]
  40c170:	mov    rdx,rbx
  40c173:	mov    rsi,r14
  40c176:	mov    rdi,rbp
  40c179:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40c17e:	mov    r12,rax
  40c181:	cmp    rbx,r12
  40c184:	je     40c7b3 <_start@@Base+0x5943>
  40c18a:	mov    rdi,QWORD PTR [rbp+0x0]
  40c18e:	mov    r14,r12
  40c191:	call   417bb0 <flatcc_builder_end_struct@@Base>
  40c196:	mov    DWORD PTR [r13+0x0],eax
  40c19a:	test   eax,eax
  40c19c:	jne    40c1b6 <_start@@Base+0x5346>
  40c19e:	xchg   ax,ax
  40c1a0:	mov    ecx,0x21
  40c1a5:	mov    rdx,rbx
  40c1a8:	mov    rsi,r14
  40c1ab:	mov    rdi,rbp
  40c1ae:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40c1b3:	mov    r12,rax
  40c1b6:	mov    rdi,QWORD PTR [rsp+0x18]
  40c1bb:	xor    rdi,QWORD PTR fs:0x28
  40c1c4:	mov    rax,r12
  40c1c7:	jne    40c7ae <_start@@Base+0x593e>
  40c1cd:	add    rsp,0x28
  40c1d1:	pop    rbx
  40c1d2:	pop    rbp
  40c1d3:	pop    r12
  40c1d5:	pop    r13
  40c1d7:	pop    r14
  40c1d9:	pop    r15
  40c1db:	ret    
  40c1dc:	nop    DWORD PTR [rax+0x0]
  40c1e0:	mov    r12,rax
  40c1e3:	lea    rsi,[r14+0x1]
  40c1e7:	mov    rax,rbx
  40c1ea:	sub    rax,rsi
  40c1ed:	cmp    rax,0x1
  40c1f1:	jle    40c200 <_start@@Base+0x5390>
  40c1f3:	cmp    BYTE PTR [r14+0x1],0x20
  40c1f8:	jg     40c20e <_start@@Base+0x539e>
  40c1fa:	je     40c760 <_start@@Base+0x58f0>
  40c200:	mov    rdx,rbx
  40c203:	mov    rdi,rbp
  40c206:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40c20b:	mov    rsi,rax
  40c20e:	cmp    rbx,rsi
  40c211:	je     40c220 <_start@@Base+0x53b0>
  40c213:	cmp    BYTE PTR [rsi],0x7d
  40c216:	je     40c798 <_start@@Base+0x5928>
  40c21c:	nop    DWORD PTR [rax+0x0]
  40c220:	cmp    rbx,rsi
  40c223:	je     40c23f <_start@@Base+0x53cf>
  40c225:	movzx  eax,BYTE PTR [rsi]
  40c228:	cmp    al,0x22
  40c22a:	je     40c4f0 <_start@@Base+0x5680>
  40c230:	cmp    al,0x2e
  40c232:	je     40c610 <_start@@Base+0x57a0>
  40c238:	mov    DWORD PTR [rbp+0x14],0x1
  40c23f:	mov    rax,rbx
  40c242:	sub    rax,rsi
  40c245:	cmp    rax,0x7
  40c249:	jbe    40c50a <_start@@Base+0x569a>
  40c24f:	movbe  rax,QWORD PTR [rsi]
  40c254:	movabs rdi,0x626f6f6b735f7265
  40c25e:	cmp    rax,rdi
  40c261:	jne    40c50a <_start@@Base+0x569a>
  40c267:	lea    r14,[rsi+0x8]
  40c26b:	mov    rdi,rbx
  40c26e:	sub    rdi,r14
  40c271:	cmp    rdi,0x7
  40c275:	ja     40c560 <_start@@Base+0x56f0>
  40c27b:	lea    rdx,[rip+0x1fda6]        # 42c028 <_IO_stdin_used@@Base+0x28>
  40c282:	movsxd rax,DWORD PTR [rdx+rdi*4]
  40c286:	add    rax,rdx
  40c289:	notrack jmp rax
  40c28c:	nop    DWORD PTR [rax+0x0]
  40c290:	movsx  rcx,BYTE PTR [rsi+0xe]
  40c295:	shl    rcx,0x8
  40c299:	movsx  rdx,BYTE PTR [rsi+0xd]
  40c29e:	mov    rax,rdx
  40c2a1:	shl    rax,0x10
  40c2a5:	or     rcx,rax
  40c2a8:	movsx  rdx,BYTE PTR [rsi+0xc]
  40c2ad:	mov    rax,rdx
  40c2b0:	shl    rax,0x18
  40c2b4:	or     rax,rcx
  40c2b7:	movsx  rdx,BYTE PTR [rsi+0xb]
  40c2bc:	mov    rcx,rdx
  40c2bf:	shl    rcx,0x20
  40c2c3:	or     rax,rcx
  40c2c6:	movsx  rdx,BYTE PTR [rsi+0xa]
  40c2cb:	mov    rcx,rdx
  40c2ce:	shl    rcx,0x28
  40c2d2:	or     rcx,rax
  40c2d5:	movsx  rdx,BYTE PTR [rsi+0x9]
  40c2da:	mov    rax,rdx
  40c2dd:	shl    rax,0x30
  40c2e1:	or     rcx,rax
  40c2e4:	movsx  rdx,BYTE PTR [rsi+0x8]
  40c2e9:	mov    rax,rdx
  40c2ec:	shl    rax,0x38
  40c2f0:	or     rax,rcx
  40c2f3:	movabs rcx,0xffff000000000000
  40c2fd:	and    rax,rcx
  40c300:	movabs rcx,0x6164000000000000
  40c30a:	cmp    rax,rcx
  40c30d:	jne    40c4d0 <_start@@Base+0x5660>
  40c313:	cmp    rdi,0x2
  40c317:	jle    40c4d0 <_start@@Base+0x5660>
  40c31d:	mov    edi,DWORD PTR [rbp+0x14]
  40c320:	movzx  eax,BYTE PTR [rsi+0xa]
  40c324:	test   edi,edi
  40c326:	je     40c5f8 <_start@@Base+0x5788>
  40c32c:	cmp    al,0x20
  40c32e:	jle    40c338 <_start@@Base+0x54c8>
  40c330:	cmp    al,0x3a
  40c332:	jne    40c4d0 <_start@@Base+0x5660>
  40c338:	mov    DWORD PTR [rbp+0x14],0x0
  40c33f:	add    rsi,0xa
  40c343:	mov    rax,rbx
  40c346:	sub    rax,rsi
  40c349:	cmp    rax,0x1
  40c34d:	jle    40c35a <_start@@Base+0x54ea>
  40c34f:	cmp    BYTE PTR [rsi],0x20
  40c352:	jg     40c368 <_start@@Base+0x54f8>
  40c354:	je     40c700 <_start@@Base+0x5890>
  40c35a:	mov    rdx,rbx
  40c35d:	mov    rdi,rbp
  40c360:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40c365:	mov    rsi,rax
  40c368:	cmp    rbx,rsi
  40c36b:	je     40c376 <_start@@Base+0x5506>
  40c36d:	cmp    BYTE PTR [rsi],0x3a
  40c370:	je     40c718 <_start@@Base+0x58a8>
  40c376:	mov    ecx,0x4
  40c37b:	mov    rdx,rbx
  40c37e:	mov    rdi,rbp
  40c381:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40c386:	mov    r15,rax
  40c389:	cmp    r14,r15
  40c38c:	je     40c4d0 <_start@@Base+0x5660>
  40c392:	mov    DWORD PTR [rsp+0x8],0x0
  40c39a:	mov    QWORD PTR [rsp+0x10],0x0
  40c3a3:	mov    DWORD PTR [rsp+0xc],0x0
  40c3ab:	cmp    rbx,r15
  40c3ae:	je     40c630 <_start@@Base+0x57c0>
  40c3b4:	lea    rcx,[rsp+0xc]
  40c3b9:	lea    r8,[rsp+0x10]
  40c3be:	mov    rdx,rbx
  40c3c1:	mov    rsi,r15
  40c3c4:	mov    rdi,rbp
  40c3c7:	call   41f220 <flatcc_json_parser_integer@@Base>
  40c3cc:	mov    r14,rax
  40c3cf:	cmp    r15,rax
  40c3d2:	jne    40c640 <_start@@Base+0x57d0>
  40c3d8:	lea    r8,[rsp+0x8]
  40c3dd:	lea    rcx,[rip+0x2de5c]        # 43a240 <__data_start@@Base+0x180>
  40c3e4:	mov    rdx,rbx
  40c3e7:	mov    rsi,r14
  40c3ea:	mov    rdi,rbp
  40c3ed:	call   40b1c0 <_start@@Base+0x4350>
  40c3f2:	cmp    rax,r14
  40c3f5:	je     40c778 <_start@@Base+0x5908>
  40c3fb:	cmp    rbx,rax
  40c3fe:	je     40c778 <_start@@Base+0x5908>
  40c404:	mov    edx,DWORD PTR [rsp+0x8]
  40c408:	mov    r14,rax
  40c40b:	nop    DWORD PTR [rax+rax*1+0x0]
  40c410:	mov    DWORD PTR [r12],edx
  40c414:	nop    DWORD PTR [rax+0x0]
  40c418:	mov    rax,rbx
  40c41b:	sub    rax,r14
  40c41e:	cmp    rax,0x1
  40c422:	jle    40c430 <_start@@Base+0x55c0>
  40c424:	cmp    BYTE PTR [r14],0x20
  40c428:	jg     40c441 <_start@@Base+0x55d1>
  40c42a:	je     40c5e0 <_start@@Base+0x5770>
  40c430:	mov    rsi,r14
  40c433:	mov    rdx,rbx
  40c436:	mov    rdi,rbp
  40c439:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40c43e:	mov    r14,rax
  40c441:	cmp    rbx,r14
  40c444:	je     40c1a0 <_start@@Base+0x5330>
  40c44a:	movzx  eax,BYTE PTR [r14]
  40c44e:	cmp    al,0x2c
  40c450:	je     40c570 <_start@@Base+0x5700>
  40c456:	cmp    al,0x7d
  40c458:	je     40c520 <_start@@Base+0x56b0>
  40c45e:	mov    ecx,0xa
  40c463:	jmp    40c170 <_start@@Base+0x5300>
  40c468:	nop    DWORD PTR [rax+rax*1+0x0]
  40c470:	xor    eax,eax
  40c472:	jmp    40c2b7 <_start@@Base+0x5447>
  40c477:	nop    WORD PTR [rax+rax*1+0x0]
  40c480:	xor    eax,eax
  40c482:	jmp    40c2c6 <_start@@Base+0x5456>
  40c487:	nop    WORD PTR [rax+rax*1+0x0]
  40c490:	xor    ecx,ecx
  40c492:	jmp    40c299 <_start@@Base+0x5429>
  40c497:	nop    WORD PTR [rax+rax*1+0x0]
  40c4a0:	xor    ecx,ecx
  40c4a2:	jmp    40c2a8 <_start@@Base+0x5438>
  40c4a7:	nop    WORD PTR [rax+rax*1+0x0]
  40c4b0:	xor    ecx,ecx
  40c4b2:	jmp    40c2d5 <_start@@Base+0x5465>
  40c4b7:	nop    WORD PTR [rax+rax*1+0x0]
  40c4c0:	xor    ecx,ecx
  40c4c2:	jmp    40c2e4 <_start@@Base+0x5474>
  40c4c7:	nop    WORD PTR [rax+rax*1+0x0]
  40c4d0:	mov    rsi,r14
  40c4d3:	mov    rdx,rbx
  40c4d6:	mov    rdi,rbp
  40c4d9:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40c4de:	mov    r14,rax
  40c4e1:	jmp    40c418 <_start@@Base+0x55a8>
  40c4e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c4f0:	inc    rsi
  40c4f3:	mov    rax,rbx
  40c4f6:	sub    rax,rsi
  40c4f9:	mov    DWORD PTR [rbp+0x14],0x0
  40c500:	cmp    rax,0x7
  40c504:	ja     40c24f <_start@@Base+0x53df>
  40c50a:	mov    rdx,rbx
  40c50d:	mov    rdi,rbp
  40c510:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40c515:	mov    r14,rax
  40c518:	jmp    40c418 <_start@@Base+0x55a8>
  40c51d:	nop    DWORD PTR [rax]
  40c520:	lea    r12,[r14+0x1]
  40c524:	mov    rax,rbx
  40c527:	sub    rax,r12
  40c52a:	cmp    rax,0x1
  40c52e:	jle    40c541 <_start@@Base+0x56d1>
  40c530:	cmp    BYTE PTR [r14+0x1],0x20
  40c535:	jg     40c181 <_start@@Base+0x5311>
  40c53b:	je     40c690 <_start@@Base+0x5820>
  40c541:	mov    rsi,r12
  40c544:	mov    rdx,rbx
  40c547:	mov    rdi,rbp
  40c54a:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40c54f:	mov    r12,rax
  40c552:	jmp    40c181 <_start@@Base+0x5311>
  40c557:	nop    WORD PTR [rax+rax*1+0x0]
  40c560:	movbe  rax,QWORD PTR [rsi+0x8]
  40c566:	jmp    40c2f3 <_start@@Base+0x5483>
  40c56b:	nop    DWORD PTR [rax+rax*1+0x0]
  40c570:	lea    rsi,[r14+0x1]
  40c574:	mov    rax,rbx
  40c577:	sub    rax,rsi
  40c57a:	cmp    rax,0x1
  40c57e:	jle    40c58d <_start@@Base+0x571d>
  40c580:	cmp    BYTE PTR [r14+0x1],0x20
  40c585:	jg     40c59b <_start@@Base+0x572b>
  40c587:	je     40c6a8 <_start@@Base+0x5838>
  40c58d:	mov    rdx,rbx
  40c590:	mov    rdi,rbp
  40c593:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40c598:	mov    rsi,rax
  40c59b:	cmp    rbx,rsi
  40c59e:	je     40c6c0 <_start@@Base+0x5850>
  40c5a4:	cmp    BYTE PTR [rsi],0x7d
  40c5a7:	jne    40c220 <_start@@Base+0x53b0>
  40c5ad:	lea    r12,[rsi+0x1]
  40c5b1:	mov    rax,rbx
  40c5b4:	sub    rax,r12
  40c5b7:	cmp    rax,0x1
  40c5bb:	jle    40c541 <_start@@Base+0x56d1>
  40c5bd:	cmp    BYTE PTR [rsi+0x1],0x20
  40c5c1:	jg     40c181 <_start@@Base+0x5311>
  40c5c7:	jne    40c541 <_start@@Base+0x56d1>
  40c5cd:	cmp    BYTE PTR [rsi+0x2],0x20
  40c5d1:	jle    40c541 <_start@@Base+0x56d1>
  40c5d7:	lea    r12,[rsi+0x2]
  40c5db:	jmp    40c181 <_start@@Base+0x5311>
  40c5e0:	cmp    BYTE PTR [r14+0x1],0x20
  40c5e5:	jle    40c430 <_start@@Base+0x55c0>
  40c5eb:	inc    r14
  40c5ee:	jmp    40c441 <_start@@Base+0x55d1>
  40c5f3:	nop    DWORD PTR [rax+rax*1+0x0]
  40c5f8:	cmp    al,0x22
  40c5fa:	jne    40c4d0 <_start@@Base+0x5660>
  40c600:	add    rsi,0xb
  40c604:	jmp    40c343 <_start@@Base+0x54d3>
  40c609:	nop    DWORD PTR [rax+0x0]
  40c610:	mov    ecx,0x5
  40c615:	mov    rdx,rbx
  40c618:	mov    rdi,rbp
  40c61b:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40c620:	mov    rsi,rax
  40c623:	jmp    40c23f <_start@@Base+0x53cf>
  40c628:	nop    DWORD PTR [rax+rax*1+0x0]
  40c630:	mov    r14,rbx
  40c633:	jmp    40c3d8 <_start@@Base+0x5568>
  40c638:	nop    DWORD PTR [rax+rax*1+0x0]
  40c640:	mov    rax,QWORD PTR [rsp+0x10]
  40c645:	mov    ecx,DWORD PTR [rsp+0xc]
  40c649:	mov    edx,eax
  40c64b:	test   ecx,ecx
  40c64d:	je     40c6e0 <_start@@Base+0x5870>
  40c653:	mov    edi,0x80000000
  40c658:	neg    edx
  40c65a:	mov    ecx,0x8
  40c65f:	cmp    rax,rdi
  40c662:	jbe    40c410 <_start@@Base+0x55a0>
  40c668:	mov    rsi,r14
  40c66b:	mov    rdx,rbx
  40c66e:	mov    rdi,rbp
  40c671:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40c676:	mov    r14,rax
  40c679:	cmp    r15,rax
  40c67c:	je     40c3d8 <_start@@Base+0x5568>
  40c682:	mov    edx,DWORD PTR [rsp+0x8]
  40c686:	jmp    40c410 <_start@@Base+0x55a0>
  40c68b:	nop    DWORD PTR [rax+rax*1+0x0]
  40c690:	cmp    BYTE PTR [r14+0x2],0x20
  40c695:	jle    40c541 <_start@@Base+0x56d1>
  40c69b:	lea    r12,[r14+0x2]
  40c69f:	jmp    40c181 <_start@@Base+0x5311>
  40c6a4:	nop    DWORD PTR [rax+0x0]
  40c6a8:	cmp    BYTE PTR [r14+0x2],0x20
  40c6ad:	jle    40c58d <_start@@Base+0x571d>
  40c6b3:	lea    rsi,[r14+0x2]
  40c6b7:	cmp    rbx,rsi
  40c6ba:	jne    40c5a4 <_start@@Base+0x5734>
  40c6c0:	mov    ecx,0xa
  40c6c5:	mov    rdx,rbx
  40c6c8:	mov    rsi,rbx
  40c6cb:	mov    rdi,rbp
  40c6ce:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40c6d3:	mov    r12,rax
  40c6d6:	jmp    40c181 <_start@@Base+0x5311>
  40c6db:	nop    DWORD PTR [rax+rax*1+0x0]
  40c6e0:	cmp    rax,0x7fffffff
  40c6e6:	jbe    40c410 <_start@@Base+0x55a0>
  40c6ec:	mov    ecx,0x7
  40c6f1:	jmp    40c668 <_start@@Base+0x57f8>
  40c6f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c700:	cmp    BYTE PTR [rsi+0x1],0x20
  40c704:	jle    40c35a <_start@@Base+0x54ea>
  40c70a:	inc    rsi
  40c70d:	jmp    40c368 <_start@@Base+0x54f8>
  40c712:	nop    WORD PTR [rax+rax*1+0x0]
  40c718:	lea    r15,[rsi+0x1]
  40c71c:	mov    rax,rbx
  40c71f:	sub    rax,r15
  40c722:	cmp    rax,0x1
  40c726:	jle    40c734 <_start@@Base+0x58c4>
  40c728:	cmp    BYTE PTR [rsi+0x1],0x20
  40c72c:	jg     40c389 <_start@@Base+0x5519>
  40c732:	je     40c750 <_start@@Base+0x58e0>
  40c734:	mov    rsi,r15
  40c737:	mov    rdx,rbx
  40c73a:	mov    rdi,rbp
  40c73d:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40c742:	mov    r15,rax
  40c745:	jmp    40c389 <_start@@Base+0x5519>
  40c74a:	nop    WORD PTR [rax+rax*1+0x0]
  40c750:	cmp    BYTE PTR [rsi+0x2],0x20
  40c754:	jle    40c734 <_start@@Base+0x58c4>
  40c756:	lea    r15,[rsi+0x2]
  40c75a:	jmp    40c389 <_start@@Base+0x5519>
  40c75f:	nop
  40c760:	cmp    BYTE PTR [r14+0x2],0x20
  40c765:	jle    40c200 <_start@@Base+0x5390>
  40c76b:	lea    rsi,[r14+0x2]
  40c76f:	jmp    40c20e <_start@@Base+0x539e>
  40c774:	nop    DWORD PTR [rax+0x0]
  40c778:	mov    ecx,0x21
  40c77d:	mov    rdx,rbx
  40c780:	mov    rsi,rax
  40c783:	mov    rdi,rbp
  40c786:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40c78b:	mov    r12,rax
  40c78e:	jmp    40c181 <_start@@Base+0x5311>
  40c793:	nop    DWORD PTR [rax+rax*1+0x0]
  40c798:	inc    rsi
  40c79b:	mov    rdx,rbx
  40c79e:	mov    rdi,rbp
  40c7a1:	call   407f70 <_start@@Base+0x1100>
  40c7a6:	mov    r12,rax
  40c7a9:	jmp    40c181 <_start@@Base+0x5311>
  40c7ae:	call   4061a0 <__stack_chk_fail@plt>
  40c7b3:	mov    r14,rbx
  40c7b6:	jmp    40c1a0 <_start@@Base+0x5330>
  40c7bb:	nop    DWORD PTR [rax+rax*1+0x0]
  40c7c0:	push   r12
  40c7c2:	mov    rax,rdx
  40c7c5:	sub    rax,rsi
  40c7c8:	push   rbp
  40c7c9:	mov    r12,rcx
  40c7cc:	mov    rbp,rdi
  40c7cf:	push   rbx
  40c7d0:	mov    rbx,rdx
  40c7d3:	cmp    rax,0x1
  40c7d7:	jle    40c7e0 <_start@@Base+0x5970>
  40c7d9:	cmp    BYTE PTR [rsi],0x20
  40c7dc:	jg     40c7ee <_start@@Base+0x597e>
  40c7de:	je     40c850 <_start@@Base+0x59e0>
  40c7e0:	mov    rdx,rbx
  40c7e3:	mov    rdi,rbp
  40c7e6:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40c7eb:	mov    rsi,rax
  40c7ee:	cmp    rbx,rsi
  40c7f1:	je     40c8a0 <_start@@Base+0x5a30>
  40c7f7:	cmp    BYTE PTR [rsi],0x2c
  40c7fa:	je     40c860 <_start@@Base+0x59f0>
  40c7fc:	mov    DWORD PTR [r12],0x0
  40c804:	cmp    BYTE PTR [rsi],0x5d
  40c807:	je     40c820 <_start@@Base+0x59b0>
  40c809:	mov    ecx,0x9
  40c80e:	mov    rdx,rbx
  40c811:	pop    rbx
  40c812:	mov    rdi,rbp
  40c815:	pop    rbp
  40c816:	pop    r12
  40c818:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  40c81d:	nop    DWORD PTR [rax]
  40c820:	lea    rax,[rsi+0x1]
  40c824:	mov    rdx,rbx
  40c827:	sub    rdx,rax
  40c82a:	cmp    rdx,0x1
  40c82e:	jle    40c838 <_start@@Base+0x59c8>
  40c830:	cmp    BYTE PTR [rsi+0x1],0x20
  40c834:	jg     40c898 <_start@@Base+0x5a28>
  40c836:	je     40c8b0 <_start@@Base+0x5a40>
  40c838:	mov    rdx,rbx
  40c83b:	pop    rbx
  40c83c:	mov    rdi,rbp
  40c83f:	pop    rbp
  40c840:	mov    rsi,rax
  40c843:	pop    r12
  40c845:	jmp    41d6c0 <flatcc_json_parser_space_ext@@Base>
  40c84a:	nop    WORD PTR [rax+rax*1+0x0]
  40c850:	cmp    BYTE PTR [rsi+0x1],0x20
  40c854:	jle    40c7e0 <_start@@Base+0x5970>
  40c856:	inc    rsi
  40c859:	jmp    40c7ee <_start@@Base+0x597e>
  40c85b:	nop    DWORD PTR [rax+rax*1+0x0]
  40c860:	lea    rax,[rsi+0x1]
  40c864:	mov    rdx,rbx
  40c867:	sub    rdx,rax
  40c86a:	cmp    rdx,0x1
  40c86e:	jle    40c878 <_start@@Base+0x5a08>
  40c870:	cmp    BYTE PTR [rsi+0x1],0x20
  40c874:	jg     40c886 <_start@@Base+0x5a16>
  40c876:	je     40c8c0 <_start@@Base+0x5a50>
  40c878:	mov    rdx,rbx
  40c87b:	mov    rsi,rax
  40c87e:	mov    rdi,rbp
  40c881:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40c886:	cmp    rbx,rax
  40c889:	je     40c8f0 <_start@@Base+0x5a80>
  40c88b:	cmp    BYTE PTR [rax],0x5d
  40c88e:	je     40c8d0 <_start@@Base+0x5a60>
  40c890:	mov    DWORD PTR [r12],0x1
  40c898:	pop    rbx
  40c899:	pop    rbp
  40c89a:	pop    r12
  40c89c:	ret    
  40c89d:	nop    DWORD PTR [rax]
  40c8a0:	mov    rax,rbx
  40c8a3:	pop    rbx
  40c8a4:	pop    rbp
  40c8a5:	mov    DWORD PTR [r12],0x0
  40c8ad:	pop    r12
  40c8af:	ret    
  40c8b0:	cmp    BYTE PTR [rsi+0x2],0x20
  40c8b4:	jle    40c838 <_start@@Base+0x59c8>
  40c8b6:	lea    rax,[rsi+0x2]
  40c8ba:	jmp    40c898 <_start@@Base+0x5a28>
  40c8bc:	nop    DWORD PTR [rax+0x0]
  40c8c0:	cmp    BYTE PTR [rsi+0x2],0x20
  40c8c4:	jle    40c878 <_start@@Base+0x5a08>
  40c8c6:	lea    rax,[rsi+0x2]
  40c8ca:	jmp    40c886 <_start@@Base+0x5a16>
  40c8cc:	nop    DWORD PTR [rax+0x0]
  40c8d0:	mov    DWORD PTR [r12],0x0
  40c8d8:	mov    rdx,rbx
  40c8db:	pop    rbx
  40c8dc:	mov    rdi,rbp
  40c8df:	pop    rbp
  40c8e0:	lea    rsi,[rax+0x1]
  40c8e4:	pop    r12
  40c8e6:	jmp    407f70 <_start@@Base+0x1100>
  40c8eb:	nop    DWORD PTR [rax+rax*1+0x0]
  40c8f0:	mov    DWORD PTR [r12],0x0
  40c8f8:	mov    ecx,0x9
  40c8fd:	mov    rdx,rbx
  40c900:	mov    rsi,rbx
  40c903:	jmp    40c811 <_start@@Base+0x59a1>
  40c908:	nop    DWORD PTR [rax+rax*1+0x0]
  40c910:	push   r12
  40c912:	mov    rax,rdx
  40c915:	sub    rax,rsi
  40c918:	push   rbp
  40c919:	mov    r12,rcx
  40c91c:	mov    rbp,rdi
  40c91f:	push   rbx
  40c920:	mov    rbx,rdx
  40c923:	cmp    rax,0x1
  40c927:	jle    40c930 <_start@@Base+0x5ac0>
  40c929:	cmp    BYTE PTR [rsi],0x20
  40c92c:	jg     40c93e <_start@@Base+0x5ace>
  40c92e:	je     40c9a0 <_start@@Base+0x5b30>
  40c930:	mov    rdx,rbx
  40c933:	mov    rdi,rbp
  40c936:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40c93b:	mov    rsi,rax
  40c93e:	cmp    rbx,rsi
  40c941:	je     40c9f0 <_start@@Base+0x5b80>
  40c947:	cmp    BYTE PTR [rsi],0x2c
  40c94a:	je     40c9b0 <_start@@Base+0x5b40>
  40c94c:	mov    DWORD PTR [r12],0x0
  40c954:	cmp    BYTE PTR [rsi],0x7d
  40c957:	je     40c970 <_start@@Base+0x5b00>
  40c959:	mov    ecx,0xa
  40c95e:	mov    rdx,rbx
  40c961:	pop    rbx
  40c962:	mov    rdi,rbp
  40c965:	pop    rbp
  40c966:	pop    r12
  40c968:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  40c96d:	nop    DWORD PTR [rax]
  40c970:	lea    rax,[rsi+0x1]
  40c974:	mov    rdx,rbx
  40c977:	sub    rdx,rax
  40c97a:	cmp    rdx,0x1
  40c97e:	jle    40c988 <_start@@Base+0x5b18>
  40c980:	cmp    BYTE PTR [rsi+0x1],0x20
  40c984:	jg     40c9e8 <_start@@Base+0x5b78>
  40c986:	je     40ca00 <_start@@Base+0x5b90>
  40c988:	mov    rdx,rbx
  40c98b:	pop    rbx
  40c98c:	mov    rdi,rbp
  40c98f:	pop    rbp
  40c990:	mov    rsi,rax
  40c993:	pop    r12
  40c995:	jmp    41d6c0 <flatcc_json_parser_space_ext@@Base>
  40c99a:	nop    WORD PTR [rax+rax*1+0x0]
  40c9a0:	cmp    BYTE PTR [rsi+0x1],0x20
  40c9a4:	jle    40c930 <_start@@Base+0x5ac0>
  40c9a6:	inc    rsi
  40c9a9:	jmp    40c93e <_start@@Base+0x5ace>
  40c9ab:	nop    DWORD PTR [rax+rax*1+0x0]
  40c9b0:	lea    rax,[rsi+0x1]
  40c9b4:	mov    rdx,rbx
  40c9b7:	sub    rdx,rax
  40c9ba:	cmp    rdx,0x1
  40c9be:	jle    40c9c8 <_start@@Base+0x5b58>
  40c9c0:	cmp    BYTE PTR [rsi+0x1],0x20
  40c9c4:	jg     40c9d6 <_start@@Base+0x5b66>
  40c9c6:	je     40ca10 <_start@@Base+0x5ba0>
  40c9c8:	mov    rdx,rbx
  40c9cb:	mov    rsi,rax
  40c9ce:	mov    rdi,rbp
  40c9d1:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40c9d6:	cmp    rbx,rax
  40c9d9:	je     40ca40 <_start@@Base+0x5bd0>
  40c9db:	cmp    BYTE PTR [rax],0x7d
  40c9de:	je     40ca20 <_start@@Base+0x5bb0>
  40c9e0:	mov    DWORD PTR [r12],0x1
  40c9e8:	pop    rbx
  40c9e9:	pop    rbp
  40c9ea:	pop    r12
  40c9ec:	ret    
  40c9ed:	nop    DWORD PTR [rax]
  40c9f0:	mov    rax,rbx
  40c9f3:	pop    rbx
  40c9f4:	pop    rbp
  40c9f5:	mov    DWORD PTR [r12],0x0
  40c9fd:	pop    r12
  40c9ff:	ret    
  40ca00:	cmp    BYTE PTR [rsi+0x2],0x20
  40ca04:	jle    40c988 <_start@@Base+0x5b18>
  40ca06:	lea    rax,[rsi+0x2]
  40ca0a:	jmp    40c9e8 <_start@@Base+0x5b78>
  40ca0c:	nop    DWORD PTR [rax+0x0]
  40ca10:	cmp    BYTE PTR [rsi+0x2],0x20
  40ca14:	jle    40c9c8 <_start@@Base+0x5b58>
  40ca16:	lea    rax,[rsi+0x2]
  40ca1a:	jmp    40c9d6 <_start@@Base+0x5b66>
  40ca1c:	nop    DWORD PTR [rax+0x0]
  40ca20:	mov    DWORD PTR [r12],0x0
  40ca28:	mov    rdx,rbx
  40ca2b:	pop    rbx
  40ca2c:	mov    rdi,rbp
  40ca2f:	pop    rbp
  40ca30:	lea    rsi,[rax+0x1]
  40ca34:	pop    r12
  40ca36:	jmp    407f70 <_start@@Base+0x1100>
  40ca3b:	nop    DWORD PTR [rax+rax*1+0x0]
  40ca40:	mov    DWORD PTR [r12],0x0
  40ca48:	mov    ecx,0xa
  40ca4d:	mov    rdx,rbx
  40ca50:	mov    rsi,rbx
  40ca53:	jmp    40c961 <_start@@Base+0x5af1>
  40ca58:	nop    DWORD PTR [rax+rax*1+0x0]
  40ca60:	endbr64 
  40ca64:	push   r15
  40ca66:	mov    r15,rsi
  40ca69:	mov    esi,0xa
  40ca6e:	push   r14
  40ca70:	mov    r14,rcx
  40ca73:	push   r13
  40ca75:	push   r12
  40ca77:	push   rbp
  40ca78:	mov    rbp,rdi
  40ca7b:	push   rbx
  40ca7c:	mov    rbx,rdx
  40ca7f:	sub    rsp,0x38
  40ca83:	mov    rax,QWORD PTR fs:0x28
  40ca8c:	mov    QWORD PTR [rsp+0x28],rax
  40ca91:	xor    eax,eax
  40ca93:	mov    DWORD PTR [rcx],0x0
  40ca99:	mov    rdi,QWORD PTR [rdi]
  40ca9c:	call   418560 <flatcc_builder_start_table@@Base>
  40caa1:	test   eax,eax
  40caa3:	je     40cae8 <_start@@Base+0x5c78>
  40caa5:	mov    ecx,0x21
  40caaa:	mov    rdx,rbx
  40caad:	mov    rsi,r15
  40cab0:	mov    rdi,rbp
  40cab3:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40cab8:	mov    r12,rax
  40cabb:	mov    rdi,QWORD PTR [rsp+0x28]
  40cac0:	xor    rdi,QWORD PTR fs:0x28
  40cac9:	mov    rax,r12
  40cacc:	jne    40d328 <_start@@Base+0x64b8>
  40cad2:	add    rsp,0x38
  40cad6:	pop    rbx
  40cad7:	pop    rbp
  40cad8:	pop    r12
  40cada:	pop    r13
  40cadc:	pop    r14
  40cade:	pop    r15
  40cae0:	ret    
  40cae1:	nop    DWORD PTR [rax+0x0]
  40cae8:	lea    r8,[rsp+0x20]
  40caed:	mov    ecx,0x5
  40caf2:	mov    rdx,rbx
  40caf5:	mov    rsi,r15
  40caf8:	mov    rdi,rbp
  40cafb:	call   41f960 <flatcc_json_parser_prepare_unions@@Base>
  40cb00:	cmp    rax,rbx
  40cb03:	je     40caa5 <_start@@Base+0x5c35>
  40cb05:	lea    r12,[rsp+0x1c]
  40cb0a:	mov    rsi,r15
  40cb0d:	mov    rcx,r12
  40cb10:	mov    rdx,rbx
  40cb13:	mov    rdi,rbp
  40cb16:	call   40a7e0 <_start@@Base+0x3970>
  40cb1b:	mov    r13d,DWORD PTR [rsp+0x1c]
  40cb20:	mov    r15,rax
  40cb23:	test   r13d,r13d
  40cb26:	je     40ced0 <_start@@Base+0x6060>
  40cb2c:	movabs r13,0x6368617261637464
  40cb36:	jmp    40cbf5 <_start@@Base+0x5d85>
  40cb3b:	nop    DWORD PTR [rax+rax*1+0x0]
  40cb40:	movabs rdx,0x616e7461676f6e69
  40cb4a:	cmp    rax,rdx
  40cb4d:	je     40cd30 <_start@@Base+0x5ec0>
  40cb53:	movabs rdx,0x63616d656f5f7479
  40cb5d:	cmp    rax,rdx
  40cb60:	je     40cf10 <_start@@Base+0x60a0>
  40cb66:	and    rax,0xffffffffff000000
  40cb6c:	movabs rdx,0x63616d656f000000
  40cb76:	cmp    rax,rdx
  40cb79:	jne    40cdb0 <_start@@Base+0x5f40>
  40cb7f:	cmp    r8,0x5
  40cb83:	jle    40cdb0 <_start@@Base+0x5f40>
  40cb89:	mov    ecx,0x5
  40cb8e:	mov    rdx,rbx
  40cb91:	mov    rsi,r15
  40cb94:	mov    rdi,rbp
  40cb97:	call   40a880 <_start@@Base+0x3a10>
  40cb9c:	cmp    rax,r15
  40cb9f:	je     40cdb0 <_start@@Base+0x5f40>
  40cba5:	sub    rsp,0x8
  40cba9:	lea    rdi,[rip+0x780]        # 40d330 <_start@@Base+0x64c0>
  40cbb0:	push   rdi
  40cbb1:	mov    r8d,0x7
  40cbb7:	mov    ecx,0x3
  40cbbc:	mov    r9,QWORD PTR [rsp+0x30]
  40cbc1:	mov    rsi,rax
  40cbc4:	mov    rdi,rbp
  40cbc7:	mov    rdx,rbx
  40cbca:	call   41fa40 <flatcc_json_parser_union@@Base>
  40cbcf:	pop    rcx
  40cbd0:	mov    rsi,rax
  40cbd3:	pop    rdi
  40cbd4:	nop    DWORD PTR [rax+0x0]
  40cbd8:	mov    rdx,rbx
  40cbdb:	mov    rcx,r12
  40cbde:	mov    rdi,rbp
  40cbe1:	call   40c910 <_start@@Base+0x5aa0>
  40cbe6:	mov    edx,DWORD PTR [rsp+0x1c]
  40cbea:	mov    r15,rax
  40cbed:	test   edx,edx
  40cbef:	je     40ced0 <_start@@Base+0x6060>
  40cbf5:	cmp    rbx,r15
  40cbf8:	je     40cec8 <_start@@Base+0x6058>
  40cbfe:	movzx  eax,BYTE PTR [r15]
  40cc02:	cmp    al,0x22
  40cc04:	je     40cde0 <_start@@Base+0x5f70>
  40cc0a:	cmp    al,0x2e
  40cc0c:	je     40d0e8 <_start@@Base+0x6278>
  40cc12:	mov    DWORD PTR [rbp+0x14],0x1
  40cc19:	mov    r8,rbx
  40cc1c:	sub    r8,r15
  40cc1f:	cmp    r8,0x7
  40cc23:	ja     40cdd0 <_start@@Base+0x5f60>
  40cc29:	mov    rsi,rbx
  40cc2c:	mov    rdi,r15
  40cc2f:	call   406f60 <_start@@Base+0xf0>
  40cc34:	cmp    rax,r13
  40cc37:	jbe    40cb40 <_start@@Base+0x5cd0>
  40cc3d:	movabs rcx,0x6d61696e5f636860
  40cc47:	cmp    rax,rcx
  40cc4a:	ja     40cdf0 <_start@@Base+0x5f80>
  40cc50:	movabs rdx,0x6368617261637465
  40cc5a:	cmp    rax,rdx
  40cc5d:	jne    40cdb0 <_start@@Base+0x5f40>
  40cc63:	lea    r8,[r15+0x8]
  40cc67:	mov    r10,rbx
  40cc6a:	sub    r10,r8
  40cc6d:	cmp    r10,0x7
  40cc71:	ja     40d180 <_start@@Base+0x6310>
  40cc77:	mov    rdi,r8
  40cc7a:	mov    rsi,rbx
  40cc7d:	mov    QWORD PTR [rsp+0x8],r8
  40cc82:	call   406f60 <_start@@Base+0xf0>
  40cc87:	mov    rcx,rax
  40cc8a:	xor    cl,cl
  40cc8c:	movabs rdx,0x72735f7479706500
  40cc96:	cmp    rcx,rdx
  40cc99:	mov    r8,QWORD PTR [rsp+0x8]
  40cc9e:	je     40cd90 <_start@@Base+0x5f20>
  40cca4:	movabs rdx,0xffff000000000000
  40ccae:	and    rax,rdx
  40ccb1:	movabs rdx,0x7273000000000000
  40ccbb:	cmp    rax,rdx
  40ccbe:	jne    40cd90 <_start@@Base+0x5f20>
  40ccc4:	cmp    r10,0x2
  40ccc8:	jle    40cd90 <_start@@Base+0x5f20>
  40ccce:	mov    rsi,r8
  40ccd1:	mov    ecx,0x2
  40ccd6:	mov    rdx,rbx
  40ccd9:	mov    rdi,rbp
  40ccdc:	mov    QWORD PTR [rsp+0x8],r8
  40cce1:	call   40a880 <_start@@Base+0x3a10>
  40cce6:	mov    r8,QWORD PTR [rsp+0x8]
  40cceb:	cmp    r8,rax
  40ccee:	je     40cd90 <_start@@Base+0x5f20>
  40ccf4:	sub    rsp,0x8
  40ccf8:	lea    rcx,[rip+0x631]        # 40d330 <_start@@Base+0x64c0>
  40ccff:	push   rcx
  40cd00:	mov    rsi,rax
  40cd03:	mov    r8d,0x9
  40cd09:	mov    r9,QWORD PTR [rsp+0x30]
  40cd0e:	mov    ecx,0x4
  40cd13:	mov    rdx,rbx
  40cd16:	mov    rdi,rbp
  40cd19:	call   41fdf0 <flatcc_json_parser_union_vector@@Base>
  40cd1e:	pop    r10
  40cd20:	mov    rsi,rax
  40cd23:	pop    r11
  40cd25:	jmp    40cbd8 <_start@@Base+0x5d68>
  40cd2a:	nop    WORD PTR [rax+rax*1+0x0]
  40cd30:	lea    r8,[r15+0x8]
  40cd34:	mov    r10,rbx
  40cd37:	sub    r10,r8
  40cd3a:	cmp    r10,0x7
  40cd3e:	ja     40d108 <_start@@Base+0x6298>
  40cd44:	mov    rdi,r8
  40cd47:	mov    rsi,rbx
  40cd4a:	mov    QWORD PTR [rsp+0x8],r8
  40cd4f:	call   406f60 <_start@@Base+0xf0>
  40cd54:	mov    rcx,rax
  40cd57:	xor    cl,cl
  40cd59:	movabs rdx,0x73745f7479706500
  40cd63:	cmp    rcx,rdx
  40cd66:	mov    r8,QWORD PTR [rsp+0x8]
  40cd6b:	je     40cd90 <_start@@Base+0x5f20>
  40cd6d:	movabs rdx,0xffff000000000000
  40cd77:	and    rax,rdx
  40cd7a:	movabs rdx,0x7374000000000000
  40cd84:	cmp    rax,rdx
  40cd87:	je     40d070 <_start@@Base+0x6200>
  40cd8d:	nop    DWORD PTR [rax]
  40cd90:	mov    rsi,r8
  40cd93:	mov    rdx,rbx
  40cd96:	mov    rdi,rbp
  40cd99:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40cd9e:	mov    rsi,rax
  40cda1:	jmp    40cbd8 <_start@@Base+0x5d68>
  40cda6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40cdb0:	mov    rsi,r15
  40cdb3:	mov    rdx,rbx
  40cdb6:	mov    rdi,rbp
  40cdb9:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40cdbe:	mov    rsi,rax
  40cdc1:	jmp    40cbd8 <_start@@Base+0x5d68>
  40cdc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40cdd0:	movbe  rax,QWORD PTR [r15]
  40cdd5:	jmp    40cc34 <_start@@Base+0x5dc4>
  40cdda:	nop    WORD PTR [rax+rax*1+0x0]
  40cde0:	inc    r15
  40cde3:	mov    DWORD PTR [rbp+0x14],0x0
  40cdea:	jmp    40cc19 <_start@@Base+0x5da9>
  40cdef:	nop
  40cdf0:	movabs rcx,0x6d61696e5f636861
  40cdfa:	cmp    rax,rcx
  40cdfd:	je     40cfc8 <_start@@Base+0x6158>
  40ce03:	movabs rdi,0x736964655f6b6963
  40ce0d:	cmp    rax,rdi
  40ce10:	jne    40cdb0 <_start@@Base+0x5f40>
  40ce12:	lea    r8,[r15+0x8]
  40ce16:	mov    r10,rbx
  40ce19:	sub    r10,r8
  40ce1c:	cmp    r10,0x7
  40ce20:	ja     40d0d8 <_start@@Base+0x6268>
  40ce26:	mov    rdi,r8
  40ce29:	mov    rsi,rbx
  40ce2c:	mov    QWORD PTR [rsp+0x8],r8
  40ce31:	call   406f60 <_start@@Base+0xf0>
  40ce36:	mov    r8,QWORD PTR [rsp+0x8]
  40ce3b:	mov    rcx,rax
  40ce3e:	xor    cx,cx
  40ce41:	movabs rdx,0x6b5f747970650000
  40ce4b:	cmp    rcx,rdx
  40ce4e:	je     40d2c8 <_start@@Base+0x6458>
  40ce54:	movabs rdx,0xff00000000000000
  40ce5e:	and    rax,rdx
  40ce61:	movabs rdx,0x6b00000000000000
  40ce6b:	cmp    rax,rdx
  40ce6e:	jne    40cd90 <_start@@Base+0x5f20>
  40ce74:	cmp    r10,0x1
  40ce78:	jle    40cd90 <_start@@Base+0x5f20>
  40ce7e:	mov    rsi,r8
  40ce81:	mov    ecx,0x1
  40ce86:	mov    rdx,rbx
  40ce89:	mov    rdi,rbp
  40ce8c:	mov    QWORD PTR [rsp+0x8],r8
  40ce91:	call   40a880 <_start@@Base+0x3a10>
  40ce96:	mov    r8,QWORD PTR [rsp+0x8]
  40ce9b:	cmp    r8,rax
  40ce9e:	je     40cd90 <_start@@Base+0x5f20>
  40cea4:	sub    rsp,0x8
  40cea8:	lea    rcx,[rip+0x481]        # 40d330 <_start@@Base+0x64c0>
  40ceaf:	push   rcx
  40ceb0:	mov    r8d,0x5
  40ceb6:	mov    ecx,0x2
  40cebb:	mov    r9,QWORD PTR [rsp+0x30]
  40cec0:	jmp    40cbc1 <_start@@Base+0x5d51>
  40cec5:	nop    DWORD PTR [rax]
  40cec8:	xor    r8d,r8d
  40cecb:	jmp    40cc29 <_start@@Base+0x5db9>
  40ced0:	mov    eax,DWORD PTR [rbp+0x20]
  40ced3:	test   eax,eax
  40ced5:	jne    40caa5 <_start@@Base+0x5c35>
  40cedb:	mov    rcx,QWORD PTR [rsp+0x20]
  40cee0:	mov    rdx,rbx
  40cee3:	mov    rsi,r15
  40cee6:	mov    rdi,rbp
  40cee9:	call   41f9e0 <flatcc_json_parser_finalize_unions@@Base>
  40ceee:	mov    rdi,QWORD PTR [rbp+0x0]
  40cef2:	mov    r12,rax
  40cef5:	call   418ee0 <flatcc_builder_end_table@@Base>
  40cefa:	mov    DWORD PTR [r14],eax
  40cefd:	test   eax,eax
  40ceff:	jne    40cabb <_start@@Base+0x5c4b>
  40cf05:	mov    r15,r12
  40cf08:	jmp    40caa5 <_start@@Base+0x5c35>
  40cf0d:	nop    DWORD PTR [rax]
  40cf10:	lea    r8,[r15+0x8]
  40cf14:	mov    r10,rbx
  40cf17:	sub    r10,r8
  40cf1a:	cmp    r10,0x7
  40cf1e:	ja     40d218 <_start@@Base+0x63a8>
  40cf24:	mov    rdi,r8
  40cf27:	mov    rsi,rbx
  40cf2a:	mov    QWORD PTR [rsp+0x8],r8
  40cf2f:	call   406f60 <_start@@Base+0xf0>
  40cf34:	mov    r8,QWORD PTR [rsp+0x8]
  40cf39:	movabs rdx,0xffff000000000000
  40cf43:	and    rax,rdx
  40cf46:	movabs rdx,0x7065000000000000
  40cf50:	cmp    rax,rdx
  40cf53:	jne    40cd90 <_start@@Base+0x5f20>
  40cf59:	cmp    r10,0x2
  40cf5d:	jle    40cd90 <_start@@Base+0x5f20>
  40cf63:	mov    rsi,r8
  40cf66:	mov    ecx,0x2
  40cf6b:	mov    rdx,rbx
  40cf6e:	mov    rdi,rbp
  40cf71:	mov    QWORD PTR [rsp+0x8],r8
  40cf76:	call   40a880 <_start@@Base+0x3a10>
  40cf7b:	mov    r8,QWORD PTR [rsp+0x8]
  40cf80:	cmp    r8,rax
  40cf83:	je     40cd90 <_start@@Base+0x5f20>
  40cf89:	lea    rdi,[rip+0x3a0]        # 40d330 <_start@@Base+0x64c0>
  40cf90:	push   rdi
  40cf91:	lea    rdi,[rip+0x2d368]        # 43a300 <__data_start@@Base+0x240>
  40cf98:	mov    r8d,0x7
  40cf9e:	push   rdi
  40cf9f:	mov    ecx,0x3
  40cfa4:	mov    r9,QWORD PTR [rsp+0x30]
  40cfa9:	mov    rsi,rax
  40cfac:	mov    rdx,rbx
  40cfaf:	mov    rdi,rbp
  40cfb2:	call   41fb60 <flatcc_json_parser_union_type@@Base>
  40cfb7:	pop    r8
  40cfb9:	mov    rsi,rax
  40cfbc:	pop    r9
  40cfbe:	jmp    40cbd8 <_start@@Base+0x5d68>
  40cfc3:	nop    DWORD PTR [rax+rax*1+0x0]
  40cfc8:	lea    r8,[r15+0x8]
  40cfcc:	mov    r10,rbx
  40cfcf:	sub    r10,r8
  40cfd2:	cmp    r10,0x7
  40cfd6:	ja     40d0c8 <_start@@Base+0x6258>
  40cfdc:	mov    rdi,r8
  40cfdf:	mov    rsi,rbx
  40cfe2:	mov    QWORD PTR [rsp+0x8],r8
  40cfe7:	call   406f60 <_start@@Base+0xf0>
  40cfec:	mov    r8,QWORD PTR [rsp+0x8]
  40cff1:	movabs rdx,0x7261637465725f74
  40cffb:	cmp    rax,rdx
  40cffe:	je     40d228 <_start@@Base+0x63b8>
  40d004:	xor    ax,ax
  40d007:	movabs rdx,0x7261637465720000
  40d011:	cmp    rax,rdx
  40d014:	jne    40cd90 <_start@@Base+0x5f20>
  40d01a:	cmp    r10,0x6
  40d01e:	jle    40cd90 <_start@@Base+0x5f20>
  40d024:	mov    rsi,r8
  40d027:	mov    ecx,0x6
  40d02c:	mov    rdx,rbx
  40d02f:	mov    rdi,rbp
  40d032:	mov    QWORD PTR [rsp+0x8],r8
  40d037:	call   40a880 <_start@@Base+0x3a10>
  40d03c:	mov    r8,QWORD PTR [rsp+0x8]
  40d041:	cmp    r8,rax
  40d044:	je     40cd90 <_start@@Base+0x5f20>
  40d04a:	sub    rsp,0x8
  40d04e:	lea    rdi,[rip+0x2db]        # 40d330 <_start@@Base+0x64c0>
  40d055:	push   rdi
  40d056:	mov    r8d,0x1
  40d05c:	xor    ecx,ecx
  40d05e:	mov    r9,QWORD PTR [rsp+0x30]
  40d063:	jmp    40cbc1 <_start@@Base+0x5d51>
  40d068:	nop    DWORD PTR [rax+rax*1+0x0]
  40d070:	cmp    r10,0x2
  40d074:	jle    40cd90 <_start@@Base+0x5f20>
  40d07a:	mov    rsi,r8
  40d07d:	mov    ecx,0x2
  40d082:	mov    rdx,rbx
  40d085:	mov    rdi,rbp
  40d088:	mov    QWORD PTR [rsp+0x8],r8
  40d08d:	call   40a880 <_start@@Base+0x3a10>
  40d092:	mov    r8,QWORD PTR [rsp+0x8]
  40d097:	cmp    r8,rax
  40d09a:	je     40cd90 <_start@@Base+0x5f20>
  40d0a0:	sub    rsp,0x8
  40d0a4:	lea    rdi,[rip+0x285]        # 40d330 <_start@@Base+0x64c0>
  40d0ab:	push   rdi
  40d0ac:	mov    r8d,0x3
  40d0b2:	mov    ecx,0x1
  40d0b7:	mov    r9,QWORD PTR [rsp+0x30]
  40d0bc:	jmp    40cbc1 <_start@@Base+0x5d51>
  40d0c1:	nop    DWORD PTR [rax+0x0]
  40d0c8:	movbe  rax,QWORD PTR [r15+0x8]
  40d0ce:	jmp    40cff1 <_start@@Base+0x6181>
  40d0d3:	nop    DWORD PTR [rax+rax*1+0x0]
  40d0d8:	movbe  rax,QWORD PTR [r15+0x8]
  40d0de:	jmp    40ce3b <_start@@Base+0x5fcb>
  40d0e3:	nop    DWORD PTR [rax+rax*1+0x0]
  40d0e8:	mov    rsi,r15
  40d0eb:	mov    ecx,0x5
  40d0f0:	mov    rdx,rbx
  40d0f3:	mov    rdi,rbp
  40d0f6:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40d0fb:	mov    r15,rax
  40d0fe:	jmp    40cc19 <_start@@Base+0x5da9>
  40d103:	nop    DWORD PTR [rax+rax*1+0x0]
  40d108:	movbe  rax,QWORD PTR [r15+0x8]
  40d10e:	movabs rdx,0x73745f7479706500
  40d118:	mov    rcx,rax
  40d11b:	xor    cl,cl
  40d11d:	cmp    rcx,rdx
  40d120:	jne    40cd6d <_start@@Base+0x5efd>
  40d126:	cmp    r10,0x7
  40d12a:	jle    40cd90 <_start@@Base+0x5f20>
  40d130:	mov    rsi,r8
  40d133:	mov    ecx,0x7
  40d138:	mov    rdx,rbx
  40d13b:	mov    rdi,rbp
  40d13e:	mov    QWORD PTR [rsp+0x8],r8
  40d143:	call   40a880 <_start@@Base+0x3a10>
  40d148:	mov    r8,QWORD PTR [rsp+0x8]
  40d14d:	cmp    r8,rax
  40d150:	je     40cd90 <_start@@Base+0x5f20>
  40d156:	lea    rdi,[rip+0x1d3]        # 40d330 <_start@@Base+0x64c0>
  40d15d:	push   rdi
  40d15e:	lea    rdi,[rip+0x2d1bb]        # 43a320 <__data_start@@Base+0x260>
  40d165:	mov    r8d,0x3
  40d16b:	push   rdi
  40d16c:	mov    ecx,0x1
  40d171:	mov    r9,QWORD PTR [rsp+0x30]
  40d176:	jmp    40cfa9 <_start@@Base+0x6139>
  40d17b:	nop    DWORD PTR [rax+rax*1+0x0]
  40d180:	movbe  rax,QWORD PTR [r15+0x8]
  40d186:	movabs rdx,0x72735f7479706500
  40d190:	mov    rcx,rax
  40d193:	xor    cl,cl
  40d195:	cmp    rcx,rdx
  40d198:	jne    40cca4 <_start@@Base+0x5e34>
  40d19e:	cmp    r10,0x7
  40d1a2:	jle    40cd90 <_start@@Base+0x5f20>
  40d1a8:	mov    rsi,r8
  40d1ab:	mov    ecx,0x7
  40d1b0:	mov    rdx,rbx
  40d1b3:	mov    rdi,rbp
  40d1b6:	mov    QWORD PTR [rsp+0x8],r8
  40d1bb:	call   40a880 <_start@@Base+0x3a10>
  40d1c0:	mov    r8,QWORD PTR [rsp+0x8]
  40d1c5:	cmp    r8,rax
  40d1c8:	je     40cd90 <_start@@Base+0x5f20>
  40d1ce:	sub    rsp,0x8
  40d1d2:	lea    rdi,[rip+0xffffffffffff9e77]        # 407050 <_start@@Base+0x1e0>
  40d1d9:	push   rdi
  40d1da:	lea    rcx,[rip+0x14f]        # 40d330 <_start@@Base+0x64c0>
  40d1e1:	lea    rdi,[rip+0x2d0f8]        # 43a2e0 <__data_start@@Base+0x220>
  40d1e8:	push   rcx
  40d1e9:	mov    rsi,rax
  40d1ec:	mov    r8d,0x9
  40d1f2:	push   rdi
  40d1f3:	mov    ecx,0x4
  40d1f8:	mov    rdx,rbx
  40d1fb:	mov    r9,QWORD PTR [rsp+0x40]
  40d200:	mov    rdi,rbp
  40d203:	call   41fed0 <flatcc_json_parser_union_type_vector@@Base>
  40d208:	mov    rsi,rax
  40d20b:	add    rsp,0x20
  40d20f:	jmp    40cbd8 <_start@@Base+0x5d68>
  40d214:	nop    DWORD PTR [rax+0x0]
  40d218:	movbe  rax,QWORD PTR [r15+0x8]
  40d21e:	jmp    40cf39 <_start@@Base+0x60c9>
  40d223:	nop    DWORD PTR [rax+rax*1+0x0]
  40d228:	lea    r8,[r15+0x10]
  40d22c:	mov    r10,rbx
  40d22f:	sub    r10,r8
  40d232:	cmp    r10,0x7
  40d236:	ja     40d31d <_start@@Base+0x64ad>
  40d23c:	mov    rdi,r8
  40d23f:	mov    rsi,rbx
  40d242:	mov    QWORD PTR [rsp+0x8],r8
  40d247:	call   406f60 <_start@@Base+0xf0>
  40d24c:	mov    r8,QWORD PTR [rsp+0x8]
  40d251:	movabs rdx,0xffffff0000000000
  40d25b:	and    rax,rdx
  40d25e:	movabs rdx,0x7970650000000000
  40d268:	cmp    rax,rdx
  40d26b:	jne    40cd90 <_start@@Base+0x5f20>
  40d271:	cmp    r10,0x3
  40d275:	jle    40cd90 <_start@@Base+0x5f20>
  40d27b:	mov    rsi,r8
  40d27e:	mov    ecx,0x3
  40d283:	mov    rdx,rbx
  40d286:	mov    rdi,rbp
  40d289:	mov    QWORD PTR [rsp+0x8],r8
  40d28e:	call   40a880 <_start@@Base+0x3a10>
  40d293:	mov    r8,QWORD PTR [rsp+0x8]
  40d298:	cmp    r8,rax
  40d29b:	je     40cd90 <_start@@Base+0x5f20>
  40d2a1:	lea    rdi,[rip+0x88]        # 40d330 <_start@@Base+0x64c0>
  40d2a8:	push   rdi
  40d2a9:	lea    rcx,[rip+0x2d010]        # 43a2c0 <__data_start@@Base+0x200>
  40d2b0:	mov    r8d,0x1
  40d2b6:	push   rcx
  40d2b7:	xor    ecx,ecx
  40d2b9:	mov    r9,QWORD PTR [rsp+0x30]
  40d2be:	jmp    40cfa9 <_start@@Base+0x6139>
  40d2c3:	nop    DWORD PTR [rax+rax*1+0x0]
  40d2c8:	cmp    r10,0x6
  40d2cc:	jle    40cd90 <_start@@Base+0x5f20>
  40d2d2:	mov    rsi,r8
  40d2d5:	mov    ecx,0x6
  40d2da:	mov    rdx,rbx
  40d2dd:	mov    rdi,rbp
  40d2e0:	mov    QWORD PTR [rsp+0x8],r8
  40d2e5:	call   40a880 <_start@@Base+0x3a10>
  40d2ea:	mov    r8,QWORD PTR [rsp+0x8]
  40d2ef:	cmp    r8,rax
  40d2f2:	je     40cd90 <_start@@Base+0x5f20>
  40d2f8:	lea    rcx,[rip+0x31]        # 40d330 <_start@@Base+0x64c0>
  40d2ff:	push   rcx
  40d300:	lea    rdi,[rip+0x2cf99]        # 43a2a0 <__data_start@@Base+0x1e0>
  40d307:	mov    r8d,0x5
  40d30d:	push   rdi
  40d30e:	mov    ecx,0x2
  40d313:	mov    r9,QWORD PTR [rsp+0x30]
  40d318:	jmp    40cfa9 <_start@@Base+0x6139>
  40d31d:	movbe  rax,QWORD PTR [r15+0x10]
  40d323:	jmp    40d251 <_start@@Base+0x63e1>
  40d328:	call   4061a0 <__stack_chk_fail@plt>
  40d32d:	nop    DWORD PTR [rax]
  40d330:	endbr64 
  40d334:	push   r15
  40d336:	push   r14
  40d338:	mov    r14,rsi
  40d33b:	push   r13
  40d33d:	push   r12
  40d33f:	mov    r12,r8
  40d342:	push   rbp
  40d343:	mov    rbp,rdi
  40d346:	push   rbx
  40d347:	mov    rbx,rdx
  40d34a:	sub    rsp,0x48
  40d34e:	mov    rax,QWORD PTR fs:0x28
  40d357:	mov    QWORD PTR [rsp+0x38],rax
  40d35c:	xor    eax,eax
  40d35e:	mov    DWORD PTR [r8],0x0
  40d365:	cmp    cl,0x9
  40d368:	je     40d430 <_start@@Base+0x65c0>
  40d36e:	ja     40d3e0 <_start@@Base+0x6570>
  40d370:	cmp    cl,0x2
  40d373:	je     40d6f0 <_start@@Base+0x6880>
  40d379:	cmp    cl,0x8
  40d37c:	je     40d470 <_start@@Base+0x6600>
  40d382:	test   cl,cl
  40d384:	je     40d6c0 <_start@@Base+0x6850>
  40d38a:	test   BYTE PTR [rbp+0x10],0x1
  40d38e:	jne    40d450 <_start@@Base+0x65e0>
  40d394:	mov    ecx,0xf
  40d399:	mov    rdx,rbx
  40d39c:	mov    rsi,r14
  40d39f:	mov    rdi,rbp
  40d3a2:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40d3a7:	mov    r15,rax
  40d3aa:	nop    WORD PTR [rax+rax*1+0x0]
  40d3b0:	mov    rdx,QWORD PTR [rsp+0x38]
  40d3b5:	xor    rdx,QWORD PTR fs:0x28
  40d3be:	mov    rax,r15
  40d3c1:	jne    40db47 <_start@@Base+0x6cd7>
  40d3c7:	add    rsp,0x48
  40d3cb:	pop    rbx
  40d3cc:	pop    rbp
  40d3cd:	pop    r12
  40d3cf:	pop    r13
  40d3d1:	pop    r14
  40d3d3:	pop    r15
  40d3d5:	ret    
  40d3d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d3e0:	cmp    cl,0xb
  40d3e3:	je     40d3ec <_start@@Base+0x657c>
  40d3e5:	jb     40d430 <_start@@Base+0x65c0>
  40d3e7:	cmp    cl,0xff
  40d3ea:	jne    40d38a <_start@@Base+0x651a>
  40d3ec:	mov    rcx,r12
  40d3ef:	mov    rdx,rbx
  40d3f2:	mov    rsi,r14
  40d3f5:	mov    rdi,rbp
  40d3f8:	call   41f7a0 <flatcc_json_parser_build_string@@Base>
  40d3fd:	mov    r15,rax
  40d400:	mov    edx,DWORD PTR [rbp+0x20]
  40d403:	test   edx,edx
  40d405:	jne    40d3b0 <_start@@Base+0x6540>
  40d407:	mov    eax,DWORD PTR [r12]
  40d40b:	test   eax,eax
  40d40d:	jne    40d3b0 <_start@@Base+0x6540>
  40d40f:	mov    rsi,r15
  40d412:	mov    ecx,0x21
  40d417:	mov    rdx,rbx
  40d41a:	mov    rdi,rbp
  40d41d:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40d422:	mov    r15,rax
  40d425:	jmp    40d3b0 <_start@@Base+0x6540>
  40d427:	nop    WORD PTR [rax+rax*1+0x0]
  40d430:	mov    rdx,rbx
  40d433:	mov    rcx,r12
  40d436:	mov    rsi,r14
  40d439:	mov    rdi,rbp
  40d43c:	call   40c110 <_start@@Base+0x52a0>
  40d441:	mov    edx,DWORD PTR [rbp+0x20]
  40d444:	mov    r15,rax
  40d447:	test   edx,edx
  40d449:	je     40d407 <_start@@Base+0x6597>
  40d44b:	jmp    40d3b0 <_start@@Base+0x6540>
  40d450:	mov    rdx,rbx
  40d453:	mov    rsi,r14
  40d456:	mov    rdi,rbp
  40d459:	call   41e590 <flatcc_json_parser_generic_json@@Base>
  40d45e:	mov    r15,rax
  40d461:	jmp    40d3b0 <_start@@Base+0x6540>
  40d466:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d470:	mov    rdi,QWORD PTR [rdi]
  40d473:	mov    edx,0x2
  40d478:	mov    esi,0x2
  40d47d:	call   417af0 <flatcc_builder_start_struct@@Base>
  40d482:	mov    QWORD PTR [rsp+0x8],rax
  40d487:	test   rax,rax
  40d48a:	je     40daa0 <_start@@Base+0x6c30>
  40d490:	lea    r13,[rsp+0x28]
  40d495:	mov    rcx,r13
  40d498:	mov    rdx,rbx
  40d49b:	mov    rsi,r14
  40d49e:	mov    rdi,rbp
  40d4a1:	call   40a7e0 <_start@@Base+0x3970>
  40d4a6:	mov    r8d,DWORD PTR [rsp+0x28]
  40d4ab:	mov    r15,rax
  40d4ae:	test   r8d,r8d
  40d4b1:	je     40d63e <_start@@Base+0x67ce>
  40d4b7:	lea    rax,[rsp+0x24]
  40d4bc:	mov    QWORD PTR [rsp+0x18],rax
  40d4c1:	nop    DWORD PTR [rax+0x0]
  40d4c8:	cmp    rbx,r15
  40d4cb:	je     40d4e8 <_start@@Base+0x6678>
  40d4cd:	movzx  eax,BYTE PTR [r15]
  40d4d1:	cmp    al,0x22
  40d4d3:	je     40d6a0 <_start@@Base+0x6830>
  40d4d9:	cmp    al,0x2e
  40d4db:	je     40d9d0 <_start@@Base+0x6b60>
  40d4e1:	mov    DWORD PTR [rbp+0x14],0x1
  40d4e8:	mov    rax,rbx
  40d4eb:	sub    rax,r15
  40d4ee:	cmp    rax,0x7
  40d4f2:	ja     40d678 <_start@@Base+0x6808>
  40d4f8:	mov    rsi,rbx
  40d4fb:	mov    rdi,r15
  40d4fe:	call   406f60 <_start@@Base+0xf0>
  40d503:	movabs rdx,0x686169725f6c656e
  40d50d:	cmp    rax,rdx
  40d510:	jne    40d610 <_start@@Base+0x67a0>
  40d516:	lea    r14,[r15+0x8]
  40d51a:	mov    r10,rbx
  40d51d:	sub    r10,r14
  40d520:	cmp    r10,0x7
  40d524:	ja     40d6b0 <_start@@Base+0x6840>
  40d52a:	mov    rsi,rbx
  40d52d:	mov    rdi,r14
  40d530:	call   406f60 <_start@@Base+0xf0>
  40d535:	movabs rsi,0xffffff0000000000
  40d53f:	and    rax,rsi
  40d542:	movabs rdi,0x6774680000000000
  40d54c:	cmp    rax,rdi
  40d54f:	jne    40d688 <_start@@Base+0x6818>
  40d555:	cmp    r10,0x3
  40d559:	jle    40d688 <_start@@Base+0x6818>
  40d55f:	mov    ecx,0x3
  40d564:	mov    rdx,rbx
  40d567:	mov    rsi,r14
  40d56a:	mov    rdi,rbp
  40d56d:	call   40a880 <_start@@Base+0x3a10>
  40d572:	cmp    r14,rax
  40d575:	je     40d688 <_start@@Base+0x6818>
  40d57b:	xor    edi,edi
  40d57d:	mov    WORD PTR [rsp+0x24],di
  40d582:	mov    QWORD PTR [rsp+0x30],0x0
  40d58b:	mov    DWORD PTR [rsp+0x2c],0x0
  40d593:	cmp    rbx,rax
  40d596:	je     40d9f0 <_start@@Base+0x6b80>
  40d59c:	lea    rcx,[rsp+0x2c]
  40d5a1:	lea    r8,[rsp+0x30]
  40d5a6:	mov    rdx,rbx
  40d5a9:	mov    rsi,rax
  40d5ac:	mov    rdi,rbp
  40d5af:	mov    QWORD PTR [rsp+0x10],rax
  40d5b4:	call   41f220 <flatcc_json_parser_integer@@Base>
  40d5b9:	mov    r10,QWORD PTR [rsp+0x10]
  40d5be:	mov    r15,rax
  40d5c1:	cmp    r10,rax
  40d5c4:	jne    40da00 <_start@@Base+0x6b90>
  40d5ca:	mov    r8,QWORD PTR [rsp+0x18]
  40d5cf:	lea    rcx,[rip+0x2cc8a]        # 43a260 <__data_start@@Base+0x1a0>
  40d5d6:	mov    rdx,rbx
  40d5d9:	mov    rsi,r15
  40d5dc:	mov    rdi,rbp
  40d5df:	call   40ba80 <_start@@Base+0x4c10>
  40d5e4:	cmp    rax,r15
  40d5e7:	je     40da6d <_start@@Base+0x6bfd>
  40d5ed:	cmp    rbx,rax
  40d5f0:	je     40da6d <_start@@Base+0x6bfd>
  40d5f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d600:	movzx  edx,WORD PTR [rsp+0x24]
  40d605:	mov    rcx,QWORD PTR [rsp+0x8]
  40d60a:	mov    WORD PTR [rcx],dx
  40d60d:	jmp    40d61e <_start@@Base+0x67ae>
  40d60f:	nop
  40d610:	mov    rdx,rbx
  40d613:	mov    rsi,r15
  40d616:	mov    rdi,rbp
  40d619:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40d61e:	mov    rcx,r13
  40d621:	mov    rdx,rbx
  40d624:	mov    rsi,rax
  40d627:	mov    rdi,rbp
  40d62a:	call   40c910 <_start@@Base+0x5aa0>
  40d62f:	mov    ecx,DWORD PTR [rsp+0x28]
  40d633:	mov    r15,rax
  40d636:	test   ecx,ecx
  40d638:	jne    40d4c8 <_start@@Base+0x6658>
  40d63e:	cmp    rbx,r15
  40d641:	je     40d658 <_start@@Base+0x67e8>
  40d643:	mov    rdi,QWORD PTR [rbp+0x0]
  40d647:	call   417bb0 <flatcc_builder_end_struct@@Base>
  40d64c:	mov    DWORD PTR [r12],eax
  40d650:	test   eax,eax
  40d652:	jne    40d3b0 <_start@@Base+0x6540>
  40d658:	mov    rsi,r15
  40d65b:	mov    ecx,0x21
  40d660:	mov    rdx,rbx
  40d663:	mov    rdi,rbp
  40d666:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40d66b:	mov    r15,rax
  40d66e:	jmp    40d400 <_start@@Base+0x6590>
  40d673:	nop    DWORD PTR [rax+rax*1+0x0]
  40d678:	movbe  rax,QWORD PTR [r15]
  40d67d:	jmp    40d503 <_start@@Base+0x6693>
  40d682:	nop    WORD PTR [rax+rax*1+0x0]
  40d688:	mov    rdx,rbx
  40d68b:	mov    rsi,r14
  40d68e:	mov    rdi,rbp
  40d691:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40d696:	jmp    40d61e <_start@@Base+0x67ae>
  40d698:	nop    DWORD PTR [rax+rax*1+0x0]
  40d6a0:	inc    r15
  40d6a3:	mov    DWORD PTR [rbp+0x14],0x0
  40d6aa:	jmp    40d4e8 <_start@@Base+0x6678>
  40d6af:	nop
  40d6b0:	movbe  rax,QWORD PTR [r15+0x8]
  40d6b6:	jmp    40d535 <_start@@Base+0x66c5>
  40d6bb:	nop    DWORD PTR [rax+rax*1+0x0]
  40d6c0:	mov    rax,rdx
  40d6c3:	sub    rax,rsi
  40d6c6:	cmp    rax,0x3
  40d6ca:	jle    40d6dc <_start@@Base+0x686c>
  40d6cc:	cmp    DWORD PTR [rsi],0x6c6c756e
  40d6d2:	lea    r15,[rsi+0x4]
  40d6d6:	je     40d3b0 <_start@@Base+0x6540>
  40d6dc:	mov    ecx,0x1a
  40d6e1:	jmp    40d399 <_start@@Base+0x6529>
  40d6e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d6f0:	mov    rdi,QWORD PTR [rdi]
  40d6f3:	mov    esi,0x1
  40d6f8:	call   418560 <flatcc_builder_start_table@@Base>
  40d6fd:	test   eax,eax
  40d6ff:	jne    40d928 <_start@@Base+0x6ab8>
  40d705:	lea    r13,[rsp+0x24]
  40d70a:	mov    rsi,r14
  40d70d:	mov    rcx,r13
  40d710:	mov    rdx,rbx
  40d713:	mov    rdi,rbp
  40d716:	call   40a7e0 <_start@@Base+0x3970>
  40d71b:	mov    r15d,DWORD PTR [rsp+0x24]
  40d720:	mov    r14,rax
  40d723:	test   r15d,r15d
  40d726:	je     40d91b <_start@@Base+0x6aab>
  40d72c:	movabs r15,0x73776f72645f6174
  40d736:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d740:	cmp    rbx,r14
  40d743:	je     40d760 <_start@@Base+0x68f0>
  40d745:	movzx  eax,BYTE PTR [r14]
  40d749:	cmp    al,0x22
  40d74b:	je     40d978 <_start@@Base+0x6b08>
  40d751:	cmp    al,0x2e
  40d753:	je     40d9b0 <_start@@Base+0x6b40>
  40d759:	mov    DWORD PTR [rbp+0x14],0x1
  40d760:	mov    rax,rbx
  40d763:	sub    rax,r14
  40d766:	cmp    rax,0x7
  40d76a:	ja     40d968 <_start@@Base+0x6af8>
  40d770:	mov    rsi,rbx
  40d773:	mov    rdi,r14
  40d776:	call   406f60 <_start@@Base+0xf0>
  40d77b:	cmp    rax,r15
  40d77e:	jne    40d8e8 <_start@@Base+0x6a78>
  40d784:	lea    r8,[r14+0x8]
  40d788:	mov    rax,rbx
  40d78b:	sub    rax,r8
  40d78e:	cmp    rax,0x7
  40d792:	ja     40d990 <_start@@Base+0x6b20>
  40d798:	mov    rsi,rbx
  40d79b:	mov    rdi,r8
  40d79e:	call   406f60 <_start@@Base+0xf0>
  40d7a3:	movabs rdx,0x7461636b5f64616d
  40d7ad:	cmp    rax,rdx
  40d7b0:	jne    40d950 <_start@@Base+0x6ae0>
  40d7b6:	lea    r8,[r14+0x10]
  40d7ba:	mov    r10,rbx
  40d7bd:	sub    r10,r8
  40d7c0:	cmp    r10,0x7
  40d7c4:	ja     40d9a0 <_start@@Base+0x6b30>
  40d7ca:	mov    rdi,r8
  40d7cd:	mov    rsi,rbx
  40d7d0:	mov    QWORD PTR [rsp+0x8],r8
  40d7d5:	call   406f60 <_start@@Base+0xf0>
  40d7da:	mov    r8,QWORD PTR [rsp+0x8]
  40d7df:	movabs rsi,0xffffff0000000000
  40d7e9:	and    rax,rsi
  40d7ec:	movabs rdi,0x6167650000000000
  40d7f6:	cmp    rax,rdi
  40d7f9:	jne    40d950 <_start@@Base+0x6ae0>
  40d7ff:	cmp    r10,0x3
  40d803:	jle    40d950 <_start@@Base+0x6ae0>
  40d809:	mov    rsi,r8
  40d80c:	mov    ecx,0x3
  40d811:	mov    rdx,rbx
  40d814:	mov    rdi,rbp
  40d817:	mov    QWORD PTR [rsp+0x8],r8
  40d81c:	call   40a880 <_start@@Base+0x3a10>
  40d821:	mov    r8,QWORD PTR [rsp+0x8]
  40d826:	cmp    r8,rax
  40d829:	je     40d950 <_start@@Base+0x6ae0>
  40d82f:	mov    DWORD PTR [rsp+0x28],0x0
  40d837:	mov    QWORD PTR [rsp+0x30],0x0
  40d840:	mov    DWORD PTR [rsp+0x2c],0x0
  40d848:	cmp    rbx,rax
  40d84b:	je     40da90 <_start@@Base+0x6c20>
  40d851:	lea    rcx,[rsp+0x2c]
  40d856:	lea    r8,[rsp+0x30]
  40d85b:	mov    rdx,rbx
  40d85e:	mov    rsi,rax
  40d861:	mov    rdi,rbp
  40d864:	mov    QWORD PTR [rsp+0x8],rax
  40d869:	call   41f220 <flatcc_json_parser_integer@@Base>
  40d86e:	mov    r10,QWORD PTR [rsp+0x8]
  40d873:	mov    r14,rax
  40d876:	cmp    r10,rax
  40d879:	jne    40dab0 <_start@@Base+0x6c40>
  40d87f:	lea    r8,[rsp+0x28]
  40d884:	lea    rcx,[rip+0x2c9f5]        # 43a280 <__data_start@@Base+0x1c0>
  40d88b:	mov    rdx,rbx
  40d88e:	mov    rsi,r14
  40d891:	mov    rdi,rbp
  40d894:	call   40b1c0 <_start@@Base+0x4350>
  40d899:	cmp    rax,r14
  40d89c:	je     40da88 <_start@@Base+0x6c18>
  40d8a2:	cmp    rbx,rax
  40d8a5:	je     40da88 <_start@@Base+0x6c18>
  40d8ab:	mov    edx,DWORD PTR [rsp+0x28]
  40d8af:	mov    r14,rax
  40d8b2:	nop    WORD PTR [rax+rax*1+0x0]
  40d8b8:	test   edx,edx
  40d8ba:	jne    40d8c2 <_start@@Base+0x6a52>
  40d8bc:	test   BYTE PTR [rbp+0x10],0x2
  40d8c0:	je     40d8f9 <_start@@Base+0x6a89>
  40d8c2:	mov    rdi,QWORD PTR [rbp+0x0]
  40d8c6:	xor    esi,esi
  40d8c8:	mov    ecx,0x4
  40d8cd:	mov    edx,0x4
  40d8d2:	call   419de0 <flatcc_builder_table_add@@Base>
  40d8d7:	test   rax,rax
  40d8da:	je     40d928 <_start@@Base+0x6ab8>
  40d8dc:	mov    edx,DWORD PTR [rsp+0x28]
  40d8e0:	mov    DWORD PTR [rax],edx
  40d8e2:	jmp    40d8f9 <_start@@Base+0x6a89>
  40d8e4:	nop    DWORD PTR [rax+0x0]
  40d8e8:	mov    rsi,r14
  40d8eb:	mov    rdx,rbx
  40d8ee:	mov    rdi,rbp
  40d8f1:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40d8f6:	mov    r14,rax
  40d8f9:	mov    rsi,r14
  40d8fc:	mov    rcx,r13
  40d8ff:	mov    rdx,rbx
  40d902:	mov    rdi,rbp
  40d905:	call   40c910 <_start@@Base+0x5aa0>
  40d90a:	mov    r10d,DWORD PTR [rsp+0x24]
  40d90f:	mov    r14,rax
  40d912:	test   r10d,r10d
  40d915:	jne    40d740 <_start@@Base+0x68d0>
  40d91b:	mov    r9d,DWORD PTR [rbp+0x20]
  40d91f:	test   r9d,r9d
  40d922:	je     40da50 <_start@@Base+0x6be0>
  40d928:	mov    rdx,rbx
  40d92b:	mov    ecx,0x21
  40d930:	mov    rsi,r14
  40d933:	mov    rdi,rbp
  40d936:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40d93b:	mov    edx,DWORD PTR [rbp+0x20]
  40d93e:	mov    r15,rax
  40d941:	test   edx,edx
  40d943:	je     40d407 <_start@@Base+0x6597>
  40d949:	jmp    40d3b0 <_start@@Base+0x6540>
  40d94e:	xchg   ax,ax
  40d950:	mov    rdx,rbx
  40d953:	mov    rsi,r8
  40d956:	mov    rdi,rbp
  40d959:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40d95e:	mov    r14,rax
  40d961:	jmp    40d8f9 <_start@@Base+0x6a89>
  40d963:	nop    DWORD PTR [rax+rax*1+0x0]
  40d968:	movbe  rax,QWORD PTR [r14]
  40d96d:	jmp    40d77b <_start@@Base+0x690b>
  40d972:	nop    WORD PTR [rax+rax*1+0x0]
  40d978:	inc    r14
  40d97b:	mov    DWORD PTR [rbp+0x14],0x0
  40d982:	jmp    40d760 <_start@@Base+0x68f0>
  40d987:	nop    WORD PTR [rax+rax*1+0x0]
  40d990:	movbe  rax,QWORD PTR [r14+0x8]
  40d996:	jmp    40d7a3 <_start@@Base+0x6933>
  40d99b:	nop    DWORD PTR [rax+rax*1+0x0]
  40d9a0:	movbe  rax,QWORD PTR [r14+0x10]
  40d9a6:	jmp    40d7df <_start@@Base+0x696f>
  40d9ab:	nop    DWORD PTR [rax+rax*1+0x0]
  40d9b0:	mov    rsi,r14
  40d9b3:	mov    ecx,0x5
  40d9b8:	mov    rdx,rbx
  40d9bb:	mov    rdi,rbp
  40d9be:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40d9c3:	mov    r14,rax
  40d9c6:	jmp    40d760 <_start@@Base+0x68f0>
  40d9cb:	nop    DWORD PTR [rax+rax*1+0x0]
  40d9d0:	mov    rsi,r15
  40d9d3:	mov    ecx,0x5
  40d9d8:	mov    rdx,rbx
  40d9db:	mov    rdi,rbp
  40d9de:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40d9e3:	mov    r15,rax
  40d9e6:	jmp    40d4e8 <_start@@Base+0x6678>
  40d9eb:	nop    DWORD PTR [rax+rax*1+0x0]
  40d9f0:	mov    r15,rbx
  40d9f3:	jmp    40d5ca <_start@@Base+0x675a>
  40d9f8:	nop    DWORD PTR [rax+rax*1+0x0]
  40da00:	mov    esi,DWORD PTR [rsp+0x2c]
  40da04:	test   esi,esi
  40da06:	jne    40daf8 <_start@@Base+0x6c88>
  40da0c:	mov    rcx,QWORD PTR [rsp+0x30]
  40da11:	mov    edx,ecx
  40da13:	cmp    rcx,0xffff
  40da1a:	jbe    40d605 <_start@@Base+0x6795>
  40da20:	mov    ecx,0x7
  40da25:	mov    rdx,rbx
  40da28:	mov    rsi,rax
  40da2b:	mov    rdi,rbp
  40da2e:	mov    QWORD PTR [rsp+0x10],r10
  40da33:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40da38:	mov    r10,QWORD PTR [rsp+0x10]
  40da3d:	cmp    r10,rax
  40da40:	jne    40d600 <_start@@Base+0x6790>
  40da46:	mov    r15,r10
  40da49:	jmp    40d5ca <_start@@Base+0x675a>
  40da4e:	xchg   ax,ax
  40da50:	mov    rdi,QWORD PTR [rbp+0x0]
  40da54:	mov    r15,r14
  40da57:	call   418ee0 <flatcc_builder_end_table@@Base>
  40da5c:	mov    DWORD PTR [r12],eax
  40da60:	test   eax,eax
  40da62:	jne    40d400 <_start@@Base+0x6590>
  40da68:	jmp    40d928 <_start@@Base+0x6ab8>
  40da6d:	mov    ecx,0x21
  40da72:	mov    rdx,rbx
  40da75:	mov    rsi,rax
  40da78:	mov    rdi,rbp
  40da7b:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40da80:	mov    r15,rax
  40da83:	jmp    40d63e <_start@@Base+0x67ce>
  40da88:	mov    r14,rax
  40da8b:	jmp    40d928 <_start@@Base+0x6ab8>
  40da90:	mov    r14,rbx
  40da93:	jmp    40d87f <_start@@Base+0x6a0f>
  40da98:	nop    DWORD PTR [rax+rax*1+0x0]
  40daa0:	mov    r15,r14
  40daa3:	jmp    40d658 <_start@@Base+0x67e8>
  40daa8:	nop    DWORD PTR [rax+rax*1+0x0]
  40dab0:	mov    r11d,DWORD PTR [rsp+0x2c]
  40dab5:	mov    rax,QWORD PTR [rsp+0x30]
  40daba:	test   r11d,r11d
  40dabd:	je     40dae0 <_start@@Base+0x6c70>
  40dabf:	mov    edx,0x80000000
  40dac4:	mov    ecx,0x8
  40dac9:	cmp    rax,rdx
  40dacc:	ja     40db1f <_start@@Base+0x6caf>
  40dace:	mov    edx,eax
  40dad0:	neg    edx
  40dad2:	mov    DWORD PTR [rsp+0x28],edx
  40dad6:	jmp    40d8b8 <_start@@Base+0x6a48>
  40dadb:	nop    DWORD PTR [rax+rax*1+0x0]
  40dae0:	cmp    rax,0x7fffffff
  40dae6:	ja     40db15 <_start@@Base+0x6ca5>
  40dae8:	mov    edx,eax
  40daea:	mov    DWORD PTR [rsp+0x28],eax
  40daee:	jmp    40d8b8 <_start@@Base+0x6a48>
  40daf3:	nop    DWORD PTR [rax+rax*1+0x0]
  40daf8:	mov    ecx,0x8
  40dafd:	mov    rdx,rbx
  40db00:	mov    rsi,rax
  40db03:	mov    rdi,rbp
  40db06:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40db0b:	mov    r10,QWORD PTR [rsp+0x10]
  40db10:	jmp    40da3d <_start@@Base+0x6bcd>
  40db15:	mov    QWORD PTR [rsp+0x8],r10
  40db1a:	mov    ecx,0x7
  40db1f:	mov    rsi,r14
  40db22:	mov    rdx,rbx
  40db25:	mov    rdi,rbp
  40db28:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40db2d:	mov    r10,QWORD PTR [rsp+0x8]
  40db32:	mov    r14,rax
  40db35:	cmp    r10,rax
  40db38:	je     40d87f <_start@@Base+0x6a0f>
  40db3e:	mov    edx,DWORD PTR [rsp+0x28]
  40db42:	jmp    40d8b8 <_start@@Base+0x6a48>
  40db47:	call   4061a0 <__stack_chk_fail@plt>
  40db4c:	nop    DWORD PTR [rax+0x0]
  40db50:	push   r15
  40db52:	push   r14
  40db54:	push   r13
  40db56:	mov    r13,rdx
  40db59:	push   r12
  40db5b:	push   rbp
  40db5c:	push   rbx
  40db5d:	mov    rbx,rdi
  40db60:	sub    rsp,0x38
  40db64:	mov    QWORD PTR [rsp],rcx
  40db68:	mov    rax,QWORD PTR fs:0x28
  40db71:	mov    QWORD PTR [rsp+0x28],rax
  40db76:	xor    eax,eax
  40db78:	cmp    rsi,rdx
  40db7b:	je     40db82 <_start@@Base+0x6d12>
  40db7d:	cmp    BYTE PTR [rsi],0x7b
  40db80:	je     40dbc0 <_start@@Base+0x6d50>
  40db82:	mov    ecx,0x15
  40db87:	mov    rdx,r13
  40db8a:	mov    rdi,rbx
  40db8d:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40db92:	mov    r9,rax
  40db95:	nop    DWORD PTR [rax]
  40db98:	mov    rdi,QWORD PTR [rsp+0x28]
  40db9d:	xor    rdi,QWORD PTR fs:0x28
  40dba6:	mov    rax,r9
  40dba9:	jne    40e383 <_start@@Base+0x7513>
  40dbaf:	add    rsp,0x38
  40dbb3:	pop    rbx
  40dbb4:	pop    rbp
  40dbb5:	pop    r12
  40dbb7:	pop    r13
  40dbb9:	pop    r14
  40dbbb:	pop    r15
  40dbbd:	ret    
  40dbbe:	xchg   ax,ax
  40dbc0:	lea    r15,[rsi+0x1]
  40dbc4:	mov    rax,rdx
  40dbc7:	sub    rax,r15
  40dbca:	cmp    rax,0x1
  40dbce:	jle    40dbdc <_start@@Base+0x6d6c>
  40dbd0:	cmp    BYTE PTR [rsi+0x1],0x20
  40dbd4:	jg     40dbed <_start@@Base+0x6d7d>
  40dbd6:	je     40e347 <_start@@Base+0x74d7>
  40dbdc:	mov    rsi,r15
  40dbdf:	mov    rdx,r13
  40dbe2:	mov    rdi,rbx
  40dbe5:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40dbea:	mov    r15,rax
  40dbed:	cmp    r13,r15
  40dbf0:	je     40dbfc <_start@@Base+0x6d8c>
  40dbf2:	cmp    BYTE PTR [r15],0x7d
  40dbf6:	je     40e35a <_start@@Base+0x74ea>
  40dbfc:	movabs r12,0xff00000000000000
  40dc06:	movabs rbp,0x6200000000000000
  40dc10:	lea    r14,[rip+0x1e431]        # 42c048 <_IO_stdin_used@@Base+0x48>
  40dc17:	nop    WORD PTR [rax+rax*1+0x0]
  40dc20:	cmp    r13,r15
  40dc23:	je     40ddf8 <_start@@Base+0x6f88>
  40dc29:	movzx  eax,BYTE PTR [r15]
  40dc2d:	cmp    al,0x22
  40dc2f:	je     40dfd0 <_start@@Base+0x7160>
  40dc35:	cmp    al,0x2e
  40dc37:	je     40e100 <_start@@Base+0x7290>
  40dc3d:	mov    DWORD PTR [rbx+0x14],0x1
  40dc44:	mov    rsi,r13
  40dc47:	sub    rsi,r15
  40dc4a:	cmp    rsi,0x7
  40dc4e:	jbe    40df28 <_start@@Base+0x70b8>
  40dc54:	movbe  rax,QWORD PTR [r15]
  40dc59:	and    rax,r12
  40dc5c:	cmp    rax,rbp
  40dc5f:	je     40de10 <_start@@Base+0x6fa0>
  40dc65:	movabs rdi,0x6100000000000000
  40dc6f:	cmp    rax,rdi
  40dc72:	jne    40ddf8 <_start@@Base+0x6f88>
  40dc78:	cmp    rsi,0x1
  40dc7c:	jle    40ddf8 <_start@@Base+0x6f88>
  40dc82:	mov    edi,DWORD PTR [rbx+0x14]
  40dc85:	movzx  eax,BYTE PTR [r15+0x1]
  40dc8a:	test   edi,edi
  40dc8c:	je     40e0c8 <_start@@Base+0x7258>
  40dc92:	cmp    al,0x20
  40dc94:	jle    40dc9e <_start@@Base+0x6e2e>
  40dc96:	cmp    al,0x3a
  40dc98:	jne    40ddf8 <_start@@Base+0x6f88>
  40dc9e:	mov    DWORD PTR [rbx+0x14],0x0
  40dca5:	lea    rsi,[r15+0x1]
  40dca9:	mov    rax,r13
  40dcac:	sub    rax,rsi
  40dcaf:	cmp    rax,0x1
  40dcb3:	jle    40dcc0 <_start@@Base+0x6e50>
  40dcb5:	cmp    BYTE PTR [rsi],0x20
  40dcb8:	jg     40dcce <_start@@Base+0x6e5e>
  40dcba:	je     40e288 <_start@@Base+0x7418>
  40dcc0:	mov    rdx,r13
  40dcc3:	mov    rdi,rbx
  40dcc6:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40dccb:	mov    rsi,rax
  40dcce:	cmp    r13,rsi
  40dcd1:	je     40dcdc <_start@@Base+0x6e6c>
  40dcd3:	cmp    BYTE PTR [rsi],0x3a
  40dcd6:	je     40e2e0 <_start@@Base+0x7470>
  40dcdc:	mov    ecx,0x4
  40dce1:	mov    rdx,r13
  40dce4:	mov    rdi,rbx
  40dce7:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40dcec:	mov    r11,rax
  40dcef:	cmp    r11,r15
  40dcf2:	je     40ddf8 <_start@@Base+0x6f88>
  40dcf8:	xor    esi,esi
  40dcfa:	mov    WORD PTR [rsp+0x1a],si
  40dcff:	mov    QWORD PTR [rsp+0x20],0x0
  40dd08:	mov    DWORD PTR [rsp+0x1c],0x0
  40dd10:	cmp    r13,r11
  40dd13:	je     40e0f0 <_start@@Base+0x7280>
  40dd19:	mov    rsi,r11
  40dd1c:	lea    rcx,[rsp+0x1c]
  40dd21:	lea    r8,[rsp+0x20]
  40dd26:	mov    rdx,r13
  40dd29:	mov    rdi,rbx
  40dd2c:	mov    QWORD PTR [rsp+0x8],r11
  40dd31:	call   41f220 <flatcc_json_parser_integer@@Base>
  40dd36:	mov    r11,QWORD PTR [rsp+0x8]
  40dd3b:	mov    r9,rax
  40dd3e:	cmp    r11,rax
  40dd41:	jne    40e178 <_start@@Base+0x7308>
  40dd47:	mov    rsi,r9
  40dd4a:	lea    r8,[rsp+0x1a]
  40dd4f:	lea    rcx,[rip+0x2c40a]        # 43a160 <__data_start@@Base+0xa0>
  40dd56:	mov    rdx,r13
  40dd59:	mov    rdi,rbx
  40dd5c:	mov    QWORD PTR [rsp+0x8],r9
  40dd61:	call   40b620 <_start@@Base+0x47b0>
  40dd66:	mov    r9,QWORD PTR [rsp+0x8]
  40dd6b:	cmp    rax,r9
  40dd6e:	je     40e32c <_start@@Base+0x74bc>
  40dd74:	cmp    r13,rax
  40dd77:	je     40e32c <_start@@Base+0x74bc>
  40dd7d:	movzx  edx,WORD PTR [rsp+0x1a]
  40dd82:	mov    r9,rax
  40dd85:	nop    DWORD PTR [rax]
  40dd88:	mov    rax,QWORD PTR [rsp]
  40dd8c:	mov    WORD PTR [rax],dx
  40dd8f:	nop
  40dd90:	mov    rax,r13
  40dd93:	sub    rax,r9
  40dd96:	cmp    rax,0x1
  40dd9a:	jle    40dda8 <_start@@Base+0x6f38>
  40dd9c:	cmp    BYTE PTR [r9],0x20
  40dda0:	jg     40ddb9 <_start@@Base+0x6f49>
  40dda2:	je     40e018 <_start@@Base+0x71a8>
  40dda8:	mov    rsi,r9
  40ddab:	mov    rdx,r13
  40ddae:	mov    rdi,rbx
  40ddb1:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40ddb6:	mov    r9,rax
  40ddb9:	cmp    r13,r9
  40ddbc:	je     40db98 <_start@@Base+0x6d28>
  40ddc2:	movzx  eax,BYTE PTR [r9]
  40ddc6:	cmp    al,0x2c
  40ddc8:	je     40e030 <_start@@Base+0x71c0>
  40ddce:	cmp    al,0x7d
  40ddd0:	je     40dfe0 <_start@@Base+0x7170>
  40ddd6:	mov    rsi,r9
  40ddd9:	mov    ecx,0xa
  40ddde:	mov    rdx,r13
  40dde1:	mov    rdi,rbx
  40dde4:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40dde9:	mov    r9,rax
  40ddec:	jmp    40db98 <_start@@Base+0x6d28>
  40ddf1:	nop    DWORD PTR [rax+0x0]
  40ddf8:	mov    rdx,r13
  40ddfb:	mov    rsi,r15
  40ddfe:	mov    rdi,rbx
  40de01:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40de06:	mov    r9,rax
  40de09:	jmp    40dd90 <_start@@Base+0x6f20>
  40de0b:	nop    DWORD PTR [rax+rax*1+0x0]
  40de10:	cmp    rsi,0x1
  40de14:	jle    40ddf8 <_start@@Base+0x6f88>
  40de16:	mov    r9d,DWORD PTR [rbx+0x14]
  40de1a:	movzx  eax,BYTE PTR [r15+0x1]
  40de1f:	test   r9d,r9d
  40de22:	je     40e0b0 <_start@@Base+0x7240>
  40de28:	cmp    al,0x20
  40de2a:	jle    40de30 <_start@@Base+0x6fc0>
  40de2c:	cmp    al,0x3a
  40de2e:	jne    40ddf8 <_start@@Base+0x6f88>
  40de30:	mov    DWORD PTR [rbx+0x14],0x0
  40de37:	lea    rsi,[r15+0x1]
  40de3b:	mov    rax,r13
  40de3e:	sub    rax,rsi
  40de41:	cmp    rax,0x1
  40de45:	jle    40de52 <_start@@Base+0x6fe2>
  40de47:	cmp    BYTE PTR [rsi],0x20
  40de4a:	jg     40de60 <_start@@Base+0x6ff0>
  40de4c:	je     40e270 <_start@@Base+0x7400>
  40de52:	mov    rdx,r13
  40de55:	mov    rdi,rbx
  40de58:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40de5d:	mov    rsi,rax
  40de60:	cmp    r13,rsi
  40de63:	je     40de6e <_start@@Base+0x6ffe>
  40de65:	cmp    BYTE PTR [rsi],0x3a
  40de68:	je     40e2a0 <_start@@Base+0x7430>
  40de6e:	mov    ecx,0x4
  40de73:	mov    rdx,r13
  40de76:	mov    rdi,rbx
  40de79:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40de7e:	mov    r11,rax
  40de81:	cmp    r11,r15
  40de84:	je     40ddf8 <_start@@Base+0x6f88>
  40de8a:	mov    BYTE PTR [rsp+0x1a],0x0
  40de8f:	mov    QWORD PTR [rsp+0x20],0x0
  40de98:	mov    DWORD PTR [rsp+0x1c],0x0
  40dea0:	cmp    r13,r11
  40dea3:	je     40e0e0 <_start@@Base+0x7270>
  40dea9:	mov    rsi,r11
  40deac:	lea    rcx,[rsp+0x1c]
  40deb1:	lea    r8,[rsp+0x20]
  40deb6:	mov    rdx,r13
  40deb9:	mov    rdi,rbx
  40debc:	mov    QWORD PTR [rsp+0x8],r11
  40dec1:	call   41f220 <flatcc_json_parser_integer@@Base>
  40dec6:	mov    r11,QWORD PTR [rsp+0x8]
  40decb:	mov    r9,rax
  40dece:	cmp    r11,rax
  40ded1:	jne    40e120 <_start@@Base+0x72b0>
  40ded7:	mov    rsi,r9
  40deda:	lea    r8,[rsp+0x1a]
  40dedf:	lea    rcx,[rip+0x2c29a]        # 43a180 <__data_start@@Base+0xc0>
  40dee6:	mov    rdx,r13
  40dee9:	mov    rdi,rbx
  40deec:	mov    QWORD PTR [rsp+0x8],r9
  40def1:	call   40b850 <_start@@Base+0x49e0>
  40def6:	mov    r9,QWORD PTR [rsp+0x8]
  40defb:	cmp    rax,r9
  40defe:	je     40e32c <_start@@Base+0x74bc>
  40df04:	cmp    r13,rax
  40df07:	je     40e32c <_start@@Base+0x74bc>
  40df0d:	movzx  edx,BYTE PTR [rsp+0x1a]
  40df12:	mov    r9,rax
  40df15:	nop    DWORD PTR [rax]
  40df18:	mov    rax,QWORD PTR [rsp]
  40df1c:	mov    BYTE PTR [rax+0x2],dl
  40df1f:	jmp    40dd90 <_start@@Base+0x6f20>
  40df24:	nop    DWORD PTR [rax+0x0]
  40df28:	movsxd rax,DWORD PTR [r14+rsi*4]
  40df2c:	add    rax,r14
  40df2f:	notrack jmp rax
  40df32:	nop    WORD PTR [rax+rax*1+0x0]
  40df38:	movsx  rcx,BYTE PTR [r15+0x6]
  40df3d:	shl    rcx,0x8
  40df41:	movsx  rdx,BYTE PTR [r15+0x5]
  40df46:	mov    rax,rdx
  40df49:	shl    rax,0x10
  40df4d:	or     rcx,rax
  40df50:	movsx  rdx,BYTE PTR [r15+0x4]
  40df55:	mov    rax,rdx
  40df58:	shl    rax,0x18
  40df5c:	or     rax,rcx
  40df5f:	movsx  rdx,BYTE PTR [r15+0x3]
  40df64:	shl    rdx,0x20
  40df68:	or     rax,rdx
  40df6b:	movsx  rdx,BYTE PTR [r15+0x2]
  40df70:	mov    rcx,rdx
  40df73:	shl    rcx,0x28
  40df77:	or     rcx,rax
  40df7a:	movsx  rdx,BYTE PTR [r15+0x1]
  40df7f:	mov    rax,rdx
  40df82:	shl    rax,0x30
  40df86:	or     rcx,rax
  40df89:	movsx  rdx,BYTE PTR [r15]
  40df8d:	mov    rax,rdx
  40df90:	shl    rax,0x38
  40df94:	or     rax,rcx
  40df97:	jmp    40dc59 <_start@@Base+0x6de9>
  40df9c:	nop    DWORD PTR [rax+0x0]
  40dfa0:	xor    ecx,ecx
  40dfa2:	jmp    40df41 <_start@@Base+0x70d1>
  40dfa4:	nop    DWORD PTR [rax+0x0]
  40dfa8:	xor    ecx,ecx
  40dfaa:	jmp    40df50 <_start@@Base+0x70e0>
  40dfac:	nop    DWORD PTR [rax+0x0]
  40dfb0:	xor    eax,eax
  40dfb2:	jmp    40df5f <_start@@Base+0x70ef>
  40dfb4:	nop    DWORD PTR [rax+0x0]
  40dfb8:	xor    eax,eax
  40dfba:	jmp    40df6b <_start@@Base+0x70fb>
  40dfbc:	nop    DWORD PTR [rax+0x0]
  40dfc0:	xor    ecx,ecx
  40dfc2:	jmp    40df7a <_start@@Base+0x710a>
  40dfc4:	nop    DWORD PTR [rax+0x0]
  40dfc8:	xor    ecx,ecx
  40dfca:	jmp    40df89 <_start@@Base+0x7119>
  40dfcc:	nop    DWORD PTR [rax+0x0]
  40dfd0:	inc    r15
  40dfd3:	mov    DWORD PTR [rbx+0x14],0x0
  40dfda:	jmp    40dc44 <_start@@Base+0x6dd4>
  40dfdf:	nop
  40dfe0:	lea    rsi,[r9+0x1]
  40dfe4:	mov    rax,r13
  40dfe7:	sub    rax,rsi
  40dfea:	cmp    rax,0x1
  40dfee:	jle    40e001 <_start@@Base+0x7191>
  40dff0:	cmp    BYTE PTR [r9+0x1],0x20
  40dff5:	jg     40e1d0 <_start@@Base+0x7360>
  40dffb:	je     40e1e0 <_start@@Base+0x7370>
  40e001:	mov    rdx,r13
  40e004:	mov    rdi,rbx
  40e007:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40e00c:	mov    r9,rax
  40e00f:	jmp    40db98 <_start@@Base+0x6d28>
  40e014:	nop    DWORD PTR [rax+0x0]
  40e018:	cmp    BYTE PTR [r9+0x1],0x20
  40e01d:	jle    40dda8 <_start@@Base+0x6f38>
  40e023:	inc    r9
  40e026:	jmp    40ddb9 <_start@@Base+0x6f49>
  40e02b:	nop    DWORD PTR [rax+rax*1+0x0]
  40e030:	lea    r15,[r9+0x1]
  40e034:	mov    rax,r13
  40e037:	sub    rax,r15
  40e03a:	cmp    rax,0x1
  40e03e:	jle    40e04d <_start@@Base+0x71dd>
  40e040:	cmp    BYTE PTR [r9+0x1],0x20
  40e045:	jg     40e05e <_start@@Base+0x71ee>
  40e047:	je     40e238 <_start@@Base+0x73c8>
  40e04d:	mov    rsi,r15
  40e050:	mov    rdx,r13
  40e053:	mov    rdi,rbx
  40e056:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40e05b:	mov    r15,rax
  40e05e:	cmp    r13,r15
  40e061:	je     40e250 <_start@@Base+0x73e0>
  40e067:	cmp    BYTE PTR [r15],0x7d
  40e06b:	jne    40dc20 <_start@@Base+0x6db0>
  40e071:	lea    r9,[r15+0x1]
  40e075:	mov    rax,r13
  40e078:	sub    rax,r9
  40e07b:	cmp    rax,0x1
  40e07f:	jle    40e092 <_start@@Base+0x7222>
  40e081:	cmp    BYTE PTR [r15+0x1],0x20
  40e086:	jg     40db98 <_start@@Base+0x6d28>
  40e08c:	je     40e318 <_start@@Base+0x74a8>
  40e092:	mov    rsi,r9
  40e095:	mov    rdx,r13
  40e098:	mov    rdi,rbx
  40e09b:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40e0a0:	mov    r9,rax
  40e0a3:	jmp    40db98 <_start@@Base+0x6d28>
  40e0a8:	nop    DWORD PTR [rax+rax*1+0x0]
  40e0b0:	cmp    al,0x22
  40e0b2:	jne    40ddf8 <_start@@Base+0x6f88>
  40e0b8:	lea    rsi,[r15+0x2]
  40e0bc:	jmp    40de3b <_start@@Base+0x6fcb>
  40e0c1:	nop    DWORD PTR [rax+0x0]
  40e0c8:	cmp    al,0x22
  40e0ca:	jne    40ddf8 <_start@@Base+0x6f88>
  40e0d0:	lea    rsi,[r15+0x2]
  40e0d4:	jmp    40dca9 <_start@@Base+0x6e39>
  40e0d9:	nop    DWORD PTR [rax+0x0]
  40e0e0:	mov    r9,r13
  40e0e3:	jmp    40ded7 <_start@@Base+0x7067>
  40e0e8:	nop    DWORD PTR [rax+rax*1+0x0]
  40e0f0:	mov    r9,r13
  40e0f3:	jmp    40dd47 <_start@@Base+0x6ed7>
  40e0f8:	nop    DWORD PTR [rax+rax*1+0x0]
  40e100:	mov    rsi,r15
  40e103:	mov    ecx,0x5
  40e108:	mov    rdx,r13
  40e10b:	mov    rdi,rbx
  40e10e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40e113:	mov    r15,rax
  40e116:	jmp    40dc44 <_start@@Base+0x6dd4>
  40e11b:	nop    DWORD PTR [rax+rax*1+0x0]
  40e120:	mov    rax,QWORD PTR [rsp+0x20]
  40e125:	mov    r8d,DWORD PTR [rsp+0x1c]
  40e12a:	mov    edx,eax
  40e12c:	test   r8d,r8d
  40e12f:	je     40e1f8 <_start@@Base+0x7388>
  40e135:	neg    edx
  40e137:	mov    ecx,0x8
  40e13c:	cmp    rax,0x80
  40e142:	jbe    40df18 <_start@@Base+0x70a8>
  40e148:	mov    rsi,r9
  40e14b:	mov    rdx,r13
  40e14e:	mov    rdi,rbx
  40e151:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40e156:	mov    r11,QWORD PTR [rsp+0x8]
  40e15b:	mov    r9,rax
  40e15e:	cmp    r11,rax
  40e161:	je     40ded7 <_start@@Base+0x7067>
  40e167:	movzx  edx,BYTE PTR [rsp+0x1a]
  40e16c:	jmp    40df18 <_start@@Base+0x70a8>
  40e171:	nop    DWORD PTR [rax+0x0]
  40e178:	mov    rax,QWORD PTR [rsp+0x20]
  40e17d:	mov    ecx,DWORD PTR [rsp+0x1c]
  40e181:	mov    edx,eax
  40e183:	test   ecx,ecx
  40e185:	je     40e218 <_start@@Base+0x73a8>
  40e18b:	neg    edx
  40e18d:	mov    ecx,0x8
  40e192:	cmp    rax,0x8000
  40e198:	jbe    40dd88 <_start@@Base+0x6f18>
  40e19e:	mov    rsi,r9
  40e1a1:	mov    rdx,r13
  40e1a4:	mov    rdi,rbx
  40e1a7:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40e1ac:	mov    r11,QWORD PTR [rsp+0x8]
  40e1b1:	mov    r9,rax
  40e1b4:	cmp    r11,rax
  40e1b7:	je     40dd47 <_start@@Base+0x6ed7>
  40e1bd:	movzx  edx,WORD PTR [rsp+0x1a]
  40e1c2:	jmp    40dd88 <_start@@Base+0x6f18>
  40e1c7:	nop    WORD PTR [rax+rax*1+0x0]
  40e1d0:	mov    r9,rsi
  40e1d3:	jmp    40db98 <_start@@Base+0x6d28>
  40e1d8:	nop    DWORD PTR [rax+rax*1+0x0]
  40e1e0:	cmp    BYTE PTR [r9+0x2],0x20
  40e1e5:	jle    40e001 <_start@@Base+0x7191>
  40e1eb:	add    r9,0x2
  40e1ef:	jmp    40db98 <_start@@Base+0x6d28>
  40e1f4:	nop    DWORD PTR [rax+0x0]
  40e1f8:	cmp    rax,0x7f
  40e1fc:	jbe    40df18 <_start@@Base+0x70a8>
  40e202:	mov    QWORD PTR [rsp+0x8],r11
  40e207:	mov    ecx,0x7
  40e20c:	jmp    40e148 <_start@@Base+0x72d8>
  40e211:	nop    DWORD PTR [rax+0x0]
  40e218:	cmp    rax,0x7fff
  40e21e:	jbe    40dd88 <_start@@Base+0x6f18>
  40e224:	mov    QWORD PTR [rsp+0x8],r11
  40e229:	mov    ecx,0x7
  40e22e:	jmp    40e19e <_start@@Base+0x732e>
  40e233:	nop    DWORD PTR [rax+rax*1+0x0]
  40e238:	cmp    BYTE PTR [r9+0x2],0x20
  40e23d:	jle    40e04d <_start@@Base+0x71dd>
  40e243:	lea    r15,[r9+0x2]
  40e247:	cmp    r13,r15
  40e24a:	jne    40e067 <_start@@Base+0x71f7>
  40e250:	mov    ecx,0xa
  40e255:	mov    rdx,r13
  40e258:	mov    rsi,r13
  40e25b:	mov    rdi,rbx
  40e25e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40e263:	mov    r9,rax
  40e266:	jmp    40db98 <_start@@Base+0x6d28>
  40e26b:	nop    DWORD PTR [rax+rax*1+0x0]
  40e270:	cmp    BYTE PTR [rsi+0x1],0x20
  40e274:	jle    40de52 <_start@@Base+0x6fe2>
  40e27a:	inc    rsi
  40e27d:	jmp    40de60 <_start@@Base+0x6ff0>
  40e282:	nop    WORD PTR [rax+rax*1+0x0]
  40e288:	cmp    BYTE PTR [rsi+0x1],0x20
  40e28c:	jle    40dcc0 <_start@@Base+0x6e50>
  40e292:	inc    rsi
  40e295:	jmp    40dcce <_start@@Base+0x6e5e>
  40e29a:	nop    WORD PTR [rax+rax*1+0x0]
  40e2a0:	lea    r11,[rsi+0x1]
  40e2a4:	mov    rax,r13
  40e2a7:	sub    rax,r11
  40e2aa:	cmp    rax,0x1
  40e2ae:	jle    40e2c6 <_start@@Base+0x7456>
  40e2b0:	cmp    BYTE PTR [rsi+0x1],0x20
  40e2b4:	jg     40de81 <_start@@Base+0x7011>
  40e2ba:	jne    40e2c6 <_start@@Base+0x7456>
  40e2bc:	cmp    BYTE PTR [rsi+0x2],0x20
  40e2c0:	jg     40e37a <_start@@Base+0x750a>
  40e2c6:	mov    rsi,r11
  40e2c9:	mov    rdx,r13
  40e2cc:	mov    rdi,rbx
  40e2cf:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40e2d4:	mov    r11,rax
  40e2d7:	jmp    40de81 <_start@@Base+0x7011>
  40e2dc:	nop    DWORD PTR [rax+0x0]
  40e2e0:	lea    r11,[rsi+0x1]
  40e2e4:	mov    rax,r13
  40e2e7:	sub    rax,r11
  40e2ea:	cmp    rax,0x1
  40e2ee:	jle    40e302 <_start@@Base+0x7492>
  40e2f0:	cmp    BYTE PTR [rsi+0x1],0x20
  40e2f4:	jg     40dcef <_start@@Base+0x6e7f>
  40e2fa:	jne    40e302 <_start@@Base+0x7492>
  40e2fc:	cmp    BYTE PTR [rsi+0x2],0x20
  40e300:	jg     40e371 <_start@@Base+0x7501>
  40e302:	mov    rsi,r11
  40e305:	mov    rdx,r13
  40e308:	mov    rdi,rbx
  40e30b:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40e310:	mov    r11,rax
  40e313:	jmp    40dcef <_start@@Base+0x6e7f>
  40e318:	cmp    BYTE PTR [r15+0x2],0x20
  40e31d:	jle    40e092 <_start@@Base+0x7222>
  40e323:	lea    r9,[r15+0x2]
  40e327:	jmp    40db98 <_start@@Base+0x6d28>
  40e32c:	mov    ecx,0x21
  40e331:	mov    rdx,r13
  40e334:	mov    rsi,rax
  40e337:	mov    rdi,rbx
  40e33a:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40e33f:	mov    r9,rax
  40e342:	jmp    40db98 <_start@@Base+0x6d28>
  40e347:	cmp    BYTE PTR [rsi+0x2],0x20
  40e34b:	jle    40dbdc <_start@@Base+0x6d6c>
  40e351:	lea    r15,[rsi+0x2]
  40e355:	jmp    40dbed <_start@@Base+0x6d7d>
  40e35a:	lea    rsi,[r15+0x1]
  40e35e:	mov    rdx,r13
  40e361:	mov    rdi,rbx
  40e364:	call   407f70 <_start@@Base+0x1100>
  40e369:	mov    r9,rax
  40e36c:	jmp    40db98 <_start@@Base+0x6d28>
  40e371:	lea    r11,[rsi+0x2]
  40e375:	jmp    40dcef <_start@@Base+0x6e7f>
  40e37a:	lea    r11,[rsi+0x2]
  40e37e:	jmp    40de81 <_start@@Base+0x7011>
  40e383:	call   4061a0 <__stack_chk_fail@plt>
  40e388:	nop    DWORD PTR [rax+rax*1+0x0]
  40e390:	push   r13
  40e392:	mov    r13,rcx
  40e395:	push   r12
  40e397:	mov    r12,rdi
  40e39a:	push   rbp
  40e39b:	mov    rbp,rdx
  40e39e:	push   rbx
  40e39f:	mov    rbx,rsi
  40e3a2:	xor    esi,esi
  40e3a4:	sub    rsp,0x8
  40e3a8:	mov    DWORD PTR [rcx],0x0
  40e3ae:	mov    rdi,QWORD PTR [rdi]
  40e3b1:	call   418560 <flatcc_builder_start_table@@Base>
  40e3b6:	test   eax,eax
  40e3b8:	je     40e3e0 <_start@@Base+0x7570>
  40e3ba:	add    rsp,0x8
  40e3be:	mov    rsi,rbx
  40e3c1:	pop    rbx
  40e3c2:	mov    rdx,rbp
  40e3c5:	pop    rbp
  40e3c6:	mov    rdi,r12
  40e3c9:	pop    r12
  40e3cb:	mov    ecx,0x21
  40e3d0:	pop    r13
  40e3d2:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  40e3d7:	nop    WORD PTR [rax+rax*1+0x0]
  40e3e0:	cmp    rbx,rbp
  40e3e3:	je     40e3ea <_start@@Base+0x757a>
  40e3e5:	cmp    BYTE PTR [rbx],0x7b
  40e3e8:	je     40e430 <_start@@Base+0x75c0>
  40e3ea:	mov    ecx,0x15
  40e3ef:	nop
  40e3f0:	mov    rsi,rbx
  40e3f3:	mov    rdx,rbp
  40e3f6:	mov    rdi,r12
  40e3f9:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40e3fe:	mov    rbx,rax
  40e401:	mov    eax,DWORD PTR [r12+0x20]
  40e406:	test   eax,eax
  40e408:	jne    40e3ba <_start@@Base+0x754a>
  40e40a:	mov    rdi,QWORD PTR [r12]
  40e40e:	call   418ee0 <flatcc_builder_end_table@@Base>
  40e413:	mov    DWORD PTR [r13+0x0],eax
  40e417:	test   eax,eax
  40e419:	je     40e3ba <_start@@Base+0x754a>
  40e41b:	add    rsp,0x8
  40e41f:	mov    rax,rbx
  40e422:	pop    rbx
  40e423:	pop    rbp
  40e424:	pop    r12
  40e426:	pop    r13
  40e428:	ret    
  40e429:	nop    DWORD PTR [rax+0x0]
  40e430:	lea    rsi,[rbx+0x1]
  40e434:	mov    rax,rbp
  40e437:	sub    rax,rsi
  40e43a:	cmp    rax,0x1
  40e43e:	jle    40e44c <_start@@Base+0x75dc>
  40e440:	cmp    BYTE PTR [rbx+0x1],0x20
  40e444:	jg     40e45a <_start@@Base+0x75ea>
  40e446:	je     40e606 <_start@@Base+0x7796>
  40e44c:	mov    rdx,rbp
  40e44f:	mov    rdi,r12
  40e452:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40e457:	mov    rsi,rax
  40e45a:	cmp    rbp,rsi
  40e45d:	je     40e469 <_start@@Base+0x75f9>
  40e45f:	nop
  40e460:	cmp    BYTE PTR [rsi],0x7d
  40e463:	je     40e5f0 <_start@@Base+0x7780>
  40e469:	cmp    rbp,rsi
  40e46c:	je     40e486 <_start@@Base+0x7616>
  40e46e:	movzx  eax,BYTE PTR [rsi]
  40e471:	cmp    al,0x22
  40e473:	je     40e4e0 <_start@@Base+0x7670>
  40e475:	cmp    al,0x2e
  40e477:	je     40e590 <_start@@Base+0x7720>
  40e47d:	mov    DWORD PTR [r12+0x14],0x1
  40e486:	mov    rdx,rbp
  40e489:	mov    rdi,r12
  40e48c:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40e491:	mov    rbx,rax
  40e494:	mov    rax,rbp
  40e497:	sub    rax,rbx
  40e49a:	cmp    rax,0x1
  40e49e:	jle    40e4ab <_start@@Base+0x763b>
  40e4a0:	cmp    BYTE PTR [rbx],0x20
  40e4a3:	jg     40e4bc <_start@@Base+0x764c>
  40e4a5:	je     40e528 <_start@@Base+0x76b8>
  40e4ab:	mov    rsi,rbx
  40e4ae:	mov    rdx,rbp
  40e4b1:	mov    rdi,r12
  40e4b4:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40e4b9:	mov    rbx,rax
  40e4bc:	cmp    rbp,rbx
  40e4bf:	je     40e401 <_start@@Base+0x7591>
  40e4c5:	movzx  eax,BYTE PTR [rbx]
  40e4c8:	cmp    al,0x2c
  40e4ca:	je     40e540 <_start@@Base+0x76d0>
  40e4cc:	cmp    al,0x7d
  40e4ce:	je     40e4f0 <_start@@Base+0x7680>
  40e4d0:	mov    ecx,0xa
  40e4d5:	jmp    40e3f0 <_start@@Base+0x7580>
  40e4da:	nop    WORD PTR [rax+rax*1+0x0]
  40e4e0:	inc    rsi
  40e4e3:	mov    DWORD PTR [r12+0x14],0x0
  40e4ec:	jmp    40e486 <_start@@Base+0x7616>
  40e4ee:	xchg   ax,ax
  40e4f0:	lea    rsi,[rbx+0x1]
  40e4f4:	mov    rax,rbp
  40e4f7:	sub    rax,rsi
  40e4fa:	cmp    rax,0x1
  40e4fe:	jle    40e510 <_start@@Base+0x76a0>
  40e500:	cmp    BYTE PTR [rbx+0x1],0x20
  40e504:	jg     40e5b0 <_start@@Base+0x7740>
  40e50a:	je     40e5c0 <_start@@Base+0x7750>
  40e510:	mov    rdx,rbp
  40e513:	mov    rdi,r12
  40e516:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40e51b:	mov    rbx,rax
  40e51e:	jmp    40e401 <_start@@Base+0x7591>
  40e523:	nop    DWORD PTR [rax+rax*1+0x0]
  40e528:	cmp    BYTE PTR [rbx+0x1],0x20
  40e52c:	jle    40e4ab <_start@@Base+0x763b>
  40e532:	inc    rbx
  40e535:	jmp    40e4bc <_start@@Base+0x764c>
  40e537:	nop    WORD PTR [rax+rax*1+0x0]
  40e540:	lea    rsi,[rbx+0x1]
  40e544:	mov    rax,rbp
  40e547:	sub    rax,rsi
  40e54a:	cmp    rax,0x1
  40e54e:	jle    40e55c <_start@@Base+0x76ec>
  40e550:	cmp    BYTE PTR [rbx+0x1],0x20
  40e554:	jg     40e56a <_start@@Base+0x76fa>
  40e556:	je     40e5d8 <_start@@Base+0x7768>
  40e55c:	mov    rdx,rbp
  40e55f:	mov    rdi,r12
  40e562:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40e567:	mov    rsi,rax
  40e56a:	cmp    rbp,rsi
  40e56d:	jne    40e460 <_start@@Base+0x75f0>
  40e573:	mov    ecx,0xa
  40e578:	mov    rdx,rbp
  40e57b:	mov    rsi,rbp
  40e57e:	mov    rdi,r12
  40e581:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40e586:	mov    rbx,rax
  40e589:	jmp    40e401 <_start@@Base+0x7591>
  40e58e:	xchg   ax,ax
  40e590:	mov    ecx,0x5
  40e595:	mov    rdx,rbp
  40e598:	mov    rdi,r12
  40e59b:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40e5a0:	mov    rsi,rax
  40e5a3:	jmp    40e486 <_start@@Base+0x7616>
  40e5a8:	nop    DWORD PTR [rax+rax*1+0x0]
  40e5b0:	mov    rbx,rsi
  40e5b3:	jmp    40e401 <_start@@Base+0x7591>
  40e5b8:	nop    DWORD PTR [rax+rax*1+0x0]
  40e5c0:	cmp    BYTE PTR [rbx+0x2],0x20
  40e5c4:	jle    40e510 <_start@@Base+0x76a0>
  40e5ca:	add    rbx,0x2
  40e5ce:	jmp    40e401 <_start@@Base+0x7591>
  40e5d3:	nop    DWORD PTR [rax+rax*1+0x0]
  40e5d8:	cmp    BYTE PTR [rbx+0x2],0x20
  40e5dc:	jle    40e55c <_start@@Base+0x76ec>
  40e5e2:	lea    rsi,[rbx+0x2]
  40e5e6:	jmp    40e56a <_start@@Base+0x76fa>
  40e5eb:	nop    DWORD PTR [rax+rax*1+0x0]
  40e5f0:	inc    rsi
  40e5f3:	mov    rdx,rbp
  40e5f6:	mov    rdi,r12
  40e5f9:	call   407f70 <_start@@Base+0x1100>
  40e5fe:	mov    rbx,rax
  40e601:	jmp    40e401 <_start@@Base+0x7591>
  40e606:	cmp    BYTE PTR [rbx+0x2],0x20
  40e60a:	jle    40e44c <_start@@Base+0x75dc>
  40e610:	lea    rsi,[rbx+0x2]
  40e614:	jmp    40e45a <_start@@Base+0x75ea>
  40e619:	nop    DWORD PTR [rax+0x0]
  40e620:	endbr64 
  40e624:	push   r15
  40e626:	mov    r15,rdi
  40e629:	push   r14
  40e62b:	mov    r14,rsi
  40e62e:	mov    esi,0x24
  40e633:	push   r13
  40e635:	push   r12
  40e637:	push   rbp
  40e638:	push   rbx
  40e639:	mov    rbx,rdx
  40e63c:	sub    rsp,0x58
  40e640:	mov    QWORD PTR [rsp+0x10],rcx
  40e645:	mov    rdi,QWORD PTR fs:0x28
  40e64e:	mov    QWORD PTR [rsp+0x48],rdi
  40e653:	xor    edi,edi
  40e655:	mov    DWORD PTR [rcx],0x0
  40e65b:	mov    rdi,QWORD PTR [r15]
  40e65e:	call   418560 <flatcc_builder_start_table@@Base>
  40e663:	test   eax,eax
  40e665:	je     40e6a8 <_start@@Base+0x7838>
  40e667:	mov    ecx,0x21
  40e66c:	mov    rdx,rbx
  40e66f:	mov    rsi,r14
  40e672:	mov    rdi,r15
  40e675:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40e67a:	mov    rbp,rax
  40e67d:	mov    rdi,QWORD PTR [rsp+0x48]
  40e682:	xor    rdi,QWORD PTR fs:0x28
  40e68b:	mov    rax,rbp
  40e68e:	jne    412abc <_start@@Base+0xbc4c>
  40e694:	add    rsp,0x58
  40e698:	pop    rbx
  40e699:	pop    rbp
  40e69a:	pop    r12
  40e69c:	pop    r13
  40e69e:	pop    r14
  40e6a0:	pop    r15
  40e6a2:	ret    
  40e6a3:	nop    DWORD PTR [rax+rax*1+0x0]
  40e6a8:	lea    r8,[rsp+0x38]
  40e6ad:	mov    ecx,0x1
  40e6b2:	mov    rdx,rbx
  40e6b5:	mov    rsi,r14
  40e6b8:	mov    rdi,r15
  40e6bb:	call   41f960 <flatcc_json_parser_prepare_unions@@Base>
  40e6c0:	cmp    rax,rbx
  40e6c3:	je     40e667 <_start@@Base+0x77f7>
  40e6c5:	lea    r13,[rsp+0x24]
  40e6ca:	mov    rsi,r14
  40e6cd:	mov    rcx,r13
  40e6d0:	mov    rdx,rbx
  40e6d3:	mov    rdi,r15
  40e6d6:	call   40a7e0 <_start@@Base+0x3970>
  40e6db:	mov    r8d,DWORD PTR [rsp+0x24]
  40e6e0:	mov    r14,rax
  40e6e3:	test   r8d,r8d
  40e6e6:	je     40ee63 <_start@@Base+0x7ff3>
  40e6ec:	mov    rax,r13
  40e6ef:	mov    r13,r14
  40e6f2:	mov    r14,rax
  40e6f5:	nop    DWORD PTR [rax]
  40e6f8:	cmp    rbx,r13
  40e6fb:	je     40eb20 <_start@@Base+0x7cb0>
  40e701:	movzx  eax,BYTE PTR [r13+0x0]
  40e706:	cmp    al,0x22
  40e708:	je     40e990 <_start@@Base+0x7b20>
  40e70e:	cmp    al,0x2e
  40e710:	je     40f4d0 <_start@@Base+0x8660>
  40e716:	mov    DWORD PTR [r15+0x14],0x1
  40e71e:	mov    r12,rbx
  40e721:	sub    r12,r13
  40e724:	cmp    r12,0x7
  40e728:	ja     40e980 <_start@@Base+0x7b10>
  40e72e:	mov    rsi,rbx
  40e731:	mov    rdi,r13
  40e734:	call   406f60 <_start@@Base+0xf0>
  40e739:	mov    rbp,rax
  40e73c:	movabs rax,0x7465737461727260
  40e746:	cmp    rbp,rax
  40e749:	ja     40e888 <_start@@Base+0x7a18>
  40e74f:	movabs rax,0x6e616d64ffffffff
  40e759:	cmp    rbp,rax
  40e75c:	ja     40e9a0 <_start@@Base+0x7b30>
  40e762:	movabs rax,0x666c6577ffffffff
  40e76c:	cmp    rbp,rax
  40e76f:	ja     40ec88 <_start@@Base+0x7e18>
  40e775:	and    rbp,0xffffffffff000000
  40e77c:	movabs rax,0x656e656d79000000
  40e786:	cmp    rbp,rax
  40e789:	je     40f738 <_start@@Base+0x88c8>
  40e78f:	movabs rax,0x636f6c6f72000000
  40e799:	cmp    rbp,rax
  40e79c:	jne    410518 <_start@@Base+0x96a8>
  40e7a2:	cmp    r12,0x5
  40e7a6:	jle    40ff40 <_start@@Base+0x90d0>
  40e7ac:	mov    ecx,0x5
  40e7b1:	mov    rdx,rbx
  40e7b4:	mov    rsi,r13
  40e7b7:	mov    rdi,r15
  40e7ba:	call   40a880 <_start@@Base+0x3a10>
  40e7bf:	mov    rbp,rax
  40e7c2:	cmp    r13,rax
  40e7c5:	je     40ff40 <_start@@Base+0x90d0>
  40e7cb:	mov    BYTE PTR [rsp+0x30],0x0
  40e7d0:	mov    QWORD PTR [rsp+0x40],0x0
  40e7d9:	mov    DWORD PTR [rsp+0x34],0x0
  40e7e1:	cmp    rbx,rax
  40e7e4:	je     4115b5 <_start@@Base+0xa745>
  40e7ea:	lea    rcx,[rsp+0x34]
  40e7ef:	lea    r8,[rsp+0x40]
  40e7f4:	mov    rdx,rbx
  40e7f7:	mov    rsi,rax
  40e7fa:	mov    rdi,r15
  40e7fd:	call   41f220 <flatcc_json_parser_integer@@Base>
  40e802:	mov    r13,rax
  40e805:	cmp    rbp,rax
  40e808:	jne    4115fe <_start@@Base+0xa78e>
  40e80e:	lea    r8,[rsp+0x30]
  40e813:	lea    rcx,[rip+0x2bfa6]        # 43a7c0 <__data_start@@Base+0x700>
  40e81a:	mov    rdx,rbx
  40e81d:	mov    rsi,r13
  40e820:	mov    rdi,r15
  40e823:	call   40b850 <_start@@Base+0x49e0>
  40e828:	cmp    rax,r13
  40e82b:	je     4112df <_start@@Base+0xa46f>
  40e831:	cmp    rbx,rax
  40e834:	je     4112df <_start@@Base+0xa46f>
  40e83a:	movzx  edx,BYTE PTR [rsp+0x30]
  40e83f:	mov    r13,rax
  40e842:	nop    WORD PTR [rax+rax*1+0x0]
  40e848:	cmp    dl,0x8
  40e84b:	jne    40e858 <_start@@Base+0x79e8>
  40e84d:	test   BYTE PTR [r15+0x10],0x2
  40e852:	je     40ee40 <_start@@Base+0x7fd0>
  40e858:	mov    rdi,QWORD PTR [r15]
  40e85b:	mov    ecx,0x1
  40e860:	mov    edx,0x1
  40e865:	mov    esi,0x6
  40e86a:	call   419de0 <flatcc_builder_table_add@@Base>
  40e86f:	test   rax,rax
  40e872:	je     41273c <_start@@Base+0xb8cc>
  40e878:	movzx  edx,BYTE PTR [rsp+0x30]
  40e87d:	mov    BYTE PTR [rax],dl
  40e87f:	jmp    40ee40 <_start@@Base+0x7fd0>
  40e884:	nop    DWORD PTR [rax+0x0]
  40e888:	movabs rax,0x746573746632ffff
  40e892:	cmp    rbp,rax
  40e895:	ja     40ea58 <_start@@Base+0x7be8>
  40e89b:	sub    rax,0x4c08d9e
  40e8a1:	cmp    rbp,rax
  40e8a4:	je     40eec0 <_start@@Base+0x8050>
  40e8aa:	movabs rax,0x74657374656d7073
  40e8b4:	cmp    rbp,rax
  40e8b7:	ja     40ef70 <_start@@Base+0x8100>
  40e8bd:	sub    rax,0x30bfd0e
  40e8c3:	cmp    rbp,rax
  40e8c6:	je     4106c0 <_start@@Base+0x9850>
  40e8cc:	movabs rax,0x74657374626f6f6c
  40e8d6:	cmp    rbp,rax
  40e8d9:	jne    40fba0 <_start@@Base+0x8d30>
  40e8df:	cmp    r12,0x8
  40e8e3:	jle    41157e <_start@@Base+0xa70e>
  40e8e9:	mov    ecx,0x8
  40e8ee:	mov    rdx,rbx
  40e8f1:	mov    rsi,r13
  40e8f4:	mov    rdi,r15
  40e8f7:	call   40a880 <_start@@Base+0x3a10>
  40e8fc:	mov    rbp,rax
  40e8ff:	cmp    r13,rax
  40e902:	je     41157e <_start@@Base+0xa70e>
  40e908:	mov    rax,rbx
  40e90b:	sub    rax,rbp
  40e90e:	mov    BYTE PTR [rsp+0x30],0x0
  40e913:	cmp    rax,0x3
  40e917:	jle    410000 <_start@@Base+0x9190>
  40e91d:	cmp    DWORD PTR [rbp+0x0],0x65757274
  40e924:	je     411f14 <_start@@Base+0xb0a4>
  40e92a:	cmp    rax,0x4
  40e92e:	je     410000 <_start@@Base+0x9190>
  40e934:	cmp    DWORD PTR [rbp+0x0],0x736c6166
  40e93b:	jne    410000 <_start@@Base+0x9190>
  40e941:	cmp    BYTE PTR [rbp+0x4],0x65
  40e945:	lea    r13,[rbp+0x5]
  40e949:	jne    410000 <_start@@Base+0x9190>
  40e94f:	mov    rdi,QWORD PTR [r15]
  40e952:	mov    ecx,0x1
  40e957:	mov    edx,0x1
  40e95c:	mov    esi,0xf
  40e961:	call   419de0 <flatcc_builder_table_add@@Base>
  40e966:	test   rax,rax
  40e969:	je     412772 <_start@@Base+0xb902>
  40e96f:	movzx  edx,BYTE PTR [rsp+0x30]
  40e974:	mov    BYTE PTR [rax],dl
  40e976:	jmp    40ee40 <_start@@Base+0x7fd0>
  40e97b:	nop    DWORD PTR [rax+rax*1+0x0]
  40e980:	movbe  rbp,QWORD PTR [r13+0x0]
  40e986:	jmp    40e73c <_start@@Base+0x78cc>
  40e98b:	nop    DWORD PTR [rax+rax*1+0x0]
  40e990:	inc    r13
  40e993:	mov    DWORD PTR [r15+0x14],0x0
  40e99b:	jmp    40e71e <_start@@Base+0x78ae>
  40e9a0:	movabs rax,0x74657373ffffffff
  40e9aa:	cmp    rbp,rax
  40e9ad:	ja     40edc0 <_start@@Base+0x7f50>
  40e9b3:	movabs rax,0x706172656e745f6d
  40e9bd:	cmp    rbp,rax
  40e9c0:	ja     40f260 <_start@@Base+0x83f0>
  40e9c6:	movabs rax,0xffffffff00000000
  40e9d0:	and    rbp,rax
  40e9d3:	movabs rax,0x6e616d6500000000
  40e9dd:	cmp    rbp,rax
  40e9e0:	jne    40fb60 <_start@@Base+0x8cf0>
  40e9e6:	cmp    r12,0x4
  40e9ea:	jle    410d80 <_start@@Base+0x9f10>
  40e9f0:	mov    ecx,0x4
  40e9f5:	mov    rdx,rbx
  40e9f8:	mov    rsi,r13
  40e9fb:	mov    rdi,r15
  40e9fe:	call   40a880 <_start@@Base+0x3a10>
  40ea03:	cmp    r13,rax
  40ea06:	je     410d80 <_start@@Base+0x9f10>
  40ea0c:	lea    rbp,[rsp+0x28]
  40ea11:	mov    rcx,rbp
  40ea14:	mov    rdx,rbx
  40ea17:	mov    rsi,rax
  40ea1a:	mov    rdi,r15
  40ea1d:	call   41f7a0 <flatcc_json_parser_build_string@@Base>
  40ea22:	mov    r13,rax
  40ea25:	mov    eax,DWORD PTR [rsp+0x28]
  40ea29:	test   eax,eax
  40ea2b:	je     412762 <_start@@Base+0xb8f2>
  40ea31:	mov    rdi,QWORD PTR [r15]
  40ea34:	mov    esi,0x3
  40ea39:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  40ea3e:	test   rax,rax
  40ea41:	je     41275a <_start@@Base+0xb8ea>
  40ea47:	mov    edx,DWORD PTR [rsp+0x28]
  40ea4b:	mov    DWORD PTR [rax],edx
  40ea4d:	jmp    40ee40 <_start@@Base+0x7fd0>
  40ea52:	nop    WORD PTR [rax+rax*1+0x0]
  40ea58:	movabs rax,0x7465737468617367
  40ea62:	cmp    rbp,rax
  40ea65:	ja     40eb30 <_start@@Base+0x7cc0>
  40ea6b:	xor    bp,bp
  40ea6e:	sub    rax,0x22e7367
  40ea74:	cmp    rbp,rax
  40ea77:	jne    40f5b8 <_start@@Base+0x8748>
  40ea7d:	cmp    r12,0x6
  40ea81:	jle    410a18 <_start@@Base+0x9ba8>
  40ea87:	mov    ecx,0x6
  40ea8c:	mov    rdx,rbx
  40ea8f:	mov    rsi,r13
  40ea92:	mov    rdi,r15
  40ea95:	call   40a880 <_start@@Base+0x3a10>
  40ea9a:	mov    rbp,rax
  40ea9d:	cmp    r13,rax
  40eaa0:	je     410a18 <_start@@Base+0x9ba8>
  40eaa6:	lea    r12,[rsp+0x40]
  40eaab:	mov    rcx,r12
  40eaae:	mov    rdx,rbx
  40eab1:	mov    rsi,rax
  40eab4:	mov    rdi,r15
  40eab7:	mov    DWORD PTR [rsp+0x40],0x0
  40eabf:	call   41e450 <flatcc_json_parser_float@@Base>
  40eac4:	mov    r13,rax
  40eac7:	cmp    rax,rbp
  40eaca:	je     41102e <_start@@Base+0xa1be>
  40ead0:	vxorps xmm0,xmm0,xmm0
  40ead4:	vucomiss xmm0,DWORD PTR [rsp+0x40]
  40eada:	jp     40eae9 <_start@@Base+0x7c79>
  40eadc:	jne    40eae9 <_start@@Base+0x7c79>
  40eade:	test   BYTE PTR [r15+0x10],0x2
  40eae3:	je     40ee40 <_start@@Base+0x7fd0>
  40eae9:	mov    rdi,QWORD PTR [r15]
  40eaec:	mov    ecx,0x4
  40eaf1:	mov    edx,0x4
  40eaf6:	mov    esi,0x1b
  40eafb:	call   419de0 <flatcc_builder_table_add@@Base>
  40eb00:	test   rax,rax
  40eb03:	je     4126fa <_start@@Base+0xb88a>
  40eb09:	vmovss xmm0,DWORD PTR [rsp+0x40]
  40eb0f:	vmovss DWORD PTR [rax],xmm0
  40eb13:	jmp    40ee40 <_start@@Base+0x7fd0>
  40eb18:	nop    DWORD PTR [rax+rax*1+0x0]
  40eb20:	xor    r12d,r12d
  40eb23:	jmp    40e72e <_start@@Base+0x78be>
  40eb28:	nop    DWORD PTR [rax+rax*1+0x0]
  40eb30:	movabs rax,0x7465737468617368
  40eb3a:	cmp    rbp,rax
  40eb3d:	je     40f7a8 <_start@@Base+0x8938>
  40eb43:	movabs rax,0x766563746f725f6e
  40eb4d:	cmp    rbp,rax
  40eb50:	ja     40f880 <_start@@Base+0x8a10>
  40eb56:	movabs rax,0x746573746e657374
  40eb60:	cmp    rbp,rax
  40eb63:	jne    40fd90 <_start@@Base+0x8f20>
  40eb69:	lea    r8,[r13+0x8]
  40eb6d:	mov    rax,rbx
  40eb70:	sub    rax,r8
  40eb73:	cmp    rax,0x7
  40eb77:	ja     41164a <_start@@Base+0xa7da>
  40eb7d:	mov    rsi,rbx
  40eb80:	mov    rdi,r8
  40eb83:	call   406f60 <_start@@Base+0xf0>
  40eb88:	movabs rdx,0x6564666c61746275
  40eb92:	cmp    rax,rdx
  40eb95:	jne    410fe0 <_start@@Base+0xa170>
  40eb9b:	lea    rbp,[r13+0x10]
  40eb9f:	mov    r8,rbx
  40eba2:	sub    r8,rbp
  40eba5:	cmp    r8,0x7
  40eba9:	ja     4111c1 <_start@@Base+0xa351>
  40ebaf:	mov    rsi,rbx
  40ebb2:	mov    rdi,rbp
  40ebb5:	call   406f60 <_start@@Base+0xf0>
  40ebba:	movabs rdx,0xffffffff00000000
  40ebc4:	and    rax,rdx
  40ebc7:	movabs rdx,0x6666657200000000
  40ebd1:	cmp    rax,rdx
  40ebd4:	jne    411c93 <_start@@Base+0xae23>
  40ebda:	cmp    r8,0x4
  40ebde:	jle    41259a <_start@@Base+0xb72a>
  40ebe4:	mov    ecx,0x4
  40ebe9:	mov    rdx,rbx
  40ebec:	mov    rsi,rbp
  40ebef:	mov    rdi,r15
  40ebf2:	call   40a880 <_start@@Base+0x3a10>
  40ebf7:	mov    r13,rax
  40ebfa:	cmp    rbp,rax
  40ebfd:	je     41259a <_start@@Base+0xb72a>
  40ec03:	mov    rdi,QWORD PTR [r15]
  40ec06:	cmp    rbx,rax
  40ec09:	je     40ec14 <_start@@Base+0x7da4>
  40ec0b:	cmp    BYTE PTR [rax],0x5b
  40ec0e:	je     41277a <_start@@Base+0xb90a>
  40ec14:	xor    ecx,ecx
  40ec16:	xor    edx,edx
  40ec18:	xor    esi,esi
  40ec1a:	call   4178c0 <flatcc_builder_start_buffer@@Base>
  40ec1f:	test   eax,eax
  40ec21:	jne    412a6a <_start@@Base+0xbbfa>
  40ec27:	lea    rbp,[rsp+0x28]
  40ec2c:	mov    rsi,r13
  40ec2f:	mov    rcx,rbp
  40ec32:	mov    rdx,rbx
  40ec35:	mov    rdi,r15
  40ec38:	call   40e620 <_start@@Base+0x77b0>
  40ec3d:	mov    esi,DWORD PTR [rsp+0x28]
  40ec41:	mov    r13,rax
  40ec44:	test   esi,esi
  40ec46:	je     412a62 <_start@@Base+0xbbf2>
  40ec4c:	mov    rdi,QWORD PTR [r15]
  40ec4f:	call   4179a0 <flatcc_builder_end_buffer@@Base>
  40ec54:	mov    DWORD PTR [rsp+0x28],eax
  40ec58:	test   eax,eax
  40ec5a:	je     412a5a <_start@@Base+0xbbea>
  40ec60:	mov    rdi,QWORD PTR [r15]
  40ec63:	mov    esi,0xd
  40ec68:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  40ec6d:	test   rax,rax
  40ec70:	je     412a52 <_start@@Base+0xbbe2>
  40ec76:	mov    edx,DWORD PTR [rsp+0x28]
  40ec7a:	mov    DWORD PTR [rax],edx
  40ec7c:	jmp    40ee40 <_start@@Base+0x7fd0>
  40ec81:	nop    DWORD PTR [rax+0x0]
  40ec88:	movabs rax,0x686fffffffffffff
  40ec92:	cmp    rbp,rax
  40ec95:	ja     40f4f0 <_start@@Base+0x8680>
  40ec9b:	movabs rax,0xffffffff00000000
  40eca5:	and    rbp,rax
  40eca8:	movabs rax,0x666c657800000000
  40ecb2:	cmp    rbp,rax
  40ecb5:	jne    40fb80 <_start@@Base+0x8d10>
  40ecbb:	cmp    r12,0x4
  40ecbf:	jle    410c40 <_start@@Base+0x9dd0>
  40ecc5:	mov    ecx,0x4
  40ecca:	mov    rdx,rbx
  40eccd:	mov    rsi,r13
  40ecd0:	mov    rdi,r15
  40ecd3:	call   40a880 <_start@@Base+0x3a10>
  40ecd8:	mov    rbp,rax
  40ecdb:	cmp    r13,rax
  40ecde:	je     410c40 <_start@@Base+0x9dd0>
  40ece4:	mov    rdi,QWORD PTR [r15]
  40ece7:	mov    ecx,0xffffffff
  40ecec:	mov    edx,0x1
  40ecf1:	mov    esi,0x1
  40ecf6:	call   418340 <flatcc_builder_start_vector@@Base>
  40ecfb:	test   eax,eax
  40ecfd:	jne    41276a <_start@@Base+0xb8fa>
  40ed03:	mov    rcx,r14
  40ed06:	mov    rdx,rbx
  40ed09:	mov    rsi,rbp
  40ed0c:	mov    rdi,r15
  40ed0f:	call   40a940 <_start@@Base+0x3ad0>
  40ed14:	mov    ecx,DWORD PTR [rsp+0x24]
  40ed18:	mov    r13,rax
  40ed1b:	test   ecx,ecx
  40ed1d:	je     41187c <_start@@Base+0xaa0c>
  40ed23:	lea    rbp,[rsp+0x40]
  40ed28:	jmp    40ed59 <_start@@Base+0x7ee9>
  40ed2a:	nop    WORD PTR [rax+rax*1+0x0]
  40ed30:	movzx  edx,BYTE PTR [rsp+0x40]
  40ed35:	mov    rcx,r14
  40ed38:	mov    BYTE PTR [r12],dl
  40ed3c:	mov    rsi,rax
  40ed3f:	mov    rdx,rbx
  40ed42:	mov    rdi,r15
  40ed45:	call   40c7c0 <_start@@Base+0x5950>
  40ed4a:	mov    edx,DWORD PTR [rsp+0x24]
  40ed4e:	mov    r13,rax
  40ed51:	test   edx,edx
  40ed53:	je     41187c <_start@@Base+0xaa0c>
  40ed59:	mov    rdi,QWORD PTR [r15]
  40ed5c:	mov    esi,0x1
  40ed61:	mov    BYTE PTR [rsp+0x40],0x0
  40ed66:	call   417c90 <flatcc_builder_extend_vector@@Base>
  40ed6b:	mov    r12,rax
  40ed6e:	test   rax,rax
  40ed71:	je     4118b1 <_start@@Base+0xaa41>
  40ed77:	mov    rcx,rbp
  40ed7a:	mov    rdx,rbx
  40ed7d:	mov    rsi,r13
  40ed80:	mov    rdi,r15
  40ed83:	call   409950 <_start@@Base+0x2ae0>
  40ed88:	cmp    rax,r13
  40ed8b:	jne    40ed30 <_start@@Base+0x7ec0>
  40ed8d:	mov    r8,rbp
  40ed90:	lea    rcx,[rip+0x2ba09]        # 43a7a0 <__data_start@@Base+0x6e0>
  40ed97:	mov    rdx,rbx
  40ed9a:	mov    rsi,r13
  40ed9d:	mov    rdi,r15
  40eda0:	call   40bef0 <_start@@Base+0x5080>
  40eda5:	cmp    rax,r13
  40eda8:	je     40edaf <_start@@Base+0x7f3f>
  40edaa:	cmp    rbx,rax
  40edad:	jne    40ed30 <_start@@Base+0x7ec0>
  40edaf:	mov    r14,rax
  40edb2:	jmp    40e667 <_start@@Base+0x77f7>
  40edb7:	nop    WORD PTR [rax+rax*1+0x0]
  40edc0:	mov    r8,rbp
  40edc3:	and    r8,0xffffffffff000000
  40edca:	movabs rax,0x7465737434000000
  40edd4:	cmp    r8,rax
  40edd7:	je     40f5d0 <_start@@Base+0x8760>
  40eddd:	cmp    r12,0x4
  40ede1:	jle    410530 <_start@@Base+0x96c0>
  40ede7:	mov    ecx,0x4
  40edec:	mov    rdx,rbx
  40edef:	mov    rsi,r13
  40edf2:	mov    rdi,r15
  40edf5:	mov    QWORD PTR [rsp],r8
  40edf9:	call   40a880 <_start@@Base+0x3a10>
  40edfe:	cmp    r13,rax
  40ee01:	mov    r8,QWORD PTR [rsp]
  40ee05:	je     410530 <_start@@Base+0x96c0>
  40ee0b:	sub    rsp,0x8
  40ee0f:	lea    rcx,[rip+0x60aa]        # 414ec0 <_start@@Base+0xe050>
  40ee16:	push   rcx
  40ee17:	mov    r8d,0x8
  40ee1d:	mov    rdi,r15
  40ee20:	mov    r9,QWORD PTR [rsp+0x48]
  40ee25:	xor    ecx,ecx
  40ee27:	mov    rdx,rbx
  40ee2a:	mov    rsi,rax
  40ee2d:	call   41fa40 <flatcc_json_parser_union@@Base>
  40ee32:	pop    rdi
  40ee33:	mov    r13,rax
  40ee36:	pop    r8
  40ee38:	nop    DWORD PTR [rax+rax*1+0x0]
  40ee40:	mov    rdx,rbx
  40ee43:	mov    rsi,r13
  40ee46:	mov    rcx,r14
  40ee49:	mov    rdi,r15
  40ee4c:	call   40c910 <_start@@Base+0x5aa0>
  40ee51:	mov    edx,DWORD PTR [rsp+0x24]
  40ee55:	mov    r13,rax
  40ee58:	test   edx,edx
  40ee5a:	jne    40e6f8 <_start@@Base+0x7888>
  40ee60:	mov    r14,rax
  40ee63:	mov    eax,DWORD PTR [r15+0x20]
  40ee67:	test   eax,eax
  40ee69:	jne    40e667 <_start@@Base+0x77f7>
  40ee6f:	mov    rdi,QWORD PTR [r15]
  40ee72:	mov    esi,0x3
  40ee77:	call   418d70 <flatcc_builder_check_required_field@@Base>
  40ee7c:	test   eax,eax
  40ee7e:	je     411ec2 <_start@@Base+0xb052>
  40ee84:	mov    rcx,QWORD PTR [rsp+0x38]
  40ee89:	mov    rsi,r14
  40ee8c:	mov    rdx,rbx
  40ee8f:	mov    rdi,r15
  40ee92:	call   41f9e0 <flatcc_json_parser_finalize_unions@@Base>
  40ee97:	mov    rdi,QWORD PTR [r15]
  40ee9a:	mov    rbp,rax
  40ee9d:	call   418ee0 <flatcc_builder_end_table@@Base>
  40eea2:	mov    rdi,QWORD PTR [rsp+0x10]
  40eea7:	mov    r14,rbp
  40eeaa:	mov    DWORD PTR [rdi],eax
  40eeac:	test   eax,eax
  40eeae:	jne    40e67d <_start@@Base+0x780d>
  40eeb4:	jmp    40e667 <_start@@Base+0x77f7>
  40eeb9:	nop    DWORD PTR [rax+0x0]
  40eec0:	lea    rbp,[r13+0x8]
  40eec4:	mov    r8,rbx
  40eec7:	sub    r8,rbp
  40eeca:	cmp    r8,0x7
  40eece:	ja     410640 <_start@@Base+0x97d0>
  40eed4:	mov    rsi,rbx
  40eed7:	mov    rdi,rbp
  40eeda:	call   406f60 <_start@@Base+0xf0>
  40eedf:	movabs rdx,0x796f66737472696d
  40eee9:	cmp    rax,rdx
  40eeec:	ja     40f690 <_start@@Base+0x8820>
  40eef2:	movabs rdx,0x796f66626f6f6c73
  40eefc:	cmp    rax,rdx
  40eeff:	je     40fbc0 <_start@@Base+0x8d50>
  40ef05:	endbr64 
  40ef09:	movabs rdx,0x796f66736f727465
  40ef13:	cmp    rax,rdx
  40ef16:	jne    410090 <_start@@Base+0x9220>
  40ef1c:	lea    rbp,[r13+0x10]
  40ef20:	mov    rax,rbx
  40ef23:	sub    rax,rbp
  40ef26:	cmp    rax,0x7
  40ef2a:	ja     4118b9 <_start@@Base+0xaa49>
  40ef30:	mov    rsi,rbx
  40ef33:	mov    rdi,rbp
  40ef36:	call   406f60 <_start@@Base+0xf0>
  40ef3b:	xor    al,al
  40ef3d:	movabs rdx,0x6473747275637400
  40ef47:	cmp    rax,rdx
  40ef4a:	je     411297 <_start@@Base+0xa427>
  40ef50:	mov    rdx,rbx
  40ef53:	mov    rsi,rbp
  40ef56:	mov    rdi,r15
  40ef59:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40ef5e:	mov    r13,rax
  40ef61:	jmp    40ee40 <_start@@Base+0x7fd0>
  40ef66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ef70:	movabs rax,0x7465737465ffffff
  40ef7a:	cmp    rbp,rax
  40ef7d:	ja     40f9e0 <_start@@Base+0x8b70>
  40ef83:	sub    rax,0x928f8b
  40ef89:	cmp    rbp,rax
  40ef8c:	jne    40fd50 <_start@@Base+0x8ee0>
  40ef92:	lea    rbp,[r13+0x8]
  40ef96:	mov    r8,rbx
  40ef99:	sub    r8,rbp
  40ef9c:	cmp    r8,0x7
  40efa0:	ja     4117ab <_start@@Base+0xa93b>
  40efa6:	mov    rsi,rbx
  40efa9:	mov    rdi,rbp
  40efac:	call   406f60 <_start@@Base+0xf0>
  40efb1:	movabs rdx,0xff00000000000000
  40efbb:	and    rax,rdx
  40efbe:	movabs rdx,0x7900000000000000
  40efc8:	cmp    rax,rdx
  40efcb:	jne    411000 <_start@@Base+0xa190>
  40efd1:	cmp    r8,0x1
  40efd5:	jle    4111cc <_start@@Base+0xa35c>
  40efdb:	mov    ecx,0x1
  40efe0:	mov    rdx,rbx
  40efe3:	mov    rsi,rbp
  40efe6:	mov    rdi,r15
  40efe9:	call   40a880 <_start@@Base+0x3a10>
  40efee:	mov    r13,rax
  40eff1:	cmp    rbp,rax
  40eff4:	je     4111cc <_start@@Base+0xa35c>
  40effa:	mov    rdi,QWORD PTR [r15]
  40effd:	mov    esi,0x3
  40f002:	mov    DWORD PTR [rsp+0x28],0x0
  40f00a:	call   418560 <flatcc_builder_start_table@@Base>
  40f00f:	test   eax,eax
  40f011:	jne    411839 <_start@@Base+0xa9c9>
  40f017:	lea    rbp,[rsp+0x2c]
  40f01c:	mov    rcx,rbp
  40f01f:	mov    rsi,r13
  40f022:	mov    rdx,rbx
  40f025:	mov    rdi,r15
  40f028:	call   40a7e0 <_start@@Base+0x3970>
  40f02d:	mov    ecx,DWORD PTR [rsp+0x2c]
  40f031:	mov    r13,rax
  40f034:	test   ecx,ecx
  40f036:	je     412095 <_start@@Base+0xb225>
  40f03c:	movabs r12,0x6963ffffffffffff
  40f046:	mov    QWORD PTR [rsp+0x8],r14
  40f04b:	jmp    40f170 <_start@@Base+0x8300>
  40f050:	and    rax,0xffffffffff000000
  40f056:	movabs rdx,0x636f756e74000000
  40f060:	cmp    rax,rdx
  40f063:	jne    411310 <_start@@Base+0xa4a0>
  40f069:	cmp    r8,0x5
  40f06d:	jle    411310 <_start@@Base+0xa4a0>
  40f073:	mov    ecx,0x5
  40f078:	mov    rdx,rbx
  40f07b:	mov    rsi,r13
  40f07e:	mov    rdi,r15
  40f081:	call   40a880 <_start@@Base+0x3a10>
  40f086:	mov    r14,rax
  40f089:	cmp    rax,r13
  40f08c:	je     411310 <_start@@Base+0xa4a0>
  40f092:	xor    edx,edx
  40f094:	mov    WORD PTR [rsp+0x22],dx
  40f099:	mov    QWORD PTR [rsp+0x40],0x0
  40f0a2:	mov    DWORD PTR [rsp+0x34],0x0
  40f0aa:	cmp    rbx,rax
  40f0ad:	je     411829 <_start@@Base+0xa9b9>
  40f0b3:	lea    rcx,[rsp+0x34]
  40f0b8:	lea    r8,[rsp+0x40]
  40f0bd:	mov    rdx,rbx
  40f0c0:	mov    rsi,rax
  40f0c3:	mov    rdi,r15
  40f0c6:	call   41f220 <flatcc_json_parser_integer@@Base>
  40f0cb:	mov    r10,rax
  40f0ce:	cmp    r14,rax
  40f0d1:	jne    411c35 <_start@@Base+0xadc5>
  40f0d7:	mov    rsi,r10
  40f0da:	lea    r8,[rsp+0x22]
  40f0df:	lea    rcx,[rip+0x2b01a]        # 43a100 <__data_start@@Base+0x40>
  40f0e6:	mov    rdx,rbx
  40f0e9:	mov    rdi,r15
  40f0ec:	mov    QWORD PTR [rsp],r10
  40f0f0:	call   40ba80 <_start@@Base+0x4c10>
  40f0f5:	mov    r10,QWORD PTR [rsp]
  40f0f9:	mov    r13,rax
  40f0fc:	cmp    rax,r10
  40f0ff:	je     4124da <_start@@Base+0xb66a>
  40f105:	cmp    rbx,rax
  40f108:	je     4124da <_start@@Base+0xb66a>
  40f10e:	movzx  eax,WORD PTR [rsp+0x22]
  40f113:	test   ax,ax
  40f116:	jne    40f11f <_start@@Base+0x82af>
  40f118:	test   BYTE PTR [r15+0x10],0x2
  40f11d:	je     40f150 <_start@@Base+0x82e0>
  40f11f:	mov    rdi,QWORD PTR [r15]
  40f122:	mov    ecx,0x2
  40f127:	mov    edx,0x2
  40f12c:	mov    esi,0x2
  40f131:	call   419de0 <flatcc_builder_table_add@@Base>
  40f136:	test   rax,rax
  40f139:	je     4124da <_start@@Base+0xb66a>
  40f13f:	movzx  edx,WORD PTR [rsp+0x22]
  40f144:	mov    WORD PTR [rax],dx
  40f147:	nop    WORD PTR [rax+rax*1+0x0]
  40f150:	mov    rsi,r13
  40f153:	mov    rcx,rbp
  40f156:	mov    rdx,rbx
  40f159:	mov    rdi,r15
  40f15c:	call   40c910 <_start@@Base+0x5aa0>
  40f161:	mov    r13,rax
  40f164:	mov    eax,DWORD PTR [rsp+0x2c]
  40f168:	test   eax,eax
  40f16a:	je     412090 <_start@@Base+0xb220>
  40f170:	cmp    rbx,r13
  40f173:	je     40f192 <_start@@Base+0x8322>
  40f175:	movzx  eax,BYTE PTR [r13+0x0]
  40f17a:	cmp    al,0x22
  40f17c:	je     411360 <_start@@Base+0xa4f0>
  40f182:	cmp    al,0x2e
  40f184:	je     4115e3 <_start@@Base+0xa773>
  40f18a:	mov    DWORD PTR [r15+0x14],0x1
  40f192:	mov    r8,rbx
  40f195:	sub    r8,r13
  40f198:	cmp    r8,0x7
  40f19c:	ja     411340 <_start@@Base+0xa4d0>
  40f1a2:	mov    rsi,rbx
  40f1a5:	mov    rdi,r13
  40f1a8:	call   406f60 <_start@@Base+0xf0>
  40f1ad:	cmp    rax,r12
  40f1b0:	jbe    40f050 <_start@@Base+0x81e0>
  40f1b6:	movabs rdx,0xffffff0000000000
  40f1c0:	and    rdx,rax
  40f1c3:	movabs rcx,0x76616c0000000000
  40f1cd:	cmp    rdx,rcx
  40f1d0:	je     4113f0 <_start@@Base+0xa580>
  40f1d6:	movabs rcx,0xffff000000000000
  40f1e0:	and    rax,rcx
  40f1e3:	movabs rdx,0x6964000000000000
  40f1ed:	cmp    rax,rdx
  40f1f0:	jne    411310 <_start@@Base+0xa4a0>
  40f1f6:	cmp    r8,0x2
  40f1fa:	jle    411310 <_start@@Base+0xa4a0>
  40f200:	mov    ecx,0x2
  40f205:	mov    rdx,rbx
  40f208:	mov    rsi,r13
  40f20b:	mov    rdi,r15
  40f20e:	call   40a880 <_start@@Base+0x3a10>
  40f213:	cmp    rax,r13
  40f216:	je     411310 <_start@@Base+0xa4a0>
  40f21c:	lea    rcx,[rsp+0x30]
  40f221:	mov    rdx,rbx
  40f224:	mov    rsi,rax
  40f227:	mov    rdi,r15
  40f22a:	call   41f7a0 <flatcc_json_parser_build_string@@Base>
  40f22f:	mov    r13,rax
  40f232:	mov    eax,DWORD PTR [rsp+0x30]
  40f236:	test   eax,eax
  40f238:	je     4124da <_start@@Base+0xb66a>
  40f23e:	mov    rdi,QWORD PTR [r15]
  40f241:	xor    esi,esi
  40f243:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  40f248:	test   rax,rax
  40f24b:	je     4124da <_start@@Base+0xb66a>
  40f251:	mov    edx,DWORD PTR [rsp+0x30]
  40f255:	mov    DWORD PTR [rax],edx
  40f257:	jmp    40f150 <_start@@Base+0x82e0>
  40f25c:	nop    DWORD PTR [rax+0x0]
  40f260:	movabs rax,0x706172656e745f6e
  40f26a:	cmp    rbp,rax
  40f26d:	je     410a30 <_start@@Base+0x9bc0>
  40f273:	movabs rax,0xffffff0000000000
  40f27d:	and    rbp,rax
  40f280:	movabs rax,0x706f730000000000
  40f28a:	cmp    rbp,rax
  40f28d:	jne    40fd70 <_start@@Base+0x8f00>
  40f293:	cmp    r12,0x3
  40f297:	jle    4117c8 <_start@@Base+0xa958>
  40f29d:	mov    ecx,0x3
  40f2a2:	mov    rdx,rbx
  40f2a5:	mov    rsi,r13
  40f2a8:	mov    rdi,r15
  40f2ab:	call   40a880 <_start@@Base+0x3a10>
  40f2b0:	mov    rbp,rax
  40f2b3:	cmp    r13,rax
  40f2b6:	je     4117c8 <_start@@Base+0xa958>
  40f2bc:	mov    rdi,QWORD PTR [r15]
  40f2bf:	mov    ecx,0x10
  40f2c4:	mov    edx,0x20
  40f2c9:	xor    esi,esi
  40f2cb:	call   419de0 <flatcc_builder_table_add@@Base>
  40f2d0:	mov    QWORD PTR [rsp],rax
  40f2d4:	test   rax,rax
  40f2d7:	je     41286e <_start@@Base+0xb9fe>
  40f2dd:	mov    rsi,rbp
  40f2e0:	lea    rcx,[rsp+0x30]
  40f2e5:	mov    rdx,rbx
  40f2e8:	mov    rdi,r15
  40f2eb:	call   40a7e0 <_start@@Base+0x3970>
  40f2f0:	mov    r12,rax
  40f2f3:	mov    eax,DWORD PTR [rsp+0x30]
  40f2f7:	movabs rbp,0x7465737432ffffff
  40f301:	nop    DWORD PTR [rax+0x0]
  40f308:	test   eax,eax
  40f30a:	je     40f4c3 <_start@@Base+0x8653>
  40f310:	cmp    rbx,r12
  40f313:	je     40f332 <_start@@Base+0x84c2>
  40f315:	movzx  eax,BYTE PTR [r12]
  40f31a:	cmp    al,0x22
  40f31c:	je     4101f0 <_start@@Base+0x9380>
  40f322:	cmp    al,0x2e
  40f324:	je     4104f8 <_start@@Base+0x9688>
  40f32a:	mov    DWORD PTR [r15+0x14],0x1
  40f332:	mov    rsi,rbx
  40f335:	sub    rsi,r12
  40f338:	cmp    rsi,0x7
  40f33c:	jbe    410138 <_start@@Base+0x92c8>
  40f342:	movbe  rax,QWORD PTR [r12]
  40f348:	cmp    rax,rbp
  40f34b:	ja     4100d0 <_start@@Base+0x9260>
  40f351:	and    rax,0xffffffffff000000
  40f357:	movabs rdx,0x7465737432000000
  40f361:	cmp    rax,rdx
  40f364:	je     4102c0 <_start@@Base+0x9450>
  40f36a:	movabs rdx,0x7465737431000000
  40f374:	cmp    rax,rdx
  40f377:	jne    4100b0 <_start@@Base+0x9240>
  40f37d:	cmp    rsi,0x5
  40f381:	jle    4100b0 <_start@@Base+0x9240>
  40f387:	mov    r11d,DWORD PTR [r15+0x14]
  40f38b:	movzx  eax,BYTE PTR [r12+0x5]
  40f391:	test   r11d,r11d
  40f394:	je     410628 <_start@@Base+0x97b8>
  40f39a:	cmp    al,0x20
  40f39c:	jle    40f3a6 <_start@@Base+0x8536>
  40f39e:	cmp    al,0x3a
  40f3a0:	jne    4100b0 <_start@@Base+0x9240>
  40f3a6:	mov    DWORD PTR [r15+0x14],0x0
  40f3ae:	lea    rsi,[r12+0x5]
  40f3b3:	mov    rax,rbx
  40f3b6:	sub    rax,rsi
  40f3b9:	cmp    rax,0x1
  40f3bd:	jle    40f3ca <_start@@Base+0x855a>
  40f3bf:	cmp    BYTE PTR [rsi],0x20
  40f3c2:	jg     40f3d8 <_start@@Base+0x8568>
  40f3c4:	je     4117b6 <_start@@Base+0xa946>
  40f3ca:	mov    rdx,rbx
  40f3cd:	mov    rdi,r15
  40f3d0:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40f3d5:	mov    rsi,rax
  40f3d8:	cmp    rbx,rsi
  40f3db:	je     40f3e6 <_start@@Base+0x8576>
  40f3dd:	cmp    BYTE PTR [rsi],0x3a
  40f3e0:	je     411de9 <_start@@Base+0xaf79>
  40f3e6:	mov    ecx,0x4
  40f3eb:	mov    rdx,rbx
  40f3ee:	mov    rdi,r15
  40f3f1:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40f3f6:	mov    r9,rax
  40f3f9:	cmp    r9,r12
  40f3fc:	je     4100b0 <_start@@Base+0x9240>
  40f402:	lea    r12,[rsp+0x40]
  40f407:	mov    rsi,r9
  40f40a:	mov    rcx,r12
  40f40d:	mov    rdx,rbx
  40f410:	mov    rdi,r15
  40f413:	mov    QWORD PTR [rsp+0x8],r9
  40f418:	mov    QWORD PTR [rsp+0x40],0x0
  40f421:	call   41e370 <flatcc_json_parser_double@@Base>
  40f426:	mov    r9,QWORD PTR [rsp+0x8]
  40f42b:	mov    r13,rax
  40f42e:	cmp    r9,rax
  40f431:	je     410ca0 <_start@@Base+0x9e30>
  40f437:	vmovsd xmm0,QWORD PTR [rsp+0x40]
  40f43d:	mov    rax,QWORD PTR [rsp]
  40f441:	vmovsd QWORD PTR [rax+0x10],xmm0
  40f446:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f450:	mov    rax,rbx
  40f453:	sub    rax,r13
  40f456:	cmp    rax,0x1
  40f45a:	jle    40f469 <_start@@Base+0x85f9>
  40f45c:	cmp    BYTE PTR [r13+0x0],0x20
  40f461:	jg     40f47a <_start@@Base+0x860a>
  40f463:	je     4103e0 <_start@@Base+0x9570>
  40f469:	mov    rsi,r13
  40f46c:	mov    rdx,rbx
  40f46f:	mov    rdi,r15
  40f472:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  40f477:	mov    r13,rax
  40f47a:	cmp    rbx,r13
  40f47d:	je     40ee40 <_start@@Base+0x7fd0>
  40f483:	cmp    BYTE PTR [r13+0x0],0x2c
  40f488:	je     4103f8 <_start@@Base+0x9588>
  40f48e:	mov    DWORD PTR [rsp+0x30],0x0
  40f496:	cmp    BYTE PTR [r13+0x0],0x7d
  40f49b:	je     410280 <_start@@Base+0x9410>
  40f4a1:	mov    ecx,0xa
  40f4a6:	mov    rdx,rbx
  40f4a9:	mov    rsi,r13
  40f4ac:	mov    rdi,r15
  40f4af:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40f4b4:	mov    r12,rax
  40f4b7:	mov    eax,DWORD PTR [rsp+0x30]
  40f4bb:	test   eax,eax
  40f4bd:	jne    40f310 <_start@@Base+0x84a0>
  40f4c3:	mov    r13,r12
  40f4c6:	jmp    40ee40 <_start@@Base+0x7fd0>
  40f4cb:	nop    DWORD PTR [rax+rax*1+0x0]
  40f4d0:	mov    rsi,r13
  40f4d3:	mov    ecx,0x5
  40f4d8:	mov    rdx,rbx
  40f4db:	mov    rdi,r15
  40f4de:	call   41d640 <flatcc_json_parser_set_error@@Base>
  40f4e3:	mov    r13,rax
  40f4e6:	jmp    40e71e <_start@@Base+0x78ae>
  40f4eb:	nop    DWORD PTR [rax+rax*1+0x0]
  40f4f0:	movabs rax,0x696e76656e746f71
  40f4fa:	cmp    rbp,rax
  40f4fd:	ja     40fa98 <_start@@Base+0x8c28>
  40f503:	movabs rax,0xffff000000000000
  40f50d:	and    rbp,rax
  40f510:	movabs rax,0x6870000000000000
  40f51a:	cmp    rbp,rax
  40f51d:	jne    410c60 <_start@@Base+0x9df0>
  40f523:	cmp    r12,0x2
  40f527:	jle    411c67 <_start@@Base+0xadf7>
  40f52d:	mov    ecx,0x2
  40f532:	mov    rdx,rbx
  40f535:	mov    rsi,r13
  40f538:	mov    rdi,r15
  40f53b:	call   40a880 <_start@@Base+0x3a10>
  40f540:	mov    rbp,rax
  40f543:	cmp    r13,rax
  40f546:	je     411c67 <_start@@Base+0xadf7>
  40f54c:	lea    r12,[rsp+0x40]
  40f551:	xor    eax,eax
  40f553:	mov    rcx,r12
  40f556:	mov    rdx,rbx
  40f559:	mov    rsi,rbp
  40f55c:	mov    rdi,r15
  40f55f:	mov    WORD PTR [rsp+0x40],ax
  40f564:	call   409b10 <_start@@Base+0x2ca0>
  40f569:	mov    r13,rax
  40f56c:	cmp    rax,rbp
  40f56f:	je     4112ad <_start@@Base+0xa43d>
  40f575:	cmp    WORD PTR [rsp+0x40],0x64
  40f57b:	jne    40f588 <_start@@Base+0x8718>
  40f57d:	test   BYTE PTR [r15+0x10],0x2
  40f582:	je     40ee40 <_start@@Base+0x7fd0>
  40f588:	mov    rdi,QWORD PTR [r15]
  40f58b:	mov    ecx,0x2
  40f590:	mov    edx,0x2
  40f595:	mov    esi,0x2
  40f59a:	call   419de0 <flatcc_builder_table_add@@Base>
  40f59f:	test   rax,rax
  40f5a2:	je     412984 <_start@@Base+0xbb14>
  40f5a8:	movzx  edx,WORD PTR [rsp+0x40]
  40f5ad:	mov    WORD PTR [rax],dx
  40f5b0:	jmp    40ee40 <_start@@Base+0x7fd0>
  40f5b5:	nop    DWORD PTR [rax]
  40f5b8:	mov    rsi,r13
  40f5bb:	mov    rdx,rbx
  40f5be:	mov    rdi,r15
  40f5c1:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40f5c6:	mov    r13,rax
  40f5c9:	jmp    40ee40 <_start@@Base+0x7fd0>
  40f5ce:	xchg   ax,ax
  40f5d0:	cmp    r12,0x5
  40f5d4:	jle    40fdd0 <_start@@Base+0x8f60>
  40f5da:	mov    ecx,0x5
  40f5df:	mov    rdx,rbx
  40f5e2:	mov    rsi,r13
  40f5e5:	mov    rdi,r15
  40f5e8:	call   40a880 <_start@@Base+0x3a10>
  40f5ed:	mov    rbp,rax
  40f5f0:	cmp    r13,rax
  40f5f3:	je     40fdd0 <_start@@Base+0x8f60>
  40f5f9:	mov    rdi,QWORD PTR [r15]
  40f5fc:	mov    ecx,0x3fffffff
  40f601:	mov    edx,0x2
  40f606:	mov    esi,0x4
  40f60b:	call   418340 <flatcc_builder_start_vector@@Base>
  40f610:	test   eax,eax
  40f612:	jne    412734 <_start@@Base+0xb8c4>
  40f618:	mov    rcx,r14
  40f61b:	mov    rdx,rbx
  40f61e:	mov    rsi,rbp
  40f621:	mov    rdi,r15
  40f624:	call   40a940 <_start@@Base+0x3ad0>
  40f629:	mov    r10d,DWORD PTR [rsp+0x24]
  40f62e:	mov    r13,rax
  40f631:	test   r10d,r10d
  40f634:	jne    40f673 <_start@@Base+0x8803>
  40f636:	jmp    411549 <_start@@Base+0xa6d9>
  40f63b:	nop    DWORD PTR [rax+rax*1+0x0]
  40f640:	mov    rsi,r13
  40f643:	mov    rcx,rax
  40f646:	mov    rdx,rbx
  40f649:	mov    rdi,r15
  40f64c:	call   40db50 <_start@@Base+0x6ce0>
  40f651:	mov    rsi,rax
  40f654:	mov    rcx,r14
  40f657:	mov    rdx,rbx
  40f65a:	mov    rdi,r15
  40f65d:	call   40c7c0 <_start@@Base+0x5950>
  40f662:	mov    r9d,DWORD PTR [rsp+0x24]
  40f667:	mov    r13,rax
  40f66a:	test   r9d,r9d
  40f66d:	je     411549 <_start@@Base+0xa6d9>
  40f673:	mov    rdi,QWORD PTR [r15]
  40f676:	mov    esi,0x1
  40f67b:	call   417c90 <flatcc_builder_extend_vector@@Base>
  40f680:	test   rax,rax
  40f683:	jne    40f640 <_start@@Base+0x87d0>
  40f685:	mov    r14,r13
  40f688:	jmp    40e667 <_start@@Base+0x77f7>
  40f68d:	nop    DWORD PTR [rax]
  40f690:	movabs rdx,0x796f66737472696e
  40f69a:	cmp    rax,rdx
  40f69d:	je     40fe20 <_start@@Base+0x8fb0>
  40f6a3:	movabs rdx,0x796f667461626c65
  40f6ad:	cmp    rax,rdx
  40f6b0:	jne    410c80 <_start@@Base+0x9e10>
  40f6b6:	lea    rbp,[r13+0x10]
  40f6ba:	mov    r8,rbx
  40f6bd:	sub    r8,rbp
  40f6c0:	cmp    r8,0x7
  40f6c4:	ja     41108c <_start@@Base+0xa21c>
  40f6ca:	mov    rsi,rbx
  40f6cd:	mov    rdi,rbp
  40f6d0:	call   406f60 <_start@@Base+0xf0>
  40f6d5:	movabs rdx,0xff00000000000000
  40f6df:	and    rax,rdx
  40f6e2:	movabs rdx,0x7300000000000000
  40f6ec:	cmp    rax,rdx
  40f6ef:	jne    4117de <_start@@Base+0xa96e>
  40f6f5:	cmp    r8,0x1
  40f6f9:	jle    4120ff <_start@@Base+0xb28f>
  40f6ff:	mov    ecx,0x1
  40f704:	mov    rdx,rbx
  40f707:	mov    rsi,rbp
  40f70a:	mov    rdi,r15
  40f70d:	call   40a880 <_start@@Base+0x3a10>
  40f712:	mov    r13,rax
  40f715:	cmp    rbp,rax
  40f718:	jne    412112 <_start@@Base+0xb2a2>
  40f71e:	mov    rsi,r13
  40f721:	mov    rdx,rbx
  40f724:	mov    rdi,r15
  40f727:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40f72c:	mov    r13,rax
  40f72f:	jmp    40ee40 <_start@@Base+0x7fd0>
  40f734:	nop    DWORD PTR [rax+0x0]
  40f738:	cmp    r12,0x5
  40f73c:	jle    40fe00 <_start@@Base+0x8f90>
  40f742:	mov    ecx,0x5
  40f747:	mov    rdx,rbx
  40f74a:	mov    rsi,r13
  40f74d:	mov    rdi,r15
  40f750:	call   40a880 <_start@@Base+0x3a10>
  40f755:	cmp    r13,rax
  40f758:	je     40fe00 <_start@@Base+0x8f90>
  40f75e:	lea    rbp,[rsp+0x28]
  40f763:	mov    rdi,r15
  40f766:	mov    rcx,rbp
  40f769:	mov    rdx,rbx
  40f76c:	mov    rsi,rax
  40f76f:	call   40e620 <_start@@Base+0x77b0>
  40f774:	mov    edi,DWORD PTR [rsp+0x28]
  40f778:	mov    r13,rax
  40f77b:	test   edi,edi
  40f77d:	je     4126f2 <_start@@Base+0xb882>
  40f783:	mov    rdi,QWORD PTR [r15]
  40f786:	mov    esi,0xc
  40f78b:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  40f790:	test   rax,rax
  40f793:	je     4126ea <_start@@Base+0xb87a>
  40f799:	mov    edx,DWORD PTR [rsp+0x28]
  40f79d:	mov    DWORD PTR [rax],edx
  40f79f:	jmp    40ee40 <_start@@Base+0x7fd0>
  40f7a4:	nop    DWORD PTR [rax+0x0]
  40f7a8:	lea    rbp,[r13+0x8]
  40f7ac:	mov    r8,rbx
  40f7af:	sub    r8,rbp
  40f7b2:	cmp    r8,0x7
  40f7b6:	ja     40fdf0 <_start@@Base+0x8f80>
  40f7bc:	mov    rsi,rbx
  40f7bf:	mov    rdi,rbp
  40f7c2:	call   406f60 <_start@@Base+0xf0>
  40f7c7:	movabs rdx,0x7336345f666e7630
  40f7d1:	cmp    rax,rdx
  40f7d4:	ja     410b10 <_start@@Base+0x9ca0>
  40f7da:	movabs rdx,0x7333325f666e7631
  40f7e4:	cmp    rax,rdx
  40f7e7:	jne    410fa0 <_start@@Base+0xa130>
  40f7ed:	cmp    r8,0x8
  40f7f1:	jle    4110e4 <_start@@Base+0xa274>
  40f7f7:	mov    ecx,0x8
  40f7fc:	mov    rdx,rbx
  40f7ff:	mov    rsi,rbp
  40f802:	mov    rdi,r15
  40f805:	call   40a880 <_start@@Base+0x3a10>
  40f80a:	mov    r12,rax
  40f80d:	cmp    rbp,rax
  40f810:	je     4110e4 <_start@@Base+0xa274>
  40f816:	lea    rbp,[rsp+0x40]
  40f81b:	mov    rcx,rbp
  40f81e:	mov    rdx,rbx
  40f821:	mov    rsi,rax
  40f824:	mov    rdi,r15
  40f827:	mov    DWORD PTR [rsp+0x40],0x0
  40f82f:	call   409a20 <_start@@Base+0x2bb0>
  40f834:	mov    r13,rax
  40f837:	cmp    rax,r12
  40f83a:	je     412545 <_start@@Base+0xb6d5>
  40f840:	mov    eax,DWORD PTR [rsp+0x40]
  40f844:	test   eax,eax
  40f846:	jne    40f853 <_start@@Base+0x89e3>
  40f848:	test   BYTE PTR [r15+0x10],0x2
  40f84d:	je     40ee40 <_start@@Base+0x7fd0>
  40f853:	mov    rdi,QWORD PTR [r15]
  40f856:	mov    ecx,0x4
  40f85b:	mov    edx,0x4
  40f860:	mov    esi,0x10
  40f865:	call   419de0 <flatcc_builder_table_add@@Base>
  40f86a:	test   rax,rax
  40f86d:	je     412a32 <_start@@Base+0xbbc2>
  40f873:	mov    edx,DWORD PTR [rsp+0x40]
  40f877:	mov    DWORD PTR [rax],edx
  40f879:	jmp    40ee40 <_start@@Base+0x7fd0>
  40f87e:	xchg   ax,ax
  40f880:	movabs rax,0x766563746f725f6f
  40f88a:	cmp    rbp,rax
  40f88d:	jne    40fdb0 <_start@@Base+0x8f40>
  40f893:	lea    rbp,[r13+0x8]
  40f897:	mov    r8,rbx
  40f89a:	sub    r8,rbp
  40f89d:	cmp    r8,0x7
  40f8a1:	ja     4117a0 <_start@@Base+0xa930>
  40f8a7:	mov    rsi,rbx
  40f8aa:	mov    rdi,rbp
  40f8ad:	call   406f60 <_start@@Base+0xf0>
  40f8b2:	movabs rdx,0x665f646f75626c65
  40f8bc:	cmp    rax,rdx
  40f8bf:	je     411655 <_start@@Base+0xa7e5>
  40f8c5:	xor    al,al
  40f8c7:	movabs rdx,0x665f6c6f6e677300
  40f8d1:	cmp    rax,rdx
  40f8d4:	jne    411060 <_start@@Base+0xa1f0>
  40f8da:	cmp    r8,0x7
  40f8de:	jle    411e1c <_start@@Base+0xafac>
  40f8e4:	mov    ecx,0x7
  40f8e9:	mov    rdx,rbx
  40f8ec:	mov    rsi,rbp
  40f8ef:	mov    rdi,r15
  40f8f2:	call   40a880 <_start@@Base+0x3a10>
  40f8f7:	mov    r13,rax
  40f8fa:	cmp    rbp,rax
  40f8fd:	je     411e1c <_start@@Base+0xafac>
  40f903:	mov    rdi,QWORD PTR [r15]
  40f906:	mov    ecx,0x1fffffff
  40f90b:	mov    edx,0x8
  40f910:	mov    esi,0x8
  40f915:	call   418340 <flatcc_builder_start_vector@@Base>
  40f91a:	test   eax,eax
  40f91c:	jne    412a22 <_start@@Base+0xbbb2>
  40f922:	mov    rsi,r13
  40f925:	mov    rcx,r14
  40f928:	mov    rdx,rbx
  40f92b:	mov    rdi,r15
  40f92e:	call   40a940 <_start@@Base+0x3ad0>
  40f933:	mov    esi,DWORD PTR [rsp+0x24]
  40f937:	mov    r13,rax
  40f93a:	test   esi,esi
  40f93c:	je     41245d <_start@@Base+0xb5ed>
  40f942:	lea    rbp,[rsp+0x40]
  40f947:	jmp    40f979 <_start@@Base+0x8b09>
  40f949:	nop    DWORD PTR [rax+0x0]
  40f950:	mov    rdx,QWORD PTR [rsp+0x40]
  40f955:	mov    rcx,r14
  40f958:	mov    QWORD PTR [r12],rdx
  40f95c:	mov    rsi,rax
  40f95f:	mov    rdx,rbx
  40f962:	mov    rdi,r15
  40f965:	call   40c7c0 <_start@@Base+0x5950>
  40f96a:	mov    ecx,DWORD PTR [rsp+0x24]
  40f96e:	mov    r13,rax
  40f971:	test   ecx,ecx
  40f973:	je     41245d <_start@@Base+0xb5ed>
  40f979:	mov    rdi,QWORD PTR [r15]
  40f97c:	mov    esi,0x1
  40f981:	mov    QWORD PTR [rsp+0x40],0x0
  40f98a:	call   417c90 <flatcc_builder_extend_vector@@Base>
  40f98f:	mov    r12,rax
  40f992:	test   rax,rax
  40f995:	je     412455 <_start@@Base+0xb5e5>
  40f99b:	mov    rcx,rbp
  40f99e:	mov    rdx,rbx
  40f9a1:	mov    rsi,r13
  40f9a4:	mov    rdi,r15
  40f9a7:	call   4094a0 <_start@@Base+0x2630>
  40f9ac:	cmp    rax,r13
  40f9af:	jne    40f950 <_start@@Base+0x8ae0>
  40f9b1:	mov    r8,rbp
  40f9b4:	lea    rcx,[rip+0x2ab65]        # 43a520 <__data_start@@Base+0x460>
  40f9bb:	mov    rdx,rbx
  40f9be:	mov    rsi,r13
  40f9c1:	mov    rdi,r15
  40f9c4:	call   40bcb0 <_start@@Base+0x4e40>
  40f9c9:	cmp    rax,r13
  40f9cc:	je     40f9d7 <_start@@Base+0x8b67>
  40f9ce:	cmp    rbx,rax
  40f9d1:	jne    40f950 <_start@@Base+0x8ae0>
  40f9d7:	mov    r14,rax
  40f9da:	jmp    40e667 <_start@@Base+0x77f7>
  40f9df:	nop
  40f9e0:	xor    bp,bp
  40f9e3:	movabs rax,0x7465737466320000
  40f9ed:	cmp    rbp,rax
  40f9f0:	je     40ff60 <_start@@Base+0x90f0>
  40f9f6:	cmp    r12,0x5
  40f9fa:	jle    41159f <_start@@Base+0xa72f>
  40fa00:	mov    ecx,0x5
  40fa05:	mov    rdx,rbx
  40fa08:	mov    rsi,r13
  40fa0b:	mov    rdi,r15
  40fa0e:	call   40a880 <_start@@Base+0x3a10>
  40fa13:	mov    rbp,rax
  40fa16:	cmp    r13,rax
  40fa19:	je     41159f <_start@@Base+0xa72f>
  40fa1f:	lea    r12,[rsp+0x40]
  40fa24:	mov    rcx,r12
  40fa27:	mov    rdx,rbx
  40fa2a:	mov    rsi,rax
  40fa2d:	mov    rdi,r15
  40fa30:	mov    DWORD PTR [rsp+0x40],0x0
  40fa38:	call   41e450 <flatcc_json_parser_float@@Base>
  40fa3d:	mov    r13,rax
  40fa40:	cmp    rax,rbp
  40fa43:	je     411e90 <_start@@Base+0xb020>
  40fa49:	vmovss xmm0,DWORD PTR [rsp+0x40]
  40fa4f:	vucomiss xmm0,DWORD PTR [rip+0x204b1]        # 42ff08 <_IO_stdin_used@@Base+0x3f08>
  40fa57:	jp     40fa66 <_start@@Base+0x8bf6>
  40fa59:	jne    40fa66 <_start@@Base+0x8bf6>
  40fa5b:	test   BYTE PTR [r15+0x10],0x2
  40fa60:	je     40ee40 <_start@@Base+0x7fd0>
  40fa66:	mov    rdi,QWORD PTR [r15]
  40fa69:	mov    ecx,0x4
  40fa6e:	mov    edx,0x4
  40fa73:	mov    esi,0x19
  40fa78:	call   419de0 <flatcc_builder_table_add@@Base>
  40fa7d:	test   rax,rax
  40fa80:	je     412994 <_start@@Base+0xbb24>
  40fa86:	vmovss xmm0,DWORD PTR [rsp+0x40]
  40fa8c:	vmovss DWORD PTR [rax],xmm0
  40fa90:	jmp    40ee40 <_start@@Base+0x7fd0>
  40fa95:	nop    DWORD PTR [rax]
  40fa98:	movabs rax,0x696e76656e746f72
  40faa2:	cmp    rbp,rax
  40faa5:	je     410e60 <_start@@Base+0x9ff0>
  40faab:	movabs rax,0xffffffff00000000
  40fab5:	and    rbp,rax
  40fab8:	movabs rax,0x6d616e6100000000
  40fac2:	cmp    rbp,rax
  40fac5:	jne    411501 <_start@@Base+0xa691>
  40facb:	cmp    r12,0x4
  40facf:	jle    41127e <_start@@Base+0xa40e>
  40fad5:	mov    ecx,0x4
  40fada:	mov    rdx,rbx
  40fadd:	mov    rsi,r13
  40fae0:	mov    rdi,r15
  40fae3:	call   40a880 <_start@@Base+0x3a10>
  40fae8:	mov    rbp,rax
  40faeb:	cmp    r13,rax
  40faee:	je     41127e <_start@@Base+0xa40e>
  40faf4:	lea    r12,[rsp+0x40]
  40faf9:	xor    eax,eax
  40fafb:	mov    rcx,r12
  40fafe:	mov    rdx,rbx
  40fb01:	mov    rsi,rbp
  40fb04:	mov    rdi,r15
  40fb07:	mov    WORD PTR [rsp+0x40],ax
  40fb0c:	call   409b10 <_start@@Base+0x2ca0>
  40fb11:	mov    r13,rax
  40fb14:	cmp    rax,rbp
  40fb17:	je     412492 <_start@@Base+0xb622>
  40fb1d:	cmp    WORD PTR [rsp+0x40],0x96
  40fb24:	jne    40fb31 <_start@@Base+0x8cc1>
  40fb26:	test   BYTE PTR [r15+0x10],0x2
  40fb2b:	je     40ee40 <_start@@Base+0x7fd0>
  40fb31:	mov    rdi,QWORD PTR [r15]
  40fb34:	mov    ecx,0x2
  40fb39:	mov    edx,0x2
  40fb3e:	mov    esi,0x1
  40fb43:	call   419de0 <flatcc_builder_table_add@@Base>
  40fb48:	test   rax,rax
  40fb4b:	je     412a3a <_start@@Base+0xbbca>
  40fb51:	movzx  edx,WORD PTR [rsp+0x40]
  40fb56:	mov    WORD PTR [rax],dx
  40fb59:	jmp    40ee40 <_start@@Base+0x7fd0>
  40fb5e:	xchg   ax,ax
  40fb60:	mov    rsi,r13
  40fb63:	mov    rdx,rbx
  40fb66:	mov    rdi,r15
  40fb69:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40fb6e:	mov    r13,rax
  40fb71:	jmp    40ee40 <_start@@Base+0x7fd0>
  40fb76:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40fb80:	mov    rsi,r13
  40fb83:	mov    rdx,rbx
  40fb86:	mov    rdi,r15
  40fb89:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40fb8e:	mov    r13,rax
  40fb91:	jmp    40ee40 <_start@@Base+0x7fd0>
  40fb96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40fba0:	mov    rsi,r13
  40fba3:	mov    rdx,rbx
  40fba6:	mov    rdi,r15
  40fba9:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40fbae:	mov    r13,rax
  40fbb1:	jmp    40ee40 <_start@@Base+0x7fd0>
  40fbb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40fbc0:	cmp    r8,0x8
  40fbc4:	jle    410090 <_start@@Base+0x9220>
  40fbca:	mov    ecx,0x8
  40fbcf:	mov    rdx,rbx
  40fbd2:	mov    rsi,rbp
  40fbd5:	mov    rdi,r15
  40fbd8:	call   40a880 <_start@@Base+0x3a10>
  40fbdd:	mov    r13,rax
  40fbe0:	cmp    rbp,rax
  40fbe3:	je     410090 <_start@@Base+0x9220>
  40fbe9:	mov    rdi,QWORD PTR [r15]
  40fbec:	mov    ecx,0xffffffff
  40fbf1:	mov    edx,0x1
  40fbf6:	mov    esi,0x1
  40fbfb:	call   418340 <flatcc_builder_start_vector@@Base>
  40fc00:	test   eax,eax
  40fc02:	jne    41298c <_start@@Base+0xbb1c>
  40fc08:	mov    rsi,r13
  40fc0b:	mov    rcx,r14
  40fc0e:	mov    rdx,rbx
  40fc11:	mov    rdi,r15
  40fc14:	call   40a940 <_start@@Base+0x3ad0>
  40fc19:	mov    r13,rax
  40fc1c:	mov    eax,DWORD PTR [rsp+0x24]
  40fc20:	test   eax,eax
  40fc22:	je     411d9e <_start@@Base+0xaf2e>
  40fc28:	lea    rax,[rsp+0x40]
  40fc2d:	mov    QWORD PTR [rsp],rax
  40fc31:	lea    rax,[rsp+0x34]
  40fc36:	mov    QWORD PTR [rsp+0x8],rax
  40fc3b:	lea    rax,[rsp+0x30]
  40fc40:	mov    QWORD PTR [rsp+0x18],rax
  40fc45:	jmp    40fc7b <_start@@Base+0x8e0b>
  40fc47:	nop    WORD PTR [rax+rax*1+0x0]
  40fc50:	movzx  eax,BYTE PTR [rsp+0x30]
  40fc55:	mov    rcx,r14
  40fc58:	mov    BYTE PTR [r12],al
  40fc5c:	mov    rdx,rbx
  40fc5f:	mov    rsi,rbp
  40fc62:	mov    rdi,r15
  40fc65:	call   40c7c0 <_start@@Base+0x5950>
  40fc6a:	mov    r12d,DWORD PTR [rsp+0x24]
  40fc6f:	mov    r13,rax
  40fc72:	test   r12d,r12d
  40fc75:	je     411d9e <_start@@Base+0xaf2e>
  40fc7b:	mov    rdi,QWORD PTR [r15]
  40fc7e:	mov    esi,0x1
  40fc83:	mov    BYTE PTR [rsp+0x30],0x0
  40fc88:	call   417c90 <flatcc_builder_extend_vector@@Base>
  40fc8d:	mov    r12,rax
  40fc90:	test   rax,rax
  40fc93:	je     411dff <_start@@Base+0xaf8f>
  40fc99:	mov    rax,rbx
  40fc9c:	sub    rax,r13
  40fc9f:	cmp    rax,0x3
  40fca3:	jle    40fcc7 <_start@@Base+0x8e57>
  40fca5:	cmp    DWORD PTR [r13+0x0],0x65757274
  40fcad:	je     4114b0 <_start@@Base+0xa640>
  40fcb3:	cmp    rax,0x4
  40fcb7:	je     40fcc7 <_start@@Base+0x8e57>
  40fcb9:	cmp    DWORD PTR [r13+0x0],0x736c6166
  40fcc1:	je     411490 <_start@@Base+0xa620>
  40fcc7:	mov    QWORD PTR [rsp+0x40],0x0
  40fcd0:	mov    DWORD PTR [rsp+0x34],0x0
  40fcd8:	cmp    rbx,r13
  40fcdb:	je     4113e0 <_start@@Base+0xa570>
  40fce1:	mov    r8,QWORD PTR [rsp]
  40fce5:	mov    rcx,QWORD PTR [rsp+0x8]
  40fcea:	mov    rdx,rbx
  40fced:	mov    rsi,r13
  40fcf0:	mov    rdi,r15
  40fcf3:	call   41f220 <flatcc_json_parser_integer@@Base>
  40fcf8:	mov    rbp,rax
  40fcfb:	cmp    rax,r13
  40fcfe:	jne    4114c0 <_start@@Base+0xa650>
  40fd04:	mov    rbp,r13
  40fd07:	xor    eax,eax
  40fd09:	mov    BYTE PTR [rsp+0x30],al
  40fd0d:	cmp    rbp,r13
  40fd10:	jne    40fc50 <_start@@Base+0x8de0>
  40fd16:	mov    r8,QWORD PTR [rsp+0x18]
  40fd1b:	lea    rcx,[rip+0x2a9de]        # 43a700 <__data_start@@Base+0x640>
  40fd22:	mov    rdx,rbx
  40fd25:	mov    rsi,rbp
  40fd28:	mov    rdi,r15
  40fd2b:	call   40afb0 <_start@@Base+0x4140>
  40fd30:	cmp    rax,rbp
  40fd33:	je     4126cf <_start@@Base+0xb85f>
  40fd39:	cmp    rbx,rax
  40fd3c:	je     4126c7 <_start@@Base+0xb857>
  40fd42:	mov    rbp,rax
  40fd45:	jmp    40fc50 <_start@@Base+0x8de0>
  40fd4a:	nop    WORD PTR [rax+rax*1+0x0]
  40fd50:	mov    rsi,r13
  40fd53:	mov    rdx,rbx
  40fd56:	mov    rdi,r15
  40fd59:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40fd5e:	mov    r13,rax
  40fd61:	jmp    40ee40 <_start@@Base+0x7fd0>
  40fd66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40fd70:	mov    rsi,r13
  40fd73:	mov    rdx,rbx
  40fd76:	mov    rdi,r15
  40fd79:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40fd7e:	mov    r13,rax
  40fd81:	jmp    40ee40 <_start@@Base+0x7fd0>
  40fd86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40fd90:	mov    rsi,r13
  40fd93:	mov    rdx,rbx
  40fd96:	mov    rdi,r15
  40fd99:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40fd9e:	mov    r13,rax
  40fda1:	jmp    40ee40 <_start@@Base+0x7fd0>
  40fda6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40fdb0:	mov    rsi,r13
  40fdb3:	mov    rdx,rbx
  40fdb6:	mov    rdi,r15
  40fdb9:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40fdbe:	mov    r13,rax
  40fdc1:	jmp    40ee40 <_start@@Base+0x7fd0>
  40fdc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40fdd0:	mov    rsi,r13
  40fdd3:	mov    rdx,rbx
  40fdd6:	mov    rdi,r15
  40fdd9:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40fdde:	mov    r13,rax
  40fde1:	jmp    40ee40 <_start@@Base+0x7fd0>
  40fde6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40fdf0:	movbe  rax,QWORD PTR [r13+0x8]
  40fdf6:	jmp    40f7c7 <_start@@Base+0x8957>
  40fdfb:	nop    DWORD PTR [rax+rax*1+0x0]
  40fe00:	mov    rsi,r13
  40fe03:	mov    rdx,rbx
  40fe06:	mov    rdi,r15
  40fe09:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40fe0e:	mov    r13,rax
  40fe11:	jmp    40ee40 <_start@@Base+0x7fd0>
  40fe16:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40fe20:	lea    rbp,[r13+0x10]
  40fe24:	mov    r8,rbx
  40fe27:	sub    r8,rbp
  40fe2a:	cmp    r8,0x7
  40fe2e:	ja     411097 <_start@@Base+0xa227>
  40fe34:	mov    rsi,rbx
  40fe37:	mov    rdi,rbp
  40fe3a:	call   406f60 <_start@@Base+0xf0>
  40fe3f:	movabs rdx,0xffff000000000000
  40fe49:	and    rdx,rax
  40fe4c:	movabs rcx,0x6732000000000000
  40fe56:	cmp    rdx,rcx
  40fe59:	je     411cbf <_start@@Base+0xae4f>
  40fe5f:	movabs rdx,0xff00000000000000
  40fe69:	and    rax,rdx
  40fe6c:	movabs rdx,0x6700000000000000
  40fe76:	cmp    rax,rdx
  40fe79:	jne    411d88 <_start@@Base+0xaf18>
  40fe7f:	cmp    r8,0x1
  40fe83:	jle    411fa7 <_start@@Base+0xb137>
  40fe89:	mov    ecx,0x1
  40fe8e:	mov    rdx,rbx
  40fe91:	mov    rsi,rbp
  40fe94:	mov    rdi,r15
  40fe97:	call   40a880 <_start@@Base+0x3a10>
  40fe9c:	mov    r13,rax
  40fe9f:	cmp    rbp,rax
  40fea2:	je     411fa7 <_start@@Base+0xb137>
  40fea8:	mov    rdi,QWORD PTR [r15]
  40feab:	call   4183c0 <flatcc_builder_start_offset_vector@@Base>
  40feb0:	test   eax,eax
  40feb2:	jne    412b91 <_start@@Base+0xbd21>
  40feb8:	mov    rcx,r14
  40febb:	mov    rsi,r13
  40febe:	mov    rdx,rbx
  40fec1:	mov    rdi,r15
  40fec4:	call   40a940 <_start@@Base+0x3ad0>
  40fec9:	mov    ecx,DWORD PTR [rsp+0x24]
  40fecd:	mov    r13,rax
  40fed0:	test   ecx,ecx
  40fed2:	je     41263a <_start@@Base+0xb7ca>
  40fed8:	lea    rbp,[rsp+0x28]
  40fedd:	jmp    40ff1c <_start@@Base+0x90ac>
  40fedf:	nop
  40fee0:	mov    rdi,QWORD PTR [r15]
  40fee3:	mov    esi,0x1
  40fee8:	call   417e70 <flatcc_builder_extend_offset_vector@@Base>
  40feed:	test   rax,rax
  40fef0:	je     412632 <_start@@Base+0xb7c2>
  40fef6:	mov    edx,DWORD PTR [rsp+0x28]
  40fefa:	mov    rsi,r13
  40fefd:	mov    DWORD PTR [rax],edx
  40feff:	mov    rcx,r14
  40ff02:	mov    rdx,rbx
  40ff05:	mov    rdi,r15
  40ff08:	call   40c7c0 <_start@@Base+0x5950>
  40ff0d:	mov    r13,rax
  40ff10:	mov    eax,DWORD PTR [rsp+0x24]
  40ff14:	test   eax,eax
  40ff16:	je     41263a <_start@@Base+0xb7ca>
  40ff1c:	mov    rdx,rbx
  40ff1f:	mov    rsi,r13
  40ff22:	mov    rcx,rbp
  40ff25:	mov    rdi,r15
  40ff28:	call   41f7a0 <flatcc_json_parser_build_string@@Base>
  40ff2d:	mov    edx,DWORD PTR [rsp+0x28]
  40ff31:	mov    r13,rax
  40ff34:	test   edx,edx
  40ff36:	jne    40fee0 <_start@@Base+0x9070>
  40ff38:	mov    r14,rax
  40ff3b:	jmp    40e667 <_start@@Base+0x77f7>
  40ff40:	mov    rsi,r13
  40ff43:	mov    rdx,rbx
  40ff46:	mov    rdi,r15
  40ff49:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  40ff4e:	mov    r13,rax
  40ff51:	jmp    40ee40 <_start@@Base+0x7fd0>
  40ff56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ff60:	cmp    r12,0x6
  40ff64:	jle    4110b8 <_start@@Base+0xa248>
  40ff6a:	mov    ecx,0x6
  40ff6f:	mov    rdx,rbx
  40ff72:	mov    rsi,r13
  40ff75:	mov    rdi,r15
  40ff78:	call   40a880 <_start@@Base+0x3a10>
  40ff7d:	mov    rbp,rax
  40ff80:	cmp    r13,rax
  40ff83:	je     4110b8 <_start@@Base+0xa248>
  40ff89:	lea    r12,[rsp+0x40]
  40ff8e:	mov    rcx,r12
  40ff91:	mov    rdx,rbx
  40ff94:	mov    rsi,rax
  40ff97:	mov    rdi,r15
  40ff9a:	mov    DWORD PTR [rsp+0x40],0x0
  40ffa2:	call   41e450 <flatcc_json_parser_float@@Base>
  40ffa7:	mov    r13,rax
  40ffaa:	cmp    rax,rbp
  40ffad:	je     41223f <_start@@Base+0xb3cf>
  40ffb3:	vmovss xmm0,DWORD PTR [rsp+0x40]
  40ffb9:	vucomiss xmm0,DWORD PTR [rip+0x1ff4b]        # 42ff0c <_IO_stdin_used@@Base+0x3f0c>
  40ffc1:	jp     40ffd0 <_start@@Base+0x9160>
  40ffc3:	jne    40ffd0 <_start@@Base+0x9160>
  40ffc5:	test   BYTE PTR [r15+0x10],0x2
  40ffca:	je     40ee40 <_start@@Base+0x7fd0>
  40ffd0:	mov    rdi,QWORD PTR [r15]
  40ffd3:	mov    ecx,0x4
  40ffd8:	mov    edx,0x4
  40ffdd:	mov    esi,0x1a
  40ffe2:	call   419de0 <flatcc_builder_table_add@@Base>
  40ffe7:	test   rax,rax
  40ffea:	je     412a1a <_start@@Base+0xbbaa>
  40fff0:	vmovss xmm0,DWORD PTR [rsp+0x40]
  40fff6:	vmovss DWORD PTR [rax],xmm0
  40fffa:	jmp    40ee40 <_start@@Base+0x7fd0>
  40ffff:	nop
  410000:	mov    QWORD PTR [rsp+0x40],0x0
  410009:	mov    DWORD PTR [rsp+0x34],0x0
  410011:	mov    r12,rbx
  410014:	cmp    rbx,rbp
  410017:	je     410042 <_start@@Base+0x91d2>
  410019:	lea    rcx,[rsp+0x34]
  41001e:	lea    r8,[rsp+0x40]
  410023:	mov    rdx,rbx
  410026:	mov    rsi,rbp
  410029:	mov    rdi,r15
  41002c:	call   41f220 <flatcc_json_parser_integer@@Base>
  410031:	mov    r12,rax
  410034:	cmp    rbp,rax
  410037:	jne    411f22 <_start@@Base+0xb0b2>
  41003d:	mov    BYTE PTR [rsp+0x30],0x0
  410042:	lea    r8,[rsp+0x30]
  410047:	lea    rcx,[rip+0x2a692]        # 43a6e0 <__data_start@@Base+0x620>
  41004e:	mov    rdx,rbx
  410051:	mov    rsi,r12
  410054:	mov    rdi,r15
  410057:	call   40afb0 <_start@@Base+0x4140>
  41005c:	mov    r13,rax
  41005f:	cmp    rax,r12
  410062:	je     412b11 <_start@@Base+0xbca1>
  410068:	cmp    rbx,rax
  41006b:	je     412b09 <_start@@Base+0xbc99>
  410071:	movzx  eax,BYTE PTR [rsp+0x30]
  410076:	cmp    al,0x1
  410078:	jne    40e94f <_start@@Base+0x7adf>
  41007e:	test   BYTE PTR [r15+0x10],0x2
  410083:	je     40ee40 <_start@@Base+0x7fd0>
  410089:	jmp    40e94f <_start@@Base+0x7adf>
  41008e:	xchg   ax,ax
  410090:	mov    rdx,rbx
  410093:	mov    rsi,rbp
  410096:	mov    rdi,r15
  410099:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  41009e:	mov    r13,rax
  4100a1:	jmp    40ee40 <_start@@Base+0x7fd0>
  4100a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4100b0:	mov    rdx,rbx
  4100b3:	mov    rsi,r12
  4100b6:	mov    rdi,r15
  4100b9:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4100be:	mov    r13,rax
  4100c1:	jmp    40f450 <_start@@Base+0x85e0>
  4100c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4100d0:	movabs rdi,0x77ffffffffffffff
  4100da:	cmp    rax,rdi
  4100dd:	ja     410200 <_start@@Base+0x9390>
  4100e3:	and    rax,0xffffffffff000000
  4100e9:	movabs rdx,0x7465737433000000
  4100f3:	cmp    rax,rdx
  4100f6:	jne    4100b0 <_start@@Base+0x9240>
  4100f8:	cmp    rsi,0x5
  4100fc:	jle    4100b0 <_start@@Base+0x9240>
  4100fe:	mov    ecx,0x5
  410103:	mov    rdx,rbx
  410106:	mov    rsi,r12
  410109:	mov    rdi,r15
  41010c:	call   40a880 <_start@@Base+0x3a10>
  410111:	cmp    rax,r12
  410114:	je     4100b0 <_start@@Base+0x9240>
  410116:	mov    rdi,QWORD PTR [rsp]
  41011a:	mov    rdx,rbx
  41011d:	lea    rcx,[rdi+0x1a]
  410121:	mov    rsi,rax
  410124:	mov    rdi,r15
  410127:	call   40db50 <_start@@Base+0x6ce0>
  41012c:	mov    r13,rax
  41012f:	jmp    40f450 <_start@@Base+0x85e0>
  410134:	nop    DWORD PTR [rax+0x0]
  410138:	lea    rdx,[rip+0x1bf29]        # 42c068 <_IO_stdin_used@@Base+0x68>
  41013f:	movsxd rax,DWORD PTR [rdx+rsi*4]
  410143:	add    rax,rdx
  410146:	notrack jmp rax
  410149:	nop    DWORD PTR [rax+0x0]
  410150:	movsx  rcx,BYTE PTR [r12+0x6]
  410156:	shl    rcx,0x8
  41015a:	movsx  rdx,BYTE PTR [r12+0x5]
  410160:	mov    rax,rdx
  410163:	shl    rax,0x10
  410167:	or     rcx,rax
  41016a:	movsx  rdx,BYTE PTR [r12+0x4]
  410170:	mov    rax,rdx
  410173:	shl    rax,0x18
  410177:	or     rax,rcx
  41017a:	movsx  rdx,BYTE PTR [r12+0x3]
  410180:	mov    rcx,rdx
  410183:	shl    rcx,0x20
  410187:	or     rax,rcx
  41018a:	movsx  rdx,BYTE PTR [r12+0x2]
  410190:	mov    rcx,rdx
  410193:	shl    rcx,0x28
  410197:	or     rcx,rax
  41019a:	movsx  rdx,BYTE PTR [r12+0x1]
  4101a0:	mov    rax,rdx
  4101a3:	shl    rax,0x30
  4101a7:	or     rcx,rax
  4101aa:	movsx  rdx,BYTE PTR [r12]
  4101af:	mov    rax,rdx
  4101b2:	shl    rax,0x38
  4101b6:	or     rax,rcx
  4101b9:	jmp    40f348 <_start@@Base+0x84d8>
  4101be:	xchg   ax,ax
  4101c0:	xor    ecx,ecx
  4101c2:	jmp    41015a <_start@@Base+0x92ea>
  4101c4:	nop    DWORD PTR [rax+0x0]
  4101c8:	xor    ecx,ecx
  4101ca:	jmp    41016a <_start@@Base+0x92fa>
  4101cc:	nop    DWORD PTR [rax+0x0]
  4101d0:	xor    eax,eax
  4101d2:	jmp    41017a <_start@@Base+0x930a>
  4101d4:	nop    DWORD PTR [rax+0x0]
  4101d8:	xor    eax,eax
  4101da:	jmp    41018a <_start@@Base+0x931a>
  4101dc:	nop    DWORD PTR [rax+0x0]
  4101e0:	xor    ecx,ecx
  4101e2:	jmp    41019a <_start@@Base+0x932a>
  4101e4:	nop    DWORD PTR [rax+0x0]
  4101e8:	xor    ecx,ecx
  4101ea:	jmp    4101aa <_start@@Base+0x933a>
  4101ec:	nop    DWORD PTR [rax+0x0]
  4101f0:	inc    r12
  4101f3:	mov    DWORD PTR [r15+0x14],0x0
  4101fb:	jmp    40f332 <_start@@Base+0x84c2>
  410200:	movabs rdi,0x78ffffffffffffff
  41020a:	cmp    rax,rdi
  41020d:	ja     410450 <_start@@Base+0x95e0>
  410213:	cmp    rsi,0x1
  410217:	jle    4100b0 <_start@@Base+0x9240>
  41021d:	mov    ecx,0x1
  410222:	mov    rdx,rbx
  410225:	mov    rsi,r12
  410228:	mov    rdi,r15
  41022b:	call   40a880 <_start@@Base+0x3a10>
  410230:	cmp    rax,r12
  410233:	je     4100b0 <_start@@Base+0x9240>
  410239:	lea    r12,[rsp+0x40]
  41023e:	mov    rcx,r12
  410241:	mov    rdx,rbx
  410244:	mov    rsi,rax
  410247:	mov    rdi,r15
  41024a:	mov    DWORD PTR [rsp+0x40],0x0
  410252:	mov    QWORD PTR [rsp+0x8],rax
  410257:	call   41e450 <flatcc_json_parser_float@@Base>
  41025c:	mov    r9,QWORD PTR [rsp+0x8]
  410261:	mov    r13,rax
  410264:	cmp    r9,rax
  410267:	je     411517 <_start@@Base+0xa6a7>
  41026d:	vmovss xmm0,DWORD PTR [rsp+0x40]
  410273:	mov    rax,QWORD PTR [rsp]
  410277:	vmovss DWORD PTR [rax],xmm0
  41027b:	jmp    40f450 <_start@@Base+0x85e0>
  410280:	lea    rsi,[r13+0x1]
  410284:	mov    rax,rbx
  410287:	sub    rax,rsi
  41028a:	cmp    rax,0x1
  41028e:	jle    4102a1 <_start@@Base+0x9431>
  410290:	cmp    BYTE PTR [r13+0x1],0x20
  410295:	jg     410600 <_start@@Base+0x9790>
  41029b:	je     410940 <_start@@Base+0x9ad0>
  4102a1:	mov    rdx,rbx
  4102a4:	mov    rdi,r15
  4102a7:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  4102ac:	mov    r12,rax
  4102af:	mov    eax,DWORD PTR [rsp+0x30]
  4102b3:	jmp    40f308 <_start@@Base+0x8498>
  4102b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4102c0:	cmp    rsi,0x5
  4102c4:	jle    4100b0 <_start@@Base+0x9240>
  4102ca:	mov    r13d,DWORD PTR [r15+0x14]
  4102ce:	movzx  eax,BYTE PTR [r12+0x5]
  4102d4:	test   r13d,r13d
  4102d7:	je     410610 <_start@@Base+0x97a0>
  4102dd:	cmp    al,0x20
  4102df:	jle    4102e9 <_start@@Base+0x9479>
  4102e1:	cmp    al,0x3a
  4102e3:	jne    4100b0 <_start@@Base+0x9240>
  4102e9:	mov    DWORD PTR [r15+0x14],0x0
  4102f1:	lea    rsi,[r12+0x5]
  4102f6:	mov    rax,rbx
  4102f9:	sub    rax,rsi
  4102fc:	cmp    rax,0x1
  410300:	jle    41030d <_start@@Base+0x949d>
  410302:	cmp    BYTE PTR [rsi],0x20
  410305:	jg     41031b <_start@@Base+0x94ab>
  410307:	je     411638 <_start@@Base+0xa7c8>
  41030d:	mov    rdx,rbx
  410310:	mov    rdi,r15
  410313:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  410318:	mov    rsi,rax
  41031b:	cmp    rbx,rsi
  41031e:	je     410329 <_start@@Base+0x94b9>
  410320:	cmp    BYTE PTR [rsi],0x3a
  410323:	je     411dd3 <_start@@Base+0xaf63>
  410329:	mov    ecx,0x4
  41032e:	mov    rdx,rbx
  410331:	mov    rdi,r15
  410334:	call   41d640 <flatcc_json_parser_set_error@@Base>
  410339:	mov    r9,rax
  41033c:	cmp    r9,r12
  41033f:	je     4100b0 <_start@@Base+0x9240>
  410345:	mov    BYTE PTR [rsp+0x2c],0x0
  41034a:	mov    QWORD PTR [rsp+0x40],0x0
  410353:	mov    DWORD PTR [rsp+0x34],0x0
  41035b:	cmp    rbx,r9
  41035e:	je     410958 <_start@@Base+0x9ae8>
  410364:	mov    rsi,r9
  410367:	lea    rcx,[rsp+0x34]
  41036c:	lea    r8,[rsp+0x40]
  410371:	mov    rdx,rbx
  410374:	mov    rdi,r15
  410377:	mov    QWORD PTR [rsp+0x8],r9
  41037c:	call   41f220 <flatcc_json_parser_integer@@Base>
  410381:	mov    r9,QWORD PTR [rsp+0x8]
  410386:	mov    r13,rax
  410389:	cmp    r9,rax
  41038c:	jne    410bd0 <_start@@Base+0x9d60>
  410392:	lea    r8,[rsp+0x2c]
  410397:	lea    rcx,[rip+0x29e82]        # 43a220 <__data_start@@Base+0x160>
  41039e:	mov    rdx,rbx
  4103a1:	mov    rsi,r13
  4103a4:	mov    rdi,r15
  4103a7:	call   40b850 <_start@@Base+0x49e0>
  4103ac:	cmp    rax,r13
  4103af:	je     41257f <_start@@Base+0xb70f>
  4103b5:	cmp    rbx,rax
  4103b8:	je     41257f <_start@@Base+0xb70f>
  4103be:	movzx  edx,BYTE PTR [rsp+0x2c]
  4103c3:	mov    r13,rax
  4103c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4103d0:	mov    rax,QWORD PTR [rsp]
  4103d4:	mov    BYTE PTR [rax+0x18],dl
  4103d7:	jmp    40f450 <_start@@Base+0x85e0>
  4103dc:	nop    DWORD PTR [rax+0x0]
  4103e0:	cmp    BYTE PTR [r13+0x1],0x20
  4103e5:	jle    40f469 <_start@@Base+0x85f9>
  4103eb:	inc    r13
  4103ee:	jmp    40f47a <_start@@Base+0x860a>
  4103f3:	nop    DWORD PTR [rax+rax*1+0x0]
  4103f8:	lea    r12,[r13+0x1]
  4103fc:	mov    rax,rbx
  4103ff:	sub    rax,r12
  410402:	cmp    rax,0x1
  410406:	jle    410415 <_start@@Base+0x95a5>
  410408:	cmp    BYTE PTR [r13+0x1],0x20
  41040d:	jg     410426 <_start@@Base+0x95b6>
  41040f:	je     410c28 <_start@@Base+0x9db8>
  410415:	mov    rsi,r12
  410418:	mov    rdx,rbx
  41041b:	mov    rdi,r15
  41041e:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  410423:	mov    r12,rax
  410426:	cmp    rbx,r12
  410429:	je     410d58 <_start@@Base+0x9ee8>
  41042f:	cmp    BYTE PTR [r12],0x7d
  410434:	je     410d10 <_start@@Base+0x9ea0>
  41043a:	mov    DWORD PTR [rsp+0x30],0x1
  410442:	jmp    40f310 <_start@@Base+0x84a0>
  410447:	nop    WORD PTR [rax+rax*1+0x0]
  410450:	movabs rdi,0xff00000000000000
  41045a:	and    rax,rdi
  41045d:	movabs rdx,0x7a00000000000000
  410467:	cmp    rax,rdx
  41046a:	je     410650 <_start@@Base+0x97e0>
  410470:	movabs rdx,0x7900000000000000
  41047a:	cmp    rax,rdx
  41047d:	jne    4100b0 <_start@@Base+0x9240>
  410483:	cmp    rsi,0x1
  410487:	jle    4100b0 <_start@@Base+0x9240>
  41048d:	mov    ecx,0x1
  410492:	mov    rdx,rbx
  410495:	mov    rsi,r12
  410498:	mov    rdi,r15
  41049b:	call   40a880 <_start@@Base+0x3a10>
  4104a0:	cmp    rax,r12
  4104a3:	je     4100b0 <_start@@Base+0x9240>
  4104a9:	lea    r12,[rsp+0x40]
  4104ae:	mov    rcx,r12
  4104b1:	mov    rdx,rbx
  4104b4:	mov    rsi,rax
  4104b7:	mov    rdi,r15
  4104ba:	mov    DWORD PTR [rsp+0x40],0x0
  4104c2:	mov    QWORD PTR [rsp+0x8],rax
  4104c7:	call   41e450 <flatcc_json_parser_float@@Base>
  4104cc:	mov    r9,QWORD PTR [rsp+0x8]
  4104d1:	mov    r13,rax
  4104d4:	cmp    r9,rax
  4104d7:	je     411edd <_start@@Base+0xb06d>
  4104dd:	vmovss xmm0,DWORD PTR [rsp+0x40]
  4104e3:	mov    rax,QWORD PTR [rsp]
  4104e7:	vmovss DWORD PTR [rax+0x4],xmm0
  4104ec:	jmp    40f450 <_start@@Base+0x85e0>
  4104f1:	nop    DWORD PTR [rax+0x0]
  4104f8:	mov    rsi,r12
  4104fb:	mov    ecx,0x5
  410500:	mov    rdx,rbx
  410503:	mov    rdi,r15
  410506:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41050b:	mov    r12,rax
  41050e:	jmp    40f332 <_start@@Base+0x84c2>
  410513:	nop    DWORD PTR [rax+rax*1+0x0]
  410518:	mov    rsi,r13
  41051b:	mov    rdx,rbx
  41051e:	mov    rdi,r15
  410521:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  410526:	mov    r13,rax
  410529:	jmp    40ee40 <_start@@Base+0x7fd0>
  41052e:	xchg   ax,ax
  410530:	movabs rax,0x7465737435000000
  41053a:	cmp    r8,rax
  41053d:	jne    410960 <_start@@Base+0x9af0>
  410543:	cmp    r12,0x5
  410547:	jle    40fdd0 <_start@@Base+0x8f60>
  41054d:	mov    ecx,0x5
  410552:	mov    rdx,rbx
  410555:	mov    rsi,r13
  410558:	mov    rdi,r15
  41055b:	call   40a880 <_start@@Base+0x3a10>
  410560:	mov    rbp,rax
  410563:	cmp    r13,rax
  410566:	je     40fdd0 <_start@@Base+0x8f60>
  41056c:	mov    rdi,QWORD PTR [r15]
  41056f:	mov    ecx,0x3fffffff
  410574:	mov    edx,0x2
  410579:	mov    esi,0x4
  41057e:	call   418340 <flatcc_builder_start_vector@@Base>
  410583:	test   eax,eax
  410585:	jne    4128da <_start@@Base+0xba6a>
  41058b:	mov    rsi,rbp
  41058e:	mov    rcx,r14
  410591:	mov    rdx,rbx
  410594:	mov    rdi,r15
  410597:	call   40a940 <_start@@Base+0x3ad0>
  41059c:	mov    esi,DWORD PTR [rsp+0x24]
  4105a0:	mov    r13,rax
  4105a3:	test   esi,esi
  4105a5:	jne    4105e1 <_start@@Base+0x9771>
  4105a7:	jmp    4117f4 <_start@@Base+0xa984>
  4105ac:	nop    DWORD PTR [rax+0x0]
  4105b0:	mov    rsi,r13
  4105b3:	mov    rcx,rax
  4105b6:	mov    rdx,rbx
  4105b9:	mov    rdi,r15
  4105bc:	call   40db50 <_start@@Base+0x6ce0>
  4105c1:	mov    rsi,rax
  4105c4:	mov    rcx,r14
  4105c7:	mov    rdx,rbx
  4105ca:	mov    rdi,r15
  4105cd:	call   40c7c0 <_start@@Base+0x5950>
  4105d2:	mov    ecx,DWORD PTR [rsp+0x24]
  4105d6:	mov    r13,rax
  4105d9:	test   ecx,ecx
  4105db:	je     4117f4 <_start@@Base+0xa984>
  4105e1:	mov    rdi,QWORD PTR [r15]
  4105e4:	mov    esi,0x1
  4105e9:	call   417c90 <flatcc_builder_extend_vector@@Base>
  4105ee:	test   rax,rax
  4105f1:	jne    4105b0 <_start@@Base+0x9740>
  4105f3:	mov    r14,r13
  4105f6:	jmp    40e667 <_start@@Base+0x77f7>
  4105fb:	nop    DWORD PTR [rax+rax*1+0x0]
  410600:	mov    r13,rsi
  410603:	jmp    40ee40 <_start@@Base+0x7fd0>
  410608:	nop    DWORD PTR [rax+rax*1+0x0]
  410610:	cmp    al,0x22
  410612:	jne    4100b0 <_start@@Base+0x9240>
  410618:	lea    rsi,[r12+0x6]
  41061d:	jmp    4102f6 <_start@@Base+0x9486>
  410622:	nop    WORD PTR [rax+rax*1+0x0]
  410628:	cmp    al,0x22
  41062a:	jne    4100b0 <_start@@Base+0x9240>
  410630:	lea    rsi,[r12+0x6]
  410635:	jmp    40f3b3 <_start@@Base+0x8543>
  41063a:	nop    WORD PTR [rax+rax*1+0x0]
  410640:	movbe  rax,QWORD PTR [r13+0x8]
  410646:	jmp    40eedf <_start@@Base+0x806f>
  41064b:	nop    DWORD PTR [rax+rax*1+0x0]
  410650:	cmp    rsi,0x1
  410654:	jle    4100b0 <_start@@Base+0x9240>
  41065a:	mov    ecx,0x1
  41065f:	mov    rdx,rbx
  410662:	mov    rsi,r12
  410665:	mov    rdi,r15
  410668:	call   40a880 <_start@@Base+0x3a10>
  41066d:	cmp    rax,r12
  410670:	je     4100b0 <_start@@Base+0x9240>
  410676:	lea    r12,[rsp+0x40]
  41067b:	mov    rcx,r12
  41067e:	mov    rdx,rbx
  410681:	mov    rsi,rax
  410684:	mov    rdi,r15
  410687:	mov    DWORD PTR [rsp+0x40],0x0
  41068f:	mov    QWORD PTR [rsp+0x8],rax
  410694:	call   41e450 <flatcc_json_parser_float@@Base>
  410699:	mov    r9,QWORD PTR [rsp+0x8]
  41069e:	mov    r13,rax
  4106a1:	cmp    r9,rax
  4106a4:	je     411e5e <_start@@Base+0xafee>
  4106aa:	vmovss xmm0,DWORD PTR [rsp+0x40]
  4106b0:	mov    rax,QWORD PTR [rsp]
  4106b4:	vmovss DWORD PTR [rax+0x8],xmm0
  4106b9:	jmp    40f450 <_start@@Base+0x85e0>
  4106be:	xchg   ax,ax
  4106c0:	lea    rbp,[r13+0x8]
  4106c4:	mov    r8,rbx
  4106c7:	sub    r8,rbp
  4106ca:	cmp    r8,0x7
  4106ce:	ja     411594 <_start@@Base+0xa724>
  4106d4:	mov    rsi,rbx
  4106d7:	mov    rdi,rbp
  4106da:	call   406f60 <_start@@Base+0xf0>
  4106df:	movabs rdx,0xffff000000000000
  4106e9:	and    rax,rdx
  4106ec:	movabs rdx,0x3634000000000000
  4106f6:	cmp    rax,rdx
  4106f9:	jne    410cd8 <_start@@Base+0x9e68>
  4106ff:	cmp    r8,0x2
  410703:	jle    4110a2 <_start@@Base+0xa232>
  410709:	mov    ecx,0x2
  41070e:	mov    rdx,rbx
  410711:	mov    rsi,rbp
  410714:	mov    rdi,r15
  410717:	call   40a880 <_start@@Base+0x3a10>
  41071c:	mov    r13,rax
  41071f:	cmp    rbp,rax
  410722:	je     4110a2 <_start@@Base+0xa232>
  410728:	mov    rdi,QWORD PTR [r15]
  41072b:	mov    esi,0x3
  410730:	mov    DWORD PTR [rsp+0x28],0x0
  410738:	call   418560 <flatcc_builder_start_table@@Base>
  41073d:	test   eax,eax
  41073f:	jne    4108f9 <_start@@Base+0x9a89>
  410745:	lea    rbp,[rsp+0x34]
  41074a:	mov    rsi,r13
  41074d:	mov    rcx,rbp
  410750:	mov    rdx,rbx
  410753:	mov    rdi,r15
  410756:	call   40a7e0 <_start@@Base+0x3970>
  41075b:	mov    r13,rax
  41075e:	mov    eax,DWORD PTR [rsp+0x34]
  410762:	test   eax,eax
  410764:	je     411f6b <_start@@Base+0xb0fb>
  41076a:	movabs r12,0x6e6573746563ffff
  410774:	jmp    410826 <_start@@Base+0x99b6>
  410779:	nop    DWORD PTR [rax+0x0]
  410780:	movabs rdi,0xffffffff00000000
  41078a:	and    rax,rdi
  41078d:	movabs rdx,0x6461746100000000
  410797:	cmp    rax,rdx
  41079a:	jne    4112f0 <_start@@Base+0xa480>
  4107a0:	cmp    r8,0x4
  4107a4:	jle    4112f0 <_start@@Base+0xa480>
  4107aa:	mov    ecx,0x4
  4107af:	mov    rdx,rbx
  4107b2:	mov    rsi,r13
  4107b5:	mov    rdi,r15
  4107b8:	call   40a880 <_start@@Base+0x3a10>
  4107bd:	cmp    rax,r13
  4107c0:	je     4112f0 <_start@@Base+0xa480>
  4107c6:	lea    rcx,[rsp+0x40]
  4107cb:	xor    r8d,r8d
  4107ce:	mov    rdx,rbx
  4107d1:	mov    rsi,rax
  4107d4:	mov    rdi,r15
  4107d7:	call   41f2e0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
  4107dc:	mov    r13,rax
  4107df:	mov    eax,DWORD PTR [rsp+0x40]
  4107e3:	test   eax,eax
  4107e5:	je     4108f9 <_start@@Base+0x9a89>
  4107eb:	mov    rdi,QWORD PTR [r15]
  4107ee:	xor    esi,esi
  4107f0:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  4107f5:	test   rax,rax
  4107f8:	je     4108f9 <_start@@Base+0x9a89>
  4107fe:	mov    edx,DWORD PTR [rsp+0x40]
  410802:	mov    DWORD PTR [rax],edx
  410804:	mov    rsi,r13
  410807:	mov    rcx,rbp
  41080a:	mov    rdx,rbx
  41080d:	mov    rdi,r15
  410810:	call   40c910 <_start@@Base+0x5aa0>
  410815:	mov    r9d,DWORD PTR [rsp+0x34]
  41081a:	mov    r13,rax
  41081d:	test   r9d,r9d
  410820:	je     411f6b <_start@@Base+0xb0fb>
  410826:	cmp    rbx,r13
  410829:	je     410848 <_start@@Base+0x99d8>
  41082b:	movzx  eax,BYTE PTR [r13+0x0]
  410830:	cmp    al,0x22
  410832:	je     411350 <_start@@Base+0xa4e0>
  410838:	cmp    al,0x2e
  41083a:	je     4115c8 <_start@@Base+0xa758>
  410840:	mov    DWORD PTR [r15+0x14],0x1
  410848:	mov    r8,rbx
  41084b:	sub    r8,r13
  41084e:	cmp    r8,0x7
  410852:	ja     411330 <_start@@Base+0xa4c0>
  410858:	mov    rsi,rbx
  41085b:	mov    rdi,r13
  41085e:	call   406f60 <_start@@Base+0xf0>
  410863:	cmp    rax,r12
  410866:	jbe    410780 <_start@@Base+0x9910>
  41086c:	mov    rdx,rax
  41086f:	xor    dl,dl
  410871:	movabs rdi,0x75726c6461746100
  41087b:	cmp    rdx,rdi
  41087e:	je     411370 <_start@@Base+0xa500>
  410884:	xor    ax,ax
  410887:	movabs rdi,0x6e65737465640000
  410891:	cmp    rax,rdi
  410894:	jne    4112f0 <_start@@Base+0xa480>
  41089a:	cmp    r8,0x6
  41089e:	jle    4112f0 <_start@@Base+0xa480>
  4108a4:	mov    ecx,0x6
  4108a9:	mov    rdx,rbx
  4108ac:	mov    rsi,r13
  4108af:	mov    rdi,r15
  4108b2:	call   40a880 <_start@@Base+0x3a10>
  4108b7:	cmp    rax,r13
  4108ba:	je     4112f0 <_start@@Base+0xa480>
  4108c0:	lea    rcx,[rsp+0x40]
  4108c5:	xor    r8d,r8d
  4108c8:	mov    rdx,rbx
  4108cb:	mov    rsi,rax
  4108ce:	mov    rdi,r15
  4108d1:	call   41f2e0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
  4108d6:	mov    r10d,DWORD PTR [rsp+0x40]
  4108db:	mov    r13,rax
  4108de:	test   r10d,r10d
  4108e1:	je     4108f9 <_start@@Base+0x9a89>
  4108e3:	mov    rdi,QWORD PTR [r15]
  4108e6:	mov    esi,0x2
  4108eb:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  4108f0:	test   rax,rax
  4108f3:	jne    4107fe <_start@@Base+0x998e>
  4108f9:	mov    rsi,r13
  4108fc:	mov    rdi,r15
  4108ff:	mov    ecx,0x21
  410904:	mov    rdx,rbx
  410907:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41090c:	mov    edi,DWORD PTR [rsp+0x28]
  410910:	mov    r13,rax
  410913:	test   edi,edi
  410915:	je     412932 <_start@@Base+0xbac2>
  41091b:	mov    rdi,QWORD PTR [r15]
  41091e:	mov    esi,0x23
  410923:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  410928:	test   rax,rax
  41092b:	je     41292a <_start@@Base+0xbaba>
  410931:	mov    edx,DWORD PTR [rsp+0x28]
  410935:	mov    DWORD PTR [rax],edx
  410937:	jmp    40ee40 <_start@@Base+0x7fd0>
  41093c:	nop    DWORD PTR [rax+0x0]
  410940:	cmp    BYTE PTR [r13+0x2],0x20
  410945:	jle    4102a1 <_start@@Base+0x9431>
  41094b:	add    r13,0x2
  41094f:	jmp    40ee40 <_start@@Base+0x7fd0>
  410954:	nop    DWORD PTR [rax+0x0]
  410958:	mov    r13,rbx
  41095b:	jmp    410392 <_start@@Base+0x9522>
  410960:	endbr64 
  410964:	movabs rax,0x746573745f747970
  41096e:	cmp    rbp,rax
  410971:	jne    40fdd0 <_start@@Base+0x8f60>
  410977:	lea    rbp,[r13+0x8]
  41097b:	mov    r8,rbx
  41097e:	sub    r8,rbp
  410981:	cmp    r8,0x7
  410985:	ja     4115bd <_start@@Base+0xa74d>
  41098b:	mov    rsi,rbx
  41098e:	mov    rdi,rbp
  410991:	call   406f60 <_start@@Base+0xf0>
  410996:	movabs rdx,0xff00000000000000
  4109a0:	and    rax,rdx
  4109a3:	movabs rdx,0x6500000000000000
  4109ad:	cmp    rax,rdx
  4109b0:	jne    410cf0 <_start@@Base+0x9e80>
  4109b6:	cmp    r8,0x1
  4109ba:	jle    4110ce <_start@@Base+0xa25e>
  4109c0:	mov    ecx,0x1
  4109c5:	mov    rdx,rbx
  4109c8:	mov    rsi,rbp
  4109cb:	mov    rdi,r15
  4109ce:	call   40a880 <_start@@Base+0x3a10>
  4109d3:	cmp    rbp,rax
  4109d6:	je     4110ce <_start@@Base+0xa25e>
  4109dc:	lea    rdi,[rip+0x44dd]        # 414ec0 <_start@@Base+0xe050>
  4109e3:	push   rdi
  4109e4:	lea    rcx,[rip+0x29d35]        # 43a720 <__data_start@@Base+0x660>
  4109eb:	mov    rdx,rbx
  4109ee:	push   rcx
  4109ef:	mov    r8d,0x8
  4109f5:	xor    ecx,ecx
  4109f7:	mov    r9,QWORD PTR [rsp+0x48]
  4109fc:	mov    rsi,rax
  4109ff:	mov    rdi,r15
  410a02:	call   41fb60 <flatcc_json_parser_union_type@@Base>
  410a07:	mov    r13,rax
  410a0a:	pop    rax
  410a0b:	pop    rdx
  410a0c:	jmp    40ee40 <_start@@Base+0x7fd0>
  410a11:	nop    DWORD PTR [rax+0x0]
  410a18:	mov    rsi,r13
  410a1b:	mov    rdx,rbx
  410a1e:	mov    rdi,r15
  410a21:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  410a26:	mov    r13,rax
  410a29:	jmp    40ee40 <_start@@Base+0x7fd0>
  410a2e:	xchg   ax,ax
  410a30:	lea    r8,[r13+0x8]
  410a34:	mov    rax,rbx
  410a37:	sub    rax,r8
  410a3a:	cmp    rax,0x7
  410a3e:	ja     41162d <_start@@Base+0xa7bd>
  410a44:	mov    rsi,rbx
  410a47:	mov    rdi,r8
  410a4a:	call   406f60 <_start@@Base+0xf0>
  410a4f:	movabs rdx,0x616d657370616365
  410a59:	cmp    rax,rdx
  410a5c:	jne    410fc0 <_start@@Base+0xa150>
  410a62:	lea    rbp,[r13+0x10]
  410a66:	mov    r8,rbx
  410a69:	sub    r8,rbp
  410a6c:	cmp    r8,0x7
  410a70:	ja     4111b6 <_start@@Base+0xa346>
  410a76:	mov    rsi,rbx
  410a79:	mov    rdi,rbp
  410a7c:	call   406f60 <_start@@Base+0xf0>
  410a81:	and    rax,0xffffffffff000000
  410a87:	movabs rdx,0x5f74657374000000
  410a91:	cmp    rax,rdx
  410a94:	jne    411c7d <_start@@Base+0xae0d>
  410a9a:	cmp    r8,0x5
  410a9e:	jle    412416 <_start@@Base+0xb5a6>
  410aa4:	mov    ecx,0x5
  410aa9:	mov    rdx,rbx
  410aac:	mov    rsi,rbp
  410aaf:	mov    rdi,r15
  410ab2:	call   40a880 <_start@@Base+0x3a10>
  410ab7:	cmp    rbp,rax
  410aba:	je     412416 <_start@@Base+0xb5a6>
  410ac0:	lea    rbp,[rsp+0x28]
  410ac5:	mov    rcx,rbp
  410ac8:	mov    rdx,rbx
  410acb:	mov    rsi,rax
  410ace:	mov    rdi,r15
  410ad1:	call   40e390 <_start@@Base+0x7520>
  410ad6:	mov    r13,rax
  410ad9:	mov    eax,DWORD PTR [rsp+0x28]
  410add:	test   eax,eax
  410adf:	je     412a4a <_start@@Base+0xbbda>
  410ae5:	mov    rdi,QWORD PTR [r15]
  410ae8:	mov    esi,0x22
  410aed:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  410af2:	test   rax,rax
  410af5:	je     412a42 <_start@@Base+0xbbd2>
  410afb:	mov    edx,DWORD PTR [rsp+0x28]
  410aff:	mov    DWORD PTR [rax],edx
  410b01:	jmp    40ee40 <_start@@Base+0x7fd0>
  410b06:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410b10:	movabs rdx,0x7533325f666e7630
  410b1a:	cmp    rax,rdx
  410b1d:	ja     410da0 <_start@@Base+0x9f30>
  410b23:	movabs rdx,0x7336345f666e7631
  410b2d:	cmp    rax,rdx
  410b30:	jne    411076 <_start@@Base+0xa206>
  410b36:	cmp    r8,0x8
  410b3a:	jle    411fbd <_start@@Base+0xb14d>
  410b40:	mov    ecx,0x8
  410b45:	mov    rdx,rbx
  410b48:	mov    rsi,rbp
  410b4b:	mov    rdi,r15
  410b4e:	call   40a880 <_start@@Base+0x3a10>
  410b53:	mov    r12,rax
  410b56:	cmp    rbp,rax
  410b59:	je     411fbd <_start@@Base+0xb14d>
  410b5f:	lea    rbp,[rsp+0x40]
  410b64:	mov    rcx,rbp
  410b67:	mov    rdx,rbx
  410b6a:	mov    rsi,rax
  410b6d:	mov    rdi,r15
  410b70:	mov    QWORD PTR [rsp+0x40],0x0
  410b79:	call   4094a0 <_start@@Base+0x2630>
  410b7e:	mov    r13,rax
  410b81:	cmp    rax,r12
  410b84:	je     412702 <_start@@Base+0xb892>
  410b8a:	cmp    QWORD PTR [rsp+0x40],0x0
  410b90:	jne    410b9d <_start@@Base+0x9d2d>
  410b92:	test   BYTE PTR [r15+0x10],0x2
  410b97:	je     40ee40 <_start@@Base+0x7fd0>
  410b9d:	mov    rdi,QWORD PTR [r15]
  410ba0:	mov    ecx,0x8
  410ba5:	mov    edx,0x8
  410baa:	mov    esi,0x12
  410baf:	call   419de0 <flatcc_builder_table_add@@Base>
  410bb4:	test   rax,rax
  410bb7:	je     412bd9 <_start@@Base+0xbd69>
  410bbd:	mov    rdx,QWORD PTR [rsp+0x40]
  410bc2:	mov    QWORD PTR [rax],rdx
  410bc5:	jmp    40ee40 <_start@@Base+0x7fd0>
  410bca:	nop    WORD PTR [rax+rax*1+0x0]
  410bd0:	mov    rax,QWORD PTR [rsp+0x40]
  410bd5:	mov    r12d,DWORD PTR [rsp+0x34]
  410bda:	mov    edx,eax
  410bdc:	test   r12d,r12d
  410bdf:	jne    411016 <_start@@Base+0xa1a6>
  410be5:	cmp    rax,0x7f
  410be9:	jbe    4103d0 <_start@@Base+0x9560>
  410bef:	mov    QWORD PTR [rsp+0x8],r9
  410bf4:	mov    ecx,0x7
  410bf9:	mov    rsi,r13
  410bfc:	mov    rdx,rbx
  410bff:	mov    rdi,r15
  410c02:	call   41d640 <flatcc_json_parser_set_error@@Base>
  410c07:	mov    r9,QWORD PTR [rsp+0x8]
  410c0c:	mov    r13,rax
  410c0f:	cmp    r9,rax
  410c12:	je     410392 <_start@@Base+0x9522>
  410c18:	movzx  edx,BYTE PTR [rsp+0x2c]
  410c1d:	jmp    4103d0 <_start@@Base+0x9560>
  410c22:	nop    WORD PTR [rax+rax*1+0x0]
  410c28:	cmp    BYTE PTR [r13+0x2],0x20
  410c2d:	jle    410415 <_start@@Base+0x95a5>
  410c33:	lea    r12,[r13+0x2]
  410c37:	jmp    410426 <_start@@Base+0x95b6>
  410c3c:	nop    DWORD PTR [rax+0x0]
  410c40:	mov    rsi,r13
  410c43:	mov    rdx,rbx
  410c46:	mov    rdi,r15
  410c49:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  410c4e:	mov    r13,rax
  410c51:	jmp    40ee40 <_start@@Base+0x7fd0>
  410c56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410c60:	mov    rsi,r13
  410c63:	mov    rdx,rbx
  410c66:	mov    rdi,r15
  410c69:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  410c6e:	mov    r13,rax
  410c71:	jmp    40ee40 <_start@@Base+0x7fd0>
  410c76:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410c80:	mov    rdx,rbx
  410c83:	mov    rsi,rbp
  410c86:	mov    rdi,r15
  410c89:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  410c8e:	mov    r13,rax
  410c91:	jmp    40ee40 <_start@@Base+0x7fd0>
  410c96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410ca0:	mov    r8,r12
  410ca3:	lea    rcx,[rip+0x29556]        # 43a200 <__data_start@@Base+0x140>
  410caa:	mov    rdx,rbx
  410cad:	mov    rsi,rax
  410cb0:	mov    rdi,r15
  410cb3:	call   40abc0 <_start@@Base+0x3d50>
  410cb8:	cmp    r13,rax
  410cbb:	je     41257f <_start@@Base+0xb70f>
  410cc1:	cmp    rbx,rax
  410cc4:	je     41257f <_start@@Base+0xb70f>
  410cca:	mov    r13,rax
  410ccd:	jmp    40f437 <_start@@Base+0x85c7>
  410cd2:	nop    WORD PTR [rax+rax*1+0x0]
  410cd8:	mov    rdx,rbx
  410cdb:	mov    rsi,rbp
  410cde:	mov    rdi,r15
  410ce1:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  410ce6:	mov    r13,rax
  410ce9:	jmp    40ee40 <_start@@Base+0x7fd0>
  410cee:	xchg   ax,ax
  410cf0:	mov    rdx,rbx
  410cf3:	mov    rsi,rbp
  410cf6:	mov    rdi,r15
  410cf9:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  410cfe:	mov    r13,rax
  410d01:	jmp    40ee40 <_start@@Base+0x7fd0>
  410d06:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410d10:	lea    r13,[r12+0x1]
  410d15:	mov    rax,rbx
  410d18:	sub    rax,r13
  410d1b:	mov    DWORD PTR [rsp+0x30],0x0
  410d23:	cmp    rax,0x1
  410d27:	jle    410d3b <_start@@Base+0x9ecb>
  410d29:	cmp    BYTE PTR [r12+0x1],0x20
  410d2f:	jg     40ee40 <_start@@Base+0x7fd0>
  410d35:	je     41221e <_start@@Base+0xb3ae>
  410d3b:	mov    rdx,rbx
  410d3e:	mov    rsi,r13
  410d41:	mov    rdi,r15
  410d44:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  410d49:	mov    r12,rax
  410d4c:	mov    eax,DWORD PTR [rsp+0x30]
  410d50:	jmp    40f308 <_start@@Base+0x8498>
  410d55:	nop    DWORD PTR [rax]
  410d58:	mov    ecx,0xa
  410d5d:	mov    rdx,rbx
  410d60:	mov    rsi,rbx
  410d63:	mov    rdi,r15
  410d66:	mov    DWORD PTR [rsp+0x30],0x0
  410d6e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  410d73:	mov    r12,rax
  410d76:	mov    eax,DWORD PTR [rsp+0x30]
  410d7a:	jmp    40f308 <_start@@Base+0x8498>
  410d7f:	nop
  410d80:	mov    rsi,r13
  410d83:	mov    rdx,rbx
  410d86:	mov    rdi,r15
  410d89:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  410d8e:	mov    r13,rax
  410d91:	jmp    40ee40 <_start@@Base+0x7fd0>
  410d96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410da0:	movabs rdx,0x7533325f666e7631
  410daa:	cmp    rax,rdx
  410dad:	je     4111ed <_start@@Base+0xa37d>
  410db3:	movabs rdx,0x7536345f666e7631
  410dbd:	cmp    rax,rdx
  410dc0:	jne    411e32 <_start@@Base+0xafc2>
  410dc6:	cmp    r8,0x8
  410dca:	jle    412271 <_start@@Base+0xb401>
  410dd0:	mov    ecx,0x8
  410dd5:	mov    rdx,rbx
  410dd8:	mov    rsi,rbp
  410ddb:	mov    rdi,r15
  410dde:	call   40a880 <_start@@Base+0x3a10>
  410de3:	mov    r12,rax
  410de6:	cmp    rbp,rax
  410de9:	je     412271 <_start@@Base+0xb401>
  410def:	lea    rbp,[rsp+0x40]
  410df4:	mov    rcx,rbp
  410df7:	mov    rdx,rbx
  410dfa:	mov    rsi,rax
  410dfd:	mov    rdi,r15
  410e00:	mov    QWORD PTR [rsp+0x40],0x0
  410e09:	call   4097b0 <_start@@Base+0x2940>
  410e0e:	mov    r13,rax
  410e11:	cmp    rax,r12
  410e14:	je     4128a8 <_start@@Base+0xba38>
  410e1a:	cmp    QWORD PTR [rsp+0x40],0x0
  410e20:	jne    410e2d <_start@@Base+0x9fbd>
  410e22:	test   BYTE PTR [r15+0x10],0x2
  410e27:	je     40ee40 <_start@@Base+0x7fd0>
  410e2d:	mov    rdi,QWORD PTR [r15]
  410e30:	mov    ecx,0x8
  410e35:	mov    edx,0x8
  410e3a:	mov    esi,0x13
  410e3f:	call   419de0 <flatcc_builder_table_add@@Base>
  410e44:	test   rax,rax
  410e47:	je     412b29 <_start@@Base+0xbcb9>
  410e4d:	mov    rdx,QWORD PTR [rsp+0x40]
  410e52:	mov    QWORD PTR [rax],rdx
  410e55:	jmp    40ee40 <_start@@Base+0x7fd0>
  410e5a:	nop    WORD PTR [rax+rax*1+0x0]
  410e60:	lea    rbp,[r13+0x8]
  410e64:	mov    r8,rbx
  410e67:	sub    r8,rbp
  410e6a:	cmp    r8,0x7
  410e6e:	ja     4111e2 <_start@@Base+0xa372>
  410e74:	mov    rsi,rbx
  410e77:	mov    rdi,rbp
  410e7a:	call   406f60 <_start@@Base+0xf0>
  410e7f:	movabs rdx,0xff00000000000000
  410e89:	and    rax,rdx
  410e8c:	movabs rdx,0x7900000000000000
  410e96:	cmp    rax,rdx
  410e99:	jne    411ca9 <_start@@Base+0xae39>
  410e9f:	cmp    r8,0x1
  410ea3:	jle    411f55 <_start@@Base+0xb0e5>
  410ea9:	mov    ecx,0x1
  410eae:	mov    rdx,rbx
  410eb1:	mov    rsi,rbp
  410eb4:	mov    rdi,r15
  410eb7:	call   40a880 <_start@@Base+0x3a10>
  410ebc:	mov    r13,rax
  410ebf:	cmp    rbp,rax
  410ec2:	je     411f55 <_start@@Base+0xb0e5>
  410ec8:	mov    rdi,QWORD PTR [r15]
  410ecb:	mov    ecx,0xffffffff
  410ed0:	mov    edx,0x1
  410ed5:	mov    esi,0x1
  410eda:	call   418340 <flatcc_builder_start_vector@@Base>
  410edf:	test   eax,eax
  410ee1:	jne    412b81 <_start@@Base+0xbd11>
  410ee7:	mov    rsi,r13
  410eea:	mov    rcx,r14
  410eed:	mov    rdx,rbx
  410ef0:	mov    rdi,r15
  410ef3:	call   40a940 <_start@@Base+0x3ad0>
  410ef8:	mov    r13,rax
  410efb:	mov    eax,DWORD PTR [rsp+0x24]
  410eff:	test   eax,eax
  410f01:	je     4124e4 <_start@@Base+0xb674>
  410f07:	lea    rbp,[rsp+0x40]
  410f0c:	jmp    410f39 <_start@@Base+0xa0c9>
  410f0e:	xchg   ax,ax
  410f10:	movzx  edx,BYTE PTR [rsp+0x40]
  410f15:	mov    rcx,r14
  410f18:	mov    BYTE PTR [r12],dl
  410f1c:	mov    rsi,rax
  410f1f:	mov    rdx,rbx
  410f22:	mov    rdi,r15
  410f25:	call   40c7c0 <_start@@Base+0x5950>
  410f2a:	mov    r13,rax
  410f2d:	mov    eax,DWORD PTR [rsp+0x24]
  410f31:	test   eax,eax
  410f33:	je     4124e4 <_start@@Base+0xb674>
  410f39:	mov    rdi,QWORD PTR [r15]
  410f3c:	mov    esi,0x1
  410f41:	mov    BYTE PTR [rsp+0x40],0x0
  410f46:	call   417c90 <flatcc_builder_extend_vector@@Base>
  410f4b:	mov    r12,rax
  410f4e:	test   rax,rax
  410f51:	je     412577 <_start@@Base+0xb707>
  410f57:	mov    rcx,rbp
  410f5a:	mov    rdx,rbx
  410f5d:	mov    rsi,r13
  410f60:	mov    rdi,r15
  410f63:	call   409950 <_start@@Base+0x2ae0>
  410f68:	cmp    rax,r13
  410f6b:	jne    410f10 <_start@@Base+0xa0a0>
  410f6d:	mov    r8,rbp
  410f70:	lea    rcx,[rip+0x297e9]        # 43a760 <__data_start@@Base+0x6a0>
  410f77:	mov    rdx,rbx
  410f7a:	mov    rsi,r13
  410f7d:	mov    rdi,r15
  410f80:	call   40bef0 <_start@@Base+0x5080>
  410f85:	cmp    rax,r13
  410f88:	je     410f8f <_start@@Base+0xa11f>
  410f8a:	cmp    rbx,rax
  410f8d:	jne    410f10 <_start@@Base+0xa0a0>
  410f8f:	mov    r14,rax
  410f92:	jmp    40e667 <_start@@Base+0x77f7>
  410f97:	nop    WORD PTR [rax+rax*1+0x0]
  410fa0:	mov    rdx,rbx
  410fa3:	mov    rsi,rbp
  410fa6:	mov    rdi,r15
  410fa9:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  410fae:	mov    r13,rax
  410fb1:	jmp    40ee40 <_start@@Base+0x7fd0>
  410fb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410fc0:	mov    rdx,rbx
  410fc3:	mov    rsi,r8
  410fc6:	mov    rdi,r15
  410fc9:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  410fce:	mov    r13,rax
  410fd1:	jmp    40ee40 <_start@@Base+0x7fd0>
  410fd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410fe0:	mov    rdx,rbx
  410fe3:	mov    rsi,r8
  410fe6:	mov    rdi,r15
  410fe9:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  410fee:	mov    r13,rax
  410ff1:	jmp    40ee40 <_start@@Base+0x7fd0>
  410ff6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  411000:	mov    rdx,rbx
  411003:	mov    rsi,rbp
  411006:	mov    rdi,r15
  411009:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  41100e:	mov    r13,rax
  411011:	jmp    40ee40 <_start@@Base+0x7fd0>
  411016:	neg    edx
  411018:	mov    ecx,0x8
  41101d:	cmp    rax,0x80
  411023:	jbe    4103d0 <_start@@Base+0x9560>
  411029:	jmp    410bf9 <_start@@Base+0x9d89>
  41102e:	mov    r8,r12
  411031:	lea    rcx,[rip+0x29648]        # 43a680 <__data_start@@Base+0x5c0>
  411038:	mov    rdx,rbx
  41103b:	mov    rsi,rax
  41103e:	mov    rdi,r15
  411041:	call   40a9e0 <_start@@Base+0x3b70>
  411046:	cmp    r13,rax
  411049:	je     41293a <_start@@Base+0xbaca>
  41104f:	cmp    rbx,rax
  411052:	je     41293a <_start@@Base+0xbaca>
  411058:	mov    r13,rax
  41105b:	jmp    40ead0 <_start@@Base+0x7c60>
  411060:	mov    rdx,rbx
  411063:	mov    rsi,rbp
  411066:	mov    rdi,r15
  411069:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  41106e:	mov    r13,rax
  411071:	jmp    40ee40 <_start@@Base+0x7fd0>
  411076:	mov    rdx,rbx
  411079:	mov    rsi,rbp
  41107c:	mov    rdi,r15
  41107f:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  411084:	mov    r13,rax
  411087:	jmp    40ee40 <_start@@Base+0x7fd0>
  41108c:	movbe  rax,QWORD PTR [r13+0x10]
  411092:	jmp    40f6d5 <_start@@Base+0x8865>
  411097:	movbe  rax,QWORD PTR [r13+0x10]
  41109d:	jmp    40fe3f <_start@@Base+0x8fcf>
  4110a2:	mov    rdx,rbx
  4110a5:	mov    rsi,rbp
  4110a8:	mov    rdi,r15
  4110ab:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4110b0:	mov    r13,rax
  4110b3:	jmp    40ee40 <_start@@Base+0x7fd0>
  4110b8:	mov    rsi,r13
  4110bb:	mov    rdx,rbx
  4110be:	mov    rdi,r15
  4110c1:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4110c6:	mov    r13,rax
  4110c9:	jmp    40ee40 <_start@@Base+0x7fd0>
  4110ce:	mov    rdx,rbx
  4110d1:	mov    rsi,rbp
  4110d4:	mov    rdi,r15
  4110d7:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4110dc:	mov    r13,rax
  4110df:	jmp    40ee40 <_start@@Base+0x7fd0>
  4110e4:	lea    r12,[rbp+0x8]
  4110e8:	mov    r8,rbx
  4110eb:	sub    r8,r12
  4110ee:	cmp    r8,0x7
  4110f2:	ja     412234 <_start@@Base+0xb3c4>
  4110f8:	mov    rsi,rbx
  4110fb:	mov    rdi,r12
  4110fe:	call   406f60 <_start@@Base+0xf0>
  411103:	movabs rdx,0xff00000000000000
  41110d:	and    rax,rdx
  411110:	movabs rdx,0x6100000000000000
  41111a:	cmp    rax,rdx
  41111d:	jne    4120e9 <_start@@Base+0xb279>
  411123:	cmp    r8,0x1
  411127:	jle    4125b0 <_start@@Base+0xb740>
  41112d:	mov    ecx,0x1
  411132:	mov    rdx,rbx
  411135:	mov    rsi,r12
  411138:	mov    rdi,r15
  41113b:	call   40a880 <_start@@Base+0x3a10>
  411140:	mov    rbp,rax
  411143:	cmp    r12,rax
  411146:	je     4125b0 <_start@@Base+0xb740>
  41114c:	lea    r12,[rsp+0x40]
  411151:	mov    rcx,r12
  411154:	mov    rdx,rbx
  411157:	mov    rsi,rax
  41115a:	mov    rdi,r15
  41115d:	mov    DWORD PTR [rsp+0x40],0x0
  411165:	call   409a20 <_start@@Base+0x2bb0>
  41116a:	mov    r13,rax
  41116d:	cmp    rax,rbp
  411170:	je     412876 <_start@@Base+0xba06>
  411176:	mov    r12d,DWORD PTR [rsp+0x40]
  41117b:	test   r12d,r12d
  41117e:	jne    41118b <_start@@Base+0xa31b>
  411180:	test   BYTE PTR [r15+0x10],0x2
  411185:	je     40ee40 <_start@@Base+0x7fd0>
  41118b:	mov    rdi,QWORD PTR [r15]
  41118e:	mov    ecx,0x4
  411193:	mov    edx,0x4
  411198:	mov    esi,0x14
  41119d:	call   419de0 <flatcc_builder_table_add@@Base>
  4111a2:	test   rax,rax
  4111a5:	je     412b59 <_start@@Base+0xbce9>
  4111ab:	mov    edx,DWORD PTR [rsp+0x40]
  4111af:	mov    DWORD PTR [rax],edx
  4111b1:	jmp    40ee40 <_start@@Base+0x7fd0>
  4111b6:	movbe  rax,QWORD PTR [r13+0x10]
  4111bc:	jmp    410a81 <_start@@Base+0x9c11>
  4111c1:	movbe  rax,QWORD PTR [r13+0x10]
  4111c7:	jmp    40ebba <_start@@Base+0x7d4a>
  4111cc:	mov    rdx,rbx
  4111cf:	mov    rsi,rbp
  4111d2:	mov    rdi,r15
  4111d5:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4111da:	mov    r13,rax
  4111dd:	jmp    40ee40 <_start@@Base+0x7fd0>
  4111e2:	movbe  rax,QWORD PTR [r13+0x8]
  4111e8:	jmp    410e7f <_start@@Base+0xa00f>
  4111ed:	cmp    r8,0x8
  4111f1:	jle    412344 <_start@@Base+0xb4d4>
  4111f7:	mov    ecx,0x8
  4111fc:	mov    rdx,rbx
  4111ff:	mov    rsi,rbp
  411202:	mov    rdi,r15
  411205:	call   40a880 <_start@@Base+0x3a10>
  41120a:	mov    r12,rax
  41120d:	cmp    rbp,rax
  411210:	je     412344 <_start@@Base+0xb4d4>
  411216:	lea    rbp,[rsp+0x40]
  41121b:	mov    rcx,rbp
  41121e:	mov    rdx,rbx
  411221:	mov    rsi,rax
  411224:	mov    rdi,r15
  411227:	mov    DWORD PTR [rsp+0x40],0x0
  41122f:	call   409880 <_start@@Base+0x2a10>
  411234:	mov    r13,rax
  411237:	cmp    rax,r12
  41123a:	je     4128e2 <_start@@Base+0xba72>
  411240:	mov    ebp,DWORD PTR [rsp+0x40]
  411244:	test   ebp,ebp
  411246:	jne    411253 <_start@@Base+0xa3e3>
  411248:	test   BYTE PTR [r15+0x10],0x2
  41124d:	je     40ee40 <_start@@Base+0x7fd0>
  411253:	mov    rdi,QWORD PTR [r15]
  411256:	mov    ecx,0x4
  41125b:	mov    edx,0x4
  411260:	mov    esi,0x11
  411265:	call   419de0 <flatcc_builder_table_add@@Base>
  41126a:	test   rax,rax
  41126d:	je     412b71 <_start@@Base+0xbd01>
  411273:	mov    edx,DWORD PTR [rsp+0x40]
  411277:	mov    DWORD PTR [rax],edx
  411279:	jmp    40ee40 <_start@@Base+0x7fd0>
  41127e:	mov    rsi,r13
  411281:	mov    rdx,rbx
  411284:	mov    rdi,r15
  411287:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  41128c:	mov    r13,rax
  41128f:	jmp    40ee40 <_start@@Base+0x7fd0>
  411294:	mov    rbp,rax
  411297:	mov    rdx,rbx
  41129a:	mov    rsi,rbp
  41129d:	mov    rdi,r15
  4112a0:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4112a5:	mov    r13,rax
  4112a8:	jmp    40ee40 <_start@@Base+0x7fd0>
  4112ad:	mov    r8,r12
  4112b0:	lea    rcx,[rip+0x294c9]        # 43a780 <__data_start@@Base+0x6c0>
  4112b7:	mov    rdx,rbx
  4112ba:	mov    rsi,rax
  4112bd:	mov    rdi,r15
  4112c0:	call   40b620 <_start@@Base+0x47b0>
  4112c5:	cmp    r13,rax
  4112c8:	je     412b19 <_start@@Base+0xbca9>
  4112ce:	cmp    rbx,rax
  4112d1:	je     412b19 <_start@@Base+0xbca9>
  4112d7:	mov    r13,rax
  4112da:	jmp    40f575 <_start@@Base+0x8705>
  4112df:	mov    r14,rax
  4112e2:	jmp    40e667 <_start@@Base+0x77f7>
  4112e7:	nop    WORD PTR [rax+rax*1+0x0]
  4112f0:	mov    rsi,r13
  4112f3:	mov    rdx,rbx
  4112f6:	mov    rdi,r15
  4112f9:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4112fe:	mov    r13,rax
  411301:	jmp    410804 <_start@@Base+0x9994>
  411306:	nop    WORD PTR cs:[rax+rax*1+0x0]
  411310:	mov    rsi,r13
  411313:	mov    rdx,rbx
  411316:	mov    rdi,r15
  411319:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  41131e:	mov    r13,rax
  411321:	jmp    40f150 <_start@@Base+0x82e0>
  411326:	nop    WORD PTR cs:[rax+rax*1+0x0]
  411330:	movbe  rax,QWORD PTR [r13+0x0]
  411336:	jmp    410863 <_start@@Base+0x99f3>
  41133b:	nop    DWORD PTR [rax+rax*1+0x0]
  411340:	movbe  rax,QWORD PTR [r13+0x0]
  411346:	jmp    40f1ad <_start@@Base+0x833d>
  41134b:	nop    DWORD PTR [rax+rax*1+0x0]
  411350:	inc    r13
  411353:	mov    DWORD PTR [r15+0x14],0x0
  41135b:	jmp    410848 <_start@@Base+0x99d8>
  411360:	inc    r13
  411363:	mov    DWORD PTR [r15+0x14],0x0
  41136b:	jmp    40f192 <_start@@Base+0x8322>
  411370:	cmp    r8,0x7
  411374:	jle    4112f0 <_start@@Base+0xa480>
  41137a:	mov    ecx,0x7
  41137f:	mov    rdx,rbx
  411382:	mov    rsi,r13
  411385:	mov    rdi,r15
  411388:	call   40a880 <_start@@Base+0x3a10>
  41138d:	cmp    rax,r13
  411390:	je     4112f0 <_start@@Base+0xa480>
  411396:	lea    rcx,[rsp+0x40]
  41139b:	mov    r8d,0x1
  4113a1:	mov    rdx,rbx
  4113a4:	mov    rsi,rax
  4113a7:	mov    rdi,r15
  4113aa:	call   41f2e0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
  4113af:	mov    r11d,DWORD PTR [rsp+0x40]
  4113b4:	mov    r13,rax
  4113b7:	test   r11d,r11d
  4113ba:	je     4108f9 <_start@@Base+0x9a89>
  4113c0:	mov    rdi,QWORD PTR [r15]
  4113c3:	mov    esi,0x1
  4113c8:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  4113cd:	test   rax,rax
  4113d0:	jne    4107fe <_start@@Base+0x998e>
  4113d6:	jmp    4108f9 <_start@@Base+0x9a89>
  4113db:	nop    DWORD PTR [rax+rax*1+0x0]
  4113e0:	mov    rbp,rbx
  4113e3:	xor    eax,eax
  4113e5:	jmp    40fd09 <_start@@Base+0x8e99>
  4113ea:	nop    WORD PTR [rax+rax*1+0x0]
  4113f0:	cmp    r8,0x3
  4113f4:	jle    411310 <_start@@Base+0xa4a0>
  4113fa:	mov    ecx,0x3
  4113ff:	mov    rdx,rbx
  411402:	mov    rsi,r13
  411405:	mov    rdi,r15
  411408:	call   40a880 <_start@@Base+0x3a10>
  41140d:	mov    r14,rax
  411410:	cmp    rax,r13
  411413:	je     411310 <_start@@Base+0xa4a0>
  411419:	lea    r8,[rsp+0x40]
  41141e:	mov    rcx,r8
  411421:	mov    rdx,rbx
  411424:	mov    rsi,rax
  411427:	mov    rdi,r15
  41142a:	mov    QWORD PTR [rsp],r8
  41142e:	mov    QWORD PTR [rsp+0x40],0x0
  411437:	call   4094a0 <_start@@Base+0x2630>
  41143c:	cmp    r14,rax
  41143f:	mov    r13,rax
  411442:	mov    r8,QWORD PTR [rsp]
  411446:	je     4120ba <_start@@Base+0xb24a>
  41144c:	cmp    QWORD PTR [rsp+0x40],0x0
  411452:	jne    41145f <_start@@Base+0xa5ef>
  411454:	test   BYTE PTR [r15+0x10],0x2
  411459:	je     40f150 <_start@@Base+0x82e0>
  41145f:	mov    rdi,QWORD PTR [r15]
  411462:	mov    ecx,0x8
  411467:	mov    edx,0x8
  41146c:	mov    esi,0x1
  411471:	call   419de0 <flatcc_builder_table_add@@Base>
  411476:	test   rax,rax
  411479:	je     4124da <_start@@Base+0xb66a>
  41147f:	mov    rdx,QWORD PTR [rsp+0x40]
  411484:	mov    QWORD PTR [rax],rdx
  411487:	jmp    40f150 <_start@@Base+0x82e0>
  41148c:	nop    DWORD PTR [rax+0x0]
  411490:	cmp    BYTE PTR [r13+0x4],0x65
  411495:	jne    40fcc7 <_start@@Base+0x8e57>
  41149b:	mov    BYTE PTR [rsp+0x30],0x0
  4114a0:	lea    rbp,[r13+0x5]
  4114a4:	jmp    40fd0d <_start@@Base+0x8e9d>
  4114a9:	nop    DWORD PTR [rax+0x0]
  4114b0:	mov    BYTE PTR [rsp+0x30],0x1
  4114b5:	lea    rbp,[r13+0x4]
  4114b9:	jmp    40fd0d <_start@@Base+0x8e9d>
  4114be:	xchg   ax,ax
  4114c0:	mov    eax,DWORD PTR [rsp+0x34]
  4114c4:	mov    ecx,0x8
  4114c9:	test   eax,eax
  4114cb:	jne    4114e9 <_start@@Base+0xa679>
  4114cd:	mov    rdx,QWORD PTR [rsp+0x40]
  4114d2:	test   dl,dl
  4114d4:	setne  al
  4114d7:	cmp    rdx,0xff
  4114de:	jbe    40fd09 <_start@@Base+0x8e99>
  4114e4:	mov    ecx,0x7
  4114e9:	mov    rsi,rbp
  4114ec:	mov    rdx,rbx
  4114ef:	mov    rdi,r15
  4114f2:	call   41d640 <flatcc_json_parser_set_error@@Base>
  4114f7:	mov    rbp,rax
  4114fa:	xor    eax,eax
  4114fc:	jmp    40fd09 <_start@@Base+0x8e99>
  411501:	mov    rsi,r13
  411504:	mov    rdx,rbx
  411507:	mov    rdi,r15
  41150a:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  41150f:	mov    r13,rax
  411512:	jmp    40ee40 <_start@@Base+0x7fd0>
  411517:	mov    r8,r12
  41151a:	lea    rcx,[rip+0x28cbf]        # 43a1e0 <__data_start@@Base+0x120>
  411521:	mov    rdx,rbx
  411524:	mov    rsi,rax
  411527:	mov    rdi,r15
  41152a:	call   40a9e0 <_start@@Base+0x3b70>
  41152f:	cmp    r13,rax
  411532:	je     41257f <_start@@Base+0xb70f>
  411538:	cmp    rbx,rax
  41153b:	je     41257f <_start@@Base+0xb70f>
  411541:	mov    r13,rax
  411544:	jmp    41026d <_start@@Base+0x93fd>
  411549:	mov    rdi,QWORD PTR [r15]
  41154c:	call   419200 <flatcc_builder_end_vector@@Base>
  411551:	mov    DWORD PTR [rsp+0x28],eax
  411555:	test   eax,eax
  411557:	je     41294a <_start@@Base+0xbada>
  41155d:	mov    rdi,QWORD PTR [r15]
  411560:	mov    esi,0x9
  411565:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  41156a:	test   rax,rax
  41156d:	je     412942 <_start@@Base+0xbad2>
  411573:	mov    edx,DWORD PTR [rsp+0x28]
  411577:	mov    DWORD PTR [rax],edx
  411579:	jmp    40ee40 <_start@@Base+0x7fd0>
  41157e:	mov    rsi,r13
  411581:	mov    rdx,rbx
  411584:	mov    rdi,r15
  411587:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  41158c:	mov    r13,rax
  41158f:	jmp    40ee40 <_start@@Base+0x7fd0>
  411594:	movbe  rax,QWORD PTR [r13+0x8]
  41159a:	jmp    4106df <_start@@Base+0x986f>
  41159f:	mov    rsi,r13
  4115a2:	mov    rdx,rbx
  4115a5:	mov    rdi,r15
  4115a8:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4115ad:	mov    r13,rax
  4115b0:	jmp    40ee40 <_start@@Base+0x7fd0>
  4115b5:	mov    r13,rbx
  4115b8:	jmp    40e80e <_start@@Base+0x799e>
  4115bd:	movbe  rax,QWORD PTR [r13+0x8]
  4115c3:	jmp    410996 <_start@@Base+0x9b26>
  4115c8:	mov    rsi,r13
  4115cb:	mov    ecx,0x5
  4115d0:	mov    rdx,rbx
  4115d3:	mov    rdi,r15
  4115d6:	call   41d640 <flatcc_json_parser_set_error@@Base>
  4115db:	mov    r13,rax
  4115de:	jmp    410848 <_start@@Base+0x99d8>
  4115e3:	mov    rsi,r13
  4115e6:	mov    ecx,0x5
  4115eb:	mov    rdx,rbx
  4115ee:	mov    rdi,r15
  4115f1:	call   41d640 <flatcc_json_parser_set_error@@Base>
  4115f6:	mov    r13,rax
  4115f9:	jmp    40f192 <_start@@Base+0x8322>
  4115fe:	mov    esi,DWORD PTR [rsp+0x34]
  411602:	mov    rax,QWORD PTR [rsp+0x40]
  411607:	test   esi,esi
  411609:	je     411e07 <_start@@Base+0xaf97>
  41160f:	mov    ecx,0x8
  411614:	cmp    rax,0x80
  41161a:	ja     412431 <_start@@Base+0xb5c1>
  411620:	mov    edx,eax
  411622:	neg    edx
  411624:	mov    BYTE PTR [rsp+0x30],dl
  411628:	jmp    40e848 <_start@@Base+0x79d8>
  41162d:	movbe  rax,QWORD PTR [r13+0x8]
  411633:	jmp    410a4f <_start@@Base+0x9bdf>
  411638:	cmp    BYTE PTR [rsi+0x1],0x20
  41163c:	jle    41030d <_start@@Base+0x949d>
  411642:	inc    rsi
  411645:	jmp    41031b <_start@@Base+0x94ab>
  41164a:	movbe  rax,QWORD PTR [r13+0x8]
  411650:	jmp    40eb88 <_start@@Base+0x7d18>
  411655:	lea    rbp,[r13+0x10]
  411659:	mov    r8,rbx
  41165c:	sub    r8,rbp
  41165f:	cmp    r8,0x7
  411663:	ja     412107 <_start@@Base+0xb297>
  411669:	mov    rsi,rbx
  41166c:	mov    rdi,rbp
  41166f:	call   406f60 <_start@@Base+0xf0>
  411674:	movabs rdx,0xff00000000000000
  41167e:	and    rax,rdx
  411681:	movabs rdx,0x7300000000000000
  41168b:	cmp    rax,rdx
  41168e:	jne    411e48 <_start@@Base+0xafd8>
  411694:	cmp    r8,0x1
  411698:	jle    412208 <_start@@Base+0xb398>
  41169e:	mov    ecx,0x1
  4116a3:	mov    rdx,rbx
  4116a6:	mov    rsi,rbp
  4116a9:	mov    rdi,r15
  4116ac:	call   40a880 <_start@@Base+0x3a10>
  4116b1:	mov    r13,rax
  4116b4:	cmp    rbp,rax
  4116b7:	je     412208 <_start@@Base+0xb398>
  4116bd:	mov    rdi,QWORD PTR [r15]
  4116c0:	mov    ecx,0x1fffffff
  4116c5:	mov    edx,0x8
  4116ca:	mov    esi,0x8
  4116cf:	call   418340 <flatcc_builder_start_vector@@Base>
  4116d4:	test   eax,eax
  4116d6:	jne    412b69 <_start@@Base+0xbcf9>
  4116dc:	mov    rsi,r13
  4116df:	mov    rcx,r14
  4116e2:	mov    rdx,rbx
  4116e5:	mov    rdi,r15
  4116e8:	call   40a940 <_start@@Base+0x3ad0>
  4116ed:	mov    r8d,DWORD PTR [rsp+0x24]
  4116f2:	mov    r13,rax
  4116f5:	test   r8d,r8d
  4116f8:	je     41266f <_start@@Base+0xb7ff>
  4116fe:	lea    rbp,[rsp+0x40]
  411703:	jmp    411734 <_start@@Base+0xa8c4>
  411705:	nop    DWORD PTR [rax]
  411708:	vmovsd xmm0,QWORD PTR [rsp+0x40]
  41170e:	mov    rdi,r15
  411711:	vmovsd QWORD PTR [r12],xmm0
  411717:	mov    rcx,r14
  41171a:	mov    rdx,rbx
  41171d:	mov    rsi,rax
  411720:	call   40c7c0 <_start@@Base+0x5950>
  411725:	mov    edi,DWORD PTR [rsp+0x24]
  411729:	mov    r13,rax
  41172c:	test   edi,edi
  41172e:	je     41266f <_start@@Base+0xb7ff>
  411734:	mov    rdi,QWORD PTR [r15]
  411737:	mov    esi,0x1
  41173c:	mov    QWORD PTR [rsp+0x40],0x0
  411745:	call   417c90 <flatcc_builder_extend_vector@@Base>
  41174a:	mov    r12,rax
  41174d:	test   rax,rax
  411750:	je     4126a4 <_start@@Base+0xb834>
  411756:	mov    rcx,rbp
  411759:	mov    rdx,rbx
  41175c:	mov    rsi,r13
  41175f:	mov    rdi,r15
  411762:	call   41e370 <flatcc_json_parser_double@@Base>
  411767:	cmp    rax,r13
  41176a:	jne    411708 <_start@@Base+0xa898>
  41176c:	mov    r8,rbp
  41176f:	lea    rcx,[rip+0x28dca]        # 43a540 <__data_start@@Base+0x480>
  411776:	mov    rdx,rbx
  411779:	mov    rsi,r13
  41177c:	mov    rdi,r15
  41177f:	call   40abc0 <_start@@Base+0x3d50>
  411784:	cmp    rax,r13
  411787:	je     411792 <_start@@Base+0xa922>
  411789:	cmp    rbx,rax
  41178c:	jne    411708 <_start@@Base+0xa898>
  411792:	mov    r14,rax
  411795:	jmp    40e667 <_start@@Base+0x77f7>
  41179a:	nop    WORD PTR [rax+rax*1+0x0]
  4117a0:	movbe  rax,QWORD PTR [r13+0x8]
  4117a6:	jmp    40f8b2 <_start@@Base+0x8a42>
  4117ab:	movbe  rax,QWORD PTR [r13+0x8]
  4117b1:	jmp    40efb1 <_start@@Base+0x8141>
  4117b6:	cmp    BYTE PTR [rsi+0x1],0x20
  4117ba:	jle    40f3ca <_start@@Base+0x855a>
  4117c0:	inc    rsi
  4117c3:	jmp    40f3d8 <_start@@Base+0x8568>
  4117c8:	mov    rsi,r13
  4117cb:	mov    rdx,rbx
  4117ce:	mov    rdi,r15
  4117d1:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4117d6:	mov    r13,rax
  4117d9:	jmp    40ee40 <_start@@Base+0x7fd0>
  4117de:	mov    rdx,rbx
  4117e1:	mov    rsi,rbp
  4117e4:	mov    rdi,r15
  4117e7:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4117ec:	mov    r13,rax
  4117ef:	jmp    40ee40 <_start@@Base+0x7fd0>
  4117f4:	mov    rdi,QWORD PTR [r15]
  4117f7:	call   419200 <flatcc_builder_end_vector@@Base>
  4117fc:	mov    DWORD PTR [rsp+0x28],eax
  411800:	test   eax,eax
  411802:	je     412a7a <_start@@Base+0xbc0a>
  411808:	mov    rdi,QWORD PTR [r15]
  41180b:	mov    esi,0x1f
  411810:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  411815:	test   rax,rax
  411818:	je     412a72 <_start@@Base+0xbc02>
  41181e:	mov    edx,DWORD PTR [rsp+0x28]
  411822:	mov    DWORD PTR [rax],edx
  411824:	jmp    40ee40 <_start@@Base+0x7fd0>
  411829:	mov    r10,rbx
  41182c:	jmp    40f0d7 <_start@@Base+0x8267>
  411831:	mov    r14,QWORD PTR [rsp+0x8]
  411836:	mov    r13,rax
  411839:	mov    rsi,r13
  41183c:	mov    ecx,0x21
  411841:	mov    rdx,rbx
  411844:	mov    rdi,r15
  411847:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41184c:	mov    r13,rax
  41184f:	mov    eax,DWORD PTR [rsp+0x28]
  411853:	test   eax,eax
  411855:	je     4129ac <_start@@Base+0xbb3c>
  41185b:	mov    rdi,QWORD PTR [r15]
  41185e:	mov    esi,0xe
  411863:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  411868:	test   rax,rax
  41186b:	je     4129a4 <_start@@Base+0xbb34>
  411871:	mov    edx,DWORD PTR [rsp+0x28]
  411875:	mov    DWORD PTR [rax],edx
  411877:	jmp    40ee40 <_start@@Base+0x7fd0>
  41187c:	mov    rdi,QWORD PTR [r15]
  41187f:	call   419200 <flatcc_builder_end_vector@@Base>
  411884:	mov    DWORD PTR [rsp+0x28],eax
  411888:	test   eax,eax
  41188a:	je     4129bc <_start@@Base+0xbb4c>
  411890:	mov    rdi,QWORD PTR [r15]
  411893:	mov    esi,0x1e
  411898:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  41189d:	test   rax,rax
  4118a0:	je     4129b4 <_start@@Base+0xbb44>
  4118a6:	mov    edx,DWORD PTR [rsp+0x28]
  4118aa:	mov    DWORD PTR [rax],edx
  4118ac:	jmp    40ee40 <_start@@Base+0x7fd0>
  4118b1:	mov    r14,r13
  4118b4:	jmp    40e667 <_start@@Base+0x77f7>
  4118b9:	movbe  rdx,QWORD PTR [r13+0x10]
  4118bf:	movabs rcx,0x6473747275637400
  4118c9:	xor    dl,dl
  4118cb:	cmp    rdx,rcx
  4118ce:	jne    40ef50 <_start@@Base+0x80e0>
  4118d4:	cmp    rax,0x7
  4118d8:	jle    411297 <_start@@Base+0xa427>
  4118de:	mov    ecx,0x7
  4118e3:	mov    rdx,rbx
  4118e6:	mov    rsi,rbp
  4118e9:	mov    rdi,r15
  4118ec:	call   40a880 <_start@@Base+0x3a10>
  4118f1:	mov    r13,rax
  4118f4:	cmp    rbp,rax
  4118f7:	je     411294 <_start@@Base+0xa424>
  4118fd:	mov    rdi,QWORD PTR [r15]
  411900:	mov    ecx,0x1fffffff
  411905:	mov    edx,0x4
  41190a:	mov    esi,0x8
  41190f:	call   418340 <flatcc_builder_start_vector@@Base>
  411914:	test   eax,eax
  411916:	jne    41299c <_start@@Base+0xbb2c>
  41191c:	mov    rsi,r13
  41191f:	mov    rcx,r14
  411922:	mov    rdx,rbx
  411925:	mov    rdi,r15
  411928:	call   40a940 <_start@@Base+0x3ad0>
  41192d:	mov    ebp,DWORD PTR [rsp+0x24]
  411931:	mov    r13,rax
  411934:	test   ebp,ebp
  411936:	je     411bf1 <_start@@Base+0xad81>
  41193c:	mov    QWORD PTR [rsp+0x18],r14
  411941:	movabs r12,0xffff000000000000
  41194b:	nop    DWORD PTR [rax+rax*1+0x0]
  411950:	mov    rdi,QWORD PTR [r15]
  411953:	mov    esi,0x1
  411958:	call   417c90 <flatcc_builder_extend_vector@@Base>
  41195d:	mov    r14,rax
  411960:	test   rax,rax
  411963:	je     412200 <_start@@Base+0xb390>
  411969:	lea    rbp,[rsp+0x34]
  41196e:	mov    rsi,r13
  411971:	mov    rcx,rbp
  411974:	mov    rdx,rbx
  411977:	mov    rdi,r15
  41197a:	call   40a7e0 <_start@@Base+0x3970>
  41197f:	mov    r11d,DWORD PTR [rsp+0x34]
  411984:	mov    r13,rax
  411987:	test   r11d,r11d
  41198a:	je     411bc8 <_start@@Base+0xad58>
  411990:	lea    rax,[rsp+0x40]
  411995:	mov    QWORD PTR [rsp],rax
  411999:	mov    rax,r13
  41199c:	mov    r13,r14
  41199f:	mov    r14,rax
  4119a2:	jmp    411a67 <_start@@Base+0xabf7>
  4119a7:	nop    WORD PTR [rax+rax*1+0x0]
  4119b0:	mov    rsi,rbx
  4119b3:	mov    rdi,r14
  4119b6:	call   406f60 <_start@@Base+0xf0>
  4119bb:	mov    rdx,rax
  4119be:	and    rdx,r12
  4119c1:	movabs rdi,0x6964000000000000
  4119cb:	cmp    rdx,rdi
  4119ce:	je     411ac0 <_start@@Base+0xac50>
  4119d4:	movabs rcx,0x64697374616e6365
  4119de:	cmp    rax,rcx
  4119e1:	jne    411aa8 <_start@@Base+0xac38>
  4119e7:	cmp    r9,0x8
  4119eb:	jle    411aa8 <_start@@Base+0xac38>
  4119f1:	mov    ecx,0x8
  4119f6:	mov    rdx,rbx
  4119f9:	mov    rsi,r14
  4119fc:	mov    rdi,r15
  4119ff:	call   40a880 <_start@@Base+0x3a10>
  411a04:	cmp    rax,r14
  411a07:	je     411aa8 <_start@@Base+0xac38>
  411a0d:	mov    rcx,QWORD PTR [rsp]
  411a11:	mov    rdx,rbx
  411a14:	mov    rsi,rax
  411a17:	mov    rdi,r15
  411a1a:	mov    DWORD PTR [rsp+0x40],0x0
  411a22:	mov    QWORD PTR [rsp+0x8],rax
  411a27:	call   409880 <_start@@Base+0x2a10>
  411a2c:	mov    r10,QWORD PTR [rsp+0x8]
  411a31:	mov    r14,rax
  411a34:	cmp    r10,rax
  411a37:	je     411b80 <_start@@Base+0xad10>
  411a3d:	mov    eax,DWORD PTR [rsp+0x40]
  411a41:	mov    DWORD PTR [r13+0x4],eax
  411a45:	mov    rsi,r14
  411a48:	mov    rcx,rbp
  411a4b:	mov    rdx,rbx
  411a4e:	mov    rdi,r15
  411a51:	call   40c910 <_start@@Base+0x5aa0>
  411a56:	mov    r10d,DWORD PTR [rsp+0x34]
  411a5b:	mov    r14,rax
  411a5e:	test   r10d,r10d
  411a61:	je     411c30 <_start@@Base+0xadc0>
  411a67:	cmp    rbx,r14
  411a6a:	je     411a88 <_start@@Base+0xac18>
  411a6c:	movzx  eax,BYTE PTR [r14]
  411a70:	cmp    al,0x22
  411a72:	je     411b20 <_start@@Base+0xacb0>
  411a78:	cmp    al,0x2e
  411a7a:	je     411b30 <_start@@Base+0xacc0>
  411a80:	mov    DWORD PTR [r15+0x14],0x1
  411a88:	mov    r9,rbx
  411a8b:	sub    r9,r14
  411a8e:	cmp    r9,0x7
  411a92:	jbe    4119b0 <_start@@Base+0xab40>
  411a98:	movbe  rax,QWORD PTR [r14]
  411a9d:	jmp    4119bb <_start@@Base+0xab4b>
  411aa2:	nop    WORD PTR [rax+rax*1+0x0]
  411aa8:	mov    rsi,r14
  411aab:	mov    rdx,rbx
  411aae:	mov    rdi,r15
  411ab1:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  411ab6:	mov    r14,rax
  411ab9:	jmp    411a45 <_start@@Base+0xabd5>
  411abb:	nop    DWORD PTR [rax+rax*1+0x0]
  411ac0:	cmp    r9,0x2
  411ac4:	jle    411aa8 <_start@@Base+0xac38>
  411ac6:	mov    ecx,0x2
  411acb:	mov    rdx,rbx
  411ace:	mov    rsi,r14
  411ad1:	mov    rdi,r15
  411ad4:	call   40a880 <_start@@Base+0x3a10>
  411ad9:	cmp    rax,r14
  411adc:	je     411aa8 <_start@@Base+0xac38>
  411ade:	mov    rcx,QWORD PTR [rsp]
  411ae2:	mov    rdx,rbx
  411ae5:	mov    rsi,rax
  411ae8:	mov    rdi,r15
  411aeb:	mov    DWORD PTR [rsp+0x40],0x0
  411af3:	mov    QWORD PTR [rsp+0x8],rax
  411af8:	call   409880 <_start@@Base+0x2a10>
  411afd:	mov    r10,QWORD PTR [rsp+0x8]
  411b02:	mov    r14,rax
  411b05:	cmp    r10,rax
  411b08:	je     411b50 <_start@@Base+0xace0>
  411b0a:	mov    eax,DWORD PTR [rsp+0x40]
  411b0e:	mov    DWORD PTR [r13+0x0],eax
  411b12:	jmp    411a45 <_start@@Base+0xabd5>
  411b17:	nop    WORD PTR [rax+rax*1+0x0]
  411b20:	inc    r14
  411b23:	mov    DWORD PTR [r15+0x14],0x0
  411b2b:	jmp    411a88 <_start@@Base+0xac18>
  411b30:	mov    rsi,r14
  411b33:	mov    ecx,0x5
  411b38:	mov    rdx,rbx
  411b3b:	mov    rdi,r15
  411b3e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  411b43:	mov    r14,rax
  411b46:	jmp    411a88 <_start@@Base+0xac18>
  411b4b:	nop    DWORD PTR [rax+rax*1+0x0]
  411b50:	mov    r8,QWORD PTR [rsp]
  411b54:	lea    rcx,[rip+0x285e5]        # 43a140 <__data_start@@Base+0x80>
  411b5b:	mov    rdx,rbx
  411b5e:	mov    rsi,rax
  411b61:	mov    rdi,r15
  411b64:	call   40b3f0 <_start@@Base+0x4580>
  411b69:	cmp    r14,rax
  411b6c:	je     411bab <_start@@Base+0xad3b>
  411b6e:	cmp    rbx,rax
  411b71:	je     411bab <_start@@Base+0xad3b>
  411b73:	mov    r14,rax
  411b76:	jmp    411b0a <_start@@Base+0xac9a>
  411b78:	nop    DWORD PTR [rax+rax*1+0x0]
  411b80:	mov    r8,QWORD PTR [rsp]
  411b84:	lea    rcx,[rip+0x28595]        # 43a120 <__data_start@@Base+0x60>
  411b8b:	mov    rdx,rbx
  411b8e:	mov    rsi,rax
  411b91:	mov    rdi,r15
  411b94:	call   40b3f0 <_start@@Base+0x4580>
  411b99:	cmp    r14,rax
  411b9c:	je     411bab <_start@@Base+0xad3b>
  411b9e:	cmp    rbx,rax
  411ba1:	je     411bab <_start@@Base+0xad3b>
  411ba3:	mov    r14,rax
  411ba6:	jmp    411a3d <_start@@Base+0xabcd>
  411bab:	mov    ecx,0x21
  411bb0:	mov    rdx,rbx
  411bb3:	mov    rsi,rax
  411bb6:	mov    rdi,r15
  411bb9:	call   41d640 <flatcc_json_parser_set_error@@Base>
  411bbe:	mov    r13,rax
  411bc1:	nop    DWORD PTR [rax+0x0]
  411bc8:	mov    rcx,QWORD PTR [rsp+0x18]
  411bcd:	mov    rsi,r13
  411bd0:	mov    rdx,rbx
  411bd3:	mov    rdi,r15
  411bd6:	call   40c7c0 <_start@@Base+0x5950>
  411bdb:	mov    r9d,DWORD PTR [rsp+0x24]
  411be0:	mov    r13,rax
  411be3:	test   r9d,r9d
  411be6:	jne    411950 <_start@@Base+0xaae0>
  411bec:	mov    r14,QWORD PTR [rsp+0x18]
  411bf1:	mov    rdi,QWORD PTR [r15]
  411bf4:	call   419200 <flatcc_builder_end_vector@@Base>
  411bf9:	mov    DWORD PTR [rsp+0x28],eax
  411bfd:	test   eax,eax
  411bff:	je     412ad9 <_start@@Base+0xbc69>
  411c05:	mov    rdi,QWORD PTR [r15]
  411c08:	mov    esi,0x1d
  411c0d:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  411c12:	test   rax,rax
  411c15:	je     412ad1 <_start@@Base+0xbc61>
  411c1b:	mov    edx,DWORD PTR [rsp+0x28]
  411c1f:	mov    DWORD PTR [rax],edx
  411c21:	jmp    40ee40 <_start@@Base+0x7fd0>
  411c26:	nop    WORD PTR cs:[rax+rax*1+0x0]
  411c30:	mov    r13,rax
  411c33:	jmp    411bc8 <_start@@Base+0xad58>
  411c35:	mov    eax,DWORD PTR [rsp+0x34]
  411c39:	mov    ecx,0x8
  411c3e:	test   eax,eax
  411c40:	jne    4121d5 <_start@@Base+0xb365>
  411c46:	mov    rdx,QWORD PTR [rsp+0x40]
  411c4b:	cmp    rdx,0xffff
  411c52:	ja     4121d0 <_start@@Base+0xb360>
  411c58:	mov    eax,edx
  411c5a:	mov    WORD PTR [rsp+0x22],dx
  411c5f:	mov    r13,r10
  411c62:	jmp    40f113 <_start@@Base+0x82a3>
  411c67:	mov    rsi,r13
  411c6a:	mov    rdx,rbx
  411c6d:	mov    rdi,r15
  411c70:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  411c75:	mov    r13,rax
  411c78:	jmp    40ee40 <_start@@Base+0x7fd0>
  411c7d:	mov    rdx,rbx
  411c80:	mov    rsi,rbp
  411c83:	mov    rdi,r15
  411c86:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  411c8b:	mov    r13,rax
  411c8e:	jmp    40ee40 <_start@@Base+0x7fd0>
  411c93:	mov    rdx,rbx
  411c96:	mov    rsi,rbp
  411c99:	mov    rdi,r15
  411c9c:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  411ca1:	mov    r13,rax
  411ca4:	jmp    40ee40 <_start@@Base+0x7fd0>
  411ca9:	mov    rdx,rbx
  411cac:	mov    rsi,rbp
  411caf:	mov    rdi,r15
  411cb2:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  411cb7:	mov    r13,rax
  411cba:	jmp    40ee40 <_start@@Base+0x7fd0>
  411cbf:	cmp    r8,0x2
  411cc3:	jle    411f91 <_start@@Base+0xb121>
  411cc9:	mov    ecx,0x2
  411cce:	mov    rdx,rbx
  411cd1:	mov    rsi,rbp
  411cd4:	mov    rdi,r15
  411cd7:	call   40a880 <_start@@Base+0x3a10>
  411cdc:	mov    r13,rax
  411cdf:	cmp    rbp,rax
  411ce2:	je     411f91 <_start@@Base+0xb121>
  411ce8:	mov    rdi,QWORD PTR [r15]
  411ceb:	call   4183c0 <flatcc_builder_start_offset_vector@@Base>
  411cf0:	test   eax,eax
  411cf2:	jne    412b39 <_start@@Base+0xbcc9>
  411cf8:	mov    rsi,r13
  411cfb:	mov    rcx,r14
  411cfe:	mov    rdx,rbx
  411d01:	mov    rdi,r15
  411d04:	call   40a940 <_start@@Base+0x3ad0>
  411d09:	mov    r8d,DWORD PTR [rsp+0x24]
  411d0e:	mov    r13,rax
  411d11:	test   r8d,r8d
  411d14:	je     4125f2 <_start@@Base+0xb782>
  411d1a:	lea    rbp,[rsp+0x28]
  411d1f:	jmp    411d64 <_start@@Base+0xaef4>
  411d21:	nop    DWORD PTR [rax+0x0]
  411d28:	mov    rdi,QWORD PTR [r15]
  411d2b:	mov    esi,0x1
  411d30:	call   417e70 <flatcc_builder_extend_offset_vector@@Base>
  411d35:	test   rax,rax
  411d38:	je     4126ac <_start@@Base+0xb83c>
  411d3e:	mov    edx,DWORD PTR [rsp+0x28]
  411d42:	mov    rsi,r13
  411d45:	mov    DWORD PTR [rax],edx
  411d47:	mov    rcx,r14
  411d4a:	mov    rdx,rbx
  411d4d:	mov    rdi,r15
  411d50:	call   40c7c0 <_start@@Base+0x5950>
  411d55:	mov    esi,DWORD PTR [rsp+0x24]
  411d59:	mov    r13,rax
  411d5c:	test   esi,esi
  411d5e:	je     4125f2 <_start@@Base+0xb782>
  411d64:	mov    rsi,r13
  411d67:	mov    rdi,r15
  411d6a:	mov    rcx,rbp
  411d6d:	mov    rdx,rbx
  411d70:	call   41f7a0 <flatcc_json_parser_build_string@@Base>
  411d75:	mov    edi,DWORD PTR [rsp+0x28]
  411d79:	mov    r13,rax
  411d7c:	test   edi,edi
  411d7e:	jne    411d28 <_start@@Base+0xaeb8>
  411d80:	mov    r14,rax
  411d83:	jmp    40e667 <_start@@Base+0x77f7>
  411d88:	mov    rdx,rbx
  411d8b:	mov    rsi,rbp
  411d8e:	mov    rdi,r15
  411d91:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  411d96:	mov    r13,rax
  411d99:	jmp    40ee40 <_start@@Base+0x7fd0>
  411d9e:	mov    rdi,QWORD PTR [r15]
  411da1:	call   419200 <flatcc_builder_end_vector@@Base>
  411da6:	mov    DWORD PTR [rsp+0x28],eax
  411daa:	test   eax,eax
  411dac:	je     412a2a <_start@@Base+0xbbba>
  411db2:	mov    rdi,QWORD PTR [r15]
  411db5:	mov    esi,0x18
  411dba:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  411dbf:	test   rax,rax
  411dc2:	je     412a12 <_start@@Base+0xbba2>
  411dc8:	mov    edx,DWORD PTR [rsp+0x28]
  411dcc:	mov    DWORD PTR [rax],edx
  411dce:	jmp    40ee40 <_start@@Base+0x7fd0>
  411dd3:	inc    rsi
  411dd6:	mov    rdx,rbx
  411dd9:	mov    rdi,r15
  411ddc:	call   407f70 <_start@@Base+0x1100>
  411de1:	mov    r9,rax
  411de4:	jmp    41033c <_start@@Base+0x94cc>
  411de9:	inc    rsi
  411dec:	mov    rdx,rbx
  411def:	mov    rdi,r15
  411df2:	call   407f70 <_start@@Base+0x1100>
  411df7:	mov    r9,rax
  411dfa:	jmp    40f3f9 <_start@@Base+0x8589>
  411dff:	mov    r14,r13
  411e02:	jmp    40e667 <_start@@Base+0x77f7>
  411e07:	cmp    rax,0x7f
  411e0b:	ja     41242c <_start@@Base+0xb5bc>
  411e11:	mov    edx,eax
  411e13:	mov    BYTE PTR [rsp+0x30],al
  411e17:	jmp    40e848 <_start@@Base+0x79d8>
  411e1c:	mov    rdx,rbx
  411e1f:	mov    rsi,rbp
  411e22:	mov    rdi,r15
  411e25:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  411e2a:	mov    r13,rax
  411e2d:	jmp    40ee40 <_start@@Base+0x7fd0>
  411e32:	mov    rdx,rbx
  411e35:	mov    rsi,rbp
  411e38:	mov    rdi,r15
  411e3b:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  411e40:	mov    r13,rax
  411e43:	jmp    40ee40 <_start@@Base+0x7fd0>
  411e48:	mov    rdx,rbx
  411e4b:	mov    rsi,rbp
  411e4e:	mov    rdi,r15
  411e51:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  411e56:	mov    r13,rax
  411e59:	jmp    40ee40 <_start@@Base+0x7fd0>
  411e5e:	mov    r8,r12
  411e61:	lea    rcx,[rip+0x28358]        # 43a1c0 <__data_start@@Base+0x100>
  411e68:	mov    rdx,rbx
  411e6b:	mov    rsi,rax
  411e6e:	mov    rdi,r15
  411e71:	call   40a9e0 <_start@@Base+0x3b70>
  411e76:	cmp    r13,rax
  411e79:	je     41257f <_start@@Base+0xb70f>
  411e7f:	cmp    rbx,rax
  411e82:	je     41257f <_start@@Base+0xb70f>
  411e88:	mov    r13,rax
  411e8b:	jmp    4106aa <_start@@Base+0x983a>
  411e90:	mov    r8,r12
  411e93:	lea    rcx,[rip+0x28806]        # 43a6a0 <__data_start@@Base+0x5e0>
  411e9a:	mov    rdx,rbx
  411e9d:	mov    rsi,rax
  411ea0:	mov    rdi,r15
  411ea3:	call   40a9e0 <_start@@Base+0x3b70>
  411ea8:	cmp    r13,rax
  411eab:	je     412a82 <_start@@Base+0xbc12>
  411eb1:	cmp    rbx,rax
  411eb4:	je     412a82 <_start@@Base+0xbc12>
  411eba:	mov    r13,rax
  411ebd:	jmp    40fa49 <_start@@Base+0x8bd9>
  411ec2:	mov    rsi,r14
  411ec5:	mov    ecx,0x1d
  411eca:	mov    rdx,rbx
  411ecd:	mov    rdi,r15
  411ed0:	call   41d640 <flatcc_json_parser_set_error@@Base>
  411ed5:	mov    r14,rax
  411ed8:	jmp    40e667 <_start@@Base+0x77f7>
  411edd:	mov    rsi,r9
  411ee0:	mov    r8,r12
  411ee3:	lea    rcx,[rip+0x282b6]        # 43a1a0 <__data_start@@Base+0xe0>
  411eea:	mov    rdx,rbx
  411eed:	mov    rdi,r15
  411ef0:	call   40a9e0 <_start@@Base+0x3b70>
  411ef5:	mov    r9,QWORD PTR [rsp+0x8]
  411efa:	cmp    r9,rax
  411efd:	je     41257f <_start@@Base+0xb70f>
  411f03:	cmp    rbx,rax
  411f06:	je     41257f <_start@@Base+0xb70f>
  411f0c:	mov    r13,rax
  411f0f:	jmp    4104dd <_start@@Base+0x966d>
  411f14:	mov    BYTE PTR [rsp+0x30],0x1
  411f19:	lea    r13,[rbp+0x4]
  411f1d:	jmp    41007e <_start@@Base+0x920e>
  411f22:	mov    esi,DWORD PTR [rsp+0x34]
  411f26:	mov    ecx,0x8
  411f2b:	test   esi,esi
  411f2d:	jne    41251e <_start@@Base+0xb6ae>
  411f33:	mov    rax,QWORD PTR [rsp+0x40]
  411f38:	cmp    rax,0xff
  411f3e:	ja     412519 <_start@@Base+0xb6a9>
  411f44:	test   al,al
  411f46:	setne  al
  411f49:	mov    BYTE PTR [rsp+0x30],al
  411f4d:	mov    r13,r12
  411f50:	jmp    410076 <_start@@Base+0x9206>
  411f55:	mov    rdx,rbx
  411f58:	mov    rsi,rbp
  411f5b:	mov    rdi,r15
  411f5e:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  411f63:	mov    r13,rax
  411f66:	jmp    40ee40 <_start@@Base+0x7fd0>
  411f6b:	mov    r8d,DWORD PTR [r15+0x20]
  411f6f:	test   r8d,r8d
  411f72:	jne    4108f9 <_start@@Base+0x9a89>
  411f78:	mov    rdi,QWORD PTR [r15]
  411f7b:	call   418ee0 <flatcc_builder_end_table@@Base>
  411f80:	mov    DWORD PTR [rsp+0x28],eax
  411f84:	test   eax,eax
  411f86:	jne    41091b <_start@@Base+0x9aab>
  411f8c:	jmp    4108f9 <_start@@Base+0x9a89>
  411f91:	mov    rdx,rbx
  411f94:	mov    rsi,rbp
  411f97:	mov    rdi,r15
  411f9a:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  411f9f:	mov    r13,rax
  411fa2:	jmp    40ee40 <_start@@Base+0x7fd0>
  411fa7:	mov    rdx,rbx
  411faa:	mov    rsi,rbp
  411fad:	mov    rdi,r15
  411fb0:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  411fb5:	mov    r13,rax
  411fb8:	jmp    40ee40 <_start@@Base+0x7fd0>
  411fbd:	lea    r12,[rbp+0x8]
  411fc1:	mov    r8,rbx
  411fc4:	sub    r8,r12
  411fc7:	cmp    r8,0x7
  411fcb:	ja     412627 <_start@@Base+0xb7b7>
  411fd1:	mov    rsi,rbx
  411fd4:	mov    rdi,r12
  411fd7:	call   406f60 <_start@@Base+0xf0>
  411fdc:	movabs rdx,0xff00000000000000
  411fe6:	and    rax,rdx
  411fe9:	movabs rdx,0x6100000000000000
  411ff3:	cmp    rax,rdx
  411ff6:	jne    4124c4 <_start@@Base+0xb654>
  411ffc:	cmp    r8,0x1
  412000:	jle    412744 <_start@@Base+0xb8d4>
  412006:	mov    ecx,0x1
  41200b:	mov    rdx,rbx
  41200e:	mov    rsi,r12
  412011:	mov    rdi,r15
  412014:	call   40a880 <_start@@Base+0x3a10>
  412019:	mov    rbp,rax
  41201c:	cmp    r12,rax
  41201f:	je     412744 <_start@@Base+0xb8d4>
  412025:	lea    r12,[rsp+0x40]
  41202a:	mov    rcx,r12
  41202d:	mov    rdx,rbx
  412030:	mov    rsi,rax
  412033:	mov    rdi,r15
  412036:	mov    QWORD PTR [rsp+0x40],0x0
  41203f:	call   4094a0 <_start@@Base+0x2630>
  412044:	mov    r13,rax
  412047:	cmp    rax,rbp
  41204a:	je     412952 <_start@@Base+0xbae2>
  412050:	cmp    QWORD PTR [rsp+0x40],0x0
  412056:	jne    412063 <_start@@Base+0xb1f3>
  412058:	test   BYTE PTR [r15+0x10],0x2
  41205d:	je     40ee40 <_start@@Base+0x7fd0>
  412063:	mov    rdi,QWORD PTR [r15]
  412066:	mov    ecx,0x8
  41206b:	mov    edx,0x8
  412070:	mov    esi,0x16
  412075:	call   419de0 <flatcc_builder_table_add@@Base>
  41207a:	test   rax,rax
  41207d:	je     412af1 <_start@@Base+0xbc81>
  412083:	mov    rdx,QWORD PTR [rsp+0x40]
  412088:	mov    QWORD PTR [rax],rdx
  41208b:	jmp    40ee40 <_start@@Base+0x7fd0>
  412090:	mov    r14,QWORD PTR [rsp+0x8]
  412095:	mov    eax,DWORD PTR [r15+0x20]
  412099:	test   eax,eax
  41209b:	jne    411839 <_start@@Base+0xa9c9>
  4120a1:	mov    rdi,QWORD PTR [r15]
  4120a4:	call   418ee0 <flatcc_builder_end_table@@Base>
  4120a9:	mov    DWORD PTR [rsp+0x28],eax
  4120ad:	test   eax,eax
  4120af:	jne    41185b <_start@@Base+0xa9eb>
  4120b5:	jmp    411839 <_start@@Base+0xa9c9>
  4120ba:	lea    rcx,[rip+0x2801f]        # 43a0e0 <__data_start@@Base+0x20>
  4120c1:	mov    rdx,rbx
  4120c4:	mov    rsi,rax
  4120c7:	mov    rdi,r15
  4120ca:	call   40bcb0 <_start@@Base+0x4e40>
  4120cf:	cmp    r13,rax
  4120d2:	je     411831 <_start@@Base+0xa9c1>
  4120d8:	cmp    rbx,rax
  4120db:	je     411831 <_start@@Base+0xa9c1>
  4120e1:	mov    r13,rax
  4120e4:	jmp    41144c <_start@@Base+0xa5dc>
  4120e9:	mov    rdx,rbx
  4120ec:	mov    rsi,r12
  4120ef:	mov    rdi,r15
  4120f2:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4120f7:	mov    r13,rax
  4120fa:	jmp    40ee40 <_start@@Base+0x7fd0>
  4120ff:	mov    r13,rbp
  412102:	jmp    40f71e <_start@@Base+0x88ae>
  412107:	movbe  rax,QWORD PTR [r13+0x10]
  41210d:	jmp    411674 <_start@@Base+0xa804>
  412112:	mov    rdi,QWORD PTR [r15]
  412115:	call   4183c0 <flatcc_builder_start_offset_vector@@Base>
  41211a:	test   eax,eax
  41211c:	jne    412bf9 <_start@@Base+0xbd89>
  412122:	mov    rsi,r13
  412125:	mov    rcx,r14
  412128:	mov    rdx,rbx
  41212b:	mov    rdi,r15
  41212e:	call   40a940 <_start@@Base+0x3ad0>
  412133:	mov    r13,rax
  412136:	mov    eax,DWORD PTR [rsp+0x24]
  41213a:	test   eax,eax
  41213c:	je     41219b <_start@@Base+0xb32b>
  41213e:	lea    rbp,[rsp+0x28]
  412143:	mov    rsi,r13
  412146:	mov    rcx,rbp
  412149:	mov    rdx,rbx
  41214c:	mov    rdi,r15
  41214f:	call   40e620 <_start@@Base+0x77b0>
  412154:	mov    r13,rax
  412157:	mov    eax,DWORD PTR [rsp+0x28]
  41215b:	test   eax,eax
  41215d:	je     4126b4 <_start@@Base+0xb844>
  412163:	mov    rdi,QWORD PTR [r15]
  412166:	mov    esi,0x1
  41216b:	call   417e70 <flatcc_builder_extend_offset_vector@@Base>
  412170:	test   rax,rax
  412173:	je     4126d7 <_start@@Base+0xb867>
  412179:	mov    edx,DWORD PTR [rsp+0x28]
  41217d:	mov    rsi,r13
  412180:	mov    DWORD PTR [rax],edx
  412182:	mov    rcx,r14
  412185:	mov    rdx,rbx
  412188:	mov    rdi,r15
  41218b:	call   40c7c0 <_start@@Base+0x5950>
  412190:	mov    r13,rax
  412193:	mov    eax,DWORD PTR [rsp+0x24]
  412197:	test   eax,eax
  412199:	jne    412143 <_start@@Base+0xb2d3>
  41219b:	mov    rdi,QWORD PTR [r15]
  41219e:	call   419320 <flatcc_builder_end_offset_vector@@Base>
  4121a3:	mov    DWORD PTR [rsp+0x28],eax
  4121a7:	test   eax,eax
  4121a9:	je     412ba1 <_start@@Base+0xbd31>
  4121af:	mov    rdi,QWORD PTR [r15]
  4121b2:	mov    esi,0xb
  4121b7:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  4121bc:	test   rax,rax
  4121bf:	je     412b99 <_start@@Base+0xbd29>
  4121c5:	mov    edx,DWORD PTR [rsp+0x28]
  4121c9:	mov    DWORD PTR [rax],edx
  4121cb:	jmp    40ee40 <_start@@Base+0x7fd0>
  4121d0:	mov    ecx,0x7
  4121d5:	mov    rdx,rbx
  4121d8:	mov    rsi,r10
  4121db:	mov    rdi,r15
  4121de:	call   41d640 <flatcc_json_parser_set_error@@Base>
  4121e3:	mov    r13,rax
  4121e6:	cmp    r14,rax
  4121e9:	jne    40f10e <_start@@Base+0x829e>
  4121ef:	mov    r10,r14
  4121f2:	jmp    40f0d7 <_start@@Base+0x8267>
  4121f7:	nop    WORD PTR [rax+rax*1+0x0]
  412200:	mov    r14,r13
  412203:	jmp    40e667 <_start@@Base+0x77f7>
  412208:	mov    rdx,rbx
  41220b:	mov    rsi,rbp
  41220e:	mov    rdi,r15
  412211:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  412216:	mov    r13,rax
  412219:	jmp    40ee40 <_start@@Base+0x7fd0>
  41221e:	cmp    BYTE PTR [r12+0x2],0x20
  412224:	jle    410d3b <_start@@Base+0x9ecb>
  41222a:	lea    r13,[r12+0x2]
  41222f:	jmp    40ee40 <_start@@Base+0x7fd0>
  412234:	movbe  rax,QWORD PTR [rbp+0x8]
  41223a:	jmp    411103 <_start@@Base+0xa293>
  41223f:	mov    r8,r12
  412242:	lea    rcx,[rip+0x28477]        # 43a6c0 <__data_start@@Base+0x600>
  412249:	mov    rdx,rbx
  41224c:	mov    rsi,rax
  41224f:	mov    rdi,r15
  412252:	call   40a9e0 <_start@@Base+0x3b70>
  412257:	cmp    r13,rax
  41225a:	je     412b79 <_start@@Base+0xbd09>
  412260:	cmp    rbx,rax
  412263:	je     412b79 <_start@@Base+0xbd09>
  412269:	mov    r13,rax
  41226c:	jmp    40ffb3 <_start@@Base+0x9143>
  412271:	lea    r12,[rbp+0x8]
  412275:	mov    r8,rbx
  412278:	sub    r8,r12
  41227b:	cmp    r8,0x7
  41227f:	ja     4126bc <_start@@Base+0xb84c>
  412285:	mov    rsi,rbx
  412288:	mov    rdi,r12
  41228b:	call   406f60 <_start@@Base+0xf0>
  412290:	movabs rdx,0xff00000000000000
  41229a:	and    rax,rdx
  41229d:	movabs rdx,0x6100000000000000
  4122a7:	cmp    rax,rdx
  4122aa:	jne    4125dc <_start@@Base+0xb76c>
  4122b0:	cmp    r8,0x1
  4122b4:	jle    412914 <_start@@Base+0xbaa4>
  4122ba:	mov    ecx,0x1
  4122bf:	mov    rdx,rbx
  4122c2:	mov    rsi,r12
  4122c5:	mov    rdi,r15
  4122c8:	call   40a880 <_start@@Base+0x3a10>
  4122cd:	mov    rbp,rax
  4122d0:	cmp    r12,rax
  4122d3:	je     412914 <_start@@Base+0xbaa4>
  4122d9:	lea    r12,[rsp+0x40]
  4122de:	mov    rcx,r12
  4122e1:	mov    rdx,rbx
  4122e4:	mov    rsi,rax
  4122e7:	mov    rdi,r15
  4122ea:	mov    QWORD PTR [rsp+0x40],0x0
  4122f3:	call   4097b0 <_start@@Base+0x2940>
  4122f8:	mov    r13,rax
  4122fb:	cmp    rax,rbp
  4122fe:	je     412a8a <_start@@Base+0xbc1a>
  412304:	cmp    QWORD PTR [rsp+0x40],0x0
  41230a:	jne    412317 <_start@@Base+0xb4a7>
  41230c:	test   BYTE PTR [r15+0x10],0x2
  412311:	je     40ee40 <_start@@Base+0x7fd0>
  412317:	mov    rdi,QWORD PTR [r15]
  41231a:	mov    ecx,0x8
  41231f:	mov    edx,0x8
  412324:	mov    esi,0x17
  412329:	call   419de0 <flatcc_builder_table_add@@Base>
  41232e:	test   rax,rax
  412331:	je     412af9 <_start@@Base+0xbc89>
  412337:	mov    rdx,QWORD PTR [rsp+0x40]
  41233c:	mov    QWORD PTR [rax],rdx
  41233f:	jmp    40ee40 <_start@@Base+0x7fd0>
  412344:	lea    r12,[rbp+0x8]
  412348:	mov    r8,rbx
  41234b:	sub    r8,r12
  41234e:	cmp    r8,0x7
  412352:	ja     4126df <_start@@Base+0xb86f>
  412358:	mov    rsi,rbx
  41235b:	mov    rdi,r12
  41235e:	call   406f60 <_start@@Base+0xf0>
  412363:	movabs rdx,0xff00000000000000
  41236d:	and    rax,rdx
  412370:	movabs rdx,0x6100000000000000
  41237a:	cmp    rax,rdx
  41237d:	jne    4125c6 <_start@@Base+0xb756>
  412383:	cmp    r8,0x1
  412387:	jle    412858 <_start@@Base+0xb9e8>
  41238d:	mov    ecx,0x1
  412392:	mov    rdx,rbx
  412395:	mov    rsi,r12
  412398:	mov    rdi,r15
  41239b:	call   40a880 <_start@@Base+0x3a10>
  4123a0:	mov    rbp,rax
  4123a3:	cmp    r12,rax
  4123a6:	je     412858 <_start@@Base+0xb9e8>
  4123ac:	lea    r12,[rsp+0x40]
  4123b1:	mov    rcx,r12
  4123b4:	mov    rdx,rbx
  4123b7:	mov    rsi,rax
  4123ba:	mov    rdi,r15
  4123bd:	mov    DWORD PTR [rsp+0x40],0x0
  4123c5:	call   409880 <_start@@Base+0x2a10>
  4123ca:	mov    r13,rax
  4123cd:	cmp    rax,rbp
  4123d0:	je     4129e0 <_start@@Base+0xbb70>
  4123d6:	mov    r11d,DWORD PTR [rsp+0x40]
  4123db:	test   r11d,r11d
  4123de:	jne    4123eb <_start@@Base+0xb57b>
  4123e0:	test   BYTE PTR [r15+0x10],0x2
  4123e5:	je     40ee40 <_start@@Base+0x7fd0>
  4123eb:	mov    rdi,QWORD PTR [r15]
  4123ee:	mov    ecx,0x4
  4123f3:	mov    edx,0x4
  4123f8:	mov    esi,0x15
  4123fd:	call   419de0 <flatcc_builder_table_add@@Base>
  412402:	test   rax,rax
  412405:	je     412ae9 <_start@@Base+0xbc79>
  41240b:	mov    edx,DWORD PTR [rsp+0x40]
  41240f:	mov    DWORD PTR [rax],edx
  412411:	jmp    40ee40 <_start@@Base+0x7fd0>
  412416:	mov    rdx,rbx
  412419:	mov    rsi,rbp
  41241c:	mov    rdi,r15
  41241f:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  412424:	mov    r13,rax
  412427:	jmp    40ee40 <_start@@Base+0x7fd0>
  41242c:	mov    ecx,0x7
  412431:	mov    rsi,r13
  412434:	mov    rdx,rbx
  412437:	mov    rdi,r15
  41243a:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41243f:	mov    r13,rax
  412442:	cmp    rbp,rax
  412445:	je     40e80e <_start@@Base+0x799e>
  41244b:	movzx  edx,BYTE PTR [rsp+0x30]
  412450:	jmp    40e848 <_start@@Base+0x79d8>
  412455:	mov    r14,r13
  412458:	jmp    40e667 <_start@@Base+0x77f7>
  41245d:	mov    rdi,QWORD PTR [r15]
  412460:	call   419200 <flatcc_builder_end_vector@@Base>
  412465:	mov    DWORD PTR [rsp+0x28],eax
  412469:	test   eax,eax
  41246b:	je     412bd1 <_start@@Base+0xbd61>
  412471:	mov    rdi,QWORD PTR [r15]
  412474:	mov    esi,0x20
  412479:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  41247e:	test   rax,rax
  412481:	je     412bc9 <_start@@Base+0xbd59>
  412487:	mov    edx,DWORD PTR [rsp+0x28]
  41248b:	mov    DWORD PTR [rax],edx
  41248d:	jmp    40ee40 <_start@@Base+0x7fd0>
  412492:	mov    r8,r12
  412495:	lea    rcx,[rip+0x282a4]        # 43a740 <__data_start@@Base+0x680>
  41249c:	mov    rdx,rbx
  41249f:	mov    rsi,rax
  4124a2:	mov    rdi,r15
  4124a5:	call   40b620 <_start@@Base+0x47b0>
  4124aa:	cmp    r13,rax
  4124ad:	je     412b41 <_start@@Base+0xbcd1>
  4124b3:	cmp    rbx,rax
  4124b6:	je     412b41 <_start@@Base+0xbcd1>
  4124bc:	mov    r13,rax
  4124bf:	jmp    40fb1d <_start@@Base+0x8cad>
  4124c4:	mov    rdx,rbx
  4124c7:	mov    rsi,r12
  4124ca:	mov    rdi,r15
  4124cd:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4124d2:	mov    r13,rax
  4124d5:	jmp    40ee40 <_start@@Base+0x7fd0>
  4124da:	mov    r14,QWORD PTR [rsp+0x8]
  4124df:	jmp    411839 <_start@@Base+0xa9c9>
  4124e4:	mov    rdi,QWORD PTR [r15]
  4124e7:	call   419200 <flatcc_builder_end_vector@@Base>
  4124ec:	mov    DWORD PTR [rsp+0x28],eax
  4124f0:	test   eax,eax
  4124f2:	je     412bb1 <_start@@Base+0xbd41>
  4124f8:	mov    rdi,QWORD PTR [r15]
  4124fb:	mov    esi,0x5
  412500:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  412505:	test   rax,rax
  412508:	je     412ba9 <_start@@Base+0xbd39>
  41250e:	mov    edx,DWORD PTR [rsp+0x28]
  412512:	mov    DWORD PTR [rax],edx
  412514:	jmp    40ee40 <_start@@Base+0x7fd0>
  412519:	mov    ecx,0x7
  41251e:	mov    rdx,rbx
  412521:	mov    rsi,r12
  412524:	mov    rdi,r15
  412527:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41252c:	mov    r13,rax
  41252f:	mov    BYTE PTR [rsp+0x30],0x0
  412534:	cmp    rbp,rax
  412537:	jne    40e94f <_start@@Base+0x7adf>
  41253d:	mov    r12,rbp
  412540:	jmp    410042 <_start@@Base+0x91d2>
  412545:	mov    r8,rbp
  412548:	lea    rcx,[rip+0x28111]        # 43a660 <__data_start@@Base+0x5a0>
  41254f:	mov    rdx,rbx
  412552:	mov    rsi,rax
  412555:	mov    rdi,r15
  412558:	call   40b1c0 <_start@@Base+0x4350>
  41255d:	cmp    r13,rax
  412560:	je     412b01 <_start@@Base+0xbc91>
  412566:	cmp    rbx,rax
  412569:	je     412b01 <_start@@Base+0xbc91>
  41256f:	mov    r13,rax
  412572:	jmp    40f840 <_start@@Base+0x89d0>
  412577:	mov    r14,r13
  41257a:	jmp    40e667 <_start@@Base+0x77f7>
  41257f:	mov    ecx,0x21
  412584:	mov    rdx,rbx
  412587:	mov    rsi,rax
  41258a:	mov    rdi,r15
  41258d:	call   41d640 <flatcc_json_parser_set_error@@Base>
  412592:	mov    r13,rax
  412595:	jmp    40ee40 <_start@@Base+0x7fd0>
  41259a:	mov    rdx,rbx
  41259d:	mov    rsi,rbp
  4125a0:	mov    rdi,r15
  4125a3:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4125a8:	mov    r13,rax
  4125ab:	jmp    40ee40 <_start@@Base+0x7fd0>
  4125b0:	mov    rdx,rbx
  4125b3:	mov    rsi,r12
  4125b6:	mov    rdi,r15
  4125b9:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4125be:	mov    r13,rax
  4125c1:	jmp    40ee40 <_start@@Base+0x7fd0>
  4125c6:	mov    rdx,rbx
  4125c9:	mov    rsi,r12
  4125cc:	mov    rdi,r15
  4125cf:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4125d4:	mov    r13,rax
  4125d7:	jmp    40ee40 <_start@@Base+0x7fd0>
  4125dc:	mov    rdx,rbx
  4125df:	mov    rsi,r12
  4125e2:	mov    rdi,r15
  4125e5:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4125ea:	mov    r13,rax
  4125ed:	jmp    40ee40 <_start@@Base+0x7fd0>
  4125f2:	mov    rdi,QWORD PTR [r15]
  4125f5:	call   419320 <flatcc_builder_end_offset_vector@@Base>
  4125fa:	mov    DWORD PTR [rsp+0x28],eax
  4125fe:	test   eax,eax
  412600:	je     412bc1 <_start@@Base+0xbd51>
  412606:	mov    rdi,QWORD PTR [r15]
  412609:	mov    esi,0x1c
  41260e:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  412613:	test   rax,rax
  412616:	je     412bb9 <_start@@Base+0xbd49>
  41261c:	mov    edx,DWORD PTR [rsp+0x28]
  412620:	mov    DWORD PTR [rax],edx
  412622:	jmp    40ee40 <_start@@Base+0x7fd0>
  412627:	movbe  rax,QWORD PTR [rbp+0x8]
  41262d:	jmp    411fdc <_start@@Base+0xb16c>
  412632:	mov    r14,r13
  412635:	jmp    40e667 <_start@@Base+0x77f7>
  41263a:	mov    rdi,QWORD PTR [r15]
  41263d:	call   419320 <flatcc_builder_end_offset_vector@@Base>
  412642:	mov    DWORD PTR [rsp+0x28],eax
  412646:	test   eax,eax
  412648:	je     412bf1 <_start@@Base+0xbd81>
  41264e:	mov    rdi,QWORD PTR [r15]
  412651:	mov    esi,0xa
  412656:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  41265b:	test   rax,rax
  41265e:	je     412be9 <_start@@Base+0xbd79>
  412664:	mov    edx,DWORD PTR [rsp+0x28]
  412668:	mov    DWORD PTR [rax],edx
  41266a:	jmp    40ee40 <_start@@Base+0x7fd0>
  41266f:	mov    rdi,QWORD PTR [r15]
  412672:	call   419200 <flatcc_builder_end_vector@@Base>
  412677:	mov    DWORD PTR [rsp+0x28],eax
  41267b:	test   eax,eax
  41267d:	je     412ac9 <_start@@Base+0xbc59>
  412683:	mov    rdi,QWORD PTR [r15]
  412686:	mov    esi,0x21
  41268b:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  412690:	test   rax,rax
  412693:	je     412ac1 <_start@@Base+0xbc51>
  412699:	mov    edx,DWORD PTR [rsp+0x28]
  41269d:	mov    DWORD PTR [rax],edx
  41269f:	jmp    40ee40 <_start@@Base+0x7fd0>
  4126a4:	mov    r14,r13
  4126a7:	jmp    40e667 <_start@@Base+0x77f7>
  4126ac:	mov    r14,r13
  4126af:	jmp    40e667 <_start@@Base+0x77f7>
  4126b4:	mov    r14,r13
  4126b7:	jmp    40e667 <_start@@Base+0x77f7>
  4126bc:	movbe  rax,QWORD PTR [rbp+0x8]
  4126c2:	jmp    412290 <_start@@Base+0xb420>
  4126c7:	mov    r14,rax
  4126ca:	jmp    40e667 <_start@@Base+0x77f7>
  4126cf:	mov    r14,rax
  4126d2:	jmp    40e667 <_start@@Base+0x77f7>
  4126d7:	mov    r14,r13
  4126da:	jmp    40e667 <_start@@Base+0x77f7>
  4126df:	movbe  rax,QWORD PTR [rbp+0x8]
  4126e5:	jmp    412363 <_start@@Base+0xb4f3>
  4126ea:	mov    r14,r13
  4126ed:	jmp    40e667 <_start@@Base+0x77f7>
  4126f2:	mov    r14,rax
  4126f5:	jmp    40e667 <_start@@Base+0x77f7>
  4126fa:	mov    r14,r13
  4126fd:	jmp    40e667 <_start@@Base+0x77f7>
  412702:	mov    r8,rbp
  412705:	lea    rcx,[rip+0x27f14]        # 43a620 <__data_start@@Base+0x560>
  41270c:	mov    rdx,rbx
  41270f:	mov    rsi,rax
  412712:	mov    rdi,r15
  412715:	call   40bcb0 <_start@@Base+0x4e40>
  41271a:	cmp    r13,rax
  41271d:	je     412b89 <_start@@Base+0xbd19>
  412723:	cmp    rbx,rax
  412726:	je     412b89 <_start@@Base+0xbd19>
  41272c:	mov    r13,rax
  41272f:	jmp    410b8a <_start@@Base+0x9d1a>
  412734:	mov    r14,rbp
  412737:	jmp    40e667 <_start@@Base+0x77f7>
  41273c:	mov    r14,r13
  41273f:	jmp    40e667 <_start@@Base+0x77f7>
  412744:	mov    rdx,rbx
  412747:	mov    rsi,r12
  41274a:	mov    rdi,r15
  41274d:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  412752:	mov    r13,rax
  412755:	jmp    40ee40 <_start@@Base+0x7fd0>
  41275a:	mov    r14,r13
  41275d:	jmp    40e667 <_start@@Base+0x77f7>
  412762:	mov    r14,r13
  412765:	jmp    40e667 <_start@@Base+0x77f7>
  41276a:	mov    r14,rbp
  41276d:	jmp    40e667 <_start@@Base+0x77f7>
  412772:	mov    r14,r13
  412775:	jmp    40e667 <_start@@Base+0x77f7>
  41277a:	mov    ecx,0xffffffff
  41277f:	mov    edx,0x1
  412784:	mov    esi,0x1
  412789:	call   418340 <flatcc_builder_start_vector@@Base>
  41278e:	test   eax,eax
  412790:	jne    412ae1 <_start@@Base+0xbc71>
  412796:	mov    rcx,r14
  412799:	mov    rdx,rbx
  41279c:	mov    rsi,r13
  41279f:	mov    rdi,r15
  4127a2:	call   40a940 <_start@@Base+0x3ad0>
  4127a7:	mov    r10d,DWORD PTR [rsp+0x24]
  4127ac:	mov    rbp,rax
  4127af:	test   r10d,r10d
  4127b2:	je     4129cc <_start@@Base+0xbb5c>
  4127b8:	lea    r12,[rsp+0x40]
  4127bd:	jmp    4127eb <_start@@Base+0xb97b>
  4127bf:	nop
  4127c0:	movzx  edx,BYTE PTR [rsp+0x40]
  4127c5:	mov    rcx,r14
  4127c8:	mov    BYTE PTR [r13+0x0],dl
  4127cc:	mov    rsi,rax
  4127cf:	mov    rdx,rbx
  4127d2:	mov    rdi,r15
  4127d5:	call   40c7c0 <_start@@Base+0x5950>
  4127da:	mov    r9d,DWORD PTR [rsp+0x24]
  4127df:	mov    rbp,rax
  4127e2:	test   r9d,r9d
  4127e5:	je     4129cc <_start@@Base+0xbb5c>
  4127eb:	mov    rdi,QWORD PTR [r15]
  4127ee:	mov    esi,0x1
  4127f3:	mov    BYTE PTR [rsp+0x40],0x0
  4127f8:	call   417c90 <flatcc_builder_extend_vector@@Base>
  4127fd:	mov    r13,rax
  412800:	test   rax,rax
  412803:	je     4129c4 <_start@@Base+0xbb54>
  412809:	mov    rcx,r12
  41280c:	mov    rdx,rbx
  41280f:	mov    rsi,rbp
  412812:	mov    rdi,r15
  412815:	call   409950 <_start@@Base+0x2ae0>
  41281a:	cmp    rax,rbp
  41281d:	jne    4127c0 <_start@@Base+0xb950>
  41281f:	mov    r8,r12
  412822:	lea    rcx,[rip+0x27d37]        # 43a560 <__data_start@@Base+0x4a0>
  412829:	mov    rdx,rbx
  41282c:	mov    rsi,rbp
  41282f:	mov    rdi,r15
  412832:	call   40bef0 <_start@@Base+0x5080>
  412837:	cmp    rax,rbp
  41283a:	je     412b49 <_start@@Base+0xbcd9>
  412840:	cmp    rbx,rax
  412843:	jne    4127c0 <_start@@Base+0xb950>
  412849:	mov    r14,rax
  41284c:	jmp    40e667 <_start@@Base+0x77f7>
  412851:	nop    DWORD PTR [rax+0x0]
  412858:	mov    rdx,rbx
  41285b:	mov    rsi,r12
  41285e:	mov    rdi,r15
  412861:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  412866:	mov    r13,rax
  412869:	jmp    40ee40 <_start@@Base+0x7fd0>
  41286e:	mov    r14,rbp
  412871:	jmp    40e667 <_start@@Base+0x77f7>
  412876:	mov    r8,r12
  412879:	lea    rcx,[rip+0x27dc0]        # 43a640 <__data_start@@Base+0x580>
  412880:	mov    rdx,rbx
  412883:	mov    rsi,rax
  412886:	mov    rdi,r15
  412889:	call   40b1c0 <_start@@Base+0x4350>
  41288e:	cmp    r13,rax
  412891:	je     412b21 <_start@@Base+0xbcb1>
  412897:	cmp    rbx,rax
  41289a:	je     412b21 <_start@@Base+0xbcb1>
  4128a0:	mov    r13,rax
  4128a3:	jmp    411176 <_start@@Base+0xa306>
  4128a8:	mov    r8,rbp
  4128ab:	lea    rcx,[rip+0x27cee]        # 43a5a0 <__data_start@@Base+0x4e0>
  4128b2:	mov    rdx,rbx
  4128b5:	mov    rsi,rax
  4128b8:	mov    rdi,r15
  4128bb:	call   40ada0 <_start@@Base+0x3f30>
  4128c0:	cmp    r13,rax
  4128c3:	je     412b31 <_start@@Base+0xbcc1>
  4128c9:	cmp    rbx,rax
  4128cc:	je     412b31 <_start@@Base+0xbcc1>
  4128d2:	mov    r13,rax
  4128d5:	jmp    410e1a <_start@@Base+0x9faa>
  4128da:	mov    r14,rbp
  4128dd:	jmp    40e667 <_start@@Base+0x77f7>
  4128e2:	mov    r8,rbp
  4128e5:	lea    rcx,[rip+0x27cf4]        # 43a5e0 <__data_start@@Base+0x520>
  4128ec:	mov    rdx,rbx
  4128ef:	mov    rsi,rax
  4128f2:	mov    rdi,r15
  4128f5:	call   40b3f0 <_start@@Base+0x4580>
  4128fa:	cmp    r13,rax
  4128fd:	je     412b51 <_start@@Base+0xbce1>
  412903:	cmp    rbx,rax
  412906:	je     412b51 <_start@@Base+0xbce1>
  41290c:	mov    r13,rax
  41290f:	jmp    411240 <_start@@Base+0xa3d0>
  412914:	mov    rdx,rbx
  412917:	mov    rsi,r12
  41291a:	mov    rdi,r15
  41291d:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  412922:	mov    r13,rax
  412925:	jmp    40ee40 <_start@@Base+0x7fd0>
  41292a:	mov    r14,r13
  41292d:	jmp    40e667 <_start@@Base+0x77f7>
  412932:	mov    r14,rax
  412935:	jmp    40e667 <_start@@Base+0x77f7>
  41293a:	mov    r14,rax
  41293d:	jmp    40e667 <_start@@Base+0x77f7>
  412942:	mov    r14,r13
  412945:	jmp    40e667 <_start@@Base+0x77f7>
  41294a:	mov    r14,r13
  41294d:	jmp    40e667 <_start@@Base+0x77f7>
  412952:	mov    r8,r12
  412955:	lea    rcx,[rip+0x27ca4]        # 43a600 <__data_start@@Base+0x540>
  41295c:	mov    rdx,rbx
  41295f:	mov    rsi,rax
  412962:	mov    rdi,r15
  412965:	call   40bcb0 <_start@@Base+0x4e40>
  41296a:	cmp    r13,rax
  41296d:	je     412be1 <_start@@Base+0xbd71>
  412973:	cmp    rbx,rax
  412976:	je     412be1 <_start@@Base+0xbd71>
  41297c:	mov    r13,rax
  41297f:	jmp    412050 <_start@@Base+0xb1e0>
  412984:	mov    r14,r13
  412987:	jmp    40e667 <_start@@Base+0x77f7>
  41298c:	mov    r14,r13
  41298f:	jmp    40e667 <_start@@Base+0x77f7>
  412994:	mov    r14,r13
  412997:	jmp    40e667 <_start@@Base+0x77f7>
  41299c:	mov    r14,r13
  41299f:	jmp    40e667 <_start@@Base+0x77f7>
  4129a4:	mov    r14,r13
  4129a7:	jmp    40e667 <_start@@Base+0x77f7>
  4129ac:	mov    r14,r13
  4129af:	jmp    40e667 <_start@@Base+0x77f7>
  4129b4:	mov    r14,r13
  4129b7:	jmp    40e667 <_start@@Base+0x77f7>
  4129bc:	mov    r14,r13
  4129bf:	jmp    40e667 <_start@@Base+0x77f7>
  4129c4:	mov    r14,rbp
  4129c7:	jmp    40e667 <_start@@Base+0x77f7>
  4129cc:	mov    rdi,QWORD PTR [r15]
  4129cf:	mov    r13,rbp
  4129d2:	call   419200 <flatcc_builder_end_vector@@Base>
  4129d7:	mov    DWORD PTR [rsp+0x28],eax
  4129db:	jmp    40ec58 <_start@@Base+0x7de8>
  4129e0:	mov    r8,r12
  4129e3:	lea    rcx,[rip+0x27bd6]        # 43a5c0 <__data_start@@Base+0x500>
  4129ea:	mov    rdx,rbx
  4129ed:	mov    rsi,rax
  4129f0:	mov    rdi,r15
  4129f3:	call   40b3f0 <_start@@Base+0x4580>
  4129f8:	cmp    r13,rax
  4129fb:	je     412b61 <_start@@Base+0xbcf1>
  412a01:	cmp    rbx,rax
  412a04:	je     412b61 <_start@@Base+0xbcf1>
  412a0a:	mov    r13,rax
  412a0d:	jmp    4123d6 <_start@@Base+0xb566>
  412a12:	mov    r14,r13
  412a15:	jmp    40e667 <_start@@Base+0x77f7>
  412a1a:	mov    r14,r13
  412a1d:	jmp    40e667 <_start@@Base+0x77f7>
  412a22:	mov    r14,r13
  412a25:	jmp    40e667 <_start@@Base+0x77f7>
  412a2a:	mov    r14,r13
  412a2d:	jmp    40e667 <_start@@Base+0x77f7>
  412a32:	mov    r14,r13
  412a35:	jmp    40e667 <_start@@Base+0x77f7>
  412a3a:	mov    r14,r13
  412a3d:	jmp    40e667 <_start@@Base+0x77f7>
  412a42:	mov    r14,r13
  412a45:	jmp    40e667 <_start@@Base+0x77f7>
  412a4a:	mov    r14,r13
  412a4d:	jmp    40e667 <_start@@Base+0x77f7>
  412a52:	mov    r14,r13
  412a55:	jmp    40e667 <_start@@Base+0x77f7>
  412a5a:	mov    r14,r13
  412a5d:	jmp    40e667 <_start@@Base+0x77f7>
  412a62:	mov    r14,rax
  412a65:	jmp    40e667 <_start@@Base+0x77f7>
  412a6a:	mov    r14,r13
  412a6d:	jmp    40e667 <_start@@Base+0x77f7>
  412a72:	mov    r14,r13
  412a75:	jmp    40e667 <_start@@Base+0x77f7>
  412a7a:	mov    r14,r13
  412a7d:	jmp    40e667 <_start@@Base+0x77f7>
  412a82:	mov    r14,rax
  412a85:	jmp    40e667 <_start@@Base+0x77f7>
  412a8a:	mov    r8,r12
  412a8d:	lea    rcx,[rip+0x27aec]        # 43a580 <__data_start@@Base+0x4c0>
  412a94:	mov    rdx,rbx
  412a97:	mov    rsi,rax
  412a9a:	mov    rdi,r15
  412a9d:	call   40ada0 <_start@@Base+0x3f30>
  412aa2:	cmp    r13,rax
  412aa5:	je     412c01 <_start@@Base+0xbd91>
  412aab:	cmp    rbx,rax
  412aae:	je     412c01 <_start@@Base+0xbd91>
  412ab4:	mov    r13,rax
  412ab7:	jmp    412304 <_start@@Base+0xb494>
  412abc:	call   4061a0 <__stack_chk_fail@plt>
  412ac1:	mov    r14,r13
  412ac4:	jmp    40e667 <_start@@Base+0x77f7>
  412ac9:	mov    r14,r13
  412acc:	jmp    40e667 <_start@@Base+0x77f7>
  412ad1:	mov    r14,r13
  412ad4:	jmp    40e667 <_start@@Base+0x77f7>
  412ad9:	mov    r14,r13
  412adc:	jmp    40e667 <_start@@Base+0x77f7>
  412ae1:	mov    r14,r13
  412ae4:	jmp    40e667 <_start@@Base+0x77f7>
  412ae9:	mov    r14,r13
  412aec:	jmp    40e667 <_start@@Base+0x77f7>
  412af1:	mov    r14,r13
  412af4:	jmp    40e667 <_start@@Base+0x77f7>
  412af9:	mov    r14,r13
  412afc:	jmp    40e667 <_start@@Base+0x77f7>
  412b01:	mov    r14,rax
  412b04:	jmp    40e667 <_start@@Base+0x77f7>
  412b09:	mov    r14,rax
  412b0c:	jmp    40e667 <_start@@Base+0x77f7>
  412b11:	mov    r14,rax
  412b14:	jmp    40e667 <_start@@Base+0x77f7>
  412b19:	mov    r14,rax
  412b1c:	jmp    40e667 <_start@@Base+0x77f7>
  412b21:	mov    r14,rax
  412b24:	jmp    40e667 <_start@@Base+0x77f7>
  412b29:	mov    r14,r13
  412b2c:	jmp    40e667 <_start@@Base+0x77f7>
  412b31:	mov    r14,rax
  412b34:	jmp    40e667 <_start@@Base+0x77f7>
  412b39:	mov    r14,r13
  412b3c:	jmp    40e667 <_start@@Base+0x77f7>
  412b41:	mov    r14,rax
  412b44:	jmp    40e667 <_start@@Base+0x77f7>
  412b49:	mov    r14,rax
  412b4c:	jmp    40e667 <_start@@Base+0x77f7>
  412b51:	mov    r14,rax
  412b54:	jmp    40e667 <_start@@Base+0x77f7>
  412b59:	mov    r14,r13
  412b5c:	jmp    40e667 <_start@@Base+0x77f7>
  412b61:	mov    r14,rax
  412b64:	jmp    40e667 <_start@@Base+0x77f7>
  412b69:	mov    r14,r13
  412b6c:	jmp    40e667 <_start@@Base+0x77f7>
  412b71:	mov    r14,r13
  412b74:	jmp    40e667 <_start@@Base+0x77f7>
  412b79:	mov    r14,rax
  412b7c:	jmp    40e667 <_start@@Base+0x77f7>
  412b81:	mov    r14,r13
  412b84:	jmp    40e667 <_start@@Base+0x77f7>
  412b89:	mov    r14,rax
  412b8c:	jmp    40e667 <_start@@Base+0x77f7>
  412b91:	mov    r14,r13
  412b94:	jmp    40e667 <_start@@Base+0x77f7>
  412b99:	mov    r14,r13
  412b9c:	jmp    40e667 <_start@@Base+0x77f7>
  412ba1:	mov    r14,r13
  412ba4:	jmp    40e667 <_start@@Base+0x77f7>
  412ba9:	mov    r14,r13
  412bac:	jmp    40e667 <_start@@Base+0x77f7>
  412bb1:	mov    r14,r13
  412bb4:	jmp    40e667 <_start@@Base+0x77f7>
  412bb9:	mov    r14,r13
  412bbc:	jmp    40e667 <_start@@Base+0x77f7>
  412bc1:	mov    r14,r13
  412bc4:	jmp    40e667 <_start@@Base+0x77f7>
  412bc9:	mov    r14,r13
  412bcc:	jmp    40e667 <_start@@Base+0x77f7>
  412bd1:	mov    r14,r13
  412bd4:	jmp    40e667 <_start@@Base+0x77f7>
  412bd9:	mov    r14,r13
  412bdc:	jmp    40e667 <_start@@Base+0x77f7>
  412be1:	mov    r14,rax
  412be4:	jmp    40e667 <_start@@Base+0x77f7>
  412be9:	mov    r14,r13
  412bec:	jmp    40e667 <_start@@Base+0x77f7>
  412bf1:	mov    r14,r13
  412bf4:	jmp    40e667 <_start@@Base+0x77f7>
  412bf9:	mov    r14,r13
  412bfc:	jmp    40e667 <_start@@Base+0x77f7>
  412c01:	mov    r14,rax
  412c04:	jmp    40e667 <_start@@Base+0x77f7>
  412c09:	nop    DWORD PTR [rax+0x0]
  412c10:	endbr64 
  412c14:	push   r15
  412c16:	mov    r15,rsi
  412c19:	mov    esi,0x4
  412c1e:	push   r14
  412c20:	push   r13
  412c22:	push   r12
  412c24:	push   rbp
  412c25:	mov    rbp,rdi
  412c28:	push   rbx
  412c29:	mov    rbx,rdx
  412c2c:	sub    rsp,0x58
  412c30:	mov    QWORD PTR [rsp+0x8],rcx
  412c35:	mov    rdi,QWORD PTR fs:0x28
  412c3e:	mov    QWORD PTR [rsp+0x48],rdi
  412c43:	xor    edi,edi
  412c45:	mov    DWORD PTR [rcx],0x0
  412c4b:	mov    rdi,QWORD PTR [rbp+0x0]
  412c4f:	call   418560 <flatcc_builder_start_table@@Base>
  412c54:	test   eax,eax
  412c56:	je     412c98 <_start@@Base+0xbe28>
  412c58:	mov    ecx,0x21
  412c5d:	mov    rdx,rbx
  412c60:	mov    rsi,r15
  412c63:	mov    rdi,rbp
  412c66:	call   41d640 <flatcc_json_parser_set_error@@Base>
  412c6b:	mov    r12,rax
  412c6e:	mov    rdi,QWORD PTR [rsp+0x48]
  412c73:	xor    rdi,QWORD PTR fs:0x28
  412c7c:	mov    rax,r12
  412c7f:	jne    414eb3 <_start@@Base+0xe043>
  412c85:	add    rsp,0x58
  412c89:	pop    rbx
  412c8a:	pop    rbp
  412c8b:	pop    r12
  412c8d:	pop    r13
  412c8f:	pop    r14
  412c91:	pop    r15
  412c93:	ret    
  412c94:	nop    DWORD PTR [rax+0x0]
  412c98:	lea    r8,[rsp+0x30]
  412c9d:	mov    ecx,0x1
  412ca2:	mov    rdx,rbx
  412ca5:	mov    rsi,r15
  412ca8:	mov    rdi,rbp
  412cab:	call   41f960 <flatcc_json_parser_prepare_unions@@Base>
  412cb0:	cmp    rax,rbx
  412cb3:	je     412c58 <_start@@Base+0xbde8>
  412cb5:	lea    rcx,[rsp+0x1c]
  412cba:	mov    rdx,rbx
  412cbd:	mov    rsi,r15
  412cc0:	mov    rdi,rbp
  412cc3:	call   40a7e0 <_start@@Base+0x3970>
  412cc8:	mov    r12,rax
  412ccb:	mov    eax,DWORD PTR [rsp+0x1c]
  412ccf:	nop
  412cd0:	test   eax,eax
  412cd2:	je     412e40 <_start@@Base+0xbfd0>
  412cd8:	cmp    rbx,r12
  412cdb:	je     413840 <_start@@Base+0xc9d0>
  412ce1:	movzx  eax,BYTE PTR [r12]
  412ce6:	cmp    al,0x22
  412ce8:	je     4136d0 <_start@@Base+0xc860>
  412cee:	cmp    al,0x2e
  412cf0:	je     414878 <_start@@Base+0xda08>
  412cf6:	mov    DWORD PTR [rbp+0x14],0x1
  412cfd:	mov    rsi,rbx
  412d00:	sub    rsi,r12
  412d03:	cmp    rsi,0x7
  412d07:	jbe    412f30 <_start@@Base+0xc0c0>
  412d0d:	movbe  rax,QWORD PTR [r12]
  412d13:	movabs rdx,0x6d616e79616e795f
  412d1d:	cmp    rax,rdx
  412d20:	jne    412eb9 <_start@@Base+0xc049>
  412d26:	lea    r13,[r12+0x8]
  412d2b:	mov    r8,rbx
  412d2e:	sub    r8,r13
  412d31:	cmp    r8,0x7
  412d35:	ja     414600 <_start@@Base+0xd790>
  412d3b:	mov    rsi,rbx
  412d3e:	mov    rdi,r13
  412d41:	call   406f60 <_start@@Base+0xf0>
  412d46:	movabs rdx,0xffffffff00000000
  412d50:	and    rax,rdx
  412d53:	movabs rdx,0x7479706500000000
  412d5d:	cmp    rax,rdx
  412d60:	jne    413e20 <_start@@Base+0xcfb0>
  412d66:	cmp    r8,0x4
  412d6a:	jle    413e20 <_start@@Base+0xcfb0>
  412d70:	mov    ecx,0x4
  412d75:	mov    rdx,rbx
  412d78:	mov    rsi,r13
  412d7b:	mov    rdi,rbp
  412d7e:	call   40a880 <_start@@Base+0x3a10>
  412d83:	cmp    r13,rax
  412d86:	je     413e20 <_start@@Base+0xcfb0>
  412d8c:	sub    rsp,0x8
  412d90:	lea    rdi,[rip+0xffffffffffff42a9]        # 407040 <_start@@Base+0x1d0>
  412d97:	push   rdi
  412d98:	lea    rdi,[rip+0x2121]        # 414ec0 <_start@@Base+0xe050>
  412d9f:	mov    r8d,0x3
  412da5:	push   rdi
  412da6:	lea    rdi,[rip+0x276d3]        # 43a480 <__data_start@@Base+0x3c0>
  412dad:	xor    ecx,ecx
  412daf:	push   rdi
  412db0:	mov    rdx,rbx
  412db3:	mov    rsi,rax
  412db6:	mov    r9,QWORD PTR [rsp+0x50]
  412dbb:	mov    rdi,rbp
  412dbe:	call   41fed0 <flatcc_json_parser_union_type_vector@@Base>
  412dc3:	mov    r15,rax
  412dc6:	add    rsp,0x20
  412dca:	nop    WORD PTR [rax+rax*1+0x0]
  412dd0:	mov    rax,rbx
  412dd3:	sub    rax,r15
  412dd6:	cmp    rax,0x1
  412dda:	jle    412de8 <_start@@Base+0xbf78>
  412ddc:	cmp    BYTE PTR [r15],0x20
  412de0:	jg     412df9 <_start@@Base+0xbf89>
  412de2:	je     414330 <_start@@Base+0xd4c0>
  412de8:	mov    rsi,r15
  412deb:	mov    rdx,rbx
  412dee:	mov    rdi,rbp
  412df1:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  412df6:	mov    r15,rax
  412df9:	cmp    rbx,r15
  412dfc:	je     4142e0 <_start@@Base+0xd470>
  412e02:	cmp    BYTE PTR [r15],0x2c
  412e06:	je     414348 <_start@@Base+0xd4d8>
  412e0c:	mov    DWORD PTR [rsp+0x1c],0x0
  412e14:	cmp    BYTE PTR [r15],0x7d
  412e18:	je     413de0 <_start@@Base+0xcf70>
  412e1e:	mov    ecx,0xa
  412e23:	mov    rdx,rbx
  412e26:	mov    rsi,r15
  412e29:	mov    rdi,rbp
  412e2c:	call   41d640 <flatcc_json_parser_set_error@@Base>
  412e31:	mov    r12,rax
  412e34:	mov    eax,DWORD PTR [rsp+0x1c]
  412e38:	test   eax,eax
  412e3a:	jne    412cd8 <_start@@Base+0xbe68>
  412e40:	mov    r15,r12
  412e43:	jmp    4142e8 <_start@@Base+0xd478>
  412e48:	nop    DWORD PTR [rax+rax*1+0x0]
  412e50:	movsx  rcx,BYTE PTR [r12+0x6]
  412e56:	shl    rcx,0x8
  412e5a:	movsx  rdx,BYTE PTR [r12+0x5]
  412e60:	mov    rax,rdx
  412e63:	shl    rax,0x10
  412e67:	or     rcx,rax
  412e6a:	movsx  rdx,BYTE PTR [r12+0x4]
  412e70:	mov    rax,rdx
  412e73:	shl    rax,0x18
  412e77:	or     rax,rcx
  412e7a:	movsx  rdx,BYTE PTR [r12+0x3]
  412e80:	mov    rcx,rdx
  412e83:	shl    rcx,0x20
  412e87:	or     rax,rcx
  412e8a:	movsx  rdx,BYTE PTR [r12+0x2]
  412e90:	mov    rcx,rdx
  412e93:	shl    rcx,0x28
  412e97:	or     rcx,rax
  412e9a:	movsx  rdx,BYTE PTR [r12+0x1]
  412ea0:	mov    rax,rdx
  412ea3:	shl    rax,0x30
  412ea7:	or     rcx,rax
  412eaa:	movsx  rdx,BYTE PTR [r12]
  412eaf:	mov    rax,rdx
  412eb2:	shl    rax,0x38
  412eb6:	or     rax,rcx
  412eb9:	mov    rcx,rax
  412ebc:	xor    cl,cl
  412ebe:	movabs rdx,0x6d616e79616e7900
  412ec8:	cmp    rcx,rdx
  412ecb:	jne    412fa0 <_start@@Base+0xc130>
  412ed1:	cmp    rsi,0x7
  412ed5:	jle    413843 <_start@@Base+0xc9d3>
  412edb:	mov    ecx,0x7
  412ee0:	mov    rdx,rbx
  412ee3:	mov    rsi,r12
  412ee6:	mov    rdi,rbp
  412ee9:	call   40a880 <_start@@Base+0x3a10>
  412eee:	cmp    rax,r12
  412ef1:	je     413843 <_start@@Base+0xc9d3>
  412ef7:	sub    rsp,0x8
  412efb:	lea    rdi,[rip+0x1fbe]        # 414ec0 <_start@@Base+0xe050>
  412f02:	push   rdi
  412f03:	mov    r8d,0x3
  412f09:	xor    ecx,ecx
  412f0b:	mov    r9,QWORD PTR [rsp+0x40]
  412f10:	mov    rdx,rbx
  412f13:	mov    rsi,rax
  412f16:	mov    rdi,rbp
  412f19:	call   41fdf0 <flatcc_json_parser_union_vector@@Base>
  412f1e:	pop    r8
  412f20:	mov    r15,rax
  412f23:	pop    r9
  412f25:	jmp    412dd0 <_start@@Base+0xbf60>
  412f2a:	nop    WORD PTR [rax+rax*1+0x0]
  412f30:	lea    rdx,[rip+0x19151]        # 42c088 <_IO_stdin_used@@Base+0x88>
  412f37:	movsxd rax,DWORD PTR [rdx+rsi*4]
  412f3b:	add    rax,rdx
  412f3e:	notrack jmp rax
  412f41:	nop    DWORD PTR [rax+0x0]
  412f48:	xor    ecx,ecx
  412f4a:	jmp    412e5a <_start@@Base+0xbfea>
  412f4f:	nop
  412f50:	xor    ecx,ecx
  412f52:	jmp    412e6a <_start@@Base+0xbffa>
  412f57:	nop    WORD PTR [rax+rax*1+0x0]
  412f60:	xor    eax,eax
  412f62:	jmp    412e7a <_start@@Base+0xc00a>
  412f67:	nop    WORD PTR [rax+rax*1+0x0]
  412f70:	xor    eax,eax
  412f72:	jmp    412e8a <_start@@Base+0xc01a>
  412f77:	nop    WORD PTR [rax+rax*1+0x0]
  412f80:	xor    ecx,ecx
  412f82:	jmp    412e9a <_start@@Base+0xc02a>
  412f87:	nop    WORD PTR [rax+rax*1+0x0]
  412f90:	xor    ecx,ecx
  412f92:	jmp    412eaa <_start@@Base+0xc03a>
  412f97:	nop    WORD PTR [rax+rax*1+0x0]
  412fa0:	mov    rcx,rax
  412fa3:	xor    cx,cx
  412fa6:	movabs rdx,0x7072656669780000
  412fb0:	cmp    rcx,rdx
  412fb3:	jne    4143a0 <_start@@Base+0xd530>
  412fb9:	cmp    rsi,0x6
  412fbd:	jle    413843 <_start@@Base+0xc9d3>
  412fc3:	mov    ecx,0x6
  412fc8:	mov    rdx,rbx
  412fcb:	mov    rsi,r12
  412fce:	mov    rdi,rbp
  412fd1:	call   40a880 <_start@@Base+0x3a10>
  412fd6:	mov    r15,rax
  412fd9:	cmp    rax,r12
  412fdc:	je     413843 <_start@@Base+0xc9d3>
  412fe2:	mov    rdi,QWORD PTR [rbp+0x0]
  412fe6:	mov    esi,0x3
  412feb:	mov    DWORD PTR [rsp+0x20],0x0
  412ff3:	call   418560 <flatcc_builder_start_table@@Base>
  412ff8:	test   eax,eax
  412ffa:	jne    41358a <_start@@Base+0xc71a>
  413000:	mov    rdx,rbx
  413003:	lea    rcx,[rsp+0x24]
  413008:	mov    rsi,r15
  41300b:	mov    rdi,rbp
  41300e:	call   40a7e0 <_start@@Base+0x3970>
  413013:	mov    edx,DWORD PTR [rsp+0x24]
  413017:	nop    WORD PTR [rax+rax*1+0x0]
  413020:	test   edx,edx
  413022:	je     413100 <_start@@Base+0xc290>
  413028:	cmp    rbx,rax
  41302b:	je     413049 <_start@@Base+0xc1d9>
  41302d:	movzx  edx,BYTE PTR [rax]
  413030:	cmp    dl,0x22
  413033:	je     413130 <_start@@Base+0xc2c0>
  413039:	cmp    dl,0x2e
  41303c:	je     414510 <_start@@Base+0xd6a0>
  413042:	mov    DWORD PTR [rbp+0x14],0x1
  413049:	mov    rdx,rbx
  41304c:	sub    rdx,rax
  41304f:	cmp    rdx,0x7
  413053:	jbe    413110 <_start@@Base+0xc2a0>
  413059:	movbe  rdx,QWORD PTR [rax]
  41305e:	movabs rdi,0x746573746a736f6e
  413068:	cmp    rdx,rdi
  41306b:	jne    413110 <_start@@Base+0xc2a0>
  413071:	lea    rsi,[rax+0x8]
  413075:	mov    rdx,rbx
  413078:	sub    rdx,rsi
  41307b:	cmp    rdx,0x7
  41307f:	ja     413140 <_start@@Base+0xc2d0>
  413085:	mov    rdx,rbx
  413088:	mov    rdi,rbp
  41308b:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  413090:	mov    r15,rax
  413093:	mov    rax,rbx
  413096:	sub    rax,r15
  413099:	cmp    rax,0x1
  41309d:	jle    4130ab <_start@@Base+0xc23b>
  41309f:	cmp    BYTE PTR [r15],0x20
  4130a3:	jg     4130bc <_start@@Base+0xc24c>
  4130a5:	je     413648 <_start@@Base+0xc7d8>
  4130ab:	mov    rsi,r15
  4130ae:	mov    rdx,rbx
  4130b1:	mov    rdi,rbp
  4130b4:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  4130b9:	mov    r15,rax
  4130bc:	cmp    rbx,r15
  4130bf:	je     413618 <_start@@Base+0xc7a8>
  4130c5:	cmp    BYTE PTR [r15],0x2c
  4130c9:	je     413660 <_start@@Base+0xc7f0>
  4130cf:	mov    DWORD PTR [rsp+0x24],0x0
  4130d7:	cmp    BYTE PTR [r15],0x7d
  4130db:	je     4135e0 <_start@@Base+0xc770>
  4130e1:	mov    rdx,rbx
  4130e4:	mov    ecx,0xa
  4130e9:	mov    rsi,r15
  4130ec:	mov    rdi,rbp
  4130ef:	call   41d640 <flatcc_json_parser_set_error@@Base>
  4130f4:	mov    edx,DWORD PTR [rsp+0x24]
  4130f8:	test   edx,edx
  4130fa:	jne    413028 <_start@@Base+0xc1b8>
  413100:	mov    r15,rax
  413103:	jmp    413620 <_start@@Base+0xc7b0>
  413108:	nop    DWORD PTR [rax+rax*1+0x0]
  413110:	mov    rdx,rbx
  413113:	mov    rsi,rax
  413116:	mov    rdi,rbp
  413119:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  41311e:	mov    r15,rax
  413121:	jmp    413093 <_start@@Base+0xc223>
  413126:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413130:	inc    rax
  413133:	mov    DWORD PTR [rbp+0x14],0x0
  41313a:	jmp    413049 <_start@@Base+0xc1d9>
  41313f:	nop
  413140:	movabs rdx,0x6170786966657270
  41314a:	cmp    QWORD PTR [rax+0x8],rdx
  41314e:	jne    413085 <_start@@Base+0xc215>
  413154:	lea    r12,[rax+0x10]
  413158:	mov    r8,rbx
  41315b:	sub    r8,r12
  41315e:	cmp    r8,0x7
  413162:	ja     4142d0 <_start@@Base+0xd460>
  413168:	mov    rsi,rbx
  41316b:	mov    rdi,r12
  41316e:	call   406f60 <_start@@Base+0xf0>
  413173:	mov    r13,rax
  413176:	xor    r13w,r13w
  41317a:	movabs rdx,0x7273696e67320000
  413184:	cmp    r13,rdx
  413187:	je     413e60 <_start@@Base+0xcff0>
  41318d:	and    rax,0xffffffffff000000
  413193:	movabs rdx,0x7273696e67000000
  41319d:	cmp    rax,rdx
  4131a0:	jne    413860 <_start@@Base+0xc9f0>
  4131a6:	cmp    r8,0x5
  4131aa:	jle    413860 <_start@@Base+0xc9f0>
  4131b0:	mov    ecx,0x5
  4131b5:	mov    rdx,rbx
  4131b8:	mov    rsi,r12
  4131bb:	mov    rdi,rbp
  4131be:	call   40a880 <_start@@Base+0x3a10>
  4131c3:	mov    r15,rax
  4131c6:	cmp    r12,rax
  4131c9:	je     413860 <_start@@Base+0xc9f0>
  4131cf:	mov    rdi,QWORD PTR [rbp+0x0]
  4131d3:	mov    esi,0x9
  4131d8:	call   418560 <flatcc_builder_start_table@@Base>
  4131dd:	test   eax,eax
  4131df:	jne    413570 <_start@@Base+0xc700>
  4131e5:	lea    r12,[rsp+0x2c]
  4131ea:	mov    rdx,rbx
  4131ed:	mov    rsi,r15
  4131f0:	mov    rcx,r12
  4131f3:	mov    rdi,rbp
  4131f6:	call   40a7e0 <_start@@Base+0x3970>
  4131fb:	mov    edx,DWORD PTR [rsp+0x2c]
  4131ff:	mov    r15,rax
  413202:	test   edx,edx
  413204:	je     414ab0 <_start@@Base+0xdc40>
  41320a:	movabs r13,0xffffffff00000000
  413214:	jmp    413342 <_start@@Base+0xc4d2>
  413219:	nop    DWORD PTR [rax+0x0]
  413220:	movbe  rax,QWORD PTR [r15]
  413225:	movabs rdx,0x63636362ffffffff
  41322f:	cmp    rax,rdx
  413232:	ja     4136e0 <_start@@Base+0xc870>
  413238:	movabs rdx,0x6161616131323334
  413242:	cmp    rax,rdx
  413245:	jne    414dc3 <_start@@Base+0xdf53>
  41324b:	lea    r14,[r15+0x8]
  41324f:	mov    r8,rbx
  413252:	sub    r8,r14
  413255:	cmp    r8,0x7
  413259:	ja     414660 <_start@@Base+0xd7f0>
  41325f:	mov    rsi,rbx
  413262:	mov    rdi,r14
  413265:	call   406f60 <_start@@Base+0xf0>
  41326a:	movabs rdi,0xff00000000000000
  413274:	and    rax,rdi
  413277:	movabs rdx,0x3500000000000000
  413281:	cmp    rax,rdx
  413284:	jne    4136b0 <_start@@Base+0xc840>
  41328a:	cmp    r8,0x1
  41328e:	jle    4136b0 <_start@@Base+0xc840>
  413294:	mov    ecx,0x1
  413299:	mov    rdx,rbx
  41329c:	mov    rsi,r14
  41329f:	mov    rdi,rbp
  4132a2:	call   40a880 <_start@@Base+0x3a10>
  4132a7:	cmp    r14,rax
  4132aa:	je     4136b0 <_start@@Base+0xc840>
  4132b0:	lea    r14,[rsp+0x40]
  4132b5:	mov    rcx,r14
  4132b8:	mov    rdx,rbx
  4132bb:	mov    rsi,rax
  4132be:	mov    rdi,rbp
  4132c1:	mov    DWORD PTR [rsp+0x40],0x0
  4132c9:	mov    QWORD PTR [rsp],rax
  4132cd:	call   409880 <_start@@Base+0x2a10>
  4132d2:	mov    r9,QWORD PTR [rsp]
  4132d6:	mov    r15,rax
  4132d9:	cmp    r9,rax
  4132dc:	je     414bd0 <_start@@Base+0xdd60>
  4132e2:	mov    eax,DWORD PTR [rsp+0x40]
  4132e6:	test   eax,eax
  4132e8:	jne    4132f0 <_start@@Base+0xc480>
  4132ea:	test   BYTE PTR [rbp+0x10],0x2
  4132ee:	je     413320 <_start@@Base+0xc4b0>
  4132f0:	mov    rdi,QWORD PTR [rbp+0x0]
  4132f4:	mov    ecx,0x4
  4132f9:	mov    edx,0x4
  4132fe:	mov    esi,0x1
  413303:	call   419de0 <flatcc_builder_table_add@@Base>
  413308:	test   rax,rax
  41330b:	je     413570 <_start@@Base+0xc700>
  413311:	mov    edx,DWORD PTR [rsp+0x40]
  413315:	mov    DWORD PTR [rax],edx
  413317:	nop    WORD PTR [rax+rax*1+0x0]
  413320:	mov    rsi,r15
  413323:	mov    rcx,r12
  413326:	mov    rdx,rbx
  413329:	mov    rdi,rbp
  41332c:	call   40c910 <_start@@Base+0x5aa0>
  413331:	mov    r14d,DWORD PTR [rsp+0x2c]
  413336:	mov    r15,rax
  413339:	test   r14d,r14d
  41333c:	je     414ab0 <_start@@Base+0xdc40>
  413342:	cmp    rbx,r15
  413345:	je     413362 <_start@@Base+0xc4f2>
  413347:	movzx  eax,BYTE PTR [r15]
  41334b:	cmp    al,0x22
  41334d:	je     4135d0 <_start@@Base+0xc760>
  413353:	cmp    al,0x2e
  413355:	je     414640 <_start@@Base+0xd7d0>
  41335b:	mov    DWORD PTR [rbp+0x14],0x1
  413362:	mov    rsi,rbx
  413365:	sub    rsi,r15
  413368:	cmp    rsi,0x7
  41336c:	ja     413220 <_start@@Base+0xc3b0>
  413372:	lea    rdx,[rip+0x18d2f]        # 42c0a8 <_IO_stdin_used@@Base+0xa8>
  413379:	movsxd rax,DWORD PTR [rdx+rsi*4]
  41337d:	add    rax,rdx
  413380:	notrack jmp rax
  413383:	nop    DWORD PTR [rax+rax*1+0x0]
  413388:	movsx  rcx,BYTE PTR [r15+0x6]
  41338d:	shl    rcx,0x8
  413391:	movsx  rdx,BYTE PTR [r15+0x5]
  413396:	mov    rax,rdx
  413399:	shl    rax,0x10
  41339d:	or     rcx,rax
  4133a0:	movsx  rdx,BYTE PTR [r15+0x4]
  4133a5:	mov    rax,rdx
  4133a8:	shl    rax,0x18
  4133ac:	or     rax,rcx
  4133af:	movsx  rdx,BYTE PTR [r15+0x3]
  4133b4:	mov    rcx,rdx
  4133b7:	shl    rcx,0x20
  4133bb:	or     rax,rcx
  4133be:	movsx  rdx,BYTE PTR [r15+0x2]
  4133c3:	mov    rcx,rdx
  4133c6:	shl    rcx,0x28
  4133ca:	or     rcx,rax
  4133cd:	movsx  rdx,BYTE PTR [r15+0x1]
  4133d2:	mov    rax,rdx
  4133d5:	shl    rax,0x30
  4133d9:	or     rcx,rax
  4133dc:	movsx  rdx,BYTE PTR [r15]
  4133e0:	mov    rax,rdx
  4133e3:	shl    rax,0x38
  4133e7:	or     rax,rcx
  4133ea:	movabs rdx,0x63636362ffffffff
  4133f4:	cmp    rax,rdx
  4133f7:	ja     413500 <_start@@Base+0xc690>
  4133fd:	and    rax,r13
  413400:	mov    rdx,rax
  413403:	movabs rax,0x6161616100000000
  41340d:	cmp    rdx,rax
  413410:	jne    414540 <_start@@Base+0xd6d0>
  413416:	cmp    rsi,0x4
  41341a:	jle    4134e0 <_start@@Base+0xc670>
  413420:	mov    ecx,0x4
  413425:	mov    rdx,rbx
  413428:	mov    rsi,r15
  41342b:	mov    rdi,rbp
  41342e:	call   40a880 <_start@@Base+0x3a10>
  413433:	cmp    rax,r15
  413436:	je     4134e0 <_start@@Base+0xc670>
  41343c:	lea    rcx,[rsp+0x38]
  413441:	mov    rdx,rbx
  413444:	mov    rsi,rax
  413447:	mov    rdi,rbp
  41344a:	call   41f7a0 <flatcc_json_parser_build_string@@Base>
  41344f:	mov    r15,rax
  413452:	mov    eax,DWORD PTR [rsp+0x38]
  413456:	test   eax,eax
  413458:	je     413570 <_start@@Base+0xc700>
  41345e:	mov    rdi,QWORD PTR [rbp+0x0]
  413462:	xor    esi,esi
  413464:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  413469:	test   rax,rax
  41346c:	je     413570 <_start@@Base+0xc700>
  413472:	mov    edx,DWORD PTR [rsp+0x38]
  413476:	mov    DWORD PTR [rax],edx
  413478:	jmp    413320 <_start@@Base+0xc4b0>
  41347d:	nop    DWORD PTR [rax]
  413480:	xor    ecx,ecx
  413482:	jmp    413391 <_start@@Base+0xc521>
  413487:	nop    WORD PTR [rax+rax*1+0x0]
  413490:	xor    ecx,ecx
  413492:	jmp    4133a0 <_start@@Base+0xc530>
  413497:	nop    WORD PTR [rax+rax*1+0x0]
  4134a0:	xor    eax,eax
  4134a2:	jmp    4133af <_start@@Base+0xc53f>
  4134a7:	nop    WORD PTR [rax+rax*1+0x0]
  4134b0:	xor    eax,eax
  4134b2:	jmp    4133be <_start@@Base+0xc54e>
  4134b7:	nop    WORD PTR [rax+rax*1+0x0]
  4134c0:	xor    ecx,ecx
  4134c2:	jmp    4133cd <_start@@Base+0xc55d>
  4134c7:	nop    WORD PTR [rax+rax*1+0x0]
  4134d0:	xor    ecx,ecx
  4134d2:	jmp    4133dc <_start@@Base+0xc56c>
  4134d7:	nop    WORD PTR [rax+rax*1+0x0]
  4134e0:	mov    rsi,r15
  4134e3:	mov    rdx,rbx
  4134e6:	mov    rdi,rbp
  4134e9:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4134ee:	mov    r15,rax
  4134f1:	jmp    413320 <_start@@Base+0xc4b0>
  4134f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413500:	mov    rdx,rax
  413503:	and    rdx,r13
  413506:	movabs rdi,0x6363636300000000
  413510:	cmp    rdx,rdi
  413513:	jne    413790 <_start@@Base+0xc920>
  413519:	cmp    rsi,0x4
  41351d:	jle    4134e0 <_start@@Base+0xc670>
  41351f:	mov    ecx,0x4
  413524:	mov    rdx,rbx
  413527:	mov    rsi,r15
  41352a:	mov    rdi,rbp
  41352d:	call   40a880 <_start@@Base+0x3a10>
  413532:	cmp    rax,r15
  413535:	je     4134e0 <_start@@Base+0xc670>
  413537:	lea    rcx,[rsp+0x38]
  41353c:	mov    rdx,rbx
  41353f:	mov    rsi,rax
  413542:	mov    rdi,rbp
  413545:	call   41f7a0 <flatcc_json_parser_build_string@@Base>
  41354a:	mov    r15,rax
  41354d:	mov    eax,DWORD PTR [rsp+0x38]
  413551:	test   eax,eax
  413553:	je     413570 <_start@@Base+0xc700>
  413555:	mov    rdi,QWORD PTR [rbp+0x0]
  413559:	mov    esi,0x4
  41355e:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  413563:	test   rax,rax
  413566:	jne    413472 <_start@@Base+0xc602>
  41356c:	nop    DWORD PTR [rax+0x0]
  413570:	endbr64 
  413574:	mov    rsi,r15
  413577:	mov    ecx,0x21
  41357c:	mov    rdx,rbx
  41357f:	mov    rdi,rbp
  413582:	call   41d640 <flatcc_json_parser_set_error@@Base>
  413587:	mov    r15,rax
  41358a:	mov    ecx,0x21
  41358f:	mov    rsi,r15
  413592:	mov    rdx,rbx
  413595:	mov    rdi,rbp
  413598:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41359d:	mov    ecx,DWORD PTR [rsp+0x20]
  4135a1:	mov    r15,rax
  4135a4:	test   ecx,ecx
  4135a6:	je     412c58 <_start@@Base+0xbde8>
  4135ac:	mov    rdi,QWORD PTR [rbp+0x0]
  4135b0:	xor    esi,esi
  4135b2:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  4135b7:	test   rax,rax
  4135ba:	je     412c58 <_start@@Base+0xbde8>
  4135c0:	mov    edx,DWORD PTR [rsp+0x20]
  4135c4:	mov    DWORD PTR [rax],edx
  4135c6:	jmp    412dd0 <_start@@Base+0xbf60>
  4135cb:	nop    DWORD PTR [rax+rax*1+0x0]
  4135d0:	inc    r15
  4135d3:	mov    DWORD PTR [rbp+0x14],0x0
  4135da:	jmp    413362 <_start@@Base+0xc4f2>
  4135df:	nop
  4135e0:	lea    rsi,[r15+0x1]
  4135e4:	mov    rax,rbx
  4135e7:	sub    rax,rsi
  4135ea:	cmp    rax,0x1
  4135ee:	jle    413601 <_start@@Base+0xc791>
  4135f0:	cmp    BYTE PTR [r15+0x1],0x20
  4135f5:	jg     414620 <_start@@Base+0xd7b0>
  4135fb:	je     414780 <_start@@Base+0xd910>
  413601:	mov    rdx,rbx
  413604:	mov    rdi,rbp
  413607:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41360c:	mov    edx,DWORD PTR [rsp+0x24]
  413610:	jmp    413020 <_start@@Base+0xc1b0>
  413615:	nop    DWORD PTR [rax]
  413618:	mov    DWORD PTR [rsp+0x24],0x0
  413620:	mov    esi,DWORD PTR [rbp+0x20]
  413623:	test   esi,esi
  413625:	jne    41358a <_start@@Base+0xc71a>
  41362b:	mov    rdi,QWORD PTR [rbp+0x0]
  41362f:	call   418ee0 <flatcc_builder_end_table@@Base>
  413634:	mov    DWORD PTR [rsp+0x20],eax
  413638:	test   eax,eax
  41363a:	jne    4135ac <_start@@Base+0xc73c>
  413640:	jmp    41358a <_start@@Base+0xc71a>
  413645:	nop    DWORD PTR [rax]
  413648:	cmp    BYTE PTR [r15+0x1],0x20
  41364d:	jle    4130ab <_start@@Base+0xc23b>
  413653:	inc    r15
  413656:	jmp    4130bc <_start@@Base+0xc24c>
  41365b:	nop    DWORD PTR [rax+rax*1+0x0]
  413660:	lea    rax,[r15+0x1]
  413664:	mov    rdx,rbx
  413667:	sub    rdx,rax
  41366a:	cmp    rdx,0x1
  41366e:	jle    41367d <_start@@Base+0xc80d>
  413670:	cmp    BYTE PTR [r15+0x1],0x20
  413675:	jg     41368b <_start@@Base+0xc81b>
  413677:	je     4148d0 <_start@@Base+0xda60>
  41367d:	mov    rdx,rbx
  413680:	mov    rsi,rax
  413683:	mov    rdi,rbp
  413686:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41368b:	cmp    rbx,rax
  41368e:	je     4148f0 <_start@@Base+0xda80>
  413694:	cmp    BYTE PTR [rax],0x7d
  413697:	je     414a10 <_start@@Base+0xdba0>
  41369d:	mov    DWORD PTR [rsp+0x24],0x1
  4136a5:	jmp    413028 <_start@@Base+0xc1b8>
  4136aa:	nop    WORD PTR [rax+rax*1+0x0]
  4136b0:	mov    rdx,rbx
  4136b3:	mov    rsi,r14
  4136b6:	mov    rdi,rbp
  4136b9:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  4136be:	mov    r15,rax
  4136c1:	jmp    413320 <_start@@Base+0xc4b0>
  4136c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4136d0:	inc    r12
  4136d3:	mov    DWORD PTR [rbp+0x14],0x0
  4136da:	jmp    412cfd <_start@@Base+0xbe8d>
  4136df:	nop
  4136e0:	movabs rdx,0x6363636331323334
  4136ea:	cmp    rax,rdx
  4136ed:	jne    413500 <_start@@Base+0xc690>
  4136f3:	cmp    rsi,0x8
  4136f7:	jle    414440 <_start@@Base+0xd5d0>
  4136fd:	mov    ecx,0x8
  413702:	mov    rdx,rbx
  413705:	mov    rsi,r15
  413708:	mov    rdi,rbp
  41370b:	call   40a880 <_start@@Base+0x3a10>
  413710:	mov    r14,rax
  413713:	cmp    rax,r15
  413716:	je     414440 <_start@@Base+0xd5d0>
  41371c:	lea    r8,[rsp+0x40]
  413721:	mov    rcx,r8
  413724:	mov    rdx,rbx
  413727:	mov    rsi,rax
  41372a:	mov    rdi,rbp
  41372d:	mov    QWORD PTR [rsp],r8
  413731:	mov    QWORD PTR [rsp+0x40],0x0
  41373a:	call   4094a0 <_start@@Base+0x2630>
  41373f:	cmp    r14,rax
  413742:	mov    r15,rax
  413745:	mov    r8,QWORD PTR [rsp]
  413749:	je     414b68 <_start@@Base+0xdcf8>
  41374f:	cmp    QWORD PTR [rsp+0x40],0x0
  413755:	jne    413761 <_start@@Base+0xc8f1>
  413757:	test   BYTE PTR [rbp+0x10],0x2
  41375b:	je     413320 <_start@@Base+0xc4b0>
  413761:	mov    rdi,QWORD PTR [rbp+0x0]
  413765:	mov    ecx,0x8
  41376a:	mov    edx,0x8
  41376f:	mov    esi,0x5
  413774:	call   419de0 <flatcc_builder_table_add@@Base>
  413779:	test   rax,rax
  41377c:	je     413570 <_start@@Base+0xc700>
  413782:	mov    rdx,QWORD PTR [rsp+0x40]
  413787:	mov    QWORD PTR [rax],rdx
  41378a:	jmp    413320 <_start@@Base+0xc4b0>
  41378f:	nop
  413790:	movabs rdi,0x6464646431323334
  41379a:	cmp    rax,rdi
  41379d:	jne    4134e0 <_start@@Base+0xc670>
  4137a3:	cmp    rsi,0x8
  4137a7:	jle    4146a8 <_start@@Base+0xd838>
  4137ad:	mov    ecx,0x8
  4137b2:	mov    rdx,rbx
  4137b5:	mov    rsi,r15
  4137b8:	mov    rdi,rbp
  4137bb:	call   40a880 <_start@@Base+0x3a10>
  4137c0:	mov    r14,rax
  4137c3:	cmp    rax,r15
  4137c6:	je     4146a8 <_start@@Base+0xd838>
  4137cc:	lea    r8,[rsp+0x40]
  4137d1:	mov    rcx,r8
  4137d4:	mov    rdx,rbx
  4137d7:	mov    rsi,rax
  4137da:	mov    rdi,rbp
  4137dd:	mov    QWORD PTR [rsp],r8
  4137e1:	mov    QWORD PTR [rsp+0x40],0x0
  4137ea:	call   4094a0 <_start@@Base+0x2630>
  4137ef:	cmp    r14,rax
  4137f2:	mov    r15,rax
  4137f5:	mov    r8,QWORD PTR [rsp]
  4137f9:	je     414c30 <_start@@Base+0xddc0>
  4137ff:	cmp    QWORD PTR [rsp+0x40],0x0
  413805:	jne    413811 <_start@@Base+0xc9a1>
  413807:	test   BYTE PTR [rbp+0x10],0x2
  41380b:	je     413320 <_start@@Base+0xc4b0>
  413811:	mov    rdi,QWORD PTR [rbp+0x0]
  413815:	mov    ecx,0x8
  41381a:	mov    edx,0x8
  41381f:	mov    esi,0x7
  413824:	call   419de0 <flatcc_builder_table_add@@Base>
  413829:	test   rax,rax
  41382c:	jne    413782 <_start@@Base+0xc912>
  413832:	jmp    413570 <_start@@Base+0xc700>
  413837:	nop    WORD PTR [rax+rax*1+0x0]
  413840:	mov    r12,rbx
  413843:	mov    rdx,rbx
  413846:	mov    rsi,r12
  413849:	mov    rdi,rbp
  41384c:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  413851:	mov    r15,rax
  413854:	jmp    412dd0 <_start@@Base+0xbf60>
  413859:	nop    DWORD PTR [rax+0x0]
  413860:	movabs rax,0x7273696e67330000
  41386a:	cmp    r13,rax
  41386d:	jne    413e40 <_start@@Base+0xcfd0>
  413873:	mov    rax,rbx
  413876:	sub    rax,r12
  413879:	cmp    rax,0x6
  41387d:	jle    413e40 <_start@@Base+0xcfd0>
  413883:	mov    ecx,0x6
  413888:	mov    rdx,rbx
  41388b:	mov    rsi,r12
  41388e:	mov    rdi,rbp
  413891:	call   40a880 <_start@@Base+0x3a10>
  413896:	mov    r14,rax
  413899:	cmp    r12,rax
  41389c:	je     413e40 <_start@@Base+0xcfd0>
  4138a2:	mov    rdi,QWORD PTR [rbp+0x0]
  4138a6:	mov    esi,0x2
  4138ab:	call   418560 <flatcc_builder_start_table@@Base>
  4138b0:	test   eax,eax
  4138b2:	jne    4145e0 <_start@@Base+0xd770>
  4138b8:	mov    rdx,rbx
  4138bb:	lea    rcx,[rsp+0x28]
  4138c0:	mov    rsi,r14
  4138c3:	mov    rdi,rbp
  4138c6:	call   40a7e0 <_start@@Base+0x3970>
  4138cb:	mov    edx,DWORD PTR [rsp+0x28]
  4138cf:	movabs r13,0x616161615f626262
  4138d9:	nop    DWORD PTR [rax+0x0]
  4138e0:	test   edx,edx
  4138e2:	je     414dbb <_start@@Base+0xdf4b>
  4138e8:	lea    r12,[rip+0x187d9]        # 42c0c8 <_IO_stdin_used@@Base+0xc8>
  4138ef:	cmp    rbx,rax
  4138f2:	je     413910 <_start@@Base+0xcaa0>
  4138f4:	movzx  edx,BYTE PTR [rax]
  4138f7:	cmp    dl,0x22
  4138fa:	je     413bb0 <_start@@Base+0xcd40>
  413900:	cmp    dl,0x2e
  413903:	je     4145c0 <_start@@Base+0xd750>
  413909:	mov    DWORD PTR [rbp+0x14],0x1
  413910:	mov    rdx,rbx
  413913:	sub    rdx,rax
  413916:	cmp    rdx,0x7
  41391a:	jbe    413b90 <_start@@Base+0xcd20>
  413920:	movbe  rdx,QWORD PTR [rax]
  413925:	cmp    rdx,r13
  413928:	jne    413b90 <_start@@Base+0xcd20>
  41392e:	lea    r14,[rax+0x8]
  413932:	mov    rdi,rbx
  413935:	sub    rdi,r14
  413938:	cmp    rdi,0x7
  41393c:	ja     413c40 <_start@@Base+0xcdd0>
  413942:	movsxd rdx,DWORD PTR [r12+rdi*4]
  413946:	add    rdx,r12
  413949:	notrack jmp rdx
  41394c:	nop    DWORD PTR [rax+0x0]
  413950:	movsx  rcx,BYTE PTR [rax+0xe]
  413955:	shl    rcx,0x8
  413959:	movsx  rsi,BYTE PTR [rax+0xd]
  41395e:	shl    rsi,0x10
  413962:	or     rcx,rsi
  413965:	movsx  rsi,BYTE PTR [rax+0xc]
  41396a:	shl    rsi,0x18
  41396e:	mov    rdx,rsi
  413971:	or     rdx,rcx
  413974:	movsx  rsi,BYTE PTR [rax+0xb]
  413979:	shl    rsi,0x20
  41397d:	or     rdx,rsi
  413980:	movsx  rsi,BYTE PTR [rax+0xa]
  413985:	shl    rsi,0x28
  413989:	mov    rcx,rsi
  41398c:	or     rcx,rdx
  41398f:	movsx  rsi,BYTE PTR [rax+0x9]
  413994:	shl    rsi,0x30
  413998:	or     rcx,rsi
  41399b:	movsx  rax,BYTE PTR [rax+0x8]
  4139a0:	shl    rax,0x38
  4139a4:	mov    rdx,rax
  4139a7:	or     rdx,rcx
  4139aa:	xor    dl,dl
  4139ac:	movabs rax,0x625f737465707300
  4139b6:	cmp    rdx,rax
  4139b9:	jne    413b70 <_start@@Base+0xcd00>
  4139bf:	cmp    rdi,0x7
  4139c3:	jle    413b70 <_start@@Base+0xcd00>
  4139c9:	mov    ecx,0x7
  4139ce:	mov    rdx,rbx
  4139d1:	mov    rsi,r14
  4139d4:	mov    rdi,rbp
  4139d7:	call   40a880 <_start@@Base+0x3a10>
  4139dc:	cmp    r14,rax
  4139df:	je     413b70 <_start@@Base+0xcd00>
  4139e5:	mov    QWORD PTR [rsp+0x38],0x0
  4139ee:	mov    QWORD PTR [rsp+0x40],0x0
  4139f7:	mov    DWORD PTR [rsp+0x2c],0x0
  4139ff:	cmp    rbx,rax
  413a02:	je     414798 <_start@@Base+0xd928>
  413a08:	lea    rcx,[rsp+0x2c]
  413a0d:	lea    r8,[rsp+0x40]
  413a12:	mov    rdx,rbx
  413a15:	mov    rsi,rax
  413a18:	mov    rdi,rbp
  413a1b:	mov    QWORD PTR [rsp],rax
  413a1f:	call   41f220 <flatcc_json_parser_integer@@Base>
  413a24:	mov    r9,QWORD PTR [rsp]
  413a28:	mov    r15,rax
  413a2b:	cmp    r9,rax
  413a2e:	jne    414898 <_start@@Base+0xda28>
  413a34:	lea    r8,[rsp+0x38]
  413a39:	lea    rcx,[rip+0x26900]        # 43a340 <__data_start@@Base+0x280>
  413a40:	mov    rdx,rbx
  413a43:	mov    rsi,r15
  413a46:	mov    rdi,rbp
  413a49:	call   40bcb0 <_start@@Base+0x4e40>
  413a4e:	cmp    rax,r15
  413a51:	je     414dab <_start@@Base+0xdf3b>
  413a57:	cmp    rbx,rax
  413a5a:	je     414dab <_start@@Base+0xdf3b>
  413a60:	mov    rdx,QWORD PTR [rsp+0x38]
  413a65:	mov    r15,rax
  413a68:	nop    DWORD PTR [rax+rax*1+0x0]
  413a70:	test   rdx,rdx
  413a73:	jne    413a7b <_start@@Base+0xcc0b>
  413a75:	test   BYTE PTR [rbp+0x10],0x2
  413a79:	je     413aa8 <_start@@Base+0xcc38>
  413a7b:	mov    rdi,QWORD PTR [rbp+0x0]
  413a7f:	xor    esi,esi
  413a81:	mov    ecx,0x8
  413a86:	mov    edx,0x8
  413a8b:	call   419de0 <flatcc_builder_table_add@@Base>
  413a90:	test   rax,rax
  413a93:	je     413570 <_start@@Base+0xc700>
  413a99:	mov    rdx,QWORD PTR [rsp+0x38]
  413a9e:	mov    QWORD PTR [rax],rdx
  413aa1:	nop    DWORD PTR [rax+0x0]
  413aa8:	mov    rax,rbx
  413aab:	sub    rax,r15
  413aae:	cmp    rax,0x1
  413ab2:	jle    413ac0 <_start@@Base+0xcc50>
  413ab4:	cmp    BYTE PTR [r15],0x20
  413ab8:	jg     413ad1 <_start@@Base+0xcc61>
  413aba:	je     413d78 <_start@@Base+0xcf08>
  413ac0:	mov    rsi,r15
  413ac3:	mov    rdx,rbx
  413ac6:	mov    rdi,rbp
  413ac9:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  413ace:	mov    r15,rax
  413ad1:	cmp    rbx,r15
  413ad4:	je     413bf8 <_start@@Base+0xcd88>
  413ada:	cmp    BYTE PTR [r15],0x2c
  413ade:	je     413d90 <_start@@Base+0xcf20>
  413ae4:	mov    DWORD PTR [rsp+0x28],0x0
  413aec:	cmp    BYTE PTR [r15],0x7d
  413af0:	je     413bc0 <_start@@Base+0xcd50>
  413af6:	mov    rdx,rbx
  413af9:	mov    ecx,0xa
  413afe:	mov    rsi,r15
  413b01:	mov    rdi,rbp
  413b04:	call   41d640 <flatcc_json_parser_set_error@@Base>
  413b09:	mov    edx,DWORD PTR [rsp+0x28]
  413b0d:	jmp    4138e0 <_start@@Base+0xca70>
  413b12:	nop    WORD PTR [rax+rax*1+0x0]
  413b18:	xor    ecx,ecx
  413b1a:	jmp    413959 <_start@@Base+0xcae9>
  413b1f:	nop
  413b20:	xor    ecx,ecx
  413b22:	jmp    413965 <_start@@Base+0xcaf5>
  413b27:	nop    WORD PTR [rax+rax*1+0x0]
  413b30:	xor    edx,edx
  413b32:	jmp    413974 <_start@@Base+0xcb04>
  413b37:	nop    WORD PTR [rax+rax*1+0x0]
  413b40:	xor    edx,edx
  413b42:	jmp    413980 <_start@@Base+0xcb10>
  413b47:	nop    WORD PTR [rax+rax*1+0x0]
  413b50:	xor    ecx,ecx
  413b52:	jmp    41398f <_start@@Base+0xcb1f>
  413b57:	nop    WORD PTR [rax+rax*1+0x0]
  413b60:	xor    ecx,ecx
  413b62:	jmp    41399b <_start@@Base+0xcb2b>
  413b67:	nop    WORD PTR [rax+rax*1+0x0]
  413b70:	mov    rdx,rbx
  413b73:	mov    rsi,r14
  413b76:	mov    rdi,rbp
  413b79:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  413b7e:	mov    r15,rax
  413b81:	jmp    413aa8 <_start@@Base+0xcc38>
  413b86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413b90:	mov    rdx,rbx
  413b93:	mov    rsi,rax
  413b96:	mov    rdi,rbp
  413b99:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  413b9e:	mov    r15,rax
  413ba1:	jmp    413aa8 <_start@@Base+0xcc38>
  413ba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413bb0:	inc    rax
  413bb3:	mov    DWORD PTR [rbp+0x14],0x0
  413bba:	jmp    413910 <_start@@Base+0xcaa0>
  413bbf:	nop
  413bc0:	lea    rsi,[r15+0x1]
  413bc4:	mov    rax,rbx
  413bc7:	sub    rax,rsi
  413bca:	cmp    rax,0x1
  413bce:	jle    413be1 <_start@@Base+0xcd71>
  413bd0:	cmp    BYTE PTR [r15+0x1],0x20
  413bd5:	jg     414630 <_start@@Base+0xd7c0>
  413bdb:	je     4147a0 <_start@@Base+0xd930>
  413be1:	mov    rdx,rbx
  413be4:	mov    rdi,rbp
  413be7:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  413bec:	mov    edx,DWORD PTR [rsp+0x28]
  413bf0:	jmp    4138e0 <_start@@Base+0xca70>
  413bf5:	nop    DWORD PTR [rax]
  413bf8:	mov    DWORD PTR [rsp+0x28],0x0
  413c00:	mov    edi,DWORD PTR [rbp+0x20]
  413c03:	test   edi,edi
  413c05:	jne    413570 <_start@@Base+0xc700>
  413c0b:	mov    rdi,QWORD PTR [rbp+0x0]
  413c0f:	call   418ee0 <flatcc_builder_end_table@@Base>
  413c14:	mov    r12d,eax
  413c17:	test   eax,eax
  413c19:	je     413570 <_start@@Base+0xc700>
  413c1f:	mov    rdi,QWORD PTR [rbp+0x0]
  413c23:	mov    esi,0x2
  413c28:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  413c2d:	test   rax,rax
  413c30:	je     41358a <_start@@Base+0xc71a>
  413c36:	mov    DWORD PTR [rax],r12d
  413c39:	jmp    413093 <_start@@Base+0xc223>
  413c3e:	xchg   ax,ax
  413c40:	movbe  rdx,QWORD PTR [rax+0x8]
  413c46:	movabs rcx,0x625f73746172745f
  413c50:	cmp    rdx,rcx
  413c53:	jne    4139aa <_start@@Base+0xcb3a>
  413c59:	lea    r14,[rax+0x10]
  413c5d:	mov    r8,rbx
  413c60:	sub    r8,r14
  413c63:	cmp    r8,0x7
  413c67:	ja     414610 <_start@@Base+0xd7a0>
  413c6d:	mov    rsi,rbx
  413c70:	mov    rdi,r14
  413c73:	call   406f60 <_start@@Base+0xf0>
  413c78:	and    rax,0xffffffffff000000
  413c7e:	movabs rdx,0x7374657073000000
  413c88:	cmp    rax,rdx
  413c8b:	jne    413b70 <_start@@Base+0xcd00>
  413c91:	cmp    r8,0x5
  413c95:	jle    413b70 <_start@@Base+0xcd00>
  413c9b:	mov    ecx,0x5
  413ca0:	mov    rdx,rbx
  413ca3:	mov    rsi,r14
  413ca6:	mov    rdi,rbp
  413ca9:	call   40a880 <_start@@Base+0x3a10>
  413cae:	cmp    r14,rax
  413cb1:	je     413b70 <_start@@Base+0xcd00>
  413cb7:	mov    DWORD PTR [rsp+0x2c],0x0
  413cbf:	mov    QWORD PTR [rsp+0x40],0x0
  413cc8:	mov    DWORD PTR [rsp+0x38],0x0
  413cd0:	cmp    rbx,rax
  413cd3:	je     4149d0 <_start@@Base+0xdb60>
  413cd9:	lea    rcx,[rsp+0x38]
  413cde:	lea    r8,[rsp+0x40]
  413ce3:	mov    rdx,rbx
  413ce6:	mov    rsi,rax
  413ce9:	mov    rdi,rbp
  413cec:	mov    QWORD PTR [rsp],rax
  413cf0:	call   41f220 <flatcc_json_parser_integer@@Base>
  413cf5:	mov    r9,QWORD PTR [rsp]
  413cf9:	mov    r14,rax
  413cfc:	cmp    r9,rax
  413cff:	jne    414af0 <_start@@Base+0xdc80>
  413d05:	lea    r8,[rsp+0x2c]
  413d0a:	lea    rcx,[rip+0x2664f]        # 43a360 <__data_start@@Base+0x2a0>
  413d11:	mov    rdx,rbx
  413d14:	mov    rsi,r14
  413d17:	mov    rdi,rbp
  413d1a:	call   40b3f0 <_start@@Base+0x4580>
  413d1f:	mov    r15,rax
  413d22:	cmp    rax,r14
  413d25:	je     413570 <_start@@Base+0xc700>
  413d2b:	cmp    rbx,rax
  413d2e:	je     413570 <_start@@Base+0xc700>
  413d34:	mov    eax,DWORD PTR [rsp+0x2c]
  413d38:	test   eax,eax
  413d3a:	jne    413d46 <_start@@Base+0xced6>
  413d3c:	test   BYTE PTR [rbp+0x10],0x2
  413d40:	je     413aa8 <_start@@Base+0xcc38>
  413d46:	mov    rdi,QWORD PTR [rbp+0x0]
  413d4a:	mov    ecx,0x4
  413d4f:	mov    edx,0x4
  413d54:	mov    esi,0x1
  413d59:	call   419de0 <flatcc_builder_table_add@@Base>
  413d5e:	test   rax,rax
  413d61:	je     413570 <_start@@Base+0xc700>
  413d67:	mov    edx,DWORD PTR [rsp+0x2c]
  413d6b:	mov    DWORD PTR [rax],edx
  413d6d:	jmp    413aa8 <_start@@Base+0xcc38>
  413d72:	nop    WORD PTR [rax+rax*1+0x0]
  413d78:	cmp    BYTE PTR [r15+0x1],0x20
  413d7d:	jle    413ac0 <_start@@Base+0xcc50>
  413d83:	inc    r15
  413d86:	jmp    413ad1 <_start@@Base+0xcc61>
  413d8b:	nop    DWORD PTR [rax+rax*1+0x0]
  413d90:	lea    rax,[r15+0x1]
  413d94:	mov    rdx,rbx
  413d97:	sub    rdx,rax
  413d9a:	cmp    rdx,0x1
  413d9e:	jle    413dad <_start@@Base+0xcf3d>
  413da0:	cmp    BYTE PTR [r15+0x1],0x20
  413da5:	jg     413dbb <_start@@Base+0xcf4b>
  413da7:	je     414920 <_start@@Base+0xdab0>
  413dad:	mov    rdx,rbx
  413db0:	mov    rsi,rax
  413db3:	mov    rdi,rbp
  413db6:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  413dbb:	cmp    rbx,rax
  413dbe:	je     414940 <_start@@Base+0xdad0>
  413dc4:	cmp    BYTE PTR [rax],0x7d
  413dc7:	je     414a60 <_start@@Base+0xdbf0>
  413dcd:	mov    DWORD PTR [rsp+0x28],0x1
  413dd5:	jmp    4138ef <_start@@Base+0xca7f>
  413dda:	nop    WORD PTR [rax+rax*1+0x0]
  413de0:	lea    rsi,[r15+0x1]
  413de4:	mov    rax,rbx
  413de7:	sub    rax,rsi
  413dea:	cmp    rax,0x1
  413dee:	jle    413e01 <_start@@Base+0xcf91>
  413df0:	cmp    BYTE PTR [r15+0x1],0x20
  413df5:	jg     414918 <_start@@Base+0xdaa8>
  413dfb:	je     4149e0 <_start@@Base+0xdb70>
  413e01:	mov    rdx,rbx
  413e04:	mov    rdi,rbp
  413e07:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  413e0c:	mov    r12,rax
  413e0f:	mov    eax,DWORD PTR [rsp+0x1c]
  413e13:	jmp    412cd0 <_start@@Base+0xbe60>
  413e18:	nop    DWORD PTR [rax+rax*1+0x0]
  413e20:	mov    rdx,rbx
  413e23:	mov    rsi,r13
  413e26:	mov    rdi,rbp
  413e29:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  413e2e:	mov    r15,rax
  413e31:	jmp    412dd0 <_start@@Base+0xbf60>
  413e36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413e40:	mov    rdx,rbx
  413e43:	mov    rsi,r12
  413e46:	mov    rdi,rbp
  413e49:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  413e4e:	mov    r15,rax
  413e51:	jmp    413093 <_start@@Base+0xc223>
  413e56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413e60:	cmp    r8,0x6
  413e64:	jle    413e40 <_start@@Base+0xcfd0>
  413e66:	mov    ecx,0x6
  413e6b:	mov    rdx,rbx
  413e6e:	mov    rsi,r12
  413e71:	mov    rdi,rbp
  413e74:	call   40a880 <_start@@Base+0x3a10>
  413e79:	mov    r14,rax
  413e7c:	cmp    r12,rax
  413e7f:	je     413e40 <_start@@Base+0xcfd0>
  413e81:	mov    rdi,QWORD PTR [rbp+0x0]
  413e85:	mov    esi,0x2
  413e8a:	call   418560 <flatcc_builder_start_table@@Base>
  413e8f:	test   eax,eax
  413e91:	jne    4145e0 <_start@@Base+0xd770>
  413e97:	mov    rdx,rbx
  413e9a:	mov    rsi,r14
  413e9d:	lea    rcx,[rsp+0x28]
  413ea2:	mov    rdi,rbp
  413ea5:	call   40a7e0 <_start@@Base+0x3970>
  413eaa:	mov    edx,DWORD PTR [rsp+0x28]
  413eae:	movabs r13,0x616161615f626262
  413eb8:	lea    r14,[rip+0x18229]        # 42c0e8 <_IO_stdin_used@@Base+0xe8>
  413ebf:	nop
  413ec0:	test   edx,edx
  413ec2:	je     414db3 <_start@@Base+0xdf43>
  413ec8:	movabs r12,0x625f73746172745f
  413ed2:	cmp    rbx,rax
  413ed5:	je     413ef3 <_start@@Base+0xd083>
  413ed7:	movzx  edx,BYTE PTR [rax]
  413eda:	cmp    dl,0x22
  413edd:	je     413fd0 <_start@@Base+0xd160>
  413ee3:	cmp    dl,0x2e
  413ee6:	je     414420 <_start@@Base+0xd5b0>
  413eec:	mov    DWORD PTR [rbp+0x14],0x1
  413ef3:	mov    rdx,rbx
  413ef6:	sub    rdx,rax
  413ef9:	cmp    rdx,0x7
  413efd:	jbe    413fb0 <_start@@Base+0xd140>
  413f03:	movbe  rdx,QWORD PTR [rax]
  413f08:	cmp    rdx,r13
  413f0b:	jne    413fb0 <_start@@Base+0xd140>
  413f11:	lea    r15,[rax+0x8]
  413f15:	mov    rdx,rbx
  413f18:	sub    rdx,r15
  413f1b:	cmp    rdx,0x7
  413f1f:	ja     414060 <_start@@Base+0xd1f0>
  413f25:	movsxd rdx,DWORD PTR [r14+rdx*4]
  413f29:	add    rdx,r14
  413f2c:	notrack jmp rdx
  413f2f:	nop
  413f30:	mov    rsi,r15
  413f33:	mov    rdx,rbx
  413f36:	mov    rdi,rbp
  413f39:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  413f3e:	mov    r15,rax
  413f41:	mov    rax,rbx
  413f44:	sub    rax,r15
  413f47:	cmp    rax,0x1
  413f4b:	jle    413f59 <_start@@Base+0xd0e9>
  413f4d:	cmp    BYTE PTR [r15],0x20
  413f51:	jg     413f6a <_start@@Base+0xd0fa>
  413f53:	je     414268 <_start@@Base+0xd3f8>
  413f59:	mov    rsi,r15
  413f5c:	mov    rdx,rbx
  413f5f:	mov    rdi,rbp
  413f62:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  413f67:	mov    r15,rax
  413f6a:	cmp    rbx,r15
  413f6d:	je     414018 <_start@@Base+0xd1a8>
  413f73:	cmp    BYTE PTR [r15],0x2c
  413f77:	je     414280 <_start@@Base+0xd410>
  413f7d:	mov    DWORD PTR [rsp+0x28],0x0
  413f85:	cmp    BYTE PTR [r15],0x7d
  413f89:	je     413fe0 <_start@@Base+0xd170>
  413f8b:	mov    rdx,rbx
  413f8e:	mov    ecx,0xa
  413f93:	mov    rsi,r15
  413f96:	mov    rdi,rbp
  413f99:	call   41d640 <flatcc_json_parser_set_error@@Base>
  413f9e:	mov    edx,DWORD PTR [rsp+0x28]
  413fa2:	jmp    413ec0 <_start@@Base+0xd050>
  413fa7:	nop    WORD PTR [rax+rax*1+0x0]
  413fb0:	mov    rdx,rbx
  413fb3:	mov    rsi,rax
  413fb6:	mov    rdi,rbp
  413fb9:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  413fbe:	mov    r15,rax
  413fc1:	jmp    413f41 <_start@@Base+0xd0d1>
  413fc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413fd0:	inc    rax
  413fd3:	mov    DWORD PTR [rbp+0x14],0x0
  413fda:	jmp    413ef3 <_start@@Base+0xd083>
  413fdf:	nop
  413fe0:	lea    rsi,[r15+0x1]
  413fe4:	mov    rax,rbx
  413fe7:	sub    rax,rsi
  413fea:	cmp    rax,0x1
  413fee:	jle    414001 <_start@@Base+0xd191>
  413ff0:	cmp    BYTE PTR [r15+0x1],0x20
  413ff5:	jg     414530 <_start@@Base+0xd6c0>
  413ffb:	je     414690 <_start@@Base+0xd820>
  414001:	mov    rdx,rbx
  414004:	mov    rdi,rbp
  414007:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41400c:	mov    edx,DWORD PTR [rsp+0x28]
  414010:	jmp    413ec0 <_start@@Base+0xd050>
  414015:	nop    DWORD PTR [rax]
  414018:	mov    DWORD PTR [rsp+0x28],0x0
  414020:	mov    ecx,DWORD PTR [rbp+0x20]
  414023:	test   ecx,ecx
  414025:	jne    413570 <_start@@Base+0xc700>
  41402b:	mov    rdi,QWORD PTR [rbp+0x0]
  41402f:	call   418ee0 <flatcc_builder_end_table@@Base>
  414034:	mov    r12d,eax
  414037:	test   eax,eax
  414039:	je     413570 <_start@@Base+0xc700>
  41403f:	mov    rdi,QWORD PTR [rbp+0x0]
  414043:	mov    esi,0x1
  414048:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  41404d:	test   rax,rax
  414050:	jne    413c36 <_start@@Base+0xcdc6>
  414056:	jmp    41358a <_start@@Base+0xc71a>
  41405b:	nop    DWORD PTR [rax+rax*1+0x0]
  414060:	movbe  rax,QWORD PTR [rax+0x8]
  414066:	movabs rdi,0x625f737465707300
  414070:	mov    rcx,rax
  414073:	xor    cl,cl
  414075:	cmp    rcx,rdi
  414078:	jne    414170 <_start@@Base+0xd300>
  41407e:	cmp    rdx,0x7
  414082:	jle    413f30 <_start@@Base+0xd0c0>
  414088:	mov    ecx,0x7
  41408d:	mov    rdx,rbx
  414090:	mov    rsi,r15
  414093:	mov    rdi,rbp
  414096:	call   40a880 <_start@@Base+0x3a10>
  41409b:	cmp    r15,rax
  41409e:	je     413f30 <_start@@Base+0xd0c0>
  4140a4:	mov    QWORD PTR [rsp+0x38],0x0
  4140ad:	mov    QWORD PTR [rsp+0x40],0x0
  4140b6:	mov    DWORD PTR [rsp+0x2c],0x0
  4140be:	cmp    rbx,rax
  4140c1:	je     414670 <_start@@Base+0xd800>
  4140c7:	lea    rcx,[rsp+0x2c]
  4140cc:	lea    r8,[rsp+0x40]
  4140d1:	mov    rdx,rbx
  4140d4:	mov    rsi,rax
  4140d7:	mov    rdi,rbp
  4140da:	mov    QWORD PTR [rsp],rax
  4140de:	call   41f220 <flatcc_json_parser_integer@@Base>
  4140e3:	mov    r9,QWORD PTR [rsp]
  4140e7:	mov    r15,rax
  4140ea:	cmp    r9,rax
  4140ed:	jne    4147b8 <_start@@Base+0xd948>
  4140f3:	lea    r8,[rsp+0x38]
  4140f8:	lea    rcx,[rip+0x26361]        # 43a460 <__data_start@@Base+0x3a0>
  4140ff:	mov    rdx,rbx
  414102:	mov    rsi,r15
  414105:	mov    rdi,rbp
  414108:	call   40bcb0 <_start@@Base+0x4e40>
  41410d:	cmp    rax,r15
  414110:	je     414dab <_start@@Base+0xdf3b>
  414116:	cmp    rbx,rax
  414119:	je     414dab <_start@@Base+0xdf3b>
  41411f:	mov    rdx,QWORD PTR [rsp+0x38]
  414124:	mov    r15,rax
  414127:	nop    WORD PTR [rax+rax*1+0x0]
  414130:	test   rdx,rdx
  414133:	jne    41413f <_start@@Base+0xd2cf>
  414135:	test   BYTE PTR [rbp+0x10],0x2
  414139:	je     413f41 <_start@@Base+0xd0d1>
  41413f:	mov    rdi,QWORD PTR [rbp+0x0]
  414143:	xor    esi,esi
  414145:	mov    ecx,0x8
  41414a:	mov    edx,0x8
  41414f:	call   419de0 <flatcc_builder_table_add@@Base>
  414154:	test   rax,rax
  414157:	je     413570 <_start@@Base+0xc700>
  41415d:	mov    rdx,QWORD PTR [rsp+0x38]
  414162:	mov    QWORD PTR [rax],rdx
  414165:	jmp    413f41 <_start@@Base+0xd0d1>
  41416a:	nop    WORD PTR [rax+rax*1+0x0]
  414170:	cmp    rax,r12
  414173:	jne    413f30 <_start@@Base+0xd0c0>
  414179:	cmp    rdx,0x8
  41417d:	jle    413f30 <_start@@Base+0xd0c0>
  414183:	mov    ecx,0x8
  414188:	mov    rdx,rbx
  41418b:	mov    rsi,r15
  41418e:	mov    rdi,rbp
  414191:	call   40a880 <_start@@Base+0x3a10>
  414196:	cmp    r15,rax
  414199:	je     413f30 <_start@@Base+0xd0c0>
  41419f:	mov    DWORD PTR [rsp+0x2c],0x0
  4141a7:	mov    QWORD PTR [rsp+0x40],0x0
  4141b0:	mov    DWORD PTR [rsp+0x38],0x0
  4141b8:	cmp    rbx,rax
  4141bb:	je     414680 <_start@@Base+0xd810>
  4141c1:	lea    rcx,[rsp+0x38]
  4141c6:	lea    r8,[rsp+0x40]
  4141cb:	mov    rdx,rbx
  4141ce:	mov    rsi,rax
  4141d1:	mov    rdi,rbp
  4141d4:	mov    QWORD PTR [rsp],rax
  4141d8:	call   41f220 <flatcc_json_parser_integer@@Base>
  4141dd:	mov    r9,QWORD PTR [rsp]
  4141e1:	mov    r10,rax
  4141e4:	cmp    r9,rax
  4141e7:	jne    4147f8 <_start@@Base+0xd988>
  4141ed:	mov    rsi,r10
  4141f0:	lea    r8,[rsp+0x2c]
  4141f5:	lea    rcx,[rip+0x26244]        # 43a440 <__data_start@@Base+0x380>
  4141fc:	mov    rdx,rbx
  4141ff:	mov    rdi,rbp
  414202:	mov    QWORD PTR [rsp],r10
  414206:	call   40b3f0 <_start@@Base+0x4580>
  41420b:	mov    r10,QWORD PTR [rsp]
  41420f:	mov    r15,rax
  414212:	cmp    rax,r10
  414215:	je     413570 <_start@@Base+0xc700>
  41421b:	cmp    rbx,rax
  41421e:	je     413570 <_start@@Base+0xc700>
  414224:	mov    eax,DWORD PTR [rsp+0x2c]
  414228:	test   eax,eax
  41422a:	jne    414236 <_start@@Base+0xd3c6>
  41422c:	test   BYTE PTR [rbp+0x10],0x2
  414230:	je     413f41 <_start@@Base+0xd0d1>
  414236:	mov    rdi,QWORD PTR [rbp+0x0]
  41423a:	mov    ecx,0x4
  41423f:	mov    edx,0x4
  414244:	mov    esi,0x1
  414249:	call   419de0 <flatcc_builder_table_add@@Base>
  41424e:	test   rax,rax
  414251:	je     413570 <_start@@Base+0xc700>
  414257:	mov    edx,DWORD PTR [rsp+0x2c]
  41425b:	mov    DWORD PTR [rax],edx
  41425d:	jmp    413f41 <_start@@Base+0xd0d1>
  414262:	nop    WORD PTR [rax+rax*1+0x0]
  414268:	cmp    BYTE PTR [r15+0x1],0x20
  41426d:	jle    413f59 <_start@@Base+0xd0e9>
  414273:	inc    r15
  414276:	jmp    413f6a <_start@@Base+0xd0fa>
  41427b:	nop    DWORD PTR [rax+rax*1+0x0]
  414280:	lea    rax,[r15+0x1]
  414284:	mov    rdx,rbx
  414287:	sub    rdx,rax
  41428a:	cmp    rdx,0x1
  41428e:	jle    41429d <_start@@Base+0xd42d>
  414290:	cmp    BYTE PTR [r15+0x1],0x20
  414295:	jg     4142ab <_start@@Base+0xd43b>
  414297:	je     414830 <_start@@Base+0xd9c0>
  41429d:	mov    rdx,rbx
  4142a0:	mov    rsi,rax
  4142a3:	mov    rdi,rbp
  4142a6:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  4142ab:	cmp    rbx,rax
  4142ae:	je     414850 <_start@@Base+0xd9e0>
  4142b4:	cmp    BYTE PTR [rax],0x7d
  4142b7:	je     414978 <_start@@Base+0xdb08>
  4142bd:	mov    DWORD PTR [rsp+0x28],0x1
  4142c5:	jmp    413ed2 <_start@@Base+0xd062>
  4142ca:	nop    WORD PTR [rax+rax*1+0x0]
  4142d0:	movbe  rax,QWORD PTR [rax+0x10]
  4142d6:	jmp    413173 <_start@@Base+0xc303>
  4142db:	nop    DWORD PTR [rax+rax*1+0x0]
  4142e0:	mov    DWORD PTR [rsp+0x1c],0x0
  4142e8:	mov    eax,DWORD PTR [rbp+0x20]
  4142eb:	test   eax,eax
  4142ed:	jne    412c58 <_start@@Base+0xbde8>
  4142f3:	mov    rcx,QWORD PTR [rsp+0x30]
  4142f8:	mov    rdx,rbx
  4142fb:	mov    rsi,r15
  4142fe:	mov    rdi,rbp
  414301:	call   41f9e0 <flatcc_json_parser_finalize_unions@@Base>
  414306:	mov    rdi,QWORD PTR [rbp+0x0]
  41430a:	mov    r12,rax
  41430d:	call   418ee0 <flatcc_builder_end_table@@Base>
  414312:	mov    rdi,QWORD PTR [rsp+0x8]
  414317:	mov    DWORD PTR [rdi],eax
  414319:	test   eax,eax
  41431b:	jne    412c6e <_start@@Base+0xbdfe>
  414321:	mov    r15,r12
  414324:	jmp    412c58 <_start@@Base+0xbde8>
  414329:	nop    DWORD PTR [rax+0x0]
  414330:	cmp    BYTE PTR [r15+0x1],0x20
  414335:	jle    412de8 <_start@@Base+0xbf78>
  41433b:	inc    r15
  41433e:	jmp    412df9 <_start@@Base+0xbf89>
  414343:	nop    DWORD PTR [rax+rax*1+0x0]
  414348:	lea    r12,[r15+0x1]
  41434c:	mov    rax,rbx
  41434f:	sub    rax,r12
  414352:	cmp    rax,0x1
  414356:	jle    414365 <_start@@Base+0xd4f5>
  414358:	cmp    BYTE PTR [r15+0x1],0x20
  41435d:	jg     414376 <_start@@Base+0xd506>
  41435f:	je     414b50 <_start@@Base+0xdce0>
  414365:	mov    rsi,r12
  414368:	mov    rdx,rbx
  41436b:	mov    rdi,rbp
  41436e:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  414373:	mov    r12,rax
  414376:	cmp    rbx,r12
  414379:	je     414c60 <_start@@Base+0xddf0>
  41437f:	cmp    BYTE PTR [r12],0x7d
  414384:	je     414c08 <_start@@Base+0xdd98>
  41438a:	mov    DWORD PTR [rsp+0x1c],0x1
  414392:	jmp    412cd8 <_start@@Base+0xbe68>
  414397:	nop    WORD PTR [rax+rax*1+0x0]
  4143a0:	and    rax,0xffffffffff000000
  4143a6:	movabs rdx,0x6d6f766965000000
  4143b0:	cmp    rax,rdx
  4143b3:	jne    413843 <_start@@Base+0xc9d3>
  4143b9:	cmp    rsi,0x5
  4143bd:	jle    413843 <_start@@Base+0xc9d3>
  4143c3:	mov    ecx,0x5
  4143c8:	mov    rdx,rbx
  4143cb:	mov    rsi,r12
  4143ce:	mov    rdi,rbp
  4143d1:	call   40a880 <_start@@Base+0x3a10>
  4143d6:	cmp    rax,r12
  4143d9:	je     413843 <_start@@Base+0xc9d3>
  4143df:	mov    rdx,rbx
  4143e2:	lea    rcx,[rsp+0x20]
  4143e7:	mov    rsi,rax
  4143ea:	mov    rdi,rbp
  4143ed:	call   40ca60 <_start@@Base+0x5bf0>
  4143f2:	mov    edx,DWORD PTR [rsp+0x20]
  4143f6:	mov    r15,rax
  4143f9:	test   edx,edx
  4143fb:	je     412c58 <_start@@Base+0xbde8>
  414401:	mov    rdi,QWORD PTR [rbp+0x0]
  414405:	mov    esi,0x1
  41440a:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  41440f:	test   rax,rax
  414412:	jne    4135c0 <_start@@Base+0xc750>
  414418:	jmp    412c58 <_start@@Base+0xbde8>
  41441d:	nop    DWORD PTR [rax]
  414420:	mov    ecx,0x5
  414425:	mov    rdx,rbx
  414428:	mov    rsi,rax
  41442b:	mov    rdi,rbp
  41442e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  414433:	jmp    413ef3 <_start@@Base+0xd083>
  414438:	nop    DWORD PTR [rax+rax*1+0x0]
  414440:	lea    r14,[r15+0x8]
  414444:	mov    r8,rbx
  414447:	sub    r8,r14
  41444a:	cmp    r8,0x7
  41444e:	ja     414968 <_start@@Base+0xdaf8>
  414454:	mov    rsi,rbx
  414457:	mov    rdi,r14
  41445a:	call   406f60 <_start@@Base+0xf0>
  41445f:	movabs rdi,0xff00000000000000
  414469:	and    rax,rdi
  41446c:	movabs rdx,0x3500000000000000
  414476:	cmp    rax,rdx
  414479:	jne    4136b0 <_start@@Base+0xc840>
  41447f:	cmp    r8,0x1
  414483:	jle    4136b0 <_start@@Base+0xc840>
  414489:	mov    ecx,0x1
  41448e:	mov    rdx,rbx
  414491:	mov    rsi,r14
  414494:	mov    rdi,rbp
  414497:	call   40a880 <_start@@Base+0x3a10>
  41449c:	cmp    r14,rax
  41449f:	je     4136b0 <_start@@Base+0xc840>
  4144a5:	lea    r14,[rsp+0x40]
  4144aa:	mov    rcx,r14
  4144ad:	mov    rdx,rbx
  4144b0:	mov    rsi,rax
  4144b3:	mov    rdi,rbp
  4144b6:	mov    DWORD PTR [rsp+0x40],0x0
  4144be:	mov    QWORD PTR [rsp],rax
  4144c2:	call   409880 <_start@@Base+0x2a10>
  4144c7:	mov    r9,QWORD PTR [rsp]
  4144cb:	mov    r15,rax
  4144ce:	cmp    r9,rax
  4144d1:	je     414d21 <_start@@Base+0xdeb1>
  4144d7:	mov    eax,DWORD PTR [rsp+0x40]
  4144db:	test   eax,eax
  4144dd:	jne    4144e9 <_start@@Base+0xd679>
  4144df:	test   BYTE PTR [rbp+0x10],0x2
  4144e3:	je     413320 <_start@@Base+0xc4b0>
  4144e9:	mov    rdi,QWORD PTR [rbp+0x0]
  4144ed:	mov    ecx,0x4
  4144f2:	mov    edx,0x4
  4144f7:	mov    esi,0x6
  4144fc:	call   419de0 <flatcc_builder_table_add@@Base>
  414501:	test   rax,rax
  414504:	jne    413311 <_start@@Base+0xc4a1>
  41450a:	jmp    413570 <_start@@Base+0xc700>
  41450f:	nop
  414510:	mov    ecx,0x5
  414515:	mov    rdx,rbx
  414518:	mov    rsi,rax
  41451b:	mov    rdi,rbp
  41451e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  414523:	jmp    413049 <_start@@Base+0xc1d9>
  414528:	nop    DWORD PTR [rax+rax*1+0x0]
  414530:	mov    r15,rsi
  414533:	jmp    414020 <_start@@Base+0xd1b0>
  414538:	nop    DWORD PTR [rax+rax*1+0x0]
  414540:	movabs rax,0x6262626200000000
  41454a:	cmp    rdx,rax
  41454d:	jne    4134e0 <_start@@Base+0xc670>
  414553:	cmp    rsi,0x4
  414557:	jle    4134e0 <_start@@Base+0xc670>
  41455d:	mov    ecx,0x4
  414562:	mov    rdx,rbx
  414565:	mov    rsi,r15
  414568:	mov    rdi,rbp
  41456b:	call   40a880 <_start@@Base+0x3a10>
  414570:	cmp    rax,r15
  414573:	je     4134e0 <_start@@Base+0xc670>
  414579:	lea    rcx,[rsp+0x38]
  41457e:	mov    rdx,rbx
  414581:	mov    rsi,rax
  414584:	mov    rdi,rbp
  414587:	call   41f7a0 <flatcc_json_parser_build_string@@Base>
  41458c:	mov    r15,rax
  41458f:	mov    eax,DWORD PTR [rsp+0x38]
  414593:	test   eax,eax
  414595:	je     413570 <_start@@Base+0xc700>
  41459b:	mov    rdi,QWORD PTR [rbp+0x0]
  41459f:	mov    esi,0x2
  4145a4:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  4145a9:	test   rax,rax
  4145ac:	jne    413472 <_start@@Base+0xc602>
  4145b2:	jmp    413570 <_start@@Base+0xc700>
  4145b7:	nop    WORD PTR [rax+rax*1+0x0]
  4145c0:	mov    ecx,0x5
  4145c5:	mov    rdx,rbx
  4145c8:	mov    rsi,rax
  4145cb:	mov    rdi,rbp
  4145ce:	call   41d640 <flatcc_json_parser_set_error@@Base>
  4145d3:	jmp    413910 <_start@@Base+0xcaa0>
  4145d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4145e0:	mov    ecx,0x21
  4145e5:	mov    rdx,rbx
  4145e8:	mov    rsi,r14
  4145eb:	mov    rdi,rbp
  4145ee:	call   41d640 <flatcc_json_parser_set_error@@Base>
  4145f3:	mov    r15,rax
  4145f6:	jmp    41358a <_start@@Base+0xc71a>
  4145fb:	nop    DWORD PTR [rax+rax*1+0x0]
  414600:	movbe  rax,QWORD PTR [r12+0x8]
  414607:	jmp    412d46 <_start@@Base+0xbed6>
  41460c:	nop    DWORD PTR [rax+0x0]
  414610:	movbe  rax,QWORD PTR [rax+0x10]
  414616:	jmp    413c78 <_start@@Base+0xce08>
  41461b:	nop    DWORD PTR [rax+rax*1+0x0]
  414620:	mov    r15,rsi
  414623:	jmp    413620 <_start@@Base+0xc7b0>
  414628:	nop    DWORD PTR [rax+rax*1+0x0]
  414630:	mov    r15,rsi
  414633:	jmp    413c00 <_start@@Base+0xcd90>
  414638:	nop    DWORD PTR [rax+rax*1+0x0]
  414640:	mov    rsi,r15
  414643:	mov    ecx,0x5
  414648:	mov    rdx,rbx
  41464b:	mov    rdi,rbp
  41464e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  414653:	mov    r15,rax
  414656:	jmp    413362 <_start@@Base+0xc4f2>
  41465b:	nop    DWORD PTR [rax+rax*1+0x0]
  414660:	movbe  rax,QWORD PTR [r15+0x8]
  414666:	jmp    41326a <_start@@Base+0xc3fa>
  41466b:	nop    DWORD PTR [rax+rax*1+0x0]
  414670:	mov    r15,rbx
  414673:	jmp    4140f3 <_start@@Base+0xd283>
  414678:	nop    DWORD PTR [rax+rax*1+0x0]
  414680:	mov    r10,rbx
  414683:	jmp    4141ed <_start@@Base+0xd37d>
  414688:	nop    DWORD PTR [rax+rax*1+0x0]
  414690:	cmp    BYTE PTR [r15+0x2],0x20
  414695:	jle    414001 <_start@@Base+0xd191>
  41469b:	add    r15,0x2
  41469f:	jmp    414020 <_start@@Base+0xd1b0>
  4146a4:	nop    DWORD PTR [rax+0x0]
  4146a8:	lea    r14,[r15+0x8]
  4146ac:	mov    r8,rbx
  4146af:	sub    r8,r14
  4146b2:	cmp    r8,0x7
  4146b6:	ja     414b40 <_start@@Base+0xdcd0>
  4146bc:	mov    rsi,rbx
  4146bf:	mov    rdi,r14
  4146c2:	call   406f60 <_start@@Base+0xf0>
  4146c7:	movabs rdi,0xff00000000000000
  4146d1:	and    rax,rdi
  4146d4:	movabs rdx,0x3500000000000000
  4146de:	cmp    rax,rdx
  4146e1:	jne    4136b0 <_start@@Base+0xc840>
  4146e7:	cmp    r8,0x1
  4146eb:	jle    4136b0 <_start@@Base+0xc840>
  4146f1:	mov    ecx,0x1
  4146f6:	mov    rdx,rbx
  4146f9:	mov    rsi,r14
  4146fc:	mov    rdi,rbp
  4146ff:	call   40a880 <_start@@Base+0x3a10>
  414704:	cmp    r14,rax
  414707:	je     4136b0 <_start@@Base+0xc840>
  41470d:	lea    r14,[rsp+0x40]
  414712:	mov    rcx,r14
  414715:	mov    rdx,rbx
  414718:	mov    rsi,rax
  41471b:	mov    rdi,rbp
  41471e:	mov    DWORD PTR [rsp+0x40],0x0
  414726:	mov    QWORD PTR [rsp],rax
  41472a:	call   409880 <_start@@Base+0x2a10>
  41472f:	mov    r9,QWORD PTR [rsp]
  414733:	mov    r15,rax
  414736:	cmp    r9,rax
  414739:	je     414d58 <_start@@Base+0xdee8>
  41473f:	mov    eax,DWORD PTR [rsp+0x40]
  414743:	test   eax,eax
  414745:	jne    414751 <_start@@Base+0xd8e1>
  414747:	test   BYTE PTR [rbp+0x10],0x2
  41474b:	je     413320 <_start@@Base+0xc4b0>
  414751:	mov    rdi,QWORD PTR [rbp+0x0]
  414755:	mov    ecx,0x4
  41475a:	mov    edx,0x4
  41475f:	mov    esi,0x8
  414764:	call   419de0 <flatcc_builder_table_add@@Base>
  414769:	test   rax,rax
  41476c:	jne    413311 <_start@@Base+0xc4a1>
  414772:	jmp    413570 <_start@@Base+0xc700>
  414777:	nop    WORD PTR [rax+rax*1+0x0]
  414780:	cmp    BYTE PTR [r15+0x2],0x20
  414785:	jle    413601 <_start@@Base+0xc791>
  41478b:	add    r15,0x2
  41478f:	jmp    413620 <_start@@Base+0xc7b0>
  414794:	nop    DWORD PTR [rax+0x0]
  414798:	mov    r15,rbx
  41479b:	jmp    413a34 <_start@@Base+0xcbc4>
  4147a0:	cmp    BYTE PTR [r15+0x2],0x20
  4147a5:	jle    413be1 <_start@@Base+0xcd71>
  4147ab:	add    r15,0x2
  4147af:	jmp    413c00 <_start@@Base+0xcd90>
  4147b4:	nop    DWORD PTR [rax+0x0]
  4147b8:	mov    edi,DWORD PTR [rsp+0x2c]
  4147bc:	mov    rax,QWORD PTR [rsp+0x40]
  4147c1:	test   edi,edi
  4147c3:	je     4149f8 <_start@@Base+0xdb88>
  4147c9:	movabs rdx,0x8000000000000000
  4147d3:	mov    ecx,0x8
  4147d8:	cmp    rax,rdx
  4147db:	ja     414c90 <_start@@Base+0xde20>
  4147e1:	neg    rax
  4147e4:	mov    rdx,rax
  4147e7:	mov    QWORD PTR [rsp+0x38],rax
  4147ec:	jmp    414130 <_start@@Base+0xd2c0>
  4147f1:	nop    DWORD PTR [rax+0x0]
  4147f8:	mov    esi,DWORD PTR [rsp+0x38]
  4147fc:	mov    ecx,0x8
  414801:	test   esi,esi
  414803:	jne    414ba9 <_start@@Base+0xdd39>
  414809:	mov    rdx,QWORD PTR [rsp+0x40]
  41480e:	mov    eax,0xffffffff
  414813:	cmp    rdx,rax
  414816:	ja     414ba0 <_start@@Base+0xdd30>
  41481c:	mov    eax,edx
  41481e:	mov    DWORD PTR [rsp+0x2c],edx
  414822:	mov    r15,r10
  414825:	jmp    414228 <_start@@Base+0xd3b8>
  41482a:	nop    WORD PTR [rax+rax*1+0x0]
  414830:	cmp    BYTE PTR [r15+0x2],0x20
  414835:	jle    41429d <_start@@Base+0xd42d>
  41483b:	lea    rax,[r15+0x2]
  41483f:	cmp    rbx,rax
  414842:	jne    4142b4 <_start@@Base+0xd444>
  414848:	nop    DWORD PTR [rax+rax*1+0x0]
  414850:	mov    rdx,rbx
  414853:	mov    ecx,0xa
  414858:	mov    rsi,rbx
  41485b:	mov    rdi,rbp
  41485e:	mov    DWORD PTR [rsp+0x28],0x0
  414866:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41486b:	mov    edx,DWORD PTR [rsp+0x28]
  41486f:	jmp    413ec0 <_start@@Base+0xd050>
  414874:	nop    DWORD PTR [rax+0x0]
  414878:	mov    rsi,r12
  41487b:	mov    ecx,0x5
  414880:	mov    rdx,rbx
  414883:	mov    rdi,rbp
  414886:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41488b:	mov    r12,rax
  41488e:	jmp    412cfd <_start@@Base+0xbe8d>
  414893:	nop    DWORD PTR [rax+rax*1+0x0]
  414898:	mov    r8d,DWORD PTR [rsp+0x2c]
  41489d:	mov    rdx,QWORD PTR [rsp+0x40]
  4148a2:	test   r8d,r8d
  4148a5:	je     414b28 <_start@@Base+0xdcb8>
  4148ab:	movabs rax,0x8000000000000000
  4148b5:	mov    ecx,0x8
  4148ba:	cmp    rdx,rax
  4148bd:	ja     414cf9 <_start@@Base+0xde89>
  4148c3:	neg    rdx
  4148c6:	mov    QWORD PTR [rsp+0x38],rdx
  4148cb:	jmp    413a70 <_start@@Base+0xcc00>
  4148d0:	cmp    BYTE PTR [r15+0x2],0x20
  4148d5:	jle    41367d <_start@@Base+0xc80d>
  4148db:	lea    rax,[r15+0x2]
  4148df:	cmp    rbx,rax
  4148e2:	jne    413694 <_start@@Base+0xc824>
  4148e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4148f0:	mov    rdx,rbx
  4148f3:	mov    ecx,0xa
  4148f8:	mov    rsi,rbx
  4148fb:	mov    rdi,rbp
  4148fe:	mov    DWORD PTR [rsp+0x24],0x0
  414906:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41490b:	mov    edx,DWORD PTR [rsp+0x24]
  41490f:	jmp    413020 <_start@@Base+0xc1b0>
  414914:	nop    DWORD PTR [rax+0x0]
  414918:	mov    r15,rsi
  41491b:	jmp    4142e8 <_start@@Base+0xd478>
  414920:	cmp    BYTE PTR [r15+0x2],0x20
  414925:	jle    413dad <_start@@Base+0xcf3d>
  41492b:	lea    rax,[r15+0x2]
  41492f:	cmp    rbx,rax
  414932:	jne    413dc4 <_start@@Base+0xcf54>
  414938:	nop    DWORD PTR [rax+rax*1+0x0]
  414940:	mov    rdx,rbx
  414943:	mov    ecx,0xa
  414948:	mov    rsi,rbx
  41494b:	mov    rdi,rbp
  41494e:	mov    DWORD PTR [rsp+0x28],0x0
  414956:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41495b:	mov    edx,DWORD PTR [rsp+0x28]
  41495f:	jmp    4138e0 <_start@@Base+0xca70>
  414964:	nop    DWORD PTR [rax+0x0]
  414968:	movbe  rax,QWORD PTR [r15+0x8]
  41496e:	jmp    41445f <_start@@Base+0xd5ef>
  414973:	nop    DWORD PTR [rax+rax*1+0x0]
  414978:	lea    r15,[rax+0x1]
  41497c:	mov    rdx,rbx
  41497f:	sub    rdx,r15
  414982:	mov    DWORD PTR [rsp+0x28],0x0
  41498a:	cmp    rdx,0x1
  41498e:	jle    4149b0 <_start@@Base+0xdb40>
  414990:	cmp    BYTE PTR [rax+0x1],0x20
  414994:	jg     414020 <_start@@Base+0xd1b0>
  41499a:	jne    4149b0 <_start@@Base+0xdb40>
  41499c:	cmp    BYTE PTR [rax+0x2],0x20
  4149a0:	jg     414d90 <_start@@Base+0xdf20>
  4149a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4149b0:	mov    rdx,rbx
  4149b3:	mov    rsi,r15
  4149b6:	mov    rdi,rbp
  4149b9:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  4149be:	mov    edx,DWORD PTR [rsp+0x28]
  4149c2:	jmp    413ec0 <_start@@Base+0xd050>
  4149c7:	nop    WORD PTR [rax+rax*1+0x0]
  4149d0:	mov    r14,rbx
  4149d3:	jmp    413d05 <_start@@Base+0xce95>
  4149d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4149e0:	cmp    BYTE PTR [r15+0x2],0x20
  4149e5:	jle    413e01 <_start@@Base+0xcf91>
  4149eb:	add    r15,0x2
  4149ef:	jmp    4142e8 <_start@@Base+0xd478>
  4149f4:	nop    DWORD PTR [rax+0x0]
  4149f8:	mov    rdx,rax
  4149fb:	test   rax,rax
  4149fe:	js     414c87 <_start@@Base+0xde17>
  414a04:	mov    QWORD PTR [rsp+0x38],rax
  414a09:	jmp    414130 <_start@@Base+0xd2c0>
  414a0e:	xchg   ax,ax
  414a10:	lea    r15,[rax+0x1]
  414a14:	mov    rdx,rbx
  414a17:	sub    rdx,r15
  414a1a:	mov    DWORD PTR [rsp+0x24],0x0
  414a22:	cmp    rdx,0x1
  414a26:	jle    414a40 <_start@@Base+0xdbd0>
  414a28:	cmp    BYTE PTR [rax+0x1],0x20
  414a2c:	jg     413620 <_start@@Base+0xc7b0>
  414a32:	jne    414a40 <_start@@Base+0xdbd0>
  414a34:	cmp    BYTE PTR [rax+0x2],0x20
  414a38:	jg     414d99 <_start@@Base+0xdf29>
  414a3e:	xchg   ax,ax
  414a40:	mov    rdx,rbx
  414a43:	mov    rsi,r15
  414a46:	mov    rdi,rbp
  414a49:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  414a4e:	mov    edx,DWORD PTR [rsp+0x24]
  414a52:	jmp    413020 <_start@@Base+0xc1b0>
  414a57:	nop    WORD PTR [rax+rax*1+0x0]
  414a60:	lea    r15,[rax+0x1]
  414a64:	mov    rdx,rbx
  414a67:	sub    rdx,r15
  414a6a:	mov    DWORD PTR [rsp+0x28],0x0
  414a72:	cmp    rdx,0x1
  414a76:	jle    414a90 <_start@@Base+0xdc20>
  414a78:	cmp    BYTE PTR [rax+0x1],0x20
  414a7c:	jg     413c00 <_start@@Base+0xcd90>
  414a82:	jne    414a90 <_start@@Base+0xdc20>
  414a84:	cmp    BYTE PTR [rax+0x2],0x20
  414a88:	jg     414da2 <_start@@Base+0xdf32>
  414a8e:	xchg   ax,ax
  414a90:	mov    rdx,rbx
  414a93:	mov    rsi,r15
  414a96:	mov    rdi,rbp
  414a99:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  414a9e:	mov    edx,DWORD PTR [rsp+0x28]
  414aa2:	jmp    4138e0 <_start@@Base+0xca70>
  414aa7:	nop    WORD PTR [rax+rax*1+0x0]
  414ab0:	mov    r11d,DWORD PTR [rbp+0x20]
  414ab4:	test   r11d,r11d
  414ab7:	jne    413570 <_start@@Base+0xc700>
  414abd:	mov    rdi,QWORD PTR [rbp+0x0]
  414ac1:	call   418ee0 <flatcc_builder_end_table@@Base>
  414ac6:	mov    r12d,eax
  414ac9:	test   eax,eax
  414acb:	je     413570 <_start@@Base+0xc700>
  414ad1:	mov    rdi,QWORD PTR [rbp+0x0]
  414ad5:	xor    esi,esi
  414ad7:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  414adc:	test   rax,rax
  414adf:	jne    413c36 <_start@@Base+0xcdc6>
  414ae5:	jmp    41358a <_start@@Base+0xc71a>
  414aea:	nop    WORD PTR [rax+rax*1+0x0]
  414af0:	mov    r10d,DWORD PTR [rsp+0x38]
  414af5:	mov    ecx,0x8
  414afa:	test   r10d,r10d
  414afd:	jne    414cc1 <_start@@Base+0xde51>
  414b03:	mov    rdx,QWORD PTR [rsp+0x40]
  414b08:	mov    eax,0xffffffff
  414b0d:	cmp    rdx,rax
  414b10:	ja     414cb8 <_start@@Base+0xde48>
  414b16:	mov    eax,edx
  414b18:	mov    DWORD PTR [rsp+0x2c],edx
  414b1c:	mov    r15,r14
  414b1f:	jmp    413d38 <_start@@Base+0xcec8>
  414b24:	nop    DWORD PTR [rax+0x0]
  414b28:	test   rdx,rdx
  414b2b:	js     414cf0 <_start@@Base+0xde80>
  414b31:	mov    QWORD PTR [rsp+0x38],rdx
  414b36:	jmp    413a70 <_start@@Base+0xcc00>
  414b3b:	nop    DWORD PTR [rax+rax*1+0x0]
  414b40:	movbe  rax,QWORD PTR [r15+0x8]
  414b46:	jmp    4146c7 <_start@@Base+0xd857>
  414b4b:	nop    DWORD PTR [rax+rax*1+0x0]
  414b50:	cmp    BYTE PTR [r15+0x2],0x20
  414b55:	jle    414365 <_start@@Base+0xd4f5>
  414b5b:	lea    r12,[r15+0x2]
  414b5f:	jmp    414376 <_start@@Base+0xd506>
  414b64:	nop    DWORD PTR [rax+0x0]
  414b68:	lea    rcx,[rip+0x25871]        # 43a3e0 <__data_start@@Base+0x320>
  414b6f:	mov    rdx,rbx
  414b72:	mov    rsi,rax
  414b75:	mov    rdi,rbp
  414b78:	call   40bcb0 <_start@@Base+0x4e40>
  414b7d:	cmp    r15,rax
  414b80:	mov    r15,rax
  414b83:	je     413570 <_start@@Base+0xc700>
  414b89:	cmp    rbx,rax
  414b8c:	jne    41374f <_start@@Base+0xc8df>
  414b92:	jmp    413570 <_start@@Base+0xc700>
  414b97:	nop    WORD PTR [rax+rax*1+0x0]
  414ba0:	mov    QWORD PTR [rsp],r9
  414ba4:	mov    ecx,0x7
  414ba9:	mov    rdx,rbx
  414bac:	mov    rsi,r10
  414baf:	mov    rdi,rbp
  414bb2:	call   41d640 <flatcc_json_parser_set_error@@Base>
  414bb7:	mov    r9,QWORD PTR [rsp]
  414bbb:	mov    r15,rax
  414bbe:	cmp    r9,rax
  414bc1:	jne    414224 <_start@@Base+0xd3b4>
  414bc7:	mov    r10,r9
  414bca:	jmp    4141ed <_start@@Base+0xd37d>
  414bcf:	nop
  414bd0:	mov    r8,r14
  414bd3:	lea    rcx,[rip+0x25846]        # 43a420 <__data_start@@Base+0x360>
  414bda:	mov    rdx,rbx
  414bdd:	mov    rsi,rax
  414be0:	mov    rdi,rbp
  414be3:	call   40b3f0 <_start@@Base+0x4580>
  414be8:	cmp    r15,rax
  414beb:	mov    r15,rax
  414bee:	je     413570 <_start@@Base+0xc700>
  414bf4:	cmp    rbx,rax
  414bf7:	jne    4132e2 <_start@@Base+0xc472>
  414bfd:	jmp    413570 <_start@@Base+0xc700>
  414c02:	nop    WORD PTR [rax+rax*1+0x0]
  414c08:	lea    rsi,[r12+0x1]
  414c0d:	mov    rdx,rbx
  414c10:	mov    rdi,rbp
  414c13:	mov    DWORD PTR [rsp+0x1c],0x0
  414c1b:	call   407f70 <_start@@Base+0x1100>
  414c20:	mov    r12,rax
  414c23:	mov    eax,DWORD PTR [rsp+0x1c]
  414c27:	jmp    412cd0 <_start@@Base+0xbe60>
  414c2c:	nop    DWORD PTR [rax+0x0]
  414c30:	lea    rcx,[rip+0x25769]        # 43a3a0 <__data_start@@Base+0x2e0>
  414c37:	mov    rdx,rbx
  414c3a:	mov    rsi,rax
  414c3d:	mov    rdi,rbp
  414c40:	call   40bcb0 <_start@@Base+0x4e40>
  414c45:	cmp    r15,rax
  414c48:	mov    r15,rax
  414c4b:	je     413570 <_start@@Base+0xc700>
  414c51:	cmp    rbx,rax
  414c54:	jne    4137ff <_start@@Base+0xc98f>
  414c5a:	jmp    413570 <_start@@Base+0xc700>
  414c5f:	nop
  414c60:	mov    ecx,0xa
  414c65:	mov    rdx,rbx
  414c68:	mov    rsi,rbx
  414c6b:	mov    rdi,rbp
  414c6e:	mov    DWORD PTR [rsp+0x1c],0x0
  414c76:	call   41d640 <flatcc_json_parser_set_error@@Base>
  414c7b:	mov    r12,rax
  414c7e:	mov    eax,DWORD PTR [rsp+0x1c]
  414c82:	jmp    412cd0 <_start@@Base+0xbe60>
  414c87:	mov    QWORD PTR [rsp],r9
  414c8b:	mov    ecx,0x7
  414c90:	mov    rsi,r15
  414c93:	mov    rdx,rbx
  414c96:	mov    rdi,rbp
  414c99:	call   41d640 <flatcc_json_parser_set_error@@Base>
  414c9e:	mov    r9,QWORD PTR [rsp]
  414ca2:	mov    r15,rax
  414ca5:	cmp    r9,rax
  414ca8:	je     4140f3 <_start@@Base+0xd283>
  414cae:	mov    rdx,QWORD PTR [rsp+0x38]
  414cb3:	jmp    414130 <_start@@Base+0xd2c0>
  414cb8:	mov    QWORD PTR [rsp],r9
  414cbc:	mov    ecx,0x7
  414cc1:	mov    rdx,rbx
  414cc4:	mov    rsi,r14
  414cc7:	mov    rdi,rbp
  414cca:	call   41d640 <flatcc_json_parser_set_error@@Base>
  414ccf:	mov    r9,QWORD PTR [rsp]
  414cd3:	mov    r15,rax
  414cd6:	cmp    r9,rax
  414cd9:	jne    413d34 <_start@@Base+0xcec4>
  414cdf:	mov    r14,r9
  414ce2:	jmp    413d05 <_start@@Base+0xce95>
  414ce7:	nop    WORD PTR [rax+rax*1+0x0]
  414cf0:	mov    QWORD PTR [rsp],r9
  414cf4:	mov    ecx,0x7
  414cf9:	mov    rsi,r15
  414cfc:	mov    rdx,rbx
  414cff:	mov    rdi,rbp
  414d02:	call   41d640 <flatcc_json_parser_set_error@@Base>
  414d07:	mov    r9,QWORD PTR [rsp]
  414d0b:	mov    r15,rax
  414d0e:	cmp    r9,rax
  414d11:	je     413a34 <_start@@Base+0xcbc4>
  414d17:	mov    rdx,QWORD PTR [rsp+0x38]
  414d1c:	jmp    413a70 <_start@@Base+0xcc00>
  414d21:	mov    r8,r14
  414d24:	lea    rcx,[rip+0x25695]        # 43a3c0 <__data_start@@Base+0x300>
  414d2b:	mov    rdx,rbx
  414d2e:	mov    rsi,rax
  414d31:	mov    rdi,rbp
  414d34:	call   40b3f0 <_start@@Base+0x4580>
  414d39:	cmp    r15,rax
  414d3c:	mov    r15,rax
  414d3f:	je     413570 <_start@@Base+0xc700>
  414d45:	cmp    rbx,rax
  414d48:	jne    4144d7 <_start@@Base+0xd667>
  414d4e:	jmp    413570 <_start@@Base+0xc700>
  414d53:	nop    DWORD PTR [rax+rax*1+0x0]
  414d58:	mov    r8,r14
  414d5b:	lea    rcx,[rip+0x2561e]        # 43a380 <__data_start@@Base+0x2c0>
  414d62:	mov    rdx,rbx
  414d65:	mov    rsi,rax
  414d68:	mov    rdi,rbp
  414d6b:	call   40b3f0 <_start@@Base+0x4580>
  414d70:	cmp    r15,rax
  414d73:	mov    r15,rax
  414d76:	je     413570 <_start@@Base+0xc700>
  414d7c:	cmp    rbx,rax
  414d7f:	jne    41473f <_start@@Base+0xd8cf>
  414d85:	jmp    413570 <_start@@Base+0xc700>
  414d8a:	nop    WORD PTR [rax+rax*1+0x0]
  414d90:	lea    r15,[rax+0x2]
  414d94:	jmp    414020 <_start@@Base+0xd1b0>
  414d99:	lea    r15,[rax+0x2]
  414d9d:	jmp    413620 <_start@@Base+0xc7b0>
  414da2:	lea    r15,[rax+0x2]
  414da6:	jmp    413c00 <_start@@Base+0xcd90>
  414dab:	mov    r15,rax
  414dae:	jmp    413570 <_start@@Base+0xc700>
  414db3:	mov    r15,rax
  414db6:	jmp    414020 <_start@@Base+0xd1b0>
  414dbb:	mov    r15,rax
  414dbe:	jmp    413c00 <_start@@Base+0xcd90>
  414dc3:	mov    rdx,rax
  414dc6:	mov    ecx,0x61616161
  414dcb:	and    rdx,r13
  414dce:	shl    rcx,0x20
  414dd2:	cmp    rdx,rcx
  414dd5:	je     413416 <_start@@Base+0xc5a6>
  414ddb:	endbr64 
  414ddf:	movabs rcx,0x6262626231323334
  414de9:	cmp    rax,rcx
  414dec:	jne    414540 <_start@@Base+0xd6d0>
  414df2:	cmp    rsi,0x8
  414df6:	jle    4134e0 <_start@@Base+0xc670>
  414dfc:	mov    ecx,0x8
  414e01:	mov    rdx,rbx
  414e04:	mov    rsi,r15
  414e07:	mov    rdi,rbp
  414e0a:	call   40a880 <_start@@Base+0x3a10>
  414e0f:	mov    r14,rax
  414e12:	cmp    rax,r15
  414e15:	je     4134e0 <_start@@Base+0xc670>
  414e1b:	lea    r8,[rsp+0x40]
  414e20:	mov    rcx,r8
  414e23:	mov    rdx,rbx
  414e26:	mov    rsi,rax
  414e29:	mov    rdi,rbp
  414e2c:	mov    QWORD PTR [rsp],r8
  414e30:	mov    QWORD PTR [rsp+0x40],0x0
  414e39:	call   4094a0 <_start@@Base+0x2630>
  414e3e:	cmp    r14,rax
  414e41:	mov    r15,rax
  414e44:	mov    r8,QWORD PTR [rsp]
  414e48:	je     414e88 <_start@@Base+0xe018>
  414e4a:	cmp    QWORD PTR [rsp+0x40],0x0
  414e50:	jne    414e5c <_start@@Base+0xdfec>
  414e52:	test   BYTE PTR [rbp+0x10],0x2
  414e56:	je     413320 <_start@@Base+0xc4b0>
  414e5c:	mov    rdi,QWORD PTR [rbp+0x0]
  414e60:	mov    ecx,0x8
  414e65:	mov    edx,0x8
  414e6a:	mov    esi,0x3
  414e6f:	call   419de0 <flatcc_builder_table_add@@Base>
  414e74:	test   rax,rax
  414e77:	jne    413782 <_start@@Base+0xc912>
  414e7d:	jmp    413570 <_start@@Base+0xc700>
  414e82:	nop    WORD PTR [rax+rax*1+0x0]
  414e88:	lea    rcx,[rip+0x25571]        # 43a400 <__data_start@@Base+0x340>
  414e8f:	mov    rdx,rbx
  414e92:	mov    rsi,rax
  414e95:	mov    rdi,rbp
  414e98:	call   40bcb0 <_start@@Base+0x4e40>
  414e9d:	cmp    r15,rax
  414ea0:	mov    r15,rax
  414ea3:	je     413570 <_start@@Base+0xc700>
  414ea9:	cmp    rbx,rax
  414eac:	jne    414e4a <_start@@Base+0xdfda>
  414eae:	jmp    413570 <_start@@Base+0xc700>
  414eb3:	call   4061a0 <__stack_chk_fail@plt>
  414eb8:	nop    DWORD PTR [rax+rax*1+0x0]
  414ec0:	endbr64 
  414ec4:	push   r15
  414ec6:	push   r14
  414ec8:	mov    r14,rsi
  414ecb:	push   r13
  414ecd:	push   r12
  414ecf:	push   rbp
  414ed0:	mov    rbp,rdx
  414ed3:	push   rbx
  414ed4:	mov    rbx,rdi
  414ed7:	sub    rsp,0x38
  414edb:	mov    rdi,QWORD PTR fs:0x28
  414ee4:	mov    QWORD PTR [rsp+0x28],rdi
  414ee9:	xor    edi,edi
  414eeb:	mov    DWORD PTR [r8],0x0
  414ef2:	cmp    cl,0x4
  414ef5:	ja     415560 <_start@@Base+0xe6f0>
  414efb:	lea    rdx,[rip+0x17206]        # 42c108 <_IO_stdin_used@@Base+0x108>
  414f02:	movzx  eax,cl
  414f05:	movsxd rax,DWORD PTR [rdx+rax*4]
  414f09:	mov    r12,r8
  414f0c:	add    rax,rdx
  414f0f:	notrack jmp rax
  414f12:	nop    WORD PTR [rax+rax*1+0x0]
  414f18:	mov    rcx,r8
  414f1b:	mov    rdx,rbp
  414f1e:	mov    rdi,rbx
  414f21:	call   40e390 <_start@@Base+0x7520>
  414f26:	mov    ecx,DWORD PTR [rbx+0x20]
  414f29:	test   ecx,ecx
  414f2b:	jne    414f39 <_start@@Base+0xe0c9>
  414f2d:	mov    edx,DWORD PTR [r12]
  414f31:	test   edx,edx
  414f33:	je     415620 <_start@@Base+0xe7b0>
  414f39:	mov    rbx,QWORD PTR [rsp+0x28]
  414f3e:	xor    rbx,QWORD PTR fs:0x28
  414f47:	jne    4157f3 <_start@@Base+0xe983>
  414f4d:	add    rsp,0x38
  414f51:	pop    rbx
  414f52:	pop    rbp
  414f53:	pop    r12
  414f55:	pop    r13
  414f57:	pop    r14
  414f59:	pop    r15
  414f5b:	ret    
  414f5c:	nop    DWORD PTR [rax+0x0]
  414f60:	mov    rcx,r8
  414f63:	mov    rdx,rbp
  414f66:	mov    rdi,rbx
  414f69:	call   412c10 <_start@@Base+0xbda0>
  414f6e:	jmp    414f26 <_start@@Base+0xe0b6>
  414f70:	mov    rax,rbp
  414f73:	sub    rax,rsi
  414f76:	cmp    rax,0x3
  414f7a:	jle    414f88 <_start@@Base+0xe118>
  414f7c:	cmp    DWORD PTR [rsi],0x6c6c756e
  414f82:	lea    rax,[rsi+0x4]
  414f86:	je     414f39 <_start@@Base+0xe0c9>
  414f88:	mov    ecx,0x1a
  414f8d:	mov    rdx,rbp
  414f90:	mov    rsi,r14
  414f93:	mov    rdi,rbx
  414f96:	call   41d640 <flatcc_json_parser_set_error@@Base>
  414f9b:	jmp    414f39 <_start@@Base+0xe0c9>
  414f9d:	nop    DWORD PTR [rax]
  414fa0:	mov    rcx,r8
  414fa3:	mov    rdx,rbp
  414fa6:	mov    rdi,rbx
  414fa9:	call   40e620 <_start@@Base+0x77b0>
  414fae:	jmp    414f26 <_start@@Base+0xe0b6>
  414fb3:	nop    DWORD PTR [rax+rax*1+0x0]
  414fb8:	mov    rdi,QWORD PTR [rbx]
  414fbb:	mov    esi,0x4
  414fc0:	call   418560 <flatcc_builder_start_table@@Base>
  414fc5:	test   eax,eax
  414fc7:	jne    415240 <_start@@Base+0xe3d0>
  414fcd:	lea    r13,[rsp+0x18]
  414fd2:	mov    rcx,r13
  414fd5:	mov    rsi,r14
  414fd8:	mov    rdx,rbp
  414fdb:	mov    rdi,rbx
  414fde:	call   40a7e0 <_start@@Base+0x3970>
  414fe3:	mov    ecx,DWORD PTR [rsp+0x18]
  414fe7:	mov    r14,rax
  414fea:	test   ecx,ecx
  414fec:	je     415750 <_start@@Base+0xe8e0>
  414ff2:	movabs r15,0x636f6c6f72320000
  414ffc:	jmp    41511f <_start@@Base+0xe2af>
  415001:	nop    DWORD PTR [rax+0x0]
  415008:	mov    rdx,rax
  41500b:	and    rdx,0xffffffffff000000
  415012:	movabs rdi,0x636f6c6f72000000
  41501c:	cmp    rdx,rdi
  41501f:	jne    415340 <_start@@Base+0xe4d0>
  415025:	cmp    rsi,0x5
  415029:	jle    415310 <_start@@Base+0xe4a0>
  41502f:	mov    ecx,0x5
  415034:	mov    rdx,rbp
  415037:	mov    rsi,r14
  41503a:	mov    rdi,rbx
  41503d:	call   40a880 <_start@@Base+0x3a10>
  415042:	cmp    rax,r14
  415045:	je     415310 <_start@@Base+0xe4a0>
  41504b:	mov    BYTE PTR [rsp+0x17],0x0
  415050:	mov    QWORD PTR [rsp+0x20],0x0
  415059:	mov    DWORD PTR [rsp+0x1c],0x0
  415061:	cmp    rbp,rax
  415064:	je     415550 <_start@@Base+0xe6e0>
  41506a:	lea    rcx,[rsp+0x1c]
  41506f:	lea    r8,[rsp+0x20]
  415074:	mov    rdx,rbp
  415077:	mov    rsi,rax
  41507a:	mov    rdi,rbx
  41507d:	mov    QWORD PTR [rsp+0x8],rax
  415082:	call   41f220 <flatcc_json_parser_integer@@Base>
  415087:	mov    r10,QWORD PTR [rsp+0x8]
  41508c:	mov    r14,rax
  41508f:	cmp    r10,rax
  415092:	jne    4155d0 <_start@@Base+0xe760>
  415098:	lea    r8,[rsp+0x17]
  41509d:	lea    rcx,[rip+0x2543c]        # 43a4e0 <__data_start@@Base+0x420>
  4150a4:	mov    rdx,rbp
  4150a7:	mov    rsi,r14
  4150aa:	mov    rdi,rbx
  4150ad:	call   40b850 <_start@@Base+0x49e0>
  4150b2:	cmp    rax,r14
  4150b5:	je     4157eb <_start@@Base+0xe97b>
  4150bb:	cmp    rbp,rax
  4150be:	je     4157eb <_start@@Base+0xe97b>
  4150c4:	movzx  edx,BYTE PTR [rsp+0x17]
  4150c9:	mov    r14,rax
  4150cc:	nop    DWORD PTR [rax+0x0]
  4150d0:	cmp    dl,0x2
  4150d3:	jne    4150db <_start@@Base+0xe26b>
  4150d5:	test   BYTE PTR [rbx+0x10],0x2
  4150d9:	je     4150ff <_start@@Base+0xe28f>
  4150db:	mov    rdi,QWORD PTR [rbx]
  4150de:	xor    esi,esi
  4150e0:	mov    ecx,0x1
  4150e5:	mov    edx,0x1
  4150ea:	call   419de0 <flatcc_builder_table_add@@Base>
  4150ef:	test   rax,rax
  4150f2:	je     415240 <_start@@Base+0xe3d0>
  4150f8:	movzx  edx,BYTE PTR [rsp+0x17]
  4150fd:	mov    BYTE PTR [rax],dl
  4150ff:	mov    rsi,r14
  415102:	mov    rdi,rbx
  415105:	mov    rcx,r13
  415108:	mov    rdx,rbp
  41510b:	call   40c910 <_start@@Base+0x5aa0>
  415110:	mov    edi,DWORD PTR [rsp+0x18]
  415114:	mov    r14,rax
  415117:	test   edi,edi
  415119:	je     415750 <_start@@Base+0xe8e0>
  41511f:	cmp    rbp,r14
  415122:	je     41513f <_start@@Base+0xe2cf>
  415124:	movzx  eax,BYTE PTR [r14]
  415128:	cmp    al,0x22
  41512a:	je     415330 <_start@@Base+0xe4c0>
  415130:	cmp    al,0x2e
  415132:	je     415580 <_start@@Base+0xe710>
  415138:	mov    DWORD PTR [rbx+0x14],0x1
  41513f:	mov    rsi,rbp
  415142:	sub    rsi,r14
  415145:	cmp    rsi,0x7
  415149:	jbe    415260 <_start@@Base+0xe3f0>
  41514f:	movbe  rax,QWORD PTR [r14]
  415154:	mov    rdx,rax
  415157:	xor    dx,dx
  41515a:	cmp    rdx,r15
  41515d:	jne    415008 <_start@@Base+0xe198>
  415163:	cmp    rsi,0x6
  415167:	jle    415310 <_start@@Base+0xe4a0>
  41516d:	mov    ecx,0x6
  415172:	mov    rdx,rbp
  415175:	mov    rsi,r14
  415178:	mov    rdi,rbx
  41517b:	call   40a880 <_start@@Base+0x3a10>
  415180:	cmp    rax,r14
  415183:	je     415310 <_start@@Base+0xe4a0>
  415189:	mov    BYTE PTR [rsp+0x17],0x0
  41518e:	mov    QWORD PTR [rsp+0x20],0x0
  415197:	mov    DWORD PTR [rsp+0x1c],0x0
  41519f:	cmp    rbp,rax
  4151a2:	je     415548 <_start@@Base+0xe6d8>
  4151a8:	lea    rcx,[rsp+0x1c]
  4151ad:	lea    r8,[rsp+0x20]
  4151b2:	mov    rdx,rbp
  4151b5:	mov    rsi,rax
  4151b8:	mov    rdi,rbx
  4151bb:	mov    QWORD PTR [rsp+0x8],rax
  4151c0:	call   41f220 <flatcc_json_parser_integer@@Base>
  4151c5:	mov    r10,QWORD PTR [rsp+0x8]
  4151ca:	mov    r14,rax
  4151cd:	cmp    r10,rax
  4151d0:	jne    4155a0 <_start@@Base+0xe730>
  4151d6:	lea    r8,[rsp+0x17]
  4151db:	lea    rcx,[rip+0x2531e]        # 43a500 <__data_start@@Base+0x440>
  4151e2:	mov    rdx,rbp
  4151e5:	mov    rsi,r14
  4151e8:	mov    rdi,rbx
  4151eb:	call   40b850 <_start@@Base+0x49e0>
  4151f0:	cmp    rax,r14
  4151f3:	je     4157eb <_start@@Base+0xe97b>
  4151f9:	cmp    rbp,rax
  4151fc:	je     4157eb <_start@@Base+0xe97b>
  415202:	movzx  edx,BYTE PTR [rsp+0x17]
  415207:	mov    r14,rax
  41520a:	nop    WORD PTR [rax+rax*1+0x0]
  415210:	cmp    dl,0x2
  415213:	jne    41521f <_start@@Base+0xe3af>
  415215:	test   BYTE PTR [rbx+0x10],0x2
  415219:	je     4150ff <_start@@Base+0xe28f>
  41521f:	mov    rdi,QWORD PTR [rbx]
  415222:	mov    ecx,0x1
  415227:	mov    edx,0x1
  41522c:	mov    esi,0x1
  415231:	call   419de0 <flatcc_builder_table_add@@Base>
  415236:	test   rax,rax
  415239:	jne    4150f8 <_start@@Base+0xe288>
  41523f:	nop
  415240:	mov    ecx,0x21
  415245:	mov    rdx,rbp
  415248:	mov    rsi,r14
  41524b:	mov    rdi,rbx
  41524e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  415253:	jmp    414f26 <_start@@Base+0xe0b6>
  415258:	nop    DWORD PTR [rax+rax*1+0x0]
  415260:	lea    rdx,[rip+0x16eb5]        # 42c11c <_IO_stdin_used@@Base+0x11c>
  415267:	movsxd rax,DWORD PTR [rdx+rsi*4]
  41526b:	add    rax,rdx
  41526e:	notrack jmp rax
  415271:	nop    DWORD PTR [rax+0x0]
  415278:	movsx  rcx,BYTE PTR [r14+0x6]
  41527d:	shl    rcx,0x8
  415281:	movsx  rdx,BYTE PTR [r14+0x5]
  415286:	mov    rax,rdx
  415289:	shl    rax,0x10
  41528d:	or     rcx,rax
  415290:	movsx  rdx,BYTE PTR [r14+0x4]
  415295:	mov    rax,rdx
  415298:	shl    rax,0x18
  41529c:	or     rax,rcx
  41529f:	movsx  rdx,BYTE PTR [r14+0x3]
  4152a4:	mov    rcx,rdx
  4152a7:	shl    rcx,0x20
  4152ab:	or     rax,rcx
  4152ae:	movsx  rdx,BYTE PTR [r14+0x2]
  4152b3:	mov    rcx,rdx
  4152b6:	shl    rcx,0x28
  4152ba:	or     rcx,rax
  4152bd:	movsx  rdx,BYTE PTR [r14+0x1]
  4152c2:	mov    rax,rdx
  4152c5:	shl    rax,0x30
  4152c9:	or     rcx,rax
  4152cc:	movsx  rdx,BYTE PTR [r14]
  4152d0:	mov    rax,rdx
  4152d3:	shl    rax,0x38
  4152d7:	or     rax,rcx
  4152da:	jmp    415154 <_start@@Base+0xe2e4>
  4152df:	nop
  4152e0:	xor    ecx,ecx
  4152e2:	jmp    415281 <_start@@Base+0xe411>
  4152e4:	nop    DWORD PTR [rax+0x0]
  4152e8:	xor    ecx,ecx
  4152ea:	jmp    415290 <_start@@Base+0xe420>
  4152ec:	nop    DWORD PTR [rax+0x0]
  4152f0:	xor    eax,eax
  4152f2:	jmp    41529f <_start@@Base+0xe42f>
  4152f4:	nop    DWORD PTR [rax+0x0]
  4152f8:	xor    eax,eax
  4152fa:	jmp    4152ae <_start@@Base+0xe43e>
  4152fc:	nop    DWORD PTR [rax+0x0]
  415300:	xor    ecx,ecx
  415302:	jmp    4152bd <_start@@Base+0xe44d>
  415304:	nop    DWORD PTR [rax+0x0]
  415308:	xor    ecx,ecx
  41530a:	jmp    4152cc <_start@@Base+0xe45c>
  41530c:	nop    DWORD PTR [rax+0x0]
  415310:	mov    rsi,r14
  415313:	mov    rdx,rbp
  415316:	mov    rdi,rbx
  415319:	call   41f020 <flatcc_json_parser_unmatched_symbol@@Base>
  41531e:	mov    r14,rax
  415321:	jmp    4150ff <_start@@Base+0xe28f>
  415326:	nop    WORD PTR cs:[rax+rax*1+0x0]
  415330:	inc    r14
  415333:	mov    DWORD PTR [rbx+0x14],0x0
  41533a:	jmp    41513f <_start@@Base+0xe2cf>
  41533f:	nop
  415340:	endbr64 
  415344:	movabs rdx,0xffffff0000000000
  41534e:	and    rdx,rax
  415351:	movabs rdi,0x7563320000000000
  41535b:	cmp    rdx,rdi
  41535e:	jne    415440 <_start@@Base+0xe5d0>
  415364:	cmp    rsi,0x3
  415368:	jle    415310 <_start@@Base+0xe4a0>
  41536a:	mov    ecx,0x3
  41536f:	mov    rdx,rbp
  415372:	mov    rsi,r14
  415375:	mov    rdi,rbx
  415378:	call   40a880 <_start@@Base+0x3a10>
  41537d:	cmp    rax,r14
  415380:	je     415310 <_start@@Base+0xe4a0>
  415382:	mov    BYTE PTR [rsp+0x17],0x0
  415387:	mov    QWORD PTR [rsp+0x20],0x0
  415390:	mov    DWORD PTR [rsp+0x1c],0x0
  415398:	cmp    rbp,rax
  41539b:	je     415608 <_start@@Base+0xe798>
  4153a1:	lea    rcx,[rsp+0x1c]
  4153a6:	lea    r8,[rsp+0x20]
  4153ab:	mov    rdx,rbp
  4153ae:	mov    rsi,rax
  4153b1:	mov    rdi,rbx
  4153b4:	mov    QWORD PTR [rsp+0x8],rax
  4153b9:	call   41f220 <flatcc_json_parser_integer@@Base>
  4153be:	mov    r10,QWORD PTR [rsp+0x8]
  4153c3:	mov    r11,rax
  4153c6:	cmp    r10,rax
  4153c9:	jne    415650 <_start@@Base+0xe7e0>
  4153cf:	mov    rsi,r11
  4153d2:	lea    r8,[rsp+0x17]
  4153d7:	lea    rcx,[rip+0x250e2]        # 43a4c0 <__data_start@@Base+0x400>
  4153de:	mov    rdx,rbp
  4153e1:	mov    rdi,rbx
  4153e4:	mov    QWORD PTR [rsp+0x8],r11
  4153e9:	call   40bef0 <_start@@Base+0x5080>
  4153ee:	mov    r11,QWORD PTR [rsp+0x8]
  4153f3:	mov    r14,rax
  4153f6:	cmp    rax,r11
  4153f9:	je     415240 <_start@@Base+0xe3d0>
  4153ff:	cmp    rbp,rax
  415402:	je     415240 <_start@@Base+0xe3d0>
  415408:	movzx  eax,BYTE PTR [rsp+0x17]
  41540d:	cmp    al,0x2
  41540f:	jne    41541b <_start@@Base+0xe5ab>
  415411:	test   BYTE PTR [rbx+0x10],0x2
  415415:	je     4150ff <_start@@Base+0xe28f>
  41541b:	mov    rdi,QWORD PTR [rbx]
  41541e:	mov    ecx,0x1
  415423:	mov    edx,0x1
  415428:	mov    esi,0x3
  41542d:	call   419de0 <flatcc_builder_table_add@@Base>
  415432:	test   rax,rax
  415435:	jne    4150f8 <_start@@Base+0xe288>
  41543b:	jmp    415240 <_start@@Base+0xe3d0>
  415440:	movabs rdx,0xffff000000000000
  41544a:	and    rax,rdx
  41544d:	movabs rdx,0x7563000000000000
  415457:	cmp    rax,rdx
  41545a:	jne    415310 <_start@@Base+0xe4a0>
  415460:	cmp    rsi,0x2
  415464:	jle    415310 <_start@@Base+0xe4a0>
  41546a:	mov    ecx,0x2
  41546f:	mov    rdx,rbp
  415472:	mov    rsi,r14
  415475:	mov    rdi,rbx
  415478:	call   40a880 <_start@@Base+0x3a10>
  41547d:	cmp    rax,r14
  415480:	je     415310 <_start@@Base+0xe4a0>
  415486:	mov    BYTE PTR [rsp+0x17],0x0
  41548b:	mov    QWORD PTR [rsp+0x20],0x0
  415494:	mov    DWORD PTR [rsp+0x1c],0x0
  41549c:	cmp    rbp,rax
  41549f:	je     415610 <_start@@Base+0xe7a0>
  4154a5:	lea    rcx,[rsp+0x1c]
  4154aa:	lea    r8,[rsp+0x20]
  4154af:	mov    rdx,rbp
  4154b2:	mov    rsi,rax
  4154b5:	mov    rdi,rbx
  4154b8:	mov    QWORD PTR [rsp+0x8],rax
  4154bd:	call   41f220 <flatcc_json_parser_integer@@Base>
  4154c2:	mov    r10,QWORD PTR [rsp+0x8]
  4154c7:	mov    r11,rax
  4154ca:	cmp    r10,rax
  4154cd:	jne    415680 <_start@@Base+0xe810>
  4154d3:	mov    rsi,r11
  4154d6:	lea    r8,[rsp+0x17]
  4154db:	lea    rcx,[rip+0x24fbe]        # 43a4a0 <__data_start@@Base+0x3e0>
  4154e2:	mov    rdx,rbp
  4154e5:	mov    rdi,rbx
  4154e8:	mov    QWORD PTR [rsp+0x8],r11
  4154ed:	call   40bef0 <_start@@Base+0x5080>
  4154f2:	mov    r11,QWORD PTR [rsp+0x8]
  4154f7:	mov    r14,rax
  4154fa:	cmp    rax,r11
  4154fd:	je     415240 <_start@@Base+0xe3d0>
  415503:	cmp    rbp,rax
  415506:	je     415240 <_start@@Base+0xe3d0>
  41550c:	movzx  eax,BYTE PTR [rsp+0x17]
  415511:	cmp    al,0x2
  415513:	jne    41551f <_start@@Base+0xe6af>
  415515:	test   BYTE PTR [rbx+0x10],0x2
  415519:	je     4150ff <_start@@Base+0xe28f>
  41551f:	mov    rdi,QWORD PTR [rbx]
  415522:	mov    ecx,0x1
  415527:	mov    edx,0x1
  41552c:	mov    esi,0x2
  415531:	call   419de0 <flatcc_builder_table_add@@Base>
  415536:	test   rax,rax
  415539:	jne    4150f8 <_start@@Base+0xe288>
  41553f:	jmp    415240 <_start@@Base+0xe3d0>
  415544:	nop    DWORD PTR [rax+0x0]
  415548:	mov    r14,rbp
  41554b:	jmp    4151d6 <_start@@Base+0xe366>
  415550:	mov    r14,rbp
  415553:	jmp    415098 <_start@@Base+0xe228>
  415558:	nop    DWORD PTR [rax+rax*1+0x0]
  415560:	test   BYTE PTR [rbx+0x10],0x1
  415564:	jne    415640 <_start@@Base+0xe7d0>
  41556a:	mov    ecx,0xf
  41556f:	mov    rdi,rbx
  415572:	call   41d640 <flatcc_json_parser_set_error@@Base>
  415577:	jmp    414f39 <_start@@Base+0xe0c9>
  41557c:	nop    DWORD PTR [rax+0x0]
  415580:	mov    rsi,r14
  415583:	mov    ecx,0x5
  415588:	mov    rdx,rbp
  41558b:	mov    rdi,rbx
  41558e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  415593:	mov    r14,rax
  415596:	jmp    41513f <_start@@Base+0xe2cf>
  41559b:	nop    DWORD PTR [rax+rax*1+0x0]
  4155a0:	mov    edx,DWORD PTR [rsp+0x1c]
  4155a4:	mov    rax,QWORD PTR [rsp+0x20]
  4155a9:	test   edx,edx
  4155ab:	je     4156b0 <_start@@Base+0xe840>
  4155b1:	mov    ecx,0x8
  4155b6:	cmp    rax,0x80
  4155bc:	ja     41578a <_start@@Base+0xe91a>
  4155c2:	mov    edx,eax
  4155c4:	neg    edx
  4155c6:	mov    BYTE PTR [rsp+0x17],dl
  4155ca:	jmp    415210 <_start@@Base+0xe3a0>
  4155cf:	nop
  4155d0:	mov    r11d,DWORD PTR [rsp+0x1c]
  4155d5:	mov    rax,QWORD PTR [rsp+0x20]
  4155da:	test   r11d,r11d
  4155dd:	je     4156c8 <_start@@Base+0xe858>
  4155e3:	mov    ecx,0x8
  4155e8:	cmp    rax,0x80
  4155ee:	ja     4157c2 <_start@@Base+0xe952>
  4155f4:	mov    edx,eax
  4155f6:	neg    edx
  4155f8:	mov    BYTE PTR [rsp+0x17],dl
  4155fc:	jmp    4150d0 <_start@@Base+0xe260>
  415601:	nop    DWORD PTR [rax+0x0]
  415608:	mov    r11,rbp
  41560b:	jmp    4153cf <_start@@Base+0xe55f>
  415610:	mov    r11,rbp
  415613:	jmp    4154d3 <_start@@Base+0xe663>
  415618:	nop    DWORD PTR [rax+rax*1+0x0]
  415620:	mov    ecx,0x21
  415625:	mov    rdx,rbp
  415628:	mov    rsi,rax
  41562b:	mov    rdi,rbx
  41562e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  415633:	jmp    414f39 <_start@@Base+0xe0c9>
  415638:	nop    DWORD PTR [rax+rax*1+0x0]
  415640:	mov    rdi,rbx
  415643:	call   41e590 <flatcc_json_parser_generic_json@@Base>
  415648:	jmp    414f39 <_start@@Base+0xe0c9>
  41564d:	nop    DWORD PTR [rax]
  415650:	mov    r9d,DWORD PTR [rsp+0x1c]
  415655:	mov    ecx,0x8
  41565a:	test   r9d,r9d
  41565d:	jne    4156ea <_start@@Base+0xe87a>
  415663:	mov    rdx,QWORD PTR [rsp+0x20]
  415668:	cmp    rdx,0xff
  41566f:	ja     4156e0 <_start@@Base+0xe870>
  415671:	mov    eax,edx
  415673:	mov    BYTE PTR [rsp+0x17],dl
  415677:	mov    r14,r11
  41567a:	jmp    41540d <_start@@Base+0xe59d>
  41567f:	nop
  415680:	mov    r8d,DWORD PTR [rsp+0x1c]
  415685:	mov    ecx,0x8
  41568a:	test   r8d,r8d
  41568d:	jne    415722 <_start@@Base+0xe8b2>
  415693:	mov    rdx,QWORD PTR [rsp+0x20]
  415698:	cmp    rdx,0xff
  41569f:	ja     415718 <_start@@Base+0xe8a8>
  4156a1:	mov    eax,edx
  4156a3:	mov    BYTE PTR [rsp+0x17],dl
  4156a7:	mov    r14,r11
  4156aa:	jmp    415511 <_start@@Base+0xe6a1>
  4156af:	nop
  4156b0:	cmp    rax,0x7f
  4156b4:	ja     415780 <_start@@Base+0xe910>
  4156ba:	mov    edx,eax
  4156bc:	mov    BYTE PTR [rsp+0x17],al
  4156c0:	jmp    415210 <_start@@Base+0xe3a0>
  4156c5:	nop    DWORD PTR [rax]
  4156c8:	cmp    rax,0x7f
  4156cc:	ja     4157b8 <_start@@Base+0xe948>
  4156d2:	mov    edx,eax
  4156d4:	mov    BYTE PTR [rsp+0x17],al
  4156d8:	jmp    4150d0 <_start@@Base+0xe260>
  4156dd:	nop    DWORD PTR [rax]
  4156e0:	mov    QWORD PTR [rsp+0x8],r10
  4156e5:	mov    ecx,0x7
  4156ea:	mov    rdx,rbp
  4156ed:	mov    rsi,r11
  4156f0:	mov    rdi,rbx
  4156f3:	call   41d640 <flatcc_json_parser_set_error@@Base>
  4156f8:	mov    r10,QWORD PTR [rsp+0x8]
  4156fd:	mov    r14,rax
  415700:	cmp    r10,rax
  415703:	jne    415408 <_start@@Base+0xe598>
  415709:	mov    r11,r10
  41570c:	jmp    4153cf <_start@@Base+0xe55f>
  415711:	nop    DWORD PTR [rax+0x0]
  415718:	mov    QWORD PTR [rsp+0x8],r10
  41571d:	mov    ecx,0x7
  415722:	mov    rdx,rbp
  415725:	mov    rsi,r11
  415728:	mov    rdi,rbx
  41572b:	call   41d640 <flatcc_json_parser_set_error@@Base>
  415730:	mov    r10,QWORD PTR [rsp+0x8]
  415735:	mov    r14,rax
  415738:	cmp    r10,rax
  41573b:	jne    41550c <_start@@Base+0xe69c>
  415741:	mov    r11,r10
  415744:	jmp    4154d3 <_start@@Base+0xe663>
  415749:	nop    DWORD PTR [rax+0x0]
  415750:	mov    esi,DWORD PTR [rbx+0x20]
  415753:	test   esi,esi
  415755:	jne    415240 <_start@@Base+0xe3d0>
  41575b:	mov    rdi,QWORD PTR [rbx]
  41575e:	call   418ee0 <flatcc_builder_end_table@@Base>
  415763:	mov    edx,eax
  415765:	mov    DWORD PTR [r12],eax
  415769:	mov    rax,r14
  41576c:	test   edx,edx
  41576e:	jne    414f26 <_start@@Base+0xe0b6>
  415774:	jmp    415240 <_start@@Base+0xe3d0>
  415779:	nop    DWORD PTR [rax+0x0]
  415780:	mov    QWORD PTR [rsp+0x8],r10
  415785:	mov    ecx,0x7
  41578a:	mov    rsi,r14
  41578d:	mov    rdx,rbp
  415790:	mov    rdi,rbx
  415793:	call   41d640 <flatcc_json_parser_set_error@@Base>
  415798:	mov    r10,QWORD PTR [rsp+0x8]
  41579d:	mov    r14,rax
  4157a0:	cmp    r10,rax
  4157a3:	je     4151d6 <_start@@Base+0xe366>
  4157a9:	movzx  edx,BYTE PTR [rsp+0x17]
  4157ae:	jmp    415210 <_start@@Base+0xe3a0>
  4157b3:	nop    DWORD PTR [rax+rax*1+0x0]
  4157b8:	mov    QWORD PTR [rsp+0x8],r10
  4157bd:	mov    ecx,0x7
  4157c2:	mov    rsi,r14
  4157c5:	mov    rdx,rbp
  4157c8:	mov    rdi,rbx
  4157cb:	call   41d640 <flatcc_json_parser_set_error@@Base>
  4157d0:	mov    r10,QWORD PTR [rsp+0x8]
  4157d5:	mov    r14,rax
  4157d8:	cmp    r10,rax
  4157db:	je     415098 <_start@@Base+0xe228>
  4157e1:	movzx  edx,BYTE PTR [rsp+0x17]
  4157e6:	jmp    4150d0 <_start@@Base+0xe260>
  4157eb:	mov    r14,rax
  4157ee:	jmp    415240 <_start@@Base+0xe3d0>
  4157f3:	call   4061a0 <__stack_chk_fail@plt>
  4157f8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000415800 <test_json@@Base>:
  415800:	endbr64 
  415804:	push   r15
  415806:	mov    r15d,r8d
  415809:	push   r14
  41580b:	mov    r14d,ecx
  41580e:	push   r13
  415810:	mov    r13,rsi
  415813:	push   r12
  415815:	push   rbp
  415816:	push   rbx
  415817:	mov    rbx,rdi
  41581a:	sub    rsp,0x298
  415821:	mov    DWORD PTR [rsp+0x8],r9d
  415826:	mov    QWORD PTR [rsp+0x10],rdx
  41582b:	lea    rbp,[rsp+0xe0]
  415833:	mov    rdi,rbp
  415836:	lea    r12,[rsp+0x90]
  41583e:	mov    rax,QWORD PTR fs:0x28
  415847:	mov    QWORD PTR [rsp+0x288],rax
  41584f:	xor    eax,eax
  415851:	call   416f10 <flatcc_builder_init@@Base>
  415856:	xor    esi,esi
  415858:	mov    rdi,r12
  41585b:	call   42baf0 <flatcc_json_printer_init_dynamic_buffer@@Base>
  415860:	mov    r9d,DWORD PTR [rsp+0x8]
  415865:	mov    eax,r9d
  415868:	shr    eax,1
  41586a:	and    eax,0x1
  41586d:	mov    BYTE PTR [rsp+0xc3],al
  415874:	mov    eax,r9d
  415877:	shr    eax,0x2
  41587a:	and    eax,0x1
  41587d:	mov    BYTE PTR [rsp+0xc2],r9b
  415885:	mov    BYTE PTR [rsp+0xc4],al
  41588c:	mov    eax,r9d
  41588f:	shr    eax,0x3
  415892:	and    eax,0x1
  415895:	and    BYTE PTR [rsp+0xc2],0x1
  41589d:	mov    BYTE PTR [rsp+0xc5],al
  4158a4:	test   r9b,0x10
  4158a8:	je     4158b2 <test_json@@Base+0xb2>
  4158aa:	mov    BYTE PTR [rsp+0xc1],0x2
  4158b2:	and    r9d,0x20
  4158b6:	je     4158cd <test_json@@Base+0xcd>
  4158b8:	mov    esi,0x1
  4158bd:	mov    BYTE PTR [rsp+0xc1],0x2
  4158c5:	mov    WORD PTR [rsp+0xc2],si
  4158cd:	mov    rdi,r13
  4158d0:	call   406190 <strlen@plt>
  4158d5:	lea    rsi,[rsp+0x40]
  4158da:	sub    rsp,0x8
  4158de:	push   QWORD PTR [rbx+0x8]
  4158e1:	mov    r9,QWORD PTR [rbx]
  4158e4:	mov    rcx,rax
  4158e7:	mov    rdx,r13
  4158ea:	mov    r8d,r15d
  4158ed:	mov    rdi,rbp
  4158f0:	call   4204d0 <flatcc_json_parser_table_as_root@@Base>
  4158f5:	pop    rdx
  4158f6:	pop    rcx
  4158f7:	cmp    eax,r14d
  4158fa:	jne    415b40 <test_json@@Base+0x340>
  415900:	test   r14d,r14d
  415903:	je     415950 <test_json@@Base+0x150>
  415905:	xor    r13d,r13d
  415908:	xor    r14d,r14d
  41590b:	mov    rdi,r13
  41590e:	call   41a720 <flatcc_builder_aligned_free@@Base>
  415913:	mov    rdi,rbp
  415916:	call   4170d0 <flatcc_builder_clear@@Base>
  41591b:	mov    rdi,r12
  41591e:	call   42bbf0 <flatcc_json_printer_clear@@Base>
  415923:	mov    rdx,QWORD PTR [rsp+0x288]
  41592b:	xor    rdx,QWORD PTR fs:0x28
  415934:	mov    eax,r14d
  415937:	jne    415d3b <test_json@@Base+0x53b>
  41593d:	add    rsp,0x298
  415944:	pop    rbx
  415945:	pop    rbp
  415946:	pop    r12
  415948:	pop    r13
  41594a:	pop    r14
  41594c:	pop    r15
  41594e:	ret    
  41594f:	nop
  415950:	lea    rsi,[rsp+0x30]
  415955:	mov    rdi,rbp
  415958:	call   41a5c0 <flatcc_builder_finalize_aligned_buffer@@Base>
  41595d:	mov    rcx,QWORD PTR [rbx+0x18]
  415961:	mov    rdx,QWORD PTR [rbx]
  415964:	mov    rsi,QWORD PTR [rsp+0x30]
  415969:	mov    rdi,rax
  41596c:	mov    r13,rax
  41596f:	call   41bcf0 <flatcc_verify_table_as_root@@Base>
  415974:	test   eax,eax
  415976:	jne    415cf1 <test_json@@Base+0x4f1>
  41597c:	mov    r8,QWORD PTR [rbx+0x10]
  415980:	mov    rcx,QWORD PTR [rbx]
  415983:	mov    rdx,QWORD PTR [rsp+0x30]
  415988:	mov    rsi,r13
  41598b:	mov    rdi,r12
  41598e:	call   42b480 <flatcc_json_printer_table_as_root@@Base>
  415993:	lea    rsi,[rsp+0x38]
  415998:	mov    rdi,r12
  41599b:	call   42bb90 <flatcc_json_printer_get_buffer@@Base>
  4159a0:	mov    rbx,rax
  4159a3:	test   rax,rax
  4159a6:	je     4159c0 <test_json@@Base+0x1c0>
  4159a8:	mov    rdi,QWORD PTR [rsp+0x10]
  4159ad:	mov    rsi,rax
  4159b0:	call   4061f0 <strcmp@plt>
  4159b5:	mov    r14d,eax
  4159b8:	test   eax,eax
  4159ba:	je     41590b <test_json@@Base+0x10b>
  4159c0:	mov    r15,QWORD PTR [rip+0x24621]        # 439fe8 <stderr@GLIBC_2.2.5>
  4159c7:	mov    ecx,DWORD PTR [rsp+0x2d0]
  4159ce:	mov    rdi,QWORD PTR [r15]
  4159d1:	lea    rdx,[rip+0x16f08]        # 42c8e0 <_IO_stdin_used@@Base+0x8e0>
  4159d8:	mov    esi,0x1
  4159dd:	xor    eax,eax
  4159df:	call   406260 <__fprintf_chk@plt>
  4159e4:	mov    rdi,QWORD PTR [r15]
  4159e7:	mov    rcx,rbx
  4159ea:	lea    rdx,[rip+0x16af6]        # 42c4e7 <_IO_stdin_used@@Base+0x4e7>
  4159f1:	mov    esi,0x1
  4159f6:	xor    eax,eax
  4159f8:	call   406260 <__fprintf_chk@plt>
  4159fd:	mov    rdi,QWORD PTR [r15]
  415a00:	lea    rdx,[rip+0x16ac0]        # 42c4c7 <_IO_stdin_used@@Base+0x4c7>
  415a07:	mov    esi,0x1
  415a0c:	xor    eax,eax
  415a0e:	call   406260 <__fprintf_chk@plt>
  415a13:	mov    rcx,QWORD PTR [rsp+0x10]
  415a18:	mov    rdi,QWORD PTR [r15]
  415a1b:	lea    rdx,[rip+0x16ac5]        # 42c4e7 <_IO_stdin_used@@Base+0x4e7>
  415a22:	mov    esi,0x1
  415a27:	xor    eax,eax
  415a29:	call   406260 <__fprintf_chk@plt>
  415a2e:	mov    r14d,0xffffffff
  415a34:	test   r13,r13
  415a37:	je     41590b <test_json@@Base+0x10b>
  415a3d:	mov    rax,QWORD PTR [rsp+0x30]
  415a42:	mov    r14,QWORD PTR [r15]
  415a45:	mov    rbx,rax
  415a48:	mov    QWORD PTR [rsp+0x10],rax
  415a4d:	lea    rcx,[rip+0x16a7e]        # 42c4d2 <_IO_stdin_used@@Base+0x4d2>
  415a54:	lea    rdx,[rip+0x16a85]        # 42c4e0 <_IO_stdin_used@@Base+0x4e0>
  415a5b:	mov    esi,0x1
  415a60:	mov    rdi,r14
  415a63:	xor    eax,eax
  415a65:	call   406260 <__fprintf_chk@plt>
  415a6a:	mov    DWORD PTR [rsp+0x1c],ebx
  415a6e:	test   ebx,ebx
  415a70:	je     415d2c <test_json@@Base+0x52c>
  415a76:	mov    rax,QWORD PTR [rsp+0x10]
  415a7b:	xor    r15d,r15d
  415a7e:	dec    eax
  415a80:	lea    rcx,[rsp+0x270]
  415a88:	mov    QWORD PTR [rsp+0x28],rbp
  415a8d:	mov    QWORD PTR [rsp+0x8],rcx
  415a92:	mov    rbp,r15
  415a95:	mov    QWORD PTR [rsp+0x20],r12
  415a9a:	mov    r15,rax
  415a9d:	jmp    415b14 <test_json@@Base+0x314>
  415a9f:	nop
  415aa0:	test   ebp,ebp
  415aa2:	jne    415c14 <test_json@@Base+0x414>
  415aa8:	mov    ecx,r12d
  415aab:	lea    rdx,[rip+0x16a39]        # 42c4eb <_IO_stdin_used@@Base+0x4eb>
  415ab2:	mov    esi,0x1
  415ab7:	mov    rdi,r14
  415aba:	xor    eax,eax
  415abc:	call   406260 <__fprintf_chk@plt>
  415ac1:	movzx  ecx,BYTE PTR [r13+rbp*1+0x0]
  415ac7:	lea    rdx,[rip+0x16a25]        # 42c4f3 <_IO_stdin_used@@Base+0x4f3>
  415ace:	xor    eax,eax
  415ad0:	mov    esi,0x1
  415ad5:	mov    rdi,r14
  415ad8:	call   406260 <__fprintf_chk@plt>
  415add:	movzx  eax,BYTE PTR [r13+rbp*1+0x0]
  415ae3:	mov    ecx,0x2e
  415ae8:	lea    edx,[rax-0x20]
  415aeb:	cmp    dl,0x5f
  415aee:	cmovae eax,ecx
  415af1:	mov    edx,ebx
  415af3:	inc    ebx
  415af5:	mov    BYTE PTR [rsp+rdx*1+0x270],al
  415afc:	mov    BYTE PTR [rsp+rbx*1+0x270],0x0
  415b04:	lea    rax,[rbp+0x1]
  415b08:	cmp    r15,rbp
  415b0b:	je     415c89 <test_json@@Base+0x489>
  415b11:	mov    rbp,rax
  415b14:	mov    ebx,ebp
  415b16:	mov    r12d,ebp
  415b19:	and    ebx,0xf
  415b1c:	je     415aa0 <test_json@@Base+0x2a0>
  415b1e:	test   bpl,0x7
  415b22:	jne    415ac1 <test_json@@Base+0x2c1>
  415b24:	lea    rdx,[rip+0x169d0]        # 42c4fb <_IO_stdin_used@@Base+0x4fb>
  415b2b:	mov    esi,0x1
  415b30:	mov    rdi,r14
  415b33:	xor    eax,eax
  415b35:	call   406260 <__fprintf_chk@plt>
  415b3a:	jmp    415ac1 <test_json@@Base+0x2c1>
  415b3c:	nop    DWORD PTR [rax+0x0]
  415b40:	test   r14d,r14d
  415b43:	je     415c68 <test_json@@Base+0x468>
  415b49:	test   eax,eax
  415b4b:	je     415c34 <test_json@@Base+0x434>
  415b51:	mov    edi,eax
  415b53:	call   41d3e0 <flatcc_json_parser_error_string@@Base>
  415b58:	mov    r15,QWORD PTR [rip+0x24489]        # 439fe8 <stderr@GLIBC_2.2.5>
  415b5f:	mov    ecx,DWORD PTR [rsp+0x2d0]
  415b66:	mov    rdi,QWORD PTR [r15]
  415b69:	mov    r8,rax
  415b6c:	lea    rdx,[rip+0x16c2d]        # 42c7a0 <_IO_stdin_used@@Base+0x7a0>
  415b73:	mov    esi,0x1
  415b78:	xor    eax,eax
  415b7a:	call   406260 <__fprintf_chk@plt>
  415b7f:	mov    edi,r14d
  415b82:	call   41d3e0 <flatcc_json_parser_error_string@@Base>
  415b87:	mov    rdi,QWORD PTR [r15]
  415b8a:	mov    rcx,rax
  415b8d:	lea    rdx,[rip+0x16c34]        # 42c7c8 <_IO_stdin_used@@Base+0x7c8>
  415b94:	mov    esi,0x1
  415b99:	xor    eax,eax
  415b9b:	call   406260 <__fprintf_chk@plt>
  415ba0:	mov    rdi,QWORD PTR [r15]
  415ba3:	mov    rcx,r13
  415ba6:	xor    eax,eax
  415ba8:	lea    rdx,[rip+0x16938]        # 42c4e7 <_IO_stdin_used@@Base+0x4e7>
  415baf:	mov    esi,0x1
  415bb4:	call   406260 <__fprintf_chk@plt>
  415bb9:	xor    r13d,r13d
  415bbc:	cmp    DWORD PTR [rsp+0x5c],0x1
  415bc1:	lea    r14,[rip+0x16933]        # 42c4fb <_IO_stdin_used@@Base+0x4fb>
  415bc8:	jle    415bf0 <test_json@@Base+0x3f0>
  415bca:	nop    WORD PTR [rax+rax*1+0x0]
  415bd0:	mov    rdi,QWORD PTR [r15]
  415bd3:	mov    rdx,r14
  415bd6:	mov    esi,0x1
  415bdb:	xor    eax,eax
  415bdd:	call   406260 <__fprintf_chk@plt>
  415be2:	mov    eax,DWORD PTR [rsp+0x5c]
  415be6:	inc    r13d
  415be9:	dec    eax
  415beb:	cmp    eax,r13d
  415bee:	jg     415bd0 <test_json@@Base+0x3d0>
  415bf0:	mov    rdi,QWORD PTR [r15]
  415bf3:	lea    rdx,[rip+0x168ca]        # 42c4c4 <_IO_stdin_used@@Base+0x4c4>
  415bfa:	mov    esi,0x1
  415bff:	xor    eax,eax
  415c01:	call   406260 <__fprintf_chk@plt>
  415c06:	xor    r13d,r13d
  415c09:	mov    r14d,0xffffffff
  415c0f:	jmp    41590b <test_json@@Base+0x10b>
  415c14:	mov    rcx,QWORD PTR [rsp+0x8]
  415c19:	lea    rdx,[rip+0x168c5]        # 42c4e5 <_IO_stdin_used@@Base+0x4e5>
  415c20:	mov    esi,0x1
  415c25:	mov    rdi,r14
  415c28:	xor    eax,eax
  415c2a:	call   406260 <__fprintf_chk@plt>
  415c2f:	jmp    415aa8 <test_json@@Base+0x2a8>
  415c34:	mov    edi,r14d
  415c37:	call   41d3e0 <flatcc_json_parser_error_string@@Base>
  415c3c:	mov    r15,QWORD PTR [rip+0x243a5]        # 439fe8 <stderr@GLIBC_2.2.5>
  415c43:	mov    ecx,DWORD PTR [rsp+0x2d0]
  415c4a:	mov    r8,rax
  415c4d:	lea    rdx,[rip+0x16b94]        # 42c7e8 <_IO_stdin_used@@Base+0x7e8>
  415c54:	mov    rdi,QWORD PTR [r15]
  415c57:	mov    esi,0x1
  415c5c:	xor    eax,eax
  415c5e:	call   406260 <__fprintf_chk@plt>
  415c63:	jmp    415ba0 <test_json@@Base+0x3a0>
  415c68:	mov    edi,eax
  415c6a:	call   41d3e0 <flatcc_json_parser_error_string@@Base>
  415c6f:	mov    r8,rax
  415c72:	mov    r15,QWORD PTR [rip+0x2436f]        # 439fe8 <stderr@GLIBC_2.2.5>
  415c79:	mov    ecx,DWORD PTR [rsp+0x2d0]
  415c80:	lea    rdx,[rip+0x16ba1]        # 42c828 <_IO_stdin_used@@Base+0x828>
  415c87:	jmp    415c54 <test_json@@Base+0x454>
  415c89:	mov    r12,QWORD PTR [rsp+0x20]
  415c8e:	mov    rbp,QWORD PTR [rsp+0x28]
  415c93:	test   BYTE PTR [rsp+0x10],0xf
  415c98:	je     415ccb <test_json@@Base+0x4cb>
  415c9a:	mov    r15d,DWORD PTR [rsp+0x1c]
  415c9f:	lea    rbx,[rip+0x16853]        # 42c4f9 <_IO_stdin_used@@Base+0x4f9>
  415ca6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  415cb0:	mov    rdx,rbx
  415cb3:	mov    esi,0x1
  415cb8:	mov    rdi,r14
  415cbb:	xor    eax,eax
  415cbd:	inc    r15d
  415cc0:	call   406260 <__fprintf_chk@plt>
  415cc5:	test   r15b,0xf
  415cc9:	jne    415cb0 <test_json@@Base+0x4b0>
  415ccb:	mov    rcx,QWORD PTR [rsp+0x8]
  415cd0:	mov    rdi,r14
  415cd3:	lea    rdx,[rip+0x1680b]        # 42c4e5 <_IO_stdin_used@@Base+0x4e5>
  415cda:	mov    esi,0x1
  415cdf:	xor    eax,eax
  415ce1:	call   406260 <__fprintf_chk@plt>
  415ce6:	mov    r14d,0xffffffff
  415cec:	jmp    41590b <test_json@@Base+0x10b>
  415cf1:	mov    edi,eax
  415cf3:	call   41ae20 <flatcc_verify_error_string@@Base>
  415cf8:	mov    r15,QWORD PTR [rip+0x242e9]        # 439fe8 <stderr@GLIBC_2.2.5>
  415cff:	mov    r8d,DWORD PTR [rsp+0x2d0]
  415d07:	mov    rdi,QWORD PTR [r15]
  415d0a:	mov    r9,rax
  415d0d:	lea    rcx,[rip+0x16b3c]        # 42c850 <_IO_stdin_used@@Base+0x850>
  415d14:	lea    rdx,[rip+0x16b9d]        # 42c8b8 <_IO_stdin_used@@Base+0x8b8>
  415d1b:	mov    esi,0x1
  415d20:	xor    eax,eax
  415d22:	call   406260 <__fprintf_chk@plt>
  415d27:	jmp    415a2e <test_json@@Base+0x22e>
  415d2c:	lea    rax,[rsp+0x270]
  415d34:	mov    QWORD PTR [rsp+0x8],rax
  415d39:	jmp    415ccb <test_json@@Base+0x4cb>
  415d3b:	call   4061a0 <__stack_chk_fail@plt>

0000000000415d40 <edge_case_tests@@Base>:
  415d40:	endbr64 
  415d44:	push   rbx
  415d45:	xor    r9d,r9d
  415d48:	xor    r8d,r8d
  415d4b:	sub    rsp,0x8
  415d4f:	push   0x9b
  415d54:	xor    ecx,ecx
  415d56:	lea    rdx,[rip+0x167a0]        # 42c4fd <_IO_stdin_used@@Base+0x4fd>
  415d5d:	lea    rsi,[rip+0x16bb4]        # 42c918 <_IO_stdin_used@@Base+0x918>
  415d64:	lea    rdi,[rip+0x24075]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  415d6b:	call   415800 <test_json@@Base>
  415d70:	xor    r9d,r9d
  415d73:	xor    ecx,ecx
  415d75:	mov    r8d,0x2
  415d7b:	lea    rdx,[rip+0x16bce]        # 42c950 <_IO_stdin_used@@Base+0x950>
  415d82:	lea    rsi,[rip+0x16bef]        # 42c978 <_IO_stdin_used@@Base+0x978>
  415d89:	lea    rdi,[rip+0x24050]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  415d90:	mov    DWORD PTR [rsp],0xa8
  415d97:	mov    ebx,eax
  415d99:	call   415800 <test_json@@Base>
  415d9e:	xor    r8d,r8d
  415da1:	xor    ecx,ecx
  415da3:	mov    r9d,0x2
  415da9:	lea    rdx,[rip+0x1676b]        # 42c51b <_IO_stdin_used@@Base+0x51b>
  415db0:	lea    rsi,[rip+0x16be9]        # 42c9a0 <_IO_stdin_used@@Base+0x9a0>
  415db7:	lea    rdi,[rip+0x24022]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  415dbe:	or     ebx,eax
  415dc0:	mov    DWORD PTR [rsp],0xac
  415dc7:	call   415800 <test_json@@Base>
  415dcc:	xor    ecx,ecx
  415dce:	mov    r9d,0x4
  415dd4:	mov    r8d,0x2
  415dda:	lea    rdx,[rip+0x16757]        # 42c538 <_IO_stdin_used@@Base+0x538>
  415de1:	lea    rsi,[rip+0x16b90]        # 42c978 <_IO_stdin_used@@Base+0x978>
  415de8:	lea    rdi,[rip+0x23ff1]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  415def:	or     ebx,eax
  415df1:	mov    DWORD PTR [rsp],0xb0
  415df8:	call   415800 <test_json@@Base>
  415dfd:	xor    r8d,r8d
  415e00:	xor    ecx,ecx
  415e02:	mov    r9d,0x8
  415e08:	lea    rdx,[rip+0x16bb9]        # 42c9c8 <_IO_stdin_used@@Base+0x9c8>
  415e0f:	lea    rsi,[rip+0x16cca]        # 42cae0 <_IO_stdin_used@@Base+0xae0>
  415e16:	lea    rdi,[rip+0x23fc3]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  415e1d:	or     ebx,eax
  415e1f:	mov    DWORD PTR [rsp],0xb4
  415e26:	call   415800 <test_json@@Base>
  415e2b:	xor    r9d,r9d
  415e2e:	xor    ecx,ecx
  415e30:	mov    r8d,0x2
  415e36:	lea    rdx,[rip+0x16b13]        # 42c950 <_IO_stdin_used@@Base+0x950>
  415e3d:	lea    rsi,[rip+0x16cc4]        # 42cb08 <_IO_stdin_used@@Base+0xb08>
  415e44:	lea    rdi,[rip+0x23f95]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  415e4b:	or     ebx,eax
  415e4d:	mov    DWORD PTR [rsp],0xc3
  415e54:	call   415800 <test_json@@Base>
  415e59:	xor    r9d,r9d
  415e5c:	xor    ecx,ecx
  415e5e:	mov    r8d,0x1
  415e64:	lea    rdx,[rip+0x166e0]        # 42c54b <_IO_stdin_used@@Base+0x54b>
  415e6b:	lea    rsi,[rip+0x16cbe]        # 42cb30 <_IO_stdin_used@@Base+0xb30>
  415e72:	lea    rdi,[rip+0x23f67]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  415e79:	or     ebx,eax
  415e7b:	mov    DWORD PTR [rsp],0xc7
  415e82:	call   415800 <test_json@@Base>
  415e87:	mov    r9d,0x1
  415e8d:	mov    r8d,0x1
  415e93:	xor    ecx,ecx
  415e95:	lea    rdx,[rip+0x166ca]        # 42c566 <_IO_stdin_used@@Base+0x566>
  415e9c:	lea    rsi,[rip+0x16c8d]        # 42cb30 <_IO_stdin_used@@Base+0xb30>
  415ea3:	lea    rdi,[rip+0x23f36]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  415eaa:	or     ebx,eax
  415eac:	mov    DWORD PTR [rsp],0xcb
  415eb3:	call   415800 <test_json@@Base>
  415eb8:	or     ebx,eax
  415eba:	xor    r9d,r9d
  415ebd:	mov    r8d,0x1
  415ec3:	xor    ecx,ecx
  415ec5:	lea    rdx,[rip+0x1667f]        # 42c54b <_IO_stdin_used@@Base+0x54b>
  415ecc:	lea    rsi,[rip+0x16c95]        # 42cb68 <_IO_stdin_used@@Base+0xb68>
  415ed3:	lea    rdi,[rip+0x23f06]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  415eda:	mov    DWORD PTR [rsp],0xd1
  415ee1:	call   415800 <test_json@@Base>
  415ee6:	xor    r9d,r9d
  415ee9:	xor    ecx,ecx
  415eeb:	mov    r8d,0x2
  415ef1:	lea    rdx,[rip+0x16a58]        # 42c950 <_IO_stdin_used@@Base+0x950>
  415ef8:	lea    rsi,[rip+0x1667e]        # 42c57d <_IO_stdin_used@@Base+0x57d>
  415eff:	lea    rdi,[rip+0x23eda]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  415f06:	or     ebx,eax
  415f08:	mov    DWORD PTR [rsp],0xd9
  415f0f:	call   415800 <test_json@@Base>
  415f14:	xor    r8d,r8d
  415f17:	xor    ecx,ecx
  415f19:	mov    r9d,0x2
  415f1f:	lea    rdx,[rip+0x165f5]        # 42c51b <_IO_stdin_used@@Base+0x51b>
  415f26:	lea    rsi,[rip+0x16cb3]        # 42cbe0 <_IO_stdin_used@@Base+0xbe0>
  415f2d:	lea    rdi,[rip+0x23eac]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  415f34:	or     ebx,eax
  415f36:	mov    DWORD PTR [rsp],0xdd
  415f3d:	call   415800 <test_json@@Base>
  415f42:	xor    ecx,ecx
  415f44:	mov    r9d,0x4
  415f4a:	mov    r8d,0x2
  415f50:	lea    rdx,[rip+0x165e1]        # 42c538 <_IO_stdin_used@@Base+0x538>
  415f57:	lea    rsi,[rip+0x1661f]        # 42c57d <_IO_stdin_used@@Base+0x57d>
  415f5e:	lea    rdi,[rip+0x23e7b]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  415f65:	or     ebx,eax
  415f67:	mov    DWORD PTR [rsp],0xe1
  415f6e:	call   415800 <test_json@@Base>
  415f73:	xor    r8d,r8d
  415f76:	xor    ecx,ecx
  415f78:	mov    r9d,0x8
  415f7e:	lea    rdx,[rip+0x16c83]        # 42cc08 <_IO_stdin_used@@Base+0xc08>
  415f85:	lea    rsi,[rip+0x1660e]        # 42c59a <_IO_stdin_used@@Base+0x59a>
  415f8c:	lea    rdi,[rip+0x23e4d]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  415f93:	or     ebx,eax
  415f95:	mov    DWORD PTR [rsp],0xe5
  415f9c:	call   415800 <test_json@@Base>
  415fa1:	xor    r9d,r9d
  415fa4:	xor    ecx,ecx
  415fa6:	mov    r8d,0x2
  415fac:	lea    rdx,[rip+0x1699d]        # 42c950 <_IO_stdin_used@@Base+0x950>
  415fb3:	lea    rsi,[rip+0x16d66]        # 42cd20 <_IO_stdin_used@@Base+0xd20>
  415fba:	lea    rdi,[rip+0x23e1f]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  415fc1:	or     ebx,eax
  415fc3:	mov    DWORD PTR [rsp],0xe9
  415fca:	call   415800 <test_json@@Base>
  415fcf:	xor    r9d,r9d
  415fd2:	xor    ecx,ecx
  415fd4:	mov    r8d,0x1
  415fda:	lea    rdx,[rip+0x1656a]        # 42c54b <_IO_stdin_used@@Base+0x54b>
  415fe1:	lea    rsi,[rip+0x16d58]        # 42cd40 <_IO_stdin_used@@Base+0xd40>
  415fe8:	lea    rdi,[rip+0x23df1]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  415fef:	or     ebx,eax
  415ff1:	mov    DWORD PTR [rsp],0xed
  415ff8:	call   415800 <test_json@@Base>
  415ffd:	xor    ecx,ecx
  415fff:	mov    r9d,0x1
  416005:	mov    r8d,0x1
  41600b:	lea    rdx,[rip+0x16554]        # 42c566 <_IO_stdin_used@@Base+0x566>
  416012:	lea    rsi,[rip+0x16d27]        # 42cd40 <_IO_stdin_used@@Base+0xd40>
  416019:	lea    rdi,[rip+0x23dc0]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  416020:	or     ebx,eax
  416022:	mov    DWORD PTR [rsp],0xf1
  416029:	call   415800 <test_json@@Base>
  41602e:	xor    ecx,ecx
  416030:	xor    r9d,r9d
  416033:	lea    rdx,[rip+0x16511]        # 42c54b <_IO_stdin_used@@Base+0x54b>
  41603a:	mov    r8d,0x1
  416040:	lea    rsi,[rip+0x16d29]        # 42cd70 <_IO_stdin_used@@Base+0xd70>
  416047:	lea    rdi,[rip+0x23d92]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  41604e:	or     ebx,eax
  416050:	mov    DWORD PTR [rsp],0xf7
  416057:	call   415800 <test_json@@Base>
  41605c:	pop    rdx
  41605d:	pop    rcx
  41605e:	or     eax,ebx
  416060:	pop    rbx
  416061:	ret    
  416062:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41606d:	nop    DWORD PTR [rax]

0000000000416070 <error_case_tests@@Base>:
  416070:	endbr64 
  416074:	push   rbx
  416075:	xor    r9d,r9d
  416078:	xor    r8d,r8d
  41607b:	sub    rsp,0x8
  41607f:	push   0x11d
  416084:	xor    edx,edx
  416086:	mov    ecx,0xd
  41608b:	lea    rsi,[rip+0x1651b]        # 42c5ad <_IO_stdin_used@@Base+0x5ad>
  416092:	lea    rdi,[rip+0x23d47]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  416099:	call   415800 <test_json@@Base>
  41609e:	xor    r9d,r9d
  4160a1:	xor    r8d,r8d
  4160a4:	xor    edx,edx
  4160a6:	mov    ecx,0xd
  4160ab:	lea    rsi,[rip+0x16d1e]        # 42cdd0 <_IO_stdin_used@@Base+0xdd0>
  4160b2:	lea    rdi,[rip+0x23d27]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4160b9:	mov    DWORD PTR [rsp],0x11f
  4160c0:	mov    ebx,eax
  4160c2:	call   415800 <test_json@@Base>
  4160c7:	xor    r9d,r9d
  4160ca:	xor    r8d,r8d
  4160cd:	xor    edx,edx
  4160cf:	mov    ecx,0xd
  4160d4:	lea    rsi,[rip+0x16d5d]        # 42ce38 <_IO_stdin_used@@Base+0xe38>
  4160db:	lea    rdi,[rip+0x23cfe]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4160e2:	or     ebx,eax
  4160e4:	mov    DWORD PTR [rsp],0x121
  4160eb:	call   415800 <test_json@@Base>
  4160f0:	xor    r9d,r9d
  4160f3:	xor    r8d,r8d
  4160f6:	xor    edx,edx
  4160f8:	mov    ecx,0xd
  4160fd:	lea    rsi,[rip+0x16d94]        # 42ce98 <_IO_stdin_used@@Base+0xe98>
  416104:	lea    rdi,[rip+0x23cd5]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  41610b:	or     ebx,eax
  41610d:	mov    DWORD PTR [rsp],0x123
  416114:	call   415800 <test_json@@Base>
  416119:	xor    r9d,r9d
  41611c:	xor    r8d,r8d
  41611f:	xor    edx,edx
  416121:	mov    ecx,0xd
  416126:	lea    rsi,[rip+0x16dc3]        # 42cef0 <_IO_stdin_used@@Base+0xef0>
  41612d:	lea    rdi,[rip+0x23cac]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  416134:	or     ebx,eax
  416136:	mov    DWORD PTR [rsp],0x125
  41613d:	call   415800 <test_json@@Base>
  416142:	xor    r9d,r9d
  416145:	xor    r8d,r8d
  416148:	mov    ecx,0xd
  41614d:	xor    edx,edx
  41614f:	lea    rsi,[rip+0x16df2]        # 42cf48 <_IO_stdin_used@@Base+0xf48>
  416156:	lea    rdi,[rip+0x23c83]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  41615d:	or     ebx,eax
  41615f:	mov    DWORD PTR [rsp],0x128
  416166:	call   415800 <test_json@@Base>
  41616b:	or     ebx,eax
  41616d:	xor    r9d,r9d
  416170:	xor    r8d,r8d
  416173:	mov    ecx,0xd
  416178:	xor    edx,edx
  41617a:	lea    rsi,[rip+0x16e67]        # 42cfe8 <_IO_stdin_used@@Base+0xfe8>
  416181:	lea    rdi,[rip+0x23c58]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  416188:	mov    DWORD PTR [rsp],0x12b
  41618f:	call   415800 <test_json@@Base>
  416194:	xor    r9d,r9d
  416197:	xor    r8d,r8d
  41619a:	xor    edx,edx
  41619c:	mov    ecx,0xd
  4161a1:	lea    rsi,[rip+0x16ee0]        # 42d088 <_IO_stdin_used@@Base+0x1088>
  4161a8:	lea    rdi,[rip+0x23c31]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4161af:	or     ebx,eax
  4161b1:	mov    DWORD PTR [rsp],0x12f
  4161b8:	call   415800 <test_json@@Base>
  4161bd:	xor    r9d,r9d
  4161c0:	xor    r8d,r8d
  4161c3:	xor    edx,edx
  4161c5:	mov    ecx,0xd
  4161ca:	lea    rsi,[rip+0x16f7f]        # 42d150 <_IO_stdin_used@@Base+0x1150>
  4161d1:	lea    rdi,[rip+0x23c08]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4161d8:	or     ebx,eax
  4161da:	mov    DWORD PTR [rsp],0x133
  4161e1:	call   415800 <test_json@@Base>
  4161e6:	xor    r9d,r9d
  4161e9:	xor    r8d,r8d
  4161ec:	xor    edx,edx
  4161ee:	mov    ecx,0xd
  4161f3:	lea    rsi,[rip+0x163cd]        # 42c5c7 <_IO_stdin_used@@Base+0x5c7>
  4161fa:	lea    rdi,[rip+0x23bdf]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  416201:	or     ebx,eax
  416203:	mov    DWORD PTR [rsp],0x142
  41620a:	call   415800 <test_json@@Base>
  41620f:	xor    r9d,r9d
  416212:	xor    r8d,r8d
  416215:	xor    edx,edx
  416217:	mov    ecx,0xd
  41621c:	lea    rsi,[rip+0x16ff5]        # 42d218 <_IO_stdin_used@@Base+0x1218>
  416223:	lea    rdi,[rip+0x23bb6]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  41622a:	or     ebx,eax
  41622c:	mov    DWORD PTR [rsp],0x144
  416233:	call   415800 <test_json@@Base>
  416238:	xor    r9d,r9d
  41623b:	xor    r8d,r8d
  41623e:	xor    edx,edx
  416240:	mov    ecx,0xd
  416245:	lea    rsi,[rip+0x17024]        # 42d270 <_IO_stdin_used@@Base+0x1270>
  41624c:	lea    rdi,[rip+0x23b8d]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  416253:	or     ebx,eax
  416255:	mov    DWORD PTR [rsp],0x146
  41625c:	call   415800 <test_json@@Base>
  416261:	xor    r9d,r9d
  416264:	xor    r8d,r8d
  416267:	xor    edx,edx
  416269:	mov    ecx,0xd
  41626e:	lea    rsi,[rip+0x17053]        # 42d2c8 <_IO_stdin_used@@Base+0x12c8>
  416275:	lea    rdi,[rip+0x23b64]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  41627c:	mov    DWORD PTR [rsp],0x148
  416283:	or     ebx,eax
  416285:	call   415800 <test_json@@Base>
  41628a:	or     ebx,eax
  41628c:	mov    ecx,0xd
  416291:	xor    r9d,r9d
  416294:	xor    r8d,r8d
  416297:	xor    edx,edx
  416299:	lea    rsi,[rip+0x17078]        # 42d318 <_IO_stdin_used@@Base+0x1318>
  4162a0:	lea    rdi,[rip+0x23b39]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4162a7:	mov    DWORD PTR [rsp],0x14a
  4162ae:	call   415800 <test_json@@Base>
  4162b3:	xor    r9d,r9d
  4162b6:	xor    r8d,r8d
  4162b9:	mov    ecx,0xd
  4162be:	xor    edx,edx
  4162c0:	lea    rsi,[rip+0x170a1]        # 42d368 <_IO_stdin_used@@Base+0x1368>
  4162c7:	lea    rdi,[rip+0x23b12]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4162ce:	mov    DWORD PTR [rsp],0x14d
  4162d5:	or     ebx,eax
  4162d7:	call   415800 <test_json@@Base>
  4162dc:	xor    r9d,r9d
  4162df:	xor    r8d,r8d
  4162e2:	mov    ecx,0xd
  4162e7:	xor    edx,edx
  4162e9:	lea    rsi,[rip+0x17108]        # 42d3f8 <_IO_stdin_used@@Base+0x13f8>
  4162f0:	lea    rdi,[rip+0x23ae9]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4162f7:	mov    DWORD PTR [rsp],0x150
  4162fe:	or     ebx,eax
  416300:	call   415800 <test_json@@Base>
  416305:	xor    r9d,r9d
  416308:	xor    r8d,r8d
  41630b:	mov    ecx,0xd
  416310:	xor    edx,edx
  416312:	lea    rsi,[rip+0x1716f]        # 42d488 <_IO_stdin_used@@Base+0x1488>
  416319:	lea    rdi,[rip+0x23ac0]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  416320:	mov    DWORD PTR [rsp],0x154
  416327:	or     ebx,eax
  416329:	call   415800 <test_json@@Base>
  41632e:	mov    ecx,0xd
  416333:	xor    edx,edx
  416335:	xor    r9d,r9d
  416338:	xor    r8d,r8d
  41633b:	lea    rsi,[rip+0x171f6]        # 42d538 <_IO_stdin_used@@Base+0x1538>
  416342:	lea    rdi,[rip+0x23a97]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  416349:	or     ebx,eax
  41634b:	mov    DWORD PTR [rsp],0x158
  416352:	call   415800 <test_json@@Base>
  416357:	pop    rdx
  416358:	pop    rcx
  416359:	or     eax,ebx
  41635b:	pop    rbx
  41635c:	ret    
  41635d:	nop    DWORD PTR [rax]

0000000000416360 <base64_tests@@Base>:
  416360:	endbr64 
  416364:	push   rbx
  416365:	xor    r9d,r9d
  416368:	xor    r8d,r8d
  41636b:	sub    rsp,0x8
  41636f:	push   0x171
  416374:	xor    ecx,ecx
  416376:	lea    rdx,[rip+0x161bb]        # 42c538 <_IO_stdin_used@@Base+0x538>
  41637d:	lea    rsi,[rip+0x1625b]        # 42c5df <_IO_stdin_used@@Base+0x5df>
  416384:	lea    rdi,[rip+0x23a55]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  41638b:	call   415800 <test_json@@Base>
  416390:	xor    r9d,r9d
  416393:	xor    r8d,r8d
  416396:	xor    ecx,ecx
  416398:	lea    rdx,[rip+0x17249]        # 42d5e8 <_IO_stdin_used@@Base+0x15e8>
  41639f:	lea    rsi,[rip+0x1726a]        # 42d610 <_IO_stdin_used@@Base+0x1610>
  4163a6:	lea    rdi,[rip+0x23a33]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4163ad:	mov    DWORD PTR [rsp],0x174
  4163b4:	mov    ebx,eax
  4163b6:	call   415800 <test_json@@Base>
  4163bb:	xor    r9d,r9d
  4163be:	xor    r8d,r8d
  4163c1:	xor    ecx,ecx
  4163c3:	lea    rdx,[rip+0x1726e]        # 42d638 <_IO_stdin_used@@Base+0x1638>
  4163ca:	lea    rsi,[rip+0x1731f]        # 42d6f0 <_IO_stdin_used@@Base+0x16f0>
  4163d1:	lea    rdi,[rip+0x23a08]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4163d8:	mov    DWORD PTR [rsp],0x178
  4163df:	or     ebx,eax
  4163e1:	call   415800 <test_json@@Base>
  4163e6:	xor    r9d,r9d
  4163e9:	xor    r8d,r8d
  4163ec:	xor    ecx,ecx
  4163ee:	lea    rdx,[rip+0x173bb]        # 42d7b0 <_IO_stdin_used@@Base+0x17b0>
  4163f5:	lea    rsi,[rip+0x1746c]        # 42d868 <_IO_stdin_used@@Base+0x1868>
  4163fc:	lea    rdi,[rip+0x239dd]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  416403:	mov    DWORD PTR [rsp],0x17b
  41640a:	or     ebx,eax
  41640c:	call   415800 <test_json@@Base>
  416411:	xor    r9d,r9d
  416414:	xor    r8d,r8d
  416417:	xor    ecx,ecx
  416419:	lea    rdx,[rip+0x17218]        # 42d638 <_IO_stdin_used@@Base+0x1638>
  416420:	lea    rsi,[rip+0x17501]        # 42d928 <_IO_stdin_used@@Base+0x1928>
  416427:	lea    rdi,[rip+0x239b2]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  41642e:	mov    DWORD PTR [rsp],0x17e
  416435:	or     ebx,eax
  416437:	call   415800 <test_json@@Base>
  41643c:	xor    r9d,r9d
  41643f:	xor    r8d,r8d
  416442:	xor    ecx,ecx
  416444:	lea    rdx,[rip+0x17365]        # 42d7b0 <_IO_stdin_used@@Base+0x17b0>
  41644b:	lea    rsi,[rip+0x1758e]        # 42d9e0 <_IO_stdin_used@@Base+0x19e0>
  416452:	lea    rdi,[rip+0x23987]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  416459:	mov    DWORD PTR [rsp],0x181
  416460:	or     ebx,eax
  416462:	call   415800 <test_json@@Base>
  416467:	or     ebx,eax
  416469:	xor    r9d,r9d
  41646c:	xor    r8d,r8d
  41646f:	mov    ecx,0x1f
  416474:	xor    edx,edx
  416476:	lea    rsi,[rip+0x17623]        # 42daa0 <_IO_stdin_used@@Base+0x1aa0>
  41647d:	lea    rdi,[rip+0x2395c]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  416484:	mov    DWORD PTR [rsp],0x184
  41648b:	call   415800 <test_json@@Base>
  416490:	xor    r9d,r9d
  416493:	xor    r8d,r8d
  416496:	mov    ecx,0x20
  41649b:	xor    edx,edx
  41649d:	lea    rsi,[rip+0x176bc]        # 42db60 <_IO_stdin_used@@Base+0x1b60>
  4164a4:	lea    rdi,[rip+0x23935]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4164ab:	mov    DWORD PTR [rsp],0x187
  4164b2:	or     ebx,eax
  4164b4:	call   415800 <test_json@@Base>
  4164b9:	xor    r9d,r9d
  4164bc:	xor    r8d,r8d
  4164bf:	xor    ecx,ecx
  4164c1:	lea    rdx,[rip+0x17758]        # 42dc20 <_IO_stdin_used@@Base+0x1c20>
  4164c8:	lea    rsi,[rip+0x17829]        # 42dcf8 <_IO_stdin_used@@Base+0x1cf8>
  4164cf:	lea    rdi,[rip+0x2390a]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  4164d6:	mov    DWORD PTR [rsp],0x196
  4164dd:	or     ebx,eax
  4164df:	call   415800 <test_json@@Base>
  4164e4:	xor    ecx,ecx
  4164e6:	lea    rdx,[rip+0x17733]        # 42dc20 <_IO_stdin_used@@Base+0x1c20>
  4164ed:	xor    r9d,r9d
  4164f0:	xor    r8d,r8d
  4164f3:	lea    rsi,[rip+0x178ce]        # 42ddc8 <_IO_stdin_used@@Base+0x1dc8>
  4164fa:	lea    rdi,[rip+0x238df]        # 439de0 <flatcc_builder_padding_base@@Base+0x93c0>
  416501:	mov    DWORD PTR [rsp],0x1a3
  416508:	or     ebx,eax
  41650a:	call   415800 <test_json@@Base>
  41650f:	pop    rdx
  416510:	pop    rcx
  416511:	or     eax,ebx
  416513:	pop    rbx
  416514:	ret    
  416515:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000416520 <mixed_type_union_tests@@Base>:
  416520:	endbr64 
  416524:	push   rbx
  416525:	xor    r9d,r9d
  416528:	xor    r8d,r8d
  41652b:	sub    rsp,0x8
  41652f:	push   0x1b0
  416534:	xor    ecx,ecx
  416536:	lea    rdx,[rip+0x1795b]        # 42de98 <_IO_stdin_used@@Base+0x1e98>
  41653d:	lea    rsi,[rip+0x1799c]        # 42dee0 <_IO_stdin_used@@Base+0x1ee0>
  416544:	lea    rdi,[rip+0x23855]        # 439da0 <flatcc_builder_padding_base@@Base+0x9380>
  41654b:	call   415800 <test_json@@Base>
  416550:	xor    r9d,r9d
  416553:	xor    r8d,r8d
  416556:	xor    ecx,ecx
  416558:	lea    rdx,[rip+0x179d1]        # 42df30 <_IO_stdin_used@@Base+0x1f30>
  41655f:	lea    rsi,[rip+0x17a42]        # 42dfa8 <_IO_stdin_used@@Base+0x1fa8>
  416566:	lea    rdi,[rip+0x23833]        # 439da0 <flatcc_builder_padding_base@@Base+0x9380>
  41656d:	mov    DWORD PTR [rsp],0x1b5
  416574:	mov    ebx,eax
  416576:	call   415800 <test_json@@Base>
  41657b:	xor    r9d,r9d
  41657e:	xor    r8d,r8d
  416581:	xor    ecx,ecx
  416583:	lea    rdx,[rip+0x179a6]        # 42df30 <_IO_stdin_used@@Base+0x1f30>
  41658a:	lea    rsi,[rip+0x17a9f]        # 42e030 <_IO_stdin_used@@Base+0x2030>
  416591:	lea    rdi,[rip+0x23808]        # 439da0 <flatcc_builder_padding_base@@Base+0x9380>
  416598:	mov    DWORD PTR [rsp],0x1ba
  41659f:	or     ebx,eax
  4165a1:	call   415800 <test_json@@Base>
  4165a6:	xor    r9d,r9d
  4165a9:	xor    r8d,r8d
  4165ac:	xor    ecx,ecx
  4165ae:	lea    rdx,[rip+0x17b13]        # 42e0c8 <_IO_stdin_used@@Base+0x20c8>
  4165b5:	lea    rsi,[rip+0x17bcc]        # 42e188 <_IO_stdin_used@@Base+0x2188>
  4165bc:	lea    rdi,[rip+0x237dd]        # 439da0 <flatcc_builder_padding_base@@Base+0x9380>
  4165c3:	mov    DWORD PTR [rsp],0x1c1
  4165ca:	or     ebx,eax
  4165cc:	call   415800 <test_json@@Base>
  4165d1:	xor    r9d,r9d
  4165d4:	xor    r8d,r8d
  4165d7:	xor    ecx,ecx
  4165d9:	lea    rdx,[rip+0x17c88]        # 42e268 <_IO_stdin_used@@Base+0x2268>
  4165e0:	lea    rsi,[rip+0x17d61]        # 42e348 <_IO_stdin_used@@Base+0x2348>
  4165e7:	lea    rdi,[rip+0x237b2]        # 439da0 <flatcc_builder_padding_base@@Base+0x9380>
  4165ee:	mov    DWORD PTR [rsp],0x1ca
  4165f5:	or     ebx,eax
  4165f7:	call   415800 <test_json@@Base>
  4165fc:	xor    r9d,r9d
  4165ff:	xor    r8d,r8d
  416602:	xor    ecx,ecx
  416604:	lea    rdx,[rip+0x17e45]        # 42e450 <_IO_stdin_used@@Base+0x2450>
  41660b:	lea    rsi,[rip+0x17f86]        # 42e598 <_IO_stdin_used@@Base+0x2598>
  416612:	lea    rdi,[rip+0x23787]        # 439da0 <flatcc_builder_padding_base@@Base+0x9380>
  416619:	mov    DWORD PTR [rsp],0x1d5
  416620:	or     ebx,eax
  416622:	call   415800 <test_json@@Base>
  416627:	or     ebx,eax
  416629:	xor    r9d,r9d
  41662c:	xor    r8d,r8d
  41662f:	lea    rdx,[rip+0x178fa]        # 42df30 <_IO_stdin_used@@Base+0x1f30>
  416636:	xor    ecx,ecx
  416638:	lea    rsi,[rip+0x180e1]        # 42e720 <_IO_stdin_used@@Base+0x2720>
  41663f:	lea    rdi,[rip+0x2375a]        # 439da0 <flatcc_builder_padding_base@@Base+0x9380>
  416646:	mov    DWORD PTR [rsp],0x1da
  41664d:	call   415800 <test_json@@Base>
  416652:	pop    rdx
  416653:	pop    rcx
  416654:	or     eax,ebx
  416656:	pop    rbx
  416657:	ret    
  416658:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000416660 <union_vector_tests@@Base>:
  416660:	endbr64 
  416664:	push   rbx
  416665:	xor    r9d,r9d
  416668:	xor    r8d,r8d
  41666b:	sub    rsp,0x8
  41666f:	push   0x1e5
  416674:	xor    ecx,ecx
  416676:	lea    rdx,[rip+0x18133]        # 42e7b0 <_IO_stdin_used@@Base+0x27b0>
  41667d:	lea    rsi,[rip+0x18164]        # 42e7e8 <_IO_stdin_used@@Base+0x27e8>
  416684:	lea    rdi,[rip+0x23735]        # 439dc0 <flatcc_builder_padding_base@@Base+0x93a0>
  41668b:	call   415800 <test_json@@Base>
  416690:	xor    r9d,r9d
  416693:	xor    r8d,r8d
  416696:	xor    ecx,ecx
  416698:	lea    rdx,[rip+0x18189]        # 42e828 <_IO_stdin_used@@Base+0x2828>
  41669f:	lea    rsi,[rip+0x181b2]        # 42e858 <_IO_stdin_used@@Base+0x2858>
  4166a6:	lea    rdi,[rip+0x23713]        # 439dc0 <flatcc_builder_padding_base@@Base+0x93a0>
  4166ad:	mov    DWORD PTR [rsp],0x1e8
  4166b4:	mov    ebx,eax
  4166b6:	call   415800 <test_json@@Base>
  4166bb:	xor    r9d,r9d
  4166be:	xor    r8d,r8d
  4166c1:	xor    ecx,ecx
  4166c3:	lea    rdx,[rip+0x181c6]        # 42e890 <_IO_stdin_used@@Base+0x2890>
  4166ca:	lea    rsi,[rip+0x18207]        # 42e8d8 <_IO_stdin_used@@Base+0x28d8>
  4166d1:	lea    rdi,[rip+0x236e8]        # 439dc0 <flatcc_builder_padding_base@@Base+0x93a0>
  4166d8:	mov    DWORD PTR [rsp],0x1eb
  4166df:	or     ebx,eax
  4166e1:	call   415800 <test_json@@Base>
  4166e6:	xor    r9d,r9d
  4166e9:	xor    r8d,r8d
  4166ec:	xor    ecx,ecx
  4166ee:	lea    rdx,[rip+0x18233]        # 42e928 <_IO_stdin_used@@Base+0x2928>
  4166f5:	lea    rsi,[rip+0x1829c]        # 42e998 <_IO_stdin_used@@Base+0x2998>
  4166fc:	lea    rdi,[rip+0x236bd]        # 439dc0 <flatcc_builder_padding_base@@Base+0x93a0>
  416703:	mov    DWORD PTR [rsp],0x1ee
  41670a:	or     ebx,eax
  41670c:	call   415800 <test_json@@Base>
  416711:	xor    r9d,r9d
  416714:	xor    r8d,r8d
  416717:	xor    ecx,ecx
  416719:	lea    rdx,[rip+0x18090]        # 42e7b0 <_IO_stdin_used@@Base+0x27b0>
  416720:	lea    rsi,[rip+0x182f1]        # 42ea18 <_IO_stdin_used@@Base+0x2a18>
  416727:	lea    rdi,[rip+0x23692]        # 439dc0 <flatcc_builder_padding_base@@Base+0x93a0>
  41672e:	mov    DWORD PTR [rsp],0x1f1
  416735:	or     ebx,eax
  416737:	call   415800 <test_json@@Base>
  41673c:	xor    ecx,ecx
  41673e:	lea    rdx,[rip+0x18313]        # 42ea58 <_IO_stdin_used@@Base+0x2a58>
  416745:	xor    r9d,r9d
  416748:	xor    r8d,r8d
  41674b:	lea    rsi,[rip+0x18366]        # 42eab8 <_IO_stdin_used@@Base+0x2ab8>
  416752:	lea    rdi,[rip+0x23667]        # 439dc0 <flatcc_builder_padding_base@@Base+0x93a0>
  416759:	mov    DWORD PTR [rsp],0x1f4
  416760:	or     ebx,eax
  416762:	call   415800 <test_json@@Base>
  416767:	pop    rdx
  416768:	pop    rcx
  416769:	or     eax,ebx
  41676b:	pop    rbx
  41676c:	ret    
  41676d:	nop    DWORD PTR [rax]
  416770:	push   rbp
  416771:	mov    ebp,edx
  416773:	mov    r8d,0x1
  416779:	push   rbx
  41677a:	mov    rbx,rdi
  41677d:	mov    ecx,0x1
  416782:	sub    rsp,0x8
  416786:	mov    edx,DWORD PTR [rdi+0x28]
  416789:	add    rdx,rsi
  41678c:	lea    rsi,[rdi+0x68]
  416790:	mov    rdi,QWORD PTR [rdi+0x40]
  416794:	call   QWORD PTR [rbx+0x50]
  416797:	test   eax,eax
  416799:	jne    4167c8 <union_vector_tests@@Base+0x168>
  41679b:	mov    edx,DWORD PTR [rbx+0x28]
  41679e:	mov    rcx,rdx
  4167a1:	add    rdx,QWORD PTR [rbx+0x68]
  4167a5:	mov    QWORD PTR [rbx+0x18],rdx
  4167a9:	mov    edx,DWORD PTR [rbx+0x70]
  4167ac:	sub    edx,ecx
  4167ae:	cmp    ebp,edx
  4167b0:	cmovb  edx,ebp
  4167b3:	mov    DWORD PTR [rbx+0x24],edx
  4167b6:	mov    rdx,QWORD PTR [rbx+0x30]
  4167ba:	mov    DWORD PTR [rdx+0x4],ebp
  4167bd:	add    rsp,0x8
  4167c1:	pop    rbx
  4167c2:	pop    rbp
  4167c3:	ret    
  4167c4:	nop    DWORD PTR [rax+0x0]
  4167c8:	mov    eax,0xffffffff
  4167cd:	jmp    4167bd <union_vector_tests@@Base+0x15d>
  4167cf:	nop

00000000004167d0 <flatcc_builder_default_alloc@@Base>:
  4167d0:	endbr64 
  4167d4:	push   r13
  4167d6:	push   r12
  4167d8:	push   rbp
  4167d9:	mov    rbp,rsi
  4167dc:	push   rbx
  4167dd:	sub    rsp,0x18
  4167e1:	test   rdx,rdx
  4167e4:	je     4168a8 <flatcc_builder_default_alloc@@Base+0xd8>
  4167ea:	mov    r13d,ecx
  4167ed:	cmp    r8d,0x4
  4167f1:	je     4168e0 <flatcc_builder_default_alloc@@Base+0x110>
  4167f7:	jle    416870 <flatcc_builder_default_alloc@@Base+0xa0>
  4167f9:	mov    rbx,rdx
  4167fc:	cmp    r8d,0x5
  416800:	je     416828 <flatcc_builder_default_alloc@@Base+0x58>
  416802:	cmp    r8d,0x7
  416806:	mov    ebx,0x40
  41680b:	mov    eax,0x20
  416810:	cmovne rbx,rax
  416814:	cmp    rbx,rdx
  416817:	jae    416828 <flatcc_builder_default_alloc@@Base+0x58>
  416819:	nop    DWORD PTR [rax+0x0]
  416820:	add    rbx,rbx
  416823:	cmp    rdx,rbx
  416826:	ja     416820 <flatcc_builder_default_alloc@@Base+0x50>
  416828:	mov    rax,QWORD PTR [rbp+0x8]
  41682c:	cmp    rdx,rax
  41682f:	ja     41683e <flatcc_builder_default_alloc@@Base+0x6e>
  416831:	shr    rax,1
  416834:	mov    rdx,rax
  416837:	xor    eax,eax
  416839:	cmp    rdx,rbx
  41683c:	jae    416865 <flatcc_builder_default_alloc@@Base+0x95>
  41683e:	mov    rdi,QWORD PTR [rbp+0x0]
  416842:	mov    rsi,rbx
  416845:	call   406230 <realloc@plt>
  41684a:	mov    r12,rax
  41684d:	test   rax,rax
  416850:	je     4168ea <flatcc_builder_default_alloc@@Base+0x11a>
  416856:	test   r13d,r13d
  416859:	jne    416888 <flatcc_builder_default_alloc@@Base+0xb8>
  41685b:	mov    QWORD PTR [rbp+0x0],r12
  41685f:	mov    QWORD PTR [rbp+0x8],rbx
  416863:	xor    eax,eax
  416865:	add    rsp,0x18
  416869:	pop    rbx
  41686a:	pop    rbp
  41686b:	pop    r12
  41686d:	pop    r13
  41686f:	ret    
  416870:	cmp    r8d,0x1
  416874:	mov    ebx,0x100
  416879:	mov    eax,0x20
  41687e:	cmovne rbx,rax
  416882:	jmp    416814 <flatcc_builder_default_alloc@@Base+0x44>
  416884:	nop    DWORD PTR [rax+0x0]
  416888:	mov    rax,QWORD PTR [rbp+0x8]
  41688c:	cmp    rax,rbx
  41688f:	jae    41685b <flatcc_builder_default_alloc@@Base+0x8b>
  416891:	mov    rdx,rbx
  416894:	sub    rdx,rax
  416897:	lea    rdi,[r12+rax*1]
  41689b:	xor    esi,esi
  41689d:	call   4061c0 <memset@plt>
  4168a2:	jmp    41685b <flatcc_builder_default_alloc@@Base+0x8b>
  4168a4:	nop    DWORD PTR [rax+0x0]
  4168a8:	mov    rdi,QWORD PTR [rsi]
  4168ab:	xor    eax,eax
  4168ad:	test   rdi,rdi
  4168b0:	je     416865 <flatcc_builder_default_alloc@@Base+0x95>
  4168b2:	mov    DWORD PTR [rsp+0xc],eax
  4168b6:	call   406160 <free@plt>
  4168bb:	mov    QWORD PTR [rbp+0x0],0x0
  4168c3:	mov    QWORD PTR [rbp+0x8],0x0
  4168cb:	mov    eax,DWORD PTR [rsp+0xc]
  4168cf:	add    rsp,0x18
  4168d3:	pop    rbx
  4168d4:	pop    rbp
  4168d5:	pop    r12
  4168d7:	pop    r13
  4168d9:	ret    
  4168da:	nop    WORD PTR [rax+rax*1+0x0]
  4168e0:	mov    ebx,0x120
  4168e5:	jmp    416814 <flatcc_builder_default_alloc@@Base+0x44>
  4168ea:	mov    eax,0xffffffff
  4168ef:	jmp    416865 <flatcc_builder_default_alloc@@Base+0x95>
  4168f4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4168ff:	nop
  416900:	push   rax
  416901:	pop    rax
  416902:	lea    rcx,[rip+0x1a0e7]        # 4309f0 <_IO_stdin_used@@Base+0x49f0>
  416909:	mov    edx,0x134
  41690e:	lea    rsi,[rip+0x1961b]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  416915:	lea    rdi,[rip+0x199ab]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  41691c:	sub    rsp,0x8
  416920:	call   4061b0 <__assert_fail@plt>
  416925:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  416930:	push   rax
  416931:	pop    rax
  416932:	lea    rcx,[rip+0x1a047]        # 430980 <_IO_stdin_used@@Base+0x4980>
  416939:	mov    edx,0x2a5
  41693e:	lea    rsi,[rip+0x195eb]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  416945:	lea    rdi,[rip+0x1997b]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  41694c:	sub    rsp,0x8
  416950:	call   4061b0 <__assert_fail@plt>
  416955:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  416960:	push   rbx
  416961:	mov    r9,rdi
  416964:	sub    rsp,0xa0
  41696b:	mov    rbx,QWORD PTR fs:0x28
  416974:	mov    QWORD PTR [rsp+0x98],rbx
  41697c:	xor    ebx,ebx
  41697e:	test   dx,dx
  416981:	je     4169e0 <flatcc_builder_default_alloc@@Base+0x210>
  416983:	mov    eax,edx
  416985:	movzx  edx,dx
  416988:	movzx  edi,WORD PTR [rsi]
  41698b:	cmp    di,0x3
  41698f:	ja     41699e <flatcc_builder_default_alloc@@Base+0x1ce>
  416991:	mov    edi,0x4
  416996:	mov    WORD PTR [rsi],di
  416999:	mov    edi,0x4
  41699e:	cmp    ax,di
  4169a1:	jbe    4169a6 <flatcc_builder_default_alloc@@Base+0x1d6>
  4169a3:	mov    WORD PTR [rsi],ax
  4169a6:	test   ecx,ecx
  4169a8:	jne    4169b7 <flatcc_builder_default_alloc@@Base+0x1e7>
  4169aa:	mov    ebx,DWORD PTR [r9+0xf4]
  4169b1:	dec    edx
  4169b3:	and    edx,ebx
  4169b5:	jne    416a00 <flatcc_builder_default_alloc@@Base+0x230>
  4169b7:	xor    eax,eax
  4169b9:	mov    rbx,QWORD PTR [rsp+0x98]
  4169c1:	xor    rbx,QWORD PTR fs:0x28
  4169ca:	jne    416a6d <flatcc_builder_default_alloc@@Base+0x29d>
  4169d0:	add    rsp,0xa0
  4169d7:	pop    rbx
  4169d8:	ret    
  4169d9:	nop    DWORD PTR [rax+0x0]
  4169e0:	movzx  eax,WORD PTR [rdi+0xec]
  4169e7:	movzx  edx,ax
  4169ea:	test   ax,ax
  4169ed:	jne    416988 <flatcc_builder_default_alloc@@Base+0x1b8>
  4169ef:	mov    edx,0x1
  4169f4:	mov    eax,0x1
  4169f9:	jmp    416988 <flatcc_builder_default_alloc@@Base+0x1b8>
  4169fb:	nop    DWORD PTR [rax+rax*1+0x0]
  416a00:	mov    rax,0x430a20
  416a07:	movsxd r8,edx
  416a0a:	add    edx,ebx
  416a0c:	mov    QWORD PTR [rsp],r8
  416a10:	mov    QWORD PTR [rsp+0x10],rax
  416a15:	mov    QWORD PTR [rsp+0x18],r8
  416a1a:	mov    DWORD PTR [rsp+0x8],0x1
  416a22:	mov    DWORD PTR [r9+0xf4],edx
  416a29:	cmp    ebx,edx
  416a2b:	jg     416a77 <flatcc_builder_default_alloc@@Base+0x2a7>
  416a2d:	mov    rdi,QWORD PTR [r9+0x38]
  416a31:	lea    rsi,[rsp+0x10]
  416a36:	mov    ecx,ebx
  416a38:	mov    edx,0x1
  416a3d:	call   QWORD PTR [r9+0x48]
  416a41:	test   eax,eax
  416a43:	jne    416a72 <flatcc_builder_default_alloc@@Base+0x2a2>
  416a45:	cmp    ebx,0xffffffff
  416a48:	jne    4169b7 <flatcc_builder_default_alloc@@Base+0x1e7>
  416a4e:	lea    rcx,[rip+0x19f3b]        # 430990 <_IO_stdin_used@@Base+0x4990>
  416a55:	mov    edx,0x2be
  416a5a:	lea    rsi,[rip+0x194cf]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  416a61:	lea    rdi,[rip+0x1985f]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  416a68:	call   4061b0 <__assert_fail@plt>
  416a6d:	call   4061a0 <__stack_chk_fail@plt>
  416a72:	call   416930 <flatcc_builder_default_alloc@@Base+0x160>
  416a77:	lea    rcx,[rip+0x19f02]        # 430980 <_IO_stdin_used@@Base+0x4980>
  416a7e:	mov    edx,0x2a1
  416a83:	lea    rsi,[rip+0x194a6]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  416a8a:	lea    rdi,[rip+0x19836]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  416a91:	call   4061b0 <__assert_fail@plt>
  416a96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  416aa0:	push   rax
  416aa1:	pop    rax
  416aa2:	lea    rcx,[rip+0x19ec7]        # 430970 <_IO_stdin_used@@Base+0x4970>
  416aa9:	mov    edx,0x28b
  416aae:	lea    rsi,[rip+0x1947b]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  416ab5:	lea    rdi,[rip+0x1980b]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  416abc:	sub    rsp,0x8
  416ac0:	call   4061b0 <__assert_fail@plt>
  416ac5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  416ad0:	push   rax
  416ad1:	pop    rax
  416ad2:	lea    rcx,[rip+0x19df7]        # 4308d0 <_IO_stdin_used@@Base+0x48d0>
  416ad9:	mov    edx,0x37c
  416ade:	lea    rsi,[rip+0x1944b]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  416ae5:	lea    rdi,[rip+0x197b4]        # 4302a0 <_IO_stdin_used@@Base+0x42a0>
  416aec:	sub    rsp,0x8
  416af0:	call   4061b0 <__assert_fail@plt>
  416af5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  416b00:	push   r12
  416b02:	mov    r12d,esi
  416b05:	push   rbp
  416b06:	push   rbx
  416b07:	mov    rbx,rdi
  416b0a:	movsxd rax,DWORD PTR [rdi+0x104]
  416b11:	lea    edx,[rax+0x1]
  416b14:	mov    DWORD PTR [rdi+0x104],edx
  416b1a:	cmp    edx,DWORD PTR [rdi+0x108]
  416b20:	jle    416bf0 <flatcc_builder_default_alloc@@Base+0x420>
  416b26:	mov    ecx,DWORD PTR [rdi+0x120]
  416b2c:	cmp    edx,ecx
  416b2e:	jle    416b38 <flatcc_builder_default_alloc@@Base+0x368>
  416b30:	test   ecx,ecx
  416b32:	jg     416c08 <flatcc_builder_default_alloc@@Base+0x438>
  416b38:	lea    rcx,[rax+rax*8]
  416b3c:	lea    rbp,[rcx*4+0x0]
  416b44:	lea    rdx,[rbp+0x24]
  416b48:	cmp    rdx,QWORD PTR [rbx+0xa0]
  416b4f:	jbe    416b6f <flatcc_builder_default_alloc@@Base+0x39f>
  416b51:	mov    rdi,QWORD PTR [rbx+0x40]
  416b55:	xor    ecx,ecx
  416b57:	lea    rsi,[rbx+0x98]
  416b5e:	mov    r8d,0x4
  416b64:	call   QWORD PTR [rbx+0x50]
  416b67:	test   eax,eax
  416b69:	jne    416c0f <flatcc_builder_default_alloc@@Base+0x43f>
  416b6f:	mov    rcx,rbp
  416b72:	add    rcx,QWORD PTR [rbx+0x98]
  416b79:	mov    QWORD PTR [rbx+0x30],rcx
  416b7d:	je     416c08 <flatcc_builder_default_alloc@@Base+0x438>
  416b83:	movabs rdx,0xe38e38e38e38e38f
  416b8d:	mov    rax,rdx
  416b90:	mul    QWORD PTR [rbx+0xa0]
  416b97:	mov    eax,DWORD PTR [rbx+0x120]
  416b9d:	shr    rdx,0x5
  416ba1:	mov    DWORD PTR [rbx+0x108],edx
  416ba7:	cmp    eax,edx
  416ba9:	jge    416bb0 <flatcc_builder_default_alloc@@Base+0x3e0>
  416bab:	test   eax,eax
  416bad:	jg     416c00 <flatcc_builder_default_alloc@@Base+0x430>
  416baf:	nop
  416bb0:	movzx  eax,WORD PTR [rbx+0xea]
  416bb7:	mov    edx,DWORD PTR [rbx+0x20]
  416bba:	mov    WORD PTR [rcx+0xc],ax
  416bbe:	mov    eax,DWORD PTR [rbx+0x28]
  416bc1:	mov    DWORD PTR [rcx+0x8],edx
  416bc4:	mov    WORD PTR [rbx+0xea],r12w
  416bcc:	mov    DWORD PTR [rcx],eax
  416bce:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  416bd5:	lea    eax,[rdx+rax*1+0x7]
  416bd9:	mov    DWORD PTR [rbx+0x20],0x0
  416be0:	and    eax,0xfffffff8
  416be3:	mov    DWORD PTR [rbx+0x28],eax
  416be6:	xor    eax,eax
  416be8:	pop    rbx
  416be9:	pop    rbp
  416bea:	pop    r12
  416bec:	ret    
  416bed:	nop    DWORD PTR [rax]
  416bf0:	mov    rax,QWORD PTR [rdi+0x30]
  416bf4:	lea    rcx,[rax+0x24]
  416bf8:	mov    QWORD PTR [rdi+0x30],rcx
  416bfc:	jmp    416bb0 <flatcc_builder_default_alloc@@Base+0x3e0>
  416bfe:	xchg   ax,ax
  416c00:	mov    DWORD PTR [rbx+0x108],eax
  416c06:	jmp    416bb0 <flatcc_builder_default_alloc@@Base+0x3e0>
  416c08:	mov    eax,0xffffffff
  416c0d:	jmp    416be8 <flatcc_builder_default_alloc@@Base+0x418>
  416c0f:	call   416900 <flatcc_builder_default_alloc@@Base+0x130>
  416c14:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  416c1f:	nop
  416c20:	push   rbp
  416c21:	push   rbx
  416c22:	sub    rsp,0xb8
  416c29:	mov    rax,QWORD PTR fs:0x28
  416c32:	mov    QWORD PTR [rsp+0xa8],rax
  416c3a:	xor    eax,eax
  416c3c:	cmp    edx,0x3fffffff
  416c42:	ja     416dd8 <flatcc_builder_default_alloc@@Base+0x608>
  416c48:	cmp    WORD PTR [rdi+0xe8],0x3
  416c50:	mov    rbx,rdi
  416c53:	ja     416c61 <flatcc_builder_default_alloc@@Base+0x491>
  416c55:	mov    eax,0x4
  416c5a:	mov    WORD PTR [rdi+0xe8],ax
  416c61:	mov    edi,DWORD PTR [rbx+0xf0]
  416c67:	mov    r9d,edx
  416c6a:	mov    eax,edi
  416c6c:	lea    r8,[rsp+0xc]
  416c71:	and    eax,0x3
  416c74:	shl    r9d,0x2
  416c78:	mov    QWORD PTR [rsp+0x20],r8
  416c7d:	mov    DWORD PTR [rsp+0xc],edx
  416c81:	mov    QWORD PTR [rsp+0x10],0x4
  416c8a:	mov    QWORD PTR [rsp+0x28],0x4
  416c93:	mov    DWORD PTR [rsp+0x18],0x1
  416c9b:	mov    r8d,0x4
  416ca1:	je     416cc1 <flatcc_builder_default_alloc@@Base+0x4f1>
  416ca3:	mov    r9d,r9d
  416ca6:	lea    r8,[r9+0x4]
  416caa:	mov    QWORD PTR [rsp+0x10],r8
  416caf:	mov    QWORD PTR [rsp+0x30],rsi
  416cb4:	mov    QWORD PTR [rsp+0x38],r9
  416cb9:	mov    DWORD PTR [rsp+0x18],0x2
  416cc1:	test   eax,eax
  416cc3:	jne    416da0 <flatcc_builder_default_alloc@@Base+0x5d0>
  416cc9:	mov    r10d,r8d
  416ccc:	test   edx,edx
  416cce:	je     416d46 <flatcc_builder_default_alloc@@Base+0x576>
  416cd0:	sub    r10d,edi
  416cd3:	lea    r9d,[rdx-0x1]
  416cd7:	xor    eax,eax
  416cd9:	sub    r10d,0x4
  416cdd:	jmp    416d08 <flatcc_builder_default_alloc@@Base+0x538>
  416cdf:	nop
  416ce0:	mov    edi,eax
  416ce2:	neg    edi
  416ce4:	lea    edi,[r10+rdi*4]
  416ce8:	add    edx,edi
  416cea:	mov    DWORD PTR [rsi+rax*4],edx
  416ced:	test   rcx,rcx
  416cf0:	je     416cfc <flatcc_builder_default_alloc@@Base+0x52c>
  416cf2:	cmp    BYTE PTR [rcx+rax*1],0x0
  416cf6:	je     416dfb <flatcc_builder_default_alloc@@Base+0x62b>
  416cfc:	lea    rdx,[rax+0x1]
  416d00:	cmp    rax,r9
  416d03:	je     416d40 <flatcc_builder_default_alloc@@Base+0x570>
  416d05:	mov    rax,rdx
  416d08:	mov    edx,DWORD PTR [rsi+rax*4]
  416d0b:	test   edx,edx
  416d0d:	jne    416ce0 <flatcc_builder_default_alloc@@Base+0x510>
  416d0f:	test   rcx,rcx
  416d12:	je     416ddc <flatcc_builder_default_alloc@@Base+0x60c>
  416d18:	cmp    BYTE PTR [rcx+rax*1],0x0
  416d1c:	je     416cfc <flatcc_builder_default_alloc@@Base+0x52c>
  416d1e:	lea    rcx,[rip+0x198cb]        # 4305f0 <_IO_stdin_used@@Base+0x45f0>
  416d25:	mov    edx,0x5b5
  416d2a:	lea    rsi,[rip+0x191ff]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  416d31:	lea    rdi,[rip+0x19591]        # 4302c9 <_IO_stdin_used@@Base+0x42c9>
  416d38:	call   4061b0 <__assert_fail@plt>
  416d3d:	nop    DWORD PTR [rax]
  416d40:	mov    edi,DWORD PTR [rbx+0xf0]
  416d46:	mov    ebp,edi
  416d48:	sub    ebp,r8d
  416d4b:	cmp    ebp,edi
  416d4d:	jge    416e1a <flatcc_builder_default_alloc@@Base+0x64a>
  416d53:	mov    rdi,QWORD PTR [rbx+0x38]
  416d57:	mov    edx,DWORD PTR [rsp+0x18]
  416d5b:	lea    rsi,[rsp+0x20]
  416d60:	mov    ecx,ebp
  416d62:	call   QWORD PTR [rbx+0x48]
  416d65:	test   eax,eax
  416d67:	jne    416e3e <flatcc_builder_default_alloc@@Base+0x66e>
  416d6d:	mov    DWORD PTR [rbx+0xf0],ebp
  416d73:	mov    rbx,QWORD PTR [rsp+0xa8]
  416d7b:	xor    rbx,QWORD PTR fs:0x28
  416d84:	mov    eax,ebp
  416d86:	jne    416e39 <flatcc_builder_default_alloc@@Base+0x669>
  416d8c:	add    rsp,0xb8
  416d93:	pop    rbx
  416d94:	pop    rbp
  416d95:	ret    
  416d96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  416da0:	movsxd r10,DWORD PTR [rsp+0x18]
  416da5:	mov    r11,0x430a20
  416dac:	mov    r9,r10
  416daf:	add    r8,rax
  416db2:	shl    r10,0x4
  416db6:	inc    r9d
  416db9:	mov    QWORD PTR [rsp+0x10],r8
  416dbe:	mov    QWORD PTR [rsp+r10*1+0x20],r11
  416dc3:	mov    QWORD PTR [rsp+r10*1+0x28],rax
  416dc8:	mov    DWORD PTR [rsp+0x18],r9d
  416dcd:	jmp    416cc9 <flatcc_builder_default_alloc@@Base+0x4f9>
  416dd2:	nop    WORD PTR [rax+rax*1+0x0]
  416dd8:	xor    ebp,ebp
  416dda:	jmp    416d73 <flatcc_builder_default_alloc@@Base+0x5a3>
  416ddc:	lea    rcx,[rip+0x1980d]        # 4305f0 <_IO_stdin_used@@Base+0x45f0>
  416de3:	mov    edx,0x5b7
  416de8:	lea    rsi,[rip+0x19141]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  416def:	lea    rdi,[rip+0x194d1]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  416df6:	call   4061b0 <__assert_fail@plt>
  416dfb:	lea    rcx,[rip+0x197ee]        # 4305f0 <_IO_stdin_used@@Base+0x45f0>
  416e02:	mov    edx,0x5b1
  416e07:	lea    rsi,[rip+0x19122]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  416e0e:	lea    rdi,[rip+0x194a6]        # 4302bb <_IO_stdin_used@@Base+0x42bb>
  416e15:	call   4061b0 <__assert_fail@plt>
  416e1a:	lea    rcx,[rip+0x19b4f]        # 430970 <_IO_stdin_used@@Base+0x4970>
  416e21:	mov    edx,0x287
  416e26:	lea    rsi,[rip+0x19103]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  416e2d:	lea    rdi,[rip+0x19493]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  416e34:	call   4061b0 <__assert_fail@plt>
  416e39:	call   4061a0 <__stack_chk_fail@plt>
  416e3e:	call   416aa0 <flatcc_builder_default_alloc@@Base+0x2d0>
  416e43:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  416e4e:	xchg   ax,ax

0000000000416e50 <flatcc_builder_flush_vtable_cache@@Base>:
  416e50:	endbr64 
  416e54:	cmp    QWORD PTR [rdi+0xd8],0x0
  416e5c:	jne    416e60 <flatcc_builder_flush_vtable_cache@@Base+0x10>
  416e5e:	ret    
  416e5f:	nop
  416e60:	push   rbx
  416e61:	mov    rbx,rdi
  416e64:	xor    esi,esi
  416e66:	mov    rdx,QWORD PTR [rbx+0xb0]
  416e6d:	mov    rdi,QWORD PTR [rdi+0xa8]
  416e74:	call   4061c0 <memset@plt>
  416e79:	movabs rax,0x1000000000
  416e83:	mov    QWORD PTR [rbx+0xe0],rax
  416e8a:	pop    rbx
  416e8b:	ret    
  416e8c:	nop    DWORD PTR [rax+0x0]

0000000000416e90 <flatcc_builder_custom_init@@Base>:
  416e90:	endbr64 
  416e94:	mov    QWORD PTR [rdi],0x0
  416e9b:	mov    QWORD PTR [rdi+0x180],0x0
  416ea6:	mov    r9,rdi
  416ea9:	lea    rdi,[rdi+0x8]
  416ead:	and    rdi,0xfffffffffffffff8
  416eb1:	mov    r10,rcx
  416eb4:	mov    rcx,r9
  416eb7:	sub    rcx,rdi
  416eba:	add    ecx,0x188
  416ec0:	shr    ecx,0x3
  416ec3:	xor    eax,eax
  416ec5:	rep stos QWORD PTR es:[rdi],rax
  416ec8:	test   rsi,rsi
  416ecb:	je     416ee8 <flatcc_builder_custom_init@@Base+0x58>
  416ecd:	test   r10,r10
  416ed0:	je     416f06 <flatcc_builder_custom_init@@Base+0x76>
  416ed2:	mov    QWORD PTR [r9+0x40],r8
  416ed6:	mov    QWORD PTR [r9+0x50],r10
  416eda:	mov    QWORD PTR [r9+0x38],rdx
  416ede:	mov    QWORD PTR [r9+0x48],rsi
  416ee2:	xor    eax,eax
  416ee4:	ret    
  416ee5:	nop    DWORD PTR [rax]
  416ee8:	mov    DWORD PTR [r9+0x128],0x1
  416ef3:	lea    rdx,[r9+0x130]
  416efa:	mov    rsi,0x41a940
  416f01:	test   r10,r10
  416f04:	jne    416ed2 <flatcc_builder_custom_init@@Base+0x42>
  416f06:	mov    r10,0x4167d0
  416f0d:	jmp    416ed2 <flatcc_builder_custom_init@@Base+0x42>
  416f0f:	nop

0000000000416f10 <flatcc_builder_init@@Base>:
  416f10:	endbr64 
  416f14:	xor    r8d,r8d
  416f17:	xor    ecx,ecx
  416f19:	xor    edx,edx
  416f1b:	xor    esi,esi
  416f1d:	jmp    416e90 <flatcc_builder_custom_init@@Base>
  416f22:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  416f2d:	nop    DWORD PTR [rax]

0000000000416f30 <flatcc_builder_custom_reset@@Base>:
  416f30:	endbr64 
  416f34:	push   r14
  416f36:	mov    r14d,esi
  416f39:	push   r13
  416f3b:	mov    r13d,edx
  416f3e:	push   r12
  416f40:	mov    r12,rdi
  416f43:	push   rbp
  416f44:	xor    ebp,ebp
  416f46:	push   rbx
  416f47:	lea    rbx,[rdi+0x58]
  416f4b:	jmp    416f95 <flatcc_builder_custom_reset@@Base+0x65>
  416f4d:	nop    DWORD PTR [rax]
  416f50:	cmp    ebp,0x5
  416f53:	je     416f7f <flatcc_builder_custom_reset@@Base+0x4f>
  416f55:	test   r13d,r13d
  416f58:	je     416f7f <flatcc_builder_custom_reset@@Base+0x4f>
  416f5a:	mov    rdi,QWORD PTR [r12+0x40]
  416f5f:	mov    r8d,ebp
  416f62:	mov    ecx,0x1
  416f67:	mov    edx,0x1
  416f6c:	mov    rsi,rbx
  416f6f:	call   QWORD PTR [r12+0x50]
  416f74:	test   eax,eax
  416f76:	jne    4170b0 <flatcc_builder_custom_reset@@Base+0x180>
  416f7c:	mov    rdi,QWORD PTR [rbx]
  416f7f:	mov    rdx,QWORD PTR [rbx+0x8]
  416f83:	xor    esi,esi
  416f85:	call   4061c0 <memset@plt>
  416f8a:	inc    ebp
  416f8c:	add    rbx,0x10
  416f90:	cmp    ebp,0x8
  416f93:	je     416fc8 <flatcc_builder_custom_reset@@Base+0x98>
  416f95:	mov    rdi,QWORD PTR [rbx]
  416f98:	test   rdi,rdi
  416f9b:	jne    416f50 <flatcc_builder_custom_reset@@Base+0x20>
  416f9d:	cmp    QWORD PTR [rbx+0x8],0x0
  416fa2:	je     416f8a <flatcc_builder_custom_reset@@Base+0x5a>
  416fa4:	lea    rcx,[rip+0x19a55]        # 430a00 <_IO_stdin_used@@Base+0x4a00>
  416fab:	mov    edx,0x1b2
  416fb0:	lea    rsi,[rip+0x18f79]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  416fb7:	lea    rdi,[rip+0x19319]        # 4302d7 <_IO_stdin_used@@Base+0x42d7>
  416fbe:	call   4061b0 <__assert_fail@plt>
  416fc3:	nop    DWORD PTR [rax+rax*1+0x0]
  416fc8:	mov    edx,DWORD PTR [r12+0xe4]
  416fd0:	mov    DWORD PTR [r12+0xe0],0x0
  416fdc:	test   edx,edx
  416fde:	je     416fec <flatcc_builder_custom_reset@@Base+0xbc>
  416fe0:	mov    DWORD PTR [r12+0xe4],0x10
  416fec:	xor    eax,eax
  416fee:	mov    WORD PTR [r12+0xe8],ax
  416ff7:	mov    rax,QWORD PTR [r12+0x68]
  416ffc:	mov    QWORD PTR [r12+0xf0],0x0
  417008:	mov    QWORD PTR [r12+0x18],rax
  41700d:	mov    rax,QWORD PTR [r12+0x88]
  417015:	mov    QWORD PTR [r12+0x20],0x0
  41701e:	mov    QWORD PTR [r12],rax
  417022:	mov    rax,QWORD PTR [r12+0x58]
  417027:	mov    QWORD PTR [r12+0xfc],0x0
  417033:	mov    QWORD PTR [r12+0x104],0x0
  41703f:	mov    QWORD PTR [r12+0x8],rax
  417044:	mov    QWORD PTR [r12+0x30],0x0
  41704d:	test   r14d,r14d
  417050:	jne    417070 <flatcc_builder_custom_reset@@Base+0x140>
  417052:	mov    eax,DWORD PTR [r12+0x128]
  41705a:	test   eax,eax
  41705c:	jne    417094 <flatcc_builder_custom_reset@@Base+0x164>
  41705e:	pop    rbx
  41705f:	pop    rbp
  417060:	pop    r12
  417062:	pop    r13
  417064:	pop    r14
  417066:	ret    
  417067:	nop    WORD PTR [rax+rax*1+0x0]
  417070:	mov    eax,DWORD PTR [r12+0x128]
  417078:	mov    QWORD PTR [r12+0x118],0x0
  417084:	mov    QWORD PTR [r12+0x120],0x0
  417090:	test   eax,eax
  417092:	je     41705e <flatcc_builder_custom_reset@@Base+0x12e>
  417094:	lea    rdi,[r12+0x130]
  41709c:	call   41a7b0 <flatcc_emitter_reset@@Base>
  4170a1:	pop    rbx
  4170a2:	pop    rbp
  4170a3:	pop    r12
  4170a5:	pop    r13
  4170a7:	xor    eax,eax
  4170a9:	pop    r14
  4170ab:	ret    
  4170ac:	nop    DWORD PTR [rax+0x0]
  4170b0:	pop    rbx
  4170b1:	pop    rbp
  4170b2:	pop    r12
  4170b4:	pop    r13
  4170b6:	mov    eax,0xffffffff
  4170bb:	pop    r14
  4170bd:	ret    
  4170be:	xchg   ax,ax

00000000004170c0 <flatcc_builder_reset@@Base>:
  4170c0:	endbr64 
  4170c4:	xor    edx,edx
  4170c6:	xor    esi,esi
  4170c8:	jmp    416f30 <flatcc_builder_custom_reset@@Base>
  4170cd:	nop    DWORD PTR [rax]

00000000004170d0 <flatcc_builder_clear@@Base>:
  4170d0:	endbr64 
  4170d4:	push   r12
  4170d6:	lea    r12,[rdi+0x58]
  4170da:	push   rbp
  4170db:	xor    ebp,ebp
  4170dd:	push   rbx
  4170de:	mov    rbx,rdi
  4170e1:	nop    DWORD PTR [rax+0x0]
  4170e8:	mov    rdi,QWORD PTR [rbx+0x40]
  4170ec:	mov    r8d,ebp
  4170ef:	mov    rsi,r12
  4170f2:	xor    ecx,ecx
  4170f4:	xor    edx,edx
  4170f6:	inc    ebp
  4170f8:	call   QWORD PTR [rbx+0x50]
  4170fb:	add    r12,0x10
  4170ff:	cmp    ebp,0x8
  417102:	jne    4170e8 <flatcc_builder_clear@@Base+0x18>
  417104:	mov    eax,DWORD PTR [rbx+0x128]
  41710a:	test   eax,eax
  41710c:	jne    417140 <flatcc_builder_clear@@Base+0x70>
  41710e:	lea    rdi,[rbx+0x8]
  417112:	and    rdi,0xfffffffffffffff8
  417116:	mov    QWORD PTR [rbx],0x0
  41711d:	mov    QWORD PTR [rbx+0x180],0x0
  417128:	sub    rbx,rdi
  41712b:	lea    ecx,[rbx+0x188]
  417131:	shr    ecx,0x3
  417134:	xor    eax,eax
  417136:	rep stos QWORD PTR es:[rdi],rax
  417139:	pop    rbx
  41713a:	pop    rbp
  41713b:	pop    r12
  41713d:	ret    
  41713e:	xchg   ax,ax
  417140:	lea    rdi,[rbx+0x130]
  417147:	call   41a8a0 <flatcc_emitter_clear@@Base>
  41714c:	jmp    41710e <flatcc_builder_clear@@Base+0x3e>
  41714e:	xchg   ax,ax

0000000000417150 <flatcc_builder_enter_user_frame_ptr@@Base>:
  417150:	endbr64 
  417154:	push   r12
  417156:	push   rbp
  417157:	lea    rbp,[rsi+0x7]
  41715b:	and    rbp,0xfffffffffffffff8
  41715f:	push   rbx
  417160:	add    rbp,0x8
  417164:	mov    rbx,rdi
  417167:	mov    r12,QWORD PTR [rdi+0x180]
  41716e:	lea    rdx,[r12+rbp*1]
  417172:	cmp    rdx,QWORD PTR [rdi+0xd0]
  417179:	jbe    417195 <flatcc_builder_enter_user_frame_ptr@@Base+0x45>
  41717b:	lea    rsi,[rdi+0xc8]
  417182:	mov    rdi,QWORD PTR [rdi+0x40]
  417186:	xor    ecx,ecx
  417188:	mov    r8d,0x7
  41718e:	call   QWORD PTR [rbx+0x50]
  417191:	test   eax,eax
  417193:	jne    4171e7 <flatcc_builder_enter_user_frame_ptr@@Base+0x97>
  417195:	add    r12,QWORD PTR [rbx+0xc8]
  41719c:	je     4171e0 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
  41719e:	mov    rdx,rbp
  4171a1:	mov    rdi,r12
  4171a4:	xor    esi,esi
  4171a6:	call   4061c0 <memset@plt>
  4171ab:	mov    rdx,QWORD PTR [rbx+0x178]
  4171b2:	lea    rax,[r12+0x8]
  4171b7:	mov    QWORD PTR [r12],rdx
  4171bb:	mov    rdx,QWORD PTR [rbx+0x180]
  4171c2:	add    rbp,rdx
  4171c5:	lea    rcx,[rdx+0x8]
  4171c9:	mov    QWORD PTR [rbx+0x180],rbp
  4171d0:	mov    QWORD PTR [rbx+0x178],rcx
  4171d7:	pop    rbx
  4171d8:	pop    rbp
  4171d9:	pop    r12
  4171db:	ret    
  4171dc:	nop    DWORD PTR [rax+0x0]
  4171e0:	pop    rbx
  4171e1:	pop    rbp
  4171e2:	xor    eax,eax
  4171e4:	pop    r12
  4171e6:	ret    
  4171e7:	call   416900 <flatcc_builder_default_alloc@@Base+0x130>
  4171ec:	nop    DWORD PTR [rax+0x0]

00000000004171f0 <flatcc_builder_enter_user_frame@@Base>:
  4171f0:	endbr64 
  4171f4:	push   r12
  4171f6:	push   rbp
  4171f7:	mov    rbp,rdi
  4171fa:	push   rbx
  4171fb:	lea    rbx,[rsi+0x7]
  4171ff:	and    rbx,0xfffffffffffffff8
  417203:	mov    r12,QWORD PTR [rdi+0x180]
  41720a:	add    rbx,0x8
  41720e:	lea    rdx,[r12+rbx*1]
  417212:	cmp    rdx,QWORD PTR [rdi+0xd0]
  417219:	jbe    417235 <flatcc_builder_enter_user_frame@@Base+0x45>
  41721b:	lea    rsi,[rdi+0xc8]
  417222:	mov    rdi,QWORD PTR [rdi+0x40]
  417226:	xor    ecx,ecx
  417228:	mov    r8d,0x7
  41722e:	call   QWORD PTR [rbp+0x50]
  417231:	test   eax,eax
  417233:	jne    41727a <flatcc_builder_enter_user_frame@@Base+0x8a>
  417235:	add    r12,QWORD PTR [rbp+0xc8]
  41723c:	je     417272 <flatcc_builder_enter_user_frame@@Base+0x82>
  41723e:	mov    rdx,rbx
  417241:	mov    rdi,r12
  417244:	xor    esi,esi
  417246:	call   4061c0 <memset@plt>
  41724b:	mov    rax,QWORD PTR [rbp+0x178]
  417252:	mov    QWORD PTR [r12],rax
  417256:	mov    rax,QWORD PTR [rbp+0x180]
  41725d:	lea    r12,[rax+0x8]
  417261:	add    rbx,rax
  417264:	mov    QWORD PTR [rbp+0x178],r12
  41726b:	mov    QWORD PTR [rbp+0x180],rbx
  417272:	pop    rbx
  417273:	pop    rbp
  417274:	mov    rax,r12
  417277:	pop    r12
  417279:	ret    
  41727a:	call   416900 <flatcc_builder_default_alloc@@Base+0x130>
  41727f:	nop

0000000000417280 <flatcc_builder_exit_user_frame@@Base>:
  417280:	endbr64 
  417284:	mov    rax,QWORD PTR [rdi+0x178]
  41728b:	test   rax,rax
  41728e:	je     4172b0 <flatcc_builder_exit_user_frame@@Base+0x30>
  417290:	mov    edx,eax
  417292:	sub    rax,0x8
  417296:	mov    QWORD PTR [rdi+0x180],rax
  41729d:	add    rdx,QWORD PTR [rdi+0xc8]
  4172a4:	mov    rax,QWORD PTR [rdx-0x8]
  4172a8:	mov    QWORD PTR [rdi+0x178],rax
  4172af:	ret    
  4172b0:	push   rax
  4172b1:	lea    rcx,[rip+0x19718]        # 4309d0 <_IO_stdin_used@@Base+0x49d0>
  4172b8:	mov    edx,0x21e
  4172bd:	lea    rsi,[rip+0x18c6c]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  4172c4:	lea    rdi,[rip+0x1901e]        # 4302e9 <_IO_stdin_used@@Base+0x42e9>
  4172cb:	call   4061b0 <__assert_fail@plt>

00000000004172d0 <flatcc_builder_exit_user_frame_at@@Base>:
  4172d0:	endbr64 
  4172d4:	cmp    QWORD PTR [rdi+0x178],rsi
  4172db:	jb     4172e9 <flatcc_builder_exit_user_frame_at@@Base+0x19>
  4172dd:	mov    QWORD PTR [rdi+0x178],rsi
  4172e4:	jmp    417280 <flatcc_builder_exit_user_frame@@Base>
  4172e9:	push   rax
  4172ea:	lea    rcx,[rip+0x196af]        # 4309a0 <_IO_stdin_used@@Base+0x49a0>
  4172f1:	mov    edx,0x227
  4172f6:	lea    rsi,[rip+0x18c33]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  4172fd:	lea    rdi,[rip+0x18c8c]        # 42ff90 <_IO_stdin_used@@Base+0x3f90>
  417304:	call   4061b0 <__assert_fail@plt>
  417309:	nop    DWORD PTR [rax+0x0]

0000000000417310 <flatcc_builder_get_current_user_frame@@Base>:
  417310:	endbr64 
  417314:	mov    rax,QWORD PTR [rdi+0x178]
  41731b:	ret    
  41731c:	nop    DWORD PTR [rax+0x0]

0000000000417320 <flatcc_builder_get_user_frame_ptr@@Base>:
  417320:	endbr64 
  417324:	mov    eax,esi
  417326:	add    rax,QWORD PTR [rdi+0xc8]
  41732d:	ret    
  41732e:	xchg   ax,ax

0000000000417330 <flatcc_builder_embed_buffer@@Base>:
  417330:	endbr64 
  417334:	push   r13
  417336:	mov    r13d,r9d
  417339:	push   r12
  41733b:	mov    r12,rcx
  41733e:	push   rbp
  41733f:	mov    rbp,rdx
  417342:	movzx  edx,si
  417345:	push   rbx
  417346:	mov    rbx,rdi
  417349:	sub    rsp,0xc8
  417350:	mov    WORD PTR [rsp+0xc],r8w
  417356:	mov    r8d,DWORD PTR [rdi+0x100]
  41735d:	mov    rax,QWORD PTR fs:0x28
  417366:	mov    QWORD PTR [rsp+0xb8],rax
  41736e:	xor    eax,eax
  417370:	test   r8d,r8d
  417373:	setne  cl
  417376:	lea    rax,[rsp+0xc]
  41737b:	movzx  ecx,cl
  41737e:	mov    rsi,rax
  417381:	call   416960 <flatcc_builder_default_alloc@@Base+0x190>
  417386:	test   eax,eax
  417388:	jne    4174c0 <flatcc_builder_embed_buffer@@Base+0x190>
  41738e:	mov    edx,DWORD PTR [rbx+0xf0]
  417394:	xor    esi,esi
  417396:	and    r13d,0x2
  41739a:	setne  sil
  41739e:	movzx  ecx,WORD PTR [rsp+0xc]
  4173a3:	mov    eax,edx
  4173a5:	shl    esi,0x2
  4173a8:	sub    eax,r12d
  4173ab:	dec    ecx
  4173ad:	sub    eax,esi
  4173af:	and    eax,ecx
  4173b1:	lea    ecx,[rax+r12*1]
  4173b5:	mov    DWORD PTR [rsp+0x1c],ecx
  4173b9:	mov    ecx,DWORD PTR [rbx+0x100]
  4173bf:	mov    QWORD PTR [rsp+0x20],0x0
  4173c8:	mov    DWORD PTR [rsp+0x28],0x0
  4173d0:	xor    r8d,r8d
  4173d3:	test   ecx,ecx
  4173d5:	je     417401 <flatcc_builder_embed_buffer@@Base+0xd1>
  4173d7:	lea    rcx,[rsp+0x1c]
  4173dc:	mov    QWORD PTR [rsp+0x20],0x4
  4173e5:	mov    QWORD PTR [rsp+0x30],rcx
  4173ea:	mov    QWORD PTR [rsp+0x38],0x4
  4173f3:	mov    DWORD PTR [rsp+0x28],0x1
  4173fb:	mov    r8d,0x4
  417401:	test   r12,r12
  417404:	je     41742a <flatcc_builder_embed_buffer@@Base+0xfa>
  417406:	movsxd rsi,DWORD PTR [rsp+0x28]
  41740b:	add    r8,r12
  41740e:	mov    rcx,rsi
  417411:	inc    ecx
  417413:	shl    rsi,0x4
  417417:	mov    QWORD PTR [rsp+0x20],r8
  41741c:	mov    QWORD PTR [rsp+rsi*1+0x30],rbp
  417421:	mov    QWORD PTR [rsp+rsi*1+0x38],r12
  417426:	mov    DWORD PTR [rsp+0x28],ecx
  41742a:	test   eax,eax
  41742c:	jne    417490 <flatcc_builder_embed_buffer@@Base+0x160>
  41742e:	mov    ebp,edx
  417430:	sub    ebp,r8d
  417433:	cmp    edx,ebp
  417435:	jle    4174c4 <flatcc_builder_embed_buffer@@Base+0x194>
  41743b:	movabs rax,0x10000000f
  417445:	cmp    r8,rax
  417448:	ja     4174c4 <flatcc_builder_embed_buffer@@Base+0x194>
  41744a:	mov    rdi,QWORD PTR [rbx+0x38]
  41744e:	mov    edx,DWORD PTR [rsp+0x28]
  417452:	lea    rsi,[rsp+0x30]
  417457:	mov    ecx,ebp
  417459:	call   QWORD PTR [rbx+0x48]
  41745c:	test   eax,eax
  41745e:	jne    4174e8 <flatcc_builder_embed_buffer@@Base+0x1b8>
  417464:	mov    DWORD PTR [rbx+0xf0],ebp
  41746a:	mov    rdi,QWORD PTR [rsp+0xb8]
  417472:	xor    rdi,QWORD PTR fs:0x28
  41747b:	mov    eax,ebp
  41747d:	jne    4174e3 <flatcc_builder_embed_buffer@@Base+0x1b3>
  41747f:	add    rsp,0xc8
  417486:	pop    rbx
  417487:	pop    rbp
  417488:	pop    r12
  41748a:	pop    r13
  41748c:	ret    
  41748d:	nop    DWORD PTR [rax]
  417490:	movsxd rsi,DWORD PTR [rsp+0x28]
  417495:	mov    rdi,0x430a20
  41749c:	mov    rcx,rsi
  41749f:	add    r8,rax
  4174a2:	shl    rsi,0x4
  4174a6:	inc    ecx
  4174a8:	mov    QWORD PTR [rsp+0x20],r8
  4174ad:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  4174b2:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  4174b7:	mov    DWORD PTR [rsp+0x28],ecx
  4174bb:	jmp    41742e <flatcc_builder_embed_buffer@@Base+0xfe>
  4174c0:	xor    ebp,ebp
  4174c2:	jmp    41746a <flatcc_builder_embed_buffer@@Base+0x13a>
  4174c4:	lea    rcx,[rip+0x194a5]        # 430970 <_IO_stdin_used@@Base+0x4970>
  4174cb:	mov    edx,0x287
  4174d0:	lea    rsi,[rip+0x18a59]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  4174d7:	lea    rdi,[rip+0x18de9]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  4174de:	call   4061b0 <__assert_fail@plt>
  4174e3:	call   4061a0 <__stack_chk_fail@plt>
  4174e8:	call   416aa0 <flatcc_builder_default_alloc@@Base+0x2d0>
  4174ed:	nop    DWORD PTR [rax]

00000000004174f0 <flatcc_builder_create_buffer@@Base>:
  4174f0:	endbr64 
  4174f4:	push   r14
  4174f6:	movzx  edx,dx
  4174f9:	mov    r14,rsi
  4174fc:	push   r13
  4174fe:	mov    r13d,r9d
  417501:	push   r12
  417503:	mov    r12d,r9d
  417506:	and    r12d,0x1
  41750a:	push   rbp
  41750b:	mov    rbp,rdi
  41750e:	push   rbx
  41750f:	mov    ebx,ecx
  417511:	mov    ecx,r12d
  417514:	sub    rsp,0xc0
  41751b:	mov    WORD PTR [rsp+0xc],r8w
  417521:	lea    rsi,[rsp+0xc]
  417526:	mov    rax,QWORD PTR fs:0x28
  41752f:	mov    QWORD PTR [rsp+0xb8],rax
  417537:	xor    eax,eax
  417539:	mov    DWORD PTR [rsp+0x1c],0x0
  417541:	call   416960 <flatcc_builder_default_alloc@@Base+0x190>
  417546:	test   eax,eax
  417548:	jne    4176e8 <flatcc_builder_create_buffer@@Base+0x1f8>
  41754e:	movzx  esi,WORD PTR [rsp+0xc]
  417553:	cmp    si,WORD PTR [rbp+0xe8]
  41755a:	jbe    417563 <flatcc_builder_create_buffer@@Base+0x73>
  41755c:	mov    WORD PTR [rbp+0xe8],si
  417563:	mov    edx,DWORD PTR [rsp+0x1c]
  417567:	test   r14,r14
  41756a:	je     417573 <flatcc_builder_create_buffer@@Base+0x83>
  41756c:	mov    edx,DWORD PTR [r14]
  41756f:	mov    DWORD PTR [rsp+0x1c],edx
  417573:	test   edx,edx
  417575:	mov    eax,0x4
  41757a:	mov    ecx,DWORD PTR [rbp+0xf0]
  417580:	cmovne rdx,rax
  417584:	xor    edi,edi
  417586:	test   r13b,0x2
  41758a:	setne  dil
  41758e:	lea    eax,[rcx-0x4]
  417591:	shl    edi,0x2
  417594:	sub    eax,edx
  417596:	sub    eax,edi
  417598:	dec    esi
  41759a:	and    eax,esi
  41759c:	and    r13d,0x3
  4175a0:	jne    4176b8 <flatcc_builder_create_buffer@@Base+0x1c8>
  4175a6:	xor    r9d,r9d
  4175a9:	mov    esi,0x1
  4175ae:	mov    r8d,0x4
  4175b4:	movsxd rdi,r9d
  4175b7:	shl    rdi,0x4
  4175bb:	lea    r10,[rsp+0x14]
  4175c0:	mov    QWORD PTR [rsp+0x20],r8
  4175c5:	mov    QWORD PTR [rsp+rdi*1+0x30],r10
  4175ca:	mov    QWORD PTR [rsp+rdi*1+0x38],0x4
  4175d3:	mov    DWORD PTR [rsp+0x28],esi
  4175d7:	test   edx,edx
  4175d9:	je     4175ff <flatcc_builder_create_buffer@@Base+0x10f>
  4175db:	shl    rsi,0x4
  4175df:	add    r8,rdx
  4175e2:	lea    rdi,[rsp+0x1c]
  4175e7:	add    r9d,0x2
  4175eb:	mov    QWORD PTR [rsp+0x20],r8
  4175f0:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  4175f5:	mov    QWORD PTR [rsp+rsi*1+0x38],rdx
  4175fa:	mov    DWORD PTR [rsp+0x28],r9d
  4175ff:	test   eax,eax
  417601:	je     41762e <flatcc_builder_create_buffer@@Base+0x13e>
  417603:	movsxd rsi,DWORD PTR [rsp+0x28]
  417608:	mov    rdi,0x430a20
  41760f:	mov    rdx,rsi
  417612:	add    r8,rax
  417615:	shl    rsi,0x4
  417619:	inc    edx
  41761b:	mov    QWORD PTR [rsp+0x20],r8
  417620:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  417625:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  41762a:	mov    DWORD PTR [rsp+0x28],edx
  41762e:	mov    eax,ecx
  417630:	sub    eax,r8d
  417633:	lea    edx,[rax+0x4]
  417636:	test   r13d,r13d
  417639:	cmovne eax,edx
  41763c:	test   r12d,r12d
  41763f:	je     4176f0 <flatcc_builder_create_buffer@@Base+0x200>
  417645:	mov    edx,DWORD PTR [rbp+0xf8]
  41764b:	sub    edx,eax
  41764d:	sub    ebx,eax
  41764f:	mov    DWORD PTR [rsp+0x14],ebx
  417653:	mov    ebx,ecx
  417655:	sub    ebx,r8d
  417658:	mov    DWORD PTR [rsp+0x18],edx
  41765c:	cmp    ecx,ebx
  41765e:	jle    4176fd <flatcc_builder_create_buffer@@Base+0x20d>
  417664:	mov    rdi,QWORD PTR [rbp+0x38]
  417668:	mov    edx,DWORD PTR [rsp+0x28]
  41766c:	lea    rsi,[rsp+0x30]
  417671:	mov    ecx,ebx
  417673:	call   QWORD PTR [rbp+0x48]
  417676:	test   eax,eax
  417678:	jne    417721 <flatcc_builder_create_buffer@@Base+0x231>
  41767e:	mov    DWORD PTR [rbp+0xf0],ebx
  417684:	test   ebx,ebx
  417686:	je     417726 <flatcc_builder_create_buffer@@Base+0x236>
  41768c:	mov    rcx,QWORD PTR [rsp+0xb8]
  417694:	xor    rcx,QWORD PTR fs:0x28
  41769d:	mov    eax,ebx
  41769f:	jne    41771c <flatcc_builder_create_buffer@@Base+0x22c>
  4176a1:	add    rsp,0xc0
  4176a8:	pop    rbx
  4176a9:	pop    rbp
  4176aa:	pop    r12
  4176ac:	pop    r13
  4176ae:	pop    r14
  4176b0:	ret    
  4176b1:	nop    DWORD PTR [rax+0x0]
  4176b8:	lea    rsi,[rsp+0x18]
  4176bd:	mov    QWORD PTR [rsp+0x30],rsi
  4176c2:	mov    QWORD PTR [rsp+0x38],0x4
  4176cb:	mov    esi,0x2
  4176d0:	mov    r9d,0x1
  4176d6:	mov    r8d,0x8
  4176dc:	jmp    4175b4 <flatcc_builder_create_buffer@@Base+0xc4>
  4176e1:	nop    DWORD PTR [rax+0x0]
  4176e8:	xor    ebx,ebx
  4176ea:	jmp    41768c <flatcc_builder_create_buffer@@Base+0x19c>
  4176ec:	nop    DWORD PTR [rax+0x0]
  4176f0:	mov    edx,DWORD PTR [rbp+0xf4]
  4176f6:	sub    edx,eax
  4176f8:	jmp    41764d <flatcc_builder_create_buffer@@Base+0x15d>
  4176fd:	lea    rcx,[rip+0x1926c]        # 430970 <_IO_stdin_used@@Base+0x4970>
  417704:	mov    edx,0x287
  417709:	lea    rsi,[rip+0x18820]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  417710:	lea    rdi,[rip+0x18bb0]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  417717:	call   4061b0 <__assert_fail@plt>
  41771c:	call   4061a0 <__stack_chk_fail@plt>
  417721:	call   416aa0 <flatcc_builder_default_alloc@@Base+0x2d0>
  417726:	lea    rcx,[rip+0x19223]        # 430950 <_IO_stdin_used@@Base+0x4950>
  41772d:	mov    edx,0x304
  417732:	lea    rsi,[rip+0x187f7]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  417739:	lea    rdi,[rip+0x18b87]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  417740:	call   4061b0 <__assert_fail@plt>
  417745:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000417750 <flatcc_builder_create_struct@@Base>:
  417750:	endbr64 
  417754:	push   rbp
  417755:	push   rbx
  417756:	sub    rsp,0xa8
  41775d:	mov    rax,QWORD PTR fs:0x28
  417766:	mov    QWORD PTR [rsp+0x98],rax
  41776e:	xor    eax,eax
  417770:	test   cx,cx
  417773:	je     417893 <flatcc_builder_create_struct@@Base+0x143>
  417779:	mov    r8,rdx
  41777c:	mov    rbx,rdi
  41777f:	movzx  edx,cx
  417782:	cmp    cx,WORD PTR [rdi+0xe8]
  417789:	jbe    417792 <flatcc_builder_create_struct@@Base+0x42>
  41778b:	mov    WORD PTR [rdi+0xe8],cx
  417792:	mov    ecx,DWORD PTR [rbx+0xf0]
  417798:	dec    edx
  41779a:	mov    eax,ecx
  41779c:	sub    eax,r8d
  41779f:	and    eax,edx
  4177a1:	mov    edx,eax
  4177a3:	mov    QWORD PTR [rsp],0x0
  4177ab:	mov    DWORD PTR [rsp+0x8],0x0
  4177b3:	test   r8,r8
  4177b6:	jne    417848 <flatcc_builder_create_struct@@Base+0xf8>
  4177bc:	test   eax,eax
  4177be:	je     417874 <flatcc_builder_create_struct@@Base+0x124>
  4177c4:	mov    r8,rdx
  4177c7:	mov    esi,0x1
  4177cc:	xor    eax,eax
  4177ce:	mov    rdi,0x430a20
  4177d5:	shl    rax,0x4
  4177d9:	mov    QWORD PTR [rsp],r8
  4177dd:	mov    QWORD PTR [rsp+rax*1+0x10],rdi
  4177e2:	mov    QWORD PTR [rsp+rax*1+0x18],rdx
  4177e7:	mov    DWORD PTR [rsp+0x8],esi
  4177eb:	mov    ebp,ecx
  4177ed:	movabs rax,0x10000000f
  4177f7:	sub    ebp,r8d
  4177fa:	cmp    r8,rax
  4177fd:	ja     417874 <flatcc_builder_create_struct@@Base+0x124>
  4177ff:	cmp    ecx,ebp
  417801:	jle    417874 <flatcc_builder_create_struct@@Base+0x124>
  417803:	mov    rdi,QWORD PTR [rbx+0x38]
  417807:	mov    edx,DWORD PTR [rsp+0x8]
  41780b:	lea    rsi,[rsp+0x10]
  417810:	mov    ecx,ebp
  417812:	call   QWORD PTR [rbx+0x48]
  417815:	test   eax,eax
  417817:	jne    4178b2 <flatcc_builder_create_struct@@Base+0x162>
  41781d:	mov    DWORD PTR [rbx+0xf0],ebp
  417823:	mov    eax,ebp
  417825:	mov    rdi,QWORD PTR [rsp+0x98]
  41782d:	xor    rdi,QWORD PTR fs:0x28
  417836:	jne    4178b7 <flatcc_builder_create_struct@@Base+0x167>
  417838:	add    rsp,0xa8
  41783f:	pop    rbx
  417840:	pop    rbp
  417841:	ret    
  417842:	nop    WORD PTR [rax+rax*1+0x0]
  417848:	mov    QWORD PTR [rsp],r8
  41784c:	mov    QWORD PTR [rsp+0x10],rsi
  417851:	mov    QWORD PTR [rsp+0x18],r8
  417856:	mov    DWORD PTR [rsp+0x8],0x1
  41785e:	test   eax,eax
  417860:	je     4177eb <flatcc_builder_create_struct@@Base+0x9b>
  417862:	add    r8,rdx
  417865:	mov    esi,0x2
  41786a:	mov    eax,0x1
  41786f:	jmp    4177ce <flatcc_builder_create_struct@@Base+0x7e>
  417874:	lea    rcx,[rip+0x190f5]        # 430970 <_IO_stdin_used@@Base+0x4970>
  41787b:	mov    edx,0x287
  417880:	lea    rsi,[rip+0x186a9]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  417887:	lea    rdi,[rip+0x18a39]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  41788e:	call   4061b0 <__assert_fail@plt>
  417893:	lea    rcx,[rip+0x19096]        # 430930 <_IO_stdin_used@@Base+0x4930>
  41789a:	mov    edx,0x30f
  41789f:	lea    rsi,[rip+0x1868a]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  4178a6:	lea    rdi,[rip+0x18a55]        # 430302 <_IO_stdin_used@@Base+0x4302>
  4178ad:	call   4061b0 <__assert_fail@plt>
  4178b2:	call   416aa0 <flatcc_builder_default_alloc@@Base+0x2d0>
  4178b7:	call   4061a0 <__stack_chk_fail@plt>
  4178bc:	nop    DWORD PTR [rax+0x0]

00000000004178c0 <flatcc_builder_start_buffer@@Base>:
  4178c0:	endbr64 
  4178c4:	push   r13
  4178c6:	mov    r13d,edx
  4178c9:	push   r12
  4178cb:	mov    r12d,ecx
  4178ce:	push   rbp
  4178cf:	mov    rbp,rsi
  4178d2:	push   rbx
  4178d3:	mov    rbx,rdi
  4178d6:	sub    rsp,0x8
  4178da:	movzx  esi,WORD PTR [rdi+0xe8]
  4178e1:	call   416b00 <flatcc_builder_default_alloc@@Base+0x330>
  4178e6:	test   eax,eax
  4178e8:	jne    417998 <flatcc_builder_start_buffer@@Base+0xd8>
  4178ee:	movzx  edx,WORD PTR [rbx+0xec]
  4178f5:	mov    rsi,QWORD PTR [rbx+0x30]
  4178f9:	mov    ecx,0x1
  4178fe:	mov    WORD PTR [rbx+0xe8],cx
  417905:	mov    WORD PTR [rsi+0x22],dx
  417909:	movzx  edx,WORD PTR [rbx+0x10c]
  417910:	mov    WORD PTR [rbx+0xec],r13w
  417918:	mov    WORD PTR [rsi+0x20],dx
  41791c:	mov    edx,DWORD PTR [rbx+0xf8]
  417922:	mov    WORD PTR [rbx+0x10c],r12w
  41792a:	mov    DWORD PTR [rsi+0x14],edx
  41792d:	mov    edx,DWORD PTR [rbx+0x100]
  417933:	mov    DWORD PTR [rsi+0x1c],edx
  417936:	mov    edx,DWORD PTR [rbx+0xf0]
  41793c:	mov    DWORD PTR [rbx+0xf8],edx
  417942:	mov    edx,DWORD PTR [rbx+0xfc]
  417948:	lea    ecx,[rdx+0x1]
  41794b:	mov    DWORD PTR [rbx+0x100],edx
  417951:	mov    edx,DWORD PTR [rbx+0x110]
  417957:	mov    DWORD PTR [rbx+0xfc],ecx
  41795d:	mov    DWORD PTR [rsi+0x10],edx
  417960:	test   rbp,rbp
  417963:	je     417988 <flatcc_builder_start_buffer@@Base+0xc8>
  417965:	mov    edx,DWORD PTR [rbp+0x0]
  417968:	mov    DWORD PTR [rbx+0x110],edx
  41796e:	mov    edx,0x1
  417973:	mov    WORD PTR [rsi+0xe],dx
  417977:	add    rsp,0x8
  41797b:	pop    rbx
  41797c:	pop    rbp
  41797d:	pop    r12
  41797f:	pop    r13
  417981:	ret    
  417982:	nop    WORD PTR [rax+rax*1+0x0]
  417988:	mov    rbp,0x430a20
  41798f:	jmp    417965 <flatcc_builder_start_buffer@@Base+0xa5>
  417991:	nop    DWORD PTR [rax+0x0]
  417998:	mov    eax,0xffffffff
  41799d:	jmp    417977 <flatcc_builder_start_buffer@@Base+0xb7>
  41799f:	nop

00000000004179a0 <flatcc_builder_end_buffer@@Base>:
  4179a0:	endbr64 
  4179a4:	push   rbp
  4179a5:	xor    eax,eax
  4179a7:	push   rbx
  4179a8:	sub    rsp,0x8
  4179ac:	movzx  r9d,WORD PTR [rdi+0x10c]
  4179b4:	mov    edx,DWORD PTR [rdi+0x100]
  4179ba:	and    r9d,0x2
  4179be:	test   edx,edx
  4179c0:	setne  al
  4179c3:	movzx  r9d,r9w
  4179c7:	or     r9d,eax
  4179ca:	mov    rax,QWORD PTR [rdi+0x30]
  4179ce:	cmp    WORD PTR [rax+0xe],0x1
  4179d3:	jne    417ac4 <flatcc_builder_end_buffer@@Base+0x124>
  4179d9:	movzx  edx,WORD PTR [rdi+0xec]
  4179e0:	movzx  eax,WORD PTR [rdi+0xe8]
  4179e7:	mov    rbx,rdi
  4179ea:	mov    ecx,esi
  4179ec:	mov    r8d,edx
  4179ef:	cmp    dx,ax
  4179f2:	ja     417ab8 <flatcc_builder_end_buffer@@Base+0x118>
  4179f8:	movzx  r8d,ax
  4179fc:	lea    rsi,[rbx+0x110]
  417a03:	mov    rdi,rbx
  417a06:	call   4174f0 <flatcc_builder_create_buffer@@Base>
  417a0b:	mov    ebp,eax
  417a0d:	test   eax,eax
  417a0f:	je     417aac <flatcc_builder_end_buffer@@Base+0x10c>
  417a15:	mov    rax,QWORD PTR [rbx+0x30]
  417a19:	mov    rdi,QWORD PTR [rbx+0x18]
  417a1d:	mov    edx,DWORD PTR [rax+0x14]
  417a20:	xor    esi,esi
  417a22:	mov    DWORD PTR [rbx+0xf8],edx
  417a28:	mov    edx,DWORD PTR [rax+0x1c]
  417a2b:	mov    DWORD PTR [rbx+0x100],edx
  417a31:	mov    edx,DWORD PTR [rax+0x10]
  417a34:	movzx  eax,WORD PTR [rax+0x20]
  417a38:	mov    DWORD PTR [rbx+0x110],edx
  417a3e:	mov    WORD PTR [rbx+0x10c],ax
  417a45:	mov    edx,DWORD PTR [rbx+0x20]
  417a48:	call   4061c0 <memset@plt>
  417a4d:	mov    rax,QWORD PTR [rbx+0x30]
  417a51:	mov    edi,DWORD PTR [rbx+0x70]
  417a54:	mov    edx,DWORD PTR [rax+0x8]
  417a57:	mov    esi,DWORD PTR [rax]
  417a59:	mov    ecx,DWORD PTR [rax+0x4]
  417a5c:	mov    DWORD PTR [rbx+0x20],edx
  417a5f:	mov    rdx,rsi
  417a62:	sub    edi,edx
  417a64:	mov    DWORD PTR [rbx+0x28],esi
  417a67:	mov    edx,edi
  417a69:	add    rsi,QWORD PTR [rbx+0x68]
  417a6d:	cmp    ecx,edi
  417a6f:	cmovb  edx,ecx
  417a72:	mov    QWORD PTR [rbx+0x18],rsi
  417a76:	mov    DWORD PTR [rbx+0x24],edx
  417a79:	movzx  edx,WORD PTR [rbx+0xea]
  417a80:	mov    DWORD PTR [rax+0x4],ecx
  417a83:	cmp    dx,WORD PTR [rbx+0xe8]
  417a8a:	jbe    417a93 <flatcc_builder_end_buffer@@Base+0xf3>
  417a8c:	mov    WORD PTR [rbx+0xe8],dx
  417a93:	movzx  edx,WORD PTR [rax+0xc]
  417a97:	sub    rax,0x24
  417a9b:	dec    DWORD PTR [rbx+0x104]
  417aa1:	mov    WORD PTR [rbx+0xea],dx
  417aa8:	mov    QWORD PTR [rbx+0x30],rax
  417aac:	add    rsp,0x8
  417ab0:	pop    rbx
  417ab1:	mov    eax,ebp
  417ab3:	pop    rbp
  417ab4:	ret    
  417ab5:	nop    DWORD PTR [rax]
  417ab8:	mov    WORD PTR [rbx+0xe8],dx
  417abf:	jmp    4179fc <flatcc_builder_end_buffer@@Base+0x5c>
  417ac4:	lea    rcx,[rip+0x18e45]        # 430910 <_IO_stdin_used@@Base+0x4910>
  417acb:	mov    edx,0x346
  417ad0:	lea    rsi,[rip+0x18459]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  417ad7:	lea    rdi,[rip+0x184d2]        # 42ffb0 <_IO_stdin_used@@Base+0x3fb0>
  417ade:	call   4061b0 <__assert_fail@plt>
  417ae3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  417aee:	xchg   ax,ax

0000000000417af0 <flatcc_builder_start_struct@@Base>:
  417af0:	endbr64 
  417af4:	push   r12
  417af6:	push   rbp
  417af7:	mov    rbp,rsi
  417afa:	movzx  esi,dx
  417afd:	push   rbx
  417afe:	mov    rbx,rdi
  417b01:	call   416b00 <flatcc_builder_default_alloc@@Base+0x330>
  417b06:	test   eax,eax
  417b08:	jne    417b90 <flatcc_builder_start_struct@@Base+0xa0>
  417b0e:	mov    rcx,QWORD PTR [rbx+0x30]
  417b12:	mov    eax,0x2
  417b17:	mov    WORD PTR [rcx+0xe],ax
  417b1b:	mov    eax,DWORD PTR [rbx+0x28]
  417b1e:	mov    edi,DWORD PTR [rbx+0x70]
  417b21:	mov    rdx,rax
  417b24:	sub    edi,edx
  417b26:	add    rax,QWORD PTR [rbx+0x68]
  417b2a:	mov    QWORD PTR [rbx+0x18],rax
  417b2e:	mov    edx,edi
  417b30:	cmp    edi,0xfffffffc
  417b33:	ja     417b60 <flatcc_builder_start_struct@@Base+0x70>
  417b35:	mov    DWORD PTR [rbx+0x24],edi
  417b38:	mov    r12d,DWORD PTR [rbx+0x20]
  417b3c:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  417b43:	mov    rsi,r12
  417b46:	add    esi,ebp
  417b48:	mov    DWORD PTR [rbx+0x20],esi
  417b4b:	cmp    esi,edx
  417b4d:	jae    417b70 <flatcc_builder_start_struct@@Base+0x80>
  417b4f:	pop    rbx
  417b50:	pop    rbp
  417b51:	add    rax,r12
  417b54:	pop    r12
  417b56:	ret    
  417b57:	nop    WORD PTR [rax+rax*1+0x0]
  417b60:	mov    DWORD PTR [rbx+0x24],0xfffffffc
  417b67:	mov    edx,0xfffffffc
  417b6c:	jmp    417b38 <flatcc_builder_start_struct@@Base+0x48>
  417b6e:	xchg   ax,ax
  417b70:	inc    esi
  417b72:	mov    edx,0xfffffffc
  417b77:	mov    rdi,rbx
  417b7a:	call   416770 <union_vector_tests@@Base+0x110>
  417b7f:	test   eax,eax
  417b81:	jne    417b90 <flatcc_builder_start_struct@@Base+0xa0>
  417b83:	mov    rax,QWORD PTR [rbx+0x18]
  417b87:	jmp    417b4f <flatcc_builder_start_struct@@Base+0x5f>
  417b89:	nop    DWORD PTR [rax+0x0]
  417b90:	pop    rbx
  417b91:	pop    rbp
  417b92:	xor    eax,eax
  417b94:	pop    r12
  417b96:	ret    
  417b97:	nop    WORD PTR [rax+rax*1+0x0]

0000000000417ba0 <flatcc_builder_struct_edit@@Base>:
  417ba0:	endbr64 
  417ba4:	mov    rax,QWORD PTR [rdi+0x18]
  417ba8:	ret    
  417ba9:	nop    DWORD PTR [rax+0x0]

0000000000417bb0 <flatcc_builder_end_struct@@Base>:
  417bb0:	endbr64 
  417bb4:	push   rbp
  417bb5:	push   rbx
  417bb6:	sub    rsp,0x8
  417bba:	mov    rax,QWORD PTR [rdi+0x30]
  417bbe:	cmp    WORD PTR [rax+0xe],0x2
  417bc3:	jne    417c66 <flatcc_builder_end_struct@@Base+0xb6>
  417bc9:	movzx  ecx,WORD PTR [rdi+0xea]
  417bd0:	mov    edx,DWORD PTR [rdi+0x20]
  417bd3:	mov    rsi,QWORD PTR [rdi+0x18]
  417bd7:	mov    rbx,rdi
  417bda:	call   417750 <flatcc_builder_create_struct@@Base>
  417bdf:	mov    ebp,eax
  417be1:	test   eax,eax
  417be3:	jne    417bf0 <flatcc_builder_end_struct@@Base+0x40>
  417be5:	add    rsp,0x8
  417be9:	pop    rbx
  417bea:	mov    eax,ebp
  417bec:	pop    rbp
  417bed:	ret    
  417bee:	xchg   ax,ax
  417bf0:	mov    edx,DWORD PTR [rbx+0x20]
  417bf3:	mov    rdi,QWORD PTR [rbx+0x18]
  417bf7:	xor    esi,esi
  417bf9:	call   4061c0 <memset@plt>
  417bfe:	mov    rax,QWORD PTR [rbx+0x30]
  417c02:	mov    edi,DWORD PTR [rbx+0x70]
  417c05:	mov    edx,DWORD PTR [rax+0x8]
  417c08:	mov    esi,DWORD PTR [rax]
  417c0a:	mov    ecx,DWORD PTR [rax+0x4]
  417c0d:	mov    DWORD PTR [rbx+0x20],edx
  417c10:	mov    rdx,rsi
  417c13:	sub    edi,edx
  417c15:	mov    DWORD PTR [rbx+0x28],esi
  417c18:	mov    edx,edi
  417c1a:	add    rsi,QWORD PTR [rbx+0x68]
  417c1e:	cmp    ecx,edi
  417c20:	cmovb  edx,ecx
  417c23:	mov    QWORD PTR [rbx+0x18],rsi
  417c27:	mov    DWORD PTR [rbx+0x24],edx
  417c2a:	movzx  edx,WORD PTR [rbx+0xea]
  417c31:	mov    DWORD PTR [rax+0x4],ecx
  417c34:	cmp    dx,WORD PTR [rbx+0xe8]
  417c3b:	jbe    417c44 <flatcc_builder_end_struct@@Base+0x94>
  417c3d:	mov    WORD PTR [rbx+0xe8],dx
  417c44:	movzx  edx,WORD PTR [rax+0xc]
  417c48:	dec    DWORD PTR [rbx+0x104]
  417c4e:	sub    rax,0x24
  417c52:	mov    QWORD PTR [rbx+0x30],rax
  417c56:	mov    WORD PTR [rbx+0xea],dx
  417c5d:	add    rsp,0x8
  417c61:	mov    eax,ebp
  417c63:	pop    rbx
  417c64:	pop    rbp
  417c65:	ret    
  417c66:	lea    rcx,[rip+0x18c83]        # 4308f0 <_IO_stdin_used@@Base+0x48f0>
  417c6d:	mov    edx,0x368
  417c72:	lea    rsi,[rip+0x182b7]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  417c79:	lea    rdi,[rip+0x18360]        # 42ffe0 <_IO_stdin_used@@Base+0x3fe0>
  417c80:	call   4061b0 <__assert_fail@plt>
  417c85:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000417c90 <flatcc_builder_extend_vector@@Base>:
  417c90:	endbr64 
  417c94:	push   rbp
  417c95:	mov    eax,esi
  417c97:	push   rbx
  417c98:	sub    rsp,0x8
  417c9c:	mov    rdx,QWORD PTR [rdi+0x30]
  417ca0:	add    eax,DWORD PTR [rdx+0x14]
  417ca3:	setb   cl
  417ca6:	cmp    DWORD PTR [rdx+0x18],eax
  417ca9:	jb     417cf4 <flatcc_builder_extend_vector@@Base+0x64>
  417cab:	movzx  ecx,cl
  417cae:	test   ecx,ecx
  417cb0:	jne    417cf4 <flatcc_builder_extend_vector@@Base+0x64>
  417cb2:	imul   esi,DWORD PTR [rdx+0x10]
  417cb6:	mov    ebp,DWORD PTR [rdi+0x20]
  417cb9:	mov    DWORD PTR [rdx+0x14],eax
  417cbc:	add    esi,ebp
  417cbe:	mov    rbx,rdi
  417cc1:	mov    DWORD PTR [rdi+0x20],esi
  417cc4:	cmp    esi,DWORD PTR [rdi+0x24]
  417cc7:	jae    417ce0 <flatcc_builder_extend_vector@@Base+0x50>
  417cc9:	mov    rax,QWORD PTR [rbx+0x18]
  417ccd:	add    rax,rbp
  417cd0:	add    rsp,0x8
  417cd4:	pop    rbx
  417cd5:	pop    rbp
  417cd6:	ret    
  417cd7:	nop    WORD PTR [rax+rax*1+0x0]
  417ce0:	inc    esi
  417ce2:	mov    edx,0xfffffffc
  417ce7:	call   416770 <union_vector_tests@@Base+0x110>
  417cec:	test   eax,eax
  417cee:	je     417cc9 <flatcc_builder_extend_vector@@Base+0x39>
  417cf0:	xor    eax,eax
  417cf2:	jmp    417cd0 <flatcc_builder_extend_vector@@Base+0x40>
  417cf4:	call   416ad0 <flatcc_builder_default_alloc@@Base+0x300>
  417cf9:	nop    DWORD PTR [rax+0x0]

0000000000417d00 <flatcc_builder_vector_push@@Base>:
  417d00:	endbr64 
  417d04:	push   r13
  417d06:	push   r12
  417d08:	push   rbp
  417d09:	push   rbx
  417d0a:	sub    rsp,0x8
  417d0e:	mov    rax,QWORD PTR [rdi+0x30]
  417d12:	cmp    WORD PTR [rax+0xe],0x4
  417d17:	jne    417d7d <flatcc_builder_vector_push@@Base+0x7d>
  417d19:	mov    edx,DWORD PTR [rax+0x14]
  417d1c:	cmp    edx,DWORD PTR [rax+0x18]
  417d1f:	ja     417d9c <flatcc_builder_vector_push@@Base+0x9c>
  417d21:	mov    ebp,DWORD PTR [rdi+0x20]
  417d24:	mov    r12d,DWORD PTR [rax+0x10]
  417d28:	mov    rcx,rbp
  417d2b:	inc    edx
  417d2d:	add    ecx,r12d
  417d30:	mov    DWORD PTR [rax+0x14],edx
  417d33:	mov    rbx,rdi
  417d36:	mov    r13,rsi
  417d39:	mov    DWORD PTR [rdi+0x20],ecx
  417d3c:	cmp    ecx,DWORD PTR [rdi+0x24]
  417d3f:	jae    417d68 <flatcc_builder_vector_push@@Base+0x68>
  417d41:	add    rbp,QWORD PTR [rbx+0x18]
  417d45:	je     417d55 <flatcc_builder_vector_push@@Base+0x55>
  417d47:	mov    edx,r12d
  417d4a:	mov    rsi,r13
  417d4d:	mov    rdi,rbp
  417d50:	call   406210 <memcpy@plt>
  417d55:	add    rsp,0x8
  417d59:	pop    rbx
  417d5a:	mov    rax,rbp
  417d5d:	pop    rbp
  417d5e:	pop    r12
  417d60:	pop    r13
  417d62:	ret    
  417d63:	nop    DWORD PTR [rax+rax*1+0x0]
  417d68:	lea    esi,[rcx+0x1]
  417d6b:	mov    edx,0xfffffffc
  417d70:	call   416770 <union_vector_tests@@Base+0x110>
  417d75:	test   eax,eax
  417d77:	je     417d41 <flatcc_builder_vector_push@@Base+0x41>
  417d79:	xor    ebp,ebp
  417d7b:	jmp    417d55 <flatcc_builder_vector_push@@Base+0x55>
  417d7d:	lea    rcx,[rip+0x18b2c]        # 4308b0 <_IO_stdin_used@@Base+0x48b0>
  417d84:	mov    edx,0x38b
  417d89:	lea    rsi,[rip+0x181a0]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  417d90:	lea    rdi,[rip+0x18279]        # 430010 <_IO_stdin_used@@Base+0x4010>
  417d97:	call   4061b0 <__assert_fail@plt>
  417d9c:	lea    rcx,[rip+0x18b0d]        # 4308b0 <_IO_stdin_used@@Base+0x48b0>
  417da3:	mov    edx,0x38c
  417da8:	lea    rsi,[rip+0x18181]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  417daf:	lea    rdi,[rip+0x1828a]        # 430040 <_IO_stdin_used@@Base+0x4040>
  417db6:	call   4061b0 <__assert_fail@plt>
  417dbb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000417dc0 <flatcc_builder_append_vector@@Base>:
  417dc0:	endbr64 
  417dc4:	push   r13
  417dc6:	push   r12
  417dc8:	push   rbp
  417dc9:	push   rbx
  417dca:	sub    rsp,0x8
  417dce:	mov    rax,QWORD PTR [rdi+0x30]
  417dd2:	cmp    WORD PTR [rax+0xe],0x4
  417dd7:	jne    417e46 <flatcc_builder_append_vector@@Base+0x86>
  417dd9:	mov    ecx,edx
  417ddb:	mov    r13,rsi
  417dde:	xor    esi,esi
  417de0:	add    ecx,DWORD PTR [rax+0x14]
  417de3:	setb   sil
  417de7:	cmp    DWORD PTR [rax+0x18],ecx
  417dea:	jb     417e65 <flatcc_builder_append_vector@@Base+0xa5>
  417dec:	test   esi,esi
  417dee:	jne    417e65 <flatcc_builder_append_vector@@Base+0xa5>
  417df0:	mov    ebx,DWORD PTR [rax+0x10]
  417df3:	mov    r12d,DWORD PTR [rdi+0x20]
  417df7:	imul   ebx,edx
  417dfa:	mov    rdx,r12
  417dfd:	mov    DWORD PTR [rax+0x14],ecx
  417e00:	add    edx,ebx
  417e02:	mov    rbp,rdi
  417e05:	mov    DWORD PTR [rdi+0x20],edx
  417e08:	cmp    edx,DWORD PTR [rdi+0x24]
  417e0b:	jae    417e30 <flatcc_builder_append_vector@@Base+0x70>
  417e0d:	add    r12,QWORD PTR [rbp+0x18]
  417e11:	je     417e20 <flatcc_builder_append_vector@@Base+0x60>
  417e13:	mov    edx,ebx
  417e15:	mov    rsi,r13
  417e18:	mov    rdi,r12
  417e1b:	call   406210 <memcpy@plt>
  417e20:	add    rsp,0x8
  417e24:	pop    rbx
  417e25:	pop    rbp
  417e26:	mov    rax,r12
  417e29:	pop    r12
  417e2b:	pop    r13
  417e2d:	ret    
  417e2e:	xchg   ax,ax
  417e30:	lea    esi,[rdx+0x1]
  417e33:	mov    edx,0xfffffffc
  417e38:	call   416770 <union_vector_tests@@Base+0x110>
  417e3d:	test   eax,eax
  417e3f:	je     417e0d <flatcc_builder_append_vector@@Base+0x4d>
  417e41:	xor    r12d,r12d
  417e44:	jmp    417e20 <flatcc_builder_append_vector@@Base+0x60>
  417e46:	lea    rcx,[rip+0x18a43]        # 430890 <_IO_stdin_used@@Base+0x4890>
  417e4d:	mov    edx,0x393
  417e52:	lea    rsi,[rip+0x180d7]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  417e59:	lea    rdi,[rip+0x181b0]        # 430010 <_IO_stdin_used@@Base+0x4010>
  417e60:	call   4061b0 <__assert_fail@plt>
  417e65:	call   416ad0 <flatcc_builder_default_alloc@@Base+0x300>
  417e6a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000417e70 <flatcc_builder_extend_offset_vector@@Base>:
  417e70:	endbr64 
  417e74:	push   rbp
  417e75:	mov    edx,esi
  417e77:	push   rbx
  417e78:	sub    rsp,0x8
  417e7c:	mov    rax,QWORD PTR [rdi+0x30]
  417e80:	add    edx,DWORD PTR [rax+0x14]
  417e83:	jb     417ec5 <flatcc_builder_extend_offset_vector@@Base+0x55>
  417e85:	cmp    edx,0x3fffffff
  417e8b:	ja     417ec5 <flatcc_builder_extend_offset_vector@@Base+0x55>
  417e8d:	mov    ebp,DWORD PTR [rdi+0x20]
  417e90:	mov    DWORD PTR [rax+0x14],edx
  417e93:	lea    eax,[rbp+rsi*4+0x0]
  417e97:	mov    rbx,rdi
  417e9a:	mov    DWORD PTR [rdi+0x20],eax
  417e9d:	cmp    eax,DWORD PTR [rdi+0x24]
  417ea0:	jae    417eb0 <flatcc_builder_extend_offset_vector@@Base+0x40>
  417ea2:	mov    rax,QWORD PTR [rbx+0x18]
  417ea6:	add    rax,rbp
  417ea9:	add    rsp,0x8
  417ead:	pop    rbx
  417eae:	pop    rbp
  417eaf:	ret    
  417eb0:	lea    esi,[rax+0x1]
  417eb3:	mov    edx,0xfffffffc
  417eb8:	call   416770 <union_vector_tests@@Base+0x110>
  417ebd:	test   eax,eax
  417ebf:	je     417ea2 <flatcc_builder_extend_offset_vector@@Base+0x32>
  417ec1:	xor    eax,eax
  417ec3:	jmp    417ea9 <flatcc_builder_extend_offset_vector@@Base+0x39>
  417ec5:	call   416ad0 <flatcc_builder_default_alloc@@Base+0x300>
  417eca:	nop    WORD PTR [rax+rax*1+0x0]

0000000000417ed0 <flatcc_builder_offset_vector_push@@Base>:
  417ed0:	endbr64 
  417ed4:	push   r12
  417ed6:	push   rbp
  417ed7:	push   rbx
  417ed8:	mov    rdx,QWORD PTR [rdi+0x30]
  417edc:	cmp    WORD PTR [rdx+0xe],0x5
  417ee1:	jne    417f38 <flatcc_builder_offset_vector_push@@Base+0x68>
  417ee3:	mov    eax,DWORD PTR [rdx+0x14]
  417ee6:	cmp    eax,0x3fffffff
  417eeb:	je     417f31 <flatcc_builder_offset_vector_push@@Base+0x61>
  417eed:	mov    ebp,DWORD PTR [rdi+0x20]
  417ef0:	inc    eax
  417ef2:	mov    DWORD PTR [rdx+0x14],eax
  417ef5:	lea    edx,[rbp+0x4]
  417ef8:	mov    rbx,rdi
  417efb:	mov    r12d,esi
  417efe:	mov    DWORD PTR [rdi+0x20],edx
  417f01:	cmp    edx,DWORD PTR [rdi+0x24]
  417f04:	jae    417f20 <flatcc_builder_offset_vector_push@@Base+0x50>
  417f06:	mov    rax,rbp
  417f09:	add    rax,QWORD PTR [rbx+0x18]
  417f0d:	je     417f12 <flatcc_builder_offset_vector_push@@Base+0x42>
  417f0f:	mov    DWORD PTR [rax],r12d
  417f12:	pop    rbx
  417f13:	pop    rbp
  417f14:	pop    r12
  417f16:	ret    
  417f17:	nop    WORD PTR [rax+rax*1+0x0]
  417f20:	lea    esi,[rbp+0x5]
  417f23:	mov    edx,0xfffffffc
  417f28:	call   416770 <union_vector_tests@@Base+0x110>
  417f2d:	test   eax,eax
  417f2f:	je     417f06 <flatcc_builder_offset_vector_push@@Base+0x36>
  417f31:	pop    rbx
  417f32:	pop    rbp
  417f33:	xor    eax,eax
  417f35:	pop    r12
  417f37:	ret    
  417f38:	lea    rcx,[rip+0x18921]        # 430860 <_IO_stdin_used@@Base+0x4860>
  417f3f:	mov    edx,0x3a6
  417f44:	lea    rsi,[rip+0x17fe5]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  417f4b:	lea    rdi,[rip+0x1812e]        # 430080 <_IO_stdin_used@@Base+0x4080>
  417f52:	call   4061b0 <__assert_fail@plt>
  417f57:	nop    WORD PTR [rax+rax*1+0x0]

0000000000417f60 <flatcc_builder_append_offset_vector@@Base>:
  417f60:	endbr64 
  417f64:	push   r13
  417f66:	push   r12
  417f68:	push   rbp
  417f69:	push   rbx
  417f6a:	sub    rsp,0x8
  417f6e:	mov    rax,QWORD PTR [rdi+0x30]
  417f72:	cmp    WORD PTR [rax+0xe],0x5
  417f77:	jne    417fe6 <flatcc_builder_append_offset_vector@@Base+0x86>
  417f79:	mov    ecx,edx
  417f7b:	add    ecx,DWORD PTR [rax+0x14]
  417f7e:	jb     418005 <flatcc_builder_append_offset_vector@@Base+0xa5>
  417f84:	cmp    ecx,0x3fffffff
  417f8a:	ja     418005 <flatcc_builder_append_offset_vector@@Base+0xa5>
  417f8c:	mov    r12d,DWORD PTR [rdi+0x20]
  417f90:	lea    ebx,[rdx*4+0x0]
  417f97:	mov    rdx,r12
  417f9a:	add    edx,ebx
  417f9c:	mov    DWORD PTR [rax+0x14],ecx
  417f9f:	mov    rbp,rdi
  417fa2:	mov    r13,rsi
  417fa5:	mov    DWORD PTR [rdi+0x20],edx
  417fa8:	cmp    edx,DWORD PTR [rdi+0x24]
  417fab:	jae    417fd0 <flatcc_builder_append_offset_vector@@Base+0x70>
  417fad:	add    r12,QWORD PTR [rbp+0x18]
  417fb1:	je     417fc0 <flatcc_builder_append_offset_vector@@Base+0x60>
  417fb3:	mov    edx,ebx
  417fb5:	mov    rsi,r13
  417fb8:	mov    rdi,r12
  417fbb:	call   406210 <memcpy@plt>
  417fc0:	add    rsp,0x8
  417fc4:	pop    rbx
  417fc5:	pop    rbp
  417fc6:	mov    rax,r12
  417fc9:	pop    r12
  417fcb:	pop    r13
  417fcd:	ret    
  417fce:	xchg   ax,ax
  417fd0:	lea    esi,[rdx+0x1]
  417fd3:	mov    edx,0xfffffffc
  417fd8:	call   416770 <union_vector_tests@@Base+0x110>
  417fdd:	test   eax,eax
  417fdf:	je     417fad <flatcc_builder_append_offset_vector@@Base+0x4d>
  417fe1:	xor    r12d,r12d
  417fe4:	jmp    417fc0 <flatcc_builder_append_offset_vector@@Base+0x60>
  417fe6:	lea    rcx,[rip+0x18833]        # 430820 <_IO_stdin_used@@Base+0x4820>
  417fed:	mov    edx,0x3b4
  417ff2:	lea    rsi,[rip+0x17f37]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  417ff9:	lea    rdi,[rip+0x18080]        # 430080 <_IO_stdin_used@@Base+0x4080>
  418000:	call   4061b0 <__assert_fail@plt>
  418005:	call   416ad0 <flatcc_builder_default_alloc@@Base+0x300>
  41800a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000418010 <flatcc_builder_extend_string@@Base>:
  418010:	endbr64 
  418014:	push   rbp
  418015:	push   rbx
  418016:	sub    rsp,0x8
  41801a:	mov    rax,QWORD PTR [rdi+0x30]
  41801e:	cmp    WORD PTR [rax+0xe],0x6
  418023:	jne    418069 <flatcc_builder_extend_string@@Base+0x59>
  418025:	mov    edx,esi
  418027:	add    edx,DWORD PTR [rax+0x14]
  41802a:	jb     418064 <flatcc_builder_extend_string@@Base+0x54>
  41802c:	mov    ebp,DWORD PTR [rdi+0x20]
  41802f:	mov    DWORD PTR [rax+0x14],edx
  418032:	add    esi,ebp
  418034:	mov    rbx,rdi
  418037:	mov    DWORD PTR [rdi+0x20],esi
  41803a:	cmp    esi,DWORD PTR [rdi+0x24]
  41803d:	jae    418050 <flatcc_builder_extend_string@@Base+0x40>
  41803f:	mov    rax,QWORD PTR [rbx+0x18]
  418043:	add    rax,rbp
  418046:	add    rsp,0x8
  41804a:	pop    rbx
  41804b:	pop    rbp
  41804c:	ret    
  41804d:	nop    DWORD PTR [rax]
  418050:	inc    esi
  418052:	mov    edx,0xfffffffc
  418057:	call   416770 <union_vector_tests@@Base+0x110>
  41805c:	test   eax,eax
  41805e:	je     41803f <flatcc_builder_extend_string@@Base+0x2f>
  418060:	xor    eax,eax
  418062:	jmp    418046 <flatcc_builder_extend_string@@Base+0x36>
  418064:	call   416ad0 <flatcc_builder_default_alloc@@Base+0x300>
  418069:	lea    rcx,[rip+0x18780]        # 4307f0 <_IO_stdin_used@@Base+0x47f0>
  418070:	mov    edx,0x3bd
  418075:	lea    rsi,[rip+0x17eb4]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41807c:	lea    rdi,[rip+0x18035]        # 4300b8 <_IO_stdin_used@@Base+0x40b8>
  418083:	call   4061b0 <__assert_fail@plt>
  418088:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000418090 <flatcc_builder_append_string@@Base>:
  418090:	endbr64 
  418094:	push   r13
  418096:	push   r12
  418098:	push   rbp
  418099:	push   rbx
  41809a:	sub    rsp,0x8
  41809e:	mov    rax,QWORD PTR [rdi+0x30]
  4180a2:	cmp    WORD PTR [rax+0xe],0x6
  4180a7:	jne    41810b <flatcc_builder_append_string@@Base+0x7b>
  4180a9:	mov    rbp,rdx
  4180ac:	add    edx,DWORD PTR [rax+0x14]
  4180af:	jb     418106 <flatcc_builder_append_string@@Base+0x76>
  4180b1:	mov    r12d,DWORD PTR [rdi+0x20]
  4180b5:	mov    DWORD PTR [rax+0x14],edx
  4180b8:	mov    rdx,r12
  4180bb:	add    edx,ebp
  4180bd:	mov    rbx,rdi
  4180c0:	mov    r13,rsi
  4180c3:	mov    DWORD PTR [rdi+0x20],edx
  4180c6:	cmp    edx,DWORD PTR [rdi+0x24]
  4180c9:	jae    4180f0 <flatcc_builder_append_string@@Base+0x60>
  4180cb:	add    r12,QWORD PTR [rbx+0x18]
  4180cf:	je     4180de <flatcc_builder_append_string@@Base+0x4e>
  4180d1:	mov    edx,ebp
  4180d3:	mov    rsi,r13
  4180d6:	mov    rdi,r12
  4180d9:	call   406210 <memcpy@plt>
  4180de:	add    rsp,0x8
  4180e2:	pop    rbx
  4180e3:	pop    rbp
  4180e4:	mov    rax,r12
  4180e7:	pop    r12
  4180e9:	pop    r13
  4180eb:	ret    
  4180ec:	nop    DWORD PTR [rax+0x0]
  4180f0:	lea    esi,[rdx+0x1]
  4180f3:	mov    edx,0xfffffffc
  4180f8:	call   416770 <union_vector_tests@@Base+0x110>
  4180fd:	test   eax,eax
  4180ff:	je     4180cb <flatcc_builder_append_string@@Base+0x3b>
  418101:	xor    r12d,r12d
  418104:	jmp    4180de <flatcc_builder_append_string@@Base+0x4e>
  418106:	call   416ad0 <flatcc_builder_default_alloc@@Base+0x300>
  41810b:	lea    rcx,[rip+0x186be]        # 4307d0 <_IO_stdin_used@@Base+0x47d0>
  418112:	mov    edx,0x3c6
  418117:	lea    rsi,[rip+0x17e12]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41811e:	lea    rdi,[rip+0x17f93]        # 4300b8 <_IO_stdin_used@@Base+0x40b8>
  418125:	call   4061b0 <__assert_fail@plt>
  41812a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000418130 <flatcc_builder_append_string_str@@Base>:
  418130:	endbr64 
  418134:	push   rbp
  418135:	mov    rbp,rdi
  418138:	mov    rdi,rsi
  41813b:	push   rbx
  41813c:	mov    rbx,rsi
  41813f:	sub    rsp,0x8
  418143:	call   406190 <strlen@plt>
  418148:	add    rsp,0x8
  41814c:	mov    rsi,rbx
  41814f:	pop    rbx
  418150:	mov    rdi,rbp
  418153:	mov    rdx,rax
  418156:	pop    rbp
  418157:	jmp    418090 <flatcc_builder_append_string@@Base>
  41815c:	nop    DWORD PTR [rax+0x0]

0000000000418160 <flatcc_builder_append_string_strn@@Base>:
  418160:	endbr64 
  418164:	push   r12
  418166:	mov    r12,rdi
  418169:	push   rbp
  41816a:	mov    rbp,rsi
  41816d:	mov    rdi,rbp
  418170:	push   rbx
  418171:	xor    esi,esi
  418173:	mov    rbx,rdx
  418176:	call   4061d0 <memchr@plt>
  41817b:	mov    rdx,rax
  41817e:	sub    rdx,rbp
  418181:	test   rax,rax
  418184:	cmovne rbx,rdx
  418188:	mov    rsi,rbp
  41818b:	mov    rdx,rbx
  41818e:	pop    rbx
  41818f:	pop    rbp
  418190:	mov    rdi,r12
  418193:	pop    r12
  418195:	jmp    418090 <flatcc_builder_append_string@@Base>
  41819a:	nop    WORD PTR [rax+rax*1+0x0]

00000000004181a0 <flatcc_builder_truncate_vector@@Base>:
  4181a0:	endbr64 
  4181a4:	sub    rsp,0x8
  4181a8:	mov    rax,QWORD PTR [rdi+0x30]
  4181ac:	cmp    WORD PTR [rax+0xe],0x4
  4181b1:	jne    4181e6 <flatcc_builder_truncate_vector@@Base+0x46>
  4181b3:	mov    ecx,DWORD PTR [rax+0x14]
  4181b6:	mov    rdx,rcx
  4181b9:	cmp    rcx,rsi
  4181bc:	jb     418205 <flatcc_builder_truncate_vector@@Base+0x65>
  4181be:	sub    edx,esi
  4181c0:	mov    DWORD PTR [rax+0x14],edx
  4181c3:	imul   esi,DWORD PTR [rax+0x10]
  4181c7:	mov    eax,DWORD PTR [rdi+0x20]
  4181ca:	mov    edx,esi
  4181cc:	sub    eax,esi
  4181ce:	mov    DWORD PTR [rdi+0x20],eax
  4181d1:	add    rax,QWORD PTR [rdi+0x18]
  4181d5:	mov    rdi,rax
  4181d8:	xor    esi,esi
  4181da:	call   4061c0 <memset@plt>
  4181df:	xor    eax,eax
  4181e1:	add    rsp,0x8
  4181e5:	ret    
  4181e6:	lea    rcx,[rip+0x185c3]        # 4307b0 <_IO_stdin_used@@Base+0x47b0>
  4181ed:	mov    edx,0x3d9
  4181f2:	lea    rsi,[rip+0x17d37]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  4181f9:	lea    rdi,[rip+0x17e10]        # 430010 <_IO_stdin_used@@Base+0x4010>
  418200:	call   4061b0 <__assert_fail@plt>
  418205:	lea    rcx,[rip+0x185a4]        # 4307b0 <_IO_stdin_used@@Base+0x47b0>
  41820c:	mov    edx,0x3da
  418211:	lea    rsi,[rip+0x17d18]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  418218:	lea    rdi,[rip+0x17ec9]        # 4300e8 <_IO_stdin_used@@Base+0x40e8>
  41821f:	call   4061b0 <__assert_fail@plt>
  418224:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41822f:	nop

0000000000418230 <flatcc_builder_truncate_offset_vector@@Base>:
  418230:	endbr64 
  418234:	sub    rsp,0x8
  418238:	mov    rax,QWORD PTR [rdi+0x30]
  41823c:	cmp    WORD PTR [rax+0xe],0x5
  418241:	jne    418272 <flatcc_builder_truncate_offset_vector@@Base+0x42>
  418243:	mov    edx,DWORD PTR [rax+0x14]
  418246:	cmp    edx,esi
  418248:	jb     418291 <flatcc_builder_truncate_offset_vector@@Base+0x61>
  41824a:	sub    edx,esi
  41824c:	mov    DWORD PTR [rax+0x14],edx
  41824f:	imul   esi,DWORD PTR [rax+0x10]
  418253:	mov    eax,DWORD PTR [rdi+0x20]
  418256:	mov    edx,esi
  418258:	sub    eax,esi
  41825a:	mov    DWORD PTR [rdi+0x20],eax
  41825d:	add    rax,QWORD PTR [rdi+0x18]
  418261:	mov    rdi,rax
  418264:	xor    esi,esi
  418266:	call   4061c0 <memset@plt>
  41826b:	xor    eax,eax
  41826d:	add    rsp,0x8
  418271:	ret    
  418272:	lea    rcx,[rip+0x18507]        # 430780 <_IO_stdin_used@@Base+0x4780>
  418279:	mov    edx,0x3e2
  41827e:	lea    rsi,[rip+0x17cab]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  418285:	lea    rdi,[rip+0x17df4]        # 430080 <_IO_stdin_used@@Base+0x4080>
  41828c:	call   4061b0 <__assert_fail@plt>
  418291:	lea    rcx,[rip+0x184e8]        # 430780 <_IO_stdin_used@@Base+0x4780>
  418298:	mov    edx,0x3e3
  41829d:	lea    rsi,[rip+0x17c8c]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  4182a4:	lea    rdi,[rip+0x17e65]        # 430110 <_IO_stdin_used@@Base+0x4110>
  4182ab:	call   4061b0 <__assert_fail@plt>

00000000004182b0 <flatcc_builder_truncate_string@@Base>:
  4182b0:	endbr64 
  4182b4:	sub    rsp,0x8
  4182b8:	mov    rdx,QWORD PTR [rdi+0x30]
  4182bc:	cmp    WORD PTR [rdx+0xe],0x6
  4182c1:	jne    4182f3 <flatcc_builder_truncate_string@@Base+0x43>
  4182c3:	mov    ecx,DWORD PTR [rdx+0x14]
  4182c6:	mov    rax,rcx
  4182c9:	cmp    rcx,rsi
  4182cc:	jb     418312 <flatcc_builder_truncate_string@@Base+0x62>
  4182ce:	sub    eax,esi
  4182d0:	mov    DWORD PTR [rdx+0x14],eax
  4182d3:	mov    rdx,rsi
  4182d6:	mov    eax,DWORD PTR [rdi+0x20]
  4182d9:	sub    eax,esi
  4182db:	mov    DWORD PTR [rdi+0x20],eax
  4182de:	add    rax,QWORD PTR [rdi+0x18]
  4182e2:	mov    rdi,rax
  4182e5:	xor    esi,esi
  4182e7:	call   4061c0 <memset@plt>
  4182ec:	xor    eax,eax
  4182ee:	add    rsp,0x8
  4182f2:	ret    
  4182f3:	lea    rcx,[rip+0x18466]        # 430760 <_IO_stdin_used@@Base+0x4760>
  4182fa:	mov    edx,0x3eb
  4182ff:	lea    rsi,[rip+0x17c2a]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  418306:	lea    rdi,[rip+0x17dab]        # 4300b8 <_IO_stdin_used@@Base+0x40b8>
  41830d:	call   4061b0 <__assert_fail@plt>
  418312:	lea    rcx,[rip+0x18447]        # 430760 <_IO_stdin_used@@Base+0x4760>
  418319:	mov    edx,0x3ec
  41831e:	lea    rsi,[rip+0x17c0b]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  418325:	lea    rdi,[rip+0x17e24]        # 430150 <_IO_stdin_used@@Base+0x4150>
  41832c:	call   4061b0 <__assert_fail@plt>
  418331:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41833c:	nop    DWORD PTR [rax+0x0]

0000000000418340 <flatcc_builder_start_vector@@Base>:
  418340:	endbr64 
  418344:	push   r12
  418346:	cmp    dx,0x4
  41834a:	mov    r12,rcx
  41834d:	push   rbp
  41834e:	mov    rbp,rsi
  418351:	mov    esi,0x4
  418356:	push   rbx
  418357:	cmovae esi,edx
  41835a:	mov    rbx,rdi
  41835d:	movzx  esi,si
  418360:	call   416b00 <flatcc_builder_default_alloc@@Base+0x330>
  418365:	test   eax,eax
  418367:	jne    4183b0 <flatcc_builder_start_vector@@Base+0x70>
  418369:	mov    rsi,QWORD PTR [rbx+0x30]
  41836d:	mov    edx,0x4
  418372:	mov    WORD PTR [rsi+0xe],dx
  418376:	mov    edx,DWORD PTR [rbx+0x28]
  418379:	mov    DWORD PTR [rsi+0x10],ebp
  41837c:	mov    rcx,rdx
  41837f:	add    rdx,QWORD PTR [rbx+0x68]
  418383:	mov    DWORD PTR [rsi+0x14],0x0
  41838a:	mov    DWORD PTR [rsi+0x18],r12d
  41838e:	mov    QWORD PTR [rbx+0x18],rdx
  418392:	mov    edx,DWORD PTR [rbx+0x70]
  418395:	sub    edx,ecx
  418397:	mov    ecx,0xfffffffc
  41839c:	cmp    edx,ecx
  41839e:	cmova  edx,ecx
  4183a1:	mov    DWORD PTR [rbx+0x24],edx
  4183a4:	mov    DWORD PTR [rsi+0x4],ecx
  4183a7:	pop    rbx
  4183a8:	pop    rbp
  4183a9:	pop    r12
  4183ab:	ret    
  4183ac:	nop    DWORD PTR [rax+0x0]
  4183b0:	mov    eax,0xffffffff
  4183b5:	jmp    4183a7 <flatcc_builder_start_vector@@Base+0x67>
  4183b7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004183c0 <flatcc_builder_start_offset_vector@@Base>:
  4183c0:	endbr64 
  4183c4:	push   rbx
  4183c5:	mov    esi,0x4
  4183ca:	mov    rbx,rdi
  4183cd:	call   416b00 <flatcc_builder_default_alloc@@Base+0x330>
  4183d2:	test   eax,eax
  4183d4:	jne    418410 <flatcc_builder_start_offset_vector@@Base+0x50>
  4183d6:	mov    rcx,QWORD PTR [rbx+0x30]
  4183da:	xor    edx,edx
  4183dc:	mov    QWORD PTR [rcx+0xe],0x40005
  4183e4:	mov    WORD PTR [rcx+0x16],dx
  4183e8:	mov    edx,DWORD PTR [rbx+0x28]
  4183eb:	mov    rsi,rdx
  4183ee:	add    rdx,QWORD PTR [rbx+0x68]
  4183f2:	mov    QWORD PTR [rbx+0x18],rdx
  4183f6:	mov    edx,DWORD PTR [rbx+0x70]
  4183f9:	sub    edx,esi
  4183fb:	mov    esi,0xfffffffc
  418400:	cmp    edx,esi
  418402:	cmova  edx,esi
  418405:	mov    DWORD PTR [rbx+0x24],edx
  418408:	mov    DWORD PTR [rcx+0x4],esi
  41840b:	pop    rbx
  41840c:	ret    
  41840d:	nop    DWORD PTR [rax]
  418410:	mov    eax,0xffffffff
  418415:	pop    rbx
  418416:	ret    
  418417:	nop    WORD PTR [rax+rax*1+0x0]

0000000000418420 <flatcc_builder_start_string@@Base>:
  418420:	endbr64 
  418424:	push   rbx
  418425:	mov    esi,0x1
  41842a:	mov    rbx,rdi
  41842d:	call   416b00 <flatcc_builder_default_alloc@@Base+0x330>
  418432:	test   eax,eax
  418434:	jne    418470 <flatcc_builder_start_string@@Base+0x50>
  418436:	mov    rcx,QWORD PTR [rbx+0x30]
  41843a:	xor    edx,edx
  41843c:	mov    QWORD PTR [rcx+0xe],0x10006
  418444:	mov    WORD PTR [rcx+0x16],dx
  418448:	mov    edx,DWORD PTR [rbx+0x28]
  41844b:	mov    rsi,rdx
  41844e:	add    rdx,QWORD PTR [rbx+0x68]
  418452:	mov    QWORD PTR [rbx+0x18],rdx
  418456:	mov    edx,DWORD PTR [rbx+0x70]
  418459:	sub    edx,esi
  41845b:	mov    esi,0xfffffffc
  418460:	cmp    edx,esi
  418462:	cmova  edx,esi
  418465:	mov    DWORD PTR [rbx+0x24],edx
  418468:	mov    DWORD PTR [rcx+0x4],esi
  41846b:	pop    rbx
  41846c:	ret    
  41846d:	nop    DWORD PTR [rax]
  418470:	mov    eax,0xffffffff
  418475:	pop    rbx
  418476:	ret    
  418477:	nop    WORD PTR [rax+rax*1+0x0]

0000000000418480 <flatcc_builder_reserve_table@@Base>:
  418480:	endbr64 
  418484:	push   r12
  418486:	push   rbp
  418487:	push   rbx
  418488:	test   esi,esi
  41848a:	js     41853f <flatcc_builder_reserve_table@@Base+0xbf>
  418490:	mov    rax,QWORD PTR [rdi+0x30]
  418494:	lea    r12d,[rsi+rsi*1+0x4]
  418499:	movzx  edx,WORD PTR [rax+0x1c]
  41849d:	mov    eax,DWORD PTR [rax+0x10]
  4184a0:	mov    rbx,rdi
  4184a3:	lea    ebp,[rax+rdx*2]
  4184a6:	mov    edx,r12d
  4184a9:	add    rdx,rbp
  4184ac:	cmp    rdx,QWORD PTR [rdi+0x60]
  4184b0:	ja     4184f0 <flatcc_builder_reserve_table@@Base+0x70>
  4184b2:	add    rbp,QWORD PTR [rbx+0x58]
  4184b6:	je     418530 <flatcc_builder_reserve_table@@Base+0xb0>
  4184b8:	mov    rax,QWORD PTR [rbx+0x30]
  4184bc:	add    rbp,0x4
  4184c0:	mov    QWORD PTR [rbx+0x8],rbp
  4184c4:	mov    ebp,DWORD PTR [rax+0x14]
  4184c7:	lea    edx,[r12-0x3]
  4184cc:	add    rdx,rbp
  4184cf:	cmp    rdx,QWORD PTR [rbx+0x90]
  4184d6:	ja     418510 <flatcc_builder_reserve_table@@Base+0x90>
  4184d8:	add    rbp,QWORD PTR [rbx+0x88]
  4184df:	sete   al
  4184e2:	mov    QWORD PTR [rbx],rbp
  4184e5:	movzx  eax,al
  4184e8:	neg    eax
  4184ea:	pop    rbx
  4184eb:	pop    rbp
  4184ec:	pop    r12
  4184ee:	ret    
  4184ef:	nop
  4184f0:	lea    rsi,[rdi+0x58]
  4184f4:	mov    rdi,QWORD PTR [rdi+0x40]
  4184f8:	xor    r8d,r8d
  4184fb:	mov    ecx,0x1
  418500:	call   QWORD PTR [rbx+0x50]
  418503:	test   eax,eax
  418505:	je     4184b2 <flatcc_builder_reserve_table@@Base+0x32>
  418507:	call   416900 <flatcc_builder_default_alloc@@Base+0x130>
  41850c:	nop    DWORD PTR [rax+0x0]
  418510:	mov    rdi,QWORD PTR [rbx+0x40]
  418514:	xor    ecx,ecx
  418516:	lea    rsi,[rbx+0x88]
  41851d:	mov    r8d,0x3
  418523:	call   QWORD PTR [rbx+0x50]
  418526:	test   eax,eax
  418528:	je     4184d8 <flatcc_builder_reserve_table@@Base+0x58>
  41852a:	jmp    418507 <flatcc_builder_reserve_table@@Base+0x87>
  41852c:	nop    DWORD PTR [rax+0x0]
  418530:	mov    QWORD PTR [rbx+0x8],0x0
  418538:	mov    eax,0xffffffff
  41853d:	jmp    4184ea <flatcc_builder_reserve_table@@Base+0x6a>
  41853f:	lea    rcx,[rip+0x181fa]        # 430740 <_IO_stdin_used@@Base+0x4740>
  418546:	mov    edx,0x429
  41854b:	lea    rsi,[rip+0x179de]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  418552:	lea    rdi,[rip+0x17dca]        # 430323 <_IO_stdin_used@@Base+0x4323>
  418559:	call   4061b0 <__assert_fail@plt>
  41855e:	xchg   ax,ax

0000000000418560 <flatcc_builder_start_table@@Base>:
  418560:	endbr64 
  418564:	push   r13
  418566:	push   r12
  418568:	mov    r12d,esi
  41856b:	mov    esi,0x4
  418570:	push   rbp
  418571:	push   rbx
  418572:	mov    rbx,rdi
  418575:	sub    rsp,0x8
  418579:	call   416b00 <flatcc_builder_default_alloc@@Base+0x330>
  41857e:	test   eax,eax
  418580:	jne    418698 <flatcc_builder_start_table@@Base+0x138>
  418586:	mov    rsi,QWORD PTR [rbx]
  418589:	mov    rdx,QWORD PTR [rbx+0x30]
  41858d:	sub    rsi,QWORD PTR [rbx+0x88]
  418594:	mov    rcx,QWORD PTR [rbx+0x8]
  418598:	mov    ebp,eax
  41859a:	mov    rax,QWORD PTR [rbx+0x58]
  41859e:	mov    DWORD PTR [rdx+0x14],esi
  4185a1:	mov    esi,DWORD PTR [rbx+0x14]
  4185a4:	sub    rcx,rax
  4185a7:	mov    DWORD PTR [rdx+0x18],esi
  4185aa:	movzx  esi,WORD PTR [rbx+0x10]
  4185ae:	xor    edi,edi
  4185b0:	mov    r8d,0x3
  4185b6:	mov    DWORD PTR [rdx+0x10],ecx
  4185b9:	mov    WORD PTR [rdx+0x1c],si
  4185bd:	lea    r13d,[rcx+rsi*2]
  4185c1:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  4185c8:	mov    WORD PTR [rbx+0x10],di
  4185cc:	mov    WORD PTR [rdx+0xe],r8w
  4185d1:	lea    edx,[r12+r12*1+0x4]
  4185d6:	add    rdx,r13
  4185d9:	cmp    rdx,QWORD PTR [rbx+0x60]
  4185dd:	jbe    4185fe <flatcc_builder_start_table@@Base+0x9e>
  4185df:	mov    rdi,QWORD PTR [rbx+0x40]
  4185e3:	xor    r8d,r8d
  4185e6:	lea    rsi,[rbx+0x58]
  4185ea:	mov    ecx,0x1
  4185ef:	call   QWORD PTR [rbx+0x50]
  4185f2:	test   eax,eax
  4185f4:	jne    41868a <flatcc_builder_start_table@@Base+0x12a>
  4185fa:	mov    rax,QWORD PTR [rbx+0x58]
  4185fe:	add    rax,r13
  418601:	je     418690 <flatcc_builder_start_table@@Base+0x130>
  418607:	add    rax,0x4
  41860b:	mov    QWORD PTR [rbx+0x8],rax
  41860f:	mov    rax,QWORD PTR [rbx+0x30]
  418613:	lea    edx,[r12+r12*1+0x1]
  418618:	mov    r13d,DWORD PTR [rax+0x14]
  41861c:	add    rdx,r13
  41861f:	cmp    rdx,QWORD PTR [rbx+0x90]
  418626:	ja     418670 <flatcc_builder_start_table@@Base+0x110>
  418628:	add    r13,QWORD PTR [rbx+0x88]
  41862f:	mov    QWORD PTR [rbx],r13
  418632:	je     418698 <flatcc_builder_start_table@@Base+0x138>
  418634:	mov    eax,DWORD PTR [rbx+0x28]
  418637:	mov    rdx,rax
  41863a:	add    rax,QWORD PTR [rbx+0x68]
  41863e:	mov    QWORD PTR [rbx+0x18],rax
  418642:	mov    eax,DWORD PTR [rbx+0x70]
  418645:	sub    eax,edx
  418647:	cmp    eax,0xfffc
  41864c:	mov    edx,0xfffc
  418651:	cmova  eax,edx
  418654:	mov    DWORD PTR [rbx+0x24],eax
  418657:	mov    rax,QWORD PTR [rbx+0x30]
  41865b:	mov    DWORD PTR [rax+0x4],0xfffc
  418662:	add    rsp,0x8
  418666:	pop    rbx
  418667:	mov    eax,ebp
  418669:	pop    rbp
  41866a:	pop    r12
  41866c:	pop    r13
  41866e:	ret    
  41866f:	nop
  418670:	mov    rdi,QWORD PTR [rbx+0x40]
  418674:	xor    ecx,ecx
  418676:	lea    rsi,[rbx+0x88]
  41867d:	mov    r8d,0x3
  418683:	call   QWORD PTR [rbx+0x50]
  418686:	test   eax,eax
  418688:	je     418628 <flatcc_builder_start_table@@Base+0xc8>
  41868a:	call   416900 <flatcc_builder_default_alloc@@Base+0x130>
  41868f:	nop
  418690:	mov    QWORD PTR [rbx+0x8],0x0
  418698:	mov    ebp,0xffffffff
  41869d:	jmp    418662 <flatcc_builder_start_table@@Base+0x102>
  41869f:	nop

00000000004186a0 <flatcc_builder_create_vtable@@Base>:
  4186a0:	endbr64 
  4186a4:	push   rbp
  4186a5:	mov    rbp,rdi
  4186a8:	push   rbx
  4186a9:	sub    rsp,0xa8
  4186b0:	mov    rax,QWORD PTR fs:0x28
  4186b9:	mov    QWORD PTR [rsp+0x98],rax
  4186c1:	xor    eax,eax
  4186c3:	mov    QWORD PTR [rsp],0x0
  4186cb:	mov    DWORD PTR [rsp+0x8],0x0
  4186d3:	mov    eax,DWORD PTR [rdi+0x100]
  4186d9:	test   dx,dx
  4186dc:	je     418760 <flatcc_builder_create_vtable@@Base+0xc0>
  4186e2:	movzx  r8d,dx
  4186e6:	mov    QWORD PTR [rsp],r8
  4186ea:	mov    QWORD PTR [rsp+0x10],rsi
  4186ef:	mov    QWORD PTR [rsp+0x18],r8
  4186f4:	mov    DWORD PTR [rsp+0x8],0x1
  4186fc:	movzx  edx,dx
  4186ff:	test   eax,eax
  418701:	je     418790 <flatcc_builder_create_vtable@@Base+0xf0>
  418707:	mov    eax,DWORD PTR [rbp+0xf0]
  41870d:	mov    ebx,eax
  41870f:	sub    ebx,edx
  418711:	cmp    eax,ebx
  418713:	jle    41876e <flatcc_builder_create_vtable@@Base+0xce>
  418715:	mov    rdi,QWORD PTR [rbp+0x38]
  418719:	mov    edx,DWORD PTR [rsp+0x8]
  41871d:	lea    rsi,[rsp+0x10]
  418722:	mov    ecx,ebx
  418724:	call   QWORD PTR [rbp+0x48]
  418727:	test   eax,eax
  418729:	jne    4187e0 <flatcc_builder_create_vtable@@Base+0x140>
  41872f:	cmp    ebx,0x1
  418732:	mov    DWORD PTR [rbp+0xf0],ebx
  418738:	sbb    ebx,0xffffffff
  41873b:	mov    rcx,QWORD PTR [rsp+0x98]
  418743:	xor    rcx,QWORD PTR fs:0x28
  41874c:	mov    eax,ebx
  41874e:	jne    4187db <flatcc_builder_create_vtable@@Base+0x13b>
  418754:	add    rsp,0xa8
  41875b:	pop    rbx
  41875c:	pop    rbp
  41875d:	ret    
  41875e:	xchg   ax,ax
  418760:	test   eax,eax
  418762:	jne    41876e <flatcc_builder_create_vtable@@Base+0xce>
  418764:	mov    eax,DWORD PTR [rdi+0x124]
  41876a:	test   eax,eax
  41876c:	je     4187d0 <flatcc_builder_create_vtable@@Base+0x130>
  41876e:	lea    rcx,[rip+0x181fb]        # 430970 <_IO_stdin_used@@Base+0x4970>
  418775:	mov    edx,0x287
  41877a:	lea    rsi,[rip+0x177af]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  418781:	lea    rdi,[rip+0x17b3f]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  418788:	call   4061b0 <__assert_fail@plt>
  41878d:	nop    DWORD PTR [rax]
  418790:	mov    ecx,DWORD PTR [rdi+0x124]
  418796:	test   ecx,ecx
  418798:	jne    418707 <flatcc_builder_create_vtable@@Base+0x67>
  41879e:	mov    ebx,DWORD PTR [rdi+0xf4]
  4187a4:	add    edx,ebx
  4187a6:	mov    DWORD PTR [rdi+0xf4],edx
  4187ac:	mov    rdi,QWORD PTR [rbp+0x38]
  4187b0:	mov    edx,DWORD PTR [rsp+0x8]
  4187b4:	lea    rsi,[rsp+0x10]
  4187b9:	mov    ecx,ebx
  4187bb:	call   QWORD PTR [rbp+0x48]
  4187be:	test   eax,eax
  4187c0:	jne    4187e5 <flatcc_builder_create_vtable@@Base+0x145>
  4187c2:	inc    ebx
  4187c4:	jmp    41873b <flatcc_builder_create_vtable@@Base+0x9b>
  4187c9:	nop    DWORD PTR [rax+0x0]
  4187d0:	mov    ebx,DWORD PTR [rbp+0xf4]
  4187d6:	xor    r8d,r8d
  4187d9:	jmp    4187ac <flatcc_builder_create_vtable@@Base+0x10c>
  4187db:	call   4061a0 <__stack_chk_fail@plt>
  4187e0:	call   416aa0 <flatcc_builder_default_alloc@@Base+0x2d0>
  4187e5:	call   416930 <flatcc_builder_default_alloc@@Base+0x160>
  4187ea:	nop    WORD PTR [rax+rax*1+0x0]

00000000004187f0 <flatcc_builder_create_cached_vtable@@Base>:
  4187f0:	endbr64 
  4187f4:	push   r15
  4187f6:	mov    r15,rdi
  4187f9:	push   r14
  4187fb:	push   r13
  4187fd:	push   r12
  4187ff:	movzx  r12d,dx
  418803:	push   rbp
  418804:	mov    ebp,ecx
  418806:	push   rbx
  418807:	sub    rsp,0x38
  41880b:	mov    rbx,QWORD PTR [rdi+0xd8]
  418812:	mov    QWORD PTR [rsp+0x18],rsi
  418817:	mov    DWORD PTR [rsp+0x2c],edx
  41881b:	test   rbx,rbx
  41881e:	je     4189b8 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
  418824:	mov    eax,0x20
  418829:	sub    eax,ebx
  41882b:	shrx   ebp,ebp,eax
  418830:	mov    rax,QWORD PTR [r15+0xa8]
  418837:	lea    r14,[rax+rbp*4]
  41883b:	test   r14,r14
  41883e:	je     4189a0 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  418844:	mov    ebp,DWORD PTR [r14]
  418847:	test   ebp,ebp
  418849:	je     418a90 <flatcc_builder_create_cached_vtable@@Base+0x2a0>
  41884f:	mov    QWORD PTR [rsp+0x20],0x0
  418858:	mov    r11,QWORD PTR [r15+0xb8]
  41885f:	mov    r8,QWORD PTR [r15+0x78]
  418863:	mov    r13,r14
  418866:	mov    ebx,ebp
  418868:	add    rbx,r11
  41886b:	mov    esi,DWORD PTR [rbx+0x8]
  41886e:	add    rsi,r8
  418871:	cmp    WORD PTR [rsi],r12w
  418875:	jne    418960 <flatcc_builder_create_cached_vtable@@Base+0x170>
  41887b:	mov    rdi,QWORD PTR [rsp+0x18]
  418880:	movzx  edx,r12w
  418884:	mov    QWORD PTR [rsp+0x10],r8
  418889:	mov    QWORD PTR [rsp+0x8],r11
  41888e:	call   4061e0 <memcmp@plt>
  418893:	test   eax,eax
  418895:	mov    r11,QWORD PTR [rsp+0x8]
  41889a:	mov    r8,QWORD PTR [rsp+0x10]
  41889f:	jne    418960 <flatcc_builder_create_cached_vtable@@Base+0x170>
  4188a5:	mov    eax,DWORD PTR [r15+0x100]
  4188ac:	cmp    DWORD PTR [rbx+0x4],eax
  4188af:	je     418970 <flatcc_builder_create_cached_vtable@@Base+0x180>
  4188b5:	mov    QWORD PTR [rsp+0x20],rbx
  4188ba:	mov    ebp,DWORD PTR [rbx+0xc]
  4188bd:	lea    r13,[rbx+0xc]
  4188c1:	test   ebp,ebp
  4188c3:	jne    418866 <flatcc_builder_create_cached_vtable@@Base+0x76>
  4188c5:	mov    ebp,DWORD PTR [r15+0xe4]
  4188cc:	lea    rdx,[rbp+0x10]
  4188d0:	cmp    rdx,QWORD PTR [r15+0xc0]
  4188d7:	jbe    4188f8 <flatcc_builder_create_cached_vtable@@Base+0x108>
  4188d9:	mov    rdi,QWORD PTR [r15+0x40]
  4188dd:	xor    ecx,ecx
  4188df:	lea    rsi,[r15+0xb8]
  4188e6:	mov    r8d,0x6
  4188ec:	call   QWORD PTR [r15+0x50]
  4188f0:	test   eax,eax
  4188f2:	jne    418a84 <flatcc_builder_create_cached_vtable@@Base+0x294>
  4188f8:	add    rbp,QWORD PTR [r15+0xb8]
  4188ff:	je     4189a0 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  418905:	mov    eax,DWORD PTR [r15+0xe4]
  41890c:	mov    rsi,QWORD PTR [rsp+0x18]
  418911:	lea    edx,[rax+0x10]
  418914:	mov    DWORD PTR [r15+0xe4],edx
  41891b:	mov    edx,DWORD PTR [r15+0x100]
  418922:	mov    rdi,r15
  418925:	mov    DWORD PTR [rbp+0x4],edx
  418928:	mov    edx,DWORD PTR [r14]
  41892b:	mov    DWORD PTR [rbp+0xc],edx
  41892e:	mov    DWORD PTR [r14],eax
  418931:	mov    eax,DWORD PTR [rsp+0x2c]
  418935:	movzx  edx,ax
  418938:	movzx  ebx,ax
  41893b:	call   4186a0 <flatcc_builder_create_vtable@@Base>
  418940:	mov    DWORD PTR [rbp+0x0],eax
  418943:	test   eax,eax
  418945:	je     4189a0 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  418947:	mov    rdi,QWORD PTR [rsp+0x20]
  41894c:	test   rdi,rdi
  41894f:	je     418aa5 <flatcc_builder_create_cached_vtable@@Base+0x2b5>
  418955:	mov    edx,DWORD PTR [rdi+0x8]
  418958:	mov    DWORD PTR [rbp+0x8],edx
  41895b:	jmp    418987 <flatcc_builder_create_cached_vtable@@Base+0x197>
  41895d:	nop    DWORD PTR [rax]
  418960:	lea    r13,[rbx+0xc]
  418964:	mov    ebp,DWORD PTR [rbx+0xc]
  418967:	jmp    4188c1 <flatcc_builder_create_cached_vtable@@Base+0xd1>
  41896c:	nop    DWORD PTR [rax+0x0]
  418970:	cmp    r14,r13
  418973:	je     418985 <flatcc_builder_create_cached_vtable@@Base+0x195>
  418975:	mov    eax,DWORD PTR [rbx+0xc]
  418978:	mov    DWORD PTR [r13+0x0],eax
  41897c:	mov    eax,DWORD PTR [r14]
  41897f:	mov    DWORD PTR [rbx+0xc],eax
  418982:	mov    DWORD PTR [r14],ebp
  418985:	mov    eax,DWORD PTR [rbx]
  418987:	add    rsp,0x38
  41898b:	pop    rbx
  41898c:	pop    rbp
  41898d:	pop    r12
  41898f:	pop    r13
  418991:	pop    r14
  418993:	pop    r15
  418995:	ret    
  418996:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4189a0:	add    rsp,0x38
  4189a4:	pop    rbx
  4189a5:	pop    rbp
  4189a6:	pop    r12
  4189a8:	pop    r13
  4189aa:	pop    r14
  4189ac:	xor    eax,eax
  4189ae:	pop    r15
  4189b0:	ret    
  4189b1:	nop    DWORD PTR [rax+0x0]
  4189b8:	mov    eax,DWORD PTR [rdi+0xe4]
  4189be:	lea    r13,[rdi+0xa8]
  4189c5:	test   eax,eax
  4189c7:	jne    418b2f <flatcc_builder_create_cached_vtable@@Base+0x33f>
  4189cd:	cmp    QWORD PTR [rdi+0xc0],0xf
  4189d5:	jbe    418a60 <flatcc_builder_create_cached_vtable@@Base+0x270>
  4189db:	cmp    QWORD PTR [r15+0xb8],0x0
  4189e3:	je     4189a0 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  4189e5:	mov    DWORD PTR [r15+0xe4],0x10
  4189f0:	mov    rdi,QWORD PTR [r15+0x40]
  4189f4:	mov    r8d,0x5
  4189fa:	mov    ecx,0x1
  4189ff:	mov    edx,0x100
  418a04:	mov    rsi,r13
  418a07:	call   QWORD PTR [r15+0x50]
  418a0b:	test   eax,eax
  418a0d:	jne    4189a0 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  418a0f:	mov    rcx,QWORD PTR [r15+0xb0]
  418a16:	mov    eax,0x100
  418a1b:	jmp    418a23 <flatcc_builder_create_cached_vtable@@Base+0x233>
  418a1d:	nop    DWORD PTR [rax]
  418a20:	mov    rax,rdx
  418a23:	lea    rdx,[rax+rax*1]
  418a27:	cmp    rdx,rcx
  418a2a:	jbe    418a20 <flatcc_builder_create_cached_vtable@@Base+0x230>
  418a2c:	shr    rax,0x2
  418a30:	cmp    rax,0x1
  418a34:	jbe    418a9e <flatcc_builder_create_cached_vtable@@Base+0x2ae>
  418a36:	mov    esi,0x1
  418a3b:	nop    DWORD PTR [rax+rax*1+0x0]
  418a40:	inc    rbx
  418a43:	shlx   rdx,rsi,rbx
  418a48:	cmp    rax,rdx
  418a4b:	ja     418a40 <flatcc_builder_create_cached_vtable@@Base+0x250>
  418a4d:	mov    eax,0x20
  418a52:	sub    eax,ebx
  418a54:	mov    QWORD PTR [r15+0xd8],rbx
  418a5b:	jmp    41882b <flatcc_builder_create_cached_vtable@@Base+0x3b>
  418a60:	lea    rsi,[rdi+0xb8]
  418a67:	mov    rdi,QWORD PTR [rdi+0x40]
  418a6b:	xor    ecx,ecx
  418a6d:	mov    r8d,0x6
  418a73:	mov    edx,0x10
  418a78:	call   QWORD PTR [r15+0x50]
  418a7c:	test   eax,eax
  418a7e:	je     4189db <flatcc_builder_create_cached_vtable@@Base+0x1eb>
  418a84:	call   416900 <flatcc_builder_default_alloc@@Base+0x130>
  418a89:	nop    DWORD PTR [rax+0x0]
  418a90:	mov    QWORD PTR [rsp+0x20],0x0
  418a99:	jmp    4188c5 <flatcc_builder_create_cached_vtable@@Base+0xd5>
  418a9e:	mov    eax,0x20
  418aa3:	jmp    418a54 <flatcc_builder_create_cached_vtable@@Base+0x264>
  418aa5:	mov    rax,QWORD PTR [r15+0x118]
  418aac:	mov    r14d,DWORD PTR [r15+0xe0]
  418ab3:	test   rax,rax
  418ab6:	je     418ac1 <flatcc_builder_create_cached_vtable@@Base+0x2d1>
  418ab8:	lea    edx,[rbx+r14*1]
  418abc:	cmp    rax,rdx
  418abf:	jb     418b17 <flatcc_builder_create_cached_vtable@@Base+0x327>
  418ac1:	lea    rdx,[r12+r14*1]
  418ac5:	cmp    rdx,QWORD PTR [r15+0x80]
  418acc:	jbe    418ae6 <flatcc_builder_create_cached_vtable@@Base+0x2f6>
  418ace:	mov    rdi,QWORD PTR [r15+0x40]
  418ad2:	xor    ecx,ecx
  418ad4:	lea    rsi,[r15+0x78]
  418ad8:	mov    r8d,0x2
  418ade:	call   QWORD PTR [r15+0x50]
  418ae2:	test   eax,eax
  418ae4:	jne    418a84 <flatcc_builder_create_cached_vtable@@Base+0x294>
  418ae6:	mov    rdi,r14
  418ae9:	add    rdi,QWORD PTR [r15+0x78]
  418aed:	je     418b27 <flatcc_builder_create_cached_vtable@@Base+0x337>
  418aef:	mov    eax,DWORD PTR [r15+0xe0]
  418af6:	mov    rsi,QWORD PTR [rsp+0x18]
  418afb:	add    ebx,eax
  418afd:	mov    DWORD PTR [rbp+0x8],eax
  418b00:	mov    DWORD PTR [r15+0xe0],ebx
  418b07:	mov    rdx,r12
  418b0a:	call   406210 <memcpy@plt>
  418b0f:	mov    eax,DWORD PTR [rbp+0x0]
  418b12:	jmp    418987 <flatcc_builder_create_cached_vtable@@Base+0x197>
  418b17:	mov    rdi,r15
  418b1a:	call   416e50 <flatcc_builder_flush_vtable_cache@@Base>
  418b1f:	mov    eax,DWORD PTR [rbp+0x0]
  418b22:	jmp    418987 <flatcc_builder_create_cached_vtable@@Base+0x197>
  418b27:	or     eax,0xffffffff
  418b2a:	jmp    418987 <flatcc_builder_create_cached_vtable@@Base+0x197>
  418b2f:	lea    rcx,[rip+0x17bfa]        # 430730 <_IO_stdin_used@@Base+0x4730>
  418b36:	mov    edx,0x156
  418b3b:	lea    rsi,[rip+0x173ee]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  418b42:	lea    rdi,[rip+0x177c4]        # 43030d <_IO_stdin_used@@Base+0x430d>
  418b49:	call   4061b0 <__assert_fail@plt>
  418b4e:	xchg   ax,ax

0000000000418b50 <flatcc_builder_create_table@@Base>:
  418b50:	endbr64 
  418b54:	push   rbp
  418b55:	push   rbx
  418b56:	mov    rbx,rdi
  418b59:	sub    rsp,0xb8
  418b60:	mov    edi,DWORD PTR [rsp+0xd0]
  418b67:	mov    rax,QWORD PTR fs:0x28
  418b70:	mov    QWORD PTR [rsp+0xa8],rax
  418b78:	xor    eax,eax
  418b7a:	test   r9d,r9d
  418b7d:	js     418d3f <flatcc_builder_create_table@@Base+0x1ef>
  418b83:	test   dil,0x1
  418b87:	je     418d1b <flatcc_builder_create_table@@Base+0x1cb>
  418b8d:	cmp    cx,0x4
  418b91:	mov    eax,0x4
  418b96:	cmovb  ecx,eax
  418b99:	movzx  r11d,cx
  418b9d:	cmp    WORD PTR [rbx+0xe8],cx
  418ba4:	jb     418cf0 <flatcc_builder_create_table@@Base+0x1a0>
  418baa:	mov    eax,DWORD PTR [rbx+0xf0]
  418bb0:	lea    ecx,[r11-0x1]
  418bb4:	mov    r10d,eax
  418bb7:	sub    r10d,edx
  418bba:	and    r10d,ecx
  418bbd:	mov    ecx,eax
  418bbf:	sub    ecx,edx
  418bc1:	lea    r11d,[rcx-0x4]
  418bc5:	dec    edi
  418bc7:	mov    ecx,r11d
  418bca:	sub    ecx,edi
  418bcc:	sub    ecx,r10d
  418bcf:	mov    DWORD PTR [rsp+0xc],ecx
  418bd3:	test   r9d,r9d
  418bd6:	je     418c0d <flatcc_builder_create_table@@Base+0xbd>
  418bd8:	mov    edi,r10d
  418bdb:	sub    edi,r11d
  418bde:	lea    eax,[r9-0x1]
  418be2:	sub    edi,0x4
  418be5:	lea    r9,[r8+rax*2+0x2]
  418bea:	nop    WORD PTR [rax+rax*1+0x0]
  418bf0:	movzx  ecx,WORD PTR [r8]
  418bf4:	mov    r11d,edi
  418bf7:	sub    r11d,ecx
  418bfa:	add    r8,0x2
  418bfe:	add    DWORD PTR [rsi+rcx*1],r11d
  418c02:	cmp    r9,r8
  418c05:	jne    418bf0 <flatcc_builder_create_table@@Base+0xa0>
  418c07:	mov    eax,DWORD PTR [rbx+0xf0]
  418c0d:	lea    rcx,[rsp+0xc]
  418c12:	mov    QWORD PTR [rsp+0x10],0x4
  418c1b:	mov    QWORD PTR [rsp+0x20],rcx
  418c20:	mov    QWORD PTR [rsp+0x28],0x4
  418c29:	mov    DWORD PTR [rsp+0x18],0x1
  418c31:	mov    r8d,0x4
  418c37:	test   rdx,rdx
  418c3a:	je     418c57 <flatcc_builder_create_table@@Base+0x107>
  418c3c:	lea    r8,[rdx+0x4]
  418c40:	mov    QWORD PTR [rsp+0x10],r8
  418c45:	mov    QWORD PTR [rsp+0x30],rsi
  418c4a:	mov    QWORD PTR [rsp+0x38],rdx
  418c4f:	mov    DWORD PTR [rsp+0x18],0x2
  418c57:	test   r10d,r10d
  418c5a:	jne    418cc0 <flatcc_builder_create_table@@Base+0x170>
  418c5c:	mov    ebp,eax
  418c5e:	movabs rdx,0x10000000f
  418c68:	sub    ebp,r8d
  418c6b:	cmp    r8,rdx
  418c6e:	ja     418cfc <flatcc_builder_create_table@@Base+0x1ac>
  418c74:	cmp    ebp,eax
  418c76:	jge    418cfc <flatcc_builder_create_table@@Base+0x1ac>
  418c7c:	mov    rdi,QWORD PTR [rbx+0x38]
  418c80:	mov    edx,DWORD PTR [rsp+0x18]
  418c84:	lea    rsi,[rsp+0x20]
  418c89:	mov    ecx,ebp
  418c8b:	call   QWORD PTR [rbx+0x48]
  418c8e:	test   eax,eax
  418c90:	jne    418d3a <flatcc_builder_create_table@@Base+0x1ea>
  418c96:	mov    DWORD PTR [rbx+0xf0],ebp
  418c9c:	mov    eax,ebp
  418c9e:	mov    rbx,QWORD PTR [rsp+0xa8]
  418ca6:	xor    rbx,QWORD PTR fs:0x28
  418caf:	jne    418d5e <flatcc_builder_create_table@@Base+0x20e>
  418cb5:	add    rsp,0xb8
  418cbc:	pop    rbx
  418cbd:	pop    rbp
  418cbe:	ret    
  418cbf:	nop
  418cc0:	movsxd rcx,DWORD PTR [rsp+0x18]
  418cc5:	mov    rsi,0x430a20
  418ccc:	mov    rdx,rcx
  418ccf:	add    r8,r10
  418cd2:	shl    rcx,0x4
  418cd6:	inc    edx
  418cd8:	mov    QWORD PTR [rsp+0x10],r8
  418cdd:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  418ce2:	mov    QWORD PTR [rsp+rcx*1+0x28],r10
  418ce7:	mov    DWORD PTR [rsp+0x18],edx
  418ceb:	jmp    418c5c <flatcc_builder_create_table@@Base+0x10c>
  418cf0:	mov    WORD PTR [rbx+0xe8],cx
  418cf7:	jmp    418baa <flatcc_builder_create_table@@Base+0x5a>
  418cfc:	lea    rcx,[rip+0x17c6d]        # 430970 <_IO_stdin_used@@Base+0x4970>
  418d03:	mov    edx,0x287
  418d08:	lea    rsi,[rip+0x17221]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  418d0f:	lea    rdi,[rip+0x175b1]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  418d16:	call   4061b0 <__assert_fail@plt>
  418d1b:	lea    rcx,[rip+0x179ee]        # 430710 <_IO_stdin_used@@Base+0x4710>
  418d22:	mov    edx,0x4db
  418d27:	lea    rsi,[rip+0x17202]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  418d2e:	lea    rdi,[rip+0x175f9]        # 43032e <_IO_stdin_used@@Base+0x432e>
  418d35:	call   4061b0 <__assert_fail@plt>
  418d3a:	call   416aa0 <flatcc_builder_default_alloc@@Base+0x2d0>
  418d3f:	lea    rcx,[rip+0x179ca]        # 430710 <_IO_stdin_used@@Base+0x4710>
  418d46:	mov    edx,0x4d5
  418d4b:	lea    rsi,[rip+0x171de]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  418d52:	lea    rdi,[rip+0x175c3]        # 43031c <_IO_stdin_used@@Base+0x431c>
  418d59:	call   4061b0 <__assert_fail@plt>
  418d5e:	call   4061a0 <__stack_chk_fail@plt>
  418d63:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  418d6e:	xchg   ax,ax

0000000000418d70 <flatcc_builder_check_required_field@@Base>:
  418d70:	endbr64 
  418d74:	mov    rax,QWORD PTR [rdi+0x30]
  418d78:	cmp    WORD PTR [rax+0xe],0x3
  418d7d:	jne    418d9a <flatcc_builder_check_required_field@@Base+0x2a>
  418d7f:	xor    eax,eax
  418d81:	cmp    WORD PTR [rdi+0x10],si
  418d85:	jbe    418d99 <flatcc_builder_check_required_field@@Base+0x29>
  418d87:	mov    rax,QWORD PTR [rdi+0x8]
  418d8b:	movzx  edx,si
  418d8e:	cmp    WORD PTR [rax+rdx*2],0x0
  418d93:	setne  al
  418d96:	movzx  eax,al
  418d99:	ret    
  418d9a:	push   rax
  418d9b:	lea    rcx,[rip+0x1793e]        # 4306e0 <_IO_stdin_used@@Base+0x46e0>
  418da2:	mov    edx,0x4f8
  418da7:	lea    rsi,[rip+0x17182]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  418dae:	lea    rdi,[rip+0x173c3]        # 430178 <_IO_stdin_used@@Base+0x4178>
  418db5:	call   4061b0 <__assert_fail@plt>
  418dba:	nop    WORD PTR [rax+rax*1+0x0]

0000000000418dc0 <flatcc_builder_check_union_field@@Base>:
  418dc0:	endbr64 
  418dc4:	mov    rax,QWORD PTR [rdi+0x30]
  418dc8:	cmp    WORD PTR [rax+0xe],0x3
  418dcd:	jne    418e29 <flatcc_builder_check_union_field@@Base+0x69>
  418dcf:	xor    eax,eax
  418dd1:	test   si,si
  418dd4:	je     418e06 <flatcc_builder_check_union_field@@Base+0x46>
  418dd6:	cmp    WORD PTR [rdi+0x10],si
  418dda:	jbe    418e06 <flatcc_builder_check_union_field@@Base+0x46>
  418ddc:	mov    rcx,QWORD PTR [rdi+0x8]
  418de0:	movzx  edx,si
  418de3:	movzx  eax,WORD PTR [rcx+rdx*2-0x2]
  418de8:	movzx  ecx,WORD PTR [rcx+rdx*2]
  418dec:	test   ax,ax
  418def:	je     418e20 <flatcc_builder_check_union_field@@Base+0x60>
  418df1:	mov    rsi,QWORD PTR [rdi+0x18]
  418df5:	movzx  edx,ax
  418df8:	xor    eax,eax
  418dfa:	test   cx,cx
  418dfd:	sete   al
  418e00:	cmp    BYTE PTR [rsi+rdx*1],0x0
  418e04:	jne    418e10 <flatcc_builder_check_union_field@@Base+0x50>
  418e06:	ret    
  418e07:	nop    WORD PTR [rax+rax*1+0x0]
  418e10:	xor    eax,eax
  418e12:	test   cx,cx
  418e15:	setne  al
  418e18:	ret    
  418e19:	nop    DWORD PTR [rax+0x0]
  418e20:	xor    eax,eax
  418e22:	test   cx,cx
  418e25:	sete   al
  418e28:	ret    
  418e29:	push   rax
  418e2a:	lea    rcx,[rip+0x1786f]        # 4306a0 <_IO_stdin_used@@Base+0x46a0>
  418e31:	mov    edx,0x4ff
  418e36:	lea    rsi,[rip+0x170f3]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  418e3d:	lea    rdi,[rip+0x17334]        # 430178 <_IO_stdin_used@@Base+0x4178>
  418e44:	call   4061b0 <__assert_fail@plt>
  418e49:	nop    DWORD PTR [rax+0x0]

0000000000418e50 <flatcc_builder_check_required@@Base>:
  418e50:	endbr64 
  418e54:	mov    rax,QWORD PTR [rdi+0x30]
  418e58:	cmp    WORD PTR [rax+0xe],0x3
  418e5d:	jne    418eb3 <flatcc_builder_check_required@@Base+0x63>
  418e5f:	movzx  ecx,WORD PTR [rdi+0x10]
  418e63:	xor    eax,eax
  418e65:	cmp    ecx,edx
  418e67:	jl     418eb2 <flatcc_builder_check_required@@Base+0x62>
  418e69:	test   edx,edx
  418e6b:	jle    418ea3 <flatcc_builder_check_required@@Base+0x53>
  418e6d:	mov    rcx,QWORD PTR [rdi+0x8]
  418e71:	movzx  edi,WORD PTR [rsi]
  418e74:	cmp    WORD PTR [rcx+rdi*2],0x0
  418e79:	je     418eb2 <flatcc_builder_check_required@@Base+0x62>
  418e7b:	add    rsi,0x2
  418e7f:	lea    eax,[rdx-0x1]
  418e82:	lea    rdx,[rsi+rax*2]
  418e86:	jmp    418e9e <flatcc_builder_check_required@@Base+0x4e>
  418e88:	nop    DWORD PTR [rax+rax*1+0x0]
  418e90:	movzx  eax,WORD PTR [rsi]
  418e93:	add    rsi,0x2
  418e97:	cmp    WORD PTR [rcx+rax*2],0x0
  418e9c:	je     418eb0 <flatcc_builder_check_required@@Base+0x60>
  418e9e:	cmp    rsi,rdx
  418ea1:	jne    418e90 <flatcc_builder_check_required@@Base+0x40>
  418ea3:	mov    eax,0x1
  418ea8:	ret    
  418ea9:	nop    DWORD PTR [rax+0x0]
  418eb0:	xor    eax,eax
  418eb2:	ret    
  418eb3:	push   rax
  418eb4:	lea    rcx,[rip+0x177b5]        # 430670 <_IO_stdin_used@@Base+0x4670>
  418ebb:	mov    edx,0x511
  418ec0:	lea    rsi,[rip+0x17069]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  418ec7:	lea    rdi,[rip+0x172aa]        # 430178 <_IO_stdin_used@@Base+0x4178>
  418ece:	call   4061b0 <__assert_fail@plt>
  418ed3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  418ede:	xchg   ax,ax

0000000000418ee0 <flatcc_builder_end_table@@Base>:
  418ee0:	endbr64 
  418ee4:	push   r13
  418ee6:	push   r12
  418ee8:	push   rbp
  418ee9:	push   rbx
  418eea:	sub    rsp,0x8
  418eee:	mov    rax,QWORD PTR [rdi+0x30]
  418ef2:	cmp    WORD PTR [rax+0xe],0x3
  418ef7:	jne    41904d <flatcc_builder_end_table@@Base+0x16d>
  418efd:	movzx  ebp,WORD PTR [rdi+0x10]
  418f01:	movzx  eax,WORD PTR [rdi+0x20]
  418f05:	lea    ebp,[rbp+rbp*1+0x4]
  418f09:	movzx  ecx,bp
  418f0c:	xor    ecx,DWORD PTR [rdi+0x14]
  418f0f:	mov    rdx,QWORD PTR [rdi+0x8]
  418f13:	imul   ecx,ecx,0x9e3779b1
  418f19:	add    eax,0x4
  418f1c:	mov    WORD PTR [rdx-0x2],ax
  418f20:	movzx  eax,ax
  418f23:	xor    ecx,eax
  418f25:	imul   ecx,ecx,0x9e3779b1
  418f2b:	mov    WORD PTR [rdx-0x4],bp
  418f2f:	lea    r12,[rdx-0x4]
  418f33:	mov    DWORD PTR [rdi+0x14],ecx
  418f36:	movzx  edx,bp
  418f39:	mov    rsi,r12
  418f3c:	mov    rbx,rdi
  418f3f:	call   4187f0 <flatcc_builder_create_cached_vtable@@Base>
  418f44:	mov    r13d,eax
  418f47:	test   eax,eax
  418f49:	jne    418f60 <flatcc_builder_end_table@@Base+0x80>
  418f4b:	add    rsp,0x8
  418f4f:	pop    rbx
  418f50:	xor    ebp,ebp
  418f52:	mov    eax,ebp
  418f54:	pop    rbp
  418f55:	pop    r12
  418f57:	pop    r13
  418f59:	ret    
  418f5a:	nop    WORD PTR [rax+rax*1+0x0]
  418f60:	movzx  edx,bp
  418f63:	xor    esi,esi
  418f65:	mov    rdi,r12
  418f68:	call   4061c0 <memset@plt>
  418f6d:	mov    rax,QWORD PTR [rbx+0x30]
  418f71:	sub    rsp,0x8
  418f75:	mov    r8d,DWORD PTR [rax+0x14]
  418f79:	mov    r9,QWORD PTR [rbx]
  418f7c:	add    r8,QWORD PTR [rbx+0x88]
  418f83:	mov    edx,DWORD PTR [rbx+0x20]
  418f86:	movzx  ecx,WORD PTR [rbx+0xea]
  418f8d:	mov    rsi,QWORD PTR [rbx+0x18]
  418f91:	push   r13
  418f93:	sub    r9,r8
  418f96:	sar    r9,1
  418f99:	mov    rdi,rbx
  418f9c:	call   418b50 <flatcc_builder_create_table@@Base>
  418fa1:	mov    ebp,eax
  418fa3:	pop    rax
  418fa4:	pop    rdx
  418fa5:	test   ebp,ebp
  418fa7:	je     418f4b <flatcc_builder_end_table@@Base+0x6b>
  418fa9:	mov    rax,QWORD PTR [rbx+0x30]
  418fad:	mov    rdi,QWORD PTR [rbx+0x18]
  418fb1:	mov    edx,DWORD PTR [rax+0x18]
  418fb4:	xor    esi,esi
  418fb6:	mov    DWORD PTR [rbx+0x14],edx
  418fb9:	movzx  edx,WORD PTR [rax+0x1c]
  418fbd:	mov    WORD PTR [rbx+0x10],dx
  418fc1:	mov    edx,DWORD PTR [rax+0x10]
  418fc4:	mov    eax,DWORD PTR [rax+0x14]
  418fc7:	add    rdx,QWORD PTR [rbx+0x58]
  418fcb:	add    rax,QWORD PTR [rbx+0x88]
  418fd2:	mov    QWORD PTR [rbx+0x8],rdx
  418fd6:	mov    QWORD PTR [rbx],rax
  418fd9:	mov    edx,DWORD PTR [rbx+0x20]
  418fdc:	call   4061c0 <memset@plt>
  418fe1:	mov    rax,QWORD PTR [rbx+0x30]
  418fe5:	mov    edi,DWORD PTR [rbx+0x70]
  418fe8:	mov    edx,DWORD PTR [rax+0x8]
  418feb:	mov    esi,DWORD PTR [rax]
  418fed:	mov    ecx,DWORD PTR [rax+0x4]
  418ff0:	mov    DWORD PTR [rbx+0x20],edx
  418ff3:	mov    rdx,rsi
  418ff6:	sub    edi,edx
  418ff8:	mov    DWORD PTR [rbx+0x28],esi
  418ffb:	mov    edx,edi
  418ffd:	add    rsi,QWORD PTR [rbx+0x68]
  419001:	cmp    ecx,edi
  419003:	cmovb  edx,ecx
  419006:	mov    QWORD PTR [rbx+0x18],rsi
  41900a:	mov    DWORD PTR [rbx+0x24],edx
  41900d:	movzx  edx,WORD PTR [rbx+0xea]
  419014:	mov    DWORD PTR [rax+0x4],ecx
  419017:	cmp    dx,WORD PTR [rbx+0xe8]
  41901e:	jbe    419027 <flatcc_builder_end_table@@Base+0x147>
  419020:	mov    WORD PTR [rbx+0xe8],dx
  419027:	movzx  edx,WORD PTR [rax+0xc]
  41902b:	dec    DWORD PTR [rbx+0x104]
  419031:	sub    rax,0x24
  419035:	mov    QWORD PTR [rbx+0x30],rax
  419039:	mov    WORD PTR [rbx+0xea],dx
  419040:	add    rsp,0x8
  419044:	mov    eax,ebp
  419046:	pop    rbx
  419047:	pop    rbp
  419048:	pop    r12
  41904a:	pop    r13
  41904c:	ret    
  41904d:	lea    rcx,[rip+0x175fc]        # 430650 <_IO_stdin_used@@Base+0x4650>
  419054:	mov    edx,0x525
  419059:	lea    rsi,[rip+0x16ed0]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  419060:	lea    rdi,[rip+0x17111]        # 430178 <_IO_stdin_used@@Base+0x4178>
  419067:	call   4061b0 <__assert_fail@plt>
  41906c:	nop    DWORD PTR [rax+0x0]

0000000000419070 <flatcc_builder_create_vector@@Base>:
  419070:	endbr64 
  419074:	push   rbp
  419075:	push   rbx
  419076:	sub    rsp,0xb8
  41907d:	mov    rax,QWORD PTR fs:0x28
  419086:	mov    QWORD PTR [rsp+0xa8],rax
  41908e:	xor    eax,eax
  419090:	cmp    rdx,r9
  419093:	ja     4191d4 <flatcc_builder_create_vector@@Base+0x164>
  419099:	cmp    r8w,0x4
  41909e:	mov    eax,0x4
  4190a3:	cmovb  r8d,eax
  4190a7:	mov    rbx,rdi
  4190aa:	movzx  edi,r8w
  4190ae:	cmp    r8w,WORD PTR [rbx+0xe8]
  4190b6:	jbe    4190c0 <flatcc_builder_create_vector@@Base+0x50>
  4190b8:	mov    WORD PTR [rbx+0xe8],r8w
  4190c0:	imul   ecx,edx
  4190c3:	mov    DWORD PTR [rsp+0xc],edx
  4190c7:	mov    edx,DWORD PTR [rbx+0xf0]
  4190cd:	dec    edi
  4190cf:	mov    eax,edx
  4190d1:	sub    eax,ecx
  4190d3:	and    eax,edi
  4190d5:	lea    rdi,[rsp+0xc]
  4190da:	mov    QWORD PTR [rsp+0x10],0x4
  4190e3:	mov    QWORD PTR [rsp+0x20],rdi
  4190e8:	mov    QWORD PTR [rsp+0x28],0x4
  4190f1:	mov    DWORD PTR [rsp+0x18],0x1
  4190f9:	mov    r8d,0x4
  4190ff:	test   ecx,ecx
  419101:	je     41911e <flatcc_builder_create_vector@@Base+0xae>
  419103:	lea    r8,[rcx+0x4]
  419107:	mov    QWORD PTR [rsp+0x10],r8
  41910c:	mov    QWORD PTR [rsp+0x30],rsi
  419111:	mov    QWORD PTR [rsp+0x38],rcx
  419116:	mov    DWORD PTR [rsp+0x18],0x2
  41911e:	test   eax,eax
  419120:	jne    419180 <flatcc_builder_create_vector@@Base+0x110>
  419122:	mov    ebp,edx
  419124:	movabs rax,0x10000000f
  41912e:	sub    ebp,r8d
  419131:	cmp    r8,rax
  419134:	ja     4191b0 <flatcc_builder_create_vector@@Base+0x140>
  419136:	cmp    edx,ebp
  419138:	jle    4191b0 <flatcc_builder_create_vector@@Base+0x140>
  41913a:	mov    rdi,QWORD PTR [rbx+0x38]
  41913e:	mov    edx,DWORD PTR [rsp+0x18]
  419142:	lea    rsi,[rsp+0x20]
  419147:	mov    ecx,ebp
  419149:	call   QWORD PTR [rbx+0x48]
  41914c:	test   eax,eax
  41914e:	jne    4191cf <flatcc_builder_create_vector@@Base+0x15f>
  419150:	mov    DWORD PTR [rbx+0xf0],ebp
  419156:	mov    eax,ebp
  419158:	mov    rbx,QWORD PTR [rsp+0xa8]
  419160:	xor    rbx,QWORD PTR fs:0x28
  419169:	jne    4191f3 <flatcc_builder_create_vector@@Base+0x183>
  41916f:	add    rsp,0xb8
  419176:	pop    rbx
  419177:	pop    rbp
  419178:	ret    
  419179:	nop    DWORD PTR [rax+0x0]
  419180:	movsxd rsi,DWORD PTR [rsp+0x18]
  419185:	mov    rdi,0x430a20
  41918c:	mov    rcx,rsi
  41918f:	add    r8,rax
  419192:	shl    rsi,0x4
  419196:	inc    ecx
  419198:	mov    QWORD PTR [rsp+0x10],r8
  41919d:	mov    QWORD PTR [rsp+rsi*1+0x20],rdi
  4191a2:	mov    QWORD PTR [rsp+rsi*1+0x28],rax
  4191a7:	mov    DWORD PTR [rsp+0x18],ecx
  4191ab:	jmp    419122 <flatcc_builder_create_vector@@Base+0xb2>
  4191b0:	lea    rcx,[rip+0x177b9]        # 430970 <_IO_stdin_used@@Base+0x4970>
  4191b7:	mov    edx,0x287
  4191bc:	lea    rsi,[rip+0x16d6d]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  4191c3:	lea    rdi,[rip+0x170fd]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  4191ca:	call   4061b0 <__assert_fail@plt>
  4191cf:	call   416aa0 <flatcc_builder_default_alloc@@Base+0x2d0>
  4191d4:	lea    rcx,[rip+0x17455]        # 430630 <_IO_stdin_used@@Base+0x4630>
  4191db:	mov    edx,0x555
  4191e0:	lea    rsi,[rip+0x16d49]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  4191e7:	lea    rdi,[rip+0x1714b]        # 430339 <_IO_stdin_used@@Base+0x4339>
  4191ee:	call   4061b0 <__assert_fail@plt>
  4191f3:	call   4061a0 <__stack_chk_fail@plt>
  4191f8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000419200 <flatcc_builder_end_vector@@Base>:
  419200:	endbr64 
  419204:	push   rbp
  419205:	push   rbx
  419206:	sub    rsp,0x8
  41920a:	mov    rax,QWORD PTR [rdi+0x30]
  41920e:	cmp    WORD PTR [rax+0xe],0x4
  419213:	jne    4192c6 <flatcc_builder_end_vector@@Base+0xc6>
  419219:	mov    ecx,DWORD PTR [rax+0x10]
  41921c:	mov    edx,DWORD PTR [rax+0x14]
  41921f:	mov    rsi,QWORD PTR [rdi+0x18]
  419223:	mov    r9d,DWORD PTR [rax+0x18]
  419227:	movzx  r8d,WORD PTR [rdi+0xea]
  41922f:	mov    rbx,rdi
  419232:	call   419070 <flatcc_builder_create_vector@@Base>
  419237:	mov    ebp,eax
  419239:	test   eax,eax
  41923b:	jne    419250 <flatcc_builder_end_vector@@Base+0x50>
  41923d:	add    rsp,0x8
  419241:	pop    rbx
  419242:	mov    eax,ebp
  419244:	pop    rbp
  419245:	ret    
  419246:	nop    WORD PTR cs:[rax+rax*1+0x0]
  419250:	mov    edx,DWORD PTR [rbx+0x20]
  419253:	mov    rdi,QWORD PTR [rbx+0x18]
  419257:	xor    esi,esi
  419259:	call   4061c0 <memset@plt>
  41925e:	mov    rax,QWORD PTR [rbx+0x30]
  419262:	mov    edi,DWORD PTR [rbx+0x70]
  419265:	mov    edx,DWORD PTR [rax+0x8]
  419268:	mov    esi,DWORD PTR [rax]
  41926a:	mov    ecx,DWORD PTR [rax+0x4]
  41926d:	mov    DWORD PTR [rbx+0x20],edx
  419270:	mov    rdx,rsi
  419273:	sub    edi,edx
  419275:	mov    DWORD PTR [rbx+0x28],esi
  419278:	mov    edx,edi
  41927a:	add    rsi,QWORD PTR [rbx+0x68]
  41927e:	cmp    ecx,edi
  419280:	cmovb  edx,ecx
  419283:	mov    QWORD PTR [rbx+0x18],rsi
  419287:	mov    DWORD PTR [rbx+0x24],edx
  41928a:	movzx  edx,WORD PTR [rbx+0xea]
  419291:	mov    DWORD PTR [rax+0x4],ecx
  419294:	cmp    dx,WORD PTR [rbx+0xe8]
  41929b:	jbe    4192a4 <flatcc_builder_end_vector@@Base+0xa4>
  41929d:	mov    WORD PTR [rbx+0xe8],dx
  4192a4:	movzx  edx,WORD PTR [rax+0xc]
  4192a8:	dec    DWORD PTR [rbx+0x104]
  4192ae:	sub    rax,0x24
  4192b2:	mov    QWORD PTR [rbx+0x30],rax
  4192b6:	mov    WORD PTR [rbx+0xea],dx
  4192bd:	add    rsp,0x8
  4192c1:	mov    eax,ebp
  4192c3:	pop    rbx
  4192c4:	pop    rbp
  4192c5:	ret    
  4192c6:	lea    rcx,[rip+0x17343]        # 430610 <_IO_stdin_used@@Base+0x4610>
  4192cd:	mov    edx,0x578
  4192d2:	lea    rsi,[rip+0x16c57]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  4192d9:	lea    rdi,[rip+0x16d30]        # 430010 <_IO_stdin_used@@Base+0x4010>
  4192e0:	call   4061b0 <__assert_fail@plt>
  4192e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004192f0 <flatcc_builder_vector_count@@Base>:
  4192f0:	endbr64 
  4192f4:	mov    rax,QWORD PTR [rdi+0x30]
  4192f8:	mov    eax,DWORD PTR [rax+0x14]
  4192fb:	ret    
  4192fc:	nop    DWORD PTR [rax+0x0]

0000000000419300 <flatcc_builder_vector_edit@@Base>:
  419300:	endbr64 
  419304:	mov    rax,QWORD PTR [rdi+0x18]
  419308:	ret    
  419309:	nop    DWORD PTR [rax+0x0]

0000000000419310 <flatcc_builder_create_offset_vector_direct@@Base>:
  419310:	endbr64 
  419314:	xor    ecx,ecx
  419316:	jmp    416c20 <flatcc_builder_default_alloc@@Base+0x450>
  41931b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000419320 <flatcc_builder_end_offset_vector@@Base>:
  419320:	endbr64 
  419324:	push   rbp
  419325:	push   rbx
  419326:	sub    rsp,0x8
  41932a:	mov    rax,QWORD PTR [rdi+0x30]
  41932e:	cmp    WORD PTR [rax+0xe],0x5
  419333:	jne    4193d6 <flatcc_builder_end_offset_vector@@Base+0xb6>
  419339:	mov    edx,DWORD PTR [rax+0x14]
  41933c:	mov    rsi,QWORD PTR [rdi+0x18]
  419340:	mov    rbx,rdi
  419343:	call   419310 <flatcc_builder_create_offset_vector_direct@@Base>
  419348:	mov    ebp,eax
  41934a:	test   eax,eax
  41934c:	jne    419360 <flatcc_builder_end_offset_vector@@Base+0x40>
  41934e:	add    rsp,0x8
  419352:	pop    rbx
  419353:	mov    eax,ebp
  419355:	pop    rbp
  419356:	ret    
  419357:	nop    WORD PTR [rax+rax*1+0x0]
  419360:	mov    edx,DWORD PTR [rbx+0x20]
  419363:	mov    rdi,QWORD PTR [rbx+0x18]
  419367:	xor    esi,esi
  419369:	call   4061c0 <memset@plt>
  41936e:	mov    rax,QWORD PTR [rbx+0x30]
  419372:	mov    edi,DWORD PTR [rbx+0x70]
  419375:	mov    edx,DWORD PTR [rax+0x8]
  419378:	mov    esi,DWORD PTR [rax]
  41937a:	mov    ecx,DWORD PTR [rax+0x4]
  41937d:	mov    DWORD PTR [rbx+0x20],edx
  419380:	mov    rdx,rsi
  419383:	sub    edi,edx
  419385:	mov    DWORD PTR [rbx+0x28],esi
  419388:	mov    edx,edi
  41938a:	add    rsi,QWORD PTR [rbx+0x68]
  41938e:	cmp    ecx,edi
  419390:	cmovb  edx,ecx
  419393:	mov    QWORD PTR [rbx+0x18],rsi
  419397:	mov    DWORD PTR [rbx+0x24],edx
  41939a:	movzx  edx,WORD PTR [rbx+0xea]
  4193a1:	mov    DWORD PTR [rax+0x4],ecx
  4193a4:	cmp    dx,WORD PTR [rbx+0xe8]
  4193ab:	jbe    4193b4 <flatcc_builder_end_offset_vector@@Base+0x94>
  4193ad:	mov    WORD PTR [rbx+0xe8],dx
  4193b4:	movzx  edx,WORD PTR [rax+0xc]
  4193b8:	dec    DWORD PTR [rbx+0x104]
  4193be:	sub    rax,0x24
  4193c2:	mov    QWORD PTR [rbx+0x30],rax
  4193c6:	mov    WORD PTR [rbx+0xea],dx
  4193cd:	add    rsp,0x8
  4193d1:	mov    eax,ebp
  4193d3:	pop    rbx
  4193d4:	pop    rbp
  4193d5:	ret    
  4193d6:	lea    rcx,[rip+0x171e3]        # 4305c0 <_IO_stdin_used@@Base+0x45c0>
  4193dd:	mov    edx,0x5c8
  4193e2:	lea    rsi,[rip+0x16b47]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  4193e9:	lea    rdi,[rip+0x16c90]        # 430080 <_IO_stdin_used@@Base+0x4080>
  4193f0:	call   4061b0 <__assert_fail@plt>
  4193f5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000419400 <flatcc_builder_create_offset_vector@@Base>:
  419400:	endbr64 
  419404:	push   r12
  419406:	mov    r12,rsi
  419409:	push   rbp
  41940a:	mov    rbp,rdx
  41940d:	push   rbx
  41940e:	mov    rbx,rdi
  419411:	call   4183c0 <flatcc_builder_start_offset_vector@@Base>
  419416:	test   eax,eax
  419418:	je     419428 <flatcc_builder_create_offset_vector@@Base+0x28>
  41941a:	pop    rbx
  41941b:	pop    rbp
  41941c:	xor    eax,eax
  41941e:	pop    r12
  419420:	ret    
  419421:	nop    DWORD PTR [rax+0x0]
  419428:	mov    rsi,rbp
  41942b:	mov    rdi,rbx
  41942e:	call   417e70 <flatcc_builder_extend_offset_vector@@Base>
  419433:	test   rax,rax
  419436:	je     41941a <flatcc_builder_create_offset_vector@@Base+0x1a>
  419438:	lea    rdx,[rbp*4+0x0]
  419440:	mov    rsi,r12
  419443:	mov    rdi,rax
  419446:	call   406210 <memcpy@plt>
  41944b:	mov    rdi,rbx
  41944e:	pop    rbx
  41944f:	pop    rbp
  419450:	pop    r12
  419452:	jmp    419320 <flatcc_builder_end_offset_vector@@Base>
  419457:	nop    WORD PTR [rax+rax*1+0x0]

0000000000419460 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  419460:	endbr64 
  419464:	push   rbp
  419465:	push   rbx
  419466:	sub    rsp,0x8
  41946a:	mov    rax,QWORD PTR [rdi+0x30]
  41946e:	cmp    WORD PTR [rax+0xe],0x5
  419473:	jne    419516 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb6>
  419479:	mov    rcx,rsi
  41947c:	mov    edx,DWORD PTR [rax+0x14]
  41947f:	mov    rsi,QWORD PTR [rdi+0x18]
  419483:	mov    rbx,rdi
  419486:	call   416c20 <flatcc_builder_default_alloc@@Base+0x450>
  41948b:	mov    ebp,eax
  41948d:	test   eax,eax
  41948f:	jne    4194a0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
  419491:	add    rsp,0x8
  419495:	pop    rbx
  419496:	mov    eax,ebp
  419498:	pop    rbp
  419499:	ret    
  41949a:	nop    WORD PTR [rax+rax*1+0x0]
  4194a0:	mov    edx,DWORD PTR [rbx+0x20]
  4194a3:	mov    rdi,QWORD PTR [rbx+0x18]
  4194a7:	xor    esi,esi
  4194a9:	call   4061c0 <memset@plt>
  4194ae:	mov    rax,QWORD PTR [rbx+0x30]
  4194b2:	mov    edi,DWORD PTR [rbx+0x70]
  4194b5:	mov    edx,DWORD PTR [rax+0x8]
  4194b8:	mov    esi,DWORD PTR [rax]
  4194ba:	mov    ecx,DWORD PTR [rax+0x4]
  4194bd:	mov    DWORD PTR [rbx+0x20],edx
  4194c0:	mov    rdx,rsi
  4194c3:	sub    edi,edx
  4194c5:	mov    DWORD PTR [rbx+0x28],esi
  4194c8:	mov    edx,edi
  4194ca:	add    rsi,QWORD PTR [rbx+0x68]
  4194ce:	cmp    ecx,edi
  4194d0:	cmovb  edx,ecx
  4194d3:	mov    QWORD PTR [rbx+0x18],rsi
  4194d7:	mov    DWORD PTR [rbx+0x24],edx
  4194da:	movzx  edx,WORD PTR [rbx+0xea]
  4194e1:	mov    DWORD PTR [rax+0x4],ecx
  4194e4:	cmp    dx,WORD PTR [rbx+0xe8]
  4194eb:	jbe    4194f4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x94>
  4194ed:	mov    WORD PTR [rbx+0xe8],dx
  4194f4:	movzx  edx,WORD PTR [rax+0xc]
  4194f8:	dec    DWORD PTR [rbx+0x104]
  4194fe:	sub    rax,0x24
  419502:	mov    QWORD PTR [rbx+0x30],rax
  419506:	mov    WORD PTR [rbx+0xea],dx
  41950d:	add    rsp,0x8
  419511:	mov    eax,ebp
  419513:	pop    rbx
  419514:	pop    rbp
  419515:	ret    
  419516:	lea    rcx,[rip+0x17063]        # 430580 <_IO_stdin_used@@Base+0x4580>
  41951d:	mov    edx,0x5d5
  419522:	lea    rsi,[rip+0x16a07]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  419529:	lea    rdi,[rip+0x16b50]        # 430080 <_IO_stdin_used@@Base+0x4080>
  419530:	call   4061b0 <__assert_fail@plt>
  419535:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000419540 <flatcc_builder_offset_vector_edit@@Base>:
  419540:	endbr64 
  419544:	mov    rax,QWORD PTR [rdi+0x18]
  419548:	ret    
  419549:	nop    DWORD PTR [rax+0x0]

0000000000419550 <flatcc_builder_offset_vector_count@@Base>:
  419550:	endbr64 
  419554:	mov    rax,QWORD PTR [rdi+0x30]
  419558:	mov    eax,DWORD PTR [rax+0x14]
  41955b:	ret    
  41955c:	nop    DWORD PTR [rax+0x0]

0000000000419560 <flatcc_builder_create_union_vector_direct@@Base>:
  419560:	endbr64 
  419564:	push   r13
  419566:	mov    r13,rcx
  419569:	push   r12
  41956b:	mov    r12,rsi
  41956e:	mov    rcx,r12
  419571:	push   rbp
  419572:	mov    rsi,rdx
  419575:	mov    rdx,r13
  419578:	push   rbx
  419579:	mov    rbp,rdi
  41957c:	sub    rsp,0x8
  419580:	call   416c20 <flatcc_builder_default_alloc@@Base+0x450>
  419585:	test   eax,eax
  419587:	jne    4195a0 <flatcc_builder_create_union_vector_direct@@Base+0x40>
  419589:	add    rsp,0x8
  41958d:	pop    rbx
  41958e:	pop    rbp
  41958f:	pop    r12
  419591:	xor    eax,eax
  419593:	pop    r13
  419595:	ret    
  419596:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4195a0:	mov    rdx,r13
  4195a3:	mov    rsi,r12
  4195a6:	mov    rdi,rbp
  4195a9:	mov    r9d,0xffffffff
  4195af:	mov    r8d,0x1
  4195b5:	mov    ecx,0x1
  4195ba:	mov    ebx,eax
  4195bc:	call   419070 <flatcc_builder_create_vector@@Base>
  4195c1:	mov    edx,eax
  4195c3:	mov    rsi,rbx
  4195c6:	shl    rsi,0x20
  4195ca:	mov    rax,rdx
  4195cd:	or     rax,rsi
  4195d0:	test   edx,edx
  4195d2:	mov    rdx,rax
  4195d5:	mov    rax,rsi
  4195d8:	cmovne rax,rdx
  4195dc:	add    rsp,0x8
  4195e0:	pop    rbx
  4195e1:	pop    rbp
  4195e2:	pop    r12
  4195e4:	pop    r13
  4195e6:	ret    
  4195e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004195f0 <flatcc_builder_create_union_vector@@Base>:
  4195f0:	endbr64 
  4195f4:	push   r13
  4195f6:	push   r12
  4195f8:	mov    r12,rdx
  4195fb:	push   rbp
  4195fc:	mov    rbp,rsi
  4195ff:	push   rbx
  419600:	mov    rbx,rdi
  419603:	sub    rsp,0x8
  419607:	call   4183c0 <flatcc_builder_start_offset_vector@@Base>
  41960c:	test   eax,eax
  41960e:	je     419620 <flatcc_builder_create_union_vector@@Base+0x30>
  419610:	add    rsp,0x8
  419614:	pop    rbx
  419615:	pop    rbp
  419616:	pop    r12
  419618:	xor    eax,eax
  41961a:	pop    r13
  41961c:	ret    
  41961d:	nop    DWORD PTR [rax]
  419620:	mov    rsi,r12
  419623:	mov    rdi,rbx
  419626:	call   417e70 <flatcc_builder_extend_offset_vector@@Base>
  41962b:	test   rax,rax
  41962e:	je     419610 <flatcc_builder_create_union_vector@@Base+0x20>
  419630:	mov    r13d,DWORD PTR [rbx+0x20]
  419634:	mov    rax,r13
  419637:	add    eax,r12d
  41963a:	mov    DWORD PTR [rbx+0x20],eax
  41963d:	cmp    eax,DWORD PTR [rbx+0x24]
  419640:	jae    419710 <flatcc_builder_create_union_vector@@Base+0x120>
  419646:	add    r13,QWORD PTR [rbx+0x18]
  41964a:	je     419610 <flatcc_builder_create_union_vector@@Base+0x20>
  41964c:	mov    rdi,rbx
  41964f:	call   419540 <flatcc_builder_offset_vector_edit@@Base>
  419654:	test   r12,r12
  419657:	je     419679 <flatcc_builder_create_union_vector@@Base+0x89>
  419659:	xor    edi,edi
  41965b:	nop    DWORD PTR [rax+rax*1+0x0]
  419660:	movzx  ecx,BYTE PTR [rbp+rdi*8+0x0]
  419665:	mov    BYTE PTR [r13+rdi*1+0x0],cl
  41966a:	mov    ecx,DWORD PTR [rbp+rdi*8+0x4]
  41966e:	mov    DWORD PTR [rax+rdi*4],ecx
  419671:	inc    rdi
  419674:	cmp    r12,rdi
  419677:	jne    419660 <flatcc_builder_create_union_vector@@Base+0x70>
  419679:	mov    rcx,r12
  41967c:	mov    rdx,rax
  41967f:	mov    rsi,r13
  419682:	mov    rdi,rbx
  419685:	call   419560 <flatcc_builder_create_union_vector_direct@@Base>
  41968a:	mov    edx,DWORD PTR [rbx+0x20]
  41968d:	mov    rdi,QWORD PTR [rbx+0x18]
  419691:	xor    esi,esi
  419693:	mov    rbp,rax
  419696:	call   4061c0 <memset@plt>
  41969b:	mov    rax,QWORD PTR [rbx+0x30]
  41969f:	mov    edx,DWORD PTR [rax+0x8]
  4196a2:	mov    esi,DWORD PTR [rax]
  4196a4:	mov    DWORD PTR [rbx+0x20],edx
  4196a7:	mov    DWORD PTR [rbx+0x28],esi
  4196aa:	mov    rdx,rsi
  4196ad:	add    rsi,QWORD PTR [rbx+0x68]
  4196b1:	mov    ecx,DWORD PTR [rax+0x4]
  4196b4:	mov    QWORD PTR [rbx+0x18],rsi
  4196b8:	mov    esi,DWORD PTR [rbx+0x70]
  4196bb:	sub    esi,edx
  4196bd:	mov    edx,esi
  4196bf:	cmp    ecx,esi
  4196c1:	cmovb  edx,ecx
  4196c4:	mov    DWORD PTR [rbx+0x24],edx
  4196c7:	movzx  edx,WORD PTR [rbx+0xea]
  4196ce:	mov    DWORD PTR [rax+0x4],ecx
  4196d1:	cmp    dx,WORD PTR [rbx+0xe8]
  4196d8:	jbe    4196e1 <flatcc_builder_create_union_vector@@Base+0xf1>
  4196da:	mov    WORD PTR [rbx+0xe8],dx
  4196e1:	movzx  edx,WORD PTR [rax+0xc]
  4196e5:	sub    rax,0x24
  4196e9:	mov    QWORD PTR [rbx+0x30],rax
  4196ed:	mov    WORD PTR [rbx+0xea],dx
  4196f4:	dec    DWORD PTR [rbx+0x104]
  4196fa:	add    rsp,0x8
  4196fe:	pop    rbx
  4196ff:	mov    rax,rbp
  419702:	pop    rbp
  419703:	pop    r12
  419705:	pop    r13
  419707:	ret    
  419708:	nop    DWORD PTR [rax+rax*1+0x0]
  419710:	lea    esi,[rax+0x1]
  419713:	mov    edx,0xfffffffc
  419718:	mov    rdi,rbx
  41971b:	call   416770 <union_vector_tests@@Base+0x110>
  419720:	test   eax,eax
  419722:	je     419646 <flatcc_builder_create_union_vector@@Base+0x56>
  419728:	jmp    419610 <flatcc_builder_create_union_vector@@Base+0x20>
  41972d:	nop    DWORD PTR [rax]

0000000000419730 <flatcc_builder_start_union_vector@@Base>:
  419730:	endbr64 
  419734:	push   rbx
  419735:	mov    esi,0x4
  41973a:	mov    rbx,rdi
  41973d:	call   416b00 <flatcc_builder_default_alloc@@Base+0x330>
  419742:	test   eax,eax
  419744:	jne    419780 <flatcc_builder_start_union_vector@@Base+0x50>
  419746:	mov    rcx,QWORD PTR [rbx+0x30]
  41974a:	xor    edx,edx
  41974c:	mov    QWORD PTR [rcx+0xe],0x80007
  419754:	mov    WORD PTR [rcx+0x16],dx
  419758:	mov    edx,DWORD PTR [rbx+0x28]
  41975b:	mov    rsi,rdx
  41975e:	add    rdx,QWORD PTR [rbx+0x68]
  419762:	mov    QWORD PTR [rbx+0x18],rdx
  419766:	mov    edx,DWORD PTR [rbx+0x70]
  419769:	sub    edx,esi
  41976b:	mov    esi,0xfffffffc
  419770:	cmp    edx,esi
  419772:	cmova  edx,esi
  419775:	mov    DWORD PTR [rbx+0x24],edx
  419778:	mov    DWORD PTR [rcx+0x4],esi
  41977b:	pop    rbx
  41977c:	ret    
  41977d:	nop    DWORD PTR [rax]
  419780:	mov    eax,0xffffffff
  419785:	pop    rbx
  419786:	ret    
  419787:	nop    WORD PTR [rax+rax*1+0x0]

0000000000419790 <flatcc_builder_union_vector_edit@@Base>:
  419790:	endbr64 
  419794:	mov    rax,QWORD PTR [rdi+0x18]
  419798:	ret    
  419799:	nop    DWORD PTR [rax+0x0]

00000000004197a0 <flatcc_builder_union_vector_count@@Base>:
  4197a0:	endbr64 
  4197a4:	mov    rax,QWORD PTR [rdi+0x30]
  4197a8:	mov    eax,DWORD PTR [rax+0x14]
  4197ab:	ret    
  4197ac:	nop    DWORD PTR [rax+0x0]

00000000004197b0 <flatcc_builder_end_union_vector@@Base>:
  4197b0:	endbr64 
  4197b4:	push   r13
  4197b6:	push   r12
  4197b8:	push   rbp
  4197b9:	push   rbx
  4197ba:	sub    rsp,0x8
  4197be:	mov    rax,QWORD PTR [rdi+0x30]
  4197c2:	cmp    WORD PTR [rax+0xe],0x7
  4197c7:	jne    4198ed <flatcc_builder_end_union_vector@@Base+0x13d>
  4197cd:	mov    rbx,rdi
  4197d0:	call   4197a0 <flatcc_builder_union_vector_count@@Base>
  4197d5:	mov    ebp,DWORD PTR [rbx+0x20]
  4197d8:	mov    r12,rax
  4197db:	lea    eax,[rax+rax*4]
  4197de:	add    eax,ebp
  4197e0:	mov    DWORD PTR [rbx+0x20],eax
  4197e3:	cmp    eax,DWORD PTR [rbx+0x24]
  4197e6:	jae    4198c8 <flatcc_builder_end_union_vector@@Base+0x118>
  4197ec:	add    rbp,QWORD PTR [rbx+0x18]
  4197f0:	je     4198e0 <flatcc_builder_end_union_vector@@Base+0x130>
  4197f6:	mov    rdi,rbx
  4197f9:	lea    r13,[rbp+r12*4+0x0]
  4197fe:	call   419790 <flatcc_builder_union_vector_edit@@Base>
  419803:	test   r12,r12
  419806:	je     41982c <flatcc_builder_end_union_vector@@Base+0x7c>
  419808:	xor    edi,edi
  41980a:	nop    WORD PTR [rax+rax*1+0x0]
  419810:	movzx  r8d,BYTE PTR [rax+rdi*8]
  419815:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  41981a:	mov    r8d,DWORD PTR [rax+rdi*8+0x4]
  41981f:	mov    DWORD PTR [rbp+rdi*4+0x0],r8d
  419824:	inc    rdi
  419827:	cmp    r12,rdi
  41982a:	jne    419810 <flatcc_builder_end_union_vector@@Base+0x60>
  41982c:	mov    rcx,r12
  41982f:	mov    rdx,rbp
  419832:	mov    rsi,r13
  419835:	mov    rdi,rbx
  419838:	call   419560 <flatcc_builder_create_union_vector_direct@@Base>
  41983d:	mov    edx,DWORD PTR [rbx+0x20]
  419840:	mov    rdi,QWORD PTR [rbx+0x18]
  419844:	xor    esi,esi
  419846:	mov    rbp,rax
  419849:	call   4061c0 <memset@plt>
  41984e:	mov    rdx,QWORD PTR [rbx+0x30]
  419852:	mov    esi,DWORD PTR [rdx]
  419854:	mov    eax,DWORD PTR [rdx+0x8]
  419857:	mov    rcx,rsi
  41985a:	mov    DWORD PTR [rbx+0x28],esi
  41985d:	add    rsi,QWORD PTR [rbx+0x68]
  419861:	mov    DWORD PTR [rbx+0x20],eax
  419864:	mov    eax,DWORD PTR [rdx+0x4]
  419867:	mov    QWORD PTR [rbx+0x18],rsi
  41986b:	mov    esi,DWORD PTR [rbx+0x70]
  41986e:	sub    esi,ecx
  419870:	cmp    eax,esi
  419872:	mov    ecx,esi
  419874:	cmovb  ecx,eax
  419877:	mov    DWORD PTR [rbx+0x24],ecx
  41987a:	mov    DWORD PTR [rdx+0x4],eax
  41987d:	movzx  eax,WORD PTR [rbx+0xea]
  419884:	cmp    ax,WORD PTR [rbx+0xe8]
  41988b:	ja     4198b8 <flatcc_builder_end_union_vector@@Base+0x108>
  41988d:	movzx  eax,WORD PTR [rdx+0xc]
  419891:	dec    DWORD PTR [rbx+0x104]
  419897:	sub    rdx,0x24
  41989b:	mov    WORD PTR [rbx+0xea],ax
  4198a2:	mov    QWORD PTR [rbx+0x30],rdx
  4198a6:	add    rsp,0x8
  4198aa:	mov    rax,rbp
  4198ad:	pop    rbx
  4198ae:	pop    rbp
  4198af:	pop    r12
  4198b1:	pop    r13
  4198b3:	ret    
  4198b4:	nop    DWORD PTR [rax+0x0]
  4198b8:	mov    WORD PTR [rbx+0xe8],ax
  4198bf:	jmp    41988d <flatcc_builder_end_union_vector@@Base+0xdd>
  4198c1:	nop    DWORD PTR [rax+0x0]
  4198c8:	lea    esi,[rax+0x1]
  4198cb:	mov    edx,0xfffffffc
  4198d0:	mov    rdi,rbx
  4198d3:	call   416770 <union_vector_tests@@Base+0x110>
  4198d8:	test   eax,eax
  4198da:	je     4197ec <flatcc_builder_end_union_vector@@Base+0x3c>
  4198e0:	add    rsp,0x8
  4198e4:	pop    rbx
  4198e5:	pop    rbp
  4198e6:	pop    r12
  4198e8:	xor    eax,eax
  4198ea:	pop    r13
  4198ec:	ret    
  4198ed:	lea    rcx,[rip+0x16c0c]        # 430500 <_IO_stdin_used@@Base+0x4500>
  4198f4:	mov    edx,0x651
  4198f9:	lea    rsi,[rip+0x16630]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  419900:	lea    rdi,[rip+0x168a1]        # 4301a8 <_IO_stdin_used@@Base+0x41a8>
  419907:	call   4061b0 <__assert_fail@plt>
  41990c:	nop    DWORD PTR [rax+0x0]

0000000000419910 <flatcc_builder_extend_union_vector@@Base>:
  419910:	endbr64 
  419914:	push   rbp
  419915:	mov    edx,esi
  419917:	push   rbx
  419918:	sub    rsp,0x8
  41991c:	mov    rax,QWORD PTR [rdi+0x30]
  419920:	add    edx,DWORD PTR [rax+0x14]
  419923:	jb     419965 <flatcc_builder_extend_union_vector@@Base+0x55>
  419925:	cmp    edx,0x1fffffff
  41992b:	ja     419965 <flatcc_builder_extend_union_vector@@Base+0x55>
  41992d:	mov    ebp,DWORD PTR [rdi+0x20]
  419930:	mov    DWORD PTR [rax+0x14],edx
  419933:	lea    eax,[rbp+rsi*8+0x0]
  419937:	mov    rbx,rdi
  41993a:	mov    DWORD PTR [rdi+0x20],eax
  41993d:	cmp    eax,DWORD PTR [rdi+0x24]
  419940:	jae    419950 <flatcc_builder_extend_union_vector@@Base+0x40>
  419942:	mov    rax,QWORD PTR [rbx+0x18]
  419946:	add    rax,rbp
  419949:	add    rsp,0x8
  41994d:	pop    rbx
  41994e:	pop    rbp
  41994f:	ret    
  419950:	lea    esi,[rax+0x1]
  419953:	mov    edx,0xfffffffc
  419958:	call   416770 <union_vector_tests@@Base+0x110>
  41995d:	test   eax,eax
  41995f:	je     419942 <flatcc_builder_extend_union_vector@@Base+0x32>
  419961:	xor    eax,eax
  419963:	jmp    419949 <flatcc_builder_extend_union_vector@@Base+0x39>
  419965:	call   416ad0 <flatcc_builder_default_alloc@@Base+0x300>
  41996a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000419970 <flatcc_builder_truncate_union_vector@@Base>:
  419970:	endbr64 
  419974:	sub    rsp,0x8
  419978:	mov    rax,QWORD PTR [rdi+0x30]
  41997c:	cmp    WORD PTR [rax+0xe],0x7
  419981:	jne    4199b2 <flatcc_builder_truncate_union_vector@@Base+0x42>
  419983:	mov    edx,DWORD PTR [rax+0x14]
  419986:	cmp    edx,esi
  419988:	jb     4199d1 <flatcc_builder_truncate_union_vector@@Base+0x61>
  41998a:	sub    edx,esi
  41998c:	mov    DWORD PTR [rax+0x14],edx
  41998f:	imul   esi,DWORD PTR [rax+0x10]
  419993:	mov    eax,DWORD PTR [rdi+0x20]
  419996:	mov    edx,esi
  419998:	sub    eax,esi
  41999a:	mov    DWORD PTR [rdi+0x20],eax
  41999d:	add    rax,QWORD PTR [rdi+0x18]
  4199a1:	mov    rdi,rax
  4199a4:	xor    esi,esi
  4199a6:	call   4061c0 <memset@plt>
  4199ab:	xor    eax,eax
  4199ad:	add    rsp,0x8
  4199b1:	ret    
  4199b2:	lea    rcx,[rip+0x16b07]        # 4304c0 <_IO_stdin_used@@Base+0x44c0>
  4199b9:	mov    edx,0x681
  4199be:	lea    rsi,[rip+0x1656b]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  4199c5:	lea    rdi,[rip+0x167dc]        # 4301a8 <_IO_stdin_used@@Base+0x41a8>
  4199cc:	call   4061b0 <__assert_fail@plt>
  4199d1:	lea    rcx,[rip+0x16ae8]        # 4304c0 <_IO_stdin_used@@Base+0x44c0>
  4199d8:	mov    edx,0x682
  4199dd:	lea    rsi,[rip+0x1654c]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  4199e4:	lea    rdi,[rip+0x16725]        # 430110 <_IO_stdin_used@@Base+0x4110>
  4199eb:	call   4061b0 <__assert_fail@plt>

00000000004199f0 <flatcc_builder_union_vector_push@@Base>:
  4199f0:	endbr64 
  4199f4:	push   r12
  4199f6:	push   rbp
  4199f7:	push   rbx
  4199f8:	mov    rdx,QWORD PTR [rdi+0x30]
  4199fc:	cmp    WORD PTR [rdx+0xe],0x7
  419a01:	jne    419a58 <flatcc_builder_union_vector_push@@Base+0x68>
  419a03:	mov    eax,DWORD PTR [rdx+0x14]
  419a06:	cmp    eax,0x1fffffff
  419a0b:	je     419a51 <flatcc_builder_union_vector_push@@Base+0x61>
  419a0d:	mov    ebp,DWORD PTR [rdi+0x20]
  419a10:	inc    eax
  419a12:	mov    DWORD PTR [rdx+0x14],eax
  419a15:	lea    edx,[rbp+0x8]
  419a18:	mov    rbx,rdi
  419a1b:	mov    r12,rsi
  419a1e:	mov    DWORD PTR [rdi+0x20],edx
  419a21:	cmp    edx,DWORD PTR [rdi+0x24]
  419a24:	jae    419a40 <flatcc_builder_union_vector_push@@Base+0x50>
  419a26:	mov    rax,rbp
  419a29:	add    rax,QWORD PTR [rbx+0x18]
  419a2d:	je     419a32 <flatcc_builder_union_vector_push@@Base+0x42>
  419a2f:	mov    QWORD PTR [rax],r12
  419a32:	pop    rbx
  419a33:	pop    rbp
  419a34:	pop    r12
  419a36:	ret    
  419a37:	nop    WORD PTR [rax+rax*1+0x0]
  419a40:	lea    esi,[rbp+0x9]
  419a43:	mov    edx,0xfffffffc
  419a48:	call   416770 <union_vector_tests@@Base+0x110>
  419a4d:	test   eax,eax
  419a4f:	je     419a26 <flatcc_builder_union_vector_push@@Base+0x36>
  419a51:	pop    rbx
  419a52:	pop    rbp
  419a53:	xor    eax,eax
  419a55:	pop    r12
  419a57:	ret    
  419a58:	lea    rcx,[rip+0x16a21]        # 430480 <_IO_stdin_used@@Base+0x4480>
  419a5f:	mov    edx,0x68d
  419a64:	lea    rsi,[rip+0x164c5]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  419a6b:	lea    rdi,[rip+0x16736]        # 4301a8 <_IO_stdin_used@@Base+0x41a8>
  419a72:	call   4061b0 <__assert_fail@plt>
  419a77:	nop    WORD PTR [rax+rax*1+0x0]

0000000000419a80 <flatcc_builder_append_union_vector@@Base>:
  419a80:	endbr64 
  419a84:	push   r13
  419a86:	push   r12
  419a88:	push   rbp
  419a89:	push   rbx
  419a8a:	sub    rsp,0x8
  419a8e:	mov    rax,QWORD PTR [rdi+0x30]
  419a92:	cmp    WORD PTR [rax+0xe],0x7
  419a97:	jne    419b06 <flatcc_builder_append_union_vector@@Base+0x86>
  419a99:	mov    ecx,edx
  419a9b:	add    ecx,DWORD PTR [rax+0x14]
  419a9e:	jb     419b25 <flatcc_builder_append_union_vector@@Base+0xa5>
  419aa4:	cmp    ecx,0x1fffffff
  419aaa:	ja     419b25 <flatcc_builder_append_union_vector@@Base+0xa5>
  419aac:	mov    r12d,DWORD PTR [rdi+0x20]
  419ab0:	lea    ebx,[rdx*8+0x0]
  419ab7:	mov    rdx,r12
  419aba:	add    edx,ebx
  419abc:	mov    DWORD PTR [rax+0x14],ecx
  419abf:	mov    rbp,rdi
  419ac2:	mov    r13,rsi
  419ac5:	mov    DWORD PTR [rdi+0x20],edx
  419ac8:	cmp    edx,DWORD PTR [rdi+0x24]
  419acb:	jae    419af0 <flatcc_builder_append_union_vector@@Base+0x70>
  419acd:	add    r12,QWORD PTR [rbp+0x18]
  419ad1:	je     419ae0 <flatcc_builder_append_union_vector@@Base+0x60>
  419ad3:	mov    edx,ebx
  419ad5:	mov    rsi,r13
  419ad8:	mov    rdi,r12
  419adb:	call   406210 <memcpy@plt>
  419ae0:	add    rsp,0x8
  419ae4:	pop    rbx
  419ae5:	pop    rbp
  419ae6:	mov    rax,r12
  419ae9:	pop    r12
  419aeb:	pop    r13
  419aed:	ret    
  419aee:	xchg   ax,ax
  419af0:	lea    esi,[rdx+0x1]
  419af3:	mov    edx,0xfffffffc
  419af8:	call   416770 <union_vector_tests@@Base+0x110>
  419afd:	test   eax,eax
  419aff:	je     419acd <flatcc_builder_append_union_vector@@Base+0x4d>
  419b01:	xor    r12d,r12d
  419b04:	jmp    419ae0 <flatcc_builder_append_union_vector@@Base+0x60>
  419b06:	lea    rcx,[rip+0x16933]        # 430440 <_IO_stdin_used@@Base+0x4440>
  419b0d:	mov    edx,0x69c
  419b12:	lea    rsi,[rip+0x16417]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  419b19:	lea    rdi,[rip+0x16688]        # 4301a8 <_IO_stdin_used@@Base+0x41a8>
  419b20:	call   4061b0 <__assert_fail@plt>
  419b25:	call   416ad0 <flatcc_builder_default_alloc@@Base+0x300>
  419b2a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000419b30 <flatcc_builder_create_string@@Base>:
  419b30:	endbr64 
  419b34:	push   rbp
  419b35:	push   rbx
  419b36:	sub    rsp,0xb8
  419b3d:	mov    rax,QWORD PTR fs:0x28
  419b46:	mov    QWORD PTR [rsp+0xa8],rax
  419b4e:	xor    eax,eax
  419b50:	mov    eax,0xffffffff
  419b55:	cmp    rdx,rax
  419b58:	ja     419c20 <flatcc_builder_create_string@@Base+0xf0>
  419b5e:	mov    rbx,rdi
  419b61:	mov    edi,DWORD PTR [rdi+0xf0]
  419b67:	lea    rcx,[rsp+0xc]
  419b6c:	lea    eax,[rdi-0x1]
  419b6f:	sub    eax,edx
  419b71:	and    eax,0x3
  419b74:	mov    DWORD PTR [rsp+0xc],edx
  419b78:	inc    eax
  419b7a:	mov    QWORD PTR [rsp+0x20],rcx
  419b7f:	mov    QWORD PTR [rsp+0x28],0x4
  419b88:	test   rdx,rdx
  419b8b:	jne    419c00 <flatcc_builder_create_string@@Base+0xd0>
  419b8d:	mov    edx,0x2
  419b92:	mov    ecx,0x1
  419b97:	mov    r8d,0x4
  419b9d:	add    r8,rax
  419ba0:	mov    rsi,0x430a20
  419ba7:	mov    ebp,edi
  419ba9:	shl    rcx,0x4
  419bad:	sub    ebp,r8d
  419bb0:	mov    QWORD PTR [rsp+0x10],r8
  419bb5:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  419bba:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  419bbf:	mov    DWORD PTR [rsp+0x18],edx
  419bc3:	cmp    edi,ebp
  419bc5:	jle    419c24 <flatcc_builder_create_string@@Base+0xf4>
  419bc7:	mov    rdi,QWORD PTR [rbx+0x38]
  419bcb:	lea    rsi,[rsp+0x20]
  419bd0:	mov    ecx,ebp
  419bd2:	call   QWORD PTR [rbx+0x48]
  419bd5:	test   eax,eax
  419bd7:	jne    419c48 <flatcc_builder_create_string@@Base+0x118>
  419bd9:	mov    DWORD PTR [rbx+0xf0],ebp
  419bdf:	mov    rbx,QWORD PTR [rsp+0xa8]
  419be7:	xor    rbx,QWORD PTR fs:0x28
  419bf0:	mov    eax,ebp
  419bf2:	jne    419c43 <flatcc_builder_create_string@@Base+0x113>
  419bf4:	add    rsp,0xb8
  419bfb:	pop    rbx
  419bfc:	pop    rbp
  419bfd:	ret    
  419bfe:	xchg   ax,ax
  419c00:	lea    r8,[rdx+0x4]
  419c04:	mov    QWORD PTR [rsp+0x38],rdx
  419c09:	mov    QWORD PTR [rsp+0x30],rsi
  419c0e:	mov    edx,0x3
  419c13:	mov    ecx,0x2
  419c18:	jmp    419b9d <flatcc_builder_create_string@@Base+0x6d>
  419c1d:	nop    DWORD PTR [rax]
  419c20:	xor    ebp,ebp
  419c22:	jmp    419bdf <flatcc_builder_create_string@@Base+0xaf>
  419c24:	lea    rcx,[rip+0x16d45]        # 430970 <_IO_stdin_used@@Base+0x4970>
  419c2b:	mov    edx,0x287
  419c30:	lea    rsi,[rip+0x162f9]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  419c37:	lea    rdi,[rip+0x16689]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  419c3e:	call   4061b0 <__assert_fail@plt>
  419c43:	call   4061a0 <__stack_chk_fail@plt>
  419c48:	call   416aa0 <flatcc_builder_default_alloc@@Base+0x2d0>
  419c4d:	nop    DWORD PTR [rax]

0000000000419c50 <flatcc_builder_create_string_str@@Base>:
  419c50:	endbr64 
  419c54:	push   rbp
  419c55:	mov    rbp,rdi
  419c58:	mov    rdi,rsi
  419c5b:	push   rbx
  419c5c:	mov    rbx,rsi
  419c5f:	sub    rsp,0x8
  419c63:	call   406190 <strlen@plt>
  419c68:	add    rsp,0x8
  419c6c:	mov    rsi,rbx
  419c6f:	pop    rbx
  419c70:	mov    rdi,rbp
  419c73:	mov    rdx,rax
  419c76:	pop    rbp
  419c77:	jmp    419b30 <flatcc_builder_create_string@@Base>
  419c7c:	nop    DWORD PTR [rax+0x0]

0000000000419c80 <flatcc_builder_create_string_strn@@Base>:
  419c80:	endbr64 
  419c84:	push   r12
  419c86:	mov    r12,rdi
  419c89:	push   rbp
  419c8a:	mov    rbp,rsi
  419c8d:	mov    rdi,rbp
  419c90:	push   rbx
  419c91:	xor    esi,esi
  419c93:	mov    rbx,rdx
  419c96:	call   4061d0 <memchr@plt>
  419c9b:	mov    rdx,rax
  419c9e:	sub    rdx,rbp
  419ca1:	test   rax,rax
  419ca4:	cmovne rbx,rdx
  419ca8:	mov    rsi,rbp
  419cab:	mov    rdx,rbx
  419cae:	pop    rbx
  419caf:	pop    rbp
  419cb0:	mov    rdi,r12
  419cb3:	pop    r12
  419cb5:	jmp    419b30 <flatcc_builder_create_string@@Base>
  419cba:	nop    WORD PTR [rax+rax*1+0x0]

0000000000419cc0 <flatcc_builder_end_string@@Base>:
  419cc0:	endbr64 
  419cc4:	push   rbp
  419cc5:	push   rbx
  419cc6:	sub    rsp,0x8
  419cca:	mov    rax,QWORD PTR [rdi+0x30]
  419cce:	cmp    WORD PTR [rax+0xe],0x6
  419cd3:	jne    419d95 <flatcc_builder_end_string@@Base+0xd5>
  419cd9:	mov    edx,DWORD PTR [rdi+0x20]
  419cdc:	mov    rbx,rdi
  419cdf:	cmp    DWORD PTR [rax+0x14],edx
  419ce2:	jne    419d76 <flatcc_builder_end_string@@Base+0xb6>
  419ce8:	mov    rsi,QWORD PTR [rdi+0x18]
  419cec:	call   419b30 <flatcc_builder_create_string@@Base>
  419cf1:	mov    ebp,eax
  419cf3:	test   eax,eax
  419cf5:	jne    419d00 <flatcc_builder_end_string@@Base+0x40>
  419cf7:	add    rsp,0x8
  419cfb:	pop    rbx
  419cfc:	mov    eax,ebp
  419cfe:	pop    rbp
  419cff:	ret    
  419d00:	mov    edx,DWORD PTR [rbx+0x20]
  419d03:	mov    rdi,QWORD PTR [rbx+0x18]
  419d07:	xor    esi,esi
  419d09:	call   4061c0 <memset@plt>
  419d0e:	mov    rax,QWORD PTR [rbx+0x30]
  419d12:	mov    edi,DWORD PTR [rbx+0x70]
  419d15:	mov    edx,DWORD PTR [rax+0x8]
  419d18:	mov    esi,DWORD PTR [rax]
  419d1a:	mov    ecx,DWORD PTR [rax+0x4]
  419d1d:	mov    DWORD PTR [rbx+0x20],edx
  419d20:	mov    rdx,rsi
  419d23:	sub    edi,edx
  419d25:	mov    DWORD PTR [rbx+0x28],esi
  419d28:	mov    edx,edi
  419d2a:	add    rsi,QWORD PTR [rbx+0x68]
  419d2e:	cmp    ecx,edi
  419d30:	cmovb  edx,ecx
  419d33:	mov    QWORD PTR [rbx+0x18],rsi
  419d37:	mov    DWORD PTR [rbx+0x24],edx
  419d3a:	movzx  edx,WORD PTR [rbx+0xea]
  419d41:	mov    DWORD PTR [rax+0x4],ecx
  419d44:	cmp    dx,WORD PTR [rbx+0xe8]
  419d4b:	jbe    419d54 <flatcc_builder_end_string@@Base+0x94>
  419d4d:	mov    WORD PTR [rbx+0xe8],dx
  419d54:	movzx  edx,WORD PTR [rax+0xc]
  419d58:	dec    DWORD PTR [rbx+0x104]
  419d5e:	sub    rax,0x24
  419d62:	mov    QWORD PTR [rbx+0x30],rax
  419d66:	mov    WORD PTR [rbx+0xea],dx
  419d6d:	add    rsp,0x8
  419d71:	mov    eax,ebp
  419d73:	pop    rbx
  419d74:	pop    rbp
  419d75:	ret    
  419d76:	lea    rcx,[rip+0x166a3]        # 430420 <_IO_stdin_used@@Base+0x4420>
  419d7d:	mov    edx,0x6c5
  419d82:	lea    rsi,[rip+0x161a7]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  419d89:	lea    rdi,[rip+0x16450]        # 4301e0 <_IO_stdin_used@@Base+0x41e0>
  419d90:	call   4061b0 <__assert_fail@plt>
  419d95:	lea    rcx,[rip+0x16684]        # 430420 <_IO_stdin_used@@Base+0x4420>
  419d9c:	mov    edx,0x6c4
  419da1:	lea    rsi,[rip+0x16188]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  419da8:	lea    rdi,[rip+0x16309]        # 4300b8 <_IO_stdin_used@@Base+0x40b8>
  419daf:	call   4061b0 <__assert_fail@plt>
  419db4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  419dbf:	nop

0000000000419dc0 <flatcc_builder_string_edit@@Base>:
  419dc0:	endbr64 
  419dc4:	mov    rax,QWORD PTR [rdi+0x18]
  419dc8:	ret    
  419dc9:	nop    DWORD PTR [rax+0x0]

0000000000419dd0 <flatcc_builder_string_len@@Base>:
  419dd0:	endbr64 
  419dd4:	mov    rax,QWORD PTR [rdi+0x30]
  419dd8:	mov    eax,DWORD PTR [rax+0x14]
  419ddb:	ret    
  419ddc:	nop    DWORD PTR [rax+0x0]

0000000000419de0 <flatcc_builder_table_add@@Base>:
  419de0:	endbr64 
  419de4:	push   r13
  419de6:	push   r12
  419de8:	push   rbp
  419de9:	push   rbx
  419dea:	sub    rsp,0x8
  419dee:	mov    rax,QWORD PTR [rdi+0x30]
  419df2:	cmp    WORD PTR [rax+0xe],0x3
  419df7:	jne    419ec4 <flatcc_builder_table_add@@Base+0xe4>
  419dfd:	mov    r12d,esi
  419e00:	cmp    esi,0x7ffc
  419e06:	ja     419f02 <flatcc_builder_table_add@@Base+0x122>
  419e0c:	mov    rbx,rdi
  419e0f:	cmp    WORD PTR [rdi+0xea],cx
  419e16:	jb     419e80 <flatcc_builder_table_add@@Base+0xa0>
  419e18:	movsxd r13,r12d
  419e1b:	mov    rsi,QWORD PTR [rbx+0x8]
  419e1f:	add    r13,r13
  419e22:	add    rsi,r13
  419e25:	cmp    WORD PTR [rsi],0x0
  419e29:	jne    419ee3 <flatcc_builder_table_add@@Base+0x103>
  419e2f:	mov    eax,DWORD PTR [rbx+0x14]
  419e32:	movzx  ecx,cx
  419e35:	xor    eax,r12d
  419e38:	imul   eax,eax,0x9e3779b1
  419e3e:	xor    eax,edx
  419e40:	imul   eax,eax,0x9e3779b1
  419e46:	mov    DWORD PTR [rbx+0x14],eax
  419e49:	mov    eax,DWORD PTR [rbx+0x20]
  419e4c:	lea    ebp,[rcx+rax*1-0x1]
  419e50:	neg    ecx
  419e52:	and    ebp,ecx
  419e54:	add    edx,ebp
  419e56:	mov    DWORD PTR [rbx+0x20],edx
  419e59:	cmp    edx,DWORD PTR [rbx+0x24]
  419e5c:	jae    419ea0 <flatcc_builder_table_add@@Base+0xc0>
  419e5e:	lea    eax,[rbp+0x4]
  419e61:	mov    WORD PTR [rsi],ax
  419e64:	cmp    r12w,WORD PTR [rbx+0x10]
  419e69:	jae    419e90 <flatcc_builder_table_add@@Base+0xb0>
  419e6b:	mov    eax,ebp
  419e6d:	add    rax,QWORD PTR [rbx+0x18]
  419e71:	add    rsp,0x8
  419e75:	pop    rbx
  419e76:	pop    rbp
  419e77:	pop    r12
  419e79:	pop    r13
  419e7b:	ret    
  419e7c:	nop    DWORD PTR [rax+0x0]
  419e80:	mov    WORD PTR [rdi+0xea],cx
  419e87:	jmp    419e18 <flatcc_builder_table_add@@Base+0x38>
  419e89:	nop    DWORD PTR [rax+0x0]
  419e90:	inc    r12d
  419e93:	mov    WORD PTR [rbx+0x10],r12w
  419e98:	jmp    419e6b <flatcc_builder_table_add@@Base+0x8b>
  419e9a:	nop    WORD PTR [rax+rax*1+0x0]
  419ea0:	lea    esi,[rdx+0x1]
  419ea3:	mov    rdi,rbx
  419ea6:	mov    edx,0xfffc
  419eab:	call   416770 <union_vector_tests@@Base+0x110>
  419eb0:	test   eax,eax
  419eb2:	jne    419ec0 <flatcc_builder_table_add@@Base+0xe0>
  419eb4:	mov    rsi,QWORD PTR [rbx+0x8]
  419eb8:	add    rsi,r13
  419ebb:	jmp    419e5e <flatcc_builder_table_add@@Base+0x7e>
  419ebd:	nop    DWORD PTR [rax]
  419ec0:	xor    eax,eax
  419ec2:	jmp    419e71 <flatcc_builder_table_add@@Base+0x91>
  419ec4:	lea    rcx,[rip+0x16535]        # 430400 <_IO_stdin_used@@Base+0x4400>
  419ecb:	mov    edx,0x6ed
  419ed0:	lea    rsi,[rip+0x16059]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  419ed7:	lea    rdi,[rip+0x1629a]        # 430178 <_IO_stdin_used@@Base+0x4178>
  419ede:	call   4061b0 <__assert_fail@plt>
  419ee3:	lea    rcx,[rip+0x16516]        # 430400 <_IO_stdin_used@@Base+0x4400>
  419eea:	mov    edx,0x6f8
  419eef:	lea    rsi,[rip+0x1603a]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  419ef6:	lea    rdi,[rip+0x163ca]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  419efd:	call   4061b0 <__assert_fail@plt>
  419f02:	lea    rcx,[rip+0x164f7]        # 430400 <_IO_stdin_used@@Base+0x4400>
  419f09:	mov    edx,0x6ee
  419f0e:	lea    rsi,[rip+0x1601b]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  419f15:	lea    rdi,[rip+0x162ec]        # 430208 <_IO_stdin_used@@Base+0x4208>
  419f1c:	call   4061b0 <__assert_fail@plt>
  419f21:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  419f2c:	nop    DWORD PTR [rax+0x0]

0000000000419f30 <flatcc_builder_table_edit@@Base>:
  419f30:	endbr64 
  419f34:	mov    rax,QWORD PTR [rdi+0x30]
  419f38:	cmp    WORD PTR [rax+0xe],0x3
  419f3d:	jne    419f4a <flatcc_builder_table_edit@@Base+0x1a>
  419f3f:	mov    eax,DWORD PTR [rdi+0x20]
  419f42:	sub    rax,rsi
  419f45:	add    rax,QWORD PTR [rdi+0x18]
  419f49:	ret    
  419f4a:	push   rax
  419f4b:	lea    rcx,[rip+0x1648e]        # 4303e0 <_IO_stdin_used@@Base+0x43e0>
  419f52:	mov    edx,0x702
  419f57:	lea    rsi,[rip+0x15fd2]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  419f5e:	lea    rdi,[rip+0x16213]        # 430178 <_IO_stdin_used@@Base+0x4178>
  419f65:	call   4061b0 <__assert_fail@plt>
  419f6a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000419f70 <flatcc_builder_table_add_copy@@Base>:
  419f70:	endbr64 
  419f74:	push   rbp
  419f75:	mov    rbp,rdx
  419f78:	push   rbx
  419f79:	mov    rbx,rcx
  419f7c:	mov    rdx,rbx
  419f7f:	movzx  ecx,r8w
  419f83:	sub    rsp,0x8
  419f87:	call   419de0 <flatcc_builder_table_add@@Base>
  419f8c:	mov    rcx,rax
  419f8f:	test   rax,rax
  419f92:	je     419fa5 <flatcc_builder_table_add_copy@@Base+0x35>
  419f94:	mov    rdx,rbx
  419f97:	mov    rsi,rbp
  419f9a:	mov    rdi,rax
  419f9d:	call   406210 <memcpy@plt>
  419fa2:	mov    rcx,rax
  419fa5:	add    rsp,0x8
  419fa9:	pop    rbx
  419faa:	mov    rax,rcx
  419fad:	pop    rbp
  419fae:	ret    
  419faf:	nop

0000000000419fb0 <flatcc_builder_table_add_offset@@Base>:
  419fb0:	endbr64 
  419fb4:	push   r13
  419fb6:	push   r12
  419fb8:	push   rbp
  419fb9:	push   rbx
  419fba:	sub    rsp,0x8
  419fbe:	mov    rax,QWORD PTR [rdi+0x30]
  419fc2:	cmp    WORD PTR [rax+0xe],0x3
  419fc7:	jne    41a084 <flatcc_builder_table_add_offset@@Base+0xd4>
  419fcd:	mov    r12d,esi
  419fd0:	cmp    esi,0x7ffc
  419fd6:	ja     41a0c2 <flatcc_builder_table_add_offset@@Base+0x112>
  419fdc:	movsxd r13,esi
  419fdf:	mov    rdx,QWORD PTR [rdi+0x8]
  419fe3:	add    r13,r13
  419fe6:	add    rdx,r13
  419fe9:	cmp    WORD PTR [rdx],0x0
  419fed:	mov    rbx,rdi
  419ff0:	jne    41a0a3 <flatcc_builder_table_add_offset@@Base+0xf3>
  419ff6:	mov    eax,DWORD PTR [rdi+0x14]
  419ff9:	xor    eax,esi
  419ffb:	imul   eax,eax,0x9e3779b1
  41a001:	xor    eax,0x4
  41a004:	imul   eax,eax,0x9e3779b1
  41a00a:	mov    DWORD PTR [rdi+0x14],eax
  41a00d:	mov    eax,DWORD PTR [rdi+0x20]
  41a010:	lea    ebp,[rax+0x3]
  41a013:	and    ebp,0xfffffffc
  41a016:	lea    esi,[rbp+0x4]
  41a019:	mov    DWORD PTR [rdi+0x20],esi
  41a01c:	cmp    esi,DWORD PTR [rdi+0x24]
  41a01f:	ja     41a060 <flatcc_builder_table_add_offset@@Base+0xb0>
  41a021:	lea    eax,[rbp+0x4]
  41a024:	mov    WORD PTR [rdx],ax
  41a027:	cmp    r12w,WORD PTR [rbx+0x10]
  41a02c:	jae    41a050 <flatcc_builder_table_add_offset@@Base+0xa0>
  41a02e:	mov    rax,QWORD PTR [rbx]
  41a031:	lea    rdx,[rax+0x2]
  41a035:	mov    QWORD PTR [rbx],rdx
  41a038:	mov    WORD PTR [rax],bp
  41a03b:	mov    eax,ebp
  41a03d:	add    rax,QWORD PTR [rbx+0x18]
  41a041:	add    rsp,0x8
  41a045:	pop    rbx
  41a046:	pop    rbp
  41a047:	pop    r12
  41a049:	pop    r13
  41a04b:	ret    
  41a04c:	nop    DWORD PTR [rax+0x0]
  41a050:	lea    esi,[r12+0x1]
  41a055:	mov    WORD PTR [rbx+0x10],si
  41a059:	jmp    41a02e <flatcc_builder_table_add_offset@@Base+0x7e>
  41a05b:	nop    DWORD PTR [rax+rax*1+0x0]
  41a060:	mov    edx,0xfffc
  41a065:	call   416770 <union_vector_tests@@Base+0x110>
  41a06a:	test   eax,eax
  41a06c:	jne    41a080 <flatcc_builder_table_add_offset@@Base+0xd0>
  41a06e:	mov    rdx,QWORD PTR [rbx+0x8]
  41a072:	add    rdx,r13
  41a075:	jmp    41a021 <flatcc_builder_table_add_offset@@Base+0x71>
  41a077:	nop    WORD PTR [rax+rax*1+0x0]
  41a080:	xor    eax,eax
  41a082:	jmp    41a041 <flatcc_builder_table_add_offset@@Base+0x91>
  41a084:	lea    rcx,[rip+0x16335]        # 4303c0 <_IO_stdin_used@@Base+0x43c0>
  41a08b:	mov    edx,0x713
  41a090:	lea    rsi,[rip+0x15e99]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41a097:	lea    rdi,[rip+0x160da]        # 430178 <_IO_stdin_used@@Base+0x4178>
  41a09e:	call   4061b0 <__assert_fail@plt>
  41a0a3:	lea    rcx,[rip+0x16316]        # 4303c0 <_IO_stdin_used@@Base+0x43c0>
  41a0aa:	mov    edx,0x71b
  41a0af:	lea    rsi,[rip+0x15e7a]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41a0b6:	lea    rdi,[rip+0x1620a]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  41a0bd:	call   4061b0 <__assert_fail@plt>
  41a0c2:	lea    rcx,[rip+0x162f7]        # 4303c0 <_IO_stdin_used@@Base+0x43c0>
  41a0c9:	mov    edx,0x714
  41a0ce:	lea    rsi,[rip+0x15e5b]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41a0d5:	lea    rdi,[rip+0x1612c]        # 430208 <_IO_stdin_used@@Base+0x4208>
  41a0dc:	call   4061b0 <__assert_fail@plt>
  41a0e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41a0ec:	nop    DWORD PTR [rax+0x0]

000000000041a0f0 <flatcc_builder_table_add_union@@Base>:
  41a0f0:	endbr64 
  41a0f4:	push   r13
  41a0f6:	mov    r13,rdx
  41a0f9:	sar    r13,0x20
  41a0fd:	push   r12
  41a0ff:	push   rbp
  41a100:	push   rbx
  41a101:	sub    rsp,0x8
  41a105:	mov    rax,QWORD PTR [rdi+0x30]
  41a109:	cmp    WORD PTR [rax+0xe],0x3
  41a10e:	jne    41a184 <flatcc_builder_table_add_union@@Base+0x94>
  41a110:	mov    r12,rdi
  41a113:	mov    ebx,esi
  41a115:	mov    rbp,rdx
  41a118:	test   dl,dl
  41a11a:	je     41a160 <flatcc_builder_table_add_union@@Base+0x70>
  41a11c:	test   r13d,r13d
  41a11f:	je     41a132 <flatcc_builder_table_add_union@@Base+0x42>
  41a121:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  41a126:	test   rax,rax
  41a129:	je     41a1c2 <flatcc_builder_table_add_union@@Base+0xd2>
  41a12f:	mov    DWORD PTR [rax],r13d
  41a132:	lea    esi,[rbx-0x1]
  41a135:	mov    ecx,0x1
  41a13a:	mov    edx,0x1
  41a13f:	mov    rdi,r12
  41a142:	call   419de0 <flatcc_builder_table_add@@Base>
  41a147:	test   rax,rax
  41a14a:	je     41a1a3 <flatcc_builder_table_add_union@@Base+0xb3>
  41a14c:	mov    BYTE PTR [rax],bpl
  41a14f:	add    rsp,0x8
  41a153:	xor    eax,eax
  41a155:	pop    rbx
  41a156:	pop    rbp
  41a157:	pop    r12
  41a159:	pop    r13
  41a15b:	ret    
  41a15c:	nop    DWORD PTR [rax+0x0]
  41a160:	test   r13d,r13d
  41a163:	je     41a132 <flatcc_builder_table_add_union@@Base+0x42>
  41a165:	lea    rcx,[rip+0x163e4]        # 430550 <_IO_stdin_used@@Base+0x4550>
  41a16c:	mov    edx,0x5ef
  41a171:	lea    rsi,[rip+0x15db8]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41a178:	lea    rdi,[rip+0x160d1]        # 430250 <_IO_stdin_used@@Base+0x4250>
  41a17f:	call   4061b0 <__assert_fail@plt>
  41a184:	lea    rcx,[rip+0x163c5]        # 430550 <_IO_stdin_used@@Base+0x4550>
  41a18b:	mov    edx,0x5ee
  41a190:	lea    rsi,[rip+0x15d99]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41a197:	lea    rdi,[rip+0x15fda]        # 430178 <_IO_stdin_used@@Base+0x4178>
  41a19e:	call   4061b0 <__assert_fail@plt>
  41a1a3:	lea    rcx,[rip+0x163a6]        # 430550 <_IO_stdin_used@@Base+0x4550>
  41a1aa:	mov    edx,0x5f6
  41a1af:	lea    rsi,[rip+0x15d7a]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41a1b6:	lea    rdi,[rip+0x16199]        # 430356 <_IO_stdin_used@@Base+0x4356>
  41a1bd:	call   4061b0 <__assert_fail@plt>
  41a1c2:	lea    rcx,[rip+0x16387]        # 430550 <_IO_stdin_used@@Base+0x4550>
  41a1c9:	mov    edx,0x5f2
  41a1ce:	lea    rsi,[rip+0x15d5b]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41a1d5:	lea    rdi,[rip+0x16170]        # 43034c <_IO_stdin_used@@Base+0x434c>
  41a1dc:	call   4061b0 <__assert_fail@plt>
  41a1e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41a1ec:	nop    DWORD PTR [rax+0x0]

000000000041a1f0 <flatcc_builder_table_add_union_vector@@Base>:
  41a1f0:	endbr64 
  41a1f4:	push   r12
  41a1f6:	push   rbp
  41a1f7:	mov    rbp,rdx
  41a1fa:	sar    rbp,0x20
  41a1fe:	push   rbx
  41a1ff:	sub    rsp,0x10
  41a203:	mov    rcx,QWORD PTR [rdi+0x30]
  41a207:	cmp    WORD PTR [rcx+0xe],0x3
  41a20c:	jne    41a281 <flatcc_builder_table_add_union_vector@@Base+0x91>
  41a20e:	test   ebp,ebp
  41a210:	sete   cl
  41a213:	test   edx,edx
  41a215:	mov    r12d,esi
  41a218:	sete   sil
  41a21c:	cmp    sil,cl
  41a21f:	je     41a240 <flatcc_builder_table_add_union_vector@@Base+0x50>
  41a221:	test   edx,edx
  41a223:	setne  al
  41a226:	cmp    cl,al
  41a228:	je     41a2a0 <flatcc_builder_table_add_union_vector@@Base+0xb0>
  41a22a:	mov    eax,0xffffffff
  41a22f:	add    rsp,0x10
  41a233:	pop    rbx
  41a234:	pop    rbp
  41a235:	pop    r12
  41a237:	ret    
  41a238:	nop    DWORD PTR [rax+rax*1+0x0]
  41a240:	mov    eax,edx
  41a242:	test   edx,edx
  41a244:	je     41a22f <flatcc_builder_table_add_union_vector@@Base+0x3f>
  41a246:	lea    esi,[r12-0x1]
  41a24b:	mov    QWORD PTR [rsp+0x8],rdx
  41a250:	mov    rbx,rdi
  41a253:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  41a258:	test   rax,rax
  41a25b:	mov    rdx,QWORD PTR [rsp+0x8]
  41a260:	je     41a2de <flatcc_builder_table_add_union_vector@@Base+0xee>
  41a262:	mov    DWORD PTR [rax],edx
  41a264:	mov    esi,r12d
  41a267:	mov    rdi,rbx
  41a26a:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  41a26f:	test   rax,rax
  41a272:	je     41a2bf <flatcc_builder_table_add_union_vector@@Base+0xcf>
  41a274:	mov    DWORD PTR [rax],ebp
  41a276:	add    rsp,0x10
  41a27a:	xor    eax,eax
  41a27c:	pop    rbx
  41a27d:	pop    rbp
  41a27e:	pop    r12
  41a280:	ret    
  41a281:	lea    rcx,[rip+0x16298]        # 430520 <_IO_stdin_used@@Base+0x4520>
  41a288:	mov    edx,0x600
  41a28d:	lea    rsi,[rip+0x15c9c]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41a294:	lea    rdi,[rip+0x15edd]        # 430178 <_IO_stdin_used@@Base+0x4178>
  41a29b:	call   4061b0 <__assert_fail@plt>
  41a2a0:	lea    rcx,[rip+0x16279]        # 430520 <_IO_stdin_used@@Base+0x4520>
  41a2a7:	mov    edx,0x601
  41a2ac:	lea    rsi,[rip+0x15c7d]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41a2b3:	lea    rdi,[rip+0x15fbe]        # 430278 <_IO_stdin_used@@Base+0x4278>
  41a2ba:	call   4061b0 <__assert_fail@plt>
  41a2bf:	lea    rcx,[rip+0x1625a]        # 430520 <_IO_stdin_used@@Base+0x4520>
  41a2c6:	mov    edx,0x608
  41a2cb:	lea    rsi,[rip+0x15c5e]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41a2d2:	lea    rdi,[rip+0x16073]        # 43034c <_IO_stdin_used@@Base+0x434c>
  41a2d9:	call   4061b0 <__assert_fail@plt>
  41a2de:	lea    rcx,[rip+0x1623b]        # 430520 <_IO_stdin_used@@Base+0x4520>
  41a2e5:	mov    edx,0x604
  41a2ea:	lea    rsi,[rip+0x15c3f]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41a2f1:	lea    rdi,[rip+0x16054]        # 43034c <_IO_stdin_used@@Base+0x434c>
  41a2f8:	call   4061b0 <__assert_fail@plt>
  41a2fd:	nop    DWORD PTR [rax]

000000000041a300 <flatcc_builder_push_buffer_alignment@@Base>:
  41a300:	endbr64 
  41a304:	mov    edx,0x4
  41a309:	movzx  eax,WORD PTR [rdi+0xe8]
  41a310:	mov    WORD PTR [rdi+0xe8],dx
  41a317:	ret    
  41a318:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041a320 <flatcc_builder_pop_buffer_alignment@@Base>:
  41a320:	endbr64 
  41a324:	cmp    si,WORD PTR [rdi+0xe8]
  41a32b:	jbe    41a334 <flatcc_builder_pop_buffer_alignment@@Base+0x14>
  41a32d:	mov    WORD PTR [rdi+0xe8],si
  41a334:	ret    
  41a335:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000041a340 <flatcc_builder_get_buffer_alignment@@Base>:
  41a340:	endbr64 
  41a344:	movzx  eax,WORD PTR [rdi+0xe8]
  41a34b:	ret    
  41a34c:	nop    DWORD PTR [rax+0x0]

000000000041a350 <flatcc_builder_set_vtable_clustering@@Base>:
  41a350:	endbr64 
  41a354:	xor    eax,eax
  41a356:	test   esi,esi
  41a358:	sete   al
  41a35b:	mov    DWORD PTR [rdi+0x124],eax
  41a361:	ret    
  41a362:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41a36d:	nop    DWORD PTR [rax]

000000000041a370 <flatcc_builder_set_block_align@@Base>:
  41a370:	endbr64 
  41a374:	mov    WORD PTR [rdi+0xec],si
  41a37b:	ret    
  41a37c:	nop    DWORD PTR [rax+0x0]

000000000041a380 <flatcc_builder_get_level@@Base>:
  41a380:	endbr64 
  41a384:	mov    eax,DWORD PTR [rdi+0x104]
  41a38a:	ret    
  41a38b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041a390 <flatcc_builder_set_max_level@@Base>:
  41a390:	endbr64 
  41a394:	mov    DWORD PTR [rdi+0x120],esi
  41a39a:	cmp    DWORD PTR [rdi+0x108],esi
  41a3a0:	jge    41a3a8 <flatcc_builder_set_max_level@@Base+0x18>
  41a3a2:	mov    DWORD PTR [rdi+0x108],esi
  41a3a8:	ret    
  41a3a9:	nop    DWORD PTR [rax+0x0]

000000000041a3b0 <flatcc_builder_get_buffer_size@@Base>:
  41a3b0:	endbr64 
  41a3b4:	mov    eax,DWORD PTR [rdi+0xf4]
  41a3ba:	sub    eax,DWORD PTR [rdi+0xf0]
  41a3c0:	cdqe   
  41a3c2:	ret    
  41a3c3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41a3ce:	xchg   ax,ax

000000000041a3d0 <flatcc_builder_get_buffer_start@@Base>:
  41a3d0:	endbr64 
  41a3d4:	mov    eax,DWORD PTR [rdi+0xf0]
  41a3da:	ret    
  41a3db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041a3e0 <flatcc_builder_get_buffer_end@@Base>:
  41a3e0:	endbr64 
  41a3e4:	mov    eax,DWORD PTR [rdi+0xf4]
  41a3ea:	ret    
  41a3eb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041a3f0 <flatcc_builder_set_vtable_cache_limit@@Base>:
  41a3f0:	endbr64 
  41a3f4:	mov    QWORD PTR [rdi+0x118],rsi
  41a3fb:	ret    
  41a3fc:	nop    DWORD PTR [rax+0x0]

000000000041a400 <flatcc_builder_set_identifier@@Base>:
  41a400:	endbr64 
  41a404:	test   rsi,rsi
  41a407:	je     41a418 <flatcc_builder_set_identifier@@Base+0x18>
  41a409:	mov    eax,DWORD PTR [rsi]
  41a40b:	mov    DWORD PTR [rdi+0x110],eax
  41a411:	ret    
  41a412:	nop    WORD PTR [rax+rax*1+0x0]
  41a418:	mov    rsi,0x430a20
  41a41f:	mov    eax,DWORD PTR [rsi]
  41a421:	mov    DWORD PTR [rdi+0x110],eax
  41a427:	ret    
  41a428:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041a430 <flatcc_builder_get_type@@Base>:
  41a430:	endbr64 
  41a434:	mov    rdx,QWORD PTR [rdi+0x30]
  41a438:	xor    eax,eax
  41a43a:	test   rdx,rdx
  41a43d:	je     41a443 <flatcc_builder_get_type@@Base+0x13>
  41a43f:	movzx  eax,WORD PTR [rdx+0xe]
  41a443:	ret    
  41a444:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41a44f:	nop

000000000041a450 <flatcc_builder_get_type_at@@Base>:
  41a450:	endbr64 
  41a454:	xor    eax,eax
  41a456:	test   esi,esi
  41a458:	jle    41a479 <flatcc_builder_get_type_at@@Base+0x29>
  41a45a:	mov    edx,DWORD PTR [rdi+0x104]
  41a460:	cmp    edx,esi
  41a462:	jl     41a479 <flatcc_builder_get_type_at@@Base+0x29>
  41a464:	sub    esi,edx
  41a466:	movsxd rsi,esi
  41a469:	mov    rdx,QWORD PTR [rdi+0x30]
  41a46d:	lea    rax,[rsi+rsi*8]
  41a471:	lea    rax,[rdx+rax*4]
  41a475:	movzx  eax,WORD PTR [rax+0xe]
  41a479:	ret    
  41a47a:	nop    WORD PTR [rax+rax*1+0x0]

000000000041a480 <flatcc_builder_get_direct_buffer@@Base>:
  41a480:	endbr64 
  41a484:	mov    eax,DWORD PTR [rdi+0x128]
  41a48a:	test   eax,eax
  41a48c:	jne    41a4a0 <flatcc_builder_get_direct_buffer@@Base+0x20>
  41a48e:	xor    eax,eax
  41a490:	test   rsi,rsi
  41a493:	je     41a49c <flatcc_builder_get_direct_buffer@@Base+0x1c>
  41a495:	mov    QWORD PTR [rsi],0x0
  41a49c:	ret    
  41a49d:	nop    DWORD PTR [rax]
  41a4a0:	mov    rax,QWORD PTR [rdi+0x138]
  41a4a7:	cmp    QWORD PTR [rdi+0x130],rax
  41a4ae:	jne    41a48e <flatcc_builder_get_direct_buffer@@Base+0xe>
  41a4b0:	test   rsi,rsi
  41a4b3:	je     41a4bf <flatcc_builder_get_direct_buffer@@Base+0x3f>
  41a4b5:	mov    rax,QWORD PTR [rdi+0x160]
  41a4bc:	mov    QWORD PTR [rsi],rax
  41a4bf:	mov    rax,QWORD PTR [rdi+0x140]
  41a4c6:	ret    
  41a4c7:	nop    WORD PTR [rax+rax*1+0x0]

000000000041a4d0 <flatcc_builder_copy_buffer@@Base>:
  41a4d0:	endbr64 
  41a4d4:	mov    eax,DWORD PTR [rdi+0x128]
  41a4da:	test   eax,eax
  41a4dc:	je     41a500 <flatcc_builder_copy_buffer@@Base+0x30>
  41a4de:	sub    rsp,0x8
  41a4e2:	add    rdi,0x130
  41a4e9:	call   41ad40 <flatcc_emitter_copy_buffer@@Base>
  41a4ee:	test   rax,rax
  41a4f1:	je     41a503 <flatcc_builder_copy_buffer@@Base+0x33>
  41a4f3:	add    rsp,0x8
  41a4f7:	ret    
  41a4f8:	nop    DWORD PTR [rax+rax*1+0x0]
  41a500:	xor    eax,eax
  41a502:	ret    
  41a503:	lea    rcx,[rip+0x15e96]        # 4303a0 <_IO_stdin_used@@Base+0x43a0>
  41a50a:	mov    edx,0x786
  41a50f:	lea    rsi,[rip+0x15a1a]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41a516:	lea    rdi,[rip+0x11fbc]        # 42c4d9 <_IO_stdin_used@@Base+0x4d9>
  41a51d:	call   4061b0 <__assert_fail@plt>
  41a522:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41a52d:	nop    DWORD PTR [rax]

000000000041a530 <flatcc_builder_finalize_buffer@@Base>:
  41a530:	endbr64 
  41a534:	push   r12
  41a536:	mov    r12,rdi
  41a539:	push   rbp
  41a53a:	push   rbx
  41a53b:	mov    rbx,rsi
  41a53e:	call   41a3b0 <flatcc_builder_get_buffer_size@@Base>
  41a543:	mov    rbp,rax
  41a546:	test   rbx,rbx
  41a549:	je     41a54e <flatcc_builder_finalize_buffer@@Base+0x1e>
  41a54b:	mov    QWORD PTR [rbx],rax
  41a54e:	mov    rdi,rbp
  41a551:	call   406220 <malloc@plt>
  41a556:	mov    rbx,rax
  41a559:	test   rax,rax
  41a55c:	je     41a579 <flatcc_builder_finalize_buffer@@Base+0x49>
  41a55e:	mov    rdx,rbp
  41a561:	mov    rsi,rax
  41a564:	mov    rdi,r12
  41a567:	call   41a4d0 <flatcc_builder_copy_buffer@@Base>
  41a56c:	test   rax,rax
  41a56f:	je     41a598 <flatcc_builder_finalize_buffer@@Base+0x68>
  41a571:	mov    rax,rbx
  41a574:	pop    rbx
  41a575:	pop    rbp
  41a576:	pop    r12
  41a578:	ret    
  41a579:	lea    rcx,[rip+0x15e00]        # 430380 <_IO_stdin_used@@Base+0x4380>
  41a580:	mov    edx,0x798
  41a585:	lea    rsi,[rip+0x159a4]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41a58c:	lea    rdi,[rip+0x15d34]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  41a593:	call   4061b0 <__assert_fail@plt>
  41a598:	lea    rcx,[rip+0x15de1]        # 430380 <_IO_stdin_used@@Base+0x4380>
  41a59f:	mov    edx,0x79c
  41a5a4:	lea    rsi,[rip+0x15985]        # 42ff30 <_IO_stdin_used@@Base+0x3f30>
  41a5ab:	lea    rdi,[rip+0x15d15]        # 4302c7 <_IO_stdin_used@@Base+0x42c7>
  41a5b2:	call   4061b0 <__assert_fail@plt>
  41a5b7:	nop    WORD PTR [rax+rax*1+0x0]

000000000041a5c0 <flatcc_builder_finalize_aligned_buffer@@Base>:
  41a5c0:	endbr64 
  41a5c4:	push   r13
  41a5c6:	push   r12
  41a5c8:	mov    r12,rsi
  41a5cb:	push   rbp
  41a5cc:	mov    rbp,rdi
  41a5cf:	push   rbx
  41a5d0:	sub    rsp,0x18
  41a5d4:	mov    rax,QWORD PTR fs:0x28
  41a5dd:	mov    QWORD PTR [rsp+0x8],rax
  41a5e2:	xor    eax,eax
  41a5e4:	call   41a3b0 <flatcc_builder_get_buffer_size@@Base>
  41a5e9:	mov    rbx,rax
  41a5ec:	test   r12,r12
  41a5ef:	je     41a5f5 <flatcc_builder_finalize_aligned_buffer@@Base+0x35>
  41a5f1:	mov    QWORD PTR [r12],rax
  41a5f5:	mov    rdi,rbp
  41a5f8:	call   41a340 <flatcc_builder_get_buffer_alignment@@Base>
  41a5fd:	movzx  eax,ax
  41a600:	lea    rdx,[rbx+rax*1-0x1]
  41a605:	mov    rbx,rax
  41a608:	neg    rbx
  41a60b:	and    rbx,rdx
  41a60e:	mov    esi,0x8
  41a613:	cmp    rax,0x8
  41a617:	cmovae rsi,rax
  41a61b:	mov    rdi,rsp
  41a61e:	mov    rdx,rbx
  41a621:	mov    QWORD PTR [rsp],0x0
  41a629:	call   406270 <posix_memalign@plt>
  41a62e:	test   eax,eax
  41a630:	je     41a658 <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
  41a632:	mov    rdi,QWORD PTR [rsp]
  41a636:	test   rdi,rdi
  41a639:	je     41a640 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  41a63b:	call   406160 <free@plt>
  41a640:	test   r12,r12
  41a643:	je     41a6a2 <flatcc_builder_finalize_aligned_buffer@@Base+0xe2>
  41a645:	mov    QWORD PTR [r12],0x0
  41a64d:	xor    r13d,r13d
  41a650:	jmp    41a674 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  41a652:	nop    WORD PTR [rax+rax*1+0x0]
  41a658:	mov    r13,QWORD PTR [rsp]
  41a65c:	test   r13,r13
  41a65f:	je     41a640 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  41a661:	mov    rdx,rbx
  41a664:	mov    rsi,r13
  41a667:	mov    rdi,rbp
  41a66a:	call   41a4d0 <flatcc_builder_copy_buffer@@Base>
  41a66f:	test   rax,rax
  41a672:	je     41a698 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
  41a674:	mov    rcx,QWORD PTR [rsp+0x8]
  41a679:	xor    rcx,QWORD PTR fs:0x28
  41a682:	mov    rax,r13
  41a685:	jne    41a69d <flatcc_builder_finalize_aligned_buffer@@Base+0xdd>
  41a687:	add    rsp,0x18
  41a68b:	pop    rbx
  41a68c:	pop    rbp
  41a68d:	pop    r12
  41a68f:	pop    r13
  41a691:	ret    
  41a692:	nop    WORD PTR [rax+rax*1+0x0]
  41a698:	mov    rdi,r13
  41a69b:	jmp    41a63b <flatcc_builder_finalize_aligned_buffer@@Base+0x7b>
  41a69d:	call   4061a0 <__stack_chk_fail@plt>
  41a6a2:	xor    r13d,r13d
  41a6a5:	jmp    41a674 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  41a6a7:	nop    WORD PTR [rax+rax*1+0x0]

000000000041a6b0 <flatcc_builder_aligned_alloc@@Base>:
  41a6b0:	endbr64 
  41a6b4:	sub    rsp,0x18
  41a6b8:	mov    rax,QWORD PTR fs:0x28
  41a6c1:	mov    QWORD PTR [rsp+0x8],rax
  41a6c6:	xor    eax,eax
  41a6c8:	mov    rdx,rsi
  41a6cb:	cmp    rdi,0x8
  41a6cf:	mov    esi,0x8
  41a6d4:	cmovae rsi,rdi
  41a6d8:	mov    rdi,rsp
  41a6db:	mov    QWORD PTR [rsp],0x0
  41a6e3:	call   406270 <posix_memalign@plt>
  41a6e8:	test   eax,eax
  41a6ea:	mov    rax,QWORD PTR [rsp]
  41a6ee:	je     41a6ff <flatcc_builder_aligned_alloc@@Base+0x4f>
  41a6f0:	test   rax,rax
  41a6f3:	je     41a6ff <flatcc_builder_aligned_alloc@@Base+0x4f>
  41a6f5:	mov    rdi,rax
  41a6f8:	call   406160 <free@plt>
  41a6fd:	xor    eax,eax
  41a6ff:	mov    rcx,QWORD PTR [rsp+0x8]
  41a704:	xor    rcx,QWORD PTR fs:0x28
  41a70d:	jne    41a714 <flatcc_builder_aligned_alloc@@Base+0x64>
  41a70f:	add    rsp,0x18
  41a713:	ret    
  41a714:	call   4061a0 <__stack_chk_fail@plt>
  41a719:	nop    DWORD PTR [rax+0x0]

000000000041a720 <flatcc_builder_aligned_free@@Base>:
  41a720:	endbr64 
  41a724:	jmp    406160 <free@plt>
  41a729:	nop    DWORD PTR [rax+0x0]

000000000041a730 <flatcc_builder_get_emit_context@@Base>:
  41a730:	endbr64 
  41a734:	mov    rax,QWORD PTR [rdi+0x38]
  41a738:	ret    
  41a739:	nop    DWORD PTR [rax+0x0]

000000000041a740 <flatcc_emitter_recycle_page@@Base>:
  41a740:	endbr64 
  41a744:	mov    rax,QWORD PTR [rdi]
  41a747:	cmp    rax,rsi
  41a74a:	je     41a79b <flatcc_emitter_recycle_page@@Base+0x5b>
  41a74c:	cmp    QWORD PTR [rdi+0x8],rsi
  41a750:	je     41a79b <flatcc_emitter_recycle_page@@Base+0x5b>
  41a752:	mov    rdx,QWORD PTR [rsi+0xb88]
  41a759:	mov    rcx,QWORD PTR [rsi+0xb80]
  41a760:	mov    QWORD PTR [rcx+0xb88],rdx
  41a767:	mov    QWORD PTR [rdx+0xb80],rcx
  41a76e:	mov    rdx,QWORD PTR [rax+0xb88]
  41a775:	mov    QWORD PTR [rsi+0xb80],rax
  41a77c:	mov    QWORD PTR [rsi+0xb88],rdx
  41a783:	mov    QWORD PTR [rdx+0xb80],rsi
  41a78a:	mov    rax,QWORD PTR [rsi+0xb80]
  41a791:	mov    QWORD PTR [rax+0xb88],rsi
  41a798:	xor    eax,eax
  41a79a:	ret    
  41a79b:	mov    eax,0xffffffff
  41a7a0:	ret    
  41a7a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41a7ac:	nop    DWORD PTR [rax+0x0]

000000000041a7b0 <flatcc_emitter_reset@@Base>:
  41a7b0:	endbr64 
  41a7b4:	mov    rax,QWORD PTR [rdi]
  41a7b7:	test   rax,rax
  41a7ba:	je     41a890 <flatcc_emitter_reset@@Base+0xe0>
  41a7c0:	mov    rcx,QWORD PTR [rdi+0x40]
  41a7c4:	mov    rsi,QWORD PTR [rdi+0x30]
  41a7c8:	test   rcx,rcx
  41a7cb:	cmove  rcx,rsi
  41a7cf:	lea    rdx,[rax+0x5c0]
  41a7d6:	mov    QWORD PTR [rdi+0x10],rdx
  41a7da:	mov    QWORD PTR [rdi+0x20],rdx
  41a7de:	lea    rdx,[rcx+rcx*2]
  41a7e2:	shr    rdx,0x2
  41a7e6:	shr    rsi,0x2
  41a7ea:	add    rdx,rsi
  41a7ed:	mov    QWORD PTR [rdi+0x8],rax
  41a7f1:	mov    QWORD PTR [rdi+0x18],0x5c0
  41a7f9:	mov    QWORD PTR [rdi+0x28],0x5c0
  41a801:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  41a80b:	mov    QWORD PTR [rdi+0x40],rdx
  41a80f:	add    rdx,rdx
  41a812:	mov    QWORD PTR [rdi+0x30],0x0
  41a81a:	cmp    rdx,QWORD PTR [rdi+0x38]
  41a81e:	jae    41a890 <flatcc_emitter_reset@@Base+0xe0>
  41a820:	push   rbx
  41a821:	mov    rbx,rdi
  41a824:	mov    rdi,QWORD PTR [rax+0xb80]
  41a82b:	cmp    rax,rdi
  41a82e:	jne    41a848 <flatcc_emitter_reset@@Base+0x98>
  41a830:	jmp    41a884 <flatcc_emitter_reset@@Base+0xd4>
  41a832:	nop    WORD PTR [rax+rax*1+0x0]
  41a838:	mov    rax,QWORD PTR [rbx+0x8]
  41a83c:	mov    rdi,QWORD PTR [rax+0xb80]
  41a843:	cmp    rdi,QWORD PTR [rbx]
  41a846:	je     41a884 <flatcc_emitter_reset@@Base+0xd4>
  41a848:	mov    rdx,QWORD PTR [rdi+0xb80]
  41a84f:	mov    QWORD PTR [rax+0xb80],rdx
  41a856:	mov    rdx,QWORD PTR [rdi+0xb80]
  41a85d:	mov    QWORD PTR [rdx+0xb88],rax
  41a864:	call   406160 <free@plt>
  41a869:	mov    rax,QWORD PTR [rbx+0x38]
  41a86d:	mov    rcx,QWORD PTR [rbx+0x40]
  41a871:	sub    rax,0xb80
  41a877:	lea    rdx,[rcx+rcx*1]
  41a87b:	mov    QWORD PTR [rbx+0x38],rax
  41a87f:	cmp    rax,rdx
  41a882:	ja     41a838 <flatcc_emitter_reset@@Base+0x88>
  41a884:	pop    rbx
  41a885:	ret    
  41a886:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41a890:	ret    
  41a891:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41a89c:	nop    DWORD PTR [rax+0x0]

000000000041a8a0 <flatcc_emitter_clear@@Base>:
  41a8a0:	endbr64 
  41a8a4:	mov    rax,QWORD PTR [rdi]
  41a8a7:	test   rax,rax
  41a8aa:	je     41a928 <flatcc_emitter_clear@@Base+0x88>
  41a8ac:	push   rbp
  41a8ad:	mov    rbp,rdi
  41a8b0:	push   rbx
  41a8b1:	sub    rsp,0x8
  41a8b5:	mov    rdx,QWORD PTR [rax+0xb88]
  41a8bc:	mov    QWORD PTR [rdx+0xb80],0x0
  41a8c7:	mov    rbx,QWORD PTR [rax+0xb80]
  41a8ce:	test   rbx,rbx
  41a8d1:	jne    41a8db <flatcc_emitter_clear@@Base+0x3b>
  41a8d3:	jmp    41a930 <flatcc_emitter_clear@@Base+0x90>
  41a8d5:	nop    DWORD PTR [rax]
  41a8d8:	mov    rbx,rax
  41a8db:	mov    rdi,QWORD PTR [rbx+0xb88]
  41a8e2:	call   406160 <free@plt>
  41a8e7:	mov    rax,QWORD PTR [rbx+0xb80]
  41a8ee:	test   rax,rax
  41a8f1:	jne    41a8d8 <flatcc_emitter_clear@@Base+0x38>
  41a8f3:	mov    rdi,rbx
  41a8f6:	call   406160 <free@plt>
  41a8fb:	mov    QWORD PTR [rbp+0x40],0x0
  41a903:	vpxor  xmm0,xmm0,xmm0
  41a907:	vmovups XMMWORD PTR [rbp+0x0],xmm0
  41a90c:	vmovups XMMWORD PTR [rbp+0x10],xmm0
  41a911:	vmovups XMMWORD PTR [rbp+0x20],xmm0
  41a916:	vmovups XMMWORD PTR [rbp+0x30],xmm0
  41a91b:	add    rsp,0x8
  41a91f:	pop    rbx
  41a920:	pop    rbp
  41a921:	ret    
  41a922:	nop    WORD PTR [rax+rax*1+0x0]
  41a928:	ret    
  41a929:	nop    DWORD PTR [rax+0x0]
  41a930:	mov    rbx,rax
  41a933:	jmp    41a8f3 <flatcc_emitter_clear@@Base+0x53>
  41a935:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000041a940 <flatcc_emitter@@Base>:
  41a940:	endbr64 
  41a944:	push   r15
  41a946:	push   r14
  41a948:	push   r13
  41a94a:	push   r12
  41a94c:	push   rbp
  41a94d:	mov    rbp,rsi
  41a950:	push   rbx
  41a951:	mov    rbx,rdi
  41a954:	sub    rsp,0x18
  41a958:	add    QWORD PTR [rdi+0x30],r8
  41a95c:	test   ecx,ecx
  41a95e:	js     41ab70 <flatcc_emitter@@Base+0x230>
  41a964:	mov    rax,QWORD PTR [rdi+0x28]
  41a968:	cmp    rax,r8
  41a96b:	jae    41a9f8 <flatcc_emitter@@Base+0xb8>
  41a971:	test   edx,edx
  41a973:	je     41a9e3 <flatcc_emitter@@Base+0xa3>
  41a975:	lea    r14d,[rdx-0x1]
  41a979:	inc    r14
  41a97c:	shl    r14,0x4
  41a980:	lea    rax,[rbp+r14*1+0x0]
  41a985:	mov    QWORD PTR [rsp+0x8],rax
  41a98a:	nop    WORD PTR [rax+rax*1+0x0]
  41a990:	mov    r15,QWORD PTR [rbp+0x8]
  41a994:	mov    r13,QWORD PTR [rbp+0x0]
  41a998:	test   r15,r15
  41a99b:	je     41a9d8 <flatcc_emitter@@Base+0x98>
  41a99d:	nop    DWORD PTR [rax]
  41a9a0:	mov    r12,QWORD PTR [rbx+0x28]
  41a9a4:	cmp    r15,r12
  41a9a7:	jbe    41aaa0 <flatcc_emitter@@Base+0x160>
  41a9ad:	test   r12,r12
  41a9b0:	je     41aa48 <flatcc_emitter@@Base+0x108>
  41a9b6:	sub    r15,r12
  41a9b9:	mov    rdi,QWORD PTR [rbx+0x20]
  41a9bd:	mov    rsi,r13
  41a9c0:	mov    rdx,r12
  41a9c3:	call   406210 <memcpy@plt>
  41a9c8:	add    r13,r12
  41a9cb:	add    QWORD PTR [rbx+0x20],r12
  41a9cf:	sub    QWORD PTR [rbx+0x28],r12
  41a9d3:	test   r15,r15
  41a9d6:	jne    41a9a0 <flatcc_emitter@@Base+0x60>
  41a9d8:	add    rbp,0x10
  41a9dc:	cmp    rbp,QWORD PTR [rsp+0x8]
  41a9e1:	jne    41a990 <flatcc_emitter@@Base+0x50>
  41a9e3:	add    rsp,0x18
  41a9e7:	pop    rbx
  41a9e8:	pop    rbp
  41a9e9:	pop    r12
  41a9eb:	pop    r13
  41a9ed:	pop    r14
  41a9ef:	xor    eax,eax
  41a9f1:	pop    r15
  41a9f3:	ret    
  41a9f4:	nop    DWORD PTR [rax+0x0]
  41a9f8:	mov    rcx,QWORD PTR [rdi+0x20]
  41a9fc:	sub    rax,r8
  41a9ff:	lea    rsi,[rcx+r8*1]
  41aa03:	mov    QWORD PTR [rdi+0x20],rsi
  41aa07:	mov    QWORD PTR [rdi+0x28],rax
  41aa0b:	test   edx,edx
  41aa0d:	je     41a9e3 <flatcc_emitter@@Base+0xa3>
  41aa0f:	lea    ebx,[rdx-0x1]
  41aa12:	inc    rbx
  41aa15:	shl    rbx,0x4
  41aa19:	add    rbx,rbp
  41aa1c:	nop    DWORD PTR [rax+0x0]
  41aa20:	mov    rsi,QWORD PTR [rbp+0x0]
  41aa24:	mov    rdx,QWORD PTR [rbp+0x8]
  41aa28:	mov    rdi,rcx
  41aa2b:	call   406210 <memcpy@plt>
  41aa30:	mov    rcx,QWORD PTR [rbp+0x8]
  41aa34:	add    rbp,0x10
  41aa38:	add    rcx,rax
  41aa3b:	cmp    rbp,rbx
  41aa3e:	jne    41aa20 <flatcc_emitter@@Base+0xe0>
  41aa40:	jmp    41a9e3 <flatcc_emitter@@Base+0xa3>
  41aa42:	nop    WORD PTR [rax+rax*1+0x0]
  41aa48:	mov    r12,QWORD PTR [rbx+0x8]
  41aa4c:	test   r12,r12
  41aa4f:	je     41aaf8 <flatcc_emitter@@Base+0x1b8>
  41aa55:	mov    rax,QWORD PTR [r12+0xb80]
  41aa5d:	mov    r14,QWORD PTR [rbx]
  41aa60:	cmp    rax,r14
  41aa63:	je     41aab0 <flatcc_emitter@@Base+0x170>
  41aa65:	mov    QWORD PTR [rbx+0x8],rax
  41aa69:	mov    QWORD PTR [rbx+0x28],0xb80
  41aa71:	mov    rdx,QWORD PTR [rax+0xb88]
  41aa78:	mov    QWORD PTR [rbx+0x20],rax
  41aa7c:	mov    edx,DWORD PTR [rdx+0xb90]
  41aa82:	mov    r12,QWORD PTR [rbx+0x28]
  41aa86:	add    edx,0xb80
  41aa8c:	mov    DWORD PTR [rax+0xb90],edx
  41aa92:	cmp    r15,r12
  41aa95:	ja     41a9ad <flatcc_emitter@@Base+0x6d>
  41aa9b:	nop    DWORD PTR [rax+rax*1+0x0]
  41aaa0:	mov    r12,r15
  41aaa3:	xor    r15d,r15d
  41aaa6:	jmp    41a9b9 <flatcc_emitter@@Base+0x79>
  41aaab:	nop    DWORD PTR [rax+rax*1+0x0]
  41aab0:	mov    edi,0xb98
  41aab5:	call   406220 <malloc@plt>
  41aaba:	test   rax,rax
  41aabd:	je     41ab58 <flatcc_emitter@@Base+0x218>
  41aac3:	add    QWORD PTR [rbx+0x38],0xb80
  41aacb:	mov    QWORD PTR [rax+0xb88],r12
  41aad2:	mov    QWORD PTR [rax+0xb80],r14
  41aad9:	mov    QWORD PTR [r14+0xb88],rax
  41aae0:	mov    QWORD PTR [r12+0xb80],rax
  41aae8:	mov    QWORD PTR [rbx+0x8],rax
  41aaec:	jmp    41aa69 <flatcc_emitter@@Base+0x129>
  41aaf1:	nop    DWORD PTR [rax+0x0]
  41aaf8:	mov    edi,0xb98
  41aafd:	call   406220 <malloc@plt>
  41ab02:	test   rax,rax
  41ab05:	je     41ab58 <flatcc_emitter@@Base+0x218>
  41ab07:	lea    rdx,[rax+0x5c0]
  41ab0e:	add    QWORD PTR [rbx+0x38],0xb80
  41ab16:	mov    QWORD PTR [rbx],rax
  41ab19:	mov    QWORD PTR [rbx+0x8],rax
  41ab1d:	mov    QWORD PTR [rax+0xb80],rax
  41ab24:	mov    QWORD PTR [rax+0xb88],rax
  41ab2b:	mov    QWORD PTR [rbx+0x10],rdx
  41ab2f:	mov    QWORD PTR [rbx+0x20],rdx
  41ab33:	mov    QWORD PTR [rbx+0x18],0x5c0
  41ab3b:	mov    QWORD PTR [rbx+0x28],0x5c0
  41ab43:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  41ab4d:	jmp    41a9a0 <flatcc_emitter@@Base+0x60>
  41ab52:	nop    WORD PTR [rax+rax*1+0x0]
  41ab58:	add    rsp,0x18
  41ab5c:	pop    rbx
  41ab5d:	pop    rbp
  41ab5e:	pop    r12
  41ab60:	pop    r13
  41ab62:	pop    r14
  41ab64:	mov    eax,0xffffffff
  41ab69:	pop    r15
  41ab6b:	ret    
  41ab6c:	nop    DWORD PTR [rax+0x0]
  41ab70:	mov    rax,QWORD PTR [rdi+0x18]
  41ab74:	cmp    rax,r8
  41ab77:	jae    41ad20 <flatcc_emitter@@Base+0x3e0>
  41ab7d:	movsxd rax,edx
  41ab80:	shl    rax,0x4
  41ab84:	add    rbp,rax
  41ab87:	mov    edx,edx
  41ab89:	shl    rdx,0x4
  41ab8d:	mov    rax,rbp
  41ab90:	sub    rax,rdx
  41ab93:	mov    QWORD PTR [rsp+0x8],rax
  41ab98:	nop    DWORD PTR [rax+rax*1+0x0]
  41aba0:	cmp    rbp,QWORD PTR [rsp+0x8]
  41aba5:	je     41a9e3 <flatcc_emitter@@Base+0xa3>
  41abab:	sub    rbp,0x10
  41abaf:	mov    r12,QWORD PTR [rbp+0x8]
  41abb3:	mov    r13,QWORD PTR [rbp+0x0]
  41abb7:	add    r13,r12
  41abba:	test   r12,r12
  41abbd:	je     41aba0 <flatcc_emitter@@Base+0x260>
  41abbf:	mov    rdx,QWORD PTR [rbx+0x18]
  41abc3:	cmp    rdx,r12
  41abc6:	jae    41ac00 <flatcc_emitter@@Base+0x2c0>
  41abc8:	test   rdx,rdx
  41abcb:	je     41ac10 <flatcc_emitter@@Base+0x2d0>
  41abcd:	sub    r12,rdx
  41abd0:	xor    ecx,ecx
  41abd2:	mov    rdi,QWORD PTR [rbx+0x10]
  41abd6:	mov    rax,rdx
  41abd9:	neg    rax
  41abdc:	add    rdi,rax
  41abdf:	mov    QWORD PTR [rbx+0x10],rdi
  41abe3:	mov    QWORD PTR [rbx+0x18],rcx
  41abe7:	add    r13,rax
  41abea:	mov    rsi,r13
  41abed:	call   406210 <memcpy@plt>
  41abf2:	test   r12,r12
  41abf5:	je     41aba0 <flatcc_emitter@@Base+0x260>
  41abf7:	mov    rdx,QWORD PTR [rbx+0x18]
  41abfb:	cmp    rdx,r12
  41abfe:	jb     41abc8 <flatcc_emitter@@Base+0x288>
  41ac00:	mov    rcx,rdx
  41ac03:	sub    rcx,r12
  41ac06:	mov    rdx,r12
  41ac09:	xor    r12d,r12d
  41ac0c:	jmp    41abd2 <flatcc_emitter@@Base+0x292>
  41ac0e:	xchg   ax,ax
  41ac10:	mov    r15,QWORD PTR [rbx]
  41ac13:	test   r15,r15
  41ac16:	je     41acb8 <flatcc_emitter@@Base+0x378>
  41ac1c:	mov    rax,QWORD PTR [r15+0xb88]
  41ac23:	mov    r14,QWORD PTR [rbx+0x8]
  41ac27:	cmp    rax,r14
  41ac2a:	je     41ac78 <flatcc_emitter@@Base+0x338>
  41ac2c:	mov    edx,DWORD PTR [r15+0xb90]
  41ac33:	sub    edx,0xb80
  41ac39:	mov    DWORD PTR [rax+0xb90],edx
  41ac3f:	mov    QWORD PTR [rbx],rax
  41ac42:	lea    rdx,[rax+0xb80]
  41ac49:	mov    QWORD PTR [rbx+0x10],rdx
  41ac4d:	mov    rdx,QWORD PTR [rax+0xb80]
  41ac54:	mov    QWORD PTR [rbx+0x18],0xb80
  41ac5c:	mov    edx,DWORD PTR [rdx+0xb90]
  41ac62:	sub    edx,0xb80
  41ac68:	mov    DWORD PTR [rax+0xb90],edx
  41ac6e:	jmp    41abbf <flatcc_emitter@@Base+0x27f>
  41ac73:	nop    DWORD PTR [rax+rax*1+0x0]
  41ac78:	mov    edi,0xb98
  41ac7d:	call   406220 <malloc@plt>
  41ac82:	test   rax,rax
  41ac85:	je     41ab58 <flatcc_emitter@@Base+0x218>
  41ac8b:	add    QWORD PTR [rbx+0x38],0xb80
  41ac93:	mov    QWORD PTR [rax+0xb88],r14
  41ac9a:	mov    QWORD PTR [rax+0xb80],r15
  41aca1:	mov    QWORD PTR [r15+0xb88],rax
  41aca8:	mov    QWORD PTR [r14+0xb80],rax
  41acaf:	mov    QWORD PTR [rbx],rax
  41acb2:	jmp    41ac42 <flatcc_emitter@@Base+0x302>
  41acb4:	nop    DWORD PTR [rax+0x0]
  41acb8:	mov    edi,0xb98
  41acbd:	call   406220 <malloc@plt>
  41acc2:	test   rax,rax
  41acc5:	je     41ab58 <flatcc_emitter@@Base+0x218>
  41accb:	lea    rdx,[rax+0x5c0]
  41acd2:	add    QWORD PTR [rbx+0x38],0xb80
  41acda:	mov    QWORD PTR [rbx],rax
  41acdd:	mov    QWORD PTR [rbx+0x8],rax
  41ace1:	mov    QWORD PTR [rax+0xb80],rax
  41ace8:	mov    QWORD PTR [rax+0xb88],rax
  41acef:	mov    QWORD PTR [rbx+0x10],rdx
  41acf3:	mov    QWORD PTR [rbx+0x20],rdx
  41acf7:	mov    QWORD PTR [rbx+0x18],0x5c0
  41acff:	mov    QWORD PTR [rbx+0x28],0x5c0
  41ad07:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  41ad11:	jmp    41abbf <flatcc_emitter@@Base+0x27f>
  41ad16:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41ad20:	mov    rcx,QWORD PTR [rdi+0x10]
  41ad24:	sub    rax,r8
  41ad27:	sub    rcx,r8
  41ad2a:	mov    QWORD PTR [rdi+0x10],rcx
  41ad2e:	mov    QWORD PTR [rdi+0x18],rax
  41ad32:	jmp    41aa0b <flatcc_emitter@@Base+0xcb>
  41ad37:	nop    WORD PTR [rax+rax*1+0x0]

000000000041ad40 <flatcc_emitter_copy_buffer@@Base>:
  41ad40:	endbr64 
  41ad44:	mov    rax,QWORD PTR [rdi+0x30]
  41ad48:	cmp    rax,rdx
  41ad4b:	ja     41adf0 <flatcc_emitter_copy_buffer@@Base+0xb0>
  41ad51:	mov    rcx,QWORD PTR [rdi]
  41ad54:	test   rcx,rcx
  41ad57:	je     41adf2 <flatcc_emitter_copy_buffer@@Base+0xb2>
  41ad5d:	push   rbp
  41ad5e:	mov    r8,rsi
  41ad61:	mov    rbp,rdi
  41ad64:	push   rbx
  41ad65:	sub    rsp,0x8
  41ad69:	mov    rsi,QWORD PTR [rdi+0x10]
  41ad6d:	cmp    rcx,QWORD PTR [rdi+0x8]
  41ad71:	je     41ae00 <flatcc_emitter_copy_buffer@@Base+0xc0>
  41ad77:	mov    ecx,0xb80
  41ad7c:	mov    rbx,rcx
  41ad7f:	sub    rbx,QWORD PTR [rdi+0x18]
  41ad83:	mov    rdx,rbx
  41ad86:	mov    rdi,r8
  41ad89:	call   406210 <memcpy@plt>
  41ad8e:	lea    rcx,[rax+rbx*1]
  41ad92:	mov    rax,QWORD PTR [rbp+0x0]
  41ad96:	mov    rbx,QWORD PTR [rax+0xb80]
  41ad9d:	cmp    rbx,QWORD PTR [rbp+0x8]
  41ada1:	je     41adcf <flatcc_emitter_copy_buffer@@Base+0x8f>
  41ada3:	nop    DWORD PTR [rax+rax*1+0x0]
  41ada8:	mov    rsi,rbx
  41adab:	mov    rdi,rcx
  41adae:	mov    edx,0xb80
  41adb3:	call   406210 <memcpy@plt>
  41adb8:	mov    rbx,QWORD PTR [rbx+0xb80]
  41adbf:	mov    rcx,rax
  41adc2:	add    rcx,0xb80
  41adc9:	cmp    QWORD PTR [rbp+0x8],rbx
  41adcd:	jne    41ada8 <flatcc_emitter_copy_buffer@@Base+0x68>
  41adcf:	mov    edx,0xb80
  41add4:	sub    rdx,QWORD PTR [rbp+0x28]
  41add8:	mov    rsi,rbx
  41addb:	mov    rdi,rcx
  41adde:	call   406210 <memcpy@plt>
  41ade3:	add    rsp,0x8
  41ade7:	mov    rcx,rax
  41adea:	pop    rbx
  41adeb:	mov    rax,rcx
  41adee:	pop    rbp
  41adef:	ret    
  41adf0:	xor    ecx,ecx
  41adf2:	mov    rax,rcx
  41adf5:	ret    
  41adf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41ae00:	mov    rdx,rax
  41ae03:	mov    rdi,r8
  41ae06:	call   406210 <memcpy@plt>
  41ae0b:	add    rsp,0x8
  41ae0f:	mov    rcx,rax
  41ae12:	pop    rbx
  41ae13:	mov    rax,rcx
  41ae16:	pop    rbp
  41ae17:	ret    
  41ae18:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041ae20 <flatcc_verify_error_string@@Base>:
  41ae20:	endbr64 
  41ae24:	cmp    edi,0x24
  41ae27:	ja     41b090 <flatcc_verify_error_string@@Base+0x270>
  41ae2d:	lea    rdx,[rip+0x16284]        # 4310b8 <flatcc_builder_padding_base@@Base+0x698>
  41ae34:	mov    edi,edi
  41ae36:	movsxd rax,DWORD PTR [rdx+rdi*4]
  41ae3a:	add    rax,rdx
  41ae3d:	notrack jmp rax
  41ae40:	lea    rax,[rip+0x15de1]        # 430c28 <flatcc_builder_padding_base@@Base+0x208>
  41ae47:	ret    
  41ae48:	nop    DWORD PTR [rax+rax*1+0x0]
  41ae50:	lea    rax,[rip+0x15f55]        # 430dac <flatcc_builder_padding_base@@Base+0x38c>
  41ae57:	ret    
  41ae58:	nop    DWORD PTR [rax+rax*1+0x0]
  41ae60:	lea    rax,[rip+0x16229]        # 431090 <flatcc_builder_padding_base@@Base+0x670>
  41ae67:	ret    
  41ae68:	nop    DWORD PTR [rax+rax*1+0x0]
  41ae70:	lea    rax,[rip+0x161e1]        # 431058 <flatcc_builder_padding_base@@Base+0x638>
  41ae77:	ret    
  41ae78:	nop    DWORD PTR [rax+rax*1+0x0]
  41ae80:	lea    rax,[rip+0x161a9]        # 431030 <flatcc_builder_padding_base@@Base+0x610>
  41ae87:	ret    
  41ae88:	nop    DWORD PTR [rax+rax*1+0x0]
  41ae90:	lea    rax,[rip+0x16171]        # 431008 <flatcc_builder_padding_base@@Base+0x5e8>
  41ae97:	ret    
  41ae98:	nop    DWORD PTR [rax+rax*1+0x0]
  41aea0:	lea    rax,[rip+0x15ef0]        # 430d97 <flatcc_builder_padding_base@@Base+0x377>
  41aea7:	ret    
  41aea8:	nop    DWORD PTR [rax+rax*1+0x0]
  41aeb0:	lea    rax,[rip+0x16129]        # 430fe0 <flatcc_builder_padding_base@@Base+0x5c0>
  41aeb7:	ret    
  41aeb8:	nop    DWORD PTR [rax+rax*1+0x0]
  41aec0:	lea    rax,[rip+0x160f1]        # 430fb8 <flatcc_builder_padding_base@@Base+0x598>
  41aec7:	ret    
  41aec8:	nop    DWORD PTR [rax+rax*1+0x0]
  41aed0:	lea    rax,[rip+0x15ea8]        # 430d7f <flatcc_builder_padding_base@@Base+0x35f>
  41aed7:	ret    
  41aed8:	nop    DWORD PTR [rax+rax*1+0x0]
  41aee0:	lea    rax,[rip+0x15e7d]        # 430d64 <flatcc_builder_padding_base@@Base+0x344>
  41aee7:	ret    
  41aee8:	nop    DWORD PTR [rax+rax*1+0x0]
  41aef0:	lea    rax,[rip+0x15e59]        # 430d50 <flatcc_builder_padding_base@@Base+0x330>
  41aef7:	ret    
  41aef8:	nop    DWORD PTR [rax+rax*1+0x0]
  41af00:	lea    rax,[rip+0x16081]        # 430f88 <flatcc_builder_padding_base@@Base+0x568>
  41af07:	ret    
  41af08:	nop    DWORD PTR [rax+rax*1+0x0]
  41af10:	lea    rax,[rip+0x16041]        # 430f58 <flatcc_builder_padding_base@@Base+0x538>
  41af17:	ret    
  41af18:	nop    DWORD PTR [rax+rax*1+0x0]
  41af20:	lea    rax,[rip+0x16001]        # 430f28 <flatcc_builder_padding_base@@Base+0x508>
  41af27:	ret    
  41af28:	nop    DWORD PTR [rax+rax*1+0x0]
  41af30:	lea    rax,[rip+0x15fb9]        # 430ef0 <flatcc_builder_padding_base@@Base+0x4d0>
  41af37:	ret    
  41af38:	nop    DWORD PTR [rax+rax*1+0x0]
  41af40:	lea    rax,[rip+0x15f79]        # 430ec0 <flatcc_builder_padding_base@@Base+0x4a0>
  41af47:	ret    
  41af48:	nop    DWORD PTR [rax+rax*1+0x0]
  41af50:	lea    rax,[rip+0x15de1]        # 430d38 <flatcc_builder_padding_base@@Base+0x318>
  41af57:	ret    
  41af58:	nop    DWORD PTR [rax+rax*1+0x0]
  41af60:	lea    rax,[rip+0x15f31]        # 430e98 <flatcc_builder_padding_base@@Base+0x478>
  41af67:	ret    
  41af68:	nop    DWORD PTR [rax+rax*1+0x0]
  41af70:	lea    rax,[rip+0x15dad]        # 430d24 <flatcc_builder_padding_base@@Base+0x304>
  41af77:	ret    
  41af78:	nop    DWORD PTR [rax+rax*1+0x0]
  41af80:	lea    rax,[rip+0x15ee9]        # 430e70 <flatcc_builder_padding_base@@Base+0x450>
  41af87:	ret    
  41af88:	nop    DWORD PTR [rax+rax*1+0x0]
  41af90:	lea    rax,[rip+0x15eb1]        # 430e48 <flatcc_builder_padding_base@@Base+0x428>
  41af97:	ret    
  41af98:	nop    DWORD PTR [rax+rax*1+0x0]
  41afa0:	lea    rax,[rip+0x15e79]        # 430e20 <flatcc_builder_padding_base@@Base+0x400>
  41afa7:	ret    
  41afa8:	nop    DWORD PTR [rax+rax*1+0x0]
  41afb0:	lea    rax,[rip+0x15d53]        # 430d0a <flatcc_builder_padding_base@@Base+0x2ea>
  41afb7:	ret    
  41afb8:	nop    DWORD PTR [rax+rax*1+0x0]
  41afc0:	lea    rax,[rip+0x15d2a]        # 430cf1 <flatcc_builder_padding_base@@Base+0x2d1>
  41afc7:	ret    
  41afc8:	nop    DWORD PTR [rax+rax*1+0x0]
  41afd0:	lea    rax,[rip+0x15d02]        # 430cd9 <flatcc_builder_padding_base@@Base+0x2b9>
  41afd7:	ret    
  41afd8:	nop    DWORD PTR [rax+rax*1+0x0]
  41afe0:	lea    rax,[rip+0x15ce1]        # 430cc8 <flatcc_builder_padding_base@@Base+0x2a8>
  41afe7:	ret    
  41afe8:	nop    DWORD PTR [rax+rax*1+0x0]
  41aff0:	lea    rax,[rip+0x15cbc]        # 430cb3 <flatcc_builder_padding_base@@Base+0x293>
  41aff7:	ret    
  41aff8:	nop    DWORD PTR [rax+rax*1+0x0]
  41b000:	lea    rax,[rip+0x15c98]        # 430c9f <flatcc_builder_padding_base@@Base+0x27f>
  41b007:	ret    
  41b008:	nop    DWORD PTR [rax+rax*1+0x0]
  41b010:	lea    rax,[rip+0x15c74]        # 430c8b <flatcc_builder_padding_base@@Base+0x26b>
  41b017:	ret    
  41b018:	nop    DWORD PTR [rax+rax*1+0x0]
  41b020:	lea    rax,[rip+0x15c49]        # 430c70 <flatcc_builder_padding_base@@Base+0x250>
  41b027:	ret    
  41b028:	nop    DWORD PTR [rax+rax*1+0x0]
  41b030:	lea    rax,[rip+0x15dc9]        # 430e00 <flatcc_builder_padding_base@@Base+0x3e0>
  41b037:	ret    
  41b038:	nop    DWORD PTR [rax+rax*1+0x0]
  41b040:	lea    rax,[rip+0x15d91]        # 430dd8 <flatcc_builder_padding_base@@Base+0x3b8>
  41b047:	ret    
  41b048:	nop    DWORD PTR [rax+rax*1+0x0]
  41b050:	lea    rax,[rip+0x15c02]        # 430c59 <flatcc_builder_padding_base@@Base+0x239>
  41b057:	ret    
  41b058:	nop    DWORD PTR [rax+rax*1+0x0]
  41b060:	lea    rax,[rip+0x15bd8]        # 430c3f <flatcc_builder_padding_base@@Base+0x21f>
  41b067:	ret    
  41b068:	nop    DWORD PTR [rax+rax*1+0x0]
  41b070:	lea    rax,[rip+0x15bb4]        # 430c2b <flatcc_builder_padding_base@@Base+0x20b>
  41b077:	ret    
  41b078:	nop    DWORD PTR [rax+rax*1+0x0]
  41b080:	lea    rax,[rip+0x15d33]        # 430dba <flatcc_builder_padding_base@@Base+0x39a>
  41b087:	ret    
  41b088:	nop    DWORD PTR [rax+rax*1+0x0]
  41b090:	lea    rax,[rip+0x15b89]        # 430c20 <flatcc_builder_padding_base@@Base+0x200>
  41b097:	ret    
  41b098:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041b0a0 <flatcc_verify_field@@Base>:
  41b0a0:	endbr64 
  41b0a4:	lea    esi,[rsi+rsi*1+0x4]
  41b0a8:	xor    eax,eax
  41b0aa:	cmp    si,WORD PTR [rdi+0x1e]
  41b0ae:	jae    41b0e9 <flatcc_verify_field@@Base+0x49>
  41b0b0:	mov    r8,QWORD PTR [rdi+0x10]
  41b0b4:	movzx  esi,si
  41b0b7:	movzx  esi,WORD PTR [r8+rsi*1]
  41b0bc:	test   esi,esi
  41b0be:	je     41b0e9 <flatcc_verify_field@@Base+0x49>
  41b0c0:	movzx  r8d,WORD PTR [rdi+0x1c]
  41b0c5:	add    edx,esi
  41b0c7:	mov    eax,0xd
  41b0cc:	cmp    edx,r8d
  41b0cf:	ja     41b0e9 <flatcc_verify_field@@Base+0x49>
  41b0d1:	mov    eax,DWORD PTR [rdi+0x18]
  41b0d4:	movzx  ecx,cx
  41b0d7:	add    eax,DWORD PTR [rdi]
  41b0d9:	add    eax,esi
  41b0db:	dec    ecx
  41b0dd:	and    eax,ecx
  41b0df:	cmp    eax,0x1
  41b0e2:	sbb    eax,eax
  41b0e4:	not    eax
  41b0e6:	and    eax,0xc
  41b0e9:	ret    
  41b0ea:	nop    WORD PTR [rax+rax*1+0x0]

000000000041b0f0 <flatcc_verify_string_field@@Base>:
  41b0f0:	endbr64 
  41b0f4:	lea    esi,[rsi+rsi*1+0x4]
  41b0f8:	cmp    si,WORD PTR [rdi+0x1e]
  41b0fc:	jae    41b190 <flatcc_verify_string_field@@Base+0xa0>
  41b102:	mov    rax,QWORD PTR [rdi+0x10]
  41b106:	movzx  esi,si
  41b109:	movzx  ecx,WORD PTR [rax+rsi*1]
  41b10d:	test   ecx,ecx
  41b10f:	je     41b190 <flatcc_verify_string_field@@Base+0xa0>
  41b111:	movzx  edx,WORD PTR [rdi+0x1c]
  41b115:	lea    esi,[rcx+0x4]
  41b118:	mov    eax,0xd
  41b11d:	cmp    esi,edx
  41b11f:	ja     41b18a <flatcc_verify_string_field@@Base+0x9a>
  41b121:	add    ecx,DWORD PTR [rdi+0x18]
  41b124:	mov    edx,ecx
  41b126:	mov    eax,0xc
  41b12b:	test   cl,0x3
  41b12e:	jne    41b18a <flatcc_verify_string_field@@Base+0x9a>
  41b130:	test   ecx,ecx
  41b132:	je     41b188 <flatcc_verify_string_field@@Base+0x98>
  41b134:	mov    rsi,QWORD PTR [rdi]
  41b137:	mov    eax,ecx
  41b139:	add    ecx,DWORD PTR [rsi+rax*1]
  41b13c:	mov    eax,0x11
  41b141:	cmp    edx,ecx
  41b143:	jae    41b18a <flatcc_verify_string_field@@Base+0x9a>
  41b145:	mov    r9d,DWORD PTR [rdi+0x8]
  41b149:	mov    edi,ecx
  41b14b:	lea    r8,[rdi+0x4]
  41b14f:	mov    rdx,r9
  41b152:	cmp    r8,r9
  41b155:	ja     41b18a <flatcc_verify_string_field@@Base+0x9a>
  41b157:	mov    r9d,ecx
  41b15a:	and    r9d,0x3
  41b15e:	jne    41b18a <flatcc_verify_string_field@@Base+0x9a>
  41b160:	mov    edi,DWORD PTR [rsi+rdi*1]
  41b163:	sub    edx,0x4
  41b166:	sub    edx,ecx
  41b168:	lea    ecx,[rdi+0x1]
  41b16b:	mov    eax,0x8
  41b170:	cmp    edx,ecx
  41b172:	jb     41b18a <flatcc_verify_string_field@@Base+0x9a>
  41b174:	add    rsi,r8
  41b177:	cmp    BYTE PTR [rsi+rdi*1],0x0
  41b17b:	mov    eax,0x7
  41b180:	cmove  eax,r9d
  41b184:	ret    
  41b185:	nop    DWORD PTR [rax]
  41b188:	xor    eax,eax
  41b18a:	ret    
  41b18b:	nop    DWORD PTR [rax+rax*1+0x0]
  41b190:	xor    eax,eax
  41b192:	test   edx,edx
  41b194:	setne  al
  41b197:	shl    eax,0x2
  41b19a:	ret    
  41b19b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041b1a0 <flatcc_verify_vector_field@@Base>:
  41b1a0:	endbr64 
  41b1a4:	lea    esi,[rsi+rsi*1+0x4]
  41b1a8:	cmp    si,WORD PTR [rdi+0x1e]
  41b1ac:	jae    41b258 <flatcc_verify_vector_field@@Base+0xb8>
  41b1b2:	mov    rax,QWORD PTR [rdi+0x10]
  41b1b6:	movzx  esi,si
  41b1b9:	movzx  esi,WORD PTR [rax+rsi*1]
  41b1bd:	test   esi,esi
  41b1bf:	je     41b258 <flatcc_verify_vector_field@@Base+0xb8>
  41b1c5:	movzx  edx,WORD PTR [rdi+0x1c]
  41b1c9:	lea    r10d,[rsi+0x4]
  41b1cd:	mov    eax,0xd
  41b1d2:	cmp    r10d,edx
  41b1d5:	ja     41b250 <flatcc_verify_vector_field@@Base+0xb0>
  41b1d7:	mov    edx,DWORD PTR [rdi+0x18]
  41b1da:	mov    eax,0xc
  41b1df:	add    edx,esi
  41b1e1:	test   dl,0x3
  41b1e4:	jne    41b250 <flatcc_verify_vector_field@@Base+0xb0>
  41b1e6:	test   edx,edx
  41b1e8:	je     41b268 <flatcc_verify_vector_field@@Base+0xc8>
  41b1ea:	mov    r10,QWORD PTR [rdi]
  41b1ed:	mov    eax,edx
  41b1ef:	mov    esi,DWORD PTR [r10+rax*1]
  41b1f3:	mov    eax,0x10
  41b1f8:	add    esi,edx
  41b1fa:	cmp    edx,esi
  41b1fc:	jae    41b250 <flatcc_verify_vector_field@@Base+0xb0>
  41b1fe:	push   rbx
  41b1ff:	mov    ebx,esi
  41b201:	lea    r11,[rbx+0x4]
  41b205:	mov    edx,DWORD PTR [rdi+0x8]
  41b208:	mov    rdi,rdx
  41b20b:	cmp    r11,rdx
  41b20e:	ja     41b24b <flatcc_verify_vector_field@@Base+0xab>
  41b210:	cmp    r8w,0x4
  41b215:	mov    edx,0x4
  41b21a:	cmovae edx,r8d
  41b21e:	movzx  edx,dx
  41b221:	dec    edx
  41b223:	or     edx,0x3
  41b226:	movsxd rdx,edx
  41b229:	test   rdx,r11
  41b22c:	jne    41b24b <flatcc_verify_vector_field@@Base+0xab>
  41b22e:	mov    edx,DWORD PTR [r10+rbx*1]
  41b232:	sub    edi,0x4
  41b235:	mov    eax,0x19
  41b23a:	cmp    edx,r9d
  41b23d:	ja     41b24b <flatcc_verify_vector_field@@Base+0xab>
  41b23f:	imul   ecx,edx
  41b242:	sub    edi,esi
  41b244:	cmp    edi,ecx
  41b246:	sbb    eax,eax
  41b248:	and    eax,0x1a
  41b24b:	pop    rbx
  41b24c:	ret    
  41b24d:	nop    DWORD PTR [rax]
  41b250:	ret    
  41b251:	nop    DWORD PTR [rax+0x0]
  41b258:	xor    eax,eax
  41b25a:	test   edx,edx
  41b25c:	setne  al
  41b25f:	shl    eax,0x2
  41b262:	ret    
  41b263:	nop    DWORD PTR [rax+rax*1+0x0]
  41b268:	xor    eax,eax
  41b26a:	ret    
  41b26b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041b270 <flatcc_verify_string_vector_field@@Base>:
  41b270:	endbr64 
  41b274:	lea    esi,[rsi+rsi*1+0x4]
  41b278:	cmp    si,WORD PTR [rdi+0x1e]
  41b27c:	jae    41b3d0 <flatcc_verify_string_vector_field@@Base+0x160>
  41b282:	mov    rax,QWORD PTR [rdi+0x10]
  41b286:	movzx  esi,si
  41b289:	movzx  ecx,WORD PTR [rax+rsi*1]
  41b28d:	test   ecx,ecx
  41b28f:	je     41b3d0 <flatcc_verify_string_vector_field@@Base+0x160>
  41b295:	movzx  edx,WORD PTR [rdi+0x1c]
  41b299:	lea    esi,[rcx+0x4]
  41b29c:	mov    eax,0xd
  41b2a1:	cmp    esi,edx
  41b2a3:	ja     41b3c8 <flatcc_verify_string_vector_field@@Base+0x158>
  41b2a9:	add    ecx,DWORD PTR [rdi+0x18]
  41b2ac:	mov    edx,ecx
  41b2ae:	mov    eax,0xc
  41b2b3:	test   cl,0x3
  41b2b6:	jne    41b3c8 <flatcc_verify_string_vector_field@@Base+0x158>
  41b2bc:	test   ecx,ecx
  41b2be:	je     41b410 <flatcc_verify_string_vector_field@@Base+0x1a0>
  41b2c4:	mov    rcx,QWORD PTR [rdi]
  41b2c7:	mov    eax,edx
  41b2c9:	mov    esi,DWORD PTR [rcx+rax*1]
  41b2cc:	mov    eax,0x10
  41b2d1:	add    esi,edx
  41b2d3:	cmp    edx,esi
  41b2d5:	jae    41b3c8 <flatcc_verify_string_vector_field@@Base+0x158>
  41b2db:	mov    r9d,DWORD PTR [rdi+0x8]
  41b2df:	mov    r10d,esi
  41b2e2:	lea    r8,[r10+0x4]
  41b2e6:	mov    rdi,r9
  41b2e9:	cmp    r8,r9
  41b2ec:	ja     41b3c8 <flatcc_verify_string_vector_field@@Base+0x158>
  41b2f2:	push   rbx
  41b2f3:	test   r8b,0x3
  41b2f7:	jne    41b3e0 <flatcc_verify_string_vector_field@@Base+0x170>
  41b2fd:	mov    eax,DWORD PTR [rcx+r10*1]
  41b301:	lea    edx,[rsi+0x4]
  41b304:	cmp    eax,0x3fffffff
  41b309:	ja     41b3e0 <flatcc_verify_string_vector_field@@Base+0x170>
  41b30f:	mov    ebx,r9d
  41b312:	lea    r11d,[rax*4+0x0]
  41b31a:	sub    ebx,edx
  41b31c:	cmp    ebx,r11d
  41b31f:	jb     41b3e0 <flatcc_verify_string_vector_field@@Base+0x170>
  41b325:	test   eax,eax
  41b327:	je     41b418 <flatcc_verify_string_vector_field@@Base+0x1a8>
  41b32d:	mov    r8d,DWORD PTR [rcx+r10*1+0x4]
  41b332:	mov    eax,0x11
  41b337:	add    r8d,edx
  41b33a:	cmp    r8d,edx
  41b33d:	jbe    41b3c3 <flatcc_verify_string_vector_field@@Base+0x153>
  41b343:	mov    r10d,r8d
  41b346:	lea    rsi,[r10+0x4]
  41b34a:	cmp    rsi,r9
  41b34d:	ja     41b3c3 <flatcc_verify_string_vector_field@@Base+0x153>
  41b34f:	test   r8b,0x3
  41b353:	jne    41b3c3 <flatcc_verify_string_vector_field@@Base+0x153>
  41b355:	mov    r10d,DWORD PTR [rcx+r10*1]
  41b359:	sub    edi,0x4
  41b35c:	mov    ebx,edi
  41b35e:	sub    ebx,r8d
  41b361:	lea    r8d,[r10+0x1]
  41b365:	mov    eax,0x8
  41b36a:	cmp    ebx,r8d
  41b36d:	jb     41b3c3 <flatcc_verify_string_vector_field@@Base+0x153>
  41b36f:	lea    r8d,[rdx+r11*1]
  41b373:	jmp    41b39f <flatcc_verify_string_vector_field@@Base+0x12f>
  41b375:	nop    DWORD PTR [rax]
  41b378:	mov    r10d,ebx
  41b37b:	lea    rsi,[r10+0x4]
  41b37f:	cmp    r9,rsi
  41b382:	jb     41b3be <flatcc_verify_string_vector_field@@Base+0x14e>
  41b384:	test   al,0x3
  41b386:	jne    41b3be <flatcc_verify_string_vector_field@@Base+0x14e>
  41b388:	mov    r10d,DWORD PTR [rcx+r10*1]
  41b38c:	mov    r11d,edi
  41b38f:	sub    r11d,ebx
  41b392:	lea    eax,[r10+0x1]
  41b396:	cmp    r11d,eax
  41b399:	jb     41b41c <flatcc_verify_string_vector_field@@Base+0x1ac>
  41b39f:	add    rsi,rcx
  41b3a2:	cmp    BYTE PTR [rsi+r10*1],0x0
  41b3a7:	jne    41b423 <flatcc_verify_string_vector_field@@Base+0x1b3>
  41b3a9:	add    edx,0x4
  41b3ac:	cmp    edx,r8d
  41b3af:	je     41b418 <flatcc_verify_string_vector_field@@Base+0x1a8>
  41b3b1:	mov    eax,edx
  41b3b3:	mov    ebx,DWORD PTR [rcx+rax*1]
  41b3b6:	add    ebx,edx
  41b3b8:	mov    eax,ebx
  41b3ba:	cmp    edx,ebx
  41b3bc:	jb     41b378 <flatcc_verify_string_vector_field@@Base+0x108>
  41b3be:	mov    eax,0x11
  41b3c3:	pop    rbx
  41b3c4:	ret    
  41b3c5:	nop    DWORD PTR [rax]
  41b3c8:	ret    
  41b3c9:	nop    DWORD PTR [rax+0x0]
  41b3d0:	xor    eax,eax
  41b3d2:	test   edx,edx
  41b3d4:	setne  al
  41b3d7:	shl    eax,0x2
  41b3da:	ret    
  41b3db:	nop    DWORD PTR [rax+rax*1+0x0]
  41b3e0:	and    r8d,0x3
  41b3e4:	mov    eax,0x10
  41b3e9:	jne    41b3c3 <flatcc_verify_string_vector_field@@Base+0x153>
  41b3eb:	mov    edx,DWORD PTR [rcx+r10*1]
  41b3ef:	sub    edi,0x4
  41b3f2:	mov    eax,0x19
  41b3f7:	cmp    edx,0x3fffffff
  41b3fd:	ja     41b3c3 <flatcc_verify_string_vector_field@@Base+0x153>
  41b3ff:	sub    edi,esi
  41b401:	shl    edx,0x2
  41b404:	cmp    edi,edx
  41b406:	sbb    eax,eax
  41b408:	and    eax,0x1a
  41b40b:	pop    rbx
  41b40c:	ret    
  41b40d:	nop    DWORD PTR [rax]
  41b410:	xor    eax,eax
  41b412:	ret    
  41b413:	nop    DWORD PTR [rax+rax*1+0x0]
  41b418:	xor    eax,eax
  41b41a:	pop    rbx
  41b41b:	ret    
  41b41c:	mov    eax,0x8
  41b421:	pop    rbx
  41b422:	ret    
  41b423:	mov    eax,0x7
  41b428:	pop    rbx
  41b429:	ret    
  41b42a:	nop    WORD PTR [rax+rax*1+0x0]

000000000041b430 <flatcc_verify_table_field@@Base>:
  41b430:	endbr64 
  41b434:	sub    rsp,0x38
  41b438:	lea    esi,[rsi+rsi*1+0x4]
  41b43c:	mov    rax,QWORD PTR fs:0x28
  41b445:	mov    QWORD PTR [rsp+0x28],rax
  41b44a:	xor    eax,eax
  41b44c:	cmp    si,WORD PTR [rdi+0x1e]
  41b450:	jae    41b588 <flatcc_verify_table_field@@Base+0x158>
  41b456:	mov    rax,QWORD PTR [rdi+0x10]
  41b45a:	movzx  esi,si
  41b45d:	movzx  esi,WORD PTR [rax+rsi*1]
  41b461:	test   esi,esi
  41b463:	je     41b588 <flatcc_verify_table_field@@Base+0x158>
  41b469:	movzx  edx,WORD PTR [rdi+0x1c]
  41b46d:	lea    r8d,[rsi+0x4]
  41b471:	mov    eax,0xd
  41b476:	cmp    r8d,edx
  41b479:	ja     41b570 <flatcc_verify_table_field@@Base+0x140>
  41b47f:	add    esi,DWORD PTR [rdi+0x18]
  41b482:	mov    eax,0xc
  41b487:	test   sil,0x3
  41b48b:	jne    41b570 <flatcc_verify_table_field@@Base+0x140>
  41b491:	test   esi,esi
  41b493:	je     41b598 <flatcc_verify_table_field@@Base+0x168>
  41b499:	mov    edx,DWORD PTR [rdi+0xc]
  41b49c:	mov    r9,QWORD PTR [rdi]
  41b49f:	mov    eax,esi
  41b4a1:	dec    edx
  41b4a3:	mov    r8d,DWORD PTR [r9+rax*1]
  41b4a7:	mov    r10d,DWORD PTR [rdi+0x8]
  41b4ab:	mov    DWORD PTR [rsp+0xc],edx
  41b4af:	mov    eax,0x3
  41b4b4:	je     41b570 <flatcc_verify_table_field@@Base+0x140>
  41b4ba:	lea    edx,[rsi+r8*1]
  41b4be:	mov    eax,0xf
  41b4c3:	cmp    esi,edx
  41b4c5:	jae    41b570 <flatcc_verify_table_field@@Base+0x140>
  41b4cb:	mov    esi,edx
  41b4cd:	mov    edi,r10d
  41b4d0:	lea    r8,[rsi+0x4]
  41b4d4:	cmp    r8,rdi
  41b4d7:	ja     41b570 <flatcc_verify_table_field@@Base+0x140>
  41b4dd:	test   dl,0x3
  41b4e0:	jne    41b570 <flatcc_verify_table_field@@Base+0x140>
  41b4e6:	mov    DWORD PTR [rsp+0x18],edx
  41b4ea:	mov    eax,edx
  41b4ec:	sub    eax,DWORD PTR [r9+rsi*1]
  41b4f0:	mov    esi,eax
  41b4f2:	js     41b59c <flatcc_verify_table_field@@Base+0x16c>
  41b4f8:	mov    r8d,eax
  41b4fb:	mov    eax,0x1d
  41b500:	test   sil,0x1
  41b504:	jne    41b570 <flatcc_verify_table_field@@Base+0x140>
  41b506:	lea    r11,[r8+0x2]
  41b50a:	mov    eax,0x1b
  41b50f:	cmp    rdi,r11
  41b512:	jb     41b570 <flatcc_verify_table_field@@Base+0x140>
  41b514:	lea    r11,[r9+r8*1]
  41b518:	movzx  eax,WORD PTR [r11]
  41b51c:	add    esi,eax
  41b51e:	mov    edi,eax
  41b520:	mov    WORD PTR [rsp+0x1e],ax
  41b525:	mov    eax,0x1e
  41b52a:	cmp    r10d,esi
  41b52d:	jb     41b570 <flatcc_verify_table_field@@Base+0x140>
  41b52f:	test   dil,0x1
  41b533:	jne    41b570 <flatcc_verify_table_field@@Base+0x140>
  41b535:	mov    eax,0x1c
  41b53a:	cmp    di,0x3
  41b53e:	jbe    41b570 <flatcc_verify_table_field@@Base+0x140>
  41b540:	movzx  eax,WORD PTR [r9+r8*1+0x2]
  41b546:	mov    esi,r10d
  41b549:	sub    esi,edx
  41b54b:	movzx  edx,ax
  41b54e:	mov    WORD PTR [rsp+0x1c],ax
  41b553:	mov    eax,0x14
  41b558:	cmp    esi,edx
  41b55a:	jb     41b570 <flatcc_verify_table_field@@Base+0x140>
  41b55c:	mov    rdi,rsp
  41b55f:	mov    QWORD PTR [rsp+0x10],r11
  41b564:	mov    QWORD PTR [rsp],r9
  41b568:	mov    DWORD PTR [rsp+0x8],r10d
  41b56d:	call   rcx
  41b56f:	nop
  41b570:	mov    rcx,QWORD PTR [rsp+0x28]
  41b575:	xor    rcx,QWORD PTR fs:0x28
  41b57e:	jne    41b5a3 <flatcc_verify_table_field@@Base+0x173>
  41b580:	add    rsp,0x38
  41b584:	ret    
  41b585:	nop    DWORD PTR [rax]
  41b588:	xor    eax,eax
  41b58a:	test   edx,edx
  41b58c:	setne  al
  41b58f:	shl    eax,0x2
  41b592:	jmp    41b570 <flatcc_verify_table_field@@Base+0x140>
  41b594:	nop    DWORD PTR [rax+0x0]
  41b598:	xor    eax,eax
  41b59a:	jmp    41b570 <flatcc_verify_table_field@@Base+0x140>
  41b59c:	mov    eax,0x1d
  41b5a1:	jmp    41b570 <flatcc_verify_table_field@@Base+0x140>
  41b5a3:	call   4061a0 <__stack_chk_fail@plt>
  41b5a8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041b5b0 <flatcc_verify_table_vector_field@@Base>:
  41b5b0:	endbr64 
  41b5b4:	push   r15
  41b5b6:	lea    esi,[rsi+rsi*1+0x4]
  41b5ba:	push   r14
  41b5bc:	push   r13
  41b5be:	push   r12
  41b5c0:	push   rbp
  41b5c1:	push   rbx
  41b5c2:	sub    rsp,0x58
  41b5c6:	mov    rax,QWORD PTR fs:0x28
  41b5cf:	mov    QWORD PTR [rsp+0x48],rax
  41b5d4:	xor    eax,eax
  41b5d6:	cmp    si,WORD PTR [rdi+0x1e]
  41b5da:	jae    41b7d8 <flatcc_verify_table_vector_field@@Base+0x228>
  41b5e0:	mov    rax,QWORD PTR [rdi+0x10]
  41b5e4:	movzx  esi,si
  41b5e7:	movzx  esi,WORD PTR [rax+rsi*1]
  41b5eb:	test   esi,esi
  41b5ed:	je     41b7d8 <flatcc_verify_table_vector_field@@Base+0x228>
  41b5f3:	movzx  edx,WORD PTR [rdi+0x1c]
  41b5f7:	lea    r8d,[rsi+0x4]
  41b5fb:	mov    eax,0xd
  41b600:	cmp    r8d,edx
  41b603:	ja     41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b609:	add    esi,DWORD PTR [rdi+0x18]
  41b60c:	mov    eax,0xc
  41b611:	test   sil,0x3
  41b615:	jne    41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b61b:	test   esi,esi
  41b61d:	je     41b7e1 <flatcc_verify_table_vector_field@@Base+0x231>
  41b623:	mov    r12,QWORD PTR [rdi]
  41b626:	mov    r8d,DWORD PTR [rdi+0xc]
  41b62a:	mov    eax,esi
  41b62c:	mov    edx,DWORD PTR [r12+rax*1]
  41b630:	test   r8d,r8d
  41b633:	jle    41b840 <flatcc_verify_table_vector_field@@Base+0x290>
  41b639:	add    edx,esi
  41b63b:	mov    eax,0x10
  41b640:	cmp    esi,edx
  41b642:	jae    41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b648:	mov    r15d,DWORD PTR [rdi+0x8]
  41b64c:	mov    edi,edx
  41b64e:	lea    rsi,[rdi+0x4]
  41b652:	mov    r14,r15
  41b655:	cmp    rsi,r15
  41b658:	ja     41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b65e:	test   sil,0x3
  41b662:	jne    41b7e8 <flatcc_verify_table_vector_field@@Base+0x238>
  41b668:	mov    eax,DWORD PTR [r12+rdi*1]
  41b66c:	lea    ebp,[rdx+0x4]
  41b66f:	cmp    eax,0x3fffffff
  41b674:	ja     41b7e8 <flatcc_verify_table_vector_field@@Base+0x238>
  41b67a:	mov    r10d,r15d
  41b67d:	lea    r9d,[rax*4+0x0]
  41b685:	sub    r10d,ebp
  41b688:	cmp    r10d,r9d
  41b68b:	jb     41b7e8 <flatcc_verify_table_vector_field@@Base+0x238>
  41b691:	test   eax,eax
  41b693:	je     41b7e1 <flatcc_verify_table_vector_field@@Base+0x231>
  41b699:	lea    rbx,[r12+rsi*1]
  41b69d:	lea    r13d,[r8-0x2]
  41b6a1:	mov    edx,DWORD PTR [rbx]
  41b6a3:	mov    eax,0x3
  41b6a8:	mov    DWORD PTR [rsp+0x2c],r13d
  41b6ad:	test   r13d,r13d
  41b6b0:	je     41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b6b6:	lea    eax,[rbp+rdx*1+0x0]
  41b6ba:	cmp    ebp,eax
  41b6bc:	jae    41b797 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41b6c2:	mov    esi,eax
  41b6c4:	lea    rdx,[rsi+0x4]
  41b6c8:	cmp    r15,rdx
  41b6cb:	jb     41b797 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41b6d1:	test   al,0x3
  41b6d3:	jne    41b797 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41b6d9:	lea    rdi,[rsp+0x20]
  41b6de:	mov    QWORD PTR [rsp+0x18],rdi
  41b6e3:	lea    edx,[rbp+r9*1+0x0]
  41b6e8:	nop    DWORD PTR [rax+rax*1+0x0]
  41b6f0:	mov    DWORD PTR [rsp+0x38],eax
  41b6f4:	mov    DWORD PTR [rsp+0xc],edx
  41b6f8:	mov    edx,eax
  41b6fa:	sub    edx,DWORD PTR [r12+rsi*1]
  41b6fe:	mov    esi,edx
  41b700:	js     41b797 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41b706:	mov    edi,edx
  41b708:	test   dl,0x1
  41b70b:	jne    41b797 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41b711:	lea    r9,[rdi+0x2]
  41b715:	cmp    r15,r9
  41b718:	jb     41b797 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41b71a:	lea    r10,[r12+rdi*1]
  41b71e:	movzx  r11d,WORD PTR [r10]
  41b722:	add    esi,r11d
  41b725:	mov    WORD PTR [rsp+0x3e],r11w
  41b72b:	cmp    r14d,esi
  41b72e:	jb     41b797 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41b730:	test   r11b,0x1
  41b734:	jne    41b797 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41b736:	cmp    r11w,0x3
  41b73b:	jbe    41b797 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41b73d:	movzx  esi,WORD PTR [r12+rdi*1+0x2]
  41b743:	mov    edx,r14d
  41b746:	sub    edx,eax
  41b748:	mov    WORD PTR [rsp+0x3c],si
  41b74d:	cmp    edx,esi
  41b74f:	jb     41b797 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41b751:	mov    rdi,QWORD PTR [rsp+0x18]
  41b756:	mov    QWORD PTR [rsp+0x10],rcx
  41b75b:	mov    QWORD PTR [rsp+0x30],r10
  41b760:	mov    QWORD PTR [rsp+0x20],r12
  41b765:	mov    DWORD PTR [rsp+0x28],r14d
  41b76a:	call   rcx
  41b76c:	test   eax,eax
  41b76e:	mov    rcx,QWORD PTR [rsp+0x10]
  41b773:	mov    edx,DWORD PTR [rsp+0xc]
  41b777:	jne    41b797 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41b779:	add    ebp,0x4
  41b77c:	cmp    ebp,edx
  41b77e:	je     41b7e1 <flatcc_verify_table_vector_field@@Base+0x231>
  41b780:	mov    esi,ebp
  41b782:	lea    rbx,[r12+rsi*1]
  41b786:	mov    eax,DWORD PTR [rbx]
  41b788:	mov    DWORD PTR [rsp+0x2c],r13d
  41b78d:	add    eax,ebp
  41b78f:	cmp    ebp,eax
  41b791:	jb     41b820 <flatcc_verify_table_vector_field@@Base+0x270>
  41b797:	mov    edx,DWORD PTR [rbx]
  41b799:	mov    DWORD PTR [rsp+0x2c],r13d
  41b79e:	add    edx,ebp
  41b7a0:	cmp    edx,ebp
  41b7a2:	ja     41b84a <flatcc_verify_table_vector_field@@Base+0x29a>
  41b7a8:	mov    eax,0xf
  41b7ad:	nop    DWORD PTR [rax]
  41b7b0:	mov    rbx,QWORD PTR [rsp+0x48]
  41b7b5:	xor    rbx,QWORD PTR fs:0x28
  41b7be:	jne    41b8d6 <flatcc_verify_table_vector_field@@Base+0x326>
  41b7c4:	add    rsp,0x58
  41b7c8:	pop    rbx
  41b7c9:	pop    rbp
  41b7ca:	pop    r12
  41b7cc:	pop    r13
  41b7ce:	pop    r14
  41b7d0:	pop    r15
  41b7d2:	ret    
  41b7d3:	nop    DWORD PTR [rax+rax*1+0x0]
  41b7d8:	mov    eax,0x4
  41b7dd:	test   edx,edx
  41b7df:	jne    41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b7e1:	xor    eax,eax
  41b7e3:	jmp    41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b7e5:	nop    DWORD PTR [rax]
  41b7e8:	and    esi,0x3
  41b7eb:	mov    eax,0x10
  41b7f0:	jne    41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b7f2:	mov    ecx,DWORD PTR [r12+rdi*1]
  41b7f6:	sub    r14d,0x4
  41b7fa:	mov    eax,0x19
  41b7ff:	cmp    ecx,0x3fffffff
  41b805:	ja     41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b807:	sub    r14d,edx
  41b80a:	shl    ecx,0x2
  41b80d:	mov    eax,0x1a
  41b812:	cmp    r14d,ecx
  41b815:	jb     41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b817:	xor    eax,eax
  41b819:	jmp    41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b81b:	nop    DWORD PTR [rax+rax*1+0x0]
  41b820:	mov    esi,eax
  41b822:	lea    rdi,[rsi+0x4]
  41b826:	cmp    r15,rdi
  41b829:	jb     41b797 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41b82f:	test   al,0x3
  41b831:	je     41b6f0 <flatcc_verify_table_vector_field@@Base+0x140>
  41b837:	jmp    41b797 <flatcc_verify_table_vector_field@@Base+0x1e7>
  41b83c:	nop    DWORD PTR [rax+0x0]
  41b840:	mov    eax,0x3
  41b845:	jmp    41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b84a:	mov    esi,edx
  41b84c:	lea    rdi,[rsi+0x4]
  41b850:	mov    eax,0xf
  41b855:	cmp    r15,rdi
  41b858:	jb     41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b85e:	test   dl,0x3
  41b861:	jne    41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b867:	mov    DWORD PTR [rsp+0x38],edx
  41b86b:	mov    r8d,edx
  41b86e:	sub    r8d,DWORD PTR [r12+rsi*1]
  41b872:	js     41b8db <flatcc_verify_table_vector_field@@Base+0x32b>
  41b874:	mov    esi,r8d
  41b877:	test   r8b,0x1
  41b87b:	jne    41b8db <flatcc_verify_table_vector_field@@Base+0x32b>
  41b87d:	lea    rax,[rsi+0x2]
  41b881:	cmp    r15,rax
  41b884:	jb     41b903 <flatcc_verify_table_vector_field@@Base+0x353>
  41b886:	lea    r9,[r12+rsi*1]
  41b88a:	movzx  edi,WORD PTR [r9]
  41b88e:	mov    eax,edi
  41b890:	mov    WORD PTR [rsp+0x3e],di
  41b895:	add    edi,r8d
  41b898:	cmp    r14d,edi
  41b89b:	jb     41b8e5 <flatcc_verify_table_vector_field@@Base+0x335>
  41b89d:	test   al,0x1
  41b89f:	jne    41b8e5 <flatcc_verify_table_vector_field@@Base+0x335>
  41b8a1:	cmp    ax,0x3
  41b8a5:	jbe    41b8ef <flatcc_verify_table_vector_field@@Base+0x33f>
  41b8a7:	movzx  eax,WORD PTR [r12+rsi*1+0x2]
  41b8ad:	mov    ebx,r14d
  41b8b0:	sub    ebx,edx
  41b8b2:	mov    WORD PTR [rsp+0x3c],ax
  41b8b7:	cmp    ebx,eax
  41b8b9:	jb     41b8f9 <flatcc_verify_table_vector_field@@Base+0x349>
  41b8bb:	lea    rdi,[rsp+0x20]
  41b8c0:	mov    QWORD PTR [rsp+0x30],r9
  41b8c5:	mov    QWORD PTR [rsp+0x20],r12
  41b8ca:	mov    DWORD PTR [rsp+0x28],r14d
  41b8cf:	call   rcx
  41b8d1:	jmp    41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b8d6:	call   4061a0 <__stack_chk_fail@plt>
  41b8db:	mov    eax,0x1d
  41b8e0:	jmp    41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b8e5:	mov    eax,0x1e
  41b8ea:	jmp    41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b8ef:	mov    eax,0x1c
  41b8f4:	jmp    41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b8f9:	mov    eax,0x14
  41b8fe:	jmp    41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b903:	mov    eax,0x1b
  41b908:	jmp    41b7b0 <flatcc_verify_table_vector_field@@Base+0x200>
  41b90d:	nop    DWORD PTR [rax]

000000000041b910 <flatcc_verify_union_table@@Base>:
  41b910:	endbr64 
  41b914:	sub    rsp,0x38
  41b918:	mov    edx,DWORD PTR [rdi+0xc]
  41b91b:	mov    rax,QWORD PTR fs:0x28
  41b924:	mov    QWORD PTR [rsp+0x28],rax
  41b929:	xor    eax,eax
  41b92b:	dec    edx
  41b92d:	mov    r8d,DWORD PTR [rdi+0x18]
  41b931:	mov    ecx,DWORD PTR [rdi+0x14]
  41b934:	mov    r9d,DWORD PTR [rdi+0x8]
  41b938:	mov    r10,QWORD PTR [rdi]
  41b93b:	mov    DWORD PTR [rsp+0xc],edx
  41b93f:	mov    eax,0x3
  41b944:	je     41b953 <flatcc_verify_union_table@@Base+0x43>
  41b946:	lea    edx,[r8+rcx*1]
  41b94a:	mov    eax,0xf
  41b94f:	cmp    ecx,edx
  41b951:	jb     41b970 <flatcc_verify_union_table@@Base+0x60>
  41b953:	mov    rsi,QWORD PTR [rsp+0x28]
  41b958:	xor    rsi,QWORD PTR fs:0x28
  41b961:	jne    41ba2a <flatcc_verify_union_table@@Base+0x11a>
  41b967:	add    rsp,0x38
  41b96b:	ret    
  41b96c:	nop    DWORD PTR [rax+0x0]
  41b970:	mov    ecx,edx
  41b972:	mov    edi,r9d
  41b975:	lea    r8,[rcx+0x4]
  41b979:	cmp    r8,rdi
  41b97c:	ja     41b953 <flatcc_verify_union_table@@Base+0x43>
  41b97e:	test   dl,0x3
  41b981:	jne    41b953 <flatcc_verify_union_table@@Base+0x43>
  41b983:	mov    DWORD PTR [rsp+0x18],edx
  41b987:	mov    eax,edx
  41b989:	sub    eax,DWORD PTR [r10+rcx*1]
  41b98d:	mov    ecx,eax
  41b98f:	js     41ba20 <flatcc_verify_union_table@@Base+0x110>
  41b995:	mov    r8d,eax
  41b998:	mov    eax,0x1d
  41b99d:	test   cl,0x1
  41b9a0:	jne    41b953 <flatcc_verify_union_table@@Base+0x43>
  41b9a2:	lea    r11,[r8+0x2]
  41b9a6:	mov    eax,0x1b
  41b9ab:	cmp    rdi,r11
  41b9ae:	jb     41b953 <flatcc_verify_union_table@@Base+0x43>
  41b9b0:	lea    r11,[r10+r8*1]
  41b9b4:	movzx  eax,WORD PTR [r11]
  41b9b8:	add    ecx,eax
  41b9ba:	mov    edi,eax
  41b9bc:	mov    WORD PTR [rsp+0x1e],ax
  41b9c1:	mov    eax,0x1e
  41b9c6:	cmp    r9d,ecx
  41b9c9:	jb     41b953 <flatcc_verify_union_table@@Base+0x43>
  41b9cb:	test   dil,0x1
  41b9cf:	jne    41b953 <flatcc_verify_union_table@@Base+0x43>
  41b9d1:	mov    eax,0x1c
  41b9d6:	cmp    di,0x3
  41b9da:	jbe    41b953 <flatcc_verify_union_table@@Base+0x43>
  41b9e0:	movzx  eax,WORD PTR [r10+r8*1+0x2]
  41b9e6:	mov    ecx,r9d
  41b9e9:	sub    ecx,edx
  41b9eb:	movzx  edx,ax
  41b9ee:	mov    WORD PTR [rsp+0x1c],ax
  41b9f3:	mov    eax,0x14
  41b9f8:	cmp    ecx,edx
  41b9fa:	jb     41b953 <flatcc_verify_union_table@@Base+0x43>
  41ba00:	mov    rdi,rsp
  41ba03:	mov    QWORD PTR [rsp+0x10],r11
  41ba08:	mov    QWORD PTR [rsp],r10
  41ba0c:	mov    DWORD PTR [rsp+0x8],r9d
  41ba11:	call   rsi
  41ba13:	jmp    41b953 <flatcc_verify_union_table@@Base+0x43>
  41ba18:	nop    DWORD PTR [rax+rax*1+0x0]
  41ba20:	mov    eax,0x1d
  41ba25:	jmp    41b953 <flatcc_verify_union_table@@Base+0x43>
  41ba2a:	call   4061a0 <__stack_chk_fail@plt>
  41ba2f:	nop

000000000041ba30 <flatcc_verify_union_struct@@Base>:
  41ba30:	endbr64 
  41ba34:	mov    ecx,DWORD PTR [rdi+0x18]
  41ba37:	mov    r8d,DWORD PTR [rdi+0x14]
  41ba3b:	mov    eax,0x12
  41ba40:	mov    edi,DWORD PTR [rdi+0x8]
  41ba43:	test   ecx,ecx
  41ba45:	je     41ba6c <flatcc_verify_union_struct@@Base+0x3c>
  41ba47:	add    ecx,r8d
  41ba4a:	cmp    edi,ecx
  41ba4c:	jb     41ba6c <flatcc_verify_union_struct@@Base+0x3c>
  41ba4e:	add    esi,ecx
  41ba50:	jb     41ba71 <flatcc_verify_union_struct@@Base+0x41>
  41ba52:	mov    eax,0x9
  41ba57:	cmp    edi,esi
  41ba59:	jb     41ba70 <flatcc_verify_union_struct@@Base+0x40>
  41ba5b:	movzx  edx,dx
  41ba5e:	dec    edx
  41ba60:	and    ecx,edx
  41ba62:	cmp    ecx,0x1
  41ba65:	sbb    eax,eax
  41ba67:	not    eax
  41ba69:	and    eax,0xb
  41ba6c:	ret    
  41ba6d:	nop    DWORD PTR [rax]
  41ba70:	ret    
  41ba71:	mov    eax,0xa
  41ba76:	ret    
  41ba77:	nop    WORD PTR [rax+rax*1+0x0]

000000000041ba80 <flatcc_verify_union_string@@Base>:
  41ba80:	endbr64 
  41ba84:	mov    ecx,DWORD PTR [rdi+0x14]
  41ba87:	mov    edx,DWORD PTR [rdi+0x18]
  41ba8a:	mov    eax,0x11
  41ba8f:	add    edx,ecx
  41ba91:	cmp    ecx,edx
  41ba93:	jae    41bad8 <flatcc_verify_union_string@@Base+0x58>
  41ba95:	mov    r9d,DWORD PTR [rdi+0x8]
  41ba99:	mov    esi,edx
  41ba9b:	lea    r8,[rsi+0x4]
  41ba9f:	mov    rcx,r9
  41baa2:	cmp    r8,r9
  41baa5:	ja     41bad8 <flatcc_verify_union_string@@Base+0x58>
  41baa7:	mov    r9d,edx
  41baaa:	and    r9d,0x3
  41baae:	jne    41bad8 <flatcc_verify_union_string@@Base+0x58>
  41bab0:	mov    rdi,QWORD PTR [rdi]
  41bab3:	sub    ecx,0x4
  41bab6:	mov    esi,DWORD PTR [rdi+rsi*1]
  41bab9:	sub    ecx,edx
  41babb:	lea    edx,[rsi+0x1]
  41babe:	mov    eax,0x8
  41bac3:	cmp    ecx,edx
  41bac5:	jb     41bad8 <flatcc_verify_union_string@@Base+0x58>
  41bac7:	add    r8,rdi
  41baca:	cmp    BYTE PTR [r8+rsi*1],0x0
  41bacf:	mov    eax,0x7
  41bad4:	cmove  eax,r9d
  41bad8:	ret    
  41bad9:	nop    DWORD PTR [rax+0x0]

000000000041bae0 <flatcc_verify_buffer_header@@Base>:
  41bae0:	endbr64 
  41bae4:	push   rbx
  41bae5:	sub    rsp,0x10
  41bae9:	mov    rax,QWORD PTR fs:0x28
  41baf2:	mov    QWORD PTR [rsp+0x8],rax
  41baf7:	xor    eax,eax
  41baf9:	mov    eax,0x5
  41bafe:	test   dil,0x3
  41bb02:	jne    41bb4a <flatcc_verify_buffer_header@@Base+0x6a>
  41bb04:	mov    rcx,rdx
  41bb07:	mov    edx,0xfffffff7
  41bb0c:	mov    eax,0x6
  41bb11:	cmp    rsi,rdx
  41bb14:	ja     41bb4a <flatcc_verify_buffer_header@@Base+0x6a>
  41bb16:	mov    eax,0x1
  41bb1b:	cmp    rsi,0x7
  41bb1f:	jbe    41bb4a <flatcc_verify_buffer_header@@Base+0x6a>
  41bb21:	test   rcx,rcx
  41bb24:	je     41bb48 <flatcc_verify_buffer_header@@Base+0x68>
  41bb26:	mov    rbx,rdi
  41bb29:	mov    edx,0x4
  41bb2e:	lea    rdi,[rsp+0x4]
  41bb33:	mov    rsi,rcx
  41bb36:	call   406170 <strncpy@plt>
  41bb3b:	mov    eax,DWORD PTR [rsp+0x4]
  41bb3f:	cmp    DWORD PTR [rbx+0x4],eax
  41bb42:	je     41bb48 <flatcc_verify_buffer_header@@Base+0x68>
  41bb44:	test   eax,eax
  41bb46:	jne    41bb60 <flatcc_verify_buffer_header@@Base+0x80>
  41bb48:	xor    eax,eax
  41bb4a:	mov    rcx,QWORD PTR [rsp+0x8]
  41bb4f:	xor    rcx,QWORD PTR fs:0x28
  41bb58:	jne    41bb67 <flatcc_verify_buffer_header@@Base+0x87>
  41bb5a:	add    rsp,0x10
  41bb5e:	pop    rbx
  41bb5f:	ret    
  41bb60:	mov    eax,0x2
  41bb65:	jmp    41bb4a <flatcc_verify_buffer_header@@Base+0x6a>
  41bb67:	call   4061a0 <__stack_chk_fail@plt>
  41bb6c:	nop    DWORD PTR [rax+0x0]

000000000041bb70 <flatcc_verify_typed_buffer_header@@Base>:
  41bb70:	endbr64 
  41bb74:	mov    eax,0x5
  41bb79:	test   dil,0x3
  41bb7d:	jne    41bba9 <flatcc_verify_typed_buffer_header@@Base+0x39>
  41bb7f:	mov    ecx,0xfffffff7
  41bb84:	mov    eax,0x6
  41bb89:	cmp    rsi,rcx
  41bb8c:	ja     41bba9 <flatcc_verify_typed_buffer_header@@Base+0x39>
  41bb8e:	mov    eax,0x1
  41bb93:	cmp    rsi,0x7
  41bb97:	jbe    41bba9 <flatcc_verify_typed_buffer_header@@Base+0x39>
  41bb99:	xor    eax,eax
  41bb9b:	test   edx,edx
  41bb9d:	je     41bba9 <flatcc_verify_typed_buffer_header@@Base+0x39>
  41bb9f:	xor    eax,eax
  41bba1:	cmp    edx,DWORD PTR [rdi+0x4]
  41bba4:	setne  al
  41bba7:	add    eax,eax
  41bba9:	ret    
  41bbaa:	nop    WORD PTR [rax+rax*1+0x0]

000000000041bbb0 <flatcc_verify_struct_as_root@@Base>:
  41bbb0:	endbr64 
  41bbb4:	push   r14
  41bbb6:	mov    r14,rdx
  41bbb9:	push   r13
  41bbbb:	mov    r13d,r8d
  41bbbe:	push   r12
  41bbc0:	mov    r12,rdi
  41bbc3:	push   rbp
  41bbc4:	mov    rbp,rsi
  41bbc7:	push   rbx
  41bbc8:	mov    rbx,rcx
  41bbcb:	call   41bae0 <flatcc_verify_buffer_header@@Base>
  41bbd0:	test   eax,eax
  41bbd2:	jne    41bc20 <flatcc_verify_struct_as_root@@Base+0x70>
  41bbd4:	mov    edx,DWORD PTR [r12]
  41bbd8:	test   edx,edx
  41bbda:	je     41bc08 <flatcc_verify_struct_as_root@@Base+0x58>
  41bbdc:	cmp    edx,ebp
  41bbde:	ja     41bc08 <flatcc_verify_struct_as_root@@Base+0x58>
  41bbe0:	add    ebx,edx
  41bbe2:	jb     41bc47 <flatcc_verify_struct_as_root@@Base+0x97>
  41bbe4:	cmp    ebp,ebx
  41bbe6:	jb     41bc40 <flatcc_verify_struct_as_root@@Base+0x90>
  41bbe8:	movzx  r13d,r13w
  41bbec:	dec    r13d
  41bbef:	test   r13d,edx
  41bbf2:	mov    edx,0xb
  41bbf7:	cmovne eax,edx
  41bbfa:	pop    rbx
  41bbfb:	pop    rbp
  41bbfc:	pop    r12
  41bbfe:	pop    r13
  41bc00:	pop    r14
  41bc02:	ret    
  41bc03:	nop    DWORD PTR [rax+rax*1+0x0]
  41bc08:	pop    rbx
  41bc09:	pop    rbp
  41bc0a:	pop    r12
  41bc0c:	pop    r13
  41bc0e:	mov    eax,0x12
  41bc13:	pop    r14
  41bc15:	ret    
  41bc16:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41bc20:	pop    rbx
  41bc21:	mov    rsi,rbp
  41bc24:	pop    rbp
  41bc25:	mov    rdi,r12
  41bc28:	pop    r12
  41bc2a:	pop    r13
  41bc2c:	mov    rdx,r14
  41bc2f:	pop    r14
  41bc31:	jmp    41bae0 <flatcc_verify_buffer_header@@Base>
  41bc36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41bc40:	mov    eax,0x9
  41bc45:	jmp    41bbfa <flatcc_verify_struct_as_root@@Base+0x4a>
  41bc47:	mov    eax,0xa
  41bc4c:	jmp    41bbfa <flatcc_verify_struct_as_root@@Base+0x4a>
  41bc4e:	xchg   ax,ax

000000000041bc50 <flatcc_verify_struct_as_typed_root@@Base>:
  41bc50:	endbr64 
  41bc54:	push   r14
  41bc56:	mov    r14d,edx
  41bc59:	push   r13
  41bc5b:	mov    r13d,r8d
  41bc5e:	push   r12
  41bc60:	mov    r12,rdi
  41bc63:	push   rbp
  41bc64:	mov    rbp,rsi
  41bc67:	push   rbx
  41bc68:	mov    rbx,rcx
  41bc6b:	call   41bb70 <flatcc_verify_typed_buffer_header@@Base>
  41bc70:	test   eax,eax
  41bc72:	jne    41bcc0 <flatcc_verify_struct_as_typed_root@@Base+0x70>
  41bc74:	mov    edx,DWORD PTR [r12]
  41bc78:	test   edx,edx
  41bc7a:	je     41bca8 <flatcc_verify_struct_as_typed_root@@Base+0x58>
  41bc7c:	cmp    edx,ebp
  41bc7e:	ja     41bca8 <flatcc_verify_struct_as_typed_root@@Base+0x58>
  41bc80:	add    ebx,edx
  41bc82:	jb     41bce7 <flatcc_verify_struct_as_typed_root@@Base+0x97>
  41bc84:	cmp    ebp,ebx
  41bc86:	jb     41bce0 <flatcc_verify_struct_as_typed_root@@Base+0x90>
  41bc88:	movzx  r13d,r13w
  41bc8c:	dec    r13d
  41bc8f:	test   r13d,edx
  41bc92:	mov    edx,0xb
  41bc97:	cmovne eax,edx
  41bc9a:	pop    rbx
  41bc9b:	pop    rbp
  41bc9c:	pop    r12
  41bc9e:	pop    r13
  41bca0:	pop    r14
  41bca2:	ret    
  41bca3:	nop    DWORD PTR [rax+rax*1+0x0]
  41bca8:	pop    rbx
  41bca9:	pop    rbp
  41bcaa:	pop    r12
  41bcac:	pop    r13
  41bcae:	mov    eax,0x12
  41bcb3:	pop    r14
  41bcb5:	ret    
  41bcb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41bcc0:	pop    rbx
  41bcc1:	mov    rsi,rbp
  41bcc4:	pop    rbp
  41bcc5:	mov    rdi,r12
  41bcc8:	pop    r12
  41bcca:	pop    r13
  41bccc:	mov    edx,r14d
  41bccf:	pop    r14
  41bcd1:	jmp    41bb70 <flatcc_verify_typed_buffer_header@@Base>
  41bcd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41bce0:	mov    eax,0x9
  41bce5:	jmp    41bc9a <flatcc_verify_struct_as_typed_root@@Base+0x4a>
  41bce7:	mov    eax,0xa
  41bcec:	jmp    41bc9a <flatcc_verify_struct_as_typed_root@@Base+0x4a>
  41bcee:	xchg   ax,ax

000000000041bcf0 <flatcc_verify_table_as_root@@Base>:
  41bcf0:	endbr64 
  41bcf4:	push   r14
  41bcf6:	mov    r14,rcx
  41bcf9:	push   r13
  41bcfb:	mov    r13,rsi
  41bcfe:	push   r12
  41bd00:	mov    r12,rdx
  41bd03:	push   rbp
  41bd04:	mov    ebp,esi
  41bd06:	mov    rsi,rbp
  41bd09:	push   rbx
  41bd0a:	mov    rbx,rdi
  41bd0d:	sub    rsp,0x30
  41bd11:	mov    rax,QWORD PTR fs:0x28
  41bd1a:	mov    QWORD PTR [rsp+0x28],rax
  41bd1f:	xor    eax,eax
  41bd21:	call   41bae0 <flatcc_verify_buffer_header@@Base>
  41bd26:	test   eax,eax
  41bd28:	jne    41be10 <flatcc_verify_table_as_root@@Base+0x120>
  41bd2e:	mov    edx,DWORD PTR [rbx]
  41bd30:	mov    DWORD PTR [rsp+0xc],0x63
  41bd38:	mov    eax,0xf
  41bd3d:	test   edx,edx
  41bd3f:	jne    41bd68 <flatcc_verify_table_as_root@@Base+0x78>
  41bd41:	mov    rcx,QWORD PTR [rsp+0x28]
  41bd46:	xor    rcx,QWORD PTR fs:0x28
  41bd4f:	jne    41be32 <flatcc_verify_table_as_root@@Base+0x142>
  41bd55:	add    rsp,0x30
  41bd59:	pop    rbx
  41bd5a:	pop    rbp
  41bd5b:	pop    r12
  41bd5d:	pop    r13
  41bd5f:	pop    r14
  41bd61:	ret    
  41bd62:	nop    WORD PTR [rax+rax*1+0x0]
  41bd68:	mov    ecx,edx
  41bd6a:	lea    rsi,[rcx+0x4]
  41bd6e:	cmp    rbp,rsi
  41bd71:	jb     41bd41 <flatcc_verify_table_as_root@@Base+0x51>
  41bd73:	test   dl,0x3
  41bd76:	jne    41bd41 <flatcc_verify_table_as_root@@Base+0x51>
  41bd78:	mov    eax,edx
  41bd7a:	sub    eax,DWORD PTR [rbx+rcx*1]
  41bd7d:	mov    DWORD PTR [rsp+0x18],edx
  41bd81:	mov    ecx,eax
  41bd83:	js     41be28 <flatcc_verify_table_as_root@@Base+0x138>
  41bd89:	mov    edi,eax
  41bd8b:	mov    eax,0x1d
  41bd90:	test   cl,0x1
  41bd93:	jne    41bd41 <flatcc_verify_table_as_root@@Base+0x51>
  41bd95:	lea    rsi,[rdi+0x2]
  41bd99:	mov    eax,0x1b
  41bd9e:	cmp    rbp,rsi
  41bda1:	jb     41bd41 <flatcc_verify_table_as_root@@Base+0x51>
  41bda3:	lea    r8,[rbx+rdi*1]
  41bda7:	movzx  eax,WORD PTR [r8]
  41bdab:	add    ecx,eax
  41bdad:	mov    esi,eax
  41bdaf:	mov    WORD PTR [rsp+0x1e],ax
  41bdb4:	mov    eax,0x1e
  41bdb9:	cmp    r13d,ecx
  41bdbc:	jb     41bd41 <flatcc_verify_table_as_root@@Base+0x51>
  41bdbe:	test   sil,0x1
  41bdc2:	jne    41bd41 <flatcc_verify_table_as_root@@Base+0x51>
  41bdc8:	mov    eax,0x1c
  41bdcd:	cmp    si,0x3
  41bdd1:	jbe    41bd41 <flatcc_verify_table_as_root@@Base+0x51>
  41bdd7:	movzx  eax,WORD PTR [rbx+rdi*1+0x2]
  41bddc:	mov    ecx,r13d
  41bddf:	sub    ecx,edx
  41bde1:	movzx  edx,ax
  41bde4:	mov    WORD PTR [rsp+0x1c],ax
  41bde9:	mov    eax,0x14
  41bdee:	cmp    ecx,edx
  41bdf0:	jb     41bd41 <flatcc_verify_table_as_root@@Base+0x51>
  41bdf6:	mov    rdi,rsp
  41bdf9:	mov    QWORD PTR [rsp+0x10],r8
  41bdfe:	mov    QWORD PTR [rsp],rbx
  41be02:	mov    DWORD PTR [rsp+0x8],r13d
  41be07:	call   r14
  41be0a:	jmp    41bd41 <flatcc_verify_table_as_root@@Base+0x51>
  41be0f:	nop
  41be10:	mov    rdx,r12
  41be13:	mov    rsi,rbp
  41be16:	mov    rdi,rbx
  41be19:	call   41bae0 <flatcc_verify_buffer_header@@Base>
  41be1e:	jmp    41bd41 <flatcc_verify_table_as_root@@Base+0x51>
  41be23:	nop    DWORD PTR [rax+rax*1+0x0]
  41be28:	mov    eax,0x1d
  41be2d:	jmp    41bd41 <flatcc_verify_table_as_root@@Base+0x51>
  41be32:	call   4061a0 <__stack_chk_fail@plt>
  41be37:	nop    WORD PTR [rax+rax*1+0x0]

000000000041be40 <flatcc_verify_table_as_typed_root@@Base>:
  41be40:	endbr64 
  41be44:	push   r14
  41be46:	mov    r14,rcx
  41be49:	push   r13
  41be4b:	mov    r13,rsi
  41be4e:	push   r12
  41be50:	mov    r12d,edx
  41be53:	push   rbp
  41be54:	mov    ebp,esi
  41be56:	mov    rsi,rbp
  41be59:	push   rbx
  41be5a:	mov    rbx,rdi
  41be5d:	sub    rsp,0x30
  41be61:	mov    rax,QWORD PTR fs:0x28
  41be6a:	mov    QWORD PTR [rsp+0x28],rax
  41be6f:	xor    eax,eax
  41be71:	call   41bb70 <flatcc_verify_typed_buffer_header@@Base>
  41be76:	test   eax,eax
  41be78:	jne    41bf60 <flatcc_verify_table_as_typed_root@@Base+0x120>
  41be7e:	mov    edx,DWORD PTR [rbx]
  41be80:	mov    DWORD PTR [rsp+0xc],0x63
  41be88:	mov    eax,0xf
  41be8d:	test   edx,edx
  41be8f:	jne    41beb8 <flatcc_verify_table_as_typed_root@@Base+0x78>
  41be91:	mov    rcx,QWORD PTR [rsp+0x28]
  41be96:	xor    rcx,QWORD PTR fs:0x28
  41be9f:	jne    41bf82 <flatcc_verify_table_as_typed_root@@Base+0x142>
  41bea5:	add    rsp,0x30
  41bea9:	pop    rbx
  41beaa:	pop    rbp
  41beab:	pop    r12
  41bead:	pop    r13
  41beaf:	pop    r14
  41beb1:	ret    
  41beb2:	nop    WORD PTR [rax+rax*1+0x0]
  41beb8:	mov    ecx,edx
  41beba:	lea    rsi,[rcx+0x4]
  41bebe:	cmp    rbp,rsi
  41bec1:	jb     41be91 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41bec3:	test   dl,0x3
  41bec6:	jne    41be91 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41bec8:	mov    eax,edx
  41beca:	sub    eax,DWORD PTR [rbx+rcx*1]
  41becd:	mov    DWORD PTR [rsp+0x18],edx
  41bed1:	mov    ecx,eax
  41bed3:	js     41bf78 <flatcc_verify_table_as_typed_root@@Base+0x138>
  41bed9:	mov    edi,eax
  41bedb:	mov    eax,0x1d
  41bee0:	test   cl,0x1
  41bee3:	jne    41be91 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41bee5:	lea    rsi,[rdi+0x2]
  41bee9:	mov    eax,0x1b
  41beee:	cmp    rbp,rsi
  41bef1:	jb     41be91 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41bef3:	lea    r8,[rbx+rdi*1]
  41bef7:	movzx  eax,WORD PTR [r8]
  41befb:	add    ecx,eax
  41befd:	mov    esi,eax
  41beff:	mov    WORD PTR [rsp+0x1e],ax
  41bf04:	mov    eax,0x1e
  41bf09:	cmp    r13d,ecx
  41bf0c:	jb     41be91 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41bf0e:	test   sil,0x1
  41bf12:	jne    41be91 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41bf18:	mov    eax,0x1c
  41bf1d:	cmp    si,0x3
  41bf21:	jbe    41be91 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41bf27:	movzx  eax,WORD PTR [rbx+rdi*1+0x2]
  41bf2c:	mov    ecx,r13d
  41bf2f:	sub    ecx,edx
  41bf31:	movzx  edx,ax
  41bf34:	mov    WORD PTR [rsp+0x1c],ax
  41bf39:	mov    eax,0x14
  41bf3e:	cmp    ecx,edx
  41bf40:	jb     41be91 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41bf46:	mov    rdi,rsp
  41bf49:	mov    QWORD PTR [rsp+0x10],r8
  41bf4e:	mov    QWORD PTR [rsp],rbx
  41bf52:	mov    DWORD PTR [rsp+0x8],r13d
  41bf57:	call   r14
  41bf5a:	jmp    41be91 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41bf5f:	nop
  41bf60:	mov    edx,r12d
  41bf63:	mov    rsi,rbp
  41bf66:	mov    rdi,rbx
  41bf69:	call   41bb70 <flatcc_verify_typed_buffer_header@@Base>
  41bf6e:	jmp    41be91 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41bf73:	nop    DWORD PTR [rax+rax*1+0x0]
  41bf78:	mov    eax,0x1d
  41bf7d:	jmp    41be91 <flatcc_verify_table_as_typed_root@@Base+0x51>
  41bf82:	call   4061a0 <__stack_chk_fail@plt>
  41bf87:	nop    WORD PTR [rax+rax*1+0x0]

000000000041bf90 <flatcc_verify_struct_as_nested_root@@Base>:
  41bf90:	endbr64 
  41bf94:	push   r15
  41bf96:	push   r14
  41bf98:	mov    r14,r8
  41bf9b:	mov    r8d,0x1
  41bfa1:	push   r13
  41bfa3:	mov    r13d,r9d
  41bfa6:	push   r12
  41bfa8:	mov    r12d,edx
  41bfab:	push   rbp
  41bfac:	mov    rbp,rdi
  41bfaf:	push   rbx
  41bfb0:	mov    ebx,esi
  41bfb2:	movzx  esi,si
  41bfb5:	sub    rsp,0x18
  41bfb9:	mov    QWORD PTR [rsp+0x8],rcx
  41bfbe:	movzx  ecx,r9w
  41bfc2:	mov    r9d,0xffffffff
  41bfc8:	mov    r15,rcx
  41bfcb:	call   41b1a0 <flatcc_verify_vector_field@@Base>
  41bfd0:	test   eax,eax
  41bfd2:	jne    41c040 <flatcc_verify_struct_as_nested_root@@Base+0xb0>
  41bfd4:	lea    ebx,[rbx+rbx*1+0x4]
  41bfd8:	cmp    bx,WORD PTR [rbp+0x1e]
  41bfdc:	jae    41c028 <flatcc_verify_struct_as_nested_root@@Base+0x98>
  41bfde:	mov    rax,QWORD PTR [rbp+0x10]
  41bfe2:	movzx  ebx,bx
  41bfe5:	movzx  eax,WORD PTR [rax+rbx*1]
  41bfe9:	test   ax,ax
  41bfec:	je     41c028 <flatcc_verify_struct_as_nested_root@@Base+0x98>
  41bfee:	mov    edi,DWORD PTR [rbp+0x18]
  41bff1:	add    rdi,rax
  41bff4:	add    rdi,QWORD PTR [rbp+0x0]
  41bff8:	je     41c028 <flatcc_verify_struct_as_nested_root@@Base+0x98>
  41bffa:	mov    eax,DWORD PTR [rdi]
  41bffc:	mov    rdx,QWORD PTR [rsp+0x8]
  41c001:	add    rdi,rax
  41c004:	mov    esi,DWORD PTR [rdi]
  41c006:	add    rsp,0x18
  41c00a:	pop    rbx
  41c00b:	pop    rbp
  41c00c:	pop    r12
  41c00e:	movzx  r8d,r13w
  41c012:	pop    r13
  41c014:	mov    rcx,r14
  41c017:	pop    r14
  41c019:	add    rdi,0x4
  41c01d:	pop    r15
  41c01f:	jmp    41bbb0 <flatcc_verify_struct_as_root@@Base>
  41c024:	nop    DWORD PTR [rax+0x0]
  41c028:	add    rsp,0x18
  41c02c:	pop    rbx
  41c02d:	pop    rbp
  41c02e:	pop    r12
  41c030:	pop    r13
  41c032:	pop    r14
  41c034:	xor    eax,eax
  41c036:	pop    r15
  41c038:	ret    
  41c039:	nop    DWORD PTR [rax+0x0]
  41c040:	add    rsp,0x18
  41c044:	movzx  esi,bx
  41c047:	pop    rbx
  41c048:	mov    rdi,rbp
  41c04b:	pop    rbp
  41c04c:	mov    edx,r12d
  41c04f:	pop    r12
  41c051:	pop    r13
  41c053:	pop    r14
  41c055:	movzx  ecx,r15w
  41c059:	mov    r9d,0xffffffff
  41c05f:	mov    r8d,0x1
  41c065:	pop    r15
  41c067:	jmp    41b1a0 <flatcc_verify_vector_field@@Base>
  41c06c:	nop    DWORD PTR [rax+0x0]

000000000041c070 <flatcc_verify_table_as_nested_root@@Base>:
  41c070:	endbr64 
  41c074:	push   r15
  41c076:	push   r14
  41c078:	mov    r14d,edx
  41c07b:	push   r13
  41c07d:	mov    r13,rdi
  41c080:	push   r12
  41c082:	mov    r12,r9
  41c085:	mov    r9d,0xffffffff
  41c08b:	push   rbp
  41c08c:	mov    rbp,rcx
  41c08f:	movzx  ecx,r8w
  41c093:	push   rbx
  41c094:	mov    r8d,0x1
  41c09a:	mov    ebx,esi
  41c09c:	sub    rsp,0x48
  41c0a0:	movzx  esi,si
  41c0a3:	mov    rax,QWORD PTR fs:0x28
  41c0ac:	mov    QWORD PTR [rsp+0x38],rax
  41c0b1:	xor    eax,eax
  41c0b3:	mov    r15,rcx
  41c0b6:	call   41b1a0 <flatcc_verify_vector_field@@Base>
  41c0bb:	test   eax,eax
  41c0bd:	jne    41c210 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
  41c0c3:	lea    ebx,[rbx+rbx*1+0x4]
  41c0c7:	cmp    bx,WORD PTR [r13+0x1e]
  41c0cc:	jae    41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c0d2:	mov    rdx,QWORD PTR [r13+0x10]
  41c0d6:	movzx  ebx,bx
  41c0d9:	movzx  ecx,WORD PTR [rdx+rbx*1]
  41c0dd:	test   cx,cx
  41c0e0:	je     41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c0e6:	mov    edx,DWORD PTR [r13+0x18]
  41c0ea:	add    rdx,rcx
  41c0ed:	add    rdx,QWORD PTR [r13+0x0]
  41c0f1:	je     41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c0f7:	mov    ebx,DWORD PTR [rdx]
  41c0f9:	add    rbx,rdx
  41c0fc:	mov    r15d,DWORD PTR [rbx]
  41c0ff:	lea    r14,[rbx+0x4]
  41c103:	mov    rdx,rbp
  41c106:	mov    rsi,r15
  41c109:	mov    rdi,r14
  41c10c:	mov    DWORD PTR [rsp+0xc],r15d
  41c111:	call   41bae0 <flatcc_verify_buffer_header@@Base>
  41c116:	test   eax,eax
  41c118:	jne    41c230 <flatcc_verify_table_as_nested_root@@Base+0x1c0>
  41c11e:	mov    edx,DWORD PTR [r13+0xc]
  41c122:	mov    esi,DWORD PTR [rbx+0x4]
  41c125:	dec    edx
  41c127:	mov    DWORD PTR [rsp+0x1c],edx
  41c12b:	mov    eax,0x3
  41c130:	je     41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c136:	mov    eax,0xf
  41c13b:	test   esi,esi
  41c13d:	je     41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c143:	mov    edx,esi
  41c145:	lea    rdi,[rdx+0x4]
  41c149:	cmp    r15,rdi
  41c14c:	jb     41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c152:	test   sil,0x3
  41c156:	jne    41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c15c:	mov    DWORD PTR [rsp+0x28],esi
  41c160:	mov    edi,esi
  41c162:	sub    edi,DWORD PTR [rbx+rdx*1+0x4]
  41c166:	js     41c240 <flatcc_verify_table_as_nested_root@@Base+0x1d0>
  41c16c:	mov    edx,edi
  41c16e:	mov    eax,0x1d
  41c173:	test   dil,0x1
  41c177:	jne    41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c179:	lea    r9,[rdx+0x2]
  41c17d:	mov    eax,0x1b
  41c182:	cmp    r15,r9
  41c185:	jb     41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c187:	add    rdx,r14
  41c18a:	movzx  eax,WORD PTR [rdx]
  41c18d:	mov    ecx,DWORD PTR [rsp+0xc]
  41c191:	add    edi,eax
  41c193:	mov    r8d,eax
  41c196:	mov    WORD PTR [rsp+0x2e],ax
  41c19b:	mov    eax,0x1e
  41c1a0:	cmp    ecx,edi
  41c1a2:	jb     41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c1a4:	test   r8b,0x1
  41c1a8:	jne    41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c1aa:	mov    eax,0x1c
  41c1af:	cmp    r8w,0x3
  41c1b4:	jbe    41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c1b6:	movzx  eax,WORD PTR [rbx+r9*1+0x4]
  41c1bc:	mov    edi,ecx
  41c1be:	sub    edi,esi
  41c1c0:	movzx  esi,ax
  41c1c3:	mov    WORD PTR [rsp+0x2c],ax
  41c1c8:	mov    eax,0x14
  41c1cd:	cmp    edi,esi
  41c1cf:	jb     41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c1d1:	lea    rdi,[rsp+0x10]
  41c1d6:	mov    QWORD PTR [rsp+0x20],rdx
  41c1db:	mov    QWORD PTR [rsp+0x10],r14
  41c1e0:	mov    DWORD PTR [rsp+0x18],ecx
  41c1e4:	call   r12
  41c1e7:	nop    WORD PTR [rax+rax*1+0x0]
  41c1f0:	mov    rdi,QWORD PTR [rsp+0x38]
  41c1f5:	xor    rdi,QWORD PTR fs:0x28
  41c1fe:	jne    41c247 <flatcc_verify_table_as_nested_root@@Base+0x1d7>
  41c200:	add    rsp,0x48
  41c204:	pop    rbx
  41c205:	pop    rbp
  41c206:	pop    r12
  41c208:	pop    r13
  41c20a:	pop    r14
  41c20c:	pop    r15
  41c20e:	ret    
  41c20f:	nop
  41c210:	mov    r9d,0xffffffff
  41c216:	mov    r8d,0x1
  41c21c:	movzx  ecx,r15w
  41c220:	mov    edx,r14d
  41c223:	movzx  esi,bx
  41c226:	mov    rdi,r13
  41c229:	call   41b1a0 <flatcc_verify_vector_field@@Base>
  41c22e:	jmp    41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c230:	mov    rdx,rbp
  41c233:	mov    rsi,r15
  41c236:	mov    rdi,r14
  41c239:	call   41bae0 <flatcc_verify_buffer_header@@Base>
  41c23e:	jmp    41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c240:	mov    eax,0x1d
  41c245:	jmp    41c1f0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  41c247:	call   4061a0 <__stack_chk_fail@plt>
  41c24c:	nop    DWORD PTR [rax+0x0]

000000000041c250 <flatcc_verify_union_field@@Base>:
  41c250:	endbr64 
  41c254:	push   r12
  41c256:	lea    esi,[rsi+rsi*1+0x2]
  41c25a:	push   rbp
  41c25b:	push   rbx
  41c25c:	sub    rsp,0x30
  41c260:	movzx  r8d,WORD PTR [rdi+0x1e]
  41c265:	mov    rax,QWORD PTR fs:0x28
  41c26e:	mov    QWORD PTR [rsp+0x28],rax
  41c273:	xor    eax,eax
  41c275:	cmp    si,r8w
  41c279:	jae    41c350 <flatcc_verify_union_field@@Base+0x100>
  41c27f:	mov    r11,QWORD PTR [rdi+0x10]
  41c283:	movzx  eax,si
  41c286:	movzx  eax,WORD PTR [r11+rax*1]
  41c28b:	mov    r10,rax
  41c28e:	test   eax,eax
  41c290:	je     41c350 <flatcc_verify_union_field@@Base+0x100>
  41c296:	movzx  ebx,WORD PTR [rdi+0x1c]
  41c29a:	lea    r9d,[rax+0x1]
  41c29e:	mov    eax,0xd
  41c2a3:	cmp    r9d,ebx
  41c2a6:	ja     41c330 <flatcc_verify_union_field@@Base+0xe0>
  41c2ac:	mov    r9d,DWORD PTR [rdi+0x18]
  41c2b0:	mov    rbp,QWORD PTR [rdi]
  41c2b3:	add    r10,r9
  41c2b6:	add    r10,rbp
  41c2b9:	add    esi,0x2
  41c2bc:	mov    r12,r9
  41c2bf:	movzx  r9d,BYTE PTR [r10]
  41c2c3:	cmp    r8w,si
  41c2c7:	jbe    41c390 <flatcc_verify_union_field@@Base+0x140>
  41c2cd:	movzx  esi,si
  41c2d0:	movzx  esi,WORD PTR [r11+rsi*1]
  41c2d5:	test   r9b,r9b
  41c2d8:	je     41c380 <flatcc_verify_union_field@@Base+0x130>
  41c2de:	test   esi,esi
  41c2e0:	je     41c395 <flatcc_verify_union_field@@Base+0x145>
  41c2e6:	lea    edx,[rsi+0x4]
  41c2e9:	cmp    ebx,edx
  41c2eb:	jb     41c330 <flatcc_verify_union_field@@Base+0xe0>
  41c2ed:	add    r12d,esi
  41c2f0:	mov    eax,0xc
  41c2f5:	test   r12b,0x3
  41c2f9:	jne    41c330 <flatcc_verify_union_field@@Base+0xe0>
  41c2fb:	test   r12d,r12d
  41c2fe:	je     41c3a8 <flatcc_verify_union_field@@Base+0x158>
  41c304:	mov    rax,QWORD PTR [rdi+0x8]
  41c308:	mov    DWORD PTR [rsp+0x14],r12d
  41c30d:	mov    QWORD PTR [rsp+0x8],rax
  41c312:	mov    QWORD PTR [rsp],rbp
  41c316:	mov    rdi,rsp
  41c319:	mov    eax,DWORD PTR [rbp+r12*1+0x0]
  41c31e:	mov    DWORD PTR [rsp+0x18],eax
  41c322:	movzx  eax,BYTE PTR [r10]
  41c326:	mov    BYTE PTR [rsp+0x10],al
  41c32a:	call   rcx
  41c32c:	nop    DWORD PTR [rax+0x0]
  41c330:	mov    rbx,QWORD PTR [rsp+0x28]
  41c335:	xor    rbx,QWORD PTR fs:0x28
  41c33e:	jne    41c3ac <flatcc_verify_union_field@@Base+0x15c>
  41c340:	add    rsp,0x30
  41c344:	pop    rbx
  41c345:	pop    rbp
  41c346:	pop    r12
  41c348:	ret    
  41c349:	nop    DWORD PTR [rax+0x0]
  41c350:	add    esi,0x2
  41c353:	cmp    r8w,si
  41c357:	jbe    41c36c <flatcc_verify_union_field@@Base+0x11c>
  41c359:	mov    rcx,QWORD PTR [rdi+0x10]
  41c35d:	movzx  esi,si
  41c360:	cmp    WORD PTR [rcx+rsi*1],0x0
  41c365:	mov    eax,0x17
  41c36a:	jne    41c330 <flatcc_verify_union_field@@Base+0xe0>
  41c36c:	cmp    edx,0x1
  41c36f:	sbb    eax,eax
  41c371:	not    eax
  41c373:	and    eax,0x15
  41c376:	jmp    41c330 <flatcc_verify_union_field@@Base+0xe0>
  41c378:	nop    DWORD PTR [rax+rax*1+0x0]
  41c380:	cmp    esi,0x1
  41c383:	sbb    eax,eax
  41c385:	not    eax
  41c387:	and    eax,0x18
  41c38a:	jmp    41c330 <flatcc_verify_union_field@@Base+0xe0>
  41c38c:	nop    DWORD PTR [rax+0x0]
  41c390:	test   r9b,r9b
  41c393:	je     41c3a8 <flatcc_verify_union_field@@Base+0x158>
  41c395:	xor    eax,eax
  41c397:	test   edx,edx
  41c399:	setne  al
  41c39c:	shl    eax,0x2
  41c39f:	jmp    41c330 <flatcc_verify_union_field@@Base+0xe0>
  41c3a1:	nop    DWORD PTR [rax+0x0]
  41c3a8:	xor    eax,eax
  41c3aa:	jmp    41c330 <flatcc_verify_union_field@@Base+0xe0>
  41c3ac:	call   4061a0 <__stack_chk_fail@plt>
  41c3b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41c3bc:	nop    DWORD PTR [rax+0x0]

000000000041c3c0 <flatcc_verify_union_vector_field@@Base>:
  41c3c0:	endbr64 
  41c3c4:	push   r15
  41c3c6:	mov    r15d,edx
  41c3c9:	push   r14
  41c3cb:	lea    r14d,[rsi-0x1]
  41c3cf:	movzx  r14d,r14w
  41c3d3:	push   r13
  41c3d5:	mov    r13,rcx
  41c3d8:	push   r12
  41c3da:	push   rbp
  41c3db:	mov    rbp,rdi
  41c3de:	push   rbx
  41c3df:	lea    ebx,[rsi+rsi*1+0x2]
  41c3e3:	sub    rsp,0x48
  41c3e7:	mov    rax,QWORD PTR fs:0x28
  41c3f0:	mov    QWORD PTR [rsp+0x38],rax
  41c3f5:	xor    eax,eax
  41c3f7:	movzx  eax,WORD PTR [rdi+0x1e]
  41c3fb:	cmp    bx,ax
  41c3fe:	jae    41c5e0 <flatcc_verify_union_vector_field@@Base+0x220>
  41c404:	mov    rcx,QWORD PTR [rdi+0x10]
  41c408:	movzx  edx,bx
  41c40b:	cmp    WORD PTR [rcx+rdx*1],0x0
  41c410:	je     41c5e0 <flatcc_verify_union_vector_field@@Base+0x220>
  41c416:	mov    r9d,0xffffffff
  41c41c:	mov    r8d,0x1
  41c422:	mov    ecx,0x1
  41c427:	mov    edx,r15d
  41c42a:	mov    esi,r14d
  41c42d:	mov    rdi,rbp
  41c430:	call   41b1a0 <flatcc_verify_vector_field@@Base>
  41c435:	mov    r12d,eax
  41c438:	test   eax,eax
  41c43a:	jne    41c630 <flatcc_verify_union_vector_field@@Base+0x270>
  41c440:	movzx  edi,WORD PTR [rbp+0x1e]
  41c444:	cmp    bx,di
  41c447:	jae    41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c44d:	mov    rsi,QWORD PTR [rbp+0x10]
  41c451:	movzx  eax,bx
  41c454:	movzx  edx,WORD PTR [rsi+rax*1]
  41c458:	test   dx,dx
  41c45b:	je     41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c461:	mov    eax,DWORD PTR [rbp+0x18]
  41c464:	mov    r14,QWORD PTR [rbp+0x0]
  41c468:	mov    rcx,rax
  41c46b:	add    rax,rdx
  41c46e:	add    rax,r14
  41c471:	je     41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c477:	add    ebx,0x2
  41c47a:	cmp    di,bx
  41c47d:	jbe    41c610 <flatcc_verify_union_vector_field@@Base+0x250>
  41c483:	movzx  ebx,bx
  41c486:	movzx  edx,WORD PTR [rsi+rbx*1]
  41c48a:	test   edx,edx
  41c48c:	je     41c610 <flatcc_verify_union_vector_field@@Base+0x250>
  41c492:	movzx  esi,WORD PTR [rbp+0x1c]
  41c496:	lea    edi,[rdx+0x4]
  41c499:	cmp    edi,esi
  41c49b:	ja     41c660 <flatcc_verify_union_vector_field@@Base+0x2a0>
  41c4a1:	add    ecx,edx
  41c4a3:	test   cl,0x3
  41c4a6:	jne    41c670 <flatcc_verify_union_vector_field@@Base+0x2b0>
  41c4ac:	test   ecx,ecx
  41c4ae:	je     41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c4b4:	mov    edi,DWORD PTR [rbp+0xc]
  41c4b7:	mov    esi,ecx
  41c4b9:	mov    edx,DWORD PTR [r14+rsi*1]
  41c4bd:	test   edi,edi
  41c4bf:	jle    41c6b0 <flatcc_verify_union_vector_field@@Base+0x2f0>
  41c4c5:	add    edx,ecx
  41c4c7:	cmp    ecx,edx
  41c4c9:	jae    41c620 <flatcc_verify_union_vector_field@@Base+0x260>
  41c4cf:	mov    ecx,DWORD PTR [rbp+0x8]
  41c4d2:	mov    r9d,edx
  41c4d5:	lea    r8,[r9+0x4]
  41c4d9:	mov    rsi,rcx
  41c4dc:	cmp    r8,rcx
  41c4df:	ja     41c620 <flatcc_verify_union_vector_field@@Base+0x260>
  41c4e5:	test   r8b,0x3
  41c4e9:	jne    41c680 <flatcc_verify_union_vector_field@@Base+0x2c0>
  41c4ef:	mov    r10d,DWORD PTR [r14+r9*1]
  41c4f3:	lea    r15d,[rdx+0x4]
  41c4f7:	cmp    r10d,0x3fffffff
  41c4fe:	ja     41c680 <flatcc_verify_union_vector_field@@Base+0x2c0>
  41c504:	mov    r11d,ecx
  41c507:	lea    ebp,[r10*4+0x0]
  41c50f:	sub    r11d,r15d
  41c512:	cmp    r11d,ebp
  41c515:	jb     41c680 <flatcc_verify_union_vector_field@@Base+0x2c0>
  41c51b:	mov    ebx,DWORD PTR [rax]
  41c51d:	add    rax,rbx
  41c520:	cmp    DWORD PTR [rax],r10d
  41c523:	jne    41c6bb <flatcc_verify_union_vector_field@@Base+0x2fb>
  41c529:	lea    edx,[rdi-0x1]
  41c52c:	mov    QWORD PTR [rsp+0x10],r14
  41c531:	mov    DWORD PTR [rsp+0x18],ecx
  41c535:	mov    DWORD PTR [rsp+0x1c],edx
  41c539:	test   r10d,r10d
  41c53c:	je     41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c53e:	lea    rbx,[rax+0x4]
  41c542:	lea    rax,[rsp+0x10]
  41c547:	add    ebp,r15d
  41c54a:	mov    QWORD PTR [rsp+0x8],rax
  41c54f:	jmp    41c56c <flatcc_verify_union_vector_field@@Base+0x1ac>
  41c551:	nop    DWORD PTR [rax+0x0]
  41c558:	test   dl,dl
  41c55a:	jne    41c6d1 <flatcc_verify_union_vector_field@@Base+0x311>
  41c560:	add    r15d,0x4
  41c564:	inc    rbx
  41c567:	cmp    r15d,ebp
  41c56a:	je     41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c56c:	mov    eax,r15d
  41c56f:	mov    eax,DWORD PTR [r14+rax*1]
  41c573:	movzx  edx,BYTE PTR [rbx]
  41c576:	test   eax,eax
  41c578:	je     41c558 <flatcc_verify_union_vector_field@@Base+0x198>
  41c57a:	test   dl,dl
  41c57c:	je     41c6dc <flatcc_verify_union_vector_field@@Base+0x31c>
  41c582:	mov    rdi,QWORD PTR [rsp+0x8]
  41c587:	mov    BYTE PTR [rsp+0x20],dl
  41c58b:	mov    DWORD PTR [rsp+0x24],r15d
  41c590:	mov    DWORD PTR [rsp+0x28],eax
  41c594:	call   r13
  41c597:	test   eax,eax
  41c599:	je     41c560 <flatcc_verify_union_vector_field@@Base+0x1a0>
  41c59b:	mov    rdi,QWORD PTR [rsp+0x8]
  41c5a0:	call   r13
  41c5a3:	mov    r12d,eax
  41c5a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41c5b0:	mov    rdi,QWORD PTR [rsp+0x38]
  41c5b5:	xor    rdi,QWORD PTR fs:0x28
  41c5be:	mov    eax,r12d
  41c5c1:	jne    41c6e7 <flatcc_verify_union_vector_field@@Base+0x327>
  41c5c7:	add    rsp,0x48
  41c5cb:	pop    rbx
  41c5cc:	pop    rbp
  41c5cd:	pop    r12
  41c5cf:	pop    r13
  41c5d1:	pop    r14
  41c5d3:	pop    r15
  41c5d5:	ret    
  41c5d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41c5e0:	lea    edx,[rbx+0x2]
  41c5e3:	cmp    ax,dx
  41c5e6:	jbe    41c5fa <flatcc_verify_union_vector_field@@Base+0x23a>
  41c5e8:	mov    rax,QWORD PTR [rbp+0x10]
  41c5ec:	movzx  edx,dx
  41c5ef:	cmp    WORD PTR [rax+rdx*1],0x0
  41c5f4:	jne    41c416 <flatcc_verify_union_vector_field@@Base+0x56>
  41c5fa:	mov    r12d,0x16
  41c600:	test   r15d,r15d
  41c603:	je     41c416 <flatcc_verify_union_vector_field@@Base+0x56>
  41c609:	jmp    41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c60b:	nop    DWORD PTR [rax+rax*1+0x0]
  41c610:	xor    r12d,r12d
  41c613:	test   r15d,r15d
  41c616:	setne  r12b
  41c61a:	shl    r12d,0x2
  41c61e:	jmp    41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c620:	mov    r12d,0x10
  41c626:	jmp    41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c628:	nop    DWORD PTR [rax+rax*1+0x0]
  41c630:	mov    r9d,0xffffffff
  41c636:	mov    r8d,0x1
  41c63c:	mov    ecx,0x1
  41c641:	mov    edx,r15d
  41c644:	mov    esi,r14d
  41c647:	mov    rdi,rbp
  41c64a:	call   41b1a0 <flatcc_verify_vector_field@@Base>
  41c64f:	mov    r12d,eax
  41c652:	jmp    41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c657:	nop    WORD PTR [rax+rax*1+0x0]
  41c660:	mov    r12d,0xd
  41c666:	jmp    41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c66b:	nop    DWORD PTR [rax+rax*1+0x0]
  41c670:	mov    r12d,0xc
  41c676:	jmp    41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c67b:	nop    DWORD PTR [rax+rax*1+0x0]
  41c680:	and    r8d,0x3
  41c684:	jne    41c620 <flatcc_verify_union_vector_field@@Base+0x260>
  41c686:	mov    eax,DWORD PTR [r14+r9*1]
  41c68a:	sub    esi,0x4
  41c68d:	cmp    eax,0x3fffffff
  41c692:	ja     41c6c6 <flatcc_verify_union_vector_field@@Base+0x306>
  41c694:	shl    eax,0x2
  41c697:	sub    esi,edx
  41c699:	cmp    esi,eax
  41c69b:	mov    eax,0x1a
  41c6a0:	cmovb  r12d,eax
  41c6a4:	jmp    41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c6a9:	nop    DWORD PTR [rax+0x0]
  41c6b0:	mov    r12d,0x3
  41c6b6:	jmp    41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c6bb:	mov    r12d,0x22
  41c6c1:	jmp    41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c6c6:	mov    r12d,0x19
  41c6cc:	jmp    41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c6d1:	mov    r12d,0x20
  41c6d7:	jmp    41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c6dc:	mov    r12d,0x21
  41c6e2:	jmp    41c5b0 <flatcc_verify_union_vector_field@@Base+0x1f0>
  41c6e7:	call   4061a0 <__stack_chk_fail@plt>
  41c6ec:	nop    DWORD PTR [rax+0x0]
  41c6f0:	mov    r9,rdi
  41c6f3:	mov    eax,edx
  41c6f5:	shr    r9,0x20
  41c6f9:	mov    edi,edi
  41c6fb:	mov    r11,rdi
  41c6fe:	mov    r8,r9
  41c701:	imul   rdi,rax
  41c705:	imul   r8,rax
  41c709:	mov    r10,rdx
  41c70c:	shr    r10,0x20
  41c710:	imul   r11,r10
  41c714:	mov    rax,rdi
  41c717:	shr    rax,0x20
  41c71b:	mov    edi,r8d
  41c71e:	add    rax,rdi
  41c721:	mov    edi,0x80000000
  41c726:	mov    edx,r11d
  41c729:	add    rax,rdi
  41c72c:	add    rax,rdx
  41c72f:	imul   r9,r10
  41c733:	mov    rdx,r8
  41c736:	shr    rdx,0x20
  41c73a:	shr    r11,0x20
  41c73e:	add    rdx,r11
  41c741:	lea    r8,[rdx+r9*1]
  41c745:	shr    rax,0x20
  41c749:	add    rax,r8
  41c74c:	mov    QWORD PTR [rsp-0x18],rax
  41c751:	mov    QWORD PTR [rsp-0x10],0x0
  41c75a:	lea    eax,[rsi+rcx*1+0x40]
  41c75e:	vmovdqa xmm1,XMMWORD PTR [rsp-0x18]
  41c764:	vpinsrd xmm0,xmm1,eax,0x2
  41c76a:	vmovq  rax,xmm0
  41c76f:	vpextrq rdx,xmm0,0x1
  41c775:	ret    
  41c776:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41c780:	sub    rsp,0x18
  41c784:	mov    QWORD PTR [rsp+0x8],rsi
  41c789:	mov    QWORD PTR [rsp],rdi
  41c78d:	mov    ecx,DWORD PTR [rsp+0x8]
  41c791:	test   rdi,rdi
  41c794:	je     41c7f8 <flatcc_verify_union_vector_field@@Base+0x438>
  41c796:	mov    rax,rdi
  41c799:	movabs rdi,0xffc0000000000000
  41c7a3:	lea    edx,[rcx-0xa]
  41c7a6:	mov    rsi,rdi
  41c7a9:	test   rax,rdi
  41c7ac:	jne    41c7be <flatcc_verify_union_vector_field@@Base+0x3fe>
  41c7ae:	xchg   ax,ax
  41c7b0:	shl    rax,0xa
  41c7b4:	mov    ecx,edx
  41c7b6:	sub    edx,0xa
  41c7b9:	test   rax,rsi
  41c7bc:	je     41c7b0 <flatcc_verify_union_vector_field@@Base+0x3f0>
  41c7be:	test   rax,rax
  41c7c1:	js     41c7d9 <flatcc_verify_union_vector_field@@Base+0x419>
  41c7c3:	lea    edx,[rcx-0x1]
  41c7c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41c7d0:	mov    ecx,edx
  41c7d2:	dec    edx
  41c7d4:	add    rax,rax
  41c7d7:	jns    41c7d0 <flatcc_verify_union_vector_field@@Base+0x410>
  41c7d9:	mov    QWORD PTR [rsp],rax
  41c7dd:	vmovdqa xmm1,XMMWORD PTR [rsp]
  41c7e2:	add    rsp,0x18
  41c7e6:	vpinsrd xmm0,xmm1,ecx,0x2
  41c7ec:	vmovq  rax,xmm0
  41c7f1:	vpextrq rdx,xmm0,0x1
  41c7f7:	ret    
  41c7f8:	lea    rcx,[rip+0x152c1]        # 431ac0 <flatcc_builder_padding_base@@Base+0x10a0>
  41c7ff:	mov    edx,0x104
  41c804:	lea    rsi,[rip+0x14945]        # 431150 <flatcc_builder_padding_base@@Base+0x730>
  41c80b:	lea    rdi,[rip+0x14b22]        # 431334 <flatcc_builder_padding_base@@Base+0x914>
  41c812:	call   4061b0 <__assert_fail@plt>
  41c817:	nop    WORD PTR [rax+rax*1+0x0]

000000000041c820 <grisu3_diy_fp_encode_double@@Base>:
  41c820:	endbr64 
  41c824:	push   r15
  41c826:	mov    eax,0x4
  41c82b:	push   r14
  41c82d:	push   r13
  41c82f:	mov    r13d,edx
  41c832:	push   r12
  41c834:	mov    r12d,ecx
  41c837:	push   rbp
  41c838:	mov    rbp,r8
  41c83b:	push   rbx
  41c83c:	mov    ebx,esi
  41c83e:	sub    rsp,0x18
  41c842:	mov    QWORD PTR [rsp+0x8],0x0
  41c84b:	mov    QWORD PTR [rsp],rdi
  41c84f:	test   ecx,ecx
  41c851:	cmovne r12d,eax
  41c855:	vmovdqa xmm1,XMMWORD PTR [rsp]
  41c85a:	xor    eax,eax
  41c85c:	vpinsrd xmm0,xmm1,eax,0x2
  41c862:	vmovaps XMMWORD PTR [rsp],xmm0
  41c867:	mov    rsi,QWORD PTR [rsp+0x8]
  41c86c:	mov    rdi,QWORD PTR [rsp]
  41c870:	sub    ebx,edx
  41c872:	call   41c780 <flatcc_verify_union_vector_field@@Base+0x3c0>
  41c877:	mov    QWORD PTR [rsp+0x8],rdx
  41c87c:	mov    QWORD PTR [rsp],rax
  41c880:	mov    esi,DWORD PTR [rsp+0x8]
  41c884:	mov    rdi,QWORD PTR [rsp]
  41c888:	mov    ecx,esi
  41c88a:	neg    ecx
  41c88c:	shlx   r12d,r12d,ecx
  41c891:	cmp    ebx,0xfffffea4
  41c897:	jl     41cb6f <grisu3_diy_fp_encode_double@@Base+0x34f>
  41c89d:	cmp    ebx,0x15b
  41c8a3:	jg     41cb50 <grisu3_diy_fp_encode_double@@Base+0x330>
  41c8a9:	lea    eax,[rbx+0x15c]
  41c8af:	sar    eax,0x3
  41c8b2:	cdqe   
  41c8b4:	lea    rdx,[rip+0x15265]        # 431b20 <flatcc_builder_padding_base@@Base+0x1100>
  41c8bb:	shl    rax,0x4
  41c8bf:	add    rax,rdx
  41c8c2:	movsx  edx,WORD PTR [rax+0xa]
  41c8c6:	mov    r14,QWORD PTR [rax]
  41c8c9:	movsx  r15d,WORD PTR [rax+0x8]
  41c8ce:	cmp    ebx,edx
  41c8d0:	jl     41cb31 <grisu3_diy_fp_encode_double@@Base+0x311>
  41c8d6:	lea    eax,[rdx+0x7]
  41c8d9:	cmp    ebx,eax
  41c8db:	jg     41cb12 <grisu3_diy_fp_encode_double@@Base+0x2f2>
  41c8e1:	cmp    ebx,edx
  41c8e3:	je     41c934 <grisu3_diy_fp_encode_double@@Base+0x114>
  41c8e5:	sub    ebx,edx
  41c8e7:	dec    ebx
  41c8e9:	cmp    ebx,0x6
  41c8ec:	ja     41cb8e <grisu3_diy_fp_encode_double@@Base+0x36e>
  41c8f2:	movsxd rax,ebx
  41c8f5:	shl    rax,0x4
  41c8f9:	lea    rdx,[rip+0x1dee0]        # 43a7e0 <__data_start@@Base+0x720>
  41c900:	add    rax,rdx
  41c903:	mov    rdi,QWORD PTR [rsp]
  41c907:	mov    ecx,DWORD PTR [rax+0x8]
  41c90a:	mov    rdx,QWORD PTR [rax]
  41c90d:	call   41c6f0 <flatcc_verify_union_vector_field@@Base+0x330>
  41c912:	mov    QWORD PTR [rsp],rax
  41c916:	mov    QWORD PTR [rsp+0x8],rdx
  41c91b:	lea    edx,[rbx+r13*1+0x1]
  41c920:	lea    eax,[r12+0x4]
  41c925:	cmp    edx,0x13
  41c928:	mov    rdi,QWORD PTR [rsp]
  41c92c:	mov    esi,DWORD PTR [rsp+0x8]
  41c930:	cmovg  r12d,eax
  41c934:	mov    ecx,r15d
  41c937:	mov    rdx,r14
  41c93a:	call   41c6f0 <flatcc_verify_union_vector_field@@Base+0x330>
  41c93f:	mov    QWORD PTR [rsp],rax
  41c943:	mov    QWORD PTR [rsp+0x8],rdx
  41c948:	xor    eax,eax
  41c94a:	mov    rdi,QWORD PTR [rsp]
  41c94e:	test   r12d,r12d
  41c951:	mov    rsi,QWORD PTR [rsp+0x8]
  41c956:	setne  al
  41c959:	mov    ebx,DWORD PTR [rsp+0x8]
  41c95d:	lea    r12d,[r12+rax*1+0x8]
  41c962:	call   41c780 <flatcc_verify_union_vector_field@@Base+0x3c0>
  41c967:	mov    QWORD PTR [rsp+0x8],rdx
  41c96c:	mov    QWORD PTR [rsp],rax
  41c970:	mov    edx,DWORD PTR [rsp+0x8]
  41c974:	mov    rax,QWORD PTR [rsp]
  41c978:	sub    ebx,edx
  41c97a:	lea    esi,[rdx+0x40]
  41c97d:	shlx   ecx,r12d,ebx
  41c982:	cmp    esi,0xfffffc0e
  41c988:	jl     41ca78 <grisu3_diy_fp_encode_double@@Base+0x258>
  41c98e:	lea    r9d,[rcx+0x4]
  41c992:	mov    edi,0x4
  41c997:	xor    r8d,r8d
  41c99a:	xor    esi,esi
  41c99c:	cmp    esi,r9d
  41c99f:	jl     41c9b0 <grisu3_diy_fp_encode_double@@Base+0x190>
  41c9a1:	inc    rax
  41c9a4:	bt     rax,0x35
  41c9a9:	jae    41c9b0 <grisu3_diy_fp_encode_double@@Base+0x190>
  41c9ab:	shr    rax,1
  41c9ae:	inc    edx
  41c9b0:	movabs r10,0x1fffffffffffff
  41c9ba:	lea    esi,[rdx+0x1]
  41c9bd:	mov    r11,r10
  41c9c0:	cmp    rax,r10
  41c9c3:	jbe    41c9d4 <grisu3_diy_fp_encode_double@@Base+0x1b4>
  41c9c5:	nop    DWORD PTR [rax]
  41c9c8:	shr    rax,1
  41c9cb:	mov    edx,esi
  41c9cd:	inc    esi
  41c9cf:	cmp    rax,r11
  41c9d2:	ja     41c9c8 <grisu3_diy_fp_encode_double@@Base+0x1a8>
  41c9d4:	cmp    edx,0xfffffbce
  41c9da:	jl     41cac8 <grisu3_diy_fp_encode_double@@Base+0x2a8>
  41c9e0:	movabs r10,0x10000000000000
  41c9ea:	mov    rsi,rax
  41c9ed:	and    rsi,r10
  41c9f0:	cmp    edx,0xfffffbce
  41c9f6:	je     41ca2a <grisu3_diy_fp_encode_double@@Base+0x20a>
  41c9f8:	test   rsi,rsi
  41c9fb:	je     41ca14 <grisu3_diy_fp_encode_double@@Base+0x1f4>
  41c9fd:	jmp    41cb00 <grisu3_diy_fp_encode_double@@Base+0x2e0>
  41ca02:	nop    WORD PTR [rax+rax*1+0x0]
  41ca08:	test   rsi,rsi
  41ca0b:	jne    41cad8 <grisu3_diy_fp_encode_double@@Base+0x2b8>
  41ca11:	mov    edx,r11d
  41ca14:	add    rax,rax
  41ca17:	mov    rsi,rax
  41ca1a:	lea    r11d,[rdx-0x1]
  41ca1e:	and    rsi,r10
  41ca21:	cmp    r11d,0xfffffbce
  41ca28:	jne    41ca08 <grisu3_diy_fp_encode_double@@Base+0x1e8>
  41ca2a:	test   rsi,rsi
  41ca2d:	movabs rdx,0x10000000000000
  41ca37:	cmovne rsi,rdx
  41ca3b:	movabs rdx,0xfffffffffffff
  41ca45:	and    rdx,rax
  41ca48:	or     rdx,rsi
  41ca4b:	sub    edi,ecx
  41ca4d:	cmp    edi,r8d
  41ca50:	setge  al
  41ca53:	cmp    r9d,r8d
  41ca56:	mov    QWORD PTR [rbp+0x0],rdx
  41ca5a:	setle  dl
  41ca5d:	add    rsp,0x18
  41ca61:	pop    rbx
  41ca62:	pop    rbp
  41ca63:	pop    r12
  41ca65:	pop    r13
  41ca67:	or     eax,edx
  41ca69:	pop    r14
  41ca6b:	movzx  eax,al
  41ca6e:	pop    r15
  41ca70:	ret    
  41ca71:	nop    DWORD PTR [rax+0x0]
  41ca78:	cmp    esi,0xfffffbcf
  41ca7e:	jl     41caf0 <grisu3_diy_fp_encode_double@@Base+0x2d0>
  41ca80:	lea    edi,[rdx+0x472]
  41ca86:	mov    esi,0x40
  41ca8b:	sub    esi,edi
  41ca8d:	cmp    esi,0x3c
  41ca90:	jle    41cbad <grisu3_diy_fp_encode_double@@Base+0x38d>
  41ca96:	mov    esi,0x2
  41ca9b:	sub    esi,edi
  41ca9d:	sarx   ecx,ecx,esi
  41caa2:	add    ecx,0x9
  41caa5:	shrx   rax,rax,rsi
  41caaa:	lea    edx,[rdx+rsi*1+0x3e]
  41caae:	shr    rax,0x3e
  41cab2:	xor    r8d,r8d
  41cab5:	mov    r9d,ecx
  41cab8:	xor    edi,edi
  41caba:	mov    esi,0x3e
  41cabf:	jmp    41c99c <grisu3_diy_fp_encode_double@@Base+0x17c>
  41cac4:	nop    DWORD PTR [rax+0x0]
  41cac8:	mov    rdx,QWORD PTR [rip+0x155c1]        # 432090 <flatcc_builder_padding_base@@Base+0x1670>
  41cacf:	jmp    41ca4b <grisu3_diy_fp_encode_double@@Base+0x22b>
  41cad4:	nop    DWORD PTR [rax+0x0]
  41cad8:	add    edx,0x432
  41cade:	mov    rsi,rdx
  41cae1:	shl    rsi,0x34
  41cae5:	jmp    41ca3b <grisu3_diy_fp_encode_double@@Base+0x21b>
  41caea:	nop    WORD PTR [rax+rax*1+0x0]
  41caf0:	mov    esi,0x2
  41caf5:	jmp    41ca9d <grisu3_diy_fp_encode_double@@Base+0x27d>
  41caf7:	nop    WORD PTR [rax+rax*1+0x0]
  41cb00:	add    edx,0x433
  41cb06:	mov    rsi,rdx
  41cb09:	shl    rsi,0x34
  41cb0d:	jmp    41ca3b <grisu3_diy_fp_encode_double@@Base+0x21b>
  41cb12:	lea    rcx,[rip+0x14fc7]        # 431ae0 <flatcc_builder_padding_base@@Base+0x10c0>
  41cb19:	mov    edx,0x59
  41cb1e:	lea    rsi,[rip+0x1469b]        # 4311c0 <flatcc_builder_padding_base@@Base+0x7a0>
  41cb25:	lea    rdi,[rip+0x14820]        # 43134c <flatcc_builder_padding_base@@Base+0x92c>
  41cb2c:	call   4061b0 <__assert_fail@plt>
  41cb31:	lea    rcx,[rip+0x14fa8]        # 431ae0 <flatcc_builder_padding_base@@Base+0x10c0>
  41cb38:	mov    edx,0x58
  41cb3d:	lea    rsi,[rip+0x1467c]        # 4311c0 <flatcc_builder_padding_base@@Base+0x7a0>
  41cb44:	lea    rdi,[rip+0x147f2]        # 43133d <flatcc_builder_padding_base@@Base+0x91d>
  41cb4b:	call   4061b0 <__assert_fail@plt>
  41cb50:	lea    rcx,[rip+0x14f89]        # 431ae0 <flatcc_builder_padding_base@@Base+0x10c0>
  41cb57:	mov    edx,0x51
  41cb5c:	lea    rsi,[rip+0x1465d]        # 4311c0 <flatcc_builder_padding_base@@Base+0x7a0>
  41cb63:	lea    rdi,[rip+0x146ee]        # 431258 <flatcc_builder_padding_base@@Base+0x838>
  41cb6a:	call   4061b0 <__assert_fail@plt>
  41cb6f:	lea    rcx,[rip+0x14f6a]        # 431ae0 <flatcc_builder_padding_base@@Base+0x10c0>
  41cb76:	mov    edx,0x50
  41cb7b:	lea    rsi,[rip+0x1463e]        # 4311c0 <flatcc_builder_padding_base@@Base+0x7a0>
  41cb82:	lea    rdi,[rip+0x146af]        # 431238 <flatcc_builder_padding_base@@Base+0x818>
  41cb89:	call   4061b0 <__assert_fail@plt>
  41cb8e:	lea    rcx,[rip+0x14f6b]        # 431b00 <flatcc_builder_padding_base@@Base+0x10e0>
  41cb95:	mov    edx,0xb9
  41cb9a:	lea    rsi,[rip+0x1461f]        # 4311c0 <flatcc_builder_padding_base@@Base+0x7a0>
  41cba1:	lea    rdi,[rip+0x147bf]        # 431367 <flatcc_builder_padding_base@@Base+0x947>
  41cba8:	call   4061b0 <__assert_fail@plt>
  41cbad:	mov    r8d,0x3f
  41cbb3:	sub    r8d,edi
  41cbb6:	mov    r10d,r8d
  41cbb9:	mov    r8d,0x1
  41cbbf:	mov    r9d,0x8
  41cbc5:	shlx   r8,r8,r10
  41cbca:	and    r8,rax
  41cbcd:	shlx   r9,r9,r10
  41cbd2:	add    edx,esi
  41cbd4:	mov    edi,r9d
  41cbd7:	shl    r8d,0x3
  41cbdb:	add    r9d,ecx
  41cbde:	shrx   rax,rax,rsi
  41cbe3:	jmp    41c99c <grisu3_diy_fp_encode_double@@Base+0x17c>
  41cbe8:	nop    DWORD PTR [rax+rax*1+0x0]
  41cbf0:	push   r14
  41cbf2:	lea    r8,[rdi+0x3e9]
  41cbf9:	push   r13
  41cbfb:	push   r12
  41cbfd:	mov    r12,rdx
  41cc00:	push   rbp
  41cc01:	mov    rbp,rdi
  41cc04:	push   rbx
  41cc05:	sub    rsp,0x10
  41cc09:	mov    rax,QWORD PTR fs:0x28
  41cc12:	mov    QWORD PTR [rsp+0x8],rax
  41cc17:	xor    eax,eax
  41cc19:	mov    QWORD PTR [rdx],0x0
  41cc20:	cmp    esi,0x3e8
  41cc26:	jg     41cc30 <grisu3_diy_fp_encode_double@@Base+0x410>
  41cc28:	movsxd rsi,esi
  41cc2b:	lea    r8,[rdi+rsi*1+0x1]
  41cc30:	cmp    r8,rbp
  41cc33:	je     41cf20 <grisu3_diy_fp_encode_double@@Base+0x700>
  41cc39:	movsx  edi,BYTE PTR [rbp+0x0]
  41cc3d:	cmp    dil,0x2d
  41cc41:	je     41ce58 <grisu3_diy_fp_encode_double@@Base+0x638>
  41cc47:	cmp    dil,0x30
  41cc4b:	je     41cd88 <grisu3_diy_fp_encode_double@@Base+0x568>
  41cc51:	lea    eax,[rdi-0x31]
  41cc54:	mov    rbx,rbp
  41cc57:	cmp    al,0x8
  41cc59:	ja     41cd60 <grisu3_diy_fp_encode_double@@Base+0x540>
  41cc5f:	mov    rax,rbp
  41cc62:	xor    r13d,r13d
  41cc65:	sub    edi,0x30
  41cc68:	lea    rbx,[rax+0x1]
  41cc6c:	movsxd rdi,edi
  41cc6f:	cmp    r8,rbx
  41cc72:	je     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41cc78:	movsx  rax,BYTE PTR [rax+0x1]
  41cc7d:	lea    edx,[rax-0x30]
  41cc80:	mov    rcx,rbx
  41cc83:	movabs rsi,0x1999999999999998
  41cc8d:	cmp    dl,0x9
  41cc90:	jbe    41cca9 <grisu3_diy_fp_encode_double@@Base+0x489>
  41cc92:	jmp    41d361 <grisu3_diy_fp_encode_double@@Base+0xb41>
  41cc97:	nop    WORD PTR [rax+rax*1+0x0]
  41cca0:	cmp    rdi,rsi
  41cca3:	ja     41cdd8 <grisu3_diy_fp_encode_double@@Base+0x5b8>
  41cca9:	lea    rdx,[rdi+rdi*4]
  41ccad:	inc    rcx
  41ccb0:	lea    rdi,[rax+rdx*2-0x30]
  41ccb5:	cmp    r8,rcx
  41ccb8:	je     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41ccbe:	movsx  rax,BYTE PTR [rcx]
  41ccc2:	lea    edx,[rax-0x30]
  41ccc5:	cmp    dl,0x9
  41ccc8:	jbe    41cca0 <grisu3_diy_fp_encode_double@@Base+0x480>
  41ccca:	mov    edx,ecx
  41cccc:	sub    edx,ebx
  41ccce:	xor    esi,esi
  41ccd0:	mov    rbx,rcx
  41ccd3:	xor    ecx,ecx
  41ccd5:	lea    r9d,[rax-0x31]
  41ccd9:	cmp    r9b,0x8
  41ccdd:	jbe    41cea3 <grisu3_diy_fp_encode_double@@Base+0x683>
  41cce3:	cmp    al,0x2e
  41cce5:	je     41cf30 <grisu3_diy_fp_encode_double@@Base+0x710>
  41cceb:	or     eax,0x20
  41ccee:	add    esi,edx
  41ccf0:	cmp    al,0x65
  41ccf2:	je     41cfe0 <grisu3_diy_fp_encode_double@@Base+0x7c0>
  41ccf8:	test   rdi,rdi
  41ccfb:	je     41ce30 <grisu3_diy_fp_encode_double@@Base+0x610>
  41cd01:	cmp    esi,0xfffffebc
  41cd07:	jl     41ce30 <grisu3_diy_fp_encode_double@@Base+0x610>
  41cd0d:	cmp    esi,0x136
  41cd13:	jg     41cef8 <grisu3_diy_fp_encode_double@@Base+0x6d8>
  41cd19:	movabs rax,0x1fffffffffffff
  41cd23:	cmp    rdi,rax
  41cd26:	ja     41cd31 <grisu3_diy_fp_encode_double@@Base+0x511>
  41cd28:	cmp    esi,0x16
  41cd2b:	jbe    41d0e6 <grisu3_diy_fp_encode_double@@Base+0x8c6>
  41cd31:	mov    r8,r12
  41cd34:	call   41c820 <grisu3_diy_fp_encode_double@@Base>
  41cd39:	test   eax,eax
  41cd3b:	jne    41ce30 <grisu3_diy_fp_encode_double@@Base+0x610>
  41cd41:	mov    rsi,rsp
  41cd44:	mov    rdi,rbp
  41cd47:	call   406180 <strtod@plt>
  41cd4c:	mov    rax,QWORD PTR [rsp]
  41cd50:	vmovsd QWORD PTR [r12],xmm0
  41cd56:	cmp    rbx,rax
  41cd59:	cmova  rbx,rax
  41cd5d:	nop    DWORD PTR [rax]
  41cd60:	mov    rsi,QWORD PTR [rsp+0x8]
  41cd65:	xor    rsi,QWORD PTR fs:0x28
  41cd6e:	mov    rax,rbx
  41cd71:	jne    41d3cd <grisu3_diy_fp_encode_double@@Base+0xbad>
  41cd77:	add    rsp,0x10
  41cd7b:	pop    rbx
  41cd7c:	pop    rbp
  41cd7d:	pop    r12
  41cd7f:	pop    r13
  41cd81:	pop    r14
  41cd83:	ret    
  41cd84:	nop    DWORD PTR [rax+0x0]
  41cd88:	mov    rax,rbp
  41cd8b:	xor    r13d,r13d
  41cd8e:	lea    rbx,[rax+0x1]
  41cd92:	cmp    r8,rbx
  41cd95:	je     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41cd97:	movsx  rax,BYTE PTR [rax+0x1]
  41cd9c:	mov    edx,eax
  41cd9e:	or     edx,0x20
  41cda1:	cmp    dl,0x78
  41cda4:	je     41d340 <grisu3_diy_fp_encode_double@@Base+0xb20>
  41cdaa:	cmp    al,0x30
  41cdac:	je     41cdc4 <grisu3_diy_fp_encode_double@@Base+0x5a4>
  41cdae:	jmp    41d080 <grisu3_diy_fp_encode_double@@Base+0x860>
  41cdb3:	nop    DWORD PTR [rax+rax*1+0x0]
  41cdb8:	movsx  rax,BYTE PTR [rbx]
  41cdbc:	cmp    al,0x30
  41cdbe:	jne    41d080 <grisu3_diy_fp_encode_double@@Base+0x860>
  41cdc4:	inc    rbx
  41cdc7:	cmp    r8,rbx
  41cdca:	jne    41cdb8 <grisu3_diy_fp_encode_double@@Base+0x598>
  41cdcc:	nop    DWORD PTR [rax+0x0]
  41cdd0:	xor    ebx,ebx
  41cdd2:	jmp    41cd60 <grisu3_diy_fp_encode_double@@Base+0x540>
  41cdd4:	nop    DWORD PTR [rax+0x0]
  41cdd8:	xor    edx,edx
  41cdda:	cmp    al,0x34
  41cddc:	setg   dl
  41cddf:	add    rdi,rdx
  41cde2:	mov    edx,ecx
  41cde4:	sub    edx,ebx
  41cde6:	mov    rbx,rcx
  41cde9:	mov    ecx,0x1
  41cdee:	cmp    al,0x30
  41cdf0:	jne    41d365 <grisu3_diy_fp_encode_double@@Base+0xb45>
  41cdf6:	sub    ecx,ebx
  41cdf8:	jmp    41ce0b <grisu3_diy_fp_encode_double@@Base+0x5eb>
  41cdfa:	nop    WORD PTR [rax+rax*1+0x0]
  41ce00:	movzx  eax,BYTE PTR [rbx]
  41ce03:	cmp    al,0x30
  41ce05:	jne    41ce90 <grisu3_diy_fp_encode_double@@Base+0x670>
  41ce0b:	lea    esi,[rcx+rbx*1]
  41ce0e:	inc    rbx
  41ce11:	cmp    r8,rbx
  41ce14:	jne    41ce00 <grisu3_diy_fp_encode_double@@Base+0x5e0>
  41ce16:	jmp    41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41ce18:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x15288]        # 4320a8 <flatcc_builder_padding_base@@Base+0x1688>
  41ce20:	vmovsd QWORD PTR [r12],xmm0
  41ce26:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41ce30:	test   r13d,r13d
  41ce33:	je     41cd60 <grisu3_diy_fp_encode_double@@Base+0x540>
  41ce39:	vmovsd xmm0,QWORD PTR [r12]
  41ce3f:	vxorpd xmm0,xmm0,XMMWORD PTR [rip+0x130d9]        # 42ff20 <_IO_stdin_used@@Base+0x3f20>
  41ce47:	vmovsd QWORD PTR [r12],xmm0
  41ce4d:	jmp    41cd60 <grisu3_diy_fp_encode_double@@Base+0x540>
  41ce52:	nop    WORD PTR [rax+rax*1+0x0]
  41ce58:	lea    rax,[rbp+0x1]
  41ce5c:	cmp    r8,rax
  41ce5f:	je     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41ce65:	movsx  edi,BYTE PTR [rbp+0x1]
  41ce69:	cmp    dil,0x30
  41ce6d:	je     41cf10 <grisu3_diy_fp_encode_double@@Base+0x6f0>
  41ce73:	lea    edx,[rdi-0x31]
  41ce76:	xor    ebx,ebx
  41ce78:	mov    r13d,0x1
  41ce7e:	cmp    dl,0x8
  41ce81:	jbe    41cc65 <grisu3_diy_fp_encode_double@@Base+0x445>
  41ce87:	jmp    41cd60 <grisu3_diy_fp_encode_double@@Base+0x540>
  41ce8c:	nop    DWORD PTR [rax+0x0]
  41ce90:	lea    r9d,[rax-0x31]
  41ce94:	mov    ecx,0x1
  41ce99:	cmp    r9b,0x8
  41ce9d:	ja     41cce3 <grisu3_diy_fp_encode_double@@Base+0x4c3>
  41cea3:	lea    rcx,[rbx+0x1]
  41cea7:	lea    r10d,[rsi+0x1]
  41ceab:	cmp    r8,rcx
  41ceae:	je     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41ceb4:	movzx  eax,BYTE PTR [rbx+0x1]
  41ceb8:	lea    r9d,[rax-0x30]
  41cebc:	cmp    r9b,0x9
  41cec0:	ja     41d3ba <grisu3_diy_fp_encode_double@@Base+0xb9a>
  41cec6:	lea    r9d,[rsi+0x2]
  41ceca:	mov    rbx,rcx
  41cecd:	sub    r9d,ecx
  41ced0:	lea    esi,[r9+rbx*1]
  41ced4:	inc    rbx
  41ced7:	cmp    r8,rbx
  41ceda:	je     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41cee0:	movzx  eax,BYTE PTR [rbx]
  41cee3:	lea    ecx,[rax-0x30]
  41cee6:	cmp    cl,0x9
  41cee9:	jbe    41ced0 <grisu3_diy_fp_encode_double@@Base+0x6b0>
  41ceeb:	mov    ecx,0x1
  41cef0:	jmp    41cce3 <grisu3_diy_fp_encode_double@@Base+0x4c3>
  41cef5:	nop    DWORD PTR [rax]
  41cef8:	mov    rax,QWORD PTR [rip+0x15199]        # 432098 <flatcc_builder_padding_base@@Base+0x1678>
  41ceff:	mov    QWORD PTR [r12],rax
  41cf03:	jmp    41ce30 <grisu3_diy_fp_encode_double@@Base+0x610>
  41cf08:	nop    DWORD PTR [rax+rax*1+0x0]
  41cf10:	mov    r13d,0x1
  41cf16:	jmp    41cd8e <grisu3_diy_fp_encode_double@@Base+0x56e>
  41cf1b:	nop    DWORD PTR [rax+rax*1+0x0]
  41cf20:	mov    rbx,r8
  41cf23:	jmp    41cd60 <grisu3_diy_fp_encode_double@@Base+0x540>
  41cf28:	nop    DWORD PTR [rax+rax*1+0x0]
  41cf30:	movsx  rax,BYTE PTR [rbx+0x1]
  41cf35:	lea    r10,[rbx+0x1]
  41cf39:	lea    r9d,[rax-0x30]
  41cf3d:	cmp    r9b,0x9
  41cf41:	ja     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41cf47:	cmp    r8,r10
  41cf4a:	je     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41cf50:	movabs r11,0x1999999999999998
  41cf5a:	cmp    rdi,r11
  41cf5d:	ja     41d3c5 <grisu3_diy_fp_encode_double@@Base+0xba5>
  41cf63:	mov    rbx,r10
  41cf66:	jmp    41cf79 <grisu3_diy_fp_encode_double@@Base+0x759>
  41cf68:	nop    DWORD PTR [rax+rax*1+0x0]
  41cf70:	cmp    rdi,r11
  41cf73:	ja     41d38c <grisu3_diy_fp_encode_double@@Base+0xb6c>
  41cf79:	lea    rdi,[rdi+rdi*4]
  41cf7d:	inc    rbx
  41cf80:	lea    rdi,[rax+rdi*2-0x30]
  41cf85:	mov    eax,esi
  41cf87:	sub    eax,ebx
  41cf89:	lea    r9d,[rax+r10*1]
  41cf8d:	cmp    r8,rbx
  41cf90:	je     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41cf96:	movsx  rax,BYTE PTR [rbx]
  41cf9a:	lea    r14d,[rax-0x30]
  41cf9e:	cmp    r14b,0x9
  41cfa2:	jbe    41cf70 <grisu3_diy_fp_encode_double@@Base+0x750>
  41cfa4:	mov    rax,rbx
  41cfa7:	sub    rax,r10
  41cfaa:	add    edx,eax
  41cfac:	movzx  eax,BYTE PTR [rbx]
  41cfaf:	cmp    al,0x30
  41cfb1:	jne    41d087 <grisu3_diy_fp_encode_double@@Base+0x867>
  41cfb7:	inc    r9d
  41cfba:	sub    r9d,ebx
  41cfbd:	jmp    41cfcb <grisu3_diy_fp_encode_double@@Base+0x7ab>
  41cfbf:	nop
  41cfc0:	movzx  eax,BYTE PTR [rbx]
  41cfc3:	cmp    al,0x30
  41cfc5:	jne    41d090 <grisu3_diy_fp_encode_double@@Base+0x870>
  41cfcb:	lea    esi,[r9+rbx*1]
  41cfcf:	inc    rbx
  41cfd2:	cmp    r8,rbx
  41cfd5:	jne    41cfc0 <grisu3_diy_fp_encode_double@@Base+0x7a0>
  41cfd7:	xor    ebx,ebx
  41cfd9:	jmp    41cd60 <grisu3_diy_fp_encode_double@@Base+0x540>
  41cfde:	xchg   ax,ax
  41cfe0:	mov    rax,r8
  41cfe3:	sub    rax,rbx
  41cfe6:	cmp    rax,0x1
  41cfea:	jle    41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41cff0:	movsx  eax,BYTE PTR [rbx+0x1]
  41cff4:	cmp    al,0x2b
  41cff6:	je     41d348 <grisu3_diy_fp_encode_double@@Base+0xb28>
  41cffc:	cmp    al,0x2d
  41cffe:	je     41d370 <grisu3_diy_fp_encode_double@@Base+0xb50>
  41d004:	lea    r9,[rbx+0x1]
  41d008:	xor    r11d,r11d
  41d00b:	lea    r10d,[rax-0x30]
  41d00f:	cmp    r10b,0x9
  41d013:	ja     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41d019:	lea    rbx,[r9+0x1]
  41d01d:	sub    eax,0x30
  41d020:	cmp    r8,rbx
  41d023:	je     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41d029:	movsx  r9d,BYTE PTR [r9+0x1]
  41d02e:	lea    r10d,[r9-0x30]
  41d032:	cmp    r10b,0x9
  41d036:	ja     41d069 <grisu3_diy_fp_encode_double@@Base+0x849>
  41d038:	nop    DWORD PTR [rax+rax*1+0x0]
  41d040:	cmp    eax,0x7fff
  41d045:	jg     41d04f <grisu3_diy_fp_encode_double@@Base+0x82f>
  41d047:	lea    eax,[rax+rax*4]
  41d04a:	lea    eax,[r9+rax*2-0x30]
  41d04f:	inc    rbx
  41d052:	cmp    r8,rbx
  41d055:	je     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41d05b:	movsx  r9d,BYTE PTR [rbx]
  41d05f:	lea    r10d,[r9-0x30]
  41d063:	cmp    r10b,0x9
  41d067:	jbe    41d040 <grisu3_diy_fp_encode_double@@Base+0x820>
  41d069:	lea    r8d,[rsi+rax*1]
  41d06d:	sub    esi,eax
  41d06f:	test   r11d,r11d
  41d072:	cmove  esi,r8d
  41d076:	jmp    41ccf8 <grisu3_diy_fp_encode_double@@Base+0x4d8>
  41d07b:	nop    DWORD PTR [rax+rax*1+0x0]
  41d080:	xor    edi,edi
  41d082:	jmp    41cc7d <grisu3_diy_fp_encode_double@@Base+0x45d>
  41d087:	mov    esi,r9d
  41d08a:	nop    WORD PTR [rax+rax*1+0x0]
  41d090:	lea    r9d,[rax-0x31]
  41d094:	cmp    r9b,0x8
  41d098:	ja     41cceb <grisu3_diy_fp_encode_double@@Base+0x4cb>
  41d09e:	lea    rcx,[rbx+0x1]
  41d0a2:	cmp    r8,rcx
  41d0a5:	je     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41d0ab:	movzx  eax,BYTE PTR [rbx+0x1]
  41d0af:	lea    r9d,[rax-0x30]
  41d0b3:	cmp    r9b,0x9
  41d0b7:	ja     41d0d9 <grisu3_diy_fp_encode_double@@Base+0x8b9>
  41d0b9:	nop    DWORD PTR [rax+0x0]
  41d0c0:	inc    rcx
  41d0c3:	cmp    r8,rcx
  41d0c6:	je     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41d0cc:	movzx  eax,BYTE PTR [rcx]
  41d0cf:	lea    r9d,[rax-0x30]
  41d0d3:	cmp    r9b,0x9
  41d0d7:	jbe    41d0c0 <grisu3_diy_fp_encode_double@@Base+0x8a0>
  41d0d9:	mov    rbx,rcx
  41d0dc:	mov    ecx,0x1
  41d0e1:	jmp    41cceb <grisu3_diy_fp_encode_double@@Base+0x4cb>
  41d0e6:	sub    esi,edx
  41d0e8:	vxorpd xmm0,xmm0,xmm0
  41d0ec:	lea    eax,[rsi+0x16]
  41d0ef:	vcvtsi2sd xmm0,xmm0,rdi
  41d0f4:	cmp    eax,0x2c
  41d0f7:	ja     41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d0fd:	lea    rdx,[rip+0x144bc]        # 4315c0 <flatcc_builder_padding_base@@Base+0xba0>
  41d104:	movsxd rax,DWORD PTR [rdx+rax*4]
  41d108:	add    rax,rdx
  41d10b:	notrack jmp rax
  41d10e:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f9a]        # 4320b0 <flatcc_builder_padding_base@@Base+0x1690>
  41d116:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d11b:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f95]        # 4320b8 <flatcc_builder_padding_base@@Base+0x1698>
  41d123:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d128:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f90]        # 4320c0 <flatcc_builder_padding_base@@Base+0x16a0>
  41d130:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d135:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f8b]        # 4320c8 <flatcc_builder_padding_base@@Base+0x16a8>
  41d13d:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d142:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f86]        # 4320d0 <flatcc_builder_padding_base@@Base+0x16b0>
  41d14a:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d14f:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f81]        # 4320d8 <flatcc_builder_padding_base@@Base+0x16b8>
  41d157:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d15c:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f7c]        # 4320e0 <flatcc_builder_padding_base@@Base+0x16c0>
  41d164:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d169:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f77]        # 4320e8 <flatcc_builder_padding_base@@Base+0x16c8>
  41d171:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d176:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f72]        # 4320f0 <flatcc_builder_padding_base@@Base+0x16d0>
  41d17e:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d183:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f6d]        # 4320f8 <flatcc_builder_padding_base@@Base+0x16d8>
  41d18b:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d190:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f68]        # 432100 <flatcc_builder_padding_base@@Base+0x16e0>
  41d198:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d19d:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f63]        # 432108 <flatcc_builder_padding_base@@Base+0x16e8>
  41d1a5:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d1aa:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f5e]        # 432110 <flatcc_builder_padding_base@@Base+0x16f0>
  41d1b2:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d1b7:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f59]        # 432118 <flatcc_builder_padding_base@@Base+0x16f8>
  41d1bf:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d1c4:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f54]        # 432120 <flatcc_builder_padding_base@@Base+0x1700>
  41d1cc:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d1d1:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f4f]        # 432128 <flatcc_builder_padding_base@@Base+0x1708>
  41d1d9:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d1de:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f4a]        # 432130 <flatcc_builder_padding_base@@Base+0x1710>
  41d1e6:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d1eb:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f45]        # 432138 <flatcc_builder_padding_base@@Base+0x1718>
  41d1f3:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d1f8:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f40]        # 432140 <flatcc_builder_padding_base@@Base+0x1720>
  41d200:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d205:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14f3b]        # 432148 <flatcc_builder_padding_base@@Base+0x1728>
  41d20d:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d212:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x14e86]        # 4320a0 <flatcc_builder_padding_base@@Base+0x1680>
  41d21a:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d21f:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14f21]        # 432148 <flatcc_builder_padding_base@@Base+0x1728>
  41d227:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d22c:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14f0c]        # 432140 <flatcc_builder_padding_base@@Base+0x1720>
  41d234:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d239:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14ef7]        # 432138 <flatcc_builder_padding_base@@Base+0x1718>
  41d241:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d246:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14ee2]        # 432130 <flatcc_builder_padding_base@@Base+0x1710>
  41d24e:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d253:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14ecd]        # 432128 <flatcc_builder_padding_base@@Base+0x1708>
  41d25b:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d260:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14eb8]        # 432120 <flatcc_builder_padding_base@@Base+0x1700>
  41d268:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d26d:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14ea3]        # 432118 <flatcc_builder_padding_base@@Base+0x16f8>
  41d275:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d27a:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14e8e]        # 432110 <flatcc_builder_padding_base@@Base+0x16f0>
  41d282:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d287:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14e79]        # 432108 <flatcc_builder_padding_base@@Base+0x16e8>
  41d28f:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d294:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14e64]        # 432100 <flatcc_builder_padding_base@@Base+0x16e0>
  41d29c:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d2a1:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14e4f]        # 4320f8 <flatcc_builder_padding_base@@Base+0x16d8>
  41d2a9:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d2ae:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14e3a]        # 4320f0 <flatcc_builder_padding_base@@Base+0x16d0>
  41d2b6:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d2bb:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14e25]        # 4320e8 <flatcc_builder_padding_base@@Base+0x16c8>
  41d2c3:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d2c8:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14e10]        # 4320e0 <flatcc_builder_padding_base@@Base+0x16c0>
  41d2d0:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d2d5:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14dfb]        # 4320d8 <flatcc_builder_padding_base@@Base+0x16b8>
  41d2dd:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d2e2:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14de6]        # 4320d0 <flatcc_builder_padding_base@@Base+0x16b0>
  41d2ea:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d2ef:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14dd1]        # 4320c8 <flatcc_builder_padding_base@@Base+0x16a8>
  41d2f7:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d2fc:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14dbc]        # 4320c0 <flatcc_builder_padding_base@@Base+0x16a0>
  41d304:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d309:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14da7]        # 4320b8 <flatcc_builder_padding_base@@Base+0x1698>
  41d311:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d316:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14d82]        # 4320a0 <flatcc_builder_padding_base@@Base+0x1680>
  41d31e:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d323:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14d85]        # 4320b0 <flatcc_builder_padding_base@@Base+0x1690>
  41d32b:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d330:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x14d70]        # 4320a8 <flatcc_builder_padding_base@@Base+0x1688>
  41d338:	jmp    41ce20 <grisu3_diy_fp_encode_double@@Base+0x600>
  41d33d:	nop    DWORD PTR [rax]
  41d340:	mov    rbx,rbp
  41d343:	jmp    41cd60 <grisu3_diy_fp_encode_double@@Base+0x540>
  41d348:	lea    r9,[rbx+0x2]
  41d34c:	cmp    r8,r9
  41d34f:	je     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41d355:	movsx  eax,BYTE PTR [rbx+0x2]
  41d359:	xor    r11d,r11d
  41d35c:	jmp    41d00b <grisu3_diy_fp_encode_double@@Base+0x7eb>
  41d361:	xor    edx,edx
  41d363:	xor    ecx,ecx
  41d365:	xor    esi,esi
  41d367:	jmp    41ccd5 <grisu3_diy_fp_encode_double@@Base+0x4b5>
  41d36c:	nop    DWORD PTR [rax+0x0]
  41d370:	lea    r9,[rbx+0x2]
  41d374:	cmp    r8,r9
  41d377:	je     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41d37d:	movsx  eax,BYTE PTR [rbx+0x2]
  41d381:	mov    r11d,0x1
  41d387:	jmp    41d00b <grisu3_diy_fp_encode_double@@Base+0x7eb>
  41d38c:	mov    rsi,rbx
  41d38f:	sub    rsi,r10
  41d392:	add    edx,esi
  41d394:	test   ecx,ecx
  41d396:	jne    41cfac <grisu3_diy_fp_encode_double@@Base+0x78c>
  41d39c:	cmp    al,0x34
  41d39e:	setg   al
  41d3a1:	movzx  eax,al
  41d3a4:	add    rdi,rax
  41d3a7:	cmp    r8,rbx
  41d3aa:	je     41cdd0 <grisu3_diy_fp_encode_double@@Base+0x5b0>
  41d3b0:	mov    ecx,0x1
  41d3b5:	jmp    41cfac <grisu3_diy_fp_encode_double@@Base+0x78c>
  41d3ba:	mov    esi,r10d
  41d3bd:	mov    rbx,rcx
  41d3c0:	jmp    41ceeb <grisu3_diy_fp_encode_double@@Base+0x6cb>
  41d3c5:	mov    r9d,esi
  41d3c8:	mov    rbx,r10
  41d3cb:	jmp    41d394 <grisu3_diy_fp_encode_double@@Base+0xb74>
  41d3cd:	call   4061a0 <__stack_chk_fail@plt>
  41d3d2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41d3dd:	nop    DWORD PTR [rax]

000000000041d3e0 <flatcc_json_parser_error_string@@Base>:
  41d3e0:	endbr64 
  41d3e4:	cmp    edi,0x22
  41d3e7:	ja     41d630 <flatcc_json_parser_error_string@@Base+0x250>
  41d3ed:	lea    rdx,[rip+0x14280]        # 431674 <flatcc_builder_padding_base@@Base+0xc54>
  41d3f4:	mov    edi,edi
  41d3f6:	movsxd rax,DWORD PTR [rdx+rdi*4]
  41d3fa:	add    rax,rdx
  41d3fd:	notrack jmp rax
  41d400:	lea    rax,[rip+0x13821]        # 430c28 <flatcc_builder_padding_base@@Base+0x208>
  41d407:	ret    
  41d408:	nop    DWORD PTR [rax+rax*1+0x0]
  41d410:	lea    rax,[rip+0x13995]        # 430dac <flatcc_builder_padding_base@@Base+0x38c>
  41d417:	ret    
  41d418:	nop    DWORD PTR [rax+rax*1+0x0]
  41d420:	lea    rax,[rip+0x14159]        # 431580 <flatcc_builder_padding_base@@Base+0xb60>
  41d427:	ret    
  41d428:	nop    DWORD PTR [rax+rax*1+0x0]
  41d430:	lea    rax,[rip+0x1412f]        # 431566 <flatcc_builder_padding_base@@Base+0xb46>
  41d437:	ret    
  41d438:	nop    DWORD PTR [rax+rax*1+0x0]
  41d440:	lea    rax,[rip+0x14108]        # 43154f <flatcc_builder_padding_base@@Base+0xb2f>
  41d447:	ret    
  41d448:	nop    DWORD PTR [rax+rax*1+0x0]
  41d450:	lea    rax,[rip+0x140db]        # 431532 <flatcc_builder_padding_base@@Base+0xb12>
  41d457:	ret    
  41d458:	nop    DWORD PTR [rax+rax*1+0x0]
  41d460:	lea    rax,[rip+0x137f2]        # 430c59 <flatcc_builder_padding_base@@Base+0x239>
  41d467:	ret    
  41d468:	nop    DWORD PTR [rax+rax*1+0x0]
  41d470:	lea    rax,[rip+0x140a1]        # 431518 <flatcc_builder_padding_base@@Base+0xaf8>
  41d477:	ret    
  41d478:	nop    DWORD PTR [rax+rax*1+0x0]
  41d480:	lea    rax,[rip+0x14076]        # 4314fd <flatcc_builder_padding_base@@Base+0xadd>
  41d487:	ret    
  41d488:	nop    DWORD PTR [rax+rax*1+0x0]
  41d490:	lea    rax,[rip+0x13e19]        # 4312b0 <flatcc_builder_padding_base@@Base+0x890>
  41d497:	ret    
  41d498:	nop    DWORD PTR [rax+rax*1+0x0]
  41d4a0:	lea    rax,[rip+0x14039]        # 4314e0 <flatcc_builder_padding_base@@Base+0xac0>
  41d4a7:	ret    
  41d4a8:	nop    DWORD PTR [rax+rax*1+0x0]
  41d4b0:	lea    rax,[rip+0x14015]        # 4314cc <flatcc_builder_padding_base@@Base+0xaac>
  41d4b7:	ret    
  41d4b8:	nop    DWORD PTR [rax+rax*1+0x0]
  41d4c0:	lea    rax,[rip+0x13dc1]        # 431288 <flatcc_builder_padding_base@@Base+0x868>
  41d4c7:	ret    
  41d4c8:	nop    DWORD PTR [rax+rax*1+0x0]
  41d4d0:	lea    rax,[rip+0x13fe6]        # 4314bd <flatcc_builder_padding_base@@Base+0xa9d>
  41d4d7:	ret    
  41d4d8:	nop    DWORD PTR [rax+rax*1+0x0]
  41d4e0:	lea    rax,[rip+0x13fc6]        # 4314ad <flatcc_builder_padding_base@@Base+0xa8d>
  41d4e7:	ret    
  41d4e8:	nop    DWORD PTR [rax+rax*1+0x0]
  41d4f0:	lea    rax,[rip+0x13fa2]        # 431499 <flatcc_builder_padding_base@@Base+0xa79>
  41d4f7:	ret    
  41d4f8:	nop    DWORD PTR [rax+rax*1+0x0]
  41d500:	lea    rax,[rip+0x13f85]        # 43148c <flatcc_builder_padding_base@@Base+0xa6c>
  41d507:	ret    
  41d508:	nop    DWORD PTR [rax+rax*1+0x0]
  41d510:	lea    rax,[rip+0x13f66]        # 43147d <flatcc_builder_padding_base@@Base+0xa5d>
  41d517:	ret    
  41d518:	nop    DWORD PTR [rax+rax*1+0x0]
  41d520:	lea    rax,[rip+0x13f44]        # 43146b <flatcc_builder_padding_base@@Base+0xa4b>
  41d527:	ret    
  41d528:	nop    DWORD PTR [rax+rax*1+0x0]
  41d530:	lea    rax,[rip+0x13f24]        # 43145b <flatcc_builder_padding_base@@Base+0xa3b>
  41d537:	ret    
  41d538:	nop    DWORD PTR [rax+rax*1+0x0]
  41d540:	lea    rax,[rip+0x13f01]        # 431448 <flatcc_builder_padding_base@@Base+0xa28>
  41d547:	ret    
  41d548:	nop    DWORD PTR [rax+rax*1+0x0]
  41d550:	lea    rax,[rip+0x13ed8]        # 43142f <flatcc_builder_padding_base@@Base+0xa0f>
  41d557:	ret    
  41d558:	nop    DWORD PTR [rax+rax*1+0x0]
  41d560:	lea    rax,[rip+0x13eb9]        # 431420 <flatcc_builder_padding_base@@Base+0xa00>
  41d567:	ret    
  41d568:	nop    DWORD PTR [rax+rax*1+0x0]
  41d570:	lea    rax,[rip+0x13e98]        # 43140f <flatcc_builder_padding_base@@Base+0x9ef>
  41d577:	ret    
  41d578:	nop    DWORD PTR [rax+rax*1+0x0]
  41d580:	lea    rax,[rip+0x13e79]        # 431400 <flatcc_builder_padding_base@@Base+0x9e0>
  41d587:	ret    
  41d588:	nop    DWORD PTR [rax+rax*1+0x0]
  41d590:	lea    rax,[rip+0x13e57]        # 4313ee <flatcc_builder_padding_base@@Base+0x9ce>
  41d597:	ret    
  41d598:	nop    DWORD PTR [rax+rax*1+0x0]
  41d5a0:	lea    rax,[rip+0x13e36]        # 4313dd <flatcc_builder_padding_base@@Base+0x9bd>
  41d5a7:	ret    
  41d5a8:	nop    DWORD PTR [rax+rax*1+0x0]
  41d5b0:	lea    rax,[rip+0x13e1c]        # 4313d3 <flatcc_builder_padding_base@@Base+0x9b3>
  41d5b7:	ret    
  41d5b8:	nop    DWORD PTR [rax+rax*1+0x0]
  41d5c0:	lea    rax,[rip+0x13754]        # 430d1b <flatcc_builder_padding_base@@Base+0x2fb>
  41d5c7:	ret    
  41d5c8:	nop    DWORD PTR [rax+rax*1+0x0]
  41d5d0:	lea    rax,[rip+0x13dec]        # 4313c3 <flatcc_builder_padding_base@@Base+0x9a3>
  41d5d7:	ret    
  41d5d8:	nop    DWORD PTR [rax+rax*1+0x0]
  41d5e0:	lea    rax,[rip+0x13dc7]        # 4313ae <flatcc_builder_padding_base@@Base+0x98e>
  41d5e7:	ret    
  41d5e8:	nop    DWORD PTR [rax+rax*1+0x0]
  41d5f0:	lea    rax,[rip+0x13da8]        # 43139f <flatcc_builder_padding_base@@Base+0x97f>
  41d5f7:	ret    
  41d5f8:	nop    DWORD PTR [rax+rax*1+0x0]
  41d600:	lea    rax,[rip+0x13d89]        # 431390 <flatcc_builder_padding_base@@Base+0x970>
  41d607:	ret    
  41d608:	nop    DWORD PTR [rax+rax*1+0x0]
  41d610:	lea    rax,[rip+0x13d6c]        # 431383 <flatcc_builder_padding_base@@Base+0x963>
  41d617:	ret    
  41d618:	nop    DWORD PTR [rax+rax*1+0x0]
  41d620:	lea    rax,[rip+0x13f67]        # 43158e <flatcc_builder_padding_base@@Base+0xb6e>
  41d627:	ret    
  41d628:	nop    DWORD PTR [rax+rax*1+0x0]
  41d630:	lea    rax,[rip+0x135e9]        # 430c20 <flatcc_builder_padding_base@@Base+0x200>
  41d637:	ret    
  41d638:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041d640 <flatcc_json_parser_set_error@@Base>:
  41d640:	endbr64 
  41d644:	mov    rax,rdx
  41d647:	mov    edx,DWORD PTR [rdi+0x20]
  41d64a:	test   edx,edx
  41d64c:	jne    41d661 <flatcc_json_parser_set_error@@Base+0x21>
  41d64e:	mov    rdx,rsi
  41d651:	sub    rdx,QWORD PTR [rdi+0x8]
  41d655:	inc    edx
  41d657:	mov    DWORD PTR [rdi+0x20],ecx
  41d65a:	mov    DWORD PTR [rdi+0x1c],edx
  41d65d:	mov    QWORD PTR [rdi+0x38],rsi
  41d661:	ret    
  41d662:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41d66d:	nop    DWORD PTR [rax]

000000000041d670 <flatcc_json_parser_string_part@@Base>:
  41d670:	endbr64 
  41d674:	cmp    rsi,rdx
  41d677:	jne    41d690 <flatcc_json_parser_string_part@@Base+0x20>
  41d679:	jmp    41d6b0 <flatcc_json_parser_string_part@@Base+0x40>
  41d67b:	nop    DWORD PTR [rax+rax*1+0x0]
  41d680:	cmp    al,0x5c
  41d682:	je     41d6a0 <flatcc_json_parser_string_part@@Base+0x30>
  41d684:	cmp    al,0x1f
  41d686:	jbe    41d6a0 <flatcc_json_parser_string_part@@Base+0x30>
  41d688:	inc    rsi
  41d68b:	cmp    rdx,rsi
  41d68e:	je     41d6b0 <flatcc_json_parser_string_part@@Base+0x40>
  41d690:	movzx  eax,BYTE PTR [rsi]
  41d693:	cmp    al,0x22
  41d695:	jne    41d680 <flatcc_json_parser_string_part@@Base+0x10>
  41d697:	mov    rax,rsi
  41d69a:	ret    
  41d69b:	nop    DWORD PTR [rax+rax*1+0x0]
  41d6a0:	cmp    al,0x1f
  41d6a2:	jg     41d697 <flatcc_json_parser_string_part@@Base+0x27>
  41d6a4:	mov    ecx,0x11
  41d6a9:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  41d6ae:	xchg   ax,ax
  41d6b0:	mov    ecx,0x14
  41d6b5:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  41d6ba:	nop    WORD PTR [rax+rax*1+0x0]

000000000041d6c0 <flatcc_json_parser_space_ext@@Base>:
  41d6c0:	endbr64 
  41d6c4:	mov    rax,rdx
  41d6c7:	sub    rax,rsi
  41d6ca:	cmp    rax,0xf
  41d6ce:	jle    41d707 <flatcc_json_parser_space_ext@@Base+0x47>
  41d6d0:	movzx  eax,BYTE PTR [rsi]
  41d6d3:	cmp    al,0x20
  41d6d5:	jg     41d6e7 <flatcc_json_parser_space_ext@@Base+0x27>
  41d6d7:	cmp    WORD PTR [rsi],0x2020
  41d6dc:	je     41d6f0 <flatcc_json_parser_space_ext@@Base+0x30>
  41d6de:	cmp    al,0x20
  41d6e0:	je     41d6fc <flatcc_json_parser_space_ext@@Base+0x3c>
  41d6e2:	cmp    rsi,rdx
  41d6e5:	jne    41d727 <flatcc_json_parser_space_ext@@Base+0x67>
  41d6e7:	mov    rax,rsi
  41d6ea:	ret    
  41d6eb:	nop    DWORD PTR [rax+rax*1+0x0]
  41d6f0:	movzx  eax,BYTE PTR [rsi+0x2]
  41d6f4:	add    rsi,0x2
  41d6f8:	cmp    al,0x20
  41d6fa:	jne    41d703 <flatcc_json_parser_space_ext@@Base+0x43>
  41d6fc:	movzx  eax,BYTE PTR [rsi+0x1]
  41d700:	inc    rsi
  41d703:	cmp    al,0x20
  41d705:	jg     41d6e7 <flatcc_json_parser_space_ext@@Base+0x27>
  41d707:	cmp    rdx,rsi
  41d70a:	je     41d6e7 <flatcc_json_parser_space_ext@@Base+0x27>
  41d70c:	movzx  eax,BYTE PTR [rsi]
  41d70f:	cmp    al,0x20
  41d711:	jne    41d727 <flatcc_json_parser_space_ext@@Base+0x67>
  41d713:	nop    DWORD PTR [rax+rax*1+0x0]
  41d718:	inc    rsi
  41d71b:	cmp    rdx,rsi
  41d71e:	je     41d6e7 <flatcc_json_parser_space_ext@@Base+0x27>
  41d720:	movzx  eax,BYTE PTR [rsi]
  41d723:	cmp    al,0x20
  41d725:	je     41d718 <flatcc_json_parser_space_ext@@Base+0x58>
  41d727:	cmp    al,0x20
  41d729:	jg     41d6e7 <flatcc_json_parser_space_ext@@Base+0x27>
  41d72b:	cmp    al,0xa
  41d72d:	je     41d75f <flatcc_json_parser_space_ext@@Base+0x9f>
  41d72f:	jle    41d748 <flatcc_json_parser_space_ext@@Base+0x88>
  41d731:	cmp    al,0xd
  41d733:	je     41d770 <flatcc_json_parser_space_ext@@Base+0xb0>
  41d735:	cmp    al,0x20
  41d737:	je     41d6c4 <flatcc_json_parser_space_ext@@Base+0x4>
  41d739:	mov    ecx,0x5
  41d73e:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  41d743:	nop    DWORD PTR [rax+rax*1+0x0]
  41d748:	cmp    al,0x9
  41d74a:	jne    41d739 <flatcc_json_parser_space_ext@@Base+0x79>
  41d74c:	inc    rsi
  41d74f:	cmp    rdx,rsi
  41d752:	je     41d6e7 <flatcc_json_parser_space_ext@@Base+0x27>
  41d754:	movzx  eax,BYTE PTR [rsi]
  41d757:	cmp    al,0x20
  41d759:	jg     41d6e7 <flatcc_json_parser_space_ext@@Base+0x27>
  41d75b:	cmp    al,0xa
  41d75d:	jne    41d72f <flatcc_json_parser_space_ext@@Base+0x6f>
  41d75f:	inc    rsi
  41d762:	inc    DWORD PTR [rdi+0x18]
  41d765:	mov    QWORD PTR [rdi+0x8],rsi
  41d769:	jmp    41d74f <flatcc_json_parser_space_ext@@Base+0x8f>
  41d76b:	nop    DWORD PTR [rax+rax*1+0x0]
  41d770:	mov    rcx,rdx
  41d773:	sub    rcx,rsi
  41d776:	lea    rax,[rsi+0x1]
  41d77a:	cmp    rcx,0x1
  41d77e:	jle    41d786 <flatcc_json_parser_space_ext@@Base+0xc6>
  41d780:	cmp    BYTE PTR [rsi+0x1],0xa
  41d784:	je     41d78b <flatcc_json_parser_space_ext@@Base+0xcb>
  41d786:	mov    rsi,rax
  41d789:	jmp    41d762 <flatcc_json_parser_space_ext@@Base+0xa2>
  41d78b:	lea    rax,[rsi+0x2]
  41d78f:	jmp    41d786 <flatcc_json_parser_space_ext@@Base+0xc6>
  41d791:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41d79c:	nop    DWORD PTR [rax+0x0]
  41d7a0:	push   r15
  41d7a2:	push   r14
  41d7a4:	push   r13
  41d7a6:	push   r12
  41d7a8:	mov    r12,rdi
  41d7ab:	push   rbp
  41d7ac:	push   rbx
  41d7ad:	mov    rbx,rdx
  41d7b0:	sub    rsp,0x58
  41d7b4:	mov    QWORD PTR [rsp+0x10],rcx
  41d7b9:	mov    QWORD PTR [rsp+0x20],r8
  41d7be:	mov    rdx,QWORD PTR fs:0x28
  41d7c7:	mov    QWORD PTR [rsp+0x48],rdx
  41d7cc:	xor    edx,edx
  41d7ce:	mov    BYTE PTR [r8],0x0
  41d7d2:	cmp    rsi,rbx
  41d7d5:	je     41d918 <flatcc_json_parser_space_ext@@Base+0x258>
  41d7db:	movzx  eax,BYTE PTR [rsi]
  41d7de:	cmp    al,0x22
  41d7e0:	je     41d970 <flatcc_json_parser_space_ext@@Base+0x2b0>
  41d7e6:	cmp    al,0x2e
  41d7e8:	je     41d889 <flatcc_json_parser_space_ext@@Base+0x1c9>
  41d7ee:	mov    DWORD PTR [rdi+0x14],0x1
  41d7f5:	mov    r10,rsi
  41d7f8:	lea    rax,[rsp+0x38]
  41d7fd:	mov    BYTE PTR [rsp+0x1f],0x0
  41d802:	mov    QWORD PTR [rsp+0x8],rax
  41d807:	lea    r15,[rsp+0x3c]
  41d80c:	lea    r14,[rsp+0x40]
  41d811:	mov    r13,QWORD PTR [rsp+0x10]
  41d816:	mov    rbp,r10
  41d819:	mov    rax,QWORD PTR [r13+0x0]
  41d81d:	mov    rsi,r10
  41d820:	jmp    41d845 <flatcc_json_parser_space_ext@@Base+0x185>
  41d822:	nop    WORD PTR [rax+rax*1+0x0]
  41d828:	cmp    rbp,rax
  41d82b:	jne    41d8b8 <flatcc_json_parser_space_ext@@Base+0x1f8>
  41d831:	add    r13,0x8
  41d835:	mov    rax,QWORD PTR [r13+0x0]
  41d839:	mov    rbp,rsi
  41d83c:	test   rax,rax
  41d83f:	je     41d900 <flatcc_json_parser_space_ext@@Base+0x240>
  41d845:	mov    rcx,QWORD PTR [rsp+0x8]
  41d84a:	mov    r9,r15
  41d84d:	mov    r8,r14
  41d850:	mov    rdx,rbx
  41d853:	mov    rdi,r12
  41d856:	call   rax
  41d858:	mov    rsi,rax
  41d85b:	cmp    rbx,rax
  41d85e:	jne    41d828 <flatcc_json_parser_space_ext@@Base+0x168>
  41d860:	mov    r10,rsi
  41d863:	mov    rdi,QWORD PTR [rsp+0x48]
  41d868:	xor    rdi,QWORD PTR fs:0x28
  41d871:	mov    rax,r10
  41d874:	jne    41d9bf <flatcc_json_parser_space_ext@@Base+0x2ff>
  41d87a:	add    rsp,0x58
  41d87e:	pop    rbx
  41d87f:	pop    rbp
  41d880:	pop    r12
  41d882:	pop    r13
  41d884:	pop    r14
  41d886:	pop    r15
  41d888:	ret    
  41d889:	mov    ecx,0x5
  41d88e:	mov    rdx,rbx
  41d891:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41d896:	mov    esi,DWORD PTR [r12+0x14]
  41d89b:	mov    r10,rax
  41d89e:	test   esi,esi
  41d8a0:	je     41d930 <flatcc_json_parser_space_ext@@Base+0x270>
  41d8a6:	cmp    rbx,r10
  41d8a9:	jne    41d7f8 <flatcc_json_parser_space_ext@@Base+0x138>
  41d8af:	jmp    41d863 <flatcc_json_parser_space_ext@@Base+0x1a3>
  41d8b1:	nop    DWORD PTR [rax+0x0]
  41d8b8:	mov    edx,DWORD PTR [rsp+0x38]
  41d8bc:	mov    r10,rax
  41d8bf:	test   edx,edx
  41d8c1:	jne    41d980 <flatcc_json_parser_space_ext@@Base+0x2c0>
  41d8c7:	mov    rax,QWORD PTR [rsp+0x40]
  41d8cc:	cmp    rax,0xff
  41d8d2:	ja     41d9b0 <flatcc_json_parser_space_ext@@Base+0x2f0>
  41d8d8:	mov    BYTE PTR [rsp+0x1f],al
  41d8dc:	movzx  ecx,BYTE PTR [rsp+0x1f]
  41d8e1:	mov    rax,QWORD PTR [rsp+0x20]
  41d8e6:	add    BYTE PTR [rax],cl
  41d8e8:	mov    ecx,DWORD PTR [rsp+0x3c]
  41d8ec:	test   ecx,ecx
  41d8ee:	jne    41d811 <flatcc_json_parser_space_ext@@Base+0x151>
  41d8f4:	jmp    41d863 <flatcc_json_parser_space_ext@@Base+0x1a3>
  41d8f9:	nop    DWORD PTR [rax+0x0]
  41d900:	mov    ecx,0x17
  41d905:	mov    rdx,rbx
  41d908:	mov    rdi,r12
  41d90b:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41d910:	mov    r10,rax
  41d913:	jmp    41d863 <flatcc_json_parser_space_ext@@Base+0x1a3>
  41d918:	mov    eax,DWORD PTR [rdi+0x14]
  41d91b:	test   eax,eax
  41d91d:	jne    41d860 <flatcc_json_parser_space_ext@@Base+0x1a0>
  41d923:	mov    r10,rbx
  41d926:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41d930:	mov    rax,rbx
  41d933:	sub    rax,r10
  41d936:	cmp    rax,0x1
  41d93a:	jle    41d950 <flatcc_json_parser_space_ext@@Base+0x290>
  41d93c:	cmp    BYTE PTR [r10],0x20
  41d940:	jg     41d8a6 <flatcc_json_parser_space_ext@@Base+0x1e6>
  41d946:	jne    41d950 <flatcc_json_parser_space_ext@@Base+0x290>
  41d948:	cmp    BYTE PTR [r10+0x1],0x20
  41d94d:	jg     41d9b7 <flatcc_json_parser_space_ext@@Base+0x2f7>
  41d94f:	nop
  41d950:	mov    rsi,r10
  41d953:	mov    rdx,rbx
  41d956:	mov    rdi,r12
  41d959:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41d95e:	mov    r10,rax
  41d961:	jmp    41d8a6 <flatcc_json_parser_space_ext@@Base+0x1e6>
  41d966:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41d970:	lea    r10,[rsi+0x1]
  41d974:	mov    DWORD PTR [rdi+0x14],0x0
  41d97b:	jmp    41d930 <flatcc_json_parser_space_ext@@Base+0x270>
  41d97d:	nop    DWORD PTR [rax]
  41d980:	mov    ecx,0x8
  41d985:	mov    rsi,r10
  41d988:	mov    rdx,rbx
  41d98b:	mov    rdi,r12
  41d98e:	mov    QWORD PTR [rsp+0x28],r10
  41d993:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41d998:	mov    r10,QWORD PTR [rsp+0x28]
  41d99d:	cmp    rbx,rax
  41d9a0:	jne    41d8dc <flatcc_json_parser_space_ext@@Base+0x21c>
  41d9a6:	mov    r10,rbx
  41d9a9:	jmp    41d863 <flatcc_json_parser_space_ext@@Base+0x1a3>
  41d9ae:	xchg   ax,ax
  41d9b0:	mov    ecx,0x7
  41d9b5:	jmp    41d985 <flatcc_json_parser_space_ext@@Base+0x2c5>
  41d9b7:	inc    r10
  41d9ba:	jmp    41d8a6 <flatcc_json_parser_space_ext@@Base+0x1e6>
  41d9bf:	call   4061a0 <__stack_chk_fail@plt>
  41d9c4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41d9cf:	nop
  41d9d0:	push   r15
  41d9d2:	push   r14
  41d9d4:	push   r13
  41d9d6:	push   r12
  41d9d8:	mov    r12,rsi
  41d9db:	push   rbp
  41d9dc:	mov    rbp,rdi
  41d9df:	push   rbx
  41d9e0:	mov    rbx,rdx
  41d9e3:	sub    rsp,0x38
  41d9e7:	mov    QWORD PTR [rsp],rcx
  41d9eb:	mov    DWORD PTR [rsp+0x8],r8d
  41d9f0:	mov    DWORD PTR [rsp+0x1c],r9d
  41d9f5:	mov    rdi,QWORD PTR [rdi]
  41d9f8:	mov    r15,QWORD PTR [rsp+0x70]
  41d9fd:	mov    rax,QWORD PTR fs:0x28
  41da06:	mov    QWORD PTR [rsp+0x28],rax
  41da0b:	xor    eax,eax
  41da0d:	mov    DWORD PTR [rsp+0x24],0x0
  41da15:	call   4183c0 <flatcc_builder_start_offset_vector@@Base>
  41da1a:	test   eax,eax
  41da1c:	je     41da60 <flatcc_json_parser_space_ext@@Base+0x3a0>
  41da1e:	mov    ecx,0x21
  41da23:	mov    rdx,rbx
  41da26:	mov    rsi,r12
  41da29:	mov    rdi,rbp
  41da2c:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41da31:	mov    r14,rax
  41da34:	mov    rcx,QWORD PTR [rsp+0x28]
  41da39:	xor    rcx,QWORD PTR fs:0x28
  41da42:	mov    rax,r14
  41da45:	jne    41dde3 <flatcc_json_parser_space_ext@@Base+0x723>
  41da4b:	add    rsp,0x38
  41da4f:	pop    rbx
  41da50:	pop    rbp
  41da51:	pop    r12
  41da53:	pop    r13
  41da55:	pop    r14
  41da57:	pop    r15
  41da59:	ret    
  41da5a:	nop    WORD PTR [rax+rax*1+0x0]
  41da60:	cmp    r12,rbx
  41da63:	je     41da70 <flatcc_json_parser_space_ext@@Base+0x3b0>
  41da65:	cmp    BYTE PTR [r12],0x5b
  41da6a:	je     41db10 <flatcc_json_parser_space_ext@@Base+0x450>
  41da70:	mov    rsi,r12
  41da73:	mov    ecx,0x16
  41da78:	mov    rdx,rbx
  41da7b:	mov    rdi,rbp
  41da7e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41da83:	mov    r14,rax
  41da86:	mov    eax,DWORD PTR [rsp+0x8]
  41da8a:	xor    r12d,r12d
  41da8d:	mov    QWORD PTR [rsp+0x8],rax
  41da92:	nop    WORD PTR [rax+rax*1+0x0]
  41da98:	cmp    r12,QWORD PTR [rsp+0x8]
  41da9d:	je     41dac0 <flatcc_json_parser_space_ext@@Base+0x400>
  41da9f:	mov    rsi,r14
  41daa2:	mov    ecx,0x1e
  41daa7:	mov    rdx,rbx
  41daaa:	mov    rdi,rbp
  41daad:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41dab2:	mov    r14,rax
  41dab5:	jmp    41da34 <flatcc_json_parser_space_ext@@Base+0x374>
  41daba:	nop    WORD PTR [rax+rax*1+0x0]
  41dac0:	mov    rsi,QWORD PTR [rsp]
  41dac4:	mov    rdi,QWORD PTR [rbp+0x0]
  41dac8:	mov    r12,r14
  41dacb:	call   417320 <flatcc_builder_get_user_frame_ptr@@Base>
  41dad0:	mov    rdi,QWORD PTR [rbp+0x0]
  41dad4:	mov    rsi,rax
  41dad7:	call   419460 <flatcc_builder_end_offset_vector_for_unions@@Base>
  41dadc:	mov    DWORD PTR [rsp+0x24],eax
  41dae0:	test   eax,eax
  41dae2:	je     41da1e <flatcc_json_parser_space_ext@@Base+0x35e>
  41dae8:	movzx  esi,WORD PTR [rsp+0x1c]
  41daed:	mov    rdi,QWORD PTR [rbp+0x0]
  41daf1:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  41daf6:	test   rax,rax
  41daf9:	je     41da1e <flatcc_json_parser_space_ext@@Base+0x35e>
  41daff:	mov    edx,DWORD PTR [rsp+0x24]
  41db03:	mov    DWORD PTR [rax],edx
  41db05:	jmp    41da34 <flatcc_json_parser_space_ext@@Base+0x374>
  41db0a:	nop    WORD PTR [rax+rax*1+0x0]
  41db10:	lea    r13,[r12+0x1]
  41db15:	mov    rax,rbx
  41db18:	sub    rax,r13
  41db1b:	cmp    rax,0x1
  41db1f:	jle    41db2f <flatcc_json_parser_space_ext@@Base+0x46f>
  41db21:	cmp    BYTE PTR [r12+0x1],0x20
  41db27:	jg     41db40 <flatcc_json_parser_space_ext@@Base+0x480>
  41db29:	je     41dd7b <flatcc_json_parser_space_ext@@Base+0x6bb>
  41db2f:	mov    rsi,r13
  41db32:	mov    rdx,rbx
  41db35:	mov    rdi,rbp
  41db38:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41db3d:	mov    r13,rax
  41db40:	mov    eax,DWORD PTR [rsp+0x8]
  41db44:	mov    QWORD PTR [rsp+0x8],rax
  41db49:	cmp    rbx,r13
  41db4c:	je     41db59 <flatcc_json_parser_space_ext@@Base+0x499>
  41db4e:	cmp    BYTE PTR [r13+0x0],0x5d
  41db53:	je     41dda1 <flatcc_json_parser_space_ext@@Base+0x6e1>
  41db59:	cmp    QWORD PTR [rsp+0x8],0x0
  41db5f:	je     41dcc0 <flatcc_json_parser_space_ext@@Base+0x600>
  41db65:	lea    rax,[rsp+0x24]
  41db6a:	mov    QWORD PTR [rsp+0x10],rax
  41db6f:	xor    r12d,r12d
  41db72:	nop    WORD PTR [rax+rax*1+0x0]
  41db78:	mov    rsi,QWORD PTR [rsp]
  41db7c:	mov    rdi,QWORD PTR [rbp+0x0]
  41db80:	call   417320 <flatcc_builder_get_user_frame_ptr@@Base>
  41db85:	movzx  ecx,BYTE PTR [rax+r12*1]
  41db8a:	mov    r8,QWORD PTR [rsp+0x10]
  41db8f:	mov    rdx,rbx
  41db92:	mov    rsi,r13
  41db95:	mov    rdi,rbp
  41db98:	call   r15
  41db9b:	mov    r14,rax
  41db9e:	cmp    rbx,rax
  41dba1:	je     41da34 <flatcc_json_parser_space_ext@@Base+0x374>
  41dba7:	mov    rdi,QWORD PTR [rbp+0x0]
  41dbab:	mov    esi,0x1
  41dbb0:	call   417e70 <flatcc_builder_extend_offset_vector@@Base>
  41dbb5:	test   rax,rax
  41dbb8:	je     41dd08 <flatcc_json_parser_space_ext@@Base+0x648>
  41dbbe:	mov    edx,DWORD PTR [rsp+0x24]
  41dbc2:	mov    DWORD PTR [rax],edx
  41dbc4:	mov    rax,rbx
  41dbc7:	sub    rax,r14
  41dbca:	cmp    rax,0x1
  41dbce:	jle    41dbde <flatcc_json_parser_space_ext@@Base+0x51e>
  41dbd0:	movzx  eax,BYTE PTR [r14]
  41dbd4:	cmp    al,0x20
  41dbd6:	jg     41dbf8 <flatcc_json_parser_space_ext@@Base+0x538>
  41dbd8:	je     41dc60 <flatcc_json_parser_space_ext@@Base+0x5a0>
  41dbde:	mov    rsi,r14
  41dbe1:	mov    rdx,rbx
  41dbe4:	mov    rdi,rbp
  41dbe7:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41dbec:	mov    r14,rax
  41dbef:	cmp    rbx,r14
  41dbf2:	je     41dc58 <flatcc_json_parser_space_ext@@Base+0x598>
  41dbf4:	movzx  eax,BYTE PTR [r14]
  41dbf8:	cmp    al,0x2c
  41dbfa:	je     41dc78 <flatcc_json_parser_space_ext@@Base+0x5b8>
  41dbfc:	inc    r12
  41dbff:	cmp    al,0x5d
  41dc01:	je     41dc20 <flatcc_json_parser_space_ext@@Base+0x560>
  41dc03:	mov    rsi,r14
  41dc06:	mov    ecx,0x9
  41dc0b:	mov    rdx,rbx
  41dc0e:	mov    rdi,rbp
  41dc11:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41dc16:	mov    r14,rax
  41dc19:	jmp    41da98 <flatcc_json_parser_space_ext@@Base+0x3d8>
  41dc1e:	xchg   ax,ax
  41dc20:	lea    rsi,[r14+0x1]
  41dc24:	mov    rax,rbx
  41dc27:	sub    rax,rsi
  41dc2a:	cmp    rax,0x1
  41dc2e:	jle    41dc41 <flatcc_json_parser_space_ext@@Base+0x581>
  41dc30:	cmp    BYTE PTR [r14+0x1],0x20
  41dc35:	jg     41dce0 <flatcc_json_parser_space_ext@@Base+0x620>
  41dc3b:	je     41dcf0 <flatcc_json_parser_space_ext@@Base+0x630>
  41dc41:	mov    rdx,rbx
  41dc44:	mov    rdi,rbp
  41dc47:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41dc4c:	mov    r14,rax
  41dc4f:	jmp    41da98 <flatcc_json_parser_space_ext@@Base+0x3d8>
  41dc54:	nop    DWORD PTR [rax+0x0]
  41dc58:	inc    r12
  41dc5b:	jmp    41da98 <flatcc_json_parser_space_ext@@Base+0x3d8>
  41dc60:	cmp    BYTE PTR [r14+0x1],0x20
  41dc65:	jle    41dbde <flatcc_json_parser_space_ext@@Base+0x51e>
  41dc6b:	inc    r14
  41dc6e:	jmp    41dbef <flatcc_json_parser_space_ext@@Base+0x52f>
  41dc73:	nop    DWORD PTR [rax+rax*1+0x0]
  41dc78:	lea    r13,[r14+0x1]
  41dc7c:	mov    rax,rbx
  41dc7f:	sub    rax,r13
  41dc82:	cmp    rax,0x1
  41dc86:	jle    41dc91 <flatcc_json_parser_space_ext@@Base+0x5d1>
  41dc88:	cmp    BYTE PTR [r14+0x1],0x20
  41dc8d:	jg     41dca2 <flatcc_json_parser_space_ext@@Base+0x5e2>
  41dc8f:	je     41dd10 <flatcc_json_parser_space_ext@@Base+0x650>
  41dc91:	mov    rsi,r13
  41dc94:	mov    rdx,rbx
  41dc97:	mov    rdi,rbp
  41dc9a:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41dc9f:	mov    r13,rax
  41dca2:	inc    r12
  41dca5:	cmp    rbx,r13
  41dca8:	je     41dd60 <flatcc_json_parser_space_ext@@Base+0x6a0>
  41dcae:	cmp    BYTE PTR [r13+0x0],0x5d
  41dcb3:	je     41dd28 <flatcc_json_parser_space_ext@@Base+0x668>
  41dcb5:	cmp    QWORD PTR [rsp+0x8],r12
  41dcba:	jne    41db78 <flatcc_json_parser_space_ext@@Base+0x4b8>
  41dcc0:	mov    ecx,0x1e
  41dcc5:	mov    rdx,rbx
  41dcc8:	mov    rsi,r13
  41dccb:	mov    rdi,rbp
  41dcce:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41dcd3:	mov    r14,rax
  41dcd6:	jmp    41da34 <flatcc_json_parser_space_ext@@Base+0x374>
  41dcdb:	nop    DWORD PTR [rax+rax*1+0x0]
  41dce0:	mov    r14,rsi
  41dce3:	jmp    41da98 <flatcc_json_parser_space_ext@@Base+0x3d8>
  41dce8:	nop    DWORD PTR [rax+rax*1+0x0]
  41dcf0:	cmp    BYTE PTR [r14+0x2],0x20
  41dcf5:	jle    41dc41 <flatcc_json_parser_space_ext@@Base+0x581>
  41dcfb:	add    r14,0x2
  41dcff:	jmp    41da98 <flatcc_json_parser_space_ext@@Base+0x3d8>
  41dd04:	nop    DWORD PTR [rax+0x0]
  41dd08:	mov    r12,r14
  41dd0b:	jmp    41da1e <flatcc_json_parser_space_ext@@Base+0x35e>
  41dd10:	cmp    BYTE PTR [r14+0x2],0x20
  41dd15:	jle    41dc91 <flatcc_json_parser_space_ext@@Base+0x5d1>
  41dd1b:	lea    r13,[r14+0x2]
  41dd1f:	jmp    41dca2 <flatcc_json_parser_space_ext@@Base+0x5e2>
  41dd21:	nop    DWORD PTR [rax+0x0]
  41dd28:	lea    r14,[r13+0x1]
  41dd2c:	mov    rax,rbx
  41dd2f:	sub    rax,r14
  41dd32:	cmp    rax,0x1
  41dd36:	jle    41dd45 <flatcc_json_parser_space_ext@@Base+0x685>
  41dd38:	cmp    BYTE PTR [r13+0x1],0x20
  41dd3d:	jg     41da98 <flatcc_json_parser_space_ext@@Base+0x3d8>
  41dd43:	je     41dd91 <flatcc_json_parser_space_ext@@Base+0x6d1>
  41dd45:	mov    rsi,r14
  41dd48:	mov    rdx,rbx
  41dd4b:	mov    rdi,rbp
  41dd4e:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41dd53:	mov    r14,rax
  41dd56:	jmp    41da98 <flatcc_json_parser_space_ext@@Base+0x3d8>
  41dd5b:	nop    DWORD PTR [rax+rax*1+0x0]
  41dd60:	mov    ecx,0x9
  41dd65:	mov    rdx,rbx
  41dd68:	mov    rsi,rbx
  41dd6b:	mov    rdi,rbp
  41dd6e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41dd73:	mov    r14,rax
  41dd76:	jmp    41da98 <flatcc_json_parser_space_ext@@Base+0x3d8>
  41dd7b:	cmp    BYTE PTR [r12+0x2],0x20
  41dd81:	jle    41db2f <flatcc_json_parser_space_ext@@Base+0x46f>
  41dd87:	lea    r13,[r12+0x2]
  41dd8c:	jmp    41db40 <flatcc_json_parser_space_ext@@Base+0x480>
  41dd91:	cmp    BYTE PTR [r13+0x2],0x20
  41dd96:	jle    41dd45 <flatcc_json_parser_space_ext@@Base+0x685>
  41dd98:	lea    r14,[r13+0x2]
  41dd9c:	jmp    41da98 <flatcc_json_parser_space_ext@@Base+0x3d8>
  41dda1:	lea    r14,[r13+0x1]
  41dda5:	mov    rax,rbx
  41dda8:	sub    rax,r14
  41ddab:	cmp    rax,0x1
  41ddaf:	jle    41ddc1 <flatcc_json_parser_space_ext@@Base+0x701>
  41ddb1:	xor    r12d,r12d
  41ddb4:	cmp    BYTE PTR [r13+0x1],0x20
  41ddb9:	jg     41da98 <flatcc_json_parser_space_ext@@Base+0x3d8>
  41ddbf:	je     41ddda <flatcc_json_parser_space_ext@@Base+0x71a>
  41ddc1:	mov    rsi,r14
  41ddc4:	mov    rdx,rbx
  41ddc7:	mov    rdi,rbp
  41ddca:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41ddcf:	mov    r14,rax
  41ddd2:	xor    r12d,r12d
  41ddd5:	jmp    41da98 <flatcc_json_parser_space_ext@@Base+0x3d8>
  41ddda:	cmp    BYTE PTR [r13+0x2],0x20
  41dddf:	jle    41ddc1 <flatcc_json_parser_space_ext@@Base+0x701>
  41dde1:	jmp    41dd98 <flatcc_json_parser_space_ext@@Base+0x6d8>
  41dde3:	call   4061a0 <__stack_chk_fail@plt>
  41dde8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041ddf0 <flatcc_json_parser_string_escape@@Base>:
  41ddf0:	endbr64 
  41ddf4:	mov    r8,rdx
  41ddf7:	sub    r8,rsi
  41ddfa:	cmp    r8,0x1
  41ddfe:	jle    41de28 <flatcc_json_parser_string_escape@@Base+0x38>
  41de00:	cmp    BYTE PTR [rsi],0x5c
  41de03:	jne    41de28 <flatcc_json_parser_string_escape@@Base+0x38>
  41de05:	movzx  eax,BYTE PTR [rsi+0x1]
  41de09:	sub    eax,0x22
  41de0c:	cmp    al,0x56
  41de0e:	ja     41de28 <flatcc_json_parser_string_escape@@Base+0x38>
  41de10:	lea    r9,[rip+0x138e9]        # 431700 <flatcc_builder_padding_base@@Base+0xce0>
  41de17:	movzx  eax,al
  41de1a:	movsxd rax,DWORD PTR [r9+rax*4]
  41de1e:	add    rax,r9
  41de21:	notrack jmp rax
  41de24:	nop    DWORD PTR [rax+0x0]
  41de28:	mov    BYTE PTR [rcx],0x0
  41de2b:	mov    ecx,0x12
  41de30:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  41de35:	nop    DWORD PTR [rax]
  41de38:	mov    BYTE PTR [rcx],0x1
  41de3b:	cmp    r8,0x3
  41de3f:	jle    41de28 <flatcc_json_parser_string_escape@@Base+0x38>
  41de41:	movzx  eax,BYTE PTR [rsi+0x2]
  41de45:	lea    r8d,[rax-0x30]
  41de49:	cmp    r8b,0x9
  41de4d:	ja     41df90 <flatcc_json_parser_string_escape@@Base+0x1a0>
  41de53:	shl    eax,0x4
  41de56:	movzx  r8d,BYTE PTR [rsi+0x3]
  41de5b:	lea    r9d,[r8-0x30]
  41de5f:	cmp    r9b,0x9
  41de63:	ja     41dff8 <flatcc_json_parser_string_escape@@Base+0x208>
  41de69:	or     eax,r9d
  41de6c:	mov    BYTE PTR [rcx+0x1],al
  41de6f:	lea    rax,[rsi+0x4]
  41de73:	ret    
  41de74:	nop    DWORD PTR [rax+0x0]
  41de78:	mov    edi,0x2201
  41de7d:	mov    WORD PTR [rcx],di
  41de80:	lea    rax,[rsi+0x2]
  41de84:	ret    
  41de85:	nop    DWORD PTR [rax]
  41de88:	mov    eax,0x2f01
  41de8d:	mov    WORD PTR [rcx],ax
  41de90:	lea    rax,[rsi+0x2]
  41de94:	ret    
  41de95:	nop    DWORD PTR [rax]
  41de98:	mov    edx,0x5c01
  41de9d:	mov    WORD PTR [rcx],dx
  41dea0:	lea    rax,[rsi+0x2]
  41dea4:	ret    
  41dea5:	nop    DWORD PTR [rax]
  41dea8:	mov    r9d,0x801
  41deae:	mov    WORD PTR [rcx],r9w
  41deb2:	lea    rax,[rsi+0x2]
  41deb6:	ret    
  41deb7:	nop    WORD PTR [rax+rax*1+0x0]
  41dec0:	mov    r8d,0xc01
  41dec6:	mov    WORD PTR [rcx],r8w
  41deca:	lea    rax,[rsi+0x2]
  41dece:	ret    
  41decf:	nop
  41ded0:	mov    r11d,0xa01
  41ded6:	mov    WORD PTR [rcx],r11w
  41deda:	lea    rax,[rsi+0x2]
  41dede:	ret    
  41dedf:	nop
  41dee0:	mov    r10d,0xd01
  41dee6:	mov    WORD PTR [rcx],r10w
  41deea:	lea    rax,[rsi+0x2]
  41deee:	ret    
  41deef:	nop
  41def0:	mov    eax,0x901
  41def5:	mov    WORD PTR [rcx],ax
  41def8:	lea    rax,[rsi+0x2]
  41defc:	ret    
  41defd:	nop    DWORD PTR [rax]
  41df00:	cmp    r8,0x5
  41df04:	jle    41de28 <flatcc_json_parser_string_escape@@Base+0x38>
  41df0a:	movzx  eax,BYTE PTR [rsi+0x2]
  41df0e:	lea    r8d,[rax-0x30]
  41df12:	cmp    r8b,0x9
  41df16:	ja     41dfb0 <flatcc_json_parser_string_escape@@Base+0x1c0>
  41df1c:	shl    eax,0xc
  41df1f:	movzx  r8d,BYTE PTR [rsi+0x3]
  41df24:	lea    r9d,[r8-0x30]
  41df28:	cmp    r9b,0x9
  41df2c:	ja     41dfd0 <flatcc_json_parser_string_escape@@Base+0x1e0>
  41df32:	shl    r8d,0x8
  41df36:	sub    r8w,0x3000
  41df3c:	or     eax,r8d
  41df3f:	movsx  r8w,BYTE PTR [rsi+0x4]
  41df45:	lea    r9d,[r8-0x30]
  41df49:	cmp    r9b,0x9
  41df4d:	ja     41e020 <flatcc_json_parser_string_escape@@Base+0x230>
  41df53:	sub    r8d,0x30
  41df57:	shl    r8d,0x4
  41df5b:	or     eax,r8d
  41df5e:	movzx  r8d,BYTE PTR [rsi+0x5]
  41df63:	lea    r9d,[r8-0x30]
  41df67:	cmp    r9b,0x9
  41df6b:	ja     41e050 <flatcc_json_parser_string_escape@@Base+0x260>
  41df71:	movsx  dx,r8b
  41df76:	sub    edx,0x30
  41df79:	or     eax,edx
  41df7b:	cmp    ax,0x7f
  41df7f:	ja     41e078 <flatcc_json_parser_string_escape@@Base+0x288>
  41df85:	mov    BYTE PTR [rcx],0x1
  41df88:	mov    BYTE PTR [rcx+0x1],al
  41df8b:	lea    rax,[rsi+0x6]
  41df8f:	ret    
  41df90:	or     eax,0x20
  41df93:	lea    r8d,[rax-0x61]
  41df97:	cmp    r8b,0x5
  41df9b:	ja     41de28 <flatcc_json_parser_string_escape@@Base+0x38>
  41dfa1:	shl    eax,0x4
  41dfa4:	sub    eax,0x70
  41dfa7:	jmp    41de56 <flatcc_json_parser_string_escape@@Base+0x66>
  41dfac:	nop    DWORD PTR [rax+0x0]
  41dfb0:	or     eax,0x20
  41dfb3:	lea    r8d,[rax-0x61]
  41dfb7:	cmp    r8b,0x5
  41dfbb:	ja     41de28 <flatcc_json_parser_string_escape@@Base+0x38>
  41dfc1:	shl    eax,0xc
  41dfc4:	sub    ax,0x7000
  41dfc8:	jmp    41df1f <flatcc_json_parser_string_escape@@Base+0x12f>
  41dfcd:	nop    DWORD PTR [rax]
  41dfd0:	or     r8d,0x20
  41dfd4:	lea    r9d,[r8-0x61]
  41dfd8:	cmp    r9b,0x5
  41dfdc:	ja     41de28 <flatcc_json_parser_string_escape@@Base+0x38>
  41dfe2:	shl    r8d,0x8
  41dfe6:	sub    r8w,0x5700
  41dfec:	or     eax,r8d
  41dfef:	jmp    41df3f <flatcc_json_parser_string_escape@@Base+0x14f>
  41dff4:	nop    DWORD PTR [rax+0x0]
  41dff8:	or     r8d,0x20
  41dffc:	lea    r9d,[r8-0x61]
  41e000:	cmp    r9b,0x5
  41e004:	ja     41de28 <flatcc_json_parser_string_escape@@Base+0x38>
  41e00a:	sub    r8d,0x57
  41e00e:	or     eax,r8d
  41e011:	jmp    41de6c <flatcc_json_parser_string_escape@@Base+0x7c>
  41e016:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41e020:	or     r8d,0x20
  41e024:	lea    r9d,[r8-0x61]
  41e028:	cmp    r9b,0x5
  41e02c:	ja     41de28 <flatcc_json_parser_string_escape@@Base+0x38>
  41e032:	movsx  r8w,r8b
  41e037:	sub    r8d,0x57
  41e03b:	shl    r8d,0x4
  41e03f:	or     eax,r8d
  41e042:	jmp    41df5e <flatcc_json_parser_string_escape@@Base+0x16e>
  41e047:	nop    WORD PTR [rax+rax*1+0x0]
  41e050:	or     r8d,0x20
  41e054:	lea    r9d,[r8-0x61]
  41e058:	cmp    r9b,0x5
  41e05c:	ja     41de28 <flatcc_json_parser_string_escape@@Base+0x38>
  41e062:	movsx  r8w,r8b
  41e067:	lea    edx,[r8-0x57]
  41e06b:	or     eax,edx
  41e06d:	jmp    41df7b <flatcc_json_parser_string_escape@@Base+0x18b>
  41e072:	nop    WORD PTR [rax+rax*1+0x0]
  41e078:	mov    edi,eax
  41e07a:	mov    edx,eax
  41e07c:	and    edi,0x3f
  41e07f:	shr    dx,0x6
  41e083:	or     edi,0xffffff80
  41e086:	cmp    ax,0x7ff
  41e08a:	ja     41e09e <flatcc_json_parser_string_escape@@Base+0x2ae>
  41e08c:	or     edx,0xffffffc0
  41e08f:	mov    BYTE PTR [rcx],0x2
  41e092:	mov    BYTE PTR [rcx+0x1],dl
  41e095:	mov    BYTE PTR [rcx+0x2],dil
  41e099:	jmp    41df8b <flatcc_json_parser_string_escape@@Base+0x19b>
  41e09e:	shr    ax,0xc
  41e0a2:	and    edx,0x3f
  41e0a5:	or     eax,0xffffffe0
  41e0a8:	or     edx,0xffffff80
  41e0ab:	mov    BYTE PTR [rcx],0x3
  41e0ae:	mov    BYTE PTR [rcx+0x1],al
  41e0b1:	mov    BYTE PTR [rcx+0x2],dl
  41e0b4:	mov    BYTE PTR [rcx+0x3],dil
  41e0b8:	jmp    41df8b <flatcc_json_parser_string_escape@@Base+0x19b>
  41e0bd:	nop    DWORD PTR [rax]

000000000041e0c0 <flatcc_json_parser_skip_constant@@Base>:
  41e0c0:	endbr64 
  41e0c4:	push   r13
  41e0c6:	push   r12
  41e0c8:	push   rbp
  41e0c9:	push   rbx
  41e0ca:	mov    rbx,rsi
  41e0cd:	sub    rsp,0x8
  41e0d1:	cmp    rsi,rdx
  41e0d4:	je     41e147 <flatcc_json_parser_skip_constant@@Base+0x87>
  41e0d6:	mov    rbp,rdi
  41e0d9:	mov    r12,rdx
  41e0dc:	movabs r13,0x2000000000ffd
  41e0e6:	jmp    41e0fe <flatcc_json_parser_skip_constant@@Base+0x3e>
  41e0e8:	nop    DWORD PTR [rax+rax*1+0x0]
  41e0f0:	bt     r13,rdx
  41e0f4:	jae    41e10d <flatcc_json_parser_skip_constant@@Base+0x4d>
  41e0f6:	inc    rbx
  41e0f9:	cmp    r12,rbx
  41e0fc:	je     41e147 <flatcc_json_parser_skip_constant@@Base+0x87>
  41e0fe:	movzx  eax,BYTE PTR [rbx]
  41e101:	test   al,al
  41e103:	js     41e0f6 <flatcc_json_parser_skip_constant@@Base+0x36>
  41e105:	lea    edx,[rax-0x2e]
  41e108:	cmp    dl,0x31
  41e10b:	jbe    41e0f0 <flatcc_json_parser_skip_constant@@Base+0x30>
  41e10d:	mov    edx,eax
  41e10f:	or     edx,0x20
  41e112:	sub    edx,0x61
  41e115:	cmp    dl,0x19
  41e118:	jbe    41e0f6 <flatcc_json_parser_skip_constant@@Base+0x36>
  41e11a:	mov    rdx,r12
  41e11d:	sub    rdx,rbx
  41e120:	cmp    rdx,0x1
  41e124:	jle    41e12c <flatcc_json_parser_skip_constant@@Base+0x6c>
  41e126:	cmp    al,0x20
  41e128:	jg     41e147 <flatcc_json_parser_skip_constant@@Base+0x87>
  41e12a:	je     41e158 <flatcc_json_parser_skip_constant@@Base+0x98>
  41e12c:	mov    rdx,r12
  41e12f:	mov    rsi,rbx
  41e132:	mov    rdi,rbp
  41e135:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41e13a:	cmp    rax,rbx
  41e13d:	je     41e147 <flatcc_json_parser_skip_constant@@Base+0x87>
  41e13f:	mov    rbx,rax
  41e142:	cmp    r12,rbx
  41e145:	jne    41e0fe <flatcc_json_parser_skip_constant@@Base+0x3e>
  41e147:	add    rsp,0x8
  41e14b:	mov    rax,rbx
  41e14e:	pop    rbx
  41e14f:	pop    rbp
  41e150:	pop    r12
  41e152:	pop    r13
  41e154:	ret    
  41e155:	nop    DWORD PTR [rax]
  41e158:	cmp    BYTE PTR [rbx+0x1],0x20
  41e15c:	lea    rax,[rbx+0x1]
  41e160:	jle    41e12c <flatcc_json_parser_skip_constant@@Base+0x6c>
  41e162:	jmp    41e13a <flatcc_json_parser_skip_constant@@Base+0x7a>
  41e164:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41e16f:	nop

000000000041e170 <flatcc_json_parser_match_constant@@Base>:
  41e170:	endbr64 
  41e174:	mov    rax,rdx
  41e177:	sub    rax,rsi
  41e17a:	movsxd rcx,ecx
  41e17d:	cmp    rax,rcx
  41e180:	jle    41e260 <flatcc_json_parser_match_constant@@Base+0xf0>
  41e186:	push   r13
  41e188:	mov    r13,r8
  41e18b:	push   r12
  41e18d:	mov    r12,rsi
  41e190:	push   rbp
  41e191:	mov    rbp,rdx
  41e194:	push   rbx
  41e195:	lea    rbx,[rsi+rcx*1]
  41e199:	sub    rsp,0x8
  41e19d:	mov    eax,DWORD PTR [rdi+0x14]
  41e1a0:	test   eax,eax
  41e1a2:	jne    41e1d8 <flatcc_json_parser_match_constant@@Base+0x68>
  41e1a4:	movzx  eax,BYTE PTR [rbx]
  41e1a7:	cmp    al,0x20
  41e1a9:	je     41e2d0 <flatcc_json_parser_match_constant@@Base+0x160>
  41e1af:	cmp    al,0x22
  41e1b1:	je     41e328 <flatcc_json_parser_match_constant@@Base+0x1b8>
  41e1b7:	mov    DWORD PTR [r8],0x0
  41e1be:	cmp    al,0x5c
  41e1c0:	je     41e270 <flatcc_json_parser_match_constant@@Base+0x100>
  41e1c6:	add    rsp,0x8
  41e1ca:	pop    rbx
  41e1cb:	pop    rbp
  41e1cc:	pop    r12
  41e1ce:	mov    rax,rsi
  41e1d1:	pop    r13
  41e1d3:	ret    
  41e1d4:	nop    DWORD PTR [rax+0x0]
  41e1d8:	mov    rax,rdx
  41e1db:	sub    rax,rbx
  41e1de:	cmp    rax,0x1
  41e1e2:	jle    41e1f3 <flatcc_json_parser_match_constant@@Base+0x83>
  41e1e4:	cmp    BYTE PTR [rbx],0x20
  41e1e7:	jg     41e330 <flatcc_json_parser_match_constant@@Base+0x1c0>
  41e1ed:	je     41e348 <flatcc_json_parser_match_constant@@Base+0x1d8>
  41e1f3:	mov    rdx,rbp
  41e1f6:	mov    rsi,rbx
  41e1f9:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41e1fe:	cmp    rbp,rax
  41e201:	je     41e2b5 <flatcc_json_parser_match_constant@@Base+0x145>
  41e207:	cmp    rbx,rax
  41e20a:	je     41e22f <flatcc_json_parser_match_constant@@Base+0xbf>
  41e20c:	movzx  edx,BYTE PTR [rax]
  41e20f:	cmp    dl,0x5f
  41e212:	je     41e300 <flatcc_json_parser_match_constant@@Base+0x190>
  41e218:	test   dl,dl
  41e21a:	js     41e300 <flatcc_json_parser_match_constant@@Base+0x190>
  41e220:	or     edx,0x20
  41e223:	sub    edx,0x61
  41e226:	cmp    dl,0x19
  41e229:	jbe    41e300 <flatcc_json_parser_match_constant@@Base+0x190>
  41e22f:	mov    DWORD PTR [r13+0x0],0x0
  41e237:	movzx  edx,BYTE PTR [rax]
  41e23a:	mov    ecx,edx
  41e23c:	and    ecx,0xffffffdf
  41e23f:	cmp    cl,0x5d
  41e242:	je     41e24b <flatcc_json_parser_match_constant@@Base+0xdb>
  41e244:	cmp    dl,0x2c
  41e247:	cmovne rax,r12
  41e24b:	add    rsp,0x8
  41e24f:	pop    rbx
  41e250:	pop    rbp
  41e251:	pop    r12
  41e253:	pop    r13
  41e255:	ret    
  41e256:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41e260:	mov    DWORD PTR [r8],0x0
  41e267:	mov    rax,rsi
  41e26a:	ret    
  41e26b:	nop    DWORD PTR [rax+rax*1+0x0]
  41e270:	add    rsp,0x8
  41e274:	mov    rsi,rbx
  41e277:	pop    rbx
  41e278:	pop    rbp
  41e279:	pop    r12
  41e27b:	mov    ecx,0x12
  41e280:	pop    r13
  41e282:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  41e287:	nop    WORD PTR [rax+rax*1+0x0]
  41e290:	cmp    dl,0x22
  41e293:	jne    41e300 <flatcc_json_parser_match_constant@@Base+0x190>
  41e295:	lea    rsi,[rax+0x1]
  41e299:	cmp    rsi,0xffffffffffffffff
  41e29d:	jge    41e318 <flatcc_json_parser_match_constant@@Base+0x1a8>
  41e29f:	cmp    BYTE PTR [rax+0x1],0x20
  41e2a3:	jg     41e360 <flatcc_json_parser_match_constant@@Base+0x1f0>
  41e2a9:	jne    41e318 <flatcc_json_parser_match_constant@@Base+0x1a8>
  41e2ab:	cmp    BYTE PTR [rax+0x2],0x20
  41e2af:	jle    41e318 <flatcc_json_parser_match_constant@@Base+0x1a8>
  41e2b1:	add    rax,0x2
  41e2b5:	mov    DWORD PTR [r13+0x0],0x0
  41e2bd:	add    rsp,0x8
  41e2c1:	pop    rbx
  41e2c2:	pop    rbp
  41e2c3:	pop    r12
  41e2c5:	pop    r13
  41e2c7:	ret    
  41e2c8:	nop    DWORD PTR [rax+rax*1+0x0]
  41e2d0:	lea    rax,[rbx+0x1]
  41e2d4:	cmp    rdx,rax
  41e2d7:	je     41e2b5 <flatcc_json_parser_match_constant@@Base+0x145>
  41e2d9:	movzx  edx,BYTE PTR [rbx+0x1]
  41e2dd:	cmp    dl,0x20
  41e2e0:	je     41e2f0 <flatcc_json_parser_match_constant@@Base+0x180>
  41e2e2:	jmp    41e290 <flatcc_json_parser_match_constant@@Base+0x120>
  41e2e4:	nop    DWORD PTR [rax+0x0]
  41e2e8:	movzx  edx,BYTE PTR [rax]
  41e2eb:	cmp    dl,0x20
  41e2ee:	jne    41e290 <flatcc_json_parser_match_constant@@Base+0x120>
  41e2f0:	inc    rax
  41e2f3:	cmp    rbp,rax
  41e2f6:	jne    41e2e8 <flatcc_json_parser_match_constant@@Base+0x178>
  41e2f8:	jmp    41e2b5 <flatcc_json_parser_match_constant@@Base+0x145>
  41e2fa:	nop    WORD PTR [rax+rax*1+0x0]
  41e300:	mov    DWORD PTR [r13+0x0],0x1
  41e308:	add    rsp,0x8
  41e30c:	pop    rbx
  41e30d:	pop    rbp
  41e30e:	pop    r12
  41e310:	pop    r13
  41e312:	ret    
  41e313:	nop    DWORD PTR [rax+rax*1+0x0]
  41e318:	xor    edx,edx
  41e31a:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41e31f:	jmp    41e2b5 <flatcc_json_parser_match_constant@@Base+0x145>
  41e321:	nop    DWORD PTR [rax+0x0]
  41e328:	mov    rax,rbx
  41e32b:	jmp    41e295 <flatcc_json_parser_match_constant@@Base+0x125>
  41e330:	mov    rax,rbx
  41e333:	cmp    rbx,rdx
  41e336:	jne    41e22f <flatcc_json_parser_match_constant@@Base+0xbf>
  41e33c:	jmp    41e2b5 <flatcc_json_parser_match_constant@@Base+0x145>
  41e341:	nop    DWORD PTR [rax+0x0]
  41e348:	cmp    BYTE PTR [rbx+0x1],0x20
  41e34c:	lea    rax,[rbx+0x1]
  41e350:	jle    41e1f3 <flatcc_json_parser_match_constant@@Base+0x83>
  41e356:	jmp    41e1fe <flatcc_json_parser_match_constant@@Base+0x8e>
  41e35b:	nop    DWORD PTR [rax+rax*1+0x0]
  41e360:	mov    rax,rsi
  41e363:	jmp    41e2b5 <flatcc_json_parser_match_constant@@Base+0x145>
  41e368:	nop    DWORD PTR [rax+rax*1+0x0]

000000000041e370 <flatcc_json_parser_double@@Base>:
  41e370:	endbr64 
  41e374:	mov    QWORD PTR [rcx],0x0
  41e37b:	cmp    rsi,rdx
  41e37e:	je     41e448 <flatcc_json_parser_double@@Base+0xd8>
  41e384:	xor    eax,eax
  41e386:	cmp    BYTE PTR [rsi],0x2d
  41e389:	sete   al
  41e38c:	add    rax,rsi
  41e38f:	mov    r8,rdx
  41e392:	sub    r8,rax
  41e395:	cmp    r8,0x1
  41e399:	jle    41e3b3 <flatcc_json_parser_double@@Base+0x43>
  41e39b:	movzx  r8d,BYTE PTR [rax]
  41e39f:	cmp    r8b,0x2e
  41e3a3:	je     41e43a <flatcc_json_parser_double@@Base+0xca>
  41e3a9:	cmp    r8b,0x30
  41e3ad:	je     41e430 <flatcc_json_parser_double@@Base+0xc0>
  41e3b3:	push   r13
  41e3b5:	mov    r13,rdi
  41e3b8:	push   r12
  41e3ba:	mov    r12,rcx
  41e3bd:	push   rbp
  41e3be:	mov    rbp,rdx
  41e3c1:	push   rbx
  41e3c2:	mov    rbx,rsi
  41e3c5:	mov    rsi,rdx
  41e3c8:	sub    rsp,0x8
  41e3cc:	sub    rsi,rbx
  41e3cf:	mov    rdx,rcx
  41e3d2:	mov    rdi,rbx
  41e3d5:	call   41cbf0 <grisu3_diy_fp_encode_double@@Base+0x3d0>
  41e3da:	test   rax,rax
  41e3dd:	je     41e3f0 <flatcc_json_parser_double@@Base+0x80>
  41e3df:	cmp    rbx,rax
  41e3e2:	je     41e3f0 <flatcc_json_parser_double@@Base+0x80>
  41e3e4:	add    rsp,0x8
  41e3e8:	pop    rbx
  41e3e9:	pop    rbp
  41e3ea:	pop    r12
  41e3ec:	pop    r13
  41e3ee:	ret    
  41e3ef:	nop
  41e3f0:	vmovsd xmm0,QWORD PTR [r12]
  41e3f6:	mov    ecx,0x7
  41e3fb:	vandpd xmm0,xmm0,XMMWORD PTR [rip+0x13d5d]        # 432160 <flatcc_builder_padding_base@@Base+0x1740>
  41e403:	vucomisd xmm0,QWORD PTR [rip+0x13d45]        # 432150 <flatcc_builder_padding_base@@Base+0x1730>
  41e40b:	ja     41e412 <flatcc_json_parser_double@@Base+0xa2>
  41e40d:	mov    ecx,0x6
  41e412:	add    rsp,0x8
  41e416:	mov    rsi,rbx
  41e419:	pop    rbx
  41e41a:	mov    rdx,rbp
  41e41d:	pop    rbp
  41e41e:	pop    r12
  41e420:	mov    rdi,r13
  41e423:	pop    r13
  41e425:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  41e42a:	nop    WORD PTR [rax+rax*1+0x0]
  41e430:	cmp    BYTE PTR [rax+0x1],0x30
  41e434:	jne    41e3b3 <flatcc_json_parser_double@@Base+0x43>
  41e43a:	mov    ecx,0x6
  41e43f:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  41e444:	nop    DWORD PTR [rax+0x0]
  41e448:	mov    rax,rsi
  41e44b:	ret    
  41e44c:	nop    DWORD PTR [rax+0x0]

000000000041e450 <flatcc_json_parser_float@@Base>:
  41e450:	endbr64 
  41e454:	push   r13
  41e456:	push   r12
  41e458:	push   rbp
  41e459:	push   rbx
  41e45a:	mov    rbx,rsi
  41e45d:	sub    rsp,0x18
  41e461:	mov    rax,QWORD PTR fs:0x28
  41e46a:	mov    QWORD PTR [rsp+0x8],rax
  41e46f:	xor    eax,eax
  41e471:	mov    DWORD PTR [rcx],0x0
  41e477:	cmp    rsi,rdx
  41e47a:	je     41e578 <flatcc_json_parser_float@@Base+0x128>
  41e480:	xor    eax,eax
  41e482:	cmp    BYTE PTR [rsi],0x2d
  41e485:	sete   al
  41e488:	add    rax,rsi
  41e48b:	mov    rbp,rdx
  41e48e:	sub    rdx,rax
  41e491:	mov    r12,rdi
  41e494:	mov    r13,rcx
  41e497:	cmp    rdx,0x1
  41e49b:	jle    41e4b2 <flatcc_json_parser_float@@Base+0x62>
  41e49d:	movzx  edx,BYTE PTR [rax]
  41e4a0:	cmp    dl,0x2e
  41e4a3:	je     41e550 <flatcc_json_parser_float@@Base+0x100>
  41e4a9:	cmp    dl,0x30
  41e4ac:	je     41e540 <flatcc_json_parser_float@@Base+0xf0>
  41e4b2:	mov    rsi,rbp
  41e4b5:	sub    rsi,rbx
  41e4b8:	mov    rdx,rsp
  41e4bb:	mov    rdi,rbx
  41e4be:	call   41cbf0 <grisu3_diy_fp_encode_double@@Base+0x3d0>
  41e4c3:	vmovsd xmm1,QWORD PTR [rsp]
  41e4c8:	vxorps xmm0,xmm0,xmm0
  41e4cc:	vcvtsd2ss xmm0,xmm0,xmm1
  41e4d0:	vmovss DWORD PTR [r13+0x0],xmm0
  41e4d6:	vandps xmm0,xmm0,XMMWORD PTR [rip+0x13c92]        # 432170 <flatcc_builder_padding_base@@Base+0x1750>
  41e4de:	vucomiss xmm0,DWORD PTR [rip+0x13ca2]        # 432188 <flatcc_builder_padding_base@@Base+0x1768>
  41e4e6:	ja     41e510 <flatcc_json_parser_float@@Base+0xc0>
  41e4e8:	test   rax,rax
  41e4eb:	je     41e550 <flatcc_json_parser_float@@Base+0x100>
  41e4ed:	cmp    rbx,rax
  41e4f0:	je     41e550 <flatcc_json_parser_float@@Base+0x100>
  41e4f2:	mov    rcx,QWORD PTR [rsp+0x8]
  41e4f7:	xor    rcx,QWORD PTR fs:0x28
  41e500:	jne    41e580 <flatcc_json_parser_float@@Base+0x130>
  41e502:	add    rsp,0x18
  41e506:	pop    rbx
  41e507:	pop    rbp
  41e508:	pop    r12
  41e50a:	pop    r13
  41e50c:	ret    
  41e50d:	nop    DWORD PTR [rax]
  41e510:	vxorpd xmm0,xmm0,xmm0
  41e514:	vcomisd xmm0,xmm1
  41e518:	ja     41e568 <flatcc_json_parser_float@@Base+0x118>
  41e51a:	vmovss xmm0,DWORD PTR [rip+0x13c62]        # 432184 <flatcc_builder_padding_base@@Base+0x1764>
  41e522:	vmovss DWORD PTR [r13+0x0],xmm0
  41e528:	mov    ecx,0x7
  41e52d:	mov    rdx,rbp
  41e530:	mov    rsi,rbx
  41e533:	mov    rdi,r12
  41e536:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41e53b:	jmp    41e4f2 <flatcc_json_parser_float@@Base+0xa2>
  41e53d:	nop    DWORD PTR [rax]
  41e540:	cmp    BYTE PTR [rax+0x1],0x30
  41e544:	jne    41e4b2 <flatcc_json_parser_float@@Base+0x62>
  41e54a:	nop    WORD PTR [rax+rax*1+0x0]
  41e550:	mov    ecx,0x6
  41e555:	mov    rdx,rbp
  41e558:	mov    rsi,rbx
  41e55b:	mov    rdi,r12
  41e55e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41e563:	jmp    41e4f2 <flatcc_json_parser_float@@Base+0xa2>
  41e565:	nop    DWORD PTR [rax]
  41e568:	vmovss xmm0,DWORD PTR [rip+0x13c10]        # 432180 <flatcc_builder_padding_base@@Base+0x1760>
  41e570:	jmp    41e522 <flatcc_json_parser_float@@Base+0xd2>
  41e572:	nop    WORD PTR [rax+rax*1+0x0]
  41e578:	mov    rax,rsi
  41e57b:	jmp    41e4f2 <flatcc_json_parser_float@@Base+0xa2>
  41e580:	call   4061a0 <__stack_chk_fail@plt>
  41e585:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000041e590 <flatcc_json_parser_generic_json@@Base>:
  41e590:	endbr64 
  41e594:	push   r15
  41e596:	mov    r10,rsi
  41e599:	push   r14
  41e59b:	push   r13
  41e59d:	push   r12
  41e59f:	push   rbp
  41e5a0:	push   rbx
  41e5a1:	sub    rsp,0x238
  41e5a8:	mov    rax,QWORD PTR fs:0x28
  41e5b1:	mov    QWORD PTR [rsp+0x228],rax
  41e5b9:	xor    eax,eax
  41e5bb:	cmp    rsi,rdx
  41e5be:	je     41ee90 <flatcc_json_parser_generic_json@@Base+0x900>
  41e5c4:	lea    r12,[rsp+0x20]
  41e5c9:	lea    rax,[r12+0x200]
  41e5d1:	mov    QWORD PTR [rsp],rax
  41e5d5:	mov    r15,rdx
  41e5d8:	movzx  edx,BYTE PTR [rsi]
  41e5db:	mov    rbx,rdi
  41e5de:	mov    r14,r12
  41e5e1:	lea    r13,[rsp+0x1c]
  41e5e6:	cmp    r14,r12
  41e5e9:	je     41e6b8 <flatcc_json_parser_generic_json@@Base+0x128>
  41e5ef:	cmp    BYTE PTR [r14-0x1],0x7d
  41e5f4:	je     41eb38 <flatcc_json_parser_generic_json@@Base+0x5a8>
  41e5fa:	cmp    dl,0x39
  41e5fd:	jle    41e6c1 <flatcc_json_parser_generic_json@@Base+0x131>
  41e603:	cmp    dl,0x5b
  41e606:	je     41eb10 <flatcc_json_parser_generic_json@@Base+0x580>
  41e60c:	cmp    dl,0x7b
  41e60f:	jne    41e801 <flatcc_json_parser_generic_json@@Base+0x271>
  41e615:	cmp    r14,QWORD PTR [rsp]
  41e619:	je     41eb1a <flatcc_json_parser_generic_json@@Base+0x58a>
  41e61f:	lea    rsi,[r10+0x1]
  41e623:	mov    rax,r15
  41e626:	sub    rax,rsi
  41e629:	lea    rbp,[r14+0x1]
  41e62d:	mov    BYTE PTR [r14],0x7d
  41e631:	cmp    rax,0x1
  41e635:	jle    41e650 <flatcc_json_parser_generic_json@@Base+0xc0>
  41e637:	cmp    BYTE PTR [r10+0x1],0x20
  41e63c:	jg     41ec88 <flatcc_json_parser_generic_json@@Base+0x6f8>
  41e642:	jne    41e650 <flatcc_json_parser_generic_json@@Base+0xc0>
  41e644:	cmp    BYTE PTR [r10+0x2],0x20
  41e649:	jg     41ef1c <flatcc_json_parser_generic_json@@Base+0x98c>
  41e64f:	nop
  41e650:	mov    rdx,r15
  41e653:	mov    rdi,rbx
  41e656:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41e65b:	mov    r10,rax
  41e65e:	cmp    r15,r10
  41e661:	je     41ee90 <flatcc_json_parser_generic_json@@Base+0x900>
  41e667:	movzx  edx,BYTE PTR [r10]
  41e66b:	cmp    dl,0x7d
  41e66e:	jne    41ea14 <flatcc_json_parser_generic_json@@Base+0x484>
  41e674:	mov    r14,rbp
  41e677:	mov    rax,r10
  41e67a:	cmp    r14,r12
  41e67d:	jne    41e795 <flatcc_json_parser_generic_json@@Base+0x205>
  41e683:	nop    DWORD PTR [rax+rax*1+0x0]
  41e688:	mov    rcx,QWORD PTR [rsp+0x228]
  41e690:	xor    rcx,QWORD PTR fs:0x28
  41e699:	jne    41f012 <flatcc_json_parser_generic_json@@Base+0xa82>
  41e69f:	add    rsp,0x238
  41e6a6:	pop    rbx
  41e6a7:	pop    rbp
  41e6a8:	pop    r12
  41e6aa:	pop    r13
  41e6ac:	pop    r14
  41e6ae:	pop    r15
  41e6b0:	ret    
  41e6b1:	nop    DWORD PTR [rax+0x0]
  41e6b8:	cmp    dl,0x39
  41e6bb:	jg     41e9b0 <flatcc_json_parser_generic_json@@Base+0x420>
  41e6c1:	cmp    dl,0x30
  41e6c4:	jge    41ea50 <flatcc_json_parser_generic_json@@Base+0x4c0>
  41e6ca:	cmp    dl,0x22
  41e6cd:	jne    41e7f8 <flatcc_json_parser_generic_json@@Base+0x268>
  41e6d3:	lea    rax,[r10+0x1]
  41e6d7:	cmp    r15,rax
  41e6da:	jne    41e71a <flatcc_json_parser_generic_json@@Base+0x18a>
  41e6dc:	jmp    41ec70 <flatcc_json_parser_generic_json@@Base+0x6e0>
  41e6e1:	nop    DWORD PTR [rax+0x0]
  41e6e8:	mov    rdx,r15
  41e6eb:	mov    rsi,rax
  41e6ee:	mov    rdi,rbx
  41e6f1:	call   41d670 <flatcc_json_parser_string_part@@Base>
  41e6f6:	cmp    r15,rax
  41e6f9:	je     41e700 <flatcc_json_parser_generic_json@@Base+0x170>
  41e6fb:	cmp    BYTE PTR [rax],0x22
  41e6fe:	je     41e71f <flatcc_json_parser_generic_json@@Base+0x18f>
  41e700:	mov    rcx,r13
  41e703:	mov    rdx,r15
  41e706:	mov    rsi,rax
  41e709:	mov    rdi,rbx
  41e70c:	call   41ddf0 <flatcc_json_parser_string_escape@@Base>
  41e711:	cmp    r15,rax
  41e714:	je     41ec70 <flatcc_json_parser_generic_json@@Base+0x6e0>
  41e71a:	cmp    BYTE PTR [rax],0x22
  41e71d:	jne    41e6e8 <flatcc_json_parser_generic_json@@Base+0x158>
  41e71f:	inc    rax
  41e722:	cmp    r15,rax
  41e725:	jne    41e78c <flatcc_json_parser_generic_json@@Base+0x1fc>
  41e727:	jmp    41f017 <flatcc_json_parser_generic_json@@Base+0xa87>
  41e72c:	nop    DWORD PTR [rax+0x0]
  41e730:	cmp    rdx,0x1
  41e734:	jle    41e741 <flatcc_json_parser_generic_json@@Base+0x1b1>
  41e736:	cmp    BYTE PTR [rax],0x20
  41e739:	jg     41e74f <flatcc_json_parser_generic_json@@Base+0x1bf>
  41e73b:	je     41e870 <flatcc_json_parser_generic_json@@Base+0x2e0>
  41e741:	mov    rdx,r15
  41e744:	mov    rsi,rax
  41e747:	mov    rdi,rbx
  41e74a:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41e74f:	cmp    r15,rax
  41e752:	je     41e890 <flatcc_json_parser_generic_json@@Base+0x300>
  41e758:	movzx  edx,BYTE PTR [rax]
  41e75b:	cmp    dl,0x2c
  41e75e:	je     41e8c0 <flatcc_json_parser_generic_json@@Base+0x330>
  41e764:	cmp    dl,0x7d
  41e767:	je     41e840 <flatcc_json_parser_generic_json@@Base+0x2b0>
  41e76d:	mov    ecx,0xa
  41e772:	mov    rdx,r15
  41e775:	mov    rsi,rax
  41e778:	mov    rdi,rbx
  41e77b:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41e780:	cmp    r15,rax
  41e783:	je     41e890 <flatcc_json_parser_generic_json@@Base+0x300>
  41e789:	mov    r14,rbp
  41e78c:	cmp    r14,r12
  41e78f:	je     41e688 <flatcc_json_parser_generic_json@@Base+0xf8>
  41e795:	mov    rdx,r15
  41e798:	sub    rdx,rax
  41e79b:	cmp    BYTE PTR [r14-0x1],0x5d
  41e7a0:	lea    rbp,[r14-0x1]
  41e7a4:	jne    41e730 <flatcc_json_parser_generic_json@@Base+0x1a0>
  41e7a6:	cmp    rdx,0x1
  41e7aa:	jle    41e7b7 <flatcc_json_parser_generic_json@@Base+0x227>
  41e7ac:	cmp    BYTE PTR [rax],0x20
  41e7af:	jg     41e7c5 <flatcc_json_parser_generic_json@@Base+0x235>
  41e7b1:	je     41e940 <flatcc_json_parser_generic_json@@Base+0x3b0>
  41e7b7:	mov    rdx,r15
  41e7ba:	mov    rsi,rax
  41e7bd:	mov    rdi,rbx
  41e7c0:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41e7c5:	cmp    r15,rax
  41e7c8:	je     41e890 <flatcc_json_parser_generic_json@@Base+0x300>
  41e7ce:	movzx  edx,BYTE PTR [rax]
  41e7d1:	cmp    dl,0x2c
  41e7d4:	je     41e958 <flatcc_json_parser_generic_json@@Base+0x3c8>
  41e7da:	cmp    dl,0x5d
  41e7dd:	je     41e840 <flatcc_json_parser_generic_json@@Base+0x2b0>
  41e7df:	mov    ecx,0x9
  41e7e4:	mov    rdx,r15
  41e7e7:	mov    rsi,rax
  41e7ea:	mov    rdi,rbx
  41e7ed:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41e7f2:	jmp    41e780 <flatcc_json_parser_generic_json@@Base+0x1f0>
  41e7f4:	nop    DWORD PTR [rax+0x0]
  41e7f8:	cmp    dl,0x2d
  41e7fb:	je     41ea50 <flatcc_json_parser_generic_json@@Base+0x4c0>
  41e801:	mov    rsi,r10
  41e804:	mov    rdx,r15
  41e807:	mov    rdi,rbx
  41e80a:	mov    QWORD PTR [rsp+0x8],r10
  41e80f:	call   41e0c0 <flatcc_json_parser_skip_constant@@Base>
  41e814:	mov    r10,QWORD PTR [rsp+0x8]
  41e819:	cmp    rax,r10
  41e81c:	jne    41e722 <flatcc_json_parser_generic_json@@Base+0x192>
  41e822:	mov    ecx,0x5
  41e827:	mov    rdx,r15
  41e82a:	mov    rsi,r10
  41e82d:	mov    rdi,rbx
  41e830:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41e835:	jmp    41e688 <flatcc_json_parser_generic_json@@Base+0xf8>
  41e83a:	nop    WORD PTR [rax+rax*1+0x0]
  41e840:	lea    rsi,[rax+0x1]
  41e844:	mov    rdx,r15
  41e847:	sub    rdx,rsi
  41e84a:	cmp    rdx,0x1
  41e84e:	jle    41e860 <flatcc_json_parser_generic_json@@Base+0x2d0>
  41e850:	cmp    BYTE PTR [rax+0x1],0x20
  41e854:	jg     41e9a0 <flatcc_json_parser_generic_json@@Base+0x410>
  41e85a:	je     41ea38 <flatcc_json_parser_generic_json@@Base+0x4a8>
  41e860:	mov    rdx,r15
  41e863:	mov    rdi,rbx
  41e866:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41e86b:	jmp    41e780 <flatcc_json_parser_generic_json@@Base+0x1f0>
  41e870:	cmp    BYTE PTR [rax+0x1],0x20
  41e874:	jle    41e741 <flatcc_json_parser_generic_json@@Base+0x1b1>
  41e87a:	inc    rax
  41e87d:	cmp    r15,rax
  41e880:	jne    41e758 <flatcc_json_parser_generic_json@@Base+0x1c8>
  41e886:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41e890:	cmp    rbp,r12
  41e893:	je     41e688 <flatcc_json_parser_generic_json@@Base+0xf8>
  41e899:	xor    ecx,ecx
  41e89b:	cmp    BYTE PTR [rbp-0x1],0x5d
  41e89f:	setne  cl
  41e8a2:	add    ecx,0x9
  41e8a5:	mov    rdx,r15
  41e8a8:	mov    rsi,rax
  41e8ab:	mov    rdi,rbx
  41e8ae:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41e8b3:	jmp    41e688 <flatcc_json_parser_generic_json@@Base+0xf8>
  41e8b8:	nop    DWORD PTR [rax+rax*1+0x0]
  41e8c0:	lea    r10,[rax+0x1]
  41e8c4:	mov    rdx,r15
  41e8c7:	sub    rdx,r10
  41e8ca:	cmp    rdx,0x1
  41e8ce:	jle    41e8dc <flatcc_json_parser_generic_json@@Base+0x34c>
  41e8d0:	cmp    BYTE PTR [rax+0x1],0x20
  41e8d4:	jg     41e8ed <flatcc_json_parser_generic_json@@Base+0x35d>
  41e8d6:	je     41ea20 <flatcc_json_parser_generic_json@@Base+0x490>
  41e8dc:	mov    rsi,r10
  41e8df:	mov    rdx,r15
  41e8e2:	mov    rdi,rbx
  41e8e5:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41e8ea:	mov    r10,rax
  41e8ed:	cmp    r15,r10
  41e8f0:	je     41ed63 <flatcc_json_parser_generic_json@@Base+0x7d3>
  41e8f6:	movzx  edx,BYTE PTR [r10]
  41e8fa:	cmp    dl,0x7d
  41e8fd:	jne    41e5e6 <flatcc_json_parser_generic_json@@Base+0x56>
  41e903:	lea    rax,[r10+0x1]
  41e907:	mov    rdx,r15
  41e90a:	sub    rdx,rax
  41e90d:	cmp    rdx,0x1
  41e911:	jle    41e924 <flatcc_json_parser_generic_json@@Base+0x394>
  41e913:	cmp    BYTE PTR [r10+0x1],0x20
  41e918:	jg     41e780 <flatcc_json_parser_generic_json@@Base+0x1f0>
  41e91e:	je     41ef56 <flatcc_json_parser_generic_json@@Base+0x9c6>
  41e924:	mov    rdx,r15
  41e927:	mov    rsi,rax
  41e92a:	mov    rdi,rbx
  41e92d:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41e932:	jmp    41e780 <flatcc_json_parser_generic_json@@Base+0x1f0>
  41e937:	nop    WORD PTR [rax+rax*1+0x0]
  41e940:	cmp    BYTE PTR [rax+0x1],0x20
  41e944:	jle    41e7b7 <flatcc_json_parser_generic_json@@Base+0x227>
  41e94a:	inc    rax
  41e94d:	jmp    41e7c5 <flatcc_json_parser_generic_json@@Base+0x235>
  41e952:	nop    WORD PTR [rax+rax*1+0x0]
  41e958:	lea    r10,[rax+0x1]
  41e95c:	mov    rdx,r15
  41e95f:	sub    rdx,r10
  41e962:	cmp    rdx,0x1
  41e966:	jle    41e974 <flatcc_json_parser_generic_json@@Base+0x3e4>
  41e968:	cmp    BYTE PTR [rax+0x1],0x20
  41e96c:	jg     41e985 <flatcc_json_parser_generic_json@@Base+0x3f5>
  41e96e:	je     41ed7b <flatcc_json_parser_generic_json@@Base+0x7eb>
  41e974:	mov    rsi,r10
  41e977:	mov    rdx,r15
  41e97a:	mov    rdi,rbx
  41e97d:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41e982:	mov    r10,rax
  41e985:	cmp    r15,r10
  41e988:	je     41ee76 <flatcc_json_parser_generic_json@@Base+0x8e6>
  41e98e:	movzx  edx,BYTE PTR [r10]
  41e992:	cmp    dl,0x5d
  41e995:	jne    41e5e6 <flatcc_json_parser_generic_json@@Base+0x56>
  41e99b:	jmp    41e903 <flatcc_json_parser_generic_json@@Base+0x373>
  41e9a0:	mov    rax,rsi
  41e9a3:	jmp    41e780 <flatcc_json_parser_generic_json@@Base+0x1f0>
  41e9a8:	nop    DWORD PTR [rax+rax*1+0x0]
  41e9b0:	cmp    dl,0x5b
  41e9b3:	jne    41e60c <flatcc_json_parser_generic_json@@Base+0x7c>
  41e9b9:	lea    rsi,[r10+0x1]
  41e9bd:	mov    rax,r15
  41e9c0:	sub    rax,rsi
  41e9c3:	lea    rbp,[r14+0x1]
  41e9c7:	mov    BYTE PTR [r14],0x5d
  41e9cb:	cmp    rax,0x1
  41e9cf:	jle    41e9f0 <flatcc_json_parser_generic_json@@Base+0x460>
  41e9d1:	cmp    BYTE PTR [r10+0x1],0x20
  41e9d6:	jg     41ec90 <flatcc_json_parser_generic_json@@Base+0x700>
  41e9dc:	jne    41e9f0 <flatcc_json_parser_generic_json@@Base+0x460>
  41e9de:	cmp    BYTE PTR [r10+0x2],0x20
  41e9e3:	jg     41ef25 <flatcc_json_parser_generic_json@@Base+0x995>
  41e9e9:	nop    DWORD PTR [rax+0x0]
  41e9f0:	mov    rdx,r15
  41e9f3:	mov    rdi,rbx
  41e9f6:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41e9fb:	mov    r10,rax
  41e9fe:	cmp    r15,r10
  41ea01:	je     41ee90 <flatcc_json_parser_generic_json@@Base+0x900>
  41ea07:	movzx  edx,BYTE PTR [r10]
  41ea0b:	cmp    dl,0x5d
  41ea0e:	je     41e674 <flatcc_json_parser_generic_json@@Base+0xe4>
  41ea14:	mov    r14,rbp
  41ea17:	jmp    41e5e6 <flatcc_json_parser_generic_json@@Base+0x56>
  41ea1c:	nop    DWORD PTR [rax+0x0]
  41ea20:	cmp    BYTE PTR [rax+0x2],0x20
  41ea24:	jle    41e8dc <flatcc_json_parser_generic_json@@Base+0x34c>
  41ea2a:	lea    r10,[rax+0x2]
  41ea2e:	jmp    41e8ed <flatcc_json_parser_generic_json@@Base+0x35d>
  41ea33:	nop    DWORD PTR [rax+rax*1+0x0]
  41ea38:	cmp    BYTE PTR [rax+0x2],0x20
  41ea3c:	jle    41e860 <flatcc_json_parser_generic_json@@Base+0x2d0>
  41ea42:	add    rax,0x2
  41ea46:	jmp    41e780 <flatcc_json_parser_generic_json@@Base+0x1f0>
  41ea4b:	nop    DWORD PTR [rax+rax*1+0x0]
  41ea50:	cmp    r15,r10
  41ea53:	je     41edef <flatcc_json_parser_generic_json@@Base+0x85f>
  41ea59:	cmp    dl,0x2d
  41ea5c:	je     41ed8e <flatcc_json_parser_generic_json@@Base+0x7fe>
  41ea62:	movzx  eax,BYTE PTR [r10]
  41ea66:	cmp    al,0x30
  41ea68:	je     41edb2 <flatcc_json_parser_generic_json@@Base+0x822>
  41ea6e:	sub    eax,0x31
  41ea71:	cmp    al,0x8
  41ea73:	ja     41eea4 <flatcc_json_parser_generic_json@@Base+0x914>
  41ea79:	lea    rax,[r10+0x1]
  41ea7d:	cmp    r15,rax
  41ea80:	je     41ed00 <flatcc_json_parser_generic_json@@Base+0x770>
  41ea86:	movzx  edx,BYTE PTR [r10+0x1]
  41ea8b:	lea    ecx,[rdx-0x30]
  41ea8e:	cmp    cl,0x9
  41ea91:	ja     41eaaf <flatcc_json_parser_generic_json@@Base+0x51f>
  41ea93:	nop    DWORD PTR [rax+rax*1+0x0]
  41ea98:	inc    rax
  41ea9b:	cmp    r15,rax
  41ea9e:	je     41ed00 <flatcc_json_parser_generic_json@@Base+0x770>
  41eaa4:	movzx  edx,BYTE PTR [rax]
  41eaa7:	lea    ecx,[rdx-0x30]
  41eaaa:	cmp    cl,0x9
  41eaad:	jbe    41ea98 <flatcc_json_parser_generic_json@@Base+0x508>
  41eaaf:	cmp    dl,0x2e
  41eab2:	je     41ee29 <flatcc_json_parser_generic_json@@Base+0x899>
  41eab8:	mov    ecx,edx
  41eaba:	and    ecx,0xffffffdf
  41eabd:	cmp    cl,0x45
  41eac0:	jne    41ed18 <flatcc_json_parser_generic_json@@Base+0x788>
  41eac6:	lea    rsi,[rax+0x1]
  41eaca:	cmp    r15,rsi
  41eacd:	je     41ed9a <flatcc_json_parser_generic_json@@Base+0x80a>
  41ead3:	movzx  edx,BYTE PTR [rax+0x1]
  41ead7:	lea    ecx,[rdx-0x2b]
  41eada:	and    ecx,0xfd
  41eae0:	jne    41eaef <flatcc_json_parser_generic_json@@Base+0x55f>
  41eae2:	lea    rsi,[rax+0x2]
  41eae6:	cmp    r15,rsi
  41eae9:	je     41eafb <flatcc_json_parser_generic_json@@Base+0x56b>
  41eaeb:	movzx  edx,BYTE PTR [rax+0x2]
  41eaef:	sub    edx,0x30
  41eaf2:	cmp    dl,0x9
  41eaf5:	jbe    41eebc <flatcc_json_parser_generic_json@@Base+0x92c>
  41eafb:	mov    ecx,0x6
  41eb00:	mov    rdx,r15
  41eb03:	mov    rdi,rbx
  41eb06:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41eb0b:	jmp    41e722 <flatcc_json_parser_generic_json@@Base+0x192>
  41eb10:	cmp    r14,QWORD PTR [rsp]
  41eb14:	jne    41e9b9 <flatcc_json_parser_generic_json@@Base+0x429>
  41eb1a:	mov    ecx,0x2
  41eb1f:	mov    rdx,r15
  41eb22:	mov    rsi,r10
  41eb25:	mov    rdi,rbx
  41eb28:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41eb2d:	jmp    41e688 <flatcc_json_parser_generic_json@@Base+0xf8>
  41eb32:	nop    WORD PTR [rax+rax*1+0x0]
  41eb38:	cmp    dl,0x22
  41eb3b:	je     41ec98 <flatcc_json_parser_generic_json@@Base+0x708>
  41eb41:	cmp    dl,0x2e
  41eb44:	je     41edfa <flatcc_json_parser_generic_json@@Base+0x86a>
  41eb4a:	mov    DWORD PTR [rbx+0x14],0x1
  41eb51:	cmp    r15,r10
  41eb54:	je     41efdd <flatcc_json_parser_generic_json@@Base+0xa4d>
  41eb5a:	movzx  edx,BYTE PTR [r10]
  41eb5e:	cmp    dl,0x20
  41eb61:	jle    41efd5 <flatcc_json_parser_generic_json@@Base+0xa45>
  41eb67:	mov    rax,r10
  41eb6a:	lea    ecx,[rdx-0x2e]
  41eb6d:	mov    rsi,rax
  41eb70:	cmp    cl,0x31
  41eb73:	ja     41ebb1 <flatcc_json_parser_generic_json@@Base+0x621>
  41eb75:	movabs rdi,0x2000000000ffd
  41eb7f:	bt     rdi,rcx
  41eb83:	jae    41ebb1 <flatcc_json_parser_generic_json@@Base+0x621>
  41eb85:	lea    rdi,[rax+0x1]
  41eb89:	mov    rsi,rdi
  41eb8c:	cmp    r15,rdi
  41eb8f:	je     41ef98 <flatcc_json_parser_generic_json@@Base+0xa08>
  41eb95:	movzx  ecx,BYTE PTR [rdi]
  41eb98:	mov    rax,rdi
  41eb9b:	cmp    cl,0x20
  41eb9e:	jle    41ef98 <flatcc_json_parser_generic_json@@Base+0xa08>
  41eba4:	mov    edx,ecx
  41eba6:	lea    ecx,[rdx-0x2e]
  41eba9:	mov    rsi,rax
  41ebac:	cmp    cl,0x31
  41ebaf:	jbe    41eb75 <flatcc_json_parser_generic_json@@Base+0x5e5>
  41ebb1:	mov    ecx,edx
  41ebb3:	or     ecx,0x20
  41ebb6:	sub    ecx,0x61
  41ebb9:	cmp    cl,0x19
  41ebbc:	jbe    41ee98 <flatcc_json_parser_generic_json@@Base+0x908>
  41ebc2:	mov    rax,r15
  41ebc5:	sub    rax,rsi
  41ebc8:	cmp    rax,0x1
  41ebcc:	jle    41ebd9 <flatcc_json_parser_generic_json@@Base+0x649>
  41ebce:	cmp    BYTE PTR [rsi],0x20
  41ebd1:	jg     41ebe7 <flatcc_json_parser_generic_json@@Base+0x657>
  41ebd3:	je     41ef2e <flatcc_json_parser_generic_json@@Base+0x99e>
  41ebd9:	mov    rdx,r15
  41ebdc:	mov    rdi,rbx
  41ebdf:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41ebe4:	mov    rsi,rax
  41ebe7:	cmp    r15,rsi
  41ebea:	je     41effa <flatcc_json_parser_generic_json@@Base+0xa6a>
  41ebf0:	cmp    BYTE PTR [rsi],0x3a
  41ebf3:	jne    41efe5 <flatcc_json_parser_generic_json@@Base+0xa55>
  41ebf9:	lea    r10,[rsi+0x1]
  41ebfd:	mov    rax,r15
  41ec00:	sub    rax,r10
  41ec03:	cmp    rax,0x1
  41ec07:	jle    41ec18 <flatcc_json_parser_generic_json@@Base+0x688>
  41ec09:	movzx  edx,BYTE PTR [rsi+0x1]
  41ec0d:	cmp    dl,0x20
  41ec10:	jg     41ec2c <flatcc_json_parser_generic_json@@Base+0x69c>
  41ec12:	je     41ef40 <flatcc_json_parser_generic_json@@Base+0x9b0>
  41ec18:	mov    rdx,r15
  41ec1b:	mov    rsi,r10
  41ec1e:	mov    rdi,rbx
  41ec21:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41ec26:	movzx  edx,BYTE PTR [rax]
  41ec29:	mov    r10,rax
  41ec2c:	cmp    dl,0x39
  41ec2f:	jg     41e603 <flatcc_json_parser_generic_json@@Base+0x73>
  41ec35:	cmp    dl,0x30
  41ec38:	jge    41ea50 <flatcc_json_parser_generic_json@@Base+0x4c0>
  41ec3e:	cmp    dl,0x22
  41ec41:	jne    41e7f8 <flatcc_json_parser_generic_json@@Base+0x268>
  41ec47:	cmp    r10,r15
  41ec4a:	jne    41e6d3 <flatcc_json_parser_generic_json@@Base+0x143>
  41ec50:	mov    ecx,0x10
  41ec55:	mov    rdx,r15
  41ec58:	mov    rsi,r15
  41ec5b:	mov    rdi,rbx
  41ec5e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41ec63:	jmp    41e6d7 <flatcc_json_parser_generic_json@@Base+0x147>
  41ec68:	nop    DWORD PTR [rax+rax*1+0x0]
  41ec70:	mov    ecx,0x14
  41ec75:	mov    rdx,r15
  41ec78:	mov    rsi,rax
  41ec7b:	mov    rdi,rbx
  41ec7e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41ec83:	jmp    41e722 <flatcc_json_parser_generic_json@@Base+0x192>
  41ec88:	mov    r10,rsi
  41ec8b:	jmp    41e65e <flatcc_json_parser_generic_json@@Base+0xce>
  41ec90:	mov    r10,rsi
  41ec93:	jmp    41e9fe <flatcc_json_parser_generic_json@@Base+0x46e>
  41ec98:	mov    DWORD PTR [rbx+0x14],0x0
  41ec9f:	inc    r10
  41eca2:	cmp    r15,r10
  41eca5:	je     41edd4 <flatcc_json_parser_generic_json@@Base+0x844>
  41ecab:	movzx  edx,BYTE PTR [r10]
  41ecaf:	cmp    dl,0x22
  41ecb2:	jne    41ecda <flatcc_json_parser_generic_json@@Base+0x74a>
  41ecb4:	jmp    41ee20 <flatcc_json_parser_generic_json@@Base+0x890>
  41ecb9:	nop    DWORD PTR [rax+0x0]
  41ecc0:	lea    r10,[rax+0x1]
  41ecc4:	cmp    r15,r10
  41ecc7:	je     41edd4 <flatcc_json_parser_generic_json@@Base+0x844>
  41eccd:	movzx  edx,BYTE PTR [rax+0x1]
  41ecd1:	cmp    dl,0x22
  41ecd4:	je     41ee20 <flatcc_json_parser_generic_json@@Base+0x890>
  41ecda:	mov    rax,r10
  41ecdd:	cmp    dl,0x5c
  41ece0:	jne    41ecc0 <flatcc_json_parser_generic_json@@Base+0x730>
  41ece2:	mov    rdx,r15
  41ece5:	sub    rdx,r10
  41ece8:	cmp    rdx,0x1
  41ecec:	jle    41edc9 <flatcc_json_parser_generic_json@@Base+0x839>
  41ecf2:	inc    rax
  41ecf5:	jmp    41ecc0 <flatcc_json_parser_generic_json@@Base+0x730>
  41ecf7:	mov    rax,r15
  41ecfa:	nop    WORD PTR [rax+rax*1+0x0]
  41ed00:	mov    ecx,0x6
  41ed05:	mov    rdx,r15
  41ed08:	mov    rsi,rax
  41ed0b:	mov    rdi,rbx
  41ed0e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41ed13:	jmp    41e722 <flatcc_json_parser_generic_json@@Base+0x192>
  41ed18:	cmp    dl,0x20
  41ed1b:	je     41e722 <flatcc_json_parser_generic_json@@Base+0x192>
  41ed21:	jle    41ed41 <flatcc_json_parser_generic_json@@Base+0x7b1>
  41ed23:	cmp    dl,0x3a
  41ed26:	je     41e722 <flatcc_json_parser_generic_json@@Base+0x192>
  41ed2c:	jle    41ed59 <flatcc_json_parser_generic_json@@Base+0x7c9>
  41ed2e:	cmp    dl,0x5d
  41ed31:	je     41e722 <flatcc_json_parser_generic_json@@Base+0x192>
  41ed37:	cmp    dl,0x7d
  41ed3a:	jne    41ed00 <flatcc_json_parser_generic_json@@Base+0x770>
  41ed3c:	jmp    41e722 <flatcc_json_parser_generic_json@@Base+0x192>
  41ed41:	cmp    dl,0x9
  41ed44:	jl     41ed00 <flatcc_json_parser_generic_json@@Base+0x770>
  41ed46:	cmp    dl,0xb
  41ed49:	jle    41e722 <flatcc_json_parser_generic_json@@Base+0x192>
  41ed4f:	cmp    dl,0xd
  41ed52:	jne    41ed00 <flatcc_json_parser_generic_json@@Base+0x770>
  41ed54:	jmp    41e722 <flatcc_json_parser_generic_json@@Base+0x192>
  41ed59:	cmp    dl,0x2c
  41ed5c:	jne    41ed00 <flatcc_json_parser_generic_json@@Base+0x770>
  41ed5e:	jmp    41e722 <flatcc_json_parser_generic_json@@Base+0x192>
  41ed63:	mov    ecx,0xa
  41ed68:	mov    rdx,r15
  41ed6b:	mov    rsi,r15
  41ed6e:	mov    rdi,rbx
  41ed71:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41ed76:	jmp    41e780 <flatcc_json_parser_generic_json@@Base+0x1f0>
  41ed7b:	cmp    BYTE PTR [rax+0x2],0x20
  41ed7f:	jle    41e974 <flatcc_json_parser_generic_json@@Base+0x3e4>
  41ed85:	lea    r10,[rax+0x2]
  41ed89:	jmp    41e985 <flatcc_json_parser_generic_json@@Base+0x3f5>
  41ed8e:	inc    r10
  41ed91:	cmp    r15,r10
  41ed94:	jne    41ea62 <flatcc_json_parser_generic_json@@Base+0x4d2>
  41ed9a:	mov    ecx,0x6
  41ed9f:	mov    rdx,r15
  41eda2:	mov    rsi,r15
  41eda5:	mov    rdi,rbx
  41eda8:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41edad:	jmp    41e722 <flatcc_json_parser_generic_json@@Base+0x192>
  41edb2:	lea    rax,[r10+0x1]
  41edb6:	cmp    r15,rax
  41edb9:	je     41ed00 <flatcc_json_parser_generic_json@@Base+0x770>
  41edbf:	movzx  edx,BYTE PTR [r10+0x1]
  41edc4:	jmp    41eaaf <flatcc_json_parser_generic_json@@Base+0x51f>
  41edc9:	cmp    r15,r10
  41edcc:	je     41edd4 <flatcc_json_parser_generic_json@@Base+0x844>
  41edce:	cmp    BYTE PTR [r10],0x22
  41edd2:	je     41ee20 <flatcc_json_parser_generic_json@@Base+0x890>
  41edd4:	mov    rsi,r10
  41edd7:	mov    ecx,0x14
  41eddc:	mov    rdx,r15
  41eddf:	mov    rdi,rbx
  41ede2:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41ede7:	mov    rsi,rax
  41edea:	jmp    41ebc2 <flatcc_json_parser_generic_json@@Base+0x632>
  41edef:	mov    rbp,r14
  41edf2:	mov    rax,r15
  41edf5:	jmp    41e890 <flatcc_json_parser_generic_json@@Base+0x300>
  41edfa:	mov    rsi,r10
  41edfd:	mov    ecx,0x5
  41ee02:	mov    rdx,r15
  41ee05:	mov    rdi,rbx
  41ee08:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41ee0d:	mov    r10,rax
  41ee10:	mov    eax,DWORD PTR [rbx+0x14]
  41ee13:	test   eax,eax
  41ee15:	je     41eca2 <flatcc_json_parser_generic_json@@Base+0x712>
  41ee1b:	jmp    41eb51 <flatcc_json_parser_generic_json@@Base+0x5c1>
  41ee20:	lea    rsi,[r10+0x1]
  41ee24:	jmp    41ebc2 <flatcc_json_parser_generic_json@@Base+0x632>
  41ee29:	movzx  ecx,BYTE PTR [rax+0x1]
  41ee2d:	lea    edx,[rcx-0x30]
  41ee30:	cmp    dl,0x9
  41ee33:	ja     41efbc <flatcc_json_parser_generic_json@@Base+0xa2c>
  41ee39:	lea    rcx,[rax+0x2]
  41ee3d:	cmp    r15,rcx
  41ee40:	je     41ecf7 <flatcc_json_parser_generic_json@@Base+0x767>
  41ee46:	movzx  edx,BYTE PTR [rax+0x2]
  41ee4a:	lea    eax,[rdx-0x30]
  41ee4d:	cmp    al,0x9
  41ee4f:	ja     41ee6e <flatcc_json_parser_generic_json@@Base+0x8de>
  41ee51:	nop    DWORD PTR [rax+0x0]
  41ee58:	inc    rcx
  41ee5b:	cmp    r15,rcx
  41ee5e:	je     41ecf7 <flatcc_json_parser_generic_json@@Base+0x767>
  41ee64:	movzx  edx,BYTE PTR [rcx]
  41ee67:	lea    eax,[rdx-0x30]
  41ee6a:	cmp    al,0x9
  41ee6c:	jbe    41ee58 <flatcc_json_parser_generic_json@@Base+0x8c8>
  41ee6e:	mov    rax,rcx
  41ee71:	jmp    41eab8 <flatcc_json_parser_generic_json@@Base+0x528>
  41ee76:	mov    ecx,0x9
  41ee7b:	mov    rdx,r15
  41ee7e:	mov    rsi,r15
  41ee81:	mov    rdi,rbx
  41ee84:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41ee89:	jmp    41e780 <flatcc_json_parser_generic_json@@Base+0x1f0>
  41ee8e:	xchg   ax,ax
  41ee90:	mov    rax,r10
  41ee93:	jmp    41e688 <flatcc_json_parser_generic_json@@Base+0xf8>
  41ee98:	lea    rdi,[rax+0x1]
  41ee9c:	mov    rsi,rdi
  41ee9f:	jmp    41eb8c <flatcc_json_parser_generic_json@@Base+0x5fc>
  41eea4:	mov    ecx,0x6
  41eea9:	mov    rdx,r15
  41eeac:	mov    rsi,r10
  41eeaf:	mov    rdi,rbx
  41eeb2:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41eeb7:	jmp    41e722 <flatcc_json_parser_generic_json@@Base+0x192>
  41eebc:	lea    rax,[rsi+0x1]
  41eec0:	cmp    r15,rax
  41eec3:	je     41ed00 <flatcc_json_parser_generic_json@@Base+0x770>
  41eec9:	movzx  edx,BYTE PTR [rsi+0x1]
  41eecd:	lea    ecx,[rdx-0x30]
  41eed0:	cmp    cl,0x9
  41eed3:	ja     41eeef <flatcc_json_parser_generic_json@@Base+0x95f>
  41eed5:	nop    DWORD PTR [rax]
  41eed8:	inc    rax
  41eedb:	cmp    r15,rax
  41eede:	je     41ed00 <flatcc_json_parser_generic_json@@Base+0x770>
  41eee4:	movzx  edx,BYTE PTR [rax]
  41eee7:	lea    ecx,[rdx-0x30]
  41eeea:	cmp    cl,0x9
  41eeed:	jbe    41eed8 <flatcc_json_parser_generic_json@@Base+0x948>
  41eeef:	cmp    dl,0x20
  41eef2:	je     41e78c <flatcc_json_parser_generic_json@@Base+0x1fc>
  41eef8:	jle    41ef78 <flatcc_json_parser_generic_json@@Base+0x9e8>
  41eefa:	cmp    dl,0x3a
  41eefd:	je     41e78c <flatcc_json_parser_generic_json@@Base+0x1fc>
  41ef03:	jle    41ef6a <flatcc_json_parser_generic_json@@Base+0x9da>
  41ef05:	cmp    dl,0x5d
  41ef08:	je     41e78c <flatcc_json_parser_generic_json@@Base+0x1fc>
  41ef0e:	cmp    dl,0x7d
  41ef11:	jne    41ed00 <flatcc_json_parser_generic_json@@Base+0x770>
  41ef17:	jmp    41e78c <flatcc_json_parser_generic_json@@Base+0x1fc>
  41ef1c:	add    r10,0x2
  41ef20:	jmp    41e65e <flatcc_json_parser_generic_json@@Base+0xce>
  41ef25:	add    r10,0x2
  41ef29:	jmp    41e9fe <flatcc_json_parser_generic_json@@Base+0x46e>
  41ef2e:	cmp    BYTE PTR [rsi+0x1],0x20
  41ef32:	jle    41ebd9 <flatcc_json_parser_generic_json@@Base+0x649>
  41ef38:	inc    rsi
  41ef3b:	jmp    41ebe7 <flatcc_json_parser_generic_json@@Base+0x657>
  41ef40:	movzx  edx,BYTE PTR [rsi+0x2]
  41ef44:	cmp    dl,0x20
  41ef47:	jle    41ec18 <flatcc_json_parser_generic_json@@Base+0x688>
  41ef4d:	lea    r10,[rsi+0x2]
  41ef51:	jmp    41ec2c <flatcc_json_parser_generic_json@@Base+0x69c>
  41ef56:	cmp    BYTE PTR [r10+0x2],0x20
  41ef5b:	jle    41e924 <flatcc_json_parser_generic_json@@Base+0x394>
  41ef61:	lea    rax,[r10+0x2]
  41ef65:	jmp    41e780 <flatcc_json_parser_generic_json@@Base+0x1f0>
  41ef6a:	cmp    dl,0x2c
  41ef6d:	jne    41ed00 <flatcc_json_parser_generic_json@@Base+0x770>
  41ef73:	jmp    41e78c <flatcc_json_parser_generic_json@@Base+0x1fc>
  41ef78:	cmp    dl,0x9
  41ef7b:	jl     41ed00 <flatcc_json_parser_generic_json@@Base+0x770>
  41ef81:	cmp    dl,0xb
  41ef84:	jle    41e78c <flatcc_json_parser_generic_json@@Base+0x1fc>
  41ef8a:	cmp    dl,0xd
  41ef8d:	jne    41ed00 <flatcc_json_parser_generic_json@@Base+0x770>
  41ef93:	jmp    41e78c <flatcc_json_parser_generic_json@@Base+0x1fc>
  41ef98:	cmp    dl,0x2e
  41ef9b:	jne    41ebc2 <flatcc_json_parser_generic_json@@Base+0x632>
  41efa1:	mov    rsi,rdi
  41efa4:	mov    ecx,0x5
  41efa9:	mov    rdx,r15
  41efac:	mov    rdi,rbx
  41efaf:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41efb4:	mov    rsi,rax
  41efb7:	jmp    41ebc2 <flatcc_json_parser_generic_json@@Base+0x632>
  41efbc:	lea    rsi,[rax+0x1]
  41efc0:	mov    ecx,0x6
  41efc5:	mov    rdx,r15
  41efc8:	mov    rdi,rbx
  41efcb:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41efd0:	jmp    41e722 <flatcc_json_parser_generic_json@@Base+0x192>
  41efd5:	mov    rsi,r10
  41efd8:	jmp    41ebc2 <flatcc_json_parser_generic_json@@Base+0x632>
  41efdd:	mov    rsi,r15
  41efe0:	jmp    41ebc2 <flatcc_json_parser_generic_json@@Base+0x632>
  41efe5:	mov    ecx,0x4
  41efea:	mov    rdx,r15
  41efed:	mov    rdi,rbx
  41eff0:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41eff5:	jmp    41e688 <flatcc_json_parser_generic_json@@Base+0xf8>
  41effa:	mov    ecx,0xa
  41efff:	mov    rdx,r15
  41f002:	mov    rsi,r15
  41f005:	mov    rdi,rbx
  41f008:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41f00d:	jmp    41e688 <flatcc_json_parser_generic_json@@Base+0xf8>
  41f012:	call   4061a0 <__stack_chk_fail@plt>
  41f017:	mov    rbp,r14
  41f01a:	jmp    41e890 <flatcc_json_parser_generic_json@@Base+0x300>
  41f01f:	nop

000000000041f020 <flatcc_json_parser_unmatched_symbol@@Base>:
  41f020:	endbr64 
  41f024:	push   rbp
  41f025:	mov    rbp,rdi
  41f028:	push   rbx
  41f029:	mov    rbx,rdx
  41f02c:	sub    rsp,0x8
  41f030:	test   BYTE PTR [rdi+0x10],0x1
  41f034:	je     41f160 <flatcc_json_parser_unmatched_symbol@@Base+0x140>
  41f03a:	mov    eax,DWORD PTR [rdi+0x14]
  41f03d:	test   eax,eax
  41f03f:	je     41f0f8 <flatcc_json_parser_unmatched_symbol@@Base+0xd8>
  41f045:	cmp    rsi,rdx
  41f048:	je     41f0c2 <flatcc_json_parser_unmatched_symbol@@Base+0xa2>
  41f04a:	movzx  edx,BYTE PTR [rsi]
  41f04d:	cmp    dl,0x20
  41f050:	jle    41f0ab <flatcc_json_parser_unmatched_symbol@@Base+0x8b>
  41f052:	mov    rcx,rsi
  41f055:	lea    eax,[rdx-0x2e]
  41f058:	movabs r8,0x2000000000ffd
  41f062:	mov    rsi,rcx
  41f065:	cmp    al,0x31
  41f067:	ja     41f09b <flatcc_json_parser_unmatched_symbol@@Base+0x7b>
  41f069:	bt     r8,rax
  41f06d:	jae    41f09b <flatcc_json_parser_unmatched_symbol@@Base+0x7b>
  41f06f:	lea    rax,[rcx+0x1]
  41f073:	mov    rsi,rax
  41f076:	cmp    rbx,rax
  41f079:	je     41f1f8 <flatcc_json_parser_unmatched_symbol@@Base+0x1d8>
  41f07f:	movzx  edi,BYTE PTR [rax]
  41f082:	mov    rcx,rax
  41f085:	cmp    dil,0x20
  41f089:	jle    41f1f8 <flatcc_json_parser_unmatched_symbol@@Base+0x1d8>
  41f08f:	mov    edx,edi
  41f091:	lea    eax,[rdx-0x2e]
  41f094:	mov    rsi,rcx
  41f097:	cmp    al,0x31
  41f099:	jbe    41f069 <flatcc_json_parser_unmatched_symbol@@Base+0x49>
  41f09b:	mov    eax,edx
  41f09d:	or     eax,0x20
  41f0a0:	sub    eax,0x61
  41f0a3:	cmp    al,0x19
  41f0a5:	jbe    41f180 <flatcc_json_parser_unmatched_symbol@@Base+0x160>
  41f0ab:	mov    rax,rbx
  41f0ae:	sub    rax,rsi
  41f0b1:	cmp    rax,0x1
  41f0b5:	jle    41f0c2 <flatcc_json_parser_unmatched_symbol@@Base+0xa2>
  41f0b7:	cmp    BYTE PTR [rsi],0x20
  41f0ba:	jg     41f0d0 <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
  41f0bc:	je     41f1d0 <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
  41f0c2:	mov    rdx,rbx
  41f0c5:	mov    rdi,rbp
  41f0c8:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41f0cd:	mov    rsi,rax
  41f0d0:	cmp    rbx,rsi
  41f0d3:	je     41f0de <flatcc_json_parser_unmatched_symbol@@Base+0xbe>
  41f0d5:	cmp    BYTE PTR [rsi],0x3a
  41f0d8:	je     41f190 <flatcc_json_parser_unmatched_symbol@@Base+0x170>
  41f0de:	mov    ecx,0x4
  41f0e3:	add    rsp,0x8
  41f0e7:	mov    rdx,rbx
  41f0ea:	pop    rbx
  41f0eb:	mov    rdi,rbp
  41f0ee:	pop    rbp
  41f0ef:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  41f0f4:	nop    DWORD PTR [rax+0x0]
  41f0f8:	cmp    rsi,rdx
  41f0fb:	je     41f148 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
  41f0fd:	movzx  edx,BYTE PTR [rsi]
  41f100:	cmp    dl,0x22
  41f103:	jne    41f122 <flatcc_json_parser_unmatched_symbol@@Base+0x102>
  41f105:	jmp    41f178 <flatcc_json_parser_unmatched_symbol@@Base+0x158>
  41f107:	nop    WORD PTR [rax+rax*1+0x0]
  41f110:	lea    rsi,[rax+0x1]
  41f114:	cmp    rbx,rsi
  41f117:	je     41f148 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
  41f119:	movzx  edx,BYTE PTR [rax+0x1]
  41f11d:	cmp    dl,0x22
  41f120:	je     41f178 <flatcc_json_parser_unmatched_symbol@@Base+0x158>
  41f122:	mov    rax,rsi
  41f125:	cmp    dl,0x5c
  41f128:	jne    41f110 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
  41f12a:	mov    rdx,rbx
  41f12d:	sub    rdx,rsi
  41f130:	cmp    rdx,0x1
  41f134:	jle    41f170 <flatcc_json_parser_unmatched_symbol@@Base+0x150>
  41f136:	inc    rax
  41f139:	lea    rsi,[rax+0x1]
  41f13d:	cmp    rbx,rsi
  41f140:	jne    41f119 <flatcc_json_parser_unmatched_symbol@@Base+0xf9>
  41f142:	nop    WORD PTR [rax+rax*1+0x0]
  41f148:	mov    ecx,0x14
  41f14d:	mov    rdx,rbx
  41f150:	mov    rdi,rbp
  41f153:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41f158:	mov    rsi,rax
  41f15b:	jmp    41f0ab <flatcc_json_parser_unmatched_symbol@@Base+0x8b>
  41f160:	mov    ecx,0xd
  41f165:	jmp    41f0e3 <flatcc_json_parser_unmatched_symbol@@Base+0xc3>
  41f16a:	nop    WORD PTR [rax+rax*1+0x0]
  41f170:	cmp    BYTE PTR [rsi],0x22
  41f173:	jne    41f148 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
  41f175:	nop    DWORD PTR [rax]
  41f178:	inc    rsi
  41f17b:	jmp    41f0ab <flatcc_json_parser_unmatched_symbol@@Base+0x8b>
  41f180:	lea    rax,[rcx+0x1]
  41f184:	mov    rsi,rax
  41f187:	jmp    41f076 <flatcc_json_parser_unmatched_symbol@@Base+0x56>
  41f18c:	nop    DWORD PTR [rax+0x0]
  41f190:	lea    rax,[rsi+0x1]
  41f194:	mov    rdx,rbx
  41f197:	sub    rdx,rax
  41f19a:	cmp    rdx,0x1
  41f19e:	jle    41f1a8 <flatcc_json_parser_unmatched_symbol@@Base+0x188>
  41f1a0:	cmp    BYTE PTR [rsi+0x1],0x20
  41f1a4:	jg     41f1b6 <flatcc_json_parser_unmatched_symbol@@Base+0x196>
  41f1a6:	je     41f1e8 <flatcc_json_parser_unmatched_symbol@@Base+0x1c8>
  41f1a8:	mov    rdx,rbx
  41f1ab:	mov    rsi,rax
  41f1ae:	mov    rdi,rbp
  41f1b1:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  41f1b6:	add    rsp,0x8
  41f1ba:	mov    rdx,rbx
  41f1bd:	pop    rbx
  41f1be:	mov    rdi,rbp
  41f1c1:	mov    rsi,rax
  41f1c4:	pop    rbp
  41f1c5:	jmp    41e590 <flatcc_json_parser_generic_json@@Base>
  41f1ca:	nop    WORD PTR [rax+rax*1+0x0]
  41f1d0:	cmp    BYTE PTR [rsi+0x1],0x20
  41f1d4:	jle    41f0c2 <flatcc_json_parser_unmatched_symbol@@Base+0xa2>
  41f1da:	inc    rsi
  41f1dd:	jmp    41f0d0 <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
  41f1e2:	nop    WORD PTR [rax+rax*1+0x0]
  41f1e8:	cmp    BYTE PTR [rsi+0x2],0x20
  41f1ec:	jle    41f1a8 <flatcc_json_parser_unmatched_symbol@@Base+0x188>
  41f1ee:	lea    rax,[rsi+0x2]
  41f1f2:	jmp    41f1b6 <flatcc_json_parser_unmatched_symbol@@Base+0x196>
  41f1f4:	nop    DWORD PTR [rax+0x0]
  41f1f8:	cmp    dl,0x2e
  41f1fb:	jne    41f0ab <flatcc_json_parser_unmatched_symbol@@Base+0x8b>
  41f201:	mov    rsi,rax
  41f204:	mov    ecx,0x5
  41f209:	mov    rdx,rbx
  41f20c:	mov    rdi,rbp
  41f20f:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41f214:	mov    rsi,rax
  41f217:	jmp    41f0ab <flatcc_json_parser_unmatched_symbol@@Base+0x8b>
  41f21c:	nop    DWORD PTR [rax+0x0]

000000000041f220 <flatcc_json_parser_integer@@Base>:
  41f220:	endbr64 
  41f224:	cmp    rsi,rdx
  41f227:	je     41f2c0 <flatcc_json_parser_integer@@Base+0xa0>
  41f22d:	cmp    BYTE PTR [rsi],0x2d
  41f230:	sete   al
  41f233:	movzx  r9d,al
  41f237:	movzx  eax,al
  41f23a:	add    rax,rsi
  41f23d:	mov    DWORD PTR [rcx],r9d
  41f240:	cmp    rdx,rax
  41f243:	je     41f2da <flatcc_json_parser_integer@@Base+0xba>
  41f249:	movsx  r9,BYTE PTR [rax]
  41f24d:	lea    ecx,[r9-0x30]
  41f251:	cmp    cl,0x9
  41f254:	ja     41f2d5 <flatcc_json_parser_integer@@Base+0xb5>
  41f256:	sub    r9,0x30
  41f25a:	jmp    41f271 <flatcc_json_parser_integer@@Base+0x51>
  41f25c:	nop    DWORD PTR [rax+0x0]
  41f260:	lea    r10,[r9+r9*4]
  41f264:	lea    rcx,[rcx+r10*2-0x30]
  41f269:	cmp    rcx,r9
  41f26c:	jb     41f2b0 <flatcc_json_parser_integer@@Base+0x90>
  41f26e:	mov    r9,rcx
  41f271:	inc    rax
  41f274:	cmp    rdx,rax
  41f277:	je     41f29f <flatcc_json_parser_integer@@Base+0x7f>
  41f279:	movsx  rcx,BYTE PTR [rax]
  41f27d:	lea    r10d,[rcx-0x30]
  41f281:	cmp    r10b,0x9
  41f285:	jbe    41f260 <flatcc_json_parser_integer@@Base+0x40>
  41f287:	cmp    rsi,rax
  41f28a:	je     41f2a8 <flatcc_json_parser_integer@@Base+0x88>
  41f28c:	movzx  ecx,BYTE PTR [rax]
  41f28f:	mov    esi,ecx
  41f291:	and    esi,0xffffffdf
  41f294:	cmp    sil,0x45
  41f298:	je     41f2c8 <flatcc_json_parser_integer@@Base+0xa8>
  41f29a:	cmp    cl,0x2e
  41f29d:	je     41f2c8 <flatcc_json_parser_integer@@Base+0xa8>
  41f29f:	mov    QWORD PTR [r8],r9
  41f2a2:	ret    
  41f2a3:	nop    DWORD PTR [rax+rax*1+0x0]
  41f2a8:	ret    
  41f2a9:	nop    DWORD PTR [rax+0x0]
  41f2b0:	mov    ecx,0x8
  41f2b5:	mov    rsi,rax
  41f2b8:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  41f2bd:	nop    DWORD PTR [rax]
  41f2c0:	mov    rax,rsi
  41f2c3:	ret    
  41f2c4:	nop    DWORD PTR [rax+0x0]
  41f2c8:	mov    ecx,0xc
  41f2cd:	mov    rsi,rax
  41f2d0:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  41f2d5:	xor    r9d,r9d
  41f2d8:	jmp    41f287 <flatcc_json_parser_integer@@Base+0x67>
  41f2da:	xor    r9d,r9d
  41f2dd:	jmp    41f29f <flatcc_json_parser_integer@@Base+0x7f>
  41f2df:	nop

000000000041f2e0 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
  41f2e0:	endbr64 
  41f2e4:	push   r15
  41f2e6:	push   r14
  41f2e8:	mov    r14d,r8d
  41f2eb:	push   r13
  41f2ed:	mov    r13,rcx
  41f2f0:	push   r12
  41f2f2:	push   rbp
  41f2f3:	mov    rbp,rdi
  41f2f6:	push   rbx
  41f2f7:	mov    rbx,rdx
  41f2fa:	sub    rsp,0x38
  41f2fe:	mov    rax,QWORD PTR fs:0x28
  41f307:	mov    QWORD PTR [rsp+0x28],rax
  41f30c:	xor    eax,eax
  41f30e:	cmp    rsi,rdx
  41f311:	je     41f4c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e8>
  41f317:	cmp    BYTE PTR [rsi],0x22
  41f31a:	lea    r12,[rsi+0x1]
  41f31e:	jne    41f4c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e8>
  41f324:	mov    rdx,rbx
  41f327:	mov    rsi,r12
  41f32a:	mov    rdi,rbp
  41f32d:	call   41d670 <flatcc_json_parser_string_part@@Base>
  41f332:	mov    r8,rax
  41f335:	cmp    rbx,rax
  41f338:	je     41f480 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a0>
  41f33e:	cmp    BYTE PTR [rax],0x22
  41f341:	jne    41f480 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a0>
  41f347:	mov    r15,rax
  41f34a:	sub    r15,r12
  41f34d:	mov    rax,r15
  41f350:	mov    rdx,r15
  41f353:	shr    rdx,0x2
  41f357:	and    eax,0x3
  41f35a:	mov    QWORD PTR [rsp+0x10],r15
  41f35f:	lea    r9,[rdx+rdx*2]
  41f363:	cmp    rax,0x2
  41f367:	je     41f508 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x228>
  41f36d:	lea    rdx,[r9+0x2]
  41f371:	cmp    rax,0x3
  41f375:	cmove  r9,rdx
  41f379:	mov    rdi,QWORD PTR [rbp+0x0]
  41f37d:	mov    ecx,0xffffffff
  41f382:	mov    edx,0x1
  41f387:	mov    esi,0x1
  41f38c:	mov    QWORD PTR [rsp],r8
  41f390:	mov    QWORD PTR [rsp+0x8],r9
  41f395:	call   418340 <flatcc_builder_start_vector@@Base>
  41f39a:	test   eax,eax
  41f39c:	mov    r8,QWORD PTR [rsp]
  41f3a0:	jne    41f4e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  41f3a6:	mov    r9,QWORD PTR [rsp+0x8]
  41f3ab:	mov    rdi,QWORD PTR [rbp+0x0]
  41f3af:	mov    rsi,r9
  41f3b2:	call   417c90 <flatcc_builder_extend_vector@@Base>
  41f3b7:	test   rax,rax
  41f3ba:	mov    r8,QWORD PTR [rsp]
  41f3be:	je     41f4e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  41f3c4:	mov    r9,QWORD PTR [rsp+0x8]
  41f3c9:	test   r14d,r14d
  41f3cc:	lea    rcx,[rip+0x124ed]        # 4318c0 <flatcc_builder_padding_base@@Base+0xea0>
  41f3d3:	lea    rdx,[rip+0x125e6]        # 4319c0 <flatcc_builder_padding_base@@Base+0xfa0>
  41f3da:	cmovne rdx,rcx
  41f3de:	mov    rsi,0xffffffffffffffff
  41f3e5:	test   r9,r9
  41f3e8:	cmovne rsi,r9
  41f3ec:	mov    QWORD PTR [rsp],r15
  41f3f0:	mov    QWORD PTR [rsp+0x8],rax
  41f3f5:	mov    rcx,r12
  41f3f8:	lea    r11,[rax+rsi*1]
  41f3fc:	mov    rdi,r11
  41f3ff:	sub    rdi,QWORD PTR [rsp+0x8]
  41f404:	cmp    QWORD PTR [rsp],0x0
  41f409:	mov    QWORD PTR [rsp+0x18],rdi
  41f40e:	je     41f784 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4a4>
  41f414:	mov    r10,QWORD PTR [rsp]
  41f418:	xor    esi,esi
  41f41a:	movzx  edi,BYTE PTR [rcx+rsi*1]
  41f41e:	movzx  edi,BYTE PTR [rdx+rdi*1]
  41f422:	mov    BYTE PTR [rsp+rsi*1+0x24],dil
  41f427:	cmp    dil,0x3f
  41f42b:	jbe    41f510 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
  41f431:	cmp    dil,0x41
  41f435:	je     41f530 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
  41f43b:	mov    r11,rsi
  41f43e:	cmp    dil,0x42
  41f442:	je     41f540 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x260>
  41f448:	mov    rdx,r10
  41f44b:	sub    rdx,r11
  41f44e:	cmp    rsi,0x2
  41f452:	je     41f670 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
  41f458:	cmp    rsi,0x3
  41f45c:	je     41f580 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a0>
  41f462:	mov    rcx,r15
  41f465:	sub    rcx,QWORD PTR [rsp]
  41f469:	test   rsi,rsi
  41f46c:	je     41f6b0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3d0>
  41f472:	lea    r8,[r12+rcx*1]
  41f476:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41f480:	mov    DWORD PTR [r13+0x0],0x0
  41f488:	xor    ecx,ecx
  41f48a:	test   r14d,r14d
  41f48d:	setne  cl
  41f490:	add    ecx,0x1f
  41f493:	mov    rax,QWORD PTR [rsp+0x28]
  41f498:	xor    rax,QWORD PTR fs:0x28
  41f4a1:	jne    41f78c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  41f4a7:	add    rsp,0x38
  41f4ab:	mov    rdx,rbx
  41f4ae:	pop    rbx
  41f4af:	mov    rdi,rbp
  41f4b2:	pop    rbp
  41f4b3:	pop    r12
  41f4b5:	pop    r13
  41f4b7:	pop    r14
  41f4b9:	mov    rsi,r8
  41f4bc:	pop    r15
  41f4be:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  41f4c3:	nop    DWORD PTR [rax+rax*1+0x0]
  41f4c8:	mov    ecx,0x10
  41f4cd:	mov    rdx,rbx
  41f4d0:	mov    rdi,rbp
  41f4d3:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41f4d8:	mov    r12,rax
  41f4db:	jmp    41f324 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
  41f4e0:	mov    DWORD PTR [r13+0x0],0x0
  41f4e8:	mov    rax,QWORD PTR [rsp+0x28]
  41f4ed:	xor    rax,QWORD PTR fs:0x28
  41f4f6:	jne    41f78c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  41f4fc:	mov    ecx,0x21
  41f501:	jmp    41f4a7 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c7>
  41f503:	nop    DWORD PTR [rax+rax*1+0x0]
  41f508:	inc    r9
  41f50b:	jmp    41f379 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x99>
  41f510:	inc    rsi
  41f513:	cmp    rsi,0x3
  41f517:	ja     41f6f7 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x417>
  41f51d:	cmp    r10,rsi
  41f520:	jne    41f41a <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13a>
  41f526:	xor    edx,edx
  41f528:	jmp    41f44e <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16e>
  41f52d:	nop    DWORD PTR [rax]
  41f530:	inc    rcx
  41f533:	dec    r10
  41f536:	jmp    41f513 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x233>
  41f538:	nop    DWORD PTR [rax+rax*1+0x0]
  41f540:	lea    r11,[rsi+0x1]
  41f544:	cmp    r11,r10
  41f547:	jb     41f55c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x27c>
  41f549:	jmp    41f448 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  41f54e:	xchg   ax,ax
  41f550:	inc    r11
  41f553:	cmp    r11,r10
  41f556:	jae    41f448 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  41f55c:	cmp    r11,0x7
  41f560:	ja     41f448 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  41f566:	movzx  edi,BYTE PTR [rcx+r11*1]
  41f56b:	movzx  edi,BYTE PTR [rdx+rdi*1]
  41f56f:	sub    edi,0x41
  41f572:	cmp    dil,0x1
  41f576:	jbe    41f550 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x270>
  41f578:	jmp    41f448 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
  41f57d:	nop    DWORD PTR [rax]
  41f580:	movzx  ecx,BYTE PTR [rsp+0x26]
  41f585:	mov    esi,ecx
  41f587:	shl    esi,0x6
  41f58a:	and    esi,0xc0
  41f590:	jne    41f6a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  41f596:	cmp    QWORD PTR [rsp+0x18],0x1
  41f59c:	je     41f6a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  41f5a2:	movzx  esi,BYTE PTR [rsp+0x25]
  41f5a7:	movzx  edi,BYTE PTR [rsp+0x24]
  41f5ac:	mov    r10,QWORD PTR [rsp+0x8]
  41f5b1:	lea    r11d,[rdi*4+0x0]
  41f5b9:	mov    edi,esi
  41f5bb:	shr    dil,0x4
  41f5bf:	or     edi,r11d
  41f5c2:	shl    esi,0x4
  41f5c5:	shr    cl,0x2
  41f5c8:	mov    BYTE PTR [r10],dil
  41f5cb:	or     ecx,esi
  41f5cd:	mov    BYTE PTR [r10+0x1],cl
  41f5d1:	lea    rcx,[r10+0x2]
  41f5d5:	sub    rcx,rax
  41f5d8:	mov    rax,rcx
  41f5db:	mov    rcx,r15
  41f5de:	sub    rcx,rdx
  41f5e1:	mov    QWORD PTR [rsp+0x10],rcx
  41f5e6:	mov    rdx,rcx
  41f5e9:	cmp    r15,rdx
  41f5ec:	je     41f600 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
  41f5ee:	mov    r8,QWORD PTR [rsp+0x10]
  41f5f3:	add    r8,r12
  41f5f6:	jmp    41f480 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a0>
  41f5fb:	nop    DWORD PTR [rax+rax*1+0x0]
  41f600:	mov    rdi,QWORD PTR [rbp+0x0]
  41f604:	cmp    r9,rax
  41f607:	jbe    41f628 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
  41f609:	mov    rsi,r9
  41f60c:	sub    rsi,rax
  41f60f:	mov    QWORD PTR [rsp],r8
  41f613:	call   4181a0 <flatcc_builder_truncate_vector@@Base>
  41f618:	test   eax,eax
  41f61a:	mov    r8,QWORD PTR [rsp]
  41f61e:	jne    41f4e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  41f624:	mov    rdi,QWORD PTR [rbp+0x0]
  41f628:	mov    QWORD PTR [rsp],r8
  41f62c:	call   419200 <flatcc_builder_end_vector@@Base>
  41f631:	test   eax,eax
  41f633:	mov    DWORD PTR [r13+0x0],eax
  41f637:	mov    r8,QWORD PTR [rsp]
  41f63b:	je     41f4e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
  41f641:	cmp    BYTE PTR [r8],0x22
  41f645:	je     41f6d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f0>
  41f64b:	mov    rax,QWORD PTR [rsp+0x28]
  41f650:	xor    rax,QWORD PTR fs:0x28
  41f659:	jne    41f78c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  41f65f:	mov    ecx,0x14
  41f664:	jmp    41f4a7 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c7>
  41f669:	nop    DWORD PTR [rax+0x0]
  41f670:	movzx  ecx,BYTE PTR [rsp+0x25]
  41f675:	mov    esi,ecx
  41f677:	shl    esi,0x4
  41f67a:	and    esi,0xf0
  41f680:	jne    41f6a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  41f682:	movzx  esi,BYTE PTR [rsp+0x24]
  41f687:	mov    rdi,QWORD PTR [rsp+0x8]
  41f68c:	shl    esi,0x2
  41f68f:	shr    cl,0x4
  41f692:	or     ecx,esi
  41f694:	mov    BYTE PTR [rdi],cl
  41f696:	lea    rcx,[rdi+0x1]
  41f69a:	jmp    41f5d5 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f5>
  41f69f:	nop
  41f6a0:	mov    rcx,r15
  41f6a3:	sub    rcx,QWORD PTR [rsp]
  41f6a7:	jmp    41f472 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x192>
  41f6ac:	nop    DWORD PTR [rax+0x0]
  41f6b0:	mov    rcx,r15
  41f6b3:	sub    rcx,rdx
  41f6b6:	mov    QWORD PTR [rsp+0x10],rcx
  41f6bb:	mov    rdx,rcx
  41f6be:	mov    rcx,QWORD PTR [rsp+0x8]
  41f6c3:	sub    rcx,rax
  41f6c6:	mov    rax,rcx
  41f6c9:	jmp    41f5e9 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x309>
  41f6ce:	xchg   ax,ax
  41f6d0:	mov    rbx,QWORD PTR [rsp+0x28]
  41f6d5:	xor    rbx,QWORD PTR fs:0x28
  41f6de:	lea    rax,[r8+0x1]
  41f6e2:	jne    41f78c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4ac>
  41f6e8:	add    rsp,0x38
  41f6ec:	pop    rbx
  41f6ed:	pop    rbp
  41f6ee:	pop    r12
  41f6f0:	pop    r13
  41f6f2:	pop    r14
  41f6f4:	pop    r15
  41f6f6:	ret    
  41f6f7:	cmp    QWORD PTR [rsp+0x18],0x2
  41f6fd:	jbe    41f6a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
  41f6ff:	movzx  edi,BYTE PTR [rsp+0x24]
  41f704:	movzx  esi,BYTE PTR [rsp+0x25]
  41f709:	shl    edi,0x2
  41f70c:	shr    sil,0x4
  41f710:	or     esi,edi
  41f712:	mov    rdi,QWORD PTR [rsp+0x8]
  41f717:	add    rcx,0x4
  41f71b:	mov    BYTE PTR [rdi],sil
  41f71e:	movzx  esi,BYTE PTR [rsp+0x25]
  41f723:	movzx  edi,BYTE PTR [rsp+0x26]
  41f728:	shl    esi,0x4
  41f72b:	shr    dil,0x2
  41f72f:	or     esi,edi
  41f731:	mov    rdi,QWORD PTR [rsp+0x8]
  41f736:	mov    BYTE PTR [rdi+0x1],sil
  41f73a:	movzx  esi,BYTE PTR [rsp+0x26]
  41f73f:	add    rdi,0x3
  41f743:	shl    esi,0x6
  41f746:	or     sil,BYTE PTR [rsp+0x27]
  41f74b:	mov    BYTE PTR [rdi-0x1],sil
  41f74f:	lea    rsi,[r10-0x4]
  41f753:	mov    QWORD PTR [rsp+0x8],rdi
  41f758:	mov    QWORD PTR [rsp],rsi
  41f75c:	cmp    rdi,r11
  41f75f:	jne    41f3fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
  41f765:	mov    rcx,QWORD PTR [rsp+0x8]
  41f76a:	sub    rcx,rax
  41f76d:	mov    rax,rcx
  41f770:	mov    rcx,r15
  41f773:	sub    rcx,QWORD PTR [rsp]
  41f777:	mov    QWORD PTR [rsp+0x10],rcx
  41f77c:	mov    rdx,rcx
  41f77f:	jmp    41f5e9 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x309>
  41f784:	mov    rdx,r15
  41f787:	jmp    41f6be <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3de>
  41f78c:	call   4061a0 <__stack_chk_fail@plt>
  41f791:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41f79c:	nop    DWORD PTR [rax+0x0]

000000000041f7a0 <flatcc_json_parser_build_string@@Base>:
  41f7a0:	endbr64 
  41f7a4:	push   r15
  41f7a6:	mov    r15,rcx
  41f7a9:	push   r14
  41f7ab:	push   r13
  41f7ad:	push   r12
  41f7af:	push   rbp
  41f7b0:	mov    rbp,rdx
  41f7b3:	push   rbx
  41f7b4:	mov    rbx,rdi
  41f7b7:	sub    rsp,0x28
  41f7bb:	mov    rax,QWORD PTR fs:0x28
  41f7c4:	mov    QWORD PTR [rsp+0x18],rax
  41f7c9:	xor    eax,eax
  41f7cb:	cmp    rsi,rdx
  41f7ce:	je     41f838 <flatcc_json_parser_build_string@@Base+0x98>
  41f7d0:	cmp    BYTE PTR [rsi],0x22
  41f7d3:	lea    r12,[rsi+0x1]
  41f7d7:	jne    41f838 <flatcc_json_parser_build_string@@Base+0x98>
  41f7d9:	mov    rdi,rbx
  41f7dc:	mov    rdx,rbp
  41f7df:	mov    rsi,r12
  41f7e2:	call   41d670 <flatcc_json_parser_string_part@@Base>
  41f7e7:	mov    r14,rax
  41f7ea:	mov    rdi,QWORD PTR [rbx]
  41f7ed:	cmp    rbp,rax
  41f7f0:	je     41f7fb <flatcc_json_parser_build_string@@Base+0x5b>
  41f7f2:	cmp    BYTE PTR [rax],0x22
  41f7f5:	je     41f920 <flatcc_json_parser_build_string@@Base+0x180>
  41f7fb:	call   418420 <flatcc_builder_start_string@@Base>
  41f800:	test   eax,eax
  41f802:	je     41f850 <flatcc_json_parser_build_string@@Base+0xb0>
  41f804:	mov    DWORD PTR [r15],0x0
  41f80b:	mov    rcx,QWORD PTR [rsp+0x18]
  41f810:	xor    rcx,QWORD PTR fs:0x28
  41f819:	mov    rax,r14
  41f81c:	jne    41f958 <flatcc_json_parser_build_string@@Base+0x1b8>
  41f822:	add    rsp,0x28
  41f826:	pop    rbx
  41f827:	pop    rbp
  41f828:	pop    r12
  41f82a:	pop    r13
  41f82c:	pop    r14
  41f82e:	pop    r15
  41f830:	ret    
  41f831:	nop    DWORD PTR [rax+0x0]
  41f838:	mov    ecx,0x10
  41f83d:	mov    rdx,rbp
  41f840:	mov    rdi,rbx
  41f843:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41f848:	mov    r12,rax
  41f84b:	jmp    41f7d9 <flatcc_json_parser_build_string@@Base+0x39>
  41f84d:	nop    DWORD PTR [rax]
  41f850:	mov    rdx,r14
  41f853:	mov    rdi,QWORD PTR [rbx]
  41f856:	sub    rdx,r12
  41f859:	mov    rsi,r12
  41f85c:	call   418090 <flatcc_builder_append_string@@Base>
  41f861:	test   rax,rax
  41f864:	je     41f804 <flatcc_json_parser_build_string@@Base+0x64>
  41f866:	cmp    rbp,r14
  41f869:	je     41f8f6 <flatcc_json_parser_build_string@@Base+0x156>
  41f86f:	cmp    BYTE PTR [r14],0x22
  41f873:	je     41f940 <flatcc_json_parser_build_string@@Base+0x1a0>
  41f879:	lea    r13,[rsp+0x14]
  41f87e:	lea    rax,[r13+0x1]
  41f882:	mov    QWORD PTR [rsp+0x8],rax
  41f887:	jmp    41f8b4 <flatcc_json_parser_build_string@@Base+0x114>
  41f889:	nop    DWORD PTR [rax+0x0]
  41f890:	mov    rdx,rax
  41f893:	mov    rdi,QWORD PTR [rbx]
  41f896:	sub    rdx,r12
  41f899:	mov    rsi,r12
  41f89c:	call   418090 <flatcc_builder_append_string@@Base>
  41f8a1:	test   rax,rax
  41f8a4:	je     41f804 <flatcc_json_parser_build_string@@Base+0x64>
  41f8aa:	cmp    BYTE PTR [r14],0x22
  41f8ae:	je     41f940 <flatcc_json_parser_build_string@@Base+0x1a0>
  41f8b4:	mov    rdx,rbp
  41f8b7:	mov    rsi,r14
  41f8ba:	mov    rdi,rbx
  41f8bd:	mov    rcx,r13
  41f8c0:	call   41ddf0 <flatcc_json_parser_string_escape@@Base>
  41f8c5:	movsx  rdx,BYTE PTR [rsp+0x14]
  41f8cb:	mov    rsi,QWORD PTR [rsp+0x8]
  41f8d0:	mov    rdi,QWORD PTR [rbx]
  41f8d3:	mov    r12,rax
  41f8d6:	call   418090 <flatcc_builder_append_string@@Base>
  41f8db:	test   rax,rax
  41f8de:	je     41f950 <flatcc_json_parser_build_string@@Base+0x1b0>
  41f8e0:	mov    rdx,rbp
  41f8e3:	mov    rsi,r12
  41f8e6:	mov    rdi,rbx
  41f8e9:	call   41d670 <flatcc_json_parser_string_part@@Base>
  41f8ee:	mov    r14,rax
  41f8f1:	cmp    rbp,rax
  41f8f4:	jne    41f890 <flatcc_json_parser_build_string@@Base+0xf0>
  41f8f6:	mov    rdi,QWORD PTR [rbx]
  41f8f9:	mov    r14,rbp
  41f8fc:	call   419cc0 <flatcc_builder_end_string@@Base>
  41f901:	mov    DWORD PTR [r15],eax
  41f904:	mov    rsi,r14
  41f907:	mov    ecx,0x14
  41f90c:	mov    rdx,rbp
  41f90f:	mov    rdi,rbx
  41f912:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41f917:	mov    r14,rax
  41f91a:	jmp    41f80b <flatcc_json_parser_build_string@@Base+0x6b>
  41f91f:	nop
  41f920:	mov    rdx,rax
  41f923:	sub    rdx,r12
  41f926:	mov    rsi,r12
  41f929:	call   419b30 <flatcc_builder_create_string@@Base>
  41f92e:	mov    DWORD PTR [r15],eax
  41f931:	cmp    BYTE PTR [r14],0x22
  41f935:	jne    41f904 <flatcc_json_parser_build_string@@Base+0x164>
  41f937:	inc    r14
  41f93a:	jmp    41f80b <flatcc_json_parser_build_string@@Base+0x6b>
  41f93f:	nop
  41f940:	mov    rdi,QWORD PTR [rbx]
  41f943:	call   419cc0 <flatcc_builder_end_string@@Base>
  41f948:	mov    DWORD PTR [r15],eax
  41f94b:	jmp    41f931 <flatcc_json_parser_build_string@@Base+0x191>
  41f94d:	nop    DWORD PTR [rax]
  41f950:	mov    r14,r12
  41f953:	jmp    41f804 <flatcc_json_parser_build_string@@Base+0x64>
  41f958:	call   4061a0 <__stack_chk_fail@plt>
  41f95d:	nop    DWORD PTR [rax]

000000000041f960 <flatcc_json_parser_prepare_unions@@Base>:
  41f960:	endbr64 
  41f964:	push   r14
  41f966:	lea    rax,[rcx+rcx*4]
  41f96a:	mov    r14,rdx
  41f96d:	push   r13
  41f96f:	mov    r13,r8
  41f972:	push   r12
  41f974:	mov    r12,rsi
  41f977:	lea    rsi,[rax*8+0x10]
  41f97f:	push   rbp
  41f980:	mov    rbp,rdi
  41f983:	push   rbx
  41f984:	mov    rbx,rcx
  41f987:	mov    rdi,QWORD PTR [rdi]
  41f98a:	call   4171f0 <flatcc_builder_enter_user_frame@@Base>
  41f98f:	mov    QWORD PTR [r13+0x0],rax
  41f993:	test   rax,rax
  41f996:	je     41f9b8 <flatcc_json_parser_prepare_unions@@Base+0x58>
  41f998:	mov    rdi,QWORD PTR [rbp+0x0]
  41f99c:	mov    rsi,rax
  41f99f:	call   417320 <flatcc_builder_get_user_frame_ptr@@Base>
  41f9a4:	mov    QWORD PTR [rax],rbx
  41f9a7:	mov    rax,r12
  41f9aa:	pop    rbx
  41f9ab:	pop    rbp
  41f9ac:	pop    r12
  41f9ae:	pop    r13
  41f9b0:	pop    r14
  41f9b2:	ret    
  41f9b3:	nop    DWORD PTR [rax+rax*1+0x0]
  41f9b8:	pop    rbx
  41f9b9:	mov    rdi,rbp
  41f9bc:	pop    rbp
  41f9bd:	mov    rsi,r12
  41f9c0:	pop    r12
  41f9c2:	pop    r13
  41f9c4:	mov    rdx,r14
  41f9c7:	mov    ecx,0x21
  41f9cc:	pop    r14
  41f9ce:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  41f9d3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41f9de:	xchg   ax,ax

000000000041f9e0 <flatcc_json_parser_finalize_unions@@Base>:
  41f9e0:	endbr64 
  41f9e4:	push   r13
  41f9e6:	mov    r13,rdx
  41f9e9:	push   r12
  41f9eb:	mov    r12,rsi
  41f9ee:	mov    rsi,rcx
  41f9f1:	push   rbp
  41f9f2:	mov    rbp,rcx
  41f9f5:	push   rbx
  41f9f6:	mov    rbx,rdi
  41f9f9:	sub    rsp,0x8
  41f9fd:	mov    rdi,QWORD PTR [rdi]
  41fa00:	call   417320 <flatcc_builder_get_user_frame_ptr@@Base>
  41fa05:	cmp    QWORD PTR [rax+0x8],0x0
  41fa0a:	jne    41fa28 <flatcc_json_parser_finalize_unions@@Base+0x48>
  41fa0c:	mov    rdi,QWORD PTR [rbx]
  41fa0f:	mov    rsi,rbp
  41fa12:	call   4172d0 <flatcc_builder_exit_user_frame_at@@Base>
  41fa17:	add    rsp,0x8
  41fa1b:	pop    rbx
  41fa1c:	pop    rbp
  41fa1d:	mov    rax,r12
  41fa20:	pop    r12
  41fa22:	pop    r13
  41fa24:	ret    
  41fa25:	nop    DWORD PTR [rax]
  41fa28:	mov    rsi,r12
  41fa2b:	mov    ecx,0x1b
  41fa30:	mov    rdx,r13
  41fa33:	mov    rdi,rbx
  41fa36:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41fa3b:	mov    r12,rax
  41fa3e:	jmp    41fa0c <flatcc_json_parser_finalize_unions@@Base+0x2c>

000000000041fa40 <flatcc_json_parser_union@@Base>:
  41fa40:	endbr64 
  41fa44:	push   r15
  41fa46:	mov    r15,rcx
  41fa49:	push   r14
  41fa4b:	mov    r14d,r8d
  41fa4e:	push   r13
  41fa50:	push   r12
  41fa52:	mov    r12,rsi
  41fa55:	mov    rsi,r9
  41fa58:	push   rbp
  41fa59:	mov    rbp,rdx
  41fa5c:	push   rbx
  41fa5d:	mov    rbx,rdi
  41fa60:	sub    rsp,0x18
  41fa64:	mov    rdi,QWORD PTR [rdi]
  41fa67:	mov    rax,QWORD PTR fs:0x28
  41fa70:	mov    QWORD PTR [rsp+0x8],rax
  41fa75:	xor    eax,eax
  41fa77:	mov    r13,QWORD PTR [rsp+0x50]
  41fa7c:	call   417320 <flatcc_builder_get_user_frame_ptr@@Base>
  41fa81:	lea    rdx,[r15+r15*4]
  41fa85:	lea    rdx,[rax+rdx*8]
  41fa89:	cmp    QWORD PTR [rdx+0x10],0x0
  41fa8e:	jne    41fae0 <flatcc_json_parser_union@@Base+0xa0>
  41fa90:	cmp    BYTE PTR [rdx+0x24],0x0
  41fa94:	je     41fb00 <flatcc_json_parser_union@@Base+0xc0>
  41fa96:	movzx  ecx,BYTE PTR [rdx+0x25]
  41fa9a:	mov    BYTE PTR [rsp],cl
  41fa9d:	test   cl,cl
  41fa9f:	je     41fb50 <flatcc_json_parser_union@@Base+0x110>
  41faa5:	dec    QWORD PTR [rax+0x8]
  41faa9:	mov    rsi,r12
  41faac:	lea    r8,[rsp+0x4]
  41fab1:	mov    rdx,rbp
  41fab4:	mov    rdi,rbx
  41fab7:	call   r13
  41faba:	mov    r12,rax
  41fabd:	cmp    rbp,rax
  41fac0:	je     41fb27 <flatcc_json_parser_union@@Base+0xe7>
  41fac2:	mov    rdx,QWORD PTR [rsp]
  41fac6:	mov    rdi,QWORD PTR [rbx]
  41fac9:	movzx  esi,r14w
  41facd:	call   41a0f0 <flatcc_builder_table_add_union@@Base>
  41fad2:	test   eax,eax
  41fad4:	je     41fb27 <flatcc_json_parser_union@@Base+0xe7>
  41fad6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41fae0:	mov    ecx,0x1c
  41fae5:	mov    rsi,r12
  41fae8:	mov    rdx,rbp
  41faeb:	mov    rdi,rbx
  41faee:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41faf3:	mov    r12,rax
  41faf6:	jmp    41fb27 <flatcc_json_parser_union@@Base+0xe7>
  41faf8:	nop    DWORD PTR [rax+rax*1+0x0]
  41fb00:	inc    QWORD PTR [rax+0x8]
  41fb04:	mov    eax,DWORD PTR [rbx+0x18]
  41fb07:	mov    rsi,r12
  41fb0a:	mov    DWORD PTR [rdx+0x20],eax
  41fb0d:	mov    rax,QWORD PTR [rbx+0x8]
  41fb11:	mov    QWORD PTR [rdx+0x10],r12
  41fb15:	mov    QWORD PTR [rdx+0x18],rax
  41fb19:	mov    rdi,rbx
  41fb1c:	mov    rdx,rbp
  41fb1f:	call   41e590 <flatcc_json_parser_generic_json@@Base>
  41fb24:	mov    r12,rax
  41fb27:	mov    rsi,QWORD PTR [rsp+0x8]
  41fb2c:	xor    rsi,QWORD PTR fs:0x28
  41fb35:	mov    rax,r12
  41fb38:	jne    41fb57 <flatcc_json_parser_union@@Base+0x117>
  41fb3a:	add    rsp,0x18
  41fb3e:	pop    rbx
  41fb3f:	pop    rbp
  41fb40:	pop    r12
  41fb42:	pop    r13
  41fb44:	pop    r14
  41fb46:	pop    r15
  41fb48:	ret    
  41fb49:	nop    DWORD PTR [rax+0x0]
  41fb50:	mov    ecx,0x19
  41fb55:	jmp    41fae5 <flatcc_json_parser_union@@Base+0xa5>
  41fb57:	call   4061a0 <__stack_chk_fail@plt>
  41fb5c:	nop    DWORD PTR [rax+0x0]

000000000041fb60 <flatcc_json_parser_union_type@@Base>:
  41fb60:	endbr64 
  41fb64:	push   r15
  41fb66:	push   r14
  41fb68:	mov    r14,rcx
  41fb6b:	push   r13
  41fb6d:	push   r12
  41fb6f:	mov    r12,rsi
  41fb72:	mov    rsi,r9
  41fb75:	push   rbp
  41fb76:	mov    rbp,rdx
  41fb79:	push   rbx
  41fb7a:	mov    rbx,rdi
  41fb7d:	sub    rsp,0x48
  41fb81:	mov    rax,QWORD PTR [rsp+0x80]
  41fb89:	mov    DWORD PTR [rsp+0xc],r8d
  41fb8e:	mov    QWORD PTR [rsp+0x10],rax
  41fb93:	mov    rdi,QWORD PTR [rdi]
  41fb96:	mov    r13,QWORD PTR [rsp+0x88]
  41fb9e:	mov    rax,QWORD PTR fs:0x28
  41fba7:	mov    QWORD PTR [rsp+0x38],rax
  41fbac:	xor    eax,eax
  41fbae:	call   417320 <flatcc_builder_get_user_frame_ptr@@Base>
  41fbb3:	mov    r15,rax
  41fbb6:	lea    rax,[r14+r14*4]
  41fbba:	lea    r9,[r15+rax*8+0x10]
  41fbbf:	cmp    BYTE PTR [r9+0x14],0x0
  41fbc4:	jne    41fcf0 <flatcc_json_parser_union_type@@Base+0x190>
  41fbca:	mov    edx,0x1
  41fbcf:	mov    QWORD PTR [rsp+0x30],0x0
  41fbd8:	mov    DWORD PTR [rsp+0x2c],0x0
  41fbe0:	mov    WORD PTR [r9+0x14],dx
  41fbe5:	cmp    r12,rbp
  41fbe8:	je     41fce0 <flatcc_json_parser_union_type@@Base+0x180>
  41fbee:	lea    rcx,[rsp+0x2c]
  41fbf3:	lea    r8,[rsp+0x30]
  41fbf8:	mov    rdx,rbp
  41fbfb:	mov    rsi,r12
  41fbfe:	mov    rdi,rbx
  41fc01:	mov    QWORD PTR [rsp+0x18],r9
  41fc06:	call   41f220 <flatcc_json_parser_integer@@Base>
  41fc0b:	cmp    r12,rax
  41fc0e:	mov    r14,rax
  41fc11:	mov    r9,QWORD PTR [rsp+0x18]
  41fc16:	jne    41fd10 <flatcc_json_parser_union_type@@Base+0x1b0>
  41fc1c:	mov    rcx,QWORD PTR [rsp+0x10]
  41fc21:	lea    r8,[r9+0x15]
  41fc25:	mov    rsi,r14
  41fc28:	mov    rdx,rbp
  41fc2b:	mov    rdi,rbx
  41fc2e:	mov    QWORD PTR [rsp+0x18],r9
  41fc33:	call   41d7a0 <flatcc_json_parser_space_ext@@Base+0xe0>
  41fc38:	mov    r9,QWORD PTR [rsp+0x18]
  41fc3d:	mov    r14,rax
  41fc40:	mov    rsi,QWORD PTR [r9]
  41fc43:	mov    rax,QWORD PTR [r15+0x8]
  41fc47:	test   rsi,rsi
  41fc4a:	je     41fd40 <flatcc_json_parser_union_type@@Base+0x1e0>
  41fc50:	test   rax,rax
  41fc53:	je     41fdc3 <flatcc_json_parser_union_type@@Base+0x263>
  41fc59:	dec    rax
  41fc5c:	mov    QWORD PTR [r15+0x8],rax
  41fc60:	mov    eax,DWORD PTR [r9+0x10]
  41fc64:	mov    r15d,DWORD PTR [rbx+0x18]
  41fc68:	mov    DWORD PTR [rbx+0x18],eax
  41fc6b:	mov    rax,QWORD PTR [r9+0x8]
  41fc6f:	mov    r12,QWORD PTR [rbx+0x8]
  41fc73:	mov    QWORD PTR [rbx+0x8],rax
  41fc77:	lea    r8,[rsp+0x34]
  41fc7c:	mov    rdx,rbp
  41fc7f:	movzx  ecx,BYTE PTR [r9+0x15]
  41fc84:	mov    rdi,rbx
  41fc87:	mov    BYTE PTR [rsp+0x30],cl
  41fc8b:	call   r13
  41fc8e:	cmp    rax,rbp
  41fc91:	je     41fd60 <flatcc_json_parser_union_type@@Base+0x200>
  41fc97:	mov    rdx,QWORD PTR [rsp+0x30]
  41fc9c:	movzx  esi,WORD PTR [rsp+0xc]
  41fca1:	mov    rdi,QWORD PTR [rbx]
  41fca4:	call   41a0f0 <flatcc_builder_table_add_union@@Base>
  41fca9:	test   eax,eax
  41fcab:	jne    41fd70 <flatcc_json_parser_union_type@@Base+0x210>
  41fcb1:	mov    DWORD PTR [rbx+0x18],r15d
  41fcb5:	mov    QWORD PTR [rbx+0x8],r12
  41fcb9:	mov    rdx,QWORD PTR [rsp+0x38]
  41fcbe:	xor    rdx,QWORD PTR fs:0x28
  41fcc7:	mov    rax,r14
  41fcca:	jne    41fdbe <flatcc_json_parser_union_type@@Base+0x25e>
  41fcd0:	add    rsp,0x48
  41fcd4:	pop    rbx
  41fcd5:	pop    rbp
  41fcd6:	pop    r12
  41fcd8:	pop    r13
  41fcda:	pop    r14
  41fcdc:	pop    r15
  41fcde:	ret    
  41fcdf:	nop
  41fce0:	mov    r14,rbp
  41fce3:	jmp    41fc1c <flatcc_json_parser_union_type@@Base+0xbc>
  41fce8:	nop    DWORD PTR [rax+rax*1+0x0]
  41fcf0:	mov    ecx,0x1c
  41fcf5:	mov    rdx,rbp
  41fcf8:	mov    rsi,r12
  41fcfb:	mov    rdi,rbx
  41fcfe:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41fd03:	mov    r14,rax
  41fd06:	jmp    41fcb9 <flatcc_json_parser_union_type@@Base+0x159>
  41fd08:	nop    DWORD PTR [rax+rax*1+0x0]
  41fd10:	mov    eax,DWORD PTR [rsp+0x2c]
  41fd14:	mov    ecx,0x8
  41fd19:	test   eax,eax
  41fd1b:	jne    41fd9a <flatcc_json_parser_union_type@@Base+0x23a>
  41fd1d:	mov    rax,QWORD PTR [rsp+0x30]
  41fd22:	cmp    rax,0xff
  41fd28:	ja     41fd90 <flatcc_json_parser_union_type@@Base+0x230>
  41fd2a:	mov    BYTE PTR [r9+0x15],al
  41fd2e:	mov    rsi,QWORD PTR [r9]
  41fd31:	mov    rax,QWORD PTR [r15+0x8]
  41fd35:	test   rsi,rsi
  41fd38:	jne    41fc50 <flatcc_json_parser_union_type@@Base+0xf0>
  41fd3e:	xchg   ax,ax
  41fd40:	xor    edx,edx
  41fd42:	cmp    BYTE PTR [r9+0x15],0x0
  41fd47:	setne  dl
  41fd4a:	add    rax,rdx
  41fd4d:	mov    QWORD PTR [r15+0x8],rax
  41fd51:	jmp    41fcb9 <flatcc_json_parser_union_type@@Base+0x159>
  41fd56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41fd60:	mov    r14,rbp
  41fd63:	jmp    41fcb9 <flatcc_json_parser_union_type@@Base+0x159>
  41fd68:	nop    DWORD PTR [rax+rax*1+0x0]
  41fd70:	mov    rsi,r14
  41fd73:	mov    ecx,0x1c
  41fd78:	mov    rdx,rbp
  41fd7b:	mov    rdi,rbx
  41fd7e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41fd83:	mov    r14,rax
  41fd86:	jmp    41fcb9 <flatcc_json_parser_union_type@@Base+0x159>
  41fd8b:	nop    DWORD PTR [rax+rax*1+0x0]
  41fd90:	mov    QWORD PTR [rsp+0x18],r9
  41fd95:	mov    ecx,0x7
  41fd9a:	mov    rsi,r14
  41fd9d:	mov    rdx,rbp
  41fda0:	mov    rdi,rbx
  41fda3:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41fda8:	mov    r14,rax
  41fdab:	mov    r9,QWORD PTR [rsp+0x18]
  41fdb0:	cmp    r12,rax
  41fdb3:	jne    41fc40 <flatcc_json_parser_union_type@@Base+0xe0>
  41fdb9:	jmp    41fc1c <flatcc_json_parser_union_type@@Base+0xbc>
  41fdbe:	call   4061a0 <__stack_chk_fail@plt>
  41fdc3:	lea    rcx,[rip+0x11ac6]        # 431890 <flatcc_builder_padding_base@@Base+0xe70>
  41fdca:	mov    edx,0x3c5
  41fdcf:	lea    rsi,[rip+0x114fa]        # 4312d0 <flatcc_builder_padding_base@@Base+0x8b0>
  41fdd6:	lea    rdi,[rip+0x117b5]        # 431592 <flatcc_builder_padding_base@@Base+0xb72>
  41fddd:	call   4061b0 <__assert_fail@plt>
  41fde2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  41fded:	nop    DWORD PTR [rax]

000000000041fdf0 <flatcc_json_parser_union_vector@@Base>:
  41fdf0:	endbr64 
  41fdf4:	push   r15
  41fdf6:	mov    r15,rsi
  41fdf9:	mov    rsi,r9
  41fdfc:	push   r14
  41fdfe:	mov    r14d,r8d
  41fe01:	push   r13
  41fe03:	push   r12
  41fe05:	mov    r12,rdx
  41fe08:	push   rbp
  41fe09:	mov    rbp,rcx
  41fe0c:	push   rbx
  41fe0d:	mov    rbx,rdi
  41fe10:	sub    rsp,0x8
  41fe14:	mov    rdi,QWORD PTR [rdi]
  41fe17:	mov    r13,QWORD PTR [rsp+0x40]
  41fe1c:	call   417320 <flatcc_builder_get_user_frame_ptr@@Base>
  41fe21:	lea    rdx,[rbp+rbp*4+0x0]
  41fe26:	lea    rcx,[rax+rdx*8+0x10]
  41fe2b:	cmp    QWORD PTR [rcx],0x0
  41fe2f:	jne    41fea8 <flatcc_json_parser_union_vector@@Base+0xb8>
  41fe31:	cmp    BYTE PTR [rcx+0x14],0x0
  41fe35:	mov    rdx,QWORD PTR [rax+0x8]
  41fe39:	jne    41fe70 <flatcc_json_parser_union_vector@@Base+0x80>
  41fe3b:	inc    rdx
  41fe3e:	mov    QWORD PTR [rax+0x8],rdx
  41fe42:	mov    eax,DWORD PTR [rbx+0x18]
  41fe45:	mov    rdi,rbx
  41fe48:	mov    DWORD PTR [rcx+0x10],eax
  41fe4b:	mov    rax,QWORD PTR [rbx+0x8]
  41fe4f:	mov    QWORD PTR [rcx],r15
  41fe52:	mov    QWORD PTR [rcx+0x8],rax
  41fe56:	add    rsp,0x8
  41fe5a:	mov    rdx,r12
  41fe5d:	pop    rbx
  41fe5e:	pop    rbp
  41fe5f:	pop    r12
  41fe61:	pop    r13
  41fe63:	pop    r14
  41fe65:	mov    rsi,r15
  41fe68:	pop    r15
  41fe6a:	jmp    41e590 <flatcc_json_parser_generic_json@@Base>
  41fe6f:	nop
  41fe70:	dec    rdx
  41fe73:	mov    QWORD PTR [rax+0x8],rdx
  41fe77:	mov    r8d,DWORD PTR [rcx+0x18]
  41fe7b:	mov    rcx,QWORD PTR [rcx+0x20]
  41fe7f:	mov    QWORD PTR [rsp+0x40],r13
  41fe84:	add    rsp,0x8
  41fe88:	mov    rdi,rbx
  41fe8b:	pop    rbx
  41fe8c:	pop    rbp
  41fe8d:	mov    rdx,r12
  41fe90:	pop    r12
  41fe92:	pop    r13
  41fe94:	movzx  r9d,r14w
  41fe98:	pop    r14
  41fe9a:	mov    rsi,r15
  41fe9d:	pop    r15
  41fe9f:	jmp    41d9d0 <flatcc_json_parser_space_ext@@Base+0x310>
  41fea4:	nop    DWORD PTR [rax+0x0]
  41fea8:	add    rsp,0x8
  41feac:	mov    rdi,rbx
  41feaf:	pop    rbx
  41feb0:	pop    rbp
  41feb1:	mov    rdx,r12
  41feb4:	pop    r12
  41feb6:	pop    r13
  41feb8:	pop    r14
  41feba:	mov    rsi,r15
  41febd:	mov    ecx,0x1c
  41fec2:	pop    r15
  41fec4:	jmp    41d640 <flatcc_json_parser_set_error@@Base>
  41fec9:	nop    DWORD PTR [rax+0x0]

000000000041fed0 <flatcc_json_parser_union_type_vector@@Base>:
  41fed0:	endbr64 
  41fed4:	push   r15
  41fed6:	push   r14
  41fed8:	push   r13
  41feda:	mov    r13,rcx
  41fedd:	push   r12
  41fedf:	mov    r12,rsi
  41fee2:	mov    rsi,r9
  41fee5:	push   rbp
  41fee6:	mov    rbp,rdi
  41fee9:	push   rbx
  41feea:	mov    rbx,rdx
  41feed:	sub    rsp,0x78
  41fef1:	mov    rax,QWORD PTR [rsp+0xb0]
  41fef9:	mov    DWORD PTR [rsp+0x2c],r8d
  41fefe:	mov    QWORD PTR [rsp+0x18],rax
  41ff03:	mov    rax,QWORD PTR [rsp+0xb8]
  41ff0b:	mov    QWORD PTR [rsp+0x30],r9
  41ff10:	mov    QWORD PTR [rsp+0x40],rax
  41ff15:	mov    rdi,QWORD PTR [rdi]
  41ff18:	mov    r14,QWORD PTR [rsp+0xc0]
  41ff20:	mov    rax,QWORD PTR fs:0x28
  41ff29:	mov    QWORD PTR [rsp+0x68],rax
  41ff2e:	xor    eax,eax
  41ff30:	call   417320 <flatcc_builder_get_user_frame_ptr@@Base>
  41ff35:	lea    rdx,[r13+r13*4+0x0]
  41ff3a:	lea    rcx,[rdx*8+0x0]
  41ff42:	lea    rax,[rax+rcx*1+0x10]
  41ff47:	cmp    BYTE PTR [rax+0x14],0x0
  41ff4b:	mov    QWORD PTR [rsp+0x38],rcx
  41ff50:	mov    QWORD PTR [rsp+0x10],rax
  41ff55:	mov    ecx,0x1c
  41ff5a:	jne    41ff86 <flatcc_json_parser_union_type_vector@@Base+0xb6>
  41ff5c:	mov    rax,QWORD PTR [rsp+0x10]
  41ff61:	mov    ecx,0xffffffff
  41ff66:	mov    BYTE PTR [rax+0x14],0x1
  41ff6a:	mov    edx,0x1
  41ff6f:	mov    esi,0x1
  41ff74:	mov    rdi,QWORD PTR [rbp+0x0]
  41ff78:	call   418340 <flatcc_builder_start_vector@@Base>
  41ff7d:	test   eax,eax
  41ff7f:	je     41ffc0 <flatcc_json_parser_union_type_vector@@Base+0xf0>
  41ff81:	mov    ecx,0x21
  41ff86:	mov    rdx,rbx
  41ff89:	mov    rsi,r12
  41ff8c:	mov    rdi,rbp
  41ff8f:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41ff94:	mov    r15,rax
  41ff97:	mov    rcx,QWORD PTR [rsp+0x68]
  41ff9c:	xor    rcx,QWORD PTR fs:0x28
  41ffa5:	mov    rax,r15
  41ffa8:	jne    4204a7 <flatcc_json_parser_union_type_vector@@Base+0x5d7>
  41ffae:	add    rsp,0x78
  41ffb2:	pop    rbx
  41ffb3:	pop    rbp
  41ffb4:	pop    r12
  41ffb6:	pop    r13
  41ffb8:	pop    r14
  41ffba:	pop    r15
  41ffbc:	ret    
  41ffbd:	nop    DWORD PTR [rax]
  41ffc0:	cmp    r12,rbx
  41ffc3:	je     41ffd0 <flatcc_json_parser_union_type_vector@@Base+0x100>
  41ffc5:	cmp    BYTE PTR [r12],0x5b
  41ffca:	je     420108 <flatcc_json_parser_union_type_vector@@Base+0x238>
  41ffd0:	mov    ecx,0x16
  41ffd5:	mov    rdx,rbx
  41ffd8:	mov    rsi,r12
  41ffdb:	mov    rdi,rbp
  41ffde:	call   41d640 <flatcc_json_parser_set_error@@Base>
  41ffe3:	mov    r15,rax
  41ffe6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41fff0:	mov    rdi,QWORD PTR [rbp+0x0]
  41fff4:	call   4192f0 <flatcc_builder_vector_count@@Base>
  41fff9:	mov    r13,rax
  41fffc:	mov    rax,QWORD PTR [rsp+0x10]
  420001:	mov    edx,r13d
  420004:	mov    DWORD PTR [rax+0x18],r13d
  420008:	mov    rdi,QWORD PTR [rbp+0x0]
  42000c:	mov    rsi,rdx
  42000f:	mov    QWORD PTR [rsp],rdx
  420013:	call   4171f0 <flatcc_builder_enter_user_frame@@Base>
  420018:	mov    rdi,QWORD PTR [rbp+0x0]
  42001c:	mov    rsi,rax
  42001f:	mov    r14,rax
  420022:	call   417320 <flatcc_builder_get_user_frame_ptr@@Base>
  420027:	mov    rdi,QWORD PTR [rbp+0x0]
  42002b:	mov    r12,rax
  42002e:	call   419300 <flatcc_builder_vector_edit@@Base>
  420033:	mov    rdx,QWORD PTR [rsp]
  420037:	mov    rdi,r12
  42003a:	mov    rsi,rax
  42003d:	call   406210 <memcpy@plt>
  420042:	mov    rdi,QWORD PTR [rbp+0x0]
  420046:	mov    r12,r15
  420049:	call   419200 <flatcc_builder_end_vector@@Base>
  42004e:	test   eax,eax
  420050:	mov    DWORD PTR [rsp],eax
  420053:	je     41ff81 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  420059:	movzx  esi,WORD PTR [rsp+0x2c]
  42005e:	mov    rdi,QWORD PTR [rbp+0x0]
  420062:	dec    esi
  420064:	call   419fb0 <flatcc_builder_table_add_offset@@Base>
  420069:	test   rax,rax
  42006c:	je     41ff81 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  420072:	mov    edx,DWORD PTR [rsp]
  420075:	mov    rsi,QWORD PTR [rsp+0x30]
  42007a:	mov    DWORD PTR [rax],edx
  42007c:	mov    rdi,QWORD PTR [rbp+0x0]
  420080:	call   417320 <flatcc_builder_get_user_frame_ptr@@Base>
  420085:	mov    rdx,QWORD PTR [rsp+0x38]
  42008a:	lea    rdx,[rax+rdx*1+0x10]
  42008f:	mov    rsi,QWORD PTR [rdx]
  420092:	mov    QWORD PTR [rdx+0x20],r14
  420096:	test   rsi,rsi
  420099:	je     420496 <flatcc_json_parser_union_type_vector@@Base+0x5c6>
  42009f:	mov    rcx,QWORD PTR [rax+0x8]
  4200a3:	test   rcx,rcx
  4200a6:	je     4204ac <flatcc_json_parser_union_type_vector@@Base+0x5dc>
  4200ac:	dec    rcx
  4200af:	mov    QWORD PTR [rax+0x8],rcx
  4200b3:	mov    eax,DWORD PTR [rbp+0x18]
  4200b6:	sub    rsp,0x8
  4200ba:	mov    DWORD PTR [rsp+0x8],eax
  4200be:	mov    eax,DWORD PTR [rdx+0x10]
  4200c1:	mov    r12,QWORD PTR [rbp+0x8]
  4200c5:	mov    DWORD PTR [rbp+0x18],eax
  4200c8:	mov    rax,QWORD PTR [rdx+0x8]
  4200cc:	push   QWORD PTR [rsp+0x48]
  4200d0:	mov    QWORD PTR [rbp+0x8],rax
  4200d4:	mov    rcx,r14
  4200d7:	movzx  r9d,WORD PTR [rsp+0x3c]
  4200dd:	mov    rdx,rbx
  4200e0:	mov    r8d,r13d
  4200e3:	mov    rdi,rbp
  4200e6:	call   41d9d0 <flatcc_json_parser_space_ext@@Base+0x310>
  4200eb:	pop    rdx
  4200ec:	pop    rcx
  4200ed:	cmp    rax,rbx
  4200f0:	je     42049f <flatcc_json_parser_union_type_vector@@Base+0x5cf>
  4200f6:	mov    eax,DWORD PTR [rsp]
  4200f9:	mov    QWORD PTR [rbp+0x8],r12
  4200fd:	mov    DWORD PTR [rbp+0x18],eax
  420100:	jmp    41ff97 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  420105:	nop    DWORD PTR [rax]
  420108:	lea    rsi,[r12+0x1]
  42010d:	mov    rax,rbx
  420110:	sub    rax,rsi
  420113:	cmp    rax,0x1
  420117:	jle    420138 <flatcc_json_parser_union_type_vector@@Base+0x268>
  420119:	cmp    BYTE PTR [r12+0x1],0x20
  42011f:	jg     420486 <flatcc_json_parser_union_type_vector@@Base+0x5b6>
  420125:	jne    420138 <flatcc_json_parser_union_type_vector@@Base+0x268>
  420127:	cmp    BYTE PTR [r12+0x2],0x20
  42012d:	jle    420138 <flatcc_json_parser_union_type_vector@@Base+0x268>
  42012f:	add    r12,0x2
  420133:	jmp    420146 <flatcc_json_parser_union_type_vector@@Base+0x276>
  420135:	nop    DWORD PTR [rax]
  420138:	mov    rdx,rbx
  42013b:	mov    rdi,rbp
  42013e:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  420143:	mov    r12,rax
  420146:	cmp    rbx,r12
  420149:	je     420156 <flatcc_json_parser_union_type_vector@@Base+0x286>
  42014b:	cmp    BYTE PTR [r12],0x5d
  420150:	je     42037a <flatcc_json_parser_union_type_vector@@Base+0x4aa>
  420156:	lea    rax,[rsp+0x5b]
  42015b:	mov    QWORD PTR [rsp+0x48],rax
  420160:	lea    rax,[rsp+0x60]
  420165:	mov    QWORD PTR [rsp],rax
  420169:	lea    rax,[rsp+0x5c]
  42016e:	mov    QWORD PTR [rsp+0x8],rax
  420173:	nop    DWORD PTR [rax+rax*1+0x0]
  420178:	mov    rdi,QWORD PTR [rbp+0x0]
  42017c:	mov    esi,0x1
  420181:	call   417c90 <flatcc_builder_extend_vector@@Base>
  420186:	mov    r13,rax
  420189:	test   rax,rax
  42018c:	je     41ff81 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  420192:	mov    QWORD PTR [rsp+0x60],0x0
  42019b:	mov    DWORD PTR [rsp+0x5c],0x0
  4201a3:	mov    BYTE PTR [rsp+0x5b],0x0
  4201a8:	cmp    rbx,r12
  4201ab:	je     4202a0 <flatcc_json_parser_union_type_vector@@Base+0x3d0>
  4201b1:	mov    r8,QWORD PTR [rsp]
  4201b5:	mov    rcx,QWORD PTR [rsp+0x8]
  4201ba:	mov    rdx,rbx
  4201bd:	mov    rsi,r12
  4201c0:	mov    rdi,rbp
  4201c3:	call   41f220 <flatcc_json_parser_integer@@Base>
  4201c8:	mov    r9,rax
  4201cb:	cmp    r12,rax
  4201ce:	jne    4202b0 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
  4201d4:	mov    r8,QWORD PTR [rsp+0x48]
  4201d9:	mov    rcx,QWORD PTR [rsp+0x18]
  4201de:	mov    rsi,r9
  4201e1:	mov    rdx,rbx
  4201e4:	mov    rdi,rbp
  4201e7:	mov    QWORD PTR [rsp+0x20],r9
  4201ec:	call   41d7a0 <flatcc_json_parser_space_ext@@Base+0xe0>
  4201f1:	mov    r9,QWORD PTR [rsp+0x20]
  4201f6:	mov    r15,rax
  4201f9:	cmp    rax,r9
  4201fc:	je     42048e <flatcc_json_parser_union_type_vector@@Base+0x5be>
  420202:	cmp    rbx,rax
  420205:	je     42048e <flatcc_json_parser_union_type_vector@@Base+0x5be>
  42020b:	movzx  edi,BYTE PTR [rsp+0x5b]
  420210:	call   r14
  420213:	test   eax,eax
  420215:	jne    420290 <flatcc_json_parser_union_type_vector@@Base+0x3c0>
  420217:	test   BYTE PTR [rbp+0x10],0x1
  42021b:	je     420430 <flatcc_json_parser_union_type_vector@@Base+0x560>
  420221:	mov    BYTE PTR [rsp+0x5b],0x0
  420226:	xor    eax,eax
  420228:	mov    BYTE PTR [r13+0x0],al
  42022c:	mov    rax,rbx
  42022f:	sub    rax,r15
  420232:	cmp    rax,0x1
  420236:	jle    420244 <flatcc_json_parser_union_type_vector@@Base+0x374>
  420238:	cmp    BYTE PTR [r15],0x20
  42023c:	jg     420255 <flatcc_json_parser_union_type_vector@@Base+0x385>
  42023e:	je     420320 <flatcc_json_parser_union_type_vector@@Base+0x450>
  420244:	mov    rsi,r15
  420247:	mov    rdx,rbx
  42024a:	mov    rdi,rbp
  42024d:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  420252:	mov    r15,rax
  420255:	cmp    rbx,r15
  420258:	je     41fff0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  42025e:	movzx  eax,BYTE PTR [r15]
  420262:	cmp    al,0x2c
  420264:	je     420338 <flatcc_json_parser_union_type_vector@@Base+0x468>
  42026a:	cmp    al,0x5d
  42026c:	je     4202e8 <flatcc_json_parser_union_type_vector@@Base+0x418>
  42026e:	mov    rsi,r15
  420271:	mov    ecx,0x9
  420276:	mov    rdx,rbx
  420279:	mov    rdi,rbp
  42027c:	call   41d640 <flatcc_json_parser_set_error@@Base>
  420281:	mov    r15,rax
  420284:	jmp    41fff0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  420289:	nop    DWORD PTR [rax+0x0]
  420290:	movzx  eax,BYTE PTR [rsp+0x5b]
  420295:	jmp    420228 <flatcc_json_parser_union_type_vector@@Base+0x358>
  420297:	nop    WORD PTR [rax+rax*1+0x0]
  4202a0:	mov    r9,rbx
  4202a3:	jmp    4201d4 <flatcc_json_parser_union_type_vector@@Base+0x304>
  4202a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4202b0:	mov    esi,DWORD PTR [rsp+0x5c]
  4202b4:	mov    ecx,0x8
  4202b9:	test   esi,esi
  4202bb:	jne    4203c5 <flatcc_json_parser_union_type_vector@@Base+0x4f5>
  4202c1:	mov    rax,QWORD PTR [rsp+0x60]
  4202c6:	cmp    rax,0xff
  4202cc:	ja     4203c0 <flatcc_json_parser_union_type_vector@@Base+0x4f0>
  4202d2:	movzx  edi,al
  4202d5:	mov    BYTE PTR [rsp+0x5b],al
  4202d9:	mov    r15,r9
  4202dc:	jmp    420210 <flatcc_json_parser_union_type_vector@@Base+0x340>
  4202e1:	nop    DWORD PTR [rax+0x0]
  4202e8:	lea    rsi,[r15+0x1]
  4202ec:	mov    rax,rbx
  4202ef:	sub    rax,rsi
  4202f2:	cmp    rax,0x1
  4202f6:	jle    420309 <flatcc_json_parser_union_type_vector@@Base+0x439>
  4202f8:	cmp    BYTE PTR [r15+0x1],0x20
  4202fd:	jg     4203f0 <flatcc_json_parser_union_type_vector@@Base+0x520>
  420303:	je     420400 <flatcc_json_parser_union_type_vector@@Base+0x530>
  420309:	mov    rdx,rbx
  42030c:	mov    rdi,rbp
  42030f:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  420314:	mov    r15,rax
  420317:	jmp    41fff0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  42031c:	nop    DWORD PTR [rax+0x0]
  420320:	cmp    BYTE PTR [r15+0x1],0x20
  420325:	jle    420244 <flatcc_json_parser_union_type_vector@@Base+0x374>
  42032b:	inc    r15
  42032e:	jmp    420255 <flatcc_json_parser_union_type_vector@@Base+0x385>
  420333:	nop    DWORD PTR [rax+rax*1+0x0]
  420338:	lea    r12,[r15+0x1]
  42033c:	mov    rax,rbx
  42033f:	sub    rax,r12
  420342:	cmp    rax,0x1
  420346:	jle    420355 <flatcc_json_parser_union_type_vector@@Base+0x485>
  420348:	cmp    BYTE PTR [r15+0x1],0x20
  42034d:	jg     420366 <flatcc_json_parser_union_type_vector@@Base+0x496>
  42034f:	je     420418 <flatcc_json_parser_union_type_vector@@Base+0x548>
  420355:	mov    rsi,r12
  420358:	mov    rdx,rbx
  42035b:	mov    rdi,rbp
  42035e:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  420363:	mov    r12,rax
  420366:	cmp    rbx,r12
  420369:	je     420450 <flatcc_json_parser_union_type_vector@@Base+0x580>
  42036f:	cmp    BYTE PTR [r12],0x5d
  420374:	jne    420178 <flatcc_json_parser_union_type_vector@@Base+0x2a8>
  42037a:	lea    r15,[r12+0x1]
  42037f:	mov    rax,rbx
  420382:	sub    rax,r15
  420385:	cmp    rax,0x1
  420389:	jle    420470 <flatcc_json_parser_union_type_vector@@Base+0x5a0>
  42038f:	cmp    BYTE PTR [r12+0x1],0x20
  420395:	jg     41fff0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  42039b:	jne    420470 <flatcc_json_parser_union_type_vector@@Base+0x5a0>
  4203a1:	cmp    BYTE PTR [r12+0x2],0x20
  4203a7:	jle    420470 <flatcc_json_parser_union_type_vector@@Base+0x5a0>
  4203ad:	lea    r15,[r12+0x2]
  4203b2:	jmp    41fff0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  4203b7:	nop    WORD PTR [rax+rax*1+0x0]
  4203c0:	mov    ecx,0x7
  4203c5:	mov    rdx,rbx
  4203c8:	mov    rsi,r9
  4203cb:	mov    rdi,rbp
  4203ce:	call   41d640 <flatcc_json_parser_set_error@@Base>
  4203d3:	mov    r15,rax
  4203d6:	cmp    r12,rax
  4203d9:	jne    42020b <flatcc_json_parser_union_type_vector@@Base+0x33b>
  4203df:	mov    r9,r12
  4203e2:	jmp    4201d4 <flatcc_json_parser_union_type_vector@@Base+0x304>
  4203e7:	nop    WORD PTR [rax+rax*1+0x0]
  4203f0:	mov    r15,rsi
  4203f3:	jmp    41fff0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  4203f8:	nop    DWORD PTR [rax+rax*1+0x0]
  420400:	cmp    BYTE PTR [r15+0x2],0x20
  420405:	jle    420309 <flatcc_json_parser_union_type_vector@@Base+0x439>
  42040b:	add    r15,0x2
  42040f:	jmp    41fff0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  420414:	nop    DWORD PTR [rax+0x0]
  420418:	cmp    BYTE PTR [r15+0x2],0x20
  42041d:	jle    420355 <flatcc_json_parser_union_type_vector@@Base+0x485>
  420423:	lea    r12,[r15+0x2]
  420427:	jmp    420366 <flatcc_json_parser_union_type_vector@@Base+0x496>
  42042c:	nop    DWORD PTR [rax+0x0]
  420430:	mov    rsi,r15
  420433:	mov    ecx,0xf
  420438:	mov    rdx,rbx
  42043b:	mov    rdi,rbp
  42043e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  420443:	mov    r15,rax
  420446:	jmp    41ff97 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  42044b:	nop    DWORD PTR [rax+rax*1+0x0]
  420450:	mov    ecx,0x9
  420455:	mov    rdx,rbx
  420458:	mov    rsi,rbx
  42045b:	mov    rdi,rbp
  42045e:	call   41d640 <flatcc_json_parser_set_error@@Base>
  420463:	mov    r15,rax
  420466:	jmp    41fff0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  42046b:	nop    DWORD PTR [rax+rax*1+0x0]
  420470:	mov    rsi,r15
  420473:	mov    rdx,rbx
  420476:	mov    rdi,rbp
  420479:	call   41d6c0 <flatcc_json_parser_space_ext@@Base>
  42047e:	mov    r15,rax
  420481:	jmp    41fff0 <flatcc_json_parser_union_type_vector@@Base+0x120>
  420486:	mov    r12,rsi
  420489:	jmp    420146 <flatcc_json_parser_union_type_vector@@Base+0x276>
  42048e:	mov    r12,r15
  420491:	jmp    41ff81 <flatcc_json_parser_union_type_vector@@Base+0xb1>
  420496:	inc    QWORD PTR [rax+0x8]
  42049a:	jmp    41ff97 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  42049f:	mov    r15,rbx
  4204a2:	jmp    41ff97 <flatcc_json_parser_union_type_vector@@Base+0xc7>
  4204a7:	call   4061a0 <__stack_chk_fail@plt>
  4204ac:	lea    rcx,[rip+0x113ad]        # 431860 <flatcc_builder_padding_base@@Base+0xe40>
  4204b3:	mov    edx,0x462
  4204b8:	lea    rsi,[rip+0x10e11]        # 4312d0 <flatcc_builder_padding_base@@Base+0x8b0>
  4204bf:	lea    rdi,[rip+0x110cc]        # 431592 <flatcc_builder_padding_base@@Base+0xb72>
  4204c6:	call   4061b0 <__assert_fail@plt>
  4204cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004204d0 <flatcc_json_parser_table_as_root@@Base>:
  4204d0:	endbr64 
  4204d4:	push   r14
  4204d6:	vpxor  xmm0,xmm0,xmm0
  4204da:	push   r13
  4204dc:	mov    r13,rdi
  4204df:	push   r12
  4204e1:	push   rbp
  4204e2:	mov    rbp,rdx
  4204e5:	lea    r12,[rbp+rcx*1+0x0]
  4204ea:	push   rbx
  4204eb:	mov    rbx,rsi
  4204ee:	sub    rsp,0x60
  4204f2:	mov    rax,QWORD PTR fs:0x28
  4204fb:	mov    QWORD PTR [rsp+0x58],rax
  420500:	xor    eax,eax
  420502:	mov    eax,r8d
  420505:	sar    eax,1
  420507:	and    eax,0x2
  42050a:	lea    rdx,[rsp+0x10]
  42050f:	test   rsi,rsi
  420512:	cmove  rbx,rdx
  420516:	mov    ecx,eax
  420518:	vmovups XMMWORD PTR [rbx+0x24],xmm0
  42051d:	vmovups XMMWORD PTR [rbx+0x34],xmm0
  420522:	vmovups XMMWORD PTR [rbx+0x14],xmm0
  420527:	mov    DWORD PTR [rbx+0x44],0x0
  42052e:	mov    QWORD PTR [rbx],rdi
  420531:	mov    QWORD PTR [rbx+0x8],rbp
  420535:	mov    DWORD PTR [rbx+0x18],0x1
  42053c:	mov    DWORD PTR [rbx+0x10],r8d
  420540:	mov    QWORD PTR [rbx+0x28],rbp
  420544:	mov    QWORD PTR [rbx+0x30],r12
  420548:	mov    QWORD PTR [rbx+0x38],rbp
  42054c:	xor    edx,edx
  42054e:	mov    rsi,r9
  420551:	mov    r14,QWORD PTR [rsp+0x90]
  420559:	call   4178c0 <flatcc_builder_start_buffer@@Base>
  42055e:	test   eax,eax
  420560:	jne    4205c0 <flatcc_json_parser_table_as_root@@Base+0xf0>
  420562:	mov    rdx,r12
  420565:	lea    rcx,[rsp+0xc]
  42056a:	mov    rsi,rbp
  42056d:	mov    rdi,rbx
  420570:	call   r14
  420573:	mov    r12d,DWORD PTR [rbx+0x20]
  420577:	test   r12d,r12d
  42057a:	je     4205a0 <flatcc_json_parser_table_as_root@@Base+0xd0>
  42057c:	mov    rsi,QWORD PTR [rsp+0x58]
  420581:	xor    rsi,QWORD PTR fs:0x28
  42058a:	mov    eax,r12d
  42058d:	jne    4205c8 <flatcc_json_parser_table_as_root@@Base+0xf8>
  42058f:	add    rsp,0x60
  420593:	pop    rbx
  420594:	pop    rbp
  420595:	pop    r12
  420597:	pop    r13
  420599:	pop    r14
  42059b:	ret    
  42059c:	nop    DWORD PTR [rax+0x0]
  4205a0:	mov    esi,DWORD PTR [rsp+0xc]
  4205a4:	mov    rdi,r13
  4205a7:	call   4179a0 <flatcc_builder_end_buffer@@Base>
  4205ac:	test   eax,eax
  4205ae:	je     4205c0 <flatcc_json_parser_table_as_root@@Base+0xf0>
  4205b0:	mov    QWORD PTR [rbx+0x40],rbp
  4205b4:	jmp    42057c <flatcc_json_parser_table_as_root@@Base+0xac>
  4205b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4205c0:	mov    r12d,0xffffffff
  4205c6:	jmp    42057c <flatcc_json_parser_table_as_root@@Base+0xac>
  4205c8:	call   4061a0 <__stack_chk_fail@plt>
  4205cd:	nop    DWORD PTR [rax]

00000000004205d0 <flatcc_json_parser_struct_as_root@@Base>:
  4205d0:	endbr64 
  4205d4:	jmp    4204d0 <flatcc_json_parser_table_as_root@@Base>
  4205d9:	nop    DWORD PTR [rax+0x0]
  4205e0:	mov    ecx,edi
  4205e2:	cmp    di,0x3e7
  4205e7:	jbe    4206b0 <flatcc_json_parser_struct_as_root@@Base+0xe0>
  4205ed:	mov    r8d,0x64
  4205f3:	mov    eax,edi
  4205f5:	xor    edx,edx
  4205f7:	div    r8w
  4205fb:	mov    eax,edi
  4205fd:	shr    ax,0x2
  420601:	movzx  eax,ax
  420604:	imul   eax,eax,0x147b
  42060a:	lea    r8,[rip+0x124cf]        # 432ae0 <flatcc_builder_padding_base@@Base+0x20c0>
  420611:	shr    eax,0x11
  420614:	add    rdx,rdx
  420617:	and    edx,0xfe
  42061d:	lea    rcx,[r8+rdx*1]
  420621:	cmp    di,0x270f
  420626:	jbe    420680 <flatcc_json_parser_struct_as_root@@Base+0xb0>
  420628:	mov    BYTE PTR [rsi+0x5],0x0
  42062c:	lea    r9,[rsi+0x3]
  420630:	movzx  edx,WORD PTR [rcx]
  420633:	mov    WORD PTR [rsi+0x3],dx
  420637:	mov    esi,0x5
  42063c:	mov    edx,eax
  42063e:	shr    dx,0x2
  420642:	movzx  edx,dx
  420645:	imul   edx,edx,0x147b
  42064b:	mov    r10d,0x64
  420651:	lea    rdi,[r9-0x2]
  420655:	shr    edx,0x11
  420658:	mov    ecx,edx
  42065a:	mov    edx,eax
  42065c:	sar    dx,0xf
  420660:	idiv   r10w
  420664:	lea    rax,[rdx+rdx*1]
  420668:	and    eax,0x1fffe
  42066d:	movzx  eax,WORD PTR [r8+rax*1]
  420672:	mov    WORD PTR [r9-0x2],ax
  420677:	lea    eax,[rcx+0x30]
  42067a:	mov    BYTE PTR [rdi-0x1],al
  42067d:	mov    eax,esi
  42067f:	ret    
  420680:	mov    BYTE PTR [rsi+0x4],0x0
  420684:	lea    rdx,[rsi+0x2]
  420688:	movzx  ecx,WORD PTR [rcx]
  42068b:	mov    WORD PTR [rsi+0x2],cx
  42068f:	mov    esi,0x4
  420694:	add    rax,rax
  420697:	and    eax,0x1fffe
  42069c:	movzx  eax,WORD PTR [r8+rax*1]
  4206a1:	mov    WORD PTR [rdx-0x2],ax
  4206a5:	mov    eax,esi
  4206a7:	ret    
  4206a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4206b0:	cmp    di,0x63
  4206b4:	ja     4206d0 <flatcc_json_parser_struct_as_root@@Base+0x100>
  4206b6:	cmp    di,0x9
  4206ba:	ja     4206f0 <flatcc_json_parser_struct_as_root@@Base+0x120>
  4206bc:	lea    rdi,[rsi+0x1]
  4206c0:	mov    BYTE PTR [rsi+0x1],0x0
  4206c4:	mov    esi,0x1
  4206c9:	jmp    420677 <flatcc_json_parser_struct_as_root@@Base+0xa7>
  4206cb:	nop    DWORD PTR [rax+rax*1+0x0]
  4206d0:	lea    r9,[rsi+0x3]
  4206d4:	mov    BYTE PTR [rsi+0x3],0x0
  4206d8:	mov    eax,edi
  4206da:	mov    esi,0x3
  4206df:	lea    r8,[rip+0x123fa]        # 432ae0 <flatcc_builder_padding_base@@Base+0x20c0>
  4206e6:	jmp    42063c <flatcc_json_parser_struct_as_root@@Base+0x6c>
  4206eb:	nop    DWORD PTR [rax+rax*1+0x0]
  4206f0:	lea    rdx,[rsi+0x2]
  4206f4:	mov    BYTE PTR [rsi+0x2],0x0
  4206f8:	mov    eax,edi
  4206fa:	mov    esi,0x2
  4206ff:	lea    r8,[rip+0x123da]        # 432ae0 <flatcc_builder_padding_base@@Base+0x20c0>
  420706:	jmp    420694 <flatcc_json_parser_struct_as_root@@Base+0xc4>
  420708:	nop    DWORD PTR [rax+rax*1+0x0]
  420710:	cmp    edi,0x270f
  420716:	jbe    420810 <flatcc_json_parser_struct_as_root@@Base+0x240>
  42071c:	mov    r8d,0x51eb851f
  420722:	mov    eax,edi
  420724:	mul    r8d
  420727:	mov    r9d,edi
  42072a:	push   rbp
  42072b:	mov    ecx,edx
  42072d:	shr    ecx,0x5
  420730:	imul   eax,ecx,0x64
  420733:	lea    r10,[rip+0x123a6]        # 432ae0 <flatcc_builder_padding_base@@Base+0x20c0>
  42073a:	push   rbx
  42073b:	sub    r9d,eax
  42073e:	mov    eax,ecx
  420740:	mul    r8d
  420743:	mov    eax,edi
  420745:	add    r9d,r9d
  420748:	shr    edx,0x5
  42074b:	imul   edx,edx,0x64
  42074e:	add    r9,r10
  420751:	sub    ecx,edx
  420753:	mov    edx,0xd1b71759
  420758:	mul    edx
  42075a:	add    ecx,ecx
  42075c:	lea    r11,[r10+rcx*1]
  420760:	mov    ecx,edx
  420762:	shr    ecx,0xd
  420765:	cmp    edi,0x98967f
  42076b:	jbe    420890 <flatcc_json_parser_struct_as_root@@Base+0x2c0>
  420771:	mov    eax,ecx
  420773:	mul    r8d
  420776:	mov    eax,edi
  420778:	shr    edx,0x5
  42077b:	imul   edx,edx,0x64
  42077e:	sub    ecx,edx
  420780:	mov    edx,0x431bde83
  420785:	mul    edx
  420787:	lea    ebx,[rcx+rcx*1]
  42078a:	add    rbx,r10
  42078d:	mov    ecx,edx
  42078f:	shr    ecx,0x12
  420792:	cmp    edi,0x3b9ac9ff
  420798:	ja     420908 <flatcc_json_parser_struct_as_root@@Base+0x338>
  42079e:	cmp    edi,0x5f5e0ff
  4207a4:	jbe    420988 <flatcc_json_parser_struct_as_root@@Base+0x3b8>
  4207aa:	mov    BYTE PTR [rsi+0x9],0x0
  4207ae:	lea    rax,[rsi+0x7]
  4207b2:	movzx  edx,WORD PTR [r9]
  4207b6:	mov    r9,r11
  4207b9:	mov    WORD PTR [rsi+0x7],dx
  4207bd:	mov    r11,rbx
  4207c0:	mov    esi,0x9
  4207c5:	movzx  edx,WORD PTR [r9]
  4207c9:	mov    edi,0x51eb851f
  4207ce:	mov    WORD PTR [rax-0x2],dx
  4207d2:	lea    rbx,[rax-0x2]
  4207d6:	mov    eax,ecx
  4207d8:	mul    edi
  4207da:	mov    edi,edx
  4207dc:	shr    edi,0x5
  4207df:	imul   eax,edi,0x64
  4207e2:	sub    ecx,eax
  4207e4:	lea    r8d,[rcx+rcx*1]
  4207e8:	add    r8,r10
  4207eb:	movzx  edx,WORD PTR [r11]
  4207ef:	lea    rax,[rbx-0x2]
  4207f3:	mov    WORD PTR [rbx-0x2],dx
  4207f7:	add    edi,0x30
  4207fa:	lea    rdx,[rax-0x2]
  4207fe:	movzx  ecx,WORD PTR [r8]
  420802:	mov    WORD PTR [rax-0x2],cx
  420806:	mov    BYTE PTR [rdx-0x1],dil
  42080a:	mov    eax,esi
  42080c:	pop    rbx
  42080d:	pop    rbp
  42080e:	ret    
  42080f:	nop
  420810:	cmp    edi,0x63
  420813:	jbe    420870 <flatcc_json_parser_struct_as_root@@Base+0x2a0>
  420815:	mov    eax,edi
  420817:	mov    edx,0x51eb851f
  42081c:	mul    edx
  42081e:	mov    r8d,edi
  420821:	lea    r10,[rip+0x122b8]        # 432ae0 <flatcc_builder_padding_base@@Base+0x20c0>
  420828:	shr    edx,0x5
  42082b:	imul   eax,edx,0x64
  42082e:	mov    ecx,edx
  420830:	sub    r8d,eax
  420833:	add    r8d,r8d
  420836:	add    r8,r10
  420839:	cmp    edi,0x3e7
  42083f:	jbe    4208e8 <flatcc_json_parser_struct_as_root@@Base+0x318>
  420845:	mov    BYTE PTR [rsi+0x4],0x0
  420849:	lea    rax,[rsi+0x4]
  42084d:	lea    rdx,[rax-0x2]
  420851:	movzx  edi,WORD PTR [r8]
  420855:	mov    esi,0x4
  42085a:	mov    WORD PTR [rax-0x2],di
  42085e:	add    ecx,ecx
  420860:	movzx  eax,WORD PTR [r10+rcx*1]
  420865:	mov    WORD PTR [rdx-0x2],ax
  420869:	mov    eax,esi
  42086b:	ret    
  42086c:	nop    DWORD PTR [rax+0x0]
  420870:	cmp    edi,0x9
  420873:	ja     420968 <flatcc_json_parser_struct_as_root@@Base+0x398>
  420879:	lea    rdx,[rsi+0x1]
  42087d:	mov    BYTE PTR [rsi+0x1],0x0
  420881:	mov    esi,0x1
  420886:	add    edi,0x30
  420889:	mov    BYTE PTR [rdx-0x1],dil
  42088d:	mov    eax,esi
  42088f:	ret    
  420890:	cmp    edi,0xf423f
  420896:	ja     420950 <flatcc_json_parser_struct_as_root@@Base+0x380>
  42089c:	cmp    edi,0x1869f
  4208a2:	jbe    4209a0 <flatcc_json_parser_struct_as_root@@Base+0x3d0>
  4208a8:	lea    rdx,[rsi+0x6]
  4208ac:	mov    BYTE PTR [rsi+0x6],0x0
  4208b0:	mov    r8,r11
  4208b3:	mov    rbx,r9
  4208b6:	mov    esi,0x6
  4208bb:	movzx  edi,WORD PTR [rbx]
  4208be:	lea    rax,[rdx-0x2]
  4208c2:	mov    WORD PTR [rdx-0x2],di
  4208c6:	add    ecx,ecx
  4208c8:	lea    rdx,[rax-0x2]
  4208cc:	movzx  edi,WORD PTR [r8]
  4208d0:	mov    WORD PTR [rax-0x2],di
  4208d4:	movzx  eax,WORD PTR [r10+rcx*1]
  4208d9:	mov    WORD PTR [rdx-0x2],ax
  4208dd:	mov    eax,esi
  4208df:	pop    rbx
  4208e0:	pop    rbp
  4208e1:	ret    
  4208e2:	nop    WORD PTR [rax+rax*1+0x0]
  4208e8:	mov    BYTE PTR [rsi+0x3],0x0
  4208ec:	lea    rax,[rsi+0x3]
  4208f0:	mov    edi,edx
  4208f2:	movzx  ecx,WORD PTR [r8]
  4208f6:	mov    esi,0x3
  4208fb:	lea    rdx,[rax-0x2]
  4208ff:	mov    WORD PTR [rax-0x2],cx
  420903:	jmp    420886 <flatcc_json_parser_struct_as_root@@Base+0x2b6>
  420905:	nop    DWORD PTR [rax]
  420908:	mov    BYTE PTR [rsi+0xa],0x0
  42090c:	lea    rbp,[rsi+0x8]
  420910:	movzx  eax,WORD PTR [r9]
  420914:	mov    WORD PTR [rsi+0x8],ax
  420918:	mov    eax,ecx
  42091a:	mul    r8d
  42091d:	mov    eax,edi
  42091f:	mov    esi,0xa
  420924:	shr    edx,0x5
  420927:	imul   edx,edx,0x64
  42092a:	sub    ecx,edx
  42092c:	mov    edx,0x55e63b89
  420931:	mul    edx
  420933:	lea    r8d,[rcx+rcx*1]
  420937:	add    r8,r10
  42093a:	mov    ecx,edx
  42093c:	shr    ecx,0x19
  42093f:	movzx  eax,WORD PTR [r11]
  420943:	lea    rdx,[rbp-0x2]
  420947:	mov    WORD PTR [rbp-0x2],ax
  42094b:	jmp    4208bb <flatcc_json_parser_struct_as_root@@Base+0x2eb>
  420950:	lea    rax,[rsi+0x7]
  420954:	mov    BYTE PTR [rsi+0x7],0x0
  420958:	mov    esi,0x7
  42095d:	jmp    4207c5 <flatcc_json_parser_struct_as_root@@Base+0x1f5>
  420962:	nop    WORD PTR [rax+rax*1+0x0]
  420968:	lea    rdx,[rsi+0x2]
  42096c:	mov    BYTE PTR [rsi+0x2],0x0
  420970:	mov    ecx,edi
  420972:	mov    esi,0x2
  420977:	lea    r10,[rip+0x12162]        # 432ae0 <flatcc_builder_padding_base@@Base+0x20c0>
  42097e:	jmp    42085e <flatcc_json_parser_struct_as_root@@Base+0x28e>
  420983:	nop    DWORD PTR [rax+rax*1+0x0]
  420988:	lea    rbp,[rsi+0x8]
  42098c:	mov    BYTE PTR [rsi+0x8],0x0
  420990:	mov    r8,rbx
  420993:	mov    esi,0x8
  420998:	mov    rbx,r11
  42099b:	mov    r11,r9
  42099e:	jmp    42093f <flatcc_json_parser_struct_as_root@@Base+0x36f>
  4209a0:	lea    rbx,[rsi+0x5]
  4209a4:	mov    BYTE PTR [rsi+0x5],0x0
  4209a8:	mov    r8,r11
  4209ab:	mov    edi,ecx
  4209ad:	mov    r11,r9
  4209b0:	mov    esi,0x5
  4209b5:	jmp    4207eb <flatcc_json_parser_struct_as_root@@Base+0x21b>
  4209ba:	nop    WORD PTR [rax+rax*1+0x0]
  4209c0:	cmp    rdi,0x3b9ac9ff
  4209c7:	jbe    420ca0 <flatcc_json_parser_struct_as_root@@Base+0x6d0>
  4209cd:	mov    rdx,rdi
  4209d0:	shr    rdx,0x2
  4209d4:	mov    rax,rdx
  4209d7:	movabs r11,0x28f5c28f5c28f5c3
  4209e1:	mul    r11
  4209e4:	push   r12
  4209e6:	lea    r8,[rip+0x120f3]        # 432ae0 <flatcc_builder_padding_base@@Base+0x20c0>
  4209ed:	mov    rcx,rdx
  4209f0:	shr    rcx,0x2
  4209f4:	push   rbp
  4209f5:	imul   rax,rcx,0x64
  4209f9:	mov    r10,rcx
  4209fc:	push   rbx
  4209fd:	mov    rbx,rdi
  420a00:	sub    rbx,rax
  420a03:	movabs rax,0x9184e729fff
  420a0d:	lea    r9,[r8+rbx*2]
  420a11:	cmp    rdi,rax
  420a14:	jbe    420bd8 <flatcc_json_parser_struct_as_root@@Base+0x608>
  420a1a:	shr    rdx,0x4
  420a1e:	mov    rax,rdx
  420a21:	mul    r11
  420a24:	mov    rax,rdi
  420a27:	shr    rdx,0x2
  420a2b:	imul   rdx,rdx,0x64
  420a2f:	sub    rcx,rdx
  420a32:	movabs rdx,0x346dc5d63886594b
  420a3c:	mul    rdx
  420a3f:	lea    rbx,[r8+rcx*2]
  420a43:	mov    r10,rdx
  420a46:	shr    rdx,0xd
  420a4a:	mov    rax,rdx
  420a4d:	mul    r11
  420a50:	shr    r10,0xb
  420a54:	mov    rax,r10
  420a57:	shr    rdx,0x2
  420a5b:	imul   rdx,rdx,0x64
  420a5f:	sub    rax,rdx
  420a62:	lea    rbp,[r8+rax*2]
  420a66:	movabs rdx,0x431bde82d7b634db
  420a70:	mov    rax,rdi
  420a73:	mul    rdx
  420a76:	movabs rax,0x2386f26fc0ffff
  420a80:	mov    rcx,rdx
  420a83:	shr    rcx,0x12
  420a87:	cmp    rdi,rax
  420a8a:	ja     420ca8 <flatcc_json_parser_struct_as_root@@Base+0x6d8>
  420a90:	movabs rax,0x38d7ea4c67fff
  420a9a:	cmp    rdi,rax
  420a9d:	jbe    420dc0 <flatcc_json_parser_struct_as_root@@Base+0x7f0>
  420aa3:	mov    BYTE PTR [rsi+0x10],0x0
  420aa7:	mov    rdx,rbp
  420aaa:	lea    rax,[rsi+0x10]
  420aae:	mov    rbp,r9
  420ab1:	mov    edi,0x10
  420ab6:	mov    r9,rdx
  420ab9:	movzx  edx,WORD PTR [rbp+0x0]
  420abd:	lea    r10,[rax-0x2]
  420ac1:	mov    WORD PTR [rax-0x2],dx
  420ac5:	mov    rax,rcx
  420ac8:	shr    rax,0x2
  420acc:	movabs rdx,0x28f5c28f5c28f5c3
  420ad6:	mul    rdx
  420ad9:	mov    rax,rdx
  420adc:	shr    rax,0x2
  420ae0:	imul   rdx,rax,0x64
  420ae4:	sub    rcx,rdx
  420ae7:	lea    r11,[r8+rcx*2]
  420aeb:	mov    rcx,rax
  420aee:	movzx  eax,WORD PTR [rbx]
  420af1:	lea    rdx,[r10-0x2]
  420af5:	mov    WORD PTR [r10-0x2],ax
  420afa:	movzx  esi,WORD PTR [r9]
  420afe:	lea    rax,[rdx-0x2]
  420b02:	mov    WORD PTR [rdx-0x2],si
  420b06:	movzx  edx,WORD PTR [r11]
  420b0a:	lea    rsi,[rax-0x2]
  420b0e:	mov    WORD PTR [rax-0x2],dx
  420b12:	mov    rdx,rcx
  420b15:	shr    rdx,0x2
  420b19:	movabs r9,0x28f5c28f5c28f5c3
  420b23:	mov    rax,rdx
  420b26:	mul    r9
  420b29:	mov    rbx,rcx
  420b2c:	mov    r10,rdx
  420b2f:	shr    r10,0x2
  420b33:	imul   rax,r10,0x64
  420b37:	shr    rdx,0x4
  420b3b:	sub    rbx,rax
  420b3e:	movzx  eax,WORD PTR [r8+rbx*2]
  420b43:	mov    WORD PTR [rsi-0x2],ax
  420b47:	mov    rax,rdx
  420b4a:	mul    r9
  420b4d:	shr    rdx,0x2
  420b51:	imul   rdx,rdx,0x64
  420b55:	sub    r10,rdx
  420b58:	movzx  eax,WORD PTR [r8+r10*2]
  420b5d:	movabs rdx,0x346dc5d63886594b
  420b67:	mov    WORD PTR [rsi-0x4],ax
  420b6b:	mov    rax,rcx
  420b6e:	mul    rdx
  420b71:	mov    r10,rdx
  420b74:	shr    rdx,0xd
  420b78:	mov    rax,rdx
  420b7b:	mul    r9
  420b7e:	shr    r10,0xb
  420b82:	shr    rdx,0x2
  420b86:	imul   rdx,rdx,0x64
  420b8a:	sub    r10,rdx
  420b8d:	movzx  eax,WORD PTR [r8+r10*2]
  420b92:	movabs rdx,0x431bde82d7b634db
  420b9c:	mov    WORD PTR [rsi-0x6],ax
  420ba0:	mov    rax,rcx
  420ba3:	mul    rdx
  420ba6:	mov    rcx,rdx
  420ba9:	shr    rdx,0x14
  420bad:	mov    rax,rdx
  420bb0:	mul    r9
  420bb3:	shr    rcx,0x12
  420bb7:	shr    rdx,0x2
  420bbb:	imul   rdx,rdx,0x64
  420bbf:	sub    rcx,rdx
  420bc2:	movzx  eax,WORD PTR [r8+rcx*2]
  420bc7:	mov    WORD PTR [rsi-0x8],ax
  420bcb:	mov    eax,edi
  420bcd:	pop    rbx
  420bce:	pop    rbp
  420bcf:	pop    r12
  420bd1:	ret    
  420bd2:	nop    WORD PTR [rax+rax*1+0x0]
  420bd8:	movabs rax,0x174876e7ff
  420be2:	cmp    rdi,rax
  420be5:	jbe    420d68 <flatcc_json_parser_struct_as_root@@Base+0x798>
  420beb:	shr    rdx,0x4
  420bef:	mov    rax,rdx
  420bf2:	mul    r11
  420bf5:	mov    rax,rcx
  420bf8:	shr    rdx,0x2
  420bfc:	imul   rdx,rdx,0x64
  420c00:	sub    rax,rdx
  420c03:	lea    r11,[r8+rax*2]
  420c07:	movabs rdx,0x346dc5d63886594b
  420c11:	mov    rax,rdi
  420c14:	mul    rdx
  420c17:	movabs rax,0xe8d4a50fff
  420c21:	mov    rcx,rdx
  420c24:	shr    rcx,0xb
  420c28:	cmp    rdi,rax
  420c2b:	jbe    420e40 <flatcc_json_parser_struct_as_root@@Base+0x870>
  420c31:	mov    BYTE PTR [rsi+0xd],0x0
  420c35:	lea    rax,[rsi+0xd]
  420c39:	mov    edi,0xd
  420c3e:	movzx  edx,WORD PTR [r9]
  420c42:	lea    rbx,[rax-0x2]
  420c46:	mov    WORD PTR [rax-0x2],dx
  420c4a:	movzx  eax,WORD PTR [r11]
  420c4e:	movabs rdx,0xcccccccccccccccd
  420c58:	mov    WORD PTR [rbx-0x2],ax
  420c5c:	mov    rax,rcx
  420c5f:	mul    rdx
  420c62:	lea    rsi,[rbx-0x3]
  420c66:	shr    rdx,0x3
  420c6a:	lea    rax,[rdx+rdx*4]
  420c6e:	add    rax,rax
  420c71:	sub    rcx,rax
  420c74:	mov    rdx,r10
  420c77:	lea    ecx,[rcx+0x30]
  420c7a:	shr    rdx,0x3
  420c7e:	mov    BYTE PTR [rbx-0x3],cl
  420c81:	mov    rax,rdx
  420c84:	movabs rcx,0x20c49ba5e353f7cf
  420c8e:	mul    rcx
  420c91:	mov    rcx,rdx
  420c94:	shr    rcx,0x4
  420c98:	jmp    420b12 <flatcc_json_parser_struct_as_root@@Base+0x542>
  420c9d:	nop    DWORD PTR [rax]
  420ca0:	jmp    420710 <flatcc_json_parser_struct_as_root@@Base+0x140>
  420ca5:	nop    DWORD PTR [rax]
  420ca8:	shr    rdx,0x14
  420cac:	mov    rax,rdx
  420caf:	mul    r11
  420cb2:	mov    rax,rcx
  420cb5:	shr    rdx,0x2
  420cb9:	imul   rdx,rdx,0x64
  420cbd:	sub    rax,rdx
  420cc0:	lea    r12,[r8+rax*2]
  420cc4:	movabs rdx,0xabcc77118461cefd
  420cce:	mov    rax,rdi
  420cd1:	mul    rdx
  420cd4:	movabs rax,0xde0b6b3a763ffff
  420cde:	mov    r10,rdx
  420ce1:	shr    r10,0x1a
  420ce5:	cmp    rdi,rax
  420ce8:	jbe    420df0 <flatcc_json_parser_struct_as_root@@Base+0x820>
  420cee:	shr    rdx,0x1c
  420cf2:	mov    rax,rdx
  420cf5:	mul    r11
  420cf8:	mov    rax,r10
  420cfb:	shr    rdx,0x2
  420cff:	imul   rdx,rdx,0x64
  420d03:	sub    rax,rdx
  420d06:	lea    r11,[r8+rax*2]
  420d0a:	movabs rdx,0xdbe6fecebdedd5bf
  420d14:	mov    rax,rdi
  420d17:	mul    rdx
  420d1a:	movabs rax,0x8ac7230489e7ffff
  420d24:	mov    rcx,rdx
  420d27:	shr    rcx,0x21
  420d2b:	cmp    rdi,rax
  420d2e:	ja     420d90 <flatcc_json_parser_struct_as_root@@Base+0x7c0>
  420d30:	mov    BYTE PTR [rsi+0x13],0x0
  420d34:	lea    rax,[rsi+0x11]
  420d38:	mov    edi,0x13
  420d3d:	movzx  edx,WORD PTR [r9]
  420d41:	mov    r9,r12
  420d44:	mov    WORD PTR [rsi+0x11],dx
  420d48:	movzx  esi,WORD PTR [rbx]
  420d4b:	lea    rdx,[rax-0x2]
  420d4f:	mov    WORD PTR [rax-0x2],si
  420d53:	movzx  esi,WORD PTR [rbp+0x0]
  420d57:	lea    rax,[rdx-0x2]
  420d5b:	mov    WORD PTR [rdx-0x2],si
  420d5f:	jmp    420c3e <flatcc_json_parser_struct_as_root@@Base+0x66e>
  420d64:	nop    DWORD PTR [rax+0x0]
  420d68:	movabs rax,0x2540be3ff
  420d72:	cmp    rdi,rax
  420d75:	ja     420e20 <flatcc_json_parser_struct_as_root@@Base+0x850>
  420d7b:	lea    rax,[rsi+0xa]
  420d7f:	mov    BYTE PTR [rsi+0xa],0x0
  420d83:	mov    r11,r9
  420d86:	mov    edi,0xa
  420d8b:	jmp    420b06 <flatcc_json_parser_struct_as_root@@Base+0x536>
  420d90:	mov    BYTE PTR [rsi+0x14],0x0
  420d94:	lea    rdx,[rsi+0x12]
  420d98:	mov    edi,0x14
  420d9d:	movzx  eax,WORD PTR [r9]
  420da1:	mov    r9,r11
  420da4:	mov    WORD PTR [rsi+0x12],ax
  420da8:	mov    rsi,rbx
  420dab:	mov    rbx,r12
  420dae:	movzx  esi,WORD PTR [rsi]
  420db1:	lea    rax,[rdx-0x2]
  420db5:	mov    WORD PTR [rdx-0x2],si
  420db9:	jmp    420ab9 <flatcc_json_parser_struct_as_root@@Base+0x4e9>
  420dbe:	xchg   ax,ax
  420dc0:	movabs rax,0x5af3107a3fff
  420dca:	cmp    rdi,rax
  420dcd:	jbe    420e88 <flatcc_json_parser_struct_as_root@@Base+0x8b8>
  420dd3:	mov    r11,rbp
  420dd6:	lea    rdx,[rsi+0xf]
  420dda:	mov    rbp,r9
  420ddd:	mov    BYTE PTR [rsi+0xf],0x0
  420de1:	mov    r9,rbx
  420de4:	mov    edi,0xf
  420de9:	jmp    420d53 <flatcc_json_parser_struct_as_root@@Base+0x783>
  420dee:	xchg   ax,ax
  420df0:	movabs rax,0x16345785d89ffff
  420dfa:	cmp    rdi,rax
  420dfd:	jbe    420e58 <flatcc_json_parser_struct_as_root@@Base+0x888>
  420dff:	mov    rax,rbp
  420e02:	lea    rdx,[rsi+0x12]
  420e06:	mov    BYTE PTR [rsi+0x12],0x0
  420e0a:	mov    rbp,rbx
  420e0d:	mov    rsi,r9
  420e10:	mov    rcx,r10
  420e13:	mov    rbx,rax
  420e16:	mov    r9,r12
  420e19:	mov    edi,0x12
  420e1e:	jmp    420dae <flatcc_json_parser_struct_as_root@@Base+0x7de>
  420e20:	mov    r10,rdi
  420e23:	lea    rbx,[rsi+0xb]
  420e27:	mov    BYTE PTR [rsi+0xb],0x0
  420e2b:	mov    r11,r9
  420e2e:	mov    edi,0xb
  420e33:	jmp    420c4a <flatcc_json_parser_struct_as_root@@Base+0x67a>
  420e38:	nop    DWORD PTR [rax+rax*1+0x0]
  420e40:	lea    rdx,[rsi+0xc]
  420e44:	mov    BYTE PTR [rsi+0xc],0x0
  420e48:	mov    edi,0xc
  420e4d:	jmp    420afa <flatcc_json_parser_struct_as_root@@Base+0x52a>
  420e52:	nop    WORD PTR [rax+rax*1+0x0]
  420e58:	mov    rdx,r10
  420e5b:	mov    r10,rcx
  420e5e:	mov    rcx,rdx
  420e61:	mov    rdx,rbx
  420e64:	lea    rax,[rsi+0x11]
  420e68:	mov    rbx,r9
  420e6b:	mov    BYTE PTR [rsi+0x11],0x0
  420e6f:	mov    r9,rbp
  420e72:	mov    r11,r12
  420e75:	mov    rbp,rdx
  420e78:	mov    edi,0x11
  420e7d:	jmp    420d48 <flatcc_json_parser_struct_as_root@@Base+0x778>
  420e82:	nop    WORD PTR [rax+rax*1+0x0]
  420e88:	mov    rax,rbx
  420e8b:	lea    r10,[rsi+0xe]
  420e8f:	mov    rbx,r9
  420e92:	mov    BYTE PTR [rsi+0xe],0x0
  420e96:	mov    r11,rbp
  420e99:	mov    r9,rax
  420e9c:	mov    edi,0xe
  420ea1:	jmp    420aee <flatcc_json_parser_struct_as_root@@Base+0x51e>
  420ea6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  420eb0:	push   r12
  420eb2:	mov    r11,rdx
  420eb5:	push   rbp
  420eb6:	push   rbx
  420eb7:	mov    rbp,QWORD PTR [rsp+0x20]
  420ebc:	sub    r11,rbp
  420ebf:	cmp    r11,r8
  420ec2:	jbe    420f90 <flatcc_json_parser_struct_as_root@@Base+0x9c0>
  420ec8:	mov    rax,rcx
  420ecb:	sub    rax,r8
  420ece:	cmp    r9,rax
  420ed1:	ja     420fa1 <flatcc_json_parser_struct_as_root@@Base+0x9d1>
  420ed7:	mov    rax,rcx
  420eda:	sub    rax,r9
  420edd:	movsxd r10,esi
  420ee0:	sub    rax,r8
  420ee3:	lea    rbx,[rdi+r10*1-0x1]
  420ee8:	nop    DWORD PTR [rax+rax*1+0x0]
  420ef0:	lea    r10,[r9+r8*1]
  420ef4:	cmp    r10,r11
  420ef7:	jb     420f58 <flatcc_json_parser_struct_as_root@@Base+0x988>
  420ef9:	mov    rax,rbp
  420efc:	sub    rax,rdx
  420eff:	sub    r11,r8
  420f02:	add    rax,r10
  420f05:	cmp    r11,rax
  420f08:	jb     420f90 <flatcc_json_parser_struct_as_root@@Base+0x9c0>
  420f0e:	movsxd rsi,esi
  420f11:	add    rdx,rbp
  420f14:	dec    BYTE PTR [rdi+rsi*1-0x1]
  420f18:	cmp    rdx,r10
  420f1b:	jbe    420f40 <flatcc_json_parser_struct_as_root@@Base+0x970>
  420f1d:	mov    rax,rcx
  420f20:	sub    rax,r10
  420f23:	cmp    rax,r9
  420f26:	jb     420f40 <flatcc_json_parser_struct_as_root@@Base+0x970>
  420f28:	add    r9,r10
  420f2b:	cmp    r9,rdx
  420f2e:	jb     420f4a <flatcc_json_parser_struct_as_root@@Base+0x97a>
  420f30:	mov    rax,rdx
  420f33:	sub    rax,r10
  420f36:	sub    r9,rdx
  420f39:	cmp    rax,r9
  420f3c:	ja     420f4a <flatcc_json_parser_struct_as_root@@Base+0x97a>
  420f3e:	xchg   ax,ax
  420f40:	lea    rax,[rbp+rbp*1+0x0]
  420f45:	cmp    rax,r10
  420f48:	jbe    420f70 <flatcc_json_parser_struct_as_root@@Base+0x9a0>
  420f4a:	pop    rbx
  420f4b:	pop    rbp
  420f4c:	xor    eax,eax
  420f4e:	pop    r12
  420f50:	ret    
  420f51:	nop    DWORD PTR [rax+0x0]
  420f58:	mov    r12,rax
  420f5b:	dec    BYTE PTR [rbx]
  420f5d:	sub    r12,r9
  420f60:	mov    r8,r10
  420f63:	cmp    rax,r9
  420f66:	jb     420f40 <flatcc_json_parser_struct_as_root@@Base+0x970>
  420f68:	mov    rax,r12
  420f6b:	jmp    420ef0 <flatcc_json_parser_struct_as_root@@Base+0x920>
  420f6d:	nop    DWORD PTR [rax]
  420f70:	shl    rbp,0x2
  420f74:	sub    rcx,rbp
  420f77:	mov    eax,0x1
  420f7c:	cmp    rcx,r10
  420f7f:	jb     420f4a <flatcc_json_parser_struct_as_root@@Base+0x97a>
  420f81:	pop    rbx
  420f82:	pop    rbp
  420f83:	pop    r12
  420f85:	ret    
  420f86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  420f90:	mov    r10,r8
  420f93:	add    rdx,rbp
  420f96:	cmp    rdx,r10
  420f99:	ja     420f1d <flatcc_json_parser_struct_as_root@@Base+0x94d>
  420f9f:	jmp    420f40 <flatcc_json_parser_struct_as_root@@Base+0x970>
  420fa1:	mov    r10,r8
  420fa4:	jmp    420f40 <flatcc_json_parser_struct_as_root@@Base+0x970>
  420fa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  420fb0:	mov    r9,rsi
  420fb3:	test   edi,edi
  420fb5:	jns    420fc0 <flatcc_json_parser_struct_as_root@@Base+0x9f0>
  420fb7:	mov    BYTE PTR [rsi],0x2d
  420fba:	lea    r9,[rsi+0x1]
  420fbe:	neg    edi
  420fc0:	mov    r8,r9
  420fc3:	mov    ecx,0xcccccccd
  420fc8:	nop    DWORD PTR [rax+rax*1+0x0]
  420fd0:	mov    eax,edi
  420fd2:	mul    ecx
  420fd4:	inc    r8
  420fd7:	shr    edx,0x3
  420fda:	lea    eax,[rdx+rdx*4]
  420fdd:	add    eax,eax
  420fdf:	sub    edi,eax
  420fe1:	add    edi,0x30
  420fe4:	mov    BYTE PTR [r8-0x1],dil
  420fe8:	mov    edi,edx
  420fea:	test   edx,edx
  420fec:	jne    420fd0 <flatcc_json_parser_struct_as_root@@Base+0xa00>
  420fee:	mov    rdx,r8
  420ff1:	sub    rdx,r9
  420ff4:	mov    r10d,edx
  420ff7:	shr    r10d,0x1f
  420ffb:	add    r10d,edx
  420ffe:	mov    BYTE PTR [r8],0x0
  421002:	sar    r10d,1
  421005:	cmp    edx,0x1
  421008:	jle    421031 <flatcc_json_parser_struct_as_root@@Base+0xa61>
  42100a:	dec    edx
  42100c:	movsxd rdx,edx
  42100f:	add    rdx,r9
  421012:	xor    ecx,ecx
  421014:	nop    DWORD PTR [rax+0x0]
  421018:	movzx  edi,BYTE PTR [rdx]
  42101b:	movzx  eax,BYTE PTR [r9+rcx*1]
  421020:	mov    BYTE PTR [r9+rcx*1],dil
  421024:	inc    rcx
  421027:	mov    BYTE PTR [rdx],al
  421029:	dec    rdx
  42102c:	cmp    r10d,ecx
  42102f:	jg     421018 <flatcc_json_parser_struct_as_root@@Base+0xa48>
  421031:	mov    rax,r8
  421034:	sub    rax,rsi
  421037:	ret    
  421038:	nop    DWORD PTR [rax+rax*1+0x0]
  421040:	endbr64 
  421044:	mov    rax,QWORD PTR [rdi+0x28]
  421048:	cmp    rax,QWORD PTR [rdi+0x20]
  42104c:	jb     42106d <flatcc_json_parser_struct_as_root@@Base+0xa9d>
  42104e:	mov    edx,DWORD PTR [rdi+0x3c]
  421051:	test   edx,edx
  421053:	jne    42105c <flatcc_json_parser_struct_as_root@@Base+0xa8c>
  421055:	mov    DWORD PTR [rdi+0x3c],0x3
  42105c:	mov    rdx,QWORD PTR [rdi]
  42105f:	mov    QWORD PTR [rdi+0x28],rdx
  421063:	sub    rax,rdx
  421066:	add    QWORD PTR [rdi+0x18],rax
  42106a:	mov    rax,rdx
  42106d:	mov    BYTE PTR [rax],0x0
  421070:	ret    
  421071:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  42107c:	nop    DWORD PTR [rax+0x0]
  421080:	push   r13
  421082:	mov    r13,rsi
  421085:	push   r12
  421087:	mov    r12,rdx
  42108a:	push   rbp
  42108b:	mov    rbp,rdi
  42108e:	push   rbx
  42108f:	sub    rsp,0x8
  421093:	mov    rdi,QWORD PTR [rdi+0x28]
  421097:	mov    rbx,QWORD PTR [rbp+0x20]
  42109b:	cmp    rdi,rbx
  42109e:	jb     4210b0 <flatcc_json_parser_struct_as_root@@Base+0xae0>
  4210a0:	mov    rdi,rbp
  4210a3:	xor    esi,esi
  4210a5:	call   QWORD PTR [rbp+0x48]
  4210a8:	mov    rbx,QWORD PTR [rbp+0x20]
  4210ac:	mov    rdi,QWORD PTR [rbp+0x28]
  4210b0:	sub    rbx,rdi
  4210b3:	cmp    rbx,r12
  4210b6:	jae    4210ed <flatcc_json_parser_struct_as_root@@Base+0xb1d>
  4210b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4210c0:	mov    rdx,rbx
  4210c3:	mov    rsi,r13
  4210c6:	call   406210 <memcpy@plt>
  4210cb:	add    QWORD PTR [rbp+0x28],rbx
  4210cf:	mov    rdi,rbp
  4210d2:	xor    esi,esi
  4210d4:	add    r13,rbx
  4210d7:	call   QWORD PTR [rbp+0x48]
  4210da:	sub    r12,rbx
  4210dd:	mov    rdi,QWORD PTR [rbp+0x28]
  4210e1:	mov    rbx,QWORD PTR [rbp+0x20]
  4210e5:	sub    rbx,rdi
  4210e8:	cmp    r12,rbx
  4210eb:	ja     4210c0 <flatcc_json_parser_struct_as_root@@Base+0xaf0>
  4210ed:	mov    rdx,r12
  4210f0:	mov    rsi,r13
  4210f3:	call   406210 <memcpy@plt>
  4210f8:	add    QWORD PTR [rbp+0x28],r12
  4210fc:	add    rsp,0x8
  421100:	pop    rbx
  421101:	pop    rbp
  421102:	pop    r12
  421104:	pop    r13
  421106:	ret    
  421107:	nop    WORD PTR [rax+rax*1+0x0]
  421110:	push   r12
  421112:	mov    r12,rsi
  421115:	push   rbp
  421116:	mov    rbp,rdi
  421119:	push   rbx
  42111a:	mov    rbx,QWORD PTR [rbp+0x20]
  42111e:	mov    rdi,QWORD PTR [rdi+0x28]
  421122:	cmp    rdi,rbx
  421125:	jb     421137 <flatcc_json_parser_struct_as_root@@Base+0xb67>
  421127:	mov    rdi,rbp
  42112a:	xor    esi,esi
  42112c:	call   QWORD PTR [rbp+0x48]
  42112f:	mov    rbx,QWORD PTR [rbp+0x20]
  421133:	mov    rdi,QWORD PTR [rbp+0x28]
  421137:	sub    rbx,rdi
  42113a:	cmp    rbx,r12
  42113d:	jae    42116c <flatcc_json_parser_struct_as_root@@Base+0xb9c>
  42113f:	nop
  421140:	mov    rdx,rbx
  421143:	mov    esi,0x20
  421148:	call   4061c0 <memset@plt>
  42114d:	add    QWORD PTR [rbp+0x28],rbx
  421151:	mov    rdi,rbp
  421154:	xor    esi,esi
  421156:	sub    r12,rbx
  421159:	call   QWORD PTR [rbp+0x48]
  42115c:	mov    rdi,QWORD PTR [rbp+0x28]
  421160:	mov    rbx,QWORD PTR [rbp+0x20]
  421164:	sub    rbx,rdi
  421167:	cmp    r12,rbx
  42116a:	ja     421140 <flatcc_json_parser_struct_as_root@@Base+0xb70>
  42116c:	mov    rdx,r12
  42116f:	mov    esi,0x20
  421174:	call   4061c0 <memset@plt>
  421179:	pop    rbx
  42117a:	add    QWORD PTR [rbp+0x28],r12
  42117e:	pop    rbp
  42117f:	pop    r12
  421181:	ret    
  421182:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  42118d:	nop    DWORD PTR [rax]
  421190:	push   rbp
  421191:	push   rbx
  421192:	sub    rsp,0x8
  421196:	movzx  ebp,BYTE PTR [rdi+0x31]
  42119a:	mov    rax,QWORD PTR [rdi+0x28]
  42119e:	imul   ebp,DWORD PTR [rdi+0x38]
  4211a2:	movsxd rbp,ebp
  4211a5:	lea    rdx,[rax+rbp*1]
  4211a9:	cmp    QWORD PTR [rdi+0x20],rdx
  4211ad:	jae    4211c0 <flatcc_json_parser_struct_as_root@@Base+0xbf0>
  4211af:	add    rsp,0x8
  4211b3:	pop    rbx
  4211b4:	mov    rsi,rbp
  4211b7:	pop    rbp
  4211b8:	jmp    421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4211bd:	nop    DWORD PTR [rax]
  4211c0:	mov    rbx,rdi
  4211c3:	mov    rdx,rbp
  4211c6:	mov    esi,0x20
  4211cb:	mov    rdi,rax
  4211ce:	call   4061c0 <memset@plt>
  4211d3:	add    QWORD PTR [rbx+0x28],rbp
  4211d7:	add    rsp,0x8
  4211db:	pop    rbx
  4211dc:	pop    rbp
  4211dd:	ret    
  4211de:	xchg   ax,ax
  4211e0:	endbr64 
  4211e4:	push   rbp
  4211e5:	push   rbx
  4211e6:	mov    rbx,rdi
  4211e9:	sub    rsp,0x8
  4211ed:	mov    rdx,QWORD PTR [rdi+0x28]
  4211f1:	mov    rcx,QWORD PTR [rdi+0x40]
  4211f5:	mov    rdi,QWORD PTR [rdi]
  4211f8:	test   esi,esi
  4211fa:	jne    421205 <flatcc_json_parser_struct_as_root@@Base+0xc35>
  4211fc:	mov    rax,QWORD PTR [rbx+0x20]
  421200:	cmp    rax,rdx
  421203:	jbe    421230 <flatcc_json_parser_struct_as_root@@Base+0xc60>
  421205:	sub    rdx,rdi
  421208:	mov    rbp,rdx
  42120b:	mov    rsi,rbp
  42120e:	mov    edx,0x1
  421213:	call   406250 <fwrite@plt>
  421218:	mov    rdx,QWORD PTR [rbx]
  42121b:	add    QWORD PTR [rbx+0x18],rbp
  42121f:	mov    QWORD PTR [rbx+0x28],rdx
  421223:	mov    BYTE PTR [rdx],0x0
  421226:	add    rsp,0x8
  42122a:	pop    rbx
  42122b:	pop    rbp
  42122c:	ret    
  42122d:	nop    DWORD PTR [rax]
  421230:	sub    rdx,rax
  421233:	mov    rsi,QWORD PTR [rbx+0x10]
  421237:	mov    rbp,rdx
  42123a:	mov    edx,0x1
  42123f:	call   406250 <fwrite@plt>
  421244:	mov    rdi,QWORD PTR [rbx]
  421247:	mov    rsi,QWORD PTR [rbx+0x10]
  42124b:	mov    rdx,rbp
  42124e:	add    rsi,rdi
  421251:	call   406210 <memcpy@plt>
  421256:	mov    rdx,QWORD PTR [rbx]
  421259:	mov    rax,QWORD PTR [rbx+0x10]
  42125d:	add    rdx,rbp
  421260:	mov    QWORD PTR [rbx+0x28],rdx
  421264:	add    QWORD PTR [rbx+0x18],rax
  421268:	mov    BYTE PTR [rdx],0x0
  42126b:	add    rsp,0x8
  42126f:	pop    rbx
  421270:	pop    rbp
  421271:	ret    
  421272:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  42127d:	nop    DWORD PTR [rax]
  421280:	endbr64 
  421284:	mov    rax,QWORD PTR [rdi+0x28]
  421288:	mov    rdx,QWORD PTR [rdi]
  42128b:	mov    BYTE PTR [rax],0x0
  42128e:	mov    rsi,QWORD PTR [rdi+0x20]
  421292:	cmp    QWORD PTR [rdi+0x28],rsi
  421296:	jae    4212a0 <flatcc_json_parser_struct_as_root@@Base+0xcd0>
  421298:	ret    
  421299:	nop    DWORD PTR [rax+0x0]
  4212a0:	push   rbp
  4212a1:	sub    rax,rdx
  4212a4:	mov    rbp,rax
  4212a7:	push   rbx
  4212a8:	mov    rbx,rdi
  4212ab:	sub    rsp,0x8
  4212af:	mov    rax,QWORD PTR [rdi+0x8]
  4212b3:	mov    rdi,QWORD PTR [rdi]
  4212b6:	lea    rsi,[rax+rax*1]
  4212ba:	call   406230 <realloc@plt>
  4212bf:	test   rax,rax
  4212c2:	je     4212f8 <flatcc_json_parser_struct_as_root@@Base+0xd28>
  4212c4:	mov    rcx,QWORD PTR [rbx+0x8]
  4212c8:	mov    QWORD PTR [rbx],rax
  4212cb:	add    rcx,rcx
  4212ce:	mov    QWORD PTR [rbx+0x8],rcx
  4212d2:	sub    rcx,0x40
  4212d6:	lea    rdx,[rax+rbp*1]
  4212da:	add    rax,rcx
  4212dd:	mov    QWORD PTR [rbx+0x10],rcx
  4212e1:	mov    QWORD PTR [rbx+0x28],rdx
  4212e5:	mov    QWORD PTR [rbx+0x20],rax
  4212e9:	mov    BYTE PTR [rdx],0x0
  4212ec:	add    rsp,0x8
  4212f0:	pop    rbx
  4212f1:	pop    rbp
  4212f2:	ret    
  4212f3:	nop    DWORD PTR [rax+rax*1+0x0]
  4212f8:	mov    eax,DWORD PTR [rbx+0x3c]
  4212fb:	test   eax,eax
  4212fd:	jne    421306 <flatcc_json_parser_struct_as_root@@Base+0xd36>
  4212ff:	mov    DWORD PTR [rbx+0x3c],0x3
  421306:	mov    rdx,QWORD PTR [rbx]
  421309:	add    QWORD PTR [rbx+0x18],rbp
  42130d:	mov    QWORD PTR [rbx+0x28],rdx
  421311:	mov    BYTE PTR [rdx],0x0
  421314:	add    rsp,0x8
  421318:	pop    rbx
  421319:	pop    rbp
  42131a:	ret    
  42131b:	nop    DWORD PTR [rax+rax*1+0x0]
  421320:	test   edi,edi
  421322:	je     421338 <flatcc_json_parser_struct_as_root@@Base+0xd68>
  421324:	mov    DWORD PTR [rsi],0x65757274
  42132a:	mov    BYTE PTR [rsi+0x4],0x0
  42132e:	mov    eax,0x4
  421333:	ret    
  421334:	nop    DWORD PTR [rax+0x0]
  421338:	mov    eax,0x65
  42133d:	mov    WORD PTR [rsi+0x4],ax
  421341:	mov    DWORD PTR [rsi],0x736c6166
  421347:	mov    eax,0x5
  42134c:	ret    
  42134d:	nop    DWORD PTR [rax]
  421350:	cmp    dil,0x63
  421354:	ja     421370 <flatcc_json_parser_struct_as_root@@Base+0xda0>
  421356:	cmp    dil,0x9
  42135a:	ja     4213b8 <flatcc_json_parser_struct_as_root@@Base+0xde8>
  42135c:	add    edi,0x30
  42135f:	mov    BYTE PTR [rsi+0x1],0x0
  421363:	mov    BYTE PTR [rsi],dil
  421366:	mov    eax,0x1
  42136b:	ret    
  42136c:	nop    DWORD PTR [rax+0x0]
  421370:	movzx  eax,dil
  421374:	lea    edx,[rax+rax*4]
  421377:	lea    edx,[rax+rdx*8]
  42137a:	mov    ecx,0x64
  42137f:	shr    dx,0xc
  421383:	mov    eax,ecx
  421385:	imul   eax,edx
  421388:	mov    BYTE PTR [rsi+0x3],0x0
  42138c:	add    edx,0x30
  42138f:	sub    edi,eax
  421391:	add    rdi,rdi
  421394:	and    edi,0x1fe
  42139a:	lea    rax,[rip+0x1173f]        # 432ae0 <flatcc_builder_padding_base@@Base+0x20c0>
  4213a1:	movzx  eax,WORD PTR [rax+rdi*1]
  4213a5:	mov    BYTE PTR [rsi],dl
  4213a7:	mov    WORD PTR [rsi+0x1],ax
  4213ab:	mov    eax,0x3
  4213b0:	ret    
  4213b1:	nop    DWORD PTR [rax+0x0]
  4213b8:	mov    BYTE PTR [rsi+0x2],0x0
  4213bc:	add    rdi,rdi
  4213bf:	and    edi,0x1fe
  4213c5:	lea    rax,[rip+0x11714]        # 432ae0 <flatcc_builder_padding_base@@Base+0x20c0>
  4213cc:	movzx  eax,WORD PTR [rax+rdi*1]
  4213d0:	mov    WORD PTR [rsi],ax
  4213d3:	mov    eax,0x2
  4213d8:	ret    
  4213d9:	nop    DWORD PTR [rax+0x0]
  4213e0:	mov    r9,rdi
  4213e3:	mov    eax,edx
  4213e5:	shr    r9,0x20
  4213e9:	mov    edi,edi
  4213eb:	mov    r11,rdi
  4213ee:	mov    r8,r9
  4213f1:	imul   rdi,rax
  4213f5:	imul   r8,rax
  4213f9:	mov    r10,rdx
  4213fc:	shr    r10,0x20
  421400:	imul   r11,r10
  421404:	mov    rax,rdi
  421407:	shr    rax,0x20
  42140b:	mov    edi,r8d
  42140e:	add    rax,rdi
  421411:	mov    edi,0x80000000
  421416:	mov    edx,r11d
  421419:	add    rax,rdi
  42141c:	add    rax,rdx
  42141f:	imul   r9,r10
  421423:	mov    rdx,r8
  421426:	shr    rdx,0x20
  42142a:	shr    r11,0x20
  42142e:	add    rdx,r11
  421431:	lea    r8,[rdx+r9*1]
  421435:	shr    rax,0x20
  421439:	add    rax,r8
  42143c:	mov    QWORD PTR [rsp-0x18],rax
  421441:	mov    QWORD PTR [rsp-0x10],0x0
  42144a:	lea    eax,[rsi+rcx*1+0x40]
  42144e:	vmovdqa xmm1,XMMWORD PTR [rsp-0x18]
  421454:	vpinsrd xmm0,xmm1,eax,0x2
  42145a:	vmovq  rax,xmm0
  42145f:	vpextrq rdx,xmm0,0x1
  421465:	ret    
  421466:	nop    WORD PTR cs:[rax+rax*1+0x0]
  421470:	sub    rsp,0x18
  421474:	mov    QWORD PTR [rsp+0x8],rsi
  421479:	mov    QWORD PTR [rsp],rdi
  42147d:	mov    ecx,DWORD PTR [rsp+0x8]
  421481:	test   rdi,rdi
  421484:	je     4214e8 <flatcc_json_parser_struct_as_root@@Base+0xf18>
  421486:	mov    rax,rdi
  421489:	movabs rdi,0xffc0000000000000
  421493:	lea    edx,[rcx-0xa]
  421496:	mov    rsi,rdi
  421499:	test   rax,rdi
  42149c:	jne    4214ae <flatcc_json_parser_struct_as_root@@Base+0xede>
  42149e:	xchg   ax,ax
  4214a0:	shl    rax,0xa
  4214a4:	mov    ecx,edx
  4214a6:	sub    edx,0xa
  4214a9:	test   rax,rsi
  4214ac:	je     4214a0 <flatcc_json_parser_struct_as_root@@Base+0xed0>
  4214ae:	test   rax,rax
  4214b1:	js     4214c9 <flatcc_json_parser_struct_as_root@@Base+0xef9>
  4214b3:	lea    edx,[rcx-0x1]
  4214b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4214c0:	mov    ecx,edx
  4214c2:	dec    edx
  4214c4:	add    rax,rax
  4214c7:	jns    4214c0 <flatcc_json_parser_struct_as_root@@Base+0xef0>
  4214c9:	mov    QWORD PTR [rsp],rax
  4214cd:	vmovdqa xmm1,XMMWORD PTR [rsp]
  4214d2:	add    rsp,0x18
  4214d6:	vpinsrd xmm0,xmm1,ecx,0x2
  4214dc:	vmovq  rax,xmm0
  4214e1:	vpextrq rdx,xmm0,0x1
  4214e7:	ret    
  4214e8:	lea    rcx,[rip+0x10fe1]        # 4324d0 <flatcc_builder_padding_base@@Base+0x1ab0>
  4214ef:	mov    edx,0x104
  4214f4:	lea    rsi,[rip+0xfc55]        # 431150 <flatcc_builder_padding_base@@Base+0x730>
  4214fb:	lea    rdi,[rip+0xfe32]        # 431334 <flatcc_builder_padding_base@@Base+0x914>
  421502:	call   4061b0 <__assert_fail@plt>
  421507:	nop    WORD PTR [rax+rax*1+0x0]
  421510:	push   rax
  421511:	pop    rax
  421512:	lea    rcx,[rip+0x10f97]        # 4324b0 <flatcc_builder_padding_base@@Base+0x1a90>
  421519:	mov    edx,0xef
  42151e:	lea    rsi,[rip+0xfc2b]        # 431150 <flatcc_builder_padding_base@@Base+0x730>
  421525:	lea    rdi,[rip+0x10e45]        # 432371 <flatcc_builder_padding_base@@Base+0x1951>
  42152c:	sub    rsp,0x8
  421530:	call   4061b0 <__assert_fail@plt>
  421535:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  421540:	push   r15
  421542:	push   r14
  421544:	push   r13
  421546:	push   r12
  421548:	push   rbp
  421549:	push   rbx
  42154a:	sub    rsp,0x58
  42154e:	test   rdi,rdi
  421551:	je     421c5c <flatcc_json_parser_struct_as_root@@Base+0x168c>
  421557:	vmovq  r8,xmm0
  42155c:	lea    rdx,[r8+r8*1]
  421560:	movabs rax,0xffe0000000000000
  42156a:	mov    r10,rdi
  42156d:	cmp    rdx,rax
  421570:	ja     4219f8 <flatcc_json_parser_struct_as_root@@Base+0x1428>
  421576:	mov    rbx,rdi
  421579:	test   r8,r8
  42157c:	js     4219b8 <flatcc_json_parser_struct_as_root@@Base+0x13e8>
  421582:	test   r8,r8
  421585:	je     4219d5 <flatcc_json_parser_struct_as_root@@Base+0x1405>
  42158b:	movabs r13,0x7ff0000000000000
  421595:	cmp    r8,r13
  421598:	je     421a30 <flatcc_json_parser_struct_as_root@@Base+0x1460>
  42159e:	vmovq  r12,xmm0
  4215a3:	movabs rcx,0xfffffffffffff
  4215ad:	and    rcx,r12
  4215b0:	and    r13,r12
  4215b3:	mov    QWORD PTR [rsp+0x48],r13
  4215b8:	je     421a50 <flatcc_json_parser_struct_as_root@@Base+0x1480>
  4215be:	shr    r12,0x34
  4215c2:	and    r12d,0x7ff
  4215c9:	movabs r14,0x10000000000000
  4215d3:	lea    r11d,[r12-0x433]
  4215db:	add    r14,rcx
  4215de:	sub    r12d,0x434
  4215e5:	mov    QWORD PTR [rsp+0x8],0x0
  4215ee:	mov    QWORD PTR [rsp],r14
  4215f2:	vmovsd QWORD PTR [rsp+0x28],xmm0
  4215f8:	mov    QWORD PTR [rsp+0x40],r10
  4215fd:	vmovdqa xmm5,XMMWORD PTR [rsp]
  421602:	mov    QWORD PTR [rsp+0x38],rcx
  421607:	vpinsrd xmm4,xmm5,r11d,0x2
  42160d:	vmovaps XMMWORD PTR [rsp],xmm4
  421612:	mov    rsi,QWORD PTR [rsp+0x8]
  421617:	mov    rdi,QWORD PTR [rsp]
  42161b:	mov    DWORD PTR [rsp+0x30],r11d
  421620:	lea    r13,[r14+r14*1]
  421624:	call   421470 <flatcc_json_parser_struct_as_root@@Base+0xea0>
  421629:	mov    QWORD PTR [rsp],rax
  42162d:	lea    rax,[r13+0x1]
  421631:	mov    QWORD PTR [rsp+0x18],0x0
  42163a:	mov    QWORD PTR [rsp+0x10],rax
  42163f:	mov    r15d,edx
  421642:	vmovdqa xmm7,XMMWORD PTR [rsp+0x10]
  421648:	vpinsrd xmm6,xmm7,r12d,0x2
  42164e:	vmovaps XMMWORD PTR [rsp+0x10],xmm6
  421654:	mov    rsi,QWORD PTR [rsp+0x18]
  421659:	mov    rdi,QWORD PTR [rsp+0x10]
  42165e:	call   421470 <flatcc_json_parser_struct_as_root@@Base+0xea0>
  421663:	vmovsd xmm0,QWORD PTR [rsp+0x28]
  421669:	vxorpd xmm2,xmm2,xmm2
  42166d:	vcomisd xmm0,xmm2
  421671:	mov    r8,rax
  421674:	mov    ebp,edx
  421676:	jbe    421c7b <flatcc_json_parser_struct_as_root@@Base+0x16ab>
  42167c:	vmovsd xmm1,QWORD PTR [rip+0x10acc]        # 432150 <flatcc_builder_padding_base@@Base+0x1730>
  421684:	mov    r11d,DWORD PTR [rsp+0x30]
  421689:	vcomisd xmm1,xmm0
  42168d:	mov    rcx,QWORD PTR [rsp+0x38]
  421692:	mov    r10,QWORD PTR [rsp+0x40]
  421697:	jb     421c7b <flatcc_json_parser_struct_as_root@@Base+0x16ab>
  42169d:	test   rcx,rcx
  4216a0:	jne    4216ae <flatcc_json_parser_struct_as_root@@Base+0x10de>
  4216a2:	cmp    QWORD PTR [rsp+0x48],0x0
  4216a8:	jne    421b60 <flatcc_json_parser_struct_as_root@@Base+0x1590>
  4216ae:	lea    r9,[r13-0x1]
  4216b2:	mov    eax,0xffffffc3
  4216b7:	sub    eax,r15d
  4216ba:	vxorpd xmm1,xmm1,xmm1
  4216be:	vcvtsi2sd xmm1,xmm1,eax
  4216c2:	sub    r12d,ebp
  4216c5:	shlx   r12,r9,r12
  4216ca:	vmulsd xmm1,xmm1,QWORD PTR [rip+0x114de]        # 432bb0 <flatcc_builder_padding_base@@Base+0x2190>
  4216d2:	vcomisd xmm2,xmm1
  4216d6:	vcvttsd2si edx,xmm1
  4216da:	ja     4216f8 <flatcc_json_parser_struct_as_root@@Base+0x1128>
  4216dc:	vxorpd xmm3,xmm3,xmm3
  4216e0:	vcvtsi2sd xmm3,xmm3,edx
  4216e4:	vsubsd xmm1,xmm1,xmm3
  4216e8:	vucomisd xmm1,xmm2
  4216ec:	jp     421a68 <flatcc_json_parser_struct_as_root@@Base+0x1498>
  4216f2:	jne    421a68 <flatcc_json_parser_struct_as_root@@Base+0x1498>
  4216f8:	lea    eax,[rdx+0x162]
  4216fe:	add    edx,0x15b
  421704:	cmovns eax,edx
  421707:	lea    rdx,[rip+0x10e52]        # 432560 <flatcc_builder_padding_base@@Base+0x1b40>
  42170e:	sar    eax,0x3
  421711:	inc    eax
  421713:	cdqe   
  421715:	shl    rax,0x4
  421719:	add    rax,rdx
  42171c:	mov    r13,QWORD PTR [rax]
  42171f:	movsx  r14d,WORD PTR [rax+0x8]
  421724:	mov    rdi,QWORD PTR [rsp]
  421728:	movsx  eax,WORD PTR [rax+0xa]
  42172c:	mov    ecx,r14d
  42172f:	mov    esi,r15d
  421732:	mov    rdx,r13
  421735:	mov    QWORD PTR [rsp+0x40],r8
  42173a:	mov    QWORD PTR [rsp+0x38],r10
  42173f:	vmovsd QWORD PTR [rsp+0x30],xmm0
  421745:	mov    DWORD PTR [rsp+0x28],eax
  421749:	call   4213e0 <flatcc_json_parser_struct_as_root@@Base+0xe10>
  42174e:	mov    DWORD PTR [rsp+0x10],edx
  421752:	mov    rdi,r12
  421755:	mov    esi,ebp
  421757:	mov    rdx,r13
  42175a:	mov    QWORD PTR [rsp],rax
  42175e:	call   4213e0 <flatcc_json_parser_struct_as_root@@Base+0xe10>
  421763:	mov    r8,QWORD PTR [rsp+0x40]
  421768:	mov    r15,rdx
  42176b:	mov    rdi,r8
  42176e:	mov    rdx,r13
  421771:	mov    r12,rax
  421774:	call   4213e0 <flatcc_json_parser_struct_as_root@@Base+0xe10>
  421779:	lea    rdi,[rax+0x1]
  42177d:	dec    r12
  421780:	mov    rcx,rdi
  421783:	mov    DWORD PTR [rsp+0x40],edx
  421787:	sub    rcx,r12
  42178a:	cmp    r12,rdi
  42178d:	ja     421c57 <flatcc_json_parser_struct_as_root@@Base+0x1687>
  421793:	cmp    edx,r15d
  421796:	vmovsd xmm0,QWORD PTR [rsp+0x30]
  42179c:	mov    r10,QWORD PTR [rsp+0x38]
  4217a1:	jne    421c57 <flatcc_json_parser_struct_as_root@@Base+0x1687>
  4217a7:	mov    esi,DWORD PTR [rsp+0x10]
  4217ab:	mov    r9d,0x1
  4217b1:	lea    ebp,[rsi+0x41]
  4217b4:	imul   ebp,ebp,0x4d1
  4217ba:	mov    r14d,esi
  4217bd:	neg    r14d
  4217c0:	sar    ebp,0xc
  4217c3:	shlx   rax,r9,r14
  4217c8:	lea    r9d,[rbp+0x1]
  4217cc:	lea    rsi,[rip+0x10d4d]        # 432520 <flatcc_builder_padding_base@@Base+0x1b00>
  4217d3:	movsxd r11,r9d
  4217d6:	mov    r15,rax
  4217d9:	mov    r11d,DWORD PTR [rsi+r11*4]
  4217dd:	dec    r15
  4217e0:	mov    r8,rdi
  4217e3:	mov    QWORD PTR [rsp+0x30],rax
  4217e8:	shrx   rdx,rdi,r14
  4217ed:	and    r8,r15
  4217f0:	mov    eax,edx
  4217f2:	cmp    edx,r11d
  4217f5:	jae    421803 <flatcc_json_parser_struct_as_root@@Base+0x1233>
  4217f7:	movsxd rdx,ebp
  4217fa:	mov    r11d,DWORD PTR [rsi+rdx*4]
  4217fe:	mov    r9d,ebp
  421801:	dec    ebp
  421803:	test   r9d,r9d
  421806:	jle    421c48 <flatcc_json_parser_struct_as_root@@Base+0x1678>
  42180c:	xor    edx,edx
  42180e:	div    r11d
  421811:	add    eax,0x30
  421814:	mov    BYTE PTR [rbx],al
  421816:	mov    eax,edx
  421818:	mov    rsi,rax
  42181b:	shlx   rax,rax,r14
  421820:	add    rax,r8
  421823:	cmp    rcx,rax
  421826:	ja     421a70 <flatcc_json_parser_struct_as_root@@Base+0x14a0>
  42182c:	mov    r13d,0x1
  421832:	mov    r9d,0xcccccccd
  421838:	mov    QWORD PTR [rsp+0x38],r15
  42183d:	jmp    421866 <flatcc_json_parser_struct_as_root@@Base+0x1296>
  42183f:	nop
  421840:	mov    eax,esi
  421842:	xor    edx,edx
  421844:	div    r11d
  421847:	add    eax,0x30
  42184a:	mov    BYTE PTR [rbx+r13*1],al
  42184e:	mov    eax,edx
  421850:	shlx   rax,rax,r14
  421855:	add    rax,r8
  421858:	mov    esi,edx
  42185a:	inc    r13
  42185d:	cmp    rcx,rax
  421860:	ja     421a80 <flatcc_json_parser_struct_as_root@@Base+0x14b0>
  421866:	mov    eax,r11d
  421869:	mul    r9d
  42186c:	dec    ebp
  42186e:	lea    r12d,[r13+0x1]
  421872:	shr    edx,0x3
  421875:	mov    r11d,edx
  421878:	cmp    ebp,0xffffffff
  42187b:	jne    421840 <flatcc_json_parser_struct_as_root@@Base+0x1270>
  42187d:	mov    r15,QWORD PTR [rsp+0x38]
  421882:	mov    eax,r13d
  421885:	xor    r9d,r9d
  421888:	mov    esi,eax
  42188a:	lea    edx,[rax+0x1]
  42188d:	movsxd rdx,edx
  421890:	mov    eax,0x1
  421895:	add    esi,r9d
  421898:	nop    DWORD PTR [rax+rax*1+0x0]
  4218a0:	lea    r8,[r8+r8*4]
  4218a4:	add    r8,r8
  4218a7:	lea    rcx,[rcx+rcx*4]
  4218ab:	shrx   r9,r8,r14
  4218b0:	lea    rax,[rax+rax*4]
  4218b4:	add    r9d,0x30
  4218b8:	mov    ebp,esi
  4218ba:	add    rcx,rcx
  4218bd:	and    r8,r15
  4218c0:	mov    BYTE PTR [rbx+rdx*1-0x1],r9b
  4218c5:	mov    r12d,edx
  4218c8:	sub    ebp,edx
  4218ca:	add    rax,rax
  4218cd:	inc    rdx
  4218d0:	cmp    rcx,r8
  4218d3:	jbe    4218a0 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
  4218d5:	mov    rsi,QWORD PTR [rsp]
  4218d9:	mov    r11d,DWORD PTR [rsp+0x10]
  4218de:	mov    rdx,rdi
  4218e1:	vmovsd QWORD PTR [rsp+0x48],xmm0
  4218e7:	mov    QWORD PTR [rsp+0x38],r10
  4218ec:	sub    rdx,rsi
  4218ef:	cmp    DWORD PTR [rsp+0x40],r11d
  4218f4:	jne    421c57 <flatcc_json_parser_struct_as_root@@Base+0x1687>
  4218fa:	cmp    rdi,rsi
  4218fd:	jb     421c57 <flatcc_json_parser_struct_as_root@@Base+0x1687>
  421903:	sub    rsp,0x8
  421907:	push   rax
  421908:	imul   rdx,rax
  42190c:	mov    esi,r12d
  42190f:	mov    r9,QWORD PTR [rsp+0x40]
  421914:	mov    rdi,rbx
  421917:	call   420eb0 <flatcc_json_parser_struct_as_root@@Base+0x8e0>
  42191c:	pop    rdx
  42191d:	pop    rcx
  42191e:	vmovsd xmm0,QWORD PTR [rsp+0x48]
  421924:	mov    r10,QWORD PTR [rsp+0x38]
  421929:	mov    r14d,ebp
  42192c:	sub    r14d,DWORD PTR [rsp+0x28]
  421931:	test   eax,eax
  421933:	je     421b78 <flatcc_json_parser_struct_as_root@@Base+0x15a8>
  421939:	mov    r13d,0x2
  42193f:	cmp    r12d,0x2
  421943:	mov    edx,r13d
  421946:	mov    eax,DWORD PTR [rsp+0x28]
  42194a:	cmovge edx,r12d
  42194e:	sub    eax,ebp
  421950:	lea    edi,[rdx-0x1]
  421953:	cmp    edx,eax
  421955:	cmovg  edi,eax
  421958:	test   r14d,r14d
  42195b:	js     421ae0 <flatcc_json_parser_struct_as_root@@Base+0x1510>
  421961:	movsxd rdx,r12d
  421964:	lea    rax,[rbx+rdx*1]
  421968:	cmp    r14d,0x2
  42196c:	jg     421bb0 <flatcc_json_parser_struct_as_root@@Base+0x15e0>
  421972:	lea    ecx,[r14-0x1]
  421976:	lea    rdx,[rbx+rdx*1+0x1]
  42197b:	mov    esi,ecx
  42197d:	add    rdx,rsi
  421980:	test   r14d,r14d
  421983:	jle    42199d <flatcc_json_parser_struct_as_root@@Base+0x13cd>
  421985:	nop    DWORD PTR [rax]
  421988:	mov    BYTE PTR [rax],0x30
  42198b:	inc    rax
  42198e:	cmp    rdx,rax
  421991:	jne    421988 <flatcc_json_parser_struct_as_root@@Base+0x13b8>
  421993:	lea    eax,[rcx+r12*1+0x1]
  421998:	cdqe   
  42199a:	add    rax,rbx
  42199d:	mov    BYTE PTR [rax],0x0
  4219a0:	add    rsp,0x58
  4219a4:	sub    eax,r10d
  4219a7:	pop    rbx
  4219a8:	pop    rbp
  4219a9:	pop    r12
  4219ab:	pop    r13
  4219ad:	pop    r14
  4219af:	pop    r15
  4219b1:	ret    
  4219b2:	nop    WORD PTR [rax+rax*1+0x0]
  4219b8:	btc    r8,0x3f
  4219bd:	lea    rbx,[rdi+0x1]
  4219c1:	mov    BYTE PTR [rdi],0x2d
  4219c4:	vxorpd xmm0,xmm0,XMMWORD PTR [rip+0xe554]        # 42ff20 <_IO_stdin_used@@Base+0x3f20>
  4219cc:	test   r8,r8
  4219cf:	jne    42158b <flatcc_json_parser_struct_as_root@@Base+0xfbb>
  4219d5:	mov    r8d,0x30
  4219db:	mov    WORD PTR [rbx],r8w
  4219df:	lea    rax,[rbx+0x1]
  4219e3:	sub    eax,r10d
  4219e6:	add    rsp,0x58
  4219ea:	pop    rbx
  4219eb:	pop    rbp
  4219ec:	pop    r12
  4219ee:	pop    r13
  4219f0:	pop    r14
  4219f2:	pop    r15
  4219f4:	ret    
  4219f5:	nop    DWORD PTR [rax]
  4219f8:	vmovd  r9d,xmm0
  4219fd:	shr    r8,0x20
  421a01:	lea    rcx,[rip+0x10986]        # 43238e <flatcc_builder_padding_base@@Base+0x196e>
  421a08:	mov    rdx,0xffffffffffffffff
  421a0f:	mov    esi,0x1
  421a14:	xor    eax,eax
  421a16:	call   406280 <__sprintf_chk@plt>
  421a1b:	add    rsp,0x58
  421a1f:	pop    rbx
  421a20:	pop    rbp
  421a21:	pop    r12
  421a23:	pop    r13
  421a25:	pop    r14
  421a27:	mov    eax,0x15
  421a2c:	pop    r15
  421a2e:	ret    
  421a2f:	nop
  421a30:	mov    DWORD PTR [rbx],0x666e69
  421a36:	add    rsp,0x58
  421a3a:	lea    rax,[rbx+0x3]
  421a3e:	pop    rbx
  421a3f:	pop    rbp
  421a40:	pop    r12
  421a42:	pop    r13
  421a44:	pop    r14
  421a46:	sub    eax,r10d
  421a49:	pop    r15
  421a4b:	ret    
  421a4c:	nop    DWORD PTR [rax+0x0]
  421a50:	mov    r14,rcx
  421a53:	mov    r12d,0xfffffbcd
  421a59:	mov    r11d,0xfffffbce
  421a5f:	jmp    4215e5 <flatcc_json_parser_struct_as_root@@Base+0x1015>
  421a64:	nop    DWORD PTR [rax+0x0]
  421a68:	inc    edx
  421a6a:	jmp    4216f8 <flatcc_json_parser_struct_as_root@@Base+0x1128>
  421a6f:	nop
  421a70:	mov    r12d,0x1
  421a76:	nop    WORD PTR cs:[rax+rax*1+0x0]
  421a80:	mov    rsi,QWORD PTR [rsp]
  421a84:	mov    r9d,r11d
  421a87:	mov    rdx,rdi
  421a8a:	mov    QWORD PTR [rsp+0x38],r10
  421a8f:	vmovsd QWORD PTR [rsp+0x30],xmm0
  421a95:	shlx   r9,r9,r14
  421a9a:	sub    rdx,rsi
  421a9d:	cmp    rdi,rsi
  421aa0:	jb     421c57 <flatcc_json_parser_struct_as_root@@Base+0x1687>
  421aa6:	mov    esi,DWORD PTR [rsp+0x10]
  421aaa:	cmp    DWORD PTR [rsp+0x40],esi
  421aae:	jne    421c57 <flatcc_json_parser_struct_as_root@@Base+0x1687>
  421ab4:	sub    rsp,0x8
  421ab8:	push   0x1
  421aba:	mov    esi,r12d
  421abd:	mov    rdi,rbx
  421ac0:	mov    r8,rax
  421ac3:	call   420eb0 <flatcc_json_parser_struct_as_root@@Base+0x8e0>
  421ac8:	pop    rsi
  421ac9:	pop    rdi
  421aca:	vmovsd xmm0,QWORD PTR [rsp+0x30]
  421ad0:	mov    r10,QWORD PTR [rsp+0x38]
  421ad5:	jmp    421929 <flatcc_json_parser_struct_as_root@@Base+0x1359>
  421ada:	nop    WORD PTR [rax+rax*1+0x0]
  421ae0:	lea    edx,[r14+r12*1]
  421ae4:	cmp    edx,0xfffffffe
  421ae7:	jl     421af2 <flatcc_json_parser_struct_as_root@@Base+0x1522>
  421ae9:	cmp    eax,r12d
  421aec:	jge    421be0 <flatcc_json_parser_struct_as_root@@Base+0x1610>
  421af2:	lea    rax,[rbx+0x1]
  421af6:	cmp    r12d,0x1
  421afa:	je     421bb0 <flatcc_json_parser_struct_as_root@@Base+0x15e0>
  421b00:	test   edi,edi
  421b02:	jle    421b2f <flatcc_json_parser_struct_as_root@@Base+0x155f>
  421b04:	movsxd rdx,r12d
  421b07:	lea    rcx,[rbx+rdx*1-0x1]
  421b0c:	lea    rax,[rbx+rdx*1]
  421b10:	lea    edx,[rdi-0x1]
  421b13:	sub    rcx,rdx
  421b16:	nop    WORD PTR cs:[rax+rax*1+0x0]
  421b20:	movzx  edx,BYTE PTR [rax-0x1]
  421b24:	dec    rax
  421b27:	mov    BYTE PTR [rax+0x1],dl
  421b2a:	cmp    rcx,rax
  421b2d:	jne    421b20 <flatcc_json_parser_struct_as_root@@Base+0x1550>
  421b2f:	mov    eax,r12d
  421b32:	sub    eax,edi
  421b34:	cdqe   
  421b36:	mov    BYTE PTR [rbx+rax*1],0x2e
  421b3a:	lea    eax,[r12+0x1]
  421b3f:	cdqe   
  421b41:	add    rax,rbx
  421b44:	add    edi,r14d
  421b47:	je     42199d <flatcc_json_parser_struct_as_root@@Base+0x13cd>
  421b4d:	add    r12d,0x2
  421b51:	movsxd rsi,r12d
  421b54:	mov    QWORD PTR [rsp],r10
  421b58:	mov    BYTE PTR [rax],0x65
  421b5b:	add    rsi,rbx
  421b5e:	jmp    421bc3 <flatcc_json_parser_struct_as_root@@Base+0x15f3>
  421b60:	lea    r9,[r14*4-0x1]
  421b68:	lea    r12d,[r11-0x2]
  421b6c:	jmp    4216b2 <flatcc_json_parser_struct_as_root@@Base+0x10e2>
  421b71:	nop    DWORD PTR [rax+0x0]
  421b78:	mov    rdi,rbx
  421b7b:	lea    rcx,[rip+0x1081a]        # 43239c <flatcc_builder_padding_base@@Base+0x197c>
  421b82:	mov    rdx,0xffffffffffffffff
  421b89:	mov    esi,0x1
  421b8e:	mov    eax,0x1
  421b93:	mov    QWORD PTR [rsp],r10
  421b97:	call   406280 <__sprintf_chk@plt>
  421b9c:	mov    r10,QWORD PTR [rsp]
  421ba0:	sub    rbx,r10
  421ba3:	add    eax,ebx
  421ba5:	jmp    4219e6 <flatcc_json_parser_struct_as_root@@Base+0x1416>
  421baa:	nop    WORD PTR [rax+rax*1+0x0]
  421bb0:	inc    r12d
  421bb3:	mov    QWORD PTR [rsp],r10
  421bb7:	mov    BYTE PTR [rax],0x65
  421bba:	movsxd rsi,r12d
  421bbd:	add    rsi,rbx
  421bc0:	mov    edi,r14d
  421bc3:	call   420fb0 <flatcc_json_parser_struct_as_root@@Base+0x9e0>
  421bc8:	add    eax,r12d
  421bcb:	cdqe   
  421bcd:	add    rax,rbx
  421bd0:	mov    r10,QWORD PTR [rsp]
  421bd4:	jmp    42199d <flatcc_json_parser_struct_as_root@@Base+0x13cd>
  421bd9:	nop    DWORD PTR [rax+0x0]
  421be0:	movsxd rdx,r12d
  421be3:	mov    edi,0x2
  421be8:	sub    rdi,rdx
  421beb:	movsxd rax,r14d
  421bee:	sub    rdi,rax
  421bf1:	sub    r13d,r14d
  421bf4:	add    rdi,rbx
  421bf7:	mov    rsi,rbx
  421bfa:	sub    r13d,r12d
  421bfd:	mov    QWORD PTR [rsp],r10
  421c01:	call   406240 <memmove@plt>
  421c06:	mov    eax,0x2e30
  421c0b:	cmp    r13d,0x2
  421c0f:	mov    WORD PTR [rbx],ax
  421c12:	mov    r10,QWORD PTR [rsp]
  421c16:	jle    421c4f <flatcc_json_parser_struct_as_root@@Base+0x167f>
  421c18:	lea    edx,[r13-0x3]
  421c1c:	lea    rax,[rbx+0x2]
  421c20:	lea    rdx,[rbx+rdx*1+0x3]
  421c25:	nop    DWORD PTR [rax]
  421c28:	mov    BYTE PTR [rax],0x30
  421c2b:	inc    rax
  421c2e:	cmp    rdx,rax
  421c31:	jne    421c28 <flatcc_json_parser_struct_as_root@@Base+0x1658>
  421c33:	lea    eax,[r13+r12*1+0x0]
  421c38:	cdqe   
  421c3a:	add    rax,rbx
  421c3d:	jmp    42199d <flatcc_json_parser_struct_as_root@@Base+0x13cd>
  421c42:	nop    WORD PTR [rax+rax*1+0x0]
  421c48:	xor    eax,eax
  421c4a:	jmp    421888 <flatcc_json_parser_struct_as_root@@Base+0x12b8>
  421c4f:	mov    r13d,0x2
  421c55:	jmp    421c33 <flatcc_json_parser_struct_as_root@@Base+0x1663>
  421c57:	call   421510 <flatcc_json_parser_struct_as_root@@Base+0xf40>
  421c5c:	lea    rcx,[rip+0x1088d]        # 4324f0 <flatcc_builder_padding_base@@Base+0x1ad0>
  421c63:	mov    edx,0xbd
  421c68:	lea    rsi,[rip+0x10521]        # 432190 <flatcc_builder_padding_base@@Base+0x1770>
  421c6f:	lea    rdi,[rip+0x10714]        # 43238a <flatcc_builder_padding_base@@Base+0x196a>
  421c76:	call   4061b0 <__assert_fail@plt>
  421c7b:	lea    rcx,[rip+0x10866]        # 4324e8 <flatcc_builder_padding_base@@Base+0x1ac8>
  421c82:	mov    edx,0x8a
  421c87:	lea    rsi,[rip+0x10502]        # 432190 <flatcc_builder_padding_base@@Base+0x1770>
  421c8e:	lea    rdi,[rip+0x10573]        # 432208 <flatcc_builder_padding_base@@Base+0x17e8>
  421c95:	call   4061b0 <__assert_fail@plt>
  421c9a:	nop    WORD PTR [rax+rax*1+0x0]
  421ca0:	push   rbp
  421ca1:	mov    rbp,rdi
  421ca4:	push   rbx
  421ca5:	sub    rsp,0x18
  421ca9:	mov    rax,QWORD PTR fs:0x28
  421cb2:	mov    QWORD PTR [rsp+0x8],rax
  421cb7:	xor    eax,eax
  421cb9:	mov    DWORD PTR [rsp+0x4],0x0
  421cc1:	test   rsi,rsi
  421cc4:	je     421d3b <flatcc_json_parser_struct_as_root@@Base+0x176b>
  421cc6:	cmp    rdx,0x7
  421cca:	jbe    421d3b <flatcc_json_parser_struct_as_root@@Base+0x176b>
  421ccc:	test   rcx,rcx
  421ccf:	je     421cf3 <flatcc_json_parser_struct_as_root@@Base+0x1723>
  421cd1:	mov    rbx,rsi
  421cd4:	lea    rdi,[rsp+0x4]
  421cd9:	mov    edx,0x4
  421cde:	mov    rsi,rcx
  421ce1:	call   406170 <strncpy@plt>
  421ce6:	mov    eax,DWORD PTR [rsp+0x4]
  421cea:	cmp    DWORD PTR [rbx+0x4],eax
  421ced:	je     421cf3 <flatcc_json_parser_struct_as_root@@Base+0x1723>
  421cef:	test   eax,eax
  421cf1:	jne    421d0f <flatcc_json_parser_struct_as_root@@Base+0x173f>
  421cf3:	mov    rsi,QWORD PTR [rsp+0x8]
  421cf8:	xor    rsi,QWORD PTR fs:0x28
  421d01:	mov    eax,0x1
  421d06:	jne    421d67 <flatcc_json_parser_struct_as_root@@Base+0x1797>
  421d08:	add    rsp,0x18
  421d0c:	pop    rbx
  421d0d:	pop    rbp
  421d0e:	ret    
  421d0f:	cmp    DWORD PTR [rbp+0x3c],0x0
  421d13:	jne    421d1c <flatcc_json_parser_struct_as_root@@Base+0x174c>
  421d15:	mov    DWORD PTR [rbp+0x3c],0x1
  421d1c:	lea    rcx,[rip+0x106fd]        # 432420 <flatcc_builder_padding_base@@Base+0x1a00>
  421d23:	mov    edx,0x404
  421d28:	lea    rsi,[rip+0x10501]        # 432230 <flatcc_builder_padding_base@@Base+0x1810>
  421d2f:	lea    rdi,[rip+0x1066c]        # 4323a2 <flatcc_builder_padding_base@@Base+0x1982>
  421d36:	call   4061b0 <__assert_fail@plt>
  421d3b:	cmp    DWORD PTR [rbp+0x3c],0x0
  421d3f:	jne    421d48 <flatcc_json_parser_struct_as_root@@Base+0x1778>
  421d41:	mov    DWORD PTR [rbp+0x3c],0x1
  421d48:	lea    rcx,[rip+0x106d1]        # 432420 <flatcc_builder_padding_base@@Base+0x1a00>
  421d4f:	mov    edx,0x3fb
  421d54:	lea    rsi,[rip+0x104d5]        # 432230 <flatcc_builder_padding_base@@Base+0x1810>
  421d5b:	lea    rdi,[rip+0x10536]        # 432298 <flatcc_builder_padding_base@@Base+0x1878>
  421d62:	call   4061b0 <__assert_fail@plt>
  421d67:	call   4061a0 <__stack_chk_fail@plt>
  421d6c:	nop    DWORD PTR [rax+0x0]
  421d70:	mov    eax,ecx
  421d72:	mov    r10,QWORD PTR [rdx]
  421d75:	and    eax,0xffffff1f
  421d7a:	je     421e90 <flatcc_json_parser_struct_as_root@@Base+0x18c0>
  421d80:	lea    r9,[rip+0x10531]        # 4322b8 <flatcc_builder_padding_base@@Base+0x1898>
  421d87:	cmp    eax,0x1
  421d8a:	je     421e16 <flatcc_json_parser_struct_as_root@@Base+0x1846>
  421d90:	xor    ecx,ecx
  421d92:	mov    eax,0x3
  421d97:	mov    QWORD PTR [rdx],rcx
  421d9a:	ret    
  421d9b:	nop    DWORD PTR [rax+rax*1+0x0]
  421da0:	movzx  eax,BYTE PTR [rsi]
  421da3:	sub    r10,0x3
  421da7:	shr    al,0x2
  421daa:	movzx  eax,al
  421dad:	movzx  eax,BYTE PTR [r9+rax*1]
  421db2:	add    rdi,0x4
  421db6:	mov    BYTE PTR [rdi-0x4],al
  421db9:	add    rsi,0x3
  421dbd:	movzx  r8d,BYTE PTR [rsi-0x3]
  421dc2:	movzx  eax,BYTE PTR [rsi-0x2]
  421dc6:	shl    r8d,0x4
  421dca:	shr    al,0x4
  421dcd:	movzx  eax,al
  421dd0:	and    r8d,0x30
  421dd4:	or     r8d,eax
  421dd7:	movsxd r8,r8d
  421dda:	movzx  eax,BYTE PTR [r9+r8*1]
  421ddf:	mov    BYTE PTR [rdi-0x3],al
  421de2:	movzx  r8d,BYTE PTR [rsi-0x2]
  421de7:	movzx  eax,BYTE PTR [rsi-0x1]
  421deb:	shl    r8d,0x2
  421def:	shr    al,0x6
  421df2:	movzx  eax,al
  421df5:	and    r8d,0x3c
  421df9:	or     r8d,eax
  421dfc:	movsxd r8,r8d
  421dff:	movzx  eax,BYTE PTR [r9+r8*1]
  421e04:	mov    BYTE PTR [rdi-0x2],al
  421e07:	movzx  eax,BYTE PTR [rsi-0x1]
  421e0b:	and    eax,0x3f
  421e0e:	movzx  eax,BYTE PTR [r9+rax*1]
  421e13:	mov    BYTE PTR [rdi-0x1],al
  421e16:	cmp    r10,0x2
  421e1a:	ja     421da0 <flatcc_json_parser_struct_as_root@@Base+0x17d0>
  421e1c:	mov    eax,ecx
  421e1e:	and    eax,0x80
  421e23:	cmp    r10,0x1
  421e27:	je     421ea0 <flatcc_json_parser_struct_as_root@@Base+0x18d0>
  421e29:	cmp    r10,0x2
  421e2d:	jne    421e7d <flatcc_json_parser_struct_as_root@@Base+0x18ad>
  421e2f:	movzx  ecx,BYTE PTR [rsi]
  421e32:	shr    cl,0x2
  421e35:	movzx  ecx,cl
  421e38:	movzx  ecx,BYTE PTR [r9+rcx*1]
  421e3d:	mov    BYTE PTR [rdi],cl
  421e3f:	movzx  ecx,BYTE PTR [rsi]
  421e42:	movzx  r8d,BYTE PTR [rsi+0x1]
  421e47:	shl    ecx,0x4
  421e4a:	shr    r8b,0x4
  421e4e:	and    ecx,0x30
  421e51:	movzx  r8d,r8b
  421e55:	or     ecx,r8d
  421e58:	movsxd rcx,ecx
  421e5b:	movzx  ecx,BYTE PTR [r9+rcx*1]
  421e60:	mov    BYTE PTR [rdi+0x1],cl
  421e63:	movzx  ecx,BYTE PTR [rsi+0x1]
  421e67:	shl    ecx,0x2
  421e6a:	and    ecx,0x3c
  421e6d:	movzx  ecx,BYTE PTR [r9+rcx*1]
  421e72:	mov    BYTE PTR [rdi+0x2],cl
  421e75:	test   eax,eax
  421e77:	je     421ee0 <flatcc_json_parser_struct_as_root@@Base+0x1910>
  421e79:	mov    BYTE PTR [rdi+0x3],0x3d
  421e7d:	mov    rcx,QWORD PTR [rdx]
  421e80:	xor    eax,eax
  421e82:	mov    QWORD PTR [rdx],rcx
  421e85:	ret    
  421e86:	nop    WORD PTR cs:[rax+rax*1+0x0]
  421e90:	lea    r9,[rip+0x10469]        # 432300 <flatcc_builder_padding_base@@Base+0x18e0>
  421e97:	jmp    421e16 <flatcc_json_parser_struct_as_root@@Base+0x1846>
  421e9c:	nop    DWORD PTR [rax+0x0]
  421ea0:	movzx  ecx,BYTE PTR [rsi]
  421ea3:	shr    cl,0x2
  421ea6:	movzx  ecx,cl
  421ea9:	movzx  ecx,BYTE PTR [r9+rcx*1]
  421eae:	mov    BYTE PTR [rdi],cl
  421eb0:	movzx  ecx,BYTE PTR [rsi]
  421eb3:	shl    ecx,0x4
  421eb6:	and    ecx,0x30
  421eb9:	movzx  ecx,BYTE PTR [r9+rcx*1]
  421ebe:	mov    BYTE PTR [rdi+0x1],cl
  421ec1:	test   eax,eax
  421ec3:	je     421ee0 <flatcc_json_parser_struct_as_root@@Base+0x1910>
  421ec5:	mov    eax,0x3d3d
  421eca:	mov    WORD PTR [rdi+0x2],ax
  421ece:	xor    eax,eax
  421ed0:	mov    rcx,QWORD PTR [rdx]
  421ed3:	jmp    421d97 <flatcc_json_parser_struct_as_root@@Base+0x17c7>
  421ed8:	nop    DWORD PTR [rax+rax*1+0x0]
  421ee0:	mov    rcx,QWORD PTR [rdx]
  421ee3:	mov    QWORD PTR [rdx],rcx
  421ee6:	ret    
  421ee7:	nop    WORD PTR [rax+rax*1+0x0]
  421ef0:	push   r14
  421ef2:	mov    r14,rdx
  421ef5:	push   r13
  421ef7:	mov    r13,rdi
  421efa:	push   r12
  421efc:	push   rbp
  421efd:	mov    rbp,rsi
  421f00:	push   rbx
  421f01:	mov    rax,QWORD PTR [rdi+0x28]
  421f05:	lea    rdx,[rax+0x1]
  421f09:	mov    QWORD PTR [rdi+0x28],rdx
  421f0d:	mov    BYTE PTR [rax],0x22
  421f10:	movzx  ebx,BYTE PTR [rsi]
  421f13:	cmp    bl,0x1f
  421f16:	jbe    42203e <flatcc_json_parser_struct_as_root@@Base+0x1a6e>
  421f1c:	nop    DWORD PTR [rax+0x0]
  421f20:	cmp    bl,0x22
  421f23:	je     42203e <flatcc_json_parser_struct_as_root@@Base+0x1a6e>
  421f29:	cmp    bl,0x5c
  421f2c:	je     42203e <flatcc_json_parser_struct_as_root@@Base+0x1a6e>
  421f32:	nop    WORD PTR [rax+rax*1+0x0]
  421f38:	inc    rbp
  421f3b:	movzx  ebx,BYTE PTR [rbp+0x0]
  421f3f:	cmp    bl,0x1f
  421f42:	jbe    421f4e <flatcc_json_parser_struct_as_root@@Base+0x197e>
  421f44:	cmp    bl,0x22
  421f47:	je     421f4e <flatcc_json_parser_struct_as_root@@Base+0x197e>
  421f49:	cmp    bl,0x5c
  421f4c:	jne    421f38 <flatcc_json_parser_struct_as_root@@Base+0x1968>
  421f4e:	mov    r12,rbp
  421f51:	sub    r12,rsi
  421f54:	sub    r14,r12
  421f57:	mov    rdi,QWORD PTR [r13+0x28]
  421f5b:	mov    rdx,r12
  421f5e:	lea    rax,[rdi+r12*1]
  421f62:	cmp    QWORD PTR [r13+0x20],rax
  421f66:	ja     422080 <flatcc_json_parser_struct_as_root@@Base+0x1ab0>
  421f6c:	mov    rdi,r13
  421f6f:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  421f74:	mov    r12,QWORD PTR [r13+0x28]
  421f78:	lea    rax,[r12+0x1]
  421f7d:	mov    QWORD PTR [r13+0x28],rax
  421f81:	test   r14,r14
  421f84:	je     42209f <flatcc_json_parser_struct_as_root@@Base+0x1acf>
  421f8a:	mov    BYTE PTR [r12],0x5c
  421f8f:	cmp    bl,0xc
  421f92:	je     4220b0 <flatcc_json_parser_struct_as_root@@Base+0x1ae0>
  421f98:	ja     422050 <flatcc_json_parser_struct_as_root@@Base+0x1a80>
  421f9e:	cmp    bl,0x9
  421fa1:	je     422128 <flatcc_json_parser_struct_as_root@@Base+0x1b58>
  421fa7:	cmp    bl,0xa
  421faa:	je     422110 <flatcc_json_parser_struct_as_root@@Base+0x1b40>
  421fb0:	cmp    bl,0x8
  421fb3:	je     4220f8 <flatcc_json_parser_struct_as_root@@Base+0x1b28>
  421fb9:	mov    rax,QWORD PTR [r13+0x28]
  421fbd:	mov    ecx,ebx
  421fbf:	lea    rdx,[rax+0x1]
  421fc3:	mov    QWORD PTR [r13+0x28],rdx
  421fc7:	mov    BYTE PTR [rax],0x75
  421fca:	shr    cl,0x4
  421fcd:	cmp    cl,0xa
  421fd0:	mov    rax,QWORD PTR [r13+0x28]
  421fd4:	lea    rdx,[rax+0x1]
  421fd8:	mov    QWORD PTR [r13+0x28],rdx
  421fdc:	mov    BYTE PTR [rax],0x30
  421fdf:	mov    rax,QWORD PTR [r13+0x28]
  421fe3:	lea    rdx,[rax+0x1]
  421fe7:	mov    QWORD PTR [r13+0x28],rdx
  421feb:	mov    BYTE PTR [rax],0x30
  421fee:	sbb    eax,eax
  421ff0:	and    eax,0xffffffd9
  421ff3:	mov    rdx,QWORD PTR [r13+0x28]
  421ff7:	lea    eax,[rax+rcx*1+0x57]
  421ffb:	lea    rsi,[rdx+0x1]
  421fff:	mov    QWORD PTR [r13+0x28],rsi
  422003:	mov    BYTE PTR [rdx],al
  422005:	and    ebx,0xf
  422008:	cmp    bl,0xa
  42200b:	mov    rdx,QWORD PTR [r13+0x28]
  42200f:	sbb    eax,eax
  422011:	and    eax,0xffffffd9
  422014:	lea    rcx,[rdx+0x1]
  422018:	lea    ebx,[rax+rbx*1+0x57]
  42201c:	mov    QWORD PTR [r13+0x28],rcx
  422020:	mov    BYTE PTR [rdx],bl
  422022:	nop    WORD PTR [rax+rax*1+0x0]
  422028:	lea    rsi,[rbp+0x1]
  42202c:	movzx  ebx,BYTE PTR [rsi]
  42202f:	dec    r14
  422032:	mov    rbp,rsi
  422035:	cmp    bl,0x1f
  422038:	ja     421f20 <flatcc_json_parser_struct_as_root@@Base+0x1950>
  42203e:	xor    r12d,r12d
  422041:	jmp    421f57 <flatcc_json_parser_struct_as_root@@Base+0x1987>
  422046:	nop    WORD PTR cs:[rax+rax*1+0x0]
  422050:	cmp    bl,0x22
  422053:	je     4220e0 <flatcc_json_parser_struct_as_root@@Base+0x1b10>
  422059:	cmp    bl,0x5c
  42205c:	je     4220c8 <flatcc_json_parser_struct_as_root@@Base+0x1af8>
  42205e:	cmp    bl,0xd
  422061:	jne    421fb9 <flatcc_json_parser_struct_as_root@@Base+0x19e9>
  422067:	mov    rax,QWORD PTR [r13+0x28]
  42206b:	lea    rdx,[rax+0x1]
  42206f:	mov    QWORD PTR [r13+0x28],rdx
  422073:	mov    BYTE PTR [rax],0x72
  422076:	jmp    422028 <flatcc_json_parser_struct_as_root@@Base+0x1a58>
  422078:	nop    DWORD PTR [rax+rax*1+0x0]
  422080:	call   406210 <memcpy@plt>
  422085:	add    r12,QWORD PTR [r13+0x28]
  422089:	lea    rax,[r12+0x1]
  42208e:	mov    QWORD PTR [r13+0x28],r12
  422092:	mov    QWORD PTR [r13+0x28],rax
  422096:	test   r14,r14
  422099:	jne    421f8a <flatcc_json_parser_struct_as_root@@Base+0x19ba>
  42209f:	mov    BYTE PTR [r12],0x22
  4220a4:	pop    rbx
  4220a5:	pop    rbp
  4220a6:	pop    r12
  4220a8:	pop    r13
  4220aa:	pop    r14
  4220ac:	ret    
  4220ad:	nop    DWORD PTR [rax]
  4220b0:	mov    rax,QWORD PTR [r13+0x28]
  4220b4:	lea    rdx,[rax+0x1]
  4220b8:	mov    QWORD PTR [r13+0x28],rdx
  4220bc:	mov    BYTE PTR [rax],0x66
  4220bf:	jmp    422028 <flatcc_json_parser_struct_as_root@@Base+0x1a58>
  4220c4:	nop    DWORD PTR [rax+0x0]
  4220c8:	mov    rax,QWORD PTR [r13+0x28]
  4220cc:	lea    rdx,[rax+0x1]
  4220d0:	mov    QWORD PTR [r13+0x28],rdx
  4220d4:	mov    BYTE PTR [rax],0x5c
  4220d7:	jmp    422028 <flatcc_json_parser_struct_as_root@@Base+0x1a58>
  4220dc:	nop    DWORD PTR [rax+0x0]
  4220e0:	mov    rax,QWORD PTR [r13+0x28]
  4220e4:	lea    rdx,[rax+0x1]
  4220e8:	mov    QWORD PTR [r13+0x28],rdx
  4220ec:	mov    BYTE PTR [rax],0x22
  4220ef:	jmp    422028 <flatcc_json_parser_struct_as_root@@Base+0x1a58>
  4220f4:	nop    DWORD PTR [rax+0x0]
  4220f8:	mov    rax,QWORD PTR [r13+0x28]
  4220fc:	lea    rdx,[rax+0x1]
  422100:	mov    QWORD PTR [r13+0x28],rdx
  422104:	mov    BYTE PTR [rax],0x62
  422107:	jmp    422028 <flatcc_json_parser_struct_as_root@@Base+0x1a58>
  42210c:	nop    DWORD PTR [rax+0x0]
  422110:	mov    rax,QWORD PTR [r13+0x28]
  422114:	lea    rdx,[rax+0x1]
  422118:	mov    QWORD PTR [r13+0x28],rdx
  42211c:	mov    BYTE PTR [rax],0x6e
  42211f:	jmp    422028 <flatcc_json_parser_struct_as_root@@Base+0x1a58>
  422124:	nop    DWORD PTR [rax+0x0]
  422128:	mov    rax,QWORD PTR [r13+0x28]
  42212c:	lea    rdx,[rax+0x1]
  422130:	mov    QWORD PTR [r13+0x28],rdx
  422134:	mov    BYTE PTR [rax],0x74
  422137:	jmp    422028 <flatcc_json_parser_struct_as_root@@Base+0x1a58>
  42213c:	nop    DWORD PTR [rax+0x0]
  422140:	push   r13
  422142:	mov    r13,rsi
  422145:	push   r12
  422147:	mov    r12,rdx
  42214a:	push   rbp
  42214b:	push   rbx
  42214c:	mov    rbx,rdi
  42214f:	sub    rsp,0x8
  422153:	cmp    BYTE PTR [rdi+0x31],0x0
  422157:	mov    rsi,QWORD PTR [rdi+0x28]
  42215b:	jne    422200 <flatcc_json_parser_struct_as_root@@Base+0x1c30>
  422161:	cmp    QWORD PTR [rdi+0x20],rsi
  422165:	jbe    4221d8 <flatcc_json_parser_struct_as_root@@Base+0x1c08>
  422167:	mov    BYTE PTR [rsi],0x22
  42216a:	xor    edi,edi
  42216c:	mov    rdx,r12
  42216f:	cmp    BYTE PTR [rbx+0x32],0x0
  422173:	sete   dil
  422177:	add    rdi,QWORD PTR [rbx+0x28]
  42217b:	lea    rax,[rdi+r12*1]
  42217f:	mov    QWORD PTR [rbx+0x28],rdi
  422183:	mov    rsi,r13
  422186:	cmp    QWORD PTR [rbx+0x20],rax
  42218a:	jbe    4221e8 <flatcc_json_parser_struct_as_root@@Base+0x1c18>
  42218c:	call   406210 <memcpy@plt>
  422191:	add    r12,QWORD PTR [rbx+0x28]
  422195:	mov    QWORD PTR [rbx+0x28],r12
  422199:	mov    BYTE PTR [r12],0x22
  42219e:	xor    eax,eax
  4221a0:	cmp    BYTE PTR [rbx+0x32],0x0
  4221a4:	sete   al
  4221a7:	add    rax,QWORD PTR [rbx+0x28]
  4221ab:	lea    rdx,[rax+0x1]
  4221af:	mov    QWORD PTR [rbx+0x28],rdx
  4221b3:	mov    BYTE PTR [rax],0x3a
  4221b6:	mov    rax,QWORD PTR [rbx+0x28]
  4221ba:	mov    BYTE PTR [rax],0x20
  4221bd:	xor    eax,eax
  4221bf:	cmp    BYTE PTR [rbx+0x31],0x0
  4221c3:	setne  al
  4221c6:	add    QWORD PTR [rbx+0x28],rax
  4221ca:	add    rsp,0x8
  4221ce:	pop    rbx
  4221cf:	pop    rbp
  4221d0:	pop    r12
  4221d2:	pop    r13
  4221d4:	ret    
  4221d5:	nop    DWORD PTR [rax]
  4221d8:	xor    esi,esi
  4221da:	call   QWORD PTR [rdi+0x48]
  4221dd:	mov    rsi,QWORD PTR [rbx+0x28]
  4221e1:	jmp    422167 <flatcc_json_parser_struct_as_root@@Base+0x1b97>
  4221e3:	nop    DWORD PTR [rax+rax*1+0x0]
  4221e8:	mov    rdi,rbx
  4221eb:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4221f0:	mov    r12,QWORD PTR [rbx+0x28]
  4221f4:	jmp    422199 <flatcc_json_parser_struct_as_root@@Base+0x1bc9>
  4221f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  422200:	lea    rax,[rsi+0x1]
  422204:	mov    QWORD PTR [rdi+0x28],rax
  422208:	mov    BYTE PTR [rsi],0xa
  42220b:	movzx  esi,BYTE PTR [rdi+0x31]
  42220f:	imul   esi,DWORD PTR [rdi+0x38]
  422213:	mov    rdi,QWORD PTR [rdi+0x28]
  422217:	movsxd rbp,esi
  42221a:	lea    rax,[rdi+rbp*1]
  42221e:	cmp    QWORD PTR [rbx+0x20],rax
  422222:	jae    422240 <flatcc_json_parser_struct_as_root@@Base+0x1c70>
  422224:	mov    rsi,rbp
  422227:	mov    rdi,rbx
  42222a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42222f:	mov    rsi,QWORD PTR [rbx+0x28]
  422233:	jmp    422167 <flatcc_json_parser_struct_as_root@@Base+0x1b97>
  422238:	nop    DWORD PTR [rax+rax*1+0x0]
  422240:	mov    esi,0x20
  422245:	mov    rdx,rbp
  422248:	call   4061c0 <memset@plt>
  42224d:	mov    rsi,QWORD PTR [rbx+0x28]
  422251:	add    rsi,rbp
  422254:	mov    QWORD PTR [rbx+0x28],rsi
  422258:	jmp    422167 <flatcc_json_parser_struct_as_root@@Base+0x1b97>
  42225d:	nop    DWORD PTR [rax]

0000000000422260 <flatcc_json_printer_error_string@@Base>:
  422260:	endbr64 
  422264:	lea    rax,[rip+0x10161]        # 4323cc <flatcc_builder_padding_base@@Base+0x19ac>
  42226b:	cmp    edi,0x1
  42226e:	je     422293 <flatcc_json_printer_error_string@@Base+0x33>
  422270:	jle    422298 <flatcc_json_printer_error_string@@Base+0x38>
  422272:	lea    rax,[rip+0x10144]        # 4323bd <flatcc_builder_padding_base@@Base+0x199d>
  422279:	cmp    edi,0x2
  42227c:	je     422293 <flatcc_json_printer_error_string@@Base+0x33>
  42227e:	cmp    edi,0x3
  422281:	lea    rax,[rip+0xea93]        # 430d1b <flatcc_builder_padding_base@@Base+0x2fb>
  422288:	lea    rdx,[rip+0xe991]        # 430c20 <flatcc_builder_padding_base@@Base+0x200>
  42228f:	cmovne rax,rdx
  422293:	ret    
  422294:	nop    DWORD PTR [rax+0x0]
  422298:	test   edi,edi
  42229a:	lea    rdx,[rip+0xe97f]        # 430c20 <flatcc_builder_padding_base@@Base+0x200>
  4222a1:	lea    rax,[rip+0xe980]        # 430c28 <flatcc_builder_padding_base@@Base+0x208>
  4222a8:	cmovne rax,rdx
  4222ac:	ret    
  4222ad:	nop    DWORD PTR [rax]

00000000004222b0 <flatcc_json_printer_fmt_float@@Base>:
  4222b0:	endbr64 
  4222b4:	vcvtss2sd xmm0,xmm0,xmm0
  4222b8:	jmp    421540 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  4222bd:	nop    DWORD PTR [rax]

00000000004222c0 <flatcc_json_printer_fmt_double@@Base>:
  4222c0:	endbr64 
  4222c4:	jmp    421540 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  4222c9:	nop    DWORD PTR [rax+0x0]

00000000004222d0 <flatcc_json_printer_fmt_bool@@Base>:
  4222d0:	endbr64 
  4222d4:	test   esi,esi
  4222d6:	jne    4222f0 <flatcc_json_printer_fmt_bool@@Base+0x20>
  4222d8:	mov    DWORD PTR [rdi],0x736c6166
  4222de:	mov    BYTE PTR [rdi+0x4],0x65
  4222e2:	mov    eax,0x5
  4222e7:	ret    
  4222e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4222f0:	mov    DWORD PTR [rdi],0x65757274
  4222f6:	mov    eax,0x4
  4222fb:	ret    
  4222fc:	nop    DWORD PTR [rax+0x0]

0000000000422300 <flatcc_json_printer_string@@Base>:
  422300:	endbr64 
  422304:	movsxd rdx,edx
  422307:	jmp    421ef0 <flatcc_json_parser_struct_as_root@@Base+0x1920>
  42230c:	nop    DWORD PTR [rax+0x0]

0000000000422310 <flatcc_json_printer_write@@Base>:
  422310:	endbr64 
  422314:	push   rbp
  422315:	movsxd rbp,edx
  422318:	push   rbx
  422319:	sub    rsp,0x8
  42231d:	mov    rax,QWORD PTR [rdi+0x28]
  422321:	lea    rdx,[rax+rbp*1]
  422325:	cmp    QWORD PTR [rdi+0x20],rdx
  422329:	ja     422340 <flatcc_json_printer_write@@Base+0x30>
  42232b:	add    rsp,0x8
  42232f:	pop    rbx
  422330:	mov    rdx,rbp
  422333:	pop    rbp
  422334:	jmp    421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  422339:	nop    DWORD PTR [rax+0x0]
  422340:	mov    rbx,rdi
  422343:	mov    rdx,rbp
  422346:	mov    rdi,rax
  422349:	call   406210 <memcpy@plt>
  42234e:	add    QWORD PTR [rbx+0x28],rbp
  422352:	add    rsp,0x8
  422356:	pop    rbx
  422357:	pop    rbp
  422358:	ret    
  422359:	nop    DWORD PTR [rax+0x0]

0000000000422360 <flatcc_json_printer_nl@@Base>:
  422360:	endbr64 
  422364:	mov    rax,QWORD PTR [rdi+0x28]
  422368:	lea    rdx,[rax+0x1]
  42236c:	mov    QWORD PTR [rdi+0x28],rdx
  422370:	mov    BYTE PTR [rax],0xa
  422373:	mov    rax,QWORD PTR [rdi+0x20]
  422377:	cmp    QWORD PTR [rdi+0x28],rax
  42237b:	jb     422388 <flatcc_json_printer_nl@@Base+0x28>
  42237d:	mov    rax,QWORD PTR [rdi+0x48]
  422381:	xor    esi,esi
  422383:	jmp    rax
  422385:	nop    DWORD PTR [rax]
  422388:	ret    
  422389:	nop    DWORD PTR [rax+0x0]

0000000000422390 <flatcc_json_printer_char@@Base>:
  422390:	endbr64 
  422394:	mov    rax,QWORD PTR [rdi+0x28]
  422398:	lea    rdx,[rax+0x1]
  42239c:	mov    QWORD PTR [rdi+0x28],rdx
  4223a0:	mov    BYTE PTR [rax],sil
  4223a3:	ret    
  4223a4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4223af:	nop

00000000004223b0 <flatcc_json_printer_indent@@Base>:
  4223b0:	endbr64 
  4223b4:	push   rbp
  4223b5:	push   rbx
  4223b6:	sub    rsp,0x8
  4223ba:	movzx  ebp,BYTE PTR [rdi+0x31]
  4223be:	mov    rax,QWORD PTR [rdi+0x28]
  4223c2:	imul   ebp,DWORD PTR [rdi+0x38]
  4223c6:	movsxd rbp,ebp
  4223c9:	lea    rdx,[rax+rbp*1]
  4223cd:	cmp    QWORD PTR [rdi+0x20],rdx
  4223d1:	jae    4223e8 <flatcc_json_printer_indent@@Base+0x38>
  4223d3:	add    rsp,0x8
  4223d7:	pop    rbx
  4223d8:	mov    rsi,rbp
  4223db:	pop    rbp
  4223dc:	jmp    421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4223e1:	nop    DWORD PTR [rax+0x0]
  4223e8:	mov    rbx,rdi
  4223eb:	mov    rdx,rbp
  4223ee:	mov    esi,0x20
  4223f3:	mov    rdi,rax
  4223f6:	call   4061c0 <memset@plt>
  4223fb:	add    QWORD PTR [rbx+0x28],rbp
  4223ff:	add    rsp,0x8
  422403:	pop    rbx
  422404:	pop    rbp
  422405:	ret    
  422406:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000422410 <flatcc_json_printer_add_level@@Base>:
  422410:	endbr64 
  422414:	add    DWORD PTR [rdi+0x38],esi
  422417:	ret    
  422418:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000422420 <flatcc_json_printer_get_level@@Base>:
  422420:	endbr64 
  422424:	mov    eax,DWORD PTR [rdi+0x38]
  422427:	ret    
  422428:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000422430 <flatcc_json_printer_uint8@@Base>:
  422430:	endbr64 
  422434:	mov    r8,rdi
  422437:	mov    edi,esi
  422439:	mov    rsi,QWORD PTR [r8+0x28]
  42243d:	movzx  edi,dil
  422441:	call   421350 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  422446:	cdqe   
  422448:	add    QWORD PTR [r8+0x28],rax
  42244c:	ret    
  42244d:	nop    DWORD PTR [rax]

0000000000422450 <flatcc_json_printer_uint16@@Base>:
  422450:	endbr64 
  422454:	mov    r11,rdi
  422457:	mov    edi,esi
  422459:	mov    rsi,QWORD PTR [r11+0x28]
  42245d:	movzx  edi,di
  422460:	call   4205e0 <flatcc_json_parser_struct_as_root@@Base+0x10>
  422465:	cdqe   
  422467:	add    QWORD PTR [r11+0x28],rax
  42246b:	ret    
  42246c:	nop    DWORD PTR [rax+0x0]

0000000000422470 <flatcc_json_printer_uint32@@Base>:
  422470:	endbr64 
  422474:	push   rbx
  422475:	mov    rbx,rdi
  422478:	mov    edi,esi
  42247a:	mov    rsi,QWORD PTR [rbx+0x28]
  42247e:	call   420710 <flatcc_json_parser_struct_as_root@@Base+0x140>
  422483:	cdqe   
  422485:	add    QWORD PTR [rbx+0x28],rax
  422489:	pop    rbx
  42248a:	ret    
  42248b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000422490 <flatcc_json_printer_uint64@@Base>:
  422490:	endbr64 
  422494:	push   rbx
  422495:	mov    rbx,rdi
  422498:	mov    rdi,rsi
  42249b:	mov    rsi,QWORD PTR [rbx+0x28]
  42249f:	call   4209c0 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  4224a4:	cdqe   
  4224a6:	add    QWORD PTR [rbx+0x28],rax
  4224aa:	pop    rbx
  4224ab:	ret    
  4224ac:	nop    DWORD PTR [rax+0x0]

00000000004224b0 <flatcc_json_printer_int8@@Base>:
  4224b0:	endbr64 
  4224b4:	mov    eax,esi
  4224b6:	movsx  r8d,al
  4224ba:	mov    r9,rdi
  4224bd:	mov    rsi,QWORD PTR [rdi+0x28]
  4224c1:	shr    r8d,0x1f
  4224c5:	mov    edi,eax
  4224c7:	test   al,al
  4224c9:	jns    4224d3 <flatcc_json_printer_int8@@Base+0x23>
  4224cb:	mov    BYTE PTR [rsi],0x2d
  4224ce:	neg    edi
  4224d0:	inc    rsi
  4224d3:	movzx  edi,dil
  4224d7:	call   421350 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  4224dc:	add    r8d,eax
  4224df:	movsxd r8,r8d
  4224e2:	add    QWORD PTR [r9+0x28],r8
  4224e6:	ret    
  4224e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004224f0 <flatcc_json_printer_int16@@Base>:
  4224f0:	endbr64 
  4224f4:	push   rbx
  4224f5:	mov    eax,esi
  4224f7:	movsx  r11d,ax
  4224fb:	mov    rbx,rdi
  4224fe:	mov    rsi,QWORD PTR [rdi+0x28]
  422502:	shr    r11d,0x1f
  422506:	mov    edi,eax
  422508:	test   ax,ax
  42250b:	jns    422515 <flatcc_json_printer_int16@@Base+0x25>
  42250d:	mov    BYTE PTR [rsi],0x2d
  422510:	neg    edi
  422512:	inc    rsi
  422515:	movzx  edi,di
  422518:	call   4205e0 <flatcc_json_parser_struct_as_root@@Base+0x10>
  42251d:	add    r11d,eax
  422520:	movsxd r11,r11d
  422523:	add    QWORD PTR [rbx+0x28],r11
  422527:	pop    rbx
  422528:	ret    
  422529:	nop    DWORD PTR [rax+0x0]

0000000000422530 <flatcc_json_printer_int32@@Base>:
  422530:	endbr64 
  422534:	push   rbp
  422535:	mov    rbp,rdi
  422538:	mov    edi,esi
  42253a:	push   rbx
  42253b:	mov    ebx,edi
  42253d:	mov    rsi,QWORD PTR [rbp+0x28]
  422541:	shr    ebx,0x1f
  422544:	test   edi,edi
  422546:	jns    422550 <flatcc_json_printer_int32@@Base+0x20>
  422548:	mov    BYTE PTR [rsi],0x2d
  42254b:	neg    edi
  42254d:	inc    rsi
  422550:	call   420710 <flatcc_json_parser_struct_as_root@@Base+0x140>
  422555:	add    ebx,eax
  422557:	movsxd rbx,ebx
  42255a:	add    QWORD PTR [rbp+0x28],rbx
  42255e:	pop    rbx
  42255f:	pop    rbp
  422560:	ret    
  422561:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  42256c:	nop    DWORD PTR [rax+0x0]

0000000000422570 <flatcc_json_printer_int64@@Base>:
  422570:	endbr64 
  422574:	push   rbp
  422575:	push   rbx
  422576:	mov    rbx,rdi
  422579:	mov    rdi,rsi
  42257c:	mov    rbp,rdi
  42257f:	mov    rsi,QWORD PTR [rbx+0x28]
  422583:	shr    rbp,0x3f
  422587:	test   rdi,rdi
  42258a:	jns    422595 <flatcc_json_printer_int64@@Base+0x25>
  42258c:	mov    BYTE PTR [rsi],0x2d
  42258f:	neg    rdi
  422592:	inc    rsi
  422595:	call   4209c0 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  42259a:	add    eax,ebp
  42259c:	cdqe   
  42259e:	add    QWORD PTR [rbx+0x28],rax
  4225a2:	pop    rbx
  4225a3:	pop    rbp
  4225a4:	ret    
  4225a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004225b0 <flatcc_json_printer_float@@Base>:
  4225b0:	endbr64 
  4225b4:	push   rbx
  4225b5:	mov    rbx,rdi
  4225b8:	vcvtss2sd xmm0,xmm0,xmm0
  4225bc:	mov    rdi,QWORD PTR [rdi+0x28]
  4225c0:	call   421540 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  4225c5:	cdqe   
  4225c7:	add    QWORD PTR [rbx+0x28],rax
  4225cb:	pop    rbx
  4225cc:	ret    
  4225cd:	nop    DWORD PTR [rax]

00000000004225d0 <flatcc_json_printer_double@@Base>:
  4225d0:	endbr64 
  4225d4:	push   rbx
  4225d5:	mov    rbx,rdi
  4225d8:	mov    rdi,QWORD PTR [rdi+0x28]
  4225dc:	call   421540 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  4225e1:	cdqe   
  4225e3:	add    QWORD PTR [rbx+0x28],rax
  4225e7:	pop    rbx
  4225e8:	ret    
  4225e9:	nop    DWORD PTR [rax+0x0]

00000000004225f0 <flatcc_json_printer_enum@@Base>:
  4225f0:	endbr64 
  4225f4:	push   rbp
  4225f5:	movsxd rbp,edx
  4225f8:	mov    rdx,rbp
  4225fb:	push   rbx
  4225fc:	mov    rbx,rdi
  4225ff:	sub    rsp,0x8
  422603:	mov    rax,QWORD PTR [rdi+0x28]
  422607:	mov    BYTE PTR [rax],0x22
  42260a:	cmp    BYTE PTR [rdi+0x32],0x0
  42260e:	sete   dil
  422612:	movzx  edi,dil
  422616:	add    rdi,QWORD PTR [rbx+0x28]
  42261a:	lea    rax,[rdi+rbp*1]
  42261e:	mov    QWORD PTR [rbx+0x28],rdi
  422622:	cmp    QWORD PTR [rbx+0x20],rax
  422626:	jbe    422650 <flatcc_json_printer_enum@@Base+0x60>
  422628:	call   406210 <memcpy@plt>
  42262d:	add    rbp,QWORD PTR [rbx+0x28]
  422631:	mov    QWORD PTR [rbx+0x28],rbp
  422635:	mov    BYTE PTR [rbp+0x0],0x22
  422639:	xor    eax,eax
  42263b:	cmp    BYTE PTR [rbx+0x32],0x0
  42263f:	sete   al
  422642:	add    QWORD PTR [rbx+0x28],rax
  422646:	add    rsp,0x8
  42264a:	pop    rbx
  42264b:	pop    rbp
  42264c:	ret    
  42264d:	nop    DWORD PTR [rax]
  422650:	mov    rdi,rbx
  422653:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  422658:	mov    rbp,QWORD PTR [rbx+0x28]
  42265c:	jmp    422635 <flatcc_json_printer_enum@@Base+0x45>
  42265e:	xchg   ax,ax

0000000000422660 <flatcc_json_printer_delimit_enum_flags@@Base>:
  422660:	endbr64 
  422664:	cmp    BYTE PTR [rdi+0x32],0x0
  422668:	sete   al
  42266b:	test   esi,esi
  42266d:	setne  dl
  422670:	or     eax,edx
  422672:	mov    rdx,QWORD PTR [rdi+0x28]
  422676:	movzx  eax,al
  422679:	mov    BYTE PTR [rdx],0x22
  42267c:	add    QWORD PTR [rdi+0x28],rax
  422680:	ret    
  422681:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  42268c:	nop    DWORD PTR [rax+0x0]

0000000000422690 <flatcc_json_printer_enum_flag@@Base>:
  422690:	endbr64 
  422694:	push   rbp
  422695:	movsxd rbp,ecx
  422698:	mov    r8,rdx
  42269b:	push   rbx
  42269c:	sub    rsp,0x8
  4226a0:	mov    rax,QWORD PTR [rdi+0x28]
  4226a4:	mov    BYTE PTR [rax],0x20
  4226a7:	xor    eax,eax
  4226a9:	test   esi,esi
  4226ab:	setg   al
  4226ae:	add    rax,QWORD PTR [rdi+0x28]
  4226b2:	lea    rdx,[rax+rbp*1]
  4226b6:	mov    QWORD PTR [rdi+0x28],rax
  4226ba:	cmp    QWORD PTR [rdi+0x20],rdx
  4226be:	ja     4226d8 <flatcc_json_printer_enum_flag@@Base+0x48>
  4226c0:	add    rsp,0x8
  4226c4:	pop    rbx
  4226c5:	mov    rdx,rbp
  4226c8:	mov    rsi,r8
  4226cb:	pop    rbp
  4226cc:	jmp    421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4226d1:	nop    DWORD PTR [rax+0x0]
  4226d8:	mov    rbx,rdi
  4226db:	mov    rdx,rbp
  4226de:	mov    rsi,r8
  4226e1:	mov    rdi,rax
  4226e4:	call   406210 <memcpy@plt>
  4226e9:	add    QWORD PTR [rbx+0x28],rbp
  4226ed:	add    rsp,0x8
  4226f1:	pop    rbx
  4226f2:	pop    rbp
  4226f3:	ret    
  4226f4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4226ff:	nop

0000000000422700 <flatcc_json_printer_string_field@@Base>:
  422700:	endbr64 
  422704:	lea    eax,[rdx+rdx*1+0x4]
  422708:	cmp    eax,DWORD PTR [rsi+0x10]
  42270b:	jge    422870 <flatcc_json_printer_string_field@@Base+0x170>
  422711:	mov    rdx,QWORD PTR [rsi+0x8]
  422715:	movzx  eax,WORD PTR [rdx+rax*1]
  422719:	test   ax,ax
  42271c:	je     422870 <flatcc_json_printer_string_field@@Base+0x170>
  422722:	push   r14
  422724:	push   r13
  422726:	push   r12
  422728:	push   rbp
  422729:	push   rbx
  42272a:	add    rax,QWORD PTR [rsi]
  42272d:	mov    r12,rax
  422730:	je     4227f8 <flatcc_json_printer_string_field@@Base+0xf8>
  422736:	mov    edx,DWORD PTR [rsi+0x18]
  422739:	lea    eax,[rdx+0x1]
  42273c:	mov    DWORD PTR [rsi+0x18],eax
  42273f:	mov    rax,QWORD PTR [rdi+0x28]
  422743:	test   edx,edx
  422745:	je     422756 <flatcc_json_printer_string_field@@Base+0x56>
  422747:	lea    rdx,[rax+0x1]
  42274b:	mov    QWORD PTR [rdi+0x28],rdx
  42274f:	mov    BYTE PTR [rax],0x2c
  422752:	mov    rax,QWORD PTR [rdi+0x28]
  422756:	cmp    BYTE PTR [rdi+0x31],0x0
  42275a:	mov    r14,rcx
  42275d:	mov    rbx,rdi
  422760:	movsxd rbp,r8d
  422763:	jne    422830 <flatcc_json_printer_string_field@@Base+0x130>
  422769:	cmp    QWORD PTR [rdi+0x20],rax
  42276d:	jbe    422820 <flatcc_json_printer_string_field@@Base+0x120>
  422773:	mov    BYTE PTR [rax],0x22
  422776:	xor    edi,edi
  422778:	mov    rdx,rbp
  42277b:	cmp    BYTE PTR [rbx+0x32],0x0
  42277f:	sete   dil
  422783:	add    rdi,QWORD PTR [rbx+0x28]
  422787:	lea    rax,[rdi+rbp*1]
  42278b:	mov    QWORD PTR [rbx+0x28],rdi
  42278f:	mov    rsi,r14
  422792:	cmp    QWORD PTR [rbx+0x20],rax
  422796:	jbe    422808 <flatcc_json_printer_string_field@@Base+0x108>
  422798:	call   406210 <memcpy@plt>
  42279d:	add    rbp,QWORD PTR [rbx+0x28]
  4227a1:	mov    QWORD PTR [rbx+0x28],rbp
  4227a5:	mov    BYTE PTR [rbp+0x0],0x22
  4227a9:	xor    eax,eax
  4227ab:	mov    rdi,rbx
  4227ae:	cmp    BYTE PTR [rbx+0x32],0x0
  4227b2:	sete   al
  4227b5:	add    rax,QWORD PTR [rbx+0x28]
  4227b9:	lea    rdx,[rax+0x1]
  4227bd:	mov    QWORD PTR [rbx+0x28],rdx
  4227c1:	mov    BYTE PTR [rax],0x3a
  4227c4:	mov    rax,QWORD PTR [rbx+0x28]
  4227c8:	mov    BYTE PTR [rax],0x20
  4227cb:	xor    eax,eax
  4227cd:	cmp    BYTE PTR [rbx+0x31],0x0
  4227d1:	setne  al
  4227d4:	add    QWORD PTR [rbx+0x28],rax
  4227d8:	mov    eax,DWORD PTR [r12]
  4227dc:	add    rax,r12
  4227df:	pop    rbx
  4227e0:	pop    rbp
  4227e1:	pop    r12
  4227e3:	pop    r13
  4227e5:	mov    edx,DWORD PTR [rax]
  4227e7:	lea    rsi,[rax+0x4]
  4227eb:	pop    r14
  4227ed:	jmp    421ef0 <flatcc_json_parser_struct_as_root@@Base+0x1920>
  4227f2:	nop    WORD PTR [rax+rax*1+0x0]
  4227f8:	pop    rbx
  4227f9:	pop    rbp
  4227fa:	pop    r12
  4227fc:	pop    r13
  4227fe:	pop    r14
  422800:	ret    
  422801:	nop    DWORD PTR [rax+0x0]
  422808:	mov    rdi,rbx
  42280b:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  422810:	mov    rbp,QWORD PTR [rbx+0x28]
  422814:	jmp    4227a5 <flatcc_json_printer_string_field@@Base+0xa5>
  422816:	nop    WORD PTR cs:[rax+rax*1+0x0]
  422820:	xor    esi,esi
  422822:	call   QWORD PTR [rdi+0x48]
  422825:	mov    rax,QWORD PTR [rbx+0x28]
  422829:	jmp    422773 <flatcc_json_printer_string_field@@Base+0x73>
  42282e:	xchg   ax,ax
  422830:	lea    rdx,[rax+0x1]
  422834:	mov    QWORD PTR [rdi+0x28],rdx
  422838:	mov    BYTE PTR [rax],0xa
  42283b:	movzx  eax,BYTE PTR [rdi+0x31]
  42283f:	imul   eax,DWORD PTR [rdi+0x38]
  422843:	mov    rdi,QWORD PTR [rdi+0x28]
  422847:	movsxd r13,eax
  42284a:	lea    rax,[rdi+r13*1]
  42284e:	cmp    QWORD PTR [rbx+0x20],rax
  422852:	jae    422878 <flatcc_json_printer_string_field@@Base+0x178>
  422854:	mov    rsi,r13
  422857:	mov    rdi,rbx
  42285a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42285f:	mov    rax,QWORD PTR [rbx+0x28]
  422863:	jmp    422773 <flatcc_json_printer_string_field@@Base+0x73>
  422868:	nop    DWORD PTR [rax+rax*1+0x0]
  422870:	ret    
  422871:	nop    DWORD PTR [rax+0x0]
  422878:	mov    rdx,r13
  42287b:	mov    esi,0x20
  422880:	call   4061c0 <memset@plt>
  422885:	mov    rax,QWORD PTR [rbx+0x28]
  422889:	add    rax,r13
  42288c:	mov    QWORD PTR [rbx+0x28],rax
  422890:	jmp    422773 <flatcc_json_printer_string_field@@Base+0x73>
  422895:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004228a0 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
  4228a0:	endbr64 
  4228a4:	push   r15
  4228a6:	push   r14
  4228a8:	push   r13
  4228aa:	push   r12
  4228ac:	push   rbp
  4228ad:	push   rbx
  4228ae:	sub    rsp,0x38
  4228b2:	mov    rax,QWORD PTR fs:0x28
  4228bb:	mov    QWORD PTR [rsp+0x28],rax
  4228c0:	xor    eax,eax
  4228c2:	lea    eax,[rdx+rdx*1+0x4]
  4228c6:	cmp    eax,DWORD PTR [rsi+0x10]
  4228c9:	jge    422aec <flatcc_json_printer_uint8_vector_base64_field@@Base+0x24c>
  4228cf:	mov    rdx,QWORD PTR [rsi+0x8]
  4228d3:	movzx  ebp,WORD PTR [rdx+rax*1]
  4228d7:	test   bp,bp
  4228da:	je     422aec <flatcc_json_printer_uint8_vector_base64_field@@Base+0x24c>
  4228e0:	xor    r13d,r13d
  4228e3:	test   r9d,r9d
  4228e6:	setne  r13b
  4228ea:	mov    eax,r13d
  4228ed:	or     al,0x80
  4228ef:	mov    DWORD PTR [rsp+0xc],eax
  4228f3:	add    rbp,QWORD PTR [rsi]
  4228f6:	je     422aec <flatcc_json_printer_uint8_vector_base64_field@@Base+0x24c>
  4228fc:	mov    eax,DWORD PTR [rsi+0x18]
  4228ff:	mov    rbx,rdi
  422902:	lea    edx,[rax+0x1]
  422905:	mov    DWORD PTR [rsi+0x18],edx
  422908:	mov    r14,rcx
  42290b:	mov    rsi,QWORD PTR [rdi+0x28]
  42290f:	test   eax,eax
  422911:	je     422922 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x82>
  422913:	lea    rax,[rsi+0x1]
  422917:	mov    QWORD PTR [rdi+0x28],rax
  42291b:	mov    BYTE PTR [rsi],0x2c
  42291e:	mov    rsi,QWORD PTR [rdi+0x28]
  422922:	cmp    BYTE PTR [rbx+0x31],0x0
  422926:	movsxd r15,r8d
  422929:	jne    422b10 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x270>
  42292f:	cmp    QWORD PTR [rbx+0x20],rsi
  422933:	ja     422941 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa1>
  422935:	xor    esi,esi
  422937:	mov    rdi,rbx
  42293a:	call   QWORD PTR [rbx+0x48]
  42293d:	mov    rsi,QWORD PTR [rbx+0x28]
  422941:	mov    BYTE PTR [rsi],0x22
  422944:	xor    edi,edi
  422946:	mov    rdx,r15
  422949:	cmp    BYTE PTR [rbx+0x32],0x0
  42294d:	sete   dil
  422951:	add    rdi,QWORD PTR [rbx+0x28]
  422955:	lea    rax,[rdi+r15*1]
  422959:	mov    QWORD PTR [rbx+0x28],rdi
  42295d:	mov    rsi,r14
  422960:	cmp    QWORD PTR [rbx+0x20],rax
  422964:	jbe    422b50 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2b0>
  42296a:	call   406210 <memcpy@plt>
  42296f:	mov    r8,QWORD PTR [rbx+0x28]
  422973:	add    r8,r15
  422976:	mov    QWORD PTR [rbx+0x28],r8
  42297a:	mov    BYTE PTR [r8],0x22
  42297e:	xor    eax,eax
  422980:	movabs r12,0xaaaaaaaaaaaaaaab
  42298a:	cmp    BYTE PTR [rbx+0x32],0x0
  42298e:	sete   al
  422991:	add    rax,QWORD PTR [rbx+0x28]
  422995:	lea    rdx,[rax+0x1]
  422999:	mov    QWORD PTR [rbx+0x28],rdx
  42299d:	mov    BYTE PTR [rax],0x3a
  4229a0:	mov    rax,QWORD PTR [rbx+0x28]
  4229a4:	mov    BYTE PTR [rax],0x20
  4229a7:	xor    eax,eax
  4229a9:	mov    edx,DWORD PTR [rbp+0x0]
  4229ac:	cmp    BYTE PTR [rbx+0x31],0x0
  4229b0:	setne  al
  4229b3:	add    rbp,rdx
  4229b6:	add    rax,QWORD PTR [rbx+0x28]
  4229ba:	mov    ecx,DWORD PTR [rbp+0x0]
  4229bd:	lea    rdx,[rax+0x1]
  4229c1:	mov    QWORD PTR [rbx+0x28],rdx
  4229c5:	mov    QWORD PTR [rsp+0x18],rcx
  4229ca:	mov    BYTE PTR [rax],0x22
  4229cd:	add    rbp,0x4
  4229d1:	mov    rax,QWORD PTR [rsp+0x18]
  4229d6:	mov    rdi,QWORD PTR [rbx+0x28]
  4229da:	lea    rdx,[rax*4+0x0]
  4229e2:	mov    rax,rdx
  4229e5:	mul    r12
  4229e8:	shr    rdx,1
  4229eb:	mov    r8,rdx
  4229ee:	add    r8,0x3
  4229f2:	mov    r15,r8
  4229f5:	and    r15,0xfffffffffffffffc
  4229f9:	lea    rax,[rdi+r15*1]
  4229fd:	cmp    rax,QWORD PTR [rbx+0x20]
  422a01:	jb     422ac8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x228>
  422a07:	mov    rdi,rbx
  422a0a:	xor    esi,esi
  422a0c:	call   QWORD PTR [rbx+0x48]
  422a0f:	mov    rdi,QWORD PTR [rbx+0x28]
  422a13:	mov    r11,QWORD PTR [rbx+0x20]
  422a17:	lea    rax,[rdi+r15*1]
  422a1b:	cmp    rax,r11
  422a1e:	jbe    422ac8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x228>
  422a24:	sub    r11,rdi
  422a27:	and    r11,0xfffffffffffffffc
  422a2b:	lea    rax,[r11+r11*2]
  422a2f:	mov    r15,rax
  422a32:	shr    r15,0x2
  422a36:	cmp    rax,0x3
  422a3a:	jbe    422b85 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2e5>
  422a40:	lea    r14,[rsp+0x20]
  422a45:	jmp    422a6c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1cc>
  422a47:	nop    WORD PTR [rax+rax*1+0x0]
  422a50:	sub    r11,rdi
  422a53:	and    r11,0xfffffffffffffffc
  422a57:	lea    rax,[r11+r11*2]
  422a5b:	mov    r15,rax
  422a5e:	shr    r15,0x2
  422a62:	cmp    rax,0x3
  422a66:	jbe    422b85 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2e5>
  422a6c:	mov    rdx,r14
  422a6f:	mov    rsi,rbp
  422a72:	mov    ecx,r13d
  422a75:	mov    QWORD PTR [rsp+0x20],r15
  422a7a:	call   421d70 <flatcc_json_parser_struct_as_root@@Base+0x17a0>
  422a7f:	add    QWORD PTR [rbx+0x28],r11
  422a83:	sub    QWORD PTR [rsp+0x18],r15
  422a88:	mov    rdi,rbx
  422a8b:	xor    esi,esi
  422a8d:	add    rbp,r15
  422a90:	call   QWORD PTR [rbx+0x48]
  422a93:	mov    rax,QWORD PTR [rsp+0x18]
  422a98:	mov    rdi,QWORD PTR [rbx+0x28]
  422a9c:	lea    rdx,[rax*4+0x0]
  422aa4:	mov    rax,rdx
  422aa7:	mul    r12
  422aaa:	mov    r11,QWORD PTR [rbx+0x20]
  422aae:	shr    rdx,1
  422ab1:	mov    r8,rdx
  422ab4:	add    r8,0x3
  422ab8:	and    r8,0xfffffffffffffffc
  422abc:	lea    rax,[rdi+r8*1]
  422ac0:	mov    r15,r8
  422ac3:	cmp    r11,rax
  422ac6:	jb     422a50 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1b0>
  422ac8:	mov    ecx,DWORD PTR [rsp+0xc]
  422acc:	lea    rdx,[rsp+0x18]
  422ad1:	mov    rsi,rbp
  422ad4:	call   421d70 <flatcc_json_parser_struct_as_root@@Base+0x17a0>
  422ad9:	mov    r8,QWORD PTR [rbx+0x28]
  422add:	add    r8,r15
  422ae0:	lea    rax,[r8+0x1]
  422ae4:	mov    QWORD PTR [rbx+0x28],rax
  422ae8:	mov    BYTE PTR [r8],0x22
  422aec:	mov    rax,QWORD PTR [rsp+0x28]
  422af1:	xor    rax,QWORD PTR fs:0x28
  422afa:	jne    422ba4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x304>
  422b00:	add    rsp,0x38
  422b04:	pop    rbx
  422b05:	pop    rbp
  422b06:	pop    r12
  422b08:	pop    r13
  422b0a:	pop    r14
  422b0c:	pop    r15
  422b0e:	ret    
  422b0f:	nop
  422b10:	lea    rax,[rsi+0x1]
  422b14:	mov    QWORD PTR [rbx+0x28],rax
  422b18:	mov    BYTE PTR [rsi],0xa
  422b1b:	movzx  esi,BYTE PTR [rbx+0x31]
  422b1f:	mov    rdi,QWORD PTR [rbx+0x28]
  422b23:	imul   esi,DWORD PTR [rbx+0x38]
  422b27:	movsxd r12,esi
  422b2a:	lea    rax,[rdi+r12*1]
  422b2e:	cmp    QWORD PTR [rbx+0x20],rax
  422b32:	jae    422b68 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2c8>
  422b34:	mov    rsi,r12
  422b37:	mov    rdi,rbx
  422b3a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  422b3f:	mov    rsi,QWORD PTR [rbx+0x28]
  422b43:	jmp    422941 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa1>
  422b48:	nop    DWORD PTR [rax+rax*1+0x0]
  422b50:	mov    rdi,rbx
  422b53:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  422b58:	mov    r8,QWORD PTR [rbx+0x28]
  422b5c:	jmp    42297a <flatcc_json_printer_uint8_vector_base64_field@@Base+0xda>
  422b61:	nop    DWORD PTR [rax+0x0]
  422b68:	mov    esi,0x20
  422b6d:	mov    rdx,r12
  422b70:	call   4061c0 <memset@plt>
  422b75:	mov    rsi,QWORD PTR [rbx+0x28]
  422b79:	add    rsi,r12
  422b7c:	mov    QWORD PTR [rbx+0x28],rsi
  422b80:	jmp    422941 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa1>
  422b85:	lea    rcx,[rip+0xf8f4]        # 432480 <flatcc_builder_padding_base@@Base+0x1a60>
  422b8c:	mov    edx,0x115
  422b91:	lea    rsi,[rip+0xf698]        # 432230 <flatcc_builder_padding_base@@Base+0x1810>
  422b98:	lea    rdi,[rip+0xf837]        # 4323d6 <flatcc_builder_padding_base@@Base+0x19b6>
  422b9f:	call   4061b0 <__assert_fail@plt>
  422ba4:	call   4061a0 <__stack_chk_fail@plt>
  422ba9:	nop    DWORD PTR [rax+0x0]

0000000000422bb0 <flatcc_json_printer_uint8_field@@Base>:
  422bb0:	endbr64 
  422bb4:	push   r14
  422bb6:	lea    eax,[rdx+rdx*1+0x4]
  422bba:	push   r13
  422bbc:	push   r12
  422bbe:	push   rbp
  422bbf:	push   rbx
  422bc0:	cmp    eax,DWORD PTR [rsi+0x10]
  422bc3:	jge    422cb8 <flatcc_json_printer_uint8_field@@Base+0x108>
  422bc9:	mov    rdx,QWORD PTR [rsi+0x8]
  422bcd:	movzx  eax,WORD PTR [rdx+rax*1]
  422bd1:	test   ax,ax
  422bd4:	je     422cb8 <flatcc_json_printer_uint8_field@@Base+0x108>
  422bda:	add    rax,QWORD PTR [rsi]
  422bdd:	je     422cb8 <flatcc_json_printer_uint8_field@@Base+0x108>
  422be3:	movzx  r13d,BYTE PTR [rax]
  422be7:	cmp    r9b,r13b
  422bea:	je     422d40 <flatcc_json_printer_uint8_field@@Base+0x190>
  422bf0:	mov    eax,DWORD PTR [rsi+0x18]
  422bf3:	lea    edx,[rax+0x1]
  422bf6:	mov    DWORD PTR [rsi+0x18],edx
  422bf9:	mov    rdx,QWORD PTR [rdi+0x28]
  422bfd:	test   eax,eax
  422bff:	je     422c10 <flatcc_json_printer_uint8_field@@Base+0x60>
  422c01:	lea    rax,[rdx+0x1]
  422c05:	mov    QWORD PTR [rdi+0x28],rax
  422c09:	mov    BYTE PTR [rdx],0x2c
  422c0c:	mov    rdx,QWORD PTR [rdi+0x28]
  422c10:	cmp    BYTE PTR [rdi+0x31],0x0
  422c14:	mov    r14,rcx
  422c17:	mov    rbx,rdi
  422c1a:	movsxd rbp,r8d
  422c1d:	jne    422ce0 <flatcc_json_printer_uint8_field@@Base+0x130>
  422c23:	cmp    QWORD PTR [rdi+0x20],rdx
  422c27:	ja     422c32 <flatcc_json_printer_uint8_field@@Base+0x82>
  422c29:	xor    esi,esi
  422c2b:	call   QWORD PTR [rdi+0x48]
  422c2e:	mov    rdx,QWORD PTR [rbx+0x28]
  422c32:	mov    BYTE PTR [rdx],0x22
  422c35:	xor    edi,edi
  422c37:	mov    rdx,rbp
  422c3a:	cmp    BYTE PTR [rbx+0x32],0x0
  422c3e:	sete   dil
  422c42:	add    rdi,QWORD PTR [rbx+0x28]
  422c46:	lea    rax,[rdi+rbp*1]
  422c4a:	mov    QWORD PTR [rbx+0x28],rdi
  422c4e:	mov    rsi,r14
  422c51:	cmp    QWORD PTR [rbx+0x20],rax
  422c55:	jbe    422cd0 <flatcc_json_printer_uint8_field@@Base+0x120>
  422c57:	call   406210 <memcpy@plt>
  422c5c:	add    rbp,QWORD PTR [rbx+0x28]
  422c60:	mov    QWORD PTR [rbx+0x28],rbp
  422c64:	mov    BYTE PTR [rbp+0x0],0x22
  422c68:	xor    eax,eax
  422c6a:	movzx  edi,r13b
  422c6e:	cmp    BYTE PTR [rbx+0x32],0x0
  422c72:	sete   al
  422c75:	add    rax,QWORD PTR [rbx+0x28]
  422c79:	lea    rdx,[rax+0x1]
  422c7d:	mov    QWORD PTR [rbx+0x28],rdx
  422c81:	mov    BYTE PTR [rax],0x3a
  422c84:	xor    esi,esi
  422c86:	mov    rax,QWORD PTR [rbx+0x28]
  422c8a:	mov    BYTE PTR [rax],0x20
  422c8d:	cmp    BYTE PTR [rbx+0x31],0x0
  422c91:	setne  sil
  422c95:	add    rsi,QWORD PTR [rbx+0x28]
  422c99:	mov    QWORD PTR [rbx+0x28],rsi
  422c9d:	call   421350 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  422ca2:	cdqe   
  422ca4:	add    QWORD PTR [rbx+0x28],rax
  422ca8:	pop    rbx
  422ca9:	pop    rbp
  422caa:	pop    r12
  422cac:	pop    r13
  422cae:	pop    r14
  422cb0:	ret    
  422cb1:	nop    DWORD PTR [rax+0x0]
  422cb8:	cmp    BYTE PTR [rdi+0x35],0x0
  422cbc:	je     422ca8 <flatcc_json_printer_uint8_field@@Base+0xf8>
  422cbe:	mov    r13d,r9d
  422cc1:	jmp    422bf0 <flatcc_json_printer_uint8_field@@Base+0x40>
  422cc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  422cd0:	mov    rdi,rbx
  422cd3:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  422cd8:	mov    rbp,QWORD PTR [rbx+0x28]
  422cdc:	jmp    422c64 <flatcc_json_printer_uint8_field@@Base+0xb4>
  422cde:	xchg   ax,ax
  422ce0:	lea    rax,[rdx+0x1]
  422ce4:	mov    QWORD PTR [rdi+0x28],rax
  422ce8:	mov    BYTE PTR [rdx],0xa
  422ceb:	movzx  edx,BYTE PTR [rdi+0x31]
  422cef:	imul   edx,DWORD PTR [rdi+0x38]
  422cf3:	mov    rdi,QWORD PTR [rdi+0x28]
  422cf7:	movsxd r12,edx
  422cfa:	lea    rax,[rdi+r12*1]
  422cfe:	cmp    QWORD PTR [rbx+0x20],rax
  422d02:	jae    422d20 <flatcc_json_printer_uint8_field@@Base+0x170>
  422d04:	mov    rsi,r12
  422d07:	mov    rdi,rbx
  422d0a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  422d0f:	mov    rdx,QWORD PTR [rbx+0x28]
  422d13:	jmp    422c32 <flatcc_json_printer_uint8_field@@Base+0x82>
  422d18:	nop    DWORD PTR [rax+rax*1+0x0]
  422d20:	mov    rdx,r12
  422d23:	mov    esi,0x20
  422d28:	call   4061c0 <memset@plt>
  422d2d:	mov    rdx,QWORD PTR [rbx+0x28]
  422d31:	add    rdx,r12
  422d34:	mov    QWORD PTR [rbx+0x28],rdx
  422d38:	jmp    422c32 <flatcc_json_printer_uint8_field@@Base+0x82>
  422d3d:	nop    DWORD PTR [rax]
  422d40:	cmp    BYTE PTR [rdi+0x34],0x0
  422d44:	je     422bf0 <flatcc_json_printer_uint8_field@@Base+0x40>
  422d4a:	jmp    422ca8 <flatcc_json_printer_uint8_field@@Base+0xf8>
  422d4f:	nop

0000000000422d50 <flatcc_json_printer_uint16_field@@Base>:
  422d50:	endbr64 
  422d54:	push   r14
  422d56:	lea    eax,[rdx+rdx*1+0x4]
  422d5a:	push   r13
  422d5c:	push   r12
  422d5e:	push   rbp
  422d5f:	push   rbx
  422d60:	cmp    eax,DWORD PTR [rsi+0x10]
  422d63:	jge    422e58 <flatcc_json_printer_uint16_field@@Base+0x108>
  422d69:	mov    rdx,QWORD PTR [rsi+0x8]
  422d6d:	movzx  eax,WORD PTR [rdx+rax*1]
  422d71:	test   ax,ax
  422d74:	je     422e58 <flatcc_json_printer_uint16_field@@Base+0x108>
  422d7a:	add    rax,QWORD PTR [rsi]
  422d7d:	je     422e58 <flatcc_json_printer_uint16_field@@Base+0x108>
  422d83:	movzx  r13d,WORD PTR [rax]
  422d87:	cmp    r9w,r13w
  422d8b:	je     422ee0 <flatcc_json_printer_uint16_field@@Base+0x190>
  422d91:	mov    eax,DWORD PTR [rsi+0x18]
  422d94:	lea    edx,[rax+0x1]
  422d97:	mov    DWORD PTR [rsi+0x18],edx
  422d9a:	mov    rdx,QWORD PTR [rdi+0x28]
  422d9e:	test   eax,eax
  422da0:	je     422db1 <flatcc_json_printer_uint16_field@@Base+0x61>
  422da2:	lea    rax,[rdx+0x1]
  422da6:	mov    QWORD PTR [rdi+0x28],rax
  422daa:	mov    BYTE PTR [rdx],0x2c
  422dad:	mov    rdx,QWORD PTR [rdi+0x28]
  422db1:	cmp    BYTE PTR [rdi+0x31],0x0
  422db5:	mov    r14,rcx
  422db8:	mov    rbx,rdi
  422dbb:	movsxd rbp,r8d
  422dbe:	jne    422e80 <flatcc_json_printer_uint16_field@@Base+0x130>
  422dc4:	cmp    QWORD PTR [rdi+0x20],rdx
  422dc8:	ja     422dd3 <flatcc_json_printer_uint16_field@@Base+0x83>
  422dca:	xor    esi,esi
  422dcc:	call   QWORD PTR [rdi+0x48]
  422dcf:	mov    rdx,QWORD PTR [rbx+0x28]
  422dd3:	mov    BYTE PTR [rdx],0x22
  422dd6:	xor    edi,edi
  422dd8:	mov    rdx,rbp
  422ddb:	cmp    BYTE PTR [rbx+0x32],0x0
  422ddf:	sete   dil
  422de3:	add    rdi,QWORD PTR [rbx+0x28]
  422de7:	lea    rax,[rdi+rbp*1]
  422deb:	mov    QWORD PTR [rbx+0x28],rdi
  422def:	mov    rsi,r14
  422df2:	cmp    QWORD PTR [rbx+0x20],rax
  422df6:	jbe    422e70 <flatcc_json_printer_uint16_field@@Base+0x120>
  422df8:	call   406210 <memcpy@plt>
  422dfd:	add    rbp,QWORD PTR [rbx+0x28]
  422e01:	mov    QWORD PTR [rbx+0x28],rbp
  422e05:	mov    BYTE PTR [rbp+0x0],0x22
  422e09:	xor    eax,eax
  422e0b:	movzx  edi,r13w
  422e0f:	cmp    BYTE PTR [rbx+0x32],0x0
  422e13:	sete   al
  422e16:	add    rax,QWORD PTR [rbx+0x28]
  422e1a:	lea    rdx,[rax+0x1]
  422e1e:	mov    QWORD PTR [rbx+0x28],rdx
  422e22:	mov    BYTE PTR [rax],0x3a
  422e25:	xor    esi,esi
  422e27:	mov    rax,QWORD PTR [rbx+0x28]
  422e2b:	mov    BYTE PTR [rax],0x20
  422e2e:	cmp    BYTE PTR [rbx+0x31],0x0
  422e32:	setne  sil
  422e36:	add    rsi,QWORD PTR [rbx+0x28]
  422e3a:	mov    QWORD PTR [rbx+0x28],rsi
  422e3e:	call   4205e0 <flatcc_json_parser_struct_as_root@@Base+0x10>
  422e43:	cdqe   
  422e45:	add    QWORD PTR [rbx+0x28],rax
  422e49:	pop    rbx
  422e4a:	pop    rbp
  422e4b:	pop    r12
  422e4d:	pop    r13
  422e4f:	pop    r14
  422e51:	ret    
  422e52:	nop    WORD PTR [rax+rax*1+0x0]
  422e58:	cmp    BYTE PTR [rdi+0x35],0x0
  422e5c:	je     422e49 <flatcc_json_printer_uint16_field@@Base+0xf9>
  422e5e:	mov    r13d,r9d
  422e61:	jmp    422d91 <flatcc_json_printer_uint16_field@@Base+0x41>
  422e66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  422e70:	mov    rdi,rbx
  422e73:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  422e78:	mov    rbp,QWORD PTR [rbx+0x28]
  422e7c:	jmp    422e05 <flatcc_json_printer_uint16_field@@Base+0xb5>
  422e7e:	xchg   ax,ax
  422e80:	lea    rax,[rdx+0x1]
  422e84:	mov    QWORD PTR [rdi+0x28],rax
  422e88:	mov    BYTE PTR [rdx],0xa
  422e8b:	movzx  edx,BYTE PTR [rdi+0x31]
  422e8f:	imul   edx,DWORD PTR [rdi+0x38]
  422e93:	mov    rdi,QWORD PTR [rdi+0x28]
  422e97:	movsxd r12,edx
  422e9a:	lea    rax,[rdi+r12*1]
  422e9e:	cmp    QWORD PTR [rbx+0x20],rax
  422ea2:	jae    422ec0 <flatcc_json_printer_uint16_field@@Base+0x170>
  422ea4:	mov    rsi,r12
  422ea7:	mov    rdi,rbx
  422eaa:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  422eaf:	mov    rdx,QWORD PTR [rbx+0x28]
  422eb3:	jmp    422dd3 <flatcc_json_printer_uint16_field@@Base+0x83>
  422eb8:	nop    DWORD PTR [rax+rax*1+0x0]
  422ec0:	mov    rdx,r12
  422ec3:	mov    esi,0x20
  422ec8:	call   4061c0 <memset@plt>
  422ecd:	mov    rdx,QWORD PTR [rbx+0x28]
  422ed1:	add    rdx,r12
  422ed4:	mov    QWORD PTR [rbx+0x28],rdx
  422ed8:	jmp    422dd3 <flatcc_json_printer_uint16_field@@Base+0x83>
  422edd:	nop    DWORD PTR [rax]
  422ee0:	cmp    BYTE PTR [rdi+0x34],0x0
  422ee4:	je     422d91 <flatcc_json_printer_uint16_field@@Base+0x41>
  422eea:	jmp    422e49 <flatcc_json_printer_uint16_field@@Base+0xf9>
  422eef:	nop

0000000000422ef0 <flatcc_json_printer_uint32_field@@Base>:
  422ef0:	endbr64 
  422ef4:	push   r14
  422ef6:	lea    eax,[rdx+rdx*1+0x4]
  422efa:	push   r13
  422efc:	push   r12
  422efe:	push   rbp
  422eff:	push   rbx
  422f00:	cmp    eax,DWORD PTR [rsi+0x10]
  422f03:	jge    422ff0 <flatcc_json_printer_uint32_field@@Base+0x100>
  422f09:	mov    rdx,QWORD PTR [rsi+0x8]
  422f0d:	movzx  eax,WORD PTR [rdx+rax*1]
  422f11:	test   ax,ax
  422f14:	je     422ff0 <flatcc_json_printer_uint32_field@@Base+0x100>
  422f1a:	add    rax,QWORD PTR [rsi]
  422f1d:	je     422ff0 <flatcc_json_printer_uint32_field@@Base+0x100>
  422f23:	mov    r13d,DWORD PTR [rax]
  422f26:	cmp    r9d,r13d
  422f29:	je     423070 <flatcc_json_printer_uint32_field@@Base+0x180>
  422f2f:	mov    eax,DWORD PTR [rsi+0x18]
  422f32:	lea    edx,[rax+0x1]
  422f35:	mov    DWORD PTR [rsi+0x18],edx
  422f38:	mov    rdx,QWORD PTR [rdi+0x28]
  422f3c:	test   eax,eax
  422f3e:	je     422f4f <flatcc_json_printer_uint32_field@@Base+0x5f>
  422f40:	lea    rax,[rdx+0x1]
  422f44:	mov    QWORD PTR [rdi+0x28],rax
  422f48:	mov    BYTE PTR [rdx],0x2c
  422f4b:	mov    rdx,QWORD PTR [rdi+0x28]
  422f4f:	cmp    BYTE PTR [rdi+0x31],0x0
  422f53:	mov    r14,rcx
  422f56:	mov    rbx,rdi
  422f59:	movsxd rbp,r8d
  422f5c:	jne    423010 <flatcc_json_printer_uint32_field@@Base+0x120>
  422f62:	cmp    QWORD PTR [rdi+0x20],rdx
  422f66:	ja     422f71 <flatcc_json_printer_uint32_field@@Base+0x81>
  422f68:	xor    esi,esi
  422f6a:	call   QWORD PTR [rdi+0x48]
  422f6d:	mov    rdx,QWORD PTR [rbx+0x28]
  422f71:	mov    BYTE PTR [rdx],0x22
  422f74:	xor    edi,edi
  422f76:	mov    rdx,rbp
  422f79:	cmp    BYTE PTR [rbx+0x32],0x0
  422f7d:	sete   dil
  422f81:	add    rdi,QWORD PTR [rbx+0x28]
  422f85:	lea    rax,[rdi+rbp*1]
  422f89:	mov    QWORD PTR [rbx+0x28],rdi
  422f8d:	mov    rsi,r14
  422f90:	cmp    QWORD PTR [rbx+0x20],rax
  422f94:	jbe    423000 <flatcc_json_printer_uint32_field@@Base+0x110>
  422f96:	call   406210 <memcpy@plt>
  422f9b:	add    rbp,QWORD PTR [rbx+0x28]
  422f9f:	mov    QWORD PTR [rbx+0x28],rbp
  422fa3:	mov    BYTE PTR [rbp+0x0],0x22
  422fa7:	xor    eax,eax
  422fa9:	mov    edi,r13d
  422fac:	cmp    BYTE PTR [rbx+0x32],0x0
  422fb0:	sete   al
  422fb3:	add    rax,QWORD PTR [rbx+0x28]
  422fb7:	lea    rdx,[rax+0x1]
  422fbb:	mov    QWORD PTR [rbx+0x28],rdx
  422fbf:	mov    BYTE PTR [rax],0x3a
  422fc2:	xor    esi,esi
  422fc4:	mov    rax,QWORD PTR [rbx+0x28]
  422fc8:	mov    BYTE PTR [rax],0x20
  422fcb:	cmp    BYTE PTR [rbx+0x31],0x0
  422fcf:	setne  sil
  422fd3:	add    rsi,QWORD PTR [rbx+0x28]
  422fd7:	mov    QWORD PTR [rbx+0x28],rsi
  422fdb:	call   420710 <flatcc_json_parser_struct_as_root@@Base+0x140>
  422fe0:	cdqe   
  422fe2:	add    QWORD PTR [rbx+0x28],rax
  422fe6:	pop    rbx
  422fe7:	pop    rbp
  422fe8:	pop    r12
  422fea:	pop    r13
  422fec:	pop    r14
  422fee:	ret    
  422fef:	nop
  422ff0:	cmp    BYTE PTR [rdi+0x35],0x0
  422ff4:	je     422fe6 <flatcc_json_printer_uint32_field@@Base+0xf6>
  422ff6:	mov    r13d,r9d
  422ff9:	jmp    422f2f <flatcc_json_printer_uint32_field@@Base+0x3f>
  422ffe:	xchg   ax,ax
  423000:	mov    rdi,rbx
  423003:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  423008:	mov    rbp,QWORD PTR [rbx+0x28]
  42300c:	jmp    422fa3 <flatcc_json_printer_uint32_field@@Base+0xb3>
  42300e:	xchg   ax,ax
  423010:	lea    rax,[rdx+0x1]
  423014:	mov    QWORD PTR [rdi+0x28],rax
  423018:	mov    BYTE PTR [rdx],0xa
  42301b:	movzx  edx,BYTE PTR [rdi+0x31]
  42301f:	imul   edx,DWORD PTR [rdi+0x38]
  423023:	mov    rdi,QWORD PTR [rdi+0x28]
  423027:	movsxd r12,edx
  42302a:	lea    rax,[rdi+r12*1]
  42302e:	cmp    QWORD PTR [rbx+0x20],rax
  423032:	jae    423050 <flatcc_json_printer_uint32_field@@Base+0x160>
  423034:	mov    rsi,r12
  423037:	mov    rdi,rbx
  42303a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42303f:	mov    rdx,QWORD PTR [rbx+0x28]
  423043:	jmp    422f71 <flatcc_json_printer_uint32_field@@Base+0x81>
  423048:	nop    DWORD PTR [rax+rax*1+0x0]
  423050:	mov    rdx,r12
  423053:	mov    esi,0x20
  423058:	call   4061c0 <memset@plt>
  42305d:	mov    rdx,QWORD PTR [rbx+0x28]
  423061:	add    rdx,r12
  423064:	mov    QWORD PTR [rbx+0x28],rdx
  423068:	jmp    422f71 <flatcc_json_printer_uint32_field@@Base+0x81>
  42306d:	nop    DWORD PTR [rax]
  423070:	cmp    BYTE PTR [rdi+0x34],0x0
  423074:	je     422f2f <flatcc_json_printer_uint32_field@@Base+0x3f>
  42307a:	jmp    422fe6 <flatcc_json_printer_uint32_field@@Base+0xf6>
  42307f:	nop

0000000000423080 <flatcc_json_printer_uint64_field@@Base>:
  423080:	endbr64 
  423084:	push   r14
  423086:	lea    eax,[rdx+rdx*1+0x4]
  42308a:	push   r13
  42308c:	push   r12
  42308e:	push   rbp
  42308f:	push   rbx
  423090:	cmp    eax,DWORD PTR [rsi+0x10]
  423093:	jge    423180 <flatcc_json_printer_uint64_field@@Base+0x100>
  423099:	mov    rdx,QWORD PTR [rsi+0x8]
  42309d:	movzx  eax,WORD PTR [rdx+rax*1]
  4230a1:	test   ax,ax
  4230a4:	je     423180 <flatcc_json_printer_uint64_field@@Base+0x100>
  4230aa:	add    rax,QWORD PTR [rsi]
  4230ad:	je     423180 <flatcc_json_printer_uint64_field@@Base+0x100>
  4230b3:	mov    r13,QWORD PTR [rax]
  4230b6:	cmp    r9,r13
  4230b9:	je     423200 <flatcc_json_printer_uint64_field@@Base+0x180>
  4230bf:	mov    eax,DWORD PTR [rsi+0x18]
  4230c2:	lea    edx,[rax+0x1]
  4230c5:	mov    DWORD PTR [rsi+0x18],edx
  4230c8:	mov    rdx,QWORD PTR [rdi+0x28]
  4230cc:	test   eax,eax
  4230ce:	je     4230df <flatcc_json_printer_uint64_field@@Base+0x5f>
  4230d0:	lea    rax,[rdx+0x1]
  4230d4:	mov    QWORD PTR [rdi+0x28],rax
  4230d8:	mov    BYTE PTR [rdx],0x2c
  4230db:	mov    rdx,QWORD PTR [rdi+0x28]
  4230df:	cmp    BYTE PTR [rdi+0x31],0x0
  4230e3:	mov    r14,rcx
  4230e6:	mov    rbx,rdi
  4230e9:	movsxd rbp,r8d
  4230ec:	jne    4231a0 <flatcc_json_printer_uint64_field@@Base+0x120>
  4230f2:	cmp    QWORD PTR [rdi+0x20],rdx
  4230f6:	ja     423101 <flatcc_json_printer_uint64_field@@Base+0x81>
  4230f8:	xor    esi,esi
  4230fa:	call   QWORD PTR [rdi+0x48]
  4230fd:	mov    rdx,QWORD PTR [rbx+0x28]
  423101:	mov    BYTE PTR [rdx],0x22
  423104:	xor    edi,edi
  423106:	mov    rdx,rbp
  423109:	cmp    BYTE PTR [rbx+0x32],0x0
  42310d:	sete   dil
  423111:	add    rdi,QWORD PTR [rbx+0x28]
  423115:	lea    rax,[rdi+rbp*1]
  423119:	mov    QWORD PTR [rbx+0x28],rdi
  42311d:	mov    rsi,r14
  423120:	cmp    QWORD PTR [rbx+0x20],rax
  423124:	jbe    423190 <flatcc_json_printer_uint64_field@@Base+0x110>
  423126:	call   406210 <memcpy@plt>
  42312b:	add    rbp,QWORD PTR [rbx+0x28]
  42312f:	mov    QWORD PTR [rbx+0x28],rbp
  423133:	mov    BYTE PTR [rbp+0x0],0x22
  423137:	xor    eax,eax
  423139:	mov    rdi,r13
  42313c:	cmp    BYTE PTR [rbx+0x32],0x0
  423140:	sete   al
  423143:	add    rax,QWORD PTR [rbx+0x28]
  423147:	lea    rdx,[rax+0x1]
  42314b:	mov    QWORD PTR [rbx+0x28],rdx
  42314f:	mov    BYTE PTR [rax],0x3a
  423152:	xor    esi,esi
  423154:	mov    rax,QWORD PTR [rbx+0x28]
  423158:	mov    BYTE PTR [rax],0x20
  42315b:	cmp    BYTE PTR [rbx+0x31],0x0
  42315f:	setne  sil
  423163:	add    rsi,QWORD PTR [rbx+0x28]
  423167:	mov    QWORD PTR [rbx+0x28],rsi
  42316b:	call   4209c0 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  423170:	cdqe   
  423172:	add    QWORD PTR [rbx+0x28],rax
  423176:	pop    rbx
  423177:	pop    rbp
  423178:	pop    r12
  42317a:	pop    r13
  42317c:	pop    r14
  42317e:	ret    
  42317f:	nop
  423180:	cmp    BYTE PTR [rdi+0x35],0x0
  423184:	je     423176 <flatcc_json_printer_uint64_field@@Base+0xf6>
  423186:	mov    r13,r9
  423189:	jmp    4230bf <flatcc_json_printer_uint64_field@@Base+0x3f>
  42318e:	xchg   ax,ax
  423190:	mov    rdi,rbx
  423193:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  423198:	mov    rbp,QWORD PTR [rbx+0x28]
  42319c:	jmp    423133 <flatcc_json_printer_uint64_field@@Base+0xb3>
  42319e:	xchg   ax,ax
  4231a0:	lea    rax,[rdx+0x1]
  4231a4:	mov    QWORD PTR [rdi+0x28],rax
  4231a8:	mov    BYTE PTR [rdx],0xa
  4231ab:	movzx  edx,BYTE PTR [rdi+0x31]
  4231af:	imul   edx,DWORD PTR [rdi+0x38]
  4231b3:	mov    rdi,QWORD PTR [rdi+0x28]
  4231b7:	movsxd r12,edx
  4231ba:	lea    rax,[rdi+r12*1]
  4231be:	cmp    QWORD PTR [rbx+0x20],rax
  4231c2:	jae    4231e0 <flatcc_json_printer_uint64_field@@Base+0x160>
  4231c4:	mov    rsi,r12
  4231c7:	mov    rdi,rbx
  4231ca:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4231cf:	mov    rdx,QWORD PTR [rbx+0x28]
  4231d3:	jmp    423101 <flatcc_json_printer_uint64_field@@Base+0x81>
  4231d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4231e0:	mov    rdx,r12
  4231e3:	mov    esi,0x20
  4231e8:	call   4061c0 <memset@plt>
  4231ed:	mov    rdx,QWORD PTR [rbx+0x28]
  4231f1:	add    rdx,r12
  4231f4:	mov    QWORD PTR [rbx+0x28],rdx
  4231f8:	jmp    423101 <flatcc_json_printer_uint64_field@@Base+0x81>
  4231fd:	nop    DWORD PTR [rax]
  423200:	cmp    BYTE PTR [rdi+0x34],0x0
  423204:	je     4230bf <flatcc_json_printer_uint64_field@@Base+0x3f>
  42320a:	jmp    423176 <flatcc_json_printer_uint64_field@@Base+0xf6>
  42320f:	nop

0000000000423210 <flatcc_json_printer_int8_field@@Base>:
  423210:	endbr64 
  423214:	push   r14
  423216:	lea    eax,[rdx+rdx*1+0x4]
  42321a:	push   r13
  42321c:	push   r12
  42321e:	push   rbp
  42321f:	push   rbx
  423220:	cmp    eax,DWORD PTR [rsi+0x10]
  423223:	jge    423330 <flatcc_json_printer_int8_field@@Base+0x120>
  423229:	mov    rdx,QWORD PTR [rsi+0x8]
  42322d:	movzx  eax,WORD PTR [rdx+rax*1]
  423231:	test   ax,ax
  423234:	je     423330 <flatcc_json_printer_int8_field@@Base+0x120>
  42323a:	add    rax,QWORD PTR [rsi]
  42323d:	je     423330 <flatcc_json_printer_int8_field@@Base+0x120>
  423243:	movzx  r13d,BYTE PTR [rax]
  423247:	cmp    r9b,r13b
  42324a:	je     4233b0 <flatcc_json_printer_int8_field@@Base+0x1a0>
  423250:	mov    eax,DWORD PTR [rsi+0x18]
  423253:	lea    edx,[rax+0x1]
  423256:	mov    DWORD PTR [rsi+0x18],edx
  423259:	mov    rdx,QWORD PTR [rdi+0x28]
  42325d:	test   eax,eax
  42325f:	je     423270 <flatcc_json_printer_int8_field@@Base+0x60>
  423261:	lea    rax,[rdx+0x1]
  423265:	mov    QWORD PTR [rdi+0x28],rax
  423269:	mov    BYTE PTR [rdx],0x2c
  42326c:	mov    rdx,QWORD PTR [rdi+0x28]
  423270:	cmp    BYTE PTR [rdi+0x31],0x0
  423274:	mov    r14,rcx
  423277:	mov    rbx,rdi
  42327a:	movsxd rbp,r8d
  42327d:	jne    423358 <flatcc_json_printer_int8_field@@Base+0x148>
  423283:	cmp    QWORD PTR [rdi+0x20],rdx
  423287:	ja     423292 <flatcc_json_printer_int8_field@@Base+0x82>
  423289:	xor    esi,esi
  42328b:	call   QWORD PTR [rdi+0x48]
  42328e:	mov    rdx,QWORD PTR [rbx+0x28]
  423292:	mov    BYTE PTR [rdx],0x22
  423295:	xor    edi,edi
  423297:	mov    rdx,rbp
  42329a:	cmp    BYTE PTR [rbx+0x32],0x0
  42329e:	sete   dil
  4232a2:	add    rdi,QWORD PTR [rbx+0x28]
  4232a6:	lea    rax,[rdi+rbp*1]
  4232aa:	mov    QWORD PTR [rbx+0x28],rdi
  4232ae:	mov    rsi,r14
  4232b1:	cmp    QWORD PTR [rbx+0x20],rax
  4232b5:	jbe    423340 <flatcc_json_printer_int8_field@@Base+0x130>
  4232bb:	call   406210 <memcpy@plt>
  4232c0:	add    rbp,QWORD PTR [rbx+0x28]
  4232c4:	mov    QWORD PTR [rbx+0x28],rbp
  4232c8:	mov    BYTE PTR [rbp+0x0],0x22
  4232cc:	xor    eax,eax
  4232ce:	movsx  r8d,r13b
  4232d2:	cmp    BYTE PTR [rbx+0x32],0x0
  4232d6:	sete   al
  4232d9:	add    rax,QWORD PTR [rbx+0x28]
  4232dd:	lea    rdx,[rax+0x1]
  4232e1:	mov    QWORD PTR [rbx+0x28],rdx
  4232e5:	mov    BYTE PTR [rax],0x3a
  4232e8:	xor    esi,esi
  4232ea:	mov    rax,QWORD PTR [rbx+0x28]
  4232ee:	mov    BYTE PTR [rax],0x20
  4232f1:	cmp    BYTE PTR [rbx+0x31],0x0
  4232f5:	setne  sil
  4232f9:	add    rsi,QWORD PTR [rbx+0x28]
  4232fd:	mov    QWORD PTR [rbx+0x28],rsi
  423301:	shr    r8d,0x1f
  423305:	test   r13b,r13b
  423308:	jns    423313 <flatcc_json_printer_int8_field@@Base+0x103>
  42330a:	mov    BYTE PTR [rsi],0x2d
  42330d:	neg    r13d
  423310:	inc    rsi
  423313:	movzx  edi,r13b
  423317:	call   421350 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  42331c:	add    r8d,eax
  42331f:	movsxd r8,r8d
  423322:	add    QWORD PTR [rbx+0x28],r8
  423326:	pop    rbx
  423327:	pop    rbp
  423328:	pop    r12
  42332a:	pop    r13
  42332c:	pop    r14
  42332e:	ret    
  42332f:	nop
  423330:	cmp    BYTE PTR [rdi+0x35],0x0
  423334:	je     423326 <flatcc_json_printer_int8_field@@Base+0x116>
  423336:	mov    r13d,r9d
  423339:	jmp    423250 <flatcc_json_printer_int8_field@@Base+0x40>
  42333e:	xchg   ax,ax
  423340:	mov    rdi,rbx
  423343:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  423348:	mov    rbp,QWORD PTR [rbx+0x28]
  42334c:	jmp    4232c8 <flatcc_json_printer_int8_field@@Base+0xb8>
  423351:	nop    DWORD PTR [rax+0x0]
  423358:	lea    rax,[rdx+0x1]
  42335c:	mov    QWORD PTR [rdi+0x28],rax
  423360:	mov    BYTE PTR [rdx],0xa
  423363:	movzx  edx,BYTE PTR [rdi+0x31]
  423367:	imul   edx,DWORD PTR [rdi+0x38]
  42336b:	mov    rdi,QWORD PTR [rdi+0x28]
  42336f:	movsxd r12,edx
  423372:	lea    rax,[rdi+r12*1]
  423376:	cmp    QWORD PTR [rbx+0x20],rax
  42337a:	jae    423390 <flatcc_json_printer_int8_field@@Base+0x180>
  42337c:	mov    rsi,r12
  42337f:	mov    rdi,rbx
  423382:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  423387:	mov    rdx,QWORD PTR [rbx+0x28]
  42338b:	jmp    423292 <flatcc_json_printer_int8_field@@Base+0x82>
  423390:	mov    rdx,r12
  423393:	mov    esi,0x20
  423398:	call   4061c0 <memset@plt>
  42339d:	mov    rdx,QWORD PTR [rbx+0x28]
  4233a1:	add    rdx,r12
  4233a4:	mov    QWORD PTR [rbx+0x28],rdx
  4233a8:	jmp    423292 <flatcc_json_printer_int8_field@@Base+0x82>
  4233ad:	nop    DWORD PTR [rax]
  4233b0:	cmp    BYTE PTR [rdi+0x34],0x0
  4233b4:	je     423250 <flatcc_json_printer_int8_field@@Base+0x40>
  4233ba:	jmp    423326 <flatcc_json_printer_int8_field@@Base+0x116>
  4233bf:	nop

00000000004233c0 <flatcc_json_printer_int16_field@@Base>:
  4233c0:	endbr64 
  4233c4:	push   r14
  4233c6:	lea    eax,[rdx+rdx*1+0x4]
  4233ca:	push   r13
  4233cc:	push   r12
  4233ce:	push   rbp
  4233cf:	push   rbx
  4233d0:	cmp    eax,DWORD PTR [rsi+0x10]
  4233d3:	jge    4234e8 <flatcc_json_printer_int16_field@@Base+0x128>
  4233d9:	mov    rdx,QWORD PTR [rsi+0x8]
  4233dd:	movzx  eax,WORD PTR [rdx+rax*1]
  4233e1:	test   ax,ax
  4233e4:	je     4234e8 <flatcc_json_printer_int16_field@@Base+0x128>
  4233ea:	add    rax,QWORD PTR [rsi]
  4233ed:	je     4234e8 <flatcc_json_printer_int16_field@@Base+0x128>
  4233f3:	movzx  r13d,WORD PTR [rax]
  4233f7:	cmp    r9w,r13w
  4233fb:	je     423570 <flatcc_json_printer_int16_field@@Base+0x1b0>
  423401:	mov    eax,DWORD PTR [rsi+0x18]
  423404:	lea    edx,[rax+0x1]
  423407:	mov    DWORD PTR [rsi+0x18],edx
  42340a:	mov    rdx,QWORD PTR [rdi+0x28]
  42340e:	test   eax,eax
  423410:	je     423421 <flatcc_json_printer_int16_field@@Base+0x61>
  423412:	lea    rax,[rdx+0x1]
  423416:	mov    QWORD PTR [rdi+0x28],rax
  42341a:	mov    BYTE PTR [rdx],0x2c
  42341d:	mov    rdx,QWORD PTR [rdi+0x28]
  423421:	cmp    BYTE PTR [rdi+0x31],0x0
  423425:	mov    r14,rcx
  423428:	mov    rbx,rdi
  42342b:	movsxd rbp,r8d
  42342e:	jne    423518 <flatcc_json_printer_int16_field@@Base+0x158>
  423434:	cmp    QWORD PTR [rdi+0x20],rdx
  423438:	ja     423443 <flatcc_json_printer_int16_field@@Base+0x83>
  42343a:	xor    esi,esi
  42343c:	call   QWORD PTR [rdi+0x48]
  42343f:	mov    rdx,QWORD PTR [rbx+0x28]
  423443:	mov    BYTE PTR [rdx],0x22
  423446:	xor    edi,edi
  423448:	mov    rdx,rbp
  42344b:	cmp    BYTE PTR [rbx+0x32],0x0
  42344f:	sete   dil
  423453:	add    rdi,QWORD PTR [rbx+0x28]
  423457:	lea    rax,[rdi+rbp*1]
  42345b:	mov    QWORD PTR [rbx+0x28],rdi
  42345f:	mov    rsi,r14
  423462:	cmp    QWORD PTR [rbx+0x20],rax
  423466:	jbe    423500 <flatcc_json_printer_int16_field@@Base+0x140>
  42346c:	call   406210 <memcpy@plt>
  423471:	add    rbp,QWORD PTR [rbx+0x28]
  423475:	mov    QWORD PTR [rbx+0x28],rbp
  423479:	mov    BYTE PTR [rbp+0x0],0x22
  42347d:	xor    eax,eax
  42347f:	movsx  r11d,r13w
  423483:	cmp    BYTE PTR [rbx+0x32],0x0
  423487:	sete   al
  42348a:	add    rax,QWORD PTR [rbx+0x28]
  42348e:	lea    rdx,[rax+0x1]
  423492:	mov    QWORD PTR [rbx+0x28],rdx
  423496:	mov    BYTE PTR [rax],0x3a
  423499:	xor    esi,esi
  42349b:	mov    rax,QWORD PTR [rbx+0x28]
  42349f:	mov    BYTE PTR [rax],0x20
  4234a2:	cmp    BYTE PTR [rbx+0x31],0x0
  4234a6:	setne  sil
  4234aa:	add    rsi,QWORD PTR [rbx+0x28]
  4234ae:	mov    QWORD PTR [rbx+0x28],rsi
  4234b2:	shr    r11d,0x1f
  4234b6:	test   r13w,r13w
  4234ba:	jns    4234c5 <flatcc_json_printer_int16_field@@Base+0x105>
  4234bc:	mov    BYTE PTR [rsi],0x2d
  4234bf:	neg    r13d
  4234c2:	inc    rsi
  4234c5:	movzx  edi,r13w
  4234c9:	call   4205e0 <flatcc_json_parser_struct_as_root@@Base+0x10>
  4234ce:	add    r11d,eax
  4234d1:	movsxd r11,r11d
  4234d4:	add    QWORD PTR [rbx+0x28],r11
  4234d8:	pop    rbx
  4234d9:	pop    rbp
  4234da:	pop    r12
  4234dc:	pop    r13
  4234de:	pop    r14
  4234e0:	ret    
  4234e1:	nop    DWORD PTR [rax+0x0]
  4234e8:	cmp    BYTE PTR [rdi+0x35],0x0
  4234ec:	je     4234d8 <flatcc_json_printer_int16_field@@Base+0x118>
  4234ee:	mov    r13d,r9d
  4234f1:	jmp    423401 <flatcc_json_printer_int16_field@@Base+0x41>
  4234f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  423500:	mov    rdi,rbx
  423503:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  423508:	mov    rbp,QWORD PTR [rbx+0x28]
  42350c:	jmp    423479 <flatcc_json_printer_int16_field@@Base+0xb9>
  423511:	nop    DWORD PTR [rax+0x0]
  423518:	lea    rax,[rdx+0x1]
  42351c:	mov    QWORD PTR [rdi+0x28],rax
  423520:	mov    BYTE PTR [rdx],0xa
  423523:	movzx  edx,BYTE PTR [rdi+0x31]
  423527:	imul   edx,DWORD PTR [rdi+0x38]
  42352b:	mov    rdi,QWORD PTR [rdi+0x28]
  42352f:	movsxd r12,edx
  423532:	lea    rax,[rdi+r12*1]
  423536:	cmp    QWORD PTR [rbx+0x20],rax
  42353a:	jae    423550 <flatcc_json_printer_int16_field@@Base+0x190>
  42353c:	mov    rsi,r12
  42353f:	mov    rdi,rbx
  423542:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  423547:	mov    rdx,QWORD PTR [rbx+0x28]
  42354b:	jmp    423443 <flatcc_json_printer_int16_field@@Base+0x83>
  423550:	mov    rdx,r12
  423553:	mov    esi,0x20
  423558:	call   4061c0 <memset@plt>
  42355d:	mov    rdx,QWORD PTR [rbx+0x28]
  423561:	add    rdx,r12
  423564:	mov    QWORD PTR [rbx+0x28],rdx
  423568:	jmp    423443 <flatcc_json_printer_int16_field@@Base+0x83>
  42356d:	nop    DWORD PTR [rax]
  423570:	cmp    BYTE PTR [rdi+0x34],0x0
  423574:	je     423401 <flatcc_json_printer_int16_field@@Base+0x41>
  42357a:	jmp    4234d8 <flatcc_json_printer_int16_field@@Base+0x118>
  42357f:	nop

0000000000423580 <flatcc_json_printer_int32_field@@Base>:
  423580:	endbr64 
  423584:	push   r14
  423586:	lea    eax,[rdx+rdx*1+0x4]
  42358a:	push   r13
  42358c:	push   r12
  42358e:	push   rbp
  42358f:	push   rbx
  423590:	cmp    eax,DWORD PTR [rsi+0x10]
  423593:	jge    4236a0 <flatcc_json_printer_int32_field@@Base+0x120>
  423599:	mov    rdx,QWORD PTR [rsi+0x8]
  42359d:	movzx  eax,WORD PTR [rdx+rax*1]
  4235a1:	test   ax,ax
  4235a4:	je     4236a0 <flatcc_json_printer_int32_field@@Base+0x120>
  4235aa:	add    rax,QWORD PTR [rsi]
  4235ad:	je     4236a0 <flatcc_json_printer_int32_field@@Base+0x120>
  4235b3:	mov    r13d,DWORD PTR [rax]
  4235b6:	cmp    r9d,r13d
  4235b9:	je     423720 <flatcc_json_printer_int32_field@@Base+0x1a0>
  4235bf:	mov    eax,DWORD PTR [rsi+0x18]
  4235c2:	lea    edx,[rax+0x1]
  4235c5:	mov    DWORD PTR [rsi+0x18],edx
  4235c8:	mov    rdx,QWORD PTR [rdi+0x28]
  4235cc:	test   eax,eax
  4235ce:	je     4235df <flatcc_json_printer_int32_field@@Base+0x5f>
  4235d0:	lea    rax,[rdx+0x1]
  4235d4:	mov    QWORD PTR [rdi+0x28],rax
  4235d8:	mov    BYTE PTR [rdx],0x2c
  4235db:	mov    rdx,QWORD PTR [rdi+0x28]
  4235df:	cmp    BYTE PTR [rdi+0x31],0x0
  4235e3:	mov    r14,rcx
  4235e6:	mov    rbx,rdi
  4235e9:	movsxd rbp,r8d
  4235ec:	jne    4236c8 <flatcc_json_printer_int32_field@@Base+0x148>
  4235f2:	cmp    QWORD PTR [rdi+0x20],rdx
  4235f6:	ja     423601 <flatcc_json_printer_int32_field@@Base+0x81>
  4235f8:	xor    esi,esi
  4235fa:	call   QWORD PTR [rdi+0x48]
  4235fd:	mov    rdx,QWORD PTR [rbx+0x28]
  423601:	mov    BYTE PTR [rdx],0x22
  423604:	xor    edi,edi
  423606:	mov    rdx,rbp
  423609:	cmp    BYTE PTR [rbx+0x32],0x0
  42360d:	sete   dil
  423611:	add    rdi,QWORD PTR [rbx+0x28]
  423615:	lea    rax,[rdi+rbp*1]
  423619:	mov    QWORD PTR [rbx+0x28],rdi
  42361d:	mov    rsi,r14
  423620:	cmp    QWORD PTR [rbx+0x20],rax
  423624:	jbe    4236b0 <flatcc_json_printer_int32_field@@Base+0x130>
  42362a:	call   406210 <memcpy@plt>
  42362f:	add    rbp,QWORD PTR [rbx+0x28]
  423633:	mov    QWORD PTR [rbx+0x28],rbp
  423637:	mov    BYTE PTR [rbp+0x0],0x22
  42363b:	xor    eax,eax
  42363d:	mov    ebp,r13d
  423640:	cmp    BYTE PTR [rbx+0x32],0x0
  423644:	sete   al
  423647:	add    rax,QWORD PTR [rbx+0x28]
  42364b:	lea    rdx,[rax+0x1]
  42364f:	mov    QWORD PTR [rbx+0x28],rdx
  423653:	mov    BYTE PTR [rax],0x3a
  423656:	xor    esi,esi
  423658:	mov    rax,QWORD PTR [rbx+0x28]
  42365c:	mov    BYTE PTR [rax],0x20
  42365f:	cmp    BYTE PTR [rbx+0x31],0x0
  423663:	setne  sil
  423667:	add    rsi,QWORD PTR [rbx+0x28]
  42366b:	mov    QWORD PTR [rbx+0x28],rsi
  42366f:	shr    ebp,0x1f
  423672:	test   r13d,r13d
  423675:	jns    423680 <flatcc_json_printer_int32_field@@Base+0x100>
  423677:	mov    BYTE PTR [rsi],0x2d
  42367a:	neg    r13d
  42367d:	inc    rsi
  423680:	mov    edi,r13d
  423683:	call   420710 <flatcc_json_parser_struct_as_root@@Base+0x140>
  423688:	add    ebp,eax
  42368a:	movsxd rbp,ebp
  42368d:	add    QWORD PTR [rbx+0x28],rbp
  423691:	pop    rbx
  423692:	pop    rbp
  423693:	pop    r12
  423695:	pop    r13
  423697:	pop    r14
  423699:	ret    
  42369a:	nop    WORD PTR [rax+rax*1+0x0]
  4236a0:	cmp    BYTE PTR [rdi+0x35],0x0
  4236a4:	je     423691 <flatcc_json_printer_int32_field@@Base+0x111>
  4236a6:	mov    r13d,r9d
  4236a9:	jmp    4235bf <flatcc_json_printer_int32_field@@Base+0x3f>
  4236ae:	xchg   ax,ax
  4236b0:	mov    rdi,rbx
  4236b3:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4236b8:	mov    rbp,QWORD PTR [rbx+0x28]
  4236bc:	jmp    423637 <flatcc_json_printer_int32_field@@Base+0xb7>
  4236c1:	nop    DWORD PTR [rax+0x0]
  4236c8:	lea    rax,[rdx+0x1]
  4236cc:	mov    QWORD PTR [rdi+0x28],rax
  4236d0:	mov    BYTE PTR [rdx],0xa
  4236d3:	movzx  edx,BYTE PTR [rdi+0x31]
  4236d7:	imul   edx,DWORD PTR [rdi+0x38]
  4236db:	mov    rdi,QWORD PTR [rdi+0x28]
  4236df:	movsxd r12,edx
  4236e2:	lea    rax,[rdi+r12*1]
  4236e6:	cmp    QWORD PTR [rbx+0x20],rax
  4236ea:	jae    423700 <flatcc_json_printer_int32_field@@Base+0x180>
  4236ec:	mov    rsi,r12
  4236ef:	mov    rdi,rbx
  4236f2:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4236f7:	mov    rdx,QWORD PTR [rbx+0x28]
  4236fb:	jmp    423601 <flatcc_json_printer_int32_field@@Base+0x81>
  423700:	mov    rdx,r12
  423703:	mov    esi,0x20
  423708:	call   4061c0 <memset@plt>
  42370d:	mov    rdx,QWORD PTR [rbx+0x28]
  423711:	add    rdx,r12
  423714:	mov    QWORD PTR [rbx+0x28],rdx
  423718:	jmp    423601 <flatcc_json_printer_int32_field@@Base+0x81>
  42371d:	nop    DWORD PTR [rax]
  423720:	cmp    BYTE PTR [rdi+0x34],0x0
  423724:	je     4235bf <flatcc_json_printer_int32_field@@Base+0x3f>
  42372a:	jmp    423691 <flatcc_json_printer_int32_field@@Base+0x111>
  42372f:	nop

0000000000423730 <flatcc_json_printer_int64_field@@Base>:
  423730:	endbr64 
  423734:	push   r14
  423736:	lea    eax,[rdx+rdx*1+0x4]
  42373a:	push   r13
  42373c:	push   r12
  42373e:	push   rbp
  42373f:	push   rbx
  423740:	cmp    eax,DWORD PTR [rsi+0x10]
  423743:	jge    423850 <flatcc_json_printer_int64_field@@Base+0x120>
  423749:	mov    rdx,QWORD PTR [rsi+0x8]
  42374d:	movzx  eax,WORD PTR [rdx+rax*1]
  423751:	test   ax,ax
  423754:	je     423850 <flatcc_json_printer_int64_field@@Base+0x120>
  42375a:	add    rax,QWORD PTR [rsi]
  42375d:	je     423850 <flatcc_json_printer_int64_field@@Base+0x120>
  423763:	mov    r13,QWORD PTR [rax]
  423766:	cmp    r9,r13
  423769:	je     4238d0 <flatcc_json_printer_int64_field@@Base+0x1a0>
  42376f:	mov    eax,DWORD PTR [rsi+0x18]
  423772:	lea    edx,[rax+0x1]
  423775:	mov    DWORD PTR [rsi+0x18],edx
  423778:	mov    rdx,QWORD PTR [rdi+0x28]
  42377c:	test   eax,eax
  42377e:	je     42378f <flatcc_json_printer_int64_field@@Base+0x5f>
  423780:	lea    rax,[rdx+0x1]
  423784:	mov    QWORD PTR [rdi+0x28],rax
  423788:	mov    BYTE PTR [rdx],0x2c
  42378b:	mov    rdx,QWORD PTR [rdi+0x28]
  42378f:	cmp    BYTE PTR [rdi+0x31],0x0
  423793:	mov    r14,rcx
  423796:	mov    rbx,rdi
  423799:	movsxd rbp,r8d
  42379c:	jne    423878 <flatcc_json_printer_int64_field@@Base+0x148>
  4237a2:	cmp    QWORD PTR [rdi+0x20],rdx
  4237a6:	ja     4237b1 <flatcc_json_printer_int64_field@@Base+0x81>
  4237a8:	xor    esi,esi
  4237aa:	call   QWORD PTR [rdi+0x48]
  4237ad:	mov    rdx,QWORD PTR [rbx+0x28]
  4237b1:	mov    BYTE PTR [rdx],0x22
  4237b4:	xor    edi,edi
  4237b6:	mov    rdx,rbp
  4237b9:	cmp    BYTE PTR [rbx+0x32],0x0
  4237bd:	sete   dil
  4237c1:	add    rdi,QWORD PTR [rbx+0x28]
  4237c5:	lea    rax,[rdi+rbp*1]
  4237c9:	mov    QWORD PTR [rbx+0x28],rdi
  4237cd:	mov    rsi,r14
  4237d0:	cmp    QWORD PTR [rbx+0x20],rax
  4237d4:	jbe    423860 <flatcc_json_printer_int64_field@@Base+0x130>
  4237da:	call   406210 <memcpy@plt>
  4237df:	add    rbp,QWORD PTR [rbx+0x28]
  4237e3:	mov    QWORD PTR [rbx+0x28],rbp
  4237e7:	mov    BYTE PTR [rbp+0x0],0x22
  4237eb:	xor    eax,eax
  4237ed:	mov    rbp,r13
  4237f0:	cmp    BYTE PTR [rbx+0x32],0x0
  4237f4:	sete   al
  4237f7:	add    rax,QWORD PTR [rbx+0x28]
  4237fb:	lea    rdx,[rax+0x1]
  4237ff:	mov    QWORD PTR [rbx+0x28],rdx
  423803:	mov    BYTE PTR [rax],0x3a
  423806:	xor    esi,esi
  423808:	mov    rax,QWORD PTR [rbx+0x28]
  42380c:	mov    BYTE PTR [rax],0x20
  42380f:	cmp    BYTE PTR [rbx+0x31],0x0
  423813:	setne  sil
  423817:	add    rsi,QWORD PTR [rbx+0x28]
  42381b:	mov    QWORD PTR [rbx+0x28],rsi
  42381f:	shr    rbp,0x3f
  423823:	test   r13,r13
  423826:	jns    423831 <flatcc_json_printer_int64_field@@Base+0x101>
  423828:	mov    BYTE PTR [rsi],0x2d
  42382b:	neg    r13
  42382e:	inc    rsi
  423831:	mov    rdi,r13
  423834:	call   4209c0 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  423839:	add    eax,ebp
  42383b:	cdqe   
  42383d:	add    QWORD PTR [rbx+0x28],rax
  423841:	pop    rbx
  423842:	pop    rbp
  423843:	pop    r12
  423845:	pop    r13
  423847:	pop    r14
  423849:	ret    
  42384a:	nop    WORD PTR [rax+rax*1+0x0]
  423850:	cmp    BYTE PTR [rdi+0x35],0x0
  423854:	je     423841 <flatcc_json_printer_int64_field@@Base+0x111>
  423856:	mov    r13,r9
  423859:	jmp    42376f <flatcc_json_printer_int64_field@@Base+0x3f>
  42385e:	xchg   ax,ax
  423860:	mov    rdi,rbx
  423863:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  423868:	mov    rbp,QWORD PTR [rbx+0x28]
  42386c:	jmp    4237e7 <flatcc_json_printer_int64_field@@Base+0xb7>
  423871:	nop    DWORD PTR [rax+0x0]
  423878:	lea    rax,[rdx+0x1]
  42387c:	mov    QWORD PTR [rdi+0x28],rax
  423880:	mov    BYTE PTR [rdx],0xa
  423883:	movzx  edx,BYTE PTR [rdi+0x31]
  423887:	imul   edx,DWORD PTR [rdi+0x38]
  42388b:	mov    rdi,QWORD PTR [rdi+0x28]
  42388f:	movsxd r12,edx
  423892:	lea    rax,[rdi+r12*1]
  423896:	cmp    QWORD PTR [rbx+0x20],rax
  42389a:	jae    4238b0 <flatcc_json_printer_int64_field@@Base+0x180>
  42389c:	mov    rsi,r12
  42389f:	mov    rdi,rbx
  4238a2:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4238a7:	mov    rdx,QWORD PTR [rbx+0x28]
  4238ab:	jmp    4237b1 <flatcc_json_printer_int64_field@@Base+0x81>
  4238b0:	mov    rdx,r12
  4238b3:	mov    esi,0x20
  4238b8:	call   4061c0 <memset@plt>
  4238bd:	mov    rdx,QWORD PTR [rbx+0x28]
  4238c1:	add    rdx,r12
  4238c4:	mov    QWORD PTR [rbx+0x28],rdx
  4238c8:	jmp    4237b1 <flatcc_json_printer_int64_field@@Base+0x81>
  4238cd:	nop    DWORD PTR [rax]
  4238d0:	cmp    BYTE PTR [rdi+0x34],0x0
  4238d4:	je     42376f <flatcc_json_printer_int64_field@@Base+0x3f>
  4238da:	jmp    423841 <flatcc_json_printer_int64_field@@Base+0x111>
  4238df:	nop

00000000004238e0 <flatcc_json_printer_bool_field@@Base>:
  4238e0:	endbr64 
  4238e4:	push   r14
  4238e6:	lea    eax,[rdx+rdx*1+0x4]
  4238ea:	push   r13
  4238ec:	push   r12
  4238ee:	push   rbp
  4238ef:	push   rbx
  4238f0:	cmp    eax,DWORD PTR [rsi+0x10]
  4238f3:	jge    4239e8 <flatcc_json_printer_bool_field@@Base+0x108>
  4238f9:	mov    rdx,QWORD PTR [rsi+0x8]
  4238fd:	movzx  eax,WORD PTR [rdx+rax*1]
  423901:	test   ax,ax
  423904:	je     4239e8 <flatcc_json_printer_bool_field@@Base+0x108>
  42390a:	add    rax,QWORD PTR [rsi]
  42390d:	je     4239e8 <flatcc_json_printer_bool_field@@Base+0x108>
  423913:	movzx  r13d,BYTE PTR [rax]
  423917:	cmp    r9b,r13b
  42391a:	je     423a70 <flatcc_json_printer_bool_field@@Base+0x190>
  423920:	mov    eax,DWORD PTR [rsi+0x18]
  423923:	lea    edx,[rax+0x1]
  423926:	mov    DWORD PTR [rsi+0x18],edx
  423929:	mov    rdx,QWORD PTR [rdi+0x28]
  42392d:	test   eax,eax
  42392f:	je     423940 <flatcc_json_printer_bool_field@@Base+0x60>
  423931:	lea    rax,[rdx+0x1]
  423935:	mov    QWORD PTR [rdi+0x28],rax
  423939:	mov    BYTE PTR [rdx],0x2c
  42393c:	mov    rdx,QWORD PTR [rdi+0x28]
  423940:	cmp    BYTE PTR [rdi+0x31],0x0
  423944:	mov    r14,rcx
  423947:	mov    rbx,rdi
  42394a:	movsxd rbp,r8d
  42394d:	jne    423a10 <flatcc_json_printer_bool_field@@Base+0x130>
  423953:	cmp    QWORD PTR [rdi+0x20],rdx
  423957:	ja     423962 <flatcc_json_printer_bool_field@@Base+0x82>
  423959:	xor    esi,esi
  42395b:	call   QWORD PTR [rdi+0x48]
  42395e:	mov    rdx,QWORD PTR [rbx+0x28]
  423962:	mov    BYTE PTR [rdx],0x22
  423965:	xor    edi,edi
  423967:	mov    rdx,rbp
  42396a:	cmp    BYTE PTR [rbx+0x32],0x0
  42396e:	sete   dil
  423972:	add    rdi,QWORD PTR [rbx+0x28]
  423976:	lea    rax,[rdi+rbp*1]
  42397a:	mov    QWORD PTR [rbx+0x28],rdi
  42397e:	mov    rsi,r14
  423981:	cmp    QWORD PTR [rbx+0x20],rax
  423985:	jbe    423a00 <flatcc_json_printer_bool_field@@Base+0x120>
  423987:	call   406210 <memcpy@plt>
  42398c:	add    rbp,QWORD PTR [rbx+0x28]
  423990:	mov    QWORD PTR [rbx+0x28],rbp
  423994:	mov    BYTE PTR [rbp+0x0],0x22
  423998:	xor    eax,eax
  42399a:	movzx  edi,r13b
  42399e:	cmp    BYTE PTR [rbx+0x32],0x0
  4239a2:	sete   al
  4239a5:	add    rax,QWORD PTR [rbx+0x28]
  4239a9:	lea    rdx,[rax+0x1]
  4239ad:	mov    QWORD PTR [rbx+0x28],rdx
  4239b1:	mov    BYTE PTR [rax],0x3a
  4239b4:	xor    esi,esi
  4239b6:	mov    rax,QWORD PTR [rbx+0x28]
  4239ba:	mov    BYTE PTR [rax],0x20
  4239bd:	cmp    BYTE PTR [rbx+0x31],0x0
  4239c1:	setne  sil
  4239c5:	add    rsi,QWORD PTR [rbx+0x28]
  4239c9:	mov    QWORD PTR [rbx+0x28],rsi
  4239cd:	call   421320 <flatcc_json_parser_struct_as_root@@Base+0xd50>
  4239d2:	cdqe   
  4239d4:	add    QWORD PTR [rbx+0x28],rax
  4239d8:	pop    rbx
  4239d9:	pop    rbp
  4239da:	pop    r12
  4239dc:	pop    r13
  4239de:	pop    r14
  4239e0:	ret    
  4239e1:	nop    DWORD PTR [rax+0x0]
  4239e8:	cmp    BYTE PTR [rdi+0x35],0x0
  4239ec:	je     4239d8 <flatcc_json_printer_bool_field@@Base+0xf8>
  4239ee:	mov    r13d,r9d
  4239f1:	jmp    423920 <flatcc_json_printer_bool_field@@Base+0x40>
  4239f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  423a00:	mov    rdi,rbx
  423a03:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  423a08:	mov    rbp,QWORD PTR [rbx+0x28]
  423a0c:	jmp    423994 <flatcc_json_printer_bool_field@@Base+0xb4>
  423a0e:	xchg   ax,ax
  423a10:	lea    rax,[rdx+0x1]
  423a14:	mov    QWORD PTR [rdi+0x28],rax
  423a18:	mov    BYTE PTR [rdx],0xa
  423a1b:	movzx  edx,BYTE PTR [rdi+0x31]
  423a1f:	imul   edx,DWORD PTR [rdi+0x38]
  423a23:	mov    rdi,QWORD PTR [rdi+0x28]
  423a27:	movsxd r12,edx
  423a2a:	lea    rax,[rdi+r12*1]
  423a2e:	cmp    QWORD PTR [rbx+0x20],rax
  423a32:	jae    423a50 <flatcc_json_printer_bool_field@@Base+0x170>
  423a34:	mov    rsi,r12
  423a37:	mov    rdi,rbx
  423a3a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  423a3f:	mov    rdx,QWORD PTR [rbx+0x28]
  423a43:	jmp    423962 <flatcc_json_printer_bool_field@@Base+0x82>
  423a48:	nop    DWORD PTR [rax+rax*1+0x0]
  423a50:	mov    rdx,r12
  423a53:	mov    esi,0x20
  423a58:	call   4061c0 <memset@plt>
  423a5d:	mov    rdx,QWORD PTR [rbx+0x28]
  423a61:	add    rdx,r12
  423a64:	mov    QWORD PTR [rbx+0x28],rdx
  423a68:	jmp    423962 <flatcc_json_printer_bool_field@@Base+0x82>
  423a6d:	nop    DWORD PTR [rax]
  423a70:	cmp    BYTE PTR [rdi+0x34],0x0
  423a74:	je     423920 <flatcc_json_printer_bool_field@@Base+0x40>
  423a7a:	jmp    4239d8 <flatcc_json_printer_bool_field@@Base+0xf8>
  423a7f:	nop

0000000000423a80 <flatcc_json_printer_float_field@@Base>:
  423a80:	endbr64 
  423a84:	push   r13
  423a86:	lea    eax,[rdx+rdx*1+0x4]
  423a8a:	push   r12
  423a8c:	push   rbp
  423a8d:	push   rbx
  423a8e:	sub    rsp,0x18
  423a92:	cmp    eax,DWORD PTR [rsi+0x10]
  423a95:	jge    423ad0 <flatcc_json_printer_float_field@@Base+0x50>
  423a97:	mov    rdx,QWORD PTR [rsi+0x8]
  423a9b:	movzx  eax,WORD PTR [rdx+rax*1]
  423a9f:	test   ax,ax
  423aa2:	je     423ad0 <flatcc_json_printer_float_field@@Base+0x50>
  423aa4:	add    rax,QWORD PTR [rsi]
  423aa7:	je     423ad0 <flatcc_json_printer_float_field@@Base+0x50>
  423aa9:	vmovss xmm2,DWORD PTR [rax]
  423aad:	vucomiss xmm0,xmm2
  423ab1:	vmovss DWORD PTR [rsp+0xc],xmm2
  423ab7:	jp     423adc <flatcc_json_printer_float_field@@Base+0x5c>
  423ab9:	jne    423adc <flatcc_json_printer_float_field@@Base+0x5c>
  423abb:	cmp    BYTE PTR [rdi+0x34],0x0
  423abf:	je     423adc <flatcc_json_printer_float_field@@Base+0x5c>
  423ac1:	add    rsp,0x18
  423ac5:	pop    rbx
  423ac6:	pop    rbp
  423ac7:	pop    r12
  423ac9:	pop    r13
  423acb:	ret    
  423acc:	nop    DWORD PTR [rax+0x0]
  423ad0:	cmp    BYTE PTR [rdi+0x35],0x0
  423ad4:	je     423ac1 <flatcc_json_printer_float_field@@Base+0x41>
  423ad6:	vmovss DWORD PTR [rsp+0xc],xmm0
  423adc:	mov    eax,DWORD PTR [rsi+0x18]
  423adf:	lea    edx,[rax+0x1]
  423ae2:	mov    DWORD PTR [rsi+0x18],edx
  423ae5:	mov    rdx,QWORD PTR [rdi+0x28]
  423ae9:	test   eax,eax
  423aeb:	je     423afc <flatcc_json_printer_float_field@@Base+0x7c>
  423aed:	lea    rax,[rdx+0x1]
  423af1:	mov    QWORD PTR [rdi+0x28],rax
  423af5:	mov    BYTE PTR [rdx],0x2c
  423af8:	mov    rdx,QWORD PTR [rdi+0x28]
  423afc:	cmp    BYTE PTR [rdi+0x31],0x0
  423b00:	mov    r13,rcx
  423b03:	mov    rbx,rdi
  423b06:	movsxd rbp,r8d
  423b09:	jne    423bc0 <flatcc_json_printer_float_field@@Base+0x140>
  423b0f:	cmp    QWORD PTR [rdi+0x20],rdx
  423b13:	ja     423b1e <flatcc_json_printer_float_field@@Base+0x9e>
  423b15:	xor    esi,esi
  423b17:	call   QWORD PTR [rdi+0x48]
  423b1a:	mov    rdx,QWORD PTR [rbx+0x28]
  423b1e:	mov    BYTE PTR [rdx],0x22
  423b21:	xor    edi,edi
  423b23:	mov    rdx,rbp
  423b26:	cmp    BYTE PTR [rbx+0x32],0x0
  423b2a:	sete   dil
  423b2e:	add    rdi,QWORD PTR [rbx+0x28]
  423b32:	lea    rax,[rdi+rbp*1]
  423b36:	mov    QWORD PTR [rbx+0x28],rdi
  423b3a:	mov    rsi,r13
  423b3d:	cmp    QWORD PTR [rbx+0x20],rax
  423b41:	jbe    423ba8 <flatcc_json_printer_float_field@@Base+0x128>
  423b43:	call   406210 <memcpy@plt>
  423b48:	add    rbp,QWORD PTR [rbx+0x28]
  423b4c:	mov    QWORD PTR [rbx+0x28],rbp
  423b50:	mov    BYTE PTR [rbp+0x0],0x22
  423b54:	xor    eax,eax
  423b56:	vxorpd xmm0,xmm0,xmm0
  423b5a:	cmp    BYTE PTR [rbx+0x32],0x0
  423b5e:	sete   al
  423b61:	add    rax,QWORD PTR [rbx+0x28]
  423b65:	lea    rdx,[rax+0x1]
  423b69:	mov    QWORD PTR [rbx+0x28],rdx
  423b6d:	mov    BYTE PTR [rax],0x3a
  423b70:	xor    edi,edi
  423b72:	vcvtss2sd xmm0,xmm0,DWORD PTR [rsp+0xc]
  423b78:	mov    rax,QWORD PTR [rbx+0x28]
  423b7c:	mov    BYTE PTR [rax],0x20
  423b7f:	cmp    BYTE PTR [rbx+0x31],0x0
  423b83:	setne  dil
  423b87:	add    rdi,QWORD PTR [rbx+0x28]
  423b8b:	mov    QWORD PTR [rbx+0x28],rdi
  423b8f:	call   421540 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  423b94:	cdqe   
  423b96:	add    QWORD PTR [rbx+0x28],rax
  423b9a:	add    rsp,0x18
  423b9e:	pop    rbx
  423b9f:	pop    rbp
  423ba0:	pop    r12
  423ba2:	pop    r13
  423ba4:	ret    
  423ba5:	nop    DWORD PTR [rax]
  423ba8:	mov    rdi,rbx
  423bab:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  423bb0:	mov    rbp,QWORD PTR [rbx+0x28]
  423bb4:	jmp    423b50 <flatcc_json_printer_float_field@@Base+0xd0>
  423bb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  423bc0:	lea    rax,[rdx+0x1]
  423bc4:	mov    QWORD PTR [rdi+0x28],rax
  423bc8:	mov    BYTE PTR [rdx],0xa
  423bcb:	movzx  edx,BYTE PTR [rdi+0x31]
  423bcf:	imul   edx,DWORD PTR [rdi+0x38]
  423bd3:	mov    rdi,QWORD PTR [rdi+0x28]
  423bd7:	movsxd r12,edx
  423bda:	lea    rax,[rdi+r12*1]
  423bde:	cmp    QWORD PTR [rbx+0x20],rax
  423be2:	jae    423c00 <flatcc_json_printer_float_field@@Base+0x180>
  423be4:	mov    rsi,r12
  423be7:	mov    rdi,rbx
  423bea:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  423bef:	mov    rdx,QWORD PTR [rbx+0x28]
  423bf3:	jmp    423b1e <flatcc_json_printer_float_field@@Base+0x9e>
  423bf8:	nop    DWORD PTR [rax+rax*1+0x0]
  423c00:	mov    rdx,r12
  423c03:	mov    esi,0x20
  423c08:	call   4061c0 <memset@plt>
  423c0d:	mov    rdx,QWORD PTR [rbx+0x28]
  423c11:	add    rdx,r12
  423c14:	mov    QWORD PTR [rbx+0x28],rdx
  423c18:	jmp    423b1e <flatcc_json_printer_float_field@@Base+0x9e>
  423c1d:	nop    DWORD PTR [rax]

0000000000423c20 <flatcc_json_printer_double_field@@Base>:
  423c20:	endbr64 
  423c24:	push   r13
  423c26:	lea    eax,[rdx+rdx*1+0x4]
  423c2a:	push   r12
  423c2c:	push   rbp
  423c2d:	push   rbx
  423c2e:	sub    rsp,0x18
  423c32:	cmp    eax,DWORD PTR [rsi+0x10]
  423c35:	jge    423c70 <flatcc_json_printer_double_field@@Base+0x50>
  423c37:	mov    rdx,QWORD PTR [rsi+0x8]
  423c3b:	movzx  eax,WORD PTR [rdx+rax*1]
  423c3f:	test   ax,ax
  423c42:	je     423c70 <flatcc_json_printer_double_field@@Base+0x50>
  423c44:	add    rax,QWORD PTR [rsi]
  423c47:	je     423c70 <flatcc_json_printer_double_field@@Base+0x50>
  423c49:	vmovsd xmm1,QWORD PTR [rax]
  423c4d:	vucomisd xmm0,xmm1
  423c51:	vmovsd QWORD PTR [rsp+0x8],xmm1
  423c57:	jp     423c7c <flatcc_json_printer_double_field@@Base+0x5c>
  423c59:	jne    423c7c <flatcc_json_printer_double_field@@Base+0x5c>
  423c5b:	cmp    BYTE PTR [rdi+0x34],0x0
  423c5f:	je     423c7c <flatcc_json_printer_double_field@@Base+0x5c>
  423c61:	add    rsp,0x18
  423c65:	pop    rbx
  423c66:	pop    rbp
  423c67:	pop    r12
  423c69:	pop    r13
  423c6b:	ret    
  423c6c:	nop    DWORD PTR [rax+0x0]
  423c70:	cmp    BYTE PTR [rdi+0x35],0x0
  423c74:	je     423c61 <flatcc_json_printer_double_field@@Base+0x41>
  423c76:	vmovsd QWORD PTR [rsp+0x8],xmm0
  423c7c:	mov    eax,DWORD PTR [rsi+0x18]
  423c7f:	lea    edx,[rax+0x1]
  423c82:	mov    DWORD PTR [rsi+0x18],edx
  423c85:	mov    rdx,QWORD PTR [rdi+0x28]
  423c89:	test   eax,eax
  423c8b:	je     423c9c <flatcc_json_printer_double_field@@Base+0x7c>
  423c8d:	lea    rax,[rdx+0x1]
  423c91:	mov    QWORD PTR [rdi+0x28],rax
  423c95:	mov    BYTE PTR [rdx],0x2c
  423c98:	mov    rdx,QWORD PTR [rdi+0x28]
  423c9c:	cmp    BYTE PTR [rdi+0x31],0x0
  423ca0:	mov    r13,rcx
  423ca3:	mov    rbx,rdi
  423ca6:	movsxd rbp,r8d
  423ca9:	jne    423d60 <flatcc_json_printer_double_field@@Base+0x140>
  423caf:	cmp    QWORD PTR [rdi+0x20],rdx
  423cb3:	ja     423cbe <flatcc_json_printer_double_field@@Base+0x9e>
  423cb5:	xor    esi,esi
  423cb7:	call   QWORD PTR [rdi+0x48]
  423cba:	mov    rdx,QWORD PTR [rbx+0x28]
  423cbe:	mov    BYTE PTR [rdx],0x22
  423cc1:	xor    edi,edi
  423cc3:	mov    rdx,rbp
  423cc6:	cmp    BYTE PTR [rbx+0x32],0x0
  423cca:	sete   dil
  423cce:	add    rdi,QWORD PTR [rbx+0x28]
  423cd2:	lea    rax,[rdi+rbp*1]
  423cd6:	mov    QWORD PTR [rbx+0x28],rdi
  423cda:	mov    rsi,r13
  423cdd:	cmp    QWORD PTR [rbx+0x20],rax
  423ce1:	jbe    423d48 <flatcc_json_printer_double_field@@Base+0x128>
  423ce3:	call   406210 <memcpy@plt>
  423ce8:	add    rbp,QWORD PTR [rbx+0x28]
  423cec:	mov    QWORD PTR [rbx+0x28],rbp
  423cf0:	mov    BYTE PTR [rbp+0x0],0x22
  423cf4:	xor    eax,eax
  423cf6:	vmovsd xmm0,QWORD PTR [rsp+0x8]
  423cfc:	cmp    BYTE PTR [rbx+0x32],0x0
  423d00:	sete   al
  423d03:	add    rax,QWORD PTR [rbx+0x28]
  423d07:	lea    rdx,[rax+0x1]
  423d0b:	mov    QWORD PTR [rbx+0x28],rdx
  423d0f:	mov    BYTE PTR [rax],0x3a
  423d12:	xor    edi,edi
  423d14:	mov    rax,QWORD PTR [rbx+0x28]
  423d18:	mov    BYTE PTR [rax],0x20
  423d1b:	cmp    BYTE PTR [rbx+0x31],0x0
  423d1f:	setne  dil
  423d23:	add    rdi,QWORD PTR [rbx+0x28]
  423d27:	mov    QWORD PTR [rbx+0x28],rdi
  423d2b:	call   421540 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  423d30:	cdqe   
  423d32:	add    QWORD PTR [rbx+0x28],rax
  423d36:	add    rsp,0x18
  423d3a:	pop    rbx
  423d3b:	pop    rbp
  423d3c:	pop    r12
  423d3e:	pop    r13
  423d40:	ret    
  423d41:	nop    DWORD PTR [rax+0x0]
  423d48:	mov    rdi,rbx
  423d4b:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  423d50:	mov    rbp,QWORD PTR [rbx+0x28]
  423d54:	jmp    423cf0 <flatcc_json_printer_double_field@@Base+0xd0>
  423d56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  423d60:	lea    rax,[rdx+0x1]
  423d64:	mov    QWORD PTR [rdi+0x28],rax
  423d68:	mov    BYTE PTR [rdx],0xa
  423d6b:	movzx  edx,BYTE PTR [rdi+0x31]
  423d6f:	imul   edx,DWORD PTR [rdi+0x38]
  423d73:	mov    rdi,QWORD PTR [rdi+0x28]
  423d77:	movsxd r12,edx
  423d7a:	lea    rax,[rdi+r12*1]
  423d7e:	cmp    QWORD PTR [rbx+0x20],rax
  423d82:	jae    423da0 <flatcc_json_printer_double_field@@Base+0x180>
  423d84:	mov    rsi,r12
  423d87:	mov    rdi,rbx
  423d8a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  423d8f:	mov    rdx,QWORD PTR [rbx+0x28]
  423d93:	jmp    423cbe <flatcc_json_printer_double_field@@Base+0x9e>
  423d98:	nop    DWORD PTR [rax+rax*1+0x0]
  423da0:	mov    rdx,r12
  423da3:	mov    esi,0x20
  423da8:	call   4061c0 <memset@plt>
  423dad:	mov    rdx,QWORD PTR [rbx+0x28]
  423db1:	add    rdx,r12
  423db4:	mov    QWORD PTR [rbx+0x28],rdx
  423db8:	jmp    423cbe <flatcc_json_printer_double_field@@Base+0x9e>
  423dbd:	nop    DWORD PTR [rax]

0000000000423dc0 <flatcc_json_printer_uint8_enum_field@@Base>:
  423dc0:	endbr64 
  423dc4:	push   r15
  423dc6:	lea    eax,[rdx+rdx*1+0x4]
  423dca:	push   r14
  423dcc:	push   r13
  423dce:	push   r12
  423dd0:	push   rbp
  423dd1:	push   rbx
  423dd2:	sub    rsp,0x8
  423dd6:	mov    r13,QWORD PTR [rsp+0x40]
  423ddb:	cmp    eax,DWORD PTR [rsi+0x10]
  423dde:	jge    423ee0 <flatcc_json_printer_uint8_enum_field@@Base+0x120>
  423de4:	mov    rdx,QWORD PTR [rsi+0x8]
  423de8:	movzx  eax,WORD PTR [rdx+rax*1]
  423dec:	test   ax,ax
  423def:	je     423ee0 <flatcc_json_printer_uint8_enum_field@@Base+0x120>
  423df5:	add    rax,QWORD PTR [rsi]
  423df8:	je     423ee0 <flatcc_json_printer_uint8_enum_field@@Base+0x120>
  423dfe:	movzx  r12d,BYTE PTR [rax]
  423e02:	cmp    r9b,r12b
  423e05:	je     423f80 <flatcc_json_printer_uint8_enum_field@@Base+0x1c0>
  423e0b:	mov    eax,DWORD PTR [rsi+0x18]
  423e0e:	lea    edx,[rax+0x1]
  423e11:	mov    DWORD PTR [rsi+0x18],edx
  423e14:	mov    rdx,QWORD PTR [rdi+0x28]
  423e18:	test   eax,eax
  423e1a:	je     423e2b <flatcc_json_printer_uint8_enum_field@@Base+0x6b>
  423e1c:	lea    rax,[rdx+0x1]
  423e20:	mov    QWORD PTR [rdi+0x28],rax
  423e24:	mov    BYTE PTR [rdx],0x2c
  423e27:	mov    rdx,QWORD PTR [rdi+0x28]
  423e2b:	cmp    BYTE PTR [rdi+0x31],0x0
  423e2f:	mov    r15,rcx
  423e32:	mov    rbx,rdi
  423e35:	movsxd rbp,r8d
  423e38:	jne    423f28 <flatcc_json_printer_uint8_enum_field@@Base+0x168>
  423e3e:	cmp    QWORD PTR [rdi+0x20],rdx
  423e42:	ja     423e4d <flatcc_json_printer_uint8_enum_field@@Base+0x8d>
  423e44:	xor    esi,esi
  423e46:	call   QWORD PTR [rdi+0x48]
  423e49:	mov    rdx,QWORD PTR [rbx+0x28]
  423e4d:	mov    BYTE PTR [rdx],0x22
  423e50:	xor    edi,edi
  423e52:	mov    rdx,rbp
  423e55:	cmp    BYTE PTR [rbx+0x32],0x0
  423e59:	sete   dil
  423e5d:	add    rdi,QWORD PTR [rbx+0x28]
  423e61:	lea    rax,[rdi+rbp*1]
  423e65:	mov    QWORD PTR [rbx+0x28],rdi
  423e69:	mov    rsi,r15
  423e6c:	cmp    QWORD PTR [rbx+0x20],rax
  423e70:	jbe    423f10 <flatcc_json_printer_uint8_enum_field@@Base+0x150>
  423e76:	call   406210 <memcpy@plt>
  423e7b:	add    rbp,QWORD PTR [rbx+0x28]
  423e7f:	mov    QWORD PTR [rbx+0x28],rbp
  423e83:	mov    BYTE PTR [rbp+0x0],0x22
  423e87:	xor    eax,eax
  423e89:	cmp    BYTE PTR [rbx+0x32],0x0
  423e8d:	sete   al
  423e90:	add    rax,QWORD PTR [rbx+0x28]
  423e94:	lea    rdx,[rax+0x1]
  423e98:	mov    QWORD PTR [rbx+0x28],rdx
  423e9c:	mov    BYTE PTR [rax],0x3a
  423e9f:	xor    esi,esi
  423ea1:	mov    rax,QWORD PTR [rbx+0x28]
  423ea5:	mov    BYTE PTR [rax],0x20
  423ea8:	cmp    BYTE PTR [rbx+0x31],0x0
  423eac:	setne  sil
  423eb0:	add    rsi,QWORD PTR [rbx+0x28]
  423eb4:	cmp    BYTE PTR [rbx+0x33],0x0
  423eb8:	mov    QWORD PTR [rbx+0x28],rsi
  423ebc:	jne    423ef0 <flatcc_json_printer_uint8_enum_field@@Base+0x130>
  423ebe:	add    rsp,0x8
  423ec2:	mov    rdi,rbx
  423ec5:	pop    rbx
  423ec6:	pop    rbp
  423ec7:	movzx  esi,r12b
  423ecb:	pop    r12
  423ecd:	mov    rax,r13
  423ed0:	pop    r13
  423ed2:	pop    r14
  423ed4:	pop    r15
  423ed6:	jmp    rax
  423ed8:	nop    DWORD PTR [rax+rax*1+0x0]
  423ee0:	cmp    BYTE PTR [rdi+0x35],0x0
  423ee4:	je     423eff <flatcc_json_printer_uint8_enum_field@@Base+0x13f>
  423ee6:	mov    r12d,r9d
  423ee9:	jmp    423e0b <flatcc_json_printer_uint8_enum_field@@Base+0x4b>
  423eee:	xchg   ax,ax
  423ef0:	movzx  edi,r12b
  423ef4:	call   421350 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  423ef9:	cdqe   
  423efb:	add    QWORD PTR [rbx+0x28],rax
  423eff:	add    rsp,0x8
  423f03:	pop    rbx
  423f04:	pop    rbp
  423f05:	pop    r12
  423f07:	pop    r13
  423f09:	pop    r14
  423f0b:	pop    r15
  423f0d:	ret    
  423f0e:	xchg   ax,ax
  423f10:	mov    rdi,rbx
  423f13:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  423f18:	mov    rbp,QWORD PTR [rbx+0x28]
  423f1c:	jmp    423e83 <flatcc_json_printer_uint8_enum_field@@Base+0xc3>
  423f21:	nop    DWORD PTR [rax+0x0]
  423f28:	lea    rax,[rdx+0x1]
  423f2c:	mov    QWORD PTR [rdi+0x28],rax
  423f30:	mov    BYTE PTR [rdx],0xa
  423f33:	movzx  edx,BYTE PTR [rdi+0x31]
  423f37:	imul   edx,DWORD PTR [rdi+0x38]
  423f3b:	mov    rdi,QWORD PTR [rdi+0x28]
  423f3f:	movsxd r14,edx
  423f42:	lea    rax,[rdi+r14*1]
  423f46:	cmp    QWORD PTR [rbx+0x20],rax
  423f4a:	jae    423f60 <flatcc_json_printer_uint8_enum_field@@Base+0x1a0>
  423f4c:	mov    rsi,r14
  423f4f:	mov    rdi,rbx
  423f52:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  423f57:	mov    rdx,QWORD PTR [rbx+0x28]
  423f5b:	jmp    423e4d <flatcc_json_printer_uint8_enum_field@@Base+0x8d>
  423f60:	mov    rdx,r14
  423f63:	mov    esi,0x20
  423f68:	call   4061c0 <memset@plt>
  423f6d:	mov    rdx,QWORD PTR [rbx+0x28]
  423f71:	add    rdx,r14
  423f74:	mov    QWORD PTR [rbx+0x28],rdx
  423f78:	jmp    423e4d <flatcc_json_printer_uint8_enum_field@@Base+0x8d>
  423f7d:	nop    DWORD PTR [rax]
  423f80:	cmp    BYTE PTR [rdi+0x34],0x0
  423f84:	je     423e0b <flatcc_json_printer_uint8_enum_field@@Base+0x4b>
  423f8a:	jmp    423eff <flatcc_json_printer_uint8_enum_field@@Base+0x13f>
  423f8f:	nop

0000000000423f90 <flatcc_json_printer_uint16_enum_field@@Base>:
  423f90:	endbr64 
  423f94:	push   r15
  423f96:	lea    eax,[rdx+rdx*1+0x4]
  423f9a:	push   r14
  423f9c:	push   r13
  423f9e:	push   r12
  423fa0:	push   rbp
  423fa1:	push   rbx
  423fa2:	sub    rsp,0x8
  423fa6:	mov    r13,QWORD PTR [rsp+0x40]
  423fab:	cmp    eax,DWORD PTR [rsi+0x10]
  423fae:	jge    4240b0 <flatcc_json_printer_uint16_enum_field@@Base+0x120>
  423fb4:	mov    rdx,QWORD PTR [rsi+0x8]
  423fb8:	movzx  eax,WORD PTR [rdx+rax*1]
  423fbc:	test   ax,ax
  423fbf:	je     4240b0 <flatcc_json_printer_uint16_enum_field@@Base+0x120>
  423fc5:	add    rax,QWORD PTR [rsi]
  423fc8:	je     4240b0 <flatcc_json_printer_uint16_enum_field@@Base+0x120>
  423fce:	movzx  r12d,WORD PTR [rax]
  423fd2:	cmp    r9w,r12w
  423fd6:	je     424150 <flatcc_json_printer_uint16_enum_field@@Base+0x1c0>
  423fdc:	mov    eax,DWORD PTR [rsi+0x18]
  423fdf:	lea    edx,[rax+0x1]
  423fe2:	mov    DWORD PTR [rsi+0x18],edx
  423fe5:	mov    rdx,QWORD PTR [rdi+0x28]
  423fe9:	test   eax,eax
  423feb:	je     423ffc <flatcc_json_printer_uint16_enum_field@@Base+0x6c>
  423fed:	lea    rax,[rdx+0x1]
  423ff1:	mov    QWORD PTR [rdi+0x28],rax
  423ff5:	mov    BYTE PTR [rdx],0x2c
  423ff8:	mov    rdx,QWORD PTR [rdi+0x28]
  423ffc:	cmp    BYTE PTR [rdi+0x31],0x0
  424000:	mov    r15,rcx
  424003:	mov    rbx,rdi
  424006:	movsxd rbp,r8d
  424009:	jne    4240f8 <flatcc_json_printer_uint16_enum_field@@Base+0x168>
  42400f:	cmp    QWORD PTR [rdi+0x20],rdx
  424013:	ja     42401e <flatcc_json_printer_uint16_enum_field@@Base+0x8e>
  424015:	xor    esi,esi
  424017:	call   QWORD PTR [rdi+0x48]
  42401a:	mov    rdx,QWORD PTR [rbx+0x28]
  42401e:	mov    BYTE PTR [rdx],0x22
  424021:	xor    edi,edi
  424023:	mov    rdx,rbp
  424026:	cmp    BYTE PTR [rbx+0x32],0x0
  42402a:	sete   dil
  42402e:	add    rdi,QWORD PTR [rbx+0x28]
  424032:	lea    rax,[rdi+rbp*1]
  424036:	mov    QWORD PTR [rbx+0x28],rdi
  42403a:	mov    rsi,r15
  42403d:	cmp    QWORD PTR [rbx+0x20],rax
  424041:	jbe    4240e0 <flatcc_json_printer_uint16_enum_field@@Base+0x150>
  424047:	call   406210 <memcpy@plt>
  42404c:	add    rbp,QWORD PTR [rbx+0x28]
  424050:	mov    QWORD PTR [rbx+0x28],rbp
  424054:	mov    BYTE PTR [rbp+0x0],0x22
  424058:	xor    eax,eax
  42405a:	cmp    BYTE PTR [rbx+0x32],0x0
  42405e:	sete   al
  424061:	add    rax,QWORD PTR [rbx+0x28]
  424065:	lea    rdx,[rax+0x1]
  424069:	mov    QWORD PTR [rbx+0x28],rdx
  42406d:	mov    BYTE PTR [rax],0x3a
  424070:	xor    esi,esi
  424072:	mov    rax,QWORD PTR [rbx+0x28]
  424076:	mov    BYTE PTR [rax],0x20
  424079:	cmp    BYTE PTR [rbx+0x31],0x0
  42407d:	setne  sil
  424081:	add    rsi,QWORD PTR [rbx+0x28]
  424085:	cmp    BYTE PTR [rbx+0x33],0x0
  424089:	mov    QWORD PTR [rbx+0x28],rsi
  42408d:	jne    4240c0 <flatcc_json_printer_uint16_enum_field@@Base+0x130>
  42408f:	add    rsp,0x8
  424093:	mov    rdi,rbx
  424096:	pop    rbx
  424097:	pop    rbp
  424098:	movzx  esi,r12w
  42409c:	pop    r12
  42409e:	mov    rax,r13
  4240a1:	pop    r13
  4240a3:	pop    r14
  4240a5:	pop    r15
  4240a7:	jmp    rax
  4240a9:	nop    DWORD PTR [rax+0x0]
  4240b0:	cmp    BYTE PTR [rdi+0x35],0x0
  4240b4:	je     4240cf <flatcc_json_printer_uint16_enum_field@@Base+0x13f>
  4240b6:	mov    r12d,r9d
  4240b9:	jmp    423fdc <flatcc_json_printer_uint16_enum_field@@Base+0x4c>
  4240be:	xchg   ax,ax
  4240c0:	movzx  edi,r12w
  4240c4:	call   4205e0 <flatcc_json_parser_struct_as_root@@Base+0x10>
  4240c9:	cdqe   
  4240cb:	add    QWORD PTR [rbx+0x28],rax
  4240cf:	add    rsp,0x8
  4240d3:	pop    rbx
  4240d4:	pop    rbp
  4240d5:	pop    r12
  4240d7:	pop    r13
  4240d9:	pop    r14
  4240db:	pop    r15
  4240dd:	ret    
  4240de:	xchg   ax,ax
  4240e0:	mov    rdi,rbx
  4240e3:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4240e8:	mov    rbp,QWORD PTR [rbx+0x28]
  4240ec:	jmp    424054 <flatcc_json_printer_uint16_enum_field@@Base+0xc4>
  4240f1:	nop    DWORD PTR [rax+0x0]
  4240f8:	lea    rax,[rdx+0x1]
  4240fc:	mov    QWORD PTR [rdi+0x28],rax
  424100:	mov    BYTE PTR [rdx],0xa
  424103:	movzx  edx,BYTE PTR [rdi+0x31]
  424107:	imul   edx,DWORD PTR [rdi+0x38]
  42410b:	mov    rdi,QWORD PTR [rdi+0x28]
  42410f:	movsxd r14,edx
  424112:	lea    rax,[rdi+r14*1]
  424116:	cmp    QWORD PTR [rbx+0x20],rax
  42411a:	jae    424130 <flatcc_json_printer_uint16_enum_field@@Base+0x1a0>
  42411c:	mov    rsi,r14
  42411f:	mov    rdi,rbx
  424122:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  424127:	mov    rdx,QWORD PTR [rbx+0x28]
  42412b:	jmp    42401e <flatcc_json_printer_uint16_enum_field@@Base+0x8e>
  424130:	mov    rdx,r14
  424133:	mov    esi,0x20
  424138:	call   4061c0 <memset@plt>
  42413d:	mov    rdx,QWORD PTR [rbx+0x28]
  424141:	add    rdx,r14
  424144:	mov    QWORD PTR [rbx+0x28],rdx
  424148:	jmp    42401e <flatcc_json_printer_uint16_enum_field@@Base+0x8e>
  42414d:	nop    DWORD PTR [rax]
  424150:	cmp    BYTE PTR [rdi+0x34],0x0
  424154:	je     423fdc <flatcc_json_printer_uint16_enum_field@@Base+0x4c>
  42415a:	jmp    4240cf <flatcc_json_printer_uint16_enum_field@@Base+0x13f>
  42415f:	nop

0000000000424160 <flatcc_json_printer_uint32_enum_field@@Base>:
  424160:	endbr64 
  424164:	push   r15
  424166:	lea    eax,[rdx+rdx*1+0x4]
  42416a:	push   r14
  42416c:	push   r13
  42416e:	push   r12
  424170:	push   rbp
  424171:	push   rbx
  424172:	sub    rsp,0x8
  424176:	mov    r13,QWORD PTR [rsp+0x40]
  42417b:	cmp    eax,DWORD PTR [rsi+0x10]
  42417e:	jge    424280 <flatcc_json_printer_uint32_enum_field@@Base+0x120>
  424184:	mov    rdx,QWORD PTR [rsi+0x8]
  424188:	movzx  eax,WORD PTR [rdx+rax*1]
  42418c:	test   ax,ax
  42418f:	je     424280 <flatcc_json_printer_uint32_enum_field@@Base+0x120>
  424195:	add    rax,QWORD PTR [rsi]
  424198:	je     424280 <flatcc_json_printer_uint32_enum_field@@Base+0x120>
  42419e:	mov    r12d,DWORD PTR [rax]
  4241a1:	cmp    r9d,r12d
  4241a4:	je     424320 <flatcc_json_printer_uint32_enum_field@@Base+0x1c0>
  4241aa:	mov    eax,DWORD PTR [rsi+0x18]
  4241ad:	lea    edx,[rax+0x1]
  4241b0:	mov    DWORD PTR [rsi+0x18],edx
  4241b3:	mov    rdx,QWORD PTR [rdi+0x28]
  4241b7:	test   eax,eax
  4241b9:	je     4241ca <flatcc_json_printer_uint32_enum_field@@Base+0x6a>
  4241bb:	lea    rax,[rdx+0x1]
  4241bf:	mov    QWORD PTR [rdi+0x28],rax
  4241c3:	mov    BYTE PTR [rdx],0x2c
  4241c6:	mov    rdx,QWORD PTR [rdi+0x28]
  4241ca:	cmp    BYTE PTR [rdi+0x31],0x0
  4241ce:	mov    r15,rcx
  4241d1:	mov    rbx,rdi
  4241d4:	movsxd rbp,r8d
  4241d7:	jne    4242c8 <flatcc_json_printer_uint32_enum_field@@Base+0x168>
  4241dd:	cmp    QWORD PTR [rdi+0x20],rdx
  4241e1:	ja     4241ec <flatcc_json_printer_uint32_enum_field@@Base+0x8c>
  4241e3:	xor    esi,esi
  4241e5:	call   QWORD PTR [rdi+0x48]
  4241e8:	mov    rdx,QWORD PTR [rbx+0x28]
  4241ec:	mov    BYTE PTR [rdx],0x22
  4241ef:	xor    edi,edi
  4241f1:	mov    rdx,rbp
  4241f4:	cmp    BYTE PTR [rbx+0x32],0x0
  4241f8:	sete   dil
  4241fc:	add    rdi,QWORD PTR [rbx+0x28]
  424200:	lea    rax,[rdi+rbp*1]
  424204:	mov    QWORD PTR [rbx+0x28],rdi
  424208:	mov    rsi,r15
  42420b:	cmp    QWORD PTR [rbx+0x20],rax
  42420f:	jbe    4242b0 <flatcc_json_printer_uint32_enum_field@@Base+0x150>
  424215:	call   406210 <memcpy@plt>
  42421a:	add    rbp,QWORD PTR [rbx+0x28]
  42421e:	mov    QWORD PTR [rbx+0x28],rbp
  424222:	mov    BYTE PTR [rbp+0x0],0x22
  424226:	xor    eax,eax
  424228:	cmp    BYTE PTR [rbx+0x32],0x0
  42422c:	sete   al
  42422f:	add    rax,QWORD PTR [rbx+0x28]
  424233:	lea    rdx,[rax+0x1]
  424237:	mov    QWORD PTR [rbx+0x28],rdx
  42423b:	mov    BYTE PTR [rax],0x3a
  42423e:	xor    esi,esi
  424240:	mov    rax,QWORD PTR [rbx+0x28]
  424244:	mov    BYTE PTR [rax],0x20
  424247:	cmp    BYTE PTR [rbx+0x31],0x0
  42424b:	setne  sil
  42424f:	add    rsi,QWORD PTR [rbx+0x28]
  424253:	cmp    BYTE PTR [rbx+0x33],0x0
  424257:	mov    QWORD PTR [rbx+0x28],rsi
  42425b:	jne    424290 <flatcc_json_printer_uint32_enum_field@@Base+0x130>
  42425d:	add    rsp,0x8
  424261:	mov    rdi,rbx
  424264:	pop    rbx
  424265:	pop    rbp
  424266:	mov    esi,r12d
  424269:	pop    r12
  42426b:	mov    rax,r13
  42426e:	pop    r13
  424270:	pop    r14
  424272:	pop    r15
  424274:	jmp    rax
  424276:	nop    WORD PTR cs:[rax+rax*1+0x0]
  424280:	cmp    BYTE PTR [rdi+0x35],0x0
  424284:	je     42429e <flatcc_json_printer_uint32_enum_field@@Base+0x13e>
  424286:	mov    r12d,r9d
  424289:	jmp    4241aa <flatcc_json_printer_uint32_enum_field@@Base+0x4a>
  42428e:	xchg   ax,ax
  424290:	mov    edi,r12d
  424293:	call   420710 <flatcc_json_parser_struct_as_root@@Base+0x140>
  424298:	cdqe   
  42429a:	add    QWORD PTR [rbx+0x28],rax
  42429e:	add    rsp,0x8
  4242a2:	pop    rbx
  4242a3:	pop    rbp
  4242a4:	pop    r12
  4242a6:	pop    r13
  4242a8:	pop    r14
  4242aa:	pop    r15
  4242ac:	ret    
  4242ad:	nop    DWORD PTR [rax]
  4242b0:	mov    rdi,rbx
  4242b3:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4242b8:	mov    rbp,QWORD PTR [rbx+0x28]
  4242bc:	jmp    424222 <flatcc_json_printer_uint32_enum_field@@Base+0xc2>
  4242c1:	nop    DWORD PTR [rax+0x0]
  4242c8:	lea    rax,[rdx+0x1]
  4242cc:	mov    QWORD PTR [rdi+0x28],rax
  4242d0:	mov    BYTE PTR [rdx],0xa
  4242d3:	movzx  edx,BYTE PTR [rdi+0x31]
  4242d7:	imul   edx,DWORD PTR [rdi+0x38]
  4242db:	mov    rdi,QWORD PTR [rdi+0x28]
  4242df:	movsxd r14,edx
  4242e2:	lea    rax,[rdi+r14*1]
  4242e6:	cmp    QWORD PTR [rbx+0x20],rax
  4242ea:	jae    424300 <flatcc_json_printer_uint32_enum_field@@Base+0x1a0>
  4242ec:	mov    rsi,r14
  4242ef:	mov    rdi,rbx
  4242f2:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4242f7:	mov    rdx,QWORD PTR [rbx+0x28]
  4242fb:	jmp    4241ec <flatcc_json_printer_uint32_enum_field@@Base+0x8c>
  424300:	mov    rdx,r14
  424303:	mov    esi,0x20
  424308:	call   4061c0 <memset@plt>
  42430d:	mov    rdx,QWORD PTR [rbx+0x28]
  424311:	add    rdx,r14
  424314:	mov    QWORD PTR [rbx+0x28],rdx
  424318:	jmp    4241ec <flatcc_json_printer_uint32_enum_field@@Base+0x8c>
  42431d:	nop    DWORD PTR [rax]
  424320:	cmp    BYTE PTR [rdi+0x34],0x0
  424324:	je     4241aa <flatcc_json_printer_uint32_enum_field@@Base+0x4a>
  42432a:	jmp    42429e <flatcc_json_printer_uint32_enum_field@@Base+0x13e>
  42432f:	nop

0000000000424330 <flatcc_json_printer_uint64_enum_field@@Base>:
  424330:	endbr64 
  424334:	push   r15
  424336:	lea    eax,[rdx+rdx*1+0x4]
  42433a:	push   r14
  42433c:	push   r13
  42433e:	push   r12
  424340:	push   rbp
  424341:	push   rbx
  424342:	sub    rsp,0x8
  424346:	mov    r13,QWORD PTR [rsp+0x40]
  42434b:	cmp    eax,DWORD PTR [rsi+0x10]
  42434e:	jge    424450 <flatcc_json_printer_uint64_enum_field@@Base+0x120>
  424354:	mov    rdx,QWORD PTR [rsi+0x8]
  424358:	movzx  eax,WORD PTR [rdx+rax*1]
  42435c:	test   ax,ax
  42435f:	je     424450 <flatcc_json_printer_uint64_enum_field@@Base+0x120>
  424365:	add    rax,QWORD PTR [rsi]
  424368:	je     424450 <flatcc_json_printer_uint64_enum_field@@Base+0x120>
  42436e:	mov    r12,QWORD PTR [rax]
  424371:	cmp    r9,r12
  424374:	je     4244f0 <flatcc_json_printer_uint64_enum_field@@Base+0x1c0>
  42437a:	mov    eax,DWORD PTR [rsi+0x18]
  42437d:	lea    edx,[rax+0x1]
  424380:	mov    DWORD PTR [rsi+0x18],edx
  424383:	mov    rdx,QWORD PTR [rdi+0x28]
  424387:	test   eax,eax
  424389:	je     42439a <flatcc_json_printer_uint64_enum_field@@Base+0x6a>
  42438b:	lea    rax,[rdx+0x1]
  42438f:	mov    QWORD PTR [rdi+0x28],rax
  424393:	mov    BYTE PTR [rdx],0x2c
  424396:	mov    rdx,QWORD PTR [rdi+0x28]
  42439a:	cmp    BYTE PTR [rdi+0x31],0x0
  42439e:	mov    r15,rcx
  4243a1:	mov    rbx,rdi
  4243a4:	movsxd rbp,r8d
  4243a7:	jne    424498 <flatcc_json_printer_uint64_enum_field@@Base+0x168>
  4243ad:	cmp    QWORD PTR [rdi+0x20],rdx
  4243b1:	ja     4243bc <flatcc_json_printer_uint64_enum_field@@Base+0x8c>
  4243b3:	xor    esi,esi
  4243b5:	call   QWORD PTR [rdi+0x48]
  4243b8:	mov    rdx,QWORD PTR [rbx+0x28]
  4243bc:	mov    BYTE PTR [rdx],0x22
  4243bf:	xor    edi,edi
  4243c1:	mov    rdx,rbp
  4243c4:	cmp    BYTE PTR [rbx+0x32],0x0
  4243c8:	sete   dil
  4243cc:	add    rdi,QWORD PTR [rbx+0x28]
  4243d0:	lea    rax,[rdi+rbp*1]
  4243d4:	mov    QWORD PTR [rbx+0x28],rdi
  4243d8:	mov    rsi,r15
  4243db:	cmp    QWORD PTR [rbx+0x20],rax
  4243df:	jbe    424480 <flatcc_json_printer_uint64_enum_field@@Base+0x150>
  4243e5:	call   406210 <memcpy@plt>
  4243ea:	add    rbp,QWORD PTR [rbx+0x28]
  4243ee:	mov    QWORD PTR [rbx+0x28],rbp
  4243f2:	mov    BYTE PTR [rbp+0x0],0x22
  4243f6:	xor    eax,eax
  4243f8:	cmp    BYTE PTR [rbx+0x32],0x0
  4243fc:	sete   al
  4243ff:	add    rax,QWORD PTR [rbx+0x28]
  424403:	lea    rdx,[rax+0x1]
  424407:	mov    QWORD PTR [rbx+0x28],rdx
  42440b:	mov    BYTE PTR [rax],0x3a
  42440e:	xor    esi,esi
  424410:	mov    rax,QWORD PTR [rbx+0x28]
  424414:	mov    BYTE PTR [rax],0x20
  424417:	cmp    BYTE PTR [rbx+0x31],0x0
  42441b:	setne  sil
  42441f:	add    rsi,QWORD PTR [rbx+0x28]
  424423:	cmp    BYTE PTR [rbx+0x33],0x0
  424427:	mov    QWORD PTR [rbx+0x28],rsi
  42442b:	jne    424460 <flatcc_json_printer_uint64_enum_field@@Base+0x130>
  42442d:	add    rsp,0x8
  424431:	mov    rdi,rbx
  424434:	pop    rbx
  424435:	pop    rbp
  424436:	mov    rsi,r12
  424439:	pop    r12
  42443b:	mov    rax,r13
  42443e:	pop    r13
  424440:	pop    r14
  424442:	pop    r15
  424444:	jmp    rax
  424446:	nop    WORD PTR cs:[rax+rax*1+0x0]
  424450:	cmp    BYTE PTR [rdi+0x35],0x0
  424454:	je     42446e <flatcc_json_printer_uint64_enum_field@@Base+0x13e>
  424456:	mov    r12,r9
  424459:	jmp    42437a <flatcc_json_printer_uint64_enum_field@@Base+0x4a>
  42445e:	xchg   ax,ax
  424460:	mov    rdi,r12
  424463:	call   4209c0 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  424468:	cdqe   
  42446a:	add    QWORD PTR [rbx+0x28],rax
  42446e:	add    rsp,0x8
  424472:	pop    rbx
  424473:	pop    rbp
  424474:	pop    r12
  424476:	pop    r13
  424478:	pop    r14
  42447a:	pop    r15
  42447c:	ret    
  42447d:	nop    DWORD PTR [rax]
  424480:	mov    rdi,rbx
  424483:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  424488:	mov    rbp,QWORD PTR [rbx+0x28]
  42448c:	jmp    4243f2 <flatcc_json_printer_uint64_enum_field@@Base+0xc2>
  424491:	nop    DWORD PTR [rax+0x0]
  424498:	lea    rax,[rdx+0x1]
  42449c:	mov    QWORD PTR [rdi+0x28],rax
  4244a0:	mov    BYTE PTR [rdx],0xa
  4244a3:	movzx  edx,BYTE PTR [rdi+0x31]
  4244a7:	imul   edx,DWORD PTR [rdi+0x38]
  4244ab:	mov    rdi,QWORD PTR [rdi+0x28]
  4244af:	movsxd r14,edx
  4244b2:	lea    rax,[rdi+r14*1]
  4244b6:	cmp    QWORD PTR [rbx+0x20],rax
  4244ba:	jae    4244d0 <flatcc_json_printer_uint64_enum_field@@Base+0x1a0>
  4244bc:	mov    rsi,r14
  4244bf:	mov    rdi,rbx
  4244c2:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4244c7:	mov    rdx,QWORD PTR [rbx+0x28]
  4244cb:	jmp    4243bc <flatcc_json_printer_uint64_enum_field@@Base+0x8c>
  4244d0:	mov    rdx,r14
  4244d3:	mov    esi,0x20
  4244d8:	call   4061c0 <memset@plt>
  4244dd:	mov    rdx,QWORD PTR [rbx+0x28]
  4244e1:	add    rdx,r14
  4244e4:	mov    QWORD PTR [rbx+0x28],rdx
  4244e8:	jmp    4243bc <flatcc_json_printer_uint64_enum_field@@Base+0x8c>
  4244ed:	nop    DWORD PTR [rax]
  4244f0:	cmp    BYTE PTR [rdi+0x34],0x0
  4244f4:	je     42437a <flatcc_json_printer_uint64_enum_field@@Base+0x4a>
  4244fa:	jmp    42446e <flatcc_json_printer_uint64_enum_field@@Base+0x13e>
  4244ff:	nop

0000000000424500 <flatcc_json_printer_int8_enum_field@@Base>:
  424500:	endbr64 
  424504:	push   r15
  424506:	lea    eax,[rdx+rdx*1+0x4]
  42450a:	push   r14
  42450c:	push   r13
  42450e:	push   r12
  424510:	push   rbp
  424511:	push   rbx
  424512:	sub    rsp,0x8
  424516:	mov    r13,QWORD PTR [rsp+0x40]
  42451b:	cmp    eax,DWORD PTR [rsi+0x10]
  42451e:	jge    424640 <flatcc_json_printer_int8_enum_field@@Base+0x140>
  424524:	mov    rdx,QWORD PTR [rsi+0x8]
  424528:	movzx  eax,WORD PTR [rdx+rax*1]
  42452c:	test   ax,ax
  42452f:	je     424640 <flatcc_json_printer_int8_enum_field@@Base+0x140>
  424535:	add    rax,QWORD PTR [rsi]
  424538:	je     424640 <flatcc_json_printer_int8_enum_field@@Base+0x140>
  42453e:	movzx  r12d,BYTE PTR [rax]
  424542:	cmp    r9b,r12b
  424545:	je     4246e0 <flatcc_json_printer_int8_enum_field@@Base+0x1e0>
  42454b:	mov    eax,DWORD PTR [rsi+0x18]
  42454e:	lea    edx,[rax+0x1]
  424551:	mov    DWORD PTR [rsi+0x18],edx
  424554:	mov    rdx,QWORD PTR [rdi+0x28]
  424558:	test   eax,eax
  42455a:	je     42456b <flatcc_json_printer_int8_enum_field@@Base+0x6b>
  42455c:	lea    rax,[rdx+0x1]
  424560:	mov    QWORD PTR [rdi+0x28],rax
  424564:	mov    BYTE PTR [rdx],0x2c
  424567:	mov    rdx,QWORD PTR [rdi+0x28]
  42456b:	cmp    BYTE PTR [rdi+0x31],0x0
  42456f:	mov    r15,rcx
  424572:	mov    rbx,rdi
  424575:	movsxd rbp,r8d
  424578:	jne    424688 <flatcc_json_printer_int8_enum_field@@Base+0x188>
  42457e:	cmp    QWORD PTR [rdi+0x20],rdx
  424582:	ja     42458d <flatcc_json_printer_int8_enum_field@@Base+0x8d>
  424584:	xor    esi,esi
  424586:	call   QWORD PTR [rdi+0x48]
  424589:	mov    rdx,QWORD PTR [rbx+0x28]
  42458d:	mov    BYTE PTR [rdx],0x22
  424590:	xor    edi,edi
  424592:	mov    rdx,rbp
  424595:	cmp    BYTE PTR [rbx+0x32],0x0
  424599:	sete   dil
  42459d:	add    rdi,QWORD PTR [rbx+0x28]
  4245a1:	lea    rax,[rdi+rbp*1]
  4245a5:	mov    QWORD PTR [rbx+0x28],rdi
  4245a9:	mov    rsi,r15
  4245ac:	cmp    QWORD PTR [rbx+0x20],rax
  4245b0:	jbe    424670 <flatcc_json_printer_int8_enum_field@@Base+0x170>
  4245b6:	call   406210 <memcpy@plt>
  4245bb:	add    rbp,QWORD PTR [rbx+0x28]
  4245bf:	mov    QWORD PTR [rbx+0x28],rbp
  4245c3:	mov    BYTE PTR [rbp+0x0],0x22
  4245c7:	xor    eax,eax
  4245c9:	cmp    BYTE PTR [rbx+0x32],0x0
  4245cd:	sete   al
  4245d0:	add    rax,QWORD PTR [rbx+0x28]
  4245d4:	lea    rdx,[rax+0x1]
  4245d8:	mov    QWORD PTR [rbx+0x28],rdx
  4245dc:	mov    BYTE PTR [rax],0x3a
  4245df:	xor    esi,esi
  4245e1:	mov    rax,QWORD PTR [rbx+0x28]
  4245e5:	mov    BYTE PTR [rax],0x20
  4245e8:	cmp    BYTE PTR [rbx+0x31],0x0
  4245ec:	setne  sil
  4245f0:	add    rsi,QWORD PTR [rbx+0x28]
  4245f4:	cmp    BYTE PTR [rbx+0x33],0x0
  4245f8:	mov    QWORD PTR [rbx+0x28],rsi
  4245fc:	je     424650 <flatcc_json_printer_int8_enum_field@@Base+0x150>
  4245fe:	movsx  r8d,r12b
  424602:	shr    r8d,0x1f
  424606:	test   r12b,r12b
  424609:	jns    424614 <flatcc_json_printer_int8_enum_field@@Base+0x114>
  42460b:	mov    BYTE PTR [rsi],0x2d
  42460e:	neg    r12d
  424611:	inc    rsi
  424614:	movzx  edi,r12b
  424618:	call   421350 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  42461d:	add    r8d,eax
  424620:	movsxd r8,r8d
  424623:	add    QWORD PTR [rbx+0x28],r8
  424627:	add    rsp,0x8
  42462b:	pop    rbx
  42462c:	pop    rbp
  42462d:	pop    r12
  42462f:	pop    r13
  424631:	pop    r14
  424633:	pop    r15
  424635:	ret    
  424636:	nop    WORD PTR cs:[rax+rax*1+0x0]
  424640:	cmp    BYTE PTR [rdi+0x35],0x0
  424644:	je     424627 <flatcc_json_printer_int8_enum_field@@Base+0x127>
  424646:	mov    r12d,r9d
  424649:	jmp    42454b <flatcc_json_printer_int8_enum_field@@Base+0x4b>
  42464e:	xchg   ax,ax
  424650:	add    rsp,0x8
  424654:	mov    rdi,rbx
  424657:	pop    rbx
  424658:	pop    rbp
  424659:	movsx  esi,r12b
  42465d:	pop    r12
  42465f:	mov    rax,r13
  424662:	pop    r13
  424664:	pop    r14
  424666:	pop    r15
  424668:	jmp    rax
  42466a:	nop    WORD PTR [rax+rax*1+0x0]
  424670:	mov    rdi,rbx
  424673:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  424678:	mov    rbp,QWORD PTR [rbx+0x28]
  42467c:	jmp    4245c3 <flatcc_json_printer_int8_enum_field@@Base+0xc3>
  424681:	nop    DWORD PTR [rax+0x0]
  424688:	lea    rax,[rdx+0x1]
  42468c:	mov    QWORD PTR [rdi+0x28],rax
  424690:	mov    BYTE PTR [rdx],0xa
  424693:	movzx  edx,BYTE PTR [rdi+0x31]
  424697:	imul   edx,DWORD PTR [rdi+0x38]
  42469b:	mov    rdi,QWORD PTR [rdi+0x28]
  42469f:	movsxd r14,edx
  4246a2:	lea    rax,[rdi+r14*1]
  4246a6:	cmp    QWORD PTR [rbx+0x20],rax
  4246aa:	jae    4246c0 <flatcc_json_printer_int8_enum_field@@Base+0x1c0>
  4246ac:	mov    rsi,r14
  4246af:	mov    rdi,rbx
  4246b2:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4246b7:	mov    rdx,QWORD PTR [rbx+0x28]
  4246bb:	jmp    42458d <flatcc_json_printer_int8_enum_field@@Base+0x8d>
  4246c0:	mov    rdx,r14
  4246c3:	mov    esi,0x20
  4246c8:	call   4061c0 <memset@plt>
  4246cd:	mov    rdx,QWORD PTR [rbx+0x28]
  4246d1:	add    rdx,r14
  4246d4:	mov    QWORD PTR [rbx+0x28],rdx
  4246d8:	jmp    42458d <flatcc_json_printer_int8_enum_field@@Base+0x8d>
  4246dd:	nop    DWORD PTR [rax]
  4246e0:	cmp    BYTE PTR [rdi+0x34],0x0
  4246e4:	je     42454b <flatcc_json_printer_int8_enum_field@@Base+0x4b>
  4246ea:	jmp    424627 <flatcc_json_printer_int8_enum_field@@Base+0x127>
  4246ef:	nop

00000000004246f0 <flatcc_json_printer_int16_enum_field@@Base>:
  4246f0:	endbr64 
  4246f4:	push   r15
  4246f6:	lea    eax,[rdx+rdx*1+0x4]
  4246fa:	push   r14
  4246fc:	push   r13
  4246fe:	push   r12
  424700:	push   rbp
  424701:	push   rbx
  424702:	sub    rsp,0x8
  424706:	mov    r13,QWORD PTR [rsp+0x40]
  42470b:	cmp    eax,DWORD PTR [rsi+0x10]
  42470e:	jge    424830 <flatcc_json_printer_int16_enum_field@@Base+0x140>
  424714:	mov    rdx,QWORD PTR [rsi+0x8]
  424718:	movzx  eax,WORD PTR [rdx+rax*1]
  42471c:	test   ax,ax
  42471f:	je     424830 <flatcc_json_printer_int16_enum_field@@Base+0x140>
  424725:	add    rax,QWORD PTR [rsi]
  424728:	je     424830 <flatcc_json_printer_int16_enum_field@@Base+0x140>
  42472e:	movzx  r12d,WORD PTR [rax]
  424732:	cmp    r9w,r12w
  424736:	je     4248d0 <flatcc_json_printer_int16_enum_field@@Base+0x1e0>
  42473c:	mov    eax,DWORD PTR [rsi+0x18]
  42473f:	lea    edx,[rax+0x1]
  424742:	mov    DWORD PTR [rsi+0x18],edx
  424745:	mov    rdx,QWORD PTR [rdi+0x28]
  424749:	test   eax,eax
  42474b:	je     42475c <flatcc_json_printer_int16_enum_field@@Base+0x6c>
  42474d:	lea    rax,[rdx+0x1]
  424751:	mov    QWORD PTR [rdi+0x28],rax
  424755:	mov    BYTE PTR [rdx],0x2c
  424758:	mov    rdx,QWORD PTR [rdi+0x28]
  42475c:	cmp    BYTE PTR [rdi+0x31],0x0
  424760:	mov    r15,rcx
  424763:	mov    rbx,rdi
  424766:	movsxd rbp,r8d
  424769:	jne    424878 <flatcc_json_printer_int16_enum_field@@Base+0x188>
  42476f:	cmp    QWORD PTR [rdi+0x20],rdx
  424773:	ja     42477e <flatcc_json_printer_int16_enum_field@@Base+0x8e>
  424775:	xor    esi,esi
  424777:	call   QWORD PTR [rdi+0x48]
  42477a:	mov    rdx,QWORD PTR [rbx+0x28]
  42477e:	mov    BYTE PTR [rdx],0x22
  424781:	xor    edi,edi
  424783:	mov    rdx,rbp
  424786:	cmp    BYTE PTR [rbx+0x32],0x0
  42478a:	sete   dil
  42478e:	add    rdi,QWORD PTR [rbx+0x28]
  424792:	lea    rax,[rdi+rbp*1]
  424796:	mov    QWORD PTR [rbx+0x28],rdi
  42479a:	mov    rsi,r15
  42479d:	cmp    QWORD PTR [rbx+0x20],rax
  4247a1:	jbe    424860 <flatcc_json_printer_int16_enum_field@@Base+0x170>
  4247a7:	call   406210 <memcpy@plt>
  4247ac:	add    rbp,QWORD PTR [rbx+0x28]
  4247b0:	mov    QWORD PTR [rbx+0x28],rbp
  4247b4:	mov    BYTE PTR [rbp+0x0],0x22
  4247b8:	xor    eax,eax
  4247ba:	cmp    BYTE PTR [rbx+0x32],0x0
  4247be:	sete   al
  4247c1:	add    rax,QWORD PTR [rbx+0x28]
  4247c5:	lea    rdx,[rax+0x1]
  4247c9:	mov    QWORD PTR [rbx+0x28],rdx
  4247cd:	mov    BYTE PTR [rax],0x3a
  4247d0:	xor    esi,esi
  4247d2:	mov    rax,QWORD PTR [rbx+0x28]
  4247d6:	mov    BYTE PTR [rax],0x20
  4247d9:	cmp    BYTE PTR [rbx+0x31],0x0
  4247dd:	setne  sil
  4247e1:	add    rsi,QWORD PTR [rbx+0x28]
  4247e5:	cmp    BYTE PTR [rbx+0x33],0x0
  4247e9:	mov    QWORD PTR [rbx+0x28],rsi
  4247ed:	je     424840 <flatcc_json_printer_int16_enum_field@@Base+0x150>
  4247ef:	movsx  r11d,r12w
  4247f3:	shr    r11d,0x1f
  4247f7:	test   r12w,r12w
  4247fb:	jns    424806 <flatcc_json_printer_int16_enum_field@@Base+0x116>
  4247fd:	mov    BYTE PTR [rsi],0x2d
  424800:	neg    r12d
  424803:	inc    rsi
  424806:	movzx  edi,r12w
  42480a:	call   4205e0 <flatcc_json_parser_struct_as_root@@Base+0x10>
  42480f:	add    r11d,eax
  424812:	movsxd r11,r11d
  424815:	add    QWORD PTR [rbx+0x28],r11
  424819:	add    rsp,0x8
  42481d:	pop    rbx
  42481e:	pop    rbp
  42481f:	pop    r12
  424821:	pop    r13
  424823:	pop    r14
  424825:	pop    r15
  424827:	ret    
  424828:	nop    DWORD PTR [rax+rax*1+0x0]
  424830:	cmp    BYTE PTR [rdi+0x35],0x0
  424834:	je     424819 <flatcc_json_printer_int16_enum_field@@Base+0x129>
  424836:	mov    r12d,r9d
  424839:	jmp    42473c <flatcc_json_printer_int16_enum_field@@Base+0x4c>
  42483e:	xchg   ax,ax
  424840:	add    rsp,0x8
  424844:	mov    rdi,rbx
  424847:	pop    rbx
  424848:	pop    rbp
  424849:	movsx  esi,r12w
  42484d:	pop    r12
  42484f:	mov    rax,r13
  424852:	pop    r13
  424854:	pop    r14
  424856:	pop    r15
  424858:	jmp    rax
  42485a:	nop    WORD PTR [rax+rax*1+0x0]
  424860:	mov    rdi,rbx
  424863:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  424868:	mov    rbp,QWORD PTR [rbx+0x28]
  42486c:	jmp    4247b4 <flatcc_json_printer_int16_enum_field@@Base+0xc4>
  424871:	nop    DWORD PTR [rax+0x0]
  424878:	lea    rax,[rdx+0x1]
  42487c:	mov    QWORD PTR [rdi+0x28],rax
  424880:	mov    BYTE PTR [rdx],0xa
  424883:	movzx  edx,BYTE PTR [rdi+0x31]
  424887:	imul   edx,DWORD PTR [rdi+0x38]
  42488b:	mov    rdi,QWORD PTR [rdi+0x28]
  42488f:	movsxd r14,edx
  424892:	lea    rax,[rdi+r14*1]
  424896:	cmp    QWORD PTR [rbx+0x20],rax
  42489a:	jae    4248b0 <flatcc_json_printer_int16_enum_field@@Base+0x1c0>
  42489c:	mov    rsi,r14
  42489f:	mov    rdi,rbx
  4248a2:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4248a7:	mov    rdx,QWORD PTR [rbx+0x28]
  4248ab:	jmp    42477e <flatcc_json_printer_int16_enum_field@@Base+0x8e>
  4248b0:	mov    rdx,r14
  4248b3:	mov    esi,0x20
  4248b8:	call   4061c0 <memset@plt>
  4248bd:	mov    rdx,QWORD PTR [rbx+0x28]
  4248c1:	add    rdx,r14
  4248c4:	mov    QWORD PTR [rbx+0x28],rdx
  4248c8:	jmp    42477e <flatcc_json_printer_int16_enum_field@@Base+0x8e>
  4248cd:	nop    DWORD PTR [rax]
  4248d0:	cmp    BYTE PTR [rdi+0x34],0x0
  4248d4:	je     42473c <flatcc_json_printer_int16_enum_field@@Base+0x4c>
  4248da:	jmp    424819 <flatcc_json_printer_int16_enum_field@@Base+0x129>
  4248df:	nop

00000000004248e0 <flatcc_json_printer_int32_enum_field@@Base>:
  4248e0:	endbr64 
  4248e4:	push   r15
  4248e6:	lea    eax,[rdx+rdx*1+0x4]
  4248ea:	push   r14
  4248ec:	push   r13
  4248ee:	push   r12
  4248f0:	push   rbp
  4248f1:	push   rbx
  4248f2:	sub    rsp,0x8
  4248f6:	mov    r13,QWORD PTR [rsp+0x40]
  4248fb:	cmp    eax,DWORD PTR [rsi+0x10]
  4248fe:	jge    424a18 <flatcc_json_printer_int32_enum_field@@Base+0x138>
  424904:	mov    rdx,QWORD PTR [rsi+0x8]
  424908:	movzx  eax,WORD PTR [rdx+rax*1]
  42490c:	test   ax,ax
  42490f:	je     424a18 <flatcc_json_printer_int32_enum_field@@Base+0x138>
  424915:	add    rax,QWORD PTR [rsi]
  424918:	je     424a18 <flatcc_json_printer_int32_enum_field@@Base+0x138>
  42491e:	mov    r14d,DWORD PTR [rax]
  424921:	cmp    r9d,r14d
  424924:	je     424ac0 <flatcc_json_printer_int32_enum_field@@Base+0x1e0>
  42492a:	mov    eax,DWORD PTR [rsi+0x18]
  42492d:	lea    edx,[rax+0x1]
  424930:	mov    DWORD PTR [rsi+0x18],edx
  424933:	mov    rdx,QWORD PTR [rdi+0x28]
  424937:	test   eax,eax
  424939:	je     42494a <flatcc_json_printer_int32_enum_field@@Base+0x6a>
  42493b:	lea    rax,[rdx+0x1]
  42493f:	mov    QWORD PTR [rdi+0x28],rax
  424943:	mov    BYTE PTR [rdx],0x2c
  424946:	mov    rdx,QWORD PTR [rdi+0x28]
  42494a:	cmp    BYTE PTR [rdi+0x31],0x0
  42494e:	mov    r15,rcx
  424951:	mov    rbx,rdi
  424954:	movsxd rbp,r8d
  424957:	jne    424a68 <flatcc_json_printer_int32_enum_field@@Base+0x188>
  42495d:	cmp    QWORD PTR [rdi+0x20],rdx
  424961:	ja     42496c <flatcc_json_printer_int32_enum_field@@Base+0x8c>
  424963:	xor    esi,esi
  424965:	call   QWORD PTR [rdi+0x48]
  424968:	mov    rdx,QWORD PTR [rbx+0x28]
  42496c:	mov    BYTE PTR [rdx],0x22
  42496f:	xor    edi,edi
  424971:	mov    rdx,rbp
  424974:	cmp    BYTE PTR [rbx+0x32],0x0
  424978:	sete   dil
  42497c:	add    rdi,QWORD PTR [rbx+0x28]
  424980:	lea    rax,[rdi+rbp*1]
  424984:	mov    QWORD PTR [rbx+0x28],rdi
  424988:	mov    rsi,r15
  42498b:	cmp    QWORD PTR [rbx+0x20],rax
  42498f:	jbe    424a50 <flatcc_json_printer_int32_enum_field@@Base+0x170>
  424995:	call   406210 <memcpy@plt>
  42499a:	add    rbp,QWORD PTR [rbx+0x28]
  42499e:	mov    QWORD PTR [rbx+0x28],rbp
  4249a2:	mov    BYTE PTR [rbp+0x0],0x22
  4249a6:	xor    eax,eax
  4249a8:	cmp    BYTE PTR [rbx+0x32],0x0
  4249ac:	sete   al
  4249af:	add    rax,QWORD PTR [rbx+0x28]
  4249b3:	lea    rdx,[rax+0x1]
  4249b7:	mov    QWORD PTR [rbx+0x28],rdx
  4249bb:	mov    BYTE PTR [rax],0x3a
  4249be:	xor    esi,esi
  4249c0:	mov    rax,QWORD PTR [rbx+0x28]
  4249c4:	mov    BYTE PTR [rax],0x20
  4249c7:	cmp    BYTE PTR [rbx+0x31],0x0
  4249cb:	setne  sil
  4249cf:	add    rsi,QWORD PTR [rbx+0x28]
  4249d3:	cmp    BYTE PTR [rbx+0x33],0x0
  4249d7:	mov    QWORD PTR [rbx+0x28],rsi
  4249db:	je     424a30 <flatcc_json_printer_int32_enum_field@@Base+0x150>
  4249dd:	mov    ebp,r14d
  4249e0:	shr    ebp,0x1f
  4249e3:	test   r14d,r14d
  4249e6:	jns    4249f1 <flatcc_json_printer_int32_enum_field@@Base+0x111>
  4249e8:	mov    BYTE PTR [rsi],0x2d
  4249eb:	neg    r14d
  4249ee:	inc    rsi
  4249f1:	mov    edi,r14d
  4249f4:	call   420710 <flatcc_json_parser_struct_as_root@@Base+0x140>
  4249f9:	add    ebp,eax
  4249fb:	movsxd rbp,ebp
  4249fe:	add    QWORD PTR [rbx+0x28],rbp
  424a02:	add    rsp,0x8
  424a06:	pop    rbx
  424a07:	pop    rbp
  424a08:	pop    r12
  424a0a:	pop    r13
  424a0c:	pop    r14
  424a0e:	pop    r15
  424a10:	ret    
  424a11:	nop    DWORD PTR [rax+0x0]
  424a18:	cmp    BYTE PTR [rdi+0x35],0x0
  424a1c:	je     424a02 <flatcc_json_printer_int32_enum_field@@Base+0x122>
  424a1e:	mov    r14d,r9d
  424a21:	jmp    42492a <flatcc_json_printer_int32_enum_field@@Base+0x4a>
  424a26:	nop    WORD PTR cs:[rax+rax*1+0x0]
  424a30:	add    rsp,0x8
  424a34:	mov    rdi,rbx
  424a37:	pop    rbx
  424a38:	pop    rbp
  424a39:	pop    r12
  424a3b:	mov    rax,r13
  424a3e:	pop    r13
  424a40:	mov    esi,r14d
  424a43:	pop    r14
  424a45:	pop    r15
  424a47:	jmp    rax
  424a49:	nop    DWORD PTR [rax+0x0]
  424a50:	mov    rdi,rbx
  424a53:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  424a58:	mov    rbp,QWORD PTR [rbx+0x28]
  424a5c:	jmp    4249a2 <flatcc_json_printer_int32_enum_field@@Base+0xc2>
  424a61:	nop    DWORD PTR [rax+0x0]
  424a68:	lea    rax,[rdx+0x1]
  424a6c:	mov    QWORD PTR [rdi+0x28],rax
  424a70:	mov    BYTE PTR [rdx],0xa
  424a73:	movzx  edx,BYTE PTR [rdi+0x31]
  424a77:	imul   edx,DWORD PTR [rdi+0x38]
  424a7b:	mov    rdi,QWORD PTR [rdi+0x28]
  424a7f:	movsxd r12,edx
  424a82:	lea    rax,[rdi+r12*1]
  424a86:	cmp    QWORD PTR [rbx+0x20],rax
  424a8a:	jae    424aa0 <flatcc_json_printer_int32_enum_field@@Base+0x1c0>
  424a8c:	mov    rsi,r12
  424a8f:	mov    rdi,rbx
  424a92:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  424a97:	mov    rdx,QWORD PTR [rbx+0x28]
  424a9b:	jmp    42496c <flatcc_json_printer_int32_enum_field@@Base+0x8c>
  424aa0:	mov    rdx,r12
  424aa3:	mov    esi,0x20
  424aa8:	call   4061c0 <memset@plt>
  424aad:	mov    rdx,QWORD PTR [rbx+0x28]
  424ab1:	add    rdx,r12
  424ab4:	mov    QWORD PTR [rbx+0x28],rdx
  424ab8:	jmp    42496c <flatcc_json_printer_int32_enum_field@@Base+0x8c>
  424abd:	nop    DWORD PTR [rax]
  424ac0:	cmp    BYTE PTR [rdi+0x34],0x0
  424ac4:	je     42492a <flatcc_json_printer_int32_enum_field@@Base+0x4a>
  424aca:	jmp    424a02 <flatcc_json_printer_int32_enum_field@@Base+0x122>
  424acf:	nop

0000000000424ad0 <flatcc_json_printer_int64_enum_field@@Base>:
  424ad0:	endbr64 
  424ad4:	push   r15
  424ad6:	lea    eax,[rdx+rdx*1+0x4]
  424ada:	push   r14
  424adc:	push   r13
  424ade:	push   r12
  424ae0:	push   rbp
  424ae1:	push   rbx
  424ae2:	sub    rsp,0x8
  424ae6:	mov    r13,QWORD PTR [rsp+0x40]
  424aeb:	cmp    eax,DWORD PTR [rsi+0x10]
  424aee:	jge    424c08 <flatcc_json_printer_int64_enum_field@@Base+0x138>
  424af4:	mov    rdx,QWORD PTR [rsi+0x8]
  424af8:	movzx  eax,WORD PTR [rdx+rax*1]
  424afc:	test   ax,ax
  424aff:	je     424c08 <flatcc_json_printer_int64_enum_field@@Base+0x138>
  424b05:	add    rax,QWORD PTR [rsi]
  424b08:	je     424c08 <flatcc_json_printer_int64_enum_field@@Base+0x138>
  424b0e:	mov    r14,QWORD PTR [rax]
  424b11:	cmp    r9,r14
  424b14:	je     424cb0 <flatcc_json_printer_int64_enum_field@@Base+0x1e0>
  424b1a:	mov    eax,DWORD PTR [rsi+0x18]
  424b1d:	lea    edx,[rax+0x1]
  424b20:	mov    DWORD PTR [rsi+0x18],edx
  424b23:	mov    rdx,QWORD PTR [rdi+0x28]
  424b27:	test   eax,eax
  424b29:	je     424b3a <flatcc_json_printer_int64_enum_field@@Base+0x6a>
  424b2b:	lea    rax,[rdx+0x1]
  424b2f:	mov    QWORD PTR [rdi+0x28],rax
  424b33:	mov    BYTE PTR [rdx],0x2c
  424b36:	mov    rdx,QWORD PTR [rdi+0x28]
  424b3a:	cmp    BYTE PTR [rdi+0x31],0x0
  424b3e:	mov    r15,rcx
  424b41:	mov    rbx,rdi
  424b44:	movsxd rbp,r8d
  424b47:	jne    424c58 <flatcc_json_printer_int64_enum_field@@Base+0x188>
  424b4d:	cmp    QWORD PTR [rdi+0x20],rdx
  424b51:	ja     424b5c <flatcc_json_printer_int64_enum_field@@Base+0x8c>
  424b53:	xor    esi,esi
  424b55:	call   QWORD PTR [rdi+0x48]
  424b58:	mov    rdx,QWORD PTR [rbx+0x28]
  424b5c:	mov    BYTE PTR [rdx],0x22
  424b5f:	xor    edi,edi
  424b61:	mov    rdx,rbp
  424b64:	cmp    BYTE PTR [rbx+0x32],0x0
  424b68:	sete   dil
  424b6c:	add    rdi,QWORD PTR [rbx+0x28]
  424b70:	lea    rax,[rdi+rbp*1]
  424b74:	mov    QWORD PTR [rbx+0x28],rdi
  424b78:	mov    rsi,r15
  424b7b:	cmp    QWORD PTR [rbx+0x20],rax
  424b7f:	jbe    424c40 <flatcc_json_printer_int64_enum_field@@Base+0x170>
  424b85:	call   406210 <memcpy@plt>
  424b8a:	add    rbp,QWORD PTR [rbx+0x28]
  424b8e:	mov    QWORD PTR [rbx+0x28],rbp
  424b92:	mov    BYTE PTR [rbp+0x0],0x22
  424b96:	xor    eax,eax
  424b98:	cmp    BYTE PTR [rbx+0x32],0x0
  424b9c:	sete   al
  424b9f:	add    rax,QWORD PTR [rbx+0x28]
  424ba3:	lea    rdx,[rax+0x1]
  424ba7:	mov    QWORD PTR [rbx+0x28],rdx
  424bab:	mov    BYTE PTR [rax],0x3a
  424bae:	xor    esi,esi
  424bb0:	mov    rax,QWORD PTR [rbx+0x28]
  424bb4:	mov    BYTE PTR [rax],0x20
  424bb7:	cmp    BYTE PTR [rbx+0x31],0x0
  424bbb:	setne  sil
  424bbf:	add    rsi,QWORD PTR [rbx+0x28]
  424bc3:	cmp    BYTE PTR [rbx+0x33],0x0
  424bc7:	mov    QWORD PTR [rbx+0x28],rsi
  424bcb:	je     424c20 <flatcc_json_printer_int64_enum_field@@Base+0x150>
  424bcd:	mov    rbp,r14
  424bd0:	shr    rbp,0x3f
  424bd4:	test   r14,r14
  424bd7:	jns    424be2 <flatcc_json_printer_int64_enum_field@@Base+0x112>
  424bd9:	mov    BYTE PTR [rsi],0x2d
  424bdc:	neg    r14
  424bdf:	inc    rsi
  424be2:	mov    rdi,r14
  424be5:	call   4209c0 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  424bea:	add    eax,ebp
  424bec:	cdqe   
  424bee:	add    QWORD PTR [rbx+0x28],rax
  424bf2:	add    rsp,0x8
  424bf6:	pop    rbx
  424bf7:	pop    rbp
  424bf8:	pop    r12
  424bfa:	pop    r13
  424bfc:	pop    r14
  424bfe:	pop    r15
  424c00:	ret    
  424c01:	nop    DWORD PTR [rax+0x0]
  424c08:	cmp    BYTE PTR [rdi+0x35],0x0
  424c0c:	je     424bf2 <flatcc_json_printer_int64_enum_field@@Base+0x122>
  424c0e:	mov    r14,r9
  424c11:	jmp    424b1a <flatcc_json_printer_int64_enum_field@@Base+0x4a>
  424c16:	nop    WORD PTR cs:[rax+rax*1+0x0]
  424c20:	add    rsp,0x8
  424c24:	mov    rdi,rbx
  424c27:	pop    rbx
  424c28:	pop    rbp
  424c29:	pop    r12
  424c2b:	mov    rax,r13
  424c2e:	pop    r13
  424c30:	mov    rsi,r14
  424c33:	pop    r14
  424c35:	pop    r15
  424c37:	jmp    rax
  424c39:	nop    DWORD PTR [rax+0x0]
  424c40:	mov    rdi,rbx
  424c43:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  424c48:	mov    rbp,QWORD PTR [rbx+0x28]
  424c4c:	jmp    424b92 <flatcc_json_printer_int64_enum_field@@Base+0xc2>
  424c51:	nop    DWORD PTR [rax+0x0]
  424c58:	lea    rax,[rdx+0x1]
  424c5c:	mov    QWORD PTR [rdi+0x28],rax
  424c60:	mov    BYTE PTR [rdx],0xa
  424c63:	movzx  edx,BYTE PTR [rdi+0x31]
  424c67:	imul   edx,DWORD PTR [rdi+0x38]
  424c6b:	mov    rdi,QWORD PTR [rdi+0x28]
  424c6f:	movsxd r12,edx
  424c72:	lea    rax,[rdi+r12*1]
  424c76:	cmp    QWORD PTR [rbx+0x20],rax
  424c7a:	jae    424c90 <flatcc_json_printer_int64_enum_field@@Base+0x1c0>
  424c7c:	mov    rsi,r12
  424c7f:	mov    rdi,rbx
  424c82:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  424c87:	mov    rdx,QWORD PTR [rbx+0x28]
  424c8b:	jmp    424b5c <flatcc_json_printer_int64_enum_field@@Base+0x8c>
  424c90:	mov    rdx,r12
  424c93:	mov    esi,0x20
  424c98:	call   4061c0 <memset@plt>
  424c9d:	mov    rdx,QWORD PTR [rbx+0x28]
  424ca1:	add    rdx,r12
  424ca4:	mov    QWORD PTR [rbx+0x28],rdx
  424ca8:	jmp    424b5c <flatcc_json_printer_int64_enum_field@@Base+0x8c>
  424cad:	nop    DWORD PTR [rax]
  424cb0:	cmp    BYTE PTR [rdi+0x34],0x0
  424cb4:	je     424b1a <flatcc_json_printer_int64_enum_field@@Base+0x4a>
  424cba:	jmp    424bf2 <flatcc_json_printer_int64_enum_field@@Base+0x122>
  424cbf:	nop

0000000000424cc0 <flatcc_json_printer_bool_enum_field@@Base>:
  424cc0:	endbr64 
  424cc4:	push   r15
  424cc6:	lea    eax,[rdx+rdx*1+0x4]
  424cca:	push   r14
  424ccc:	push   r13
  424cce:	push   r12
  424cd0:	push   rbp
  424cd1:	push   rbx
  424cd2:	sub    rsp,0x8
  424cd6:	mov    r13,QWORD PTR [rsp+0x40]
  424cdb:	cmp    eax,DWORD PTR [rsi+0x10]
  424cde:	jge    424de0 <flatcc_json_printer_bool_enum_field@@Base+0x120>
  424ce4:	mov    rdx,QWORD PTR [rsi+0x8]
  424ce8:	movzx  eax,WORD PTR [rdx+rax*1]
  424cec:	test   ax,ax
  424cef:	je     424de0 <flatcc_json_printer_bool_enum_field@@Base+0x120>
  424cf5:	add    rax,QWORD PTR [rsi]
  424cf8:	je     424de0 <flatcc_json_printer_bool_enum_field@@Base+0x120>
  424cfe:	movzx  r12d,BYTE PTR [rax]
  424d02:	cmp    r9b,r12b
  424d05:	je     424e80 <flatcc_json_printer_bool_enum_field@@Base+0x1c0>
  424d0b:	mov    eax,DWORD PTR [rsi+0x18]
  424d0e:	lea    edx,[rax+0x1]
  424d11:	mov    DWORD PTR [rsi+0x18],edx
  424d14:	mov    rdx,QWORD PTR [rdi+0x28]
  424d18:	test   eax,eax
  424d1a:	je     424d2b <flatcc_json_printer_bool_enum_field@@Base+0x6b>
  424d1c:	lea    rax,[rdx+0x1]
  424d20:	mov    QWORD PTR [rdi+0x28],rax
  424d24:	mov    BYTE PTR [rdx],0x2c
  424d27:	mov    rdx,QWORD PTR [rdi+0x28]
  424d2b:	cmp    BYTE PTR [rdi+0x31],0x0
  424d2f:	mov    r15,rcx
  424d32:	mov    rbx,rdi
  424d35:	movsxd rbp,r8d
  424d38:	jne    424e28 <flatcc_json_printer_bool_enum_field@@Base+0x168>
  424d3e:	cmp    QWORD PTR [rdi+0x20],rdx
  424d42:	ja     424d4d <flatcc_json_printer_bool_enum_field@@Base+0x8d>
  424d44:	xor    esi,esi
  424d46:	call   QWORD PTR [rdi+0x48]
  424d49:	mov    rdx,QWORD PTR [rbx+0x28]
  424d4d:	mov    BYTE PTR [rdx],0x22
  424d50:	xor    edi,edi
  424d52:	mov    rdx,rbp
  424d55:	cmp    BYTE PTR [rbx+0x32],0x0
  424d59:	sete   dil
  424d5d:	add    rdi,QWORD PTR [rbx+0x28]
  424d61:	lea    rax,[rdi+rbp*1]
  424d65:	mov    QWORD PTR [rbx+0x28],rdi
  424d69:	mov    rsi,r15
  424d6c:	cmp    QWORD PTR [rbx+0x20],rax
  424d70:	jbe    424e10 <flatcc_json_printer_bool_enum_field@@Base+0x150>
  424d76:	call   406210 <memcpy@plt>
  424d7b:	add    rbp,QWORD PTR [rbx+0x28]
  424d7f:	mov    QWORD PTR [rbx+0x28],rbp
  424d83:	mov    BYTE PTR [rbp+0x0],0x22
  424d87:	xor    eax,eax
  424d89:	cmp    BYTE PTR [rbx+0x32],0x0
  424d8d:	sete   al
  424d90:	add    rax,QWORD PTR [rbx+0x28]
  424d94:	lea    rdx,[rax+0x1]
  424d98:	mov    QWORD PTR [rbx+0x28],rdx
  424d9c:	mov    BYTE PTR [rax],0x3a
  424d9f:	xor    esi,esi
  424da1:	mov    rax,QWORD PTR [rbx+0x28]
  424da5:	mov    BYTE PTR [rax],0x20
  424da8:	cmp    BYTE PTR [rbx+0x31],0x0
  424dac:	setne  sil
  424db0:	add    rsi,QWORD PTR [rbx+0x28]
  424db4:	cmp    BYTE PTR [rbx+0x33],0x0
  424db8:	mov    QWORD PTR [rbx+0x28],rsi
  424dbc:	jne    424df0 <flatcc_json_printer_bool_enum_field@@Base+0x130>
  424dbe:	add    rsp,0x8
  424dc2:	mov    rdi,rbx
  424dc5:	pop    rbx
  424dc6:	pop    rbp
  424dc7:	movzx  esi,r12b
  424dcb:	pop    r12
  424dcd:	mov    rax,r13
  424dd0:	pop    r13
  424dd2:	pop    r14
  424dd4:	pop    r15
  424dd6:	jmp    rax
  424dd8:	nop    DWORD PTR [rax+rax*1+0x0]
  424de0:	cmp    BYTE PTR [rdi+0x35],0x0
  424de4:	je     424dff <flatcc_json_printer_bool_enum_field@@Base+0x13f>
  424de6:	mov    r12d,r9d
  424de9:	jmp    424d0b <flatcc_json_printer_bool_enum_field@@Base+0x4b>
  424dee:	xchg   ax,ax
  424df0:	movzx  edi,r12b
  424df4:	call   421320 <flatcc_json_parser_struct_as_root@@Base+0xd50>
  424df9:	cdqe   
  424dfb:	add    QWORD PTR [rbx+0x28],rax
  424dff:	add    rsp,0x8
  424e03:	pop    rbx
  424e04:	pop    rbp
  424e05:	pop    r12
  424e07:	pop    r13
  424e09:	pop    r14
  424e0b:	pop    r15
  424e0d:	ret    
  424e0e:	xchg   ax,ax
  424e10:	mov    rdi,rbx
  424e13:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  424e18:	mov    rbp,QWORD PTR [rbx+0x28]
  424e1c:	jmp    424d83 <flatcc_json_printer_bool_enum_field@@Base+0xc3>
  424e21:	nop    DWORD PTR [rax+0x0]
  424e28:	lea    rax,[rdx+0x1]
  424e2c:	mov    QWORD PTR [rdi+0x28],rax
  424e30:	mov    BYTE PTR [rdx],0xa
  424e33:	movzx  edx,BYTE PTR [rdi+0x31]
  424e37:	imul   edx,DWORD PTR [rdi+0x38]
  424e3b:	mov    rdi,QWORD PTR [rdi+0x28]
  424e3f:	movsxd r14,edx
  424e42:	lea    rax,[rdi+r14*1]
  424e46:	cmp    QWORD PTR [rbx+0x20],rax
  424e4a:	jae    424e60 <flatcc_json_printer_bool_enum_field@@Base+0x1a0>
  424e4c:	mov    rsi,r14
  424e4f:	mov    rdi,rbx
  424e52:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  424e57:	mov    rdx,QWORD PTR [rbx+0x28]
  424e5b:	jmp    424d4d <flatcc_json_printer_bool_enum_field@@Base+0x8d>
  424e60:	mov    rdx,r14
  424e63:	mov    esi,0x20
  424e68:	call   4061c0 <memset@plt>
  424e6d:	mov    rdx,QWORD PTR [rbx+0x28]
  424e71:	add    rdx,r14
  424e74:	mov    QWORD PTR [rbx+0x28],rdx
  424e78:	jmp    424d4d <flatcc_json_printer_bool_enum_field@@Base+0x8d>
  424e7d:	nop    DWORD PTR [rax]
  424e80:	cmp    BYTE PTR [rdi+0x34],0x0
  424e84:	je     424d0b <flatcc_json_printer_bool_enum_field@@Base+0x4b>
  424e8a:	jmp    424dff <flatcc_json_printer_bool_enum_field@@Base+0x13f>
  424e8f:	nop

0000000000424e90 <flatcc_json_printer_uint8_struct_field@@Base>:
  424e90:	endbr64 
  424e94:	push   r14
  424e96:	mov    r14,r8
  424e99:	push   r13
  424e9b:	push   r12
  424e9d:	push   rbp
  424e9e:	push   rbx
  424e9f:	mov    rbx,rdi
  424ea2:	movzx  r12d,BYTE PTR [rdx+rcx*1]
  424ea7:	mov    rax,QWORD PTR [rdi+0x28]
  424eab:	test   esi,esi
  424ead:	je     424ebe <flatcc_json_printer_uint8_struct_field@@Base+0x2e>
  424eaf:	lea    rdx,[rax+0x1]
  424eb3:	mov    QWORD PTR [rdi+0x28],rdx
  424eb7:	mov    BYTE PTR [rax],0x2c
  424eba:	mov    rax,QWORD PTR [rdi+0x28]
  424ebe:	cmp    BYTE PTR [rbx+0x31],0x0
  424ec2:	movsxd r13,r9d
  424ec5:	jne    424f70 <flatcc_json_printer_uint8_struct_field@@Base+0xe0>
  424ecb:	cmp    QWORD PTR [rbx+0x20],rax
  424ecf:	ja     424edd <flatcc_json_printer_uint8_struct_field@@Base+0x4d>
  424ed1:	xor    esi,esi
  424ed3:	mov    rdi,rbx
  424ed6:	call   QWORD PTR [rbx+0x48]
  424ed9:	mov    rax,QWORD PTR [rbx+0x28]
  424edd:	mov    BYTE PTR [rax],0x22
  424ee0:	xor    edi,edi
  424ee2:	mov    rdx,r13
  424ee5:	cmp    BYTE PTR [rbx+0x32],0x0
  424ee9:	sete   dil
  424eed:	add    rdi,QWORD PTR [rbx+0x28]
  424ef1:	lea    rax,[rdi+r13*1]
  424ef5:	mov    QWORD PTR [rbx+0x28],rdi
  424ef9:	mov    rsi,r14
  424efc:	cmp    QWORD PTR [rbx+0x20],rax
  424f00:	ja     424f60 <flatcc_json_printer_uint8_struct_field@@Base+0xd0>
  424f02:	mov    rdi,rbx
  424f05:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  424f0a:	mov    r13,QWORD PTR [rbx+0x28]
  424f0e:	mov    BYTE PTR [r13+0x0],0x22
  424f13:	xor    eax,eax
  424f15:	movzx  edi,r12b
  424f19:	cmp    BYTE PTR [rbx+0x32],0x0
  424f1d:	sete   al
  424f20:	add    rax,QWORD PTR [rbx+0x28]
  424f24:	lea    rdx,[rax+0x1]
  424f28:	mov    QWORD PTR [rbx+0x28],rdx
  424f2c:	mov    BYTE PTR [rax],0x3a
  424f2f:	xor    esi,esi
  424f31:	mov    rax,QWORD PTR [rbx+0x28]
  424f35:	mov    BYTE PTR [rax],0x20
  424f38:	cmp    BYTE PTR [rbx+0x31],0x0
  424f3c:	setne  sil
  424f40:	add    rsi,QWORD PTR [rbx+0x28]
  424f44:	mov    QWORD PTR [rbx+0x28],rsi
  424f48:	call   421350 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  424f4d:	cdqe   
  424f4f:	add    QWORD PTR [rbx+0x28],rax
  424f53:	pop    rbx
  424f54:	pop    rbp
  424f55:	pop    r12
  424f57:	pop    r13
  424f59:	pop    r14
  424f5b:	ret    
  424f5c:	nop    DWORD PTR [rax+0x0]
  424f60:	call   406210 <memcpy@plt>
  424f65:	add    r13,QWORD PTR [rbx+0x28]
  424f69:	mov    QWORD PTR [rbx+0x28],r13
  424f6d:	jmp    424f0e <flatcc_json_printer_uint8_struct_field@@Base+0x7e>
  424f6f:	nop
  424f70:	lea    rdx,[rax+0x1]
  424f74:	mov    QWORD PTR [rbx+0x28],rdx
  424f78:	mov    BYTE PTR [rax],0xa
  424f7b:	movzx  eax,BYTE PTR [rbx+0x31]
  424f7f:	mov    rdi,QWORD PTR [rbx+0x28]
  424f83:	imul   eax,DWORD PTR [rbx+0x38]
  424f87:	movsxd rbp,eax
  424f8a:	lea    rax,[rdi+rbp*1]
  424f8e:	cmp    QWORD PTR [rbx+0x20],rax
  424f92:	jae    424fb0 <flatcc_json_printer_uint8_struct_field@@Base+0x120>
  424f94:	mov    rsi,rbp
  424f97:	mov    rdi,rbx
  424f9a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  424f9f:	mov    rax,QWORD PTR [rbx+0x28]
  424fa3:	jmp    424edd <flatcc_json_printer_uint8_struct_field@@Base+0x4d>
  424fa8:	nop    DWORD PTR [rax+rax*1+0x0]
  424fb0:	mov    rdx,rbp
  424fb3:	mov    esi,0x20
  424fb8:	call   4061c0 <memset@plt>
  424fbd:	mov    rax,QWORD PTR [rbx+0x28]
  424fc1:	add    rax,rbp
  424fc4:	mov    QWORD PTR [rbx+0x28],rax
  424fc8:	jmp    424edd <flatcc_json_printer_uint8_struct_field@@Base+0x4d>
  424fcd:	nop    DWORD PTR [rax]

0000000000424fd0 <flatcc_json_printer_uint16_struct_field@@Base>:
  424fd0:	endbr64 
  424fd4:	push   r14
  424fd6:	mov    r14,r8
  424fd9:	push   r13
  424fdb:	push   r12
  424fdd:	push   rbp
  424fde:	push   rbx
  424fdf:	mov    rbx,rdi
  424fe2:	movzx  r12d,WORD PTR [rdx+rcx*1]
  424fe7:	mov    rax,QWORD PTR [rdi+0x28]
  424feb:	test   esi,esi
  424fed:	je     424ffe <flatcc_json_printer_uint16_struct_field@@Base+0x2e>
  424fef:	lea    rdx,[rax+0x1]
  424ff3:	mov    QWORD PTR [rdi+0x28],rdx
  424ff7:	mov    BYTE PTR [rax],0x2c
  424ffa:	mov    rax,QWORD PTR [rdi+0x28]
  424ffe:	cmp    BYTE PTR [rbx+0x31],0x0
  425002:	movsxd r13,r9d
  425005:	jne    4250b0 <flatcc_json_printer_uint16_struct_field@@Base+0xe0>
  42500b:	cmp    QWORD PTR [rbx+0x20],rax
  42500f:	ja     42501d <flatcc_json_printer_uint16_struct_field@@Base+0x4d>
  425011:	xor    esi,esi
  425013:	mov    rdi,rbx
  425016:	call   QWORD PTR [rbx+0x48]
  425019:	mov    rax,QWORD PTR [rbx+0x28]
  42501d:	mov    BYTE PTR [rax],0x22
  425020:	xor    edi,edi
  425022:	mov    rdx,r13
  425025:	cmp    BYTE PTR [rbx+0x32],0x0
  425029:	sete   dil
  42502d:	add    rdi,QWORD PTR [rbx+0x28]
  425031:	lea    rax,[rdi+r13*1]
  425035:	mov    QWORD PTR [rbx+0x28],rdi
  425039:	mov    rsi,r14
  42503c:	cmp    QWORD PTR [rbx+0x20],rax
  425040:	ja     4250a0 <flatcc_json_printer_uint16_struct_field@@Base+0xd0>
  425042:	mov    rdi,rbx
  425045:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42504a:	mov    r13,QWORD PTR [rbx+0x28]
  42504e:	mov    BYTE PTR [r13+0x0],0x22
  425053:	xor    eax,eax
  425055:	movzx  edi,r12w
  425059:	cmp    BYTE PTR [rbx+0x32],0x0
  42505d:	sete   al
  425060:	add    rax,QWORD PTR [rbx+0x28]
  425064:	lea    rdx,[rax+0x1]
  425068:	mov    QWORD PTR [rbx+0x28],rdx
  42506c:	mov    BYTE PTR [rax],0x3a
  42506f:	xor    esi,esi
  425071:	mov    rax,QWORD PTR [rbx+0x28]
  425075:	mov    BYTE PTR [rax],0x20
  425078:	cmp    BYTE PTR [rbx+0x31],0x0
  42507c:	setne  sil
  425080:	add    rsi,QWORD PTR [rbx+0x28]
  425084:	mov    QWORD PTR [rbx+0x28],rsi
  425088:	call   4205e0 <flatcc_json_parser_struct_as_root@@Base+0x10>
  42508d:	cdqe   
  42508f:	add    QWORD PTR [rbx+0x28],rax
  425093:	pop    rbx
  425094:	pop    rbp
  425095:	pop    r12
  425097:	pop    r13
  425099:	pop    r14
  42509b:	ret    
  42509c:	nop    DWORD PTR [rax+0x0]
  4250a0:	call   406210 <memcpy@plt>
  4250a5:	add    r13,QWORD PTR [rbx+0x28]
  4250a9:	mov    QWORD PTR [rbx+0x28],r13
  4250ad:	jmp    42504e <flatcc_json_printer_uint16_struct_field@@Base+0x7e>
  4250af:	nop
  4250b0:	lea    rdx,[rax+0x1]
  4250b4:	mov    QWORD PTR [rbx+0x28],rdx
  4250b8:	mov    BYTE PTR [rax],0xa
  4250bb:	movzx  eax,BYTE PTR [rbx+0x31]
  4250bf:	mov    rdi,QWORD PTR [rbx+0x28]
  4250c3:	imul   eax,DWORD PTR [rbx+0x38]
  4250c7:	movsxd rbp,eax
  4250ca:	lea    rax,[rdi+rbp*1]
  4250ce:	cmp    QWORD PTR [rbx+0x20],rax
  4250d2:	jae    4250f0 <flatcc_json_printer_uint16_struct_field@@Base+0x120>
  4250d4:	mov    rsi,rbp
  4250d7:	mov    rdi,rbx
  4250da:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4250df:	mov    rax,QWORD PTR [rbx+0x28]
  4250e3:	jmp    42501d <flatcc_json_printer_uint16_struct_field@@Base+0x4d>
  4250e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4250f0:	mov    rdx,rbp
  4250f3:	mov    esi,0x20
  4250f8:	call   4061c0 <memset@plt>
  4250fd:	mov    rax,QWORD PTR [rbx+0x28]
  425101:	add    rax,rbp
  425104:	mov    QWORD PTR [rbx+0x28],rax
  425108:	jmp    42501d <flatcc_json_printer_uint16_struct_field@@Base+0x4d>
  42510d:	nop    DWORD PTR [rax]

0000000000425110 <flatcc_json_printer_uint32_struct_field@@Base>:
  425110:	endbr64 
  425114:	push   r14
  425116:	mov    r14,r8
  425119:	push   r13
  42511b:	push   r12
  42511d:	push   rbp
  42511e:	push   rbx
  42511f:	mov    rbx,rdi
  425122:	mov    r12d,DWORD PTR [rdx+rcx*1]
  425126:	mov    rax,QWORD PTR [rdi+0x28]
  42512a:	test   esi,esi
  42512c:	je     42513d <flatcc_json_printer_uint32_struct_field@@Base+0x2d>
  42512e:	lea    rdx,[rax+0x1]
  425132:	mov    QWORD PTR [rdi+0x28],rdx
  425136:	mov    BYTE PTR [rax],0x2c
  425139:	mov    rax,QWORD PTR [rdi+0x28]
  42513d:	cmp    BYTE PTR [rbx+0x31],0x0
  425141:	movsxd r13,r9d
  425144:	jne    4251f0 <flatcc_json_printer_uint32_struct_field@@Base+0xe0>
  42514a:	cmp    QWORD PTR [rbx+0x20],rax
  42514e:	ja     42515c <flatcc_json_printer_uint32_struct_field@@Base+0x4c>
  425150:	xor    esi,esi
  425152:	mov    rdi,rbx
  425155:	call   QWORD PTR [rbx+0x48]
  425158:	mov    rax,QWORD PTR [rbx+0x28]
  42515c:	mov    BYTE PTR [rax],0x22
  42515f:	xor    edi,edi
  425161:	mov    rdx,r13
  425164:	cmp    BYTE PTR [rbx+0x32],0x0
  425168:	sete   dil
  42516c:	add    rdi,QWORD PTR [rbx+0x28]
  425170:	lea    rax,[rdi+r13*1]
  425174:	mov    QWORD PTR [rbx+0x28],rdi
  425178:	mov    rsi,r14
  42517b:	cmp    QWORD PTR [rbx+0x20],rax
  42517f:	ja     4251e0 <flatcc_json_printer_uint32_struct_field@@Base+0xd0>
  425181:	mov    rdi,rbx
  425184:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  425189:	mov    r13,QWORD PTR [rbx+0x28]
  42518d:	mov    BYTE PTR [r13+0x0],0x22
  425192:	xor    eax,eax
  425194:	mov    edi,r12d
  425197:	cmp    BYTE PTR [rbx+0x32],0x0
  42519b:	sete   al
  42519e:	add    rax,QWORD PTR [rbx+0x28]
  4251a2:	lea    rdx,[rax+0x1]
  4251a6:	mov    QWORD PTR [rbx+0x28],rdx
  4251aa:	mov    BYTE PTR [rax],0x3a
  4251ad:	xor    esi,esi
  4251af:	mov    rax,QWORD PTR [rbx+0x28]
  4251b3:	mov    BYTE PTR [rax],0x20
  4251b6:	cmp    BYTE PTR [rbx+0x31],0x0
  4251ba:	setne  sil
  4251be:	add    rsi,QWORD PTR [rbx+0x28]
  4251c2:	mov    QWORD PTR [rbx+0x28],rsi
  4251c6:	call   420710 <flatcc_json_parser_struct_as_root@@Base+0x140>
  4251cb:	cdqe   
  4251cd:	add    QWORD PTR [rbx+0x28],rax
  4251d1:	pop    rbx
  4251d2:	pop    rbp
  4251d3:	pop    r12
  4251d5:	pop    r13
  4251d7:	pop    r14
  4251d9:	ret    
  4251da:	nop    WORD PTR [rax+rax*1+0x0]
  4251e0:	call   406210 <memcpy@plt>
  4251e5:	add    r13,QWORD PTR [rbx+0x28]
  4251e9:	mov    QWORD PTR [rbx+0x28],r13
  4251ed:	jmp    42518d <flatcc_json_printer_uint32_struct_field@@Base+0x7d>
  4251ef:	nop
  4251f0:	lea    rdx,[rax+0x1]
  4251f4:	mov    QWORD PTR [rbx+0x28],rdx
  4251f8:	mov    BYTE PTR [rax],0xa
  4251fb:	movzx  eax,BYTE PTR [rbx+0x31]
  4251ff:	mov    rdi,QWORD PTR [rbx+0x28]
  425203:	imul   eax,DWORD PTR [rbx+0x38]
  425207:	movsxd rbp,eax
  42520a:	lea    rax,[rdi+rbp*1]
  42520e:	cmp    QWORD PTR [rbx+0x20],rax
  425212:	jae    425230 <flatcc_json_printer_uint32_struct_field@@Base+0x120>
  425214:	mov    rsi,rbp
  425217:	mov    rdi,rbx
  42521a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42521f:	mov    rax,QWORD PTR [rbx+0x28]
  425223:	jmp    42515c <flatcc_json_printer_uint32_struct_field@@Base+0x4c>
  425228:	nop    DWORD PTR [rax+rax*1+0x0]
  425230:	mov    rdx,rbp
  425233:	mov    esi,0x20
  425238:	call   4061c0 <memset@plt>
  42523d:	mov    rax,QWORD PTR [rbx+0x28]
  425241:	add    rax,rbp
  425244:	mov    QWORD PTR [rbx+0x28],rax
  425248:	jmp    42515c <flatcc_json_printer_uint32_struct_field@@Base+0x4c>
  42524d:	nop    DWORD PTR [rax]

0000000000425250 <flatcc_json_printer_uint64_struct_field@@Base>:
  425250:	endbr64 
  425254:	push   r14
  425256:	mov    r14,r8
  425259:	push   r13
  42525b:	push   r12
  42525d:	push   rbp
  42525e:	push   rbx
  42525f:	mov    rbx,rdi
  425262:	mov    r12,QWORD PTR [rdx+rcx*1]
  425266:	mov    rax,QWORD PTR [rdi+0x28]
  42526a:	test   esi,esi
  42526c:	je     42527d <flatcc_json_printer_uint64_struct_field@@Base+0x2d>
  42526e:	lea    rdx,[rax+0x1]
  425272:	mov    QWORD PTR [rdi+0x28],rdx
  425276:	mov    BYTE PTR [rax],0x2c
  425279:	mov    rax,QWORD PTR [rdi+0x28]
  42527d:	cmp    BYTE PTR [rbx+0x31],0x0
  425281:	movsxd r13,r9d
  425284:	jne    425330 <flatcc_json_printer_uint64_struct_field@@Base+0xe0>
  42528a:	cmp    QWORD PTR [rbx+0x20],rax
  42528e:	ja     42529c <flatcc_json_printer_uint64_struct_field@@Base+0x4c>
  425290:	xor    esi,esi
  425292:	mov    rdi,rbx
  425295:	call   QWORD PTR [rbx+0x48]
  425298:	mov    rax,QWORD PTR [rbx+0x28]
  42529c:	mov    BYTE PTR [rax],0x22
  42529f:	xor    edi,edi
  4252a1:	mov    rdx,r13
  4252a4:	cmp    BYTE PTR [rbx+0x32],0x0
  4252a8:	sete   dil
  4252ac:	add    rdi,QWORD PTR [rbx+0x28]
  4252b0:	lea    rax,[rdi+r13*1]
  4252b4:	mov    QWORD PTR [rbx+0x28],rdi
  4252b8:	mov    rsi,r14
  4252bb:	cmp    QWORD PTR [rbx+0x20],rax
  4252bf:	ja     425320 <flatcc_json_printer_uint64_struct_field@@Base+0xd0>
  4252c1:	mov    rdi,rbx
  4252c4:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4252c9:	mov    r13,QWORD PTR [rbx+0x28]
  4252cd:	mov    BYTE PTR [r13+0x0],0x22
  4252d2:	xor    eax,eax
  4252d4:	mov    rdi,r12
  4252d7:	cmp    BYTE PTR [rbx+0x32],0x0
  4252db:	sete   al
  4252de:	add    rax,QWORD PTR [rbx+0x28]
  4252e2:	lea    rdx,[rax+0x1]
  4252e6:	mov    QWORD PTR [rbx+0x28],rdx
  4252ea:	mov    BYTE PTR [rax],0x3a
  4252ed:	xor    esi,esi
  4252ef:	mov    rax,QWORD PTR [rbx+0x28]
  4252f3:	mov    BYTE PTR [rax],0x20
  4252f6:	cmp    BYTE PTR [rbx+0x31],0x0
  4252fa:	setne  sil
  4252fe:	add    rsi,QWORD PTR [rbx+0x28]
  425302:	mov    QWORD PTR [rbx+0x28],rsi
  425306:	call   4209c0 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  42530b:	cdqe   
  42530d:	add    QWORD PTR [rbx+0x28],rax
  425311:	pop    rbx
  425312:	pop    rbp
  425313:	pop    r12
  425315:	pop    r13
  425317:	pop    r14
  425319:	ret    
  42531a:	nop    WORD PTR [rax+rax*1+0x0]
  425320:	call   406210 <memcpy@plt>
  425325:	add    r13,QWORD PTR [rbx+0x28]
  425329:	mov    QWORD PTR [rbx+0x28],r13
  42532d:	jmp    4252cd <flatcc_json_printer_uint64_struct_field@@Base+0x7d>
  42532f:	nop
  425330:	lea    rdx,[rax+0x1]
  425334:	mov    QWORD PTR [rbx+0x28],rdx
  425338:	mov    BYTE PTR [rax],0xa
  42533b:	movzx  eax,BYTE PTR [rbx+0x31]
  42533f:	mov    rdi,QWORD PTR [rbx+0x28]
  425343:	imul   eax,DWORD PTR [rbx+0x38]
  425347:	movsxd rbp,eax
  42534a:	lea    rax,[rdi+rbp*1]
  42534e:	cmp    QWORD PTR [rbx+0x20],rax
  425352:	jae    425370 <flatcc_json_printer_uint64_struct_field@@Base+0x120>
  425354:	mov    rsi,rbp
  425357:	mov    rdi,rbx
  42535a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42535f:	mov    rax,QWORD PTR [rbx+0x28]
  425363:	jmp    42529c <flatcc_json_printer_uint64_struct_field@@Base+0x4c>
  425368:	nop    DWORD PTR [rax+rax*1+0x0]
  425370:	mov    rdx,rbp
  425373:	mov    esi,0x20
  425378:	call   4061c0 <memset@plt>
  42537d:	mov    rax,QWORD PTR [rbx+0x28]
  425381:	add    rax,rbp
  425384:	mov    QWORD PTR [rbx+0x28],rax
  425388:	jmp    42529c <flatcc_json_printer_uint64_struct_field@@Base+0x4c>
  42538d:	nop    DWORD PTR [rax]

0000000000425390 <flatcc_json_printer_int8_struct_field@@Base>:
  425390:	endbr64 
  425394:	push   r14
  425396:	mov    r14,r8
  425399:	push   r13
  42539b:	push   r12
  42539d:	push   rbp
  42539e:	push   rbx
  42539f:	mov    rbx,rdi
  4253a2:	movzx  r12d,BYTE PTR [rdx+rcx*1]
  4253a7:	mov    rax,QWORD PTR [rdi+0x28]
  4253ab:	test   esi,esi
  4253ad:	je     4253be <flatcc_json_printer_int8_struct_field@@Base+0x2e>
  4253af:	lea    rdx,[rax+0x1]
  4253b3:	mov    QWORD PTR [rdi+0x28],rdx
  4253b7:	mov    BYTE PTR [rax],0x2c
  4253ba:	mov    rax,QWORD PTR [rdi+0x28]
  4253be:	cmp    BYTE PTR [rbx+0x31],0x0
  4253c2:	movsxd r13,r9d
  4253c5:	jne    425498 <flatcc_json_printer_int8_struct_field@@Base+0x108>
  4253cb:	cmp    QWORD PTR [rbx+0x20],rax
  4253cf:	ja     4253dd <flatcc_json_printer_int8_struct_field@@Base+0x4d>
  4253d1:	xor    esi,esi
  4253d3:	mov    rdi,rbx
  4253d6:	call   QWORD PTR [rbx+0x48]
  4253d9:	mov    rax,QWORD PTR [rbx+0x28]
  4253dd:	mov    BYTE PTR [rax],0x22
  4253e0:	xor    edi,edi
  4253e2:	mov    rdx,r13
  4253e5:	cmp    BYTE PTR [rbx+0x32],0x0
  4253e9:	sete   dil
  4253ed:	add    rdi,QWORD PTR [rbx+0x28]
  4253f1:	lea    rax,[rdi+r13*1]
  4253f5:	mov    QWORD PTR [rbx+0x28],rdi
  4253f9:	mov    rsi,r14
  4253fc:	cmp    QWORD PTR [rbx+0x20],rax
  425400:	ja     425480 <flatcc_json_printer_int8_struct_field@@Base+0xf0>
  425402:	mov    rdi,rbx
  425405:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42540a:	mov    r13,QWORD PTR [rbx+0x28]
  42540e:	mov    BYTE PTR [r13+0x0],0x22
  425413:	xor    eax,eax
  425415:	movsx  r8d,r12b
  425419:	cmp    BYTE PTR [rbx+0x32],0x0
  42541d:	sete   al
  425420:	add    rax,QWORD PTR [rbx+0x28]
  425424:	lea    rdx,[rax+0x1]
  425428:	mov    QWORD PTR [rbx+0x28],rdx
  42542c:	mov    BYTE PTR [rax],0x3a
  42542f:	xor    esi,esi
  425431:	mov    rax,QWORD PTR [rbx+0x28]
  425435:	mov    BYTE PTR [rax],0x20
  425438:	cmp    BYTE PTR [rbx+0x31],0x0
  42543c:	setne  sil
  425440:	add    rsi,QWORD PTR [rbx+0x28]
  425444:	mov    QWORD PTR [rbx+0x28],rsi
  425448:	shr    r8d,0x1f
  42544c:	test   r12b,r12b
  42544f:	jns    42545a <flatcc_json_printer_int8_struct_field@@Base+0xca>
  425451:	mov    BYTE PTR [rsi],0x2d
  425454:	neg    r12d
  425457:	inc    rsi
  42545a:	movzx  edi,r12b
  42545e:	call   421350 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  425463:	add    r8d,eax
  425466:	movsxd r8,r8d
  425469:	add    QWORD PTR [rbx+0x28],r8
  42546d:	pop    rbx
  42546e:	pop    rbp
  42546f:	pop    r12
  425471:	pop    r13
  425473:	pop    r14
  425475:	ret    
  425476:	nop    WORD PTR cs:[rax+rax*1+0x0]
  425480:	call   406210 <memcpy@plt>
  425485:	add    r13,QWORD PTR [rbx+0x28]
  425489:	mov    QWORD PTR [rbx+0x28],r13
  42548d:	jmp    42540e <flatcc_json_printer_int8_struct_field@@Base+0x7e>
  425492:	nop    WORD PTR [rax+rax*1+0x0]
  425498:	lea    rdx,[rax+0x1]
  42549c:	mov    QWORD PTR [rbx+0x28],rdx
  4254a0:	mov    BYTE PTR [rax],0xa
  4254a3:	movzx  eax,BYTE PTR [rbx+0x31]
  4254a7:	mov    rdi,QWORD PTR [rbx+0x28]
  4254ab:	imul   eax,DWORD PTR [rbx+0x38]
  4254af:	movsxd rbp,eax
  4254b2:	lea    rax,[rdi+rbp*1]
  4254b6:	cmp    QWORD PTR [rbx+0x20],rax
  4254ba:	jae    4254d0 <flatcc_json_printer_int8_struct_field@@Base+0x140>
  4254bc:	mov    rsi,rbp
  4254bf:	mov    rdi,rbx
  4254c2:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4254c7:	mov    rax,QWORD PTR [rbx+0x28]
  4254cb:	jmp    4253dd <flatcc_json_printer_int8_struct_field@@Base+0x4d>
  4254d0:	mov    rdx,rbp
  4254d3:	mov    esi,0x20
  4254d8:	call   4061c0 <memset@plt>
  4254dd:	mov    rax,QWORD PTR [rbx+0x28]
  4254e1:	add    rax,rbp
  4254e4:	mov    QWORD PTR [rbx+0x28],rax
  4254e8:	jmp    4253dd <flatcc_json_printer_int8_struct_field@@Base+0x4d>
  4254ed:	nop    DWORD PTR [rax]

00000000004254f0 <flatcc_json_printer_int16_struct_field@@Base>:
  4254f0:	endbr64 
  4254f4:	push   r14
  4254f6:	mov    r14,r8
  4254f9:	push   r13
  4254fb:	push   r12
  4254fd:	push   rbp
  4254fe:	push   rbx
  4254ff:	mov    rbx,rdi
  425502:	movzx  r12d,WORD PTR [rdx+rcx*1]
  425507:	mov    rax,QWORD PTR [rdi+0x28]
  42550b:	test   esi,esi
  42550d:	je     42551e <flatcc_json_printer_int16_struct_field@@Base+0x2e>
  42550f:	lea    rdx,[rax+0x1]
  425513:	mov    QWORD PTR [rdi+0x28],rdx
  425517:	mov    BYTE PTR [rax],0x2c
  42551a:	mov    rax,QWORD PTR [rdi+0x28]
  42551e:	cmp    BYTE PTR [rbx+0x31],0x0
  425522:	movsxd r13,r9d
  425525:	jne    4255f8 <flatcc_json_printer_int16_struct_field@@Base+0x108>
  42552b:	cmp    QWORD PTR [rbx+0x20],rax
  42552f:	ja     42553d <flatcc_json_printer_int16_struct_field@@Base+0x4d>
  425531:	xor    esi,esi
  425533:	mov    rdi,rbx
  425536:	call   QWORD PTR [rbx+0x48]
  425539:	mov    rax,QWORD PTR [rbx+0x28]
  42553d:	mov    BYTE PTR [rax],0x22
  425540:	xor    edi,edi
  425542:	mov    rdx,r13
  425545:	cmp    BYTE PTR [rbx+0x32],0x0
  425549:	sete   dil
  42554d:	add    rdi,QWORD PTR [rbx+0x28]
  425551:	lea    rax,[rdi+r13*1]
  425555:	mov    QWORD PTR [rbx+0x28],rdi
  425559:	mov    rsi,r14
  42555c:	cmp    QWORD PTR [rbx+0x20],rax
  425560:	ja     4255e0 <flatcc_json_printer_int16_struct_field@@Base+0xf0>
  425562:	mov    rdi,rbx
  425565:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42556a:	mov    r13,QWORD PTR [rbx+0x28]
  42556e:	mov    BYTE PTR [r13+0x0],0x22
  425573:	xor    eax,eax
  425575:	movsx  r11d,r12w
  425579:	cmp    BYTE PTR [rbx+0x32],0x0
  42557d:	sete   al
  425580:	add    rax,QWORD PTR [rbx+0x28]
  425584:	lea    rdx,[rax+0x1]
  425588:	mov    QWORD PTR [rbx+0x28],rdx
  42558c:	mov    BYTE PTR [rax],0x3a
  42558f:	xor    esi,esi
  425591:	mov    rax,QWORD PTR [rbx+0x28]
  425595:	mov    BYTE PTR [rax],0x20
  425598:	cmp    BYTE PTR [rbx+0x31],0x0
  42559c:	setne  sil
  4255a0:	add    rsi,QWORD PTR [rbx+0x28]
  4255a4:	mov    QWORD PTR [rbx+0x28],rsi
  4255a8:	shr    r11d,0x1f
  4255ac:	test   r12w,r12w
  4255b0:	jns    4255bb <flatcc_json_printer_int16_struct_field@@Base+0xcb>
  4255b2:	mov    BYTE PTR [rsi],0x2d
  4255b5:	neg    r12d
  4255b8:	inc    rsi
  4255bb:	movzx  edi,r12w
  4255bf:	call   4205e0 <flatcc_json_parser_struct_as_root@@Base+0x10>
  4255c4:	add    r11d,eax
  4255c7:	movsxd r11,r11d
  4255ca:	add    QWORD PTR [rbx+0x28],r11
  4255ce:	pop    rbx
  4255cf:	pop    rbp
  4255d0:	pop    r12
  4255d2:	pop    r13
  4255d4:	pop    r14
  4255d6:	ret    
  4255d7:	nop    WORD PTR [rax+rax*1+0x0]
  4255e0:	call   406210 <memcpy@plt>
  4255e5:	add    r13,QWORD PTR [rbx+0x28]
  4255e9:	mov    QWORD PTR [rbx+0x28],r13
  4255ed:	jmp    42556e <flatcc_json_printer_int16_struct_field@@Base+0x7e>
  4255f2:	nop    WORD PTR [rax+rax*1+0x0]
  4255f8:	lea    rdx,[rax+0x1]
  4255fc:	mov    QWORD PTR [rbx+0x28],rdx
  425600:	mov    BYTE PTR [rax],0xa
  425603:	movzx  eax,BYTE PTR [rbx+0x31]
  425607:	mov    rdi,QWORD PTR [rbx+0x28]
  42560b:	imul   eax,DWORD PTR [rbx+0x38]
  42560f:	movsxd rbp,eax
  425612:	lea    rax,[rdi+rbp*1]
  425616:	cmp    QWORD PTR [rbx+0x20],rax
  42561a:	jae    425630 <flatcc_json_printer_int16_struct_field@@Base+0x140>
  42561c:	mov    rsi,rbp
  42561f:	mov    rdi,rbx
  425622:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  425627:	mov    rax,QWORD PTR [rbx+0x28]
  42562b:	jmp    42553d <flatcc_json_printer_int16_struct_field@@Base+0x4d>
  425630:	mov    rdx,rbp
  425633:	mov    esi,0x20
  425638:	call   4061c0 <memset@plt>
  42563d:	mov    rax,QWORD PTR [rbx+0x28]
  425641:	add    rax,rbp
  425644:	mov    QWORD PTR [rbx+0x28],rax
  425648:	jmp    42553d <flatcc_json_printer_int16_struct_field@@Base+0x4d>
  42564d:	nop    DWORD PTR [rax]

0000000000425650 <flatcc_json_printer_int32_struct_field@@Base>:
  425650:	endbr64 
  425654:	push   r14
  425656:	mov    r14,r8
  425659:	push   r13
  42565b:	push   r12
  42565d:	push   rbp
  42565e:	push   rbx
  42565f:	mov    rbx,rdi
  425662:	mov    r13d,DWORD PTR [rdx+rcx*1]
  425666:	mov    rax,QWORD PTR [rdi+0x28]
  42566a:	test   esi,esi
  42566c:	je     42567d <flatcc_json_printer_int32_struct_field@@Base+0x2d>
  42566e:	lea    rdx,[rax+0x1]
  425672:	mov    QWORD PTR [rdi+0x28],rdx
  425676:	mov    BYTE PTR [rax],0x2c
  425679:	mov    rax,QWORD PTR [rdi+0x28]
  42567d:	cmp    BYTE PTR [rbx+0x31],0x0
  425681:	movsxd r12,r9d
  425684:	jne    425750 <flatcc_json_printer_int32_struct_field@@Base+0x100>
  42568a:	cmp    QWORD PTR [rbx+0x20],rax
  42568e:	ja     42569c <flatcc_json_printer_int32_struct_field@@Base+0x4c>
  425690:	xor    esi,esi
  425692:	mov    rdi,rbx
  425695:	call   QWORD PTR [rbx+0x48]
  425698:	mov    rax,QWORD PTR [rbx+0x28]
  42569c:	mov    BYTE PTR [rax],0x22
  42569f:	xor    edi,edi
  4256a1:	mov    rdx,r12
  4256a4:	cmp    BYTE PTR [rbx+0x32],0x0
  4256a8:	sete   dil
  4256ac:	add    rdi,QWORD PTR [rbx+0x28]
  4256b0:	lea    rax,[rdi+r12*1]
  4256b4:	mov    QWORD PTR [rbx+0x28],rdi
  4256b8:	mov    rsi,r14
  4256bb:	cmp    QWORD PTR [rbx+0x20],rax
  4256bf:	ja     425738 <flatcc_json_printer_int32_struct_field@@Base+0xe8>
  4256c1:	mov    rdi,rbx
  4256c4:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4256c9:	mov    r12,QWORD PTR [rbx+0x28]
  4256cd:	mov    BYTE PTR [r12],0x22
  4256d2:	xor    eax,eax
  4256d4:	mov    ebp,r13d
  4256d7:	cmp    BYTE PTR [rbx+0x32],0x0
  4256db:	sete   al
  4256de:	add    rax,QWORD PTR [rbx+0x28]
  4256e2:	lea    rdx,[rax+0x1]
  4256e6:	mov    QWORD PTR [rbx+0x28],rdx
  4256ea:	mov    BYTE PTR [rax],0x3a
  4256ed:	xor    esi,esi
  4256ef:	mov    rax,QWORD PTR [rbx+0x28]
  4256f3:	mov    BYTE PTR [rax],0x20
  4256f6:	cmp    BYTE PTR [rbx+0x31],0x0
  4256fa:	setne  sil
  4256fe:	add    rsi,QWORD PTR [rbx+0x28]
  425702:	mov    QWORD PTR [rbx+0x28],rsi
  425706:	shr    ebp,0x1f
  425709:	test   r13d,r13d
  42570c:	jns    425717 <flatcc_json_printer_int32_struct_field@@Base+0xc7>
  42570e:	mov    BYTE PTR [rsi],0x2d
  425711:	neg    r13d
  425714:	inc    rsi
  425717:	mov    edi,r13d
  42571a:	call   420710 <flatcc_json_parser_struct_as_root@@Base+0x140>
  42571f:	add    ebp,eax
  425721:	movsxd rbp,ebp
  425724:	add    QWORD PTR [rbx+0x28],rbp
  425728:	pop    rbx
  425729:	pop    rbp
  42572a:	pop    r12
  42572c:	pop    r13
  42572e:	pop    r14
  425730:	ret    
  425731:	nop    DWORD PTR [rax+0x0]
  425738:	call   406210 <memcpy@plt>
  42573d:	add    r12,QWORD PTR [rbx+0x28]
  425741:	mov    QWORD PTR [rbx+0x28],r12
  425745:	jmp    4256cd <flatcc_json_printer_int32_struct_field@@Base+0x7d>
  425747:	nop    WORD PTR [rax+rax*1+0x0]
  425750:	lea    rdx,[rax+0x1]
  425754:	mov    QWORD PTR [rbx+0x28],rdx
  425758:	mov    BYTE PTR [rax],0xa
  42575b:	movzx  eax,BYTE PTR [rbx+0x31]
  42575f:	mov    rdi,QWORD PTR [rbx+0x28]
  425763:	imul   eax,DWORD PTR [rbx+0x38]
  425767:	movsxd rbp,eax
  42576a:	lea    rax,[rdi+rbp*1]
  42576e:	cmp    QWORD PTR [rbx+0x20],rax
  425772:	jae    425790 <flatcc_json_printer_int32_struct_field@@Base+0x140>
  425774:	mov    rsi,rbp
  425777:	mov    rdi,rbx
  42577a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42577f:	mov    rax,QWORD PTR [rbx+0x28]
  425783:	jmp    42569c <flatcc_json_printer_int32_struct_field@@Base+0x4c>
  425788:	nop    DWORD PTR [rax+rax*1+0x0]
  425790:	mov    rdx,rbp
  425793:	mov    esi,0x20
  425798:	call   4061c0 <memset@plt>
  42579d:	mov    rax,QWORD PTR [rbx+0x28]
  4257a1:	add    rax,rbp
  4257a4:	mov    QWORD PTR [rbx+0x28],rax
  4257a8:	jmp    42569c <flatcc_json_printer_int32_struct_field@@Base+0x4c>
  4257ad:	nop    DWORD PTR [rax]

00000000004257b0 <flatcc_json_printer_int64_struct_field@@Base>:
  4257b0:	endbr64 
  4257b4:	push   r14
  4257b6:	mov    r14,r8
  4257b9:	push   r13
  4257bb:	push   r12
  4257bd:	push   rbp
  4257be:	push   rbx
  4257bf:	mov    rbx,rdi
  4257c2:	mov    r13,QWORD PTR [rdx+rcx*1]
  4257c6:	mov    rax,QWORD PTR [rdi+0x28]
  4257ca:	test   esi,esi
  4257cc:	je     4257dd <flatcc_json_printer_int64_struct_field@@Base+0x2d>
  4257ce:	lea    rdx,[rax+0x1]
  4257d2:	mov    QWORD PTR [rdi+0x28],rdx
  4257d6:	mov    BYTE PTR [rax],0x2c
  4257d9:	mov    rax,QWORD PTR [rdi+0x28]
  4257dd:	cmp    BYTE PTR [rbx+0x31],0x0
  4257e1:	movsxd r12,r9d
  4257e4:	jne    4258b0 <flatcc_json_printer_int64_struct_field@@Base+0x100>
  4257ea:	cmp    QWORD PTR [rbx+0x20],rax
  4257ee:	ja     4257fc <flatcc_json_printer_int64_struct_field@@Base+0x4c>
  4257f0:	xor    esi,esi
  4257f2:	mov    rdi,rbx
  4257f5:	call   QWORD PTR [rbx+0x48]
  4257f8:	mov    rax,QWORD PTR [rbx+0x28]
  4257fc:	mov    BYTE PTR [rax],0x22
  4257ff:	xor    edi,edi
  425801:	mov    rdx,r12
  425804:	cmp    BYTE PTR [rbx+0x32],0x0
  425808:	sete   dil
  42580c:	add    rdi,QWORD PTR [rbx+0x28]
  425810:	lea    rax,[rdi+r12*1]
  425814:	mov    QWORD PTR [rbx+0x28],rdi
  425818:	mov    rsi,r14
  42581b:	cmp    QWORD PTR [rbx+0x20],rax
  42581f:	ja     425898 <flatcc_json_printer_int64_struct_field@@Base+0xe8>
  425821:	mov    rdi,rbx
  425824:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  425829:	mov    r12,QWORD PTR [rbx+0x28]
  42582d:	mov    BYTE PTR [r12],0x22
  425832:	xor    eax,eax
  425834:	mov    rbp,r13
  425837:	cmp    BYTE PTR [rbx+0x32],0x0
  42583b:	sete   al
  42583e:	add    rax,QWORD PTR [rbx+0x28]
  425842:	lea    rdx,[rax+0x1]
  425846:	mov    QWORD PTR [rbx+0x28],rdx
  42584a:	mov    BYTE PTR [rax],0x3a
  42584d:	xor    esi,esi
  42584f:	mov    rax,QWORD PTR [rbx+0x28]
  425853:	mov    BYTE PTR [rax],0x20
  425856:	cmp    BYTE PTR [rbx+0x31],0x0
  42585a:	setne  sil
  42585e:	add    rsi,QWORD PTR [rbx+0x28]
  425862:	mov    QWORD PTR [rbx+0x28],rsi
  425866:	shr    rbp,0x3f
  42586a:	test   r13,r13
  42586d:	jns    425878 <flatcc_json_printer_int64_struct_field@@Base+0xc8>
  42586f:	mov    BYTE PTR [rsi],0x2d
  425872:	neg    r13
  425875:	inc    rsi
  425878:	mov    rdi,r13
  42587b:	call   4209c0 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  425880:	add    eax,ebp
  425882:	cdqe   
  425884:	add    QWORD PTR [rbx+0x28],rax
  425888:	pop    rbx
  425889:	pop    rbp
  42588a:	pop    r12
  42588c:	pop    r13
  42588e:	pop    r14
  425890:	ret    
  425891:	nop    DWORD PTR [rax+0x0]
  425898:	call   406210 <memcpy@plt>
  42589d:	add    r12,QWORD PTR [rbx+0x28]
  4258a1:	mov    QWORD PTR [rbx+0x28],r12
  4258a5:	jmp    42582d <flatcc_json_printer_int64_struct_field@@Base+0x7d>
  4258a7:	nop    WORD PTR [rax+rax*1+0x0]
  4258b0:	lea    rdx,[rax+0x1]
  4258b4:	mov    QWORD PTR [rbx+0x28],rdx
  4258b8:	mov    BYTE PTR [rax],0xa
  4258bb:	movzx  eax,BYTE PTR [rbx+0x31]
  4258bf:	mov    rdi,QWORD PTR [rbx+0x28]
  4258c3:	imul   eax,DWORD PTR [rbx+0x38]
  4258c7:	movsxd rbp,eax
  4258ca:	lea    rax,[rdi+rbp*1]
  4258ce:	cmp    QWORD PTR [rbx+0x20],rax
  4258d2:	jae    4258f0 <flatcc_json_printer_int64_struct_field@@Base+0x140>
  4258d4:	mov    rsi,rbp
  4258d7:	mov    rdi,rbx
  4258da:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4258df:	mov    rax,QWORD PTR [rbx+0x28]
  4258e3:	jmp    4257fc <flatcc_json_printer_int64_struct_field@@Base+0x4c>
  4258e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4258f0:	mov    rdx,rbp
  4258f3:	mov    esi,0x20
  4258f8:	call   4061c0 <memset@plt>
  4258fd:	mov    rax,QWORD PTR [rbx+0x28]
  425901:	add    rax,rbp
  425904:	mov    QWORD PTR [rbx+0x28],rax
  425908:	jmp    4257fc <flatcc_json_printer_int64_struct_field@@Base+0x4c>
  42590d:	nop    DWORD PTR [rax]

0000000000425910 <flatcc_json_printer_bool_struct_field@@Base>:
  425910:	endbr64 
  425914:	push   r14
  425916:	mov    r14,r8
  425919:	push   r13
  42591b:	push   r12
  42591d:	push   rbp
  42591e:	push   rbx
  42591f:	mov    rbx,rdi
  425922:	movzx  r12d,BYTE PTR [rdx+rcx*1]
  425927:	mov    rax,QWORD PTR [rdi+0x28]
  42592b:	test   esi,esi
  42592d:	je     42593e <flatcc_json_printer_bool_struct_field@@Base+0x2e>
  42592f:	lea    rdx,[rax+0x1]
  425933:	mov    QWORD PTR [rdi+0x28],rdx
  425937:	mov    BYTE PTR [rax],0x2c
  42593a:	mov    rax,QWORD PTR [rdi+0x28]
  42593e:	cmp    BYTE PTR [rbx+0x31],0x0
  425942:	movsxd r13,r9d
  425945:	jne    4259f0 <flatcc_json_printer_bool_struct_field@@Base+0xe0>
  42594b:	cmp    QWORD PTR [rbx+0x20],rax
  42594f:	ja     42595d <flatcc_json_printer_bool_struct_field@@Base+0x4d>
  425951:	xor    esi,esi
  425953:	mov    rdi,rbx
  425956:	call   QWORD PTR [rbx+0x48]
  425959:	mov    rax,QWORD PTR [rbx+0x28]
  42595d:	mov    BYTE PTR [rax],0x22
  425960:	xor    edi,edi
  425962:	mov    rdx,r13
  425965:	cmp    BYTE PTR [rbx+0x32],0x0
  425969:	sete   dil
  42596d:	add    rdi,QWORD PTR [rbx+0x28]
  425971:	lea    rax,[rdi+r13*1]
  425975:	mov    QWORD PTR [rbx+0x28],rdi
  425979:	mov    rsi,r14
  42597c:	cmp    QWORD PTR [rbx+0x20],rax
  425980:	ja     4259e0 <flatcc_json_printer_bool_struct_field@@Base+0xd0>
  425982:	mov    rdi,rbx
  425985:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42598a:	mov    r13,QWORD PTR [rbx+0x28]
  42598e:	mov    BYTE PTR [r13+0x0],0x22
  425993:	xor    eax,eax
  425995:	movzx  edi,r12b
  425999:	cmp    BYTE PTR [rbx+0x32],0x0
  42599d:	sete   al
  4259a0:	add    rax,QWORD PTR [rbx+0x28]
  4259a4:	lea    rdx,[rax+0x1]
  4259a8:	mov    QWORD PTR [rbx+0x28],rdx
  4259ac:	mov    BYTE PTR [rax],0x3a
  4259af:	xor    esi,esi
  4259b1:	mov    rax,QWORD PTR [rbx+0x28]
  4259b5:	mov    BYTE PTR [rax],0x20
  4259b8:	cmp    BYTE PTR [rbx+0x31],0x0
  4259bc:	setne  sil
  4259c0:	add    rsi,QWORD PTR [rbx+0x28]
  4259c4:	mov    QWORD PTR [rbx+0x28],rsi
  4259c8:	call   421320 <flatcc_json_parser_struct_as_root@@Base+0xd50>
  4259cd:	cdqe   
  4259cf:	add    QWORD PTR [rbx+0x28],rax
  4259d3:	pop    rbx
  4259d4:	pop    rbp
  4259d5:	pop    r12
  4259d7:	pop    r13
  4259d9:	pop    r14
  4259db:	ret    
  4259dc:	nop    DWORD PTR [rax+0x0]
  4259e0:	call   406210 <memcpy@plt>
  4259e5:	add    r13,QWORD PTR [rbx+0x28]
  4259e9:	mov    QWORD PTR [rbx+0x28],r13
  4259ed:	jmp    42598e <flatcc_json_printer_bool_struct_field@@Base+0x7e>
  4259ef:	nop
  4259f0:	lea    rdx,[rax+0x1]
  4259f4:	mov    QWORD PTR [rbx+0x28],rdx
  4259f8:	mov    BYTE PTR [rax],0xa
  4259fb:	movzx  eax,BYTE PTR [rbx+0x31]
  4259ff:	mov    rdi,QWORD PTR [rbx+0x28]
  425a03:	imul   eax,DWORD PTR [rbx+0x38]
  425a07:	movsxd rbp,eax
  425a0a:	lea    rax,[rdi+rbp*1]
  425a0e:	cmp    QWORD PTR [rbx+0x20],rax
  425a12:	jae    425a30 <flatcc_json_printer_bool_struct_field@@Base+0x120>
  425a14:	mov    rsi,rbp
  425a17:	mov    rdi,rbx
  425a1a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  425a1f:	mov    rax,QWORD PTR [rbx+0x28]
  425a23:	jmp    42595d <flatcc_json_printer_bool_struct_field@@Base+0x4d>
  425a28:	nop    DWORD PTR [rax+rax*1+0x0]
  425a30:	mov    rdx,rbp
  425a33:	mov    esi,0x20
  425a38:	call   4061c0 <memset@plt>
  425a3d:	mov    rax,QWORD PTR [rbx+0x28]
  425a41:	add    rax,rbp
  425a44:	mov    QWORD PTR [rbx+0x28],rax
  425a48:	jmp    42595d <flatcc_json_printer_bool_struct_field@@Base+0x4d>
  425a4d:	nop    DWORD PTR [rax]

0000000000425a50 <flatcc_json_printer_float_struct_field@@Base>:
  425a50:	endbr64 
  425a54:	push   r13
  425a56:	mov    r13,r8
  425a59:	push   r12
  425a5b:	push   rbp
  425a5c:	push   rbx
  425a5d:	mov    rbx,rdi
  425a60:	sub    rsp,0x18
  425a64:	vmovss xmm1,DWORD PTR [rdx+rcx*1]
  425a69:	mov    rax,QWORD PTR [rdi+0x28]
  425a6d:	vmovss DWORD PTR [rsp+0xc],xmm1
  425a73:	test   esi,esi
  425a75:	je     425a86 <flatcc_json_printer_float_struct_field@@Base+0x36>
  425a77:	lea    rdx,[rax+0x1]
  425a7b:	mov    QWORD PTR [rdi+0x28],rdx
  425a7f:	mov    BYTE PTR [rax],0x2c
  425a82:	mov    rax,QWORD PTR [rdi+0x28]
  425a86:	cmp    BYTE PTR [rbx+0x31],0x0
  425a8a:	movsxd r12,r9d
  425a8d:	jne    425b40 <flatcc_json_printer_float_struct_field@@Base+0xf0>
  425a93:	cmp    QWORD PTR [rbx+0x20],rax
  425a97:	ja     425aa5 <flatcc_json_printer_float_struct_field@@Base+0x55>
  425a99:	xor    esi,esi
  425a9b:	mov    rdi,rbx
  425a9e:	call   QWORD PTR [rbx+0x48]
  425aa1:	mov    rax,QWORD PTR [rbx+0x28]
  425aa5:	mov    BYTE PTR [rax],0x22
  425aa8:	xor    edi,edi
  425aaa:	mov    rdx,r12
  425aad:	cmp    BYTE PTR [rbx+0x32],0x0
  425ab1:	sete   dil
  425ab5:	add    rdi,QWORD PTR [rbx+0x28]
  425ab9:	lea    rax,[rdi+r12*1]
  425abd:	mov    QWORD PTR [rbx+0x28],rdi
  425ac1:	mov    rsi,r13
  425ac4:	cmp    QWORD PTR [rbx+0x20],rax
  425ac8:	ja     425b30 <flatcc_json_printer_float_struct_field@@Base+0xe0>
  425aca:	mov    rdi,rbx
  425acd:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  425ad2:	mov    r12,QWORD PTR [rbx+0x28]
  425ad6:	mov    BYTE PTR [r12],0x22
  425adb:	xor    eax,eax
  425add:	vxorpd xmm0,xmm0,xmm0
  425ae1:	cmp    BYTE PTR [rbx+0x32],0x0
  425ae5:	sete   al
  425ae8:	add    rax,QWORD PTR [rbx+0x28]
  425aec:	lea    rdx,[rax+0x1]
  425af0:	mov    QWORD PTR [rbx+0x28],rdx
  425af4:	mov    BYTE PTR [rax],0x3a
  425af7:	xor    edi,edi
  425af9:	vcvtss2sd xmm0,xmm0,DWORD PTR [rsp+0xc]
  425aff:	mov    rax,QWORD PTR [rbx+0x28]
  425b03:	mov    BYTE PTR [rax],0x20
  425b06:	cmp    BYTE PTR [rbx+0x31],0x0
  425b0a:	setne  dil
  425b0e:	add    rdi,QWORD PTR [rbx+0x28]
  425b12:	mov    QWORD PTR [rbx+0x28],rdi
  425b16:	call   421540 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  425b1b:	cdqe   
  425b1d:	add    QWORD PTR [rbx+0x28],rax
  425b21:	add    rsp,0x18
  425b25:	pop    rbx
  425b26:	pop    rbp
  425b27:	pop    r12
  425b29:	pop    r13
  425b2b:	ret    
  425b2c:	nop    DWORD PTR [rax+0x0]
  425b30:	call   406210 <memcpy@plt>
  425b35:	add    r12,QWORD PTR [rbx+0x28]
  425b39:	mov    QWORD PTR [rbx+0x28],r12
  425b3d:	jmp    425ad6 <flatcc_json_printer_float_struct_field@@Base+0x86>
  425b3f:	nop
  425b40:	lea    rdx,[rax+0x1]
  425b44:	mov    QWORD PTR [rbx+0x28],rdx
  425b48:	mov    BYTE PTR [rax],0xa
  425b4b:	movzx  eax,BYTE PTR [rbx+0x31]
  425b4f:	mov    rdi,QWORD PTR [rbx+0x28]
  425b53:	imul   eax,DWORD PTR [rbx+0x38]
  425b57:	movsxd rbp,eax
  425b5a:	lea    rax,[rdi+rbp*1]
  425b5e:	cmp    QWORD PTR [rbx+0x20],rax
  425b62:	jae    425b80 <flatcc_json_printer_float_struct_field@@Base+0x130>
  425b64:	mov    rsi,rbp
  425b67:	mov    rdi,rbx
  425b6a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  425b6f:	mov    rax,QWORD PTR [rbx+0x28]
  425b73:	jmp    425aa5 <flatcc_json_printer_float_struct_field@@Base+0x55>
  425b78:	nop    DWORD PTR [rax+rax*1+0x0]
  425b80:	mov    rdx,rbp
  425b83:	mov    esi,0x20
  425b88:	call   4061c0 <memset@plt>
  425b8d:	mov    rax,QWORD PTR [rbx+0x28]
  425b91:	add    rax,rbp
  425b94:	mov    QWORD PTR [rbx+0x28],rax
  425b98:	jmp    425aa5 <flatcc_json_printer_float_struct_field@@Base+0x55>
  425b9d:	nop    DWORD PTR [rax]

0000000000425ba0 <flatcc_json_printer_double_struct_field@@Base>:
  425ba0:	endbr64 
  425ba4:	push   r13
  425ba6:	mov    r13,r8
  425ba9:	push   r12
  425bab:	push   rbp
  425bac:	push   rbx
  425bad:	mov    rbx,rdi
  425bb0:	sub    rsp,0x18
  425bb4:	vmovsd xmm1,QWORD PTR [rdx+rcx*1]
  425bb9:	mov    rax,QWORD PTR [rdi+0x28]
  425bbd:	vmovsd QWORD PTR [rsp+0x8],xmm1
  425bc3:	test   esi,esi
  425bc5:	je     425bd6 <flatcc_json_printer_double_struct_field@@Base+0x36>
  425bc7:	lea    rdx,[rax+0x1]
  425bcb:	mov    QWORD PTR [rdi+0x28],rdx
  425bcf:	mov    BYTE PTR [rax],0x2c
  425bd2:	mov    rax,QWORD PTR [rdi+0x28]
  425bd6:	cmp    BYTE PTR [rbx+0x31],0x0
  425bda:	movsxd r12,r9d
  425bdd:	jne    425c90 <flatcc_json_printer_double_struct_field@@Base+0xf0>
  425be3:	cmp    QWORD PTR [rbx+0x20],rax
  425be7:	ja     425bf5 <flatcc_json_printer_double_struct_field@@Base+0x55>
  425be9:	xor    esi,esi
  425beb:	mov    rdi,rbx
  425bee:	call   QWORD PTR [rbx+0x48]
  425bf1:	mov    rax,QWORD PTR [rbx+0x28]
  425bf5:	mov    BYTE PTR [rax],0x22
  425bf8:	xor    edi,edi
  425bfa:	mov    rdx,r12
  425bfd:	cmp    BYTE PTR [rbx+0x32],0x0
  425c01:	sete   dil
  425c05:	add    rdi,QWORD PTR [rbx+0x28]
  425c09:	lea    rax,[rdi+r12*1]
  425c0d:	mov    QWORD PTR [rbx+0x28],rdi
  425c11:	mov    rsi,r13
  425c14:	cmp    QWORD PTR [rbx+0x20],rax
  425c18:	ja     425c80 <flatcc_json_printer_double_struct_field@@Base+0xe0>
  425c1a:	mov    rdi,rbx
  425c1d:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  425c22:	mov    r12,QWORD PTR [rbx+0x28]
  425c26:	mov    BYTE PTR [r12],0x22
  425c2b:	xor    eax,eax
  425c2d:	vmovsd xmm0,QWORD PTR [rsp+0x8]
  425c33:	cmp    BYTE PTR [rbx+0x32],0x0
  425c37:	sete   al
  425c3a:	add    rax,QWORD PTR [rbx+0x28]
  425c3e:	lea    rdx,[rax+0x1]
  425c42:	mov    QWORD PTR [rbx+0x28],rdx
  425c46:	mov    BYTE PTR [rax],0x3a
  425c49:	xor    edi,edi
  425c4b:	mov    rax,QWORD PTR [rbx+0x28]
  425c4f:	mov    BYTE PTR [rax],0x20
  425c52:	cmp    BYTE PTR [rbx+0x31],0x0
  425c56:	setne  dil
  425c5a:	add    rdi,QWORD PTR [rbx+0x28]
  425c5e:	mov    QWORD PTR [rbx+0x28],rdi
  425c62:	call   421540 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  425c67:	cdqe   
  425c69:	add    QWORD PTR [rbx+0x28],rax
  425c6d:	add    rsp,0x18
  425c71:	pop    rbx
  425c72:	pop    rbp
  425c73:	pop    r12
  425c75:	pop    r13
  425c77:	ret    
  425c78:	nop    DWORD PTR [rax+rax*1+0x0]
  425c80:	call   406210 <memcpy@plt>
  425c85:	add    r12,QWORD PTR [rbx+0x28]
  425c89:	mov    QWORD PTR [rbx+0x28],r12
  425c8d:	jmp    425c26 <flatcc_json_printer_double_struct_field@@Base+0x86>
  425c8f:	nop
  425c90:	lea    rdx,[rax+0x1]
  425c94:	mov    QWORD PTR [rbx+0x28],rdx
  425c98:	mov    BYTE PTR [rax],0xa
  425c9b:	movzx  eax,BYTE PTR [rbx+0x31]
  425c9f:	mov    rdi,QWORD PTR [rbx+0x28]
  425ca3:	imul   eax,DWORD PTR [rbx+0x38]
  425ca7:	movsxd rbp,eax
  425caa:	lea    rax,[rdi+rbp*1]
  425cae:	cmp    QWORD PTR [rbx+0x20],rax
  425cb2:	jae    425cd0 <flatcc_json_printer_double_struct_field@@Base+0x130>
  425cb4:	mov    rsi,rbp
  425cb7:	mov    rdi,rbx
  425cba:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  425cbf:	mov    rax,QWORD PTR [rbx+0x28]
  425cc3:	jmp    425bf5 <flatcc_json_printer_double_struct_field@@Base+0x55>
  425cc8:	nop    DWORD PTR [rax+rax*1+0x0]
  425cd0:	mov    rdx,rbp
  425cd3:	mov    esi,0x20
  425cd8:	call   4061c0 <memset@plt>
  425cdd:	mov    rax,QWORD PTR [rbx+0x28]
  425ce1:	add    rax,rbp
  425ce4:	mov    QWORD PTR [rbx+0x28],rax
  425ce8:	jmp    425bf5 <flatcc_json_printer_double_struct_field@@Base+0x55>
  425ced:	nop    DWORD PTR [rax]

0000000000425cf0 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
  425cf0:	endbr64 
  425cf4:	push   r15
  425cf6:	mov    r15,r8
  425cf9:	push   r14
  425cfb:	push   r13
  425cfd:	push   r12
  425cff:	push   rbp
  425d00:	push   rbx
  425d01:	mov    rbx,rdi
  425d04:	sub    rsp,0x8
  425d08:	mov    r13,QWORD PTR [rsp+0x40]
  425d0d:	movzx  r12d,BYTE PTR [rdx+rcx*1]
  425d12:	mov    rax,QWORD PTR [rdi+0x28]
  425d16:	test   esi,esi
  425d18:	je     425d29 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x39>
  425d1a:	lea    rdx,[rax+0x1]
  425d1e:	mov    QWORD PTR [rdi+0x28],rdx
  425d22:	mov    BYTE PTR [rax],0x2c
  425d25:	mov    rax,QWORD PTR [rdi+0x28]
  425d29:	cmp    BYTE PTR [rbx+0x31],0x0
  425d2d:	movsxd r14,r9d
  425d30:	jne    425e00 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x110>
  425d36:	cmp    QWORD PTR [rbx+0x20],rax
  425d3a:	ja     425d48 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x58>
  425d3c:	xor    esi,esi
  425d3e:	mov    rdi,rbx
  425d41:	call   QWORD PTR [rbx+0x48]
  425d44:	mov    rax,QWORD PTR [rbx+0x28]
  425d48:	mov    BYTE PTR [rax],0x22
  425d4b:	xor    edi,edi
  425d4d:	mov    rdx,r14
  425d50:	cmp    BYTE PTR [rbx+0x32],0x0
  425d54:	sete   dil
  425d58:	add    rdi,QWORD PTR [rbx+0x28]
  425d5c:	lea    rax,[rdi+r14*1]
  425d60:	mov    QWORD PTR [rbx+0x28],rdi
  425d64:	mov    rsi,r15
  425d67:	cmp    QWORD PTR [rbx+0x20],rax
  425d6b:	ja     425dd0 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xe0>
  425d6d:	mov    rdi,rbx
  425d70:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  425d75:	mov    r14,QWORD PTR [rbx+0x28]
  425d79:	mov    BYTE PTR [r14],0x22
  425d7d:	xor    eax,eax
  425d7f:	cmp    BYTE PTR [rbx+0x32],0x0
  425d83:	sete   al
  425d86:	add    rax,QWORD PTR [rbx+0x28]
  425d8a:	lea    rdx,[rax+0x1]
  425d8e:	mov    QWORD PTR [rbx+0x28],rdx
  425d92:	mov    BYTE PTR [rax],0x3a
  425d95:	xor    esi,esi
  425d97:	mov    rax,QWORD PTR [rbx+0x28]
  425d9b:	mov    BYTE PTR [rax],0x20
  425d9e:	cmp    BYTE PTR [rbx+0x31],0x0
  425da2:	setne  sil
  425da6:	add    rsi,QWORD PTR [rbx+0x28]
  425daa:	cmp    BYTE PTR [rbx+0x33],0x0
  425dae:	mov    QWORD PTR [rbx+0x28],rsi
  425db2:	jne    425de0 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xf0>
  425db4:	add    rsp,0x8
  425db8:	mov    rdi,rbx
  425dbb:	pop    rbx
  425dbc:	pop    rbp
  425dbd:	movzx  esi,r12b
  425dc1:	pop    r12
  425dc3:	mov    rax,r13
  425dc6:	pop    r13
  425dc8:	pop    r14
  425dca:	pop    r15
  425dcc:	jmp    rax
  425dce:	xchg   ax,ax
  425dd0:	call   406210 <memcpy@plt>
  425dd5:	add    r14,QWORD PTR [rbx+0x28]
  425dd9:	mov    QWORD PTR [rbx+0x28],r14
  425ddd:	jmp    425d79 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x89>
  425ddf:	nop
  425de0:	movzx  edi,r12b
  425de4:	call   421350 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  425de9:	cdqe   
  425deb:	add    QWORD PTR [rbx+0x28],rax
  425def:	add    rsp,0x8
  425df3:	pop    rbx
  425df4:	pop    rbp
  425df5:	pop    r12
  425df7:	pop    r13
  425df9:	pop    r14
  425dfb:	pop    r15
  425dfd:	ret    
  425dfe:	xchg   ax,ax
  425e00:	lea    rdx,[rax+0x1]
  425e04:	mov    QWORD PTR [rbx+0x28],rdx
  425e08:	mov    BYTE PTR [rax],0xa
  425e0b:	movzx  eax,BYTE PTR [rbx+0x31]
  425e0f:	mov    rdi,QWORD PTR [rbx+0x28]
  425e13:	imul   eax,DWORD PTR [rbx+0x38]
  425e17:	movsxd rbp,eax
  425e1a:	lea    rax,[rdi+rbp*1]
  425e1e:	cmp    QWORD PTR [rbx+0x20],rax
  425e22:	jae    425e40 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x150>
  425e24:	mov    rsi,rbp
  425e27:	mov    rdi,rbx
  425e2a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  425e2f:	mov    rax,QWORD PTR [rbx+0x28]
  425e33:	jmp    425d48 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x58>
  425e38:	nop    DWORD PTR [rax+rax*1+0x0]
  425e40:	mov    rdx,rbp
  425e43:	mov    esi,0x20
  425e48:	call   4061c0 <memset@plt>
  425e4d:	mov    rax,QWORD PTR [rbx+0x28]
  425e51:	add    rax,rbp
  425e54:	mov    QWORD PTR [rbx+0x28],rax
  425e58:	jmp    425d48 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x58>
  425e5d:	nop    DWORD PTR [rax]

0000000000425e60 <flatcc_json_printer_uint16_enum_struct_field@@Base>:
  425e60:	endbr64 
  425e64:	push   r15
  425e66:	mov    r15,r8
  425e69:	push   r14
  425e6b:	push   r13
  425e6d:	push   r12
  425e6f:	push   rbp
  425e70:	push   rbx
  425e71:	mov    rbx,rdi
  425e74:	sub    rsp,0x8
  425e78:	mov    r13,QWORD PTR [rsp+0x40]
  425e7d:	movzx  r12d,WORD PTR [rdx+rcx*1]
  425e82:	mov    rax,QWORD PTR [rdi+0x28]
  425e86:	test   esi,esi
  425e88:	je     425e99 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x39>
  425e8a:	lea    rdx,[rax+0x1]
  425e8e:	mov    QWORD PTR [rdi+0x28],rdx
  425e92:	mov    BYTE PTR [rax],0x2c
  425e95:	mov    rax,QWORD PTR [rdi+0x28]
  425e99:	cmp    BYTE PTR [rbx+0x31],0x0
  425e9d:	movsxd r14,r9d
  425ea0:	jne    425f70 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x110>
  425ea6:	cmp    QWORD PTR [rbx+0x20],rax
  425eaa:	ja     425eb8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x58>
  425eac:	xor    esi,esi
  425eae:	mov    rdi,rbx
  425eb1:	call   QWORD PTR [rbx+0x48]
  425eb4:	mov    rax,QWORD PTR [rbx+0x28]
  425eb8:	mov    BYTE PTR [rax],0x22
  425ebb:	xor    edi,edi
  425ebd:	mov    rdx,r14
  425ec0:	cmp    BYTE PTR [rbx+0x32],0x0
  425ec4:	sete   dil
  425ec8:	add    rdi,QWORD PTR [rbx+0x28]
  425ecc:	lea    rax,[rdi+r14*1]
  425ed0:	mov    QWORD PTR [rbx+0x28],rdi
  425ed4:	mov    rsi,r15
  425ed7:	cmp    QWORD PTR [rbx+0x20],rax
  425edb:	ja     425f40 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xe0>
  425edd:	mov    rdi,rbx
  425ee0:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  425ee5:	mov    r14,QWORD PTR [rbx+0x28]
  425ee9:	mov    BYTE PTR [r14],0x22
  425eed:	xor    eax,eax
  425eef:	cmp    BYTE PTR [rbx+0x32],0x0
  425ef3:	sete   al
  425ef6:	add    rax,QWORD PTR [rbx+0x28]
  425efa:	lea    rdx,[rax+0x1]
  425efe:	mov    QWORD PTR [rbx+0x28],rdx
  425f02:	mov    BYTE PTR [rax],0x3a
  425f05:	xor    esi,esi
  425f07:	mov    rax,QWORD PTR [rbx+0x28]
  425f0b:	mov    BYTE PTR [rax],0x20
  425f0e:	cmp    BYTE PTR [rbx+0x31],0x0
  425f12:	setne  sil
  425f16:	add    rsi,QWORD PTR [rbx+0x28]
  425f1a:	cmp    BYTE PTR [rbx+0x33],0x0
  425f1e:	mov    QWORD PTR [rbx+0x28],rsi
  425f22:	jne    425f50 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xf0>
  425f24:	add    rsp,0x8
  425f28:	mov    rdi,rbx
  425f2b:	pop    rbx
  425f2c:	pop    rbp
  425f2d:	movzx  esi,r12w
  425f31:	pop    r12
  425f33:	mov    rax,r13
  425f36:	pop    r13
  425f38:	pop    r14
  425f3a:	pop    r15
  425f3c:	jmp    rax
  425f3e:	xchg   ax,ax
  425f40:	call   406210 <memcpy@plt>
  425f45:	add    r14,QWORD PTR [rbx+0x28]
  425f49:	mov    QWORD PTR [rbx+0x28],r14
  425f4d:	jmp    425ee9 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x89>
  425f4f:	nop
  425f50:	movzx  edi,r12w
  425f54:	call   4205e0 <flatcc_json_parser_struct_as_root@@Base+0x10>
  425f59:	cdqe   
  425f5b:	add    QWORD PTR [rbx+0x28],rax
  425f5f:	add    rsp,0x8
  425f63:	pop    rbx
  425f64:	pop    rbp
  425f65:	pop    r12
  425f67:	pop    r13
  425f69:	pop    r14
  425f6b:	pop    r15
  425f6d:	ret    
  425f6e:	xchg   ax,ax
  425f70:	lea    rdx,[rax+0x1]
  425f74:	mov    QWORD PTR [rbx+0x28],rdx
  425f78:	mov    BYTE PTR [rax],0xa
  425f7b:	movzx  eax,BYTE PTR [rbx+0x31]
  425f7f:	mov    rdi,QWORD PTR [rbx+0x28]
  425f83:	imul   eax,DWORD PTR [rbx+0x38]
  425f87:	movsxd rbp,eax
  425f8a:	lea    rax,[rdi+rbp*1]
  425f8e:	cmp    QWORD PTR [rbx+0x20],rax
  425f92:	jae    425fb0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x150>
  425f94:	mov    rsi,rbp
  425f97:	mov    rdi,rbx
  425f9a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  425f9f:	mov    rax,QWORD PTR [rbx+0x28]
  425fa3:	jmp    425eb8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x58>
  425fa8:	nop    DWORD PTR [rax+rax*1+0x0]
  425fb0:	mov    rdx,rbp
  425fb3:	mov    esi,0x20
  425fb8:	call   4061c0 <memset@plt>
  425fbd:	mov    rax,QWORD PTR [rbx+0x28]
  425fc1:	add    rax,rbp
  425fc4:	mov    QWORD PTR [rbx+0x28],rax
  425fc8:	jmp    425eb8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x58>
  425fcd:	nop    DWORD PTR [rax]

0000000000425fd0 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
  425fd0:	endbr64 
  425fd4:	push   r15
  425fd6:	mov    r15,r8
  425fd9:	push   r14
  425fdb:	push   r13
  425fdd:	push   r12
  425fdf:	push   rbp
  425fe0:	push   rbx
  425fe1:	mov    rbx,rdi
  425fe4:	sub    rsp,0x8
  425fe8:	mov    r13,QWORD PTR [rsp+0x40]
  425fed:	mov    r12d,DWORD PTR [rdx+rcx*1]
  425ff1:	mov    rax,QWORD PTR [rdi+0x28]
  425ff5:	test   esi,esi
  425ff7:	je     426008 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x38>
  425ff9:	lea    rdx,[rax+0x1]
  425ffd:	mov    QWORD PTR [rdi+0x28],rdx
  426001:	mov    BYTE PTR [rax],0x2c
  426004:	mov    rax,QWORD PTR [rdi+0x28]
  426008:	cmp    BYTE PTR [rbx+0x31],0x0
  42600c:	movsxd r14,r9d
  42600f:	jne    4260e0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x110>
  426015:	cmp    QWORD PTR [rbx+0x20],rax
  426019:	ja     426027 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x57>
  42601b:	xor    esi,esi
  42601d:	mov    rdi,rbx
  426020:	call   QWORD PTR [rbx+0x48]
  426023:	mov    rax,QWORD PTR [rbx+0x28]
  426027:	mov    BYTE PTR [rax],0x22
  42602a:	xor    edi,edi
  42602c:	mov    rdx,r14
  42602f:	cmp    BYTE PTR [rbx+0x32],0x0
  426033:	sete   dil
  426037:	add    rdi,QWORD PTR [rbx+0x28]
  42603b:	lea    rax,[rdi+r14*1]
  42603f:	mov    QWORD PTR [rbx+0x28],rdi
  426043:	mov    rsi,r15
  426046:	cmp    QWORD PTR [rbx+0x20],rax
  42604a:	ja     4260b0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xe0>
  42604c:	mov    rdi,rbx
  42604f:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  426054:	mov    r14,QWORD PTR [rbx+0x28]
  426058:	mov    BYTE PTR [r14],0x22
  42605c:	xor    eax,eax
  42605e:	cmp    BYTE PTR [rbx+0x32],0x0
  426062:	sete   al
  426065:	add    rax,QWORD PTR [rbx+0x28]
  426069:	lea    rdx,[rax+0x1]
  42606d:	mov    QWORD PTR [rbx+0x28],rdx
  426071:	mov    BYTE PTR [rax],0x3a
  426074:	xor    esi,esi
  426076:	mov    rax,QWORD PTR [rbx+0x28]
  42607a:	mov    BYTE PTR [rax],0x20
  42607d:	cmp    BYTE PTR [rbx+0x31],0x0
  426081:	setne  sil
  426085:	add    rsi,QWORD PTR [rbx+0x28]
  426089:	cmp    BYTE PTR [rbx+0x33],0x0
  42608d:	mov    QWORD PTR [rbx+0x28],rsi
  426091:	jne    4260c0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xf0>
  426093:	add    rsp,0x8
  426097:	mov    rdi,rbx
  42609a:	pop    rbx
  42609b:	pop    rbp
  42609c:	mov    esi,r12d
  42609f:	pop    r12
  4260a1:	mov    rax,r13
  4260a4:	pop    r13
  4260a6:	pop    r14
  4260a8:	pop    r15
  4260aa:	jmp    rax
  4260ac:	nop    DWORD PTR [rax+0x0]
  4260b0:	call   406210 <memcpy@plt>
  4260b5:	add    r14,QWORD PTR [rbx+0x28]
  4260b9:	mov    QWORD PTR [rbx+0x28],r14
  4260bd:	jmp    426058 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x88>
  4260bf:	nop
  4260c0:	mov    edi,r12d
  4260c3:	call   420710 <flatcc_json_parser_struct_as_root@@Base+0x140>
  4260c8:	cdqe   
  4260ca:	add    QWORD PTR [rbx+0x28],rax
  4260ce:	add    rsp,0x8
  4260d2:	pop    rbx
  4260d3:	pop    rbp
  4260d4:	pop    r12
  4260d6:	pop    r13
  4260d8:	pop    r14
  4260da:	pop    r15
  4260dc:	ret    
  4260dd:	nop    DWORD PTR [rax]
  4260e0:	lea    rdx,[rax+0x1]
  4260e4:	mov    QWORD PTR [rbx+0x28],rdx
  4260e8:	mov    BYTE PTR [rax],0xa
  4260eb:	movzx  eax,BYTE PTR [rbx+0x31]
  4260ef:	mov    rdi,QWORD PTR [rbx+0x28]
  4260f3:	imul   eax,DWORD PTR [rbx+0x38]
  4260f7:	movsxd rbp,eax
  4260fa:	lea    rax,[rdi+rbp*1]
  4260fe:	cmp    QWORD PTR [rbx+0x20],rax
  426102:	jae    426120 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x150>
  426104:	mov    rsi,rbp
  426107:	mov    rdi,rbx
  42610a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42610f:	mov    rax,QWORD PTR [rbx+0x28]
  426113:	jmp    426027 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x57>
  426118:	nop    DWORD PTR [rax+rax*1+0x0]
  426120:	mov    rdx,rbp
  426123:	mov    esi,0x20
  426128:	call   4061c0 <memset@plt>
  42612d:	mov    rax,QWORD PTR [rbx+0x28]
  426131:	add    rax,rbp
  426134:	mov    QWORD PTR [rbx+0x28],rax
  426138:	jmp    426027 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x57>
  42613d:	nop    DWORD PTR [rax]

0000000000426140 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
  426140:	endbr64 
  426144:	push   r15
  426146:	mov    r15,r8
  426149:	push   r14
  42614b:	push   r13
  42614d:	push   r12
  42614f:	push   rbp
  426150:	push   rbx
  426151:	mov    rbx,rdi
  426154:	sub    rsp,0x8
  426158:	mov    r13,QWORD PTR [rsp+0x40]
  42615d:	mov    r12,QWORD PTR [rdx+rcx*1]
  426161:	mov    rax,QWORD PTR [rdi+0x28]
  426165:	test   esi,esi
  426167:	je     426178 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x38>
  426169:	lea    rdx,[rax+0x1]
  42616d:	mov    QWORD PTR [rdi+0x28],rdx
  426171:	mov    BYTE PTR [rax],0x2c
  426174:	mov    rax,QWORD PTR [rdi+0x28]
  426178:	cmp    BYTE PTR [rbx+0x31],0x0
  42617c:	movsxd r14,r9d
  42617f:	jne    426250 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x110>
  426185:	cmp    QWORD PTR [rbx+0x20],rax
  426189:	ja     426197 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x57>
  42618b:	xor    esi,esi
  42618d:	mov    rdi,rbx
  426190:	call   QWORD PTR [rbx+0x48]
  426193:	mov    rax,QWORD PTR [rbx+0x28]
  426197:	mov    BYTE PTR [rax],0x22
  42619a:	xor    edi,edi
  42619c:	mov    rdx,r14
  42619f:	cmp    BYTE PTR [rbx+0x32],0x0
  4261a3:	sete   dil
  4261a7:	add    rdi,QWORD PTR [rbx+0x28]
  4261ab:	lea    rax,[rdi+r14*1]
  4261af:	mov    QWORD PTR [rbx+0x28],rdi
  4261b3:	mov    rsi,r15
  4261b6:	cmp    QWORD PTR [rbx+0x20],rax
  4261ba:	ja     426220 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xe0>
  4261bc:	mov    rdi,rbx
  4261bf:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4261c4:	mov    r14,QWORD PTR [rbx+0x28]
  4261c8:	mov    BYTE PTR [r14],0x22
  4261cc:	xor    eax,eax
  4261ce:	cmp    BYTE PTR [rbx+0x32],0x0
  4261d2:	sete   al
  4261d5:	add    rax,QWORD PTR [rbx+0x28]
  4261d9:	lea    rdx,[rax+0x1]
  4261dd:	mov    QWORD PTR [rbx+0x28],rdx
  4261e1:	mov    BYTE PTR [rax],0x3a
  4261e4:	xor    esi,esi
  4261e6:	mov    rax,QWORD PTR [rbx+0x28]
  4261ea:	mov    BYTE PTR [rax],0x20
  4261ed:	cmp    BYTE PTR [rbx+0x31],0x0
  4261f1:	setne  sil
  4261f5:	add    rsi,QWORD PTR [rbx+0x28]
  4261f9:	cmp    BYTE PTR [rbx+0x33],0x0
  4261fd:	mov    QWORD PTR [rbx+0x28],rsi
  426201:	jne    426230 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xf0>
  426203:	add    rsp,0x8
  426207:	mov    rdi,rbx
  42620a:	pop    rbx
  42620b:	pop    rbp
  42620c:	mov    rsi,r12
  42620f:	pop    r12
  426211:	mov    rax,r13
  426214:	pop    r13
  426216:	pop    r14
  426218:	pop    r15
  42621a:	jmp    rax
  42621c:	nop    DWORD PTR [rax+0x0]
  426220:	call   406210 <memcpy@plt>
  426225:	add    r14,QWORD PTR [rbx+0x28]
  426229:	mov    QWORD PTR [rbx+0x28],r14
  42622d:	jmp    4261c8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x88>
  42622f:	nop
  426230:	mov    rdi,r12
  426233:	call   4209c0 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  426238:	cdqe   
  42623a:	add    QWORD PTR [rbx+0x28],rax
  42623e:	add    rsp,0x8
  426242:	pop    rbx
  426243:	pop    rbp
  426244:	pop    r12
  426246:	pop    r13
  426248:	pop    r14
  42624a:	pop    r15
  42624c:	ret    
  42624d:	nop    DWORD PTR [rax]
  426250:	lea    rdx,[rax+0x1]
  426254:	mov    QWORD PTR [rbx+0x28],rdx
  426258:	mov    BYTE PTR [rax],0xa
  42625b:	movzx  eax,BYTE PTR [rbx+0x31]
  42625f:	mov    rdi,QWORD PTR [rbx+0x28]
  426263:	imul   eax,DWORD PTR [rbx+0x38]
  426267:	movsxd rbp,eax
  42626a:	lea    rax,[rdi+rbp*1]
  42626e:	cmp    QWORD PTR [rbx+0x20],rax
  426272:	jae    426290 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x150>
  426274:	mov    rsi,rbp
  426277:	mov    rdi,rbx
  42627a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42627f:	mov    rax,QWORD PTR [rbx+0x28]
  426283:	jmp    426197 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x57>
  426288:	nop    DWORD PTR [rax+rax*1+0x0]
  426290:	mov    rdx,rbp
  426293:	mov    esi,0x20
  426298:	call   4061c0 <memset@plt>
  42629d:	mov    rax,QWORD PTR [rbx+0x28]
  4262a1:	add    rax,rbp
  4262a4:	mov    QWORD PTR [rbx+0x28],rax
  4262a8:	jmp    426197 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x57>
  4262ad:	nop    DWORD PTR [rax]

00000000004262b0 <flatcc_json_printer_int8_enum_struct_field@@Base>:
  4262b0:	endbr64 
  4262b4:	push   r15
  4262b6:	mov    r15,r8
  4262b9:	push   r14
  4262bb:	push   r13
  4262bd:	push   r12
  4262bf:	push   rbp
  4262c0:	push   rbx
  4262c1:	mov    rbx,rdi
  4262c4:	sub    rsp,0x8
  4262c8:	mov    r13,QWORD PTR [rsp+0x40]
  4262cd:	movzx  r12d,BYTE PTR [rdx+rcx*1]
  4262d2:	mov    rax,QWORD PTR [rdi+0x28]
  4262d6:	test   esi,esi
  4262d8:	je     4262e9 <flatcc_json_printer_int8_enum_struct_field@@Base+0x39>
  4262da:	lea    rdx,[rax+0x1]
  4262de:	mov    QWORD PTR [rdi+0x28],rdx
  4262e2:	mov    BYTE PTR [rax],0x2c
  4262e5:	mov    rax,QWORD PTR [rdi+0x28]
  4262e9:	cmp    BYTE PTR [rbx+0x31],0x0
  4262ed:	movsxd r14,r9d
  4262f0:	jne    4263e8 <flatcc_json_printer_int8_enum_struct_field@@Base+0x138>
  4262f6:	cmp    QWORD PTR [rbx+0x20],rax
  4262fa:	ja     426308 <flatcc_json_printer_int8_enum_struct_field@@Base+0x58>
  4262fc:	xor    esi,esi
  4262fe:	mov    rdi,rbx
  426301:	call   QWORD PTR [rbx+0x48]
  426304:	mov    rax,QWORD PTR [rbx+0x28]
  426308:	mov    BYTE PTR [rax],0x22
  42630b:	xor    edi,edi
  42630d:	mov    rdx,r14
  426310:	cmp    BYTE PTR [rbx+0x32],0x0
  426314:	sete   dil
  426318:	add    rdi,QWORD PTR [rbx+0x28]
  42631c:	lea    rax,[rdi+r14*1]
  426320:	mov    QWORD PTR [rbx+0x28],rdi
  426324:	mov    rsi,r15
  426327:	cmp    QWORD PTR [rbx+0x20],rax
  42632b:	ja     4263b0 <flatcc_json_printer_int8_enum_struct_field@@Base+0x100>
  426331:	mov    rdi,rbx
  426334:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  426339:	mov    r14,QWORD PTR [rbx+0x28]
  42633d:	mov    BYTE PTR [r14],0x22
  426341:	xor    eax,eax
  426343:	cmp    BYTE PTR [rbx+0x32],0x0
  426347:	sete   al
  42634a:	add    rax,QWORD PTR [rbx+0x28]
  42634e:	lea    rdx,[rax+0x1]
  426352:	mov    QWORD PTR [rbx+0x28],rdx
  426356:	mov    BYTE PTR [rax],0x3a
  426359:	xor    esi,esi
  42635b:	mov    rax,QWORD PTR [rbx+0x28]
  42635f:	mov    BYTE PTR [rax],0x20
  426362:	cmp    BYTE PTR [rbx+0x31],0x0
  426366:	setne  sil
  42636a:	add    rsi,QWORD PTR [rbx+0x28]
  42636e:	cmp    BYTE PTR [rbx+0x33],0x0
  426372:	mov    QWORD PTR [rbx+0x28],rsi
  426376:	je     4263c8 <flatcc_json_printer_int8_enum_struct_field@@Base+0x118>
  426378:	movsx  r8d,r12b
  42637c:	shr    r8d,0x1f
  426380:	test   r12b,r12b
  426383:	jns    42638e <flatcc_json_printer_int8_enum_struct_field@@Base+0xde>
  426385:	mov    BYTE PTR [rsi],0x2d
  426388:	neg    r12d
  42638b:	inc    rsi
  42638e:	movzx  edi,r12b
  426392:	call   421350 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  426397:	add    r8d,eax
  42639a:	movsxd r8,r8d
  42639d:	add    QWORD PTR [rbx+0x28],r8
  4263a1:	add    rsp,0x8
  4263a5:	pop    rbx
  4263a6:	pop    rbp
  4263a7:	pop    r12
  4263a9:	pop    r13
  4263ab:	pop    r14
  4263ad:	pop    r15
  4263af:	ret    
  4263b0:	call   406210 <memcpy@plt>
  4263b5:	add    r14,QWORD PTR [rbx+0x28]
  4263b9:	mov    QWORD PTR [rbx+0x28],r14
  4263bd:	jmp    42633d <flatcc_json_printer_int8_enum_struct_field@@Base+0x8d>
  4263c2:	nop    WORD PTR [rax+rax*1+0x0]
  4263c8:	add    rsp,0x8
  4263cc:	mov    rdi,rbx
  4263cf:	pop    rbx
  4263d0:	pop    rbp
  4263d1:	movsx  esi,r12b
  4263d5:	pop    r12
  4263d7:	mov    rax,r13
  4263da:	pop    r13
  4263dc:	pop    r14
  4263de:	pop    r15
  4263e0:	jmp    rax
  4263e2:	nop    WORD PTR [rax+rax*1+0x0]
  4263e8:	lea    rdx,[rax+0x1]
  4263ec:	mov    QWORD PTR [rbx+0x28],rdx
  4263f0:	mov    BYTE PTR [rax],0xa
  4263f3:	movzx  eax,BYTE PTR [rbx+0x31]
  4263f7:	mov    rdi,QWORD PTR [rbx+0x28]
  4263fb:	imul   eax,DWORD PTR [rbx+0x38]
  4263ff:	movsxd rbp,eax
  426402:	lea    rax,[rdi+rbp*1]
  426406:	cmp    QWORD PTR [rbx+0x20],rax
  42640a:	jae    426420 <flatcc_json_printer_int8_enum_struct_field@@Base+0x170>
  42640c:	mov    rsi,rbp
  42640f:	mov    rdi,rbx
  426412:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426417:	mov    rax,QWORD PTR [rbx+0x28]
  42641b:	jmp    426308 <flatcc_json_printer_int8_enum_struct_field@@Base+0x58>
  426420:	mov    rdx,rbp
  426423:	mov    esi,0x20
  426428:	call   4061c0 <memset@plt>
  42642d:	mov    rax,QWORD PTR [rbx+0x28]
  426431:	add    rax,rbp
  426434:	mov    QWORD PTR [rbx+0x28],rax
  426438:	jmp    426308 <flatcc_json_printer_int8_enum_struct_field@@Base+0x58>
  42643d:	nop    DWORD PTR [rax]

0000000000426440 <flatcc_json_printer_int16_enum_struct_field@@Base>:
  426440:	endbr64 
  426444:	push   r15
  426446:	mov    r15,r8
  426449:	push   r14
  42644b:	push   r13
  42644d:	push   r12
  42644f:	push   rbp
  426450:	push   rbx
  426451:	mov    rbx,rdi
  426454:	sub    rsp,0x8
  426458:	mov    r13,QWORD PTR [rsp+0x40]
  42645d:	movzx  r12d,WORD PTR [rdx+rcx*1]
  426462:	mov    rax,QWORD PTR [rdi+0x28]
  426466:	test   esi,esi
  426468:	je     426479 <flatcc_json_printer_int16_enum_struct_field@@Base+0x39>
  42646a:	lea    rdx,[rax+0x1]
  42646e:	mov    QWORD PTR [rdi+0x28],rdx
  426472:	mov    BYTE PTR [rax],0x2c
  426475:	mov    rax,QWORD PTR [rdi+0x28]
  426479:	cmp    BYTE PTR [rbx+0x31],0x0
  42647d:	movsxd r14,r9d
  426480:	jne    426580 <flatcc_json_printer_int16_enum_struct_field@@Base+0x140>
  426486:	cmp    QWORD PTR [rbx+0x20],rax
  42648a:	ja     426498 <flatcc_json_printer_int16_enum_struct_field@@Base+0x58>
  42648c:	xor    esi,esi
  42648e:	mov    rdi,rbx
  426491:	call   QWORD PTR [rbx+0x48]
  426494:	mov    rax,QWORD PTR [rbx+0x28]
  426498:	mov    BYTE PTR [rax],0x22
  42649b:	xor    edi,edi
  42649d:	mov    rdx,r14
  4264a0:	cmp    BYTE PTR [rbx+0x32],0x0
  4264a4:	sete   dil
  4264a8:	add    rdi,QWORD PTR [rbx+0x28]
  4264ac:	lea    rax,[rdi+r14*1]
  4264b0:	mov    QWORD PTR [rbx+0x28],rdi
  4264b4:	mov    rsi,r15
  4264b7:	cmp    QWORD PTR [rbx+0x20],rax
  4264bb:	ja     426548 <flatcc_json_printer_int16_enum_struct_field@@Base+0x108>
  4264c1:	mov    rdi,rbx
  4264c4:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4264c9:	mov    r14,QWORD PTR [rbx+0x28]
  4264cd:	mov    BYTE PTR [r14],0x22
  4264d1:	xor    eax,eax
  4264d3:	cmp    BYTE PTR [rbx+0x32],0x0
  4264d7:	sete   al
  4264da:	add    rax,QWORD PTR [rbx+0x28]
  4264de:	lea    rdx,[rax+0x1]
  4264e2:	mov    QWORD PTR [rbx+0x28],rdx
  4264e6:	mov    BYTE PTR [rax],0x3a
  4264e9:	xor    esi,esi
  4264eb:	mov    rax,QWORD PTR [rbx+0x28]
  4264ef:	mov    BYTE PTR [rax],0x20
  4264f2:	cmp    BYTE PTR [rbx+0x31],0x0
  4264f6:	setne  sil
  4264fa:	add    rsi,QWORD PTR [rbx+0x28]
  4264fe:	cmp    BYTE PTR [rbx+0x33],0x0
  426502:	mov    QWORD PTR [rbx+0x28],rsi
  426506:	je     426560 <flatcc_json_printer_int16_enum_struct_field@@Base+0x120>
  426508:	movsx  r11d,r12w
  42650c:	shr    r11d,0x1f
  426510:	test   r12w,r12w
  426514:	jns    42651f <flatcc_json_printer_int16_enum_struct_field@@Base+0xdf>
  426516:	mov    BYTE PTR [rsi],0x2d
  426519:	neg    r12d
  42651c:	inc    rsi
  42651f:	movzx  edi,r12w
  426523:	call   4205e0 <flatcc_json_parser_struct_as_root@@Base+0x10>
  426528:	add    r11d,eax
  42652b:	movsxd r11,r11d
  42652e:	add    QWORD PTR [rbx+0x28],r11
  426532:	add    rsp,0x8
  426536:	pop    rbx
  426537:	pop    rbp
  426538:	pop    r12
  42653a:	pop    r13
  42653c:	pop    r14
  42653e:	pop    r15
  426540:	ret    
  426541:	nop    DWORD PTR [rax+0x0]
  426548:	call   406210 <memcpy@plt>
  42654d:	add    r14,QWORD PTR [rbx+0x28]
  426551:	mov    QWORD PTR [rbx+0x28],r14
  426555:	jmp    4264cd <flatcc_json_printer_int16_enum_struct_field@@Base+0x8d>
  42655a:	nop    WORD PTR [rax+rax*1+0x0]
  426560:	add    rsp,0x8
  426564:	mov    rdi,rbx
  426567:	pop    rbx
  426568:	pop    rbp
  426569:	movsx  esi,r12w
  42656d:	pop    r12
  42656f:	mov    rax,r13
  426572:	pop    r13
  426574:	pop    r14
  426576:	pop    r15
  426578:	jmp    rax
  42657a:	nop    WORD PTR [rax+rax*1+0x0]
  426580:	lea    rdx,[rax+0x1]
  426584:	mov    QWORD PTR [rbx+0x28],rdx
  426588:	mov    BYTE PTR [rax],0xa
  42658b:	movzx  eax,BYTE PTR [rbx+0x31]
  42658f:	mov    rdi,QWORD PTR [rbx+0x28]
  426593:	imul   eax,DWORD PTR [rbx+0x38]
  426597:	movsxd rbp,eax
  42659a:	lea    rax,[rdi+rbp*1]
  42659e:	cmp    QWORD PTR [rbx+0x20],rax
  4265a2:	jae    4265c0 <flatcc_json_printer_int16_enum_struct_field@@Base+0x180>
  4265a4:	mov    rsi,rbp
  4265a7:	mov    rdi,rbx
  4265aa:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4265af:	mov    rax,QWORD PTR [rbx+0x28]
  4265b3:	jmp    426498 <flatcc_json_printer_int16_enum_struct_field@@Base+0x58>
  4265b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4265c0:	mov    rdx,rbp
  4265c3:	mov    esi,0x20
  4265c8:	call   4061c0 <memset@plt>
  4265cd:	mov    rax,QWORD PTR [rbx+0x28]
  4265d1:	add    rax,rbp
  4265d4:	mov    QWORD PTR [rbx+0x28],rax
  4265d8:	jmp    426498 <flatcc_json_printer_int16_enum_struct_field@@Base+0x58>
  4265dd:	nop    DWORD PTR [rax]

00000000004265e0 <flatcc_json_printer_int32_enum_struct_field@@Base>:
  4265e0:	endbr64 
  4265e4:	push   r15
  4265e6:	mov    r15,r8
  4265e9:	push   r14
  4265eb:	push   r13
  4265ed:	push   r12
  4265ef:	push   rbp
  4265f0:	push   rbx
  4265f1:	mov    rbx,rdi
  4265f4:	sub    rsp,0x8
  4265f8:	mov    r13,QWORD PTR [rsp+0x40]
  4265fd:	mov    r12d,DWORD PTR [rdx+rcx*1]
  426601:	mov    rax,QWORD PTR [rdi+0x28]
  426605:	test   esi,esi
  426607:	je     426618 <flatcc_json_printer_int32_enum_struct_field@@Base+0x38>
  426609:	lea    rdx,[rax+0x1]
  42660d:	mov    QWORD PTR [rdi+0x28],rdx
  426611:	mov    BYTE PTR [rax],0x2c
  426614:	mov    rax,QWORD PTR [rdi+0x28]
  426618:	cmp    BYTE PTR [rbx+0x31],0x0
  42661c:	movsxd r14,r9d
  42661f:	jne    426718 <flatcc_json_printer_int32_enum_struct_field@@Base+0x138>
  426625:	cmp    QWORD PTR [rbx+0x20],rax
  426629:	ja     426637 <flatcc_json_printer_int32_enum_struct_field@@Base+0x57>
  42662b:	xor    esi,esi
  42662d:	mov    rdi,rbx
  426630:	call   QWORD PTR [rbx+0x48]
  426633:	mov    rax,QWORD PTR [rbx+0x28]
  426637:	mov    BYTE PTR [rax],0x22
  42663a:	xor    edi,edi
  42663c:	mov    rdx,r14
  42663f:	cmp    BYTE PTR [rbx+0x32],0x0
  426643:	sete   dil
  426647:	add    rdi,QWORD PTR [rbx+0x28]
  42664b:	lea    rax,[rdi+r14*1]
  42664f:	mov    QWORD PTR [rbx+0x28],rdi
  426653:	mov    rsi,r15
  426656:	cmp    QWORD PTR [rbx+0x20],rax
  42665a:	ja     4266e0 <flatcc_json_printer_int32_enum_struct_field@@Base+0x100>
  426660:	mov    rdi,rbx
  426663:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  426668:	mov    r14,QWORD PTR [rbx+0x28]
  42666c:	mov    BYTE PTR [r14],0x22
  426670:	xor    eax,eax
  426672:	cmp    BYTE PTR [rbx+0x32],0x0
  426676:	sete   al
  426679:	add    rax,QWORD PTR [rbx+0x28]
  42667d:	lea    rdx,[rax+0x1]
  426681:	mov    QWORD PTR [rbx+0x28],rdx
  426685:	mov    BYTE PTR [rax],0x3a
  426688:	xor    esi,esi
  42668a:	mov    rax,QWORD PTR [rbx+0x28]
  42668e:	mov    BYTE PTR [rax],0x20
  426691:	cmp    BYTE PTR [rbx+0x31],0x0
  426695:	setne  sil
  426699:	add    rsi,QWORD PTR [rbx+0x28]
  42669d:	cmp    BYTE PTR [rbx+0x33],0x0
  4266a1:	mov    QWORD PTR [rbx+0x28],rsi
  4266a5:	je     4266f8 <flatcc_json_printer_int32_enum_struct_field@@Base+0x118>
  4266a7:	mov    ebp,r12d
  4266aa:	shr    ebp,0x1f
  4266ad:	test   r12d,r12d
  4266b0:	jns    4266bb <flatcc_json_printer_int32_enum_struct_field@@Base+0xdb>
  4266b2:	mov    BYTE PTR [rsi],0x2d
  4266b5:	neg    r12d
  4266b8:	inc    rsi
  4266bb:	mov    edi,r12d
  4266be:	call   420710 <flatcc_json_parser_struct_as_root@@Base+0x140>
  4266c3:	add    ebp,eax
  4266c5:	movsxd rbp,ebp
  4266c8:	add    QWORD PTR [rbx+0x28],rbp
  4266cc:	add    rsp,0x8
  4266d0:	pop    rbx
  4266d1:	pop    rbp
  4266d2:	pop    r12
  4266d4:	pop    r13
  4266d6:	pop    r14
  4266d8:	pop    r15
  4266da:	ret    
  4266db:	nop    DWORD PTR [rax+rax*1+0x0]
  4266e0:	call   406210 <memcpy@plt>
  4266e5:	add    r14,QWORD PTR [rbx+0x28]
  4266e9:	mov    QWORD PTR [rbx+0x28],r14
  4266ed:	jmp    42666c <flatcc_json_printer_int32_enum_struct_field@@Base+0x8c>
  4266f2:	nop    WORD PTR [rax+rax*1+0x0]
  4266f8:	add    rsp,0x8
  4266fc:	mov    rdi,rbx
  4266ff:	pop    rbx
  426700:	pop    rbp
  426701:	mov    esi,r12d
  426704:	pop    r12
  426706:	mov    rax,r13
  426709:	pop    r13
  42670b:	pop    r14
  42670d:	pop    r15
  42670f:	jmp    rax
  426711:	nop    DWORD PTR [rax+0x0]
  426718:	lea    rdx,[rax+0x1]
  42671c:	mov    QWORD PTR [rbx+0x28],rdx
  426720:	mov    BYTE PTR [rax],0xa
  426723:	movzx  eax,BYTE PTR [rbx+0x31]
  426727:	mov    rdi,QWORD PTR [rbx+0x28]
  42672b:	imul   eax,DWORD PTR [rbx+0x38]
  42672f:	movsxd rbp,eax
  426732:	lea    rax,[rdi+rbp*1]
  426736:	cmp    QWORD PTR [rbx+0x20],rax
  42673a:	jae    426750 <flatcc_json_printer_int32_enum_struct_field@@Base+0x170>
  42673c:	mov    rsi,rbp
  42673f:	mov    rdi,rbx
  426742:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426747:	mov    rax,QWORD PTR [rbx+0x28]
  42674b:	jmp    426637 <flatcc_json_printer_int32_enum_struct_field@@Base+0x57>
  426750:	mov    rdx,rbp
  426753:	mov    esi,0x20
  426758:	call   4061c0 <memset@plt>
  42675d:	mov    rax,QWORD PTR [rbx+0x28]
  426761:	add    rax,rbp
  426764:	mov    QWORD PTR [rbx+0x28],rax
  426768:	jmp    426637 <flatcc_json_printer_int32_enum_struct_field@@Base+0x57>
  42676d:	nop    DWORD PTR [rax]

0000000000426770 <flatcc_json_printer_int64_enum_struct_field@@Base>:
  426770:	endbr64 
  426774:	push   r15
  426776:	mov    r15,r8
  426779:	push   r14
  42677b:	push   r13
  42677d:	push   r12
  42677f:	push   rbp
  426780:	push   rbx
  426781:	mov    rbx,rdi
  426784:	sub    rsp,0x8
  426788:	mov    r13,QWORD PTR [rsp+0x40]
  42678d:	mov    r12,QWORD PTR [rdx+rcx*1]
  426791:	mov    rax,QWORD PTR [rdi+0x28]
  426795:	test   esi,esi
  426797:	je     4267a8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x38>
  426799:	lea    rdx,[rax+0x1]
  42679d:	mov    QWORD PTR [rdi+0x28],rdx
  4267a1:	mov    BYTE PTR [rax],0x2c
  4267a4:	mov    rax,QWORD PTR [rdi+0x28]
  4267a8:	cmp    BYTE PTR [rbx+0x31],0x0
  4267ac:	movsxd r14,r9d
  4267af:	jne    4268a8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x138>
  4267b5:	cmp    QWORD PTR [rbx+0x20],rax
  4267b9:	ja     4267c7 <flatcc_json_printer_int64_enum_struct_field@@Base+0x57>
  4267bb:	xor    esi,esi
  4267bd:	mov    rdi,rbx
  4267c0:	call   QWORD PTR [rbx+0x48]
  4267c3:	mov    rax,QWORD PTR [rbx+0x28]
  4267c7:	mov    BYTE PTR [rax],0x22
  4267ca:	xor    edi,edi
  4267cc:	mov    rdx,r14
  4267cf:	cmp    BYTE PTR [rbx+0x32],0x0
  4267d3:	sete   dil
  4267d7:	add    rdi,QWORD PTR [rbx+0x28]
  4267db:	lea    rax,[rdi+r14*1]
  4267df:	mov    QWORD PTR [rbx+0x28],rdi
  4267e3:	mov    rsi,r15
  4267e6:	cmp    QWORD PTR [rbx+0x20],rax
  4267ea:	ja     426870 <flatcc_json_printer_int64_enum_struct_field@@Base+0x100>
  4267f0:	mov    rdi,rbx
  4267f3:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  4267f8:	mov    r14,QWORD PTR [rbx+0x28]
  4267fc:	mov    BYTE PTR [r14],0x22
  426800:	xor    eax,eax
  426802:	cmp    BYTE PTR [rbx+0x32],0x0
  426806:	sete   al
  426809:	add    rax,QWORD PTR [rbx+0x28]
  42680d:	lea    rdx,[rax+0x1]
  426811:	mov    QWORD PTR [rbx+0x28],rdx
  426815:	mov    BYTE PTR [rax],0x3a
  426818:	xor    esi,esi
  42681a:	mov    rax,QWORD PTR [rbx+0x28]
  42681e:	mov    BYTE PTR [rax],0x20
  426821:	cmp    BYTE PTR [rbx+0x31],0x0
  426825:	setne  sil
  426829:	add    rsi,QWORD PTR [rbx+0x28]
  42682d:	cmp    BYTE PTR [rbx+0x33],0x0
  426831:	mov    QWORD PTR [rbx+0x28],rsi
  426835:	je     426888 <flatcc_json_printer_int64_enum_struct_field@@Base+0x118>
  426837:	mov    rbp,r12
  42683a:	shr    rbp,0x3f
  42683e:	test   r12,r12
  426841:	jns    42684c <flatcc_json_printer_int64_enum_struct_field@@Base+0xdc>
  426843:	mov    BYTE PTR [rsi],0x2d
  426846:	neg    r12
  426849:	inc    rsi
  42684c:	mov    rdi,r12
  42684f:	call   4209c0 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  426854:	add    eax,ebp
  426856:	cdqe   
  426858:	add    QWORD PTR [rbx+0x28],rax
  42685c:	add    rsp,0x8
  426860:	pop    rbx
  426861:	pop    rbp
  426862:	pop    r12
  426864:	pop    r13
  426866:	pop    r14
  426868:	pop    r15
  42686a:	ret    
  42686b:	nop    DWORD PTR [rax+rax*1+0x0]
  426870:	call   406210 <memcpy@plt>
  426875:	add    r14,QWORD PTR [rbx+0x28]
  426879:	mov    QWORD PTR [rbx+0x28],r14
  42687d:	jmp    4267fc <flatcc_json_printer_int64_enum_struct_field@@Base+0x8c>
  426882:	nop    WORD PTR [rax+rax*1+0x0]
  426888:	add    rsp,0x8
  42688c:	mov    rdi,rbx
  42688f:	pop    rbx
  426890:	pop    rbp
  426891:	mov    rsi,r12
  426894:	pop    r12
  426896:	mov    rax,r13
  426899:	pop    r13
  42689b:	pop    r14
  42689d:	pop    r15
  42689f:	jmp    rax
  4268a1:	nop    DWORD PTR [rax+0x0]
  4268a8:	lea    rdx,[rax+0x1]
  4268ac:	mov    QWORD PTR [rbx+0x28],rdx
  4268b0:	mov    BYTE PTR [rax],0xa
  4268b3:	movzx  eax,BYTE PTR [rbx+0x31]
  4268b7:	mov    rdi,QWORD PTR [rbx+0x28]
  4268bb:	imul   eax,DWORD PTR [rbx+0x38]
  4268bf:	movsxd rbp,eax
  4268c2:	lea    rax,[rdi+rbp*1]
  4268c6:	cmp    QWORD PTR [rbx+0x20],rax
  4268ca:	jae    4268e0 <flatcc_json_printer_int64_enum_struct_field@@Base+0x170>
  4268cc:	mov    rsi,rbp
  4268cf:	mov    rdi,rbx
  4268d2:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4268d7:	mov    rax,QWORD PTR [rbx+0x28]
  4268db:	jmp    4267c7 <flatcc_json_printer_int64_enum_struct_field@@Base+0x57>
  4268e0:	mov    rdx,rbp
  4268e3:	mov    esi,0x20
  4268e8:	call   4061c0 <memset@plt>
  4268ed:	mov    rax,QWORD PTR [rbx+0x28]
  4268f1:	add    rax,rbp
  4268f4:	mov    QWORD PTR [rbx+0x28],rax
  4268f8:	jmp    4267c7 <flatcc_json_printer_int64_enum_struct_field@@Base+0x57>
  4268fd:	nop    DWORD PTR [rax]

0000000000426900 <flatcc_json_printer_bool_enum_struct_field@@Base>:
  426900:	endbr64 
  426904:	push   r15
  426906:	mov    r15,r8
  426909:	push   r14
  42690b:	push   r13
  42690d:	push   r12
  42690f:	push   rbp
  426910:	push   rbx
  426911:	mov    rbx,rdi
  426914:	sub    rsp,0x8
  426918:	mov    r13,QWORD PTR [rsp+0x40]
  42691d:	movzx  r12d,BYTE PTR [rdx+rcx*1]
  426922:	mov    rax,QWORD PTR [rdi+0x28]
  426926:	test   esi,esi
  426928:	je     426939 <flatcc_json_printer_bool_enum_struct_field@@Base+0x39>
  42692a:	lea    rdx,[rax+0x1]
  42692e:	mov    QWORD PTR [rdi+0x28],rdx
  426932:	mov    BYTE PTR [rax],0x2c
  426935:	mov    rax,QWORD PTR [rdi+0x28]
  426939:	cmp    BYTE PTR [rbx+0x31],0x0
  42693d:	movsxd r14,r9d
  426940:	jne    426a10 <flatcc_json_printer_bool_enum_struct_field@@Base+0x110>
  426946:	cmp    QWORD PTR [rbx+0x20],rax
  42694a:	ja     426958 <flatcc_json_printer_bool_enum_struct_field@@Base+0x58>
  42694c:	xor    esi,esi
  42694e:	mov    rdi,rbx
  426951:	call   QWORD PTR [rbx+0x48]
  426954:	mov    rax,QWORD PTR [rbx+0x28]
  426958:	mov    BYTE PTR [rax],0x22
  42695b:	xor    edi,edi
  42695d:	mov    rdx,r14
  426960:	cmp    BYTE PTR [rbx+0x32],0x0
  426964:	sete   dil
  426968:	add    rdi,QWORD PTR [rbx+0x28]
  42696c:	lea    rax,[rdi+r14*1]
  426970:	mov    QWORD PTR [rbx+0x28],rdi
  426974:	mov    rsi,r15
  426977:	cmp    QWORD PTR [rbx+0x20],rax
  42697b:	ja     4269e0 <flatcc_json_printer_bool_enum_struct_field@@Base+0xe0>
  42697d:	mov    rdi,rbx
  426980:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  426985:	mov    r14,QWORD PTR [rbx+0x28]
  426989:	mov    BYTE PTR [r14],0x22
  42698d:	xor    eax,eax
  42698f:	cmp    BYTE PTR [rbx+0x32],0x0
  426993:	sete   al
  426996:	add    rax,QWORD PTR [rbx+0x28]
  42699a:	lea    rdx,[rax+0x1]
  42699e:	mov    QWORD PTR [rbx+0x28],rdx
  4269a2:	mov    BYTE PTR [rax],0x3a
  4269a5:	xor    esi,esi
  4269a7:	mov    rax,QWORD PTR [rbx+0x28]
  4269ab:	mov    BYTE PTR [rax],0x20
  4269ae:	cmp    BYTE PTR [rbx+0x31],0x0
  4269b2:	setne  sil
  4269b6:	add    rsi,QWORD PTR [rbx+0x28]
  4269ba:	cmp    BYTE PTR [rbx+0x33],0x0
  4269be:	mov    QWORD PTR [rbx+0x28],rsi
  4269c2:	jne    4269f0 <flatcc_json_printer_bool_enum_struct_field@@Base+0xf0>
  4269c4:	add    rsp,0x8
  4269c8:	mov    rdi,rbx
  4269cb:	pop    rbx
  4269cc:	pop    rbp
  4269cd:	movzx  esi,r12b
  4269d1:	pop    r12
  4269d3:	mov    rax,r13
  4269d6:	pop    r13
  4269d8:	pop    r14
  4269da:	pop    r15
  4269dc:	jmp    rax
  4269de:	xchg   ax,ax
  4269e0:	call   406210 <memcpy@plt>
  4269e5:	add    r14,QWORD PTR [rbx+0x28]
  4269e9:	mov    QWORD PTR [rbx+0x28],r14
  4269ed:	jmp    426989 <flatcc_json_printer_bool_enum_struct_field@@Base+0x89>
  4269ef:	nop
  4269f0:	movzx  edi,r12b
  4269f4:	call   421320 <flatcc_json_parser_struct_as_root@@Base+0xd50>
  4269f9:	cdqe   
  4269fb:	add    QWORD PTR [rbx+0x28],rax
  4269ff:	add    rsp,0x8
  426a03:	pop    rbx
  426a04:	pop    rbp
  426a05:	pop    r12
  426a07:	pop    r13
  426a09:	pop    r14
  426a0b:	pop    r15
  426a0d:	ret    
  426a0e:	xchg   ax,ax
  426a10:	lea    rdx,[rax+0x1]
  426a14:	mov    QWORD PTR [rbx+0x28],rdx
  426a18:	mov    BYTE PTR [rax],0xa
  426a1b:	movzx  eax,BYTE PTR [rbx+0x31]
  426a1f:	mov    rdi,QWORD PTR [rbx+0x28]
  426a23:	imul   eax,DWORD PTR [rbx+0x38]
  426a27:	movsxd rbp,eax
  426a2a:	lea    rax,[rdi+rbp*1]
  426a2e:	cmp    QWORD PTR [rbx+0x20],rax
  426a32:	jae    426a50 <flatcc_json_printer_bool_enum_struct_field@@Base+0x150>
  426a34:	mov    rsi,rbp
  426a37:	mov    rdi,rbx
  426a3a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426a3f:	mov    rax,QWORD PTR [rbx+0x28]
  426a43:	jmp    426958 <flatcc_json_printer_bool_enum_struct_field@@Base+0x58>
  426a48:	nop    DWORD PTR [rax+rax*1+0x0]
  426a50:	mov    rdx,rbp
  426a53:	mov    esi,0x20
  426a58:	call   4061c0 <memset@plt>
  426a5d:	mov    rax,QWORD PTR [rbx+0x28]
  426a61:	add    rax,rbp
  426a64:	mov    QWORD PTR [rbx+0x28],rax
  426a68:	jmp    426958 <flatcc_json_printer_bool_enum_struct_field@@Base+0x58>
  426a6d:	nop    DWORD PTR [rax]

0000000000426a70 <flatcc_json_printer_uint8_vector_field@@Base>:
  426a70:	endbr64 
  426a74:	lea    eax,[rdx+rdx*1+0x4]
  426a78:	cmp    eax,DWORD PTR [rsi+0x10]
  426a7b:	jge    426c50 <flatcc_json_printer_uint8_vector_field@@Base+0x1e0>
  426a81:	push   r13
  426a83:	push   r12
  426a85:	push   rbp
  426a86:	push   rbx
  426a87:	sub    rsp,0x8
  426a8b:	mov    rdx,QWORD PTR [rsi+0x8]
  426a8f:	movzx  ebp,WORD PTR [rdx+rax*1]
  426a93:	test   bp,bp
  426a96:	je     426be1 <flatcc_json_printer_uint8_vector_field@@Base+0x171>
  426a9c:	add    rbp,QWORD PTR [rsi]
  426a9f:	je     426be1 <flatcc_json_printer_uint8_vector_field@@Base+0x171>
  426aa5:	mov    eax,DWORD PTR [rsi+0x18]
  426aa8:	lea    edx,[rax+0x1]
  426aab:	mov    DWORD PTR [rsi+0x18],edx
  426aae:	test   eax,eax
  426ab0:	je     426ac1 <flatcc_json_printer_uint8_vector_field@@Base+0x51>
  426ab2:	mov    rax,QWORD PTR [rdi+0x28]
  426ab6:	lea    rdx,[rax+0x1]
  426aba:	mov    QWORD PTR [rdi+0x28],rdx
  426abe:	mov    BYTE PTR [rax],0x2c
  426ac1:	mov    eax,DWORD PTR [rbp+0x0]
  426ac4:	mov    rbx,rdi
  426ac7:	add    rbp,rax
  426aca:	movsxd rdx,r8d
  426acd:	mov    rsi,rcx
  426ad0:	mov    r12d,DWORD PTR [rbp+0x0]
  426ad4:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  426ad9:	mov    rax,QWORD PTR [rbx+0x28]
  426add:	inc    DWORD PTR [rbx+0x38]
  426ae0:	lea    rdx,[rax+0x1]
  426ae4:	mov    QWORD PTR [rbx+0x28],rdx
  426ae8:	mov    BYTE PTR [rax],0x5b
  426aeb:	test   r12d,r12d
  426aee:	je     426bc8 <flatcc_json_printer_uint8_vector_field@@Base+0x158>
  426af4:	cmp    BYTE PTR [rbx+0x31],0x0
  426af8:	mov    rsi,QWORD PTR [rbx+0x28]
  426afc:	jne    426bf0 <flatcc_json_printer_uint8_vector_field@@Base+0x180>
  426b02:	cmp    QWORD PTR [rbx+0x20],rsi
  426b06:	ja     426b14 <flatcc_json_printer_uint8_vector_field@@Base+0xa4>
  426b08:	xor    esi,esi
  426b0a:	mov    rdi,rbx
  426b0d:	call   QWORD PTR [rbx+0x48]
  426b10:	mov    rsi,QWORD PTR [rbx+0x28]
  426b14:	movzx  edi,BYTE PTR [rbp+0x4]
  426b18:	lea    r13,[rbp+0x5]
  426b1c:	call   421350 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  426b21:	cdqe   
  426b23:	add    rax,QWORD PTR [rbx+0x28]
  426b27:	mov    QWORD PTR [rbx+0x28],rax
  426b2b:	lea    edx,[r12-0x2]
  426b30:	cmp    r12d,0x1
  426b34:	je     426bcc <flatcc_json_printer_uint8_vector_field@@Base+0x15c>
  426b3a:	lea    rbp,[rbp+rdx*1+0x6]
  426b3f:	jmp    426b7a <flatcc_json_printer_uint8_vector_field@@Base+0x10a>
  426b41:	nop    DWORD PTR [rax+0x0]
  426b48:	mov    rsi,QWORD PTR [rbx+0x28]
  426b4c:	cmp    rsi,QWORD PTR [rbx+0x20]
  426b50:	jb     426b5e <flatcc_json_printer_uint8_vector_field@@Base+0xee>
  426b52:	xor    esi,esi
  426b54:	mov    rdi,rbx
  426b57:	call   QWORD PTR [rbx+0x48]
  426b5a:	mov    rsi,QWORD PTR [rbx+0x28]
  426b5e:	movzx  edi,BYTE PTR [r13+0x0]
  426b63:	inc    r13
  426b66:	call   421350 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  426b6b:	cdqe   
  426b6d:	add    rax,QWORD PTR [rbx+0x28]
  426b71:	mov    QWORD PTR [rbx+0x28],rax
  426b75:	cmp    r13,rbp
  426b78:	je     426bcc <flatcc_json_printer_uint8_vector_field@@Base+0x15c>
  426b7a:	lea    rdx,[rax+0x1]
  426b7e:	mov    QWORD PTR [rbx+0x28],rdx
  426b82:	mov    BYTE PTR [rax],0x2c
  426b85:	cmp    BYTE PTR [rbx+0x31],0x0
  426b89:	je     426b48 <flatcc_json_printer_uint8_vector_field@@Base+0xd8>
  426b8b:	mov    rax,QWORD PTR [rbx+0x28]
  426b8f:	lea    rdx,[rax+0x1]
  426b93:	mov    QWORD PTR [rbx+0x28],rdx
  426b97:	mov    BYTE PTR [rax],0xa
  426b9a:	movzx  esi,BYTE PTR [rbx+0x31]
  426b9e:	mov    rdi,QWORD PTR [rbx+0x28]
  426ba2:	imul   esi,DWORD PTR [rbx+0x38]
  426ba6:	movsxd r12,esi
  426ba9:	lea    rax,[rdi+r12*1]
  426bad:	cmp    QWORD PTR [rbx+0x20],rax
  426bb1:	jae    426c30 <flatcc_json_printer_uint8_vector_field@@Base+0x1c0>
  426bb3:	mov    rsi,r12
  426bb6:	mov    rdi,rbx
  426bb9:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426bbe:	mov    rsi,QWORD PTR [rbx+0x28]
  426bc2:	jmp    426b5e <flatcc_json_printer_uint8_vector_field@@Base+0xee>
  426bc4:	nop    DWORD PTR [rax+0x0]
  426bc8:	mov    rax,QWORD PTR [rbx+0x28]
  426bcc:	cmp    BYTE PTR [rbx+0x31],0x0
  426bd0:	lea    rdx,[rax+0x1]
  426bd4:	jne    426c58 <flatcc_json_printer_uint8_vector_field@@Base+0x1e8>
  426bda:	mov    QWORD PTR [rbx+0x28],rdx
  426bde:	mov    BYTE PTR [rax],0x5d
  426be1:	add    rsp,0x8
  426be5:	pop    rbx
  426be6:	pop    rbp
  426be7:	pop    r12
  426be9:	pop    r13
  426beb:	ret    
  426bec:	nop    DWORD PTR [rax+0x0]
  426bf0:	lea    rax,[rsi+0x1]
  426bf4:	mov    QWORD PTR [rbx+0x28],rax
  426bf8:	mov    BYTE PTR [rsi],0xa
  426bfb:	movzx  esi,BYTE PTR [rbx+0x31]
  426bff:	mov    rdi,QWORD PTR [rbx+0x28]
  426c03:	imul   esi,DWORD PTR [rbx+0x38]
  426c07:	movsxd r13,esi
  426c0a:	lea    rax,[rdi+r13*1]
  426c0e:	cmp    QWORD PTR [rbx+0x20],rax
  426c12:	jae    426cbd <flatcc_json_printer_uint8_vector_field@@Base+0x24d>
  426c18:	mov    rsi,r13
  426c1b:	mov    rdi,rbx
  426c1e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426c23:	mov    rsi,QWORD PTR [rbx+0x28]
  426c27:	jmp    426b14 <flatcc_json_printer_uint8_vector_field@@Base+0xa4>
  426c2c:	nop    DWORD PTR [rax+0x0]
  426c30:	mov    esi,0x20
  426c35:	mov    rdx,r12
  426c38:	call   4061c0 <memset@plt>
  426c3d:	mov    rsi,QWORD PTR [rbx+0x28]
  426c41:	add    rsi,r12
  426c44:	mov    QWORD PTR [rbx+0x28],rsi
  426c48:	jmp    426b5e <flatcc_json_printer_uint8_vector_field@@Base+0xee>
  426c4d:	nop    DWORD PTR [rax]
  426c50:	ret    
  426c51:	nop    DWORD PTR [rax+0x0]
  426c58:	mov    QWORD PTR [rbx+0x28],rdx
  426c5c:	mov    BYTE PTR [rax],0xa
  426c5f:	mov    eax,DWORD PTR [rbx+0x38]
  426c62:	mov    rdi,QWORD PTR [rbx+0x28]
  426c66:	lea    ebp,[rax-0x1]
  426c69:	movzx  eax,BYTE PTR [rbx+0x31]
  426c6d:	mov    DWORD PTR [rbx+0x38],ebp
  426c70:	imul   eax,ebp
  426c73:	movsxd rbp,eax
  426c76:	lea    rax,[rdi+rbp*1]
  426c7a:	cmp    QWORD PTR [rbx+0x20],rax
  426c7e:	jae    426ca0 <flatcc_json_printer_uint8_vector_field@@Base+0x230>
  426c80:	mov    rsi,rbp
  426c83:	mov    rdi,rbx
  426c86:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426c8b:	mov    rax,QWORD PTR [rbx+0x28]
  426c8f:	lea    rdx,[rax+0x1]
  426c93:	jmp    426bda <flatcc_json_printer_uint8_vector_field@@Base+0x16a>
  426c98:	nop    DWORD PTR [rax+rax*1+0x0]
  426ca0:	mov    rdx,rbp
  426ca3:	mov    esi,0x20
  426ca8:	call   4061c0 <memset@plt>
  426cad:	mov    rax,QWORD PTR [rbx+0x28]
  426cb1:	add    rax,rbp
  426cb4:	lea    rdx,[rax+0x1]
  426cb8:	jmp    426bda <flatcc_json_printer_uint8_vector_field@@Base+0x16a>
  426cbd:	mov    esi,0x20
  426cc2:	mov    rdx,r13
  426cc5:	call   4061c0 <memset@plt>
  426cca:	mov    rsi,QWORD PTR [rbx+0x28]
  426cce:	add    rsi,r13
  426cd1:	mov    QWORD PTR [rbx+0x28],rsi
  426cd5:	jmp    426b14 <flatcc_json_printer_uint8_vector_field@@Base+0xa4>
  426cda:	nop    WORD PTR [rax+rax*1+0x0]

0000000000426ce0 <flatcc_json_printer_utype_vector_field@@Base>:
  426ce0:	endbr64 
  426ce4:	jmp    426a70 <flatcc_json_printer_uint8_vector_field@@Base>
  426ce9:	nop    DWORD PTR [rax+0x0]

0000000000426cf0 <flatcc_json_printer_uint16_vector_field@@Base>:
  426cf0:	endbr64 
  426cf4:	lea    eax,[rdx+rdx*1+0x4]
  426cf8:	cmp    eax,DWORD PTR [rsi+0x10]
  426cfb:	jge    426ed0 <flatcc_json_printer_uint16_vector_field@@Base+0x1e0>
  426d01:	push   r13
  426d03:	push   r12
  426d05:	push   rbp
  426d06:	push   rbx
  426d07:	sub    rsp,0x8
  426d0b:	mov    rdx,QWORD PTR [rsi+0x8]
  426d0f:	movzx  ebp,WORD PTR [rdx+rax*1]
  426d13:	test   bp,bp
  426d16:	je     426e61 <flatcc_json_printer_uint16_vector_field@@Base+0x171>
  426d1c:	add    rbp,QWORD PTR [rsi]
  426d1f:	je     426e61 <flatcc_json_printer_uint16_vector_field@@Base+0x171>
  426d25:	mov    eax,DWORD PTR [rsi+0x18]
  426d28:	lea    edx,[rax+0x1]
  426d2b:	mov    DWORD PTR [rsi+0x18],edx
  426d2e:	test   eax,eax
  426d30:	je     426d41 <flatcc_json_printer_uint16_vector_field@@Base+0x51>
  426d32:	mov    rax,QWORD PTR [rdi+0x28]
  426d36:	lea    rdx,[rax+0x1]
  426d3a:	mov    QWORD PTR [rdi+0x28],rdx
  426d3e:	mov    BYTE PTR [rax],0x2c
  426d41:	mov    eax,DWORD PTR [rbp+0x0]
  426d44:	mov    rbx,rdi
  426d47:	add    rbp,rax
  426d4a:	movsxd rdx,r8d
  426d4d:	mov    rsi,rcx
  426d50:	mov    r12d,DWORD PTR [rbp+0x0]
  426d54:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  426d59:	mov    rax,QWORD PTR [rbx+0x28]
  426d5d:	inc    DWORD PTR [rbx+0x38]
  426d60:	lea    rdx,[rax+0x1]
  426d64:	mov    QWORD PTR [rbx+0x28],rdx
  426d68:	mov    BYTE PTR [rax],0x5b
  426d6b:	test   r12d,r12d
  426d6e:	je     426e48 <flatcc_json_printer_uint16_vector_field@@Base+0x158>
  426d74:	cmp    BYTE PTR [rbx+0x31],0x0
  426d78:	mov    rsi,QWORD PTR [rbx+0x28]
  426d7c:	jne    426e70 <flatcc_json_printer_uint16_vector_field@@Base+0x180>
  426d82:	cmp    QWORD PTR [rbx+0x20],rsi
  426d86:	ja     426d94 <flatcc_json_printer_uint16_vector_field@@Base+0xa4>
  426d88:	xor    esi,esi
  426d8a:	mov    rdi,rbx
  426d8d:	call   QWORD PTR [rbx+0x48]
  426d90:	mov    rsi,QWORD PTR [rbx+0x28]
  426d94:	movzx  edi,WORD PTR [rbp+0x4]
  426d98:	lea    r13,[rbp+0x6]
  426d9c:	call   4205e0 <flatcc_json_parser_struct_as_root@@Base+0x10>
  426da1:	cdqe   
  426da3:	add    rax,QWORD PTR [rbx+0x28]
  426da7:	mov    QWORD PTR [rbx+0x28],rax
  426dab:	lea    edx,[r12-0x2]
  426db0:	cmp    r12d,0x1
  426db4:	je     426e4c <flatcc_json_printer_uint16_vector_field@@Base+0x15c>
  426dba:	lea    rbp,[rbp+rdx*2+0x8]
  426dbf:	jmp    426dfb <flatcc_json_printer_uint16_vector_field@@Base+0x10b>
  426dc1:	nop    DWORD PTR [rax+0x0]
  426dc8:	mov    rsi,QWORD PTR [rbx+0x28]
  426dcc:	cmp    rsi,QWORD PTR [rbx+0x20]
  426dd0:	jb     426dde <flatcc_json_printer_uint16_vector_field@@Base+0xee>
  426dd2:	xor    esi,esi
  426dd4:	mov    rdi,rbx
  426dd7:	call   QWORD PTR [rbx+0x48]
  426dda:	mov    rsi,QWORD PTR [rbx+0x28]
  426dde:	movzx  edi,WORD PTR [r13+0x0]
  426de3:	add    r13,0x2
  426de7:	call   4205e0 <flatcc_json_parser_struct_as_root@@Base+0x10>
  426dec:	cdqe   
  426dee:	add    rax,QWORD PTR [rbx+0x28]
  426df2:	mov    QWORD PTR [rbx+0x28],rax
  426df6:	cmp    r13,rbp
  426df9:	je     426e4c <flatcc_json_printer_uint16_vector_field@@Base+0x15c>
  426dfb:	lea    rdx,[rax+0x1]
  426dff:	mov    QWORD PTR [rbx+0x28],rdx
  426e03:	mov    BYTE PTR [rax],0x2c
  426e06:	cmp    BYTE PTR [rbx+0x31],0x0
  426e0a:	je     426dc8 <flatcc_json_printer_uint16_vector_field@@Base+0xd8>
  426e0c:	mov    rax,QWORD PTR [rbx+0x28]
  426e10:	lea    rdx,[rax+0x1]
  426e14:	mov    QWORD PTR [rbx+0x28],rdx
  426e18:	mov    BYTE PTR [rax],0xa
  426e1b:	movzx  esi,BYTE PTR [rbx+0x31]
  426e1f:	mov    rdi,QWORD PTR [rbx+0x28]
  426e23:	imul   esi,DWORD PTR [rbx+0x38]
  426e27:	movsxd r12,esi
  426e2a:	lea    rax,[rdi+r12*1]
  426e2e:	cmp    QWORD PTR [rbx+0x20],rax
  426e32:	jae    426eb0 <flatcc_json_printer_uint16_vector_field@@Base+0x1c0>
  426e34:	mov    rsi,r12
  426e37:	mov    rdi,rbx
  426e3a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426e3f:	mov    rsi,QWORD PTR [rbx+0x28]
  426e43:	jmp    426dde <flatcc_json_printer_uint16_vector_field@@Base+0xee>
  426e45:	nop    DWORD PTR [rax]
  426e48:	mov    rax,QWORD PTR [rbx+0x28]
  426e4c:	cmp    BYTE PTR [rbx+0x31],0x0
  426e50:	lea    rdx,[rax+0x1]
  426e54:	jne    426ed8 <flatcc_json_printer_uint16_vector_field@@Base+0x1e8>
  426e5a:	mov    QWORD PTR [rbx+0x28],rdx
  426e5e:	mov    BYTE PTR [rax],0x5d
  426e61:	add    rsp,0x8
  426e65:	pop    rbx
  426e66:	pop    rbp
  426e67:	pop    r12
  426e69:	pop    r13
  426e6b:	ret    
  426e6c:	nop    DWORD PTR [rax+0x0]
  426e70:	lea    rax,[rsi+0x1]
  426e74:	mov    QWORD PTR [rbx+0x28],rax
  426e78:	mov    BYTE PTR [rsi],0xa
  426e7b:	movzx  esi,BYTE PTR [rbx+0x31]
  426e7f:	mov    rdi,QWORD PTR [rbx+0x28]
  426e83:	imul   esi,DWORD PTR [rbx+0x38]
  426e87:	movsxd r13,esi
  426e8a:	lea    rax,[rdi+r13*1]
  426e8e:	cmp    QWORD PTR [rbx+0x20],rax
  426e92:	jae    426f3d <flatcc_json_printer_uint16_vector_field@@Base+0x24d>
  426e98:	mov    rsi,r13
  426e9b:	mov    rdi,rbx
  426e9e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426ea3:	mov    rsi,QWORD PTR [rbx+0x28]
  426ea7:	jmp    426d94 <flatcc_json_printer_uint16_vector_field@@Base+0xa4>
  426eac:	nop    DWORD PTR [rax+0x0]
  426eb0:	mov    esi,0x20
  426eb5:	mov    rdx,r12
  426eb8:	call   4061c0 <memset@plt>
  426ebd:	mov    rsi,QWORD PTR [rbx+0x28]
  426ec1:	add    rsi,r12
  426ec4:	mov    QWORD PTR [rbx+0x28],rsi
  426ec8:	jmp    426dde <flatcc_json_printer_uint16_vector_field@@Base+0xee>
  426ecd:	nop    DWORD PTR [rax]
  426ed0:	ret    
  426ed1:	nop    DWORD PTR [rax+0x0]
  426ed8:	mov    QWORD PTR [rbx+0x28],rdx
  426edc:	mov    BYTE PTR [rax],0xa
  426edf:	mov    eax,DWORD PTR [rbx+0x38]
  426ee2:	mov    rdi,QWORD PTR [rbx+0x28]
  426ee6:	lea    ebp,[rax-0x1]
  426ee9:	movzx  eax,BYTE PTR [rbx+0x31]
  426eed:	mov    DWORD PTR [rbx+0x38],ebp
  426ef0:	imul   eax,ebp
  426ef3:	movsxd rbp,eax
  426ef6:	lea    rax,[rdi+rbp*1]
  426efa:	cmp    QWORD PTR [rbx+0x20],rax
  426efe:	jae    426f20 <flatcc_json_printer_uint16_vector_field@@Base+0x230>
  426f00:	mov    rsi,rbp
  426f03:	mov    rdi,rbx
  426f06:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  426f0b:	mov    rax,QWORD PTR [rbx+0x28]
  426f0f:	lea    rdx,[rax+0x1]
  426f13:	jmp    426e5a <flatcc_json_printer_uint16_vector_field@@Base+0x16a>
  426f18:	nop    DWORD PTR [rax+rax*1+0x0]
  426f20:	mov    rdx,rbp
  426f23:	mov    esi,0x20
  426f28:	call   4061c0 <memset@plt>
  426f2d:	mov    rax,QWORD PTR [rbx+0x28]
  426f31:	add    rax,rbp
  426f34:	lea    rdx,[rax+0x1]
  426f38:	jmp    426e5a <flatcc_json_printer_uint16_vector_field@@Base+0x16a>
  426f3d:	mov    esi,0x20
  426f42:	mov    rdx,r13
  426f45:	call   4061c0 <memset@plt>
  426f4a:	mov    rsi,QWORD PTR [rbx+0x28]
  426f4e:	add    rsi,r13
  426f51:	mov    QWORD PTR [rbx+0x28],rsi
  426f55:	jmp    426d94 <flatcc_json_printer_uint16_vector_field@@Base+0xa4>
  426f5a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000426f60 <flatcc_json_printer_uint32_vector_field@@Base>:
  426f60:	endbr64 
  426f64:	lea    eax,[rdx+rdx*1+0x4]
  426f68:	cmp    eax,DWORD PTR [rsi+0x10]
  426f6b:	jge    4270b8 <flatcc_json_printer_uint32_vector_field@@Base+0x158>
  426f71:	mov    rdx,QWORD PTR [rsi+0x8]
  426f75:	movzx  eax,WORD PTR [rdx+rax*1]
  426f79:	test   ax,ax
  426f7c:	je     4270b8 <flatcc_json_printer_uint32_vector_field@@Base+0x158>
  426f82:	add    rax,QWORD PTR [rsi]
  426f85:	je     4270b8 <flatcc_json_printer_uint32_vector_field@@Base+0x158>
  426f8b:	push   r13
  426f8d:	push   r12
  426f8f:	push   rbp
  426f90:	push   rbx
  426f91:	sub    rsp,0x8
  426f95:	mov    edx,DWORD PTR [rsi+0x18]
  426f98:	lea    r9d,[rdx+0x1]
  426f9c:	mov    DWORD PTR [rsi+0x18],r9d
  426fa0:	test   edx,edx
  426fa2:	je     426fb3 <flatcc_json_printer_uint32_vector_field@@Base+0x53>
  426fa4:	mov    rdx,QWORD PTR [rdi+0x28]
  426fa8:	lea    rsi,[rdx+0x1]
  426fac:	mov    QWORD PTR [rdi+0x28],rsi
  426fb0:	mov    BYTE PTR [rdx],0x2c
  426fb3:	mov    r12d,DWORD PTR [rax]
  426fb6:	mov    rbx,rdi
  426fb9:	add    r12,rax
  426fbc:	movsxd rdx,r8d
  426fbf:	mov    rsi,rcx
  426fc2:	mov    ebp,DWORD PTR [r12]
  426fc6:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  426fcb:	mov    rax,QWORD PTR [rbx+0x28]
  426fcf:	inc    DWORD PTR [rbx+0x38]
  426fd2:	lea    rdx,[rax+0x1]
  426fd6:	mov    QWORD PTR [rbx+0x28],rdx
  426fda:	mov    BYTE PTR [rax],0x5b
  426fdd:	test   ebp,ebp
  426fdf:	je     4270c0 <flatcc_json_printer_uint32_vector_field@@Base+0x160>
  426fe5:	cmp    BYTE PTR [rbx+0x31],0x0
  426fe9:	mov    rsi,QWORD PTR [rbx+0x28]
  426fed:	jne    4270e0 <flatcc_json_printer_uint32_vector_field@@Base+0x180>
  426ff3:	cmp    QWORD PTR [rbx+0x20],rsi
  426ff7:	ja     427005 <flatcc_json_printer_uint32_vector_field@@Base+0xa5>
  426ff9:	xor    esi,esi
  426ffb:	mov    rdi,rbx
  426ffe:	call   QWORD PTR [rbx+0x48]
  427001:	mov    rsi,QWORD PTR [rbx+0x28]
  427005:	mov    edi,DWORD PTR [r12+0x4]
  42700a:	lea    r13,[r12+0x8]
  42700f:	call   420710 <flatcc_json_parser_struct_as_root@@Base+0x140>
  427014:	cdqe   
  427016:	add    rax,QWORD PTR [rbx+0x28]
  42701a:	mov    QWORD PTR [rbx+0x28],rax
  42701e:	lea    edx,[rbp-0x2]
  427021:	cmp    ebp,0x1
  427024:	je     4270c4 <flatcc_json_printer_uint32_vector_field@@Base+0x164>
  42702a:	lea    rbp,[r12+rdx*4+0xc]
  42702f:	jmp    42706a <flatcc_json_printer_uint32_vector_field@@Base+0x10a>
  427031:	nop    DWORD PTR [rax+0x0]
  427038:	mov    rsi,QWORD PTR [rbx+0x28]
  42703c:	cmp    rsi,QWORD PTR [rbx+0x20]
  427040:	jb     42704e <flatcc_json_printer_uint32_vector_field@@Base+0xee>
  427042:	xor    esi,esi
  427044:	mov    rdi,rbx
  427047:	call   QWORD PTR [rbx+0x48]
  42704a:	mov    rsi,QWORD PTR [rbx+0x28]
  42704e:	mov    edi,DWORD PTR [r13+0x0]
  427052:	add    r13,0x4
  427056:	call   420710 <flatcc_json_parser_struct_as_root@@Base+0x140>
  42705b:	cdqe   
  42705d:	add    rax,QWORD PTR [rbx+0x28]
  427061:	mov    QWORD PTR [rbx+0x28],rax
  427065:	cmp    r13,rbp
  427068:	je     4270c4 <flatcc_json_printer_uint32_vector_field@@Base+0x164>
  42706a:	lea    rdx,[rax+0x1]
  42706e:	mov    QWORD PTR [rbx+0x28],rdx
  427072:	mov    BYTE PTR [rax],0x2c
  427075:	cmp    BYTE PTR [rbx+0x31],0x0
  427079:	je     427038 <flatcc_json_printer_uint32_vector_field@@Base+0xd8>
  42707b:	mov    rax,QWORD PTR [rbx+0x28]
  42707f:	lea    rdx,[rax+0x1]
  427083:	mov    QWORD PTR [rbx+0x28],rdx
  427087:	mov    BYTE PTR [rax],0xa
  42708a:	movzx  esi,BYTE PTR [rbx+0x31]
  42708e:	mov    rdi,QWORD PTR [rbx+0x28]
  427092:	imul   esi,DWORD PTR [rbx+0x38]
  427096:	movsxd r12,esi
  427099:	lea    rax,[rdi+r12*1]
  42709d:	cmp    QWORD PTR [rbx+0x20],rax
  4270a1:	jae    427120 <flatcc_json_printer_uint32_vector_field@@Base+0x1c0>
  4270a3:	mov    rsi,r12
  4270a6:	mov    rdi,rbx
  4270a9:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4270ae:	mov    rsi,QWORD PTR [rbx+0x28]
  4270b2:	jmp    42704e <flatcc_json_printer_uint32_vector_field@@Base+0xee>
  4270b4:	nop    DWORD PTR [rax+0x0]
  4270b8:	ret    
  4270b9:	nop    DWORD PTR [rax+0x0]
  4270c0:	mov    rax,QWORD PTR [rbx+0x28]
  4270c4:	cmp    BYTE PTR [rbx+0x31],0x0
  4270c8:	lea    rdx,[rax+0x1]
  4270cc:	jne    427140 <flatcc_json_printer_uint32_vector_field@@Base+0x1e0>
  4270ce:	mov    QWORD PTR [rbx+0x28],rdx
  4270d2:	mov    BYTE PTR [rax],0x5d
  4270d5:	add    rsp,0x8
  4270d9:	pop    rbx
  4270da:	pop    rbp
  4270db:	pop    r12
  4270dd:	pop    r13
  4270df:	ret    
  4270e0:	lea    rax,[rsi+0x1]
  4270e4:	mov    QWORD PTR [rbx+0x28],rax
  4270e8:	mov    BYTE PTR [rsi],0xa
  4270eb:	movzx  esi,BYTE PTR [rbx+0x31]
  4270ef:	mov    rdi,QWORD PTR [rbx+0x28]
  4270f3:	imul   esi,DWORD PTR [rbx+0x38]
  4270f7:	movsxd r13,esi
  4270fa:	lea    rax,[rdi+r13*1]
  4270fe:	cmp    QWORD PTR [rbx+0x20],rax
  427102:	jae    42719d <flatcc_json_printer_uint32_vector_field@@Base+0x23d>
  427108:	mov    rsi,r13
  42710b:	mov    rdi,rbx
  42710e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427113:	mov    rsi,QWORD PTR [rbx+0x28]
  427117:	jmp    427005 <flatcc_json_printer_uint32_vector_field@@Base+0xa5>
  42711c:	nop    DWORD PTR [rax+0x0]
  427120:	mov    esi,0x20
  427125:	mov    rdx,r12
  427128:	call   4061c0 <memset@plt>
  42712d:	mov    rsi,QWORD PTR [rbx+0x28]
  427131:	add    rsi,r12
  427134:	mov    QWORD PTR [rbx+0x28],rsi
  427138:	jmp    42704e <flatcc_json_printer_uint32_vector_field@@Base+0xee>
  42713d:	nop    DWORD PTR [rax]
  427140:	mov    QWORD PTR [rbx+0x28],rdx
  427144:	mov    BYTE PTR [rax],0xa
  427147:	mov    eax,DWORD PTR [rbx+0x38]
  42714a:	mov    rdi,QWORD PTR [rbx+0x28]
  42714e:	lea    ebp,[rax-0x1]
  427151:	movzx  eax,BYTE PTR [rbx+0x31]
  427155:	mov    DWORD PTR [rbx+0x38],ebp
  427158:	imul   eax,ebp
  42715b:	movsxd rbp,eax
  42715e:	lea    rax,[rdi+rbp*1]
  427162:	cmp    QWORD PTR [rbx+0x20],rax
  427166:	jae    427180 <flatcc_json_printer_uint32_vector_field@@Base+0x220>
  427168:	mov    rsi,rbp
  42716b:	mov    rdi,rbx
  42716e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427173:	mov    rax,QWORD PTR [rbx+0x28]
  427177:	lea    rdx,[rax+0x1]
  42717b:	jmp    4270ce <flatcc_json_printer_uint32_vector_field@@Base+0x16e>
  427180:	mov    rdx,rbp
  427183:	mov    esi,0x20
  427188:	call   4061c0 <memset@plt>
  42718d:	mov    rax,QWORD PTR [rbx+0x28]
  427191:	add    rax,rbp
  427194:	lea    rdx,[rax+0x1]
  427198:	jmp    4270ce <flatcc_json_printer_uint32_vector_field@@Base+0x16e>
  42719d:	mov    esi,0x20
  4271a2:	mov    rdx,r13
  4271a5:	call   4061c0 <memset@plt>
  4271aa:	mov    rsi,QWORD PTR [rbx+0x28]
  4271ae:	add    rsi,r13
  4271b1:	mov    QWORD PTR [rbx+0x28],rsi
  4271b5:	jmp    427005 <flatcc_json_printer_uint32_vector_field@@Base+0xa5>
  4271ba:	nop    WORD PTR [rax+rax*1+0x0]

00000000004271c0 <flatcc_json_printer_uint64_vector_field@@Base>:
  4271c0:	endbr64 
  4271c4:	lea    eax,[rdx+rdx*1+0x4]
  4271c8:	cmp    eax,DWORD PTR [rsi+0x10]
  4271cb:	jge    427318 <flatcc_json_printer_uint64_vector_field@@Base+0x158>
  4271d1:	mov    rdx,QWORD PTR [rsi+0x8]
  4271d5:	movzx  eax,WORD PTR [rdx+rax*1]
  4271d9:	test   ax,ax
  4271dc:	je     427318 <flatcc_json_printer_uint64_vector_field@@Base+0x158>
  4271e2:	add    rax,QWORD PTR [rsi]
  4271e5:	je     427318 <flatcc_json_printer_uint64_vector_field@@Base+0x158>
  4271eb:	push   r13
  4271ed:	push   r12
  4271ef:	push   rbp
  4271f0:	push   rbx
  4271f1:	sub    rsp,0x8
  4271f5:	mov    edx,DWORD PTR [rsi+0x18]
  4271f8:	lea    r9d,[rdx+0x1]
  4271fc:	mov    DWORD PTR [rsi+0x18],r9d
  427200:	test   edx,edx
  427202:	je     427213 <flatcc_json_printer_uint64_vector_field@@Base+0x53>
  427204:	mov    rdx,QWORD PTR [rdi+0x28]
  427208:	lea    rsi,[rdx+0x1]
  42720c:	mov    QWORD PTR [rdi+0x28],rsi
  427210:	mov    BYTE PTR [rdx],0x2c
  427213:	mov    r12d,DWORD PTR [rax]
  427216:	mov    rbx,rdi
  427219:	add    r12,rax
  42721c:	movsxd rdx,r8d
  42721f:	mov    rsi,rcx
  427222:	mov    ebp,DWORD PTR [r12]
  427226:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  42722b:	mov    rax,QWORD PTR [rbx+0x28]
  42722f:	inc    DWORD PTR [rbx+0x38]
  427232:	lea    rdx,[rax+0x1]
  427236:	mov    QWORD PTR [rbx+0x28],rdx
  42723a:	mov    BYTE PTR [rax],0x5b
  42723d:	test   ebp,ebp
  42723f:	je     427320 <flatcc_json_printer_uint64_vector_field@@Base+0x160>
  427245:	cmp    BYTE PTR [rbx+0x31],0x0
  427249:	mov    rsi,QWORD PTR [rbx+0x28]
  42724d:	jne    427340 <flatcc_json_printer_uint64_vector_field@@Base+0x180>
  427253:	cmp    QWORD PTR [rbx+0x20],rsi
  427257:	ja     427265 <flatcc_json_printer_uint64_vector_field@@Base+0xa5>
  427259:	xor    esi,esi
  42725b:	mov    rdi,rbx
  42725e:	call   QWORD PTR [rbx+0x48]
  427261:	mov    rsi,QWORD PTR [rbx+0x28]
  427265:	mov    rdi,QWORD PTR [r12+0x4]
  42726a:	lea    r13,[r12+0xc]
  42726f:	call   4209c0 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  427274:	cdqe   
  427276:	add    rax,QWORD PTR [rbx+0x28]
  42727a:	mov    QWORD PTR [rbx+0x28],rax
  42727e:	lea    edx,[rbp-0x2]
  427281:	cmp    ebp,0x1
  427284:	je     427324 <flatcc_json_printer_uint64_vector_field@@Base+0x164>
  42728a:	lea    rbp,[r12+rdx*8+0x14]
  42728f:	jmp    4272ca <flatcc_json_printer_uint64_vector_field@@Base+0x10a>
  427291:	nop    DWORD PTR [rax+0x0]
  427298:	mov    rsi,QWORD PTR [rbx+0x28]
  42729c:	cmp    rsi,QWORD PTR [rbx+0x20]
  4272a0:	jb     4272ae <flatcc_json_printer_uint64_vector_field@@Base+0xee>
  4272a2:	xor    esi,esi
  4272a4:	mov    rdi,rbx
  4272a7:	call   QWORD PTR [rbx+0x48]
  4272aa:	mov    rsi,QWORD PTR [rbx+0x28]
  4272ae:	mov    rdi,QWORD PTR [r13+0x0]
  4272b2:	add    r13,0x8
  4272b6:	call   4209c0 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  4272bb:	cdqe   
  4272bd:	add    rax,QWORD PTR [rbx+0x28]
  4272c1:	mov    QWORD PTR [rbx+0x28],rax
  4272c5:	cmp    r13,rbp
  4272c8:	je     427324 <flatcc_json_printer_uint64_vector_field@@Base+0x164>
  4272ca:	lea    rdx,[rax+0x1]
  4272ce:	mov    QWORD PTR [rbx+0x28],rdx
  4272d2:	mov    BYTE PTR [rax],0x2c
  4272d5:	cmp    BYTE PTR [rbx+0x31],0x0
  4272d9:	je     427298 <flatcc_json_printer_uint64_vector_field@@Base+0xd8>
  4272db:	mov    rax,QWORD PTR [rbx+0x28]
  4272df:	lea    rdx,[rax+0x1]
  4272e3:	mov    QWORD PTR [rbx+0x28],rdx
  4272e7:	mov    BYTE PTR [rax],0xa
  4272ea:	movzx  esi,BYTE PTR [rbx+0x31]
  4272ee:	mov    rdi,QWORD PTR [rbx+0x28]
  4272f2:	imul   esi,DWORD PTR [rbx+0x38]
  4272f6:	movsxd r12,esi
  4272f9:	lea    rax,[rdi+r12*1]
  4272fd:	cmp    QWORD PTR [rbx+0x20],rax
  427301:	jae    427380 <flatcc_json_printer_uint64_vector_field@@Base+0x1c0>
  427303:	mov    rsi,r12
  427306:	mov    rdi,rbx
  427309:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42730e:	mov    rsi,QWORD PTR [rbx+0x28]
  427312:	jmp    4272ae <flatcc_json_printer_uint64_vector_field@@Base+0xee>
  427314:	nop    DWORD PTR [rax+0x0]
  427318:	ret    
  427319:	nop    DWORD PTR [rax+0x0]
  427320:	mov    rax,QWORD PTR [rbx+0x28]
  427324:	cmp    BYTE PTR [rbx+0x31],0x0
  427328:	lea    rdx,[rax+0x1]
  42732c:	jne    4273a0 <flatcc_json_printer_uint64_vector_field@@Base+0x1e0>
  42732e:	mov    QWORD PTR [rbx+0x28],rdx
  427332:	mov    BYTE PTR [rax],0x5d
  427335:	add    rsp,0x8
  427339:	pop    rbx
  42733a:	pop    rbp
  42733b:	pop    r12
  42733d:	pop    r13
  42733f:	ret    
  427340:	lea    rax,[rsi+0x1]
  427344:	mov    QWORD PTR [rbx+0x28],rax
  427348:	mov    BYTE PTR [rsi],0xa
  42734b:	movzx  esi,BYTE PTR [rbx+0x31]
  42734f:	mov    rdi,QWORD PTR [rbx+0x28]
  427353:	imul   esi,DWORD PTR [rbx+0x38]
  427357:	movsxd r13,esi
  42735a:	lea    rax,[rdi+r13*1]
  42735e:	cmp    QWORD PTR [rbx+0x20],rax
  427362:	jae    4273fd <flatcc_json_printer_uint64_vector_field@@Base+0x23d>
  427368:	mov    rsi,r13
  42736b:	mov    rdi,rbx
  42736e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427373:	mov    rsi,QWORD PTR [rbx+0x28]
  427377:	jmp    427265 <flatcc_json_printer_uint64_vector_field@@Base+0xa5>
  42737c:	nop    DWORD PTR [rax+0x0]
  427380:	mov    esi,0x20
  427385:	mov    rdx,r12
  427388:	call   4061c0 <memset@plt>
  42738d:	mov    rsi,QWORD PTR [rbx+0x28]
  427391:	add    rsi,r12
  427394:	mov    QWORD PTR [rbx+0x28],rsi
  427398:	jmp    4272ae <flatcc_json_printer_uint64_vector_field@@Base+0xee>
  42739d:	nop    DWORD PTR [rax]
  4273a0:	mov    QWORD PTR [rbx+0x28],rdx
  4273a4:	mov    BYTE PTR [rax],0xa
  4273a7:	mov    eax,DWORD PTR [rbx+0x38]
  4273aa:	mov    rdi,QWORD PTR [rbx+0x28]
  4273ae:	lea    ebp,[rax-0x1]
  4273b1:	movzx  eax,BYTE PTR [rbx+0x31]
  4273b5:	mov    DWORD PTR [rbx+0x38],ebp
  4273b8:	imul   eax,ebp
  4273bb:	movsxd rbp,eax
  4273be:	lea    rax,[rdi+rbp*1]
  4273c2:	cmp    QWORD PTR [rbx+0x20],rax
  4273c6:	jae    4273e0 <flatcc_json_printer_uint64_vector_field@@Base+0x220>
  4273c8:	mov    rsi,rbp
  4273cb:	mov    rdi,rbx
  4273ce:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4273d3:	mov    rax,QWORD PTR [rbx+0x28]
  4273d7:	lea    rdx,[rax+0x1]
  4273db:	jmp    42732e <flatcc_json_printer_uint64_vector_field@@Base+0x16e>
  4273e0:	mov    rdx,rbp
  4273e3:	mov    esi,0x20
  4273e8:	call   4061c0 <memset@plt>
  4273ed:	mov    rax,QWORD PTR [rbx+0x28]
  4273f1:	add    rax,rbp
  4273f4:	lea    rdx,[rax+0x1]
  4273f8:	jmp    42732e <flatcc_json_printer_uint64_vector_field@@Base+0x16e>
  4273fd:	mov    esi,0x20
  427402:	mov    rdx,r13
  427405:	call   4061c0 <memset@plt>
  42740a:	mov    rsi,QWORD PTR [rbx+0x28]
  42740e:	add    rsi,r13
  427411:	mov    QWORD PTR [rbx+0x28],rsi
  427415:	jmp    427265 <flatcc_json_printer_uint64_vector_field@@Base+0xa5>
  42741a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000427420 <flatcc_json_printer_int8_vector_field@@Base>:
  427420:	endbr64 
  427424:	lea    eax,[rdx+rdx*1+0x4]
  427428:	cmp    eax,DWORD PTR [rsi+0x10]
  42742b:	jge    4275b0 <flatcc_json_printer_int8_vector_field@@Base+0x190>
  427431:	mov    rdx,QWORD PTR [rsi+0x8]
  427435:	movzx  eax,WORD PTR [rdx+rax*1]
  427439:	test   ax,ax
  42743c:	je     4275b0 <flatcc_json_printer_int8_vector_field@@Base+0x190>
  427442:	add    rax,QWORD PTR [rsi]
  427445:	je     4275b0 <flatcc_json_printer_int8_vector_field@@Base+0x190>
  42744b:	push   r13
  42744d:	push   r12
  42744f:	push   rbp
  427450:	push   rbx
  427451:	sub    rsp,0x8
  427455:	mov    edx,DWORD PTR [rsi+0x18]
  427458:	lea    r9d,[rdx+0x1]
  42745c:	mov    DWORD PTR [rsi+0x18],r9d
  427460:	test   edx,edx
  427462:	je     427473 <flatcc_json_printer_int8_vector_field@@Base+0x53>
  427464:	mov    rdx,QWORD PTR [rdi+0x28]
  427468:	lea    rsi,[rdx+0x1]
  42746c:	mov    QWORD PTR [rdi+0x28],rsi
  427470:	mov    BYTE PTR [rdx],0x2c
  427473:	mov    r12d,DWORD PTR [rax]
  427476:	mov    rbp,rdi
  427479:	add    r12,rax
  42747c:	movsxd rdx,r8d
  42747f:	mov    rsi,rcx
  427482:	mov    ebx,DWORD PTR [r12]
  427486:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  42748b:	mov    rax,QWORD PTR [rbp+0x28]
  42748f:	inc    DWORD PTR [rbp+0x38]
  427492:	lea    rdx,[rax+0x1]
  427496:	mov    QWORD PTR [rbp+0x28],rdx
  42749a:	mov    BYTE PTR [rax],0x5b
  42749d:	test   ebx,ebx
  42749f:	je     4275b8 <flatcc_json_printer_int8_vector_field@@Base+0x198>
  4274a5:	cmp    BYTE PTR [rbp+0x31],0x0
  4274a9:	mov    rsi,QWORD PTR [rbp+0x28]
  4274ad:	jne    4275e0 <flatcc_json_printer_int8_vector_field@@Base+0x1c0>
  4274b3:	cmp    QWORD PTR [rbp+0x20],rsi
  4274b7:	ja     4274c5 <flatcc_json_printer_int8_vector_field@@Base+0xa5>
  4274b9:	xor    esi,esi
  4274bb:	mov    rdi,rbp
  4274be:	call   QWORD PTR [rbp+0x48]
  4274c1:	mov    rsi,QWORD PTR [rbp+0x28]
  4274c5:	movsx  r8d,BYTE PTR [r12+0x4]
  4274cb:	mov    edi,r8d
  4274ce:	shr    r8d,0x1f
  4274d2:	test   dil,dil
  4274d5:	jns    4274df <flatcc_json_printer_int8_vector_field@@Base+0xbf>
  4274d7:	mov    BYTE PTR [rsi],0x2d
  4274da:	neg    edi
  4274dc:	inc    rsi
  4274df:	movzx  edi,dil
  4274e3:	call   421350 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  4274e8:	add    eax,r8d
  4274eb:	cdqe   
  4274ed:	add    rax,QWORD PTR [rbp+0x28]
  4274f1:	mov    QWORD PTR [rbp+0x28],rax
  4274f5:	lea    r13,[r12+0x5]
  4274fa:	lea    edx,[rbx-0x2]
  4274fd:	cmp    ebx,0x1
  427500:	je     4275bc <flatcc_json_printer_int8_vector_field@@Base+0x19c>
  427506:	lea    rbx,[r12+rdx*1+0x6]
  42750b:	jmp    42755d <flatcc_json_printer_int8_vector_field@@Base+0x13d>
  42750d:	nop    DWORD PTR [rax]
  427510:	mov    rsi,QWORD PTR [rbp+0x28]
  427514:	cmp    rsi,QWORD PTR [rbp+0x20]
  427518:	jb     427526 <flatcc_json_printer_int8_vector_field@@Base+0x106>
  42751a:	xor    esi,esi
  42751c:	mov    rdi,rbp
  42751f:	call   QWORD PTR [rbp+0x48]
  427522:	mov    rsi,QWORD PTR [rbp+0x28]
  427526:	movsx  r8d,BYTE PTR [r13+0x0]
  42752b:	mov    edi,r8d
  42752e:	shr    r8d,0x1f
  427532:	test   dil,dil
  427535:	jns    42753f <flatcc_json_printer_int8_vector_field@@Base+0x11f>
  427537:	mov    BYTE PTR [rsi],0x2d
  42753a:	neg    edi
  42753c:	inc    rsi
  42753f:	movzx  edi,dil
  427543:	call   421350 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  427548:	add    eax,r8d
  42754b:	cdqe   
  42754d:	add    rax,QWORD PTR [rbp+0x28]
  427551:	inc    r13
  427554:	mov    QWORD PTR [rbp+0x28],rax
  427558:	cmp    rbx,r13
  42755b:	je     4275bc <flatcc_json_printer_int8_vector_field@@Base+0x19c>
  42755d:	lea    rdx,[rax+0x1]
  427561:	mov    QWORD PTR [rbp+0x28],rdx
  427565:	mov    BYTE PTR [rax],0x2c
  427568:	cmp    BYTE PTR [rbp+0x31],0x0
  42756c:	je     427510 <flatcc_json_printer_int8_vector_field@@Base+0xf0>
  42756e:	mov    rax,QWORD PTR [rbp+0x28]
  427572:	lea    rdx,[rax+0x1]
  427576:	mov    QWORD PTR [rbp+0x28],rdx
  42757a:	mov    BYTE PTR [rax],0xa
  42757d:	movzx  esi,BYTE PTR [rbp+0x31]
  427581:	mov    rdi,QWORD PTR [rbp+0x28]
  427585:	imul   esi,DWORD PTR [rbp+0x38]
  427589:	movsxd r12,esi
  42758c:	lea    rax,[rdi+r12*1]
  427590:	cmp    QWORD PTR [rbp+0x20],rax
  427594:	jae    427600 <flatcc_json_printer_int8_vector_field@@Base+0x1e0>
  427596:	mov    rsi,r12
  427599:	mov    rdi,rbp
  42759c:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4275a1:	mov    rsi,QWORD PTR [rbp+0x28]
  4275a5:	jmp    427526 <flatcc_json_printer_int8_vector_field@@Base+0x106>
  4275aa:	nop    WORD PTR [rax+rax*1+0x0]
  4275b0:	ret    
  4275b1:	nop    DWORD PTR [rax+0x0]
  4275b8:	mov    rax,QWORD PTR [rbp+0x28]
  4275bc:	cmp    BYTE PTR [rbp+0x31],0x0
  4275c0:	lea    rdx,[rax+0x1]
  4275c4:	jne    427620 <flatcc_json_printer_int8_vector_field@@Base+0x200>
  4275c6:	mov    QWORD PTR [rbp+0x28],rdx
  4275ca:	mov    BYTE PTR [rax],0x5d
  4275cd:	add    rsp,0x8
  4275d1:	pop    rbx
  4275d2:	pop    rbp
  4275d3:	pop    r12
  4275d5:	pop    r13
  4275d7:	ret    
  4275d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4275e0:	lea    rax,[rsi+0x1]
  4275e4:	mov    QWORD PTR [rbp+0x28],rax
  4275e8:	mov    BYTE PTR [rsi],0xa
  4275eb:	mov    rdi,rbp
  4275ee:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  4275f3:	mov    rsi,QWORD PTR [rbp+0x28]
  4275f7:	jmp    4274c5 <flatcc_json_printer_int8_vector_field@@Base+0xa5>
  4275fc:	nop    DWORD PTR [rax+0x0]
  427600:	mov    esi,0x20
  427605:	mov    rdx,r12
  427608:	call   4061c0 <memset@plt>
  42760d:	mov    rsi,QWORD PTR [rbp+0x28]
  427611:	add    rsi,r12
  427614:	mov    QWORD PTR [rbp+0x28],rsi
  427618:	jmp    427526 <flatcc_json_printer_int8_vector_field@@Base+0x106>
  42761d:	nop    DWORD PTR [rax]
  427620:	mov    QWORD PTR [rbp+0x28],rdx
  427624:	mov    BYTE PTR [rax],0xa
  427627:	mov    eax,DWORD PTR [rbp+0x38]
  42762a:	mov    rdi,QWORD PTR [rbp+0x28]
  42762e:	lea    ebx,[rax-0x1]
  427631:	movzx  eax,BYTE PTR [rbp+0x31]
  427635:	mov    DWORD PTR [rbp+0x38],ebx
  427638:	imul   eax,ebx
  42763b:	movsxd rbx,eax
  42763e:	lea    rax,[rdi+rbx*1]
  427642:	cmp    QWORD PTR [rbp+0x20],rax
  427646:	jae    427660 <flatcc_json_printer_int8_vector_field@@Base+0x240>
  427648:	mov    rsi,rbx
  42764b:	mov    rdi,rbp
  42764e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427653:	mov    rax,QWORD PTR [rbp+0x28]
  427657:	lea    rdx,[rax+0x1]
  42765b:	jmp    4275c6 <flatcc_json_printer_int8_vector_field@@Base+0x1a6>
  427660:	mov    rdx,rbx
  427663:	mov    esi,0x20
  427668:	call   4061c0 <memset@plt>
  42766d:	mov    rax,QWORD PTR [rbp+0x28]
  427671:	add    rax,rbx
  427674:	lea    rdx,[rax+0x1]
  427678:	jmp    4275c6 <flatcc_json_printer_int8_vector_field@@Base+0x1a6>
  42767d:	nop    DWORD PTR [rax]

0000000000427680 <flatcc_json_printer_int16_vector_field@@Base>:
  427680:	endbr64 
  427684:	lea    eax,[rdx+rdx*1+0x4]
  427688:	cmp    eax,DWORD PTR [rsi+0x10]
  42768b:	jge    427810 <flatcc_json_printer_int16_vector_field@@Base+0x190>
  427691:	mov    rdx,QWORD PTR [rsi+0x8]
  427695:	movzx  eax,WORD PTR [rdx+rax*1]
  427699:	test   ax,ax
  42769c:	je     427810 <flatcc_json_printer_int16_vector_field@@Base+0x190>
  4276a2:	add    rax,QWORD PTR [rsi]
  4276a5:	je     427810 <flatcc_json_printer_int16_vector_field@@Base+0x190>
  4276ab:	push   r13
  4276ad:	push   r12
  4276af:	push   rbp
  4276b0:	push   rbx
  4276b1:	sub    rsp,0x8
  4276b5:	mov    edx,DWORD PTR [rsi+0x18]
  4276b8:	lea    r9d,[rdx+0x1]
  4276bc:	mov    DWORD PTR [rsi+0x18],r9d
  4276c0:	test   edx,edx
  4276c2:	je     4276d3 <flatcc_json_printer_int16_vector_field@@Base+0x53>
  4276c4:	mov    rdx,QWORD PTR [rdi+0x28]
  4276c8:	lea    rsi,[rdx+0x1]
  4276cc:	mov    QWORD PTR [rdi+0x28],rsi
  4276d0:	mov    BYTE PTR [rdx],0x2c
  4276d3:	mov    r12d,DWORD PTR [rax]
  4276d6:	mov    rbp,rdi
  4276d9:	add    r12,rax
  4276dc:	movsxd rdx,r8d
  4276df:	mov    rsi,rcx
  4276e2:	mov    ebx,DWORD PTR [r12]
  4276e6:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  4276eb:	mov    rax,QWORD PTR [rbp+0x28]
  4276ef:	inc    DWORD PTR [rbp+0x38]
  4276f2:	lea    rdx,[rax+0x1]
  4276f6:	mov    QWORD PTR [rbp+0x28],rdx
  4276fa:	mov    BYTE PTR [rax],0x5b
  4276fd:	test   ebx,ebx
  4276ff:	je     427818 <flatcc_json_printer_int16_vector_field@@Base+0x198>
  427705:	cmp    BYTE PTR [rbp+0x31],0x0
  427709:	mov    rsi,QWORD PTR [rbp+0x28]
  42770d:	jne    427840 <flatcc_json_printer_int16_vector_field@@Base+0x1c0>
  427713:	cmp    QWORD PTR [rbp+0x20],rsi
  427717:	ja     427725 <flatcc_json_printer_int16_vector_field@@Base+0xa5>
  427719:	xor    esi,esi
  42771b:	mov    rdi,rbp
  42771e:	call   QWORD PTR [rbp+0x48]
  427721:	mov    rsi,QWORD PTR [rbp+0x28]
  427725:	movsx  r11d,WORD PTR [r12+0x4]
  42772b:	mov    edi,r11d
  42772e:	shr    r11d,0x1f
  427732:	test   di,di
  427735:	jns    42773f <flatcc_json_printer_int16_vector_field@@Base+0xbf>
  427737:	mov    BYTE PTR [rsi],0x2d
  42773a:	neg    edi
  42773c:	inc    rsi
  42773f:	movzx  edi,di
  427742:	call   4205e0 <flatcc_json_parser_struct_as_root@@Base+0x10>
  427747:	add    eax,r11d
  42774a:	cdqe   
  42774c:	add    rax,QWORD PTR [rbp+0x28]
  427750:	mov    QWORD PTR [rbp+0x28],rax
  427754:	lea    r13,[r12+0x6]
  427759:	lea    edx,[rbx-0x2]
  42775c:	cmp    ebx,0x1
  42775f:	je     42781c <flatcc_json_printer_int16_vector_field@@Base+0x19c>
  427765:	lea    rbx,[r12+rdx*2+0x8]
  42776a:	jmp    4277bd <flatcc_json_printer_int16_vector_field@@Base+0x13d>
  42776c:	nop    DWORD PTR [rax+0x0]
  427770:	mov    rsi,QWORD PTR [rbp+0x28]
  427774:	cmp    rsi,QWORD PTR [rbp+0x20]
  427778:	jb     427786 <flatcc_json_printer_int16_vector_field@@Base+0x106>
  42777a:	xor    esi,esi
  42777c:	mov    rdi,rbp
  42777f:	call   QWORD PTR [rbp+0x48]
  427782:	mov    rsi,QWORD PTR [rbp+0x28]
  427786:	movsx  r11d,WORD PTR [r13+0x0]
  42778b:	mov    edi,r11d
  42778e:	shr    r11d,0x1f
  427792:	test   di,di
  427795:	jns    42779f <flatcc_json_printer_int16_vector_field@@Base+0x11f>
  427797:	mov    BYTE PTR [rsi],0x2d
  42779a:	neg    edi
  42779c:	inc    rsi
  42779f:	movzx  edi,di
  4277a2:	call   4205e0 <flatcc_json_parser_struct_as_root@@Base+0x10>
  4277a7:	add    eax,r11d
  4277aa:	cdqe   
  4277ac:	add    rax,QWORD PTR [rbp+0x28]
  4277b0:	add    r13,0x2
  4277b4:	mov    QWORD PTR [rbp+0x28],rax
  4277b8:	cmp    r13,rbx
  4277bb:	je     42781c <flatcc_json_printer_int16_vector_field@@Base+0x19c>
  4277bd:	lea    rdx,[rax+0x1]
  4277c1:	mov    QWORD PTR [rbp+0x28],rdx
  4277c5:	mov    BYTE PTR [rax],0x2c
  4277c8:	cmp    BYTE PTR [rbp+0x31],0x0
  4277cc:	je     427770 <flatcc_json_printer_int16_vector_field@@Base+0xf0>
  4277ce:	mov    rax,QWORD PTR [rbp+0x28]
  4277d2:	lea    rdx,[rax+0x1]
  4277d6:	mov    QWORD PTR [rbp+0x28],rdx
  4277da:	mov    BYTE PTR [rax],0xa
  4277dd:	movzx  esi,BYTE PTR [rbp+0x31]
  4277e1:	mov    rdi,QWORD PTR [rbp+0x28]
  4277e5:	imul   esi,DWORD PTR [rbp+0x38]
  4277e9:	movsxd r12,esi
  4277ec:	lea    rax,[rdi+r12*1]
  4277f0:	cmp    QWORD PTR [rbp+0x20],rax
  4277f4:	jae    427860 <flatcc_json_printer_int16_vector_field@@Base+0x1e0>
  4277f6:	mov    rsi,r12
  4277f9:	mov    rdi,rbp
  4277fc:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427801:	mov    rsi,QWORD PTR [rbp+0x28]
  427805:	jmp    427786 <flatcc_json_printer_int16_vector_field@@Base+0x106>
  42780a:	nop    WORD PTR [rax+rax*1+0x0]
  427810:	ret    
  427811:	nop    DWORD PTR [rax+0x0]
  427818:	mov    rax,QWORD PTR [rbp+0x28]
  42781c:	cmp    BYTE PTR [rbp+0x31],0x0
  427820:	lea    rdx,[rax+0x1]
  427824:	jne    427880 <flatcc_json_printer_int16_vector_field@@Base+0x200>
  427826:	mov    QWORD PTR [rbp+0x28],rdx
  42782a:	mov    BYTE PTR [rax],0x5d
  42782d:	add    rsp,0x8
  427831:	pop    rbx
  427832:	pop    rbp
  427833:	pop    r12
  427835:	pop    r13
  427837:	ret    
  427838:	nop    DWORD PTR [rax+rax*1+0x0]
  427840:	lea    rax,[rsi+0x1]
  427844:	mov    QWORD PTR [rbp+0x28],rax
  427848:	mov    BYTE PTR [rsi],0xa
  42784b:	mov    rdi,rbp
  42784e:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  427853:	mov    rsi,QWORD PTR [rbp+0x28]
  427857:	jmp    427725 <flatcc_json_printer_int16_vector_field@@Base+0xa5>
  42785c:	nop    DWORD PTR [rax+0x0]
  427860:	mov    esi,0x20
  427865:	mov    rdx,r12
  427868:	call   4061c0 <memset@plt>
  42786d:	mov    rsi,QWORD PTR [rbp+0x28]
  427871:	add    rsi,r12
  427874:	mov    QWORD PTR [rbp+0x28],rsi
  427878:	jmp    427786 <flatcc_json_printer_int16_vector_field@@Base+0x106>
  42787d:	nop    DWORD PTR [rax]
  427880:	mov    QWORD PTR [rbp+0x28],rdx
  427884:	mov    BYTE PTR [rax],0xa
  427887:	mov    eax,DWORD PTR [rbp+0x38]
  42788a:	mov    rdi,QWORD PTR [rbp+0x28]
  42788e:	lea    ebx,[rax-0x1]
  427891:	movzx  eax,BYTE PTR [rbp+0x31]
  427895:	mov    DWORD PTR [rbp+0x38],ebx
  427898:	imul   eax,ebx
  42789b:	movsxd rbx,eax
  42789e:	lea    rax,[rdi+rbx*1]
  4278a2:	cmp    QWORD PTR [rbp+0x20],rax
  4278a6:	jae    4278c0 <flatcc_json_printer_int16_vector_field@@Base+0x240>
  4278a8:	mov    rsi,rbx
  4278ab:	mov    rdi,rbp
  4278ae:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4278b3:	mov    rax,QWORD PTR [rbp+0x28]
  4278b7:	lea    rdx,[rax+0x1]
  4278bb:	jmp    427826 <flatcc_json_printer_int16_vector_field@@Base+0x1a6>
  4278c0:	mov    rdx,rbx
  4278c3:	mov    esi,0x20
  4278c8:	call   4061c0 <memset@plt>
  4278cd:	mov    rax,QWORD PTR [rbp+0x28]
  4278d1:	add    rax,rbx
  4278d4:	lea    rdx,[rax+0x1]
  4278d8:	jmp    427826 <flatcc_json_printer_int16_vector_field@@Base+0x1a6>
  4278dd:	nop    DWORD PTR [rax]

00000000004278e0 <flatcc_json_printer_int32_vector_field@@Base>:
  4278e0:	endbr64 
  4278e4:	lea    eax,[rdx+rdx*1+0x4]
  4278e8:	cmp    eax,DWORD PTR [rsi+0x10]
  4278eb:	jge    427ac0 <flatcc_json_printer_int32_vector_field@@Base+0x1e0>
  4278f1:	push   r14
  4278f3:	push   r13
  4278f5:	push   r12
  4278f7:	push   rbp
  4278f8:	push   rbx
  4278f9:	mov    rdx,QWORD PTR [rsi+0x8]
  4278fd:	movzx  r12d,WORD PTR [rdx+rax*1]
  427902:	test   r12w,r12w
  427906:	je     427a75 <flatcc_json_printer_int32_vector_field@@Base+0x195>
  42790c:	add    r12,QWORD PTR [rsi]
  42790f:	je     427a75 <flatcc_json_printer_int32_vector_field@@Base+0x195>
  427915:	mov    eax,DWORD PTR [rsi+0x18]
  427918:	lea    edx,[rax+0x1]
  42791b:	mov    DWORD PTR [rsi+0x18],edx
  42791e:	test   eax,eax
  427920:	je     427931 <flatcc_json_printer_int32_vector_field@@Base+0x51>
  427922:	mov    rax,QWORD PTR [rdi+0x28]
  427926:	lea    rdx,[rax+0x1]
  42792a:	mov    QWORD PTR [rdi+0x28],rdx
  42792e:	mov    BYTE PTR [rax],0x2c
  427931:	mov    eax,DWORD PTR [r12]
  427935:	mov    rbx,rdi
  427938:	add    r12,rax
  42793b:	movsxd rdx,r8d
  42793e:	mov    rsi,rcx
  427941:	mov    r13d,DWORD PTR [r12]
  427945:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  42794a:	mov    rax,QWORD PTR [rbx+0x28]
  42794e:	inc    DWORD PTR [rbx+0x38]
  427951:	lea    rdx,[rax+0x1]
  427955:	mov    QWORD PTR [rbx+0x28],rdx
  427959:	mov    BYTE PTR [rax],0x5b
  42795c:	test   r13d,r13d
  42795f:	je     427a60 <flatcc_json_printer_int32_vector_field@@Base+0x180>
  427965:	cmp    BYTE PTR [rbx+0x31],0x0
  427969:	mov    rsi,QWORD PTR [rbx+0x28]
  42796d:	jne    427a80 <flatcc_json_printer_int32_vector_field@@Base+0x1a0>
  427973:	cmp    QWORD PTR [rbx+0x20],rsi
  427977:	ja     427985 <flatcc_json_printer_int32_vector_field@@Base+0xa5>
  427979:	xor    esi,esi
  42797b:	mov    rdi,rbx
  42797e:	call   QWORD PTR [rbx+0x48]
  427981:	mov    rsi,QWORD PTR [rbx+0x28]
  427985:	mov    edi,DWORD PTR [r12+0x4]
  42798a:	mov    ebp,edi
  42798c:	shr    ebp,0x1f
  42798f:	test   edi,edi
  427991:	jns    42799b <flatcc_json_printer_int32_vector_field@@Base+0xbb>
  427993:	mov    BYTE PTR [rsi],0x2d
  427996:	neg    edi
  427998:	inc    rsi
  42799b:	call   420710 <flatcc_json_parser_struct_as_root@@Base+0x140>
  4279a0:	add    eax,ebp
  4279a2:	cdqe   
  4279a4:	add    rax,QWORD PTR [rbx+0x28]
  4279a8:	mov    QWORD PTR [rbx+0x28],rax
  4279ac:	lea    r14,[r12+0x8]
  4279b1:	lea    edx,[r13-0x2]
  4279b5:	cmp    r13d,0x1
  4279b9:	je     427a64 <flatcc_json_printer_int32_vector_field@@Base+0x184>
  4279bf:	lea    r12,[r12+rdx*4+0xc]
  4279c4:	jmp    427a14 <flatcc_json_printer_int32_vector_field@@Base+0x134>
  4279c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4279d0:	mov    rsi,QWORD PTR [rbx+0x28]
  4279d4:	cmp    rsi,QWORD PTR [rbx+0x20]
  4279d8:	jb     4279e6 <flatcc_json_printer_int32_vector_field@@Base+0x106>
  4279da:	xor    esi,esi
  4279dc:	mov    rdi,rbx
  4279df:	call   QWORD PTR [rbx+0x48]
  4279e2:	mov    rsi,QWORD PTR [rbx+0x28]
  4279e6:	mov    edi,DWORD PTR [r14]
  4279e9:	mov    ebp,edi
  4279eb:	shr    ebp,0x1f
  4279ee:	test   edi,edi
  4279f0:	jns    4279fa <flatcc_json_printer_int32_vector_field@@Base+0x11a>
  4279f2:	mov    BYTE PTR [rsi],0x2d
  4279f5:	neg    edi
  4279f7:	inc    rsi
  4279fa:	call   420710 <flatcc_json_parser_struct_as_root@@Base+0x140>
  4279ff:	add    eax,ebp
  427a01:	cdqe   
  427a03:	add    rax,QWORD PTR [rbx+0x28]
  427a07:	add    r14,0x4
  427a0b:	mov    QWORD PTR [rbx+0x28],rax
  427a0f:	cmp    r14,r12
  427a12:	je     427a64 <flatcc_json_printer_int32_vector_field@@Base+0x184>
  427a14:	lea    rdx,[rax+0x1]
  427a18:	mov    QWORD PTR [rbx+0x28],rdx
  427a1c:	mov    BYTE PTR [rax],0x2c
  427a1f:	cmp    BYTE PTR [rbx+0x31],0x0
  427a23:	je     4279d0 <flatcc_json_printer_int32_vector_field@@Base+0xf0>
  427a25:	mov    rax,QWORD PTR [rbx+0x28]
  427a29:	lea    rdx,[rax+0x1]
  427a2d:	mov    QWORD PTR [rbx+0x28],rdx
  427a31:	mov    BYTE PTR [rax],0xa
  427a34:	movzx  esi,BYTE PTR [rbx+0x31]
  427a38:	mov    rdi,QWORD PTR [rbx+0x28]
  427a3c:	imul   esi,DWORD PTR [rbx+0x38]
  427a40:	movsxd rbp,esi
  427a43:	lea    rax,[rdi+rbp*1]
  427a47:	cmp    QWORD PTR [rbx+0x20],rax
  427a4b:	jae    427aa0 <flatcc_json_printer_int32_vector_field@@Base+0x1c0>
  427a4d:	mov    rsi,rbp
  427a50:	mov    rdi,rbx
  427a53:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427a58:	mov    rsi,QWORD PTR [rbx+0x28]
  427a5c:	jmp    4279e6 <flatcc_json_printer_int32_vector_field@@Base+0x106>
  427a5e:	xchg   ax,ax
  427a60:	mov    rax,QWORD PTR [rbx+0x28]
  427a64:	cmp    BYTE PTR [rbx+0x31],0x0
  427a68:	lea    rdx,[rax+0x1]
  427a6c:	jne    427ac8 <flatcc_json_printer_int32_vector_field@@Base+0x1e8>
  427a6e:	mov    QWORD PTR [rbx+0x28],rdx
  427a72:	mov    BYTE PTR [rax],0x5d
  427a75:	pop    rbx
  427a76:	pop    rbp
  427a77:	pop    r12
  427a79:	pop    r13
  427a7b:	pop    r14
  427a7d:	ret    
  427a7e:	xchg   ax,ax
  427a80:	lea    rax,[rsi+0x1]
  427a84:	mov    QWORD PTR [rbx+0x28],rax
  427a88:	mov    BYTE PTR [rsi],0xa
  427a8b:	mov    rdi,rbx
  427a8e:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  427a93:	mov    rsi,QWORD PTR [rbx+0x28]
  427a97:	jmp    427985 <flatcc_json_printer_int32_vector_field@@Base+0xa5>
  427a9c:	nop    DWORD PTR [rax+0x0]
  427aa0:	mov    esi,0x20
  427aa5:	mov    rdx,rbp
  427aa8:	call   4061c0 <memset@plt>
  427aad:	mov    rsi,QWORD PTR [rbx+0x28]
  427ab1:	add    rsi,rbp
  427ab4:	mov    QWORD PTR [rbx+0x28],rsi
  427ab8:	jmp    4279e6 <flatcc_json_printer_int32_vector_field@@Base+0x106>
  427abd:	nop    DWORD PTR [rax]
  427ac0:	ret    
  427ac1:	nop    DWORD PTR [rax+0x0]
  427ac8:	mov    QWORD PTR [rbx+0x28],rdx
  427acc:	mov    BYTE PTR [rax],0xa
  427acf:	mov    eax,DWORD PTR [rbx+0x38]
  427ad2:	mov    rdi,QWORD PTR [rbx+0x28]
  427ad6:	lea    ebp,[rax-0x1]
  427ad9:	movzx  eax,BYTE PTR [rbx+0x31]
  427add:	mov    DWORD PTR [rbx+0x38],ebp
  427ae0:	imul   eax,ebp
  427ae3:	movsxd rbp,eax
  427ae6:	lea    rax,[rdi+rbp*1]
  427aea:	cmp    QWORD PTR [rbx+0x20],rax
  427aee:	jae    427b10 <flatcc_json_printer_int32_vector_field@@Base+0x230>
  427af0:	mov    rsi,rbp
  427af3:	mov    rdi,rbx
  427af6:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427afb:	mov    rax,QWORD PTR [rbx+0x28]
  427aff:	lea    rdx,[rax+0x1]
  427b03:	jmp    427a6e <flatcc_json_printer_int32_vector_field@@Base+0x18e>
  427b08:	nop    DWORD PTR [rax+rax*1+0x0]
  427b10:	mov    rdx,rbp
  427b13:	mov    esi,0x20
  427b18:	call   4061c0 <memset@plt>
  427b1d:	mov    rax,QWORD PTR [rbx+0x28]
  427b21:	add    rax,rbp
  427b24:	lea    rdx,[rax+0x1]
  427b28:	jmp    427a6e <flatcc_json_printer_int32_vector_field@@Base+0x18e>
  427b2d:	nop    DWORD PTR [rax]

0000000000427b30 <flatcc_json_printer_int64_vector_field@@Base>:
  427b30:	endbr64 
  427b34:	lea    eax,[rdx+rdx*1+0x4]
  427b38:	cmp    eax,DWORD PTR [rsi+0x10]
  427b3b:	jge    427d20 <flatcc_json_printer_int64_vector_field@@Base+0x1f0>
  427b41:	push   r13
  427b43:	push   r12
  427b45:	push   rbp
  427b46:	push   rbx
  427b47:	sub    rsp,0x8
  427b4b:	mov    rdx,QWORD PTR [rsi+0x8]
  427b4f:	movzx  ebp,WORD PTR [rdx+rax*1]
  427b53:	test   bp,bp
  427b56:	je     427ccd <flatcc_json_printer_int64_vector_field@@Base+0x19d>
  427b5c:	add    rbp,QWORD PTR [rsi]
  427b5f:	je     427ccd <flatcc_json_printer_int64_vector_field@@Base+0x19d>
  427b65:	mov    eax,DWORD PTR [rsi+0x18]
  427b68:	lea    edx,[rax+0x1]
  427b6b:	mov    DWORD PTR [rsi+0x18],edx
  427b6e:	test   eax,eax
  427b70:	je     427b81 <flatcc_json_printer_int64_vector_field@@Base+0x51>
  427b72:	mov    rax,QWORD PTR [rdi+0x28]
  427b76:	lea    rdx,[rax+0x1]
  427b7a:	mov    QWORD PTR [rdi+0x28],rdx
  427b7e:	mov    BYTE PTR [rax],0x2c
  427b81:	mov    eax,DWORD PTR [rbp+0x0]
  427b84:	mov    rbx,rdi
  427b87:	add    rbp,rax
  427b8a:	movsxd rdx,r8d
  427b8d:	mov    rsi,rcx
  427b90:	mov    r12d,DWORD PTR [rbp+0x0]
  427b94:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  427b99:	mov    rax,QWORD PTR [rbx+0x28]
  427b9d:	inc    DWORD PTR [rbx+0x38]
  427ba0:	lea    rdx,[rax+0x1]
  427ba4:	mov    QWORD PTR [rbx+0x28],rdx
  427ba8:	mov    BYTE PTR [rax],0x5b
  427bab:	test   r12d,r12d
  427bae:	je     427cb8 <flatcc_json_printer_int64_vector_field@@Base+0x188>
  427bb4:	cmp    BYTE PTR [rbx+0x31],0x0
  427bb8:	mov    rsi,QWORD PTR [rbx+0x28]
  427bbc:	jne    427ce0 <flatcc_json_printer_int64_vector_field@@Base+0x1b0>
  427bc2:	cmp    QWORD PTR [rbx+0x20],rsi
  427bc6:	ja     427bd4 <flatcc_json_printer_int64_vector_field@@Base+0xa4>
  427bc8:	xor    esi,esi
  427bca:	mov    rdi,rbx
  427bcd:	call   QWORD PTR [rbx+0x48]
  427bd0:	mov    rsi,QWORD PTR [rbx+0x28]
  427bd4:	mov    rdi,QWORD PTR [rbp+0x4]
  427bd8:	mov    r13,rdi
  427bdb:	shr    r13,0x3f
  427bdf:	test   rdi,rdi
  427be2:	jns    427bed <flatcc_json_printer_int64_vector_field@@Base+0xbd>
  427be4:	mov    BYTE PTR [rsi],0x2d
  427be7:	neg    rdi
  427bea:	inc    rsi
  427bed:	call   4209c0 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  427bf2:	add    eax,r13d
  427bf5:	cdqe   
  427bf7:	add    rax,QWORD PTR [rbx+0x28]
  427bfb:	mov    QWORD PTR [rbx+0x28],rax
  427bff:	lea    r13,[rbp+0xc]
  427c03:	lea    edx,[r12-0x2]
  427c08:	cmp    r12d,0x1
  427c0c:	je     427cbc <flatcc_json_printer_int64_vector_field@@Base+0x18c>
  427c12:	lea    rbp,[rbp+rdx*8+0x14]
  427c17:	jmp    427c6a <flatcc_json_printer_int64_vector_field@@Base+0x13a>
  427c19:	nop    DWORD PTR [rax+0x0]
  427c20:	mov    rsi,QWORD PTR [rbx+0x28]
  427c24:	cmp    rsi,QWORD PTR [rbx+0x20]
  427c28:	jb     427c36 <flatcc_json_printer_int64_vector_field@@Base+0x106>
  427c2a:	xor    esi,esi
  427c2c:	mov    rdi,rbx
  427c2f:	call   QWORD PTR [rbx+0x48]
  427c32:	mov    rsi,QWORD PTR [rbx+0x28]
  427c36:	mov    rdi,QWORD PTR [r13+0x0]
  427c3a:	mov    r12,rdi
  427c3d:	shr    r12,0x3f
  427c41:	test   rdi,rdi
  427c44:	jns    427c4f <flatcc_json_printer_int64_vector_field@@Base+0x11f>
  427c46:	mov    BYTE PTR [rsi],0x2d
  427c49:	neg    rdi
  427c4c:	inc    rsi
  427c4f:	call   4209c0 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
  427c54:	add    eax,r12d
  427c57:	cdqe   
  427c59:	add    rax,QWORD PTR [rbx+0x28]
  427c5d:	add    r13,0x8
  427c61:	mov    QWORD PTR [rbx+0x28],rax
  427c65:	cmp    r13,rbp
  427c68:	je     427cbc <flatcc_json_printer_int64_vector_field@@Base+0x18c>
  427c6a:	lea    rdx,[rax+0x1]
  427c6e:	mov    QWORD PTR [rbx+0x28],rdx
  427c72:	mov    BYTE PTR [rax],0x2c
  427c75:	cmp    BYTE PTR [rbx+0x31],0x0
  427c79:	je     427c20 <flatcc_json_printer_int64_vector_field@@Base+0xf0>
  427c7b:	mov    rax,QWORD PTR [rbx+0x28]
  427c7f:	lea    rdx,[rax+0x1]
  427c83:	mov    QWORD PTR [rbx+0x28],rdx
  427c87:	mov    BYTE PTR [rax],0xa
  427c8a:	movzx  esi,BYTE PTR [rbx+0x31]
  427c8e:	mov    rdi,QWORD PTR [rbx+0x28]
  427c92:	imul   esi,DWORD PTR [rbx+0x38]
  427c96:	movsxd r12,esi
  427c99:	lea    rax,[rdi+r12*1]
  427c9d:	cmp    QWORD PTR [rbx+0x20],rax
  427ca1:	jae    427d00 <flatcc_json_printer_int64_vector_field@@Base+0x1d0>
  427ca3:	mov    rsi,r12
  427ca6:	mov    rdi,rbx
  427ca9:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427cae:	mov    rsi,QWORD PTR [rbx+0x28]
  427cb2:	jmp    427c36 <flatcc_json_printer_int64_vector_field@@Base+0x106>
  427cb4:	nop    DWORD PTR [rax+0x0]
  427cb8:	mov    rax,QWORD PTR [rbx+0x28]
  427cbc:	cmp    BYTE PTR [rbx+0x31],0x0
  427cc0:	lea    rdx,[rax+0x1]
  427cc4:	jne    427d28 <flatcc_json_printer_int64_vector_field@@Base+0x1f8>
  427cc6:	mov    QWORD PTR [rbx+0x28],rdx
  427cca:	mov    BYTE PTR [rax],0x5d
  427ccd:	add    rsp,0x8
  427cd1:	pop    rbx
  427cd2:	pop    rbp
  427cd3:	pop    r12
  427cd5:	pop    r13
  427cd7:	ret    
  427cd8:	nop    DWORD PTR [rax+rax*1+0x0]
  427ce0:	lea    rax,[rsi+0x1]
  427ce4:	mov    QWORD PTR [rbx+0x28],rax
  427ce8:	mov    BYTE PTR [rsi],0xa
  427ceb:	mov    rdi,rbx
  427cee:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  427cf3:	mov    rsi,QWORD PTR [rbx+0x28]
  427cf7:	jmp    427bd4 <flatcc_json_printer_int64_vector_field@@Base+0xa4>
  427cfc:	nop    DWORD PTR [rax+0x0]
  427d00:	mov    esi,0x20
  427d05:	mov    rdx,r12
  427d08:	call   4061c0 <memset@plt>
  427d0d:	mov    rsi,QWORD PTR [rbx+0x28]
  427d11:	add    rsi,r12
  427d14:	mov    QWORD PTR [rbx+0x28],rsi
  427d18:	jmp    427c36 <flatcc_json_printer_int64_vector_field@@Base+0x106>
  427d1d:	nop    DWORD PTR [rax]
  427d20:	ret    
  427d21:	nop    DWORD PTR [rax+0x0]
  427d28:	mov    QWORD PTR [rbx+0x28],rdx
  427d2c:	mov    BYTE PTR [rax],0xa
  427d2f:	mov    eax,DWORD PTR [rbx+0x38]
  427d32:	mov    rdi,QWORD PTR [rbx+0x28]
  427d36:	lea    ebp,[rax-0x1]
  427d39:	movzx  eax,BYTE PTR [rbx+0x31]
  427d3d:	mov    DWORD PTR [rbx+0x38],ebp
  427d40:	imul   eax,ebp
  427d43:	movsxd rbp,eax
  427d46:	lea    rax,[rdi+rbp*1]
  427d4a:	cmp    QWORD PTR [rbx+0x20],rax
  427d4e:	jae    427d70 <flatcc_json_printer_int64_vector_field@@Base+0x240>
  427d50:	mov    rsi,rbp
  427d53:	mov    rdi,rbx
  427d56:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427d5b:	mov    rax,QWORD PTR [rbx+0x28]
  427d5f:	lea    rdx,[rax+0x1]
  427d63:	jmp    427cc6 <flatcc_json_printer_int64_vector_field@@Base+0x196>
  427d68:	nop    DWORD PTR [rax+rax*1+0x0]
  427d70:	mov    rdx,rbp
  427d73:	mov    esi,0x20
  427d78:	call   4061c0 <memset@plt>
  427d7d:	mov    rax,QWORD PTR [rbx+0x28]
  427d81:	add    rax,rbp
  427d84:	lea    rdx,[rax+0x1]
  427d88:	jmp    427cc6 <flatcc_json_printer_int64_vector_field@@Base+0x196>
  427d8d:	nop    DWORD PTR [rax]

0000000000427d90 <flatcc_json_printer_bool_vector_field@@Base>:
  427d90:	endbr64 
  427d94:	lea    eax,[rdx+rdx*1+0x4]
  427d98:	cmp    eax,DWORD PTR [rsi+0x10]
  427d9b:	jge    427f70 <flatcc_json_printer_bool_vector_field@@Base+0x1e0>
  427da1:	push   r13
  427da3:	push   r12
  427da5:	push   rbp
  427da6:	push   rbx
  427da7:	sub    rsp,0x8
  427dab:	mov    rdx,QWORD PTR [rsi+0x8]
  427daf:	movzx  ebp,WORD PTR [rdx+rax*1]
  427db3:	test   bp,bp
  427db6:	je     427f01 <flatcc_json_printer_bool_vector_field@@Base+0x171>
  427dbc:	add    rbp,QWORD PTR [rsi]
  427dbf:	je     427f01 <flatcc_json_printer_bool_vector_field@@Base+0x171>
  427dc5:	mov    eax,DWORD PTR [rsi+0x18]
  427dc8:	lea    edx,[rax+0x1]
  427dcb:	mov    DWORD PTR [rsi+0x18],edx
  427dce:	test   eax,eax
  427dd0:	je     427de1 <flatcc_json_printer_bool_vector_field@@Base+0x51>
  427dd2:	mov    rax,QWORD PTR [rdi+0x28]
  427dd6:	lea    rdx,[rax+0x1]
  427dda:	mov    QWORD PTR [rdi+0x28],rdx
  427dde:	mov    BYTE PTR [rax],0x2c
  427de1:	mov    eax,DWORD PTR [rbp+0x0]
  427de4:	mov    rbx,rdi
  427de7:	add    rbp,rax
  427dea:	movsxd rdx,r8d
  427ded:	mov    rsi,rcx
  427df0:	mov    r12d,DWORD PTR [rbp+0x0]
  427df4:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  427df9:	mov    rax,QWORD PTR [rbx+0x28]
  427dfd:	inc    DWORD PTR [rbx+0x38]
  427e00:	lea    rdx,[rax+0x1]
  427e04:	mov    QWORD PTR [rbx+0x28],rdx
  427e08:	mov    BYTE PTR [rax],0x5b
  427e0b:	test   r12d,r12d
  427e0e:	je     427ee8 <flatcc_json_printer_bool_vector_field@@Base+0x158>
  427e14:	cmp    BYTE PTR [rbx+0x31],0x0
  427e18:	mov    rsi,QWORD PTR [rbx+0x28]
  427e1c:	jne    427f10 <flatcc_json_printer_bool_vector_field@@Base+0x180>
  427e22:	cmp    QWORD PTR [rbx+0x20],rsi
  427e26:	ja     427e34 <flatcc_json_printer_bool_vector_field@@Base+0xa4>
  427e28:	xor    esi,esi
  427e2a:	mov    rdi,rbx
  427e2d:	call   QWORD PTR [rbx+0x48]
  427e30:	mov    rsi,QWORD PTR [rbx+0x28]
  427e34:	movzx  edi,BYTE PTR [rbp+0x4]
  427e38:	lea    r13,[rbp+0x5]
  427e3c:	call   421320 <flatcc_json_parser_struct_as_root@@Base+0xd50>
  427e41:	cdqe   
  427e43:	add    rax,QWORD PTR [rbx+0x28]
  427e47:	mov    QWORD PTR [rbx+0x28],rax
  427e4b:	lea    edx,[r12-0x2]
  427e50:	cmp    r12d,0x1
  427e54:	je     427eec <flatcc_json_printer_bool_vector_field@@Base+0x15c>
  427e5a:	lea    rbp,[rbp+rdx*1+0x6]
  427e5f:	jmp    427e9a <flatcc_json_printer_bool_vector_field@@Base+0x10a>
  427e61:	nop    DWORD PTR [rax+0x0]
  427e68:	mov    rsi,QWORD PTR [rbx+0x28]
  427e6c:	cmp    rsi,QWORD PTR [rbx+0x20]
  427e70:	jb     427e7e <flatcc_json_printer_bool_vector_field@@Base+0xee>
  427e72:	xor    esi,esi
  427e74:	mov    rdi,rbx
  427e77:	call   QWORD PTR [rbx+0x48]
  427e7a:	mov    rsi,QWORD PTR [rbx+0x28]
  427e7e:	movzx  edi,BYTE PTR [r13+0x0]
  427e83:	inc    r13
  427e86:	call   421320 <flatcc_json_parser_struct_as_root@@Base+0xd50>
  427e8b:	cdqe   
  427e8d:	add    rax,QWORD PTR [rbx+0x28]
  427e91:	mov    QWORD PTR [rbx+0x28],rax
  427e95:	cmp    r13,rbp
  427e98:	je     427eec <flatcc_json_printer_bool_vector_field@@Base+0x15c>
  427e9a:	lea    rdx,[rax+0x1]
  427e9e:	mov    QWORD PTR [rbx+0x28],rdx
  427ea2:	mov    BYTE PTR [rax],0x2c
  427ea5:	cmp    BYTE PTR [rbx+0x31],0x0
  427ea9:	je     427e68 <flatcc_json_printer_bool_vector_field@@Base+0xd8>
  427eab:	mov    rax,QWORD PTR [rbx+0x28]
  427eaf:	lea    rdx,[rax+0x1]
  427eb3:	mov    QWORD PTR [rbx+0x28],rdx
  427eb7:	mov    BYTE PTR [rax],0xa
  427eba:	movzx  esi,BYTE PTR [rbx+0x31]
  427ebe:	mov    rdi,QWORD PTR [rbx+0x28]
  427ec2:	imul   esi,DWORD PTR [rbx+0x38]
  427ec6:	movsxd r12,esi
  427ec9:	lea    rax,[rdi+r12*1]
  427ecd:	cmp    QWORD PTR [rbx+0x20],rax
  427ed1:	jae    427f50 <flatcc_json_printer_bool_vector_field@@Base+0x1c0>
  427ed3:	mov    rsi,r12
  427ed6:	mov    rdi,rbx
  427ed9:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427ede:	mov    rsi,QWORD PTR [rbx+0x28]
  427ee2:	jmp    427e7e <flatcc_json_printer_bool_vector_field@@Base+0xee>
  427ee4:	nop    DWORD PTR [rax+0x0]
  427ee8:	mov    rax,QWORD PTR [rbx+0x28]
  427eec:	cmp    BYTE PTR [rbx+0x31],0x0
  427ef0:	lea    rdx,[rax+0x1]
  427ef4:	jne    427f78 <flatcc_json_printer_bool_vector_field@@Base+0x1e8>
  427efa:	mov    QWORD PTR [rbx+0x28],rdx
  427efe:	mov    BYTE PTR [rax],0x5d
  427f01:	add    rsp,0x8
  427f05:	pop    rbx
  427f06:	pop    rbp
  427f07:	pop    r12
  427f09:	pop    r13
  427f0b:	ret    
  427f0c:	nop    DWORD PTR [rax+0x0]
  427f10:	lea    rax,[rsi+0x1]
  427f14:	mov    QWORD PTR [rbx+0x28],rax
  427f18:	mov    BYTE PTR [rsi],0xa
  427f1b:	movzx  esi,BYTE PTR [rbx+0x31]
  427f1f:	mov    rdi,QWORD PTR [rbx+0x28]
  427f23:	imul   esi,DWORD PTR [rbx+0x38]
  427f27:	movsxd r13,esi
  427f2a:	lea    rax,[rdi+r13*1]
  427f2e:	cmp    QWORD PTR [rbx+0x20],rax
  427f32:	jae    427fdd <flatcc_json_printer_bool_vector_field@@Base+0x24d>
  427f38:	mov    rsi,r13
  427f3b:	mov    rdi,rbx
  427f3e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427f43:	mov    rsi,QWORD PTR [rbx+0x28]
  427f47:	jmp    427e34 <flatcc_json_printer_bool_vector_field@@Base+0xa4>
  427f4c:	nop    DWORD PTR [rax+0x0]
  427f50:	mov    esi,0x20
  427f55:	mov    rdx,r12
  427f58:	call   4061c0 <memset@plt>
  427f5d:	mov    rsi,QWORD PTR [rbx+0x28]
  427f61:	add    rsi,r12
  427f64:	mov    QWORD PTR [rbx+0x28],rsi
  427f68:	jmp    427e7e <flatcc_json_printer_bool_vector_field@@Base+0xee>
  427f6d:	nop    DWORD PTR [rax]
  427f70:	ret    
  427f71:	nop    DWORD PTR [rax+0x0]
  427f78:	mov    QWORD PTR [rbx+0x28],rdx
  427f7c:	mov    BYTE PTR [rax],0xa
  427f7f:	mov    eax,DWORD PTR [rbx+0x38]
  427f82:	mov    rdi,QWORD PTR [rbx+0x28]
  427f86:	lea    ebp,[rax-0x1]
  427f89:	movzx  eax,BYTE PTR [rbx+0x31]
  427f8d:	mov    DWORD PTR [rbx+0x38],ebp
  427f90:	imul   eax,ebp
  427f93:	movsxd rbp,eax
  427f96:	lea    rax,[rdi+rbp*1]
  427f9a:	cmp    QWORD PTR [rbx+0x20],rax
  427f9e:	jae    427fc0 <flatcc_json_printer_bool_vector_field@@Base+0x230>
  427fa0:	mov    rsi,rbp
  427fa3:	mov    rdi,rbx
  427fa6:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  427fab:	mov    rax,QWORD PTR [rbx+0x28]
  427faf:	lea    rdx,[rax+0x1]
  427fb3:	jmp    427efa <flatcc_json_printer_bool_vector_field@@Base+0x16a>
  427fb8:	nop    DWORD PTR [rax+rax*1+0x0]
  427fc0:	mov    rdx,rbp
  427fc3:	mov    esi,0x20
  427fc8:	call   4061c0 <memset@plt>
  427fcd:	mov    rax,QWORD PTR [rbx+0x28]
  427fd1:	add    rax,rbp
  427fd4:	lea    rdx,[rax+0x1]
  427fd8:	jmp    427efa <flatcc_json_printer_bool_vector_field@@Base+0x16a>
  427fdd:	mov    esi,0x20
  427fe2:	mov    rdx,r13
  427fe5:	call   4061c0 <memset@plt>
  427fea:	mov    rsi,QWORD PTR [rbx+0x28]
  427fee:	add    rsi,r13
  427ff1:	mov    QWORD PTR [rbx+0x28],rsi
  427ff5:	jmp    427e34 <flatcc_json_printer_bool_vector_field@@Base+0xa4>
  427ffa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000428000 <flatcc_json_printer_float_vector_field@@Base>:
  428000:	endbr64 
  428004:	lea    eax,[rdx+rdx*1+0x4]
  428008:	cmp    eax,DWORD PTR [rsi+0x10]
  42800b:	jge    4281f0 <flatcc_json_printer_float_vector_field@@Base+0x1f0>
  428011:	push   r13
  428013:	push   r12
  428015:	push   rbp
  428016:	push   rbx
  428017:	sub    rsp,0x8
  42801b:	mov    rdx,QWORD PTR [rsi+0x8]
  42801f:	movzx  ebp,WORD PTR [rdx+rax*1]
  428023:	test   bp,bp
  428026:	je     428181 <flatcc_json_printer_float_vector_field@@Base+0x181>
  42802c:	add    rbp,QWORD PTR [rsi]
  42802f:	je     428181 <flatcc_json_printer_float_vector_field@@Base+0x181>
  428035:	mov    eax,DWORD PTR [rsi+0x18]
  428038:	lea    edx,[rax+0x1]
  42803b:	mov    DWORD PTR [rsi+0x18],edx
  42803e:	test   eax,eax
  428040:	je     428051 <flatcc_json_printer_float_vector_field@@Base+0x51>
  428042:	mov    rax,QWORD PTR [rdi+0x28]
  428046:	lea    rdx,[rax+0x1]
  42804a:	mov    QWORD PTR [rdi+0x28],rdx
  42804e:	mov    BYTE PTR [rax],0x2c
  428051:	mov    eax,DWORD PTR [rbp+0x0]
  428054:	mov    rbx,rdi
  428057:	add    rbp,rax
  42805a:	movsxd rdx,r8d
  42805d:	mov    rsi,rcx
  428060:	mov    r12d,DWORD PTR [rbp+0x0]
  428064:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  428069:	mov    rax,QWORD PTR [rbx+0x28]
  42806d:	inc    DWORD PTR [rbx+0x38]
  428070:	lea    rdx,[rax+0x1]
  428074:	mov    QWORD PTR [rbx+0x28],rdx
  428078:	mov    BYTE PTR [rax],0x5b
  42807b:	test   r12d,r12d
  42807e:	je     428168 <flatcc_json_printer_float_vector_field@@Base+0x168>
  428084:	cmp    BYTE PTR [rbx+0x31],0x0
  428088:	mov    rdi,QWORD PTR [rbx+0x28]
  42808c:	jne    428190 <flatcc_json_printer_float_vector_field@@Base+0x190>
  428092:	cmp    QWORD PTR [rbx+0x20],rdi
  428096:	ja     4280a4 <flatcc_json_printer_float_vector_field@@Base+0xa4>
  428098:	mov    rdi,rbx
  42809b:	xor    esi,esi
  42809d:	call   QWORD PTR [rbx+0x48]
  4280a0:	mov    rdi,QWORD PTR [rbx+0x28]
  4280a4:	vxorpd xmm0,xmm0,xmm0
  4280a8:	vcvtss2sd xmm0,xmm0,DWORD PTR [rbp+0x4]
  4280ad:	call   421540 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  4280b2:	cdqe   
  4280b4:	add    rax,QWORD PTR [rbx+0x28]
  4280b8:	mov    QWORD PTR [rbx+0x28],rax
  4280bc:	lea    r13,[rbp+0x8]
  4280c0:	lea    edx,[r12-0x2]
  4280c5:	cmp    r12d,0x1
  4280c9:	je     42816c <flatcc_json_printer_float_vector_field@@Base+0x16c>
  4280cf:	lea    rbp,[rbp+rdx*4+0xc]
  4280d4:	jmp    428118 <flatcc_json_printer_float_vector_field@@Base+0x118>
  4280d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4280e0:	mov    rdi,QWORD PTR [rbx+0x28]
  4280e4:	cmp    rdi,QWORD PTR [rbx+0x20]
  4280e8:	jb     4280f6 <flatcc_json_printer_float_vector_field@@Base+0xf6>
  4280ea:	mov    rdi,rbx
  4280ed:	xor    esi,esi
  4280ef:	call   QWORD PTR [rbx+0x48]
  4280f2:	mov    rdi,QWORD PTR [rbx+0x28]
  4280f6:	vxorpd xmm0,xmm0,xmm0
  4280fa:	vcvtss2sd xmm0,xmm0,DWORD PTR [r13+0x0]
  428100:	call   421540 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  428105:	cdqe   
  428107:	add    rax,QWORD PTR [rbx+0x28]
  42810b:	add    r13,0x4
  42810f:	mov    QWORD PTR [rbx+0x28],rax
  428113:	cmp    r13,rbp
  428116:	je     42816c <flatcc_json_printer_float_vector_field@@Base+0x16c>
  428118:	lea    rdx,[rax+0x1]
  42811c:	mov    QWORD PTR [rbx+0x28],rdx
  428120:	mov    BYTE PTR [rax],0x2c
  428123:	cmp    BYTE PTR [rbx+0x31],0x0
  428127:	je     4280e0 <flatcc_json_printer_float_vector_field@@Base+0xe0>
  428129:	mov    rax,QWORD PTR [rbx+0x28]
  42812d:	lea    rdx,[rax+0x1]
  428131:	mov    QWORD PTR [rbx+0x28],rdx
  428135:	mov    BYTE PTR [rax],0xa
  428138:	movzx  edi,BYTE PTR [rbx+0x31]
  42813c:	imul   edi,DWORD PTR [rbx+0x38]
  428140:	movsxd r12,edi
  428143:	mov    rdi,QWORD PTR [rbx+0x28]
  428147:	lea    rax,[rdi+r12*1]
  42814b:	cmp    QWORD PTR [rbx+0x20],rax
  42814f:	jae    4281d0 <flatcc_json_printer_float_vector_field@@Base+0x1d0>
  428151:	mov    rdi,rbx
  428154:	mov    rsi,r12
  428157:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42815c:	mov    rdi,QWORD PTR [rbx+0x28]
  428160:	jmp    4280f6 <flatcc_json_printer_float_vector_field@@Base+0xf6>
  428162:	nop    WORD PTR [rax+rax*1+0x0]
  428168:	mov    rax,QWORD PTR [rbx+0x28]
  42816c:	cmp    BYTE PTR [rbx+0x31],0x0
  428170:	lea    rdx,[rax+0x1]
  428174:	jne    4281f8 <flatcc_json_printer_float_vector_field@@Base+0x1f8>
  42817a:	mov    QWORD PTR [rbx+0x28],rdx
  42817e:	mov    BYTE PTR [rax],0x5d
  428181:	add    rsp,0x8
  428185:	pop    rbx
  428186:	pop    rbp
  428187:	pop    r12
  428189:	pop    r13
  42818b:	ret    
  42818c:	nop    DWORD PTR [rax+0x0]
  428190:	lea    rax,[rdi+0x1]
  428194:	mov    QWORD PTR [rbx+0x28],rax
  428198:	mov    BYTE PTR [rdi],0xa
  42819b:	movzx  edi,BYTE PTR [rbx+0x31]
  42819f:	imul   edi,DWORD PTR [rbx+0x38]
  4281a3:	movsxd r13,edi
  4281a6:	mov    rdi,QWORD PTR [rbx+0x28]
  4281aa:	lea    rax,[rdi+r13*1]
  4281ae:	cmp    QWORD PTR [rbx+0x20],rax
  4281b2:	jae    42825d <flatcc_json_printer_float_vector_field@@Base+0x25d>
  4281b8:	mov    rdi,rbx
  4281bb:	mov    rsi,r13
  4281be:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4281c3:	mov    rdi,QWORD PTR [rbx+0x28]
  4281c7:	jmp    4280a4 <flatcc_json_printer_float_vector_field@@Base+0xa4>
  4281cc:	nop    DWORD PTR [rax+0x0]
  4281d0:	mov    rdx,r12
  4281d3:	mov    esi,0x20
  4281d8:	call   4061c0 <memset@plt>
  4281dd:	mov    rdi,QWORD PTR [rbx+0x28]
  4281e1:	add    rdi,r12
  4281e4:	mov    QWORD PTR [rbx+0x28],rdi
  4281e8:	jmp    4280f6 <flatcc_json_printer_float_vector_field@@Base+0xf6>
  4281ed:	nop    DWORD PTR [rax]
  4281f0:	ret    
  4281f1:	nop    DWORD PTR [rax+0x0]
  4281f8:	mov    QWORD PTR [rbx+0x28],rdx
  4281fc:	mov    BYTE PTR [rax],0xa
  4281ff:	mov    eax,DWORD PTR [rbx+0x38]
  428202:	mov    rdi,QWORD PTR [rbx+0x28]
  428206:	lea    ebp,[rax-0x1]
  428209:	movzx  eax,BYTE PTR [rbx+0x31]
  42820d:	mov    DWORD PTR [rbx+0x38],ebp
  428210:	imul   eax,ebp
  428213:	movsxd rbp,eax
  428216:	lea    rax,[rdi+rbp*1]
  42821a:	cmp    QWORD PTR [rbx+0x20],rax
  42821e:	jae    428240 <flatcc_json_printer_float_vector_field@@Base+0x240>
  428220:	mov    rsi,rbp
  428223:	mov    rdi,rbx
  428226:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42822b:	mov    rax,QWORD PTR [rbx+0x28]
  42822f:	lea    rdx,[rax+0x1]
  428233:	jmp    42817a <flatcc_json_printer_float_vector_field@@Base+0x17a>
  428238:	nop    DWORD PTR [rax+rax*1+0x0]
  428240:	mov    rdx,rbp
  428243:	mov    esi,0x20
  428248:	call   4061c0 <memset@plt>
  42824d:	mov    rax,QWORD PTR [rbx+0x28]
  428251:	add    rax,rbp
  428254:	lea    rdx,[rax+0x1]
  428258:	jmp    42817a <flatcc_json_printer_float_vector_field@@Base+0x17a>
  42825d:	mov    rdx,r13
  428260:	mov    esi,0x20
  428265:	call   4061c0 <memset@plt>
  42826a:	mov    rdi,QWORD PTR [rbx+0x28]
  42826e:	add    rdi,r13
  428271:	mov    QWORD PTR [rbx+0x28],rdi
  428275:	jmp    4280a4 <flatcc_json_printer_float_vector_field@@Base+0xa4>
  42827a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000428280 <flatcc_json_printer_double_vector_field@@Base>:
  428280:	endbr64 
  428284:	lea    eax,[rdx+rdx*1+0x4]
  428288:	cmp    eax,DWORD PTR [rsi+0x10]
  42828b:	jge    4283e0 <flatcc_json_printer_double_vector_field@@Base+0x160>
  428291:	mov    rdx,QWORD PTR [rsi+0x8]
  428295:	movzx  eax,WORD PTR [rdx+rax*1]
  428299:	test   ax,ax
  42829c:	je     4283e0 <flatcc_json_printer_double_vector_field@@Base+0x160>
  4282a2:	add    rax,QWORD PTR [rsi]
  4282a5:	je     4283e0 <flatcc_json_printer_double_vector_field@@Base+0x160>
  4282ab:	push   r13
  4282ad:	push   r12
  4282af:	push   rbp
  4282b0:	push   rbx
  4282b1:	sub    rsp,0x8
  4282b5:	mov    edx,DWORD PTR [rsi+0x18]
  4282b8:	lea    r9d,[rdx+0x1]
  4282bc:	mov    DWORD PTR [rsi+0x18],r9d
  4282c0:	test   edx,edx
  4282c2:	je     4282d3 <flatcc_json_printer_double_vector_field@@Base+0x53>
  4282c4:	mov    rdx,QWORD PTR [rdi+0x28]
  4282c8:	lea    rsi,[rdx+0x1]
  4282cc:	mov    QWORD PTR [rdi+0x28],rsi
  4282d0:	mov    BYTE PTR [rdx],0x2c
  4282d3:	mov    r12d,DWORD PTR [rax]
  4282d6:	mov    rbx,rdi
  4282d9:	add    r12,rax
  4282dc:	movsxd rdx,r8d
  4282df:	mov    rsi,rcx
  4282e2:	mov    ebp,DWORD PTR [r12]
  4282e6:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  4282eb:	mov    rax,QWORD PTR [rbx+0x28]
  4282ef:	inc    DWORD PTR [rbx+0x38]
  4282f2:	lea    rdx,[rax+0x1]
  4282f6:	mov    QWORD PTR [rbx+0x28],rdx
  4282fa:	mov    BYTE PTR [rax],0x5b
  4282fd:	test   ebp,ebp
  4282ff:	je     4283e8 <flatcc_json_printer_double_vector_field@@Base+0x168>
  428305:	cmp    BYTE PTR [rbx+0x31],0x0
  428309:	mov    rdi,QWORD PTR [rbx+0x28]
  42830d:	jne    428410 <flatcc_json_printer_double_vector_field@@Base+0x190>
  428313:	cmp    QWORD PTR [rbx+0x20],rdi
  428317:	ja     428325 <flatcc_json_printer_double_vector_field@@Base+0xa5>
  428319:	mov    rdi,rbx
  42831c:	xor    esi,esi
  42831e:	call   QWORD PTR [rbx+0x48]
  428321:	mov    rdi,QWORD PTR [rbx+0x28]
  428325:	vmovsd xmm0,QWORD PTR [r12+0x4]
  42832c:	lea    r13,[r12+0xc]
  428331:	call   421540 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  428336:	cdqe   
  428338:	add    rax,QWORD PTR [rbx+0x28]
  42833c:	mov    QWORD PTR [rbx+0x28],rax
  428340:	lea    edx,[rbp-0x2]
  428343:	cmp    ebp,0x1
  428346:	je     4283ec <flatcc_json_printer_double_vector_field@@Base+0x16c>
  42834c:	lea    rbp,[r12+rdx*8+0x14]
  428351:	jmp    42838c <flatcc_json_printer_double_vector_field@@Base+0x10c>
  428353:	nop    DWORD PTR [rax+rax*1+0x0]
  428358:	mov    rdi,QWORD PTR [rbx+0x28]
  42835c:	cmp    rdi,QWORD PTR [rbx+0x20]
  428360:	jb     42836e <flatcc_json_printer_double_vector_field@@Base+0xee>
  428362:	mov    rdi,rbx
  428365:	xor    esi,esi
  428367:	call   QWORD PTR [rbx+0x48]
  42836a:	mov    rdi,QWORD PTR [rbx+0x28]
  42836e:	vmovsd xmm0,QWORD PTR [r13+0x0]
  428374:	add    r13,0x8
  428378:	call   421540 <flatcc_json_parser_struct_as_root@@Base+0xf70>
  42837d:	cdqe   
  42837f:	add    rax,QWORD PTR [rbx+0x28]
  428383:	mov    QWORD PTR [rbx+0x28],rax
  428387:	cmp    r13,rbp
  42838a:	je     4283ec <flatcc_json_printer_double_vector_field@@Base+0x16c>
  42838c:	lea    rdx,[rax+0x1]
  428390:	mov    QWORD PTR [rbx+0x28],rdx
  428394:	mov    BYTE PTR [rax],0x2c
  428397:	cmp    BYTE PTR [rbx+0x31],0x0
  42839b:	je     428358 <flatcc_json_printer_double_vector_field@@Base+0xd8>
  42839d:	mov    rax,QWORD PTR [rbx+0x28]
  4283a1:	lea    rdx,[rax+0x1]
  4283a5:	mov    QWORD PTR [rbx+0x28],rdx
  4283a9:	mov    BYTE PTR [rax],0xa
  4283ac:	movzx  edi,BYTE PTR [rbx+0x31]
  4283b0:	imul   edi,DWORD PTR [rbx+0x38]
  4283b4:	movsxd r12,edi
  4283b7:	mov    rdi,QWORD PTR [rbx+0x28]
  4283bb:	lea    rax,[rdi+r12*1]
  4283bf:	cmp    QWORD PTR [rbx+0x20],rax
  4283c3:	jae    428450 <flatcc_json_printer_double_vector_field@@Base+0x1d0>
  4283c9:	mov    rdi,rbx
  4283cc:	mov    rsi,r12
  4283cf:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4283d4:	mov    rdi,QWORD PTR [rbx+0x28]
  4283d8:	jmp    42836e <flatcc_json_printer_double_vector_field@@Base+0xee>
  4283da:	nop    WORD PTR [rax+rax*1+0x0]
  4283e0:	ret    
  4283e1:	nop    DWORD PTR [rax+0x0]
  4283e8:	mov    rax,QWORD PTR [rbx+0x28]
  4283ec:	cmp    BYTE PTR [rbx+0x31],0x0
  4283f0:	lea    rdx,[rax+0x1]
  4283f4:	jne    428470 <flatcc_json_printer_double_vector_field@@Base+0x1f0>
  4283f6:	mov    QWORD PTR [rbx+0x28],rdx
  4283fa:	mov    BYTE PTR [rax],0x5d
  4283fd:	add    rsp,0x8
  428401:	pop    rbx
  428402:	pop    rbp
  428403:	pop    r12
  428405:	pop    r13
  428407:	ret    
  428408:	nop    DWORD PTR [rax+rax*1+0x0]
  428410:	lea    rax,[rdi+0x1]
  428414:	mov    QWORD PTR [rbx+0x28],rax
  428418:	mov    BYTE PTR [rdi],0xa
  42841b:	movzx  edi,BYTE PTR [rbx+0x31]
  42841f:	imul   edi,DWORD PTR [rbx+0x38]
  428423:	movsxd r13,edi
  428426:	mov    rdi,QWORD PTR [rbx+0x28]
  42842a:	lea    rax,[rdi+r13*1]
  42842e:	cmp    QWORD PTR [rbx+0x20],rax
  428432:	jae    4284cd <flatcc_json_printer_double_vector_field@@Base+0x24d>
  428438:	mov    rdi,rbx
  42843b:	mov    rsi,r13
  42843e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428443:	mov    rdi,QWORD PTR [rbx+0x28]
  428447:	jmp    428325 <flatcc_json_printer_double_vector_field@@Base+0xa5>
  42844c:	nop    DWORD PTR [rax+0x0]
  428450:	mov    rdx,r12
  428453:	mov    esi,0x20
  428458:	call   4061c0 <memset@plt>
  42845d:	mov    rdi,QWORD PTR [rbx+0x28]
  428461:	add    rdi,r12
  428464:	mov    QWORD PTR [rbx+0x28],rdi
  428468:	jmp    42836e <flatcc_json_printer_double_vector_field@@Base+0xee>
  42846d:	nop    DWORD PTR [rax]
  428470:	mov    QWORD PTR [rbx+0x28],rdx
  428474:	mov    BYTE PTR [rax],0xa
  428477:	mov    eax,DWORD PTR [rbx+0x38]
  42847a:	mov    rdi,QWORD PTR [rbx+0x28]
  42847e:	lea    ebp,[rax-0x1]
  428481:	movzx  eax,BYTE PTR [rbx+0x31]
  428485:	mov    DWORD PTR [rbx+0x38],ebp
  428488:	imul   eax,ebp
  42848b:	movsxd rbp,eax
  42848e:	lea    rax,[rdi+rbp*1]
  428492:	cmp    QWORD PTR [rbx+0x20],rax
  428496:	jae    4284b0 <flatcc_json_printer_double_vector_field@@Base+0x230>
  428498:	mov    rsi,rbp
  42849b:	mov    rdi,rbx
  42849e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4284a3:	mov    rax,QWORD PTR [rbx+0x28]
  4284a7:	lea    rdx,[rax+0x1]
  4284ab:	jmp    4283f6 <flatcc_json_printer_double_vector_field@@Base+0x176>
  4284b0:	mov    rdx,rbp
  4284b3:	mov    esi,0x20
  4284b8:	call   4061c0 <memset@plt>
  4284bd:	mov    rax,QWORD PTR [rbx+0x28]
  4284c1:	add    rax,rbp
  4284c4:	lea    rdx,[rax+0x1]
  4284c8:	jmp    4283f6 <flatcc_json_printer_double_vector_field@@Base+0x176>
  4284cd:	mov    rdx,r13
  4284d0:	mov    esi,0x20
  4284d5:	call   4061c0 <memset@plt>
  4284da:	mov    rdi,QWORD PTR [rbx+0x28]
  4284de:	add    rdi,r13
  4284e1:	mov    QWORD PTR [rbx+0x28],rdi
  4284e5:	jmp    428325 <flatcc_json_printer_double_vector_field@@Base+0xa5>
  4284ea:	nop    WORD PTR [rax+rax*1+0x0]

00000000004284f0 <flatcc_json_printer_utype_enum_vector_field@@Base>:
  4284f0:	endbr64 
  4284f4:	cmp    BYTE PTR [rdi+0x33],0x0
  4284f8:	jne    428658 <flatcc_json_printer_utype_enum_vector_field@@Base+0x168>
  4284fe:	lea    eax,[rdx+rdx*1+0x4]
  428502:	cmp    eax,DWORD PTR [rsi+0x10]
  428505:	jge    428650 <flatcc_json_printer_utype_enum_vector_field@@Base+0x160>
  42850b:	mov    rdx,QWORD PTR [rsi+0x8]
  42850f:	movzx  eax,WORD PTR [rdx+rax*1]
  428513:	test   ax,ax
  428516:	je     428650 <flatcc_json_printer_utype_enum_vector_field@@Base+0x160>
  42851c:	add    rax,QWORD PTR [rsi]
  42851f:	je     428650 <flatcc_json_printer_utype_enum_vector_field@@Base+0x160>
  428525:	push   r14
  428527:	push   r13
  428529:	push   r12
  42852b:	push   rbp
  42852c:	push   rbx
  42852d:	mov    edx,DWORD PTR [rsi+0x18]
  428530:	lea    r10d,[rdx+0x1]
  428534:	mov    DWORD PTR [rsi+0x18],r10d
  428538:	test   edx,edx
  42853a:	je     42854b <flatcc_json_printer_utype_enum_vector_field@@Base+0x5b>
  42853c:	mov    rdx,QWORD PTR [rdi+0x28]
  428540:	lea    rsi,[rdx+0x1]
  428544:	mov    QWORD PTR [rdi+0x28],rsi
  428548:	mov    BYTE PTR [rdx],0x2c
  42854b:	mov    r12d,DWORD PTR [rax]
  42854e:	mov    rbx,rdi
  428551:	add    r12,rax
  428554:	movsxd rdx,r8d
  428557:	mov    rsi,rcx
  42855a:	mov    r13,r9
  42855d:	mov    r14d,DWORD PTR [r12]
  428561:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  428566:	mov    rax,QWORD PTR [rbx+0x28]
  42856a:	inc    DWORD PTR [rbx+0x38]
  42856d:	lea    rdx,[rax+0x1]
  428571:	mov    QWORD PTR [rbx+0x28],rdx
  428575:	mov    BYTE PTR [rax],0x5b
  428578:	test   r14d,r14d
  42857b:	je     428630 <flatcc_json_printer_utype_enum_vector_field@@Base+0x140>
  428581:	cmp    BYTE PTR [rbx+0x31],0x0
  428585:	mov    rax,QWORD PTR [rbx+0x28]
  428589:	jne    4286c0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d0>
  42858f:	cmp    QWORD PTR [rbx+0x20],rax
  428593:	ja     42859d <flatcc_json_printer_utype_enum_vector_field@@Base+0xad>
  428595:	xor    esi,esi
  428597:	mov    rdi,rbx
  42859a:	call   QWORD PTR [rbx+0x48]
  42859d:	movzx  esi,BYTE PTR [r12+0x4]
  4285a3:	mov    rdi,rbx
  4285a6:	call   r13
  4285a9:	lea    rbp,[r12+0x5]
  4285ae:	lea    eax,[r14-0x2]
  4285b2:	cmp    r14d,0x1
  4285b6:	je     428630 <flatcc_json_printer_utype_enum_vector_field@@Base+0x140>
  4285b8:	lea    r14,[r12+rax*1+0x6]
  4285bd:	jmp    4285e4 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf4>
  4285bf:	nop
  4285c0:	mov    rax,QWORD PTR [rbx+0x20]
  4285c4:	cmp    QWORD PTR [rbx+0x28],rax
  4285c8:	jb     4285d2 <flatcc_json_printer_utype_enum_vector_field@@Base+0xe2>
  4285ca:	xor    esi,esi
  4285cc:	mov    rdi,rbx
  4285cf:	call   QWORD PTR [rbx+0x48]
  4285d2:	movzx  esi,BYTE PTR [rbp+0x0]
  4285d6:	mov    rdi,rbx
  4285d9:	inc    rbp
  4285dc:	call   r13
  4285df:	cmp    rbp,r14
  4285e2:	je     428630 <flatcc_json_printer_utype_enum_vector_field@@Base+0x140>
  4285e4:	mov    rax,QWORD PTR [rbx+0x28]
  4285e8:	lea    rdx,[rax+0x1]
  4285ec:	mov    QWORD PTR [rbx+0x28],rdx
  4285f0:	mov    BYTE PTR [rax],0x2c
  4285f3:	cmp    BYTE PTR [rbx+0x31],0x0
  4285f7:	je     4285c0 <flatcc_json_printer_utype_enum_vector_field@@Base+0xd0>
  4285f9:	mov    rax,QWORD PTR [rbx+0x28]
  4285fd:	lea    rdx,[rax+0x1]
  428601:	mov    QWORD PTR [rbx+0x28],rdx
  428605:	mov    BYTE PTR [rax],0xa
  428608:	movzx  r12d,BYTE PTR [rbx+0x31]
  42860d:	mov    rdi,QWORD PTR [rbx+0x28]
  428611:	imul   r12d,DWORD PTR [rbx+0x38]
  428616:	movsxd r12,r12d
  428619:	lea    rax,[rdi+r12*1]
  42861d:	cmp    QWORD PTR [rbx+0x20],rax
  428621:	jae    428660 <flatcc_json_printer_utype_enum_vector_field@@Base+0x170>
  428623:	mov    rsi,r12
  428626:	mov    rdi,rbx
  428629:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42862e:	jmp    4285d2 <flatcc_json_printer_utype_enum_vector_field@@Base+0xe2>
  428630:	mov    rax,QWORD PTR [rbx+0x28]
  428634:	cmp    BYTE PTR [rbx+0x31],0x0
  428638:	lea    rdx,[rax+0x1]
  42863c:	jne    428680 <flatcc_json_printer_utype_enum_vector_field@@Base+0x190>
  42863e:	mov    QWORD PTR [rbx+0x28],rdx
  428642:	mov    BYTE PTR [rax],0x5d
  428645:	pop    rbx
  428646:	pop    rbp
  428647:	pop    r12
  428649:	pop    r13
  42864b:	pop    r14
  42864d:	ret    
  42864e:	xchg   ax,ax
  428650:	ret    
  428651:	nop    DWORD PTR [rax+0x0]
  428658:	jmp    426ce0 <flatcc_json_printer_utype_vector_field@@Base>
  42865d:	nop    DWORD PTR [rax]
  428660:	mov    rdx,r12
  428663:	mov    esi,0x20
  428668:	call   4061c0 <memset@plt>
  42866d:	add    QWORD PTR [rbx+0x28],r12
  428671:	jmp    4285d2 <flatcc_json_printer_utype_enum_vector_field@@Base+0xe2>
  428676:	nop    WORD PTR cs:[rax+rax*1+0x0]
  428680:	mov    QWORD PTR [rbx+0x28],rdx
  428684:	mov    BYTE PTR [rax],0xa
  428687:	mov    eax,DWORD PTR [rbx+0x38]
  42868a:	mov    rdi,QWORD PTR [rbx+0x28]
  42868e:	lea    ebp,[rax-0x1]
  428691:	movzx  eax,BYTE PTR [rbx+0x31]
  428695:	mov    DWORD PTR [rbx+0x38],ebp
  428698:	imul   eax,ebp
  42869b:	movsxd rbp,eax
  42869e:	lea    rax,[rdi+rbp*1]
  4286a2:	cmp    QWORD PTR [rbx+0x20],rax
  4286a6:	jae    4286e0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1f0>
  4286a8:	mov    rsi,rbp
  4286ab:	mov    rdi,rbx
  4286ae:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4286b3:	mov    rax,QWORD PTR [rbx+0x28]
  4286b7:	lea    rdx,[rax+0x1]
  4286bb:	jmp    42863e <flatcc_json_printer_utype_enum_vector_field@@Base+0x14e>
  4286bd:	nop    DWORD PTR [rax]
  4286c0:	lea    rdx,[rax+0x1]
  4286c4:	mov    QWORD PTR [rbx+0x28],rdx
  4286c8:	mov    BYTE PTR [rax],0xa
  4286cb:	mov    rdi,rbx
  4286ce:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  4286d3:	jmp    42859d <flatcc_json_printer_utype_enum_vector_field@@Base+0xad>
  4286d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4286e0:	mov    rdx,rbp
  4286e3:	mov    esi,0x20
  4286e8:	call   4061c0 <memset@plt>
  4286ed:	mov    rax,QWORD PTR [rbx+0x28]
  4286f1:	add    rax,rbp
  4286f4:	lea    rdx,[rax+0x1]
  4286f8:	jmp    42863e <flatcc_json_printer_utype_enum_vector_field@@Base+0x14e>
  4286fd:	nop    DWORD PTR [rax]

0000000000428700 <flatcc_json_printer_uint8_enum_vector_field@@Base>:
  428700:	endbr64 
  428704:	cmp    BYTE PTR [rdi+0x33],0x0
  428708:	jne    428868 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x168>
  42870e:	lea    eax,[rdx+rdx*1+0x4]
  428712:	cmp    eax,DWORD PTR [rsi+0x10]
  428715:	jge    428860 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x160>
  42871b:	mov    rdx,QWORD PTR [rsi+0x8]
  42871f:	movzx  eax,WORD PTR [rdx+rax*1]
  428723:	test   ax,ax
  428726:	je     428860 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x160>
  42872c:	add    rax,QWORD PTR [rsi]
  42872f:	je     428860 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x160>
  428735:	push   r14
  428737:	push   r13
  428739:	push   r12
  42873b:	push   rbp
  42873c:	push   rbx
  42873d:	mov    edx,DWORD PTR [rsi+0x18]
  428740:	lea    r10d,[rdx+0x1]
  428744:	mov    DWORD PTR [rsi+0x18],r10d
  428748:	test   edx,edx
  42874a:	je     42875b <flatcc_json_printer_uint8_enum_vector_field@@Base+0x5b>
  42874c:	mov    rdx,QWORD PTR [rdi+0x28]
  428750:	lea    rsi,[rdx+0x1]
  428754:	mov    QWORD PTR [rdi+0x28],rsi
  428758:	mov    BYTE PTR [rdx],0x2c
  42875b:	mov    r12d,DWORD PTR [rax]
  42875e:	mov    rbx,rdi
  428761:	add    r12,rax
  428764:	movsxd rdx,r8d
  428767:	mov    rsi,rcx
  42876a:	mov    r13,r9
  42876d:	mov    r14d,DWORD PTR [r12]
  428771:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  428776:	mov    rax,QWORD PTR [rbx+0x28]
  42877a:	inc    DWORD PTR [rbx+0x38]
  42877d:	lea    rdx,[rax+0x1]
  428781:	mov    QWORD PTR [rbx+0x28],rdx
  428785:	mov    BYTE PTR [rax],0x5b
  428788:	test   r14d,r14d
  42878b:	je     428840 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
  428791:	cmp    BYTE PTR [rbx+0x31],0x0
  428795:	mov    rax,QWORD PTR [rbx+0x28]
  428799:	jne    4288d0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d0>
  42879f:	cmp    QWORD PTR [rbx+0x20],rax
  4287a3:	ja     4287ad <flatcc_json_printer_uint8_enum_vector_field@@Base+0xad>
  4287a5:	xor    esi,esi
  4287a7:	mov    rdi,rbx
  4287aa:	call   QWORD PTR [rbx+0x48]
  4287ad:	movzx  esi,BYTE PTR [r12+0x4]
  4287b3:	mov    rdi,rbx
  4287b6:	call   r13
  4287b9:	lea    rbp,[r12+0x5]
  4287be:	lea    eax,[r14-0x2]
  4287c2:	cmp    r14d,0x1
  4287c6:	je     428840 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
  4287c8:	lea    r14,[r12+rax*1+0x6]
  4287cd:	jmp    4287f4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf4>
  4287cf:	nop
  4287d0:	mov    rax,QWORD PTR [rbx+0x20]
  4287d4:	cmp    QWORD PTR [rbx+0x28],rax
  4287d8:	jb     4287e2 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xe2>
  4287da:	xor    esi,esi
  4287dc:	mov    rdi,rbx
  4287df:	call   QWORD PTR [rbx+0x48]
  4287e2:	movzx  esi,BYTE PTR [rbp+0x0]
  4287e6:	mov    rdi,rbx
  4287e9:	inc    rbp
  4287ec:	call   r13
  4287ef:	cmp    rbp,r14
  4287f2:	je     428840 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
  4287f4:	mov    rax,QWORD PTR [rbx+0x28]
  4287f8:	lea    rdx,[rax+0x1]
  4287fc:	mov    QWORD PTR [rbx+0x28],rdx
  428800:	mov    BYTE PTR [rax],0x2c
  428803:	cmp    BYTE PTR [rbx+0x31],0x0
  428807:	je     4287d0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xd0>
  428809:	mov    rax,QWORD PTR [rbx+0x28]
  42880d:	lea    rdx,[rax+0x1]
  428811:	mov    QWORD PTR [rbx+0x28],rdx
  428815:	mov    BYTE PTR [rax],0xa
  428818:	movzx  r12d,BYTE PTR [rbx+0x31]
  42881d:	mov    rdi,QWORD PTR [rbx+0x28]
  428821:	imul   r12d,DWORD PTR [rbx+0x38]
  428826:	movsxd r12,r12d
  428829:	lea    rax,[rdi+r12*1]
  42882d:	cmp    QWORD PTR [rbx+0x20],rax
  428831:	jae    428870 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x170>
  428833:	mov    rsi,r12
  428836:	mov    rdi,rbx
  428839:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42883e:	jmp    4287e2 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xe2>
  428840:	mov    rax,QWORD PTR [rbx+0x28]
  428844:	cmp    BYTE PTR [rbx+0x31],0x0
  428848:	lea    rdx,[rax+0x1]
  42884c:	jne    428890 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x190>
  42884e:	mov    QWORD PTR [rbx+0x28],rdx
  428852:	mov    BYTE PTR [rax],0x5d
  428855:	pop    rbx
  428856:	pop    rbp
  428857:	pop    r12
  428859:	pop    r13
  42885b:	pop    r14
  42885d:	ret    
  42885e:	xchg   ax,ax
  428860:	ret    
  428861:	nop    DWORD PTR [rax+0x0]
  428868:	jmp    426a70 <flatcc_json_printer_uint8_vector_field@@Base>
  42886d:	nop    DWORD PTR [rax]
  428870:	mov    rdx,r12
  428873:	mov    esi,0x20
  428878:	call   4061c0 <memset@plt>
  42887d:	add    QWORD PTR [rbx+0x28],r12
  428881:	jmp    4287e2 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xe2>
  428886:	nop    WORD PTR cs:[rax+rax*1+0x0]
  428890:	mov    QWORD PTR [rbx+0x28],rdx
  428894:	mov    BYTE PTR [rax],0xa
  428897:	mov    eax,DWORD PTR [rbx+0x38]
  42889a:	mov    rdi,QWORD PTR [rbx+0x28]
  42889e:	lea    ebp,[rax-0x1]
  4288a1:	movzx  eax,BYTE PTR [rbx+0x31]
  4288a5:	mov    DWORD PTR [rbx+0x38],ebp
  4288a8:	imul   eax,ebp
  4288ab:	movsxd rbp,eax
  4288ae:	lea    rax,[rdi+rbp*1]
  4288b2:	cmp    QWORD PTR [rbx+0x20],rax
  4288b6:	jae    4288f0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1f0>
  4288b8:	mov    rsi,rbp
  4288bb:	mov    rdi,rbx
  4288be:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4288c3:	mov    rax,QWORD PTR [rbx+0x28]
  4288c7:	lea    rdx,[rax+0x1]
  4288cb:	jmp    42884e <flatcc_json_printer_uint8_enum_vector_field@@Base+0x14e>
  4288cd:	nop    DWORD PTR [rax]
  4288d0:	lea    rdx,[rax+0x1]
  4288d4:	mov    QWORD PTR [rbx+0x28],rdx
  4288d8:	mov    BYTE PTR [rax],0xa
  4288db:	mov    rdi,rbx
  4288de:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  4288e3:	jmp    4287ad <flatcc_json_printer_uint8_enum_vector_field@@Base+0xad>
  4288e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4288f0:	mov    rdx,rbp
  4288f3:	mov    esi,0x20
  4288f8:	call   4061c0 <memset@plt>
  4288fd:	mov    rax,QWORD PTR [rbx+0x28]
  428901:	add    rax,rbp
  428904:	lea    rdx,[rax+0x1]
  428908:	jmp    42884e <flatcc_json_printer_uint8_enum_vector_field@@Base+0x14e>
  42890d:	nop    DWORD PTR [rax]

0000000000428910 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
  428910:	endbr64 
  428914:	cmp    BYTE PTR [rdi+0x33],0x0
  428918:	jne    428a88 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x178>
  42891e:	lea    eax,[rdx+rdx*1+0x4]
  428922:	cmp    eax,DWORD PTR [rsi+0x10]
  428925:	jge    428a80 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x170>
  42892b:	mov    rdx,QWORD PTR [rsi+0x8]
  42892f:	movzx  eax,WORD PTR [rdx+rax*1]
  428933:	test   ax,ax
  428936:	je     428a80 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x170>
  42893c:	add    rax,QWORD PTR [rsi]
  42893f:	je     428a80 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x170>
  428945:	push   r14
  428947:	push   r13
  428949:	push   r12
  42894b:	push   rbp
  42894c:	push   rbx
  42894d:	mov    edx,DWORD PTR [rsi+0x18]
  428950:	lea    r10d,[rdx+0x1]
  428954:	mov    DWORD PTR [rsi+0x18],r10d
  428958:	test   edx,edx
  42895a:	je     42896b <flatcc_json_printer_uint16_enum_vector_field@@Base+0x5b>
  42895c:	mov    rdx,QWORD PTR [rdi+0x28]
  428960:	lea    rsi,[rdx+0x1]
  428964:	mov    QWORD PTR [rdi+0x28],rsi
  428968:	mov    BYTE PTR [rdx],0x2c
  42896b:	mov    r12d,DWORD PTR [rax]
  42896e:	mov    rbx,rdi
  428971:	add    r12,rax
  428974:	movsxd rdx,r8d
  428977:	mov    rsi,rcx
  42897a:	mov    r13,r9
  42897d:	mov    r14d,DWORD PTR [r12]
  428981:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  428986:	mov    rax,QWORD PTR [rbx+0x28]
  42898a:	inc    DWORD PTR [rbx+0x38]
  42898d:	lea    rdx,[rax+0x1]
  428991:	mov    QWORD PTR [rbx+0x28],rdx
  428995:	mov    BYTE PTR [rax],0x5b
  428998:	test   r14d,r14d
  42899b:	je     428a60 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x150>
  4289a1:	cmp    BYTE PTR [rbx+0x31],0x0
  4289a5:	mov    rax,QWORD PTR [rbx+0x28]
  4289a9:	jne    428af0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1e0>
  4289af:	cmp    QWORD PTR [rbx+0x20],rax
  4289b3:	ja     4289bd <flatcc_json_printer_uint16_enum_vector_field@@Base+0xad>
  4289b5:	xor    esi,esi
  4289b7:	mov    rdi,rbx
  4289ba:	call   QWORD PTR [rbx+0x48]
  4289bd:	movzx  esi,WORD PTR [r12+0x4]
  4289c3:	mov    rdi,rbx
  4289c6:	call   r13
  4289c9:	lea    rbp,[r12+0x6]
  4289ce:	lea    eax,[r14-0x2]
  4289d2:	cmp    r14d,0x1
  4289d6:	je     428a60 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x150>
  4289dc:	lea    r14,[r12+rax*2+0x8]
  4289e1:	jmp    428a0d <flatcc_json_printer_uint16_enum_vector_field@@Base+0xfd>
  4289e3:	nop    DWORD PTR [rax+rax*1+0x0]
  4289e8:	mov    rax,QWORD PTR [rbx+0x20]
  4289ec:	cmp    QWORD PTR [rbx+0x28],rax
  4289f0:	jb     4289fa <flatcc_json_printer_uint16_enum_vector_field@@Base+0xea>
  4289f2:	xor    esi,esi
  4289f4:	mov    rdi,rbx
  4289f7:	call   QWORD PTR [rbx+0x48]
  4289fa:	movzx  esi,WORD PTR [rbp+0x0]
  4289fe:	mov    rdi,rbx
  428a01:	add    rbp,0x2
  428a05:	call   r13
  428a08:	cmp    rbp,r14
  428a0b:	je     428a60 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x150>
  428a0d:	mov    rax,QWORD PTR [rbx+0x28]
  428a11:	lea    rdx,[rax+0x1]
  428a15:	mov    QWORD PTR [rbx+0x28],rdx
  428a19:	mov    BYTE PTR [rax],0x2c
  428a1c:	cmp    BYTE PTR [rbx+0x31],0x0
  428a20:	je     4289e8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xd8>
  428a22:	mov    rax,QWORD PTR [rbx+0x28]
  428a26:	lea    rdx,[rax+0x1]
  428a2a:	mov    QWORD PTR [rbx+0x28],rdx
  428a2e:	mov    BYTE PTR [rax],0xa
  428a31:	movzx  r12d,BYTE PTR [rbx+0x31]
  428a36:	mov    rdi,QWORD PTR [rbx+0x28]
  428a3a:	imul   r12d,DWORD PTR [rbx+0x38]
  428a3f:	movsxd r12,r12d
  428a42:	lea    rax,[rdi+r12*1]
  428a46:	cmp    QWORD PTR [rbx+0x20],rax
  428a4a:	jae    428a90 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x180>
  428a4c:	mov    rsi,r12
  428a4f:	mov    rdi,rbx
  428a52:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428a57:	jmp    4289fa <flatcc_json_printer_uint16_enum_vector_field@@Base+0xea>
  428a59:	nop    DWORD PTR [rax+0x0]
  428a60:	mov    rax,QWORD PTR [rbx+0x28]
  428a64:	cmp    BYTE PTR [rbx+0x31],0x0
  428a68:	lea    rdx,[rax+0x1]
  428a6c:	jne    428ab0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1a0>
  428a6e:	mov    QWORD PTR [rbx+0x28],rdx
  428a72:	mov    BYTE PTR [rax],0x5d
  428a75:	pop    rbx
  428a76:	pop    rbp
  428a77:	pop    r12
  428a79:	pop    r13
  428a7b:	pop    r14
  428a7d:	ret    
  428a7e:	xchg   ax,ax
  428a80:	ret    
  428a81:	nop    DWORD PTR [rax+0x0]
  428a88:	jmp    426cf0 <flatcc_json_printer_uint16_vector_field@@Base>
  428a8d:	nop    DWORD PTR [rax]
  428a90:	mov    rdx,r12
  428a93:	mov    esi,0x20
  428a98:	call   4061c0 <memset@plt>
  428a9d:	add    QWORD PTR [rbx+0x28],r12
  428aa1:	jmp    4289fa <flatcc_json_printer_uint16_enum_vector_field@@Base+0xea>
  428aa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  428ab0:	mov    QWORD PTR [rbx+0x28],rdx
  428ab4:	mov    BYTE PTR [rax],0xa
  428ab7:	mov    eax,DWORD PTR [rbx+0x38]
  428aba:	mov    rdi,QWORD PTR [rbx+0x28]
  428abe:	lea    ebp,[rax-0x1]
  428ac1:	movzx  eax,BYTE PTR [rbx+0x31]
  428ac5:	mov    DWORD PTR [rbx+0x38],ebp
  428ac8:	imul   eax,ebp
  428acb:	movsxd rbp,eax
  428ace:	lea    rax,[rdi+rbp*1]
  428ad2:	cmp    QWORD PTR [rbx+0x20],rax
  428ad6:	jae    428b10 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x200>
  428ad8:	mov    rsi,rbp
  428adb:	mov    rdi,rbx
  428ade:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428ae3:	mov    rax,QWORD PTR [rbx+0x28]
  428ae7:	lea    rdx,[rax+0x1]
  428aeb:	jmp    428a6e <flatcc_json_printer_uint16_enum_vector_field@@Base+0x15e>
  428af0:	lea    rdx,[rax+0x1]
  428af4:	mov    QWORD PTR [rbx+0x28],rdx
  428af8:	mov    BYTE PTR [rax],0xa
  428afb:	mov    rdi,rbx
  428afe:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  428b03:	jmp    4289bd <flatcc_json_printer_uint16_enum_vector_field@@Base+0xad>
  428b08:	nop    DWORD PTR [rax+rax*1+0x0]
  428b10:	mov    rdx,rbp
  428b13:	mov    esi,0x20
  428b18:	call   4061c0 <memset@plt>
  428b1d:	mov    rax,QWORD PTR [rbx+0x28]
  428b21:	add    rax,rbp
  428b24:	lea    rdx,[rax+0x1]
  428b28:	jmp    428a6e <flatcc_json_printer_uint16_enum_vector_field@@Base+0x15e>
  428b2d:	nop    DWORD PTR [rax]

0000000000428b30 <flatcc_json_printer_uint32_enum_vector_field@@Base>:
  428b30:	endbr64 
  428b34:	cmp    BYTE PTR [rdi+0x33],0x0
  428b38:	jne    428c98 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x168>
  428b3e:	lea    eax,[rdx+rdx*1+0x4]
  428b42:	cmp    eax,DWORD PTR [rsi+0x10]
  428b45:	jge    428c90 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x160>
  428b4b:	mov    rdx,QWORD PTR [rsi+0x8]
  428b4f:	movzx  eax,WORD PTR [rdx+rax*1]
  428b53:	test   ax,ax
  428b56:	je     428c90 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x160>
  428b5c:	add    rax,QWORD PTR [rsi]
  428b5f:	je     428c90 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x160>
  428b65:	push   r14
  428b67:	push   r13
  428b69:	push   r12
  428b6b:	push   rbp
  428b6c:	push   rbx
  428b6d:	mov    edx,DWORD PTR [rsi+0x18]
  428b70:	lea    r10d,[rdx+0x1]
  428b74:	mov    DWORD PTR [rsi+0x18],r10d
  428b78:	test   edx,edx
  428b7a:	je     428b8b <flatcc_json_printer_uint32_enum_vector_field@@Base+0x5b>
  428b7c:	mov    rdx,QWORD PTR [rdi+0x28]
  428b80:	lea    rsi,[rdx+0x1]
  428b84:	mov    QWORD PTR [rdi+0x28],rsi
  428b88:	mov    BYTE PTR [rdx],0x2c
  428b8b:	mov    r12d,DWORD PTR [rax]
  428b8e:	mov    rbx,rdi
  428b91:	add    r12,rax
  428b94:	movsxd rdx,r8d
  428b97:	mov    rsi,rcx
  428b9a:	mov    r13,r9
  428b9d:	mov    r14d,DWORD PTR [r12]
  428ba1:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  428ba6:	mov    rax,QWORD PTR [rbx+0x28]
  428baa:	inc    DWORD PTR [rbx+0x38]
  428bad:	lea    rdx,[rax+0x1]
  428bb1:	mov    QWORD PTR [rbx+0x28],rdx
  428bb5:	mov    BYTE PTR [rax],0x5b
  428bb8:	test   r14d,r14d
  428bbb:	je     428c70 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x140>
  428bc1:	cmp    BYTE PTR [rbx+0x31],0x0
  428bc5:	mov    rax,QWORD PTR [rbx+0x28]
  428bc9:	jne    428d00 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d0>
  428bcf:	cmp    QWORD PTR [rbx+0x20],rax
  428bd3:	ja     428bdd <flatcc_json_printer_uint32_enum_vector_field@@Base+0xad>
  428bd5:	xor    esi,esi
  428bd7:	mov    rdi,rbx
  428bda:	call   QWORD PTR [rbx+0x48]
  428bdd:	mov    esi,DWORD PTR [r12+0x4]
  428be2:	mov    rdi,rbx
  428be5:	call   r13
  428be8:	lea    rbp,[r12+0x8]
  428bed:	lea    eax,[r14-0x2]
  428bf1:	cmp    r14d,0x1
  428bf5:	je     428c70 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x140>
  428bf7:	lea    r14,[r12+rax*4+0xc]
  428bfc:	jmp    428c24 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
  428bfe:	xchg   ax,ax
  428c00:	mov    rax,QWORD PTR [rbx+0x20]
  428c04:	cmp    QWORD PTR [rbx+0x28],rax
  428c08:	jb     428c12 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xe2>
  428c0a:	xor    esi,esi
  428c0c:	mov    rdi,rbx
  428c0f:	call   QWORD PTR [rbx+0x48]
  428c12:	mov    esi,DWORD PTR [rbp+0x0]
  428c15:	mov    rdi,rbx
  428c18:	add    rbp,0x4
  428c1c:	call   r13
  428c1f:	cmp    rbp,r14
  428c22:	je     428c70 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x140>
  428c24:	mov    rax,QWORD PTR [rbx+0x28]
  428c28:	lea    rdx,[rax+0x1]
  428c2c:	mov    QWORD PTR [rbx+0x28],rdx
  428c30:	mov    BYTE PTR [rax],0x2c
  428c33:	cmp    BYTE PTR [rbx+0x31],0x0
  428c37:	je     428c00 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xd0>
  428c39:	mov    rax,QWORD PTR [rbx+0x28]
  428c3d:	lea    rdx,[rax+0x1]
  428c41:	mov    QWORD PTR [rbx+0x28],rdx
  428c45:	mov    BYTE PTR [rax],0xa
  428c48:	movzx  r12d,BYTE PTR [rbx+0x31]
  428c4d:	mov    rdi,QWORD PTR [rbx+0x28]
  428c51:	imul   r12d,DWORD PTR [rbx+0x38]
  428c56:	movsxd r12,r12d
  428c59:	lea    rax,[rdi+r12*1]
  428c5d:	cmp    QWORD PTR [rbx+0x20],rax
  428c61:	jae    428ca0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x170>
  428c63:	mov    rsi,r12
  428c66:	mov    rdi,rbx
  428c69:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428c6e:	jmp    428c12 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xe2>
  428c70:	mov    rax,QWORD PTR [rbx+0x28]
  428c74:	cmp    BYTE PTR [rbx+0x31],0x0
  428c78:	lea    rdx,[rax+0x1]
  428c7c:	jne    428cc0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x190>
  428c7e:	mov    QWORD PTR [rbx+0x28],rdx
  428c82:	mov    BYTE PTR [rax],0x5d
  428c85:	pop    rbx
  428c86:	pop    rbp
  428c87:	pop    r12
  428c89:	pop    r13
  428c8b:	pop    r14
  428c8d:	ret    
  428c8e:	xchg   ax,ax
  428c90:	ret    
  428c91:	nop    DWORD PTR [rax+0x0]
  428c98:	jmp    426f60 <flatcc_json_printer_uint32_vector_field@@Base>
  428c9d:	nop    DWORD PTR [rax]
  428ca0:	mov    rdx,r12
  428ca3:	mov    esi,0x20
  428ca8:	call   4061c0 <memset@plt>
  428cad:	add    QWORD PTR [rbx+0x28],r12
  428cb1:	jmp    428c12 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xe2>
  428cb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  428cc0:	mov    QWORD PTR [rbx+0x28],rdx
  428cc4:	mov    BYTE PTR [rax],0xa
  428cc7:	mov    eax,DWORD PTR [rbx+0x38]
  428cca:	mov    rdi,QWORD PTR [rbx+0x28]
  428cce:	lea    ebp,[rax-0x1]
  428cd1:	movzx  eax,BYTE PTR [rbx+0x31]
  428cd5:	mov    DWORD PTR [rbx+0x38],ebp
  428cd8:	imul   eax,ebp
  428cdb:	movsxd rbp,eax
  428cde:	lea    rax,[rdi+rbp*1]
  428ce2:	cmp    QWORD PTR [rbx+0x20],rax
  428ce6:	jae    428d20 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1f0>
  428ce8:	mov    rsi,rbp
  428ceb:	mov    rdi,rbx
  428cee:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428cf3:	mov    rax,QWORD PTR [rbx+0x28]
  428cf7:	lea    rdx,[rax+0x1]
  428cfb:	jmp    428c7e <flatcc_json_printer_uint32_enum_vector_field@@Base+0x14e>
  428cfd:	nop    DWORD PTR [rax]
  428d00:	lea    rdx,[rax+0x1]
  428d04:	mov    QWORD PTR [rbx+0x28],rdx
  428d08:	mov    BYTE PTR [rax],0xa
  428d0b:	mov    rdi,rbx
  428d0e:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  428d13:	jmp    428bdd <flatcc_json_printer_uint32_enum_vector_field@@Base+0xad>
  428d18:	nop    DWORD PTR [rax+rax*1+0x0]
  428d20:	mov    rdx,rbp
  428d23:	mov    esi,0x20
  428d28:	call   4061c0 <memset@plt>
  428d2d:	mov    rax,QWORD PTR [rbx+0x28]
  428d31:	add    rax,rbp
  428d34:	lea    rdx,[rax+0x1]
  428d38:	jmp    428c7e <flatcc_json_printer_uint32_enum_vector_field@@Base+0x14e>
  428d3d:	nop    DWORD PTR [rax]

0000000000428d40 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
  428d40:	endbr64 
  428d44:	cmp    BYTE PTR [rdi+0x33],0x0
  428d48:	jne    428eb8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x178>
  428d4e:	lea    eax,[rdx+rdx*1+0x4]
  428d52:	cmp    eax,DWORD PTR [rsi+0x10]
  428d55:	jge    428eb0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x170>
  428d5b:	mov    rdx,QWORD PTR [rsi+0x8]
  428d5f:	movzx  eax,WORD PTR [rdx+rax*1]
  428d63:	test   ax,ax
  428d66:	je     428eb0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x170>
  428d6c:	add    rax,QWORD PTR [rsi]
  428d6f:	je     428eb0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x170>
  428d75:	push   r14
  428d77:	push   r13
  428d79:	push   r12
  428d7b:	push   rbp
  428d7c:	push   rbx
  428d7d:	mov    edx,DWORD PTR [rsi+0x18]
  428d80:	lea    r10d,[rdx+0x1]
  428d84:	mov    DWORD PTR [rsi+0x18],r10d
  428d88:	test   edx,edx
  428d8a:	je     428d9b <flatcc_json_printer_uint64_enum_vector_field@@Base+0x5b>
  428d8c:	mov    rdx,QWORD PTR [rdi+0x28]
  428d90:	lea    rsi,[rdx+0x1]
  428d94:	mov    QWORD PTR [rdi+0x28],rsi
  428d98:	mov    BYTE PTR [rdx],0x2c
  428d9b:	mov    r12d,DWORD PTR [rax]
  428d9e:	mov    rbx,rdi
  428da1:	add    r12,rax
  428da4:	movsxd rdx,r8d
  428da7:	mov    rsi,rcx
  428daa:	mov    r13,r9
  428dad:	mov    r14d,DWORD PTR [r12]
  428db1:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  428db6:	mov    rax,QWORD PTR [rbx+0x28]
  428dba:	inc    DWORD PTR [rbx+0x38]
  428dbd:	lea    rdx,[rax+0x1]
  428dc1:	mov    QWORD PTR [rbx+0x28],rdx
  428dc5:	mov    BYTE PTR [rax],0x5b
  428dc8:	test   r14d,r14d
  428dcb:	je     428e90 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x150>
  428dd1:	cmp    BYTE PTR [rbx+0x31],0x0
  428dd5:	mov    rax,QWORD PTR [rbx+0x28]
  428dd9:	jne    428f20 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1e0>
  428ddf:	cmp    QWORD PTR [rbx+0x20],rax
  428de3:	ja     428ded <flatcc_json_printer_uint64_enum_vector_field@@Base+0xad>
  428de5:	xor    esi,esi
  428de7:	mov    rdi,rbx
  428dea:	call   QWORD PTR [rbx+0x48]
  428ded:	mov    rsi,QWORD PTR [r12+0x4]
  428df2:	mov    rdi,rbx
  428df5:	call   r13
  428df8:	lea    rbp,[r12+0xc]
  428dfd:	lea    eax,[r14-0x2]
  428e01:	cmp    r14d,0x1
  428e05:	je     428e90 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x150>
  428e0b:	lea    r14,[r12+rax*8+0x14]
  428e10:	jmp    428e3d <flatcc_json_printer_uint64_enum_vector_field@@Base+0xfd>
  428e12:	nop    WORD PTR [rax+rax*1+0x0]
  428e18:	mov    rax,QWORD PTR [rbx+0x20]
  428e1c:	cmp    QWORD PTR [rbx+0x28],rax
  428e20:	jb     428e2a <flatcc_json_printer_uint64_enum_vector_field@@Base+0xea>
  428e22:	xor    esi,esi
  428e24:	mov    rdi,rbx
  428e27:	call   QWORD PTR [rbx+0x48]
  428e2a:	mov    rsi,QWORD PTR [rbp+0x0]
  428e2e:	mov    rdi,rbx
  428e31:	add    rbp,0x8
  428e35:	call   r13
  428e38:	cmp    rbp,r14
  428e3b:	je     428e90 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x150>
  428e3d:	mov    rax,QWORD PTR [rbx+0x28]
  428e41:	lea    rdx,[rax+0x1]
  428e45:	mov    QWORD PTR [rbx+0x28],rdx
  428e49:	mov    BYTE PTR [rax],0x2c
  428e4c:	cmp    BYTE PTR [rbx+0x31],0x0
  428e50:	je     428e18 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xd8>
  428e52:	mov    rax,QWORD PTR [rbx+0x28]
  428e56:	lea    rdx,[rax+0x1]
  428e5a:	mov    QWORD PTR [rbx+0x28],rdx
  428e5e:	mov    BYTE PTR [rax],0xa
  428e61:	movzx  r12d,BYTE PTR [rbx+0x31]
  428e66:	mov    rdi,QWORD PTR [rbx+0x28]
  428e6a:	imul   r12d,DWORD PTR [rbx+0x38]
  428e6f:	movsxd r12,r12d
  428e72:	lea    rax,[rdi+r12*1]
  428e76:	cmp    QWORD PTR [rbx+0x20],rax
  428e7a:	jae    428ec0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x180>
  428e7c:	mov    rsi,r12
  428e7f:	mov    rdi,rbx
  428e82:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428e87:	jmp    428e2a <flatcc_json_printer_uint64_enum_vector_field@@Base+0xea>
  428e89:	nop    DWORD PTR [rax+0x0]
  428e90:	mov    rax,QWORD PTR [rbx+0x28]
  428e94:	cmp    BYTE PTR [rbx+0x31],0x0
  428e98:	lea    rdx,[rax+0x1]
  428e9c:	jne    428ee0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1a0>
  428e9e:	mov    QWORD PTR [rbx+0x28],rdx
  428ea2:	mov    BYTE PTR [rax],0x5d
  428ea5:	pop    rbx
  428ea6:	pop    rbp
  428ea7:	pop    r12
  428ea9:	pop    r13
  428eab:	pop    r14
  428ead:	ret    
  428eae:	xchg   ax,ax
  428eb0:	ret    
  428eb1:	nop    DWORD PTR [rax+0x0]
  428eb8:	jmp    4271c0 <flatcc_json_printer_uint64_vector_field@@Base>
  428ebd:	nop    DWORD PTR [rax]
  428ec0:	mov    rdx,r12
  428ec3:	mov    esi,0x20
  428ec8:	call   4061c0 <memset@plt>
  428ecd:	add    QWORD PTR [rbx+0x28],r12
  428ed1:	jmp    428e2a <flatcc_json_printer_uint64_enum_vector_field@@Base+0xea>
  428ed6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  428ee0:	mov    QWORD PTR [rbx+0x28],rdx
  428ee4:	mov    BYTE PTR [rax],0xa
  428ee7:	mov    eax,DWORD PTR [rbx+0x38]
  428eea:	mov    rdi,QWORD PTR [rbx+0x28]
  428eee:	lea    ebp,[rax-0x1]
  428ef1:	movzx  eax,BYTE PTR [rbx+0x31]
  428ef5:	mov    DWORD PTR [rbx+0x38],ebp
  428ef8:	imul   eax,ebp
  428efb:	movsxd rbp,eax
  428efe:	lea    rax,[rdi+rbp*1]
  428f02:	cmp    QWORD PTR [rbx+0x20],rax
  428f06:	jae    428f40 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x200>
  428f08:	mov    rsi,rbp
  428f0b:	mov    rdi,rbx
  428f0e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  428f13:	mov    rax,QWORD PTR [rbx+0x28]
  428f17:	lea    rdx,[rax+0x1]
  428f1b:	jmp    428e9e <flatcc_json_printer_uint64_enum_vector_field@@Base+0x15e>
  428f20:	lea    rdx,[rax+0x1]
  428f24:	mov    QWORD PTR [rbx+0x28],rdx
  428f28:	mov    BYTE PTR [rax],0xa
  428f2b:	mov    rdi,rbx
  428f2e:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  428f33:	jmp    428ded <flatcc_json_printer_uint64_enum_vector_field@@Base+0xad>
  428f38:	nop    DWORD PTR [rax+rax*1+0x0]
  428f40:	mov    rdx,rbp
  428f43:	mov    esi,0x20
  428f48:	call   4061c0 <memset@plt>
  428f4d:	mov    rax,QWORD PTR [rbx+0x28]
  428f51:	add    rax,rbp
  428f54:	lea    rdx,[rax+0x1]
  428f58:	jmp    428e9e <flatcc_json_printer_uint64_enum_vector_field@@Base+0x15e>
  428f5d:	nop    DWORD PTR [rax]

0000000000428f60 <flatcc_json_printer_int8_enum_vector_field@@Base>:
  428f60:	endbr64 
  428f64:	cmp    BYTE PTR [rdi+0x33],0x0
  428f68:	jne    4290c8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x168>
  428f6e:	lea    eax,[rdx+rdx*1+0x4]
  428f72:	cmp    eax,DWORD PTR [rsi+0x10]
  428f75:	jge    4290c0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x160>
  428f7b:	mov    rdx,QWORD PTR [rsi+0x8]
  428f7f:	movzx  eax,WORD PTR [rdx+rax*1]
  428f83:	test   ax,ax
  428f86:	je     4290c0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x160>
  428f8c:	add    rax,QWORD PTR [rsi]
  428f8f:	je     4290c0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x160>
  428f95:	push   r14
  428f97:	push   r13
  428f99:	push   r12
  428f9b:	push   rbp
  428f9c:	push   rbx
  428f9d:	mov    edx,DWORD PTR [rsi+0x18]
  428fa0:	lea    r10d,[rdx+0x1]
  428fa4:	mov    DWORD PTR [rsi+0x18],r10d
  428fa8:	test   edx,edx
  428faa:	je     428fbb <flatcc_json_printer_int8_enum_vector_field@@Base+0x5b>
  428fac:	mov    rdx,QWORD PTR [rdi+0x28]
  428fb0:	lea    rsi,[rdx+0x1]
  428fb4:	mov    QWORD PTR [rdi+0x28],rsi
  428fb8:	mov    BYTE PTR [rdx],0x2c
  428fbb:	mov    r12d,DWORD PTR [rax]
  428fbe:	mov    rbx,rdi
  428fc1:	add    r12,rax
  428fc4:	movsxd rdx,r8d
  428fc7:	mov    rsi,rcx
  428fca:	mov    r13,r9
  428fcd:	mov    r14d,DWORD PTR [r12]
  428fd1:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  428fd6:	mov    rax,QWORD PTR [rbx+0x28]
  428fda:	inc    DWORD PTR [rbx+0x38]
  428fdd:	lea    rdx,[rax+0x1]
  428fe1:	mov    QWORD PTR [rbx+0x28],rdx
  428fe5:	mov    BYTE PTR [rax],0x5b
  428fe8:	test   r14d,r14d
  428feb:	je     4290a0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
  428ff1:	cmp    BYTE PTR [rbx+0x31],0x0
  428ff5:	mov    rax,QWORD PTR [rbx+0x28]
  428ff9:	jne    429130 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d0>
  428fff:	cmp    QWORD PTR [rbx+0x20],rax
  429003:	ja     42900d <flatcc_json_printer_int8_enum_vector_field@@Base+0xad>
  429005:	xor    esi,esi
  429007:	mov    rdi,rbx
  42900a:	call   QWORD PTR [rbx+0x48]
  42900d:	movsx  esi,BYTE PTR [r12+0x4]
  429013:	mov    rdi,rbx
  429016:	call   r13
  429019:	lea    rbp,[r12+0x5]
  42901e:	lea    eax,[r14-0x2]
  429022:	cmp    r14d,0x1
  429026:	je     4290a0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
  429028:	lea    r14,[r12+rax*1+0x6]
  42902d:	jmp    429054 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf4>
  42902f:	nop
  429030:	mov    rax,QWORD PTR [rbx+0x20]
  429034:	cmp    QWORD PTR [rbx+0x28],rax
  429038:	jb     429042 <flatcc_json_printer_int8_enum_vector_field@@Base+0xe2>
  42903a:	xor    esi,esi
  42903c:	mov    rdi,rbx
  42903f:	call   QWORD PTR [rbx+0x48]
  429042:	movsx  esi,BYTE PTR [rbp+0x0]
  429046:	mov    rdi,rbx
  429049:	inc    rbp
  42904c:	call   r13
  42904f:	cmp    rbp,r14
  429052:	je     4290a0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
  429054:	mov    rax,QWORD PTR [rbx+0x28]
  429058:	lea    rdx,[rax+0x1]
  42905c:	mov    QWORD PTR [rbx+0x28],rdx
  429060:	mov    BYTE PTR [rax],0x2c
  429063:	cmp    BYTE PTR [rbx+0x31],0x0
  429067:	je     429030 <flatcc_json_printer_int8_enum_vector_field@@Base+0xd0>
  429069:	mov    rax,QWORD PTR [rbx+0x28]
  42906d:	lea    rdx,[rax+0x1]
  429071:	mov    QWORD PTR [rbx+0x28],rdx
  429075:	mov    BYTE PTR [rax],0xa
  429078:	movzx  r12d,BYTE PTR [rbx+0x31]
  42907d:	mov    rdi,QWORD PTR [rbx+0x28]
  429081:	imul   r12d,DWORD PTR [rbx+0x38]
  429086:	movsxd r12,r12d
  429089:	lea    rax,[rdi+r12*1]
  42908d:	cmp    QWORD PTR [rbx+0x20],rax
  429091:	jae    4290d0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x170>
  429093:	mov    rsi,r12
  429096:	mov    rdi,rbx
  429099:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42909e:	jmp    429042 <flatcc_json_printer_int8_enum_vector_field@@Base+0xe2>
  4290a0:	mov    rax,QWORD PTR [rbx+0x28]
  4290a4:	cmp    BYTE PTR [rbx+0x31],0x0
  4290a8:	lea    rdx,[rax+0x1]
  4290ac:	jne    4290f0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x190>
  4290ae:	mov    QWORD PTR [rbx+0x28],rdx
  4290b2:	mov    BYTE PTR [rax],0x5d
  4290b5:	pop    rbx
  4290b6:	pop    rbp
  4290b7:	pop    r12
  4290b9:	pop    r13
  4290bb:	pop    r14
  4290bd:	ret    
  4290be:	xchg   ax,ax
  4290c0:	ret    
  4290c1:	nop    DWORD PTR [rax+0x0]
  4290c8:	jmp    427420 <flatcc_json_printer_int8_vector_field@@Base>
  4290cd:	nop    DWORD PTR [rax]
  4290d0:	mov    rdx,r12
  4290d3:	mov    esi,0x20
  4290d8:	call   4061c0 <memset@plt>
  4290dd:	add    QWORD PTR [rbx+0x28],r12
  4290e1:	jmp    429042 <flatcc_json_printer_int8_enum_vector_field@@Base+0xe2>
  4290e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4290f0:	mov    QWORD PTR [rbx+0x28],rdx
  4290f4:	mov    BYTE PTR [rax],0xa
  4290f7:	mov    eax,DWORD PTR [rbx+0x38]
  4290fa:	mov    rdi,QWORD PTR [rbx+0x28]
  4290fe:	lea    ebp,[rax-0x1]
  429101:	movzx  eax,BYTE PTR [rbx+0x31]
  429105:	mov    DWORD PTR [rbx+0x38],ebp
  429108:	imul   eax,ebp
  42910b:	movsxd rbp,eax
  42910e:	lea    rax,[rdi+rbp*1]
  429112:	cmp    QWORD PTR [rbx+0x20],rax
  429116:	jae    429150 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1f0>
  429118:	mov    rsi,rbp
  42911b:	mov    rdi,rbx
  42911e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429123:	mov    rax,QWORD PTR [rbx+0x28]
  429127:	lea    rdx,[rax+0x1]
  42912b:	jmp    4290ae <flatcc_json_printer_int8_enum_vector_field@@Base+0x14e>
  42912d:	nop    DWORD PTR [rax]
  429130:	lea    rdx,[rax+0x1]
  429134:	mov    QWORD PTR [rbx+0x28],rdx
  429138:	mov    BYTE PTR [rax],0xa
  42913b:	mov    rdi,rbx
  42913e:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  429143:	jmp    42900d <flatcc_json_printer_int8_enum_vector_field@@Base+0xad>
  429148:	nop    DWORD PTR [rax+rax*1+0x0]
  429150:	mov    rdx,rbp
  429153:	mov    esi,0x20
  429158:	call   4061c0 <memset@plt>
  42915d:	mov    rax,QWORD PTR [rbx+0x28]
  429161:	add    rax,rbp
  429164:	lea    rdx,[rax+0x1]
  429168:	jmp    4290ae <flatcc_json_printer_int8_enum_vector_field@@Base+0x14e>
  42916d:	nop    DWORD PTR [rax]

0000000000429170 <flatcc_json_printer_int16_enum_vector_field@@Base>:
  429170:	endbr64 
  429174:	cmp    BYTE PTR [rdi+0x33],0x0
  429178:	jne    4292e8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x178>
  42917e:	lea    eax,[rdx+rdx*1+0x4]
  429182:	cmp    eax,DWORD PTR [rsi+0x10]
  429185:	jge    4292e0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x170>
  42918b:	mov    rdx,QWORD PTR [rsi+0x8]
  42918f:	movzx  eax,WORD PTR [rdx+rax*1]
  429193:	test   ax,ax
  429196:	je     4292e0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x170>
  42919c:	add    rax,QWORD PTR [rsi]
  42919f:	je     4292e0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x170>
  4291a5:	push   r14
  4291a7:	push   r13
  4291a9:	push   r12
  4291ab:	push   rbp
  4291ac:	push   rbx
  4291ad:	mov    edx,DWORD PTR [rsi+0x18]
  4291b0:	lea    r10d,[rdx+0x1]
  4291b4:	mov    DWORD PTR [rsi+0x18],r10d
  4291b8:	test   edx,edx
  4291ba:	je     4291cb <flatcc_json_printer_int16_enum_vector_field@@Base+0x5b>
  4291bc:	mov    rdx,QWORD PTR [rdi+0x28]
  4291c0:	lea    rsi,[rdx+0x1]
  4291c4:	mov    QWORD PTR [rdi+0x28],rsi
  4291c8:	mov    BYTE PTR [rdx],0x2c
  4291cb:	mov    r12d,DWORD PTR [rax]
  4291ce:	mov    rbx,rdi
  4291d1:	add    r12,rax
  4291d4:	movsxd rdx,r8d
  4291d7:	mov    rsi,rcx
  4291da:	mov    r13,r9
  4291dd:	mov    r14d,DWORD PTR [r12]
  4291e1:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  4291e6:	mov    rax,QWORD PTR [rbx+0x28]
  4291ea:	inc    DWORD PTR [rbx+0x38]
  4291ed:	lea    rdx,[rax+0x1]
  4291f1:	mov    QWORD PTR [rbx+0x28],rdx
  4291f5:	mov    BYTE PTR [rax],0x5b
  4291f8:	test   r14d,r14d
  4291fb:	je     4292c0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x150>
  429201:	cmp    BYTE PTR [rbx+0x31],0x0
  429205:	mov    rax,QWORD PTR [rbx+0x28]
  429209:	jne    429350 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1e0>
  42920f:	cmp    QWORD PTR [rbx+0x20],rax
  429213:	ja     42921d <flatcc_json_printer_int16_enum_vector_field@@Base+0xad>
  429215:	xor    esi,esi
  429217:	mov    rdi,rbx
  42921a:	call   QWORD PTR [rbx+0x48]
  42921d:	movsx  esi,WORD PTR [r12+0x4]
  429223:	mov    rdi,rbx
  429226:	call   r13
  429229:	lea    rbp,[r12+0x6]
  42922e:	lea    eax,[r14-0x2]
  429232:	cmp    r14d,0x1
  429236:	je     4292c0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x150>
  42923c:	lea    r14,[r12+rax*2+0x8]
  429241:	jmp    42926d <flatcc_json_printer_int16_enum_vector_field@@Base+0xfd>
  429243:	nop    DWORD PTR [rax+rax*1+0x0]
  429248:	mov    rax,QWORD PTR [rbx+0x20]
  42924c:	cmp    QWORD PTR [rbx+0x28],rax
  429250:	jb     42925a <flatcc_json_printer_int16_enum_vector_field@@Base+0xea>
  429252:	xor    esi,esi
  429254:	mov    rdi,rbx
  429257:	call   QWORD PTR [rbx+0x48]
  42925a:	movsx  esi,WORD PTR [rbp+0x0]
  42925e:	mov    rdi,rbx
  429261:	add    rbp,0x2
  429265:	call   r13
  429268:	cmp    rbp,r14
  42926b:	je     4292c0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x150>
  42926d:	mov    rax,QWORD PTR [rbx+0x28]
  429271:	lea    rdx,[rax+0x1]
  429275:	mov    QWORD PTR [rbx+0x28],rdx
  429279:	mov    BYTE PTR [rax],0x2c
  42927c:	cmp    BYTE PTR [rbx+0x31],0x0
  429280:	je     429248 <flatcc_json_printer_int16_enum_vector_field@@Base+0xd8>
  429282:	mov    rax,QWORD PTR [rbx+0x28]
  429286:	lea    rdx,[rax+0x1]
  42928a:	mov    QWORD PTR [rbx+0x28],rdx
  42928e:	mov    BYTE PTR [rax],0xa
  429291:	movzx  r12d,BYTE PTR [rbx+0x31]
  429296:	mov    rdi,QWORD PTR [rbx+0x28]
  42929a:	imul   r12d,DWORD PTR [rbx+0x38]
  42929f:	movsxd r12,r12d
  4292a2:	lea    rax,[rdi+r12*1]
  4292a6:	cmp    QWORD PTR [rbx+0x20],rax
  4292aa:	jae    4292f0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x180>
  4292ac:	mov    rsi,r12
  4292af:	mov    rdi,rbx
  4292b2:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4292b7:	jmp    42925a <flatcc_json_printer_int16_enum_vector_field@@Base+0xea>
  4292b9:	nop    DWORD PTR [rax+0x0]
  4292c0:	mov    rax,QWORD PTR [rbx+0x28]
  4292c4:	cmp    BYTE PTR [rbx+0x31],0x0
  4292c8:	lea    rdx,[rax+0x1]
  4292cc:	jne    429310 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1a0>
  4292ce:	mov    QWORD PTR [rbx+0x28],rdx
  4292d2:	mov    BYTE PTR [rax],0x5d
  4292d5:	pop    rbx
  4292d6:	pop    rbp
  4292d7:	pop    r12
  4292d9:	pop    r13
  4292db:	pop    r14
  4292dd:	ret    
  4292de:	xchg   ax,ax
  4292e0:	ret    
  4292e1:	nop    DWORD PTR [rax+0x0]
  4292e8:	jmp    427680 <flatcc_json_printer_int16_vector_field@@Base>
  4292ed:	nop    DWORD PTR [rax]
  4292f0:	mov    rdx,r12
  4292f3:	mov    esi,0x20
  4292f8:	call   4061c0 <memset@plt>
  4292fd:	add    QWORD PTR [rbx+0x28],r12
  429301:	jmp    42925a <flatcc_json_printer_int16_enum_vector_field@@Base+0xea>
  429306:	nop    WORD PTR cs:[rax+rax*1+0x0]
  429310:	mov    QWORD PTR [rbx+0x28],rdx
  429314:	mov    BYTE PTR [rax],0xa
  429317:	mov    eax,DWORD PTR [rbx+0x38]
  42931a:	mov    rdi,QWORD PTR [rbx+0x28]
  42931e:	lea    ebp,[rax-0x1]
  429321:	movzx  eax,BYTE PTR [rbx+0x31]
  429325:	mov    DWORD PTR [rbx+0x38],ebp
  429328:	imul   eax,ebp
  42932b:	movsxd rbp,eax
  42932e:	lea    rax,[rdi+rbp*1]
  429332:	cmp    QWORD PTR [rbx+0x20],rax
  429336:	jae    429370 <flatcc_json_printer_int16_enum_vector_field@@Base+0x200>
  429338:	mov    rsi,rbp
  42933b:	mov    rdi,rbx
  42933e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429343:	mov    rax,QWORD PTR [rbx+0x28]
  429347:	lea    rdx,[rax+0x1]
  42934b:	jmp    4292ce <flatcc_json_printer_int16_enum_vector_field@@Base+0x15e>
  429350:	lea    rdx,[rax+0x1]
  429354:	mov    QWORD PTR [rbx+0x28],rdx
  429358:	mov    BYTE PTR [rax],0xa
  42935b:	mov    rdi,rbx
  42935e:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  429363:	jmp    42921d <flatcc_json_printer_int16_enum_vector_field@@Base+0xad>
  429368:	nop    DWORD PTR [rax+rax*1+0x0]
  429370:	mov    rdx,rbp
  429373:	mov    esi,0x20
  429378:	call   4061c0 <memset@plt>
  42937d:	mov    rax,QWORD PTR [rbx+0x28]
  429381:	add    rax,rbp
  429384:	lea    rdx,[rax+0x1]
  429388:	jmp    4292ce <flatcc_json_printer_int16_enum_vector_field@@Base+0x15e>
  42938d:	nop    DWORD PTR [rax]

0000000000429390 <flatcc_json_printer_int32_enum_vector_field@@Base>:
  429390:	endbr64 
  429394:	cmp    BYTE PTR [rdi+0x33],0x0
  429398:	jne    4294f8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x168>
  42939e:	lea    eax,[rdx+rdx*1+0x4]
  4293a2:	cmp    eax,DWORD PTR [rsi+0x10]
  4293a5:	jge    4294f0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x160>
  4293ab:	mov    rdx,QWORD PTR [rsi+0x8]
  4293af:	movzx  eax,WORD PTR [rdx+rax*1]
  4293b3:	test   ax,ax
  4293b6:	je     4294f0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x160>
  4293bc:	add    rax,QWORD PTR [rsi]
  4293bf:	je     4294f0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x160>
  4293c5:	push   r14
  4293c7:	push   r13
  4293c9:	push   r12
  4293cb:	push   rbp
  4293cc:	push   rbx
  4293cd:	mov    edx,DWORD PTR [rsi+0x18]
  4293d0:	lea    r10d,[rdx+0x1]
  4293d4:	mov    DWORD PTR [rsi+0x18],r10d
  4293d8:	test   edx,edx
  4293da:	je     4293eb <flatcc_json_printer_int32_enum_vector_field@@Base+0x5b>
  4293dc:	mov    rdx,QWORD PTR [rdi+0x28]
  4293e0:	lea    rsi,[rdx+0x1]
  4293e4:	mov    QWORD PTR [rdi+0x28],rsi
  4293e8:	mov    BYTE PTR [rdx],0x2c
  4293eb:	mov    r12d,DWORD PTR [rax]
  4293ee:	mov    rbx,rdi
  4293f1:	add    r12,rax
  4293f4:	movsxd rdx,r8d
  4293f7:	mov    rsi,rcx
  4293fa:	mov    r13,r9
  4293fd:	mov    r14d,DWORD PTR [r12]
  429401:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  429406:	mov    rax,QWORD PTR [rbx+0x28]
  42940a:	inc    DWORD PTR [rbx+0x38]
  42940d:	lea    rdx,[rax+0x1]
  429411:	mov    QWORD PTR [rbx+0x28],rdx
  429415:	mov    BYTE PTR [rax],0x5b
  429418:	test   r14d,r14d
  42941b:	je     4294d0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x140>
  429421:	cmp    BYTE PTR [rbx+0x31],0x0
  429425:	mov    rax,QWORD PTR [rbx+0x28]
  429429:	jne    429560 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d0>
  42942f:	cmp    QWORD PTR [rbx+0x20],rax
  429433:	ja     42943d <flatcc_json_printer_int32_enum_vector_field@@Base+0xad>
  429435:	xor    esi,esi
  429437:	mov    rdi,rbx
  42943a:	call   QWORD PTR [rbx+0x48]
  42943d:	mov    esi,DWORD PTR [r12+0x4]
  429442:	mov    rdi,rbx
  429445:	call   r13
  429448:	lea    rbp,[r12+0x8]
  42944d:	lea    eax,[r14-0x2]
  429451:	cmp    r14d,0x1
  429455:	je     4294d0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x140>
  429457:	lea    r14,[r12+rax*4+0xc]
  42945c:	jmp    429484 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
  42945e:	xchg   ax,ax
  429460:	mov    rax,QWORD PTR [rbx+0x20]
  429464:	cmp    QWORD PTR [rbx+0x28],rax
  429468:	jb     429472 <flatcc_json_printer_int32_enum_vector_field@@Base+0xe2>
  42946a:	xor    esi,esi
  42946c:	mov    rdi,rbx
  42946f:	call   QWORD PTR [rbx+0x48]
  429472:	mov    esi,DWORD PTR [rbp+0x0]
  429475:	mov    rdi,rbx
  429478:	add    rbp,0x4
  42947c:	call   r13
  42947f:	cmp    rbp,r14
  429482:	je     4294d0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x140>
  429484:	mov    rax,QWORD PTR [rbx+0x28]
  429488:	lea    rdx,[rax+0x1]
  42948c:	mov    QWORD PTR [rbx+0x28],rdx
  429490:	mov    BYTE PTR [rax],0x2c
  429493:	cmp    BYTE PTR [rbx+0x31],0x0
  429497:	je     429460 <flatcc_json_printer_int32_enum_vector_field@@Base+0xd0>
  429499:	mov    rax,QWORD PTR [rbx+0x28]
  42949d:	lea    rdx,[rax+0x1]
  4294a1:	mov    QWORD PTR [rbx+0x28],rdx
  4294a5:	mov    BYTE PTR [rax],0xa
  4294a8:	movzx  r12d,BYTE PTR [rbx+0x31]
  4294ad:	mov    rdi,QWORD PTR [rbx+0x28]
  4294b1:	imul   r12d,DWORD PTR [rbx+0x38]
  4294b6:	movsxd r12,r12d
  4294b9:	lea    rax,[rdi+r12*1]
  4294bd:	cmp    QWORD PTR [rbx+0x20],rax
  4294c1:	jae    429500 <flatcc_json_printer_int32_enum_vector_field@@Base+0x170>
  4294c3:	mov    rsi,r12
  4294c6:	mov    rdi,rbx
  4294c9:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4294ce:	jmp    429472 <flatcc_json_printer_int32_enum_vector_field@@Base+0xe2>
  4294d0:	mov    rax,QWORD PTR [rbx+0x28]
  4294d4:	cmp    BYTE PTR [rbx+0x31],0x0
  4294d8:	lea    rdx,[rax+0x1]
  4294dc:	jne    429520 <flatcc_json_printer_int32_enum_vector_field@@Base+0x190>
  4294de:	mov    QWORD PTR [rbx+0x28],rdx
  4294e2:	mov    BYTE PTR [rax],0x5d
  4294e5:	pop    rbx
  4294e6:	pop    rbp
  4294e7:	pop    r12
  4294e9:	pop    r13
  4294eb:	pop    r14
  4294ed:	ret    
  4294ee:	xchg   ax,ax
  4294f0:	ret    
  4294f1:	nop    DWORD PTR [rax+0x0]
  4294f8:	jmp    4278e0 <flatcc_json_printer_int32_vector_field@@Base>
  4294fd:	nop    DWORD PTR [rax]
  429500:	mov    rdx,r12
  429503:	mov    esi,0x20
  429508:	call   4061c0 <memset@plt>
  42950d:	add    QWORD PTR [rbx+0x28],r12
  429511:	jmp    429472 <flatcc_json_printer_int32_enum_vector_field@@Base+0xe2>
  429516:	nop    WORD PTR cs:[rax+rax*1+0x0]
  429520:	mov    QWORD PTR [rbx+0x28],rdx
  429524:	mov    BYTE PTR [rax],0xa
  429527:	mov    eax,DWORD PTR [rbx+0x38]
  42952a:	mov    rdi,QWORD PTR [rbx+0x28]
  42952e:	lea    ebp,[rax-0x1]
  429531:	movzx  eax,BYTE PTR [rbx+0x31]
  429535:	mov    DWORD PTR [rbx+0x38],ebp
  429538:	imul   eax,ebp
  42953b:	movsxd rbp,eax
  42953e:	lea    rax,[rdi+rbp*1]
  429542:	cmp    QWORD PTR [rbx+0x20],rax
  429546:	jae    429580 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1f0>
  429548:	mov    rsi,rbp
  42954b:	mov    rdi,rbx
  42954e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429553:	mov    rax,QWORD PTR [rbx+0x28]
  429557:	lea    rdx,[rax+0x1]
  42955b:	jmp    4294de <flatcc_json_printer_int32_enum_vector_field@@Base+0x14e>
  42955d:	nop    DWORD PTR [rax]
  429560:	lea    rdx,[rax+0x1]
  429564:	mov    QWORD PTR [rbx+0x28],rdx
  429568:	mov    BYTE PTR [rax],0xa
  42956b:	mov    rdi,rbx
  42956e:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  429573:	jmp    42943d <flatcc_json_printer_int32_enum_vector_field@@Base+0xad>
  429578:	nop    DWORD PTR [rax+rax*1+0x0]
  429580:	mov    rdx,rbp
  429583:	mov    esi,0x20
  429588:	call   4061c0 <memset@plt>
  42958d:	mov    rax,QWORD PTR [rbx+0x28]
  429591:	add    rax,rbp
  429594:	lea    rdx,[rax+0x1]
  429598:	jmp    4294de <flatcc_json_printer_int32_enum_vector_field@@Base+0x14e>
  42959d:	nop    DWORD PTR [rax]

00000000004295a0 <flatcc_json_printer_int64_enum_vector_field@@Base>:
  4295a0:	endbr64 
  4295a4:	cmp    BYTE PTR [rdi+0x33],0x0
  4295a8:	jne    429718 <flatcc_json_printer_int64_enum_vector_field@@Base+0x178>
  4295ae:	lea    eax,[rdx+rdx*1+0x4]
  4295b2:	cmp    eax,DWORD PTR [rsi+0x10]
  4295b5:	jge    429710 <flatcc_json_printer_int64_enum_vector_field@@Base+0x170>
  4295bb:	mov    rdx,QWORD PTR [rsi+0x8]
  4295bf:	movzx  eax,WORD PTR [rdx+rax*1]
  4295c3:	test   ax,ax
  4295c6:	je     429710 <flatcc_json_printer_int64_enum_vector_field@@Base+0x170>
  4295cc:	add    rax,QWORD PTR [rsi]
  4295cf:	je     429710 <flatcc_json_printer_int64_enum_vector_field@@Base+0x170>
  4295d5:	push   r14
  4295d7:	push   r13
  4295d9:	push   r12
  4295db:	push   rbp
  4295dc:	push   rbx
  4295dd:	mov    edx,DWORD PTR [rsi+0x18]
  4295e0:	lea    r10d,[rdx+0x1]
  4295e4:	mov    DWORD PTR [rsi+0x18],r10d
  4295e8:	test   edx,edx
  4295ea:	je     4295fb <flatcc_json_printer_int64_enum_vector_field@@Base+0x5b>
  4295ec:	mov    rdx,QWORD PTR [rdi+0x28]
  4295f0:	lea    rsi,[rdx+0x1]
  4295f4:	mov    QWORD PTR [rdi+0x28],rsi
  4295f8:	mov    BYTE PTR [rdx],0x2c
  4295fb:	mov    r12d,DWORD PTR [rax]
  4295fe:	mov    rbx,rdi
  429601:	add    r12,rax
  429604:	movsxd rdx,r8d
  429607:	mov    rsi,rcx
  42960a:	mov    r13,r9
  42960d:	mov    r14d,DWORD PTR [r12]
  429611:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  429616:	mov    rax,QWORD PTR [rbx+0x28]
  42961a:	inc    DWORD PTR [rbx+0x38]
  42961d:	lea    rdx,[rax+0x1]
  429621:	mov    QWORD PTR [rbx+0x28],rdx
  429625:	mov    BYTE PTR [rax],0x5b
  429628:	test   r14d,r14d
  42962b:	je     4296f0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x150>
  429631:	cmp    BYTE PTR [rbx+0x31],0x0
  429635:	mov    rax,QWORD PTR [rbx+0x28]
  429639:	jne    429780 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1e0>
  42963f:	cmp    QWORD PTR [rbx+0x20],rax
  429643:	ja     42964d <flatcc_json_printer_int64_enum_vector_field@@Base+0xad>
  429645:	xor    esi,esi
  429647:	mov    rdi,rbx
  42964a:	call   QWORD PTR [rbx+0x48]
  42964d:	mov    rsi,QWORD PTR [r12+0x4]
  429652:	mov    rdi,rbx
  429655:	call   r13
  429658:	lea    rbp,[r12+0xc]
  42965d:	lea    eax,[r14-0x2]
  429661:	cmp    r14d,0x1
  429665:	je     4296f0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x150>
  42966b:	lea    r14,[r12+rax*8+0x14]
  429670:	jmp    42969d <flatcc_json_printer_int64_enum_vector_field@@Base+0xfd>
  429672:	nop    WORD PTR [rax+rax*1+0x0]
  429678:	mov    rax,QWORD PTR [rbx+0x20]
  42967c:	cmp    QWORD PTR [rbx+0x28],rax
  429680:	jb     42968a <flatcc_json_printer_int64_enum_vector_field@@Base+0xea>
  429682:	xor    esi,esi
  429684:	mov    rdi,rbx
  429687:	call   QWORD PTR [rbx+0x48]
  42968a:	mov    rsi,QWORD PTR [rbp+0x0]
  42968e:	mov    rdi,rbx
  429691:	add    rbp,0x8
  429695:	call   r13
  429698:	cmp    rbp,r14
  42969b:	je     4296f0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x150>
  42969d:	mov    rax,QWORD PTR [rbx+0x28]
  4296a1:	lea    rdx,[rax+0x1]
  4296a5:	mov    QWORD PTR [rbx+0x28],rdx
  4296a9:	mov    BYTE PTR [rax],0x2c
  4296ac:	cmp    BYTE PTR [rbx+0x31],0x0
  4296b0:	je     429678 <flatcc_json_printer_int64_enum_vector_field@@Base+0xd8>
  4296b2:	mov    rax,QWORD PTR [rbx+0x28]
  4296b6:	lea    rdx,[rax+0x1]
  4296ba:	mov    QWORD PTR [rbx+0x28],rdx
  4296be:	mov    BYTE PTR [rax],0xa
  4296c1:	movzx  r12d,BYTE PTR [rbx+0x31]
  4296c6:	mov    rdi,QWORD PTR [rbx+0x28]
  4296ca:	imul   r12d,DWORD PTR [rbx+0x38]
  4296cf:	movsxd r12,r12d
  4296d2:	lea    rax,[rdi+r12*1]
  4296d6:	cmp    QWORD PTR [rbx+0x20],rax
  4296da:	jae    429720 <flatcc_json_printer_int64_enum_vector_field@@Base+0x180>
  4296dc:	mov    rsi,r12
  4296df:	mov    rdi,rbx
  4296e2:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4296e7:	jmp    42968a <flatcc_json_printer_int64_enum_vector_field@@Base+0xea>
  4296e9:	nop    DWORD PTR [rax+0x0]
  4296f0:	mov    rax,QWORD PTR [rbx+0x28]
  4296f4:	cmp    BYTE PTR [rbx+0x31],0x0
  4296f8:	lea    rdx,[rax+0x1]
  4296fc:	jne    429740 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1a0>
  4296fe:	mov    QWORD PTR [rbx+0x28],rdx
  429702:	mov    BYTE PTR [rax],0x5d
  429705:	pop    rbx
  429706:	pop    rbp
  429707:	pop    r12
  429709:	pop    r13
  42970b:	pop    r14
  42970d:	ret    
  42970e:	xchg   ax,ax
  429710:	ret    
  429711:	nop    DWORD PTR [rax+0x0]
  429718:	jmp    427b30 <flatcc_json_printer_int64_vector_field@@Base>
  42971d:	nop    DWORD PTR [rax]
  429720:	mov    rdx,r12
  429723:	mov    esi,0x20
  429728:	call   4061c0 <memset@plt>
  42972d:	add    QWORD PTR [rbx+0x28],r12
  429731:	jmp    42968a <flatcc_json_printer_int64_enum_vector_field@@Base+0xea>
  429736:	nop    WORD PTR cs:[rax+rax*1+0x0]
  429740:	mov    QWORD PTR [rbx+0x28],rdx
  429744:	mov    BYTE PTR [rax],0xa
  429747:	mov    eax,DWORD PTR [rbx+0x38]
  42974a:	mov    rdi,QWORD PTR [rbx+0x28]
  42974e:	lea    ebp,[rax-0x1]
  429751:	movzx  eax,BYTE PTR [rbx+0x31]
  429755:	mov    DWORD PTR [rbx+0x38],ebp
  429758:	imul   eax,ebp
  42975b:	movsxd rbp,eax
  42975e:	lea    rax,[rdi+rbp*1]
  429762:	cmp    QWORD PTR [rbx+0x20],rax
  429766:	jae    4297a0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x200>
  429768:	mov    rsi,rbp
  42976b:	mov    rdi,rbx
  42976e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429773:	mov    rax,QWORD PTR [rbx+0x28]
  429777:	lea    rdx,[rax+0x1]
  42977b:	jmp    4296fe <flatcc_json_printer_int64_enum_vector_field@@Base+0x15e>
  429780:	lea    rdx,[rax+0x1]
  429784:	mov    QWORD PTR [rbx+0x28],rdx
  429788:	mov    BYTE PTR [rax],0xa
  42978b:	mov    rdi,rbx
  42978e:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  429793:	jmp    42964d <flatcc_json_printer_int64_enum_vector_field@@Base+0xad>
  429798:	nop    DWORD PTR [rax+rax*1+0x0]
  4297a0:	mov    rdx,rbp
  4297a3:	mov    esi,0x20
  4297a8:	call   4061c0 <memset@plt>
  4297ad:	mov    rax,QWORD PTR [rbx+0x28]
  4297b1:	add    rax,rbp
  4297b4:	lea    rdx,[rax+0x1]
  4297b8:	jmp    4296fe <flatcc_json_printer_int64_enum_vector_field@@Base+0x15e>
  4297bd:	nop    DWORD PTR [rax]

00000000004297c0 <flatcc_json_printer_bool_enum_vector_field@@Base>:
  4297c0:	endbr64 
  4297c4:	cmp    BYTE PTR [rdi+0x33],0x0
  4297c8:	jne    429928 <flatcc_json_printer_bool_enum_vector_field@@Base+0x168>
  4297ce:	lea    eax,[rdx+rdx*1+0x4]
  4297d2:	cmp    eax,DWORD PTR [rsi+0x10]
  4297d5:	jge    429920 <flatcc_json_printer_bool_enum_vector_field@@Base+0x160>
  4297db:	mov    rdx,QWORD PTR [rsi+0x8]
  4297df:	movzx  eax,WORD PTR [rdx+rax*1]
  4297e3:	test   ax,ax
  4297e6:	je     429920 <flatcc_json_printer_bool_enum_vector_field@@Base+0x160>
  4297ec:	add    rax,QWORD PTR [rsi]
  4297ef:	je     429920 <flatcc_json_printer_bool_enum_vector_field@@Base+0x160>
  4297f5:	push   r14
  4297f7:	push   r13
  4297f9:	push   r12
  4297fb:	push   rbp
  4297fc:	push   rbx
  4297fd:	mov    edx,DWORD PTR [rsi+0x18]
  429800:	lea    r10d,[rdx+0x1]
  429804:	mov    DWORD PTR [rsi+0x18],r10d
  429808:	test   edx,edx
  42980a:	je     42981b <flatcc_json_printer_bool_enum_vector_field@@Base+0x5b>
  42980c:	mov    rdx,QWORD PTR [rdi+0x28]
  429810:	lea    rsi,[rdx+0x1]
  429814:	mov    QWORD PTR [rdi+0x28],rsi
  429818:	mov    BYTE PTR [rdx],0x2c
  42981b:	mov    r12d,DWORD PTR [rax]
  42981e:	mov    rbx,rdi
  429821:	add    r12,rax
  429824:	movsxd rdx,r8d
  429827:	mov    rsi,rcx
  42982a:	mov    r13,r9
  42982d:	mov    r14d,DWORD PTR [r12]
  429831:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  429836:	mov    rax,QWORD PTR [rbx+0x28]
  42983a:	inc    DWORD PTR [rbx+0x38]
  42983d:	lea    rdx,[rax+0x1]
  429841:	mov    QWORD PTR [rbx+0x28],rdx
  429845:	mov    BYTE PTR [rax],0x5b
  429848:	test   r14d,r14d
  42984b:	je     429900 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
  429851:	cmp    BYTE PTR [rbx+0x31],0x0
  429855:	mov    rax,QWORD PTR [rbx+0x28]
  429859:	jne    429990 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d0>
  42985f:	cmp    QWORD PTR [rbx+0x20],rax
  429863:	ja     42986d <flatcc_json_printer_bool_enum_vector_field@@Base+0xad>
  429865:	xor    esi,esi
  429867:	mov    rdi,rbx
  42986a:	call   QWORD PTR [rbx+0x48]
  42986d:	movzx  esi,BYTE PTR [r12+0x4]
  429873:	mov    rdi,rbx
  429876:	call   r13
  429879:	lea    rbp,[r12+0x5]
  42987e:	lea    eax,[r14-0x2]
  429882:	cmp    r14d,0x1
  429886:	je     429900 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
  429888:	lea    r14,[r12+rax*1+0x6]
  42988d:	jmp    4298b4 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf4>
  42988f:	nop
  429890:	mov    rax,QWORD PTR [rbx+0x20]
  429894:	cmp    QWORD PTR [rbx+0x28],rax
  429898:	jb     4298a2 <flatcc_json_printer_bool_enum_vector_field@@Base+0xe2>
  42989a:	xor    esi,esi
  42989c:	mov    rdi,rbx
  42989f:	call   QWORD PTR [rbx+0x48]
  4298a2:	movzx  esi,BYTE PTR [rbp+0x0]
  4298a6:	mov    rdi,rbx
  4298a9:	inc    rbp
  4298ac:	call   r13
  4298af:	cmp    rbp,r14
  4298b2:	je     429900 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
  4298b4:	mov    rax,QWORD PTR [rbx+0x28]
  4298b8:	lea    rdx,[rax+0x1]
  4298bc:	mov    QWORD PTR [rbx+0x28],rdx
  4298c0:	mov    BYTE PTR [rax],0x2c
  4298c3:	cmp    BYTE PTR [rbx+0x31],0x0
  4298c7:	je     429890 <flatcc_json_printer_bool_enum_vector_field@@Base+0xd0>
  4298c9:	mov    rax,QWORD PTR [rbx+0x28]
  4298cd:	lea    rdx,[rax+0x1]
  4298d1:	mov    QWORD PTR [rbx+0x28],rdx
  4298d5:	mov    BYTE PTR [rax],0xa
  4298d8:	movzx  r12d,BYTE PTR [rbx+0x31]
  4298dd:	mov    rdi,QWORD PTR [rbx+0x28]
  4298e1:	imul   r12d,DWORD PTR [rbx+0x38]
  4298e6:	movsxd r12,r12d
  4298e9:	lea    rax,[rdi+r12*1]
  4298ed:	cmp    QWORD PTR [rbx+0x20],rax
  4298f1:	jae    429930 <flatcc_json_printer_bool_enum_vector_field@@Base+0x170>
  4298f3:	mov    rsi,r12
  4298f6:	mov    rdi,rbx
  4298f9:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  4298fe:	jmp    4298a2 <flatcc_json_printer_bool_enum_vector_field@@Base+0xe2>
  429900:	mov    rax,QWORD PTR [rbx+0x28]
  429904:	cmp    BYTE PTR [rbx+0x31],0x0
  429908:	lea    rdx,[rax+0x1]
  42990c:	jne    429950 <flatcc_json_printer_bool_enum_vector_field@@Base+0x190>
  42990e:	mov    QWORD PTR [rbx+0x28],rdx
  429912:	mov    BYTE PTR [rax],0x5d
  429915:	pop    rbx
  429916:	pop    rbp
  429917:	pop    r12
  429919:	pop    r13
  42991b:	pop    r14
  42991d:	ret    
  42991e:	xchg   ax,ax
  429920:	ret    
  429921:	nop    DWORD PTR [rax+0x0]
  429928:	jmp    427d90 <flatcc_json_printer_bool_vector_field@@Base>
  42992d:	nop    DWORD PTR [rax]
  429930:	mov    rdx,r12
  429933:	mov    esi,0x20
  429938:	call   4061c0 <memset@plt>
  42993d:	add    QWORD PTR [rbx+0x28],r12
  429941:	jmp    4298a2 <flatcc_json_printer_bool_enum_vector_field@@Base+0xe2>
  429946:	nop    WORD PTR cs:[rax+rax*1+0x0]
  429950:	mov    QWORD PTR [rbx+0x28],rdx
  429954:	mov    BYTE PTR [rax],0xa
  429957:	mov    eax,DWORD PTR [rbx+0x38]
  42995a:	mov    rdi,QWORD PTR [rbx+0x28]
  42995e:	lea    ebp,[rax-0x1]
  429961:	movzx  eax,BYTE PTR [rbx+0x31]
  429965:	mov    DWORD PTR [rbx+0x38],ebp
  429968:	imul   eax,ebp
  42996b:	movsxd rbp,eax
  42996e:	lea    rax,[rdi+rbp*1]
  429972:	cmp    QWORD PTR [rbx+0x20],rax
  429976:	jae    4299b0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1f0>
  429978:	mov    rsi,rbp
  42997b:	mov    rdi,rbx
  42997e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429983:	mov    rax,QWORD PTR [rbx+0x28]
  429987:	lea    rdx,[rax+0x1]
  42998b:	jmp    42990e <flatcc_json_printer_bool_enum_vector_field@@Base+0x14e>
  42998d:	nop    DWORD PTR [rax]
  429990:	lea    rdx,[rax+0x1]
  429994:	mov    QWORD PTR [rbx+0x28],rdx
  429998:	mov    BYTE PTR [rax],0xa
  42999b:	mov    rdi,rbx
  42999e:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  4299a3:	jmp    42986d <flatcc_json_printer_bool_enum_vector_field@@Base+0xad>
  4299a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4299b0:	mov    rdx,rbp
  4299b3:	mov    esi,0x20
  4299b8:	call   4061c0 <memset@plt>
  4299bd:	mov    rax,QWORD PTR [rbx+0x28]
  4299c1:	add    rax,rbp
  4299c4:	lea    rdx,[rax+0x1]
  4299c8:	jmp    42990e <flatcc_json_printer_bool_enum_vector_field@@Base+0x14e>
  4299cd:	nop    DWORD PTR [rax]

00000000004299d0 <flatcc_json_printer_struct_vector_field@@Base>:
  4299d0:	endbr64 
  4299d4:	push   r15
  4299d6:	lea    eax,[rdx+rdx*1+0x4]
  4299da:	push   r14
  4299dc:	push   r13
  4299de:	push   r12
  4299e0:	push   rbp
  4299e1:	push   rbx
  4299e2:	sub    rsp,0x8
  4299e6:	mov    r14,QWORD PTR [rsp+0x40]
  4299eb:	cmp    eax,DWORD PTR [rsi+0x10]
  4299ee:	jge    429b89 <flatcc_json_printer_struct_vector_field@@Base+0x1b9>
  4299f4:	mov    rdx,QWORD PTR [rsi+0x8]
  4299f8:	movzx  eax,WORD PTR [rdx+rax*1]
  4299fc:	test   ax,ax
  4299ff:	je     429b89 <flatcc_json_printer_struct_vector_field@@Base+0x1b9>
  429a05:	add    rax,QWORD PTR [rsi]
  429a08:	je     429b89 <flatcc_json_printer_struct_vector_field@@Base+0x1b9>
  429a0e:	mov    edx,DWORD PTR [rsi+0x18]
  429a11:	lea    r10d,[rdx+0x1]
  429a15:	mov    DWORD PTR [rsi+0x18],r10d
  429a19:	test   edx,edx
  429a1b:	je     429a2c <flatcc_json_printer_struct_vector_field@@Base+0x5c>
  429a1d:	mov    rdx,QWORD PTR [rdi+0x28]
  429a21:	lea    rsi,[rdx+0x1]
  429a25:	mov    QWORD PTR [rdi+0x28],rsi
  429a29:	mov    BYTE PTR [rdx],0x2c
  429a2c:	mov    ebp,DWORD PTR [rax]
  429a2e:	mov    rbx,rdi
  429a31:	add    rbp,rax
  429a34:	movsxd rdx,r8d
  429a37:	mov    rsi,rcx
  429a3a:	mov    r13,r9
  429a3d:	mov    r15d,DWORD PTR [rbp+0x0]
  429a41:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  429a46:	mov    rax,QWORD PTR [rbx+0x28]
  429a4a:	inc    DWORD PTR [rbx+0x38]
  429a4d:	lea    rdx,[rax+0x1]
  429a51:	mov    QWORD PTR [rbx+0x28],rdx
  429a55:	mov    BYTE PTR [rax],0x5b
  429a58:	test   r15d,r15d
  429a5b:	je     429b70 <flatcc_json_printer_struct_vector_field@@Base+0x1a0>
  429a61:	cmp    BYTE PTR [rbx+0x31],0x0
  429a65:	mov    rax,QWORD PTR [rbx+0x28]
  429a69:	jne    429ba0 <flatcc_json_printer_struct_vector_field@@Base+0x1d0>
  429a6f:	cmp    QWORD PTR [rbx+0x20],rax
  429a73:	ja     429a81 <flatcc_json_printer_struct_vector_field@@Base+0xb1>
  429a75:	xor    esi,esi
  429a77:	mov    rdi,rbx
  429a7a:	call   QWORD PTR [rbx+0x48]
  429a7d:	mov    rax,QWORD PTR [rbx+0x28]
  429a81:	inc    DWORD PTR [rbx+0x38]
  429a84:	lea    rdx,[rax+0x1]
  429a88:	mov    QWORD PTR [rbx+0x28],rdx
  429a8c:	mov    BYTE PTR [rax],0x7b
  429a8f:	add    rbp,0x4
  429a93:	mov    rsi,rbp
  429a96:	mov    rdi,rbx
  429a99:	call   r14
  429a9c:	cmp    BYTE PTR [rbx+0x31],0x0
  429aa0:	jne    429c90 <flatcc_json_printer_struct_vector_field@@Base+0x2c0>
  429aa6:	mov    rax,QWORD PTR [rbx+0x28]
  429aaa:	lea    r12d,[r15-0x2]
  429aae:	lea    rdx,[rax+0x1]
  429ab2:	mov    QWORD PTR [rbx+0x28],rdx
  429ab6:	mov    BYTE PTR [rax],0x7d
  429ab9:	cmp    r15d,0x1
  429abd:	jne    429b17 <flatcc_json_printer_struct_vector_field@@Base+0x147>
  429abf:	jmp    429b70 <flatcc_json_printer_struct_vector_field@@Base+0x1a0>
  429ac4:	nop    DWORD PTR [rax+0x0]
  429ac8:	mov    rsi,QWORD PTR [rbx+0x28]
  429acc:	cmp    rsi,QWORD PTR [rbx+0x20]
  429ad0:	jb     429ade <flatcc_json_printer_struct_vector_field@@Base+0x10e>
  429ad2:	xor    esi,esi
  429ad4:	mov    rdi,rbx
  429ad7:	call   QWORD PTR [rbx+0x48]
  429ada:	mov    rsi,QWORD PTR [rbx+0x28]
  429ade:	inc    DWORD PTR [rbx+0x38]
  429ae1:	lea    rax,[rsi+0x1]
  429ae5:	mov    QWORD PTR [rbx+0x28],rax
  429ae9:	mov    BYTE PTR [rsi],0x7b
  429aec:	mov    rdi,rbx
  429aef:	mov    rsi,rbp
  429af2:	call   r14
  429af5:	cmp    BYTE PTR [rbx+0x31],0x0
  429af9:	jne    429bc0 <flatcc_json_printer_struct_vector_field@@Base+0x1f0>
  429aff:	mov    rsi,QWORD PTR [rbx+0x28]
  429b03:	lea    rax,[rsi+0x1]
  429b07:	dec    r12d
  429b0a:	mov    QWORD PTR [rbx+0x28],rax
  429b0e:	mov    BYTE PTR [rsi],0x7d
  429b11:	cmp    r12d,0xffffffff
  429b15:	je     429b70 <flatcc_json_printer_struct_vector_field@@Base+0x1a0>
  429b17:	mov    rax,QWORD PTR [rbx+0x28]
  429b1b:	add    rbp,r13
  429b1e:	lea    rdx,[rax+0x1]
  429b22:	mov    QWORD PTR [rbx+0x28],rdx
  429b26:	mov    BYTE PTR [rax],0x2c
  429b29:	cmp    BYTE PTR [rbx+0x31],0x0
  429b2d:	je     429ac8 <flatcc_json_printer_struct_vector_field@@Base+0xf8>
  429b2f:	mov    rax,QWORD PTR [rbx+0x28]
  429b33:	lea    rdx,[rax+0x1]
  429b37:	mov    QWORD PTR [rbx+0x28],rdx
  429b3b:	mov    BYTE PTR [rax],0xa
  429b3e:	movzx  esi,BYTE PTR [rbx+0x31]
  429b42:	mov    rdi,QWORD PTR [rbx+0x28]
  429b46:	imul   esi,DWORD PTR [rbx+0x38]
  429b4a:	movsxd r15,esi
  429b4d:	lea    rax,[rdi+r15*1]
  429b51:	cmp    QWORD PTR [rbx+0x20],rax
  429b55:	jae    429c08 <flatcc_json_printer_struct_vector_field@@Base+0x238>
  429b5b:	mov    rsi,r15
  429b5e:	mov    rdi,rbx
  429b61:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429b66:	mov    rsi,QWORD PTR [rbx+0x28]
  429b6a:	jmp    429ade <flatcc_json_printer_struct_vector_field@@Base+0x10e>
  429b6f:	nop
  429b70:	mov    rax,QWORD PTR [rbx+0x28]
  429b74:	cmp    BYTE PTR [rbx+0x31],0x0
  429b78:	lea    rdx,[rax+0x1]
  429b7c:	jne    429c48 <flatcc_json_printer_struct_vector_field@@Base+0x278>
  429b82:	mov    QWORD PTR [rbx+0x28],rdx
  429b86:	mov    BYTE PTR [rax],0x5d
  429b89:	add    rsp,0x8
  429b8d:	pop    rbx
  429b8e:	pop    rbp
  429b8f:	pop    r12
  429b91:	pop    r13
  429b93:	pop    r14
  429b95:	pop    r15
  429b97:	ret    
  429b98:	nop    DWORD PTR [rax+rax*1+0x0]
  429ba0:	lea    rdx,[rax+0x1]
  429ba4:	mov    QWORD PTR [rbx+0x28],rdx
  429ba8:	mov    BYTE PTR [rax],0xa
  429bab:	mov    rdi,rbx
  429bae:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  429bb3:	mov    rax,QWORD PTR [rbx+0x28]
  429bb7:	jmp    429a81 <flatcc_json_printer_struct_vector_field@@Base+0xb1>
  429bbc:	nop    DWORD PTR [rax+0x0]
  429bc0:	mov    rax,QWORD PTR [rbx+0x28]
  429bc4:	lea    rdx,[rax+0x1]
  429bc8:	mov    QWORD PTR [rbx+0x28],rdx
  429bcc:	mov    BYTE PTR [rax],0xa
  429bcf:	mov    eax,DWORD PTR [rbx+0x38]
  429bd2:	movzx  esi,BYTE PTR [rbx+0x31]
  429bd6:	lea    r15d,[rax-0x1]
  429bda:	imul   esi,r15d
  429bde:	mov    rdi,QWORD PTR [rbx+0x28]
  429be2:	mov    DWORD PTR [rbx+0x38],r15d
  429be6:	movsxd r15,esi
  429be9:	lea    rax,[rdi+r15*1]
  429bed:	cmp    QWORD PTR [rbx+0x20],rax
  429bf1:	jae    429c28 <flatcc_json_printer_struct_vector_field@@Base+0x258>
  429bf3:	mov    rsi,r15
  429bf6:	mov    rdi,rbx
  429bf9:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429bfe:	jmp    429aff <flatcc_json_printer_struct_vector_field@@Base+0x12f>
  429c03:	nop    DWORD PTR [rax+rax*1+0x0]
  429c08:	mov    esi,0x20
  429c0d:	mov    rdx,r15
  429c10:	call   4061c0 <memset@plt>
  429c15:	mov    rsi,QWORD PTR [rbx+0x28]
  429c19:	add    rsi,r15
  429c1c:	jmp    429ade <flatcc_json_printer_struct_vector_field@@Base+0x10e>
  429c21:	nop    DWORD PTR [rax+0x0]
  429c28:	mov    esi,0x20
  429c2d:	mov    rdx,r15
  429c30:	call   4061c0 <memset@plt>
  429c35:	mov    rsi,QWORD PTR [rbx+0x28]
  429c39:	add    rsi,r15
  429c3c:	jmp    429b03 <flatcc_json_printer_struct_vector_field@@Base+0x133>
  429c41:	nop    DWORD PTR [rax+0x0]
  429c48:	mov    QWORD PTR [rbx+0x28],rdx
  429c4c:	mov    BYTE PTR [rax],0xa
  429c4f:	mov    eax,DWORD PTR [rbx+0x38]
  429c52:	mov    rdi,QWORD PTR [rbx+0x28]
  429c56:	lea    ebp,[rax-0x1]
  429c59:	movzx  eax,BYTE PTR [rbx+0x31]
  429c5d:	mov    DWORD PTR [rbx+0x38],ebp
  429c60:	imul   eax,ebp
  429c63:	movsxd rbp,eax
  429c66:	lea    rax,[rdi+rbp*1]
  429c6a:	cmp    QWORD PTR [rbx+0x20],rax
  429c6e:	jae    429cb0 <flatcc_json_printer_struct_vector_field@@Base+0x2e0>
  429c70:	mov    rsi,rbp
  429c73:	mov    rdi,rbx
  429c76:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429c7b:	mov    rax,QWORD PTR [rbx+0x28]
  429c7f:	lea    rdx,[rax+0x1]
  429c83:	jmp    429b82 <flatcc_json_printer_struct_vector_field@@Base+0x1b2>
  429c88:	nop    DWORD PTR [rax+rax*1+0x0]
  429c90:	mov    rax,QWORD PTR [rbx+0x28]
  429c94:	mov    rdi,rbx
  429c97:	lea    rdx,[rax+0x1]
  429c9b:	mov    QWORD PTR [rbx+0x28],rdx
  429c9f:	mov    BYTE PTR [rax],0xa
  429ca2:	dec    DWORD PTR [rbx+0x38]
  429ca5:	call   421190 <flatcc_json_parser_struct_as_root@@Base+0xbc0>
  429caa:	jmp    429aa6 <flatcc_json_printer_struct_vector_field@@Base+0xd6>
  429caf:	nop
  429cb0:	mov    rdx,rbp
  429cb3:	mov    esi,0x20
  429cb8:	call   4061c0 <memset@plt>
  429cbd:	mov    rax,QWORD PTR [rbx+0x28]
  429cc1:	add    rax,rbp
  429cc4:	lea    rdx,[rax+0x1]
  429cc8:	jmp    429b82 <flatcc_json_printer_struct_vector_field@@Base+0x1b2>
  429ccd:	nop    DWORD PTR [rax]

0000000000429cd0 <flatcc_json_printer_string_vector_field@@Base>:
  429cd0:	endbr64 
  429cd4:	lea    eax,[rdx+rdx*1+0x4]
  429cd8:	cmp    eax,DWORD PTR [rsi+0x10]
  429cdb:	jge    429ea0 <flatcc_json_printer_string_vector_field@@Base+0x1d0>
  429ce1:	mov    rdx,QWORD PTR [rsi+0x8]
  429ce5:	movzx  eax,WORD PTR [rdx+rax*1]
  429ce9:	test   ax,ax
  429cec:	je     429ea0 <flatcc_json_printer_string_vector_field@@Base+0x1d0>
  429cf2:	add    rax,QWORD PTR [rsi]
  429cf5:	je     429ea0 <flatcc_json_printer_string_vector_field@@Base+0x1d0>
  429cfb:	push   r15
  429cfd:	push   r14
  429cff:	push   r13
  429d01:	push   r12
  429d03:	push   rbp
  429d04:	push   rbx
  429d05:	sub    rsp,0x8
  429d09:	mov    r9d,DWORD PTR [rsi+0x18]
  429d0d:	lea    edx,[r9+0x1]
  429d11:	mov    DWORD PTR [rsi+0x18],edx
  429d14:	mov    rdx,QWORD PTR [rdi+0x28]
  429d18:	test   r9d,r9d
  429d1b:	je     429d2c <flatcc_json_printer_string_vector_field@@Base+0x5c>
  429d1d:	lea    rsi,[rdx+0x1]
  429d21:	mov    QWORD PTR [rdi+0x28],rsi
  429d25:	mov    BYTE PTR [rdx],0x2c
  429d28:	mov    rdx,QWORD PTR [rdi+0x28]
  429d2c:	mov    r12d,DWORD PTR [rax]
  429d2f:	mov    r15,rcx
  429d32:	add    r12,rax
  429d35:	cmp    BYTE PTR [rdi+0x31],0x0
  429d39:	mov    rbx,rdi
  429d3c:	mov    r13d,DWORD PTR [r12]
  429d40:	movsxd rbp,r8d
  429d43:	jne    429f60 <flatcc_json_printer_string_vector_field@@Base+0x290>
  429d49:	cmp    QWORD PTR [rdi+0x20],rdx
  429d4d:	jbe    429ee8 <flatcc_json_printer_string_vector_field@@Base+0x218>
  429d53:	mov    BYTE PTR [rdx],0x22
  429d56:	xor    edi,edi
  429d58:	mov    rdx,rbp
  429d5b:	cmp    BYTE PTR [rbx+0x32],0x0
  429d5f:	sete   dil
  429d63:	add    rdi,QWORD PTR [rbx+0x28]
  429d67:	lea    rax,[rdi+rbp*1]
  429d6b:	mov    QWORD PTR [rbx+0x28],rdi
  429d6f:	mov    rsi,r15
  429d72:	cmp    QWORD PTR [rbx+0x20],rax
  429d76:	jbe    429ed0 <flatcc_json_printer_string_vector_field@@Base+0x200>
  429d7c:	call   406210 <memcpy@plt>
  429d81:	add    rbp,QWORD PTR [rbx+0x28]
  429d85:	mov    QWORD PTR [rbx+0x28],rbp
  429d89:	mov    BYTE PTR [rbp+0x0],0x22
  429d8d:	xor    eax,eax
  429d8f:	cmp    BYTE PTR [rbx+0x32],0x0
  429d93:	sete   al
  429d96:	add    rax,QWORD PTR [rbx+0x28]
  429d9a:	lea    rdx,[rax+0x1]
  429d9e:	mov    QWORD PTR [rbx+0x28],rdx
  429da2:	mov    BYTE PTR [rax],0x3a
  429da5:	mov    rax,QWORD PTR [rbx+0x28]
  429da9:	mov    BYTE PTR [rax],0x20
  429dac:	xor    eax,eax
  429dae:	cmp    BYTE PTR [rbx+0x31],0x0
  429db2:	setne  al
  429db5:	add    rax,QWORD PTR [rbx+0x28]
  429db9:	lea    rdx,[rax+0x1]
  429dbd:	inc    DWORD PTR [rbx+0x38]
  429dc0:	mov    QWORD PTR [rbx+0x28],rdx
  429dc4:	mov    BYTE PTR [rax],0x5b
  429dc7:	test   r13d,r13d
  429dca:	je     429ea8 <flatcc_json_printer_string_vector_field@@Base+0x1d8>
  429dd0:	cmp    BYTE PTR [rbx+0x31],0x0
  429dd4:	mov    rax,QWORD PTR [rbx+0x28]
  429dd8:	jne    429f00 <flatcc_json_printer_string_vector_field@@Base+0x230>
  429dde:	cmp    QWORD PTR [rbx+0x20],rax
  429de2:	ja     429dec <flatcc_json_printer_string_vector_field@@Base+0x11c>
  429de4:	xor    esi,esi
  429de6:	mov    rdi,rbx
  429de9:	call   QWORD PTR [rbx+0x48]
  429dec:	mov    esi,DWORD PTR [r12+0x4]
  429df1:	lea    rbp,[r12+0x4]
  429df6:	add    rsi,rbp
  429df9:	mov    edx,DWORD PTR [rsi]
  429dfb:	mov    rdi,rbx
  429dfe:	add    rsi,0x4
  429e02:	call   421ef0 <flatcc_json_parser_struct_as_root@@Base+0x1920>
  429e07:	lea    eax,[r13-0x2]
  429e0b:	cmp    r13d,0x1
  429e0f:	je     429ea8 <flatcc_json_printer_string_vector_field@@Base+0x1d8>
  429e15:	lea    r12,[r12+rax*4+0x8]
  429e1a:	jmp    429e4b <flatcc_json_printer_string_vector_field@@Base+0x17b>
  429e1c:	nop    DWORD PTR [rax+0x0]
  429e20:	mov    rax,QWORD PTR [rbx+0x20]
  429e24:	cmp    QWORD PTR [rbx+0x28],rax
  429e28:	jb     429e32 <flatcc_json_printer_string_vector_field@@Base+0x162>
  429e2a:	xor    esi,esi
  429e2c:	mov    rdi,rbx
  429e2f:	call   QWORD PTR [rbx+0x48]
  429e32:	mov    esi,DWORD PTR [rbp+0x0]
  429e35:	mov    rdi,rbx
  429e38:	add    rsi,rbp
  429e3b:	mov    edx,DWORD PTR [rsi]
  429e3d:	add    rsi,0x4
  429e41:	call   421ef0 <flatcc_json_parser_struct_as_root@@Base+0x1920>
  429e46:	cmp    rbp,r12
  429e49:	je     429ea8 <flatcc_json_printer_string_vector_field@@Base+0x1d8>
  429e4b:	mov    rax,QWORD PTR [rbx+0x28]
  429e4f:	add    rbp,0x4
  429e53:	lea    rdx,[rax+0x1]
  429e57:	mov    QWORD PTR [rbx+0x28],rdx
  429e5b:	mov    BYTE PTR [rax],0x2c
  429e5e:	cmp    BYTE PTR [rbx+0x31],0x0
  429e62:	je     429e20 <flatcc_json_printer_string_vector_field@@Base+0x150>
  429e64:	mov    rax,QWORD PTR [rbx+0x28]
  429e68:	lea    rdx,[rax+0x1]
  429e6c:	mov    QWORD PTR [rbx+0x28],rdx
  429e70:	mov    BYTE PTR [rax],0xa
  429e73:	movzx  r13d,BYTE PTR [rbx+0x31]
  429e78:	mov    rdi,QWORD PTR [rbx+0x28]
  429e7c:	imul   r13d,DWORD PTR [rbx+0x38]
  429e81:	movsxd r13,r13d
  429e84:	lea    rax,[rdi+r13*1]
  429e88:	cmp    QWORD PTR [rbx+0x20],rax
  429e8c:	jae    429f40 <flatcc_json_printer_string_vector_field@@Base+0x270>
  429e92:	mov    rsi,r13
  429e95:	mov    rdi,rbx
  429e98:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429e9d:	jmp    429e32 <flatcc_json_printer_string_vector_field@@Base+0x162>
  429e9f:	nop
  429ea0:	ret    
  429ea1:	nop    DWORD PTR [rax+0x0]
  429ea8:	mov    rax,QWORD PTR [rbx+0x28]
  429eac:	cmp    BYTE PTR [rbx+0x31],0x0
  429eb0:	lea    rdx,[rax+0x1]
  429eb4:	jne    429fa0 <flatcc_json_printer_string_vector_field@@Base+0x2d0>
  429eba:	mov    QWORD PTR [rbx+0x28],rdx
  429ebe:	mov    BYTE PTR [rax],0x5d
  429ec1:	add    rsp,0x8
  429ec5:	pop    rbx
  429ec6:	pop    rbp
  429ec7:	pop    r12
  429ec9:	pop    r13
  429ecb:	pop    r14
  429ecd:	pop    r15
  429ecf:	ret    
  429ed0:	mov    rdi,rbx
  429ed3:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  429ed8:	mov    rbp,QWORD PTR [rbx+0x28]
  429edc:	jmp    429d89 <flatcc_json_printer_string_vector_field@@Base+0xb9>
  429ee1:	nop    DWORD PTR [rax+0x0]
  429ee8:	xor    esi,esi
  429eea:	call   QWORD PTR [rdi+0x48]
  429eed:	mov    rdx,QWORD PTR [rbx+0x28]
  429ef1:	jmp    429d53 <flatcc_json_printer_string_vector_field@@Base+0x83>
  429ef6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  429f00:	lea    rdx,[rax+0x1]
  429f04:	mov    QWORD PTR [rbx+0x28],rdx
  429f08:	mov    BYTE PTR [rax],0xa
  429f0b:	movzx  ebp,BYTE PTR [rbx+0x31]
  429f0f:	mov    rdi,QWORD PTR [rbx+0x28]
  429f13:	imul   ebp,DWORD PTR [rbx+0x38]
  429f17:	movsxd rbp,ebp
  429f1a:	lea    rax,[rdi+rbp*1]
  429f1e:	cmp    QWORD PTR [rbx+0x20],rax
  429f22:	jae    42a01d <flatcc_json_printer_string_vector_field@@Base+0x34d>
  429f28:	mov    rsi,rbp
  429f2b:	mov    rdi,rbx
  429f2e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429f33:	jmp    429dec <flatcc_json_printer_string_vector_field@@Base+0x11c>
  429f38:	nop    DWORD PTR [rax+rax*1+0x0]
  429f40:	mov    rdx,r13
  429f43:	mov    esi,0x20
  429f48:	call   4061c0 <memset@plt>
  429f4d:	add    QWORD PTR [rbx+0x28],r13
  429f51:	jmp    429e32 <flatcc_json_printer_string_vector_field@@Base+0x162>
  429f56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  429f60:	lea    rax,[rdx+0x1]
  429f64:	mov    QWORD PTR [rdi+0x28],rax
  429f68:	mov    BYTE PTR [rdx],0xa
  429f6b:	movzx  edx,BYTE PTR [rdi+0x31]
  429f6f:	imul   edx,DWORD PTR [rdi+0x38]
  429f73:	mov    rdi,QWORD PTR [rdi+0x28]
  429f77:	movsxd r14,edx
  429f7a:	lea    rax,[rdi+r14*1]
  429f7e:	cmp    QWORD PTR [rbx+0x20],rax
  429f82:	jae    429fe0 <flatcc_json_printer_string_vector_field@@Base+0x310>
  429f84:	mov    rsi,r14
  429f87:	mov    rdi,rbx
  429f8a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429f8f:	mov    rdx,QWORD PTR [rbx+0x28]
  429f93:	jmp    429d53 <flatcc_json_printer_string_vector_field@@Base+0x83>
  429f98:	nop    DWORD PTR [rax+rax*1+0x0]
  429fa0:	mov    QWORD PTR [rbx+0x28],rdx
  429fa4:	mov    BYTE PTR [rax],0xa
  429fa7:	mov    eax,DWORD PTR [rbx+0x38]
  429faa:	mov    rdi,QWORD PTR [rbx+0x28]
  429fae:	lea    ebp,[rax-0x1]
  429fb1:	movzx  eax,BYTE PTR [rbx+0x31]
  429fb5:	mov    DWORD PTR [rbx+0x38],ebp
  429fb8:	imul   eax,ebp
  429fbb:	movsxd rbp,eax
  429fbe:	lea    rax,[rdi+rbp*1]
  429fc2:	cmp    QWORD PTR [rbx+0x20],rax
  429fc6:	jae    42a000 <flatcc_json_printer_string_vector_field@@Base+0x330>
  429fc8:	mov    rsi,rbp
  429fcb:	mov    rdi,rbx
  429fce:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  429fd3:	mov    rax,QWORD PTR [rbx+0x28]
  429fd7:	lea    rdx,[rax+0x1]
  429fdb:	jmp    429eba <flatcc_json_printer_string_vector_field@@Base+0x1ea>
  429fe0:	mov    rdx,r14
  429fe3:	mov    esi,0x20
  429fe8:	call   4061c0 <memset@plt>
  429fed:	mov    rdx,QWORD PTR [rbx+0x28]
  429ff1:	add    rdx,r14
  429ff4:	mov    QWORD PTR [rbx+0x28],rdx
  429ff8:	jmp    429d53 <flatcc_json_printer_string_vector_field@@Base+0x83>
  429ffd:	nop    DWORD PTR [rax]
  42a000:	mov    rdx,rbp
  42a003:	mov    esi,0x20
  42a008:	call   4061c0 <memset@plt>
  42a00d:	mov    rax,QWORD PTR [rbx+0x28]
  42a011:	add    rax,rbp
  42a014:	lea    rdx,[rax+0x1]
  42a018:	jmp    429eba <flatcc_json_printer_string_vector_field@@Base+0x1ea>
  42a01d:	mov    rdx,rbp
  42a020:	mov    esi,0x20
  42a025:	call   4061c0 <memset@plt>
  42a02a:	add    QWORD PTR [rbx+0x28],rbp
  42a02e:	jmp    429dec <flatcc_json_printer_string_vector_field@@Base+0x11c>
  42a033:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  42a03e:	xchg   ax,ax

000000000042a040 <flatcc_json_printer_table_vector_field@@Base>:
  42a040:	endbr64 
  42a044:	push   r15
  42a046:	push   r14
  42a048:	push   r13
  42a04a:	push   r12
  42a04c:	push   rbp
  42a04d:	push   rbx
  42a04e:	sub    rsp,0x48
  42a052:	mov    rax,QWORD PTR fs:0x28
  42a05b:	mov    QWORD PTR [rsp+0x38],rax
  42a060:	xor    eax,eax
  42a062:	lea    eax,[rdx+rdx*1+0x4]
  42a066:	cmp    eax,DWORD PTR [rsi+0x10]
  42a069:	jge    42a169 <flatcc_json_printer_table_vector_field@@Base+0x129>
  42a06f:	mov    rdx,QWORD PTR [rsi+0x8]
  42a073:	mov    r14,rsi
  42a076:	movzx  ebp,WORD PTR [rdx+rax*1]
  42a07a:	test   bp,bp
  42a07d:	je     42a169 <flatcc_json_printer_table_vector_field@@Base+0x129>
  42a083:	add    rbp,QWORD PTR [rsi]
  42a086:	je     42a169 <flatcc_json_printer_table_vector_field@@Base+0x129>
  42a08c:	mov    edx,DWORD PTR [rsi+0x18]
  42a08f:	mov    rbx,rdi
  42a092:	lea    eax,[rdx+0x1]
  42a095:	mov    DWORD PTR [rsi+0x18],eax
  42a098:	mov    r12,r9
  42a09b:	mov    rax,QWORD PTR [rdi+0x28]
  42a09f:	test   edx,edx
  42a0a1:	je     42a0b2 <flatcc_json_printer_table_vector_field@@Base+0x72>
  42a0a3:	lea    rdx,[rax+0x1]
  42a0a7:	mov    QWORD PTR [rdi+0x28],rdx
  42a0ab:	mov    BYTE PTR [rax],0x2c
  42a0ae:	mov    rax,QWORD PTR [rdi+0x28]
  42a0b2:	mov    edx,DWORD PTR [rbp+0x0]
  42a0b5:	movsxd r15,r8d
  42a0b8:	add    rbp,rdx
  42a0bb:	cmp    BYTE PTR [rbx+0x31],0x0
  42a0bf:	mov    r13d,DWORD PTR [rbp+0x0]
  42a0c3:	jne    42a1c8 <flatcc_json_printer_table_vector_field@@Base+0x188>
  42a0c9:	cmp    QWORD PTR [rbx+0x20],rax
  42a0cd:	jbe    42a1a8 <flatcc_json_printer_table_vector_field@@Base+0x168>
  42a0d3:	mov    BYTE PTR [rax],0x22
  42a0d6:	xor    edi,edi
  42a0d8:	mov    rdx,r15
  42a0db:	cmp    BYTE PTR [rbx+0x32],0x0
  42a0df:	sete   dil
  42a0e3:	add    rdi,QWORD PTR [rbx+0x28]
  42a0e7:	lea    rax,[rdi+r15*1]
  42a0eb:	mov    QWORD PTR [rbx+0x28],rdi
  42a0ef:	mov    rsi,rcx
  42a0f2:	cmp    QWORD PTR [rbx+0x20],rax
  42a0f6:	jbe    42a190 <flatcc_json_printer_table_vector_field@@Base+0x150>
  42a0fc:	call   406210 <memcpy@plt>
  42a101:	add    r15,QWORD PTR [rbx+0x28]
  42a105:	mov    QWORD PTR [rbx+0x28],r15
  42a109:	mov    BYTE PTR [r15],0x22
  42a10d:	xor    eax,eax
  42a10f:	cmp    BYTE PTR [rbx+0x32],0x0
  42a113:	sete   al
  42a116:	add    rax,QWORD PTR [rbx+0x28]
  42a11a:	lea    rdx,[rax+0x1]
  42a11e:	mov    QWORD PTR [rbx+0x28],rdx
  42a122:	mov    BYTE PTR [rax],0x3a
  42a125:	mov    rax,QWORD PTR [rbx+0x28]
  42a129:	mov    BYTE PTR [rax],0x20
  42a12c:	xor    eax,eax
  42a12e:	cmp    BYTE PTR [rbx+0x31],0x0
  42a132:	setne  al
  42a135:	add    rax,QWORD PTR [rbx+0x28]
  42a139:	lea    rdx,[rax+0x1]
  42a13d:	inc    DWORD PTR [rbx+0x38]
  42a140:	mov    QWORD PTR [rbx+0x28],rdx
  42a144:	mov    BYTE PTR [rax],0x5b
  42a147:	test   r13d,r13d
  42a14a:	jne    42a258 <flatcc_json_printer_table_vector_field@@Base+0x218>
  42a150:	mov    rax,QWORD PTR [rbx+0x28]
  42a154:	lea    rdx,[rax+0x1]
  42a158:	cmp    BYTE PTR [rbx+0x31],0x0
  42a15c:	jne    42a210 <flatcc_json_printer_table_vector_field@@Base+0x1d0>
  42a162:	mov    QWORD PTR [rbx+0x28],rdx
  42a166:	mov    BYTE PTR [rax],0x5d
  42a169:	mov    rax,QWORD PTR [rsp+0x38]
  42a16e:	xor    rax,QWORD PTR fs:0x28
  42a177:	jne    42a4a8 <flatcc_json_printer_table_vector_field@@Base+0x468>
  42a17d:	add    rsp,0x48
  42a181:	pop    rbx
  42a182:	pop    rbp
  42a183:	pop    r12
  42a185:	pop    r13
  42a187:	pop    r14
  42a189:	pop    r15
  42a18b:	ret    
  42a18c:	nop    DWORD PTR [rax+0x0]
  42a190:	mov    rdi,rbx
  42a193:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42a198:	mov    r15,QWORD PTR [rbx+0x28]
  42a19c:	jmp    42a109 <flatcc_json_printer_table_vector_field@@Base+0xc9>
  42a1a1:	nop    DWORD PTR [rax+0x0]
  42a1a8:	xor    esi,esi
  42a1aa:	mov    rdi,rbx
  42a1ad:	mov    QWORD PTR [rsp],rcx
  42a1b1:	call   QWORD PTR [rbx+0x48]
  42a1b4:	mov    rax,QWORD PTR [rbx+0x28]
  42a1b8:	mov    rcx,QWORD PTR [rsp]
  42a1bc:	jmp    42a0d3 <flatcc_json_printer_table_vector_field@@Base+0x93>
  42a1c1:	nop    DWORD PTR [rax+0x0]
  42a1c8:	lea    rdx,[rax+0x1]
  42a1cc:	mov    QWORD PTR [rbx+0x28],rdx
  42a1d0:	mov    BYTE PTR [rax],0xa
  42a1d3:	movzx  eax,BYTE PTR [rbx+0x31]
  42a1d7:	mov    rdi,QWORD PTR [rbx+0x28]
  42a1db:	imul   eax,DWORD PTR [rbx+0x38]
  42a1df:	movsxd r8,eax
  42a1e2:	lea    rax,[rdi+r8*1]
  42a1e6:	cmp    QWORD PTR [rbx+0x20],rax
  42a1ea:	jae    42a3d8 <flatcc_json_printer_table_vector_field@@Base+0x398>
  42a1f0:	mov    rsi,r8
  42a1f3:	mov    rdi,rbx
  42a1f6:	mov    QWORD PTR [rsp],rcx
  42a1fa:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42a1ff:	mov    rax,QWORD PTR [rbx+0x28]
  42a203:	mov    rcx,QWORD PTR [rsp]
  42a207:	jmp    42a0d3 <flatcc_json_printer_table_vector_field@@Base+0x93>
  42a20c:	nop    DWORD PTR [rax+0x0]
  42a210:	mov    QWORD PTR [rbx+0x28],rdx
  42a214:	mov    BYTE PTR [rax],0xa
  42a217:	mov    eax,DWORD PTR [rbx+0x38]
  42a21a:	mov    rdi,QWORD PTR [rbx+0x28]
  42a21e:	lea    ebp,[rax-0x1]
  42a221:	movzx  eax,BYTE PTR [rbx+0x31]
  42a225:	mov    DWORD PTR [rbx+0x38],ebp
  42a228:	imul   eax,ebp
  42a22b:	movsxd rbp,eax
  42a22e:	lea    rax,[rdi+rbp*1]
  42a232:	cmp    QWORD PTR [rbx+0x20],rax
  42a236:	jae    42a410 <flatcc_json_printer_table_vector_field@@Base+0x3d0>
  42a23c:	mov    rsi,rbp
  42a23f:	mov    rdi,rbx
  42a242:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42a247:	mov    rax,QWORD PTR [rbx+0x28]
  42a24b:	lea    rdx,[rax+0x1]
  42a24f:	jmp    42a162 <flatcc_json_printer_table_vector_field@@Base+0x122>
  42a254:	nop    DWORD PTR [rax+0x0]
  42a258:	mov    ecx,DWORD PTR [r14+0x14]
  42a25c:	lea    r15,[rbp+0x4]
  42a260:	mov    rax,QWORD PTR [rbx+0x28]
  42a264:	dec    ecx
  42a266:	je     42a430 <flatcc_json_printer_table_vector_field@@Base+0x3f0>
  42a26c:	mov    edx,DWORD PTR [rbp+0x4]
  42a26f:	lea    rsi,[rax+0x1]
  42a273:	inc    DWORD PTR [rbx+0x38]
  42a276:	mov    QWORD PTR [rbx+0x28],rsi
  42a27a:	mov    BYTE PTR [rax],0x7b
  42a27d:	mov    DWORD PTR [rsp+0x28],0x0
  42a285:	mov    DWORD PTR [rsp+0x24],ecx
  42a289:	add    rdx,r15
  42a28c:	mov    QWORD PTR [rsp+0x10],rdx
  42a291:	movsxd rax,DWORD PTR [rdx]
  42a294:	lea    rsi,[rsp+0x10]
  42a299:	sub    rdx,rax
  42a29c:	movzx  eax,WORD PTR [rdx]
  42a29f:	mov    rdi,rbx
  42a2a2:	mov    DWORD PTR [rsp+0x20],eax
  42a2a6:	mov    QWORD PTR [rsp+0x18],rdx
  42a2ab:	call   r12
  42a2ae:	cmp    BYTE PTR [rbx+0x31],0x0
  42a2b2:	mov    rax,QWORD PTR [rbx+0x28]
  42a2b6:	jne    42a447 <flatcc_json_printer_table_vector_field@@Base+0x407>
  42a2bc:	lea    rdx,[rax+0x1]
  42a2c0:	mov    QWORD PTR [rbx+0x28],rdx
  42a2c4:	mov    BYTE PTR [rax],0x7d
  42a2c7:	mov    rax,QWORD PTR [rbx+0x28]
  42a2cb:	lea    edx,[r13-0x1]
  42a2cf:	lea    rbp,[rbp+rdx*4+0x4]
  42a2d4:	lea    r13,[rsp+0x10]
  42a2d9:	jmp    42a33d <flatcc_json_printer_table_vector_field@@Base+0x2fd>
  42a2db:	nop    DWORD PTR [rax+rax*1+0x0]
  42a2e0:	mov    rcx,QWORD PTR [rbx+0x28]
  42a2e4:	mov    eax,DWORD PTR [r15]
  42a2e7:	lea    rsi,[rcx+0x1]
  42a2eb:	inc    DWORD PTR [rbx+0x38]
  42a2ee:	mov    QWORD PTR [rbx+0x28],rsi
  42a2f2:	mov    BYTE PTR [rcx],0x7b
  42a2f5:	mov    DWORD PTR [rsp+0x28],0x0
  42a2fd:	mov    DWORD PTR [rsp+0x24],edx
  42a301:	add    rax,r15
  42a304:	mov    QWORD PTR [rsp+0x10],rax
  42a309:	movsxd rdx,DWORD PTR [rax]
  42a30c:	mov    rsi,r13
  42a30f:	sub    rax,rdx
  42a312:	mov    QWORD PTR [rsp+0x18],rax
  42a317:	movzx  eax,WORD PTR [rax]
  42a31a:	mov    rdi,rbx
  42a31d:	mov    DWORD PTR [rsp+0x20],eax
  42a321:	call   r12
  42a324:	cmp    BYTE PTR [rbx+0x31],0x0
  42a328:	jne    42a370 <flatcc_json_printer_table_vector_field@@Base+0x330>
  42a32a:	mov    rsi,QWORD PTR [rbx+0x28]
  42a32e:	lea    rax,[rsi+0x1]
  42a332:	mov    QWORD PTR [rbx+0x28],rax
  42a336:	mov    BYTE PTR [rsi],0x7d
  42a339:	mov    rax,QWORD PTR [rbx+0x28]
  42a33d:	lea    rdx,[rax+0x1]
  42a341:	cmp    r15,rbp
  42a344:	je     42a158 <flatcc_json_printer_table_vector_field@@Base+0x118>
  42a34a:	mov    QWORD PTR [rbx+0x28],rdx
  42a34e:	mov    BYTE PTR [rax],0x2c
  42a351:	add    r15,0x4
  42a355:	mov    edx,DWORD PTR [r14+0x14]
  42a359:	dec    edx
  42a35b:	jne    42a2e0 <flatcc_json_printer_table_vector_field@@Base+0x2a0>
  42a35d:	mov    eax,DWORD PTR [rbx+0x3c]
  42a360:	test   eax,eax
  42a362:	jne    42a339 <flatcc_json_printer_table_vector_field@@Base+0x2f9>
  42a364:	mov    DWORD PTR [rbx+0x3c],0x2
  42a36b:	jmp    42a339 <flatcc_json_printer_table_vector_field@@Base+0x2f9>
  42a36d:	nop    DWORD PTR [rax]
  42a370:	mov    rax,QWORD PTR [rbx+0x28]
  42a374:	lea    rdx,[rax+0x1]
  42a378:	mov    QWORD PTR [rbx+0x28],rdx
  42a37c:	mov    BYTE PTR [rax],0xa
  42a37f:	mov    eax,DWORD PTR [rbx+0x38]
  42a382:	movzx  esi,BYTE PTR [rbx+0x31]
  42a386:	lea    ecx,[rax-0x1]
  42a389:	imul   esi,ecx
  42a38c:	mov    rdi,QWORD PTR [rbx+0x28]
  42a390:	mov    DWORD PTR [rbx+0x38],ecx
  42a393:	movsxd rcx,esi
  42a396:	lea    rax,[rdi+rcx*1]
  42a39a:	cmp    QWORD PTR [rbx+0x20],rax
  42a39e:	jae    42a3b0 <flatcc_json_printer_table_vector_field@@Base+0x370>
  42a3a0:	mov    rsi,rcx
  42a3a3:	mov    rdi,rbx
  42a3a6:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42a3ab:	jmp    42a32a <flatcc_json_printer_table_vector_field@@Base+0x2ea>
  42a3b0:	mov    rdx,rcx
  42a3b3:	mov    esi,0x20
  42a3b8:	mov    QWORD PTR [rsp],rcx
  42a3bc:	call   4061c0 <memset@plt>
  42a3c1:	mov    rcx,QWORD PTR [rsp]
  42a3c5:	add    rcx,QWORD PTR [rbx+0x28]
  42a3c9:	mov    rsi,rcx
  42a3cc:	jmp    42a32e <flatcc_json_printer_table_vector_field@@Base+0x2ee>
  42a3d1:	nop    DWORD PTR [rax+0x0]
  42a3d8:	mov    rdx,r8
  42a3db:	mov    esi,0x20
  42a3e0:	mov    QWORD PTR [rsp+0x8],rcx
  42a3e5:	mov    QWORD PTR [rsp],r8
  42a3e9:	call   4061c0 <memset@plt>
  42a3ee:	mov    rax,QWORD PTR [rbx+0x28]
  42a3f2:	mov    r8,QWORD PTR [rsp]
  42a3f6:	mov    rcx,QWORD PTR [rsp+0x8]
  42a3fb:	add    rax,r8
  42a3fe:	mov    QWORD PTR [rbx+0x28],rax
  42a402:	jmp    42a0d3 <flatcc_json_printer_table_vector_field@@Base+0x93>
  42a407:	nop    WORD PTR [rax+rax*1+0x0]
  42a410:	mov    rdx,rbp
  42a413:	mov    esi,0x20
  42a418:	call   4061c0 <memset@plt>
  42a41d:	mov    rax,QWORD PTR [rbx+0x28]
  42a421:	add    rax,rbp
  42a424:	lea    rdx,[rax+0x1]
  42a428:	jmp    42a162 <flatcc_json_printer_table_vector_field@@Base+0x122>
  42a42d:	nop    DWORD PTR [rax]
  42a430:	mov    edx,DWORD PTR [rbx+0x3c]
  42a433:	test   edx,edx
  42a435:	jne    42a2cb <flatcc_json_printer_table_vector_field@@Base+0x28b>
  42a43b:	mov    DWORD PTR [rbx+0x3c],0x2
  42a442:	jmp    42a2cb <flatcc_json_printer_table_vector_field@@Base+0x28b>
  42a447:	lea    rdx,[rax+0x1]
  42a44b:	mov    QWORD PTR [rbx+0x28],rdx
  42a44f:	mov    BYTE PTR [rax],0xa
  42a452:	mov    eax,DWORD PTR [rbx+0x38]
  42a455:	mov    rdi,QWORD PTR [rbx+0x28]
  42a459:	lea    ecx,[rax-0x1]
  42a45c:	movzx  eax,BYTE PTR [rbx+0x31]
  42a460:	mov    DWORD PTR [rbx+0x38],ecx
  42a463:	imul   eax,ecx
  42a466:	movsxd rcx,eax
  42a469:	lea    rax,[rdi+rcx*1]
  42a46d:	cmp    QWORD PTR [rbx+0x20],rax
  42a471:	jae    42a487 <flatcc_json_printer_table_vector_field@@Base+0x447>
  42a473:	mov    rsi,rcx
  42a476:	mov    rdi,rbx
  42a479:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42a47e:	mov    rax,QWORD PTR [rbx+0x28]
  42a482:	jmp    42a2bc <flatcc_json_printer_table_vector_field@@Base+0x27c>
  42a487:	mov    rdx,rcx
  42a48a:	mov    esi,0x20
  42a48f:	mov    QWORD PTR [rsp],rcx
  42a493:	call   4061c0 <memset@plt>
  42a498:	mov    rcx,QWORD PTR [rsp]
  42a49c:	mov    rax,QWORD PTR [rbx+0x28]
  42a4a0:	add    rax,rcx
  42a4a3:	jmp    42a2bc <flatcc_json_printer_table_vector_field@@Base+0x27c>
  42a4a8:	call   4061a0 <__stack_chk_fail@plt>
  42a4ad:	nop    DWORD PTR [rax]

000000000042a4b0 <flatcc_json_printer_union_vector_field@@Base>:
  42a4b0:	endbr64 
  42a4b4:	push   r15
  42a4b6:	push   r14
  42a4b8:	push   r13
  42a4ba:	mov    r13d,edx
  42a4bd:	push   r12
  42a4bf:	push   rbp
  42a4c0:	mov    rbp,rsi
  42a4c3:	push   rbx
  42a4c4:	mov    rbx,rdi
  42a4c7:	sub    rsp,0xb8
  42a4ce:	mov    QWORD PTR [rsp],rcx
  42a4d2:	mov    ecx,DWORD PTR [rsi+0x10]
  42a4d5:	mov    r14,QWORD PTR [rsp+0xf0]
  42a4dd:	mov    rax,QWORD PTR fs:0x28
  42a4e6:	mov    QWORD PTR [rsp+0xa8],rax
  42a4ee:	xor    eax,eax
  42a4f0:	lea    eax,[rdx+rdx*1+0x2]
  42a4f4:	cmp    eax,ecx
  42a4f6:	jge    42a710 <flatcc_json_printer_union_vector_field@@Base+0x260>
  42a4fc:	mov    rsi,QWORD PTR [rsi+0x8]
  42a500:	mov    edx,eax
  42a502:	movzx  edx,WORD PTR [rsi+rdx*1]
  42a506:	test   dx,dx
  42a509:	je     42a710 <flatcc_json_printer_union_vector_field@@Base+0x260>
  42a50f:	add    rdx,QWORD PTR [rbp+0x0]
  42a513:	mov    QWORD PTR [rsp+0x8],rdx
  42a518:	add    eax,0x2
  42a51b:	mov    edx,DWORD PTR [rbp+0x14]
  42a51e:	cmp    eax,ecx
  42a520:	jge    42a6e8 <flatcc_json_printer_union_vector_field@@Base+0x238>
  42a526:	mov    rcx,QWORD PTR [rbp+0x8]
  42a52a:	movzx  r12d,WORD PTR [rcx+rax*1]
  42a52f:	test   r12w,r12w
  42a533:	je     42a6e8 <flatcc_json_printer_union_vector_field@@Base+0x238>
  42a539:	add    r12,QWORD PTR [rbp+0x0]
  42a53d:	mov    DWORD PTR [rsp+0x28],edx
  42a541:	cmp    r8d,0x64
  42a545:	jg     42a81a <flatcc_json_printer_union_vector_field@@Base+0x36a>
  42a54b:	movsxd r15,r8d
  42a54e:	lea    r11,[rsp+0x30]
  42a553:	mov    rsi,QWORD PTR [rsp]
  42a557:	mov    rdi,r11
  42a55a:	mov    ecx,0x69
  42a55f:	mov    rdx,r15
  42a562:	mov    QWORD PTR [rsp+0x18],r9
  42a567:	mov    DWORD PTR [rsp+0x14],r8d
  42a56c:	call   406200 <__memcpy_chk@plt>
  42a571:	mov    r11,rax
  42a574:	lea    rax,[rax+r15*1]
  42a578:	mov    DWORD PTR [rax],0x7079745f
  42a57e:	mov    BYTE PTR [rax+0x4],0x65
  42a582:	test   r12,r12
  42a585:	je     42a6b9 <flatcc_json_printer_union_vector_field@@Base+0x209>
  42a58b:	cmp    QWORD PTR [rsp+0x8],0x0
  42a591:	je     42a6b9 <flatcc_json_printer_union_vector_field@@Base+0x209>
  42a597:	mov    r8d,DWORD PTR [rsp+0x14]
  42a59c:	mov    r9,QWORD PTR [rsp+0x18]
  42a5a1:	lea    edx,[r13-0x1]
  42a5a5:	add    r8d,0x5
  42a5a9:	mov    rcx,r11
  42a5ac:	mov    rsi,rbp
  42a5af:	mov    rdi,rbx
  42a5b2:	call   4284f0 <flatcc_json_printer_utype_enum_vector_field@@Base>
  42a5b7:	mov    eax,DWORD PTR [rbp+0x18]
  42a5ba:	lea    edx,[rax+0x1]
  42a5bd:	mov    DWORD PTR [rbp+0x18],edx
  42a5c0:	test   eax,eax
  42a5c2:	je     42a5d3 <flatcc_json_printer_union_vector_field@@Base+0x123>
  42a5c4:	mov    rax,QWORD PTR [rbx+0x28]
  42a5c8:	lea    rdx,[rax+0x1]
  42a5cc:	mov    QWORD PTR [rbx+0x28],rdx
  42a5d0:	mov    BYTE PTR [rax],0x2c
  42a5d3:	mov    eax,DWORD PTR [r12]
  42a5d7:	mov    rsi,QWORD PTR [rsp]
  42a5db:	add    r12,rax
  42a5de:	mov    rax,QWORD PTR [rsp+0x8]
  42a5e3:	mov    rdx,r15
  42a5e6:	mov    rdi,rbx
  42a5e9:	mov    ebp,DWORD PTR [rax]
  42a5eb:	mov    r13d,DWORD PTR [r12]
  42a5ef:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  42a5f4:	mov    rax,QWORD PTR [rbx+0x28]
  42a5f8:	inc    DWORD PTR [rbx+0x38]
  42a5fb:	lea    rdx,[rax+0x1]
  42a5ff:	mov    QWORD PTR [rbx+0x28],rdx
  42a603:	mov    BYTE PTR [rax],0x5b
  42a606:	test   r13d,r13d
  42a609:	je     42a6a0 <flatcc_json_printer_union_vector_field@@Base+0x1f0>
  42a60f:	mov    r15d,ebp
  42a612:	add    r15,QWORD PTR [rsp+0x8]
  42a617:	movzx  eax,BYTE PTR [r15+0x4]
  42a61c:	lea    rbp,[r12+0x4]
  42a621:	test   al,al
  42a623:	je     42a7b0 <flatcc_json_printer_union_vector_field@@Base+0x300>
  42a629:	lea    rsi,[rsp+0x20]
  42a62e:	mov    rdi,rbx
  42a631:	mov    BYTE PTR [rsp+0x2c],al
  42a635:	mov    QWORD PTR [rsp+0x20],rbp
  42a63a:	call   r14
  42a63d:	lea    eax,[r13-0x1]
  42a641:	add    r15,0x4
  42a645:	lea    r12,[r12+rax*4+0x4]
  42a64a:	lea    r13,[rsp+0x20]
  42a64f:	nop
  42a650:	mov    rax,QWORD PTR [rbx+0x28]
  42a654:	lea    rcx,[rax+0x1]
  42a658:	cmp    rbp,r12
  42a65b:	je     42a6a8 <flatcc_json_printer_union_vector_field@@Base+0x1f8>
  42a65d:	inc    r15
  42a660:	movzx  edx,BYTE PTR [r15]
  42a664:	add    rbp,0x4
  42a668:	mov    QWORD PTR [rbx+0x28],rcx
  42a66c:	mov    BYTE PTR [rax],0x2c
  42a66f:	test   dl,dl
  42a671:	je     42a720 <flatcc_json_printer_union_vector_field@@Base+0x270>
  42a677:	mov    rsi,r13
  42a67a:	mov    rdi,rbx
  42a67d:	mov    BYTE PTR [rsp+0x2c],dl
  42a681:	mov    QWORD PTR [rsp+0x20],rbp
  42a686:	call   r14
  42a689:	mov    rax,QWORD PTR [rbx+0x28]
  42a68d:	lea    rcx,[rax+0x1]
  42a691:	cmp    rbp,r12
  42a694:	jne    42a65d <flatcc_json_printer_union_vector_field@@Base+0x1ad>
  42a696:	jmp    42a6a8 <flatcc_json_printer_union_vector_field@@Base+0x1f8>
  42a698:	nop    DWORD PTR [rax+rax*1+0x0]
  42a6a0:	mov    rax,QWORD PTR [rbx+0x28]
  42a6a4:	lea    rcx,[rax+0x1]
  42a6a8:	cmp    BYTE PTR [rbx+0x31],0x0
  42a6ac:	jne    42a768 <flatcc_json_printer_union_vector_field@@Base+0x2b8>
  42a6b2:	mov    QWORD PTR [rbx+0x28],rcx
  42a6b6:	mov    BYTE PTR [rax],0x5d
  42a6b9:	mov    rax,QWORD PTR [rsp+0xa8]
  42a6c1:	xor    rax,QWORD PTR fs:0x28
  42a6ca:	jne    42a815 <flatcc_json_printer_union_vector_field@@Base+0x365>
  42a6d0:	add    rsp,0xb8
  42a6d7:	pop    rbx
  42a6d8:	pop    rbp
  42a6d9:	pop    r12
  42a6db:	pop    r13
  42a6dd:	pop    r14
  42a6df:	pop    r15
  42a6e1:	ret    
  42a6e2:	nop    WORD PTR [rax+rax*1+0x0]
  42a6e8:	mov    DWORD PTR [rsp+0x28],edx
  42a6ec:	cmp    r8d,0x64
  42a6f0:	jg     42a81a <flatcc_json_printer_union_vector_field@@Base+0x36a>
  42a6f6:	mov    rsi,QWORD PTR [rsp]
  42a6fa:	movsxd rdx,r8d
  42a6fd:	lea    rdi,[rsp+0x30]
  42a702:	mov    ecx,0x69
  42a707:	call   406200 <__memcpy_chk@plt>
  42a70c:	jmp    42a6b9 <flatcc_json_printer_union_vector_field@@Base+0x209>
  42a70e:	xchg   ax,ax
  42a710:	mov    QWORD PTR [rsp+0x8],0x0
  42a719:	jmp    42a518 <flatcc_json_printer_union_vector_field@@Base+0x68>
  42a71e:	xchg   ax,ax
  42a720:	mov    rax,QWORD PTR [rbx+0x28]
  42a724:	lea    rdx,[rax+0x1]
  42a728:	mov    QWORD PTR [rbx+0x28],rdx
  42a72c:	mov    BYTE PTR [rax],0x6e
  42a72f:	mov    rax,QWORD PTR [rbx+0x28]
  42a733:	lea    rdx,[rax+0x1]
  42a737:	mov    QWORD PTR [rbx+0x28],rdx
  42a73b:	mov    BYTE PTR [rax],0x75
  42a73e:	mov    rax,QWORD PTR [rbx+0x28]
  42a742:	lea    rdx,[rax+0x1]
  42a746:	mov    QWORD PTR [rbx+0x28],rdx
  42a74a:	mov    BYTE PTR [rax],0x6c
  42a74d:	mov    rax,QWORD PTR [rbx+0x28]
  42a751:	lea    rdx,[rax+0x1]
  42a755:	mov    QWORD PTR [rbx+0x28],rdx
  42a759:	mov    BYTE PTR [rax],0x6c
  42a75c:	jmp    42a650 <flatcc_json_printer_union_vector_field@@Base+0x1a0>
  42a761:	nop    DWORD PTR [rax+0x0]
  42a768:	mov    QWORD PTR [rbx+0x28],rcx
  42a76c:	mov    BYTE PTR [rax],0xa
  42a76f:	mov    eax,DWORD PTR [rbx+0x38]
  42a772:	mov    rdi,QWORD PTR [rbx+0x28]
  42a776:	lea    ebp,[rax-0x1]
  42a779:	movzx  eax,BYTE PTR [rbx+0x31]
  42a77d:	mov    DWORD PTR [rbx+0x38],ebp
  42a780:	imul   eax,ebp
  42a783:	movsxd rbp,eax
  42a786:	lea    rax,[rdi+rbp*1]
  42a78a:	cmp    QWORD PTR [rbx+0x20],rax
  42a78e:	jae    42a7f8 <flatcc_json_printer_union_vector_field@@Base+0x348>
  42a790:	mov    rsi,rbp
  42a793:	mov    rdi,rbx
  42a796:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42a79b:	mov    rax,QWORD PTR [rbx+0x28]
  42a79f:	lea    rcx,[rax+0x1]
  42a7a3:	jmp    42a6b2 <flatcc_json_printer_union_vector_field@@Base+0x202>
  42a7a8:	nop    DWORD PTR [rax+rax*1+0x0]
  42a7b0:	mov    rax,QWORD PTR [rbx+0x28]
  42a7b4:	lea    rdx,[rax+0x1]
  42a7b8:	mov    QWORD PTR [rbx+0x28],rdx
  42a7bc:	mov    BYTE PTR [rax],0x6e
  42a7bf:	mov    rax,QWORD PTR [rbx+0x28]
  42a7c3:	lea    rdx,[rax+0x1]
  42a7c7:	mov    QWORD PTR [rbx+0x28],rdx
  42a7cb:	mov    BYTE PTR [rax],0x75
  42a7ce:	mov    rax,QWORD PTR [rbx+0x28]
  42a7d2:	lea    rdx,[rax+0x1]
  42a7d6:	mov    QWORD PTR [rbx+0x28],rdx
  42a7da:	mov    BYTE PTR [rax],0x6c
  42a7dd:	mov    rax,QWORD PTR [rbx+0x28]
  42a7e1:	lea    rdx,[rax+0x1]
  42a7e5:	mov    QWORD PTR [rbx+0x28],rdx
  42a7e9:	mov    BYTE PTR [rax],0x6c
  42a7ec:	jmp    42a63d <flatcc_json_printer_union_vector_field@@Base+0x18d>
  42a7f1:	nop    DWORD PTR [rax+0x0]
  42a7f8:	mov    rdx,rbp
  42a7fb:	mov    esi,0x20
  42a800:	call   4061c0 <memset@plt>
  42a805:	mov    rax,QWORD PTR [rbx+0x28]
  42a809:	add    rax,rbp
  42a80c:	lea    rcx,[rax+0x1]
  42a810:	jmp    42a6b2 <flatcc_json_printer_union_vector_field@@Base+0x202>
  42a815:	call   4061a0 <__stack_chk_fail@plt>
  42a81a:	cmp    DWORD PTR [rbx+0x3c],0x0
  42a81e:	jne    42a827 <flatcc_json_printer_union_vector_field@@Base+0x377>
  42a820:	mov    DWORD PTR [rbx+0x3c],0x1
  42a827:	lea    rcx,[rip+0x7c12]        # 432440 <flatcc_builder_padding_base@@Base+0x1a20>
  42a82e:	mov    edx,0x34b
  42a833:	lea    rsi,[rip+0x79f6]        # 432230 <flatcc_builder_padding_base@@Base+0x1810>
  42a83a:	lea    rdi,[rip+0x7b9b]        # 4323dc <flatcc_builder_padding_base@@Base+0x19bc>
  42a841:	call   4061b0 <__assert_fail@plt>
  42a846:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000042a850 <flatcc_json_printer_table_field@@Base>:
  42a850:	endbr64 
  42a854:	push   r15
  42a856:	push   r14
  42a858:	push   r13
  42a85a:	push   r12
  42a85c:	push   rbp
  42a85d:	push   rbx
  42a85e:	sub    rsp,0x48
  42a862:	mov    rax,QWORD PTR fs:0x28
  42a86b:	mov    QWORD PTR [rsp+0x38],rax
  42a870:	xor    eax,eax
  42a872:	lea    eax,[rdx+rdx*1+0x4]
  42a876:	cmp    eax,DWORD PTR [rsi+0x10]
  42a879:	jge    42a9af <flatcc_json_printer_table_field@@Base+0x15f>
  42a87f:	mov    rdx,QWORD PTR [rsi+0x8]
  42a883:	mov    r13,rsi
  42a886:	movzx  eax,WORD PTR [rdx+rax*1]
  42a88a:	test   ax,ax
  42a88d:	je     42a9af <flatcc_json_printer_table_field@@Base+0x15f>
  42a893:	add    rax,QWORD PTR [rsi]
  42a896:	mov    rbp,rax
  42a899:	je     42a9af <flatcc_json_printer_table_field@@Base+0x15f>
  42a89f:	mov    eax,DWORD PTR [rsi+0x18]
  42a8a2:	mov    rbx,rdi
  42a8a5:	lea    edx,[rax+0x1]
  42a8a8:	mov    DWORD PTR [rsi+0x18],edx
  42a8ab:	mov    r12,r9
  42a8ae:	mov    rsi,QWORD PTR [rdi+0x28]
  42a8b2:	test   eax,eax
  42a8b4:	je     42a8c5 <flatcc_json_printer_table_field@@Base+0x75>
  42a8b6:	lea    rax,[rsi+0x1]
  42a8ba:	mov    QWORD PTR [rdi+0x28],rax
  42a8be:	mov    BYTE PTR [rsi],0x2c
  42a8c1:	mov    rsi,QWORD PTR [rdi+0x28]
  42a8c5:	cmp    BYTE PTR [rbx+0x31],0x0
  42a8c9:	movsxd r14,r8d
  42a8cc:	jne    42aa20 <flatcc_json_printer_table_field@@Base+0x1d0>
  42a8d2:	cmp    QWORD PTR [rbx+0x20],rsi
  42a8d6:	jbe    42a9f0 <flatcc_json_printer_table_field@@Base+0x1a0>
  42a8dc:	mov    BYTE PTR [rsi],0x22
  42a8df:	xor    edi,edi
  42a8e1:	mov    rdx,r14
  42a8e4:	cmp    BYTE PTR [rbx+0x32],0x0
  42a8e8:	sete   dil
  42a8ec:	add    rdi,QWORD PTR [rbx+0x28]
  42a8f0:	lea    rax,[rdi+r14*1]
  42a8f4:	mov    QWORD PTR [rbx+0x28],rdi
  42a8f8:	mov    rsi,rcx
  42a8fb:	cmp    QWORD PTR [rbx+0x20],rax
  42a8ff:	jbe    42a9d8 <flatcc_json_printer_table_field@@Base+0x188>
  42a905:	call   406210 <memcpy@plt>
  42a90a:	add    r14,QWORD PTR [rbx+0x28]
  42a90e:	mov    QWORD PTR [rbx+0x28],r14
  42a912:	mov    BYTE PTR [r14],0x22
  42a916:	xor    eax,eax
  42a918:	cmp    BYTE PTR [rbx+0x32],0x0
  42a91c:	sete   al
  42a91f:	add    rax,QWORD PTR [rbx+0x28]
  42a923:	lea    rdx,[rax+0x1]
  42a927:	mov    QWORD PTR [rbx+0x28],rdx
  42a92b:	mov    BYTE PTR [rax],0x3a
  42a92e:	xor    edx,edx
  42a930:	mov    rax,QWORD PTR [rbx+0x28]
  42a934:	mov    BYTE PTR [rax],0x20
  42a937:	cmp    BYTE PTR [rbx+0x31],0x0
  42a93b:	mov    eax,DWORD PTR [r13+0x14]
  42a93f:	setne  dl
  42a942:	add    rdx,QWORD PTR [rbx+0x28]
  42a946:	dec    eax
  42a948:	mov    QWORD PTR [rbx+0x28],rdx
  42a94c:	mov    ecx,eax
  42a94e:	je     42aa10 <flatcc_json_printer_table_field@@Base+0x1c0>
  42a954:	mov    eax,DWORD PTR [rbp+0x0]
  42a957:	lea    rsi,[rdx+0x1]
  42a95b:	inc    DWORD PTR [rbx+0x38]
  42a95e:	mov    QWORD PTR [rbx+0x28],rsi
  42a962:	mov    BYTE PTR [rdx],0x7b
  42a965:	mov    DWORD PTR [rsp+0x28],0x0
  42a96d:	mov    DWORD PTR [rsp+0x24],ecx
  42a971:	add    rax,rbp
  42a974:	mov    QWORD PTR [rsp+0x10],rax
  42a979:	movsxd rdx,DWORD PTR [rax]
  42a97c:	lea    rsi,[rsp+0x10]
  42a981:	sub    rax,rdx
  42a984:	mov    QWORD PTR [rsp+0x18],rax
  42a989:	movzx  eax,WORD PTR [rax]
  42a98c:	mov    rdi,rbx
  42a98f:	mov    DWORD PTR [rsp+0x20],eax
  42a993:	call   r12
  42a996:	cmp    BYTE PTR [rbx+0x31],0x0
  42a99a:	jne    42aa68 <flatcc_json_printer_table_field@@Base+0x218>
  42a9a0:	mov    rsi,QWORD PTR [rbx+0x28]
  42a9a4:	lea    rax,[rsi+0x1]
  42a9a8:	mov    QWORD PTR [rbx+0x28],rax
  42a9ac:	mov    BYTE PTR [rsi],0x7d
  42a9af:	mov    rax,QWORD PTR [rsp+0x38]
  42a9b4:	xor    rax,QWORD PTR fs:0x28
  42a9bd:	jne    42aaf1 <flatcc_json_printer_table_field@@Base+0x2a1>
  42a9c3:	add    rsp,0x48
  42a9c7:	pop    rbx
  42a9c8:	pop    rbp
  42a9c9:	pop    r12
  42a9cb:	pop    r13
  42a9cd:	pop    r14
  42a9cf:	pop    r15
  42a9d1:	ret    
  42a9d2:	nop    WORD PTR [rax+rax*1+0x0]
  42a9d8:	mov    rdi,rbx
  42a9db:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42a9e0:	mov    r14,QWORD PTR [rbx+0x28]
  42a9e4:	jmp    42a912 <flatcc_json_printer_table_field@@Base+0xc2>
  42a9e9:	nop    DWORD PTR [rax+0x0]
  42a9f0:	xor    esi,esi
  42a9f2:	mov    rdi,rbx
  42a9f5:	mov    QWORD PTR [rsp+0x8],rcx
  42a9fa:	call   QWORD PTR [rbx+0x48]
  42a9fd:	mov    rsi,QWORD PTR [rbx+0x28]
  42aa01:	mov    rcx,QWORD PTR [rsp+0x8]
  42aa06:	jmp    42a8dc <flatcc_json_printer_table_field@@Base+0x8c>
  42aa0b:	nop    DWORD PTR [rax+rax*1+0x0]
  42aa10:	mov    eax,DWORD PTR [rbx+0x3c]
  42aa13:	test   eax,eax
  42aa15:	jne    42a9af <flatcc_json_printer_table_field@@Base+0x15f>
  42aa17:	mov    DWORD PTR [rbx+0x3c],0x2
  42aa1e:	jmp    42a9af <flatcc_json_printer_table_field@@Base+0x15f>
  42aa20:	lea    rax,[rsi+0x1]
  42aa24:	mov    QWORD PTR [rbx+0x28],rax
  42aa28:	mov    BYTE PTR [rsi],0xa
  42aa2b:	mov    QWORD PTR [rsp+0x8],rcx
  42aa30:	movzx  esi,BYTE PTR [rbx+0x31]
  42aa34:	mov    rdi,QWORD PTR [rbx+0x28]
  42aa38:	imul   esi,DWORD PTR [rbx+0x38]
  42aa3c:	movsxd r15,esi
  42aa3f:	lea    rax,[rdi+r15*1]
  42aa43:	cmp    QWORD PTR [rbx+0x20],rax
  42aa47:	jae    42aab0 <flatcc_json_printer_table_field@@Base+0x260>
  42aa49:	mov    rsi,r15
  42aa4c:	mov    rdi,rbx
  42aa4f:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42aa54:	mov    rsi,QWORD PTR [rbx+0x28]
  42aa58:	mov    rcx,QWORD PTR [rsp+0x8]
  42aa5d:	jmp    42a8dc <flatcc_json_printer_table_field@@Base+0x8c>
  42aa62:	nop    WORD PTR [rax+rax*1+0x0]
  42aa68:	mov    rax,QWORD PTR [rbx+0x28]
  42aa6c:	lea    rdx,[rax+0x1]
  42aa70:	mov    QWORD PTR [rbx+0x28],rdx
  42aa74:	mov    BYTE PTR [rax],0xa
  42aa77:	mov    eax,DWORD PTR [rbx+0x38]
  42aa7a:	movzx  esi,BYTE PTR [rbx+0x31]
  42aa7e:	lea    ebp,[rax-0x1]
  42aa81:	imul   esi,ebp
  42aa84:	mov    rdi,QWORD PTR [rbx+0x28]
  42aa88:	mov    DWORD PTR [rbx+0x38],ebp
  42aa8b:	movsxd rbp,esi
  42aa8e:	lea    rax,[rdi+rbp*1]
  42aa92:	cmp    QWORD PTR [rbx+0x20],rax
  42aa96:	jae    42aad8 <flatcc_json_printer_table_field@@Base+0x288>
  42aa98:	mov    rsi,rbp
  42aa9b:	mov    rdi,rbx
  42aa9e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42aaa3:	jmp    42a9a0 <flatcc_json_printer_table_field@@Base+0x150>
  42aaa8:	nop    DWORD PTR [rax+rax*1+0x0]
  42aab0:	mov    esi,0x20
  42aab5:	mov    rdx,r15
  42aab8:	call   4061c0 <memset@plt>
  42aabd:	mov    rsi,QWORD PTR [rbx+0x28]
  42aac1:	mov    rcx,QWORD PTR [rsp+0x8]
  42aac6:	add    rsi,r15
  42aac9:	mov    QWORD PTR [rbx+0x28],rsi
  42aacd:	jmp    42a8dc <flatcc_json_printer_table_field@@Base+0x8c>
  42aad2:	nop    WORD PTR [rax+rax*1+0x0]
  42aad8:	mov    esi,0x20
  42aadd:	mov    rdx,rbp
  42aae0:	call   4061c0 <memset@plt>
  42aae5:	mov    rsi,QWORD PTR [rbx+0x28]
  42aae9:	add    rsi,rbp
  42aaec:	jmp    42a9a4 <flatcc_json_printer_table_field@@Base+0x154>
  42aaf1:	call   4061a0 <__stack_chk_fail@plt>
  42aaf6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000042ab00 <flatcc_json_printer_union_field@@Base>:
  42ab00:	endbr64 
  42ab04:	push   r15
  42ab06:	mov    r15,rdi
  42ab09:	push   r14
  42ab0b:	mov    r14,rsi
  42ab0e:	push   r13
  42ab10:	mov    r13,rcx
  42ab13:	push   r12
  42ab15:	push   rbp
  42ab16:	push   rbx
  42ab17:	sub    rsp,0x48
  42ab1b:	mov    rax,QWORD PTR [rsp+0x80]
  42ab23:	mov    QWORD PTR [rsp+0x8],r9
  42ab28:	mov    QWORD PTR [rsp+0x10],rax
  42ab2d:	mov    ecx,DWORD PTR [rsi+0x10]
  42ab30:	mov    rax,QWORD PTR fs:0x28
  42ab39:	mov    QWORD PTR [rsp+0x38],rax
  42ab3e:	xor    eax,eax
  42ab40:	lea    eax,[rdx+rdx*1+0x2]
  42ab44:	cmp    eax,ecx
  42ab46:	jge    42ad80 <flatcc_json_printer_union_field@@Base+0x280>
  42ab4c:	mov    rsi,QWORD PTR [rsi+0x8]
  42ab50:	mov    edx,eax
  42ab52:	movzx  edx,WORD PTR [rsi+rdx*1]
  42ab56:	test   dx,dx
  42ab59:	je     42ad80 <flatcc_json_printer_union_field@@Base+0x280>
  42ab5f:	add    rdx,QWORD PTR [r14]
  42ab62:	add    eax,0x2
  42ab65:	cmp    eax,ecx
  42ab67:	jge    42acd3 <flatcc_json_printer_union_field@@Base+0x1d3>
  42ab6d:	mov    rcx,QWORD PTR [r14+0x8]
  42ab71:	movzx  ebx,WORD PTR [rcx+rax*1]
  42ab75:	test   bx,bx
  42ab78:	je     42acd3 <flatcc_json_printer_union_field@@Base+0x1d3>
  42ab7e:	add    rbx,QWORD PTR [r14]
  42ab81:	je     42acd3 <flatcc_json_printer_union_field@@Base+0x1d3>
  42ab87:	test   rdx,rdx
  42ab8a:	je     42acd3 <flatcc_json_printer_union_field@@Base+0x1d3>
  42ab90:	mov    eax,DWORD PTR [r14+0x18]
  42ab94:	movzx  r12d,BYTE PTR [rdx]
  42ab98:	lea    edx,[rax+0x1]
  42ab9b:	mov    DWORD PTR [r14+0x18],edx
  42ab9f:	mov    rsi,QWORD PTR [r15+0x28]
  42aba3:	test   eax,eax
  42aba5:	je     42abb6 <flatcc_json_printer_union_field@@Base+0xb6>
  42aba7:	lea    rax,[rsi+0x1]
  42abab:	mov    QWORD PTR [r15+0x28],rax
  42abaf:	mov    BYTE PTR [rsi],0x2c
  42abb2:	mov    rsi,QWORD PTR [r15+0x28]
  42abb6:	cmp    BYTE PTR [r15+0x31],0x0
  42abbb:	jne    42ad00 <flatcc_json_printer_union_field@@Base+0x200>
  42abc1:	cmp    QWORD PTR [r15+0x20],rsi
  42abc5:	ja     42abde <flatcc_json_printer_union_field@@Base+0xde>
  42abc7:	xor    esi,esi
  42abc9:	mov    rdi,r15
  42abcc:	mov    DWORD PTR [rsp+0x1c],r8d
  42abd1:	call   QWORD PTR [r15+0x48]
  42abd5:	mov    rsi,QWORD PTR [r15+0x28]
  42abd9:	mov    r8d,DWORD PTR [rsp+0x1c]
  42abde:	mov    BYTE PTR [rsi],0x22
  42abe1:	xor    edi,edi
  42abe3:	movsxd rbp,r8d
  42abe6:	cmp    BYTE PTR [r15+0x32],0x0
  42abeb:	sete   dil
  42abef:	add    rdi,QWORD PTR [r15+0x28]
  42abf3:	lea    rax,[rdi+rbp*1]
  42abf7:	mov    QWORD PTR [r15+0x28],rdi
  42abfb:	mov    rdx,rbp
  42abfe:	mov    rsi,r13
  42ac01:	cmp    QWORD PTR [r15+0x20],rax
  42ac05:	jbe    42ad68 <flatcc_json_printer_union_field@@Base+0x268>
  42ac0b:	call   406210 <memcpy@plt>
  42ac10:	mov    rax,QWORD PTR [r15+0x28]
  42ac14:	add    rax,rbp
  42ac17:	mov    QWORD PTR [r15+0x28],rax
  42ac1b:	lea    rdx,[rax+0x5]
  42ac1f:	cmp    QWORD PTR [r15+0x20],rdx
  42ac23:	ja     42ad48 <flatcc_json_printer_union_field@@Base+0x248>
  42ac29:	mov    edx,0x5
  42ac2e:	lea    rsi,[rip+0x77c2]        # 4323f7 <flatcc_builder_padding_base@@Base+0x19d7>
  42ac35:	mov    rdi,r15
  42ac38:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42ac3d:	mov    rax,QWORD PTR [r15+0x28]
  42ac41:	mov    BYTE PTR [rax],0x22
  42ac44:	xor    eax,eax
  42ac46:	cmp    BYTE PTR [r15+0x32],0x0
  42ac4b:	sete   al
  42ac4e:	add    rax,QWORD PTR [r15+0x28]
  42ac52:	lea    rdx,[rax+0x1]
  42ac56:	mov    QWORD PTR [r15+0x28],rdx
  42ac5a:	mov    BYTE PTR [rax],0x3a
  42ac5d:	xor    esi,esi
  42ac5f:	mov    rax,QWORD PTR [r15+0x28]
  42ac63:	mov    BYTE PTR [rax],0x20
  42ac66:	cmp    BYTE PTR [r15+0x31],0x0
  42ac6b:	setne  sil
  42ac6f:	add    rsi,QWORD PTR [r15+0x28]
  42ac73:	cmp    BYTE PTR [r15+0x33],0x0
  42ac78:	mov    QWORD PTR [r15+0x28],rsi
  42ac7c:	jne    42ad90 <flatcc_json_printer_union_field@@Base+0x290>
  42ac82:	mov    rax,QWORD PTR [rsp+0x8]
  42ac87:	movzx  esi,r12b
  42ac8b:	mov    rdi,r15
  42ac8e:	call   rax
  42ac90:	test   r12b,r12b
  42ac93:	je     42acd3 <flatcc_json_printer_union_field@@Base+0x1d3>
  42ac95:	mov    rax,QWORD PTR [r15+0x28]
  42ac99:	mov    rsi,r13
  42ac9c:	lea    rdx,[rax+0x1]
  42aca0:	mov    QWORD PTR [r15+0x28],rdx
  42aca4:	mov    BYTE PTR [rax],0x2c
  42aca7:	mov    rdi,r15
  42acaa:	mov    rdx,rbp
  42acad:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  42acb2:	mov    eax,DWORD PTR [r14+0x14]
  42acb6:	lea    rsi,[rsp+0x20]
  42acbb:	mov    DWORD PTR [rsp+0x28],eax
  42acbf:	mov    rax,QWORD PTR [rsp+0x10]
  42acc4:	mov    rdi,r15
  42acc7:	mov    BYTE PTR [rsp+0x2c],r12b
  42accc:	mov    QWORD PTR [rsp+0x20],rbx
  42acd1:	call   rax
  42acd3:	mov    rax,QWORD PTR [rsp+0x38]
  42acd8:	xor    rax,QWORD PTR fs:0x28
  42ace1:	jne    42adca <flatcc_json_printer_union_field@@Base+0x2ca>
  42ace7:	add    rsp,0x48
  42aceb:	pop    rbx
  42acec:	pop    rbp
  42aced:	pop    r12
  42acef:	pop    r13
  42acf1:	pop    r14
  42acf3:	pop    r15
  42acf5:	ret    
  42acf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  42ad00:	lea    rax,[rsi+0x1]
  42ad04:	mov    QWORD PTR [r15+0x28],rax
  42ad08:	mov    BYTE PTR [rsi],0xa
  42ad0b:	mov    DWORD PTR [rsp+0x1c],r8d
  42ad10:	movzx  esi,BYTE PTR [r15+0x31]
  42ad15:	mov    rdi,QWORD PTR [r15+0x28]
  42ad19:	imul   esi,DWORD PTR [r15+0x38]
  42ad1e:	movsxd rbp,esi
  42ad21:	lea    rax,[rdi+rbp*1]
  42ad25:	cmp    QWORD PTR [r15+0x20],rax
  42ad29:	jae    42ada8 <flatcc_json_printer_union_field@@Base+0x2a8>
  42ad2b:	mov    rsi,rbp
  42ad2e:	mov    rdi,r15
  42ad31:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42ad36:	mov    rsi,QWORD PTR [r15+0x28]
  42ad3a:	mov    r8d,DWORD PTR [rsp+0x1c]
  42ad3f:	jmp    42abde <flatcc_json_printer_union_field@@Base+0xde>
  42ad44:	nop    DWORD PTR [rax+0x0]
  42ad48:	mov    DWORD PTR [rax],0x7079745f
  42ad4e:	mov    BYTE PTR [rax+0x4],0x65
  42ad52:	mov    rax,QWORD PTR [r15+0x28]
  42ad56:	add    rax,0x5
  42ad5a:	mov    QWORD PTR [r15+0x28],rax
  42ad5e:	jmp    42ac41 <flatcc_json_printer_union_field@@Base+0x141>
  42ad63:	nop    DWORD PTR [rax+rax*1+0x0]
  42ad68:	mov    rdi,r15
  42ad6b:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42ad70:	mov    rax,QWORD PTR [r15+0x28]
  42ad74:	jmp    42ac1b <flatcc_json_printer_union_field@@Base+0x11b>
  42ad79:	nop    DWORD PTR [rax+0x0]
  42ad80:	xor    edx,edx
  42ad82:	jmp    42ab62 <flatcc_json_printer_union_field@@Base+0x62>
  42ad87:	nop    WORD PTR [rax+rax*1+0x0]
  42ad90:	movzx  edi,r12b
  42ad94:	call   421350 <flatcc_json_parser_struct_as_root@@Base+0xd80>
  42ad99:	cdqe   
  42ad9b:	add    QWORD PTR [r15+0x28],rax
  42ad9f:	jmp    42ac90 <flatcc_json_printer_union_field@@Base+0x190>
  42ada4:	nop    DWORD PTR [rax+0x0]
  42ada8:	mov    esi,0x20
  42adad:	mov    rdx,rbp
  42adb0:	call   4061c0 <memset@plt>
  42adb5:	mov    rsi,QWORD PTR [r15+0x28]
  42adb9:	mov    r8d,DWORD PTR [rsp+0x1c]
  42adbe:	add    rsi,rbp
  42adc1:	mov    QWORD PTR [r15+0x28],rsi
  42adc5:	jmp    42abde <flatcc_json_printer_union_field@@Base+0xde>
  42adca:	call   4061a0 <__stack_chk_fail@plt>
  42adcf:	nop

000000000042add0 <flatcc_json_printer_union_table@@Base>:
  42add0:	endbr64 
  42add4:	push   rbp
  42add5:	push   rbx
  42add6:	mov    rbx,rdi
  42add9:	sub    rsp,0x38
  42addd:	mov    ecx,DWORD PTR [rsi+0x8]
  42ade0:	mov    rax,QWORD PTR fs:0x28
  42ade9:	mov    QWORD PTR [rsp+0x28],rax
  42adee:	xor    eax,eax
  42adf0:	dec    ecx
  42adf2:	je     42aeb0 <flatcc_json_printer_union_table@@Base+0xe0>
  42adf8:	mov    rax,QWORD PTR [rsi]
  42adfb:	mov    esi,DWORD PTR [rax]
  42adfd:	inc    DWORD PTR [rdi+0x38]
  42ae00:	add    rax,rsi
  42ae03:	mov    rsi,QWORD PTR [rdi+0x28]
  42ae07:	lea    rdi,[rsi+0x1]
  42ae0b:	mov    QWORD PTR [rbx+0x28],rdi
  42ae0f:	mov    BYTE PTR [rsi],0x7b
  42ae12:	mov    DWORD PTR [rsp+0x18],0x0
  42ae1a:	mov    DWORD PTR [rsp+0x14],ecx
  42ae1e:	mov    QWORD PTR [rsp],rax
  42ae22:	mov    rsi,rsp
  42ae25:	movsxd rcx,DWORD PTR [rax]
  42ae28:	mov    rdi,rbx
  42ae2b:	sub    rax,rcx
  42ae2e:	mov    QWORD PTR [rsp+0x8],rax
  42ae33:	movzx  eax,WORD PTR [rax]
  42ae36:	mov    DWORD PTR [rsp+0x10],eax
  42ae3a:	call   rdx
  42ae3c:	cmp    BYTE PTR [rbx+0x31],0x0
  42ae40:	jne    42ae70 <flatcc_json_printer_union_table@@Base+0xa0>
  42ae42:	mov    rsi,QWORD PTR [rbx+0x28]
  42ae46:	lea    rax,[rsi+0x1]
  42ae4a:	mov    QWORD PTR [rbx+0x28],rax
  42ae4e:	mov    BYTE PTR [rsi],0x7d
  42ae51:	mov    rax,QWORD PTR [rsp+0x28]
  42ae56:	xor    rax,QWORD PTR fs:0x28
  42ae5f:	jne    42aed9 <flatcc_json_printer_union_table@@Base+0x109>
  42ae61:	add    rsp,0x38
  42ae65:	pop    rbx
  42ae66:	pop    rbp
  42ae67:	ret    
  42ae68:	nop    DWORD PTR [rax+rax*1+0x0]
  42ae70:	mov    rax,QWORD PTR [rbx+0x28]
  42ae74:	lea    rdx,[rax+0x1]
  42ae78:	mov    QWORD PTR [rbx+0x28],rdx
  42ae7c:	mov    BYTE PTR [rax],0xa
  42ae7f:	mov    eax,DWORD PTR [rbx+0x38]
  42ae82:	movzx  esi,BYTE PTR [rbx+0x31]
  42ae86:	lea    ebp,[rax-0x1]
  42ae89:	imul   esi,ebp
  42ae8c:	mov    rdi,QWORD PTR [rbx+0x28]
  42ae90:	mov    DWORD PTR [rbx+0x38],ebp
  42ae93:	movsxd rbp,esi
  42ae96:	lea    rax,[rdi+rbp*1]
  42ae9a:	cmp    QWORD PTR [rbx+0x20],rax
  42ae9e:	jae    42aec0 <flatcc_json_printer_union_table@@Base+0xf0>
  42aea0:	mov    rsi,rbp
  42aea3:	mov    rdi,rbx
  42aea6:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42aeab:	jmp    42ae42 <flatcc_json_printer_union_table@@Base+0x72>
  42aead:	nop    DWORD PTR [rax]
  42aeb0:	mov    eax,DWORD PTR [rdi+0x3c]
  42aeb3:	test   eax,eax
  42aeb5:	jne    42ae51 <flatcc_json_printer_union_table@@Base+0x81>
  42aeb7:	mov    DWORD PTR [rdi+0x3c],0x2
  42aebe:	jmp    42ae51 <flatcc_json_printer_union_table@@Base+0x81>
  42aec0:	mov    esi,0x20
  42aec5:	mov    rdx,rbp
  42aec8:	call   4061c0 <memset@plt>
  42aecd:	mov    rsi,QWORD PTR [rbx+0x28]
  42aed1:	add    rsi,rbp
  42aed4:	jmp    42ae46 <flatcc_json_printer_union_table@@Base+0x76>
  42aed9:	call   4061a0 <__stack_chk_fail@plt>
  42aede:	xchg   ax,ax

000000000042aee0 <flatcc_json_printer_union_struct@@Base>:
  42aee0:	endbr64 
  42aee4:	push   rbp
  42aee5:	push   rbx
  42aee6:	mov    rbx,rdi
  42aee9:	sub    rsp,0x8
  42aeed:	mov    rax,QWORD PTR [rdi+0x28]
  42aef1:	inc    DWORD PTR [rdi+0x38]
  42aef4:	lea    rcx,[rax+0x1]
  42aef8:	mov    QWORD PTR [rdi+0x28],rcx
  42aefc:	mov    BYTE PTR [rax],0x7b
  42aeff:	mov    rsi,QWORD PTR [rsi]
  42af02:	mov    eax,DWORD PTR [rsi]
  42af04:	add    rsi,rax
  42af07:	call   rdx
  42af09:	cmp    BYTE PTR [rbx+0x31],0x0
  42af0d:	jne    42af28 <flatcc_json_printer_union_struct@@Base+0x48>
  42af0f:	mov    rsi,QWORD PTR [rbx+0x28]
  42af13:	lea    rax,[rsi+0x1]
  42af17:	mov    QWORD PTR [rbx+0x28],rax
  42af1b:	mov    BYTE PTR [rsi],0x7d
  42af1e:	add    rsp,0x8
  42af22:	pop    rbx
  42af23:	pop    rbp
  42af24:	ret    
  42af25:	nop    DWORD PTR [rax]
  42af28:	mov    rax,QWORD PTR [rbx+0x28]
  42af2c:	lea    rdx,[rax+0x1]
  42af30:	mov    QWORD PTR [rbx+0x28],rdx
  42af34:	mov    BYTE PTR [rax],0xa
  42af37:	mov    eax,DWORD PTR [rbx+0x38]
  42af3a:	movzx  esi,BYTE PTR [rbx+0x31]
  42af3e:	lea    ebp,[rax-0x1]
  42af41:	imul   esi,ebp
  42af44:	mov    rdi,QWORD PTR [rbx+0x28]
  42af48:	mov    DWORD PTR [rbx+0x38],ebp
  42af4b:	movsxd rbp,esi
  42af4e:	lea    rax,[rdi+rbp*1]
  42af52:	cmp    QWORD PTR [rbx+0x20],rax
  42af56:	jae    42af68 <flatcc_json_printer_union_struct@@Base+0x88>
  42af58:	mov    rsi,rbp
  42af5b:	mov    rdi,rbx
  42af5e:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42af63:	jmp    42af0f <flatcc_json_printer_union_struct@@Base+0x2f>
  42af65:	nop    DWORD PTR [rax]
  42af68:	mov    esi,0x20
  42af6d:	mov    rdx,rbp
  42af70:	call   4061c0 <memset@plt>
  42af75:	mov    rsi,QWORD PTR [rbx+0x28]
  42af79:	add    rsi,rbp
  42af7c:	jmp    42af13 <flatcc_json_printer_union_struct@@Base+0x33>
  42af7e:	xchg   ax,ax

000000000042af80 <flatcc_json_printer_union_string@@Base>:
  42af80:	endbr64 
  42af84:	mov    rsi,QWORD PTR [rsi]
  42af87:	mov    eax,DWORD PTR [rsi]
  42af89:	add    rsi,rax
  42af8c:	mov    edx,DWORD PTR [rsi]
  42af8e:	add    rsi,0x4
  42af92:	jmp    421ef0 <flatcc_json_parser_struct_as_root@@Base+0x1920>
  42af97:	nop    WORD PTR [rax+rax*1+0x0]

000000000042afa0 <flatcc_json_printer_embedded_struct_field@@Base>:
  42afa0:	endbr64 
  42afa4:	push   r15
  42afa6:	mov    r15,r8
  42afa9:	push   r14
  42afab:	push   r13
  42afad:	mov    r13,rcx
  42afb0:	push   r12
  42afb2:	mov    r12,rdx
  42afb5:	push   rbp
  42afb6:	push   rbx
  42afb7:	mov    rbx,rdi
  42afba:	sub    rsp,0x8
  42afbe:	mov    rax,QWORD PTR [rdi+0x28]
  42afc2:	test   esi,esi
  42afc4:	je     42afd5 <flatcc_json_printer_embedded_struct_field@@Base+0x35>
  42afc6:	lea    rdx,[rax+0x1]
  42afca:	mov    QWORD PTR [rdi+0x28],rdx
  42afce:	mov    BYTE PTR [rax],0x2c
  42afd1:	mov    rax,QWORD PTR [rdi+0x28]
  42afd5:	cmp    BYTE PTR [rbx+0x31],0x0
  42afd9:	movsxd r14,r9d
  42afdc:	jne    42b0f0 <flatcc_json_printer_embedded_struct_field@@Base+0x150>
  42afe2:	cmp    QWORD PTR [rbx+0x20],rax
  42afe6:	ja     42aff4 <flatcc_json_printer_embedded_struct_field@@Base+0x54>
  42afe8:	xor    esi,esi
  42afea:	mov    rdi,rbx
  42afed:	call   QWORD PTR [rbx+0x48]
  42aff0:	mov    rax,QWORD PTR [rbx+0x28]
  42aff4:	mov    BYTE PTR [rax],0x22
  42aff7:	xor    edi,edi
  42aff9:	mov    rdx,r14
  42affc:	cmp    BYTE PTR [rbx+0x32],0x0
  42b000:	sete   dil
  42b004:	add    rdi,QWORD PTR [rbx+0x28]
  42b008:	lea    rax,[rdi+r14*1]
  42b00c:	mov    QWORD PTR [rbx+0x28],rdi
  42b010:	mov    rsi,r15
  42b013:	cmp    QWORD PTR [rbx+0x20],rax
  42b017:	ja     42b098 <flatcc_json_printer_embedded_struct_field@@Base+0xf8>
  42b019:	mov    rdi,rbx
  42b01c:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42b021:	mov    r14,QWORD PTR [rbx+0x28]
  42b025:	mov    BYTE PTR [r14],0x22
  42b029:	xor    eax,eax
  42b02b:	lea    rsi,[r12+r13*1]
  42b02f:	cmp    BYTE PTR [rbx+0x32],0x0
  42b033:	sete   al
  42b036:	add    rax,QWORD PTR [rbx+0x28]
  42b03a:	lea    rdx,[rax+0x1]
  42b03e:	mov    QWORD PTR [rbx+0x28],rdx
  42b042:	mov    BYTE PTR [rax],0x3a
  42b045:	mov    rdi,rbx
  42b048:	mov    rax,QWORD PTR [rbx+0x28]
  42b04c:	mov    BYTE PTR [rax],0x20
  42b04f:	xor    eax,eax
  42b051:	cmp    BYTE PTR [rbx+0x31],0x0
  42b055:	setne  al
  42b058:	add    rax,QWORD PTR [rbx+0x28]
  42b05c:	inc    DWORD PTR [rbx+0x38]
  42b05f:	lea    rdx,[rax+0x1]
  42b063:	mov    QWORD PTR [rbx+0x28],rdx
  42b067:	mov    BYTE PTR [rax],0x7b
  42b06a:	call   QWORD PTR [rsp+0x40]
  42b06e:	cmp    BYTE PTR [rbx+0x31],0x0
  42b072:	jne    42b0b0 <flatcc_json_printer_embedded_struct_field@@Base+0x110>
  42b074:	mov    rsi,QWORD PTR [rbx+0x28]
  42b078:	lea    rax,[rsi+0x1]
  42b07c:	mov    QWORD PTR [rbx+0x28],rax
  42b080:	mov    BYTE PTR [rsi],0x7d
  42b083:	add    rsp,0x8
  42b087:	pop    rbx
  42b088:	pop    rbp
  42b089:	pop    r12
  42b08b:	pop    r13
  42b08d:	pop    r14
  42b08f:	pop    r15
  42b091:	ret    
  42b092:	nop    WORD PTR [rax+rax*1+0x0]
  42b098:	call   406210 <memcpy@plt>
  42b09d:	add    r14,QWORD PTR [rbx+0x28]
  42b0a1:	mov    QWORD PTR [rbx+0x28],r14
  42b0a5:	jmp    42b025 <flatcc_json_printer_embedded_struct_field@@Base+0x85>
  42b0aa:	nop    WORD PTR [rax+rax*1+0x0]
  42b0b0:	mov    rax,QWORD PTR [rbx+0x28]
  42b0b4:	lea    rdx,[rax+0x1]
  42b0b8:	mov    QWORD PTR [rbx+0x28],rdx
  42b0bc:	mov    BYTE PTR [rax],0xa
  42b0bf:	mov    eax,DWORD PTR [rbx+0x38]
  42b0c2:	movzx  esi,BYTE PTR [rbx+0x31]
  42b0c6:	lea    ebp,[rax-0x1]
  42b0c9:	imul   esi,ebp
  42b0cc:	mov    rdi,QWORD PTR [rbx+0x28]
  42b0d0:	mov    DWORD PTR [rbx+0x38],ebp
  42b0d3:	movsxd rbp,esi
  42b0d6:	lea    rax,[rdi+rbp*1]
  42b0da:	cmp    QWORD PTR [rbx+0x20],rax
  42b0de:	jae    42b150 <flatcc_json_printer_embedded_struct_field@@Base+0x1b0>
  42b0e0:	mov    rsi,rbp
  42b0e3:	mov    rdi,rbx
  42b0e6:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42b0eb:	jmp    42b074 <flatcc_json_printer_embedded_struct_field@@Base+0xd4>
  42b0ed:	nop    DWORD PTR [rax]
  42b0f0:	lea    rdx,[rax+0x1]
  42b0f4:	mov    QWORD PTR [rbx+0x28],rdx
  42b0f8:	mov    BYTE PTR [rax],0xa
  42b0fb:	movzx  eax,BYTE PTR [rbx+0x31]
  42b0ff:	mov    rdi,QWORD PTR [rbx+0x28]
  42b103:	imul   eax,DWORD PTR [rbx+0x38]
  42b107:	movsxd rbp,eax
  42b10a:	lea    rax,[rdi+rbp*1]
  42b10e:	cmp    QWORD PTR [rbx+0x20],rax
  42b112:	jae    42b130 <flatcc_json_printer_embedded_struct_field@@Base+0x190>
  42b114:	mov    rsi,rbp
  42b117:	mov    rdi,rbx
  42b11a:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42b11f:	mov    rax,QWORD PTR [rbx+0x28]
  42b123:	jmp    42aff4 <flatcc_json_printer_embedded_struct_field@@Base+0x54>
  42b128:	nop    DWORD PTR [rax+rax*1+0x0]
  42b130:	mov    rdx,rbp
  42b133:	mov    esi,0x20
  42b138:	call   4061c0 <memset@plt>
  42b13d:	mov    rax,QWORD PTR [rbx+0x28]
  42b141:	add    rax,rbp
  42b144:	mov    QWORD PTR [rbx+0x28],rax
  42b148:	jmp    42aff4 <flatcc_json_printer_embedded_struct_field@@Base+0x54>
  42b14d:	nop    DWORD PTR [rax]
  42b150:	mov    esi,0x20
  42b155:	mov    rdx,rbp
  42b158:	call   4061c0 <memset@plt>
  42b15d:	mov    rsi,QWORD PTR [rbx+0x28]
  42b161:	add    rsi,rbp
  42b164:	jmp    42b078 <flatcc_json_printer_embedded_struct_field@@Base+0xd8>
  42b169:	nop    DWORD PTR [rax+0x0]

000000000042b170 <flatcc_json_printer_struct_field@@Base>:
  42b170:	endbr64 
  42b174:	lea    eax,[rdx+rdx*1+0x4]
  42b178:	cmp    eax,DWORD PTR [rsi+0x10]
  42b17b:	jge    42b2b0 <flatcc_json_printer_struct_field@@Base+0x140>
  42b181:	mov    rdx,QWORD PTR [rsi+0x8]
  42b185:	movzx  eax,WORD PTR [rdx+rax*1]
  42b189:	test   ax,ax
  42b18c:	je     42b2b0 <flatcc_json_printer_struct_field@@Base+0x140>
  42b192:	push   r15
  42b194:	push   r14
  42b196:	push   r13
  42b198:	push   r12
  42b19a:	push   rbp
  42b19b:	push   rbx
  42b19c:	sub    rsp,0x8
  42b1a0:	add    rax,QWORD PTR [rsi]
  42b1a3:	mov    r12,rax
  42b1a6:	je     42b27e <flatcc_json_printer_struct_field@@Base+0x10e>
  42b1ac:	mov    edx,DWORD PTR [rsi+0x18]
  42b1af:	lea    eax,[rdx+0x1]
  42b1b2:	mov    DWORD PTR [rsi+0x18],eax
  42b1b5:	mov    rax,QWORD PTR [rdi+0x28]
  42b1b9:	test   edx,edx
  42b1bb:	je     42b1cc <flatcc_json_printer_struct_field@@Base+0x5c>
  42b1bd:	lea    rdx,[rax+0x1]
  42b1c1:	mov    QWORD PTR [rdi+0x28],rdx
  42b1c5:	mov    BYTE PTR [rax],0x2c
  42b1c8:	mov    rax,QWORD PTR [rdi+0x28]
  42b1cc:	cmp    BYTE PTR [rdi+0x31],0x0
  42b1d0:	mov    r13,r9
  42b1d3:	mov    r15,rcx
  42b1d6:	mov    rbx,rdi
  42b1d9:	movsxd rbp,r8d
  42b1dc:	jne    42b2b8 <flatcc_json_printer_struct_field@@Base+0x148>
  42b1e2:	cmp    QWORD PTR [rdi+0x20],rax
  42b1e6:	jbe    42b2a0 <flatcc_json_printer_struct_field@@Base+0x130>
  42b1ec:	mov    BYTE PTR [rax],0x22
  42b1ef:	xor    edi,edi
  42b1f1:	mov    rdx,rbp
  42b1f4:	cmp    BYTE PTR [rbx+0x32],0x0
  42b1f8:	sete   dil
  42b1fc:	add    rdi,QWORD PTR [rbx+0x28]
  42b200:	lea    rax,[rdi+rbp*1]
  42b204:	mov    QWORD PTR [rbx+0x28],rdi
  42b208:	mov    rsi,r15
  42b20b:	cmp    QWORD PTR [rbx+0x20],rax
  42b20f:	jbe    42b290 <flatcc_json_printer_struct_field@@Base+0x120>
  42b211:	call   406210 <memcpy@plt>
  42b216:	add    rbp,QWORD PTR [rbx+0x28]
  42b21a:	mov    QWORD PTR [rbx+0x28],rbp
  42b21e:	mov    BYTE PTR [rbp+0x0],0x22
  42b222:	xor    eax,eax
  42b224:	mov    rsi,r12
  42b227:	cmp    BYTE PTR [rbx+0x32],0x0
  42b22b:	sete   al
  42b22e:	add    rax,QWORD PTR [rbx+0x28]
  42b232:	lea    rdx,[rax+0x1]
  42b236:	mov    QWORD PTR [rbx+0x28],rdx
  42b23a:	mov    BYTE PTR [rax],0x3a
  42b23d:	mov    rdi,rbx
  42b240:	mov    rax,QWORD PTR [rbx+0x28]
  42b244:	mov    BYTE PTR [rax],0x20
  42b247:	xor    eax,eax
  42b249:	cmp    BYTE PTR [rbx+0x31],0x0
  42b24d:	setne  al
  42b250:	add    rax,QWORD PTR [rbx+0x28]
  42b254:	inc    DWORD PTR [rbx+0x38]
  42b257:	lea    rdx,[rax+0x1]
  42b25b:	mov    QWORD PTR [rbx+0x28],rdx
  42b25f:	mov    BYTE PTR [rax],0x7b
  42b262:	call   r13
  42b265:	cmp    BYTE PTR [rbx+0x31],0x0
  42b269:	jne    42b2f0 <flatcc_json_printer_struct_field@@Base+0x180>
  42b26f:	mov    rsi,QWORD PTR [rbx+0x28]
  42b273:	lea    rax,[rsi+0x1]
  42b277:	mov    QWORD PTR [rbx+0x28],rax
  42b27b:	mov    BYTE PTR [rsi],0x7d
  42b27e:	add    rsp,0x8
  42b282:	pop    rbx
  42b283:	pop    rbp
  42b284:	pop    r12
  42b286:	pop    r13
  42b288:	pop    r14
  42b28a:	pop    r15
  42b28c:	ret    
  42b28d:	nop    DWORD PTR [rax]
  42b290:	mov    rdi,rbx
  42b293:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42b298:	mov    rbp,QWORD PTR [rbx+0x28]
  42b29c:	jmp    42b21e <flatcc_json_printer_struct_field@@Base+0xae>
  42b29e:	xchg   ax,ax
  42b2a0:	xor    esi,esi
  42b2a2:	call   QWORD PTR [rdi+0x48]
  42b2a5:	mov    rax,QWORD PTR [rbx+0x28]
  42b2a9:	jmp    42b1ec <flatcc_json_printer_struct_field@@Base+0x7c>
  42b2ae:	xchg   ax,ax
  42b2b0:	ret    
  42b2b1:	nop    DWORD PTR [rax+0x0]
  42b2b8:	lea    rdx,[rax+0x1]
  42b2bc:	mov    QWORD PTR [rdi+0x28],rdx
  42b2c0:	mov    BYTE PTR [rax],0xa
  42b2c3:	movzx  eax,BYTE PTR [rdi+0x31]
  42b2c7:	imul   eax,DWORD PTR [rdi+0x38]
  42b2cb:	mov    rdi,QWORD PTR [rdi+0x28]
  42b2cf:	movsxd r14,eax
  42b2d2:	lea    rax,[rdi+r14*1]
  42b2d6:	cmp    QWORD PTR [rbx+0x20],rax
  42b2da:	jae    42b330 <flatcc_json_printer_struct_field@@Base+0x1c0>
  42b2dc:	mov    rsi,r14
  42b2df:	mov    rdi,rbx
  42b2e2:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42b2e7:	mov    rax,QWORD PTR [rbx+0x28]
  42b2eb:	jmp    42b1ec <flatcc_json_printer_struct_field@@Base+0x7c>
  42b2f0:	mov    rax,QWORD PTR [rbx+0x28]
  42b2f4:	lea    rdx,[rax+0x1]
  42b2f8:	mov    QWORD PTR [rbx+0x28],rdx
  42b2fc:	mov    BYTE PTR [rax],0xa
  42b2ff:	mov    eax,DWORD PTR [rbx+0x38]
  42b302:	movzx  esi,BYTE PTR [rbx+0x31]
  42b306:	lea    ebp,[rax-0x1]
  42b309:	imul   esi,ebp
  42b30c:	mov    rdi,QWORD PTR [rbx+0x28]
  42b310:	mov    DWORD PTR [rbx+0x38],ebp
  42b313:	movsxd rbp,esi
  42b316:	lea    rax,[rdi+rbp*1]
  42b31a:	cmp    QWORD PTR [rbx+0x20],rax
  42b31e:	jae    42b350 <flatcc_json_printer_struct_field@@Base+0x1e0>
  42b320:	mov    rsi,rbp
  42b323:	mov    rdi,rbx
  42b326:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42b32b:	jmp    42b26f <flatcc_json_printer_struct_field@@Base+0xff>
  42b330:	mov    rdx,r14
  42b333:	mov    esi,0x20
  42b338:	call   4061c0 <memset@plt>
  42b33d:	mov    rax,QWORD PTR [rbx+0x28]
  42b341:	add    rax,r14
  42b344:	mov    QWORD PTR [rbx+0x28],rax
  42b348:	jmp    42b1ec <flatcc_json_printer_struct_field@@Base+0x7c>
  42b34d:	nop    DWORD PTR [rax]
  42b350:	mov    esi,0x20
  42b355:	mov    rdx,rbp
  42b358:	call   4061c0 <memset@plt>
  42b35d:	mov    rsi,QWORD PTR [rbx+0x28]
  42b361:	add    rsi,rbp
  42b364:	jmp    42b273 <flatcc_json_printer_struct_field@@Base+0x103>
  42b369:	nop    DWORD PTR [rax+0x0]

000000000042b370 <flatcc_json_printer_struct_as_root@@Base>:
  42b370:	endbr64 
  42b374:	push   r12
  42b376:	mov    r12,r8
  42b379:	push   rbp
  42b37a:	mov    rbp,rsi
  42b37d:	push   rbx
  42b37e:	mov    rbx,rdi
  42b381:	call   421ca0 <flatcc_json_parser_struct_as_root@@Base+0x16d0>
  42b386:	test   eax,eax
  42b388:	je     42b470 <flatcc_json_printer_struct_as_root@@Base+0x100>
  42b38e:	mov    rax,QWORD PTR [rbx+0x28]
  42b392:	inc    DWORD PTR [rbx+0x38]
  42b395:	lea    rdx,[rax+0x1]
  42b399:	mov    QWORD PTR [rbx+0x28],rdx
  42b39d:	mov    BYTE PTR [rax],0x7b
  42b3a0:	mov    rdi,rbx
  42b3a3:	mov    esi,DWORD PTR [rbp+0x0]
  42b3a6:	add    rsi,rbp
  42b3a9:	call   r12
  42b3ac:	cmp    BYTE PTR [rbx+0x31],0x0
  42b3b0:	jne    42b410 <flatcc_json_printer_struct_as_root@@Base+0xa0>
  42b3b2:	mov    rsi,QWORD PTR [rbx+0x28]
  42b3b6:	lea    rax,[rsi+0x1]
  42b3ba:	mov    QWORD PTR [rbx+0x28],rax
  42b3be:	mov    BYTE PTR [rsi],0x7d
  42b3c1:	cmp    BYTE PTR [rbx+0x31],0x0
  42b3c5:	jne    42b3f0 <flatcc_json_printer_struct_as_root@@Base+0x80>
  42b3c7:	mov    esi,0x1
  42b3cc:	mov    rdi,rbx
  42b3cf:	call   QWORD PTR [rbx+0x48]
  42b3d2:	mov    eax,DWORD PTR [rbx+0x3c]
  42b3d5:	test   eax,eax
  42b3d7:	jne    42b470 <flatcc_json_printer_struct_as_root@@Base+0x100>
  42b3dd:	mov    rax,QWORD PTR [rbx+0x28]
  42b3e1:	sub    rax,QWORD PTR [rbx]
  42b3e4:	add    eax,DWORD PTR [rbx+0x18]
  42b3e7:	pop    rbx
  42b3e8:	pop    rbp
  42b3e9:	pop    r12
  42b3eb:	ret    
  42b3ec:	nop    DWORD PTR [rax+0x0]
  42b3f0:	mov    edx,DWORD PTR [rbx+0x38]
  42b3f3:	test   edx,edx
  42b3f5:	jne    42b3c7 <flatcc_json_printer_struct_as_root@@Base+0x57>
  42b3f7:	mov    rax,QWORD PTR [rbx+0x28]
  42b3fb:	lea    rdx,[rax+0x1]
  42b3ff:	mov    QWORD PTR [rbx+0x28],rdx
  42b403:	mov    BYTE PTR [rax],0xa
  42b406:	jmp    42b3c7 <flatcc_json_printer_struct_as_root@@Base+0x57>
  42b408:	nop    DWORD PTR [rax+rax*1+0x0]
  42b410:	mov    rax,QWORD PTR [rbx+0x28]
  42b414:	lea    rdx,[rax+0x1]
  42b418:	mov    QWORD PTR [rbx+0x28],rdx
  42b41c:	mov    BYTE PTR [rax],0xa
  42b41f:	mov    eax,DWORD PTR [rbx+0x38]
  42b422:	movzx  esi,BYTE PTR [rbx+0x31]
  42b426:	lea    ebp,[rax-0x1]
  42b429:	imul   esi,ebp
  42b42c:	mov    rdi,QWORD PTR [rbx+0x28]
  42b430:	mov    DWORD PTR [rbx+0x38],ebp
  42b433:	movsxd rbp,esi
  42b436:	lea    rax,[rdi+rbp*1]
  42b43a:	cmp    QWORD PTR [rbx+0x20],rax
  42b43e:	jae    42b450 <flatcc_json_printer_struct_as_root@@Base+0xe0>
  42b440:	mov    rsi,rbp
  42b443:	mov    rdi,rbx
  42b446:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42b44b:	jmp    42b3b2 <flatcc_json_printer_struct_as_root@@Base+0x42>
  42b450:	mov    esi,0x20
  42b455:	mov    rdx,rbp
  42b458:	call   4061c0 <memset@plt>
  42b45d:	mov    rsi,QWORD PTR [rbx+0x28]
  42b461:	add    rsi,rbp
  42b464:	jmp    42b3b6 <flatcc_json_printer_struct_as_root@@Base+0x46>
  42b469:	nop    DWORD PTR [rax+0x0]
  42b470:	mov    eax,0xffffffff
  42b475:	jmp    42b3e7 <flatcc_json_printer_struct_as_root@@Base+0x77>
  42b47a:	nop    WORD PTR [rax+rax*1+0x0]

000000000042b480 <flatcc_json_printer_table_as_root@@Base>:
  42b480:	endbr64 
  42b484:	push   r12
  42b486:	mov    r12,r8
  42b489:	push   rbp
  42b48a:	mov    rbp,rsi
  42b48d:	push   rbx
  42b48e:	mov    rbx,rdi
  42b491:	sub    rsp,0x30
  42b495:	mov    rax,QWORD PTR fs:0x28
  42b49e:	mov    QWORD PTR [rsp+0x28],rax
  42b4a3:	xor    eax,eax
  42b4a5:	call   421ca0 <flatcc_json_parser_struct_as_root@@Base+0x16d0>
  42b4aa:	test   eax,eax
  42b4ac:	je     42b5d0 <flatcc_json_printer_table_as_root@@Base+0x150>
  42b4b2:	mov    eax,DWORD PTR [rbp+0x0]
  42b4b5:	inc    DWORD PTR [rbx+0x38]
  42b4b8:	add    rbp,rax
  42b4bb:	mov    rax,QWORD PTR [rbx+0x28]
  42b4bf:	mov    rsi,rsp
  42b4c2:	lea    rdx,[rax+0x1]
  42b4c6:	mov    QWORD PTR [rbx+0x28],rdx
  42b4ca:	mov    BYTE PTR [rax],0x7b
  42b4cd:	mov    QWORD PTR [rsp+0x14],0x63
  42b4d6:	mov    QWORD PTR [rsp],rbp
  42b4da:	mov    rdi,rbx
  42b4dd:	movsxd rax,DWORD PTR [rbp+0x0]
  42b4e1:	sub    rbp,rax
  42b4e4:	movzx  eax,WORD PTR [rbp+0x0]
  42b4e8:	mov    QWORD PTR [rsp+0x8],rbp
  42b4ed:	mov    DWORD PTR [rsp+0x10],eax
  42b4f1:	call   r12
  42b4f4:	cmp    BYTE PTR [rbx+0x31],0x0
  42b4f8:	jne    42b570 <flatcc_json_printer_table_as_root@@Base+0xf0>
  42b4fa:	mov    rsi,QWORD PTR [rbx+0x28]
  42b4fe:	lea    rax,[rsi+0x1]
  42b502:	mov    QWORD PTR [rbx+0x28],rax
  42b506:	mov    BYTE PTR [rsi],0x7d
  42b509:	cmp    BYTE PTR [rbx+0x31],0x0
  42b50d:	jne    42b550 <flatcc_json_printer_table_as_root@@Base+0xd0>
  42b50f:	mov    esi,0x1
  42b514:	mov    rdi,rbx
  42b517:	call   QWORD PTR [rbx+0x48]
  42b51a:	mov    eax,DWORD PTR [rbx+0x3c]
  42b51d:	test   eax,eax
  42b51f:	jne    42b5d0 <flatcc_json_printer_table_as_root@@Base+0x150>
  42b525:	mov    rax,QWORD PTR [rbx+0x28]
  42b529:	sub    rax,QWORD PTR [rbx]
  42b52c:	add    eax,DWORD PTR [rbx+0x18]
  42b52f:	mov    rcx,QWORD PTR [rsp+0x28]
  42b534:	xor    rcx,QWORD PTR fs:0x28
  42b53d:	jne    42b5da <flatcc_json_printer_table_as_root@@Base+0x15a>
  42b543:	add    rsp,0x30
  42b547:	pop    rbx
  42b548:	pop    rbp
  42b549:	pop    r12
  42b54b:	ret    
  42b54c:	nop    DWORD PTR [rax+0x0]
  42b550:	mov    edx,DWORD PTR [rbx+0x38]
  42b553:	test   edx,edx
  42b555:	jne    42b50f <flatcc_json_printer_table_as_root@@Base+0x8f>
  42b557:	mov    rax,QWORD PTR [rbx+0x28]
  42b55b:	lea    rdx,[rax+0x1]
  42b55f:	mov    QWORD PTR [rbx+0x28],rdx
  42b563:	mov    BYTE PTR [rax],0xa
  42b566:	jmp    42b50f <flatcc_json_printer_table_as_root@@Base+0x8f>
  42b568:	nop    DWORD PTR [rax+rax*1+0x0]
  42b570:	mov    rax,QWORD PTR [rbx+0x28]
  42b574:	lea    rdx,[rax+0x1]
  42b578:	mov    QWORD PTR [rbx+0x28],rdx
  42b57c:	mov    BYTE PTR [rax],0xa
  42b57f:	mov    eax,DWORD PTR [rbx+0x38]
  42b582:	movzx  esi,BYTE PTR [rbx+0x31]
  42b586:	lea    ebp,[rax-0x1]
  42b589:	imul   esi,ebp
  42b58c:	mov    rdi,QWORD PTR [rbx+0x28]
  42b590:	mov    DWORD PTR [rbx+0x38],ebp
  42b593:	movsxd rbp,esi
  42b596:	lea    rax,[rdi+rbp*1]
  42b59a:	cmp    QWORD PTR [rbx+0x20],rax
  42b59e:	jae    42b5b0 <flatcc_json_printer_table_as_root@@Base+0x130>
  42b5a0:	mov    rsi,rbp
  42b5a3:	mov    rdi,rbx
  42b5a6:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42b5ab:	jmp    42b4fa <flatcc_json_printer_table_as_root@@Base+0x7a>
  42b5b0:	mov    esi,0x20
  42b5b5:	mov    rdx,rbp
  42b5b8:	call   4061c0 <memset@plt>
  42b5bd:	mov    rsi,QWORD PTR [rbx+0x28]
  42b5c1:	add    rsi,rbp
  42b5c4:	jmp    42b4fe <flatcc_json_printer_table_as_root@@Base+0x7e>
  42b5c9:	nop    DWORD PTR [rax+0x0]
  42b5d0:	mov    eax,0xffffffff
  42b5d5:	jmp    42b52f <flatcc_json_printer_table_as_root@@Base+0xaf>
  42b5da:	call   4061a0 <__stack_chk_fail@plt>
  42b5df:	nop

000000000042b5e0 <flatcc_json_printer_struct_as_nested_root@@Base>:
  42b5e0:	endbr64 
  42b5e4:	lea    eax,[rdx+rdx*1+0x4]
  42b5e8:	cmp    eax,DWORD PTR [rsi+0x10]
  42b5eb:	jge    42b690 <flatcc_json_printer_struct_as_nested_root@@Base+0xb0>
  42b5f1:	mov    r10,QWORD PTR [rsi+0x8]
  42b5f5:	movzx  eax,WORD PTR [r10+rax*1]
  42b5fa:	test   ax,ax
  42b5fd:	je     42b690 <flatcc_json_printer_struct_as_nested_root@@Base+0xb0>
  42b603:	add    rax,QWORD PTR [rsi]
  42b606:	je     42b690 <flatcc_json_printer_struct_as_nested_root@@Base+0xb0>
  42b60c:	push   r14
  42b60e:	mov    r14,rsi
  42b611:	push   r13
  42b613:	mov    r13,rcx
  42b616:	mov    rcx,r9
  42b619:	push   r12
  42b61b:	mov    r12d,r8d
  42b61e:	push   rbp
  42b61f:	mov    rbp,rdi
  42b622:	push   rbx
  42b623:	mov    ebx,DWORD PTR [rax]
  42b625:	add    rbx,rax
  42b628:	mov    edx,DWORD PTR [rbx]
  42b62a:	mov    rsi,rbx
  42b62d:	call   421ca0 <flatcc_json_parser_struct_as_root@@Base+0x16d0>
  42b632:	test   eax,eax
  42b634:	je     42b686 <flatcc_json_printer_struct_as_nested_root@@Base+0xa6>
  42b636:	mov    eax,DWORD PTR [r14+0x18]
  42b63a:	lea    edx,[rax+0x1]
  42b63d:	mov    DWORD PTR [r14+0x18],edx
  42b641:	test   eax,eax
  42b643:	jne    42b698 <flatcc_json_printer_struct_as_nested_root@@Base+0xb8>
  42b645:	movsxd rdx,r12d
  42b648:	mov    rsi,r13
  42b64b:	mov    rdi,rbp
  42b64e:	call   422140 <flatcc_json_parser_struct_as_root@@Base+0x1b70>
  42b653:	mov    rax,QWORD PTR [rbp+0x28]
  42b657:	inc    DWORD PTR [rbp+0x38]
  42b65a:	lea    rdx,[rax+0x1]
  42b65e:	mov    QWORD PTR [rbp+0x28],rdx
  42b662:	mov    BYTE PTR [rax],0x7b
  42b665:	mov    rdi,rbp
  42b668:	mov    esi,DWORD PTR [rbx]
  42b66a:	add    rsi,rbx
  42b66d:	call   QWORD PTR [rsp+0x30]
  42b671:	cmp    BYTE PTR [rbp+0x31],0x0
  42b675:	jne    42b6b0 <flatcc_json_printer_struct_as_nested_root@@Base+0xd0>
  42b677:	mov    rsi,QWORD PTR [rbp+0x28]
  42b67b:	lea    rax,[rsi+0x1]
  42b67f:	mov    QWORD PTR [rbp+0x28],rax
  42b683:	mov    BYTE PTR [rsi],0x7d
  42b686:	pop    rbx
  42b687:	pop    rbp
  42b688:	pop    r12
  42b68a:	pop    r13
  42b68c:	pop    r14
  42b68e:	ret    
  42b68f:	nop
  42b690:	ret    
  42b691:	nop    DWORD PTR [rax+0x0]
  42b698:	mov    rax,QWORD PTR [rbp+0x28]
  42b69c:	lea    rdx,[rax+0x1]
  42b6a0:	mov    QWORD PTR [rbp+0x28],rdx
  42b6a4:	mov    BYTE PTR [rax],0x2c
  42b6a7:	jmp    42b645 <flatcc_json_printer_struct_as_nested_root@@Base+0x65>
  42b6a9:	nop    DWORD PTR [rax+0x0]
  42b6b0:	mov    rax,QWORD PTR [rbp+0x28]
  42b6b4:	lea    rdx,[rax+0x1]
  42b6b8:	mov    QWORD PTR [rbp+0x28],rdx
  42b6bc:	mov    BYTE PTR [rax],0xa
  42b6bf:	mov    eax,DWORD PTR [rbp+0x38]
  42b6c2:	movzx  esi,BYTE PTR [rbp+0x31]
  42b6c6:	lea    ebx,[rax-0x1]
  42b6c9:	imul   esi,ebx
  42b6cc:	mov    rdi,QWORD PTR [rbp+0x28]
  42b6d0:	mov    DWORD PTR [rbp+0x38],ebx
  42b6d3:	movsxd rbx,esi
  42b6d6:	lea    rax,[rdi+rbx*1]
  42b6da:	cmp    QWORD PTR [rbp+0x20],rax
  42b6de:	jae    42b6f0 <flatcc_json_printer_struct_as_nested_root@@Base+0x110>
  42b6e0:	mov    rsi,rbx
  42b6e3:	mov    rdi,rbp
  42b6e6:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42b6eb:	jmp    42b677 <flatcc_json_printer_struct_as_nested_root@@Base+0x97>
  42b6ed:	nop    DWORD PTR [rax]
  42b6f0:	mov    rdx,rbx
  42b6f3:	mov    esi,0x20
  42b6f8:	call   4061c0 <memset@plt>
  42b6fd:	add    rbx,QWORD PTR [rbp+0x28]
  42b701:	mov    rsi,rbx
  42b704:	jmp    42b67b <flatcc_json_printer_struct_as_nested_root@@Base+0x9b>
  42b709:	nop    DWORD PTR [rax+0x0]

000000000042b710 <flatcc_json_printer_table_as_nested_root@@Base>:
  42b710:	endbr64 
  42b714:	push   r15
  42b716:	push   r14
  42b718:	push   r13
  42b71a:	push   r12
  42b71c:	push   rbp
  42b71d:	push   rbx
  42b71e:	sub    rsp,0x48
  42b722:	mov    DWORD PTR [rsp],r8d
  42b726:	mov    r13,QWORD PTR [rsp+0x80]
  42b72e:	mov    rax,QWORD PTR fs:0x28
  42b737:	mov    QWORD PTR [rsp+0x38],rax
  42b73c:	xor    eax,eax
  42b73e:	lea    eax,[rdx+rdx*1+0x4]
  42b742:	cmp    eax,DWORD PTR [rsi+0x10]
  42b745:	jge    42b89d <flatcc_json_printer_table_as_nested_root@@Base+0x18d>
  42b74b:	mov    rdx,QWORD PTR [rsi+0x8]
  42b74f:	mov    r14,rsi
  42b752:	movzx  eax,WORD PTR [rdx+rax*1]
  42b756:	test   ax,ax
  42b759:	je     42b89d <flatcc_json_printer_table_as_nested_root@@Base+0x18d>
  42b75f:	add    rax,QWORD PTR [rsi]
  42b762:	je     42b89d <flatcc_json_printer_table_as_nested_root@@Base+0x18d>
  42b768:	mov    ebp,DWORD PTR [rax]
  42b76a:	mov    r12,rcx
  42b76d:	add    rbp,rax
  42b770:	lea    r15,[rbp+0x4]
  42b774:	mov    edx,DWORD PTR [rbp+0x0]
  42b777:	mov    rcx,r9
  42b77a:	mov    rsi,r15
  42b77d:	mov    rbx,rdi
  42b780:	call   421ca0 <flatcc_json_parser_struct_as_root@@Base+0x16d0>
  42b785:	test   eax,eax
  42b787:	je     42b89d <flatcc_json_printer_table_as_nested_root@@Base+0x18d>
  42b78d:	mov    eax,DWORD PTR [r14+0x18]
  42b791:	mov    rsi,QWORD PTR [rbx+0x28]
  42b795:	lea    edx,[rax+0x1]
  42b798:	test   eax,eax
  42b79a:	mov    DWORD PTR [r14+0x18],edx
  42b79e:	movsxd r8,DWORD PTR [rsp]
  42b7a2:	jne    42b8e0 <flatcc_json_printer_table_as_nested_root@@Base+0x1d0>
  42b7a8:	cmp    BYTE PTR [rbx+0x31],0x0
  42b7ac:	jne    42b8f9 <flatcc_json_printer_table_as_nested_root@@Base+0x1e9>
  42b7b2:	cmp    QWORD PTR [rbx+0x20],rsi
  42b7b6:	ja     42b7cc <flatcc_json_printer_table_as_nested_root@@Base+0xbc>
  42b7b8:	xor    esi,esi
  42b7ba:	mov    rdi,rbx
  42b7bd:	mov    QWORD PTR [rsp],r8
  42b7c1:	call   QWORD PTR [rbx+0x48]
  42b7c4:	mov    rsi,QWORD PTR [rbx+0x28]
  42b7c8:	mov    r8,QWORD PTR [rsp]
  42b7cc:	mov    BYTE PTR [rsi],0x22
  42b7cf:	xor    edi,edi
  42b7d1:	mov    rdx,r8
  42b7d4:	cmp    BYTE PTR [rbx+0x32],0x0
  42b7d8:	sete   dil
  42b7dc:	add    rdi,QWORD PTR [rbx+0x28]
  42b7e0:	lea    rax,[rdi+r8*1]
  42b7e4:	mov    QWORD PTR [rbx+0x28],rdi
  42b7e8:	cmp    QWORD PTR [rbx+0x20],rax
  42b7ec:	ja     42b8c0 <flatcc_json_printer_table_as_nested_root@@Base+0x1b0>
  42b7f2:	mov    rsi,r12
  42b7f5:	mov    rdi,rbx
  42b7f8:	call   421080 <flatcc_json_parser_struct_as_root@@Base+0xab0>
  42b7fd:	mov    r8,QWORD PTR [rbx+0x28]
  42b801:	mov    BYTE PTR [r8],0x22
  42b805:	xor    eax,eax
  42b807:	cmp    BYTE PTR [rbx+0x32],0x0
  42b80b:	sete   al
  42b80e:	add    rax,QWORD PTR [rbx+0x28]
  42b812:	lea    rdx,[rax+0x1]
  42b816:	mov    QWORD PTR [rbx+0x28],rdx
  42b81a:	mov    BYTE PTR [rax],0x3a
  42b81d:	mov    rax,QWORD PTR [rbx+0x28]
  42b821:	mov    BYTE PTR [rax],0x20
  42b824:	xor    eax,eax
  42b826:	cmp    BYTE PTR [rbx+0x31],0x0
  42b82a:	setne  al
  42b82d:	mov    edx,DWORD PTR [r14+0x14]
  42b831:	add    rax,QWORD PTR [rbx+0x28]
  42b835:	mov    QWORD PTR [rbx+0x28],rax
  42b839:	dec    edx
  42b83b:	je     42b940 <flatcc_json_printer_table_as_nested_root@@Base+0x230>
  42b841:	mov    ecx,DWORD PTR [rbp+0x4]
  42b844:	inc    DWORD PTR [rbx+0x38]
  42b847:	add    r15,rcx
  42b84a:	lea    rcx,[rax+0x1]
  42b84e:	mov    QWORD PTR [rbx+0x28],rcx
  42b852:	mov    BYTE PTR [rax],0x7b
  42b855:	mov    DWORD PTR [rsp+0x28],0x0
  42b85d:	mov    DWORD PTR [rsp+0x24],edx
  42b861:	mov    QWORD PTR [rsp+0x10],r15
  42b866:	lea    rsi,[rsp+0x10]
  42b86b:	movsxd rax,DWORD PTR [r15]
  42b86e:	mov    rdi,rbx
  42b871:	sub    r15,rax
  42b874:	movzx  eax,WORD PTR [r15]
  42b878:	mov    QWORD PTR [rsp+0x18],r15
  42b87d:	mov    DWORD PTR [rsp+0x20],eax
  42b881:	call   r13
  42b884:	cmp    BYTE PTR [rbx+0x31],0x0
  42b888:	jne    42b960 <flatcc_json_printer_table_as_nested_root@@Base+0x250>
  42b88e:	mov    rsi,QWORD PTR [rbx+0x28]
  42b892:	lea    rax,[rsi+0x1]
  42b896:	mov    QWORD PTR [rbx+0x28],rax
  42b89a:	mov    BYTE PTR [rsi],0x7d
  42b89d:	mov    rax,QWORD PTR [rsp+0x38]
  42b8a2:	xor    rax,QWORD PTR fs:0x28
  42b8ab:	jne    42b9e9 <flatcc_json_printer_table_as_nested_root@@Base+0x2d9>
  42b8b1:	add    rsp,0x48
  42b8b5:	pop    rbx
  42b8b6:	pop    rbp
  42b8b7:	pop    r12
  42b8b9:	pop    r13
  42b8bb:	pop    r14
  42b8bd:	pop    r15
  42b8bf:	ret    
  42b8c0:	mov    rsi,r12
  42b8c3:	mov    QWORD PTR [rsp],r8
  42b8c7:	call   406210 <memcpy@plt>
  42b8cc:	mov    r8,QWORD PTR [rsp]
  42b8d0:	add    r8,QWORD PTR [rbx+0x28]
  42b8d4:	mov    QWORD PTR [rbx+0x28],r8
  42b8d8:	jmp    42b801 <flatcc_json_printer_table_as_nested_root@@Base+0xf1>
  42b8dd:	nop    DWORD PTR [rax]
  42b8e0:	lea    rax,[rsi+0x1]
  42b8e4:	mov    QWORD PTR [rbx+0x28],rax
  42b8e8:	mov    BYTE PTR [rsi],0x2c
  42b8eb:	cmp    BYTE PTR [rbx+0x31],0x0
  42b8ef:	mov    rsi,QWORD PTR [rbx+0x28]
  42b8f3:	je     42b7b2 <flatcc_json_printer_table_as_nested_root@@Base+0xa2>
  42b8f9:	lea    rax,[rsi+0x1]
  42b8fd:	mov    QWORD PTR [rbx+0x28],rax
  42b901:	mov    BYTE PTR [rsi],0xa
  42b904:	movzx  esi,BYTE PTR [rbx+0x31]
  42b908:	mov    rdi,QWORD PTR [rbx+0x28]
  42b90c:	imul   esi,DWORD PTR [rbx+0x38]
  42b910:	movsxd rcx,esi
  42b913:	lea    rax,[rdi+rcx*1]
  42b917:	cmp    QWORD PTR [rbx+0x20],rax
  42b91b:	jae    42b9a0 <flatcc_json_printer_table_as_nested_root@@Base+0x290>
  42b921:	mov    rsi,rcx
  42b924:	mov    rdi,rbx
  42b927:	mov    QWORD PTR [rsp],r8
  42b92b:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42b930:	mov    rsi,QWORD PTR [rbx+0x28]
  42b934:	mov    r8,QWORD PTR [rsp]
  42b938:	jmp    42b7cc <flatcc_json_printer_table_as_nested_root@@Base+0xbc>
  42b93d:	nop    DWORD PTR [rax]
  42b940:	mov    eax,DWORD PTR [rbx+0x3c]
  42b943:	test   eax,eax
  42b945:	jne    42b89d <flatcc_json_printer_table_as_nested_root@@Base+0x18d>
  42b94b:	mov    DWORD PTR [rbx+0x3c],0x2
  42b952:	jmp    42b89d <flatcc_json_printer_table_as_nested_root@@Base+0x18d>
  42b957:	nop    WORD PTR [rax+rax*1+0x0]
  42b960:	mov    rax,QWORD PTR [rbx+0x28]
  42b964:	lea    rdx,[rax+0x1]
  42b968:	mov    QWORD PTR [rbx+0x28],rdx
  42b96c:	mov    BYTE PTR [rax],0xa
  42b96f:	mov    eax,DWORD PTR [rbx+0x38]
  42b972:	movzx  esi,BYTE PTR [rbx+0x31]
  42b976:	lea    ebp,[rax-0x1]
  42b979:	imul   esi,ebp
  42b97c:	mov    rdi,QWORD PTR [rbx+0x28]
  42b980:	mov    DWORD PTR [rbx+0x38],ebp
  42b983:	movsxd rbp,esi
  42b986:	lea    rax,[rdi+rbp*1]
  42b98a:	cmp    QWORD PTR [rbx+0x20],rax
  42b98e:	jae    42b9d0 <flatcc_json_printer_table_as_nested_root@@Base+0x2c0>
  42b990:	mov    rsi,rbp
  42b993:	mov    rdi,rbx
  42b996:	call   421110 <flatcc_json_parser_struct_as_root@@Base+0xb40>
  42b99b:	jmp    42b88e <flatcc_json_printer_table_as_nested_root@@Base+0x17e>
  42b9a0:	mov    rdx,rcx
  42b9a3:	mov    esi,0x20
  42b9a8:	mov    QWORD PTR [rsp+0x8],r8
  42b9ad:	mov    QWORD PTR [rsp],rcx
  42b9b1:	call   4061c0 <memset@plt>
  42b9b6:	mov    rcx,QWORD PTR [rsp]
  42b9ba:	mov    r8,QWORD PTR [rsp+0x8]
  42b9bf:	add    rcx,QWORD PTR [rbx+0x28]
  42b9c3:	mov    rsi,rcx
  42b9c6:	mov    QWORD PTR [rbx+0x28],rcx
  42b9ca:	jmp    42b7cc <flatcc_json_printer_table_as_nested_root@@Base+0xbc>
  42b9cf:	nop
  42b9d0:	mov    esi,0x20
  42b9d5:	mov    rdx,rbp
  42b9d8:	call   4061c0 <memset@plt>
  42b9dd:	mov    rsi,QWORD PTR [rbx+0x28]
  42b9e1:	add    rsi,rbp
  42b9e4:	jmp    42b892 <flatcc_json_printer_table_as_nested_root@@Base+0x182>
  42b9e9:	call   4061a0 <__stack_chk_fail@plt>
  42b9ee:	xchg   ax,ax

000000000042b9f0 <flatcc_json_printer_init@@Base>:
  42b9f0:	endbr64 
  42b9f4:	vpxor  xmm0,xmm0,xmm0
  42b9f8:	push   rbx
  42b9f9:	mov    rbx,rdi
  42b9fc:	vmovups XMMWORD PTR [rdi],xmm0
  42ba00:	vmovups XMMWORD PTR [rdi+0x10],xmm0
  42ba05:	vmovups XMMWORD PTR [rdi+0x20],xmm0
  42ba0a:	vmovups XMMWORD PTR [rdi+0x30],xmm0
  42ba0f:	vmovups XMMWORD PTR [rdi+0x40],xmm0
  42ba14:	test   rsi,rsi
  42ba17:	je     42ba60 <flatcc_json_printer_init@@Base+0x70>
  42ba19:	lea    rax,[rip+0xffffffffffff57c0]        # 4211e0 <flatcc_json_parser_struct_as_root@@Base+0xc10>
  42ba20:	mov    QWORD PTR [rbx+0x40],rsi
  42ba24:	mov    QWORD PTR [rbx+0x48],rax
  42ba28:	mov    edi,0x4040
  42ba2d:	call   406220 <malloc@plt>
  42ba32:	mov    QWORD PTR [rbx],rax
  42ba35:	test   rax,rax
  42ba38:	je     42ba6c <flatcc_json_printer_init@@Base+0x7c>
  42ba3a:	mov    QWORD PTR [rbx+0x28],rax
  42ba3e:	add    rax,0x4000
  42ba44:	mov    QWORD PTR [rbx+0x20],rax
  42ba48:	mov    BYTE PTR [rbx+0x30],0x1
  42ba4c:	mov    QWORD PTR [rbx+0x8],0x4040
  42ba54:	mov    QWORD PTR [rbx+0x10],0x4000
  42ba5c:	xor    eax,eax
  42ba5e:	pop    rbx
  42ba5f:	ret    
  42ba60:	mov    rax,QWORD PTR [rip+0xe569]        # 439fd0 <stdout@GLIBC_2.2.5>
  42ba67:	mov    rsi,QWORD PTR [rax]
  42ba6a:	jmp    42ba19 <flatcc_json_printer_init@@Base+0x29>
  42ba6c:	mov    eax,0xffffffff
  42ba71:	pop    rbx
  42ba72:	ret    
  42ba73:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  42ba7e:	xchg   ax,ax

000000000042ba80 <flatcc_json_printer_init_buffer@@Base>:
  42ba80:	endbr64 
  42ba84:	cmp    rdx,0x3f
  42ba88:	jbe    42bac5 <flatcc_json_printer_init_buffer@@Base+0x45>
  42ba8a:	mov    QWORD PTR [rdi+0x8],rdx
  42ba8e:	sub    rdx,0x40
  42ba92:	vpxor  xmm0,xmm0,xmm0
  42ba96:	mov    QWORD PTR [rdi+0x10],rdx
  42ba9a:	lea    rax,[rip+0xffffffffffff559f]        # 421040 <flatcc_json_parser_struct_as_root@@Base+0xa70>
  42baa1:	add    rdx,rsi
  42baa4:	vmovups XMMWORD PTR [rdi+0x18],xmm0
  42baa9:	vmovups XMMWORD PTR [rdi+0x28],xmm0
  42baae:	mov    QWORD PTR [rdi+0x48],rax
  42bab2:	vmovups XMMWORD PTR [rdi+0x38],xmm0
  42bab7:	mov    QWORD PTR [rdi],rsi
  42baba:	mov    QWORD PTR [rdi+0x28],rsi
  42babe:	mov    QWORD PTR [rdi+0x20],rdx
  42bac2:	xor    eax,eax
  42bac4:	ret    
  42bac5:	push   rax
  42bac6:	lea    rcx,[rip+0x6933]        # 432400 <flatcc_builder_padding_base@@Base+0x19e0>
  42bacd:	mov    edx,0x48d
  42bad2:	lea    rsi,[rip+0x6757]        # 432230 <flatcc_builder_padding_base@@Base+0x1810>
  42bad9:	lea    rdi,[rip+0x6868]        # 432348 <flatcc_builder_padding_base@@Base+0x1928>
  42bae0:	call   4061b0 <__assert_fail@plt>
  42bae5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000042baf0 <flatcc_json_printer_init_dynamic_buffer@@Base>:
  42baf0:	endbr64 
  42baf4:	push   r12
  42baf6:	push   rbp
  42baf7:	push   rbx
  42baf8:	mov    rbx,rdi
  42bafb:	test   rsi,rsi
  42bafe:	je     42bb60 <flatcc_json_printer_init_dynamic_buffer@@Base+0x70>
  42bb00:	cmp    rsi,0x40
  42bb04:	mov    ebp,0x40
  42bb09:	cmovae rbp,rsi
  42bb0d:	lea    r12,[rbp-0x40]
  42bb11:	vpxor  xmm0,xmm0,xmm0
  42bb15:	vmovups XMMWORD PTR [rbx+0x18],xmm0
  42bb1a:	vmovups XMMWORD PTR [rbx+0x28],xmm0
  42bb1f:	vmovups XMMWORD PTR [rbx+0x38],xmm0
  42bb24:	mov    rdi,rbp
  42bb27:	call   406220 <malloc@plt>
  42bb2c:	mov    QWORD PTR [rbx+0x10],r12
  42bb30:	lea    rdx,[rip+0xffffffffffff5749]        # 421280 <flatcc_json_parser_struct_as_root@@Base+0xcb0>
  42bb37:	add    r12,rax
  42bb3a:	mov    QWORD PTR [rbx],rax
  42bb3d:	mov    BYTE PTR [rbx+0x30],0x1
  42bb41:	mov    QWORD PTR [rbx+0x8],rbp
  42bb45:	mov    QWORD PTR [rbx+0x28],rax
  42bb49:	mov    QWORD PTR [rbx+0x20],r12
  42bb4d:	mov    QWORD PTR [rbx+0x48],rdx
  42bb51:	test   rax,rax
  42bb54:	je     42bb6d <flatcc_json_printer_init_dynamic_buffer@@Base+0x7d>
  42bb56:	xor    eax,eax
  42bb58:	pop    rbx
  42bb59:	pop    rbp
  42bb5a:	pop    r12
  42bb5c:	ret    
  42bb5d:	nop    DWORD PTR [rax]
  42bb60:	mov    r12d,0xfc0
  42bb66:	mov    ebp,0x1000
  42bb6b:	jmp    42bb11 <flatcc_json_printer_init_dynamic_buffer@@Base+0x21>
  42bb6d:	mov    edx,DWORD PTR [rbx+0x3c]
  42bb70:	mov    eax,0xffffffff
  42bb75:	test   edx,edx
  42bb77:	jne    42bb58 <flatcc_json_printer_init_dynamic_buffer@@Base+0x68>
  42bb79:	mov    DWORD PTR [rbx+0x3c],0x3
  42bb80:	jmp    42bb58 <flatcc_json_printer_init_dynamic_buffer@@Base+0x68>
  42bb82:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  42bb8d:	nop    DWORD PTR [rax]

000000000042bb90 <flatcc_json_printer_get_buffer@@Base>:
  42bb90:	endbr64 
  42bb94:	push   rbp
  42bb95:	mov    rbp,rsi
  42bb98:	xor    esi,esi
  42bb9a:	push   rbx
  42bb9b:	mov    rbx,rdi
  42bb9e:	sub    rsp,0x8
  42bba2:	call   QWORD PTR [rdi+0x48]
  42bba5:	mov    rax,QWORD PTR [rbx]
  42bba8:	test   rbp,rbp
  42bbab:	je     42bbb8 <flatcc_json_printer_get_buffer@@Base+0x28>
  42bbad:	mov    rdx,QWORD PTR [rbx+0x28]
  42bbb1:	sub    rdx,rax
  42bbb4:	mov    QWORD PTR [rbp+0x0],rdx
  42bbb8:	add    rsp,0x8
  42bbbc:	pop    rbx
  42bbbd:	pop    rbp
  42bbbe:	ret    
  42bbbf:	nop

000000000042bbc0 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
  42bbc0:	endbr64 
  42bbc4:	push   rbx
  42bbc5:	mov    rbx,rdi
  42bbc8:	call   42bb90 <flatcc_json_printer_get_buffer@@Base>
  42bbcd:	vpxor  xmm0,xmm0,xmm0
  42bbd1:	vmovups XMMWORD PTR [rbx],xmm0
  42bbd5:	vmovups XMMWORD PTR [rbx+0x10],xmm0
  42bbda:	vmovups XMMWORD PTR [rbx+0x20],xmm0
  42bbdf:	vmovups XMMWORD PTR [rbx+0x30],xmm0
  42bbe4:	vmovups XMMWORD PTR [rbx+0x40],xmm0
  42bbe9:	pop    rbx
  42bbea:	ret    
  42bbeb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000042bbf0 <flatcc_json_printer_clear@@Base>:
  42bbf0:	endbr64 
  42bbf4:	push   rbx
  42bbf5:	mov    rbx,rdi
  42bbf8:	cmp    BYTE PTR [rdi+0x30],0x0
  42bbfc:	je     42bc0b <flatcc_json_printer_clear@@Base+0x1b>
  42bbfe:	mov    rdi,QWORD PTR [rdi]
  42bc01:	test   rdi,rdi
  42bc04:	je     42bc0b <flatcc_json_printer_clear@@Base+0x1b>
  42bc06:	call   406160 <free@plt>
  42bc0b:	vpxor  xmm0,xmm0,xmm0
  42bc0f:	vmovups XMMWORD PTR [rbx],xmm0
  42bc13:	vmovups XMMWORD PTR [rbx+0x10],xmm0
  42bc18:	vmovups XMMWORD PTR [rbx+0x20],xmm0
  42bc1d:	vmovups XMMWORD PTR [rbx+0x30],xmm0
  42bc22:	vmovups XMMWORD PTR [rbx+0x40],xmm0
  42bc27:	pop    rbx
  42bc28:	ret    
  42bc29:	nop    DWORD PTR [rax+0x0]

000000000042bc30 <__libc_csu_init@@Base>:
  42bc30:	endbr64 
  42bc34:	push   r15
  42bc36:	lea    r15,[rip+0xe153]        # 439d90 <flatcc_builder_padding_base@@Base+0x9370>
  42bc3d:	push   r14
  42bc3f:	mov    r14,rdx
  42bc42:	push   r13
  42bc44:	mov    r13,rsi
  42bc47:	push   r12
  42bc49:	mov    r12d,edi
  42bc4c:	push   rbp
  42bc4d:	lea    rbp,[rip+0xe144]        # 439d98 <flatcc_builder_padding_base@@Base+0x9378>
  42bc54:	push   rbx
  42bc55:	sub    rbp,r15
  42bc58:	sub    rsp,0x8
  42bc5c:	call   406000 <free@plt-0x160>
  42bc61:	sar    rbp,0x3
  42bc65:	je     42bc86 <__libc_csu_init@@Base+0x56>
  42bc67:	xor    ebx,ebx
  42bc69:	nop    DWORD PTR [rax+0x0]
  42bc70:	mov    rdx,r14
  42bc73:	mov    rsi,r13
  42bc76:	mov    edi,r12d
  42bc79:	call   QWORD PTR [r15+rbx*8]
  42bc7d:	add    rbx,0x1
  42bc81:	cmp    rbp,rbx
  42bc84:	jne    42bc70 <__libc_csu_init@@Base+0x40>
  42bc86:	add    rsp,0x8
  42bc8a:	pop    rbx
  42bc8b:	pop    rbp
  42bc8c:	pop    r12
  42bc8e:	pop    r13
  42bc90:	pop    r14
  42bc92:	pop    r15
  42bc94:	ret    
  42bc95:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000042bca0 <__libc_csu_fini@@Base>:
  42bca0:	endbr64 
  42bca4:	ret    

Disassembly of section .fini:

000000000042bca8 <.fini>:
  42bca8:	endbr64 
  42bcac:	sub    rsp,0x8
  42bcb0:	add    rsp,0x8
  42bcb4:	ret    
