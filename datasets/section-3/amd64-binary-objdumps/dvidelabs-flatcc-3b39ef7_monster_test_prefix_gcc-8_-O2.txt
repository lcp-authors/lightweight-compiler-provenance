
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_prefix/monster_test_prefix:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0xbfe9]        # 40eff8 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0xda>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <.plt>:
  403020:	push   QWORD PTR [rip+0xbfe2]        # 40f008 <flatcc_builder_padding_base@@Base+0x43a8>
  403026:	bnd jmp QWORD PTR [rip+0xbfe3]        # 40f010 <flatcc_builder_padding_base@@Base+0x43b0>
  40302d:	nop    DWORD PTR [rax]
  403030:	endbr64 
  403034:	push   0x0
  403039:	bnd jmp 403020 <free@plt-0xd0>
  40303f:	nop
  403040:	endbr64 
  403044:	push   0x1
  403049:	bnd jmp 403020 <free@plt-0xd0>
  40304f:	nop
  403050:	endbr64 
  403054:	push   0x2
  403059:	bnd jmp 403020 <free@plt-0xd0>
  40305f:	nop
  403060:	endbr64 
  403064:	push   0x3
  403069:	bnd jmp 403020 <free@plt-0xd0>
  40306f:	nop
  403070:	endbr64 
  403074:	push   0x4
  403079:	bnd jmp 403020 <free@plt-0xd0>
  40307f:	nop
  403080:	endbr64 
  403084:	push   0x5
  403089:	bnd jmp 403020 <free@plt-0xd0>
  40308f:	nop
  403090:	endbr64 
  403094:	push   0x6
  403099:	bnd jmp 403020 <free@plt-0xd0>
  40309f:	nop
  4030a0:	endbr64 
  4030a4:	push   0x7
  4030a9:	bnd jmp 403020 <free@plt-0xd0>
  4030af:	nop
  4030b0:	endbr64 
  4030b4:	push   0x8
  4030b9:	bnd jmp 403020 <free@plt-0xd0>
  4030bf:	nop
  4030c0:	endbr64 
  4030c4:	push   0x9
  4030c9:	bnd jmp 403020 <free@plt-0xd0>
  4030cf:	nop
  4030d0:	endbr64 
  4030d4:	push   0xa
  4030d9:	bnd jmp 403020 <free@plt-0xd0>
  4030df:	nop
  4030e0:	endbr64 
  4030e4:	push   0xb
  4030e9:	bnd jmp 403020 <free@plt-0xd0>
  4030ef:	nop

Disassembly of section .plt.sec:

00000000004030f0 <free@plt>:
  4030f0:	endbr64 
  4030f4:	bnd jmp QWORD PTR [rip+0xbf1d]        # 40f018 <free@GLIBC_2.2.5>
  4030fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403100 <strncpy@plt>:
  403100:	endbr64 
  403104:	bnd jmp QWORD PTR [rip+0xbf15]        # 40f020 <strncpy@GLIBC_2.2.5>
  40310b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403110 <strlen@plt>:
  403110:	endbr64 
  403114:	bnd jmp QWORD PTR [rip+0xbf0d]        # 40f028 <strlen@GLIBC_2.2.5>
  40311b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403120 <__stack_chk_fail@plt>:
  403120:	endbr64 
  403124:	bnd jmp QWORD PTR [rip+0xbf05]        # 40f030 <__stack_chk_fail@GLIBC_2.4>
  40312b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403130 <__assert_fail@plt>:
  403130:	endbr64 
  403134:	bnd jmp QWORD PTR [rip+0xbefd]        # 40f038 <__assert_fail@GLIBC_2.2.5>
  40313b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403140 <memset@plt>:
  403140:	endbr64 
  403144:	bnd jmp QWORD PTR [rip+0xbef5]        # 40f040 <memset@GLIBC_2.2.5>
  40314b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403150 <memchr@plt>:
  403150:	endbr64 
  403154:	bnd jmp QWORD PTR [rip+0xbeed]        # 40f048 <memchr@GLIBC_2.2.5>
  40315b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403160 <memcmp@plt>:
  403160:	endbr64 
  403164:	bnd jmp QWORD PTR [rip+0xbee5]        # 40f050 <memcmp@GLIBC_2.2.5>
  40316b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403170 <memcpy@plt>:
  403170:	endbr64 
  403174:	bnd jmp QWORD PTR [rip+0xbedd]        # 40f058 <memcpy@GLIBC_2.14>
  40317b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403180 <malloc@plt>:
  403180:	endbr64 
  403184:	bnd jmp QWORD PTR [rip+0xbed5]        # 40f060 <malloc@GLIBC_2.2.5>
  40318b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403190 <realloc@plt>:
  403190:	endbr64 
  403194:	bnd jmp QWORD PTR [rip+0xbecd]        # 40f068 <realloc@GLIBC_2.2.5>
  40319b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004031a0 <posix_memalign@plt>:
  4031a0:	endbr64 
  4031a4:	bnd jmp QWORD PTR [rip+0xbec5]        # 40f070 <posix_memalign@GLIBC_2.2.5>
  4031ab:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

00000000004031b0 <main@@Base>:
  4031b0:	endbr64 
  4031b4:	push   rbp
  4031b5:	push   rbx
  4031b6:	sub    rsp,0x1a8
  4031bd:	lea    rbx,[rsp+0x10]
  4031c2:	mov    rdi,rbx
  4031c5:	mov    rax,QWORD PTR fs:0x28
  4031ce:	mov    QWORD PTR [rsp+0x198],rax
  4031d6:	xor    eax,eax
  4031d8:	call   4044e0 <flatcc_builder_init@@Base>
  4031dd:	xor    ecx,ecx
  4031df:	xor    edx,edx
  4031e1:	lea    rsi,[rip+0x6e1c]        # 40a004 <_IO_stdin_used@@Base+0x4>
  4031e8:	mov    rdi,rbx
  4031eb:	call   404e90 <flatcc_builder_start_buffer@@Base>
  4031f0:	test   eax,eax
  4031f2:	jne    403201 <main@@Base+0x51>
  4031f4:	mov    esi,0x24
  4031f9:	mov    rdi,rbx
  4031fc:	call   405b30 <flatcc_builder_start_table@@Base>
  403201:	lea    rsi,[rip+0x6e01]        # 40a009 <_IO_stdin_used@@Base+0x9>
  403208:	mov    rdi,rbx
  40320b:	call   407220 <flatcc_builder_create_string_str@@Base>
  403210:	mov    ebp,eax
  403212:	test   eax,eax
  403214:	je     40322a <main@@Base+0x7a>
  403216:	mov    esi,0x3
  40321b:	mov    rdi,rbx
  40321e:	call   407580 <flatcc_builder_table_add_offset@@Base>
  403223:	test   rax,rax
  403226:	je     40322a <main@@Base+0x7a>
  403228:	mov    DWORD PTR [rax],ebp
  40322a:	mov    edx,0x1
  40322f:	lea    rsi,[rip+0x6f3a]        # 40a170 <_IO_stdin_used@@Base+0x170>
  403236:	mov    rdi,rbx
  403239:	call   406420 <flatcc_builder_check_required@@Base>
  40323e:	test   eax,eax
  403240:	je     4032a5 <main@@Base+0xf5>
  403242:	mov    rdi,rbx
  403245:	call   4064b0 <flatcc_builder_end_table@@Base>
  40324a:	mov    esi,eax
  40324c:	mov    rdi,rbx
  40324f:	call   404f70 <flatcc_builder_end_buffer@@Base>
  403254:	lea    rsi,[rsp+0x8]
  403259:	mov    rdi,rbx
  40325c:	call   407a50 <flatcc_builder_get_direct_buffer@@Base>
  403261:	mov    rsi,QWORD PTR [rsp+0x8]
  403266:	lea    rcx,[rip+0x3f3]        # 403660 <_start@@Base+0x390>
  40326d:	lea    rdx,[rip+0x6d90]        # 40a004 <_IO_stdin_used@@Base+0x4>
  403274:	mov    rdi,rax
  403277:	call   4092c0 <flatcc_verify_table_as_root@@Base>
  40327c:	mov    rdi,rbx
  40327f:	mov    ebp,eax
  403281:	call   4046a0 <flatcc_builder_clear@@Base>
  403286:	mov    rcx,QWORD PTR [rsp+0x198]
  40328e:	xor    rcx,QWORD PTR fs:0x28
  403297:	mov    eax,ebp
  403299:	jne    4032c4 <main@@Base+0x114>
  40329b:	add    rsp,0x1a8
  4032a2:	pop    rbx
  4032a3:	pop    rbp
  4032a4:	ret    
  4032a5:	lea    rcx,[rip+0x6ea4]        # 40a150 <_IO_stdin_used@@Base+0x150>
  4032ac:	mov    edx,0x95e
  4032b1:	lea    rsi,[rip+0x6d60]        # 40a018 <_IO_stdin_used@@Base+0x18>
  4032b8:	lea    rdi,[rip+0x6dd9]        # 40a098 <_IO_stdin_used@@Base+0x98>
  4032bf:	call   403130 <__assert_fail@plt>
  4032c4:	call   403120 <__stack_chk_fail@plt>
  4032c9:	nop    DWORD PTR [rax+0x0]

00000000004032d0 <_start@@Base>:
  4032d0:	endbr64 
  4032d4:	xor    ebp,ebp
  4032d6:	mov    r9,rdx
  4032d9:	pop    rsi
  4032da:	mov    rdx,rsp
  4032dd:	and    rsp,0xfffffffffffffff0
  4032e1:	push   rax
  4032e2:	push   rsp
  4032e3:	mov    r8,0x409d30
  4032ea:	mov    rcx,0x409cc0
  4032f1:	mov    rdi,0x4031b0
  4032f8:	call   QWORD PTR [rip+0xbcf2]        # 40eff0 <__libc_start_main@GLIBC_2.2.5>
  4032fe:	hlt    
  4032ff:	nop
  403300:	endbr64 
  403304:	ret    
  403305:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40330f:	nop
  403310:	mov    eax,0x40f088
  403315:	cmp    rax,0x40f088
  40331b:	je     403330 <_start@@Base+0x60>
  40331d:	mov    eax,0x0
  403322:	test   rax,rax
  403325:	je     403330 <_start@@Base+0x60>
  403327:	mov    edi,0x40f088
  40332c:	jmp    rax
  40332e:	xchg   ax,ax
  403330:	ret    
  403331:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40333c:	nop    DWORD PTR [rax+0x0]
  403340:	mov    esi,0x40f088
  403345:	sub    rsi,0x40f088
  40334c:	sar    rsi,0x3
  403350:	mov    rax,rsi
  403353:	shr    rax,0x3f
  403357:	add    rsi,rax
  40335a:	sar    rsi,1
  40335d:	je     403370 <_start@@Base+0xa0>
  40335f:	mov    eax,0x0
  403364:	test   rax,rax
  403367:	je     403370 <_start@@Base+0xa0>
  403369:	mov    edi,0x40f088
  40336e:	jmp    rax
  403370:	ret    
  403371:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40337c:	nop    DWORD PTR [rax+0x0]
  403380:	endbr64 
  403384:	cmp    BYTE PTR [rip+0xbcfd],0x0        # 40f088 <__bss_start@@Base>
  40338b:	jne    4033a0 <_start@@Base+0xd0>
  40338d:	push   rbp
  40338e:	mov    rbp,rsp
  403391:	call   403310 <_start@@Base+0x40>
  403396:	mov    BYTE PTR [rip+0xbceb],0x1        # 40f088 <__bss_start@@Base>
  40339d:	pop    rbp
  40339e:	ret    
  40339f:	nop
  4033a0:	ret    
  4033a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4033ac:	nop    DWORD PTR [rax+0x0]
  4033b0:	endbr64 
  4033b4:	jmp    403340 <_start@@Base+0x70>
  4033b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4033c0:	endbr64 
  4033c4:	xor    eax,eax
  4033c6:	ret    
  4033c7:	nop    WORD PTR [rax+rax*1+0x0]
  4033d0:	endbr64 
  4033d4:	mov    ecx,0x4
  4033d9:	mov    edx,0x4
  4033de:	xor    esi,esi
  4033e0:	jmp    408670 <flatcc_verify_field@@Base>
  4033e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4033f0:	endbr64 
  4033f4:	push   rbx
  4033f5:	xor    esi,esi
  4033f7:	mov    ecx,0x8
  4033fc:	mov    edx,0x8
  403401:	mov    rbx,rdi
  403404:	call   408670 <flatcc_verify_field@@Base>
  403409:	test   eax,eax
  40340b:	je     403410 <_start@@Base+0x140>
  40340d:	pop    rbx
  40340e:	ret    
  40340f:	nop
  403410:	mov    rdi,rbx
  403413:	mov    ecx,0x4
  403418:	mov    edx,0x4
  40341d:	mov    esi,0x1
  403422:	pop    rbx
  403423:	jmp    408670 <flatcc_verify_field@@Base>
  403428:	nop    DWORD PTR [rax+rax*1+0x0]
  403430:	endbr64 
  403434:	push   rbx
  403435:	xor    esi,esi
  403437:	mov    ecx,0x1
  40343c:	mov    edx,0x1
  403441:	mov    rbx,rdi
  403444:	call   408670 <flatcc_verify_field@@Base>
  403449:	test   eax,eax
  40344b:	je     403450 <_start@@Base+0x180>
  40344d:	pop    rbx
  40344e:	ret    
  40344f:	nop
  403450:	mov    ecx,0x1
  403455:	mov    edx,0x1
  40345a:	mov    esi,0x1
  40345f:	mov    rdi,rbx
  403462:	call   408670 <flatcc_verify_field@@Base>
  403467:	test   eax,eax
  403469:	jne    40344d <_start@@Base+0x17d>
  40346b:	mov    ecx,0x1
  403470:	mov    edx,0x1
  403475:	mov    esi,0x2
  40347a:	mov    rdi,rbx
  40347d:	call   408670 <flatcc_verify_field@@Base>
  403482:	test   eax,eax
  403484:	jne    40344d <_start@@Base+0x17d>
  403486:	mov    rdi,rbx
  403489:	mov    ecx,0x1
  40348e:	mov    edx,0x1
  403493:	mov    esi,0x3
  403498:	pop    rbx
  403499:	jmp    408670 <flatcc_verify_field@@Base>
  40349e:	xchg   ax,ax
  4034a0:	endbr64 
  4034a4:	push   rbx
  4034a5:	xor    edx,edx
  4034a7:	xor    esi,esi
  4034a9:	mov    rbx,rdi
  4034ac:	call   4086c0 <flatcc_verify_string_field@@Base>
  4034b1:	test   eax,eax
  4034b3:	je     4034c0 <_start@@Base+0x1f0>
  4034b5:	pop    rbx
  4034b6:	ret    
  4034b7:	nop    WORD PTR [rax+rax*1+0x0]
  4034c0:	mov    ecx,0x8
  4034c5:	mov    edx,0x8
  4034ca:	mov    esi,0x1
  4034cf:	mov    rdi,rbx
  4034d2:	call   408670 <flatcc_verify_field@@Base>
  4034d7:	test   eax,eax
  4034d9:	jne    4034b5 <_start@@Base+0x1e5>
  4034db:	mov    rdi,rbx
  4034de:	mov    ecx,0x2
  4034e3:	mov    edx,0x2
  4034e8:	mov    esi,0x2
  4034ed:	pop    rbx
  4034ee:	jmp    408670 <flatcc_verify_field@@Base>
  4034f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4034fe:	xchg   ax,ax
  403500:	endbr64 
  403504:	push   rbx
  403505:	xor    edx,edx
  403507:	xor    esi,esi
  403509:	mov    rbx,rdi
  40350c:	call   4086c0 <flatcc_verify_string_field@@Base>
  403511:	test   eax,eax
  403513:	je     403520 <_start@@Base+0x250>
  403515:	pop    rbx
  403516:	ret    
  403517:	nop    WORD PTR [rax+rax*1+0x0]
  403520:	mov    ecx,0x4
  403525:	mov    edx,0x4
  40352a:	mov    esi,0x1
  40352f:	mov    rdi,rbx
  403532:	call   408670 <flatcc_verify_field@@Base>
  403537:	test   eax,eax
  403539:	jne    403515 <_start@@Base+0x245>
  40353b:	xor    edx,edx
  40353d:	mov    esi,0x2
  403542:	mov    rdi,rbx
  403545:	call   4086c0 <flatcc_verify_string_field@@Base>
  40354a:	test   eax,eax
  40354c:	jne    403515 <_start@@Base+0x245>
  40354e:	mov    ecx,0x8
  403553:	mov    edx,0x8
  403558:	mov    esi,0x3
  40355d:	mov    rdi,rbx
  403560:	call   408670 <flatcc_verify_field@@Base>
  403565:	test   eax,eax
  403567:	jne    403515 <_start@@Base+0x245>
  403569:	xor    edx,edx
  40356b:	mov    esi,0x4
  403570:	mov    rdi,rbx
  403573:	call   4086c0 <flatcc_verify_string_field@@Base>
  403578:	test   eax,eax
  40357a:	jne    403515 <_start@@Base+0x245>
  40357c:	mov    ecx,0x8
  403581:	mov    edx,0x8
  403586:	mov    esi,0x5
  40358b:	mov    rdi,rbx
  40358e:	call   408670 <flatcc_verify_field@@Base>
  403593:	test   eax,eax
  403595:	jne    403515 <_start@@Base+0x245>
  40359b:	mov    ecx,0x4
  4035a0:	mov    edx,0x4
  4035a5:	mov    esi,0x6
  4035aa:	mov    rdi,rbx
  4035ad:	call   408670 <flatcc_verify_field@@Base>
  4035b2:	test   eax,eax
  4035b4:	jne    403515 <_start@@Base+0x245>
  4035ba:	mov    ecx,0x8
  4035bf:	mov    edx,0x8
  4035c4:	mov    esi,0x7
  4035c9:	mov    rdi,rbx
  4035cc:	call   408670 <flatcc_verify_field@@Base>
  4035d1:	test   eax,eax
  4035d3:	jne    403515 <_start@@Base+0x245>
  4035d9:	mov    rdi,rbx
  4035dc:	mov    ecx,0x4
  4035e1:	mov    edx,0x4
  4035e6:	mov    esi,0x8
  4035eb:	pop    rbx
  4035ec:	jmp    408670 <flatcc_verify_field@@Base>
  4035f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4035fc:	nop    DWORD PTR [rax+0x0]
  403600:	endbr64 
  403604:	push   rbx
  403605:	xor    edx,edx
  403607:	xor    esi,esi
  403609:	lea    rcx,[rip+0xfffffffffffffef0]        # 403500 <_start@@Base+0x230>
  403610:	mov    rbx,rdi
  403613:	call   408a00 <flatcc_verify_table_field@@Base>
  403618:	test   eax,eax
  40361a:	je     403620 <_start@@Base+0x350>
  40361c:	pop    rbx
  40361d:	ret    
  40361e:	xchg   ax,ax
  403620:	xor    edx,edx
  403622:	lea    rcx,[rip+0x6d7]        # 403d00 <_start@@Base+0xa30>
  403629:	mov    esi,0x1
  40362e:	mov    rdi,rbx
  403631:	call   408a00 <flatcc_verify_table_field@@Base>
  403636:	test   eax,eax
  403638:	jne    40361c <_start@@Base+0x34c>
  40363a:	mov    rdi,rbx
  40363d:	lea    rcx,[rip+0xfffffffffffffdac]        # 4033f0 <_start@@Base+0x120>
  403644:	xor    edx,edx
  403646:	mov    esi,0x2
  40364b:	pop    rbx
  40364c:	jmp    408a00 <flatcc_verify_table_field@@Base>
  403651:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40365c:	nop    DWORD PTR [rax+0x0]
  403660:	endbr64 
  403664:	push   rbx
  403665:	xor    esi,esi
  403667:	mov    ecx,0x10
  40366c:	mov    edx,0x20
  403671:	mov    rbx,rdi
  403674:	call   408670 <flatcc_verify_field@@Base>
  403679:	test   eax,eax
  40367b:	je     403680 <_start@@Base+0x3b0>
  40367d:	pop    rbx
  40367e:	ret    
  40367f:	nop
  403680:	mov    ecx,0x2
  403685:	mov    edx,0x2
  40368a:	mov    esi,0x2
  40368f:	mov    rdi,rbx
  403692:	call   408670 <flatcc_verify_field@@Base>
  403697:	test   eax,eax
  403699:	jne    40367d <_start@@Base+0x3ad>
  40369b:	mov    ecx,0x2
  4036a0:	mov    edx,0x2
  4036a5:	mov    esi,0x1
  4036aa:	mov    rdi,rbx
  4036ad:	call   408670 <flatcc_verify_field@@Base>
  4036b2:	test   eax,eax
  4036b4:	jne    40367d <_start@@Base+0x3ad>
  4036b6:	mov    edx,0x1
  4036bb:	mov    esi,0x3
  4036c0:	mov    rdi,rbx
  4036c3:	call   4086c0 <flatcc_verify_string_field@@Base>
  4036c8:	test   eax,eax
  4036ca:	jne    40367d <_start@@Base+0x3ad>
  4036cc:	mov    ecx,0x1
  4036d1:	mov    edx,0x1
  4036d6:	mov    esi,0x6
  4036db:	mov    rdi,rbx
  4036de:	call   408670 <flatcc_verify_field@@Base>
  4036e3:	test   eax,eax
  4036e5:	jne    40367d <_start@@Base+0x3ad>
  4036e7:	xor    edx,edx
  4036e9:	mov    r9d,0xffffffff
  4036ef:	mov    r8d,0x1
  4036f5:	mov    ecx,0x1
  4036fa:	mov    esi,0x5
  4036ff:	mov    rdi,rbx
  403702:	call   408770 <flatcc_verify_vector_field@@Base>
  403707:	test   eax,eax
  403709:	jne    40367d <_start@@Base+0x3ad>
  40370f:	xor    edx,edx
  403711:	lea    rcx,[rip+0xffffffffffffff48]        # 403660 <_start@@Base+0x390>
  403718:	mov    esi,0xb
  40371d:	mov    rdi,rbx
  403720:	call   408b80 <flatcc_verify_table_vector_field@@Base>
  403725:	test   eax,eax
  403727:	jne    40367d <_start@@Base+0x3ad>
  40372d:	xor    edx,edx
  40372f:	mov    esi,0xa
  403734:	mov    rdi,rbx
  403737:	call   408840 <flatcc_verify_string_vector_field@@Base>
  40373c:	test   eax,eax
  40373e:	jne    40367d <_start@@Base+0x3ad>
  403744:	xor    edx,edx
  403746:	mov    esi,0x1c
  40374b:	mov    rdi,rbx
  40374e:	call   408840 <flatcc_verify_string_vector_field@@Base>
  403753:	test   eax,eax
  403755:	jne    40367d <_start@@Base+0x3ad>
  40375b:	xor    edx,edx
  40375d:	mov    r9d,0xffffffff
  403763:	mov    r8d,0x1
  403769:	mov    ecx,0x1
  40376e:	mov    esi,0x18
  403773:	mov    rdi,rbx
  403776:	call   408770 <flatcc_verify_vector_field@@Base>
  40377b:	test   eax,eax
  40377d:	jne    40367d <_start@@Base+0x3ad>
  403783:	xor    edx,edx
  403785:	mov    r9d,0x1fffffff
  40378b:	mov    r8d,0x4
  403791:	mov    ecx,0x8
  403796:	mov    esi,0x1d
  40379b:	mov    rdi,rbx
  40379e:	call   408770 <flatcc_verify_vector_field@@Base>
  4037a3:	test   eax,eax
  4037a5:	jne    40367d <_start@@Base+0x3ad>
  4037ab:	xor    edx,edx
  4037ad:	lea    rcx,[rip+0xfffffffffffffeac]        # 403660 <_start@@Base+0x390>
  4037b4:	mov    esi,0xc
  4037b9:	mov    rdi,rbx
  4037bc:	call   408a00 <flatcc_verify_table_field@@Base>
  4037c1:	test   eax,eax
  4037c3:	jne    40367d <_start@@Base+0x3ad>
  4037c9:	xor    edx,edx
  4037cb:	lea    rcx,[rip+0x34e]        # 403b20 <_start@@Base+0x850>
  4037d2:	mov    esi,0x8
  4037d7:	mov    rdi,rbx
  4037da:	call   409820 <flatcc_verify_union_field@@Base>
  4037df:	test   eax,eax
  4037e1:	jne    40367d <_start@@Base+0x3ad>
  4037e7:	xor    edx,edx
  4037e9:	mov    r9d,0x3fffffff
  4037ef:	mov    r8d,0x2
  4037f5:	mov    ecx,0x4
  4037fa:	mov    esi,0x9
  4037ff:	mov    rdi,rbx
  403802:	call   408770 <flatcc_verify_vector_field@@Base>
  403807:	test   eax,eax
  403809:	jne    40367d <_start@@Base+0x3ad>
  40380f:	xor    edx,edx
  403811:	mov    r9d,0x3fffffff
  403817:	mov    r8d,0x2
  40381d:	mov    ecx,0x4
  403822:	mov    esi,0x1f
  403827:	mov    rdi,rbx
  40382a:	call   408770 <flatcc_verify_vector_field@@Base>
  40382f:	test   eax,eax
  403831:	jne    40367d <_start@@Base+0x3ad>
  403837:	xor    ecx,ecx
  403839:	xor    edx,edx
  40383b:	lea    r9,[rip+0xfffffffffffffe1e]        # 403660 <_start@@Base+0x390>
  403842:	mov    r8d,0x1
  403848:	mov    esi,0xd
  40384d:	mov    rdi,rbx
  403850:	call   409640 <flatcc_verify_table_as_nested_root@@Base>
  403855:	test   eax,eax
  403857:	jne    40367d <_start@@Base+0x3ad>
  40385d:	xor    edx,edx
  40385f:	lea    rcx,[rip+0xfffffffffffffc3a]        # 4034a0 <_start@@Base+0x1d0>
  403866:	mov    esi,0xe
  40386b:	mov    rdi,rbx
  40386e:	call   408a00 <flatcc_verify_table_field@@Base>
  403873:	test   eax,eax
  403875:	jne    40367d <_start@@Base+0x3ad>
  40387b:	mov    ecx,0x1
  403880:	mov    edx,0x1
  403885:	mov    esi,0xf
  40388a:	mov    rdi,rbx
  40388d:	call   408670 <flatcc_verify_field@@Base>
  403892:	test   eax,eax
  403894:	jne    40367d <_start@@Base+0x3ad>
  40389a:	mov    ecx,0x4
  40389f:	mov    edx,0x4
  4038a4:	mov    esi,0x10
  4038a9:	mov    rdi,rbx
  4038ac:	call   408670 <flatcc_verify_field@@Base>
  4038b1:	test   eax,eax
  4038b3:	jne    40367d <_start@@Base+0x3ad>
  4038b9:	mov    ecx,0x4
  4038be:	mov    edx,0x4
  4038c3:	mov    esi,0x11
  4038c8:	mov    rdi,rbx
  4038cb:	call   408670 <flatcc_verify_field@@Base>
  4038d0:	test   eax,eax
  4038d2:	jne    40367d <_start@@Base+0x3ad>
  4038d8:	mov    ecx,0x8
  4038dd:	mov    edx,0x8
  4038e2:	mov    esi,0x12
  4038e7:	mov    rdi,rbx
  4038ea:	call   408670 <flatcc_verify_field@@Base>
  4038ef:	test   eax,eax
  4038f1:	jne    40367d <_start@@Base+0x3ad>
  4038f7:	mov    ecx,0x8
  4038fc:	mov    edx,0x8
  403901:	mov    esi,0x13
  403906:	mov    rdi,rbx
  403909:	call   408670 <flatcc_verify_field@@Base>
  40390e:	test   eax,eax
  403910:	jne    40367d <_start@@Base+0x3ad>
  403916:	mov    ecx,0x4
  40391b:	mov    edx,0x4
  403920:	mov    esi,0x14
  403925:	mov    rdi,rbx
  403928:	call   408670 <flatcc_verify_field@@Base>
  40392d:	test   eax,eax
  40392f:	jne    40367d <_start@@Base+0x3ad>
  403935:	mov    ecx,0x4
  40393a:	mov    edx,0x4
  40393f:	mov    esi,0x15
  403944:	mov    rdi,rbx
  403947:	call   408670 <flatcc_verify_field@@Base>
  40394c:	test   eax,eax
  40394e:	jne    40367d <_start@@Base+0x3ad>
  403954:	mov    ecx,0x8
  403959:	mov    edx,0x8
  40395e:	mov    esi,0x16
  403963:	mov    rdi,rbx
  403966:	call   408670 <flatcc_verify_field@@Base>
  40396b:	test   eax,eax
  40396d:	jne    40367d <_start@@Base+0x3ad>
  403973:	mov    ecx,0x8
  403978:	mov    edx,0x8
  40397d:	mov    esi,0x17
  403982:	mov    rdi,rbx
  403985:	call   408670 <flatcc_verify_field@@Base>
  40398a:	test   eax,eax
  40398c:	jne    40367d <_start@@Base+0x3ad>
  403992:	mov    ecx,0x4
  403997:	mov    edx,0x4
  40399c:	mov    esi,0x19
  4039a1:	mov    rdi,rbx
  4039a4:	call   408670 <flatcc_verify_field@@Base>
  4039a9:	test   eax,eax
  4039ab:	jne    40367d <_start@@Base+0x3ad>
  4039b1:	mov    ecx,0x4
  4039b6:	mov    edx,0x4
  4039bb:	mov    esi,0x1a
  4039c0:	mov    rdi,rbx
  4039c3:	call   408670 <flatcc_verify_field@@Base>
  4039c8:	test   eax,eax
  4039ca:	jne    40367d <_start@@Base+0x3ad>
  4039d0:	mov    ecx,0x4
  4039d5:	mov    edx,0x4
  4039da:	mov    esi,0x1b
  4039df:	mov    rdi,rbx
  4039e2:	call   408670 <flatcc_verify_field@@Base>
  4039e7:	test   eax,eax
  4039e9:	jne    40367d <_start@@Base+0x3ad>
  4039ef:	xor    edx,edx
  4039f1:	mov    r9d,0xffffffff
  4039f7:	mov    r8d,0x1
  4039fd:	mov    ecx,0x1
  403a02:	mov    esi,0x1e
  403a07:	mov    rdi,rbx
  403a0a:	call   408770 <flatcc_verify_vector_field@@Base>
  403a0f:	test   eax,eax
  403a11:	jne    40367d <_start@@Base+0x3ad>
  403a17:	xor    edx,edx
  403a19:	mov    r9d,0x1fffffff
  403a1f:	mov    r8d,0x8
  403a25:	mov    ecx,0x8
  403a2a:	mov    esi,0x20
  403a2f:	mov    rdi,rbx
  403a32:	call   408770 <flatcc_verify_vector_field@@Base>
  403a37:	test   eax,eax
  403a39:	jne    40367d <_start@@Base+0x3ad>
  403a3f:	xor    edx,edx
  403a41:	mov    r9d,0x1fffffff
  403a47:	mov    r8d,0x8
  403a4d:	mov    ecx,0x8
  403a52:	mov    esi,0x21
  403a57:	mov    rdi,rbx
  403a5a:	call   408770 <flatcc_verify_vector_field@@Base>
  403a5f:	test   eax,eax
  403a61:	jne    40367d <_start@@Base+0x3ad>
  403a67:	xor    edx,edx
  403a69:	lea    rcx,[rip+0xfffffffffffff950]        # 4033c0 <_start@@Base+0xf0>
  403a70:	mov    esi,0x22
  403a75:	mov    rdi,rbx
  403a78:	call   408a00 <flatcc_verify_table_field@@Base>
  403a7d:	test   eax,eax
  403a7f:	jne    40367d <_start@@Base+0x3ad>
  403a85:	mov    rdi,rbx
  403a88:	lea    rcx,[rip+0x11]        # 403aa0 <_start@@Base+0x7d0>
  403a8f:	xor    edx,edx
  403a91:	mov    esi,0x23
  403a96:	pop    rbx
  403a97:	jmp    408a00 <flatcc_verify_table_field@@Base>
  403a9c:	nop    DWORD PTR [rax+0x0]
  403aa0:	endbr64 
  403aa4:	push   rbx
  403aa5:	xor    edx,edx
  403aa7:	xor    esi,esi
  403aa9:	mov    r9d,0xffffffff
  403aaf:	mov    r8d,0x1
  403ab5:	mov    ecx,0x1
  403aba:	mov    rbx,rdi
  403abd:	call   408770 <flatcc_verify_vector_field@@Base>
  403ac2:	test   eax,eax
  403ac4:	je     403ad0 <_start@@Base+0x800>
  403ac6:	pop    rbx
  403ac7:	ret    
  403ac8:	nop    DWORD PTR [rax+rax*1+0x0]
  403ad0:	xor    edx,edx
  403ad2:	mov    r9d,0xffffffff
  403ad8:	mov    r8d,0x1
  403ade:	mov    ecx,0x1
  403ae3:	mov    esi,0x1
  403ae8:	mov    rdi,rbx
  403aeb:	call   408770 <flatcc_verify_vector_field@@Base>
  403af0:	test   eax,eax
  403af2:	jne    403ac6 <_start@@Base+0x7f6>
  403af4:	mov    rdi,rbx
  403af7:	lea    r9,[rip+0xfffffffffffffb62]        # 403660 <_start@@Base+0x390>
  403afe:	mov    r8d,0x1
  403b04:	xor    ecx,ecx
  403b06:	xor    edx,edx
  403b08:	mov    esi,0x2
  403b0d:	pop    rbx
  403b0e:	jmp    409640 <flatcc_verify_table_as_nested_root@@Base>
  403b13:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403b1e:	xchg   ax,ax
  403b20:	endbr64 
  403b24:	movzx  eax,BYTE PTR [rdi+0x10]
  403b28:	cmp    al,0x2
  403b2a:	je     403b60 <_start@@Base+0x890>
  403b2c:	jbe    403b48 <_start@@Base+0x878>
  403b2e:	cmp    al,0x3
  403b30:	je     403b70 <_start@@Base+0x8a0>
  403b32:	cmp    al,0x4
  403b34:	jne    403b80 <_start@@Base+0x8b0>
  403b36:	lea    rsi,[rip+0x53]        # 403b90 <_start@@Base+0x8c0>
  403b3d:	jmp    408ee0 <flatcc_verify_union_table@@Base>
  403b42:	nop    WORD PTR [rax+rax*1+0x0]
  403b48:	cmp    al,0x1
  403b4a:	jne    403b80 <_start@@Base+0x8b0>
  403b4c:	lea    rsi,[rip+0xfffffffffffffb0d]        # 403660 <_start@@Base+0x390>
  403b53:	jmp    408ee0 <flatcc_verify_union_table@@Base>
  403b58:	nop    DWORD PTR [rax+rax*1+0x0]
  403b60:	lea    rsi,[rip+0xfffffffffffff8c9]        # 403430 <_start@@Base+0x160>
  403b67:	jmp    408ee0 <flatcc_verify_union_table@@Base>
  403b6c:	nop    DWORD PTR [rax+0x0]
  403b70:	lea    rsi,[rip+0x179]        # 403cf0 <_start@@Base+0xa20>
  403b77:	jmp    408ee0 <flatcc_verify_union_table@@Base>
  403b7c:	nop    DWORD PTR [rax+0x0]
  403b80:	xor    eax,eax
  403b82:	ret    
  403b83:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403b8e:	xchg   ax,ax
  403b90:	endbr64 
  403b94:	push   rbx
  403b95:	xor    edx,edx
  403b97:	xor    esi,esi
  403b99:	lea    rcx,[rip+0xfffffffffffffa60]        # 403600 <_start@@Base+0x330>
  403ba0:	mov    rbx,rdi
  403ba3:	call   408a00 <flatcc_verify_table_field@@Base>
  403ba8:	test   eax,eax
  403baa:	je     403bb0 <_start@@Base+0x8e0>
  403bac:	pop    rbx
  403bad:	ret    
  403bae:	xchg   ax,ax
  403bb0:	xor    edx,edx
  403bb2:	lea    rcx,[rip+0x37]        # 403bf0 <_start@@Base+0x920>
  403bb9:	mov    esi,0x1
  403bbe:	mov    rdi,rbx
  403bc1:	call   408a00 <flatcc_verify_table_field@@Base>
  403bc6:	test   eax,eax
  403bc8:	jne    403bac <_start@@Base+0x8dc>
  403bca:	mov    rdi,rbx
  403bcd:	lea    rcx,[rip+0xffffffffffffff4c]        # 403b20 <_start@@Base+0x850>
  403bd4:	xor    edx,edx
  403bd6:	mov    esi,0x3
  403bdb:	pop    rbx
  403bdc:	jmp    409990 <flatcc_verify_union_vector_field@@Base>
  403be1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403bec:	nop    DWORD PTR [rax+0x0]
  403bf0:	endbr64 
  403bf4:	push   rbx
  403bf5:	xor    edx,edx
  403bf7:	lea    rcx,[rip+0x82]        # 403c80 <_start@@Base+0x9b0>
  403bfe:	mov    esi,0x1
  403c03:	mov    rbx,rdi
  403c06:	call   409820 <flatcc_verify_union_field@@Base>
  403c0b:	test   eax,eax
  403c0d:	je     403c18 <_start@@Base+0x948>
  403c0f:	pop    rbx
  403c10:	ret    
  403c11:	nop    DWORD PTR [rax+0x0]
  403c18:	xor    edx,edx
  403c1a:	lea    rcx,[rip+0x5f]        # 403c80 <_start@@Base+0x9b0>
  403c21:	mov    esi,0x3
  403c26:	mov    rdi,rbx
  403c29:	call   409820 <flatcc_verify_union_field@@Base>
  403c2e:	test   eax,eax
  403c30:	jne    403c0f <_start@@Base+0x93f>
  403c32:	xor    edx,edx
  403c34:	lea    rcx,[rip+0x45]        # 403c80 <_start@@Base+0x9b0>
  403c3b:	mov    esi,0x5
  403c40:	mov    rdi,rbx
  403c43:	call   409820 <flatcc_verify_union_field@@Base>
  403c48:	test   eax,eax
  403c4a:	jne    403c0f <_start@@Base+0x93f>
  403c4c:	xor    edx,edx
  403c4e:	lea    rcx,[rip+0x2b]        # 403c80 <_start@@Base+0x9b0>
  403c55:	mov    esi,0x7
  403c5a:	mov    rdi,rbx
  403c5d:	call   409820 <flatcc_verify_union_field@@Base>
  403c62:	test   eax,eax
  403c64:	jne    403c0f <_start@@Base+0x93f>
  403c66:	mov    rdi,rbx
  403c69:	lea    rcx,[rip+0x10]        # 403c80 <_start@@Base+0x9b0>
  403c70:	xor    edx,edx
  403c72:	mov    esi,0x9
  403c77:	pop    rbx
  403c78:	jmp    409990 <flatcc_verify_union_vector_field@@Base>
  403c7d:	nop    DWORD PTR [rax]
  403c80:	endbr64 
  403c84:	movzx  eax,BYTE PTR [rdi+0x10]
  403c88:	cmp    al,0xa
  403c8a:	ja     403cb0 <_start@@Base+0x9e0>
  403c8c:	cmp    al,0x9
  403c8e:	jae    403cc0 <_start@@Base+0x9f0>
  403c90:	cmp    al,0x2
  403c92:	je     403cd8 <_start@@Base+0xa08>
  403c94:	cmp    al,0x8
  403c96:	jne    403cd0 <_start@@Base+0xa00>
  403c98:	mov    edx,0x2
  403c9d:	mov    esi,0x2
  403ca2:	jmp    409000 <flatcc_verify_union_struct@@Base>
  403ca7:	nop    WORD PTR [rax+rax*1+0x0]
  403cb0:	cmp    al,0xb
  403cb2:	je     403cb8 <_start@@Base+0x9e8>
  403cb4:	cmp    al,0xff
  403cb6:	jne    403cd0 <_start@@Base+0xa00>
  403cb8:	jmp    409050 <flatcc_verify_union_string@@Base>
  403cbd:	nop    DWORD PTR [rax]
  403cc0:	mov    edx,0x4
  403cc5:	mov    esi,0x4
  403cca:	jmp    409000 <flatcc_verify_union_struct@@Base>
  403ccf:	nop
  403cd0:	xor    eax,eax
  403cd2:	ret    
  403cd3:	nop    DWORD PTR [rax+rax*1+0x0]
  403cd8:	lea    rsi,[rip+0xfffffffffffff6f1]        # 4033d0 <_start@@Base+0x100>
  403cdf:	jmp    408ee0 <flatcc_verify_union_table@@Base>
  403ce4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403cef:	nop
  403cf0:	endbr64 
  403cf4:	xor    eax,eax
  403cf6:	ret    
  403cf7:	nop    WORD PTR [rax+rax*1+0x0]
  403d00:	endbr64 
  403d04:	push   rbx
  403d05:	xor    esi,esi
  403d07:	mov    ecx,0x8
  403d0c:	mov    edx,0x8
  403d11:	mov    rbx,rdi
  403d14:	call   408670 <flatcc_verify_field@@Base>
  403d19:	test   eax,eax
  403d1b:	je     403d20 <_start@@Base+0xa50>
  403d1d:	pop    rbx
  403d1e:	ret    
  403d1f:	nop
  403d20:	mov    rdi,rbx
  403d23:	mov    ecx,0x4
  403d28:	mov    edx,0x4
  403d2d:	mov    esi,0x1
  403d32:	pop    rbx
  403d33:	jmp    408670 <flatcc_verify_field@@Base>
  403d38:	nop    DWORD PTR [rax+rax*1+0x0]
  403d40:	push   rbp
  403d41:	mov    ebp,edx
  403d43:	mov    r8d,0x1
  403d49:	push   rbx
  403d4a:	mov    rbx,rdi
  403d4d:	mov    ecx,0x1
  403d52:	sub    rsp,0x8
  403d56:	mov    edx,DWORD PTR [rdi+0x28]
  403d59:	add    rdx,rsi
  403d5c:	lea    rsi,[rdi+0x68]
  403d60:	mov    rdi,QWORD PTR [rdi+0x40]
  403d64:	call   QWORD PTR [rbx+0x50]
  403d67:	test   eax,eax
  403d69:	jne    403d98 <_start@@Base+0xac8>
  403d6b:	mov    edx,DWORD PTR [rbx+0x28]
  403d6e:	mov    rcx,rdx
  403d71:	add    rdx,QWORD PTR [rbx+0x68]
  403d75:	mov    QWORD PTR [rbx+0x18],rdx
  403d79:	mov    edx,DWORD PTR [rbx+0x70]
  403d7c:	sub    edx,ecx
  403d7e:	cmp    ebp,edx
  403d80:	cmovb  edx,ebp
  403d83:	mov    DWORD PTR [rbx+0x24],edx
  403d86:	mov    rdx,QWORD PTR [rbx+0x30]
  403d8a:	mov    DWORD PTR [rdx+0x4],ebp
  403d8d:	add    rsp,0x8
  403d91:	pop    rbx
  403d92:	pop    rbp
  403d93:	ret    
  403d94:	nop    DWORD PTR [rax+0x0]
  403d98:	mov    eax,0xffffffff
  403d9d:	jmp    403d8d <_start@@Base+0xabd>
  403d9f:	nop

0000000000403da0 <flatcc_builder_default_alloc@@Base>:
  403da0:	endbr64 
  403da4:	push   r13
  403da6:	push   r12
  403da8:	push   rbp
  403da9:	mov    rbp,rsi
  403dac:	push   rbx
  403dad:	sub    rsp,0x18
  403db1:	test   rdx,rdx
  403db4:	je     403e78 <flatcc_builder_default_alloc@@Base+0xd8>
  403dba:	mov    r13d,ecx
  403dbd:	cmp    r8d,0x4
  403dc1:	je     403eb0 <flatcc_builder_default_alloc@@Base+0x110>
  403dc7:	jle    403e40 <flatcc_builder_default_alloc@@Base+0xa0>
  403dc9:	mov    rbx,rdx
  403dcc:	cmp    r8d,0x5
  403dd0:	je     403df8 <flatcc_builder_default_alloc@@Base+0x58>
  403dd2:	cmp    r8d,0x7
  403dd6:	mov    ebx,0x40
  403ddb:	mov    eax,0x20
  403de0:	cmovne rbx,rax
  403de4:	cmp    rbx,rdx
  403de7:	jae    403df8 <flatcc_builder_default_alloc@@Base+0x58>
  403de9:	nop    DWORD PTR [rax+0x0]
  403df0:	add    rbx,rbx
  403df3:	cmp    rdx,rbx
  403df6:	ja     403df0 <flatcc_builder_default_alloc@@Base+0x50>
  403df8:	mov    rax,QWORD PTR [rbp+0x8]
  403dfc:	cmp    rdx,rax
  403dff:	ja     403e0e <flatcc_builder_default_alloc@@Base+0x6e>
  403e01:	shr    rax,1
  403e04:	mov    rdx,rax
  403e07:	xor    eax,eax
  403e09:	cmp    rdx,rbx
  403e0c:	jae    403e35 <flatcc_builder_default_alloc@@Base+0x95>
  403e0e:	mov    rdi,QWORD PTR [rbp+0x0]
  403e12:	mov    rsi,rbx
  403e15:	call   403190 <realloc@plt>
  403e1a:	mov    r12,rax
  403e1d:	test   rax,rax
  403e20:	je     403eba <flatcc_builder_default_alloc@@Base+0x11a>
  403e26:	test   r13d,r13d
  403e29:	jne    403e58 <flatcc_builder_default_alloc@@Base+0xb8>
  403e2b:	mov    QWORD PTR [rbp+0x0],r12
  403e2f:	mov    QWORD PTR [rbp+0x8],rbx
  403e33:	xor    eax,eax
  403e35:	add    rsp,0x18
  403e39:	pop    rbx
  403e3a:	pop    rbp
  403e3b:	pop    r12
  403e3d:	pop    r13
  403e3f:	ret    
  403e40:	cmp    r8d,0x1
  403e44:	mov    ebx,0x100
  403e49:	mov    eax,0x20
  403e4e:	cmovne rbx,rax
  403e52:	jmp    403de4 <flatcc_builder_default_alloc@@Base+0x44>
  403e54:	nop    DWORD PTR [rax+0x0]
  403e58:	mov    rax,QWORD PTR [rbp+0x8]
  403e5c:	cmp    rax,rbx
  403e5f:	jae    403e2b <flatcc_builder_default_alloc@@Base+0x8b>
  403e61:	mov    rdx,rbx
  403e64:	sub    rdx,rax
  403e67:	lea    rdi,[r12+rax*1]
  403e6b:	xor    esi,esi
  403e6d:	call   403140 <memset@plt>
  403e72:	jmp    403e2b <flatcc_builder_default_alloc@@Base+0x8b>
  403e74:	nop    DWORD PTR [rax+0x0]
  403e78:	mov    rdi,QWORD PTR [rsi]
  403e7b:	xor    eax,eax
  403e7d:	test   rdi,rdi
  403e80:	je     403e35 <flatcc_builder_default_alloc@@Base+0x95>
  403e82:	mov    DWORD PTR [rsp+0xc],eax
  403e86:	call   4030f0 <free@plt>
  403e8b:	mov    QWORD PTR [rbp+0x0],0x0
  403e93:	mov    QWORD PTR [rbp+0x8],0x0
  403e9b:	mov    eax,DWORD PTR [rsp+0xc]
  403e9f:	add    rsp,0x18
  403ea3:	pop    rbx
  403ea4:	pop    rbp
  403ea5:	pop    r12
  403ea7:	pop    r13
  403ea9:	ret    
  403eaa:	nop    WORD PTR [rax+rax*1+0x0]
  403eb0:	mov    ebx,0x120
  403eb5:	jmp    403de4 <flatcc_builder_default_alloc@@Base+0x44>
  403eba:	mov    eax,0xffffffff
  403ebf:	jmp    403e35 <flatcc_builder_default_alloc@@Base+0x95>
  403ec4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403ecf:	nop
  403ed0:	push   rax
  403ed1:	pop    rax
  403ed2:	lea    rcx,[rip+0x6d57]        # 40ac30 <_IO_stdin_used@@Base+0xc30>
  403ed9:	mov    edx,0x134
  403ede:	lea    rsi,[rip+0x6293]        # 40a178 <_IO_stdin_used@@Base+0x178>
  403ee5:	lea    rdi,[rip+0x6623]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  403eec:	sub    rsp,0x8
  403ef0:	call   403130 <__assert_fail@plt>
  403ef5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403f00:	push   rax
  403f01:	pop    rax
  403f02:	lea    rcx,[rip+0x6cb7]        # 40abc0 <_IO_stdin_used@@Base+0xbc0>
  403f09:	mov    edx,0x2a5
  403f0e:	lea    rsi,[rip+0x6263]        # 40a178 <_IO_stdin_used@@Base+0x178>
  403f15:	lea    rdi,[rip+0x65f3]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  403f1c:	sub    rsp,0x8
  403f20:	call   403130 <__assert_fail@plt>
  403f25:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403f30:	push   rbx
  403f31:	mov    r9,rdi
  403f34:	sub    rsp,0xa0
  403f3b:	mov    rbx,QWORD PTR fs:0x28
  403f44:	mov    QWORD PTR [rsp+0x98],rbx
  403f4c:	xor    ebx,ebx
  403f4e:	test   dx,dx
  403f51:	je     403fb0 <flatcc_builder_default_alloc@@Base+0x210>
  403f53:	mov    eax,edx
  403f55:	movzx  edx,dx
  403f58:	movzx  edi,WORD PTR [rsi]
  403f5b:	cmp    di,0x3
  403f5f:	ja     403f6e <flatcc_builder_default_alloc@@Base+0x1ce>
  403f61:	mov    edi,0x4
  403f66:	mov    WORD PTR [rsi],di
  403f69:	mov    edi,0x4
  403f6e:	cmp    ax,di
  403f71:	jbe    403f76 <flatcc_builder_default_alloc@@Base+0x1d6>
  403f73:	mov    WORD PTR [rsi],ax
  403f76:	test   ecx,ecx
  403f78:	jne    403f87 <flatcc_builder_default_alloc@@Base+0x1e7>
  403f7a:	mov    ebx,DWORD PTR [r9+0xf4]
  403f81:	dec    edx
  403f83:	and    edx,ebx
  403f85:	jne    403fd0 <flatcc_builder_default_alloc@@Base+0x230>
  403f87:	xor    eax,eax
  403f89:	mov    rbx,QWORD PTR [rsp+0x98]
  403f91:	xor    rbx,QWORD PTR fs:0x28
  403f9a:	jne    40403d <flatcc_builder_default_alloc@@Base+0x29d>
  403fa0:	add    rsp,0xa0
  403fa7:	pop    rbx
  403fa8:	ret    
  403fa9:	nop    DWORD PTR [rax+0x0]
  403fb0:	movzx  eax,WORD PTR [rdi+0xec]
  403fb7:	movzx  edx,ax
  403fba:	test   ax,ax
  403fbd:	jne    403f58 <flatcc_builder_default_alloc@@Base+0x1b8>
  403fbf:	mov    edx,0x1
  403fc4:	mov    eax,0x1
  403fc9:	jmp    403f58 <flatcc_builder_default_alloc@@Base+0x1b8>
  403fcb:	nop    DWORD PTR [rax+rax*1+0x0]
  403fd0:	mov    rax,0x40ac60
  403fd7:	movsxd r8,edx
  403fda:	add    edx,ebx
  403fdc:	mov    QWORD PTR [rsp],r8
  403fe0:	mov    QWORD PTR [rsp+0x10],rax
  403fe5:	mov    QWORD PTR [rsp+0x18],r8
  403fea:	mov    DWORD PTR [rsp+0x8],0x1
  403ff2:	mov    DWORD PTR [r9+0xf4],edx
  403ff9:	cmp    ebx,edx
  403ffb:	jg     404047 <flatcc_builder_default_alloc@@Base+0x2a7>
  403ffd:	mov    rdi,QWORD PTR [r9+0x38]
  404001:	lea    rsi,[rsp+0x10]
  404006:	mov    ecx,ebx
  404008:	mov    edx,0x1
  40400d:	call   QWORD PTR [r9+0x48]
  404011:	test   eax,eax
  404013:	jne    404042 <flatcc_builder_default_alloc@@Base+0x2a2>
  404015:	cmp    ebx,0xffffffff
  404018:	jne    403f87 <flatcc_builder_default_alloc@@Base+0x1e7>
  40401e:	lea    rcx,[rip+0x6bab]        # 40abd0 <_IO_stdin_used@@Base+0xbd0>
  404025:	mov    edx,0x2be
  40402a:	lea    rsi,[rip+0x6147]        # 40a178 <_IO_stdin_used@@Base+0x178>
  404031:	lea    rdi,[rip+0x64d7]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  404038:	call   403130 <__assert_fail@plt>
  40403d:	call   403120 <__stack_chk_fail@plt>
  404042:	call   403f00 <flatcc_builder_default_alloc@@Base+0x160>
  404047:	lea    rcx,[rip+0x6b72]        # 40abc0 <_IO_stdin_used@@Base+0xbc0>
  40404e:	mov    edx,0x2a1
  404053:	lea    rsi,[rip+0x611e]        # 40a178 <_IO_stdin_used@@Base+0x178>
  40405a:	lea    rdi,[rip+0x64ae]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  404061:	call   403130 <__assert_fail@plt>
  404066:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404070:	push   rax
  404071:	pop    rax
  404072:	lea    rcx,[rip+0x6b37]        # 40abb0 <_IO_stdin_used@@Base+0xbb0>
  404079:	mov    edx,0x28b
  40407e:	lea    rsi,[rip+0x60f3]        # 40a178 <_IO_stdin_used@@Base+0x178>
  404085:	lea    rdi,[rip+0x6483]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  40408c:	sub    rsp,0x8
  404090:	call   403130 <__assert_fail@plt>
  404095:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4040a0:	push   rax
  4040a1:	pop    rax
  4040a2:	lea    rcx,[rip+0x6a67]        # 40ab10 <_IO_stdin_used@@Base+0xb10>
  4040a9:	mov    edx,0x37c
  4040ae:	lea    rsi,[rip+0x60c3]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4040b5:	lea    rdi,[rip+0x642c]        # 40a4e8 <_IO_stdin_used@@Base+0x4e8>
  4040bc:	sub    rsp,0x8
  4040c0:	call   403130 <__assert_fail@plt>
  4040c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4040d0:	push   r12
  4040d2:	mov    r12d,esi
  4040d5:	push   rbp
  4040d6:	push   rbx
  4040d7:	mov    rbx,rdi
  4040da:	movsxd rax,DWORD PTR [rdi+0x104]
  4040e1:	lea    edx,[rax+0x1]
  4040e4:	mov    DWORD PTR [rdi+0x104],edx
  4040ea:	cmp    edx,DWORD PTR [rdi+0x108]
  4040f0:	jle    4041c0 <flatcc_builder_default_alloc@@Base+0x420>
  4040f6:	mov    ecx,DWORD PTR [rdi+0x120]
  4040fc:	cmp    edx,ecx
  4040fe:	jle    404108 <flatcc_builder_default_alloc@@Base+0x368>
  404100:	test   ecx,ecx
  404102:	jg     4041d8 <flatcc_builder_default_alloc@@Base+0x438>
  404108:	lea    rcx,[rax+rax*8]
  40410c:	lea    rbp,[rcx*4+0x0]
  404114:	lea    rdx,[rbp+0x24]
  404118:	cmp    rdx,QWORD PTR [rbx+0xa0]
  40411f:	jbe    40413f <flatcc_builder_default_alloc@@Base+0x39f>
  404121:	mov    rdi,QWORD PTR [rbx+0x40]
  404125:	xor    ecx,ecx
  404127:	lea    rsi,[rbx+0x98]
  40412e:	mov    r8d,0x4
  404134:	call   QWORD PTR [rbx+0x50]
  404137:	test   eax,eax
  404139:	jne    4041df <flatcc_builder_default_alloc@@Base+0x43f>
  40413f:	mov    rcx,rbp
  404142:	add    rcx,QWORD PTR [rbx+0x98]
  404149:	mov    QWORD PTR [rbx+0x30],rcx
  40414d:	je     4041d8 <flatcc_builder_default_alloc@@Base+0x438>
  404153:	movabs rdx,0xe38e38e38e38e38f
  40415d:	mov    rax,rdx
  404160:	mul    QWORD PTR [rbx+0xa0]
  404167:	mov    eax,DWORD PTR [rbx+0x120]
  40416d:	shr    rdx,0x5
  404171:	mov    DWORD PTR [rbx+0x108],edx
  404177:	cmp    eax,edx
  404179:	jge    404180 <flatcc_builder_default_alloc@@Base+0x3e0>
  40417b:	test   eax,eax
  40417d:	jg     4041d0 <flatcc_builder_default_alloc@@Base+0x430>
  40417f:	nop
  404180:	movzx  eax,WORD PTR [rbx+0xea]
  404187:	mov    edx,DWORD PTR [rbx+0x20]
  40418a:	mov    WORD PTR [rcx+0xc],ax
  40418e:	mov    eax,DWORD PTR [rbx+0x28]
  404191:	mov    DWORD PTR [rcx+0x8],edx
  404194:	mov    WORD PTR [rbx+0xea],r12w
  40419c:	mov    DWORD PTR [rcx],eax
  40419e:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4041a5:	lea    eax,[rdx+rax*1+0x7]
  4041a9:	mov    DWORD PTR [rbx+0x20],0x0
  4041b0:	and    eax,0xfffffff8
  4041b3:	mov    DWORD PTR [rbx+0x28],eax
  4041b6:	xor    eax,eax
  4041b8:	pop    rbx
  4041b9:	pop    rbp
  4041ba:	pop    r12
  4041bc:	ret    
  4041bd:	nop    DWORD PTR [rax]
  4041c0:	mov    rax,QWORD PTR [rdi+0x30]
  4041c4:	lea    rcx,[rax+0x24]
  4041c8:	mov    QWORD PTR [rdi+0x30],rcx
  4041cc:	jmp    404180 <flatcc_builder_default_alloc@@Base+0x3e0>
  4041ce:	xchg   ax,ax
  4041d0:	mov    DWORD PTR [rbx+0x108],eax
  4041d6:	jmp    404180 <flatcc_builder_default_alloc@@Base+0x3e0>
  4041d8:	mov    eax,0xffffffff
  4041dd:	jmp    4041b8 <flatcc_builder_default_alloc@@Base+0x418>
  4041df:	call   403ed0 <flatcc_builder_default_alloc@@Base+0x130>
  4041e4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4041ef:	nop
  4041f0:	push   rbp
  4041f1:	push   rbx
  4041f2:	sub    rsp,0xb8
  4041f9:	mov    rax,QWORD PTR fs:0x28
  404202:	mov    QWORD PTR [rsp+0xa8],rax
  40420a:	xor    eax,eax
  40420c:	cmp    edx,0x3fffffff
  404212:	ja     4043a8 <flatcc_builder_default_alloc@@Base+0x608>
  404218:	cmp    WORD PTR [rdi+0xe8],0x3
  404220:	mov    rbx,rdi
  404223:	ja     404231 <flatcc_builder_default_alloc@@Base+0x491>
  404225:	mov    eax,0x4
  40422a:	mov    WORD PTR [rdi+0xe8],ax
  404231:	mov    edi,DWORD PTR [rbx+0xf0]
  404237:	mov    r9d,edx
  40423a:	mov    eax,edi
  40423c:	lea    r8,[rsp+0xc]
  404241:	and    eax,0x3
  404244:	shl    r9d,0x2
  404248:	mov    QWORD PTR [rsp+0x20],r8
  40424d:	mov    DWORD PTR [rsp+0xc],edx
  404251:	mov    QWORD PTR [rsp+0x10],0x4
  40425a:	mov    QWORD PTR [rsp+0x28],0x4
  404263:	mov    DWORD PTR [rsp+0x18],0x1
  40426b:	mov    r8d,0x4
  404271:	je     404291 <flatcc_builder_default_alloc@@Base+0x4f1>
  404273:	mov    r9d,r9d
  404276:	lea    r8,[r9+0x4]
  40427a:	mov    QWORD PTR [rsp+0x10],r8
  40427f:	mov    QWORD PTR [rsp+0x30],rsi
  404284:	mov    QWORD PTR [rsp+0x38],r9
  404289:	mov    DWORD PTR [rsp+0x18],0x2
  404291:	test   eax,eax
  404293:	jne    404370 <flatcc_builder_default_alloc@@Base+0x5d0>
  404299:	mov    r10d,r8d
  40429c:	test   edx,edx
  40429e:	je     404316 <flatcc_builder_default_alloc@@Base+0x576>
  4042a0:	sub    r10d,edi
  4042a3:	lea    r9d,[rdx-0x1]
  4042a7:	xor    eax,eax
  4042a9:	sub    r10d,0x4
  4042ad:	jmp    4042d8 <flatcc_builder_default_alloc@@Base+0x538>
  4042af:	nop
  4042b0:	mov    edi,eax
  4042b2:	neg    edi
  4042b4:	lea    edi,[r10+rdi*4]
  4042b8:	add    edx,edi
  4042ba:	mov    DWORD PTR [rsi+rax*4],edx
  4042bd:	test   rcx,rcx
  4042c0:	je     4042cc <flatcc_builder_default_alloc@@Base+0x52c>
  4042c2:	cmp    BYTE PTR [rcx+rax*1],0x0
  4042c6:	je     4043cb <flatcc_builder_default_alloc@@Base+0x62b>
  4042cc:	lea    rdx,[rax+0x1]
  4042d0:	cmp    rax,r9
  4042d3:	je     404310 <flatcc_builder_default_alloc@@Base+0x570>
  4042d5:	mov    rax,rdx
  4042d8:	mov    edx,DWORD PTR [rsi+rax*4]
  4042db:	test   edx,edx
  4042dd:	jne    4042b0 <flatcc_builder_default_alloc@@Base+0x510>
  4042df:	test   rcx,rcx
  4042e2:	je     4043ac <flatcc_builder_default_alloc@@Base+0x60c>
  4042e8:	cmp    BYTE PTR [rcx+rax*1],0x0
  4042ec:	je     4042cc <flatcc_builder_default_alloc@@Base+0x52c>
  4042ee:	lea    rcx,[rip+0x653b]        # 40a830 <_IO_stdin_used@@Base+0x830>
  4042f5:	mov    edx,0x5b5
  4042fa:	lea    rsi,[rip+0x5e77]        # 40a178 <_IO_stdin_used@@Base+0x178>
  404301:	lea    rdi,[rip+0x6209]        # 40a511 <_IO_stdin_used@@Base+0x511>
  404308:	call   403130 <__assert_fail@plt>
  40430d:	nop    DWORD PTR [rax]
  404310:	mov    edi,DWORD PTR [rbx+0xf0]
  404316:	mov    ebp,edi
  404318:	sub    ebp,r8d
  40431b:	cmp    ebp,edi
  40431d:	jge    4043ea <flatcc_builder_default_alloc@@Base+0x64a>
  404323:	mov    rdi,QWORD PTR [rbx+0x38]
  404327:	mov    edx,DWORD PTR [rsp+0x18]
  40432b:	lea    rsi,[rsp+0x20]
  404330:	mov    ecx,ebp
  404332:	call   QWORD PTR [rbx+0x48]
  404335:	test   eax,eax
  404337:	jne    40440e <flatcc_builder_default_alloc@@Base+0x66e>
  40433d:	mov    DWORD PTR [rbx+0xf0],ebp
  404343:	mov    rbx,QWORD PTR [rsp+0xa8]
  40434b:	xor    rbx,QWORD PTR fs:0x28
  404354:	mov    eax,ebp
  404356:	jne    404409 <flatcc_builder_default_alloc@@Base+0x669>
  40435c:	add    rsp,0xb8
  404363:	pop    rbx
  404364:	pop    rbp
  404365:	ret    
  404366:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404370:	movsxd r10,DWORD PTR [rsp+0x18]
  404375:	mov    r11,0x40ac60
  40437c:	mov    r9,r10
  40437f:	add    r8,rax
  404382:	shl    r10,0x4
  404386:	inc    r9d
  404389:	mov    QWORD PTR [rsp+0x10],r8
  40438e:	mov    QWORD PTR [rsp+r10*1+0x20],r11
  404393:	mov    QWORD PTR [rsp+r10*1+0x28],rax
  404398:	mov    DWORD PTR [rsp+0x18],r9d
  40439d:	jmp    404299 <flatcc_builder_default_alloc@@Base+0x4f9>
  4043a2:	nop    WORD PTR [rax+rax*1+0x0]
  4043a8:	xor    ebp,ebp
  4043aa:	jmp    404343 <flatcc_builder_default_alloc@@Base+0x5a3>
  4043ac:	lea    rcx,[rip+0x647d]        # 40a830 <_IO_stdin_used@@Base+0x830>
  4043b3:	mov    edx,0x5b7
  4043b8:	lea    rsi,[rip+0x5db9]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4043bf:	lea    rdi,[rip+0x6149]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  4043c6:	call   403130 <__assert_fail@plt>
  4043cb:	lea    rcx,[rip+0x645e]        # 40a830 <_IO_stdin_used@@Base+0x830>
  4043d2:	mov    edx,0x5b1
  4043d7:	lea    rsi,[rip+0x5d9a]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4043de:	lea    rdi,[rip+0x611e]        # 40a503 <_IO_stdin_used@@Base+0x503>
  4043e5:	call   403130 <__assert_fail@plt>
  4043ea:	lea    rcx,[rip+0x67bf]        # 40abb0 <_IO_stdin_used@@Base+0xbb0>
  4043f1:	mov    edx,0x287
  4043f6:	lea    rsi,[rip+0x5d7b]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4043fd:	lea    rdi,[rip+0x610b]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  404404:	call   403130 <__assert_fail@plt>
  404409:	call   403120 <__stack_chk_fail@plt>
  40440e:	call   404070 <flatcc_builder_default_alloc@@Base+0x2d0>
  404413:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40441e:	xchg   ax,ax

0000000000404420 <flatcc_builder_flush_vtable_cache@@Base>:
  404420:	endbr64 
  404424:	cmp    QWORD PTR [rdi+0xd8],0x0
  40442c:	jne    404430 <flatcc_builder_flush_vtable_cache@@Base+0x10>
  40442e:	ret    
  40442f:	nop
  404430:	push   rbx
  404431:	mov    rbx,rdi
  404434:	xor    esi,esi
  404436:	mov    rdx,QWORD PTR [rbx+0xb0]
  40443d:	mov    rdi,QWORD PTR [rdi+0xa8]
  404444:	call   403140 <memset@plt>
  404449:	movabs rax,0x1000000000
  404453:	mov    QWORD PTR [rbx+0xe0],rax
  40445a:	pop    rbx
  40445b:	ret    
  40445c:	nop    DWORD PTR [rax+0x0]

0000000000404460 <flatcc_builder_custom_init@@Base>:
  404460:	endbr64 
  404464:	mov    QWORD PTR [rdi],0x0
  40446b:	mov    QWORD PTR [rdi+0x180],0x0
  404476:	mov    r9,rdi
  404479:	lea    rdi,[rdi+0x8]
  40447d:	and    rdi,0xfffffffffffffff8
  404481:	mov    r10,rcx
  404484:	mov    rcx,r9
  404487:	sub    rcx,rdi
  40448a:	add    ecx,0x188
  404490:	shr    ecx,0x3
  404493:	xor    eax,eax
  404495:	rep stos QWORD PTR es:[rdi],rax
  404498:	test   rsi,rsi
  40449b:	je     4044b8 <flatcc_builder_custom_init@@Base+0x58>
  40449d:	test   r10,r10
  4044a0:	je     4044d6 <flatcc_builder_custom_init@@Base+0x76>
  4044a2:	mov    QWORD PTR [r9+0x40],r8
  4044a6:	mov    QWORD PTR [r9+0x50],r10
  4044aa:	mov    QWORD PTR [r9+0x38],rdx
  4044ae:	mov    QWORD PTR [r9+0x48],rsi
  4044b2:	xor    eax,eax
  4044b4:	ret    
  4044b5:	nop    DWORD PTR [rax]
  4044b8:	mov    DWORD PTR [r9+0x128],0x1
  4044c3:	lea    rdx,[r9+0x130]
  4044ca:	mov    rsi,0x407f10
  4044d1:	test   r10,r10
  4044d4:	jne    4044a2 <flatcc_builder_custom_init@@Base+0x42>
  4044d6:	mov    r10,0x403da0
  4044dd:	jmp    4044a2 <flatcc_builder_custom_init@@Base+0x42>
  4044df:	nop

00000000004044e0 <flatcc_builder_init@@Base>:
  4044e0:	endbr64 
  4044e4:	xor    r8d,r8d
  4044e7:	xor    ecx,ecx
  4044e9:	xor    edx,edx
  4044eb:	xor    esi,esi
  4044ed:	jmp    404460 <flatcc_builder_custom_init@@Base>
  4044f2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4044fd:	nop    DWORD PTR [rax]

0000000000404500 <flatcc_builder_custom_reset@@Base>:
  404500:	endbr64 
  404504:	push   r14
  404506:	mov    r14d,esi
  404509:	push   r13
  40450b:	mov    r13d,edx
  40450e:	push   r12
  404510:	mov    r12,rdi
  404513:	push   rbp
  404514:	xor    ebp,ebp
  404516:	push   rbx
  404517:	lea    rbx,[rdi+0x58]
  40451b:	jmp    404565 <flatcc_builder_custom_reset@@Base+0x65>
  40451d:	nop    DWORD PTR [rax]
  404520:	cmp    ebp,0x5
  404523:	je     40454f <flatcc_builder_custom_reset@@Base+0x4f>
  404525:	test   r13d,r13d
  404528:	je     40454f <flatcc_builder_custom_reset@@Base+0x4f>
  40452a:	mov    rdi,QWORD PTR [r12+0x40]
  40452f:	mov    r8d,ebp
  404532:	mov    ecx,0x1
  404537:	mov    edx,0x1
  40453c:	mov    rsi,rbx
  40453f:	call   QWORD PTR [r12+0x50]
  404544:	test   eax,eax
  404546:	jne    404680 <flatcc_builder_custom_reset@@Base+0x180>
  40454c:	mov    rdi,QWORD PTR [rbx]
  40454f:	mov    rdx,QWORD PTR [rbx+0x8]
  404553:	xor    esi,esi
  404555:	call   403140 <memset@plt>
  40455a:	inc    ebp
  40455c:	add    rbx,0x10
  404560:	cmp    ebp,0x8
  404563:	je     404598 <flatcc_builder_custom_reset@@Base+0x98>
  404565:	mov    rdi,QWORD PTR [rbx]
  404568:	test   rdi,rdi
  40456b:	jne    404520 <flatcc_builder_custom_reset@@Base+0x20>
  40456d:	cmp    QWORD PTR [rbx+0x8],0x0
  404572:	je     40455a <flatcc_builder_custom_reset@@Base+0x5a>
  404574:	lea    rcx,[rip+0x66c5]        # 40ac40 <_IO_stdin_used@@Base+0xc40>
  40457b:	mov    edx,0x1b2
  404580:	lea    rsi,[rip+0x5bf1]        # 40a178 <_IO_stdin_used@@Base+0x178>
  404587:	lea    rdi,[rip+0x5f91]        # 40a51f <_IO_stdin_used@@Base+0x51f>
  40458e:	call   403130 <__assert_fail@plt>
  404593:	nop    DWORD PTR [rax+rax*1+0x0]
  404598:	mov    edx,DWORD PTR [r12+0xe4]
  4045a0:	mov    DWORD PTR [r12+0xe0],0x0
  4045ac:	test   edx,edx
  4045ae:	je     4045bc <flatcc_builder_custom_reset@@Base+0xbc>
  4045b0:	mov    DWORD PTR [r12+0xe4],0x10
  4045bc:	xor    eax,eax
  4045be:	mov    WORD PTR [r12+0xe8],ax
  4045c7:	mov    rax,QWORD PTR [r12+0x68]
  4045cc:	mov    QWORD PTR [r12+0xf0],0x0
  4045d8:	mov    QWORD PTR [r12+0x18],rax
  4045dd:	mov    rax,QWORD PTR [r12+0x88]
  4045e5:	mov    QWORD PTR [r12+0x20],0x0
  4045ee:	mov    QWORD PTR [r12],rax
  4045f2:	mov    rax,QWORD PTR [r12+0x58]
  4045f7:	mov    QWORD PTR [r12+0xfc],0x0
  404603:	mov    QWORD PTR [r12+0x104],0x0
  40460f:	mov    QWORD PTR [r12+0x8],rax
  404614:	mov    QWORD PTR [r12+0x30],0x0
  40461d:	test   r14d,r14d
  404620:	jne    404640 <flatcc_builder_custom_reset@@Base+0x140>
  404622:	mov    eax,DWORD PTR [r12+0x128]
  40462a:	test   eax,eax
  40462c:	jne    404664 <flatcc_builder_custom_reset@@Base+0x164>
  40462e:	pop    rbx
  40462f:	pop    rbp
  404630:	pop    r12
  404632:	pop    r13
  404634:	pop    r14
  404636:	ret    
  404637:	nop    WORD PTR [rax+rax*1+0x0]
  404640:	mov    eax,DWORD PTR [r12+0x128]
  404648:	mov    QWORD PTR [r12+0x118],0x0
  404654:	mov    QWORD PTR [r12+0x120],0x0
  404660:	test   eax,eax
  404662:	je     40462e <flatcc_builder_custom_reset@@Base+0x12e>
  404664:	lea    rdi,[r12+0x130]
  40466c:	call   407d80 <flatcc_emitter_reset@@Base>
  404671:	pop    rbx
  404672:	pop    rbp
  404673:	pop    r12
  404675:	pop    r13
  404677:	xor    eax,eax
  404679:	pop    r14
  40467b:	ret    
  40467c:	nop    DWORD PTR [rax+0x0]
  404680:	pop    rbx
  404681:	pop    rbp
  404682:	pop    r12
  404684:	pop    r13
  404686:	mov    eax,0xffffffff
  40468b:	pop    r14
  40468d:	ret    
  40468e:	xchg   ax,ax

0000000000404690 <flatcc_builder_reset@@Base>:
  404690:	endbr64 
  404694:	xor    edx,edx
  404696:	xor    esi,esi
  404698:	jmp    404500 <flatcc_builder_custom_reset@@Base>
  40469d:	nop    DWORD PTR [rax]

00000000004046a0 <flatcc_builder_clear@@Base>:
  4046a0:	endbr64 
  4046a4:	push   r12
  4046a6:	lea    r12,[rdi+0x58]
  4046aa:	push   rbp
  4046ab:	xor    ebp,ebp
  4046ad:	push   rbx
  4046ae:	mov    rbx,rdi
  4046b1:	nop    DWORD PTR [rax+0x0]
  4046b8:	mov    rdi,QWORD PTR [rbx+0x40]
  4046bc:	mov    r8d,ebp
  4046bf:	mov    rsi,r12
  4046c2:	xor    ecx,ecx
  4046c4:	xor    edx,edx
  4046c6:	inc    ebp
  4046c8:	call   QWORD PTR [rbx+0x50]
  4046cb:	add    r12,0x10
  4046cf:	cmp    ebp,0x8
  4046d2:	jne    4046b8 <flatcc_builder_clear@@Base+0x18>
  4046d4:	mov    eax,DWORD PTR [rbx+0x128]
  4046da:	test   eax,eax
  4046dc:	jne    404710 <flatcc_builder_clear@@Base+0x70>
  4046de:	lea    rdi,[rbx+0x8]
  4046e2:	and    rdi,0xfffffffffffffff8
  4046e6:	mov    QWORD PTR [rbx],0x0
  4046ed:	mov    QWORD PTR [rbx+0x180],0x0
  4046f8:	sub    rbx,rdi
  4046fb:	lea    ecx,[rbx+0x188]
  404701:	shr    ecx,0x3
  404704:	xor    eax,eax
  404706:	rep stos QWORD PTR es:[rdi],rax
  404709:	pop    rbx
  40470a:	pop    rbp
  40470b:	pop    r12
  40470d:	ret    
  40470e:	xchg   ax,ax
  404710:	lea    rdi,[rbx+0x130]
  404717:	call   407e70 <flatcc_emitter_clear@@Base>
  40471c:	jmp    4046de <flatcc_builder_clear@@Base+0x3e>
  40471e:	xchg   ax,ax

0000000000404720 <flatcc_builder_enter_user_frame_ptr@@Base>:
  404720:	endbr64 
  404724:	push   r12
  404726:	push   rbp
  404727:	lea    rbp,[rsi+0x7]
  40472b:	and    rbp,0xfffffffffffffff8
  40472f:	push   rbx
  404730:	add    rbp,0x8
  404734:	mov    rbx,rdi
  404737:	mov    r12,QWORD PTR [rdi+0x180]
  40473e:	lea    rdx,[r12+rbp*1]
  404742:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404749:	jbe    404765 <flatcc_builder_enter_user_frame_ptr@@Base+0x45>
  40474b:	lea    rsi,[rdi+0xc8]
  404752:	mov    rdi,QWORD PTR [rdi+0x40]
  404756:	xor    ecx,ecx
  404758:	mov    r8d,0x7
  40475e:	call   QWORD PTR [rbx+0x50]
  404761:	test   eax,eax
  404763:	jne    4047b7 <flatcc_builder_enter_user_frame_ptr@@Base+0x97>
  404765:	add    r12,QWORD PTR [rbx+0xc8]
  40476c:	je     4047b0 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
  40476e:	mov    rdx,rbp
  404771:	mov    rdi,r12
  404774:	xor    esi,esi
  404776:	call   403140 <memset@plt>
  40477b:	mov    rdx,QWORD PTR [rbx+0x178]
  404782:	lea    rax,[r12+0x8]
  404787:	mov    QWORD PTR [r12],rdx
  40478b:	mov    rdx,QWORD PTR [rbx+0x180]
  404792:	add    rbp,rdx
  404795:	lea    rcx,[rdx+0x8]
  404799:	mov    QWORD PTR [rbx+0x180],rbp
  4047a0:	mov    QWORD PTR [rbx+0x178],rcx
  4047a7:	pop    rbx
  4047a8:	pop    rbp
  4047a9:	pop    r12
  4047ab:	ret    
  4047ac:	nop    DWORD PTR [rax+0x0]
  4047b0:	pop    rbx
  4047b1:	pop    rbp
  4047b2:	xor    eax,eax
  4047b4:	pop    r12
  4047b6:	ret    
  4047b7:	call   403ed0 <flatcc_builder_default_alloc@@Base+0x130>
  4047bc:	nop    DWORD PTR [rax+0x0]

00000000004047c0 <flatcc_builder_enter_user_frame@@Base>:
  4047c0:	endbr64 
  4047c4:	push   r12
  4047c6:	push   rbp
  4047c7:	mov    rbp,rdi
  4047ca:	push   rbx
  4047cb:	lea    rbx,[rsi+0x7]
  4047cf:	and    rbx,0xfffffffffffffff8
  4047d3:	mov    r12,QWORD PTR [rdi+0x180]
  4047da:	add    rbx,0x8
  4047de:	lea    rdx,[r12+rbx*1]
  4047e2:	cmp    rdx,QWORD PTR [rdi+0xd0]
  4047e9:	jbe    404805 <flatcc_builder_enter_user_frame@@Base+0x45>
  4047eb:	lea    rsi,[rdi+0xc8]
  4047f2:	mov    rdi,QWORD PTR [rdi+0x40]
  4047f6:	xor    ecx,ecx
  4047f8:	mov    r8d,0x7
  4047fe:	call   QWORD PTR [rbp+0x50]
  404801:	test   eax,eax
  404803:	jne    40484a <flatcc_builder_enter_user_frame@@Base+0x8a>
  404805:	add    r12,QWORD PTR [rbp+0xc8]
  40480c:	je     404842 <flatcc_builder_enter_user_frame@@Base+0x82>
  40480e:	mov    rdx,rbx
  404811:	mov    rdi,r12
  404814:	xor    esi,esi
  404816:	call   403140 <memset@plt>
  40481b:	mov    rax,QWORD PTR [rbp+0x178]
  404822:	mov    QWORD PTR [r12],rax
  404826:	mov    rax,QWORD PTR [rbp+0x180]
  40482d:	lea    r12,[rax+0x8]
  404831:	add    rbx,rax
  404834:	mov    QWORD PTR [rbp+0x178],r12
  40483b:	mov    QWORD PTR [rbp+0x180],rbx
  404842:	pop    rbx
  404843:	pop    rbp
  404844:	mov    rax,r12
  404847:	pop    r12
  404849:	ret    
  40484a:	call   403ed0 <flatcc_builder_default_alloc@@Base+0x130>
  40484f:	nop

0000000000404850 <flatcc_builder_exit_user_frame@@Base>:
  404850:	endbr64 
  404854:	mov    rax,QWORD PTR [rdi+0x178]
  40485b:	test   rax,rax
  40485e:	je     404880 <flatcc_builder_exit_user_frame@@Base+0x30>
  404860:	mov    edx,eax
  404862:	sub    rax,0x8
  404866:	mov    QWORD PTR [rdi+0x180],rax
  40486d:	add    rdx,QWORD PTR [rdi+0xc8]
  404874:	mov    rax,QWORD PTR [rdx-0x8]
  404878:	mov    QWORD PTR [rdi+0x178],rax
  40487f:	ret    
  404880:	push   rax
  404881:	lea    rcx,[rip+0x6388]        # 40ac10 <_IO_stdin_used@@Base+0xc10>
  404888:	mov    edx,0x21e
  40488d:	lea    rsi,[rip+0x58e4]        # 40a178 <_IO_stdin_used@@Base+0x178>
  404894:	lea    rdi,[rip+0x5c96]        # 40a531 <_IO_stdin_used@@Base+0x531>
  40489b:	call   403130 <__assert_fail@plt>

00000000004048a0 <flatcc_builder_exit_user_frame_at@@Base>:
  4048a0:	endbr64 
  4048a4:	cmp    QWORD PTR [rdi+0x178],rsi
  4048ab:	jb     4048b9 <flatcc_builder_exit_user_frame_at@@Base+0x19>
  4048ad:	mov    QWORD PTR [rdi+0x178],rsi
  4048b4:	jmp    404850 <flatcc_builder_exit_user_frame@@Base>
  4048b9:	push   rax
  4048ba:	lea    rcx,[rip+0x631f]        # 40abe0 <_IO_stdin_used@@Base+0xbe0>
  4048c1:	mov    edx,0x227
  4048c6:	lea    rsi,[rip+0x58ab]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4048cd:	lea    rdi,[rip+0x5904]        # 40a1d8 <_IO_stdin_used@@Base+0x1d8>
  4048d4:	call   403130 <__assert_fail@plt>
  4048d9:	nop    DWORD PTR [rax+0x0]

00000000004048e0 <flatcc_builder_get_current_user_frame@@Base>:
  4048e0:	endbr64 
  4048e4:	mov    rax,QWORD PTR [rdi+0x178]
  4048eb:	ret    
  4048ec:	nop    DWORD PTR [rax+0x0]

00000000004048f0 <flatcc_builder_get_user_frame_ptr@@Base>:
  4048f0:	endbr64 
  4048f4:	mov    eax,esi
  4048f6:	add    rax,QWORD PTR [rdi+0xc8]
  4048fd:	ret    
  4048fe:	xchg   ax,ax

0000000000404900 <flatcc_builder_embed_buffer@@Base>:
  404900:	endbr64 
  404904:	push   r13
  404906:	mov    r13d,r9d
  404909:	push   r12
  40490b:	mov    r12,rcx
  40490e:	push   rbp
  40490f:	mov    rbp,rdx
  404912:	movzx  edx,si
  404915:	push   rbx
  404916:	mov    rbx,rdi
  404919:	sub    rsp,0xc8
  404920:	mov    WORD PTR [rsp+0xc],r8w
  404926:	mov    r8d,DWORD PTR [rdi+0x100]
  40492d:	mov    rax,QWORD PTR fs:0x28
  404936:	mov    QWORD PTR [rsp+0xb8],rax
  40493e:	xor    eax,eax
  404940:	test   r8d,r8d
  404943:	setne  cl
  404946:	lea    rax,[rsp+0xc]
  40494b:	movzx  ecx,cl
  40494e:	mov    rsi,rax
  404951:	call   403f30 <flatcc_builder_default_alloc@@Base+0x190>
  404956:	test   eax,eax
  404958:	jne    404a90 <flatcc_builder_embed_buffer@@Base+0x190>
  40495e:	mov    edx,DWORD PTR [rbx+0xf0]
  404964:	xor    esi,esi
  404966:	and    r13d,0x2
  40496a:	setne  sil
  40496e:	movzx  ecx,WORD PTR [rsp+0xc]
  404973:	mov    eax,edx
  404975:	shl    esi,0x2
  404978:	sub    eax,r12d
  40497b:	dec    ecx
  40497d:	sub    eax,esi
  40497f:	and    eax,ecx
  404981:	lea    ecx,[rax+r12*1]
  404985:	mov    DWORD PTR [rsp+0x1c],ecx
  404989:	mov    ecx,DWORD PTR [rbx+0x100]
  40498f:	mov    QWORD PTR [rsp+0x20],0x0
  404998:	mov    DWORD PTR [rsp+0x28],0x0
  4049a0:	xor    r8d,r8d
  4049a3:	test   ecx,ecx
  4049a5:	je     4049d1 <flatcc_builder_embed_buffer@@Base+0xd1>
  4049a7:	lea    rcx,[rsp+0x1c]
  4049ac:	mov    QWORD PTR [rsp+0x20],0x4
  4049b5:	mov    QWORD PTR [rsp+0x30],rcx
  4049ba:	mov    QWORD PTR [rsp+0x38],0x4
  4049c3:	mov    DWORD PTR [rsp+0x28],0x1
  4049cb:	mov    r8d,0x4
  4049d1:	test   r12,r12
  4049d4:	je     4049fa <flatcc_builder_embed_buffer@@Base+0xfa>
  4049d6:	movsxd rsi,DWORD PTR [rsp+0x28]
  4049db:	add    r8,r12
  4049de:	mov    rcx,rsi
  4049e1:	inc    ecx
  4049e3:	shl    rsi,0x4
  4049e7:	mov    QWORD PTR [rsp+0x20],r8
  4049ec:	mov    QWORD PTR [rsp+rsi*1+0x30],rbp
  4049f1:	mov    QWORD PTR [rsp+rsi*1+0x38],r12
  4049f6:	mov    DWORD PTR [rsp+0x28],ecx
  4049fa:	test   eax,eax
  4049fc:	jne    404a60 <flatcc_builder_embed_buffer@@Base+0x160>
  4049fe:	mov    ebp,edx
  404a00:	sub    ebp,r8d
  404a03:	cmp    edx,ebp
  404a05:	jle    404a94 <flatcc_builder_embed_buffer@@Base+0x194>
  404a0b:	movabs rax,0x10000000f
  404a15:	cmp    r8,rax
  404a18:	ja     404a94 <flatcc_builder_embed_buffer@@Base+0x194>
  404a1a:	mov    rdi,QWORD PTR [rbx+0x38]
  404a1e:	mov    edx,DWORD PTR [rsp+0x28]
  404a22:	lea    rsi,[rsp+0x30]
  404a27:	mov    ecx,ebp
  404a29:	call   QWORD PTR [rbx+0x48]
  404a2c:	test   eax,eax
  404a2e:	jne    404ab8 <flatcc_builder_embed_buffer@@Base+0x1b8>
  404a34:	mov    DWORD PTR [rbx+0xf0],ebp
  404a3a:	mov    rdi,QWORD PTR [rsp+0xb8]
  404a42:	xor    rdi,QWORD PTR fs:0x28
  404a4b:	mov    eax,ebp
  404a4d:	jne    404ab3 <flatcc_builder_embed_buffer@@Base+0x1b3>
  404a4f:	add    rsp,0xc8
  404a56:	pop    rbx
  404a57:	pop    rbp
  404a58:	pop    r12
  404a5a:	pop    r13
  404a5c:	ret    
  404a5d:	nop    DWORD PTR [rax]
  404a60:	movsxd rsi,DWORD PTR [rsp+0x28]
  404a65:	mov    rdi,0x40ac60
  404a6c:	mov    rcx,rsi
  404a6f:	add    r8,rax
  404a72:	shl    rsi,0x4
  404a76:	inc    ecx
  404a78:	mov    QWORD PTR [rsp+0x20],r8
  404a7d:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  404a82:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  404a87:	mov    DWORD PTR [rsp+0x28],ecx
  404a8b:	jmp    4049fe <flatcc_builder_embed_buffer@@Base+0xfe>
  404a90:	xor    ebp,ebp
  404a92:	jmp    404a3a <flatcc_builder_embed_buffer@@Base+0x13a>
  404a94:	lea    rcx,[rip+0x6115]        # 40abb0 <_IO_stdin_used@@Base+0xbb0>
  404a9b:	mov    edx,0x287
  404aa0:	lea    rsi,[rip+0x56d1]        # 40a178 <_IO_stdin_used@@Base+0x178>
  404aa7:	lea    rdi,[rip+0x5a61]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  404aae:	call   403130 <__assert_fail@plt>
  404ab3:	call   403120 <__stack_chk_fail@plt>
  404ab8:	call   404070 <flatcc_builder_default_alloc@@Base+0x2d0>
  404abd:	nop    DWORD PTR [rax]

0000000000404ac0 <flatcc_builder_create_buffer@@Base>:
  404ac0:	endbr64 
  404ac4:	push   r14
  404ac6:	movzx  edx,dx
  404ac9:	mov    r14,rsi
  404acc:	push   r13
  404ace:	mov    r13d,r9d
  404ad1:	push   r12
  404ad3:	mov    r12d,r9d
  404ad6:	and    r12d,0x1
  404ada:	push   rbp
  404adb:	mov    rbp,rdi
  404ade:	push   rbx
  404adf:	mov    ebx,ecx
  404ae1:	mov    ecx,r12d
  404ae4:	sub    rsp,0xc0
  404aeb:	mov    WORD PTR [rsp+0xc],r8w
  404af1:	lea    rsi,[rsp+0xc]
  404af6:	mov    rax,QWORD PTR fs:0x28
  404aff:	mov    QWORD PTR [rsp+0xb8],rax
  404b07:	xor    eax,eax
  404b09:	mov    DWORD PTR [rsp+0x1c],0x0
  404b11:	call   403f30 <flatcc_builder_default_alloc@@Base+0x190>
  404b16:	test   eax,eax
  404b18:	jne    404cb8 <flatcc_builder_create_buffer@@Base+0x1f8>
  404b1e:	movzx  esi,WORD PTR [rsp+0xc]
  404b23:	cmp    si,WORD PTR [rbp+0xe8]
  404b2a:	jbe    404b33 <flatcc_builder_create_buffer@@Base+0x73>
  404b2c:	mov    WORD PTR [rbp+0xe8],si
  404b33:	mov    edx,DWORD PTR [rsp+0x1c]
  404b37:	test   r14,r14
  404b3a:	je     404b43 <flatcc_builder_create_buffer@@Base+0x83>
  404b3c:	mov    edx,DWORD PTR [r14]
  404b3f:	mov    DWORD PTR [rsp+0x1c],edx
  404b43:	test   edx,edx
  404b45:	mov    eax,0x4
  404b4a:	mov    ecx,DWORD PTR [rbp+0xf0]
  404b50:	cmovne rdx,rax
  404b54:	xor    edi,edi
  404b56:	test   r13b,0x2
  404b5a:	setne  dil
  404b5e:	lea    eax,[rcx-0x4]
  404b61:	shl    edi,0x2
  404b64:	sub    eax,edx
  404b66:	sub    eax,edi
  404b68:	dec    esi
  404b6a:	and    eax,esi
  404b6c:	and    r13d,0x3
  404b70:	jne    404c88 <flatcc_builder_create_buffer@@Base+0x1c8>
  404b76:	xor    r9d,r9d
  404b79:	mov    esi,0x1
  404b7e:	mov    r8d,0x4
  404b84:	movsxd rdi,r9d
  404b87:	shl    rdi,0x4
  404b8b:	lea    r10,[rsp+0x14]
  404b90:	mov    QWORD PTR [rsp+0x20],r8
  404b95:	mov    QWORD PTR [rsp+rdi*1+0x30],r10
  404b9a:	mov    QWORD PTR [rsp+rdi*1+0x38],0x4
  404ba3:	mov    DWORD PTR [rsp+0x28],esi
  404ba7:	test   edx,edx
  404ba9:	je     404bcf <flatcc_builder_create_buffer@@Base+0x10f>
  404bab:	shl    rsi,0x4
  404baf:	add    r8,rdx
  404bb2:	lea    rdi,[rsp+0x1c]
  404bb7:	add    r9d,0x2
  404bbb:	mov    QWORD PTR [rsp+0x20],r8
  404bc0:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  404bc5:	mov    QWORD PTR [rsp+rsi*1+0x38],rdx
  404bca:	mov    DWORD PTR [rsp+0x28],r9d
  404bcf:	test   eax,eax
  404bd1:	je     404bfe <flatcc_builder_create_buffer@@Base+0x13e>
  404bd3:	movsxd rsi,DWORD PTR [rsp+0x28]
  404bd8:	mov    rdi,0x40ac60
  404bdf:	mov    rdx,rsi
  404be2:	add    r8,rax
  404be5:	shl    rsi,0x4
  404be9:	inc    edx
  404beb:	mov    QWORD PTR [rsp+0x20],r8
  404bf0:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  404bf5:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  404bfa:	mov    DWORD PTR [rsp+0x28],edx
  404bfe:	mov    eax,ecx
  404c00:	sub    eax,r8d
  404c03:	lea    edx,[rax+0x4]
  404c06:	test   r13d,r13d
  404c09:	cmovne eax,edx
  404c0c:	test   r12d,r12d
  404c0f:	je     404cc0 <flatcc_builder_create_buffer@@Base+0x200>
  404c15:	mov    edx,DWORD PTR [rbp+0xf8]
  404c1b:	sub    edx,eax
  404c1d:	sub    ebx,eax
  404c1f:	mov    DWORD PTR [rsp+0x14],ebx
  404c23:	mov    ebx,ecx
  404c25:	sub    ebx,r8d
  404c28:	mov    DWORD PTR [rsp+0x18],edx
  404c2c:	cmp    ecx,ebx
  404c2e:	jle    404ccd <flatcc_builder_create_buffer@@Base+0x20d>
  404c34:	mov    rdi,QWORD PTR [rbp+0x38]
  404c38:	mov    edx,DWORD PTR [rsp+0x28]
  404c3c:	lea    rsi,[rsp+0x30]
  404c41:	mov    ecx,ebx
  404c43:	call   QWORD PTR [rbp+0x48]
  404c46:	test   eax,eax
  404c48:	jne    404cf1 <flatcc_builder_create_buffer@@Base+0x231>
  404c4e:	mov    DWORD PTR [rbp+0xf0],ebx
  404c54:	test   ebx,ebx
  404c56:	je     404cf6 <flatcc_builder_create_buffer@@Base+0x236>
  404c5c:	mov    rcx,QWORD PTR [rsp+0xb8]
  404c64:	xor    rcx,QWORD PTR fs:0x28
  404c6d:	mov    eax,ebx
  404c6f:	jne    404cec <flatcc_builder_create_buffer@@Base+0x22c>
  404c71:	add    rsp,0xc0
  404c78:	pop    rbx
  404c79:	pop    rbp
  404c7a:	pop    r12
  404c7c:	pop    r13
  404c7e:	pop    r14
  404c80:	ret    
  404c81:	nop    DWORD PTR [rax+0x0]
  404c88:	lea    rsi,[rsp+0x18]
  404c8d:	mov    QWORD PTR [rsp+0x30],rsi
  404c92:	mov    QWORD PTR [rsp+0x38],0x4
  404c9b:	mov    esi,0x2
  404ca0:	mov    r9d,0x1
  404ca6:	mov    r8d,0x8
  404cac:	jmp    404b84 <flatcc_builder_create_buffer@@Base+0xc4>
  404cb1:	nop    DWORD PTR [rax+0x0]
  404cb8:	xor    ebx,ebx
  404cba:	jmp    404c5c <flatcc_builder_create_buffer@@Base+0x19c>
  404cbc:	nop    DWORD PTR [rax+0x0]
  404cc0:	mov    edx,DWORD PTR [rbp+0xf4]
  404cc6:	sub    edx,eax
  404cc8:	jmp    404c1d <flatcc_builder_create_buffer@@Base+0x15d>
  404ccd:	lea    rcx,[rip+0x5edc]        # 40abb0 <_IO_stdin_used@@Base+0xbb0>
  404cd4:	mov    edx,0x287
  404cd9:	lea    rsi,[rip+0x5498]        # 40a178 <_IO_stdin_used@@Base+0x178>
  404ce0:	lea    rdi,[rip+0x5828]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  404ce7:	call   403130 <__assert_fail@plt>
  404cec:	call   403120 <__stack_chk_fail@plt>
  404cf1:	call   404070 <flatcc_builder_default_alloc@@Base+0x2d0>
  404cf6:	lea    rcx,[rip+0x5e93]        # 40ab90 <_IO_stdin_used@@Base+0xb90>
  404cfd:	mov    edx,0x304
  404d02:	lea    rsi,[rip+0x546f]        # 40a178 <_IO_stdin_used@@Base+0x178>
  404d09:	lea    rdi,[rip+0x57ff]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  404d10:	call   403130 <__assert_fail@plt>
  404d15:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000404d20 <flatcc_builder_create_struct@@Base>:
  404d20:	endbr64 
  404d24:	push   rbp
  404d25:	push   rbx
  404d26:	sub    rsp,0xa8
  404d2d:	mov    rax,QWORD PTR fs:0x28
  404d36:	mov    QWORD PTR [rsp+0x98],rax
  404d3e:	xor    eax,eax
  404d40:	test   cx,cx
  404d43:	je     404e63 <flatcc_builder_create_struct@@Base+0x143>
  404d49:	mov    r8,rdx
  404d4c:	mov    rbx,rdi
  404d4f:	movzx  edx,cx
  404d52:	cmp    cx,WORD PTR [rdi+0xe8]
  404d59:	jbe    404d62 <flatcc_builder_create_struct@@Base+0x42>
  404d5b:	mov    WORD PTR [rdi+0xe8],cx
  404d62:	mov    ecx,DWORD PTR [rbx+0xf0]
  404d68:	dec    edx
  404d6a:	mov    eax,ecx
  404d6c:	sub    eax,r8d
  404d6f:	and    eax,edx
  404d71:	mov    edx,eax
  404d73:	mov    QWORD PTR [rsp],0x0
  404d7b:	mov    DWORD PTR [rsp+0x8],0x0
  404d83:	test   r8,r8
  404d86:	jne    404e18 <flatcc_builder_create_struct@@Base+0xf8>
  404d8c:	test   eax,eax
  404d8e:	je     404e44 <flatcc_builder_create_struct@@Base+0x124>
  404d94:	mov    r8,rdx
  404d97:	mov    esi,0x1
  404d9c:	xor    eax,eax
  404d9e:	mov    rdi,0x40ac60
  404da5:	shl    rax,0x4
  404da9:	mov    QWORD PTR [rsp],r8
  404dad:	mov    QWORD PTR [rsp+rax*1+0x10],rdi
  404db2:	mov    QWORD PTR [rsp+rax*1+0x18],rdx
  404db7:	mov    DWORD PTR [rsp+0x8],esi
  404dbb:	mov    ebp,ecx
  404dbd:	movabs rax,0x10000000f
  404dc7:	sub    ebp,r8d
  404dca:	cmp    r8,rax
  404dcd:	ja     404e44 <flatcc_builder_create_struct@@Base+0x124>
  404dcf:	cmp    ecx,ebp
  404dd1:	jle    404e44 <flatcc_builder_create_struct@@Base+0x124>
  404dd3:	mov    rdi,QWORD PTR [rbx+0x38]
  404dd7:	mov    edx,DWORD PTR [rsp+0x8]
  404ddb:	lea    rsi,[rsp+0x10]
  404de0:	mov    ecx,ebp
  404de2:	call   QWORD PTR [rbx+0x48]
  404de5:	test   eax,eax
  404de7:	jne    404e82 <flatcc_builder_create_struct@@Base+0x162>
  404ded:	mov    DWORD PTR [rbx+0xf0],ebp
  404df3:	mov    eax,ebp
  404df5:	mov    rdi,QWORD PTR [rsp+0x98]
  404dfd:	xor    rdi,QWORD PTR fs:0x28
  404e06:	jne    404e87 <flatcc_builder_create_struct@@Base+0x167>
  404e08:	add    rsp,0xa8
  404e0f:	pop    rbx
  404e10:	pop    rbp
  404e11:	ret    
  404e12:	nop    WORD PTR [rax+rax*1+0x0]
  404e18:	mov    QWORD PTR [rsp],r8
  404e1c:	mov    QWORD PTR [rsp+0x10],rsi
  404e21:	mov    QWORD PTR [rsp+0x18],r8
  404e26:	mov    DWORD PTR [rsp+0x8],0x1
  404e2e:	test   eax,eax
  404e30:	je     404dbb <flatcc_builder_create_struct@@Base+0x9b>
  404e32:	add    r8,rdx
  404e35:	mov    esi,0x2
  404e3a:	mov    eax,0x1
  404e3f:	jmp    404d9e <flatcc_builder_create_struct@@Base+0x7e>
  404e44:	lea    rcx,[rip+0x5d65]        # 40abb0 <_IO_stdin_used@@Base+0xbb0>
  404e4b:	mov    edx,0x287
  404e50:	lea    rsi,[rip+0x5321]        # 40a178 <_IO_stdin_used@@Base+0x178>
  404e57:	lea    rdi,[rip+0x56b1]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  404e5e:	call   403130 <__assert_fail@plt>
  404e63:	lea    rcx,[rip+0x5d06]        # 40ab70 <_IO_stdin_used@@Base+0xb70>
  404e6a:	mov    edx,0x30f
  404e6f:	lea    rsi,[rip+0x5302]        # 40a178 <_IO_stdin_used@@Base+0x178>
  404e76:	lea    rdi,[rip+0x56cd]        # 40a54a <_IO_stdin_used@@Base+0x54a>
  404e7d:	call   403130 <__assert_fail@plt>
  404e82:	call   404070 <flatcc_builder_default_alloc@@Base+0x2d0>
  404e87:	call   403120 <__stack_chk_fail@plt>
  404e8c:	nop    DWORD PTR [rax+0x0]

0000000000404e90 <flatcc_builder_start_buffer@@Base>:
  404e90:	endbr64 
  404e94:	push   r13
  404e96:	mov    r13d,edx
  404e99:	push   r12
  404e9b:	mov    r12d,ecx
  404e9e:	push   rbp
  404e9f:	mov    rbp,rsi
  404ea2:	push   rbx
  404ea3:	mov    rbx,rdi
  404ea6:	sub    rsp,0x8
  404eaa:	movzx  esi,WORD PTR [rdi+0xe8]
  404eb1:	call   4040d0 <flatcc_builder_default_alloc@@Base+0x330>
  404eb6:	test   eax,eax
  404eb8:	jne    404f68 <flatcc_builder_start_buffer@@Base+0xd8>
  404ebe:	movzx  edx,WORD PTR [rbx+0xec]
  404ec5:	mov    rsi,QWORD PTR [rbx+0x30]
  404ec9:	mov    ecx,0x1
  404ece:	mov    WORD PTR [rbx+0xe8],cx
  404ed5:	mov    WORD PTR [rsi+0x22],dx
  404ed9:	movzx  edx,WORD PTR [rbx+0x10c]
  404ee0:	mov    WORD PTR [rbx+0xec],r13w
  404ee8:	mov    WORD PTR [rsi+0x20],dx
  404eec:	mov    edx,DWORD PTR [rbx+0xf8]
  404ef2:	mov    WORD PTR [rbx+0x10c],r12w
  404efa:	mov    DWORD PTR [rsi+0x14],edx
  404efd:	mov    edx,DWORD PTR [rbx+0x100]
  404f03:	mov    DWORD PTR [rsi+0x1c],edx
  404f06:	mov    edx,DWORD PTR [rbx+0xf0]
  404f0c:	mov    DWORD PTR [rbx+0xf8],edx
  404f12:	mov    edx,DWORD PTR [rbx+0xfc]
  404f18:	lea    ecx,[rdx+0x1]
  404f1b:	mov    DWORD PTR [rbx+0x100],edx
  404f21:	mov    edx,DWORD PTR [rbx+0x110]
  404f27:	mov    DWORD PTR [rbx+0xfc],ecx
  404f2d:	mov    DWORD PTR [rsi+0x10],edx
  404f30:	test   rbp,rbp
  404f33:	je     404f58 <flatcc_builder_start_buffer@@Base+0xc8>
  404f35:	mov    edx,DWORD PTR [rbp+0x0]
  404f38:	mov    DWORD PTR [rbx+0x110],edx
  404f3e:	mov    edx,0x1
  404f43:	mov    WORD PTR [rsi+0xe],dx
  404f47:	add    rsp,0x8
  404f4b:	pop    rbx
  404f4c:	pop    rbp
  404f4d:	pop    r12
  404f4f:	pop    r13
  404f51:	ret    
  404f52:	nop    WORD PTR [rax+rax*1+0x0]
  404f58:	mov    rbp,0x40ac60
  404f5f:	jmp    404f35 <flatcc_builder_start_buffer@@Base+0xa5>
  404f61:	nop    DWORD PTR [rax+0x0]
  404f68:	mov    eax,0xffffffff
  404f6d:	jmp    404f47 <flatcc_builder_start_buffer@@Base+0xb7>
  404f6f:	nop

0000000000404f70 <flatcc_builder_end_buffer@@Base>:
  404f70:	endbr64 
  404f74:	push   rbp
  404f75:	xor    eax,eax
  404f77:	push   rbx
  404f78:	sub    rsp,0x8
  404f7c:	movzx  r9d,WORD PTR [rdi+0x10c]
  404f84:	mov    edx,DWORD PTR [rdi+0x100]
  404f8a:	and    r9d,0x2
  404f8e:	test   edx,edx
  404f90:	setne  al
  404f93:	movzx  r9d,r9w
  404f97:	or     r9d,eax
  404f9a:	mov    rax,QWORD PTR [rdi+0x30]
  404f9e:	cmp    WORD PTR [rax+0xe],0x1
  404fa3:	jne    405094 <flatcc_builder_end_buffer@@Base+0x124>
  404fa9:	movzx  edx,WORD PTR [rdi+0xec]
  404fb0:	movzx  eax,WORD PTR [rdi+0xe8]
  404fb7:	mov    rbx,rdi
  404fba:	mov    ecx,esi
  404fbc:	mov    r8d,edx
  404fbf:	cmp    dx,ax
  404fc2:	ja     405088 <flatcc_builder_end_buffer@@Base+0x118>
  404fc8:	movzx  r8d,ax
  404fcc:	lea    rsi,[rbx+0x110]
  404fd3:	mov    rdi,rbx
  404fd6:	call   404ac0 <flatcc_builder_create_buffer@@Base>
  404fdb:	mov    ebp,eax
  404fdd:	test   eax,eax
  404fdf:	je     40507c <flatcc_builder_end_buffer@@Base+0x10c>
  404fe5:	mov    rax,QWORD PTR [rbx+0x30]
  404fe9:	mov    rdi,QWORD PTR [rbx+0x18]
  404fed:	mov    edx,DWORD PTR [rax+0x14]
  404ff0:	xor    esi,esi
  404ff2:	mov    DWORD PTR [rbx+0xf8],edx
  404ff8:	mov    edx,DWORD PTR [rax+0x1c]
  404ffb:	mov    DWORD PTR [rbx+0x100],edx
  405001:	mov    edx,DWORD PTR [rax+0x10]
  405004:	movzx  eax,WORD PTR [rax+0x20]
  405008:	mov    DWORD PTR [rbx+0x110],edx
  40500e:	mov    WORD PTR [rbx+0x10c],ax
  405015:	mov    edx,DWORD PTR [rbx+0x20]
  405018:	call   403140 <memset@plt>
  40501d:	mov    rax,QWORD PTR [rbx+0x30]
  405021:	mov    edi,DWORD PTR [rbx+0x70]
  405024:	mov    edx,DWORD PTR [rax+0x8]
  405027:	mov    esi,DWORD PTR [rax]
  405029:	mov    ecx,DWORD PTR [rax+0x4]
  40502c:	mov    DWORD PTR [rbx+0x20],edx
  40502f:	mov    rdx,rsi
  405032:	sub    edi,edx
  405034:	mov    DWORD PTR [rbx+0x28],esi
  405037:	mov    edx,edi
  405039:	add    rsi,QWORD PTR [rbx+0x68]
  40503d:	cmp    ecx,edi
  40503f:	cmovb  edx,ecx
  405042:	mov    QWORD PTR [rbx+0x18],rsi
  405046:	mov    DWORD PTR [rbx+0x24],edx
  405049:	movzx  edx,WORD PTR [rbx+0xea]
  405050:	mov    DWORD PTR [rax+0x4],ecx
  405053:	cmp    dx,WORD PTR [rbx+0xe8]
  40505a:	jbe    405063 <flatcc_builder_end_buffer@@Base+0xf3>
  40505c:	mov    WORD PTR [rbx+0xe8],dx
  405063:	movzx  edx,WORD PTR [rax+0xc]
  405067:	sub    rax,0x24
  40506b:	dec    DWORD PTR [rbx+0x104]
  405071:	mov    WORD PTR [rbx+0xea],dx
  405078:	mov    QWORD PTR [rbx+0x30],rax
  40507c:	add    rsp,0x8
  405080:	pop    rbx
  405081:	mov    eax,ebp
  405083:	pop    rbp
  405084:	ret    
  405085:	nop    DWORD PTR [rax]
  405088:	mov    WORD PTR [rbx+0xe8],dx
  40508f:	jmp    404fcc <flatcc_builder_end_buffer@@Base+0x5c>
  405094:	lea    rcx,[rip+0x5ab5]        # 40ab50 <_IO_stdin_used@@Base+0xb50>
  40509b:	mov    edx,0x346
  4050a0:	lea    rsi,[rip+0x50d1]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4050a7:	lea    rdi,[rip+0x514a]        # 40a1f8 <_IO_stdin_used@@Base+0x1f8>
  4050ae:	call   403130 <__assert_fail@plt>
  4050b3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4050be:	xchg   ax,ax

00000000004050c0 <flatcc_builder_start_struct@@Base>:
  4050c0:	endbr64 
  4050c4:	push   r12
  4050c6:	push   rbp
  4050c7:	mov    rbp,rsi
  4050ca:	movzx  esi,dx
  4050cd:	push   rbx
  4050ce:	mov    rbx,rdi
  4050d1:	call   4040d0 <flatcc_builder_default_alloc@@Base+0x330>
  4050d6:	test   eax,eax
  4050d8:	jne    405160 <flatcc_builder_start_struct@@Base+0xa0>
  4050de:	mov    rcx,QWORD PTR [rbx+0x30]
  4050e2:	mov    eax,0x2
  4050e7:	mov    WORD PTR [rcx+0xe],ax
  4050eb:	mov    eax,DWORD PTR [rbx+0x28]
  4050ee:	mov    edi,DWORD PTR [rbx+0x70]
  4050f1:	mov    rdx,rax
  4050f4:	sub    edi,edx
  4050f6:	add    rax,QWORD PTR [rbx+0x68]
  4050fa:	mov    QWORD PTR [rbx+0x18],rax
  4050fe:	mov    edx,edi
  405100:	cmp    edi,0xfffffffc
  405103:	ja     405130 <flatcc_builder_start_struct@@Base+0x70>
  405105:	mov    DWORD PTR [rbx+0x24],edi
  405108:	mov    r12d,DWORD PTR [rbx+0x20]
  40510c:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405113:	mov    rsi,r12
  405116:	add    esi,ebp
  405118:	mov    DWORD PTR [rbx+0x20],esi
  40511b:	cmp    esi,edx
  40511d:	jae    405140 <flatcc_builder_start_struct@@Base+0x80>
  40511f:	pop    rbx
  405120:	pop    rbp
  405121:	add    rax,r12
  405124:	pop    r12
  405126:	ret    
  405127:	nop    WORD PTR [rax+rax*1+0x0]
  405130:	mov    DWORD PTR [rbx+0x24],0xfffffffc
  405137:	mov    edx,0xfffffffc
  40513c:	jmp    405108 <flatcc_builder_start_struct@@Base+0x48>
  40513e:	xchg   ax,ax
  405140:	inc    esi
  405142:	mov    edx,0xfffffffc
  405147:	mov    rdi,rbx
  40514a:	call   403d40 <_start@@Base+0xa70>
  40514f:	test   eax,eax
  405151:	jne    405160 <flatcc_builder_start_struct@@Base+0xa0>
  405153:	mov    rax,QWORD PTR [rbx+0x18]
  405157:	jmp    40511f <flatcc_builder_start_struct@@Base+0x5f>
  405159:	nop    DWORD PTR [rax+0x0]
  405160:	pop    rbx
  405161:	pop    rbp
  405162:	xor    eax,eax
  405164:	pop    r12
  405166:	ret    
  405167:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405170 <flatcc_builder_struct_edit@@Base>:
  405170:	endbr64 
  405174:	mov    rax,QWORD PTR [rdi+0x18]
  405178:	ret    
  405179:	nop    DWORD PTR [rax+0x0]

0000000000405180 <flatcc_builder_end_struct@@Base>:
  405180:	endbr64 
  405184:	push   rbp
  405185:	push   rbx
  405186:	sub    rsp,0x8
  40518a:	mov    rax,QWORD PTR [rdi+0x30]
  40518e:	cmp    WORD PTR [rax+0xe],0x2
  405193:	jne    405236 <flatcc_builder_end_struct@@Base+0xb6>
  405199:	movzx  ecx,WORD PTR [rdi+0xea]
  4051a0:	mov    edx,DWORD PTR [rdi+0x20]
  4051a3:	mov    rsi,QWORD PTR [rdi+0x18]
  4051a7:	mov    rbx,rdi
  4051aa:	call   404d20 <flatcc_builder_create_struct@@Base>
  4051af:	mov    ebp,eax
  4051b1:	test   eax,eax
  4051b3:	jne    4051c0 <flatcc_builder_end_struct@@Base+0x40>
  4051b5:	add    rsp,0x8
  4051b9:	pop    rbx
  4051ba:	mov    eax,ebp
  4051bc:	pop    rbp
  4051bd:	ret    
  4051be:	xchg   ax,ax
  4051c0:	mov    edx,DWORD PTR [rbx+0x20]
  4051c3:	mov    rdi,QWORD PTR [rbx+0x18]
  4051c7:	xor    esi,esi
  4051c9:	call   403140 <memset@plt>
  4051ce:	mov    rax,QWORD PTR [rbx+0x30]
  4051d2:	mov    edi,DWORD PTR [rbx+0x70]
  4051d5:	mov    edx,DWORD PTR [rax+0x8]
  4051d8:	mov    esi,DWORD PTR [rax]
  4051da:	mov    ecx,DWORD PTR [rax+0x4]
  4051dd:	mov    DWORD PTR [rbx+0x20],edx
  4051e0:	mov    rdx,rsi
  4051e3:	sub    edi,edx
  4051e5:	mov    DWORD PTR [rbx+0x28],esi
  4051e8:	mov    edx,edi
  4051ea:	add    rsi,QWORD PTR [rbx+0x68]
  4051ee:	cmp    ecx,edi
  4051f0:	cmovb  edx,ecx
  4051f3:	mov    QWORD PTR [rbx+0x18],rsi
  4051f7:	mov    DWORD PTR [rbx+0x24],edx
  4051fa:	movzx  edx,WORD PTR [rbx+0xea]
  405201:	mov    DWORD PTR [rax+0x4],ecx
  405204:	cmp    dx,WORD PTR [rbx+0xe8]
  40520b:	jbe    405214 <flatcc_builder_end_struct@@Base+0x94>
  40520d:	mov    WORD PTR [rbx+0xe8],dx
  405214:	movzx  edx,WORD PTR [rax+0xc]
  405218:	dec    DWORD PTR [rbx+0x104]
  40521e:	sub    rax,0x24
  405222:	mov    QWORD PTR [rbx+0x30],rax
  405226:	mov    WORD PTR [rbx+0xea],dx
  40522d:	add    rsp,0x8
  405231:	mov    eax,ebp
  405233:	pop    rbx
  405234:	pop    rbp
  405235:	ret    
  405236:	lea    rcx,[rip+0x58f3]        # 40ab30 <_IO_stdin_used@@Base+0xb30>
  40523d:	mov    edx,0x368
  405242:	lea    rsi,[rip+0x4f2f]        # 40a178 <_IO_stdin_used@@Base+0x178>
  405249:	lea    rdi,[rip+0x4fd8]        # 40a228 <_IO_stdin_used@@Base+0x228>
  405250:	call   403130 <__assert_fail@plt>
  405255:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000405260 <flatcc_builder_extend_vector@@Base>:
  405260:	endbr64 
  405264:	push   rbp
  405265:	mov    eax,esi
  405267:	push   rbx
  405268:	sub    rsp,0x8
  40526c:	mov    rdx,QWORD PTR [rdi+0x30]
  405270:	add    eax,DWORD PTR [rdx+0x14]
  405273:	setb   cl
  405276:	cmp    DWORD PTR [rdx+0x18],eax
  405279:	jb     4052c4 <flatcc_builder_extend_vector@@Base+0x64>
  40527b:	movzx  ecx,cl
  40527e:	test   ecx,ecx
  405280:	jne    4052c4 <flatcc_builder_extend_vector@@Base+0x64>
  405282:	imul   esi,DWORD PTR [rdx+0x10]
  405286:	mov    ebp,DWORD PTR [rdi+0x20]
  405289:	mov    DWORD PTR [rdx+0x14],eax
  40528c:	add    esi,ebp
  40528e:	mov    rbx,rdi
  405291:	mov    DWORD PTR [rdi+0x20],esi
  405294:	cmp    esi,DWORD PTR [rdi+0x24]
  405297:	jae    4052b0 <flatcc_builder_extend_vector@@Base+0x50>
  405299:	mov    rax,QWORD PTR [rbx+0x18]
  40529d:	add    rax,rbp
  4052a0:	add    rsp,0x8
  4052a4:	pop    rbx
  4052a5:	pop    rbp
  4052a6:	ret    
  4052a7:	nop    WORD PTR [rax+rax*1+0x0]
  4052b0:	inc    esi
  4052b2:	mov    edx,0xfffffffc
  4052b7:	call   403d40 <_start@@Base+0xa70>
  4052bc:	test   eax,eax
  4052be:	je     405299 <flatcc_builder_extend_vector@@Base+0x39>
  4052c0:	xor    eax,eax
  4052c2:	jmp    4052a0 <flatcc_builder_extend_vector@@Base+0x40>
  4052c4:	call   4040a0 <flatcc_builder_default_alloc@@Base+0x300>
  4052c9:	nop    DWORD PTR [rax+0x0]

00000000004052d0 <flatcc_builder_vector_push@@Base>:
  4052d0:	endbr64 
  4052d4:	push   r13
  4052d6:	push   r12
  4052d8:	push   rbp
  4052d9:	push   rbx
  4052da:	sub    rsp,0x8
  4052de:	mov    rax,QWORD PTR [rdi+0x30]
  4052e2:	cmp    WORD PTR [rax+0xe],0x4
  4052e7:	jne    40534d <flatcc_builder_vector_push@@Base+0x7d>
  4052e9:	mov    edx,DWORD PTR [rax+0x14]
  4052ec:	cmp    edx,DWORD PTR [rax+0x18]
  4052ef:	ja     40536c <flatcc_builder_vector_push@@Base+0x9c>
  4052f1:	mov    ebp,DWORD PTR [rdi+0x20]
  4052f4:	mov    r12d,DWORD PTR [rax+0x10]
  4052f8:	mov    rcx,rbp
  4052fb:	inc    edx
  4052fd:	add    ecx,r12d
  405300:	mov    DWORD PTR [rax+0x14],edx
  405303:	mov    rbx,rdi
  405306:	mov    r13,rsi
  405309:	mov    DWORD PTR [rdi+0x20],ecx
  40530c:	cmp    ecx,DWORD PTR [rdi+0x24]
  40530f:	jae    405338 <flatcc_builder_vector_push@@Base+0x68>
  405311:	add    rbp,QWORD PTR [rbx+0x18]
  405315:	je     405325 <flatcc_builder_vector_push@@Base+0x55>
  405317:	mov    edx,r12d
  40531a:	mov    rsi,r13
  40531d:	mov    rdi,rbp
  405320:	call   403170 <memcpy@plt>
  405325:	add    rsp,0x8
  405329:	pop    rbx
  40532a:	mov    rax,rbp
  40532d:	pop    rbp
  40532e:	pop    r12
  405330:	pop    r13
  405332:	ret    
  405333:	nop    DWORD PTR [rax+rax*1+0x0]
  405338:	lea    esi,[rcx+0x1]
  40533b:	mov    edx,0xfffffffc
  405340:	call   403d40 <_start@@Base+0xa70>
  405345:	test   eax,eax
  405347:	je     405311 <flatcc_builder_vector_push@@Base+0x41>
  405349:	xor    ebp,ebp
  40534b:	jmp    405325 <flatcc_builder_vector_push@@Base+0x55>
  40534d:	lea    rcx,[rip+0x579c]        # 40aaf0 <_IO_stdin_used@@Base+0xaf0>
  405354:	mov    edx,0x38b
  405359:	lea    rsi,[rip+0x4e18]        # 40a178 <_IO_stdin_used@@Base+0x178>
  405360:	lea    rdi,[rip+0x4ef1]        # 40a258 <_IO_stdin_used@@Base+0x258>
  405367:	call   403130 <__assert_fail@plt>
  40536c:	lea    rcx,[rip+0x577d]        # 40aaf0 <_IO_stdin_used@@Base+0xaf0>
  405373:	mov    edx,0x38c
  405378:	lea    rsi,[rip+0x4df9]        # 40a178 <_IO_stdin_used@@Base+0x178>
  40537f:	lea    rdi,[rip+0x4f02]        # 40a288 <_IO_stdin_used@@Base+0x288>
  405386:	call   403130 <__assert_fail@plt>
  40538b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405390 <flatcc_builder_append_vector@@Base>:
  405390:	endbr64 
  405394:	push   r13
  405396:	push   r12
  405398:	push   rbp
  405399:	push   rbx
  40539a:	sub    rsp,0x8
  40539e:	mov    rax,QWORD PTR [rdi+0x30]
  4053a2:	cmp    WORD PTR [rax+0xe],0x4
  4053a7:	jne    405416 <flatcc_builder_append_vector@@Base+0x86>
  4053a9:	mov    ecx,edx
  4053ab:	mov    r13,rsi
  4053ae:	xor    esi,esi
  4053b0:	add    ecx,DWORD PTR [rax+0x14]
  4053b3:	setb   sil
  4053b7:	cmp    DWORD PTR [rax+0x18],ecx
  4053ba:	jb     405435 <flatcc_builder_append_vector@@Base+0xa5>
  4053bc:	test   esi,esi
  4053be:	jne    405435 <flatcc_builder_append_vector@@Base+0xa5>
  4053c0:	mov    ebx,DWORD PTR [rax+0x10]
  4053c3:	mov    r12d,DWORD PTR [rdi+0x20]
  4053c7:	imul   ebx,edx
  4053ca:	mov    rdx,r12
  4053cd:	mov    DWORD PTR [rax+0x14],ecx
  4053d0:	add    edx,ebx
  4053d2:	mov    rbp,rdi
  4053d5:	mov    DWORD PTR [rdi+0x20],edx
  4053d8:	cmp    edx,DWORD PTR [rdi+0x24]
  4053db:	jae    405400 <flatcc_builder_append_vector@@Base+0x70>
  4053dd:	add    r12,QWORD PTR [rbp+0x18]
  4053e1:	je     4053f0 <flatcc_builder_append_vector@@Base+0x60>
  4053e3:	mov    edx,ebx
  4053e5:	mov    rsi,r13
  4053e8:	mov    rdi,r12
  4053eb:	call   403170 <memcpy@plt>
  4053f0:	add    rsp,0x8
  4053f4:	pop    rbx
  4053f5:	pop    rbp
  4053f6:	mov    rax,r12
  4053f9:	pop    r12
  4053fb:	pop    r13
  4053fd:	ret    
  4053fe:	xchg   ax,ax
  405400:	lea    esi,[rdx+0x1]
  405403:	mov    edx,0xfffffffc
  405408:	call   403d40 <_start@@Base+0xa70>
  40540d:	test   eax,eax
  40540f:	je     4053dd <flatcc_builder_append_vector@@Base+0x4d>
  405411:	xor    r12d,r12d
  405414:	jmp    4053f0 <flatcc_builder_append_vector@@Base+0x60>
  405416:	lea    rcx,[rip+0x56b3]        # 40aad0 <_IO_stdin_used@@Base+0xad0>
  40541d:	mov    edx,0x393
  405422:	lea    rsi,[rip+0x4d4f]        # 40a178 <_IO_stdin_used@@Base+0x178>
  405429:	lea    rdi,[rip+0x4e28]        # 40a258 <_IO_stdin_used@@Base+0x258>
  405430:	call   403130 <__assert_fail@plt>
  405435:	call   4040a0 <flatcc_builder_default_alloc@@Base+0x300>
  40543a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405440 <flatcc_builder_extend_offset_vector@@Base>:
  405440:	endbr64 
  405444:	push   rbp
  405445:	mov    edx,esi
  405447:	push   rbx
  405448:	sub    rsp,0x8
  40544c:	mov    rax,QWORD PTR [rdi+0x30]
  405450:	add    edx,DWORD PTR [rax+0x14]
  405453:	jb     405495 <flatcc_builder_extend_offset_vector@@Base+0x55>
  405455:	cmp    edx,0x3fffffff
  40545b:	ja     405495 <flatcc_builder_extend_offset_vector@@Base+0x55>
  40545d:	mov    ebp,DWORD PTR [rdi+0x20]
  405460:	mov    DWORD PTR [rax+0x14],edx
  405463:	lea    eax,[rbp+rsi*4+0x0]
  405467:	mov    rbx,rdi
  40546a:	mov    DWORD PTR [rdi+0x20],eax
  40546d:	cmp    eax,DWORD PTR [rdi+0x24]
  405470:	jae    405480 <flatcc_builder_extend_offset_vector@@Base+0x40>
  405472:	mov    rax,QWORD PTR [rbx+0x18]
  405476:	add    rax,rbp
  405479:	add    rsp,0x8
  40547d:	pop    rbx
  40547e:	pop    rbp
  40547f:	ret    
  405480:	lea    esi,[rax+0x1]
  405483:	mov    edx,0xfffffffc
  405488:	call   403d40 <_start@@Base+0xa70>
  40548d:	test   eax,eax
  40548f:	je     405472 <flatcc_builder_extend_offset_vector@@Base+0x32>
  405491:	xor    eax,eax
  405493:	jmp    405479 <flatcc_builder_extend_offset_vector@@Base+0x39>
  405495:	call   4040a0 <flatcc_builder_default_alloc@@Base+0x300>
  40549a:	nop    WORD PTR [rax+rax*1+0x0]

00000000004054a0 <flatcc_builder_offset_vector_push@@Base>:
  4054a0:	endbr64 
  4054a4:	push   r12
  4054a6:	push   rbp
  4054a7:	push   rbx
  4054a8:	mov    rdx,QWORD PTR [rdi+0x30]
  4054ac:	cmp    WORD PTR [rdx+0xe],0x5
  4054b1:	jne    405508 <flatcc_builder_offset_vector_push@@Base+0x68>
  4054b3:	mov    eax,DWORD PTR [rdx+0x14]
  4054b6:	cmp    eax,0x3fffffff
  4054bb:	je     405501 <flatcc_builder_offset_vector_push@@Base+0x61>
  4054bd:	mov    ebp,DWORD PTR [rdi+0x20]
  4054c0:	inc    eax
  4054c2:	mov    DWORD PTR [rdx+0x14],eax
  4054c5:	lea    edx,[rbp+0x4]
  4054c8:	mov    rbx,rdi
  4054cb:	mov    r12d,esi
  4054ce:	mov    DWORD PTR [rdi+0x20],edx
  4054d1:	cmp    edx,DWORD PTR [rdi+0x24]
  4054d4:	jae    4054f0 <flatcc_builder_offset_vector_push@@Base+0x50>
  4054d6:	mov    rax,rbp
  4054d9:	add    rax,QWORD PTR [rbx+0x18]
  4054dd:	je     4054e2 <flatcc_builder_offset_vector_push@@Base+0x42>
  4054df:	mov    DWORD PTR [rax],r12d
  4054e2:	pop    rbx
  4054e3:	pop    rbp
  4054e4:	pop    r12
  4054e6:	ret    
  4054e7:	nop    WORD PTR [rax+rax*1+0x0]
  4054f0:	lea    esi,[rbp+0x5]
  4054f3:	mov    edx,0xfffffffc
  4054f8:	call   403d40 <_start@@Base+0xa70>
  4054fd:	test   eax,eax
  4054ff:	je     4054d6 <flatcc_builder_offset_vector_push@@Base+0x36>
  405501:	pop    rbx
  405502:	pop    rbp
  405503:	xor    eax,eax
  405505:	pop    r12
  405507:	ret    
  405508:	lea    rcx,[rip+0x5591]        # 40aaa0 <_IO_stdin_used@@Base+0xaa0>
  40550f:	mov    edx,0x3a6
  405514:	lea    rsi,[rip+0x4c5d]        # 40a178 <_IO_stdin_used@@Base+0x178>
  40551b:	lea    rdi,[rip+0x4da6]        # 40a2c8 <_IO_stdin_used@@Base+0x2c8>
  405522:	call   403130 <__assert_fail@plt>
  405527:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405530 <flatcc_builder_append_offset_vector@@Base>:
  405530:	endbr64 
  405534:	push   r13
  405536:	push   r12
  405538:	push   rbp
  405539:	push   rbx
  40553a:	sub    rsp,0x8
  40553e:	mov    rax,QWORD PTR [rdi+0x30]
  405542:	cmp    WORD PTR [rax+0xe],0x5
  405547:	jne    4055b6 <flatcc_builder_append_offset_vector@@Base+0x86>
  405549:	mov    ecx,edx
  40554b:	add    ecx,DWORD PTR [rax+0x14]
  40554e:	jb     4055d5 <flatcc_builder_append_offset_vector@@Base+0xa5>
  405554:	cmp    ecx,0x3fffffff
  40555a:	ja     4055d5 <flatcc_builder_append_offset_vector@@Base+0xa5>
  40555c:	mov    r12d,DWORD PTR [rdi+0x20]
  405560:	lea    ebx,[rdx*4+0x0]
  405567:	mov    rdx,r12
  40556a:	add    edx,ebx
  40556c:	mov    DWORD PTR [rax+0x14],ecx
  40556f:	mov    rbp,rdi
  405572:	mov    r13,rsi
  405575:	mov    DWORD PTR [rdi+0x20],edx
  405578:	cmp    edx,DWORD PTR [rdi+0x24]
  40557b:	jae    4055a0 <flatcc_builder_append_offset_vector@@Base+0x70>
  40557d:	add    r12,QWORD PTR [rbp+0x18]
  405581:	je     405590 <flatcc_builder_append_offset_vector@@Base+0x60>
  405583:	mov    edx,ebx
  405585:	mov    rsi,r13
  405588:	mov    rdi,r12
  40558b:	call   403170 <memcpy@plt>
  405590:	add    rsp,0x8
  405594:	pop    rbx
  405595:	pop    rbp
  405596:	mov    rax,r12
  405599:	pop    r12
  40559b:	pop    r13
  40559d:	ret    
  40559e:	xchg   ax,ax
  4055a0:	lea    esi,[rdx+0x1]
  4055a3:	mov    edx,0xfffffffc
  4055a8:	call   403d40 <_start@@Base+0xa70>
  4055ad:	test   eax,eax
  4055af:	je     40557d <flatcc_builder_append_offset_vector@@Base+0x4d>
  4055b1:	xor    r12d,r12d
  4055b4:	jmp    405590 <flatcc_builder_append_offset_vector@@Base+0x60>
  4055b6:	lea    rcx,[rip+0x54a3]        # 40aa60 <_IO_stdin_used@@Base+0xa60>
  4055bd:	mov    edx,0x3b4
  4055c2:	lea    rsi,[rip+0x4baf]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4055c9:	lea    rdi,[rip+0x4cf8]        # 40a2c8 <_IO_stdin_used@@Base+0x2c8>
  4055d0:	call   403130 <__assert_fail@plt>
  4055d5:	call   4040a0 <flatcc_builder_default_alloc@@Base+0x300>
  4055da:	nop    WORD PTR [rax+rax*1+0x0]

00000000004055e0 <flatcc_builder_extend_string@@Base>:
  4055e0:	endbr64 
  4055e4:	push   rbp
  4055e5:	push   rbx
  4055e6:	sub    rsp,0x8
  4055ea:	mov    rax,QWORD PTR [rdi+0x30]
  4055ee:	cmp    WORD PTR [rax+0xe],0x6
  4055f3:	jne    405639 <flatcc_builder_extend_string@@Base+0x59>
  4055f5:	mov    edx,esi
  4055f7:	add    edx,DWORD PTR [rax+0x14]
  4055fa:	jb     405634 <flatcc_builder_extend_string@@Base+0x54>
  4055fc:	mov    ebp,DWORD PTR [rdi+0x20]
  4055ff:	mov    DWORD PTR [rax+0x14],edx
  405602:	add    esi,ebp
  405604:	mov    rbx,rdi
  405607:	mov    DWORD PTR [rdi+0x20],esi
  40560a:	cmp    esi,DWORD PTR [rdi+0x24]
  40560d:	jae    405620 <flatcc_builder_extend_string@@Base+0x40>
  40560f:	mov    rax,QWORD PTR [rbx+0x18]
  405613:	add    rax,rbp
  405616:	add    rsp,0x8
  40561a:	pop    rbx
  40561b:	pop    rbp
  40561c:	ret    
  40561d:	nop    DWORD PTR [rax]
  405620:	inc    esi
  405622:	mov    edx,0xfffffffc
  405627:	call   403d40 <_start@@Base+0xa70>
  40562c:	test   eax,eax
  40562e:	je     40560f <flatcc_builder_extend_string@@Base+0x2f>
  405630:	xor    eax,eax
  405632:	jmp    405616 <flatcc_builder_extend_string@@Base+0x36>
  405634:	call   4040a0 <flatcc_builder_default_alloc@@Base+0x300>
  405639:	lea    rcx,[rip+0x53f0]        # 40aa30 <_IO_stdin_used@@Base+0xa30>
  405640:	mov    edx,0x3bd
  405645:	lea    rsi,[rip+0x4b2c]        # 40a178 <_IO_stdin_used@@Base+0x178>
  40564c:	lea    rdi,[rip+0x4cad]        # 40a300 <_IO_stdin_used@@Base+0x300>
  405653:	call   403130 <__assert_fail@plt>
  405658:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405660 <flatcc_builder_append_string@@Base>:
  405660:	endbr64 
  405664:	push   r13
  405666:	push   r12
  405668:	push   rbp
  405669:	push   rbx
  40566a:	sub    rsp,0x8
  40566e:	mov    rax,QWORD PTR [rdi+0x30]
  405672:	cmp    WORD PTR [rax+0xe],0x6
  405677:	jne    4056db <flatcc_builder_append_string@@Base+0x7b>
  405679:	mov    rbp,rdx
  40567c:	add    edx,DWORD PTR [rax+0x14]
  40567f:	jb     4056d6 <flatcc_builder_append_string@@Base+0x76>
  405681:	mov    r12d,DWORD PTR [rdi+0x20]
  405685:	mov    DWORD PTR [rax+0x14],edx
  405688:	mov    rdx,r12
  40568b:	add    edx,ebp
  40568d:	mov    rbx,rdi
  405690:	mov    r13,rsi
  405693:	mov    DWORD PTR [rdi+0x20],edx
  405696:	cmp    edx,DWORD PTR [rdi+0x24]
  405699:	jae    4056c0 <flatcc_builder_append_string@@Base+0x60>
  40569b:	add    r12,QWORD PTR [rbx+0x18]
  40569f:	je     4056ae <flatcc_builder_append_string@@Base+0x4e>
  4056a1:	mov    edx,ebp
  4056a3:	mov    rsi,r13
  4056a6:	mov    rdi,r12
  4056a9:	call   403170 <memcpy@plt>
  4056ae:	add    rsp,0x8
  4056b2:	pop    rbx
  4056b3:	pop    rbp
  4056b4:	mov    rax,r12
  4056b7:	pop    r12
  4056b9:	pop    r13
  4056bb:	ret    
  4056bc:	nop    DWORD PTR [rax+0x0]
  4056c0:	lea    esi,[rdx+0x1]
  4056c3:	mov    edx,0xfffffffc
  4056c8:	call   403d40 <_start@@Base+0xa70>
  4056cd:	test   eax,eax
  4056cf:	je     40569b <flatcc_builder_append_string@@Base+0x3b>
  4056d1:	xor    r12d,r12d
  4056d4:	jmp    4056ae <flatcc_builder_append_string@@Base+0x4e>
  4056d6:	call   4040a0 <flatcc_builder_default_alloc@@Base+0x300>
  4056db:	lea    rcx,[rip+0x532e]        # 40aa10 <_IO_stdin_used@@Base+0xa10>
  4056e2:	mov    edx,0x3c6
  4056e7:	lea    rsi,[rip+0x4a8a]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4056ee:	lea    rdi,[rip+0x4c0b]        # 40a300 <_IO_stdin_used@@Base+0x300>
  4056f5:	call   403130 <__assert_fail@plt>
  4056fa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405700 <flatcc_builder_append_string_str@@Base>:
  405700:	endbr64 
  405704:	push   rbp
  405705:	mov    rbp,rdi
  405708:	mov    rdi,rsi
  40570b:	push   rbx
  40570c:	mov    rbx,rsi
  40570f:	sub    rsp,0x8
  405713:	call   403110 <strlen@plt>
  405718:	add    rsp,0x8
  40571c:	mov    rsi,rbx
  40571f:	pop    rbx
  405720:	mov    rdi,rbp
  405723:	mov    rdx,rax
  405726:	pop    rbp
  405727:	jmp    405660 <flatcc_builder_append_string@@Base>
  40572c:	nop    DWORD PTR [rax+0x0]

0000000000405730 <flatcc_builder_append_string_strn@@Base>:
  405730:	endbr64 
  405734:	push   r12
  405736:	mov    r12,rdi
  405739:	push   rbp
  40573a:	mov    rbp,rsi
  40573d:	mov    rdi,rbp
  405740:	push   rbx
  405741:	xor    esi,esi
  405743:	mov    rbx,rdx
  405746:	call   403150 <memchr@plt>
  40574b:	mov    rdx,rax
  40574e:	sub    rdx,rbp
  405751:	test   rax,rax
  405754:	cmovne rbx,rdx
  405758:	mov    rsi,rbp
  40575b:	mov    rdx,rbx
  40575e:	pop    rbx
  40575f:	pop    rbp
  405760:	mov    rdi,r12
  405763:	pop    r12
  405765:	jmp    405660 <flatcc_builder_append_string@@Base>
  40576a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405770 <flatcc_builder_truncate_vector@@Base>:
  405770:	endbr64 
  405774:	sub    rsp,0x8
  405778:	mov    rax,QWORD PTR [rdi+0x30]
  40577c:	cmp    WORD PTR [rax+0xe],0x4
  405781:	jne    4057b6 <flatcc_builder_truncate_vector@@Base+0x46>
  405783:	mov    ecx,DWORD PTR [rax+0x14]
  405786:	mov    rdx,rcx
  405789:	cmp    rcx,rsi
  40578c:	jb     4057d5 <flatcc_builder_truncate_vector@@Base+0x65>
  40578e:	sub    edx,esi
  405790:	mov    DWORD PTR [rax+0x14],edx
  405793:	imul   esi,DWORD PTR [rax+0x10]
  405797:	mov    eax,DWORD PTR [rdi+0x20]
  40579a:	mov    edx,esi
  40579c:	sub    eax,esi
  40579e:	mov    DWORD PTR [rdi+0x20],eax
  4057a1:	add    rax,QWORD PTR [rdi+0x18]
  4057a5:	mov    rdi,rax
  4057a8:	xor    esi,esi
  4057aa:	call   403140 <memset@plt>
  4057af:	xor    eax,eax
  4057b1:	add    rsp,0x8
  4057b5:	ret    
  4057b6:	lea    rcx,[rip+0x5233]        # 40a9f0 <_IO_stdin_used@@Base+0x9f0>
  4057bd:	mov    edx,0x3d9
  4057c2:	lea    rsi,[rip+0x49af]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4057c9:	lea    rdi,[rip+0x4a88]        # 40a258 <_IO_stdin_used@@Base+0x258>
  4057d0:	call   403130 <__assert_fail@plt>
  4057d5:	lea    rcx,[rip+0x5214]        # 40a9f0 <_IO_stdin_used@@Base+0x9f0>
  4057dc:	mov    edx,0x3da
  4057e1:	lea    rsi,[rip+0x4990]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4057e8:	lea    rdi,[rip+0x4b41]        # 40a330 <_IO_stdin_used@@Base+0x330>
  4057ef:	call   403130 <__assert_fail@plt>
  4057f4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4057ff:	nop

0000000000405800 <flatcc_builder_truncate_offset_vector@@Base>:
  405800:	endbr64 
  405804:	sub    rsp,0x8
  405808:	mov    rax,QWORD PTR [rdi+0x30]
  40580c:	cmp    WORD PTR [rax+0xe],0x5
  405811:	jne    405842 <flatcc_builder_truncate_offset_vector@@Base+0x42>
  405813:	mov    edx,DWORD PTR [rax+0x14]
  405816:	cmp    edx,esi
  405818:	jb     405861 <flatcc_builder_truncate_offset_vector@@Base+0x61>
  40581a:	sub    edx,esi
  40581c:	mov    DWORD PTR [rax+0x14],edx
  40581f:	imul   esi,DWORD PTR [rax+0x10]
  405823:	mov    eax,DWORD PTR [rdi+0x20]
  405826:	mov    edx,esi
  405828:	sub    eax,esi
  40582a:	mov    DWORD PTR [rdi+0x20],eax
  40582d:	add    rax,QWORD PTR [rdi+0x18]
  405831:	mov    rdi,rax
  405834:	xor    esi,esi
  405836:	call   403140 <memset@plt>
  40583b:	xor    eax,eax
  40583d:	add    rsp,0x8
  405841:	ret    
  405842:	lea    rcx,[rip+0x5177]        # 40a9c0 <_IO_stdin_used@@Base+0x9c0>
  405849:	mov    edx,0x3e2
  40584e:	lea    rsi,[rip+0x4923]        # 40a178 <_IO_stdin_used@@Base+0x178>
  405855:	lea    rdi,[rip+0x4a6c]        # 40a2c8 <_IO_stdin_used@@Base+0x2c8>
  40585c:	call   403130 <__assert_fail@plt>
  405861:	lea    rcx,[rip+0x5158]        # 40a9c0 <_IO_stdin_used@@Base+0x9c0>
  405868:	mov    edx,0x3e3
  40586d:	lea    rsi,[rip+0x4904]        # 40a178 <_IO_stdin_used@@Base+0x178>
  405874:	lea    rdi,[rip+0x4add]        # 40a358 <_IO_stdin_used@@Base+0x358>
  40587b:	call   403130 <__assert_fail@plt>

0000000000405880 <flatcc_builder_truncate_string@@Base>:
  405880:	endbr64 
  405884:	sub    rsp,0x8
  405888:	mov    rdx,QWORD PTR [rdi+0x30]
  40588c:	cmp    WORD PTR [rdx+0xe],0x6
  405891:	jne    4058c3 <flatcc_builder_truncate_string@@Base+0x43>
  405893:	mov    ecx,DWORD PTR [rdx+0x14]
  405896:	mov    rax,rcx
  405899:	cmp    rcx,rsi
  40589c:	jb     4058e2 <flatcc_builder_truncate_string@@Base+0x62>
  40589e:	sub    eax,esi
  4058a0:	mov    DWORD PTR [rdx+0x14],eax
  4058a3:	mov    rdx,rsi
  4058a6:	mov    eax,DWORD PTR [rdi+0x20]
  4058a9:	sub    eax,esi
  4058ab:	mov    DWORD PTR [rdi+0x20],eax
  4058ae:	add    rax,QWORD PTR [rdi+0x18]
  4058b2:	mov    rdi,rax
  4058b5:	xor    esi,esi
  4058b7:	call   403140 <memset@plt>
  4058bc:	xor    eax,eax
  4058be:	add    rsp,0x8
  4058c2:	ret    
  4058c3:	lea    rcx,[rip+0x50d6]        # 40a9a0 <_IO_stdin_used@@Base+0x9a0>
  4058ca:	mov    edx,0x3eb
  4058cf:	lea    rsi,[rip+0x48a2]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4058d6:	lea    rdi,[rip+0x4a23]        # 40a300 <_IO_stdin_used@@Base+0x300>
  4058dd:	call   403130 <__assert_fail@plt>
  4058e2:	lea    rcx,[rip+0x50b7]        # 40a9a0 <_IO_stdin_used@@Base+0x9a0>
  4058e9:	mov    edx,0x3ec
  4058ee:	lea    rsi,[rip+0x4883]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4058f5:	lea    rdi,[rip+0x4a9c]        # 40a398 <_IO_stdin_used@@Base+0x398>
  4058fc:	call   403130 <__assert_fail@plt>
  405901:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40590c:	nop    DWORD PTR [rax+0x0]

0000000000405910 <flatcc_builder_start_vector@@Base>:
  405910:	endbr64 
  405914:	push   r12
  405916:	cmp    dx,0x4
  40591a:	mov    r12,rcx
  40591d:	push   rbp
  40591e:	mov    rbp,rsi
  405921:	mov    esi,0x4
  405926:	push   rbx
  405927:	cmovae esi,edx
  40592a:	mov    rbx,rdi
  40592d:	movzx  esi,si
  405930:	call   4040d0 <flatcc_builder_default_alloc@@Base+0x330>
  405935:	test   eax,eax
  405937:	jne    405980 <flatcc_builder_start_vector@@Base+0x70>
  405939:	mov    rsi,QWORD PTR [rbx+0x30]
  40593d:	mov    edx,0x4
  405942:	mov    WORD PTR [rsi+0xe],dx
  405946:	mov    edx,DWORD PTR [rbx+0x28]
  405949:	mov    DWORD PTR [rsi+0x10],ebp
  40594c:	mov    rcx,rdx
  40594f:	add    rdx,QWORD PTR [rbx+0x68]
  405953:	mov    DWORD PTR [rsi+0x14],0x0
  40595a:	mov    DWORD PTR [rsi+0x18],r12d
  40595e:	mov    QWORD PTR [rbx+0x18],rdx
  405962:	mov    edx,DWORD PTR [rbx+0x70]
  405965:	sub    edx,ecx
  405967:	mov    ecx,0xfffffffc
  40596c:	cmp    edx,ecx
  40596e:	cmova  edx,ecx
  405971:	mov    DWORD PTR [rbx+0x24],edx
  405974:	mov    DWORD PTR [rsi+0x4],ecx
  405977:	pop    rbx
  405978:	pop    rbp
  405979:	pop    r12
  40597b:	ret    
  40597c:	nop    DWORD PTR [rax+0x0]
  405980:	mov    eax,0xffffffff
  405985:	jmp    405977 <flatcc_builder_start_vector@@Base+0x67>
  405987:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405990 <flatcc_builder_start_offset_vector@@Base>:
  405990:	endbr64 
  405994:	push   rbx
  405995:	mov    esi,0x4
  40599a:	mov    rbx,rdi
  40599d:	call   4040d0 <flatcc_builder_default_alloc@@Base+0x330>
  4059a2:	test   eax,eax
  4059a4:	jne    4059e0 <flatcc_builder_start_offset_vector@@Base+0x50>
  4059a6:	mov    rcx,QWORD PTR [rbx+0x30]
  4059aa:	xor    edx,edx
  4059ac:	mov    QWORD PTR [rcx+0xe],0x40005
  4059b4:	mov    WORD PTR [rcx+0x16],dx
  4059b8:	mov    edx,DWORD PTR [rbx+0x28]
  4059bb:	mov    rsi,rdx
  4059be:	add    rdx,QWORD PTR [rbx+0x68]
  4059c2:	mov    QWORD PTR [rbx+0x18],rdx
  4059c6:	mov    edx,DWORD PTR [rbx+0x70]
  4059c9:	sub    edx,esi
  4059cb:	mov    esi,0xfffffffc
  4059d0:	cmp    edx,esi
  4059d2:	cmova  edx,esi
  4059d5:	mov    DWORD PTR [rbx+0x24],edx
  4059d8:	mov    DWORD PTR [rcx+0x4],esi
  4059db:	pop    rbx
  4059dc:	ret    
  4059dd:	nop    DWORD PTR [rax]
  4059e0:	mov    eax,0xffffffff
  4059e5:	pop    rbx
  4059e6:	ret    
  4059e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004059f0 <flatcc_builder_start_string@@Base>:
  4059f0:	endbr64 
  4059f4:	push   rbx
  4059f5:	mov    esi,0x1
  4059fa:	mov    rbx,rdi
  4059fd:	call   4040d0 <flatcc_builder_default_alloc@@Base+0x330>
  405a02:	test   eax,eax
  405a04:	jne    405a40 <flatcc_builder_start_string@@Base+0x50>
  405a06:	mov    rcx,QWORD PTR [rbx+0x30]
  405a0a:	xor    edx,edx
  405a0c:	mov    QWORD PTR [rcx+0xe],0x10006
  405a14:	mov    WORD PTR [rcx+0x16],dx
  405a18:	mov    edx,DWORD PTR [rbx+0x28]
  405a1b:	mov    rsi,rdx
  405a1e:	add    rdx,QWORD PTR [rbx+0x68]
  405a22:	mov    QWORD PTR [rbx+0x18],rdx
  405a26:	mov    edx,DWORD PTR [rbx+0x70]
  405a29:	sub    edx,esi
  405a2b:	mov    esi,0xfffffffc
  405a30:	cmp    edx,esi
  405a32:	cmova  edx,esi
  405a35:	mov    DWORD PTR [rbx+0x24],edx
  405a38:	mov    DWORD PTR [rcx+0x4],esi
  405a3b:	pop    rbx
  405a3c:	ret    
  405a3d:	nop    DWORD PTR [rax]
  405a40:	mov    eax,0xffffffff
  405a45:	pop    rbx
  405a46:	ret    
  405a47:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405a50 <flatcc_builder_reserve_table@@Base>:
  405a50:	endbr64 
  405a54:	push   r12
  405a56:	push   rbp
  405a57:	push   rbx
  405a58:	test   esi,esi
  405a5a:	js     405b0f <flatcc_builder_reserve_table@@Base+0xbf>
  405a60:	mov    rax,QWORD PTR [rdi+0x30]
  405a64:	lea    r12d,[rsi+rsi*1+0x4]
  405a69:	movzx  edx,WORD PTR [rax+0x1c]
  405a6d:	mov    eax,DWORD PTR [rax+0x10]
  405a70:	mov    rbx,rdi
  405a73:	lea    ebp,[rax+rdx*2]
  405a76:	mov    edx,r12d
  405a79:	add    rdx,rbp
  405a7c:	cmp    rdx,QWORD PTR [rdi+0x60]
  405a80:	ja     405ac0 <flatcc_builder_reserve_table@@Base+0x70>
  405a82:	add    rbp,QWORD PTR [rbx+0x58]
  405a86:	je     405b00 <flatcc_builder_reserve_table@@Base+0xb0>
  405a88:	mov    rax,QWORD PTR [rbx+0x30]
  405a8c:	add    rbp,0x4
  405a90:	mov    QWORD PTR [rbx+0x8],rbp
  405a94:	mov    ebp,DWORD PTR [rax+0x14]
  405a97:	lea    edx,[r12-0x3]
  405a9c:	add    rdx,rbp
  405a9f:	cmp    rdx,QWORD PTR [rbx+0x90]
  405aa6:	ja     405ae0 <flatcc_builder_reserve_table@@Base+0x90>
  405aa8:	add    rbp,QWORD PTR [rbx+0x88]
  405aaf:	sete   al
  405ab2:	mov    QWORD PTR [rbx],rbp
  405ab5:	movzx  eax,al
  405ab8:	neg    eax
  405aba:	pop    rbx
  405abb:	pop    rbp
  405abc:	pop    r12
  405abe:	ret    
  405abf:	nop
  405ac0:	lea    rsi,[rdi+0x58]
  405ac4:	mov    rdi,QWORD PTR [rdi+0x40]
  405ac8:	xor    r8d,r8d
  405acb:	mov    ecx,0x1
  405ad0:	call   QWORD PTR [rbx+0x50]
  405ad3:	test   eax,eax
  405ad5:	je     405a82 <flatcc_builder_reserve_table@@Base+0x32>
  405ad7:	call   403ed0 <flatcc_builder_default_alloc@@Base+0x130>
  405adc:	nop    DWORD PTR [rax+0x0]
  405ae0:	mov    rdi,QWORD PTR [rbx+0x40]
  405ae4:	xor    ecx,ecx
  405ae6:	lea    rsi,[rbx+0x88]
  405aed:	mov    r8d,0x3
  405af3:	call   QWORD PTR [rbx+0x50]
  405af6:	test   eax,eax
  405af8:	je     405aa8 <flatcc_builder_reserve_table@@Base+0x58>
  405afa:	jmp    405ad7 <flatcc_builder_reserve_table@@Base+0x87>
  405afc:	nop    DWORD PTR [rax+0x0]
  405b00:	mov    QWORD PTR [rbx+0x8],0x0
  405b08:	mov    eax,0xffffffff
  405b0d:	jmp    405aba <flatcc_builder_reserve_table@@Base+0x6a>
  405b0f:	lea    rcx,[rip+0x4e6a]        # 40a980 <_IO_stdin_used@@Base+0x980>
  405b16:	mov    edx,0x429
  405b1b:	lea    rsi,[rip+0x4656]        # 40a178 <_IO_stdin_used@@Base+0x178>
  405b22:	lea    rdi,[rip+0x4a42]        # 40a56b <_IO_stdin_used@@Base+0x56b>
  405b29:	call   403130 <__assert_fail@plt>
  405b2e:	xchg   ax,ax

0000000000405b30 <flatcc_builder_start_table@@Base>:
  405b30:	endbr64 
  405b34:	push   r13
  405b36:	push   r12
  405b38:	mov    r12d,esi
  405b3b:	mov    esi,0x4
  405b40:	push   rbp
  405b41:	push   rbx
  405b42:	mov    rbx,rdi
  405b45:	sub    rsp,0x8
  405b49:	call   4040d0 <flatcc_builder_default_alloc@@Base+0x330>
  405b4e:	test   eax,eax
  405b50:	jne    405c68 <flatcc_builder_start_table@@Base+0x138>
  405b56:	mov    rsi,QWORD PTR [rbx]
  405b59:	mov    rdx,QWORD PTR [rbx+0x30]
  405b5d:	sub    rsi,QWORD PTR [rbx+0x88]
  405b64:	mov    rcx,QWORD PTR [rbx+0x8]
  405b68:	mov    ebp,eax
  405b6a:	mov    rax,QWORD PTR [rbx+0x58]
  405b6e:	mov    DWORD PTR [rdx+0x14],esi
  405b71:	mov    esi,DWORD PTR [rbx+0x14]
  405b74:	sub    rcx,rax
  405b77:	mov    DWORD PTR [rdx+0x18],esi
  405b7a:	movzx  esi,WORD PTR [rbx+0x10]
  405b7e:	xor    edi,edi
  405b80:	mov    r8d,0x3
  405b86:	mov    DWORD PTR [rdx+0x10],ecx
  405b89:	mov    WORD PTR [rdx+0x1c],si
  405b8d:	lea    r13d,[rcx+rsi*2]
  405b91:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  405b98:	mov    WORD PTR [rbx+0x10],di
  405b9c:	mov    WORD PTR [rdx+0xe],r8w
  405ba1:	lea    edx,[r12+r12*1+0x4]
  405ba6:	add    rdx,r13
  405ba9:	cmp    rdx,QWORD PTR [rbx+0x60]
  405bad:	jbe    405bce <flatcc_builder_start_table@@Base+0x9e>
  405baf:	mov    rdi,QWORD PTR [rbx+0x40]
  405bb3:	xor    r8d,r8d
  405bb6:	lea    rsi,[rbx+0x58]
  405bba:	mov    ecx,0x1
  405bbf:	call   QWORD PTR [rbx+0x50]
  405bc2:	test   eax,eax
  405bc4:	jne    405c5a <flatcc_builder_start_table@@Base+0x12a>
  405bca:	mov    rax,QWORD PTR [rbx+0x58]
  405bce:	add    rax,r13
  405bd1:	je     405c60 <flatcc_builder_start_table@@Base+0x130>
  405bd7:	add    rax,0x4
  405bdb:	mov    QWORD PTR [rbx+0x8],rax
  405bdf:	mov    rax,QWORD PTR [rbx+0x30]
  405be3:	lea    edx,[r12+r12*1+0x1]
  405be8:	mov    r13d,DWORD PTR [rax+0x14]
  405bec:	add    rdx,r13
  405bef:	cmp    rdx,QWORD PTR [rbx+0x90]
  405bf6:	ja     405c40 <flatcc_builder_start_table@@Base+0x110>
  405bf8:	add    r13,QWORD PTR [rbx+0x88]
  405bff:	mov    QWORD PTR [rbx],r13
  405c02:	je     405c68 <flatcc_builder_start_table@@Base+0x138>
  405c04:	mov    eax,DWORD PTR [rbx+0x28]
  405c07:	mov    rdx,rax
  405c0a:	add    rax,QWORD PTR [rbx+0x68]
  405c0e:	mov    QWORD PTR [rbx+0x18],rax
  405c12:	mov    eax,DWORD PTR [rbx+0x70]
  405c15:	sub    eax,edx
  405c17:	cmp    eax,0xfffc
  405c1c:	mov    edx,0xfffc
  405c21:	cmova  eax,edx
  405c24:	mov    DWORD PTR [rbx+0x24],eax
  405c27:	mov    rax,QWORD PTR [rbx+0x30]
  405c2b:	mov    DWORD PTR [rax+0x4],0xfffc
  405c32:	add    rsp,0x8
  405c36:	pop    rbx
  405c37:	mov    eax,ebp
  405c39:	pop    rbp
  405c3a:	pop    r12
  405c3c:	pop    r13
  405c3e:	ret    
  405c3f:	nop
  405c40:	mov    rdi,QWORD PTR [rbx+0x40]
  405c44:	xor    ecx,ecx
  405c46:	lea    rsi,[rbx+0x88]
  405c4d:	mov    r8d,0x3
  405c53:	call   QWORD PTR [rbx+0x50]
  405c56:	test   eax,eax
  405c58:	je     405bf8 <flatcc_builder_start_table@@Base+0xc8>
  405c5a:	call   403ed0 <flatcc_builder_default_alloc@@Base+0x130>
  405c5f:	nop
  405c60:	mov    QWORD PTR [rbx+0x8],0x0
  405c68:	mov    ebp,0xffffffff
  405c6d:	jmp    405c32 <flatcc_builder_start_table@@Base+0x102>
  405c6f:	nop

0000000000405c70 <flatcc_builder_create_vtable@@Base>:
  405c70:	endbr64 
  405c74:	push   rbp
  405c75:	mov    rbp,rdi
  405c78:	push   rbx
  405c79:	sub    rsp,0xa8
  405c80:	mov    rax,QWORD PTR fs:0x28
  405c89:	mov    QWORD PTR [rsp+0x98],rax
  405c91:	xor    eax,eax
  405c93:	mov    QWORD PTR [rsp],0x0
  405c9b:	mov    DWORD PTR [rsp+0x8],0x0
  405ca3:	mov    eax,DWORD PTR [rdi+0x100]
  405ca9:	test   dx,dx
  405cac:	je     405d30 <flatcc_builder_create_vtable@@Base+0xc0>
  405cb2:	movzx  r8d,dx
  405cb6:	mov    QWORD PTR [rsp],r8
  405cba:	mov    QWORD PTR [rsp+0x10],rsi
  405cbf:	mov    QWORD PTR [rsp+0x18],r8
  405cc4:	mov    DWORD PTR [rsp+0x8],0x1
  405ccc:	movzx  edx,dx
  405ccf:	test   eax,eax
  405cd1:	je     405d60 <flatcc_builder_create_vtable@@Base+0xf0>
  405cd7:	mov    eax,DWORD PTR [rbp+0xf0]
  405cdd:	mov    ebx,eax
  405cdf:	sub    ebx,edx
  405ce1:	cmp    eax,ebx
  405ce3:	jle    405d3e <flatcc_builder_create_vtable@@Base+0xce>
  405ce5:	mov    rdi,QWORD PTR [rbp+0x38]
  405ce9:	mov    edx,DWORD PTR [rsp+0x8]
  405ced:	lea    rsi,[rsp+0x10]
  405cf2:	mov    ecx,ebx
  405cf4:	call   QWORD PTR [rbp+0x48]
  405cf7:	test   eax,eax
  405cf9:	jne    405db0 <flatcc_builder_create_vtable@@Base+0x140>
  405cff:	cmp    ebx,0x1
  405d02:	mov    DWORD PTR [rbp+0xf0],ebx
  405d08:	sbb    ebx,0xffffffff
  405d0b:	mov    rcx,QWORD PTR [rsp+0x98]
  405d13:	xor    rcx,QWORD PTR fs:0x28
  405d1c:	mov    eax,ebx
  405d1e:	jne    405dab <flatcc_builder_create_vtable@@Base+0x13b>
  405d24:	add    rsp,0xa8
  405d2b:	pop    rbx
  405d2c:	pop    rbp
  405d2d:	ret    
  405d2e:	xchg   ax,ax
  405d30:	test   eax,eax
  405d32:	jne    405d3e <flatcc_builder_create_vtable@@Base+0xce>
  405d34:	mov    eax,DWORD PTR [rdi+0x124]
  405d3a:	test   eax,eax
  405d3c:	je     405da0 <flatcc_builder_create_vtable@@Base+0x130>
  405d3e:	lea    rcx,[rip+0x4e6b]        # 40abb0 <_IO_stdin_used@@Base+0xbb0>
  405d45:	mov    edx,0x287
  405d4a:	lea    rsi,[rip+0x4427]        # 40a178 <_IO_stdin_used@@Base+0x178>
  405d51:	lea    rdi,[rip+0x47b7]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  405d58:	call   403130 <__assert_fail@plt>
  405d5d:	nop    DWORD PTR [rax]
  405d60:	mov    ecx,DWORD PTR [rdi+0x124]
  405d66:	test   ecx,ecx
  405d68:	jne    405cd7 <flatcc_builder_create_vtable@@Base+0x67>
  405d6e:	mov    ebx,DWORD PTR [rdi+0xf4]
  405d74:	add    edx,ebx
  405d76:	mov    DWORD PTR [rdi+0xf4],edx
  405d7c:	mov    rdi,QWORD PTR [rbp+0x38]
  405d80:	mov    edx,DWORD PTR [rsp+0x8]
  405d84:	lea    rsi,[rsp+0x10]
  405d89:	mov    ecx,ebx
  405d8b:	call   QWORD PTR [rbp+0x48]
  405d8e:	test   eax,eax
  405d90:	jne    405db5 <flatcc_builder_create_vtable@@Base+0x145>
  405d92:	inc    ebx
  405d94:	jmp    405d0b <flatcc_builder_create_vtable@@Base+0x9b>
  405d99:	nop    DWORD PTR [rax+0x0]
  405da0:	mov    ebx,DWORD PTR [rbp+0xf4]
  405da6:	xor    r8d,r8d
  405da9:	jmp    405d7c <flatcc_builder_create_vtable@@Base+0x10c>
  405dab:	call   403120 <__stack_chk_fail@plt>
  405db0:	call   404070 <flatcc_builder_default_alloc@@Base+0x2d0>
  405db5:	call   403f00 <flatcc_builder_default_alloc@@Base+0x160>
  405dba:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405dc0 <flatcc_builder_create_cached_vtable@@Base>:
  405dc0:	endbr64 
  405dc4:	push   r15
  405dc6:	mov    r15,rdi
  405dc9:	push   r14
  405dcb:	push   r13
  405dcd:	push   r12
  405dcf:	movzx  r12d,dx
  405dd3:	push   rbp
  405dd4:	mov    ebp,ecx
  405dd6:	push   rbx
  405dd7:	sub    rsp,0x38
  405ddb:	mov    rbx,QWORD PTR [rdi+0xd8]
  405de2:	mov    QWORD PTR [rsp+0x18],rsi
  405de7:	mov    DWORD PTR [rsp+0x2c],edx
  405deb:	test   rbx,rbx
  405dee:	je     405f88 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
  405df4:	mov    eax,0x20
  405df9:	sub    eax,ebx
  405dfb:	shrx   ebp,ebp,eax
  405e00:	mov    rax,QWORD PTR [r15+0xa8]
  405e07:	lea    r14,[rax+rbp*4]
  405e0b:	test   r14,r14
  405e0e:	je     405f70 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405e14:	mov    ebp,DWORD PTR [r14]
  405e17:	test   ebp,ebp
  405e19:	je     406060 <flatcc_builder_create_cached_vtable@@Base+0x2a0>
  405e1f:	mov    QWORD PTR [rsp+0x20],0x0
  405e28:	mov    r11,QWORD PTR [r15+0xb8]
  405e2f:	mov    r8,QWORD PTR [r15+0x78]
  405e33:	mov    r13,r14
  405e36:	mov    ebx,ebp
  405e38:	add    rbx,r11
  405e3b:	mov    esi,DWORD PTR [rbx+0x8]
  405e3e:	add    rsi,r8
  405e41:	cmp    WORD PTR [rsi],r12w
  405e45:	jne    405f30 <flatcc_builder_create_cached_vtable@@Base+0x170>
  405e4b:	mov    rdi,QWORD PTR [rsp+0x18]
  405e50:	movzx  edx,r12w
  405e54:	mov    QWORD PTR [rsp+0x10],r8
  405e59:	mov    QWORD PTR [rsp+0x8],r11
  405e5e:	call   403160 <memcmp@plt>
  405e63:	test   eax,eax
  405e65:	mov    r11,QWORD PTR [rsp+0x8]
  405e6a:	mov    r8,QWORD PTR [rsp+0x10]
  405e6f:	jne    405f30 <flatcc_builder_create_cached_vtable@@Base+0x170>
  405e75:	mov    eax,DWORD PTR [r15+0x100]
  405e7c:	cmp    DWORD PTR [rbx+0x4],eax
  405e7f:	je     405f40 <flatcc_builder_create_cached_vtable@@Base+0x180>
  405e85:	mov    QWORD PTR [rsp+0x20],rbx
  405e8a:	mov    ebp,DWORD PTR [rbx+0xc]
  405e8d:	lea    r13,[rbx+0xc]
  405e91:	test   ebp,ebp
  405e93:	jne    405e36 <flatcc_builder_create_cached_vtable@@Base+0x76>
  405e95:	mov    ebp,DWORD PTR [r15+0xe4]
  405e9c:	lea    rdx,[rbp+0x10]
  405ea0:	cmp    rdx,QWORD PTR [r15+0xc0]
  405ea7:	jbe    405ec8 <flatcc_builder_create_cached_vtable@@Base+0x108>
  405ea9:	mov    rdi,QWORD PTR [r15+0x40]
  405ead:	xor    ecx,ecx
  405eaf:	lea    rsi,[r15+0xb8]
  405eb6:	mov    r8d,0x6
  405ebc:	call   QWORD PTR [r15+0x50]
  405ec0:	test   eax,eax
  405ec2:	jne    406054 <flatcc_builder_create_cached_vtable@@Base+0x294>
  405ec8:	add    rbp,QWORD PTR [r15+0xb8]
  405ecf:	je     405f70 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405ed5:	mov    eax,DWORD PTR [r15+0xe4]
  405edc:	mov    rsi,QWORD PTR [rsp+0x18]
  405ee1:	lea    edx,[rax+0x10]
  405ee4:	mov    DWORD PTR [r15+0xe4],edx
  405eeb:	mov    edx,DWORD PTR [r15+0x100]
  405ef2:	mov    rdi,r15
  405ef5:	mov    DWORD PTR [rbp+0x4],edx
  405ef8:	mov    edx,DWORD PTR [r14]
  405efb:	mov    DWORD PTR [rbp+0xc],edx
  405efe:	mov    DWORD PTR [r14],eax
  405f01:	mov    eax,DWORD PTR [rsp+0x2c]
  405f05:	movzx  edx,ax
  405f08:	movzx  ebx,ax
  405f0b:	call   405c70 <flatcc_builder_create_vtable@@Base>
  405f10:	mov    DWORD PTR [rbp+0x0],eax
  405f13:	test   eax,eax
  405f15:	je     405f70 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405f17:	mov    rdi,QWORD PTR [rsp+0x20]
  405f1c:	test   rdi,rdi
  405f1f:	je     406075 <flatcc_builder_create_cached_vtable@@Base+0x2b5>
  405f25:	mov    edx,DWORD PTR [rdi+0x8]
  405f28:	mov    DWORD PTR [rbp+0x8],edx
  405f2b:	jmp    405f57 <flatcc_builder_create_cached_vtable@@Base+0x197>
  405f2d:	nop    DWORD PTR [rax]
  405f30:	lea    r13,[rbx+0xc]
  405f34:	mov    ebp,DWORD PTR [rbx+0xc]
  405f37:	jmp    405e91 <flatcc_builder_create_cached_vtable@@Base+0xd1>
  405f3c:	nop    DWORD PTR [rax+0x0]
  405f40:	cmp    r14,r13
  405f43:	je     405f55 <flatcc_builder_create_cached_vtable@@Base+0x195>
  405f45:	mov    eax,DWORD PTR [rbx+0xc]
  405f48:	mov    DWORD PTR [r13+0x0],eax
  405f4c:	mov    eax,DWORD PTR [r14]
  405f4f:	mov    DWORD PTR [rbx+0xc],eax
  405f52:	mov    DWORD PTR [r14],ebp
  405f55:	mov    eax,DWORD PTR [rbx]
  405f57:	add    rsp,0x38
  405f5b:	pop    rbx
  405f5c:	pop    rbp
  405f5d:	pop    r12
  405f5f:	pop    r13
  405f61:	pop    r14
  405f63:	pop    r15
  405f65:	ret    
  405f66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405f70:	add    rsp,0x38
  405f74:	pop    rbx
  405f75:	pop    rbp
  405f76:	pop    r12
  405f78:	pop    r13
  405f7a:	pop    r14
  405f7c:	xor    eax,eax
  405f7e:	pop    r15
  405f80:	ret    
  405f81:	nop    DWORD PTR [rax+0x0]
  405f88:	mov    eax,DWORD PTR [rdi+0xe4]
  405f8e:	lea    r13,[rdi+0xa8]
  405f95:	test   eax,eax
  405f97:	jne    4060ff <flatcc_builder_create_cached_vtable@@Base+0x33f>
  405f9d:	cmp    QWORD PTR [rdi+0xc0],0xf
  405fa5:	jbe    406030 <flatcc_builder_create_cached_vtable@@Base+0x270>
  405fab:	cmp    QWORD PTR [r15+0xb8],0x0
  405fb3:	je     405f70 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405fb5:	mov    DWORD PTR [r15+0xe4],0x10
  405fc0:	mov    rdi,QWORD PTR [r15+0x40]
  405fc4:	mov    r8d,0x5
  405fca:	mov    ecx,0x1
  405fcf:	mov    edx,0x100
  405fd4:	mov    rsi,r13
  405fd7:	call   QWORD PTR [r15+0x50]
  405fdb:	test   eax,eax
  405fdd:	jne    405f70 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  405fdf:	mov    rcx,QWORD PTR [r15+0xb0]
  405fe6:	mov    eax,0x100
  405feb:	jmp    405ff3 <flatcc_builder_create_cached_vtable@@Base+0x233>
  405fed:	nop    DWORD PTR [rax]
  405ff0:	mov    rax,rdx
  405ff3:	lea    rdx,[rax+rax*1]
  405ff7:	cmp    rdx,rcx
  405ffa:	jbe    405ff0 <flatcc_builder_create_cached_vtable@@Base+0x230>
  405ffc:	shr    rax,0x2
  406000:	cmp    rax,0x1
  406004:	jbe    40606e <flatcc_builder_create_cached_vtable@@Base+0x2ae>
  406006:	mov    esi,0x1
  40600b:	nop    DWORD PTR [rax+rax*1+0x0]
  406010:	inc    rbx
  406013:	shlx   rdx,rsi,rbx
  406018:	cmp    rax,rdx
  40601b:	ja     406010 <flatcc_builder_create_cached_vtable@@Base+0x250>
  40601d:	mov    eax,0x20
  406022:	sub    eax,ebx
  406024:	mov    QWORD PTR [r15+0xd8],rbx
  40602b:	jmp    405dfb <flatcc_builder_create_cached_vtable@@Base+0x3b>
  406030:	lea    rsi,[rdi+0xb8]
  406037:	mov    rdi,QWORD PTR [rdi+0x40]
  40603b:	xor    ecx,ecx
  40603d:	mov    r8d,0x6
  406043:	mov    edx,0x10
  406048:	call   QWORD PTR [r15+0x50]
  40604c:	test   eax,eax
  40604e:	je     405fab <flatcc_builder_create_cached_vtable@@Base+0x1eb>
  406054:	call   403ed0 <flatcc_builder_default_alloc@@Base+0x130>
  406059:	nop    DWORD PTR [rax+0x0]
  406060:	mov    QWORD PTR [rsp+0x20],0x0
  406069:	jmp    405e95 <flatcc_builder_create_cached_vtable@@Base+0xd5>
  40606e:	mov    eax,0x20
  406073:	jmp    406024 <flatcc_builder_create_cached_vtable@@Base+0x264>
  406075:	mov    rax,QWORD PTR [r15+0x118]
  40607c:	mov    r14d,DWORD PTR [r15+0xe0]
  406083:	test   rax,rax
  406086:	je     406091 <flatcc_builder_create_cached_vtable@@Base+0x2d1>
  406088:	lea    edx,[rbx+r14*1]
  40608c:	cmp    rax,rdx
  40608f:	jb     4060e7 <flatcc_builder_create_cached_vtable@@Base+0x327>
  406091:	lea    rdx,[r12+r14*1]
  406095:	cmp    rdx,QWORD PTR [r15+0x80]
  40609c:	jbe    4060b6 <flatcc_builder_create_cached_vtable@@Base+0x2f6>
  40609e:	mov    rdi,QWORD PTR [r15+0x40]
  4060a2:	xor    ecx,ecx
  4060a4:	lea    rsi,[r15+0x78]
  4060a8:	mov    r8d,0x2
  4060ae:	call   QWORD PTR [r15+0x50]
  4060b2:	test   eax,eax
  4060b4:	jne    406054 <flatcc_builder_create_cached_vtable@@Base+0x294>
  4060b6:	mov    rdi,r14
  4060b9:	add    rdi,QWORD PTR [r15+0x78]
  4060bd:	je     4060f7 <flatcc_builder_create_cached_vtable@@Base+0x337>
  4060bf:	mov    eax,DWORD PTR [r15+0xe0]
  4060c6:	mov    rsi,QWORD PTR [rsp+0x18]
  4060cb:	add    ebx,eax
  4060cd:	mov    DWORD PTR [rbp+0x8],eax
  4060d0:	mov    DWORD PTR [r15+0xe0],ebx
  4060d7:	mov    rdx,r12
  4060da:	call   403170 <memcpy@plt>
  4060df:	mov    eax,DWORD PTR [rbp+0x0]
  4060e2:	jmp    405f57 <flatcc_builder_create_cached_vtable@@Base+0x197>
  4060e7:	mov    rdi,r15
  4060ea:	call   404420 <flatcc_builder_flush_vtable_cache@@Base>
  4060ef:	mov    eax,DWORD PTR [rbp+0x0]
  4060f2:	jmp    405f57 <flatcc_builder_create_cached_vtable@@Base+0x197>
  4060f7:	or     eax,0xffffffff
  4060fa:	jmp    405f57 <flatcc_builder_create_cached_vtable@@Base+0x197>
  4060ff:	lea    rcx,[rip+0x486a]        # 40a970 <_IO_stdin_used@@Base+0x970>
  406106:	mov    edx,0x156
  40610b:	lea    rsi,[rip+0x4066]        # 40a178 <_IO_stdin_used@@Base+0x178>
  406112:	lea    rdi,[rip+0x443c]        # 40a555 <_IO_stdin_used@@Base+0x555>
  406119:	call   403130 <__assert_fail@plt>
  40611e:	xchg   ax,ax

0000000000406120 <flatcc_builder_create_table@@Base>:
  406120:	endbr64 
  406124:	push   rbp
  406125:	push   rbx
  406126:	mov    rbx,rdi
  406129:	sub    rsp,0xb8
  406130:	mov    edi,DWORD PTR [rsp+0xd0]
  406137:	mov    rax,QWORD PTR fs:0x28
  406140:	mov    QWORD PTR [rsp+0xa8],rax
  406148:	xor    eax,eax
  40614a:	test   r9d,r9d
  40614d:	js     40630f <flatcc_builder_create_table@@Base+0x1ef>
  406153:	test   dil,0x1
  406157:	je     4062eb <flatcc_builder_create_table@@Base+0x1cb>
  40615d:	cmp    cx,0x4
  406161:	mov    eax,0x4
  406166:	cmovb  ecx,eax
  406169:	movzx  r11d,cx
  40616d:	cmp    WORD PTR [rbx+0xe8],cx
  406174:	jb     4062c0 <flatcc_builder_create_table@@Base+0x1a0>
  40617a:	mov    eax,DWORD PTR [rbx+0xf0]
  406180:	lea    ecx,[r11-0x1]
  406184:	mov    r10d,eax
  406187:	sub    r10d,edx
  40618a:	and    r10d,ecx
  40618d:	mov    ecx,eax
  40618f:	sub    ecx,edx
  406191:	lea    r11d,[rcx-0x4]
  406195:	dec    edi
  406197:	mov    ecx,r11d
  40619a:	sub    ecx,edi
  40619c:	sub    ecx,r10d
  40619f:	mov    DWORD PTR [rsp+0xc],ecx
  4061a3:	test   r9d,r9d
  4061a6:	je     4061dd <flatcc_builder_create_table@@Base+0xbd>
  4061a8:	mov    edi,r10d
  4061ab:	sub    edi,r11d
  4061ae:	lea    eax,[r9-0x1]
  4061b2:	sub    edi,0x4
  4061b5:	lea    r9,[r8+rax*2+0x2]
  4061ba:	nop    WORD PTR [rax+rax*1+0x0]
  4061c0:	movzx  ecx,WORD PTR [r8]
  4061c4:	mov    r11d,edi
  4061c7:	sub    r11d,ecx
  4061ca:	add    r8,0x2
  4061ce:	add    DWORD PTR [rsi+rcx*1],r11d
  4061d2:	cmp    r9,r8
  4061d5:	jne    4061c0 <flatcc_builder_create_table@@Base+0xa0>
  4061d7:	mov    eax,DWORD PTR [rbx+0xf0]
  4061dd:	lea    rcx,[rsp+0xc]
  4061e2:	mov    QWORD PTR [rsp+0x10],0x4
  4061eb:	mov    QWORD PTR [rsp+0x20],rcx
  4061f0:	mov    QWORD PTR [rsp+0x28],0x4
  4061f9:	mov    DWORD PTR [rsp+0x18],0x1
  406201:	mov    r8d,0x4
  406207:	test   rdx,rdx
  40620a:	je     406227 <flatcc_builder_create_table@@Base+0x107>
  40620c:	lea    r8,[rdx+0x4]
  406210:	mov    QWORD PTR [rsp+0x10],r8
  406215:	mov    QWORD PTR [rsp+0x30],rsi
  40621a:	mov    QWORD PTR [rsp+0x38],rdx
  40621f:	mov    DWORD PTR [rsp+0x18],0x2
  406227:	test   r10d,r10d
  40622a:	jne    406290 <flatcc_builder_create_table@@Base+0x170>
  40622c:	mov    ebp,eax
  40622e:	movabs rdx,0x10000000f
  406238:	sub    ebp,r8d
  40623b:	cmp    r8,rdx
  40623e:	ja     4062cc <flatcc_builder_create_table@@Base+0x1ac>
  406244:	cmp    ebp,eax
  406246:	jge    4062cc <flatcc_builder_create_table@@Base+0x1ac>
  40624c:	mov    rdi,QWORD PTR [rbx+0x38]
  406250:	mov    edx,DWORD PTR [rsp+0x18]
  406254:	lea    rsi,[rsp+0x20]
  406259:	mov    ecx,ebp
  40625b:	call   QWORD PTR [rbx+0x48]
  40625e:	test   eax,eax
  406260:	jne    40630a <flatcc_builder_create_table@@Base+0x1ea>
  406266:	mov    DWORD PTR [rbx+0xf0],ebp
  40626c:	mov    eax,ebp
  40626e:	mov    rbx,QWORD PTR [rsp+0xa8]
  406276:	xor    rbx,QWORD PTR fs:0x28
  40627f:	jne    40632e <flatcc_builder_create_table@@Base+0x20e>
  406285:	add    rsp,0xb8
  40628c:	pop    rbx
  40628d:	pop    rbp
  40628e:	ret    
  40628f:	nop
  406290:	movsxd rcx,DWORD PTR [rsp+0x18]
  406295:	mov    rsi,0x40ac60
  40629c:	mov    rdx,rcx
  40629f:	add    r8,r10
  4062a2:	shl    rcx,0x4
  4062a6:	inc    edx
  4062a8:	mov    QWORD PTR [rsp+0x10],r8
  4062ad:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  4062b2:	mov    QWORD PTR [rsp+rcx*1+0x28],r10
  4062b7:	mov    DWORD PTR [rsp+0x18],edx
  4062bb:	jmp    40622c <flatcc_builder_create_table@@Base+0x10c>
  4062c0:	mov    WORD PTR [rbx+0xe8],cx
  4062c7:	jmp    40617a <flatcc_builder_create_table@@Base+0x5a>
  4062cc:	lea    rcx,[rip+0x48dd]        # 40abb0 <_IO_stdin_used@@Base+0xbb0>
  4062d3:	mov    edx,0x287
  4062d8:	lea    rsi,[rip+0x3e99]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4062df:	lea    rdi,[rip+0x4229]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  4062e6:	call   403130 <__assert_fail@plt>
  4062eb:	lea    rcx,[rip+0x465e]        # 40a950 <_IO_stdin_used@@Base+0x950>
  4062f2:	mov    edx,0x4db
  4062f7:	lea    rsi,[rip+0x3e7a]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4062fe:	lea    rdi,[rip+0x4271]        # 40a576 <_IO_stdin_used@@Base+0x576>
  406305:	call   403130 <__assert_fail@plt>
  40630a:	call   404070 <flatcc_builder_default_alloc@@Base+0x2d0>
  40630f:	lea    rcx,[rip+0x463a]        # 40a950 <_IO_stdin_used@@Base+0x950>
  406316:	mov    edx,0x4d5
  40631b:	lea    rsi,[rip+0x3e56]        # 40a178 <_IO_stdin_used@@Base+0x178>
  406322:	lea    rdi,[rip+0x423b]        # 40a564 <_IO_stdin_used@@Base+0x564>
  406329:	call   403130 <__assert_fail@plt>
  40632e:	call   403120 <__stack_chk_fail@plt>
  406333:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40633e:	xchg   ax,ax

0000000000406340 <flatcc_builder_check_required_field@@Base>:
  406340:	endbr64 
  406344:	mov    rax,QWORD PTR [rdi+0x30]
  406348:	cmp    WORD PTR [rax+0xe],0x3
  40634d:	jne    40636a <flatcc_builder_check_required_field@@Base+0x2a>
  40634f:	xor    eax,eax
  406351:	cmp    WORD PTR [rdi+0x10],si
  406355:	jbe    406369 <flatcc_builder_check_required_field@@Base+0x29>
  406357:	mov    rax,QWORD PTR [rdi+0x8]
  40635b:	movzx  edx,si
  40635e:	cmp    WORD PTR [rax+rdx*2],0x0
  406363:	setne  al
  406366:	movzx  eax,al
  406369:	ret    
  40636a:	push   rax
  40636b:	lea    rcx,[rip+0x45ae]        # 40a920 <_IO_stdin_used@@Base+0x920>
  406372:	mov    edx,0x4f8
  406377:	lea    rsi,[rip+0x3dfa]        # 40a178 <_IO_stdin_used@@Base+0x178>
  40637e:	lea    rdi,[rip+0x403b]        # 40a3c0 <_IO_stdin_used@@Base+0x3c0>
  406385:	call   403130 <__assert_fail@plt>
  40638a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406390 <flatcc_builder_check_union_field@@Base>:
  406390:	endbr64 
  406394:	mov    rax,QWORD PTR [rdi+0x30]
  406398:	cmp    WORD PTR [rax+0xe],0x3
  40639d:	jne    4063f9 <flatcc_builder_check_union_field@@Base+0x69>
  40639f:	xor    eax,eax
  4063a1:	test   si,si
  4063a4:	je     4063d6 <flatcc_builder_check_union_field@@Base+0x46>
  4063a6:	cmp    WORD PTR [rdi+0x10],si
  4063aa:	jbe    4063d6 <flatcc_builder_check_union_field@@Base+0x46>
  4063ac:	mov    rcx,QWORD PTR [rdi+0x8]
  4063b0:	movzx  edx,si
  4063b3:	movzx  eax,WORD PTR [rcx+rdx*2-0x2]
  4063b8:	movzx  ecx,WORD PTR [rcx+rdx*2]
  4063bc:	test   ax,ax
  4063bf:	je     4063f0 <flatcc_builder_check_union_field@@Base+0x60>
  4063c1:	mov    rsi,QWORD PTR [rdi+0x18]
  4063c5:	movzx  edx,ax
  4063c8:	xor    eax,eax
  4063ca:	test   cx,cx
  4063cd:	sete   al
  4063d0:	cmp    BYTE PTR [rsi+rdx*1],0x0
  4063d4:	jne    4063e0 <flatcc_builder_check_union_field@@Base+0x50>
  4063d6:	ret    
  4063d7:	nop    WORD PTR [rax+rax*1+0x0]
  4063e0:	xor    eax,eax
  4063e2:	test   cx,cx
  4063e5:	setne  al
  4063e8:	ret    
  4063e9:	nop    DWORD PTR [rax+0x0]
  4063f0:	xor    eax,eax
  4063f2:	test   cx,cx
  4063f5:	sete   al
  4063f8:	ret    
  4063f9:	push   rax
  4063fa:	lea    rcx,[rip+0x44df]        # 40a8e0 <_IO_stdin_used@@Base+0x8e0>
  406401:	mov    edx,0x4ff
  406406:	lea    rsi,[rip+0x3d6b]        # 40a178 <_IO_stdin_used@@Base+0x178>
  40640d:	lea    rdi,[rip+0x3fac]        # 40a3c0 <_IO_stdin_used@@Base+0x3c0>
  406414:	call   403130 <__assert_fail@plt>
  406419:	nop    DWORD PTR [rax+0x0]

0000000000406420 <flatcc_builder_check_required@@Base>:
  406420:	endbr64 
  406424:	mov    rax,QWORD PTR [rdi+0x30]
  406428:	cmp    WORD PTR [rax+0xe],0x3
  40642d:	jne    406483 <flatcc_builder_check_required@@Base+0x63>
  40642f:	movzx  ecx,WORD PTR [rdi+0x10]
  406433:	xor    eax,eax
  406435:	cmp    ecx,edx
  406437:	jl     406482 <flatcc_builder_check_required@@Base+0x62>
  406439:	test   edx,edx
  40643b:	jle    406473 <flatcc_builder_check_required@@Base+0x53>
  40643d:	mov    rcx,QWORD PTR [rdi+0x8]
  406441:	movzx  edi,WORD PTR [rsi]
  406444:	cmp    WORD PTR [rcx+rdi*2],0x0
  406449:	je     406482 <flatcc_builder_check_required@@Base+0x62>
  40644b:	add    rsi,0x2
  40644f:	lea    eax,[rdx-0x1]
  406452:	lea    rdx,[rsi+rax*2]
  406456:	jmp    40646e <flatcc_builder_check_required@@Base+0x4e>
  406458:	nop    DWORD PTR [rax+rax*1+0x0]
  406460:	movzx  eax,WORD PTR [rsi]
  406463:	add    rsi,0x2
  406467:	cmp    WORD PTR [rcx+rax*2],0x0
  40646c:	je     406480 <flatcc_builder_check_required@@Base+0x60>
  40646e:	cmp    rsi,rdx
  406471:	jne    406460 <flatcc_builder_check_required@@Base+0x40>
  406473:	mov    eax,0x1
  406478:	ret    
  406479:	nop    DWORD PTR [rax+0x0]
  406480:	xor    eax,eax
  406482:	ret    
  406483:	push   rax
  406484:	lea    rcx,[rip+0x4425]        # 40a8b0 <_IO_stdin_used@@Base+0x8b0>
  40648b:	mov    edx,0x511
  406490:	lea    rsi,[rip+0x3ce1]        # 40a178 <_IO_stdin_used@@Base+0x178>
  406497:	lea    rdi,[rip+0x3f22]        # 40a3c0 <_IO_stdin_used@@Base+0x3c0>
  40649e:	call   403130 <__assert_fail@plt>
  4064a3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4064ae:	xchg   ax,ax

00000000004064b0 <flatcc_builder_end_table@@Base>:
  4064b0:	endbr64 
  4064b4:	push   r13
  4064b6:	push   r12
  4064b8:	push   rbp
  4064b9:	push   rbx
  4064ba:	sub    rsp,0x8
  4064be:	mov    rax,QWORD PTR [rdi+0x30]
  4064c2:	cmp    WORD PTR [rax+0xe],0x3
  4064c7:	jne    40661d <flatcc_builder_end_table@@Base+0x16d>
  4064cd:	movzx  ebp,WORD PTR [rdi+0x10]
  4064d1:	movzx  eax,WORD PTR [rdi+0x20]
  4064d5:	lea    ebp,[rbp+rbp*1+0x4]
  4064d9:	movzx  ecx,bp
  4064dc:	xor    ecx,DWORD PTR [rdi+0x14]
  4064df:	mov    rdx,QWORD PTR [rdi+0x8]
  4064e3:	imul   ecx,ecx,0x9e3779b1
  4064e9:	add    eax,0x4
  4064ec:	mov    WORD PTR [rdx-0x2],ax
  4064f0:	movzx  eax,ax
  4064f3:	xor    ecx,eax
  4064f5:	imul   ecx,ecx,0x9e3779b1
  4064fb:	mov    WORD PTR [rdx-0x4],bp
  4064ff:	lea    r12,[rdx-0x4]
  406503:	mov    DWORD PTR [rdi+0x14],ecx
  406506:	movzx  edx,bp
  406509:	mov    rsi,r12
  40650c:	mov    rbx,rdi
  40650f:	call   405dc0 <flatcc_builder_create_cached_vtable@@Base>
  406514:	mov    r13d,eax
  406517:	test   eax,eax
  406519:	jne    406530 <flatcc_builder_end_table@@Base+0x80>
  40651b:	add    rsp,0x8
  40651f:	pop    rbx
  406520:	xor    ebp,ebp
  406522:	mov    eax,ebp
  406524:	pop    rbp
  406525:	pop    r12
  406527:	pop    r13
  406529:	ret    
  40652a:	nop    WORD PTR [rax+rax*1+0x0]
  406530:	movzx  edx,bp
  406533:	xor    esi,esi
  406535:	mov    rdi,r12
  406538:	call   403140 <memset@plt>
  40653d:	mov    rax,QWORD PTR [rbx+0x30]
  406541:	sub    rsp,0x8
  406545:	mov    r8d,DWORD PTR [rax+0x14]
  406549:	mov    r9,QWORD PTR [rbx]
  40654c:	add    r8,QWORD PTR [rbx+0x88]
  406553:	mov    edx,DWORD PTR [rbx+0x20]
  406556:	movzx  ecx,WORD PTR [rbx+0xea]
  40655d:	mov    rsi,QWORD PTR [rbx+0x18]
  406561:	push   r13
  406563:	sub    r9,r8
  406566:	sar    r9,1
  406569:	mov    rdi,rbx
  40656c:	call   406120 <flatcc_builder_create_table@@Base>
  406571:	mov    ebp,eax
  406573:	pop    rax
  406574:	pop    rdx
  406575:	test   ebp,ebp
  406577:	je     40651b <flatcc_builder_end_table@@Base+0x6b>
  406579:	mov    rax,QWORD PTR [rbx+0x30]
  40657d:	mov    rdi,QWORD PTR [rbx+0x18]
  406581:	mov    edx,DWORD PTR [rax+0x18]
  406584:	xor    esi,esi
  406586:	mov    DWORD PTR [rbx+0x14],edx
  406589:	movzx  edx,WORD PTR [rax+0x1c]
  40658d:	mov    WORD PTR [rbx+0x10],dx
  406591:	mov    edx,DWORD PTR [rax+0x10]
  406594:	mov    eax,DWORD PTR [rax+0x14]
  406597:	add    rdx,QWORD PTR [rbx+0x58]
  40659b:	add    rax,QWORD PTR [rbx+0x88]
  4065a2:	mov    QWORD PTR [rbx+0x8],rdx
  4065a6:	mov    QWORD PTR [rbx],rax
  4065a9:	mov    edx,DWORD PTR [rbx+0x20]
  4065ac:	call   403140 <memset@plt>
  4065b1:	mov    rax,QWORD PTR [rbx+0x30]
  4065b5:	mov    edi,DWORD PTR [rbx+0x70]
  4065b8:	mov    edx,DWORD PTR [rax+0x8]
  4065bb:	mov    esi,DWORD PTR [rax]
  4065bd:	mov    ecx,DWORD PTR [rax+0x4]
  4065c0:	mov    DWORD PTR [rbx+0x20],edx
  4065c3:	mov    rdx,rsi
  4065c6:	sub    edi,edx
  4065c8:	mov    DWORD PTR [rbx+0x28],esi
  4065cb:	mov    edx,edi
  4065cd:	add    rsi,QWORD PTR [rbx+0x68]
  4065d1:	cmp    ecx,edi
  4065d3:	cmovb  edx,ecx
  4065d6:	mov    QWORD PTR [rbx+0x18],rsi
  4065da:	mov    DWORD PTR [rbx+0x24],edx
  4065dd:	movzx  edx,WORD PTR [rbx+0xea]
  4065e4:	mov    DWORD PTR [rax+0x4],ecx
  4065e7:	cmp    dx,WORD PTR [rbx+0xe8]
  4065ee:	jbe    4065f7 <flatcc_builder_end_table@@Base+0x147>
  4065f0:	mov    WORD PTR [rbx+0xe8],dx
  4065f7:	movzx  edx,WORD PTR [rax+0xc]
  4065fb:	dec    DWORD PTR [rbx+0x104]
  406601:	sub    rax,0x24
  406605:	mov    QWORD PTR [rbx+0x30],rax
  406609:	mov    WORD PTR [rbx+0xea],dx
  406610:	add    rsp,0x8
  406614:	mov    eax,ebp
  406616:	pop    rbx
  406617:	pop    rbp
  406618:	pop    r12
  40661a:	pop    r13
  40661c:	ret    
  40661d:	lea    rcx,[rip+0x426c]        # 40a890 <_IO_stdin_used@@Base+0x890>
  406624:	mov    edx,0x525
  406629:	lea    rsi,[rip+0x3b48]        # 40a178 <_IO_stdin_used@@Base+0x178>
  406630:	lea    rdi,[rip+0x3d89]        # 40a3c0 <_IO_stdin_used@@Base+0x3c0>
  406637:	call   403130 <__assert_fail@plt>
  40663c:	nop    DWORD PTR [rax+0x0]

0000000000406640 <flatcc_builder_create_vector@@Base>:
  406640:	endbr64 
  406644:	push   rbp
  406645:	push   rbx
  406646:	sub    rsp,0xb8
  40664d:	mov    rax,QWORD PTR fs:0x28
  406656:	mov    QWORD PTR [rsp+0xa8],rax
  40665e:	xor    eax,eax
  406660:	cmp    rdx,r9
  406663:	ja     4067a4 <flatcc_builder_create_vector@@Base+0x164>
  406669:	cmp    r8w,0x4
  40666e:	mov    eax,0x4
  406673:	cmovb  r8d,eax
  406677:	mov    rbx,rdi
  40667a:	movzx  edi,r8w
  40667e:	cmp    r8w,WORD PTR [rbx+0xe8]
  406686:	jbe    406690 <flatcc_builder_create_vector@@Base+0x50>
  406688:	mov    WORD PTR [rbx+0xe8],r8w
  406690:	imul   ecx,edx
  406693:	mov    DWORD PTR [rsp+0xc],edx
  406697:	mov    edx,DWORD PTR [rbx+0xf0]
  40669d:	dec    edi
  40669f:	mov    eax,edx
  4066a1:	sub    eax,ecx
  4066a3:	and    eax,edi
  4066a5:	lea    rdi,[rsp+0xc]
  4066aa:	mov    QWORD PTR [rsp+0x10],0x4
  4066b3:	mov    QWORD PTR [rsp+0x20],rdi
  4066b8:	mov    QWORD PTR [rsp+0x28],0x4
  4066c1:	mov    DWORD PTR [rsp+0x18],0x1
  4066c9:	mov    r8d,0x4
  4066cf:	test   ecx,ecx
  4066d1:	je     4066ee <flatcc_builder_create_vector@@Base+0xae>
  4066d3:	lea    r8,[rcx+0x4]
  4066d7:	mov    QWORD PTR [rsp+0x10],r8
  4066dc:	mov    QWORD PTR [rsp+0x30],rsi
  4066e1:	mov    QWORD PTR [rsp+0x38],rcx
  4066e6:	mov    DWORD PTR [rsp+0x18],0x2
  4066ee:	test   eax,eax
  4066f0:	jne    406750 <flatcc_builder_create_vector@@Base+0x110>
  4066f2:	mov    ebp,edx
  4066f4:	movabs rax,0x10000000f
  4066fe:	sub    ebp,r8d
  406701:	cmp    r8,rax
  406704:	ja     406780 <flatcc_builder_create_vector@@Base+0x140>
  406706:	cmp    edx,ebp
  406708:	jle    406780 <flatcc_builder_create_vector@@Base+0x140>
  40670a:	mov    rdi,QWORD PTR [rbx+0x38]
  40670e:	mov    edx,DWORD PTR [rsp+0x18]
  406712:	lea    rsi,[rsp+0x20]
  406717:	mov    ecx,ebp
  406719:	call   QWORD PTR [rbx+0x48]
  40671c:	test   eax,eax
  40671e:	jne    40679f <flatcc_builder_create_vector@@Base+0x15f>
  406720:	mov    DWORD PTR [rbx+0xf0],ebp
  406726:	mov    eax,ebp
  406728:	mov    rbx,QWORD PTR [rsp+0xa8]
  406730:	xor    rbx,QWORD PTR fs:0x28
  406739:	jne    4067c3 <flatcc_builder_create_vector@@Base+0x183>
  40673f:	add    rsp,0xb8
  406746:	pop    rbx
  406747:	pop    rbp
  406748:	ret    
  406749:	nop    DWORD PTR [rax+0x0]
  406750:	movsxd rsi,DWORD PTR [rsp+0x18]
  406755:	mov    rdi,0x40ac60
  40675c:	mov    rcx,rsi
  40675f:	add    r8,rax
  406762:	shl    rsi,0x4
  406766:	inc    ecx
  406768:	mov    QWORD PTR [rsp+0x10],r8
  40676d:	mov    QWORD PTR [rsp+rsi*1+0x20],rdi
  406772:	mov    QWORD PTR [rsp+rsi*1+0x28],rax
  406777:	mov    DWORD PTR [rsp+0x18],ecx
  40677b:	jmp    4066f2 <flatcc_builder_create_vector@@Base+0xb2>
  406780:	lea    rcx,[rip+0x4429]        # 40abb0 <_IO_stdin_used@@Base+0xbb0>
  406787:	mov    edx,0x287
  40678c:	lea    rsi,[rip+0x39e5]        # 40a178 <_IO_stdin_used@@Base+0x178>
  406793:	lea    rdi,[rip+0x3d75]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  40679a:	call   403130 <__assert_fail@plt>
  40679f:	call   404070 <flatcc_builder_default_alloc@@Base+0x2d0>
  4067a4:	lea    rcx,[rip+0x40c5]        # 40a870 <_IO_stdin_used@@Base+0x870>
  4067ab:	mov    edx,0x555
  4067b0:	lea    rsi,[rip+0x39c1]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4067b7:	lea    rdi,[rip+0x3dc3]        # 40a581 <_IO_stdin_used@@Base+0x581>
  4067be:	call   403130 <__assert_fail@plt>
  4067c3:	call   403120 <__stack_chk_fail@plt>
  4067c8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004067d0 <flatcc_builder_end_vector@@Base>:
  4067d0:	endbr64 
  4067d4:	push   rbp
  4067d5:	push   rbx
  4067d6:	sub    rsp,0x8
  4067da:	mov    rax,QWORD PTR [rdi+0x30]
  4067de:	cmp    WORD PTR [rax+0xe],0x4
  4067e3:	jne    406896 <flatcc_builder_end_vector@@Base+0xc6>
  4067e9:	mov    ecx,DWORD PTR [rax+0x10]
  4067ec:	mov    edx,DWORD PTR [rax+0x14]
  4067ef:	mov    rsi,QWORD PTR [rdi+0x18]
  4067f3:	mov    r9d,DWORD PTR [rax+0x18]
  4067f7:	movzx  r8d,WORD PTR [rdi+0xea]
  4067ff:	mov    rbx,rdi
  406802:	call   406640 <flatcc_builder_create_vector@@Base>
  406807:	mov    ebp,eax
  406809:	test   eax,eax
  40680b:	jne    406820 <flatcc_builder_end_vector@@Base+0x50>
  40680d:	add    rsp,0x8
  406811:	pop    rbx
  406812:	mov    eax,ebp
  406814:	pop    rbp
  406815:	ret    
  406816:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406820:	mov    edx,DWORD PTR [rbx+0x20]
  406823:	mov    rdi,QWORD PTR [rbx+0x18]
  406827:	xor    esi,esi
  406829:	call   403140 <memset@plt>
  40682e:	mov    rax,QWORD PTR [rbx+0x30]
  406832:	mov    edi,DWORD PTR [rbx+0x70]
  406835:	mov    edx,DWORD PTR [rax+0x8]
  406838:	mov    esi,DWORD PTR [rax]
  40683a:	mov    ecx,DWORD PTR [rax+0x4]
  40683d:	mov    DWORD PTR [rbx+0x20],edx
  406840:	mov    rdx,rsi
  406843:	sub    edi,edx
  406845:	mov    DWORD PTR [rbx+0x28],esi
  406848:	mov    edx,edi
  40684a:	add    rsi,QWORD PTR [rbx+0x68]
  40684e:	cmp    ecx,edi
  406850:	cmovb  edx,ecx
  406853:	mov    QWORD PTR [rbx+0x18],rsi
  406857:	mov    DWORD PTR [rbx+0x24],edx
  40685a:	movzx  edx,WORD PTR [rbx+0xea]
  406861:	mov    DWORD PTR [rax+0x4],ecx
  406864:	cmp    dx,WORD PTR [rbx+0xe8]
  40686b:	jbe    406874 <flatcc_builder_end_vector@@Base+0xa4>
  40686d:	mov    WORD PTR [rbx+0xe8],dx
  406874:	movzx  edx,WORD PTR [rax+0xc]
  406878:	dec    DWORD PTR [rbx+0x104]
  40687e:	sub    rax,0x24
  406882:	mov    QWORD PTR [rbx+0x30],rax
  406886:	mov    WORD PTR [rbx+0xea],dx
  40688d:	add    rsp,0x8
  406891:	mov    eax,ebp
  406893:	pop    rbx
  406894:	pop    rbp
  406895:	ret    
  406896:	lea    rcx,[rip+0x3fb3]        # 40a850 <_IO_stdin_used@@Base+0x850>
  40689d:	mov    edx,0x578
  4068a2:	lea    rsi,[rip+0x38cf]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4068a9:	lea    rdi,[rip+0x39a8]        # 40a258 <_IO_stdin_used@@Base+0x258>
  4068b0:	call   403130 <__assert_fail@plt>
  4068b5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004068c0 <flatcc_builder_vector_count@@Base>:
  4068c0:	endbr64 
  4068c4:	mov    rax,QWORD PTR [rdi+0x30]
  4068c8:	mov    eax,DWORD PTR [rax+0x14]
  4068cb:	ret    
  4068cc:	nop    DWORD PTR [rax+0x0]

00000000004068d0 <flatcc_builder_vector_edit@@Base>:
  4068d0:	endbr64 
  4068d4:	mov    rax,QWORD PTR [rdi+0x18]
  4068d8:	ret    
  4068d9:	nop    DWORD PTR [rax+0x0]

00000000004068e0 <flatcc_builder_create_offset_vector_direct@@Base>:
  4068e0:	endbr64 
  4068e4:	xor    ecx,ecx
  4068e6:	jmp    4041f0 <flatcc_builder_default_alloc@@Base+0x450>
  4068eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004068f0 <flatcc_builder_end_offset_vector@@Base>:
  4068f0:	endbr64 
  4068f4:	push   rbp
  4068f5:	push   rbx
  4068f6:	sub    rsp,0x8
  4068fa:	mov    rax,QWORD PTR [rdi+0x30]
  4068fe:	cmp    WORD PTR [rax+0xe],0x5
  406903:	jne    4069a6 <flatcc_builder_end_offset_vector@@Base+0xb6>
  406909:	mov    edx,DWORD PTR [rax+0x14]
  40690c:	mov    rsi,QWORD PTR [rdi+0x18]
  406910:	mov    rbx,rdi
  406913:	call   4068e0 <flatcc_builder_create_offset_vector_direct@@Base>
  406918:	mov    ebp,eax
  40691a:	test   eax,eax
  40691c:	jne    406930 <flatcc_builder_end_offset_vector@@Base+0x40>
  40691e:	add    rsp,0x8
  406922:	pop    rbx
  406923:	mov    eax,ebp
  406925:	pop    rbp
  406926:	ret    
  406927:	nop    WORD PTR [rax+rax*1+0x0]
  406930:	mov    edx,DWORD PTR [rbx+0x20]
  406933:	mov    rdi,QWORD PTR [rbx+0x18]
  406937:	xor    esi,esi
  406939:	call   403140 <memset@plt>
  40693e:	mov    rax,QWORD PTR [rbx+0x30]
  406942:	mov    edi,DWORD PTR [rbx+0x70]
  406945:	mov    edx,DWORD PTR [rax+0x8]
  406948:	mov    esi,DWORD PTR [rax]
  40694a:	mov    ecx,DWORD PTR [rax+0x4]
  40694d:	mov    DWORD PTR [rbx+0x20],edx
  406950:	mov    rdx,rsi
  406953:	sub    edi,edx
  406955:	mov    DWORD PTR [rbx+0x28],esi
  406958:	mov    edx,edi
  40695a:	add    rsi,QWORD PTR [rbx+0x68]
  40695e:	cmp    ecx,edi
  406960:	cmovb  edx,ecx
  406963:	mov    QWORD PTR [rbx+0x18],rsi
  406967:	mov    DWORD PTR [rbx+0x24],edx
  40696a:	movzx  edx,WORD PTR [rbx+0xea]
  406971:	mov    DWORD PTR [rax+0x4],ecx
  406974:	cmp    dx,WORD PTR [rbx+0xe8]
  40697b:	jbe    406984 <flatcc_builder_end_offset_vector@@Base+0x94>
  40697d:	mov    WORD PTR [rbx+0xe8],dx
  406984:	movzx  edx,WORD PTR [rax+0xc]
  406988:	dec    DWORD PTR [rbx+0x104]
  40698e:	sub    rax,0x24
  406992:	mov    QWORD PTR [rbx+0x30],rax
  406996:	mov    WORD PTR [rbx+0xea],dx
  40699d:	add    rsp,0x8
  4069a1:	mov    eax,ebp
  4069a3:	pop    rbx
  4069a4:	pop    rbp
  4069a5:	ret    
  4069a6:	lea    rcx,[rip+0x3e53]        # 40a800 <_IO_stdin_used@@Base+0x800>
  4069ad:	mov    edx,0x5c8
  4069b2:	lea    rsi,[rip+0x37bf]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4069b9:	lea    rdi,[rip+0x3908]        # 40a2c8 <_IO_stdin_used@@Base+0x2c8>
  4069c0:	call   403130 <__assert_fail@plt>
  4069c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004069d0 <flatcc_builder_create_offset_vector@@Base>:
  4069d0:	endbr64 
  4069d4:	push   r12
  4069d6:	mov    r12,rsi
  4069d9:	push   rbp
  4069da:	mov    rbp,rdx
  4069dd:	push   rbx
  4069de:	mov    rbx,rdi
  4069e1:	call   405990 <flatcc_builder_start_offset_vector@@Base>
  4069e6:	test   eax,eax
  4069e8:	je     4069f8 <flatcc_builder_create_offset_vector@@Base+0x28>
  4069ea:	pop    rbx
  4069eb:	pop    rbp
  4069ec:	xor    eax,eax
  4069ee:	pop    r12
  4069f0:	ret    
  4069f1:	nop    DWORD PTR [rax+0x0]
  4069f8:	mov    rsi,rbp
  4069fb:	mov    rdi,rbx
  4069fe:	call   405440 <flatcc_builder_extend_offset_vector@@Base>
  406a03:	test   rax,rax
  406a06:	je     4069ea <flatcc_builder_create_offset_vector@@Base+0x1a>
  406a08:	lea    rdx,[rbp*4+0x0]
  406a10:	mov    rsi,r12
  406a13:	mov    rdi,rax
  406a16:	call   403170 <memcpy@plt>
  406a1b:	mov    rdi,rbx
  406a1e:	pop    rbx
  406a1f:	pop    rbp
  406a20:	pop    r12
  406a22:	jmp    4068f0 <flatcc_builder_end_offset_vector@@Base>
  406a27:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406a30 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  406a30:	endbr64 
  406a34:	push   rbp
  406a35:	push   rbx
  406a36:	sub    rsp,0x8
  406a3a:	mov    rax,QWORD PTR [rdi+0x30]
  406a3e:	cmp    WORD PTR [rax+0xe],0x5
  406a43:	jne    406ae6 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb6>
  406a49:	mov    rcx,rsi
  406a4c:	mov    edx,DWORD PTR [rax+0x14]
  406a4f:	mov    rsi,QWORD PTR [rdi+0x18]
  406a53:	mov    rbx,rdi
  406a56:	call   4041f0 <flatcc_builder_default_alloc@@Base+0x450>
  406a5b:	mov    ebp,eax
  406a5d:	test   eax,eax
  406a5f:	jne    406a70 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
  406a61:	add    rsp,0x8
  406a65:	pop    rbx
  406a66:	mov    eax,ebp
  406a68:	pop    rbp
  406a69:	ret    
  406a6a:	nop    WORD PTR [rax+rax*1+0x0]
  406a70:	mov    edx,DWORD PTR [rbx+0x20]
  406a73:	mov    rdi,QWORD PTR [rbx+0x18]
  406a77:	xor    esi,esi
  406a79:	call   403140 <memset@plt>
  406a7e:	mov    rax,QWORD PTR [rbx+0x30]
  406a82:	mov    edi,DWORD PTR [rbx+0x70]
  406a85:	mov    edx,DWORD PTR [rax+0x8]
  406a88:	mov    esi,DWORD PTR [rax]
  406a8a:	mov    ecx,DWORD PTR [rax+0x4]
  406a8d:	mov    DWORD PTR [rbx+0x20],edx
  406a90:	mov    rdx,rsi
  406a93:	sub    edi,edx
  406a95:	mov    DWORD PTR [rbx+0x28],esi
  406a98:	mov    edx,edi
  406a9a:	add    rsi,QWORD PTR [rbx+0x68]
  406a9e:	cmp    ecx,edi
  406aa0:	cmovb  edx,ecx
  406aa3:	mov    QWORD PTR [rbx+0x18],rsi
  406aa7:	mov    DWORD PTR [rbx+0x24],edx
  406aaa:	movzx  edx,WORD PTR [rbx+0xea]
  406ab1:	mov    DWORD PTR [rax+0x4],ecx
  406ab4:	cmp    dx,WORD PTR [rbx+0xe8]
  406abb:	jbe    406ac4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x94>
  406abd:	mov    WORD PTR [rbx+0xe8],dx
  406ac4:	movzx  edx,WORD PTR [rax+0xc]
  406ac8:	dec    DWORD PTR [rbx+0x104]
  406ace:	sub    rax,0x24
  406ad2:	mov    QWORD PTR [rbx+0x30],rax
  406ad6:	mov    WORD PTR [rbx+0xea],dx
  406add:	add    rsp,0x8
  406ae1:	mov    eax,ebp
  406ae3:	pop    rbx
  406ae4:	pop    rbp
  406ae5:	ret    
  406ae6:	lea    rcx,[rip+0x3cd3]        # 40a7c0 <_IO_stdin_used@@Base+0x7c0>
  406aed:	mov    edx,0x5d5
  406af2:	lea    rsi,[rip+0x367f]        # 40a178 <_IO_stdin_used@@Base+0x178>
  406af9:	lea    rdi,[rip+0x37c8]        # 40a2c8 <_IO_stdin_used@@Base+0x2c8>
  406b00:	call   403130 <__assert_fail@plt>
  406b05:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406b10 <flatcc_builder_offset_vector_edit@@Base>:
  406b10:	endbr64 
  406b14:	mov    rax,QWORD PTR [rdi+0x18]
  406b18:	ret    
  406b19:	nop    DWORD PTR [rax+0x0]

0000000000406b20 <flatcc_builder_offset_vector_count@@Base>:
  406b20:	endbr64 
  406b24:	mov    rax,QWORD PTR [rdi+0x30]
  406b28:	mov    eax,DWORD PTR [rax+0x14]
  406b2b:	ret    
  406b2c:	nop    DWORD PTR [rax+0x0]

0000000000406b30 <flatcc_builder_create_union_vector_direct@@Base>:
  406b30:	endbr64 
  406b34:	push   r13
  406b36:	mov    r13,rcx
  406b39:	push   r12
  406b3b:	mov    r12,rsi
  406b3e:	mov    rcx,r12
  406b41:	push   rbp
  406b42:	mov    rsi,rdx
  406b45:	mov    rdx,r13
  406b48:	push   rbx
  406b49:	mov    rbp,rdi
  406b4c:	sub    rsp,0x8
  406b50:	call   4041f0 <flatcc_builder_default_alloc@@Base+0x450>
  406b55:	test   eax,eax
  406b57:	jne    406b70 <flatcc_builder_create_union_vector_direct@@Base+0x40>
  406b59:	add    rsp,0x8
  406b5d:	pop    rbx
  406b5e:	pop    rbp
  406b5f:	pop    r12
  406b61:	xor    eax,eax
  406b63:	pop    r13
  406b65:	ret    
  406b66:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406b70:	mov    rdx,r13
  406b73:	mov    rsi,r12
  406b76:	mov    rdi,rbp
  406b79:	mov    r9d,0xffffffff
  406b7f:	mov    r8d,0x1
  406b85:	mov    ecx,0x1
  406b8a:	mov    ebx,eax
  406b8c:	call   406640 <flatcc_builder_create_vector@@Base>
  406b91:	mov    edx,eax
  406b93:	mov    rsi,rbx
  406b96:	shl    rsi,0x20
  406b9a:	mov    rax,rdx
  406b9d:	or     rax,rsi
  406ba0:	test   edx,edx
  406ba2:	mov    rdx,rax
  406ba5:	mov    rax,rsi
  406ba8:	cmovne rax,rdx
  406bac:	add    rsp,0x8
  406bb0:	pop    rbx
  406bb1:	pop    rbp
  406bb2:	pop    r12
  406bb4:	pop    r13
  406bb6:	ret    
  406bb7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406bc0 <flatcc_builder_create_union_vector@@Base>:
  406bc0:	endbr64 
  406bc4:	push   r13
  406bc6:	push   r12
  406bc8:	mov    r12,rdx
  406bcb:	push   rbp
  406bcc:	mov    rbp,rsi
  406bcf:	push   rbx
  406bd0:	mov    rbx,rdi
  406bd3:	sub    rsp,0x8
  406bd7:	call   405990 <flatcc_builder_start_offset_vector@@Base>
  406bdc:	test   eax,eax
  406bde:	je     406bf0 <flatcc_builder_create_union_vector@@Base+0x30>
  406be0:	add    rsp,0x8
  406be4:	pop    rbx
  406be5:	pop    rbp
  406be6:	pop    r12
  406be8:	xor    eax,eax
  406bea:	pop    r13
  406bec:	ret    
  406bed:	nop    DWORD PTR [rax]
  406bf0:	mov    rsi,r12
  406bf3:	mov    rdi,rbx
  406bf6:	call   405440 <flatcc_builder_extend_offset_vector@@Base>
  406bfb:	test   rax,rax
  406bfe:	je     406be0 <flatcc_builder_create_union_vector@@Base+0x20>
  406c00:	mov    r13d,DWORD PTR [rbx+0x20]
  406c04:	mov    rax,r13
  406c07:	add    eax,r12d
  406c0a:	mov    DWORD PTR [rbx+0x20],eax
  406c0d:	cmp    eax,DWORD PTR [rbx+0x24]
  406c10:	jae    406ce0 <flatcc_builder_create_union_vector@@Base+0x120>
  406c16:	add    r13,QWORD PTR [rbx+0x18]
  406c1a:	je     406be0 <flatcc_builder_create_union_vector@@Base+0x20>
  406c1c:	mov    rdi,rbx
  406c1f:	call   406b10 <flatcc_builder_offset_vector_edit@@Base>
  406c24:	test   r12,r12
  406c27:	je     406c49 <flatcc_builder_create_union_vector@@Base+0x89>
  406c29:	xor    edi,edi
  406c2b:	nop    DWORD PTR [rax+rax*1+0x0]
  406c30:	movzx  ecx,BYTE PTR [rbp+rdi*8+0x0]
  406c35:	mov    BYTE PTR [r13+rdi*1+0x0],cl
  406c3a:	mov    ecx,DWORD PTR [rbp+rdi*8+0x4]
  406c3e:	mov    DWORD PTR [rax+rdi*4],ecx
  406c41:	inc    rdi
  406c44:	cmp    r12,rdi
  406c47:	jne    406c30 <flatcc_builder_create_union_vector@@Base+0x70>
  406c49:	mov    rcx,r12
  406c4c:	mov    rdx,rax
  406c4f:	mov    rsi,r13
  406c52:	mov    rdi,rbx
  406c55:	call   406b30 <flatcc_builder_create_union_vector_direct@@Base>
  406c5a:	mov    edx,DWORD PTR [rbx+0x20]
  406c5d:	mov    rdi,QWORD PTR [rbx+0x18]
  406c61:	xor    esi,esi
  406c63:	mov    rbp,rax
  406c66:	call   403140 <memset@plt>
  406c6b:	mov    rax,QWORD PTR [rbx+0x30]
  406c6f:	mov    edx,DWORD PTR [rax+0x8]
  406c72:	mov    esi,DWORD PTR [rax]
  406c74:	mov    DWORD PTR [rbx+0x20],edx
  406c77:	mov    DWORD PTR [rbx+0x28],esi
  406c7a:	mov    rdx,rsi
  406c7d:	add    rsi,QWORD PTR [rbx+0x68]
  406c81:	mov    ecx,DWORD PTR [rax+0x4]
  406c84:	mov    QWORD PTR [rbx+0x18],rsi
  406c88:	mov    esi,DWORD PTR [rbx+0x70]
  406c8b:	sub    esi,edx
  406c8d:	mov    edx,esi
  406c8f:	cmp    ecx,esi
  406c91:	cmovb  edx,ecx
  406c94:	mov    DWORD PTR [rbx+0x24],edx
  406c97:	movzx  edx,WORD PTR [rbx+0xea]
  406c9e:	mov    DWORD PTR [rax+0x4],ecx
  406ca1:	cmp    dx,WORD PTR [rbx+0xe8]
  406ca8:	jbe    406cb1 <flatcc_builder_create_union_vector@@Base+0xf1>
  406caa:	mov    WORD PTR [rbx+0xe8],dx
  406cb1:	movzx  edx,WORD PTR [rax+0xc]
  406cb5:	sub    rax,0x24
  406cb9:	mov    QWORD PTR [rbx+0x30],rax
  406cbd:	mov    WORD PTR [rbx+0xea],dx
  406cc4:	dec    DWORD PTR [rbx+0x104]
  406cca:	add    rsp,0x8
  406cce:	pop    rbx
  406ccf:	mov    rax,rbp
  406cd2:	pop    rbp
  406cd3:	pop    r12
  406cd5:	pop    r13
  406cd7:	ret    
  406cd8:	nop    DWORD PTR [rax+rax*1+0x0]
  406ce0:	lea    esi,[rax+0x1]
  406ce3:	mov    edx,0xfffffffc
  406ce8:	mov    rdi,rbx
  406ceb:	call   403d40 <_start@@Base+0xa70>
  406cf0:	test   eax,eax
  406cf2:	je     406c16 <flatcc_builder_create_union_vector@@Base+0x56>
  406cf8:	jmp    406be0 <flatcc_builder_create_union_vector@@Base+0x20>
  406cfd:	nop    DWORD PTR [rax]

0000000000406d00 <flatcc_builder_start_union_vector@@Base>:
  406d00:	endbr64 
  406d04:	push   rbx
  406d05:	mov    esi,0x4
  406d0a:	mov    rbx,rdi
  406d0d:	call   4040d0 <flatcc_builder_default_alloc@@Base+0x330>
  406d12:	test   eax,eax
  406d14:	jne    406d50 <flatcc_builder_start_union_vector@@Base+0x50>
  406d16:	mov    rcx,QWORD PTR [rbx+0x30]
  406d1a:	xor    edx,edx
  406d1c:	mov    QWORD PTR [rcx+0xe],0x80007
  406d24:	mov    WORD PTR [rcx+0x16],dx
  406d28:	mov    edx,DWORD PTR [rbx+0x28]
  406d2b:	mov    rsi,rdx
  406d2e:	add    rdx,QWORD PTR [rbx+0x68]
  406d32:	mov    QWORD PTR [rbx+0x18],rdx
  406d36:	mov    edx,DWORD PTR [rbx+0x70]
  406d39:	sub    edx,esi
  406d3b:	mov    esi,0xfffffffc
  406d40:	cmp    edx,esi
  406d42:	cmova  edx,esi
  406d45:	mov    DWORD PTR [rbx+0x24],edx
  406d48:	mov    DWORD PTR [rcx+0x4],esi
  406d4b:	pop    rbx
  406d4c:	ret    
  406d4d:	nop    DWORD PTR [rax]
  406d50:	mov    eax,0xffffffff
  406d55:	pop    rbx
  406d56:	ret    
  406d57:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406d60 <flatcc_builder_union_vector_edit@@Base>:
  406d60:	endbr64 
  406d64:	mov    rax,QWORD PTR [rdi+0x18]
  406d68:	ret    
  406d69:	nop    DWORD PTR [rax+0x0]

0000000000406d70 <flatcc_builder_union_vector_count@@Base>:
  406d70:	endbr64 
  406d74:	mov    rax,QWORD PTR [rdi+0x30]
  406d78:	mov    eax,DWORD PTR [rax+0x14]
  406d7b:	ret    
  406d7c:	nop    DWORD PTR [rax+0x0]

0000000000406d80 <flatcc_builder_end_union_vector@@Base>:
  406d80:	endbr64 
  406d84:	push   r13
  406d86:	push   r12
  406d88:	push   rbp
  406d89:	push   rbx
  406d8a:	sub    rsp,0x8
  406d8e:	mov    rax,QWORD PTR [rdi+0x30]
  406d92:	cmp    WORD PTR [rax+0xe],0x7
  406d97:	jne    406ebd <flatcc_builder_end_union_vector@@Base+0x13d>
  406d9d:	mov    rbx,rdi
  406da0:	call   406d70 <flatcc_builder_union_vector_count@@Base>
  406da5:	mov    ebp,DWORD PTR [rbx+0x20]
  406da8:	mov    r12,rax
  406dab:	lea    eax,[rax+rax*4]
  406dae:	add    eax,ebp
  406db0:	mov    DWORD PTR [rbx+0x20],eax
  406db3:	cmp    eax,DWORD PTR [rbx+0x24]
  406db6:	jae    406e98 <flatcc_builder_end_union_vector@@Base+0x118>
  406dbc:	add    rbp,QWORD PTR [rbx+0x18]
  406dc0:	je     406eb0 <flatcc_builder_end_union_vector@@Base+0x130>
  406dc6:	mov    rdi,rbx
  406dc9:	lea    r13,[rbp+r12*4+0x0]
  406dce:	call   406d60 <flatcc_builder_union_vector_edit@@Base>
  406dd3:	test   r12,r12
  406dd6:	je     406dfc <flatcc_builder_end_union_vector@@Base+0x7c>
  406dd8:	xor    edi,edi
  406dda:	nop    WORD PTR [rax+rax*1+0x0]
  406de0:	movzx  r8d,BYTE PTR [rax+rdi*8]
  406de5:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  406dea:	mov    r8d,DWORD PTR [rax+rdi*8+0x4]
  406def:	mov    DWORD PTR [rbp+rdi*4+0x0],r8d
  406df4:	inc    rdi
  406df7:	cmp    r12,rdi
  406dfa:	jne    406de0 <flatcc_builder_end_union_vector@@Base+0x60>
  406dfc:	mov    rcx,r12
  406dff:	mov    rdx,rbp
  406e02:	mov    rsi,r13
  406e05:	mov    rdi,rbx
  406e08:	call   406b30 <flatcc_builder_create_union_vector_direct@@Base>
  406e0d:	mov    edx,DWORD PTR [rbx+0x20]
  406e10:	mov    rdi,QWORD PTR [rbx+0x18]
  406e14:	xor    esi,esi
  406e16:	mov    rbp,rax
  406e19:	call   403140 <memset@plt>
  406e1e:	mov    rdx,QWORD PTR [rbx+0x30]
  406e22:	mov    esi,DWORD PTR [rdx]
  406e24:	mov    eax,DWORD PTR [rdx+0x8]
  406e27:	mov    rcx,rsi
  406e2a:	mov    DWORD PTR [rbx+0x28],esi
  406e2d:	add    rsi,QWORD PTR [rbx+0x68]
  406e31:	mov    DWORD PTR [rbx+0x20],eax
  406e34:	mov    eax,DWORD PTR [rdx+0x4]
  406e37:	mov    QWORD PTR [rbx+0x18],rsi
  406e3b:	mov    esi,DWORD PTR [rbx+0x70]
  406e3e:	sub    esi,ecx
  406e40:	cmp    eax,esi
  406e42:	mov    ecx,esi
  406e44:	cmovb  ecx,eax
  406e47:	mov    DWORD PTR [rbx+0x24],ecx
  406e4a:	mov    DWORD PTR [rdx+0x4],eax
  406e4d:	movzx  eax,WORD PTR [rbx+0xea]
  406e54:	cmp    ax,WORD PTR [rbx+0xe8]
  406e5b:	ja     406e88 <flatcc_builder_end_union_vector@@Base+0x108>
  406e5d:	movzx  eax,WORD PTR [rdx+0xc]
  406e61:	dec    DWORD PTR [rbx+0x104]
  406e67:	sub    rdx,0x24
  406e6b:	mov    WORD PTR [rbx+0xea],ax
  406e72:	mov    QWORD PTR [rbx+0x30],rdx
  406e76:	add    rsp,0x8
  406e7a:	mov    rax,rbp
  406e7d:	pop    rbx
  406e7e:	pop    rbp
  406e7f:	pop    r12
  406e81:	pop    r13
  406e83:	ret    
  406e84:	nop    DWORD PTR [rax+0x0]
  406e88:	mov    WORD PTR [rbx+0xe8],ax
  406e8f:	jmp    406e5d <flatcc_builder_end_union_vector@@Base+0xdd>
  406e91:	nop    DWORD PTR [rax+0x0]
  406e98:	lea    esi,[rax+0x1]
  406e9b:	mov    edx,0xfffffffc
  406ea0:	mov    rdi,rbx
  406ea3:	call   403d40 <_start@@Base+0xa70>
  406ea8:	test   eax,eax
  406eaa:	je     406dbc <flatcc_builder_end_union_vector@@Base+0x3c>
  406eb0:	add    rsp,0x8
  406eb4:	pop    rbx
  406eb5:	pop    rbp
  406eb6:	pop    r12
  406eb8:	xor    eax,eax
  406eba:	pop    r13
  406ebc:	ret    
  406ebd:	lea    rcx,[rip+0x387c]        # 40a740 <_IO_stdin_used@@Base+0x740>
  406ec4:	mov    edx,0x651
  406ec9:	lea    rsi,[rip+0x32a8]        # 40a178 <_IO_stdin_used@@Base+0x178>
  406ed0:	lea    rdi,[rip+0x3519]        # 40a3f0 <_IO_stdin_used@@Base+0x3f0>
  406ed7:	call   403130 <__assert_fail@plt>
  406edc:	nop    DWORD PTR [rax+0x0]

0000000000406ee0 <flatcc_builder_extend_union_vector@@Base>:
  406ee0:	endbr64 
  406ee4:	push   rbp
  406ee5:	mov    edx,esi
  406ee7:	push   rbx
  406ee8:	sub    rsp,0x8
  406eec:	mov    rax,QWORD PTR [rdi+0x30]
  406ef0:	add    edx,DWORD PTR [rax+0x14]
  406ef3:	jb     406f35 <flatcc_builder_extend_union_vector@@Base+0x55>
  406ef5:	cmp    edx,0x1fffffff
  406efb:	ja     406f35 <flatcc_builder_extend_union_vector@@Base+0x55>
  406efd:	mov    ebp,DWORD PTR [rdi+0x20]
  406f00:	mov    DWORD PTR [rax+0x14],edx
  406f03:	lea    eax,[rbp+rsi*8+0x0]
  406f07:	mov    rbx,rdi
  406f0a:	mov    DWORD PTR [rdi+0x20],eax
  406f0d:	cmp    eax,DWORD PTR [rdi+0x24]
  406f10:	jae    406f20 <flatcc_builder_extend_union_vector@@Base+0x40>
  406f12:	mov    rax,QWORD PTR [rbx+0x18]
  406f16:	add    rax,rbp
  406f19:	add    rsp,0x8
  406f1d:	pop    rbx
  406f1e:	pop    rbp
  406f1f:	ret    
  406f20:	lea    esi,[rax+0x1]
  406f23:	mov    edx,0xfffffffc
  406f28:	call   403d40 <_start@@Base+0xa70>
  406f2d:	test   eax,eax
  406f2f:	je     406f12 <flatcc_builder_extend_union_vector@@Base+0x32>
  406f31:	xor    eax,eax
  406f33:	jmp    406f19 <flatcc_builder_extend_union_vector@@Base+0x39>
  406f35:	call   4040a0 <flatcc_builder_default_alloc@@Base+0x300>
  406f3a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406f40 <flatcc_builder_truncate_union_vector@@Base>:
  406f40:	endbr64 
  406f44:	sub    rsp,0x8
  406f48:	mov    rax,QWORD PTR [rdi+0x30]
  406f4c:	cmp    WORD PTR [rax+0xe],0x7
  406f51:	jne    406f82 <flatcc_builder_truncate_union_vector@@Base+0x42>
  406f53:	mov    edx,DWORD PTR [rax+0x14]
  406f56:	cmp    edx,esi
  406f58:	jb     406fa1 <flatcc_builder_truncate_union_vector@@Base+0x61>
  406f5a:	sub    edx,esi
  406f5c:	mov    DWORD PTR [rax+0x14],edx
  406f5f:	imul   esi,DWORD PTR [rax+0x10]
  406f63:	mov    eax,DWORD PTR [rdi+0x20]
  406f66:	mov    edx,esi
  406f68:	sub    eax,esi
  406f6a:	mov    DWORD PTR [rdi+0x20],eax
  406f6d:	add    rax,QWORD PTR [rdi+0x18]
  406f71:	mov    rdi,rax
  406f74:	xor    esi,esi
  406f76:	call   403140 <memset@plt>
  406f7b:	xor    eax,eax
  406f7d:	add    rsp,0x8
  406f81:	ret    
  406f82:	lea    rcx,[rip+0x3777]        # 40a700 <_IO_stdin_used@@Base+0x700>
  406f89:	mov    edx,0x681
  406f8e:	lea    rsi,[rip+0x31e3]        # 40a178 <_IO_stdin_used@@Base+0x178>
  406f95:	lea    rdi,[rip+0x3454]        # 40a3f0 <_IO_stdin_used@@Base+0x3f0>
  406f9c:	call   403130 <__assert_fail@plt>
  406fa1:	lea    rcx,[rip+0x3758]        # 40a700 <_IO_stdin_used@@Base+0x700>
  406fa8:	mov    edx,0x682
  406fad:	lea    rsi,[rip+0x31c4]        # 40a178 <_IO_stdin_used@@Base+0x178>
  406fb4:	lea    rdi,[rip+0x339d]        # 40a358 <_IO_stdin_used@@Base+0x358>
  406fbb:	call   403130 <__assert_fail@plt>

0000000000406fc0 <flatcc_builder_union_vector_push@@Base>:
  406fc0:	endbr64 
  406fc4:	push   r12
  406fc6:	push   rbp
  406fc7:	push   rbx
  406fc8:	mov    rdx,QWORD PTR [rdi+0x30]
  406fcc:	cmp    WORD PTR [rdx+0xe],0x7
  406fd1:	jne    407028 <flatcc_builder_union_vector_push@@Base+0x68>
  406fd3:	mov    eax,DWORD PTR [rdx+0x14]
  406fd6:	cmp    eax,0x1fffffff
  406fdb:	je     407021 <flatcc_builder_union_vector_push@@Base+0x61>
  406fdd:	mov    ebp,DWORD PTR [rdi+0x20]
  406fe0:	inc    eax
  406fe2:	mov    DWORD PTR [rdx+0x14],eax
  406fe5:	lea    edx,[rbp+0x8]
  406fe8:	mov    rbx,rdi
  406feb:	mov    r12,rsi
  406fee:	mov    DWORD PTR [rdi+0x20],edx
  406ff1:	cmp    edx,DWORD PTR [rdi+0x24]
  406ff4:	jae    407010 <flatcc_builder_union_vector_push@@Base+0x50>
  406ff6:	mov    rax,rbp
  406ff9:	add    rax,QWORD PTR [rbx+0x18]
  406ffd:	je     407002 <flatcc_builder_union_vector_push@@Base+0x42>
  406fff:	mov    QWORD PTR [rax],r12
  407002:	pop    rbx
  407003:	pop    rbp
  407004:	pop    r12
  407006:	ret    
  407007:	nop    WORD PTR [rax+rax*1+0x0]
  407010:	lea    esi,[rbp+0x9]
  407013:	mov    edx,0xfffffffc
  407018:	call   403d40 <_start@@Base+0xa70>
  40701d:	test   eax,eax
  40701f:	je     406ff6 <flatcc_builder_union_vector_push@@Base+0x36>
  407021:	pop    rbx
  407022:	pop    rbp
  407023:	xor    eax,eax
  407025:	pop    r12
  407027:	ret    
  407028:	lea    rcx,[rip+0x3691]        # 40a6c0 <_IO_stdin_used@@Base+0x6c0>
  40702f:	mov    edx,0x68d
  407034:	lea    rsi,[rip+0x313d]        # 40a178 <_IO_stdin_used@@Base+0x178>
  40703b:	lea    rdi,[rip+0x33ae]        # 40a3f0 <_IO_stdin_used@@Base+0x3f0>
  407042:	call   403130 <__assert_fail@plt>
  407047:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407050 <flatcc_builder_append_union_vector@@Base>:
  407050:	endbr64 
  407054:	push   r13
  407056:	push   r12
  407058:	push   rbp
  407059:	push   rbx
  40705a:	sub    rsp,0x8
  40705e:	mov    rax,QWORD PTR [rdi+0x30]
  407062:	cmp    WORD PTR [rax+0xe],0x7
  407067:	jne    4070d6 <flatcc_builder_append_union_vector@@Base+0x86>
  407069:	mov    ecx,edx
  40706b:	add    ecx,DWORD PTR [rax+0x14]
  40706e:	jb     4070f5 <flatcc_builder_append_union_vector@@Base+0xa5>
  407074:	cmp    ecx,0x1fffffff
  40707a:	ja     4070f5 <flatcc_builder_append_union_vector@@Base+0xa5>
  40707c:	mov    r12d,DWORD PTR [rdi+0x20]
  407080:	lea    ebx,[rdx*8+0x0]
  407087:	mov    rdx,r12
  40708a:	add    edx,ebx
  40708c:	mov    DWORD PTR [rax+0x14],ecx
  40708f:	mov    rbp,rdi
  407092:	mov    r13,rsi
  407095:	mov    DWORD PTR [rdi+0x20],edx
  407098:	cmp    edx,DWORD PTR [rdi+0x24]
  40709b:	jae    4070c0 <flatcc_builder_append_union_vector@@Base+0x70>
  40709d:	add    r12,QWORD PTR [rbp+0x18]
  4070a1:	je     4070b0 <flatcc_builder_append_union_vector@@Base+0x60>
  4070a3:	mov    edx,ebx
  4070a5:	mov    rsi,r13
  4070a8:	mov    rdi,r12
  4070ab:	call   403170 <memcpy@plt>
  4070b0:	add    rsp,0x8
  4070b4:	pop    rbx
  4070b5:	pop    rbp
  4070b6:	mov    rax,r12
  4070b9:	pop    r12
  4070bb:	pop    r13
  4070bd:	ret    
  4070be:	xchg   ax,ax
  4070c0:	lea    esi,[rdx+0x1]
  4070c3:	mov    edx,0xfffffffc
  4070c8:	call   403d40 <_start@@Base+0xa70>
  4070cd:	test   eax,eax
  4070cf:	je     40709d <flatcc_builder_append_union_vector@@Base+0x4d>
  4070d1:	xor    r12d,r12d
  4070d4:	jmp    4070b0 <flatcc_builder_append_union_vector@@Base+0x60>
  4070d6:	lea    rcx,[rip+0x35a3]        # 40a680 <_IO_stdin_used@@Base+0x680>
  4070dd:	mov    edx,0x69c
  4070e2:	lea    rsi,[rip+0x308f]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4070e9:	lea    rdi,[rip+0x3300]        # 40a3f0 <_IO_stdin_used@@Base+0x3f0>
  4070f0:	call   403130 <__assert_fail@plt>
  4070f5:	call   4040a0 <flatcc_builder_default_alloc@@Base+0x300>
  4070fa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407100 <flatcc_builder_create_string@@Base>:
  407100:	endbr64 
  407104:	push   rbp
  407105:	push   rbx
  407106:	sub    rsp,0xb8
  40710d:	mov    rax,QWORD PTR fs:0x28
  407116:	mov    QWORD PTR [rsp+0xa8],rax
  40711e:	xor    eax,eax
  407120:	mov    eax,0xffffffff
  407125:	cmp    rdx,rax
  407128:	ja     4071f0 <flatcc_builder_create_string@@Base+0xf0>
  40712e:	mov    rbx,rdi
  407131:	mov    edi,DWORD PTR [rdi+0xf0]
  407137:	lea    rcx,[rsp+0xc]
  40713c:	lea    eax,[rdi-0x1]
  40713f:	sub    eax,edx
  407141:	and    eax,0x3
  407144:	mov    DWORD PTR [rsp+0xc],edx
  407148:	inc    eax
  40714a:	mov    QWORD PTR [rsp+0x20],rcx
  40714f:	mov    QWORD PTR [rsp+0x28],0x4
  407158:	test   rdx,rdx
  40715b:	jne    4071d0 <flatcc_builder_create_string@@Base+0xd0>
  40715d:	mov    edx,0x2
  407162:	mov    ecx,0x1
  407167:	mov    r8d,0x4
  40716d:	add    r8,rax
  407170:	mov    rsi,0x40ac60
  407177:	mov    ebp,edi
  407179:	shl    rcx,0x4
  40717d:	sub    ebp,r8d
  407180:	mov    QWORD PTR [rsp+0x10],r8
  407185:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  40718a:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  40718f:	mov    DWORD PTR [rsp+0x18],edx
  407193:	cmp    edi,ebp
  407195:	jle    4071f4 <flatcc_builder_create_string@@Base+0xf4>
  407197:	mov    rdi,QWORD PTR [rbx+0x38]
  40719b:	lea    rsi,[rsp+0x20]
  4071a0:	mov    ecx,ebp
  4071a2:	call   QWORD PTR [rbx+0x48]
  4071a5:	test   eax,eax
  4071a7:	jne    407218 <flatcc_builder_create_string@@Base+0x118>
  4071a9:	mov    DWORD PTR [rbx+0xf0],ebp
  4071af:	mov    rbx,QWORD PTR [rsp+0xa8]
  4071b7:	xor    rbx,QWORD PTR fs:0x28
  4071c0:	mov    eax,ebp
  4071c2:	jne    407213 <flatcc_builder_create_string@@Base+0x113>
  4071c4:	add    rsp,0xb8
  4071cb:	pop    rbx
  4071cc:	pop    rbp
  4071cd:	ret    
  4071ce:	xchg   ax,ax
  4071d0:	lea    r8,[rdx+0x4]
  4071d4:	mov    QWORD PTR [rsp+0x38],rdx
  4071d9:	mov    QWORD PTR [rsp+0x30],rsi
  4071de:	mov    edx,0x3
  4071e3:	mov    ecx,0x2
  4071e8:	jmp    40716d <flatcc_builder_create_string@@Base+0x6d>
  4071ed:	nop    DWORD PTR [rax]
  4071f0:	xor    ebp,ebp
  4071f2:	jmp    4071af <flatcc_builder_create_string@@Base+0xaf>
  4071f4:	lea    rcx,[rip+0x39b5]        # 40abb0 <_IO_stdin_used@@Base+0xbb0>
  4071fb:	mov    edx,0x287
  407200:	lea    rsi,[rip+0x2f71]        # 40a178 <_IO_stdin_used@@Base+0x178>
  407207:	lea    rdi,[rip+0x3301]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  40720e:	call   403130 <__assert_fail@plt>
  407213:	call   403120 <__stack_chk_fail@plt>
  407218:	call   404070 <flatcc_builder_default_alloc@@Base+0x2d0>
  40721d:	nop    DWORD PTR [rax]

0000000000407220 <flatcc_builder_create_string_str@@Base>:
  407220:	endbr64 
  407224:	push   rbp
  407225:	mov    rbp,rdi
  407228:	mov    rdi,rsi
  40722b:	push   rbx
  40722c:	mov    rbx,rsi
  40722f:	sub    rsp,0x8
  407233:	call   403110 <strlen@plt>
  407238:	add    rsp,0x8
  40723c:	mov    rsi,rbx
  40723f:	pop    rbx
  407240:	mov    rdi,rbp
  407243:	mov    rdx,rax
  407246:	pop    rbp
  407247:	jmp    407100 <flatcc_builder_create_string@@Base>
  40724c:	nop    DWORD PTR [rax+0x0]

0000000000407250 <flatcc_builder_create_string_strn@@Base>:
  407250:	endbr64 
  407254:	push   r12
  407256:	mov    r12,rdi
  407259:	push   rbp
  40725a:	mov    rbp,rsi
  40725d:	mov    rdi,rbp
  407260:	push   rbx
  407261:	xor    esi,esi
  407263:	mov    rbx,rdx
  407266:	call   403150 <memchr@plt>
  40726b:	mov    rdx,rax
  40726e:	sub    rdx,rbp
  407271:	test   rax,rax
  407274:	cmovne rbx,rdx
  407278:	mov    rsi,rbp
  40727b:	mov    rdx,rbx
  40727e:	pop    rbx
  40727f:	pop    rbp
  407280:	mov    rdi,r12
  407283:	pop    r12
  407285:	jmp    407100 <flatcc_builder_create_string@@Base>
  40728a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407290 <flatcc_builder_end_string@@Base>:
  407290:	endbr64 
  407294:	push   rbp
  407295:	push   rbx
  407296:	sub    rsp,0x8
  40729a:	mov    rax,QWORD PTR [rdi+0x30]
  40729e:	cmp    WORD PTR [rax+0xe],0x6
  4072a3:	jne    407365 <flatcc_builder_end_string@@Base+0xd5>
  4072a9:	mov    edx,DWORD PTR [rdi+0x20]
  4072ac:	mov    rbx,rdi
  4072af:	cmp    DWORD PTR [rax+0x14],edx
  4072b2:	jne    407346 <flatcc_builder_end_string@@Base+0xb6>
  4072b8:	mov    rsi,QWORD PTR [rdi+0x18]
  4072bc:	call   407100 <flatcc_builder_create_string@@Base>
  4072c1:	mov    ebp,eax
  4072c3:	test   eax,eax
  4072c5:	jne    4072d0 <flatcc_builder_end_string@@Base+0x40>
  4072c7:	add    rsp,0x8
  4072cb:	pop    rbx
  4072cc:	mov    eax,ebp
  4072ce:	pop    rbp
  4072cf:	ret    
  4072d0:	mov    edx,DWORD PTR [rbx+0x20]
  4072d3:	mov    rdi,QWORD PTR [rbx+0x18]
  4072d7:	xor    esi,esi
  4072d9:	call   403140 <memset@plt>
  4072de:	mov    rax,QWORD PTR [rbx+0x30]
  4072e2:	mov    edi,DWORD PTR [rbx+0x70]
  4072e5:	mov    edx,DWORD PTR [rax+0x8]
  4072e8:	mov    esi,DWORD PTR [rax]
  4072ea:	mov    ecx,DWORD PTR [rax+0x4]
  4072ed:	mov    DWORD PTR [rbx+0x20],edx
  4072f0:	mov    rdx,rsi
  4072f3:	sub    edi,edx
  4072f5:	mov    DWORD PTR [rbx+0x28],esi
  4072f8:	mov    edx,edi
  4072fa:	add    rsi,QWORD PTR [rbx+0x68]
  4072fe:	cmp    ecx,edi
  407300:	cmovb  edx,ecx
  407303:	mov    QWORD PTR [rbx+0x18],rsi
  407307:	mov    DWORD PTR [rbx+0x24],edx
  40730a:	movzx  edx,WORD PTR [rbx+0xea]
  407311:	mov    DWORD PTR [rax+0x4],ecx
  407314:	cmp    dx,WORD PTR [rbx+0xe8]
  40731b:	jbe    407324 <flatcc_builder_end_string@@Base+0x94>
  40731d:	mov    WORD PTR [rbx+0xe8],dx
  407324:	movzx  edx,WORD PTR [rax+0xc]
  407328:	dec    DWORD PTR [rbx+0x104]
  40732e:	sub    rax,0x24
  407332:	mov    QWORD PTR [rbx+0x30],rax
  407336:	mov    WORD PTR [rbx+0xea],dx
  40733d:	add    rsp,0x8
  407341:	mov    eax,ebp
  407343:	pop    rbx
  407344:	pop    rbp
  407345:	ret    
  407346:	lea    rcx,[rip+0x3313]        # 40a660 <_IO_stdin_used@@Base+0x660>
  40734d:	mov    edx,0x6c5
  407352:	lea    rsi,[rip+0x2e1f]        # 40a178 <_IO_stdin_used@@Base+0x178>
  407359:	lea    rdi,[rip+0x30c8]        # 40a428 <_IO_stdin_used@@Base+0x428>
  407360:	call   403130 <__assert_fail@plt>
  407365:	lea    rcx,[rip+0x32f4]        # 40a660 <_IO_stdin_used@@Base+0x660>
  40736c:	mov    edx,0x6c4
  407371:	lea    rsi,[rip+0x2e00]        # 40a178 <_IO_stdin_used@@Base+0x178>
  407378:	lea    rdi,[rip+0x2f81]        # 40a300 <_IO_stdin_used@@Base+0x300>
  40737f:	call   403130 <__assert_fail@plt>
  407384:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40738f:	nop

0000000000407390 <flatcc_builder_string_edit@@Base>:
  407390:	endbr64 
  407394:	mov    rax,QWORD PTR [rdi+0x18]
  407398:	ret    
  407399:	nop    DWORD PTR [rax+0x0]

00000000004073a0 <flatcc_builder_string_len@@Base>:
  4073a0:	endbr64 
  4073a4:	mov    rax,QWORD PTR [rdi+0x30]
  4073a8:	mov    eax,DWORD PTR [rax+0x14]
  4073ab:	ret    
  4073ac:	nop    DWORD PTR [rax+0x0]

00000000004073b0 <flatcc_builder_table_add@@Base>:
  4073b0:	endbr64 
  4073b4:	push   r13
  4073b6:	push   r12
  4073b8:	push   rbp
  4073b9:	push   rbx
  4073ba:	sub    rsp,0x8
  4073be:	mov    rax,QWORD PTR [rdi+0x30]
  4073c2:	cmp    WORD PTR [rax+0xe],0x3
  4073c7:	jne    407494 <flatcc_builder_table_add@@Base+0xe4>
  4073cd:	mov    r12d,esi
  4073d0:	cmp    esi,0x7ffc
  4073d6:	ja     4074d2 <flatcc_builder_table_add@@Base+0x122>
  4073dc:	mov    rbx,rdi
  4073df:	cmp    WORD PTR [rdi+0xea],cx
  4073e6:	jb     407450 <flatcc_builder_table_add@@Base+0xa0>
  4073e8:	movsxd r13,r12d
  4073eb:	mov    rsi,QWORD PTR [rbx+0x8]
  4073ef:	add    r13,r13
  4073f2:	add    rsi,r13
  4073f5:	cmp    WORD PTR [rsi],0x0
  4073f9:	jne    4074b3 <flatcc_builder_table_add@@Base+0x103>
  4073ff:	mov    eax,DWORD PTR [rbx+0x14]
  407402:	movzx  ecx,cx
  407405:	xor    eax,r12d
  407408:	imul   eax,eax,0x9e3779b1
  40740e:	xor    eax,edx
  407410:	imul   eax,eax,0x9e3779b1
  407416:	mov    DWORD PTR [rbx+0x14],eax
  407419:	mov    eax,DWORD PTR [rbx+0x20]
  40741c:	lea    ebp,[rcx+rax*1-0x1]
  407420:	neg    ecx
  407422:	and    ebp,ecx
  407424:	add    edx,ebp
  407426:	mov    DWORD PTR [rbx+0x20],edx
  407429:	cmp    edx,DWORD PTR [rbx+0x24]
  40742c:	jae    407470 <flatcc_builder_table_add@@Base+0xc0>
  40742e:	lea    eax,[rbp+0x4]
  407431:	mov    WORD PTR [rsi],ax
  407434:	cmp    r12w,WORD PTR [rbx+0x10]
  407439:	jae    407460 <flatcc_builder_table_add@@Base+0xb0>
  40743b:	mov    eax,ebp
  40743d:	add    rax,QWORD PTR [rbx+0x18]
  407441:	add    rsp,0x8
  407445:	pop    rbx
  407446:	pop    rbp
  407447:	pop    r12
  407449:	pop    r13
  40744b:	ret    
  40744c:	nop    DWORD PTR [rax+0x0]
  407450:	mov    WORD PTR [rdi+0xea],cx
  407457:	jmp    4073e8 <flatcc_builder_table_add@@Base+0x38>
  407459:	nop    DWORD PTR [rax+0x0]
  407460:	inc    r12d
  407463:	mov    WORD PTR [rbx+0x10],r12w
  407468:	jmp    40743b <flatcc_builder_table_add@@Base+0x8b>
  40746a:	nop    WORD PTR [rax+rax*1+0x0]
  407470:	lea    esi,[rdx+0x1]
  407473:	mov    rdi,rbx
  407476:	mov    edx,0xfffc
  40747b:	call   403d40 <_start@@Base+0xa70>
  407480:	test   eax,eax
  407482:	jne    407490 <flatcc_builder_table_add@@Base+0xe0>
  407484:	mov    rsi,QWORD PTR [rbx+0x8]
  407488:	add    rsi,r13
  40748b:	jmp    40742e <flatcc_builder_table_add@@Base+0x7e>
  40748d:	nop    DWORD PTR [rax]
  407490:	xor    eax,eax
  407492:	jmp    407441 <flatcc_builder_table_add@@Base+0x91>
  407494:	lea    rcx,[rip+0x31a5]        # 40a640 <_IO_stdin_used@@Base+0x640>
  40749b:	mov    edx,0x6ed
  4074a0:	lea    rsi,[rip+0x2cd1]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4074a7:	lea    rdi,[rip+0x2f12]        # 40a3c0 <_IO_stdin_used@@Base+0x3c0>
  4074ae:	call   403130 <__assert_fail@plt>
  4074b3:	lea    rcx,[rip+0x3186]        # 40a640 <_IO_stdin_used@@Base+0x640>
  4074ba:	mov    edx,0x6f8
  4074bf:	lea    rsi,[rip+0x2cb2]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4074c6:	lea    rdi,[rip+0x3042]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  4074cd:	call   403130 <__assert_fail@plt>
  4074d2:	lea    rcx,[rip+0x3167]        # 40a640 <_IO_stdin_used@@Base+0x640>
  4074d9:	mov    edx,0x6ee
  4074de:	lea    rsi,[rip+0x2c93]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4074e5:	lea    rdi,[rip+0x2f64]        # 40a450 <_IO_stdin_used@@Base+0x450>
  4074ec:	call   403130 <__assert_fail@plt>
  4074f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4074fc:	nop    DWORD PTR [rax+0x0]

0000000000407500 <flatcc_builder_table_edit@@Base>:
  407500:	endbr64 
  407504:	mov    rax,QWORD PTR [rdi+0x30]
  407508:	cmp    WORD PTR [rax+0xe],0x3
  40750d:	jne    40751a <flatcc_builder_table_edit@@Base+0x1a>
  40750f:	mov    eax,DWORD PTR [rdi+0x20]
  407512:	sub    rax,rsi
  407515:	add    rax,QWORD PTR [rdi+0x18]
  407519:	ret    
  40751a:	push   rax
  40751b:	lea    rcx,[rip+0x30fe]        # 40a620 <_IO_stdin_used@@Base+0x620>
  407522:	mov    edx,0x702
  407527:	lea    rsi,[rip+0x2c4a]        # 40a178 <_IO_stdin_used@@Base+0x178>
  40752e:	lea    rdi,[rip+0x2e8b]        # 40a3c0 <_IO_stdin_used@@Base+0x3c0>
  407535:	call   403130 <__assert_fail@plt>
  40753a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407540 <flatcc_builder_table_add_copy@@Base>:
  407540:	endbr64 
  407544:	push   rbp
  407545:	mov    rbp,rdx
  407548:	push   rbx
  407549:	mov    rbx,rcx
  40754c:	mov    rdx,rbx
  40754f:	movzx  ecx,r8w
  407553:	sub    rsp,0x8
  407557:	call   4073b0 <flatcc_builder_table_add@@Base>
  40755c:	mov    rcx,rax
  40755f:	test   rax,rax
  407562:	je     407575 <flatcc_builder_table_add_copy@@Base+0x35>
  407564:	mov    rdx,rbx
  407567:	mov    rsi,rbp
  40756a:	mov    rdi,rax
  40756d:	call   403170 <memcpy@plt>
  407572:	mov    rcx,rax
  407575:	add    rsp,0x8
  407579:	pop    rbx
  40757a:	mov    rax,rcx
  40757d:	pop    rbp
  40757e:	ret    
  40757f:	nop

0000000000407580 <flatcc_builder_table_add_offset@@Base>:
  407580:	endbr64 
  407584:	push   r13
  407586:	push   r12
  407588:	push   rbp
  407589:	push   rbx
  40758a:	sub    rsp,0x8
  40758e:	mov    rax,QWORD PTR [rdi+0x30]
  407592:	cmp    WORD PTR [rax+0xe],0x3
  407597:	jne    407654 <flatcc_builder_table_add_offset@@Base+0xd4>
  40759d:	mov    r12d,esi
  4075a0:	cmp    esi,0x7ffc
  4075a6:	ja     407692 <flatcc_builder_table_add_offset@@Base+0x112>
  4075ac:	movsxd r13,esi
  4075af:	mov    rdx,QWORD PTR [rdi+0x8]
  4075b3:	add    r13,r13
  4075b6:	add    rdx,r13
  4075b9:	cmp    WORD PTR [rdx],0x0
  4075bd:	mov    rbx,rdi
  4075c0:	jne    407673 <flatcc_builder_table_add_offset@@Base+0xf3>
  4075c6:	mov    eax,DWORD PTR [rdi+0x14]
  4075c9:	xor    eax,esi
  4075cb:	imul   eax,eax,0x9e3779b1
  4075d1:	xor    eax,0x4
  4075d4:	imul   eax,eax,0x9e3779b1
  4075da:	mov    DWORD PTR [rdi+0x14],eax
  4075dd:	mov    eax,DWORD PTR [rdi+0x20]
  4075e0:	lea    ebp,[rax+0x3]
  4075e3:	and    ebp,0xfffffffc
  4075e6:	lea    esi,[rbp+0x4]
  4075e9:	mov    DWORD PTR [rdi+0x20],esi
  4075ec:	cmp    esi,DWORD PTR [rdi+0x24]
  4075ef:	ja     407630 <flatcc_builder_table_add_offset@@Base+0xb0>
  4075f1:	lea    eax,[rbp+0x4]
  4075f4:	mov    WORD PTR [rdx],ax
  4075f7:	cmp    r12w,WORD PTR [rbx+0x10]
  4075fc:	jae    407620 <flatcc_builder_table_add_offset@@Base+0xa0>
  4075fe:	mov    rax,QWORD PTR [rbx]
  407601:	lea    rdx,[rax+0x2]
  407605:	mov    QWORD PTR [rbx],rdx
  407608:	mov    WORD PTR [rax],bp
  40760b:	mov    eax,ebp
  40760d:	add    rax,QWORD PTR [rbx+0x18]
  407611:	add    rsp,0x8
  407615:	pop    rbx
  407616:	pop    rbp
  407617:	pop    r12
  407619:	pop    r13
  40761b:	ret    
  40761c:	nop    DWORD PTR [rax+0x0]
  407620:	lea    esi,[r12+0x1]
  407625:	mov    WORD PTR [rbx+0x10],si
  407629:	jmp    4075fe <flatcc_builder_table_add_offset@@Base+0x7e>
  40762b:	nop    DWORD PTR [rax+rax*1+0x0]
  407630:	mov    edx,0xfffc
  407635:	call   403d40 <_start@@Base+0xa70>
  40763a:	test   eax,eax
  40763c:	jne    407650 <flatcc_builder_table_add_offset@@Base+0xd0>
  40763e:	mov    rdx,QWORD PTR [rbx+0x8]
  407642:	add    rdx,r13
  407645:	jmp    4075f1 <flatcc_builder_table_add_offset@@Base+0x71>
  407647:	nop    WORD PTR [rax+rax*1+0x0]
  407650:	xor    eax,eax
  407652:	jmp    407611 <flatcc_builder_table_add_offset@@Base+0x91>
  407654:	lea    rcx,[rip+0x2fa5]        # 40a600 <_IO_stdin_used@@Base+0x600>
  40765b:	mov    edx,0x713
  407660:	lea    rsi,[rip+0x2b11]        # 40a178 <_IO_stdin_used@@Base+0x178>
  407667:	lea    rdi,[rip+0x2d52]        # 40a3c0 <_IO_stdin_used@@Base+0x3c0>
  40766e:	call   403130 <__assert_fail@plt>
  407673:	lea    rcx,[rip+0x2f86]        # 40a600 <_IO_stdin_used@@Base+0x600>
  40767a:	mov    edx,0x71b
  40767f:	lea    rsi,[rip+0x2af2]        # 40a178 <_IO_stdin_used@@Base+0x178>
  407686:	lea    rdi,[rip+0x2e82]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  40768d:	call   403130 <__assert_fail@plt>
  407692:	lea    rcx,[rip+0x2f67]        # 40a600 <_IO_stdin_used@@Base+0x600>
  407699:	mov    edx,0x714
  40769e:	lea    rsi,[rip+0x2ad3]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4076a5:	lea    rdi,[rip+0x2da4]        # 40a450 <_IO_stdin_used@@Base+0x450>
  4076ac:	call   403130 <__assert_fail@plt>
  4076b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4076bc:	nop    DWORD PTR [rax+0x0]

00000000004076c0 <flatcc_builder_table_add_union@@Base>:
  4076c0:	endbr64 
  4076c4:	push   r13
  4076c6:	mov    r13,rdx
  4076c9:	sar    r13,0x20
  4076cd:	push   r12
  4076cf:	push   rbp
  4076d0:	push   rbx
  4076d1:	sub    rsp,0x8
  4076d5:	mov    rax,QWORD PTR [rdi+0x30]
  4076d9:	cmp    WORD PTR [rax+0xe],0x3
  4076de:	jne    407754 <flatcc_builder_table_add_union@@Base+0x94>
  4076e0:	mov    r12,rdi
  4076e3:	mov    ebx,esi
  4076e5:	mov    rbp,rdx
  4076e8:	test   dl,dl
  4076ea:	je     407730 <flatcc_builder_table_add_union@@Base+0x70>
  4076ec:	test   r13d,r13d
  4076ef:	je     407702 <flatcc_builder_table_add_union@@Base+0x42>
  4076f1:	call   407580 <flatcc_builder_table_add_offset@@Base>
  4076f6:	test   rax,rax
  4076f9:	je     407792 <flatcc_builder_table_add_union@@Base+0xd2>
  4076ff:	mov    DWORD PTR [rax],r13d
  407702:	lea    esi,[rbx-0x1]
  407705:	mov    ecx,0x1
  40770a:	mov    edx,0x1
  40770f:	mov    rdi,r12
  407712:	call   4073b0 <flatcc_builder_table_add@@Base>
  407717:	test   rax,rax
  40771a:	je     407773 <flatcc_builder_table_add_union@@Base+0xb3>
  40771c:	mov    BYTE PTR [rax],bpl
  40771f:	add    rsp,0x8
  407723:	xor    eax,eax
  407725:	pop    rbx
  407726:	pop    rbp
  407727:	pop    r12
  407729:	pop    r13
  40772b:	ret    
  40772c:	nop    DWORD PTR [rax+0x0]
  407730:	test   r13d,r13d
  407733:	je     407702 <flatcc_builder_table_add_union@@Base+0x42>
  407735:	lea    rcx,[rip+0x3054]        # 40a790 <_IO_stdin_used@@Base+0x790>
  40773c:	mov    edx,0x5ef
  407741:	lea    rsi,[rip+0x2a30]        # 40a178 <_IO_stdin_used@@Base+0x178>
  407748:	lea    rdi,[rip+0x2d49]        # 40a498 <_IO_stdin_used@@Base+0x498>
  40774f:	call   403130 <__assert_fail@plt>
  407754:	lea    rcx,[rip+0x3035]        # 40a790 <_IO_stdin_used@@Base+0x790>
  40775b:	mov    edx,0x5ee
  407760:	lea    rsi,[rip+0x2a11]        # 40a178 <_IO_stdin_used@@Base+0x178>
  407767:	lea    rdi,[rip+0x2c52]        # 40a3c0 <_IO_stdin_used@@Base+0x3c0>
  40776e:	call   403130 <__assert_fail@plt>
  407773:	lea    rcx,[rip+0x3016]        # 40a790 <_IO_stdin_used@@Base+0x790>
  40777a:	mov    edx,0x5f6
  40777f:	lea    rsi,[rip+0x29f2]        # 40a178 <_IO_stdin_used@@Base+0x178>
  407786:	lea    rdi,[rip+0x2e11]        # 40a59e <_IO_stdin_used@@Base+0x59e>
  40778d:	call   403130 <__assert_fail@plt>
  407792:	lea    rcx,[rip+0x2ff7]        # 40a790 <_IO_stdin_used@@Base+0x790>
  407799:	mov    edx,0x5f2
  40779e:	lea    rsi,[rip+0x29d3]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4077a5:	lea    rdi,[rip+0x2de8]        # 40a594 <_IO_stdin_used@@Base+0x594>
  4077ac:	call   403130 <__assert_fail@plt>
  4077b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4077bc:	nop    DWORD PTR [rax+0x0]

00000000004077c0 <flatcc_builder_table_add_union_vector@@Base>:
  4077c0:	endbr64 
  4077c4:	push   r12
  4077c6:	push   rbp
  4077c7:	mov    rbp,rdx
  4077ca:	sar    rbp,0x20
  4077ce:	push   rbx
  4077cf:	sub    rsp,0x10
  4077d3:	mov    rcx,QWORD PTR [rdi+0x30]
  4077d7:	cmp    WORD PTR [rcx+0xe],0x3
  4077dc:	jne    407851 <flatcc_builder_table_add_union_vector@@Base+0x91>
  4077de:	test   ebp,ebp
  4077e0:	sete   cl
  4077e3:	test   edx,edx
  4077e5:	mov    r12d,esi
  4077e8:	sete   sil
  4077ec:	cmp    sil,cl
  4077ef:	je     407810 <flatcc_builder_table_add_union_vector@@Base+0x50>
  4077f1:	test   edx,edx
  4077f3:	setne  al
  4077f6:	cmp    cl,al
  4077f8:	je     407870 <flatcc_builder_table_add_union_vector@@Base+0xb0>
  4077fa:	mov    eax,0xffffffff
  4077ff:	add    rsp,0x10
  407803:	pop    rbx
  407804:	pop    rbp
  407805:	pop    r12
  407807:	ret    
  407808:	nop    DWORD PTR [rax+rax*1+0x0]
  407810:	mov    eax,edx
  407812:	test   edx,edx
  407814:	je     4077ff <flatcc_builder_table_add_union_vector@@Base+0x3f>
  407816:	lea    esi,[r12-0x1]
  40781b:	mov    QWORD PTR [rsp+0x8],rdx
  407820:	mov    rbx,rdi
  407823:	call   407580 <flatcc_builder_table_add_offset@@Base>
  407828:	test   rax,rax
  40782b:	mov    rdx,QWORD PTR [rsp+0x8]
  407830:	je     4078ae <flatcc_builder_table_add_union_vector@@Base+0xee>
  407832:	mov    DWORD PTR [rax],edx
  407834:	mov    esi,r12d
  407837:	mov    rdi,rbx
  40783a:	call   407580 <flatcc_builder_table_add_offset@@Base>
  40783f:	test   rax,rax
  407842:	je     40788f <flatcc_builder_table_add_union_vector@@Base+0xcf>
  407844:	mov    DWORD PTR [rax],ebp
  407846:	add    rsp,0x10
  40784a:	xor    eax,eax
  40784c:	pop    rbx
  40784d:	pop    rbp
  40784e:	pop    r12
  407850:	ret    
  407851:	lea    rcx,[rip+0x2f08]        # 40a760 <_IO_stdin_used@@Base+0x760>
  407858:	mov    edx,0x600
  40785d:	lea    rsi,[rip+0x2914]        # 40a178 <_IO_stdin_used@@Base+0x178>
  407864:	lea    rdi,[rip+0x2b55]        # 40a3c0 <_IO_stdin_used@@Base+0x3c0>
  40786b:	call   403130 <__assert_fail@plt>
  407870:	lea    rcx,[rip+0x2ee9]        # 40a760 <_IO_stdin_used@@Base+0x760>
  407877:	mov    edx,0x601
  40787c:	lea    rsi,[rip+0x28f5]        # 40a178 <_IO_stdin_used@@Base+0x178>
  407883:	lea    rdi,[rip+0x2c36]        # 40a4c0 <_IO_stdin_used@@Base+0x4c0>
  40788a:	call   403130 <__assert_fail@plt>
  40788f:	lea    rcx,[rip+0x2eca]        # 40a760 <_IO_stdin_used@@Base+0x760>
  407896:	mov    edx,0x608
  40789b:	lea    rsi,[rip+0x28d6]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4078a2:	lea    rdi,[rip+0x2ceb]        # 40a594 <_IO_stdin_used@@Base+0x594>
  4078a9:	call   403130 <__assert_fail@plt>
  4078ae:	lea    rcx,[rip+0x2eab]        # 40a760 <_IO_stdin_used@@Base+0x760>
  4078b5:	mov    edx,0x604
  4078ba:	lea    rsi,[rip+0x28b7]        # 40a178 <_IO_stdin_used@@Base+0x178>
  4078c1:	lea    rdi,[rip+0x2ccc]        # 40a594 <_IO_stdin_used@@Base+0x594>
  4078c8:	call   403130 <__assert_fail@plt>
  4078cd:	nop    DWORD PTR [rax]

00000000004078d0 <flatcc_builder_push_buffer_alignment@@Base>:
  4078d0:	endbr64 
  4078d4:	mov    edx,0x4
  4078d9:	movzx  eax,WORD PTR [rdi+0xe8]
  4078e0:	mov    WORD PTR [rdi+0xe8],dx
  4078e7:	ret    
  4078e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004078f0 <flatcc_builder_pop_buffer_alignment@@Base>:
  4078f0:	endbr64 
  4078f4:	cmp    si,WORD PTR [rdi+0xe8]
  4078fb:	jbe    407904 <flatcc_builder_pop_buffer_alignment@@Base+0x14>
  4078fd:	mov    WORD PTR [rdi+0xe8],si
  407904:	ret    
  407905:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407910 <flatcc_builder_get_buffer_alignment@@Base>:
  407910:	endbr64 
  407914:	movzx  eax,WORD PTR [rdi+0xe8]
  40791b:	ret    
  40791c:	nop    DWORD PTR [rax+0x0]

0000000000407920 <flatcc_builder_set_vtable_clustering@@Base>:
  407920:	endbr64 
  407924:	xor    eax,eax
  407926:	test   esi,esi
  407928:	sete   al
  40792b:	mov    DWORD PTR [rdi+0x124],eax
  407931:	ret    
  407932:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40793d:	nop    DWORD PTR [rax]

0000000000407940 <flatcc_builder_set_block_align@@Base>:
  407940:	endbr64 
  407944:	mov    WORD PTR [rdi+0xec],si
  40794b:	ret    
  40794c:	nop    DWORD PTR [rax+0x0]

0000000000407950 <flatcc_builder_get_level@@Base>:
  407950:	endbr64 
  407954:	mov    eax,DWORD PTR [rdi+0x104]
  40795a:	ret    
  40795b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407960 <flatcc_builder_set_max_level@@Base>:
  407960:	endbr64 
  407964:	mov    DWORD PTR [rdi+0x120],esi
  40796a:	cmp    DWORD PTR [rdi+0x108],esi
  407970:	jge    407978 <flatcc_builder_set_max_level@@Base+0x18>
  407972:	mov    DWORD PTR [rdi+0x108],esi
  407978:	ret    
  407979:	nop    DWORD PTR [rax+0x0]

0000000000407980 <flatcc_builder_get_buffer_size@@Base>:
  407980:	endbr64 
  407984:	mov    eax,DWORD PTR [rdi+0xf4]
  40798a:	sub    eax,DWORD PTR [rdi+0xf0]
  407990:	cdqe   
  407992:	ret    
  407993:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40799e:	xchg   ax,ax

00000000004079a0 <flatcc_builder_get_buffer_start@@Base>:
  4079a0:	endbr64 
  4079a4:	mov    eax,DWORD PTR [rdi+0xf0]
  4079aa:	ret    
  4079ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004079b0 <flatcc_builder_get_buffer_end@@Base>:
  4079b0:	endbr64 
  4079b4:	mov    eax,DWORD PTR [rdi+0xf4]
  4079ba:	ret    
  4079bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004079c0 <flatcc_builder_set_vtable_cache_limit@@Base>:
  4079c0:	endbr64 
  4079c4:	mov    QWORD PTR [rdi+0x118],rsi
  4079cb:	ret    
  4079cc:	nop    DWORD PTR [rax+0x0]

00000000004079d0 <flatcc_builder_set_identifier@@Base>:
  4079d0:	endbr64 
  4079d4:	test   rsi,rsi
  4079d7:	je     4079e8 <flatcc_builder_set_identifier@@Base+0x18>
  4079d9:	mov    eax,DWORD PTR [rsi]
  4079db:	mov    DWORD PTR [rdi+0x110],eax
  4079e1:	ret    
  4079e2:	nop    WORD PTR [rax+rax*1+0x0]
  4079e8:	mov    rsi,0x40ac60
  4079ef:	mov    eax,DWORD PTR [rsi]
  4079f1:	mov    DWORD PTR [rdi+0x110],eax
  4079f7:	ret    
  4079f8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407a00 <flatcc_builder_get_type@@Base>:
  407a00:	endbr64 
  407a04:	mov    rdx,QWORD PTR [rdi+0x30]
  407a08:	xor    eax,eax
  407a0a:	test   rdx,rdx
  407a0d:	je     407a13 <flatcc_builder_get_type@@Base+0x13>
  407a0f:	movzx  eax,WORD PTR [rdx+0xe]
  407a13:	ret    
  407a14:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407a1f:	nop

0000000000407a20 <flatcc_builder_get_type_at@@Base>:
  407a20:	endbr64 
  407a24:	xor    eax,eax
  407a26:	test   esi,esi
  407a28:	jle    407a49 <flatcc_builder_get_type_at@@Base+0x29>
  407a2a:	mov    edx,DWORD PTR [rdi+0x104]
  407a30:	cmp    edx,esi
  407a32:	jl     407a49 <flatcc_builder_get_type_at@@Base+0x29>
  407a34:	sub    esi,edx
  407a36:	movsxd rsi,esi
  407a39:	mov    rdx,QWORD PTR [rdi+0x30]
  407a3d:	lea    rax,[rsi+rsi*8]
  407a41:	lea    rax,[rdx+rax*4]
  407a45:	movzx  eax,WORD PTR [rax+0xe]
  407a49:	ret    
  407a4a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407a50 <flatcc_builder_get_direct_buffer@@Base>:
  407a50:	endbr64 
  407a54:	mov    eax,DWORD PTR [rdi+0x128]
  407a5a:	test   eax,eax
  407a5c:	jne    407a70 <flatcc_builder_get_direct_buffer@@Base+0x20>
  407a5e:	xor    eax,eax
  407a60:	test   rsi,rsi
  407a63:	je     407a6c <flatcc_builder_get_direct_buffer@@Base+0x1c>
  407a65:	mov    QWORD PTR [rsi],0x0
  407a6c:	ret    
  407a6d:	nop    DWORD PTR [rax]
  407a70:	mov    rax,QWORD PTR [rdi+0x138]
  407a77:	cmp    QWORD PTR [rdi+0x130],rax
  407a7e:	jne    407a5e <flatcc_builder_get_direct_buffer@@Base+0xe>
  407a80:	test   rsi,rsi
  407a83:	je     407a8f <flatcc_builder_get_direct_buffer@@Base+0x3f>
  407a85:	mov    rax,QWORD PTR [rdi+0x160]
  407a8c:	mov    QWORD PTR [rsi],rax
  407a8f:	mov    rax,QWORD PTR [rdi+0x140]
  407a96:	ret    
  407a97:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407aa0 <flatcc_builder_copy_buffer@@Base>:
  407aa0:	endbr64 
  407aa4:	mov    eax,DWORD PTR [rdi+0x128]
  407aaa:	test   eax,eax
  407aac:	je     407ad0 <flatcc_builder_copy_buffer@@Base+0x30>
  407aae:	sub    rsp,0x8
  407ab2:	add    rdi,0x130
  407ab9:	call   408310 <flatcc_emitter_copy_buffer@@Base>
  407abe:	test   rax,rax
  407ac1:	je     407ad3 <flatcc_builder_copy_buffer@@Base+0x33>
  407ac3:	add    rsp,0x8
  407ac7:	ret    
  407ac8:	nop    DWORD PTR [rax+rax*1+0x0]
  407ad0:	xor    eax,eax
  407ad2:	ret    
  407ad3:	lea    rcx,[rip+0x2b06]        # 40a5e0 <_IO_stdin_used@@Base+0x5e0>
  407ada:	mov    edx,0x786
  407adf:	lea    rsi,[rip+0x2692]        # 40a178 <_IO_stdin_used@@Base+0x178>
  407ae6:	lea    rdi,[rip+0x2abd]        # 40a5aa <_IO_stdin_used@@Base+0x5aa>
  407aed:	call   403130 <__assert_fail@plt>
  407af2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407afd:	nop    DWORD PTR [rax]

0000000000407b00 <flatcc_builder_finalize_buffer@@Base>:
  407b00:	endbr64 
  407b04:	push   r12
  407b06:	mov    r12,rdi
  407b09:	push   rbp
  407b0a:	push   rbx
  407b0b:	mov    rbx,rsi
  407b0e:	call   407980 <flatcc_builder_get_buffer_size@@Base>
  407b13:	mov    rbp,rax
  407b16:	test   rbx,rbx
  407b19:	je     407b1e <flatcc_builder_finalize_buffer@@Base+0x1e>
  407b1b:	mov    QWORD PTR [rbx],rax
  407b1e:	mov    rdi,rbp
  407b21:	call   403180 <malloc@plt>
  407b26:	mov    rbx,rax
  407b29:	test   rax,rax
  407b2c:	je     407b49 <flatcc_builder_finalize_buffer@@Base+0x49>
  407b2e:	mov    rdx,rbp
  407b31:	mov    rsi,rax
  407b34:	mov    rdi,r12
  407b37:	call   407aa0 <flatcc_builder_copy_buffer@@Base>
  407b3c:	test   rax,rax
  407b3f:	je     407b68 <flatcc_builder_finalize_buffer@@Base+0x68>
  407b41:	mov    rax,rbx
  407b44:	pop    rbx
  407b45:	pop    rbp
  407b46:	pop    r12
  407b48:	ret    
  407b49:	lea    rcx,[rip+0x2a70]        # 40a5c0 <_IO_stdin_used@@Base+0x5c0>
  407b50:	mov    edx,0x798
  407b55:	lea    rsi,[rip+0x261c]        # 40a178 <_IO_stdin_used@@Base+0x178>
  407b5c:	lea    rdi,[rip+0x29ac]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  407b63:	call   403130 <__assert_fail@plt>
  407b68:	lea    rcx,[rip+0x2a51]        # 40a5c0 <_IO_stdin_used@@Base+0x5c0>
  407b6f:	mov    edx,0x79c
  407b74:	lea    rsi,[rip+0x25fd]        # 40a178 <_IO_stdin_used@@Base+0x178>
  407b7b:	lea    rdi,[rip+0x298d]        # 40a50f <_IO_stdin_used@@Base+0x50f>
  407b82:	call   403130 <__assert_fail@plt>
  407b87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407b90 <flatcc_builder_finalize_aligned_buffer@@Base>:
  407b90:	endbr64 
  407b94:	push   r13
  407b96:	push   r12
  407b98:	mov    r12,rsi
  407b9b:	push   rbp
  407b9c:	mov    rbp,rdi
  407b9f:	push   rbx
  407ba0:	sub    rsp,0x18
  407ba4:	mov    rax,QWORD PTR fs:0x28
  407bad:	mov    QWORD PTR [rsp+0x8],rax
  407bb2:	xor    eax,eax
  407bb4:	call   407980 <flatcc_builder_get_buffer_size@@Base>
  407bb9:	mov    rbx,rax
  407bbc:	test   r12,r12
  407bbf:	je     407bc5 <flatcc_builder_finalize_aligned_buffer@@Base+0x35>
  407bc1:	mov    QWORD PTR [r12],rax
  407bc5:	mov    rdi,rbp
  407bc8:	call   407910 <flatcc_builder_get_buffer_alignment@@Base>
  407bcd:	movzx  eax,ax
  407bd0:	lea    rdx,[rbx+rax*1-0x1]
  407bd5:	mov    rbx,rax
  407bd8:	neg    rbx
  407bdb:	and    rbx,rdx
  407bde:	mov    esi,0x8
  407be3:	cmp    rax,0x8
  407be7:	cmovae rsi,rax
  407beb:	mov    rdi,rsp
  407bee:	mov    rdx,rbx
  407bf1:	mov    QWORD PTR [rsp],0x0
  407bf9:	call   4031a0 <posix_memalign@plt>
  407bfe:	test   eax,eax
  407c00:	je     407c28 <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
  407c02:	mov    rdi,QWORD PTR [rsp]
  407c06:	test   rdi,rdi
  407c09:	je     407c10 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  407c0b:	call   4030f0 <free@plt>
  407c10:	test   r12,r12
  407c13:	je     407c72 <flatcc_builder_finalize_aligned_buffer@@Base+0xe2>
  407c15:	mov    QWORD PTR [r12],0x0
  407c1d:	xor    r13d,r13d
  407c20:	jmp    407c44 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  407c22:	nop    WORD PTR [rax+rax*1+0x0]
  407c28:	mov    r13,QWORD PTR [rsp]
  407c2c:	test   r13,r13
  407c2f:	je     407c10 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
  407c31:	mov    rdx,rbx
  407c34:	mov    rsi,r13
  407c37:	mov    rdi,rbp
  407c3a:	call   407aa0 <flatcc_builder_copy_buffer@@Base>
  407c3f:	test   rax,rax
  407c42:	je     407c68 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
  407c44:	mov    rcx,QWORD PTR [rsp+0x8]
  407c49:	xor    rcx,QWORD PTR fs:0x28
  407c52:	mov    rax,r13
  407c55:	jne    407c6d <flatcc_builder_finalize_aligned_buffer@@Base+0xdd>
  407c57:	add    rsp,0x18
  407c5b:	pop    rbx
  407c5c:	pop    rbp
  407c5d:	pop    r12
  407c5f:	pop    r13
  407c61:	ret    
  407c62:	nop    WORD PTR [rax+rax*1+0x0]
  407c68:	mov    rdi,r13
  407c6b:	jmp    407c0b <flatcc_builder_finalize_aligned_buffer@@Base+0x7b>
  407c6d:	call   403120 <__stack_chk_fail@plt>
  407c72:	xor    r13d,r13d
  407c75:	jmp    407c44 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
  407c77:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407c80 <flatcc_builder_aligned_alloc@@Base>:
  407c80:	endbr64 
  407c84:	sub    rsp,0x18
  407c88:	mov    rax,QWORD PTR fs:0x28
  407c91:	mov    QWORD PTR [rsp+0x8],rax
  407c96:	xor    eax,eax
  407c98:	mov    rdx,rsi
  407c9b:	cmp    rdi,0x8
  407c9f:	mov    esi,0x8
  407ca4:	cmovae rsi,rdi
  407ca8:	mov    rdi,rsp
  407cab:	mov    QWORD PTR [rsp],0x0
  407cb3:	call   4031a0 <posix_memalign@plt>
  407cb8:	test   eax,eax
  407cba:	mov    rax,QWORD PTR [rsp]
  407cbe:	je     407ccf <flatcc_builder_aligned_alloc@@Base+0x4f>
  407cc0:	test   rax,rax
  407cc3:	je     407ccf <flatcc_builder_aligned_alloc@@Base+0x4f>
  407cc5:	mov    rdi,rax
  407cc8:	call   4030f0 <free@plt>
  407ccd:	xor    eax,eax
  407ccf:	mov    rcx,QWORD PTR [rsp+0x8]
  407cd4:	xor    rcx,QWORD PTR fs:0x28
  407cdd:	jne    407ce4 <flatcc_builder_aligned_alloc@@Base+0x64>
  407cdf:	add    rsp,0x18
  407ce3:	ret    
  407ce4:	call   403120 <__stack_chk_fail@plt>
  407ce9:	nop    DWORD PTR [rax+0x0]

0000000000407cf0 <flatcc_builder_aligned_free@@Base>:
  407cf0:	endbr64 
  407cf4:	jmp    4030f0 <free@plt>
  407cf9:	nop    DWORD PTR [rax+0x0]

0000000000407d00 <flatcc_builder_get_emit_context@@Base>:
  407d00:	endbr64 
  407d04:	mov    rax,QWORD PTR [rdi+0x38]
  407d08:	ret    
  407d09:	nop    DWORD PTR [rax+0x0]

0000000000407d10 <flatcc_emitter_recycle_page@@Base>:
  407d10:	endbr64 
  407d14:	mov    rax,QWORD PTR [rdi]
  407d17:	cmp    rax,rsi
  407d1a:	je     407d6b <flatcc_emitter_recycle_page@@Base+0x5b>
  407d1c:	cmp    QWORD PTR [rdi+0x8],rsi
  407d20:	je     407d6b <flatcc_emitter_recycle_page@@Base+0x5b>
  407d22:	mov    rdx,QWORD PTR [rsi+0xb88]
  407d29:	mov    rcx,QWORD PTR [rsi+0xb80]
  407d30:	mov    QWORD PTR [rcx+0xb88],rdx
  407d37:	mov    QWORD PTR [rdx+0xb80],rcx
  407d3e:	mov    rdx,QWORD PTR [rax+0xb88]
  407d45:	mov    QWORD PTR [rsi+0xb80],rax
  407d4c:	mov    QWORD PTR [rsi+0xb88],rdx
  407d53:	mov    QWORD PTR [rdx+0xb80],rsi
  407d5a:	mov    rax,QWORD PTR [rsi+0xb80]
  407d61:	mov    QWORD PTR [rax+0xb88],rsi
  407d68:	xor    eax,eax
  407d6a:	ret    
  407d6b:	mov    eax,0xffffffff
  407d70:	ret    
  407d71:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407d7c:	nop    DWORD PTR [rax+0x0]

0000000000407d80 <flatcc_emitter_reset@@Base>:
  407d80:	endbr64 
  407d84:	mov    rax,QWORD PTR [rdi]
  407d87:	test   rax,rax
  407d8a:	je     407e60 <flatcc_emitter_reset@@Base+0xe0>
  407d90:	mov    rcx,QWORD PTR [rdi+0x40]
  407d94:	mov    rsi,QWORD PTR [rdi+0x30]
  407d98:	test   rcx,rcx
  407d9b:	cmove  rcx,rsi
  407d9f:	lea    rdx,[rax+0x5c0]
  407da6:	mov    QWORD PTR [rdi+0x10],rdx
  407daa:	mov    QWORD PTR [rdi+0x20],rdx
  407dae:	lea    rdx,[rcx+rcx*2]
  407db2:	shr    rdx,0x2
  407db6:	shr    rsi,0x2
  407dba:	add    rdx,rsi
  407dbd:	mov    QWORD PTR [rdi+0x8],rax
  407dc1:	mov    QWORD PTR [rdi+0x18],0x5c0
  407dc9:	mov    QWORD PTR [rdi+0x28],0x5c0
  407dd1:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  407ddb:	mov    QWORD PTR [rdi+0x40],rdx
  407ddf:	add    rdx,rdx
  407de2:	mov    QWORD PTR [rdi+0x30],0x0
  407dea:	cmp    rdx,QWORD PTR [rdi+0x38]
  407dee:	jae    407e60 <flatcc_emitter_reset@@Base+0xe0>
  407df0:	push   rbx
  407df1:	mov    rbx,rdi
  407df4:	mov    rdi,QWORD PTR [rax+0xb80]
  407dfb:	cmp    rax,rdi
  407dfe:	jne    407e18 <flatcc_emitter_reset@@Base+0x98>
  407e00:	jmp    407e54 <flatcc_emitter_reset@@Base+0xd4>
  407e02:	nop    WORD PTR [rax+rax*1+0x0]
  407e08:	mov    rax,QWORD PTR [rbx+0x8]
  407e0c:	mov    rdi,QWORD PTR [rax+0xb80]
  407e13:	cmp    rdi,QWORD PTR [rbx]
  407e16:	je     407e54 <flatcc_emitter_reset@@Base+0xd4>
  407e18:	mov    rdx,QWORD PTR [rdi+0xb80]
  407e1f:	mov    QWORD PTR [rax+0xb80],rdx
  407e26:	mov    rdx,QWORD PTR [rdi+0xb80]
  407e2d:	mov    QWORD PTR [rdx+0xb88],rax
  407e34:	call   4030f0 <free@plt>
  407e39:	mov    rax,QWORD PTR [rbx+0x38]
  407e3d:	mov    rcx,QWORD PTR [rbx+0x40]
  407e41:	sub    rax,0xb80
  407e47:	lea    rdx,[rcx+rcx*1]
  407e4b:	mov    QWORD PTR [rbx+0x38],rax
  407e4f:	cmp    rax,rdx
  407e52:	ja     407e08 <flatcc_emitter_reset@@Base+0x88>
  407e54:	pop    rbx
  407e55:	ret    
  407e56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407e60:	ret    
  407e61:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407e6c:	nop    DWORD PTR [rax+0x0]

0000000000407e70 <flatcc_emitter_clear@@Base>:
  407e70:	endbr64 
  407e74:	mov    rax,QWORD PTR [rdi]
  407e77:	test   rax,rax
  407e7a:	je     407ef8 <flatcc_emitter_clear@@Base+0x88>
  407e7c:	push   rbp
  407e7d:	mov    rbp,rdi
  407e80:	push   rbx
  407e81:	sub    rsp,0x8
  407e85:	mov    rdx,QWORD PTR [rax+0xb88]
  407e8c:	mov    QWORD PTR [rdx+0xb80],0x0
  407e97:	mov    rbx,QWORD PTR [rax+0xb80]
  407e9e:	test   rbx,rbx
  407ea1:	jne    407eab <flatcc_emitter_clear@@Base+0x3b>
  407ea3:	jmp    407f00 <flatcc_emitter_clear@@Base+0x90>
  407ea5:	nop    DWORD PTR [rax]
  407ea8:	mov    rbx,rax
  407eab:	mov    rdi,QWORD PTR [rbx+0xb88]
  407eb2:	call   4030f0 <free@plt>
  407eb7:	mov    rax,QWORD PTR [rbx+0xb80]
  407ebe:	test   rax,rax
  407ec1:	jne    407ea8 <flatcc_emitter_clear@@Base+0x38>
  407ec3:	mov    rdi,rbx
  407ec6:	call   4030f0 <free@plt>
  407ecb:	mov    QWORD PTR [rbp+0x40],0x0
  407ed3:	vpxor  xmm0,xmm0,xmm0
  407ed7:	vmovups XMMWORD PTR [rbp+0x0],xmm0
  407edc:	vmovups XMMWORD PTR [rbp+0x10],xmm0
  407ee1:	vmovups XMMWORD PTR [rbp+0x20],xmm0
  407ee6:	vmovups XMMWORD PTR [rbp+0x30],xmm0
  407eeb:	add    rsp,0x8
  407eef:	pop    rbx
  407ef0:	pop    rbp
  407ef1:	ret    
  407ef2:	nop    WORD PTR [rax+rax*1+0x0]
  407ef8:	ret    
  407ef9:	nop    DWORD PTR [rax+0x0]
  407f00:	mov    rbx,rax
  407f03:	jmp    407ec3 <flatcc_emitter_clear@@Base+0x53>
  407f05:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407f10 <flatcc_emitter@@Base>:
  407f10:	endbr64 
  407f14:	push   r15
  407f16:	push   r14
  407f18:	push   r13
  407f1a:	push   r12
  407f1c:	push   rbp
  407f1d:	mov    rbp,rsi
  407f20:	push   rbx
  407f21:	mov    rbx,rdi
  407f24:	sub    rsp,0x18
  407f28:	add    QWORD PTR [rdi+0x30],r8
  407f2c:	test   ecx,ecx
  407f2e:	js     408140 <flatcc_emitter@@Base+0x230>
  407f34:	mov    rax,QWORD PTR [rdi+0x28]
  407f38:	cmp    rax,r8
  407f3b:	jae    407fc8 <flatcc_emitter@@Base+0xb8>
  407f41:	test   edx,edx
  407f43:	je     407fb3 <flatcc_emitter@@Base+0xa3>
  407f45:	lea    r14d,[rdx-0x1]
  407f49:	inc    r14
  407f4c:	shl    r14,0x4
  407f50:	lea    rax,[rbp+r14*1+0x0]
  407f55:	mov    QWORD PTR [rsp+0x8],rax
  407f5a:	nop    WORD PTR [rax+rax*1+0x0]
  407f60:	mov    r15,QWORD PTR [rbp+0x8]
  407f64:	mov    r13,QWORD PTR [rbp+0x0]
  407f68:	test   r15,r15
  407f6b:	je     407fa8 <flatcc_emitter@@Base+0x98>
  407f6d:	nop    DWORD PTR [rax]
  407f70:	mov    r12,QWORD PTR [rbx+0x28]
  407f74:	cmp    r15,r12
  407f77:	jbe    408070 <flatcc_emitter@@Base+0x160>
  407f7d:	test   r12,r12
  407f80:	je     408018 <flatcc_emitter@@Base+0x108>
  407f86:	sub    r15,r12
  407f89:	mov    rdi,QWORD PTR [rbx+0x20]
  407f8d:	mov    rsi,r13
  407f90:	mov    rdx,r12
  407f93:	call   403170 <memcpy@plt>
  407f98:	add    r13,r12
  407f9b:	add    QWORD PTR [rbx+0x20],r12
  407f9f:	sub    QWORD PTR [rbx+0x28],r12
  407fa3:	test   r15,r15
  407fa6:	jne    407f70 <flatcc_emitter@@Base+0x60>
  407fa8:	add    rbp,0x10
  407fac:	cmp    rbp,QWORD PTR [rsp+0x8]
  407fb1:	jne    407f60 <flatcc_emitter@@Base+0x50>
  407fb3:	add    rsp,0x18
  407fb7:	pop    rbx
  407fb8:	pop    rbp
  407fb9:	pop    r12
  407fbb:	pop    r13
  407fbd:	pop    r14
  407fbf:	xor    eax,eax
  407fc1:	pop    r15
  407fc3:	ret    
  407fc4:	nop    DWORD PTR [rax+0x0]
  407fc8:	mov    rcx,QWORD PTR [rdi+0x20]
  407fcc:	sub    rax,r8
  407fcf:	lea    rsi,[rcx+r8*1]
  407fd3:	mov    QWORD PTR [rdi+0x20],rsi
  407fd7:	mov    QWORD PTR [rdi+0x28],rax
  407fdb:	test   edx,edx
  407fdd:	je     407fb3 <flatcc_emitter@@Base+0xa3>
  407fdf:	lea    ebx,[rdx-0x1]
  407fe2:	inc    rbx
  407fe5:	shl    rbx,0x4
  407fe9:	add    rbx,rbp
  407fec:	nop    DWORD PTR [rax+0x0]
  407ff0:	mov    rsi,QWORD PTR [rbp+0x0]
  407ff4:	mov    rdx,QWORD PTR [rbp+0x8]
  407ff8:	mov    rdi,rcx
  407ffb:	call   403170 <memcpy@plt>
  408000:	mov    rcx,QWORD PTR [rbp+0x8]
  408004:	add    rbp,0x10
  408008:	add    rcx,rax
  40800b:	cmp    rbp,rbx
  40800e:	jne    407ff0 <flatcc_emitter@@Base+0xe0>
  408010:	jmp    407fb3 <flatcc_emitter@@Base+0xa3>
  408012:	nop    WORD PTR [rax+rax*1+0x0]
  408018:	mov    r12,QWORD PTR [rbx+0x8]
  40801c:	test   r12,r12
  40801f:	je     4080c8 <flatcc_emitter@@Base+0x1b8>
  408025:	mov    rax,QWORD PTR [r12+0xb80]
  40802d:	mov    r14,QWORD PTR [rbx]
  408030:	cmp    rax,r14
  408033:	je     408080 <flatcc_emitter@@Base+0x170>
  408035:	mov    QWORD PTR [rbx+0x8],rax
  408039:	mov    QWORD PTR [rbx+0x28],0xb80
  408041:	mov    rdx,QWORD PTR [rax+0xb88]
  408048:	mov    QWORD PTR [rbx+0x20],rax
  40804c:	mov    edx,DWORD PTR [rdx+0xb90]
  408052:	mov    r12,QWORD PTR [rbx+0x28]
  408056:	add    edx,0xb80
  40805c:	mov    DWORD PTR [rax+0xb90],edx
  408062:	cmp    r15,r12
  408065:	ja     407f7d <flatcc_emitter@@Base+0x6d>
  40806b:	nop    DWORD PTR [rax+rax*1+0x0]
  408070:	mov    r12,r15
  408073:	xor    r15d,r15d
  408076:	jmp    407f89 <flatcc_emitter@@Base+0x79>
  40807b:	nop    DWORD PTR [rax+rax*1+0x0]
  408080:	mov    edi,0xb98
  408085:	call   403180 <malloc@plt>
  40808a:	test   rax,rax
  40808d:	je     408128 <flatcc_emitter@@Base+0x218>
  408093:	add    QWORD PTR [rbx+0x38],0xb80
  40809b:	mov    QWORD PTR [rax+0xb88],r12
  4080a2:	mov    QWORD PTR [rax+0xb80],r14
  4080a9:	mov    QWORD PTR [r14+0xb88],rax
  4080b0:	mov    QWORD PTR [r12+0xb80],rax
  4080b8:	mov    QWORD PTR [rbx+0x8],rax
  4080bc:	jmp    408039 <flatcc_emitter@@Base+0x129>
  4080c1:	nop    DWORD PTR [rax+0x0]
  4080c8:	mov    edi,0xb98
  4080cd:	call   403180 <malloc@plt>
  4080d2:	test   rax,rax
  4080d5:	je     408128 <flatcc_emitter@@Base+0x218>
  4080d7:	lea    rdx,[rax+0x5c0]
  4080de:	add    QWORD PTR [rbx+0x38],0xb80
  4080e6:	mov    QWORD PTR [rbx],rax
  4080e9:	mov    QWORD PTR [rbx+0x8],rax
  4080ed:	mov    QWORD PTR [rax+0xb80],rax
  4080f4:	mov    QWORD PTR [rax+0xb88],rax
  4080fb:	mov    QWORD PTR [rbx+0x10],rdx
  4080ff:	mov    QWORD PTR [rbx+0x20],rdx
  408103:	mov    QWORD PTR [rbx+0x18],0x5c0
  40810b:	mov    QWORD PTR [rbx+0x28],0x5c0
  408113:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  40811d:	jmp    407f70 <flatcc_emitter@@Base+0x60>
  408122:	nop    WORD PTR [rax+rax*1+0x0]
  408128:	add    rsp,0x18
  40812c:	pop    rbx
  40812d:	pop    rbp
  40812e:	pop    r12
  408130:	pop    r13
  408132:	pop    r14
  408134:	mov    eax,0xffffffff
  408139:	pop    r15
  40813b:	ret    
  40813c:	nop    DWORD PTR [rax+0x0]
  408140:	mov    rax,QWORD PTR [rdi+0x18]
  408144:	cmp    rax,r8
  408147:	jae    4082f0 <flatcc_emitter@@Base+0x3e0>
  40814d:	movsxd rax,edx
  408150:	shl    rax,0x4
  408154:	add    rbp,rax
  408157:	mov    edx,edx
  408159:	shl    rdx,0x4
  40815d:	mov    rax,rbp
  408160:	sub    rax,rdx
  408163:	mov    QWORD PTR [rsp+0x8],rax
  408168:	nop    DWORD PTR [rax+rax*1+0x0]
  408170:	cmp    rbp,QWORD PTR [rsp+0x8]
  408175:	je     407fb3 <flatcc_emitter@@Base+0xa3>
  40817b:	sub    rbp,0x10
  40817f:	mov    r12,QWORD PTR [rbp+0x8]
  408183:	mov    r13,QWORD PTR [rbp+0x0]
  408187:	add    r13,r12
  40818a:	test   r12,r12
  40818d:	je     408170 <flatcc_emitter@@Base+0x260>
  40818f:	mov    rdx,QWORD PTR [rbx+0x18]
  408193:	cmp    rdx,r12
  408196:	jae    4081d0 <flatcc_emitter@@Base+0x2c0>
  408198:	test   rdx,rdx
  40819b:	je     4081e0 <flatcc_emitter@@Base+0x2d0>
  40819d:	sub    r12,rdx
  4081a0:	xor    ecx,ecx
  4081a2:	mov    rdi,QWORD PTR [rbx+0x10]
  4081a6:	mov    rax,rdx
  4081a9:	neg    rax
  4081ac:	add    rdi,rax
  4081af:	mov    QWORD PTR [rbx+0x10],rdi
  4081b3:	mov    QWORD PTR [rbx+0x18],rcx
  4081b7:	add    r13,rax
  4081ba:	mov    rsi,r13
  4081bd:	call   403170 <memcpy@plt>
  4081c2:	test   r12,r12
  4081c5:	je     408170 <flatcc_emitter@@Base+0x260>
  4081c7:	mov    rdx,QWORD PTR [rbx+0x18]
  4081cb:	cmp    rdx,r12
  4081ce:	jb     408198 <flatcc_emitter@@Base+0x288>
  4081d0:	mov    rcx,rdx
  4081d3:	sub    rcx,r12
  4081d6:	mov    rdx,r12
  4081d9:	xor    r12d,r12d
  4081dc:	jmp    4081a2 <flatcc_emitter@@Base+0x292>
  4081de:	xchg   ax,ax
  4081e0:	mov    r15,QWORD PTR [rbx]
  4081e3:	test   r15,r15
  4081e6:	je     408288 <flatcc_emitter@@Base+0x378>
  4081ec:	mov    rax,QWORD PTR [r15+0xb88]
  4081f3:	mov    r14,QWORD PTR [rbx+0x8]
  4081f7:	cmp    rax,r14
  4081fa:	je     408248 <flatcc_emitter@@Base+0x338>
  4081fc:	mov    edx,DWORD PTR [r15+0xb90]
  408203:	sub    edx,0xb80
  408209:	mov    DWORD PTR [rax+0xb90],edx
  40820f:	mov    QWORD PTR [rbx],rax
  408212:	lea    rdx,[rax+0xb80]
  408219:	mov    QWORD PTR [rbx+0x10],rdx
  40821d:	mov    rdx,QWORD PTR [rax+0xb80]
  408224:	mov    QWORD PTR [rbx+0x18],0xb80
  40822c:	mov    edx,DWORD PTR [rdx+0xb90]
  408232:	sub    edx,0xb80
  408238:	mov    DWORD PTR [rax+0xb90],edx
  40823e:	jmp    40818f <flatcc_emitter@@Base+0x27f>
  408243:	nop    DWORD PTR [rax+rax*1+0x0]
  408248:	mov    edi,0xb98
  40824d:	call   403180 <malloc@plt>
  408252:	test   rax,rax
  408255:	je     408128 <flatcc_emitter@@Base+0x218>
  40825b:	add    QWORD PTR [rbx+0x38],0xb80
  408263:	mov    QWORD PTR [rax+0xb88],r14
  40826a:	mov    QWORD PTR [rax+0xb80],r15
  408271:	mov    QWORD PTR [r15+0xb88],rax
  408278:	mov    QWORD PTR [r14+0xb80],rax
  40827f:	mov    QWORD PTR [rbx],rax
  408282:	jmp    408212 <flatcc_emitter@@Base+0x302>
  408284:	nop    DWORD PTR [rax+0x0]
  408288:	mov    edi,0xb98
  40828d:	call   403180 <malloc@plt>
  408292:	test   rax,rax
  408295:	je     408128 <flatcc_emitter@@Base+0x218>
  40829b:	lea    rdx,[rax+0x5c0]
  4082a2:	add    QWORD PTR [rbx+0x38],0xb80
  4082aa:	mov    QWORD PTR [rbx],rax
  4082ad:	mov    QWORD PTR [rbx+0x8],rax
  4082b1:	mov    QWORD PTR [rax+0xb80],rax
  4082b8:	mov    QWORD PTR [rax+0xb88],rax
  4082bf:	mov    QWORD PTR [rbx+0x10],rdx
  4082c3:	mov    QWORD PTR [rbx+0x20],rdx
  4082c7:	mov    QWORD PTR [rbx+0x18],0x5c0
  4082cf:	mov    QWORD PTR [rbx+0x28],0x5c0
  4082d7:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4082e1:	jmp    40818f <flatcc_emitter@@Base+0x27f>
  4082e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4082f0:	mov    rcx,QWORD PTR [rdi+0x10]
  4082f4:	sub    rax,r8
  4082f7:	sub    rcx,r8
  4082fa:	mov    QWORD PTR [rdi+0x10],rcx
  4082fe:	mov    QWORD PTR [rdi+0x18],rax
  408302:	jmp    407fdb <flatcc_emitter@@Base+0xcb>
  408307:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408310 <flatcc_emitter_copy_buffer@@Base>:
  408310:	endbr64 
  408314:	mov    rax,QWORD PTR [rdi+0x30]
  408318:	cmp    rax,rdx
  40831b:	ja     4083c0 <flatcc_emitter_copy_buffer@@Base+0xb0>
  408321:	mov    rcx,QWORD PTR [rdi]
  408324:	test   rcx,rcx
  408327:	je     4083c2 <flatcc_emitter_copy_buffer@@Base+0xb2>
  40832d:	push   rbp
  40832e:	mov    r8,rsi
  408331:	mov    rbp,rdi
  408334:	push   rbx
  408335:	sub    rsp,0x8
  408339:	mov    rsi,QWORD PTR [rdi+0x10]
  40833d:	cmp    rcx,QWORD PTR [rdi+0x8]
  408341:	je     4083d0 <flatcc_emitter_copy_buffer@@Base+0xc0>
  408347:	mov    ecx,0xb80
  40834c:	mov    rbx,rcx
  40834f:	sub    rbx,QWORD PTR [rdi+0x18]
  408353:	mov    rdx,rbx
  408356:	mov    rdi,r8
  408359:	call   403170 <memcpy@plt>
  40835e:	lea    rcx,[rax+rbx*1]
  408362:	mov    rax,QWORD PTR [rbp+0x0]
  408366:	mov    rbx,QWORD PTR [rax+0xb80]
  40836d:	cmp    rbx,QWORD PTR [rbp+0x8]
  408371:	je     40839f <flatcc_emitter_copy_buffer@@Base+0x8f>
  408373:	nop    DWORD PTR [rax+rax*1+0x0]
  408378:	mov    rsi,rbx
  40837b:	mov    rdi,rcx
  40837e:	mov    edx,0xb80
  408383:	call   403170 <memcpy@plt>
  408388:	mov    rbx,QWORD PTR [rbx+0xb80]
  40838f:	mov    rcx,rax
  408392:	add    rcx,0xb80
  408399:	cmp    QWORD PTR [rbp+0x8],rbx
  40839d:	jne    408378 <flatcc_emitter_copy_buffer@@Base+0x68>
  40839f:	mov    edx,0xb80
  4083a4:	sub    rdx,QWORD PTR [rbp+0x28]
  4083a8:	mov    rsi,rbx
  4083ab:	mov    rdi,rcx
  4083ae:	call   403170 <memcpy@plt>
  4083b3:	add    rsp,0x8
  4083b7:	mov    rcx,rax
  4083ba:	pop    rbx
  4083bb:	mov    rax,rcx
  4083be:	pop    rbp
  4083bf:	ret    
  4083c0:	xor    ecx,ecx
  4083c2:	mov    rax,rcx
  4083c5:	ret    
  4083c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4083d0:	mov    rdx,rax
  4083d3:	mov    rdi,r8
  4083d6:	call   403170 <memcpy@plt>
  4083db:	add    rsp,0x8
  4083df:	mov    rcx,rax
  4083e2:	pop    rbx
  4083e3:	mov    rax,rcx
  4083e6:	pop    rbp
  4083e7:	ret    
  4083e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004083f0 <flatcc_verify_error_string@@Base>:
  4083f0:	endbr64 
  4083f4:	cmp    edi,0x24
  4083f7:	ja     408660 <flatcc_verify_error_string@@Base+0x270>
  4083fd:	lea    rdx,[rip+0x2ef4]        # 40b2f8 <flatcc_builder_padding_base@@Base+0x698>
  408404:	mov    edi,edi
  408406:	movsxd rax,DWORD PTR [rdx+rdi*4]
  40840a:	add    rax,rdx
  40840d:	notrack jmp rax
  408410:	lea    rax,[rip+0x2a51]        # 40ae68 <flatcc_builder_padding_base@@Base+0x208>
  408417:	ret    
  408418:	nop    DWORD PTR [rax+rax*1+0x0]
  408420:	lea    rax,[rip+0x2bc5]        # 40afec <flatcc_builder_padding_base@@Base+0x38c>
  408427:	ret    
  408428:	nop    DWORD PTR [rax+rax*1+0x0]
  408430:	lea    rax,[rip+0x2e99]        # 40b2d0 <flatcc_builder_padding_base@@Base+0x670>
  408437:	ret    
  408438:	nop    DWORD PTR [rax+rax*1+0x0]
  408440:	lea    rax,[rip+0x2e51]        # 40b298 <flatcc_builder_padding_base@@Base+0x638>
  408447:	ret    
  408448:	nop    DWORD PTR [rax+rax*1+0x0]
  408450:	lea    rax,[rip+0x2e19]        # 40b270 <flatcc_builder_padding_base@@Base+0x610>
  408457:	ret    
  408458:	nop    DWORD PTR [rax+rax*1+0x0]
  408460:	lea    rax,[rip+0x2de1]        # 40b248 <flatcc_builder_padding_base@@Base+0x5e8>
  408467:	ret    
  408468:	nop    DWORD PTR [rax+rax*1+0x0]
  408470:	lea    rax,[rip+0x2b60]        # 40afd7 <flatcc_builder_padding_base@@Base+0x377>
  408477:	ret    
  408478:	nop    DWORD PTR [rax+rax*1+0x0]
  408480:	lea    rax,[rip+0x2d99]        # 40b220 <flatcc_builder_padding_base@@Base+0x5c0>
  408487:	ret    
  408488:	nop    DWORD PTR [rax+rax*1+0x0]
  408490:	lea    rax,[rip+0x2d61]        # 40b1f8 <flatcc_builder_padding_base@@Base+0x598>
  408497:	ret    
  408498:	nop    DWORD PTR [rax+rax*1+0x0]
  4084a0:	lea    rax,[rip+0x2b18]        # 40afbf <flatcc_builder_padding_base@@Base+0x35f>
  4084a7:	ret    
  4084a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4084b0:	lea    rax,[rip+0x2aed]        # 40afa4 <flatcc_builder_padding_base@@Base+0x344>
  4084b7:	ret    
  4084b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4084c0:	lea    rax,[rip+0x2ac9]        # 40af90 <flatcc_builder_padding_base@@Base+0x330>
  4084c7:	ret    
  4084c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4084d0:	lea    rax,[rip+0x2cf1]        # 40b1c8 <flatcc_builder_padding_base@@Base+0x568>
  4084d7:	ret    
  4084d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4084e0:	lea    rax,[rip+0x2cb1]        # 40b198 <flatcc_builder_padding_base@@Base+0x538>
  4084e7:	ret    
  4084e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4084f0:	lea    rax,[rip+0x2c71]        # 40b168 <flatcc_builder_padding_base@@Base+0x508>
  4084f7:	ret    
  4084f8:	nop    DWORD PTR [rax+rax*1+0x0]
  408500:	lea    rax,[rip+0x2c29]        # 40b130 <flatcc_builder_padding_base@@Base+0x4d0>
  408507:	ret    
  408508:	nop    DWORD PTR [rax+rax*1+0x0]
  408510:	lea    rax,[rip+0x2be9]        # 40b100 <flatcc_builder_padding_base@@Base+0x4a0>
  408517:	ret    
  408518:	nop    DWORD PTR [rax+rax*1+0x0]
  408520:	lea    rax,[rip+0x2a51]        # 40af78 <flatcc_builder_padding_base@@Base+0x318>
  408527:	ret    
  408528:	nop    DWORD PTR [rax+rax*1+0x0]
  408530:	lea    rax,[rip+0x2ba1]        # 40b0d8 <flatcc_builder_padding_base@@Base+0x478>
  408537:	ret    
  408538:	nop    DWORD PTR [rax+rax*1+0x0]
  408540:	lea    rax,[rip+0x2a1d]        # 40af64 <flatcc_builder_padding_base@@Base+0x304>
  408547:	ret    
  408548:	nop    DWORD PTR [rax+rax*1+0x0]
  408550:	lea    rax,[rip+0x2b59]        # 40b0b0 <flatcc_builder_padding_base@@Base+0x450>
  408557:	ret    
  408558:	nop    DWORD PTR [rax+rax*1+0x0]
  408560:	lea    rax,[rip+0x2b21]        # 40b088 <flatcc_builder_padding_base@@Base+0x428>
  408567:	ret    
  408568:	nop    DWORD PTR [rax+rax*1+0x0]
  408570:	lea    rax,[rip+0x2ae9]        # 40b060 <flatcc_builder_padding_base@@Base+0x400>
  408577:	ret    
  408578:	nop    DWORD PTR [rax+rax*1+0x0]
  408580:	lea    rax,[rip+0x29c3]        # 40af4a <flatcc_builder_padding_base@@Base+0x2ea>
  408587:	ret    
  408588:	nop    DWORD PTR [rax+rax*1+0x0]
  408590:	lea    rax,[rip+0x299a]        # 40af31 <flatcc_builder_padding_base@@Base+0x2d1>
  408597:	ret    
  408598:	nop    DWORD PTR [rax+rax*1+0x0]
  4085a0:	lea    rax,[rip+0x2972]        # 40af19 <flatcc_builder_padding_base@@Base+0x2b9>
  4085a7:	ret    
  4085a8:	nop    DWORD PTR [rax+rax*1+0x0]
  4085b0:	lea    rax,[rip+0x2951]        # 40af08 <flatcc_builder_padding_base@@Base+0x2a8>
  4085b7:	ret    
  4085b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4085c0:	lea    rax,[rip+0x292c]        # 40aef3 <flatcc_builder_padding_base@@Base+0x293>
  4085c7:	ret    
  4085c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4085d0:	lea    rax,[rip+0x2908]        # 40aedf <flatcc_builder_padding_base@@Base+0x27f>
  4085d7:	ret    
  4085d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4085e0:	lea    rax,[rip+0x28e4]        # 40aecb <flatcc_builder_padding_base@@Base+0x26b>
  4085e7:	ret    
  4085e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4085f0:	lea    rax,[rip+0x28b9]        # 40aeb0 <flatcc_builder_padding_base@@Base+0x250>
  4085f7:	ret    
  4085f8:	nop    DWORD PTR [rax+rax*1+0x0]
  408600:	lea    rax,[rip+0x2a39]        # 40b040 <flatcc_builder_padding_base@@Base+0x3e0>
  408607:	ret    
  408608:	nop    DWORD PTR [rax+rax*1+0x0]
  408610:	lea    rax,[rip+0x2a01]        # 40b018 <flatcc_builder_padding_base@@Base+0x3b8>
  408617:	ret    
  408618:	nop    DWORD PTR [rax+rax*1+0x0]
  408620:	lea    rax,[rip+0x2872]        # 40ae99 <flatcc_builder_padding_base@@Base+0x239>
  408627:	ret    
  408628:	nop    DWORD PTR [rax+rax*1+0x0]
  408630:	lea    rax,[rip+0x2848]        # 40ae7f <flatcc_builder_padding_base@@Base+0x21f>
  408637:	ret    
  408638:	nop    DWORD PTR [rax+rax*1+0x0]
  408640:	lea    rax,[rip+0x2824]        # 40ae6b <flatcc_builder_padding_base@@Base+0x20b>
  408647:	ret    
  408648:	nop    DWORD PTR [rax+rax*1+0x0]
  408650:	lea    rax,[rip+0x29a3]        # 40affa <flatcc_builder_padding_base@@Base+0x39a>
  408657:	ret    
  408658:	nop    DWORD PTR [rax+rax*1+0x0]
  408660:	lea    rax,[rip+0x27f9]        # 40ae60 <flatcc_builder_padding_base@@Base+0x200>
  408667:	ret    
  408668:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408670 <flatcc_verify_field@@Base>:
  408670:	endbr64 
  408674:	lea    esi,[rsi+rsi*1+0x4]
  408678:	xor    eax,eax
  40867a:	cmp    si,WORD PTR [rdi+0x1e]
  40867e:	jae    4086b9 <flatcc_verify_field@@Base+0x49>
  408680:	mov    r8,QWORD PTR [rdi+0x10]
  408684:	movzx  esi,si
  408687:	movzx  esi,WORD PTR [r8+rsi*1]
  40868c:	test   esi,esi
  40868e:	je     4086b9 <flatcc_verify_field@@Base+0x49>
  408690:	movzx  r8d,WORD PTR [rdi+0x1c]
  408695:	add    edx,esi
  408697:	mov    eax,0xd
  40869c:	cmp    edx,r8d
  40869f:	ja     4086b9 <flatcc_verify_field@@Base+0x49>
  4086a1:	mov    eax,DWORD PTR [rdi+0x18]
  4086a4:	movzx  ecx,cx
  4086a7:	add    eax,DWORD PTR [rdi]
  4086a9:	add    eax,esi
  4086ab:	dec    ecx
  4086ad:	and    eax,ecx
  4086af:	cmp    eax,0x1
  4086b2:	sbb    eax,eax
  4086b4:	not    eax
  4086b6:	and    eax,0xc
  4086b9:	ret    
  4086ba:	nop    WORD PTR [rax+rax*1+0x0]

00000000004086c0 <flatcc_verify_string_field@@Base>:
  4086c0:	endbr64 
  4086c4:	lea    esi,[rsi+rsi*1+0x4]
  4086c8:	cmp    si,WORD PTR [rdi+0x1e]
  4086cc:	jae    408760 <flatcc_verify_string_field@@Base+0xa0>
  4086d2:	mov    rax,QWORD PTR [rdi+0x10]
  4086d6:	movzx  esi,si
  4086d9:	movzx  ecx,WORD PTR [rax+rsi*1]
  4086dd:	test   ecx,ecx
  4086df:	je     408760 <flatcc_verify_string_field@@Base+0xa0>
  4086e1:	movzx  edx,WORD PTR [rdi+0x1c]
  4086e5:	lea    esi,[rcx+0x4]
  4086e8:	mov    eax,0xd
  4086ed:	cmp    esi,edx
  4086ef:	ja     40875a <flatcc_verify_string_field@@Base+0x9a>
  4086f1:	add    ecx,DWORD PTR [rdi+0x18]
  4086f4:	mov    edx,ecx
  4086f6:	mov    eax,0xc
  4086fb:	test   cl,0x3
  4086fe:	jne    40875a <flatcc_verify_string_field@@Base+0x9a>
  408700:	test   ecx,ecx
  408702:	je     408758 <flatcc_verify_string_field@@Base+0x98>
  408704:	mov    rsi,QWORD PTR [rdi]
  408707:	mov    eax,ecx
  408709:	add    ecx,DWORD PTR [rsi+rax*1]
  40870c:	mov    eax,0x11
  408711:	cmp    edx,ecx
  408713:	jae    40875a <flatcc_verify_string_field@@Base+0x9a>
  408715:	mov    r9d,DWORD PTR [rdi+0x8]
  408719:	mov    edi,ecx
  40871b:	lea    r8,[rdi+0x4]
  40871f:	mov    rdx,r9
  408722:	cmp    r8,r9
  408725:	ja     40875a <flatcc_verify_string_field@@Base+0x9a>
  408727:	mov    r9d,ecx
  40872a:	and    r9d,0x3
  40872e:	jne    40875a <flatcc_verify_string_field@@Base+0x9a>
  408730:	mov    edi,DWORD PTR [rsi+rdi*1]
  408733:	sub    edx,0x4
  408736:	sub    edx,ecx
  408738:	lea    ecx,[rdi+0x1]
  40873b:	mov    eax,0x8
  408740:	cmp    edx,ecx
  408742:	jb     40875a <flatcc_verify_string_field@@Base+0x9a>
  408744:	add    rsi,r8
  408747:	cmp    BYTE PTR [rsi+rdi*1],0x0
  40874b:	mov    eax,0x7
  408750:	cmove  eax,r9d
  408754:	ret    
  408755:	nop    DWORD PTR [rax]
  408758:	xor    eax,eax
  40875a:	ret    
  40875b:	nop    DWORD PTR [rax+rax*1+0x0]
  408760:	xor    eax,eax
  408762:	test   edx,edx
  408764:	setne  al
  408767:	shl    eax,0x2
  40876a:	ret    
  40876b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408770 <flatcc_verify_vector_field@@Base>:
  408770:	endbr64 
  408774:	lea    esi,[rsi+rsi*1+0x4]
  408778:	cmp    si,WORD PTR [rdi+0x1e]
  40877c:	jae    408828 <flatcc_verify_vector_field@@Base+0xb8>
  408782:	mov    rax,QWORD PTR [rdi+0x10]
  408786:	movzx  esi,si
  408789:	movzx  esi,WORD PTR [rax+rsi*1]
  40878d:	test   esi,esi
  40878f:	je     408828 <flatcc_verify_vector_field@@Base+0xb8>
  408795:	movzx  edx,WORD PTR [rdi+0x1c]
  408799:	lea    r10d,[rsi+0x4]
  40879d:	mov    eax,0xd
  4087a2:	cmp    r10d,edx
  4087a5:	ja     408820 <flatcc_verify_vector_field@@Base+0xb0>
  4087a7:	mov    edx,DWORD PTR [rdi+0x18]
  4087aa:	mov    eax,0xc
  4087af:	add    edx,esi
  4087b1:	test   dl,0x3
  4087b4:	jne    408820 <flatcc_verify_vector_field@@Base+0xb0>
  4087b6:	test   edx,edx
  4087b8:	je     408838 <flatcc_verify_vector_field@@Base+0xc8>
  4087ba:	mov    r10,QWORD PTR [rdi]
  4087bd:	mov    eax,edx
  4087bf:	mov    esi,DWORD PTR [r10+rax*1]
  4087c3:	mov    eax,0x10
  4087c8:	add    esi,edx
  4087ca:	cmp    edx,esi
  4087cc:	jae    408820 <flatcc_verify_vector_field@@Base+0xb0>
  4087ce:	push   rbx
  4087cf:	mov    ebx,esi
  4087d1:	lea    r11,[rbx+0x4]
  4087d5:	mov    edx,DWORD PTR [rdi+0x8]
  4087d8:	mov    rdi,rdx
  4087db:	cmp    r11,rdx
  4087de:	ja     40881b <flatcc_verify_vector_field@@Base+0xab>
  4087e0:	cmp    r8w,0x4
  4087e5:	mov    edx,0x4
  4087ea:	cmovae edx,r8d
  4087ee:	movzx  edx,dx
  4087f1:	dec    edx
  4087f3:	or     edx,0x3
  4087f6:	movsxd rdx,edx
  4087f9:	test   rdx,r11
  4087fc:	jne    40881b <flatcc_verify_vector_field@@Base+0xab>
  4087fe:	mov    edx,DWORD PTR [r10+rbx*1]
  408802:	sub    edi,0x4
  408805:	mov    eax,0x19
  40880a:	cmp    edx,r9d
  40880d:	ja     40881b <flatcc_verify_vector_field@@Base+0xab>
  40880f:	imul   ecx,edx
  408812:	sub    edi,esi
  408814:	cmp    edi,ecx
  408816:	sbb    eax,eax
  408818:	and    eax,0x1a
  40881b:	pop    rbx
  40881c:	ret    
  40881d:	nop    DWORD PTR [rax]
  408820:	ret    
  408821:	nop    DWORD PTR [rax+0x0]
  408828:	xor    eax,eax
  40882a:	test   edx,edx
  40882c:	setne  al
  40882f:	shl    eax,0x2
  408832:	ret    
  408833:	nop    DWORD PTR [rax+rax*1+0x0]
  408838:	xor    eax,eax
  40883a:	ret    
  40883b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408840 <flatcc_verify_string_vector_field@@Base>:
  408840:	endbr64 
  408844:	lea    esi,[rsi+rsi*1+0x4]
  408848:	cmp    si,WORD PTR [rdi+0x1e]
  40884c:	jae    4089a0 <flatcc_verify_string_vector_field@@Base+0x160>
  408852:	mov    rax,QWORD PTR [rdi+0x10]
  408856:	movzx  esi,si
  408859:	movzx  ecx,WORD PTR [rax+rsi*1]
  40885d:	test   ecx,ecx
  40885f:	je     4089a0 <flatcc_verify_string_vector_field@@Base+0x160>
  408865:	movzx  edx,WORD PTR [rdi+0x1c]
  408869:	lea    esi,[rcx+0x4]
  40886c:	mov    eax,0xd
  408871:	cmp    esi,edx
  408873:	ja     408998 <flatcc_verify_string_vector_field@@Base+0x158>
  408879:	add    ecx,DWORD PTR [rdi+0x18]
  40887c:	mov    edx,ecx
  40887e:	mov    eax,0xc
  408883:	test   cl,0x3
  408886:	jne    408998 <flatcc_verify_string_vector_field@@Base+0x158>
  40888c:	test   ecx,ecx
  40888e:	je     4089e0 <flatcc_verify_string_vector_field@@Base+0x1a0>
  408894:	mov    rcx,QWORD PTR [rdi]
  408897:	mov    eax,edx
  408899:	mov    esi,DWORD PTR [rcx+rax*1]
  40889c:	mov    eax,0x10
  4088a1:	add    esi,edx
  4088a3:	cmp    edx,esi
  4088a5:	jae    408998 <flatcc_verify_string_vector_field@@Base+0x158>
  4088ab:	mov    r9d,DWORD PTR [rdi+0x8]
  4088af:	mov    r10d,esi
  4088b2:	lea    r8,[r10+0x4]
  4088b6:	mov    rdi,r9
  4088b9:	cmp    r8,r9
  4088bc:	ja     408998 <flatcc_verify_string_vector_field@@Base+0x158>
  4088c2:	push   rbx
  4088c3:	test   r8b,0x3
  4088c7:	jne    4089b0 <flatcc_verify_string_vector_field@@Base+0x170>
  4088cd:	mov    eax,DWORD PTR [rcx+r10*1]
  4088d1:	lea    edx,[rsi+0x4]
  4088d4:	cmp    eax,0x3fffffff
  4088d9:	ja     4089b0 <flatcc_verify_string_vector_field@@Base+0x170>
  4088df:	mov    ebx,r9d
  4088e2:	lea    r11d,[rax*4+0x0]
  4088ea:	sub    ebx,edx
  4088ec:	cmp    ebx,r11d
  4088ef:	jb     4089b0 <flatcc_verify_string_vector_field@@Base+0x170>
  4088f5:	test   eax,eax
  4088f7:	je     4089e8 <flatcc_verify_string_vector_field@@Base+0x1a8>
  4088fd:	mov    r8d,DWORD PTR [rcx+r10*1+0x4]
  408902:	mov    eax,0x11
  408907:	add    r8d,edx
  40890a:	cmp    r8d,edx
  40890d:	jbe    408993 <flatcc_verify_string_vector_field@@Base+0x153>
  408913:	mov    r10d,r8d
  408916:	lea    rsi,[r10+0x4]
  40891a:	cmp    rsi,r9
  40891d:	ja     408993 <flatcc_verify_string_vector_field@@Base+0x153>
  40891f:	test   r8b,0x3
  408923:	jne    408993 <flatcc_verify_string_vector_field@@Base+0x153>
  408925:	mov    r10d,DWORD PTR [rcx+r10*1]
  408929:	sub    edi,0x4
  40892c:	mov    ebx,edi
  40892e:	sub    ebx,r8d
  408931:	lea    r8d,[r10+0x1]
  408935:	mov    eax,0x8
  40893a:	cmp    ebx,r8d
  40893d:	jb     408993 <flatcc_verify_string_vector_field@@Base+0x153>
  40893f:	lea    r8d,[rdx+r11*1]
  408943:	jmp    40896f <flatcc_verify_string_vector_field@@Base+0x12f>
  408945:	nop    DWORD PTR [rax]
  408948:	mov    r10d,ebx
  40894b:	lea    rsi,[r10+0x4]
  40894f:	cmp    r9,rsi
  408952:	jb     40898e <flatcc_verify_string_vector_field@@Base+0x14e>
  408954:	test   al,0x3
  408956:	jne    40898e <flatcc_verify_string_vector_field@@Base+0x14e>
  408958:	mov    r10d,DWORD PTR [rcx+r10*1]
  40895c:	mov    r11d,edi
  40895f:	sub    r11d,ebx
  408962:	lea    eax,[r10+0x1]
  408966:	cmp    r11d,eax
  408969:	jb     4089ec <flatcc_verify_string_vector_field@@Base+0x1ac>
  40896f:	add    rsi,rcx
  408972:	cmp    BYTE PTR [rsi+r10*1],0x0
  408977:	jne    4089f3 <flatcc_verify_string_vector_field@@Base+0x1b3>
  408979:	add    edx,0x4
  40897c:	cmp    edx,r8d
  40897f:	je     4089e8 <flatcc_verify_string_vector_field@@Base+0x1a8>
  408981:	mov    eax,edx
  408983:	mov    ebx,DWORD PTR [rcx+rax*1]
  408986:	add    ebx,edx
  408988:	mov    eax,ebx
  40898a:	cmp    edx,ebx
  40898c:	jb     408948 <flatcc_verify_string_vector_field@@Base+0x108>
  40898e:	mov    eax,0x11
  408993:	pop    rbx
  408994:	ret    
  408995:	nop    DWORD PTR [rax]
  408998:	ret    
  408999:	nop    DWORD PTR [rax+0x0]
  4089a0:	xor    eax,eax
  4089a2:	test   edx,edx
  4089a4:	setne  al
  4089a7:	shl    eax,0x2
  4089aa:	ret    
  4089ab:	nop    DWORD PTR [rax+rax*1+0x0]
  4089b0:	and    r8d,0x3
  4089b4:	mov    eax,0x10
  4089b9:	jne    408993 <flatcc_verify_string_vector_field@@Base+0x153>
  4089bb:	mov    edx,DWORD PTR [rcx+r10*1]
  4089bf:	sub    edi,0x4
  4089c2:	mov    eax,0x19
  4089c7:	cmp    edx,0x3fffffff
  4089cd:	ja     408993 <flatcc_verify_string_vector_field@@Base+0x153>
  4089cf:	sub    edi,esi
  4089d1:	shl    edx,0x2
  4089d4:	cmp    edi,edx
  4089d6:	sbb    eax,eax
  4089d8:	and    eax,0x1a
  4089db:	pop    rbx
  4089dc:	ret    
  4089dd:	nop    DWORD PTR [rax]
  4089e0:	xor    eax,eax
  4089e2:	ret    
  4089e3:	nop    DWORD PTR [rax+rax*1+0x0]
  4089e8:	xor    eax,eax
  4089ea:	pop    rbx
  4089eb:	ret    
  4089ec:	mov    eax,0x8
  4089f1:	pop    rbx
  4089f2:	ret    
  4089f3:	mov    eax,0x7
  4089f8:	pop    rbx
  4089f9:	ret    
  4089fa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408a00 <flatcc_verify_table_field@@Base>:
  408a00:	endbr64 
  408a04:	sub    rsp,0x38
  408a08:	lea    esi,[rsi+rsi*1+0x4]
  408a0c:	mov    rax,QWORD PTR fs:0x28
  408a15:	mov    QWORD PTR [rsp+0x28],rax
  408a1a:	xor    eax,eax
  408a1c:	cmp    si,WORD PTR [rdi+0x1e]
  408a20:	jae    408b58 <flatcc_verify_table_field@@Base+0x158>
  408a26:	mov    rax,QWORD PTR [rdi+0x10]
  408a2a:	movzx  esi,si
  408a2d:	movzx  esi,WORD PTR [rax+rsi*1]
  408a31:	test   esi,esi
  408a33:	je     408b58 <flatcc_verify_table_field@@Base+0x158>
  408a39:	movzx  edx,WORD PTR [rdi+0x1c]
  408a3d:	lea    r8d,[rsi+0x4]
  408a41:	mov    eax,0xd
  408a46:	cmp    r8d,edx
  408a49:	ja     408b40 <flatcc_verify_table_field@@Base+0x140>
  408a4f:	add    esi,DWORD PTR [rdi+0x18]
  408a52:	mov    eax,0xc
  408a57:	test   sil,0x3
  408a5b:	jne    408b40 <flatcc_verify_table_field@@Base+0x140>
  408a61:	test   esi,esi
  408a63:	je     408b68 <flatcc_verify_table_field@@Base+0x168>
  408a69:	mov    edx,DWORD PTR [rdi+0xc]
  408a6c:	mov    r9,QWORD PTR [rdi]
  408a6f:	mov    eax,esi
  408a71:	dec    edx
  408a73:	mov    r8d,DWORD PTR [r9+rax*1]
  408a77:	mov    r10d,DWORD PTR [rdi+0x8]
  408a7b:	mov    DWORD PTR [rsp+0xc],edx
  408a7f:	mov    eax,0x3
  408a84:	je     408b40 <flatcc_verify_table_field@@Base+0x140>
  408a8a:	lea    edx,[rsi+r8*1]
  408a8e:	mov    eax,0xf
  408a93:	cmp    esi,edx
  408a95:	jae    408b40 <flatcc_verify_table_field@@Base+0x140>
  408a9b:	mov    esi,edx
  408a9d:	mov    edi,r10d
  408aa0:	lea    r8,[rsi+0x4]
  408aa4:	cmp    r8,rdi
  408aa7:	ja     408b40 <flatcc_verify_table_field@@Base+0x140>
  408aad:	test   dl,0x3
  408ab0:	jne    408b40 <flatcc_verify_table_field@@Base+0x140>
  408ab6:	mov    DWORD PTR [rsp+0x18],edx
  408aba:	mov    eax,edx
  408abc:	sub    eax,DWORD PTR [r9+rsi*1]
  408ac0:	mov    esi,eax
  408ac2:	js     408b6c <flatcc_verify_table_field@@Base+0x16c>
  408ac8:	mov    r8d,eax
  408acb:	mov    eax,0x1d
  408ad0:	test   sil,0x1
  408ad4:	jne    408b40 <flatcc_verify_table_field@@Base+0x140>
  408ad6:	lea    r11,[r8+0x2]
  408ada:	mov    eax,0x1b
  408adf:	cmp    rdi,r11
  408ae2:	jb     408b40 <flatcc_verify_table_field@@Base+0x140>
  408ae4:	lea    r11,[r9+r8*1]
  408ae8:	movzx  eax,WORD PTR [r11]
  408aec:	add    esi,eax
  408aee:	mov    edi,eax
  408af0:	mov    WORD PTR [rsp+0x1e],ax
  408af5:	mov    eax,0x1e
  408afa:	cmp    r10d,esi
  408afd:	jb     408b40 <flatcc_verify_table_field@@Base+0x140>
  408aff:	test   dil,0x1
  408b03:	jne    408b40 <flatcc_verify_table_field@@Base+0x140>
  408b05:	mov    eax,0x1c
  408b0a:	cmp    di,0x3
  408b0e:	jbe    408b40 <flatcc_verify_table_field@@Base+0x140>
  408b10:	movzx  eax,WORD PTR [r9+r8*1+0x2]
  408b16:	mov    esi,r10d
  408b19:	sub    esi,edx
  408b1b:	movzx  edx,ax
  408b1e:	mov    WORD PTR [rsp+0x1c],ax
  408b23:	mov    eax,0x14
  408b28:	cmp    esi,edx
  408b2a:	jb     408b40 <flatcc_verify_table_field@@Base+0x140>
  408b2c:	mov    rdi,rsp
  408b2f:	mov    QWORD PTR [rsp+0x10],r11
  408b34:	mov    QWORD PTR [rsp],r9
  408b38:	mov    DWORD PTR [rsp+0x8],r10d
  408b3d:	call   rcx
  408b3f:	nop
  408b40:	mov    rcx,QWORD PTR [rsp+0x28]
  408b45:	xor    rcx,QWORD PTR fs:0x28
  408b4e:	jne    408b73 <flatcc_verify_table_field@@Base+0x173>
  408b50:	add    rsp,0x38
  408b54:	ret    
  408b55:	nop    DWORD PTR [rax]
  408b58:	xor    eax,eax
  408b5a:	test   edx,edx
  408b5c:	setne  al
  408b5f:	shl    eax,0x2
  408b62:	jmp    408b40 <flatcc_verify_table_field@@Base+0x140>
  408b64:	nop    DWORD PTR [rax+0x0]
  408b68:	xor    eax,eax
  408b6a:	jmp    408b40 <flatcc_verify_table_field@@Base+0x140>
  408b6c:	mov    eax,0x1d
  408b71:	jmp    408b40 <flatcc_verify_table_field@@Base+0x140>
  408b73:	call   403120 <__stack_chk_fail@plt>
  408b78:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408b80 <flatcc_verify_table_vector_field@@Base>:
  408b80:	endbr64 
  408b84:	push   r15
  408b86:	lea    esi,[rsi+rsi*1+0x4]
  408b8a:	push   r14
  408b8c:	push   r13
  408b8e:	push   r12
  408b90:	push   rbp
  408b91:	push   rbx
  408b92:	sub    rsp,0x58
  408b96:	mov    rax,QWORD PTR fs:0x28
  408b9f:	mov    QWORD PTR [rsp+0x48],rax
  408ba4:	xor    eax,eax
  408ba6:	cmp    si,WORD PTR [rdi+0x1e]
  408baa:	jae    408da8 <flatcc_verify_table_vector_field@@Base+0x228>
  408bb0:	mov    rax,QWORD PTR [rdi+0x10]
  408bb4:	movzx  esi,si
  408bb7:	movzx  esi,WORD PTR [rax+rsi*1]
  408bbb:	test   esi,esi
  408bbd:	je     408da8 <flatcc_verify_table_vector_field@@Base+0x228>
  408bc3:	movzx  edx,WORD PTR [rdi+0x1c]
  408bc7:	lea    r8d,[rsi+0x4]
  408bcb:	mov    eax,0xd
  408bd0:	cmp    r8d,edx
  408bd3:	ja     408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408bd9:	add    esi,DWORD PTR [rdi+0x18]
  408bdc:	mov    eax,0xc
  408be1:	test   sil,0x3
  408be5:	jne    408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408beb:	test   esi,esi
  408bed:	je     408db1 <flatcc_verify_table_vector_field@@Base+0x231>
  408bf3:	mov    r12,QWORD PTR [rdi]
  408bf6:	mov    r8d,DWORD PTR [rdi+0xc]
  408bfa:	mov    eax,esi
  408bfc:	mov    edx,DWORD PTR [r12+rax*1]
  408c00:	test   r8d,r8d
  408c03:	jle    408e10 <flatcc_verify_table_vector_field@@Base+0x290>
  408c09:	add    edx,esi
  408c0b:	mov    eax,0x10
  408c10:	cmp    esi,edx
  408c12:	jae    408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408c18:	mov    r15d,DWORD PTR [rdi+0x8]
  408c1c:	mov    edi,edx
  408c1e:	lea    rsi,[rdi+0x4]
  408c22:	mov    r14,r15
  408c25:	cmp    rsi,r15
  408c28:	ja     408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408c2e:	test   sil,0x3
  408c32:	jne    408db8 <flatcc_verify_table_vector_field@@Base+0x238>
  408c38:	mov    eax,DWORD PTR [r12+rdi*1]
  408c3c:	lea    ebp,[rdx+0x4]
  408c3f:	cmp    eax,0x3fffffff
  408c44:	ja     408db8 <flatcc_verify_table_vector_field@@Base+0x238>
  408c4a:	mov    r10d,r15d
  408c4d:	lea    r9d,[rax*4+0x0]
  408c55:	sub    r10d,ebp
  408c58:	cmp    r10d,r9d
  408c5b:	jb     408db8 <flatcc_verify_table_vector_field@@Base+0x238>
  408c61:	test   eax,eax
  408c63:	je     408db1 <flatcc_verify_table_vector_field@@Base+0x231>
  408c69:	lea    rbx,[r12+rsi*1]
  408c6d:	lea    r13d,[r8-0x2]
  408c71:	mov    edx,DWORD PTR [rbx]
  408c73:	mov    eax,0x3
  408c78:	mov    DWORD PTR [rsp+0x2c],r13d
  408c7d:	test   r13d,r13d
  408c80:	je     408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408c86:	lea    eax,[rbp+rdx*1+0x0]
  408c8a:	cmp    ebp,eax
  408c8c:	jae    408d67 <flatcc_verify_table_vector_field@@Base+0x1e7>
  408c92:	mov    esi,eax
  408c94:	lea    rdx,[rsi+0x4]
  408c98:	cmp    r15,rdx
  408c9b:	jb     408d67 <flatcc_verify_table_vector_field@@Base+0x1e7>
  408ca1:	test   al,0x3
  408ca3:	jne    408d67 <flatcc_verify_table_vector_field@@Base+0x1e7>
  408ca9:	lea    rdi,[rsp+0x20]
  408cae:	mov    QWORD PTR [rsp+0x18],rdi
  408cb3:	lea    edx,[rbp+r9*1+0x0]
  408cb8:	nop    DWORD PTR [rax+rax*1+0x0]
  408cc0:	mov    DWORD PTR [rsp+0x38],eax
  408cc4:	mov    DWORD PTR [rsp+0xc],edx
  408cc8:	mov    edx,eax
  408cca:	sub    edx,DWORD PTR [r12+rsi*1]
  408cce:	mov    esi,edx
  408cd0:	js     408d67 <flatcc_verify_table_vector_field@@Base+0x1e7>
  408cd6:	mov    edi,edx
  408cd8:	test   dl,0x1
  408cdb:	jne    408d67 <flatcc_verify_table_vector_field@@Base+0x1e7>
  408ce1:	lea    r9,[rdi+0x2]
  408ce5:	cmp    r15,r9
  408ce8:	jb     408d67 <flatcc_verify_table_vector_field@@Base+0x1e7>
  408cea:	lea    r10,[r12+rdi*1]
  408cee:	movzx  r11d,WORD PTR [r10]
  408cf2:	add    esi,r11d
  408cf5:	mov    WORD PTR [rsp+0x3e],r11w
  408cfb:	cmp    r14d,esi
  408cfe:	jb     408d67 <flatcc_verify_table_vector_field@@Base+0x1e7>
  408d00:	test   r11b,0x1
  408d04:	jne    408d67 <flatcc_verify_table_vector_field@@Base+0x1e7>
  408d06:	cmp    r11w,0x3
  408d0b:	jbe    408d67 <flatcc_verify_table_vector_field@@Base+0x1e7>
  408d0d:	movzx  esi,WORD PTR [r12+rdi*1+0x2]
  408d13:	mov    edx,r14d
  408d16:	sub    edx,eax
  408d18:	mov    WORD PTR [rsp+0x3c],si
  408d1d:	cmp    edx,esi
  408d1f:	jb     408d67 <flatcc_verify_table_vector_field@@Base+0x1e7>
  408d21:	mov    rdi,QWORD PTR [rsp+0x18]
  408d26:	mov    QWORD PTR [rsp+0x10],rcx
  408d2b:	mov    QWORD PTR [rsp+0x30],r10
  408d30:	mov    QWORD PTR [rsp+0x20],r12
  408d35:	mov    DWORD PTR [rsp+0x28],r14d
  408d3a:	call   rcx
  408d3c:	test   eax,eax
  408d3e:	mov    rcx,QWORD PTR [rsp+0x10]
  408d43:	mov    edx,DWORD PTR [rsp+0xc]
  408d47:	jne    408d67 <flatcc_verify_table_vector_field@@Base+0x1e7>
  408d49:	add    ebp,0x4
  408d4c:	cmp    ebp,edx
  408d4e:	je     408db1 <flatcc_verify_table_vector_field@@Base+0x231>
  408d50:	mov    esi,ebp
  408d52:	lea    rbx,[r12+rsi*1]
  408d56:	mov    eax,DWORD PTR [rbx]
  408d58:	mov    DWORD PTR [rsp+0x2c],r13d
  408d5d:	add    eax,ebp
  408d5f:	cmp    ebp,eax
  408d61:	jb     408df0 <flatcc_verify_table_vector_field@@Base+0x270>
  408d67:	mov    edx,DWORD PTR [rbx]
  408d69:	mov    DWORD PTR [rsp+0x2c],r13d
  408d6e:	add    edx,ebp
  408d70:	cmp    edx,ebp
  408d72:	ja     408e1a <flatcc_verify_table_vector_field@@Base+0x29a>
  408d78:	mov    eax,0xf
  408d7d:	nop    DWORD PTR [rax]
  408d80:	mov    rbx,QWORD PTR [rsp+0x48]
  408d85:	xor    rbx,QWORD PTR fs:0x28
  408d8e:	jne    408ea6 <flatcc_verify_table_vector_field@@Base+0x326>
  408d94:	add    rsp,0x58
  408d98:	pop    rbx
  408d99:	pop    rbp
  408d9a:	pop    r12
  408d9c:	pop    r13
  408d9e:	pop    r14
  408da0:	pop    r15
  408da2:	ret    
  408da3:	nop    DWORD PTR [rax+rax*1+0x0]
  408da8:	mov    eax,0x4
  408dad:	test   edx,edx
  408daf:	jne    408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408db1:	xor    eax,eax
  408db3:	jmp    408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408db5:	nop    DWORD PTR [rax]
  408db8:	and    esi,0x3
  408dbb:	mov    eax,0x10
  408dc0:	jne    408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408dc2:	mov    ecx,DWORD PTR [r12+rdi*1]
  408dc6:	sub    r14d,0x4
  408dca:	mov    eax,0x19
  408dcf:	cmp    ecx,0x3fffffff
  408dd5:	ja     408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408dd7:	sub    r14d,edx
  408dda:	shl    ecx,0x2
  408ddd:	mov    eax,0x1a
  408de2:	cmp    r14d,ecx
  408de5:	jb     408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408de7:	xor    eax,eax
  408de9:	jmp    408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408deb:	nop    DWORD PTR [rax+rax*1+0x0]
  408df0:	mov    esi,eax
  408df2:	lea    rdi,[rsi+0x4]
  408df6:	cmp    r15,rdi
  408df9:	jb     408d67 <flatcc_verify_table_vector_field@@Base+0x1e7>
  408dff:	test   al,0x3
  408e01:	je     408cc0 <flatcc_verify_table_vector_field@@Base+0x140>
  408e07:	jmp    408d67 <flatcc_verify_table_vector_field@@Base+0x1e7>
  408e0c:	nop    DWORD PTR [rax+0x0]
  408e10:	mov    eax,0x3
  408e15:	jmp    408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408e1a:	mov    esi,edx
  408e1c:	lea    rdi,[rsi+0x4]
  408e20:	mov    eax,0xf
  408e25:	cmp    r15,rdi
  408e28:	jb     408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408e2e:	test   dl,0x3
  408e31:	jne    408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408e37:	mov    DWORD PTR [rsp+0x38],edx
  408e3b:	mov    r8d,edx
  408e3e:	sub    r8d,DWORD PTR [r12+rsi*1]
  408e42:	js     408eab <flatcc_verify_table_vector_field@@Base+0x32b>
  408e44:	mov    esi,r8d
  408e47:	test   r8b,0x1
  408e4b:	jne    408eab <flatcc_verify_table_vector_field@@Base+0x32b>
  408e4d:	lea    rax,[rsi+0x2]
  408e51:	cmp    r15,rax
  408e54:	jb     408ed3 <flatcc_verify_table_vector_field@@Base+0x353>
  408e56:	lea    r9,[r12+rsi*1]
  408e5a:	movzx  edi,WORD PTR [r9]
  408e5e:	mov    eax,edi
  408e60:	mov    WORD PTR [rsp+0x3e],di
  408e65:	add    edi,r8d
  408e68:	cmp    r14d,edi
  408e6b:	jb     408eb5 <flatcc_verify_table_vector_field@@Base+0x335>
  408e6d:	test   al,0x1
  408e6f:	jne    408eb5 <flatcc_verify_table_vector_field@@Base+0x335>
  408e71:	cmp    ax,0x3
  408e75:	jbe    408ebf <flatcc_verify_table_vector_field@@Base+0x33f>
  408e77:	movzx  eax,WORD PTR [r12+rsi*1+0x2]
  408e7d:	mov    ebx,r14d
  408e80:	sub    ebx,edx
  408e82:	mov    WORD PTR [rsp+0x3c],ax
  408e87:	cmp    ebx,eax
  408e89:	jb     408ec9 <flatcc_verify_table_vector_field@@Base+0x349>
  408e8b:	lea    rdi,[rsp+0x20]
  408e90:	mov    QWORD PTR [rsp+0x30],r9
  408e95:	mov    QWORD PTR [rsp+0x20],r12
  408e9a:	mov    DWORD PTR [rsp+0x28],r14d
  408e9f:	call   rcx
  408ea1:	jmp    408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408ea6:	call   403120 <__stack_chk_fail@plt>
  408eab:	mov    eax,0x1d
  408eb0:	jmp    408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408eb5:	mov    eax,0x1e
  408eba:	jmp    408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408ebf:	mov    eax,0x1c
  408ec4:	jmp    408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408ec9:	mov    eax,0x14
  408ece:	jmp    408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408ed3:	mov    eax,0x1b
  408ed8:	jmp    408d80 <flatcc_verify_table_vector_field@@Base+0x200>
  408edd:	nop    DWORD PTR [rax]

0000000000408ee0 <flatcc_verify_union_table@@Base>:
  408ee0:	endbr64 
  408ee4:	sub    rsp,0x38
  408ee8:	mov    edx,DWORD PTR [rdi+0xc]
  408eeb:	mov    rax,QWORD PTR fs:0x28
  408ef4:	mov    QWORD PTR [rsp+0x28],rax
  408ef9:	xor    eax,eax
  408efb:	dec    edx
  408efd:	mov    r8d,DWORD PTR [rdi+0x18]
  408f01:	mov    ecx,DWORD PTR [rdi+0x14]
  408f04:	mov    r9d,DWORD PTR [rdi+0x8]
  408f08:	mov    r10,QWORD PTR [rdi]
  408f0b:	mov    DWORD PTR [rsp+0xc],edx
  408f0f:	mov    eax,0x3
  408f14:	je     408f23 <flatcc_verify_union_table@@Base+0x43>
  408f16:	lea    edx,[r8+rcx*1]
  408f1a:	mov    eax,0xf
  408f1f:	cmp    ecx,edx
  408f21:	jb     408f40 <flatcc_verify_union_table@@Base+0x60>
  408f23:	mov    rsi,QWORD PTR [rsp+0x28]
  408f28:	xor    rsi,QWORD PTR fs:0x28
  408f31:	jne    408ffa <flatcc_verify_union_table@@Base+0x11a>
  408f37:	add    rsp,0x38
  408f3b:	ret    
  408f3c:	nop    DWORD PTR [rax+0x0]
  408f40:	mov    ecx,edx
  408f42:	mov    edi,r9d
  408f45:	lea    r8,[rcx+0x4]
  408f49:	cmp    r8,rdi
  408f4c:	ja     408f23 <flatcc_verify_union_table@@Base+0x43>
  408f4e:	test   dl,0x3
  408f51:	jne    408f23 <flatcc_verify_union_table@@Base+0x43>
  408f53:	mov    DWORD PTR [rsp+0x18],edx
  408f57:	mov    eax,edx
  408f59:	sub    eax,DWORD PTR [r10+rcx*1]
  408f5d:	mov    ecx,eax
  408f5f:	js     408ff0 <flatcc_verify_union_table@@Base+0x110>
  408f65:	mov    r8d,eax
  408f68:	mov    eax,0x1d
  408f6d:	test   cl,0x1
  408f70:	jne    408f23 <flatcc_verify_union_table@@Base+0x43>
  408f72:	lea    r11,[r8+0x2]
  408f76:	mov    eax,0x1b
  408f7b:	cmp    rdi,r11
  408f7e:	jb     408f23 <flatcc_verify_union_table@@Base+0x43>
  408f80:	lea    r11,[r10+r8*1]
  408f84:	movzx  eax,WORD PTR [r11]
  408f88:	add    ecx,eax
  408f8a:	mov    edi,eax
  408f8c:	mov    WORD PTR [rsp+0x1e],ax
  408f91:	mov    eax,0x1e
  408f96:	cmp    r9d,ecx
  408f99:	jb     408f23 <flatcc_verify_union_table@@Base+0x43>
  408f9b:	test   dil,0x1
  408f9f:	jne    408f23 <flatcc_verify_union_table@@Base+0x43>
  408fa1:	mov    eax,0x1c
  408fa6:	cmp    di,0x3
  408faa:	jbe    408f23 <flatcc_verify_union_table@@Base+0x43>
  408fb0:	movzx  eax,WORD PTR [r10+r8*1+0x2]
  408fb6:	mov    ecx,r9d
  408fb9:	sub    ecx,edx
  408fbb:	movzx  edx,ax
  408fbe:	mov    WORD PTR [rsp+0x1c],ax
  408fc3:	mov    eax,0x14
  408fc8:	cmp    ecx,edx
  408fca:	jb     408f23 <flatcc_verify_union_table@@Base+0x43>
  408fd0:	mov    rdi,rsp
  408fd3:	mov    QWORD PTR [rsp+0x10],r11
  408fd8:	mov    QWORD PTR [rsp],r10
  408fdc:	mov    DWORD PTR [rsp+0x8],r9d
  408fe1:	call   rsi
  408fe3:	jmp    408f23 <flatcc_verify_union_table@@Base+0x43>
  408fe8:	nop    DWORD PTR [rax+rax*1+0x0]
  408ff0:	mov    eax,0x1d
  408ff5:	jmp    408f23 <flatcc_verify_union_table@@Base+0x43>
  408ffa:	call   403120 <__stack_chk_fail@plt>
  408fff:	nop

0000000000409000 <flatcc_verify_union_struct@@Base>:
  409000:	endbr64 
  409004:	mov    ecx,DWORD PTR [rdi+0x18]
  409007:	mov    r8d,DWORD PTR [rdi+0x14]
  40900b:	mov    eax,0x12
  409010:	mov    edi,DWORD PTR [rdi+0x8]
  409013:	test   ecx,ecx
  409015:	je     40903c <flatcc_verify_union_struct@@Base+0x3c>
  409017:	add    ecx,r8d
  40901a:	cmp    edi,ecx
  40901c:	jb     40903c <flatcc_verify_union_struct@@Base+0x3c>
  40901e:	add    esi,ecx
  409020:	jb     409041 <flatcc_verify_union_struct@@Base+0x41>
  409022:	mov    eax,0x9
  409027:	cmp    edi,esi
  409029:	jb     409040 <flatcc_verify_union_struct@@Base+0x40>
  40902b:	movzx  edx,dx
  40902e:	dec    edx
  409030:	and    ecx,edx
  409032:	cmp    ecx,0x1
  409035:	sbb    eax,eax
  409037:	not    eax
  409039:	and    eax,0xb
  40903c:	ret    
  40903d:	nop    DWORD PTR [rax]
  409040:	ret    
  409041:	mov    eax,0xa
  409046:	ret    
  409047:	nop    WORD PTR [rax+rax*1+0x0]

0000000000409050 <flatcc_verify_union_string@@Base>:
  409050:	endbr64 
  409054:	mov    ecx,DWORD PTR [rdi+0x14]
  409057:	mov    edx,DWORD PTR [rdi+0x18]
  40905a:	mov    eax,0x11
  40905f:	add    edx,ecx
  409061:	cmp    ecx,edx
  409063:	jae    4090a8 <flatcc_verify_union_string@@Base+0x58>
  409065:	mov    r9d,DWORD PTR [rdi+0x8]
  409069:	mov    esi,edx
  40906b:	lea    r8,[rsi+0x4]
  40906f:	mov    rcx,r9
  409072:	cmp    r8,r9
  409075:	ja     4090a8 <flatcc_verify_union_string@@Base+0x58>
  409077:	mov    r9d,edx
  40907a:	and    r9d,0x3
  40907e:	jne    4090a8 <flatcc_verify_union_string@@Base+0x58>
  409080:	mov    rdi,QWORD PTR [rdi]
  409083:	sub    ecx,0x4
  409086:	mov    esi,DWORD PTR [rdi+rsi*1]
  409089:	sub    ecx,edx
  40908b:	lea    edx,[rsi+0x1]
  40908e:	mov    eax,0x8
  409093:	cmp    ecx,edx
  409095:	jb     4090a8 <flatcc_verify_union_string@@Base+0x58>
  409097:	add    r8,rdi
  40909a:	cmp    BYTE PTR [r8+rsi*1],0x0
  40909f:	mov    eax,0x7
  4090a4:	cmove  eax,r9d
  4090a8:	ret    
  4090a9:	nop    DWORD PTR [rax+0x0]

00000000004090b0 <flatcc_verify_buffer_header@@Base>:
  4090b0:	endbr64 
  4090b4:	push   rbx
  4090b5:	sub    rsp,0x10
  4090b9:	mov    rax,QWORD PTR fs:0x28
  4090c2:	mov    QWORD PTR [rsp+0x8],rax
  4090c7:	xor    eax,eax
  4090c9:	mov    eax,0x5
  4090ce:	test   dil,0x3
  4090d2:	jne    40911a <flatcc_verify_buffer_header@@Base+0x6a>
  4090d4:	mov    rcx,rdx
  4090d7:	mov    edx,0xfffffff7
  4090dc:	mov    eax,0x6
  4090e1:	cmp    rsi,rdx
  4090e4:	ja     40911a <flatcc_verify_buffer_header@@Base+0x6a>
  4090e6:	mov    eax,0x1
  4090eb:	cmp    rsi,0x7
  4090ef:	jbe    40911a <flatcc_verify_buffer_header@@Base+0x6a>
  4090f1:	test   rcx,rcx
  4090f4:	je     409118 <flatcc_verify_buffer_header@@Base+0x68>
  4090f6:	mov    rbx,rdi
  4090f9:	mov    edx,0x4
  4090fe:	lea    rdi,[rsp+0x4]
  409103:	mov    rsi,rcx
  409106:	call   403100 <strncpy@plt>
  40910b:	mov    eax,DWORD PTR [rsp+0x4]
  40910f:	cmp    DWORD PTR [rbx+0x4],eax
  409112:	je     409118 <flatcc_verify_buffer_header@@Base+0x68>
  409114:	test   eax,eax
  409116:	jne    409130 <flatcc_verify_buffer_header@@Base+0x80>
  409118:	xor    eax,eax
  40911a:	mov    rcx,QWORD PTR [rsp+0x8]
  40911f:	xor    rcx,QWORD PTR fs:0x28
  409128:	jne    409137 <flatcc_verify_buffer_header@@Base+0x87>
  40912a:	add    rsp,0x10
  40912e:	pop    rbx
  40912f:	ret    
  409130:	mov    eax,0x2
  409135:	jmp    40911a <flatcc_verify_buffer_header@@Base+0x6a>
  409137:	call   403120 <__stack_chk_fail@plt>
  40913c:	nop    DWORD PTR [rax+0x0]

0000000000409140 <flatcc_verify_typed_buffer_header@@Base>:
  409140:	endbr64 
  409144:	mov    eax,0x5
  409149:	test   dil,0x3
  40914d:	jne    409179 <flatcc_verify_typed_buffer_header@@Base+0x39>
  40914f:	mov    ecx,0xfffffff7
  409154:	mov    eax,0x6
  409159:	cmp    rsi,rcx
  40915c:	ja     409179 <flatcc_verify_typed_buffer_header@@Base+0x39>
  40915e:	mov    eax,0x1
  409163:	cmp    rsi,0x7
  409167:	jbe    409179 <flatcc_verify_typed_buffer_header@@Base+0x39>
  409169:	xor    eax,eax
  40916b:	test   edx,edx
  40916d:	je     409179 <flatcc_verify_typed_buffer_header@@Base+0x39>
  40916f:	xor    eax,eax
  409171:	cmp    edx,DWORD PTR [rdi+0x4]
  409174:	setne  al
  409177:	add    eax,eax
  409179:	ret    
  40917a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000409180 <flatcc_verify_struct_as_root@@Base>:
  409180:	endbr64 
  409184:	push   r14
  409186:	mov    r14,rdx
  409189:	push   r13
  40918b:	mov    r13d,r8d
  40918e:	push   r12
  409190:	mov    r12,rdi
  409193:	push   rbp
  409194:	mov    rbp,rsi
  409197:	push   rbx
  409198:	mov    rbx,rcx
  40919b:	call   4090b0 <flatcc_verify_buffer_header@@Base>
  4091a0:	test   eax,eax
  4091a2:	jne    4091f0 <flatcc_verify_struct_as_root@@Base+0x70>
  4091a4:	mov    edx,DWORD PTR [r12]
  4091a8:	test   edx,edx
  4091aa:	je     4091d8 <flatcc_verify_struct_as_root@@Base+0x58>
  4091ac:	cmp    edx,ebp
  4091ae:	ja     4091d8 <flatcc_verify_struct_as_root@@Base+0x58>
  4091b0:	add    ebx,edx
  4091b2:	jb     409217 <flatcc_verify_struct_as_root@@Base+0x97>
  4091b4:	cmp    ebp,ebx
  4091b6:	jb     409210 <flatcc_verify_struct_as_root@@Base+0x90>
  4091b8:	movzx  r13d,r13w
  4091bc:	dec    r13d
  4091bf:	test   r13d,edx
  4091c2:	mov    edx,0xb
  4091c7:	cmovne eax,edx
  4091ca:	pop    rbx
  4091cb:	pop    rbp
  4091cc:	pop    r12
  4091ce:	pop    r13
  4091d0:	pop    r14
  4091d2:	ret    
  4091d3:	nop    DWORD PTR [rax+rax*1+0x0]
  4091d8:	pop    rbx
  4091d9:	pop    rbp
  4091da:	pop    r12
  4091dc:	pop    r13
  4091de:	mov    eax,0x12
  4091e3:	pop    r14
  4091e5:	ret    
  4091e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4091f0:	pop    rbx
  4091f1:	mov    rsi,rbp
  4091f4:	pop    rbp
  4091f5:	mov    rdi,r12
  4091f8:	pop    r12
  4091fa:	pop    r13
  4091fc:	mov    rdx,r14
  4091ff:	pop    r14
  409201:	jmp    4090b0 <flatcc_verify_buffer_header@@Base>
  409206:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409210:	mov    eax,0x9
  409215:	jmp    4091ca <flatcc_verify_struct_as_root@@Base+0x4a>
  409217:	mov    eax,0xa
  40921c:	jmp    4091ca <flatcc_verify_struct_as_root@@Base+0x4a>
  40921e:	xchg   ax,ax

0000000000409220 <flatcc_verify_struct_as_typed_root@@Base>:
  409220:	endbr64 
  409224:	push   r14
  409226:	mov    r14d,edx
  409229:	push   r13
  40922b:	mov    r13d,r8d
  40922e:	push   r12
  409230:	mov    r12,rdi
  409233:	push   rbp
  409234:	mov    rbp,rsi
  409237:	push   rbx
  409238:	mov    rbx,rcx
  40923b:	call   409140 <flatcc_verify_typed_buffer_header@@Base>
  409240:	test   eax,eax
  409242:	jne    409290 <flatcc_verify_struct_as_typed_root@@Base+0x70>
  409244:	mov    edx,DWORD PTR [r12]
  409248:	test   edx,edx
  40924a:	je     409278 <flatcc_verify_struct_as_typed_root@@Base+0x58>
  40924c:	cmp    edx,ebp
  40924e:	ja     409278 <flatcc_verify_struct_as_typed_root@@Base+0x58>
  409250:	add    ebx,edx
  409252:	jb     4092b7 <flatcc_verify_struct_as_typed_root@@Base+0x97>
  409254:	cmp    ebp,ebx
  409256:	jb     4092b0 <flatcc_verify_struct_as_typed_root@@Base+0x90>
  409258:	movzx  r13d,r13w
  40925c:	dec    r13d
  40925f:	test   r13d,edx
  409262:	mov    edx,0xb
  409267:	cmovne eax,edx
  40926a:	pop    rbx
  40926b:	pop    rbp
  40926c:	pop    r12
  40926e:	pop    r13
  409270:	pop    r14
  409272:	ret    
  409273:	nop    DWORD PTR [rax+rax*1+0x0]
  409278:	pop    rbx
  409279:	pop    rbp
  40927a:	pop    r12
  40927c:	pop    r13
  40927e:	mov    eax,0x12
  409283:	pop    r14
  409285:	ret    
  409286:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409290:	pop    rbx
  409291:	mov    rsi,rbp
  409294:	pop    rbp
  409295:	mov    rdi,r12
  409298:	pop    r12
  40929a:	pop    r13
  40929c:	mov    edx,r14d
  40929f:	pop    r14
  4092a1:	jmp    409140 <flatcc_verify_typed_buffer_header@@Base>
  4092a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4092b0:	mov    eax,0x9
  4092b5:	jmp    40926a <flatcc_verify_struct_as_typed_root@@Base+0x4a>
  4092b7:	mov    eax,0xa
  4092bc:	jmp    40926a <flatcc_verify_struct_as_typed_root@@Base+0x4a>
  4092be:	xchg   ax,ax

00000000004092c0 <flatcc_verify_table_as_root@@Base>:
  4092c0:	endbr64 
  4092c4:	push   r14
  4092c6:	mov    r14,rcx
  4092c9:	push   r13
  4092cb:	mov    r13,rsi
  4092ce:	push   r12
  4092d0:	mov    r12,rdx
  4092d3:	push   rbp
  4092d4:	mov    ebp,esi
  4092d6:	mov    rsi,rbp
  4092d9:	push   rbx
  4092da:	mov    rbx,rdi
  4092dd:	sub    rsp,0x30
  4092e1:	mov    rax,QWORD PTR fs:0x28
  4092ea:	mov    QWORD PTR [rsp+0x28],rax
  4092ef:	xor    eax,eax
  4092f1:	call   4090b0 <flatcc_verify_buffer_header@@Base>
  4092f6:	test   eax,eax
  4092f8:	jne    4093e0 <flatcc_verify_table_as_root@@Base+0x120>
  4092fe:	mov    edx,DWORD PTR [rbx]
  409300:	mov    DWORD PTR [rsp+0xc],0x63
  409308:	mov    eax,0xf
  40930d:	test   edx,edx
  40930f:	jne    409338 <flatcc_verify_table_as_root@@Base+0x78>
  409311:	mov    rcx,QWORD PTR [rsp+0x28]
  409316:	xor    rcx,QWORD PTR fs:0x28
  40931f:	jne    409402 <flatcc_verify_table_as_root@@Base+0x142>
  409325:	add    rsp,0x30
  409329:	pop    rbx
  40932a:	pop    rbp
  40932b:	pop    r12
  40932d:	pop    r13
  40932f:	pop    r14
  409331:	ret    
  409332:	nop    WORD PTR [rax+rax*1+0x0]
  409338:	mov    ecx,edx
  40933a:	lea    rsi,[rcx+0x4]
  40933e:	cmp    rbp,rsi
  409341:	jb     409311 <flatcc_verify_table_as_root@@Base+0x51>
  409343:	test   dl,0x3
  409346:	jne    409311 <flatcc_verify_table_as_root@@Base+0x51>
  409348:	mov    eax,edx
  40934a:	sub    eax,DWORD PTR [rbx+rcx*1]
  40934d:	mov    DWORD PTR [rsp+0x18],edx
  409351:	mov    ecx,eax
  409353:	js     4093f8 <flatcc_verify_table_as_root@@Base+0x138>
  409359:	mov    edi,eax
  40935b:	mov    eax,0x1d
  409360:	test   cl,0x1
  409363:	jne    409311 <flatcc_verify_table_as_root@@Base+0x51>
  409365:	lea    rsi,[rdi+0x2]
  409369:	mov    eax,0x1b
  40936e:	cmp    rbp,rsi
  409371:	jb     409311 <flatcc_verify_table_as_root@@Base+0x51>
  409373:	lea    r8,[rbx+rdi*1]
  409377:	movzx  eax,WORD PTR [r8]
  40937b:	add    ecx,eax
  40937d:	mov    esi,eax
  40937f:	mov    WORD PTR [rsp+0x1e],ax
  409384:	mov    eax,0x1e
  409389:	cmp    r13d,ecx
  40938c:	jb     409311 <flatcc_verify_table_as_root@@Base+0x51>
  40938e:	test   sil,0x1
  409392:	jne    409311 <flatcc_verify_table_as_root@@Base+0x51>
  409398:	mov    eax,0x1c
  40939d:	cmp    si,0x3
  4093a1:	jbe    409311 <flatcc_verify_table_as_root@@Base+0x51>
  4093a7:	movzx  eax,WORD PTR [rbx+rdi*1+0x2]
  4093ac:	mov    ecx,r13d
  4093af:	sub    ecx,edx
  4093b1:	movzx  edx,ax
  4093b4:	mov    WORD PTR [rsp+0x1c],ax
  4093b9:	mov    eax,0x14
  4093be:	cmp    ecx,edx
  4093c0:	jb     409311 <flatcc_verify_table_as_root@@Base+0x51>
  4093c6:	mov    rdi,rsp
  4093c9:	mov    QWORD PTR [rsp+0x10],r8
  4093ce:	mov    QWORD PTR [rsp],rbx
  4093d2:	mov    DWORD PTR [rsp+0x8],r13d
  4093d7:	call   r14
  4093da:	jmp    409311 <flatcc_verify_table_as_root@@Base+0x51>
  4093df:	nop
  4093e0:	mov    rdx,r12
  4093e3:	mov    rsi,rbp
  4093e6:	mov    rdi,rbx
  4093e9:	call   4090b0 <flatcc_verify_buffer_header@@Base>
  4093ee:	jmp    409311 <flatcc_verify_table_as_root@@Base+0x51>
  4093f3:	nop    DWORD PTR [rax+rax*1+0x0]
  4093f8:	mov    eax,0x1d
  4093fd:	jmp    409311 <flatcc_verify_table_as_root@@Base+0x51>
  409402:	call   403120 <__stack_chk_fail@plt>
  409407:	nop    WORD PTR [rax+rax*1+0x0]

0000000000409410 <flatcc_verify_table_as_typed_root@@Base>:
  409410:	endbr64 
  409414:	push   r14
  409416:	mov    r14,rcx
  409419:	push   r13
  40941b:	mov    r13,rsi
  40941e:	push   r12
  409420:	mov    r12d,edx
  409423:	push   rbp
  409424:	mov    ebp,esi
  409426:	mov    rsi,rbp
  409429:	push   rbx
  40942a:	mov    rbx,rdi
  40942d:	sub    rsp,0x30
  409431:	mov    rax,QWORD PTR fs:0x28
  40943a:	mov    QWORD PTR [rsp+0x28],rax
  40943f:	xor    eax,eax
  409441:	call   409140 <flatcc_verify_typed_buffer_header@@Base>
  409446:	test   eax,eax
  409448:	jne    409530 <flatcc_verify_table_as_typed_root@@Base+0x120>
  40944e:	mov    edx,DWORD PTR [rbx]
  409450:	mov    DWORD PTR [rsp+0xc],0x63
  409458:	mov    eax,0xf
  40945d:	test   edx,edx
  40945f:	jne    409488 <flatcc_verify_table_as_typed_root@@Base+0x78>
  409461:	mov    rcx,QWORD PTR [rsp+0x28]
  409466:	xor    rcx,QWORD PTR fs:0x28
  40946f:	jne    409552 <flatcc_verify_table_as_typed_root@@Base+0x142>
  409475:	add    rsp,0x30
  409479:	pop    rbx
  40947a:	pop    rbp
  40947b:	pop    r12
  40947d:	pop    r13
  40947f:	pop    r14
  409481:	ret    
  409482:	nop    WORD PTR [rax+rax*1+0x0]
  409488:	mov    ecx,edx
  40948a:	lea    rsi,[rcx+0x4]
  40948e:	cmp    rbp,rsi
  409491:	jb     409461 <flatcc_verify_table_as_typed_root@@Base+0x51>
  409493:	test   dl,0x3
  409496:	jne    409461 <flatcc_verify_table_as_typed_root@@Base+0x51>
  409498:	mov    eax,edx
  40949a:	sub    eax,DWORD PTR [rbx+rcx*1]
  40949d:	mov    DWORD PTR [rsp+0x18],edx
  4094a1:	mov    ecx,eax
  4094a3:	js     409548 <flatcc_verify_table_as_typed_root@@Base+0x138>
  4094a9:	mov    edi,eax
  4094ab:	mov    eax,0x1d
  4094b0:	test   cl,0x1
  4094b3:	jne    409461 <flatcc_verify_table_as_typed_root@@Base+0x51>
  4094b5:	lea    rsi,[rdi+0x2]
  4094b9:	mov    eax,0x1b
  4094be:	cmp    rbp,rsi
  4094c1:	jb     409461 <flatcc_verify_table_as_typed_root@@Base+0x51>
  4094c3:	lea    r8,[rbx+rdi*1]
  4094c7:	movzx  eax,WORD PTR [r8]
  4094cb:	add    ecx,eax
  4094cd:	mov    esi,eax
  4094cf:	mov    WORD PTR [rsp+0x1e],ax
  4094d4:	mov    eax,0x1e
  4094d9:	cmp    r13d,ecx
  4094dc:	jb     409461 <flatcc_verify_table_as_typed_root@@Base+0x51>
  4094de:	test   sil,0x1
  4094e2:	jne    409461 <flatcc_verify_table_as_typed_root@@Base+0x51>
  4094e8:	mov    eax,0x1c
  4094ed:	cmp    si,0x3
  4094f1:	jbe    409461 <flatcc_verify_table_as_typed_root@@Base+0x51>
  4094f7:	movzx  eax,WORD PTR [rbx+rdi*1+0x2]
  4094fc:	mov    ecx,r13d
  4094ff:	sub    ecx,edx
  409501:	movzx  edx,ax
  409504:	mov    WORD PTR [rsp+0x1c],ax
  409509:	mov    eax,0x14
  40950e:	cmp    ecx,edx
  409510:	jb     409461 <flatcc_verify_table_as_typed_root@@Base+0x51>
  409516:	mov    rdi,rsp
  409519:	mov    QWORD PTR [rsp+0x10],r8
  40951e:	mov    QWORD PTR [rsp],rbx
  409522:	mov    DWORD PTR [rsp+0x8],r13d
  409527:	call   r14
  40952a:	jmp    409461 <flatcc_verify_table_as_typed_root@@Base+0x51>
  40952f:	nop
  409530:	mov    edx,r12d
  409533:	mov    rsi,rbp
  409536:	mov    rdi,rbx
  409539:	call   409140 <flatcc_verify_typed_buffer_header@@Base>
  40953e:	jmp    409461 <flatcc_verify_table_as_typed_root@@Base+0x51>
  409543:	nop    DWORD PTR [rax+rax*1+0x0]
  409548:	mov    eax,0x1d
  40954d:	jmp    409461 <flatcc_verify_table_as_typed_root@@Base+0x51>
  409552:	call   403120 <__stack_chk_fail@plt>
  409557:	nop    WORD PTR [rax+rax*1+0x0]

0000000000409560 <flatcc_verify_struct_as_nested_root@@Base>:
  409560:	endbr64 
  409564:	push   r15
  409566:	push   r14
  409568:	mov    r14,r8
  40956b:	mov    r8d,0x1
  409571:	push   r13
  409573:	mov    r13d,r9d
  409576:	push   r12
  409578:	mov    r12d,edx
  40957b:	push   rbp
  40957c:	mov    rbp,rdi
  40957f:	push   rbx
  409580:	mov    ebx,esi
  409582:	movzx  esi,si
  409585:	sub    rsp,0x18
  409589:	mov    QWORD PTR [rsp+0x8],rcx
  40958e:	movzx  ecx,r9w
  409592:	mov    r9d,0xffffffff
  409598:	mov    r15,rcx
  40959b:	call   408770 <flatcc_verify_vector_field@@Base>
  4095a0:	test   eax,eax
  4095a2:	jne    409610 <flatcc_verify_struct_as_nested_root@@Base+0xb0>
  4095a4:	lea    ebx,[rbx+rbx*1+0x4]
  4095a8:	cmp    bx,WORD PTR [rbp+0x1e]
  4095ac:	jae    4095f8 <flatcc_verify_struct_as_nested_root@@Base+0x98>
  4095ae:	mov    rax,QWORD PTR [rbp+0x10]
  4095b2:	movzx  ebx,bx
  4095b5:	movzx  eax,WORD PTR [rax+rbx*1]
  4095b9:	test   ax,ax
  4095bc:	je     4095f8 <flatcc_verify_struct_as_nested_root@@Base+0x98>
  4095be:	mov    edi,DWORD PTR [rbp+0x18]
  4095c1:	add    rdi,rax
  4095c4:	add    rdi,QWORD PTR [rbp+0x0]
  4095c8:	je     4095f8 <flatcc_verify_struct_as_nested_root@@Base+0x98>
  4095ca:	mov    eax,DWORD PTR [rdi]
  4095cc:	mov    rdx,QWORD PTR [rsp+0x8]
  4095d1:	add    rdi,rax
  4095d4:	mov    esi,DWORD PTR [rdi]
  4095d6:	add    rsp,0x18
  4095da:	pop    rbx
  4095db:	pop    rbp
  4095dc:	pop    r12
  4095de:	movzx  r8d,r13w
  4095e2:	pop    r13
  4095e4:	mov    rcx,r14
  4095e7:	pop    r14
  4095e9:	add    rdi,0x4
  4095ed:	pop    r15
  4095ef:	jmp    409180 <flatcc_verify_struct_as_root@@Base>
  4095f4:	nop    DWORD PTR [rax+0x0]
  4095f8:	add    rsp,0x18
  4095fc:	pop    rbx
  4095fd:	pop    rbp
  4095fe:	pop    r12
  409600:	pop    r13
  409602:	pop    r14
  409604:	xor    eax,eax
  409606:	pop    r15
  409608:	ret    
  409609:	nop    DWORD PTR [rax+0x0]
  409610:	add    rsp,0x18
  409614:	movzx  esi,bx
  409617:	pop    rbx
  409618:	mov    rdi,rbp
  40961b:	pop    rbp
  40961c:	mov    edx,r12d
  40961f:	pop    r12
  409621:	pop    r13
  409623:	pop    r14
  409625:	movzx  ecx,r15w
  409629:	mov    r9d,0xffffffff
  40962f:	mov    r8d,0x1
  409635:	pop    r15
  409637:	jmp    408770 <flatcc_verify_vector_field@@Base>
  40963c:	nop    DWORD PTR [rax+0x0]

0000000000409640 <flatcc_verify_table_as_nested_root@@Base>:
  409640:	endbr64 
  409644:	push   r15
  409646:	push   r14
  409648:	mov    r14d,edx
  40964b:	push   r13
  40964d:	mov    r13,rdi
  409650:	push   r12
  409652:	mov    r12,r9
  409655:	mov    r9d,0xffffffff
  40965b:	push   rbp
  40965c:	mov    rbp,rcx
  40965f:	movzx  ecx,r8w
  409663:	push   rbx
  409664:	mov    r8d,0x1
  40966a:	mov    ebx,esi
  40966c:	sub    rsp,0x48
  409670:	movzx  esi,si
  409673:	mov    rax,QWORD PTR fs:0x28
  40967c:	mov    QWORD PTR [rsp+0x38],rax
  409681:	xor    eax,eax
  409683:	mov    r15,rcx
  409686:	call   408770 <flatcc_verify_vector_field@@Base>
  40968b:	test   eax,eax
  40968d:	jne    4097e0 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
  409693:	lea    ebx,[rbx+rbx*1+0x4]
  409697:	cmp    bx,WORD PTR [r13+0x1e]
  40969c:	jae    4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  4096a2:	mov    rdx,QWORD PTR [r13+0x10]
  4096a6:	movzx  ebx,bx
  4096a9:	movzx  ecx,WORD PTR [rdx+rbx*1]
  4096ad:	test   cx,cx
  4096b0:	je     4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  4096b6:	mov    edx,DWORD PTR [r13+0x18]
  4096ba:	add    rdx,rcx
  4096bd:	add    rdx,QWORD PTR [r13+0x0]
  4096c1:	je     4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  4096c7:	mov    ebx,DWORD PTR [rdx]
  4096c9:	add    rbx,rdx
  4096cc:	mov    r15d,DWORD PTR [rbx]
  4096cf:	lea    r14,[rbx+0x4]
  4096d3:	mov    rdx,rbp
  4096d6:	mov    rsi,r15
  4096d9:	mov    rdi,r14
  4096dc:	mov    DWORD PTR [rsp+0xc],r15d
  4096e1:	call   4090b0 <flatcc_verify_buffer_header@@Base>
  4096e6:	test   eax,eax
  4096e8:	jne    409800 <flatcc_verify_table_as_nested_root@@Base+0x1c0>
  4096ee:	mov    edx,DWORD PTR [r13+0xc]
  4096f2:	mov    esi,DWORD PTR [rbx+0x4]
  4096f5:	dec    edx
  4096f7:	mov    DWORD PTR [rsp+0x1c],edx
  4096fb:	mov    eax,0x3
  409700:	je     4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  409706:	mov    eax,0xf
  40970b:	test   esi,esi
  40970d:	je     4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  409713:	mov    edx,esi
  409715:	lea    rdi,[rdx+0x4]
  409719:	cmp    r15,rdi
  40971c:	jb     4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  409722:	test   sil,0x3
  409726:	jne    4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  40972c:	mov    DWORD PTR [rsp+0x28],esi
  409730:	mov    edi,esi
  409732:	sub    edi,DWORD PTR [rbx+rdx*1+0x4]
  409736:	js     409810 <flatcc_verify_table_as_nested_root@@Base+0x1d0>
  40973c:	mov    edx,edi
  40973e:	mov    eax,0x1d
  409743:	test   dil,0x1
  409747:	jne    4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  409749:	lea    r9,[rdx+0x2]
  40974d:	mov    eax,0x1b
  409752:	cmp    r15,r9
  409755:	jb     4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  409757:	add    rdx,r14
  40975a:	movzx  eax,WORD PTR [rdx]
  40975d:	mov    ecx,DWORD PTR [rsp+0xc]
  409761:	add    edi,eax
  409763:	mov    r8d,eax
  409766:	mov    WORD PTR [rsp+0x2e],ax
  40976b:	mov    eax,0x1e
  409770:	cmp    ecx,edi
  409772:	jb     4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  409774:	test   r8b,0x1
  409778:	jne    4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  40977a:	mov    eax,0x1c
  40977f:	cmp    r8w,0x3
  409784:	jbe    4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  409786:	movzx  eax,WORD PTR [rbx+r9*1+0x4]
  40978c:	mov    edi,ecx
  40978e:	sub    edi,esi
  409790:	movzx  esi,ax
  409793:	mov    WORD PTR [rsp+0x2c],ax
  409798:	mov    eax,0x14
  40979d:	cmp    edi,esi
  40979f:	jb     4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  4097a1:	lea    rdi,[rsp+0x10]
  4097a6:	mov    QWORD PTR [rsp+0x20],rdx
  4097ab:	mov    QWORD PTR [rsp+0x10],r14
  4097b0:	mov    DWORD PTR [rsp+0x18],ecx
  4097b4:	call   r12
  4097b7:	nop    WORD PTR [rax+rax*1+0x0]
  4097c0:	mov    rdi,QWORD PTR [rsp+0x38]
  4097c5:	xor    rdi,QWORD PTR fs:0x28
  4097ce:	jne    409817 <flatcc_verify_table_as_nested_root@@Base+0x1d7>
  4097d0:	add    rsp,0x48
  4097d4:	pop    rbx
  4097d5:	pop    rbp
  4097d6:	pop    r12
  4097d8:	pop    r13
  4097da:	pop    r14
  4097dc:	pop    r15
  4097de:	ret    
  4097df:	nop
  4097e0:	mov    r9d,0xffffffff
  4097e6:	mov    r8d,0x1
  4097ec:	movzx  ecx,r15w
  4097f0:	mov    edx,r14d
  4097f3:	movzx  esi,bx
  4097f6:	mov    rdi,r13
  4097f9:	call   408770 <flatcc_verify_vector_field@@Base>
  4097fe:	jmp    4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  409800:	mov    rdx,rbp
  409803:	mov    rsi,r15
  409806:	mov    rdi,r14
  409809:	call   4090b0 <flatcc_verify_buffer_header@@Base>
  40980e:	jmp    4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  409810:	mov    eax,0x1d
  409815:	jmp    4097c0 <flatcc_verify_table_as_nested_root@@Base+0x180>
  409817:	call   403120 <__stack_chk_fail@plt>
  40981c:	nop    DWORD PTR [rax+0x0]

0000000000409820 <flatcc_verify_union_field@@Base>:
  409820:	endbr64 
  409824:	push   r12
  409826:	lea    esi,[rsi+rsi*1+0x2]
  40982a:	push   rbp
  40982b:	push   rbx
  40982c:	sub    rsp,0x30
  409830:	movzx  r8d,WORD PTR [rdi+0x1e]
  409835:	mov    rax,QWORD PTR fs:0x28
  40983e:	mov    QWORD PTR [rsp+0x28],rax
  409843:	xor    eax,eax
  409845:	cmp    si,r8w
  409849:	jae    409920 <flatcc_verify_union_field@@Base+0x100>
  40984f:	mov    r11,QWORD PTR [rdi+0x10]
  409853:	movzx  eax,si
  409856:	movzx  eax,WORD PTR [r11+rax*1]
  40985b:	mov    r10,rax
  40985e:	test   eax,eax
  409860:	je     409920 <flatcc_verify_union_field@@Base+0x100>
  409866:	movzx  ebx,WORD PTR [rdi+0x1c]
  40986a:	lea    r9d,[rax+0x1]
  40986e:	mov    eax,0xd
  409873:	cmp    r9d,ebx
  409876:	ja     409900 <flatcc_verify_union_field@@Base+0xe0>
  40987c:	mov    r9d,DWORD PTR [rdi+0x18]
  409880:	mov    rbp,QWORD PTR [rdi]
  409883:	add    r10,r9
  409886:	add    r10,rbp
  409889:	add    esi,0x2
  40988c:	mov    r12,r9
  40988f:	movzx  r9d,BYTE PTR [r10]
  409893:	cmp    r8w,si
  409897:	jbe    409960 <flatcc_verify_union_field@@Base+0x140>
  40989d:	movzx  esi,si
  4098a0:	movzx  esi,WORD PTR [r11+rsi*1]
  4098a5:	test   r9b,r9b
  4098a8:	je     409950 <flatcc_verify_union_field@@Base+0x130>
  4098ae:	test   esi,esi
  4098b0:	je     409965 <flatcc_verify_union_field@@Base+0x145>
  4098b6:	lea    edx,[rsi+0x4]
  4098b9:	cmp    ebx,edx
  4098bb:	jb     409900 <flatcc_verify_union_field@@Base+0xe0>
  4098bd:	add    r12d,esi
  4098c0:	mov    eax,0xc
  4098c5:	test   r12b,0x3
  4098c9:	jne    409900 <flatcc_verify_union_field@@Base+0xe0>
  4098cb:	test   r12d,r12d
  4098ce:	je     409978 <flatcc_verify_union_field@@Base+0x158>
  4098d4:	mov    rax,QWORD PTR [rdi+0x8]
  4098d8:	mov    DWORD PTR [rsp+0x14],r12d
  4098dd:	mov    QWORD PTR [rsp+0x8],rax
  4098e2:	mov    QWORD PTR [rsp],rbp
  4098e6:	mov    rdi,rsp
  4098e9:	mov    eax,DWORD PTR [rbp+r12*1+0x0]
  4098ee:	mov    DWORD PTR [rsp+0x18],eax
  4098f2:	movzx  eax,BYTE PTR [r10]
  4098f6:	mov    BYTE PTR [rsp+0x10],al
  4098fa:	call   rcx
  4098fc:	nop    DWORD PTR [rax+0x0]
  409900:	mov    rbx,QWORD PTR [rsp+0x28]
  409905:	xor    rbx,QWORD PTR fs:0x28
  40990e:	jne    40997c <flatcc_verify_union_field@@Base+0x15c>
  409910:	add    rsp,0x30
  409914:	pop    rbx
  409915:	pop    rbp
  409916:	pop    r12
  409918:	ret    
  409919:	nop    DWORD PTR [rax+0x0]
  409920:	add    esi,0x2
  409923:	cmp    r8w,si
  409927:	jbe    40993c <flatcc_verify_union_field@@Base+0x11c>
  409929:	mov    rcx,QWORD PTR [rdi+0x10]
  40992d:	movzx  esi,si
  409930:	cmp    WORD PTR [rcx+rsi*1],0x0
  409935:	mov    eax,0x17
  40993a:	jne    409900 <flatcc_verify_union_field@@Base+0xe0>
  40993c:	cmp    edx,0x1
  40993f:	sbb    eax,eax
  409941:	not    eax
  409943:	and    eax,0x15
  409946:	jmp    409900 <flatcc_verify_union_field@@Base+0xe0>
  409948:	nop    DWORD PTR [rax+rax*1+0x0]
  409950:	cmp    esi,0x1
  409953:	sbb    eax,eax
  409955:	not    eax
  409957:	and    eax,0x18
  40995a:	jmp    409900 <flatcc_verify_union_field@@Base+0xe0>
  40995c:	nop    DWORD PTR [rax+0x0]
  409960:	test   r9b,r9b
  409963:	je     409978 <flatcc_verify_union_field@@Base+0x158>
  409965:	xor    eax,eax
  409967:	test   edx,edx
  409969:	setne  al
  40996c:	shl    eax,0x2
  40996f:	jmp    409900 <flatcc_verify_union_field@@Base+0xe0>
  409971:	nop    DWORD PTR [rax+0x0]
  409978:	xor    eax,eax
  40997a:	jmp    409900 <flatcc_verify_union_field@@Base+0xe0>
  40997c:	call   403120 <__stack_chk_fail@plt>
  409981:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40998c:	nop    DWORD PTR [rax+0x0]

0000000000409990 <flatcc_verify_union_vector_field@@Base>:
  409990:	endbr64 
  409994:	push   r15
  409996:	mov    r15d,edx
  409999:	push   r14
  40999b:	lea    r14d,[rsi-0x1]
  40999f:	movzx  r14d,r14w
  4099a3:	push   r13
  4099a5:	mov    r13,rcx
  4099a8:	push   r12
  4099aa:	push   rbp
  4099ab:	mov    rbp,rdi
  4099ae:	push   rbx
  4099af:	lea    ebx,[rsi+rsi*1+0x2]
  4099b3:	sub    rsp,0x48
  4099b7:	mov    rax,QWORD PTR fs:0x28
  4099c0:	mov    QWORD PTR [rsp+0x38],rax
  4099c5:	xor    eax,eax
  4099c7:	movzx  eax,WORD PTR [rdi+0x1e]
  4099cb:	cmp    bx,ax
  4099ce:	jae    409bb0 <flatcc_verify_union_vector_field@@Base+0x220>
  4099d4:	mov    rcx,QWORD PTR [rdi+0x10]
  4099d8:	movzx  edx,bx
  4099db:	cmp    WORD PTR [rcx+rdx*1],0x0
  4099e0:	je     409bb0 <flatcc_verify_union_vector_field@@Base+0x220>
  4099e6:	mov    r9d,0xffffffff
  4099ec:	mov    r8d,0x1
  4099f2:	mov    ecx,0x1
  4099f7:	mov    edx,r15d
  4099fa:	mov    esi,r14d
  4099fd:	mov    rdi,rbp
  409a00:	call   408770 <flatcc_verify_vector_field@@Base>
  409a05:	mov    r12d,eax
  409a08:	test   eax,eax
  409a0a:	jne    409c00 <flatcc_verify_union_vector_field@@Base+0x270>
  409a10:	movzx  edi,WORD PTR [rbp+0x1e]
  409a14:	cmp    bx,di
  409a17:	jae    409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409a1d:	mov    rsi,QWORD PTR [rbp+0x10]
  409a21:	movzx  eax,bx
  409a24:	movzx  edx,WORD PTR [rsi+rax*1]
  409a28:	test   dx,dx
  409a2b:	je     409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409a31:	mov    eax,DWORD PTR [rbp+0x18]
  409a34:	mov    r14,QWORD PTR [rbp+0x0]
  409a38:	mov    rcx,rax
  409a3b:	add    rax,rdx
  409a3e:	add    rax,r14
  409a41:	je     409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409a47:	add    ebx,0x2
  409a4a:	cmp    di,bx
  409a4d:	jbe    409be0 <flatcc_verify_union_vector_field@@Base+0x250>
  409a53:	movzx  ebx,bx
  409a56:	movzx  edx,WORD PTR [rsi+rbx*1]
  409a5a:	test   edx,edx
  409a5c:	je     409be0 <flatcc_verify_union_vector_field@@Base+0x250>
  409a62:	movzx  esi,WORD PTR [rbp+0x1c]
  409a66:	lea    edi,[rdx+0x4]
  409a69:	cmp    edi,esi
  409a6b:	ja     409c30 <flatcc_verify_union_vector_field@@Base+0x2a0>
  409a71:	add    ecx,edx
  409a73:	test   cl,0x3
  409a76:	jne    409c40 <flatcc_verify_union_vector_field@@Base+0x2b0>
  409a7c:	test   ecx,ecx
  409a7e:	je     409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409a84:	mov    edi,DWORD PTR [rbp+0xc]
  409a87:	mov    esi,ecx
  409a89:	mov    edx,DWORD PTR [r14+rsi*1]
  409a8d:	test   edi,edi
  409a8f:	jle    409c80 <flatcc_verify_union_vector_field@@Base+0x2f0>
  409a95:	add    edx,ecx
  409a97:	cmp    ecx,edx
  409a99:	jae    409bf0 <flatcc_verify_union_vector_field@@Base+0x260>
  409a9f:	mov    ecx,DWORD PTR [rbp+0x8]
  409aa2:	mov    r9d,edx
  409aa5:	lea    r8,[r9+0x4]
  409aa9:	mov    rsi,rcx
  409aac:	cmp    r8,rcx
  409aaf:	ja     409bf0 <flatcc_verify_union_vector_field@@Base+0x260>
  409ab5:	test   r8b,0x3
  409ab9:	jne    409c50 <flatcc_verify_union_vector_field@@Base+0x2c0>
  409abf:	mov    r10d,DWORD PTR [r14+r9*1]
  409ac3:	lea    r15d,[rdx+0x4]
  409ac7:	cmp    r10d,0x3fffffff
  409ace:	ja     409c50 <flatcc_verify_union_vector_field@@Base+0x2c0>
  409ad4:	mov    r11d,ecx
  409ad7:	lea    ebp,[r10*4+0x0]
  409adf:	sub    r11d,r15d
  409ae2:	cmp    r11d,ebp
  409ae5:	jb     409c50 <flatcc_verify_union_vector_field@@Base+0x2c0>
  409aeb:	mov    ebx,DWORD PTR [rax]
  409aed:	add    rax,rbx
  409af0:	cmp    DWORD PTR [rax],r10d
  409af3:	jne    409c8b <flatcc_verify_union_vector_field@@Base+0x2fb>
  409af9:	lea    edx,[rdi-0x1]
  409afc:	mov    QWORD PTR [rsp+0x10],r14
  409b01:	mov    DWORD PTR [rsp+0x18],ecx
  409b05:	mov    DWORD PTR [rsp+0x1c],edx
  409b09:	test   r10d,r10d
  409b0c:	je     409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409b0e:	lea    rbx,[rax+0x4]
  409b12:	lea    rax,[rsp+0x10]
  409b17:	add    ebp,r15d
  409b1a:	mov    QWORD PTR [rsp+0x8],rax
  409b1f:	jmp    409b3c <flatcc_verify_union_vector_field@@Base+0x1ac>
  409b21:	nop    DWORD PTR [rax+0x0]
  409b28:	test   dl,dl
  409b2a:	jne    409ca1 <flatcc_verify_union_vector_field@@Base+0x311>
  409b30:	add    r15d,0x4
  409b34:	inc    rbx
  409b37:	cmp    r15d,ebp
  409b3a:	je     409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409b3c:	mov    eax,r15d
  409b3f:	mov    eax,DWORD PTR [r14+rax*1]
  409b43:	movzx  edx,BYTE PTR [rbx]
  409b46:	test   eax,eax
  409b48:	je     409b28 <flatcc_verify_union_vector_field@@Base+0x198>
  409b4a:	test   dl,dl
  409b4c:	je     409cac <flatcc_verify_union_vector_field@@Base+0x31c>
  409b52:	mov    rdi,QWORD PTR [rsp+0x8]
  409b57:	mov    BYTE PTR [rsp+0x20],dl
  409b5b:	mov    DWORD PTR [rsp+0x24],r15d
  409b60:	mov    DWORD PTR [rsp+0x28],eax
  409b64:	call   r13
  409b67:	test   eax,eax
  409b69:	je     409b30 <flatcc_verify_union_vector_field@@Base+0x1a0>
  409b6b:	mov    rdi,QWORD PTR [rsp+0x8]
  409b70:	call   r13
  409b73:	mov    r12d,eax
  409b76:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409b80:	mov    rdi,QWORD PTR [rsp+0x38]
  409b85:	xor    rdi,QWORD PTR fs:0x28
  409b8e:	mov    eax,r12d
  409b91:	jne    409cb7 <flatcc_verify_union_vector_field@@Base+0x327>
  409b97:	add    rsp,0x48
  409b9b:	pop    rbx
  409b9c:	pop    rbp
  409b9d:	pop    r12
  409b9f:	pop    r13
  409ba1:	pop    r14
  409ba3:	pop    r15
  409ba5:	ret    
  409ba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409bb0:	lea    edx,[rbx+0x2]
  409bb3:	cmp    ax,dx
  409bb6:	jbe    409bca <flatcc_verify_union_vector_field@@Base+0x23a>
  409bb8:	mov    rax,QWORD PTR [rbp+0x10]
  409bbc:	movzx  edx,dx
  409bbf:	cmp    WORD PTR [rax+rdx*1],0x0
  409bc4:	jne    4099e6 <flatcc_verify_union_vector_field@@Base+0x56>
  409bca:	mov    r12d,0x16
  409bd0:	test   r15d,r15d
  409bd3:	je     4099e6 <flatcc_verify_union_vector_field@@Base+0x56>
  409bd9:	jmp    409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409bdb:	nop    DWORD PTR [rax+rax*1+0x0]
  409be0:	xor    r12d,r12d
  409be3:	test   r15d,r15d
  409be6:	setne  r12b
  409bea:	shl    r12d,0x2
  409bee:	jmp    409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409bf0:	mov    r12d,0x10
  409bf6:	jmp    409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409bf8:	nop    DWORD PTR [rax+rax*1+0x0]
  409c00:	mov    r9d,0xffffffff
  409c06:	mov    r8d,0x1
  409c0c:	mov    ecx,0x1
  409c11:	mov    edx,r15d
  409c14:	mov    esi,r14d
  409c17:	mov    rdi,rbp
  409c1a:	call   408770 <flatcc_verify_vector_field@@Base>
  409c1f:	mov    r12d,eax
  409c22:	jmp    409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409c27:	nop    WORD PTR [rax+rax*1+0x0]
  409c30:	mov    r12d,0xd
  409c36:	jmp    409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409c3b:	nop    DWORD PTR [rax+rax*1+0x0]
  409c40:	mov    r12d,0xc
  409c46:	jmp    409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409c4b:	nop    DWORD PTR [rax+rax*1+0x0]
  409c50:	and    r8d,0x3
  409c54:	jne    409bf0 <flatcc_verify_union_vector_field@@Base+0x260>
  409c56:	mov    eax,DWORD PTR [r14+r9*1]
  409c5a:	sub    esi,0x4
  409c5d:	cmp    eax,0x3fffffff
  409c62:	ja     409c96 <flatcc_verify_union_vector_field@@Base+0x306>
  409c64:	shl    eax,0x2
  409c67:	sub    esi,edx
  409c69:	cmp    esi,eax
  409c6b:	mov    eax,0x1a
  409c70:	cmovb  r12d,eax
  409c74:	jmp    409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409c79:	nop    DWORD PTR [rax+0x0]
  409c80:	mov    r12d,0x3
  409c86:	jmp    409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409c8b:	mov    r12d,0x22
  409c91:	jmp    409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409c96:	mov    r12d,0x19
  409c9c:	jmp    409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409ca1:	mov    r12d,0x20
  409ca7:	jmp    409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409cac:	mov    r12d,0x21
  409cb2:	jmp    409b80 <flatcc_verify_union_vector_field@@Base+0x1f0>
  409cb7:	call   403120 <__stack_chk_fail@plt>
  409cbc:	nop    DWORD PTR [rax+0x0]

0000000000409cc0 <__libc_csu_init@@Base>:
  409cc0:	endbr64 
  409cc4:	push   r15
  409cc6:	lea    r15,[rip+0x5143]        # 40ee10 <flatcc_builder_padding_base@@Base+0x41b0>
  409ccd:	push   r14
  409ccf:	mov    r14,rdx
  409cd2:	push   r13
  409cd4:	mov    r13,rsi
  409cd7:	push   r12
  409cd9:	mov    r12d,edi
  409cdc:	push   rbp
  409cdd:	lea    rbp,[rip+0x5134]        # 40ee18 <flatcc_builder_padding_base@@Base+0x41b8>
  409ce4:	push   rbx
  409ce5:	sub    rbp,r15
  409ce8:	sub    rsp,0x8
  409cec:	call   403000 <free@plt-0xf0>
  409cf1:	sar    rbp,0x3
  409cf5:	je     409d16 <__libc_csu_init@@Base+0x56>
  409cf7:	xor    ebx,ebx
  409cf9:	nop    DWORD PTR [rax+0x0]
  409d00:	mov    rdx,r14
  409d03:	mov    rsi,r13
  409d06:	mov    edi,r12d
  409d09:	call   QWORD PTR [r15+rbx*8]
  409d0d:	add    rbx,0x1
  409d11:	cmp    rbp,rbx
  409d14:	jne    409d00 <__libc_csu_init@@Base+0x40>
  409d16:	add    rsp,0x8
  409d1a:	pop    rbx
  409d1b:	pop    rbp
  409d1c:	pop    r12
  409d1e:	pop    r13
  409d20:	pop    r14
  409d22:	pop    r15
  409d24:	ret    
  409d25:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000409d30 <__libc_csu_fini@@Base>:
  409d30:	endbr64 
  409d34:	ret    

Disassembly of section .fini:

0000000000409d38 <.fini>:
  409d38:	endbr64 
  409d3c:	sub    rsp,0x8
  409d40:	add    rsp,0x8
  409d44:	ret    
