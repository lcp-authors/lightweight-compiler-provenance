
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf64-x86-64


Disassembly of section .init:

0000000000404000 <.init>:
  404000:	endbr64 
  404004:	sub    rsp,0x8
  404008:	mov    rax,QWORD PTR [rip+0x19fe1]        # 41dff0 <__gmon_start__>
  40400f:	test   rax,rax
  404012:	je     404016 <free@plt-0x1a>
  404014:	call   rax
  404016:	add    rsp,0x8
  40401a:	ret    

Disassembly of section .plt:

0000000000404020 <free@plt-0x10>:
  404020:	push   QWORD PTR [rip+0x19fe2]        # 41e008 <flatcc_builder_padding_base@@Base+0x5c28>
  404026:	jmp    QWORD PTR [rip+0x19fe4]        # 41e010 <flatcc_builder_padding_base@@Base+0x5c30>
  40402c:	nop    DWORD PTR [rax+0x0]

0000000000404030 <free@plt>:
  404030:	jmp    QWORD PTR [rip+0x19fe2]        # 41e018 <free@GLIBC_2.2.5>
  404036:	push   0x0
  40403b:	jmp    404020 <free@plt-0x10>

0000000000404040 <strncpy@plt>:
  404040:	jmp    QWORD PTR [rip+0x19fda]        # 41e020 <strncpy@GLIBC_2.2.5>
  404046:	push   0x1
  40404b:	jmp    404020 <free@plt-0x10>

0000000000404050 <strncmp@plt>:
  404050:	jmp    QWORD PTR [rip+0x19fd2]        # 41e028 <strncmp@GLIBC_2.2.5>
  404056:	push   0x2
  40405b:	jmp    404020 <free@plt-0x10>

0000000000404060 <puts@plt>:
  404060:	jmp    QWORD PTR [rip+0x19fca]        # 41e030 <puts@GLIBC_2.2.5>
  404066:	push   0x3
  40406b:	jmp    404020 <free@plt-0x10>

0000000000404070 <strlen@plt>:
  404070:	jmp    QWORD PTR [rip+0x19fc2]        # 41e038 <strlen@GLIBC_2.2.5>
  404076:	push   0x4
  40407b:	jmp    404020 <free@plt-0x10>

0000000000404080 <printf@plt>:
  404080:	jmp    QWORD PTR [rip+0x19fba]        # 41e040 <printf@GLIBC_2.2.5>
  404086:	push   0x5
  40408b:	jmp    404020 <free@plt-0x10>

0000000000404090 <gettimeofday@plt>:
  404090:	jmp    QWORD PTR [rip+0x19fb2]        # 41e048 <gettimeofday@GLIBC_2.2.5>
  404096:	push   0x6
  40409b:	jmp    404020 <free@plt-0x10>

00000000004040a0 <__assert_fail@plt>:
  4040a0:	jmp    QWORD PTR [rip+0x19faa]        # 41e050 <__assert_fail@GLIBC_2.2.5>
  4040a6:	push   0x7
  4040ab:	jmp    404020 <free@plt-0x10>

00000000004040b0 <memset@plt>:
  4040b0:	jmp    QWORD PTR [rip+0x19fa2]        # 41e058 <memset@GLIBC_2.2.5>
  4040b6:	push   0x8
  4040bb:	jmp    404020 <free@plt-0x10>

00000000004040c0 <fputc@plt>:
  4040c0:	jmp    QWORD PTR [rip+0x19f9a]        # 41e060 <fputc@GLIBC_2.2.5>
  4040c6:	push   0x9
  4040cb:	jmp    404020 <free@plt-0x10>

00000000004040d0 <memchr@plt>:
  4040d0:	jmp    QWORD PTR [rip+0x19f92]        # 41e068 <memchr@GLIBC_2.2.5>
  4040d6:	push   0xa
  4040db:	jmp    404020 <free@plt-0x10>

00000000004040e0 <strcmp@plt>:
  4040e0:	jmp    QWORD PTR [rip+0x19f8a]        # 41e070 <strcmp@GLIBC_2.2.5>
  4040e6:	push   0xb
  4040eb:	jmp    404020 <free@plt-0x10>

00000000004040f0 <fprintf@plt>:
  4040f0:	jmp    QWORD PTR [rip+0x19f82]        # 41e078 <fprintf@GLIBC_2.2.5>
  4040f6:	push   0xc
  4040fb:	jmp    404020 <free@plt-0x10>

0000000000404100 <memcpy@plt>:
  404100:	jmp    QWORD PTR [rip+0x19f7a]        # 41e080 <memcpy@GLIBC_2.14>
  404106:	push   0xd
  40410b:	jmp    404020 <free@plt-0x10>

0000000000404110 <malloc@plt>:
  404110:	jmp    QWORD PTR [rip+0x19f72]        # 41e088 <malloc@GLIBC_2.2.5>
  404116:	push   0xe
  40411b:	jmp    404020 <free@plt-0x10>

0000000000404120 <bcmp@plt>:
  404120:	jmp    QWORD PTR [rip+0x19f6a]        # 41e090 <bcmp@GLIBC_2.2.5>
  404126:	push   0xf
  40412b:	jmp    404020 <free@plt-0x10>

0000000000404130 <realloc@plt>:
  404130:	jmp    QWORD PTR [rip+0x19f62]        # 41e098 <realloc@GLIBC_2.2.5>
  404136:	push   0x10
  40413b:	jmp    404020 <free@plt-0x10>

0000000000404140 <fwrite@plt>:
  404140:	jmp    QWORD PTR [rip+0x19f5a]        # 41e0a0 <fwrite@GLIBC_2.2.5>
  404146:	push   0x11
  40414b:	jmp    404020 <free@plt-0x10>

0000000000404150 <posix_memalign@plt>:
  404150:	jmp    QWORD PTR [rip+0x19f52]        # 41e0a8 <posix_memalign@GLIBC_2.2.5>
  404156:	push   0x12
  40415b:	jmp    404020 <free@plt-0x10>

Disassembly of section .text:

0000000000404160 <_start@@Base>:
  404160:	endbr64 
  404164:	xor    ebp,ebp
  404166:	mov    r9,rdx
  404169:	pop    rsi
  40416a:	mov    rdx,rsp
  40416d:	and    rsp,0xfffffffffffffff0
  404171:	push   rax
  404172:	push   rsp
  404173:	mov    r8,0x414530
  40417a:	mov    rcx,0x4144c0
  404181:	mov    rdi,0x40ced0
  404188:	call   QWORD PTR [rip+0x19e5a]        # 41dfe8 <__libc_start_main@GLIBC_2.2.5>
  40418e:	hlt    
  40418f:	nop
  404190:	endbr64 
  404194:	ret    
  404195:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40419f:	nop
  4041a0:	mov    eax,0x41e0c0
  4041a5:	cmp    rax,0x41e0c0
  4041ab:	je     4041c0 <_start@@Base+0x60>
  4041ad:	mov    eax,0x0
  4041b2:	test   rax,rax
  4041b5:	je     4041c0 <_start@@Base+0x60>
  4041b7:	mov    edi,0x41e0c0
  4041bc:	jmp    rax
  4041be:	xchg   ax,ax
  4041c0:	ret    
  4041c1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4041cc:	nop    DWORD PTR [rax+0x0]
  4041d0:	mov    esi,0x41e0c0
  4041d5:	sub    rsi,0x41e0c0
  4041dc:	mov    rax,rsi
  4041df:	shr    rsi,0x3f
  4041e3:	sar    rax,0x3
  4041e7:	add    rsi,rax
  4041ea:	sar    rsi,1
  4041ed:	je     404200 <_start@@Base+0xa0>
  4041ef:	mov    eax,0x0
  4041f4:	test   rax,rax
  4041f7:	je     404200 <_start@@Base+0xa0>
  4041f9:	mov    edi,0x41e0c0
  4041fe:	jmp    rax
  404200:	ret    
  404201:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40420c:	nop    DWORD PTR [rax+0x0]
  404210:	endbr64 
  404214:	cmp    BYTE PTR [rip+0x19ea5],0x0        # 41e0c0 <__bss_start@@Base>
  40421b:	jne    404230 <_start@@Base+0xd0>
  40421d:	push   rbp
  40421e:	mov    rbp,rsp
  404221:	call   4041a0 <_start@@Base+0x40>
  404226:	mov    BYTE PTR [rip+0x19e93],0x1        # 41e0c0 <__bss_start@@Base>
  40422d:	pop    rbp
  40422e:	ret    
  40422f:	nop
  404230:	ret    
  404231:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40423c:	nop    DWORD PTR [rax+0x0]
  404240:	endbr64 
  404244:	jmp    4041d0 <_start@@Base+0x70>
  404246:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000404250 <verify_empty_monster@@Base>:
  404250:	push   rax
  404251:	test   rdi,rdi
  404254:	je     404295 <verify_empty_monster@@Base+0x45>
  404256:	cmp    DWORD PTR [rdi+0x4],0x534e4f4d
  40425d:	jne    404295 <verify_empty_monster@@Base+0x45>
  40425f:	mov    eax,DWORD PTR [rdi]
  404261:	lea    rcx,[rdi+rax*1]
  404265:	movsxd rdx,DWORD PTR [rdi+rax*1]
  404269:	mov    rax,rcx
  40426c:	sub    rax,rdx
  40426f:	neg    rdx
  404272:	movzx  esi,WORD PTR [rax]
  404275:	cmp    si,0x9
  404279:	jbe    4042a8 <verify_empty_monster@@Base+0x58>
  40427b:	movzx  eax,WORD PTR [rcx+rdx*1+0x8]
  404280:	test   rax,rax
  404283:	je     4042b0 <verify_empty_monster@@Base+0x60>
  404285:	cmp    WORD PTR [rcx+rax*1],0x64
  40428a:	jne    4042c1 <verify_empty_monster@@Base+0x71>
  40428c:	lea    rdi,[rip+0x12cbe]        # 416f51 <_IO_stdin_used@@Base+0x1f51>
  404293:	jmp    40429c <verify_empty_monster@@Base+0x4c>
  404295:	lea    rdi,[rip+0x12e68]        # 417104 <_IO_stdin_used@@Base+0x2104>
  40429c:	call   404060 <puts@plt>
  4042a1:	mov    eax,0xffffffff
  4042a6:	pop    rcx
  4042a7:	ret    
  4042a8:	xor    eax,eax
  4042aa:	cmp    si,0x6
  4042ae:	jb     4042a6 <verify_empty_monster@@Base+0x56>
  4042b0:	cmp    WORD PTR [rcx+rdx*1+0x4],0x0
  4042b6:	je     4042ca <verify_empty_monster@@Base+0x7a>
  4042b8:	lea    rdi,[rip+0x12ea2]        # 417161 <_IO_stdin_used@@Base+0x2161>
  4042bf:	jmp    40429c <verify_empty_monster@@Base+0x4c>
  4042c1:	lea    rdi,[rip+0x1324c]        # 417514 <_IO_stdin_used@@Base+0x2514>
  4042c8:	jmp    40429c <verify_empty_monster@@Base+0x4c>
  4042ca:	xor    eax,eax
  4042cc:	pop    rcx
  4042cd:	ret    
  4042ce:	xchg   ax,ax

00000000004042d0 <test_enums@@Base>:
  4042d0:	xor    eax,eax
  4042d2:	ret    
  4042d3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4042dd:	nop    DWORD PTR [rax]

00000000004042e0 <test_type_aliases@@Base>:
  4042e0:	push   rbp
  4042e1:	push   r15
  4042e3:	push   r14
  4042e5:	push   rbx
  4042e6:	push   rax
  4042e7:	mov    rbx,rdi
  4042ea:	call   40e0f0 <flatcc_builder_reset@@Base>
  4042ef:	xor    r14d,r14d
  4042f2:	mov    ecx,0x1
  4042f7:	mov    r9d,0xffffffff
  4042fd:	mov    rdi,rbx
  404300:	mov    esi,0x0
  404305:	xor    edx,edx
  404307:	mov    r8d,0x1
  40430d:	call   410ac0 <flatcc_builder_create_vector@@Base>
  404312:	mov    ebp,eax
  404314:	mov    ecx,0x8
  404319:	mov    r9d,0x1fffffff
  40431f:	mov    rdi,rbx
  404322:	mov    esi,0x0
  404327:	xor    edx,edx
  404329:	mov    r8d,0x8
  40432f:	call   410ac0 <flatcc_builder_create_vector@@Base>
  404334:	mov    r15d,eax
  404337:	lea    rsi,[rip+0x10e0a]        # 415148 <_IO_stdin_used@@Base+0x148>
  40433e:	mov    rdi,rbx
  404341:	xor    edx,edx
  404343:	xor    ecx,ecx
  404345:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  40434a:	test   eax,eax
  40434c:	jne    40436e <test_type_aliases@@Base+0x8e>
  40434e:	mov    rdi,rbx
  404351:	mov    esi,0xc
  404356:	call   40ff20 <flatcc_builder_start_table@@Base>
  40435b:	test   eax,eax
  40435d:	je     4044a9 <test_type_aliases@@Base+0x1c9>
  404363:	mov    rdi,rbx
  404366:	mov    esi,r14d
  404369:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40436e:	mov    rsi,rsp
  404371:	mov    rdi,rbx
  404374:	call   412610 <flatcc_builder_finalize_aligned_buffer@@Base>
  404379:	mov    rbx,rax
  40437c:	mov    rsi,QWORD PTR [rsp]
  404380:	lea    rdx,[rip+0x10dc1]        # 415148 <_IO_stdin_used@@Base+0x148>
  404387:	lea    rcx,[rip+0x8ce2]        # 40d070 <main@@Base+0x1a0>
  40438e:	mov    rdi,rax
  404391:	call   413990 <flatcc_verify_table_as_root@@Base>
  404396:	test   eax,eax
  404398:	je     4043d6 <test_type_aliases@@Base+0xf6>
  40439a:	mov    ebp,eax
  40439c:	mov    rdx,QWORD PTR [rsp]
  4043a0:	mov    rax,QWORD PTR [rip+0x19c51]        # 41dff8 <stderr@GLIBC_2.2.5>
  4043a7:	mov    rcx,QWORD PTR [rax]
  4043aa:	lea    rdi,[rip+0x10d9c]        # 41514d <_IO_stdin_used@@Base+0x14d>
  4043b1:	mov    rsi,rbx
  4043b4:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  4043b9:	mov    edi,ebp
  4043bb:	call   412e60 <flatcc_verify_error_string@@Base>
  4043c0:	lea    rdi,[rip+0x10d99]        # 415160 <_IO_stdin_used@@Base+0x160>
  4043c7:	mov    rsi,rax
  4043ca:	xor    eax,eax
  4043cc:	call   404080 <printf@plt>
  4043d1:	jmp    404494 <test_type_aliases@@Base+0x1b4>
  4043d6:	test   rbx,rbx
  4043d9:	je     404754 <test_type_aliases@@Base+0x474>
  4043df:	cmp    DWORD PTR [rbx+0x4],0x534e4f4d
  4043e6:	jne    404754 <test_type_aliases@@Base+0x474>
  4043ec:	mov    ecx,DWORD PTR [rbx]
  4043ee:	mov    rax,rbx
  4043f1:	add    rax,rcx
  4043f4:	movsxd rcx,DWORD PTR [rbx+rcx*1]
  4043f8:	mov    rdx,rax
  4043fb:	sub    rdx,rcx
  4043fe:	movzx  edx,WORD PTR [rdx]
  404401:	cmp    dx,0x5
  404405:	jbe    404483 <test_type_aliases@@Base+0x1a3>
  404407:	neg    rcx
  40440a:	movzx  esi,WORD PTR [rax+rcx*1+0x4]
  40440f:	test   rsi,rsi
  404412:	je     404483 <test_type_aliases@@Base+0x1a3>
  404414:	cmp    dx,0xa
  404418:	jb     404483 <test_type_aliases@@Base+0x1a3>
  40441a:	cmp    BYTE PTR [rax+rsi*1],0x80
  40441e:	jne    404483 <test_type_aliases@@Base+0x1a3>
  404420:	movzx  esi,WORD PTR [rax+rcx*1+0x8]
  404425:	test   rsi,rsi
  404428:	je     404483 <test_type_aliases@@Base+0x1a3>
  40442a:	cmp    dx,0xe
  40442e:	jb     404483 <test_type_aliases@@Base+0x1a3>
  404430:	movzx  esi,WORD PTR [rax+rsi*1]
  404434:	cmp    esi,0x8000
  40443a:	jne    404483 <test_type_aliases@@Base+0x1a3>
  40443c:	movzx  esi,WORD PTR [rax+rcx*1+0xc]
  404441:	test   rsi,rsi
  404444:	je     404483 <test_type_aliases@@Base+0x1a3>
  404446:	cmp    dx,0x12
  40444a:	jb     404483 <test_type_aliases@@Base+0x1a3>
  40444c:	cmp    DWORD PTR [rax+rsi*1],0x80000000
  404453:	jne    404483 <test_type_aliases@@Base+0x1a3>
  404455:	movzx  esi,WORD PTR [rax+rcx*1+0x10]
  40445a:	test   rsi,rsi
  40445d:	je     404483 <test_type_aliases@@Base+0x1a3>
  40445f:	movabs rdi,0x8000000000000000
  404469:	cmp    QWORD PTR [rax+rsi*1],rdi
  40446d:	jne    404483 <test_type_aliases@@Base+0x1a3>
  40446f:	movzx  esi,WORD PTR [rax+rcx*1+0x6]
  404474:	test   rsi,rsi
  404477:	je     404483 <test_type_aliases@@Base+0x1a3>
  404479:	cmp    BYTE PTR [rax+rsi*1],0xff
  40447d:	je     404697 <test_type_aliases@@Base+0x3b7>
  404483:	lea    rdi,[rip+0x12ae4]        # 416f6e <_IO_stdin_used@@Base+0x1f6e>
  40448a:	call   404060 <puts@plt>
  40448f:	mov    ebp,0xffffffff
  404494:	mov    rdi,rbx
  404497:	call   412740 <flatcc_builder_aligned_free@@Base>
  40449c:	mov    eax,ebp
  40449e:	add    rsp,0x8
  4044a2:	pop    rbx
  4044a3:	pop    r14
  4044a5:	pop    r15
  4044a7:	pop    rbp
  4044a8:	ret    
  4044a9:	mov    edx,0x8
  4044ae:	mov    rdi,rbx
  4044b1:	mov    esi,0x6
  4044b6:	mov    ecx,0x8
  4044bb:	call   4112a0 <flatcc_builder_table_add@@Base>
  4044c0:	test   rax,rax
  4044c3:	je     404363 <test_type_aliases@@Base+0x83>
  4044c9:	movabs rcx,0x8000000000000000
  4044d3:	mov    QWORD PTR [rax],rcx
  4044d6:	mov    edx,0x8
  4044db:	mov    rdi,rbx
  4044de:	mov    esi,0x7
  4044e3:	mov    ecx,0x8
  4044e8:	call   4112a0 <flatcc_builder_table_add@@Base>
  4044ed:	test   rax,rax
  4044f0:	je     404363 <test_type_aliases@@Base+0x83>
  4044f6:	mov    QWORD PTR [rax],0xffffffffffffffff
  4044fd:	mov    edx,0x8
  404502:	mov    rdi,rbx
  404505:	mov    esi,0x9
  40450a:	mov    ecx,0x8
  40450f:	call   4112a0 <flatcc_builder_table_add@@Base>
  404514:	test   rax,rax
  404517:	je     404363 <test_type_aliases@@Base+0x83>
  40451d:	movabs rcx,0x4002666666666666
  404527:	mov    QWORD PTR [rax],rcx
  40452a:	mov    edx,0x4
  40452f:	mov    rdi,rbx
  404532:	mov    esi,0x4
  404537:	mov    ecx,0x4
  40453c:	call   4112a0 <flatcc_builder_table_add@@Base>
  404541:	test   rax,rax
  404544:	je     404363 <test_type_aliases@@Base+0x83>
  40454a:	mov    DWORD PTR [rax],0x80000000
  404550:	mov    edx,0x4
  404555:	mov    rdi,rbx
  404558:	mov    esi,0x5
  40455d:	mov    ecx,0x4
  404562:	call   4112a0 <flatcc_builder_table_add@@Base>
  404567:	test   rax,rax
  40456a:	je     404363 <test_type_aliases@@Base+0x83>
  404570:	mov    DWORD PTR [rax],0xffffffff
  404576:	mov    edx,0x4
  40457b:	mov    rdi,rbx
  40457e:	mov    esi,0x8
  404583:	mov    ecx,0x4
  404588:	call   4112a0 <flatcc_builder_table_add@@Base>
  40458d:	test   rax,rax
  404590:	je     404363 <test_type_aliases@@Base+0x83>
  404596:	mov    DWORD PTR [rax],0x40133333
  40459c:	test   ebp,ebp
  40459e:	je     404363 <test_type_aliases@@Base+0x83>
  4045a4:	mov    rdi,rbx
  4045a7:	mov    esi,0xa
  4045ac:	call   411140 <flatcc_builder_table_add_offset@@Base>
  4045b1:	test   rax,rax
  4045b4:	je     404363 <test_type_aliases@@Base+0x83>
  4045ba:	mov    DWORD PTR [rax],ebp
  4045bc:	test   r15d,r15d
  4045bf:	je     404363 <test_type_aliases@@Base+0x83>
  4045c5:	mov    rdi,rbx
  4045c8:	mov    esi,0xb
  4045cd:	call   411140 <flatcc_builder_table_add_offset@@Base>
  4045d2:	test   rax,rax
  4045d5:	je     404363 <test_type_aliases@@Base+0x83>
  4045db:	mov    DWORD PTR [rax],r15d
  4045de:	mov    edx,0x2
  4045e3:	mov    rdi,rbx
  4045e6:	mov    esi,0x2
  4045eb:	mov    ecx,0x2
  4045f0:	call   4112a0 <flatcc_builder_table_add@@Base>
  4045f5:	test   rax,rax
  4045f8:	je     404363 <test_type_aliases@@Base+0x83>
  4045fe:	mov    WORD PTR [rax],0x8000
  404603:	mov    edx,0x2
  404608:	mov    rdi,rbx
  40460b:	mov    esi,0x3
  404610:	mov    ecx,0x2
  404615:	call   4112a0 <flatcc_builder_table_add@@Base>
  40461a:	test   rax,rax
  40461d:	je     404363 <test_type_aliases@@Base+0x83>
  404623:	mov    WORD PTR [rax],0xffff
  404628:	xor    r14d,r14d
  40462b:	mov    edx,0x1
  404630:	mov    rdi,rbx
  404633:	xor    esi,esi
  404635:	mov    ecx,0x1
  40463a:	call   4112a0 <flatcc_builder_table_add@@Base>
  40463f:	test   rax,rax
  404642:	je     404363 <test_type_aliases@@Base+0x83>
  404648:	mov    BYTE PTR [rax],0x80
  40464b:	mov    edx,0x1
  404650:	mov    rdi,rbx
  404653:	mov    esi,0x1
  404658:	mov    ecx,0x1
  40465d:	call   4112a0 <flatcc_builder_table_add@@Base>
  404662:	test   rax,rax
  404665:	je     404363 <test_type_aliases@@Base+0x83>
  40466b:	mov    BYTE PTR [rax],0xff
  40466e:	lea    rsi,[rip+0x10ac1]        # 415136 <_IO_stdin_used@@Base+0x136>
  404675:	mov    rdi,rbx
  404678:	xor    edx,edx
  40467a:	call   4108c0 <flatcc_builder_check_required@@Base>
  40467f:	test   eax,eax
  404681:	je     404773 <test_type_aliases@@Base+0x493>
  404687:	mov    rdi,rbx
  40468a:	call   410930 <flatcc_builder_end_table@@Base>
  40468f:	mov    r14d,eax
  404692:	jmp    404363 <test_type_aliases@@Base+0x83>
  404697:	movzx  esi,WORD PTR [rax+rcx*1+0xa]
  40469c:	test   rsi,rsi
  40469f:	je     404483 <test_type_aliases@@Base+0x1a3>
  4046a5:	cmp    WORD PTR [rax+rsi*1],0xffff
  4046aa:	jne    404483 <test_type_aliases@@Base+0x1a3>
  4046b0:	movzx  esi,WORD PTR [rax+rcx*1+0xe]
  4046b5:	test   rsi,rsi
  4046b8:	je     404483 <test_type_aliases@@Base+0x1a3>
  4046be:	cmp    dx,0x14
  4046c2:	jb     404483 <test_type_aliases@@Base+0x1a3>
  4046c8:	cmp    DWORD PTR [rax+rsi*1],0xffffffff
  4046cc:	jne    404483 <test_type_aliases@@Base+0x1a3>
  4046d2:	movzx  esi,WORD PTR [rax+rcx*1+0x12]
  4046d7:	test   rsi,rsi
  4046da:	je     404483 <test_type_aliases@@Base+0x1a3>
  4046e0:	cmp    dx,0x16
  4046e4:	jb     404483 <test_type_aliases@@Base+0x1a3>
  4046ea:	cmp    QWORD PTR [rax+rsi*1],0xffffffffffffffff
  4046ef:	jne    404483 <test_type_aliases@@Base+0x1a3>
  4046f5:	movzx  esi,WORD PTR [rax+rcx*1+0x14]
  4046fa:	test   rsi,rsi
  4046fd:	je     404483 <test_type_aliases@@Base+0x1a3>
  404703:	cmp    dx,0x18
  404707:	jb     404483 <test_type_aliases@@Base+0x1a3>
  40470d:	vmovss xmm0,DWORD PTR [rax+rsi*1]
  404712:	vucomiss xmm0,DWORD PTR [rip+0x108ea]        # 415004 <_IO_stdin_used@@Base+0x4>
  40471a:	jne    404483 <test_type_aliases@@Base+0x1a3>
  404720:	jp     404483 <test_type_aliases@@Base+0x1a3>
  404726:	movzx  ecx,WORD PTR [rax+rcx*1+0x16]
  40472b:	test   rcx,rcx
  40472e:	je     404483 <test_type_aliases@@Base+0x1a3>
  404734:	vmovsd xmm0,QWORD PTR [rax+rcx*1]
  404739:	vucomisd xmm0,QWORD PTR [rip+0x108df]        # 415020 <_IO_stdin_used@@Base+0x20>
  404741:	jne    404483 <test_type_aliases@@Base+0x1a3>
  404747:	jp     404483 <test_type_aliases@@Base+0x1a3>
  40474d:	xor    ebp,ebp
  40474f:	jmp    404494 <test_type_aliases@@Base+0x1b4>
  404754:	lea    rdi,[rip+0x116b6]        # 415e11 <_IO_stdin_used@@Base+0xe11>
  40475b:	lea    rsi,[rip+0x116d5]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  404762:	lea    rcx,[rip+0x11934]        # 41609d <_IO_stdin_used@@Base+0x109d>
  404769:	mov    edx,0x2ed
  40476e:	call   4040a0 <__assert_fail@plt>
  404773:	lea    rdi,[rip+0x11782]        # 415efc <_IO_stdin_used@@Base+0xefc>
  40477a:	lea    rsi,[rip+0x11829]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  404781:	lea    rcx,[rip+0x1189f]        # 416027 <_IO_stdin_used@@Base+0x1027>
  404788:	mov    edx,0xed
  40478d:	call   4040a0 <__assert_fail@plt>
  404792:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40479c:	nop    DWORD PTR [rax+0x0]
  4047a0:	push   rbp
  4047a1:	push   r15
  4047a3:	push   r14
  4047a5:	push   r13
  4047a7:	push   r12
  4047a9:	push   rbx
  4047aa:	sub    rsp,0x28
  4047ae:	mov    r15,rcx
  4047b1:	mov    rbp,rdx
  4047b4:	mov    rbx,rsi
  4047b7:	test   rdi,rdi
  4047ba:	je     4047d0 <test_type_aliases@@Base+0x4f0>
  4047bc:	mov    rdx,rdi
  4047bf:	lea    rsi,[rip+0x118ba]        # 416080 <_IO_stdin_used@@Base+0x1080>
  4047c6:	mov    rdi,r15
  4047c9:	xor    eax,eax
  4047cb:	call   4040f0 <fprintf@plt>
  4047d0:	test   ebp,ebp
  4047d2:	je     4048ce <test_type_aliases@@Base+0x5ee>
  4047d8:	mov    QWORD PTR [rsp+0x8],rbp
  4047dd:	mov    r12d,ebp
  4047e0:	lea    rbp,[rsp+0x10]
  4047e5:	xor    r14d,r14d
  4047e8:	jmp    404840 <test_type_aliases@@Base+0x560>
  4047ea:	nop    WORD PTR [rax+rax*1+0x0]
  4047f0:	mov    rdi,r15
  4047f3:	lea    rsi,[rip+0x11891]        # 41608b <_IO_stdin_used@@Base+0x108b>
  4047fa:	mov    edx,r14d
  4047fd:	xor    eax,eax
  4047ff:	call   4040f0 <fprintf@plt>
  404804:	movzx  edx,BYTE PTR [rbx+r14*1]
  404809:	mov    rdi,r15
  40480c:	lea    rsi,[rip+0x11880]        # 416093 <_IO_stdin_used@@Base+0x1093>
  404813:	xor    eax,eax
  404815:	call   4040f0 <fprintf@plt>
  40481a:	movzx  eax,BYTE PTR [rbx+r14*1]
  40481f:	lea    ecx,[rax-0x20]
  404822:	cmp    cl,0x5e
  404825:	mov    ecx,0x2e
  40482a:	cmova  eax,ecx
  40482d:	mov    BYTE PTR [r13+rbp*1+0x0],al
  404832:	mov    BYTE PTR [r13+rbp*1+0x1],0x0
  404838:	inc    r14
  40483b:	cmp    r12,r14
  40483e:	je     404892 <test_type_aliases@@Base+0x5b2>
  404840:	mov    r13d,r14d
  404843:	and    r13d,0xf
  404847:	test   r13d,r13d
  40484a:	je     404870 <test_type_aliases@@Base+0x590>
  40484c:	test   r14b,0x7
  404850:	jne    404804 <test_type_aliases@@Base+0x524>
  404852:	mov    edi,0x20
  404857:	mov    rsi,r15
  40485a:	call   4040c0 <fputc@plt>
  40485f:	jmp    404804 <test_type_aliases@@Base+0x524>
  404861:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40486b:	nop    DWORD PTR [rax+rax*1+0x0]
  404870:	test   r14,r14
  404873:	je     4047f0 <test_type_aliases@@Base+0x510>
  404879:	mov    rdi,r15
  40487c:	lea    rsi,[rip+0x11802]        # 416085 <_IO_stdin_used@@Base+0x1085>
  404883:	mov    rdx,rbp
  404886:	xor    eax,eax
  404888:	call   4040f0 <fprintf@plt>
  40488d:	jmp    4047f0 <test_type_aliases@@Base+0x510>
  404892:	mov    rax,QWORD PTR [rsp+0x8]
  404897:	test   al,0xf
  404899:	je     4048ce <test_type_aliases@@Base+0x5ee>
  40489b:	lea    ebx,[rax+0x1]
  40489e:	lea    r14,[rip+0x117f4]        # 416099 <_IO_stdin_used@@Base+0x1099>
  4048a5:	mov    ebp,ebx
  4048a7:	nop    WORD PTR [rax+rax*1+0x0]
  4048b0:	mov    esi,0x3
  4048b5:	mov    edx,0x1
  4048ba:	mov    rdi,r14
  4048bd:	mov    rcx,r15
  4048c0:	call   404140 <fwrite@plt>
  4048c5:	inc    ebp
  4048c7:	test   bl,0xf
  4048ca:	mov    ebx,ebp
  4048cc:	jne    4048b0 <test_type_aliases@@Base+0x5d0>
  4048ce:	lea    rsi,[rip+0x117b0]        # 416085 <_IO_stdin_used@@Base+0x1085>
  4048d5:	lea    rdx,[rsp+0x10]
  4048da:	mov    rdi,r15
  4048dd:	xor    eax,eax
  4048df:	call   4040f0 <fprintf@plt>
  4048e4:	add    rsp,0x28
  4048e8:	pop    rbx
  4048e9:	pop    r12
  4048eb:	pop    r13
  4048ed:	pop    r14
  4048ef:	pop    r15
  4048f1:	pop    rbp
  4048f2:	ret    
  4048f3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4048fd:	nop    DWORD PTR [rax]

0000000000404900 <test_empty_monster@@Base>:
  404900:	push   rbp
  404901:	push   rbx
  404902:	push   rax
  404903:	mov    rbx,rdi
  404906:	call   40e0f0 <flatcc_builder_reset@@Base>
  40490b:	lea    rsi,[rip+0x10836]        # 415148 <_IO_stdin_used@@Base+0x148>
  404912:	mov    rdi,rbx
  404915:	xor    edx,edx
  404917:	xor    ecx,ecx
  404919:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  40491e:	mov    rdi,rbx
  404921:	mov    esi,0x24
  404926:	call   40ff20 <flatcc_builder_start_table@@Base>
  40492b:	lea    rsi,[rip+0x1085a]        # 41518c <_IO_stdin_used@@Base+0x18c>
  404932:	mov    rdi,rbx
  404935:	call   412170 <flatcc_builder_create_string_str@@Base>
  40493a:	test   eax,eax
  40493c:	je     404954 <test_empty_monster@@Base+0x54>
  40493e:	mov    ebp,eax
  404940:	mov    rdi,rbx
  404943:	mov    esi,0x3
  404948:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40494d:	test   rax,rax
  404950:	je     404954 <test_empty_monster@@Base+0x54>
  404952:	mov    DWORD PTR [rax],ebp
  404954:	lea    rsi,[rip+0x107dd]        # 415138 <_IO_stdin_used@@Base+0x138>
  40495b:	mov    rdi,rbx
  40495e:	mov    edx,0x1
  404963:	call   4108c0 <flatcc_builder_check_required@@Base>
  404968:	test   eax,eax
  40496a:	je     404aa1 <test_empty_monster@@Base+0x1a1>
  404970:	mov    rdi,rbx
  404973:	call   410930 <flatcc_builder_end_table@@Base>
  404978:	mov    rdi,rbx
  40497b:	mov    esi,eax
  40497d:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  404982:	mov    rsi,rsp
  404985:	mov    rdi,rbx
  404988:	call   412610 <flatcc_builder_finalize_aligned_buffer@@Base>
  40498d:	mov    rbx,rax
  404990:	mov    rdx,QWORD PTR [rsp]
  404994:	mov    rax,QWORD PTR [rip+0x1965d]        # 41dff8 <stderr@GLIBC_2.2.5>
  40499b:	mov    rcx,QWORD PTR [rax]
  40499e:	lea    rdi,[rip+0x107f1]        # 415196 <_IO_stdin_used@@Base+0x196>
  4049a5:	mov    rsi,rbx
  4049a8:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  4049ad:	lea    rdi,[rip+0x12750]        # 417104 <_IO_stdin_used@@Base+0x2104>
  4049b4:	test   rbx,rbx
  4049b7:	je     404a18 <test_empty_monster@@Base+0x118>
  4049b9:	cmp    DWORD PTR [rbx+0x4],0x534e4f4d
  4049c0:	jne    404a18 <test_empty_monster@@Base+0x118>
  4049c2:	mov    ecx,DWORD PTR [rbx]
  4049c4:	mov    rax,rbx
  4049c7:	add    rax,rcx
  4049ca:	movsxd rcx,DWORD PTR [rbx+rcx*1]
  4049ce:	mov    rdx,rax
  4049d1:	sub    rdx,rcx
  4049d4:	neg    rcx
  4049d7:	movzx  edx,WORD PTR [rdx]
  4049da:	cmp    dx,0xa
  4049de:	jb     404a03 <test_empty_monster@@Base+0x103>
  4049e0:	movzx  edx,WORD PTR [rax+rcx*1+0x8]
  4049e5:	test   rdx,rdx
  4049e8:	je     404a09 <test_empty_monster@@Base+0x109>
  4049ea:	cmp    WORD PTR [rax+rdx*1],0x64
  4049ef:	lea    rax,[rip+0x1255b]        # 416f51 <_IO_stdin_used@@Base+0x1f51>
  4049f6:	lea    rdi,[rip+0x12b17]        # 417514 <_IO_stdin_used@@Base+0x2514>
  4049fd:	cmove  rdi,rax
  404a01:	jmp    404a18 <test_empty_monster@@Base+0x118>
  404a03:	cmp    dx,0x6
  404a07:	jb     404a33 <test_empty_monster@@Base+0x133>
  404a09:	cmp    WORD PTR [rax+rcx*1+0x4],0x0
  404a0f:	je     404a33 <test_empty_monster@@Base+0x133>
  404a11:	lea    rdi,[rip+0x12749]        # 417161 <_IO_stdin_used@@Base+0x2161>
  404a18:	call   404060 <puts@plt>
  404a1d:	mov    ebp,0xffffffff
  404a22:	mov    rdi,rbx
  404a25:	call   412740 <flatcc_builder_aligned_free@@Base>
  404a2a:	mov    eax,ebp
  404a2c:	add    rsp,0x8
  404a30:	pop    rbx
  404a31:	pop    rbp
  404a32:	ret    
  404a33:	mov    rsi,QWORD PTR [rsp]
  404a37:	lea    rdx,[rip+0x1070a]        # 415148 <_IO_stdin_used@@Base+0x148>
  404a3e:	lea    rcx,[rip+0x879b]        # 40d1e0 <main@@Base+0x310>
  404a45:	mov    rdi,rbx
  404a48:	call   413990 <flatcc_verify_table_as_root@@Base>
  404a4d:	test   eax,eax
  404a4f:	je     404a70 <test_empty_monster@@Base+0x170>
  404a51:	mov    edi,eax
  404a53:	call   412e60 <flatcc_verify_error_string@@Base>
  404a58:	lea    rdi,[rip+0x1074b]        # 4151aa <_IO_stdin_used@@Base+0x1aa>
  404a5f:	mov    rsi,rax
  404a62:	xor    eax,eax
  404a64:	call   404080 <printf@plt>
  404a69:	mov    ebp,0xffffffff
  404a6e:	jmp    404a2a <test_empty_monster@@Base+0x12a>
  404a70:	mov    rsi,QWORD PTR [rsp]
  404a74:	dec    rsi
  404a77:	lea    rdx,[rip+0x106ca]        # 415148 <_IO_stdin_used@@Base+0x148>
  404a7e:	lea    rcx,[rip+0x875b]        # 40d1e0 <main@@Base+0x310>
  404a85:	mov    rdi,rbx
  404a88:	call   413990 <flatcc_verify_table_as_root@@Base>
  404a8d:	xor    ebp,ebp
  404a8f:	test   eax,eax
  404a91:	jne    404a22 <test_empty_monster@@Base+0x122>
  404a93:	lea    rdi,[rip+0x12503]        # 416f9d <_IO_stdin_used@@Base+0x1f9d>
  404a9a:	call   404060 <puts@plt>
  404a9f:	jmp    404a69 <test_empty_monster@@Base+0x169>
  404aa1:	lea    rdi,[rip+0x1163e]        # 4160e6 <_IO_stdin_used@@Base+0x10e6>
  404aa8:	lea    rsi,[rip+0x114fb]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  404aaf:	lea    rcx,[rip+0x116d2]        # 416188 <_IO_stdin_used@@Base+0x1188>
  404ab6:	mov    edx,0xeb
  404abb:	call   4040a0 <__assert_fail@plt>

0000000000404ac0 <test_typed_empty_monster@@Base>:
  404ac0:	push   rbp
  404ac1:	push   rbx
  404ac2:	sub    rsp,0x18
  404ac6:	mov    rbx,rdi
  404ac9:	mov    DWORD PTR [rsp+0x14],0x0
  404ad1:	call   40e0f0 <flatcc_builder_reset@@Base>
  404ad6:	lea    rsi,[rip+0x106f5]        # 4151d2 <_IO_stdin_used@@Base+0x1d2>
  404add:	mov    rdi,rbx
  404ae0:	xor    edx,edx
  404ae2:	xor    ecx,ecx
  404ae4:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  404ae9:	mov    rdi,rbx
  404aec:	mov    esi,0x24
  404af1:	call   40ff20 <flatcc_builder_start_table@@Base>
  404af6:	lea    rsi,[rip+0x1068f]        # 41518c <_IO_stdin_used@@Base+0x18c>
  404afd:	mov    rdi,rbx
  404b00:	call   412170 <flatcc_builder_create_string_str@@Base>
  404b05:	test   eax,eax
  404b07:	je     404b1f <test_typed_empty_monster@@Base+0x5f>
  404b09:	mov    ebp,eax
  404b0b:	mov    rdi,rbx
  404b0e:	mov    esi,0x3
  404b13:	call   411140 <flatcc_builder_table_add_offset@@Base>
  404b18:	test   rax,rax
  404b1b:	je     404b1f <test_typed_empty_monster@@Base+0x5f>
  404b1d:	mov    DWORD PTR [rax],ebp
  404b1f:	lea    rsi,[rip+0x10612]        # 415138 <_IO_stdin_used@@Base+0x138>
  404b26:	mov    rdi,rbx
  404b29:	mov    edx,0x1
  404b2e:	call   4108c0 <flatcc_builder_check_required@@Base>
  404b33:	test   eax,eax
  404b35:	je     404cd1 <test_typed_empty_monster@@Base+0x211>
  404b3b:	mov    rdi,rbx
  404b3e:	call   410930 <flatcc_builder_end_table@@Base>
  404b43:	mov    rdi,rbx
  404b46:	mov    esi,eax
  404b48:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  404b4d:	lea    rsi,[rsp+0x8]
  404b52:	mov    rdi,rbx
  404b55:	call   412610 <flatcc_builder_finalize_aligned_buffer@@Base>
  404b5a:	mov    rbx,rax
  404b5d:	mov    rdx,QWORD PTR [rsp+0x8]
  404b62:	mov    rax,QWORD PTR [rip+0x1948f]        # 41dff8 <stderr@GLIBC_2.2.5>
  404b69:	mov    rcx,QWORD PTR [rax]
  404b6c:	lea    rdi,[rip+0x10664]        # 4151d7 <_IO_stdin_used@@Base+0x1d7>
  404b73:	mov    rsi,rbx
  404b76:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  404b7b:	mov    esi,DWORD PTR [rbx+0x4]
  404b7e:	cmp    rsi,0x330ef481
  404b85:	jne    404bed <test_typed_empty_monster@@Base+0x12d>
  404b87:	lea    rdi,[rip+0x12576]        # 417104 <_IO_stdin_used@@Base+0x2104>
  404b8e:	call   404060 <puts@plt>
  404b93:	mov    rsi,QWORD PTR [rsp+0x8]
  404b98:	lea    rdx,[rip+0x10633]        # 4151d2 <_IO_stdin_used@@Base+0x1d2>
  404b9f:	lea    rcx,[rip+0x863a]        # 40d1e0 <main@@Base+0x310>
  404ba6:	mov    rdi,rbx
  404ba9:	call   413990 <flatcc_verify_table_as_root@@Base>
  404bae:	test   eax,eax
  404bb0:	jne    404bd1 <test_typed_empty_monster@@Base+0x111>
  404bb2:	mov    rsi,QWORD PTR [rsp+0x8]
  404bb7:	lea    rdx,[rip+0x10614]        # 4151d2 <_IO_stdin_used@@Base+0x1d2>
  404bbe:	lea    rcx,[rip+0x861b]        # 40d1e0 <main@@Base+0x310>
  404bc5:	mov    rdi,rbx
  404bc8:	call   413990 <flatcc_verify_table_as_root@@Base>
  404bcd:	test   eax,eax
  404bcf:	je     404c11 <test_typed_empty_monster@@Base+0x151>
  404bd1:	mov    ebp,eax
  404bd3:	mov    edi,eax
  404bd5:	call   412e60 <flatcc_verify_error_string@@Base>
  404bda:	lea    rdi,[rip+0x10642]        # 415223 <_IO_stdin_used@@Base+0x223>
  404be1:	mov    rsi,rax
  404be4:	xor    eax,eax
  404be6:	call   404080 <printf@plt>
  404beb:	jmp    404c00 <test_typed_empty_monster@@Base+0x140>
  404bed:	lea    rdi,[rip+0x105fd]        # 4151f1 <_IO_stdin_used@@Base+0x1f1>
  404bf4:	xor    eax,eax
  404bf6:	call   404080 <printf@plt>
  404bfb:	mov    ebp,0xffffffff
  404c00:	mov    rdi,rbx
  404c03:	call   412740 <flatcc_builder_aligned_free@@Base>
  404c08:	mov    eax,ebp
  404c0a:	add    rsp,0x18
  404c0e:	pop    rbx
  404c0f:	pop    rbp
  404c10:	ret    
  404c11:	mov    rsi,QWORD PTR [rsp+0x8]
  404c16:	lea    rcx,[rip+0x85c3]        # 40d1e0 <main@@Base+0x310>
  404c1d:	mov    rdi,rbx
  404c20:	mov    edx,0x330ef481
  404c25:	call   413b00 <flatcc_verify_table_as_typed_root@@Base>
  404c2a:	test   eax,eax
  404c2c:	je     404c40 <test_typed_empty_monster@@Base+0x180>
  404c2e:	mov    ebp,eax
  404c30:	mov    edi,eax
  404c32:	call   412e60 <flatcc_verify_error_string@@Base>
  404c37:	lea    rdi,[rip+0x10613]        # 415251 <_IO_stdin_used@@Base+0x251>
  404c3e:	jmp    404be1 <test_typed_empty_monster@@Base+0x121>
  404c40:	mov    rsi,QWORD PTR [rsp+0x8]
  404c45:	lea    rcx,[rip+0x8594]        # 40d1e0 <main@@Base+0x310>
  404c4c:	mov    rdi,rbx
  404c4f:	mov    edx,0x330ef481
  404c54:	call   413b00 <flatcc_verify_table_as_typed_root@@Base>
  404c59:	test   eax,eax
  404c5b:	je     404c72 <test_typed_empty_monster@@Base+0x1b2>
  404c5d:	mov    ebp,eax
  404c5f:	mov    edi,eax
  404c61:	call   412e60 <flatcc_verify_error_string@@Base>
  404c66:	lea    rdi,[rip+0x1061b]        # 415288 <_IO_stdin_used@@Base+0x288>
  404c6d:	jmp    404be1 <test_typed_empty_monster@@Base+0x121>
  404c72:	mov    DWORD PTR [rsp+0x14],0x330ef481
  404c7a:	mov    rsi,QWORD PTR [rsp+0x8]
  404c7f:	lea    rcx,[rip+0x855a]        # 40d1e0 <main@@Base+0x310>
  404c86:	lea    rdx,[rsp+0x14]
  404c8b:	mov    rdi,rbx
  404c8e:	call   413990 <flatcc_verify_table_as_root@@Base>
  404c93:	test   eax,eax
  404c95:	jne    404bd1 <test_typed_empty_monster@@Base+0x111>
  404c9b:	mov    rsi,QWORD PTR [rsp+0x8]
  404ca0:	lea    rdx,[rip+0x104a1]        # 415148 <_IO_stdin_used@@Base+0x148>
  404ca7:	lea    rcx,[rip+0x8532]        # 40d1e0 <main@@Base+0x310>
  404cae:	mov    rdi,rbx
  404cb1:	call   413990 <flatcc_verify_table_as_root@@Base>
  404cb6:	xor    ebp,ebp
  404cb8:	test   eax,eax
  404cba:	jne    404c00 <test_typed_empty_monster@@Base+0x140>
  404cc0:	lea    rdi,[rip+0x12303]        # 416fca <_IO_stdin_used@@Base+0x1fca>
  404cc7:	call   404060 <puts@plt>
  404ccc:	jmp    404c00 <test_typed_empty_monster@@Base+0x140>
  404cd1:	lea    rdi,[rip+0x1140e]        # 4160e6 <_IO_stdin_used@@Base+0x10e6>
  404cd8:	lea    rsi,[rip+0x112cb]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  404cdf:	lea    rcx,[rip+0x114a2]        # 416188 <_IO_stdin_used@@Base+0x1188>
  404ce6:	mov    edx,0xeb
  404ceb:	call   4040a0 <__assert_fail@plt>

0000000000404cf0 <verify_table_with_emptystruct@@Base>:
  404cf0:	push   rax
  404cf1:	mov    rax,rdi
  404cf4:	lea    rdi,[rip+0x12318]        # 417013 <_IO_stdin_used@@Base+0x2013>
  404cfb:	test   rax,rax
  404cfe:	je     404d35 <verify_table_with_emptystruct@@Base+0x45>
  404d00:	cmp    DWORD PTR [rax+0x4],0x534e4f4d
  404d07:	jne    404d35 <verify_table_with_emptystruct@@Base+0x45>
  404d09:	mov    edx,DWORD PTR [rax]
  404d0b:	lea    rcx,[rax+rdx*1]
  404d0f:	movsxd rdx,DWORD PTR [rax+rdx*1]
  404d13:	mov    rax,rcx
  404d16:	sub    rax,rdx
  404d19:	lea    rdi,[rip+0x12318]        # 417038 <_IO_stdin_used@@Base+0x2038>
  404d20:	cmp    WORD PTR [rax],0x6
  404d24:	jb     404d35 <verify_table_with_emptystruct@@Base+0x45>
  404d26:	neg    rdx
  404d29:	xor    eax,eax
  404d2b:	cmp    WORD PTR [rcx+rdx*1+0x4],0x0
  404d31:	je     404d35 <verify_table_with_emptystruct@@Base+0x45>
  404d33:	pop    rcx
  404d34:	ret    
  404d35:	call   404060 <puts@plt>
  404d3a:	mov    eax,0xffffffff
  404d3f:	pop    rcx
  404d40:	ret    
  404d41:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404d4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404d50 <test_table_with_emptystruct@@Base>:
  404d50:	push   rbp
  404d51:	push   r14
  404d53:	push   rbx
  404d54:	sub    rsp,0x10
  404d58:	mov    rbx,rdi
  404d5b:	call   40e0f0 <flatcc_builder_reset@@Base>
  404d60:	lea    rsi,[rip+0x103e1]        # 415148 <_IO_stdin_used@@Base+0x148>
  404d67:	xor    r14d,r14d
  404d6a:	mov    rdi,rbx
  404d6d:	xor    edx,edx
  404d6f:	xor    ecx,ecx
  404d71:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  404d76:	test   eax,eax
  404d78:	jne    404dd3 <test_table_with_emptystruct@@Base+0x83>
  404d7a:	mov    rdi,rbx
  404d7d:	mov    esi,0x1
  404d82:	call   40ff20 <flatcc_builder_start_table@@Base>
  404d87:	test   eax,eax
  404d89:	jne    404dc8 <test_table_with_emptystruct@@Base+0x78>
  404d8b:	xor    r14d,r14d
  404d8e:	mov    rdi,rbx
  404d91:	xor    esi,esi
  404d93:	xor    edx,edx
  404d95:	mov    ecx,0x1
  404d9a:	call   4112a0 <flatcc_builder_table_add@@Base>
  404d9f:	test   rax,rax
  404da2:	je     404dc8 <test_table_with_emptystruct@@Base+0x78>
  404da4:	lea    rsi,[rip+0x10391]        # 41513c <_IO_stdin_used@@Base+0x13c>
  404dab:	mov    rdi,rbx
  404dae:	xor    edx,edx
  404db0:	call   4108c0 <flatcc_builder_check_required@@Base>
  404db5:	test   eax,eax
  404db7:	je     404e5f <test_table_with_emptystruct@@Base+0x10f>
  404dbd:	mov    rdi,rbx
  404dc0:	call   410930 <flatcc_builder_end_table@@Base>
  404dc5:	mov    r14d,eax
  404dc8:	mov    rdi,rbx
  404dcb:	mov    esi,r14d
  404dce:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  404dd3:	lea    rsi,[rsp+0x8]
  404dd8:	mov    rdi,rbx
  404ddb:	call   412610 <flatcc_builder_finalize_aligned_buffer@@Base>
  404de0:	mov    rbx,rax
  404de3:	mov    rdx,QWORD PTR [rsp+0x8]
  404de8:	mov    rax,QWORD PTR [rip+0x19209]        # 41dff8 <stderr@GLIBC_2.2.5>
  404def:	mov    rcx,QWORD PTR [rax]
  404df2:	lea    rdi,[rip+0x104d5]        # 4152ce <_IO_stdin_used@@Base+0x2ce>
  404df9:	mov    rsi,rbx
  404dfc:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  404e01:	lea    rdi,[rip+0x1220b]        # 417013 <_IO_stdin_used@@Base+0x2013>
  404e08:	test   rbx,rbx
  404e0b:	je     404e42 <test_table_with_emptystruct@@Base+0xf2>
  404e0d:	cmp    DWORD PTR [rbx+0x4],0x534e4f4d
  404e14:	jne    404e42 <test_table_with_emptystruct@@Base+0xf2>
  404e16:	mov    ecx,DWORD PTR [rbx]
  404e18:	mov    rax,rbx
  404e1b:	add    rax,rcx
  404e1e:	movsxd rcx,DWORD PTR [rbx+rcx*1]
  404e22:	mov    rdx,rax
  404e25:	sub    rdx,rcx
  404e28:	lea    rdi,[rip+0x12209]        # 417038 <_IO_stdin_used@@Base+0x2038>
  404e2f:	cmp    WORD PTR [rdx],0x6
  404e33:	jb     404e42 <test_table_with_emptystruct@@Base+0xf2>
  404e35:	neg    rcx
  404e38:	xor    ebp,ebp
  404e3a:	cmp    WORD PTR [rax+rcx*1+0x4],0x0
  404e40:	jne    404e4c <test_table_with_emptystruct@@Base+0xfc>
  404e42:	call   404060 <puts@plt>
  404e47:	mov    ebp,0xffffffff
  404e4c:	mov    rdi,rbx
  404e4f:	call   412740 <flatcc_builder_aligned_free@@Base>
  404e54:	mov    eax,ebp
  404e56:	add    rsp,0x10
  404e5a:	pop    rbx
  404e5b:	pop    r14
  404e5d:	pop    rbp
  404e5e:	ret    
  404e5f:	lea    rdi,[rip+0x11373]        # 4161d9 <_IO_stdin_used@@Base+0x11d9>
  404e66:	lea    rsi,[rip+0x1113d]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  404e6d:	lea    rcx,[rip+0x11422]        # 416296 <_IO_stdin_used@@Base+0x1296>
  404e74:	mov    edx,0xd7
  404e79:	call   4040a0 <__assert_fail@plt>
  404e7e:	xchg   ax,ax

0000000000404e80 <test_typed_table_with_emptystruct@@Base>:
  404e80:	push   r14
  404e82:	push   rbx
  404e83:	push   rax
  404e84:	mov    rbx,rdi
  404e87:	call   40e0f0 <flatcc_builder_reset@@Base>
  404e8c:	lea    rsi,[rip+0x10453]        # 4152e6 <_IO_stdin_used@@Base+0x2e6>
  404e93:	xor    r14d,r14d
  404e96:	mov    rdi,rbx
  404e99:	xor    edx,edx
  404e9b:	xor    ecx,ecx
  404e9d:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  404ea2:	test   eax,eax
  404ea4:	jne    404eff <test_typed_table_with_emptystruct@@Base+0x7f>
  404ea6:	mov    rdi,rbx
  404ea9:	mov    esi,0x1
  404eae:	call   40ff20 <flatcc_builder_start_table@@Base>
  404eb3:	test   eax,eax
  404eb5:	jne    404ef4 <test_typed_table_with_emptystruct@@Base+0x74>
  404eb7:	xor    r14d,r14d
  404eba:	mov    rdi,rbx
  404ebd:	xor    esi,esi
  404ebf:	xor    edx,edx
  404ec1:	mov    ecx,0x1
  404ec6:	call   4112a0 <flatcc_builder_table_add@@Base>
  404ecb:	test   rax,rax
  404ece:	je     404ef4 <test_typed_table_with_emptystruct@@Base+0x74>
  404ed0:	lea    rsi,[rip+0x10265]        # 41513c <_IO_stdin_used@@Base+0x13c>
  404ed7:	mov    rdi,rbx
  404eda:	xor    edx,edx
  404edc:	call   4108c0 <flatcc_builder_check_required@@Base>
  404ee1:	test   eax,eax
  404ee3:	je     404fcf <test_typed_table_with_emptystruct@@Base+0x14f>
  404ee9:	mov    rdi,rbx
  404eec:	call   410930 <flatcc_builder_end_table@@Base>
  404ef1:	mov    r14d,eax
  404ef4:	mov    rdi,rbx
  404ef7:	mov    esi,r14d
  404efa:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  404eff:	mov    rsi,rsp
  404f02:	mov    rdi,rbx
  404f05:	call   4124d0 <flatcc_builder_get_direct_buffer@@Base>
  404f0a:	mov    rbx,rax
  404f0d:	mov    rdx,QWORD PTR [rsp]
  404f11:	mov    rax,QWORD PTR [rip+0x190e0]        # 41dff8 <stderr@GLIBC_2.2.5>
  404f18:	mov    rcx,QWORD PTR [rax]
  404f1b:	lea    rdi,[rip+0x103a6]        # 4152c8 <_IO_stdin_used@@Base+0x2c8>
  404f22:	mov    rsi,rbx
  404f25:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  404f2a:	mov    rsi,QWORD PTR [rsp]
  404f2e:	lea    rdx,[rip+0x103b1]        # 4152e6 <_IO_stdin_used@@Base+0x2e6>
  404f35:	lea    rcx,[rip+0x8b54]        # 40da90 <main@@Base+0xbc0>
  404f3c:	mov    rdi,rbx
  404f3f:	call   413990 <flatcc_verify_table_as_root@@Base>
  404f44:	test   eax,eax
  404f46:	je     404f51 <test_typed_table_with_emptystruct@@Base+0xd1>
  404f48:	lea    rdi,[rip+0x1216d]        # 4170bc <_IO_stdin_used@@Base+0x20bc>
  404f4f:	jmp    404f9b <test_typed_table_with_emptystruct@@Base+0x11b>
  404f51:	mov    rsi,QWORD PTR [rsp]
  404f55:	lea    rdx,[rip+0x1038a]        # 4152e6 <_IO_stdin_used@@Base+0x2e6>
  404f5c:	lea    rcx,[rip+0x8b2d]        # 40da90 <main@@Base+0xbc0>
  404f63:	mov    rdi,rbx
  404f66:	call   413990 <flatcc_verify_table_as_root@@Base>
  404f6b:	test   eax,eax
  404f6d:	je     404f78 <test_typed_table_with_emptystruct@@Base+0xf8>
  404f6f:	lea    rdi,[rip+0x1212a]        # 4170a0 <_IO_stdin_used@@Base+0x20a0>
  404f76:	jmp    404f9b <test_typed_table_with_emptystruct@@Base+0x11b>
  404f78:	mov    rsi,QWORD PTR [rsp]
  404f7c:	lea    rcx,[rip+0x8b0d]        # 40da90 <main@@Base+0xbc0>
  404f83:	mov    rdi,rbx
  404f86:	mov    edx,0xb0dd37b6
  404f8b:	call   413b00 <flatcc_verify_table_as_typed_root@@Base>
  404f90:	test   eax,eax
  404f92:	je     404fad <test_typed_table_with_emptystruct@@Base+0x12d>
  404f94:	lea    rdi,[rip+0x120e0]        # 41707b <_IO_stdin_used@@Base+0x207b>
  404f9b:	call   404060 <puts@plt>
  404fa0:	mov    eax,0xffffffff
  404fa5:	add    rsp,0x8
  404fa9:	pop    rbx
  404faa:	pop    r14
  404fac:	ret    
  404fad:	test   rbx,rbx
  404fb0:	je     404fc6 <test_typed_table_with_emptystruct@@Base+0x146>
  404fb2:	xor    eax,eax
  404fb4:	cmp    DWORD PTR [rbx+0x4],0xb0dd37b6
  404fbb:	je     404fa5 <test_typed_table_with_emptystruct@@Base+0x125>
  404fbd:	lea    rdi,[rip+0x120a7]        # 41706b <_IO_stdin_used@@Base+0x206b>
  404fc4:	jmp    404f9b <test_typed_table_with_emptystruct@@Base+0x11b>
  404fc6:	lea    rdi,[rip+0x12086]        # 417053 <_IO_stdin_used@@Base+0x2053>
  404fcd:	jmp    404f9b <test_typed_table_with_emptystruct@@Base+0x11b>
  404fcf:	lea    rdi,[rip+0x11203]        # 4161d9 <_IO_stdin_used@@Base+0x11d9>
  404fd6:	lea    rsi,[rip+0x10fcd]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  404fdd:	lea    rcx,[rip+0x112b2]        # 416296 <_IO_stdin_used@@Base+0x1296>
  404fe4:	mov    edx,0xd7
  404fe9:	call   4040a0 <__assert_fail@plt>
  404fee:	xchg   ax,ax

0000000000404ff0 <verify_monster@@Base>:
  404ff0:	push   rbp
  404ff1:	push   r15
  404ff3:	push   r14
  404ff5:	push   r13
  404ff7:	push   r12
  404ff9:	push   rbx
  404ffa:	push   rax
  404ffb:	cmp    DWORD PTR [rdi+0x4],0x534e4f4d
  405002:	jne    405067 <verify_monster@@Base+0x77>
  405004:	mov    ebx,DWORD PTR [rdi]
  405006:	add    rbx,rdi
  405009:	je     405079 <verify_monster@@Base+0x89>
  40500b:	movsxd rax,DWORD PTR [rbx]
  40500e:	mov    rcx,rbx
  405011:	sub    rcx,rax
  405014:	cmp    WORD PTR [rcx],0xa
  405018:	jb     405070 <verify_monster@@Base+0x80>
  40501a:	neg    rax
  40501d:	movzx  ecx,WORD PTR [rbx+rax*1+0x8]
  405022:	test   rcx,rcx
  405025:	je     405070 <verify_monster@@Base+0x80>
  405027:	cmp    WORD PTR [rbx+rcx*1],0x50
  40502c:	jne    405070 <verify_monster@@Base+0x80>
  40502e:	movzx  ebp,WORD PTR [rbx+rax*1+0x4]
  405033:	test   rbp,rbp
  405036:	je     405099 <verify_monster@@Base+0xa9>
  405038:	add    rbp,rbx
  40503b:	test   bpl,0xf
  40503f:	je     40504d <verify_monster@@Base+0x5d>
  405041:	lea    rdi,[rip+0x124a5]        # 4174ed <_IO_stdin_used@@Base+0x24ed>
  405048:	call   404060 <puts@plt>
  40504d:	vmovss xmm0,DWORD PTR [rbp+0x8]
  405052:	vucomiss xmm0,DWORD PTR [rip+0xffae]        # 415008 <_IO_stdin_used@@Base+0x8>
  40505a:	jne    40505e <verify_monster@@Base+0x6e>
  40505c:	jnp    4050a2 <verify_monster@@Base+0xb2>
  40505e:	lea    rdi,[rip+0x12467]        # 4174cc <_IO_stdin_used@@Base+0x24cc>
  405065:	jmp    405080 <verify_monster@@Base+0x90>
  405067:	lea    rdi,[rip+0x1206d]        # 4170db <_IO_stdin_used@@Base+0x20db>
  40506e:	jmp    405080 <verify_monster@@Base+0x90>
  405070:	lea    rdi,[rip+0x1249d]        # 417514 <_IO_stdin_used@@Base+0x2514>
  405077:	jmp    405080 <verify_monster@@Base+0x90>
  405079:	lea    rdi,[rip+0x12084]        # 417104 <_IO_stdin_used@@Base+0x2104>
  405080:	call   404060 <puts@plt>
  405085:	mov    eax,0xffffffff
  40508a:	add    rsp,0x8
  40508e:	pop    rbx
  40508f:	pop    r12
  405091:	pop    r13
  405093:	pop    r14
  405095:	pop    r15
  405097:	pop    rbp
  405098:	ret    
  405099:	lea    rdi,[rip+0x1207a]        # 41711a <_IO_stdin_used@@Base+0x211a>
  4050a0:	jmp    405080 <verify_monster@@Base+0x90>
  4050a2:	vmovss xmm0,DWORD PTR [rbp+0x0]
  4050a7:	vucomiss xmm0,DWORD PTR [rip+0xff5d]        # 41500c <_IO_stdin_used@@Base+0xc>
  4050af:	jne    4050c4 <verify_monster@@Base+0xd4>
  4050b1:	jp     4050c4 <verify_monster@@Base+0xd4>
  4050b3:	vmovss xmm0,DWORD PTR [rbp+0x4]
  4050b8:	vucomiss xmm0,DWORD PTR [rip+0xff50]        # 415010 <_IO_stdin_used@@Base+0x10>
  4050c0:	jne    4050c4 <verify_monster@@Base+0xd4>
  4050c2:	jnp    4050cd <verify_monster@@Base+0xdd>
  4050c4:	lea    rdi,[rip+0x123eb]        # 4174b6 <_IO_stdin_used@@Base+0x24b6>
  4050cb:	jmp    405080 <verify_monster@@Base+0x90>
  4050cd:	vmovsd xmm0,QWORD PTR [rbp+0x10]
  4050d2:	vxorps xmm1,xmm1,xmm1
  4050d6:	vucomisd xmm0,xmm1
  4050da:	jne    4050e4 <verify_monster@@Base+0xf4>
  4050dc:	jp     4050e4 <verify_monster@@Base+0xf4>
  4050de:	cmp    DWORD PTR [rbp+0x1a],0x0
  4050e2:	je     4050ed <verify_monster@@Base+0xfd>
  4050e4:	lea    rdi,[rip+0x123a7]        # 417492 <_IO_stdin_used@@Base+0x2492>
  4050eb:	jmp    405080 <verify_monster@@Base+0x90>
  4050ed:	movsxd r15,DWORD PTR [rbx]
  4050f0:	mov    rax,rbx
  4050f3:	sub    rax,r15
  4050f6:	movzx  ebp,WORD PTR [rax]
  4050f9:	cmp    bp,0xc
  4050fd:	jb     405a41 <verify_monster@@Base+0xa51>
  405103:	neg    r15
  405106:	movzx  eax,WORD PTR [rbx+r15*1+0xa]
  40510c:	test   rax,rax
  40510f:	je     405a41 <verify_monster@@Base+0xa51>
  405115:	lea    rcx,[rbx+rax*1]
  405119:	mov    eax,DWORD PTR [rbx+rax*1]
  40511c:	lea    r14,[rax+rcx*1]
  405120:	add    r14,0x4
  405124:	lea    rsi,[rip+0x10061]        # 41518c <_IO_stdin_used@@Base+0x18c>
  40512b:	mov    rdi,r14
  40512e:	call   4040e0 <strcmp@plt>
  405133:	test   eax,eax
  405135:	je     405143 <verify_monster@@Base+0x153>
  405137:	lea    rdi,[rip+0x11fef]        # 41712d <_IO_stdin_used@@Base+0x212d>
  40513e:	jmp    405080 <verify_monster@@Base+0x90>
  405143:	cmp    DWORD PTR [r14-0x4],0x9
  405148:	jne    40524e <verify_monster@@Base+0x25e>
  40514e:	cmp    bp,0x12
  405152:	jb     40525a <verify_monster@@Base+0x26a>
  405158:	movzx  eax,WORD PTR [rbx+r15*1+0x10]
  40515e:	test   rax,rax
  405161:	je     40525a <verify_monster@@Base+0x26a>
  405167:	cmp    BYTE PTR [rbx+rax*1],0x2
  40516b:	jne    40525a <verify_monster@@Base+0x26a>
  405171:	movzx  ecx,WORD PTR [rbx+r15*1+0xe]
  405177:	test   rcx,rcx
  40517a:	je     405266 <verify_monster@@Base+0x276>
  405180:	lea    rax,[rbx+rcx*1]
  405184:	mov    ecx,DWORD PTR [rbx+rcx*1]
  405187:	cmp    DWORD PTR [rcx+rax*1],0xa
  40518b:	jne    405266 <verify_monster@@Base+0x276>
  405191:	xor    esi,esi
  405193:	cmp    BYTE PTR [rax+rcx*1+0x4],0x0
  405198:	jne    405272 <verify_monster@@Base+0x282>
  40519e:	mov    esi,0x1
  4051a3:	cmp    BYTE PTR [rax+rcx*1+0x5],0x1
  4051a8:	jne    405272 <verify_monster@@Base+0x282>
  4051ae:	mov    esi,0x2
  4051b3:	cmp    BYTE PTR [rax+rcx*1+0x6],0x2
  4051b8:	jne    405272 <verify_monster@@Base+0x282>
  4051be:	mov    esi,0x3
  4051c3:	cmp    BYTE PTR [rax+rcx*1+0x7],0x3
  4051c8:	jne    405272 <verify_monster@@Base+0x282>
  4051ce:	mov    esi,0x4
  4051d3:	cmp    BYTE PTR [rax+rcx*1+0x8],0x4
  4051d8:	jne    405272 <verify_monster@@Base+0x282>
  4051de:	mov    esi,0x5
  4051e3:	cmp    BYTE PTR [rax+rcx*1+0x9],0x5
  4051e8:	jne    405272 <verify_monster@@Base+0x282>
  4051ee:	mov    esi,0x6
  4051f3:	cmp    BYTE PTR [rax+rcx*1+0xa],0x6
  4051f8:	jne    405272 <verify_monster@@Base+0x282>
  4051fa:	mov    esi,0x7
  4051ff:	cmp    BYTE PTR [rax+rcx*1+0xb],0x7
  405204:	jne    405272 <verify_monster@@Base+0x282>
  405206:	mov    esi,0x8
  40520b:	cmp    BYTE PTR [rax+rcx*1+0xc],0x8
  405210:	jne    405272 <verify_monster@@Base+0x282>
  405212:	mov    esi,0x9
  405217:	cmp    BYTE PTR [rax+rcx*1+0xd],0x9
  40521c:	jne    405272 <verify_monster@@Base+0x282>
  40521e:	cmp    bp,0x7
  405222:	jbe    405411 <verify_monster@@Base+0x421>
  405228:	movzx  eax,WORD PTR [rbx+r15*1+0x6]
  40522e:	test   rax,rax
  405231:	je     405285 <verify_monster@@Base+0x295>
  405233:	movzx  eax,WORD PTR [rbx+rax*1]
  405237:	cmp    eax,0x96
  40523c:	jne    40541d <verify_monster@@Base+0x42d>
  405242:	lea    rdi,[rip+0x121cf]        # 417418 <_IO_stdin_used@@Base+0x2418>
  405249:	jmp    405080 <verify_monster@@Base+0x90>
  40524e:	lea    rdi,[rip+0x12222]        # 417477 <_IO_stdin_used@@Base+0x2477>
  405255:	jmp    405080 <verify_monster@@Base+0x90>
  40525a:	lea    rdi,[rip+0x121f8]        # 417459 <_IO_stdin_used@@Base+0x2459>
  405261:	jmp    405080 <verify_monster@@Base+0x90>
  405266:	lea    rdi,[rip+0x121d0]        # 41743d <_IO_stdin_used@@Base+0x243d>
  40526d:	jmp    405080 <verify_monster@@Base+0x90>
  405272:	lea    rdi,[rip+0x10072]        # 4152eb <_IO_stdin_used@@Base+0x2eb>
  405279:	xor    eax,eax
  40527b:	call   404080 <printf@plt>
  405280:	jmp    405085 <verify_monster@@Base+0x95>
  405285:	cmp    bp,0xa
  405289:	jb     405411 <verify_monster@@Base+0x421>
  40528f:	cmp    WORD PTR [rbx+r15*1+0x8],0x0
  405296:	je     405411 <verify_monster@@Base+0x421>
  40529c:	cmp    WORD PTR [rbx+r15*1+0x4],0x0
  4052a3:	je     405435 <verify_monster@@Base+0x445>
  4052a9:	cmp    bp,0x18
  4052ad:	jb     405429 <verify_monster@@Base+0x439>
  4052b3:	movzx  ecx,WORD PTR [rbx+r15*1+0x16]
  4052b9:	test   rcx,rcx
  4052bc:	je     405429 <verify_monster@@Base+0x439>
  4052c2:	lea    rax,[rbx+rcx*1]
  4052c6:	mov    ecx,DWORD PTR [rbx+rcx*1]
  4052c9:	cmp    DWORD PTR [rcx+rax*1],0x5
  4052cd:	jne    405429 <verify_monster@@Base+0x439>
  4052d3:	xor    esi,esi
  4052d5:	cmp    WORD PTR [rax+rcx*1+0x4],0x10
  4052db:	jne    405441 <verify_monster@@Base+0x451>
  4052e1:	xor    esi,esi
  4052e3:	cmp    BYTE PTR [rax+rcx*1+0x6],0x20
  4052e8:	jne    405441 <verify_monster@@Base+0x451>
  4052ee:	mov    esi,0x1
  4052f3:	cmp    WORD PTR [rax+rcx*1+0x8],0x30
  4052f9:	jne    405441 <verify_monster@@Base+0x451>
  4052ff:	mov    esi,0x1
  405304:	cmp    BYTE PTR [rax+rcx*1+0xa],0x40
  405309:	jne    405441 <verify_monster@@Base+0x451>
  40530f:	mov    esi,0x2
  405314:	cmp    WORD PTR [rax+rcx*1+0xc],0x50
  40531a:	jne    405441 <verify_monster@@Base+0x451>
  405320:	mov    esi,0x2
  405325:	cmp    BYTE PTR [rax+rcx*1+0xe],0x60
  40532a:	jne    405441 <verify_monster@@Base+0x451>
  405330:	mov    esi,0x3
  405335:	cmp    WORD PTR [rax+rcx*1+0x10],0x70
  40533b:	jne    405441 <verify_monster@@Base+0x451>
  405341:	mov    esi,0x3
  405346:	cmp    BYTE PTR [rax+rcx*1+0x12],0x80
  40534b:	jne    405441 <verify_monster@@Base+0x451>
  405351:	movzx  edx,WORD PTR [rax+rcx*1+0x14]
  405356:	mov    esi,0x4
  40535b:	cmp    edx,0x191
  405361:	jne    405441 <verify_monster@@Base+0x451>
  405367:	mov    esi,0x4
  40536c:	cmp    BYTE PTR [rax+rcx*1+0x16],0x91
  405371:	jne    405441 <verify_monster@@Base+0x451>
  405377:	cmp    bp,0x1b
  40537b:	jbe    40544d <verify_monster@@Base+0x45d>
  405381:	movzx  eax,WORD PTR [rbx+r15*1+0x1a]
  405387:	test   rax,rax
  40538a:	je     40544d <verify_monster@@Base+0x45d>
  405390:	lea    rcx,[rbx+rax*1]
  405394:	mov    eax,DWORD PTR [rbx+rax*1]
  405397:	cmp    DWORD PTR [rax+rcx*1],0x8
  40539b:	jne    40544d <verify_monster@@Base+0x45d>
  4053a1:	lea    r12,[rax+rcx*1]
  4053a5:	add    r12,0x4
  4053a9:	mov    eax,DWORD PTR [r12+0x14]
  4053ae:	lea    r13,[r12+rax*1]
  4053b2:	add    r13,0x14
  4053b6:	movsxd r14,DWORD PTR [r12+rax*1+0x14]
  4053bb:	mov    rax,r13
  4053be:	sub    rax,r14
  4053c1:	cmp    WORD PTR [rax],0xc
  4053c5:	jb     405a41 <verify_monster@@Base+0xa51>
  4053cb:	neg    r14
  4053ce:	movzx  eax,WORD PTR [r13+r14*1+0xa]
  4053d4:	test   rax,rax
  4053d7:	je     405a41 <verify_monster@@Base+0xa51>
  4053dd:	lea    rcx,[rax+r13*1]
  4053e1:	mov    eax,DWORD PTR [r13+rax*1+0x0]
  4053e6:	lea    rdi,[rax+rcx*1]
  4053ea:	add    rdi,0x4
  4053ee:	lea    rsi,[rip+0xffba]        # 4153af <_IO_stdin_used@@Base+0x3af>
  4053f5:	call   4040e0 <strcmp@plt>
  4053fa:	test   eax,eax
  4053fc:	je     405459 <verify_monster@@Base+0x469>
  4053fe:	lea    rdi,[rip+0xff9a]        # 41539f <_IO_stdin_used@@Base+0x39f>
  405405:	xor    eax,eax
  405407:	call   404080 <printf@plt>
  40540c:	jmp    405085 <verify_monster@@Base+0x95>
  405411:	lea    rdi,[rip+0x11d29]        # 417141 <_IO_stdin_used@@Base+0x2141>
  405418:	jmp    405080 <verify_monster@@Base+0x90>
  40541d:	lea    rdi,[rip+0x12008]        # 41742c <_IO_stdin_used@@Base+0x242c>
  405424:	jmp    405080 <verify_monster@@Base+0x90>
  405429:	lea    rdi,[rip+0x11fc2]        # 4173f2 <_IO_stdin_used@@Base+0x23f2>
  405430:	jmp    405080 <verify_monster@@Base+0x90>
  405435:	lea    rdi,[rip+0x11d25]        # 417161 <_IO_stdin_used@@Base+0x2161>
  40543c:	jmp    405080 <verify_monster@@Base+0x90>
  405441:	lea    rdi,[rip+0xfec0]        # 415308 <_IO_stdin_used@@Base+0x308>
  405448:	jmp    405279 <verify_monster@@Base+0x289>
  40544d:	lea    rdi,[rip+0x11f7d]        # 4173d1 <_IO_stdin_used@@Base+0x23d1>
  405454:	jmp    405080 <verify_monster@@Base+0x90>
  405459:	mov    eax,DWORD PTR [r12+0x4]
  40545e:	add    rax,r12
  405461:	add    rax,0x4
  405465:	cmp    rax,r13
  405468:	je     405476 <verify_monster@@Base+0x486>
  40546a:	lea    rdi,[rip+0x11f2b]        # 41739c <_IO_stdin_used@@Base+0x239c>
  405471:	jmp    405080 <verify_monster@@Base+0x90>
  405476:	cmp    WORD PTR [rax+r14*1],0xc
  40547c:	jb     405a41 <verify_monster@@Base+0xa51>
  405482:	movzx  ecx,WORD PTR [rax+r14*1+0xa]
  405488:	test   rcx,rcx
  40548b:	je     405a41 <verify_monster@@Base+0xa51>
  405491:	lea    rdx,[rax+rcx*1]
  405495:	mov    eax,DWORD PTR [rax+rcx*1]
  405498:	lea    r14,[rax+rdx*1]
  40549c:	add    r14,0x4
  4054a0:	lea    rsi,[rip+0xff08]        # 4153af <_IO_stdin_used@@Base+0x3af>
  4054a7:	mov    rdi,r14
  4054aa:	call   4040e0 <strcmp@plt>
  4054af:	test   eax,eax
  4054b1:	je     4054bf <verify_monster@@Base+0x4cf>
  4054b3:	lea    rdi,[rip+0xfefd]        # 4153b7 <_IO_stdin_used@@Base+0x3b7>
  4054ba:	jmp    4056f7 <verify_monster@@Base+0x707>
  4054bf:	mov    ecx,DWORD PTR [r12+0x8]
  4054c4:	lea    rax,[r12+rcx*1]
  4054c8:	add    rax,0x8
  4054cc:	movsxd rcx,DWORD PTR [r12+rcx*1+0x8]
  4054d1:	mov    rdx,rax
  4054d4:	sub    rdx,rcx
  4054d7:	cmp    WORD PTR [rdx],0xc
  4054db:	jb     405a41 <verify_monster@@Base+0xa51>
  4054e1:	neg    rcx
  4054e4:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  4054e9:	test   rcx,rcx
  4054ec:	je     405a41 <verify_monster@@Base+0xa51>
  4054f2:	lea    rdx,[rax+rcx*1]
  4054f6:	mov    eax,DWORD PTR [rax+rcx*1]
  4054f9:	lea    r14,[rax+rdx*1]
  4054fd:	add    r14,0x4
  405501:	lea    rsi,[rip+0x12490]        # 417998 <_IO_stdin_used@@Base+0x2998>
  405508:	mov    rdi,r14
  40550b:	call   4040e0 <strcmp@plt>
  405510:	test   eax,eax
  405512:	je     405520 <verify_monster@@Base+0x530>
  405514:	lea    rdi,[rip+0xfebe]        # 4153d9 <_IO_stdin_used@@Base+0x3d9>
  40551b:	jmp    4056f7 <verify_monster@@Base+0x707>
  405520:	mov    ecx,DWORD PTR [r12]
  405524:	lea    rax,[r12+rcx*1]
  405528:	movsxd rcx,DWORD PTR [r12+rcx*1]
  40552c:	mov    rdx,rax
  40552f:	sub    rdx,rcx
  405532:	cmp    WORD PTR [rdx],0xc
  405536:	jb     405a41 <verify_monster@@Base+0xa51>
  40553c:	neg    rcx
  40553f:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  405544:	test   rcx,rcx
  405547:	je     405a41 <verify_monster@@Base+0xa51>
  40554d:	lea    rdx,[rax+rcx*1]
  405551:	mov    eax,DWORD PTR [rax+rcx*1]
  405554:	lea    r14,[rax+rdx*1]
  405558:	add    r14,0x4
  40555c:	lea    rsi,[rip+0x1240d]        # 417970 <_IO_stdin_used@@Base+0x2970>
  405563:	mov    rdi,r14
  405566:	call   4040e0 <strcmp@plt>
  40556b:	test   eax,eax
  40556d:	je     40557b <verify_monster@@Base+0x58b>
  40556f:	lea    rdi,[rip+0xfe85]        # 4153fb <_IO_stdin_used@@Base+0x3fb>
  405576:	jmp    4056f7 <verify_monster@@Base+0x707>
  40557b:	mov    ecx,DWORD PTR [r12+0xc]
  405580:	lea    rax,[r12+rcx*1]
  405584:	add    rax,0xc
  405588:	movsxd rcx,DWORD PTR [r12+rcx*1+0xc]
  40558d:	mov    rdx,rax
  405590:	sub    rdx,rcx
  405593:	cmp    WORD PTR [rdx],0xc
  405597:	jb     405a41 <verify_monster@@Base+0xa51>
  40559d:	neg    rcx
  4055a0:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  4055a5:	test   rcx,rcx
  4055a8:	je     405a41 <verify_monster@@Base+0xa51>
  4055ae:	lea    rdx,[rax+rcx*1]
  4055b2:	mov    eax,DWORD PTR [rax+rcx*1]
  4055b5:	lea    r14,[rax+rdx*1]
  4055b9:	add    r14,0x4
  4055bd:	lea    rsi,[rip+0xfdeb]        # 4153af <_IO_stdin_used@@Base+0x3af>
  4055c4:	mov    rdi,r14
  4055c7:	call   4040e0 <strcmp@plt>
  4055cc:	test   eax,eax
  4055ce:	je     4055dc <verify_monster@@Base+0x5ec>
  4055d0:	lea    rdi,[rip+0xfe49]        # 415420 <_IO_stdin_used@@Base+0x420>
  4055d7:	jmp    4056f7 <verify_monster@@Base+0x707>
  4055dc:	mov    ecx,DWORD PTR [r12+0x10]
  4055e1:	lea    rax,[r12+rcx*1]
  4055e5:	add    rax,0x10
  4055e9:	movsxd rcx,DWORD PTR [r12+rcx*1+0x10]
  4055ee:	mov    rdx,rax
  4055f1:	sub    rdx,rcx
  4055f4:	cmp    WORD PTR [rdx],0xc
  4055f8:	jb     405a41 <verify_monster@@Base+0xa51>
  4055fe:	neg    rcx
  405601:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  405606:	test   rcx,rcx
  405609:	je     405a41 <verify_monster@@Base+0xa51>
  40560f:	lea    rdx,[rax+rcx*1]
  405613:	mov    eax,DWORD PTR [rax+rcx*1]
  405616:	lea    r14,[rax+rdx*1]
  40561a:	add    r14,0x4
  40561e:	lea    rsi,[rip+0x12373]        # 417998 <_IO_stdin_used@@Base+0x2998>
  405625:	mov    rdi,r14
  405628:	call   4040e0 <strcmp@plt>
  40562d:	test   eax,eax
  40562f:	je     40563d <verify_monster@@Base+0x64d>
  405631:	lea    rdi,[rip+0xfe0c]        # 415444 <_IO_stdin_used@@Base+0x444>
  405638:	jmp    4056f7 <verify_monster@@Base+0x707>
  40563d:	mov    ecx,DWORD PTR [r12+0x18]
  405642:	lea    rax,[r12+rcx*1]
  405646:	add    rax,0x18
  40564a:	movsxd rcx,DWORD PTR [r12+rcx*1+0x18]
  40564f:	mov    rdx,rax
  405652:	sub    rdx,rcx
  405655:	cmp    WORD PTR [rdx],0xc
  405659:	jb     405a41 <verify_monster@@Base+0xa51>
  40565f:	neg    rcx
  405662:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  405667:	test   rcx,rcx
  40566a:	je     405a41 <verify_monster@@Base+0xa51>
  405670:	lea    rdx,[rax+rcx*1]
  405674:	mov    eax,DWORD PTR [rax+rcx*1]
  405677:	lea    r14,[rax+rdx*1]
  40567b:	add    r14,0x4
  40567f:	lea    rsi,[rip+0x122ea]        # 417970 <_IO_stdin_used@@Base+0x2970>
  405686:	mov    rdi,r14
  405689:	call   4040e0 <strcmp@plt>
  40568e:	test   eax,eax
  405690:	je     40569b <verify_monster@@Base+0x6ab>
  405692:	lea    rdi,[rip+0xfdcd]        # 415466 <_IO_stdin_used@@Base+0x466>
  405699:	jmp    4056f7 <verify_monster@@Base+0x707>
  40569b:	mov    ecx,DWORD PTR [r12+0x1c]
  4056a0:	lea    rax,[r12+rcx*1]
  4056a4:	add    rax,0x1c
  4056a8:	movsxd rcx,DWORD PTR [r12+rcx*1+0x1c]
  4056ad:	mov    rdx,rax
  4056b0:	sub    rdx,rcx
  4056b3:	cmp    WORD PTR [rdx],0xc
  4056b7:	jb     405a41 <verify_monster@@Base+0xa51>
  4056bd:	neg    rcx
  4056c0:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  4056c5:	test   rcx,rcx
  4056c8:	je     405a41 <verify_monster@@Base+0xa51>
  4056ce:	lea    rdx,[rax+rcx*1]
  4056d2:	mov    eax,DWORD PTR [rax+rcx*1]
  4056d5:	lea    r14,[rax+rdx*1]
  4056d9:	add    r14,0x4
  4056dd:	lea    rsi,[rip+0x122b4]        # 417998 <_IO_stdin_used@@Base+0x2998>
  4056e4:	mov    rdi,r14
  4056e7:	call   4040e0 <strcmp@plt>
  4056ec:	test   eax,eax
  4056ee:	je     405706 <verify_monster@@Base+0x716>
  4056f0:	lea    rdi,[rip+0xfd94]        # 41548b <_IO_stdin_used@@Base+0x48b>
  4056f7:	mov    rsi,r14
  4056fa:	xor    eax,eax
  4056fc:	call   404080 <printf@plt>
  405701:	jmp    405085 <verify_monster@@Base+0x95>
  405706:	movzx  eax,WORD PTR [rbx+r15*1+0x18]
  40570c:	test   rax,rax
  40570f:	je     40574d <verify_monster@@Base+0x75d>
  405711:	lea    rcx,[rbx+rax*1]
  405715:	mov    eax,DWORD PTR [rbx+rax*1]
  405718:	cmp    DWORD PTR [rax+rcx*1],0x3
  40571c:	jne    40574d <verify_monster@@Base+0x75d>
  40571e:	lea    r14,[rax+rcx*1]
  405722:	add    r14,0x4
  405726:	mov    eax,DWORD PTR [r14]
  405729:	lea    rdi,[r14+rax*1]
  40572d:	add    rdi,0x4
  405731:	lea    rsi,[rip+0xfd78]        # 4154b0 <_IO_stdin_used@@Base+0x4b0>
  405738:	call   4040e0 <strcmp@plt>
  40573d:	test   eax,eax
  40573f:	je     405759 <verify_monster@@Base+0x769>
  405741:	lea    rdi,[rip+0x11c13]        # 41735b <_IO_stdin_used@@Base+0x235b>
  405748:	jmp    405080 <verify_monster@@Base+0x90>
  40574d:	lea    rdi,[rip+0x11c1e]        # 417372 <_IO_stdin_used@@Base+0x2372>
  405754:	jmp    405080 <verify_monster@@Base+0x90>
  405759:	mov    eax,DWORD PTR [r14+0x4]
  40575d:	cmp    DWORD PTR [r14+rax*1+0x4],0x2
  405763:	jne    40577d <verify_monster@@Base+0x78d>
  405765:	lea    rcx,[r14+0x4]
  405769:	cmp    WORD PTR [rcx+rax*1+0x4],0x2c
  40576f:	je     405789 <verify_monster@@Base+0x799>
  405771:	lea    rdi,[rip+0x11bc3]        # 41733b <_IO_stdin_used@@Base+0x233b>
  405778:	jmp    405080 <verify_monster@@Base+0x90>
  40577d:	lea    rdi,[rip+0xfd32]        # 4154b6 <_IO_stdin_used@@Base+0x4b6>
  405784:	jmp    405405 <verify_monster@@Base+0x415>
  405789:	mov    eax,DWORD PTR [r14+0x8]
  40578d:	lea    rdi,[r14+rax*1]
  405791:	add    rdi,0xc
  405795:	lea    rsi,[rip+0xfd34]        # 4154d0 <_IO_stdin_used@@Base+0x4d0>
  40579c:	call   4040e0 <strcmp@plt>
  4057a1:	test   eax,eax
  4057a3:	je     4057b1 <verify_monster@@Base+0x7c1>
  4057a5:	lea    rdi,[rip+0x11b78]        # 417324 <_IO_stdin_used@@Base+0x2324>
  4057ac:	jmp    405080 <verify_monster@@Base+0x90>
  4057b1:	cmp    bp,0x36
  4057b5:	jb     405808 <verify_monster@@Base+0x818>
  4057b7:	movzx  ecx,WORD PTR [rbx+r15*1+0x34]
  4057bd:	test   rcx,rcx
  4057c0:	je     405808 <verify_monster@@Base+0x818>
  4057c2:	lea    rax,[rbx+rcx*1]
  4057c6:	mov    ecx,DWORD PTR [rbx+rcx*1]
  4057c9:	cmp    DWORD PTR [rcx+rax*1],0x4
  4057cd:	jne    405814 <verify_monster@@Base+0x824>
  4057cf:	xor    esi,esi
  4057d1:	cmp    BYTE PTR [rax+rcx*1+0x4],0x0
  4057d6:	jne    4057fc <verify_monster@@Base+0x80c>
  4057d8:	mov    esi,0x1
  4057dd:	cmp    BYTE PTR [rax+rcx*1+0x5],0x1
  4057e2:	jne    4057fc <verify_monster@@Base+0x80c>
  4057e4:	mov    esi,0x2
  4057e9:	cmp    BYTE PTR [rax+rcx*1+0x6],0x1
  4057ee:	jne    4057fc <verify_monster@@Base+0x80c>
  4057f0:	mov    esi,0x3
  4057f5:	cmp    BYTE PTR [rax+rcx*1+0x7],0x0
  4057fa:	je     405820 <verify_monster@@Base+0x830>
  4057fc:	lea    rdi,[rip+0xfcd4]        # 4154d7 <_IO_stdin_used@@Base+0x4d7>
  405803:	jmp    405279 <verify_monster@@Base+0x289>
  405808:	lea    rdi,[rip+0x1196d]        # 41717c <_IO_stdin_used@@Base+0x217c>
  40580f:	jmp    405080 <verify_monster@@Base+0x90>
  405814:	lea    rdi,[rip+0x11aea]        # 417305 <_IO_stdin_used@@Base+0x2305>
  40581b:	jmp    405080 <verify_monster@@Base+0x90>
  405820:	movzx  eax,WORD PTR [rbx+r15*1+0x12]
  405826:	test   rax,rax
  405829:	je     40589b <verify_monster@@Base+0x8ab>
  40582b:	cmp    BYTE PTR [rbx+rax*1],0x1
  40582f:	jne    40589b <verify_monster@@Base+0x8ab>
  405831:	movzx  eax,WORD PTR [rbx+r15*1+0x14]
  405837:	test   rax,rax
  40583a:	je     405a8b <verify_monster@@Base+0xa9b>
  405840:	lea    rcx,[rbx+rax*1]
  405844:	mov    edx,DWORD PTR [rbx+rax*1]
  405847:	lea    rax,[rcx+rdx*1]
  40584b:	movsxd rcx,DWORD PTR [rdx+rcx*1]
  40584f:	mov    rdx,rax
  405852:	sub    rdx,rcx
  405855:	cmp    WORD PTR [rdx],0xb
  405859:	jbe    405a41 <verify_monster@@Base+0xa51>
  40585f:	neg    rcx
  405862:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  405867:	test   rcx,rcx
  40586a:	je     405a41 <verify_monster@@Base+0xa51>
  405870:	lea    rdx,[rax+rcx*1]
  405874:	mov    eax,DWORD PTR [rax+rcx*1]
  405877:	lea    rdi,[rax+rdx*1]
  40587b:	add    rdi,0x4
  40587f:	lea    rsi,[rip+0xfb29]        # 4153af <_IO_stdin_used@@Base+0x3af>
  405886:	call   4040e0 <strcmp@plt>
  40588b:	test   eax,eax
  40588d:	je     4058a7 <verify_monster@@Base+0x8b7>
  40588f:	lea    rdi,[rip+0x11a26]        # 4172bc <_IO_stdin_used@@Base+0x22bc>
  405896:	jmp    405080 <verify_monster@@Base+0x90>
  40589b:	lea    rdi,[rip+0x11a3a]        # 4172dc <_IO_stdin_used@@Base+0x22dc>
  4058a2:	jmp    405080 <verify_monster@@Base+0x90>
  4058a7:	movzx  eax,WORD PTR [rbx+r15*1+0x1c]
  4058ad:	test   rax,rax
  4058b0:	je     405a8b <verify_monster@@Base+0xa9b>
  4058b6:	lea    rcx,[rbx+rax*1]
  4058ba:	mov    eax,DWORD PTR [rbx+rax*1]
  4058bd:	lea    rbp,[rcx+rax*1]
  4058c1:	movsxd r14,DWORD PTR [rax+rcx*1]
  4058c5:	mov    rax,rbp
  4058c8:	sub    rax,r14
  4058cb:	movzx  r12d,WORD PTR [rax]
  4058cf:	cmp    r12w,0xb
  4058d4:	jbe    405a41 <verify_monster@@Base+0xa51>
  4058da:	neg    r14
  4058dd:	movzx  eax,WORD PTR [rbp+r14*1+0xa]
  4058e3:	test   rax,rax
  4058e6:	je     405a41 <verify_monster@@Base+0xa51>
  4058ec:	lea    rcx,[rax+rbp*1]
  4058f0:	mov    eax,DWORD PTR [rbp+rax*1+0x0]
  4058f4:	lea    rdi,[rax+rcx*1]
  4058f8:	add    rdi,0x4
  4058fc:	lea    rsi,[rip+0x119af]        # 4172b2 <_IO_stdin_used@@Base+0x22b2>
  405903:	call   4040e0 <strcmp@plt>
  405908:	test   eax,eax
  40590a:	je     405918 <verify_monster@@Base+0x928>
  40590c:	lea    rdi,[rip+0x1198c]        # 41729f <_IO_stdin_used@@Base+0x229f>
  405913:	jmp    405080 <verify_monster@@Base+0x90>
  405918:	cmp    r12w,0x14
  40591d:	jb     40593d <verify_monster@@Base+0x94d>
  40591f:	movzx  eax,WORD PTR [rbp+r14*1+0x12]
  405925:	test   rax,rax
  405928:	je     40593d <verify_monster@@Base+0x94d>
  40592a:	cmp    BYTE PTR [rbp+rax*1+0x0],0x0
  40592f:	je     40593d <verify_monster@@Base+0x94d>
  405931:	lea    rdi,[rip+0x11943]        # 41727b <_IO_stdin_used@@Base+0x227b>
  405938:	jmp    405080 <verify_monster@@Base+0x90>
  40593d:	movzx  eax,WORD PTR [rbx+r15*1+0x14]
  405943:	test   rax,rax
  405946:	je     40595a <verify_monster@@Base+0x96a>
  405948:	mov    al,0x1
  40594a:	test   al,al
  40594c:	jne    40595a <verify_monster@@Base+0x96a>
  40594e:	lea    rdi,[rip+0x11906]        # 41725b <_IO_stdin_used@@Base+0x225b>
  405955:	jmp    405080 <verify_monster@@Base+0x90>
  40595a:	cmp    r12w,0x1c
  40595f:	jb     405a60 <verify_monster@@Base+0xa70>
  405965:	movzx  ecx,WORD PTR [rbp+r14*1+0x1a]
  40596b:	test   rcx,rcx
  40596e:	je     405a60 <verify_monster@@Base+0xa70>
  405974:	lea    rax,[rcx+rbp*1]
  405978:	mov    edx,DWORD PTR [rbp+rcx*1+0x0]
  40597c:	mov    ecx,DWORD PTR [rdx+rax*1]
  40597f:	test   rcx,rcx
  405982:	je     405a60 <verify_monster@@Base+0xa70>
  405988:	add    rax,rdx
  40598b:	add    rax,0x4
  40598f:	lea    rdx,[rax+rcx*4]
  405993:	mov    ecx,DWORD PTR [rax+rcx*4-0x4]
  405997:	lea    rax,[rcx+rdx*1]
  40599b:	add    rax,0xfffffffffffffffc
  40599f:	movsxd rcx,DWORD PTR [rcx+rdx*1-0x4]
  4059a4:	mov    rdx,rax
  4059a7:	sub    rdx,rcx
  4059aa:	movzx  edx,WORD PTR [rdx]
  4059ad:	cmp    dx,0x14
  4059b1:	jb     405a7f <verify_monster@@Base+0xa8f>
  4059b7:	neg    rcx
  4059ba:	movzx  esi,WORD PTR [rax+rcx*1+0x12]
  4059bf:	test   rsi,rsi
  4059c2:	je     405a7f <verify_monster@@Base+0xa8f>
  4059c8:	cmp    BYTE PTR [rax+rsi*1],0x1
  4059cc:	jne    405a7f <verify_monster@@Base+0xa8f>
  4059d2:	cmp    dx,0x16
  4059d6:	jb     405a8b <verify_monster@@Base+0xa9b>
  4059dc:	movzx  ecx,WORD PTR [rax+rcx*1+0x14]
  4059e1:	test   rcx,rcx
  4059e4:	je     405a8b <verify_monster@@Base+0xa9b>
  4059ea:	lea    rdx,[rax+rcx*1]
  4059ee:	mov    eax,DWORD PTR [rax+rcx*1]
  4059f1:	add    rax,rdx
  4059f4:	je     405a8b <verify_monster@@Base+0xa9b>
  4059fa:	movsxd rcx,DWORD PTR [rax]
  4059fd:	mov    rdx,rax
  405a00:	sub    rdx,rcx
  405a03:	cmp    WORD PTR [rdx],0xc
  405a07:	jb     405a41 <verify_monster@@Base+0xa51>
  405a09:	neg    rcx
  405a0c:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  405a11:	test   rcx,rcx
  405a14:	je     405a41 <verify_monster@@Base+0xa51>
  405a16:	lea    rdx,[rax+rcx*1]
  405a1a:	mov    eax,DWORD PTR [rax+rcx*1]
  405a1d:	lea    rdi,[rax+rdx*1]
  405a21:	add    rdi,0x4
  405a25:	lea    rsi,[rip+0xf983]        # 4153af <_IO_stdin_used@@Base+0x3af>
  405a2c:	call   4040e0 <strcmp@plt>
  405a31:	test   eax,eax
  405a33:	je     405a94 <verify_monster@@Base+0xaa4>
  405a35:	lea    rdi,[rip+0x117a4]        # 4171e0 <_IO_stdin_used@@Base+0x21e0>
  405a3c:	jmp    405080 <verify_monster@@Base+0x90>
  405a41:	lea    rdi,[rip+0x10902]        # 41634a <_IO_stdin_used@@Base+0x134a>
  405a48:	lea    rsi,[rip+0x103e8]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  405a4f:	lea    rcx,[rip+0x108a3]        # 4162f9 <_IO_stdin_used@@Base+0x12f9>
  405a56:	mov    edx,0x2bb
  405a5b:	call   4040a0 <__assert_fail@plt>
  405a60:	lea    rdi,[rip+0x1095d]        # 4163c4 <_IO_stdin_used@@Base+0x13c4>
  405a67:	lea    rsi,[rip+0x103c9]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  405a6e:	lea    rcx,[rip+0x10ab0]        # 416525 <_IO_stdin_used@@Base+0x1525>
  405a75:	mov    edx,0x2b5
  405a7a:	call   4040a0 <__assert_fail@plt>
  405a7f:	lea    rdi,[rip+0x11793]        # 417219 <_IO_stdin_used@@Base+0x2219>
  405a86:	jmp    405080 <verify_monster@@Base+0x90>
  405a8b:	lea    rdi,[rip+0x1037f]        # 415e11 <_IO_stdin_used@@Base+0xe11>
  405a92:	jmp    405a48 <verify_monster@@Base+0xa58>
  405a94:	movzx  eax,WORD PTR [rbx+r15*1+0x22]
  405a9a:	test   rax,rax
  405a9d:	je     405aa5 <verify_monster@@Base+0xab5>
  405a9f:	cmp    BYTE PTR [rbx+rax*1],0x0
  405aa3:	je     405ab1 <verify_monster@@Base+0xac1>
  405aa5:	lea    rdi,[rip+0x11720]        # 4171cc <_IO_stdin_used@@Base+0x21cc>
  405aac:	jmp    405080 <verify_monster@@Base+0x90>
  405ab1:	movzx  eax,WORD PTR [rbx+r15*1+0x20]
  405ab7:	test   rax,rax
  405aba:	je     405b1f <verify_monster@@Base+0xb2f>
  405abc:	lea    rdx,[rbx+rax*1]
  405ac0:	mov    eax,DWORD PTR [rbx+rax*1]
  405ac3:	lea    rcx,[rdx+rax*1]
  405ac7:	movsxd rdx,DWORD PTR [rax+rdx*1]
  405acb:	mov    rax,rcx
  405ace:	sub    rax,rdx
  405ad1:	movzx  esi,WORD PTR [rax]
  405ad4:	xor    eax,eax
  405ad6:	cmp    si,0x6
  405ada:	jb     40508a <verify_monster@@Base+0x9a>
  405ae0:	neg    rdx
  405ae3:	cmp    WORD PTR [rcx+rdx*1+0x4],0x0
  405ae9:	jne    405b13 <verify_monster@@Base+0xb23>
  405aeb:	cmp    si,0x8
  405aef:	jb     40508a <verify_monster@@Base+0x9a>
  405af5:	cmp    WORD PTR [rcx+rdx*1+0x6],0x0
  405afb:	jne    405b13 <verify_monster@@Base+0xb23>
  405afd:	cmp    si,0xa
  405b01:	jb     40508a <verify_monster@@Base+0x9a>
  405b07:	cmp    WORD PTR [rcx+rdx*1+0x8],0x0
  405b0d:	je     40508a <verify_monster@@Base+0x9a>
  405b13:	lea    rdi,[rip+0x1169a]        # 4171b4 <_IO_stdin_used@@Base+0x21b4>
  405b1a:	jmp    405080 <verify_monster@@Base+0x90>
  405b1f:	lea    rdi,[rip+0x11670]        # 417196 <_IO_stdin_used@@Base+0x2196>
  405b26:	jmp    405080 <verify_monster@@Base+0x90>
  405b2b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405b30 <gen_monster@@Base>:
  405b30:	push   rbp
  405b31:	push   r14
  405b33:	push   rbx
  405b34:	sub    rsp,0x30
  405b38:	mov    ebp,esi
  405b3a:	mov    rbx,rdi
  405b3d:	movabs rax,0x706050403020100
  405b47:	mov    QWORD PTR [rsp+0x20],rax
  405b4c:	mov    WORD PTR [rsp+0x28],0x908
  405b53:	mov    DWORD PTR [rsp+0x8],0x10100
  405b5b:	call   40e0f0 <flatcc_builder_reset@@Base>
  405b60:	lea    rsi,[rip+0xf5e1]        # 415148 <_IO_stdin_used@@Base+0x148>
  405b67:	mov    rdi,rbx
  405b6a:	xor    edx,edx
  405b6c:	test   ebp,ebp
  405b6e:	je     405b77 <gen_monster@@Base+0x47>
  405b70:	mov    ecx,0x2
  405b75:	jmp    405b79 <gen_monster@@Base+0x49>
  405b77:	xor    ecx,ecx
  405b79:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  405b7e:	test   eax,eax
  405b80:	jne    405b8f <gen_monster@@Base+0x5f>
  405b82:	mov    rdi,rbx
  405b85:	mov    esi,0x24
  405b8a:	call   40ff20 <flatcc_builder_start_table@@Base>
  405b8f:	mov    edx,0x2
  405b94:	mov    rdi,rbx
  405b97:	mov    esi,0x2
  405b9c:	mov    ecx,0x2
  405ba1:	call   4112a0 <flatcc_builder_table_add@@Base>
  405ba6:	test   rax,rax
  405ba9:	je     405bb0 <gen_monster@@Base+0x80>
  405bab:	mov    WORD PTR [rax],0x50
  405bb0:	mov    edx,0x20
  405bb5:	mov    rdi,rbx
  405bb8:	xor    esi,esi
  405bba:	mov    ecx,0x10
  405bbf:	call   4112a0 <flatcc_builder_table_add@@Base>
  405bc4:	movabs rcx,0x400000003f800000
  405bce:	mov    QWORD PTR [rax],rcx
  405bd1:	mov    DWORD PTR [rax+0x8],0xc04ccccd
  405bd8:	lea    rsi,[rip+0xf5ad]        # 41518c <_IO_stdin_used@@Base+0x18c>
  405bdf:	mov    rdi,rbx
  405be2:	call   412170 <flatcc_builder_create_string_str@@Base>
  405be7:	test   eax,eax
  405be9:	je     405c01 <gen_monster@@Base+0xd1>
  405beb:	mov    ebp,eax
  405bed:	mov    rdi,rbx
  405bf0:	mov    esi,0x3
  405bf5:	call   411140 <flatcc_builder_table_add_offset@@Base>
  405bfa:	test   rax,rax
  405bfd:	je     405c01 <gen_monster@@Base+0xd1>
  405bff:	mov    DWORD PTR [rax],ebp
  405c01:	mov    edx,0x1
  405c06:	mov    rdi,rbx
  405c09:	mov    esi,0x6
  405c0e:	mov    ecx,0x1
  405c13:	call   4112a0 <flatcc_builder_table_add@@Base>
  405c18:	test   rax,rax
  405c1b:	je     405c20 <gen_monster@@Base+0xf0>
  405c1d:	mov    BYTE PTR [rax],0x2
  405c20:	lea    rsi,[rsp+0x20]
  405c25:	mov    edx,0xa
  405c2a:	mov    ecx,0x1
  405c2f:	mov    r9d,0xffffffff
  405c35:	mov    rdi,rbx
  405c38:	mov    r8d,0x1
  405c3e:	call   410ac0 <flatcc_builder_create_vector@@Base>
  405c43:	test   eax,eax
  405c45:	je     405c5d <gen_monster@@Base+0x12d>
  405c47:	mov    ebp,eax
  405c49:	mov    rdi,rbx
  405c4c:	mov    esi,0x5
  405c51:	call   411140 <flatcc_builder_table_add_offset@@Base>
  405c56:	test   rax,rax
  405c59:	je     405c5d <gen_monster@@Base+0x12d>
  405c5b:	mov    DWORD PTR [rax],ebp
  405c5d:	mov    esi,0x4
  405c62:	mov    ecx,0x3fffffff
  405c67:	mov    rdi,rbx
  405c6a:	mov    edx,0x2
  405c6f:	call   40fab0 <flatcc_builder_start_vector@@Base>
  405c74:	mov    esi,0x1
  405c79:	mov    rdi,rbx
  405c7c:	call   40f160 <flatcc_builder_extend_vector@@Base>
  405c81:	mov    WORD PTR [rax],0x10
  405c86:	mov    BYTE PTR [rax+0x2],0x20
  405c8a:	mov    esi,0x2
  405c8f:	mov    rdi,rbx
  405c92:	call   40f160 <flatcc_builder_extend_vector@@Base>
  405c97:	mov    WORD PTR [rax],0x30
  405c9c:	mov    BYTE PTR [rax+0x2],0x40
  405ca0:	mov    WORD PTR [rax+0x4],0x50
  405ca6:	mov    BYTE PTR [rax+0x6],0x60
  405caa:	mov    esi,0x1
  405caf:	mov    rdi,rbx
  405cb2:	call   40f160 <flatcc_builder_extend_vector@@Base>
  405cb7:	test   rax,rax
  405cba:	je     405cc5 <gen_monster@@Base+0x195>
  405cbc:	mov    WORD PTR [rax],0x70
  405cc1:	mov    BYTE PTR [rax+0x2],0x80
  405cc5:	mov    esi,0x1
  405cca:	mov    rdi,rbx
  405ccd:	call   40f160 <flatcc_builder_extend_vector@@Base>
  405cd2:	test   rax,rax
  405cd5:	je     405cdd <gen_monster@@Base+0x1ad>
  405cd7:	mov    DWORD PTR [rax],0x910190
  405cdd:	mov    esi,0x1
  405ce2:	mov    rdi,rbx
  405ce5:	call   40f160 <flatcc_builder_extend_vector@@Base>
  405cea:	test   rax,rax
  405ced:	je     405cf5 <gen_monster@@Base+0x1c5>
  405cef:	mov    DWORD PTR [rax],0x910190
  405cf5:	mov    esi,0x1
  405cfa:	mov    rdi,rbx
  405cfd:	call   40f160 <flatcc_builder_extend_vector@@Base>
  405d02:	test   rax,rax
  405d05:	je     405d0d <gen_monster@@Base+0x1dd>
  405d07:	mov    DWORD PTR [rax],0x910190
  405d0d:	mov    rdi,rbx
  405d10:	call   410d10 <flatcc_builder_vector_count@@Base>
  405d15:	cmp    rax,0x7
  405d19:	jne    406397 <gen_monster@@Base+0x867>
  405d1f:	mov    esi,0x2
  405d24:	mov    rdi,rbx
  405d27:	call   40f930 <flatcc_builder_truncate_vector@@Base>
  405d2c:	mov    rdi,rbx
  405d2f:	call   410d10 <flatcc_builder_vector_count@@Base>
  405d34:	cmp    rax,0x5
  405d38:	jne    4063b6 <gen_monster@@Base+0x886>
  405d3e:	mov    rdi,rbx
  405d41:	call   410d20 <flatcc_builder_vector_edit@@Base>
  405d46:	inc    WORD PTR [rax+0x10]
  405d4a:	mov    rdi,rbx
  405d4d:	call   410c40 <flatcc_builder_end_vector@@Base>
  405d52:	test   eax,eax
  405d54:	je     405d6c <gen_monster@@Base+0x23c>
  405d56:	mov    ebp,eax
  405d58:	mov    rdi,rbx
  405d5b:	mov    esi,0x9
  405d60:	call   411140 <flatcc_builder_table_add_offset@@Base>
  405d65:	test   rax,rax
  405d68:	je     405d6c <gen_monster@@Base+0x23c>
  405d6a:	mov    DWORD PTR [rax],ebp
  405d6c:	mov    rdi,rbx
  405d6f:	mov    esi,0x24
  405d74:	call   40ff20 <flatcc_builder_start_table@@Base>
  405d79:	lea    rsi,[rip+0xf62f]        # 4153af <_IO_stdin_used@@Base+0x3af>
  405d80:	mov    edx,0x7
  405d85:	mov    rdi,rbx
  405d88:	call   412040 <flatcc_builder_create_string@@Base>
  405d8d:	test   eax,eax
  405d8f:	je     405da7 <gen_monster@@Base+0x277>
  405d91:	mov    ebp,eax
  405d93:	mov    rdi,rbx
  405d96:	mov    esi,0x3
  405d9b:	call   411140 <flatcc_builder_table_add_offset@@Base>
  405da0:	test   rax,rax
  405da3:	je     405da7 <gen_monster@@Base+0x277>
  405da5:	mov    DWORD PTR [rax],ebp
  405da7:	lea    rsi,[rip+0xf38a]        # 415138 <_IO_stdin_used@@Base+0x138>
  405dae:	mov    rdi,rbx
  405db1:	mov    edx,0x1
  405db6:	call   4108c0 <flatcc_builder_check_required@@Base>
  405dbb:	test   eax,eax
  405dbd:	je     406378 <gen_monster@@Base+0x848>
  405dc3:	mov    rdi,rbx
  405dc6:	call   410930 <flatcc_builder_end_table@@Base>
  405dcb:	mov    r14d,eax
  405dce:	mov    rdi,rbx
  405dd1:	call   40fb30 <flatcc_builder_start_offset_vector@@Base>
  405dd6:	mov    esi,0x2
  405ddb:	mov    rdi,rbx
  405dde:	call   40f440 <flatcc_builder_extend_offset_vector@@Base>
  405de3:	mov    DWORD PTR [rax],r14d
  405de6:	mov    DWORD PTR [rax+0x4],r14d
  405dea:	mov    rdi,rbx
  405ded:	mov    esi,0x24
  405df2:	call   40ff20 <flatcc_builder_start_table@@Base>
  405df7:	lea    rsi,[rip+0x11b9a]        # 417998 <_IO_stdin_used@@Base+0x2998>
  405dfe:	mov    edx,0x1e
  405e03:	mov    rdi,rbx
  405e06:	call   4121a0 <flatcc_builder_create_string_strn@@Base>
  405e0b:	test   eax,eax
  405e0d:	je     405e25 <gen_monster@@Base+0x2f5>
  405e0f:	mov    ebp,eax
  405e11:	mov    rdi,rbx
  405e14:	mov    esi,0x3
  405e19:	call   411140 <flatcc_builder_table_add_offset@@Base>
  405e1e:	test   rax,rax
  405e21:	je     405e25 <gen_monster@@Base+0x2f5>
  405e23:	mov    DWORD PTR [rax],ebp
  405e25:	lea    rsi,[rip+0xf30c]        # 415138 <_IO_stdin_used@@Base+0x138>
  405e2c:	mov    rdi,rbx
  405e2f:	mov    edx,0x1
  405e34:	call   4108c0 <flatcc_builder_check_required@@Base>
  405e39:	test   eax,eax
  405e3b:	je     406378 <gen_monster@@Base+0x848>
  405e41:	mov    rdi,rbx
  405e44:	call   410930 <flatcc_builder_end_table@@Base>
  405e49:	mov    rdi,rbx
  405e4c:	mov    esi,eax
  405e4e:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  405e53:	mov    ebp,DWORD PTR [rax]
  405e55:	mov    esi,0x3
  405e5a:	mov    rdi,rbx
  405e5d:	call   40f440 <flatcc_builder_extend_offset_vector@@Base>
  405e62:	mov    DWORD PTR [rax],r14d
  405e65:	mov    DWORD PTR [rax+0x4],ebp
  405e68:	mov    esi,0x1
  405e6d:	mov    rdi,rbx
  405e70:	call   40f9b0 <flatcc_builder_truncate_offset_vector@@Base>
  405e75:	mov    rdi,rbx
  405e78:	call   411040 <flatcc_builder_offset_vector_count@@Base>
  405e7d:	cmp    rax,0x5
  405e81:	jne    4063d5 <gen_monster@@Base+0x8a5>
  405e87:	mov    rdi,rbx
  405e8a:	mov    esi,0x24
  405e8f:	call   40ff20 <flatcc_builder_start_table@@Base>
  405e94:	lea    rsi,[rip+0xf705]        # 4155a0 <_IO_stdin_used@@Base+0x5a0>
  405e9b:	mov    edx,0x8
  405ea0:	mov    rdi,rbx
  405ea3:	call   4121a0 <flatcc_builder_create_string_strn@@Base>
  405ea8:	test   eax,eax
  405eaa:	je     405ec2 <gen_monster@@Base+0x392>
  405eac:	mov    ebp,eax
  405eae:	mov    rdi,rbx
  405eb1:	mov    esi,0x3
  405eb6:	call   411140 <flatcc_builder_table_add_offset@@Base>
  405ebb:	test   rax,rax
  405ebe:	je     405ec2 <gen_monster@@Base+0x392>
  405ec0:	mov    DWORD PTR [rax],ebp
  405ec2:	lea    rsi,[rip+0xf26f]        # 415138 <_IO_stdin_used@@Base+0x138>
  405ec9:	mov    rdi,rbx
  405ecc:	mov    edx,0x1
  405ed1:	call   4108c0 <flatcc_builder_check_required@@Base>
  405ed6:	test   eax,eax
  405ed8:	je     406378 <gen_monster@@Base+0x848>
  405ede:	mov    rdi,rbx
  405ee1:	call   410930 <flatcc_builder_end_table@@Base>
  405ee6:	mov    rdi,rbx
  405ee9:	mov    esi,eax
  405eeb:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  405ef0:	mov    eax,DWORD PTR [rax]
  405ef2:	mov    DWORD PTR [rsp+0xc],eax
  405ef6:	mov    rdi,rbx
  405ef9:	call   411040 <flatcc_builder_offset_vector_count@@Base>
  405efe:	cmp    rax,0x6
  405f02:	jne    4063f4 <gen_monster@@Base+0x8c4>
  405f08:	mov    rdi,rbx
  405f0b:	call   411030 <flatcc_builder_offset_vector_edit@@Base>
  405f10:	mov    ecx,DWORD PTR [rax+0x8]
  405f13:	mov    edx,DWORD PTR [rax+0x14]
  405f16:	mov    DWORD PTR [rsp+0x10],ecx
  405f1a:	mov    DWORD PTR [rax+0x14],r14d
  405f1e:	mov    DWORD PTR [rax],edx
  405f20:	lea    rsi,[rsp+0xc]
  405f25:	mov    edx,0x2
  405f2a:	mov    rdi,rbx
  405f2d:	call   40f5d0 <flatcc_builder_append_offset_vector@@Base>
  405f32:	mov    rdi,rbx
  405f35:	call   40fcf0 <flatcc_builder_end_offset_vector@@Base>
  405f3a:	test   eax,eax
  405f3c:	je     405f54 <gen_monster@@Base+0x424>
  405f3e:	mov    ebp,eax
  405f40:	mov    rdi,rbx
  405f43:	mov    esi,0xb
  405f48:	call   411140 <flatcc_builder_table_add_offset@@Base>
  405f4d:	test   rax,rax
  405f50:	je     405f54 <gen_monster@@Base+0x424>
  405f52:	mov    DWORD PTR [rax],ebp
  405f54:	lea    rsi,[rip+0xf555]        # 4154b0 <_IO_stdin_used@@Base+0x4b0>
  405f5b:	mov    rdi,rbx
  405f5e:	call   412170 <flatcc_builder_create_string_str@@Base>
  405f63:	mov    DWORD PTR [rsp+0x14],eax
  405f67:	lea    rsi,[rip+0xf1a6]        # 415114 <_IO_stdin_used@@Base+0x114>
  405f6e:	mov    edx,0x2
  405f73:	mov    rdi,rbx
  405f76:	call   412040 <flatcc_builder_create_string@@Base>
  405f7b:	mov    DWORD PTR [rsp+0x18],eax
  405f7f:	lea    rsi,[rip+0xf54a]        # 4154d0 <_IO_stdin_used@@Base+0x4d0>
  405f86:	mov    rdi,rbx
  405f89:	call   412170 <flatcc_builder_create_string_str@@Base>
  405f8e:	mov    DWORD PTR [rsp+0x1c],eax
  405f92:	lea    rsi,[rsp+0x14]
  405f97:	mov    edx,0x3
  405f9c:	mov    rdi,rbx
  405f9f:	call   40fba0 <flatcc_builder_create_offset_vector@@Base>
  405fa4:	test   eax,eax
  405fa6:	je     405fbe <gen_monster@@Base+0x48e>
  405fa8:	mov    ebp,eax
  405faa:	mov    rdi,rbx
  405fad:	mov    esi,0xa
  405fb2:	call   411140 <flatcc_builder_table_add_offset@@Base>
  405fb7:	test   rax,rax
  405fba:	je     405fbe <gen_monster@@Base+0x48e>
  405fbc:	mov    DWORD PTR [rax],ebp
  405fbe:	mov    esi,0x1
  405fc3:	mov    ecx,0xffffffff
  405fc8:	mov    rdi,rbx
  405fcb:	mov    edx,0x1
  405fd0:	call   40fab0 <flatcc_builder_start_vector@@Base>
  405fd5:	lea    rsi,[rsp+0x8]
  405fda:	mov    edx,0x1
  405fdf:	mov    rdi,rbx
  405fe2:	call   40f330 <flatcc_builder_append_vector@@Base>
  405fe7:	lea    rsi,[rsp+0x9]
  405fec:	mov    edx,0x3
  405ff1:	mov    rdi,rbx
  405ff4:	call   40f330 <flatcc_builder_append_vector@@Base>
  405ff9:	mov    rdi,rbx
  405ffc:	call   410c40 <flatcc_builder_end_vector@@Base>
  406001:	test   eax,eax
  406003:	je     40601b <gen_monster@@Base+0x4eb>
  406005:	mov    ebp,eax
  406007:	mov    rdi,rbx
  40600a:	mov    esi,0x18
  40600f:	call   411140 <flatcc_builder_table_add_offset@@Base>
  406014:	test   rax,rax
  406017:	je     40601b <gen_monster@@Base+0x4eb>
  406019:	mov    DWORD PTR [rax],ebp
  40601b:	test   r14d,r14d
  40601e:	je     406058 <gen_monster@@Base+0x528>
  406020:	mov    edx,0x1
  406025:	mov    rdi,rbx
  406028:	mov    esi,0x7
  40602d:	mov    ecx,0x1
  406032:	call   4112a0 <flatcc_builder_table_add@@Base>
  406037:	test   rax,rax
  40603a:	je     406058 <gen_monster@@Base+0x528>
  40603c:	mov    rbp,rax
  40603f:	mov    rdi,rbx
  406042:	mov    esi,0x8
  406047:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40604c:	test   rax,rax
  40604f:	je     406058 <gen_monster@@Base+0x528>
  406051:	mov    BYTE PTR [rbp+0x0],0x1
  406055:	mov    DWORD PTR [rax],r14d
  406058:	mov    rdi,rbx
  40605b:	mov    esi,0x24
  406060:	call   40ff20 <flatcc_builder_start_table@@Base>
  406065:	lea    rsi,[rip+0x11246]        # 4172b2 <_IO_stdin_used@@Base+0x22b2>
  40606c:	mov    rdi,rbx
  40606f:	call   412170 <flatcc_builder_create_string_str@@Base>
  406074:	test   eax,eax
  406076:	je     40608e <gen_monster@@Base+0x55e>
  406078:	mov    ebp,eax
  40607a:	mov    rdi,rbx
  40607d:	mov    esi,0x3
  406082:	call   411140 <flatcc_builder_table_add_offset@@Base>
  406087:	test   rax,rax
  40608a:	je     40608e <gen_monster@@Base+0x55e>
  40608c:	mov    DWORD PTR [rax],ebp
  40608e:	mov    rdi,rbx
  406091:	call   40fb30 <flatcc_builder_start_offset_vector@@Base>
  406096:	mov    rdi,rbx
  406099:	mov    esi,0x24
  40609e:	call   40ff20 <flatcc_builder_start_table@@Base>
  4060a3:	test   r14d,r14d
  4060a6:	je     4060e0 <gen_monster@@Base+0x5b0>
  4060a8:	mov    edx,0x1
  4060ad:	mov    rdi,rbx
  4060b0:	mov    esi,0x7
  4060b5:	mov    ecx,0x1
  4060ba:	call   4112a0 <flatcc_builder_table_add@@Base>
  4060bf:	test   rax,rax
  4060c2:	je     4060e0 <gen_monster@@Base+0x5b0>
  4060c4:	mov    rbp,rax
  4060c7:	mov    rdi,rbx
  4060ca:	mov    esi,0x8
  4060cf:	call   411140 <flatcc_builder_table_add_offset@@Base>
  4060d4:	test   rax,rax
  4060d7:	je     4060e0 <gen_monster@@Base+0x5b0>
  4060d9:	mov    BYTE PTR [rbp+0x0],0x1
  4060dd:	mov    DWORD PTR [rax],r14d
  4060e0:	lea    rsi,[rip+0xf508]        # 4155ef <_IO_stdin_used@@Base+0x5ef>
  4060e7:	mov    rdi,rbx
  4060ea:	call   412170 <flatcc_builder_create_string_str@@Base>
  4060ef:	test   eax,eax
  4060f1:	je     406109 <gen_monster@@Base+0x5d9>
  4060f3:	mov    ebp,eax
  4060f5:	mov    rdi,rbx
  4060f8:	mov    esi,0x3
  4060fd:	call   411140 <flatcc_builder_table_add_offset@@Base>
  406102:	test   rax,rax
  406105:	je     406109 <gen_monster@@Base+0x5d9>
  406107:	mov    DWORD PTR [rax],ebp
  406109:	lea    rsi,[rip+0xf028]        # 415138 <_IO_stdin_used@@Base+0x138>
  406110:	mov    rdi,rbx
  406113:	mov    edx,0x1
  406118:	call   4108c0 <flatcc_builder_check_required@@Base>
  40611d:	test   eax,eax
  40611f:	je     406378 <gen_monster@@Base+0x848>
  406125:	mov    rdi,rbx
  406128:	call   410930 <flatcc_builder_end_table@@Base>
  40612d:	test   eax,eax
  40612f:	je     40613b <gen_monster@@Base+0x60b>
  406131:	mov    rdi,rbx
  406134:	mov    esi,eax
  406136:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  40613b:	mov    rdi,rbx
  40613e:	mov    esi,0x24
  406143:	call   40ff20 <flatcc_builder_start_table@@Base>
  406148:	test   r14d,r14d
  40614b:	je     406185 <gen_monster@@Base+0x655>
  40614d:	mov    edx,0x1
  406152:	mov    rdi,rbx
  406155:	mov    esi,0x7
  40615a:	mov    ecx,0x1
  40615f:	call   4112a0 <flatcc_builder_table_add@@Base>
  406164:	test   rax,rax
  406167:	je     406185 <gen_monster@@Base+0x655>
  406169:	mov    rbp,rax
  40616c:	mov    rdi,rbx
  40616f:	mov    esi,0x8
  406174:	call   411140 <flatcc_builder_table_add_offset@@Base>
  406179:	test   rax,rax
  40617c:	je     406185 <gen_monster@@Base+0x655>
  40617e:	mov    BYTE PTR [rbp+0x0],0x1
  406182:	mov    DWORD PTR [rax],r14d
  406185:	lea    rsi,[rip+0xf463]        # 4155ef <_IO_stdin_used@@Base+0x5ef>
  40618c:	mov    rdi,rbx
  40618f:	call   412170 <flatcc_builder_create_string_str@@Base>
  406194:	test   eax,eax
  406196:	je     4061ae <gen_monster@@Base+0x67e>
  406198:	mov    ebp,eax
  40619a:	mov    rdi,rbx
  40619d:	mov    esi,0x3
  4061a2:	call   411140 <flatcc_builder_table_add_offset@@Base>
  4061a7:	test   rax,rax
  4061aa:	je     4061ae <gen_monster@@Base+0x67e>
  4061ac:	mov    DWORD PTR [rax],ebp
  4061ae:	lea    rsi,[rip+0xef83]        # 415138 <_IO_stdin_used@@Base+0x138>
  4061b5:	mov    rdi,rbx
  4061b8:	mov    edx,0x1
  4061bd:	call   4108c0 <flatcc_builder_check_required@@Base>
  4061c2:	test   eax,eax
  4061c4:	je     406378 <gen_monster@@Base+0x848>
  4061ca:	mov    rdi,rbx
  4061cd:	call   410930 <flatcc_builder_end_table@@Base>
  4061d2:	test   eax,eax
  4061d4:	je     4061e0 <gen_monster@@Base+0x6b0>
  4061d6:	mov    rdi,rbx
  4061d9:	mov    esi,eax
  4061db:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  4061e0:	mov    rdi,rbx
  4061e3:	mov    esi,0x24
  4061e8:	call   40ff20 <flatcc_builder_start_table@@Base>
  4061ed:	mov    rdi,rbx
  4061f0:	mov    esi,0x8
  4061f5:	call   411140 <flatcc_builder_table_add_offset@@Base>
  4061fa:	test   rax,rax
  4061fd:	je     406202 <gen_monster@@Base+0x6d2>
  4061ff:	mov    DWORD PTR [rax],r14d
  406202:	lea    rsi,[rip+0xf3e6]        # 4155ef <_IO_stdin_used@@Base+0x5ef>
  406209:	mov    rdi,rbx
  40620c:	call   412170 <flatcc_builder_create_string_str@@Base>
  406211:	test   eax,eax
  406213:	je     40622b <gen_monster@@Base+0x6fb>
  406215:	mov    ebp,eax
  406217:	mov    rdi,rbx
  40621a:	mov    esi,0x3
  40621f:	call   411140 <flatcc_builder_table_add_offset@@Base>
  406224:	test   rax,rax
  406227:	je     40622b <gen_monster@@Base+0x6fb>
  406229:	mov    DWORD PTR [rax],ebp
  40622b:	mov    edx,0x1
  406230:	mov    rdi,rbx
  406233:	mov    esi,0x7
  406238:	mov    ecx,0x1
  40623d:	call   4112a0 <flatcc_builder_table_add@@Base>
  406242:	test   rax,rax
  406245:	je     40624a <gen_monster@@Base+0x71a>
  406247:	mov    BYTE PTR [rax],0x1
  40624a:	lea    rsi,[rip+0xeee7]        # 415138 <_IO_stdin_used@@Base+0x138>
  406251:	mov    rdi,rbx
  406254:	mov    edx,0x1
  406259:	call   4108c0 <flatcc_builder_check_required@@Base>
  40625e:	test   eax,eax
  406260:	je     406378 <gen_monster@@Base+0x848>
  406266:	mov    rdi,rbx
  406269:	call   410930 <flatcc_builder_end_table@@Base>
  40626e:	test   eax,eax
  406270:	je     40627c <gen_monster@@Base+0x74c>
  406272:	mov    rdi,rbx
  406275:	mov    esi,eax
  406277:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  40627c:	mov    rdi,rbx
  40627f:	call   40fcf0 <flatcc_builder_end_offset_vector@@Base>
  406284:	test   eax,eax
  406286:	je     40629e <gen_monster@@Base+0x76e>
  406288:	mov    ebp,eax
  40628a:	mov    rdi,rbx
  40628d:	mov    esi,0xb
  406292:	call   411140 <flatcc_builder_table_add_offset@@Base>
  406297:	test   rax,rax
  40629a:	je     40629e <gen_monster@@Base+0x76e>
  40629c:	mov    DWORD PTR [rax],ebp
  40629e:	lea    rsi,[rip+0xee93]        # 415138 <_IO_stdin_used@@Base+0x138>
  4062a5:	mov    rdi,rbx
  4062a8:	mov    edx,0x1
  4062ad:	call   4108c0 <flatcc_builder_check_required@@Base>
  4062b2:	test   eax,eax
  4062b4:	je     406378 <gen_monster@@Base+0x848>
  4062ba:	mov    rdi,rbx
  4062bd:	call   410930 <flatcc_builder_end_table@@Base>
  4062c2:	test   eax,eax
  4062c4:	je     4062dc <gen_monster@@Base+0x7ac>
  4062c6:	mov    ebp,eax
  4062c8:	mov    rdi,rbx
  4062cb:	mov    esi,0xc
  4062d0:	call   411140 <flatcc_builder_table_add_offset@@Base>
  4062d5:	test   rax,rax
  4062d8:	je     4062dc <gen_monster@@Base+0x7ac>
  4062da:	mov    DWORD PTR [rax],ebp
  4062dc:	mov    edx,0x1
  4062e1:	mov    rdi,rbx
  4062e4:	mov    esi,0xf
  4062e9:	mov    ecx,0x1
  4062ee:	call   4112a0 <flatcc_builder_table_add@@Base>
  4062f3:	test   rax,rax
  4062f6:	je     4062fb <gen_monster@@Base+0x7cb>
  4062f8:	mov    BYTE PTR [rax],0x0
  4062fb:	mov    rdi,rbx
  4062fe:	mov    esi,0x3
  406303:	call   40ff20 <flatcc_builder_start_table@@Base>
  406308:	lea    rsi,[rip+0xee2f]        # 41513e <_IO_stdin_used@@Base+0x13e>
  40630f:	mov    rdi,rbx
  406312:	xor    edx,edx
  406314:	call   4108c0 <flatcc_builder_check_required@@Base>
  406319:	test   eax,eax
  40631b:	je     406413 <gen_monster@@Base+0x8e3>
  406321:	mov    rdi,rbx
  406324:	call   410930 <flatcc_builder_end_table@@Base>
  406329:	test   eax,eax
  40632b:	je     406343 <gen_monster@@Base+0x813>
  40632d:	mov    ebp,eax
  40632f:	mov    rdi,rbx
  406332:	mov    esi,0xe
  406337:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40633c:	test   rax,rax
  40633f:	je     406343 <gen_monster@@Base+0x813>
  406341:	mov    DWORD PTR [rax],ebp
  406343:	lea    rsi,[rip+0xedee]        # 415138 <_IO_stdin_used@@Base+0x138>
  40634a:	mov    rdi,rbx
  40634d:	mov    edx,0x1
  406352:	call   4108c0 <flatcc_builder_check_required@@Base>
  406357:	test   eax,eax
  406359:	je     406378 <gen_monster@@Base+0x848>
  40635b:	mov    rdi,rbx
  40635e:	call   410930 <flatcc_builder_end_table@@Base>
  406363:	mov    rdi,rbx
  406366:	mov    esi,eax
  406368:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40636d:	xor    eax,eax
  40636f:	add    rsp,0x30
  406373:	pop    rbx
  406374:	pop    r14
  406376:	pop    rbp
  406377:	ret    
  406378:	lea    rdi,[rip+0xfd67]        # 4160e6 <_IO_stdin_used@@Base+0x10e6>
  40637f:	lea    rsi,[rip+0xfc24]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  406386:	lea    rcx,[rip+0xfdfb]        # 416188 <_IO_stdin_used@@Base+0x1188>
  40638d:	mov    edx,0xeb
  406392:	call   4040a0 <__assert_fail@plt>
  406397:	lea    rdi,[rip+0xf158]        # 4154f6 <_IO_stdin_used@@Base+0x4f6>
  40639e:	lea    rsi,[rip+0xef8f]        # 415334 <_IO_stdin_used@@Base+0x334>
  4063a5:	lea    rcx,[rip+0xf171]        # 41551d <_IO_stdin_used@@Base+0x51d>
  4063ac:	mov    edx,0x371
  4063b1:	call   4040a0 <__assert_fail@plt>
  4063b6:	lea    rdi,[rip+0xf189]        # 415546 <_IO_stdin_used@@Base+0x546>
  4063bd:	lea    rsi,[rip+0xef70]        # 415334 <_IO_stdin_used@@Base+0x334>
  4063c4:	lea    rcx,[rip+0xf152]        # 41551d <_IO_stdin_used@@Base+0x51d>
  4063cb:	mov    edx,0x373
  4063d0:	call   4040a0 <__assert_fail@plt>
  4063d5:	lea    rdi,[rip+0xf191]        # 41556d <_IO_stdin_used@@Base+0x56d>
  4063dc:	lea    rsi,[rip+0xef51]        # 415334 <_IO_stdin_used@@Base+0x334>
  4063e3:	lea    rcx,[rip+0xf133]        # 41551d <_IO_stdin_used@@Base+0x51d>
  4063ea:	mov    edx,0x39b
  4063ef:	call   4040a0 <__assert_fail@plt>
  4063f4:	lea    rdi,[rip+0xf1c1]        # 4155bc <_IO_stdin_used@@Base+0x5bc>
  4063fb:	lea    rsi,[rip+0xef32]        # 415334 <_IO_stdin_used@@Base+0x334>
  406402:	lea    rcx,[rip+0xf114]        # 41551d <_IO_stdin_used@@Base+0x51d>
  406409:	mov    edx,0x3a1
  40640e:	call   4040a0 <__assert_fail@plt>
  406413:	lea    rdi,[rip+0x10220]        # 41663a <_IO_stdin_used@@Base+0x163a>
  40641a:	lea    rsi,[rip+0xfb89]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  406421:	lea    rcx,[rip+0x102ab]        # 4166d3 <_IO_stdin_used@@Base+0x16d3>
  406428:	mov    edx,0xdd
  40642d:	call   4040a0 <__assert_fail@plt>
  406432:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40643c:	nop    DWORD PTR [rax+0x0]

0000000000406440 <test_monster@@Base>:
  406440:	push   rbp
  406441:	push   rbx
  406442:	push   rax
  406443:	mov    rbx,rdi
  406446:	xor    esi,esi
  406448:	call   405b30 <gen_monster@@Base>
  40644d:	mov    rsi,rsp
  406450:	mov    rdi,rbx
  406453:	call   412610 <flatcc_builder_finalize_aligned_buffer@@Base>
  406458:	mov    rbx,rax
  40645b:	mov    rdx,QWORD PTR [rsp]
  40645f:	mov    rax,QWORD PTR [rip+0x17b92]        # 41dff8 <stderr@GLIBC_2.2.5>
  406466:	mov    rcx,QWORD PTR [rax]
  406469:	lea    rdi,[rip+0xed73]        # 4151e3 <_IO_stdin_used@@Base+0x1e3>
  406470:	mov    rsi,rbx
  406473:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  406478:	mov    rsi,QWORD PTR [rsp]
  40647c:	lea    rdx,[rip+0xecc5]        # 415148 <_IO_stdin_used@@Base+0x148>
  406483:	lea    rcx,[rip+0x6d56]        # 40d1e0 <main@@Base+0x310>
  40648a:	mov    rdi,rbx
  40648d:	call   413990 <flatcc_verify_table_as_root@@Base>
  406492:	test   eax,eax
  406494:	je     4064b5 <test_monster@@Base+0x75>
  406496:	mov    edi,eax
  406498:	call   412e60 <flatcc_verify_error_string@@Base>
  40649d:	lea    rdi,[rip+0xf154]        # 4155f8 <_IO_stdin_used@@Base+0x5f8>
  4064a4:	mov    rsi,rax
  4064a7:	xor    eax,eax
  4064a9:	call   404080 <printf@plt>
  4064ae:	mov    ebp,0xffffffff
  4064b3:	jmp    4064c7 <test_monster@@Base+0x87>
  4064b5:	mov    rdi,rbx
  4064b8:	call   404ff0 <verify_monster@@Base>
  4064bd:	mov    ebp,eax
  4064bf:	mov    rdi,rbx
  4064c2:	call   412740 <flatcc_builder_aligned_free@@Base>
  4064c7:	mov    eax,ebp
  4064c9:	add    rsp,0x8
  4064cd:	pop    rbx
  4064ce:	pop    rbp
  4064cf:	ret    

00000000004064d0 <test_monster_with_size@@Base>:
  4064d0:	push   r14
  4064d2:	push   rbx
  4064d3:	push   rax
  4064d4:	mov    rbx,rdi
  4064d7:	mov    esi,0x1
  4064dc:	call   405b30 <gen_monster@@Base>
  4064e1:	mov    rsi,rsp
  4064e4:	mov    rdi,rbx
  4064e7:	call   412610 <flatcc_builder_finalize_aligned_buffer@@Base>
  4064ec:	mov    rbx,rax
  4064ef:	mov    r14,rax
  4064f2:	mov    rdx,QWORD PTR [rsp]
  4064f6:	mov    rax,QWORD PTR [rip+0x17afb]        # 41dff8 <stderr@GLIBC_2.2.5>
  4064fd:	mov    rcx,QWORD PTR [rax]
  406500:	lea    rdi,[rip+0xf11b]        # 415622 <_IO_stdin_used@@Base+0x622>
  406507:	mov    rsi,rbx
  40650a:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  40650f:	test   bl,0xf
  406512:	je     40653a <test_monster_with_size@@Base+0x6a>
  406514:	lea    rdi,[rip+0xf11f]        # 41563a <_IO_stdin_used@@Base+0x63a>
  40651b:	xor    eax,eax
  40651d:	call   404080 <printf@plt>
  406522:	lea    rdi,[rip+0xf162]        # 41568b <_IO_stdin_used@@Base+0x68b>
  406529:	mov    esi,r14d
  40652c:	xor    eax,eax
  40652e:	call   404080 <printf@plt>
  406533:	mov    ebx,0xffffffff
  406538:	jmp    4065ae <test_monster_with_size@@Base+0xde>
  40653a:	mov    esi,DWORD PTR [r14]
  40653d:	mov    rdx,QWORD PTR [rsp]
  406541:	add    rdx,0xfffffffffffffffc
  406545:	cmp    rdx,rsi
  406548:	jne    406587 <test_monster_with_size@@Base+0xb7>
  40654a:	add    rbx,0x4
  40654e:	lea    rdx,[rip+0xebf3]        # 415148 <_IO_stdin_used@@Base+0x148>
  406555:	lea    rcx,[rip+0x6c84]        # 40d1e0 <main@@Base+0x310>
  40655c:	mov    rdi,rbx
  40655f:	call   413990 <flatcc_verify_table_as_root@@Base>
  406564:	test   eax,eax
  406566:	je     40659c <test_monster_with_size@@Base+0xcc>
  406568:	mov    edi,eax
  40656a:	call   412e60 <flatcc_verify_error_string@@Base>
  40656f:	lea    rdi,[rip+0xf15f]        # 4156d5 <_IO_stdin_used@@Base+0x6d5>
  406576:	mov    rsi,rax
  406579:	xor    eax,eax
  40657b:	call   404080 <printf@plt>
  406580:	mov    ebx,0xffffffff
  406585:	jmp    4065ae <test_monster_with_size@@Base+0xde>
  406587:	lea    rdi,[rip+0xf111]        # 41569f <_IO_stdin_used@@Base+0x69f>
  40658e:	xor    eax,eax
  406590:	call   404080 <printf@plt>
  406595:	mov    ebx,0xffffffff
  40659a:	jmp    4065ae <test_monster_with_size@@Base+0xde>
  40659c:	mov    rdi,rbx
  40659f:	call   404ff0 <verify_monster@@Base>
  4065a4:	mov    ebx,eax
  4065a6:	mov    rdi,r14
  4065a9:	call   412740 <flatcc_builder_aligned_free@@Base>
  4065ae:	mov    eax,ebx
  4065b0:	add    rsp,0x8
  4065b4:	pop    rbx
  4065b5:	pop    r14
  4065b7:	ret    
  4065b8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004065c0 <test_string@@Base>:
  4065c0:	push   rbp
  4065c1:	push   rbx
  4065c2:	push   rax
  4065c3:	mov    rbx,rdi
  4065c6:	call   40e0f0 <flatcc_builder_reset@@Base>
  4065cb:	lea    rsi,[rip+0xeb76]        # 415148 <_IO_stdin_used@@Base+0x148>
  4065d2:	mov    rdi,rbx
  4065d5:	xor    edx,edx
  4065d7:	xor    ecx,ecx
  4065d9:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  4065de:	test   eax,eax
  4065e0:	jne    4065ef <test_string@@Base+0x2f>
  4065e2:	mov    rdi,rbx
  4065e5:	mov    esi,0x24
  4065ea:	call   40ff20 <flatcc_builder_start_table@@Base>
  4065ef:	mov    rdi,rbx
  4065f2:	call   40fdb0 <flatcc_builder_start_string@@Base>
  4065f7:	mov    esi,0x3
  4065fc:	mov    rdi,rbx
  4065ff:	call   40f6e0 <flatcc_builder_extend_string@@Base>
  406604:	mov    WORD PTR [rax],0x3231
  406609:	mov    BYTE PTR [rax+0x2],0x33
  40660d:	lea    rsi,[rip+0xf120]        # 415734 <_IO_stdin_used@@Base+0x734>
  406614:	mov    rdi,rbx
  406617:	call   40f8c0 <flatcc_builder_append_string_str@@Base>
  40661c:	mov    rdi,rbx
  40661f:	call   4122e0 <flatcc_builder_string_len@@Base>
  406624:	cmp    rax,0x4
  406628:	jne    406781 <test_string@@Base+0x1c1>
  40662e:	lea    rsi,[rip+0xf125]        # 41575a <_IO_stdin_used@@Base+0x75a>
  406635:	mov    edx,0x1e
  40663a:	mov    rdi,rbx
  40663d:	call   40f8f0 <flatcc_builder_append_string_strn@@Base>
  406642:	mov    rdi,rbx
  406645:	call   4122e0 <flatcc_builder_string_len@@Base>
  40664a:	cmp    rax,0x8
  40664e:	jne    4067a0 <test_string@@Base+0x1e0>
  406654:	lea    rsi,[rip+0xf12a]        # 415785 <_IO_stdin_used@@Base+0x785>
  40665b:	mov    edx,0x2
  406660:	mov    rdi,rbx
  406663:	call   40f7c0 <flatcc_builder_append_string@@Base>
  406668:	mov    rdi,rbx
  40666b:	call   4122e0 <flatcc_builder_string_len@@Base>
  406670:	cmp    rax,0xa
  406674:	jne    4067bf <test_string@@Base+0x1ff>
  40667a:	mov    esi,0x3
  40667f:	mov    rdi,rbx
  406682:	call   40fa30 <flatcc_builder_truncate_string@@Base>
  406687:	mov    rdi,rbx
  40668a:	call   4122e0 <flatcc_builder_string_len@@Base>
  40668f:	cmp    rax,0x7
  406693:	jne    4067de <test_string@@Base+0x21e>
  406699:	mov    rdi,rbx
  40669c:	call   4122d0 <flatcc_builder_string_edit@@Base>
  4066a1:	mov    BYTE PTR [rax+0x4],0x2e
  4066a5:	mov    rdi,rbx
  4066a8:	call   4121e0 <flatcc_builder_end_string@@Base>
  4066ad:	test   eax,eax
  4066af:	je     4066c7 <test_string@@Base+0x107>
  4066b1:	mov    ebp,eax
  4066b3:	mov    rdi,rbx
  4066b6:	mov    esi,0x3
  4066bb:	call   411140 <flatcc_builder_table_add_offset@@Base>
  4066c0:	test   rax,rax
  4066c3:	je     4066c7 <test_string@@Base+0x107>
  4066c5:	mov    DWORD PTR [rax],ebp
  4066c7:	lea    rsi,[rip+0xea6a]        # 415138 <_IO_stdin_used@@Base+0x138>
  4066ce:	mov    rdi,rbx
  4066d1:	mov    edx,0x1
  4066d6:	call   4108c0 <flatcc_builder_check_required@@Base>
  4066db:	test   eax,eax
  4066dd:	je     4067fd <test_string@@Base+0x23d>
  4066e3:	mov    rdi,rbx
  4066e6:	call   410930 <flatcc_builder_end_table@@Base>
  4066eb:	mov    rdi,rbx
  4066ee:	mov    esi,eax
  4066f0:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  4066f5:	mov    rdi,rbx
  4066f8:	xor    esi,esi
  4066fa:	call   4124d0 <flatcc_builder_get_direct_buffer@@Base>
  4066ff:	test   rax,rax
  406702:	je     40681c <test_string@@Base+0x25c>
  406708:	cmp    DWORD PTR [rax+0x4],0x534e4f4d
  40670f:	jne    40683b <test_string@@Base+0x27b>
  406715:	mov    edx,DWORD PTR [rax]
  406717:	mov    rcx,rax
  40671a:	add    rcx,rdx
  40671d:	movsxd rax,DWORD PTR [rax+rdx*1]
  406721:	mov    rdx,rcx
  406724:	sub    rdx,rax
  406727:	cmp    WORD PTR [rdx],0xb
  40672b:	jbe    406775 <test_string@@Base+0x1b5>
  40672d:	neg    rax
  406730:	movzx  eax,WORD PTR [rcx+rax*1+0xa]
  406735:	test   rax,rax
  406738:	je     406775 <test_string@@Base+0x1b5>
  40673a:	lea    rdx,[rcx+rax*1]
  40673e:	mov    eax,DWORD PTR [rcx+rax*1]
  406741:	lea    rdi,[rax+rdx*1]
  406745:	add    rdi,0x4
  406749:	lea    rsi,[rip+0xf085]        # 4157d5 <_IO_stdin_used@@Base+0x7d5>
  406750:	call   4040e0 <strcmp@plt>
  406755:	test   eax,eax
  406757:	je     40676c <test_string@@Base+0x1ac>
  406759:	lea    rdi,[rip+0x10dd6]        # 417536 <_IO_stdin_used@@Base+0x2536>
  406760:	call   404060 <puts@plt>
  406765:	mov    eax,0xffffffff
  40676a:	jmp    40676e <test_string@@Base+0x1ae>
  40676c:	xor    eax,eax
  40676e:	add    rsp,0x8
  406772:	pop    rbx
  406773:	pop    rbp
  406774:	ret    
  406775:	lea    rdi,[rip+0xfbce]        # 41634a <_IO_stdin_used@@Base+0x134a>
  40677c:	jmp    406842 <test_string@@Base+0x282>
  406781:	lea    rdi,[rip+0xef88]        # 415710 <_IO_stdin_used@@Base+0x710>
  406788:	lea    rsi,[rip+0xeba5]        # 415334 <_IO_stdin_used@@Base+0x334>
  40678f:	lea    rcx,[rip+0xefa0]        # 415736 <_IO_stdin_used@@Base+0x736>
  406796:	mov    edx,0x438
  40679b:	call   4040a0 <__assert_fail@plt>
  4067a0:	lea    rdi,[rip+0xefb8]        # 41575f <_IO_stdin_used@@Base+0x75f>
  4067a7:	lea    rsi,[rip+0xeb86]        # 415334 <_IO_stdin_used@@Base+0x334>
  4067ae:	lea    rcx,[rip+0xef81]        # 415736 <_IO_stdin_used@@Base+0x736>
  4067b5:	mov    edx,0x43a
  4067ba:	call   4040a0 <__assert_fail@plt>
  4067bf:	lea    rdi,[rip+0xefc2]        # 415788 <_IO_stdin_used@@Base+0x788>
  4067c6:	lea    rsi,[rip+0xeb67]        # 415334 <_IO_stdin_used@@Base+0x334>
  4067cd:	lea    rcx,[rip+0xef62]        # 415736 <_IO_stdin_used@@Base+0x736>
  4067d4:	mov    edx,0x43c
  4067d9:	call   4040a0 <__assert_fail@plt>
  4067de:	lea    rdi,[rip+0xefca]        # 4157af <_IO_stdin_used@@Base+0x7af>
  4067e5:	lea    rsi,[rip+0xeb48]        # 415334 <_IO_stdin_used@@Base+0x334>
  4067ec:	lea    rcx,[rip+0xef43]        # 415736 <_IO_stdin_used@@Base+0x736>
  4067f3:	mov    edx,0x43e
  4067f8:	call   4040a0 <__assert_fail@plt>
  4067fd:	lea    rdi,[rip+0xf8e2]        # 4160e6 <_IO_stdin_used@@Base+0x10e6>
  406804:	lea    rsi,[rip+0xf79f]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  40680b:	lea    rcx,[rip+0xf976]        # 416188 <_IO_stdin_used@@Base+0x1188>
  406812:	mov    edx,0xeb
  406817:	call   4040a0 <__assert_fail@plt>
  40681c:	lea    rdi,[rip+0xf0c7]        # 4158ea <_IO_stdin_used@@Base+0x8ea>
  406823:	lea    rsi,[rip+0xeb0a]        # 415334 <_IO_stdin_used@@Base+0x334>
  40682a:	lea    rcx,[rip+0xef05]        # 415736 <_IO_stdin_used@@Base+0x736>
  406831:	mov    edx,0x445
  406836:	call   4040a0 <__assert_fail@plt>
  40683b:	lea    rdi,[rip+0xf5cf]        # 415e11 <_IO_stdin_used@@Base+0xe11>
  406842:	lea    rsi,[rip+0xf5ee]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  406849:	lea    rcx,[rip+0xfaa9]        # 4162f9 <_IO_stdin_used@@Base+0x12f9>
  406850:	mov    edx,0x2bb
  406855:	call   4040a0 <__assert_fail@plt>
  40685a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406860 <test_sort_find@@Base>:
  406860:	push   rbp
  406861:	push   r15
  406863:	push   r14
  406865:	push   r13
  406867:	push   r12
  406869:	push   rbx
  40686a:	sub    rsp,0x28
  40686e:	mov    rbx,rdi
  406871:	call   40e0f0 <flatcc_builder_reset@@Base>
  406876:	lea    rsi,[rip+0xe8cb]        # 415148 <_IO_stdin_used@@Base+0x148>
  40687d:	mov    rdi,rbx
  406880:	xor    edx,edx
  406882:	xor    ecx,ecx
  406884:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  406889:	test   eax,eax
  40688b:	jne    40689a <test_sort_find@@Base+0x3a>
  40688d:	mov    rdi,rbx
  406890:	mov    esi,0x24
  406895:	call   40ff20 <flatcc_builder_start_table@@Base>
  40689a:	lea    rsi,[rip+0xe8eb]        # 41518c <_IO_stdin_used@@Base+0x18c>
  4068a1:	mov    rdi,rbx
  4068a4:	call   412170 <flatcc_builder_create_string_str@@Base>
  4068a9:	test   eax,eax
  4068ab:	je     4068c3 <test_sort_find@@Base+0x63>
  4068ad:	mov    ebp,eax
  4068af:	mov    rdi,rbx
  4068b2:	mov    esi,0x3
  4068b7:	call   411140 <flatcc_builder_table_add_offset@@Base>
  4068bc:	test   rax,rax
  4068bf:	je     4068c3 <test_sort_find@@Base+0x63>
  4068c1:	mov    DWORD PTR [rax],ebp
  4068c3:	mov    rdi,rbx
  4068c6:	call   40fb30 <flatcc_builder_start_offset_vector@@Base>
  4068cb:	mov    rdi,rbx
  4068ce:	mov    esi,0x24
  4068d3:	call   40ff20 <flatcc_builder_start_table@@Base>
  4068d8:	lea    rsi,[rip+0xead0]        # 4153af <_IO_stdin_used@@Base+0x3af>
  4068df:	mov    rdi,rbx
  4068e2:	call   412170 <flatcc_builder_create_string_str@@Base>
  4068e7:	test   eax,eax
  4068e9:	je     406901 <test_sort_find@@Base+0xa1>
  4068eb:	mov    ebp,eax
  4068ed:	mov    rdi,rbx
  4068f0:	mov    esi,0x3
  4068f5:	call   411140 <flatcc_builder_table_add_offset@@Base>
  4068fa:	test   rax,rax
  4068fd:	je     406901 <test_sort_find@@Base+0xa1>
  4068ff:	mov    DWORD PTR [rax],ebp
  406901:	lea    rsi,[rip+0xe830]        # 415138 <_IO_stdin_used@@Base+0x138>
  406908:	mov    rdi,rbx
  40690b:	mov    edx,0x1
  406910:	call   4108c0 <flatcc_builder_check_required@@Base>
  406915:	test   eax,eax
  406917:	je     40731f <test_sort_find@@Base+0xabf>
  40691d:	mov    rdi,rbx
  406920:	call   410930 <flatcc_builder_end_table@@Base>
  406925:	test   eax,eax
  406927:	je     406933 <test_sort_find@@Base+0xd3>
  406929:	mov    rdi,rbx
  40692c:	mov    esi,eax
  40692e:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  406933:	mov    rdi,rbx
  406936:	mov    esi,0x24
  40693b:	call   40ff20 <flatcc_builder_start_table@@Base>
  406940:	lea    rsi,[rip+0x11051]        # 417998 <_IO_stdin_used@@Base+0x2998>
  406947:	mov    rdi,rbx
  40694a:	call   412170 <flatcc_builder_create_string_str@@Base>
  40694f:	test   eax,eax
  406951:	je     406969 <test_sort_find@@Base+0x109>
  406953:	mov    ebp,eax
  406955:	mov    rdi,rbx
  406958:	mov    esi,0x3
  40695d:	call   411140 <flatcc_builder_table_add_offset@@Base>
  406962:	test   rax,rax
  406965:	je     406969 <test_sort_find@@Base+0x109>
  406967:	mov    DWORD PTR [rax],ebp
  406969:	lea    rsi,[rip+0xe7c8]        # 415138 <_IO_stdin_used@@Base+0x138>
  406970:	mov    rdi,rbx
  406973:	mov    edx,0x1
  406978:	call   4108c0 <flatcc_builder_check_required@@Base>
  40697d:	test   eax,eax
  40697f:	je     40731f <test_sort_find@@Base+0xabf>
  406985:	mov    rdi,rbx
  406988:	call   410930 <flatcc_builder_end_table@@Base>
  40698d:	test   eax,eax
  40698f:	je     40699b <test_sort_find@@Base+0x13b>
  406991:	mov    rdi,rbx
  406994:	mov    esi,eax
  406996:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  40699b:	mov    rdi,rbx
  40699e:	mov    esi,0x24
  4069a3:	call   40ff20 <flatcc_builder_start_table@@Base>
  4069a8:	lea    rsi,[rip+0x10fc1]        # 417970 <_IO_stdin_used@@Base+0x2970>
  4069af:	mov    rdi,rbx
  4069b2:	call   412170 <flatcc_builder_create_string_str@@Base>
  4069b7:	test   eax,eax
  4069b9:	je     4069d1 <test_sort_find@@Base+0x171>
  4069bb:	mov    ebp,eax
  4069bd:	mov    rdi,rbx
  4069c0:	mov    esi,0x3
  4069c5:	call   411140 <flatcc_builder_table_add_offset@@Base>
  4069ca:	test   rax,rax
  4069cd:	je     4069d1 <test_sort_find@@Base+0x171>
  4069cf:	mov    DWORD PTR [rax],ebp
  4069d1:	lea    rsi,[rip+0xe760]        # 415138 <_IO_stdin_used@@Base+0x138>
  4069d8:	mov    rdi,rbx
  4069db:	mov    edx,0x1
  4069e0:	call   4108c0 <flatcc_builder_check_required@@Base>
  4069e5:	test   eax,eax
  4069e7:	je     40731f <test_sort_find@@Base+0xabf>
  4069ed:	mov    rdi,rbx
  4069f0:	call   410930 <flatcc_builder_end_table@@Base>
  4069f5:	test   eax,eax
  4069f7:	je     406a03 <test_sort_find@@Base+0x1a3>
  4069f9:	mov    rdi,rbx
  4069fc:	mov    esi,eax
  4069fe:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  406a03:	mov    rdi,rbx
  406a06:	mov    esi,0x24
  406a0b:	call   40ff20 <flatcc_builder_start_table@@Base>
  406a10:	lea    rsi,[rip+0xedc6]        # 4157dd <_IO_stdin_used@@Base+0x7dd>
  406a17:	mov    rdi,rbx
  406a1a:	call   412170 <flatcc_builder_create_string_str@@Base>
  406a1f:	test   eax,eax
  406a21:	je     406a39 <test_sort_find@@Base+0x1d9>
  406a23:	mov    ebp,eax
  406a25:	mov    rdi,rbx
  406a28:	mov    esi,0x3
  406a2d:	call   411140 <flatcc_builder_table_add_offset@@Base>
  406a32:	test   rax,rax
  406a35:	je     406a39 <test_sort_find@@Base+0x1d9>
  406a37:	mov    DWORD PTR [rax],ebp
  406a39:	lea    rsi,[rip+0xe6f8]        # 415138 <_IO_stdin_used@@Base+0x138>
  406a40:	mov    rdi,rbx
  406a43:	mov    edx,0x1
  406a48:	call   4108c0 <flatcc_builder_check_required@@Base>
  406a4d:	test   eax,eax
  406a4f:	je     40731f <test_sort_find@@Base+0xabf>
  406a55:	mov    rdi,rbx
  406a58:	call   410930 <flatcc_builder_end_table@@Base>
  406a5d:	test   eax,eax
  406a5f:	je     406a6b <test_sort_find@@Base+0x20b>
  406a61:	mov    rdi,rbx
  406a64:	mov    esi,eax
  406a66:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  406a6b:	mov    rdi,rbx
  406a6e:	mov    esi,0x24
  406a73:	call   40ff20 <flatcc_builder_start_table@@Base>
  406a78:	lea    rsi,[rip+0x10ef1]        # 417970 <_IO_stdin_used@@Base+0x2970>
  406a7f:	mov    rdi,rbx
  406a82:	call   412170 <flatcc_builder_create_string_str@@Base>
  406a87:	test   eax,eax
  406a89:	je     406aa1 <test_sort_find@@Base+0x241>
  406a8b:	mov    ebp,eax
  406a8d:	mov    rdi,rbx
  406a90:	mov    esi,0x3
  406a95:	call   411140 <flatcc_builder_table_add_offset@@Base>
  406a9a:	test   rax,rax
  406a9d:	je     406aa1 <test_sort_find@@Base+0x241>
  406a9f:	mov    DWORD PTR [rax],ebp
  406aa1:	lea    rsi,[rip+0xe690]        # 415138 <_IO_stdin_used@@Base+0x138>
  406aa8:	mov    rdi,rbx
  406aab:	mov    edx,0x1
  406ab0:	call   4108c0 <flatcc_builder_check_required@@Base>
  406ab5:	test   eax,eax
  406ab7:	je     40731f <test_sort_find@@Base+0xabf>
  406abd:	mov    rdi,rbx
  406ac0:	call   410930 <flatcc_builder_end_table@@Base>
  406ac5:	test   eax,eax
  406ac7:	je     406ad3 <test_sort_find@@Base+0x273>
  406ac9:	mov    rdi,rbx
  406acc:	mov    esi,eax
  406ace:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  406ad3:	mov    rdi,rbx
  406ad6:	call   40fcf0 <flatcc_builder_end_offset_vector@@Base>
  406adb:	test   eax,eax
  406add:	je     406af5 <test_sort_find@@Base+0x295>
  406adf:	mov    ebp,eax
  406ae1:	mov    rdi,rbx
  406ae4:	mov    esi,0xb
  406ae9:	call   411140 <flatcc_builder_table_add_offset@@Base>
  406aee:	test   rax,rax
  406af1:	je     406af5 <test_sort_find@@Base+0x295>
  406af3:	mov    DWORD PTR [rax],ebp
  406af5:	lea    rsi,[rip+0xe63c]        # 415138 <_IO_stdin_used@@Base+0x138>
  406afc:	mov    rdi,rbx
  406aff:	mov    edx,0x1
  406b04:	call   4108c0 <flatcc_builder_check_required@@Base>
  406b09:	test   eax,eax
  406b0b:	je     40731f <test_sort_find@@Base+0xabf>
  406b11:	mov    rdi,rbx
  406b14:	call   410930 <flatcc_builder_end_table@@Base>
  406b19:	mov    rdi,rbx
  406b1c:	mov    esi,eax
  406b1e:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  406b23:	lea    rsi,[rsp+0x20]
  406b28:	mov    rdi,rbx
  406b2b:	call   412610 <flatcc_builder_finalize_aligned_buffer@@Base>
  406b30:	mov    rbx,rax
  406b33:	mov    rdx,QWORD PTR [rsp+0x20]
  406b38:	mov    r15,QWORD PTR [rip+0x174b9]        # 41dff8 <stderr@GLIBC_2.2.5>
  406b3f:	mov    rcx,QWORD PTR [r15]
  406b42:	lea    rdi,[rip+0xec9a]        # 4157e3 <_IO_stdin_used@@Base+0x7e3>
  406b49:	mov    rsi,rax
  406b4c:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  406b51:	test   rbx,rbx
  406b54:	je     40733e <test_sort_find@@Base+0xade>
  406b5a:	cmp    DWORD PTR [rbx+0x4],0x534e4f4d
  406b61:	jne    40733e <test_sort_find@@Base+0xade>
  406b67:	mov    ecx,DWORD PTR [rbx]
  406b69:	lea    rax,[rbx+rcx*1]
  406b6d:	mov    QWORD PTR [rsp],rbx
  406b71:	mov    QWORD PTR [rsp+0x8],rcx
  406b76:	movsxd rcx,DWORD PTR [rbx+rcx*1]
  406b7a:	mov    rdx,rax
  406b7d:	sub    rdx,rcx
  406b80:	cmp    WORD PTR [rdx],0x1b
  406b84:	jbe    40735d <test_sort_find@@Base+0xafd>
  406b8a:	neg    rcx
  406b8d:	movzx  ecx,WORD PTR [rax+rcx*1+0x1a]
  406b92:	test   rcx,rcx
  406b95:	je     40735d <test_sort_find@@Base+0xafd>
  406b9b:	mov    edx,DWORD PTR [rax+rcx*1]
  406b9e:	mov    QWORD PTR [rsp+0x18],rcx
  406ba3:	add    rax,rcx
  406ba6:	lea    r13,[rdx+rax*1]
  406baa:	add    r13,0x4
  406bae:	mov    QWORD PTR [rsp+0x10],rdx
  406bb3:	mov    r14d,DWORD PTR [rdx+rax*1]
  406bb7:	test   r14,r14
  406bba:	je     406c66 <test_sort_find@@Base+0x406>
  406bc0:	lea    rbx,[r14-0x1]
  406bc4:	mov    rbp,r14
  406bc7:	shr    rbp,1
  406bca:	nop    WORD PTR [rax+rax*1+0x0]
  406bd0:	mov    rdi,r13
  406bd3:	mov    rsi,rbp
  406bd6:	mov    rdx,rbx
  406bd9:	call   40daa0 <main@@Base+0xbd0>
  406bde:	dec    rbp
  406be1:	cmp    rbp,0xffffffffffffffff
  406be5:	jne    406bd0 <test_sort_find@@Base+0x370>
  406be7:	test   rbx,rbx
  406bea:	je     406c66 <test_sort_find@@Base+0x406>
  406bec:	mov    rax,QWORD PTR [rsp+0x10]
  406bf1:	lea    rbp,[rax+r14*4]
  406bf5:	mov    rbx,r14
  406bf8:	add    rbx,0xfffffffffffffffe
  406bfc:	add    rbp,QWORD PTR [rsp+0x18]
  406c01:	add    rbp,QWORD PTR [rsp+0x8]
  406c06:	add    rbp,QWORD PTR [rsp]
  406c0a:	lea    eax,[r14*4+0x0]
  406c12:	lea    r12d,[r14*4-0x4]
  406c1a:	mov    r14d,0x4
  406c20:	sub    r14d,eax
  406c23:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406c2d:	nop    DWORD PTR [rax]
  406c30:	mov    eax,DWORD PTR [rbp+0x0]
  406c33:	add    eax,r12d
  406c36:	mov    ecx,DWORD PTR [r13+0x0]
  406c3a:	add    ecx,r14d
  406c3d:	mov    DWORD PTR [r13+0x0],eax
  406c41:	mov    DWORD PTR [rbp+0x0],ecx
  406c44:	mov    rdi,r13
  406c47:	xor    esi,esi
  406c49:	mov    rdx,rbx
  406c4c:	call   40daa0 <main@@Base+0xbd0>
  406c51:	dec    rbx
  406c54:	add    rbp,0xfffffffffffffffc
  406c58:	add    r12d,0xfffffffc
  406c5c:	add    r14d,0x4
  406c60:	cmp    rbx,0xffffffffffffffff
  406c64:	jne    406c30 <test_sort_find@@Base+0x3d0>
  406c66:	mov    rdx,QWORD PTR [rsp+0x20]
  406c6b:	mov    rcx,QWORD PTR [r15]
  406c6e:	lea    rdi,[rip+0xeb70]        # 4157e5 <_IO_stdin_used@@Base+0x7e5>
  406c75:	mov    rbp,QWORD PTR [rsp]
  406c79:	mov    rsi,rbp
  406c7c:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  406c81:	cmp    DWORD PTR [r13-0x4],0x5
  406c86:	jne    406cde <test_sort_find@@Base+0x47e>
  406c88:	mov    ecx,DWORD PTR [r13+0x0]
  406c8c:	lea    rax,[rcx+r13*1]
  406c90:	movsxd rcx,DWORD PTR [r13+rcx*1+0x0]
  406c95:	mov    rdx,rax
  406c98:	sub    rdx,rcx
  406c9b:	cmp    WORD PTR [rdx],0xc
  406c9f:	jb     40737c <test_sort_find@@Base+0xb1c>
  406ca5:	neg    rcx
  406ca8:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  406cad:	test   rcx,rcx
  406cb0:	je     40737c <test_sort_find@@Base+0xb1c>
  406cb6:	lea    rdx,[rax+rcx*1]
  406cba:	mov    eax,DWORD PTR [rax+rcx*1]
  406cbd:	lea    rdi,[rax+rdx*1]
  406cc1:	add    rdi,0x4
  406cc5:	lea    rsi,[rip+0xeb11]        # 4157dd <_IO_stdin_used@@Base+0x7dd>
  406ccc:	call   4040e0 <strcmp@plt>
  406cd1:	test   eax,eax
  406cd3:	je     406d0a <test_sort_find@@Base+0x4aa>
  406cd5:	lea    rdi,[rip+0x109d4]        # 4176b0 <_IO_stdin_used@@Base+0x26b0>
  406cdc:	jmp    406ce5 <test_sort_find@@Base+0x485>
  406cde:	lea    rdi,[rip+0x109e8]        # 4176cd <_IO_stdin_used@@Base+0x26cd>
  406ce5:	call   404060 <puts@plt>
  406cea:	mov    r15d,0xffffffff
  406cf0:	mov    rdi,rbp
  406cf3:	call   412740 <flatcc_builder_aligned_free@@Base>
  406cf8:	mov    eax,r15d
  406cfb:	add    rsp,0x28
  406cff:	pop    rbx
  406d00:	pop    r12
  406d02:	pop    r13
  406d04:	pop    r14
  406d06:	pop    r15
  406d08:	pop    rbp
  406d09:	ret    
  406d0a:	mov    eax,DWORD PTR [r13+0x4]
  406d0e:	lea    rbx,[rax+r13*1]
  406d12:	add    rbx,0x4
  406d16:	movsxd rax,DWORD PTR [r13+rax*1+0x4]
  406d1b:	mov    rcx,rbx
  406d1e:	sub    rcx,rax
  406d21:	cmp    WORD PTR [rcx],0xc
  406d25:	jb     40737c <test_sort_find@@Base+0xb1c>
  406d2b:	neg    rax
  406d2e:	movzx  eax,WORD PTR [rbx+rax*1+0xa]
  406d33:	test   rax,rax
  406d36:	je     40737c <test_sort_find@@Base+0xb1c>
  406d3c:	lea    rcx,[rbx+rax*1]
  406d40:	mov    eax,DWORD PTR [rbx+rax*1]
  406d43:	lea    rdi,[rax+rcx*1]
  406d47:	add    rdi,0x4
  406d4b:	lea    rsi,[rip+0x10c1e]        # 417970 <_IO_stdin_used@@Base+0x2970>
  406d52:	call   4040e0 <strcmp@plt>
  406d57:	test   eax,eax
  406d59:	je     406d64 <test_sort_find@@Base+0x504>
  406d5b:	lea    rdi,[rip+0x10931]        # 417693 <_IO_stdin_used@@Base+0x2693>
  406d62:	jmp    406ce5 <test_sort_find@@Base+0x485>
  406d64:	mov    eax,DWORD PTR [r13+0x8]
  406d68:	lea    r14,[rax+r13*1]
  406d6c:	add    r14,0x8
  406d70:	movsxd rax,DWORD PTR [r13+rax*1+0x8]
  406d75:	mov    rcx,r14
  406d78:	sub    rcx,rax
  406d7b:	cmp    WORD PTR [rcx],0xc
  406d7f:	jb     40737c <test_sort_find@@Base+0xb1c>
  406d85:	neg    rax
  406d88:	movzx  eax,WORD PTR [r14+rax*1+0xa]
  406d8e:	test   rax,rax
  406d91:	je     40737c <test_sort_find@@Base+0xb1c>
  406d97:	lea    rcx,[r14+rax*1]
  406d9b:	mov    eax,DWORD PTR [r14+rax*1]
  406d9f:	lea    rdi,[rax+rcx*1]
  406da3:	add    rdi,0x4
  406da7:	lea    rsi,[rip+0x10bc2]        # 417970 <_IO_stdin_used@@Base+0x2970>
  406dae:	call   4040e0 <strcmp@plt>
  406db3:	test   eax,eax
  406db5:	je     406dc3 <test_sort_find@@Base+0x563>
  406db7:	lea    rdi,[rip+0x108b8]        # 417676 <_IO_stdin_used@@Base+0x2676>
  406dbe:	jmp    406ce5 <test_sort_find@@Base+0x485>
  406dc3:	mov    ecx,DWORD PTR [r13+0xc]
  406dc7:	lea    rax,[rcx+r13*1]
  406dcb:	add    rax,0xc
  406dcf:	movsxd rcx,DWORD PTR [r13+rcx*1+0xc]
  406dd4:	mov    rdx,rax
  406dd7:	sub    rdx,rcx
  406dda:	cmp    WORD PTR [rdx],0xc
  406dde:	jb     40737c <test_sort_find@@Base+0xb1c>
  406de4:	neg    rcx
  406de7:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  406dec:	test   rcx,rcx
  406def:	je     40737c <test_sort_find@@Base+0xb1c>
  406df5:	lea    rdx,[rax+rcx*1]
  406df9:	mov    eax,DWORD PTR [rax+rcx*1]
  406dfc:	lea    rdi,[rax+rdx*1]
  406e00:	add    rdi,0x4
  406e04:	lea    rsi,[rip+0x10b8d]        # 417998 <_IO_stdin_used@@Base+0x2998>
  406e0b:	call   4040e0 <strcmp@plt>
  406e10:	test   eax,eax
  406e12:	je     406e20 <test_sort_find@@Base+0x5c0>
  406e14:	lea    rdi,[rip+0x1083e]        # 417659 <_IO_stdin_used@@Base+0x2659>
  406e1b:	jmp    406ce5 <test_sort_find@@Base+0x485>
  406e20:	mov    ecx,DWORD PTR [r13+0x10]
  406e24:	lea    rax,[rcx+r13*1]
  406e28:	add    rax,0x10
  406e2c:	movsxd rcx,DWORD PTR [r13+rcx*1+0x10]
  406e31:	mov    rdx,rax
  406e34:	sub    rdx,rcx
  406e37:	cmp    WORD PTR [rdx],0xc
  406e3b:	jb     40737c <test_sort_find@@Base+0xb1c>
  406e41:	neg    rcx
  406e44:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  406e49:	test   rcx,rcx
  406e4c:	je     40737c <test_sort_find@@Base+0xb1c>
  406e52:	lea    rdx,[rax+rcx*1]
  406e56:	mov    eax,DWORD PTR [rax+rcx*1]
  406e59:	lea    rdi,[rax+rdx*1]
  406e5d:	add    rdi,0x4
  406e61:	lea    rsi,[rip+0xe547]        # 4153af <_IO_stdin_used@@Base+0x3af>
  406e68:	call   4040e0 <strcmp@plt>
  406e6d:	test   eax,eax
  406e6f:	je     406e7d <test_sort_find@@Base+0x61d>
  406e71:	lea    rdi,[rip+0x107c4]        # 41763c <_IO_stdin_used@@Base+0x263c>
  406e78:	jmp    406ce5 <test_sort_find@@Base+0x485>
  406e7d:	cmp    rbx,r14
  406e80:	je     40702e <test_sort_find@@Base+0x7ce>
  406e86:	lea    rsi,[rip+0x10b0b]        # 417998 <_IO_stdin_used@@Base+0x2998>
  406e8d:	mov    rdi,r13
  406e90:	call   4073c0 <test_sort_find@@Base+0xb60>
  406e95:	cmp    rax,0x3
  406e99:	jne    40703a <test_sort_find@@Base+0x7da>
  406e9f:	mov    r12d,DWORD PTR [r13-0x4]
  406ea3:	test   r12,r12
  406ea6:	je     407046 <test_sort_find@@Base+0x7e6>
  406eac:	mov    r15,r12
  406eaf:	xor    r14d,r14d
  406eb2:	dec    r15
  406eb5:	jne    406ec8 <test_sort_find@@Base+0x668>
  406eb7:	jmp    406f72 <test_sort_find@@Base+0x712>
  406ebc:	mov    r15,rbp
  406ebf:	cmp    r15,r14
  406ec2:	jbe    406f63 <test_sort_find@@Base+0x703>
  406ec8:	mov    rbp,r15
  406ecb:	sub    rbp,r14
  406ece:	shr    rbp,1
  406ed1:	add    rbp,r14
  406ed4:	cmp    rbp,r12
  406ed7:	jae    40739b <test_sort_find@@Base+0xb3b>
  406edd:	lea    rcx,[rbp*4+0x0]
  406ee5:	add    rcx,r13
  406ee8:	mov    edx,DWORD PTR [r13+rbp*4+0x0]
  406eed:	lea    rax,[rcx+rdx*1]
  406ef1:	movsxd rcx,DWORD PTR [rdx+rcx*1]
  406ef5:	mov    rdx,rax
  406ef8:	sub    rdx,rcx
  406efb:	cmp    WORD PTR [rdx],0xc
  406eff:	jb     40737c <test_sort_find@@Base+0xb1c>
  406f05:	neg    rcx
  406f08:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  406f0d:	test   rcx,rcx
  406f10:	je     40737c <test_sort_find@@Base+0xb1c>
  406f16:	lea    rdx,[rax+rcx*1]
  406f1a:	mov    eax,DWORD PTR [rax+rcx*1]
  406f1d:	lea    rdi,[rax+rdx*1]
  406f21:	add    rdi,0x4
  406f25:	mov    edx,DWORD PTR [rax+rdx*1]
  406f28:	cmp    edx,0x5
  406f2b:	setb   bl
  406f2e:	mov    eax,0x5
  406f33:	cmovae edx,eax
  406f36:	lea    rsi,[rip+0xe8ee]        # 41582b <_IO_stdin_used@@Base+0x82b>
  406f3d:	call   404050 <strncmp@plt>
  406f42:	test   eax,eax
  406f44:	setne  al
  406f47:	setle  cl
  406f4a:	or     al,bl
  406f4c:	test   al,cl
  406f4e:	je     406ebc <test_sort_find@@Base+0x65c>
  406f54:	inc    rbp
  406f57:	mov    r14,rbp
  406f5a:	cmp    r15,r14
  406f5d:	ja     406ec8 <test_sort_find@@Base+0x668>
  406f63:	jne    407046 <test_sort_find@@Base+0x7e6>
  406f69:	cmp    r14,r12
  406f6c:	jae    40739b <test_sort_find@@Base+0xb3b>
  406f72:	lea    rcx,[r14*4+0x0]
  406f7a:	add    rcx,r13
  406f7d:	mov    edx,DWORD PTR [r13+r14*4+0x0]
  406f82:	lea    rax,[rcx+rdx*1]
  406f86:	movsxd rcx,DWORD PTR [rdx+rcx*1]
  406f8a:	mov    rdx,rax
  406f8d:	sub    rdx,rcx
  406f90:	cmp    WORD PTR [rdx],0xc
  406f94:	jb     40737c <test_sort_find@@Base+0xb1c>
  406f9a:	neg    rcx
  406f9d:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  406fa2:	test   rcx,rcx
  406fa5:	je     40737c <test_sort_find@@Base+0xb1c>
  406fab:	lea    rdx,[rax+rcx*1]
  406faf:	mov    eax,DWORD PTR [rax+rcx*1]
  406fb2:	lea    rdi,[rax+rdx*1]
  406fb6:	add    rdi,0x4
  406fba:	mov    ebx,DWORD PTR [rax+rdx*1]
  406fbd:	xor    ebp,ebp
  406fbf:	cmp    ebx,0x5
  406fc2:	mov    edx,0x5
  406fc7:	cmovb  edx,ebx
  406fca:	lea    rsi,[rip+0xe85a]        # 41582b <_IO_stdin_used@@Base+0x82b>
  406fd1:	seta   bpl
  406fd5:	call   404050 <strncmp@plt>
  406fda:	xor    ecx,ecx
  406fdc:	cmp    eax,0x1
  406fdf:	sbb    ecx,ecx
  406fe1:	or     ecx,eax
  406fe3:	test   eax,eax
  406fe5:	cmovne ebp,ecx
  406fe8:	cmp    ebx,0x5
  406feb:	cmovb  ebp,ecx
  406fee:	cmp    r14,0x3
  406ff2:	jne    407046 <test_sort_find@@Base+0x7e6>
  406ff4:	test   ebp,ebp
  406ff6:	jne    407046 <test_sort_find@@Base+0x7e6>
  406ff8:	lea    rsi,[rip+0x10999]        # 417998 <_IO_stdin_used@@Base+0x2998>
  406fff:	mov    rdi,r13
  407002:	call   4073c0 <test_sort_find@@Base+0xb60>
  407007:	cmp    rax,0x3
  40700b:	jne    4071be <test_sort_find@@Base+0x95e>
  407011:	mov    r12d,DWORD PTR [r13-0x4]
  407015:	test   r12,r12
  407018:	je     4071ca <test_sort_find@@Base+0x96a>
  40701e:	mov    r15,r12
  407021:	xor    r14d,r14d
  407024:	dec    r15
  407027:	jne    40706d <test_sort_find@@Base+0x80d>
  407029:	jmp    407117 <test_sort_find@@Base+0x8b7>
  40702e:	lea    rdi,[rip+0x105c0]        # 4175f5 <_IO_stdin_used@@Base+0x25f5>
  407035:	jmp    406ce5 <test_sort_find@@Base+0x485>
  40703a:	lea    rdi,[rip+0x10589]        # 4175ca <_IO_stdin_used@@Base+0x25ca>
  407041:	jmp    406ce5 <test_sort_find@@Base+0x485>
  407046:	lea    rdi,[rip+0x1054b]        # 417598 <_IO_stdin_used@@Base+0x2598>
  40704d:	call   404060 <puts@plt>
  407052:	mov    r15d,0xffffffff
  407058:	mov    rbp,QWORD PTR [rsp]
  40705c:	jmp    406cf0 <test_sort_find@@Base+0x490>
  407061:	mov    r15,rbp
  407064:	cmp    r15,r14
  407067:	jbe    407108 <test_sort_find@@Base+0x8a8>
  40706d:	mov    rbp,r15
  407070:	sub    rbp,r14
  407073:	shr    rbp,1
  407076:	add    rbp,r14
  407079:	cmp    rbp,r12
  40707c:	jae    40739b <test_sort_find@@Base+0xb3b>
  407082:	lea    rcx,[rbp*4+0x0]
  40708a:	add    rcx,r13
  40708d:	mov    edx,DWORD PTR [r13+rbp*4+0x0]
  407092:	lea    rax,[rcx+rdx*1]
  407096:	movsxd rcx,DWORD PTR [rdx+rcx*1]
  40709a:	mov    rdx,rax
  40709d:	sub    rdx,rcx
  4070a0:	cmp    WORD PTR [rdx],0xc
  4070a4:	jb     40737c <test_sort_find@@Base+0xb1c>
  4070aa:	neg    rcx
  4070ad:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  4070b2:	test   rcx,rcx
  4070b5:	je     40737c <test_sort_find@@Base+0xb1c>
  4070bb:	lea    rdx,[rax+rcx*1]
  4070bf:	mov    eax,DWORD PTR [rax+rcx*1]
  4070c2:	lea    rdi,[rax+rdx*1]
  4070c6:	add    rdi,0x4
  4070ca:	mov    edx,DWORD PTR [rax+rdx*1]
  4070cd:	cmp    edx,0x5
  4070d0:	setb   bl
  4070d3:	mov    eax,0x5
  4070d8:	cmovae edx,eax
  4070db:	lea    rsi,[rip+0xe750]        # 415832 <_IO_stdin_used@@Base+0x832>
  4070e2:	call   404050 <strncmp@plt>
  4070e7:	test   eax,eax
  4070e9:	setne  al
  4070ec:	setle  cl
  4070ef:	or     al,bl
  4070f1:	test   al,cl
  4070f3:	je     407061 <test_sort_find@@Base+0x801>
  4070f9:	inc    rbp
  4070fc:	mov    r14,rbp
  4070ff:	cmp    r15,r14
  407102:	ja     40706d <test_sort_find@@Base+0x80d>
  407108:	jne    4071ca <test_sort_find@@Base+0x96a>
  40710e:	cmp    r14,r12
  407111:	jae    40739b <test_sort_find@@Base+0xb3b>
  407117:	lea    rcx,[r14*4+0x0]
  40711f:	add    rcx,r13
  407122:	mov    edx,DWORD PTR [r13+r14*4+0x0]
  407127:	lea    rax,[rcx+rdx*1]
  40712b:	movsxd rcx,DWORD PTR [rdx+rcx*1]
  40712f:	mov    rdx,rax
  407132:	sub    rdx,rcx
  407135:	cmp    WORD PTR [rdx],0xc
  407139:	jb     40737c <test_sort_find@@Base+0xb1c>
  40713f:	neg    rcx
  407142:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  407147:	test   rcx,rcx
  40714a:	je     40737c <test_sort_find@@Base+0xb1c>
  407150:	lea    rdx,[rax+rcx*1]
  407154:	mov    eax,DWORD PTR [rax+rcx*1]
  407157:	lea    rdi,[rax+rdx*1]
  40715b:	add    rdi,0x4
  40715f:	mov    ebx,DWORD PTR [rax+rdx*1]
  407162:	xor    ebp,ebp
  407164:	cmp    ebx,0x5
  407167:	mov    edx,0x5
  40716c:	cmovb  edx,ebx
  40716f:	lea    rsi,[rip+0xe6bc]        # 415832 <_IO_stdin_used@@Base+0x832>
  407176:	seta   bpl
  40717a:	call   404050 <strncmp@plt>
  40717f:	xor    ecx,ecx
  407181:	cmp    eax,0x1
  407184:	sbb    ecx,ecx
  407186:	or     ecx,eax
  407188:	test   eax,eax
  40718a:	cmovne ebp,ecx
  40718d:	cmp    ebx,0x5
  407190:	cmovb  ebp,ecx
  407193:	cmp    r14,0x3
  407197:	jne    4071ca <test_sort_find@@Base+0x96a>
  407199:	test   ebp,ebp
  40719b:	jne    4071ca <test_sort_find@@Base+0x96a>
  40719d:	lea    rsi,[rip+0xe695]        # 415839 <_IO_stdin_used@@Base+0x839>
  4071a4:	mov    rdi,r13
  4071a7:	call   4073c0 <test_sort_find@@Base+0xb60>
  4071ac:	cmp    rax,0xffffffffffffffff
  4071b0:	je     4071d6 <test_sort_find@@Base+0x976>
  4071b2:	lea    rdi,[rip+0x1091d]        # 417ad6 <_IO_stdin_used@@Base+0x2ad6>
  4071b9:	jmp    40704d <test_sort_find@@Base+0x7ed>
  4071be:	lea    rdi,[rip+0x103b7]        # 41757c <_IO_stdin_used@@Base+0x257c>
  4071c5:	jmp    40704d <test_sort_find@@Base+0x7ed>
  4071ca:	lea    rdi,[rip+0x10388]        # 417559 <_IO_stdin_used@@Base+0x2559>
  4071d1:	jmp    40704d <test_sort_find@@Base+0x7ed>
  4071d6:	lea    rsi,[rip+0xe600]        # 4157dd <_IO_stdin_used@@Base+0x7dd>
  4071dd:	mov    rdi,r13
  4071e0:	call   4073c0 <test_sort_find@@Base+0xb60>
  4071e5:	test   rax,rax
  4071e8:	je     4071f6 <test_sort_find@@Base+0x996>
  4071ea:	lea    rdi,[rip+0x10358]        # 417549 <_IO_stdin_used@@Base+0x2549>
  4071f1:	jmp    40704d <test_sort_find@@Base+0x7ed>
  4071f6:	lea    rsi,[rip+0x10773]        # 417970 <_IO_stdin_used@@Base+0x2970>
  4071fd:	mov    rdi,r13
  407200:	call   4073c0 <test_sort_find@@Base+0xb60>
  407205:	cmp    rax,0x1
  407209:	jne    4072e6 <test_sort_find@@Base+0xa86>
  40720f:	lea    rsi,[rip+0xe199]        # 4153af <_IO_stdin_used@@Base+0x3af>
  407216:	mov    rdi,r13
  407219:	call   4073c0 <test_sort_find@@Base+0xb60>
  40721e:	cmp    rax,0x4
  407222:	jne    4072f2 <test_sort_find@@Base+0xa92>
  407228:	mov    r12d,DWORD PTR [r13-0x4]
  40722c:	xor    r15d,r15d
  40722f:	test   r12,r12
  407232:	je     407316 <test_sort_find@@Base+0xab6>
  407238:	lea    rbx,[r12-0x1]
  40723d:	mov    rbp,r12
  407240:	shr    rbp,1
  407243:	mov    rdi,r13
  407246:	mov    rsi,rbp
  407249:	mov    rdx,rbx
  40724c:	call   40daa0 <main@@Base+0xbd0>
  407251:	dec    rbp
  407254:	cmp    rbp,0xffffffffffffffff
  407258:	jne    407243 <test_sort_find@@Base+0x9e3>
  40725a:	test   rbx,rbx
  40725d:	mov    rbp,QWORD PTR [rsp]
  407261:	je     406cf0 <test_sort_find@@Base+0x490>
  407267:	mov    rax,QWORD PTR [rsp+0x10]
  40726c:	lea    rax,[rax+r12*4]
  407270:	mov    rcx,r12
  407273:	add    rcx,0xfffffffffffffffe
  407277:	mov    rdx,rcx
  40727a:	add    rax,QWORD PTR [rsp+0x18]
  40727f:	add    rax,QWORD PTR [rsp+0x8]
  407284:	mov    r14,rbp
  407287:	add    r14,rax
  40728a:	lea    eax,[r12*4+0x0]
  407292:	lea    ecx,[r12*4-0x4]
  40729a:	mov    ebx,0x4
  40729f:	sub    ebx,eax
  4072a1:	mov    eax,DWORD PTR [r14]
  4072a4:	mov    DWORD PTR [rsp+0x8],ecx
  4072a8:	add    eax,ecx
  4072aa:	mov    ecx,DWORD PTR [r13+0x0]
  4072ae:	add    ecx,ebx
  4072b0:	mov    DWORD PTR [r13+0x0],eax
  4072b4:	mov    DWORD PTR [r14],ecx
  4072b7:	xor    r15d,r15d
  4072ba:	mov    rdi,r13
  4072bd:	xor    esi,esi
  4072bf:	mov    r12,rdx
  4072c2:	call   40daa0 <main@@Base+0xbd0>
  4072c7:	dec    r12
  4072ca:	add    r14,0xfffffffffffffffc
  4072ce:	mov    ecx,DWORD PTR [rsp+0x8]
  4072d2:	add    ecx,0xfffffffc
  4072d5:	add    ebx,0x4
  4072d8:	mov    rdx,r12
  4072db:	cmp    r12,0xffffffffffffffff
  4072df:	jne    4072a1 <test_sort_find@@Base+0xa41>
  4072e1:	jmp    406cf0 <test_sort_find@@Base+0x490>
  4072e6:	mov    rbx,rax
  4072e9:	lea    rdi,[rip+0x1077d]        # 417a6d <_IO_stdin_used@@Base+0x2a6d>
  4072f0:	jmp    4072fc <test_sort_find@@Base+0xa9c>
  4072f2:	mov    rbx,rax
  4072f5:	lea    rdi,[rip+0x107c8]        # 417ac4 <_IO_stdin_used@@Base+0x2ac4>
  4072fc:	call   404060 <puts@plt>
  407301:	lea    rdi,[rip+0xe538]        # 415840 <_IO_stdin_used@@Base+0x840>
  407308:	mov    esi,ebx
  40730a:	xor    eax,eax
  40730c:	call   404080 <printf@plt>
  407311:	jmp    407052 <test_sort_find@@Base+0x7f2>
  407316:	mov    rbp,QWORD PTR [rsp]
  40731a:	jmp    406cf0 <test_sort_find@@Base+0x490>
  40731f:	lea    rdi,[rip+0xedc0]        # 4160e6 <_IO_stdin_used@@Base+0x10e6>
  407326:	lea    rsi,[rip+0xec7d]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  40732d:	lea    rcx,[rip+0xee54]        # 416188 <_IO_stdin_used@@Base+0x1188>
  407334:	mov    edx,0xeb
  407339:	call   4040a0 <__assert_fail@plt>
  40733e:	lea    rdi,[rip+0xeacc]        # 415e11 <_IO_stdin_used@@Base+0xe11>
  407345:	lea    rsi,[rip+0xeaeb]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40734c:	lea    rcx,[rip+0xf16c]        # 4164bf <_IO_stdin_used@@Base+0x14bf>
  407353:	mov    edx,0x2c7
  407358:	call   4040a0 <__assert_fail@plt>
  40735d:	lea    rdi,[rip+0xe497]        # 4157fb <_IO_stdin_used@@Base+0x7fb>
  407364:	lea    rsi,[rip+0xdfc9]        # 415334 <_IO_stdin_used@@Base+0x334>
  40736b:	lea    rcx,[rip+0xe492]        # 415804 <_IO_stdin_used@@Base+0x804>
  407372:	mov    edx,0x47b
  407377:	call   4040a0 <__assert_fail@plt>
  40737c:	lea    rdi,[rip+0xefc7]        # 41634a <_IO_stdin_used@@Base+0x134a>
  407383:	lea    rsi,[rip+0xeaad]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40738a:	lea    rcx,[rip+0xef68]        # 4162f9 <_IO_stdin_used@@Base+0x12f9>
  407391:	mov    edx,0x2bb
  407396:	call   4040a0 <__assert_fail@plt>
  40739b:	lea    rdi,[rip+0xf022]        # 4163c4 <_IO_stdin_used@@Base+0x13c4>
  4073a2:	lea    rsi,[rip+0xea8e]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  4073a9:	lea    rcx,[rip+0xf175]        # 416525 <_IO_stdin_used@@Base+0x1525>
  4073b0:	mov    edx,0x2b5
  4073b5:	call   4040a0 <__assert_fail@plt>
  4073ba:	nop    WORD PTR [rax+rax*1+0x0]
  4073c0:	push   rbp
  4073c1:	push   r15
  4073c3:	push   r14
  4073c5:	push   r13
  4073c7:	push   r12
  4073c9:	push   rbx
  4073ca:	push   rax
  4073cb:	mov    r13,0xffffffffffffffff
  4073d2:	test   rdi,rdi
  4073d5:	je     4074c6 <test_sort_find@@Base+0xc66>
  4073db:	mov    r15,rdi
  4073de:	mov    r12d,DWORD PTR [rdi-0x4]
  4073e2:	test   r12,r12
  4073e5:	je     4074c6 <test_sort_find@@Base+0xc66>
  4073eb:	mov    r14,rsi
  4073ee:	mov    rbx,r12
  4073f1:	xor    r13d,r13d
  4073f4:	dec    rbx
  4073f7:	jne    407408 <test_sort_find@@Base+0xba8>
  4073f9:	jmp    407476 <test_sort_find@@Base+0xc16>
  4073fb:	nop    DWORD PTR [rax+rax*1+0x0]
  407400:	mov    rbx,rbp
  407403:	cmp    rbx,r13
  407406:	jbe    407474 <test_sort_find@@Base+0xc14>
  407408:	mov    rbp,rbx
  40740b:	sub    rbp,r13
  40740e:	shr    rbp,1
  407411:	add    rbp,r13
  407414:	cmp    rbp,r12
  407417:	jae    4074f7 <test_sort_find@@Base+0xc97>
  40741d:	lea    rcx,[r15+rbp*4]
  407421:	mov    edx,DWORD PTR [r15+rbp*4]
  407425:	lea    rax,[rcx+rdx*1]
  407429:	movsxd rcx,DWORD PTR [rdx+rcx*1]
  40742d:	mov    rdx,rax
  407430:	sub    rdx,rcx
  407433:	cmp    WORD PTR [rdx],0xc
  407437:	jb     4074d8 <test_sort_find@@Base+0xc78>
  40743d:	neg    rcx
  407440:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  407445:	test   rcx,rcx
  407448:	je     4074d8 <test_sort_find@@Base+0xc78>
  40744e:	lea    rdx,[rax+rcx*1]
  407452:	mov    eax,DWORD PTR [rax+rcx*1]
  407455:	lea    rdi,[rax+rdx*1]
  407459:	add    rdi,0x4
  40745d:	mov    rsi,r14
  407460:	call   4040e0 <strcmp@plt>
  407465:	test   eax,eax
  407467:	jns    407400 <test_sort_find@@Base+0xba0>
  407469:	inc    rbp
  40746c:	mov    r13,rbp
  40746f:	cmp    rbx,r13
  407472:	ja     407408 <test_sort_find@@Base+0xba8>
  407474:	jne    4074bf <test_sort_find@@Base+0xc5f>
  407476:	cmp    r13,r12
  407479:	jae    4074f7 <test_sort_find@@Base+0xc97>
  40747b:	lea    rcx,[r15+r13*4]
  40747f:	mov    edx,DWORD PTR [r15+r13*4]
  407483:	lea    rax,[rcx+rdx*1]
  407487:	movsxd rcx,DWORD PTR [rdx+rcx*1]
  40748b:	mov    rdx,rax
  40748e:	sub    rdx,rcx
  407491:	cmp    WORD PTR [rdx],0xc
  407495:	jb     4074d8 <test_sort_find@@Base+0xc78>
  407497:	neg    rcx
  40749a:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  40749f:	test   rcx,rcx
  4074a2:	je     4074d8 <test_sort_find@@Base+0xc78>
  4074a4:	lea    rdx,[rax+rcx*1]
  4074a8:	mov    eax,DWORD PTR [rax+rcx*1]
  4074ab:	lea    rdi,[rax+rdx*1]
  4074af:	add    rdi,0x4
  4074b3:	mov    rsi,r14
  4074b6:	call   4040e0 <strcmp@plt>
  4074bb:	test   eax,eax
  4074bd:	je     4074c6 <test_sort_find@@Base+0xc66>
  4074bf:	mov    r13,0xffffffffffffffff
  4074c6:	mov    rax,r13
  4074c9:	add    rsp,0x8
  4074cd:	pop    rbx
  4074ce:	pop    r12
  4074d0:	pop    r13
  4074d2:	pop    r14
  4074d4:	pop    r15
  4074d6:	pop    rbp
  4074d7:	ret    
  4074d8:	lea    rdi,[rip+0xee6b]        # 41634a <_IO_stdin_used@@Base+0x134a>
  4074df:	lea    rsi,[rip+0xe951]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  4074e6:	lea    rcx,[rip+0xee0c]        # 4162f9 <_IO_stdin_used@@Base+0x12f9>
  4074ed:	mov    edx,0x2bb
  4074f2:	call   4040a0 <__assert_fail@plt>
  4074f7:	lea    rdi,[rip+0xeec6]        # 4163c4 <_IO_stdin_used@@Base+0x13c4>
  4074fe:	lea    rsi,[rip+0xe932]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  407505:	lea    rcx,[rip+0xf019]        # 416525 <_IO_stdin_used@@Base+0x1525>
  40750c:	mov    edx,0x2b5
  407511:	call   4040a0 <__assert_fail@plt>
  407516:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000407520 <test_scan@@Base>:
  407520:	push   rbp
  407521:	push   r15
  407523:	push   r14
  407525:	push   r13
  407527:	push   r12
  407529:	push   rbx
  40752a:	sub    rsp,0x88
  407531:	mov    rbx,rdi
  407534:	mov    DWORD PTR [rsp+0x63],0x2030403
  40753c:	mov    DWORD PTR [rsp+0x60],0x3010706
  407544:	call   40e0f0 <flatcc_builder_reset@@Base>
  407549:	lea    rsi,[rip+0xdbf8]        # 415148 <_IO_stdin_used@@Base+0x148>
  407550:	mov    rdi,rbx
  407553:	xor    edx,edx
  407555:	xor    ecx,ecx
  407557:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  40755c:	test   eax,eax
  40755e:	jne    40756d <test_scan@@Base+0x4d>
  407560:	mov    rdi,rbx
  407563:	mov    esi,0x24
  407568:	call   40ff20 <flatcc_builder_start_table@@Base>
  40756d:	lea    rsi,[rip+0xdc18]        # 41518c <_IO_stdin_used@@Base+0x18c>
  407574:	mov    rdi,rbx
  407577:	call   412170 <flatcc_builder_create_string_str@@Base>
  40757c:	test   eax,eax
  40757e:	je     407596 <test_scan@@Base+0x76>
  407580:	mov    ebp,eax
  407582:	mov    rdi,rbx
  407585:	mov    esi,0x3
  40758a:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40758f:	test   rax,rax
  407592:	je     407596 <test_scan@@Base+0x76>
  407594:	mov    DWORD PTR [rax],ebp
  407596:	lea    rsi,[rsp+0x60]
  40759b:	mov    edx,0x7
  4075a0:	mov    ecx,0x1
  4075a5:	mov    r9d,0xffffffff
  4075ab:	mov    rdi,rbx
  4075ae:	mov    r8d,0x1
  4075b4:	call   410ac0 <flatcc_builder_create_vector@@Base>
  4075b9:	test   eax,eax
  4075bb:	je     4075d3 <test_scan@@Base+0xb3>
  4075bd:	mov    ebp,eax
  4075bf:	mov    rdi,rbx
  4075c2:	mov    esi,0x5
  4075c7:	call   411140 <flatcc_builder_table_add_offset@@Base>
  4075cc:	test   rax,rax
  4075cf:	je     4075d3 <test_scan@@Base+0xb3>
  4075d1:	mov    DWORD PTR [rax],ebp
  4075d3:	mov    rdi,rbx
  4075d6:	call   40fb30 <flatcc_builder_start_offset_vector@@Base>
  4075db:	mov    rdi,rbx
  4075de:	call   40fcf0 <flatcc_builder_end_offset_vector@@Base>
  4075e3:	test   eax,eax
  4075e5:	je     4075fd <test_scan@@Base+0xdd>
  4075e7:	mov    ebp,eax
  4075e9:	mov    rdi,rbx
  4075ec:	mov    esi,0xa
  4075f1:	call   411140 <flatcc_builder_table_add_offset@@Base>
  4075f6:	test   rax,rax
  4075f9:	je     4075fd <test_scan@@Base+0xdd>
  4075fb:	mov    DWORD PTR [rax],ebp
  4075fd:	mov    rdi,rbx
  407600:	call   40fb30 <flatcc_builder_start_offset_vector@@Base>
  407605:	mov    rdi,rbx
  407608:	mov    esi,0x24
  40760d:	call   40ff20 <flatcc_builder_start_table@@Base>
  407612:	lea    rsi,[rip+0xdd96]        # 4153af <_IO_stdin_used@@Base+0x3af>
  407619:	mov    rdi,rbx
  40761c:	call   412170 <flatcc_builder_create_string_str@@Base>
  407621:	test   eax,eax
  407623:	je     40763b <test_scan@@Base+0x11b>
  407625:	mov    ebp,eax
  407627:	mov    rdi,rbx
  40762a:	mov    esi,0x3
  40762f:	call   411140 <flatcc_builder_table_add_offset@@Base>
  407634:	test   rax,rax
  407637:	je     40763b <test_scan@@Base+0x11b>
  407639:	mov    DWORD PTR [rax],ebp
  40763b:	lea    rsi,[rip+0xdaf6]        # 415138 <_IO_stdin_used@@Base+0x138>
  407642:	mov    rdi,rbx
  407645:	mov    edx,0x1
  40764a:	call   4108c0 <flatcc_builder_check_required@@Base>
  40764f:	test   eax,eax
  407651:	je     40853b <test_scan@@Base+0x101b>
  407657:	mov    rdi,rbx
  40765a:	call   410930 <flatcc_builder_end_table@@Base>
  40765f:	test   eax,eax
  407661:	je     40766d <test_scan@@Base+0x14d>
  407663:	mov    rdi,rbx
  407666:	mov    esi,eax
  407668:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  40766d:	mov    rdi,rbx
  407670:	mov    esi,0x24
  407675:	call   40ff20 <flatcc_builder_start_table@@Base>
  40767a:	lea    rsi,[rip+0x10317]        # 417998 <_IO_stdin_used@@Base+0x2998>
  407681:	mov    rdi,rbx
  407684:	call   412170 <flatcc_builder_create_string_str@@Base>
  407689:	test   eax,eax
  40768b:	je     4076a3 <test_scan@@Base+0x183>
  40768d:	mov    ebp,eax
  40768f:	mov    rdi,rbx
  407692:	mov    esi,0x3
  407697:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40769c:	test   rax,rax
  40769f:	je     4076a3 <test_scan@@Base+0x183>
  4076a1:	mov    DWORD PTR [rax],ebp
  4076a3:	lea    rsi,[rip+0xda8e]        # 415138 <_IO_stdin_used@@Base+0x138>
  4076aa:	mov    rdi,rbx
  4076ad:	mov    edx,0x1
  4076b2:	call   4108c0 <flatcc_builder_check_required@@Base>
  4076b7:	test   eax,eax
  4076b9:	je     40853b <test_scan@@Base+0x101b>
  4076bf:	mov    rdi,rbx
  4076c2:	call   410930 <flatcc_builder_end_table@@Base>
  4076c7:	test   eax,eax
  4076c9:	je     4076d5 <test_scan@@Base+0x1b5>
  4076cb:	mov    rdi,rbx
  4076ce:	mov    esi,eax
  4076d0:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  4076d5:	mov    rdi,rbx
  4076d8:	mov    esi,0x24
  4076dd:	call   40ff20 <flatcc_builder_start_table@@Base>
  4076e2:	lea    rsi,[rip+0x10287]        # 417970 <_IO_stdin_used@@Base+0x2970>
  4076e9:	mov    rdi,rbx
  4076ec:	call   412170 <flatcc_builder_create_string_str@@Base>
  4076f1:	test   eax,eax
  4076f3:	je     40770b <test_scan@@Base+0x1eb>
  4076f5:	mov    ebp,eax
  4076f7:	mov    rdi,rbx
  4076fa:	mov    esi,0x3
  4076ff:	call   411140 <flatcc_builder_table_add_offset@@Base>
  407704:	test   rax,rax
  407707:	je     40770b <test_scan@@Base+0x1eb>
  407709:	mov    DWORD PTR [rax],ebp
  40770b:	lea    rsi,[rip+0xda26]        # 415138 <_IO_stdin_used@@Base+0x138>
  407712:	mov    rdi,rbx
  407715:	mov    edx,0x1
  40771a:	call   4108c0 <flatcc_builder_check_required@@Base>
  40771f:	test   eax,eax
  407721:	je     40853b <test_scan@@Base+0x101b>
  407727:	mov    rdi,rbx
  40772a:	call   410930 <flatcc_builder_end_table@@Base>
  40772f:	test   eax,eax
  407731:	je     40773d <test_scan@@Base+0x21d>
  407733:	mov    rdi,rbx
  407736:	mov    esi,eax
  407738:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  40773d:	mov    rdi,rbx
  407740:	mov    esi,0x24
  407745:	call   40ff20 <flatcc_builder_start_table@@Base>
  40774a:	lea    rsi,[rip+0xe08c]        # 4157dd <_IO_stdin_used@@Base+0x7dd>
  407751:	mov    rdi,rbx
  407754:	call   412170 <flatcc_builder_create_string_str@@Base>
  407759:	test   eax,eax
  40775b:	je     407773 <test_scan@@Base+0x253>
  40775d:	mov    ebp,eax
  40775f:	mov    rdi,rbx
  407762:	mov    esi,0x3
  407767:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40776c:	test   rax,rax
  40776f:	je     407773 <test_scan@@Base+0x253>
  407771:	mov    DWORD PTR [rax],ebp
  407773:	lea    rsi,[rip+0xd9be]        # 415138 <_IO_stdin_used@@Base+0x138>
  40777a:	mov    rdi,rbx
  40777d:	mov    edx,0x1
  407782:	call   4108c0 <flatcc_builder_check_required@@Base>
  407787:	test   eax,eax
  407789:	je     40853b <test_scan@@Base+0x101b>
  40778f:	mov    rdi,rbx
  407792:	call   410930 <flatcc_builder_end_table@@Base>
  407797:	test   eax,eax
  407799:	je     4077a5 <test_scan@@Base+0x285>
  40779b:	mov    rdi,rbx
  40779e:	mov    esi,eax
  4077a0:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  4077a5:	mov    rdi,rbx
  4077a8:	mov    esi,0x24
  4077ad:	call   40ff20 <flatcc_builder_start_table@@Base>
  4077b2:	lea    rsi,[rip+0x101b7]        # 417970 <_IO_stdin_used@@Base+0x2970>
  4077b9:	mov    rdi,rbx
  4077bc:	call   412170 <flatcc_builder_create_string_str@@Base>
  4077c1:	test   eax,eax
  4077c3:	je     4077db <test_scan@@Base+0x2bb>
  4077c5:	mov    ebp,eax
  4077c7:	mov    rdi,rbx
  4077ca:	mov    esi,0x3
  4077cf:	call   411140 <flatcc_builder_table_add_offset@@Base>
  4077d4:	test   rax,rax
  4077d7:	je     4077db <test_scan@@Base+0x2bb>
  4077d9:	mov    DWORD PTR [rax],ebp
  4077db:	lea    rsi,[rip+0xd956]        # 415138 <_IO_stdin_used@@Base+0x138>
  4077e2:	mov    rdi,rbx
  4077e5:	mov    edx,0x1
  4077ea:	call   4108c0 <flatcc_builder_check_required@@Base>
  4077ef:	test   eax,eax
  4077f1:	je     40853b <test_scan@@Base+0x101b>
  4077f7:	mov    rdi,rbx
  4077fa:	call   410930 <flatcc_builder_end_table@@Base>
  4077ff:	test   eax,eax
  407801:	je     40780d <test_scan@@Base+0x2ed>
  407803:	mov    rdi,rbx
  407806:	mov    esi,eax
  407808:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  40780d:	mov    rdi,rbx
  407810:	call   40fcf0 <flatcc_builder_end_offset_vector@@Base>
  407815:	test   eax,eax
  407817:	je     40782f <test_scan@@Base+0x30f>
  407819:	mov    ebp,eax
  40781b:	mov    rdi,rbx
  40781e:	mov    esi,0xb
  407823:	call   411140 <flatcc_builder_table_add_offset@@Base>
  407828:	test   rax,rax
  40782b:	je     40782f <test_scan@@Base+0x30f>
  40782d:	mov    DWORD PTR [rax],ebp
  40782f:	lea    rsi,[rip+0xd902]        # 415138 <_IO_stdin_used@@Base+0x138>
  407836:	mov    rdi,rbx
  407839:	mov    edx,0x1
  40783e:	call   4108c0 <flatcc_builder_check_required@@Base>
  407843:	test   eax,eax
  407845:	je     40853b <test_scan@@Base+0x101b>
  40784b:	mov    rdi,rbx
  40784e:	call   410930 <flatcc_builder_end_table@@Base>
  407853:	mov    rdi,rbx
  407856:	mov    esi,eax
  407858:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40785d:	lea    rsi,[rsp+0x80]
  407865:	mov    rdi,rbx
  407868:	call   412610 <flatcc_builder_finalize_aligned_buffer@@Base>
  40786d:	test   rax,rax
  407870:	je     40855a <test_scan@@Base+0x103a>
  407876:	mov    r15,rax
  407879:	cmp    DWORD PTR [rax+0x4],0x534e4f4d
  407880:	jne    40855a <test_scan@@Base+0x103a>
  407886:	mov    ecx,DWORD PTR [r15]
  407889:	lea    rax,[r15+rcx*1]
  40788d:	mov    QWORD PTR [rsp+0x28],rcx
  407892:	movsxd rcx,DWORD PTR [r15+rcx*1]
  407896:	mov    rdx,rax
  407899:	sub    rdx,rcx
  40789c:	cmp    WORD PTR [rdx],0x1b
  4078a0:	jbe    408579 <test_scan@@Base+0x1059>
  4078a6:	neg    rcx
  4078a9:	movzx  edx,WORD PTR [rax+rcx*1+0x1a]
  4078ae:	test   rdx,rdx
  4078b1:	je     408579 <test_scan@@Base+0x1059>
  4078b7:	movzx  esi,WORD PTR [rax+rcx*1+0xe]
  4078bc:	mov    QWORD PTR [rsp+0x10],rsi
  4078c1:	test   rsi,rsi
  4078c4:	je     4085a4 <test_scan@@Base+0x1084>
  4078ca:	movzx  esi,WORD PTR [rax+rcx*1+0x18]
  4078cf:	mov    rcx,rsi
  4078d2:	mov    QWORD PTR [rsp+0x58],rsi
  4078d7:	test   rsi,rsi
  4078da:	je     4085c3 <test_scan@@Base+0x10a3>
  4078e0:	lea    rcx,[rax+rdx*1]
  4078e4:	mov    QWORD PTR [rsp+0x48],rdx
  4078e9:	mov    esi,DWORD PTR [rax+rdx*1]
  4078ec:	mov    rdx,rsi
  4078ef:	mov    QWORD PTR [rsp+0x40],rsi
  4078f4:	add    rcx,rsi
  4078f7:	add    rcx,0x4
  4078fb:	mov    QWORD PTR [rsp+0x20],rcx
  407900:	mov    r12d,DWORD PTR [rcx-0x4]
  407904:	test   r12,r12
  407907:	je     407b70 <test_scan@@Base+0x650>
  40790d:	mov    rsi,QWORD PTR [rsp+0x10]
  407912:	mov    ecx,DWORD PTR [rax+rsi*1]
  407915:	mov    QWORD PTR [rsp+0x50],rcx
  40791a:	mov    rcx,QWORD PTR [rsp+0x58]
  40791f:	mov    edx,DWORD PTR [rax+rcx*1]
  407922:	lea    rsi,[rax+rsi*1]
  407926:	mov    QWORD PTR [rsp+0x78],rsi
  40792b:	lea    rax,[rax+rcx*1]
  40792f:	mov    QWORD PTR [rsp+0x68],rdx
  407934:	add    rax,rdx
  407937:	add    rax,0x4
  40793b:	mov    QWORD PTR [rsp+0x38],rax
  407940:	add    QWORD PTR [rsp+0x20],0xfffffffffffffffc
  407946:	mov    rax,QWORD PTR [rsp+0x28]
  40794b:	mov    rcx,QWORD PTR [rsp+0x40]
  407950:	add    rax,rcx
  407953:	add    rax,QWORD PTR [rsp+0x48]
  407958:	mov    QWORD PTR [rsp+0x70],rax
  40795d:	lea    r13,[r15+rax*1]
  407961:	xor    ebp,ebp
  407963:	lea    r14,[rip+0x1002e]        # 417998 <_IO_stdin_used@@Base+0x2998>
  40796a:	xor    ebx,ebx
  40796c:	nop    DWORD PTR [rax+0x0]
  407970:	cmp    r12,rbx
  407973:	je     409753 <test_scan@@Base+0x2233>
  407979:	mov    eax,DWORD PTR [r13+rbx*4+0x4]
  40797e:	lea    rcx,[rax+r13*1]
  407982:	movsxd rdx,DWORD PTR [rcx+rbx*4+0x4]
  407987:	mov    rcx,rax
  40798a:	sub    rcx,rdx
  40798d:	add    rcx,r13
  407990:	cmp    WORD PTR [rcx+rbx*4+0x4],0xc
  407996:	jb     408fbb <test_scan@@Base+0x1a9b>
  40799c:	movzx  ecx,WORD PTR [rcx+rbx*4+0xe]
  4079a1:	test   rcx,rcx
  4079a4:	je     408fbb <test_scan@@Base+0x1a9b>
  4079aa:	add    rax,rcx
  4079ad:	lea    rcx,[rax+r13*1]
  4079b1:	mov    ecx,DWORD PTR [rcx+rbx*4+0x4]
  4079b5:	add    rcx,rax
  4079b8:	add    rcx,rbp
  4079bb:	lea    rdi,[rcx+r13*1]
  4079bf:	add    rdi,0x8
  4079c3:	mov    rsi,r14
  4079c6:	call   4040e0 <strcmp@plt>
  4079cb:	test   eax,eax
  4079cd:	je     4079e0 <test_scan@@Base+0x4c0>
  4079cf:	inc    rbx
  4079d2:	add    rbp,0x4
  4079d6:	cmp    rbx,r12
  4079d9:	jb     407970 <test_scan@@Base+0x450>
  4079db:	jmp    407b70 <test_scan@@Base+0x650>
  4079e0:	cmp    rbx,0x1
  4079e4:	jne    407b70 <test_scan@@Base+0x650>
  4079ea:	mov    QWORD PTR [rsp+0x8],r15
  4079ef:	mov    rax,r12
  4079f2:	lea    r12,[r12*4+0x0]
  4079fa:	mov    QWORD PTR [rsp],rax
  4079fe:	lea    rbx,[rax-0x1]
  407a02:	xor    r15d,r15d
  407a05:	lea    r14,[rip+0xff8c]        # 417998 <_IO_stdin_used@@Base+0x2998>
  407a0c:	mov    rbp,QWORD PTR [rsp+0x20]
  407a11:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407a1b:	nop    DWORD PTR [rax+rax*1+0x0]
  407a20:	cmp    r12,r15
  407a23:	je     407b9d <test_scan@@Base+0x67d>
  407a29:	cmp    rbx,QWORD PTR [rsp]
  407a2d:	jae    409753 <test_scan@@Base+0x2233>
  407a33:	mov    eax,DWORD PTR [rbp+r12*1+0x0]
  407a38:	lea    rcx,[r12+rax*1]
  407a3c:	movsxd rdx,DWORD PTR [rbp+rcx*1+0x0]
  407a41:	mov    rcx,rax
  407a44:	sub    rcx,rdx
  407a47:	add    rcx,r12
  407a4a:	cmp    WORD PTR [rbp+rcx*1+0x0],0xc
  407a50:	jb     408fbb <test_scan@@Base+0x1a9b>
  407a56:	movzx  ecx,WORD PTR [rbp+rcx*1+0xa]
  407a5b:	test   rcx,rcx
  407a5e:	je     408fbb <test_scan@@Base+0x1a9b>
  407a64:	add    rax,rcx
  407a67:	lea    rcx,[r12+rax*1]
  407a6b:	mov    ecx,DWORD PTR [rbp+rcx*1+0x0]
  407a6f:	add    rcx,rax
  407a72:	lea    rax,[r12+rbp*1]
  407a76:	lea    rdi,[rax+rcx*1]
  407a7a:	add    rdi,0x4
  407a7e:	mov    rsi,r14
  407a81:	call   4040e0 <strcmp@plt>
  407a86:	add    r15,0x4
  407a8a:	add    rbp,0xfffffffffffffffc
  407a8e:	dec    rbx
  407a91:	test   eax,eax
  407a93:	jne    407a20 <test_scan@@Base+0x500>
  407a95:	mov    rax,QWORD PTR [rsp]
  407a99:	lea    rax,[rax*4-0x4]
  407aa1:	cmp    rax,r15
  407aa4:	jne    407b9d <test_scan@@Base+0x67d>
  407aaa:	mov    QWORD PTR [rsp+0x30],rax
  407aaf:	xor    r15d,r15d
  407ab2:	xor    ebp,ebp
  407ab4:	mov    rax,QWORD PTR [rsp]
  407ab8:	nop    DWORD PTR [rax+rax*1+0x0]
  407ac0:	cmp    rax,rbp
  407ac3:	je     409753 <test_scan@@Base+0x2233>
  407ac9:	mov    eax,DWORD PTR [r13+rbp*4+0x4]
  407ace:	lea    rcx,[rax+r13*1]
  407ad2:	movsxd rdx,DWORD PTR [rcx+rbp*4+0x4]
  407ad7:	mov    rcx,rax
  407ada:	sub    rcx,rdx
  407add:	add    rcx,r13
  407ae0:	cmp    WORD PTR [rcx+rbp*4+0x4],0xc
  407ae6:	jb     408fbb <test_scan@@Base+0x1a9b>
  407aec:	movzx  ecx,WORD PTR [rcx+rbp*4+0xe]
  407af1:	test   rcx,rcx
  407af4:	je     408fbb <test_scan@@Base+0x1a9b>
  407afa:	add    rax,rcx
  407afd:	lea    rcx,[rax+r13*1]
  407b01:	mov    ecx,DWORD PTR [rcx+rbp*4+0x4]
  407b05:	add    rcx,rax
  407b08:	lea    rax,[r15+rcx*1]
  407b0c:	lea    rdi,[rax+r13*1]
  407b10:	add    rdi,0x8
  407b14:	add    rcx,r13
  407b17:	mov    ebx,DWORD PTR [rcx+rbp*4+0x4]
  407b1b:	xor    r14d,r14d
  407b1e:	cmp    ebx,0x5
  407b21:	mov    edx,0x5
  407b26:	cmovb  edx,ebx
  407b29:	seta   r14b
  407b2d:	lea    rsi,[rip+0xdcfe]        # 415832 <_IO_stdin_used@@Base+0x832>
  407b34:	call   404050 <strncmp@plt>
  407b39:	cmp    eax,0x1
  407b3c:	mov    ecx,0x0
  407b41:	sbb    ecx,ecx
  407b43:	or     ecx,eax
  407b45:	test   eax,eax
  407b47:	cmovne r14d,ecx
  407b4b:	cmp    ebx,0x5
  407b4e:	cmovb  r14d,ecx
  407b52:	test   r14d,r14d
  407b55:	je     407ba9 <test_scan@@Base+0x689>
  407b57:	inc    rbp
  407b5a:	add    r15,0x4
  407b5e:	mov    rax,QWORD PTR [rsp]
  407b62:	cmp    rbp,rax
  407b65:	jb     407ac0 <test_scan@@Base+0x5a0>
  407b6b:	jmp    407e0d <test_scan@@Base+0x8ed>
  407b70:	lea    rdi,[rip+0xffc7]        # 417b3e <_IO_stdin_used@@Base+0x2b3e>
  407b77:	call   404060 <puts@plt>
  407b7c:	mov    ebx,0xffffffff
  407b81:	mov    rdi,r15
  407b84:	call   412740 <flatcc_builder_aligned_free@@Base>
  407b89:	mov    eax,ebx
  407b8b:	add    rsp,0x88
  407b92:	pop    rbx
  407b93:	pop    r12
  407b95:	pop    r13
  407b97:	pop    r14
  407b99:	pop    r15
  407b9b:	pop    rbp
  407b9c:	ret    
  407b9d:	lea    rdi,[rip+0xff99]        # 417b3d <_IO_stdin_used@@Base+0x2b3d>
  407ba4:	jmp    407e14 <test_scan@@Base+0x8f4>
  407ba9:	cmp    rbp,0x1
  407bad:	mov    rax,QWORD PTR [rsp]
  407bb1:	jne    407e0d <test_scan@@Base+0x8ed>
  407bb7:	dec    rax
  407bba:	xor    ebx,ebx
  407bbc:	mov    r15,QWORD PTR [rsp+0x20]
  407bc1:	cmp    r12,rbx
  407bc4:	je     407e0d <test_scan@@Base+0x8ed>
  407bca:	cmp    rax,QWORD PTR [rsp]
  407bce:	jae    409753 <test_scan@@Base+0x2233>
  407bd4:	mov    QWORD PTR [rsp+0x18],rax
  407bd9:	mov    eax,DWORD PTR [r15+r12*1]
  407bdd:	lea    rcx,[r12+rax*1]
  407be1:	movsxd rdx,DWORD PTR [r15+rcx*1]
  407be5:	mov    rcx,rax
  407be8:	sub    rcx,rdx
  407beb:	add    rcx,r12
  407bee:	cmp    WORD PTR [r15+rcx*1],0xc
  407bf4:	jb     408fbb <test_scan@@Base+0x1a9b>
  407bfa:	movzx  ecx,WORD PTR [r15+rcx*1+0xa]
  407c00:	test   rcx,rcx
  407c03:	je     408fbb <test_scan@@Base+0x1a9b>
  407c09:	add    rax,rcx
  407c0c:	lea    rcx,[r12+rax*1]
  407c10:	mov    ecx,DWORD PTR [r15+rcx*1]
  407c14:	add    rcx,rax
  407c17:	lea    rax,[r15+r12*1]
  407c1b:	lea    rdi,[rax+rcx*1]
  407c1f:	add    rdi,0x4
  407c23:	add    rcx,r12
  407c26:	mov    ebp,DWORD PTR [r15+rcx*1]
  407c2a:	xor    r14d,r14d
  407c2d:	cmp    ebp,0x5
  407c30:	mov    edx,0x5
  407c35:	cmovb  edx,ebp
  407c38:	seta   r14b
  407c3c:	lea    rsi,[rip+0xdbef]        # 415832 <_IO_stdin_used@@Base+0x832>
  407c43:	call   404050 <strncmp@plt>
  407c48:	cmp    eax,0x1
  407c4b:	mov    ecx,0x0
  407c50:	sbb    ecx,ecx
  407c52:	or     ecx,eax
  407c54:	test   eax,eax
  407c56:	cmovne r14d,ecx
  407c5a:	cmp    ebp,0x5
  407c5d:	cmovb  r14d,ecx
  407c61:	add    rbx,0x4
  407c65:	add    r15,0xfffffffffffffffc
  407c69:	mov    rax,QWORD PTR [rsp+0x18]
  407c6e:	dec    rax
  407c71:	test   r14d,r14d
  407c74:	jne    407bc1 <test_scan@@Base+0x6a1>
  407c7a:	cmp    QWORD PTR [rsp+0x30],rbx
  407c7f:	jne    407e0d <test_scan@@Base+0x8ed>
  407c85:	mov    rax,QWORD PTR [rsp]
  407c89:	cmp    eax,0x3
  407c8c:	jb     407d13 <test_scan@@Base+0x7f3>
  407c92:	mov    ebp,0x2
  407c97:	xor    ebx,ebx
  407c99:	lea    r14,[rip+0xfcf8]        # 417998 <_IO_stdin_used@@Base+0x2998>
  407ca0:	cmp    rbp,rax
  407ca3:	jae    409753 <test_scan@@Base+0x2233>
  407ca9:	mov    eax,DWORD PTR [r13+rbp*4+0x4]
  407cae:	lea    rcx,[rax+r13*1]
  407cb2:	movsxd rdx,DWORD PTR [rcx+rbp*4+0x4]
  407cb7:	mov    rcx,rax
  407cba:	sub    rcx,rdx
  407cbd:	add    rcx,r13
  407cc0:	cmp    WORD PTR [rcx+rbp*4+0x4],0xc
  407cc6:	jb     408fbb <test_scan@@Base+0x1a9b>
  407ccc:	movzx  ecx,WORD PTR [rcx+rbp*4+0xe]
  407cd1:	test   rcx,rcx
  407cd4:	je     408fbb <test_scan@@Base+0x1a9b>
  407cda:	add    rax,rcx
  407cdd:	lea    rcx,[rax+r13*1]
  407ce1:	mov    ecx,DWORD PTR [rcx+rbp*4+0x4]
  407ce5:	add    rcx,rax
  407ce8:	add    rcx,rbx
  407ceb:	lea    rdi,[rcx+r13*1]
  407cef:	add    rdi,0x10
  407cf3:	mov    rsi,r14
  407cf6:	call   4040e0 <strcmp@plt>
  407cfb:	test   eax,eax
  407cfd:	je     407e31 <test_scan@@Base+0x911>
  407d03:	inc    rbp
  407d06:	add    rbx,0x4
  407d0a:	mov    rax,QWORD PTR [rsp]
  407d0e:	cmp    rbp,rax
  407d11:	jb     407ca0 <test_scan@@Base+0x780>
  407d13:	xor    ebp,ebp
  407d15:	lea    r14,[rip+0xdb1d]        # 415839 <_IO_stdin_used@@Base+0x839>
  407d1c:	xor    ebx,ebx
  407d1e:	cmp    rax,rbx
  407d21:	je     409753 <test_scan@@Base+0x2233>
  407d27:	mov    eax,DWORD PTR [r13+rbx*4+0x4]
  407d2c:	lea    rcx,[rax+r13*1]
  407d30:	movsxd rdx,DWORD PTR [rcx+rbx*4+0x4]
  407d35:	mov    rcx,rax
  407d38:	sub    rcx,rdx
  407d3b:	add    rcx,r13
  407d3e:	cmp    WORD PTR [rcx+rbx*4+0x4],0xc
  407d44:	jb     408fbb <test_scan@@Base+0x1a9b>
  407d4a:	movzx  ecx,WORD PTR [rcx+rbx*4+0xe]
  407d4f:	test   rcx,rcx
  407d52:	je     408fbb <test_scan@@Base+0x1a9b>
  407d58:	add    rax,rcx
  407d5b:	lea    rcx,[rax+r13*1]
  407d5f:	mov    ecx,DWORD PTR [rcx+rbx*4+0x4]
  407d63:	add    rcx,rax
  407d66:	add    rcx,rbp
  407d69:	lea    rdi,[rcx+r13*1]
  407d6d:	add    rdi,0x8
  407d71:	mov    rsi,r14
  407d74:	call   4040e0 <strcmp@plt>
  407d79:	test   eax,eax
  407d7b:	je     407e28 <test_scan@@Base+0x908>
  407d81:	inc    rbx
  407d84:	add    rbp,0x4
  407d88:	mov    rax,QWORD PTR [rsp]
  407d8c:	cmp    rbx,rax
  407d8f:	jb     407d1e <test_scan@@Base+0x7fe>
  407d91:	xor    ebp,ebp
  407d93:	lea    r14,[rip+0xd615]        # 4153af <_IO_stdin_used@@Base+0x3af>
  407d9a:	xor    ebx,ebx
  407d9c:	cmp    rax,rbx
  407d9f:	je     409753 <test_scan@@Base+0x2233>
  407da5:	mov    eax,DWORD PTR [r13+rbx*4+0x4]
  407daa:	lea    rcx,[rax+r13*1]
  407dae:	movsxd rdx,DWORD PTR [rcx+rbx*4+0x4]
  407db3:	mov    rcx,rax
  407db6:	sub    rcx,rdx
  407db9:	add    rcx,r13
  407dbc:	cmp    WORD PTR [rcx+rbx*4+0x4],0xc
  407dc2:	jb     408fbb <test_scan@@Base+0x1a9b>
  407dc8:	movzx  ecx,WORD PTR [rcx+rbx*4+0xe]
  407dcd:	test   rcx,rcx
  407dd0:	je     408fbb <test_scan@@Base+0x1a9b>
  407dd6:	add    rax,rcx
  407dd9:	lea    rcx,[rax+r13*1]
  407ddd:	mov    ecx,DWORD PTR [rcx+rbx*4+0x4]
  407de1:	add    rcx,rax
  407de4:	add    rcx,rbp
  407de7:	lea    rdi,[rcx+r13*1]
  407deb:	add    rdi,0x8
  407def:	mov    rsi,r14
  407df2:	call   4040e0 <strcmp@plt>
  407df7:	test   eax,eax
  407df9:	je     407e3a <test_scan@@Base+0x91a>
  407dfb:	inc    rbx
  407dfe:	add    rbp,0x4
  407e02:	mov    rax,QWORD PTR [rsp]
  407e06:	cmp    rbx,rax
  407e09:	jb     407d9c <test_scan@@Base+0x87c>
  407e0b:	jmp    407e43 <test_scan@@Base+0x923>
  407e0d:	lea    rdi,[rip+0xfd03]        # 417b17 <_IO_stdin_used@@Base+0x2b17>
  407e14:	call   404060 <puts@plt>
  407e19:	mov    ebx,0xffffffff
  407e1e:	mov    r15,QWORD PTR [rsp+0x8]
  407e23:	jmp    407b81 <test_scan@@Base+0x661>
  407e28:	lea    rdi,[rip+0xfca7]        # 417ad6 <_IO_stdin_used@@Base+0x2ad6>
  407e2f:	jmp    407e14 <test_scan@@Base+0x8f4>
  407e31:	lea    rdi,[rip+0xfcb4]        # 417aec <_IO_stdin_used@@Base+0x2aec>
  407e38:	jmp    407e14 <test_scan@@Base+0x8f4>
  407e3a:	test   rbx,rbx
  407e3d:	mov    rax,QWORD PTR [rsp]
  407e41:	je     407e4c <test_scan@@Base+0x92c>
  407e43:	lea    rdi,[rip+0xfc7a]        # 417ac4 <_IO_stdin_used@@Base+0x2ac4>
  407e4a:	jmp    407e14 <test_scan@@Base+0x8f4>
  407e4c:	xor    ebp,ebp
  407e4e:	lea    r14,[rip+0xfb1b]        # 417970 <_IO_stdin_used@@Base+0x2970>
  407e55:	xor    ebx,ebx
  407e57:	cmp    rax,rbx
  407e5a:	je     409753 <test_scan@@Base+0x2233>
  407e60:	mov    eax,DWORD PTR [r13+rbx*4+0x4]
  407e65:	lea    rcx,[rax+r13*1]
  407e69:	movsxd rdx,DWORD PTR [rcx+rbx*4+0x4]
  407e6e:	mov    rcx,rax
  407e71:	sub    rcx,rdx
  407e74:	add    rcx,r13
  407e77:	cmp    WORD PTR [rcx+rbx*4+0x4],0xc
  407e7d:	jb     408fbb <test_scan@@Base+0x1a9b>
  407e83:	movzx  ecx,WORD PTR [rcx+rbx*4+0xe]
  407e88:	test   rcx,rcx
  407e8b:	je     408fbb <test_scan@@Base+0x1a9b>
  407e91:	add    rax,rcx
  407e94:	lea    rcx,[rax+r13*1]
  407e98:	mov    ecx,DWORD PTR [rcx+rbx*4+0x4]
  407e9c:	add    rcx,rax
  407e9f:	add    rcx,rbp
  407ea2:	lea    rdi,[rcx+r13*1]
  407ea6:	add    rdi,0x8
  407eaa:	mov    rsi,r14
  407ead:	call   4040e0 <strcmp@plt>
  407eb2:	test   eax,eax
  407eb4:	je     407ecb <test_scan@@Base+0x9ab>
  407eb6:	inc    rbx
  407eb9:	add    rbp,0x4
  407ebd:	mov    rax,QWORD PTR [rsp]
  407ec1:	cmp    rbx,rax
  407ec4:	jb     407e57 <test_scan@@Base+0x937>
  407ec6:	jmp    408159 <test_scan@@Base+0xc39>
  407ecb:	cmp    rbx,0x2
  407ecf:	mov    rax,QWORD PTR [rsp]
  407ed3:	jne    408159 <test_scan@@Base+0xc39>
  407ed9:	lea    rbx,[rax-0x1]
  407edd:	xor    r15d,r15d
  407ee0:	lea    r14,[rip+0xfa89]        # 417970 <_IO_stdin_used@@Base+0x2970>
  407ee7:	mov    rbp,QWORD PTR [rsp+0x20]
  407eec:	cmp    r12,r15
  407eef:	je     408159 <test_scan@@Base+0xc39>
  407ef5:	cmp    rbx,QWORD PTR [rsp]
  407ef9:	jae    409753 <test_scan@@Base+0x2233>
  407eff:	mov    eax,DWORD PTR [rbp+r12*1+0x0]
  407f04:	lea    rcx,[r12+rax*1]
  407f08:	movsxd rdx,DWORD PTR [rbp+rcx*1+0x0]
  407f0d:	mov    rcx,rax
  407f10:	sub    rcx,rdx
  407f13:	add    rcx,r12
  407f16:	cmp    WORD PTR [rbp+rcx*1+0x0],0xc
  407f1c:	jb     408fbb <test_scan@@Base+0x1a9b>
  407f22:	movzx  ecx,WORD PTR [rbp+rcx*1+0xa]
  407f27:	test   rcx,rcx
  407f2a:	je     408fbb <test_scan@@Base+0x1a9b>
  407f30:	add    rax,rcx
  407f33:	lea    rcx,[r12+rax*1]
  407f37:	mov    ecx,DWORD PTR [rbp+rcx*1+0x0]
  407f3b:	add    rcx,rax
  407f3e:	lea    rax,[r12+rbp*1]
  407f42:	lea    rdi,[rax+rcx*1]
  407f46:	add    rdi,0x4
  407f4a:	mov    rsi,r14
  407f4d:	call   4040e0 <strcmp@plt>
  407f52:	add    r15,0x4
  407f56:	add    rbp,0xfffffffffffffffc
  407f5a:	dec    rbx
  407f5d:	test   eax,eax
  407f5f:	jne    407eec <test_scan@@Base+0x9cc>
  407f61:	mov    rax,QWORD PTR [rsp]
  407f65:	lea    rax,[rax*4-0x10]
  407f6d:	mov    QWORD PTR [rsp+0x30],rax
  407f72:	cmp    rax,r15
  407f75:	jne    408159 <test_scan@@Base+0xc39>
  407f7b:	mov    rax,QWORD PTR [rsp]
  407f7f:	dec    rax
  407f82:	xor    r15d,r15d
  407f85:	cmp    r12,r15
  407f88:	je     40814d <test_scan@@Base+0xc2d>
  407f8e:	cmp    rax,QWORD PTR [rsp]
  407f92:	mov    r14,QWORD PTR [rsp+0x20]
  407f97:	jae    409753 <test_scan@@Base+0x2233>
  407f9d:	mov    QWORD PTR [rsp+0x18],rax
  407fa2:	mov    eax,DWORD PTR [r14+r12*1]
  407fa6:	lea    rcx,[r12+rax*1]
  407faa:	movsxd rdx,DWORD PTR [r14+rcx*1]
  407fae:	mov    rcx,rax
  407fb1:	sub    rcx,rdx
  407fb4:	add    rcx,r12
  407fb7:	cmp    WORD PTR [r14+rcx*1],0xc
  407fbd:	jb     408fbb <test_scan@@Base+0x1a9b>
  407fc3:	movzx  ecx,WORD PTR [r14+rcx*1+0xa]
  407fc9:	test   rcx,rcx
  407fcc:	je     408fbb <test_scan@@Base+0x1a9b>
  407fd2:	add    rax,rcx
  407fd5:	lea    rcx,[r12+rax*1]
  407fd9:	mov    ecx,DWORD PTR [r14+rcx*1]
  407fdd:	add    rcx,rax
  407fe0:	lea    rax,[r14+r12*1]
  407fe4:	lea    rdi,[rax+rcx*1]
  407fe8:	add    rdi,0x4
  407fec:	add    rcx,r12
  407fef:	mov    ebp,DWORD PTR [r14+rcx*1]
  407ff3:	xor    ebx,ebx
  407ff5:	cmp    ebp,0x8
  407ff8:	mov    edx,0x8
  407ffd:	cmovb  edx,ebp
  408000:	seta   bl
  408003:	lea    rsi,[rip+0xd86c]        # 415876 <_IO_stdin_used@@Base+0x876>
  40800a:	call   404050 <strncmp@plt>
  40800f:	cmp    eax,0x1
  408012:	mov    ecx,0x0
  408017:	sbb    ecx,ecx
  408019:	or     ecx,eax
  40801b:	test   eax,eax
  40801d:	cmovne ebx,ecx
  408020:	cmp    ebp,0x8
  408023:	cmovb  ebx,ecx
  408026:	add    r15,0x4
  40802a:	add    r14,0xfffffffffffffffc
  40802e:	mov    QWORD PTR [rsp+0x20],r14
  408033:	mov    rax,QWORD PTR [rsp+0x18]
  408038:	dec    rax
  40803b:	test   ebx,ebx
  40803d:	jne    407f85 <test_scan@@Base+0xa65>
  408043:	cmp    QWORD PTR [rsp+0x30],r15
  408048:	jne    40814d <test_scan@@Base+0xc2d>
  40804e:	mov    rax,QWORD PTR [rsp]
  408052:	cmp    eax,0x3
  408055:	mov    ecx,0x3
  40805a:	cmovb  ecx,eax
  40805d:	mov    rax,QWORD PTR [rsp+0x28]
  408062:	mov    QWORD PTR [rsp+0x20],rcx
  408067:	lea    r14,[rax+rcx*4]
  40806b:	add    r14,QWORD PTR [rsp+0x40]
  408070:	add    r14,QWORD PTR [rsp+0x48]
  408075:	add    r14,QWORD PTR [rsp+0x8]
  40807a:	xor    ebx,ebx
  40807c:	xor    r15d,r15d
  40807f:	mov    rax,QWORD PTR [rsp+0x20]
  408084:	add    rax,r15
  408087:	cmp    rax,0x2
  40808b:	jb     40814d <test_scan@@Base+0xc2d>
  408091:	mov    rax,QWORD PTR [rsp+0x20]
  408096:	add    rax,r15
  408099:	add    rax,0xffffffffffffffff
  40809d:	cmp    rax,QWORD PTR [rsp]
  4080a1:	jae    409753 <test_scan@@Base+0x2233>
  4080a7:	mov    eax,DWORD PTR [r14+r15*4]
  4080ab:	lea    rcx,[r14+rax*1]
  4080af:	movsxd rdx,DWORD PTR [rcx+r15*4]
  4080b3:	mov    rcx,rax
  4080b6:	sub    rcx,rdx
  4080b9:	add    rcx,r14
  4080bc:	cmp    WORD PTR [rcx+r15*4],0xc
  4080c2:	jb     408fbb <test_scan@@Base+0x1a9b>
  4080c8:	movzx  ecx,WORD PTR [rcx+r15*4+0xa]
  4080ce:	test   rcx,rcx
  4080d1:	je     408fbb <test_scan@@Base+0x1a9b>
  4080d7:	add    rax,rcx
  4080da:	lea    rcx,[r14+rax*1]
  4080de:	mov    ecx,DWORD PTR [rcx+r15*4]
  4080e2:	add    rcx,rax
  4080e5:	lea    rax,[rbx+rcx*1]
  4080e9:	lea    rdi,[r14+rax*1]
  4080ed:	add    rdi,0x4
  4080f1:	add    rcx,r14
  4080f4:	mov    ebp,DWORD PTR [rcx+r15*4]
  4080f8:	xor    r12d,r12d
  4080fb:	cmp    ebp,0x8
  4080fe:	mov    edx,0x8
  408103:	cmovb  edx,ebp
  408106:	seta   r12b
  40810a:	lea    rsi,[rip+0xd765]        # 415876 <_IO_stdin_used@@Base+0x876>
  408111:	call   404050 <strncmp@plt>
  408116:	cmp    eax,0x1
  408119:	mov    ecx,0x0
  40811e:	sbb    ecx,ecx
  408120:	or     ecx,eax
  408122:	test   eax,eax
  408124:	cmovne r12d,ecx
  408128:	cmp    ebp,0x8
  40812b:	cmovb  r12d,ecx
  40812f:	dec    r15
  408132:	add    rbx,0xfffffffffffffffc
  408136:	test   r12d,r12d
  408139:	jne    40807f <test_scan@@Base+0xb5f>
  40813f:	mov    rax,QWORD PTR [rsp+0x20]
  408144:	add    rax,r15
  408147:	cmp    rax,0x2
  40814b:	je     408165 <test_scan@@Base+0xc45>
  40814d:	lea    rdi,[rip+0xf956]        # 417aaa <_IO_stdin_used@@Base+0x2aaa>
  408154:	jmp    407e14 <test_scan@@Base+0x8f4>
  408159:	lea    rdi,[rip+0xf90d]        # 417a6d <_IO_stdin_used@@Base+0x2a6d>
  408160:	jmp    407e14 <test_scan@@Base+0x8f4>
  408165:	cmp    DWORD PTR [rsp],0x3
  408169:	jb     408346 <test_scan@@Base+0xe26>
  40816f:	mov    ebp,0x2
  408174:	xor    ebx,ebx
  408176:	lea    r14,[rip+0xf7f3]        # 417970 <_IO_stdin_used@@Base+0x2970>
  40817d:	cmp    rbp,QWORD PTR [rsp]
  408181:	jae    409753 <test_scan@@Base+0x2233>
  408187:	mov    eax,DWORD PTR [r13+rbp*4+0x4]
  40818c:	lea    rcx,[rax+r13*1]
  408190:	movsxd rdx,DWORD PTR [rcx+rbp*4+0x4]
  408195:	mov    rcx,rax
  408198:	sub    rcx,rdx
  40819b:	add    rcx,r13
  40819e:	cmp    WORD PTR [rcx+rbp*4+0x4],0xc
  4081a4:	jb     408fbb <test_scan@@Base+0x1a9b>
  4081aa:	movzx  ecx,WORD PTR [rcx+rbp*4+0xe]
  4081af:	test   rcx,rcx
  4081b2:	je     408fbb <test_scan@@Base+0x1a9b>
  4081b8:	add    rax,rcx
  4081bb:	lea    rcx,[rax+r13*1]
  4081bf:	mov    ecx,DWORD PTR [rcx+rbp*4+0x4]
  4081c3:	add    rcx,rax
  4081c6:	add    rcx,rbx
  4081c9:	lea    rdi,[rcx+r13*1]
  4081cd:	add    rdi,0x10
  4081d1:	mov    rsi,r14
  4081d4:	call   4040e0 <strcmp@plt>
  4081d9:	test   eax,eax
  4081db:	je     4081ef <test_scan@@Base+0xccf>
  4081dd:	inc    rbp
  4081e0:	add    rbx,0x4
  4081e4:	cmp    rbp,QWORD PTR [rsp]
  4081e8:	jb     40817d <test_scan@@Base+0xc5d>
  4081ea:	jmp    408346 <test_scan@@Base+0xe26>
  4081ef:	cmp    rbp,0x2
  4081f3:	jne    408346 <test_scan@@Base+0xe26>
  4081f9:	mov    ebx,0x2
  4081fe:	xor    r15d,r15d
  408201:	lea    r14,[rip+0xd66e]        # 415876 <_IO_stdin_used@@Base+0x876>
  408208:	cmp    rbx,QWORD PTR [rsp]
  40820c:	jae    409753 <test_scan@@Base+0x2233>
  408212:	mov    eax,DWORD PTR [r13+rbx*4+0x4]
  408217:	lea    rcx,[rax+r13*1]
  40821b:	movsxd rdx,DWORD PTR [rcx+rbx*4+0x4]
  408220:	mov    rcx,rax
  408223:	sub    rcx,rdx
  408226:	add    rcx,r13
  408229:	cmp    WORD PTR [rcx+rbx*4+0x4],0xc
  40822f:	jb     408fbb <test_scan@@Base+0x1a9b>
  408235:	movzx  ecx,WORD PTR [rcx+rbx*4+0xe]
  40823a:	test   rcx,rcx
  40823d:	je     408fbb <test_scan@@Base+0x1a9b>
  408243:	add    rax,rcx
  408246:	lea    rcx,[rax+r13*1]
  40824a:	mov    ecx,DWORD PTR [rcx+rbx*4+0x4]
  40824e:	add    rcx,rax
  408251:	lea    rax,[r15+rcx*1]
  408255:	lea    rdi,[rax+r13*1]
  408259:	add    rdi,0x10
  40825d:	add    rcx,r13
  408260:	mov    r12d,DWORD PTR [rcx+rbx*4+0x4]
  408265:	xor    ebp,ebp
  408267:	cmp    r12d,0x8
  40826b:	mov    edx,0x8
  408270:	cmovb  edx,r12d
  408274:	seta   bpl
  408278:	mov    rsi,r14
  40827b:	call   404050 <strncmp@plt>
  408280:	cmp    eax,0x1
  408283:	mov    ecx,0x0
  408288:	sbb    ecx,ecx
  40828a:	or     ecx,eax
  40828c:	test   eax,eax
  40828e:	cmovne ebp,ecx
  408291:	cmp    r12d,0x8
  408295:	cmovb  ebp,ecx
  408298:	test   ebp,ebp
  40829a:	je     4082b2 <test_scan@@Base+0xd92>
  40829c:	inc    rbx
  40829f:	add    r15,0x4
  4082a3:	cmp    rbx,QWORD PTR [rsp]
  4082a7:	jb     408208 <test_scan@@Base+0xce8>
  4082ad:	jmp    408346 <test_scan@@Base+0xe26>
  4082b2:	cmp    rbx,0x2
  4082b6:	jne    408346 <test_scan@@Base+0xe26>
  4082bc:	cmp    DWORD PTR [rsp],0x4
  4082c0:	jb     40852f <test_scan@@Base+0x100f>
  4082c6:	mov    ebp,0x3
  4082cb:	xor    ebx,ebx
  4082cd:	lea    r14,[rip+0xf69c]        # 417970 <_IO_stdin_used@@Base+0x2970>
  4082d4:	cmp    rbp,QWORD PTR [rsp]
  4082d8:	jae    409753 <test_scan@@Base+0x2233>
  4082de:	mov    eax,DWORD PTR [r13+rbp*4+0x4]
  4082e3:	lea    rcx,[rax+r13*1]
  4082e7:	movsxd rdx,DWORD PTR [rcx+rbp*4+0x4]
  4082ec:	mov    rcx,rax
  4082ef:	sub    rcx,rdx
  4082f2:	add    rcx,r13
  4082f5:	cmp    WORD PTR [rcx+rbp*4+0x4],0xc
  4082fb:	jb     408fbb <test_scan@@Base+0x1a9b>
  408301:	movzx  ecx,WORD PTR [rcx+rbp*4+0xe]
  408306:	test   rcx,rcx
  408309:	je     408fbb <test_scan@@Base+0x1a9b>
  40830f:	add    rax,rcx
  408312:	lea    rcx,[rax+r13*1]
  408316:	mov    ecx,DWORD PTR [rcx+rbp*4+0x4]
  40831a:	add    rcx,rax
  40831d:	add    rcx,rbx
  408320:	lea    rdi,[rcx+r13*1]
  408324:	add    rdi,0x14
  408328:	mov    rsi,r14
  40832b:	call   4040e0 <strcmp@plt>
  408330:	test   eax,eax
  408332:	je     408352 <test_scan@@Base+0xe32>
  408334:	inc    rbp
  408337:	add    rbx,0x4
  40833b:	cmp    rbp,QWORD PTR [rsp]
  40833f:	jb     4082d4 <test_scan@@Base+0xdb4>
  408341:	jmp    40852f <test_scan@@Base+0x100f>
  408346:	lea    rdi,[rip+0xf733]        # 417a80 <_IO_stdin_used@@Base+0x2a80>
  40834d:	jmp    407e14 <test_scan@@Base+0x8f4>
  408352:	cmp    rbp,0x4
  408356:	jne    40852f <test_scan@@Base+0x100f>
  40835c:	cmp    DWORD PTR [rsp],0x2
  408360:	jb     40868e <test_scan@@Base+0x116e>
  408366:	mov    rax,QWORD PTR [rsp]
  40836a:	cmp    rax,0x3
  40836e:	mov    r15d,0x3
  408374:	cmovb  r15,rax
  408378:	mov    ebx,0x1
  40837d:	xor    ebp,ebp
  40837f:	lea    r14,[rip+0xd4b3]        # 415839 <_IO_stdin_used@@Base+0x839>
  408386:	cmp    rbx,QWORD PTR [rsp]
  40838a:	jae    409753 <test_scan@@Base+0x2233>
  408390:	mov    eax,DWORD PTR [r13+rbx*4+0x4]
  408395:	lea    rcx,[rax+r13*1]
  408399:	movsxd rdx,DWORD PTR [rcx+rbx*4+0x4]
  40839e:	mov    rcx,rax
  4083a1:	sub    rcx,rdx
  4083a4:	add    rcx,r13
  4083a7:	cmp    WORD PTR [rcx+rbx*4+0x4],0xc
  4083ad:	jb     408fbb <test_scan@@Base+0x1a9b>
  4083b3:	movzx  ecx,WORD PTR [rcx+rbx*4+0xe]
  4083b8:	test   rcx,rcx
  4083bb:	je     408fbb <test_scan@@Base+0x1a9b>
  4083c1:	add    rax,rcx
  4083c4:	lea    rcx,[rax+r13*1]
  4083c8:	mov    ecx,DWORD PTR [rcx+rbx*4+0x4]
  4083cc:	add    rcx,rax
  4083cf:	add    rcx,rbp
  4083d2:	lea    rdi,[rcx+r13*1]
  4083d6:	add    rdi,0xc
  4083da:	mov    rsi,r14
  4083dd:	call   4040e0 <strcmp@plt>
  4083e2:	test   eax,eax
  4083e4:	je     408598 <test_scan@@Base+0x1078>
  4083ea:	inc    rbx
  4083ed:	add    rbp,0x4
  4083f1:	cmp    rbx,r15
  4083f4:	jb     408386 <test_scan@@Base+0xe66>
  4083f6:	cmp    DWORD PTR [rsp],0x2
  4083fa:	jb     40868e <test_scan@@Base+0x116e>
  408400:	mov    rax,QWORD PTR [rsp]
  408404:	cmp    rax,0x3
  408408:	mov    r15d,0x3
  40840e:	cmovb  r15,rax
  408412:	mov    ebx,0x1
  408417:	xor    ebp,ebp
  408419:	lea    r14,[rip+0xcf8f]        # 4153af <_IO_stdin_used@@Base+0x3af>
  408420:	cmp    rbx,QWORD PTR [rsp]
  408424:	jae    409753 <test_scan@@Base+0x2233>
  40842a:	mov    eax,DWORD PTR [r13+rbx*4+0x4]
  40842f:	lea    rcx,[rax+r13*1]
  408433:	movsxd rdx,DWORD PTR [rcx+rbx*4+0x4]
  408438:	mov    rcx,rax
  40843b:	sub    rcx,rdx
  40843e:	add    rcx,r13
  408441:	cmp    WORD PTR [rcx+rbx*4+0x4],0xc
  408447:	jb     408fbb <test_scan@@Base+0x1a9b>
  40844d:	movzx  ecx,WORD PTR [rcx+rbx*4+0xe]
  408452:	test   rcx,rcx
  408455:	je     408fbb <test_scan@@Base+0x1a9b>
  40845b:	add    rax,rcx
  40845e:	lea    rcx,[rax+r13*1]
  408462:	mov    ecx,DWORD PTR [rcx+rbx*4+0x4]
  408466:	add    rcx,rax
  408469:	add    rcx,rbp
  40846c:	lea    rdi,[rcx+r13*1]
  408470:	add    rdi,0xc
  408474:	mov    rsi,r14
  408477:	call   4040e0 <strcmp@plt>
  40847c:	test   eax,eax
  40847e:	je     4085e2 <test_scan@@Base+0x10c2>
  408484:	inc    rbx
  408487:	add    rbp,0x4
  40848b:	cmp    rbx,r15
  40848e:	jb     408420 <test_scan@@Base+0xf00>
  408490:	cmp    DWORD PTR [rsp],0x2
  408494:	jb     40868e <test_scan@@Base+0x116e>
  40849a:	mov    rax,QWORD PTR [rsp]
  40849e:	cmp    rax,0x3
  4084a2:	mov    r15d,0x3
  4084a8:	cmovb  r15,rax
  4084ac:	mov    ebx,0x1
  4084b1:	xor    ebp,ebp
  4084b3:	lea    r14,[rip+0xf4de]        # 417998 <_IO_stdin_used@@Base+0x2998>
  4084ba:	cmp    rbx,QWORD PTR [rsp]
  4084be:	jae    409753 <test_scan@@Base+0x2233>
  4084c4:	mov    eax,DWORD PTR [r13+rbx*4+0x4]
  4084c9:	lea    rcx,[rax+r13*1]
  4084cd:	movsxd rdx,DWORD PTR [rcx+rbx*4+0x4]
  4084d2:	mov    rcx,rax
  4084d5:	sub    rcx,rdx
  4084d8:	add    rcx,r13
  4084db:	cmp    WORD PTR [rcx+rbx*4+0x4],0xc
  4084e1:	jb     408fbb <test_scan@@Base+0x1a9b>
  4084e7:	movzx  ecx,WORD PTR [rcx+rbx*4+0xe]
  4084ec:	test   rcx,rcx
  4084ef:	je     408fbb <test_scan@@Base+0x1a9b>
  4084f5:	add    rax,rcx
  4084f8:	lea    rcx,[rax+r13*1]
  4084fc:	mov    ecx,DWORD PTR [rcx+rbx*4+0x4]
  408500:	add    rcx,rax
  408503:	add    rcx,rbp
  408506:	lea    rdi,[rcx+r13*1]
  40850a:	add    rdi,0xc
  40850e:	mov    rsi,r14
  408511:	call   4040e0 <strcmp@plt>
  408516:	test   eax,eax
  408518:	je     4085ee <test_scan@@Base+0x10ce>
  40851e:	inc    rbx
  408521:	add    rbp,0x4
  408525:	cmp    rbx,r15
  408528:	jb     4084ba <test_scan@@Base+0xf9a>
  40852a:	jmp    40868e <test_scan@@Base+0x116e>
  40852f:	lea    rdi,[rip+0xf52f]        # 417a65 <_IO_stdin_used@@Base+0x2a65>
  408536:	jmp    407e14 <test_scan@@Base+0x8f4>
  40853b:	lea    rdi,[rip+0xdba4]        # 4160e6 <_IO_stdin_used@@Base+0x10e6>
  408542:	lea    rsi,[rip+0xda61]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  408549:	lea    rcx,[rip+0xdc38]        # 416188 <_IO_stdin_used@@Base+0x1188>
  408550:	mov    edx,0xeb
  408555:	call   4040a0 <__assert_fail@plt>
  40855a:	lea    rdi,[rip+0xd8b0]        # 415e11 <_IO_stdin_used@@Base+0xe11>
  408561:	lea    rsi,[rip+0xd8cf]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  408568:	lea    rcx,[rip+0xdf50]        # 4164bf <_IO_stdin_used@@Base+0x14bf>
  40856f:	mov    edx,0x2c7
  408574:	call   4040a0 <__assert_fail@plt>
  408579:	lea    rdi,[rip+0xd27b]        # 4157fb <_IO_stdin_used@@Base+0x7fb>
  408580:	lea    rsi,[rip+0xcdad]        # 415334 <_IO_stdin_used@@Base+0x334>
  408587:	lea    rcx,[rip+0xd2ba]        # 415848 <_IO_stdin_used@@Base+0x848>
  40858e:	mov    edx,0x519
  408593:	call   4040a0 <__assert_fail@plt>
  408598:	lea    rdi,[rip+0xf4a4]        # 417a43 <_IO_stdin_used@@Base+0x2a43>
  40859f:	jmp    407e14 <test_scan@@Base+0x8f4>
  4085a4:	lea    rdi,[rip+0xd2bf]        # 41586a <_IO_stdin_used@@Base+0x86a>
  4085ab:	lea    rsi,[rip+0xcd82]        # 415334 <_IO_stdin_used@@Base+0x334>
  4085b2:	lea    rcx,[rip+0xd28f]        # 415848 <_IO_stdin_used@@Base+0x848>
  4085b9:	mov    edx,0x51b
  4085be:	call   4040a0 <__assert_fail@plt>
  4085c3:	lea    rdi,[rip+0xd2a4]        # 41586e <_IO_stdin_used@@Base+0x86e>
  4085ca:	lea    rsi,[rip+0xcd63]        # 415334 <_IO_stdin_used@@Base+0x334>
  4085d1:	lea    rcx,[rip+0xd270]        # 415848 <_IO_stdin_used@@Base+0x848>
  4085d8:	mov    edx,0x51d
  4085dd:	call   4040a0 <__assert_fail@plt>
  4085e2:	lea    rdi,[rip+0xf439]        # 417a22 <_IO_stdin_used@@Base+0x2a22>
  4085e9:	jmp    407e14 <test_scan@@Base+0x8f4>
  4085ee:	cmp    rbx,0x1
  4085f2:	jne    40868e <test_scan@@Base+0x116e>
  4085f8:	mov    rax,QWORD PTR [rsp]
  4085fc:	cmp    rax,0x3
  408600:	mov    r15d,0x3
  408606:	cmovb  r15,rax
  40860a:	xor    ebx,ebx
  40860c:	lea    r14,[rip+0xf35d]        # 417970 <_IO_stdin_used@@Base+0x2970>
  408613:	xor    ebp,ebp
  408615:	lea    r12,[rbp+0x1]
  408619:	cmp    r12,QWORD PTR [rsp]
  40861d:	jae    409753 <test_scan@@Base+0x2233>
  408623:	mov    eax,DWORD PTR [r13+rbp*4+0x8]
  408628:	lea    rcx,[rax+r13*1]
  40862c:	movsxd rdx,DWORD PTR [rcx+rbp*4+0x8]
  408631:	mov    rcx,rax
  408634:	sub    rcx,rdx
  408637:	add    rcx,r13
  40863a:	cmp    WORD PTR [rcx+rbp*4+0x8],0xc
  408640:	jb     408fbb <test_scan@@Base+0x1a9b>
  408646:	movzx  ecx,WORD PTR [rcx+rbp*4+0x12]
  40864b:	test   rcx,rcx
  40864e:	je     408fbb <test_scan@@Base+0x1a9b>
  408654:	add    rax,rcx
  408657:	lea    rcx,[rax+r13*1]
  40865b:	mov    ecx,DWORD PTR [rcx+rbp*4+0x8]
  40865f:	add    rcx,rax
  408662:	add    rcx,rbx
  408665:	lea    rdi,[rcx+r13*1]
  408669:	add    rdi,0xc
  40866d:	mov    rsi,r14
  408670:	call   4040e0 <strcmp@plt>
  408675:	test   eax,eax
  408677:	je     40869a <test_scan@@Base+0x117a>
  408679:	add    rbp,0x2
  40867d:	add    rbx,0x4
  408681:	cmp    rbp,r15
  408684:	mov    rbp,r12
  408687:	jb     408615 <test_scan@@Base+0x10f5>
  408689:	jmp    4087ee <test_scan@@Base+0x12ce>
  40868e:	lea    rdi,[rip+0xf2e5]        # 41797a <_IO_stdin_used@@Base+0x297a>
  408695:	jmp    407e14 <test_scan@@Base+0x8f4>
  40869a:	cmp    rbp,0x1
  40869e:	jne    4087ee <test_scan@@Base+0x12ce>
  4086a4:	mov    rax,QWORD PTR [rsp]
  4086a8:	cmp    rax,0x3
  4086ac:	mov    r15d,0x3
  4086b2:	cmovb  r15,rax
  4086b6:	mov    ebx,0x1
  4086bb:	xor    ebp,ebp
  4086bd:	lea    r14,[rip+0xd119]        # 4157dd <_IO_stdin_used@@Base+0x7dd>
  4086c4:	cmp    rbx,QWORD PTR [rsp]
  4086c8:	jae    409753 <test_scan@@Base+0x2233>
  4086ce:	mov    eax,DWORD PTR [r13+rbx*4+0x4]
  4086d3:	lea    rcx,[rax+r13*1]
  4086d7:	movsxd rdx,DWORD PTR [rcx+rbx*4+0x4]
  4086dc:	mov    rcx,rax
  4086df:	sub    rcx,rdx
  4086e2:	add    rcx,r13
  4086e5:	cmp    WORD PTR [rcx+rbx*4+0x4],0xc
  4086eb:	jb     408fbb <test_scan@@Base+0x1a9b>
  4086f1:	movzx  ecx,WORD PTR [rcx+rbx*4+0xe]
  4086f6:	test   rcx,rcx
  4086f9:	je     408fbb <test_scan@@Base+0x1a9b>
  4086ff:	add    rax,rcx
  408702:	lea    rcx,[rax+r13*1]
  408706:	mov    ecx,DWORD PTR [rcx+rbx*4+0x4]
  40870a:	add    rcx,rax
  40870d:	add    rcx,rbp
  408710:	lea    rdi,[rcx+r13*1]
  408714:	add    rdi,0xc
  408718:	mov    rsi,r14
  40871b:	call   4040e0 <strcmp@plt>
  408720:	test   eax,eax
  408722:	je     4087fa <test_scan@@Base+0x12da>
  408728:	inc    rbx
  40872b:	add    rbp,0x4
  40872f:	cmp    rbx,r15
  408732:	jb     4086c4 <test_scan@@Base+0x11a4>
  408734:	mov    rax,QWORD PTR [rsp]
  408738:	cmp    rax,0x3
  40873c:	mov    r12d,0x3
  408742:	cmovb  r12,rax
  408746:	mov    rax,QWORD PTR [rsp+0x28]
  40874b:	lea    r15,[rax+r12*4]
  40874f:	add    r15,QWORD PTR [rsp+0x40]
  408754:	add    r15,QWORD PTR [rsp+0x48]
  408759:	add    r15,QWORD PTR [rsp+0x8]
  40875e:	xor    ebp,ebp
  408760:	lea    r14,[rip+0xd0d2]        # 415839 <_IO_stdin_used@@Base+0x839>
  408767:	xor    ebx,ebx
  408769:	lea    rax,[r12+rbx*1]
  40876d:	cmp    rax,0x1
  408771:	jbe    408806 <test_scan@@Base+0x12e6>
  408777:	lea    rax,[r12+rbx*1]
  40877b:	add    rax,0xffffffffffffffff
  40877f:	cmp    rax,QWORD PTR [rsp]
  408783:	jae    409753 <test_scan@@Base+0x2233>
  408789:	mov    eax,DWORD PTR [r15+rbx*4]
  40878d:	lea    rcx,[r15+rax*1]
  408791:	movsxd rdx,DWORD PTR [rcx+rbx*4]
  408795:	mov    rcx,rax
  408798:	sub    rcx,rdx
  40879b:	add    rcx,r15
  40879e:	cmp    WORD PTR [rcx+rbx*4],0xc
  4087a3:	jb     408fbb <test_scan@@Base+0x1a9b>
  4087a9:	movzx  ecx,WORD PTR [rcx+rbx*4+0xa]
  4087ae:	test   rcx,rcx
  4087b1:	je     408fbb <test_scan@@Base+0x1a9b>
  4087b7:	add    rax,rcx
  4087ba:	lea    rcx,[r15+rax*1]
  4087be:	mov    ecx,DWORD PTR [rcx+rbx*4]
  4087c1:	add    rcx,rax
  4087c4:	add    rcx,rbp
  4087c7:	lea    rdi,[r15+rcx*1]
  4087cb:	add    rdi,0x4
  4087cf:	mov    rsi,r14
  4087d2:	call   4040e0 <strcmp@plt>
  4087d7:	dec    rbx
  4087da:	add    rbp,0xfffffffffffffffc
  4087de:	test   eax,eax
  4087e0:	jne    408769 <test_scan@@Base+0x1249>
  4087e2:	lea    rdi,[rip+0xf1e1]        # 4179ca <_IO_stdin_used@@Base+0x29ca>
  4087e9:	jmp    407e14 <test_scan@@Base+0x8f4>
  4087ee:	lea    rdi,[rip+0xf15d]        # 417952 <_IO_stdin_used@@Base+0x2952>
  4087f5:	jmp    407e14 <test_scan@@Base+0x8f4>
  4087fa:	lea    rdi,[rip+0xf1f6]        # 4179f7 <_IO_stdin_used@@Base+0x29f7>
  408801:	jmp    407e14 <test_scan@@Base+0x8f4>
  408806:	xor    ebp,ebp
  408808:	lea    r14,[rip+0xcba0]        # 4153af <_IO_stdin_used@@Base+0x3af>
  40880f:	xor    ebx,ebx
  408811:	lea    rax,[r12+rbx*1]
  408815:	cmp    rax,0x1
  408819:	jbe    408892 <test_scan@@Base+0x1372>
  40881b:	lea    rax,[r12+rbx*1]
  40881f:	add    rax,0xffffffffffffffff
  408823:	cmp    rax,QWORD PTR [rsp]
  408827:	jae    409753 <test_scan@@Base+0x2233>
  40882d:	mov    eax,DWORD PTR [r15+rbx*4]
  408831:	lea    rcx,[r15+rax*1]
  408835:	movsxd rdx,DWORD PTR [rcx+rbx*4]
  408839:	mov    rcx,rax
  40883c:	sub    rcx,rdx
  40883f:	add    rcx,r15
  408842:	cmp    WORD PTR [rcx+rbx*4],0xc
  408847:	jb     408fbb <test_scan@@Base+0x1a9b>
  40884d:	movzx  ecx,WORD PTR [rcx+rbx*4+0xa]
  408852:	test   rcx,rcx
  408855:	je     408fbb <test_scan@@Base+0x1a9b>
  40885b:	add    rax,rcx
  40885e:	lea    rcx,[r15+rax*1]
  408862:	mov    ecx,DWORD PTR [rcx+rbx*4]
  408865:	add    rcx,rax
  408868:	add    rcx,rbp
  40886b:	lea    rdi,[r15+rcx*1]
  40886f:	add    rdi,0x4
  408873:	mov    rsi,r14
  408876:	call   4040e0 <strcmp@plt>
  40887b:	dec    rbx
  40887e:	add    rbp,0xfffffffffffffffc
  408882:	test   eax,eax
  408884:	jne    408811 <test_scan@@Base+0x12f1>
  408886:	lea    rdi,[rip+0xf111]        # 41799e <_IO_stdin_used@@Base+0x299e>
  40888d:	jmp    407e14 <test_scan@@Base+0x8f4>
  408892:	xor    r14d,r14d
  408895:	lea    rbx,[rip+0xf0fc]        # 417998 <_IO_stdin_used@@Base+0x2998>
  40889c:	xor    ebp,ebp
  40889e:	lea    rax,[r12+rbp*1]
  4088a2:	cmp    rax,0x2
  4088a6:	jb     40891c <test_scan@@Base+0x13fc>
  4088a8:	lea    rax,[r12+rbp*1]
  4088ac:	add    rax,0xffffffffffffffff
  4088b0:	cmp    rax,QWORD PTR [rsp]
  4088b4:	jae    409753 <test_scan@@Base+0x2233>
  4088ba:	mov    eax,DWORD PTR [r15+rbp*4]
  4088be:	lea    rcx,[r15+rax*1]
  4088c2:	movsxd rdx,DWORD PTR [rcx+rbp*4]
  4088c6:	mov    rcx,rax
  4088c9:	sub    rcx,rdx
  4088cc:	add    rcx,r15
  4088cf:	cmp    WORD PTR [rcx+rbp*4],0xc
  4088d4:	jb     408fbb <test_scan@@Base+0x1a9b>
  4088da:	movzx  ecx,WORD PTR [rcx+rbp*4+0xa]
  4088df:	test   rcx,rcx
  4088e2:	je     408fbb <test_scan@@Base+0x1a9b>
  4088e8:	add    rax,rcx
  4088eb:	lea    rcx,[r15+rax*1]
  4088ef:	mov    ecx,DWORD PTR [rcx+rbp*4]
  4088f2:	add    rcx,rax
  4088f5:	add    rcx,r14
  4088f8:	lea    rdi,[r15+rcx*1]
  4088fc:	add    rdi,0x4
  408900:	mov    rsi,rbx
  408903:	call   4040e0 <strcmp@plt>
  408908:	dec    rbp
  40890b:	add    r14,0xfffffffffffffffc
  40890f:	test   eax,eax
  408911:	jne    40889e <test_scan@@Base+0x137e>
  408913:	add    rbp,r12
  408916:	cmp    rbp,0x1
  40891a:	je     408928 <test_scan@@Base+0x1408>
  40891c:	lea    rdi,[rip+0xf056]        # 417979 <_IO_stdin_used@@Base+0x2979>
  408923:	jmp    407e14 <test_scan@@Base+0x8f4>
  408928:	xor    r14d,r14d
  40892b:	lea    rbx,[rip+0xf03e]        # 417970 <_IO_stdin_used@@Base+0x2970>
  408932:	xor    ebp,ebp
  408934:	lea    rax,[r12+rbp*1]
  408938:	cmp    rax,0x2
  40893c:	jb     4089b2 <test_scan@@Base+0x1492>
  40893e:	lea    rax,[r12+rbp*1]
  408942:	add    rax,0xffffffffffffffff
  408946:	cmp    rax,QWORD PTR [rsp]
  40894a:	jae    409753 <test_scan@@Base+0x2233>
  408950:	mov    eax,DWORD PTR [r15+rbp*4]
  408954:	lea    rcx,[r15+rax*1]
  408958:	movsxd rdx,DWORD PTR [rcx+rbp*4]
  40895c:	mov    rcx,rax
  40895f:	sub    rcx,rdx
  408962:	add    rcx,r15
  408965:	cmp    WORD PTR [rcx+rbp*4],0xc
  40896a:	jb     408fbb <test_scan@@Base+0x1a9b>
  408970:	movzx  ecx,WORD PTR [rcx+rbp*4+0xa]
  408975:	test   rcx,rcx
  408978:	je     408fbb <test_scan@@Base+0x1a9b>
  40897e:	add    rax,rcx
  408981:	lea    rcx,[r15+rax*1]
  408985:	mov    ecx,DWORD PTR [rcx+rbp*4]
  408988:	add    rcx,rax
  40898b:	add    rcx,r14
  40898e:	lea    rdi,[r15+rcx*1]
  408992:	add    rdi,0x4
  408996:	mov    rsi,rbx
  408999:	call   4040e0 <strcmp@plt>
  40899e:	dec    rbp
  4089a1:	add    r14,0xfffffffffffffffc
  4089a5:	test   eax,eax
  4089a7:	jne    408934 <test_scan@@Base+0x1414>
  4089a9:	add    rbp,r12
  4089ac:	cmp    rbp,0x2
  4089b0:	je     4089be <test_scan@@Base+0x149e>
  4089b2:	lea    rdi,[rip+0xef98]        # 417951 <_IO_stdin_used@@Base+0x2951>
  4089b9:	jmp    407e14 <test_scan@@Base+0x8f4>
  4089be:	xor    ebp,ebp
  4089c0:	lea    r14,[rip+0xce16]        # 4157dd <_IO_stdin_used@@Base+0x7dd>
  4089c7:	xor    ebx,ebx
  4089c9:	lea    rax,[r12+rbx*1]
  4089cd:	cmp    rax,0x1
  4089d1:	jbe    408a4a <test_scan@@Base+0x152a>
  4089d3:	lea    rax,[r12+rbx*1]
  4089d7:	add    rax,0xffffffffffffffff
  4089db:	cmp    rax,QWORD PTR [rsp]
  4089df:	jae    409753 <test_scan@@Base+0x2233>
  4089e5:	mov    eax,DWORD PTR [r15+rbx*4]
  4089e9:	lea    rcx,[r15+rax*1]
  4089ed:	movsxd rdx,DWORD PTR [rcx+rbx*4]
  4089f1:	mov    rcx,rax
  4089f4:	sub    rcx,rdx
  4089f7:	add    rcx,r15
  4089fa:	cmp    WORD PTR [rcx+rbx*4],0xc
  4089ff:	jb     408fbb <test_scan@@Base+0x1a9b>
  408a05:	movzx  ecx,WORD PTR [rcx+rbx*4+0xa]
  408a0a:	test   rcx,rcx
  408a0d:	je     408fbb <test_scan@@Base+0x1a9b>
  408a13:	add    rax,rcx
  408a16:	lea    rcx,[r15+rax*1]
  408a1a:	mov    ecx,DWORD PTR [rcx+rbx*4]
  408a1d:	add    rcx,rax
  408a20:	add    rcx,rbp
  408a23:	lea    rdi,[r15+rcx*1]
  408a27:	add    rdi,0x4
  408a2b:	mov    rsi,r14
  408a2e:	call   4040e0 <strcmp@plt>
  408a33:	dec    rbx
  408a36:	add    rbp,0xfffffffffffffffc
  408a3a:	test   eax,eax
  408a3c:	jne    4089c9 <test_scan@@Base+0x14a9>
  408a3e:	lea    rdi,[rip+0xeee0]        # 417925 <_IO_stdin_used@@Base+0x2925>
  408a45:	jmp    407e14 <test_scan@@Base+0x8f4>
  408a4a:	mov    rax,QWORD PTR [rsp]
  408a4e:	mov    rcx,QWORD PTR [rsp+0x28]
  408a53:	lea    rax,[rcx+rax*4]
  408a57:	add    rax,QWORD PTR [rsp+0x40]
  408a5c:	add    rax,QWORD PTR [rsp+0x48]
  408a61:	add    rax,QWORD PTR [rsp+0x8]
  408a66:	mov    QWORD PTR [rsp+0x20],rax
  408a6b:	xor    ebp,ebp
  408a6d:	lea    r14,[rip+0xc93b]        # 4153af <_IO_stdin_used@@Base+0x3af>
  408a74:	xor    ebx,ebx
  408a76:	mov    rax,QWORD PTR [rsp]
  408a7a:	mov    rcx,rax
  408a7d:	add    rax,rbx
  408a80:	cmp    rax,rcx
  408a83:	jbe    408b12 <test_scan@@Base+0x15f2>
  408a89:	mov    rax,QWORD PTR [rsp]
  408a8d:	mov    rcx,rax
  408a90:	add    rax,rbx
  408a93:	add    rax,0xffffffffffffffff
  408a97:	cmp    rax,rcx
  408a9a:	jae    409753 <test_scan@@Base+0x2233>
  408aa0:	mov    rsi,QWORD PTR [rsp+0x20]
  408aa5:	mov    eax,DWORD PTR [rsi+rbx*4]
  408aa8:	lea    rcx,[rsi+rax*1]
  408aac:	movsxd rdx,DWORD PTR [rcx+rbx*4]
  408ab0:	mov    rcx,rax
  408ab3:	sub    rcx,rdx
  408ab6:	add    rcx,rsi
  408ab9:	cmp    WORD PTR [rcx+rbx*4],0xc
  408abe:	jb     408fbb <test_scan@@Base+0x1a9b>
  408ac4:	movzx  ecx,WORD PTR [rcx+rbx*4+0xa]
  408ac9:	test   rcx,rcx
  408acc:	je     408fbb <test_scan@@Base+0x1a9b>
  408ad2:	add    rax,rcx
  408ad5:	mov    rdx,QWORD PTR [rsp+0x20]
  408ada:	lea    rcx,[rdx+rax*1]
  408ade:	mov    ecx,DWORD PTR [rcx+rbx*4]
  408ae1:	add    rcx,rax
  408ae4:	add    rcx,rbp
  408ae7:	lea    rdi,[rdx+rcx*1]
  408aeb:	add    rdi,0x4
  408aef:	mov    rsi,r14
  408af2:	call   4040e0 <strcmp@plt>
  408af7:	dec    rbx
  408afa:	add    rbp,0xfffffffffffffffc
  408afe:	test   eax,eax
  408b00:	jne    408a76 <test_scan@@Base+0x1556>
  408b06:	lea    rdi,[rip+0xeded]        # 4178fa <_IO_stdin_used@@Base+0x28fa>
  408b0d:	jmp    407e14 <test_scan@@Base+0x8f4>
  408b12:	xor    ebp,ebp
  408b14:	lea    r15,[rip+0xee7d]        # 417998 <_IO_stdin_used@@Base+0x2998>
  408b1b:	xor    ebx,ebx
  408b1d:	cmp    QWORD PTR [rsp],rbx
  408b21:	je     409753 <test_scan@@Base+0x2233>
  408b27:	mov    eax,DWORD PTR [r13+rbx*4+0x4]
  408b2c:	lea    rcx,[rax+r13*1]
  408b30:	movsxd rdx,DWORD PTR [rcx+rbx*4+0x4]
  408b35:	mov    rcx,rax
  408b38:	sub    rcx,rdx
  408b3b:	add    rcx,r13
  408b3e:	cmp    WORD PTR [rcx+rbx*4+0x4],0xc
  408b44:	jb     408fbb <test_scan@@Base+0x1a9b>
  408b4a:	movzx  ecx,WORD PTR [rcx+rbx*4+0xe]
  408b4f:	test   rcx,rcx
  408b52:	je     408fbb <test_scan@@Base+0x1a9b>
  408b58:	add    rax,rcx
  408b5b:	lea    rcx,[rax+r13*1]
  408b5f:	mov    ecx,DWORD PTR [rcx+rbx*4+0x4]
  408b63:	add    rcx,rax
  408b66:	add    rcx,rbp
  408b69:	lea    rdi,[rcx+r13*1]
  408b6d:	add    rdi,0x8
  408b71:	mov    rsi,r15
  408b74:	call   4040e0 <strcmp@plt>
  408b79:	test   eax,eax
  408b7b:	je     408b8f <test_scan@@Base+0x166f>
  408b7d:	inc    rbx
  408b80:	add    rbp,0x4
  408b84:	cmp    rbx,QWORD PTR [rsp]
  408b88:	jb     408b1d <test_scan@@Base+0x15fd>
  408b8a:	jmp    408c43 <test_scan@@Base+0x1723>
  408b8f:	xor    eax,eax
  408b91:	mov    QWORD PTR [rsp+0x18],rax
  408b96:	lea    r15,[rip+0xedfb]        # 417998 <_IO_stdin_used@@Base+0x2998>
  408b9d:	mov    rax,QWORD PTR [rsp+0x18]
  408ba2:	inc    rax
  408ba5:	mov    QWORD PTR [rsp+0x30],rax
  408baa:	lea    rbp,[rbx*4+0x0]
  408bb2:	add    rbp,r13
  408bb5:	xor    r12d,r12d
  408bb8:	xor    r14d,r14d
  408bbb:	lea    rax,[rbx+r14*1]
  408bbf:	add    rax,0x1
  408bc3:	cmp    rax,QWORD PTR [rsp]
  408bc7:	jae    408c3b <test_scan@@Base+0x171b>
  408bc9:	mov    eax,DWORD PTR [rbp+r14*4+0x8]
  408bce:	lea    rcx,[rax+rbp*1]
  408bd2:	movsxd rdx,DWORD PTR [rcx+r14*4+0x8]
  408bd7:	mov    rcx,rax
  408bda:	sub    rcx,rdx
  408bdd:	add    rcx,rbp
  408be0:	cmp    WORD PTR [rcx+r14*4+0x8],0xc
  408be7:	jb     408fbb <test_scan@@Base+0x1a9b>
  408bed:	movzx  ecx,WORD PTR [rcx+r14*4+0x12]
  408bf3:	test   rcx,rcx
  408bf6:	je     408fbb <test_scan@@Base+0x1a9b>
  408bfc:	add    rax,rcx
  408bff:	lea    rcx,[rax+rbp*1]
  408c03:	mov    ecx,DWORD PTR [rcx+r14*4+0x8]
  408c08:	add    rcx,rax
  408c0b:	add    rcx,r12
  408c0e:	lea    rdi,[rcx+rbp*1]
  408c12:	add    rdi,0xc
  408c16:	mov    rsi,r15
  408c19:	call   4040e0 <strcmp@plt>
  408c1e:	inc    r14
  408c21:	add    r12,0x4
  408c25:	test   eax,eax
  408c27:	jne    408bbb <test_scan@@Base+0x169b>
  408c29:	add    rbx,r14
  408c2c:	mov    rax,QWORD PTR [rsp+0x30]
  408c31:	mov    QWORD PTR [rsp+0x18],rax
  408c36:	jmp    408b9d <test_scan@@Base+0x167d>
  408c3b:	cmp    QWORD PTR [rsp+0x18],0x0
  408c41:	je     408c4f <test_scan@@Base+0x172f>
  408c43:	lea    rdi,[rip+0xec96]        # 4178e0 <_IO_stdin_used@@Base+0x28e0>
  408c4a:	jmp    407e14 <test_scan@@Base+0x8f4>
  408c4f:	xor    ebp,ebp
  408c51:	lea    r15,[rip+0xcbe1]        # 415839 <_IO_stdin_used@@Base+0x839>
  408c58:	xor    ebx,ebx
  408c5a:	cmp    QWORD PTR [rsp],rbx
  408c5e:	je     409753 <test_scan@@Base+0x2233>
  408c64:	mov    eax,DWORD PTR [r13+rbx*4+0x4]
  408c69:	lea    rcx,[rax+r13*1]
  408c6d:	movsxd rdx,DWORD PTR [rcx+rbx*4+0x4]
  408c72:	mov    rcx,rax
  408c75:	sub    rcx,rdx
  408c78:	add    rcx,r13
  408c7b:	cmp    WORD PTR [rcx+rbx*4+0x4],0xc
  408c81:	jb     408fbb <test_scan@@Base+0x1a9b>
  408c87:	movzx  ecx,WORD PTR [rcx+rbx*4+0xe]
  408c8c:	test   rcx,rcx
  408c8f:	je     408fbb <test_scan@@Base+0x1a9b>
  408c95:	add    rax,rcx
  408c98:	lea    rcx,[rax+r13*1]
  408c9c:	mov    ecx,DWORD PTR [rcx+rbx*4+0x4]
  408ca0:	add    rcx,rax
  408ca3:	add    rcx,rbp
  408ca6:	lea    rdi,[rcx+r13*1]
  408caa:	add    rdi,0x8
  408cae:	mov    rsi,r15
  408cb1:	call   4040e0 <strcmp@plt>
  408cb6:	test   eax,eax
  408cb8:	je     408ccc <test_scan@@Base+0x17ac>
  408cba:	inc    rbx
  408cbd:	add    rbp,0x4
  408cc1:	cmp    rbx,QWORD PTR [rsp]
  408cc5:	jb     408c5a <test_scan@@Base+0x173a>
  408cc7:	jmp    408d76 <test_scan@@Base+0x1856>
  408ccc:	xor    eax,eax
  408cce:	mov    QWORD PTR [rsp+0x18],rax
  408cd3:	lea    r15,[rip+0xcb5f]        # 415839 <_IO_stdin_used@@Base+0x839>
  408cda:	inc    QWORD PTR [rsp+0x18]
  408cdf:	lea    r12,[rbx*4+0x0]
  408ce7:	add    r12,r13
  408cea:	xor    r14d,r14d
  408ced:	xor    ebp,ebp
  408cef:	lea    rax,[rbx+rbp*1]
  408cf3:	add    rax,0x1
  408cf7:	cmp    rax,QWORD PTR [rsp]
  408cfb:	jae    408d62 <test_scan@@Base+0x1842>
  408cfd:	mov    eax,DWORD PTR [r12+rbp*4+0x8]
  408d02:	lea    rcx,[r12+rax*1]
  408d06:	movsxd rdx,DWORD PTR [rcx+rbp*4+0x8]
  408d0b:	mov    rcx,rax
  408d0e:	sub    rcx,rdx
  408d11:	add    rcx,r12
  408d14:	cmp    WORD PTR [rcx+rbp*4+0x8],0xc
  408d1a:	jb     408fbb <test_scan@@Base+0x1a9b>
  408d20:	movzx  ecx,WORD PTR [rcx+rbp*4+0x12]
  408d25:	test   rcx,rcx
  408d28:	je     408fbb <test_scan@@Base+0x1a9b>
  408d2e:	add    rax,rcx
  408d31:	lea    rcx,[r12+rax*1]
  408d35:	mov    ecx,DWORD PTR [rcx+rbp*4+0x8]
  408d39:	add    rcx,rax
  408d3c:	add    rcx,r14
  408d3f:	lea    rdi,[r12+rcx*1]
  408d43:	add    rdi,0xc
  408d47:	mov    rsi,r15
  408d4a:	call   4040e0 <strcmp@plt>
  408d4f:	inc    rbp
  408d52:	add    r14,0x4
  408d56:	test   eax,eax
  408d58:	jne    408cef <test_scan@@Base+0x17cf>
  408d5a:	add    rbx,rbp
  408d5d:	jmp    408cda <test_scan@@Base+0x17ba>
  408d62:	cmp    QWORD PTR [rsp+0x18],0x0
  408d68:	je     408d76 <test_scan@@Base+0x1856>
  408d6a:	lea    rdi,[rip+0xeb54]        # 4178c5 <_IO_stdin_used@@Base+0x28c5>
  408d71:	jmp    407e14 <test_scan@@Base+0x8f4>
  408d76:	xor    ebp,ebp
  408d78:	lea    r15,[rip+0xc630]        # 4153af <_IO_stdin_used@@Base+0x3af>
  408d7f:	xor    ebx,ebx
  408d81:	cmp    QWORD PTR [rsp],rbx
  408d85:	je     409753 <test_scan@@Base+0x2233>
  408d8b:	mov    eax,DWORD PTR [r13+rbx*4+0x4]
  408d90:	lea    rcx,[rax+r13*1]
  408d94:	movsxd rdx,DWORD PTR [rcx+rbx*4+0x4]
  408d99:	mov    rcx,rax
  408d9c:	sub    rcx,rdx
  408d9f:	add    rcx,r13
  408da2:	cmp    WORD PTR [rcx+rbx*4+0x4],0xc
  408da8:	jb     408fbb <test_scan@@Base+0x1a9b>
  408dae:	movzx  ecx,WORD PTR [rcx+rbx*4+0xe]
  408db3:	test   rcx,rcx
  408db6:	je     408fbb <test_scan@@Base+0x1a9b>
  408dbc:	add    rax,rcx
  408dbf:	lea    rcx,[rax+r13*1]
  408dc3:	mov    ecx,DWORD PTR [rcx+rbx*4+0x4]
  408dc7:	add    rcx,rax
  408dca:	add    rcx,rbp
  408dcd:	lea    rdi,[rcx+r13*1]
  408dd1:	add    rdi,0x8
  408dd5:	mov    rsi,r15
  408dd8:	call   4040e0 <strcmp@plt>
  408ddd:	test   eax,eax
  408ddf:	je     408df3 <test_scan@@Base+0x18d3>
  408de1:	inc    rbx
  408de4:	add    rbp,0x4
  408de8:	cmp    rbx,QWORD PTR [rsp]
  408dec:	jb     408d81 <test_scan@@Base+0x1861>
  408dee:	jmp    408ea7 <test_scan@@Base+0x1987>
  408df3:	xor    eax,eax
  408df5:	mov    QWORD PTR [rsp+0x18],rax
  408dfa:	lea    r15,[rip+0xc5ae]        # 4153af <_IO_stdin_used@@Base+0x3af>
  408e01:	mov    rax,QWORD PTR [rsp+0x18]
  408e06:	inc    rax
  408e09:	mov    QWORD PTR [rsp+0x30],rax
  408e0e:	lea    rbp,[rbx*4+0x0]
  408e16:	add    rbp,r13
  408e19:	xor    r12d,r12d
  408e1c:	xor    r14d,r14d
  408e1f:	lea    rax,[rbx+r14*1]
  408e23:	add    rax,0x1
  408e27:	cmp    rax,QWORD PTR [rsp]
  408e2b:	jae    408e9f <test_scan@@Base+0x197f>
  408e2d:	mov    eax,DWORD PTR [rbp+r14*4+0x8]
  408e32:	lea    rcx,[rax+rbp*1]
  408e36:	movsxd rdx,DWORD PTR [rcx+r14*4+0x8]
  408e3b:	mov    rcx,rax
  408e3e:	sub    rcx,rdx
  408e41:	add    rcx,rbp
  408e44:	cmp    WORD PTR [rcx+r14*4+0x8],0xc
  408e4b:	jb     408fbb <test_scan@@Base+0x1a9b>
  408e51:	movzx  ecx,WORD PTR [rcx+r14*4+0x12]
  408e57:	test   rcx,rcx
  408e5a:	je     408fbb <test_scan@@Base+0x1a9b>
  408e60:	add    rax,rcx
  408e63:	lea    rcx,[rax+rbp*1]
  408e67:	mov    ecx,DWORD PTR [rcx+r14*4+0x8]
  408e6c:	add    rcx,rax
  408e6f:	add    rcx,r12
  408e72:	lea    rdi,[rcx+rbp*1]
  408e76:	add    rdi,0xc
  408e7a:	mov    rsi,r15
  408e7d:	call   4040e0 <strcmp@plt>
  408e82:	inc    r14
  408e85:	add    r12,0x4
  408e89:	test   eax,eax
  408e8b:	jne    408e1f <test_scan@@Base+0x18ff>
  408e8d:	add    rbx,r14
  408e90:	mov    rax,QWORD PTR [rsp+0x30]
  408e95:	mov    QWORD PTR [rsp+0x18],rax
  408e9a:	jmp    408e01 <test_scan@@Base+0x18e1>
  408e9f:	cmp    QWORD PTR [rsp+0x18],0x0
  408ea5:	je     408eb3 <test_scan@@Base+0x1993>
  408ea7:	lea    rdi,[rip+0xe9fc]        # 4178aa <_IO_stdin_used@@Base+0x28aa>
  408eae:	jmp    407e14 <test_scan@@Base+0x8f4>
  408eb3:	xor    ebp,ebp
  408eb5:	lea    r15,[rip+0xeab4]        # 417970 <_IO_stdin_used@@Base+0x2970>
  408ebc:	xor    ebx,ebx
  408ebe:	cmp    QWORD PTR [rsp],rbx
  408ec2:	je     409753 <test_scan@@Base+0x2233>
  408ec8:	mov    eax,DWORD PTR [r13+rbx*4+0x4]
  408ecd:	lea    rcx,[rax+r13*1]
  408ed1:	movsxd rdx,DWORD PTR [rcx+rbx*4+0x4]
  408ed6:	mov    rcx,rax
  408ed9:	sub    rcx,rdx
  408edc:	add    rcx,r13
  408edf:	cmp    WORD PTR [rcx+rbx*4+0x4],0xc
  408ee5:	jb     408fbb <test_scan@@Base+0x1a9b>
  408eeb:	movzx  ecx,WORD PTR [rcx+rbx*4+0xe]
  408ef0:	test   rcx,rcx
  408ef3:	je     408fbb <test_scan@@Base+0x1a9b>
  408ef9:	add    rax,rcx
  408efc:	lea    rcx,[rax+r13*1]
  408f00:	mov    ecx,DWORD PTR [rcx+rbx*4+0x4]
  408f04:	add    rcx,rax
  408f07:	add    rcx,rbp
  408f0a:	lea    rdi,[rcx+r13*1]
  408f0e:	add    rdi,0x8
  408f12:	mov    rsi,r15
  408f15:	call   4040e0 <strcmp@plt>
  408f1a:	test   eax,eax
  408f1c:	je     408f30 <test_scan@@Base+0x1a10>
  408f1e:	inc    rbx
  408f21:	add    rbp,0x4
  408f25:	cmp    rbx,QWORD PTR [rsp]
  408f29:	jb     408ebe <test_scan@@Base+0x199e>
  408f2b:	jmp    40902d <test_scan@@Base+0x1b0d>
  408f30:	xor    eax,eax
  408f32:	mov    QWORD PTR [rsp+0x18],rax
  408f37:	lea    r15,[rip+0xea32]        # 417970 <_IO_stdin_used@@Base+0x2970>
  408f3e:	inc    QWORD PTR [rsp+0x18]
  408f43:	lea    r12,[rbx*4+0x0]
  408f4b:	add    r12,r13
  408f4e:	xor    r14d,r14d
  408f51:	xor    ebp,ebp
  408f53:	lea    rax,[rbx+rbp*1]
  408f57:	add    rax,0x1
  408f5b:	cmp    rax,QWORD PTR [rsp]
  408f5f:	jae    408fda <test_scan@@Base+0x1aba>
  408f61:	mov    eax,DWORD PTR [r12+rbp*4+0x8]
  408f66:	lea    rcx,[r12+rax*1]
  408f6a:	movsxd rdx,DWORD PTR [rcx+rbp*4+0x8]
  408f6f:	mov    rcx,rax
  408f72:	sub    rcx,rdx
  408f75:	add    rcx,r12
  408f78:	cmp    WORD PTR [rcx+rbp*4+0x8],0xc
  408f7e:	jb     408fbb <test_scan@@Base+0x1a9b>
  408f80:	movzx  ecx,WORD PTR [rcx+rbp*4+0x12]
  408f85:	test   rcx,rcx
  408f88:	je     408fbb <test_scan@@Base+0x1a9b>
  408f8a:	add    rax,rcx
  408f8d:	lea    rcx,[r12+rax*1]
  408f91:	mov    ecx,DWORD PTR [rcx+rbp*4+0x8]
  408f95:	add    rcx,rax
  408f98:	add    rcx,r14
  408f9b:	lea    rdi,[r12+rcx*1]
  408f9f:	add    rdi,0xc
  408fa3:	mov    rsi,r15
  408fa6:	call   4040e0 <strcmp@plt>
  408fab:	inc    rbp
  408fae:	add    r14,0x4
  408fb2:	test   eax,eax
  408fb4:	jne    408f53 <test_scan@@Base+0x1a33>
  408fb6:	add    rbx,rbp
  408fb9:	jmp    408f3e <test_scan@@Base+0x1a1e>
  408fbb:	lea    rdi,[rip+0xd388]        # 41634a <_IO_stdin_used@@Base+0x134a>
  408fc2:	lea    rsi,[rip+0xce6e]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  408fc9:	lea    rcx,[rip+0xd329]        # 4162f9 <_IO_stdin_used@@Base+0x12f9>
  408fd0:	mov    edx,0x2bb
  408fd5:	call   4040a0 <__assert_fail@plt>
  408fda:	cmp    QWORD PTR [rsp+0x18],0x2
  408fe0:	jne    40902d <test_scan@@Base+0x1b0d>
  408fe2:	mov    rax,QWORD PTR [rsp+0x50]
  408fe7:	mov    rcx,QWORD PTR [rsp+0x78]
  408fec:	mov    eax,DWORD PTR [rcx+rax*1]
  408fef:	test   rax,rax
  408ff2:	je     40903e <test_scan@@Base+0x1b1e>
  408ff4:	mov    rcx,QWORD PTR [rsp+0x28]
  408ff9:	mov    rdx,QWORD PTR [rsp+0x50]
  408ffe:	add    rcx,rdx
  409001:	add    rcx,QWORD PTR [rsp+0x10]
  409006:	mov    rdx,QWORD PTR [rsp+0x8]
  40900b:	add    rdx,rcx
  40900e:	add    rdx,0x4
  409012:	xor    esi,esi
  409014:	cmp    rax,rsi
  409017:	je     40978a <test_scan@@Base+0x226a>
  40901d:	cmp    BYTE PTR [rdx+rsi*1],0x6
  409021:	je     409039 <test_scan@@Base+0x1b19>
  409023:	inc    rsi
  409026:	cmp    rsi,rax
  409029:	jb     409014 <test_scan@@Base+0x1af4>
  40902b:	jmp    40903e <test_scan@@Base+0x1b1e>
  40902d:	lea    rdi,[rip+0xe859]        # 41788d <_IO_stdin_used@@Base+0x288d>
  409034:	jmp    407e14 <test_scan@@Base+0x8f4>
  409039:	test   rsi,rsi
  40903c:	je     40904a <test_scan@@Base+0x1b2a>
  40903e:	lea    rdi,[rip+0xe81c]        # 417861 <_IO_stdin_used@@Base+0x2861>
  409045:	jmp    407e14 <test_scan@@Base+0x8f4>
  40904a:	xor    esi,esi
  40904c:	cmp    rax,rsi
  40904f:	je     40978a <test_scan@@Base+0x226a>
  409055:	cmp    BYTE PTR [rdx+rsi*1],0x1
  409059:	je     409065 <test_scan@@Base+0x1b45>
  40905b:	inc    rsi
  40905e:	cmp    rsi,rax
  409061:	jb     40904c <test_scan@@Base+0x1b2c>
  409063:	jmp    4090d1 <test_scan@@Base+0x1bb1>
  409065:	cmp    rsi,0x2
  409069:	jne    4090d1 <test_scan@@Base+0x1bb1>
  40906b:	cmp    eax,0x4
  40906e:	jb     409099 <test_scan@@Base+0x1b79>
  409070:	mov    rsi,QWORD PTR [rsp+0x8]
  409075:	add    rsi,rcx
  409078:	add    rsi,0x7
  40907c:	mov    edi,0x3
  409081:	cmp    rdi,rax
  409084:	jae    40978a <test_scan@@Base+0x226a>
  40908a:	cmp    BYTE PTR [rsi+rdi*1-0x3],0x1
  40908f:	je     4090dd <test_scan@@Base+0x1bbd>
  409091:	inc    rdi
  409094:	cmp    rdi,rax
  409097:	jb     409081 <test_scan@@Base+0x1b61>
  409099:	xor    esi,esi
  40909b:	cmp    rax,rsi
  40909e:	je     40978a <test_scan@@Base+0x226a>
  4090a4:	cmp    BYTE PTR [rdx+rsi*1],0x5
  4090a8:	je     40914d <test_scan@@Base+0x1c2d>
  4090ae:	inc    rsi
  4090b1:	cmp    rsi,rax
  4090b4:	jb     40909b <test_scan@@Base+0x1b7b>
  4090b6:	xor    esi,esi
  4090b8:	cmp    rax,rsi
  4090bb:	je     40978a <test_scan@@Base+0x226a>
  4090c1:	cmp    BYTE PTR [rdx+rsi*1],0x2
  4090c5:	je     4090e9 <test_scan@@Base+0x1bc9>
  4090c7:	inc    rsi
  4090ca:	cmp    rsi,rax
  4090cd:	jb     4090b8 <test_scan@@Base+0x1b98>
  4090cf:	jmp    40910a <test_scan@@Base+0x1bea>
  4090d1:	lea    rdi,[rip+0xe75c]        # 417834 <_IO_stdin_used@@Base+0x2834>
  4090d8:	jmp    407e14 <test_scan@@Base+0x8f4>
  4090dd:	lea    rdi,[rip+0xe718]        # 4177fc <_IO_stdin_used@@Base+0x27fc>
  4090e4:	jmp    407e14 <test_scan@@Base+0x8f4>
  4090e9:	cmp    rsi,0x6
  4090ed:	jne    40910a <test_scan@@Base+0x1bea>
  4090ef:	xor    esi,esi
  4090f1:	cmp    rax,rsi
  4090f4:	je     40978a <test_scan@@Base+0x226a>
  4090fa:	cmp    BYTE PTR [rdx+rsi*1],0x3
  4090fe:	je     409116 <test_scan@@Base+0x1bf6>
  409100:	inc    rsi
  409103:	cmp    rsi,rax
  409106:	jb     4090f1 <test_scan@@Base+0x1bd1>
  409108:	jmp    40914d <test_scan@@Base+0x1c2d>
  40910a:	lea    rdi,[rip+0xe6c0]        # 4177d1 <_IO_stdin_used@@Base+0x27d1>
  409111:	jmp    407e14 <test_scan@@Base+0x8f4>
  409116:	cmp    rsi,0x3
  40911a:	jne    40914d <test_scan@@Base+0x1c2d>
  40911c:	cmp    eax,0x4
  40911f:	jb     409196 <test_scan@@Base+0x1c76>
  409121:	mov    rdx,QWORD PTR [rsp+0x8]
  409126:	lea    rsi,[rdx+rcx*1]
  40912a:	add    rsi,0x7
  40912e:	mov    edx,0x3
  409133:	cmp    rdx,rax
  409136:	jae    40978a <test_scan@@Base+0x226a>
  40913c:	cmp    BYTE PTR [rsi+rdx*1-0x3],0x3
  409141:	je     409159 <test_scan@@Base+0x1c39>
  409143:	inc    rdx
  409146:	cmp    rdx,rax
  409149:	jb     409133 <test_scan@@Base+0x1c13>
  40914b:	jmp    409196 <test_scan@@Base+0x1c76>
  40914d:	lea    rdi,[rip+0xe5d6]        # 41772a <_IO_stdin_used@@Base+0x272a>
  409154:	jmp    407e14 <test_scan@@Base+0x8f4>
  409159:	cmp    rdx,0x3
  40915d:	jne    409196 <test_scan@@Base+0x1c76>
  40915f:	cmp    eax,0x5
  409162:	jb     409772 <test_scan@@Base+0x2252>
  409168:	mov    rdx,QWORD PTR [rsp+0x8]
  40916d:	add    rdx,rcx
  409170:	add    rdx,0x8
  409174:	mov    ecx,0x4
  409179:	cmp    rcx,rax
  40917c:	jae    40978a <test_scan@@Base+0x226a>
  409182:	cmp    BYTE PTR [rdx+rcx*1-0x4],0x3
  409187:	je     4091a2 <test_scan@@Base+0x1c82>
  409189:	inc    rcx
  40918c:	cmp    rcx,rax
  40918f:	jb     409179 <test_scan@@Base+0x1c59>
  409191:	jmp    409772 <test_scan@@Base+0x2252>
  409196:	lea    rdi,[rip+0xe5fa]        # 417797 <_IO_stdin_used@@Base+0x2797>
  40919d:	jmp    407e14 <test_scan@@Base+0x8f4>
  4091a2:	cmp    rcx,0x5
  4091a6:	jne    409772 <test_scan@@Base+0x2252>
  4091ac:	lea    rcx,[rax-0x1]
  4091b0:	mov    rdx,QWORD PTR [rsp+0x50]
  4091b5:	add    rdx,QWORD PTR [rsp+0x10]
  4091ba:	add    rdx,QWORD PTR [rsp+0x28]
  4091bf:	mov    rdi,rdx
  4091c2:	add    rdx,rax
  4091c5:	mov    rsi,QWORD PTR [rsp+0x8]
  4091ca:	add    rdx,rsi
  4091cd:	add    rdx,0x3
  4091d1:	cmp    rcx,0xffffffffffffffff
  4091d5:	je     40977e <test_scan@@Base+0x225e>
  4091db:	cmp    rcx,rax
  4091de:	jae    40978a <test_scan@@Base+0x226a>
  4091e4:	dec    rcx
  4091e7:	cmp    BYTE PTR [rdx],0x3
  4091ea:	lea    rdx,[rdx-0x1]
  4091ee:	jne    4091d1 <test_scan@@Base+0x1cb1>
  4091f0:	cmp    rcx,0x4
  4091f4:	jne    40977e <test_scan@@Base+0x225e>
  4091fa:	cmp    eax,0x4
  4091fd:	mov    ecx,0x4
  409202:	cmovb  ecx,eax
  409205:	add    rdi,rcx
  409208:	dec    rcx
  40920b:	mov    rdx,QWORD PTR [rsp+0x8]
  409210:	add    rdx,rdi
  409213:	add    rdx,0x3
  409217:	lea    rsi,[rcx+0x1]
  40921b:	cmp    rsi,0x2
  40921f:	jb     4097a9 <test_scan@@Base+0x2289>
  409225:	cmp    rcx,rax
  409228:	jae    40978a <test_scan@@Base+0x226a>
  40922e:	dec    rcx
  409231:	cmp    BYTE PTR [rdx],0x3
  409234:	lea    rdx,[rdx-0x1]
  409238:	jne    409217 <test_scan@@Base+0x1cf7>
  40923a:	cmp    rcx,0x2
  40923e:	jne    4097a9 <test_scan@@Base+0x2289>
  409244:	mov    rax,QWORD PTR [rsp+0x38]
  409249:	mov    ecx,DWORD PTR [rax-0x4]
  40924c:	mov    QWORD PTR [rsp+0x10],rcx
  409251:	add    rax,0xfffffffffffffffc
  409255:	mov    QWORD PTR [rsp+0x38],rax
  40925a:	mov    rax,QWORD PTR [rsp+0x58]
  40925f:	mov    rcx,QWORD PTR [rsp+0x68]
  409264:	lea    r12,[rcx+rax*1]
  409268:	add    r12,QWORD PTR [rsp+0x28]
  40926d:	mov    rax,QWORD PTR [rsp+0x8]
  409272:	lea    rbx,[rax+r12*1]
  409276:	add    rbx,0x8
  40927a:	xor    ebp,ebp
  40927c:	lea    r15,[rip+0xc22d]        # 4154b0 <_IO_stdin_used@@Base+0x4b0>
  409283:	cmp    QWORD PTR [rsp+0x10],rbp
  409288:	je     4092ae <test_scan@@Base+0x1d8e>
  40928a:	cmp    rbp,QWORD PTR [rsp+0x10]
  40928f:	jae    4097b5 <test_scan@@Base+0x2295>
  409295:	mov    edi,DWORD PTR [rbx-0x4]
  409298:	add    rdi,rbx
  40929b:	mov    rsi,r15
  40929e:	call   4040e0 <strcmp@plt>
  4092a3:	inc    rbp
  4092a6:	add    rbx,0x4
  4092aa:	test   eax,eax
  4092ac:	jne    409283 <test_scan@@Base+0x1d63>
  4092ae:	mov    rax,QWORD PTR [rsp+0x8]
  4092b3:	lea    rbx,[rax+r12*1]
  4092b7:	add    rbx,0x8
  4092bb:	xor    ebp,ebp
  4092bd:	lea    r15,[rip+0xc1ec]        # 4154b0 <_IO_stdin_used@@Base+0x4b0>
  4092c4:	cmp    QWORD PTR [rsp+0x10],rbp
  4092c9:	je     4092ef <test_scan@@Base+0x1dcf>
  4092cb:	cmp    rbp,QWORD PTR [rsp+0x10]
  4092d0:	jae    4097b5 <test_scan@@Base+0x2295>
  4092d6:	mov    edi,DWORD PTR [rbx-0x4]
  4092d9:	add    rdi,rbx
  4092dc:	mov    rsi,r15
  4092df:	call   4040e0 <strcmp@plt>
  4092e4:	inc    rbp
  4092e7:	add    rbx,0x4
  4092eb:	test   eax,eax
  4092ed:	jne    4092c4 <test_scan@@Base+0x1da4>
  4092ef:	mov    rax,QWORD PTR [rsp+0x8]
  4092f4:	lea    rbx,[rax+r12*1]
  4092f8:	add    rbx,0x8
  4092fc:	xor    ebp,ebp
  4092fe:	lea    r13,[rip+0xc1ab]        # 4154b0 <_IO_stdin_used@@Base+0x4b0>
  409305:	cmp    QWORD PTR [rsp+0x10],rbp
  40930a:	je     40936e <test_scan@@Base+0x1e4e>
  40930c:	cmp    rbp,QWORD PTR [rsp+0x10]
  409311:	jae    4097b5 <test_scan@@Base+0x2295>
  409317:	mov    rcx,QWORD PTR [rsp+0x38]
  40931c:	mov    eax,DWORD PTR [rcx+rbp*4+0x4]
  409320:	lea    rdi,[rbx+rax*1]
  409324:	add    rax,rcx
  409327:	mov    r14d,DWORD PTR [rax+rbp*4+0x4]
  40932c:	xor    r15d,r15d
  40932f:	cmp    r14d,0x4
  409333:	mov    edx,0x4
  409338:	cmovb  edx,r14d
  40933c:	seta   r15b
  409340:	mov    rsi,r13
  409343:	call   404050 <strncmp@plt>
  409348:	cmp    eax,0x1
  40934b:	mov    ecx,0x0
  409350:	sbb    ecx,ecx
  409352:	or     ecx,eax
  409354:	test   eax,eax
  409356:	cmovne r15d,ecx
  40935a:	cmp    r14d,0x4
  40935e:	cmovb  r15d,ecx
  409362:	inc    rbp
  409365:	add    rbx,0x4
  409369:	test   r15d,r15d
  40936c:	jne    409305 <test_scan@@Base+0x1de5>
  40936e:	mov    rax,QWORD PTR [rsp+0x8]
  409373:	add    r12,rax
  409376:	add    r12,0x8
  40937a:	xor    ebp,ebp
  40937c:	lea    r15,[rip+0xc12d]        # 4154b0 <_IO_stdin_used@@Base+0x4b0>
  409383:	cmp    QWORD PTR [rsp+0x10],rbp
  409388:	je     4093e7 <test_scan@@Base+0x1ec7>
  40938a:	cmp    rbp,QWORD PTR [rsp+0x10]
  40938f:	jae    4097b5 <test_scan@@Base+0x2295>
  409395:	mov    rcx,QWORD PTR [rsp+0x38]
  40939a:	mov    eax,DWORD PTR [rcx+rbp*4+0x4]
  40939e:	lea    rdi,[r12+rax*1]
  4093a2:	add    rax,rcx
  4093a5:	mov    r14d,DWORD PTR [rax+rbp*4+0x4]
  4093aa:	xor    ebx,ebx
  4093ac:	cmp    r14d,0x4
  4093b0:	mov    edx,0x4
  4093b5:	cmovb  edx,r14d
  4093b9:	seta   bl
  4093bc:	mov    rsi,r15
  4093bf:	call   404050 <strncmp@plt>
  4093c4:	cmp    eax,0x1
  4093c7:	mov    ecx,0x0
  4093cc:	sbb    ecx,ecx
  4093ce:	or     ecx,eax
  4093d0:	test   eax,eax
  4093d2:	cmovne ebx,ecx
  4093d5:	cmp    r14d,0x4
  4093d9:	cmovb  ebx,ecx
  4093dc:	inc    rbp
  4093df:	add    r12,0x4
  4093e3:	test   ebx,ebx
  4093e5:	jne    409383 <test_scan@@Base+0x1e63>
  4093e7:	mov    rax,QWORD PTR [rsp+0x68]
  4093ec:	mov    rcx,QWORD PTR [rsp+0x10]
  4093f1:	lea    r14,[rax+rcx*4]
  4093f5:	add    r14,QWORD PTR [rsp+0x58]
  4093fa:	add    r14,QWORD PTR [rsp+0x28]
  4093ff:	mov    rax,QWORD PTR [rsp+0x8]
  409404:	lea    rbp,[rax+r14*1]
  409408:	add    rbp,0x4
  40940c:	lea    rbx,[rcx-0x1]
  409410:	lea    r15,[rip+0xc099]        # 4154b0 <_IO_stdin_used@@Base+0x4b0>
  409417:	cmp    rbx,0xffffffffffffffff
  40941b:	je     409441 <test_scan@@Base+0x1f21>
  40941d:	cmp    rbx,QWORD PTR [rsp+0x10]
  409422:	jae    4097b5 <test_scan@@Base+0x2295>
  409428:	mov    edi,DWORD PTR [rbp-0x4]
  40942b:	add    rdi,rbp
  40942e:	add    rbp,0xfffffffffffffffc
  409432:	mov    rsi,r15
  409435:	call   4040e0 <strcmp@plt>
  40943a:	dec    rbx
  40943d:	test   eax,eax
  40943f:	jne    409417 <test_scan@@Base+0x1ef7>
  409441:	mov    rax,QWORD PTR [rsp+0x8]
  409446:	lea    rbx,[rax+r14*1]
  40944a:	add    rbx,0x4
  40944e:	mov    rax,QWORD PTR [rsp+0x10]
  409453:	lea    rbp,[rax-0x1]
  409457:	lea    r15,[rip+0xc052]        # 4154b0 <_IO_stdin_used@@Base+0x4b0>
  40945e:	cmp    rbp,0xffffffffffffffff
  409462:	je     409488 <test_scan@@Base+0x1f68>
  409464:	cmp    rbp,QWORD PTR [rsp+0x10]
  409469:	jae    4097b5 <test_scan@@Base+0x2295>
  40946f:	mov    edi,DWORD PTR [rbx-0x4]
  409472:	add    rdi,rbx
  409475:	add    rbx,0xfffffffffffffffc
  409479:	mov    rsi,r15
  40947c:	call   4040e0 <strcmp@plt>
  409481:	dec    rbp
  409484:	test   eax,eax
  409486:	jne    40945e <test_scan@@Base+0x1f3e>
  409488:	mov    rax,QWORD PTR [rsp+0x10]
  40948d:	lea    r14,[rax*4+0x0]
  409495:	lea    r12,[rax-0x1]
  409499:	xor    ebx,ebx
  40949b:	mov    rbp,QWORD PTR [rsp+0x38]
  4094a0:	cmp    r14,rbx
  4094a3:	je     409513 <test_scan@@Base+0x1ff3>
  4094a5:	cmp    r12,QWORD PTR [rsp+0x10]
  4094aa:	jae    4097b5 <test_scan@@Base+0x2295>
  4094b0:	lea    rax,[r14+rbp*1]
  4094b4:	mov    ecx,DWORD PTR [rbp+r14*1+0x0]
  4094b9:	lea    rdi,[rcx+rax*1]
  4094bd:	add    rdi,0x4
  4094c1:	add    rcx,r14
  4094c4:	mov    r15d,DWORD PTR [rbp+rcx*1+0x0]
  4094c9:	xor    r13d,r13d
  4094cc:	cmp    r15d,0x4
  4094d0:	mov    edx,0x4
  4094d5:	cmovb  edx,r15d
  4094d9:	seta   r13b
  4094dd:	lea    rsi,[rip+0xbfcc]        # 4154b0 <_IO_stdin_used@@Base+0x4b0>
  4094e4:	call   404050 <strncmp@plt>
  4094e9:	cmp    eax,0x1
  4094ec:	mov    ecx,0x0
  4094f1:	sbb    ecx,ecx
  4094f3:	or     ecx,eax
  4094f5:	test   eax,eax
  4094f7:	cmovne r13d,ecx
  4094fb:	cmp    r15d,0x4
  4094ff:	cmovb  r13d,ecx
  409503:	add    rbp,0xfffffffffffffffc
  409507:	add    rbx,0x4
  40950b:	dec    r12
  40950e:	test   r13d,r13d
  409511:	jne    4094a0 <test_scan@@Base+0x1f80>
  409513:	mov    rax,QWORD PTR [rsp+0x10]
  409518:	lea    r13,[rax-0x1]
  40951c:	xor    ebx,ebx
  40951e:	cmp    r14,rbx
  409521:	je     409595 <test_scan@@Base+0x2075>
  409523:	cmp    r13,QWORD PTR [rsp+0x10]
  409528:	jae    4097b5 <test_scan@@Base+0x2295>
  40952e:	mov    r15,QWORD PTR [rsp+0x38]
  409533:	lea    rax,[r15+r14*1]
  409537:	mov    ecx,DWORD PTR [r15+r14*1]
  40953b:	lea    rdi,[rcx+rax*1]
  40953f:	add    rdi,0x4
  409543:	add    rcx,r14
  409546:	mov    r12d,DWORD PTR [r15+rcx*1]
  40954a:	xor    ebp,ebp
  40954c:	cmp    r12d,0x4
  409550:	mov    edx,0x4
  409555:	cmovb  edx,r12d
  409559:	seta   bpl
  40955d:	lea    rsi,[rip+0xbf4c]        # 4154b0 <_IO_stdin_used@@Base+0x4b0>
  409564:	call   404050 <strncmp@plt>
  409569:	cmp    eax,0x1
  40956c:	mov    ecx,0x0
  409571:	sbb    ecx,ecx
  409573:	or     ecx,eax
  409575:	test   eax,eax
  409577:	cmovne ebp,ecx
  40957a:	cmp    r12d,0x4
  40957e:	cmovb  ebp,ecx
  409581:	add    r15,0xfffffffffffffffc
  409585:	mov    QWORD PTR [rsp+0x38],r15
  40958a:	add    rbx,0x4
  40958e:	dec    r13
  409591:	test   ebp,ebp
  409593:	jne    40951e <test_scan@@Base+0x1ffe>
  409595:	mov    rax,QWORD PTR [rsp+0x8]
  40959a:	mov    rcx,QWORD PTR [rsp+0x70]
  40959f:	add    rax,rcx
  4095a2:	add    rax,0x4
  4095a6:	xor    ecx,ecx
  4095a8:	cmp    QWORD PTR [rsp],rcx
  4095ac:	je     409753 <test_scan@@Base+0x2233>
  4095b2:	mov    edx,DWORD PTR [rax+rcx*4]
  4095b5:	lea    rsi,[rax+rdx*1]
  4095b9:	movsxd rdi,DWORD PTR [rsi+rcx*4]
  4095bd:	mov    rsi,rdx
  4095c0:	sub    rsi,rdi
  4095c3:	add    rsi,rax
  4095c6:	cmp    WORD PTR [rsi+rcx*4],0xa
  4095cb:	jb     4095e4 <test_scan@@Base+0x20c4>
  4095cd:	movzx  esi,WORD PTR [rsi+rcx*4+0x8]
  4095d2:	test   rsi,rsi
  4095d5:	je     4095e4 <test_scan@@Base+0x20c4>
  4095d7:	add    rdx,rsi
  4095da:	add    rdx,rax
  4095dd:	cmp    WORD PTR [rdx+rcx*4],0xd
  4095e2:	je     4095ed <test_scan@@Base+0x20cd>
  4095e4:	inc    rcx
  4095e7:	cmp    rcx,QWORD PTR [rsp]
  4095eb:	jb     4095a8 <test_scan@@Base+0x2088>
  4095ed:	mov    rax,QWORD PTR [rsp+0x8]
  4095f2:	mov    rcx,QWORD PTR [rsp+0x70]
  4095f7:	add    rax,rcx
  4095fa:	add    rax,0x8
  4095fe:	mov    ecx,0x1
  409603:	cmp    rcx,QWORD PTR [rsp]
  409607:	jae    409753 <test_scan@@Base+0x2233>
  40960d:	mov    edx,DWORD PTR [rax+rcx*4-0x4]
  409611:	lea    rsi,[rax+rdx*1]
  409615:	movsxd rdi,DWORD PTR [rsi+rcx*4-0x4]
  40961a:	mov    rsi,rdx
  40961d:	sub    rsi,rdi
  409620:	add    rsi,rax
  409623:	cmp    WORD PTR [rsi+rcx*4-0x4],0xa
  409629:	jb     409643 <test_scan@@Base+0x2123>
  40962b:	movzx  esi,WORD PTR [rsi+rcx*4+0x4]
  409630:	test   rsi,rsi
  409633:	je     409643 <test_scan@@Base+0x2123>
  409635:	add    rdx,rsi
  409638:	add    rdx,rax
  40963b:	cmp    WORD PTR [rdx+rcx*4-0x4],0x2a
  409641:	je     40964c <test_scan@@Base+0x212c>
  409643:	inc    rcx
  409646:	cmp    rcx,QWORD PTR [rsp]
  40964a:	jb     409603 <test_scan@@Base+0x20e3>
  40964c:	xor    eax,eax
  40964e:	mov    ecx,0xffffffff
  409653:	mov    rbp,QWORD PTR [rsp+0x20]
  409658:	mov    rdx,QWORD PTR [rsp]
  40965c:	add    rdx,rax
  40965f:	sub    rdx,0x1
  409663:	jb     4096bc <test_scan@@Base+0x219c>
  409665:	cmp    rdx,QWORD PTR [rsp]
  409669:	jae    409753 <test_scan@@Base+0x2233>
  40966f:	mov    esi,DWORD PTR [rbp+rax*4+0x0]
  409673:	lea    rdx,[rsi+rbp*1]
  409677:	movsxd rdx,DWORD PTR [rdx+rax*4]
  40967b:	mov    rdi,rsi
  40967e:	sub    rdi,rdx
  409681:	add    rdi,rbp
  409684:	mov    edx,0x1
  409689:	cmp    WORD PTR [rdi+rax*4],0xa
  40968e:	jb     4096b5 <test_scan@@Base+0x2195>
  409690:	movzx  edi,WORD PTR [rdi+rax*4+0x8]
  409695:	test   rdi,rdi
  409698:	je     4096b5 <test_scan@@Base+0x2195>
  40969a:	add    rsi,rdi
  40969d:	add    rsi,QWORD PTR [rsp+0x20]
  4096a2:	movzx  esi,WORD PTR [rsi+rax*4]
  4096a6:	xor    edx,edx
  4096a8:	cmp    si,0x1
  4096ac:	setne  dl
  4096af:	test   si,si
  4096b2:	cmovle edx,ecx
  4096b5:	dec    rax
  4096b8:	test   edx,edx
  4096ba:	jne    409658 <test_scan@@Base+0x2138>
  4096bc:	mov    rax,QWORD PTR [rsp]
  4096c0:	mov    rcx,rax
  4096c3:	cmp    ecx,0x2
  4096c6:	mov    eax,0x2
  4096cb:	cmovb  eax,ecx
  4096ce:	mov    rcx,QWORD PTR [rsp+0x28]
  4096d3:	lea    rdx,[rcx+rax*4]
  4096d7:	add    rdx,QWORD PTR [rsp+0x40]
  4096dc:	add    rdx,QWORD PTR [rsp+0x48]
  4096e1:	mov    rcx,QWORD PTR [rsp+0x8]
  4096e6:	add    rcx,rdx
  4096e9:	xor    ebx,ebx
  4096eb:	mov    r8d,0xffffffff
  4096f1:	xor    esi,esi
  4096f3:	lea    rdx,[rax+rsi*1]
  4096f7:	sub    rdx,0x1
  4096fb:	jb     407e1e <test_scan@@Base+0x8fe>
  409701:	cmp    rdx,QWORD PTR [rsp]
  409705:	jae    409753 <test_scan@@Base+0x2233>
  409707:	mov    ebp,DWORD PTR [rcx+rsi*4]
  40970a:	lea    rdx,[rcx+rbp*1]
  40970e:	movsxd rdi,DWORD PTR [rdx+rsi*4]
  409712:	mov    rdx,rbp
  409715:	sub    rdx,rdi
  409718:	add    rdx,rcx
  40971b:	mov    edi,0x1
  409720:	cmp    WORD PTR [rdx+rsi*4],0xa
  409725:	jb     409747 <test_scan@@Base+0x2227>
  409727:	movzx  edx,WORD PTR [rdx+rsi*4+0x8]
  40972c:	test   rdx,rdx
  40972f:	je     409747 <test_scan@@Base+0x2227>
  409731:	add    rbp,rdx
  409734:	add    rbp,rcx
  409737:	xor    edi,edi
  409739:	cmp    WORD PTR [rbp+rsi*4+0x0],0x2a
  40973f:	setne  dil
  409743:	cmovl  edi,r8d
  409747:	dec    rsi
  40974a:	test   edi,edi
  40974c:	jne    4096f3 <test_scan@@Base+0x21d3>
  40974e:	jmp    407e1e <test_scan@@Base+0x8fe>
  409753:	lea    rdi,[rip+0xcc6a]        # 4163c4 <_IO_stdin_used@@Base+0x13c4>
  40975a:	lea    rsi,[rip+0xc6d6]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  409761:	lea    rcx,[rip+0xcdbd]        # 416525 <_IO_stdin_used@@Base+0x1525>
  409768:	mov    edx,0x2b5
  40976d:	call   4040a0 <__assert_fail@plt>
  409772:	lea    rdi,[rip+0xdfe2]        # 41775b <_IO_stdin_used@@Base+0x275b>
  409779:	jmp    407e14 <test_scan@@Base+0x8f4>
  40977e:	lea    rdi,[rip+0xdfa4]        # 417729 <_IO_stdin_used@@Base+0x2729>
  409785:	jmp    407e14 <test_scan@@Base+0x8f4>
  40978a:	lea    rdi,[rip+0xcc33]        # 4163c4 <_IO_stdin_used@@Base+0x13c4>
  409791:	lea    rsi,[rip+0xcc63]        # 4163fb <_IO_stdin_used@@Base+0x13fb>
  409798:	lea    rcx,[rip+0xccde]        # 41647d <_IO_stdin_used@@Base+0x147d>
  40979f:	mov    edx,0x18b
  4097a4:	call   4040a0 <__assert_fail@plt>
  4097a9:	lea    rdi,[rip+0xdf44]        # 4176f4 <_IO_stdin_used@@Base+0x26f4>
  4097b0:	jmp    407e14 <test_scan@@Base+0x8f4>
  4097b5:	lea    rdi,[rip+0xcc08]        # 4163c4 <_IO_stdin_used@@Base+0x13c4>
  4097bc:	lea    rsi,[rip+0xcc38]        # 4163fb <_IO_stdin_used@@Base+0x13fb>
  4097c3:	lea    rcx,[rip+0xcdbe]        # 416588 <_IO_stdin_used@@Base+0x1588>
  4097ca:	mov    edx,0x6c
  4097cf:	call   4040a0 <__assert_fail@plt>
  4097d4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4097de:	xchg   ax,ax

00000000004097e0 <test_basic_sort@@Base>:
  4097e0:	push   rbp
  4097e1:	push   rbx
  4097e2:	sub    rsp,0x18
  4097e6:	mov    rbx,rdi
  4097e9:	mov    DWORD PTR [rsp+0xb],0x2030403
  4097f1:	mov    DWORD PTR [rsp+0x8],0x3010706
  4097f9:	call   40e0f0 <flatcc_builder_reset@@Base>
  4097fe:	lea    rsi,[rip+0xb943]        # 415148 <_IO_stdin_used@@Base+0x148>
  409805:	mov    rdi,rbx
  409808:	xor    edx,edx
  40980a:	xor    ecx,ecx
  40980c:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  409811:	test   eax,eax
  409813:	jne    409822 <test_basic_sort@@Base+0x42>
  409815:	mov    rdi,rbx
  409818:	mov    esi,0x24
  40981d:	call   40ff20 <flatcc_builder_start_table@@Base>
  409822:	lea    rsi,[rip+0xb963]        # 41518c <_IO_stdin_used@@Base+0x18c>
  409829:	mov    rdi,rbx
  40982c:	call   412170 <flatcc_builder_create_string_str@@Base>
  409831:	test   eax,eax
  409833:	je     40984b <test_basic_sort@@Base+0x6b>
  409835:	mov    ebp,eax
  409837:	mov    rdi,rbx
  40983a:	mov    esi,0x3
  40983f:	call   411140 <flatcc_builder_table_add_offset@@Base>
  409844:	test   rax,rax
  409847:	je     40984b <test_basic_sort@@Base+0x6b>
  409849:	mov    DWORD PTR [rax],ebp
  40984b:	lea    rsi,[rsp+0x8]
  409850:	mov    edx,0x7
  409855:	mov    ecx,0x1
  40985a:	mov    r9d,0xffffffff
  409860:	mov    rdi,rbx
  409863:	mov    r8d,0x1
  409869:	call   410ac0 <flatcc_builder_create_vector@@Base>
  40986e:	test   eax,eax
  409870:	je     409888 <test_basic_sort@@Base+0xa8>
  409872:	mov    ebp,eax
  409874:	mov    rdi,rbx
  409877:	mov    esi,0x5
  40987c:	call   411140 <flatcc_builder_table_add_offset@@Base>
  409881:	test   rax,rax
  409884:	je     409888 <test_basic_sort@@Base+0xa8>
  409886:	mov    DWORD PTR [rax],ebp
  409888:	lea    rsi,[rip+0xb8a9]        # 415138 <_IO_stdin_used@@Base+0x138>
  40988f:	mov    rdi,rbx
  409892:	mov    edx,0x1
  409897:	call   4108c0 <flatcc_builder_check_required@@Base>
  40989c:	test   eax,eax
  40989e:	je     409b49 <test_basic_sort@@Base+0x369>
  4098a4:	mov    rdi,rbx
  4098a7:	call   410930 <flatcc_builder_end_table@@Base>
  4098ac:	mov    rdi,rbx
  4098af:	mov    esi,eax
  4098b1:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  4098b6:	lea    rsi,[rsp+0x10]
  4098bb:	mov    rdi,rbx
  4098be:	call   4124d0 <flatcc_builder_get_direct_buffer@@Base>
  4098c3:	test   rax,rax
  4098c6:	je     409b2a <test_basic_sort@@Base+0x34a>
  4098cc:	cmp    DWORD PTR [rax+0x4],0x534e4f4d
  4098d3:	jne    409b2a <test_basic_sort@@Base+0x34a>
  4098d9:	mov    edx,DWORD PTR [rax]
  4098db:	mov    rcx,rax
  4098de:	add    rcx,rdx
  4098e1:	movsxd rax,DWORD PTR [rax+rdx*1]
  4098e5:	mov    rdx,rcx
  4098e8:	sub    rdx,rax
  4098eb:	cmp    WORD PTR [rdx],0xf
  4098ef:	jbe    409b0b <test_basic_sort@@Base+0x32b>
  4098f5:	neg    rax
  4098f8:	movzx  edx,WORD PTR [rcx+rax*1+0xe]
  4098fd:	test   rdx,rdx
  409900:	je     409b0b <test_basic_sort@@Base+0x32b>
  409906:	lea    rax,[rcx+rdx*1]
  40990a:	mov    ecx,DWORD PTR [rcx+rdx*1]
  40990d:	mov    r8d,DWORD PTR [rcx+rax*1]
  409911:	test   r8,r8
  409914:	je     409b0b <test_basic_sort@@Base+0x32b>
  40991a:	add    rax,rcx
  40991d:	add    rax,0x4
  409921:	lea    r9,[r8-0x1]
  409925:	shr    r8,1
  409928:	jmp    40993a <test_basic_sort@@Base+0x15a>
  40992a:	nop    WORD PTR [rax+rax*1+0x0]
  409930:	sub    r8,0x1
  409934:	jb     409a2d <test_basic_sort@@Base+0x24d>
  40993a:	lea    rbp,[r8+r8*1]
  40993e:	cmp    rbp,r9
  409941:	ja     409930 <test_basic_sort@@Base+0x150>
  409943:	mov    rsi,r8
  409946:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409950:	mov    ebx,DWORD PTR [rax-0x4]
  409953:	cmp    rbp,r9
  409956:	jae    40997a <test_basic_sort@@Base+0x19a>
  409958:	cmp    rbp,rbx
  40995b:	jae    409aec <test_basic_sort@@Base+0x30c>
  409961:	mov    rdi,rbp
  409964:	or     rdi,0x1
  409968:	cmp    rdi,rbx
  40996b:	jae    409aec <test_basic_sort@@Base+0x30c>
  409971:	movzx  ecx,BYTE PTR [rax+rbp*1]
  409975:	cmp    cl,BYTE PTR [rax+rdi*1]
  409978:	jb     40997d <test_basic_sort@@Base+0x19d>
  40997a:	mov    rdi,rbp
  40997d:	cmp    rsi,rbx
  409980:	jae    409aec <test_basic_sort@@Base+0x30c>
  409986:	cmp    rdi,rbx
  409989:	jae    409aec <test_basic_sort@@Base+0x30c>
  40998f:	movzx  ebx,BYTE PTR [rax+rsi*1]
  409993:	movzx  edx,BYTE PTR [rax+rdi*1]
  409997:	cmp    bl,dl
  409999:	jae    409930 <test_basic_sort@@Base+0x150>
  40999b:	mov    BYTE PTR [rax+rdi*1],bl
  40999e:	mov    BYTE PTR [rax+rsi*1],dl
  4099a1:	lea    rbp,[rdi+rdi*1]
  4099a5:	mov    rsi,rdi
  4099a8:	cmp    rbp,r9
  4099ab:	jbe    409950 <test_basic_sort@@Base+0x170>
  4099ad:	jmp    409930 <test_basic_sort@@Base+0x150>
  4099af:	nop
  4099b0:	mov    cl,BYTE PTR [rax+r9*1]
  4099b4:	mov    dl,BYTE PTR [rax]
  4099b6:	mov    BYTE PTR [rax+r9*1],dl
  4099ba:	mov    BYTE PTR [rax],cl
  4099bc:	dec    r9
  4099bf:	xor    edi,edi
  4099c1:	xor    edx,edx
  4099c3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4099cd:	nop    DWORD PTR [rax]
  4099d0:	mov    ebp,DWORD PTR [rax-0x4]
  4099d3:	cmp    rdi,r9
  4099d6:	jae    4099fa <test_basic_sort@@Base+0x21a>
  4099d8:	cmp    rdi,rbp
  4099db:	jae    409aec <test_basic_sort@@Base+0x30c>
  4099e1:	mov    rsi,rdi
  4099e4:	or     rsi,0x1
  4099e8:	cmp    rsi,rbp
  4099eb:	jae    409aec <test_basic_sort@@Base+0x30c>
  4099f1:	movzx  ecx,BYTE PTR [rax+rdi*1]
  4099f5:	cmp    cl,BYTE PTR [rax+rsi*1]
  4099f8:	jb     4099fd <test_basic_sort@@Base+0x21d>
  4099fa:	mov    rsi,rdi
  4099fd:	cmp    rdx,rbp
  409a00:	jae    409aec <test_basic_sort@@Base+0x30c>
  409a06:	cmp    rsi,rbp
  409a09:	jae    409aec <test_basic_sort@@Base+0x30c>
  409a0f:	movzx  ebx,BYTE PTR [rax+rdx*1]
  409a13:	movzx  ecx,BYTE PTR [rax+rsi*1]
  409a17:	cmp    bl,cl
  409a19:	jae    409a2d <test_basic_sort@@Base+0x24d>
  409a1b:	mov    BYTE PTR [rax+rsi*1],bl
  409a1e:	mov    BYTE PTR [rax+rdx*1],cl
  409a21:	lea    rdi,[rsi+rsi*1]
  409a25:	mov    rdx,rsi
  409a28:	cmp    rdi,r9
  409a2b:	jbe    4099d0 <test_basic_sort@@Base+0x1f0>
  409a2d:	test   r9,r9
  409a30:	jne    4099b0 <test_basic_sort@@Base+0x1d0>
  409a36:	cmp    DWORD PTR [rax-0x4],0x7
  409a3a:	jne    409b0b <test_basic_sort@@Base+0x32b>
  409a40:	xor    ecx,ecx
  409a42:	lea    r10,[rip+0xb6d5]        # 41511e <_IO_stdin_used@@Base+0x11e>
  409a49:	lea    rdi,[rip+0xe12b]        # 417b7b <_IO_stdin_used@@Base+0x2b7b>
  409a50:	lea    r8,[rip+0xe106]        # 417b5d <_IO_stdin_used@@Base+0x2b5d>
  409a57:	mov    r9d,0x2
  409a5d:	nop    DWORD PTR [rax]
  409a60:	cmp    rcx,0x7
  409a64:	jae    409aec <test_basic_sort@@Base+0x30c>
  409a6a:	mov    bl,BYTE PTR [rax+rcx*1]
  409a6d:	cmp    bl,BYTE PTR [rcx+r10*1]
  409a71:	jne    409adb <test_basic_sort@@Base+0x2fb>
  409a73:	mov    esi,0x6
  409a78:	xor    edx,edx
  409a7a:	jmp    409a88 <test_basic_sort@@Base+0x2a8>
  409a7c:	nop    DWORD PTR [rax+0x0]
  409a80:	mov    rsi,rbp
  409a83:	cmp    rsi,rdx
  409a86:	jbe    409aaa <test_basic_sort@@Base+0x2ca>
  409a88:	mov    rbp,rsi
  409a8b:	sub    rbp,rdx
  409a8e:	shr    rbp,1
  409a91:	add    rbp,rdx
  409a94:	cmp    rbp,0x7
  409a98:	jae    409aec <test_basic_sort@@Base+0x30c>
  409a9a:	cmp    BYTE PTR [rax+rbp*1],bl
  409a9d:	jae    409a80 <test_basic_sort@@Base+0x2a0>
  409a9f:	inc    rbp
  409aa2:	mov    rdx,rbp
  409aa5:	cmp    rsi,rdx
  409aa8:	ja     409a88 <test_basic_sort@@Base+0x2a8>
  409aaa:	jne    409ad8 <test_basic_sort@@Base+0x2f8>
  409aac:	cmp    rdx,0x7
  409ab0:	jae    409aec <test_basic_sort@@Base+0x30c>
  409ab2:	cmp    BYTE PTR [rax+rdx*1],bl
  409ab5:	jne    409ad8 <test_basic_sort@@Base+0x2f8>
  409ab7:	cmp    cl,0x3
  409aba:	movzx  esi,cl
  409abd:	cmove  esi,r9d
  409ac1:	movzx  esi,sil
  409ac5:	cmp    rdx,rsi
  409ac8:	jne    409ad8 <test_basic_sort@@Base+0x2f8>
  409aca:	inc    cl
  409acc:	movzx  ecx,cl
  409acf:	cmp    cl,0x6
  409ad2:	jbe    409a60 <test_basic_sort@@Base+0x280>
  409ad4:	xor    eax,eax
  409ad6:	jmp    409ae5 <test_basic_sort@@Base+0x305>
  409ad8:	mov    rdi,r8
  409adb:	call   404060 <puts@plt>
  409ae0:	mov    eax,0xffffffff
  409ae5:	add    rsp,0x18
  409ae9:	pop    rbx
  409aea:	pop    rbp
  409aeb:	ret    
  409aec:	lea    rdi,[rip+0xc8d1]        # 4163c4 <_IO_stdin_used@@Base+0x13c4>
  409af3:	lea    rsi,[rip+0xc901]        # 4163fb <_IO_stdin_used@@Base+0x13fb>
  409afa:	lea    rcx,[rip+0xc97c]        # 41647d <_IO_stdin_used@@Base+0x147d>
  409b01:	mov    edx,0x18b
  409b06:	call   4040a0 <__assert_fail@plt>
  409b0b:	lea    rdi,[rip+0xbd6f]        # 415881 <_IO_stdin_used@@Base+0x881>
  409b12:	lea    rsi,[rip+0xb81b]        # 415334 <_IO_stdin_used@@Base+0x334>
  409b19:	lea    rcx,[rip+0xbd8f]        # 4158af <_IO_stdin_used@@Base+0x8af>
  409b20:	mov    edx,0x610
  409b25:	call   4040a0 <__assert_fail@plt>
  409b2a:	lea    rdi,[rip+0xc2e0]        # 415e11 <_IO_stdin_used@@Base+0xe11>
  409b31:	lea    rsi,[rip+0xc2ff]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  409b38:	lea    rcx,[rip+0xc82c]        # 41636b <_IO_stdin_used@@Base+0x136b>
  409b3f:	mov    edx,0x2c2
  409b44:	call   4040a0 <__assert_fail@plt>
  409b49:	lea    rdi,[rip+0xc596]        # 4160e6 <_IO_stdin_used@@Base+0x10e6>
  409b50:	lea    rsi,[rip+0xc453]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  409b57:	lea    rcx,[rip+0xc62a]        # 416188 <_IO_stdin_used@@Base+0x1188>
  409b5e:	mov    edx,0xeb
  409b63:	call   4040a0 <__assert_fail@plt>
  409b68:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000409b70 <test_clone_slice@@Base>:
  409b70:	push   rbp
  409b71:	push   r15
  409b73:	push   r14
  409b75:	push   r13
  409b77:	push   r12
  409b79:	push   rbx
  409b7a:	sub    rsp,0x28
  409b7e:	mov    rbp,rdi
  409b81:	mov    DWORD PTR [rsp+0x3],0x100
  409b89:	mov    DWORD PTR [rsp],0x100
  409b90:	call   40e0f0 <flatcc_builder_reset@@Base>
  409b95:	lea    rsi,[rip+0xb5ac]        # 415148 <_IO_stdin_used@@Base+0x148>
  409b9c:	mov    rdi,rbp
  409b9f:	xor    edx,edx
  409ba1:	xor    ecx,ecx
  409ba3:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  409ba8:	test   eax,eax
  409baa:	jne    409bb9 <test_clone_slice@@Base+0x49>
  409bac:	mov    rdi,rbp
  409baf:	mov    esi,0x24
  409bb4:	call   40ff20 <flatcc_builder_start_table@@Base>
  409bb9:	lea    rsi,[rip+0xe18c]        # 417d4c <_IO_stdin_used@@Base+0x2d4c>
  409bc0:	mov    rdi,rbp
  409bc3:	call   412170 <flatcc_builder_create_string_str@@Base>
  409bc8:	test   eax,eax
  409bca:	je     409be2 <test_clone_slice@@Base+0x72>
  409bcc:	mov    ebx,eax
  409bce:	mov    rdi,rbp
  409bd1:	mov    esi,0x3
  409bd6:	call   411140 <flatcc_builder_table_add_offset@@Base>
  409bdb:	test   rax,rax
  409bde:	je     409be2 <test_clone_slice@@Base+0x72>
  409be0:	mov    DWORD PTR [rax],ebx
  409be2:	mov    rsi,rsp
  409be5:	mov    edx,0x7
  409bea:	mov    ecx,0x1
  409bef:	mov    r9d,0xffffffff
  409bf5:	mov    rdi,rbp
  409bf8:	mov    r8d,0x1
  409bfe:	call   410ac0 <flatcc_builder_create_vector@@Base>
  409c03:	test   eax,eax
  409c05:	je     409c1d <test_clone_slice@@Base+0xad>
  409c07:	mov    ebx,eax
  409c09:	mov    rdi,rbp
  409c0c:	mov    esi,0x18
  409c11:	call   411140 <flatcc_builder_table_add_offset@@Base>
  409c16:	test   rax,rax
  409c19:	je     409c1d <test_clone_slice@@Base+0xad>
  409c1b:	mov    DWORD PTR [rax],ebx
  409c1d:	mov    esi,0x4
  409c22:	mov    ecx,0x3fffffff
  409c27:	mov    rdi,rbp
  409c2a:	mov    edx,0x2
  409c2f:	call   40fab0 <flatcc_builder_start_vector@@Base>
  409c34:	mov    esi,0x2
  409c39:	mov    rdi,rbp
  409c3c:	call   40f160 <flatcc_builder_extend_vector@@Base>
  409c41:	mov    WORD PTR [rax],0x16
  409c46:	mov    WORD PTR [rax+0x4],0x2c
  409c4c:	mov    rdi,rbp
  409c4f:	call   410c40 <flatcc_builder_end_vector@@Base>
  409c54:	test   eax,eax
  409c56:	je     409c6e <test_clone_slice@@Base+0xfe>
  409c58:	mov    ebx,eax
  409c5a:	mov    rdi,rbp
  409c5d:	mov    esi,0x9
  409c62:	call   411140 <flatcc_builder_table_add_offset@@Base>
  409c67:	test   rax,rax
  409c6a:	je     409c6e <test_clone_slice@@Base+0xfe>
  409c6c:	mov    DWORD PTR [rax],ebx
  409c6e:	mov    edx,0x20
  409c73:	mov    rdi,rbp
  409c76:	xor    esi,esi
  409c78:	mov    ecx,0x10
  409c7d:	call   4112a0 <flatcc_builder_table_add@@Base>
  409c82:	mov    DWORD PTR [rax],0xc2293333
  409c88:	lea    rsi,[rip+0xb4a9]        # 415138 <_IO_stdin_used@@Base+0x138>
  409c8f:	mov    rdi,rbp
  409c92:	mov    edx,0x1
  409c97:	call   4108c0 <flatcc_builder_check_required@@Base>
  409c9c:	test   eax,eax
  409c9e:	je     40a428 <test_clone_slice@@Base+0x8b8>
  409ca4:	mov    rdi,rbp
  409ca7:	call   410930 <flatcc_builder_end_table@@Base>
  409cac:	mov    rdi,rbp
  409caf:	mov    esi,eax
  409cb1:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  409cb6:	lea    rsi,[rsp+0x8]
  409cbb:	mov    rdi,rbp
  409cbe:	call   412610 <flatcc_builder_finalize_aligned_buffer@@Base>
  409cc3:	mov    rbx,rax
  409cc6:	mov    rdx,QWORD PTR [rsp+0x8]
  409ccb:	mov    rax,QWORD PTR [rip+0x14326]        # 41dff8 <stderr@GLIBC_2.2.5>
  409cd2:	mov    rcx,QWORD PTR [rax]
  409cd5:	lea    rdi,[rip+0xbbfb]        # 4158d7 <_IO_stdin_used@@Base+0x8d7>
  409cdc:	mov    rsi,rbx
  409cdf:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  409ce4:	test   rbx,rbx
  409ce7:	je     409cfc <test_clone_slice@@Base+0x18c>
  409ce9:	cmp    DWORD PTR [rbx+0x4],0x534e4f4d
  409cf0:	jne    409cfc <test_clone_slice@@Base+0x18c>
  409cf2:	mov    eax,DWORD PTR [rbx]
  409cf4:	mov    r15,rbx
  409cf7:	add    r15,rax
  409cfa:	jmp    409cff <test_clone_slice@@Base+0x18f>
  409cfc:	xor    r15d,r15d
  409cff:	mov    rdi,rbp
  409d02:	call   40e0f0 <flatcc_builder_reset@@Base>
  409d07:	lea    rsi,[rip+0xb43a]        # 415148 <_IO_stdin_used@@Base+0x148>
  409d0e:	mov    rdi,rbp
  409d11:	xor    edx,edx
  409d13:	xor    ecx,ecx
  409d15:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  409d1a:	test   eax,eax
  409d1c:	jne    409d2b <test_clone_slice@@Base+0x1bb>
  409d1e:	mov    rdi,rbp
  409d21:	mov    esi,0x24
  409d26:	call   40ff20 <flatcc_builder_start_table@@Base>
  409d2b:	test   r15,r15
  409d2e:	je     40a447 <test_clone_slice@@Base+0x8d7>
  409d34:	movsxd rax,DWORD PTR [r15]
  409d37:	mov    rcx,r15
  409d3a:	sub    rcx,rax
  409d3d:	movzx  edx,WORD PTR [rcx]
  409d40:	cmp    dx,0xc
  409d44:	jb     40a41f <test_clone_slice@@Base+0x8af>
  409d4a:	neg    rax
  409d4d:	movzx  ecx,WORD PTR [r15+rax*1+0xa]
  409d53:	test   rcx,rcx
  409d56:	je     40a41f <test_clone_slice@@Base+0x8af>
  409d5c:	cmp    dx,0x36
  409d60:	jb     40a466 <test_clone_slice@@Base+0x8f6>
  409d66:	movzx  r13d,WORD PTR [r15+rax*1+0x34]
  409d6c:	test   r13,r13
  409d6f:	je     40a466 <test_clone_slice@@Base+0x8f6>
  409d75:	mov    QWORD PTR [rsp+0x20],rbx
  409d7a:	movzx  r12d,WORD PTR [r15+rax*1+0x16]
  409d80:	test   r12,r12
  409d83:	je     40a4a4 <test_clone_slice@@Base+0x934>
  409d89:	lea    rax,[r15+rcx*1]
  409d8d:	mov    ecx,DWORD PTR [r15+rcx*1]
  409d91:	lea    rbx,[rcx+rax*1]
  409d95:	add    rbx,0x4
  409d99:	mov    eax,DWORD PTR [r15+r13*1]
  409d9d:	mov    QWORD PTR [rsp+0x10],rax
  409da2:	mov    eax,DWORD PTR [r15+r12*1]
  409da6:	mov    QWORD PTR [rsp+0x18],rax
  409dab:	mov    edx,DWORD PTR [rbx-0x4]
  409dae:	mov    rdi,rbp
  409db1:	mov    rsi,rbx
  409db4:	call   412040 <flatcc_builder_create_string@@Base>
  409db9:	test   eax,eax
  409dbb:	je     409dd5 <test_clone_slice@@Base+0x265>
  409dbd:	mov    r14d,eax
  409dc0:	mov    rdi,rbp
  409dc3:	mov    esi,0x3
  409dc8:	call   411140 <flatcc_builder_table_add_offset@@Base>
  409dcd:	test   rax,rax
  409dd0:	je     409dd5 <test_clone_slice@@Base+0x265>
  409dd2:	mov    DWORD PTR [rax],r14d
  409dd5:	mov    rdi,rbp
  409dd8:	call   40fb30 <flatcc_builder_start_offset_vector@@Base>
  409ddd:	mov    edx,DWORD PTR [rbx-0x4]
  409de0:	mov    rdi,rbp
  409de3:	mov    rsi,rbx
  409de6:	call   412040 <flatcc_builder_create_string@@Base>
  409deb:	test   eax,eax
  409ded:	je     409df9 <test_clone_slice@@Base+0x289>
  409def:	mov    rdi,rbp
  409df2:	mov    esi,eax
  409df4:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  409df9:	mov    eax,DWORD PTR [rbx-0x4]
  409dfc:	cmp    rax,0x4
  409e00:	mov    esi,0x4
  409e05:	cmovb  rsi,rax
  409e09:	sub    rax,rsi
  409e0c:	cmp    rax,0x14
  409e10:	mov    edx,0x14
  409e15:	cmovb  rdx,rax
  409e19:	add    rsi,rbx
  409e1c:	mov    rdi,rbp
  409e1f:	call   412040 <flatcc_builder_create_string@@Base>
  409e24:	test   eax,eax
  409e26:	je     409e32 <test_clone_slice@@Base+0x2c2>
  409e28:	mov    rdi,rbp
  409e2b:	mov    esi,eax
  409e2d:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  409e32:	mov    eax,DWORD PTR [rbx-0x4]
  409e35:	cmp    rax,0x3
  409e39:	mov    edx,0x3
  409e3e:	cmovb  rdx,rax
  409e42:	mov    rdi,rbp
  409e45:	mov    rsi,rbx
  409e48:	call   412040 <flatcc_builder_create_string@@Base>
  409e4d:	test   eax,eax
  409e4f:	je     409e5b <test_clone_slice@@Base+0x2eb>
  409e51:	mov    rdi,rbp
  409e54:	mov    esi,eax
  409e56:	call   40f500 <flatcc_builder_offset_vector_push@@Base>
  409e5b:	add    r13,r15
  409e5e:	mov    rdi,rbp
  409e61:	call   40fcf0 <flatcc_builder_end_offset_vector@@Base>
  409e66:	test   eax,eax
  409e68:	je     409e82 <test_clone_slice@@Base+0x312>
  409e6a:	mov    r14d,eax
  409e6d:	mov    rdi,rbp
  409e70:	mov    esi,0xa
  409e75:	call   411140 <flatcc_builder_table_add_offset@@Base>
  409e7a:	test   rax,rax
  409e7d:	je     409e82 <test_clone_slice@@Base+0x312>
  409e7f:	mov    DWORD PTR [rax],r14d
  409e82:	add    r12,r15
  409e85:	mov    rax,QWORD PTR [rsp+0x10]
  409e8a:	add    r13,rax
  409e8d:	add    r13,0x4
  409e91:	mov    rdi,rbp
  409e94:	mov    esi,0x24
  409e99:	call   40ff20 <flatcc_builder_start_table@@Base>
  409e9e:	mov    eax,DWORD PTR [rbx-0x4]
  409ea1:	cmp    rax,0x2
  409ea5:	mov    esi,0x2
  409eaa:	cmovb  rsi,rax
  409eae:	sub    rax,rsi
  409eb1:	cmp    rax,0x14
  409eb5:	mov    edx,0x14
  409eba:	cmovb  rdx,rax
  409ebe:	add    rsi,rbx
  409ec1:	mov    rdi,rbp
  409ec4:	call   412040 <flatcc_builder_create_string@@Base>
  409ec9:	test   eax,eax
  409ecb:	je     409ee3 <test_clone_slice@@Base+0x373>
  409ecd:	mov    ebx,eax
  409ecf:	mov    rdi,rbp
  409ed2:	mov    esi,0x3
  409ed7:	call   411140 <flatcc_builder_table_add_offset@@Base>
  409edc:	test   rax,rax
  409edf:	je     409ee3 <test_clone_slice@@Base+0x373>
  409ee1:	mov    DWORD PTR [rax],ebx
  409ee3:	mov    rax,QWORD PTR [rsp+0x18]
  409ee8:	add    r12,rax
  409eeb:	add    r12,0x4
  409eef:	mov    edx,DWORD PTR [r13-0x4]
  409ef3:	mov    ecx,0x1
  409ef8:	mov    r9d,0xffffffff
  409efe:	mov    rdi,rbp
  409f01:	mov    rsi,r13
  409f04:	mov    r8d,0x1
  409f0a:	call   410ac0 <flatcc_builder_create_vector@@Base>
  409f0f:	test   eax,eax
  409f11:	je     409f29 <test_clone_slice@@Base+0x3b9>
  409f13:	mov    ebx,eax
  409f15:	mov    rdi,rbp
  409f18:	mov    esi,0x18
  409f1d:	call   411140 <flatcc_builder_table_add_offset@@Base>
  409f22:	test   rax,rax
  409f25:	je     409f29 <test_clone_slice@@Base+0x3b9>
  409f27:	mov    DWORD PTR [rax],ebx
  409f29:	mov    eax,DWORD PTR [r12-0x4]
  409f2e:	xor    ecx,ecx
  409f30:	test   rax,rax
  409f33:	setne  cl
  409f36:	sub    rax,rcx
  409f39:	cmp    rax,0x2
  409f3d:	mov    edx,0x2
  409f42:	cmovb  rdx,rax
  409f46:	lea    rsi,[r12+rcx*4]
  409f4a:	mov    ecx,0x4
  409f4f:	mov    r9d,0x3fffffff
  409f55:	mov    rdi,rbp
  409f58:	mov    r8d,0x2
  409f5e:	call   410ac0 <flatcc_builder_create_vector@@Base>
  409f63:	test   eax,eax
  409f65:	je     409f7d <test_clone_slice@@Base+0x40d>
  409f67:	mov    ebx,eax
  409f69:	mov    rdi,rbp
  409f6c:	mov    esi,0x9
  409f71:	call   411140 <flatcc_builder_table_add_offset@@Base>
  409f76:	test   rax,rax
  409f79:	je     409f7d <test_clone_slice@@Base+0x40d>
  409f7b:	mov    DWORD PTR [rax],ebx
  409f7d:	lea    rsi,[rip+0xb1b4]        # 415138 <_IO_stdin_used@@Base+0x138>
  409f84:	mov    rdi,rbp
  409f87:	mov    edx,0x1
  409f8c:	call   4108c0 <flatcc_builder_check_required@@Base>
  409f91:	test   eax,eax
  409f93:	je     40a428 <test_clone_slice@@Base+0x8b8>
  409f99:	mov    rdi,rbp
  409f9c:	call   410930 <flatcc_builder_end_table@@Base>
  409fa1:	test   eax,eax
  409fa3:	je     409fde <test_clone_slice@@Base+0x46e>
  409fa5:	mov    ebx,eax
  409fa7:	mov    edx,0x1
  409fac:	mov    rdi,rbp
  409faf:	mov    esi,0x7
  409fb4:	mov    ecx,0x1
  409fb9:	call   4112a0 <flatcc_builder_table_add@@Base>
  409fbe:	test   rax,rax
  409fc1:	je     409fde <test_clone_slice@@Base+0x46e>
  409fc3:	mov    r14,rax
  409fc6:	mov    rdi,rbp
  409fc9:	mov    esi,0x8
  409fce:	call   411140 <flatcc_builder_table_add_offset@@Base>
  409fd3:	test   rax,rax
  409fd6:	je     409fde <test_clone_slice@@Base+0x46e>
  409fd8:	mov    BYTE PTR [r14],0x1
  409fdc:	mov    DWORD PTR [rax],ebx
  409fde:	mov    edx,DWORD PTR [r13-0x4]
  409fe2:	cmp    rdx,0x3
  409fe6:	mov    esi,0x3
  409feb:	cmovb  rsi,rdx
  409fef:	sub    rdx,rsi
  409ff2:	add    rsi,r13
  409ff5:	mov    ecx,0x1
  409ffa:	mov    r9d,0xffffffff
  40a000:	mov    rdi,rbp
  40a003:	mov    r8d,0x1
  40a009:	call   410ac0 <flatcc_builder_create_vector@@Base>
  40a00e:	test   eax,eax
  40a010:	je     40a028 <test_clone_slice@@Base+0x4b8>
  40a012:	mov    ebx,eax
  40a014:	mov    rdi,rbp
  40a017:	mov    esi,0x18
  40a01c:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40a021:	test   rax,rax
  40a024:	je     40a028 <test_clone_slice@@Base+0x4b8>
  40a026:	mov    DWORD PTR [rax],ebx
  40a028:	movsxd rax,DWORD PTR [r15]
  40a02b:	mov    rcx,r15
  40a02e:	sub    rcx,rax
  40a031:	cmp    WORD PTR [rcx],0x6
  40a035:	mov    r14,QWORD PTR [rip+0x13fbc]        # 41dff8 <stderr@GLIBC_2.2.5>
  40a03c:	jb     40a051 <test_clone_slice@@Base+0x4e1>
  40a03e:	neg    rax
  40a041:	movzx  eax,WORD PTR [r15+rax*1+0x4]
  40a047:	test   rax,rax
  40a04a:	je     40a051 <test_clone_slice@@Base+0x4e1>
  40a04c:	add    r15,rax
  40a04f:	jmp    40a054 <test_clone_slice@@Base+0x4e4>
  40a051:	xor    r15d,r15d
  40a054:	mov    ecx,0x20
  40a059:	mov    rdi,rbp
  40a05c:	xor    esi,esi
  40a05e:	mov    rdx,r15
  40a061:	mov    r8d,0x10
  40a067:	call   412330 <flatcc_builder_table_add_copy@@Base>
  40a06c:	mov    edx,DWORD PTR [r12-0x4]
  40a071:	mov    ecx,0x4
  40a076:	mov    r9d,0x3fffffff
  40a07c:	mov    rdi,rbp
  40a07f:	mov    rsi,r12
  40a082:	mov    r8d,0x2
  40a088:	call   410ac0 <flatcc_builder_create_vector@@Base>
  40a08d:	test   eax,eax
  40a08f:	je     40a0a7 <test_clone_slice@@Base+0x537>
  40a091:	mov    ebx,eax
  40a093:	mov    rdi,rbp
  40a096:	mov    esi,0x9
  40a09b:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40a0a0:	test   rax,rax
  40a0a3:	je     40a0a7 <test_clone_slice@@Base+0x537>
  40a0a5:	mov    DWORD PTR [rax],ebx
  40a0a7:	lea    rsi,[rip+0xb08a]        # 415138 <_IO_stdin_used@@Base+0x138>
  40a0ae:	mov    rdi,rbp
  40a0b1:	mov    edx,0x1
  40a0b6:	call   4108c0 <flatcc_builder_check_required@@Base>
  40a0bb:	test   eax,eax
  40a0bd:	je     40a428 <test_clone_slice@@Base+0x8b8>
  40a0c3:	mov    rdi,rbp
  40a0c6:	call   410930 <flatcc_builder_end_table@@Base>
  40a0cb:	mov    rdi,rbp
  40a0ce:	mov    esi,eax
  40a0d0:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40a0d5:	lea    rsi,[rsp+0x8]
  40a0da:	mov    rdi,rbp
  40a0dd:	call   4124d0 <flatcc_builder_get_direct_buffer@@Base>
  40a0e2:	mov    rbx,rax
  40a0e5:	mov    rdx,QWORD PTR [rsp+0x8]
  40a0ea:	mov    rcx,QWORD PTR [r14]
  40a0ed:	lea    rdi,[rip+0xb832]        # 415926 <_IO_stdin_used@@Base+0x926>
  40a0f4:	mov    rsi,rax
  40a0f7:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  40a0fc:	test   rbx,rbx
  40a0ff:	je     40a447 <test_clone_slice@@Base+0x8d7>
  40a105:	cmp    DWORD PTR [rbx+0x4],0x534e4f4d
  40a10c:	jne    40a447 <test_clone_slice@@Base+0x8d7>
  40a112:	mov    eax,DWORD PTR [rbx]
  40a114:	mov    rbp,rbx
  40a117:	add    rbp,rax
  40a11a:	movsxd rbx,DWORD PTR [rbx+rax*1]
  40a11e:	mov    rax,rbp
  40a121:	sub    rax,rbx
  40a124:	movzx  r14d,WORD PTR [rax]
  40a128:	cmp    r14w,0xb
  40a12d:	jbe    40a41f <test_clone_slice@@Base+0x8af>
  40a133:	neg    rbx
  40a136:	movzx  eax,WORD PTR [rbp+rbx*1+0xa]
  40a13b:	test   rax,rax
  40a13e:	je     40a41f <test_clone_slice@@Base+0x8af>
  40a144:	lea    rcx,[rax+rbp*1]
  40a148:	mov    eax,DWORD PTR [rbp+rax*1+0x0]
  40a14c:	lea    rdi,[rax+rcx*1]
  40a150:	add    rdi,0x4
  40a154:	lea    rsi,[rip+0xdbf1]        # 417d4c <_IO_stdin_used@@Base+0x2d4c>
  40a15b:	call   4040e0 <strcmp@plt>
  40a160:	test   eax,eax
  40a162:	je     40a170 <test_clone_slice@@Base+0x600>
  40a164:	lea    rdi,[rip+0xdbec]        # 417d57 <_IO_stdin_used@@Base+0x2d57>
  40a16b:	jmp    40a208 <test_clone_slice@@Base+0x698>
  40a170:	cmp    r14w,0x1a
  40a175:	jb     40a485 <test_clone_slice@@Base+0x915>
  40a17b:	movzx  ecx,WORD PTR [rbp+rbx*1+0x18]
  40a180:	test   rcx,rcx
  40a183:	je     40a485 <test_clone_slice@@Base+0x915>
  40a189:	lea    rax,[rcx+rbp*1]
  40a18d:	mov    ecx,DWORD PTR [rbp+rcx*1+0x0]
  40a191:	mov    r12d,DWORD PTR [rcx+rax*1]
  40a195:	test   r12d,r12d
  40a198:	je     40a485 <test_clone_slice@@Base+0x915>
  40a19e:	lea    r15,[rcx+rax*1]
  40a1a2:	add    r15,0x4
  40a1a6:	mov    eax,DWORD PTR [r15]
  40a1a9:	lea    rdi,[r15+rax*1]
  40a1ad:	add    rdi,0x4
  40a1b1:	lea    rsi,[rip+0xdb94]        # 417d4c <_IO_stdin_used@@Base+0x2d4c>
  40a1b8:	call   4040e0 <strcmp@plt>
  40a1bd:	test   eax,eax
  40a1bf:	je     40a1ca <test_clone_slice@@Base+0x65a>
  40a1c1:	lea    rdi,[rip+0xdb72]        # 417d3a <_IO_stdin_used@@Base+0x2d3a>
  40a1c8:	jmp    40a208 <test_clone_slice@@Base+0x698>
  40a1ca:	cmp    r12d,0x1
  40a1ce:	jbe    40a485 <test_clone_slice@@Base+0x915>
  40a1d4:	mov    eax,DWORD PTR [r15+0x4]
  40a1d8:	cmp    DWORD PTR [r15+rax*1+0x4],0x6
  40a1de:	jne    40a201 <test_clone_slice@@Base+0x691>
  40a1e0:	lea    rdi,[r15+rax*1]
  40a1e4:	add    rdi,0x8
  40a1e8:	lea    rsi,[rip+0xdb20]        # 417d0f <_IO_stdin_used@@Base+0x2d0f>
  40a1ef:	call   4040e0 <strcmp@plt>
  40a1f4:	test   eax,eax
  40a1f6:	je     40a22d <test_clone_slice@@Base+0x6bd>
  40a1f8:	lea    rdi,[rip+0xdafe]        # 417cfd <_IO_stdin_used@@Base+0x2cfd>
  40a1ff:	jmp    40a208 <test_clone_slice@@Base+0x698>
  40a201:	lea    rdi,[rip+0xdb0e]        # 417d16 <_IO_stdin_used@@Base+0x2d16>
  40a208:	call   404060 <puts@plt>
  40a20d:	mov    ebx,0xffffffff
  40a212:	mov    rdi,QWORD PTR [rsp+0x20]
  40a217:	call   412740 <flatcc_builder_aligned_free@@Base>
  40a21c:	mov    eax,ebx
  40a21e:	add    rsp,0x28
  40a222:	pop    rbx
  40a223:	pop    r12
  40a225:	pop    r13
  40a227:	pop    r14
  40a229:	pop    r15
  40a22b:	pop    rbp
  40a22c:	ret    
  40a22d:	cmp    r12d,0x2
  40a231:	jbe    40a485 <test_clone_slice@@Base+0x915>
  40a237:	mov    eax,DWORD PTR [r15+0x8]
  40a23b:	cmp    DWORD PTR [r15+rax*1+0x8],0x3
  40a241:	jne    40a264 <test_clone_slice@@Base+0x6f4>
  40a243:	lea    rdi,[r15+rax*1]
  40a247:	add    rdi,0xc
  40a24b:	lea    rsi,[rip+0xda87]        # 417cd9 <_IO_stdin_used@@Base+0x2cd9>
  40a252:	call   4040e0 <strcmp@plt>
  40a257:	test   eax,eax
  40a259:	je     40a26d <test_clone_slice@@Base+0x6fd>
  40a25b:	lea    rdi,[rip+0xda65]        # 417cc7 <_IO_stdin_used@@Base+0x2cc7>
  40a262:	jmp    40a208 <test_clone_slice@@Base+0x698>
  40a264:	lea    rdi,[rip+0xda72]        # 417cdd <_IO_stdin_used@@Base+0x2cdd>
  40a26b:	jmp    40a208 <test_clone_slice@@Base+0x698>
  40a26d:	movzx  eax,WORD PTR [rbp+rbx*1+0x14]
  40a272:	test   rax,rax
  40a275:	je     40a4c3 <test_clone_slice@@Base+0x953>
  40a27b:	lea    rcx,[rax+rbp*1]
  40a27f:	mov    eax,DWORD PTR [rbp+rax*1+0x0]
  40a283:	lea    r15,[rcx+rax*1]
  40a287:	movsxd r12,DWORD PTR [rax+rcx*1]
  40a28b:	mov    rax,r15
  40a28e:	sub    rax,r12
  40a291:	movzx  r13d,WORD PTR [rax]
  40a295:	cmp    r13w,0xb
  40a29a:	jbe    40a41f <test_clone_slice@@Base+0x8af>
  40a2a0:	neg    r12
  40a2a3:	movzx  eax,WORD PTR [r15+r12*1+0xa]
  40a2a9:	test   rax,rax
  40a2ac:	je     40a41f <test_clone_slice@@Base+0x8af>
  40a2b2:	lea    rcx,[r15+rax*1]
  40a2b6:	mov    eax,DWORD PTR [r15+rax*1]
  40a2ba:	lea    rdi,[rax+rcx*1]
  40a2be:	add    rdi,0x4
  40a2c2:	lea    rsi,[rip+0xda85]        # 417d4e <_IO_stdin_used@@Base+0x2d4e>
  40a2c9:	call   4040e0 <strcmp@plt>
  40a2ce:	test   eax,eax
  40a2d0:	je     40a2e5 <test_clone_slice@@Base+0x775>
  40a2d2:	lea    rdi,[rip+0xb664]        # 41593d <_IO_stdin_used@@Base+0x93d>
  40a2d9:	xor    eax,eax
  40a2db:	call   404080 <printf@plt>
  40a2e0:	jmp    40a20d <test_clone_slice@@Base+0x69d>
  40a2e5:	cmp    r13w,0x36
  40a2ea:	jb     40a324 <test_clone_slice@@Base+0x7b4>
  40a2ec:	movzx  ecx,WORD PTR [r15+r12*1+0x34]
  40a2f2:	test   rcx,rcx
  40a2f5:	je     40a324 <test_clone_slice@@Base+0x7b4>
  40a2f7:	lea    rax,[r15+rcx*1]
  40a2fb:	mov    ecx,DWORD PTR [r15+rcx*1]
  40a2ff:	cmp    DWORD PTR [rcx+rax*1],0x7
  40a303:	jne    40a324 <test_clone_slice@@Base+0x7b4>
  40a305:	mov    edx,DWORD PTR [rax+rcx*1+0x4]
  40a309:	mov    eax,DWORD PTR [rax+rcx*1+0x7]
  40a30d:	xor    edx,DWORD PTR [rsp]
  40a310:	xor    eax,DWORD PTR [rsp+0x3]
  40a314:	or     eax,edx
  40a316:	je     40a330 <test_clone_slice@@Base+0x7c0>
  40a318:	lea    rdi,[rip+0xd96e]        # 417c8d <_IO_stdin_used@@Base+0x2c8d>
  40a31f:	jmp    40a208 <test_clone_slice@@Base+0x698>
  40a324:	lea    rdi,[rip+0xd980]        # 417cab <_IO_stdin_used@@Base+0x2cab>
  40a32b:	jmp    40a208 <test_clone_slice@@Base+0x698>
  40a330:	cmp    r14w,0x36
  40a335:	jb     40a365 <test_clone_slice@@Base+0x7f5>
  40a337:	movzx  eax,WORD PTR [rbp+rbx*1+0x34]
  40a33c:	test   rax,rax
  40a33f:	je     40a365 <test_clone_slice@@Base+0x7f5>
  40a341:	lea    rcx,[rax+rbp*1]
  40a345:	mov    eax,DWORD PTR [rbp+rax*1+0x0]
  40a349:	cmp    DWORD PTR [rax+rcx*1],0x4
  40a34d:	jne    40a365 <test_clone_slice@@Base+0x7f5>
  40a34f:	mov    eax,DWORD PTR [rcx+rax*1+0x4]
  40a353:	cmp    eax,DWORD PTR [rsp+0x3]
  40a357:	je     40a371 <test_clone_slice@@Base+0x801>
  40a359:	lea    rdi,[rip+0xd8f3]        # 417c53 <_IO_stdin_used@@Base+0x2c53>
  40a360:	jmp    40a208 <test_clone_slice@@Base+0x698>
  40a365:	lea    rdi,[rip+0xd905]        # 417c71 <_IO_stdin_used@@Base+0x2c71>
  40a36c:	jmp    40a208 <test_clone_slice@@Base+0x698>
  40a371:	movzx  eax,WORD PTR [rbp+rbx*1+0x4]
  40a376:	vmovss xmm0,DWORD PTR [rbp+rax*1+0x0]
  40a37c:	vucomiss xmm0,DWORD PTR [rip+0xac90]        # 415014 <_IO_stdin_used@@Base+0x14>
  40a384:	jne    40a388 <test_clone_slice@@Base+0x818>
  40a386:	jnp    40a394 <test_clone_slice@@Base+0x824>
  40a388:	lea    rdi,[rip+0xd8ab]        # 417c3a <_IO_stdin_used@@Base+0x2c3a>
  40a38f:	jmp    40a208 <test_clone_slice@@Base+0x698>
  40a394:	movzx  ecx,WORD PTR [rbp+rbx*1+0x16]
  40a399:	test   rcx,rcx
  40a39c:	je     40a3ef <test_clone_slice@@Base+0x87f>
  40a39e:	lea    rax,[rcx+rbp*1]
  40a3a2:	mov    ecx,DWORD PTR [rbp+rcx*1+0x0]
  40a3a6:	cmp    DWORD PTR [rcx+rax*1],0x2
  40a3aa:	jne    40a3ef <test_clone_slice@@Base+0x87f>
  40a3ac:	cmp    WORD PTR [rax+rcx*1+0x4],0x16
  40a3b2:	jne    40a3fb <test_clone_slice@@Base+0x88b>
  40a3b4:	cmp    WORD PTR [rax+rcx*1+0x8],0x2c
  40a3ba:	jne    40a407 <test_clone_slice@@Base+0x897>
  40a3bc:	movzx  ecx,WORD PTR [r15+r12*1+0x16]
  40a3c2:	test   rcx,rcx
  40a3c5:	je     40a413 <test_clone_slice@@Base+0x8a3>
  40a3c7:	lea    rax,[r15+rcx*1]
  40a3cb:	mov    ecx,DWORD PTR [r15+rcx*1]
  40a3cf:	cmp    DWORD PTR [rcx+rax*1],0x1
  40a3d3:	jne    40a413 <test_clone_slice@@Base+0x8a3>
  40a3d5:	xor    ebx,ebx
  40a3d7:	cmp    WORD PTR [rax+rcx*1+0x4],0x2c
  40a3dd:	je     40a212 <test_clone_slice@@Base+0x6a2>
  40a3e3:	lea    rdi,[rip+0xd7a6]        # 417b90 <_IO_stdin_used@@Base+0x2b90>
  40a3ea:	jmp    40a208 <test_clone_slice@@Base+0x698>
  40a3ef:	lea    rdi,[rip+0xd811]        # 417c07 <_IO_stdin_used@@Base+0x2c07>
  40a3f6:	jmp    40a208 <test_clone_slice@@Base+0x698>
  40a3fb:	lea    rdi,[rip+0xd7ea]        # 417bec <_IO_stdin_used@@Base+0x2bec>
  40a402:	jmp    40a208 <test_clone_slice@@Base+0x698>
  40a407:	lea    rdi,[rip+0xd7c3]        # 417bd1 <_IO_stdin_used@@Base+0x2bd1>
  40a40e:	jmp    40a208 <test_clone_slice@@Base+0x698>
  40a413:	lea    rdi,[rip+0xd79a]        # 417bb4 <_IO_stdin_used@@Base+0x2bb4>
  40a41a:	jmp    40a208 <test_clone_slice@@Base+0x698>
  40a41f:	lea    rdi,[rip+0xbf24]        # 41634a <_IO_stdin_used@@Base+0x134a>
  40a426:	jmp    40a44e <test_clone_slice@@Base+0x8de>
  40a428:	lea    rdi,[rip+0xbcb7]        # 4160e6 <_IO_stdin_used@@Base+0x10e6>
  40a42f:	lea    rsi,[rip+0xbb74]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  40a436:	lea    rcx,[rip+0xbd4b]        # 416188 <_IO_stdin_used@@Base+0x1188>
  40a43d:	mov    edx,0xeb
  40a442:	call   4040a0 <__assert_fail@plt>
  40a447:	lea    rdi,[rip+0xb9c3]        # 415e11 <_IO_stdin_used@@Base+0xe11>
  40a44e:	lea    rsi,[rip+0xb9e2]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40a455:	lea    rcx,[rip+0xbe9d]        # 4162f9 <_IO_stdin_used@@Base+0x12f9>
  40a45c:	mov    edx,0x2bb
  40a461:	call   4040a0 <__assert_fail@plt>
  40a466:	lea    rdi,[rip+0xb4ad]        # 41591a <_IO_stdin_used@@Base+0x91a>
  40a46d:	lea    rsi,[rip+0xaec0]        # 415334 <_IO_stdin_used@@Base+0x334>
  40a474:	lea    rcx,[rip+0xb476]        # 4158f1 <_IO_stdin_used@@Base+0x8f1>
  40a47b:	mov    edx,0x646
  40a480:	call   4040a0 <__assert_fail@plt>
  40a485:	lea    rdi,[rip+0xbf38]        # 4163c4 <_IO_stdin_used@@Base+0x13c4>
  40a48c:	lea    rsi,[rip+0xbf68]        # 4163fb <_IO_stdin_used@@Base+0x13fb>
  40a493:	lea    rcx,[rip+0xc0ee]        # 416588 <_IO_stdin_used@@Base+0x1588>
  40a49a:	mov    edx,0x6c
  40a49f:	call   4040a0 <__assert_fail@plt>
  40a4a4:	lea    rdi,[rip+0xb475]        # 415920 <_IO_stdin_used@@Base+0x920>
  40a4ab:	lea    rsi,[rip+0xae82]        # 415334 <_IO_stdin_used@@Base+0x334>
  40a4b2:	lea    rcx,[rip+0xb438]        # 4158f1 <_IO_stdin_used@@Base+0x8f1>
  40a4b9:	mov    edx,0x648
  40a4be:	call   4040a0 <__assert_fail@plt>
  40a4c3:	lea    rdi,[rip+0xae66]        # 415330 <_IO_stdin_used@@Base+0x330>
  40a4ca:	lea    rsi,[rip+0xae63]        # 415334 <_IO_stdin_used@@Base+0x334>
  40a4d1:	lea    rcx,[rip+0xb419]        # 4158f1 <_IO_stdin_used@@Base+0x8f1>
  40a4d8:	mov    edx,0x680
  40a4dd:	call   4040a0 <__assert_fail@plt>
  40a4e2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a4ec:	nop    DWORD PTR [rax+0x0]

000000000040a4f0 <test_create_add_field@@Base>:
  40a4f0:	push   rbp
  40a4f1:	push   rbx
  40a4f2:	push   rax
  40a4f3:	mov    rbx,rdi
  40a4f6:	call   40e0f0 <flatcc_builder_reset@@Base>
  40a4fb:	lea    rsi,[rip+0xac46]        # 415148 <_IO_stdin_used@@Base+0x148>
  40a502:	mov    rdi,rbx
  40a505:	xor    edx,edx
  40a507:	xor    ecx,ecx
  40a509:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  40a50e:	test   eax,eax
  40a510:	jne    40a51f <test_create_add_field@@Base+0x2f>
  40a512:	mov    rdi,rbx
  40a515:	mov    esi,0x24
  40a51a:	call   40ff20 <flatcc_builder_start_table@@Base>
  40a51f:	lea    rsi,[rip+0xac66]        # 41518c <_IO_stdin_used@@Base+0x18c>
  40a526:	mov    rdi,rbx
  40a529:	call   412170 <flatcc_builder_create_string_str@@Base>
  40a52e:	test   eax,eax
  40a530:	je     40a548 <test_create_add_field@@Base+0x58>
  40a532:	mov    ebp,eax
  40a534:	mov    rdi,rbx
  40a537:	mov    esi,0x3
  40a53c:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40a541:	test   rax,rax
  40a544:	je     40a548 <test_create_add_field@@Base+0x58>
  40a546:	mov    DWORD PTR [rax],ebp
  40a548:	lea    rsi,[rip+0xb41e]        # 41596d <_IO_stdin_used@@Base+0x96d>
  40a54f:	mov    rdi,rbx
  40a552:	call   412170 <flatcc_builder_create_string_str@@Base>
  40a557:	mov    ebp,eax
  40a559:	mov    rdi,rbx
  40a55c:	mov    esi,0x3
  40a561:	call   40ff20 <flatcc_builder_start_table@@Base>
  40a566:	test   eax,eax
  40a568:	je     40a5fa <test_create_add_field@@Base+0x10a>
  40a56e:	lea    rsi,[rip+0xabc3]        # 415138 <_IO_stdin_used@@Base+0x138>
  40a575:	mov    rdi,rbx
  40a578:	mov    edx,0x1
  40a57d:	call   4108c0 <flatcc_builder_check_required@@Base>
  40a582:	test   eax,eax
  40a584:	je     40a74c <test_create_add_field@@Base+0x25c>
  40a58a:	mov    rdi,rbx
  40a58d:	call   410930 <flatcc_builder_end_table@@Base>
  40a592:	mov    rdi,rbx
  40a595:	mov    esi,eax
  40a597:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40a59c:	mov    rsi,rsp
  40a59f:	mov    rdi,rbx
  40a5a2:	call   412610 <flatcc_builder_finalize_aligned_buffer@@Base>
  40a5a7:	test   rax,rax
  40a5aa:	je     40a70e <test_create_add_field@@Base+0x21e>
  40a5b0:	mov    rbx,rax
  40a5b3:	cmp    DWORD PTR [rax+0x4],0x534e4f4d
  40a5ba:	jne    40a70e <test_create_add_field@@Base+0x21e>
  40a5c0:	mov    ecx,DWORD PTR [rbx]
  40a5c2:	mov    rax,rbx
  40a5c5:	add    rax,rcx
  40a5c8:	movsxd rcx,DWORD PTR [rbx+rcx*1]
  40a5cc:	mov    rdx,rax
  40a5cf:	sub    rdx,rcx
  40a5d2:	movzx  edx,WORD PTR [rdx]
  40a5d5:	cmp    dx,0x1d
  40a5d9:	jbe    40a72d <test_create_add_field@@Base+0x23d>
  40a5df:	neg    rcx
  40a5e2:	cmp    WORD PTR [rax+rcx*1+0x1c],0x0
  40a5e8:	je     40a6ab <test_create_add_field@@Base+0x1bb>
  40a5ee:	lea    rdi,[rip+0xd78f]        # 417d84 <_IO_stdin_used@@Base+0x2d84>
  40a5f5:	jmp    40a6f3 <test_create_add_field@@Base+0x203>
  40a5fa:	mov    edx,0x8
  40a5ff:	mov    rdi,rbx
  40a602:	mov    esi,0x1
  40a607:	mov    ecx,0x8
  40a60c:	call   4112a0 <flatcc_builder_table_add@@Base>
  40a611:	test   rax,rax
  40a614:	je     40a56e <test_create_add_field@@Base+0x7e>
  40a61a:	mov    QWORD PTR [rax],0xffffffffffffff9c
  40a621:	test   ebp,ebp
  40a623:	je     40a56e <test_create_add_field@@Base+0x7e>
  40a629:	mov    rdi,rbx
  40a62c:	xor    esi,esi
  40a62e:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40a633:	test   rax,rax
  40a636:	je     40a56e <test_create_add_field@@Base+0x7e>
  40a63c:	mov    DWORD PTR [rax],ebp
  40a63e:	mov    edx,0x2
  40a643:	mov    rdi,rbx
  40a646:	mov    esi,0x2
  40a64b:	mov    ecx,0x2
  40a650:	call   4112a0 <flatcc_builder_table_add@@Base>
  40a655:	test   rax,rax
  40a658:	je     40a56e <test_create_add_field@@Base+0x7e>
  40a65e:	mov    WORD PTR [rax],0x2
  40a663:	lea    rsi,[rip+0xaad4]        # 41513e <_IO_stdin_used@@Base+0x13e>
  40a66a:	mov    rdi,rbx
  40a66d:	xor    edx,edx
  40a66f:	call   4108c0 <flatcc_builder_check_required@@Base>
  40a674:	test   eax,eax
  40a676:	je     40a76b <test_create_add_field@@Base+0x27b>
  40a67c:	mov    rdi,rbx
  40a67f:	call   410930 <flatcc_builder_end_table@@Base>
  40a684:	test   eax,eax
  40a686:	je     40a56e <test_create_add_field@@Base+0x7e>
  40a68c:	mov    ebp,eax
  40a68e:	mov    rdi,rbx
  40a691:	mov    esi,0xe
  40a696:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40a69b:	test   rax,rax
  40a69e:	je     40a56e <test_create_add_field@@Base+0x7e>
  40a6a4:	mov    DWORD PTR [rax],ebp
  40a6a6:	jmp    40a56e <test_create_add_field@@Base+0x7e>
  40a6ab:	cmp    dx,0x22
  40a6af:	jb     40a72d <test_create_add_field@@Base+0x23d>
  40a6b1:	movzx  ecx,WORD PTR [rax+rcx*1+0x20]
  40a6b6:	test   rcx,rcx
  40a6b9:	je     40a72d <test_create_add_field@@Base+0x23d>
  40a6bb:	lea    rdx,[rax+rcx*1]
  40a6bf:	mov    ecx,DWORD PTR [rax+rcx*1]
  40a6c2:	lea    rax,[rdx+rcx*1]
  40a6c6:	movsxd rcx,DWORD PTR [rcx+rdx*1]
  40a6ca:	mov    rdx,rax
  40a6cd:	sub    rdx,rcx
  40a6d0:	lea    rdi,[rip+0xd69a]        # 417d71 <_IO_stdin_used@@Base+0x2d71>
  40a6d7:	cmp    WORD PTR [rdx],0x7
  40a6db:	jbe    40a6f3 <test_create_add_field@@Base+0x203>
  40a6dd:	neg    rcx
  40a6e0:	movzx  ecx,WORD PTR [rax+rcx*1+0x6]
  40a6e5:	test   rcx,rcx
  40a6e8:	je     40a6f3 <test_create_add_field@@Base+0x203>
  40a6ea:	xor    ebp,ebp
  40a6ec:	cmp    QWORD PTR [rax+rcx*1],0xffffffffffffff9c
  40a6f1:	je     40a6fd <test_create_add_field@@Base+0x20d>
  40a6f3:	call   404060 <puts@plt>
  40a6f8:	mov    ebp,0xffffffff
  40a6fd:	mov    rdi,rbx
  40a700:	call   412740 <flatcc_builder_aligned_free@@Base>
  40a705:	mov    eax,ebp
  40a707:	add    rsp,0x8
  40a70b:	pop    rbx
  40a70c:	pop    rbp
  40a70d:	ret    
  40a70e:	lea    rdi,[rip+0xb6fc]        # 415e11 <_IO_stdin_used@@Base+0xe11>
  40a715:	lea    rsi,[rip+0xb71b]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40a71c:	lea    rcx,[rip+0xbffb]        # 41671e <_IO_stdin_used@@Base+0x171e>
  40a723:	mov    edx,0x2cc
  40a728:	call   4040a0 <__assert_fail@plt>
  40a72d:	lea    rdi,[rip+0xb6dd]        # 415e11 <_IO_stdin_used@@Base+0xe11>
  40a734:	lea    rsi,[rip+0xb6fc]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40a73b:	lea    rcx,[rip+0xc028]        # 41676a <_IO_stdin_used@@Base+0x176a>
  40a742:	mov    edx,0x260
  40a747:	call   4040a0 <__assert_fail@plt>
  40a74c:	lea    rdi,[rip+0xb993]        # 4160e6 <_IO_stdin_used@@Base+0x10e6>
  40a753:	lea    rsi,[rip+0xb850]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  40a75a:	lea    rcx,[rip+0xba27]        # 416188 <_IO_stdin_used@@Base+0x1188>
  40a761:	mov    edx,0xeb
  40a766:	call   4040a0 <__assert_fail@plt>
  40a76b:	lea    rdi,[rip+0xbec8]        # 41663a <_IO_stdin_used@@Base+0x163a>
  40a772:	lea    rsi,[rip+0xb831]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  40a779:	lea    rcx,[rip+0xbf53]        # 4166d3 <_IO_stdin_used@@Base+0x16d3>
  40a780:	mov    edx,0xdd
  40a785:	call   4040a0 <__assert_fail@plt>
  40a78a:	nop    WORD PTR [rax+rax*1+0x0]

000000000040a790 <test_union_vector@@Base>:
  40a790:	push   rbp
  40a791:	push   r14
  40a793:	push   rbx
  40a794:	sub    rsp,0x10
  40a798:	mov    rbx,rdi
  40a79b:	call   40e0f0 <flatcc_builder_reset@@Base>
  40a7a0:	lea    rsi,[rip+0xa9a1]        # 415148 <_IO_stdin_used@@Base+0x148>
  40a7a7:	mov    rdi,rbx
  40a7aa:	xor    edx,edx
  40a7ac:	xor    ecx,ecx
  40a7ae:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  40a7b3:	test   eax,eax
  40a7b5:	jne    40a7c4 <test_union_vector@@Base+0x34>
  40a7b7:	mov    rdi,rbx
  40a7ba:	mov    esi,0x24
  40a7bf:	call   40ff20 <flatcc_builder_start_table@@Base>
  40a7c4:	lea    rsi,[rip+0xb1a8]        # 415973 <_IO_stdin_used@@Base+0x973>
  40a7cb:	mov    rdi,rbx
  40a7ce:	call   412170 <flatcc_builder_create_string_str@@Base>
  40a7d3:	test   eax,eax
  40a7d5:	je     40a7ed <test_union_vector@@Base+0x5d>
  40a7d7:	mov    ebp,eax
  40a7d9:	mov    rdi,rbx
  40a7dc:	mov    esi,0x3
  40a7e1:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40a7e6:	test   rax,rax
  40a7e9:	je     40a7ed <test_union_vector@@Base+0x5d>
  40a7eb:	mov    DWORD PTR [rax],ebp
  40a7ed:	mov    rdi,rbx
  40a7f0:	mov    esi,0x4
  40a7f5:	call   40ff20 <flatcc_builder_start_table@@Base>
  40a7fa:	xor    ebp,ebp
  40a7fc:	test   eax,eax
  40a7fe:	jne    40a823 <test_union_vector@@Base+0x93>
  40a800:	lea    rsi,[rip+0xa939]        # 415140 <_IO_stdin_used@@Base+0x140>
  40a807:	mov    rdi,rbx
  40a80a:	xor    edx,edx
  40a80c:	call   4108c0 <flatcc_builder_check_required@@Base>
  40a811:	test   eax,eax
  40a813:	je     40ac0f <test_union_vector@@Base+0x47f>
  40a819:	mov    rdi,rbx
  40a81c:	call   410930 <flatcc_builder_end_table@@Base>
  40a821:	mov    ebp,eax
  40a823:	mov    rdi,rbx
  40a826:	call   411860 <flatcc_builder_start_union_vector@@Base>
  40a82b:	shl    rbp,0x20
  40a82f:	or     rbp,0x2
  40a833:	mov    rdi,rbx
  40a836:	mov    rsi,rbp
  40a839:	call   411e60 <flatcc_builder_union_vector_push@@Base>
  40a83e:	mov    rdi,rbx
  40a841:	call   4118d0 <flatcc_builder_end_union_vector@@Base>
  40a846:	mov    r14,rax
  40a849:	mov    rdi,rbx
  40a84c:	mov    esi,0x4
  40a851:	call   40ff20 <flatcc_builder_start_table@@Base>
  40a856:	test   r14d,r14d
  40a859:	je     40a88f <test_union_vector@@Base+0xff>
  40a85b:	mov    rbp,r14
  40a85e:	shr    rbp,0x20
  40a862:	test   ebp,ebp
  40a864:	je     40a88f <test_union_vector@@Base+0xff>
  40a866:	mov    rdi,rbx
  40a869:	mov    esi,0x2
  40a86e:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40a873:	test   rax,rax
  40a876:	je     40a88f <test_union_vector@@Base+0xff>
  40a878:	mov    DWORD PTR [rax],r14d
  40a87b:	mov    rdi,rbx
  40a87e:	mov    esi,0x3
  40a883:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40a888:	test   rax,rax
  40a88b:	je     40a88f <test_union_vector@@Base+0xff>
  40a88d:	mov    DWORD PTR [rax],ebp
  40a88f:	lea    rsi,[rip+0xa8ac]        # 415142 <_IO_stdin_used@@Base+0x142>
  40a896:	mov    rdi,rbx
  40a899:	xor    edx,edx
  40a89b:	call   4108c0 <flatcc_builder_check_required@@Base>
  40a8a0:	test   eax,eax
  40a8a2:	je     40abb2 <test_union_vector@@Base+0x422>
  40a8a8:	mov    rdi,rbx
  40a8ab:	call   410930 <flatcc_builder_end_table@@Base>
  40a8b0:	test   eax,eax
  40a8b2:	je     40a8ed <test_union_vector@@Base+0x15d>
  40a8b4:	mov    ebp,eax
  40a8b6:	mov    edx,0x1
  40a8bb:	mov    rdi,rbx
  40a8be:	mov    esi,0x7
  40a8c3:	mov    ecx,0x1
  40a8c8:	call   4112a0 <flatcc_builder_table_add@@Base>
  40a8cd:	test   rax,rax
  40a8d0:	je     40a8ed <test_union_vector@@Base+0x15d>
  40a8d2:	mov    r14,rax
  40a8d5:	mov    rdi,rbx
  40a8d8:	mov    esi,0x8
  40a8dd:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40a8e2:	test   rax,rax
  40a8e5:	je     40a8ed <test_union_vector@@Base+0x15d>
  40a8e7:	mov    BYTE PTR [r14],0x4
  40a8eb:	mov    DWORD PTR [rax],ebp
  40a8ed:	lea    rsi,[rip+0xa844]        # 415138 <_IO_stdin_used@@Base+0x138>
  40a8f4:	mov    rdi,rbx
  40a8f7:	mov    edx,0x1
  40a8fc:	call   4108c0 <flatcc_builder_check_required@@Base>
  40a901:	test   eax,eax
  40a903:	je     40abd1 <test_union_vector@@Base+0x441>
  40a909:	mov    rdi,rbx
  40a90c:	call   410930 <flatcc_builder_end_table@@Base>
  40a911:	mov    rdi,rbx
  40a914:	mov    esi,eax
  40a916:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40a91b:	lea    rsi,[rsp+0x8]
  40a920:	mov    rdi,rbx
  40a923:	call   412610 <flatcc_builder_finalize_aligned_buffer@@Base>
  40a928:	mov    rbx,rax
  40a92b:	mov    rsi,QWORD PTR [rsp+0x8]
  40a930:	lea    rdx,[rip+0xa811]        # 415148 <_IO_stdin_used@@Base+0x148>
  40a937:	lea    rcx,[rip+0x28a2]        # 40d1e0 <main@@Base+0x310>
  40a93e:	mov    rdi,rax
  40a941:	call   413990 <flatcc_verify_table_as_root@@Base>
  40a946:	test   eax,eax
  40a948:	je     40a96c <test_union_vector@@Base+0x1dc>
  40a94a:	mov    edi,eax
  40a94c:	call   412e60 <flatcc_verify_error_string@@Base>
  40a951:	lea    rdi,[rip+0xb022]        # 41597a <_IO_stdin_used@@Base+0x97a>
  40a958:	mov    rsi,rax
  40a95b:	xor    eax,eax
  40a95d:	call   404080 <printf@plt>
  40a962:	mov    eax,0xffffffff
  40a967:	jmp    40aa0f <test_union_vector@@Base+0x27f>
  40a96c:	test   rbx,rbx
  40a96f:	je     40abf0 <test_union_vector@@Base+0x460>
  40a975:	cmp    DWORD PTR [rbx+0x4],0x534e4f4d
  40a97c:	jne    40abf0 <test_union_vector@@Base+0x460>
  40a982:	mov    ecx,DWORD PTR [rbx]
  40a984:	mov    rax,rbx
  40a987:	add    rax,rcx
  40a98a:	movsxd rcx,DWORD PTR [rbx+rcx*1]
  40a98e:	mov    rdx,rax
  40a991:	sub    rdx,rcx
  40a994:	movzx  edx,WORD PTR [rdx]
  40a997:	cmp    dx,0x13
  40a99b:	jbe    40a9f7 <test_union_vector@@Base+0x267>
  40a99d:	neg    rcx
  40a9a0:	movzx  esi,WORD PTR [rax+rcx*1+0x12]
  40a9a5:	test   rsi,rsi
  40a9a8:	je     40a9f7 <test_union_vector@@Base+0x267>
  40a9aa:	cmp    BYTE PTR [rax+rsi*1],0x4
  40a9ae:	jne    40a9f7 <test_union_vector@@Base+0x267>
  40a9b0:	cmp    dx,0x16
  40a9b4:	jb     40a9e9 <test_union_vector@@Base+0x259>
  40a9b6:	movzx  ecx,WORD PTR [rax+rcx*1+0x14]
  40a9bb:	test   rcx,rcx
  40a9be:	je     40a9e9 <test_union_vector@@Base+0x259>
  40a9c0:	lea    rdx,[rax+rcx*1]
  40a9c4:	mov    ecx,DWORD PTR [rax+rcx*1]
  40a9c7:	lea    rax,[rdx+rcx*1]
  40a9cb:	movsxd rcx,DWORD PTR [rcx+rdx*1]
  40a9cf:	mov    rdx,rax
  40a9d2:	sub    rdx,rcx
  40a9d5:	neg    rcx
  40a9d8:	movzx  edi,WORD PTR [rdx]
  40a9db:	cmp    di,0xc
  40a9df:	jb     40aa18 <test_union_vector@@Base+0x288>
  40a9e1:	cmp    WORD PTR [rax+rcx*1+0xa],0x0
  40a9e7:	je     40aa22 <test_union_vector@@Base+0x292>
  40a9e9:	lea    rdi,[rip+0xd3c1]        # 417db1 <_IO_stdin_used@@Base+0x2db1>
  40a9f0:	call   404060 <puts@plt>
  40a9f5:	jmp    40aa05 <test_union_vector@@Base+0x275>
  40a9f7:	lea    rdi,[rip+0xafb8]        # 4159b6 <_IO_stdin_used@@Base+0x9b6>
  40a9fe:	xor    eax,eax
  40aa00:	call   404080 <printf@plt>
  40aa05:	mov    rdi,rbx
  40aa08:	call   412740 <flatcc_builder_aligned_free@@Base>
  40aa0d:	xor    eax,eax
  40aa0f:	add    rsp,0x10
  40aa13:	pop    rbx
  40aa14:	pop    r14
  40aa16:	pop    rbp
  40aa17:	ret    
  40aa18:	cmp    di,0xa
  40aa1c:	jb     40aad2 <test_union_vector@@Base+0x342>
  40aa22:	movzx  ebp,WORD PTR [rax+rcx*1+0x8]
  40aa27:	test   rbp,rbp
  40aa2a:	je     40aa3c <test_union_vector@@Base+0x2ac>
  40aa2c:	lea    rdx,[rax+rbp*1]
  40aa30:	mov    esi,DWORD PTR [rax+rbp*1]
  40aa33:	add    rdx,rsi
  40aa36:	add    rdx,0x4
  40aa3a:	jmp    40aa3e <test_union_vector@@Base+0x2ae>
  40aa3c:	xor    edx,edx
  40aa3e:	xor    esi,esi
  40aa40:	cmp    di,0xc
  40aa44:	jb     40aa67 <test_union_vector@@Base+0x2d7>
  40aa46:	movzx  esi,WORD PTR [rax+rcx*1+0xa]
  40aa4b:	test   rsi,rsi
  40aa4e:	je     40aa65 <test_union_vector@@Base+0x2d5>
  40aa50:	lea    r8,[rax+rsi*1]
  40aa54:	mov    esi,DWORD PTR [rax+rsi*1]
  40aa57:	add    rsi,r8
  40aa5a:	add    rsi,0x4
  40aa5e:	test   rdx,rdx
  40aa61:	jne    40aa6c <test_union_vector@@Base+0x2dc>
  40aa63:	jmp    40aad2 <test_union_vector@@Base+0x342>
  40aa65:	xor    esi,esi
  40aa67:	test   rdx,rdx
  40aa6a:	je     40aad2 <test_union_vector@@Base+0x342>
  40aa6c:	cmp    DWORD PTR [rdx-0x4],0x1
  40aa70:	jne    40aad2 <test_union_vector@@Base+0x342>
  40aa72:	cmp    BYTE PTR [rdx],0x2
  40aa75:	jne    40aade <test_union_vector@@Base+0x34e>
  40aa77:	test   rsi,rsi
  40aa7a:	je     40ac2e <test_union_vector@@Base+0x49e>
  40aa80:	cmp    DWORD PTR [rsi-0x4],0x0
  40aa84:	je     40ac2e <test_union_vector@@Base+0x49e>
  40aa8a:	mov    edx,DWORD PTR [rsi]
  40aa8c:	lea    r8,[rsi+rdx*1]
  40aa90:	movsxd rsi,DWORD PTR [rsi+rdx*1]
  40aa94:	mov    rdx,r8
  40aa97:	sub    rdx,rsi
  40aa9a:	cmp    WORD PTR [rdx],0x6
  40aa9e:	jb     40aabc <test_union_vector@@Base+0x32c>
  40aaa0:	neg    rsi
  40aaa3:	movzx  esi,WORD PTR [r8+rsi*1+0x4]
  40aaa9:	test   rsi,rsi
  40aaac:	je     40aabc <test_union_vector@@Base+0x32c>
  40aaae:	movsx  esi,BYTE PTR [r8+rsi*1]
  40aab3:	cmp    esi,0x2
  40aab6:	jne    40ab9f <test_union_vector@@Base+0x40f>
  40aabc:	test   bp,bp
  40aabf:	je     40aaea <test_union_vector@@Base+0x35a>
  40aac1:	lea    rdx,[rax+rbp*1]
  40aac5:	mov    esi,DWORD PTR [rax+rbp*1]
  40aac8:	lea    rbp,[rsi+rdx*1]
  40aacc:	add    rbp,0x4
  40aad0:	jmp    40aaec <test_union_vector@@Base+0x35c>
  40aad2:	lea    rdi,[rip+0xd3a0]        # 417e79 <_IO_stdin_used@@Base+0x2e79>
  40aad9:	jmp    40a9f0 <test_union_vector@@Base+0x260>
  40aade:	lea    rdi,[rip+0xd367]        # 417e4c <_IO_stdin_used@@Base+0x2e4c>
  40aae5:	jmp    40a9f0 <test_union_vector@@Base+0x260>
  40aaea:	xor    ebp,ebp
  40aaec:	xor    esi,esi
  40aaee:	cmp    di,0xc
  40aaf2:	jb     40ab16 <test_union_vector@@Base+0x386>
  40aaf4:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  40aaf9:	test   rcx,rcx
  40aafc:	je     40ab14 <test_union_vector@@Base+0x384>
  40aafe:	lea    rdx,[rax+rcx*1]
  40ab02:	mov    eax,DWORD PTR [rax+rcx*1]
  40ab05:	lea    rsi,[rax+rdx*1]
  40ab09:	add    rsi,0x4
  40ab0d:	test   rbp,rbp
  40ab10:	jne    40ab1b <test_union_vector@@Base+0x38b>
  40ab12:	jmp    40ab25 <test_union_vector@@Base+0x395>
  40ab14:	xor    esi,esi
  40ab16:	test   rbp,rbp
  40ab19:	je     40ab25 <test_union_vector@@Base+0x395>
  40ab1b:	mov    eax,DWORD PTR [rbp-0x4]
  40ab1e:	test   rsi,rsi
  40ab21:	jne    40ab2c <test_union_vector@@Base+0x39c>
  40ab23:	jmp    40ab39 <test_union_vector@@Base+0x3a9>
  40ab25:	xor    eax,eax
  40ab27:	test   rsi,rsi
  40ab2a:	je     40ab39 <test_union_vector@@Base+0x3a9>
  40ab2c:	mov    ecx,DWORD PTR [rsi-0x4]
  40ab2f:	cmp    rax,rcx
  40ab32:	je     40ab44 <test_union_vector@@Base+0x3b4>
  40ab34:	jmp    40ac4d <test_union_vector@@Base+0x4bd>
  40ab39:	xor    ecx,ecx
  40ab3b:	cmp    rax,rcx
  40ab3e:	jne    40ac4d <test_union_vector@@Base+0x4bd>
  40ab44:	test   rbp,rbp
  40ab47:	je     40ab87 <test_union_vector@@Base+0x3f7>
  40ab49:	cmp    DWORD PTR [rbp-0x4],0x1
  40ab4d:	jne    40ab87 <test_union_vector@@Base+0x3f7>
  40ab4f:	mov    al,BYTE PTR [rbp+0x0]
  40ab52:	test   al,al
  40ab54:	je     40ab93 <test_union_vector@@Base+0x403>
  40ab56:	test   rsi,rsi
  40ab59:	je     40ac2e <test_union_vector@@Base+0x49e>
  40ab5f:	cmp    DWORD PTR [rsi-0x4],0x0
  40ab63:	je     40ac2e <test_union_vector@@Base+0x49e>
  40ab69:	cmp    al,0x2
  40ab6b:	jne    40ab93 <test_union_vector@@Base+0x403>
  40ab6d:	mov    eax,DWORD PTR [rsi]
  40ab6f:	add    rsi,rax
  40ab72:	cmp    rsi,r8
  40ab75:	je     40aa05 <test_union_vector@@Base+0x275>
  40ab7b:	lea    rdi,[rip+0xd257]        # 417dd9 <_IO_stdin_used@@Base+0x2dd9>
  40ab82:	jmp    40a9f0 <test_union_vector@@Base+0x260>
  40ab87:	lea    rdi,[rip+0xd27a]        # 417e08 <_IO_stdin_used@@Base+0x2e08>
  40ab8e:	jmp    40a9f0 <test_union_vector@@Base+0x260>
  40ab93:	lea    rdi,[rip+0xd255]        # 417def <_IO_stdin_used@@Base+0x2def>
  40ab9a:	jmp    40a9f0 <test_union_vector@@Base+0x260>
  40ab9f:	lea    rdi,[rip+0xae32]        # 4159d8 <_IO_stdin_used@@Base+0x9d8>
  40aba6:	xor    eax,eax
  40aba8:	call   404080 <printf@plt>
  40abad:	jmp    40aa05 <test_union_vector@@Base+0x275>
  40abb2:	lea    rdi,[rip+0xbd31]        # 4168ea <_IO_stdin_used@@Base+0x18ea>
  40abb9:	lea    rsi,[rip+0xb3ea]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  40abc0:	lea    rcx,[rip+0xbdb9]        # 416980 <_IO_stdin_used@@Base+0x1980>
  40abc7:	mov    edx,0xdf
  40abcc:	call   4040a0 <__assert_fail@plt>
  40abd1:	lea    rdi,[rip+0xb50e]        # 4160e6 <_IO_stdin_used@@Base+0x10e6>
  40abd8:	lea    rsi,[rip+0xb3cb]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  40abdf:	lea    rcx,[rip+0xb5a2]        # 416188 <_IO_stdin_used@@Base+0x1188>
  40abe6:	mov    edx,0xeb
  40abeb:	call   4040a0 <__assert_fail@plt>
  40abf0:	lea    rdi,[rip+0xb21a]        # 415e11 <_IO_stdin_used@@Base+0xe11>
  40abf7:	lea    rsi,[rip+0xb239]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40abfe:	lea    rcx,[rip+0xb9d4]        # 4165d9 <_IO_stdin_used@@Base+0x15d9>
  40ac05:	mov    edx,0x2cd
  40ac0a:	call   4040a0 <__assert_fail@plt>
  40ac0f:	lea    rdi,[rip+0xbb91]        # 4167a7 <_IO_stdin_used@@Base+0x17a7>
  40ac16:	lea    rsi,[rip+0xb38d]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  40ac1d:	lea    rcx,[rip+0xbc55]        # 416879 <_IO_stdin_used@@Base+0x1879>
  40ac24:	mov    edx,0xd9
  40ac29:	call   4040a0 <__assert_fail@plt>
  40ac2e:	lea    rdi,[rip+0xb78f]        # 4163c4 <_IO_stdin_used@@Base+0x13c4>
  40ac35:	lea    rsi,[rip+0xb7bf]        # 4163fb <_IO_stdin_used@@Base+0x13fb>
  40ac3c:	lea    rcx,[rip+0xbde3]        # 416a26 <_IO_stdin_used@@Base+0x1a26>
  40ac43:	mov    edx,0x75
  40ac48:	call   4040a0 <__assert_fail@plt>
  40ac4d:	lea    rdi,[rip+0xbe26]        # 416a7a <_IO_stdin_used@@Base+0x1a7a>
  40ac54:	lea    rsi,[rip+0xb1dc]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40ac5b:	lea    rcx,[rip+0xbe7d]        # 416adf <_IO_stdin_used@@Base+0x1adf>
  40ac62:	mov    edx,0x26d
  40ac67:	call   4040a0 <__assert_fail@plt>
  40ac6c:	nop    DWORD PTR [rax+0x0]

000000000040ac70 <test_mixed_type_union@@Base>:
  40ac70:	push   rbp
  40ac71:	push   r15
  40ac73:	push   r14
  40ac75:	push   r13
  40ac77:	push   r12
  40ac79:	push   rbx
  40ac7a:	push   rax
  40ac7b:	mov    rbx,rdi
  40ac7e:	call   40e0f0 <flatcc_builder_reset@@Base>
  40ac83:	lea    rsi,[rip+0xa4be]        # 415148 <_IO_stdin_used@@Base+0x148>
  40ac8a:	xor    r14d,r14d
  40ac8d:	mov    rdi,rbx
  40ac90:	xor    edx,edx
  40ac92:	xor    ecx,ecx
  40ac94:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  40ac99:	test   eax,eax
  40ac9b:	jne    40acaa <test_mixed_type_union@@Base+0x3a>
  40ac9d:	mov    rdi,rbx
  40aca0:	mov    esi,0xa
  40aca5:	call   40ff20 <flatcc_builder_start_table@@Base>
  40acaa:	mov    esi,0x4
  40acaf:	mov    rdi,rbx
  40acb2:	mov    edx,0x4
  40acb7:	call   40efd0 <flatcc_builder_start_struct@@Base>
  40acbc:	test   rax,rax
  40acbf:	je     40acd2 <test_mixed_type_union@@Base+0x62>
  40acc1:	mov    DWORD PTR [rax],0xa
  40acc7:	mov    rdi,rbx
  40acca:	call   40f0a0 <flatcc_builder_end_struct@@Base>
  40accf:	mov    r14d,eax
  40acd2:	mov    esi,0x2
  40acd7:	mov    rdi,rbx
  40acda:	mov    edx,0x2
  40acdf:	call   40efd0 <flatcc_builder_start_struct@@Base>
  40ace4:	test   rax,rax
  40ace7:	je     40acfb <test_mixed_type_union@@Base+0x8b>
  40ace9:	mov    WORD PTR [rax],0x16
  40acee:	mov    rdi,rbx
  40acf1:	call   40f0a0 <flatcc_builder_end_struct@@Base>
  40acf6:	mov    r15d,eax
  40acf9:	jmp    40acfe <test_mixed_type_union@@Base+0x8e>
  40acfb:	xor    r15d,r15d
  40acfe:	mov    esi,0x2
  40ad03:	mov    rdi,rbx
  40ad06:	mov    edx,0x2
  40ad0b:	call   40efd0 <flatcc_builder_start_struct@@Base>
  40ad10:	test   rax,rax
  40ad13:	je     40ad5d <test_mixed_type_union@@Base+0xed>
  40ad15:	mov    WORD PTR [rax],0x13
  40ad1a:	mov    rdi,rbx
  40ad1d:	call   40f0a0 <flatcc_builder_end_struct@@Base>
  40ad22:	test   eax,eax
  40ad24:	je     40ad5d <test_mixed_type_union@@Base+0xed>
  40ad26:	mov    ebp,eax
  40ad28:	mov    edx,0x1
  40ad2d:	mov    rdi,rbx
  40ad30:	xor    esi,esi
  40ad32:	mov    ecx,0x1
  40ad37:	call   4112a0 <flatcc_builder_table_add@@Base>
  40ad3c:	test   rax,rax
  40ad3f:	je     40ad5d <test_mixed_type_union@@Base+0xed>
  40ad41:	mov    r12,rax
  40ad44:	mov    rdi,rbx
  40ad47:	mov    esi,0x1
  40ad4c:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40ad51:	test   rax,rax
  40ad54:	je     40ad5d <test_mixed_type_union@@Base+0xed>
  40ad56:	mov    BYTE PTR [r12],0x8
  40ad5b:	mov    DWORD PTR [rax],ebp
  40ad5d:	test   r15d,r15d
  40ad60:	je     40ad9a <test_mixed_type_union@@Base+0x12a>
  40ad62:	mov    edx,0x1
  40ad67:	mov    rdi,rbx
  40ad6a:	mov    esi,0x6
  40ad6f:	mov    ecx,0x1
  40ad74:	call   4112a0 <flatcc_builder_table_add@@Base>
  40ad79:	test   rax,rax
  40ad7c:	je     40ad9a <test_mixed_type_union@@Base+0x12a>
  40ad7e:	mov    rbp,rax
  40ad81:	mov    rdi,rbx
  40ad84:	mov    esi,0x7
  40ad89:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40ad8e:	test   rax,rax
  40ad91:	je     40ad9a <test_mixed_type_union@@Base+0x12a>
  40ad93:	mov    BYTE PTR [rbp+0x0],0x8
  40ad97:	mov    DWORD PTR [rax],r15d
  40ad9a:	mov    rdi,rbx
  40ad9d:	mov    esi,0x1
  40ada2:	call   40ff20 <flatcc_builder_start_table@@Base>
  40ada7:	xor    r12d,r12d
  40adaa:	test   eax,eax
  40adac:	je     40af2a <test_mixed_type_union@@Base+0x2ba>
  40adb2:	shl    r15,0x20
  40adb6:	or     r15,0x8
  40adba:	lea    rsi,[rip+0xac34]        # 4159f5 <_IO_stdin_used@@Base+0x9f5>
  40adc1:	mov    rdi,rbx
  40adc4:	call   412170 <flatcc_builder_create_string_str@@Base>
  40adc9:	test   eax,eax
  40adcb:	je     40ae07 <test_mixed_type_union@@Base+0x197>
  40adcd:	mov    ebp,eax
  40adcf:	mov    edx,0x1
  40add4:	mov    rdi,rbx
  40add7:	mov    esi,0x4
  40addc:	mov    ecx,0x1
  40ade1:	call   4112a0 <flatcc_builder_table_add@@Base>
  40ade6:	test   rax,rax
  40ade9:	je     40ae07 <test_mixed_type_union@@Base+0x197>
  40adeb:	mov    r13,rax
  40adee:	mov    rdi,rbx
  40adf1:	mov    esi,0x5
  40adf6:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40adfb:	test   rax,rax
  40adfe:	je     40ae07 <test_mixed_type_union@@Base+0x197>
  40ae00:	mov    BYTE PTR [r13+0x0],0xb
  40ae05:	mov    DWORD PTR [rax],ebp
  40ae07:	mov    rdi,rbx
  40ae0a:	call   411860 <flatcc_builder_start_union_vector@@Base>
  40ae0f:	mov    rdi,rbx
  40ae12:	mov    rsi,r15
  40ae15:	call   411e60 <flatcc_builder_union_vector_push@@Base>
  40ae1a:	shl    r12,0x20
  40ae1e:	or     r12,0x2
  40ae22:	mov    rdi,rbx
  40ae25:	mov    rsi,r12
  40ae28:	call   411e60 <flatcc_builder_union_vector_push@@Base>
  40ae2d:	mov    rdi,rbx
  40ae30:	mov    esi,0x1
  40ae35:	call   40ff20 <flatcc_builder_start_table@@Base>
  40ae3a:	mov    ebp,0x2
  40ae3f:	test   eax,eax
  40ae41:	jne    40ae8d <test_mixed_type_union@@Base+0x21d>
  40ae43:	mov    edx,0x4
  40ae48:	mov    rdi,rbx
  40ae4b:	xor    esi,esi
  40ae4d:	mov    ecx,0x4
  40ae52:	call   4112a0 <flatcc_builder_table_add@@Base>
  40ae57:	test   rax,rax
  40ae5a:	je     40ae8d <test_mixed_type_union@@Base+0x21d>
  40ae5c:	mov    DWORD PTR [rax],0x1
  40ae62:	lea    rsi,[rip+0xa2db]        # 415144 <_IO_stdin_used@@Base+0x144>
  40ae69:	mov    rdi,rbx
  40ae6c:	xor    edx,edx
  40ae6e:	call   4108c0 <flatcc_builder_check_required@@Base>
  40ae73:	test   eax,eax
  40ae75:	je     40b58a <test_mixed_type_union@@Base+0x91a>
  40ae7b:	mov    rdi,rbx
  40ae7e:	call   410930 <flatcc_builder_end_table@@Base>
  40ae83:	mov    ebp,eax
  40ae85:	shl    rbp,0x20
  40ae89:	or     rbp,0x2
  40ae8d:	mov    rdi,rbx
  40ae90:	mov    rsi,rbp
  40ae93:	call   411e60 <flatcc_builder_union_vector_push@@Base>
  40ae98:	lea    rsi,[rip+0xab61]        # 415a00 <_IO_stdin_used@@Base+0xa00>
  40ae9f:	mov    rdi,rbx
  40aea2:	call   412170 <flatcc_builder_create_string_str@@Base>
  40aea7:	shl    rax,0x20
  40aeab:	lea    rsi,[rax+0xb]
  40aeaf:	mov    rdi,rbx
  40aeb2:	call   411e60 <flatcc_builder_union_vector_push@@Base>
  40aeb7:	shl    r14,0x20
  40aebb:	or     r14,0x9
  40aebf:	mov    rdi,rbx
  40aec2:	mov    rsi,r14
  40aec5:	call   411e60 <flatcc_builder_union_vector_push@@Base>
  40aeca:	mov    esi,0x4
  40aecf:	mov    rdi,rbx
  40aed2:	mov    edx,0x4
  40aed7:	call   40efd0 <flatcc_builder_start_struct@@Base>
  40aedc:	mov    DWORD PTR [rax],0x3
  40aee2:	mov    rdi,rbx
  40aee5:	call   40f0a0 <flatcc_builder_end_struct@@Base>
  40aeea:	shl    rax,0x20
  40aeee:	lea    rsi,[rax+0x9]
  40aef2:	mov    rdi,rbx
  40aef5:	call   411e60 <flatcc_builder_union_vector_push@@Base>
  40aefa:	mov    esi,0x4
  40aeff:	mov    rdi,rbx
  40af02:	mov    edx,0x4
  40af07:	call   40efd0 <flatcc_builder_start_struct@@Base>
  40af0c:	test   rax,rax
  40af0f:	je     40afbe <test_mixed_type_union@@Base+0x34e>
  40af15:	mov    DWORD PTR [rax],0x1
  40af1b:	mov    rdi,rbx
  40af1e:	call   40f0a0 <flatcc_builder_end_struct@@Base>
  40af23:	mov    esi,eax
  40af25:	jmp    40afc0 <test_mixed_type_union@@Base+0x350>
  40af2a:	xor    r12d,r12d
  40af2d:	mov    edx,0x4
  40af32:	mov    rdi,rbx
  40af35:	xor    esi,esi
  40af37:	mov    ecx,0x4
  40af3c:	call   4112a0 <flatcc_builder_table_add@@Base>
  40af41:	test   rax,rax
  40af44:	je     40adb2 <test_mixed_type_union@@Base+0x142>
  40af4a:	mov    DWORD PTR [rax],0x2a
  40af50:	lea    rsi,[rip+0xa1ed]        # 415144 <_IO_stdin_used@@Base+0x144>
  40af57:	xor    r12d,r12d
  40af5a:	mov    rdi,rbx
  40af5d:	xor    edx,edx
  40af5f:	call   4108c0 <flatcc_builder_check_required@@Base>
  40af64:	test   eax,eax
  40af66:	je     40b58a <test_mixed_type_union@@Base+0x91a>
  40af6c:	mov    rdi,rbx
  40af6f:	call   410930 <flatcc_builder_end_table@@Base>
  40af74:	test   eax,eax
  40af76:	je     40adb2 <test_mixed_type_union@@Base+0x142>
  40af7c:	mov    ebp,eax
  40af7e:	mov    edx,0x1
  40af83:	mov    rdi,rbx
  40af86:	mov    esi,0x2
  40af8b:	mov    ecx,0x1
  40af90:	call   4112a0 <flatcc_builder_table_add@@Base>
  40af95:	test   rax,rax
  40af98:	je     40afb6 <test_mixed_type_union@@Base+0x346>
  40af9a:	mov    r12,rax
  40af9d:	mov    rdi,rbx
  40afa0:	mov    esi,0x3
  40afa5:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40afaa:	test   rax,rax
  40afad:	je     40afb6 <test_mixed_type_union@@Base+0x346>
  40afaf:	mov    BYTE PTR [r12],0x2
  40afb4:	mov    DWORD PTR [rax],ebp
  40afb6:	mov    r12d,ebp
  40afb9:	jmp    40adb2 <test_mixed_type_union@@Base+0x142>
  40afbe:	xor    esi,esi
  40afc0:	shl    rsi,0x20
  40afc4:	or     rsi,0x9
  40afc8:	mov    rdi,rbx
  40afcb:	call   411e60 <flatcc_builder_union_vector_push@@Base>
  40afd0:	mov    esi,0x4
  40afd5:	mov    rdi,rbx
  40afd8:	mov    edx,0x4
  40afdd:	call   40efd0 <flatcc_builder_start_struct@@Base>
  40afe2:	test   rax,rax
  40afe5:	je     40b001 <test_mixed_type_union@@Base+0x391>
  40afe7:	mov    DWORD PTR [rax],0x2
  40afed:	mov    rdi,rbx
  40aff0:	call   40f0a0 <flatcc_builder_end_struct@@Base>
  40aff5:	mov    esi,eax
  40aff7:	shl    rsi,0x20
  40affb:	or     rsi,0x9
  40afff:	jmp    40b006 <test_mixed_type_union@@Base+0x396>
  40b001:	mov    esi,0x9
  40b006:	mov    rdi,rbx
  40b009:	call   411e60 <flatcc_builder_union_vector_push@@Base>
  40b00e:	lea    rsi,[rip+0xa9e9]        # 4159fe <_IO_stdin_used@@Base+0x9fe>
  40b015:	mov    rdi,rbx
  40b018:	call   412170 <flatcc_builder_create_string_str@@Base>
  40b01d:	shl    rax,0x20
  40b021:	lea    rsi,[rax+0xb]
  40b025:	mov    rdi,rbx
  40b028:	call   411e60 <flatcc_builder_union_vector_push@@Base>
  40b02d:	lea    rsi,[rip+0xa9c6]        # 4159fa <_IO_stdin_used@@Base+0x9fa>
  40b034:	mov    rdi,rbx
  40b037:	call   412170 <flatcc_builder_create_string_str@@Base>
  40b03c:	shl    rax,0x20
  40b040:	lea    rsi,[rax+0xb]
  40b044:	mov    rdi,rbx
  40b047:	call   411e60 <flatcc_builder_union_vector_push@@Base>
  40b04c:	mov    rdi,rbx
  40b04f:	call   4118d0 <flatcc_builder_end_union_vector@@Base>
  40b054:	mov    rbp,rax
  40b057:	test   ebp,ebp
  40b059:	je     40b090 <test_mixed_type_union@@Base+0x420>
  40b05b:	mov    r14,rbp
  40b05e:	shr    r14,0x20
  40b062:	test   r14d,r14d
  40b065:	je     40b090 <test_mixed_type_union@@Base+0x420>
  40b067:	mov    rdi,rbx
  40b06a:	mov    esi,0x8
  40b06f:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40b074:	test   rax,rax
  40b077:	je     40b090 <test_mixed_type_union@@Base+0x420>
  40b079:	mov    DWORD PTR [rax],ebp
  40b07b:	mov    rdi,rbx
  40b07e:	mov    esi,0x9
  40b083:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40b088:	test   rax,rax
  40b08b:	je     40b090 <test_mixed_type_union@@Base+0x420>
  40b08d:	mov    DWORD PTR [rax],r14d
  40b090:	lea    rsi,[rip+0xa0af]        # 415146 <_IO_stdin_used@@Base+0x146>
  40b097:	mov    rdi,rbx
  40b09a:	xor    edx,edx
  40b09c:	call   4108c0 <flatcc_builder_check_required@@Base>
  40b0a1:	test   eax,eax
  40b0a3:	je     40b54c <test_mixed_type_union@@Base+0x8dc>
  40b0a9:	mov    rdi,rbx
  40b0ac:	call   410930 <flatcc_builder_end_table@@Base>
  40b0b1:	mov    rdi,rbx
  40b0b4:	mov    esi,eax
  40b0b6:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40b0bb:	mov    rsi,rsp
  40b0be:	mov    rdi,rbx
  40b0c1:	call   412610 <flatcc_builder_finalize_aligned_buffer@@Base>
  40b0c6:	mov    rbx,rax
  40b0c9:	mov    rdx,QWORD PTR [rsp]
  40b0cd:	mov    rax,QWORD PTR [rip+0x12f24]        # 41dff8 <stderr@GLIBC_2.2.5>
  40b0d4:	mov    rcx,QWORD PTR [rax]
  40b0d7:	lea    rdi,[rip+0xa928]        # 415a06 <_IO_stdin_used@@Base+0xa06>
  40b0de:	mov    rsi,rbx
  40b0e1:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  40b0e6:	mov    rsi,QWORD PTR [rsp]
  40b0ea:	lea    rdx,[rip+0xa057]        # 415148 <_IO_stdin_used@@Base+0x148>
  40b0f1:	lea    rcx,[rip+0x2738]        # 40d830 <main@@Base+0x960>
  40b0f8:	mov    rdi,rbx
  40b0fb:	call   413990 <flatcc_verify_table_as_root@@Base>
  40b100:	test   eax,eax
  40b102:	je     40b126 <test_mixed_type_union@@Base+0x4b6>
  40b104:	mov    edi,eax
  40b106:	call   412e60 <flatcc_verify_error_string@@Base>
  40b10b:	lea    rdi,[rip+0xa901]        # 415a13 <_IO_stdin_used@@Base+0xa13>
  40b112:	mov    rsi,rax
  40b115:	xor    eax,eax
  40b117:	call   404080 <printf@plt>
  40b11c:	mov    ebp,0xffffffff
  40b121:	jmp    40b1d2 <test_mixed_type_union@@Base+0x562>
  40b126:	test   rbx,rbx
  40b129:	je     40b56b <test_mixed_type_union@@Base+0x8fb>
  40b12f:	cmp    DWORD PTR [rbx+0x4],0x534e4f4d
  40b136:	jne    40b56b <test_mixed_type_union@@Base+0x8fb>
  40b13c:	mov    eax,DWORD PTR [rbx]
  40b13e:	mov    r13,rbx
  40b141:	add    r13,rax
  40b144:	movsxd rbp,DWORD PTR [rbx+rax*1]
  40b148:	mov    rax,r13
  40b14b:	sub    rax,rbp
  40b14e:	movzx  ecx,WORD PTR [rax]
  40b151:	cmp    cx,0x7
  40b155:	jbe    40b1a7 <test_mixed_type_union@@Base+0x537>
  40b157:	neg    rbp
  40b15a:	movzx  eax,WORD PTR [r13+rbp*1+0x6]
  40b160:	test   rax,rax
  40b163:	je     40b1a7 <test_mixed_type_union@@Base+0x537>
  40b165:	cmp    cx,0x18
  40b169:	jb     40b1b0 <test_mixed_type_union@@Base+0x540>
  40b16b:	movzx  r15d,WORD PTR [r13+rbp*1+0x16]
  40b171:	test   r15,r15
  40b174:	je     40b1b0 <test_mixed_type_union@@Base+0x540>
  40b176:	movzx  ecx,WORD PTR [r13+rbp*1+0x4]
  40b17c:	test   rcx,rcx
  40b17f:	je     40b1b9 <test_mixed_type_union@@Base+0x549>
  40b181:	mov    cl,BYTE PTR [r13+rcx*1+0x0]
  40b186:	test   cl,cl
  40b188:	je     40b1b9 <test_mixed_type_union@@Base+0x549>
  40b18a:	cmp    cl,0x8
  40b18d:	jne    40b1b9 <test_mixed_type_union@@Base+0x549>
  40b18f:	add    rax,r13
  40b192:	mov    ecx,DWORD PTR [rax]
  40b194:	movzx  eax,WORD PTR [rax+rcx*1]
  40b198:	cmp    ax,0x14
  40b19c:	jb     40b1e3 <test_mixed_type_union@@Base+0x573>
  40b19e:	lea    rdi,[rip+0xcf17]        # 4180bc <_IO_stdin_used@@Base+0x30bc>
  40b1a5:	jmp    40b1c0 <test_mixed_type_union@@Base+0x550>
  40b1a7:	lea    rdi,[rip+0xccf2]        # 417ea0 <_IO_stdin_used@@Base+0x2ea0>
  40b1ae:	jmp    40b1c0 <test_mixed_type_union@@Base+0x550>
  40b1b0:	lea    rdi,[rip+0xcd12]        # 417ec9 <_IO_stdin_used@@Base+0x2ec9>
  40b1b7:	jmp    40b1c0 <test_mixed_type_union@@Base+0x550>
  40b1b9:	lea    rdi,[rip+0xcf23]        # 4180e3 <_IO_stdin_used@@Base+0x30e3>
  40b1c0:	call   404060 <puts@plt>
  40b1c5:	mov    ebp,0xffffffff
  40b1ca:	mov    rdi,rbx
  40b1cd:	call   412740 <flatcc_builder_aligned_free@@Base>
  40b1d2:	mov    eax,ebp
  40b1d4:	add    rsp,0x8
  40b1d8:	pop    rbx
  40b1d9:	pop    r12
  40b1db:	pop    r13
  40b1dd:	pop    r14
  40b1df:	pop    r15
  40b1e1:	pop    rbp
  40b1e2:	ret    
  40b1e3:	cmp    ax,0x13
  40b1e7:	jne    40b2e8 <test_mixed_type_union@@Base+0x678>
  40b1ed:	movzx  eax,WORD PTR [r13+rbp*1+0x10]
  40b1f3:	test   rax,rax
  40b1f6:	je     40b2f4 <test_mixed_type_union@@Base+0x684>
  40b1fc:	cmp    BYTE PTR [r13+rax*1+0x0],0x8
  40b202:	jne    40b2f4 <test_mixed_type_union@@Base+0x684>
  40b208:	movzx  eax,WORD PTR [r13+rbp*1+0x12]
  40b20e:	test   rax,rax
  40b211:	je     40b300 <test_mixed_type_union@@Base+0x690>
  40b217:	lea    rcx,[rax+r13*1]
  40b21b:	mov    eax,DWORD PTR [r13+rax*1+0x0]
  40b220:	cmp    WORD PTR [rax+rcx*1],0x16
  40b225:	jne    40b30c <test_mixed_type_union@@Base+0x69c>
  40b22b:	movzx  eax,WORD PTR [r13+rbp*1+0x8]
  40b231:	test   rax,rax
  40b234:	je     40b318 <test_mixed_type_union@@Base+0x6a8>
  40b23a:	cmp    BYTE PTR [r13+rax*1+0x0],0x2
  40b240:	jne    40b318 <test_mixed_type_union@@Base+0x6a8>
  40b246:	movzx  eax,WORD PTR [r13+rbp*1+0xa]
  40b24c:	test   rax,rax
  40b24f:	je     40b324 <test_mixed_type_union@@Base+0x6b4>
  40b255:	lea    rcx,[rax+r13*1]
  40b259:	mov    edx,DWORD PTR [r13+rax*1+0x0]
  40b25e:	lea    rax,[rcx+rdx*1]
  40b262:	movsxd rcx,DWORD PTR [rdx+rcx*1]
  40b266:	mov    rdx,rax
  40b269:	sub    rdx,rcx
  40b26c:	cmp    WORD PTR [rdx],0x6
  40b270:	jb     40b324 <test_mixed_type_union@@Base+0x6b4>
  40b276:	neg    rcx
  40b279:	movzx  ecx,WORD PTR [rax+rcx*1+0x4]
  40b27e:	test   rcx,rcx
  40b281:	je     40b324 <test_mixed_type_union@@Base+0x6b4>
  40b287:	cmp    DWORD PTR [rax+rcx*1],0x2a
  40b28b:	jne    40b324 <test_mixed_type_union@@Base+0x6b4>
  40b291:	movzx  eax,WORD PTR [r13+rbp*1+0xc]
  40b297:	test   rax,rax
  40b29a:	je     40b330 <test_mixed_type_union@@Base+0x6c0>
  40b2a0:	cmp    BYTE PTR [r13+rax*1+0x0],0xb
  40b2a6:	jne    40b330 <test_mixed_type_union@@Base+0x6c0>
  40b2ac:	movzx  eax,WORD PTR [r13+rbp*1+0xe]
  40b2b2:	test   rax,rax
  40b2b5:	je     40b33c <test_mixed_type_union@@Base+0x6cc>
  40b2bb:	lea    rcx,[rax+r13*1]
  40b2bf:	mov    eax,DWORD PTR [r13+rax*1+0x0]
  40b2c4:	lea    r14,[rax+rcx*1]
  40b2c8:	add    r14,0x4
  40b2cc:	lea    rsi,[rip+0xa722]        # 4159f5 <_IO_stdin_used@@Base+0x9f5>
  40b2d3:	mov    rdi,r14
  40b2d6:	call   4040e0 <strcmp@plt>
  40b2db:	test   eax,eax
  40b2dd:	je     40b348 <test_mixed_type_union@@Base+0x6d8>
  40b2df:	lea    rdi,[rip+0xa77c]        # 415a62 <_IO_stdin_used@@Base+0xa62>
  40b2e6:	jmp    40b362 <test_mixed_type_union@@Base+0x6f2>
  40b2e8:	lea    rdi,[rip+0xcd9f]        # 41808e <_IO_stdin_used@@Base+0x308e>
  40b2ef:	jmp    40b1c0 <test_mixed_type_union@@Base+0x550>
  40b2f4:	lea    rdi,[rip+0xcd5f]        # 41805a <_IO_stdin_used@@Base+0x305a>
  40b2fb:	jmp    40b1c0 <test_mixed_type_union@@Base+0x550>
  40b300:	lea    rdi,[rip+0xcbed]        # 417ef4 <_IO_stdin_used@@Base+0x2ef4>
  40b307:	jmp    40b1c0 <test_mixed_type_union@@Base+0x550>
  40b30c:	lea    rdi,[rip+0xcd18]        # 41802b <_IO_stdin_used@@Base+0x302b>
  40b313:	jmp    40b1c0 <test_mixed_type_union@@Base+0x550>
  40b318:	lea    rdi,[rip+0xccf5]        # 418014 <_IO_stdin_used@@Base+0x3014>
  40b31f:	jmp    40b1c0 <test_mixed_type_union@@Base+0x550>
  40b324:	lea    rdi,[rip+0xcbf8]        # 417f23 <_IO_stdin_used@@Base+0x2f23>
  40b32b:	jmp    40b1c0 <test_mixed_type_union@@Base+0x550>
  40b330:	lea    rdi,[rip+0xccc7]        # 417ffe <_IO_stdin_used@@Base+0x2ffe>
  40b337:	jmp    40b1c0 <test_mixed_type_union@@Base+0x550>
  40b33c:	lea    rdi,[rip+0xcc02]        # 417f45 <_IO_stdin_used@@Base+0x2f45>
  40b343:	jmp    40b1c0 <test_mixed_type_union@@Base+0x550>
  40b348:	lea    rsi,[rip+0xa6a6]        # 4159f5 <_IO_stdin_used@@Base+0x9f5>
  40b34f:	mov    rdi,r14
  40b352:	call   4040e0 <strcmp@plt>
  40b357:	test   eax,eax
  40b359:	je     40b371 <test_mixed_type_union@@Base+0x701>
  40b35b:	lea    rdi,[rip+0xa724]        # 415a86 <_IO_stdin_used@@Base+0xa86>
  40b362:	mov    rsi,r14
  40b365:	xor    eax,eax
  40b367:	call   404080 <printf@plt>
  40b36c:	jmp    40b1c5 <test_mixed_type_union@@Base+0x555>
  40b371:	movzx  eax,WORD PTR [r13+rbp*1+0x14]
  40b377:	test   rax,rax
  40b37a:	je     40b38f <test_mixed_type_union@@Base+0x71f>
  40b37c:	lea    rcx,[rax+r13*1]
  40b380:	mov    edx,DWORD PTR [r13+rax*1+0x0]
  40b385:	lea    r14,[rdx+rcx*1]
  40b389:	add    r14,0x4
  40b38d:	jmp    40b392 <test_mixed_type_union@@Base+0x722>
  40b38f:	xor    r14d,r14d
  40b392:	lea    rcx,[r15+r13*1]
  40b396:	mov    edx,DWORD PTR [r13+r15*1+0x0]
  40b39b:	add    rcx,rdx
  40b39e:	add    rcx,0x4
  40b3a2:	test   r14,r14
  40b3a5:	je     40b3ad <test_mixed_type_union@@Base+0x73d>
  40b3a7:	mov    edx,DWORD PTR [r14-0x4]
  40b3ab:	jmp    40b3af <test_mixed_type_union@@Base+0x73f>
  40b3ad:	xor    edx,edx
  40b3af:	mov    esi,DWORD PTR [rcx-0x4]
  40b3b2:	cmp    rdx,rsi
  40b3b5:	jne    40b73c <test_mixed_type_union@@Base+0xacc>
  40b3bb:	test   r14,r14
  40b3be:	je     40b71d <test_mixed_type_union@@Base+0xaad>
  40b3c4:	mov    r15d,DWORD PTR [r14-0x4]
  40b3c8:	test   r15d,r15d
  40b3cb:	je     40b71d <test_mixed_type_union@@Base+0xaad>
  40b3d1:	mov    dl,BYTE PTR [r14]
  40b3d4:	test   dl,dl
  40b3d6:	je     40b515 <test_mixed_type_union@@Base+0x8a5>
  40b3dc:	mov    r12d,DWORD PTR [rcx-0x4]
  40b3e0:	test   r12d,r12d
  40b3e3:	je     40b75b <test_mixed_type_union@@Base+0xaeb>
  40b3e9:	cmp    dl,0x8
  40b3ec:	jne    40b515 <test_mixed_type_union@@Base+0x8a5>
  40b3f2:	cmp    r15d,0x1
  40b3f6:	jbe    40b71d <test_mixed_type_union@@Base+0xaad>
  40b3fc:	mov    dl,BYTE PTR [r14+0x1]
  40b400:	test   dl,dl
  40b402:	je     40b51e <test_mixed_type_union@@Base+0x8ae>
  40b408:	cmp    r12d,0x1
  40b40c:	jbe    40b75b <test_mixed_type_union@@Base+0xaeb>
  40b412:	cmp    dl,0x2
  40b415:	jne    40b51e <test_mixed_type_union@@Base+0x8ae>
  40b41b:	lea    rsi,[rcx+0x4]
  40b41f:	mov    edi,DWORD PTR [rsi]
  40b421:	lea    rdx,[rsi+rdi*1]
  40b425:	movsxd rsi,DWORD PTR [rsi+rdi*1]
  40b429:	mov    rdi,rdx
  40b42c:	sub    rdi,rsi
  40b42f:	cmp    WORD PTR [rdi],0x6
  40b433:	jb     40b527 <test_mixed_type_union@@Base+0x8b7>
  40b439:	neg    rsi
  40b43c:	movzx  esi,WORD PTR [rdx+rsi*1+0x4]
  40b441:	test   rsi,rsi
  40b444:	je     40b527 <test_mixed_type_union@@Base+0x8b7>
  40b44a:	cmp    DWORD PTR [rdx+rsi*1],0x2a
  40b44e:	jne    40b527 <test_mixed_type_union@@Base+0x8b7>
  40b454:	cmp    r15d,0x2
  40b458:	jbe    40b71d <test_mixed_type_union@@Base+0xaad>
  40b45e:	mov    dl,BYTE PTR [r14+0x2]
  40b462:	test   dl,dl
  40b464:	je     40b53a <test_mixed_type_union@@Base+0x8ca>
  40b46a:	cmp    r12d,0x2
  40b46e:	jbe    40b75b <test_mixed_type_union@@Base+0xaeb>
  40b474:	cmp    dl,0x2
  40b477:	jne    40b53a <test_mixed_type_union@@Base+0x8ca>
  40b47d:	lea    rsi,[rcx+0x8]
  40b481:	mov    edi,DWORD PTR [rsi]
  40b483:	lea    rdx,[rsi+rdi*1]
  40b487:	movsxd rsi,DWORD PTR [rsi+rdi*1]
  40b48b:	mov    rdi,rdx
  40b48e:	sub    rdi,rsi
  40b491:	cmp    WORD PTR [rdi],0x6
  40b495:	jb     40b543 <test_mixed_type_union@@Base+0x8d3>
  40b49b:	neg    rsi
  40b49e:	movzx  esi,WORD PTR [rdx+rsi*1+0x4]
  40b4a3:	test   rsi,rsi
  40b4a6:	je     40b543 <test_mixed_type_union@@Base+0x8d3>
  40b4ac:	cmp    DWORD PTR [rdx+rsi*1],0x1
  40b4b0:	jne    40b543 <test_mixed_type_union@@Base+0x8d3>
  40b4b6:	test   ax,ax
  40b4b9:	je     40b77a <test_mixed_type_union@@Base+0xb0a>
  40b4bf:	lea    rdx,[rax+r13*1]
  40b4c3:	mov    eax,DWORD PTR [r13+rax*1+0x0]
  40b4c8:	cmp    DWORD PTR [rax+rdx*1],0x3
  40b4cc:	jbe    40b77a <test_mixed_type_union@@Base+0xb0a>
  40b4d2:	cmp    BYTE PTR [rdx+rax*1+0x7],0xb
  40b4d7:	jne    40b5a9 <test_mixed_type_union@@Base+0x939>
  40b4dd:	cmp    r12d,0x3
  40b4e1:	jbe    40b799 <test_mixed_type_union@@Base+0xb29>
  40b4e7:	mov    eax,DWORD PTR [rcx+0xc]
  40b4ea:	lea    rbp,[rcx+rax*1]
  40b4ee:	add    rbp,0x10
  40b4f2:	lea    rsi,[rip+0xa507]        # 415a00 <_IO_stdin_used@@Base+0xa00>
  40b4f9:	mov    rdi,rbp
  40b4fc:	call   4040e0 <strcmp@plt>
  40b501:	test   eax,eax
  40b503:	je     40b5b5 <test_mixed_type_union@@Base+0x945>
  40b509:	lea    rdi,[rip+0xca4f]        # 417f5f <_IO_stdin_used@@Base+0x2f5f>
  40b510:	jmp    40b1c0 <test_mixed_type_union@@Base+0x550>
  40b515:	lea    rdi,[rip+0xa597]        # 415ab3 <_IO_stdin_used@@Base+0xab3>
  40b51c:	jmp    40b52e <test_mixed_type_union@@Base+0x8be>
  40b51e:	lea    rdi,[rip+0xa5b3]        # 415ad8 <_IO_stdin_used@@Base+0xad8>
  40b525:	jmp    40b52e <test_mixed_type_union@@Base+0x8be>
  40b527:	lea    rdi,[rip+0xa5cd]        # 415afb <_IO_stdin_used@@Base+0xafb>
  40b52e:	xor    eax,eax
  40b530:	call   404080 <printf@plt>
  40b535:	jmp    40b1c5 <test_mixed_type_union@@Base+0x555>
  40b53a:	lea    rdi,[rip+0xa5ec]        # 415b2d <_IO_stdin_used@@Base+0xb2d>
  40b541:	jmp    40b52e <test_mixed_type_union@@Base+0x8be>
  40b543:	lea    rdi,[rip+0xa605]        # 415b4f <_IO_stdin_used@@Base+0xb4f>
  40b54a:	jmp    40b52e <test_mixed_type_union@@Base+0x8be>
  40b54c:	lea    rdi,[rip+0xb6dd]        # 416c30 <_IO_stdin_used@@Base+0x1c30>
  40b553:	lea    rsi,[rip+0xaa50]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  40b55a:	lea    rcx,[rip+0xb756]        # 416cb7 <_IO_stdin_used@@Base+0x1cb7>
  40b561:	mov    edx,0xf1
  40b566:	call   4040a0 <__assert_fail@plt>
  40b56b:	lea    rdi,[rip+0xa89f]        # 415e11 <_IO_stdin_used@@Base+0xe11>
  40b572:	lea    rsi,[rip+0xa8be]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40b579:	lea    rcx,[rip+0xb776]        # 416cf6 <_IO_stdin_used@@Base+0x1cf6>
  40b580:	mov    edx,0x333
  40b585:	call   4040a0 <__assert_fail@plt>
  40b58a:	lea    rdi,[rip+0xb5ca]        # 416b5b <_IO_stdin_used@@Base+0x1b5b>
  40b591:	lea    rsi,[rip+0xaa12]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  40b598:	lea    rcx,[rip+0xb64c]        # 416beb <_IO_stdin_used@@Base+0x1beb>
  40b59f:	mov    edx,0xef
  40b5a4:	call   4040a0 <__assert_fail@plt>
  40b5a9:	lea    rdi,[rip+0xca20]        # 417fd0 <_IO_stdin_used@@Base+0x2fd0>
  40b5b0:	jmp    40b1c0 <test_mixed_type_union@@Base+0x550>
  40b5b5:	cmp    r15d,0x3
  40b5b9:	jbe    40b71d <test_mixed_type_union@@Base+0xaad>
  40b5bf:	cmp    BYTE PTR [r14+0x3],0xb
  40b5c4:	jne    40b5e5 <test_mixed_type_union@@Base+0x975>
  40b5c6:	lea    rsi,[rip+0xa433]        # 415a00 <_IO_stdin_used@@Base+0xa00>
  40b5cd:	mov    rdi,rbp
  40b5d0:	call   4040e0 <strcmp@plt>
  40b5d5:	test   eax,eax
  40b5d7:	je     40b5f1 <test_mixed_type_union@@Base+0x981>
  40b5d9:	lea    rdi,[rip+0xc9b2]        # 417f92 <_IO_stdin_used@@Base+0x2f92>
  40b5e0:	jmp    40b1c0 <test_mixed_type_union@@Base+0x550>
  40b5e5:	lea    rdi,[rip+0xa594]        # 415b80 <_IO_stdin_used@@Base+0xb80>
  40b5ec:	jmp    40b52e <test_mixed_type_union@@Base+0x8be>
  40b5f1:	cmp    r15d,0x4
  40b5f5:	jbe    40b71d <test_mixed_type_union@@Base+0xaad>
  40b5fb:	mov    al,BYTE PTR [r14+0x4]
  40b5ff:	test   al,al
  40b601:	je     40b6e1 <test_mixed_type_union@@Base+0xa71>
  40b607:	cmp    r12d,0x4
  40b60b:	jbe    40b75b <test_mixed_type_union@@Base+0xaeb>
  40b611:	cmp    al,0x9
  40b613:	jne    40b6e1 <test_mixed_type_union@@Base+0xa71>
  40b619:	cmp    r15d,0x5
  40b61d:	jbe    40b71d <test_mixed_type_union@@Base+0xaad>
  40b623:	mov    al,BYTE PTR [r14+0x5]
  40b627:	test   al,al
  40b629:	je     40b6ed <test_mixed_type_union@@Base+0xa7d>
  40b62f:	cmp    r12d,0x5
  40b633:	jbe    40b75b <test_mixed_type_union@@Base+0xaeb>
  40b639:	cmp    al,0x9
  40b63b:	jne    40b6ed <test_mixed_type_union@@Base+0xa7d>
  40b641:	cmp    r15d,0x6
  40b645:	jbe    40b71d <test_mixed_type_union@@Base+0xaad>
  40b64b:	mov    al,BYTE PTR [r14+0x6]
  40b64f:	test   al,al
  40b651:	je     40b6f9 <test_mixed_type_union@@Base+0xa89>
  40b657:	cmp    r12d,0x6
  40b65b:	jbe    40b75b <test_mixed_type_union@@Base+0xaeb>
  40b661:	cmp    al,0x9
  40b663:	jne    40b6f9 <test_mixed_type_union@@Base+0xa89>
  40b669:	cmp    r15d,0x7
  40b66d:	jbe    40b71d <test_mixed_type_union@@Base+0xaad>
  40b673:	mov    al,BYTE PTR [r14+0x7]
  40b677:	test   al,al
  40b679:	je     40b705 <test_mixed_type_union@@Base+0xa95>
  40b67f:	cmp    r12d,0x7
  40b683:	jbe    40b75b <test_mixed_type_union@@Base+0xaeb>
  40b689:	cmp    al,0x9
  40b68b:	jne    40b705 <test_mixed_type_union@@Base+0xa95>
  40b68d:	cmp    r15d,0x8
  40b691:	jbe    40b71d <test_mixed_type_union@@Base+0xaad>
  40b697:	mov    al,BYTE PTR [r14+0x8]
  40b69b:	test   al,al
  40b69d:	je     40b711 <test_mixed_type_union@@Base+0xaa1>
  40b69f:	cmp    r12d,0x8
  40b6a3:	jbe    40b75b <test_mixed_type_union@@Base+0xaeb>
  40b6a9:	cmp    al,0xb
  40b6ab:	jne    40b711 <test_mixed_type_union@@Base+0xaa1>
  40b6ad:	cmp    r15d,0x9
  40b6b1:	jbe    40b71d <test_mixed_type_union@@Base+0xaad>
  40b6b3:	mov    al,BYTE PTR [r14+0x9]
  40b6b7:	test   al,al
  40b6b9:	je     40b711 <test_mixed_type_union@@Base+0xaa1>
  40b6bb:	cmp    r12d,0x9
  40b6bf:	jbe    40b75b <test_mixed_type_union@@Base+0xaeb>
  40b6c5:	cmp    al,0xb
  40b6c7:	jne    40b711 <test_mixed_type_union@@Base+0xaa1>
  40b6c9:	xor    ebp,ebp
  40b6cb:	cmp    r15d,0xa
  40b6cf:	je     40b1ca <test_mixed_type_union@@Base+0x55a>
  40b6d5:	lea    rdi,[rip+0xa593]        # 415c6f <_IO_stdin_used@@Base+0xc6f>
  40b6dc:	jmp    40b52e <test_mixed_type_union@@Base+0x8be>
  40b6e1:	lea    rdi,[rip+0xa4d0]        # 415bb8 <_IO_stdin_used@@Base+0xbb8>
  40b6e8:	jmp    40b52e <test_mixed_type_union@@Base+0x8be>
  40b6ed:	lea    rdi,[rip+0xa4e6]        # 415bda <_IO_stdin_used@@Base+0xbda>
  40b6f4:	jmp    40b52e <test_mixed_type_union@@Base+0x8be>
  40b6f9:	lea    rdi,[rip+0xa4fc]        # 415bfc <_IO_stdin_used@@Base+0xbfc>
  40b700:	jmp    40b52e <test_mixed_type_union@@Base+0x8be>
  40b705:	lea    rdi,[rip+0xa514]        # 415c20 <_IO_stdin_used@@Base+0xc20>
  40b70c:	jmp    40b52e <test_mixed_type_union@@Base+0x8be>
  40b711:	lea    rdi,[rip+0xa52b]        # 415c43 <_IO_stdin_used@@Base+0xc43>
  40b718:	jmp    40b52e <test_mixed_type_union@@Base+0x8be>
  40b71d:	lea    rdi,[rip+0xb417]        # 416b3b <_IO_stdin_used@@Base+0x1b3b>
  40b724:	lea    rsi,[rip+0xa70c]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40b72b:	lea    rcx,[rip+0xb65b]        # 416d8d <_IO_stdin_used@@Base+0x1d8d>
  40b732:	mov    edx,0x305
  40b737:	call   4040a0 <__assert_fail@plt>
  40b73c:	lea    rdi,[rip+0xb337]        # 416a7a <_IO_stdin_used@@Base+0x1a7a>
  40b743:	lea    rsi,[rip+0xa6ed]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40b74a:	lea    rcx,[rip+0xb5e8]        # 416d39 <_IO_stdin_used@@Base+0x1d39>
  40b751:	mov    edx,0x337
  40b756:	call   4040a0 <__assert_fail@plt>
  40b75b:	lea    rdi,[rip+0xac62]        # 4163c4 <_IO_stdin_used@@Base+0x13c4>
  40b762:	lea    rsi,[rip+0xac92]        # 4163fb <_IO_stdin_used@@Base+0x13fb>
  40b769:	lea    rcx,[rip+0xb2b6]        # 416a26 <_IO_stdin_used@@Base+0x1a26>
  40b770:	mov    edx,0x75
  40b775:	call   4040a0 <__assert_fail@plt>
  40b77a:	lea    rdi,[rip+0xac43]        # 4163c4 <_IO_stdin_used@@Base+0x13c4>
  40b781:	lea    rsi,[rip+0xac73]        # 4163fb <_IO_stdin_used@@Base+0x13fb>
  40b788:	lea    rcx,[rip+0xb23a]        # 4169c9 <_IO_stdin_used@@Base+0x19c9>
  40b78f:	mov    edx,0x195
  40b794:	call   4040a0 <__assert_fail@plt>
  40b799:	lea    rdi,[rip+0xac24]        # 4163c4 <_IO_stdin_used@@Base+0x13c4>
  40b7a0:	lea    rsi,[rip+0xac54]        # 4163fb <_IO_stdin_used@@Base+0x13fb>
  40b7a7:	lea    rcx,[rip+0xb63f]        # 416ded <_IO_stdin_used@@Base+0x1ded>
  40b7ae:	mov    edx,0x77
  40b7b3:	call   4040a0 <__assert_fail@plt>
  40b7b8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040b7c0 <test_add_set_defaults@@Base>:
  40b7c0:	push   rbp
  40b7c1:	push   rbx
  40b7c2:	push   rax
  40b7c3:	mov    rbx,rdi
  40b7c6:	call   40e0f0 <flatcc_builder_reset@@Base>
  40b7cb:	lea    rsi,[rip+0x9976]        # 415148 <_IO_stdin_used@@Base+0x148>
  40b7d2:	mov    rdi,rbx
  40b7d5:	xor    edx,edx
  40b7d7:	xor    ecx,ecx
  40b7d9:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  40b7de:	test   eax,eax
  40b7e0:	jne    40b7ef <test_add_set_defaults@@Base+0x2f>
  40b7e2:	mov    rdi,rbx
  40b7e5:	mov    esi,0x24
  40b7ea:	call   40ff20 <flatcc_builder_start_table@@Base>
  40b7ef:	lea    rsi,[rip+0x9996]        # 41518c <_IO_stdin_used@@Base+0x18c>
  40b7f6:	mov    rdi,rbx
  40b7f9:	call   412170 <flatcc_builder_create_string_str@@Base>
  40b7fe:	test   eax,eax
  40b800:	je     40b818 <test_add_set_defaults@@Base+0x58>
  40b802:	mov    ebp,eax
  40b804:	mov    rdi,rbx
  40b807:	mov    esi,0x3
  40b80c:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40b811:	test   rax,rax
  40b814:	je     40b818 <test_add_set_defaults@@Base+0x58>
  40b816:	mov    DWORD PTR [rax],ebp
  40b818:	mov    edx,0x2
  40b81d:	mov    rdi,rbx
  40b820:	mov    esi,0x1
  40b825:	mov    ecx,0x2
  40b82a:	call   4112a0 <flatcc_builder_table_add@@Base>
  40b82f:	test   rax,rax
  40b832:	je     40b839 <test_add_set_defaults@@Base+0x79>
  40b834:	mov    WORD PTR [rax],0x64
  40b839:	lea    rsi,[rip+0x98f8]        # 415138 <_IO_stdin_used@@Base+0x138>
  40b840:	mov    rdi,rbx
  40b843:	mov    edx,0x1
  40b848:	call   4108c0 <flatcc_builder_check_required@@Base>
  40b84d:	test   eax,eax
  40b84f:	je     40ba7d <test_add_set_defaults@@Base+0x2bd>
  40b855:	mov    rdi,rbx
  40b858:	call   410930 <flatcc_builder_end_table@@Base>
  40b85d:	mov    rdi,rbx
  40b860:	mov    esi,eax
  40b862:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40b867:	mov    rsi,rsp
  40b86a:	mov    rdi,rbx
  40b86d:	call   4124d0 <flatcc_builder_get_direct_buffer@@Base>
  40b872:	test   rax,rax
  40b875:	je     40ba5e <test_add_set_defaults@@Base+0x29e>
  40b87b:	cmp    DWORD PTR [rax+0x4],0x534e4f4d
  40b882:	jne    40ba5e <test_add_set_defaults@@Base+0x29e>
  40b888:	mov    edx,DWORD PTR [rax]
  40b88a:	mov    rcx,rax
  40b88d:	add    rcx,rdx
  40b890:	movsxd rax,DWORD PTR [rax+rdx*1]
  40b894:	mov    rdx,rcx
  40b897:	sub    rdx,rax
  40b89a:	neg    rax
  40b89d:	movzx  edx,WORD PTR [rdx]
  40b8a0:	cmp    dx,0x9
  40b8a4:	jbe    40b8b7 <test_add_set_defaults@@Base+0xf7>
  40b8a6:	cmp    WORD PTR [rcx+rax*1+0x8],0x0
  40b8ac:	je     40b8bd <test_add_set_defaults@@Base+0xfd>
  40b8ae:	lea    rdi,[rip+0xc94c]        # 418201 <_IO_stdin_used@@Base+0x3201>
  40b8b5:	jmp    40b8e3 <test_add_set_defaults@@Base+0x123>
  40b8b7:	cmp    dx,0x8
  40b8bb:	jb     40b8dc <test_add_set_defaults@@Base+0x11c>
  40b8bd:	cmp    WORD PTR [rcx+rax*1+0x6],0x0
  40b8c3:	je     40b8dc <test_add_set_defaults@@Base+0x11c>
  40b8c5:	cmp    dx,0x12
  40b8c9:	jb     40b8f4 <test_add_set_defaults@@Base+0x134>
  40b8cb:	cmp    WORD PTR [rcx+rax*1+0x10],0x0
  40b8d1:	je     40b8f4 <test_add_set_defaults@@Base+0x134>
  40b8d3:	lea    rdi,[rip+0xc8f9]        # 4181d3 <_IO_stdin_used@@Base+0x31d3>
  40b8da:	jmp    40b8e3 <test_add_set_defaults@@Base+0x123>
  40b8dc:	lea    rdi,[rip+0xc81b]        # 4180fe <_IO_stdin_used@@Base+0x30fe>
  40b8e3:	call   404060 <puts@plt>
  40b8e8:	mov    eax,0xffffffff
  40b8ed:	add    rsp,0x8
  40b8f1:	pop    rbx
  40b8f2:	pop    rbp
  40b8f3:	ret    
  40b8f4:	mov    rdi,rbx
  40b8f7:	call   40e0f0 <flatcc_builder_reset@@Base>
  40b8fc:	lea    rsi,[rip+0x9845]        # 415148 <_IO_stdin_used@@Base+0x148>
  40b903:	mov    rdi,rbx
  40b906:	xor    edx,edx
  40b908:	xor    ecx,ecx
  40b90a:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  40b90f:	test   eax,eax
  40b911:	jne    40b920 <test_add_set_defaults@@Base+0x160>
  40b913:	mov    rdi,rbx
  40b916:	mov    esi,0x24
  40b91b:	call   40ff20 <flatcc_builder_start_table@@Base>
  40b920:	lea    rsi,[rip+0x9865]        # 41518c <_IO_stdin_used@@Base+0x18c>
  40b927:	mov    rdi,rbx
  40b92a:	call   412170 <flatcc_builder_create_string_str@@Base>
  40b92f:	test   eax,eax
  40b931:	je     40b949 <test_add_set_defaults@@Base+0x189>
  40b933:	mov    ebp,eax
  40b935:	mov    rdi,rbx
  40b938:	mov    esi,0x3
  40b93d:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40b942:	test   rax,rax
  40b945:	je     40b949 <test_add_set_defaults@@Base+0x189>
  40b947:	mov    DWORD PTR [rax],ebp
  40b949:	mov    edx,0x2
  40b94e:	mov    rdi,rbx
  40b951:	mov    esi,0x2
  40b956:	mov    ecx,0x2
  40b95b:	call   4112a0 <flatcc_builder_table_add@@Base>
  40b960:	test   rax,rax
  40b963:	je     40b96a <test_add_set_defaults@@Base+0x1aa>
  40b965:	mov    WORD PTR [rax],0x64
  40b96a:	mov    edx,0x2
  40b96f:	mov    rdi,rbx
  40b972:	mov    esi,0x1
  40b977:	mov    ecx,0x2
  40b97c:	call   4112a0 <flatcc_builder_table_add@@Base>
  40b981:	test   rax,rax
  40b984:	je     40b98b <test_add_set_defaults@@Base+0x1cb>
  40b986:	mov    WORD PTR [rax],0x64
  40b98b:	mov    edx,0x1
  40b990:	mov    rdi,rbx
  40b993:	mov    esi,0x6
  40b998:	mov    ecx,0x1
  40b99d:	call   4112a0 <flatcc_builder_table_add@@Base>
  40b9a2:	test   rax,rax
  40b9a5:	je     40b9aa <test_add_set_defaults@@Base+0x1ea>
  40b9a7:	mov    BYTE PTR [rax],0x8
  40b9aa:	lea    rsi,[rip+0x9787]        # 415138 <_IO_stdin_used@@Base+0x138>
  40b9b1:	mov    rdi,rbx
  40b9b4:	mov    edx,0x1
  40b9b9:	call   4108c0 <flatcc_builder_check_required@@Base>
  40b9be:	test   eax,eax
  40b9c0:	je     40ba7d <test_add_set_defaults@@Base+0x2bd>
  40b9c6:	mov    rdi,rbx
  40b9c9:	call   410930 <flatcc_builder_end_table@@Base>
  40b9ce:	mov    rdi,rbx
  40b9d1:	mov    esi,eax
  40b9d3:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40b9d8:	mov    rsi,rsp
  40b9db:	mov    rdi,rbx
  40b9de:	call   4124d0 <flatcc_builder_get_direct_buffer@@Base>
  40b9e3:	test   rax,rax
  40b9e6:	je     40ba5e <test_add_set_defaults@@Base+0x29e>
  40b9e8:	cmp    DWORD PTR [rax+0x4],0x534e4f4d
  40b9ef:	jne    40ba5e <test_add_set_defaults@@Base+0x29e>
  40b9f1:	mov    edx,DWORD PTR [rax]
  40b9f3:	mov    rcx,rax
  40b9f6:	add    rcx,rdx
  40b9f9:	movsxd rdx,DWORD PTR [rax+rdx*1]
  40b9fd:	mov    rax,rcx
  40ba00:	sub    rax,rdx
  40ba03:	movzx  eax,WORD PTR [rax]
  40ba06:	lea    rdi,[rip+0xc71e]        # 41812b <_IO_stdin_used@@Base+0x312b>
  40ba0d:	cmp    ax,0x9
  40ba11:	jbe    40b8e3 <test_add_set_defaults@@Base+0x123>
  40ba17:	neg    rdx
  40ba1a:	cmp    WORD PTR [rcx+rdx*1+0x8],0x0
  40ba20:	je     40b8e3 <test_add_set_defaults@@Base+0x123>
  40ba26:	cmp    WORD PTR [rcx+rdx*1+0x6],0x0
  40ba2c:	je     40ba52 <test_add_set_defaults@@Base+0x292>
  40ba2e:	lea    rdi,[rip+0xc768]        # 41819d <_IO_stdin_used@@Base+0x319d>
  40ba35:	cmp    ax,0x12
  40ba39:	jb     40b8e3 <test_add_set_defaults@@Base+0x123>
  40ba3f:	xor    eax,eax
  40ba41:	cmp    WORD PTR [rcx+rdx*1+0x10],0x0
  40ba47:	jne    40b8ed <test_add_set_defaults@@Base+0x12d>
  40ba4d:	jmp    40b8e3 <test_add_set_defaults@@Base+0x123>
  40ba52:	lea    rdi,[rip+0xc705]        # 41815e <_IO_stdin_used@@Base+0x315e>
  40ba59:	jmp    40b8e3 <test_add_set_defaults@@Base+0x123>
  40ba5e:	lea    rdi,[rip+0xa3ac]        # 415e11 <_IO_stdin_used@@Base+0xe11>
  40ba65:	lea    rsi,[rip+0xa3cb]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40ba6c:	lea    rcx,[rip+0xa440]        # 415eb3 <_IO_stdin_used@@Base+0xeb3>
  40ba73:	mov    edx,0x2b9
  40ba78:	call   4040a0 <__assert_fail@plt>
  40ba7d:	lea    rdi,[rip+0xa662]        # 4160e6 <_IO_stdin_used@@Base+0x10e6>
  40ba84:	lea    rsi,[rip+0xa51f]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  40ba8b:	lea    rcx,[rip+0xa6f6]        # 416188 <_IO_stdin_used@@Base+0x1188>
  40ba92:	mov    edx,0xeb
  40ba97:	call   4040a0 <__assert_fail@plt>
  40ba9c:	nop    DWORD PTR [rax+0x0]

000000000040baa0 <test_nested_buffer@@Base>:
  40baa0:	push   rbp
  40baa1:	push   r14
  40baa3:	push   rbx
  40baa4:	sub    rsp,0x10
  40baa8:	mov    rbx,rdi
  40baab:	call   40e0f0 <flatcc_builder_reset@@Base>
  40bab0:	lea    rsi,[rip+0x9691]        # 415148 <_IO_stdin_used@@Base+0x148>
  40bab7:	mov    rdi,rbx
  40baba:	xor    edx,edx
  40babc:	xor    ecx,ecx
  40babe:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  40bac3:	test   eax,eax
  40bac5:	jne    40bad4 <test_nested_buffer@@Base+0x34>
  40bac7:	mov    rdi,rbx
  40baca:	mov    esi,0x24
  40bacf:	call   40ff20 <flatcc_builder_start_table@@Base>
  40bad4:	lea    rsi,[rip+0x96b1]        # 41518c <_IO_stdin_used@@Base+0x18c>
  40badb:	mov    rdi,rbx
  40bade:	call   412170 <flatcc_builder_create_string_str@@Base>
  40bae3:	test   eax,eax
  40bae5:	je     40bafd <test_nested_buffer@@Base+0x5d>
  40bae7:	mov    ebp,eax
  40bae9:	mov    rdi,rbx
  40baec:	mov    esi,0x3
  40baf1:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40baf6:	test   rax,rax
  40baf9:	je     40bafd <test_nested_buffer@@Base+0x5d>
  40bafb:	mov    DWORD PTR [rax],ebp
  40bafd:	lea    rsi,[rip+0x9644]        # 415148 <_IO_stdin_used@@Base+0x148>
  40bb04:	mov    rdi,rbx
  40bb07:	xor    edx,edx
  40bb09:	xor    ecx,ecx
  40bb0b:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  40bb10:	test   eax,eax
  40bb12:	jne    40bb21 <test_nested_buffer@@Base+0x81>
  40bb14:	mov    rdi,rbx
  40bb17:	mov    esi,0x24
  40bb1c:	call   40ff20 <flatcc_builder_start_table@@Base>
  40bb21:	lea    rsi,[rip+0xa16d]        # 415c95 <_IO_stdin_used@@Base+0xc95>
  40bb28:	mov    rdi,rbx
  40bb2b:	call   412170 <flatcc_builder_create_string_str@@Base>
  40bb30:	test   eax,eax
  40bb32:	je     40bb4a <test_nested_buffer@@Base+0xaa>
  40bb34:	mov    ebp,eax
  40bb36:	mov    rdi,rbx
  40bb39:	mov    esi,0x3
  40bb3e:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40bb43:	test   rax,rax
  40bb46:	je     40bb4a <test_nested_buffer@@Base+0xaa>
  40bb48:	mov    DWORD PTR [rax],ebp
  40bb4a:	lea    rsi,[rip+0x95e7]        # 415138 <_IO_stdin_used@@Base+0x138>
  40bb51:	mov    rdi,rbx
  40bb54:	mov    edx,0x1
  40bb59:	call   4108c0 <flatcc_builder_check_required@@Base>
  40bb5e:	test   eax,eax
  40bb60:	je     40bd58 <test_nested_buffer@@Base+0x2b8>
  40bb66:	mov    rdi,rbx
  40bb69:	call   410930 <flatcc_builder_end_table@@Base>
  40bb6e:	mov    rdi,rbx
  40bb71:	mov    esi,eax
  40bb73:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40bb78:	test   eax,eax
  40bb7a:	je     40bb92 <test_nested_buffer@@Base+0xf2>
  40bb7c:	mov    ebp,eax
  40bb7e:	mov    rdi,rbx
  40bb81:	mov    esi,0xd
  40bb86:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40bb8b:	test   rax,rax
  40bb8e:	je     40bb92 <test_nested_buffer@@Base+0xf2>
  40bb90:	mov    DWORD PTR [rax],ebp
  40bb92:	mov    edx,0x2
  40bb97:	mov    rdi,rbx
  40bb9a:	mov    esi,0x2
  40bb9f:	mov    ecx,0x2
  40bba4:	call   4112a0 <flatcc_builder_table_add@@Base>
  40bba9:	test   rax,rax
  40bbac:	je     40bbb3 <test_nested_buffer@@Base+0x113>
  40bbae:	mov    WORD PTR [rax],0xa
  40bbb3:	lea    rsi,[rip+0x957e]        # 415138 <_IO_stdin_used@@Base+0x138>
  40bbba:	mov    rdi,rbx
  40bbbd:	mov    edx,0x1
  40bbc2:	call   4108c0 <flatcc_builder_check_required@@Base>
  40bbc7:	test   eax,eax
  40bbc9:	je     40bd58 <test_nested_buffer@@Base+0x2b8>
  40bbcf:	mov    rdi,rbx
  40bbd2:	call   410930 <flatcc_builder_end_table@@Base>
  40bbd7:	mov    rdi,rbx
  40bbda:	mov    esi,eax
  40bbdc:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40bbe1:	lea    rsi,[rsp+0x8]
  40bbe6:	mov    rdi,rbx
  40bbe9:	call   4124d0 <flatcc_builder_get_direct_buffer@@Base>
  40bbee:	mov    rbx,rax
  40bbf1:	mov    rdx,QWORD PTR [rsp+0x8]
  40bbf6:	mov    rax,QWORD PTR [rip+0x123fb]        # 41dff8 <stderr@GLIBC_2.2.5>
  40bbfd:	mov    rcx,QWORD PTR [rax]
  40bc00:	lea    rdi,[rip+0xa09e]        # 415ca5 <_IO_stdin_used@@Base+0xca5>
  40bc07:	mov    rsi,rbx
  40bc0a:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  40bc0f:	test   rbx,rbx
  40bc12:	je     40bd30 <test_nested_buffer@@Base+0x290>
  40bc18:	cmp    DWORD PTR [rbx+0x4],0x534e4f4d
  40bc1f:	jne    40bd30 <test_nested_buffer@@Base+0x290>
  40bc25:	mov    eax,DWORD PTR [rbx]
  40bc27:	mov    rbp,rbx
  40bc2a:	add    rbp,rax
  40bc2d:	movsxd rbx,DWORD PTR [rbx+rax*1]
  40bc31:	mov    rax,rbp
  40bc34:	sub    rax,rbx
  40bc37:	movzx  r14d,WORD PTR [rax]
  40bc3b:	cmp    r14w,0xb
  40bc40:	jbe    40bd39 <test_nested_buffer@@Base+0x299>
  40bc46:	neg    rbx
  40bc49:	movzx  eax,WORD PTR [rbp+rbx*1+0xa]
  40bc4e:	test   rax,rax
  40bc51:	je     40bd39 <test_nested_buffer@@Base+0x299>
  40bc57:	lea    rcx,[rax+rbp*1]
  40bc5b:	mov    eax,DWORD PTR [rbp+rax*1+0x0]
  40bc5f:	lea    rdi,[rax+rcx*1]
  40bc63:	add    rdi,0x4
  40bc67:	lea    rsi,[rip+0x951e]        # 41518c <_IO_stdin_used@@Base+0x18c>
  40bc6e:	call   4040e0 <strcmp@plt>
  40bc73:	test   eax,eax
  40bc75:	je     40bc91 <test_nested_buffer@@Base+0x1f1>
  40bc77:	lea    rdi,[rip+0xc62d]        # 4182ab <_IO_stdin_used@@Base+0x32ab>
  40bc7e:	call   404060 <puts@plt>
  40bc83:	mov    eax,0xffffffff
  40bc88:	add    rsp,0x10
  40bc8c:	pop    rbx
  40bc8d:	pop    r14
  40bc8f:	pop    rbp
  40bc90:	ret    
  40bc91:	cmp    r14w,0x20
  40bc96:	jb     40bcc2 <test_nested_buffer@@Base+0x222>
  40bc98:	movzx  eax,WORD PTR [rbp+rbx*1+0x1e]
  40bc9d:	test   rax,rax
  40bca0:	je     40bcc2 <test_nested_buffer@@Base+0x222>
  40bca2:	lea    rcx,[rax+rbp*1]
  40bca6:	mov    eax,DWORD PTR [rbp+rax*1+0x0]
  40bcaa:	cmp    DWORD PTR [rax+rcx*1+0x8],0x534e4f4d
  40bcb2:	jne    40bcc2 <test_nested_buffer@@Base+0x222>
  40bcb4:	add    rcx,rax
  40bcb7:	add    rcx,0x4
  40bcbb:	mov    eax,DWORD PTR [rcx]
  40bcbd:	add    rax,rcx
  40bcc0:	jmp    40bcc4 <test_nested_buffer@@Base+0x224>
  40bcc2:	xor    eax,eax
  40bcc4:	movzx  ecx,WORD PTR [rbp+rbx*1+0x8]
  40bcc9:	lea    rdi,[rip+0xc5b7]        # 418287 <_IO_stdin_used@@Base+0x3287>
  40bcd0:	test   rcx,rcx
  40bcd3:	je     40bc7e <test_nested_buffer@@Base+0x1de>
  40bcd5:	cmp    WORD PTR [rbp+rcx*1+0x0],0xa
  40bcdb:	jne    40bc7e <test_nested_buffer@@Base+0x1de>
  40bcdd:	test   rax,rax
  40bce0:	je     40bd30 <test_nested_buffer@@Base+0x290>
  40bce2:	movsxd rcx,DWORD PTR [rax]
  40bce5:	mov    rdx,rax
  40bce8:	sub    rdx,rcx
  40bceb:	cmp    WORD PTR [rdx],0xc
  40bcef:	jb     40bd39 <test_nested_buffer@@Base+0x299>
  40bcf1:	neg    rcx
  40bcf4:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  40bcf9:	test   rcx,rcx
  40bcfc:	je     40bd39 <test_nested_buffer@@Base+0x299>
  40bcfe:	lea    rdx,[rax+rcx*1]
  40bd02:	mov    eax,DWORD PTR [rax+rcx*1]
  40bd05:	lea    rdi,[rax+rdx*1]
  40bd09:	add    rdi,0x4
  40bd0d:	lea    rsi,[rip+0x9f81]        # 415c95 <_IO_stdin_used@@Base+0xc95>
  40bd14:	call   4040e0 <strcmp@plt>
  40bd19:	test   eax,eax
  40bd1b:	je     40bd29 <test_nested_buffer@@Base+0x289>
  40bd1d:	lea    rdi,[rip+0xc546]        # 41826a <_IO_stdin_used@@Base+0x326a>
  40bd24:	jmp    40bc7e <test_nested_buffer@@Base+0x1de>
  40bd29:	xor    eax,eax
  40bd2b:	jmp    40bc88 <test_nested_buffer@@Base+0x1e8>
  40bd30:	lea    rdi,[rip+0xa0da]        # 415e11 <_IO_stdin_used@@Base+0xe11>
  40bd37:	jmp    40bd40 <test_nested_buffer@@Base+0x2a0>
  40bd39:	lea    rdi,[rip+0xa60a]        # 41634a <_IO_stdin_used@@Base+0x134a>
  40bd40:	lea    rsi,[rip+0xa0f0]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40bd47:	lea    rcx,[rip+0xa5ab]        # 4162f9 <_IO_stdin_used@@Base+0x12f9>
  40bd4e:	mov    edx,0x2bb
  40bd53:	call   4040a0 <__assert_fail@plt>
  40bd58:	lea    rdi,[rip+0xa387]        # 4160e6 <_IO_stdin_used@@Base+0x10e6>
  40bd5f:	lea    rsi,[rip+0xa244]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  40bd66:	lea    rcx,[rip+0xa41b]        # 416188 <_IO_stdin_used@@Base+0x1188>
  40bd6d:	mov    edx,0xeb
  40bd72:	call   4040a0 <__assert_fail@plt>
  40bd77:	nop    WORD PTR [rax+rax*1+0x0]

000000000040bd80 <test_nested_buffer_first@@Base>:
  40bd80:	push   rbp
  40bd81:	push   r14
  40bd83:	push   rbx
  40bd84:	sub    rsp,0x10
  40bd88:	mov    rbx,rdi
  40bd8b:	call   40e0f0 <flatcc_builder_reset@@Base>
  40bd90:	lea    rsi,[rip+0x93b1]        # 415148 <_IO_stdin_used@@Base+0x148>
  40bd97:	mov    rdi,rbx
  40bd9a:	xor    edx,edx
  40bd9c:	xor    ecx,ecx
  40bd9e:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  40bda3:	test   eax,eax
  40bda5:	jne    40bdb4 <test_nested_buffer_first@@Base+0x34>
  40bda7:	mov    rdi,rbx
  40bdaa:	mov    esi,0x24
  40bdaf:	call   40ff20 <flatcc_builder_start_table@@Base>
  40bdb4:	lea    rsi,[rip+0x938d]        # 415148 <_IO_stdin_used@@Base+0x148>
  40bdbb:	mov    rdi,rbx
  40bdbe:	xor    edx,edx
  40bdc0:	xor    ecx,ecx
  40bdc2:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  40bdc7:	test   eax,eax
  40bdc9:	jne    40bdd8 <test_nested_buffer_first@@Base+0x58>
  40bdcb:	mov    rdi,rbx
  40bdce:	mov    esi,0x24
  40bdd3:	call   40ff20 <flatcc_builder_start_table@@Base>
  40bdd8:	lea    rsi,[rip+0x9eb6]        # 415c95 <_IO_stdin_used@@Base+0xc95>
  40bddf:	mov    rdi,rbx
  40bde2:	call   412170 <flatcc_builder_create_string_str@@Base>
  40bde7:	test   eax,eax
  40bde9:	je     40be01 <test_nested_buffer_first@@Base+0x81>
  40bdeb:	mov    ebp,eax
  40bded:	mov    rdi,rbx
  40bdf0:	mov    esi,0x3
  40bdf5:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40bdfa:	test   rax,rax
  40bdfd:	je     40be01 <test_nested_buffer_first@@Base+0x81>
  40bdff:	mov    DWORD PTR [rax],ebp
  40be01:	lea    rsi,[rip+0x9330]        # 415138 <_IO_stdin_used@@Base+0x138>
  40be08:	mov    rdi,rbx
  40be0b:	mov    edx,0x1
  40be10:	call   4108c0 <flatcc_builder_check_required@@Base>
  40be15:	test   eax,eax
  40be17:	je     40c038 <test_nested_buffer_first@@Base+0x2b8>
  40be1d:	mov    rdi,rbx
  40be20:	call   410930 <flatcc_builder_end_table@@Base>
  40be25:	mov    rdi,rbx
  40be28:	mov    esi,eax
  40be2a:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40be2f:	test   eax,eax
  40be31:	je     40be49 <test_nested_buffer_first@@Base+0xc9>
  40be33:	mov    ebp,eax
  40be35:	mov    rdi,rbx
  40be38:	mov    esi,0xd
  40be3d:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40be42:	test   rax,rax
  40be45:	je     40be49 <test_nested_buffer_first@@Base+0xc9>
  40be47:	mov    DWORD PTR [rax],ebp
  40be49:	mov    edx,0x2
  40be4e:	mov    rdi,rbx
  40be51:	mov    esi,0x2
  40be56:	mov    ecx,0x2
  40be5b:	call   4112a0 <flatcc_builder_table_add@@Base>
  40be60:	test   rax,rax
  40be63:	je     40be6a <test_nested_buffer_first@@Base+0xea>
  40be65:	mov    WORD PTR [rax],0xa
  40be6a:	lea    rsi,[rip+0x931b]        # 41518c <_IO_stdin_used@@Base+0x18c>
  40be71:	mov    rdi,rbx
  40be74:	call   412170 <flatcc_builder_create_string_str@@Base>
  40be79:	test   eax,eax
  40be7b:	je     40be93 <test_nested_buffer_first@@Base+0x113>
  40be7d:	mov    ebp,eax
  40be7f:	mov    rdi,rbx
  40be82:	mov    esi,0x3
  40be87:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40be8c:	test   rax,rax
  40be8f:	je     40be93 <test_nested_buffer_first@@Base+0x113>
  40be91:	mov    DWORD PTR [rax],ebp
  40be93:	lea    rsi,[rip+0x929e]        # 415138 <_IO_stdin_used@@Base+0x138>
  40be9a:	mov    rdi,rbx
  40be9d:	mov    edx,0x1
  40bea2:	call   4108c0 <flatcc_builder_check_required@@Base>
  40bea7:	test   eax,eax
  40bea9:	je     40c038 <test_nested_buffer_first@@Base+0x2b8>
  40beaf:	mov    rdi,rbx
  40beb2:	call   410930 <flatcc_builder_end_table@@Base>
  40beb7:	mov    rdi,rbx
  40beba:	mov    esi,eax
  40bebc:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40bec1:	lea    rsi,[rsp+0x8]
  40bec6:	mov    rdi,rbx
  40bec9:	call   4124d0 <flatcc_builder_get_direct_buffer@@Base>
  40bece:	mov    rbx,rax
  40bed1:	mov    rdx,QWORD PTR [rsp+0x8]
  40bed6:	mov    rax,QWORD PTR [rip+0x1211b]        # 41dff8 <stderr@GLIBC_2.2.5>
  40bedd:	mov    rcx,QWORD PTR [rax]
  40bee0:	lea    rdi,[rip+0x9dbe]        # 415ca5 <_IO_stdin_used@@Base+0xca5>
  40bee7:	mov    rsi,rbx
  40beea:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  40beef:	test   rbx,rbx
  40bef2:	je     40c010 <test_nested_buffer_first@@Base+0x290>
  40bef8:	cmp    DWORD PTR [rbx+0x4],0x534e4f4d
  40beff:	jne    40c010 <test_nested_buffer_first@@Base+0x290>
  40bf05:	mov    eax,DWORD PTR [rbx]
  40bf07:	mov    rbp,rbx
  40bf0a:	add    rbp,rax
  40bf0d:	movsxd rbx,DWORD PTR [rbx+rax*1]
  40bf11:	mov    rax,rbp
  40bf14:	sub    rax,rbx
  40bf17:	movzx  r14d,WORD PTR [rax]
  40bf1b:	cmp    r14w,0xb
  40bf20:	jbe    40c019 <test_nested_buffer_first@@Base+0x299>
  40bf26:	neg    rbx
  40bf29:	movzx  eax,WORD PTR [rbp+rbx*1+0xa]
  40bf2e:	test   rax,rax
  40bf31:	je     40c019 <test_nested_buffer_first@@Base+0x299>
  40bf37:	lea    rcx,[rax+rbp*1]
  40bf3b:	mov    eax,DWORD PTR [rbp+rax*1+0x0]
  40bf3f:	lea    rdi,[rax+rcx*1]
  40bf43:	add    rdi,0x4
  40bf47:	lea    rsi,[rip+0x923e]        # 41518c <_IO_stdin_used@@Base+0x18c>
  40bf4e:	call   4040e0 <strcmp@plt>
  40bf53:	test   eax,eax
  40bf55:	je     40bf71 <test_nested_buffer_first@@Base+0x1f1>
  40bf57:	lea    rdi,[rip+0xc34d]        # 4182ab <_IO_stdin_used@@Base+0x32ab>
  40bf5e:	call   404060 <puts@plt>
  40bf63:	mov    eax,0xffffffff
  40bf68:	add    rsp,0x10
  40bf6c:	pop    rbx
  40bf6d:	pop    r14
  40bf6f:	pop    rbp
  40bf70:	ret    
  40bf71:	cmp    r14w,0x20
  40bf76:	jb     40bfa2 <test_nested_buffer_first@@Base+0x222>
  40bf78:	movzx  eax,WORD PTR [rbp+rbx*1+0x1e]
  40bf7d:	test   rax,rax
  40bf80:	je     40bfa2 <test_nested_buffer_first@@Base+0x222>
  40bf82:	lea    rcx,[rax+rbp*1]
  40bf86:	mov    eax,DWORD PTR [rbp+rax*1+0x0]
  40bf8a:	cmp    DWORD PTR [rax+rcx*1+0x8],0x534e4f4d
  40bf92:	jne    40bfa2 <test_nested_buffer_first@@Base+0x222>
  40bf94:	add    rcx,rax
  40bf97:	add    rcx,0x4
  40bf9b:	mov    eax,DWORD PTR [rcx]
  40bf9d:	add    rax,rcx
  40bfa0:	jmp    40bfa4 <test_nested_buffer_first@@Base+0x224>
  40bfa2:	xor    eax,eax
  40bfa4:	movzx  ecx,WORD PTR [rbp+rbx*1+0x8]
  40bfa9:	lea    rdi,[rip+0xc2d7]        # 418287 <_IO_stdin_used@@Base+0x3287>
  40bfb0:	test   rcx,rcx
  40bfb3:	je     40bf5e <test_nested_buffer_first@@Base+0x1de>
  40bfb5:	cmp    WORD PTR [rbp+rcx*1+0x0],0xa
  40bfbb:	jne    40bf5e <test_nested_buffer_first@@Base+0x1de>
  40bfbd:	test   rax,rax
  40bfc0:	je     40c010 <test_nested_buffer_first@@Base+0x290>
  40bfc2:	movsxd rcx,DWORD PTR [rax]
  40bfc5:	mov    rdx,rax
  40bfc8:	sub    rdx,rcx
  40bfcb:	cmp    WORD PTR [rdx],0xc
  40bfcf:	jb     40c019 <test_nested_buffer_first@@Base+0x299>
  40bfd1:	neg    rcx
  40bfd4:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  40bfd9:	test   rcx,rcx
  40bfdc:	je     40c019 <test_nested_buffer_first@@Base+0x299>
  40bfde:	lea    rdx,[rax+rcx*1]
  40bfe2:	mov    eax,DWORD PTR [rax+rcx*1]
  40bfe5:	lea    rdi,[rax+rdx*1]
  40bfe9:	add    rdi,0x4
  40bfed:	lea    rsi,[rip+0x9ca1]        # 415c95 <_IO_stdin_used@@Base+0xc95>
  40bff4:	call   4040e0 <strcmp@plt>
  40bff9:	test   eax,eax
  40bffb:	je     40c009 <test_nested_buffer_first@@Base+0x289>
  40bffd:	lea    rdi,[rip+0xc266]        # 41826a <_IO_stdin_used@@Base+0x326a>
  40c004:	jmp    40bf5e <test_nested_buffer_first@@Base+0x1de>
  40c009:	xor    eax,eax
  40c00b:	jmp    40bf68 <test_nested_buffer_first@@Base+0x1e8>
  40c010:	lea    rdi,[rip+0x9dfa]        # 415e11 <_IO_stdin_used@@Base+0xe11>
  40c017:	jmp    40c020 <test_nested_buffer_first@@Base+0x2a0>
  40c019:	lea    rdi,[rip+0xa32a]        # 41634a <_IO_stdin_used@@Base+0x134a>
  40c020:	lea    rsi,[rip+0x9e10]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40c027:	lea    rcx,[rip+0xa2cb]        # 4162f9 <_IO_stdin_used@@Base+0x12f9>
  40c02e:	mov    edx,0x2bb
  40c033:	call   4040a0 <__assert_fail@plt>
  40c038:	lea    rdi,[rip+0xa0a7]        # 4160e6 <_IO_stdin_used@@Base+0x10e6>
  40c03f:	lea    rsi,[rip+0x9f64]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  40c046:	lea    rcx,[rip+0xa13b]        # 416188 <_IO_stdin_used@@Base+0x1188>
  40c04d:	mov    edx,0xeb
  40c052:	call   4040a0 <__assert_fail@plt>
  40c057:	nop    WORD PTR [rax+rax*1+0x0]

000000000040c060 <test_nested_buffer_using_nest@@Base>:
  40c060:	push   rbp
  40c061:	push   r14
  40c063:	push   rbx
  40c064:	sub    rsp,0x410
  40c06b:	mov    rbx,rdi
  40c06e:	call   40e0f0 <flatcc_builder_reset@@Base>
  40c073:	lea    rsi,[rip+0x90ce]        # 415148 <_IO_stdin_used@@Base+0x148>
  40c07a:	mov    rdi,rbx
  40c07d:	xor    edx,edx
  40c07f:	xor    ecx,ecx
  40c081:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  40c086:	test   eax,eax
  40c088:	jne    40c097 <test_nested_buffer_using_nest@@Base+0x37>
  40c08a:	mov    rdi,rbx
  40c08d:	mov    esi,0x24
  40c092:	call   40ff20 <flatcc_builder_start_table@@Base>
  40c097:	lea    rsi,[rip+0x9bf7]        # 415c95 <_IO_stdin_used@@Base+0xc95>
  40c09e:	mov    rdi,rbx
  40c0a1:	call   412170 <flatcc_builder_create_string_str@@Base>
  40c0a6:	test   eax,eax
  40c0a8:	je     40c0c0 <test_nested_buffer_using_nest@@Base+0x60>
  40c0aa:	mov    ebp,eax
  40c0ac:	mov    rdi,rbx
  40c0af:	mov    esi,0x3
  40c0b4:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40c0b9:	test   rax,rax
  40c0bc:	je     40c0c0 <test_nested_buffer_using_nest@@Base+0x60>
  40c0be:	mov    DWORD PTR [rax],ebp
  40c0c0:	mov    edx,0x2
  40c0c5:	mov    rdi,rbx
  40c0c8:	mov    esi,0x1
  40c0cd:	mov    ecx,0x2
  40c0d2:	call   4112a0 <flatcc_builder_table_add@@Base>
  40c0d7:	test   rax,rax
  40c0da:	je     40c0e1 <test_nested_buffer_using_nest@@Base+0x81>
  40c0dc:	mov    WORD PTR [rax],0x2a
  40c0e1:	lea    rsi,[rip+0x9050]        # 415138 <_IO_stdin_used@@Base+0x138>
  40c0e8:	mov    rdi,rbx
  40c0eb:	mov    edx,0x1
  40c0f0:	call   4108c0 <flatcc_builder_check_required@@Base>
  40c0f5:	test   eax,eax
  40c0f7:	je     40c39d <test_nested_buffer_using_nest@@Base+0x33d>
  40c0fd:	mov    rdi,rbx
  40c100:	call   410930 <flatcc_builder_end_table@@Base>
  40c105:	mov    rdi,rbx
  40c108:	mov    esi,eax
  40c10a:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40c10f:	mov    rdi,rbx
  40c112:	call   412410 <flatcc_builder_get_buffer_size@@Base>
  40c117:	mov    r14,rax
  40c11a:	lea    rsi,[rsp+0x10]
  40c11f:	mov    edx,0x400
  40c124:	mov    rdi,rbx
  40c127:	call   412510 <flatcc_builder_copy_buffer@@Base>
  40c12c:	test   rax,rax
  40c12f:	je     40c2b3 <test_nested_buffer_using_nest@@Base+0x253>
  40c135:	mov    rdi,rbx
  40c138:	call   40e0f0 <flatcc_builder_reset@@Base>
  40c13d:	lea    rsi,[rip+0x9004]        # 415148 <_IO_stdin_used@@Base+0x148>
  40c144:	mov    rdi,rbx
  40c147:	xor    edx,edx
  40c149:	xor    ecx,ecx
  40c14b:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  40c150:	test   eax,eax
  40c152:	jne    40c161 <test_nested_buffer_using_nest@@Base+0x101>
  40c154:	mov    rdi,rbx
  40c157:	mov    esi,0x24
  40c15c:	call   40ff20 <flatcc_builder_start_table@@Base>
  40c161:	lea    rsi,[rsp+0x10]
  40c166:	mov    ecx,0x1
  40c16b:	mov    r9d,0xffffffff
  40c171:	mov    rdi,rbx
  40c174:	mov    rdx,r14
  40c177:	mov    r8d,0x8
  40c17d:	call   410ac0 <flatcc_builder_create_vector@@Base>
  40c182:	test   eax,eax
  40c184:	je     40c19c <test_nested_buffer_using_nest@@Base+0x13c>
  40c186:	mov    ebp,eax
  40c188:	mov    rdi,rbx
  40c18b:	mov    esi,0xd
  40c190:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40c195:	test   rax,rax
  40c198:	je     40c19c <test_nested_buffer_using_nest@@Base+0x13c>
  40c19a:	mov    DWORD PTR [rax],ebp
  40c19c:	mov    edx,0x2
  40c1a1:	mov    rdi,rbx
  40c1a4:	mov    esi,0x2
  40c1a9:	mov    ecx,0x2
  40c1ae:	call   4112a0 <flatcc_builder_table_add@@Base>
  40c1b3:	test   rax,rax
  40c1b6:	je     40c1bd <test_nested_buffer_using_nest@@Base+0x15d>
  40c1b8:	mov    WORD PTR [rax],0xa
  40c1bd:	lea    rsi,[rip+0x8fc8]        # 41518c <_IO_stdin_used@@Base+0x18c>
  40c1c4:	mov    rdi,rbx
  40c1c7:	call   412170 <flatcc_builder_create_string_str@@Base>
  40c1cc:	test   eax,eax
  40c1ce:	je     40c1e6 <test_nested_buffer_using_nest@@Base+0x186>
  40c1d0:	mov    ebp,eax
  40c1d2:	mov    rdi,rbx
  40c1d5:	mov    esi,0x3
  40c1da:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40c1df:	test   rax,rax
  40c1e2:	je     40c1e6 <test_nested_buffer_using_nest@@Base+0x186>
  40c1e4:	mov    DWORD PTR [rax],ebp
  40c1e6:	lea    rsi,[rip+0x8f4b]        # 415138 <_IO_stdin_used@@Base+0x138>
  40c1ed:	mov    rdi,rbx
  40c1f0:	mov    edx,0x1
  40c1f5:	call   4108c0 <flatcc_builder_check_required@@Base>
  40c1fa:	test   eax,eax
  40c1fc:	je     40c39d <test_nested_buffer_using_nest@@Base+0x33d>
  40c202:	mov    rdi,rbx
  40c205:	call   410930 <flatcc_builder_end_table@@Base>
  40c20a:	mov    rdi,rbx
  40c20d:	mov    esi,eax
  40c20f:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40c214:	lea    rsi,[rsp+0x8]
  40c219:	mov    rdi,rbx
  40c21c:	call   4124d0 <flatcc_builder_get_direct_buffer@@Base>
  40c221:	mov    rbx,rax
  40c224:	mov    rdx,QWORD PTR [rsp+0x8]
  40c229:	mov    rax,QWORD PTR [rip+0x11dc8]        # 41dff8 <stderr@GLIBC_2.2.5>
  40c230:	mov    rcx,QWORD PTR [rax]
  40c233:	lea    rdi,[rip+0x9a7d]        # 415cb7 <_IO_stdin_used@@Base+0xcb7>
  40c23a:	mov    rsi,rbx
  40c23d:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  40c242:	test   rbx,rbx
  40c245:	je     40c3bc <test_nested_buffer_using_nest@@Base+0x35c>
  40c24b:	cmp    DWORD PTR [rbx+0x4],0x534e4f4d
  40c252:	jne    40c3bc <test_nested_buffer_using_nest@@Base+0x35c>
  40c258:	mov    eax,DWORD PTR [rbx]
  40c25a:	mov    rbp,rbx
  40c25d:	add    rbp,rax
  40c260:	movsxd rbx,DWORD PTR [rbx+rax*1]
  40c264:	mov    rax,rbp
  40c267:	sub    rax,rbx
  40c26a:	movzx  r14d,WORD PTR [rax]
  40c26e:	cmp    r14w,0xb
  40c273:	jbe    40c3c5 <test_nested_buffer_using_nest@@Base+0x365>
  40c279:	neg    rbx
  40c27c:	movzx  eax,WORD PTR [rbp+rbx*1+0xa]
  40c281:	test   rax,rax
  40c284:	je     40c3c5 <test_nested_buffer_using_nest@@Base+0x365>
  40c28a:	lea    rcx,[rax+rbp*1]
  40c28e:	mov    eax,DWORD PTR [rbp+rax*1+0x0]
  40c292:	lea    rdi,[rax+rcx*1]
  40c296:	add    rdi,0x4
  40c29a:	lea    rsi,[rip+0x8eeb]        # 41518c <_IO_stdin_used@@Base+0x18c>
  40c2a1:	call   4040e0 <strcmp@plt>
  40c2a6:	test   eax,eax
  40c2a8:	je     40c2d0 <test_nested_buffer_using_nest@@Base+0x270>
  40c2aa:	lea    rdi,[rip+0xbffa]        # 4182ab <_IO_stdin_used@@Base+0x32ab>
  40c2b1:	jmp    40c2ba <test_nested_buffer_using_nest@@Base+0x25a>
  40c2b3:	lea    rdi,[rip+0xbf72]        # 41822c <_IO_stdin_used@@Base+0x322c>
  40c2ba:	call   404060 <puts@plt>
  40c2bf:	mov    eax,0xffffffff
  40c2c4:	add    rsp,0x410
  40c2cb:	pop    rbx
  40c2cc:	pop    r14
  40c2ce:	pop    rbp
  40c2cf:	ret    
  40c2d0:	cmp    r14w,0x20
  40c2d5:	jb     40c302 <test_nested_buffer_using_nest@@Base+0x2a2>
  40c2d7:	movzx  eax,WORD PTR [rbp+rbx*1+0x1e]
  40c2dc:	test   rax,rax
  40c2df:	je     40c302 <test_nested_buffer_using_nest@@Base+0x2a2>
  40c2e1:	lea    rcx,[rax+rbp*1]
  40c2e5:	mov    eax,DWORD PTR [rbp+rax*1+0x0]
  40c2e9:	cmp    DWORD PTR [rax+rcx*1+0x8],0x534e4f4d
  40c2f1:	jne    40c302 <test_nested_buffer_using_nest@@Base+0x2a2>
  40c2f3:	add    rax,rcx
  40c2f6:	add    rax,0x4
  40c2fa:	mov    r14d,DWORD PTR [rax]
  40c2fd:	add    r14,rax
  40c300:	jmp    40c305 <test_nested_buffer_using_nest@@Base+0x2a5>
  40c302:	xor    r14d,r14d
  40c305:	movzx  eax,WORD PTR [rbp+rbx*1+0x8]
  40c30a:	lea    rdi,[rip+0xbf76]        # 418287 <_IO_stdin_used@@Base+0x3287>
  40c311:	test   rax,rax
  40c314:	je     40c2ba <test_nested_buffer_using_nest@@Base+0x25a>
  40c316:	cmp    WORD PTR [rbp+rax*1+0x0],0xa
  40c31c:	jne    40c2ba <test_nested_buffer_using_nest@@Base+0x25a>
  40c31e:	test   r14,r14
  40c321:	je     40c3bc <test_nested_buffer_using_nest@@Base+0x35c>
  40c327:	movsxd rbx,DWORD PTR [r14]
  40c32a:	mov    rax,r14
  40c32d:	sub    rax,rbx
  40c330:	cmp    WORD PTR [rax],0xc
  40c334:	jb     40c3c5 <test_nested_buffer_using_nest@@Base+0x365>
  40c33a:	neg    rbx
  40c33d:	movzx  eax,WORD PTR [r14+rbx*1+0xa]
  40c343:	test   rax,rax
  40c346:	je     40c3c5 <test_nested_buffer_using_nest@@Base+0x365>
  40c348:	lea    rcx,[r14+rax*1]
  40c34c:	mov    eax,DWORD PTR [r14+rax*1]
  40c350:	lea    rdi,[rax+rcx*1]
  40c354:	add    rdi,0x4
  40c358:	lea    rsi,[rip+0x9936]        # 415c95 <_IO_stdin_used@@Base+0xc95>
  40c35f:	call   4040e0 <strcmp@plt>
  40c364:	test   eax,eax
  40c366:	je     40c374 <test_nested_buffer_using_nest@@Base+0x314>
  40c368:	lea    rdi,[rip+0xbefb]        # 41826a <_IO_stdin_used@@Base+0x326a>
  40c36f:	jmp    40c2ba <test_nested_buffer_using_nest@@Base+0x25a>
  40c374:	movzx  ecx,WORD PTR [r14+rbx*1+0x6]
  40c37a:	lea    rdi,[rip+0xbec5]        # 418246 <_IO_stdin_used@@Base+0x3246>
  40c381:	test   rcx,rcx
  40c384:	je     40c2ba <test_nested_buffer_using_nest@@Base+0x25a>
  40c38a:	xor    eax,eax
  40c38c:	cmp    WORD PTR [r14+rcx*1],0x2a
  40c392:	jne    40c2ba <test_nested_buffer_using_nest@@Base+0x25a>
  40c398:	jmp    40c2c4 <test_nested_buffer_using_nest@@Base+0x264>
  40c39d:	lea    rdi,[rip+0x9d42]        # 4160e6 <_IO_stdin_used@@Base+0x10e6>
  40c3a4:	lea    rsi,[rip+0x9bff]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  40c3ab:	lea    rcx,[rip+0x9dd6]        # 416188 <_IO_stdin_used@@Base+0x1188>
  40c3b2:	mov    edx,0xeb
  40c3b7:	call   4040a0 <__assert_fail@plt>
  40c3bc:	lea    rdi,[rip+0x9a4e]        # 415e11 <_IO_stdin_used@@Base+0xe11>
  40c3c3:	jmp    40c3cc <test_nested_buffer_using_nest@@Base+0x36c>
  40c3c5:	lea    rdi,[rip+0x9f7e]        # 41634a <_IO_stdin_used@@Base+0x134a>
  40c3cc:	lea    rsi,[rip+0x9a64]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40c3d3:	lea    rcx,[rip+0x9f1f]        # 4162f9 <_IO_stdin_used@@Base+0x12f9>
  40c3da:	mov    edx,0x2bb
  40c3df:	call   4040a0 <__assert_fail@plt>
  40c3e4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c3ee:	xchg   ax,ax

000000000040c3f0 <verify_include@@Base>:
  40c3f0:	xor    eax,eax
  40c3f2:	ret    
  40c3f3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c3fd:	nop    DWORD PTR [rax]

000000000040c400 <test_struct_buffer@@Base>:
  40c400:	push   rbx
  40c401:	sub    rsp,0x70
  40c405:	mov    rbx,rdi
  40c408:	call   40e0f0 <flatcc_builder_reset@@Base>
  40c40d:	mov    esi,0x20
  40c412:	mov    rdi,rbx
  40c415:	mov    edx,0x10
  40c41a:	call   40efd0 <flatcc_builder_start_struct@@Base>
  40c41f:	test   rax,rax
  40c422:	je     40c460 <test_struct_buffer@@Base+0x60>
  40c424:	movabs rcx,0x400000003f800000
  40c42e:	mov    QWORD PTR [rax],rcx
  40c431:	mov    DWORD PTR [rax+0x8],0x40400000
  40c438:	movabs rcx,0x4010cccccccccccd
  40c442:	mov    QWORD PTR [rax+0x10],rcx
  40c446:	mov    BYTE PTR [rax+0x18],0x8
  40c44a:	mov    WORD PTR [rax+0x1a],0xaaa
  40c450:	mov    BYTE PTR [rax+0x1c],0xef
  40c454:	mov    rdi,rbx
  40c457:	call   40f0a0 <flatcc_builder_end_struct@@Base>
  40c45c:	mov    ecx,eax
  40c45e:	jmp    40c462 <test_struct_buffer@@Base+0x62>
  40c460:	xor    ecx,ecx
  40c462:	lea    rsi,[rip+0x8cdf]        # 415148 <_IO_stdin_used@@Base+0x148>
  40c469:	mov    rdi,rbx
  40c46c:	xor    edx,edx
  40c46e:	mov    r8d,0x10
  40c474:	xor    r9d,r9d
  40c477:	call   40e900 <flatcc_builder_create_buffer@@Base>
  40c47c:	mov    rdi,rbx
  40c47f:	call   412410 <flatcc_builder_get_buffer_size@@Base>
  40c484:	cmp    rax,0x30
  40c488:	jne    40c584 <test_struct_buffer@@Base+0x184>
  40c48e:	lea    rdi,[rip+0x987a]        # 415d0f <_IO_stdin_used@@Base+0xd0f>
  40c495:	mov    esi,0x30
  40c49a:	xor    eax,eax
  40c49c:	call   404080 <printf@plt>
  40c4a1:	mov    rdi,rbx
  40c4a4:	call   412750 <flatcc_builder_get_emit_context@@Base>
  40c4a9:	cmp    QWORD PTR [rax+0x30],0x30
  40c4ae:	jne    40c5a3 <test_struct_buffer@@Base+0x1a3>
  40c4b4:	mov    rsi,rsp
  40c4b7:	mov    edx,0x64
  40c4bc:	mov    rdi,rbx
  40c4bf:	call   412510 <flatcc_builder_copy_buffer@@Base>
  40c4c4:	test   rax,rax
  40c4c7:	je     40c564 <test_struct_buffer@@Base+0x164>
  40c4cd:	mov    rax,QWORD PTR [rip+0x11b24]        # 41dff8 <stderr@GLIBC_2.2.5>
  40c4d4:	mov    rcx,QWORD PTR [rax]
  40c4d7:	lea    rdi,[rip+0x98d0]        # 415dae <_IO_stdin_used@@Base+0xdae>
  40c4de:	mov    rsi,rsp
  40c4e1:	mov    edx,0x30
  40c4e6:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  40c4eb:	cmp    DWORD PTR [rsp+0x4],0x534e4f4d
  40c4f3:	jne    40c56d <test_struct_buffer@@Base+0x16d>
  40c4f5:	mov    ecx,DWORD PTR [rsp]
  40c4f8:	vmovss xmm0,DWORD PTR [rsp+rcx*1]
  40c4fd:	lea    rdi,[rip+0xbe0c]        # 418310 <_IO_stdin_used@@Base+0x3310>
  40c504:	vucomiss xmm0,DWORD PTR [rip+0x8b00]        # 41500c <_IO_stdin_used@@Base+0xc>
  40c50c:	jne    40c574 <test_struct_buffer@@Base+0x174>
  40c50e:	jp     40c574 <test_struct_buffer@@Base+0x174>
  40c510:	vmovss xmm0,DWORD PTR [rsp+rcx*1+0x4]
  40c516:	vucomiss xmm0,DWORD PTR [rip+0x8af2]        # 415010 <_IO_stdin_used@@Base+0x10>
  40c51e:	jne    40c574 <test_struct_buffer@@Base+0x174>
  40c520:	jp     40c574 <test_struct_buffer@@Base+0x174>
  40c522:	vmovss xmm0,DWORD PTR [rsp+rcx*1+0x8]
  40c528:	vucomiss xmm0,DWORD PTR [rip+0x8ae8]        # 415018 <_IO_stdin_used@@Base+0x18>
  40c530:	jne    40c574 <test_struct_buffer@@Base+0x174>
  40c532:	jp     40c574 <test_struct_buffer@@Base+0x174>
  40c534:	vmovsd xmm0,QWORD PTR [rsp+rcx*1+0x10]
  40c53a:	vucomisd xmm0,QWORD PTR [rip+0x8ae6]        # 415028 <_IO_stdin_used@@Base+0x28>
  40c542:	jne    40c574 <test_struct_buffer@@Base+0x174>
  40c544:	jp     40c574 <test_struct_buffer@@Base+0x174>
  40c546:	cmp    BYTE PTR [rsp+rcx*1+0x18],0x8
  40c54b:	jne    40c574 <test_struct_buffer@@Base+0x174>
  40c54d:	movzx  eax,WORD PTR [rsp+rcx*1+0x1a]
  40c552:	cmp    eax,0xaaa
  40c557:	jne    40c574 <test_struct_buffer@@Base+0x174>
  40c559:	xor    eax,eax
  40c55b:	cmp    BYTE PTR [rsp+rcx*1+0x1c],0xef
  40c560:	jne    40c574 <test_struct_buffer@@Base+0x174>
  40c562:	jmp    40c57e <test_struct_buffer@@Base+0x17e>
  40c564:	lea    rdi,[rip+0xbd5b]        # 4182c6 <_IO_stdin_used@@Base+0x32c6>
  40c56b:	jmp    40c574 <test_struct_buffer@@Base+0x174>
  40c56d:	lea    rdi,[rip+0xbd5e]        # 4182d2 <_IO_stdin_used@@Base+0x32d2>
  40c574:	call   404060 <puts@plt>
  40c579:	mov    eax,0xffffffff
  40c57e:	add    rsp,0x70
  40c582:	pop    rbx
  40c583:	ret    
  40c584:	lea    rdi,[rip+0x974e]        # 415cd9 <_IO_stdin_used@@Base+0xcd9>
  40c58b:	lea    rsi,[rip+0x8da2]        # 415334 <_IO_stdin_used@@Base+0x334>
  40c592:	lea    rcx,[rip+0x974b]        # 415ce4 <_IO_stdin_used@@Base+0xce4>
  40c599:	mov    edx,0x923
  40c59e:	call   4040a0 <__assert_fail@plt>
  40c5a3:	lea    rdi,[rip+0x9782]        # 415d2c <_IO_stdin_used@@Base+0xd2c>
  40c5aa:	lea    rsi,[rip+0x8d83]        # 415334 <_IO_stdin_used@@Base+0x334>
  40c5b1:	lea    rcx,[rip+0x972c]        # 415ce4 <_IO_stdin_used@@Base+0xce4>
  40c5b8:	mov    edx,0x925
  40c5bd:	call   4040a0 <__assert_fail@plt>
  40c5c2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c5cc:	nop    DWORD PTR [rax+0x0]

000000000040c5d0 <test_typed_struct_buffer@@Base>:
  40c5d0:	push   rbx
  40c5d1:	sub    rsp,0x70
  40c5d5:	mov    rbx,rdi
  40c5d8:	call   40e0f0 <flatcc_builder_reset@@Base>
  40c5dd:	mov    esi,0x20
  40c5e2:	mov    rdi,rbx
  40c5e5:	mov    edx,0x10
  40c5ea:	call   40efd0 <flatcc_builder_start_struct@@Base>
  40c5ef:	test   rax,rax
  40c5f2:	je     40c630 <test_typed_struct_buffer@@Base+0x60>
  40c5f4:	movabs rcx,0x400000003f800000
  40c5fe:	mov    QWORD PTR [rax],rcx
  40c601:	mov    DWORD PTR [rax+0x8],0x40400000
  40c608:	movabs rcx,0x4010cccccccccccd
  40c612:	mov    QWORD PTR [rax+0x10],rcx
  40c616:	mov    BYTE PTR [rax+0x18],0x8
  40c61a:	mov    WORD PTR [rax+0x1a],0xaaa
  40c620:	mov    BYTE PTR [rax+0x1c],0xef
  40c624:	mov    rdi,rbx
  40c627:	call   40f0a0 <flatcc_builder_end_struct@@Base>
  40c62c:	mov    ecx,eax
  40c62e:	jmp    40c632 <test_typed_struct_buffer@@Base+0x62>
  40c630:	xor    ecx,ecx
  40c632:	lea    rsi,[rip+0x9788]        # 415dc1 <_IO_stdin_used@@Base+0xdc1>
  40c639:	mov    rdi,rbx
  40c63c:	xor    edx,edx
  40c63e:	mov    r8d,0x10
  40c644:	xor    r9d,r9d
  40c647:	call   40e900 <flatcc_builder_create_buffer@@Base>
  40c64c:	mov    rdi,rbx
  40c64f:	call   412410 <flatcc_builder_get_buffer_size@@Base>
  40c654:	cmp    rax,0x30
  40c658:	jne    40c7d6 <test_typed_struct_buffer@@Base+0x206>
  40c65e:	lea    rdi,[rip+0x96aa]        # 415d0f <_IO_stdin_used@@Base+0xd0f>
  40c665:	mov    esi,0x30
  40c66a:	xor    eax,eax
  40c66c:	call   404080 <printf@plt>
  40c671:	mov    rdi,rbx
  40c674:	call   412750 <flatcc_builder_get_emit_context@@Base>
  40c679:	cmp    QWORD PTR [rax+0x30],0x30
  40c67e:	jne    40c7f5 <test_typed_struct_buffer@@Base+0x225>
  40c684:	mov    rsi,rsp
  40c687:	mov    edx,0x64
  40c68c:	mov    rdi,rbx
  40c68f:	call   412510 <flatcc_builder_copy_buffer@@Base>
  40c694:	test   rax,rax
  40c697:	je     40c6eb <test_typed_struct_buffer@@Base+0x11b>
  40c699:	mov    rax,QWORD PTR [rip+0x11958]        # 41dff8 <stderr@GLIBC_2.2.5>
  40c6a0:	mov    rcx,QWORD PTR [rax]
  40c6a3:	lea    rdi,[rip+0x96fe]        # 415da8 <_IO_stdin_used@@Base+0xda8>
  40c6aa:	mov    rsi,rsp
  40c6ad:	mov    edx,0x30
  40c6b2:	call   4047a0 <test_type_aliases@@Base+0x4c0>
  40c6b7:	cmp    DWORD PTR [rsp+0x4],0xa8f53ed2
  40c6bf:	jne    40c6f4 <test_typed_struct_buffer@@Base+0x124>
  40c6c1:	mov    rdi,rsp
  40c6c4:	mov    esi,0x30
  40c6c9:	mov    ecx,0x20
  40c6ce:	mov    edx,0xa8f53ed2
  40c6d3:	mov    r8d,0x10
  40c6d9:	call   413920 <flatcc_verify_struct_as_typed_root@@Base>
  40c6de:	test   eax,eax
  40c6e0:	je     40c70b <test_typed_struct_buffer@@Base+0x13b>
  40c6e2:	lea    rdi,[rip+0xbc65]        # 41834e <_IO_stdin_used@@Base+0x334e>
  40c6e9:	jmp    40c6fb <test_typed_struct_buffer@@Base+0x12b>
  40c6eb:	lea    rdi,[rip+0xbbd4]        # 4182c6 <_IO_stdin_used@@Base+0x32c6>
  40c6f2:	jmp    40c6fb <test_typed_struct_buffer@@Base+0x12b>
  40c6f4:	lea    rdi,[rip+0xbbd7]        # 4182d2 <_IO_stdin_used@@Base+0x32d2>
  40c6fb:	call   404060 <puts@plt>
  40c700:	mov    eax,0xffffffff
  40c705:	add    rsp,0x70
  40c709:	pop    rbx
  40c70a:	ret    
  40c70b:	cmp    DWORD PTR [rsp+0x4],0xa8f53ed2
  40c713:	jne    40c742 <test_typed_struct_buffer@@Base+0x172>
  40c715:	mov    ebx,DWORD PTR [rsp]
  40c718:	mov    rdi,rsp
  40c71b:	mov    esi,0x30
  40c720:	mov    ecx,0x20
  40c725:	mov    edx,0xa8f53ed2
  40c72a:	mov    r8d,0x10
  40c730:	call   413920 <flatcc_verify_struct_as_typed_root@@Base>
  40c735:	test   eax,eax
  40c737:	je     40c74b <test_typed_struct_buffer@@Base+0x17b>
  40c739:	lea    rdi,[rip+0xbbe8]        # 418328 <_IO_stdin_used@@Base+0x3328>
  40c740:	jmp    40c6fb <test_typed_struct_buffer@@Base+0x12b>
  40c742:	lea    rdi,[rip+0xbbaa]        # 4182f3 <_IO_stdin_used@@Base+0x32f3>
  40c749:	jmp    40c6fb <test_typed_struct_buffer@@Base+0x12b>
  40c74b:	vmovss xmm0,DWORD PTR [rsp+rbx*1]
  40c750:	lea    rdi,[rip+0xbbb9]        # 418310 <_IO_stdin_used@@Base+0x3310>
  40c757:	vucomiss xmm0,DWORD PTR [rip+0x88ad]        # 41500c <_IO_stdin_used@@Base+0xc>
  40c75f:	jne    40c6fb <test_typed_struct_buffer@@Base+0x12b>
  40c761:	jp     40c6fb <test_typed_struct_buffer@@Base+0x12b>
  40c763:	vmovss xmm0,DWORD PTR [rsp+rbx*1+0x4]
  40c769:	vucomiss xmm0,DWORD PTR [rip+0x889f]        # 415010 <_IO_stdin_used@@Base+0x10>
  40c771:	jne    40c6fb <test_typed_struct_buffer@@Base+0x12b>
  40c773:	jp     40c6fb <test_typed_struct_buffer@@Base+0x12b>
  40c775:	vmovss xmm0,DWORD PTR [rsp+rbx*1+0x8]
  40c77b:	vucomiss xmm0,DWORD PTR [rip+0x8895]        # 415018 <_IO_stdin_used@@Base+0x18>
  40c783:	jne    40c6fb <test_typed_struct_buffer@@Base+0x12b>
  40c789:	jp     40c6fb <test_typed_struct_buffer@@Base+0x12b>
  40c78f:	vmovsd xmm0,QWORD PTR [rsp+rbx*1+0x10]
  40c795:	vucomisd xmm0,QWORD PTR [rip+0x888b]        # 415028 <_IO_stdin_used@@Base+0x28>
  40c79d:	jne    40c6fb <test_typed_struct_buffer@@Base+0x12b>
  40c7a3:	jp     40c6fb <test_typed_struct_buffer@@Base+0x12b>
  40c7a9:	cmp    BYTE PTR [rsp+rbx*1+0x18],0x8
  40c7ae:	jne    40c6fb <test_typed_struct_buffer@@Base+0x12b>
  40c7b4:	movzx  eax,WORD PTR [rsp+rbx*1+0x1a]
  40c7b9:	cmp    eax,0xaaa
  40c7be:	jne    40c6fb <test_typed_struct_buffer@@Base+0x12b>
  40c7c4:	xor    eax,eax
  40c7c6:	cmp    BYTE PTR [rsp+rbx*1+0x1c],0xef
  40c7cb:	jne    40c6fb <test_typed_struct_buffer@@Base+0x12b>
  40c7d1:	jmp    40c705 <test_typed_struct_buffer@@Base+0x135>
  40c7d6:	lea    rdi,[rip+0x94fc]        # 415cd9 <_IO_stdin_used@@Base+0xcd9>
  40c7dd:	lea    rsi,[rip+0x8b50]        # 415334 <_IO_stdin_used@@Base+0x334>
  40c7e4:	lea    rcx,[rip+0x958c]        # 415d77 <_IO_stdin_used@@Base+0xd77>
  40c7eb:	mov    edx,0x954
  40c7f0:	call   4040a0 <__assert_fail@plt>
  40c7f5:	lea    rdi,[rip+0x9530]        # 415d2c <_IO_stdin_used@@Base+0xd2c>
  40c7fc:	lea    rsi,[rip+0x8b31]        # 415334 <_IO_stdin_used@@Base+0x334>
  40c803:	lea    rcx,[rip+0x956d]        # 415d77 <_IO_stdin_used@@Base+0xd77>
  40c80a:	mov    edx,0x956
  40c80f:	call   4040a0 <__assert_fail@plt>
  40c814:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c81e:	xchg   ax,ax

000000000040c820 <gen_monster_benchmark@@Base>:
  40c820:	push   rbp
  40c821:	push   rbx
  40c822:	sub    rsp,0x18
  40c826:	mov    rbx,rdi
  40c829:	movabs rax,0x706050403020100
  40c833:	mov    QWORD PTR [rsp+0x8],rax
  40c838:	mov    WORD PTR [rsp+0x10],0x908
  40c83f:	call   40e0f0 <flatcc_builder_reset@@Base>
  40c844:	lea    rsi,[rip+0x88fd]        # 415148 <_IO_stdin_used@@Base+0x148>
  40c84b:	mov    rdi,rbx
  40c84e:	xor    edx,edx
  40c850:	xor    ecx,ecx
  40c852:	call   40ec80 <flatcc_builder_start_buffer@@Base>
  40c857:	test   eax,eax
  40c859:	jne    40c868 <gen_monster_benchmark@@Base+0x48>
  40c85b:	mov    rdi,rbx
  40c85e:	mov    esi,0x24
  40c863:	call   40ff20 <flatcc_builder_start_table@@Base>
  40c868:	mov    edx,0x2
  40c86d:	mov    rdi,rbx
  40c870:	mov    esi,0x2
  40c875:	mov    ecx,0x2
  40c87a:	call   4112a0 <flatcc_builder_table_add@@Base>
  40c87f:	test   rax,rax
  40c882:	je     40c889 <gen_monster_benchmark@@Base+0x69>
  40c884:	mov    WORD PTR [rax],0x50
  40c889:	mov    edx,0x20
  40c88e:	mov    rdi,rbx
  40c891:	xor    esi,esi
  40c893:	mov    ecx,0x10
  40c898:	call   4112a0 <flatcc_builder_table_add@@Base>
  40c89d:	movabs rcx,0x400000003f800000
  40c8a7:	mov    QWORD PTR [rax],rcx
  40c8aa:	mov    DWORD PTR [rax+0x8],0xc04ccccd
  40c8b1:	lea    rsi,[rip+0x88d4]        # 41518c <_IO_stdin_used@@Base+0x18c>
  40c8b8:	mov    rdi,rbx
  40c8bb:	call   412170 <flatcc_builder_create_string_str@@Base>
  40c8c0:	test   eax,eax
  40c8c2:	je     40c8da <gen_monster_benchmark@@Base+0xba>
  40c8c4:	mov    ebp,eax
  40c8c6:	mov    rdi,rbx
  40c8c9:	mov    esi,0x3
  40c8ce:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40c8d3:	test   rax,rax
  40c8d6:	je     40c8da <gen_monster_benchmark@@Base+0xba>
  40c8d8:	mov    DWORD PTR [rax],ebp
  40c8da:	lea    rsi,[rsp+0x8]
  40c8df:	mov    edx,0xa
  40c8e4:	mov    ecx,0x1
  40c8e9:	mov    r9d,0xffffffff
  40c8ef:	mov    rdi,rbx
  40c8f2:	mov    r8d,0x1
  40c8f8:	call   410ac0 <flatcc_builder_create_vector@@Base>
  40c8fd:	test   eax,eax
  40c8ff:	je     40c917 <gen_monster_benchmark@@Base+0xf7>
  40c901:	mov    ebp,eax
  40c903:	mov    rdi,rbx
  40c906:	mov    esi,0x5
  40c90b:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40c910:	test   rax,rax
  40c913:	je     40c917 <gen_monster_benchmark@@Base+0xf7>
  40c915:	mov    DWORD PTR [rax],ebp
  40c917:	mov    esi,0x4
  40c91c:	mov    ecx,0x3fffffff
  40c921:	mov    rdi,rbx
  40c924:	mov    edx,0x2
  40c929:	call   40fab0 <flatcc_builder_start_vector@@Base>
  40c92e:	mov    esi,0x1
  40c933:	mov    rdi,rbx
  40c936:	call   40f160 <flatcc_builder_extend_vector@@Base>
  40c93b:	mov    WORD PTR [rax],0x10
  40c940:	mov    BYTE PTR [rax+0x2],0x20
  40c944:	mov    esi,0x2
  40c949:	mov    rdi,rbx
  40c94c:	call   40f160 <flatcc_builder_extend_vector@@Base>
  40c951:	mov    WORD PTR [rax],0x30
  40c956:	mov    BYTE PTR [rax+0x2],0x40
  40c95a:	mov    WORD PTR [rax+0x4],0x50
  40c960:	mov    BYTE PTR [rax+0x6],0x60
  40c964:	mov    esi,0x1
  40c969:	mov    rdi,rbx
  40c96c:	call   40f160 <flatcc_builder_extend_vector@@Base>
  40c971:	test   rax,rax
  40c974:	je     40c97f <gen_monster_benchmark@@Base+0x15f>
  40c976:	mov    WORD PTR [rax],0x70
  40c97b:	mov    BYTE PTR [rax+0x2],0x80
  40c97f:	mov    esi,0x1
  40c984:	mov    rdi,rbx
  40c987:	call   40f160 <flatcc_builder_extend_vector@@Base>
  40c98c:	test   rax,rax
  40c98f:	je     40c997 <gen_monster_benchmark@@Base+0x177>
  40c991:	mov    DWORD PTR [rax],0x910191
  40c997:	mov    rdi,rbx
  40c99a:	call   410c40 <flatcc_builder_end_vector@@Base>
  40c99f:	test   eax,eax
  40c9a1:	je     40c9b9 <gen_monster_benchmark@@Base+0x199>
  40c9a3:	mov    ebp,eax
  40c9a5:	mov    rdi,rbx
  40c9a8:	mov    esi,0x9
  40c9ad:	call   411140 <flatcc_builder_table_add_offset@@Base>
  40c9b2:	test   rax,rax
  40c9b5:	je     40c9b9 <gen_monster_benchmark@@Base+0x199>
  40c9b7:	mov    DWORD PTR [rax],ebp
  40c9b9:	lea    rsi,[rip+0x8778]        # 415138 <_IO_stdin_used@@Base+0x138>
  40c9c0:	mov    rdi,rbx
  40c9c3:	mov    edx,0x1
  40c9c8:	call   4108c0 <flatcc_builder_check_required@@Base>
  40c9cd:	test   eax,eax
  40c9cf:	je     40c9ec <gen_monster_benchmark@@Base+0x1cc>
  40c9d1:	mov    rdi,rbx
  40c9d4:	call   410930 <flatcc_builder_end_table@@Base>
  40c9d9:	mov    rdi,rbx
  40c9dc:	mov    esi,eax
  40c9de:	call   40eea0 <flatcc_builder_end_buffer@@Base>
  40c9e3:	xor    eax,eax
  40c9e5:	add    rsp,0x18
  40c9e9:	pop    rbx
  40c9ea:	pop    rbp
  40c9eb:	ret    
  40c9ec:	lea    rdi,[rip+0x96f3]        # 4160e6 <_IO_stdin_used@@Base+0x10e6>
  40c9f3:	lea    rsi,[rip+0x95b0]        # 415faa <_IO_stdin_used@@Base+0xfaa>
  40c9fa:	lea    rcx,[rip+0x9787]        # 416188 <_IO_stdin_used@@Base+0x1188>
  40ca01:	mov    edx,0xeb
  40ca06:	call   4040a0 <__assert_fail@plt>
  40ca0b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040ca10 <time_monster@@Base>:
  40ca10:	push   rbp
  40ca11:	push   r14
  40ca13:	push   rbx
  40ca14:	sub    rsp,0x20
  40ca18:	mov    rbx,rdi
  40ca1b:	lea    rdi,[rip+0xb94e]        # 418370 <_IO_stdin_used@@Base+0x3370>
  40ca22:	call   404060 <puts@plt>
  40ca27:	lea    rdi,[rsp+0x10]
  40ca2c:	xor    esi,esi
  40ca2e:	call   404090 <gettimeofday@plt>
  40ca33:	mov    rax,QWORD PTR [rip+0x1168e]        # 41e0c8 <__bss_start@@Base+0x8>
  40ca3a:	test   rax,rax
  40ca3d:	jne    40ca54 <time_monster@@Base+0x44>
  40ca3f:	vmovups xmm0,XMMWORD PTR [rsp+0x10]
  40ca45:	vmovups XMMWORD PTR [rip+0x1167b],xmm0        # 41e0c8 <__bss_start@@Base+0x8>
  40ca4d:	mov    rax,QWORD PTR [rip+0x11674]        # 41e0c8 <__bss_start@@Base+0x8>
  40ca54:	mov    r14,QWORD PTR [rsp+0x10]
  40ca59:	mov    rcx,QWORD PTR [rsp+0x18]
  40ca5e:	sub    rcx,QWORD PTR [rip+0x1166b]        # 41e0d0 <__bss_start@@Base+0x10>
  40ca65:	sub    r14,rax
  40ca68:	vcvtsi2sd xmm0,xmm1,rcx
  40ca6d:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x85bb]        # 415030 <_IO_stdin_used@@Base+0x30>
  40ca75:	vmovsd QWORD PTR [rsp+0x8],xmm0
  40ca7b:	mov    ebp,0xf4240
  40ca80:	mov    rdi,rbx
  40ca83:	call   40c820 <gen_monster_benchmark@@Base>
  40ca88:	dec    ebp
  40ca8a:	jne    40ca80 <time_monster@@Base+0x70>
  40ca8c:	vcvtsi2sd xmm0,xmm1,r14
  40ca91:	vaddsd xmm0,xmm0,QWORD PTR [rsp+0x8]
  40ca97:	vmovsd QWORD PTR [rsp+0x8],xmm0
  40ca9d:	mov    rdi,rbx
  40caa0:	call   412410 <flatcc_builder_get_buffer_size@@Base>
  40caa5:	mov    rbx,rax
  40caa8:	lea    rdi,[rsp+0x10]
  40caad:	xor    esi,esi
  40caaf:	call   404090 <gettimeofday@plt>
  40cab4:	mov    rax,QWORD PTR [rip+0x1160d]        # 41e0c8 <__bss_start@@Base+0x8>
  40cabb:	test   rax,rax
  40cabe:	jne    40cad5 <time_monster@@Base+0xc5>
  40cac0:	vmovupd xmm0,XMMWORD PTR [rsp+0x10]
  40cac6:	vmovupd XMMWORD PTR [rip+0x115fa],xmm0        # 41e0c8 <__bss_start@@Base+0x8>
  40cace:	mov    rax,QWORD PTR [rip+0x115f3]        # 41e0c8 <__bss_start@@Base+0x8>
  40cad5:	mov    rcx,QWORD PTR [rsp+0x10]
  40cada:	sub    rcx,rax
  40cadd:	mov    rax,QWORD PTR [rsp+0x18]
  40cae2:	vcvtsi2sd xmm0,xmm1,rcx
  40cae7:	sub    rax,QWORD PTR [rip+0x115e2]        # 41e0d0 <__bss_start@@Base+0x10>
  40caee:	vcvtsi2sd xmm1,xmm1,rax
  40caf3:	vdivsd xmm1,xmm1,QWORD PTR [rip+0x8535]        # 415030 <_IO_stdin_used@@Base+0x30>
  40cafb:	vaddsd xmm1,xmm1,xmm0
  40caff:	lea    rdi,[rip+0x92c0]        # 415dc6 <_IO_stdin_used@@Base+0xdc6>
  40cb06:	vmovsd xmm0,QWORD PTR [rsp+0x8]
  40cb0c:	mov    rsi,rbx
  40cb0f:	call   40cb20 <time_monster@@Base+0x110>
  40cb14:	xor    eax,eax
  40cb16:	add    rsp,0x20
  40cb1a:	pop    rbx
  40cb1b:	pop    r14
  40cb1d:	pop    rbp
  40cb1e:	ret    
  40cb1f:	nop
  40cb20:	push   rbx
  40cb21:	sub    rsp,0x10
  40cb25:	mov    rbx,rsi
  40cb28:	mov    rsi,rdi
  40cb2b:	vsubsd xmm0,xmm1,xmm0
  40cb2f:	vmovsd QWORD PTR [rsp+0x8],xmm0
  40cb35:	lea    rdi,[rip+0xa30f]        # 416e4b <_IO_stdin_used@@Base+0x1e4b>
  40cb3c:	xor    eax,eax
  40cb3e:	call   404080 <printf@plt>
  40cb43:	lea    rdi,[rip+0xa310]        # 416e5a <_IO_stdin_used@@Base+0x1e5a>
  40cb4a:	vmovsd xmm0,QWORD PTR [rsp+0x8]
  40cb50:	mov    al,0x1
  40cb52:	call   404080 <printf@plt>
  40cb57:	lea    rdi,[rip+0xa314]        # 416e72 <_IO_stdin_used@@Base+0x1e72>
  40cb5e:	mov    esi,0xf4240
  40cb63:	xor    eax,eax
  40cb65:	call   404080 <printf@plt>
  40cb6a:	lea    rdi,[rip+0xa311]        # 416e82 <_IO_stdin_used@@Base+0x1e82>
  40cb71:	mov    rsi,rbx
  40cb74:	xor    eax,eax
  40cb76:	call   404080 <printf@plt>
  40cb7b:	vmovq  xmm0,rbx
  40cb80:	vpunpckldq xmm0,xmm0,XMMWORD PTR [rip+0x84c8]        # 415050 <_IO_stdin_used@@Base+0x50>
  40cb88:	vsubpd xmm0,xmm0,XMMWORD PTR [rip+0x84d0]        # 415060 <_IO_stdin_used@@Base+0x60>
  40cb90:	vhaddpd xmm0,xmm0,xmm0
  40cb94:	vmovsd xmm1,QWORD PTR [rip+0x8494]        # 415030 <_IO_stdin_used@@Base+0x30>
  40cb9c:	vmulsd xmm0,xmm0,xmm1
  40cba0:	vdivsd xmm0,xmm0,xmm1
  40cba4:	vdivsd xmm0,xmm0,QWORD PTR [rsp+0x8]
  40cbaa:	lea    rdi,[rip+0xa2e4]        # 416e95 <_IO_stdin_used@@Base+0x1e95>
  40cbb1:	mov    al,0x1
  40cbb3:	call   404080 <printf@plt>
  40cbb8:	vmovsd xmm0,QWORD PTR [rip+0x8470]        # 415030 <_IO_stdin_used@@Base+0x30>
  40cbc0:	vdivsd xmm0,xmm0,QWORD PTR [rsp+0x8]
  40cbc6:	lea    rdi,[rip+0xa2e0]        # 416ead <_IO_stdin_used@@Base+0x1ead>
  40cbcd:	mov    al,0x1
  40cbcf:	call   404080 <printf@plt>
  40cbd4:	vmovsd xmm0,QWORD PTR [rip+0x845c]        # 415038 <_IO_stdin_used@@Base+0x38>
  40cbdc:	vdivsd xmm0,xmm0,QWORD PTR [rsp+0x8]
  40cbe2:	lea    rdi,[rip+0xa2e5]        # 416ece <_IO_stdin_used@@Base+0x1ece>
  40cbe9:	lea    rsi,[rip+0x91ec]        # 415ddc <_IO_stdin_used@@Base+0xddc>
  40cbf0:	mov    al,0x1
  40cbf2:	call   404080 <printf@plt>
  40cbf7:	vmovsd xmm2,QWORD PTR [rip+0x8431]        # 415030 <_IO_stdin_used@@Base+0x30>
  40cbff:	vmovsd xmm0,QWORD PTR [rsp+0x8]
  40cc05:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x8433]        # 415040 <_IO_stdin_used@@Base+0x40>
  40cc0d:	vdivsd xmm0,xmm0,xmm2
  40cc11:	vmovsd xmm1,QWORD PTR [rip+0x842f]        # 415048 <_IO_stdin_used@@Base+0x48>
  40cc19:	vucomisd xmm1,xmm0
  40cc1d:	jbe    40cc28 <time_monster@@Base+0x218>
  40cc1f:	lea    rdi,[rip+0xa2cc]        # 416ef2 <_IO_stdin_used@@Base+0x1ef2>
  40cc26:	jmp    40cc6d <time_monster@@Base+0x25d>
  40cc28:	vucomisd xmm2,xmm0
  40cc2c:	jbe    40cc3f <time_monster@@Base+0x22f>
  40cc2e:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x8412]        # 415048 <_IO_stdin_used@@Base+0x48>
  40cc36:	lea    rdi,[rip+0xa2cd]        # 416f0a <_IO_stdin_used@@Base+0x1f0a>
  40cc3d:	jmp    40cc6d <time_monster@@Base+0x25d>
  40cc3f:	vmovsd xmm1,QWORD PTR [rip+0x83f9]        # 415040 <_IO_stdin_used@@Base+0x40>
  40cc47:	vucomisd xmm1,xmm0
  40cc4b:	jbe    40cc5e <time_monster@@Base+0x24e>
  40cc4d:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x83db]        # 415030 <_IO_stdin_used@@Base+0x30>
  40cc55:	lea    rdi,[rip+0xa2c6]        # 416f22 <_IO_stdin_used@@Base+0x1f22>
  40cc5c:	jmp    40cc6d <time_monster@@Base+0x25d>
  40cc5e:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x83da]        # 415040 <_IO_stdin_used@@Base+0x40>
  40cc66:	lea    rdi,[rip+0xa2cd]        # 416f3a <_IO_stdin_used@@Base+0x1f3a>
  40cc6d:	mov    al,0x1
  40cc6f:	add    rsp,0x10
  40cc73:	pop    rbx
  40cc74:	jmp    404080 <printf@plt>
  40cc79:	nop    DWORD PTR [rax+0x0]

000000000040cc80 <gen_struct_buffer_benchmark@@Base>:
  40cc80:	push   rbx
  40cc81:	mov    rbx,rdi
  40cc84:	call   40e0f0 <flatcc_builder_reset@@Base>
  40cc89:	mov    esi,0x20
  40cc8e:	mov    rdi,rbx
  40cc91:	mov    edx,0x10
  40cc96:	call   40efd0 <flatcc_builder_start_struct@@Base>
  40cc9b:	test   rax,rax
  40cc9e:	je     40ccdc <gen_struct_buffer_benchmark@@Base+0x5c>
  40cca0:	movabs rcx,0x400000003f800000
  40ccaa:	mov    QWORD PTR [rax],rcx
  40ccad:	mov    DWORD PTR [rax+0x8],0x40400000
  40ccb4:	movabs rcx,0x4010cccccccccccd
  40ccbe:	mov    QWORD PTR [rax+0x10],rcx
  40ccc2:	mov    BYTE PTR [rax+0x18],0x8
  40ccc6:	mov    WORD PTR [rax+0x1a],0xaaa
  40cccc:	mov    BYTE PTR [rax+0x1c],0xef
  40ccd0:	mov    rdi,rbx
  40ccd3:	call   40f0a0 <flatcc_builder_end_struct@@Base>
  40ccd8:	mov    ecx,eax
  40ccda:	jmp    40ccde <gen_struct_buffer_benchmark@@Base+0x5e>
  40ccdc:	xor    ecx,ecx
  40ccde:	lea    rsi,[rip+0x8463]        # 415148 <_IO_stdin_used@@Base+0x148>
  40cce5:	mov    rdi,rbx
  40cce8:	xor    edx,edx
  40ccea:	mov    r8d,0x10
  40ccf0:	xor    r9d,r9d
  40ccf3:	call   40e900 <flatcc_builder_create_buffer@@Base>
  40ccf8:	mov    rdi,rbx
  40ccfb:	xor    esi,esi
  40ccfd:	call   4124d0 <flatcc_builder_get_direct_buffer@@Base>
  40cd02:	test   rax,rax
  40cd05:	je     40cd74 <gen_struct_buffer_benchmark@@Base+0xf4>
  40cd07:	mov    edx,DWORD PTR [rax]
  40cd09:	vmovss xmm0,DWORD PTR [rax+rdx*1]
  40cd0e:	vucomiss xmm0,DWORD PTR [rip+0x82f6]        # 41500c <_IO_stdin_used@@Base+0xc>
  40cd16:	jne    40cd74 <gen_struct_buffer_benchmark@@Base+0xf4>
  40cd18:	jp     40cd74 <gen_struct_buffer_benchmark@@Base+0xf4>
  40cd1a:	vmovss xmm0,DWORD PTR [rax+rdx*1+0x4]
  40cd20:	vucomiss xmm0,DWORD PTR [rip+0x82e8]        # 415010 <_IO_stdin_used@@Base+0x10>
  40cd28:	jne    40cd74 <gen_struct_buffer_benchmark@@Base+0xf4>
  40cd2a:	jp     40cd74 <gen_struct_buffer_benchmark@@Base+0xf4>
  40cd2c:	vmovss xmm0,DWORD PTR [rax+rdx*1+0x8]
  40cd32:	vucomiss xmm0,DWORD PTR [rip+0x82de]        # 415018 <_IO_stdin_used@@Base+0x18>
  40cd3a:	jne    40cd74 <gen_struct_buffer_benchmark@@Base+0xf4>
  40cd3c:	jp     40cd74 <gen_struct_buffer_benchmark@@Base+0xf4>
  40cd3e:	vmovsd xmm0,QWORD PTR [rax+rdx*1+0x10]
  40cd44:	vucomisd xmm0,QWORD PTR [rip+0x82dc]        # 415028 <_IO_stdin_used@@Base+0x28>
  40cd4c:	jne    40cd74 <gen_struct_buffer_benchmark@@Base+0xf4>
  40cd4e:	jp     40cd74 <gen_struct_buffer_benchmark@@Base+0xf4>
  40cd50:	cmp    BYTE PTR [rax+rdx*1+0x18],0x8
  40cd55:	jne    40cd74 <gen_struct_buffer_benchmark@@Base+0xf4>
  40cd57:	movzx  ecx,WORD PTR [rax+rdx*1+0x1a]
  40cd5c:	cmp    ecx,0xaaa
  40cd62:	jne    40cd74 <gen_struct_buffer_benchmark@@Base+0xf4>
  40cd64:	xor    ecx,ecx
  40cd66:	cmp    BYTE PTR [rax+rdx*1+0x1c],0xef
  40cd6b:	setne  cl
  40cd6e:	neg    ecx
  40cd70:	mov    eax,ecx
  40cd72:	pop    rbx
  40cd73:	ret    
  40cd74:	mov    eax,0xffffffff
  40cd79:	pop    rbx
  40cd7a:	ret    
  40cd7b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040cd80 <time_struct_buffer@@Base>:
  40cd80:	push   rbp
  40cd81:	push   r15
  40cd83:	push   r14
  40cd85:	push   rbx
  40cd86:	sub    rsp,0x28
  40cd8a:	mov    r14,rdi
  40cd8d:	lea    rdi,[rip+0xb5dc]        # 418370 <_IO_stdin_used@@Base+0x3370>
  40cd94:	call   404060 <puts@plt>
  40cd99:	xor    ebx,ebx
  40cd9b:	lea    rdi,[rsp+0x18]
  40cda0:	xor    esi,esi
  40cda2:	call   404090 <gettimeofday@plt>
  40cda7:	mov    rax,QWORD PTR [rip+0x1131a]        # 41e0c8 <__bss_start@@Base+0x8>
  40cdae:	test   rax,rax
  40cdb1:	jne    40cdc8 <time_struct_buffer@@Base+0x48>
  40cdb3:	vmovups xmm0,XMMWORD PTR [rsp+0x18]
  40cdb9:	vmovups XMMWORD PTR [rip+0x11307],xmm0        # 41e0c8 <__bss_start@@Base+0x8>
  40cdc1:	mov    rax,QWORD PTR [rip+0x11300]        # 41e0c8 <__bss_start@@Base+0x8>
  40cdc8:	mov    r15,QWORD PTR [rsp+0x18]
  40cdcd:	mov    rcx,QWORD PTR [rsp+0x20]
  40cdd2:	sub    rcx,QWORD PTR [rip+0x112f7]        # 41e0d0 <__bss_start@@Base+0x10>
  40cdd9:	sub    r15,rax
  40cddc:	vcvtsi2sd xmm0,xmm1,rcx
  40cde1:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x8247]        # 415030 <_IO_stdin_used@@Base+0x30>
  40cde9:	vmovsd QWORD PTR [rsp+0x10],xmm0
  40cdef:	mov    ebp,0xf4240
  40cdf4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40cdfe:	xchg   ax,ax
  40ce00:	mov    rdi,r14
  40ce03:	call   40cc80 <gen_struct_buffer_benchmark@@Base>
  40ce08:	or     ebx,eax
  40ce0a:	dec    ebp
  40ce0c:	jne    40ce00 <time_struct_buffer@@Base+0x80>
  40ce0e:	vcvtsi2sd xmm0,xmm1,r15
  40ce13:	vmovsd QWORD PTR [rsp+0x8],xmm0
  40ce19:	lea    rdi,[rsp+0x18]
  40ce1e:	xor    esi,esi
  40ce20:	call   404090 <gettimeofday@plt>
  40ce25:	mov    rax,QWORD PTR [rip+0x1129c]        # 41e0c8 <__bss_start@@Base+0x8>
  40ce2c:	test   rax,rax
  40ce2f:	jne    40ce46 <time_struct_buffer@@Base+0xc6>
  40ce31:	vmovups xmm0,XMMWORD PTR [rsp+0x18]
  40ce37:	vmovups XMMWORD PTR [rip+0x11289],xmm0        # 41e0c8 <__bss_start@@Base+0x8>
  40ce3f:	mov    rax,QWORD PTR [rip+0x11282]        # 41e0c8 <__bss_start@@Base+0x8>
  40ce46:	mov    rcx,QWORD PTR [rsp+0x18]
  40ce4b:	sub    rcx,rax
  40ce4e:	mov    rax,QWORD PTR [rsp+0x20]
  40ce53:	vcvtsi2sd xmm0,xmm1,rcx
  40ce58:	sub    rax,QWORD PTR [rip+0x11271]        # 41e0d0 <__bss_start@@Base+0x10>
  40ce5f:	vmovsd xmm1,QWORD PTR [rsp+0x8]
  40ce65:	vaddsd xmm1,xmm1,QWORD PTR [rsp+0x10]
  40ce6b:	vmovsd QWORD PTR [rsp+0x10],xmm1
  40ce71:	vcvtsi2sd xmm1,xmm2,rax
  40ce76:	vdivsd xmm1,xmm1,QWORD PTR [rip+0x81b2]        # 415030 <_IO_stdin_used@@Base+0x30>
  40ce7e:	vaddsd xmm0,xmm1,xmm0
  40ce82:	vmovsd QWORD PTR [rsp+0x8],xmm0
  40ce88:	mov    rdi,r14
  40ce8b:	call   412410 <flatcc_builder_get_buffer_size@@Base>
  40ce90:	mov    r14,rax
  40ce93:	test   ebx,ebx
  40ce95:	je     40cea3 <time_struct_buffer@@Base+0x123>
  40ce97:	lea    rdi,[rip+0xb4e3]        # 418381 <_IO_stdin_used@@Base+0x3381>
  40ce9e:	call   404060 <puts@plt>
  40cea3:	lea    rdi,[rip+0x8f3a]        # 415de4 <_IO_stdin_used@@Base+0xde4>
  40ceaa:	vmovsd xmm0,QWORD PTR [rsp+0x10]
  40ceb0:	vmovsd xmm1,QWORD PTR [rsp+0x8]
  40ceb6:	mov    rsi,r14
  40ceb9:	call   40cb20 <time_monster@@Base+0x110>
  40cebe:	mov    eax,ebx
  40cec0:	add    rsp,0x28
  40cec4:	pop    rbx
  40cec5:	pop    r14
  40cec7:	pop    r15
  40cec9:	pop    rbp
  40ceca:	ret    
  40cecb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040ced0 <main@@Base>:
  40ced0:	push   rbx
  40ced1:	sub    rsp,0x190
  40ced8:	lea    rbx,[rsp+0x8]
  40cedd:	mov    rdi,rbx
  40cee0:	call   40def0 <flatcc_builder_init@@Base>
  40cee5:	lea    rdi,[rip+0xb4a6]        # 418392 <_IO_stdin_used@@Base+0x3392>
  40ceec:	call   404060 <puts@plt>
  40cef1:	mov    rdi,rbx
  40cef4:	call   404d50 <test_table_with_emptystruct@@Base>
  40cef9:	test   eax,eax
  40cefb:	jne    40d041 <main@@Base+0x171>
  40cf01:	lea    rdi,[rsp+0x8]
  40cf06:	call   404900 <test_empty_monster@@Base>
  40cf0b:	test   eax,eax
  40cf0d:	jne    40d041 <main@@Base+0x171>
  40cf13:	lea    rdi,[rsp+0x8]
  40cf18:	call   406440 <test_monster@@Base>
  40cf1d:	test   eax,eax
  40cf1f:	jne    40d041 <main@@Base+0x171>
  40cf25:	lea    rdi,[rsp+0x8]
  40cf2a:	call   4064d0 <test_monster_with_size@@Base>
  40cf2f:	test   eax,eax
  40cf31:	jne    40d041 <main@@Base+0x171>
  40cf37:	lea    rdi,[rsp+0x8]
  40cf3c:	call   4065c0 <test_string@@Base>
  40cf41:	test   eax,eax
  40cf43:	jne    40d041 <main@@Base+0x171>
  40cf49:	lea    rdi,[rsp+0x8]
  40cf4e:	call   40c400 <test_struct_buffer@@Base>
  40cf53:	test   eax,eax
  40cf55:	jne    40d041 <main@@Base+0x171>
  40cf5b:	lea    rdi,[rsp+0x8]
  40cf60:	call   404ac0 <test_typed_empty_monster@@Base>
  40cf65:	test   eax,eax
  40cf67:	jne    40d041 <main@@Base+0x171>
  40cf6d:	lea    rdi,[rsp+0x8]
  40cf72:	call   404e80 <test_typed_table_with_emptystruct@@Base>
  40cf77:	test   eax,eax
  40cf79:	jne    40d041 <main@@Base+0x171>
  40cf7f:	lea    rdi,[rsp+0x8]
  40cf84:	call   40c5d0 <test_typed_struct_buffer@@Base>
  40cf89:	test   eax,eax
  40cf8b:	jne    40d041 <main@@Base+0x171>
  40cf91:	lea    rdi,[rsp+0x8]
  40cf96:	call   409b70 <test_clone_slice@@Base>
  40cf9b:	test   eax,eax
  40cf9d:	jne    40d041 <main@@Base+0x171>
  40cfa3:	lea    rdi,[rsp+0x8]
  40cfa8:	call   40b7c0 <test_add_set_defaults@@Base>
  40cfad:	test   eax,eax
  40cfaf:	jne    40d041 <main@@Base+0x171>
  40cfb5:	lea    rdi,[rsp+0x8]
  40cfba:	call   40a4f0 <test_create_add_field@@Base>
  40cfbf:	test   eax,eax
  40cfc1:	jne    40d041 <main@@Base+0x171>
  40cfc3:	lea    rdi,[rsp+0x8]
  40cfc8:	call   40a790 <test_union_vector@@Base>
  40cfcd:	test   eax,eax
  40cfcf:	jne    40d041 <main@@Base+0x171>
  40cfd1:	lea    rdi,[rsp+0x8]
  40cfd6:	call   4097e0 <test_basic_sort@@Base>
  40cfdb:	test   eax,eax
  40cfdd:	jne    40d041 <main@@Base+0x171>
  40cfdf:	lea    rdi,[rsp+0x8]
  40cfe4:	call   406860 <test_sort_find@@Base>
  40cfe9:	test   eax,eax
  40cfeb:	jne    40d041 <main@@Base+0x171>
  40cfed:	lea    rdi,[rsp+0x8]
  40cff2:	call   407520 <test_scan@@Base>
  40cff7:	test   eax,eax
  40cff9:	jne    40d041 <main@@Base+0x171>
  40cffb:	lea    rdi,[rsp+0x8]
  40d000:	call   40baa0 <test_nested_buffer@@Base>
  40d005:	test   eax,eax
  40d007:	jne    40d041 <main@@Base+0x171>
  40d009:	lea    rdi,[rsp+0x8]
  40d00e:	call   40bd80 <test_nested_buffer_first@@Base>
  40d013:	test   eax,eax
  40d015:	jne    40d041 <main@@Base+0x171>
  40d017:	lea    rdi,[rsp+0x8]
  40d01c:	call   40c060 <test_nested_buffer_using_nest@@Base>
  40d021:	test   eax,eax
  40d023:	jne    40d041 <main@@Base+0x171>
  40d025:	lea    rdi,[rsp+0x8]
  40d02a:	call   4042e0 <test_type_aliases@@Base>
  40d02f:	test   eax,eax
  40d031:	jne    40d041 <main@@Base+0x171>
  40d033:	lea    rdi,[rsp+0x8]
  40d038:	call   40ac70 <test_mixed_type_union@@Base>
  40d03d:	test   eax,eax
  40d03f:	je     40d05b <main@@Base+0x18b>
  40d041:	lea    rdi,[rip+0xb365]        # 4183ad <_IO_stdin_used@@Base+0x33ad>
  40d048:	call   404060 <puts@plt>
  40d04d:	mov    eax,0xffffffff
  40d052:	add    rsp,0x190
  40d059:	pop    rbx
  40d05a:	ret    
  40d05b:	lea    rdi,[rsp+0x8]
  40d060:	call   40e2b0 <flatcc_builder_clear@@Base>
  40d065:	xor    eax,eax
  40d067:	jmp    40d052 <main@@Base+0x182>
  40d069:	nop    DWORD PTR [rax+0x0]
  40d070:	push   rbx
  40d071:	mov    rbx,rdi
  40d074:	mov    edx,0x1
  40d079:	xor    esi,esi
  40d07b:	mov    ecx,0x1
  40d080:	call   412e80 <flatcc_verify_field@@Base>
  40d085:	test   eax,eax
  40d087:	jne    40d1b8 <main@@Base+0x2e8>
  40d08d:	mov    edx,0x1
  40d092:	mov    rdi,rbx
  40d095:	mov    esi,0x1
  40d09a:	mov    ecx,0x1
  40d09f:	call   412e80 <flatcc_verify_field@@Base>
  40d0a4:	test   eax,eax
  40d0a6:	jne    40d1b8 <main@@Base+0x2e8>
  40d0ac:	mov    edx,0x2
  40d0b1:	mov    rdi,rbx
  40d0b4:	mov    esi,0x2
  40d0b9:	mov    ecx,0x2
  40d0be:	call   412e80 <flatcc_verify_field@@Base>
  40d0c3:	test   eax,eax
  40d0c5:	jne    40d1b8 <main@@Base+0x2e8>
  40d0cb:	mov    edx,0x2
  40d0d0:	mov    rdi,rbx
  40d0d3:	mov    esi,0x3
  40d0d8:	mov    ecx,0x2
  40d0dd:	call   412e80 <flatcc_verify_field@@Base>
  40d0e2:	test   eax,eax
  40d0e4:	jne    40d1b8 <main@@Base+0x2e8>
  40d0ea:	mov    edx,0x4
  40d0ef:	mov    rdi,rbx
  40d0f2:	mov    esi,0x4
  40d0f7:	mov    ecx,0x4
  40d0fc:	call   412e80 <flatcc_verify_field@@Base>
  40d101:	test   eax,eax
  40d103:	jne    40d1b8 <main@@Base+0x2e8>
  40d109:	mov    edx,0x4
  40d10e:	mov    rdi,rbx
  40d111:	mov    esi,0x5
  40d116:	mov    ecx,0x4
  40d11b:	call   412e80 <flatcc_verify_field@@Base>
  40d120:	test   eax,eax
  40d122:	jne    40d1b8 <main@@Base+0x2e8>
  40d128:	mov    edx,0x8
  40d12d:	mov    rdi,rbx
  40d130:	mov    esi,0x6
  40d135:	mov    ecx,0x8
  40d13a:	call   412e80 <flatcc_verify_field@@Base>
  40d13f:	test   eax,eax
  40d141:	jne    40d1b8 <main@@Base+0x2e8>
  40d143:	mov    edx,0x8
  40d148:	mov    rdi,rbx
  40d14b:	mov    esi,0x7
  40d150:	mov    ecx,0x8
  40d155:	call   412e80 <flatcc_verify_field@@Base>
  40d15a:	test   eax,eax
  40d15c:	jne    40d1b8 <main@@Base+0x2e8>
  40d15e:	mov    edx,0x4
  40d163:	mov    rdi,rbx
  40d166:	mov    esi,0x8
  40d16b:	mov    ecx,0x4
  40d170:	call   412e80 <flatcc_verify_field@@Base>
  40d175:	test   eax,eax
  40d177:	jne    40d1b8 <main@@Base+0x2e8>
  40d179:	mov    edx,0x8
  40d17e:	mov    rdi,rbx
  40d181:	mov    esi,0x9
  40d186:	mov    ecx,0x8
  40d18b:	call   412e80 <flatcc_verify_field@@Base>
  40d190:	test   eax,eax
  40d192:	jne    40d1b8 <main@@Base+0x2e8>
  40d194:	mov    ecx,0x1
  40d199:	mov    r9d,0xffffffff
  40d19f:	mov    rdi,rbx
  40d1a2:	mov    esi,0xa
  40d1a7:	xor    edx,edx
  40d1a9:	mov    r8d,0x1
  40d1af:	call   412f90 <flatcc_verify_vector_field@@Base>
  40d1b4:	test   eax,eax
  40d1b6:	je     40d1ba <main@@Base+0x2ea>
  40d1b8:	pop    rbx
  40d1b9:	ret    
  40d1ba:	mov    ecx,0x8
  40d1bf:	mov    r9d,0x1fffffff
  40d1c5:	mov    rdi,rbx
  40d1c8:	mov    esi,0xb
  40d1cd:	xor    edx,edx
  40d1cf:	mov    r8d,0x8
  40d1d5:	pop    rbx
  40d1d6:	jmp    412f90 <flatcc_verify_vector_field@@Base>
  40d1db:	nop    DWORD PTR [rax+rax*1+0x0]
  40d1e0:	push   rbx
  40d1e1:	mov    rbx,rdi
  40d1e4:	mov    edx,0x20
  40d1e9:	xor    esi,esi
  40d1eb:	mov    ecx,0x10
  40d1f0:	call   412e80 <flatcc_verify_field@@Base>
  40d1f5:	test   eax,eax
  40d1f7:	jne    40d602 <main@@Base+0x732>
  40d1fd:	mov    edx,0x2
  40d202:	mov    rdi,rbx
  40d205:	mov    esi,0x2
  40d20a:	mov    ecx,0x2
  40d20f:	call   412e80 <flatcc_verify_field@@Base>
  40d214:	test   eax,eax
  40d216:	jne    40d602 <main@@Base+0x732>
  40d21c:	mov    edx,0x2
  40d221:	mov    rdi,rbx
  40d224:	mov    esi,0x1
  40d229:	mov    ecx,0x2
  40d22e:	call   412e80 <flatcc_verify_field@@Base>
  40d233:	test   eax,eax
  40d235:	jne    40d602 <main@@Base+0x732>
  40d23b:	mov    rdi,rbx
  40d23e:	mov    esi,0x3
  40d243:	mov    edx,0x1
  40d248:	call   412ee0 <flatcc_verify_string_field@@Base>
  40d24d:	test   eax,eax
  40d24f:	jne    40d602 <main@@Base+0x732>
  40d255:	mov    edx,0x1
  40d25a:	mov    rdi,rbx
  40d25d:	mov    esi,0x6
  40d262:	mov    ecx,0x1
  40d267:	call   412e80 <flatcc_verify_field@@Base>
  40d26c:	test   eax,eax
  40d26e:	jne    40d602 <main@@Base+0x732>
  40d274:	mov    ecx,0x1
  40d279:	mov    r9d,0xffffffff
  40d27f:	mov    rdi,rbx
  40d282:	mov    esi,0x5
  40d287:	xor    edx,edx
  40d289:	mov    r8d,0x1
  40d28f:	call   412f90 <flatcc_verify_vector_field@@Base>
  40d294:	test   eax,eax
  40d296:	jne    40d602 <main@@Base+0x732>
  40d29c:	lea    rcx,[rip+0xffffffffffffff3d]        # 40d1e0 <main@@Base+0x310>
  40d2a3:	mov    rdi,rbx
  40d2a6:	mov    esi,0xb
  40d2ab:	xor    edx,edx
  40d2ad:	call   413300 <flatcc_verify_table_vector_field@@Base>
  40d2b2:	test   eax,eax
  40d2b4:	jne    40d602 <main@@Base+0x732>
  40d2ba:	mov    rdi,rbx
  40d2bd:	mov    esi,0xa
  40d2c2:	xor    edx,edx
  40d2c4:	call   413060 <flatcc_verify_string_vector_field@@Base>
  40d2c9:	test   eax,eax
  40d2cb:	jne    40d602 <main@@Base+0x732>
  40d2d1:	mov    rdi,rbx
  40d2d4:	mov    esi,0x1c
  40d2d9:	xor    edx,edx
  40d2db:	call   413060 <flatcc_verify_string_vector_field@@Base>
  40d2e0:	test   eax,eax
  40d2e2:	jne    40d602 <main@@Base+0x732>
  40d2e8:	mov    ecx,0x1
  40d2ed:	mov    r9d,0xffffffff
  40d2f3:	mov    rdi,rbx
  40d2f6:	mov    esi,0x18
  40d2fb:	xor    edx,edx
  40d2fd:	mov    r8d,0x1
  40d303:	call   412f90 <flatcc_verify_vector_field@@Base>
  40d308:	test   eax,eax
  40d30a:	jne    40d602 <main@@Base+0x732>
  40d310:	mov    ecx,0x8
  40d315:	mov    r9d,0x1fffffff
  40d31b:	mov    rdi,rbx
  40d31e:	mov    esi,0x1d
  40d323:	xor    edx,edx
  40d325:	mov    r8d,0x4
  40d32b:	call   412f90 <flatcc_verify_vector_field@@Base>
  40d330:	test   eax,eax
  40d332:	jne    40d602 <main@@Base+0x732>
  40d338:	lea    rcx,[rip+0xfffffffffffffea1]        # 40d1e0 <main@@Base+0x310>
  40d33f:	mov    rdi,rbx
  40d342:	mov    esi,0xc
  40d347:	xor    edx,edx
  40d349:	call   4131c0 <flatcc_verify_table_field@@Base>
  40d34e:	test   eax,eax
  40d350:	jne    40d602 <main@@Base+0x732>
  40d356:	lea    rcx,[rip+0x2c3]        # 40d620 <main@@Base+0x750>
  40d35d:	mov    rdi,rbx
  40d360:	mov    esi,0x8
  40d365:	xor    edx,edx
  40d367:	call   414070 <flatcc_verify_union_field@@Base>
  40d36c:	test   eax,eax
  40d36e:	jne    40d602 <main@@Base+0x732>
  40d374:	mov    ecx,0x4
  40d379:	mov    r9d,0x3fffffff
  40d37f:	mov    rdi,rbx
  40d382:	mov    esi,0x9
  40d387:	xor    edx,edx
  40d389:	mov    r8d,0x2
  40d38f:	call   412f90 <flatcc_verify_vector_field@@Base>
  40d394:	test   eax,eax
  40d396:	jne    40d602 <main@@Base+0x732>
  40d39c:	mov    ecx,0x4
  40d3a1:	mov    r9d,0x3fffffff
  40d3a7:	mov    rdi,rbx
  40d3aa:	mov    esi,0x1f
  40d3af:	xor    edx,edx
  40d3b1:	mov    r8d,0x2
  40d3b7:	call   412f90 <flatcc_verify_vector_field@@Base>
  40d3bc:	test   eax,eax
  40d3be:	jne    40d602 <main@@Base+0x732>
  40d3c4:	lea    r9,[rip+0xfffffffffffffe15]        # 40d1e0 <main@@Base+0x310>
  40d3cb:	mov    rdi,rbx
  40d3ce:	mov    esi,0xd
  40d3d3:	xor    edx,edx
  40d3d5:	xor    ecx,ecx
  40d3d7:	mov    r8d,0x1
  40d3dd:	call   413d90 <flatcc_verify_table_as_nested_root@@Base>
  40d3e2:	test   eax,eax
  40d3e4:	jne    40d602 <main@@Base+0x732>
  40d3ea:	lea    rcx,[rip+0x24f]        # 40d640 <main@@Base+0x770>
  40d3f1:	mov    rdi,rbx
  40d3f4:	mov    esi,0xe
  40d3f9:	xor    edx,edx
  40d3fb:	call   4131c0 <flatcc_verify_table_field@@Base>
  40d400:	test   eax,eax
  40d402:	jne    40d602 <main@@Base+0x732>
  40d408:	mov    edx,0x1
  40d40d:	mov    rdi,rbx
  40d410:	mov    esi,0xf
  40d415:	mov    ecx,0x1
  40d41a:	call   412e80 <flatcc_verify_field@@Base>
  40d41f:	test   eax,eax
  40d421:	jne    40d602 <main@@Base+0x732>
  40d427:	mov    edx,0x4
  40d42c:	mov    rdi,rbx
  40d42f:	mov    esi,0x10
  40d434:	mov    ecx,0x4
  40d439:	call   412e80 <flatcc_verify_field@@Base>
  40d43e:	test   eax,eax
  40d440:	jne    40d602 <main@@Base+0x732>
  40d446:	mov    edx,0x4
  40d44b:	mov    rdi,rbx
  40d44e:	mov    esi,0x11
  40d453:	mov    ecx,0x4
  40d458:	call   412e80 <flatcc_verify_field@@Base>
  40d45d:	test   eax,eax
  40d45f:	jne    40d602 <main@@Base+0x732>
  40d465:	mov    edx,0x8
  40d46a:	mov    rdi,rbx
  40d46d:	mov    esi,0x12
  40d472:	mov    ecx,0x8
  40d477:	call   412e80 <flatcc_verify_field@@Base>
  40d47c:	test   eax,eax
  40d47e:	jne    40d602 <main@@Base+0x732>
  40d484:	mov    edx,0x8
  40d489:	mov    rdi,rbx
  40d48c:	mov    esi,0x13
  40d491:	mov    ecx,0x8
  40d496:	call   412e80 <flatcc_verify_field@@Base>
  40d49b:	test   eax,eax
  40d49d:	jne    40d602 <main@@Base+0x732>
  40d4a3:	mov    edx,0x4
  40d4a8:	mov    rdi,rbx
  40d4ab:	mov    esi,0x14
  40d4b0:	mov    ecx,0x4
  40d4b5:	call   412e80 <flatcc_verify_field@@Base>
  40d4ba:	test   eax,eax
  40d4bc:	jne    40d602 <main@@Base+0x732>
  40d4c2:	mov    edx,0x4
  40d4c7:	mov    rdi,rbx
  40d4ca:	mov    esi,0x15
  40d4cf:	mov    ecx,0x4
  40d4d4:	call   412e80 <flatcc_verify_field@@Base>
  40d4d9:	test   eax,eax
  40d4db:	jne    40d602 <main@@Base+0x732>
  40d4e1:	mov    edx,0x8
  40d4e6:	mov    rdi,rbx
  40d4e9:	mov    esi,0x16
  40d4ee:	mov    ecx,0x8
  40d4f3:	call   412e80 <flatcc_verify_field@@Base>
  40d4f8:	test   eax,eax
  40d4fa:	jne    40d602 <main@@Base+0x732>
  40d500:	mov    edx,0x8
  40d505:	mov    rdi,rbx
  40d508:	mov    esi,0x17
  40d50d:	mov    ecx,0x8
  40d512:	call   412e80 <flatcc_verify_field@@Base>
  40d517:	test   eax,eax
  40d519:	jne    40d602 <main@@Base+0x732>
  40d51f:	mov    edx,0x4
  40d524:	mov    rdi,rbx
  40d527:	mov    esi,0x19
  40d52c:	mov    ecx,0x4
  40d531:	call   412e80 <flatcc_verify_field@@Base>
  40d536:	test   eax,eax
  40d538:	jne    40d602 <main@@Base+0x732>
  40d53e:	mov    edx,0x4
  40d543:	mov    rdi,rbx
  40d546:	mov    esi,0x1a
  40d54b:	mov    ecx,0x4
  40d550:	call   412e80 <flatcc_verify_field@@Base>
  40d555:	test   eax,eax
  40d557:	jne    40d602 <main@@Base+0x732>
  40d55d:	mov    edx,0x4
  40d562:	mov    rdi,rbx
  40d565:	mov    esi,0x1b
  40d56a:	mov    ecx,0x4
  40d56f:	call   412e80 <flatcc_verify_field@@Base>
  40d574:	test   eax,eax
  40d576:	jne    40d602 <main@@Base+0x732>
  40d57c:	mov    ecx,0x1
  40d581:	mov    r9d,0xffffffff
  40d587:	mov    rdi,rbx
  40d58a:	mov    esi,0x1e
  40d58f:	xor    edx,edx
  40d591:	mov    r8d,0x1
  40d597:	call   412f90 <flatcc_verify_vector_field@@Base>
  40d59c:	test   eax,eax
  40d59e:	jne    40d602 <main@@Base+0x732>
  40d5a0:	mov    ecx,0x8
  40d5a5:	mov    r9d,0x1fffffff
  40d5ab:	mov    rdi,rbx
  40d5ae:	mov    esi,0x20
  40d5b3:	xor    edx,edx
  40d5b5:	mov    r8d,0x8
  40d5bb:	call   412f90 <flatcc_verify_vector_field@@Base>
  40d5c0:	test   eax,eax
  40d5c2:	jne    40d602 <main@@Base+0x732>
  40d5c4:	mov    ecx,0x8
  40d5c9:	mov    r9d,0x1fffffff
  40d5cf:	mov    rdi,rbx
  40d5d2:	mov    esi,0x21
  40d5d7:	xor    edx,edx
  40d5d9:	mov    r8d,0x8
  40d5df:	call   412f90 <flatcc_verify_vector_field@@Base>
  40d5e4:	test   eax,eax
  40d5e6:	jne    40d602 <main@@Base+0x732>
  40d5e8:	lea    rcx,[rip+0xa1]        # 40d690 <main@@Base+0x7c0>
  40d5ef:	mov    rdi,rbx
  40d5f2:	mov    esi,0x22
  40d5f7:	xor    edx,edx
  40d5f9:	call   4131c0 <flatcc_verify_table_field@@Base>
  40d5fe:	test   eax,eax
  40d600:	je     40d604 <main@@Base+0x734>
  40d602:	pop    rbx
  40d603:	ret    
  40d604:	lea    rcx,[rip+0x95]        # 40d6a0 <main@@Base+0x7d0>
  40d60b:	mov    rdi,rbx
  40d60e:	mov    esi,0x23
  40d613:	xor    edx,edx
  40d615:	pop    rbx
  40d616:	jmp    4131c0 <flatcc_verify_table_field@@Base>
  40d61b:	nop    DWORD PTR [rax+rax*1+0x0]
  40d620:	mov    al,BYTE PTR [rdi+0x10]
  40d623:	dec    al
  40d625:	cmp    al,0x3
  40d627:	ja     40d63d <main@@Base+0x76d>
  40d629:	movsx  rax,al
  40d62d:	lea    rcx,[rip+0x1068c]        # 41dcc0 <flatcc_builder_padding_base@@Base+0x58e0>
  40d634:	mov    rsi,QWORD PTR [rcx+rax*8]
  40d638:	jmp    413600 <flatcc_verify_union_table@@Base>
  40d63d:	xor    eax,eax
  40d63f:	ret    
  40d640:	push   rbx
  40d641:	mov    rbx,rdi
  40d644:	xor    esi,esi
  40d646:	xor    edx,edx
  40d648:	call   412ee0 <flatcc_verify_string_field@@Base>
  40d64d:	test   eax,eax
  40d64f:	jne    40d66c <main@@Base+0x79c>
  40d651:	mov    edx,0x8
  40d656:	mov    rdi,rbx
  40d659:	mov    esi,0x1
  40d65e:	mov    ecx,0x8
  40d663:	call   412e80 <flatcc_verify_field@@Base>
  40d668:	test   eax,eax
  40d66a:	je     40d66e <main@@Base+0x79e>
  40d66c:	pop    rbx
  40d66d:	ret    
  40d66e:	mov    edx,0x2
  40d673:	mov    rdi,rbx
  40d676:	mov    esi,0x2
  40d67b:	mov    ecx,0x2
  40d680:	pop    rbx
  40d681:	jmp    412e80 <flatcc_verify_field@@Base>
  40d686:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d690:	xor    eax,eax
  40d692:	ret    
  40d693:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d69d:	nop    DWORD PTR [rax]
  40d6a0:	push   rbx
  40d6a1:	mov    rbx,rdi
  40d6a4:	mov    ecx,0x1
  40d6a9:	mov    r9d,0xffffffff
  40d6af:	mov    esi,0x0
  40d6b4:	xor    edx,edx
  40d6b6:	mov    r8d,0x1
  40d6bc:	call   412f90 <flatcc_verify_vector_field@@Base>
  40d6c1:	test   eax,eax
  40d6c3:	jne    40d6e9 <main@@Base+0x819>
  40d6c5:	mov    ecx,0x1
  40d6ca:	mov    r9d,0xffffffff
  40d6d0:	mov    rdi,rbx
  40d6d3:	mov    esi,0x1
  40d6d8:	xor    edx,edx
  40d6da:	mov    r8d,0x1
  40d6e0:	call   412f90 <flatcc_verify_vector_field@@Base>
  40d6e5:	test   eax,eax
  40d6e7:	je     40d6eb <main@@Base+0x81b>
  40d6e9:	pop    rbx
  40d6ea:	ret    
  40d6eb:	lea    r9,[rip+0xfffffffffffffaee]        # 40d1e0 <main@@Base+0x310>
  40d6f2:	mov    rdi,rbx
  40d6f5:	mov    esi,0x2
  40d6fa:	xor    edx,edx
  40d6fc:	xor    ecx,ecx
  40d6fe:	mov    r8d,0x1
  40d704:	pop    rbx
  40d705:	jmp    413d90 <flatcc_verify_table_as_nested_root@@Base>
  40d70a:	nop    WORD PTR [rax+rax*1+0x0]
  40d710:	push   rbx
  40d711:	mov    rbx,rdi
  40d714:	mov    edx,0x1
  40d719:	xor    esi,esi
  40d71b:	mov    ecx,0x1
  40d720:	call   412e80 <flatcc_verify_field@@Base>
  40d725:	test   eax,eax
  40d727:	jne    40d75f <main@@Base+0x88f>
  40d729:	mov    edx,0x1
  40d72e:	mov    rdi,rbx
  40d731:	mov    esi,0x1
  40d736:	mov    ecx,0x1
  40d73b:	call   412e80 <flatcc_verify_field@@Base>
  40d740:	test   eax,eax
  40d742:	jne    40d75f <main@@Base+0x88f>
  40d744:	mov    edx,0x1
  40d749:	mov    rdi,rbx
  40d74c:	mov    esi,0x2
  40d751:	mov    ecx,0x1
  40d756:	call   412e80 <flatcc_verify_field@@Base>
  40d75b:	test   eax,eax
  40d75d:	je     40d761 <main@@Base+0x891>
  40d75f:	pop    rbx
  40d760:	ret    
  40d761:	mov    edx,0x1
  40d766:	mov    rdi,rbx
  40d769:	mov    esi,0x3
  40d76e:	mov    ecx,0x1
  40d773:	pop    rbx
  40d774:	jmp    412e80 <flatcc_verify_field@@Base>
  40d779:	nop    DWORD PTR [rax+0x0]
  40d780:	xor    eax,eax
  40d782:	ret    
  40d783:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d78d:	nop    DWORD PTR [rax]
  40d790:	push   rbx
  40d791:	mov    rbx,rdi
  40d794:	lea    rcx,[rip+0x45]        # 40d7e0 <main@@Base+0x910>
  40d79b:	xor    esi,esi
  40d79d:	xor    edx,edx
  40d79f:	call   4131c0 <flatcc_verify_table_field@@Base>
  40d7a4:	test   eax,eax
  40d7a6:	jne    40d7c2 <main@@Base+0x8f2>
  40d7a8:	lea    rcx,[rip+0x81]        # 40d830 <main@@Base+0x960>
  40d7af:	mov    rdi,rbx
  40d7b2:	mov    esi,0x1
  40d7b7:	xor    edx,edx
  40d7b9:	call   4131c0 <flatcc_verify_table_field@@Base>
  40d7be:	test   eax,eax
  40d7c0:	je     40d7c4 <main@@Base+0x8f4>
  40d7c2:	pop    rbx
  40d7c3:	ret    
  40d7c4:	lea    rcx,[rip+0xfffffffffffffe55]        # 40d620 <main@@Base+0x750>
  40d7cb:	mov    rdi,rbx
  40d7ce:	mov    esi,0x3
  40d7d3:	xor    edx,edx
  40d7d5:	pop    rbx
  40d7d6:	jmp    4141b0 <flatcc_verify_union_vector_field@@Base>
  40d7db:	nop    DWORD PTR [rax+rax*1+0x0]
  40d7e0:	push   rbx
  40d7e1:	mov    rbx,rdi
  40d7e4:	lea    rcx,[rip+0xd5]        # 40d8c0 <main@@Base+0x9f0>
  40d7eb:	xor    esi,esi
  40d7ed:	xor    edx,edx
  40d7ef:	call   4131c0 <flatcc_verify_table_field@@Base>
  40d7f4:	test   eax,eax
  40d7f6:	jne    40d812 <main@@Base+0x942>
  40d7f8:	lea    rcx,[rip+0x1a1]        # 40d9a0 <main@@Base+0xad0>
  40d7ff:	mov    rdi,rbx
  40d802:	mov    esi,0x1
  40d807:	xor    edx,edx
  40d809:	call   4131c0 <flatcc_verify_table_field@@Base>
  40d80e:	test   eax,eax
  40d810:	je     40d814 <main@@Base+0x944>
  40d812:	pop    rbx
  40d813:	ret    
  40d814:	lea    rcx,[rip+0x1c5]        # 40d9e0 <main@@Base+0xb10>
  40d81b:	mov    rdi,rbx
  40d81e:	mov    esi,0x2
  40d823:	xor    edx,edx
  40d825:	pop    rbx
  40d826:	jmp    4131c0 <flatcc_verify_table_field@@Base>
  40d82b:	nop    DWORD PTR [rax+rax*1+0x0]
  40d830:	push   rbx
  40d831:	mov    rbx,rdi
  40d834:	lea    rcx,[rip+0x1e5]        # 40da20 <main@@Base+0xb50>
  40d83b:	mov    esi,0x1
  40d840:	xor    edx,edx
  40d842:	call   414070 <flatcc_verify_union_field@@Base>
  40d847:	test   eax,eax
  40d849:	jne    40d899 <main@@Base+0x9c9>
  40d84b:	lea    rcx,[rip+0x1ce]        # 40da20 <main@@Base+0xb50>
  40d852:	mov    rdi,rbx
  40d855:	mov    esi,0x3
  40d85a:	xor    edx,edx
  40d85c:	call   414070 <flatcc_verify_union_field@@Base>
  40d861:	test   eax,eax
  40d863:	jne    40d899 <main@@Base+0x9c9>
  40d865:	lea    rcx,[rip+0x1b4]        # 40da20 <main@@Base+0xb50>
  40d86c:	mov    rdi,rbx
  40d86f:	mov    esi,0x5
  40d874:	xor    edx,edx
  40d876:	call   414070 <flatcc_verify_union_field@@Base>
  40d87b:	test   eax,eax
  40d87d:	jne    40d899 <main@@Base+0x9c9>
  40d87f:	lea    rcx,[rip+0x19a]        # 40da20 <main@@Base+0xb50>
  40d886:	mov    rdi,rbx
  40d889:	mov    esi,0x7
  40d88e:	xor    edx,edx
  40d890:	call   414070 <flatcc_verify_union_field@@Base>
  40d895:	test   eax,eax
  40d897:	je     40d89b <main@@Base+0x9cb>
  40d899:	pop    rbx
  40d89a:	ret    
  40d89b:	lea    rcx,[rip+0x17e]        # 40da20 <main@@Base+0xb50>
  40d8a2:	mov    rdi,rbx
  40d8a5:	mov    esi,0x9
  40d8aa:	xor    edx,edx
  40d8ac:	pop    rbx
  40d8ad:	jmp    4141b0 <flatcc_verify_union_vector_field@@Base>
  40d8b2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d8bc:	nop    DWORD PTR [rax+0x0]
  40d8c0:	push   rbx
  40d8c1:	mov    rbx,rdi
  40d8c4:	xor    esi,esi
  40d8c6:	xor    edx,edx
  40d8c8:	call   412ee0 <flatcc_verify_string_field@@Base>
  40d8cd:	test   eax,eax
  40d8cf:	jne    40d986 <main@@Base+0xab6>
  40d8d5:	mov    edx,0x4
  40d8da:	mov    rdi,rbx
  40d8dd:	mov    esi,0x1
  40d8e2:	mov    ecx,0x4
  40d8e7:	call   412e80 <flatcc_verify_field@@Base>
  40d8ec:	test   eax,eax
  40d8ee:	jne    40d986 <main@@Base+0xab6>
  40d8f4:	mov    rdi,rbx
  40d8f7:	mov    esi,0x2
  40d8fc:	xor    edx,edx
  40d8fe:	call   412ee0 <flatcc_verify_string_field@@Base>
  40d903:	test   eax,eax
  40d905:	jne    40d986 <main@@Base+0xab6>
  40d907:	mov    edx,0x8
  40d90c:	mov    rdi,rbx
  40d90f:	mov    esi,0x3
  40d914:	mov    ecx,0x8
  40d919:	call   412e80 <flatcc_verify_field@@Base>
  40d91e:	test   eax,eax
  40d920:	jne    40d986 <main@@Base+0xab6>
  40d922:	mov    rdi,rbx
  40d925:	mov    esi,0x4
  40d92a:	xor    edx,edx
  40d92c:	call   412ee0 <flatcc_verify_string_field@@Base>
  40d931:	test   eax,eax
  40d933:	jne    40d986 <main@@Base+0xab6>
  40d935:	mov    edx,0x8
  40d93a:	mov    rdi,rbx
  40d93d:	mov    esi,0x5
  40d942:	mov    ecx,0x8
  40d947:	call   412e80 <flatcc_verify_field@@Base>
  40d94c:	test   eax,eax
  40d94e:	jne    40d986 <main@@Base+0xab6>
  40d950:	mov    edx,0x4
  40d955:	mov    rdi,rbx
  40d958:	mov    esi,0x6
  40d95d:	mov    ecx,0x4
  40d962:	call   412e80 <flatcc_verify_field@@Base>
  40d967:	test   eax,eax
  40d969:	jne    40d986 <main@@Base+0xab6>
  40d96b:	mov    edx,0x8
  40d970:	mov    rdi,rbx
  40d973:	mov    esi,0x7
  40d978:	mov    ecx,0x8
  40d97d:	call   412e80 <flatcc_verify_field@@Base>
  40d982:	test   eax,eax
  40d984:	je     40d988 <main@@Base+0xab8>
  40d986:	pop    rbx
  40d987:	ret    
  40d988:	mov    edx,0x4
  40d98d:	mov    rdi,rbx
  40d990:	mov    esi,0x8
  40d995:	mov    ecx,0x4
  40d99a:	pop    rbx
  40d99b:	jmp    412e80 <flatcc_verify_field@@Base>
  40d9a0:	push   rbx
  40d9a1:	mov    rbx,rdi
  40d9a4:	mov    edx,0x8
  40d9a9:	xor    esi,esi
  40d9ab:	mov    ecx,0x8
  40d9b0:	call   412e80 <flatcc_verify_field@@Base>
  40d9b5:	test   eax,eax
  40d9b7:	je     40d9bb <main@@Base+0xaeb>
  40d9b9:	pop    rbx
  40d9ba:	ret    
  40d9bb:	mov    edx,0x4
  40d9c0:	mov    rdi,rbx
  40d9c3:	mov    esi,0x1
  40d9c8:	mov    ecx,0x4
  40d9cd:	pop    rbx
  40d9ce:	jmp    412e80 <flatcc_verify_field@@Base>
  40d9d3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40d9dd:	nop    DWORD PTR [rax]
  40d9e0:	push   rbx
  40d9e1:	mov    rbx,rdi
  40d9e4:	mov    edx,0x8
  40d9e9:	xor    esi,esi
  40d9eb:	mov    ecx,0x8
  40d9f0:	call   412e80 <flatcc_verify_field@@Base>
  40d9f5:	test   eax,eax
  40d9f7:	je     40d9fb <main@@Base+0xb2b>
  40d9f9:	pop    rbx
  40d9fa:	ret    
  40d9fb:	mov    edx,0x4
  40da00:	mov    rdi,rbx
  40da03:	mov    esi,0x1
  40da08:	mov    ecx,0x4
  40da0d:	pop    rbx
  40da0e:	jmp    412e80 <flatcc_verify_field@@Base>
  40da13:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40da1d:	nop    DWORD PTR [rax]
  40da20:	mov    al,BYTE PTR [rdi+0x10]
  40da23:	inc    al
  40da25:	cmp    al,0xc
  40da27:	ja     40da50 <main@@Base+0xb80>
  40da29:	movzx  eax,al
  40da2c:	lea    rcx,[rip+0x763d]        # 415070 <_IO_stdin_used@@Base+0x70>
  40da33:	movsxd rax,DWORD PTR [rcx+rax*4]
  40da37:	add    rax,rcx
  40da3a:	jmp    rax
  40da3c:	jmp    413720 <flatcc_verify_union_string@@Base>
  40da41:	mov    esi,0x4
  40da46:	mov    edx,0x4
  40da4b:	jmp    4136e0 <flatcc_verify_union_struct@@Base>
  40da50:	xor    eax,eax
  40da52:	ret    
  40da53:	lea    rsi,[rip+0x16]        # 40da70 <main@@Base+0xba0>
  40da5a:	jmp    413600 <flatcc_verify_union_table@@Base>
  40da5f:	mov    esi,0x2
  40da64:	mov    edx,0x2
  40da69:	jmp    4136e0 <flatcc_verify_union_struct@@Base>
  40da6e:	xchg   ax,ax
  40da70:	mov    edx,0x4
  40da75:	xor    esi,esi
  40da77:	mov    ecx,0x4
  40da7c:	jmp    412e80 <flatcc_verify_field@@Base>
  40da81:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40da8b:	nop    DWORD PTR [rax+rax*1+0x0]
  40da90:	xor    esi,esi
  40da92:	xor    edx,edx
  40da94:	mov    ecx,0x1
  40da99:	jmp    412e80 <flatcc_verify_field@@Base>
  40da9e:	xchg   ax,ax
  40daa0:	push   rbp
  40daa1:	push   r15
  40daa3:	push   r14
  40daa5:	push   r13
  40daa7:	push   r12
  40daa9:	push   rbx
  40daaa:	sub    rsp,0x18
  40daae:	lea    rbp,[rsi+rsi*1]
  40dab2:	mov    QWORD PTR [rsp+0x10],rdx
  40dab7:	cmp    rbp,rdx
  40daba:	ja     40dcc8 <main@@Base+0xdf8>
  40dac0:	mov    r12,rsi
  40dac3:	mov    QWORD PTR [rsp+0x8],rdi
  40dac8:	nop    DWORD PTR [rax+rax*1+0x0]
  40dad0:	cmp    rbp,QWORD PTR [rsp+0x10]
  40dad5:	jae    40dbd0 <main@@Base+0xd00>
  40dadb:	test   rdi,rdi
  40dade:	je     40dcf6 <main@@Base+0xe26>
  40dae4:	mov    esi,DWORD PTR [rdi-0x4]
  40dae7:	cmp    rbp,rsi
  40daea:	jae    40dcf6 <main@@Base+0xe26>
  40daf0:	lea    rcx,[rdi+rbp*4]
  40daf4:	mov    edx,DWORD PTR [rdi+rbp*4]
  40daf7:	lea    rax,[rcx+rdx*1]
  40dafb:	movsxd rcx,DWORD PTR [rdx+rcx*1]
  40daff:	mov    rdx,rax
  40db02:	sub    rdx,rcx
  40db05:	cmp    WORD PTR [rdx],0xc
  40db09:	jb     40dcd7 <main@@Base+0xe07>
  40db0f:	neg    rcx
  40db12:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  40db17:	test   rcx,rcx
  40db1a:	je     40dcd7 <main@@Base+0xe07>
  40db20:	mov    rbx,rbp
  40db23:	or     rbx,0x1
  40db27:	cmp    rbx,rsi
  40db2a:	jae    40dcf6 <main@@Base+0xe26>
  40db30:	mov    QWORD PTR [rsp],rsi
  40db34:	lea    rsi,[rdi+rbx*4]
  40db38:	mov    edi,DWORD PTR [rdi+rbx*4]
  40db3b:	lea    rdx,[rsi+rdi*1]
  40db3f:	movsxd rsi,DWORD PTR [rdi+rsi*1]
  40db43:	mov    rdi,rdx
  40db46:	sub    rdi,rsi
  40db49:	cmp    WORD PTR [rdi],0xc
  40db4d:	jb     40dcd7 <main@@Base+0xe07>
  40db53:	neg    rsi
  40db56:	movzx  esi,WORD PTR [rdx+rsi*1+0xa]
  40db5b:	test   rsi,rsi
  40db5e:	je     40dcd7 <main@@Base+0xe07>
  40db64:	lea    rdi,[rax+rcx*1]
  40db68:	mov    eax,DWORD PTR [rax+rcx*1]
  40db6b:	add    rdi,rax
  40db6e:	add    rdi,0x4
  40db72:	lea    rax,[rdx+rsi*1]
  40db76:	mov    ecx,DWORD PTR [rdx+rsi*1]
  40db79:	lea    rsi,[rcx+rax*1]
  40db7d:	add    rsi,0x4
  40db81:	mov    r14d,DWORD PTR [rcx+rax*1]
  40db85:	mov    r15d,DWORD PTR [rdi-0x4]
  40db89:	cmp    r15d,r14d
  40db8c:	mov    edx,r14d
  40db8f:	cmovb  edx,r15d
  40db93:	call   404050 <strncmp@plt>
  40db98:	test   eax,eax
  40db9a:	mov    rax,rbx
  40db9d:	cmovne rax,rbp
  40dba1:	cmovs  rax,rbx
  40dba5:	cmovne rbp,rax
  40dba9:	cmp    r15d,r14d
  40dbac:	cmovb  rbp,rax
  40dbb0:	mov    r13,rbp
  40dbb3:	mov    rdi,QWORD PTR [rsp+0x8]
  40dbb8:	mov    rsi,QWORD PTR [rsp]
  40dbbc:	cmp    r12,rsi
  40dbbf:	jb     40dbe8 <main@@Base+0xd18>
  40dbc1:	jmp    40dcf6 <main@@Base+0xe26>
  40dbc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40dbd0:	test   rdi,rdi
  40dbd3:	je     40dcf6 <main@@Base+0xe26>
  40dbd9:	mov    esi,DWORD PTR [rdi-0x4]
  40dbdc:	mov    r13,rbp
  40dbdf:	cmp    r12,rsi
  40dbe2:	jae    40dcf6 <main@@Base+0xe26>
  40dbe8:	lea    r15,[rdi+r12*4]
  40dbec:	mov    r14d,DWORD PTR [rdi+r12*4]
  40dbf0:	lea    rax,[r15+r14*1]
  40dbf4:	movsxd rcx,DWORD PTR [r14+r15*1]
  40dbf8:	mov    rdx,rax
  40dbfb:	sub    rdx,rcx
  40dbfe:	cmp    WORD PTR [rdx],0xc
  40dc02:	jb     40dcd7 <main@@Base+0xe07>
  40dc08:	neg    rcx
  40dc0b:	movzx  ecx,WORD PTR [rax+rcx*1+0xa]
  40dc10:	test   rcx,rcx
  40dc13:	je     40dcd7 <main@@Base+0xe07>
  40dc19:	cmp    r13,rsi
  40dc1c:	jae    40dcf6 <main@@Base+0xe26>
  40dc22:	lea    rbx,[rdi+r13*4]
  40dc26:	mov    ebp,DWORD PTR [rdi+r13*4]
  40dc2a:	lea    rdx,[rbx+rbp*1]
  40dc2e:	movsxd rsi,DWORD PTR [rbp+rbx*1+0x0]
  40dc33:	mov    rdi,rdx
  40dc36:	sub    rdi,rsi
  40dc39:	cmp    WORD PTR [rdi],0xc
  40dc3d:	jb     40dcd7 <main@@Base+0xe07>
  40dc43:	neg    rsi
  40dc46:	movzx  esi,WORD PTR [rdx+rsi*1+0xa]
  40dc4b:	test   rsi,rsi
  40dc4e:	je     40dcd7 <main@@Base+0xe07>
  40dc54:	lea    rdi,[rax+rcx*1]
  40dc58:	mov    eax,DWORD PTR [rax+rcx*1]
  40dc5b:	add    rdi,rax
  40dc5e:	add    rdi,0x4
  40dc62:	lea    rax,[rdx+rsi*1]
  40dc66:	mov    ecx,DWORD PTR [rdx+rsi*1]
  40dc69:	lea    rsi,[rcx+rax*1]
  40dc6d:	add    rsi,0x4
  40dc71:	mov    edx,DWORD PTR [rcx+rax*1]
  40dc74:	mov    eax,DWORD PTR [rdi-0x4]
  40dc77:	cmp    eax,edx
  40dc79:	setb   BYTE PTR [rsp]
  40dc7d:	cmovb  edx,eax
  40dc80:	call   404050 <strncmp@plt>
  40dc85:	test   eax,eax
  40dc87:	setne  cl
  40dc8a:	setle  al
  40dc8d:	or     cl,BYTE PTR [rsp]
  40dc90:	cmp    cl,0x1
  40dc93:	mov    rdi,QWORD PTR [rsp+0x8]
  40dc98:	jne    40dcc8 <main@@Base+0xdf8>
  40dc9a:	test   al,al
  40dc9c:	je     40dcc8 <main@@Base+0xdf8>
  40dc9e:	sub    r12d,r13d
  40dca1:	lea    eax,[r12*4+0x0]
  40dca9:	sub    ebp,eax
  40dcab:	lea    eax,[r14+r12*4]
  40dcaf:	mov    DWORD PTR [r15],ebp
  40dcb2:	mov    DWORD PTR [rbx],eax
  40dcb4:	mov    rbp,r13
  40dcb7:	add    rbp,r13
  40dcba:	mov    r12,r13
  40dcbd:	cmp    rbp,QWORD PTR [rsp+0x10]
  40dcc2:	jbe    40dad0 <main@@Base+0xc00>
  40dcc8:	add    rsp,0x18
  40dccc:	pop    rbx
  40dccd:	pop    r12
  40dccf:	pop    r13
  40dcd1:	pop    r14
  40dcd3:	pop    r15
  40dcd5:	pop    rbp
  40dcd6:	ret    
  40dcd7:	lea    rdi,[rip+0x866c]        # 41634a <_IO_stdin_used@@Base+0x134a>
  40dcde:	lea    rsi,[rip+0x8152]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40dce5:	lea    rcx,[rip+0x860d]        # 4162f9 <_IO_stdin_used@@Base+0x12f9>
  40dcec:	mov    edx,0x2bb
  40dcf1:	call   4040a0 <__assert_fail@plt>
  40dcf6:	lea    rdi,[rip+0x86c7]        # 4163c4 <_IO_stdin_used@@Base+0x13c4>
  40dcfd:	lea    rsi,[rip+0x8133]        # 415e37 <_IO_stdin_used@@Base+0xe37>
  40dd04:	lea    rcx,[rip+0x881a]        # 416525 <_IO_stdin_used@@Base+0x1525>
  40dd0b:	mov    edx,0x2b5
  40dd10:	call   4040a0 <__assert_fail@plt>
  40dd15:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40dd1f:	nop

000000000040dd20 <flatcc_builder_default_alloc@@Base>:
  40dd20:	push   rbp
  40dd21:	push   r15
  40dd23:	push   r14
  40dd25:	push   r12
  40dd27:	push   rbx
  40dd28:	mov    rbx,rsi
  40dd2b:	test   rdx,rdx
  40dd2e:	je     40dd58 <flatcc_builder_default_alloc@@Base+0x38>
  40dd30:	mov    r14d,ecx
  40dd33:	dec    r8d
  40dd36:	cmp    r8d,0x6
  40dd3a:	ja     40dd76 <flatcc_builder_default_alloc@@Base+0x56>
  40dd3c:	mov    eax,0x100
  40dd41:	lea    rcx,[rip+0xa678]        # 4183c0 <_IO_stdin_used@@Base+0x33c0>
  40dd48:	movsxd rsi,DWORD PTR [rcx+r8*4]
  40dd4c:	add    rsi,rcx
  40dd4f:	jmp    rsi
  40dd51:	mov    eax,0x120
  40dd56:	jmp    40dd90 <flatcc_builder_default_alloc@@Base+0x70>
  40dd58:	mov    rdi,QWORD PTR [rbx]
  40dd5b:	xor    r15d,r15d
  40dd5e:	test   rdi,rdi
  40dd61:	je     40ddef <flatcc_builder_default_alloc@@Base+0xcf>
  40dd67:	call   404030 <free@plt>
  40dd6c:	vxorps xmm0,xmm0,xmm0
  40dd70:	vmovups XMMWORD PTR [rbx],xmm0
  40dd74:	jmp    40ddef <flatcc_builder_default_alloc@@Base+0xcf>
  40dd76:	mov    eax,0x20
  40dd7b:	jmp    40dd90 <flatcc_builder_default_alloc@@Base+0x70>
  40dd7d:	mov    rax,rdx
  40dd80:	jmp    40dd90 <flatcc_builder_default_alloc@@Base+0x70>
  40dd82:	mov    eax,0x40
  40dd87:	nop    WORD PTR [rax+rax*1+0x0]
  40dd90:	mov    rbp,rax
  40dd93:	add    rax,rax
  40dd96:	cmp    rbp,rdx
  40dd99:	jb     40dd90 <flatcc_builder_default_alloc@@Base+0x70>
  40dd9b:	mov    rax,QWORD PTR [rbx+0x8]
  40dd9f:	xor    r15d,r15d
  40dda2:	cmp    rax,rdx
  40dda5:	jb     40ddaf <flatcc_builder_default_alloc@@Base+0x8f>
  40dda7:	shr    rax,1
  40ddaa:	cmp    rax,rbp
  40ddad:	jae    40ddef <flatcc_builder_default_alloc@@Base+0xcf>
  40ddaf:	mov    rdi,QWORD PTR [rbx]
  40ddb2:	mov    rsi,rbp
  40ddb5:	call   404130 <realloc@plt>
  40ddba:	test   rax,rax
  40ddbd:	je     40dde9 <flatcc_builder_default_alloc@@Base+0xc9>
  40ddbf:	mov    r12,rax
  40ddc2:	test   r14d,r14d
  40ddc5:	je     40dde0 <flatcc_builder_default_alloc@@Base+0xc0>
  40ddc7:	mov    rax,QWORD PTR [rbx+0x8]
  40ddcb:	mov    rdx,rbp
  40ddce:	sub    rdx,rax
  40ddd1:	jbe    40dde0 <flatcc_builder_default_alloc@@Base+0xc0>
  40ddd3:	mov    rdi,r12
  40ddd6:	add    rdi,rax
  40ddd9:	xor    esi,esi
  40dddb:	call   4040b0 <memset@plt>
  40dde0:	mov    QWORD PTR [rbx],r12
  40dde3:	mov    QWORD PTR [rbx+0x8],rbp
  40dde7:	jmp    40ddef <flatcc_builder_default_alloc@@Base+0xcf>
  40dde9:	mov    r15d,0xffffffff
  40ddef:	mov    eax,r15d
  40ddf2:	pop    rbx
  40ddf3:	pop    r12
  40ddf5:	pop    r14
  40ddf7:	pop    r15
  40ddf9:	pop    rbp
  40ddfa:	ret    
  40ddfb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040de00 <flatcc_builder_flush_vtable_cache@@Base>:
  40de00:	push   rbx
  40de01:	cmp    QWORD PTR [rdi+0xd8],0x0
  40de09:	je     40de34 <flatcc_builder_flush_vtable_cache@@Base+0x34>
  40de0b:	mov    rbx,rdi
  40de0e:	mov    rdi,QWORD PTR [rdi+0xa8]
  40de15:	mov    rdx,QWORD PTR [rbx+0xb0]
  40de1c:	xor    esi,esi
  40de1e:	call   4040b0 <memset@plt>
  40de23:	movabs rax,0x1000000000
  40de2d:	mov    QWORD PTR [rbx+0xe0],rax
  40de34:	pop    rbx
  40de35:	ret    
  40de36:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000040de40 <flatcc_builder_custom_init@@Base>:
  40de40:	vxorps xmm0,xmm0,xmm0
  40de44:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  40de4c:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  40de54:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  40de5c:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  40de64:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  40de6c:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  40de74:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  40de7c:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  40de84:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  40de89:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  40de8e:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  40de93:	vmovups YMMWORD PTR [rdi],ymm0
  40de97:	mov    QWORD PTR [rdi+0x180],0x0
  40dea2:	test   rsi,rsi
  40dea5:	je     40dec9 <flatcc_builder_custom_init@@Base+0x89>
  40dea7:	test   rcx,rcx
  40deaa:	jne    40deb3 <flatcc_builder_custom_init@@Base+0x73>
  40deac:	lea    rcx,[rip+0xfffffffffffffe6d]        # 40dd20 <flatcc_builder_default_alloc@@Base>
  40deb3:	mov    QWORD PTR [rdi+0x40],r8
  40deb7:	mov    QWORD PTR [rdi+0x50],rcx
  40debb:	mov    QWORD PTR [rdi+0x38],rdx
  40debf:	mov    QWORD PTR [rdi+0x48],rsi
  40dec3:	xor    eax,eax
  40dec5:	vzeroupper 
  40dec8:	ret    
  40dec9:	mov    DWORD PTR [rdi+0x128],0x1
  40ded3:	lea    rdx,[rdi+0x130]
  40deda:	lea    rsi,[rip+0x4a6f]        # 412950 <flatcc_emitter@@Base>
  40dee1:	test   rcx,rcx
  40dee4:	je     40deac <flatcc_builder_custom_init@@Base+0x6c>
  40dee6:	jmp    40deb3 <flatcc_builder_custom_init@@Base+0x73>
  40dee8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040def0 <flatcc_builder_init@@Base>:
  40def0:	vxorps xmm0,xmm0,xmm0
  40def4:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  40defc:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  40df01:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  40df06:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  40df0e:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  40df16:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  40df1e:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  40df26:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  40df2e:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  40df36:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  40df3e:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  40df43:	vmovups YMMWORD PTR [rdi],ymm0
  40df47:	mov    QWORD PTR [rdi+0x180],0x0
  40df52:	mov    DWORD PTR [rdi+0x128],0x1
  40df5c:	lea    rax,[rdi+0x130]
  40df63:	mov    QWORD PTR [rdi+0x40],0x0
  40df6b:	lea    rcx,[rip+0xfffffffffffffdae]        # 40dd20 <flatcc_builder_default_alloc@@Base>
  40df72:	mov    QWORD PTR [rdi+0x50],rcx
  40df76:	mov    QWORD PTR [rdi+0x38],rax
  40df7a:	lea    rax,[rip+0x49cf]        # 412950 <flatcc_emitter@@Base>
  40df81:	mov    QWORD PTR [rdi+0x48],rax
  40df85:	xor    eax,eax
  40df87:	vzeroupper 
  40df8a:	ret    
  40df8b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040df90 <flatcc_builder_custom_reset@@Base>:
  40df90:	push   rbp
  40df91:	push   r15
  40df93:	push   r14
  40df95:	push   r12
  40df97:	push   rbx
  40df98:	mov    r15d,edx
  40df9b:	mov    r14d,esi
  40df9e:	mov    r12,rdi
  40dfa1:	lea    rbp,[rdi+0x58]
  40dfa5:	xor    ebx,ebx
  40dfa7:	jmp    40dfc8 <flatcc_builder_custom_reset@@Base+0x38>
  40dfa9:	nop    DWORD PTR [rax+0x0]
  40dfb0:	cmp    QWORD PTR [rbp+0x8],0x0
  40dfb5:	jne    40e0c6 <flatcc_builder_custom_reset@@Base+0x136>
  40dfbb:	inc    rbx
  40dfbe:	add    rbp,0x10
  40dfc2:	cmp    rbx,0x8
  40dfc6:	je     40e00f <flatcc_builder_custom_reset@@Base+0x7f>
  40dfc8:	mov    rdi,QWORD PTR [rbp+0x0]
  40dfcc:	test   rdi,rdi
  40dfcf:	je     40dfb0 <flatcc_builder_custom_reset@@Base+0x20>
  40dfd1:	test   r15d,r15d
  40dfd4:	je     40e002 <flatcc_builder_custom_reset@@Base+0x72>
  40dfd6:	cmp    rbx,0x5
  40dfda:	je     40e002 <flatcc_builder_custom_reset@@Base+0x72>
  40dfdc:	mov    rdi,QWORD PTR [r12+0x40]
  40dfe1:	mov    edx,0x1
  40dfe6:	mov    rsi,rbp
  40dfe9:	mov    ecx,0x1
  40dfee:	mov    r8d,ebx
  40dff1:	call   QWORD PTR [r12+0x50]
  40dff6:	test   eax,eax
  40dff8:	jne    40e0b6 <flatcc_builder_custom_reset@@Base+0x126>
  40dffe:	mov    rdi,QWORD PTR [rbp+0x0]
  40e002:	mov    rdx,QWORD PTR [rbp+0x8]
  40e006:	xor    esi,esi
  40e008:	call   4040b0 <memset@plt>
  40e00d:	jmp    40dfbb <flatcc_builder_custom_reset@@Base+0x2b>
  40e00f:	mov    DWORD PTR [r12+0xe0],0x0
  40e01b:	cmp    DWORD PTR [r12+0xe4],0x0
  40e024:	je     40e032 <flatcc_builder_custom_reset@@Base+0xa2>
  40e026:	mov    DWORD PTR [r12+0xe4],0x10
  40e032:	mov    WORD PTR [r12+0xe8],0x0
  40e03d:	mov    QWORD PTR [r12+0xf0],0x0
  40e049:	mov    QWORD PTR [r12+0x20],0x0
  40e052:	vxorps xmm0,xmm0,xmm0
  40e056:	vmovups XMMWORD PTR [r12+0xfc],xmm0
  40e060:	mov    rax,QWORD PTR [r12+0x58]
  40e065:	mov    rcx,QWORD PTR [r12+0x68]
  40e06a:	mov    QWORD PTR [r12+0x18],rcx
  40e06f:	mov    rcx,QWORD PTR [r12+0x88]
  40e077:	mov    QWORD PTR [r12],rcx
  40e07b:	mov    QWORD PTR [r12+0x8],rax
  40e080:	mov    QWORD PTR [r12+0x30],0x0
  40e089:	test   r14d,r14d
  40e08c:	je     40e098 <flatcc_builder_custom_reset@@Base+0x108>
  40e08e:	vmovups XMMWORD PTR [r12+0x118],xmm0
  40e098:	xor    ebx,ebx
  40e09a:	cmp    DWORD PTR [r12+0x128],0x0
  40e0a3:	je     40e0bb <flatcc_builder_custom_reset@@Base+0x12b>
  40e0a5:	add    r12,0x130
  40e0ac:	mov    rdi,r12
  40e0af:	call   4127d0 <flatcc_emitter_reset@@Base>
  40e0b4:	jmp    40e0bb <flatcc_builder_custom_reset@@Base+0x12b>
  40e0b6:	mov    ebx,0xffffffff
  40e0bb:	mov    eax,ebx
  40e0bd:	pop    rbx
  40e0be:	pop    r12
  40e0c0:	pop    r14
  40e0c2:	pop    r15
  40e0c4:	pop    rbp
  40e0c5:	ret    
  40e0c6:	lea    rdi,[rip+0xa583]        # 418650 <flatcc_builder_padding_base@@Base+0x270>
  40e0cd:	lea    rsi,[rip+0xa58e]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40e0d4:	lea    rcx,[rip+0xa5e7]        # 4186c2 <flatcc_builder_padding_base@@Base+0x2e2>
  40e0db:	mov    edx,0x1b2
  40e0e0:	call   4040a0 <__assert_fail@plt>
  40e0e5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40e0ef:	nop

000000000040e0f0 <flatcc_builder_reset@@Base>:
  40e0f0:	push   rbx
  40e0f1:	mov    rbx,rdi
  40e0f4:	mov    rdi,QWORD PTR [rdi+0x58]
  40e0f8:	mov    rdx,QWORD PTR [rbx+0x60]
  40e0fc:	test   rdi,rdi
  40e0ff:	je     40e10a <flatcc_builder_reset@@Base+0x1a>
  40e101:	xor    esi,esi
  40e103:	call   4040b0 <memset@plt>
  40e108:	jmp    40e113 <flatcc_builder_reset@@Base+0x23>
  40e10a:	test   rdx,rdx
  40e10d:	jne    40e290 <flatcc_builder_reset@@Base+0x1a0>
  40e113:	mov    rdi,QWORD PTR [rbx+0x68]
  40e117:	mov    rdx,QWORD PTR [rbx+0x70]
  40e11b:	test   rdi,rdi
  40e11e:	je     40e129 <flatcc_builder_reset@@Base+0x39>
  40e120:	xor    esi,esi
  40e122:	call   4040b0 <memset@plt>
  40e127:	jmp    40e132 <flatcc_builder_reset@@Base+0x42>
  40e129:	test   rdx,rdx
  40e12c:	jne    40e290 <flatcc_builder_reset@@Base+0x1a0>
  40e132:	mov    rdi,QWORD PTR [rbx+0x78]
  40e136:	mov    rdx,QWORD PTR [rbx+0x80]
  40e13d:	test   rdi,rdi
  40e140:	je     40e14b <flatcc_builder_reset@@Base+0x5b>
  40e142:	xor    esi,esi
  40e144:	call   4040b0 <memset@plt>
  40e149:	jmp    40e154 <flatcc_builder_reset@@Base+0x64>
  40e14b:	test   rdx,rdx
  40e14e:	jne    40e290 <flatcc_builder_reset@@Base+0x1a0>
  40e154:	mov    rdi,QWORD PTR [rbx+0x88]
  40e15b:	mov    rdx,QWORD PTR [rbx+0x90]
  40e162:	test   rdi,rdi
  40e165:	je     40e170 <flatcc_builder_reset@@Base+0x80>
  40e167:	xor    esi,esi
  40e169:	call   4040b0 <memset@plt>
  40e16e:	jmp    40e179 <flatcc_builder_reset@@Base+0x89>
  40e170:	test   rdx,rdx
  40e173:	jne    40e290 <flatcc_builder_reset@@Base+0x1a0>
  40e179:	mov    rdi,QWORD PTR [rbx+0x98]
  40e180:	mov    rdx,QWORD PTR [rbx+0xa0]
  40e187:	test   rdi,rdi
  40e18a:	je     40e195 <flatcc_builder_reset@@Base+0xa5>
  40e18c:	xor    esi,esi
  40e18e:	call   4040b0 <memset@plt>
  40e193:	jmp    40e19e <flatcc_builder_reset@@Base+0xae>
  40e195:	test   rdx,rdx
  40e198:	jne    40e290 <flatcc_builder_reset@@Base+0x1a0>
  40e19e:	mov    rdi,QWORD PTR [rbx+0xa8]
  40e1a5:	mov    rdx,QWORD PTR [rbx+0xb0]
  40e1ac:	test   rdi,rdi
  40e1af:	je     40e1ba <flatcc_builder_reset@@Base+0xca>
  40e1b1:	xor    esi,esi
  40e1b3:	call   4040b0 <memset@plt>
  40e1b8:	jmp    40e1c3 <flatcc_builder_reset@@Base+0xd3>
  40e1ba:	test   rdx,rdx
  40e1bd:	jne    40e290 <flatcc_builder_reset@@Base+0x1a0>
  40e1c3:	mov    rdi,QWORD PTR [rbx+0xb8]
  40e1ca:	mov    rdx,QWORD PTR [rbx+0xc0]
  40e1d1:	test   rdi,rdi
  40e1d4:	je     40e1df <flatcc_builder_reset@@Base+0xef>
  40e1d6:	xor    esi,esi
  40e1d8:	call   4040b0 <memset@plt>
  40e1dd:	jmp    40e1e8 <flatcc_builder_reset@@Base+0xf8>
  40e1df:	test   rdx,rdx
  40e1e2:	jne    40e290 <flatcc_builder_reset@@Base+0x1a0>
  40e1e8:	mov    rdi,QWORD PTR [rbx+0xc8]
  40e1ef:	mov    rdx,QWORD PTR [rbx+0xd0]
  40e1f6:	test   rdi,rdi
  40e1f9:	je     40e204 <flatcc_builder_reset@@Base+0x114>
  40e1fb:	xor    esi,esi
  40e1fd:	call   4040b0 <memset@plt>
  40e202:	jmp    40e20d <flatcc_builder_reset@@Base+0x11d>
  40e204:	test   rdx,rdx
  40e207:	jne    40e290 <flatcc_builder_reset@@Base+0x1a0>
  40e20d:	mov    DWORD PTR [rbx+0xe0],0x0
  40e217:	cmp    DWORD PTR [rbx+0xe4],0x0
  40e21e:	je     40e22a <flatcc_builder_reset@@Base+0x13a>
  40e220:	mov    DWORD PTR [rbx+0xe4],0x10
  40e22a:	mov    WORD PTR [rbx+0xe8],0x0
  40e233:	mov    QWORD PTR [rbx+0xf0],0x0
  40e23e:	mov    QWORD PTR [rbx+0x20],0x0
  40e246:	vxorps xmm0,xmm0,xmm0
  40e24a:	vmovups XMMWORD PTR [rbx+0xfc],xmm0
  40e252:	mov    rax,QWORD PTR [rbx+0x58]
  40e256:	mov    rcx,QWORD PTR [rbx+0x68]
  40e25a:	mov    QWORD PTR [rbx+0x18],rcx
  40e25e:	mov    rcx,QWORD PTR [rbx+0x88]
  40e265:	mov    QWORD PTR [rbx],rcx
  40e268:	mov    QWORD PTR [rbx+0x8],rax
  40e26c:	mov    QWORD PTR [rbx+0x30],0x0
  40e274:	cmp    DWORD PTR [rbx+0x128],0x0
  40e27b:	je     40e28c <flatcc_builder_reset@@Base+0x19c>
  40e27d:	add    rbx,0x130
  40e284:	mov    rdi,rbx
  40e287:	call   4127d0 <flatcc_emitter_reset@@Base>
  40e28c:	xor    eax,eax
  40e28e:	pop    rbx
  40e28f:	ret    
  40e290:	lea    rdi,[rip+0xa3b9]        # 418650 <flatcc_builder_padding_base@@Base+0x270>
  40e297:	lea    rsi,[rip+0xa3c4]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40e29e:	lea    rcx,[rip+0xa41d]        # 4186c2 <flatcc_builder_padding_base@@Base+0x2e2>
  40e2a5:	mov    edx,0x1b2
  40e2aa:	call   4040a0 <__assert_fail@plt>
  40e2af:	nop

000000000040e2b0 <flatcc_builder_clear@@Base>:
  40e2b0:	push   rbx
  40e2b1:	mov    rbx,rdi
  40e2b4:	lea    rsi,[rdi+0x58]
  40e2b8:	mov    rdi,QWORD PTR [rdi+0x40]
  40e2bc:	xor    edx,edx
  40e2be:	xor    ecx,ecx
  40e2c0:	xor    r8d,r8d
  40e2c3:	call   QWORD PTR [rbx+0x50]
  40e2c6:	lea    rsi,[rbx+0x68]
  40e2ca:	mov    rdi,QWORD PTR [rbx+0x40]
  40e2ce:	xor    edx,edx
  40e2d0:	xor    ecx,ecx
  40e2d2:	mov    r8d,0x1
  40e2d8:	call   QWORD PTR [rbx+0x50]
  40e2db:	lea    rsi,[rbx+0x78]
  40e2df:	mov    rdi,QWORD PTR [rbx+0x40]
  40e2e3:	xor    edx,edx
  40e2e5:	xor    ecx,ecx
  40e2e7:	mov    r8d,0x2
  40e2ed:	call   QWORD PTR [rbx+0x50]
  40e2f0:	lea    rsi,[rbx+0x88]
  40e2f7:	mov    rdi,QWORD PTR [rbx+0x40]
  40e2fb:	xor    edx,edx
  40e2fd:	xor    ecx,ecx
  40e2ff:	mov    r8d,0x3
  40e305:	call   QWORD PTR [rbx+0x50]
  40e308:	lea    rsi,[rbx+0x98]
  40e30f:	mov    rdi,QWORD PTR [rbx+0x40]
  40e313:	xor    edx,edx
  40e315:	xor    ecx,ecx
  40e317:	mov    r8d,0x4
  40e31d:	call   QWORD PTR [rbx+0x50]
  40e320:	lea    rsi,[rbx+0xa8]
  40e327:	mov    rdi,QWORD PTR [rbx+0x40]
  40e32b:	xor    edx,edx
  40e32d:	xor    ecx,ecx
  40e32f:	mov    r8d,0x5
  40e335:	call   QWORD PTR [rbx+0x50]
  40e338:	lea    rsi,[rbx+0xb8]
  40e33f:	mov    rdi,QWORD PTR [rbx+0x40]
  40e343:	xor    edx,edx
  40e345:	xor    ecx,ecx
  40e347:	mov    r8d,0x6
  40e34d:	call   QWORD PTR [rbx+0x50]
  40e350:	lea    rsi,[rbx+0xc8]
  40e357:	mov    rdi,QWORD PTR [rbx+0x40]
  40e35b:	xor    edx,edx
  40e35d:	xor    ecx,ecx
  40e35f:	mov    r8d,0x7
  40e365:	call   QWORD PTR [rbx+0x50]
  40e368:	cmp    DWORD PTR [rbx+0x128],0x0
  40e36f:	je     40e37d <flatcc_builder_clear@@Base+0xcd>
  40e371:	lea    rdi,[rbx+0x130]
  40e378:	call   4128d0 <flatcc_emitter_clear@@Base>
  40e37d:	vxorps xmm0,xmm0,xmm0
  40e381:	vmovups YMMWORD PTR [rbx+0x160],ymm0
  40e389:	vmovups YMMWORD PTR [rbx+0x140],ymm0
  40e391:	vmovups YMMWORD PTR [rbx+0x120],ymm0
  40e399:	vmovups YMMWORD PTR [rbx+0x100],ymm0
  40e3a1:	vmovups YMMWORD PTR [rbx+0xe0],ymm0
  40e3a9:	vmovups YMMWORD PTR [rbx+0xc0],ymm0
  40e3b1:	vmovups YMMWORD PTR [rbx+0xa0],ymm0
  40e3b9:	vmovups YMMWORD PTR [rbx+0x80],ymm0
  40e3c1:	vmovups YMMWORD PTR [rbx+0x60],ymm0
  40e3c6:	vmovups YMMWORD PTR [rbx+0x40],ymm0
  40e3cb:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  40e3d0:	vmovups YMMWORD PTR [rbx],ymm0
  40e3d4:	mov    QWORD PTR [rbx+0x180],0x0
  40e3df:	pop    rbx
  40e3e0:	vzeroupper 
  40e3e3:	ret    
  40e3e4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40e3ee:	xchg   ax,ax

000000000040e3f0 <flatcc_builder_enter_user_frame_ptr@@Base>:
  40e3f0:	push   r15
  40e3f2:	push   r14
  40e3f4:	push   r12
  40e3f6:	push   rbx
  40e3f7:	push   rax
  40e3f8:	mov    r14,rsi
  40e3fb:	mov    r15,rdi
  40e3fe:	add    r14,0xf
  40e402:	and    r14,0xfffffffffffffff8
  40e406:	mov    rbx,QWORD PTR [rdi+0x180]
  40e40d:	lea    r12,[rdi+0xc8]
  40e414:	lea    rdx,[rbx+r14*1]
  40e418:	cmp    rdx,QWORD PTR [rdi+0xd0]
  40e41f:	jbe    40e438 <flatcc_builder_enter_user_frame_ptr@@Base+0x48>
  40e421:	mov    rdi,QWORD PTR [r15+0x40]
  40e425:	mov    rsi,r12
  40e428:	xor    ecx,ecx
  40e42a:	mov    r8d,0x7
  40e430:	call   QWORD PTR [r15+0x50]
  40e434:	test   eax,eax
  40e436:	jne    40e488 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
  40e438:	add    rbx,QWORD PTR [r12]
  40e43c:	je     40e477 <flatcc_builder_enter_user_frame_ptr@@Base+0x87>
  40e43e:	mov    rdi,rbx
  40e441:	xor    esi,esi
  40e443:	mov    rdx,r14
  40e446:	call   4040b0 <memset@plt>
  40e44b:	mov    rax,QWORD PTR [r15+0x178]
  40e452:	mov    QWORD PTR [rbx],rax
  40e455:	add    rbx,0x8
  40e459:	mov    rax,QWORD PTR [r15+0x180]
  40e460:	lea    rcx,[rax+0x8]
  40e464:	mov    QWORD PTR [r15+0x178],rcx
  40e46b:	add    rax,r14
  40e46e:	mov    QWORD PTR [r15+0x180],rax
  40e475:	jmp    40e479 <flatcc_builder_enter_user_frame_ptr@@Base+0x89>
  40e477:	xor    ebx,ebx
  40e479:	mov    rax,rbx
  40e47c:	add    rsp,0x8
  40e480:	pop    rbx
  40e481:	pop    r12
  40e483:	pop    r14
  40e485:	pop    r15
  40e487:	ret    
  40e488:	lea    rdi,[rip+0xb393]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  40e48f:	lea    rsi,[rip+0xa1cc]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40e496:	lea    rcx,[rip+0xb1bf]        # 41965c <flatcc_builder_padding_base@@Base+0x127c>
  40e49d:	mov    edx,0x134
  40e4a2:	call   4040a0 <__assert_fail@plt>
  40e4a7:	nop    WORD PTR [rax+rax*1+0x0]

000000000040e4b0 <flatcc_builder_enter_user_frame@@Base>:
  40e4b0:	push   r15
  40e4b2:	push   r14
  40e4b4:	push   r12
  40e4b6:	push   rbx
  40e4b7:	push   rax
  40e4b8:	mov    r14,rsi
  40e4bb:	mov    rbx,rdi
  40e4be:	add    r14,0xf
  40e4c2:	and    r14,0xfffffffffffffff8
  40e4c6:	mov    r15,QWORD PTR [rdi+0x180]
  40e4cd:	lea    r12,[rdi+0xc8]
  40e4d4:	lea    rdx,[r15+r14*1]
  40e4d8:	cmp    rdx,QWORD PTR [rdi+0xd0]
  40e4df:	jbe    40e4f7 <flatcc_builder_enter_user_frame@@Base+0x47>
  40e4e1:	mov    rdi,QWORD PTR [rbx+0x40]
  40e4e5:	mov    rsi,r12
  40e4e8:	xor    ecx,ecx
  40e4ea:	mov    r8d,0x7
  40e4f0:	call   QWORD PTR [rbx+0x50]
  40e4f3:	test   eax,eax
  40e4f5:	jne    40e540 <flatcc_builder_enter_user_frame@@Base+0x90>
  40e4f7:	add    r15,QWORD PTR [r12]
  40e4fb:	je     40e532 <flatcc_builder_enter_user_frame@@Base+0x82>
  40e4fd:	mov    rdi,r15
  40e500:	xor    esi,esi
  40e502:	mov    rdx,r14
  40e505:	call   4040b0 <memset@plt>
  40e50a:	mov    rax,QWORD PTR [rbx+0x178]
  40e511:	mov    QWORD PTR [r15],rax
  40e514:	mov    rcx,QWORD PTR [rbx+0x180]
  40e51b:	lea    rax,[rcx+0x8]
  40e51f:	mov    QWORD PTR [rbx+0x178],rax
  40e526:	add    rcx,r14
  40e529:	mov    QWORD PTR [rbx+0x180],rcx
  40e530:	jmp    40e534 <flatcc_builder_enter_user_frame@@Base+0x84>
  40e532:	xor    eax,eax
  40e534:	add    rsp,0x8
  40e538:	pop    rbx
  40e539:	pop    r12
  40e53b:	pop    r14
  40e53d:	pop    r15
  40e53f:	ret    
  40e540:	lea    rdi,[rip+0xb2db]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  40e547:	lea    rsi,[rip+0xa114]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40e54e:	lea    rcx,[rip+0xb107]        # 41965c <flatcc_builder_padding_base@@Base+0x127c>
  40e555:	mov    edx,0x134
  40e55a:	call   4040a0 <__assert_fail@plt>
  40e55f:	nop

000000000040e560 <flatcc_builder_exit_user_frame@@Base>:
  40e560:	push   rax
  40e561:	mov    rax,QWORD PTR [rdi+0x178]
  40e568:	test   rax,rax
  40e56b:	je     40e58f <flatcc_builder_exit_user_frame@@Base+0x2f>
  40e56d:	mov    rcx,QWORD PTR [rdi+0xc8]
  40e574:	mov    edx,eax
  40e576:	add    rax,0xfffffffffffffff8
  40e57a:	mov    QWORD PTR [rdi+0x180],rax
  40e581:	mov    rax,QWORD PTR [rcx+rdx*1-0x8]
  40e586:	mov    QWORD PTR [rdi+0x178],rax
  40e58d:	pop    rcx
  40e58e:	ret    
  40e58f:	lea    rdi,[rip+0xa16a]        # 418700 <flatcc_builder_padding_base@@Base+0x320>
  40e596:	lea    rsi,[rip+0xa0c5]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40e59d:	lea    rcx,[rip+0xa175]        # 418719 <flatcc_builder_padding_base@@Base+0x339>
  40e5a4:	mov    edx,0x21e
  40e5a9:	call   4040a0 <__assert_fail@plt>
  40e5ae:	xchg   ax,ax

000000000040e5b0 <flatcc_builder_exit_user_frame_at@@Base>:
  40e5b0:	push   rax
  40e5b1:	cmp    QWORD PTR [rdi+0x178],rsi
  40e5b8:	jb     40e5e8 <flatcc_builder_exit_user_frame_at@@Base+0x38>
  40e5ba:	mov    QWORD PTR [rdi+0x178],rsi
  40e5c1:	test   rsi,rsi
  40e5c4:	je     40e607 <flatcc_builder_exit_user_frame_at@@Base+0x57>
  40e5c6:	mov    rax,QWORD PTR [rdi+0xc8]
  40e5cd:	mov    ecx,esi
  40e5cf:	add    rsi,0xfffffffffffffff8
  40e5d3:	mov    QWORD PTR [rdi+0x180],rsi
  40e5da:	mov    rax,QWORD PTR [rax+rcx*1-0x8]
  40e5df:	mov    QWORD PTR [rdi+0x178],rax
  40e5e6:	pop    rcx
  40e5e7:	ret    
  40e5e8:	lea    rdi,[rip+0xa164]        # 418753 <flatcc_builder_padding_base@@Base+0x373>
  40e5ef:	lea    rsi,[rip+0xa06c]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40e5f6:	lea    rcx,[rip+0xa175]        # 418772 <flatcc_builder_padding_base@@Base+0x392>
  40e5fd:	mov    edx,0x227
  40e602:	call   4040a0 <__assert_fail@plt>
  40e607:	lea    rdi,[rip+0xa0f2]        # 418700 <flatcc_builder_padding_base@@Base+0x320>
  40e60e:	lea    rsi,[rip+0xa04d]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40e615:	lea    rcx,[rip+0xa0fd]        # 418719 <flatcc_builder_padding_base@@Base+0x339>
  40e61c:	mov    edx,0x21e
  40e621:	call   4040a0 <__assert_fail@plt>
  40e626:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000040e630 <flatcc_builder_get_current_user_frame@@Base>:
  40e630:	mov    rax,QWORD PTR [rdi+0x178]
  40e637:	ret    
  40e638:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040e640 <flatcc_builder_get_user_frame_ptr@@Base>:
  40e640:	mov    eax,esi
  40e642:	add    rax,QWORD PTR [rdi+0xc8]
  40e649:	ret    
  40e64a:	nop    WORD PTR [rax+rax*1+0x0]

000000000040e650 <flatcc_builder_embed_buffer@@Base>:
  40e650:	push   rbp
  40e651:	push   r15
  40e653:	push   r14
  40e655:	push   r12
  40e657:	push   rbx
  40e658:	sub    rsp,0xa0
  40e65f:	mov    ebx,r9d
  40e662:	mov    rbp,rcx
  40e665:	mov    r15,rdx
  40e668:	mov    edx,esi
  40e66a:	mov    r12,rdi
  40e66d:	mov    WORD PTR [rsp+0xa],r8w
  40e673:	xor    ecx,ecx
  40e675:	cmp    DWORD PTR [rdi+0x100],0x0
  40e67c:	setne  cl
  40e67f:	lea    rsi,[rsp+0xa]
  40e684:	call   40e7f0 <flatcc_builder_embed_buffer@@Base+0x1a0>
  40e689:	and    ebx,0x2
  40e68c:	movzx  eax,WORD PTR [rsp+0xa]
  40e691:	mov    r14d,DWORD PTR [r12+0xf0]
  40e699:	lea    ecx,[rbp+rbx*2+0x0]
  40e69d:	mov    edx,r14d
  40e6a0:	sub    edx,ecx
  40e6a2:	dec    eax
  40e6a4:	and    eax,edx
  40e6a6:	lea    ecx,[rax+rbp*1]
  40e6a9:	mov    DWORD PTR [rsp+0xc],ecx
  40e6ad:	mov    QWORD PTR [rsp+0x10],0x0
  40e6b6:	mov    DWORD PTR [rsp+0x18],0x0
  40e6be:	cmp    DWORD PTR [r12+0x100],0x0
  40e6c7:	je     40e799 <flatcc_builder_embed_buffer@@Base+0x149>
  40e6cd:	mov    QWORD PTR [rsp+0x10],0x4
  40e6d6:	lea    rcx,[rsp+0xc]
  40e6db:	mov    QWORD PTR [rsp+0x20],rcx
  40e6e0:	mov    QWORD PTR [rsp+0x28],0x4
  40e6e9:	mov    DWORD PTR [rsp+0x18],0x1
  40e6f1:	mov    r8d,0x4
  40e6f7:	mov    edx,0x1
  40e6fc:	test   rbp,rbp
  40e6ff:	je     40e71f <flatcc_builder_embed_buffer@@Base+0xcf>
  40e701:	add    r8,rbp
  40e704:	mov    QWORD PTR [rsp+0x10],r8
  40e709:	mov    ecx,edx
  40e70b:	shl    rcx,0x4
  40e70f:	mov    QWORD PTR [rsp+rcx*1+0x20],r15
  40e714:	mov    QWORD PTR [rsp+rcx*1+0x28],rbp
  40e719:	inc    edx
  40e71b:	mov    DWORD PTR [rsp+0x18],edx
  40e71f:	test   eax,eax
  40e721:	je     40e74a <flatcc_builder_embed_buffer@@Base+0xfa>
  40e723:	mov    eax,eax
  40e725:	add    r8,rax
  40e728:	mov    QWORD PTR [rsp+0x10],r8
  40e72d:	mov    ecx,edx
  40e72f:	shl    rcx,0x4
  40e733:	lea    rsi,[rip+0x9ca6]        # 4183e0 <flatcc_builder_padding_base@@Base>
  40e73a:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  40e73f:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  40e744:	inc    edx
  40e746:	mov    DWORD PTR [rsp+0x18],edx
  40e74a:	cmp    r8,0x11
  40e74e:	setb   al
  40e751:	lea    rcx,[r8-0x10]
  40e755:	shr    rcx,0x20
  40e759:	sete   cl
  40e75c:	test   r8d,r8d
  40e75f:	jle    40e7ac <flatcc_builder_embed_buffer@@Base+0x15c>
  40e761:	or     al,cl
  40e763:	je     40e7ac <flatcc_builder_embed_buffer@@Base+0x15c>
  40e765:	sub    r14d,r8d
  40e768:	mov    rdi,QWORD PTR [r12+0x38]
  40e76d:	lea    rsi,[rsp+0x20]
  40e772:	mov    ecx,r14d
  40e775:	call   QWORD PTR [r12+0x48]
  40e77a:	test   eax,eax
  40e77c:	jne    40e7cb <flatcc_builder_embed_buffer@@Base+0x17b>
  40e77e:	mov    DWORD PTR [r12+0xf0],r14d
  40e786:	mov    eax,r14d
  40e789:	add    rsp,0xa0
  40e790:	pop    rbx
  40e791:	pop    r12
  40e793:	pop    r14
  40e795:	pop    r15
  40e797:	pop    rbp
  40e798:	ret    
  40e799:	xor    edx,edx
  40e79b:	xor    r8d,r8d
  40e79e:	test   rbp,rbp
  40e7a1:	jne    40e701 <flatcc_builder_embed_buffer@@Base+0xb1>
  40e7a7:	jmp    40e71f <flatcc_builder_embed_buffer@@Base+0xcf>
  40e7ac:	lea    rdi,[rip+0xb06f]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  40e7b3:	lea    rsi,[rip+0x9ea8]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40e7ba:	lea    rcx,[rip+0xaf20]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  40e7c1:	mov    edx,0x287
  40e7c6:	call   4040a0 <__assert_fail@plt>
  40e7cb:	lea    rdi,[rip+0xb050]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  40e7d2:	lea    rsi,[rip+0x9e89]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40e7d9:	lea    rcx,[rip+0xaf01]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  40e7e0:	mov    edx,0x28b
  40e7e5:	call   4040a0 <__assert_fail@plt>
  40e7ea:	nop    WORD PTR [rax+rax*1+0x0]
  40e7f0:	push   rbx
  40e7f1:	sub    rsp,0x90
  40e7f8:	mov    rax,rdi
  40e7fb:	test   dx,dx
  40e7fe:	jne    40e811 <flatcc_builder_embed_buffer@@Base+0x1c1>
  40e800:	mov    edi,DWORD PTR [rax+0xec]
  40e806:	test   di,di
  40e809:	mov    edx,0x1
  40e80e:	cmovne edx,edi
  40e811:	movzx  ebx,WORD PTR [rsi]
  40e814:	mov    edi,0x4
  40e819:	cmp    bx,0x4
  40e81d:	cmovae edi,ebx
  40e820:	jb     40e82d <flatcc_builder_embed_buffer@@Base+0x1dd>
  40e822:	cmp    di,dx
  40e825:	jb     40e82d <flatcc_builder_embed_buffer@@Base+0x1dd>
  40e827:	test   ecx,ecx
  40e829:	jne    40e894 <flatcc_builder_embed_buffer@@Base+0x244>
  40e82b:	jmp    40e83a <flatcc_builder_embed_buffer@@Base+0x1ea>
  40e82d:	cmp    di,dx
  40e830:	cmovb  edi,edx
  40e833:	mov    WORD PTR [rsi],di
  40e836:	test   ecx,ecx
  40e838:	jne    40e894 <flatcc_builder_embed_buffer@@Base+0x244>
  40e83a:	mov    ebx,DWORD PTR [rax+0xf4]
  40e840:	movzx  r8d,dx
  40e844:	dec    r8d
  40e847:	and    r8d,ebx
  40e84a:	je     40e894 <flatcc_builder_embed_buffer@@Base+0x244>
  40e84c:	mov    QWORD PTR [rsp],r8
  40e850:	lea    rcx,[rip+0x9b89]        # 4183e0 <flatcc_builder_padding_base@@Base>
  40e857:	mov    QWORD PTR [rsp+0x10],rcx
  40e85c:	mov    QWORD PTR [rsp+0x18],r8
  40e861:	mov    DWORD PTR [rsp+0x8],0x1
  40e869:	lea    ecx,[r8+rbx*1]
  40e86d:	mov    DWORD PTR [rax+0xf4],ecx
  40e873:	test   r8d,r8d
  40e876:	js     40e89d <flatcc_builder_embed_buffer@@Base+0x24d>
  40e878:	mov    rdi,QWORD PTR [rax+0x38]
  40e87c:	lea    rsi,[rsp+0x10]
  40e881:	mov    edx,0x1
  40e886:	mov    ecx,ebx
  40e888:	call   QWORD PTR [rax+0x48]
  40e88b:	test   eax,eax
  40e88d:	jne    40e8bc <flatcc_builder_embed_buffer@@Base+0x26c>
  40e88f:	cmp    ebx,0xffffffff
  40e892:	je     40e8db <flatcc_builder_embed_buffer@@Base+0x28b>
  40e894:	add    rsp,0x90
  40e89b:	pop    rbx
  40e89c:	ret    
  40e89d:	lea    rdi,[rip+0xaf7e]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  40e8a4:	lea    rsi,[rip+0x9db7]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40e8ab:	lea    rcx,[rip+0xaeeb]        # 41979d <flatcc_builder_padding_base@@Base+0x13bd>
  40e8b2:	mov    edx,0x2a1
  40e8b7:	call   4040a0 <__assert_fail@plt>
  40e8bc:	lea    rdi,[rip+0xaf5f]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  40e8c3:	lea    rsi,[rip+0x9d98]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40e8ca:	lea    rcx,[rip+0xaecc]        # 41979d <flatcc_builder_padding_base@@Base+0x13bd>
  40e8d1:	mov    edx,0x2a5
  40e8d6:	call   4040a0 <__assert_fail@plt>
  40e8db:	lea    rdi,[rip+0xaf40]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  40e8e2:	lea    rsi,[rip+0x9d79]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40e8e9:	lea    rcx,[rip+0xadaf]        # 41969f <flatcc_builder_padding_base@@Base+0x12bf>
  40e8f0:	mov    edx,0x2be
  40e8f5:	call   4040a0 <__assert_fail@plt>
  40e8fa:	nop    WORD PTR [rax+rax*1+0x0]

000000000040e900 <flatcc_builder_create_buffer@@Base>:
  40e900:	push   rbp
  40e901:	push   r15
  40e903:	push   r14
  40e905:	push   r13
  40e907:	push   r12
  40e909:	push   rbx
  40e90a:	sub    rsp,0xa8
  40e911:	mov    r12d,r9d
  40e914:	mov    r14d,ecx
  40e917:	mov    rbp,rsi
  40e91a:	mov    r13,rdi
  40e91d:	mov    WORD PTR [rsp+0xa],r8w
  40e923:	mov    DWORD PTR [rsp+0xc],0x0
  40e92b:	mov    r15d,r9d
  40e92e:	and    r15d,0x1
  40e932:	lea    rsi,[rsp+0xa]
  40e937:	mov    ecx,r15d
  40e93a:	call   40e7f0 <flatcc_builder_embed_buffer@@Base+0x1a0>
  40e93f:	movzx  eax,WORD PTR [rsp+0xa]
  40e944:	cmp    WORD PTR [r13+0xe8],ax
  40e94c:	jae    40e956 <flatcc_builder_create_buffer@@Base+0x56>
  40e94e:	mov    WORD PTR [r13+0xe8],ax
  40e956:	movzx  edx,ax
  40e959:	xor    eax,eax
  40e95b:	test   rbp,rbp
  40e95e:	je     40e978 <flatcc_builder_create_buffer@@Base+0x78>
  40e960:	mov    ecx,DWORD PTR [rbp+0x0]
  40e963:	mov    DWORD PTR [rsp+0xc],ecx
  40e967:	xor    edi,edi
  40e969:	test   ecx,ecx
  40e96b:	setne  dil
  40e96f:	mov    rsi,rdi
  40e972:	shl    rsi,0x2
  40e976:	jmp    40e97c <flatcc_builder_create_buffer@@Base+0x7c>
  40e978:	xor    edi,edi
  40e97a:	xor    esi,esi
  40e97c:	lea    ebx,[r12+r12*1]
  40e980:	and    ebx,0x4
  40e983:	mov    ebp,DWORD PTR [r13+0xf0]
  40e98a:	mov    ecx,ebp
  40e98c:	sub    ecx,ebx
  40e98e:	sub    ecx,esi
  40e990:	add    ecx,0xfffffffc
  40e993:	dec    edx
  40e995:	mov    QWORD PTR [rsp+0x18],0x0
  40e99e:	mov    DWORD PTR [rsp+0x20],0x0
  40e9a6:	test   r12b,0x3
  40e9aa:	je     40e9dd <flatcc_builder_create_buffer@@Base+0xdd>
  40e9ac:	mov    QWORD PTR [rsp+0x18],0x4
  40e9b5:	lea    rax,[rsp+0x10]
  40e9ba:	mov    QWORD PTR [rsp+0x28],rax
  40e9bf:	mov    QWORD PTR [rsp+0x30],0x4
  40e9c8:	mov    DWORD PTR [rsp+0x20],0x1
  40e9d0:	mov    r8d,0x8
  40e9d6:	mov    eax,0x1
  40e9db:	jmp    40e9e3 <flatcc_builder_create_buffer@@Base+0xe3>
  40e9dd:	mov    r8d,0x4
  40e9e3:	and    ecx,edx
  40e9e5:	mov    QWORD PTR [rsp+0x18],r8
  40e9ea:	mov    edx,eax
  40e9ec:	shl    rdx,0x4
  40e9f0:	lea    rbx,[rsp+0x14]
  40e9f5:	mov    QWORD PTR [rsp+rdx*1+0x28],rbx
  40e9fa:	mov    QWORD PTR [rsp+rdx*1+0x30],0x4
  40ea03:	lea    edx,[rax+0x1]
  40ea06:	mov    DWORD PTR [rsp+0x20],edx
  40ea0a:	test   dil,dil
  40ea0d:	je     40ea35 <flatcc_builder_create_buffer@@Base+0x135>
  40ea0f:	add    r8,rsi
  40ea12:	mov    QWORD PTR [rsp+0x18],r8
  40ea17:	mov    edx,edx
  40ea19:	shl    rdx,0x4
  40ea1d:	lea    rdi,[rsp+0xc]
  40ea22:	mov    QWORD PTR [rsp+rdx*1+0x28],rdi
  40ea27:	mov    QWORD PTR [rsp+rdx*1+0x30],rsi
  40ea2c:	or     eax,0x2
  40ea2f:	mov    DWORD PTR [rsp+0x20],eax
  40ea33:	mov    edx,eax
  40ea35:	test   ecx,ecx
  40ea37:	je     40ea60 <flatcc_builder_create_buffer@@Base+0x160>
  40ea39:	mov    eax,ecx
  40ea3b:	add    r8,rax
  40ea3e:	mov    QWORD PTR [rsp+0x18],r8
  40ea43:	mov    ecx,edx
  40ea45:	shl    rcx,0x4
  40ea49:	lea    rsi,[rip+0x9990]        # 4183e0 <flatcc_builder_padding_base@@Base>
  40ea50:	mov    QWORD PTR [rsp+rcx*1+0x28],rsi
  40ea55:	mov    QWORD PTR [rsp+rcx*1+0x30],rax
  40ea5a:	inc    edx
  40ea5c:	mov    DWORD PTR [rsp+0x20],edx
  40ea60:	xor    eax,eax
  40ea62:	test   r12b,0x3
  40ea66:	setne  al
  40ea69:	sub    ebp,r8d
  40ea6c:	lea    eax,[rbp+rax*4+0x0]
  40ea70:	mov    ecx,r15d
  40ea73:	mov    ecx,DWORD PTR [r13+rcx*4+0xf4]
  40ea7b:	sub    ecx,eax
  40ea7d:	mov    DWORD PTR [rsp+0x10],ecx
  40ea81:	sub    r14d,eax
  40ea84:	mov    DWORD PTR [rsp+0x14],r14d
  40ea89:	cmp    r8,0x11
  40ea8d:	setb   al
  40ea90:	lea    rcx,[r8-0x10]
  40ea94:	shr    rcx,0x20
  40ea98:	sete   cl
  40ea9b:	test   r8d,r8d
  40ea9e:	jle    40ead6 <flatcc_builder_create_buffer@@Base+0x1d6>
  40eaa0:	or     al,cl
  40eaa2:	je     40ead6 <flatcc_builder_create_buffer@@Base+0x1d6>
  40eaa4:	mov    rdi,QWORD PTR [r13+0x38]
  40eaa8:	lea    rsi,[rsp+0x28]
  40eaad:	mov    ecx,ebp
  40eaaf:	call   QWORD PTR [r13+0x48]
  40eab3:	test   eax,eax
  40eab5:	jne    40eaf5 <flatcc_builder_create_buffer@@Base+0x1f5>
  40eab7:	mov    DWORD PTR [r13+0xf0],ebp
  40eabe:	test   ebp,ebp
  40eac0:	je     40eb14 <flatcc_builder_create_buffer@@Base+0x214>
  40eac2:	mov    eax,ebp
  40eac4:	add    rsp,0xa8
  40eacb:	pop    rbx
  40eacc:	pop    r12
  40eace:	pop    r13
  40ead0:	pop    r14
  40ead2:	pop    r15
  40ead4:	pop    rbp
  40ead5:	ret    
  40ead6:	lea    rdi,[rip+0xad45]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  40eadd:	lea    rsi,[rip+0x9b7e]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40eae4:	lea    rcx,[rip+0xabf6]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  40eaeb:	mov    edx,0x287
  40eaf0:	call   4040a0 <__assert_fail@plt>
  40eaf5:	lea    rdi,[rip+0xad26]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  40eafc:	lea    rsi,[rip+0x9b5f]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40eb03:	lea    rcx,[rip+0xabd7]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  40eb0a:	mov    edx,0x28b
  40eb0f:	call   4040a0 <__assert_fail@plt>
  40eb14:	lea    rdi,[rip+0xad07]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  40eb1b:	lea    rsi,[rip+0x9b40]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40eb22:	lea    rcx,[rip+0x9c8e]        # 4187b7 <flatcc_builder_padding_base@@Base+0x3d7>
  40eb29:	mov    edx,0x304
  40eb2e:	call   4040a0 <__assert_fail@plt>
  40eb33:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40eb3d:	nop    DWORD PTR [rax]

000000000040eb40 <flatcc_builder_create_struct@@Base>:
  40eb40:	push   rbp
  40eb41:	push   rbx
  40eb42:	sub    rsp,0x98
  40eb49:	test   cx,cx
  40eb4c:	je     40ec42 <flatcc_builder_create_struct@@Base+0x102>
  40eb52:	mov    r8,rdx
  40eb55:	mov    rbx,rdi
  40eb58:	cmp    WORD PTR [rdi+0xe8],cx
  40eb5f:	jae    40eb68 <flatcc_builder_create_struct@@Base+0x28>
  40eb61:	mov    WORD PTR [rbx+0xe8],cx
  40eb68:	mov    ebp,DWORD PTR [rbx+0xf0]
  40eb6e:	mov    edx,ebp
  40eb70:	sub    edx,r8d
  40eb73:	movzx  eax,cx
  40eb76:	dec    eax
  40eb78:	and    eax,edx
  40eb7a:	mov    QWORD PTR [rsp+0x8],0x0
  40eb83:	mov    DWORD PTR [rsp+0x10],0x0
  40eb8b:	test   r8,r8
  40eb8e:	je     40ec1b <flatcc_builder_create_struct@@Base+0xdb>
  40eb94:	mov    QWORD PTR [rsp+0x8],r8
  40eb99:	mov    QWORD PTR [rsp+0x18],rsi
  40eb9e:	mov    QWORD PTR [rsp+0x20],r8
  40eba3:	mov    DWORD PTR [rsp+0x10],0x1
  40ebab:	mov    edx,0x1
  40ebb0:	test   eax,eax
  40ebb2:	je     40ebd9 <flatcc_builder_create_struct@@Base+0x99>
  40ebb4:	add    r8,rax
  40ebb7:	mov    QWORD PTR [rsp+0x8],r8
  40ebbc:	mov    ecx,edx
  40ebbe:	shl    rcx,0x4
  40ebc2:	lea    rsi,[rip+0x9817]        # 4183e0 <flatcc_builder_padding_base@@Base>
  40ebc9:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  40ebce:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  40ebd3:	inc    edx
  40ebd5:	mov    DWORD PTR [rsp+0x10],edx
  40ebd9:	cmp    r8,0x11
  40ebdd:	setb   al
  40ebe0:	lea    rcx,[r8-0x10]
  40ebe4:	shr    rcx,0x20
  40ebe8:	sete   cl
  40ebeb:	test   r8d,r8d
  40ebee:	jle    40ec23 <flatcc_builder_create_struct@@Base+0xe3>
  40ebf0:	or     al,cl
  40ebf2:	je     40ec23 <flatcc_builder_create_struct@@Base+0xe3>
  40ebf4:	sub    ebp,r8d
  40ebf7:	mov    rdi,QWORD PTR [rbx+0x38]
  40ebfb:	lea    rsi,[rsp+0x18]
  40ec00:	mov    ecx,ebp
  40ec02:	call   QWORD PTR [rbx+0x48]
  40ec05:	test   eax,eax
  40ec07:	jne    40ec61 <flatcc_builder_create_struct@@Base+0x121>
  40ec09:	mov    DWORD PTR [rbx+0xf0],ebp
  40ec0f:	mov    eax,ebp
  40ec11:	add    rsp,0x98
  40ec18:	pop    rbx
  40ec19:	pop    rbp
  40ec1a:	ret    
  40ec1b:	xor    edx,edx
  40ec1d:	test   eax,eax
  40ec1f:	jne    40ebb4 <flatcc_builder_create_struct@@Base+0x74>
  40ec21:	jmp    40ebd9 <flatcc_builder_create_struct@@Base+0x99>
  40ec23:	lea    rdi,[rip+0xabf8]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  40ec2a:	lea    rsi,[rip+0x9a31]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40ec31:	lea    rcx,[rip+0xaaa9]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  40ec38:	mov    edx,0x287
  40ec3d:	call   4040a0 <__assert_fail@plt>
  40ec42:	lea    rdi,[rip+0x9bf1]        # 41883a <flatcc_builder_padding_base@@Base+0x45a>
  40ec49:	lea    rsi,[rip+0x9a12]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40ec50:	lea    rcx,[rip+0x9bee]        # 418845 <flatcc_builder_padding_base@@Base+0x465>
  40ec57:	mov    edx,0x30f
  40ec5c:	call   4040a0 <__assert_fail@plt>
  40ec61:	lea    rdi,[rip+0xabba]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  40ec68:	lea    rsi,[rip+0x99f3]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40ec6f:	lea    rcx,[rip+0xaa6b]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  40ec76:	mov    edx,0x28b
  40ec7b:	call   4040a0 <__assert_fail@plt>

000000000040ec80 <flatcc_builder_start_buffer@@Base>:
  40ec80:	push   rbp
  40ec81:	push   r15
  40ec83:	push   r14
  40ec85:	push   rbx
  40ec86:	push   rax
  40ec87:	mov    r15d,ecx
  40ec8a:	mov    ebp,edx
  40ec8c:	mov    r14,rsi
  40ec8f:	mov    rbx,rdi
  40ec92:	movzx  esi,WORD PTR [rdi+0xe8]
  40ec99:	call   40ed60 <flatcc_builder_start_buffer@@Base+0xe0>
  40ec9e:	mov    ecx,eax
  40eca0:	mov    eax,0xffffffff
  40eca5:	test   ecx,ecx
  40eca7:	jne    40ed4c <flatcc_builder_start_buffer@@Base+0xcc>
  40ecad:	mov    WORD PTR [rbx+0xe8],0x1
  40ecb6:	movzx  eax,WORD PTR [rbx+0xec]
  40ecbd:	mov    rcx,QWORD PTR [rbx+0x30]
  40ecc1:	mov    WORD PTR [rcx+0x22],ax
  40ecc5:	mov    WORD PTR [rbx+0xec],bp
  40eccc:	movzx  eax,WORD PTR [rbx+0x10c]
  40ecd3:	mov    rcx,QWORD PTR [rbx+0x30]
  40ecd7:	mov    WORD PTR [rcx+0x20],ax
  40ecdb:	mov    WORD PTR [rbx+0x10c],r15w
  40ece3:	mov    eax,DWORD PTR [rbx+0xf8]
  40ece9:	mov    rcx,QWORD PTR [rbx+0x30]
  40eced:	mov    DWORD PTR [rcx+0x14],eax
  40ecf0:	mov    eax,DWORD PTR [rbx+0x100]
  40ecf6:	mov    rcx,QWORD PTR [rbx+0x30]
  40ecfa:	mov    DWORD PTR [rcx+0x1c],eax
  40ecfd:	mov    eax,DWORD PTR [rbx+0xf0]
  40ed03:	mov    DWORD PTR [rbx+0xf8],eax
  40ed09:	mov    eax,DWORD PTR [rbx+0xfc]
  40ed0f:	lea    ecx,[rax+0x1]
  40ed12:	mov    DWORD PTR [rbx+0xfc],ecx
  40ed18:	mov    DWORD PTR [rbx+0x100],eax
  40ed1e:	mov    eax,DWORD PTR [rbx+0x110]
  40ed24:	mov    rcx,QWORD PTR [rbx+0x30]
  40ed28:	mov    DWORD PTR [rcx+0x10],eax
  40ed2b:	test   r14,r14
  40ed2e:	jne    40ed37 <flatcc_builder_start_buffer@@Base+0xb7>
  40ed30:	lea    r14,[rip+0x96a9]        # 4183e0 <flatcc_builder_padding_base@@Base>
  40ed37:	mov    eax,DWORD PTR [r14]
  40ed3a:	mov    DWORD PTR [rbx+0x110],eax
  40ed40:	mov    rax,QWORD PTR [rbx+0x30]
  40ed44:	mov    WORD PTR [rax+0xe],0x1
  40ed4a:	xor    eax,eax
  40ed4c:	add    rsp,0x8
  40ed50:	pop    rbx
  40ed51:	pop    r14
  40ed53:	pop    r15
  40ed55:	pop    rbp
  40ed56:	ret    
  40ed57:	nop    WORD PTR [rax+rax*1+0x0]
  40ed60:	push   rbp
  40ed61:	push   r15
  40ed63:	push   r14
  40ed65:	push   rbx
  40ed66:	push   rax
  40ed67:	mov    r14d,esi
  40ed6a:	mov    rbx,rdi
  40ed6d:	movsxd rbp,DWORD PTR [rdi+0x104]
  40ed74:	lea    eax,[rbp+0x1]
  40ed77:	mov    DWORD PTR [rdi+0x104],eax
  40ed7d:	cmp    ebp,DWORD PTR [rdi+0x108]
  40ed83:	jge    40ed96 <flatcc_builder_start_buffer@@Base+0x116>
  40ed85:	mov    rcx,QWORD PTR [rbx+0x30]
  40ed89:	add    rcx,0x24
  40ed8d:	mov    QWORD PTR [rbx+0x30],rcx
  40ed91:	jmp    40ee29 <flatcc_builder_start_buffer@@Base+0x1a9>
  40ed96:	mov    eax,DWORD PTR [rbx+0x120]
  40ed9c:	mov    r15d,0xffffffff
  40eda2:	test   eax,eax
  40eda4:	jle    40edae <flatcc_builder_start_buffer@@Base+0x12e>
  40eda6:	cmp    ebp,eax
  40eda8:	jge    40ee64 <flatcc_builder_start_buffer@@Base+0x1e4>
  40edae:	shl    rbp,0x2
  40edb2:	lea    rdx,[rbp*8+0x24]
  40edba:	add    rdx,rbp
  40edbd:	cmp    rdx,QWORD PTR [rbx+0xa0]
  40edc4:	jbe    40ede4 <flatcc_builder_start_buffer@@Base+0x164>
  40edc6:	lea    rsi,[rbx+0x98]
  40edcd:	mov    rdi,QWORD PTR [rbx+0x40]
  40edd1:	xor    ecx,ecx
  40edd3:	mov    r8d,0x4
  40edd9:	call   QWORD PTR [rbx+0x50]
  40eddc:	test   eax,eax
  40edde:	jne    40ee72 <flatcc_builder_start_buffer@@Base+0x1f2>
  40ede4:	lea    rcx,[rbp*8+0x0]
  40edec:	add    rcx,rbp
  40edef:	add    rcx,QWORD PTR [rbx+0x98]
  40edf6:	mov    QWORD PTR [rbx+0x30],rcx
  40edfa:	je     40ee64 <flatcc_builder_start_buffer@@Base+0x1e4>
  40edfc:	movabs rax,0xe38e38e38e38e38f
  40ee06:	mul    QWORD PTR [rbx+0xa0]
  40ee0d:	shr    rdx,0x5
  40ee11:	mov    eax,DWORD PTR [rbx+0x120]
  40ee17:	cmp    eax,edx
  40ee19:	mov    esi,edx
  40ee1b:	cmovle esi,eax
  40ee1e:	test   eax,eax
  40ee20:	cmovle esi,edx
  40ee23:	mov    DWORD PTR [rbx+0x108],esi
  40ee29:	mov    eax,DWORD PTR [rbx+0x20]
  40ee2c:	mov    DWORD PTR [rcx+0x8],eax
  40ee2f:	movzx  edx,WORD PTR [rbx+0xea]
  40ee36:	mov    WORD PTR [rcx+0xc],dx
  40ee3a:	mov    WORD PTR [rbx+0xea],r14w
  40ee42:	mov    edx,DWORD PTR [rbx+0x28]
  40ee45:	mov    DWORD PTR [rcx],edx
  40ee47:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40ee4e:	lea    eax,[rax+rdx*1]
  40ee51:	add    eax,0x7
  40ee54:	and    eax,0xfffffff8
  40ee57:	mov    DWORD PTR [rbx+0x28],eax
  40ee5a:	mov    DWORD PTR [rbx+0x20],0x0
  40ee61:	xor    r15d,r15d
  40ee64:	mov    eax,r15d
  40ee67:	add    rsp,0x8
  40ee6b:	pop    rbx
  40ee6c:	pop    r14
  40ee6e:	pop    r15
  40ee70:	pop    rbp
  40ee71:	ret    
  40ee72:	lea    rdi,[rip+0xa9a9]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  40ee79:	lea    rsi,[rip+0x97e2]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40ee80:	lea    rcx,[rip+0xa7d5]        # 41965c <flatcc_builder_padding_base@@Base+0x127c>
  40ee87:	mov    edx,0x134
  40ee8c:	call   4040a0 <__assert_fail@plt>
  40ee91:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ee9b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040eea0 <flatcc_builder_end_buffer@@Base>:
  40eea0:	push   rbp
  40eea1:	push   rbx
  40eea2:	push   rax
  40eea3:	mov    rax,QWORD PTR [rdi+0x30]
  40eea7:	cmp    WORD PTR [rax+0xe],0x1
  40eeac:	jne    40efa9 <flatcc_builder_end_buffer@@Base+0x109>
  40eeb2:	mov    ecx,esi
  40eeb4:	mov    rbx,rdi
  40eeb7:	movzx  eax,WORD PTR [rdi+0x10c]
  40eebe:	and    eax,0x2
  40eec1:	xor    r9d,r9d
  40eec4:	cmp    DWORD PTR [rdi+0x100],0x0
  40eecb:	setne  r9b
  40eecf:	or     r9d,eax
  40eed2:	movzx  edi,WORD PTR [rdi+0xe8]
  40eed9:	movzx  eax,WORD PTR [rbx+0xec]
  40eee0:	cmp    di,ax
  40eee3:	jae    40eeee <flatcc_builder_end_buffer@@Base+0x4e>
  40eee5:	mov    WORD PTR [rbx+0xe8],ax
  40eeec:	mov    edi,eax
  40eeee:	lea    rsi,[rbx+0x110]
  40eef5:	movzx  edx,ax
  40eef8:	movzx  r8d,di
  40eefc:	mov    rdi,rbx
  40eeff:	call   40e900 <flatcc_builder_create_buffer@@Base>
  40ef04:	mov    ebp,eax
  40ef06:	test   eax,eax
  40ef08:	je     40efa0 <flatcc_builder_end_buffer@@Base+0x100>
  40ef0e:	mov    rax,QWORD PTR [rbx+0x30]
  40ef12:	mov    ecx,DWORD PTR [rax+0x14]
  40ef15:	mov    DWORD PTR [rbx+0xf8],ecx
  40ef1b:	mov    ecx,DWORD PTR [rax+0x1c]
  40ef1e:	mov    DWORD PTR [rbx+0x100],ecx
  40ef24:	mov    ecx,DWORD PTR [rax+0x10]
  40ef27:	mov    DWORD PTR [rbx+0x110],ecx
  40ef2d:	movzx  eax,WORD PTR [rax+0x20]
  40ef31:	mov    WORD PTR [rbx+0x10c],ax
  40ef38:	mov    rdi,QWORD PTR [rbx+0x18]
  40ef3c:	mov    edx,DWORD PTR [rbx+0x20]
  40ef3f:	xor    esi,esi
  40ef41:	call   4040b0 <memset@plt>
  40ef46:	mov    rax,QWORD PTR [rbx+0x30]
  40ef4a:	mov    ecx,DWORD PTR [rax+0x8]
  40ef4d:	mov    DWORD PTR [rbx+0x20],ecx
  40ef50:	mov    ecx,DWORD PTR [rax]
  40ef52:	mov    DWORD PTR [rbx+0x28],ecx
  40ef55:	mov    edx,DWORD PTR [rax+0x4]
  40ef58:	mov    rsi,rcx
  40ef5b:	add    rsi,QWORD PTR [rbx+0x68]
  40ef5f:	mov    QWORD PTR [rbx+0x18],rsi
  40ef63:	mov    esi,DWORD PTR [rbx+0x70]
  40ef66:	sub    esi,ecx
  40ef68:	cmp    esi,edx
  40ef6a:	cmova  esi,edx
  40ef6d:	mov    DWORD PTR [rbx+0x24],esi
  40ef70:	movzx  ecx,WORD PTR [rbx+0xea]
  40ef77:	cmp    WORD PTR [rbx+0xe8],cx
  40ef7e:	jae    40ef87 <flatcc_builder_end_buffer@@Base+0xe7>
  40ef80:	mov    WORD PTR [rbx+0xe8],cx
  40ef87:	movzx  ecx,WORD PTR [rax+0xc]
  40ef8b:	mov    WORD PTR [rbx+0xea],cx
  40ef92:	add    rax,0xffffffffffffffdc
  40ef96:	mov    QWORD PTR [rbx+0x30],rax
  40ef9a:	dec    DWORD PTR [rbx+0x104]
  40efa0:	mov    eax,ebp
  40efa2:	add    rsp,0x8
  40efa6:	pop    rbx
  40efa7:	pop    rbp
  40efa8:	ret    
  40efa9:	lea    rdi,[rip+0x98fb]        # 4188ab <flatcc_builder_padding_base@@Base+0x4cb>
  40efb0:	lea    rsi,[rip+0x96ab]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40efb7:	lea    rcx,[rip+0x9919]        # 4188d7 <flatcc_builder_padding_base@@Base+0x4f7>
  40efbe:	mov    edx,0x346
  40efc3:	call   4040a0 <__assert_fail@plt>
  40efc8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040efd0 <flatcc_builder_start_struct@@Base>:
  40efd0:	push   r15
  40efd2:	push   r14
  40efd4:	push   rbx
  40efd5:	mov    r14,rsi
  40efd8:	mov    rbx,rdi
  40efdb:	mov    esi,edx
  40efdd:	call   40ed60 <flatcc_builder_start_buffer@@Base+0xe0>
  40efe2:	test   eax,eax
  40efe4:	je     40efed <flatcc_builder_start_struct@@Base+0x1d>
  40efe6:	xor    eax,eax
  40efe8:	jmp    40f081 <flatcc_builder_start_struct@@Base+0xb1>
  40efed:	mov    rdx,QWORD PTR [rbx+0x30]
  40eff1:	mov    WORD PTR [rdx+0xe],0x2
  40eff7:	mov    ecx,DWORD PTR [rbx+0x28]
  40effa:	mov    esi,DWORD PTR [rbx+0x70]
  40effd:	mov    rax,QWORD PTR [rbx+0x68]
  40f001:	add    rax,rcx
  40f004:	mov    QWORD PTR [rbx+0x18],rax
  40f008:	sub    esi,ecx
  40f00a:	cmp    esi,0xfffffffc
  40f00d:	mov    edi,0xfffffffc
  40f012:	cmovb  edi,esi
  40f015:	mov    DWORD PTR [rbx+0x24],edi
  40f018:	mov    DWORD PTR [rdx+0x4],0xfffffffc
  40f01f:	mov    r15d,DWORD PTR [rbx+0x20]
  40f023:	add    r14d,r15d
  40f026:	mov    DWORD PTR [rbx+0x20],r14d
  40f02a:	cmp    r14d,edi
  40f02d:	jb     40f07e <flatcc_builder_start_struct@@Base+0xae>
  40f02f:	inc    r14d
  40f032:	lea    rsi,[rbx+0x68]
  40f036:	mov    rdi,QWORD PTR [rbx+0x40]
  40f03a:	add    r14,rcx
  40f03d:	mov    rdx,r14
  40f040:	mov    ecx,0x1
  40f045:	mov    r8d,0x1
  40f04b:	call   QWORD PTR [rbx+0x50]
  40f04e:	test   eax,eax
  40f050:	jne    40efe6 <flatcc_builder_start_struct@@Base+0x16>
  40f052:	mov    ecx,DWORD PTR [rbx+0x28]
  40f055:	mov    rax,rcx
  40f058:	add    rax,QWORD PTR [rbx+0x68]
  40f05c:	mov    QWORD PTR [rbx+0x18],rax
  40f060:	mov    edx,DWORD PTR [rbx+0x70]
  40f063:	sub    edx,ecx
  40f065:	cmp    edx,0xfffffffc
  40f068:	mov    ecx,0xfffffffc
  40f06d:	cmovb  ecx,edx
  40f070:	mov    DWORD PTR [rbx+0x24],ecx
  40f073:	mov    rcx,QWORD PTR [rbx+0x30]
  40f077:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40f07e:	add    rax,r15
  40f081:	pop    rbx
  40f082:	pop    r14
  40f084:	pop    r15
  40f086:	ret    
  40f087:	nop    WORD PTR [rax+rax*1+0x0]

000000000040f090 <flatcc_builder_struct_edit@@Base>:
  40f090:	mov    rax,QWORD PTR [rdi+0x18]
  40f094:	ret    
  40f095:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f09f:	nop

000000000040f0a0 <flatcc_builder_end_struct@@Base>:
  40f0a0:	push   rbp
  40f0a1:	push   rbx
  40f0a2:	push   rax
  40f0a3:	mov    rax,QWORD PTR [rdi+0x30]
  40f0a7:	cmp    WORD PTR [rax+0xe],0x2
  40f0ac:	jne    40f13f <flatcc_builder_end_struct@@Base+0x9f>
  40f0b2:	mov    rbx,rdi
  40f0b5:	mov    rsi,QWORD PTR [rdi+0x18]
  40f0b9:	mov    edx,DWORD PTR [rdi+0x20]
  40f0bc:	movzx  ecx,WORD PTR [rdi+0xea]
  40f0c3:	call   40eb40 <flatcc_builder_create_struct@@Base>
  40f0c8:	mov    ebp,eax
  40f0ca:	test   eax,eax
  40f0cc:	je     40f136 <flatcc_builder_end_struct@@Base+0x96>
  40f0ce:	mov    rdi,QWORD PTR [rbx+0x18]
  40f0d2:	mov    edx,DWORD PTR [rbx+0x20]
  40f0d5:	xor    esi,esi
  40f0d7:	call   4040b0 <memset@plt>
  40f0dc:	mov    rax,QWORD PTR [rbx+0x30]
  40f0e0:	mov    ecx,DWORD PTR [rax+0x8]
  40f0e3:	mov    DWORD PTR [rbx+0x20],ecx
  40f0e6:	mov    ecx,DWORD PTR [rax]
  40f0e8:	mov    DWORD PTR [rbx+0x28],ecx
  40f0eb:	mov    edx,DWORD PTR [rax+0x4]
  40f0ee:	mov    rsi,rcx
  40f0f1:	add    rsi,QWORD PTR [rbx+0x68]
  40f0f5:	mov    QWORD PTR [rbx+0x18],rsi
  40f0f9:	mov    esi,DWORD PTR [rbx+0x70]
  40f0fc:	sub    esi,ecx
  40f0fe:	cmp    esi,edx
  40f100:	cmova  esi,edx
  40f103:	mov    DWORD PTR [rbx+0x24],esi
  40f106:	movzx  ecx,WORD PTR [rbx+0xea]
  40f10d:	cmp    WORD PTR [rbx+0xe8],cx
  40f114:	jae    40f11d <flatcc_builder_end_struct@@Base+0x7d>
  40f116:	mov    WORD PTR [rbx+0xe8],cx
  40f11d:	movzx  ecx,WORD PTR [rax+0xc]
  40f121:	mov    WORD PTR [rbx+0xea],cx
  40f128:	add    rax,0xffffffffffffffdc
  40f12c:	mov    QWORD PTR [rbx+0x30],rax
  40f130:	dec    DWORD PTR [rbx+0x104]
  40f136:	mov    eax,ebp
  40f138:	add    rsp,0x8
  40f13c:	pop    rbx
  40f13d:	pop    rbp
  40f13e:	ret    
  40f13f:	lea    rdi,[rip+0x97ea]        # 418930 <flatcc_builder_padding_base@@Base+0x550>
  40f146:	lea    rsi,[rip+0x9515]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f14d:	lea    rcx,[rip+0x9808]        # 41895c <flatcc_builder_padding_base@@Base+0x57c>
  40f154:	mov    edx,0x368
  40f159:	call   4040a0 <__assert_fail@plt>
  40f15e:	xchg   ax,ax

000000000040f160 <flatcc_builder_extend_vector@@Base>:
  40f160:	push   r14
  40f162:	push   rbx
  40f163:	push   rax
  40f164:	mov    rax,QWORD PTR [rdi+0x30]
  40f168:	mov    ecx,DWORD PTR [rax+0x14]
  40f16b:	add    ecx,esi
  40f16d:	jb     40f1ff <flatcc_builder_extend_vector@@Base+0x9f>
  40f173:	cmp    ecx,DWORD PTR [rax+0x18]
  40f176:	ja     40f1ff <flatcc_builder_extend_vector@@Base+0x9f>
  40f17c:	mov    rbx,rdi
  40f17f:	mov    DWORD PTR [rax+0x14],ecx
  40f182:	mov    rax,QWORD PTR [rdi+0x30]
  40f186:	imul   esi,DWORD PTR [rax+0x10]
  40f18a:	mov    r14d,DWORD PTR [rdi+0x20]
  40f18e:	add    esi,r14d
  40f191:	mov    DWORD PTR [rdi+0x20],esi
  40f194:	cmp    esi,DWORD PTR [rdi+0x24]
  40f197:	jae    40f19f <flatcc_builder_extend_vector@@Base+0x3f>
  40f199:	mov    rax,QWORD PTR [rbx+0x18]
  40f19d:	jmp    40f1f4 <flatcc_builder_extend_vector@@Base+0x94>
  40f19f:	inc    esi
  40f1a1:	lea    rax,[rbx+0x68]
  40f1a5:	mov    rdi,QWORD PTR [rbx+0x40]
  40f1a9:	mov    edx,DWORD PTR [rbx+0x28]
  40f1ac:	add    rdx,rsi
  40f1af:	mov    rsi,rax
  40f1b2:	mov    ecx,0x1
  40f1b7:	mov    r8d,0x1
  40f1bd:	call   QWORD PTR [rbx+0x50]
  40f1c0:	test   eax,eax
  40f1c2:	je     40f1c8 <flatcc_builder_extend_vector@@Base+0x68>
  40f1c4:	xor    eax,eax
  40f1c6:	jmp    40f1f7 <flatcc_builder_extend_vector@@Base+0x97>
  40f1c8:	mov    ecx,DWORD PTR [rbx+0x28]
  40f1cb:	mov    rax,rcx
  40f1ce:	add    rax,QWORD PTR [rbx+0x68]
  40f1d2:	mov    QWORD PTR [rbx+0x18],rax
  40f1d6:	mov    edx,DWORD PTR [rbx+0x70]
  40f1d9:	sub    edx,ecx
  40f1db:	cmp    edx,0xfffffffc
  40f1de:	mov    ecx,0xfffffffc
  40f1e3:	cmovb  ecx,edx
  40f1e6:	mov    DWORD PTR [rbx+0x24],ecx
  40f1e9:	mov    rcx,QWORD PTR [rbx+0x30]
  40f1ed:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40f1f4:	add    rax,r14
  40f1f7:	add    rsp,0x8
  40f1fb:	pop    rbx
  40f1fc:	pop    r14
  40f1fe:	ret    
  40f1ff:	lea    rdi,[rip+0xa525]        # 41972b <flatcc_builder_padding_base@@Base+0x134b>
  40f206:	lea    rsi,[rip+0x9455]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f20d:	lea    rcx,[rip+0xa532]        # 419746 <flatcc_builder_padding_base@@Base+0x1366>
  40f214:	mov    edx,0x37c
  40f219:	call   4040a0 <__assert_fail@plt>
  40f21e:	xchg   ax,ax

000000000040f220 <flatcc_builder_vector_push@@Base>:
  40f220:	push   r15
  40f222:	push   r14
  40f224:	push   r13
  40f226:	push   r12
  40f228:	push   rbx
  40f229:	mov    rax,QWORD PTR [rdi+0x30]
  40f22d:	cmp    WORD PTR [rax+0xe],0x4
  40f232:	jne    40f2e5 <flatcc_builder_vector_push@@Base+0xc5>
  40f238:	mov    ecx,DWORD PTR [rax+0x14]
  40f23b:	cmp    ecx,DWORD PTR [rax+0x18]
  40f23e:	ja     40f304 <flatcc_builder_vector_push@@Base+0xe4>
  40f244:	mov    r14,rsi
  40f247:	mov    rbx,rdi
  40f24a:	inc    ecx
  40f24c:	mov    DWORD PTR [rax+0x14],ecx
  40f24f:	mov    rax,QWORD PTR [rdi+0x30]
  40f253:	mov    r15d,DWORD PTR [rax+0x10]
  40f257:	mov    r13d,DWORD PTR [rdi+0x20]
  40f25b:	lea    eax,[r15+r13*1]
  40f25f:	mov    DWORD PTR [rdi+0x20],eax
  40f262:	cmp    eax,DWORD PTR [rdi+0x24]
  40f265:	jae    40f272 <flatcc_builder_vector_push@@Base+0x52>
  40f267:	mov    r12,QWORD PTR [rbx+0x18]
  40f26b:	add    r12,r13
  40f26e:	jne    40f2ca <flatcc_builder_vector_push@@Base+0xaa>
  40f270:	jmp    40f294 <flatcc_builder_vector_push@@Base+0x74>
  40f272:	inc    eax
  40f274:	lea    rsi,[rbx+0x68]
  40f278:	mov    rdi,QWORD PTR [rbx+0x40]
  40f27c:	mov    edx,DWORD PTR [rbx+0x28]
  40f27f:	add    rdx,rax
  40f282:	mov    ecx,0x1
  40f287:	mov    r8d,0x1
  40f28d:	call   QWORD PTR [rbx+0x50]
  40f290:	test   eax,eax
  40f292:	je     40f299 <flatcc_builder_vector_push@@Base+0x79>
  40f294:	xor    r12d,r12d
  40f297:	jmp    40f2d8 <flatcc_builder_vector_push@@Base+0xb8>
  40f299:	mov    eax,DWORD PTR [rbx+0x28]
  40f29c:	mov    r12,rax
  40f29f:	add    r12,QWORD PTR [rbx+0x68]
  40f2a3:	mov    QWORD PTR [rbx+0x18],r12
  40f2a7:	mov    ecx,DWORD PTR [rbx+0x70]
  40f2aa:	sub    ecx,eax
  40f2ac:	cmp    ecx,0xfffffffc
  40f2af:	mov    eax,0xfffffffc
  40f2b4:	cmovb  eax,ecx
  40f2b7:	mov    DWORD PTR [rbx+0x24],eax
  40f2ba:	mov    rax,QWORD PTR [rbx+0x30]
  40f2be:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40f2c5:	add    r12,r13
  40f2c8:	je     40f294 <flatcc_builder_vector_push@@Base+0x74>
  40f2ca:	mov    rdi,r12
  40f2cd:	mov    rsi,r14
  40f2d0:	mov    rdx,r15
  40f2d3:	call   404100 <memcpy@plt>
  40f2d8:	mov    rax,r12
  40f2db:	pop    rbx
  40f2dc:	pop    r12
  40f2de:	pop    r13
  40f2e0:	pop    r14
  40f2e2:	pop    r15
  40f2e4:	ret    
  40f2e5:	lea    rdi,[rip+0x96b3]        # 41899f <flatcc_builder_padding_base@@Base+0x5bf>
  40f2ec:	lea    rsi,[rip+0x936f]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f2f3:	lea    rcx,[rip+0x96d1]        # 4189cb <flatcc_builder_padding_base@@Base+0x5eb>
  40f2fa:	mov    edx,0x38b
  40f2ff:	call   4040a0 <__assert_fail@plt>
  40f304:	lea    rdi,[rip+0x9703]        # 418a0e <flatcc_builder_padding_base@@Base+0x62e>
  40f30b:	lea    rsi,[rip+0x9350]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f312:	lea    rcx,[rip+0x96b2]        # 4189cb <flatcc_builder_padding_base@@Base+0x5eb>
  40f319:	mov    edx,0x38c
  40f31e:	call   4040a0 <__assert_fail@plt>
  40f323:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f32d:	nop    DWORD PTR [rax]

000000000040f330 <flatcc_builder_append_vector@@Base>:
  40f330:	push   r15
  40f332:	push   r14
  40f334:	push   r13
  40f336:	push   r12
  40f338:	push   rbx
  40f339:	mov    rax,QWORD PTR [rdi+0x30]
  40f33d:	cmp    WORD PTR [rax+0xe],0x4
  40f342:	jne    40f41f <flatcc_builder_append_vector@@Base+0xef>
  40f348:	mov    r15,rdx
  40f34b:	mov    ecx,DWORD PTR [rax+0x14]
  40f34e:	add    ecx,r15d
  40f351:	jb     40f400 <flatcc_builder_append_vector@@Base+0xd0>
  40f357:	cmp    ecx,DWORD PTR [rax+0x18]
  40f35a:	ja     40f400 <flatcc_builder_append_vector@@Base+0xd0>
  40f360:	mov    r14,rsi
  40f363:	mov    rbx,rdi
  40f366:	mov    DWORD PTR [rax+0x14],ecx
  40f369:	mov    rax,QWORD PTR [rdi+0x30]
  40f36d:	imul   r15d,DWORD PTR [rax+0x10]
  40f372:	mov    r13d,DWORD PTR [rdi+0x20]
  40f376:	lea    eax,[r15+r13*1]
  40f37a:	mov    DWORD PTR [rdi+0x20],eax
  40f37d:	cmp    eax,DWORD PTR [rdi+0x24]
  40f380:	jae    40f38d <flatcc_builder_append_vector@@Base+0x5d>
  40f382:	mov    r12,QWORD PTR [rbx+0x18]
  40f386:	add    r12,r13
  40f389:	jne    40f3e5 <flatcc_builder_append_vector@@Base+0xb5>
  40f38b:	jmp    40f3af <flatcc_builder_append_vector@@Base+0x7f>
  40f38d:	inc    eax
  40f38f:	lea    rsi,[rbx+0x68]
  40f393:	mov    rdi,QWORD PTR [rbx+0x40]
  40f397:	mov    edx,DWORD PTR [rbx+0x28]
  40f39a:	add    rdx,rax
  40f39d:	mov    ecx,0x1
  40f3a2:	mov    r8d,0x1
  40f3a8:	call   QWORD PTR [rbx+0x50]
  40f3ab:	test   eax,eax
  40f3ad:	je     40f3b4 <flatcc_builder_append_vector@@Base+0x84>
  40f3af:	xor    r12d,r12d
  40f3b2:	jmp    40f3f3 <flatcc_builder_append_vector@@Base+0xc3>
  40f3b4:	mov    eax,DWORD PTR [rbx+0x28]
  40f3b7:	mov    r12,rax
  40f3ba:	add    r12,QWORD PTR [rbx+0x68]
  40f3be:	mov    QWORD PTR [rbx+0x18],r12
  40f3c2:	mov    ecx,DWORD PTR [rbx+0x70]
  40f3c5:	sub    ecx,eax
  40f3c7:	cmp    ecx,0xfffffffc
  40f3ca:	mov    eax,0xfffffffc
  40f3cf:	cmovb  eax,ecx
  40f3d2:	mov    DWORD PTR [rbx+0x24],eax
  40f3d5:	mov    rax,QWORD PTR [rbx+0x30]
  40f3d9:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40f3e0:	add    r12,r13
  40f3e3:	je     40f3af <flatcc_builder_append_vector@@Base+0x7f>
  40f3e5:	mov    edx,r15d
  40f3e8:	mov    rdi,r12
  40f3eb:	mov    rsi,r14
  40f3ee:	call   404100 <memcpy@plt>
  40f3f3:	mov    rax,r12
  40f3f6:	pop    rbx
  40f3f7:	pop    r12
  40f3f9:	pop    r13
  40f3fb:	pop    r14
  40f3fd:	pop    r15
  40f3ff:	ret    
  40f400:	lea    rdi,[rip+0xa324]        # 41972b <flatcc_builder_padding_base@@Base+0x134b>
  40f407:	lea    rsi,[rip+0x9254]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f40e:	lea    rcx,[rip+0xa331]        # 419746 <flatcc_builder_padding_base@@Base+0x1366>
  40f415:	mov    edx,0x37c
  40f41a:	call   4040a0 <__assert_fail@plt>
  40f41f:	lea    rdi,[rip+0x9579]        # 41899f <flatcc_builder_padding_base@@Base+0x5bf>
  40f426:	lea    rsi,[rip+0x9235]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f42d:	lea    rcx,[rip+0x9617]        # 418a4b <flatcc_builder_padding_base@@Base+0x66b>
  40f434:	mov    edx,0x393
  40f439:	call   4040a0 <__assert_fail@plt>
  40f43e:	xchg   ax,ax

000000000040f440 <flatcc_builder_extend_offset_vector@@Base>:
  40f440:	push   r14
  40f442:	push   rbx
  40f443:	push   rax
  40f444:	mov    rax,QWORD PTR [rdi+0x30]
  40f448:	mov    ecx,DWORD PTR [rax+0x14]
  40f44b:	add    ecx,esi
  40f44d:	jb     40f4d4 <flatcc_builder_extend_offset_vector@@Base+0x94>
  40f453:	cmp    ecx,0x40000000
  40f459:	jae    40f4d4 <flatcc_builder_extend_offset_vector@@Base+0x94>
  40f45b:	mov    rbx,rdi
  40f45e:	mov    DWORD PTR [rax+0x14],ecx
  40f461:	mov    r14d,DWORD PTR [rdi+0x20]
  40f465:	lea    eax,[r14+rsi*4]
  40f469:	mov    DWORD PTR [rdi+0x20],eax
  40f46c:	cmp    eax,DWORD PTR [rdi+0x24]
  40f46f:	jae    40f477 <flatcc_builder_extend_offset_vector@@Base+0x37>
  40f471:	mov    rax,QWORD PTR [rbx+0x18]
  40f475:	jmp    40f4c9 <flatcc_builder_extend_offset_vector@@Base+0x89>
  40f477:	inc    eax
  40f479:	lea    rsi,[rbx+0x68]
  40f47d:	mov    rdi,QWORD PTR [rbx+0x40]
  40f481:	mov    edx,DWORD PTR [rbx+0x28]
  40f484:	add    rdx,rax
  40f487:	mov    ecx,0x1
  40f48c:	mov    r8d,0x1
  40f492:	call   QWORD PTR [rbx+0x50]
  40f495:	test   eax,eax
  40f497:	je     40f49d <flatcc_builder_extend_offset_vector@@Base+0x5d>
  40f499:	xor    eax,eax
  40f49b:	jmp    40f4cc <flatcc_builder_extend_offset_vector@@Base+0x8c>
  40f49d:	mov    ecx,DWORD PTR [rbx+0x28]
  40f4a0:	mov    rax,rcx
  40f4a3:	add    rax,QWORD PTR [rbx+0x68]
  40f4a7:	mov    QWORD PTR [rbx+0x18],rax
  40f4ab:	mov    edx,DWORD PTR [rbx+0x70]
  40f4ae:	sub    edx,ecx
  40f4b0:	cmp    edx,0xfffffffc
  40f4b3:	mov    ecx,0xfffffffc
  40f4b8:	cmovb  ecx,edx
  40f4bb:	mov    DWORD PTR [rbx+0x24],ecx
  40f4be:	mov    rcx,QWORD PTR [rbx+0x30]
  40f4c2:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40f4c9:	add    rax,r14
  40f4cc:	add    rsp,0x8
  40f4d0:	pop    rbx
  40f4d1:	pop    r14
  40f4d3:	ret    
  40f4d4:	lea    rdi,[rip+0xa250]        # 41972b <flatcc_builder_padding_base@@Base+0x134b>
  40f4db:	lea    rsi,[rip+0x9180]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f4e2:	lea    rcx,[rip+0xa25d]        # 419746 <flatcc_builder_padding_base@@Base+0x1366>
  40f4e9:	mov    edx,0x37c
  40f4ee:	call   4040a0 <__assert_fail@plt>
  40f4f3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f4fd:	nop    DWORD PTR [rax]

000000000040f500 <flatcc_builder_offset_vector_push@@Base>:
  40f500:	push   rbp
  40f501:	push   r14
  40f503:	push   rbx
  40f504:	mov    rax,QWORD PTR [rdi+0x30]
  40f508:	cmp    WORD PTR [rax+0xe],0x5
  40f50d:	jne    40f5a2 <flatcc_builder_offset_vector_push@@Base+0xa2>
  40f513:	mov    ecx,DWORD PTR [rax+0x14]
  40f516:	cmp    ecx,0x3fffffff
  40f51c:	je     40f565 <flatcc_builder_offset_vector_push@@Base+0x65>
  40f51e:	mov    r14d,esi
  40f521:	mov    rbx,rdi
  40f524:	inc    ecx
  40f526:	mov    DWORD PTR [rax+0x14],ecx
  40f529:	mov    ebp,DWORD PTR [rdi+0x20]
  40f52c:	lea    eax,[rbp+0x4]
  40f52f:	mov    DWORD PTR [rdi+0x20],eax
  40f532:	cmp    eax,DWORD PTR [rdi+0x24]
  40f535:	jae    40f542 <flatcc_builder_offset_vector_push@@Base+0x42>
  40f537:	mov    rax,QWORD PTR [rbx+0x18]
  40f53b:	add    rax,rbp
  40f53e:	jne    40f59a <flatcc_builder_offset_vector_push@@Base+0x9a>
  40f540:	jmp    40f565 <flatcc_builder_offset_vector_push@@Base+0x65>
  40f542:	lea    eax,[rbp+0x5]
  40f545:	lea    rsi,[rbx+0x68]
  40f549:	mov    rdi,QWORD PTR [rbx+0x40]
  40f54d:	mov    edx,DWORD PTR [rbx+0x28]
  40f550:	add    rdx,rax
  40f553:	mov    ecx,0x1
  40f558:	mov    r8d,0x1
  40f55e:	call   QWORD PTR [rbx+0x50]
  40f561:	test   eax,eax
  40f563:	je     40f569 <flatcc_builder_offset_vector_push@@Base+0x69>
  40f565:	xor    eax,eax
  40f567:	jmp    40f59d <flatcc_builder_offset_vector_push@@Base+0x9d>
  40f569:	mov    ecx,DWORD PTR [rbx+0x28]
  40f56c:	mov    rax,rcx
  40f56f:	add    rax,QWORD PTR [rbx+0x68]
  40f573:	mov    QWORD PTR [rbx+0x18],rax
  40f577:	mov    edx,DWORD PTR [rbx+0x70]
  40f57a:	sub    edx,ecx
  40f57c:	cmp    edx,0xfffffffc
  40f57f:	mov    ecx,0xfffffffc
  40f584:	cmovb  ecx,edx
  40f587:	mov    DWORD PTR [rbx+0x24],ecx
  40f58a:	mov    rcx,QWORD PTR [rbx+0x30]
  40f58e:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40f595:	add    rax,rbp
  40f598:	je     40f565 <flatcc_builder_offset_vector_push@@Base+0x65>
  40f59a:	mov    DWORD PTR [rax],r14d
  40f59d:	pop    rbx
  40f59e:	pop    r14
  40f5a0:	pop    rbp
  40f5a1:	ret    
  40f5a2:	lea    rdi,[rip+0x94ef]        # 418a98 <flatcc_builder_padding_base@@Base+0x6b8>
  40f5a9:	lea    rsi,[rip+0x90b2]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f5b0:	lea    rcx,[rip+0x9514]        # 418acb <flatcc_builder_padding_base@@Base+0x6eb>
  40f5b7:	mov    edx,0x3a6
  40f5bc:	call   4040a0 <__assert_fail@plt>
  40f5c1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40f5cb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040f5d0 <flatcc_builder_append_offset_vector@@Base>:
  40f5d0:	push   r15
  40f5d2:	push   r14
  40f5d4:	push   r13
  40f5d6:	push   r12
  40f5d8:	push   rbx
  40f5d9:	mov    rax,QWORD PTR [rdi+0x30]
  40f5dd:	cmp    WORD PTR [rax+0xe],0x5
  40f5e2:	jne    40f6be <flatcc_builder_append_offset_vector@@Base+0xee>
  40f5e8:	mov    r15,rdx
  40f5eb:	mov    ecx,DWORD PTR [rax+0x14]
  40f5ee:	add    ecx,r15d
  40f5f1:	jb     40f69f <flatcc_builder_append_offset_vector@@Base+0xcf>
  40f5f7:	cmp    ecx,0x40000000
  40f5fd:	jae    40f69f <flatcc_builder_append_offset_vector@@Base+0xcf>
  40f603:	mov    r14,rsi
  40f606:	mov    rbx,rdi
  40f609:	mov    DWORD PTR [rax+0x14],ecx
  40f60c:	mov    r13d,DWORD PTR [rdi+0x20]
  40f610:	lea    eax,[r13+r15*4+0x0]
  40f615:	mov    DWORD PTR [rdi+0x20],eax
  40f618:	cmp    eax,DWORD PTR [rdi+0x24]
  40f61b:	jae    40f628 <flatcc_builder_append_offset_vector@@Base+0x58>
  40f61d:	mov    r12,QWORD PTR [rbx+0x18]
  40f621:	add    r12,r13
  40f624:	jne    40f680 <flatcc_builder_append_offset_vector@@Base+0xb0>
  40f626:	jmp    40f64a <flatcc_builder_append_offset_vector@@Base+0x7a>
  40f628:	inc    eax
  40f62a:	lea    rsi,[rbx+0x68]
  40f62e:	mov    rdi,QWORD PTR [rbx+0x40]
  40f632:	mov    edx,DWORD PTR [rbx+0x28]
  40f635:	add    rdx,rax
  40f638:	mov    ecx,0x1
  40f63d:	mov    r8d,0x1
  40f643:	call   QWORD PTR [rbx+0x50]
  40f646:	test   eax,eax
  40f648:	je     40f64f <flatcc_builder_append_offset_vector@@Base+0x7f>
  40f64a:	xor    r12d,r12d
  40f64d:	jmp    40f692 <flatcc_builder_append_offset_vector@@Base+0xc2>
  40f64f:	mov    eax,DWORD PTR [rbx+0x28]
  40f652:	mov    r12,rax
  40f655:	add    r12,QWORD PTR [rbx+0x68]
  40f659:	mov    QWORD PTR [rbx+0x18],r12
  40f65d:	mov    ecx,DWORD PTR [rbx+0x70]
  40f660:	sub    ecx,eax
  40f662:	cmp    ecx,0xfffffffc
  40f665:	mov    eax,0xfffffffc
  40f66a:	cmovb  eax,ecx
  40f66d:	mov    DWORD PTR [rbx+0x24],eax
  40f670:	mov    rax,QWORD PTR [rbx+0x30]
  40f674:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40f67b:	add    r12,r13
  40f67e:	je     40f64a <flatcc_builder_append_offset_vector@@Base+0x7a>
  40f680:	shl    r15d,0x2
  40f684:	mov    edx,r15d
  40f687:	mov    rdi,r12
  40f68a:	mov    rsi,r14
  40f68d:	call   404100 <memcpy@plt>
  40f692:	mov    rax,r12
  40f695:	pop    rbx
  40f696:	pop    r12
  40f698:	pop    r13
  40f69a:	pop    r14
  40f69c:	pop    r15
  40f69e:	ret    
  40f69f:	lea    rdi,[rip+0xa085]        # 41972b <flatcc_builder_padding_base@@Base+0x134b>
  40f6a6:	lea    rsi,[rip+0x8fb5]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f6ad:	lea    rcx,[rip+0xa092]        # 419746 <flatcc_builder_padding_base@@Base+0x1366>
  40f6b4:	mov    edx,0x37c
  40f6b9:	call   4040a0 <__assert_fail@plt>
  40f6be:	lea    rdi,[rip+0x93d3]        # 418a98 <flatcc_builder_padding_base@@Base+0x6b8>
  40f6c5:	lea    rsi,[rip+0x8f96]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f6cc:	lea    rcx,[rip+0x945a]        # 418b2d <flatcc_builder_padding_base@@Base+0x74d>
  40f6d3:	mov    edx,0x3b4
  40f6d8:	call   4040a0 <__assert_fail@plt>
  40f6dd:	nop    DWORD PTR [rax]

000000000040f6e0 <flatcc_builder_extend_string@@Base>:
  40f6e0:	push   r14
  40f6e2:	push   rbx
  40f6e3:	push   rax
  40f6e4:	mov    rax,QWORD PTR [rdi+0x30]
  40f6e8:	cmp    WORD PTR [rax+0xe],0x6
  40f6ed:	jne    40f779 <flatcc_builder_extend_string@@Base+0x99>
  40f6f3:	mov    ecx,DWORD PTR [rax+0x14]
  40f6f6:	add    ecx,esi
  40f6f8:	jb     40f798 <flatcc_builder_extend_string@@Base+0xb8>
  40f6fe:	mov    rbx,rdi
  40f701:	mov    DWORD PTR [rax+0x14],ecx
  40f704:	mov    r14d,DWORD PTR [rdi+0x20]
  40f708:	add    esi,r14d
  40f70b:	mov    DWORD PTR [rdi+0x20],esi
  40f70e:	cmp    esi,DWORD PTR [rdi+0x24]
  40f711:	jae    40f719 <flatcc_builder_extend_string@@Base+0x39>
  40f713:	mov    rax,QWORD PTR [rbx+0x18]
  40f717:	jmp    40f76e <flatcc_builder_extend_string@@Base+0x8e>
  40f719:	inc    esi
  40f71b:	lea    rax,[rbx+0x68]
  40f71f:	mov    rdi,QWORD PTR [rbx+0x40]
  40f723:	mov    edx,DWORD PTR [rbx+0x28]
  40f726:	add    rdx,rsi
  40f729:	mov    rsi,rax
  40f72c:	mov    ecx,0x1
  40f731:	mov    r8d,0x1
  40f737:	call   QWORD PTR [rbx+0x50]
  40f73a:	test   eax,eax
  40f73c:	je     40f742 <flatcc_builder_extend_string@@Base+0x62>
  40f73e:	xor    eax,eax
  40f740:	jmp    40f771 <flatcc_builder_extend_string@@Base+0x91>
  40f742:	mov    ecx,DWORD PTR [rbx+0x28]
  40f745:	mov    rax,rcx
  40f748:	add    rax,QWORD PTR [rbx+0x68]
  40f74c:	mov    QWORD PTR [rbx+0x18],rax
  40f750:	mov    edx,DWORD PTR [rbx+0x70]
  40f753:	sub    edx,ecx
  40f755:	cmp    edx,0xfffffffc
  40f758:	mov    ecx,0xfffffffc
  40f75d:	cmovb  ecx,edx
  40f760:	mov    DWORD PTR [rbx+0x24],ecx
  40f763:	mov    rcx,QWORD PTR [rbx+0x30]
  40f767:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40f76e:	add    rax,r14
  40f771:	add    rsp,0x8
  40f775:	pop    rbx
  40f776:	pop    r14
  40f778:	ret    
  40f779:	lea    rdi,[rip+0x9421]        # 418ba1 <flatcc_builder_padding_base@@Base+0x7c1>
  40f780:	lea    rsi,[rip+0x8edb]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f787:	lea    rcx,[rip+0x943f]        # 418bcd <flatcc_builder_padding_base@@Base+0x7ed>
  40f78e:	mov    edx,0x3bd
  40f793:	call   4040a0 <__assert_fail@plt>
  40f798:	lea    rdi,[rip+0x9f8c]        # 41972b <flatcc_builder_padding_base@@Base+0x134b>
  40f79f:	lea    rsi,[rip+0x8ebc]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f7a6:	lea    rcx,[rip+0x9f99]        # 419746 <flatcc_builder_padding_base@@Base+0x1366>
  40f7ad:	mov    edx,0x37c
  40f7b2:	call   4040a0 <__assert_fail@plt>
  40f7b7:	nop    WORD PTR [rax+rax*1+0x0]

000000000040f7c0 <flatcc_builder_append_string@@Base>:
  40f7c0:	push   r15
  40f7c2:	push   r14
  40f7c4:	push   r13
  40f7c6:	push   r12
  40f7c8:	push   rbx
  40f7c9:	mov    rax,QWORD PTR [rdi+0x30]
  40f7cd:	cmp    WORD PTR [rax+0xe],0x6
  40f7d2:	jne    40f87e <flatcc_builder_append_string@@Base+0xbe>
  40f7d8:	mov    r15,rdx
  40f7db:	mov    ecx,DWORD PTR [rax+0x14]
  40f7de:	add    ecx,r15d
  40f7e1:	jb     40f89d <flatcc_builder_append_string@@Base+0xdd>
  40f7e7:	mov    r14,rsi
  40f7ea:	mov    rbx,rdi
  40f7ed:	mov    DWORD PTR [rax+0x14],ecx
  40f7f0:	mov    r13d,DWORD PTR [rdi+0x20]
  40f7f4:	lea    eax,[r15+r13*1]
  40f7f8:	mov    DWORD PTR [rdi+0x20],eax
  40f7fb:	cmp    eax,DWORD PTR [rdi+0x24]
  40f7fe:	jae    40f80b <flatcc_builder_append_string@@Base+0x4b>
  40f800:	mov    r12,QWORD PTR [rbx+0x18]
  40f804:	add    r12,r13
  40f807:	jne    40f863 <flatcc_builder_append_string@@Base+0xa3>
  40f809:	jmp    40f82d <flatcc_builder_append_string@@Base+0x6d>
  40f80b:	inc    eax
  40f80d:	lea    rsi,[rbx+0x68]
  40f811:	mov    rdi,QWORD PTR [rbx+0x40]
  40f815:	mov    edx,DWORD PTR [rbx+0x28]
  40f818:	add    rdx,rax
  40f81b:	mov    ecx,0x1
  40f820:	mov    r8d,0x1
  40f826:	call   QWORD PTR [rbx+0x50]
  40f829:	test   eax,eax
  40f82b:	je     40f832 <flatcc_builder_append_string@@Base+0x72>
  40f82d:	xor    r12d,r12d
  40f830:	jmp    40f871 <flatcc_builder_append_string@@Base+0xb1>
  40f832:	mov    eax,DWORD PTR [rbx+0x28]
  40f835:	mov    r12,rax
  40f838:	add    r12,QWORD PTR [rbx+0x68]
  40f83c:	mov    QWORD PTR [rbx+0x18],r12
  40f840:	mov    ecx,DWORD PTR [rbx+0x70]
  40f843:	sub    ecx,eax
  40f845:	cmp    ecx,0xfffffffc
  40f848:	mov    eax,0xfffffffc
  40f84d:	cmovb  eax,ecx
  40f850:	mov    DWORD PTR [rbx+0x24],eax
  40f853:	mov    rax,QWORD PTR [rbx+0x30]
  40f857:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40f85e:	add    r12,r13
  40f861:	je     40f82d <flatcc_builder_append_string@@Base+0x6d>
  40f863:	mov    edx,r15d
  40f866:	mov    rdi,r12
  40f869:	mov    rsi,r14
  40f86c:	call   404100 <memcpy@plt>
  40f871:	mov    rax,r12
  40f874:	pop    rbx
  40f875:	pop    r12
  40f877:	pop    r13
  40f879:	pop    r14
  40f87b:	pop    r15
  40f87d:	ret    
  40f87e:	lea    rdi,[rip+0x931c]        # 418ba1 <flatcc_builder_padding_base@@Base+0x7c1>
  40f885:	lea    rsi,[rip+0x8dd6]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f88c:	lea    rcx,[rip+0x9379]        # 418c0c <flatcc_builder_padding_base@@Base+0x82c>
  40f893:	mov    edx,0x3c6
  40f898:	call   4040a0 <__assert_fail@plt>
  40f89d:	lea    rdi,[rip+0x9e87]        # 41972b <flatcc_builder_padding_base@@Base+0x134b>
  40f8a4:	lea    rsi,[rip+0x8db7]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f8ab:	lea    rcx,[rip+0x9e94]        # 419746 <flatcc_builder_padding_base@@Base+0x1366>
  40f8b2:	mov    edx,0x37c
  40f8b7:	call   4040a0 <__assert_fail@plt>
  40f8bc:	nop    DWORD PTR [rax+0x0]

000000000040f8c0 <flatcc_builder_append_string_str@@Base>:
  40f8c0:	push   r14
  40f8c2:	push   rbx
  40f8c3:	push   rax
  40f8c4:	mov    rbx,rsi
  40f8c7:	mov    r14,rdi
  40f8ca:	mov    rdi,rsi
  40f8cd:	call   404070 <strlen@plt>
  40f8d2:	mov    rdi,r14
  40f8d5:	mov    rsi,rbx
  40f8d8:	mov    rdx,rax
  40f8db:	add    rsp,0x8
  40f8df:	pop    rbx
  40f8e0:	pop    r14
  40f8e2:	jmp    40f7c0 <flatcc_builder_append_string@@Base>
  40f8e7:	nop    WORD PTR [rax+rax*1+0x0]

000000000040f8f0 <flatcc_builder_append_string_strn@@Base>:
  40f8f0:	push   r15
  40f8f2:	push   r14
  40f8f4:	push   rbx
  40f8f5:	mov    rbx,rdx
  40f8f8:	mov    r14,rsi
  40f8fb:	mov    r15,rdi
  40f8fe:	mov    rdi,rsi
  40f901:	xor    esi,esi
  40f903:	call   4040d0 <memchr@plt>
  40f908:	mov    rcx,rax
  40f90b:	sub    rcx,r14
  40f90e:	test   rax,rax
  40f911:	cmovne rbx,rcx
  40f915:	mov    rdi,r15
  40f918:	mov    rsi,r14
  40f91b:	mov    rdx,rbx
  40f91e:	pop    rbx
  40f91f:	pop    r14
  40f921:	pop    r15
  40f923:	jmp    40f7c0 <flatcc_builder_append_string@@Base>
  40f928:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040f930 <flatcc_builder_truncate_vector@@Base>:
  40f930:	push   rax
  40f931:	mov    rax,QWORD PTR [rdi+0x30]
  40f935:	cmp    WORD PTR [rax+0xe],0x4
  40f93a:	jne    40f96e <flatcc_builder_truncate_vector@@Base+0x3e>
  40f93c:	mov    rdx,rsi
  40f93f:	mov    ecx,DWORD PTR [rax+0x14]
  40f942:	cmp    rcx,rsi
  40f945:	jb     40f98d <flatcc_builder_truncate_vector@@Base+0x5d>
  40f947:	sub    ecx,edx
  40f949:	mov    DWORD PTR [rax+0x14],ecx
  40f94c:	mov    rax,QWORD PTR [rdi+0x30]
  40f950:	imul   edx,DWORD PTR [rax+0x10]
  40f954:	mov    eax,DWORD PTR [rdi+0x20]
  40f957:	sub    eax,edx
  40f959:	mov    DWORD PTR [rdi+0x20],eax
  40f95c:	add    rax,QWORD PTR [rdi+0x18]
  40f960:	mov    rdi,rax
  40f963:	xor    esi,esi
  40f965:	call   4040b0 <memset@plt>
  40f96a:	xor    eax,eax
  40f96c:	pop    rcx
  40f96d:	ret    
  40f96e:	lea    rdi,[rip+0x902a]        # 41899f <flatcc_builder_padding_base@@Base+0x5bf>
  40f975:	lea    rsi,[rip+0x8ce6]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f97c:	lea    rcx,[rip+0x92d6]        # 418c59 <flatcc_builder_padding_base@@Base+0x879>
  40f983:	mov    edx,0x3d9
  40f988:	call   4040a0 <__assert_fail@plt>
  40f98d:	lea    rdi,[rip+0x9304]        # 418c98 <flatcc_builder_padding_base@@Base+0x8b8>
  40f994:	lea    rsi,[rip+0x8cc7]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f99b:	lea    rcx,[rip+0x92b7]        # 418c59 <flatcc_builder_padding_base@@Base+0x879>
  40f9a2:	mov    edx,0x3da
  40f9a7:	call   4040a0 <__assert_fail@plt>
  40f9ac:	nop    DWORD PTR [rax+0x0]

000000000040f9b0 <flatcc_builder_truncate_offset_vector@@Base>:
  40f9b0:	push   rax
  40f9b1:	mov    rax,QWORD PTR [rdi+0x30]
  40f9b5:	cmp    WORD PTR [rax+0xe],0x5
  40f9ba:	jne    40f9eb <flatcc_builder_truncate_offset_vector@@Base+0x3b>
  40f9bc:	mov    rdx,rsi
  40f9bf:	mov    ecx,DWORD PTR [rax+0x14]
  40f9c2:	sub    ecx,edx
  40f9c4:	jb     40fa0a <flatcc_builder_truncate_offset_vector@@Base+0x5a>
  40f9c6:	mov    DWORD PTR [rax+0x14],ecx
  40f9c9:	mov    rax,QWORD PTR [rdi+0x30]
  40f9cd:	imul   edx,DWORD PTR [rax+0x10]
  40f9d1:	mov    eax,DWORD PTR [rdi+0x20]
  40f9d4:	sub    eax,edx
  40f9d6:	mov    DWORD PTR [rdi+0x20],eax
  40f9d9:	add    rax,QWORD PTR [rdi+0x18]
  40f9dd:	mov    rdi,rax
  40f9e0:	xor    esi,esi
  40f9e2:	call   4040b0 <memset@plt>
  40f9e7:	xor    eax,eax
  40f9e9:	pop    rcx
  40f9ea:	ret    
  40f9eb:	lea    rdi,[rip+0x90a6]        # 418a98 <flatcc_builder_padding_base@@Base+0x6b8>
  40f9f2:	lea    rsi,[rip+0x8c69]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40f9f9:	lea    rcx,[rip+0x92bc]        # 418cbc <flatcc_builder_padding_base@@Base+0x8dc>
  40fa00:	mov    edx,0x3e2
  40fa05:	call   4040a0 <__assert_fail@plt>
  40fa0a:	lea    rdi,[rip+0x92f1]        # 418d02 <flatcc_builder_padding_base@@Base+0x922>
  40fa11:	lea    rsi,[rip+0x8c4a]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40fa18:	lea    rcx,[rip+0x929d]        # 418cbc <flatcc_builder_padding_base@@Base+0x8dc>
  40fa1f:	mov    edx,0x3e3
  40fa24:	call   4040a0 <__assert_fail@plt>
  40fa29:	nop    DWORD PTR [rax+0x0]

000000000040fa30 <flatcc_builder_truncate_string@@Base>:
  40fa30:	push   rax
  40fa31:	mov    rax,QWORD PTR [rdi+0x30]
  40fa35:	cmp    WORD PTR [rax+0xe],0x6
  40fa3a:	jne    40fa65 <flatcc_builder_truncate_string@@Base+0x35>
  40fa3c:	mov    ecx,DWORD PTR [rax+0x14]
  40fa3f:	cmp    rcx,rsi
  40fa42:	jb     40fa84 <flatcc_builder_truncate_string@@Base+0x54>
  40fa44:	sub    ecx,esi
  40fa46:	mov    DWORD PTR [rax+0x14],ecx
  40fa49:	mov    eax,DWORD PTR [rdi+0x20]
  40fa4c:	sub    eax,esi
  40fa4e:	mov    DWORD PTR [rdi+0x20],eax
  40fa51:	add    rax,QWORD PTR [rdi+0x18]
  40fa55:	mov    edx,esi
  40fa57:	mov    rdi,rax
  40fa5a:	xor    esi,esi
  40fa5c:	call   4040b0 <memset@plt>
  40fa61:	xor    eax,eax
  40fa63:	pop    rcx
  40fa64:	ret    
  40fa65:	lea    rdi,[rip+0x9135]        # 418ba1 <flatcc_builder_padding_base@@Base+0x7c1>
  40fa6c:	lea    rsi,[rip+0x8bef]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40fa73:	lea    rcx,[rip+0x92c3]        # 418d3d <flatcc_builder_padding_base@@Base+0x95d>
  40fa7a:	mov    edx,0x3eb
  40fa7f:	call   4040a0 <__assert_fail@plt>
  40fa84:	lea    rdi,[rip+0x92f1]        # 418d7c <flatcc_builder_padding_base@@Base+0x99c>
  40fa8b:	lea    rsi,[rip+0x8bd0]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40fa92:	lea    rcx,[rip+0x92a4]        # 418d3d <flatcc_builder_padding_base@@Base+0x95d>
  40fa99:	mov    edx,0x3ec
  40fa9e:	call   4040a0 <__assert_fail@plt>
  40faa3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40faad:	nop    DWORD PTR [rax]

000000000040fab0 <flatcc_builder_start_vector@@Base>:
  40fab0:	push   r15
  40fab2:	push   r14
  40fab4:	push   rbx
  40fab5:	mov    r14,rcx
  40fab8:	mov    r15,rsi
  40fabb:	mov    rbx,rdi
  40fabe:	cmp    dx,0x4
  40fac2:	mov    esi,0x4
  40fac7:	cmova  esi,edx
  40faca:	call   40ed60 <flatcc_builder_start_buffer@@Base+0xe0>
  40facf:	mov    ecx,eax
  40fad1:	mov    eax,0xffffffff
  40fad6:	test   ecx,ecx
  40fad8:	jne    40fb26 <flatcc_builder_start_vector@@Base+0x76>
  40fada:	mov    rax,QWORD PTR [rbx+0x30]
  40fade:	mov    DWORD PTR [rax+0x10],r15d
  40fae2:	mov    rax,QWORD PTR [rbx+0x30]
  40fae6:	mov    DWORD PTR [rax+0x14],0x0
  40faed:	mov    rax,QWORD PTR [rbx+0x30]
  40faf1:	mov    DWORD PTR [rax+0x18],r14d
  40faf5:	mov    rax,QWORD PTR [rbx+0x30]
  40faf9:	mov    WORD PTR [rax+0xe],0x4
  40faff:	mov    ecx,DWORD PTR [rbx+0x28]
  40fb02:	mov    edx,DWORD PTR [rbx+0x70]
  40fb05:	sub    edx,ecx
  40fb07:	add    rcx,QWORD PTR [rbx+0x68]
  40fb0b:	mov    QWORD PTR [rbx+0x18],rcx
  40fb0f:	cmp    edx,0xfffffffc
  40fb12:	mov    ecx,0xfffffffc
  40fb17:	cmovb  ecx,edx
  40fb1a:	mov    DWORD PTR [rbx+0x24],ecx
  40fb1d:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40fb24:	xor    eax,eax
  40fb26:	pop    rbx
  40fb27:	pop    r14
  40fb29:	pop    r15
  40fb2b:	ret    
  40fb2c:	nop    DWORD PTR [rax+0x0]

000000000040fb30 <flatcc_builder_start_offset_vector@@Base>:
  40fb30:	push   rbx
  40fb31:	mov    rbx,rdi
  40fb34:	mov    esi,0x4
  40fb39:	call   40ed60 <flatcc_builder_start_buffer@@Base+0xe0>
  40fb3e:	mov    ecx,eax
  40fb40:	mov    eax,0xffffffff
  40fb45:	test   ecx,ecx
  40fb47:	je     40fb4b <flatcc_builder_start_offset_vector@@Base+0x1b>
  40fb49:	pop    rbx
  40fb4a:	ret    
  40fb4b:	mov    rax,QWORD PTR [rbx+0x30]
  40fb4f:	mov    DWORD PTR [rax+0x10],0x4
  40fb56:	mov    rax,QWORD PTR [rbx+0x30]
  40fb5a:	mov    DWORD PTR [rax+0x14],0x0
  40fb61:	mov    rax,QWORD PTR [rbx+0x30]
  40fb65:	mov    WORD PTR [rax+0xe],0x5
  40fb6b:	mov    ecx,DWORD PTR [rbx+0x28]
  40fb6e:	mov    edx,DWORD PTR [rbx+0x70]
  40fb71:	sub    edx,ecx
  40fb73:	add    rcx,QWORD PTR [rbx+0x68]
  40fb77:	mov    QWORD PTR [rbx+0x18],rcx
  40fb7b:	cmp    edx,0xfffffffc
  40fb7e:	mov    ecx,0xfffffffc
  40fb83:	cmovb  ecx,edx
  40fb86:	mov    DWORD PTR [rbx+0x24],ecx
  40fb89:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40fb90:	xor    eax,eax
  40fb92:	pop    rbx
  40fb93:	ret    
  40fb94:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40fb9e:	xchg   ax,ax

000000000040fba0 <flatcc_builder_create_offset_vector@@Base>:
  40fba0:	push   r15
  40fba2:	push   r14
  40fba4:	push   r12
  40fba6:	push   rbx
  40fba7:	push   rax
  40fba8:	mov    r14,rdx
  40fbab:	mov    r15,rsi
  40fbae:	mov    rbx,rdi
  40fbb1:	mov    esi,0x4
  40fbb6:	call   40ed60 <flatcc_builder_start_buffer@@Base+0xe0>
  40fbbb:	test   eax,eax
  40fbbd:	je     40fbcd <flatcc_builder_create_offset_vector@@Base+0x2d>
  40fbbf:	xor    eax,eax
  40fbc1:	add    rsp,0x8
  40fbc5:	pop    rbx
  40fbc6:	pop    r12
  40fbc8:	pop    r14
  40fbca:	pop    r15
  40fbcc:	ret    
  40fbcd:	mov    rax,QWORD PTR [rbx+0x30]
  40fbd1:	mov    DWORD PTR [rax+0x10],0x4
  40fbd8:	mov    rax,QWORD PTR [rbx+0x30]
  40fbdc:	mov    DWORD PTR [rax+0x14],0x0
  40fbe3:	mov    rax,QWORD PTR [rbx+0x30]
  40fbe7:	mov    WORD PTR [rax+0xe],0x5
  40fbed:	mov    ecx,DWORD PTR [rbx+0x28]
  40fbf0:	mov    edx,DWORD PTR [rbx+0x70]
  40fbf3:	sub    edx,ecx
  40fbf5:	add    rcx,QWORD PTR [rbx+0x68]
  40fbf9:	mov    QWORD PTR [rbx+0x18],rcx
  40fbfd:	cmp    edx,0xfffffffc
  40fc00:	mov    ecx,0xfffffffc
  40fc05:	cmovb  ecx,edx
  40fc08:	mov    DWORD PTR [rbx+0x24],ecx
  40fc0b:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40fc12:	mov    ecx,DWORD PTR [rax+0x14]
  40fc15:	add    ecx,r14d
  40fc18:	jb     40fcc8 <flatcc_builder_create_offset_vector@@Base+0x128>
  40fc1e:	cmp    ecx,0x40000000
  40fc24:	jae    40fcc8 <flatcc_builder_create_offset_vector@@Base+0x128>
  40fc2a:	mov    DWORD PTR [rax+0x14],ecx
  40fc2d:	mov    r12d,DWORD PTR [rbx+0x20]
  40fc31:	lea    eax,[r12+r14*4]
  40fc35:	mov    DWORD PTR [rbx+0x20],eax
  40fc38:	cmp    eax,DWORD PTR [rbx+0x24]
  40fc3b:	jae    40fc4b <flatcc_builder_create_offset_vector@@Base+0xab>
  40fc3d:	mov    rdi,QWORD PTR [rbx+0x18]
  40fc41:	add    rdi,r12
  40fc44:	jne    40fca6 <flatcc_builder_create_offset_vector@@Base+0x106>
  40fc46:	jmp    40fbbf <flatcc_builder_create_offset_vector@@Base+0x1f>
  40fc4b:	inc    eax
  40fc4d:	lea    rsi,[rbx+0x68]
  40fc51:	mov    rdi,QWORD PTR [rbx+0x40]
  40fc55:	mov    edx,DWORD PTR [rbx+0x28]
  40fc58:	add    rdx,rax
  40fc5b:	mov    ecx,0x1
  40fc60:	mov    r8d,0x1
  40fc66:	call   QWORD PTR [rbx+0x50]
  40fc69:	test   eax,eax
  40fc6b:	jne    40fbbf <flatcc_builder_create_offset_vector@@Base+0x1f>
  40fc71:	mov    eax,DWORD PTR [rbx+0x28]
  40fc74:	mov    rdi,rax
  40fc77:	add    rdi,QWORD PTR [rbx+0x68]
  40fc7b:	mov    QWORD PTR [rbx+0x18],rdi
  40fc7f:	mov    ecx,DWORD PTR [rbx+0x70]
  40fc82:	sub    ecx,eax
  40fc84:	cmp    ecx,0xfffffffc
  40fc87:	mov    eax,0xfffffffc
  40fc8c:	cmovb  eax,ecx
  40fc8f:	mov    DWORD PTR [rbx+0x24],eax
  40fc92:	mov    rax,QWORD PTR [rbx+0x30]
  40fc96:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40fc9d:	add    rdi,r12
  40fca0:	je     40fbbf <flatcc_builder_create_offset_vector@@Base+0x1f>
  40fca6:	shl    r14,0x2
  40fcaa:	mov    rsi,r15
  40fcad:	mov    rdx,r14
  40fcb0:	call   404100 <memcpy@plt>
  40fcb5:	mov    rdi,rbx
  40fcb8:	add    rsp,0x8
  40fcbc:	pop    rbx
  40fcbd:	pop    r12
  40fcbf:	pop    r14
  40fcc1:	pop    r15
  40fcc3:	jmp    40fcf0 <flatcc_builder_end_offset_vector@@Base>
  40fcc8:	lea    rdi,[rip+0x9a5c]        # 41972b <flatcc_builder_padding_base@@Base+0x134b>
  40fccf:	lea    rsi,[rip+0x898c]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40fcd6:	lea    rcx,[rip+0x9a69]        # 419746 <flatcc_builder_padding_base@@Base+0x1366>
  40fcdd:	mov    edx,0x37c
  40fce2:	call   4040a0 <__assert_fail@plt>
  40fce7:	nop    WORD PTR [rax+rax*1+0x0]

000000000040fcf0 <flatcc_builder_end_offset_vector@@Base>:
  40fcf0:	push   rbp
  40fcf1:	push   rbx
  40fcf2:	push   rax
  40fcf3:	mov    rax,QWORD PTR [rdi+0x30]
  40fcf7:	cmp    WORD PTR [rax+0xe],0x5
  40fcfc:	jne    40fd8a <flatcc_builder_end_offset_vector@@Base+0x9a>
  40fd02:	mov    rbx,rdi
  40fd05:	mov    rsi,QWORD PTR [rdi+0x18]
  40fd09:	mov    edx,DWORD PTR [rax+0x14]
  40fd0c:	xor    ecx,ecx
  40fd0e:	call   410d40 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  40fd13:	mov    ebp,eax
  40fd15:	test   eax,eax
  40fd17:	je     40fd81 <flatcc_builder_end_offset_vector@@Base+0x91>
  40fd19:	mov    rdi,QWORD PTR [rbx+0x18]
  40fd1d:	mov    edx,DWORD PTR [rbx+0x20]
  40fd20:	xor    esi,esi
  40fd22:	call   4040b0 <memset@plt>
  40fd27:	mov    rax,QWORD PTR [rbx+0x30]
  40fd2b:	mov    ecx,DWORD PTR [rax+0x8]
  40fd2e:	mov    DWORD PTR [rbx+0x20],ecx
  40fd31:	mov    ecx,DWORD PTR [rax]
  40fd33:	mov    DWORD PTR [rbx+0x28],ecx
  40fd36:	mov    edx,DWORD PTR [rax+0x4]
  40fd39:	mov    rsi,rcx
  40fd3c:	add    rsi,QWORD PTR [rbx+0x68]
  40fd40:	mov    QWORD PTR [rbx+0x18],rsi
  40fd44:	mov    esi,DWORD PTR [rbx+0x70]
  40fd47:	sub    esi,ecx
  40fd49:	cmp    esi,edx
  40fd4b:	cmova  esi,edx
  40fd4e:	mov    DWORD PTR [rbx+0x24],esi
  40fd51:	movzx  ecx,WORD PTR [rbx+0xea]
  40fd58:	cmp    WORD PTR [rbx+0xe8],cx
  40fd5f:	jae    40fd68 <flatcc_builder_end_offset_vector@@Base+0x78>
  40fd61:	mov    WORD PTR [rbx+0xe8],cx
  40fd68:	movzx  ecx,WORD PTR [rax+0xc]
  40fd6c:	mov    WORD PTR [rbx+0xea],cx
  40fd73:	add    rax,0xffffffffffffffdc
  40fd77:	mov    QWORD PTR [rbx+0x30],rax
  40fd7b:	dec    DWORD PTR [rbx+0x104]
  40fd81:	mov    eax,ebp
  40fd83:	add    rsp,0x8
  40fd87:	pop    rbx
  40fd88:	pop    rbp
  40fd89:	ret    
  40fd8a:	lea    rdi,[rip+0x8d07]        # 418a98 <flatcc_builder_padding_base@@Base+0x6b8>
  40fd91:	lea    rsi,[rip+0x88ca]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40fd98:	lea    rcx,[rip+0x9328]        # 4190c7 <flatcc_builder_padding_base@@Base+0xce7>
  40fd9f:	mov    edx,0x5c8
  40fda4:	call   4040a0 <__assert_fail@plt>
  40fda9:	nop    DWORD PTR [rax+0x0]

000000000040fdb0 <flatcc_builder_start_string@@Base>:
  40fdb0:	push   rbx
  40fdb1:	mov    rbx,rdi
  40fdb4:	mov    esi,0x1
  40fdb9:	call   40ed60 <flatcc_builder_start_buffer@@Base+0xe0>
  40fdbe:	mov    ecx,eax
  40fdc0:	mov    eax,0xffffffff
  40fdc5:	test   ecx,ecx
  40fdc7:	je     40fdcb <flatcc_builder_start_string@@Base+0x1b>
  40fdc9:	pop    rbx
  40fdca:	ret    
  40fdcb:	mov    rax,QWORD PTR [rbx+0x30]
  40fdcf:	mov    DWORD PTR [rax+0x10],0x1
  40fdd6:	mov    rax,QWORD PTR [rbx+0x30]
  40fdda:	mov    DWORD PTR [rax+0x14],0x0
  40fde1:	mov    rax,QWORD PTR [rbx+0x30]
  40fde5:	mov    WORD PTR [rax+0xe],0x6
  40fdeb:	mov    ecx,DWORD PTR [rbx+0x28]
  40fdee:	mov    edx,DWORD PTR [rbx+0x70]
  40fdf1:	sub    edx,ecx
  40fdf3:	add    rcx,QWORD PTR [rbx+0x68]
  40fdf7:	mov    QWORD PTR [rbx+0x18],rcx
  40fdfb:	cmp    edx,0xfffffffc
  40fdfe:	mov    ecx,0xfffffffc
  40fe03:	cmovb  ecx,edx
  40fe06:	mov    DWORD PTR [rbx+0x24],ecx
  40fe09:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40fe10:	xor    eax,eax
  40fe12:	pop    rbx
  40fe13:	ret    
  40fe14:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40fe1e:	xchg   ax,ax

000000000040fe20 <flatcc_builder_reserve_table@@Base>:
  40fe20:	push   r15
  40fe22:	push   r14
  40fe24:	push   rbx
  40fe25:	test   esi,esi
  40fe27:	js     40fed4 <flatcc_builder_reserve_table@@Base+0xb4>
  40fe2d:	mov    r14d,esi
  40fe30:	mov    r15,rdi
  40fe33:	mov    rax,QWORD PTR [rdi+0x30]
  40fe37:	movzx  ebx,WORD PTR [rax+0x1c]
  40fe3b:	add    ebx,ebx
  40fe3d:	add    ebx,DWORD PTR [rax+0x10]
  40fe40:	lea    edx,[r14+r14*1]
  40fe44:	add    edx,0x4
  40fe47:	add    rdx,rbx
  40fe4a:	cmp    rdx,QWORD PTR [rdi+0x60]
  40fe4e:	jbe    40fe6c <flatcc_builder_reserve_table@@Base+0x4c>
  40fe50:	lea    rsi,[r15+0x58]
  40fe54:	mov    rdi,QWORD PTR [r15+0x40]
  40fe58:	mov    ecx,0x1
  40fe5d:	xor    r8d,r8d
  40fe60:	call   QWORD PTR [r15+0x50]
  40fe64:	test   eax,eax
  40fe66:	jne    40fef3 <flatcc_builder_reserve_table@@Base+0xd3>
  40fe6c:	add    rbx,QWORD PTR [r15+0x58]
  40fe70:	mov    QWORD PTR [r15+0x8],rbx
  40fe74:	je     40fec9 <flatcc_builder_reserve_table@@Base+0xa9>
  40fe76:	add    r14d,r14d
  40fe79:	add    rbx,0x4
  40fe7d:	mov    QWORD PTR [r15+0x8],rbx
  40fe81:	mov    rax,QWORD PTR [r15+0x30]
  40fe85:	mov    ebx,DWORD PTR [rax+0x14]
  40fe88:	or     r14d,0x1
  40fe8c:	add    r14,rbx
  40fe8f:	cmp    r14,QWORD PTR [r15+0x90]
  40fe96:	jbe    40feb6 <flatcc_builder_reserve_table@@Base+0x96>
  40fe98:	lea    rsi,[r15+0x88]
  40fe9f:	mov    rdi,QWORD PTR [r15+0x40]
  40fea3:	mov    rdx,r14
  40fea6:	xor    ecx,ecx
  40fea8:	mov    r8d,0x3
  40feae:	call   QWORD PTR [r15+0x50]
  40feb2:	test   eax,eax
  40feb4:	jne    40fef3 <flatcc_builder_reserve_table@@Base+0xd3>
  40feb6:	xor    eax,eax
  40feb8:	add    rbx,QWORD PTR [r15+0x88]
  40febf:	mov    QWORD PTR [r15],rbx
  40fec2:	sete   al
  40fec5:	neg    eax
  40fec7:	jmp    40fece <flatcc_builder_reserve_table@@Base+0xae>
  40fec9:	mov    eax,0xffffffff
  40fece:	pop    rbx
  40fecf:	pop    r14
  40fed1:	pop    r15
  40fed3:	ret    
  40fed4:	lea    rdi,[rip+0x8f04]        # 418ddf <flatcc_builder_padding_base@@Base+0x9ff>
  40fedb:	lea    rsi,[rip+0x8780]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40fee2:	lea    rcx,[rip+0x8eb5]        # 418d9e <flatcc_builder_padding_base@@Base+0x9be>
  40fee9:	mov    edx,0x429
  40feee:	call   4040a0 <__assert_fail@plt>
  40fef3:	lea    rdi,[rip+0x9928]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  40fefa:	lea    rsi,[rip+0x8761]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  40ff01:	lea    rcx,[rip+0x9754]        # 41965c <flatcc_builder_padding_base@@Base+0x127c>
  40ff08:	mov    edx,0x134
  40ff0d:	call   4040a0 <__assert_fail@plt>
  40ff12:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ff1c:	nop    DWORD PTR [rax+0x0]

000000000040ff20 <flatcc_builder_start_table@@Base>:
  40ff20:	push   rbp
  40ff21:	push   r15
  40ff23:	push   r14
  40ff25:	push   rbx
  40ff26:	push   rax
  40ff27:	mov    r15d,esi
  40ff2a:	mov    rbx,rdi
  40ff2d:	mov    esi,0x4
  40ff32:	call   40ed60 <flatcc_builder_start_buffer@@Base+0xe0>
  40ff37:	mov    r14d,0xffffffff
  40ff3d:	test   eax,eax
  40ff3f:	je     40ff4f <flatcc_builder_start_table@@Base+0x2f>
  40ff41:	mov    eax,r14d
  40ff44:	add    rsp,0x8
  40ff48:	pop    rbx
  40ff49:	pop    r14
  40ff4b:	pop    r15
  40ff4d:	pop    rbp
  40ff4e:	ret    
  40ff4f:	mov    eax,DWORD PTR [rbx+0x8]
  40ff52:	sub    eax,DWORD PTR [rbx+0x58]
  40ff55:	mov    rcx,QWORD PTR [rbx+0x30]
  40ff59:	mov    DWORD PTR [rcx+0x10],eax
  40ff5c:	mov    eax,DWORD PTR [rbx]
  40ff5e:	sub    eax,DWORD PTR [rbx+0x88]
  40ff64:	mov    rcx,QWORD PTR [rbx+0x30]
  40ff68:	mov    DWORD PTR [rcx+0x14],eax
  40ff6b:	mov    eax,DWORD PTR [rbx+0x14]
  40ff6e:	mov    rcx,QWORD PTR [rbx+0x30]
  40ff72:	mov    DWORD PTR [rcx+0x18],eax
  40ff75:	movzx  eax,WORD PTR [rbx+0x10]
  40ff79:	mov    rcx,QWORD PTR [rbx+0x30]
  40ff7d:	mov    WORD PTR [rcx+0x1c],ax
  40ff81:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  40ff88:	mov    WORD PTR [rbx+0x10],0x0
  40ff8e:	mov    rax,QWORD PTR [rbx+0x30]
  40ff92:	mov    WORD PTR [rax+0xe],0x3
  40ff98:	movzx  ebp,WORD PTR [rax+0x1c]
  40ff9c:	add    ebp,ebp
  40ff9e:	add    ebp,DWORD PTR [rax+0x10]
  40ffa1:	lea    edx,[r15+r15*1]
  40ffa5:	add    edx,0x4
  40ffa8:	add    rdx,rbp
  40ffab:	cmp    rdx,QWORD PTR [rbx+0x60]
  40ffaf:	jbe    40ffcc <flatcc_builder_start_table@@Base+0xac>
  40ffb1:	lea    rsi,[rbx+0x58]
  40ffb5:	mov    rdi,QWORD PTR [rbx+0x40]
  40ffb9:	mov    ecx,0x1
  40ffbe:	xor    r8d,r8d
  40ffc1:	call   QWORD PTR [rbx+0x50]
  40ffc4:	test   eax,eax
  40ffc6:	jne    410060 <flatcc_builder_start_table@@Base+0x140>
  40ffcc:	add    rbp,QWORD PTR [rbx+0x58]
  40ffd0:	mov    QWORD PTR [rbx+0x8],rbp
  40ffd4:	je     40ff41 <flatcc_builder_start_table@@Base+0x21>
  40ffda:	add    r15d,r15d
  40ffdd:	add    rbp,0x4
  40ffe1:	mov    QWORD PTR [rbx+0x8],rbp
  40ffe5:	mov    rax,QWORD PTR [rbx+0x30]
  40ffe9:	mov    ebp,DWORD PTR [rax+0x14]
  40ffec:	or     r15d,0x1
  40fff0:	add    r15,rbp
  40fff3:	cmp    r15,QWORD PTR [rbx+0x90]
  40fffa:	jbe    410019 <flatcc_builder_start_table@@Base+0xf9>
  40fffc:	lea    rsi,[rbx+0x88]
  410003:	mov    rdi,QWORD PTR [rbx+0x40]
  410007:	mov    rdx,r15
  41000a:	xor    ecx,ecx
  41000c:	mov    r8d,0x3
  410012:	call   QWORD PTR [rbx+0x50]
  410015:	test   eax,eax
  410017:	jne    410060 <flatcc_builder_start_table@@Base+0x140>
  410019:	add    rbp,QWORD PTR [rbx+0x88]
  410020:	mov    QWORD PTR [rbx],rbp
  410023:	je     40ff41 <flatcc_builder_start_table@@Base+0x21>
  410029:	mov    eax,DWORD PTR [rbx+0x28]
  41002c:	mov    rcx,rax
  41002f:	add    rcx,QWORD PTR [rbx+0x68]
  410033:	mov    QWORD PTR [rbx+0x18],rcx
  410037:	mov    ecx,DWORD PTR [rbx+0x70]
  41003a:	sub    ecx,eax
  41003c:	cmp    ecx,0xfffc
  410042:	mov    eax,0xfffc
  410047:	cmovb  eax,ecx
  41004a:	mov    DWORD PTR [rbx+0x24],eax
  41004d:	mov    rax,QWORD PTR [rbx+0x30]
  410051:	mov    DWORD PTR [rax+0x4],0xfffc
  410058:	xor    r14d,r14d
  41005b:	jmp    40ff41 <flatcc_builder_start_table@@Base+0x21>
  410060:	lea    rdi,[rip+0x97bb]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  410067:	lea    rsi,[rip+0x85f4]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  41006e:	lea    rcx,[rip+0x95e7]        # 41965c <flatcc_builder_padding_base@@Base+0x127c>
  410075:	mov    edx,0x134
  41007a:	call   4040a0 <__assert_fail@plt>
  41007f:	nop

0000000000410080 <flatcc_builder_create_vtable@@Base>:
  410080:	push   r14
  410082:	push   rbx
  410083:	sub    rsp,0x98
  41008a:	mov    r14,rdi
  41008d:	mov    QWORD PTR [rsp+0x8],0x0
  410096:	mov    DWORD PTR [rsp+0x10],0x0
  41009e:	test   dx,dx
  4100a1:	je     410108 <flatcc_builder_create_vtable@@Base+0x88>
  4100a3:	movzx  r8d,dx
  4100a7:	mov    QWORD PTR [rsp+0x8],r8
  4100ac:	mov    QWORD PTR [rsp+0x18],rsi
  4100b1:	mov    QWORD PTR [rsp+0x20],r8
  4100b6:	mov    DWORD PTR [rsp+0x10],0x1
  4100be:	mov    edx,0x1
  4100c3:	cmp    DWORD PTR [r14+0x100],0x0
  4100cb:	jne    410117 <flatcc_builder_create_vtable@@Base+0x97>
  4100cd:	cmp    DWORD PTR [r14+0x124],0x0
  4100d5:	jne    410117 <flatcc_builder_create_vtable@@Base+0x97>
  4100d7:	mov    ebx,DWORD PTR [r14+0xf4]
  4100de:	lea    eax,[r8+rbx*1]
  4100e2:	mov    DWORD PTR [r14+0xf4],eax
  4100e9:	mov    rdi,QWORD PTR [r14+0x38]
  4100ed:	lea    rsi,[rsp+0x18]
  4100f2:	mov    ecx,ebx
  4100f4:	call   QWORD PTR [r14+0x48]
  4100f8:	test   eax,eax
  4100fa:	jne    4101ab <flatcc_builder_create_vtable@@Base+0x12b>
  410100:	xor    eax,eax
  410102:	inc    ebx
  410104:	jne    41015c <flatcc_builder_create_vtable@@Base+0xdc>
  410106:	jmp    410162 <flatcc_builder_create_vtable@@Base+0xe2>
  410108:	xor    edx,edx
  41010a:	xor    r8d,r8d
  41010d:	cmp    DWORD PTR [r14+0x100],0x0
  410115:	je     4100cd <flatcc_builder_create_vtable@@Base+0x4d>
  410117:	cmp    r8,0x11
  41011b:	setb   al
  41011e:	lea    rcx,[r8-0x10]
  410122:	shr    rcx,0x20
  410126:	sete   cl
  410129:	test   r8d,r8d
  41012c:	je     41016d <flatcc_builder_create_vtable@@Base+0xed>
  41012e:	or     al,cl
  410130:	je     41016d <flatcc_builder_create_vtable@@Base+0xed>
  410132:	mov    ebx,DWORD PTR [r14+0xf0]
  410139:	sub    ebx,r8d
  41013c:	mov    rdi,QWORD PTR [r14+0x38]
  410140:	lea    rsi,[rsp+0x18]
  410145:	mov    ecx,ebx
  410147:	call   QWORD PTR [r14+0x48]
  41014b:	test   eax,eax
  41014d:	jne    41018c <flatcc_builder_create_vtable@@Base+0x10c>
  41014f:	mov    DWORD PTR [r14+0xf0],ebx
  410156:	test   ebx,ebx
  410158:	je     410160 <flatcc_builder_create_vtable@@Base+0xe0>
  41015a:	inc    ebx
  41015c:	mov    eax,ebx
  41015e:	jmp    410162 <flatcc_builder_create_vtable@@Base+0xe2>
  410160:	xor    eax,eax
  410162:	add    rsp,0x98
  410169:	pop    rbx
  41016a:	pop    r14
  41016c:	ret    
  41016d:	lea    rdi,[rip+0x96ae]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  410174:	lea    rsi,[rip+0x84e7]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  41017b:	lea    rcx,[rip+0x955f]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  410182:	mov    edx,0x287
  410187:	call   4040a0 <__assert_fail@plt>
  41018c:	lea    rdi,[rip+0x968f]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  410193:	lea    rsi,[rip+0x84c8]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  41019a:	lea    rcx,[rip+0x9540]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  4101a1:	mov    edx,0x28b
  4101a6:	call   4040a0 <__assert_fail@plt>
  4101ab:	lea    rdi,[rip+0x9670]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  4101b2:	lea    rsi,[rip+0x84a9]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4101b9:	lea    rcx,[rip+0x95dd]        # 41979d <flatcc_builder_padding_base@@Base+0x13bd>
  4101c0:	mov    edx,0x2a5
  4101c5:	call   4040a0 <__assert_fail@plt>
  4101ca:	nop    WORD PTR [rax+rax*1+0x0]

00000000004101d0 <flatcc_builder_create_cached_vtable@@Base>:
  4101d0:	push   rbp
  4101d1:	push   r15
  4101d3:	push   r14
  4101d5:	push   r13
  4101d7:	push   r12
  4101d9:	push   rbx
  4101da:	sub    rsp,0x28
  4101de:	mov    r15d,ecx
  4101e1:	mov    r12d,edx
  4101e4:	mov    QWORD PTR [rsp+0x18],rsi
  4101e9:	mov    r14,rdi
  4101ec:	mov    rax,QWORD PTR [rdi+0xd8]
  4101f3:	test   rax,rax
  4101f6:	je     4102c6 <flatcc_builder_create_cached_vtable@@Base+0xf6>
  4101fc:	neg    al
  4101fe:	shrx   r13d,r15d,eax
  410203:	shl    r13,0x2
  410207:	add    r13,QWORD PTR [r14+0xa8]
  41020e:	je     41039a <flatcc_builder_create_cached_vtable@@Base+0x1ca>
  410214:	mov    ebx,DWORD PTR [r13+0x0]
  410218:	movzx  eax,r12w
  41021c:	mov    QWORD PTR [rsp],rax
  410220:	test   ebx,ebx
  410222:	je     4103a1 <flatcc_builder_create_cached_vtable@@Base+0x1d1>
  410228:	mov    rbp,QWORD PTR [r14+0x78]
  41022c:	mov    QWORD PTR [rsp+0x10],r14
  410231:	mov    r15,QWORD PTR [r14+0xb8]
  410238:	xor    eax,eax
  41023a:	mov    QWORD PTR [rsp+0x20],rax
  41023f:	mov    QWORD PTR [rsp+0x8],r13
  410244:	jmp    410263 <flatcc_builder_create_cached_vtable@@Base+0x93>
  410246:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410250:	mov    ebx,DWORD PTR [r14+0xc]
  410254:	add    r14,0xc
  410258:	mov    r13,r14
  41025b:	test   ebx,ebx
  41025d:	je     410389 <flatcc_builder_create_cached_vtable@@Base+0x1b9>
  410263:	mov    eax,ebx
  410265:	lea    r14,[r15+rax*1]
  410269:	mov    esi,DWORD PTR [r15+rax*1+0x8]
  41026e:	cmp    WORD PTR [rbp+rsi*1+0x0],r12w
  410274:	jne    410250 <flatcc_builder_create_cached_vtable@@Base+0x80>
  410276:	add    rsi,rbp
  410279:	mov    rdi,QWORD PTR [rsp+0x18]
  41027e:	mov    rdx,QWORD PTR [rsp]
  410282:	call   404120 <bcmp@plt>
  410287:	test   eax,eax
  410289:	jne    410250 <flatcc_builder_create_cached_vtable@@Base+0x80>
  41028b:	mov    eax,DWORD PTR [r14+0x4]
  41028f:	mov    rcx,QWORD PTR [rsp+0x10]
  410294:	cmp    eax,DWORD PTR [rcx+0x100]
  41029a:	je     41050a <flatcc_builder_create_cached_vtable@@Base+0x33a>
  4102a0:	lea    r13,[r14+0xc]
  4102a4:	mov    ebx,DWORD PTR [r14+0xc]
  4102a8:	mov    rax,r14
  4102ab:	mov    QWORD PTR [rsp+0x20],r14
  4102b0:	test   ebx,ebx
  4102b2:	jne    410263 <flatcc_builder_create_cached_vtable@@Base+0x93>
  4102b4:	mov    r15,r14
  4102b7:	mov    r14,QWORD PTR [rsp+0x10]
  4102bc:	mov    r13,QWORD PTR [rsp+0x8]
  4102c1:	jmp    4103a4 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
  4102c6:	cmp    DWORD PTR [r14+0xe4],0x0
  4102ce:	jne    410548 <flatcc_builder_create_cached_vtable@@Base+0x378>
  4102d4:	lea    r13,[r14+0xb8]
  4102db:	cmp    QWORD PTR [r14+0xc0],0xf
  4102e3:	ja     410305 <flatcc_builder_create_cached_vtable@@Base+0x135>
  4102e5:	mov    rdi,QWORD PTR [r14+0x40]
  4102e9:	mov    edx,0x10
  4102ee:	mov    rsi,r13
  4102f1:	xor    ecx,ecx
  4102f3:	mov    r8d,0x6
  4102f9:	call   QWORD PTR [r14+0x50]
  4102fd:	test   eax,eax
  4102ff:	jne    410529 <flatcc_builder_create_cached_vtable@@Base+0x359>
  410305:	xor    ebx,ebx
  410307:	cmp    QWORD PTR [r13+0x0],0x0
  41030c:	je     4104f2 <flatcc_builder_create_cached_vtable@@Base+0x322>
  410312:	lea    rsi,[r14+0xa8]
  410319:	mov    DWORD PTR [r14+0xe4],0x10
  410324:	mov    rdi,QWORD PTR [r14+0x40]
  410328:	mov    ebp,0x100
  41032d:	mov    edx,0x100
  410332:	mov    ecx,0x1
  410337:	mov    r8d,0x5
  41033d:	call   QWORD PTR [r14+0x50]
  410341:	test   eax,eax
  410343:	jne    4104f2 <flatcc_builder_create_cached_vtable@@Base+0x322>
  410349:	mov    rax,QWORD PTR [r14+0xb0]
  410350:	mov    rcx,rbp
  410353:	add    rbp,rbp
  410356:	cmp    rbp,rax
  410359:	jbe    410350 <flatcc_builder_create_cached_vtable@@Base+0x180>
  41035b:	shr    rcx,0x2
  41035f:	mov    rax,0xffffffffffffffff
  410366:	mov    edx,0x1
  41036b:	nop    DWORD PTR [rax+rax*1+0x0]
  410370:	inc    rax
  410373:	shlx   rsi,rdx,rax
  410378:	cmp    rsi,rcx
  41037b:	jb     410370 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  41037d:	mov    QWORD PTR [r14+0xd8],rax
  410384:	jmp    4101fc <flatcc_builder_create_cached_vtable@@Base+0x2c>
  410389:	mov    r14,QWORD PTR [rsp+0x10]
  41038e:	mov    r13,QWORD PTR [rsp+0x8]
  410393:	mov    r15,QWORD PTR [rsp+0x20]
  410398:	jmp    4103a4 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
  41039a:	xor    ebx,ebx
  41039c:	jmp    4104f2 <flatcc_builder_create_cached_vtable@@Base+0x322>
  4103a1:	xor    r15d,r15d
  4103a4:	mov    r12d,DWORD PTR [r14+0xe4]
  4103ab:	lea    rbp,[r14+0xb8]
  4103b2:	lea    rdx,[r12+0x10]
  4103b7:	cmp    rdx,QWORD PTR [r14+0xc0]
  4103be:	jbe    4103db <flatcc_builder_create_cached_vtable@@Base+0x20b>
  4103c0:	mov    rdi,QWORD PTR [r14+0x40]
  4103c4:	mov    rsi,rbp
  4103c7:	xor    ecx,ecx
  4103c9:	mov    r8d,0x6
  4103cf:	call   QWORD PTR [r14+0x50]
  4103d3:	test   eax,eax
  4103d5:	jne    410529 <flatcc_builder_create_cached_vtable@@Base+0x359>
  4103db:	xor    ebx,ebx
  4103dd:	add    r12,QWORD PTR [rbp+0x0]
  4103e1:	je     4104f2 <flatcc_builder_create_cached_vtable@@Base+0x322>
  4103e7:	mov    eax,DWORD PTR [r14+0xe4]
  4103ee:	mov    ecx,DWORD PTR [r14+0x100]
  4103f5:	lea    edx,[rax+0x10]
  4103f8:	mov    DWORD PTR [r14+0xe4],edx
  4103ff:	mov    DWORD PTR [r12+0x4],ecx
  410404:	mov    ecx,DWORD PTR [r13+0x0]
  410408:	mov    DWORD PTR [r12+0xc],ecx
  41040d:	mov    DWORD PTR [r13+0x0],eax
  410411:	mov    rdi,r14
  410414:	mov    rsi,QWORD PTR [rsp+0x18]
  410419:	mov    rdx,QWORD PTR [rsp]
  41041d:	call   410080 <flatcc_builder_create_vtable@@Base>
  410422:	mov    DWORD PTR [r12],eax
  410426:	test   eax,eax
  410428:	je     4104f2 <flatcc_builder_create_cached_vtable@@Base+0x322>
  41042e:	test   r15,r15
  410431:	je     410441 <flatcc_builder_create_cached_vtable@@Base+0x271>
  410433:	mov    eax,DWORD PTR [r15+0x8]
  410437:	mov    DWORD PTR [r12+0x8],eax
  41043c:	jmp    4104ee <flatcc_builder_create_cached_vtable@@Base+0x31e>
  410441:	mov    rax,QWORD PTR [r14+0x118]
  410448:	mov    ebp,DWORD PTR [r14+0xe0]
  41044f:	test   rax,rax
  410452:	je     410495 <flatcc_builder_create_cached_vtable@@Base+0x2c5>
  410454:	mov    rcx,QWORD PTR [rsp]
  410458:	add    ecx,ebp
  41045a:	cmp    rax,rcx
  41045d:	jae    410495 <flatcc_builder_create_cached_vtable@@Base+0x2c5>
  41045f:	cmp    QWORD PTR [r14+0xd8],0x0
  410467:	je     4104ee <flatcc_builder_create_cached_vtable@@Base+0x31e>
  41046d:	mov    rdi,QWORD PTR [r14+0xa8]
  410474:	mov    rdx,QWORD PTR [r14+0xb0]
  41047b:	xor    esi,esi
  41047d:	call   4040b0 <memset@plt>
  410482:	movabs rax,0x1000000000
  41048c:	mov    QWORD PTR [r14+0xe0],rax
  410493:	jmp    4104ee <flatcc_builder_create_cached_vtable@@Base+0x31e>
  410495:	lea    rbx,[r14+0x78]
  410499:	mov    rax,QWORD PTR [rsp]
  41049d:	lea    rdx,[rax+rbp*1]
  4104a1:	cmp    rdx,QWORD PTR [r14+0x80]
  4104a8:	jbe    4104c1 <flatcc_builder_create_cached_vtable@@Base+0x2f1>
  4104aa:	mov    rdi,QWORD PTR [r14+0x40]
  4104ae:	mov    rsi,rbx
  4104b1:	xor    ecx,ecx
  4104b3:	mov    r8d,0x2
  4104b9:	call   QWORD PTR [r14+0x50]
  4104bd:	test   eax,eax
  4104bf:	jne    410529 <flatcc_builder_create_cached_vtable@@Base+0x359>
  4104c1:	add    rbp,QWORD PTR [rbx]
  4104c4:	je     410503 <flatcc_builder_create_cached_vtable@@Base+0x333>
  4104c6:	mov    eax,DWORD PTR [r14+0xe0]
  4104cd:	mov    DWORD PTR [r12+0x8],eax
  4104d2:	mov    rdx,QWORD PTR [rsp]
  4104d6:	mov    ecx,edx
  4104d8:	add    ecx,eax
  4104da:	mov    DWORD PTR [r14+0xe0],ecx
  4104e1:	mov    rdi,rbp
  4104e4:	mov    rsi,QWORD PTR [rsp+0x18]
  4104e9:	call   404100 <memcpy@plt>
  4104ee:	mov    ebx,DWORD PTR [r12]
  4104f2:	mov    eax,ebx
  4104f4:	add    rsp,0x28
  4104f8:	pop    rbx
  4104f9:	pop    r12
  4104fb:	pop    r13
  4104fd:	pop    r14
  4104ff:	pop    r15
  410501:	pop    rbp
  410502:	ret    
  410503:	mov    ebx,0xffffffff
  410508:	jmp    4104f2 <flatcc_builder_create_cached_vtable@@Base+0x322>
  41050a:	mov    rcx,QWORD PTR [rsp+0x8]
  41050f:	cmp    r13,rcx
  410512:	je     410524 <flatcc_builder_create_cached_vtable@@Base+0x354>
  410514:	mov    eax,DWORD PTR [r14+0xc]
  410518:	mov    DWORD PTR [r13+0x0],eax
  41051c:	mov    eax,DWORD PTR [rcx]
  41051e:	mov    DWORD PTR [r14+0xc],eax
  410522:	mov    DWORD PTR [rcx],ebx
  410524:	mov    ebx,DWORD PTR [r14]
  410527:	jmp    4104f2 <flatcc_builder_create_cached_vtable@@Base+0x322>
  410529:	lea    rdi,[rip+0x92f2]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  410530:	lea    rsi,[rip+0x812b]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  410537:	lea    rcx,[rip+0x911e]        # 41965c <flatcc_builder_padding_base@@Base+0x127c>
  41053e:	mov    edx,0x134
  410543:	call   4040a0 <__assert_fail@plt>
  410548:	lea    rdi,[rip+0x9297]        # 4197e6 <flatcc_builder_padding_base@@Base+0x1406>
  41054f:	lea    rsi,[rip+0x810c]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  410556:	lea    rcx,[rip+0x9298]        # 4197f5 <flatcc_builder_padding_base@@Base+0x1415>
  41055d:	mov    edx,0x156
  410562:	call   4040a0 <__assert_fail@plt>
  410567:	nop    WORD PTR [rax+rax*1+0x0]

0000000000410570 <flatcc_builder_create_table@@Base>:
  410570:	push   rbp
  410571:	push   r14
  410573:	push   rbx
  410574:	sub    rsp,0xa0
  41057b:	test   r9d,r9d
  41057e:	js     410793 <flatcc_builder_create_table@@Base+0x223>
  410584:	mov    r14,rdi
  410587:	mov    edi,DWORD PTR [rsp+0xc0]
  41058e:	test   dil,0x1
  410592:	je     4107b2 <flatcc_builder_create_table@@Base+0x242>
  410598:	cmp    cx,0x4
  41059c:	mov    eax,0x4
  4105a1:	cmova  eax,ecx
  4105a4:	cmp    WORD PTR [r14+0xe8],ax
  4105ac:	jae    4105b6 <flatcc_builder_create_table@@Base+0x46>
  4105ae:	mov    WORD PTR [r14+0xe8],ax
  4105b6:	mov    ebp,DWORD PTR [r14+0xf0]
  4105bd:	sub    ebp,edx
  4105bf:	movzx  r10d,ax
  4105c3:	dec    r10d
  4105c6:	and    r10d,ebp
  4105c9:	add    edi,r10d
  4105cc:	neg    edi
  4105ce:	lea    ecx,[rdi+rbp*1]
  4105d1:	add    ecx,0xfffffffd
  4105d4:	mov    DWORD PTR [rsp+0xc],ecx
  4105d8:	test   r9d,r9d
  4105db:	jle    410696 <flatcc_builder_create_table@@Base+0x126>
  4105e1:	add    ebp,0xfffffffc
  4105e4:	sub    ebp,r10d
  4105e7:	mov    ecx,0xfffffffc
  4105ec:	sub    ecx,ebp
  4105ee:	mov    edi,r9d
  4105f1:	lea    rbx,[rdi-0x1]
  4105f5:	mov    r9d,edi
  4105f8:	and    r9d,0x3
  4105fc:	cmp    rbx,0x3
  410600:	jae    41060e <flatcc_builder_create_table@@Base+0x9e>
  410602:	xor    ebx,ebx
  410604:	test   r9,r9
  410607:	jne    41066d <flatcc_builder_create_table@@Base+0xfd>
  410609:	jmp    410696 <flatcc_builder_create_table@@Base+0x126>
  41060e:	sub    rdi,r9
  410611:	xor    ebx,ebx
  410613:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41061d:	nop    DWORD PTR [rax]
  410620:	movzx  eax,WORD PTR [r8+rbx*2]
  410625:	mov    ebp,DWORD PTR [rax+rsi*1]
  410628:	add    ebp,ecx
  41062a:	sub    ebp,eax
  41062c:	mov    DWORD PTR [rax+rsi*1],ebp
  41062f:	movzx  eax,WORD PTR [r8+rbx*2+0x2]
  410635:	mov    ebp,DWORD PTR [rax+rsi*1]
  410638:	add    ebp,ecx
  41063a:	sub    ebp,eax
  41063c:	mov    DWORD PTR [rax+rsi*1],ebp
  41063f:	movzx  eax,WORD PTR [r8+rbx*2+0x4]
  410645:	mov    ebp,DWORD PTR [rax+rsi*1]
  410648:	add    ebp,ecx
  41064a:	sub    ebp,eax
  41064c:	mov    DWORD PTR [rax+rsi*1],ebp
  41064f:	movzx  eax,WORD PTR [r8+rbx*2+0x6]
  410655:	mov    ebp,DWORD PTR [rax+rsi*1]
  410658:	add    ebp,ecx
  41065a:	sub    ebp,eax
  41065c:	mov    DWORD PTR [rax+rsi*1],ebp
  41065f:	add    rbx,0x4
  410663:	cmp    rdi,rbx
  410666:	jne    410620 <flatcc_builder_create_table@@Base+0xb0>
  410668:	test   r9,r9
  41066b:	je     410696 <flatcc_builder_create_table@@Base+0x126>
  41066d:	lea    rdi,[r8+rbx*2]
  410671:	xor    ebx,ebx
  410673:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41067d:	nop    DWORD PTR [rax]
  410680:	movzx  eax,WORD PTR [rdi+rbx*2]
  410684:	mov    ebp,DWORD PTR [rax+rsi*1]
  410687:	add    ebp,ecx
  410689:	sub    ebp,eax
  41068b:	mov    DWORD PTR [rax+rsi*1],ebp
  41068e:	inc    rbx
  410691:	cmp    r9,rbx
  410694:	jne    410680 <flatcc_builder_create_table@@Base+0x110>
  410696:	mov    QWORD PTR [rsp+0x10],0x4
  41069f:	lea    rax,[rsp+0xc]
  4106a4:	mov    QWORD PTR [rsp+0x20],rax
  4106a9:	mov    QWORD PTR [rsp+0x28],0x4
  4106b2:	mov    DWORD PTR [rsp+0x18],0x1
  4106ba:	test   rdx,rdx
  4106bd:	je     41075e <flatcc_builder_create_table@@Base+0x1ee>
  4106c3:	lea    r8,[rdx+0x4]
  4106c7:	mov    QWORD PTR [rsp+0x10],r8
  4106cc:	mov    QWORD PTR [rsp+0x30],rsi
  4106d1:	mov    QWORD PTR [rsp+0x38],rdx
  4106d6:	mov    DWORD PTR [rsp+0x18],0x2
  4106de:	mov    edx,0x2
  4106e3:	test   r10d,r10d
  4106e6:	je     41070d <flatcc_builder_create_table@@Base+0x19d>
  4106e8:	add    r8,r10
  4106eb:	mov    QWORD PTR [rsp+0x10],r8
  4106f0:	mov    eax,edx
  4106f2:	shl    rax,0x4
  4106f6:	lea    rcx,[rip+0x7ce3]        # 4183e0 <flatcc_builder_padding_base@@Base>
  4106fd:	mov    QWORD PTR [rsp+rax*1+0x20],rcx
  410702:	mov    QWORD PTR [rsp+rax*1+0x28],r10
  410707:	inc    edx
  410709:	mov    DWORD PTR [rsp+0x18],edx
  41070d:	cmp    r8,0x11
  410711:	setb   al
  410714:	lea    rcx,[r8-0x10]
  410718:	shr    rcx,0x20
  41071c:	sete   cl
  41071f:	test   r8d,r8d
  410722:	jle    410774 <flatcc_builder_create_table@@Base+0x204>
  410724:	or     al,cl
  410726:	je     410774 <flatcc_builder_create_table@@Base+0x204>
  410728:	mov    ebp,DWORD PTR [r14+0xf0]
  41072f:	sub    ebp,r8d
  410732:	mov    rdi,QWORD PTR [r14+0x38]
  410736:	lea    rsi,[rsp+0x20]
  41073b:	mov    ecx,ebp
  41073d:	call   QWORD PTR [r14+0x48]
  410741:	test   eax,eax
  410743:	jne    4107d1 <flatcc_builder_create_table@@Base+0x261>
  410749:	mov    DWORD PTR [r14+0xf0],ebp
  410750:	mov    eax,ebp
  410752:	add    rsp,0xa0
  410759:	pop    rbx
  41075a:	pop    r14
  41075c:	pop    rbp
  41075d:	ret    
  41075e:	mov    r8d,0x4
  410764:	mov    edx,0x1
  410769:	test   r10d,r10d
  41076c:	jne    4106e8 <flatcc_builder_create_table@@Base+0x178>
  410772:	jmp    41070d <flatcc_builder_create_table@@Base+0x19d>
  410774:	lea    rdi,[rip+0x90a7]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  41077b:	lea    rsi,[rip+0x7ee0]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  410782:	lea    rcx,[rip+0x8f58]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  410789:	mov    edx,0x287
  41078e:	call   4040a0 <__assert_fail@plt>
  410793:	lea    rdi,[rip+0x863e]        # 418dd8 <flatcc_builder_padding_base@@Base+0x9f8>
  41079a:	lea    rsi,[rip+0x7ec1]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4107a1:	lea    rcx,[rip+0x8642]        # 418dea <flatcc_builder_padding_base@@Base+0xa0a>
  4107a8:	mov    edx,0x4d5
  4107ad:	call   4040a0 <__assert_fail@plt>
  4107b2:	lea    rdi,[rip+0x86cd]        # 418e86 <flatcc_builder_padding_base@@Base+0xaa6>
  4107b9:	lea    rsi,[rip+0x7ea2]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4107c0:	lea    rcx,[rip+0x8623]        # 418dea <flatcc_builder_padding_base@@Base+0xa0a>
  4107c7:	mov    edx,0x4db
  4107cc:	call   4040a0 <__assert_fail@plt>
  4107d1:	lea    rdi,[rip+0x904a]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  4107d8:	lea    rsi,[rip+0x7e83]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4107df:	lea    rcx,[rip+0x8efb]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  4107e6:	mov    edx,0x28b
  4107eb:	call   4040a0 <__assert_fail@plt>

00000000004107f0 <flatcc_builder_check_required_field@@Base>:
  4107f0:	push   rax
  4107f1:	mov    rax,QWORD PTR [rdi+0x30]
  4107f5:	cmp    WORD PTR [rax+0xe],0x3
  4107fa:	jne    410817 <flatcc_builder_check_required_field@@Base+0x27>
  4107fc:	xor    eax,eax
  4107fe:	cmp    WORD PTR [rdi+0x10],si
  410802:	jbe    410815 <flatcc_builder_check_required_field@@Base+0x25>
  410804:	mov    rcx,QWORD PTR [rdi+0x8]
  410808:	movzx  edx,si
  41080b:	xor    eax,eax
  41080d:	cmp    WORD PTR [rcx+rdx*2],0x0
  410812:	setne  al
  410815:	pop    rcx
  410816:	ret    
  410817:	lea    rdi,[rip+0x8673]        # 418e91 <flatcc_builder_padding_base@@Base+0xab1>
  41081e:	lea    rsi,[rip+0x7e3d]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  410825:	lea    rcx,[rip+0x8690]        # 418ebc <flatcc_builder_padding_base@@Base+0xadc>
  41082c:	mov    edx,0x4f8
  410831:	call   4040a0 <__assert_fail@plt>
  410836:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000410840 <flatcc_builder_check_union_field@@Base>:
  410840:	push   rax
  410841:	mov    rax,QWORD PTR [rdi+0x30]
  410845:	cmp    WORD PTR [rax+0xe],0x3
  41084a:	jne    410894 <flatcc_builder_check_union_field@@Base+0x54>
  41084c:	test   si,si
  41084f:	je     41087e <flatcc_builder_check_union_field@@Base+0x3e>
  410851:	cmp    WORD PTR [rdi+0x10],si
  410855:	jbe    41087e <flatcc_builder_check_union_field@@Base+0x3e>
  410857:	movzx  eax,si
  41085a:	mov    rcx,QWORD PTR [rdi+0x8]
  41085e:	movzx  edx,WORD PTR [rcx+rax*2-0x2]
  410863:	test   rdx,rdx
  410866:	je     410882 <flatcc_builder_check_union_field@@Base+0x42>
  410868:	mov    rsi,QWORD PTR [rdi+0x18]
  41086c:	cmp    BYTE PTR [rsi+rdx*1],0x0
  410870:	movzx  eax,WORD PTR [rcx+rax*2]
  410874:	je     410889 <flatcc_builder_check_union_field@@Base+0x49>
  410876:	test   ax,ax
  410879:	setne  al
  41087c:	jmp    41088f <flatcc_builder_check_union_field@@Base+0x4f>
  41087e:	xor    eax,eax
  410880:	jmp    41088f <flatcc_builder_check_union_field@@Base+0x4f>
  410882:	cmp    WORD PTR [rcx+rax*2],0x0
  410887:	jmp    41088c <flatcc_builder_check_union_field@@Base+0x4c>
  410889:	test   ax,ax
  41088c:	sete   al
  41088f:	movzx  eax,al
  410892:	pop    rcx
  410893:	ret    
  410894:	lea    rdi,[rip+0x85f6]        # 418e91 <flatcc_builder_padding_base@@Base+0xab1>
  41089b:	lea    rsi,[rip+0x7dc0]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4108a2:	lea    rcx,[rip+0x8666]        # 418f0f <flatcc_builder_padding_base@@Base+0xb2f>
  4108a9:	mov    edx,0x4ff
  4108ae:	call   4040a0 <__assert_fail@plt>
  4108b3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4108bd:	nop    DWORD PTR [rax]

00000000004108c0 <flatcc_builder_check_required@@Base>:
  4108c0:	push   rax
  4108c1:	mov    rax,QWORD PTR [rdi+0x30]
  4108c5:	cmp    WORD PTR [rax+0xe],0x3
  4108ca:	jne    410909 <flatcc_builder_check_required@@Base+0x49>
  4108cc:	movzx  ecx,WORD PTR [rdi+0x10]
  4108d0:	xor    eax,eax
  4108d2:	cmp    ecx,edx
  4108d4:	jl     410903 <flatcc_builder_check_required@@Base+0x43>
  4108d6:	mov    eax,0x1
  4108db:	test   edx,edx
  4108dd:	jle    410903 <flatcc_builder_check_required@@Base+0x43>
  4108df:	mov    rcx,QWORD PTR [rdi+0x8]
  4108e3:	mov    r8d,edx
  4108e6:	xor    edi,edi
  4108e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4108f0:	movzx  edx,WORD PTR [rsi+rdi*2]
  4108f4:	cmp    WORD PTR [rcx+rdx*2],0x0
  4108f9:	je     410905 <flatcc_builder_check_required@@Base+0x45>
  4108fb:	inc    rdi
  4108fe:	cmp    r8,rdi
  410901:	jne    4108f0 <flatcc_builder_check_required@@Base+0x30>
  410903:	pop    rcx
  410904:	ret    
  410905:	xor    eax,eax
  410907:	pop    rcx
  410908:	ret    
  410909:	lea    rdi,[rip+0x8581]        # 418e91 <flatcc_builder_padding_base@@Base+0xab1>
  410910:	lea    rsi,[rip+0x7d4b]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  410917:	lea    rcx,[rip+0x8641]        # 418f5f <flatcc_builder_padding_base@@Base+0xb7f>
  41091e:	mov    edx,0x511
  410923:	call   4040a0 <__assert_fail@plt>
  410928:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000410930 <flatcc_builder_end_table@@Base>:
  410930:	push   rbp
  410931:	push   r15
  410933:	push   r14
  410935:	push   r12
  410937:	push   rbx
  410938:	sub    rsp,0x10
  41093c:	mov    rax,QWORD PTR [rdi+0x30]
  410940:	cmp    WORD PTR [rax+0xe],0x3
  410945:	jne    410a95 <flatcc_builder_end_table@@Base+0x165>
  41094b:	mov    rbx,rdi
  41094e:	mov    rax,QWORD PTR [rdi+0x8]
  410952:	mov    ecx,DWORD PTR [rdi+0x10]
  410955:	lea    ecx,[rcx+rcx*1]
  410958:	add    ecx,0x4
  41095b:	mov    WORD PTR [rax-0x4],cx
  41095f:	mov    edx,DWORD PTR [rdi+0x20]
  410962:	add    edx,0x4
  410965:	mov    WORD PTR [rax-0x2],dx
  410969:	lea    r12,[rax-0x4]
  41096d:	movzx  ebp,cx
  410970:	mov    eax,DWORD PTR [rdi+0x14]
  410973:	xor    eax,ebp
  410975:	imul   eax,eax,0x9e3779b1
  41097b:	movzx  ecx,dx
  41097e:	xor    ecx,eax
  410980:	imul   ecx,ecx,0x9e3779b1
  410986:	mov    DWORD PTR [rdi+0x14],ecx
  410989:	mov    rsi,r12
  41098c:	mov    edx,ebp
  41098e:	call   4101d0 <flatcc_builder_create_cached_vtable@@Base>
  410993:	test   eax,eax
  410995:	je     410a82 <flatcc_builder_end_table@@Base+0x152>
  41099b:	mov    r14d,eax
  41099e:	xor    r15d,r15d
  4109a1:	mov    rdi,r12
  4109a4:	xor    esi,esi
  4109a6:	mov    rdx,rbp
  4109a9:	call   4040b0 <memset@plt>
  4109ae:	mov    rax,QWORD PTR [rbx+0x30]
  4109b2:	mov    r8d,DWORD PTR [rax+0x14]
  4109b6:	add    r8,QWORD PTR [rbx+0x88]
  4109bd:	mov    r9,QWORD PTR [rbx]
  4109c0:	mov    rsi,QWORD PTR [rbx+0x18]
  4109c4:	sub    r9,r8
  4109c7:	shr    r9,1
  4109ca:	mov    edx,DWORD PTR [rbx+0x20]
  4109cd:	movzx  ecx,WORD PTR [rbx+0xea]
  4109d4:	mov    DWORD PTR [rsp],r14d
  4109d8:	mov    rdi,rbx
  4109db:	call   410570 <flatcc_builder_create_table@@Base>
  4109e0:	test   eax,eax
  4109e2:	je     410a85 <flatcc_builder_end_table@@Base+0x155>
  4109e8:	mov    r14d,eax
  4109eb:	mov    rax,QWORD PTR [rbx+0x30]
  4109ef:	mov    ecx,DWORD PTR [rax+0x18]
  4109f2:	mov    DWORD PTR [rbx+0x14],ecx
  4109f5:	movzx  ecx,WORD PTR [rax+0x1c]
  4109f9:	mov    WORD PTR [rbx+0x10],cx
  4109fd:	mov    ecx,DWORD PTR [rax+0x10]
  410a00:	add    rcx,QWORD PTR [rbx+0x58]
  410a04:	mov    QWORD PTR [rbx+0x8],rcx
  410a08:	mov    eax,DWORD PTR [rax+0x14]
  410a0b:	add    rax,QWORD PTR [rbx+0x88]
  410a12:	mov    QWORD PTR [rbx],rax
  410a15:	mov    rdi,QWORD PTR [rbx+0x18]
  410a19:	mov    edx,DWORD PTR [rbx+0x20]
  410a1c:	xor    esi,esi
  410a1e:	call   4040b0 <memset@plt>
  410a23:	mov    rax,QWORD PTR [rbx+0x30]
  410a27:	mov    ecx,DWORD PTR [rax+0x8]
  410a2a:	mov    DWORD PTR [rbx+0x20],ecx
  410a2d:	mov    ecx,DWORD PTR [rax]
  410a2f:	mov    DWORD PTR [rbx+0x28],ecx
  410a32:	mov    edx,DWORD PTR [rax+0x4]
  410a35:	mov    rsi,rcx
  410a38:	add    rsi,QWORD PTR [rbx+0x68]
  410a3c:	mov    QWORD PTR [rbx+0x18],rsi
  410a40:	mov    esi,DWORD PTR [rbx+0x70]
  410a43:	sub    esi,ecx
  410a45:	cmp    esi,edx
  410a47:	cmova  esi,edx
  410a4a:	mov    DWORD PTR [rbx+0x24],esi
  410a4d:	movzx  ecx,WORD PTR [rbx+0xea]
  410a54:	cmp    WORD PTR [rbx+0xe8],cx
  410a5b:	jae    410a64 <flatcc_builder_end_table@@Base+0x134>
  410a5d:	mov    WORD PTR [rbx+0xe8],cx
  410a64:	movzx  ecx,WORD PTR [rax+0xc]
  410a68:	mov    WORD PTR [rbx+0xea],cx
  410a6f:	add    rax,0xffffffffffffffdc
  410a73:	mov    QWORD PTR [rbx+0x30],rax
  410a77:	dec    DWORD PTR [rbx+0x104]
  410a7d:	mov    r15d,r14d
  410a80:	jmp    410a85 <flatcc_builder_end_table@@Base+0x155>
  410a82:	xor    r15d,r15d
  410a85:	mov    eax,r15d
  410a88:	add    rsp,0x10
  410a8c:	pop    rbx
  410a8d:	pop    r12
  410a8f:	pop    r14
  410a91:	pop    r15
  410a93:	pop    rbp
  410a94:	ret    
  410a95:	lea    rdi,[rip+0x83f5]        # 418e91 <flatcc_builder_padding_base@@Base+0xab1>
  410a9c:	lea    rsi,[rip+0x7bbf]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  410aa3:	lea    rcx,[rip+0x850f]        # 418fb9 <flatcc_builder_padding_base@@Base+0xbd9>
  410aaa:	mov    edx,0x525
  410aaf:	call   4040a0 <__assert_fail@plt>
  410ab4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410abe:	xchg   ax,ax

0000000000410ac0 <flatcc_builder_create_vector@@Base>:
  410ac0:	push   rbp
  410ac1:	push   rbx
  410ac2:	sub    rsp,0x98
  410ac9:	cmp    rdx,r9
  410acc:	ja     410bf6 <flatcc_builder_create_vector@@Base+0x136>
  410ad2:	mov    rbx,rdi
  410ad5:	cmp    r8w,0x4
  410ada:	mov    eax,0x4
  410adf:	cmova  eax,r8d
  410ae3:	cmp    WORD PTR [rdi+0xe8],ax
  410aea:	jae    410af3 <flatcc_builder_create_vector@@Base+0x33>
  410aec:	mov    WORD PTR [rbx+0xe8],ax
  410af3:	imul   ecx,edx
  410af6:	mov    DWORD PTR [rsp+0x4],edx
  410afa:	mov    ebp,DWORD PTR [rbx+0xf0]
  410b00:	mov    edx,ebp
  410b02:	sub    edx,ecx
  410b04:	movzx  eax,ax
  410b07:	dec    eax
  410b09:	and    eax,edx
  410b0b:	mov    QWORD PTR [rsp+0x8],0x4
  410b14:	lea    rdx,[rsp+0x4]
  410b19:	mov    QWORD PTR [rsp+0x18],rdx
  410b1e:	mov    QWORD PTR [rsp+0x20],0x4
  410b27:	mov    DWORD PTR [rsp+0x10],0x1
  410b2f:	test   ecx,ecx
  410b31:	je     410bc6 <flatcc_builder_create_vector@@Base+0x106>
  410b37:	mov    ecx,ecx
  410b39:	lea    r8,[rcx+0x4]
  410b3d:	mov    QWORD PTR [rsp+0x8],r8
  410b42:	mov    QWORD PTR [rsp+0x28],rsi
  410b47:	mov    QWORD PTR [rsp+0x30],rcx
  410b4c:	mov    DWORD PTR [rsp+0x10],0x2
  410b54:	mov    edx,0x2
  410b59:	test   eax,eax
  410b5b:	je     410b84 <flatcc_builder_create_vector@@Base+0xc4>
  410b5d:	mov    eax,eax
  410b5f:	add    r8,rax
  410b62:	mov    QWORD PTR [rsp+0x8],r8
  410b67:	mov    ecx,edx
  410b69:	shl    rcx,0x4
  410b6d:	lea    rsi,[rip+0x786c]        # 4183e0 <flatcc_builder_padding_base@@Base>
  410b74:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  410b79:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  410b7e:	inc    edx
  410b80:	mov    DWORD PTR [rsp+0x10],edx
  410b84:	cmp    r8,0x11
  410b88:	setb   al
  410b8b:	lea    rcx,[r8-0x10]
  410b8f:	shr    rcx,0x20
  410b93:	sete   cl
  410b96:	test   r8d,r8d
  410b99:	jle    410bd7 <flatcc_builder_create_vector@@Base+0x117>
  410b9b:	or     al,cl
  410b9d:	je     410bd7 <flatcc_builder_create_vector@@Base+0x117>
  410b9f:	sub    ebp,r8d
  410ba2:	mov    rdi,QWORD PTR [rbx+0x38]
  410ba6:	lea    rsi,[rsp+0x18]
  410bab:	mov    ecx,ebp
  410bad:	call   QWORD PTR [rbx+0x48]
  410bb0:	test   eax,eax
  410bb2:	jne    410c15 <flatcc_builder_create_vector@@Base+0x155>
  410bb4:	mov    DWORD PTR [rbx+0xf0],ebp
  410bba:	mov    eax,ebp
  410bbc:	add    rsp,0x98
  410bc3:	pop    rbx
  410bc4:	pop    rbp
  410bc5:	ret    
  410bc6:	mov    r8d,0x4
  410bcc:	mov    edx,0x1
  410bd1:	test   eax,eax
  410bd3:	jne    410b5d <flatcc_builder_create_vector@@Base+0x9d>
  410bd5:	jmp    410b84 <flatcc_builder_create_vector@@Base+0xc4>
  410bd7:	lea    rdi,[rip+0x8c44]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  410bde:	lea    rsi,[rip+0x7a7d]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  410be5:	lea    rcx,[rip+0x8af5]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  410bec:	mov    edx,0x287
  410bf1:	call   4040a0 <__assert_fail@plt>
  410bf6:	lea    rdi,[rip+0x83fe]        # 418ffb <flatcc_builder_padding_base@@Base+0xc1b>
  410bfd:	lea    rsi,[rip+0x7a5e]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  410c04:	lea    rcx,[rip+0x8403]        # 41900e <flatcc_builder_padding_base@@Base+0xc2e>
  410c0b:	mov    edx,0x555
  410c10:	call   4040a0 <__assert_fail@plt>
  410c15:	lea    rdi,[rip+0x8c06]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  410c1c:	lea    rsi,[rip+0x7a3f]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  410c23:	lea    rcx,[rip+0x8ab7]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  410c2a:	mov    edx,0x28b
  410c2f:	call   4040a0 <__assert_fail@plt>
  410c34:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410c3e:	xchg   ax,ax

0000000000410c40 <flatcc_builder_end_vector@@Base>:
  410c40:	push   rbp
  410c41:	push   rbx
  410c42:	push   rax
  410c43:	mov    rax,QWORD PTR [rdi+0x30]
  410c47:	cmp    WORD PTR [rax+0xe],0x4
  410c4c:	jne    410ce7 <flatcc_builder_end_vector@@Base+0xa7>
  410c52:	mov    rbx,rdi
  410c55:	mov    rsi,QWORD PTR [rdi+0x18]
  410c59:	mov    ecx,DWORD PTR [rax+0x10]
  410c5c:	mov    edx,DWORD PTR [rax+0x14]
  410c5f:	movzx  r8d,WORD PTR [rdi+0xea]
  410c67:	mov    r9d,DWORD PTR [rax+0x18]
  410c6b:	call   410ac0 <flatcc_builder_create_vector@@Base>
  410c70:	mov    ebp,eax
  410c72:	test   eax,eax
  410c74:	je     410cde <flatcc_builder_end_vector@@Base+0x9e>
  410c76:	mov    rdi,QWORD PTR [rbx+0x18]
  410c7a:	mov    edx,DWORD PTR [rbx+0x20]
  410c7d:	xor    esi,esi
  410c7f:	call   4040b0 <memset@plt>
  410c84:	mov    rax,QWORD PTR [rbx+0x30]
  410c88:	mov    ecx,DWORD PTR [rax+0x8]
  410c8b:	mov    DWORD PTR [rbx+0x20],ecx
  410c8e:	mov    ecx,DWORD PTR [rax]
  410c90:	mov    DWORD PTR [rbx+0x28],ecx
  410c93:	mov    edx,DWORD PTR [rax+0x4]
  410c96:	mov    rsi,rcx
  410c99:	add    rsi,QWORD PTR [rbx+0x68]
  410c9d:	mov    QWORD PTR [rbx+0x18],rsi
  410ca1:	mov    esi,DWORD PTR [rbx+0x70]
  410ca4:	sub    esi,ecx
  410ca6:	cmp    esi,edx
  410ca8:	cmova  esi,edx
  410cab:	mov    DWORD PTR [rbx+0x24],esi
  410cae:	movzx  ecx,WORD PTR [rbx+0xea]
  410cb5:	cmp    WORD PTR [rbx+0xe8],cx
  410cbc:	jae    410cc5 <flatcc_builder_end_vector@@Base+0x85>
  410cbe:	mov    WORD PTR [rbx+0xe8],cx
  410cc5:	movzx  ecx,WORD PTR [rax+0xc]
  410cc9:	mov    WORD PTR [rbx+0xea],cx
  410cd0:	add    rax,0xffffffffffffffdc
  410cd4:	mov    QWORD PTR [rbx+0x30],rax
  410cd8:	dec    DWORD PTR [rbx+0x104]
  410cde:	mov    eax,ebp
  410ce0:	add    rsp,0x8
  410ce4:	pop    rbx
  410ce5:	pop    rbp
  410ce6:	ret    
  410ce7:	lea    rdi,[rip+0x7cb1]        # 41899f <flatcc_builder_padding_base@@Base+0x5bf>
  410cee:	lea    rsi,[rip+0x796d]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  410cf5:	lea    rcx,[rip+0x8388]        # 419084 <flatcc_builder_padding_base@@Base+0xca4>
  410cfc:	mov    edx,0x578
  410d01:	call   4040a0 <__assert_fail@plt>
  410d06:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000410d10 <flatcc_builder_vector_count@@Base>:
  410d10:	mov    rax,QWORD PTR [rdi+0x30]
  410d14:	mov    eax,DWORD PTR [rax+0x14]
  410d17:	ret    
  410d18:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000410d20 <flatcc_builder_vector_edit@@Base>:
  410d20:	mov    rax,QWORD PTR [rdi+0x18]
  410d24:	ret    
  410d25:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410d2f:	nop

0000000000410d30 <flatcc_builder_create_offset_vector_direct@@Base>:
  410d30:	xor    ecx,ecx
  410d32:	jmp    410d40 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  410d34:	nop    WORD PTR cs:[rax+rax*1+0x0]
  410d3e:	xchg   ax,ax
  410d40:	push   r14
  410d42:	push   rbx
  410d43:	sub    rsp,0x98
  410d4a:	mov    r10,rdx
  410d4d:	xor    ebx,ebx
  410d4f:	test   r10d,0xc0000000
  410d56:	jne    410ec9 <flatcc_builder_create_offset_vector_direct@@Base+0x199>
  410d5c:	mov    r14,rdi
  410d5f:	cmp    WORD PTR [rdi+0xe8],0x3
  410d67:	ja     410d73 <flatcc_builder_create_offset_vector_direct@@Base+0x43>
  410d69:	mov    WORD PTR [r14+0xe8],0x4
  410d73:	lea    r8d,[r10*4+0x0]
  410d7b:	mov    DWORD PTR [rsp+0x4],r10d
  410d80:	mov    ebx,DWORD PTR [r14+0xf0]
  410d87:	mov    r9d,ebx
  410d8a:	and    r9d,0x3
  410d8e:	mov    QWORD PTR [rsp+0x8],0x4
  410d97:	lea    rdx,[rsp+0x4]
  410d9c:	mov    QWORD PTR [rsp+0x18],rdx
  410da1:	mov    QWORD PTR [rsp+0x20],0x4
  410daa:	mov    DWORD PTR [rsp+0x10],0x1
  410db2:	test   r8d,r8d
  410db5:	je     410ed6 <flatcc_builder_create_offset_vector_direct@@Base+0x1a6>
  410dbb:	mov    edx,r8d
  410dbe:	lea    r8,[rdx+0x4]
  410dc2:	mov    QWORD PTR [rsp+0x8],r8
  410dc7:	mov    QWORD PTR [rsp+0x28],rsi
  410dcc:	mov    QWORD PTR [rsp+0x30],rdx
  410dd1:	mov    DWORD PTR [rsp+0x10],0x2
  410dd9:	mov    edx,0x2
  410dde:	test   r9d,r9d
  410de1:	je     410e08 <flatcc_builder_create_offset_vector_direct@@Base+0xd8>
  410de3:	add    r8,r9
  410de6:	mov    QWORD PTR [rsp+0x8],r8
  410deb:	mov    edi,edx
  410ded:	shl    rdi,0x4
  410df1:	lea    rax,[rip+0x75e8]        # 4183e0 <flatcc_builder_padding_base@@Base>
  410df8:	mov    QWORD PTR [rsp+rdi*1+0x18],rax
  410dfd:	mov    QWORD PTR [rsp+rdi*1+0x20],r9
  410e02:	inc    edx
  410e04:	mov    DWORD PTR [rsp+0x10],edx
  410e08:	test   r10d,r10d
  410e0b:	je     410e85 <flatcc_builder_create_offset_vector_direct@@Base+0x155>
  410e0d:	mov    edi,r8d
  410e10:	sub    edi,ebx
  410e12:	add    edi,0xfffffffc
  410e15:	mov    r9d,r10d
  410e18:	xor    ebx,ebx
  410e1a:	jmp    410e2b <flatcc_builder_create_offset_vector_direct@@Base+0xfb>
  410e1c:	nop    DWORD PTR [rax+0x0]
  410e20:	inc    rbx
  410e23:	add    edi,0xfffffffc
  410e26:	cmp    r9,rbx
  410e29:	je     410e7e <flatcc_builder_create_offset_vector_direct@@Base+0x14e>
  410e2b:	mov    eax,DWORD PTR [rsi+rbx*4]
  410e2e:	test   eax,eax
  410e30:	je     410e50 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
  410e32:	add    eax,edi
  410e34:	mov    DWORD PTR [rsi+rbx*4],eax
  410e37:	test   rcx,rcx
  410e3a:	je     410e20 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  410e3c:	cmp    BYTE PTR [rcx+rbx*1],0x0
  410e40:	jne    410e20 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  410e42:	jmp    410eef <flatcc_builder_create_offset_vector_direct@@Base+0x1bf>
  410e47:	nop    WORD PTR [rax+rax*1+0x0]
  410e50:	test   rcx,rcx
  410e53:	je     410f0e <flatcc_builder_create_offset_vector_direct@@Base+0x1de>
  410e59:	cmp    BYTE PTR [rcx+rbx*1],0x0
  410e5d:	je     410e20 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  410e5f:	lea    rdi,[rip+0x8a41]        # 4198a7 <flatcc_builder_padding_base@@Base+0x14c7>
  410e66:	lea    rsi,[rip+0x77f5]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  410e6d:	lea    rcx,[rip+0x89b0]        # 419824 <flatcc_builder_padding_base@@Base+0x1444>
  410e74:	mov    edx,0x5b5
  410e79:	call   4040a0 <__assert_fail@plt>
  410e7e:	mov    ebx,DWORD PTR [r14+0xf0]
  410e85:	cmp    r8,0x11
  410e89:	setb   al
  410e8c:	lea    rcx,[r8-0x10]
  410e90:	shr    rcx,0x20
  410e94:	sete   cl
  410e97:	test   r8d,r8d
  410e9a:	jle    410f2d <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  410ea0:	or     al,cl
  410ea2:	je     410f2d <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  410ea8:	sub    ebx,r8d
  410eab:	mov    rdi,QWORD PTR [r14+0x38]
  410eaf:	lea    rsi,[rsp+0x18]
  410eb4:	mov    ecx,ebx
  410eb6:	call   QWORD PTR [r14+0x48]
  410eba:	test   eax,eax
  410ebc:	jne    410f4c <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
  410ec2:	mov    DWORD PTR [r14+0xf0],ebx
  410ec9:	mov    eax,ebx
  410ecb:	add    rsp,0x98
  410ed2:	pop    rbx
  410ed3:	pop    r14
  410ed5:	ret    
  410ed6:	mov    r8d,0x4
  410edc:	mov    edx,0x1
  410ee1:	test   r9d,r9d
  410ee4:	jne    410de3 <flatcc_builder_create_offset_vector_direct@@Base+0xb3>
  410eea:	jmp    410e08 <flatcc_builder_create_offset_vector_direct@@Base+0xd8>
  410eef:	lea    rdi,[rip+0x8920]        # 419816 <flatcc_builder_padding_base@@Base+0x1436>
  410ef6:	lea    rsi,[rip+0x7765]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  410efd:	lea    rcx,[rip+0x8920]        # 419824 <flatcc_builder_padding_base@@Base+0x1444>
  410f04:	mov    edx,0x5b1
  410f09:	call   4040a0 <__assert_fail@plt>
  410f0e:	lea    rdi,[rip+0x890d]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  410f15:	lea    rsi,[rip+0x7746]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  410f1c:	lea    rcx,[rip+0x8901]        # 419824 <flatcc_builder_padding_base@@Base+0x1444>
  410f23:	mov    edx,0x5b7
  410f28:	call   4040a0 <__assert_fail@plt>
  410f2d:	lea    rdi,[rip+0x88ee]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  410f34:	lea    rsi,[rip+0x7727]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  410f3b:	lea    rcx,[rip+0x879f]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  410f42:	mov    edx,0x287
  410f47:	call   4040a0 <__assert_fail@plt>
  410f4c:	lea    rdi,[rip+0x88cf]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  410f53:	lea    rsi,[rip+0x7708]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  410f5a:	lea    rcx,[rip+0x8780]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  410f61:	mov    edx,0x28b
  410f66:	call   4040a0 <__assert_fail@plt>
  410f6b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000410f70 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  410f70:	push   rbp
  410f71:	push   rbx
  410f72:	push   rax
  410f73:	mov    rax,QWORD PTR [rdi+0x30]
  410f77:	cmp    WORD PTR [rax+0xe],0x5
  410f7c:	jne    41100b <flatcc_builder_end_offset_vector_for_unions@@Base+0x9b>
  410f82:	mov    rcx,rsi
  410f85:	mov    rbx,rdi
  410f88:	mov    rsi,QWORD PTR [rdi+0x18]
  410f8c:	mov    edx,DWORD PTR [rax+0x14]
  410f8f:	call   410d40 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  410f94:	mov    ebp,eax
  410f96:	test   eax,eax
  410f98:	je     411002 <flatcc_builder_end_offset_vector_for_unions@@Base+0x92>
  410f9a:	mov    rdi,QWORD PTR [rbx+0x18]
  410f9e:	mov    edx,DWORD PTR [rbx+0x20]
  410fa1:	xor    esi,esi
  410fa3:	call   4040b0 <memset@plt>
  410fa8:	mov    rax,QWORD PTR [rbx+0x30]
  410fac:	mov    ecx,DWORD PTR [rax+0x8]
  410faf:	mov    DWORD PTR [rbx+0x20],ecx
  410fb2:	mov    ecx,DWORD PTR [rax]
  410fb4:	mov    DWORD PTR [rbx+0x28],ecx
  410fb7:	mov    edx,DWORD PTR [rax+0x4]
  410fba:	mov    rsi,rcx
  410fbd:	add    rsi,QWORD PTR [rbx+0x68]
  410fc1:	mov    QWORD PTR [rbx+0x18],rsi
  410fc5:	mov    esi,DWORD PTR [rbx+0x70]
  410fc8:	sub    esi,ecx
  410fca:	cmp    esi,edx
  410fcc:	cmova  esi,edx
  410fcf:	mov    DWORD PTR [rbx+0x24],esi
  410fd2:	movzx  ecx,WORD PTR [rbx+0xea]
  410fd9:	cmp    WORD PTR [rbx+0xe8],cx
  410fe0:	jae    410fe9 <flatcc_builder_end_offset_vector_for_unions@@Base+0x79>
  410fe2:	mov    WORD PTR [rbx+0xe8],cx
  410fe9:	movzx  ecx,WORD PTR [rax+0xc]
  410fed:	mov    WORD PTR [rbx+0xea],cx
  410ff4:	add    rax,0xffffffffffffffdc
  410ff8:	mov    QWORD PTR [rbx+0x30],rax
  410ffc:	dec    DWORD PTR [rbx+0x104]
  411002:	mov    eax,ebp
  411004:	add    rsp,0x8
  411008:	pop    rbx
  411009:	pop    rbp
  41100a:	ret    
  41100b:	lea    rdi,[rip+0x7a86]        # 418a98 <flatcc_builder_padding_base@@Base+0x6b8>
  411012:	lea    rsi,[rip+0x7649]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  411019:	lea    rcx,[rip+0x80f1]        # 419111 <flatcc_builder_padding_base@@Base+0xd31>
  411020:	mov    edx,0x5d5
  411025:	call   4040a0 <__assert_fail@plt>
  41102a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000411030 <flatcc_builder_offset_vector_edit@@Base>:
  411030:	mov    rax,QWORD PTR [rdi+0x18]
  411034:	ret    
  411035:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41103f:	nop

0000000000411040 <flatcc_builder_offset_vector_count@@Base>:
  411040:	mov    rax,QWORD PTR [rdi+0x30]
  411044:	mov    eax,DWORD PTR [rax+0x14]
  411047:	ret    
  411048:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000411050 <flatcc_builder_table_add_union@@Base>:
  411050:	push   rbp
  411051:	push   r15
  411053:	push   r14
  411055:	push   rbx
  411056:	push   rax
  411057:	mov    rax,QWORD PTR [rdi+0x30]
  41105b:	cmp    WORD PTR [rax+0xe],0x3
  411060:	jne    4110be <flatcc_builder_table_add_union@@Base+0x6e>
  411062:	mov    r14,rdx
  411065:	mov    ebp,esi
  411067:	mov    r15,rdi
  41106a:	mov    rbx,rdx
  41106d:	shr    rbx,0x20
  411071:	test   r14b,r14b
  411074:	jne    41107a <flatcc_builder_table_add_union@@Base+0x2a>
  411076:	test   ebx,ebx
  411078:	jne    4110dd <flatcc_builder_table_add_union@@Base+0x8d>
  41107a:	test   ebx,ebx
  41107c:	je     411093 <flatcc_builder_table_add_union@@Base+0x43>
  41107e:	mov    rdi,r15
  411081:	mov    esi,ebp
  411083:	call   411140 <flatcc_builder_table_add_offset@@Base>
  411088:	test   rax,rax
  41108b:	je     41111b <flatcc_builder_table_add_union@@Base+0xcb>
  411091:	mov    DWORD PTR [rax],ebx
  411093:	dec    ebp
  411095:	mov    edx,0x1
  41109a:	mov    rdi,r15
  41109d:	mov    esi,ebp
  41109f:	mov    ecx,0x1
  4110a4:	call   4112a0 <flatcc_builder_table_add@@Base>
  4110a9:	test   rax,rax
  4110ac:	je     4110fc <flatcc_builder_table_add_union@@Base+0xac>
  4110ae:	mov    BYTE PTR [rax],r14b
  4110b1:	xor    eax,eax
  4110b3:	add    rsp,0x8
  4110b7:	pop    rbx
  4110b8:	pop    r14
  4110ba:	pop    r15
  4110bc:	pop    rbp
  4110bd:	ret    
  4110be:	lea    rdi,[rip+0x7dcc]        # 418e91 <flatcc_builder_padding_base@@Base+0xab1>
  4110c5:	lea    rsi,[rip+0x7596]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4110cc:	lea    rcx,[rip+0x80b0]        # 419183 <flatcc_builder_padding_base@@Base+0xda3>
  4110d3:	mov    edx,0x5ee
  4110d8:	call   4040a0 <__assert_fail@plt>
  4110dd:	lea    rdi,[rip+0x80f7]        # 4191db <flatcc_builder_padding_base@@Base+0xdfb>
  4110e4:	lea    rsi,[rip+0x7577]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4110eb:	lea    rcx,[rip+0x8091]        # 419183 <flatcc_builder_padding_base@@Base+0xda3>
  4110f2:	mov    edx,0x5ef
  4110f7:	call   4040a0 <__assert_fail@plt>
  4110fc:	lea    rdi,[rip+0x8104]        # 419207 <flatcc_builder_padding_base@@Base+0xe27>
  411103:	lea    rsi,[rip+0x7558]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  41110a:	lea    rcx,[rip+0x8072]        # 419183 <flatcc_builder_padding_base@@Base+0xda3>
  411111:	mov    edx,0x5f6
  411116:	call   4040a0 <__assert_fail@plt>
  41111b:	lea    rdi,[rip+0x80db]        # 4191fd <flatcc_builder_padding_base@@Base+0xe1d>
  411122:	lea    rsi,[rip+0x7539]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  411129:	lea    rcx,[rip+0x8053]        # 419183 <flatcc_builder_padding_base@@Base+0xda3>
  411130:	mov    edx,0x5f2
  411135:	call   4040a0 <__assert_fail@plt>
  41113a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000411140 <flatcc_builder_table_add_offset@@Base>:
  411140:	push   rbp
  411141:	push   r15
  411143:	push   r14
  411145:	push   rbx
  411146:	push   rax
  411147:	mov    rax,QWORD PTR [rdi+0x30]
  41114b:	cmp    WORD PTR [rax+0xe],0x3
  411150:	jne    41123e <flatcc_builder_table_add_offset@@Base+0xfe>
  411156:	mov    r14d,esi
  411159:	cmp    esi,0x7ffd
  41115f:	jae    41125d <flatcc_builder_table_add_offset@@Base+0x11d>
  411165:	mov    rbx,rdi
  411168:	mov    rax,QWORD PTR [rdi+0x8]
  41116c:	movsxd rcx,r14d
  41116f:	cmp    WORD PTR [rax+rcx*2],0x0
  411174:	jne    41127c <flatcc_builder_table_add_offset@@Base+0x13c>
  41117a:	mov    ecx,DWORD PTR [rbx+0x14]
  41117d:	xor    ecx,r14d
  411180:	imul   ecx,ecx,0x9e3779b1
  411186:	xor    ecx,0x4
  411189:	imul   ecx,ecx,0x9e3779b1
  41118f:	mov    DWORD PTR [rbx+0x14],ecx
  411192:	mov    ebp,DWORD PTR [rbx+0x20]
  411195:	mov    ecx,DWORD PTR [rbx+0x24]
  411198:	add    ebp,0x3
  41119b:	and    ebp,0xfffffffc
  41119e:	lea    r15,[rbp+0x4]
  4111a2:	mov    DWORD PTR [rbx+0x20],r15d
  4111a6:	cmp    ecx,r15d
  4111a9:	jae    411208 <flatcc_builder_table_add_offset@@Base+0xc8>
  4111ab:	mov    eax,r15d
  4111ae:	and    eax,0xfffffffc
  4111b1:	lea    rsi,[rbx+0x68]
  4111b5:	mov    rdi,QWORD PTR [rbx+0x40]
  4111b9:	mov    edx,DWORD PTR [rbx+0x28]
  4111bc:	add    rdx,rax
  4111bf:	mov    ecx,0x1
  4111c4:	mov    r8d,0x1
  4111ca:	call   QWORD PTR [rbx+0x50]
  4111cd:	test   eax,eax
  4111cf:	je     4111d5 <flatcc_builder_table_add_offset@@Base+0x95>
  4111d1:	xor    ebp,ebp
  4111d3:	jmp    411230 <flatcc_builder_table_add_offset@@Base+0xf0>
  4111d5:	mov    eax,DWORD PTR [rbx+0x28]
  4111d8:	mov    rcx,rax
  4111db:	add    rcx,QWORD PTR [rbx+0x68]
  4111df:	mov    QWORD PTR [rbx+0x18],rcx
  4111e3:	mov    ecx,DWORD PTR [rbx+0x70]
  4111e6:	sub    ecx,eax
  4111e8:	cmp    ecx,0xfffc
  4111ee:	mov    eax,0xfffc
  4111f3:	cmovb  eax,ecx
  4111f6:	mov    DWORD PTR [rbx+0x24],eax
  4111f9:	mov    rax,QWORD PTR [rbx+0x30]
  4111fd:	mov    DWORD PTR [rax+0x4],0xfffc
  411204:	mov    rax,QWORD PTR [rbx+0x8]
  411208:	movzx  ecx,r14w
  41120c:	mov    WORD PTR [rax+rcx*2],r15w
  411211:	cmp    WORD PTR [rbx+0x10],cx
  411215:	ja     41121f <flatcc_builder_table_add_offset@@Base+0xdf>
  411217:	inc    r14d
  41121a:	mov    WORD PTR [rbx+0x10],r14w
  41121f:	mov    rax,QWORD PTR [rbx]
  411222:	lea    rcx,[rax+0x2]
  411226:	mov    QWORD PTR [rbx],rcx
  411229:	mov    WORD PTR [rax],bp
  41122c:	add    rbp,QWORD PTR [rbx+0x18]
  411230:	mov    rax,rbp
  411233:	add    rsp,0x8
  411237:	pop    rbx
  411238:	pop    r14
  41123a:	pop    r15
  41123c:	pop    rbp
  41123d:	ret    
  41123e:	lea    rdi,[rip+0x7c4c]        # 418e91 <flatcc_builder_padding_base@@Base+0xab1>
  411245:	lea    rsi,[rip+0x7416]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  41124c:	lea    rcx,[rip+0x8332]        # 419585 <flatcc_builder_padding_base@@Base+0x11a5>
  411253:	mov    edx,0x713
  411258:	call   4040a0 <__assert_fail@plt>
  41125d:	lea    rdi,[rip+0x82a1]        # 419505 <flatcc_builder_padding_base@@Base+0x1125>
  411264:	lea    rsi,[rip+0x73f7]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  41126b:	lea    rcx,[rip+0x8313]        # 419585 <flatcc_builder_padding_base@@Base+0x11a5>
  411272:	mov    edx,0x714
  411277:	call   4040a0 <__assert_fail@plt>
  41127c:	lea    rdi,[rip+0x859f]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  411283:	lea    rsi,[rip+0x73d8]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  41128a:	lea    rcx,[rip+0x82f4]        # 419585 <flatcc_builder_padding_base@@Base+0x11a5>
  411291:	mov    edx,0x71b
  411296:	call   4040a0 <__assert_fail@plt>
  41129b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004112a0 <flatcc_builder_table_add@@Base>:
  4112a0:	push   rbp
  4112a1:	push   r14
  4112a3:	push   rbx
  4112a4:	mov    rax,QWORD PTR [rdi+0x30]
  4112a8:	cmp    WORD PTR [rax+0xe],0x3
  4112ad:	jne    411398 <flatcc_builder_table_add@@Base+0xf8>
  4112b3:	mov    r14d,esi
  4112b6:	cmp    esi,0x7ffd
  4112bc:	jae    4113b7 <flatcc_builder_table_add@@Base+0x117>
  4112c2:	mov    rbx,rdi
  4112c5:	cmp    WORD PTR [rdi+0xea],cx
  4112cc:	jae    4112d5 <flatcc_builder_table_add@@Base+0x35>
  4112ce:	mov    WORD PTR [rbx+0xea],cx
  4112d5:	mov    rsi,QWORD PTR [rbx+0x8]
  4112d9:	movsxd rax,r14d
  4112dc:	cmp    WORD PTR [rsi+rax*2],0x0
  4112e1:	jne    4113d6 <flatcc_builder_table_add@@Base+0x136>
  4112e7:	mov    eax,DWORD PTR [rbx+0x14]
  4112ea:	xor    eax,r14d
  4112ed:	imul   eax,eax,0x9e3779b1
  4112f3:	xor    eax,edx
  4112f5:	imul   eax,eax,0x9e3779b1
  4112fb:	mov    DWORD PTR [rbx+0x14],eax
  4112fe:	mov    eax,DWORD PTR [rbx+0x20]
  411301:	movzx  ebp,cx
  411304:	lea    eax,[rax+rbp*1]
  411307:	add    eax,0xffffffff
  41130a:	neg    ebp
  41130c:	and    ebp,eax
  41130e:	add    edx,ebp
  411310:	mov    DWORD PTR [rbx+0x20],edx
  411313:	cmp    edx,DWORD PTR [rbx+0x24]
  411316:	jb     411374 <flatcc_builder_table_add@@Base+0xd4>
  411318:	inc    edx
  41131a:	lea    rsi,[rbx+0x68]
  41131e:	mov    rdi,QWORD PTR [rbx+0x40]
  411322:	mov    eax,DWORD PTR [rbx+0x28]
  411325:	add    rax,rdx
  411328:	mov    rdx,rax
  41132b:	mov    ecx,0x1
  411330:	mov    r8d,0x1
  411336:	call   QWORD PTR [rbx+0x50]
  411339:	test   eax,eax
  41133b:	je     411341 <flatcc_builder_table_add@@Base+0xa1>
  41133d:	xor    eax,eax
  41133f:	jmp    411393 <flatcc_builder_table_add@@Base+0xf3>
  411341:	mov    eax,DWORD PTR [rbx+0x28]
  411344:	mov    rcx,rax
  411347:	add    rcx,QWORD PTR [rbx+0x68]
  41134b:	mov    QWORD PTR [rbx+0x18],rcx
  41134f:	mov    ecx,DWORD PTR [rbx+0x70]
  411352:	sub    ecx,eax
  411354:	cmp    ecx,0xfffc
  41135a:	mov    eax,0xfffc
  41135f:	cmovb  eax,ecx
  411362:	mov    DWORD PTR [rbx+0x24],eax
  411365:	mov    rax,QWORD PTR [rbx+0x30]
  411369:	mov    DWORD PTR [rax+0x4],0xfffc
  411370:	mov    rsi,QWORD PTR [rbx+0x8]
  411374:	mov    eax,ebp
  411376:	add    ebp,0x4
  411379:	movzx  ecx,r14w
  41137d:	mov    WORD PTR [rsi+rcx*2],bp
  411381:	cmp    WORD PTR [rbx+0x10],cx
  411385:	ja     41138f <flatcc_builder_table_add@@Base+0xef>
  411387:	inc    r14d
  41138a:	mov    WORD PTR [rbx+0x10],r14w
  41138f:	add    rax,QWORD PTR [rbx+0x18]
  411393:	pop    rbx
  411394:	pop    r14
  411396:	pop    rbp
  411397:	ret    
  411398:	lea    rdi,[rip+0x7af2]        # 418e91 <flatcc_builder_padding_base@@Base+0xab1>
  41139f:	lea    rsi,[rip+0x72bc]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4113a6:	lea    rcx,[rip+0x810e]        # 4194bb <flatcc_builder_padding_base@@Base+0x10db>
  4113ad:	mov    edx,0x6ed
  4113b2:	call   4040a0 <__assert_fail@plt>
  4113b7:	lea    rdi,[rip+0x8147]        # 419505 <flatcc_builder_padding_base@@Base+0x1125>
  4113be:	lea    rsi,[rip+0x729d]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4113c5:	lea    rcx,[rip+0x80ef]        # 4194bb <flatcc_builder_padding_base@@Base+0x10db>
  4113cc:	mov    edx,0x6ee
  4113d1:	call   4040a0 <__assert_fail@plt>
  4113d6:	lea    rdi,[rip+0x8445]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  4113dd:	lea    rsi,[rip+0x727e]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4113e4:	lea    rcx,[rip+0x80d0]        # 4194bb <flatcc_builder_padding_base@@Base+0x10db>
  4113eb:	mov    edx,0x6f8
  4113f0:	call   4040a0 <__assert_fail@plt>
  4113f5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4113ff:	nop

0000000000411400 <flatcc_builder_table_add_union_vector@@Base>:
  411400:	push   r15
  411402:	push   r14
  411404:	push   r12
  411406:	push   rbx
  411407:	push   rax
  411408:	mov    rax,QWORD PTR [rdi+0x30]
  41140c:	cmp    WORD PTR [rax+0xe],0x3
  411411:	jne    411467 <flatcc_builder_table_add_union_vector@@Base+0x67>
  411413:	mov    rbx,rdx
  411416:	mov    r12,rdx
  411419:	shr    r12,0x20
  41141d:	test   ebx,ebx
  41141f:	setne  al
  411422:	test   r12d,r12d
  411425:	sete   cl
  411428:	xor    cl,al
  41142a:	je     411486 <flatcc_builder_table_add_union_vector@@Base+0x86>
  41142c:	test   ebx,ebx
  41142e:	je     411459 <flatcc_builder_table_add_union_vector@@Base+0x59>
  411430:	mov    r14d,esi
  411433:	mov    r15,rdi
  411436:	lea    esi,[r14-0x1]
  41143a:	call   411140 <flatcc_builder_table_add_offset@@Base>
  41143f:	test   rax,rax
  411442:	je     4114a5 <flatcc_builder_table_add_union_vector@@Base+0xa5>
  411444:	mov    DWORD PTR [rax],ebx
  411446:	mov    rdi,r15
  411449:	mov    esi,r14d
  41144c:	call   411140 <flatcc_builder_table_add_offset@@Base>
  411451:	test   rax,rax
  411454:	je     4114c4 <flatcc_builder_table_add_union_vector@@Base+0xc4>
  411456:	mov    DWORD PTR [rax],r12d
  411459:	xor    eax,eax
  41145b:	add    rsp,0x8
  41145f:	pop    rbx
  411460:	pop    r12
  411462:	pop    r14
  411464:	pop    r15
  411466:	ret    
  411467:	lea    rdi,[rip+0x7a23]        # 418e91 <flatcc_builder_padding_base@@Base+0xab1>
  41146e:	lea    rsi,[rip+0x71ed]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  411475:	lea    rcx,[rip+0x7d97]        # 419213 <flatcc_builder_padding_base@@Base+0xe33>
  41147c:	mov    edx,0x600
  411481:	call   4040a0 <__assert_fail@plt>
  411486:	lea    rdi,[rip+0x7de9]        # 419276 <flatcc_builder_padding_base@@Base+0xe96>
  41148d:	lea    rsi,[rip+0x71ce]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  411494:	lea    rcx,[rip+0x7d78]        # 419213 <flatcc_builder_padding_base@@Base+0xe33>
  41149b:	mov    edx,0x601
  4114a0:	call   4040a0 <__assert_fail@plt>
  4114a5:	lea    rdi,[rip+0x7d51]        # 4191fd <flatcc_builder_padding_base@@Base+0xe1d>
  4114ac:	lea    rsi,[rip+0x71af]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4114b3:	lea    rcx,[rip+0x7d59]        # 419213 <flatcc_builder_padding_base@@Base+0xe33>
  4114ba:	mov    edx,0x604
  4114bf:	call   4040a0 <__assert_fail@plt>
  4114c4:	lea    rdi,[rip+0x7d32]        # 4191fd <flatcc_builder_padding_base@@Base+0xe1d>
  4114cb:	lea    rsi,[rip+0x7190]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4114d2:	lea    rcx,[rip+0x7d3a]        # 419213 <flatcc_builder_padding_base@@Base+0xe33>
  4114d9:	mov    edx,0x608
  4114de:	call   4040a0 <__assert_fail@plt>
  4114e3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4114ed:	nop    DWORD PTR [rax]

00000000004114f0 <flatcc_builder_create_union_vector@@Base>:
  4114f0:	push   r15
  4114f2:	push   r14
  4114f4:	push   r13
  4114f6:	push   r12
  4114f8:	push   rbx
  4114f9:	mov    r14,rdx
  4114fc:	mov    r15,rsi
  4114ff:	mov    rbx,rdi
  411502:	mov    esi,0x4
  411507:	call   40ed60 <flatcc_builder_start_buffer@@Base+0xe0>
  41150c:	test   eax,eax
  41150e:	je     411520 <flatcc_builder_create_union_vector@@Base+0x30>
  411510:	xor    r14d,r14d
  411513:	mov    rax,r14
  411516:	pop    rbx
  411517:	pop    r12
  411519:	pop    r13
  41151b:	pop    r14
  41151d:	pop    r15
  41151f:	ret    
  411520:	mov    rax,QWORD PTR [rbx+0x30]
  411524:	mov    DWORD PTR [rax+0x10],0x4
  41152b:	mov    rax,QWORD PTR [rbx+0x30]
  41152f:	mov    DWORD PTR [rax+0x14],0x0
  411536:	mov    rax,QWORD PTR [rbx+0x30]
  41153a:	mov    WORD PTR [rax+0xe],0x5
  411540:	mov    ecx,DWORD PTR [rbx+0x28]
  411543:	mov    edx,DWORD PTR [rbx+0x70]
  411546:	sub    edx,ecx
  411548:	add    rcx,QWORD PTR [rbx+0x68]
  41154c:	mov    QWORD PTR [rbx+0x18],rcx
  411550:	cmp    edx,0xfffffffc
  411553:	mov    ecx,0xfffffffc
  411558:	cmovb  ecx,edx
  41155b:	mov    DWORD PTR [rbx+0x24],ecx
  41155e:	mov    DWORD PTR [rax+0x4],0xfffffffc
  411565:	mov    ecx,DWORD PTR [rax+0x14]
  411568:	add    ecx,r14d
  41156b:	jb     4117d8 <flatcc_builder_create_union_vector@@Base+0x2e8>
  411571:	cmp    ecx,0x40000000
  411577:	jae    4117d8 <flatcc_builder_create_union_vector@@Base+0x2e8>
  41157d:	mov    DWORD PTR [rax+0x14],ecx
  411580:	mov    r12d,DWORD PTR [rbx+0x20]
  411584:	mov    eax,DWORD PTR [rbx+0x24]
  411587:	lea    ecx,[r12+r14*4]
  41158b:	mov    DWORD PTR [rbx+0x20],ecx
  41158e:	cmp    ecx,eax
  411590:	jae    4115a0 <flatcc_builder_create_union_vector@@Base+0xb0>
  411592:	mov    rsi,QWORD PTR [rbx+0x18]
  411596:	add    r12,rsi
  411599:	jne    4115fb <flatcc_builder_create_union_vector@@Base+0x10b>
  41159b:	jmp    411510 <flatcc_builder_create_union_vector@@Base+0x20>
  4115a0:	inc    ecx
  4115a2:	lea    rsi,[rbx+0x68]
  4115a6:	mov    rdi,QWORD PTR [rbx+0x40]
  4115aa:	mov    edx,DWORD PTR [rbx+0x28]
  4115ad:	add    rdx,rcx
  4115b0:	mov    ecx,0x1
  4115b5:	mov    r8d,0x1
  4115bb:	call   QWORD PTR [rbx+0x50]
  4115be:	test   eax,eax
  4115c0:	jne    411510 <flatcc_builder_create_union_vector@@Base+0x20>
  4115c6:	mov    eax,DWORD PTR [rbx+0x28]
  4115c9:	mov    rsi,rax
  4115cc:	add    rsi,QWORD PTR [rbx+0x68]
  4115d0:	mov    QWORD PTR [rbx+0x18],rsi
  4115d4:	mov    ecx,DWORD PTR [rbx+0x70]
  4115d7:	sub    ecx,eax
  4115d9:	cmp    ecx,0xfffffffc
  4115dc:	mov    eax,0xfffffffc
  4115e1:	cmovb  eax,ecx
  4115e4:	mov    DWORD PTR [rbx+0x24],eax
  4115e7:	mov    rcx,QWORD PTR [rbx+0x30]
  4115eb:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4115f2:	add    r12,rsi
  4115f5:	je     411510 <flatcc_builder_create_union_vector@@Base+0x20>
  4115fb:	mov    r13d,DWORD PTR [rbx+0x20]
  4115ff:	lea    ecx,[r14+r13*1]
  411603:	mov    DWORD PTR [rbx+0x20],ecx
  411606:	cmp    ecx,eax
  411608:	jb     41165c <flatcc_builder_create_union_vector@@Base+0x16c>
  41160a:	inc    ecx
  41160c:	lea    rsi,[rbx+0x68]
  411610:	mov    rdi,QWORD PTR [rbx+0x40]
  411614:	mov    edx,DWORD PTR [rbx+0x28]
  411617:	add    rdx,rcx
  41161a:	mov    ecx,0x1
  41161f:	mov    r8d,0x1
  411625:	call   QWORD PTR [rbx+0x50]
  411628:	test   eax,eax
  41162a:	jne    411510 <flatcc_builder_create_union_vector@@Base+0x20>
  411630:	mov    eax,DWORD PTR [rbx+0x28]
  411633:	mov    rsi,rax
  411636:	add    rsi,QWORD PTR [rbx+0x68]
  41163a:	mov    QWORD PTR [rbx+0x18],rsi
  41163e:	mov    ecx,DWORD PTR [rbx+0x70]
  411641:	sub    ecx,eax
  411643:	cmp    ecx,0xfffffffc
  411646:	mov    eax,0xfffffffc
  41164b:	cmovb  eax,ecx
  41164e:	mov    DWORD PTR [rbx+0x24],eax
  411651:	mov    rax,QWORD PTR [rbx+0x30]
  411655:	mov    DWORD PTR [rax+0x4],0xfffffffc
  41165c:	mov    r12,rsi
  41165f:	add    r12,r13
  411662:	je     411510 <flatcc_builder_create_union_vector@@Base+0x20>
  411668:	test   r14,r14
  41166b:	je     411728 <flatcc_builder_create_union_vector@@Base+0x238>
  411671:	lea    rcx,[r14-0x1]
  411675:	mov    r8d,r14d
  411678:	and    r8d,0x3
  41167c:	cmp    rcx,0x3
  411680:	jae    41168e <flatcc_builder_create_union_vector@@Base+0x19e>
  411682:	xor    ecx,ecx
  411684:	test   r8,r8
  411687:	jne    4116f7 <flatcc_builder_create_union_vector@@Base+0x207>
  411689:	jmp    411728 <flatcc_builder_create_union_vector@@Base+0x238>
  41168e:	mov    rdx,r14
  411691:	sub    rdx,r8
  411694:	lea    rdi,[rsi+r13*1]
  411698:	add    rdi,0x3
  41169c:	xor    ecx,ecx
  41169e:	xchg   ax,ax
  4116a0:	movzx  eax,BYTE PTR [r15+rcx*8]
  4116a5:	mov    BYTE PTR [rdi+rcx*1-0x3],al
  4116a9:	mov    eax,DWORD PTR [r15+rcx*8+0x4]
  4116ae:	mov    DWORD PTR [rsi+rcx*4],eax
  4116b1:	movzx  eax,BYTE PTR [r15+rcx*8+0x8]
  4116b7:	mov    BYTE PTR [rdi+rcx*1-0x2],al
  4116bb:	mov    eax,DWORD PTR [r15+rcx*8+0xc]
  4116c0:	mov    DWORD PTR [rsi+rcx*4+0x4],eax
  4116c4:	movzx  eax,BYTE PTR [r15+rcx*8+0x10]
  4116ca:	mov    BYTE PTR [rdi+rcx*1-0x1],al
  4116ce:	mov    eax,DWORD PTR [r15+rcx*8+0x14]
  4116d3:	mov    DWORD PTR [rsi+rcx*4+0x8],eax
  4116d7:	movzx  eax,BYTE PTR [r15+rcx*8+0x18]
  4116dd:	mov    BYTE PTR [rdi+rcx*1],al
  4116e0:	mov    eax,DWORD PTR [r15+rcx*8+0x1c]
  4116e5:	mov    DWORD PTR [rsi+rcx*4+0xc],eax
  4116e9:	add    rcx,0x4
  4116ed:	cmp    rdx,rcx
  4116f0:	jne    4116a0 <flatcc_builder_create_union_vector@@Base+0x1b0>
  4116f2:	test   r8,r8
  4116f5:	je     411728 <flatcc_builder_create_union_vector@@Base+0x238>
  4116f7:	lea    rdx,[rsi+rcx*4]
  4116fb:	lea    rdi,[r15+rcx*8]
  4116ff:	add    rdi,0x4
  411703:	add    r13,rcx
  411706:	add    r13,rsi
  411709:	xor    ecx,ecx
  41170b:	nop    DWORD PTR [rax+rax*1+0x0]
  411710:	movzx  eax,BYTE PTR [rdi+rcx*8-0x4]
  411715:	mov    BYTE PTR [r13+rcx*1+0x0],al
  41171a:	mov    eax,DWORD PTR [rdi+rcx*8]
  41171d:	mov    DWORD PTR [rdx+rcx*4],eax
  411720:	inc    rcx
  411723:	cmp    r8,rcx
  411726:	jne    411710 <flatcc_builder_create_union_vector@@Base+0x220>
  411728:	mov    rdi,rbx
  41172b:	mov    rdx,r14
  41172e:	mov    rcx,r12
  411731:	call   410d40 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  411736:	mov    r15d,eax
  411739:	test   eax,eax
  41173b:	je     411761 <flatcc_builder_create_union_vector@@Base+0x271>
  41173d:	mov    ecx,0x1
  411742:	mov    r9d,0xffffffff
  411748:	mov    rdi,rbx
  41174b:	mov    rsi,r12
  41174e:	mov    rdx,r14
  411751:	mov    r8d,0x1
  411757:	call   410ac0 <flatcc_builder_create_vector@@Base>
  41175c:	mov    r14d,eax
  41175f:	jmp    411764 <flatcc_builder_create_union_vector@@Base+0x274>
  411761:	xor    r14d,r14d
  411764:	shl    r15,0x20
  411768:	mov    rdi,QWORD PTR [rbx+0x18]
  41176c:	mov    edx,DWORD PTR [rbx+0x20]
  41176f:	xor    esi,esi
  411771:	call   4040b0 <memset@plt>
  411776:	mov    rax,QWORD PTR [rbx+0x30]
  41177a:	mov    ecx,DWORD PTR [rax+0x8]
  41177d:	mov    DWORD PTR [rbx+0x20],ecx
  411780:	mov    ecx,DWORD PTR [rax]
  411782:	mov    DWORD PTR [rbx+0x28],ecx
  411785:	mov    edx,DWORD PTR [rax+0x4]
  411788:	mov    rsi,rcx
  41178b:	add    rsi,QWORD PTR [rbx+0x68]
  41178f:	mov    QWORD PTR [rbx+0x18],rsi
  411793:	mov    esi,DWORD PTR [rbx+0x70]
  411796:	sub    esi,ecx
  411798:	cmp    esi,edx
  41179a:	cmova  esi,edx
  41179d:	mov    DWORD PTR [rbx+0x24],esi
  4117a0:	movzx  ecx,WORD PTR [rbx+0xea]
  4117a7:	cmp    WORD PTR [rbx+0xe8],cx
  4117ae:	jae    4117b7 <flatcc_builder_create_union_vector@@Base+0x2c7>
  4117b0:	mov    WORD PTR [rbx+0xe8],cx
  4117b7:	or     r14,r15
  4117ba:	movzx  ecx,WORD PTR [rax+0xc]
  4117be:	mov    WORD PTR [rbx+0xea],cx
  4117c5:	add    rax,0xffffffffffffffdc
  4117c9:	mov    QWORD PTR [rbx+0x30],rax
  4117cd:	dec    DWORD PTR [rbx+0x104]
  4117d3:	jmp    411513 <flatcc_builder_create_union_vector@@Base+0x23>
  4117d8:	lea    rdi,[rip+0x7f4c]        # 41972b <flatcc_builder_padding_base@@Base+0x134b>
  4117df:	lea    rsi,[rip+0x6e7c]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4117e6:	lea    rcx,[rip+0x7f59]        # 419746 <flatcc_builder_padding_base@@Base+0x1366>
  4117ed:	mov    edx,0x37c
  4117f2:	call   4040a0 <__assert_fail@plt>
  4117f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000411800 <flatcc_builder_create_union_vector_direct@@Base>:
  411800:	push   r15
  411802:	push   r14
  411804:	push   r12
  411806:	push   rbx
  411807:	push   rax
  411808:	mov    r14,rcx
  41180b:	mov    r15,rsi
  41180e:	mov    r12,rdi
  411811:	mov    rsi,rdx
  411814:	mov    rdx,rcx
  411817:	mov    rcx,r15
  41181a:	call   410d40 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  41181f:	mov    ebx,eax
  411821:	test   eax,eax
  411823:	je     411848 <flatcc_builder_create_union_vector_direct@@Base+0x48>
  411825:	mov    ecx,0x1
  41182a:	mov    r9d,0xffffffff
  411830:	mov    rdi,r12
  411833:	mov    rsi,r15
  411836:	mov    rdx,r14
  411839:	mov    r8d,0x1
  41183f:	call   410ac0 <flatcc_builder_create_vector@@Base>
  411844:	mov    eax,eax
  411846:	jmp    41184a <flatcc_builder_create_union_vector_direct@@Base+0x4a>
  411848:	xor    eax,eax
  41184a:	shl    rbx,0x20
  41184e:	or     rbx,rax
  411851:	mov    rax,rbx
  411854:	add    rsp,0x8
  411858:	pop    rbx
  411859:	pop    r12
  41185b:	pop    r14
  41185d:	pop    r15
  41185f:	ret    

0000000000411860 <flatcc_builder_start_union_vector@@Base>:
  411860:	push   rbx
  411861:	mov    rbx,rdi
  411864:	mov    esi,0x4
  411869:	call   40ed60 <flatcc_builder_start_buffer@@Base+0xe0>
  41186e:	mov    ecx,eax
  411870:	mov    eax,0xffffffff
  411875:	test   ecx,ecx
  411877:	je     41187b <flatcc_builder_start_union_vector@@Base+0x1b>
  411879:	pop    rbx
  41187a:	ret    
  41187b:	mov    rax,QWORD PTR [rbx+0x30]
  41187f:	mov    DWORD PTR [rax+0x10],0x8
  411886:	mov    rax,QWORD PTR [rbx+0x30]
  41188a:	mov    DWORD PTR [rax+0x14],0x0
  411891:	mov    rax,QWORD PTR [rbx+0x30]
  411895:	mov    WORD PTR [rax+0xe],0x7
  41189b:	mov    ecx,DWORD PTR [rbx+0x28]
  41189e:	mov    edx,DWORD PTR [rbx+0x70]
  4118a1:	sub    edx,ecx
  4118a3:	add    rcx,QWORD PTR [rbx+0x68]
  4118a7:	mov    QWORD PTR [rbx+0x18],rcx
  4118ab:	cmp    edx,0xfffffffc
  4118ae:	mov    ecx,0xfffffffc
  4118b3:	cmovb  ecx,edx
  4118b6:	mov    DWORD PTR [rbx+0x24],ecx
  4118b9:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4118c0:	xor    eax,eax
  4118c2:	pop    rbx
  4118c3:	ret    
  4118c4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4118ce:	xchg   ax,ax

00000000004118d0 <flatcc_builder_end_union_vector@@Base>:
  4118d0:	push   rbp
  4118d1:	push   r15
  4118d3:	push   r14
  4118d5:	push   r13
  4118d7:	push   r12
  4118d9:	push   rbx
  4118da:	push   rax
  4118db:	mov    rax,QWORD PTR [rdi+0x30]
  4118df:	cmp    WORD PTR [rax+0xe],0x7
  4118e4:	jne    411cd4 <flatcc_builder_end_union_vector@@Base+0x404>
  4118ea:	mov    r13,rdi
  4118ed:	mov    r14d,DWORD PTR [rax+0x14]
  4118f1:	lea    eax,[r14+r14*4]
  4118f5:	mov    r12d,DWORD PTR [rdi+0x20]
  4118f9:	add    eax,r12d
  4118fc:	mov    DWORD PTR [rdi+0x20],eax
  4118ff:	cmp    eax,DWORD PTR [rdi+0x24]
  411902:	jae    41190a <flatcc_builder_end_union_vector@@Base+0x3a>
  411904:	mov    r8,QWORD PTR [r13+0x18]
  411908:	jmp    411961 <flatcc_builder_end_union_vector@@Base+0x91>
  41190a:	inc    eax
  41190c:	lea    rsi,[r13+0x68]
  411910:	mov    rdi,QWORD PTR [r13+0x40]
  411914:	mov    edx,DWORD PTR [r13+0x28]
  411918:	add    rdx,rax
  41191b:	mov    ecx,0x1
  411920:	mov    r8d,0x1
  411926:	call   QWORD PTR [r13+0x50]
  41192a:	test   eax,eax
  41192c:	jne    411a96 <flatcc_builder_end_union_vector@@Base+0x1c6>
  411932:	mov    eax,DWORD PTR [r13+0x28]
  411936:	mov    r8,rax
  411939:	add    r8,QWORD PTR [r13+0x68]
  41193d:	mov    QWORD PTR [r13+0x18],r8
  411941:	mov    ecx,DWORD PTR [r13+0x70]
  411945:	sub    ecx,eax
  411947:	cmp    ecx,0xfffffffc
  41194a:	mov    eax,0xfffffffc
  41194f:	cmovb  eax,ecx
  411952:	mov    DWORD PTR [r13+0x24],eax
  411956:	mov    rax,QWORD PTR [r13+0x30]
  41195a:	mov    DWORD PTR [rax+0x4],0xfffffffc
  411961:	mov    rsi,r8
  411964:	add    rsi,r12
  411967:	je     411a96 <flatcc_builder_end_union_vector@@Base+0x1c6>
  41196d:	lea    r15,[rsi+r14*4]
  411971:	test   r14d,r14d
  411974:	je     411a5a <flatcc_builder_end_union_vector@@Base+0x18a>
  41197a:	cmp    r14d,0x9
  41197e:	jae    411b29 <flatcc_builder_end_union_vector@@Base+0x259>
  411984:	xor    r9d,r9d
  411987:	mov    r11d,r14d
  41198a:	sub    r11d,r9d
  41198d:	mov    r10,r9
  411990:	not    r10
  411993:	add    r10,r14
  411996:	and    r11,0x3
  41199a:	je     4119e0 <flatcc_builder_end_union_vector@@Base+0x110>
  41199c:	mov    rdx,r9
  41199f:	neg    rdx
  4119a2:	lea    rbp,[r12+r9*4]
  4119a6:	add    rbp,r8
  4119a9:	lea    rbx,[r8+r9*8]
  4119ad:	add    rbx,0x4
  4119b1:	lea    rax,[r9+r14*4]
  4119b5:	add    rax,r12
  4119b8:	add    rax,r8
  4119bb:	xor    edi,edi
  4119bd:	nop    DWORD PTR [rax]
  4119c0:	movzx  ecx,BYTE PTR [rbx+rdi*8-0x4]
  4119c5:	mov    BYTE PTR [rax+rdi*1],cl
  4119c8:	mov    ecx,DWORD PTR [rbx+rdi*8]
  4119cb:	mov    DWORD PTR [rbp+rdi*4+0x0],ecx
  4119cf:	dec    rdx
  4119d2:	inc    rdi
  4119d5:	cmp    r11,rdi
  4119d8:	jne    4119c0 <flatcc_builder_end_union_vector@@Base+0xf0>
  4119da:	neg    rdx
  4119dd:	mov    r9,rdx
  4119e0:	cmp    r10,0x3
  4119e4:	jb     411a5a <flatcc_builder_end_union_vector@@Base+0x18a>
  4119e6:	mov    rbp,r14
  4119e9:	sub    rbp,r9
  4119ec:	lea    rcx,[r12+r9*4]
  4119f0:	lea    rdx,[r8+rcx*1]
  4119f4:	add    rdx,0xc
  4119f8:	lea    rdi,[r8+r9*8]
  4119fc:	add    rdi,0x1c
  411a00:	lea    rcx,[r9+r14*4]
  411a04:	add    rcx,r12
  411a07:	add    rcx,r8
  411a0a:	add    rcx,0x3
  411a0e:	xor    ebx,ebx
  411a10:	movzx  eax,BYTE PTR [rdi+rbx*8-0x1c]
  411a15:	mov    BYTE PTR [rcx+rbx*1-0x3],al
  411a19:	mov    eax,DWORD PTR [rdi+rbx*8-0x18]
  411a1d:	mov    DWORD PTR [rdx+rbx*4-0xc],eax
  411a21:	movzx  eax,BYTE PTR [rdi+rbx*8-0x14]
  411a26:	mov    BYTE PTR [rcx+rbx*1-0x2],al
  411a2a:	mov    eax,DWORD PTR [rdi+rbx*8-0x10]
  411a2e:	mov    DWORD PTR [rdx+rbx*4-0x8],eax
  411a32:	movzx  eax,BYTE PTR [rdi+rbx*8-0xc]
  411a37:	mov    BYTE PTR [rcx+rbx*1-0x1],al
  411a3b:	mov    eax,DWORD PTR [rdi+rbx*8-0x8]
  411a3f:	mov    DWORD PTR [rdx+rbx*4-0x4],eax
  411a43:	movzx  eax,BYTE PTR [rdi+rbx*8-0x4]
  411a48:	mov    BYTE PTR [rcx+rbx*1],al
  411a4b:	mov    eax,DWORD PTR [rdi+rbx*8]
  411a4e:	mov    DWORD PTR [rdx+rbx*4],eax
  411a51:	add    rbx,0x4
  411a55:	cmp    rbp,rbx
  411a58:	jne    411a10 <flatcc_builder_end_union_vector@@Base+0x140>
  411a5a:	mov    rdi,r13
  411a5d:	mov    rdx,r14
  411a60:	mov    rcx,r15
  411a63:	vzeroupper 
  411a66:	call   410d40 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  411a6b:	mov    r12d,eax
  411a6e:	test   eax,eax
  411a70:	je     411a9b <flatcc_builder_end_union_vector@@Base+0x1cb>
  411a72:	mov    ecx,0x1
  411a77:	mov    r9d,0xffffffff
  411a7d:	mov    rdi,r13
  411a80:	mov    rsi,r15
  411a83:	mov    rdx,r14
  411a86:	mov    r8d,0x1
  411a8c:	call   410ac0 <flatcc_builder_create_vector@@Base>
  411a91:	mov    r14d,eax
  411a94:	jmp    411a9e <flatcc_builder_end_union_vector@@Base+0x1ce>
  411a96:	xor    r14d,r14d
  411a99:	jmp    411b17 <flatcc_builder_end_union_vector@@Base+0x247>
  411a9b:	xor    r14d,r14d
  411a9e:	shl    r12,0x20
  411aa2:	mov    rdi,QWORD PTR [r13+0x18]
  411aa6:	mov    edx,DWORD PTR [r13+0x20]
  411aaa:	xor    esi,esi
  411aac:	call   4040b0 <memset@plt>
  411ab1:	mov    rax,QWORD PTR [r13+0x30]
  411ab5:	mov    ecx,DWORD PTR [rax+0x8]
  411ab8:	mov    DWORD PTR [r13+0x20],ecx
  411abc:	mov    ecx,DWORD PTR [rax]
  411abe:	mov    DWORD PTR [r13+0x28],ecx
  411ac2:	mov    edx,DWORD PTR [rax+0x4]
  411ac5:	mov    rsi,rcx
  411ac8:	add    rsi,QWORD PTR [r13+0x68]
  411acc:	mov    QWORD PTR [r13+0x18],rsi
  411ad0:	mov    esi,DWORD PTR [r13+0x70]
  411ad4:	sub    esi,ecx
  411ad6:	cmp    esi,edx
  411ad8:	cmova  esi,edx
  411adb:	mov    DWORD PTR [r13+0x24],esi
  411adf:	movzx  ecx,WORD PTR [r13+0xea]
  411ae7:	cmp    WORD PTR [r13+0xe8],cx
  411aef:	jae    411af9 <flatcc_builder_end_union_vector@@Base+0x229>
  411af1:	mov    WORD PTR [r13+0xe8],cx
  411af9:	or     r14,r12
  411afc:	movzx  ecx,WORD PTR [rax+0xc]
  411b00:	mov    WORD PTR [r13+0xea],cx
  411b08:	add    rax,0xffffffffffffffdc
  411b0c:	mov    QWORD PTR [r13+0x30],rax
  411b10:	dec    DWORD PTR [r13+0x104]
  411b17:	mov    rax,r14
  411b1a:	add    rsp,0x8
  411b1e:	pop    rbx
  411b1f:	pop    r12
  411b21:	pop    r13
  411b23:	pop    r14
  411b25:	pop    r15
  411b27:	pop    rbp
  411b28:	ret    
  411b29:	lea    rax,[r14-0x1]
  411b2d:	mov    ecx,0x8
  411b32:	mul    rcx
  411b35:	seto   cl
  411b38:	mov    rdx,r8
  411b3b:	not    rdx
  411b3e:	xor    r9d,r9d
  411b41:	cmp    rax,rdx
  411b44:	ja     411987 <flatcc_builder_end_union_vector@@Base+0xb7>
  411b4a:	test   cl,cl
  411b4c:	jne    411987 <flatcc_builder_end_union_vector@@Base+0xb7>
  411b52:	lea    rdx,[r8+0x4]
  411b56:	mov    rdi,rdx
  411b59:	not    rdi
  411b5c:	cmp    rax,rdi
  411b5f:	ja     411987 <flatcc_builder_end_union_vector@@Base+0xb7>
  411b65:	test   cl,cl
  411b67:	jne    411987 <flatcc_builder_end_union_vector@@Base+0xb7>
  411b6d:	lea    rcx,[r14+r14*4]
  411b71:	add    rcx,r12
  411b74:	add    rcx,r8
  411b77:	lea    rbx,[r8+r14*8]
  411b7b:	add    rbx,0xfffffffffffffff9
  411b7f:	cmp    rbx,r15
  411b82:	seta   r11b
  411b86:	lea    rdi,[r8+r14*8]
  411b8a:	cmp    r8,rcx
  411b8d:	setb   r10b
  411b91:	cmp    rdi,r15
  411b94:	seta   al
  411b97:	cmp    rdx,rcx
  411b9a:	setb   bpl
  411b9e:	cmp    rsi,rbx
  411ba1:	setb   cl
  411ba4:	cmp    r8,r15
  411ba7:	setb   BYTE PTR [rsp+0x7]
  411bac:	cmp    rsi,rdi
  411baf:	setb   bl
  411bb2:	cmp    rdx,r15
  411bb5:	setb   dl
  411bb8:	xor    r9d,r9d
  411bbb:	test   r11b,r10b
  411bbe:	jne    411987 <flatcc_builder_end_union_vector@@Base+0xb7>
  411bc4:	and    al,bpl
  411bc7:	jne    411987 <flatcc_builder_end_union_vector@@Base+0xb7>
  411bcd:	and    cl,BYTE PTR [rsp+0x7]
  411bd1:	jne    411987 <flatcc_builder_end_union_vector@@Base+0xb7>
  411bd7:	and    bl,dl
  411bd9:	jne    411987 <flatcc_builder_end_union_vector@@Base+0xb7>
  411bdf:	mov    eax,r14d
  411be2:	and    eax,0x7
  411be5:	test   rax,rax
  411be8:	mov    ecx,0x8
  411bed:	cmovne rcx,rax
  411bf1:	mov    r9,r14
  411bf4:	sub    r9,rcx
  411bf7:	vmovdqa ymm0,YMMWORD PTR [rip+0x69e1]        # 4185e0 <flatcc_builder_padding_base@@Base+0x200>
  411bff:	vmovdqa ymm1,YMMWORD PTR [rip+0x69f9]        # 418600 <flatcc_builder_padding_base@@Base+0x220>
  411c07:	xor    eax,eax
  411c09:	vmovdqa xmm8,XMMWORD PTR [rip+0x6a0f]        # 418620 <flatcc_builder_padding_base@@Base+0x240>
  411c11:	vmovdqa xmm9,XMMWORD PTR [rip+0x6a17]        # 418630 <flatcc_builder_padding_base@@Base+0x250>
  411c19:	vpbroadcastq ymm4,QWORD PTR [rip+0x6a1e]        # 418640 <flatcc_builder_padding_base@@Base+0x260>
  411c22:	vpbroadcastq ymm5,QWORD PTR [rip+0x6a1d]        # 418648 <flatcc_builder_padding_base@@Base+0x268>
  411c2b:	mov    rdi,r8
  411c2e:	xchg   ax,ax
  411c30:	vmovdqu xmm6,XMMWORD PTR [rdi]
  411c34:	vmovdqu xmm7,XMMWORD PTR [rdi+0x10]
  411c39:	vmovdqu xmm2,XMMWORD PTR [rdi+0x20]
  411c3e:	vmovdqu xmm3,XMMWORD PTR [rdi+0x30]
  411c43:	vpshufb xmm3,xmm3,xmm8
  411c48:	vpshufb xmm2,xmm2,xmm8
  411c4d:	vpunpcklwd xmm2,xmm2,xmm3
  411c51:	vpshufb xmm3,xmm7,xmm9
  411c56:	vpshufb xmm6,xmm6,xmm9
  411c5b:	vpunpcklwd xmm3,xmm6,xmm3
  411c5f:	vpblendd xmm2,xmm3,xmm2,0x2
  411c65:	vmovq  QWORD PTR [r15+rax*1],xmm2
  411c6b:	vpsllq ymm2,ymm0,0x3
  411c70:	vmovq  xmm3,r8
  411c75:	vpbroadcastq ymm3,xmm3
  411c7a:	vpaddq ymm2,ymm3,ymm2
  411c7e:	vpaddq ymm2,ymm2,ymm4
  411c82:	vpsllq ymm6,ymm1,0x3
  411c87:	vpaddq ymm3,ymm3,ymm6
  411c8b:	vpaddq ymm3,ymm3,ymm4
  411c8f:	vpcmpeqd xmm6,xmm6,xmm6
  411c93:	vpgatherqd xmm7,DWORD PTR [ymm3*1+0x0],xmm6
  411c9d:	vpcmpeqd xmm3,xmm3,xmm3
  411ca1:	vpgatherqd xmm6,DWORD PTR [ymm2*1+0x0],xmm3
  411cab:	vmovdqu XMMWORD PTR [rsi+rax*4+0x10],xmm6
  411cb1:	vmovdqu XMMWORD PTR [rsi+rax*4],xmm7
  411cb6:	add    rax,0x8
  411cba:	vpaddq ymm1,ymm1,ymm5
  411cbe:	vpaddq ymm0,ymm0,ymm5
  411cc2:	add    rdi,0x40
  411cc6:	cmp    r9,rax
  411cc9:	jne    411c30 <flatcc_builder_end_union_vector@@Base+0x360>
  411ccf:	jmp    411987 <flatcc_builder_end_union_vector@@Base+0xb7>
  411cd4:	lea    rdi,[rip+0x75c3]        # 41929e <flatcc_builder_padding_base@@Base+0xebe>
  411cdb:	lea    rsi,[rip+0x6980]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  411ce2:	lea    rcx,[rip+0x75e7]        # 4192d0 <flatcc_builder_padding_base@@Base+0xef0>
  411ce9:	mov    edx,0x651
  411cee:	call   4040a0 <__assert_fail@plt>
  411cf3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  411cfd:	nop    DWORD PTR [rax]

0000000000411d00 <flatcc_builder_union_vector_count@@Base>:
  411d00:	mov    rax,QWORD PTR [rdi+0x30]
  411d04:	mov    eax,DWORD PTR [rax+0x14]
  411d07:	ret    
  411d08:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000411d10 <flatcc_builder_union_vector_edit@@Base>:
  411d10:	mov    rax,QWORD PTR [rdi+0x18]
  411d14:	ret    
  411d15:	nop    WORD PTR cs:[rax+rax*1+0x0]
  411d1f:	nop

0000000000411d20 <flatcc_builder_extend_union_vector@@Base>:
  411d20:	push   r14
  411d22:	push   rbx
  411d23:	push   rax
  411d24:	mov    rax,QWORD PTR [rdi+0x30]
  411d28:	mov    ecx,DWORD PTR [rax+0x14]
  411d2b:	add    ecx,esi
  411d2d:	jb     411db4 <flatcc_builder_extend_union_vector@@Base+0x94>
  411d33:	cmp    ecx,0x20000000
  411d39:	jae    411db4 <flatcc_builder_extend_union_vector@@Base+0x94>
  411d3b:	mov    rbx,rdi
  411d3e:	mov    DWORD PTR [rax+0x14],ecx
  411d41:	mov    r14d,DWORD PTR [rdi+0x20]
  411d45:	lea    eax,[r14+rsi*8]
  411d49:	mov    DWORD PTR [rdi+0x20],eax
  411d4c:	cmp    eax,DWORD PTR [rdi+0x24]
  411d4f:	jae    411d57 <flatcc_builder_extend_union_vector@@Base+0x37>
  411d51:	mov    rax,QWORD PTR [rbx+0x18]
  411d55:	jmp    411da9 <flatcc_builder_extend_union_vector@@Base+0x89>
  411d57:	inc    eax
  411d59:	lea    rsi,[rbx+0x68]
  411d5d:	mov    rdi,QWORD PTR [rbx+0x40]
  411d61:	mov    edx,DWORD PTR [rbx+0x28]
  411d64:	add    rdx,rax
  411d67:	mov    ecx,0x1
  411d6c:	mov    r8d,0x1
  411d72:	call   QWORD PTR [rbx+0x50]
  411d75:	test   eax,eax
  411d77:	je     411d7d <flatcc_builder_extend_union_vector@@Base+0x5d>
  411d79:	xor    eax,eax
  411d7b:	jmp    411dac <flatcc_builder_extend_union_vector@@Base+0x8c>
  411d7d:	mov    ecx,DWORD PTR [rbx+0x28]
  411d80:	mov    rax,rcx
  411d83:	add    rax,QWORD PTR [rbx+0x68]
  411d87:	mov    QWORD PTR [rbx+0x18],rax
  411d8b:	mov    edx,DWORD PTR [rbx+0x70]
  411d8e:	sub    edx,ecx
  411d90:	cmp    edx,0xfffffffc
  411d93:	mov    ecx,0xfffffffc
  411d98:	cmovb  ecx,edx
  411d9b:	mov    DWORD PTR [rbx+0x24],ecx
  411d9e:	mov    rcx,QWORD PTR [rbx+0x30]
  411da2:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  411da9:	add    rax,r14
  411dac:	add    rsp,0x8
  411db0:	pop    rbx
  411db1:	pop    r14
  411db3:	ret    
  411db4:	lea    rdi,[rip+0x7970]        # 41972b <flatcc_builder_padding_base@@Base+0x134b>
  411dbb:	lea    rsi,[rip+0x68a0]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  411dc2:	lea    rcx,[rip+0x797d]        # 419746 <flatcc_builder_padding_base@@Base+0x1366>
  411dc9:	mov    edx,0x37c
  411dce:	call   4040a0 <__assert_fail@plt>
  411dd3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  411ddd:	nop    DWORD PTR [rax]

0000000000411de0 <flatcc_builder_truncate_union_vector@@Base>:
  411de0:	push   rax
  411de1:	mov    rax,QWORD PTR [rdi+0x30]
  411de5:	cmp    WORD PTR [rax+0xe],0x7
  411dea:	jne    411e1b <flatcc_builder_truncate_union_vector@@Base+0x3b>
  411dec:	mov    rdx,rsi
  411def:	mov    ecx,DWORD PTR [rax+0x14]
  411df2:	sub    ecx,edx
  411df4:	jb     411e3a <flatcc_builder_truncate_union_vector@@Base+0x5a>
  411df6:	mov    DWORD PTR [rax+0x14],ecx
  411df9:	mov    rax,QWORD PTR [rdi+0x30]
  411dfd:	imul   edx,DWORD PTR [rax+0x10]
  411e01:	mov    eax,DWORD PTR [rdi+0x20]
  411e04:	sub    eax,edx
  411e06:	mov    DWORD PTR [rdi+0x20],eax
  411e09:	add    rax,QWORD PTR [rdi+0x18]
  411e0d:	mov    rdi,rax
  411e10:	xor    esi,esi
  411e12:	call   4040b0 <memset@plt>
  411e17:	xor    eax,eax
  411e19:	pop    rcx
  411e1a:	ret    
  411e1b:	lea    rdi,[rip+0x747c]        # 41929e <flatcc_builder_padding_base@@Base+0xebe>
  411e22:	lea    rsi,[rip+0x6839]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  411e29:	lea    rcx,[rip+0x74f3]        # 419323 <flatcc_builder_padding_base@@Base+0xf43>
  411e30:	mov    edx,0x681
  411e35:	call   4040a0 <__assert_fail@plt>
  411e3a:	lea    rdi,[rip+0x6ec1]        # 418d02 <flatcc_builder_padding_base@@Base+0x922>
  411e41:	lea    rsi,[rip+0x681a]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  411e48:	lea    rcx,[rip+0x74d4]        # 419323 <flatcc_builder_padding_base@@Base+0xf43>
  411e4f:	mov    edx,0x682
  411e54:	call   4040a0 <__assert_fail@plt>
  411e59:	nop    DWORD PTR [rax+0x0]

0000000000411e60 <flatcc_builder_union_vector_push@@Base>:
  411e60:	push   r15
  411e62:	push   r14
  411e64:	push   rbx
  411e65:	mov    rax,QWORD PTR [rdi+0x30]
  411e69:	cmp    WORD PTR [rax+0xe],0x7
  411e6e:	jne    411f07 <flatcc_builder_union_vector_push@@Base+0xa7>
  411e74:	mov    ecx,DWORD PTR [rax+0x14]
  411e77:	cmp    ecx,0x1fffffff
  411e7d:	je     411ec9 <flatcc_builder_union_vector_push@@Base+0x69>
  411e7f:	mov    r14,rsi
  411e82:	mov    rbx,rdi
  411e85:	inc    ecx
  411e87:	mov    DWORD PTR [rax+0x14],ecx
  411e8a:	mov    r15d,DWORD PTR [rdi+0x20]
  411e8e:	lea    eax,[r15+0x8]
  411e92:	mov    DWORD PTR [rdi+0x20],eax
  411e95:	cmp    eax,DWORD PTR [rdi+0x24]
  411e98:	jae    411ea5 <flatcc_builder_union_vector_push@@Base+0x45>
  411e9a:	mov    rax,QWORD PTR [rbx+0x18]
  411e9e:	add    rax,r15
  411ea1:	jne    411efe <flatcc_builder_union_vector_push@@Base+0x9e>
  411ea3:	jmp    411ec9 <flatcc_builder_union_vector_push@@Base+0x69>
  411ea5:	lea    eax,[r15+0x9]
  411ea9:	lea    rsi,[rbx+0x68]
  411ead:	mov    rdi,QWORD PTR [rbx+0x40]
  411eb1:	mov    edx,DWORD PTR [rbx+0x28]
  411eb4:	add    rdx,rax
  411eb7:	mov    ecx,0x1
  411ebc:	mov    r8d,0x1
  411ec2:	call   QWORD PTR [rbx+0x50]
  411ec5:	test   eax,eax
  411ec7:	je     411ecd <flatcc_builder_union_vector_push@@Base+0x6d>
  411ec9:	xor    eax,eax
  411ecb:	jmp    411f01 <flatcc_builder_union_vector_push@@Base+0xa1>
  411ecd:	mov    ecx,DWORD PTR [rbx+0x28]
  411ed0:	mov    rax,rcx
  411ed3:	add    rax,QWORD PTR [rbx+0x68]
  411ed7:	mov    QWORD PTR [rbx+0x18],rax
  411edb:	mov    edx,DWORD PTR [rbx+0x70]
  411ede:	sub    edx,ecx
  411ee0:	cmp    edx,0xfffffffc
  411ee3:	mov    ecx,0xfffffffc
  411ee8:	cmovb  ecx,edx
  411eeb:	mov    DWORD PTR [rbx+0x24],ecx
  411eee:	mov    rcx,QWORD PTR [rbx+0x30]
  411ef2:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  411ef9:	add    rax,r15
  411efc:	je     411ec9 <flatcc_builder_union_vector_push@@Base+0x69>
  411efe:	mov    QWORD PTR [rax],r14
  411f01:	pop    rbx
  411f02:	pop    r14
  411f04:	pop    r15
  411f06:	ret    
  411f07:	lea    rdi,[rip+0x7390]        # 41929e <flatcc_builder_padding_base@@Base+0xebe>
  411f0e:	lea    rsi,[rip+0x674d]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  411f15:	lea    rcx,[rip+0x744c]        # 419368 <flatcc_builder_padding_base@@Base+0xf88>
  411f1c:	mov    edx,0x68d
  411f21:	call   4040a0 <__assert_fail@plt>
  411f26:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000411f30 <flatcc_builder_append_union_vector@@Base>:
  411f30:	push   r15
  411f32:	push   r14
  411f34:	push   r13
  411f36:	push   r12
  411f38:	push   rbx
  411f39:	mov    rax,QWORD PTR [rdi+0x30]
  411f3d:	cmp    WORD PTR [rax+0xe],0x7
  411f42:	jne    41201e <flatcc_builder_append_union_vector@@Base+0xee>
  411f48:	mov    r15,rdx
  411f4b:	mov    ecx,DWORD PTR [rax+0x14]
  411f4e:	add    ecx,r15d
  411f51:	jb     411fff <flatcc_builder_append_union_vector@@Base+0xcf>
  411f57:	cmp    ecx,0x20000000
  411f5d:	jae    411fff <flatcc_builder_append_union_vector@@Base+0xcf>
  411f63:	mov    r14,rsi
  411f66:	mov    rbx,rdi
  411f69:	mov    DWORD PTR [rax+0x14],ecx
  411f6c:	mov    r13d,DWORD PTR [rdi+0x20]
  411f70:	lea    eax,[r13+r15*8+0x0]
  411f75:	mov    DWORD PTR [rdi+0x20],eax
  411f78:	cmp    eax,DWORD PTR [rdi+0x24]
  411f7b:	jae    411f88 <flatcc_builder_append_union_vector@@Base+0x58>
  411f7d:	mov    r12,QWORD PTR [rbx+0x18]
  411f81:	add    r12,r13
  411f84:	jne    411fe0 <flatcc_builder_append_union_vector@@Base+0xb0>
  411f86:	jmp    411faa <flatcc_builder_append_union_vector@@Base+0x7a>
  411f88:	inc    eax
  411f8a:	lea    rsi,[rbx+0x68]
  411f8e:	mov    rdi,QWORD PTR [rbx+0x40]
  411f92:	mov    edx,DWORD PTR [rbx+0x28]
  411f95:	add    rdx,rax
  411f98:	mov    ecx,0x1
  411f9d:	mov    r8d,0x1
  411fa3:	call   QWORD PTR [rbx+0x50]
  411fa6:	test   eax,eax
  411fa8:	je     411faf <flatcc_builder_append_union_vector@@Base+0x7f>
  411faa:	xor    r12d,r12d
  411fad:	jmp    411ff2 <flatcc_builder_append_union_vector@@Base+0xc2>
  411faf:	mov    eax,DWORD PTR [rbx+0x28]
  411fb2:	mov    r12,rax
  411fb5:	add    r12,QWORD PTR [rbx+0x68]
  411fb9:	mov    QWORD PTR [rbx+0x18],r12
  411fbd:	mov    ecx,DWORD PTR [rbx+0x70]
  411fc0:	sub    ecx,eax
  411fc2:	cmp    ecx,0xfffffffc
  411fc5:	mov    eax,0xfffffffc
  411fca:	cmovb  eax,ecx
  411fcd:	mov    DWORD PTR [rbx+0x24],eax
  411fd0:	mov    rax,QWORD PTR [rbx+0x30]
  411fd4:	mov    DWORD PTR [rax+0x4],0xfffffffc
  411fdb:	add    r12,r13
  411fde:	je     411faa <flatcc_builder_append_union_vector@@Base+0x7a>
  411fe0:	shl    r15d,0x3
  411fe4:	mov    edx,r15d
  411fe7:	mov    rdi,r12
  411fea:	mov    rsi,r14
  411fed:	call   404100 <memcpy@plt>
  411ff2:	mov    rax,r12
  411ff5:	pop    rbx
  411ff6:	pop    r12
  411ff8:	pop    r13
  411ffa:	pop    r14
  411ffc:	pop    r15
  411ffe:	ret    
  411fff:	lea    rdi,[rip+0x7725]        # 41972b <flatcc_builder_padding_base@@Base+0x134b>
  412006:	lea    rsi,[rip+0x6655]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  41200d:	lea    rcx,[rip+0x7732]        # 419746 <flatcc_builder_padding_base@@Base+0x1366>
  412014:	mov    edx,0x37c
  412019:	call   4040a0 <__assert_fail@plt>
  41201e:	lea    rdi,[rip+0x7279]        # 41929e <flatcc_builder_padding_base@@Base+0xebe>
  412025:	lea    rsi,[rip+0x6636]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  41202c:	lea    rcx,[rip+0x73a2]        # 4193d5 <flatcc_builder_padding_base@@Base+0xff5>
  412033:	mov    edx,0x69c
  412038:	call   4040a0 <__assert_fail@plt>
  41203d:	nop    DWORD PTR [rax]

0000000000412040 <flatcc_builder_create_string@@Base>:
  412040:	push   rbp
  412041:	push   rbx
  412042:	sub    rsp,0x98
  412049:	xor    ebp,ebp
  41204b:	mov    rax,rdx
  41204e:	shr    rax,0x20
  412052:	jne    412126 <flatcc_builder_create_string@@Base+0xe6>
  412058:	mov    rbx,rdi
  41205b:	mov    DWORD PTR [rsp+0x4],edx
  41205f:	mov    ebp,DWORD PTR [rdi+0xf0]
  412065:	mov    eax,edx
  412067:	not    eax
  412069:	add    eax,ebp
  41206b:	and    eax,0x3
  41206e:	inc    eax
  412070:	mov    QWORD PTR [rsp+0x8],0x4
  412079:	lea    rcx,[rsp+0x4]
  41207e:	mov    QWORD PTR [rsp+0x18],rcx
  412083:	mov    QWORD PTR [rsp+0x20],0x4
  41208c:	mov    DWORD PTR [rsp+0x10],0x1
  412094:	test   rdx,rdx
  412097:	je     4120bb <flatcc_builder_create_string@@Base+0x7b>
  412099:	lea    rcx,[rdx+0x4]
  41209d:	mov    QWORD PTR [rsp+0x8],rcx
  4120a2:	mov    QWORD PTR [rsp+0x28],rsi
  4120a7:	mov    QWORD PTR [rsp+0x30],rdx
  4120ac:	mov    DWORD PTR [rsp+0x10],0x2
  4120b4:	mov    edx,0x2
  4120b9:	jmp    4120c5 <flatcc_builder_create_string@@Base+0x85>
  4120bb:	mov    ecx,0x4
  4120c0:	mov    edx,0x1
  4120c5:	mov    esi,eax
  4120c7:	lea    r8,[rcx+rsi*1]
  4120cb:	mov    QWORD PTR [rsp+0x8],r8
  4120d0:	mov    eax,edx
  4120d2:	shl    rax,0x4
  4120d6:	lea    rdi,[rip+0x6303]        # 4183e0 <flatcc_builder_padding_base@@Base>
  4120dd:	mov    QWORD PTR [rsp+rax*1+0x18],rdi
  4120e2:	mov    QWORD PTR [rsp+rax*1+0x20],rsi
  4120e7:	inc    edx
  4120e9:	mov    DWORD PTR [rsp+0x10],edx
  4120ed:	cmp    r8,0x11
  4120f1:	setb   al
  4120f4:	add    rcx,rsi
  4120f7:	add    rcx,0xfffffffffffffff0
  4120fb:	shr    rcx,0x20
  4120ff:	sete   cl
  412102:	test   r8d,r8d
  412105:	jle    412132 <flatcc_builder_create_string@@Base+0xf2>
  412107:	or     al,cl
  412109:	je     412132 <flatcc_builder_create_string@@Base+0xf2>
  41210b:	sub    ebp,r8d
  41210e:	mov    rdi,QWORD PTR [rbx+0x38]
  412112:	lea    rsi,[rsp+0x18]
  412117:	mov    ecx,ebp
  412119:	call   QWORD PTR [rbx+0x48]
  41211c:	test   eax,eax
  41211e:	jne    412151 <flatcc_builder_create_string@@Base+0x111>
  412120:	mov    DWORD PTR [rbx+0xf0],ebp
  412126:	mov    eax,ebp
  412128:	add    rsp,0x98
  41212f:	pop    rbx
  412130:	pop    rbp
  412131:	ret    
  412132:	lea    rdi,[rip+0x76e9]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  412139:	lea    rsi,[rip+0x6522]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  412140:	lea    rcx,[rip+0x759a]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  412147:	mov    edx,0x287
  41214c:	call   4040a0 <__assert_fail@plt>
  412151:	lea    rdi,[rip+0x76ca]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  412158:	lea    rsi,[rip+0x6503]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  41215f:	lea    rcx,[rip+0x757b]        # 4196e1 <flatcc_builder_padding_base@@Base+0x1301>
  412166:	mov    edx,0x28b
  41216b:	call   4040a0 <__assert_fail@plt>

0000000000412170 <flatcc_builder_create_string_str@@Base>:
  412170:	push   r14
  412172:	push   rbx
  412173:	push   rax
  412174:	mov    rbx,rsi
  412177:	mov    r14,rdi
  41217a:	mov    rdi,rsi
  41217d:	call   404070 <strlen@plt>
  412182:	mov    rdi,r14
  412185:	mov    rsi,rbx
  412188:	mov    rdx,rax
  41218b:	add    rsp,0x8
  41218f:	pop    rbx
  412190:	pop    r14
  412192:	jmp    412040 <flatcc_builder_create_string@@Base>
  412197:	nop    WORD PTR [rax+rax*1+0x0]

00000000004121a0 <flatcc_builder_create_string_strn@@Base>:
  4121a0:	push   r15
  4121a2:	push   r14
  4121a4:	push   rbx
  4121a5:	mov    rbx,rdx
  4121a8:	mov    r14,rsi
  4121ab:	mov    r15,rdi
  4121ae:	mov    rdi,rsi
  4121b1:	xor    esi,esi
  4121b3:	call   4040d0 <memchr@plt>
  4121b8:	mov    rcx,rax
  4121bb:	sub    rcx,r14
  4121be:	test   rax,rax
  4121c1:	cmovne rbx,rcx
  4121c5:	mov    rdi,r15
  4121c8:	mov    rsi,r14
  4121cb:	mov    rdx,rbx
  4121ce:	pop    rbx
  4121cf:	pop    r14
  4121d1:	pop    r15
  4121d3:	jmp    412040 <flatcc_builder_create_string@@Base>
  4121d8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004121e0 <flatcc_builder_end_string@@Base>:
  4121e0:	push   rbp
  4121e1:	push   rbx
  4121e2:	push   rax
  4121e3:	mov    rax,QWORD PTR [rdi+0x30]
  4121e7:	cmp    WORD PTR [rax+0xe],0x6
  4121ec:	jne    412284 <flatcc_builder_end_string@@Base+0xa4>
  4121f2:	mov    rbx,rdi
  4121f5:	mov    edx,DWORD PTR [rax+0x14]
  4121f8:	cmp    edx,DWORD PTR [rdi+0x20]
  4121fb:	jne    4122a3 <flatcc_builder_end_string@@Base+0xc3>
  412201:	mov    rsi,QWORD PTR [rbx+0x18]
  412205:	mov    rdi,rbx
  412208:	call   412040 <flatcc_builder_create_string@@Base>
  41220d:	mov    ebp,eax
  41220f:	test   eax,eax
  412211:	je     41227b <flatcc_builder_end_string@@Base+0x9b>
  412213:	mov    rdi,QWORD PTR [rbx+0x18]
  412217:	mov    edx,DWORD PTR [rbx+0x20]
  41221a:	xor    esi,esi
  41221c:	call   4040b0 <memset@plt>
  412221:	mov    rax,QWORD PTR [rbx+0x30]
  412225:	mov    ecx,DWORD PTR [rax+0x8]
  412228:	mov    DWORD PTR [rbx+0x20],ecx
  41222b:	mov    ecx,DWORD PTR [rax]
  41222d:	mov    DWORD PTR [rbx+0x28],ecx
  412230:	mov    edx,DWORD PTR [rax+0x4]
  412233:	mov    rsi,rcx
  412236:	add    rsi,QWORD PTR [rbx+0x68]
  41223a:	mov    QWORD PTR [rbx+0x18],rsi
  41223e:	mov    esi,DWORD PTR [rbx+0x70]
  412241:	sub    esi,ecx
  412243:	cmp    esi,edx
  412245:	cmova  esi,edx
  412248:	mov    DWORD PTR [rbx+0x24],esi
  41224b:	movzx  ecx,WORD PTR [rbx+0xea]
  412252:	cmp    WORD PTR [rbx+0xe8],cx
  412259:	jae    412262 <flatcc_builder_end_string@@Base+0x82>
  41225b:	mov    WORD PTR [rbx+0xe8],cx
  412262:	movzx  ecx,WORD PTR [rax+0xc]
  412266:	mov    WORD PTR [rbx+0xea],cx
  41226d:	add    rax,0xffffffffffffffdc
  412271:	mov    QWORD PTR [rbx+0x30],rax
  412275:	dec    DWORD PTR [rbx+0x104]
  41227b:	mov    eax,ebp
  41227d:	add    rsp,0x8
  412281:	pop    rbx
  412282:	pop    rbp
  412283:	ret    
  412284:	lea    rdi,[rip+0x6916]        # 418ba1 <flatcc_builder_padding_base@@Base+0x7c1>
  41228b:	lea    rsi,[rip+0x63d0]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  412292:	lea    rcx,[rip+0x71bb]        # 419454 <flatcc_builder_padding_base@@Base+0x1074>
  412299:	mov    edx,0x6c4
  41229e:	call   4040a0 <__assert_fail@plt>
  4122a3:	lea    rdi,[rip+0x71ed]        # 419497 <flatcc_builder_padding_base@@Base+0x10b7>
  4122aa:	lea    rsi,[rip+0x63b1]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4122b1:	lea    rcx,[rip+0x719c]        # 419454 <flatcc_builder_padding_base@@Base+0x1074>
  4122b8:	mov    edx,0x6c5
  4122bd:	call   4040a0 <__assert_fail@plt>
  4122c2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4122cc:	nop    DWORD PTR [rax+0x0]

00000000004122d0 <flatcc_builder_string_edit@@Base>:
  4122d0:	mov    rax,QWORD PTR [rdi+0x18]
  4122d4:	ret    
  4122d5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4122df:	nop

00000000004122e0 <flatcc_builder_string_len@@Base>:
  4122e0:	mov    rax,QWORD PTR [rdi+0x30]
  4122e4:	mov    eax,DWORD PTR [rax+0x14]
  4122e7:	ret    
  4122e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004122f0 <flatcc_builder_table_edit@@Base>:
  4122f0:	push   rax
  4122f1:	mov    rax,QWORD PTR [rdi+0x30]
  4122f5:	cmp    WORD PTR [rax+0xe],0x3
  4122fa:	jne    412308 <flatcc_builder_table_edit@@Base+0x18>
  4122fc:	mov    eax,DWORD PTR [rdi+0x20]
  4122ff:	add    rax,QWORD PTR [rdi+0x18]
  412303:	sub    rax,rsi
  412306:	pop    rcx
  412307:	ret    
  412308:	lea    rdi,[rip+0x6b82]        # 418e91 <flatcc_builder_padding_base@@Base+0xab1>
  41230f:	lea    rsi,[rip+0x634c]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  412316:	lea    rcx,[rip+0x722c]        # 419549 <flatcc_builder_padding_base@@Base+0x1169>
  41231d:	mov    edx,0x702
  412322:	call   4040a0 <__assert_fail@plt>
  412327:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412330 <flatcc_builder_table_add_copy@@Base>:
  412330:	push   r15
  412332:	push   r14
  412334:	push   rbx
  412335:	mov    r15,rcx
  412338:	mov    r14,rdx
  41233b:	mov    rdx,rcx
  41233e:	mov    ecx,r8d
  412341:	call   4112a0 <flatcc_builder_table_add@@Base>
  412346:	mov    rbx,rax
  412349:	test   rax,rax
  41234c:	je     41235c <flatcc_builder_table_add_copy@@Base+0x2c>
  41234e:	mov    rdi,rbx
  412351:	mov    rsi,r14
  412354:	mov    rdx,r15
  412357:	call   404100 <memcpy@plt>
  41235c:	mov    rax,rbx
  41235f:	pop    rbx
  412360:	pop    r14
  412362:	pop    r15
  412364:	ret    
  412365:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41236f:	nop

0000000000412370 <flatcc_builder_push_buffer_alignment@@Base>:
  412370:	movzx  eax,WORD PTR [rdi+0xe8]
  412377:	mov    WORD PTR [rdi+0xe8],0x4
  412380:	ret    
  412381:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41238b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000412390 <flatcc_builder_pop_buffer_alignment@@Base>:
  412390:	cmp    WORD PTR [rdi+0xe8],si
  412397:	jae    4123a0 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  412399:	mov    WORD PTR [rdi+0xe8],si
  4123a0:	ret    
  4123a1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4123ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004123b0 <flatcc_builder_get_buffer_alignment@@Base>:
  4123b0:	movzx  eax,WORD PTR [rdi+0xe8]
  4123b7:	ret    
  4123b8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004123c0 <flatcc_builder_set_vtable_clustering@@Base>:
  4123c0:	xor    eax,eax
  4123c2:	test   esi,esi
  4123c4:	sete   al
  4123c7:	mov    DWORD PTR [rdi+0x124],eax
  4123cd:	ret    
  4123ce:	xchg   ax,ax

00000000004123d0 <flatcc_builder_set_block_align@@Base>:
  4123d0:	mov    WORD PTR [rdi+0xec],si
  4123d7:	ret    
  4123d8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004123e0 <flatcc_builder_get_level@@Base>:
  4123e0:	mov    eax,DWORD PTR [rdi+0x104]
  4123e6:	ret    
  4123e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004123f0 <flatcc_builder_set_max_level@@Base>:
  4123f0:	mov    DWORD PTR [rdi+0x120],esi
  4123f6:	cmp    DWORD PTR [rdi+0x108],esi
  4123fc:	jge    412404 <flatcc_builder_set_max_level@@Base+0x14>
  4123fe:	mov    DWORD PTR [rdi+0x108],esi
  412404:	ret    
  412405:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41240f:	nop

0000000000412410 <flatcc_builder_get_buffer_size@@Base>:
  412410:	movsxd rax,DWORD PTR [rdi+0xf4]
  412417:	movsxd rcx,DWORD PTR [rdi+0xf0]
  41241e:	sub    rax,rcx
  412421:	ret    
  412422:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41242c:	nop    DWORD PTR [rax+0x0]

0000000000412430 <flatcc_builder_get_buffer_start@@Base>:
  412430:	mov    eax,DWORD PTR [rdi+0xf0]
  412436:	ret    
  412437:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412440 <flatcc_builder_get_buffer_end@@Base>:
  412440:	mov    eax,DWORD PTR [rdi+0xf4]
  412446:	ret    
  412447:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412450 <flatcc_builder_set_vtable_cache_limit@@Base>:
  412450:	mov    QWORD PTR [rdi+0x118],rsi
  412457:	ret    
  412458:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000412460 <flatcc_builder_set_identifier@@Base>:
  412460:	test   rsi,rsi
  412463:	jne    41246c <flatcc_builder_set_identifier@@Base+0xc>
  412465:	lea    rsi,[rip+0x5f74]        # 4183e0 <flatcc_builder_padding_base@@Base>
  41246c:	mov    eax,DWORD PTR [rsi]
  41246e:	mov    DWORD PTR [rdi+0x110],eax
  412474:	ret    
  412475:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41247f:	nop

0000000000412480 <flatcc_builder_get_type@@Base>:
  412480:	mov    rax,QWORD PTR [rdi+0x30]
  412484:	test   rax,rax
  412487:	je     41248e <flatcc_builder_get_type@@Base+0xe>
  412489:	movzx  eax,WORD PTR [rax+0xe]
  41248d:	ret    
  41248e:	xor    eax,eax
  412490:	ret    
  412491:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41249b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004124a0 <flatcc_builder_get_type_at@@Base>:
  4124a0:	xor    eax,eax
  4124a2:	test   esi,esi
  4124a4:	jle    4124c2 <flatcc_builder_get_type_at@@Base+0x22>
  4124a6:	mov    ecx,DWORD PTR [rdi+0x104]
  4124ac:	cmp    ecx,esi
  4124ae:	jl     4124c2 <flatcc_builder_get_type_at@@Base+0x22>
  4124b0:	mov    rax,QWORD PTR [rdi+0x30]
  4124b4:	sub    esi,ecx
  4124b6:	movsxd rcx,esi
  4124b9:	lea    rcx,[rcx+rcx*8]
  4124bd:	movzx  eax,WORD PTR [rax+rcx*4+0xe]
  4124c2:	ret    
  4124c3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4124cd:	nop    DWORD PTR [rax]

00000000004124d0 <flatcc_builder_get_direct_buffer@@Base>:
  4124d0:	cmp    DWORD PTR [rdi+0x128],0x0
  4124d7:	je     4124e9 <flatcc_builder_get_direct_buffer@@Base+0x19>
  4124d9:	mov    rax,QWORD PTR [rdi+0x130]
  4124e0:	cmp    rax,QWORD PTR [rdi+0x138]
  4124e7:	je     4124f8 <flatcc_builder_get_direct_buffer@@Base+0x28>
  4124e9:	test   rsi,rsi
  4124ec:	je     4124f5 <flatcc_builder_get_direct_buffer@@Base+0x25>
  4124ee:	mov    QWORD PTR [rsi],0x0
  4124f5:	xor    eax,eax
  4124f7:	ret    
  4124f8:	test   rsi,rsi
  4124fb:	je     412507 <flatcc_builder_get_direct_buffer@@Base+0x37>
  4124fd:	mov    rax,QWORD PTR [rdi+0x160]
  412504:	mov    QWORD PTR [rsi],rax
  412507:	mov    rax,QWORD PTR [rdi+0x140]
  41250e:	ret    
  41250f:	nop

0000000000412510 <flatcc_builder_copy_buffer@@Base>:
  412510:	push   rax
  412511:	cmp    DWORD PTR [rdi+0x128],0x0
  412518:	je     41252d <flatcc_builder_copy_buffer@@Base+0x1d>
  41251a:	add    rdi,0x130
  412521:	call   412d90 <flatcc_emitter_copy_buffer@@Base>
  412526:	test   rax,rax
  412529:	je     412531 <flatcc_builder_copy_buffer@@Base+0x21>
  41252b:	pop    rcx
  41252c:	ret    
  41252d:	xor    eax,eax
  41252f:	pop    rcx
  412530:	ret    
  412531:	lea    rdi,[rip+0x33b2]        # 4158ea <_IO_stdin_used@@Base+0x8ea>
  412538:	lea    rsi,[rip+0x6123]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  41253f:	lea    rcx,[rip+0x708e]        # 4195d4 <flatcc_builder_padding_base@@Base+0x11f4>
  412546:	mov    edx,0x786
  41254b:	call   4040a0 <__assert_fail@plt>

0000000000412550 <flatcc_builder_finalize_buffer@@Base>:
  412550:	push   r15
  412552:	push   r14
  412554:	push   rbx
  412555:	mov    rbx,rdi
  412558:	movsxd r14,DWORD PTR [rdi+0xf4]
  41255f:	movsxd rax,DWORD PTR [rdi+0xf0]
  412566:	sub    r14,rax
  412569:	test   rsi,rsi
  41256c:	je     412571 <flatcc_builder_finalize_buffer@@Base+0x21>
  41256e:	mov    QWORD PTR [rsi],r14
  412571:	mov    rdi,r14
  412574:	call   404110 <malloc@plt>
  412579:	test   rax,rax
  41257c:	je     4125ad <flatcc_builder_finalize_buffer@@Base+0x5d>
  41257e:	cmp    DWORD PTR [rbx+0x128],0x0
  412585:	je     4125cc <flatcc_builder_finalize_buffer@@Base+0x7c>
  412587:	mov    r15,rax
  41258a:	add    rbx,0x130
  412591:	mov    rdi,rbx
  412594:	mov    rsi,rax
  412597:	mov    rdx,r14
  41259a:	call   412d90 <flatcc_emitter_copy_buffer@@Base>
  41259f:	test   rax,rax
  4125a2:	je     4125eb <flatcc_builder_finalize_buffer@@Base+0x9b>
  4125a4:	mov    rax,r15
  4125a7:	pop    rbx
  4125a8:	pop    r14
  4125aa:	pop    r15
  4125ac:	ret    
  4125ad:	lea    rdi,[rip+0x726e]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  4125b4:	lea    rsi,[rip+0x60a7]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4125bb:	lea    rcx,[rip+0x7057]        # 419619 <flatcc_builder_padding_base@@Base+0x1239>
  4125c2:	mov    edx,0x798
  4125c7:	call   4040a0 <__assert_fail@plt>
  4125cc:	lea    rdi,[rip+0x724f]        # 419822 <flatcc_builder_padding_base@@Base+0x1442>
  4125d3:	lea    rsi,[rip+0x6088]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4125da:	lea    rcx,[rip+0x7038]        # 419619 <flatcc_builder_padding_base@@Base+0x1239>
  4125e1:	mov    edx,0x79c
  4125e6:	call   4040a0 <__assert_fail@plt>
  4125eb:	lea    rdi,[rip+0x32f8]        # 4158ea <_IO_stdin_used@@Base+0x8ea>
  4125f2:	lea    rsi,[rip+0x6069]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4125f9:	lea    rcx,[rip+0x6fd4]        # 4195d4 <flatcc_builder_padding_base@@Base+0x11f4>
  412600:	mov    edx,0x786
  412605:	call   4040a0 <__assert_fail@plt>
  41260a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412610 <flatcc_builder_finalize_aligned_buffer@@Base>:
  412610:	push   r15
  412612:	push   r14
  412614:	push   r12
  412616:	push   rbx
  412617:	push   rax
  412618:	mov    r14,rsi
  41261b:	mov    r15,rdi
  41261e:	movsxd rax,DWORD PTR [rdi+0xf4]
  412625:	movsxd rcx,DWORD PTR [rdi+0xf0]
  41262c:	sub    rax,rcx
  41262f:	test   rsi,rsi
  412632:	je     412637 <flatcc_builder_finalize_aligned_buffer@@Base+0x27>
  412634:	mov    QWORD PTR [r14],rax
  412637:	movzx  ecx,WORD PTR [r15+0xe8]
  41263f:	add    rax,rcx
  412642:	add    rax,0xffffffffffffffff
  412646:	mov    rbx,rcx
  412649:	neg    rbx
  41264c:	and    rbx,rax
  41264f:	cmp    rcx,0x8
  412653:	mov    QWORD PTR [rsp],0x0
  41265b:	mov    esi,0x8
  412660:	cmova  rsi,rcx
  412664:	mov    rdi,rsp
  412667:	mov    rdx,rbx
  41266a:	call   404150 <posix_memalign@plt>
  41266f:	mov    r12,QWORD PTR [rsp]
  412673:	test   eax,eax
  412675:	je     412686 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  412677:	test   r12,r12
  41267a:	je     412686 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  41267c:	mov    rdi,r12
  41267f:	call   404030 <free@plt>
  412684:	jmp    4126ce <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  412686:	test   r12,r12
  412689:	je     4126ce <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  41268b:	cmp    DWORD PTR [r15+0x128],0x0
  412693:	je     41267c <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
  412695:	add    r15,0x130
  41269c:	mov    rdi,r15
  41269f:	mov    rsi,r12
  4126a2:	mov    rdx,rbx
  4126a5:	call   412d90 <flatcc_emitter_copy_buffer@@Base>
  4126aa:	test   rax,rax
  4126ad:	jne    4126dd <flatcc_builder_finalize_aligned_buffer@@Base+0xcd>
  4126af:	lea    rdi,[rip+0x3234]        # 4158ea <_IO_stdin_used@@Base+0x8ea>
  4126b6:	lea    rsi,[rip+0x5fa5]        # 418662 <flatcc_builder_padding_base@@Base+0x282>
  4126bd:	lea    rcx,[rip+0x6f10]        # 4195d4 <flatcc_builder_padding_base@@Base+0x11f4>
  4126c4:	mov    edx,0x786
  4126c9:	call   4040a0 <__assert_fail@plt>
  4126ce:	test   r14,r14
  4126d1:	je     4126da <flatcc_builder_finalize_aligned_buffer@@Base+0xca>
  4126d3:	mov    QWORD PTR [r14],0x0
  4126da:	xor    r12d,r12d
  4126dd:	mov    rax,r12
  4126e0:	add    rsp,0x8
  4126e4:	pop    rbx
  4126e5:	pop    r12
  4126e7:	pop    r14
  4126e9:	pop    r15
  4126eb:	ret    
  4126ec:	nop    DWORD PTR [rax+0x0]

00000000004126f0 <flatcc_builder_aligned_alloc@@Base>:
  4126f0:	push   rax
  4126f1:	mov    rdx,rsi
  4126f4:	mov    QWORD PTR [rsp],0x0
  4126fc:	cmp    rdi,0x8
  412700:	mov    esi,0x8
  412705:	cmova  rsi,rdi
  412709:	mov    rdi,rsp
  41270c:	call   404150 <posix_memalign@plt>
  412711:	mov    ecx,eax
  412713:	mov    rax,QWORD PTR [rsp]
  412717:	test   ecx,ecx
  412719:	je     412732 <flatcc_builder_aligned_alloc@@Base+0x42>
  41271b:	test   rax,rax
  41271e:	je     412732 <flatcc_builder_aligned_alloc@@Base+0x42>
  412720:	mov    rdi,rax
  412723:	call   404030 <free@plt>
  412728:	mov    QWORD PTR [rsp],0x0
  412730:	xor    eax,eax
  412732:	pop    rcx
  412733:	ret    
  412734:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41273e:	xchg   ax,ax

0000000000412740 <flatcc_builder_aligned_free@@Base>:
  412740:	jmp    404030 <free@plt>
  412745:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41274f:	nop

0000000000412750 <flatcc_builder_get_emit_context@@Base>:
  412750:	mov    rax,QWORD PTR [rdi+0x38]
  412754:	ret    
  412755:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41275f:	nop

0000000000412760 <flatcc_emitter_recycle_page@@Base>:
  412760:	mov    rcx,QWORD PTR [rdi]
  412763:	mov    eax,0xffffffff
  412768:	cmp    rcx,rsi
  41276b:	je     4127c2 <flatcc_emitter_recycle_page@@Base+0x62>
  41276d:	cmp    QWORD PTR [rdi+0x8],rsi
  412771:	je     4127c2 <flatcc_emitter_recycle_page@@Base+0x62>
  412773:	mov    rax,QWORD PTR [rsi+0xb80]
  41277a:	mov    rdx,QWORD PTR [rsi+0xb88]
  412781:	mov    QWORD PTR [rax+0xb88],rdx
  412788:	mov    rdx,QWORD PTR [rsi+0xb88]
  41278f:	mov    QWORD PTR [rdx+0xb80],rax
  412796:	mov    rax,QWORD PTR [rcx+0xb88]
  41279d:	mov    QWORD PTR [rsi+0xb88],rax
  4127a4:	mov    QWORD PTR [rsi+0xb80],rcx
  4127ab:	mov    QWORD PTR [rax+0xb80],rsi
  4127b2:	mov    rax,QWORD PTR [rsi+0xb80]
  4127b9:	mov    QWORD PTR [rax+0xb88],rsi
  4127c0:	xor    eax,eax
  4127c2:	ret    
  4127c3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4127cd:	nop    DWORD PTR [rax]

00000000004127d0 <flatcc_emitter_reset@@Base>:
  4127d0:	push   r14
  4127d2:	push   rbx
  4127d3:	push   rax
  4127d4:	mov    rax,QWORD PTR [rdi]
  4127d7:	test   rax,rax
  4127da:	je     4128bb <flatcc_emitter_reset@@Base+0xeb>
  4127e0:	mov    rbx,rdi
  4127e3:	mov    QWORD PTR [rdi+0x8],rax
  4127e7:	lea    rcx,[rax+0x5c0]
  4127ee:	mov    QWORD PTR [rdi+0x10],rcx
  4127f2:	mov    QWORD PTR [rdi+0x20],rcx
  4127f6:	mov    QWORD PTR [rdi+0x18],0x5c0
  4127fe:	mov    QWORD PTR [rdi+0x28],0x5c0
  412806:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  412810:	mov    rcx,QWORD PTR [rdi+0x30]
  412814:	mov    rdx,QWORD PTR [rdi+0x40]
  412818:	test   rdx,rdx
  41281b:	jne    412824 <flatcc_emitter_reset@@Base+0x54>
  41281d:	mov    QWORD PTR [rbx+0x40],rcx
  412821:	mov    rdx,rcx
  412824:	lea    rdx,[rdx+rdx*2]
  412828:	shr    rdx,0x2
  41282c:	shr    rcx,0x2
  412830:	add    rcx,rdx
  412833:	mov    QWORD PTR [rbx+0x40],rcx
  412837:	mov    QWORD PTR [rbx+0x30],0x0
  41283f:	add    rcx,rcx
  412842:	cmp    rcx,QWORD PTR [rbx+0x38]
  412846:	jae    4128bb <flatcc_emitter_reset@@Base+0xeb>
  412848:	mov    rdi,QWORD PTR [rax+0xb80]
  41284f:	cmp    rdi,rax
  412852:	je     4128bb <flatcc_emitter_reset@@Base+0xeb>
  412854:	lea    rcx,[rax+0xb80]
  41285b:	mov    r14,0xfffffffffffff480
  412862:	nop    WORD PTR cs:[rax+rax*1+0x0]
  41286c:	nop    DWORD PTR [rax+0x0]
  412870:	mov    rdx,QWORD PTR [rdi+0xb80]
  412877:	mov    QWORD PTR [rcx],rdx
  41287a:	mov    rcx,QWORD PTR [rdi+0xb80]
  412881:	mov    QWORD PTR [rcx+0xb88],rax
  412888:	call   404030 <free@plt>
  41288d:	mov    rax,QWORD PTR [rbx+0x38]
  412891:	add    rax,r14
  412894:	mov    QWORD PTR [rbx+0x38],rax
  412898:	mov    rcx,QWORD PTR [rbx+0x40]
  41289c:	add    rcx,rcx
  41289f:	cmp    rcx,rax
  4128a2:	jae    4128bb <flatcc_emitter_reset@@Base+0xeb>
  4128a4:	mov    rax,QWORD PTR [rbx+0x8]
  4128a8:	lea    rcx,[rax+0xb80]
  4128af:	mov    rdi,QWORD PTR [rax+0xb80]
  4128b6:	cmp    rdi,QWORD PTR [rbx]
  4128b9:	jne    412870 <flatcc_emitter_reset@@Base+0xa0>
  4128bb:	add    rsp,0x8
  4128bf:	pop    rbx
  4128c0:	pop    r14
  4128c2:	ret    
  4128c3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4128cd:	nop    DWORD PTR [rax]

00000000004128d0 <flatcc_emitter_clear@@Base>:
  4128d0:	push   r14
  4128d2:	push   rbx
  4128d3:	push   rax
  4128d4:	mov    rbx,QWORD PTR [rdi]
  4128d7:	test   rbx,rbx
  4128da:	je     41293c <flatcc_emitter_clear@@Base+0x6c>
  4128dc:	mov    r14,rdi
  4128df:	mov    rax,QWORD PTR [rbx+0xb88]
  4128e6:	mov    QWORD PTR [rax+0xb80],0x0
  4128f1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4128fb:	nop    DWORD PTR [rax+rax*1+0x0]
  412900:	mov    rax,QWORD PTR [rbx+0xb80]
  412907:	test   rax,rax
  41290a:	je     41291d <flatcc_emitter_clear@@Base+0x4d>
  41290c:	mov    rbx,rax
  41290f:	mov    rdi,QWORD PTR [rax+0xb88]
  412916:	call   404030 <free@plt>
  41291b:	jmp    412900 <flatcc_emitter_clear@@Base+0x30>
  41291d:	mov    rdi,rbx
  412920:	call   404030 <free@plt>
  412925:	vxorps xmm0,xmm0,xmm0
  412929:	vmovups YMMWORD PTR [r14+0x20],ymm0
  41292f:	vmovups YMMWORD PTR [r14],ymm0
  412934:	mov    QWORD PTR [r14+0x40],0x0
  41293c:	add    rsp,0x8
  412940:	pop    rbx
  412941:	pop    r14
  412943:	vzeroupper 
  412946:	ret    
  412947:	nop    WORD PTR [rax+rax*1+0x0]

0000000000412950 <flatcc_emitter@@Base>:
  412950:	push   rbp
  412951:	push   r15
  412953:	push   r14
  412955:	push   r13
  412957:	push   r12
  412959:	push   rbx
  41295a:	push   rax
  41295b:	mov    r14d,edx
  41295e:	mov    r12,rsi
  412961:	mov    rbp,rdi
  412964:	add    QWORD PTR [rdi+0x30],r8
  412968:	test   ecx,ecx
  41296a:	js     412ae5 <flatcc_emitter@@Base+0x195>
  412970:	mov    rdx,QWORD PTR [rbp+0x28]
  412974:	cmp    rdx,r8
  412977:	jae    412c98 <flatcc_emitter@@Base+0x348>
  41297d:	xor    eax,eax
  41297f:	test   r14d,r14d
  412982:	je     412d77 <flatcc_emitter@@Base+0x427>
  412988:	mov    r15,QWORD PTR [r12+0x8]
  41298d:	test   r15,r15
  412990:	je     412ad0 <flatcc_emitter@@Base+0x180>
  412996:	mov    r13,QWORD PTR [r12]
  41299a:	jmp    4129c9 <flatcc_emitter@@Base+0x79>
  41299c:	mov    rbx,r15
  41299f:	mov    rdi,QWORD PTR [rbp+0x20]
  4129a3:	mov    rsi,r13
  4129a6:	mov    rdx,rbx
  4129a9:	call   404100 <memcpy@plt>
  4129ae:	add    QWORD PTR [rbp+0x20],rbx
  4129b2:	add    r13,rbx
  4129b5:	mov    rdx,QWORD PTR [rbp+0x28]
  4129b9:	sub    rdx,rbx
  4129bc:	mov    QWORD PTR [rbp+0x28],rdx
  4129c0:	sub    r15,rbx
  4129c3:	je     412ad0 <flatcc_emitter@@Base+0x180>
  4129c9:	mov    rbx,r15
  4129cc:	cmp    r15,rdx
  4129cf:	jbe    41299f <flatcc_emitter@@Base+0x4f>
  4129d1:	mov    rbx,rdx
  4129d4:	test   rbx,rbx
  4129d7:	je     412a41 <flatcc_emitter@@Base+0xf1>
  4129d9:	jmp    41299f <flatcc_emitter@@Base+0x4f>
  4129db:	nop    DWORD PTR [rax+rax*1+0x0]
  4129e0:	mov    QWORD PTR [rax+0xb88],rbx
  4129e7:	mov    rcx,QWORD PTR [rbp+0x0]
  4129eb:	mov    QWORD PTR [rax+0xb80],rcx
  4129f2:	mov    QWORD PTR [rcx+0xb88],rax
  4129f9:	mov    QWORD PTR [rbx+0xb80],rax
  412a00:	mov    QWORD PTR [rbp+0x8],rax
  412a04:	mov    QWORD PTR [rbp+0x20],rax
  412a08:	mov    QWORD PTR [rbp+0x28],0xb80
  412a10:	mov    rcx,QWORD PTR [rax+0xb88]
  412a17:	mov    ecx,DWORD PTR [rcx+0xb90]
  412a1d:	mov    edx,0xb80
  412a22:	add    ecx,edx
  412a24:	mov    DWORD PTR [rax+0xb90],ecx
  412a2a:	mov    ebx,0xb80
  412a2f:	cmp    r15,rbx
  412a32:	jbe    41299c <flatcc_emitter@@Base+0x4c>
  412a38:	test   rbx,rbx
  412a3b:	jne    41299f <flatcc_emitter@@Base+0x4f>
  412a41:	mov    rbx,QWORD PTR [rbp+0x8]
  412a45:	test   rbx,rbx
  412a48:	je     412a57 <flatcc_emitter@@Base+0x107>
  412a4a:	mov    rax,QWORD PTR [rbx+0xb80]
  412a51:	cmp    rax,QWORD PTR [rbp+0x0]
  412a55:	jne    412a00 <flatcc_emitter@@Base+0xb0>
  412a57:	mov    edi,0xb98
  412a5c:	call   404110 <malloc@plt>
  412a61:	test   rax,rax
  412a64:	je     412caa <flatcc_emitter@@Base+0x35a>
  412a6a:	add    QWORD PTR [rbp+0x38],0xb80
  412a72:	test   rbx,rbx
  412a75:	jne    4129e0 <flatcc_emitter@@Base+0x90>
  412a7b:	mov    QWORD PTR [rbp+0x0],rax
  412a7f:	mov    QWORD PTR [rbp+0x8],rax
  412a83:	mov    QWORD PTR [rax+0xb80],rax
  412a8a:	mov    QWORD PTR [rax+0xb88],rax
  412a91:	mov    rcx,rax
  412a94:	add    rcx,0x5c0
  412a9b:	mov    QWORD PTR [rbp+0x10],rcx
  412a9f:	mov    QWORD PTR [rbp+0x20],rcx
  412aa3:	mov    QWORD PTR [rbp+0x18],0x5c0
  412aab:	mov    QWORD PTR [rbp+0x28],0x5c0
  412ab3:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  412abd:	mov    ebx,0x5c0
  412ac2:	cmp    r15,rbx
  412ac5:	ja     412a38 <flatcc_emitter@@Base+0xe8>
  412acb:	jmp    41299c <flatcc_emitter@@Base+0x4c>
  412ad0:	dec    r14d
  412ad3:	add    r12,0x10
  412ad7:	test   r14d,r14d
  412ada:	jne    412988 <flatcc_emitter@@Base+0x38>
  412ae0:	jmp    412d75 <flatcc_emitter@@Base+0x425>
  412ae5:	lea    rsi,[rbp+0x18]
  412ae9:	mov    rdx,QWORD PTR [rbp+0x18]
  412aed:	cmp    rdx,r8
  412af0:	jae    412cb4 <flatcc_emitter@@Base+0x364>
  412af6:	xor    eax,eax
  412af8:	test   r14d,r14d
  412afb:	je     412d77 <flatcc_emitter@@Base+0x427>
  412b01:	mov    QWORD PTR [rsp],rsi
  412b05:	movsxd rax,r14d
  412b08:	shl    rax,0x4
  412b0c:	add    r12,rax
  412b0f:	mov    edx,0xfffff480
  412b14:	mov    r15,QWORD PTR [r12-0x8]
  412b19:	add    r12,0xfffffffffffffff0
  412b1d:	test   r15,r15
  412b20:	je     412c8a <flatcc_emitter@@Base+0x33a>
  412b26:	mov    r13,QWORD PTR [r12]
  412b2a:	add    r13,r15
  412b2d:	jmp    412b61 <flatcc_emitter@@Base+0x211>
  412b2f:	nop
  412b30:	mov    rbx,r15
  412b33:	mov    rdi,QWORD PTR [rbp+0x10]
  412b37:	sub    rdi,rbx
  412b3a:	mov    QWORD PTR [rbp+0x10],rdi
  412b3e:	sub    rax,rbx
  412b41:	mov    QWORD PTR [rbp+0x18],rax
  412b45:	sub    r13,rbx
  412b48:	mov    rsi,r13
  412b4b:	mov    rdx,rbx
  412b4e:	call   404100 <memcpy@plt>
  412b53:	mov    edx,0xfffff480
  412b58:	sub    r15,rbx
  412b5b:	je     412c8a <flatcc_emitter@@Base+0x33a>
  412b61:	mov    rax,QWORD PTR [rsp]
  412b65:	mov    rax,QWORD PTR [rax]
  412b68:	cmp    r15,rax
  412b6b:	ja     412bb8 <flatcc_emitter@@Base+0x268>
  412b6d:	jmp    412b30 <flatcc_emitter@@Base+0x1e0>
  412b6f:	nop
  412b70:	mov    ecx,DWORD PTR [rbx+0xb90]
  412b76:	add    ecx,edx
  412b78:	mov    DWORD PTR [rax+0xb90],ecx
  412b7e:	mov    QWORD PTR [rbp+0x0],rax
  412b82:	lea    rcx,[rax+0xb80]
  412b89:	mov    QWORD PTR [rbp+0x10],rcx
  412b8d:	mov    QWORD PTR [rbp+0x18],0xb80
  412b95:	mov    rcx,QWORD PTR [rax+0xb80]
  412b9c:	mov    ecx,DWORD PTR [rcx+0xb90]
  412ba2:	add    ecx,edx
  412ba4:	mov    DWORD PTR [rax+0xb90],ecx
  412baa:	mov    eax,0xb80
  412baf:	cmp    r15,rax
  412bb2:	jbe    412b30 <flatcc_emitter@@Base+0x1e0>
  412bb8:	mov    rbx,rax
  412bbb:	test   rax,rax
  412bbe:	jne    412b33 <flatcc_emitter@@Base+0x1e3>
  412bc4:	mov    rbx,QWORD PTR [rbp+0x0]
  412bc8:	test   rbx,rbx
  412bcb:	je     412bda <flatcc_emitter@@Base+0x28a>
  412bcd:	mov    rax,QWORD PTR [rbx+0xb88]
  412bd4:	cmp    rax,QWORD PTR [rbp+0x8]
  412bd8:	jne    412b70 <flatcc_emitter@@Base+0x220>
  412bda:	mov    edi,0xb98
  412bdf:	call   404110 <malloc@plt>
  412be4:	test   rax,rax
  412be7:	je     412caa <flatcc_emitter@@Base+0x35a>
  412bed:	add    QWORD PTR [rbp+0x38],0xb80
  412bf5:	test   rbx,rbx
  412bf8:	je     412c30 <flatcc_emitter@@Base+0x2e0>
  412bfa:	mov    rcx,QWORD PTR [rbp+0x8]
  412bfe:	mov    QWORD PTR [rax+0xb88],rcx
  412c05:	mov    QWORD PTR [rax+0xb80],rbx
  412c0c:	mov    QWORD PTR [rbx+0xb88],rax
  412c13:	mov    QWORD PTR [rcx+0xb80],rax
  412c1a:	mov    QWORD PTR [rbp+0x0],rax
  412c1e:	mov    edx,0xfffff480
  412c23:	jmp    412b82 <flatcc_emitter@@Base+0x232>
  412c28:	nop    DWORD PTR [rax+rax*1+0x0]
  412c30:	mov    QWORD PTR [rbp+0x0],rax
  412c34:	mov    QWORD PTR [rbp+0x8],rax
  412c38:	mov    QWORD PTR [rax+0xb80],rax
  412c3f:	mov    QWORD PTR [rax+0xb88],rax
  412c46:	mov    rcx,rax
  412c49:	add    rcx,0x5c0
  412c50:	mov    QWORD PTR [rbp+0x10],rcx
  412c54:	mov    QWORD PTR [rbp+0x20],rcx
  412c58:	mov    QWORD PTR [rbp+0x18],0x5c0
  412c60:	mov    QWORD PTR [rbp+0x28],0x5c0
  412c68:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  412c72:	mov    eax,0x5c0
  412c77:	mov    edx,0xfffff480
  412c7c:	cmp    r15,rax
  412c7f:	ja     412bb8 <flatcc_emitter@@Base+0x268>
  412c85:	jmp    412b30 <flatcc_emitter@@Base+0x1e0>
  412c8a:	dec    r14d
  412c8d:	jne    412b14 <flatcc_emitter@@Base+0x1c4>
  412c93:	jmp    412d75 <flatcc_emitter@@Base+0x425>
  412c98:	lea    rsi,[rbp+0x28]
  412c9c:	mov    rbx,QWORD PTR [rbp+0x20]
  412ca0:	lea    rcx,[rbx+r8*1]
  412ca4:	mov    QWORD PTR [rbp+0x20],rcx
  412ca8:	jmp    412cbf <flatcc_emitter@@Base+0x36f>
  412caa:	mov    eax,0xffffffff
  412caf:	jmp    412d77 <flatcc_emitter@@Base+0x427>
  412cb4:	mov    rbx,QWORD PTR [rbp+0x10]
  412cb8:	sub    rbx,r8
  412cbb:	mov    QWORD PTR [rbp+0x10],rbx
  412cbf:	sub    rdx,r8
  412cc2:	mov    QWORD PTR [rsi],rdx
  412cc5:	xor    eax,eax
  412cc7:	test   r14d,r14d
  412cca:	je     412d77 <flatcc_emitter@@Base+0x427>
  412cd0:	lea    r15d,[r14-0x1]
  412cd4:	mov    r13d,r14d
  412cd7:	and    r13d,0x3
  412cdb:	je     412d04 <flatcc_emitter@@Base+0x3b4>
  412cdd:	xor    ebp,ebp
  412cdf:	nop
  412ce0:	mov    rsi,QWORD PTR [r12]
  412ce4:	mov    rdx,QWORD PTR [r12+0x8]
  412ce9:	mov    rdi,rbx
  412cec:	call   404100 <memcpy@plt>
  412cf1:	add    rbx,QWORD PTR [r12+0x8]
  412cf6:	add    r12,0x10
  412cfa:	inc    ebp
  412cfc:	cmp    r13d,ebp
  412cff:	jne    412ce0 <flatcc_emitter@@Base+0x390>
  412d01:	sub    r14d,ebp
  412d04:	cmp    r15d,0x3
  412d08:	jb     412d75 <flatcc_emitter@@Base+0x425>
  412d0a:	nop    WORD PTR [rax+rax*1+0x0]
  412d10:	mov    rsi,QWORD PTR [r12]
  412d14:	mov    rdx,QWORD PTR [r12+0x8]
  412d19:	mov    rdi,rbx
  412d1c:	call   404100 <memcpy@plt>
  412d21:	add    rbx,QWORD PTR [r12+0x8]
  412d26:	mov    rsi,QWORD PTR [r12+0x10]
  412d2b:	mov    rdx,QWORD PTR [r12+0x18]
  412d30:	mov    rdi,rbx
  412d33:	call   404100 <memcpy@plt>
  412d38:	add    rbx,QWORD PTR [r12+0x18]
  412d3d:	mov    rsi,QWORD PTR [r12+0x20]
  412d42:	mov    rdx,QWORD PTR [r12+0x28]
  412d47:	mov    rdi,rbx
  412d4a:	call   404100 <memcpy@plt>
  412d4f:	add    rbx,QWORD PTR [r12+0x28]
  412d54:	mov    rsi,QWORD PTR [r12+0x30]
  412d59:	mov    rdx,QWORD PTR [r12+0x38]
  412d5e:	mov    rdi,rbx
  412d61:	call   404100 <memcpy@plt>
  412d66:	add    rbx,QWORD PTR [r12+0x38]
  412d6b:	add    r12,0x40
  412d6f:	add    r14d,0xfffffffc
  412d73:	jne    412d10 <flatcc_emitter@@Base+0x3c0>
  412d75:	xor    eax,eax
  412d77:	add    rsp,0x8
  412d7b:	pop    rbx
  412d7c:	pop    r12
  412d7e:	pop    r13
  412d80:	pop    r14
  412d82:	pop    r15
  412d84:	pop    rbp
  412d85:	ret    
  412d86:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000412d90 <flatcc_emitter_copy_buffer@@Base>:
  412d90:	push   r15
  412d92:	push   r14
  412d94:	push   r13
  412d96:	push   r12
  412d98:	push   rbx
  412d99:	mov    rax,rdx
  412d9c:	mov    rdx,QWORD PTR [rdi+0x30]
  412da0:	cmp    rdx,rax
  412da3:	ja     412e3b <flatcc_emitter_copy_buffer@@Base+0xab>
  412da9:	mov    r14,rdi
  412dac:	mov    rax,QWORD PTR [rdi]
  412daf:	test   rax,rax
  412db2:	je     412e3b <flatcc_emitter_copy_buffer@@Base+0xab>
  412db8:	mov    r12,rsi
  412dbb:	cmp    rax,QWORD PTR [r14+0x8]
  412dbf:	je     412e4b <flatcc_emitter_copy_buffer@@Base+0xbb>
  412dc5:	mov    r15d,0xb80
  412dcb:	mov    r13d,0xb80
  412dd1:	sub    r13,QWORD PTR [r14+0x18]
  412dd5:	mov    rsi,QWORD PTR [r14+0x10]
  412dd9:	mov    rdi,r12
  412ddc:	mov    rdx,r13
  412ddf:	call   404100 <memcpy@plt>
  412de4:	add    r13,r12
  412de7:	mov    rax,QWORD PTR [r14]
  412dea:	mov    rbx,QWORD PTR [rax+0xb80]
  412df1:	cmp    rbx,QWORD PTR [r14+0x8]
  412df5:	je     412e24 <flatcc_emitter_copy_buffer@@Base+0x94>
  412df7:	nop    WORD PTR [rax+rax*1+0x0]
  412e00:	mov    edx,0xb80
  412e05:	mov    rdi,r13
  412e08:	mov    rsi,rbx
  412e0b:	call   404100 <memcpy@plt>
  412e10:	add    r13,0xb80
  412e17:	mov    rbx,QWORD PTR [rbx+0xb80]
  412e1e:	cmp    rbx,QWORD PTR [r14+0x8]
  412e22:	jne    412e00 <flatcc_emitter_copy_buffer@@Base+0x70>
  412e24:	sub    r15,QWORD PTR [r14+0x28]
  412e28:	mov    rdi,r13
  412e2b:	mov    rsi,rbx
  412e2e:	mov    rdx,r15
  412e31:	call   404100 <memcpy@plt>
  412e36:	mov    r12,r13
  412e39:	jmp    412e3e <flatcc_emitter_copy_buffer@@Base+0xae>
  412e3b:	xor    r12d,r12d
  412e3e:	mov    rax,r12
  412e41:	pop    rbx
  412e42:	pop    r12
  412e44:	pop    r13
  412e46:	pop    r14
  412e48:	pop    r15
  412e4a:	ret    
  412e4b:	mov    rsi,QWORD PTR [r14+0x10]
  412e4f:	mov    rdi,r12
  412e52:	call   404100 <memcpy@plt>
  412e57:	jmp    412e3e <flatcc_emitter_copy_buffer@@Base+0xae>
  412e59:	nop    DWORD PTR [rax+0x0]

0000000000412e60 <flatcc_verify_error_string@@Base>:
  412e60:	cmp    edi,0x24
  412e63:	ja     412e74 <flatcc_verify_error_string@@Base+0x14>
  412e65:	movsxd rax,edi
  412e68:	lea    rcx,[rip+0xae71]        # 41dce0 <flatcc_builder_padding_base@@Base+0x5900>
  412e6f:	mov    rax,QWORD PTR [rcx+rax*8]
  412e73:	ret    
  412e74:	lea    rax,[rip+0x6e65]        # 419ce0 <flatcc_builder_padding_base@@Base+0x1900>
  412e7b:	ret    
  412e7c:	nop    DWORD PTR [rax+0x0]

0000000000412e80 <flatcc_verify_field@@Base>:
  412e80:	lea    esi,[rsi+rsi*1]
  412e83:	add    esi,0x4
  412e86:	xor    eax,eax
  412e88:	cmp    si,WORD PTR [rdi+0x1e]
  412e8c:	jae    412ed1 <flatcc_verify_field@@Base+0x51>
  412e8e:	mov    r8,QWORD PTR [rdi+0x10]
  412e92:	movzx  esi,si
  412e95:	movzx  esi,WORD PTR [r8+rsi*1]
  412e9a:	test   esi,esi
  412e9c:	je     412ed1 <flatcc_verify_field@@Base+0x51>
  412e9e:	add    edx,esi
  412ea0:	movzx  r8d,WORD PTR [rdi+0x1c]
  412ea5:	mov    eax,0xd
  412eaa:	cmp    edx,r8d
  412ead:	ja     412ed1 <flatcc_verify_field@@Base+0x51>
  412eaf:	add    esi,DWORD PTR [rdi]
  412eb1:	mov    edx,DWORD PTR [rdi+0x18]
  412eb4:	add    edx,esi
  412eb6:	movzx  ecx,cx
  412eb9:	dec    ecx
  412ebb:	mov    eax,0x0
  412ec0:	test   edx,ecx
  412ec2:	je     412ed1 <flatcc_verify_field@@Base+0x51>
  412ec4:	add    esi,DWORD PTR [rdi+0x18]
  412ec7:	and    esi,ecx
  412ec9:	mov    eax,0xc
  412ece:	cmove  eax,esi
  412ed1:	ret    
  412ed2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  412edc:	nop    DWORD PTR [rax+0x0]

0000000000412ee0 <flatcc_verify_string_field@@Base>:
  412ee0:	lea    eax,[rsi+rsi*1]
  412ee3:	add    eax,0x4
  412ee6:	cmp    ax,WORD PTR [rdi+0x1e]
  412eea:	jae    412f1a <flatcc_verify_string_field@@Base+0x3a>
  412eec:	mov    rcx,QWORD PTR [rdi+0x10]
  412ef0:	movzx  eax,ax
  412ef3:	movzx  esi,WORD PTR [rcx+rax*1]
  412ef7:	test   esi,esi
  412ef9:	je     412f1a <flatcc_verify_string_field@@Base+0x3a>
  412efb:	lea    ecx,[rsi+0x4]
  412efe:	movzx  edx,WORD PTR [rdi+0x1c]
  412f02:	mov    eax,0xd
  412f07:	cmp    ecx,edx
  412f09:	ja     412f19 <flatcc_verify_string_field@@Base+0x39>
  412f0b:	add    esi,DWORD PTR [rdi+0x18]
  412f0e:	mov    eax,0xc
  412f13:	test   sil,0x3
  412f17:	je     412f25 <flatcc_verify_string_field@@Base+0x45>
  412f19:	ret    
  412f1a:	xor    eax,eax
  412f1c:	test   edx,edx
  412f1e:	setne  al
  412f21:	shl    eax,0x2
  412f24:	ret    
  412f25:	test   esi,esi
  412f27:	je     412f7f <flatcc_verify_string_field@@Base+0x9f>
  412f29:	mov    rcx,QWORD PTR [rdi]
  412f2c:	mov    eax,esi
  412f2e:	mov    edx,DWORD PTR [rcx+rax*1]
  412f31:	add    edx,esi
  412f33:	mov    eax,0x11
  412f38:	cmp    edx,esi
  412f3a:	jbe    412f19 <flatcc_verify_string_field@@Base+0x39>
  412f3c:	mov    r8d,DWORD PTR [rdi+0x8]
  412f40:	mov    edi,edx
  412f42:	lea    rsi,[rdi+0x4]
  412f46:	cmp    rsi,r8
  412f49:	ja     412f19 <flatcc_verify_string_field@@Base+0x39>
  412f4b:	mov    esi,edi
  412f4d:	and    esi,0x3
  412f50:	test   rsi,rsi
  412f53:	jne    412f19 <flatcc_verify_string_field@@Base+0x39>
  412f55:	mov    edi,DWORD PTR [rcx+rdi*1]
  412f58:	add    edx,0x4
  412f5b:	sub    r8d,edx
  412f5e:	lea    esi,[rdi+0x1]
  412f61:	mov    eax,0x8
  412f66:	cmp    r8d,esi
  412f69:	jb     412f19 <flatcc_verify_string_field@@Base+0x39>
  412f6b:	mov    eax,edx
  412f6d:	add    rcx,rax
  412f70:	xor    edx,edx
  412f72:	cmp    BYTE PTR [rdi+rcx*1],0x0
  412f76:	mov    eax,0x7
  412f7b:	cmove  eax,edx
  412f7e:	ret    
  412f7f:	xor    eax,eax
  412f81:	ret    
  412f82:	nop    WORD PTR cs:[rax+rax*1+0x0]
  412f8c:	nop    DWORD PTR [rax+0x0]

0000000000412f90 <flatcc_verify_vector_field@@Base>:
  412f90:	push   rbx
  412f91:	lea    eax,[rsi+rsi*1]
  412f94:	add    eax,0x4
  412f97:	cmp    ax,WORD PTR [rdi+0x1e]
  412f9b:	jae    412fce <flatcc_verify_vector_field@@Base+0x3e>
  412f9d:	mov    rsi,QWORD PTR [rdi+0x10]
  412fa1:	movzx  eax,ax
  412fa4:	movzx  esi,WORD PTR [rsi+rax*1]
  412fa8:	test   esi,esi
  412faa:	je     412fce <flatcc_verify_vector_field@@Base+0x3e>
  412fac:	lea    r10d,[rsi+0x4]
  412fb0:	movzx  edx,WORD PTR [rdi+0x1c]
  412fb4:	mov    eax,0xd
  412fb9:	cmp    r10d,edx
  412fbc:	ja     412fcc <flatcc_verify_vector_field@@Base+0x3c>
  412fbe:	add    esi,DWORD PTR [rdi+0x18]
  412fc1:	mov    eax,0xc
  412fc6:	test   sil,0x3
  412fca:	je     412fda <flatcc_verify_vector_field@@Base+0x4a>
  412fcc:	pop    rbx
  412fcd:	ret    
  412fce:	xor    eax,eax
  412fd0:	test   edx,edx
  412fd2:	setne  al
  412fd5:	shl    eax,0x2
  412fd8:	pop    rbx
  412fd9:	ret    
  412fda:	test   esi,esi
  412fdc:	je     413052 <flatcc_verify_vector_field@@Base+0xc2>
  412fde:	mov    r10,QWORD PTR [rdi]
  412fe1:	mov    eax,esi
  412fe3:	mov    r11d,DWORD PTR [r10+rax*1]
  412fe7:	add    r11d,esi
  412fea:	cmp    r8w,0x4
  412fef:	mov    edx,0x4
  412ff4:	cmova  edx,r8d
  412ff8:	mov    eax,0x10
  412ffd:	cmp    r11d,esi
  413000:	jbe    412fcc <flatcc_verify_vector_field@@Base+0x3c>
  413002:	mov    r8d,DWORD PTR [rdi+0x8]
  413006:	mov    edi,r11d
  413009:	lea    rsi,[rdi+0x4]
  41300d:	cmp    rsi,r8
  413010:	ja     412fcc <flatcc_verify_vector_field@@Base+0x3c>
  413012:	movzx  edx,dx
  413015:	movabs rbx,0x1ffffffff
  41301f:	add    rbx,rdx
  413022:	or     rbx,0x3
  413026:	test   rsi,rbx
  413029:	jne    412fcc <flatcc_verify_vector_field@@Base+0x3c>
  41302b:	mov    edx,DWORD PTR [r10+rdi*1]
  41302f:	mov    eax,0x19
  413034:	cmp    edx,r9d
  413037:	ja     412fcc <flatcc_verify_vector_field@@Base+0x3c>
  413039:	sub    r8d,r11d
  41303c:	add    r8d,0xfffffffc
  413040:	imul   edx,ecx
  413043:	xor    ecx,ecx
  413045:	cmp    r8d,edx
  413048:	mov    eax,0x1a
  41304d:	cmovae eax,ecx
  413050:	pop    rbx
  413051:	ret    
  413052:	xor    eax,eax
  413054:	pop    rbx
  413055:	ret    
  413056:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000413060 <flatcc_verify_string_vector_field@@Base>:
  413060:	push   r14
  413062:	push   rbx
  413063:	lea    eax,[rsi+rsi*1]
  413066:	add    eax,0x4
  413069:	cmp    ax,WORD PTR [rdi+0x1e]
  41306d:	jae    413199 <flatcc_verify_string_vector_field@@Base+0x139>
  413073:	mov    rcx,QWORD PTR [rdi+0x10]
  413077:	movzx  eax,ax
  41307a:	movzx  esi,WORD PTR [rcx+rax*1]
  41307e:	test   esi,esi
  413080:	je     413199 <flatcc_verify_string_vector_field@@Base+0x139>
  413086:	lea    ecx,[rsi+0x4]
  413089:	movzx  edx,WORD PTR [rdi+0x1c]
  41308d:	mov    eax,0xd
  413092:	cmp    ecx,edx
  413094:	ja     4131a3 <flatcc_verify_string_vector_field@@Base+0x143>
  41309a:	mov    edx,DWORD PTR [rdi+0x18]
  41309d:	lea    ebx,[rdx+rsi*1]
  4130a0:	mov    eax,0xc
  4130a5:	test   bl,0x3
  4130a8:	jne    4131a3 <flatcc_verify_string_vector_field@@Base+0x143>
  4130ae:	test   ebx,ebx
  4130b0:	je     413195 <flatcc_verify_string_vector_field@@Base+0x135>
  4130b6:	mov    r10,QWORD PTR [rdi]
  4130b9:	mov    eax,ebx
  4130bb:	mov    r14d,DWORD PTR [r10+rax*1]
  4130bf:	lea    ecx,[r14+rbx*1]
  4130c3:	mov    eax,0x10
  4130c8:	cmp    ecx,ebx
  4130ca:	jbe    4131a3 <flatcc_verify_string_vector_field@@Base+0x143>
  4130d0:	mov    r8d,DWORD PTR [rdi+0x8]
  4130d4:	mov    edi,ecx
  4130d6:	lea    rbx,[rdi+0x4]
  4130da:	cmp    rbx,r8
  4130dd:	ja     4131a3 <flatcc_verify_string_vector_field@@Base+0x143>
  4130e3:	and    ebx,0x3
  4130e6:	test   rbx,rbx
  4130e9:	jne    4131a3 <flatcc_verify_string_vector_field@@Base+0x143>
  4130ef:	mov    r9d,DWORD PTR [r10+rdi*1]
  4130f3:	mov    eax,0x19
  4130f8:	cmp    r9d,0x3fffffff
  4130ff:	ja     4131a3 <flatcc_verify_string_vector_field@@Base+0x143>
  413105:	mov    edi,r8d
  413108:	sub    edi,ecx
  41310a:	add    edi,0xfffffffc
  41310d:	lea    ecx,[r9*4+0x0]
  413115:	mov    eax,0x1a
  41311a:	cmp    edi,ecx
  41311c:	jb     4131a3 <flatcc_verify_string_vector_field@@Base+0x143>
  413122:	test   r9d,r9d
  413125:	je     413195 <flatcc_verify_string_vector_field@@Base+0x135>
  413127:	lea    eax,[r14+rdx*1]
  41312b:	lea    edi,[rsi+rax*1]
  41312e:	add    edi,0x4
  413131:	mov    r11d,r8d
  413134:	sub    r11d,r14d
  413137:	sub    r11d,edx
  41313a:	sub    r11d,esi
  41313d:	add    r11d,0xfffffff8
  413141:	mov    eax,edi
  413143:	mov    ecx,DWORD PTR [r10+rax*1]
  413147:	lea    edx,[rdi+rcx*1]
  41314a:	mov    eax,0x11
  41314f:	cmp    edx,edi
  413151:	jbe    4131a3 <flatcc_verify_string_vector_field@@Base+0x143>
  413153:	mov    edx,edx
  413155:	lea    rsi,[rdx+0x4]
  413159:	cmp    rsi,r8
  41315c:	ja     4131a3 <flatcc_verify_string_vector_field@@Base+0x143>
  41315e:	mov    esi,edx
  413160:	and    esi,0x3
  413163:	test   rsi,rsi
  413166:	jne    4131a3 <flatcc_verify_string_vector_field@@Base+0x143>
  413168:	mov    eax,DWORD PTR [r10+rdx*1]
  41316c:	mov    edx,r11d
  41316f:	sub    edx,ecx
  413171:	lea    esi,[rax+0x1]
  413174:	cmp    edx,esi
  413176:	jb     4131a7 <flatcc_verify_string_vector_field@@Base+0x147>
  413178:	lea    ecx,[rdi+rcx*1]
  41317b:	add    ecx,0x4
  41317e:	mov    ecx,ecx
  413180:	add    rcx,r10
  413183:	cmp    BYTE PTR [rax+rcx*1],0x0
  413187:	jne    4131ae <flatcc_verify_string_vector_field@@Base+0x14e>
  413189:	add    edi,0x4
  41318c:	add    r11d,0xfffffffc
  413190:	dec    r9d
  413193:	jne    413141 <flatcc_verify_string_vector_field@@Base+0xe1>
  413195:	xor    eax,eax
  413197:	jmp    4131a3 <flatcc_verify_string_vector_field@@Base+0x143>
  413199:	xor    eax,eax
  41319b:	test   edx,edx
  41319d:	setne  al
  4131a0:	shl    eax,0x2
  4131a3:	pop    rbx
  4131a4:	pop    r14
  4131a6:	ret    
  4131a7:	mov    eax,0x8
  4131ac:	jmp    4131a3 <flatcc_verify_string_vector_field@@Base+0x143>
  4131ae:	mov    eax,0x7
  4131b3:	jmp    4131a3 <flatcc_verify_string_vector_field@@Base+0x143>
  4131b5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4131bf:	nop

00000000004131c0 <flatcc_verify_table_field@@Base>:
  4131c0:	sub    rsp,0x28
  4131c4:	lea    eax,[rsi+rsi*1]
  4131c7:	add    eax,0x4
  4131ca:	cmp    ax,WORD PTR [rdi+0x1e]
  4131ce:	jae    413204 <flatcc_verify_table_field@@Base+0x44>
  4131d0:	mov    rsi,QWORD PTR [rdi+0x10]
  4131d4:	movzx  eax,ax
  4131d7:	movzx  esi,WORD PTR [rsi+rax*1]
  4131db:	test   esi,esi
  4131dd:	je     413204 <flatcc_verify_table_field@@Base+0x44>
  4131df:	lea    r8d,[rsi+0x4]
  4131e3:	movzx  edx,WORD PTR [rdi+0x1c]
  4131e7:	mov    eax,0xd
  4131ec:	cmp    r8d,edx
  4131ef:	ja     4131ff <flatcc_verify_table_field@@Base+0x3f>
  4131f1:	add    esi,DWORD PTR [rdi+0x18]
  4131f4:	mov    eax,0xc
  4131f9:	test   sil,0x3
  4131fd:	je     413213 <flatcc_verify_table_field@@Base+0x53>
  4131ff:	add    rsp,0x28
  413203:	ret    
  413204:	xor    eax,eax
  413206:	test   edx,edx
  413208:	setne  al
  41320b:	shl    eax,0x2
  41320e:	add    rsp,0x28
  413212:	ret    
  413213:	test   esi,esi
  413215:	je     4132ef <flatcc_verify_table_field@@Base+0x12f>
  41321b:	mov    r9,QWORD PTR [rdi]
  41321e:	mov    r8d,DWORD PTR [rdi+0x8]
  413222:	mov    eax,esi
  413224:	mov    edx,DWORD PTR [r9+rax*1]
  413228:	mov    eax,DWORD PTR [rdi+0xc]
  41322b:	dec    eax
  41322d:	mov    DWORD PTR [rsp+0x14],eax
  413231:	je     4132f6 <flatcc_verify_table_field@@Base+0x136>
  413237:	add    edx,esi
  413239:	mov    eax,0xf
  41323e:	cmp    edx,esi
  413240:	jbe    4131ff <flatcc_verify_table_field@@Base+0x3f>
  413242:	mov    esi,edx
  413244:	lea    rdi,[rsi+0x4]
  413248:	cmp    rdi,r8
  41324b:	ja     4131ff <flatcc_verify_table_field@@Base+0x3f>
  41324d:	mov    edi,esi
  41324f:	and    edi,0x3
  413252:	test   rdi,rdi
  413255:	jne    4131ff <flatcc_verify_table_field@@Base+0x3f>
  413257:	mov    DWORD PTR [rsp+0x20],edx
  41325b:	mov    edi,edx
  41325d:	sub    edi,DWORD PTR [r9+rsi*1]
  413261:	mov    eax,0x1d
  413266:	test   edi,0x80000001
  41326c:	jne    4131ff <flatcc_verify_table_field@@Base+0x3f>
  41326e:	mov    r10d,edi
  413271:	lea    r11,[r10+0x2]
  413275:	mov    eax,0x1b
  41327a:	cmp    r11,r8
  41327d:	ja     4131ff <flatcc_verify_table_field@@Base+0x3f>
  41327f:	movzx  esi,WORD PTR [r9+r10*1]
  413284:	mov    WORD PTR [rsp+0x26],si
  413289:	mov    eax,0x1e
  41328e:	test   sil,0x1
  413292:	jne    4131ff <flatcc_verify_table_field@@Base+0x3f>
  413298:	add    edi,esi
  41329a:	cmp    edi,r8d
  41329d:	ja     4131ff <flatcc_verify_table_field@@Base+0x3f>
  4132a3:	mov    eax,0x1c
  4132a8:	cmp    si,0x4
  4132ac:	jb     4131ff <flatcc_verify_table_field@@Base+0x3f>
  4132b2:	mov    eax,r11d
  4132b5:	movzx  esi,WORD PTR [r9+rax*1]
  4132ba:	mov    WORD PTR [rsp+0x24],si
  4132bf:	mov    edi,r8d
  4132c2:	sub    edi,edx
  4132c4:	mov    eax,0x14
  4132c9:	cmp    edi,esi
  4132cb:	jb     4131ff <flatcc_verify_table_field@@Base+0x3f>
  4132d1:	add    r10,r9
  4132d4:	mov    QWORD PTR [rsp+0x18],r10
  4132d9:	mov    QWORD PTR [rsp+0x8],r9
  4132de:	mov    DWORD PTR [rsp+0x10],r8d
  4132e3:	lea    rdi,[rsp+0x8]
  4132e8:	call   rcx
  4132ea:	add    rsp,0x28
  4132ee:	ret    
  4132ef:	xor    eax,eax
  4132f1:	add    rsp,0x28
  4132f5:	ret    
  4132f6:	mov    eax,0x3
  4132fb:	add    rsp,0x28
  4132ff:	ret    

0000000000413300 <flatcc_verify_table_vector_field@@Base>:
  413300:	push   rbp
  413301:	push   r15
  413303:	push   r14
  413305:	push   r13
  413307:	push   r12
  413309:	push   rbx
  41330a:	sub    rsp,0x28
  41330e:	lea    eax,[rsi+rsi*1]
  413311:	add    eax,0x4
  413314:	cmp    ax,WORD PTR [rdi+0x1e]
  413318:	jae    4134f0 <flatcc_verify_table_vector_field@@Base+0x1f0>
  41331e:	mov    rbx,rcx
  413321:	mov    rcx,QWORD PTR [rdi+0x10]
  413325:	movzx  eax,ax
  413328:	movzx  ecx,WORD PTR [rcx+rax*1]
  41332c:	test   ecx,ecx
  41332e:	je     4134f0 <flatcc_verify_table_vector_field@@Base+0x1f0>
  413334:	lea    edx,[rcx+0x4]
  413337:	movzx  esi,WORD PTR [rdi+0x1c]
  41333b:	mov    eax,0xd
  413340:	cmp    edx,esi
  413342:	ja     4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  413348:	mov    edx,DWORD PTR [rdi+0x18]
  41334b:	lea    esi,[rdx+rcx*1]
  41334e:	mov    eax,0xc
  413353:	test   sil,0x3
  413357:	jne    4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  41335d:	test   esi,esi
  41335f:	je     4134ec <flatcc_verify_table_vector_field@@Base+0x1ec>
  413365:	mov    r13d,DWORD PTR [rdi+0xc]
  413369:	test   r13d,r13d
  41336c:	jle    413509 <flatcc_verify_table_vector_field@@Base+0x209>
  413372:	mov    r15,QWORD PTR [rdi]
  413375:	mov    eax,esi
  413377:	mov    r8d,DWORD PTR [r15+rax*1]
  41337b:	lea    ebp,[r8+rsi*1]
  41337f:	mov    eax,0x10
  413384:	cmp    ebp,esi
  413386:	jbe    4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  41338c:	mov    r9d,DWORD PTR [rdi+0x8]
  413390:	mov    esi,ebp
  413392:	lea    rdi,[rsi+0x4]
  413396:	cmp    rdi,r9
  413399:	ja     4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  41339f:	and    edi,0x3
  4133a2:	test   rdi,rdi
  4133a5:	jne    4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  4133ab:	mov    r12d,DWORD PTR [r15+rsi*1]
  4133af:	mov    eax,0x19
  4133b4:	cmp    r12d,0x3fffffff
  4133bb:	ja     4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  4133c1:	mov    esi,r9d
  4133c4:	sub    esi,ebp
  4133c6:	add    esi,0xfffffffc
  4133c9:	lea    edi,[r12*4+0x0]
  4133d1:	mov    eax,0x1a
  4133d6:	cmp    esi,edi
  4133d8:	jb     4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  4133de:	test   r12d,r12d
  4133e1:	je     4134ec <flatcc_verify_table_vector_field@@Base+0x1ec>
  4133e7:	add    r13d,0xfffffffe
  4133eb:	lea    eax,[r8+rdx*1]
  4133ef:	lea    r14d,[rcx+rax*1]
  4133f3:	add    r14d,0x4
  4133f7:	mov    r11d,r9d
  4133fa:	sub    r11d,r8d
  4133fd:	sub    r11d,edx
  413400:	sub    r11d,ecx
  413403:	add    r11d,0xfffffffc
  413407:	mov    QWORD PTR [rsp+0x20],r9
  41340c:	mov    r14d,r14d
  41340f:	mov    ecx,DWORD PTR [r15+r14*1]
  413413:	mov    DWORD PTR [rsp+0xc],r13d
  413418:	test   r13d,r13d
  41341b:	je     4135c9 <flatcc_verify_table_vector_field@@Base+0x2c9>
  413421:	lea    eax,[r14+rcx*1]
  413425:	cmp    eax,r14d
  413428:	jbe    413510 <flatcc_verify_table_vector_field@@Base+0x210>
  41342e:	mov    edx,eax
  413430:	lea    rsi,[rdx+0x4]
  413434:	cmp    rsi,r9
  413437:	ja     413510 <flatcc_verify_table_vector_field@@Base+0x210>
  41343d:	mov    esi,edx
  41343f:	and    esi,0x3
  413442:	test   rsi,rsi
  413445:	jne    413510 <flatcc_verify_table_vector_field@@Base+0x210>
  41344b:	mov    DWORD PTR [rsp+0x18],eax
  41344f:	mov    edx,DWORD PTR [r15+rdx*1]
  413453:	mov    eax,ecx
  413455:	sub    eax,edx
  413457:	add    eax,r14d
  41345a:	test   eax,0x80000001
  41345f:	jne    413510 <flatcc_verify_table_vector_field@@Base+0x210>
  413465:	mov    eax,eax
  413467:	lea    rsi,[rax+0x2]
  41346b:	cmp    rsi,r9
  41346e:	ja     413510 <flatcc_verify_table_vector_field@@Base+0x210>
  413474:	movzx  ebp,WORD PTR [r15+rax*1]
  413479:	mov    WORD PTR [rsp+0x1e],bp
  41347e:	cmp    ebp,0x4
  413481:	jb     413510 <flatcc_verify_table_vector_field@@Base+0x210>
  413487:	mov    edi,ebp
  413489:	and    edi,0x1
  41348c:	test   di,di
  41348f:	jne    413510 <flatcc_verify_table_vector_field@@Base+0x210>
  413491:	add    ebp,ecx
  413493:	sub    ebp,edx
  413495:	add    ebp,r14d
  413498:	cmp    ebp,r9d
  41349b:	ja     413510 <flatcc_verify_table_vector_field@@Base+0x210>
  41349d:	mov    edx,esi
  41349f:	movzx  edx,WORD PTR [r15+rdx*1]
  4134a4:	mov    WORD PTR [rsp+0x1c],dx
  4134a9:	mov    esi,r11d
  4134ac:	sub    esi,ecx
  4134ae:	cmp    esi,edx
  4134b0:	jb     413510 <flatcc_verify_table_vector_field@@Base+0x210>
  4134b2:	mov    ebp,r11d
  4134b5:	add    rax,r15
  4134b8:	mov    QWORD PTR [rsp+0x10],rax
  4134bd:	mov    QWORD PTR [rsp],r15
  4134c1:	mov    DWORD PTR [rsp+0x8],r9d
  4134c6:	mov    rdi,rsp
  4134c9:	call   rbx
  4134cb:	test   eax,eax
  4134cd:	jne    4135db <flatcc_verify_table_vector_field@@Base+0x2db>
  4134d3:	add    r14d,0x4
  4134d7:	mov    r11d,ebp
  4134da:	add    r11d,0xfffffffc
  4134de:	dec    r12d
  4134e1:	mov    r9,QWORD PTR [rsp+0x20]
  4134e6:	jne    41340c <flatcc_verify_table_vector_field@@Base+0x10c>
  4134ec:	xor    eax,eax
  4134ee:	jmp    4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  4134f0:	xor    eax,eax
  4134f2:	test   edx,edx
  4134f4:	setne  al
  4134f7:	shl    eax,0x2
  4134fa:	add    rsp,0x28
  4134fe:	pop    rbx
  4134ff:	pop    r12
  413501:	pop    r13
  413503:	pop    r14
  413505:	pop    r15
  413507:	pop    rbp
  413508:	ret    
  413509:	mov    eax,0x3
  41350e:	jmp    4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  413510:	mov    DWORD PTR [rsp+0xc],r13d
  413515:	add    ecx,r14d
  413518:	mov    eax,0xf
  41351d:	cmp    ecx,r14d
  413520:	jbe    4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  413522:	mov    edx,ecx
  413524:	lea    rsi,[rdx+0x4]
  413528:	cmp    rsi,r9
  41352b:	ja     4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  41352d:	mov    esi,edx
  41352f:	and    esi,0x3
  413532:	test   rsi,rsi
  413535:	jne    4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  413537:	mov    DWORD PTR [rsp+0x18],ecx
  41353b:	mov    edi,ecx
  41353d:	sub    edi,DWORD PTR [r15+rdx*1]
  413541:	mov    eax,0x1d
  413546:	test   edi,0x80000001
  41354c:	jne    4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  41354e:	mov    edx,edi
  413550:	lea    rsi,[rdx+0x2]
  413554:	mov    eax,0x1b
  413559:	cmp    rsi,r9
  41355c:	ja     4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  41355e:	movzx  ebp,WORD PTR [r15+rdx*1]
  413563:	mov    WORD PTR [rsp+0x1e],bp
  413568:	mov    eax,0x1e
  41356d:	test   bpl,0x1
  413571:	jne    4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  413573:	add    edi,ebp
  413575:	mov    r8,r9
  413578:	cmp    edi,r8d
  41357b:	ja     4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  413581:	mov    eax,0x1c
  413586:	cmp    bp,0x4
  41358a:	jb     4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  413590:	mov    eax,esi
  413592:	movzx  esi,WORD PTR [r15+rax*1]
  413597:	mov    WORD PTR [rsp+0x1c],si
  41359c:	mov    edi,r8d
  41359f:	sub    edi,ecx
  4135a1:	mov    eax,0x14
  4135a6:	cmp    edi,esi
  4135a8:	jb     4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  4135ae:	add    rdx,r15
  4135b1:	mov    QWORD PTR [rsp+0x10],rdx
  4135b6:	mov    QWORD PTR [rsp],r15
  4135ba:	mov    DWORD PTR [rsp+0x8],r8d
  4135bf:	mov    rdi,rsp
  4135c2:	call   rbx
  4135c4:	jmp    4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  4135c9:	mov    DWORD PTR [rsp+0xc],0x0
  4135d1:	mov    eax,0x3
  4135d6:	jmp    4134fa <flatcc_verify_table_vector_field@@Base+0x1fa>
  4135db:	mov    ecx,DWORD PTR [r15+r14*1]
  4135df:	add    ecx,r14d
  4135e2:	mov    DWORD PTR [rsp+0xc],r13d
  4135e7:	mov    r9,QWORD PTR [rsp+0x20]
  4135ec:	jmp    413518 <flatcc_verify_table_vector_field@@Base+0x218>
  4135f1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4135fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000413600 <flatcc_verify_union_table@@Base>:
  413600:	sub    rsp,0x28
  413604:	mov    r8,QWORD PTR [rdi]
  413607:	mov    r11d,DWORD PTR [rdi+0x8]
  41360b:	mov    edx,DWORD PTR [rdi+0x14]
  41360e:	mov    ecx,DWORD PTR [rdi+0x18]
  413611:	mov    eax,DWORD PTR [rdi+0xc]
  413614:	dec    eax
  413616:	mov    DWORD PTR [rsp+0x14],eax
  41361a:	je     4136d3 <flatcc_verify_union_table@@Base+0xd3>
  413620:	add    ecx,edx
  413622:	mov    eax,0xf
  413627:	cmp    ecx,edx
  413629:	jbe    4136ce <flatcc_verify_union_table@@Base+0xce>
  41362f:	mov    edx,ecx
  413631:	lea    rdi,[rdx+0x4]
  413635:	cmp    rdi,r11
  413638:	ja     4136ce <flatcc_verify_union_table@@Base+0xce>
  41363e:	mov    edi,edx
  413640:	and    edi,0x3
  413643:	test   rdi,rdi
  413646:	jne    4136ce <flatcc_verify_union_table@@Base+0xce>
  41364c:	mov    DWORD PTR [rsp+0x20],ecx
  413650:	mov    edi,ecx
  413652:	sub    edi,DWORD PTR [r8+rdx*1]
  413656:	mov    eax,0x1d
  41365b:	test   edi,0x80000001
  413661:	jne    4136ce <flatcc_verify_union_table@@Base+0xce>
  413663:	mov    r9d,edi
  413666:	lea    r10,[r9+0x2]
  41366a:	mov    eax,0x1b
  41366f:	cmp    r10,r11
  413672:	ja     4136ce <flatcc_verify_union_table@@Base+0xce>
  413674:	movzx  edx,WORD PTR [r8+r9*1]
  413679:	mov    WORD PTR [rsp+0x26],dx
  41367e:	mov    eax,0x1e
  413683:	test   dl,0x1
  413686:	jne    4136ce <flatcc_verify_union_table@@Base+0xce>
  413688:	add    edi,edx
  41368a:	cmp    edi,r11d
  41368d:	ja     4136ce <flatcc_verify_union_table@@Base+0xce>
  41368f:	mov    eax,0x1c
  413694:	cmp    dx,0x4
  413698:	jb     4136ce <flatcc_verify_union_table@@Base+0xce>
  41369a:	mov    eax,r10d
  41369d:	movzx  edx,WORD PTR [r8+rax*1]
  4136a2:	mov    WORD PTR [rsp+0x24],dx
  4136a7:	mov    edi,r11d
  4136aa:	sub    edi,ecx
  4136ac:	mov    eax,0x14
  4136b1:	cmp    edi,edx
  4136b3:	jb     4136ce <flatcc_verify_union_table@@Base+0xce>
  4136b5:	add    r9,r8
  4136b8:	mov    QWORD PTR [rsp+0x18],r9
  4136bd:	mov    QWORD PTR [rsp+0x8],r8
  4136c2:	mov    DWORD PTR [rsp+0x10],r11d
  4136c7:	lea    rdi,[rsp+0x8]
  4136cc:	call   rsi
  4136ce:	add    rsp,0x28
  4136d2:	ret    
  4136d3:	mov    eax,0x3
  4136d8:	add    rsp,0x28
  4136dc:	ret    
  4136dd:	nop    DWORD PTR [rax]

00000000004136e0 <flatcc_verify_union_struct@@Base>:
  4136e0:	mov    ecx,DWORD PTR [rdi+0x18]
  4136e3:	mov    eax,0x12
  4136e8:	test   ecx,ecx
  4136ea:	je     41371a <flatcc_verify_union_struct@@Base+0x3a>
  4136ec:	mov    r8d,DWORD PTR [rdi+0x8]
  4136f0:	add    ecx,DWORD PTR [rdi+0x14]
  4136f3:	cmp    ecx,r8d
  4136f6:	ja     41371a <flatcc_verify_union_struct@@Base+0x3a>
  4136f8:	mov    eax,0xa
  4136fd:	add    esi,ecx
  4136ff:	jb     41371a <flatcc_verify_union_struct@@Base+0x3a>
  413701:	mov    eax,0x9
  413706:	cmp    esi,r8d
  413709:	ja     41371a <flatcc_verify_union_struct@@Base+0x3a>
  41370b:	movzx  eax,dx
  41370e:	dec    eax
  413710:	and    ecx,eax
  413712:	mov    eax,0xb
  413717:	cmove  eax,ecx
  41371a:	ret    
  41371b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000413720 <flatcc_verify_union_string@@Base>:
  413720:	mov    edx,DWORD PTR [rdi+0x14]
  413723:	mov    ecx,DWORD PTR [rdi+0x18]
  413726:	add    ecx,edx
  413728:	mov    eax,0x11
  41372d:	cmp    ecx,edx
  41372f:	jbe    413776 <flatcc_verify_union_string@@Base+0x56>
  413731:	mov    r8d,DWORD PTR [rdi+0x8]
  413735:	mov    esi,ecx
  413737:	lea    rdx,[rsi+0x4]
  41373b:	cmp    rdx,r8
  41373e:	ja     413776 <flatcc_verify_union_string@@Base+0x56>
  413740:	mov    edx,esi
  413742:	and    edx,0x3
  413745:	test   rdx,rdx
  413748:	jne    413776 <flatcc_verify_union_string@@Base+0x56>
  41374a:	mov    rdi,QWORD PTR [rdi]
  41374d:	mov    esi,DWORD PTR [rdi+rsi*1]
  413750:	add    ecx,0x4
  413753:	sub    r8d,ecx
  413756:	lea    edx,[rsi+0x1]
  413759:	mov    eax,0x8
  41375e:	cmp    r8d,edx
  413761:	jb     413776 <flatcc_verify_union_string@@Base+0x56>
  413763:	mov    eax,ecx
  413765:	add    rdi,rax
  413768:	xor    ecx,ecx
  41376a:	cmp    BYTE PTR [rsi+rdi*1],0x0
  41376e:	mov    eax,0x7
  413773:	cmove  eax,ecx
  413776:	ret    
  413777:	nop    WORD PTR [rax+rax*1+0x0]

0000000000413780 <flatcc_verify_buffer_header@@Base>:
  413780:	push   rbx
  413781:	sub    rsp,0x10
  413785:	mov    rbx,rdi
  413788:	mov    eax,0x5
  41378d:	test   bl,0x3
  413790:	jne    4137e8 <flatcc_verify_buffer_header@@Base+0x68>
  413792:	mov    rcx,rdx
  413795:	mov    rdx,rsi
  413798:	shr    rdx,0x3
  41379c:	mov    eax,0x6
  4137a1:	cmp    rdx,0x1ffffffe
  4137a8:	ja     4137e8 <flatcc_verify_buffer_header@@Base+0x68>
  4137aa:	mov    eax,0x1
  4137af:	cmp    rsi,0x8
  4137b3:	jb     4137e8 <flatcc_verify_buffer_header@@Base+0x68>
  4137b5:	test   rcx,rcx
  4137b8:	je     4137e6 <flatcc_verify_buffer_header@@Base+0x66>
  4137ba:	mov    DWORD PTR [rsp+0xc],0x0
  4137c2:	lea    rdi,[rsp+0xc]
  4137c7:	mov    edx,0x4
  4137cc:	mov    rsi,rcx
  4137cf:	call   404040 <strncpy@plt>
  4137d4:	mov    ecx,DWORD PTR [rsp+0xc]
  4137d8:	test   ecx,ecx
  4137da:	je     4137e6 <flatcc_verify_buffer_header@@Base+0x66>
  4137dc:	mov    eax,0x2
  4137e1:	cmp    DWORD PTR [rbx+0x4],ecx
  4137e4:	jne    4137e8 <flatcc_verify_buffer_header@@Base+0x68>
  4137e6:	xor    eax,eax
  4137e8:	add    rsp,0x10
  4137ec:	pop    rbx
  4137ed:	ret    
  4137ee:	xchg   ax,ax

00000000004137f0 <flatcc_verify_typed_buffer_header@@Base>:
  4137f0:	mov    eax,0x5
  4137f5:	test   dil,0x3
  4137f9:	jne    41382b <flatcc_verify_typed_buffer_header@@Base+0x3b>
  4137fb:	mov    rcx,rsi
  4137fe:	shr    rcx,0x3
  413802:	mov    eax,0x6
  413807:	cmp    rcx,0x1ffffffe
  41380e:	ja     41382b <flatcc_verify_typed_buffer_header@@Base+0x3b>
  413810:	mov    eax,0x1
  413815:	cmp    rsi,0x8
  413819:	jb     41382b <flatcc_verify_typed_buffer_header@@Base+0x3b>
  41381b:	test   edx,edx
  41381d:	je     413829 <flatcc_verify_typed_buffer_header@@Base+0x39>
  41381f:	mov    eax,0x2
  413824:	cmp    DWORD PTR [rdi+0x4],edx
  413827:	jne    41382b <flatcc_verify_typed_buffer_header@@Base+0x3b>
  413829:	xor    eax,eax
  41382b:	ret    
  41382c:	nop    DWORD PTR [rax+0x0]

0000000000413830 <flatcc_verify_struct_as_root@@Base>:
  413830:	push   rbp
  413831:	push   r15
  413833:	push   r14
  413835:	push   r12
  413837:	push   rbx
  413838:	sub    rsp,0x10
  41383c:	mov    rbx,rdi
  41383f:	mov    eax,0x5
  413844:	test   bl,0x3
  413847:	jne    41390e <flatcc_verify_struct_as_root@@Base+0xde>
  41384d:	mov    r15,rcx
  413850:	mov    rbp,rsi
  413853:	mov    rcx,rsi
  413856:	shr    rcx,0x3
  41385a:	mov    eax,0x6
  41385f:	cmp    rcx,0x1ffffffe
  413866:	ja     41390e <flatcc_verify_struct_as_root@@Base+0xde>
  41386c:	mov    eax,0x1
  413871:	cmp    rbp,0x8
  413875:	jb     41390e <flatcc_verify_struct_as_root@@Base+0xde>
  41387b:	mov    r14d,r8d
  41387e:	mov    r12,rdx
  413881:	test   rdx,rdx
  413884:	je     4138dc <flatcc_verify_struct_as_root@@Base+0xac>
  413886:	mov    DWORD PTR [rsp+0x8],0x0
  41388e:	lea    rdi,[rsp+0x8]
  413893:	mov    edx,0x4
  413898:	mov    rsi,r12
  41389b:	call   404040 <strncpy@plt>
  4138a0:	mov    eax,DWORD PTR [rsp+0x8]
  4138a4:	test   eax,eax
  4138a6:	je     4138dc <flatcc_verify_struct_as_root@@Base+0xac>
  4138a8:	cmp    DWORD PTR [rbx+0x4],eax
  4138ab:	je     4138dc <flatcc_verify_struct_as_root@@Base+0xac>
  4138ad:	mov    DWORD PTR [rsp+0xc],0x0
  4138b5:	lea    rdi,[rsp+0xc]
  4138ba:	mov    edx,0x4
  4138bf:	mov    rsi,r12
  4138c2:	call   404040 <strncpy@plt>
  4138c7:	mov    ecx,DWORD PTR [rsp+0xc]
  4138cb:	xor    eax,eax
  4138cd:	cmp    DWORD PTR [rbx+0x4],ecx
  4138d0:	setne  al
  4138d3:	add    eax,eax
  4138d5:	test   ecx,ecx
  4138d7:	cmove  eax,ecx
  4138da:	jmp    41390e <flatcc_verify_struct_as_root@@Base+0xde>
  4138dc:	mov    ecx,DWORD PTR [rbx]
  4138de:	lea    edx,[rcx-0x1]
  4138e1:	mov    eax,0x12
  4138e6:	cmp    edx,ebp
  4138e8:	jae    41390e <flatcc_verify_struct_as_root@@Base+0xde>
  4138ea:	mov    eax,0xa
  4138ef:	add    r15d,ecx
  4138f2:	jb     41390e <flatcc_verify_struct_as_root@@Base+0xde>
  4138f4:	mov    eax,0x9
  4138f9:	cmp    r15d,ebp
  4138fc:	ja     41390e <flatcc_verify_struct_as_root@@Base+0xde>
  4138fe:	movzx  eax,r14w
  413902:	dec    eax
  413904:	and    ecx,eax
  413906:	mov    eax,0xb
  41390b:	cmove  eax,ecx
  41390e:	add    rsp,0x10
  413912:	pop    rbx
  413913:	pop    r12
  413915:	pop    r14
  413917:	pop    r15
  413919:	pop    rbp
  41391a:	ret    
  41391b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000413920 <flatcc_verify_struct_as_typed_root@@Base>:
  413920:	mov    eax,0x5
  413925:	test   dil,0x3
  413929:	jne    413989 <flatcc_verify_struct_as_typed_root@@Base+0x69>
  41392b:	mov    r9,rsi
  41392e:	shr    r9,0x3
  413932:	mov    eax,0x6
  413937:	cmp    r9,0x1ffffffe
  41393e:	ja     413989 <flatcc_verify_struct_as_typed_root@@Base+0x69>
  413940:	mov    eax,0x1
  413945:	cmp    rsi,0x8
  413949:	jb     413989 <flatcc_verify_struct_as_typed_root@@Base+0x69>
  41394b:	test   edx,edx
  41394d:	je     413959 <flatcc_verify_struct_as_typed_root@@Base+0x39>
  41394f:	mov    eax,0x2
  413954:	cmp    DWORD PTR [rdi+0x4],edx
  413957:	jne    413989 <flatcc_verify_struct_as_typed_root@@Base+0x69>
  413959:	mov    edx,DWORD PTR [rdi]
  41395b:	lea    edi,[rdx-0x1]
  41395e:	mov    eax,0x12
  413963:	cmp    edi,esi
  413965:	jae    413989 <flatcc_verify_struct_as_typed_root@@Base+0x69>
  413967:	mov    eax,0xa
  41396c:	add    ecx,edx
  41396e:	jb     413989 <flatcc_verify_struct_as_typed_root@@Base+0x69>
  413970:	mov    eax,0x9
  413975:	cmp    ecx,esi
  413977:	ja     413989 <flatcc_verify_struct_as_typed_root@@Base+0x69>
  413979:	movzx  eax,r8w
  41397d:	dec    eax
  41397f:	and    edx,eax
  413981:	mov    eax,0xb
  413986:	cmove  eax,edx
  413989:	ret    
  41398a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000413990 <flatcc_verify_table_as_root@@Base>:
  413990:	push   r15
  413992:	push   r14
  413994:	push   r13
  413996:	push   r12
  413998:	push   rbx
  413999:	sub    rsp,0x20
  41399d:	mov    r12,rdi
  4139a0:	mov    eax,0x5
  4139a5:	test   r12b,0x3
  4139a9:	jne    413aec <flatcc_verify_table_as_root@@Base+0x15c>
  4139af:	mov    r14,rcx
  4139b2:	mov    r15,rsi
  4139b5:	mov    r13d,r15d
  4139b8:	mov    rcx,r13
  4139bb:	shr    rcx,0x3
  4139bf:	mov    eax,0x6
  4139c4:	cmp    rcx,0x1ffffffe
  4139cb:	ja     413aec <flatcc_verify_table_as_root@@Base+0x15c>
  4139d1:	mov    eax,0x1
  4139d6:	cmp    r13,0x8
  4139da:	jb     413aec <flatcc_verify_table_as_root@@Base+0x15c>
  4139e0:	mov    rbx,rdx
  4139e3:	test   rdx,rdx
  4139e6:	je     413a3d <flatcc_verify_table_as_root@@Base+0xad>
  4139e8:	mov    DWORD PTR [rsp],0x0
  4139ef:	mov    rdi,rsp
  4139f2:	mov    edx,0x4
  4139f7:	mov    rsi,rbx
  4139fa:	call   404040 <strncpy@plt>
  4139ff:	mov    eax,DWORD PTR [rsp]
  413a02:	test   eax,eax
  413a04:	je     413a3d <flatcc_verify_table_as_root@@Base+0xad>
  413a06:	cmp    DWORD PTR [r12+0x4],eax
  413a0b:	je     413a3d <flatcc_verify_table_as_root@@Base+0xad>
  413a0d:	mov    DWORD PTR [rsp],0x0
  413a14:	mov    rdi,rsp
  413a17:	mov    edx,0x4
  413a1c:	mov    rsi,rbx
  413a1f:	call   404040 <strncpy@plt>
  413a24:	mov    ecx,DWORD PTR [rsp]
  413a27:	xor    eax,eax
  413a29:	cmp    DWORD PTR [r12+0x4],ecx
  413a2e:	setne  al
  413a31:	add    eax,eax
  413a33:	test   ecx,ecx
  413a35:	cmove  eax,ecx
  413a38:	jmp    413aec <flatcc_verify_table_as_root@@Base+0x15c>
  413a3d:	mov    ecx,DWORD PTR [r12]
  413a41:	mov    DWORD PTR [rsp+0xc],0x63
  413a49:	mov    eax,0xf
  413a4e:	test   rcx,rcx
  413a51:	je     413aec <flatcc_verify_table_as_root@@Base+0x15c>
  413a57:	lea    rdx,[rcx+0x4]
  413a5b:	cmp    rdx,r13
  413a5e:	ja     413aec <flatcc_verify_table_as_root@@Base+0x15c>
  413a64:	mov    edx,ecx
  413a66:	and    edx,0x3
  413a69:	test   rdx,rdx
  413a6c:	jne    413aec <flatcc_verify_table_as_root@@Base+0x15c>
  413a6e:	mov    DWORD PTR [rsp+0x18],ecx
  413a72:	mov    edi,ecx
  413a74:	sub    edi,DWORD PTR [r12+rcx*1]
  413a78:	mov    eax,0x1d
  413a7d:	test   edi,0x80000001
  413a83:	jne    413aec <flatcc_verify_table_as_root@@Base+0x15c>
  413a85:	mov    edx,edi
  413a87:	lea    rsi,[rdx+0x2]
  413a8b:	mov    eax,0x1b
  413a90:	cmp    rsi,r13
  413a93:	ja     413aec <flatcc_verify_table_as_root@@Base+0x15c>
  413a95:	movzx  ebx,WORD PTR [r12+rdx*1]
  413a9a:	mov    WORD PTR [rsp+0x1e],bx
  413a9f:	mov    eax,0x1e
  413aa4:	test   bl,0x1
  413aa7:	jne    413aec <flatcc_verify_table_as_root@@Base+0x15c>
  413aa9:	add    edi,ebx
  413aab:	cmp    edi,r15d
  413aae:	ja     413aec <flatcc_verify_table_as_root@@Base+0x15c>
  413ab0:	mov    eax,0x1c
  413ab5:	cmp    bx,0x4
  413ab9:	jb     413aec <flatcc_verify_table_as_root@@Base+0x15c>
  413abb:	mov    eax,esi
  413abd:	movzx  esi,WORD PTR [r12+rax*1]
  413ac2:	mov    WORD PTR [rsp+0x1c],si
  413ac7:	mov    edi,r15d
  413aca:	sub    edi,ecx
  413acc:	mov    eax,0x14
  413ad1:	cmp    edi,esi
  413ad3:	jb     413aec <flatcc_verify_table_as_root@@Base+0x15c>
  413ad5:	add    rdx,r12
  413ad8:	mov    QWORD PTR [rsp+0x10],rdx
  413add:	mov    QWORD PTR [rsp],r12
  413ae1:	mov    DWORD PTR [rsp+0x8],r15d
  413ae6:	mov    rdi,rsp
  413ae9:	call   r14
  413aec:	add    rsp,0x20
  413af0:	pop    rbx
  413af1:	pop    r12
  413af3:	pop    r13
  413af5:	pop    r14
  413af7:	pop    r15
  413af9:	ret    
  413afa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000413b00 <flatcc_verify_table_as_typed_root@@Base>:
  413b00:	push   rbx
  413b01:	sub    rsp,0x20
  413b05:	mov    eax,0x5
  413b0a:	test   dil,0x3
  413b0e:	jne    413c09 <flatcc_verify_table_as_typed_root@@Base+0x109>
  413b14:	mov    r8d,esi
  413b17:	mov    r9,r8
  413b1a:	shr    r9,0x3
  413b1e:	mov    eax,0x6
  413b23:	cmp    r9,0x1ffffffe
  413b2a:	ja     413c09 <flatcc_verify_table_as_typed_root@@Base+0x109>
  413b30:	mov    eax,0x1
  413b35:	cmp    r8,0x8
  413b39:	jb     413c09 <flatcc_verify_table_as_typed_root@@Base+0x109>
  413b3f:	test   edx,edx
  413b41:	je     413b51 <flatcc_verify_table_as_typed_root@@Base+0x51>
  413b43:	mov    eax,0x2
  413b48:	cmp    DWORD PTR [rdi+0x4],edx
  413b4b:	jne    413c09 <flatcc_verify_table_as_typed_root@@Base+0x109>
  413b51:	mov    ebx,DWORD PTR [rdi]
  413b53:	mov    DWORD PTR [rsp+0xc],0x63
  413b5b:	mov    eax,0xf
  413b60:	test   rbx,rbx
  413b63:	je     413c09 <flatcc_verify_table_as_typed_root@@Base+0x109>
  413b69:	lea    rdx,[rbx+0x4]
  413b6d:	cmp    rdx,r8
  413b70:	ja     413c09 <flatcc_verify_table_as_typed_root@@Base+0x109>
  413b76:	mov    edx,ebx
  413b78:	and    edx,0x3
  413b7b:	test   rdx,rdx
  413b7e:	jne    413c09 <flatcc_verify_table_as_typed_root@@Base+0x109>
  413b84:	mov    DWORD PTR [rsp+0x18],ebx
  413b88:	mov    r11d,ebx
  413b8b:	sub    r11d,DWORD PTR [rdi+rbx*1]
  413b8f:	mov    eax,0x1d
  413b94:	test   r11d,0x80000001
  413b9b:	jne    413c09 <flatcc_verify_table_as_typed_root@@Base+0x109>
  413b9d:	mov    r9d,r11d
  413ba0:	lea    r10,[r9+0x2]
  413ba4:	mov    eax,0x1b
  413ba9:	cmp    r10,r8
  413bac:	ja     413c09 <flatcc_verify_table_as_typed_root@@Base+0x109>
  413bae:	movzx  r8d,WORD PTR [rdi+r9*1]
  413bb3:	mov    WORD PTR [rsp+0x1e],r8w
  413bb9:	mov    eax,0x1e
  413bbe:	test   r8b,0x1
  413bc2:	jne    413c09 <flatcc_verify_table_as_typed_root@@Base+0x109>
  413bc4:	add    r11d,r8d
  413bc7:	cmp    r11d,esi
  413bca:	ja     413c09 <flatcc_verify_table_as_typed_root@@Base+0x109>
  413bcc:	mov    eax,0x1c
  413bd1:	cmp    r8w,0x4
  413bd6:	jb     413c09 <flatcc_verify_table_as_typed_root@@Base+0x109>
  413bd8:	mov    eax,r10d
  413bdb:	movzx  r8d,WORD PTR [rdi+rax*1]
  413be0:	mov    WORD PTR [rsp+0x1c],r8w
  413be6:	mov    edx,esi
  413be8:	sub    edx,ebx
  413bea:	mov    eax,0x14
  413bef:	cmp    edx,r8d
  413bf2:	jb     413c09 <flatcc_verify_table_as_typed_root@@Base+0x109>
  413bf4:	add    r9,rdi
  413bf7:	mov    QWORD PTR [rsp+0x10],r9
  413bfc:	mov    QWORD PTR [rsp],rdi
  413c00:	mov    DWORD PTR [rsp+0x8],esi
  413c04:	mov    rdi,rsp
  413c07:	call   rcx
  413c09:	add    rsp,0x20
  413c0d:	pop    rbx
  413c0e:	ret    
  413c0f:	nop

0000000000413c10 <flatcc_verify_struct_as_nested_root@@Base>:
  413c10:	push   r15
  413c12:	push   r14
  413c14:	push   rbx
  413c15:	lea    esi,[rsi+rsi*1]
  413c18:	add    esi,0x4
  413c1b:	movzx  ebx,WORD PTR [rdi+0x1e]
  413c1f:	cmp    si,bx
  413c22:	jae    413c8c <flatcc_verify_struct_as_nested_root@@Base+0x7c>
  413c24:	mov    r10,QWORD PTR [rdi+0x10]
  413c28:	movzx  r11d,si
  413c2c:	movzx  eax,WORD PTR [r10+r11*1]
  413c31:	test   eax,eax
  413c33:	je     413c8c <flatcc_verify_struct_as_nested_root@@Base+0x7c>
  413c35:	lea    esi,[rax+0x4]
  413c38:	movzx  ebx,WORD PTR [rdi+0x1c]
  413c3c:	cmp    esi,ebx
  413c3e:	ja     413ca5 <flatcc_verify_struct_as_nested_root@@Base+0x95>
  413c40:	add    eax,DWORD PTR [rdi+0x18]
  413c43:	test   al,0x3
  413c45:	jne    413ca5 <flatcc_verify_struct_as_nested_root@@Base+0x95>
  413c47:	test   eax,eax
  413c49:	je     413d3f <flatcc_verify_struct_as_nested_root@@Base+0x12f>
  413c4f:	mov    r15,QWORD PTR [rdi]
  413c52:	mov    esi,eax
  413c54:	mov    ebx,DWORD PTR [r15+rsi*1]
  413c58:	add    ebx,eax
  413c5a:	cmp    ebx,eax
  413c5c:	jbe    413ca5 <flatcc_verify_struct_as_nested_root@@Base+0x95>
  413c5e:	mov    eax,DWORD PTR [rdi+0x8]
  413c61:	mov    r14d,ebx
  413c64:	lea    rsi,[r14+0x4]
  413c68:	cmp    rsi,rax
  413c6b:	ja     413ca5 <flatcc_verify_struct_as_nested_root@@Base+0x95>
  413c6d:	and    esi,0x3
  413c70:	test   rsi,rsi
  413c73:	jne    413ca5 <flatcc_verify_struct_as_nested_root@@Base+0x95>
  413c75:	movzx  esi,r9w
  413c79:	sub    eax,ebx
  413c7b:	add    eax,0xfffffffc
  413c7e:	imul   esi,DWORD PTR [r15+r14*1]
  413c83:	cmp    eax,esi
  413c85:	jb     413ca5 <flatcc_verify_struct_as_nested_root@@Base+0x95>
  413c87:	jmp    413d3f <flatcc_verify_struct_as_nested_root@@Base+0x12f>
  413c8c:	test   edx,edx
  413c8e:	je     413d30 <flatcc_verify_struct_as_nested_root@@Base+0x120>
  413c94:	cmp    si,bx
  413c97:	jae    413d24 <flatcc_verify_struct_as_nested_root@@Base+0x114>
  413c9d:	mov    r10,QWORD PTR [rdi+0x10]
  413ca1:	movzx  r11d,si
  413ca5:	movzx  esi,WORD PTR [r10+r11*1]
  413caa:	test   esi,esi
  413cac:	je     413d24 <flatcc_verify_struct_as_nested_root@@Base+0x114>
  413cae:	lea    ecx,[rsi+0x4]
  413cb1:	movzx  edx,WORD PTR [rdi+0x1c]
  413cb5:	mov    eax,0xd
  413cba:	cmp    ecx,edx
  413cbc:	ja     413d7c <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  413cc2:	add    esi,DWORD PTR [rdi+0x18]
  413cc5:	mov    eax,0xc
  413cca:	test   sil,0x3
  413cce:	jne    413d7c <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  413cd4:	test   esi,esi
  413cd6:	je     413d7a <flatcc_verify_struct_as_nested_root@@Base+0x16a>
  413cdc:	mov    rcx,QWORD PTR [rdi]
  413cdf:	mov    eax,esi
  413ce1:	mov    edx,DWORD PTR [rcx+rax*1]
  413ce4:	add    edx,esi
  413ce6:	mov    eax,0x10
  413ceb:	cmp    edx,esi
  413ced:	jbe    413d7c <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  413cf3:	mov    esi,DWORD PTR [rdi+0x8]
  413cf6:	mov    edi,edx
  413cf8:	lea    rbx,[rdi+0x4]
  413cfc:	cmp    rbx,rsi
  413cff:	ja     413d7c <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  413d01:	and    ebx,0x3
  413d04:	test   rbx,rbx
  413d07:	jne    413d7c <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  413d09:	movzx  eax,r9w
  413d0d:	sub    esi,edx
  413d0f:	add    esi,0xfffffffc
  413d12:	imul   eax,DWORD PTR [rcx+rdi*1]
  413d16:	xor    ecx,ecx
  413d18:	cmp    esi,eax
  413d1a:	mov    eax,0x1a
  413d1f:	cmovae eax,ecx
  413d22:	jmp    413d7c <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  413d24:	xor    eax,eax
  413d26:	test   edx,edx
  413d28:	setne  al
  413d2b:	shl    eax,0x2
  413d2e:	jmp    413d7c <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  413d30:	xor    eax,eax
  413d32:	cmp    si,bx
  413d35:	jae    413d7c <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  413d37:	mov    r10,QWORD PTR [rdi+0x10]
  413d3b:	movzx  r11d,si
  413d3f:	movzx  esi,WORD PTR [r10+r11*1]
  413d44:	xor    eax,eax
  413d46:	test   rsi,rsi
  413d49:	je     413d7c <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  413d4b:	mov    edx,DWORD PTR [rdi+0x18]
  413d4e:	add    rdx,QWORD PTR [rdi]
  413d51:	add    rdx,rsi
  413d54:	je     413d7c <flatcc_verify_struct_as_nested_root@@Base+0x16c>
  413d56:	mov    eax,DWORD PTR [rdx]
  413d58:	mov    esi,DWORD PTR [rax+rdx*1]
  413d5b:	lea    rdi,[rax+rdx*1]
  413d5f:	add    rdi,0x4
  413d63:	movzx  eax,r9w
  413d67:	mov    rdx,rcx
  413d6a:	mov    rcx,r8
  413d6d:	mov    r8d,eax
  413d70:	pop    rbx
  413d71:	pop    r14
  413d73:	pop    r15
  413d75:	jmp    413830 <flatcc_verify_struct_as_root@@Base>
  413d7a:	xor    eax,eax
  413d7c:	pop    rbx
  413d7d:	pop    r14
  413d7f:	pop    r15
  413d81:	ret    
  413d82:	nop    WORD PTR cs:[rax+rax*1+0x0]
  413d8c:	nop    DWORD PTR [rax+0x0]

0000000000413d90 <flatcc_verify_table_as_nested_root@@Base>:
  413d90:	push   rbp
  413d91:	push   r15
  413d93:	push   r14
  413d95:	push   r13
  413d97:	push   r12
  413d99:	push   rbx
  413d9a:	sub    rsp,0x28
  413d9e:	mov    r14,r9
  413da1:	mov    r15,rcx
  413da4:	mov    rbx,rdi
  413da7:	lea    esi,[rsi+rsi*1]
  413daa:	add    esi,0x4
  413dad:	movzx  ebp,WORD PTR [rdi+0x1e]
  413db1:	cmp    si,bp
  413db4:	jae    413e1e <flatcc_verify_table_as_nested_root@@Base+0x8e>
  413db6:	mov    rax,QWORD PTR [rbx+0x10]
  413dba:	movzx  ecx,si
  413dbd:	movzx  edi,WORD PTR [rax+rcx*1]
  413dc1:	test   edi,edi
  413dc3:	je     413e1e <flatcc_verify_table_as_nested_root@@Base+0x8e>
  413dc5:	lea    esi,[rdi+0x4]
  413dc8:	movzx  ebp,WORD PTR [rbx+0x1c]
  413dcc:	cmp    esi,ebp
  413dce:	ja     413e36 <flatcc_verify_table_as_nested_root@@Base+0xa6>
  413dd0:	add    edi,DWORD PTR [rbx+0x18]
  413dd3:	test   dil,0x3
  413dd7:	jne    413e36 <flatcc_verify_table_as_nested_root@@Base+0xa6>
  413dd9:	test   edi,edi
  413ddb:	je     413ee4 <flatcc_verify_table_as_nested_root@@Base+0x154>
  413de1:	mov    r10,QWORD PTR [rbx]
  413de4:	mov    esi,edi
  413de6:	mov    ebp,DWORD PTR [r10+rsi*1]
  413dea:	add    ebp,edi
  413dec:	cmp    ebp,edi
  413dee:	jbe    413e36 <flatcc_verify_table_as_nested_root@@Base+0xa6>
  413df0:	mov    edi,DWORD PTR [rbx+0x8]
  413df3:	mov    r9d,ebp
  413df6:	lea    rsi,[r9+0x4]
  413dfa:	cmp    rsi,rdi
  413dfd:	ja     413e36 <flatcc_verify_table_as_nested_root@@Base+0xa6>
  413dff:	and    esi,0x3
  413e02:	test   rsi,rsi
  413e05:	jne    413e36 <flatcc_verify_table_as_nested_root@@Base+0xa6>
  413e07:	movzx  esi,r8w
  413e0b:	sub    edi,ebp
  413e0d:	add    edi,0xfffffffc
  413e10:	imul   esi,DWORD PTR [r10+r9*1]
  413e15:	cmp    edi,esi
  413e17:	jb     413e36 <flatcc_verify_table_as_nested_root@@Base+0xa6>
  413e19:	jmp    413ee4 <flatcc_verify_table_as_nested_root@@Base+0x154>
  413e1e:	test   edx,edx
  413e20:	je     413ed2 <flatcc_verify_table_as_nested_root@@Base+0x142>
  413e26:	cmp    si,bp
  413e29:	jae    413ec3 <flatcc_verify_table_as_nested_root@@Base+0x133>
  413e2f:	mov    rax,QWORD PTR [rbx+0x10]
  413e33:	movzx  ecx,si
  413e36:	movzx  esi,WORD PTR [rax+rcx*1]
  413e3a:	test   esi,esi
  413e3c:	je     413ec3 <flatcc_verify_table_as_nested_root@@Base+0x133>
  413e42:	lea    ecx,[rsi+0x4]
  413e45:	movzx  edx,WORD PTR [rbx+0x1c]
  413e49:	mov    eax,0xd
  413e4e:	cmp    ecx,edx
  413e50:	ja     413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413e56:	add    esi,DWORD PTR [rbx+0x18]
  413e59:	mov    eax,0xc
  413e5e:	test   sil,0x3
  413e62:	jne    413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413e68:	test   esi,esi
  413e6a:	je     413f96 <flatcc_verify_table_as_nested_root@@Base+0x206>
  413e70:	mov    rcx,QWORD PTR [rbx]
  413e73:	mov    eax,esi
  413e75:	mov    edx,DWORD PTR [rcx+rax*1]
  413e78:	add    edx,esi
  413e7a:	mov    eax,0x10
  413e7f:	cmp    edx,esi
  413e81:	jbe    413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413e87:	mov    esi,DWORD PTR [rbx+0x8]
  413e8a:	mov    edi,edx
  413e8c:	lea    rbp,[rdi+0x4]
  413e90:	cmp    rbp,rsi
  413e93:	ja     413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413e99:	and    ebp,0x3
  413e9c:	test   rbp,rbp
  413e9f:	jne    413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413ea5:	movzx  eax,r8w
  413ea9:	sub    esi,edx
  413eab:	add    esi,0xfffffffc
  413eae:	imul   eax,DWORD PTR [rcx+rdi*1]
  413eb2:	xor    ecx,ecx
  413eb4:	cmp    esi,eax
  413eb6:	mov    eax,0x1a
  413ebb:	cmovae eax,ecx
  413ebe:	jmp    413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413ec3:	xor    eax,eax
  413ec5:	test   edx,edx
  413ec7:	setne  al
  413eca:	shl    eax,0x2
  413ecd:	jmp    413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413ed2:	xor    eax,eax
  413ed4:	cmp    si,bp
  413ed7:	jae    413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413edd:	mov    rax,QWORD PTR [rbx+0x10]
  413ee1:	movzx  ecx,si
  413ee4:	movzx  ecx,WORD PTR [rax+rcx*1]
  413ee8:	xor    eax,eax
  413eea:	test   rcx,rcx
  413eed:	je     413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413ef3:	mov    r13d,DWORD PTR [rbx+0x18]
  413ef7:	add    r13,QWORD PTR [rbx]
  413efa:	add    r13,rcx
  413efd:	je     413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413f03:	mov    ebp,DWORD PTR [r13+0x0]
  413f07:	lea    r12,[r13*1+0x4]
  413f0f:	add    r12,rbp
  413f12:	mov    eax,0x5
  413f17:	test   r12b,0x3
  413f1b:	jne    413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413f1d:	mov    ecx,DWORD PTR [rbp+r13*1+0x0]
  413f22:	mov    eax,0x6
  413f27:	cmp    ecx,0xfffffff7
  413f2a:	ja     413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413f2c:	mov    eax,0x1
  413f31:	cmp    ecx,0x8
  413f34:	jb     413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413f36:	test   r15,r15
  413f39:	je     413fa7 <flatcc_verify_table_as_nested_root@@Base+0x217>
  413f3b:	mov    DWORD PTR [rsp],0x0
  413f42:	mov    rdi,rsp
  413f45:	mov    edx,0x4
  413f4a:	mov    rsi,r15
  413f4d:	mov    QWORD PTR [rsp+0x20],rcx
  413f52:	call   404040 <strncpy@plt>
  413f57:	mov    rcx,QWORD PTR [rsp+0x20]
  413f5c:	mov    eax,DWORD PTR [rsp]
  413f5f:	test   eax,eax
  413f61:	je     413fa7 <flatcc_verify_table_as_nested_root@@Base+0x217>
  413f63:	add    rbp,r13
  413f66:	cmp    DWORD PTR [rbp+0x8],eax
  413f69:	je     413fa7 <flatcc_verify_table_as_nested_root@@Base+0x217>
  413f6b:	mov    DWORD PTR [rsp],0x0
  413f72:	mov    rdi,rsp
  413f75:	mov    edx,0x4
  413f7a:	mov    rsi,r15
  413f7d:	call   404040 <strncpy@plt>
  413f82:	mov    ecx,DWORD PTR [rsp]
  413f85:	xor    eax,eax
  413f87:	cmp    DWORD PTR [rbp+0x8],ecx
  413f8a:	setne  al
  413f8d:	add    eax,eax
  413f8f:	test   ecx,ecx
  413f91:	cmove  eax,ecx
  413f94:	jmp    413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413f96:	xor    eax,eax
  413f98:	add    rsp,0x28
  413f9c:	pop    rbx
  413f9d:	pop    r12
  413f9f:	pop    r13
  413fa1:	pop    r14
  413fa3:	pop    r15
  413fa5:	pop    rbp
  413fa6:	ret    
  413fa7:	mov    esi,DWORD PTR [r12]
  413fab:	mov    eax,DWORD PTR [rbx+0xc]
  413fae:	dec    eax
  413fb0:	mov    DWORD PTR [rsp+0xc],eax
  413fb4:	je     41405f <flatcc_verify_table_as_nested_root@@Base+0x2cf>
  413fba:	mov    eax,0xf
  413fbf:	test   esi,esi
  413fc1:	je     413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413fc3:	lea    rdx,[rsi+0x4]
  413fc7:	cmp    rdx,rcx
  413fca:	ja     413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413fcc:	mov    edx,esi
  413fce:	and    edx,0x3
  413fd1:	test   rdx,rdx
  413fd4:	jne    413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413fd6:	mov    DWORD PTR [rsp+0x18],esi
  413fda:	mov    edi,esi
  413fdc:	sub    edi,DWORD PTR [r12+rsi*1]
  413fe0:	mov    eax,0x1d
  413fe5:	test   edi,0x80000001
  413feb:	jne    413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413fed:	mov    edx,edi
  413fef:	lea    rbx,[rdx+0x2]
  413ff3:	mov    eax,0x1b
  413ff8:	cmp    rbx,rcx
  413ffb:	ja     413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  413ffd:	movzx  ebp,WORD PTR [r12+rdx*1]
  414002:	mov    WORD PTR [rsp+0x1e],bp
  414007:	mov    eax,0x1e
  41400c:	test   bpl,0x1
  414010:	jne    413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  414012:	add    edi,ebp
  414014:	cmp    edi,ecx
  414016:	ja     413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  414018:	mov    eax,0x1c
  41401d:	cmp    bp,0x4
  414021:	jb     413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  414027:	mov    eax,ebx
  414029:	movzx  ebp,WORD PTR [r12+rax*1]
  41402e:	mov    WORD PTR [rsp+0x1c],bp
  414033:	mov    edi,ecx
  414035:	sub    edi,esi
  414037:	mov    eax,0x14
  41403c:	cmp    edi,ebp
  41403e:	jb     413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  414044:	add    rdx,r12
  414047:	mov    QWORD PTR [rsp+0x10],rdx
  41404c:	mov    QWORD PTR [rsp],r12
  414050:	mov    DWORD PTR [rsp+0x8],ecx
  414054:	mov    rdi,rsp
  414057:	call   r14
  41405a:	jmp    413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  41405f:	mov    eax,0x3
  414064:	jmp    413f98 <flatcc_verify_table_as_nested_root@@Base+0x208>
  414069:	nop    DWORD PTR [rax+0x0]

0000000000414070 <flatcc_verify_union_field@@Base>:
  414070:	push   rbp
  414071:	push   r14
  414073:	push   rbx
  414074:	sub    rsp,0x20
  414078:	lea    eax,[rsi+rsi*1]
  41407b:	add    eax,0x2
  41407e:	add    esi,esi
  414080:	movzx  r10d,WORD PTR [rdi+0x1e]
  414085:	cmp    ax,r10w
  414089:	jae    414168 <flatcc_verify_union_field@@Base+0xf8>
  41408f:	mov    rbx,QWORD PTR [rdi+0x10]
  414093:	movzx  eax,ax
  414096:	movzx  r9d,WORD PTR [rbx+rax*1]
  41409b:	test   r9,r9
  41409e:	je     414168 <flatcc_verify_union_field@@Base+0xf8>
  4140a4:	mov    eax,0xd
  4140a9:	cmp    r9w,WORD PTR [rdi+0x1c]
  4140ae:	jae    41418e <flatcc_verify_union_field@@Base+0x11e>
  4140b4:	mov    r8,QWORD PTR [rdi]
  4140b7:	add    esi,0x4
  4140ba:	mov    al,0x1
  4140bc:	cmp    si,r10w
  4140c0:	jae    4140cd <flatcc_verify_union_field@@Base+0x5d>
  4140c2:	movzx  eax,si
  4140c5:	cmp    WORD PTR [rbx+rax*1],0x0
  4140ca:	sete   al
  4140cd:	mov    r14d,DWORD PTR [rdi+0x18]
  4140d1:	lea    r11,[r8+r14*1]
  4140d5:	mov    bpl,BYTE PTR [r9+r11*1]
  4140d9:	test   al,al
  4140db:	jne    4140eb <flatcc_verify_union_field@@Base+0x7b>
  4140dd:	mov    eax,0x18
  4140e2:	test   bpl,bpl
  4140e5:	je     41418e <flatcc_verify_union_field@@Base+0x11e>
  4140eb:	xor    eax,eax
  4140ed:	test   bpl,bpl
  4140f0:	je     41418e <flatcc_verify_union_field@@Base+0x11e>
  4140f6:	cmp    si,r10w
  4140fa:	jae    414197 <flatcc_verify_union_field@@Base+0x127>
  414100:	movzx  eax,si
  414103:	movzx  esi,WORD PTR [rbx+rax*1]
  414107:	test   esi,esi
  414109:	je     414197 <flatcc_verify_union_field@@Base+0x127>
  41410f:	lea    edx,[rsi+0x4]
  414112:	movzx  ebp,WORD PTR [rdi+0x1c]
  414116:	mov    eax,0xd
  41411b:	cmp    edx,ebp
  41411d:	ja     41418e <flatcc_verify_union_field@@Base+0x11e>
  41411f:	add    r14d,esi
  414122:	mov    eax,0xc
  414127:	test   r14b,0x3
  41412b:	jne    41418e <flatcc_verify_union_field@@Base+0x11e>
  41412d:	mov    eax,0x0
  414132:	test   r14d,r14d
  414135:	je     41418e <flatcc_verify_union_field@@Base+0x11e>
  414137:	mov    QWORD PTR [rsp],r8
  41413b:	mov    eax,DWORD PTR [rdi+0x8]
  41413e:	mov    DWORD PTR [rsp+0x8],eax
  414142:	mov    eax,DWORD PTR [rdi+0xc]
  414145:	mov    DWORD PTR [rsp+0xc],eax
  414149:	mov    DWORD PTR [rsp+0x14],r14d
  41414e:	mov    eax,r14d
  414151:	mov    eax,DWORD PTR [r8+rax*1]
  414155:	mov    DWORD PTR [rsp+0x18],eax
  414159:	mov    al,BYTE PTR [r11+r9*1]
  41415d:	mov    BYTE PTR [rsp+0x10],al
  414161:	mov    rdi,rsp
  414164:	call   rcx
  414166:	jmp    41418e <flatcc_verify_union_field@@Base+0x11e>
  414168:	add    esi,0x4
  41416b:	cmp    si,r10w
  41416f:	jae    414184 <flatcc_verify_union_field@@Base+0x114>
  414171:	mov    rcx,QWORD PTR [rdi+0x10]
  414175:	movzx  esi,si
  414178:	mov    eax,0x17
  41417d:	cmp    WORD PTR [rcx+rsi*1],0x0
  414182:	jne    41418e <flatcc_verify_union_field@@Base+0x11e>
  414184:	test   edx,edx
  414186:	mov    eax,0x15
  41418b:	cmove  eax,edx
  41418e:	add    rsp,0x20
  414192:	pop    rbx
  414193:	pop    r14
  414195:	pop    rbp
  414196:	ret    
  414197:	xor    eax,eax
  414199:	test   edx,edx
  41419b:	setne  al
  41419e:	shl    eax,0x2
  4141a1:	jmp    41418e <flatcc_verify_union_field@@Base+0x11e>
  4141a3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4141ad:	nop    DWORD PTR [rax]

00000000004141b0 <flatcc_verify_union_vector_field@@Base>:
  4141b0:	push   rbp
  4141b1:	push   r15
  4141b3:	push   r14
  4141b5:	push   r13
  4141b7:	push   r12
  4141b9:	push   rbx
  4141ba:	sub    rsp,0x28
  4141be:	mov    r12,rcx
  4141c1:	lea    ebx,[rsi+rsi*1]
  4141c4:	add    ebx,0x2
  4141c7:	add    esi,esi
  4141c9:	movzx  ecx,WORD PTR [rdi+0x1e]
  4141cd:	cmp    bx,cx
  4141d0:	jae    4141e2 <flatcc_verify_union_vector_field@@Base+0x32>
  4141d2:	mov    r10,QWORD PTR [rdi+0x10]
  4141d6:	movzx  r14d,bx
  4141da:	cmp    WORD PTR [r10+r14*1],0x0
  4141e0:	jne    414217 <flatcc_verify_union_vector_field@@Base+0x67>
  4141e2:	lea    eax,[rsi+0x4]
  4141e5:	cmp    ax,cx
  4141e8:	jae    414275 <flatcc_verify_union_vector_field@@Base+0xc5>
  4141ee:	test   edx,edx
  4141f0:	je     41420a <flatcc_verify_union_vector_field@@Base+0x5a>
  4141f2:	mov    r8,QWORD PTR [rdi+0x10]
  4141f6:	movzx  ebp,ax
  4141f9:	mov    eax,0x16
  4141fe:	cmp    WORD PTR [r8+rbp*1],0x0
  414204:	je     41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  41420a:	cmp    bx,cx
  41420d:	jae    414284 <flatcc_verify_union_vector_field@@Base+0xd4>
  41420f:	mov    r10,QWORD PTR [rdi+0x10]
  414213:	movzx  r14d,bx
  414217:	movzx  ebp,WORD PTR [r10+r14*1]
  41421c:	test   ebp,ebp
  41421e:	je     414284 <flatcc_verify_union_vector_field@@Base+0xd4>
  414220:	lea    ebx,[rbp+0x4]
  414223:	movzx  eax,WORD PTR [rdi+0x1c]
  414227:	cmp    ebx,eax
  414229:	ja     41429d <flatcc_verify_union_vector_field@@Base+0xed>
  41422b:	add    ebp,DWORD PTR [rdi+0x18]
  41422e:	test   bpl,0x3
  414232:	jne    41429d <flatcc_verify_union_vector_field@@Base+0xed>
  414234:	test   ebp,ebp
  414236:	je     414337 <flatcc_verify_union_vector_field@@Base+0x187>
  41423c:	mov    r8,QWORD PTR [rdi]
  41423f:	mov    eax,ebp
  414241:	mov    ebx,DWORD PTR [r8+rax*1]
  414245:	add    ebx,ebp
  414247:	cmp    ebx,ebp
  414249:	jbe    41429d <flatcc_verify_union_vector_field@@Base+0xed>
  41424b:	mov    r11d,DWORD PTR [rdi+0x8]
  41424f:	mov    r9d,ebx
  414252:	lea    rbp,[r9+0x4]
  414256:	cmp    rbp,r11
  414259:	ja     41429d <flatcc_verify_union_vector_field@@Base+0xed>
  41425b:	and    ebp,0x3
  41425e:	test   rbp,rbp
  414261:	jne    41429d <flatcc_verify_union_vector_field@@Base+0xed>
  414263:	sub    r11d,ebx
  414266:	add    r11d,0xfffffffc
  41426a:	cmp    r11d,DWORD PTR [r8+r9*1]
  41426e:	jb     41429d <flatcc_verify_union_vector_field@@Base+0xed>
  414270:	jmp    414337 <flatcc_verify_union_vector_field@@Base+0x187>
  414275:	mov    eax,0x16
  41427a:	test   edx,edx
  41427c:	jne    41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  414282:	jmp    41420a <flatcc_verify_union_vector_field@@Base+0x5a>
  414284:	test   edx,edx
  414286:	je     414324 <flatcc_verify_union_vector_field@@Base+0x174>
  41428c:	cmp    bx,cx
  41428f:	jae    414444 <flatcc_verify_union_vector_field@@Base+0x294>
  414295:	mov    r10,QWORD PTR [rdi+0x10]
  414299:	movzx  r14d,bx
  41429d:	movzx  esi,WORD PTR [r10+r14*1]
  4142a2:	test   esi,esi
  4142a4:	je     414444 <flatcc_verify_union_vector_field@@Base+0x294>
  4142aa:	lea    ecx,[rsi+0x4]
  4142ad:	movzx  edx,WORD PTR [rdi+0x1c]
  4142b1:	mov    eax,0xd
  4142b6:	cmp    ecx,edx
  4142b8:	ja     41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  4142be:	add    esi,DWORD PTR [rdi+0x18]
  4142c1:	mov    eax,0xc
  4142c6:	test   sil,0x3
  4142ca:	jne    41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  4142d0:	test   esi,esi
  4142d2:	je     41445d <flatcc_verify_union_vector_field@@Base+0x2ad>
  4142d8:	mov    rcx,QWORD PTR [rdi]
  4142db:	mov    eax,esi
  4142dd:	mov    edx,DWORD PTR [rcx+rax*1]
  4142e0:	add    edx,esi
  4142e2:	mov    eax,0x10
  4142e7:	cmp    edx,esi
  4142e9:	jbe    41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  4142ef:	mov    esi,DWORD PTR [rdi+0x8]
  4142f2:	mov    edi,edx
  4142f4:	lea    rbp,[rdi+0x4]
  4142f8:	cmp    rbp,rsi
  4142fb:	ja     41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  414301:	and    ebp,0x3
  414304:	test   rbp,rbp
  414307:	jne    41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  41430d:	sub    esi,edx
  41430f:	add    esi,0xfffffffc
  414312:	xor    edx,edx
  414314:	cmp    esi,DWORD PTR [rcx+rdi*1]
  414317:	mov    eax,0x1a
  41431c:	cmovae eax,edx
  41431f:	jmp    41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  414324:	xor    eax,eax
  414326:	cmp    bx,cx
  414329:	jae    41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  41432f:	mov    r10,QWORD PTR [rdi+0x10]
  414333:	movzx  r14d,bx
  414337:	movzx  ebp,WORD PTR [r10+r14*1]
  41433c:	xor    eax,eax
  41433e:	test   rbp,rbp
  414341:	je     41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  414347:	mov    r15,QWORD PTR [rdi]
  41434a:	mov    r8d,DWORD PTR [rdi+0x18]
  41434e:	lea    r9,[r15+r8*1]
  414352:	add    r9,rbp
  414355:	je     41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  41435b:	add    esi,0x4
  41435e:	cmp    si,cx
  414361:	jae    414444 <flatcc_verify_union_vector_field@@Base+0x294>
  414367:	movzx  eax,si
  41436a:	movzx  ecx,WORD PTR [r10+rax*1]
  41436f:	test   ecx,ecx
  414371:	je     414444 <flatcc_verify_union_vector_field@@Base+0x294>
  414377:	lea    edx,[rcx+0x4]
  41437a:	movzx  esi,WORD PTR [rdi+0x1c]
  41437e:	mov    eax,0xd
  414383:	cmp    edx,esi
  414385:	ja     41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  41438b:	lea    ebx,[r8+rcx*1]
  41438f:	mov    eax,0xc
  414394:	test   bl,0x3
  414397:	jne    41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  41439d:	mov    eax,0x0
  4143a2:	test   ebx,ebx
  4143a4:	je     41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  4143aa:	mov    esi,DWORD PTR [rdi+0xc]
  4143ad:	test   esi,esi
  4143af:	jle    414461 <flatcc_verify_union_vector_field@@Base+0x2b1>
  4143b5:	mov    eax,ebx
  4143b7:	mov    edx,DWORD PTR [r15+rax*1]
  4143bb:	lea    ebp,[rdx+rbx*1]
  4143be:	mov    eax,0x10
  4143c3:	cmp    ebp,ebx
  4143c5:	jbe    41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  4143cb:	mov    r10d,DWORD PTR [rdi+0x8]
  4143cf:	mov    ebx,ebp
  4143d1:	lea    rdi,[rbx+0x4]
  4143d5:	cmp    rdi,r10
  4143d8:	ja     41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  4143da:	and    edi,0x3
  4143dd:	test   rdi,rdi
  4143e0:	jne    41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  4143e2:	mov    ebx,DWORD PTR [r15+rbx*1]
  4143e6:	mov    eax,0x19
  4143eb:	cmp    ebx,0x3fffffff
  4143f1:	ja     41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  4143f3:	mov    edi,r10d
  4143f6:	sub    edi,ebp
  4143f8:	add    edi,0xfffffffc
  4143fb:	lea    ebp,[rbx*4+0x0]
  414402:	mov    eax,0x1a
  414407:	cmp    edi,ebp
  414409:	jb     41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  41440b:	mov    r13d,DWORD PTR [r9]
  41440e:	mov    edi,DWORD PTR [r13+r9*1+0x0]
  414413:	mov    eax,0x22
  414418:	cmp    ebx,edi
  41441a:	jne    41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  41441c:	dec    esi
  41441e:	mov    QWORD PTR [rsp+0x8],r15
  414423:	mov    DWORD PTR [rsp+0x10],r10d
  414428:	mov    DWORD PTR [rsp+0x14],esi
  41442c:	test   edi,edi
  41442e:	je     41445d <flatcc_verify_union_vector_field@@Base+0x2ad>
  414430:	mov    rbx,rdi
  414433:	add    r13,r9
  414436:	add    edx,r8d
  414439:	lea    ebp,[rcx+rdx*1]
  41443c:	add    ebp,0x4
  41443f:	xor    r14d,r14d
  414442:	jmp    414479 <flatcc_verify_union_vector_field@@Base+0x2c9>
  414444:	xor    eax,eax
  414446:	test   edx,edx
  414448:	setne  al
  41444b:	shl    eax,0x2
  41444e:	add    rsp,0x28
  414452:	pop    rbx
  414453:	pop    r12
  414455:	pop    r13
  414457:	pop    r14
  414459:	pop    r15
  41445b:	pop    rbp
  41445c:	ret    
  41445d:	xor    eax,eax
  41445f:	jmp    41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  414461:	mov    eax,0x3
  414466:	jmp    41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  414468:	test   cl,cl
  41446a:	jne    4144b6 <flatcc_verify_union_vector_field@@Base+0x306>
  41446c:	inc    r14
  41446f:	add    ebp,0x4
  414472:	xor    eax,eax
  414474:	cmp    rbx,r14
  414477:	je     41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  414479:	mov    eax,ebp
  41447b:	mov    eax,DWORD PTR [r15+rax*1]
  41447f:	movzx  ecx,BYTE PTR [r13+r14*1+0x4]
  414485:	test   eax,eax
  414487:	je     414468 <flatcc_verify_union_vector_field@@Base+0x2b8>
  414489:	test   cl,cl
  41448b:	je     4144af <flatcc_verify_union_vector_field@@Base+0x2ff>
  41448d:	mov    BYTE PTR [rsp+0x18],cl
  414491:	mov    DWORD PTR [rsp+0x1c],ebp
  414495:	mov    DWORD PTR [rsp+0x20],eax
  414499:	lea    rdi,[rsp+0x8]
  41449e:	call   r12
  4144a1:	test   eax,eax
  4144a3:	je     41446c <flatcc_verify_union_vector_field@@Base+0x2bc>
  4144a5:	lea    rdi,[rsp+0x8]
  4144aa:	call   r12
  4144ad:	jmp    41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  4144af:	mov    eax,0x21
  4144b4:	jmp    41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  4144b6:	mov    eax,0x20
  4144bb:	jmp    41444e <flatcc_verify_union_vector_field@@Base+0x29e>
  4144bd:	nop    DWORD PTR [rax]

00000000004144c0 <__libc_csu_init@@Base>:
  4144c0:	endbr64 
  4144c4:	push   r15
  4144c6:	lea    r15,[rip+0x97e3]        # 41dcb0 <flatcc_builder_padding_base@@Base+0x58d0>
  4144cd:	push   r14
  4144cf:	mov    r14,rdx
  4144d2:	push   r13
  4144d4:	mov    r13,rsi
  4144d7:	push   r12
  4144d9:	mov    r12d,edi
  4144dc:	push   rbp
  4144dd:	lea    rbp,[rip+0x97d4]        # 41dcb8 <flatcc_builder_padding_base@@Base+0x58d8>
  4144e4:	push   rbx
  4144e5:	sub    rbp,r15
  4144e8:	sub    rsp,0x8
  4144ec:	call   404000 <free@plt-0x30>
  4144f1:	sar    rbp,0x3
  4144f5:	je     414516 <__libc_csu_init@@Base+0x56>
  4144f7:	xor    ebx,ebx
  4144f9:	nop    DWORD PTR [rax+0x0]
  414500:	mov    rdx,r14
  414503:	mov    rsi,r13
  414506:	mov    edi,r12d
  414509:	call   QWORD PTR [r15+rbx*8]
  41450d:	add    rbx,0x1
  414511:	cmp    rbp,rbx
  414514:	jne    414500 <__libc_csu_init@@Base+0x40>
  414516:	add    rsp,0x8
  41451a:	pop    rbx
  41451b:	pop    rbp
  41451c:	pop    r12
  41451e:	pop    r13
  414520:	pop    r14
  414522:	pop    r15
  414524:	ret    
  414525:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000414530 <__libc_csu_fini@@Base>:
  414530:	endbr64 
  414534:	ret    

Disassembly of section .fini:

0000000000414538 <.fini>:
  414538:	endbr64 
  41453c:	sub    rsp,0x8
  414540:	add    rsp,0x8
  414544:	ret    
