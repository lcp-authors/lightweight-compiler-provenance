
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0x9fe9]        # 40cff8 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0x9fe2]        # 40d008 <flatcc_builder_padding_base@@Base+0x3148>
  403026:	jmp    QWORD PTR [rip+0x9fe4]        # 40d010 <flatcc_builder_padding_base@@Base+0x3150>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0x9fe2]        # 40d018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <strlen@plt>:
  403040:	jmp    QWORD PTR [rip+0x9fda]        # 40d020 <strlen@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <__stack_chk_fail@plt>:
  403050:	jmp    QWORD PTR [rip+0x9fd2]        # 40d028 <__stack_chk_fail@GLIBC_2.4>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <__assert_fail@plt>:
  403060:	jmp    QWORD PTR [rip+0x9fca]        # 40d030 <__assert_fail@GLIBC_2.2.5>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <memset@plt>:
  403070:	jmp    QWORD PTR [rip+0x9fc2]        # 40d038 <memset@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <memchr@plt>:
  403080:	jmp    QWORD PTR [rip+0x9fba]        # 40d040 <memchr@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <memcmp@plt>:
  403090:	jmp    QWORD PTR [rip+0x9fb2]        # 40d048 <memcmp@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <strcmp@plt>:
  4030a0:	jmp    QWORD PTR [rip+0x9faa]        # 40d050 <strcmp@GLIBC_2.2.5>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <memcpy@plt>:
  4030b0:	jmp    QWORD PTR [rip+0x9fa2]        # 40d058 <memcpy@GLIBC_2.14>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <malloc@plt>:
  4030c0:	jmp    QWORD PTR [rip+0x9f9a]        # 40d060 <malloc@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <realloc@plt>:
  4030d0:	jmp    QWORD PTR [rip+0x9f92]        # 40d068 <realloc@GLIBC_2.2.5>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

00000000004030e0 <__printf_chk@plt>:
  4030e0:	jmp    QWORD PTR [rip+0x9f8a]        # 40d070 <__printf_chk@GLIBC_2.3.4>
  4030e6:	push   0xb
  4030eb:	jmp    403020 <free@plt-0x10>

00000000004030f0 <posix_memalign@plt>:
  4030f0:	jmp    QWORD PTR [rip+0x9f82]        # 40d078 <posix_memalign@GLIBC_2.2.5>
  4030f6:	push   0xc
  4030fb:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

0000000000403100 <main@@Base-0x100>:
  403100:	lea    rcx,[rip+0x6239]        # 409340 <_IO_stdin_used@@Base+0x340>
  403107:	lea    rsi,[rip+0x5efa]        # 409008 <_IO_stdin_used@@Base+0x8>
  40310e:	lea    rdi,[rip+0x5f6b]        # 409080 <_IO_stdin_used@@Base+0x80>
  403115:	sub    rsp,0x8
  403119:	mov    edx,0x94
  40311e:	call   403060 <__assert_fail@plt>
  403123:	lea    rcx,[rip+0x61f6]        # 409320 <_IO_stdin_used@@Base+0x320>
  40312a:	lea    rsi,[rip+0x5ed7]        # 409008 <_IO_stdin_used@@Base+0x8>
  403131:	lea    rdi,[rip+0x5f48]        # 409080 <_IO_stdin_used@@Base+0x80>
  403138:	sub    rsp,0x8
  40313c:	mov    edx,0x95
  403141:	call   403060 <__assert_fail@plt>
  403146:	lea    rcx,[rip+0x6233]        # 409380 <_IO_stdin_used@@Base+0x380>
  40314d:	lea    rsi,[rip+0x5f54]        # 4090a8 <_IO_stdin_used@@Base+0xa8>
  403154:	lea    rdi,[rip+0x5fc5]        # 409120 <_IO_stdin_used@@Base+0x120>
  40315b:	sub    rsp,0x8
  40315f:	mov    edx,0x32
  403164:	call   403060 <__assert_fail@plt>
  403169:	lea    rcx,[rip+0x6d20]        # 409e90 <_IO_stdin_used@@Base+0xe90>
  403170:	lea    rsi,[rip+0x6259]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  403177:	lea    rdi,[rip+0x65e9]        # 409767 <_IO_stdin_used@@Base+0x767>
  40317e:	sub    rsp,0x8
  403182:	mov    edx,0x134
  403187:	call   403060 <__assert_fail@plt>
  40318c:	lea    rcx,[rip+0x6c8d]        # 409e20 <_IO_stdin_used@@Base+0xe20>
  403193:	lea    rsi,[rip+0x6236]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40319a:	lea    rdi,[rip+0x65c6]        # 409767 <_IO_stdin_used@@Base+0x767>
  4031a1:	sub    rsp,0x8
  4031a5:	mov    edx,0x2a1
  4031aa:	call   403060 <__assert_fail@plt>
  4031af:	lea    rcx,[rip+0x6c5a]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  4031b6:	lea    rsi,[rip+0x6213]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4031bd:	lea    rdi,[rip+0x65a3]        # 409767 <_IO_stdin_used@@Base+0x767>
  4031c4:	sub    rsp,0x8
  4031c8:	mov    edx,0x28b
  4031cd:	call   403060 <__assert_fail@plt>
  4031d2:	lea    rcx,[rip+0x6b97]        # 409d70 <_IO_stdin_used@@Base+0xd70>
  4031d9:	lea    rsi,[rip+0x61f0]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4031e0:	lea    rdi,[rip+0x6559]        # 409740 <_IO_stdin_used@@Base+0x740>
  4031e7:	sub    rsp,0x8
  4031eb:	mov    edx,0x37c
  4031f0:	call   403060 <__assert_fail@plt>
  4031f5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4031ff:	nop

0000000000403200 <main@@Base>:
  403200:	push   r12
  403202:	push   rbp
  403203:	push   rbx
  403204:	sub    rsp,0x1a0
  40320b:	lea    rbx,[rsp+0x10]
  403210:	mov    rax,QWORD PTR fs:0x28
  403219:	mov    QWORD PTR [rsp+0x198],rax
  403221:	xor    eax,eax
  403223:	mov    rdi,rbx
  403226:	call   404980 <flatcc_builder_init@@Base>
  40322b:	xor    esi,esi
  40322d:	mov    rdi,rbx
  403230:	call   403470 <create_monster_bottom_up@@Base>
  403235:	test   eax,eax
  403237:	jne    4032fe <main@@Base+0xfe>
  40323d:	lea    rbp,[rsp+0x8]
  403242:	mov    rdi,rbx
  403245:	mov    rsi,rbp
  403248:	call   408050 <flatcc_builder_finalize_aligned_buffer@@Base>
  40324d:	mov    rdi,rax
  403250:	call   4081a0 <flatcc_builder_aligned_free@@Base>
  403255:	mov    rdi,rbx
  403258:	call   404b40 <flatcc_builder_reset@@Base>
  40325d:	mov    esi,0x1
  403262:	mov    rdi,rbx
  403265:	call   403470 <create_monster_bottom_up@@Base>
  40326a:	test   eax,eax
  40326c:	jne    403341 <main@@Base+0x141>
  403272:	mov    rsi,rbp
  403275:	mov    rdi,rbx
  403278:	call   408050 <flatcc_builder_finalize_aligned_buffer@@Base>
  40327d:	mov    r12,rax
  403280:	mov    rdi,rax
  403283:	call   403cf0 <access_monster_buffer@@Base>
  403288:	mov    rdi,r12
  40328b:	call   4081a0 <flatcc_builder_aligned_free@@Base>
  403290:	mov    rdi,rbx
  403293:	call   404b40 <flatcc_builder_reset@@Base>
  403298:	mov    rdi,rbx
  40329b:	call   4039a0 <create_monster_top_down@@Base>
  4032a0:	mov    rsi,rbp
  4032a3:	mov    rdi,rbx
  4032a6:	call   407fc0 <flatcc_builder_finalize_buffer@@Base>
  4032ab:	mov    rdi,rax
  4032ae:	mov    rbp,rax
  4032b1:	call   403cf0 <access_monster_buffer@@Base>
  4032b6:	test   eax,eax
  4032b8:	jne    403322 <main@@Base+0x122>
  4032ba:	mov    rdi,rbp
  4032bd:	call   403030 <free@plt>
  4032c2:	mov    rdi,rbx
  4032c5:	call   404b50 <flatcc_builder_clear@@Base>
  4032ca:	lea    rsi,[rip+0x5ff7]        # 4092c8 <_IO_stdin_used@@Base+0x2c8>
  4032d1:	xor    eax,eax
  4032d3:	mov    edi,0x1
  4032d8:	call   4030e0 <__printf_chk@plt>
  4032dd:	xor    eax,eax
  4032df:	mov    rdx,QWORD PTR [rsp+0x198]
  4032e7:	xor    rdx,QWORD PTR fs:0x28
  4032f0:	jne    40331d <main@@Base+0x11d>
  4032f2:	add    rsp,0x1a0
  4032f9:	pop    rbx
  4032fa:	pop    rbp
  4032fb:	pop    r12
  4032fd:	ret    
  4032fe:	lea    rcx,[rip+0x600b]        # 409310 <_IO_stdin_used@@Base+0x310>
  403305:	lea    rsi,[rip+0x5f54]        # 409260 <_IO_stdin_used@@Base+0x260>
  40330c:	lea    rdi,[rip+0x6454]        # 409767 <_IO_stdin_used@@Base+0x767>
  403313:	mov    edx,0x134
  403318:	call   403060 <__assert_fail@plt>
  40331d:	call   403050 <__stack_chk_fail@plt>
  403322:	lea    rcx,[rip+0x5fe7]        # 409310 <_IO_stdin_used@@Base+0x310>
  403329:	lea    rsi,[rip+0x5f30]        # 409260 <_IO_stdin_used@@Base+0x260>
  403330:	lea    rdi,[rip+0x6430]        # 409767 <_IO_stdin_used@@Base+0x767>
  403337:	mov    edx,0x156
  40333c:	call   403060 <__assert_fail@plt>
  403341:	lea    rcx,[rip+0x5fc8]        # 409310 <_IO_stdin_used@@Base+0x310>
  403348:	lea    rsi,[rip+0x5f11]        # 409260 <_IO_stdin_used@@Base+0x260>
  40334f:	lea    rdi,[rip+0x6411]        # 409767 <_IO_stdin_used@@Base+0x767>
  403356:	mov    edx,0x14f
  40335b:	call   403060 <__assert_fail@plt>

0000000000403360 <_start@@Base>:
  403360:	endbr64 
  403364:	xor    ebp,ebp
  403366:	mov    r9,rdx
  403369:	pop    rsi
  40336a:	mov    rdx,rsp
  40336d:	and    rsp,0xfffffffffffffff0
  403371:	push   rax
  403372:	push   rsp
  403373:	mov    r8,0x4088e0
  40337a:	mov    rcx,0x408870
  403381:	mov    rdi,0x403200
  403388:	call   QWORD PTR [rip+0x9c62]        # 40cff0 <__libc_start_main@GLIBC_2.2.5>
  40338e:	hlt    
  40338f:	nop
  403390:	endbr64 
  403394:	ret    
  403395:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40339f:	nop
  4033a0:	mov    eax,0x40d097
  4033a5:	push   rbp
  4033a6:	sub    rax,0x40d090
  4033ac:	cmp    rax,0xe
  4033b0:	mov    rbp,rsp
  4033b3:	jbe    4033d0 <_start@@Base+0x70>
  4033b5:	mov    eax,0x0
  4033ba:	test   rax,rax
  4033bd:	je     4033d0 <_start@@Base+0x70>
  4033bf:	pop    rbp
  4033c0:	mov    edi,0x40d090
  4033c5:	jmp    rax
  4033c7:	nop    WORD PTR [rax+rax*1+0x0]
  4033d0:	pop    rbp
  4033d1:	ret    
  4033d2:	nop    DWORD PTR [rax+0x0]
  4033d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4033e0:	mov    esi,0x40d090
  4033e5:	push   rbp
  4033e6:	sub    rsi,0x40d090
  4033ed:	sar    rsi,0x3
  4033f1:	mov    rbp,rsp
  4033f4:	mov    rax,rsi
  4033f7:	shr    rax,0x3f
  4033fb:	add    rsi,rax
  4033fe:	sar    rsi,1
  403401:	je     403418 <_start@@Base+0xb8>
  403403:	mov    eax,0x0
  403408:	test   rax,rax
  40340b:	je     403418 <_start@@Base+0xb8>
  40340d:	pop    rbp
  40340e:	mov    edi,0x40d090
  403413:	jmp    rax
  403415:	nop    DWORD PTR [rax]
  403418:	pop    rbp
  403419:	ret    
  40341a:	nop    WORD PTR [rax+rax*1+0x0]
  403420:	cmp    BYTE PTR [rip+0x9c69],0x0        # 40d090 <__bss_start@@Base>
  403427:	jne    40343a <_start@@Base+0xda>
  403429:	push   rbp
  40342a:	mov    rbp,rsp
  40342d:	call   4033a0 <_start@@Base+0x40>
  403432:	pop    rbp
  403433:	mov    BYTE PTR [rip+0x9c56],0x1        # 40d090 <__bss_start@@Base>
  40343a:	repz ret 
  40343c:	nop    DWORD PTR [rax+0x0]
  403440:	mov    edi,0x40ce18
  403445:	cmp    QWORD PTR [rdi],0x0
  403449:	jne    403450 <_start@@Base+0xf0>
  40344b:	jmp    4033e0 <_start@@Base+0x80>
  40344d:	nop    DWORD PTR [rax]
  403450:	mov    eax,0x0
  403455:	test   rax,rax
  403458:	je     40344b <_start@@Base+0xeb>
  40345a:	push   rbp
  40345b:	mov    rbp,rsp
  40345e:	call   rax
  403460:	pop    rbp
  403461:	jmp    4033e0 <_start@@Base+0x80>
  403466:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000403470 <create_monster_bottom_up@@Base>:
  403470:	push   r15
  403472:	push   r14
  403474:	mov    r15d,esi
  403477:	push   r13
  403479:	push   r12
  40347b:	lea    rsi,[rip+0x5e7d]        # 4092ff <_IO_stdin_used@@Base+0x2ff>
  403482:	push   rbp
  403483:	push   rbx
  403484:	mov    rbx,rdi
  403487:	sub    rsp,0x28
  40348b:	mov    rax,QWORD PTR fs:0x28
  403494:	mov    QWORD PTR [rsp+0x18],rax
  403499:	xor    eax,eax
  40349b:	call   407700 <flatcc_builder_create_string_str@@Base>
  4034a0:	lea    rsi,[rip+0x5e5e]        # 409305 <_IO_stdin_used@@Base+0x305>
  4034a7:	mov    rdi,rbx
  4034aa:	mov    r12d,eax
  4034ad:	call   407700 <flatcc_builder_create_string_str@@Base>
  4034b2:	mov    esi,0x2
  4034b7:	mov    rdi,rbx
  4034ba:	mov    ebp,eax
  4034bc:	call   405ff0 <flatcc_builder_start_table@@Base>
  4034c1:	test   eax,eax
  4034c3:	jne    4034ce <create_monster_bottom_up@@Base+0x5e>
  4034c5:	test   r12d,r12d
  4034c8:	jne    403730 <create_monster_bottom_up@@Base+0x2c0>
  4034ce:	xor    r14d,r14d
  4034d1:	mov    esi,0x2
  4034d6:	mov    rdi,rbx
  4034d9:	call   405ff0 <flatcc_builder_start_table@@Base>
  4034de:	test   eax,eax
  4034e0:	jne    4034ea <create_monster_bottom_up@@Base+0x7a>
  4034e2:	test   ebp,ebp
  4034e4:	jne    4037a0 <create_monster_bottom_up@@Base+0x330>
  4034ea:	xor    ebp,ebp
  4034ec:	lea    rsi,[rip+0x5e16]        # 409309 <_IO_stdin_used@@Base+0x309>
  4034f3:	mov    rdi,rbx
  4034f6:	call   407700 <flatcc_builder_create_string_str@@Base>
  4034fb:	lea    rsi,[rsp+0xe]
  403500:	mov    r9d,0xffffffff
  403506:	mov    r8d,0x1
  40350c:	mov    ecx,0x1
  403511:	mov    edx,0xa
  403516:	mov    rdi,rbx
  403519:	mov    r12d,eax
  40351c:	mov    BYTE PTR [rsp+0xe],0x0
  403521:	mov    BYTE PTR [rsp+0xf],0x1
  403526:	mov    BYTE PTR [rsp+0x10],0x2
  40352b:	mov    BYTE PTR [rsp+0x11],0x3
  403530:	mov    BYTE PTR [rsp+0x12],0x4
  403535:	mov    BYTE PTR [rsp+0x13],0x5
  40353a:	mov    BYTE PTR [rsp+0x14],0x6
  40353f:	mov    BYTE PTR [rsp+0x15],0x7
  403544:	mov    BYTE PTR [rsp+0x16],0x8
  403549:	mov    BYTE PTR [rsp+0x17],0x9
  40354e:	call   406b40 <flatcc_builder_create_vector@@Base>
  403553:	mov    rdi,rbx
  403556:	mov    r13d,eax
  403559:	call   405e50 <flatcc_builder_start_offset_vector@@Base>
  40355e:	test   r14d,r14d
  403561:	jne    403700 <create_monster_bottom_up@@Base+0x290>
  403567:	test   ebp,ebp
  403569:	jne    4036e8 <create_monster_bottom_up@@Base+0x278>
  40356f:	mov    rdi,rbx
  403572:	call   406de0 <flatcc_builder_end_offset_vector@@Base>
  403577:	xor    ecx,ecx
  403579:	xor    edx,edx
  40357b:	xor    esi,esi
  40357d:	test   r15d,r15d
  403580:	mov    r14d,eax
  403583:	mov    rdi,rbx
  403586:	je     4036c0 <create_monster_bottom_up@@Base+0x250>
  40358c:	call   405380 <flatcc_builder_start_buffer@@Base>
  403591:	test   eax,eax
  403593:	jne    4035a2 <create_monster_bottom_up@@Base+0x132>
  403595:	mov    esi,0xa
  40359a:	mov    rdi,rbx
  40359d:	call   405ff0 <flatcc_builder_start_table@@Base>
  4035a2:	xor    esi,esi
  4035a4:	mov    ecx,0x4
  4035a9:	mov    edx,0xc
  4035ae:	mov    rdi,rbx
  4035b1:	call   407890 <flatcc_builder_table_add@@Base>
  4035b6:	test   rax,rax
  4035b9:	je     4035cf <create_monster_bottom_up@@Base+0x15f>
  4035bb:	mov    DWORD PTR [rax],0x3f800000
  4035c1:	mov    DWORD PTR [rax+0x4],0x40000000
  4035c8:	mov    DWORD PTR [rax+0x8],0x40400000
  4035cf:	mov    ecx,0x2
  4035d4:	mov    edx,0x2
  4035d9:	mov    esi,0x2
  4035de:	mov    rdi,rbx
  4035e1:	call   407890 <flatcc_builder_table_add@@Base>
  4035e6:	test   rax,rax
  4035e9:	je     4035f3 <create_monster_bottom_up@@Base+0x183>
  4035eb:	mov    edx,0x12c
  4035f0:	mov    WORD PTR [rax],dx
  4035f3:	test   r12d,r12d
  4035f6:	jne    403808 <create_monster_bottom_up@@Base+0x398>
  4035fc:	test   r13d,r13d
  4035ff:	jne    40382a <create_monster_bottom_up@@Base+0x3ba>
  403605:	mov    ecx,0x1
  40360a:	mov    edx,0x1
  40360f:	mov    esi,0x6
  403614:	mov    rdi,rbx
  403617:	call   407890 <flatcc_builder_table_add@@Base>
  40361c:	test   rax,rax
  40361f:	je     403624 <create_monster_bottom_up@@Base+0x1b4>
  403621:	mov    BYTE PTR [rax],0x0
  403624:	test   r14d,r14d
  403627:	jne    403710 <create_monster_bottom_up@@Base+0x2a0>
  40362d:	test   ebp,ebp
  40362f:	je     403669 <create_monster_bottom_up@@Base+0x1f9>
  403631:	mov    ecx,0x1
  403636:	mov    edx,0x1
  40363b:	mov    esi,0x8
  403640:	mov    rdi,rbx
  403643:	call   407890 <flatcc_builder_table_add@@Base>
  403648:	test   rax,rax
  40364b:	mov    r12,rax
  40364e:	je     403669 <create_monster_bottom_up@@Base+0x1f9>
  403650:	mov    esi,0x9
  403655:	mov    rdi,rbx
  403658:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  40365d:	test   rax,rax
  403660:	je     403669 <create_monster_bottom_up@@Base+0x1f9>
  403662:	mov    BYTE PTR [r12],0x1
  403667:	mov    DWORD PTR [rax],ebp
  403669:	lea    rsi,[rip+0x5d4c]        # 4093bc <_IO_stdin_used@@Base+0x3bc>
  403670:	xor    edx,edx
  403672:	mov    rdi,rbx
  403675:	call   406930 <flatcc_builder_check_required@@Base>
  40367a:	test   eax,eax
  40367c:	je     403996 <create_monster_bottom_up@@Base+0x526>
  403682:	mov    rdi,rbx
  403685:	call   4069b0 <flatcc_builder_end_table@@Base>
  40368a:	mov    esi,eax
  40368c:	mov    rdi,rbx
  40368f:	call   405460 <flatcc_builder_end_buffer@@Base>
  403694:	xor    eax,eax
  403696:	mov    rcx,QWORD PTR [rsp+0x18]
  40369b:	xor    rcx,QWORD PTR fs:0x28
  4036a4:	jne    403972 <create_monster_bottom_up@@Base+0x502>
  4036aa:	add    rsp,0x28
  4036ae:	pop    rbx
  4036af:	pop    rbp
  4036b0:	pop    r12
  4036b2:	pop    r13
  4036b4:	pop    r14
  4036b6:	pop    r15
  4036b8:	ret    
  4036b9:	nop    DWORD PTR [rax+0x0]
  4036c0:	call   405380 <flatcc_builder_start_buffer@@Base>
  4036c5:	test   eax,eax
  4036c7:	jne    403694 <create_monster_bottom_up@@Base+0x224>
  4036c9:	mov    esi,0xa
  4036ce:	mov    rdi,rbx
  4036d1:	call   405ff0 <flatcc_builder_start_table@@Base>
  4036d6:	test   eax,eax
  4036d8:	je     403850 <create_monster_bottom_up@@Base+0x3e0>
  4036de:	xor    esi,esi
  4036e0:	jmp    40368c <create_monster_bottom_up@@Base+0x21c>
  4036e2:	nop    WORD PTR [rax+rax*1+0x0]
  4036e8:	mov    esi,ebp
  4036ea:	mov    rdi,rbx
  4036ed:	call   405980 <flatcc_builder_offset_vector_push@@Base>
  4036f2:	jmp    40356f <create_monster_bottom_up@@Base+0xff>
  4036f7:	nop    WORD PTR [rax+rax*1+0x0]
  403700:	mov    esi,r14d
  403703:	mov    rdi,rbx
  403706:	call   405980 <flatcc_builder_offset_vector_push@@Base>
  40370b:	jmp    403567 <create_monster_bottom_up@@Base+0xf7>
  403710:	mov    esi,0x7
  403715:	mov    rdi,rbx
  403718:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  40371d:	test   rax,rax
  403720:	je     40362d <create_monster_bottom_up@@Base+0x1bd>
  403726:	mov    DWORD PTR [rax],r14d
  403729:	jmp    40362d <create_monster_bottom_up@@Base+0x1bd>
  40372e:	xchg   ax,ax
  403730:	xor    esi,esi
  403732:	mov    rdi,rbx
  403735:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  40373a:	test   rax,rax
  40373d:	je     4034ce <create_monster_bottom_up@@Base+0x5e>
  403743:	mov    DWORD PTR [rax],r12d
  403746:	mov    ecx,0x2
  40374b:	mov    edx,0x2
  403750:	mov    esi,0x1
  403755:	mov    rdi,rbx
  403758:	call   407890 <flatcc_builder_table_add@@Base>
  40375d:	test   rax,rax
  403760:	je     4034ce <create_monster_bottom_up@@Base+0x5e>
  403766:	mov    edi,0x3
  40376b:	lea    rsi,[rip+0x5c48]        # 4093ba <_IO_stdin_used@@Base+0x3ba>
  403772:	xor    edx,edx
  403774:	mov    WORD PTR [rax],di
  403777:	mov    rdi,rbx
  40377a:	call   406930 <flatcc_builder_check_required@@Base>
  40377f:	test   eax,eax
  403781:	je     403977 <create_monster_bottom_up@@Base+0x507>
  403787:	mov    rdi,rbx
  40378a:	call   4069b0 <flatcc_builder_end_table@@Base>
  40378f:	mov    r14d,eax
  403792:	jmp    4034d1 <create_monster_bottom_up@@Base+0x61>
  403797:	nop    WORD PTR [rax+rax*1+0x0]
  4037a0:	xor    esi,esi
  4037a2:	mov    rdi,rbx
  4037a5:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  4037aa:	test   rax,rax
  4037ad:	je     4034ea <create_monster_bottom_up@@Base+0x7a>
  4037b3:	mov    DWORD PTR [rax],ebp
  4037b5:	mov    ecx,0x2
  4037ba:	mov    edx,0x2
  4037bf:	mov    esi,0x1
  4037c4:	mov    rdi,rbx
  4037c7:	call   407890 <flatcc_builder_table_add@@Base>
  4037cc:	test   rax,rax
  4037cf:	je     4034ea <create_monster_bottom_up@@Base+0x7a>
  4037d5:	mov    esi,0x5
  4037da:	xor    edx,edx
  4037dc:	mov    rdi,rbx
  4037df:	mov    WORD PTR [rax],si
  4037e2:	lea    rsi,[rip+0x5bd1]        # 4093ba <_IO_stdin_used@@Base+0x3ba>
  4037e9:	call   406930 <flatcc_builder_check_required@@Base>
  4037ee:	test   eax,eax
  4037f0:	je     403977 <create_monster_bottom_up@@Base+0x507>
  4037f6:	mov    rdi,rbx
  4037f9:	call   4069b0 <flatcc_builder_end_table@@Base>
  4037fe:	mov    ebp,eax
  403800:	jmp    4034ec <create_monster_bottom_up@@Base+0x7c>
  403805:	nop    DWORD PTR [rax]
  403808:	mov    esi,0x3
  40380d:	mov    rdi,rbx
  403810:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  403815:	test   rax,rax
  403818:	je     4035fc <create_monster_bottom_up@@Base+0x18c>
  40381e:	test   r13d,r13d
  403821:	mov    DWORD PTR [rax],r12d
  403824:	je     403605 <create_monster_bottom_up@@Base+0x195>
  40382a:	mov    esi,0x5
  40382f:	mov    rdi,rbx
  403832:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  403837:	test   rax,rax
  40383a:	je     403605 <create_monster_bottom_up@@Base+0x195>
  403840:	mov    DWORD PTR [rax],r13d
  403843:	jmp    403605 <create_monster_bottom_up@@Base+0x195>
  403848:	nop    DWORD PTR [rax+rax*1+0x0]
  403850:	xor    esi,esi
  403852:	mov    ecx,0x4
  403857:	mov    edx,0xc
  40385c:	mov    rdi,rbx
  40385f:	call   407890 <flatcc_builder_table_add@@Base>
  403864:	test   rax,rax
  403867:	je     4036de <create_monster_bottom_up@@Base+0x26e>
  40386d:	test   r12d,r12d
  403870:	mov    DWORD PTR [rax],0x3f800000
  403876:	mov    DWORD PTR [rax+0x4],0x40000000
  40387d:	mov    DWORD PTR [rax+0x8],0x40400000
  403884:	je     4036de <create_monster_bottom_up@@Base+0x26e>
  40388a:	mov    esi,0x3
  40388f:	mov    rdi,rbx
  403892:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  403897:	test   rax,rax
  40389a:	je     4036de <create_monster_bottom_up@@Base+0x26e>
  4038a0:	test   r13d,r13d
  4038a3:	mov    DWORD PTR [rax],r12d
  4038a6:	je     4036de <create_monster_bottom_up@@Base+0x26e>
  4038ac:	mov    esi,0x5
  4038b1:	mov    rdi,rbx
  4038b4:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  4038b9:	test   rax,rax
  4038bc:	je     4036de <create_monster_bottom_up@@Base+0x26e>
  4038c2:	test   r14d,r14d
  4038c5:	mov    DWORD PTR [rax],r13d
  4038c8:	je     4036de <create_monster_bottom_up@@Base+0x26e>
  4038ce:	mov    esi,0x7
  4038d3:	mov    rdi,rbx
  4038d6:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  4038db:	test   rax,rax
  4038de:	je     4036de <create_monster_bottom_up@@Base+0x26e>
  4038e4:	mov    DWORD PTR [rax],r14d
  4038e7:	mov    esi,0x9
  4038ec:	mov    rdi,rbx
  4038ef:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  4038f4:	test   rax,rax
  4038f7:	je     4036de <create_monster_bottom_up@@Base+0x26e>
  4038fd:	mov    DWORD PTR [rax],ebp
  4038ff:	mov    ecx,0x2
  403904:	mov    edx,0x2
  403909:	mov    esi,0x2
  40390e:	mov    rdi,rbx
  403911:	call   407890 <flatcc_builder_table_add@@Base>
  403916:	test   rax,rax
  403919:	je     4036de <create_monster_bottom_up@@Base+0x26e>
  40391f:	mov    ecx,0x12c
  403924:	mov    edx,0x1
  403929:	mov    esi,0x6
  40392e:	mov    WORD PTR [rax],cx
  403931:	mov    rdi,rbx
  403934:	mov    ecx,0x1
  403939:	call   407890 <flatcc_builder_table_add@@Base>
  40393e:	test   rax,rax
  403941:	je     4036de <create_monster_bottom_up@@Base+0x26e>
  403947:	mov    BYTE PTR [rax],0x0
  40394a:	mov    ecx,0x1
  40394f:	mov    edx,0x1
  403954:	mov    esi,0x8
  403959:	mov    rdi,rbx
  40395c:	call   407890 <flatcc_builder_table_add@@Base>
  403961:	test   rax,rax
  403964:	je     4036de <create_monster_bottom_up@@Base+0x26e>
  40396a:	mov    BYTE PTR [rax],0x1
  40396d:	jmp    403669 <create_monster_bottom_up@@Base+0x1f9>
  403972:	call   403050 <__stack_chk_fail@plt>
  403977:	lea    rcx,[rip+0x5a22]        # 4093a0 <_IO_stdin_used@@Base+0x3a0>
  40397e:	lea    rsi,[rip+0x5723]        # 4090a8 <_IO_stdin_used@@Base+0xa8>
  403985:	lea    rdi,[rip+0x5834]        # 4091c0 <_IO_stdin_used@@Base+0x1c0>
  40398c:	mov    edx,0x34
  403991:	call   403060 <__assert_fail@plt>
  403996:	call   403146 <posix_memalign@plt+0x56>
  40399b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004039a0 <create_monster_top_down@@Base>:
  4039a0:	push   r12
  4039a2:	push   rbp
  4039a3:	xor    ecx,ecx
  4039a5:	push   rbx
  4039a6:	xor    edx,edx
  4039a8:	xor    esi,esi
  4039aa:	mov    rbx,rdi
  4039ad:	sub    rsp,0x20
  4039b1:	mov    rax,QWORD PTR fs:0x28
  4039ba:	mov    QWORD PTR [rsp+0x18],rax
  4039bf:	xor    eax,eax
  4039c1:	mov    BYTE PTR [rsp+0xe],0x0
  4039c6:	mov    BYTE PTR [rsp+0xf],0x1
  4039cb:	mov    BYTE PTR [rsp+0x10],0x2
  4039d0:	mov    BYTE PTR [rsp+0x11],0x3
  4039d5:	mov    BYTE PTR [rsp+0x12],0x4
  4039da:	mov    BYTE PTR [rsp+0x13],0x5
  4039df:	mov    BYTE PTR [rsp+0x14],0x6
  4039e4:	mov    BYTE PTR [rsp+0x15],0x7
  4039e9:	mov    BYTE PTR [rsp+0x16],0x8
  4039ee:	mov    BYTE PTR [rsp+0x17],0x9
  4039f3:	call   405380 <flatcc_builder_start_buffer@@Base>
  4039f8:	test   eax,eax
  4039fa:	jne    403a09 <create_monster_top_down@@Base+0x69>
  4039fc:	mov    esi,0xa
  403a01:	mov    rdi,rbx
  403a04:	call   405ff0 <flatcc_builder_start_table@@Base>
  403a09:	xor    esi,esi
  403a0b:	mov    ecx,0x4
  403a10:	mov    edx,0xc
  403a15:	mov    rdi,rbx
  403a18:	call   407890 <flatcc_builder_table_add@@Base>
  403a1d:	test   rax,rax
  403a20:	je     403a36 <create_monster_top_down@@Base+0x96>
  403a22:	mov    DWORD PTR [rax],0x3f800000
  403a28:	mov    DWORD PTR [rax+0x4],0x40000000
  403a2f:	mov    DWORD PTR [rax+0x8],0x40400000
  403a36:	mov    ecx,0x2
  403a3b:	mov    edx,0x2
  403a40:	mov    esi,0x2
  403a45:	mov    rdi,rbx
  403a48:	call   407890 <flatcc_builder_table_add@@Base>
  403a4d:	test   rax,rax
  403a50:	je     403a5a <create_monster_top_down@@Base+0xba>
  403a52:	mov    esi,0x12c
  403a57:	mov    WORD PTR [rax],si
  403a5a:	lea    rsi,[rip+0x58a8]        # 409309 <_IO_stdin_used@@Base+0x309>
  403a61:	mov    rdi,rbx
  403a64:	call   407700 <flatcc_builder_create_string_str@@Base>
  403a69:	test   eax,eax
  403a6b:	mov    ebp,eax
  403a6d:	je     403a83 <create_monster_top_down@@Base+0xe3>
  403a6f:	mov    esi,0x3
  403a74:	mov    rdi,rbx
  403a77:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  403a7c:	test   rax,rax
  403a7f:	je     403a83 <create_monster_top_down@@Base+0xe3>
  403a81:	mov    DWORD PTR [rax],ebp
  403a83:	lea    rsi,[rsp+0xe]
  403a88:	mov    r9d,0xffffffff
  403a8e:	mov    r8d,0x1
  403a94:	mov    ecx,0x1
  403a99:	mov    edx,0xa
  403a9e:	mov    rdi,rbx
  403aa1:	call   406b40 <flatcc_builder_create_vector@@Base>
  403aa6:	test   eax,eax
  403aa8:	mov    ebp,eax
  403aaa:	je     403ac0 <create_monster_top_down@@Base+0x120>
  403aac:	mov    esi,0x5
  403ab1:	mov    rdi,rbx
  403ab4:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  403ab9:	test   rax,rax
  403abc:	je     403ac0 <create_monster_top_down@@Base+0x120>
  403abe:	mov    DWORD PTR [rax],ebp
  403ac0:	mov    ecx,0x1
  403ac5:	mov    edx,0x1
  403aca:	mov    esi,0x6
  403acf:	mov    rdi,rbx
  403ad2:	call   407890 <flatcc_builder_table_add@@Base>
  403ad7:	test   rax,rax
  403ada:	je     403adf <create_monster_top_down@@Base+0x13f>
  403adc:	mov    BYTE PTR [rax],0x0
  403adf:	mov    rdi,rbx
  403ae2:	call   405e50 <flatcc_builder_start_offset_vector@@Base>
  403ae7:	lea    rsi,[rip+0x5811]        # 4092ff <_IO_stdin_used@@Base+0x2ff>
  403aee:	mov    rdi,rbx
  403af1:	call   407700 <flatcc_builder_create_string_str@@Base>
  403af6:	mov    esi,0x2
  403afb:	mov    rdi,rbx
  403afe:	mov    ebp,eax
  403b00:	call   405ff0 <flatcc_builder_start_table@@Base>
  403b05:	test   eax,eax
  403b07:	jne    403b11 <create_monster_top_down@@Base+0x171>
  403b09:	test   ebp,ebp
  403b0b:	jne    403c50 <create_monster_top_down@@Base+0x2b0>
  403b11:	lea    rsi,[rip+0x57ed]        # 409305 <_IO_stdin_used@@Base+0x305>
  403b18:	mov    rdi,rbx
  403b1b:	call   407700 <flatcc_builder_create_string_str@@Base>
  403b20:	mov    esi,0x2
  403b25:	mov    rdi,rbx
  403b28:	mov    ebp,eax
  403b2a:	call   405ff0 <flatcc_builder_start_table@@Base>
  403b2f:	test   eax,eax
  403b31:	jne    403b37 <create_monster_top_down@@Base+0x197>
  403b33:	test   ebp,ebp
  403b35:	jne    403b40 <create_monster_top_down@@Base+0x1a0>
  403b37:	mov    eax,DWORD PTR ds:0x0
  403b3e:	ud2    
  403b40:	xor    esi,esi
  403b42:	mov    rdi,rbx
  403b45:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  403b4a:	test   rax,rax
  403b4d:	je     403b37 <create_monster_top_down@@Base+0x197>
  403b4f:	mov    DWORD PTR [rax],ebp
  403b51:	mov    ecx,0x2
  403b56:	mov    edx,0x2
  403b5b:	mov    esi,0x1
  403b60:	mov    rdi,rbx
  403b63:	call   407890 <flatcc_builder_table_add@@Base>
  403b68:	test   rax,rax
  403b6b:	je     403b37 <create_monster_top_down@@Base+0x197>
  403b6d:	mov    edx,0x5
  403b72:	lea    rsi,[rip+0x5841]        # 4093ba <_IO_stdin_used@@Base+0x3ba>
  403b79:	mov    rdi,rbx
  403b7c:	mov    WORD PTR [rax],dx
  403b7f:	xor    edx,edx
  403b81:	call   406930 <flatcc_builder_check_required@@Base>
  403b86:	test   eax,eax
  403b88:	je     403ccb <create_monster_top_down@@Base+0x32b>
  403b8e:	mov    rdi,rbx
  403b91:	call   4069b0 <flatcc_builder_end_table@@Base>
  403b96:	test   eax,eax
  403b98:	mov    esi,eax
  403b9a:	je     403b37 <create_monster_top_down@@Base+0x197>
  403b9c:	mov    rdi,rbx
  403b9f:	call   405980 <flatcc_builder_offset_vector_push@@Base>
  403ba4:	mov    rdi,rbx
  403ba7:	mov    r12d,DWORD PTR [rax]
  403baa:	call   406de0 <flatcc_builder_end_offset_vector@@Base>
  403baf:	test   eax,eax
  403bb1:	mov    ebp,eax
  403bb3:	je     403bc9 <create_monster_top_down@@Base+0x229>
  403bb5:	mov    esi,0x7
  403bba:	mov    rdi,rbx
  403bbd:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  403bc2:	test   rax,rax
  403bc5:	je     403bc9 <create_monster_top_down@@Base+0x229>
  403bc7:	mov    DWORD PTR [rax],ebp
  403bc9:	test   r12d,r12d
  403bcc:	je     403c06 <create_monster_top_down@@Base+0x266>
  403bce:	mov    ecx,0x1
  403bd3:	mov    edx,0x1
  403bd8:	mov    esi,0x8
  403bdd:	mov    rdi,rbx
  403be0:	call   407890 <flatcc_builder_table_add@@Base>
  403be5:	test   rax,rax
  403be8:	mov    rbp,rax
  403beb:	je     403c06 <create_monster_top_down@@Base+0x266>
  403bed:	mov    esi,0x9
  403bf2:	mov    rdi,rbx
  403bf5:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  403bfa:	test   rax,rax
  403bfd:	je     403c06 <create_monster_top_down@@Base+0x266>
  403bff:	mov    BYTE PTR [rbp+0x0],0x1
  403c03:	mov    DWORD PTR [rax],r12d
  403c06:	lea    rsi,[rip+0x57af]        # 4093bc <_IO_stdin_used@@Base+0x3bc>
  403c0d:	xor    edx,edx
  403c0f:	mov    rdi,rbx
  403c12:	call   406930 <flatcc_builder_check_required@@Base>
  403c17:	test   eax,eax
  403c19:	je     403cc1 <create_monster_top_down@@Base+0x321>
  403c1f:	mov    rdi,rbx
  403c22:	call   4069b0 <flatcc_builder_end_table@@Base>
  403c27:	mov    rdi,rbx
  403c2a:	mov    esi,eax
  403c2c:	call   405460 <flatcc_builder_end_buffer@@Base>
  403c31:	xor    eax,eax
  403c33:	mov    rcx,QWORD PTR [rsp+0x18]
  403c38:	xor    rcx,QWORD PTR fs:0x28
  403c41:	jne    403cc6 <create_monster_top_down@@Base+0x326>
  403c47:	add    rsp,0x20
  403c4b:	pop    rbx
  403c4c:	pop    rbp
  403c4d:	pop    r12
  403c4f:	ret    
  403c50:	xor    esi,esi
  403c52:	mov    rdi,rbx
  403c55:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  403c5a:	test   rax,rax
  403c5d:	je     403b11 <create_monster_top_down@@Base+0x171>
  403c63:	mov    DWORD PTR [rax],ebp
  403c65:	mov    ecx,0x2
  403c6a:	mov    edx,0x2
  403c6f:	mov    esi,0x1
  403c74:	mov    rdi,rbx
  403c77:	call   407890 <flatcc_builder_table_add@@Base>
  403c7c:	test   rax,rax
  403c7f:	je     403b11 <create_monster_top_down@@Base+0x171>
  403c85:	mov    ecx,0x3
  403c8a:	lea    rsi,[rip+0x5729]        # 4093ba <_IO_stdin_used@@Base+0x3ba>
  403c91:	xor    edx,edx
  403c93:	mov    WORD PTR [rax],cx
  403c96:	mov    rdi,rbx
  403c99:	call   406930 <flatcc_builder_check_required@@Base>
  403c9e:	test   eax,eax
  403ca0:	je     403ccb <create_monster_top_down@@Base+0x32b>
  403ca2:	mov    rdi,rbx
  403ca5:	call   4069b0 <flatcc_builder_end_table@@Base>
  403caa:	test   eax,eax
  403cac:	mov    esi,eax
  403cae:	je     403b11 <create_monster_top_down@@Base+0x171>
  403cb4:	mov    rdi,rbx
  403cb7:	call   405980 <flatcc_builder_offset_vector_push@@Base>
  403cbc:	jmp    403b11 <create_monster_top_down@@Base+0x171>
  403cc1:	call   403146 <posix_memalign@plt+0x56>
  403cc6:	call   403050 <__stack_chk_fail@plt>
  403ccb:	lea    rcx,[rip+0x56ce]        # 4093a0 <_IO_stdin_used@@Base+0x3a0>
  403cd2:	lea    rsi,[rip+0x53cf]        # 4090a8 <_IO_stdin_used@@Base+0xa8>
  403cd9:	lea    rdi,[rip+0x54e0]        # 4091c0 <_IO_stdin_used@@Base+0x1c0>
  403ce0:	mov    edx,0x34
  403ce5:	call   403060 <__assert_fail@plt>
  403cea:	nop    WORD PTR [rax+rax*1+0x0]

0000000000403cf0 <access_monster_buffer@@Base>:
  403cf0:	test   rdi,rdi
  403cf3:	push   rbx
  403cf4:	je     4040b7 <access_monster_buffer@@Base+0x3c7>
  403cfa:	mov    eax,DWORD PTR [rdi]
  403cfc:	add    rax,rdi
  403cff:	je     4040b7 <access_monster_buffer@@Base+0x3c7>
  403d05:	movsxd rdx,DWORD PTR [rax]
  403d08:	mov    r9,rax
  403d0b:	sub    r9,rdx
  403d0e:	movzx  r8d,WORD PTR [r9]
  403d12:	cmp    r8w,0x9
  403d17:	jbe    403df0 <access_monster_buffer@@Base+0x100>
  403d1d:	movzx  r10d,WORD PTR [r9+0x8]
  403d22:	mov    ecx,0x64
  403d27:	test   r10w,r10w
  403d2b:	je     403d35 <access_monster_buffer@@Base+0x45>
  403d2d:	movzx  edx,r10w
  403d31:	movzx  ecx,WORD PTR [rax+rdx*1]
  403d35:	movzx  r11d,WORD PTR [r9+0x6]
  403d3a:	mov    edi,0x96
  403d3f:	test   r11w,r11w
  403d43:	je     403d4d <access_monster_buffer@@Base+0x5d>
  403d45:	movzx  edx,r11w
  403d49:	movzx  edi,WORD PTR [rax+rdx*1]
  403d4d:	cmp    r8w,0xb
  403d52:	jbe    40424d <access_monster_buffer@@Base+0x55d>
  403d58:	movzx  edx,WORD PTR [r9+0xa]
  403d5d:	test   dx,dx
  403d60:	je     40424d <access_monster_buffer@@Base+0x55d>
  403d66:	add    rdx,rax
  403d69:	mov    esi,DWORD PTR [rdx]
  403d6b:	lea    rsi,[rdx+rsi*1+0x4]
  403d70:	test   rsi,rsi
  403d73:	je     404256 <access_monster_buffer@@Base+0x566>
  403d79:	mov    ebx,DWORD PTR [rsi-0x4]
  403d7c:	cmp    cx,0x12c
  403d81:	jne    403dfb <access_monster_buffer@@Base+0x10b>
  403d83:	cmp    di,0x96
  403d88:	jne    4040d6 <access_monster_buffer@@Base+0x3e6>
  403d8e:	lea    rdi,[rip+0x5574]        # 409309 <_IO_stdin_used@@Base+0x309>
  403d95:	mov    ecx,0x4
  403d9a:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  403d9c:	jne    4040f5 <access_monster_buffer@@Base+0x405>
  403da2:	cmp    rbx,0x3
  403da6:	jne    404114 <access_monster_buffer@@Base+0x424>
  403dac:	test   r10w,r10w
  403db0:	je     404133 <access_monster_buffer@@Base+0x443>
  403db6:	test   r11w,r11w
  403dba:	jne    404152 <access_monster_buffer@@Base+0x462>
  403dc0:	cmp    r8w,0x5
  403dc5:	ja     403e20 <access_monster_buffer@@Base+0x130>
  403dc7:	lea    rcx,[rip+0x5592]        # 409360 <_IO_stdin_used@@Base+0x360>
  403dce:	lea    rsi,[rip+0x548b]        # 409260 <_IO_stdin_used@@Base+0x260>
  403dd5:	lea    rdi,[rip+0x598b]        # 409767 <_IO_stdin_used@@Base+0x767>
  403ddc:	mov    edx,0xe8
  403de1:	call   403060 <__assert_fail@plt>
  403de6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403df0:	cmp    r8w,0x7
  403df5:	ja     404279 <access_monster_buffer@@Base+0x589>
  403dfb:	lea    rcx,[rip+0x555e]        # 409360 <_IO_stdin_used@@Base+0x360>
  403e02:	lea    rsi,[rip+0x5457]        # 409260 <_IO_stdin_used@@Base+0x260>
  403e09:	lea    rdi,[rip+0x5957]        # 409767 <_IO_stdin_used@@Base+0x767>
  403e10:	mov    edx,0xdb
  403e15:	call   403060 <__assert_fail@plt>
  403e1a:	nop    WORD PTR [rax+rax*1+0x0]
  403e20:	movzx  edx,WORD PTR [r9+0x4]
  403e25:	test   dx,dx
  403e28:	je     403dc7 <access_monster_buffer@@Base+0xd7>
  403e2a:	add    rdx,rax
  403e2d:	je     403dc7 <access_monster_buffer@@Base+0xd7>
  403e2f:	vmovss xmm1,DWORD PTR [rip+0x5589]        # 4093c0 <_IO_stdin_used@@Base+0x3c0>
  403e37:	vucomiss xmm1,DWORD PTR [rdx]
  403e3b:	vmovss xmm0,DWORD PTR [rdx+0x4]
  403e40:	vmovss xmm2,DWORD PTR [rdx+0x8]
  403e45:	jp     404171 <access_monster_buffer@@Base+0x481>
  403e4b:	jne    404171 <access_monster_buffer@@Base+0x481>
  403e51:	vucomiss xmm0,DWORD PTR [rip+0x556b]        # 4093c4 <_IO_stdin_used@@Base+0x3c4>
  403e59:	jp     404190 <access_monster_buffer@@Base+0x4a0>
  403e5f:	jne    404190 <access_monster_buffer@@Base+0x4a0>
  403e65:	vucomiss xmm2,DWORD PTR [rip+0x555b]        # 4093c8 <_IO_stdin_used@@Base+0x3c8>
  403e6d:	jp     4041af <access_monster_buffer@@Base+0x4bf>
  403e73:	jne    4041af <access_monster_buffer@@Base+0x4bf>
  403e79:	cmp    r8w,0xf
  403e7e:	ja     403ea0 <access_monster_buffer@@Base+0x1b0>
  403e80:	lea    rcx,[rip+0x54d9]        # 409360 <_IO_stdin_used@@Base+0x360>
  403e87:	lea    rsi,[rip+0x53d2]        # 409260 <_IO_stdin_used@@Base+0x260>
  403e8e:	lea    rdi,[rip+0x58d2]        # 409767 <_IO_stdin_used@@Base+0x767>
  403e95:	mov    edx,0x105
  403e9a:	call   403060 <__assert_fail@plt>
  403e9f:	nop
  403ea0:	movzx  edx,WORD PTR [r9+0xe]
  403ea5:	test   dx,dx
  403ea8:	je     403e80 <access_monster_buffer@@Base+0x190>
  403eaa:	add    rdx,rax
  403ead:	mov    ecx,DWORD PTR [rdx]
  403eaf:	lea    rdx,[rdx+rcx*1+0x4]
  403eb4:	test   rdx,rdx
  403eb7:	je     403e80 <access_monster_buffer@@Base+0x190>
  403eb9:	cmp    DWORD PTR [rdx-0x4],0xa
  403ebd:	jne    4041ce <access_monster_buffer@@Base+0x4de>
  403ec3:	cmp    BYTE PTR [rdx+0x2],0x2
  403ec7:	jne    4041ed <access_monster_buffer@@Base+0x4fd>
  403ecd:	cmp    r8w,0x13
  403ed2:	ja     403ef8 <access_monster_buffer@@Base+0x208>
  403ed4:	lea    rcx,[rip+0x5485]        # 409360 <_IO_stdin_used@@Base+0x360>
  403edb:	lea    rsi,[rip+0x537e]        # 409260 <_IO_stdin_used@@Base+0x260>
  403ee2:	lea    rdi,[rip+0x587e]        # 409767 <_IO_stdin_used@@Base+0x767>
  403ee9:	mov    edx,0x10f
  403eee:	call   403060 <__assert_fail@plt>
  403ef3:	nop    DWORD PTR [rax+rax*1+0x0]
  403ef8:	movzx  edx,WORD PTR [r9+0x12]
  403efd:	test   dx,dx
  403f00:	je     403ed4 <access_monster_buffer@@Base+0x1e4>
  403f02:	add    rdx,rax
  403f05:	mov    ecx,DWORD PTR [rdx]
  403f07:	lea    rdx,[rdx+rcx*1+0x4]
  403f0c:	test   rdx,rdx
  403f0f:	je     403ed4 <access_monster_buffer@@Base+0x1e4>
  403f11:	cmp    DWORD PTR [rdx-0x4],0x2
  403f15:	jne    403ed4 <access_monster_buffer@@Base+0x1e4>
  403f17:	mov    ecx,DWORD PTR [rdx+0x4]
  403f1a:	lea    rcx,[rdx+rcx*1+0x4]
  403f1f:	test   rcx,rcx
  403f22:	je     403fcf <access_monster_buffer@@Base+0x2df>
  403f28:	movsxd rdx,DWORD PTR [rcx]
  403f2b:	mov    rdi,rcx
  403f2e:	sub    rdi,rdx
  403f31:	movzx  r10d,WORD PTR [rdi]
  403f35:	cmp    r10w,0x5
  403f3a:	ja     403f60 <access_monster_buffer@@Base+0x270>
  403f3c:	lea    rcx,[rip+0x541d]        # 409360 <_IO_stdin_used@@Base+0x360>
  403f43:	lea    rsi,[rip+0x5316]        # 409260 <_IO_stdin_used@@Base+0x260>
  403f4a:	lea    rdi,[rip+0x5816]        # 409767 <_IO_stdin_used@@Base+0x767>
  403f51:	mov    edx,0x113
  403f56:	call   403060 <__assert_fail@plt>
  403f5b:	nop    DWORD PTR [rax+rax*1+0x0]
  403f60:	movzx  edx,WORD PTR [rdi+0x4]
  403f64:	test   dx,dx
  403f67:	je     40425d <access_monster_buffer@@Base+0x56d>
  403f6d:	add    rdx,rcx
  403f70:	cmp    r10w,0x7
  403f75:	mov    esi,DWORD PTR [rdx]
  403f77:	lea    rsi,[rdx+rsi*1+0x4]
  403f7c:	ja     40420c <access_monster_buffer@@Base+0x51c>
  403f82:	xor    r10d,r10d
  403f85:	test   rsi,rsi
  403f88:	je     403f3c <access_monster_buffer@@Base+0x24c>
  403f8a:	lea    r11,[rip+0x5374]        # 409305 <_IO_stdin_used@@Base+0x305>
  403f91:	mov    ecx,0x4
  403f96:	mov    rdi,r11
  403f99:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  403f9b:	jne    403f3c <access_monster_buffer@@Base+0x24c>
  403f9d:	cmp    r10w,0x5
  403fa2:	jne    404098 <access_monster_buffer@@Base+0x3a8>
  403fa8:	cmp    r8w,0x15
  403fad:	jbe    403fbf <access_monster_buffer@@Base+0x2cf>
  403faf:	movzx  edx,WORD PTR [r9+0x14]
  403fb4:	test   dx,dx
  403fb7:	je     403fbf <access_monster_buffer@@Base+0x2cf>
  403fb9:	cmp    BYTE PTR [rax+rdx*1],0x1
  403fbd:	je     403fc8 <access_monster_buffer@@Base+0x2d8>
  403fbf:	xor    eax,eax
  403fc1:	pop    rbx
  403fc2:	ret    
  403fc3:	nop    DWORD PTR [rax+rax*1+0x0]
  403fc8:	cmp    r8w,0x17
  403fcd:	ja     403fd8 <access_monster_buffer@@Base+0x2e8>
  403fcf:	call   403100 <posix_memalign@plt+0x10>
  403fd4:	nop    DWORD PTR [rax+0x0]
  403fd8:	movzx  edx,WORD PTR [r9+0x16]
  403fdd:	test   dx,dx
  403fe0:	je     403fcf <access_monster_buffer@@Base+0x2df>
  403fe2:	add    rax,rdx
  403fe5:	mov    edx,DWORD PTR [rax]
  403fe7:	add    rax,rdx
  403fea:	je     403fcf <access_monster_buffer@@Base+0x2df>
  403fec:	movsxd rdx,DWORD PTR [rax]
  403fef:	mov    rcx,rax
  403ff2:	sub    rcx,rdx
  403ff5:	movzx  esi,WORD PTR [rcx]
  403ff8:	cmp    si,0x5
  403ffc:	jbe    404068 <access_monster_buffer@@Base+0x378>
  403ffe:	movzx  edx,WORD PTR [rcx+0x4]
  404002:	test   dx,dx
  404005:	je     40422a <access_monster_buffer@@Base+0x53a>
  40400b:	add    rdx,rax
  40400e:	mov    edi,DWORD PTR [rdx]
  404010:	lea    rdx,[rdx+rdi*1+0x4]
  404015:	cmp    si,0x7
  404019:	jbe    40406a <access_monster_buffer@@Base+0x37a>
  40401b:	movzx  ecx,WORD PTR [rcx+0x6]
  40401f:	test   cx,cx
  404022:	je     404231 <access_monster_buffer@@Base+0x541>
  404028:	movzx  eax,WORD PTR [rax+rcx*1]
  40402c:	mov    rsi,rdx
  40402f:	mov    ecx,0x4
  404034:	mov    rdi,r11
  404037:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  404039:	jne    404079 <access_monster_buffer@@Base+0x389>
  40403b:	cmp    ax,0x5
  40403f:	je     403fbf <access_monster_buffer@@Base+0x2cf>
  404045:	lea    rcx,[rip+0x5314]        # 409360 <_IO_stdin_used@@Base+0x360>
  40404c:	lea    rsi,[rip+0x520d]        # 409260 <_IO_stdin_used@@Base+0x260>
  404053:	lea    rdi,[rip+0x570d]        # 409767 <_IO_stdin_used@@Base+0x767>
  40405a:	mov    edx,0x11f
  40405f:	call   403060 <__assert_fail@plt>
  404064:	nop    DWORD PTR [rax+0x0]
  404068:	xor    edx,edx
  40406a:	mov    ecx,0x4
  40406f:	mov    rsi,rdx
  404072:	mov    rdi,r11
  404075:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
  404077:	je     404045 <access_monster_buffer@@Base+0x355>
  404079:	lea    rcx,[rip+0x52e0]        # 409360 <_IO_stdin_used@@Base+0x360>
  404080:	lea    rsi,[rip+0x51d9]        # 409260 <_IO_stdin_used@@Base+0x260>
  404087:	lea    rdi,[rip+0x56d9]        # 409767 <_IO_stdin_used@@Base+0x767>
  40408e:	mov    edx,0x11e
  404093:	call   403060 <__assert_fail@plt>
  404098:	lea    rcx,[rip+0x52c1]        # 409360 <_IO_stdin_used@@Base+0x360>
  40409f:	lea    rsi,[rip+0x51ba]        # 409260 <_IO_stdin_used@@Base+0x260>
  4040a6:	lea    rdi,[rip+0x56ba]        # 409767 <_IO_stdin_used@@Base+0x767>
  4040ad:	mov    edx,0x114
  4040b2:	call   403060 <__assert_fail@plt>
  4040b7:	lea    rcx,[rip+0x52a2]        # 409360 <_IO_stdin_used@@Base+0x360>
  4040be:	lea    rsi,[rip+0x519b]        # 409260 <_IO_stdin_used@@Base+0x260>
  4040c5:	lea    rdi,[rip+0x569b]        # 409767 <_IO_stdin_used@@Base+0x767>
  4040cc:	mov    edx,0xd3
  4040d1:	call   403060 <__assert_fail@plt>
  4040d6:	lea    rcx,[rip+0x5283]        # 409360 <_IO_stdin_used@@Base+0x360>
  4040dd:	lea    rsi,[rip+0x517c]        # 409260 <_IO_stdin_used@@Base+0x260>
  4040e4:	lea    rdi,[rip+0x567c]        # 409767 <_IO_stdin_used@@Base+0x767>
  4040eb:	mov    edx,0xdd
  4040f0:	call   403060 <__assert_fail@plt>
  4040f5:	lea    rcx,[rip+0x5264]        # 409360 <_IO_stdin_used@@Base+0x360>
  4040fc:	lea    rsi,[rip+0x515d]        # 409260 <_IO_stdin_used@@Base+0x260>
  404103:	lea    rdi,[rip+0x565d]        # 409767 <_IO_stdin_used@@Base+0x767>
  40410a:	mov    edx,0xde
  40410f:	call   403060 <__assert_fail@plt>
  404114:	lea    rcx,[rip+0x5245]        # 409360 <_IO_stdin_used@@Base+0x360>
  40411b:	lea    rsi,[rip+0x513e]        # 409260 <_IO_stdin_used@@Base+0x260>
  404122:	lea    rdi,[rip+0x563e]        # 409767 <_IO_stdin_used@@Base+0x767>
  404129:	mov    edx,0xdf
  40412e:	call   403060 <__assert_fail@plt>
  404133:	lea    rcx,[rip+0x5226]        # 409360 <_IO_stdin_used@@Base+0x360>
  40413a:	lea    rsi,[rip+0x511f]        # 409260 <_IO_stdin_used@@Base+0x260>
  404141:	lea    rdi,[rip+0x561f]        # 409767 <_IO_stdin_used@@Base+0x767>
  404148:	mov    edx,0xe3
  40414d:	call   403060 <__assert_fail@plt>
  404152:	lea    rcx,[rip+0x5207]        # 409360 <_IO_stdin_used@@Base+0x360>
  404159:	lea    rsi,[rip+0x5100]        # 409260 <_IO_stdin_used@@Base+0x260>
  404160:	lea    rdi,[rip+0x5600]        # 409767 <_IO_stdin_used@@Base+0x767>
  404167:	mov    edx,0xe4
  40416c:	call   403060 <__assert_fail@plt>
  404171:	lea    rcx,[rip+0x51e8]        # 409360 <_IO_stdin_used@@Base+0x360>
  404178:	lea    rsi,[rip+0x50e1]        # 409260 <_IO_stdin_used@@Base+0x260>
  40417f:	lea    rdi,[rip+0x55e1]        # 409767 <_IO_stdin_used@@Base+0x767>
  404186:	mov    edx,0xf0
  40418b:	call   403060 <__assert_fail@plt>
  404190:	lea    rcx,[rip+0x51c9]        # 409360 <_IO_stdin_used@@Base+0x360>
  404197:	lea    rsi,[rip+0x50c2]        # 409260 <_IO_stdin_used@@Base+0x260>
  40419e:	lea    rdi,[rip+0x55c2]        # 409767 <_IO_stdin_used@@Base+0x767>
  4041a5:	mov    edx,0xf1
  4041aa:	call   403060 <__assert_fail@plt>
  4041af:	lea    rcx,[rip+0x51aa]        # 409360 <_IO_stdin_used@@Base+0x360>
  4041b6:	lea    rsi,[rip+0x50a3]        # 409260 <_IO_stdin_used@@Base+0x260>
  4041bd:	lea    rdi,[rip+0x55a3]        # 409767 <_IO_stdin_used@@Base+0x767>
  4041c4:	mov    edx,0xf2
  4041c9:	call   403060 <__assert_fail@plt>
  4041ce:	lea    rcx,[rip+0x518b]        # 409360 <_IO_stdin_used@@Base+0x360>
  4041d5:	lea    rsi,[rip+0x5084]        # 409260 <_IO_stdin_used@@Base+0x260>
  4041dc:	lea    rdi,[rip+0x5584]        # 409767 <_IO_stdin_used@@Base+0x767>
  4041e3:	mov    edx,0x107
  4041e8:	call   403060 <__assert_fail@plt>
  4041ed:	lea    rcx,[rip+0x516c]        # 409360 <_IO_stdin_used@@Base+0x360>
  4041f4:	lea    rsi,[rip+0x5065]        # 409260 <_IO_stdin_used@@Base+0x260>
  4041fb:	lea    rdi,[rip+0x5565]        # 409767 <_IO_stdin_used@@Base+0x767>
  404202:	mov    edx,0x10b
  404207:	call   403060 <__assert_fail@plt>
  40420c:	movzx  edx,WORD PTR [rdi+0x6]
  404210:	xor    r10d,r10d
  404213:	test   dx,dx
  404216:	je     403f85 <access_monster_buffer@@Base+0x295>
  40421c:	nop    DWORD PTR [rax+0x0]
  404220:	movzx  r10d,WORD PTR [rcx+rdx*1]
  404225:	jmp    403f85 <access_monster_buffer@@Base+0x295>
  40422a:	xor    edx,edx
  40422c:	jmp    404015 <access_monster_buffer@@Base+0x325>
  404231:	lea    rsi,[rip+0x50cd]        # 409305 <_IO_stdin_used@@Base+0x305>
  404238:	mov    rdi,rdx
  40423b:	call   4030a0 <strcmp@plt>
  404240:	test   eax,eax
  404242:	je     404045 <access_monster_buffer@@Base+0x355>
  404248:	jmp    404079 <access_monster_buffer@@Base+0x389>
  40424d:	xor    esi,esi
  40424f:	xor    ebx,ebx
  404251:	jmp    403d7c <access_monster_buffer@@Base+0x8c>
  404256:	xor    ebx,ebx
  404258:	jmp    403d7c <access_monster_buffer@@Base+0x8c>
  40425d:	cmp    r10w,0x7
  404262:	jbe    403f3c <access_monster_buffer@@Base+0x24c>
  404268:	movzx  edx,WORD PTR [rdi+0x6]
  40426c:	test   dx,dx
  40426f:	je     403f3c <access_monster_buffer@@Base+0x24c>
  404275:	xor    esi,esi
  404277:	jmp    404220 <access_monster_buffer@@Base+0x530>
  404279:	mov    ecx,0x64
  40427e:	xor    r10d,r10d
  404281:	jmp    403d35 <access_monster_buffer@@Base+0x45>
  404286:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404290:	push   rbp
  404291:	push   rbx
  404292:	mov    ebp,edx
  404294:	mov    rbx,rdi
  404297:	mov    r8d,0x1
  40429d:	mov    ecx,0x1
  4042a2:	sub    rsp,0x8
  4042a6:	mov    edx,DWORD PTR [rdi+0x28]
  4042a9:	add    rdx,rsi
  4042ac:	lea    rsi,[rdi+0x68]
  4042b0:	mov    rdi,QWORD PTR [rdi+0x40]
  4042b4:	call   QWORD PTR [rbx+0x50]
  4042b7:	test   eax,eax
  4042b9:	jne    4042e8 <access_monster_buffer@@Base+0x5f8>
  4042bb:	mov    edx,DWORD PTR [rbx+0x28]
  4042be:	mov    rcx,rdx
  4042c1:	add    rdx,QWORD PTR [rbx+0x68]
  4042c5:	mov    QWORD PTR [rbx+0x18],rdx
  4042c9:	mov    edx,DWORD PTR [rbx+0x70]
  4042cc:	sub    edx,ecx
  4042ce:	cmp    ebp,edx
  4042d0:	cmovb  edx,ebp
  4042d3:	mov    DWORD PTR [rbx+0x24],edx
  4042d6:	mov    rdx,QWORD PTR [rbx+0x30]
  4042da:	mov    DWORD PTR [rdx+0x4],ebp
  4042dd:	add    rsp,0x8
  4042e1:	pop    rbx
  4042e2:	pop    rbp
  4042e3:	ret    
  4042e4:	nop    DWORD PTR [rax+0x0]
  4042e8:	mov    eax,0xffffffff
  4042ed:	jmp    4042dd <access_monster_buffer@@Base+0x5ed>
  4042ef:	nop

00000000004042f0 <flatcc_builder_default_alloc@@Base>:
  4042f0:	push   r12
  4042f2:	push   rbp
  4042f3:	mov    rbp,rsi
  4042f6:	push   rbx
  4042f7:	sub    rsp,0x10
  4042fb:	test   rdx,rdx
  4042fe:	jne    404330 <flatcc_builder_default_alloc@@Base+0x40>
  404300:	mov    rdi,QWORD PTR [rsi]
  404303:	xor    eax,eax
  404305:	test   rdi,rdi
  404308:	je     404327 <flatcc_builder_default_alloc@@Base+0x37>
  40430a:	mov    DWORD PTR [rsp+0xc],eax
  40430e:	call   403030 <free@plt>
  404313:	mov    eax,DWORD PTR [rsp+0xc]
  404317:	mov    QWORD PTR [rbp+0x0],0x0
  40431f:	mov    QWORD PTR [rbp+0x8],0x0
  404327:	add    rsp,0x10
  40432b:	pop    rbx
  40432c:	pop    rbp
  40432d:	pop    r12
  40432f:	ret    
  404330:	cmp    r8d,0x4
  404334:	je     4043d0 <flatcc_builder_default_alloc@@Base+0xe0>
  40433a:	jle    4043e0 <flatcc_builder_default_alloc@@Base+0xf0>
  404340:	cmp    r8d,0x5
  404344:	mov    rbx,rdx
  404347:	je     404368 <flatcc_builder_default_alloc@@Base+0x78>
  404349:	cmp    r8d,0x7
  40434d:	mov    ebx,0x40
  404352:	je     404363 <flatcc_builder_default_alloc@@Base+0x73>
  404354:	jmp    4043ef <flatcc_builder_default_alloc@@Base+0xff>
  404359:	nop    DWORD PTR [rax+0x0]
  404360:	add    rbx,rbx
  404363:	cmp    rdx,rbx
  404366:	ja     404360 <flatcc_builder_default_alloc@@Base+0x70>
  404368:	mov    rax,QWORD PTR [rbp+0x8]
  40436c:	cmp    rdx,rax
  40436f:	ja     40437e <flatcc_builder_default_alloc@@Base+0x8e>
  404371:	shr    rax,1
  404374:	mov    rdx,rax
  404377:	xor    eax,eax
  404379:	cmp    rdx,rbx
  40437c:	jae    404327 <flatcc_builder_default_alloc@@Base+0x37>
  40437e:	mov    rdi,QWORD PTR [rbp+0x0]
  404382:	mov    rsi,rbx
  404385:	mov    DWORD PTR [rsp+0xc],ecx
  404389:	call   4030d0 <realloc@plt>
  40438e:	test   rax,rax
  404391:	mov    r12,rax
  404394:	je     4043f9 <flatcc_builder_default_alloc@@Base+0x109>
  404396:	mov    ecx,DWORD PTR [rsp+0xc]
  40439a:	test   ecx,ecx
  40439c:	je     4043b8 <flatcc_builder_default_alloc@@Base+0xc8>
  40439e:	mov    rax,QWORD PTR [rbp+0x8]
  4043a2:	cmp    rax,rbx
  4043a5:	jae    4043b8 <flatcc_builder_default_alloc@@Base+0xc8>
  4043a7:	mov    rdx,rbx
  4043aa:	lea    rdi,[r12+rax*1]
  4043ae:	xor    esi,esi
  4043b0:	sub    rdx,rax
  4043b3:	call   403070 <memset@plt>
  4043b8:	mov    QWORD PTR [rbp+0x0],r12
  4043bc:	mov    QWORD PTR [rbp+0x8],rbx
  4043c0:	add    rsp,0x10
  4043c4:	pop    rbx
  4043c5:	xor    eax,eax
  4043c7:	pop    rbp
  4043c8:	pop    r12
  4043ca:	ret    
  4043cb:	nop    DWORD PTR [rax+rax*1+0x0]
  4043d0:	mov    ebx,0x120
  4043d5:	jmp    404363 <flatcc_builder_default_alloc@@Base+0x73>
  4043d7:	nop    WORD PTR [rax+rax*1+0x0]
  4043e0:	cmp    r8d,0x1
  4043e4:	mov    ebx,0x100
  4043e9:	je     404363 <flatcc_builder_default_alloc@@Base+0x73>
  4043ef:	mov    ebx,0x20
  4043f4:	jmp    404363 <flatcc_builder_default_alloc@@Base+0x73>
  4043f9:	mov    eax,0xffffffff
  4043fe:	jmp    404327 <flatcc_builder_default_alloc@@Base+0x37>
  404403:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40440e:	xchg   ax,ax
  404410:	push   rbx
  404411:	mov    r9,rdi
  404414:	sub    rsp,0xa0
  40441b:	mov    rbx,QWORD PTR fs:0x28
  404424:	mov    QWORD PTR [rsp+0x98],rbx
  40442c:	xor    ebx,ebx
  40442e:	test   dx,dx
  404431:	je     404490 <flatcc_builder_default_alloc@@Base+0x1a0>
  404433:	mov    eax,edx
  404435:	movzx  edx,dx
  404438:	movzx  edi,WORD PTR [rsi]
  40443b:	cmp    di,0x3
  40443f:	ja     40444e <flatcc_builder_default_alloc@@Base+0x15e>
  404441:	mov    edi,0x4
  404446:	mov    WORD PTR [rsi],di
  404449:	mov    edi,0x4
  40444e:	cmp    ax,di
  404451:	jbe    404456 <flatcc_builder_default_alloc@@Base+0x166>
  404453:	mov    WORD PTR [rsi],ax
  404456:	test   ecx,ecx
  404458:	jne    404468 <flatcc_builder_default_alloc@@Base+0x178>
  40445a:	mov    ebx,DWORD PTR [r9+0xf4]
  404461:	sub    edx,0x1
  404464:	and    edx,ebx
  404466:	jne    4044b0 <flatcc_builder_default_alloc@@Base+0x1c0>
  404468:	xor    eax,eax
  40446a:	mov    rbx,QWORD PTR [rsp+0x98]
  404472:	xor    rbx,QWORD PTR fs:0x28
  40447b:	jne    40451d <flatcc_builder_default_alloc@@Base+0x22d>
  404481:	add    rsp,0xa0
  404488:	pop    rbx
  404489:	ret    
  40448a:	nop    WORD PTR [rax+rax*1+0x0]
  404490:	movzx  eax,WORD PTR [rdi+0xec]
  404497:	test   ax,ax
  40449a:	movzx  edx,ax
  40449d:	jne    404438 <flatcc_builder_default_alloc@@Base+0x148>
  40449f:	mov    edx,0x1
  4044a4:	mov    eax,0x1
  4044a9:	jmp    404438 <flatcc_builder_default_alloc@@Base+0x148>
  4044ab:	nop    DWORD PTR [rax+rax*1+0x0]
  4044b0:	mov    rax,0x409ec0
  4044b7:	movsxd r8,edx
  4044ba:	add    edx,ebx
  4044bc:	cmp    ebx,edx
  4044be:	mov    QWORD PTR [rsp],r8
  4044c2:	mov    QWORD PTR [rsp+0x18],r8
  4044c7:	mov    DWORD PTR [rsp+0x8],0x1
  4044cf:	mov    DWORD PTR [r9+0xf4],edx
  4044d6:	mov    QWORD PTR [rsp+0x10],rax
  4044db:	jg     404522 <flatcc_builder_default_alloc@@Base+0x232>
  4044dd:	lea    rsi,[rsp+0x10]
  4044e2:	mov    rdi,QWORD PTR [r9+0x38]
  4044e6:	mov    ecx,ebx
  4044e8:	mov    edx,0x1
  4044ed:	call   QWORD PTR [r9+0x48]
  4044f1:	test   eax,eax
  4044f3:	jne    404527 <flatcc_builder_default_alloc@@Base+0x237>
  4044f5:	cmp    ebx,0xffffffff
  4044f8:	jne    404468 <flatcc_builder_default_alloc@@Base+0x178>
  4044fe:	lea    rcx,[rip+0x592b]        # 409e30 <_IO_stdin_used@@Base+0xe30>
  404505:	lea    rsi,[rip+0x4ec4]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40450c:	lea    rdi,[rip+0x5254]        # 409767 <_IO_stdin_used@@Base+0x767>
  404513:	mov    edx,0x2be
  404518:	call   403060 <__assert_fail@plt>
  40451d:	call   403050 <__stack_chk_fail@plt>
  404522:	call   40318c <posix_memalign@plt+0x9c>
  404527:	lea    rcx,[rip+0x58f2]        # 409e20 <_IO_stdin_used@@Base+0xe20>
  40452e:	lea    rsi,[rip+0x4e9b]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  404535:	lea    rdi,[rip+0x522b]        # 409767 <_IO_stdin_used@@Base+0x767>
  40453c:	mov    edx,0x2a5
  404541:	call   403060 <__assert_fail@plt>
  404546:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404550:	push   r12
  404552:	push   rbp
  404553:	mov    r12d,esi
  404556:	push   rbx
  404557:	movsxd rax,DWORD PTR [rdi+0x104]
  40455e:	mov    rbx,rdi
  404561:	lea    edx,[rax+0x1]
  404564:	cmp    edx,DWORD PTR [rdi+0x108]
  40456a:	mov    DWORD PTR [rdi+0x104],edx
  404570:	jle    4045f0 <flatcc_builder_default_alloc@@Base+0x300>
  404572:	mov    ecx,DWORD PTR [rdi+0x120]
  404578:	test   ecx,ecx
  40457a:	jle    404584 <flatcc_builder_default_alloc@@Base+0x294>
  40457c:	cmp    edx,ecx
  40457e:	jg     404670 <flatcc_builder_default_alloc@@Base+0x380>
  404584:	lea    rcx,[rax+rax*8]
  404588:	lea    rbp,[rcx*4+0x0]
  404590:	lea    rdx,[rbp+0x24]
  404594:	cmp    rdx,QWORD PTR [rbx+0xa0]
  40459b:	ja     404648 <flatcc_builder_default_alloc@@Base+0x358>
  4045a1:	mov    rcx,rbp
  4045a4:	add    rcx,QWORD PTR [rbx+0x98]
  4045ab:	test   rcx,rcx
  4045ae:	mov    QWORD PTR [rbx+0x30],rcx
  4045b2:	je     404670 <flatcc_builder_default_alloc@@Base+0x380>
  4045b8:	movabs rdx,0xe38e38e38e38e38f
  4045c2:	mov    rax,rdx
  4045c5:	mul    QWORD PTR [rbx+0xa0]
  4045cc:	mov    eax,DWORD PTR [rbx+0x120]
  4045d2:	shr    rdx,0x5
  4045d6:	test   eax,eax
  4045d8:	mov    DWORD PTR [rbx+0x108],edx
  4045de:	jle    404640 <flatcc_builder_default_alloc@@Base+0x350>
  4045e0:	cmp    eax,edx
  4045e2:	jge    404640 <flatcc_builder_default_alloc@@Base+0x350>
  4045e4:	mov    DWORD PTR [rbx+0x108],eax
  4045ea:	mov    rax,rcx
  4045ed:	jmp    4045fc <flatcc_builder_default_alloc@@Base+0x30c>
  4045ef:	nop
  4045f0:	mov    rax,QWORD PTR [rdi+0x30]
  4045f4:	add    rax,0x24
  4045f8:	mov    QWORD PTR [rdi+0x30],rax
  4045fc:	movzx  edx,WORD PTR [rbx+0xea]
  404603:	mov    ecx,DWORD PTR [rbx+0x20]
  404606:	mov    DWORD PTR [rax+0x8],ecx
  404609:	mov    WORD PTR [rax+0xc],dx
  40460d:	mov    edx,DWORD PTR [rbx+0x28]
  404610:	mov    WORD PTR [rbx+0xea],r12w
  404618:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40461f:	mov    DWORD PTR [rax],edx
  404621:	lea    eax,[rcx+rdx*1+0x7]
  404625:	mov    DWORD PTR [rbx+0x20],0x0
  40462c:	and    eax,0xfffffff8
  40462f:	mov    DWORD PTR [rbx+0x28],eax
  404632:	xor    eax,eax
  404634:	pop    rbx
  404635:	pop    rbp
  404636:	pop    r12
  404638:	ret    
  404639:	nop    DWORD PTR [rax+0x0]
  404640:	mov    rax,rcx
  404643:	jmp    4045fc <flatcc_builder_default_alloc@@Base+0x30c>
  404645:	nop    DWORD PTR [rax]
  404648:	xor    ecx,ecx
  40464a:	lea    rsi,[rbx+0x98]
  404651:	mov    rdi,QWORD PTR [rbx+0x40]
  404655:	mov    r8d,0x4
  40465b:	call   QWORD PTR [rbx+0x50]
  40465e:	test   eax,eax
  404660:	je     4045a1 <flatcc_builder_default_alloc@@Base+0x2b1>
  404666:	call   403169 <posix_memalign@plt+0x79>
  40466b:	nop    DWORD PTR [rax+rax*1+0x0]
  404670:	mov    eax,0xffffffff
  404675:	jmp    404634 <flatcc_builder_default_alloc@@Base+0x344>
  404677:	nop    WORD PTR [rax+rax*1+0x0]
  404680:	push   rbp
  404681:	push   rbx
  404682:	sub    rsp,0xb8
  404689:	mov    rax,QWORD PTR fs:0x28
  404692:	mov    QWORD PTR [rsp+0xa8],rax
  40469a:	xor    eax,eax
  40469c:	cmp    edx,0x3fffffff
  4046a2:	ja     404838 <flatcc_builder_default_alloc@@Base+0x548>
  4046a8:	cmp    WORD PTR [rdi+0xe8],0x3
  4046b0:	mov    rbx,rdi
  4046b3:	mov    r10d,edx
  4046b6:	ja     4046c4 <flatcc_builder_default_alloc@@Base+0x3d4>
  4046b8:	mov    eax,0x4
  4046bd:	mov    WORD PTR [rdi+0xe8],ax
  4046c4:	mov    eax,DWORD PTR [rbx+0xf0]
  4046ca:	lea    r9d,[rdx*4+0x0]
  4046d2:	lea    r8,[rsp+0xc]
  4046d7:	mov    DWORD PTR [rsp+0xc],edx
  4046db:	mov    QWORD PTR [rsp+0x10],0x4
  4046e4:	mov    QWORD PTR [rsp+0x20],r8
  4046e9:	mov    QWORD PTR [rsp+0x28],0x4
  4046f2:	mov    r8d,0x4
  4046f8:	mov    edi,eax
  4046fa:	mov    DWORD PTR [rsp+0x18],0x1
  404702:	and    edi,0x3
  404705:	test   r9d,r9d
  404708:	je     404725 <flatcc_builder_default_alloc@@Base+0x435>
  40470a:	lea    r8,[r9+0x4]
  40470e:	mov    QWORD PTR [rsp+0x30],rsi
  404713:	mov    QWORD PTR [rsp+0x38],r9
  404718:	mov    DWORD PTR [rsp+0x18],0x2
  404720:	mov    QWORD PTR [rsp+0x10],r8
  404725:	test   edi,edi
  404727:	jne    404800 <flatcc_builder_default_alloc@@Base+0x510>
  40472d:	mov    r11d,eax
  404730:	sub    r11d,r8d
  404733:	test   edx,edx
  404735:	je     4047a6 <flatcc_builder_default_alloc@@Base+0x4b6>
  404737:	mov    edx,0xfffffffc
  40473c:	xor    eax,eax
  40473e:	jmp    404767 <flatcc_builder_default_alloc@@Base+0x477>
  404740:	mov    r9d,edx
  404743:	sub    r9d,r11d
  404746:	add    edi,r9d
  404749:	test   rcx,rcx
  40474c:	mov    DWORD PTR [rsi+rax*4],edi
  40474f:	je     40475b <flatcc_builder_default_alloc@@Base+0x46b>
  404751:	cmp    BYTE PTR [rcx+rax*1],0x0
  404755:	je     40485b <flatcc_builder_default_alloc@@Base+0x56b>
  40475b:	add    rax,0x1
  40475f:	sub    edx,0x4
  404762:	cmp    r10d,eax
  404765:	jbe    4047a0 <flatcc_builder_default_alloc@@Base+0x4b0>
  404767:	mov    edi,DWORD PTR [rsi+rax*4]
  40476a:	test   edi,edi
  40476c:	jne    404740 <flatcc_builder_default_alloc@@Base+0x450>
  40476e:	test   rcx,rcx
  404771:	je     40483c <flatcc_builder_default_alloc@@Base+0x54c>
  404777:	cmp    BYTE PTR [rcx+rax*1],0x0
  40477b:	je     40475b <flatcc_builder_default_alloc@@Base+0x46b>
  40477d:	lea    rcx,[rip+0x530c]        # 409a90 <_IO_stdin_used@@Base+0xa90>
  404784:	lea    rsi,[rip+0x4c45]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40478b:	lea    rdi,[rip+0x4fd7]        # 409769 <_IO_stdin_used@@Base+0x769>
  404792:	mov    edx,0x5b5
  404797:	call   403060 <__assert_fail@plt>
  40479c:	nop    DWORD PTR [rax+0x0]
  4047a0:	mov    eax,DWORD PTR [rbx+0xf0]
  4047a6:	mov    ebp,eax
  4047a8:	sub    ebp,r8d
  4047ab:	cmp    ebp,eax
  4047ad:	jge    40487a <flatcc_builder_default_alloc@@Base+0x58a>
  4047b3:	lea    rsi,[rsp+0x20]
  4047b8:	mov    rdi,QWORD PTR [rbx+0x38]
  4047bc:	mov    ecx,ebp
  4047be:	mov    edx,DWORD PTR [rsp+0x18]
  4047c2:	call   QWORD PTR [rbx+0x48]
  4047c5:	test   eax,eax
  4047c7:	jne    40489e <flatcc_builder_default_alloc@@Base+0x5ae>
  4047cd:	mov    DWORD PTR [rbx+0xf0],ebp
  4047d3:	mov    rbx,QWORD PTR [rsp+0xa8]
  4047db:	xor    rbx,QWORD PTR fs:0x28
  4047e4:	mov    eax,ebp
  4047e6:	jne    404899 <flatcc_builder_default_alloc@@Base+0x5a9>
  4047ec:	add    rsp,0xb8
  4047f3:	pop    rbx
  4047f4:	pop    rbp
  4047f5:	ret    
  4047f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404800:	movsxd r11,DWORD PTR [rsp+0x18]
  404805:	mov    rbp,0x409ec0
  40480c:	add    r8,rdi
  40480f:	mov    QWORD PTR [rsp+0x10],r8
  404814:	mov    r9,r11
  404817:	shl    r11,0x4
  40481b:	add    r9d,0x1
  40481f:	mov    QWORD PTR [rsp+r11*1+0x20],rbp
  404824:	mov    QWORD PTR [rsp+r11*1+0x28],rdi
  404829:	mov    DWORD PTR [rsp+0x18],r9d
  40482e:	jmp    40472d <flatcc_builder_default_alloc@@Base+0x43d>
  404833:	nop    DWORD PTR [rax+rax*1+0x0]
  404838:	xor    ebp,ebp
  40483a:	jmp    4047d3 <flatcc_builder_default_alloc@@Base+0x4e3>
  40483c:	lea    rcx,[rip+0x524d]        # 409a90 <_IO_stdin_used@@Base+0xa90>
  404843:	lea    rsi,[rip+0x4b86]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40484a:	lea    rdi,[rip+0x4f16]        # 409767 <_IO_stdin_used@@Base+0x767>
  404851:	mov    edx,0x5b7
  404856:	call   403060 <__assert_fail@plt>
  40485b:	lea    rcx,[rip+0x522e]        # 409a90 <_IO_stdin_used@@Base+0xa90>
  404862:	lea    rsi,[rip+0x4b67]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  404869:	lea    rdi,[rip+0x4eeb]        # 40975b <_IO_stdin_used@@Base+0x75b>
  404870:	mov    edx,0x5b1
  404875:	call   403060 <__assert_fail@plt>
  40487a:	lea    rcx,[rip+0x558f]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  404881:	lea    rsi,[rip+0x4b48]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  404888:	lea    rdi,[rip+0x4ed8]        # 409767 <_IO_stdin_used@@Base+0x767>
  40488f:	mov    edx,0x287
  404894:	call   403060 <__assert_fail@plt>
  404899:	call   403050 <__stack_chk_fail@plt>
  40489e:	call   4031af <posix_memalign@plt+0xbf>
  4048a3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4048ae:	xchg   ax,ax

00000000004048b0 <flatcc_builder_flush_vtable_cache@@Base>:
  4048b0:	cmp    QWORD PTR [rdi+0xd8],0x0
  4048b8:	jne    4048c0 <flatcc_builder_flush_vtable_cache@@Base+0x10>
  4048ba:	ret    
  4048bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4048c0:	push   rbx
  4048c1:	mov    rbx,rdi
  4048c4:	mov    rdi,QWORD PTR [rdi+0xa8]
  4048cb:	mov    rdx,QWORD PTR [rbx+0xb0]
  4048d2:	xor    esi,esi
  4048d4:	call   403070 <memset@plt>
  4048d9:	mov    DWORD PTR [rbx+0xe4],0x10
  4048e3:	mov    DWORD PTR [rbx+0xe0],0x0
  4048ed:	pop    rbx
  4048ee:	ret    
  4048ef:	nop

00000000004048f0 <flatcc_builder_custom_init@@Base>:
  4048f0:	mov    QWORD PTR [rdi],0x0
  4048f7:	mov    QWORD PTR [rdi+0x180],0x0
  404902:	mov    r9,rdi
  404905:	lea    rdi,[rdi+0x8]
  404909:	mov    r10,rcx
  40490c:	mov    rcx,r9
  40490f:	xor    eax,eax
  404911:	and    rdi,0xfffffffffffffff8
  404915:	sub    rcx,rdi
  404918:	add    ecx,0x188
  40491e:	shr    ecx,0x3
  404921:	test   rsi,rsi
  404924:	rep stos QWORD PTR es:[rdi],rax
  404927:	je     404958 <flatcc_builder_custom_init@@Base+0x68>
  404929:	test   r10,r10
  40492c:	je     404948 <flatcc_builder_custom_init@@Base+0x58>
  40492e:	mov    QWORD PTR [r9+0x40],r8
  404932:	mov    QWORD PTR [r9+0x50],r10
  404936:	xor    eax,eax
  404938:	mov    QWORD PTR [r9+0x38],rdx
  40493c:	mov    QWORD PTR [r9+0x48],rsi
  404940:	ret    
  404941:	nop    DWORD PTR [rax+0x0]
  404948:	mov    r10,0x4042f0
  40494f:	jmp    40492e <flatcc_builder_custom_init@@Base+0x3e>
  404951:	nop    DWORD PTR [rax+0x0]
  404958:	mov    DWORD PTR [r9+0x128],0x1
  404963:	lea    rdx,[r9+0x130]
  40496a:	mov    rsi,0x4083a0
  404971:	jmp    404929 <flatcc_builder_custom_init@@Base+0x39>
  404973:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40497e:	xchg   ax,ax

0000000000404980 <flatcc_builder_init@@Base>:
  404980:	xor    r8d,r8d
  404983:	xor    ecx,ecx
  404985:	xor    edx,edx
  404987:	xor    esi,esi
  404989:	jmp    4048f0 <flatcc_builder_custom_init@@Base>
  40498e:	xchg   ax,ax

0000000000404990 <flatcc_builder_custom_reset@@Base>:
  404990:	push   r14
  404992:	mov    r14d,esi
  404995:	push   r13
  404997:	mov    r13d,edx
  40499a:	push   r12
  40499c:	mov    r12,rdi
  40499f:	push   rbp
  4049a0:	xor    ebp,ebp
  4049a2:	push   rbx
  4049a3:	lea    rbx,[rdi+0x58]
  4049a7:	jmp    4049f6 <flatcc_builder_custom_reset@@Base+0x66>
  4049a9:	nop    DWORD PTR [rax+0x0]
  4049b0:	cmp    ebp,0x5
  4049b3:	je     4049df <flatcc_builder_custom_reset@@Base+0x4f>
  4049b5:	test   r13d,r13d
  4049b8:	je     4049df <flatcc_builder_custom_reset@@Base+0x4f>
  4049ba:	mov    rdi,QWORD PTR [r12+0x40]
  4049bf:	mov    r8d,ebp
  4049c2:	mov    ecx,0x1
  4049c7:	mov    edx,0x1
  4049cc:	mov    rsi,rbx
  4049cf:	call   QWORD PTR [r12+0x50]
  4049d4:	test   eax,eax
  4049d6:	jne    404b30 <flatcc_builder_custom_reset@@Base+0x1a0>
  4049dc:	mov    rdi,QWORD PTR [rbx]
  4049df:	mov    rdx,QWORD PTR [rbx+0x8]
  4049e3:	xor    esi,esi
  4049e5:	call   403070 <memset@plt>
  4049ea:	add    ebp,0x1
  4049ed:	add    rbx,0x10
  4049f1:	cmp    ebp,0x8
  4049f4:	je     404a28 <flatcc_builder_custom_reset@@Base+0x98>
  4049f6:	mov    rdi,QWORD PTR [rbx]
  4049f9:	test   rdi,rdi
  4049fc:	jne    4049b0 <flatcc_builder_custom_reset@@Base+0x20>
  4049fe:	cmp    QWORD PTR [rbx+0x8],0x0
  404a03:	je     4049ea <flatcc_builder_custom_reset@@Base+0x5a>
  404a05:	lea    rcx,[rip+0x5494]        # 409ea0 <_IO_stdin_used@@Base+0xea0>
  404a0c:	lea    rsi,[rip+0x49bd]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  404a13:	lea    rdi,[rip+0x4d5d]        # 409777 <_IO_stdin_used@@Base+0x777>
  404a1a:	mov    edx,0x1b2
  404a1f:	call   403060 <__assert_fail@plt>
  404a24:	nop    DWORD PTR [rax+0x0]
  404a28:	mov    edx,DWORD PTR [r12+0xe4]
  404a30:	mov    DWORD PTR [r12+0xe0],0x0
  404a3c:	test   edx,edx
  404a3e:	je     404a4c <flatcc_builder_custom_reset@@Base+0xbc>
  404a40:	mov    DWORD PTR [r12+0xe4],0x10
  404a4c:	xor    eax,eax
  404a4e:	test   r14d,r14d
  404a51:	mov    DWORD PTR [r12+0xf0],0x0
  404a5d:	mov    WORD PTR [r12+0xe8],ax
  404a66:	mov    rax,QWORD PTR [r12+0x68]
  404a6b:	mov    DWORD PTR [r12+0xf4],0x0
  404a77:	mov    DWORD PTR [r12+0x104],0x0
  404a83:	mov    DWORD PTR [r12+0x108],0x0
  404a8f:	mov    DWORD PTR [r12+0x20],0x0
  404a98:	mov    QWORD PTR [r12+0x18],rax
  404a9d:	mov    rax,QWORD PTR [r12+0x88]
  404aa5:	mov    DWORD PTR [r12+0x24],0x0
  404aae:	mov    DWORD PTR [r12+0xfc],0x0
  404aba:	mov    DWORD PTR [r12+0x100],0x0
  404ac6:	mov    QWORD PTR [r12+0x30],0x0
  404acf:	mov    QWORD PTR [r12],rax
  404ad3:	mov    rax,QWORD PTR [r12+0x58]
  404ad8:	mov    QWORD PTR [r12+0x8],rax
  404add:	jne    404b08 <flatcc_builder_custom_reset@@Base+0x178>
  404adf:	mov    eax,DWORD PTR [r12+0x128]
  404ae7:	test   eax,eax
  404ae9:	je     404afa <flatcc_builder_custom_reset@@Base+0x16a>
  404aeb:	lea    rdi,[r12+0x130]
  404af3:	call   408230 <flatcc_emitter_reset@@Base>
  404af8:	xor    eax,eax
  404afa:	pop    rbx
  404afb:	pop    rbp
  404afc:	pop    r12
  404afe:	pop    r13
  404b00:	pop    r14
  404b02:	ret    
  404b03:	nop    DWORD PTR [rax+rax*1+0x0]
  404b08:	mov    QWORD PTR [r12+0x118],0x0
  404b14:	mov    DWORD PTR [r12+0x120],0x0
  404b20:	mov    DWORD PTR [r12+0x124],0x0
  404b2c:	jmp    404adf <flatcc_builder_custom_reset@@Base+0x14f>
  404b2e:	xchg   ax,ax
  404b30:	mov    eax,0xffffffff
  404b35:	jmp    404afa <flatcc_builder_custom_reset@@Base+0x16a>
  404b37:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404b40 <flatcc_builder_reset@@Base>:
  404b40:	xor    edx,edx
  404b42:	xor    esi,esi
  404b44:	jmp    404990 <flatcc_builder_custom_reset@@Base>
  404b49:	nop    DWORD PTR [rax+0x0]

0000000000404b50 <flatcc_builder_clear@@Base>:
  404b50:	push   r12
  404b52:	lea    r12,[rdi+0x58]
  404b56:	push   rbp
  404b57:	xor    ebp,ebp
  404b59:	push   rbx
  404b5a:	mov    rbx,rdi
  404b5d:	nop    DWORD PTR [rax]
  404b60:	mov    r8d,ebp
  404b63:	add    ebp,0x1
  404b66:	xor    ecx,ecx
  404b68:	xor    edx,edx
  404b6a:	mov    rsi,r12
  404b6d:	mov    rdi,QWORD PTR [rbx+0x40]
  404b71:	add    r12,0x10
  404b75:	call   QWORD PTR [rbx+0x50]
  404b78:	cmp    ebp,0x8
  404b7b:	jne    404b60 <flatcc_builder_clear@@Base+0x10>
  404b7d:	mov    eax,DWORD PTR [rbx+0x128]
  404b83:	test   eax,eax
  404b85:	je     404b93 <flatcc_builder_clear@@Base+0x43>
  404b87:	lea    rdi,[rbx+0x130]
  404b8e:	call   408310 <flatcc_emitter_clear@@Base>
  404b93:	lea    rdi,[rbx+0x8]
  404b97:	mov    QWORD PTR [rbx],0x0
  404b9e:	mov    QWORD PTR [rbx+0x180],0x0
  404ba9:	xor    eax,eax
  404bab:	and    rdi,0xfffffffffffffff8
  404baf:	sub    rbx,rdi
  404bb2:	lea    ecx,[rbx+0x188]
  404bb8:	shr    ecx,0x3
  404bbb:	rep stos QWORD PTR es:[rdi],rax
  404bbe:	pop    rbx
  404bbf:	pop    rbp
  404bc0:	pop    r12
  404bc2:	ret    
  404bc3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404bce:	xchg   ax,ax

0000000000404bd0 <flatcc_builder_enter_user_frame_ptr@@Base>:
  404bd0:	push   r12
  404bd2:	push   rbp
  404bd3:	mov    r12,rdi
  404bd6:	push   rbx
  404bd7:	lea    rbx,[rsi+0x7]
  404bdb:	mov    rbp,QWORD PTR [rdi+0x180]
  404be2:	and    rbx,0xfffffffffffffff8
  404be6:	add    rbx,0x8
  404bea:	lea    rdx,[rbx+rbp*1]
  404bee:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404bf5:	ja     404c48 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
  404bf7:	add    rbp,QWORD PTR [r12+0xc8]
  404bff:	je     404c70 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
  404c01:	mov    rdx,rbx
  404c04:	xor    esi,esi
  404c06:	mov    rdi,rbp
  404c09:	call   403070 <memset@plt>
  404c0e:	mov    rax,QWORD PTR [r12+0x178]
  404c16:	mov    QWORD PTR [rbp+0x0],rax
  404c1a:	mov    rax,QWORD PTR [r12+0x180]
  404c22:	lea    rdx,[rax+0x8]
  404c26:	add    rbx,rax
  404c29:	lea    rax,[rbp+0x8]
  404c2d:	mov    QWORD PTR [r12+0x180],rbx
  404c35:	mov    QWORD PTR [r12+0x178],rdx
  404c3d:	pop    rbx
  404c3e:	pop    rbp
  404c3f:	pop    r12
  404c41:	ret    
  404c42:	nop    WORD PTR [rax+rax*1+0x0]
  404c48:	lea    rsi,[rdi+0xc8]
  404c4f:	xor    ecx,ecx
  404c51:	mov    rdi,QWORD PTR [rdi+0x40]
  404c55:	mov    r8d,0x7
  404c5b:	call   QWORD PTR [r12+0x50]
  404c60:	test   eax,eax
  404c62:	je     404bf7 <flatcc_builder_enter_user_frame_ptr@@Base+0x27>
  404c64:	call   403169 <posix_memalign@plt+0x79>
  404c69:	nop    DWORD PTR [rax+0x0]
  404c70:	xor    eax,eax
  404c72:	jmp    404c3d <flatcc_builder_enter_user_frame_ptr@@Base+0x6d>
  404c74:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404c7f:	nop

0000000000404c80 <flatcc_builder_enter_user_frame@@Base>:
  404c80:	push   r12
  404c82:	push   rbp
  404c83:	mov    r12,rdi
  404c86:	push   rbx
  404c87:	lea    rbx,[rsi+0x7]
  404c8b:	mov    rbp,QWORD PTR [rdi+0x180]
  404c92:	and    rbx,0xfffffffffffffff8
  404c96:	add    rbx,0x8
  404c9a:	lea    rdx,[rbx+rbp*1]
  404c9e:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404ca5:	ja     404cf0 <flatcc_builder_enter_user_frame@@Base+0x70>
  404ca7:	xor    eax,eax
  404ca9:	add    rbp,QWORD PTR [r12+0xc8]
  404cb1:	je     404ceb <flatcc_builder_enter_user_frame@@Base+0x6b>
  404cb3:	mov    rdx,rbx
  404cb6:	xor    esi,esi
  404cb8:	mov    rdi,rbp
  404cbb:	call   403070 <memset@plt>
  404cc0:	mov    rax,QWORD PTR [r12+0x178]
  404cc8:	mov    QWORD PTR [rbp+0x0],rax
  404ccc:	mov    rdx,QWORD PTR [r12+0x180]
  404cd4:	lea    rax,[rdx+0x8]
  404cd8:	add    rbx,rdx
  404cdb:	mov    QWORD PTR [r12+0x180],rbx
  404ce3:	mov    QWORD PTR [r12+0x178],rax
  404ceb:	pop    rbx
  404cec:	pop    rbp
  404ced:	pop    r12
  404cef:	ret    
  404cf0:	lea    rsi,[rdi+0xc8]
  404cf7:	xor    ecx,ecx
  404cf9:	mov    rdi,QWORD PTR [rdi+0x40]
  404cfd:	mov    r8d,0x7
  404d03:	call   QWORD PTR [r12+0x50]
  404d08:	test   eax,eax
  404d0a:	je     404ca7 <flatcc_builder_enter_user_frame@@Base+0x27>
  404d0c:	call   403169 <posix_memalign@plt+0x79>
  404d11:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404d1c:	nop    DWORD PTR [rax+0x0]

0000000000404d20 <flatcc_builder_exit_user_frame@@Base>:
  404d20:	mov    rax,QWORD PTR [rdi+0x178]
  404d27:	test   rax,rax
  404d2a:	je     404d4c <flatcc_builder_exit_user_frame@@Base+0x2c>
  404d2c:	mov    edx,eax
  404d2e:	add    rdx,QWORD PTR [rdi+0xc8]
  404d35:	sub    rax,0x8
  404d39:	mov    QWORD PTR [rdi+0x180],rax
  404d40:	mov    rax,QWORD PTR [rdx-0x8]
  404d44:	mov    QWORD PTR [rdi+0x178],rax
  404d4b:	ret    
  404d4c:	lea    rcx,[rip+0x511d]        # 409e70 <_IO_stdin_used@@Base+0xe70>
  404d53:	lea    rsi,[rip+0x4676]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  404d5a:	lea    rdi,[rip+0x4a28]        # 409789 <_IO_stdin_used@@Base+0x789>
  404d61:	sub    rsp,0x8
  404d65:	mov    edx,0x21e
  404d6a:	call   403060 <__assert_fail@plt>
  404d6f:	nop

0000000000404d70 <flatcc_builder_exit_user_frame_at@@Base>:
  404d70:	cmp    QWORD PTR [rdi+0x178],rsi
  404d77:	jb     404d85 <flatcc_builder_exit_user_frame_at@@Base+0x15>
  404d79:	mov    QWORD PTR [rdi+0x178],rsi
  404d80:	jmp    404d20 <flatcc_builder_exit_user_frame@@Base>
  404d85:	lea    rcx,[rip+0x50b4]        # 409e40 <_IO_stdin_used@@Base+0xe40>
  404d8c:	lea    rsi,[rip+0x463d]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  404d93:	lea    rdi,[rip+0x4696]        # 409430 <_IO_stdin_used@@Base+0x430>
  404d9a:	sub    rsp,0x8
  404d9e:	mov    edx,0x227
  404da3:	call   403060 <__assert_fail@plt>
  404da8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404db0 <flatcc_builder_get_current_user_frame@@Base>:
  404db0:	mov    rax,QWORD PTR [rdi+0x178]
  404db7:	ret    
  404db8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404dc0 <flatcc_builder_get_user_frame_ptr@@Base>:
  404dc0:	mov    eax,esi
  404dc2:	add    rax,QWORD PTR [rdi+0xc8]
  404dc9:	ret    
  404dca:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404dd0 <flatcc_builder_embed_buffer@@Base>:
  404dd0:	push   r13
  404dd2:	push   r12
  404dd4:	mov    r12,rcx
  404dd7:	push   rbp
  404dd8:	push   rbx
  404dd9:	xor    ecx,ecx
  404ddb:	mov    rbp,rdx
  404dde:	movzx  edx,si
  404de1:	mov    rbx,rdi
  404de4:	sub    rsp,0xc8
  404deb:	mov    r13d,r9d
  404dee:	mov    WORD PTR [rsp+0xc],r8w
  404df4:	mov    r8d,DWORD PTR [rdi+0x100]
  404dfb:	lea    rsi,[rsp+0xc]
  404e00:	mov    rax,QWORD PTR fs:0x28
  404e09:	mov    QWORD PTR [rsp+0xb8],rax
  404e11:	xor    eax,eax
  404e13:	test   r8d,r8d
  404e16:	setne  cl
  404e19:	call   404410 <flatcc_builder_default_alloc@@Base+0x120>
  404e1e:	test   eax,eax
  404e20:	jne    404f68 <flatcc_builder_embed_buffer@@Base+0x198>
  404e26:	mov    edx,DWORD PTR [rbx+0xf0]
  404e2c:	movzx  ecx,WORD PTR [rsp+0xc]
  404e31:	xor    esi,esi
  404e33:	and    r13d,0x2
  404e37:	mov    QWORD PTR [rsp+0x20],0x0
  404e40:	mov    DWORD PTR [rsp+0x28],0x0
  404e48:	setne  sil
  404e4c:	xor    r8d,r8d
  404e4f:	mov    eax,edx
  404e51:	shl    esi,0x2
  404e54:	sub    eax,r12d
  404e57:	sub    ecx,0x1
  404e5a:	sub    eax,esi
  404e5c:	and    eax,ecx
  404e5e:	lea    ecx,[rax+r12*1]
  404e62:	mov    DWORD PTR [rsp+0x1c],ecx
  404e66:	mov    ecx,DWORD PTR [rbx+0x100]
  404e6c:	test   ecx,ecx
  404e6e:	je     404e9a <flatcc_builder_embed_buffer@@Base+0xca>
  404e70:	lea    rcx,[rsp+0x1c]
  404e75:	mov    QWORD PTR [rsp+0x20],0x4
  404e7e:	mov    QWORD PTR [rsp+0x38],0x4
  404e87:	mov    DWORD PTR [rsp+0x28],0x1
  404e8f:	mov    r8d,0x4
  404e95:	mov    QWORD PTR [rsp+0x30],rcx
  404e9a:	test   r12,r12
  404e9d:	je     404ec4 <flatcc_builder_embed_buffer@@Base+0xf4>
  404e9f:	movsxd rsi,DWORD PTR [rsp+0x28]
  404ea4:	add    r8,r12
  404ea7:	mov    QWORD PTR [rsp+0x20],r8
  404eac:	mov    rcx,rsi
  404eaf:	shl    rsi,0x4
  404eb3:	add    ecx,0x1
  404eb6:	mov    QWORD PTR [rsp+rsi*1+0x30],rbp
  404ebb:	mov    QWORD PTR [rsp+rsi*1+0x38],r12
  404ec0:	mov    DWORD PTR [rsp+0x28],ecx
  404ec4:	test   eax,eax
  404ec6:	jne    404f30 <flatcc_builder_embed_buffer@@Base+0x160>
  404ec8:	mov    ebp,edx
  404eca:	sub    ebp,r8d
  404ecd:	cmp    edx,ebp
  404ecf:	jle    404f6c <flatcc_builder_embed_buffer@@Base+0x19c>
  404ed5:	movabs rax,0x10000000f
  404edf:	cmp    r8,rax
  404ee2:	ja     404f6c <flatcc_builder_embed_buffer@@Base+0x19c>
  404ee8:	lea    rsi,[rsp+0x30]
  404eed:	mov    rdi,QWORD PTR [rbx+0x38]
  404ef1:	mov    ecx,ebp
  404ef3:	mov    edx,DWORD PTR [rsp+0x28]
  404ef7:	call   QWORD PTR [rbx+0x48]
  404efa:	test   eax,eax
  404efc:	jne    404f90 <flatcc_builder_embed_buffer@@Base+0x1c0>
  404f02:	mov    DWORD PTR [rbx+0xf0],ebp
  404f08:	mov    rdi,QWORD PTR [rsp+0xb8]
  404f10:	xor    rdi,QWORD PTR fs:0x28
  404f19:	mov    eax,ebp
  404f1b:	jne    404f8b <flatcc_builder_embed_buffer@@Base+0x1bb>
  404f1d:	add    rsp,0xc8
  404f24:	pop    rbx
  404f25:	pop    rbp
  404f26:	pop    r12
  404f28:	pop    r13
  404f2a:	ret    
  404f2b:	nop    DWORD PTR [rax+rax*1+0x0]
  404f30:	movsxd rsi,DWORD PTR [rsp+0x28]
  404f35:	mov    rdi,0x409ec0
  404f3c:	add    r8,rax
  404f3f:	mov    QWORD PTR [rsp+0x20],r8
  404f44:	mov    rcx,rsi
  404f47:	shl    rsi,0x4
  404f4b:	add    ecx,0x1
  404f4e:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  404f53:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  404f58:	mov    DWORD PTR [rsp+0x28],ecx
  404f5c:	jmp    404ec8 <flatcc_builder_embed_buffer@@Base+0xf8>
  404f61:	nop    DWORD PTR [rax+0x0]
  404f68:	xor    ebp,ebp
  404f6a:	jmp    404f08 <flatcc_builder_embed_buffer@@Base+0x138>
  404f6c:	lea    rcx,[rip+0x4e9d]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  404f73:	lea    rsi,[rip+0x4456]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  404f7a:	lea    rdi,[rip+0x47e6]        # 409767 <_IO_stdin_used@@Base+0x767>
  404f81:	mov    edx,0x287
  404f86:	call   403060 <__assert_fail@plt>
  404f8b:	call   403050 <__stack_chk_fail@plt>
  404f90:	call   4031af <posix_memalign@plt+0xbf>
  404f95:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000404fa0 <flatcc_builder_create_buffer@@Base>:
  404fa0:	push   r14
  404fa2:	push   r13
  404fa4:	mov    r13d,r9d
  404fa7:	push   r12
  404fa9:	push   rbp
  404faa:	and    r13d,0x1
  404fae:	push   rbx
  404faf:	mov    r14,rsi
  404fb2:	mov    r12d,ecx
  404fb5:	movzx  edx,dx
  404fb8:	mov    ecx,r13d
  404fbb:	mov    rbp,rdi
  404fbe:	sub    rsp,0xc0
  404fc5:	mov    ebx,r9d
  404fc8:	lea    rsi,[rsp+0xc]
  404fcd:	mov    WORD PTR [rsp+0xc],r8w
  404fd3:	mov    DWORD PTR [rsp+0x1c],0x0
  404fdb:	mov    rax,QWORD PTR fs:0x28
  404fe4:	mov    QWORD PTR [rsp+0xb8],rax
  404fec:	xor    eax,eax
  404fee:	call   404410 <flatcc_builder_default_alloc@@Base+0x120>
  404ff3:	test   eax,eax
  404ff5:	jne    4051b0 <flatcc_builder_create_buffer@@Base+0x210>
  404ffb:	movzx  ecx,WORD PTR [rsp+0xc]
  405000:	cmp    cx,WORD PTR [rbp+0xe8]
  405007:	ja     4051a0 <flatcc_builder_create_buffer@@Base+0x200>
  40500d:	test   r14,r14
  405010:	mov    eax,DWORD PTR [rsp+0x1c]
  405014:	je     40501d <flatcc_builder_create_buffer@@Base+0x7d>
  405016:	mov    eax,DWORD PTR [r14]
  405019:	mov    DWORD PTR [rsp+0x1c],eax
  40501d:	xor    r10d,r10d
  405020:	test   eax,eax
  405022:	mov    edi,ebx
  405024:	setne  r10b
  405028:	and    edi,0x1
  40502b:	mov    edx,DWORD PTR [rbp+0xf0]
  405031:	shl    r10d,0x2
  405035:	and    ebx,0x2
  405038:	jne    405168 <flatcc_builder_create_buffer@@Base+0x1c8>
  40503e:	lea    eax,[rdx-0x4]
  405041:	sub    ecx,0x1
  405044:	sub    eax,r10d
  405047:	and    eax,ecx
  405049:	test   dil,dil
  40504c:	jne    405173 <flatcc_builder_create_buffer@@Base+0x1d3>
  405052:	mov    ecx,0x1
  405057:	mov    r8d,0x4
  40505d:	movsxd rsi,ebx
  405060:	lea    r9,[rsp+0x14]
  405065:	mov    QWORD PTR [rsp+0x20],r8
  40506a:	shl    rsi,0x4
  40506e:	test   r10d,r10d
  405071:	mov    DWORD PTR [rsp+0x28],ecx
  405075:	mov    QWORD PTR [rsp+rsi*1+0x30],r9
  40507a:	mov    QWORD PTR [rsp+rsi*1+0x38],0x4
  405083:	je     4050a7 <flatcc_builder_create_buffer@@Base+0x107>
  405085:	lea    rsi,[rsp+0x1c]
  40508a:	shl    rcx,0x4
  40508e:	add    r8,r10
  405091:	add    ebx,0x2
  405094:	mov    QWORD PTR [rsp+0x20],r8
  405099:	mov    QWORD PTR [rsp+rcx*1+0x38],r10
  40509e:	mov    QWORD PTR [rsp+rcx*1+0x30],rsi
  4050a3:	mov    DWORD PTR [rsp+0x28],ebx
  4050a7:	test   eax,eax
  4050a9:	je     4050d7 <flatcc_builder_create_buffer@@Base+0x137>
  4050ab:	movsxd rsi,DWORD PTR [rsp+0x28]
  4050b0:	mov    r9,0x409ec0
  4050b7:	add    r8,rax
  4050ba:	mov    QWORD PTR [rsp+0x20],r8
  4050bf:	mov    rcx,rsi
  4050c2:	shl    rsi,0x4
  4050c6:	add    ecx,0x1
  4050c9:	mov    QWORD PTR [rsp+rsi*1+0x30],r9
  4050ce:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  4050d3:	mov    DWORD PTR [rsp+0x28],ecx
  4050d7:	mov    eax,edx
  4050d9:	sub    eax,r8d
  4050dc:	test   dil,dil
  4050df:	je     4051b8 <flatcc_builder_create_buffer@@Base+0x218>
  4050e5:	add    eax,0x4
  4050e8:	test   r13d,r13d
  4050eb:	je     4051b8 <flatcc_builder_create_buffer@@Base+0x218>
  4050f1:	mov    ecx,DWORD PTR [rbp+0xf8]
  4050f7:	sub    ecx,eax
  4050f9:	mov    DWORD PTR [rsp+0x18],ecx
  4050fd:	mov    ebx,edx
  4050ff:	sub    r12d,eax
  405102:	sub    ebx,r8d
  405105:	mov    DWORD PTR [rsp+0x14],r12d
  40510a:	cmp    ebx,edx
  40510c:	jge    4051c9 <flatcc_builder_create_buffer@@Base+0x229>
  405112:	lea    rsi,[rsp+0x30]
  405117:	mov    rdi,QWORD PTR [rbp+0x38]
  40511b:	mov    ecx,ebx
  40511d:	mov    edx,DWORD PTR [rsp+0x28]
  405121:	call   QWORD PTR [rbp+0x48]
  405124:	test   eax,eax
  405126:	jne    4051ed <flatcc_builder_create_buffer@@Base+0x24d>
  40512c:	test   ebx,ebx
  40512e:	mov    DWORD PTR [rbp+0xf0],ebx
  405134:	je     4051f2 <flatcc_builder_create_buffer@@Base+0x252>
  40513a:	mov    rdi,QWORD PTR [rsp+0xb8]
  405142:	xor    rdi,QWORD PTR fs:0x28
  40514b:	mov    eax,ebx
  40514d:	jne    4051e8 <flatcc_builder_create_buffer@@Base+0x248>
  405153:	add    rsp,0xc0
  40515a:	pop    rbx
  40515b:	pop    rbp
  40515c:	pop    r12
  40515e:	pop    r13
  405160:	pop    r14
  405162:	ret    
  405163:	nop    DWORD PTR [rax+rax*1+0x0]
  405168:	lea    eax,[rdx-0x8]
  40516b:	sub    ecx,0x1
  40516e:	sub    eax,r10d
  405171:	and    eax,ecx
  405173:	lea    rcx,[rsp+0x18]
  405178:	mov    QWORD PTR [rsp+0x38],0x4
  405181:	mov    ebx,0x1
  405186:	mov    r8d,0x8
  40518c:	mov    edi,0x1
  405191:	mov    QWORD PTR [rsp+0x30],rcx
  405196:	mov    ecx,0x2
  40519b:	jmp    40505d <flatcc_builder_create_buffer@@Base+0xbd>
  4051a0:	mov    WORD PTR [rbp+0xe8],cx
  4051a7:	jmp    40500d <flatcc_builder_create_buffer@@Base+0x6d>
  4051ac:	nop    DWORD PTR [rax+0x0]
  4051b0:	xor    ebx,ebx
  4051b2:	jmp    40513a <flatcc_builder_create_buffer@@Base+0x19a>
  4051b4:	nop    DWORD PTR [rax+0x0]
  4051b8:	mov    ecx,DWORD PTR [rbp+0xf4]
  4051be:	sub    ecx,eax
  4051c0:	mov    DWORD PTR [rsp+0x18],ecx
  4051c4:	jmp    4050fd <flatcc_builder_create_buffer@@Base+0x15d>
  4051c9:	lea    rcx,[rip+0x4c40]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  4051d0:	lea    rsi,[rip+0x41f9]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4051d7:	lea    rdi,[rip+0x4589]        # 409767 <_IO_stdin_used@@Base+0x767>
  4051de:	mov    edx,0x287
  4051e3:	call   403060 <__assert_fail@plt>
  4051e8:	call   403050 <__stack_chk_fail@plt>
  4051ed:	call   4031af <posix_memalign@plt+0xbf>
  4051f2:	lea    rcx,[rip+0x4bf7]        # 409df0 <_IO_stdin_used@@Base+0xdf0>
  4051f9:	lea    rsi,[rip+0x41d0]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405200:	lea    rdi,[rip+0x4560]        # 409767 <_IO_stdin_used@@Base+0x767>
  405207:	mov    edx,0x304
  40520c:	call   403060 <__assert_fail@plt>
  405211:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40521c:	nop    DWORD PTR [rax+0x0]

0000000000405220 <flatcc_builder_create_struct@@Base>:
  405220:	push   rbp
  405221:	push   rbx
  405222:	sub    rsp,0xa8
  405229:	mov    rax,QWORD PTR fs:0x28
  405232:	mov    QWORD PTR [rsp+0x98],rax
  40523a:	xor    eax,eax
  40523c:	test   cx,cx
  40523f:	je     40534f <flatcc_builder_create_struct@@Base+0x12f>
  405245:	mov    rbx,rdi
  405248:	mov    r8,rdx
  40524b:	movzx  edi,cx
  40524e:	cmp    cx,WORD PTR [rbx+0xe8]
  405255:	jbe    40525e <flatcc_builder_create_struct@@Base+0x3e>
  405257:	mov    WORD PTR [rbx+0xe8],cx
  40525e:	mov    edx,DWORD PTR [rbx+0xf0]
  405264:	lea    ecx,[rdi-0x1]
  405267:	mov    QWORD PTR [rsp],0x0
  40526f:	mov    DWORD PTR [rsp+0x8],0x0
  405277:	mov    eax,edx
  405279:	sub    eax,r8d
  40527c:	and    eax,ecx
  40527e:	test   r8,r8
  405281:	jne    405310 <flatcc_builder_create_struct@@Base+0xf0>
  405287:	test   eax,eax
  405289:	je     4052b6 <flatcc_builder_create_struct@@Base+0x96>
  40528b:	movsxd rsi,DWORD PTR [rsp+0x8]
  405290:	mov    rdi,0x409ec0
  405297:	add    r8,rax
  40529a:	mov    QWORD PTR [rsp],r8
  40529e:	mov    rcx,rsi
  4052a1:	shl    rsi,0x4
  4052a5:	add    ecx,0x1
  4052a8:	mov    QWORD PTR [rsp+rsi*1+0x10],rdi
  4052ad:	mov    QWORD PTR [rsp+rsi*1+0x18],rax
  4052b2:	mov    DWORD PTR [rsp+0x8],ecx
  4052b6:	mov    ebp,edx
  4052b8:	movabs rax,0x10000000f
  4052c2:	sub    ebp,r8d
  4052c5:	cmp    r8,rax
  4052c8:	ja     40532b <flatcc_builder_create_struct@@Base+0x10b>
  4052ca:	cmp    edx,ebp
  4052cc:	jle    40532b <flatcc_builder_create_struct@@Base+0x10b>
  4052ce:	lea    rsi,[rsp+0x10]
  4052d3:	mov    rdi,QWORD PTR [rbx+0x38]
  4052d7:	mov    ecx,ebp
  4052d9:	mov    edx,DWORD PTR [rsp+0x8]
  4052dd:	call   QWORD PTR [rbx+0x48]
  4052e0:	test   eax,eax
  4052e2:	jne    40534a <flatcc_builder_create_struct@@Base+0x12a>
  4052e4:	mov    rdx,QWORD PTR [rsp+0x98]
  4052ec:	xor    rdx,QWORD PTR fs:0x28
  4052f5:	mov    DWORD PTR [rbx+0xf0],ebp
  4052fb:	mov    eax,ebp
  4052fd:	jne    40536e <flatcc_builder_create_struct@@Base+0x14e>
  4052ff:	add    rsp,0xa8
  405306:	pop    rbx
  405307:	pop    rbp
  405308:	ret    
  405309:	nop    DWORD PTR [rax+0x0]
  405310:	mov    QWORD PTR [rsp],r8
  405314:	mov    QWORD PTR [rsp+0x10],rsi
  405319:	mov    QWORD PTR [rsp+0x18],r8
  40531e:	mov    DWORD PTR [rsp+0x8],0x1
  405326:	jmp    405287 <flatcc_builder_create_struct@@Base+0x67>
  40532b:	lea    rcx,[rip+0x4ade]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  405332:	lea    rsi,[rip+0x4097]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405339:	lea    rdi,[rip+0x4427]        # 409767 <_IO_stdin_used@@Base+0x767>
  405340:	mov    edx,0x287
  405345:	call   403060 <__assert_fail@plt>
  40534a:	call   4031af <posix_memalign@plt+0xbf>
  40534f:	lea    rcx,[rip+0x4a7a]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  405356:	lea    rsi,[rip+0x4073]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40535d:	lea    rdi,[rip+0x443e]        # 4097a2 <_IO_stdin_used@@Base+0x7a2>
  405364:	mov    edx,0x30f
  405369:	call   403060 <__assert_fail@plt>
  40536e:	call   403050 <__stack_chk_fail@plt>
  405373:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40537e:	xchg   ax,ax

0000000000405380 <flatcc_builder_start_buffer@@Base>:
  405380:	push   r13
  405382:	push   r12
  405384:	mov    r13d,edx
  405387:	push   rbp
  405388:	push   rbx
  405389:	mov    rbp,rsi
  40538c:	mov    rbx,rdi
  40538f:	mov    r12d,ecx
  405392:	sub    rsp,0x8
  405396:	movzx  esi,WORD PTR [rdi+0xe8]
  40539d:	call   404550 <flatcc_builder_default_alloc@@Base+0x260>
  4053a2:	test   eax,eax
  4053a4:	jne    405450 <flatcc_builder_start_buffer@@Base+0xd0>
  4053aa:	movzx  edx,WORD PTR [rbx+0xec]
  4053b1:	mov    rdi,QWORD PTR [rbx+0x30]
  4053b5:	mov    ecx,0x1
  4053ba:	mov    WORD PTR [rbx+0xe8],cx
  4053c1:	test   rbp,rbp
  4053c4:	mov    rsi,rbp
  4053c7:	mov    WORD PTR [rdi+0x22],dx
  4053cb:	movzx  edx,WORD PTR [rbx+0x10c]
  4053d2:	mov    WORD PTR [rbx+0xec],r13w
  4053da:	mov    WORD PTR [rdi+0x20],dx
  4053de:	mov    edx,DWORD PTR [rbx+0xf8]
  4053e4:	mov    WORD PTR [rbx+0x10c],r12w
  4053ec:	mov    DWORD PTR [rdi+0x14],edx
  4053ef:	mov    edx,DWORD PTR [rbx+0x100]
  4053f5:	mov    DWORD PTR [rdi+0x1c],edx
  4053f8:	mov    edx,DWORD PTR [rbx+0xf0]
  4053fe:	mov    DWORD PTR [rbx+0xf8],edx
  405404:	mov    edx,DWORD PTR [rbx+0xfc]
  40540a:	lea    ecx,[rdx+0x1]
  40540d:	mov    DWORD PTR [rbx+0x100],edx
  405413:	mov    edx,DWORD PTR [rbx+0x110]
  405419:	mov    DWORD PTR [rbx+0xfc],ecx
  40541f:	mov    DWORD PTR [rdi+0x10],edx
  405422:	je     405440 <flatcc_builder_start_buffer@@Base+0xc0>
  405424:	mov    edx,DWORD PTR [rsi]
  405426:	mov    DWORD PTR [rbx+0x110],edx
  40542c:	mov    edx,0x1
  405431:	mov    WORD PTR [rdi+0xe],dx
  405435:	add    rsp,0x8
  405439:	pop    rbx
  40543a:	pop    rbp
  40543b:	pop    r12
  40543d:	pop    r13
  40543f:	ret    
  405440:	mov    rsi,0x409ec0
  405447:	jmp    405424 <flatcc_builder_start_buffer@@Base+0xa4>
  405449:	nop    DWORD PTR [rax+0x0]
  405450:	mov    eax,0xffffffff
  405455:	jmp    405435 <flatcc_builder_start_buffer@@Base+0xb5>
  405457:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405460 <flatcc_builder_end_buffer@@Base>:
  405460:	push   rbp
  405461:	push   rbx
  405462:	xor    eax,eax
  405464:	sub    rsp,0x8
  405468:	movzx  r9d,WORD PTR [rdi+0x10c]
  405470:	mov    edx,DWORD PTR [rdi+0x100]
  405476:	and    r9d,0x2
  40547a:	test   edx,edx
  40547c:	setne  al
  40547f:	or     r9d,eax
  405482:	mov    rax,QWORD PTR [rdi+0x30]
  405486:	cmp    WORD PTR [rax+0xe],0x1
  40548b:	jne    405581 <flatcc_builder_end_buffer@@Base+0x121>
  405491:	movzx  edx,WORD PTR [rdi+0xec]
  405498:	movzx  r8d,WORD PTR [rdi+0xe8]
  4054a0:	mov    rbx,rdi
  4054a3:	mov    ecx,esi
  4054a5:	cmp    dx,r8w
  4054a9:	ja     4054d0 <flatcc_builder_end_buffer@@Base+0x70>
  4054ab:	lea    rsi,[rbx+0x110]
  4054b2:	mov    rdi,rbx
  4054b5:	call   404fa0 <flatcc_builder_create_buffer@@Base>
  4054ba:	test   eax,eax
  4054bc:	mov    ebp,eax
  4054be:	jne    4054e0 <flatcc_builder_end_buffer@@Base+0x80>
  4054c0:	add    rsp,0x8
  4054c4:	mov    eax,ebp
  4054c6:	pop    rbx
  4054c7:	pop    rbp
  4054c8:	ret    
  4054c9:	nop    DWORD PTR [rax+0x0]
  4054d0:	mov    WORD PTR [rbx+0xe8],dx
  4054d7:	mov    r8d,edx
  4054da:	jmp    4054ab <flatcc_builder_end_buffer@@Base+0x4b>
  4054dc:	nop    DWORD PTR [rax+0x0]
  4054e0:	mov    rax,QWORD PTR [rbx+0x30]
  4054e4:	mov    rdi,QWORD PTR [rbx+0x18]
  4054e8:	xor    esi,esi
  4054ea:	mov    edx,DWORD PTR [rax+0x14]
  4054ed:	mov    DWORD PTR [rbx+0xf8],edx
  4054f3:	mov    edx,DWORD PTR [rax+0x1c]
  4054f6:	mov    DWORD PTR [rbx+0x100],edx
  4054fc:	mov    edx,DWORD PTR [rax+0x10]
  4054ff:	mov    DWORD PTR [rbx+0x110],edx
  405505:	movzx  eax,WORD PTR [rax+0x20]
  405509:	mov    edx,DWORD PTR [rbx+0x20]
  40550c:	mov    WORD PTR [rbx+0x10c],ax
  405513:	call   403070 <memset@plt>
  405518:	mov    rax,QWORD PTR [rbx+0x30]
  40551c:	mov    edi,DWORD PTR [rbx+0x70]
  40551f:	mov    esi,DWORD PTR [rax]
  405521:	mov    edx,DWORD PTR [rax+0x8]
  405524:	mov    ecx,DWORD PTR [rax+0x4]
  405527:	mov    DWORD PTR [rbx+0x20],edx
  40552a:	mov    rdx,rsi
  40552d:	mov    DWORD PTR [rbx+0x28],esi
  405530:	add    rsi,QWORD PTR [rbx+0x68]
  405534:	sub    edi,edx
  405536:	cmp    ecx,edi
  405538:	mov    edx,edi
  40553a:	cmovb  edx,ecx
  40553d:	mov    DWORD PTR [rbx+0x24],edx
  405540:	movzx  edx,WORD PTR [rbx+0xea]
  405547:	cmp    dx,WORD PTR [rbx+0xe8]
  40554e:	mov    QWORD PTR [rbx+0x18],rsi
  405552:	mov    DWORD PTR [rax+0x4],ecx
  405555:	jbe    40555e <flatcc_builder_end_buffer@@Base+0xfe>
  405557:	mov    WORD PTR [rbx+0xe8],dx
  40555e:	movzx  edx,WORD PTR [rax+0xc]
  405562:	sub    rax,0x24
  405566:	sub    DWORD PTR [rbx+0x104],0x1
  40556d:	mov    QWORD PTR [rbx+0x30],rax
  405571:	mov    eax,ebp
  405573:	mov    WORD PTR [rbx+0xea],dx
  40557a:	add    rsp,0x8
  40557e:	pop    rbx
  40557f:	pop    rbp
  405580:	ret    
  405581:	lea    rcx,[rip+0x4828]        # 409db0 <_IO_stdin_used@@Base+0xdb0>
  405588:	lea    rsi,[rip+0x3e41]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40558f:	lea    rdi,[rip+0x3eba]        # 409450 <_IO_stdin_used@@Base+0x450>
  405596:	mov    edx,0x346
  40559b:	call   403060 <__assert_fail@plt>

00000000004055a0 <flatcc_builder_start_struct@@Base>:
  4055a0:	push   r12
  4055a2:	push   rbp
  4055a3:	mov    rbp,rsi
  4055a6:	push   rbx
  4055a7:	movzx  esi,dx
  4055aa:	mov    rbx,rdi
  4055ad:	call   404550 <flatcc_builder_default_alloc@@Base+0x260>
  4055b2:	test   eax,eax
  4055b4:	jne    405630 <flatcc_builder_start_struct@@Base+0x90>
  4055b6:	mov    rcx,QWORD PTR [rbx+0x30]
  4055ba:	mov    eax,0x2
  4055bf:	mov    edi,DWORD PTR [rbx+0x70]
  4055c2:	mov    WORD PTR [rcx+0xe],ax
  4055c6:	mov    eax,DWORD PTR [rbx+0x28]
  4055c9:	mov    rdx,rax
  4055cc:	add    rax,QWORD PTR [rbx+0x68]
  4055d0:	sub    edi,edx
  4055d2:	cmp    edi,0xfffffffc
  4055d5:	mov    edx,edi
  4055d7:	mov    QWORD PTR [rbx+0x18],rax
  4055db:	ja     405600 <flatcc_builder_start_struct@@Base+0x60>
  4055dd:	mov    DWORD PTR [rbx+0x24],edi
  4055e0:	mov    r12d,DWORD PTR [rbx+0x20]
  4055e4:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4055eb:	mov    rsi,r12
  4055ee:	add    esi,ebp
  4055f0:	cmp    esi,edx
  4055f2:	mov    DWORD PTR [rbx+0x20],esi
  4055f5:	jae    405610 <flatcc_builder_start_struct@@Base+0x70>
  4055f7:	add    rax,r12
  4055fa:	pop    rbx
  4055fb:	pop    rbp
  4055fc:	pop    r12
  4055fe:	ret    
  4055ff:	nop
  405600:	mov    DWORD PTR [rbx+0x24],0xfffffffc
  405607:	mov    edx,0xfffffffc
  40560c:	jmp    4055e0 <flatcc_builder_start_struct@@Base+0x40>
  40560e:	xchg   ax,ax
  405610:	add    esi,0x1
  405613:	mov    edx,0xfffffffc
  405618:	mov    rdi,rbx
  40561b:	call   404290 <access_monster_buffer@@Base+0x5a0>
  405620:	test   eax,eax
  405622:	jne    405630 <flatcc_builder_start_struct@@Base+0x90>
  405624:	mov    rax,QWORD PTR [rbx+0x18]
  405628:	jmp    4055f7 <flatcc_builder_start_struct@@Base+0x57>
  40562a:	nop    WORD PTR [rax+rax*1+0x0]
  405630:	pop    rbx
  405631:	xor    eax,eax
  405633:	pop    rbp
  405634:	pop    r12
  405636:	ret    
  405637:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405640 <flatcc_builder_struct_edit@@Base>:
  405640:	mov    rax,QWORD PTR [rdi+0x18]
  405644:	ret    
  405645:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000405650 <flatcc_builder_end_struct@@Base>:
  405650:	push   rbp
  405651:	push   rbx
  405652:	sub    rsp,0x8
  405656:	mov    rax,QWORD PTR [rdi+0x30]
  40565a:	cmp    WORD PTR [rax+0xe],0x2
  40565f:	jne    405707 <flatcc_builder_end_struct@@Base+0xb7>
  405665:	movzx  ecx,WORD PTR [rdi+0xea]
  40566c:	mov    edx,DWORD PTR [rdi+0x20]
  40566f:	mov    rbx,rdi
  405672:	mov    rsi,QWORD PTR [rdi+0x18]
  405676:	call   405220 <flatcc_builder_create_struct@@Base>
  40567b:	test   eax,eax
  40567d:	mov    ebp,eax
  40567f:	jne    405690 <flatcc_builder_end_struct@@Base+0x40>
  405681:	add    rsp,0x8
  405685:	mov    eax,ebp
  405687:	pop    rbx
  405688:	pop    rbp
  405689:	ret    
  40568a:	nop    WORD PTR [rax+rax*1+0x0]
  405690:	mov    edx,DWORD PTR [rbx+0x20]
  405693:	mov    rdi,QWORD PTR [rbx+0x18]
  405697:	xor    esi,esi
  405699:	call   403070 <memset@plt>
  40569e:	mov    rax,QWORD PTR [rbx+0x30]
  4056a2:	mov    edi,DWORD PTR [rbx+0x70]
  4056a5:	mov    esi,DWORD PTR [rax]
  4056a7:	mov    edx,DWORD PTR [rax+0x8]
  4056aa:	mov    ecx,DWORD PTR [rax+0x4]
  4056ad:	mov    DWORD PTR [rbx+0x20],edx
  4056b0:	mov    rdx,rsi
  4056b3:	mov    DWORD PTR [rbx+0x28],esi
  4056b6:	add    rsi,QWORD PTR [rbx+0x68]
  4056ba:	sub    edi,edx
  4056bc:	cmp    ecx,edi
  4056be:	mov    edx,edi
  4056c0:	cmovb  edx,ecx
  4056c3:	mov    DWORD PTR [rbx+0x24],edx
  4056c6:	movzx  edx,WORD PTR [rbx+0xea]
  4056cd:	cmp    dx,WORD PTR [rbx+0xe8]
  4056d4:	mov    QWORD PTR [rbx+0x18],rsi
  4056d8:	mov    DWORD PTR [rax+0x4],ecx
  4056db:	jbe    4056e4 <flatcc_builder_end_struct@@Base+0x94>
  4056dd:	mov    WORD PTR [rbx+0xe8],dx
  4056e4:	movzx  edx,WORD PTR [rax+0xc]
  4056e8:	sub    rax,0x24
  4056ec:	sub    DWORD PTR [rbx+0x104],0x1
  4056f3:	mov    QWORD PTR [rbx+0x30],rax
  4056f7:	mov    eax,ebp
  4056f9:	mov    WORD PTR [rbx+0xea],dx
  405700:	add    rsp,0x8
  405704:	pop    rbx
  405705:	pop    rbp
  405706:	ret    
  405707:	lea    rcx,[rip+0x4682]        # 409d90 <_IO_stdin_used@@Base+0xd90>
  40570e:	lea    rsi,[rip+0x3cbb]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405715:	lea    rdi,[rip+0x3d64]        # 409480 <_IO_stdin_used@@Base+0x480>
  40571c:	mov    edx,0x368
  405721:	call   403060 <__assert_fail@plt>
  405726:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000405730 <flatcc_builder_extend_vector@@Base>:
  405730:	push   rbp
  405731:	push   rbx
  405732:	mov    eax,esi
  405734:	sub    rsp,0x8
  405738:	mov    rdx,QWORD PTR [rdi+0x30]
  40573c:	add    eax,DWORD PTR [rdx+0x14]
  40573f:	setb   cl
  405742:	cmp    DWORD PTR [rdx+0x18],eax
  405745:	jb     40578d <flatcc_builder_extend_vector@@Base+0x5d>
  405747:	movzx  ecx,cl
  40574a:	test   ecx,ecx
  40574c:	jne    40578d <flatcc_builder_extend_vector@@Base+0x5d>
  40574e:	imul   esi,DWORD PTR [rdx+0x10]
  405752:	mov    DWORD PTR [rdx+0x14],eax
  405755:	mov    ebp,DWORD PTR [rdi+0x20]
  405758:	mov    rbx,rdi
  40575b:	add    esi,ebp
  40575d:	cmp    esi,DWORD PTR [rdi+0x24]
  405760:	mov    DWORD PTR [rdi+0x20],esi
  405763:	jae    405778 <flatcc_builder_extend_vector@@Base+0x48>
  405765:	mov    rax,rbp
  405768:	add    rax,QWORD PTR [rbx+0x18]
  40576c:	add    rsp,0x8
  405770:	pop    rbx
  405771:	pop    rbp
  405772:	ret    
  405773:	nop    DWORD PTR [rax+rax*1+0x0]
  405778:	add    esi,0x1
  40577b:	mov    edx,0xfffffffc
  405780:	call   404290 <access_monster_buffer@@Base+0x5a0>
  405785:	test   eax,eax
  405787:	je     405765 <flatcc_builder_extend_vector@@Base+0x35>
  405789:	xor    eax,eax
  40578b:	jmp    40576c <flatcc_builder_extend_vector@@Base+0x3c>
  40578d:	call   4031d2 <posix_memalign@plt+0xe2>
  405792:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40579d:	nop    DWORD PTR [rax]

00000000004057a0 <flatcc_builder_vector_push@@Base>:
  4057a0:	push   r13
  4057a2:	push   r12
  4057a4:	push   rbp
  4057a5:	push   rbx
  4057a6:	sub    rsp,0x8
  4057aa:	mov    rax,QWORD PTR [rdi+0x30]
  4057ae:	cmp    WORD PTR [rax+0xe],0x4
  4057b3:	jne    405834 <flatcc_builder_vector_push@@Base+0x94>
  4057b5:	mov    edx,DWORD PTR [rax+0x14]
  4057b8:	cmp    edx,DWORD PTR [rax+0x18]
  4057bb:	ja     405815 <flatcc_builder_vector_push@@Base+0x75>
  4057bd:	add    edx,0x1
  4057c0:	mov    r12d,DWORD PTR [rax+0x10]
  4057c4:	mov    rbx,rdi
  4057c7:	mov    DWORD PTR [rax+0x14],edx
  4057ca:	mov    ebp,DWORD PTR [rdi+0x20]
  4057cd:	mov    r13,rsi
  4057d0:	mov    rcx,rbp
  4057d3:	add    ecx,r12d
  4057d6:	cmp    ecx,DWORD PTR [rdi+0x24]
  4057d9:	mov    DWORD PTR [rdi+0x20],ecx
  4057dc:	jae    405800 <flatcc_builder_vector_push@@Base+0x60>
  4057de:	add    rbp,QWORD PTR [rbx+0x18]
  4057e2:	je     4057f2 <flatcc_builder_vector_push@@Base+0x52>
  4057e4:	mov    edx,r12d
  4057e7:	mov    rsi,r13
  4057ea:	mov    rdi,rbp
  4057ed:	call   4030b0 <memcpy@plt>
  4057f2:	add    rsp,0x8
  4057f6:	mov    rax,rbp
  4057f9:	pop    rbx
  4057fa:	pop    rbp
  4057fb:	pop    r12
  4057fd:	pop    r13
  4057ff:	ret    
  405800:	lea    esi,[rcx+0x1]
  405803:	mov    edx,0xfffffffc
  405808:	call   404290 <access_monster_buffer@@Base+0x5a0>
  40580d:	test   eax,eax
  40580f:	je     4057de <flatcc_builder_vector_push@@Base+0x3e>
  405811:	xor    ebp,ebp
  405813:	jmp    4057f2 <flatcc_builder_vector_push@@Base+0x52>
  405815:	lea    rcx,[rip+0x4534]        # 409d50 <_IO_stdin_used@@Base+0xd50>
  40581c:	lea    rsi,[rip+0x3bad]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405823:	lea    rdi,[rip+0x3cb6]        # 4094e0 <_IO_stdin_used@@Base+0x4e0>
  40582a:	mov    edx,0x38c
  40582f:	call   403060 <__assert_fail@plt>
  405834:	lea    rcx,[rip+0x4515]        # 409d50 <_IO_stdin_used@@Base+0xd50>
  40583b:	lea    rsi,[rip+0x3b8e]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405842:	lea    rdi,[rip+0x3c67]        # 4094b0 <_IO_stdin_used@@Base+0x4b0>
  405849:	mov    edx,0x38b
  40584e:	call   403060 <__assert_fail@plt>
  405853:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40585e:	xchg   ax,ax

0000000000405860 <flatcc_builder_append_vector@@Base>:
  405860:	push   r13
  405862:	push   r12
  405864:	push   rbp
  405865:	push   rbx
  405866:	sub    rsp,0x8
  40586a:	mov    rax,QWORD PTR [rdi+0x30]
  40586e:	cmp    WORD PTR [rax+0xe],0x4
  405873:	jne    4058eb <flatcc_builder_append_vector@@Base+0x8b>
  405875:	mov    r13,rsi
  405878:	mov    ecx,edx
  40587a:	xor    esi,esi
  40587c:	add    ecx,DWORD PTR [rax+0x14]
  40587f:	setb   sil
  405883:	cmp    DWORD PTR [rax+0x18],ecx
  405886:	jb     4058e6 <flatcc_builder_append_vector@@Base+0x86>
  405888:	test   esi,esi
  40588a:	jne    4058e6 <flatcc_builder_append_vector@@Base+0x86>
  40588c:	mov    ebx,DWORD PTR [rax+0x10]
  40588f:	mov    DWORD PTR [rax+0x14],ecx
  405892:	mov    rbp,rdi
  405895:	mov    r12d,DWORD PTR [rdi+0x20]
  405899:	imul   ebx,edx
  40589c:	mov    rdx,r12
  40589f:	add    edx,ebx
  4058a1:	cmp    edx,DWORD PTR [rdi+0x24]
  4058a4:	mov    DWORD PTR [rdi+0x20],edx
  4058a7:	jae    4058d0 <flatcc_builder_append_vector@@Base+0x70>
  4058a9:	add    r12,QWORD PTR [rbp+0x18]
  4058ad:	je     4058bc <flatcc_builder_append_vector@@Base+0x5c>
  4058af:	mov    edx,ebx
  4058b1:	mov    rsi,r13
  4058b4:	mov    rdi,r12
  4058b7:	call   4030b0 <memcpy@plt>
  4058bc:	add    rsp,0x8
  4058c0:	mov    rax,r12
  4058c3:	pop    rbx
  4058c4:	pop    rbp
  4058c5:	pop    r12
  4058c7:	pop    r13
  4058c9:	ret    
  4058ca:	nop    WORD PTR [rax+rax*1+0x0]
  4058d0:	lea    esi,[rdx+0x1]
  4058d3:	mov    edx,0xfffffffc
  4058d8:	call   404290 <access_monster_buffer@@Base+0x5a0>
  4058dd:	test   eax,eax
  4058df:	je     4058a9 <flatcc_builder_append_vector@@Base+0x49>
  4058e1:	xor    r12d,r12d
  4058e4:	jmp    4058bc <flatcc_builder_append_vector@@Base+0x5c>
  4058e6:	call   4031d2 <posix_memalign@plt+0xe2>
  4058eb:	lea    rcx,[rip+0x443e]        # 409d30 <_IO_stdin_used@@Base+0xd30>
  4058f2:	lea    rsi,[rip+0x3ad7]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4058f9:	lea    rdi,[rip+0x3bb0]        # 4094b0 <_IO_stdin_used@@Base+0x4b0>
  405900:	mov    edx,0x393
  405905:	call   403060 <__assert_fail@plt>
  40590a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405910 <flatcc_builder_extend_offset_vector@@Base>:
  405910:	push   rbp
  405911:	push   rbx
  405912:	xor    edx,edx
  405914:	mov    ecx,esi
  405916:	sub    rsp,0x8
  40591a:	mov    rax,QWORD PTR [rdi+0x30]
  40591e:	add    ecx,DWORD PTR [rax+0x14]
  405921:	setb   dl
  405924:	test   edx,edx
  405926:	jne    40596d <flatcc_builder_extend_offset_vector@@Base+0x5d>
  405928:	cmp    ecx,0x3fffffff
  40592e:	ja     40596d <flatcc_builder_extend_offset_vector@@Base+0x5d>
  405930:	mov    DWORD PTR [rax+0x14],ecx
  405933:	mov    ebp,DWORD PTR [rdi+0x20]
  405936:	mov    rbx,rdi
  405939:	lea    eax,[rbp+rsi*4+0x0]
  40593d:	cmp    eax,DWORD PTR [rdi+0x24]
  405940:	mov    DWORD PTR [rdi+0x20],eax
  405943:	jae    405958 <flatcc_builder_extend_offset_vector@@Base+0x48>
  405945:	mov    rax,rbp
  405948:	add    rax,QWORD PTR [rbx+0x18]
  40594c:	add    rsp,0x8
  405950:	pop    rbx
  405951:	pop    rbp
  405952:	ret    
  405953:	nop    DWORD PTR [rax+rax*1+0x0]
  405958:	lea    esi,[rax+0x1]
  40595b:	mov    edx,0xfffffffc
  405960:	call   404290 <access_monster_buffer@@Base+0x5a0>
  405965:	test   eax,eax
  405967:	je     405945 <flatcc_builder_extend_offset_vector@@Base+0x35>
  405969:	xor    eax,eax
  40596b:	jmp    40594c <flatcc_builder_extend_offset_vector@@Base+0x3c>
  40596d:	call   4031d2 <posix_memalign@plt+0xe2>
  405972:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40597d:	nop    DWORD PTR [rax]

0000000000405980 <flatcc_builder_offset_vector_push@@Base>:
  405980:	push   r12
  405982:	push   rbp
  405983:	push   rbx
  405984:	mov    rdx,QWORD PTR [rdi+0x30]
  405988:	cmp    WORD PTR [rdx+0xe],0x5
  40598d:	jne    4059e0 <flatcc_builder_offset_vector_push@@Base+0x60>
  40598f:	mov    eax,DWORD PTR [rdx+0x14]
  405992:	cmp    eax,0x3fffffff
  405997:	je     4059d9 <flatcc_builder_offset_vector_push@@Base+0x59>
  405999:	add    eax,0x1
  40599c:	mov    rbp,rdi
  40599f:	mov    r12d,esi
  4059a2:	mov    DWORD PTR [rdx+0x14],eax
  4059a5:	mov    ebx,DWORD PTR [rdi+0x20]
  4059a8:	lea    edx,[rbx+0x4]
  4059ab:	cmp    edx,DWORD PTR [rdi+0x24]
  4059ae:	mov    DWORD PTR [rdi+0x20],edx
  4059b1:	jae    4059c8 <flatcc_builder_offset_vector_push@@Base+0x48>
  4059b3:	mov    rax,rbx
  4059b6:	add    rax,QWORD PTR [rbp+0x18]
  4059ba:	je     4059d9 <flatcc_builder_offset_vector_push@@Base+0x59>
  4059bc:	mov    DWORD PTR [rax],r12d
  4059bf:	pop    rbx
  4059c0:	pop    rbp
  4059c1:	pop    r12
  4059c3:	ret    
  4059c4:	nop    DWORD PTR [rax+0x0]
  4059c8:	lea    esi,[rbx+0x5]
  4059cb:	mov    edx,0xfffffffc
  4059d0:	call   404290 <access_monster_buffer@@Base+0x5a0>
  4059d5:	test   eax,eax
  4059d7:	je     4059b3 <flatcc_builder_offset_vector_push@@Base+0x33>
  4059d9:	pop    rbx
  4059da:	xor    eax,eax
  4059dc:	pop    rbp
  4059dd:	pop    r12
  4059df:	ret    
  4059e0:	lea    rcx,[rip+0x4319]        # 409d00 <_IO_stdin_used@@Base+0xd00>
  4059e7:	lea    rsi,[rip+0x39e2]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4059ee:	lea    rdi,[rip+0x3b2b]        # 409520 <_IO_stdin_used@@Base+0x520>
  4059f5:	mov    edx,0x3a6
  4059fa:	call   403060 <__assert_fail@plt>
  4059ff:	nop

0000000000405a00 <flatcc_builder_append_offset_vector@@Base>:
  405a00:	push   r13
  405a02:	push   r12
  405a04:	push   rbp
  405a05:	push   rbx
  405a06:	sub    rsp,0x8
  405a0a:	mov    rax,QWORD PTR [rdi+0x30]
  405a0e:	cmp    WORD PTR [rax+0xe],0x5
  405a13:	jne    405a8b <flatcc_builder_append_offset_vector@@Base+0x8b>
  405a15:	mov    r13,rsi
  405a18:	mov    ecx,edx
  405a1a:	xor    esi,esi
  405a1c:	add    ecx,DWORD PTR [rax+0x14]
  405a1f:	setb   sil
  405a23:	test   esi,esi
  405a25:	jne    405a86 <flatcc_builder_append_offset_vector@@Base+0x86>
  405a27:	cmp    ecx,0x3fffffff
  405a2d:	ja     405a86 <flatcc_builder_append_offset_vector@@Base+0x86>
  405a2f:	mov    DWORD PTR [rax+0x14],ecx
  405a32:	mov    r12d,DWORD PTR [rdi+0x20]
  405a36:	lea    ebx,[rdx*4+0x0]
  405a3d:	mov    rbp,rdi
  405a40:	mov    rdx,r12
  405a43:	add    edx,ebx
  405a45:	cmp    edx,DWORD PTR [rdi+0x24]
  405a48:	mov    DWORD PTR [rdi+0x20],edx
  405a4b:	jae    405a70 <flatcc_builder_append_offset_vector@@Base+0x70>
  405a4d:	add    r12,QWORD PTR [rbp+0x18]
  405a51:	je     405a60 <flatcc_builder_append_offset_vector@@Base+0x60>
  405a53:	mov    edx,ebx
  405a55:	mov    rsi,r13
  405a58:	mov    rdi,r12
  405a5b:	call   4030b0 <memcpy@plt>
  405a60:	add    rsp,0x8
  405a64:	mov    rax,r12
  405a67:	pop    rbx
  405a68:	pop    rbp
  405a69:	pop    r12
  405a6b:	pop    r13
  405a6d:	ret    
  405a6e:	xchg   ax,ax
  405a70:	lea    esi,[rdx+0x1]
  405a73:	mov    edx,0xfffffffc
  405a78:	call   404290 <access_monster_buffer@@Base+0x5a0>
  405a7d:	test   eax,eax
  405a7f:	je     405a4d <flatcc_builder_append_offset_vector@@Base+0x4d>
  405a81:	xor    r12d,r12d
  405a84:	jmp    405a60 <flatcc_builder_append_offset_vector@@Base+0x60>
  405a86:	call   4031d2 <posix_memalign@plt+0xe2>
  405a8b:	lea    rcx,[rip+0x422e]        # 409cc0 <_IO_stdin_used@@Base+0xcc0>
  405a92:	lea    rsi,[rip+0x3937]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405a99:	lea    rdi,[rip+0x3a80]        # 409520 <_IO_stdin_used@@Base+0x520>
  405aa0:	mov    edx,0x3b4
  405aa5:	call   403060 <__assert_fail@plt>
  405aaa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405ab0 <flatcc_builder_extend_string@@Base>:
  405ab0:	push   rbp
  405ab1:	push   rbx
  405ab2:	sub    rsp,0x8
  405ab6:	mov    rax,QWORD PTR [rdi+0x30]
  405aba:	cmp    WORD PTR [rax+0xe],0x6
  405abf:	jne    405b0a <flatcc_builder_extend_string@@Base+0x5a>
  405ac1:	mov    edx,esi
  405ac3:	add    edx,DWORD PTR [rax+0x14]
  405ac6:	jb     405b05 <flatcc_builder_extend_string@@Base+0x55>
  405ac8:	mov    DWORD PTR [rax+0x14],edx
  405acb:	mov    ebp,DWORD PTR [rdi+0x20]
  405ace:	mov    rbx,rdi
  405ad1:	add    esi,ebp
  405ad3:	cmp    esi,DWORD PTR [rdi+0x24]
  405ad6:	mov    DWORD PTR [rdi+0x20],esi
  405ad9:	jae    405af0 <flatcc_builder_extend_string@@Base+0x40>
  405adb:	mov    rax,rbp
  405ade:	add    rax,QWORD PTR [rbx+0x18]
  405ae2:	add    rsp,0x8
  405ae6:	pop    rbx
  405ae7:	pop    rbp
  405ae8:	ret    
  405ae9:	nop    DWORD PTR [rax+0x0]
  405af0:	add    esi,0x1
  405af3:	mov    edx,0xfffffffc
  405af8:	call   404290 <access_monster_buffer@@Base+0x5a0>
  405afd:	test   eax,eax
  405aff:	je     405adb <flatcc_builder_extend_string@@Base+0x2b>
  405b01:	xor    eax,eax
  405b03:	jmp    405ae2 <flatcc_builder_extend_string@@Base+0x32>
  405b05:	call   4031d2 <posix_memalign@plt+0xe2>
  405b0a:	lea    rcx,[rip+0x417f]        # 409c90 <_IO_stdin_used@@Base+0xc90>
  405b11:	lea    rsi,[rip+0x38b8]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405b18:	lea    rdi,[rip+0x3a39]        # 409558 <_IO_stdin_used@@Base+0x558>
  405b1f:	mov    edx,0x3bd
  405b24:	call   403060 <__assert_fail@plt>
  405b29:	nop    DWORD PTR [rax+0x0]

0000000000405b30 <flatcc_builder_append_string@@Base>:
  405b30:	push   r13
  405b32:	push   r12
  405b34:	push   rbp
  405b35:	push   rbx
  405b36:	sub    rsp,0x8
  405b3a:	mov    rax,QWORD PTR [rdi+0x30]
  405b3e:	cmp    WORD PTR [rax+0xe],0x6
  405b43:	jne    405bab <flatcc_builder_append_string@@Base+0x7b>
  405b45:	mov    rbp,rdx
  405b48:	add    edx,DWORD PTR [rax+0x14]
  405b4b:	jb     405ba6 <flatcc_builder_append_string@@Base+0x76>
  405b4d:	mov    DWORD PTR [rax+0x14],edx
  405b50:	mov    r12d,DWORD PTR [rdi+0x20]
  405b54:	mov    rbx,rdi
  405b57:	mov    r13,rsi
  405b5a:	mov    rdx,r12
  405b5d:	add    edx,ebp
  405b5f:	cmp    edx,DWORD PTR [rdi+0x24]
  405b62:	mov    DWORD PTR [rdi+0x20],edx
  405b65:	jae    405b90 <flatcc_builder_append_string@@Base+0x60>
  405b67:	add    r12,QWORD PTR [rbx+0x18]
  405b6b:	je     405b7a <flatcc_builder_append_string@@Base+0x4a>
  405b6d:	mov    edx,ebp
  405b6f:	mov    rsi,r13
  405b72:	mov    rdi,r12
  405b75:	call   4030b0 <memcpy@plt>
  405b7a:	add    rsp,0x8
  405b7e:	mov    rax,r12
  405b81:	pop    rbx
  405b82:	pop    rbp
  405b83:	pop    r12
  405b85:	pop    r13
  405b87:	ret    
  405b88:	nop    DWORD PTR [rax+rax*1+0x0]
  405b90:	lea    esi,[rdx+0x1]
  405b93:	mov    edx,0xfffffffc
  405b98:	call   404290 <access_monster_buffer@@Base+0x5a0>
  405b9d:	test   eax,eax
  405b9f:	je     405b67 <flatcc_builder_append_string@@Base+0x37>
  405ba1:	xor    r12d,r12d
  405ba4:	jmp    405b7a <flatcc_builder_append_string@@Base+0x4a>
  405ba6:	call   4031d2 <posix_memalign@plt+0xe2>
  405bab:	lea    rcx,[rip+0x40be]        # 409c70 <_IO_stdin_used@@Base+0xc70>
  405bb2:	lea    rsi,[rip+0x3817]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405bb9:	lea    rdi,[rip+0x3998]        # 409558 <_IO_stdin_used@@Base+0x558>
  405bc0:	mov    edx,0x3c6
  405bc5:	call   403060 <__assert_fail@plt>
  405bca:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405bd0 <flatcc_builder_append_string_str@@Base>:
  405bd0:	push   rbp
  405bd1:	push   rbx
  405bd2:	mov    rbp,rdi
  405bd5:	mov    rdi,rsi
  405bd8:	mov    rbx,rsi
  405bdb:	sub    rsp,0x8
  405bdf:	call   403040 <strlen@plt>
  405be4:	add    rsp,0x8
  405be8:	mov    rsi,rbx
  405beb:	mov    rdi,rbp
  405bee:	pop    rbx
  405bef:	pop    rbp
  405bf0:	mov    rdx,rax
  405bf3:	jmp    405b30 <flatcc_builder_append_string@@Base>
  405bf8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405c00 <flatcc_builder_append_string_strn@@Base>:
  405c00:	push   r12
  405c02:	push   rbp
  405c03:	mov    rbp,rsi
  405c06:	push   rbx
  405c07:	mov    r12,rdi
  405c0a:	xor    esi,esi
  405c0c:	mov    rdi,rbp
  405c0f:	mov    rbx,rdx
  405c12:	call   403080 <memchr@plt>
  405c17:	mov    rdx,rax
  405c1a:	mov    rsi,rbp
  405c1d:	mov    rdi,r12
  405c20:	sub    rdx,rbp
  405c23:	test   rax,rax
  405c26:	cmovne rbx,rdx
  405c2a:	mov    rdx,rbx
  405c2d:	pop    rbx
  405c2e:	pop    rbp
  405c2f:	pop    r12
  405c31:	jmp    405b30 <flatcc_builder_append_string@@Base>
  405c36:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000405c40 <flatcc_builder_truncate_vector@@Base>:
  405c40:	sub    rsp,0x8
  405c44:	mov    rax,QWORD PTR [rdi+0x30]
  405c48:	cmp    WORD PTR [rax+0xe],0x4
  405c4d:	jne    405c83 <flatcc_builder_truncate_vector@@Base+0x43>
  405c4f:	mov    ecx,DWORD PTR [rax+0x14]
  405c52:	cmp    rcx,rsi
  405c55:	mov    rdx,rcx
  405c58:	jb     405ca2 <flatcc_builder_truncate_vector@@Base+0x62>
  405c5a:	sub    edx,esi
  405c5c:	imul   esi,DWORD PTR [rax+0x10]
  405c60:	mov    DWORD PTR [rax+0x14],edx
  405c63:	mov    eax,DWORD PTR [rdi+0x20]
  405c66:	mov    rcx,QWORD PTR [rdi+0x18]
  405c6a:	sub    eax,esi
  405c6c:	mov    edx,esi
  405c6e:	xor    esi,esi
  405c70:	mov    DWORD PTR [rdi+0x20],eax
  405c73:	lea    rdi,[rcx+rax*1]
  405c77:	call   403070 <memset@plt>
  405c7c:	xor    eax,eax
  405c7e:	add    rsp,0x8
  405c82:	ret    
  405c83:	lea    rcx,[rip+0x3fc6]        # 409c50 <_IO_stdin_used@@Base+0xc50>
  405c8a:	lea    rsi,[rip+0x373f]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405c91:	lea    rdi,[rip+0x3818]        # 4094b0 <_IO_stdin_used@@Base+0x4b0>
  405c98:	mov    edx,0x3d9
  405c9d:	call   403060 <__assert_fail@plt>
  405ca2:	lea    rcx,[rip+0x3fa7]        # 409c50 <_IO_stdin_used@@Base+0xc50>
  405ca9:	lea    rsi,[rip+0x3720]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405cb0:	lea    rdi,[rip+0x38d1]        # 409588 <_IO_stdin_used@@Base+0x588>
  405cb7:	mov    edx,0x3da
  405cbc:	call   403060 <__assert_fail@plt>
  405cc1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  405ccc:	nop    DWORD PTR [rax+0x0]

0000000000405cd0 <flatcc_builder_truncate_offset_vector@@Base>:
  405cd0:	sub    rsp,0x8
  405cd4:	mov    rax,QWORD PTR [rdi+0x30]
  405cd8:	cmp    WORD PTR [rax+0xe],0x5
  405cdd:	jne    405d0f <flatcc_builder_truncate_offset_vector@@Base+0x3f>
  405cdf:	mov    edx,DWORD PTR [rax+0x14]
  405ce2:	cmp    edx,esi
  405ce4:	jb     405d2e <flatcc_builder_truncate_offset_vector@@Base+0x5e>
  405ce6:	sub    edx,esi
  405ce8:	imul   esi,DWORD PTR [rax+0x10]
  405cec:	mov    DWORD PTR [rax+0x14],edx
  405cef:	mov    eax,DWORD PTR [rdi+0x20]
  405cf2:	mov    rcx,QWORD PTR [rdi+0x18]
  405cf6:	sub    eax,esi
  405cf8:	mov    edx,esi
  405cfa:	xor    esi,esi
  405cfc:	mov    DWORD PTR [rdi+0x20],eax
  405cff:	lea    rdi,[rcx+rax*1]
  405d03:	call   403070 <memset@plt>
  405d08:	xor    eax,eax
  405d0a:	add    rsp,0x8
  405d0e:	ret    
  405d0f:	lea    rcx,[rip+0x3f0a]        # 409c20 <_IO_stdin_used@@Base+0xc20>
  405d16:	lea    rsi,[rip+0x36b3]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405d1d:	lea    rdi,[rip+0x37fc]        # 409520 <_IO_stdin_used@@Base+0x520>
  405d24:	mov    edx,0x3e2
  405d29:	call   403060 <__assert_fail@plt>
  405d2e:	lea    rcx,[rip+0x3eeb]        # 409c20 <_IO_stdin_used@@Base+0xc20>
  405d35:	lea    rsi,[rip+0x3694]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405d3c:	lea    rdi,[rip+0x386d]        # 4095b0 <_IO_stdin_used@@Base+0x5b0>
  405d43:	mov    edx,0x3e3
  405d48:	call   403060 <__assert_fail@plt>
  405d4d:	nop    DWORD PTR [rax]

0000000000405d50 <flatcc_builder_truncate_string@@Base>:
  405d50:	sub    rsp,0x8
  405d54:	mov    rdx,QWORD PTR [rdi+0x30]
  405d58:	cmp    WORD PTR [rdx+0xe],0x6
  405d5d:	jne    405d90 <flatcc_builder_truncate_string@@Base+0x40>
  405d5f:	mov    ecx,DWORD PTR [rdx+0x14]
  405d62:	cmp    rcx,rsi
  405d65:	mov    rax,rcx
  405d68:	jb     405daf <flatcc_builder_truncate_string@@Base+0x5f>
  405d6a:	sub    eax,esi
  405d6c:	mov    DWORD PTR [rdx+0x14],eax
  405d6f:	mov    eax,DWORD PTR [rdi+0x20]
  405d72:	mov    rdx,QWORD PTR [rdi+0x18]
  405d76:	sub    eax,esi
  405d78:	mov    DWORD PTR [rdi+0x20],eax
  405d7b:	lea    rdi,[rdx+rax*1]
  405d7f:	mov    rdx,rsi
  405d82:	xor    esi,esi
  405d84:	call   403070 <memset@plt>
  405d89:	xor    eax,eax
  405d8b:	add    rsp,0x8
  405d8f:	ret    
  405d90:	lea    rcx,[rip+0x3e69]        # 409c00 <_IO_stdin_used@@Base+0xc00>
  405d97:	lea    rsi,[rip+0x3632]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405d9e:	lea    rdi,[rip+0x37b3]        # 409558 <_IO_stdin_used@@Base+0x558>
  405da5:	mov    edx,0x3eb
  405daa:	call   403060 <__assert_fail@plt>
  405daf:	lea    rcx,[rip+0x3e4a]        # 409c00 <_IO_stdin_used@@Base+0xc00>
  405db6:	lea    rsi,[rip+0x3613]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405dbd:	lea    rdi,[rip+0x382c]        # 4095f0 <_IO_stdin_used@@Base+0x5f0>
  405dc4:	mov    edx,0x3ec
  405dc9:	call   403060 <__assert_fail@plt>
  405dce:	xchg   ax,ax

0000000000405dd0 <flatcc_builder_start_vector@@Base>:
  405dd0:	push   r12
  405dd2:	cmp    dx,0x4
  405dd6:	push   rbp
  405dd7:	mov    rbp,rsi
  405dda:	mov    esi,0x4
  405ddf:	push   rbx
  405de0:	cmovb  edx,esi
  405de3:	mov    rbx,rdi
  405de6:	mov    r12,rcx
  405de9:	movzx  esi,dx
  405dec:	call   404550 <flatcc_builder_default_alloc@@Base+0x260>
  405df1:	test   eax,eax
  405df3:	jne    405e40 <flatcc_builder_start_vector@@Base+0x70>
  405df5:	mov    rsi,QWORD PTR [rbx+0x30]
  405df9:	mov    edx,0x4
  405dfe:	mov    DWORD PTR [rsi+0x10],ebp
  405e01:	mov    DWORD PTR [rsi+0x14],0x0
  405e08:	mov    DWORD PTR [rsi+0x18],r12d
  405e0c:	mov    WORD PTR [rsi+0xe],dx
  405e10:	mov    edx,DWORD PTR [rbx+0x28]
  405e13:	mov    rcx,rdx
  405e16:	add    rdx,QWORD PTR [rbx+0x68]
  405e1a:	mov    QWORD PTR [rbx+0x18],rdx
  405e1e:	mov    edx,DWORD PTR [rbx+0x70]
  405e21:	sub    edx,ecx
  405e23:	mov    ecx,0xfffffffc
  405e28:	cmp    edx,ecx
  405e2a:	cmova  edx,ecx
  405e2d:	mov    DWORD PTR [rbx+0x24],edx
  405e30:	mov    DWORD PTR [rsi+0x4],ecx
  405e33:	pop    rbx
  405e34:	pop    rbp
  405e35:	pop    r12
  405e37:	ret    
  405e38:	nop    DWORD PTR [rax+rax*1+0x0]
  405e40:	mov    eax,0xffffffff
  405e45:	jmp    405e33 <flatcc_builder_start_vector@@Base+0x63>
  405e47:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405e50 <flatcc_builder_start_offset_vector@@Base>:
  405e50:	push   rbx
  405e51:	mov    esi,0x4
  405e56:	mov    rbx,rdi
  405e59:	call   404550 <flatcc_builder_default_alloc@@Base+0x260>
  405e5e:	test   eax,eax
  405e60:	jne    405ea8 <flatcc_builder_start_offset_vector@@Base+0x58>
  405e62:	mov    rcx,QWORD PTR [rbx+0x30]
  405e66:	mov    edx,0x5
  405e6b:	mov    DWORD PTR [rcx+0x10],0x4
  405e72:	mov    DWORD PTR [rcx+0x14],0x0
  405e79:	mov    WORD PTR [rcx+0xe],dx
  405e7d:	mov    edx,DWORD PTR [rbx+0x28]
  405e80:	mov    rsi,rdx
  405e83:	add    rdx,QWORD PTR [rbx+0x68]
  405e87:	mov    QWORD PTR [rbx+0x18],rdx
  405e8b:	mov    edx,DWORD PTR [rbx+0x70]
  405e8e:	sub    edx,esi
  405e90:	mov    esi,0xfffffffc
  405e95:	cmp    edx,esi
  405e97:	cmova  edx,esi
  405e9a:	mov    DWORD PTR [rbx+0x24],edx
  405e9d:	mov    DWORD PTR [rcx+0x4],esi
  405ea0:	pop    rbx
  405ea1:	ret    
  405ea2:	nop    WORD PTR [rax+rax*1+0x0]
  405ea8:	mov    eax,0xffffffff
  405ead:	pop    rbx
  405eae:	ret    
  405eaf:	nop

0000000000405eb0 <flatcc_builder_start_string@@Base>:
  405eb0:	push   rbx
  405eb1:	mov    esi,0x1
  405eb6:	mov    rbx,rdi
  405eb9:	call   404550 <flatcc_builder_default_alloc@@Base+0x260>
  405ebe:	test   eax,eax
  405ec0:	jne    405f08 <flatcc_builder_start_string@@Base+0x58>
  405ec2:	mov    rcx,QWORD PTR [rbx+0x30]
  405ec6:	mov    edx,0x6
  405ecb:	mov    DWORD PTR [rcx+0x10],0x1
  405ed2:	mov    DWORD PTR [rcx+0x14],0x0
  405ed9:	mov    WORD PTR [rcx+0xe],dx
  405edd:	mov    edx,DWORD PTR [rbx+0x28]
  405ee0:	mov    rsi,rdx
  405ee3:	add    rdx,QWORD PTR [rbx+0x68]
  405ee7:	mov    QWORD PTR [rbx+0x18],rdx
  405eeb:	mov    edx,DWORD PTR [rbx+0x70]
  405eee:	sub    edx,esi
  405ef0:	mov    esi,0xfffffffc
  405ef5:	cmp    edx,esi
  405ef7:	cmova  edx,esi
  405efa:	mov    DWORD PTR [rbx+0x24],edx
  405efd:	mov    DWORD PTR [rcx+0x4],esi
  405f00:	pop    rbx
  405f01:	ret    
  405f02:	nop    WORD PTR [rax+rax*1+0x0]
  405f08:	mov    eax,0xffffffff
  405f0d:	pop    rbx
  405f0e:	ret    
  405f0f:	nop

0000000000405f10 <flatcc_builder_reserve_table@@Base>:
  405f10:	test   esi,esi
  405f12:	push   r12
  405f14:	push   rbp
  405f15:	push   rbx
  405f16:	js     405fcf <flatcc_builder_reserve_table@@Base+0xbf>
  405f1c:	mov    rax,QWORD PTR [rdi+0x30]
  405f20:	lea    r12d,[rsi+rsi*1+0x4]
  405f25:	mov    rbx,rdi
  405f28:	movzx  edx,WORD PTR [rax+0x1c]
  405f2c:	mov    eax,DWORD PTR [rax+0x10]
  405f2f:	lea    ebp,[rax+rdx*2]
  405f32:	mov    edx,r12d
  405f35:	add    rdx,rbp
  405f38:	cmp    rdx,QWORD PTR [rdi+0x60]
  405f3c:	ja     405f80 <flatcc_builder_reserve_table@@Base+0x70>
  405f3e:	add    rbp,QWORD PTR [rbx+0x58]
  405f42:	je     405fc0 <flatcc_builder_reserve_table@@Base+0xb0>
  405f44:	mov    rax,QWORD PTR [rbx+0x30]
  405f48:	add    rbp,0x4
  405f4c:	lea    edx,[r12-0x3]
  405f51:	mov    QWORD PTR [rbx+0x8],rbp
  405f55:	mov    ebp,DWORD PTR [rax+0x14]
  405f58:	add    rdx,rbp
  405f5b:	cmp    rdx,QWORD PTR [rbx+0x90]
  405f62:	ja     405fa0 <flatcc_builder_reserve_table@@Base+0x90>
  405f64:	add    rbp,QWORD PTR [rbx+0x88]
  405f6b:	xor    eax,eax
  405f6d:	test   rbp,rbp
  405f70:	mov    QWORD PTR [rbx],rbp
  405f73:	sete   al
  405f76:	neg    eax
  405f78:	pop    rbx
  405f79:	pop    rbp
  405f7a:	pop    r12
  405f7c:	ret    
  405f7d:	nop    DWORD PTR [rax]
  405f80:	lea    rsi,[rdi+0x58]
  405f84:	xor    r8d,r8d
  405f87:	mov    rdi,QWORD PTR [rdi+0x40]
  405f8b:	mov    ecx,0x1
  405f90:	call   QWORD PTR [rbx+0x50]
  405f93:	test   eax,eax
  405f95:	je     405f3e <flatcc_builder_reserve_table@@Base+0x2e>
  405f97:	call   403169 <posix_memalign@plt+0x79>
  405f9c:	nop    DWORD PTR [rax+0x0]
  405fa0:	xor    ecx,ecx
  405fa2:	lea    rsi,[rbx+0x88]
  405fa9:	mov    rdi,QWORD PTR [rbx+0x40]
  405fad:	mov    r8d,0x3
  405fb3:	call   QWORD PTR [rbx+0x50]
  405fb6:	test   eax,eax
  405fb8:	je     405f64 <flatcc_builder_reserve_table@@Base+0x54>
  405fba:	jmp    405f97 <flatcc_builder_reserve_table@@Base+0x87>
  405fbc:	nop    DWORD PTR [rax+0x0]
  405fc0:	mov    QWORD PTR [rbx+0x8],0x0
  405fc8:	mov    eax,0xffffffff
  405fcd:	jmp    405f78 <flatcc_builder_reserve_table@@Base+0x68>
  405fcf:	lea    rcx,[rip+0x3c0a]        # 409be0 <_IO_stdin_used@@Base+0xbe0>
  405fd6:	lea    rsi,[rip+0x33f3]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  405fdd:	lea    rdi,[rip+0x37df]        # 4097c3 <_IO_stdin_used@@Base+0x7c3>
  405fe4:	mov    edx,0x429
  405fe9:	call   403060 <__assert_fail@plt>
  405fee:	xchg   ax,ax

0000000000405ff0 <flatcc_builder_start_table@@Base>:
  405ff0:	push   r13
  405ff2:	push   r12
  405ff4:	mov    r12d,esi
  405ff7:	push   rbp
  405ff8:	push   rbx
  405ff9:	mov    esi,0x4
  405ffe:	mov    rbx,rdi
  406001:	sub    rsp,0x8
  406005:	call   404550 <flatcc_builder_default_alloc@@Base+0x260>
  40600a:	test   eax,eax
  40600c:	jne    406140 <flatcc_builder_start_table@@Base+0x150>
  406012:	mov    rcx,QWORD PTR [rbx+0x8]
  406016:	mov    ebp,eax
  406018:	mov    rax,QWORD PTR [rbx+0x58]
  40601c:	mov    rdx,QWORD PTR [rbx+0x30]
  406020:	xor    edi,edi
  406022:	mov    r8d,0x3
  406028:	sub    rcx,rax
  40602b:	mov    DWORD PTR [rdx+0x10],ecx
  40602e:	mov    rsi,QWORD PTR [rbx]
  406031:	sub    rsi,QWORD PTR [rbx+0x88]
  406038:	mov    DWORD PTR [rdx+0x14],esi
  40603b:	mov    esi,DWORD PTR [rbx+0x14]
  40603e:	mov    DWORD PTR [rdx+0x18],esi
  406041:	movzx  esi,WORD PTR [rbx+0x10]
  406045:	mov    WORD PTR [rdx+0x1c],si
  406049:	lea    r13d,[rcx+rsi*2]
  40604d:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  406054:	mov    WORD PTR [rbx+0x10],di
  406058:	mov    WORD PTR [rdx+0xe],r8w
  40605d:	lea    edx,[r12+r12*1+0x4]
  406062:	add    rdx,r13
  406065:	cmp    rdx,QWORD PTR [rbx+0x60]
  406069:	ja     4060e8 <flatcc_builder_start_table@@Base+0xf8>
  40606b:	add    rax,r13
  40606e:	je     406138 <flatcc_builder_start_table@@Base+0x148>
  406074:	add    rax,0x4
  406078:	lea    edx,[r12+r12*1+0x1]
  40607d:	mov    QWORD PTR [rbx+0x8],rax
  406081:	mov    rax,QWORD PTR [rbx+0x30]
  406085:	mov    r13d,DWORD PTR [rax+0x14]
  406089:	add    rdx,r13
  40608c:	cmp    rdx,QWORD PTR [rbx+0x90]
  406093:	ja     406110 <flatcc_builder_start_table@@Base+0x120>
  406095:	add    r13,QWORD PTR [rbx+0x88]
  40609c:	test   r13,r13
  40609f:	mov    QWORD PTR [rbx],r13
  4060a2:	je     406140 <flatcc_builder_start_table@@Base+0x150>
  4060a8:	mov    eax,DWORD PTR [rbx+0x28]
  4060ab:	mov    rdx,rax
  4060ae:	add    rax,QWORD PTR [rbx+0x68]
  4060b2:	mov    QWORD PTR [rbx+0x18],rax
  4060b6:	mov    eax,DWORD PTR [rbx+0x70]
  4060b9:	sub    eax,edx
  4060bb:	mov    edx,0xfffc
  4060c0:	cmp    eax,0xfffc
  4060c5:	cmova  eax,edx
  4060c8:	mov    DWORD PTR [rbx+0x24],eax
  4060cb:	mov    rax,QWORD PTR [rbx+0x30]
  4060cf:	mov    DWORD PTR [rax+0x4],0xfffc
  4060d6:	add    rsp,0x8
  4060da:	mov    eax,ebp
  4060dc:	pop    rbx
  4060dd:	pop    rbp
  4060de:	pop    r12
  4060e0:	pop    r13
  4060e2:	ret    
  4060e3:	nop    DWORD PTR [rax+rax*1+0x0]
  4060e8:	xor    r8d,r8d
  4060eb:	lea    rsi,[rbx+0x58]
  4060ef:	mov    rdi,QWORD PTR [rbx+0x40]
  4060f3:	mov    ecx,0x1
  4060f8:	call   QWORD PTR [rbx+0x50]
  4060fb:	test   eax,eax
  4060fd:	jne    40612e <flatcc_builder_start_table@@Base+0x13e>
  4060ff:	mov    rax,QWORD PTR [rbx+0x58]
  406103:	jmp    40606b <flatcc_builder_start_table@@Base+0x7b>
  406108:	nop    DWORD PTR [rax+rax*1+0x0]
  406110:	xor    ecx,ecx
  406112:	lea    rsi,[rbx+0x88]
  406119:	mov    rdi,QWORD PTR [rbx+0x40]
  40611d:	mov    r8d,0x3
  406123:	call   QWORD PTR [rbx+0x50]
  406126:	test   eax,eax
  406128:	je     406095 <flatcc_builder_start_table@@Base+0xa5>
  40612e:	call   403169 <posix_memalign@plt+0x79>
  406133:	nop    DWORD PTR [rax+rax*1+0x0]
  406138:	mov    QWORD PTR [rbx+0x8],0x0
  406140:	add    rsp,0x8
  406144:	mov    ebp,0xffffffff
  406149:	pop    rbx
  40614a:	mov    eax,ebp
  40614c:	pop    rbp
  40614d:	pop    r12
  40614f:	pop    r13
  406151:	ret    
  406152:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40615d:	nop    DWORD PTR [rax]

0000000000406160 <flatcc_builder_create_vtable@@Base>:
  406160:	push   rbp
  406161:	push   rbx
  406162:	mov    rbp,rdi
  406165:	sub    rsp,0xa8
  40616c:	mov    rax,QWORD PTR fs:0x28
  406175:	mov    QWORD PTR [rsp+0x98],rax
  40617d:	xor    eax,eax
  40617f:	test   dx,dx
  406182:	mov    QWORD PTR [rsp],0x0
  40618a:	mov    DWORD PTR [rsp+0x8],0x0
  406192:	je     406220 <flatcc_builder_create_vtable@@Base+0xc0>
  406198:	mov    QWORD PTR [rsp+0x10],rsi
  40619d:	mov    esi,DWORD PTR [rdi+0x100]
  4061a3:	movzx  r8d,dx
  4061a7:	mov    QWORD PTR [rsp],r8
  4061ab:	mov    QWORD PTR [rsp+0x18],r8
  4061b0:	movzx  edx,dx
  4061b3:	mov    DWORD PTR [rsp+0x8],0x1
  4061bb:	test   esi,esi
  4061bd:	je     406258 <flatcc_builder_create_vtable@@Base+0xf8>
  4061c3:	mov    eax,DWORD PTR [rbp+0xf0]
  4061c9:	mov    ebx,eax
  4061cb:	sub    ebx,edx
  4061cd:	cmp    eax,ebx
  4061cf:	jle    406234 <flatcc_builder_create_vtable@@Base+0xd4>
  4061d1:	lea    rsi,[rsp+0x10]
  4061d6:	mov    rdi,QWORD PTR [rbp+0x38]
  4061da:	mov    ecx,ebx
  4061dc:	mov    edx,DWORD PTR [rsp+0x8]
  4061e0:	call   QWORD PTR [rbp+0x48]
  4061e3:	test   eax,eax
  4061e5:	jne    4062b0 <flatcc_builder_create_vtable@@Base+0x150>
  4061eb:	cmp    ebx,0x1
  4061ee:	mov    DWORD PTR [rbp+0xf0],ebx
  4061f4:	sbb    ebx,0xffffffff
  4061f7:	mov    rcx,QWORD PTR [rsp+0x98]
  4061ff:	xor    rcx,QWORD PTR fs:0x28
  406208:	mov    eax,ebx
  40620a:	jne    4062ab <flatcc_builder_create_vtable@@Base+0x14b>
  406210:	add    rsp,0xa8
  406217:	pop    rbx
  406218:	pop    rbp
  406219:	ret    
  40621a:	nop    WORD PTR [rax+rax*1+0x0]
  406220:	mov    edx,DWORD PTR [rdi+0x100]
  406226:	test   edx,edx
  406228:	jne    406234 <flatcc_builder_create_vtable@@Base+0xd4>
  40622a:	mov    eax,DWORD PTR [rdi+0x124]
  406230:	test   eax,eax
  406232:	je     4062a0 <flatcc_builder_create_vtable@@Base+0x140>
  406234:	lea    rcx,[rip+0x3bd5]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  40623b:	lea    rsi,[rip+0x318e]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  406242:	lea    rdi,[rip+0x351e]        # 409767 <_IO_stdin_used@@Base+0x767>
  406249:	mov    edx,0x287
  40624e:	call   403060 <__assert_fail@plt>
  406253:	nop    DWORD PTR [rax+rax*1+0x0]
  406258:	mov    ecx,DWORD PTR [rdi+0x124]
  40625e:	test   ecx,ecx
  406260:	jne    4061c3 <flatcc_builder_create_vtable@@Base+0x63>
  406266:	mov    ebx,DWORD PTR [rdi+0xf4]
  40626c:	add    edx,ebx
  40626e:	cmp    ebx,edx
  406270:	mov    DWORD PTR [rdi+0xf4],edx
  406276:	jg     4062d4 <flatcc_builder_create_vtable@@Base+0x174>
  406278:	lea    rsi,[rsp+0x10]
  40627d:	mov    rdi,QWORD PTR [rbp+0x38]
  406281:	mov    ecx,ebx
  406283:	mov    edx,DWORD PTR [rsp+0x8]
  406287:	call   QWORD PTR [rbp+0x48]
  40628a:	test   eax,eax
  40628c:	jne    4062b5 <flatcc_builder_create_vtable@@Base+0x155>
  40628e:	add    ebx,0x1
  406291:	jmp    4061f7 <flatcc_builder_create_vtable@@Base+0x97>
  406296:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4062a0:	mov    ebx,DWORD PTR [rbp+0xf4]
  4062a6:	xor    r8d,r8d
  4062a9:	jmp    406278 <flatcc_builder_create_vtable@@Base+0x118>
  4062ab:	call   403050 <__stack_chk_fail@plt>
  4062b0:	call   4031af <posix_memalign@plt+0xbf>
  4062b5:	lea    rcx,[rip+0x3b64]        # 409e20 <_IO_stdin_used@@Base+0xe20>
  4062bc:	lea    rsi,[rip+0x310d]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4062c3:	lea    rdi,[rip+0x349d]        # 409767 <_IO_stdin_used@@Base+0x767>
  4062ca:	mov    edx,0x2a5
  4062cf:	call   403060 <__assert_fail@plt>
  4062d4:	call   40318c <posix_memalign@plt+0x9c>
  4062d9:	nop    DWORD PTR [rax+0x0]

00000000004062e0 <flatcc_builder_create_cached_vtable@@Base>:
  4062e0:	push   r15
  4062e2:	push   r14
  4062e4:	mov    r15,rdi
  4062e7:	push   r13
  4062e9:	push   r12
  4062eb:	movzx  r14d,dx
  4062ef:	push   rbp
  4062f0:	push   rbx
  4062f1:	mov    ebp,ecx
  4062f3:	sub    rsp,0x38
  4062f7:	mov    rbx,QWORD PTR [rdi+0xd8]
  4062fe:	mov    QWORD PTR [rsp+0x10],rsi
  406303:	mov    DWORD PTR [rsp+0x2c],edx
  406307:	test   rbx,rbx
  40630a:	je     406498 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
  406310:	mov    eax,0x20
  406315:	sub    eax,ebx
  406317:	shrx   ebp,ebp,eax
  40631c:	mov    rax,QWORD PTR [r15+0xa8]
  406323:	lea    r12,[rax+rbp*4]
  406327:	test   r12,r12
  40632a:	je     406480 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  406330:	mov    ebp,DWORD PTR [r12]
  406334:	test   ebp,ebp
  406336:	je     4065a0 <flatcc_builder_create_cached_vtable@@Base+0x2c0>
  40633c:	movzx  eax,r14w
  406340:	mov    r11,QWORD PTR [r15+0xb8]
  406347:	mov    r8,QWORD PTR [r15+0x78]
  40634b:	mov    r13,r12
  40634e:	mov    QWORD PTR [rsp+0x20],0x0
  406357:	mov    QWORD PTR [rsp+0x18],rax
  40635c:	jmp    40636b <flatcc_builder_create_cached_vtable@@Base+0x8b>
  40635e:	xchg   ax,ax
  406360:	mov    ebp,DWORD PTR [rbx+0xc]
  406363:	lea    r13,[rbx+0xc]
  406367:	test   ebp,ebp
  406369:	je     4063c8 <flatcc_builder_create_cached_vtable@@Base+0xe8>
  40636b:	mov    ebx,ebp
  40636d:	add    rbx,r11
  406370:	mov    esi,DWORD PTR [rbx+0x8]
  406373:	add    rsi,r8
  406376:	cmp    WORD PTR [rsi],r14w
  40637a:	jne    406360 <flatcc_builder_create_cached_vtable@@Base+0x80>
  40637c:	mov    rdx,QWORD PTR [rsp+0x18]
  406381:	mov    rdi,QWORD PTR [rsp+0x10]
  406386:	mov    QWORD PTR [rsp+0x8],r8
  40638b:	mov    QWORD PTR [rsp],r11
  40638f:	call   403090 <memcmp@plt>
  406394:	test   eax,eax
  406396:	mov    r11,QWORD PTR [rsp]
  40639a:	mov    r8,QWORD PTR [rsp+0x8]
  40639f:	jne    406360 <flatcc_builder_create_cached_vtable@@Base+0x80>
  4063a1:	mov    eax,DWORD PTR [r15+0x100]
  4063a8:	cmp    DWORD PTR [rbx+0x4],eax
  4063ab:	je     406450 <flatcc_builder_create_cached_vtable@@Base+0x170>
  4063b1:	mov    ebp,DWORD PTR [rbx+0xc]
  4063b4:	lea    r13,[rbx+0xc]
  4063b8:	mov    QWORD PTR [rsp+0x20],rbx
  4063bd:	test   ebp,ebp
  4063bf:	jne    40636b <flatcc_builder_create_cached_vtable@@Base+0x8b>
  4063c1:	nop    DWORD PTR [rax+0x0]
  4063c8:	mov    ebx,DWORD PTR [r15+0xe4]
  4063cf:	lea    rdx,[rbx+0x10]
  4063d3:	cmp    rdx,QWORD PTR [r15+0xc0]
  4063da:	ja     406578 <flatcc_builder_create_cached_vtable@@Base+0x298>
  4063e0:	add    rbx,QWORD PTR [r15+0xb8]
  4063e7:	je     406480 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  4063ed:	mov    eax,DWORD PTR [r15+0xe4]
  4063f4:	movzx  ebp,WORD PTR [rsp+0x2c]
  4063f9:	mov    rdi,r15
  4063fc:	mov    rsi,QWORD PTR [rsp+0x10]
  406401:	lea    edx,[rax+0x10]
  406404:	mov    DWORD PTR [r15+0xe4],edx
  40640b:	mov    edx,DWORD PTR [r15+0x100]
  406412:	mov    DWORD PTR [rbx+0x4],edx
  406415:	mov    edx,DWORD PTR [r12]
  406419:	mov    DWORD PTR [rbx+0xc],edx
  40641c:	mov    DWORD PTR [r12],eax
  406420:	mov    edx,ebp
  406422:	call   406160 <flatcc_builder_create_vtable@@Base>
  406427:	test   eax,eax
  406429:	mov    DWORD PTR [rbx],eax
  40642b:	je     406480 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  40642d:	mov    rdi,QWORD PTR [rsp+0x20]
  406432:	test   rdi,rdi
  406435:	je     4065ae <flatcc_builder_create_cached_vtable@@Base+0x2ce>
  40643b:	mov    edx,DWORD PTR [rdi+0x8]
  40643e:	mov    DWORD PTR [rbx+0x8],edx
  406441:	add    rsp,0x38
  406445:	pop    rbx
  406446:	pop    rbp
  406447:	pop    r12
  406449:	pop    r13
  40644b:	pop    r14
  40644d:	pop    r15
  40644f:	ret    
  406450:	cmp    r12,r13
  406453:	je     406467 <flatcc_builder_create_cached_vtable@@Base+0x187>
  406455:	mov    eax,DWORD PTR [rbx+0xc]
  406458:	mov    DWORD PTR [r13+0x0],eax
  40645c:	mov    eax,DWORD PTR [r12]
  406460:	mov    DWORD PTR [rbx+0xc],eax
  406463:	mov    DWORD PTR [r12],ebp
  406467:	mov    eax,DWORD PTR [rbx]
  406469:	add    rsp,0x38
  40646d:	pop    rbx
  40646e:	pop    rbp
  40646f:	pop    r12
  406471:	pop    r13
  406473:	pop    r14
  406475:	pop    r15
  406477:	ret    
  406478:	nop    DWORD PTR [rax+rax*1+0x0]
  406480:	add    rsp,0x38
  406484:	xor    eax,eax
  406486:	pop    rbx
  406487:	pop    rbp
  406488:	pop    r12
  40648a:	pop    r13
  40648c:	pop    r14
  40648e:	pop    r15
  406490:	ret    
  406491:	nop    DWORD PTR [rax+0x0]
  406498:	mov    eax,DWORD PTR [rdi+0xe4]
  40649e:	lea    r12,[rdi+0xa8]
  4064a5:	test   eax,eax
  4064a7:	jne    40663f <flatcc_builder_create_cached_vtable@@Base+0x35f>
  4064ad:	cmp    QWORD PTR [rdi+0xc0],0xf
  4064b5:	jbe    406548 <flatcc_builder_create_cached_vtable@@Base+0x268>
  4064bb:	cmp    QWORD PTR [r15+0xb8],0x0
  4064c3:	je     406480 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  4064c5:	mov    DWORD PTR [r15+0xe4],0x10
  4064d0:	mov    rdi,QWORD PTR [r15+0x40]
  4064d4:	mov    r8d,0x5
  4064da:	mov    ecx,0x1
  4064df:	mov    edx,0x100
  4064e4:	mov    rsi,r12
  4064e7:	call   QWORD PTR [r15+0x50]
  4064eb:	test   eax,eax
  4064ed:	jne    406480 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  4064ef:	mov    rcx,QWORD PTR [r15+0xb0]
  4064f6:	mov    eax,0x100
  4064fb:	jmp    406503 <flatcc_builder_create_cached_vtable@@Base+0x223>
  4064fd:	nop    DWORD PTR [rax]
  406500:	mov    rax,rdx
  406503:	lea    rdx,[rax+rax*1]
  406507:	cmp    rdx,rcx
  40650a:	jbe    406500 <flatcc_builder_create_cached_vtable@@Base+0x220>
  40650c:	shr    rax,0x2
  406510:	cmp    rax,0x1
  406514:	jbe    406608 <flatcc_builder_create_cached_vtable@@Base+0x328>
  40651a:	mov    esi,0x1
  40651f:	nop
  406520:	add    rbx,0x1
  406524:	shlx   rdx,rsi,rbx
  406529:	cmp    rax,rdx
  40652c:	ja     406520 <flatcc_builder_create_cached_vtable@@Base+0x240>
  40652e:	mov    eax,0x20
  406533:	sub    eax,ebx
  406535:	mov    QWORD PTR [r15+0xd8],rbx
  40653c:	jmp    406317 <flatcc_builder_create_cached_vtable@@Base+0x37>
  406541:	nop    DWORD PTR [rax+0x0]
  406548:	lea    rsi,[rdi+0xb8]
  40654f:	xor    ecx,ecx
  406551:	mov    rdi,QWORD PTR [rdi+0x40]
  406555:	mov    r8d,0x6
  40655b:	mov    edx,0x10
  406560:	call   QWORD PTR [r15+0x50]
  406564:	test   eax,eax
  406566:	je     4064bb <flatcc_builder_create_cached_vtable@@Base+0x1db>
  40656c:	jmp    40662a <flatcc_builder_create_cached_vtable@@Base+0x34a>
  406571:	nop    DWORD PTR [rax+0x0]
  406578:	xor    ecx,ecx
  40657a:	lea    rsi,[r15+0xb8]
  406581:	mov    rdi,QWORD PTR [r15+0x40]
  406585:	mov    r8d,0x6
  40658b:	call   QWORD PTR [r15+0x50]
  40658f:	test   eax,eax
  406591:	je     4063e0 <flatcc_builder_create_cached_vtable@@Base+0x100>
  406597:	jmp    40662a <flatcc_builder_create_cached_vtable@@Base+0x34a>
  40659c:	nop    DWORD PTR [rax+0x0]
  4065a0:	mov    QWORD PTR [rsp+0x20],0x0
  4065a9:	jmp    4063c8 <flatcc_builder_create_cached_vtable@@Base+0xe8>
  4065ae:	mov    rax,QWORD PTR [r15+0x118]
  4065b5:	mov    r12d,DWORD PTR [r15+0xe0]
  4065bc:	test   rax,rax
  4065bf:	je     4065cb <flatcc_builder_create_cached_vtable@@Base+0x2eb>
  4065c1:	lea    edx,[rbp+r12*1+0x0]
  4065c6:	cmp    rax,rdx
  4065c9:	jb     406630 <flatcc_builder_create_cached_vtable@@Base+0x350>
  4065cb:	lea    rdx,[r14+r12*1]
  4065cf:	cmp    rdx,QWORD PTR [r15+0x80]
  4065d6:	ja     406612 <flatcc_builder_create_cached_vtable@@Base+0x332>
  4065d8:	mov    rdi,r12
  4065db:	add    rdi,QWORD PTR [r15+0x78]
  4065df:	je     40665e <flatcc_builder_create_cached_vtable@@Base+0x37e>
  4065e1:	mov    eax,DWORD PTR [r15+0xe0]
  4065e8:	mov    rsi,QWORD PTR [rsp+0x10]
  4065ed:	mov    rdx,r14
  4065f0:	add    ebp,eax
  4065f2:	mov    DWORD PTR [rbx+0x8],eax
  4065f5:	mov    DWORD PTR [r15+0xe0],ebp
  4065fc:	call   4030b0 <memcpy@plt>
  406601:	mov    eax,DWORD PTR [rbx]
  406603:	jmp    406441 <flatcc_builder_create_cached_vtable@@Base+0x161>
  406608:	mov    eax,0x20
  40660d:	jmp    406535 <flatcc_builder_create_cached_vtable@@Base+0x255>
  406612:	xor    ecx,ecx
  406614:	lea    rsi,[r15+0x78]
  406618:	mov    rdi,QWORD PTR [r15+0x40]
  40661c:	mov    r8d,0x2
  406622:	call   QWORD PTR [r15+0x50]
  406626:	test   eax,eax
  406628:	je     4065d8 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
  40662a:	call   403169 <posix_memalign@plt+0x79>
  40662f:	nop
  406630:	mov    rdi,r15
  406633:	call   4048b0 <flatcc_builder_flush_vtable_cache@@Base>
  406638:	mov    eax,DWORD PTR [rbx]
  40663a:	jmp    406469 <flatcc_builder_create_cached_vtable@@Base+0x189>
  40663f:	lea    rcx,[rip+0x358a]        # 409bd0 <_IO_stdin_used@@Base+0xbd0>
  406646:	lea    rsi,[rip+0x2d83]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40664d:	lea    rdi,[rip+0x3159]        # 4097ad <_IO_stdin_used@@Base+0x7ad>
  406654:	mov    edx,0x156
  406659:	call   403060 <__assert_fail@plt>
  40665e:	mov    eax,0xffffffff
  406663:	jmp    406441 <flatcc_builder_create_cached_vtable@@Base+0x161>
  406668:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406670 <flatcc_builder_create_table@@Base>:
  406670:	push   rbp
  406671:	push   rbx
  406672:	sub    rsp,0xb8
  406679:	mov    rax,QWORD PTR fs:0x28
  406682:	mov    QWORD PTR [rsp+0xa8],rax
  40668a:	xor    eax,eax
  40668c:	test   r9d,r9d
  40668f:	mov    r11d,DWORD PTR [rsp+0xd0]
  406697:	js     40683d <flatcc_builder_create_table@@Base+0x1cd>
  40669d:	test   r11b,0x1
  4066a1:	je     40681e <flatcc_builder_create_table@@Base+0x1ae>
  4066a7:	cmp    cx,0x4
  4066ab:	mov    eax,0x4
  4066b0:	mov    rbx,rdi
  4066b3:	cmovb  ecx,eax
  4066b6:	cmp    WORD PTR [rdi+0xe8],cx
  4066bd:	movzx  eax,cx
  4066c0:	jae    4066c9 <flatcc_builder_create_table@@Base+0x59>
  4066c2:	mov    WORD PTR [rdi+0xe8],cx
  4066c9:	mov    ecx,DWORD PTR [rbx+0xf0]
  4066cf:	sub    eax,0x1
  4066d2:	mov    edi,0xfffffffc
  4066d7:	sub    r11d,0x1
  4066db:	mov    r10d,ecx
  4066de:	sub    r10d,edx
  4066e1:	and    r10d,eax
  4066e4:	mov    eax,edi
  4066e6:	sub    eax,edx
  4066e8:	add    eax,ecx
  4066ea:	sub    eax,r10d
  4066ed:	mov    ebp,eax
  4066ef:	sub    ebp,r11d
  4066f2:	test   r9d,r9d
  4066f5:	mov    DWORD PTR [rsp+0xc],ebp
  4066f9:	je     40672d <flatcc_builder_create_table@@Base+0xbd>
  4066fb:	lea    ecx,[r9-0x1]
  4066ff:	sub    edi,eax
  406701:	lea    r9,[r8+rcx*2+0x2]
  406706:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406710:	movzx  ecx,WORD PTR [r8]
  406714:	mov    r11d,edi
  406717:	add    r8,0x2
  40671b:	sub    r11d,ecx
  40671e:	add    DWORD PTR [rsi+rcx*1],r11d
  406722:	cmp    r9,r8
  406725:	jne    406710 <flatcc_builder_create_table@@Base+0xa0>
  406727:	mov    ecx,DWORD PTR [rbx+0xf0]
  40672d:	lea    rax,[rsp+0xc]
  406732:	test   rdx,rdx
  406735:	mov    QWORD PTR [rsp+0x10],0x4
  40673e:	mov    QWORD PTR [rsp+0x28],0x4
  406747:	mov    DWORD PTR [rsp+0x18],0x1
  40674f:	mov    r8d,0x4
  406755:	mov    QWORD PTR [rsp+0x20],rax
  40675a:	je     406777 <flatcc_builder_create_table@@Base+0x107>
  40675c:	lea    r8,[rdx+0x4]
  406760:	mov    QWORD PTR [rsp+0x30],rsi
  406765:	mov    QWORD PTR [rsp+0x38],rdx
  40676a:	mov    DWORD PTR [rsp+0x18],0x2
  406772:	mov    QWORD PTR [rsp+0x10],r8
  406777:	test   r10d,r10d
  40677a:	je     4067a8 <flatcc_builder_create_table@@Base+0x138>
  40677c:	movsxd rdx,DWORD PTR [rsp+0x18]
  406781:	mov    rsi,0x409ec0
  406788:	add    r8,r10
  40678b:	mov    QWORD PTR [rsp+0x10],r8
  406790:	mov    rax,rdx
  406793:	shl    rdx,0x4
  406797:	add    eax,0x1
  40679a:	mov    QWORD PTR [rsp+rdx*1+0x20],rsi
  40679f:	mov    QWORD PTR [rsp+rdx*1+0x28],r10
  4067a4:	mov    DWORD PTR [rsp+0x18],eax
  4067a8:	mov    ebp,ecx
  4067aa:	movabs rax,0x10000000f
  4067b4:	sub    ebp,r8d
  4067b7:	cmp    r8,rax
  4067ba:	ja     4067ff <flatcc_builder_create_table@@Base+0x18f>
  4067bc:	cmp    ebp,ecx
  4067be:	jge    4067ff <flatcc_builder_create_table@@Base+0x18f>
  4067c0:	lea    rsi,[rsp+0x20]
  4067c5:	mov    rdi,QWORD PTR [rbx+0x38]
  4067c9:	mov    ecx,ebp
  4067cb:	mov    edx,DWORD PTR [rsp+0x18]
  4067cf:	call   QWORD PTR [rbx+0x48]
  4067d2:	test   eax,eax
  4067d4:	jne    406861 <flatcc_builder_create_table@@Base+0x1f1>
  4067da:	mov    DWORD PTR [rbx+0xf0],ebp
  4067e0:	mov    eax,ebp
  4067e2:	mov    rbx,QWORD PTR [rsp+0xa8]
  4067ea:	xor    rbx,QWORD PTR fs:0x28
  4067f3:	jne    40685c <flatcc_builder_create_table@@Base+0x1ec>
  4067f5:	add    rsp,0xb8
  4067fc:	pop    rbx
  4067fd:	pop    rbp
  4067fe:	ret    
  4067ff:	lea    rcx,[rip+0x360a]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  406806:	lea    rsi,[rip+0x2bc3]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40680d:	lea    rdi,[rip+0x2f53]        # 409767 <_IO_stdin_used@@Base+0x767>
  406814:	mov    edx,0x287
  406819:	call   403060 <__assert_fail@plt>
  40681e:	lea    rcx,[rip+0x338b]        # 409bb0 <_IO_stdin_used@@Base+0xbb0>
  406825:	lea    rsi,[rip+0x2ba4]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40682c:	lea    rdi,[rip+0x2f9b]        # 4097ce <_IO_stdin_used@@Base+0x7ce>
  406833:	mov    edx,0x4db
  406838:	call   403060 <__assert_fail@plt>
  40683d:	lea    rcx,[rip+0x336c]        # 409bb0 <_IO_stdin_used@@Base+0xbb0>
  406844:	lea    rsi,[rip+0x2b85]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40684b:	lea    rdi,[rip+0x2f6a]        # 4097bc <_IO_stdin_used@@Base+0x7bc>
  406852:	mov    edx,0x4d5
  406857:	call   403060 <__assert_fail@plt>
  40685c:	call   403050 <__stack_chk_fail@plt>
  406861:	call   4031af <posix_memalign@plt+0xbf>
  406866:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000406870 <flatcc_builder_check_required_field@@Base>:
  406870:	mov    rax,QWORD PTR [rdi+0x30]
  406874:	cmp    WORD PTR [rax+0xe],0x3
  406879:	jne    406896 <flatcc_builder_check_required_field@@Base+0x26>
  40687b:	xor    eax,eax
  40687d:	cmp    WORD PTR [rdi+0x10],si
  406881:	jbe    406892 <flatcc_builder_check_required_field@@Base+0x22>
  406883:	mov    rax,QWORD PTR [rdi+0x8]
  406887:	movzx  edx,si
  40688a:	cmp    WORD PTR [rax+rdx*2],0x0
  40688f:	setne  al
  406892:	movzx  eax,al
  406895:	ret    
  406896:	lea    rcx,[rip+0x32e3]        # 409b80 <_IO_stdin_used@@Base+0xb80>
  40689d:	lea    rsi,[rip+0x2b2c]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4068a4:	lea    rdi,[rip+0x2d6d]        # 409618 <_IO_stdin_used@@Base+0x618>
  4068ab:	sub    rsp,0x8
  4068af:	mov    edx,0x4f8
  4068b4:	call   403060 <__assert_fail@plt>
  4068b9:	nop    DWORD PTR [rax+0x0]

00000000004068c0 <flatcc_builder_check_union_field@@Base>:
  4068c0:	mov    rax,QWORD PTR [rdi+0x30]
  4068c4:	cmp    WORD PTR [rax+0xe],0x3
  4068c9:	jne    40690b <flatcc_builder_check_union_field@@Base+0x4b>
  4068cb:	xor    eax,eax
  4068cd:	test   si,si
  4068d0:	je     4068fd <flatcc_builder_check_union_field@@Base+0x3d>
  4068d2:	cmp    si,WORD PTR [rdi+0x10]
  4068d6:	jae    4068fd <flatcc_builder_check_union_field@@Base+0x3d>
  4068d8:	mov    rcx,QWORD PTR [rdi+0x8]
  4068dc:	movzx  edx,si
  4068df:	movzx  eax,WORD PTR [rcx+rdx*2-0x2]
  4068e4:	test   ax,ax
  4068e7:	je     4068f3 <flatcc_builder_check_union_field@@Base+0x33>
  4068e9:	mov    rsi,QWORD PTR [rdi+0x18]
  4068ed:	cmp    BYTE PTR [rsi+rax*1],0x0
  4068f1:	jne    406900 <flatcc_builder_check_union_field@@Base+0x40>
  4068f3:	xor    eax,eax
  4068f5:	cmp    WORD PTR [rcx+rdx*2],0x0
  4068fa:	sete   al
  4068fd:	repz ret 
  4068ff:	nop
  406900:	xor    eax,eax
  406902:	cmp    WORD PTR [rcx+rdx*2],0x0
  406907:	setne  al
  40690a:	ret    
  40690b:	lea    rcx,[rip+0x322e]        # 409b40 <_IO_stdin_used@@Base+0xb40>
  406912:	lea    rsi,[rip+0x2ab7]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  406919:	lea    rdi,[rip+0x2cf8]        # 409618 <_IO_stdin_used@@Base+0x618>
  406920:	sub    rsp,0x8
  406924:	mov    edx,0x4ff
  406929:	call   403060 <__assert_fail@plt>
  40692e:	xchg   ax,ax

0000000000406930 <flatcc_builder_check_required@@Base>:
  406930:	mov    rax,QWORD PTR [rdi+0x30]
  406934:	cmp    WORD PTR [rax+0xe],0x3
  406939:	jne    40698b <flatcc_builder_check_required@@Base+0x5b>
  40693b:	movzx  ecx,WORD PTR [rdi+0x10]
  40693f:	xor    eax,eax
  406941:	cmp    ecx,edx
  406943:	jl     406980 <flatcc_builder_check_required@@Base+0x50>
  406945:	test   edx,edx
  406947:	jle    40697b <flatcc_builder_check_required@@Base+0x4b>
  406949:	mov    rcx,QWORD PTR [rdi+0x8]
  40694d:	movzx  edi,WORD PTR [rsi]
  406950:	cmp    WORD PTR [rcx+rdi*2],0x0
  406955:	je     406980 <flatcc_builder_check_required@@Base+0x50>
  406957:	sub    edx,0x1
  40695a:	lea    rax,[rsi+0x2]
  40695e:	lea    rsi,[rsi+rdx*2+0x2]
  406963:	jmp    406976 <flatcc_builder_check_required@@Base+0x46>
  406965:	nop    DWORD PTR [rax]
  406968:	movzx  edx,WORD PTR [rax]
  40696b:	add    rax,0x2
  40696f:	cmp    WORD PTR [rcx+rdx*2],0x0
  406974:	je     406988 <flatcc_builder_check_required@@Base+0x58>
  406976:	cmp    rax,rsi
  406979:	jne    406968 <flatcc_builder_check_required@@Base+0x38>
  40697b:	mov    eax,0x1
  406980:	repz ret 
  406982:	nop    WORD PTR [rax+rax*1+0x0]
  406988:	xor    eax,eax
  40698a:	ret    
  40698b:	lea    rcx,[rip+0x317e]        # 409b10 <_IO_stdin_used@@Base+0xb10>
  406992:	lea    rsi,[rip+0x2a37]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  406999:	lea    rdi,[rip+0x2c78]        # 409618 <_IO_stdin_used@@Base+0x618>
  4069a0:	sub    rsp,0x8
  4069a4:	mov    edx,0x511
  4069a9:	call   403060 <__assert_fail@plt>
  4069ae:	xchg   ax,ax

00000000004069b0 <flatcc_builder_end_table@@Base>:
  4069b0:	push   r13
  4069b2:	push   r12
  4069b4:	push   rbp
  4069b5:	push   rbx
  4069b6:	sub    rsp,0x8
  4069ba:	mov    rax,QWORD PTR [rdi+0x30]
  4069be:	cmp    WORD PTR [rax+0xe],0x3
  4069c3:	jne    406b1e <flatcc_builder_end_table@@Base+0x16e>
  4069c9:	movzx  ebp,WORD PTR [rdi+0x10]
  4069cd:	movzx  eax,WORD PTR [rdi+0x20]
  4069d1:	mov    rbx,rdi
  4069d4:	mov    rcx,QWORD PTR [rdi+0x8]
  4069d8:	add    ebp,0x2
  4069db:	add    eax,0x4
  4069de:	lea    r12,[rcx-0x4]
  4069e2:	add    ebp,ebp
  4069e4:	mov    WORD PTR [rcx-0x2],ax
  4069e8:	movzx  eax,ax
  4069eb:	mov    WORD PTR [rcx-0x4],bp
  4069ef:	mov    ecx,DWORD PTR [rdi+0x14]
  4069f2:	movzx  edx,bp
  4069f5:	mov    rsi,r12
  4069f8:	xor    ecx,edx
  4069fa:	imul   ecx,ecx,0x9e3779b1
  406a00:	xor    ecx,eax
  406a02:	imul   ecx,ecx,0x9e3779b1
  406a08:	mov    DWORD PTR [rdi+0x14],ecx
  406a0b:	call   4062e0 <flatcc_builder_create_cached_vtable@@Base>
  406a10:	test   eax,eax
  406a12:	mov    r13d,eax
  406a15:	jne    406a30 <flatcc_builder_end_table@@Base+0x80>
  406a17:	add    rsp,0x8
  406a1b:	xor    ebp,ebp
  406a1d:	pop    rbx
  406a1e:	mov    eax,ebp
  406a20:	pop    rbp
  406a21:	pop    r12
  406a23:	pop    r13
  406a25:	ret    
  406a26:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406a30:	movzx  edx,bp
  406a33:	xor    esi,esi
  406a35:	mov    rdi,r12
  406a38:	call   403070 <memset@plt>
  406a3d:	mov    rax,QWORD PTR [rbx+0x30]
  406a41:	mov    r9,QWORD PTR [rbx]
  406a44:	sub    rsp,0x8
  406a48:	mov    edx,DWORD PTR [rbx+0x20]
  406a4b:	movzx  ecx,WORD PTR [rbx+0xea]
  406a52:	mov    rdi,rbx
  406a55:	mov    rsi,QWORD PTR [rbx+0x18]
  406a59:	mov    r8d,DWORD PTR [rax+0x14]
  406a5d:	add    r8,QWORD PTR [rbx+0x88]
  406a64:	push   r13
  406a66:	sub    r9,r8
  406a69:	shr    r9,1
  406a6c:	call   406670 <flatcc_builder_create_table@@Base>
  406a71:	mov    ebp,eax
  406a73:	test   ebp,ebp
  406a75:	pop    rax
  406a76:	pop    rdx
  406a77:	je     406a17 <flatcc_builder_end_table@@Base+0x67>
  406a79:	mov    rax,QWORD PTR [rbx+0x30]
  406a7d:	mov    rdi,QWORD PTR [rbx+0x18]
  406a81:	xor    esi,esi
  406a83:	mov    edx,DWORD PTR [rax+0x18]
  406a86:	mov    DWORD PTR [rbx+0x14],edx
  406a89:	movzx  edx,WORD PTR [rax+0x1c]
  406a8d:	mov    WORD PTR [rbx+0x10],dx
  406a91:	mov    edx,DWORD PTR [rax+0x10]
  406a94:	add    rdx,QWORD PTR [rbx+0x58]
  406a98:	mov    QWORD PTR [rbx+0x8],rdx
  406a9c:	mov    eax,DWORD PTR [rax+0x14]
  406a9f:	add    rax,QWORD PTR [rbx+0x88]
  406aa6:	mov    edx,DWORD PTR [rbx+0x20]
  406aa9:	mov    QWORD PTR [rbx],rax
  406aac:	call   403070 <memset@plt>
  406ab1:	mov    rax,QWORD PTR [rbx+0x30]
  406ab5:	mov    edi,DWORD PTR [rbx+0x70]
  406ab8:	mov    esi,DWORD PTR [rax]
  406aba:	mov    edx,DWORD PTR [rax+0x8]
  406abd:	mov    ecx,DWORD PTR [rax+0x4]
  406ac0:	mov    DWORD PTR [rbx+0x20],edx
  406ac3:	mov    rdx,rsi
  406ac6:	mov    DWORD PTR [rbx+0x28],esi
  406ac9:	add    rsi,QWORD PTR [rbx+0x68]
  406acd:	sub    edi,edx
  406acf:	cmp    ecx,edi
  406ad1:	mov    edx,edi
  406ad3:	cmovb  edx,ecx
  406ad6:	mov    DWORD PTR [rbx+0x24],edx
  406ad9:	movzx  edx,WORD PTR [rbx+0xea]
  406ae0:	cmp    dx,WORD PTR [rbx+0xe8]
  406ae7:	mov    QWORD PTR [rbx+0x18],rsi
  406aeb:	mov    DWORD PTR [rax+0x4],ecx
  406aee:	jbe    406af7 <flatcc_builder_end_table@@Base+0x147>
  406af0:	mov    WORD PTR [rbx+0xe8],dx
  406af7:	movzx  edx,WORD PTR [rax+0xc]
  406afb:	sub    rax,0x24
  406aff:	sub    DWORD PTR [rbx+0x104],0x1
  406b06:	mov    QWORD PTR [rbx+0x30],rax
  406b0a:	mov    eax,ebp
  406b0c:	mov    WORD PTR [rbx+0xea],dx
  406b13:	add    rsp,0x8
  406b17:	pop    rbx
  406b18:	pop    rbp
  406b19:	pop    r12
  406b1b:	pop    r13
  406b1d:	ret    
  406b1e:	lea    rcx,[rip+0x2fcb]        # 409af0 <_IO_stdin_used@@Base+0xaf0>
  406b25:	lea    rsi,[rip+0x28a4]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  406b2c:	lea    rdi,[rip+0x2ae5]        # 409618 <_IO_stdin_used@@Base+0x618>
  406b33:	mov    edx,0x525
  406b38:	call   403060 <__assert_fail@plt>
  406b3d:	nop    DWORD PTR [rax]

0000000000406b40 <flatcc_builder_create_vector@@Base>:
  406b40:	push   rbp
  406b41:	push   rbx
  406b42:	sub    rsp,0xb8
  406b49:	mov    rax,QWORD PTR fs:0x28
  406b52:	mov    QWORD PTR [rsp+0xa8],rax
  406b5a:	xor    eax,eax
  406b5c:	cmp    rdx,r9
  406b5f:	ja     406ca4 <flatcc_builder_create_vector@@Base+0x164>
  406b65:	mov    rbx,rdi
  406b68:	cmp    r8w,0x4
  406b6d:	mov    eax,0x4
  406b72:	cmovb  r8d,eax
  406b76:	cmp    r8w,WORD PTR [rbx+0xe8]
  406b7e:	movzx  edi,r8w
  406b82:	jbe    406b8c <flatcc_builder_create_vector@@Base+0x4c>
  406b84:	mov    WORD PTR [rbx+0xe8],r8w
  406b8c:	imul   ecx,edx
  406b8f:	mov    DWORD PTR [rsp+0xc],edx
  406b93:	mov    edx,DWORD PTR [rbx+0xf0]
  406b99:	sub    edi,0x1
  406b9c:	mov    QWORD PTR [rsp+0x10],0x4
  406ba5:	mov    QWORD PTR [rsp+0x28],0x4
  406bae:	mov    DWORD PTR [rsp+0x18],0x1
  406bb6:	mov    r8d,0x4
  406bbc:	mov    eax,edx
  406bbe:	sub    eax,ecx
  406bc0:	and    eax,edi
  406bc2:	lea    rdi,[rsp+0xc]
  406bc7:	test   ecx,ecx
  406bc9:	mov    QWORD PTR [rsp+0x20],rdi
  406bce:	jne    406c60 <flatcc_builder_create_vector@@Base+0x120>
  406bd4:	test   eax,eax
  406bd6:	je     406c04 <flatcc_builder_create_vector@@Base+0xc4>
  406bd8:	movsxd rsi,DWORD PTR [rsp+0x18]
  406bdd:	mov    rdi,0x409ec0
  406be4:	add    r8,rax
  406be7:	mov    QWORD PTR [rsp+0x10],r8
  406bec:	mov    rcx,rsi
  406bef:	shl    rsi,0x4
  406bf3:	add    ecx,0x1
  406bf6:	mov    QWORD PTR [rsp+rsi*1+0x20],rdi
  406bfb:	mov    QWORD PTR [rsp+rsi*1+0x28],rax
  406c00:	mov    DWORD PTR [rsp+0x18],ecx
  406c04:	mov    ebp,edx
  406c06:	movabs rax,0x10000000f
  406c10:	sub    ebp,r8d
  406c13:	cmp    r8,rax
  406c16:	ja     406c80 <flatcc_builder_create_vector@@Base+0x140>
  406c18:	cmp    edx,ebp
  406c1a:	jle    406c80 <flatcc_builder_create_vector@@Base+0x140>
  406c1c:	lea    rsi,[rsp+0x20]
  406c21:	mov    rdi,QWORD PTR [rbx+0x38]
  406c25:	mov    ecx,ebp
  406c27:	mov    edx,DWORD PTR [rsp+0x18]
  406c2b:	call   QWORD PTR [rbx+0x48]
  406c2e:	test   eax,eax
  406c30:	jne    406c9f <flatcc_builder_create_vector@@Base+0x15f>
  406c32:	mov    DWORD PTR [rbx+0xf0],ebp
  406c38:	mov    eax,ebp
  406c3a:	mov    rbx,QWORD PTR [rsp+0xa8]
  406c42:	xor    rbx,QWORD PTR fs:0x28
  406c4b:	jne    406cc3 <flatcc_builder_create_vector@@Base+0x183>
  406c4d:	add    rsp,0xb8
  406c54:	pop    rbx
  406c55:	pop    rbp
  406c56:	ret    
  406c57:	nop    WORD PTR [rax+rax*1+0x0]
  406c60:	lea    r8,[rcx+0x4]
  406c64:	mov    QWORD PTR [rsp+0x30],rsi
  406c69:	mov    QWORD PTR [rsp+0x38],rcx
  406c6e:	mov    DWORD PTR [rsp+0x18],0x2
  406c76:	mov    QWORD PTR [rsp+0x10],r8
  406c7b:	jmp    406bd4 <flatcc_builder_create_vector@@Base+0x94>
  406c80:	lea    rcx,[rip+0x3189]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  406c87:	lea    rsi,[rip+0x2742]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  406c8e:	lea    rdi,[rip+0x2ad2]        # 409767 <_IO_stdin_used@@Base+0x767>
  406c95:	mov    edx,0x287
  406c9a:	call   403060 <__assert_fail@plt>
  406c9f:	call   4031af <posix_memalign@plt+0xbf>
  406ca4:	lea    rcx,[rip+0x2e25]        # 409ad0 <_IO_stdin_used@@Base+0xad0>
  406cab:	lea    rsi,[rip+0x271e]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  406cb2:	lea    rdi,[rip+0x2b20]        # 4097d9 <_IO_stdin_used@@Base+0x7d9>
  406cb9:	mov    edx,0x555
  406cbe:	call   403060 <__assert_fail@plt>
  406cc3:	call   403050 <__stack_chk_fail@plt>
  406cc8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406cd0 <flatcc_builder_end_vector@@Base>:
  406cd0:	push   rbp
  406cd1:	push   rbx
  406cd2:	sub    rsp,0x8
  406cd6:	mov    rax,QWORD PTR [rdi+0x30]
  406cda:	cmp    WORD PTR [rax+0xe],0x4
  406cdf:	jne    406d8f <flatcc_builder_end_vector@@Base+0xbf>
  406ce5:	mov    ecx,DWORD PTR [rax+0x10]
  406ce8:	mov    edx,DWORD PTR [rax+0x14]
  406ceb:	mov    rbx,rdi
  406cee:	mov    r9d,DWORD PTR [rax+0x18]
  406cf2:	movzx  r8d,WORD PTR [rdi+0xea]
  406cfa:	mov    rsi,QWORD PTR [rdi+0x18]
  406cfe:	call   406b40 <flatcc_builder_create_vector@@Base>
  406d03:	test   eax,eax
  406d05:	mov    ebp,eax
  406d07:	jne    406d18 <flatcc_builder_end_vector@@Base+0x48>
  406d09:	add    rsp,0x8
  406d0d:	mov    eax,ebp
  406d0f:	pop    rbx
  406d10:	pop    rbp
  406d11:	ret    
  406d12:	nop    WORD PTR [rax+rax*1+0x0]
  406d18:	mov    edx,DWORD PTR [rbx+0x20]
  406d1b:	mov    rdi,QWORD PTR [rbx+0x18]
  406d1f:	xor    esi,esi
  406d21:	call   403070 <memset@plt>
  406d26:	mov    rax,QWORD PTR [rbx+0x30]
  406d2a:	mov    edi,DWORD PTR [rbx+0x70]
  406d2d:	mov    esi,DWORD PTR [rax]
  406d2f:	mov    edx,DWORD PTR [rax+0x8]
  406d32:	mov    ecx,DWORD PTR [rax+0x4]
  406d35:	mov    DWORD PTR [rbx+0x20],edx
  406d38:	mov    rdx,rsi
  406d3b:	mov    DWORD PTR [rbx+0x28],esi
  406d3e:	add    rsi,QWORD PTR [rbx+0x68]
  406d42:	sub    edi,edx
  406d44:	cmp    ecx,edi
  406d46:	mov    edx,edi
  406d48:	cmovb  edx,ecx
  406d4b:	mov    DWORD PTR [rbx+0x24],edx
  406d4e:	movzx  edx,WORD PTR [rbx+0xea]
  406d55:	cmp    dx,WORD PTR [rbx+0xe8]
  406d5c:	mov    QWORD PTR [rbx+0x18],rsi
  406d60:	mov    DWORD PTR [rax+0x4],ecx
  406d63:	jbe    406d6c <flatcc_builder_end_vector@@Base+0x9c>
  406d65:	mov    WORD PTR [rbx+0xe8],dx
  406d6c:	movzx  edx,WORD PTR [rax+0xc]
  406d70:	sub    rax,0x24
  406d74:	sub    DWORD PTR [rbx+0x104],0x1
  406d7b:	mov    QWORD PTR [rbx+0x30],rax
  406d7f:	mov    eax,ebp
  406d81:	mov    WORD PTR [rbx+0xea],dx
  406d88:	add    rsp,0x8
  406d8c:	pop    rbx
  406d8d:	pop    rbp
  406d8e:	ret    
  406d8f:	lea    rcx,[rip+0x2d1a]        # 409ab0 <_IO_stdin_used@@Base+0xab0>
  406d96:	lea    rsi,[rip+0x2633]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  406d9d:	lea    rdi,[rip+0x270c]        # 4094b0 <_IO_stdin_used@@Base+0x4b0>
  406da4:	mov    edx,0x578
  406da9:	call   403060 <__assert_fail@plt>
  406dae:	xchg   ax,ax

0000000000406db0 <flatcc_builder_vector_count@@Base>:
  406db0:	mov    rax,QWORD PTR [rdi+0x30]
  406db4:	mov    eax,DWORD PTR [rax+0x14]
  406db7:	ret    
  406db8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406dc0 <flatcc_builder_vector_edit@@Base>:
  406dc0:	mov    rax,QWORD PTR [rdi+0x18]
  406dc4:	ret    
  406dc5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406dd0 <flatcc_builder_create_offset_vector_direct@@Base>:
  406dd0:	xor    ecx,ecx
  406dd2:	jmp    404680 <flatcc_builder_default_alloc@@Base+0x390>
  406dd7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406de0 <flatcc_builder_end_offset_vector@@Base>:
  406de0:	push   rbp
  406de1:	push   rbx
  406de2:	sub    rsp,0x8
  406de6:	mov    rax,QWORD PTR [rdi+0x30]
  406dea:	cmp    WORD PTR [rax+0xe],0x5
  406def:	jne    406e8f <flatcc_builder_end_offset_vector@@Base+0xaf>
  406df5:	mov    edx,DWORD PTR [rax+0x14]
  406df8:	mov    rsi,QWORD PTR [rdi+0x18]
  406dfc:	mov    rbx,rdi
  406dff:	call   406dd0 <flatcc_builder_create_offset_vector_direct@@Base>
  406e04:	test   eax,eax
  406e06:	mov    ebp,eax
  406e08:	jne    406e18 <flatcc_builder_end_offset_vector@@Base+0x38>
  406e0a:	add    rsp,0x8
  406e0e:	mov    eax,ebp
  406e10:	pop    rbx
  406e11:	pop    rbp
  406e12:	ret    
  406e13:	nop    DWORD PTR [rax+rax*1+0x0]
  406e18:	mov    edx,DWORD PTR [rbx+0x20]
  406e1b:	mov    rdi,QWORD PTR [rbx+0x18]
  406e1f:	xor    esi,esi
  406e21:	call   403070 <memset@plt>
  406e26:	mov    rax,QWORD PTR [rbx+0x30]
  406e2a:	mov    edi,DWORD PTR [rbx+0x70]
  406e2d:	mov    esi,DWORD PTR [rax]
  406e2f:	mov    edx,DWORD PTR [rax+0x8]
  406e32:	mov    ecx,DWORD PTR [rax+0x4]
  406e35:	mov    DWORD PTR [rbx+0x20],edx
  406e38:	mov    rdx,rsi
  406e3b:	mov    DWORD PTR [rbx+0x28],esi
  406e3e:	add    rsi,QWORD PTR [rbx+0x68]
  406e42:	sub    edi,edx
  406e44:	cmp    ecx,edi
  406e46:	mov    edx,edi
  406e48:	cmovb  edx,ecx
  406e4b:	mov    DWORD PTR [rbx+0x24],edx
  406e4e:	movzx  edx,WORD PTR [rbx+0xea]
  406e55:	cmp    dx,WORD PTR [rbx+0xe8]
  406e5c:	mov    QWORD PTR [rbx+0x18],rsi
  406e60:	mov    DWORD PTR [rax+0x4],ecx
  406e63:	jbe    406e6c <flatcc_builder_end_offset_vector@@Base+0x8c>
  406e65:	mov    WORD PTR [rbx+0xe8],dx
  406e6c:	movzx  edx,WORD PTR [rax+0xc]
  406e70:	sub    rax,0x24
  406e74:	sub    DWORD PTR [rbx+0x104],0x1
  406e7b:	mov    QWORD PTR [rbx+0x30],rax
  406e7f:	mov    eax,ebp
  406e81:	mov    WORD PTR [rbx+0xea],dx
  406e88:	add    rsp,0x8
  406e8c:	pop    rbx
  406e8d:	pop    rbp
  406e8e:	ret    
  406e8f:	lea    rcx,[rip+0x2bca]        # 409a60 <_IO_stdin_used@@Base+0xa60>
  406e96:	lea    rsi,[rip+0x2533]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  406e9d:	lea    rdi,[rip+0x267c]        # 409520 <_IO_stdin_used@@Base+0x520>
  406ea4:	mov    edx,0x5c8
  406ea9:	call   403060 <__assert_fail@plt>
  406eae:	xchg   ax,ax

0000000000406eb0 <flatcc_builder_create_offset_vector@@Base>:
  406eb0:	push   r12
  406eb2:	push   rbp
  406eb3:	mov    r12,rsi
  406eb6:	push   rbx
  406eb7:	mov    rbp,rdx
  406eba:	mov    rbx,rdi
  406ebd:	call   405e50 <flatcc_builder_start_offset_vector@@Base>
  406ec2:	test   eax,eax
  406ec4:	je     406ed0 <flatcc_builder_create_offset_vector@@Base+0x20>
  406ec6:	pop    rbx
  406ec7:	xor    eax,eax
  406ec9:	pop    rbp
  406eca:	pop    r12
  406ecc:	ret    
  406ecd:	nop    DWORD PTR [rax]
  406ed0:	mov    rsi,rbp
  406ed3:	mov    rdi,rbx
  406ed6:	call   405910 <flatcc_builder_extend_offset_vector@@Base>
  406edb:	test   rax,rax
  406ede:	je     406ec6 <flatcc_builder_create_offset_vector@@Base+0x16>
  406ee0:	lea    rdx,[rbp*4+0x0]
  406ee8:	mov    rsi,r12
  406eeb:	mov    rdi,rax
  406eee:	call   4030b0 <memcpy@plt>
  406ef3:	mov    rdi,rbx
  406ef6:	pop    rbx
  406ef7:	pop    rbp
  406ef8:	pop    r12
  406efa:	jmp    406de0 <flatcc_builder_end_offset_vector@@Base>
  406eff:	nop

0000000000406f00 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  406f00:	push   rbp
  406f01:	push   rbx
  406f02:	sub    rsp,0x8
  406f06:	mov    rax,QWORD PTR [rdi+0x30]
  406f0a:	cmp    WORD PTR [rax+0xe],0x5
  406f0f:	jne    406fb7 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb7>
  406f15:	mov    edx,DWORD PTR [rax+0x14]
  406f18:	mov    rcx,rsi
  406f1b:	mov    rsi,QWORD PTR [rdi+0x18]
  406f1f:	mov    rbx,rdi
  406f22:	call   404680 <flatcc_builder_default_alloc@@Base+0x390>
  406f27:	test   eax,eax
  406f29:	mov    ebp,eax
  406f2b:	jne    406f40 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
  406f2d:	add    rsp,0x8
  406f31:	mov    eax,ebp
  406f33:	pop    rbx
  406f34:	pop    rbp
  406f35:	ret    
  406f36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406f40:	mov    edx,DWORD PTR [rbx+0x20]
  406f43:	mov    rdi,QWORD PTR [rbx+0x18]
  406f47:	xor    esi,esi
  406f49:	call   403070 <memset@plt>
  406f4e:	mov    rax,QWORD PTR [rbx+0x30]
  406f52:	mov    edi,DWORD PTR [rbx+0x70]
  406f55:	mov    esi,DWORD PTR [rax]
  406f57:	mov    edx,DWORD PTR [rax+0x8]
  406f5a:	mov    ecx,DWORD PTR [rax+0x4]
  406f5d:	mov    DWORD PTR [rbx+0x20],edx
  406f60:	mov    rdx,rsi
  406f63:	mov    DWORD PTR [rbx+0x28],esi
  406f66:	add    rsi,QWORD PTR [rbx+0x68]
  406f6a:	sub    edi,edx
  406f6c:	cmp    ecx,edi
  406f6e:	mov    edx,edi
  406f70:	cmovb  edx,ecx
  406f73:	mov    DWORD PTR [rbx+0x24],edx
  406f76:	movzx  edx,WORD PTR [rbx+0xea]
  406f7d:	cmp    dx,WORD PTR [rbx+0xe8]
  406f84:	mov    QWORD PTR [rbx+0x18],rsi
  406f88:	mov    DWORD PTR [rax+0x4],ecx
  406f8b:	jbe    406f94 <flatcc_builder_end_offset_vector_for_unions@@Base+0x94>
  406f8d:	mov    WORD PTR [rbx+0xe8],dx
  406f94:	movzx  edx,WORD PTR [rax+0xc]
  406f98:	sub    rax,0x24
  406f9c:	sub    DWORD PTR [rbx+0x104],0x1
  406fa3:	mov    QWORD PTR [rbx+0x30],rax
  406fa7:	mov    eax,ebp
  406fa9:	mov    WORD PTR [rbx+0xea],dx
  406fb0:	add    rsp,0x8
  406fb4:	pop    rbx
  406fb5:	pop    rbp
  406fb6:	ret    
  406fb7:	lea    rcx,[rip+0x2a62]        # 409a20 <_IO_stdin_used@@Base+0xa20>
  406fbe:	lea    rsi,[rip+0x240b]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  406fc5:	lea    rdi,[rip+0x2554]        # 409520 <_IO_stdin_used@@Base+0x520>
  406fcc:	mov    edx,0x5d5
  406fd1:	call   403060 <__assert_fail@plt>
  406fd6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000406fe0 <flatcc_builder_offset_vector_edit@@Base>:
  406fe0:	mov    rax,QWORD PTR [rdi+0x18]
  406fe4:	ret    
  406fe5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406ff0 <flatcc_builder_offset_vector_count@@Base>:
  406ff0:	mov    rax,QWORD PTR [rdi+0x30]
  406ff4:	mov    eax,DWORD PTR [rax+0x14]
  406ff7:	ret    
  406ff8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407000 <flatcc_builder_create_union_vector_direct@@Base>:
  407000:	push   r13
  407002:	push   r12
  407004:	mov    r13,rcx
  407007:	push   rbp
  407008:	push   rbx
  407009:	mov    r12,rsi
  40700c:	mov    rcx,r12
  40700f:	mov    rsi,rdx
  407012:	mov    rdx,r13
  407015:	sub    rsp,0x8
  407019:	mov    rbp,rdi
  40701c:	call   404680 <flatcc_builder_default_alloc@@Base+0x390>
  407021:	test   eax,eax
  407023:	jne    407038 <flatcc_builder_create_union_vector_direct@@Base+0x38>
  407025:	add    rsp,0x8
  407029:	xor    eax,eax
  40702b:	pop    rbx
  40702c:	pop    rbp
  40702d:	pop    r12
  40702f:	pop    r13
  407031:	ret    
  407032:	nop    WORD PTR [rax+rax*1+0x0]
  407038:	mov    ebx,eax
  40703a:	mov    rdx,r13
  40703d:	mov    ecx,0x1
  407042:	mov    rsi,r12
  407045:	mov    rdi,rbp
  407048:	mov    r9d,0xffffffff
  40704e:	mov    r8d,0x1
  407054:	call   406b40 <flatcc_builder_create_vector@@Base>
  407059:	mov    rcx,rbx
  40705c:	mov    edx,eax
  40705e:	shl    rcx,0x20
  407062:	mov    rbx,rcx
  407065:	or     rbx,rdx
  407068:	test   eax,eax
  40706a:	mov    rax,rcx
  40706d:	cmovne rax,rbx
  407071:	add    rsp,0x8
  407075:	pop    rbx
  407076:	pop    rbp
  407077:	pop    r12
  407079:	pop    r13
  40707b:	ret    
  40707c:	nop    DWORD PTR [rax+0x0]

0000000000407080 <flatcc_builder_create_union_vector@@Base>:
  407080:	push   r13
  407082:	push   r12
  407084:	mov    r12,rdx
  407087:	push   rbp
  407088:	push   rbx
  407089:	mov    rbp,rsi
  40708c:	mov    rbx,rdi
  40708f:	sub    rsp,0x8
  407093:	call   405e50 <flatcc_builder_start_offset_vector@@Base>
  407098:	test   eax,eax
  40709a:	je     4070b0 <flatcc_builder_create_union_vector@@Base+0x30>
  40709c:	add    rsp,0x8
  4070a0:	xor    eax,eax
  4070a2:	pop    rbx
  4070a3:	pop    rbp
  4070a4:	pop    r12
  4070a6:	pop    r13
  4070a8:	ret    
  4070a9:	nop    DWORD PTR [rax+0x0]
  4070b0:	mov    rsi,r12
  4070b3:	mov    rdi,rbx
  4070b6:	call   405910 <flatcc_builder_extend_offset_vector@@Base>
  4070bb:	test   rax,rax
  4070be:	je     40709c <flatcc_builder_create_union_vector@@Base+0x1c>
  4070c0:	mov    r13d,DWORD PTR [rbx+0x20]
  4070c4:	mov    rax,r13
  4070c7:	add    eax,r12d
  4070ca:	cmp    eax,DWORD PTR [rbx+0x24]
  4070cd:	mov    DWORD PTR [rbx+0x20],eax
  4070d0:	jae    4071b0 <flatcc_builder_create_union_vector@@Base+0x130>
  4070d6:	add    r13,QWORD PTR [rbx+0x18]
  4070da:	je     40709c <flatcc_builder_create_union_vector@@Base+0x1c>
  4070dc:	mov    rdi,rbx
  4070df:	call   406fe0 <flatcc_builder_offset_vector_edit@@Base>
  4070e4:	xor    edi,edi
  4070e6:	test   r12,r12
  4070e9:	je     40710d <flatcc_builder_create_union_vector@@Base+0x8d>
  4070eb:	nop    DWORD PTR [rax+rax*1+0x0]
  4070f0:	movzx  r8d,BYTE PTR [rbp+rdi*8+0x0]
  4070f6:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  4070fb:	mov    r8d,DWORD PTR [rbp+rdi*8+0x4]
  407100:	mov    DWORD PTR [rax+rdi*4],r8d
  407104:	add    rdi,0x1
  407108:	cmp    r12,rdi
  40710b:	jne    4070f0 <flatcc_builder_create_union_vector@@Base+0x70>
  40710d:	mov    rcx,r12
  407110:	mov    rdx,rax
  407113:	mov    rsi,r13
  407116:	mov    rdi,rbx
  407119:	call   407000 <flatcc_builder_create_union_vector_direct@@Base>
  40711e:	mov    edx,DWORD PTR [rbx+0x20]
  407121:	mov    rdi,QWORD PTR [rbx+0x18]
  407125:	xor    esi,esi
  407127:	mov    r12,rax
  40712a:	mov    rbp,rax
  40712d:	sar    r12,0x20
  407131:	call   403070 <memset@plt>
  407136:	mov    rax,QWORD PTR [rbx+0x30]
  40713a:	mov    esi,DWORD PTR [rax]
  40713c:	mov    edx,DWORD PTR [rax+0x8]
  40713f:	mov    ecx,DWORD PTR [rax+0x4]
  407142:	mov    DWORD PTR [rbx+0x20],edx
  407145:	mov    DWORD PTR [rbx+0x28],esi
  407148:	mov    rdx,rsi
  40714b:	add    rsi,QWORD PTR [rbx+0x68]
  40714f:	mov    QWORD PTR [rbx+0x18],rsi
  407153:	mov    esi,DWORD PTR [rbx+0x70]
  407156:	sub    esi,edx
  407158:	cmp    ecx,esi
  40715a:	mov    edx,esi
  40715c:	cmovb  edx,ecx
  40715f:	mov    DWORD PTR [rbx+0x24],edx
  407162:	movzx  edx,WORD PTR [rbx+0xea]
  407169:	cmp    dx,WORD PTR [rbx+0xe8]
  407170:	mov    DWORD PTR [rax+0x4],ecx
  407173:	jbe    40717c <flatcc_builder_create_union_vector@@Base+0xfc>
  407175:	mov    WORD PTR [rbx+0xe8],dx
  40717c:	movzx  edx,WORD PTR [rax+0xc]
  407180:	sub    rax,0x24
  407184:	sub    DWORD PTR [rbx+0x104],0x1
  40718b:	mov    QWORD PTR [rbx+0x30],rax
  40718f:	shl    r12,0x20
  407193:	mov    eax,ebp
  407195:	or     rax,r12
  407198:	mov    WORD PTR [rbx+0xea],dx
  40719f:	add    rsp,0x8
  4071a3:	pop    rbx
  4071a4:	pop    rbp
  4071a5:	pop    r12
  4071a7:	pop    r13
  4071a9:	ret    
  4071aa:	nop    WORD PTR [rax+rax*1+0x0]
  4071b0:	lea    esi,[rax+0x1]
  4071b3:	mov    edx,0xfffffffc
  4071b8:	mov    rdi,rbx
  4071bb:	call   404290 <access_monster_buffer@@Base+0x5a0>
  4071c0:	test   eax,eax
  4071c2:	je     4070d6 <flatcc_builder_create_union_vector@@Base+0x56>
  4071c8:	jmp    40709c <flatcc_builder_create_union_vector@@Base+0x1c>
  4071cd:	nop    DWORD PTR [rax]

00000000004071d0 <flatcc_builder_start_union_vector@@Base>:
  4071d0:	push   rbx
  4071d1:	mov    esi,0x4
  4071d6:	mov    rbx,rdi
  4071d9:	call   404550 <flatcc_builder_default_alloc@@Base+0x260>
  4071de:	test   eax,eax
  4071e0:	jne    407228 <flatcc_builder_start_union_vector@@Base+0x58>
  4071e2:	mov    rcx,QWORD PTR [rbx+0x30]
  4071e6:	mov    edx,0x7
  4071eb:	mov    DWORD PTR [rcx+0x10],0x8
  4071f2:	mov    DWORD PTR [rcx+0x14],0x0
  4071f9:	mov    WORD PTR [rcx+0xe],dx
  4071fd:	mov    edx,DWORD PTR [rbx+0x28]
  407200:	mov    rsi,rdx
  407203:	add    rdx,QWORD PTR [rbx+0x68]
  407207:	mov    QWORD PTR [rbx+0x18],rdx
  40720b:	mov    edx,DWORD PTR [rbx+0x70]
  40720e:	sub    edx,esi
  407210:	mov    esi,0xfffffffc
  407215:	cmp    edx,esi
  407217:	cmova  edx,esi
  40721a:	mov    DWORD PTR [rbx+0x24],edx
  40721d:	mov    DWORD PTR [rcx+0x4],esi
  407220:	pop    rbx
  407221:	ret    
  407222:	nop    WORD PTR [rax+rax*1+0x0]
  407228:	mov    eax,0xffffffff
  40722d:	pop    rbx
  40722e:	ret    
  40722f:	nop

0000000000407230 <flatcc_builder_union_vector_edit@@Base>:
  407230:	mov    rax,QWORD PTR [rdi+0x18]
  407234:	ret    
  407235:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407240 <flatcc_builder_union_vector_count@@Base>:
  407240:	mov    rax,QWORD PTR [rdi+0x30]
  407244:	mov    eax,DWORD PTR [rax+0x14]
  407247:	ret    
  407248:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407250 <flatcc_builder_end_union_vector@@Base>:
  407250:	push   r13
  407252:	push   r12
  407254:	push   rbp
  407255:	push   rbx
  407256:	sub    rsp,0x8
  40725a:	mov    rax,QWORD PTR [rdi+0x30]
  40725e:	cmp    WORD PTR [rax+0xe],0x7
  407263:	jne    407395 <flatcc_builder_end_union_vector@@Base+0x145>
  407269:	mov    rbx,rdi
  40726c:	call   407240 <flatcc_builder_union_vector_count@@Base>
  407271:	mov    ebp,DWORD PTR [rbx+0x20]
  407274:	mov    r12,rax
  407277:	lea    eax,[rax+rax*4]
  40727a:	add    eax,ebp
  40727c:	cmp    eax,DWORD PTR [rbx+0x24]
  40727f:	mov    DWORD PTR [rbx+0x20],eax
  407282:	jae    407370 <flatcc_builder_end_union_vector@@Base+0x120>
  407288:	add    rbp,QWORD PTR [rbx+0x18]
  40728c:	je     407388 <flatcc_builder_end_union_vector@@Base+0x138>
  407292:	mov    rdi,rbx
  407295:	lea    r13,[rbp+r12*4+0x0]
  40729a:	call   407230 <flatcc_builder_union_vector_edit@@Base>
  40729f:	xor    edi,edi
  4072a1:	test   r12,r12
  4072a4:	je     4072cd <flatcc_builder_end_union_vector@@Base+0x7d>
  4072a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4072b0:	movzx  r8d,BYTE PTR [rax+rdi*8]
  4072b5:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  4072ba:	mov    r8d,DWORD PTR [rax+rdi*8+0x4]
  4072bf:	mov    DWORD PTR [rbp+rdi*4+0x0],r8d
  4072c4:	add    rdi,0x1
  4072c8:	cmp    r12,rdi
  4072cb:	jne    4072b0 <flatcc_builder_end_union_vector@@Base+0x60>
  4072cd:	mov    rcx,r12
  4072d0:	mov    rdx,rbp
  4072d3:	mov    rsi,r13
  4072d6:	mov    rdi,rbx
  4072d9:	call   407000 <flatcc_builder_create_union_vector_direct@@Base>
  4072de:	mov    edx,DWORD PTR [rbx+0x20]
  4072e1:	mov    rdi,QWORD PTR [rbx+0x18]
  4072e5:	xor    esi,esi
  4072e7:	mov    r12,rax
  4072ea:	mov    rbp,rax
  4072ed:	sar    r12,0x20
  4072f1:	call   403070 <memset@plt>
  4072f6:	mov    rax,QWORD PTR [rbx+0x30]
  4072fa:	mov    esi,DWORD PTR [rax]
  4072fc:	mov    edx,DWORD PTR [rax+0x8]
  4072ff:	mov    ecx,DWORD PTR [rax+0x4]
  407302:	mov    DWORD PTR [rbx+0x20],edx
  407305:	mov    DWORD PTR [rbx+0x28],esi
  407308:	mov    rdx,rsi
  40730b:	add    rsi,QWORD PTR [rbx+0x68]
  40730f:	mov    QWORD PTR [rbx+0x18],rsi
  407313:	mov    esi,DWORD PTR [rbx+0x70]
  407316:	sub    esi,edx
  407318:	cmp    ecx,esi
  40731a:	mov    edx,esi
  40731c:	cmovb  edx,ecx
  40731f:	mov    DWORD PTR [rbx+0x24],edx
  407322:	movzx  edx,WORD PTR [rbx+0xea]
  407329:	cmp    dx,WORD PTR [rbx+0xe8]
  407330:	mov    DWORD PTR [rax+0x4],ecx
  407333:	jbe    40733c <flatcc_builder_end_union_vector@@Base+0xec>
  407335:	mov    WORD PTR [rbx+0xe8],dx
  40733c:	movzx  edx,WORD PTR [rax+0xc]
  407340:	sub    rax,0x24
  407344:	sub    DWORD PTR [rbx+0x104],0x1
  40734b:	mov    QWORD PTR [rbx+0x30],rax
  40734f:	shl    r12,0x20
  407353:	mov    eax,ebp
  407355:	or     rax,r12
  407358:	mov    WORD PTR [rbx+0xea],dx
  40735f:	add    rsp,0x8
  407363:	pop    rbx
  407364:	pop    rbp
  407365:	pop    r12
  407367:	pop    r13
  407369:	ret    
  40736a:	nop    WORD PTR [rax+rax*1+0x0]
  407370:	lea    esi,[rax+0x1]
  407373:	mov    edx,0xfffffffc
  407378:	mov    rdi,rbx
  40737b:	call   404290 <access_monster_buffer@@Base+0x5a0>
  407380:	test   eax,eax
  407382:	je     407288 <flatcc_builder_end_union_vector@@Base+0x38>
  407388:	add    rsp,0x8
  40738c:	xor    eax,eax
  40738e:	pop    rbx
  40738f:	pop    rbp
  407390:	pop    r12
  407392:	pop    r13
  407394:	ret    
  407395:	lea    rcx,[rip+0x2604]        # 4099a0 <_IO_stdin_used@@Base+0x9a0>
  40739c:	lea    rsi,[rip+0x202d]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4073a3:	lea    rdi,[rip+0x229e]        # 409648 <_IO_stdin_used@@Base+0x648>
  4073aa:	mov    edx,0x651
  4073af:	call   403060 <__assert_fail@plt>
  4073b4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4073bf:	nop

00000000004073c0 <flatcc_builder_extend_union_vector@@Base>:
  4073c0:	push   rbp
  4073c1:	push   rbx
  4073c2:	xor    edx,edx
  4073c4:	mov    ecx,esi
  4073c6:	sub    rsp,0x8
  4073ca:	mov    rax,QWORD PTR [rdi+0x30]
  4073ce:	add    ecx,DWORD PTR [rax+0x14]
  4073d1:	setb   dl
  4073d4:	test   edx,edx
  4073d6:	jne    40741d <flatcc_builder_extend_union_vector@@Base+0x5d>
  4073d8:	cmp    ecx,0x1fffffff
  4073de:	ja     40741d <flatcc_builder_extend_union_vector@@Base+0x5d>
  4073e0:	mov    DWORD PTR [rax+0x14],ecx
  4073e3:	mov    ebp,DWORD PTR [rdi+0x20]
  4073e6:	mov    rbx,rdi
  4073e9:	lea    eax,[rbp+rsi*8+0x0]
  4073ed:	cmp    eax,DWORD PTR [rdi+0x24]
  4073f0:	mov    DWORD PTR [rdi+0x20],eax
  4073f3:	jae    407408 <flatcc_builder_extend_union_vector@@Base+0x48>
  4073f5:	mov    rax,rbp
  4073f8:	add    rax,QWORD PTR [rbx+0x18]
  4073fc:	add    rsp,0x8
  407400:	pop    rbx
  407401:	pop    rbp
  407402:	ret    
  407403:	nop    DWORD PTR [rax+rax*1+0x0]
  407408:	lea    esi,[rax+0x1]
  40740b:	mov    edx,0xfffffffc
  407410:	call   404290 <access_monster_buffer@@Base+0x5a0>
  407415:	test   eax,eax
  407417:	je     4073f5 <flatcc_builder_extend_union_vector@@Base+0x35>
  407419:	xor    eax,eax
  40741b:	jmp    4073fc <flatcc_builder_extend_union_vector@@Base+0x3c>
  40741d:	call   4031d2 <posix_memalign@plt+0xe2>
  407422:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40742d:	nop    DWORD PTR [rax]

0000000000407430 <flatcc_builder_truncate_union_vector@@Base>:
  407430:	sub    rsp,0x8
  407434:	mov    rax,QWORD PTR [rdi+0x30]
  407438:	cmp    WORD PTR [rax+0xe],0x7
  40743d:	jne    40746f <flatcc_builder_truncate_union_vector@@Base+0x3f>
  40743f:	mov    edx,DWORD PTR [rax+0x14]
  407442:	cmp    edx,esi
  407444:	jb     40748e <flatcc_builder_truncate_union_vector@@Base+0x5e>
  407446:	sub    edx,esi
  407448:	imul   esi,DWORD PTR [rax+0x10]
  40744c:	mov    DWORD PTR [rax+0x14],edx
  40744f:	mov    eax,DWORD PTR [rdi+0x20]
  407452:	mov    rcx,QWORD PTR [rdi+0x18]
  407456:	sub    eax,esi
  407458:	mov    edx,esi
  40745a:	xor    esi,esi
  40745c:	mov    DWORD PTR [rdi+0x20],eax
  40745f:	lea    rdi,[rcx+rax*1]
  407463:	call   403070 <memset@plt>
  407468:	xor    eax,eax
  40746a:	add    rsp,0x8
  40746e:	ret    
  40746f:	lea    rcx,[rip+0x24ea]        # 409960 <_IO_stdin_used@@Base+0x960>
  407476:	lea    rsi,[rip+0x1f53]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40747d:	lea    rdi,[rip+0x21c4]        # 409648 <_IO_stdin_used@@Base+0x648>
  407484:	mov    edx,0x681
  407489:	call   403060 <__assert_fail@plt>
  40748e:	lea    rcx,[rip+0x24cb]        # 409960 <_IO_stdin_used@@Base+0x960>
  407495:	lea    rsi,[rip+0x1f34]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40749c:	lea    rdi,[rip+0x210d]        # 4095b0 <_IO_stdin_used@@Base+0x5b0>
  4074a3:	mov    edx,0x682
  4074a8:	call   403060 <__assert_fail@plt>
  4074ad:	nop    DWORD PTR [rax]

00000000004074b0 <flatcc_builder_union_vector_push@@Base>:
  4074b0:	push   r12
  4074b2:	push   rbp
  4074b3:	push   rbx
  4074b4:	mov    rdx,QWORD PTR [rdi+0x30]
  4074b8:	cmp    WORD PTR [rdx+0xe],0x7
  4074bd:	jne    407510 <flatcc_builder_union_vector_push@@Base+0x60>
  4074bf:	mov    eax,DWORD PTR [rdx+0x14]
  4074c2:	cmp    eax,0x1fffffff
  4074c7:	je     407509 <flatcc_builder_union_vector_push@@Base+0x59>
  4074c9:	add    eax,0x1
  4074cc:	mov    rbp,rdi
  4074cf:	mov    r12,rsi
  4074d2:	mov    DWORD PTR [rdx+0x14],eax
  4074d5:	mov    ebx,DWORD PTR [rdi+0x20]
  4074d8:	lea    edx,[rbx+0x8]
  4074db:	cmp    edx,DWORD PTR [rdi+0x24]
  4074de:	mov    DWORD PTR [rdi+0x20],edx
  4074e1:	jae    4074f8 <flatcc_builder_union_vector_push@@Base+0x48>
  4074e3:	mov    rax,rbx
  4074e6:	add    rax,QWORD PTR [rbp+0x18]
  4074ea:	je     407509 <flatcc_builder_union_vector_push@@Base+0x59>
  4074ec:	mov    QWORD PTR [rax],r12
  4074ef:	pop    rbx
  4074f0:	pop    rbp
  4074f1:	pop    r12
  4074f3:	ret    
  4074f4:	nop    DWORD PTR [rax+0x0]
  4074f8:	lea    esi,[rbx+0x9]
  4074fb:	mov    edx,0xfffffffc
  407500:	call   404290 <access_monster_buffer@@Base+0x5a0>
  407505:	test   eax,eax
  407507:	je     4074e3 <flatcc_builder_union_vector_push@@Base+0x33>
  407509:	pop    rbx
  40750a:	xor    eax,eax
  40750c:	pop    rbp
  40750d:	pop    r12
  40750f:	ret    
  407510:	lea    rcx,[rip+0x2409]        # 409920 <_IO_stdin_used@@Base+0x920>
  407517:	lea    rsi,[rip+0x1eb2]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  40751e:	lea    rdi,[rip+0x2123]        # 409648 <_IO_stdin_used@@Base+0x648>
  407525:	mov    edx,0x68d
  40752a:	call   403060 <__assert_fail@plt>
  40752f:	nop

0000000000407530 <flatcc_builder_append_union_vector@@Base>:
  407530:	push   r13
  407532:	push   r12
  407534:	push   rbp
  407535:	push   rbx
  407536:	sub    rsp,0x8
  40753a:	mov    rax,QWORD PTR [rdi+0x30]
  40753e:	cmp    WORD PTR [rax+0xe],0x7
  407543:	jne    4075bb <flatcc_builder_append_union_vector@@Base+0x8b>
  407545:	mov    r13,rsi
  407548:	mov    ecx,edx
  40754a:	xor    esi,esi
  40754c:	add    ecx,DWORD PTR [rax+0x14]
  40754f:	setb   sil
  407553:	test   esi,esi
  407555:	jne    4075b6 <flatcc_builder_append_union_vector@@Base+0x86>
  407557:	cmp    ecx,0x1fffffff
  40755d:	ja     4075b6 <flatcc_builder_append_union_vector@@Base+0x86>
  40755f:	mov    DWORD PTR [rax+0x14],ecx
  407562:	mov    r12d,DWORD PTR [rdi+0x20]
  407566:	lea    ebx,[rdx*8+0x0]
  40756d:	mov    rbp,rdi
  407570:	mov    rdx,r12
  407573:	add    edx,ebx
  407575:	cmp    edx,DWORD PTR [rdi+0x24]
  407578:	mov    DWORD PTR [rdi+0x20],edx
  40757b:	jae    4075a0 <flatcc_builder_append_union_vector@@Base+0x70>
  40757d:	add    r12,QWORD PTR [rbp+0x18]
  407581:	je     407590 <flatcc_builder_append_union_vector@@Base+0x60>
  407583:	mov    edx,ebx
  407585:	mov    rsi,r13
  407588:	mov    rdi,r12
  40758b:	call   4030b0 <memcpy@plt>
  407590:	add    rsp,0x8
  407594:	mov    rax,r12
  407597:	pop    rbx
  407598:	pop    rbp
  407599:	pop    r12
  40759b:	pop    r13
  40759d:	ret    
  40759e:	xchg   ax,ax
  4075a0:	lea    esi,[rdx+0x1]
  4075a3:	mov    edx,0xfffffffc
  4075a8:	call   404290 <access_monster_buffer@@Base+0x5a0>
  4075ad:	test   eax,eax
  4075af:	je     40757d <flatcc_builder_append_union_vector@@Base+0x4d>
  4075b1:	xor    r12d,r12d
  4075b4:	jmp    407590 <flatcc_builder_append_union_vector@@Base+0x60>
  4075b6:	call   4031d2 <posix_memalign@plt+0xe2>
  4075bb:	lea    rcx,[rip+0x231e]        # 4098e0 <_IO_stdin_used@@Base+0x8e0>
  4075c2:	lea    rsi,[rip+0x1e07]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4075c9:	lea    rdi,[rip+0x2078]        # 409648 <_IO_stdin_used@@Base+0x648>
  4075d0:	mov    edx,0x69c
  4075d5:	call   403060 <__assert_fail@plt>
  4075da:	nop    WORD PTR [rax+rax*1+0x0]

00000000004075e0 <flatcc_builder_create_string@@Base>:
  4075e0:	push   rbp
  4075e1:	push   rbx
  4075e2:	sub    rsp,0xb8
  4075e9:	mov    rax,QWORD PTR fs:0x28
  4075f2:	mov    QWORD PTR [rsp+0xa8],rax
  4075fa:	xor    eax,eax
  4075fc:	mov    eax,0xffffffff
  407601:	cmp    rdx,rax
  407604:	ja     4076d0 <flatcc_builder_create_string@@Base+0xf0>
  40760a:	mov    rbx,rdi
  40760d:	mov    edi,DWORD PTR [rdi+0xf0]
  407613:	lea    rcx,[rsp+0xc]
  407618:	mov    DWORD PTR [rsp+0xc],edx
  40761c:	mov    QWORD PTR [rsp+0x28],0x4
  407625:	mov    QWORD PTR [rsp+0x20],rcx
  40762a:	lea    eax,[rdi-0x1]
  40762d:	sub    eax,edx
  40762f:	and    eax,0x3
  407632:	add    eax,0x1
  407635:	test   rdx,rdx
  407638:	jne    4076b0 <flatcc_builder_create_string@@Base+0xd0>
  40763a:	mov    edx,0x2
  40763f:	mov    ecx,0x1
  407644:	mov    r8d,0x4
  40764a:	add    r8,rax
  40764d:	mov    rsi,0x409ec0
  407654:	mov    ebp,edi
  407656:	sub    ebp,r8d
  407659:	shl    rcx,0x4
  40765d:	mov    QWORD PTR [rsp+0x10],r8
  407662:	cmp    edi,ebp
  407664:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  407669:	mov    DWORD PTR [rsp+0x18],edx
  40766d:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  407672:	jle    4076d4 <flatcc_builder_create_string@@Base+0xf4>
  407674:	lea    rsi,[rsp+0x20]
  407679:	mov    rdi,QWORD PTR [rbx+0x38]
  40767d:	mov    ecx,ebp
  40767f:	call   QWORD PTR [rbx+0x48]
  407682:	test   eax,eax
  407684:	jne    4076f8 <flatcc_builder_create_string@@Base+0x118>
  407686:	mov    DWORD PTR [rbx+0xf0],ebp
  40768c:	mov    rbx,QWORD PTR [rsp+0xa8]
  407694:	xor    rbx,QWORD PTR fs:0x28
  40769d:	mov    eax,ebp
  40769f:	jne    4076f3 <flatcc_builder_create_string@@Base+0x113>
  4076a1:	add    rsp,0xb8
  4076a8:	pop    rbx
  4076a9:	pop    rbp
  4076aa:	ret    
  4076ab:	nop    DWORD PTR [rax+rax*1+0x0]
  4076b0:	lea    r8,[rdx+0x4]
  4076b4:	mov    QWORD PTR [rsp+0x38],rdx
  4076b9:	mov    QWORD PTR [rsp+0x30],rsi
  4076be:	mov    edx,0x3
  4076c3:	mov    ecx,0x2
  4076c8:	jmp    40764a <flatcc_builder_create_string@@Base+0x6a>
  4076cd:	nop    DWORD PTR [rax]
  4076d0:	xor    ebp,ebp
  4076d2:	jmp    40768c <flatcc_builder_create_string@@Base+0xac>
  4076d4:	lea    rcx,[rip+0x2735]        # 409e10 <_IO_stdin_used@@Base+0xe10>
  4076db:	lea    rsi,[rip+0x1cee]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4076e2:	lea    rdi,[rip+0x207e]        # 409767 <_IO_stdin_used@@Base+0x767>
  4076e9:	mov    edx,0x287
  4076ee:	call   403060 <__assert_fail@plt>
  4076f3:	call   403050 <__stack_chk_fail@plt>
  4076f8:	call   4031af <posix_memalign@plt+0xbf>
  4076fd:	nop    DWORD PTR [rax]

0000000000407700 <flatcc_builder_create_string_str@@Base>:
  407700:	push   rbp
  407701:	push   rbx
  407702:	mov    rbp,rdi
  407705:	mov    rdi,rsi
  407708:	mov    rbx,rsi
  40770b:	sub    rsp,0x8
  40770f:	call   403040 <strlen@plt>
  407714:	add    rsp,0x8
  407718:	mov    rsi,rbx
  40771b:	mov    rdi,rbp
  40771e:	pop    rbx
  40771f:	pop    rbp
  407720:	mov    rdx,rax
  407723:	jmp    4075e0 <flatcc_builder_create_string@@Base>
  407728:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407730 <flatcc_builder_create_string_strn@@Base>:
  407730:	push   r12
  407732:	push   rbp
  407733:	mov    rbp,rsi
  407736:	push   rbx
  407737:	mov    r12,rdi
  40773a:	xor    esi,esi
  40773c:	mov    rdi,rbp
  40773f:	mov    rbx,rdx
  407742:	call   403080 <memchr@plt>
  407747:	mov    rdx,rax
  40774a:	mov    rsi,rbp
  40774d:	mov    rdi,r12
  407750:	sub    rdx,rbp
  407753:	test   rax,rax
  407756:	cmovne rbx,rdx
  40775a:	mov    rdx,rbx
  40775d:	pop    rbx
  40775e:	pop    rbp
  40775f:	pop    r12
  407761:	jmp    4075e0 <flatcc_builder_create_string@@Base>
  407766:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000407770 <flatcc_builder_end_string@@Base>:
  407770:	push   rbp
  407771:	push   rbx
  407772:	sub    rsp,0x8
  407776:	mov    rax,QWORD PTR [rdi+0x30]
  40777a:	cmp    WORD PTR [rax+0xe],0x6
  40777f:	jne    407846 <flatcc_builder_end_string@@Base+0xd6>
  407785:	mov    edx,DWORD PTR [rax+0x14]
  407788:	mov    rbx,rdi
  40778b:	cmp    edx,DWORD PTR [rdi+0x20]
  40778e:	jne    407827 <flatcc_builder_end_string@@Base+0xb7>
  407794:	mov    rsi,QWORD PTR [rdi+0x18]
  407798:	call   4075e0 <flatcc_builder_create_string@@Base>
  40779d:	test   eax,eax
  40779f:	mov    ebp,eax
  4077a1:	jne    4077b0 <flatcc_builder_end_string@@Base+0x40>
  4077a3:	add    rsp,0x8
  4077a7:	mov    eax,ebp
  4077a9:	pop    rbx
  4077aa:	pop    rbp
  4077ab:	ret    
  4077ac:	nop    DWORD PTR [rax+0x0]
  4077b0:	mov    edx,DWORD PTR [rbx+0x20]
  4077b3:	mov    rdi,QWORD PTR [rbx+0x18]
  4077b7:	xor    esi,esi
  4077b9:	call   403070 <memset@plt>
  4077be:	mov    rax,QWORD PTR [rbx+0x30]
  4077c2:	mov    edi,DWORD PTR [rbx+0x70]
  4077c5:	mov    esi,DWORD PTR [rax]
  4077c7:	mov    edx,DWORD PTR [rax+0x8]
  4077ca:	mov    ecx,DWORD PTR [rax+0x4]
  4077cd:	mov    DWORD PTR [rbx+0x20],edx
  4077d0:	mov    rdx,rsi
  4077d3:	mov    DWORD PTR [rbx+0x28],esi
  4077d6:	add    rsi,QWORD PTR [rbx+0x68]
  4077da:	sub    edi,edx
  4077dc:	cmp    ecx,edi
  4077de:	mov    edx,edi
  4077e0:	cmovb  edx,ecx
  4077e3:	mov    DWORD PTR [rbx+0x24],edx
  4077e6:	movzx  edx,WORD PTR [rbx+0xea]
  4077ed:	cmp    dx,WORD PTR [rbx+0xe8]
  4077f4:	mov    QWORD PTR [rbx+0x18],rsi
  4077f8:	mov    DWORD PTR [rax+0x4],ecx
  4077fb:	jbe    407804 <flatcc_builder_end_string@@Base+0x94>
  4077fd:	mov    WORD PTR [rbx+0xe8],dx
  407804:	movzx  edx,WORD PTR [rax+0xc]
  407808:	sub    rax,0x24
  40780c:	sub    DWORD PTR [rbx+0x104],0x1
  407813:	mov    QWORD PTR [rbx+0x30],rax
  407817:	mov    eax,ebp
  407819:	mov    WORD PTR [rbx+0xea],dx
  407820:	add    rsp,0x8
  407824:	pop    rbx
  407825:	pop    rbp
  407826:	ret    
  407827:	lea    rcx,[rip+0x2092]        # 4098c0 <_IO_stdin_used@@Base+0x8c0>
  40782e:	lea    rsi,[rip+0x1b9b]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407835:	lea    rdi,[rip+0x1e44]        # 409680 <_IO_stdin_used@@Base+0x680>
  40783c:	mov    edx,0x6c5
  407841:	call   403060 <__assert_fail@plt>
  407846:	lea    rcx,[rip+0x2073]        # 4098c0 <_IO_stdin_used@@Base+0x8c0>
  40784d:	lea    rsi,[rip+0x1b7c]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407854:	lea    rdi,[rip+0x1cfd]        # 409558 <_IO_stdin_used@@Base+0x558>
  40785b:	mov    edx,0x6c4
  407860:	call   403060 <__assert_fail@plt>
  407865:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407870 <flatcc_builder_string_edit@@Base>:
  407870:	mov    rax,QWORD PTR [rdi+0x18]
  407874:	ret    
  407875:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407880 <flatcc_builder_string_len@@Base>:
  407880:	mov    rax,QWORD PTR [rdi+0x30]
  407884:	mov    eax,DWORD PTR [rax+0x14]
  407887:	ret    
  407888:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407890 <flatcc_builder_table_add@@Base>:
  407890:	push   r13
  407892:	push   r12
  407894:	push   rbp
  407895:	push   rbx
  407896:	sub    rsp,0x8
  40789a:	mov    rax,QWORD PTR [rdi+0x30]
  40789e:	cmp    WORD PTR [rax+0xe],0x3
  4078a3:	jne    4079b2 <flatcc_builder_table_add@@Base+0x122>
  4078a9:	cmp    esi,0x7ffc
  4078af:	mov    r12d,esi
  4078b2:	ja     407993 <flatcc_builder_table_add@@Base+0x103>
  4078b8:	cmp    WORD PTR [rdi+0xea],cx
  4078bf:	mov    rbx,rdi
  4078c2:	jb     407930 <flatcc_builder_table_add@@Base+0xa0>
  4078c4:	movsxd r13,r12d
  4078c7:	add    r13,r13
  4078ca:	mov    rsi,r13
  4078cd:	add    rsi,QWORD PTR [rbx+0x8]
  4078d1:	cmp    WORD PTR [rsi],0x0
  4078d5:	jne    407974 <flatcc_builder_table_add@@Base+0xe4>
  4078db:	mov    eax,DWORD PTR [rbx+0x14]
  4078de:	movzx  ecx,cx
  4078e1:	xor    eax,r12d
  4078e4:	imul   eax,eax,0x9e3779b1
  4078ea:	xor    eax,edx
  4078ec:	imul   eax,eax,0x9e3779b1
  4078f2:	mov    DWORD PTR [rbx+0x14],eax
  4078f5:	mov    eax,DWORD PTR [rbx+0x20]
  4078f8:	lea    ebp,[rcx+rax*1-0x1]
  4078fc:	neg    ecx
  4078fe:	and    ebp,ecx
  407900:	add    edx,ebp
  407902:	cmp    edx,DWORD PTR [rbx+0x24]
  407905:	mov    DWORD PTR [rbx+0x20],edx
  407908:	jae    407950 <flatcc_builder_table_add@@Base+0xc0>
  40790a:	lea    eax,[rbp+0x4]
  40790d:	mov    WORD PTR [rsi],ax
  407910:	cmp    r12w,WORD PTR [rbx+0x10]
  407915:	jae    407940 <flatcc_builder_table_add@@Base+0xb0>
  407917:	mov    eax,ebp
  407919:	add    rax,QWORD PTR [rbx+0x18]
  40791d:	add    rsp,0x8
  407921:	pop    rbx
  407922:	pop    rbp
  407923:	pop    r12
  407925:	pop    r13
  407927:	ret    
  407928:	nop    DWORD PTR [rax+rax*1+0x0]
  407930:	mov    WORD PTR [rdi+0xea],cx
  407937:	jmp    4078c4 <flatcc_builder_table_add@@Base+0x34>
  407939:	nop    DWORD PTR [rax+0x0]
  407940:	add    r12d,0x1
  407944:	mov    WORD PTR [rbx+0x10],r12w
  407949:	jmp    407917 <flatcc_builder_table_add@@Base+0x87>
  40794b:	nop    DWORD PTR [rax+rax*1+0x0]
  407950:	lea    esi,[rdx+0x1]
  407953:	mov    rdi,rbx
  407956:	mov    edx,0xfffc
  40795b:	call   404290 <access_monster_buffer@@Base+0x5a0>
  407960:	test   eax,eax
  407962:	jne    407970 <flatcc_builder_table_add@@Base+0xe0>
  407964:	mov    rsi,r13
  407967:	add    rsi,QWORD PTR [rbx+0x8]
  40796b:	jmp    40790a <flatcc_builder_table_add@@Base+0x7a>
  40796d:	nop    DWORD PTR [rax]
  407970:	xor    eax,eax
  407972:	jmp    40791d <flatcc_builder_table_add@@Base+0x8d>
  407974:	lea    rcx,[rip+0x1f25]        # 4098a0 <_IO_stdin_used@@Base+0x8a0>
  40797b:	lea    rsi,[rip+0x1a4e]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407982:	lea    rdi,[rip+0x1dde]        # 409767 <_IO_stdin_used@@Base+0x767>
  407989:	mov    edx,0x6f8
  40798e:	call   403060 <__assert_fail@plt>
  407993:	lea    rcx,[rip+0x1f06]        # 4098a0 <_IO_stdin_used@@Base+0x8a0>
  40799a:	lea    rsi,[rip+0x1a2f]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4079a1:	lea    rdi,[rip+0x1d00]        # 4096a8 <_IO_stdin_used@@Base+0x6a8>
  4079a8:	mov    edx,0x6ee
  4079ad:	call   403060 <__assert_fail@plt>
  4079b2:	lea    rcx,[rip+0x1ee7]        # 4098a0 <_IO_stdin_used@@Base+0x8a0>
  4079b9:	lea    rsi,[rip+0x1a10]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  4079c0:	lea    rdi,[rip+0x1c51]        # 409618 <_IO_stdin_used@@Base+0x618>
  4079c7:	mov    edx,0x6ed
  4079cc:	call   403060 <__assert_fail@plt>
  4079d1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4079dc:	nop    DWORD PTR [rax+0x0]

00000000004079e0 <flatcc_builder_table_edit@@Base>:
  4079e0:	mov    rax,QWORD PTR [rdi+0x30]
  4079e4:	cmp    WORD PTR [rax+0xe],0x3
  4079e9:	jne    4079f6 <flatcc_builder_table_edit@@Base+0x16>
  4079eb:	mov    eax,DWORD PTR [rdi+0x20]
  4079ee:	sub    rax,rsi
  4079f1:	add    rax,QWORD PTR [rdi+0x18]
  4079f5:	ret    
  4079f6:	lea    rcx,[rip+0x1e83]        # 409880 <_IO_stdin_used@@Base+0x880>
  4079fd:	lea    rsi,[rip+0x19cc]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407a04:	lea    rdi,[rip+0x1c0d]        # 409618 <_IO_stdin_used@@Base+0x618>
  407a0b:	sub    rsp,0x8
  407a0f:	mov    edx,0x702
  407a14:	call   403060 <__assert_fail@plt>
  407a19:	nop    DWORD PTR [rax+0x0]

0000000000407a20 <flatcc_builder_table_add_copy@@Base>:
  407a20:	push   rbp
  407a21:	push   rbx
  407a22:	mov    rbx,rcx
  407a25:	mov    rbp,rdx
  407a28:	movzx  ecx,r8w
  407a2c:	mov    rdx,rbx
  407a2f:	sub    rsp,0x8
  407a33:	call   407890 <flatcc_builder_table_add@@Base>
  407a38:	test   rax,rax
  407a3b:	mov    rcx,rax
  407a3e:	je     407a51 <flatcc_builder_table_add_copy@@Base+0x31>
  407a40:	mov    rdx,rbx
  407a43:	mov    rsi,rbp
  407a46:	mov    rdi,rax
  407a49:	call   4030b0 <memcpy@plt>
  407a4e:	mov    rcx,rax
  407a51:	add    rsp,0x8
  407a55:	mov    rax,rcx
  407a58:	pop    rbx
  407a59:	pop    rbp
  407a5a:	ret    
  407a5b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407a60 <flatcc_builder_table_add_offset@@Base>:
  407a60:	push   r13
  407a62:	push   r12
  407a64:	push   rbp
  407a65:	push   rbx
  407a66:	sub    rsp,0x8
  407a6a:	mov    rax,QWORD PTR [rdi+0x30]
  407a6e:	cmp    WORD PTR [rax+0xe],0x3
  407a73:	jne    407b72 <flatcc_builder_table_add_offset@@Base+0x112>
  407a79:	cmp    esi,0x7ffc
  407a7f:	mov    r12d,esi
  407a82:	ja     407b53 <flatcc_builder_table_add_offset@@Base+0xf3>
  407a88:	movsxd r13,esi
  407a8b:	mov    rbx,rdi
  407a8e:	add    r13,r13
  407a91:	mov    rdx,r13
  407a94:	add    rdx,QWORD PTR [rdi+0x8]
  407a98:	cmp    WORD PTR [rdx],0x0
  407a9c:	jne    407b34 <flatcc_builder_table_add_offset@@Base+0xd4>
  407aa2:	mov    eax,DWORD PTR [rdi+0x14]
  407aa5:	xor    eax,esi
  407aa7:	imul   eax,eax,0x9e3779b1
  407aad:	xor    eax,0x4
  407ab0:	imul   eax,eax,0x9e3779b1
  407ab6:	mov    DWORD PTR [rdi+0x14],eax
  407ab9:	mov    eax,DWORD PTR [rdi+0x20]
  407abc:	lea    ebp,[rax+0x3]
  407abf:	and    ebp,0xfffffffc
  407ac2:	lea    esi,[rbp+0x4]
  407ac5:	cmp    esi,DWORD PTR [rdi+0x24]
  407ac8:	mov    DWORD PTR [rdi+0x20],esi
  407acb:	ja     407b10 <flatcc_builder_table_add_offset@@Base+0xb0>
  407acd:	lea    eax,[rbp+0x4]
  407ad0:	mov    WORD PTR [rdx],ax
  407ad3:	cmp    r12w,WORD PTR [rbx+0x10]
  407ad8:	jae    407b00 <flatcc_builder_table_add_offset@@Base+0xa0>
  407ada:	mov    rax,QWORD PTR [rbx]
  407add:	lea    rdx,[rax+0x2]
  407ae1:	mov    QWORD PTR [rbx],rdx
  407ae4:	mov    WORD PTR [rax],bp
  407ae7:	mov    eax,ebp
  407ae9:	add    rax,QWORD PTR [rbx+0x18]
  407aed:	add    rsp,0x8
  407af1:	pop    rbx
  407af2:	pop    rbp
  407af3:	pop    r12
  407af5:	pop    r13
  407af7:	ret    
  407af8:	nop    DWORD PTR [rax+rax*1+0x0]
  407b00:	lea    esi,[r12+0x1]
  407b05:	mov    WORD PTR [rbx+0x10],si
  407b09:	jmp    407ada <flatcc_builder_table_add_offset@@Base+0x7a>
  407b0b:	nop    DWORD PTR [rax+rax*1+0x0]
  407b10:	mov    edx,0xfffc
  407b15:	call   404290 <access_monster_buffer@@Base+0x5a0>
  407b1a:	test   eax,eax
  407b1c:	jne    407b30 <flatcc_builder_table_add_offset@@Base+0xd0>
  407b1e:	mov    rdx,r13
  407b21:	add    rdx,QWORD PTR [rbx+0x8]
  407b25:	jmp    407acd <flatcc_builder_table_add_offset@@Base+0x6d>
  407b27:	nop    WORD PTR [rax+rax*1+0x0]
  407b30:	xor    eax,eax
  407b32:	jmp    407aed <flatcc_builder_table_add_offset@@Base+0x8d>
  407b34:	lea    rcx,[rip+0x1d25]        # 409860 <_IO_stdin_used@@Base+0x860>
  407b3b:	lea    rsi,[rip+0x188e]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407b42:	lea    rdi,[rip+0x1c1e]        # 409767 <_IO_stdin_used@@Base+0x767>
  407b49:	mov    edx,0x71b
  407b4e:	call   403060 <__assert_fail@plt>
  407b53:	lea    rcx,[rip+0x1d06]        # 409860 <_IO_stdin_used@@Base+0x860>
  407b5a:	lea    rsi,[rip+0x186f]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407b61:	lea    rdi,[rip+0x1b40]        # 4096a8 <_IO_stdin_used@@Base+0x6a8>
  407b68:	mov    edx,0x714
  407b6d:	call   403060 <__assert_fail@plt>
  407b72:	lea    rcx,[rip+0x1ce7]        # 409860 <_IO_stdin_used@@Base+0x860>
  407b79:	lea    rsi,[rip+0x1850]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407b80:	lea    rdi,[rip+0x1a91]        # 409618 <_IO_stdin_used@@Base+0x618>
  407b87:	mov    edx,0x713
  407b8c:	call   403060 <__assert_fail@plt>
  407b91:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407b9c:	nop    DWORD PTR [rax+0x0]

0000000000407ba0 <flatcc_builder_table_add_union@@Base>:
  407ba0:	push   r13
  407ba2:	push   r12
  407ba4:	mov    r13,rdx
  407ba7:	push   rbp
  407ba8:	push   rbx
  407ba9:	sar    r13,0x20
  407bad:	sub    rsp,0x8
  407bb1:	mov    rax,QWORD PTR [rdi+0x30]
  407bb5:	cmp    WORD PTR [rax+0xe],0x3
  407bba:	jne    407c34 <flatcc_builder_table_add_union@@Base+0x94>
  407bbc:	test   dl,dl
  407bbe:	mov    r12,rdi
  407bc1:	mov    ebx,esi
  407bc3:	mov    rbp,rdx
  407bc6:	je     407c10 <flatcc_builder_table_add_union@@Base+0x70>
  407bc8:	test   r13d,r13d
  407bcb:	je     407bde <flatcc_builder_table_add_union@@Base+0x3e>
  407bcd:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  407bd2:	test   rax,rax
  407bd5:	je     407c72 <flatcc_builder_table_add_union@@Base+0xd2>
  407bdb:	mov    DWORD PTR [rax],r13d
  407bde:	lea    esi,[rbx-0x1]
  407be1:	mov    ecx,0x1
  407be6:	mov    edx,0x1
  407beb:	mov    rdi,r12
  407bee:	call   407890 <flatcc_builder_table_add@@Base>
  407bf3:	test   rax,rax
  407bf6:	je     407c53 <flatcc_builder_table_add_union@@Base+0xb3>
  407bf8:	mov    BYTE PTR [rax],bpl
  407bfb:	add    rsp,0x8
  407bff:	xor    eax,eax
  407c01:	pop    rbx
  407c02:	pop    rbp
  407c03:	pop    r12
  407c05:	pop    r13
  407c07:	ret    
  407c08:	nop    DWORD PTR [rax+rax*1+0x0]
  407c10:	test   r13d,r13d
  407c13:	je     407bde <flatcc_builder_table_add_union@@Base+0x3e>
  407c15:	lea    rcx,[rip+0x1dd4]        # 4099f0 <_IO_stdin_used@@Base+0x9f0>
  407c1c:	lea    rsi,[rip+0x17ad]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407c23:	lea    rdi,[rip+0x1ac6]        # 4096f0 <_IO_stdin_used@@Base+0x6f0>
  407c2a:	mov    edx,0x5ef
  407c2f:	call   403060 <__assert_fail@plt>
  407c34:	lea    rcx,[rip+0x1db5]        # 4099f0 <_IO_stdin_used@@Base+0x9f0>
  407c3b:	lea    rsi,[rip+0x178e]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407c42:	lea    rdi,[rip+0x19cf]        # 409618 <_IO_stdin_used@@Base+0x618>
  407c49:	mov    edx,0x5ee
  407c4e:	call   403060 <__assert_fail@plt>
  407c53:	lea    rcx,[rip+0x1d96]        # 4099f0 <_IO_stdin_used@@Base+0x9f0>
  407c5a:	lea    rsi,[rip+0x176f]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407c61:	lea    rdi,[rip+0x1b8e]        # 4097f6 <_IO_stdin_used@@Base+0x7f6>
  407c68:	mov    edx,0x5f6
  407c6d:	call   403060 <__assert_fail@plt>
  407c72:	lea    rcx,[rip+0x1d77]        # 4099f0 <_IO_stdin_used@@Base+0x9f0>
  407c79:	lea    rsi,[rip+0x1750]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407c80:	lea    rdi,[rip+0x1b65]        # 4097ec <_IO_stdin_used@@Base+0x7ec>
  407c87:	mov    edx,0x5f2
  407c8c:	call   403060 <__assert_fail@plt>
  407c91:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407c9c:	nop    DWORD PTR [rax+0x0]

0000000000407ca0 <flatcc_builder_table_add_union_vector@@Base>:
  407ca0:	push   r13
  407ca2:	push   r12
  407ca4:	push   rbp
  407ca5:	push   rbx
  407ca6:	mov    rbp,rdx
  407ca9:	sar    rbp,0x20
  407cad:	sub    rsp,0x18
  407cb1:	mov    rax,QWORD PTR [rdi+0x30]
  407cb5:	cmp    WORD PTR [rax+0xe],0x3
  407cba:	jne    407d36 <flatcc_builder_table_add_union_vector@@Base+0x96>
  407cbc:	test   ebp,ebp
  407cbe:	sete   al
  407cc1:	test   edx,edx
  407cc3:	sete   cl
  407cc6:	cmp    cl,al
  407cc8:	je     407cf0 <flatcc_builder_table_add_union_vector@@Base+0x50>
  407cca:	test   edx,edx
  407ccc:	setne  dl
  407ccf:	cmp    al,dl
  407cd1:	je     407d55 <flatcc_builder_table_add_union_vector@@Base+0xb5>
  407cd7:	mov    r12d,0xffffffff
  407cdd:	add    rsp,0x18
  407ce1:	mov    eax,r12d
  407ce4:	pop    rbx
  407ce5:	pop    rbp
  407ce6:	pop    r12
  407ce8:	pop    r13
  407cea:	ret    
  407ceb:	nop    DWORD PTR [rax+rax*1+0x0]
  407cf0:	xor    r12d,r12d
  407cf3:	test   edx,edx
  407cf5:	je     407cdd <flatcc_builder_table_add_union_vector@@Base+0x3d>
  407cf7:	mov    r13d,esi
  407cfa:	lea    esi,[rsi-0x1]
  407cfd:	mov    QWORD PTR [rsp+0x8],rdx
  407d02:	mov    rbx,rdi
  407d05:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  407d0a:	test   rax,rax
  407d0d:	mov    rdx,QWORD PTR [rsp+0x8]
  407d12:	je     407d93 <flatcc_builder_table_add_union_vector@@Base+0xf3>
  407d14:	mov    DWORD PTR [rax],edx
  407d16:	mov    esi,r13d
  407d19:	mov    rdi,rbx
  407d1c:	call   407a60 <flatcc_builder_table_add_offset@@Base>
  407d21:	test   rax,rax
  407d24:	je     407d74 <flatcc_builder_table_add_union_vector@@Base+0xd4>
  407d26:	mov    DWORD PTR [rax],ebp
  407d28:	add    rsp,0x18
  407d2c:	mov    eax,r12d
  407d2f:	pop    rbx
  407d30:	pop    rbp
  407d31:	pop    r12
  407d33:	pop    r13
  407d35:	ret    
  407d36:	lea    rcx,[rip+0x1c83]        # 4099c0 <_IO_stdin_used@@Base+0x9c0>
  407d3d:	lea    rsi,[rip+0x168c]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407d44:	lea    rdi,[rip+0x18cd]        # 409618 <_IO_stdin_used@@Base+0x618>
  407d4b:	mov    edx,0x600
  407d50:	call   403060 <__assert_fail@plt>
  407d55:	lea    rcx,[rip+0x1c64]        # 4099c0 <_IO_stdin_used@@Base+0x9c0>
  407d5c:	lea    rsi,[rip+0x166d]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407d63:	lea    rdi,[rip+0x19ae]        # 409718 <_IO_stdin_used@@Base+0x718>
  407d6a:	mov    edx,0x601
  407d6f:	call   403060 <__assert_fail@plt>
  407d74:	lea    rcx,[rip+0x1c45]        # 4099c0 <_IO_stdin_used@@Base+0x9c0>
  407d7b:	lea    rsi,[rip+0x164e]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407d82:	lea    rdi,[rip+0x1a63]        # 4097ec <_IO_stdin_used@@Base+0x7ec>
  407d89:	mov    edx,0x608
  407d8e:	call   403060 <__assert_fail@plt>
  407d93:	lea    rcx,[rip+0x1c26]        # 4099c0 <_IO_stdin_used@@Base+0x9c0>
  407d9a:	lea    rsi,[rip+0x162f]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407da1:	lea    rdi,[rip+0x1a44]        # 4097ec <_IO_stdin_used@@Base+0x7ec>
  407da8:	mov    edx,0x604
  407dad:	call   403060 <__assert_fail@plt>
  407db2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407dbd:	nop    DWORD PTR [rax]

0000000000407dc0 <flatcc_builder_push_buffer_alignment@@Base>:
  407dc0:	mov    edx,0x4
  407dc5:	movzx  eax,WORD PTR [rdi+0xe8]
  407dcc:	mov    WORD PTR [rdi+0xe8],dx
  407dd3:	ret    
  407dd4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407ddf:	nop

0000000000407de0 <flatcc_builder_pop_buffer_alignment@@Base>:
  407de0:	cmp    si,WORD PTR [rdi+0xe8]
  407de7:	jbe    407df0 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  407de9:	mov    WORD PTR [rdi+0xe8],si
  407df0:	repz ret 
  407df2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407dfd:	nop    DWORD PTR [rax]

0000000000407e00 <flatcc_builder_get_buffer_alignment@@Base>:
  407e00:	movzx  eax,WORD PTR [rdi+0xe8]
  407e07:	ret    
  407e08:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407e10 <flatcc_builder_set_vtable_clustering@@Base>:
  407e10:	xor    eax,eax
  407e12:	test   esi,esi
  407e14:	sete   al
  407e17:	mov    DWORD PTR [rdi+0x124],eax
  407e1d:	ret    
  407e1e:	xchg   ax,ax

0000000000407e20 <flatcc_builder_set_block_align@@Base>:
  407e20:	mov    WORD PTR [rdi+0xec],si
  407e27:	ret    
  407e28:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407e30 <flatcc_builder_get_level@@Base>:
  407e30:	mov    eax,DWORD PTR [rdi+0x104]
  407e36:	ret    
  407e37:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407e40 <flatcc_builder_set_max_level@@Base>:
  407e40:	cmp    esi,DWORD PTR [rdi+0x108]
  407e46:	mov    DWORD PTR [rdi+0x120],esi
  407e4c:	jle    407e54 <flatcc_builder_set_max_level@@Base+0x14>
  407e4e:	mov    DWORD PTR [rdi+0x108],esi
  407e54:	repz ret 
  407e56:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000407e60 <flatcc_builder_get_buffer_size@@Base>:
  407e60:	mov    eax,DWORD PTR [rdi+0xf4]
  407e66:	sub    eax,DWORD PTR [rdi+0xf0]
  407e6c:	cdqe   
  407e6e:	ret    
  407e6f:	nop

0000000000407e70 <flatcc_builder_get_buffer_start@@Base>:
  407e70:	mov    eax,DWORD PTR [rdi+0xf0]
  407e76:	ret    
  407e77:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407e80 <flatcc_builder_get_buffer_end@@Base>:
  407e80:	mov    eax,DWORD PTR [rdi+0xf4]
  407e86:	ret    
  407e87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407e90 <flatcc_builder_set_vtable_cache_limit@@Base>:
  407e90:	mov    QWORD PTR [rdi+0x118],rsi
  407e97:	ret    
  407e98:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407ea0 <flatcc_builder_set_identifier@@Base>:
  407ea0:	test   rsi,rsi
  407ea3:	je     407eb0 <flatcc_builder_set_identifier@@Base+0x10>
  407ea5:	mov    eax,DWORD PTR [rsi]
  407ea7:	mov    DWORD PTR [rdi+0x110],eax
  407ead:	ret    
  407eae:	xchg   ax,ax
  407eb0:	mov    rsi,0x409ec0
  407eb7:	mov    eax,DWORD PTR [rsi]
  407eb9:	mov    DWORD PTR [rdi+0x110],eax
  407ebf:	ret    

0000000000407ec0 <flatcc_builder_get_type@@Base>:
  407ec0:	mov    rax,QWORD PTR [rdi+0x30]
  407ec4:	test   rax,rax
  407ec7:	je     407ed0 <flatcc_builder_get_type@@Base+0x10>
  407ec9:	movzx  eax,WORD PTR [rax+0xe]
  407ecd:	ret    
  407ece:	xchg   ax,ax
  407ed0:	xor    eax,eax
  407ed2:	ret    
  407ed3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407ede:	xchg   ax,ax

0000000000407ee0 <flatcc_builder_get_type_at@@Base>:
  407ee0:	test   esi,esi
  407ee2:	jle    407f10 <flatcc_builder_get_type_at@@Base+0x30>
  407ee4:	mov    edx,DWORD PTR [rdi+0x104]
  407eea:	xor    eax,eax
  407eec:	cmp    esi,edx
  407eee:	jg     407f12 <flatcc_builder_get_type_at@@Base+0x32>
  407ef0:	sub    esi,edx
  407ef2:	mov    rdx,QWORD PTR [rdi+0x30]
  407ef6:	movsxd rsi,esi
  407ef9:	lea    rax,[rsi+rsi*8]
  407efd:	lea    rax,[rdx+rax*4]
  407f01:	movzx  eax,WORD PTR [rax+0xe]
  407f05:	ret    
  407f06:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407f10:	xor    eax,eax
  407f12:	repz ret 
  407f14:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  407f1f:	nop

0000000000407f20 <flatcc_builder_get_direct_buffer@@Base>:
  407f20:	mov    eax,DWORD PTR [rdi+0x128]
  407f26:	test   eax,eax
  407f28:	je     407f3a <flatcc_builder_get_direct_buffer@@Base+0x1a>
  407f2a:	mov    rax,QWORD PTR [rdi+0x138]
  407f31:	cmp    QWORD PTR [rdi+0x130],rax
  407f38:	je     407f50 <flatcc_builder_get_direct_buffer@@Base+0x30>
  407f3a:	test   rsi,rsi
  407f3d:	jne    407f42 <flatcc_builder_get_direct_buffer@@Base+0x22>
  407f3f:	xor    eax,eax
  407f41:	ret    
  407f42:	mov    QWORD PTR [rsi],0x0
  407f49:	xor    eax,eax
  407f4b:	ret    
  407f4c:	nop    DWORD PTR [rax+0x0]
  407f50:	test   rsi,rsi
  407f53:	je     407f5f <flatcc_builder_get_direct_buffer@@Base+0x3f>
  407f55:	mov    rax,QWORD PTR [rdi+0x160]
  407f5c:	mov    QWORD PTR [rsi],rax
  407f5f:	mov    rax,QWORD PTR [rdi+0x140]
  407f66:	ret    
  407f67:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407f70 <flatcc_builder_copy_buffer@@Base>:
  407f70:	mov    eax,DWORD PTR [rdi+0x128]
  407f76:	test   eax,eax
  407f78:	je     407f98 <flatcc_builder_copy_buffer@@Base+0x28>
  407f7a:	sub    rsp,0x8
  407f7e:	add    rdi,0x130
  407f85:	call   408770 <flatcc_emitter_copy_buffer@@Base>
  407f8a:	test   rax,rax
  407f8d:	je     407f9b <flatcc_builder_copy_buffer@@Base+0x2b>
  407f8f:	add    rsp,0x8
  407f93:	ret    
  407f94:	nop    DWORD PTR [rax+0x0]
  407f98:	xor    eax,eax
  407f9a:	ret    
  407f9b:	lea    rcx,[rip+0x189e]        # 409840 <_IO_stdin_used@@Base+0x840>
  407fa2:	lea    rsi,[rip+0x1427]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  407fa9:	lea    rdi,[rip+0x1852]        # 409802 <_IO_stdin_used@@Base+0x802>
  407fb0:	mov    edx,0x786
  407fb5:	call   403060 <__assert_fail@plt>
  407fba:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407fc0 <flatcc_builder_finalize_buffer@@Base>:
  407fc0:	push   r12
  407fc2:	push   rbp
  407fc3:	mov    r12,rdi
  407fc6:	push   rbx
  407fc7:	mov    rbx,rsi
  407fca:	call   407e60 <flatcc_builder_get_buffer_size@@Base>
  407fcf:	test   rbx,rbx
  407fd2:	mov    rbp,rax
  407fd5:	je     407fda <flatcc_builder_finalize_buffer@@Base+0x1a>
  407fd7:	mov    QWORD PTR [rbx],rax
  407fda:	mov    rdi,rbp
  407fdd:	call   4030c0 <malloc@plt>
  407fe2:	test   rax,rax
  407fe5:	mov    rbx,rax
  407fe8:	je     408005 <flatcc_builder_finalize_buffer@@Base+0x45>
  407fea:	mov    rdx,rbp
  407fed:	mov    rsi,rax
  407ff0:	mov    rdi,r12
  407ff3:	call   407f70 <flatcc_builder_copy_buffer@@Base>
  407ff8:	test   rax,rax
  407ffb:	je     408024 <flatcc_builder_finalize_buffer@@Base+0x64>
  407ffd:	mov    rax,rbx
  408000:	pop    rbx
  408001:	pop    rbp
  408002:	pop    r12
  408004:	ret    
  408005:	lea    rcx,[rip+0x1814]        # 409820 <_IO_stdin_used@@Base+0x820>
  40800c:	lea    rsi,[rip+0x13bd]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  408013:	lea    rdi,[rip+0x174d]        # 409767 <_IO_stdin_used@@Base+0x767>
  40801a:	mov    edx,0x798
  40801f:	call   403060 <__assert_fail@plt>
  408024:	lea    rcx,[rip+0x17f5]        # 409820 <_IO_stdin_used@@Base+0x820>
  40802b:	lea    rsi,[rip+0x139e]        # 4093d0 <_IO_stdin_used@@Base+0x3d0>
  408032:	lea    rdi,[rip+0x172e]        # 409767 <_IO_stdin_used@@Base+0x767>
  408039:	mov    edx,0x79c
  40803e:	call   403060 <__assert_fail@plt>
  408043:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40804e:	xchg   ax,ax

0000000000408050 <flatcc_builder_finalize_aligned_buffer@@Base>:
  408050:	push   r13
  408052:	push   r12
  408054:	mov    r12,rdi
  408057:	push   rbp
  408058:	push   rbx
  408059:	mov    rbp,rsi
  40805c:	sub    rsp,0x18
  408060:	mov    rax,QWORD PTR fs:0x28
  408069:	mov    QWORD PTR [rsp+0x8],rax
  40806e:	xor    eax,eax
  408070:	call   407e60 <flatcc_builder_get_buffer_size@@Base>
  408075:	test   rbp,rbp
  408078:	mov    rbx,rax
  40807b:	je     408081 <flatcc_builder_finalize_aligned_buffer@@Base+0x31>
  40807d:	mov    QWORD PTR [rbp+0x0],rax
  408081:	mov    rdi,r12
  408084:	call   407e00 <flatcc_builder_get_buffer_alignment@@Base>
  408089:	movzx  eax,ax
  40808c:	mov    esi,0x8
  408091:	mov    rdi,rsp
  408094:	lea    rdx,[rbx+rax*1-0x1]
  408099:	mov    rbx,rax
  40809c:	mov    QWORD PTR [rsp],0x0
  4080a4:	neg    rbx
  4080a7:	and    rbx,rdx
  4080aa:	cmp    rax,0x8
  4080ae:	cmovae rsi,rax
  4080b2:	mov    rdx,rbx
  4080b5:	call   4030f0 <posix_memalign@plt>
  4080ba:	test   eax,eax
  4080bc:	je     408100 <flatcc_builder_finalize_aligned_buffer@@Base+0xb0>
  4080be:	mov    rdi,QWORD PTR [rsp]
  4080c2:	test   rdi,rdi
  4080c5:	je     4080cc <flatcc_builder_finalize_aligned_buffer@@Base+0x7c>
  4080c7:	call   403030 <free@plt>
  4080cc:	test   rbp,rbp
  4080cf:	je     408126 <flatcc_builder_finalize_aligned_buffer@@Base+0xd6>
  4080d1:	mov    QWORD PTR [rbp+0x0],0x0
  4080d9:	xor    r13d,r13d
  4080dc:	mov    rcx,QWORD PTR [rsp+0x8]
  4080e1:	xor    rcx,QWORD PTR fs:0x28
  4080ea:	mov    rax,r13
  4080ed:	jne    408121 <flatcc_builder_finalize_aligned_buffer@@Base+0xd1>
  4080ef:	add    rsp,0x18
  4080f3:	pop    rbx
  4080f4:	pop    rbp
  4080f5:	pop    r12
  4080f7:	pop    r13
  4080f9:	ret    
  4080fa:	nop    WORD PTR [rax+rax*1+0x0]
  408100:	mov    r13,QWORD PTR [rsp]
  408104:	test   r13,r13
  408107:	je     4080cc <flatcc_builder_finalize_aligned_buffer@@Base+0x7c>
  408109:	mov    rdx,rbx
  40810c:	mov    rsi,r13
  40810f:	mov    rdi,r12
  408112:	call   407f70 <flatcc_builder_copy_buffer@@Base>
  408117:	test   rax,rax
  40811a:	jne    4080dc <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
  40811c:	mov    rdi,r13
  40811f:	jmp    4080c7 <flatcc_builder_finalize_aligned_buffer@@Base+0x77>
  408121:	call   403050 <__stack_chk_fail@plt>
  408126:	xor    r13d,r13d
  408129:	jmp    4080dc <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
  40812b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408130 <flatcc_builder_aligned_alloc@@Base>:
  408130:	sub    rsp,0x18
  408134:	mov    rdx,rsi
  408137:	mov    esi,0x8
  40813c:	mov    rax,QWORD PTR fs:0x28
  408145:	mov    QWORD PTR [rsp+0x8],rax
  40814a:	xor    eax,eax
  40814c:	cmp    rdi,0x8
  408150:	mov    QWORD PTR [rsp],0x0
  408158:	cmovae rsi,rdi
  40815c:	mov    rdi,rsp
  40815f:	call   4030f0 <posix_memalign@plt>
  408164:	test   eax,eax
  408166:	mov    rax,QWORD PTR [rsp]
  40816a:	je     40817b <flatcc_builder_aligned_alloc@@Base+0x4b>
  40816c:	test   rax,rax
  40816f:	je     40817b <flatcc_builder_aligned_alloc@@Base+0x4b>
  408171:	mov    rdi,rax
  408174:	call   403030 <free@plt>
  408179:	xor    eax,eax
  40817b:	mov    rcx,QWORD PTR [rsp+0x8]
  408180:	xor    rcx,QWORD PTR fs:0x28
  408189:	jne    408190 <flatcc_builder_aligned_alloc@@Base+0x60>
  40818b:	add    rsp,0x18
  40818f:	ret    
  408190:	call   403050 <__stack_chk_fail@plt>
  408195:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004081a0 <flatcc_builder_aligned_free@@Base>:
  4081a0:	jmp    403030 <free@plt>
  4081a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004081b0 <flatcc_builder_get_emit_context@@Base>:
  4081b0:	mov    rax,QWORD PTR [rdi+0x38]
  4081b4:	ret    
  4081b5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4081bf:	nop

00000000004081c0 <flatcc_emitter_recycle_page@@Base>:
  4081c0:	mov    rax,QWORD PTR [rdi]
  4081c3:	cmp    rax,rsi
  4081c6:	je     408220 <flatcc_emitter_recycle_page@@Base+0x60>
  4081c8:	cmp    rsi,QWORD PTR [rdi+0x8]
  4081cc:	je     408220 <flatcc_emitter_recycle_page@@Base+0x60>
  4081ce:	mov    rdx,QWORD PTR [rsi+0xb80]
  4081d5:	mov    rcx,QWORD PTR [rsi+0xb88]
  4081dc:	mov    QWORD PTR [rdx+0xb88],rcx
  4081e3:	mov    rcx,QWORD PTR [rsi+0xb88]
  4081ea:	mov    QWORD PTR [rcx+0xb80],rdx
  4081f1:	mov    rdx,QWORD PTR [rax+0xb88]
  4081f8:	mov    QWORD PTR [rsi+0xb80],rax
  4081ff:	mov    QWORD PTR [rsi+0xb88],rdx
  408206:	mov    QWORD PTR [rdx+0xb80],rsi
  40820d:	mov    rax,QWORD PTR [rsi+0xb80]
  408214:	mov    QWORD PTR [rax+0xb88],rsi
  40821b:	xor    eax,eax
  40821d:	ret    
  40821e:	xchg   ax,ax
  408220:	mov    eax,0xffffffff
  408225:	ret    
  408226:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000408230 <flatcc_emitter_reset@@Base>:
  408230:	mov    rax,QWORD PTR [rdi]
  408233:	test   rax,rax
  408236:	je     4082fd <flatcc_emitter_reset@@Base+0xcd>
  40823c:	lea    rdx,[rax+0x5c0]
  408243:	mov    QWORD PTR [rdi+0x8],rax
  408247:	mov    QWORD PTR [rdi+0x18],0x5c0
  40824f:	mov    QWORD PTR [rdi+0x28],0x5c0
  408257:	mov    rcx,QWORD PTR [rdi+0x30]
  40825b:	mov    QWORD PTR [rdi+0x10],rdx
  40825f:	mov    QWORD PTR [rdi+0x20],rdx
  408263:	mov    rdx,QWORD PTR [rdi+0x40]
  408267:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408271:	test   rdx,rdx
  408274:	je     408300 <flatcc_emitter_reset@@Base+0xd0>
  40827a:	lea    rdx,[rdx+rdx*2]
  40827e:	shr    rcx,0x2
  408282:	mov    QWORD PTR [rdi+0x30],0x0
  40828a:	shr    rdx,0x2
  40828e:	add    rdx,rcx
  408291:	mov    QWORD PTR [rdi+0x40],rdx
  408295:	add    rdx,rdx
  408298:	cmp    QWORD PTR [rdi+0x38],rdx
  40829c:	jbe    4082fd <flatcc_emitter_reset@@Base+0xcd>
  40829e:	push   rbx
  40829f:	mov    rbx,rdi
  4082a2:	mov    rdi,QWORD PTR [rax+0xb80]
  4082a9:	cmp    rax,rdi
  4082ac:	jne    4082c0 <flatcc_emitter_reset@@Base+0x90>
  4082ae:	jmp    4082fc <flatcc_emitter_reset@@Base+0xcc>
  4082b0:	mov    rax,QWORD PTR [rbx+0x8]
  4082b4:	mov    rdi,QWORD PTR [rax+0xb80]
  4082bb:	cmp    rdi,QWORD PTR [rbx]
  4082be:	je     4082fc <flatcc_emitter_reset@@Base+0xcc>
  4082c0:	mov    rdx,QWORD PTR [rdi+0xb80]
  4082c7:	mov    QWORD PTR [rax+0xb80],rdx
  4082ce:	mov    rdx,QWORD PTR [rdi+0xb80]
  4082d5:	mov    QWORD PTR [rdx+0xb88],rax
  4082dc:	call   403030 <free@plt>
  4082e1:	mov    rsi,QWORD PTR [rbx+0x40]
  4082e5:	mov    rax,QWORD PTR [rbx+0x38]
  4082e9:	lea    rdx,[rsi+rsi*1]
  4082ed:	sub    rax,0xb80
  4082f3:	mov    QWORD PTR [rbx+0x38],rax
  4082f7:	cmp    rdx,rax
  4082fa:	jb     4082b0 <flatcc_emitter_reset@@Base+0x80>
  4082fc:	pop    rbx
  4082fd:	repz ret 
  4082ff:	nop
  408300:	mov    rdx,rcx
  408303:	jmp    40827a <flatcc_emitter_reset@@Base+0x4a>
  408308:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408310 <flatcc_emitter_clear@@Base>:
  408310:	mov    rax,QWORD PTR [rdi]
  408313:	test   rax,rax
  408316:	je     408397 <flatcc_emitter_clear@@Base+0x87>
  408318:	push   rbp
  408319:	push   rbx
  40831a:	mov    rbp,rdi
  40831d:	sub    rsp,0x8
  408321:	mov    rdx,QWORD PTR [rax+0xb88]
  408328:	mov    QWORD PTR [rdx+0xb80],0x0
  408333:	mov    rbx,QWORD PTR [rax+0xb80]
  40833a:	test   rbx,rbx
  40833d:	jne    40834b <flatcc_emitter_clear@@Base+0x3b>
  40833f:	jmp    408399 <flatcc_emitter_clear@@Base+0x89>
  408341:	nop    DWORD PTR [rax+0x0]
  408348:	mov    rbx,rax
  40834b:	mov    rdi,QWORD PTR [rbx+0xb88]
  408352:	call   403030 <free@plt>
  408357:	mov    rax,QWORD PTR [rbx+0xb80]
  40835e:	test   rax,rax
  408361:	jne    408348 <flatcc_emitter_clear@@Base+0x38>
  408363:	mov    rdi,rbx
  408366:	call   403030 <free@plt>
  40836b:	lea    rdi,[rbp+0x8]
  40836f:	mov    QWORD PTR [rbp+0x0],0x0
  408377:	mov    QWORD PTR [rbp+0x40],0x0
  40837f:	xor    eax,eax
  408381:	and    rdi,0xfffffffffffffff8
  408385:	sub    rbp,rdi
  408388:	lea    ecx,[rbp+0x48]
  40838b:	shr    ecx,0x3
  40838e:	rep stos QWORD PTR es:[rdi],rax
  408391:	add    rsp,0x8
  408395:	pop    rbx
  408396:	pop    rbp
  408397:	repz ret 
  408399:	mov    rbx,rax
  40839c:	jmp    408363 <flatcc_emitter_clear@@Base+0x53>
  40839e:	xchg   ax,ax

00000000004083a0 <flatcc_emitter@@Base>:
  4083a0:	push   r15
  4083a2:	push   r14
  4083a4:	mov    r14,rsi
  4083a7:	push   r13
  4083a9:	push   r12
  4083ab:	push   rbp
  4083ac:	push   rbx
  4083ad:	mov    rbx,rdi
  4083b0:	sub    rsp,0x18
  4083b4:	add    QWORD PTR [rdi+0x30],r8
  4083b8:	test   ecx,ecx
  4083ba:	js     4085ae <flatcc_emitter@@Base+0x20e>
  4083c0:	mov    rax,QWORD PTR [rdi+0x28]
  4083c4:	cmp    r8,rax
  4083c7:	jbe    408454 <flatcc_emitter@@Base+0xb4>
  4083cd:	test   edx,edx
  4083cf:	je     408443 <flatcc_emitter@@Base+0xa3>
  4083d1:	lea    r15d,[rdx-0x1]
  4083d5:	add    r15,0x1
  4083d9:	shl    r15,0x4
  4083dd:	lea    rax,[rsi+r15*1]
  4083e1:	mov    QWORD PTR [rsp+0x8],rax
  4083e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4083f0:	mov    r12,QWORD PTR [r14+0x8]
  4083f4:	mov    r13,QWORD PTR [r14]
  4083f7:	test   r12,r12
  4083fa:	je     408438 <flatcc_emitter@@Base+0x98>
  4083fc:	nop    DWORD PTR [rax+0x0]
  408400:	mov    rbp,QWORD PTR [rbx+0x28]
  408404:	cmp    rbp,r12
  408407:	jae    4084a8 <flatcc_emitter@@Base+0x108>
  40840d:	test   rbp,rbp
  408410:	je     4084b8 <flatcc_emitter@@Base+0x118>
  408416:	sub    r12,rbp
  408419:	mov    rdi,QWORD PTR [rbx+0x20]
  40841d:	mov    rsi,r13
  408420:	mov    rdx,rbp
  408423:	add    r13,rbp
  408426:	call   4030b0 <memcpy@plt>
  40842b:	add    QWORD PTR [rbx+0x20],rbp
  40842f:	sub    QWORD PTR [rbx+0x28],rbp
  408433:	test   r12,r12
  408436:	jne    408400 <flatcc_emitter@@Base+0x60>
  408438:	add    r14,0x10
  40843c:	cmp    r14,QWORD PTR [rsp+0x8]
  408441:	jne    4083f0 <flatcc_emitter@@Base+0x50>
  408443:	add    rsp,0x18
  408447:	xor    eax,eax
  408449:	pop    rbx
  40844a:	pop    rbp
  40844b:	pop    r12
  40844d:	pop    r13
  40844f:	pop    r14
  408451:	pop    r15
  408453:	ret    
  408454:	mov    rcx,QWORD PTR [rdi+0x20]
  408458:	sub    rax,r8
  40845b:	mov    QWORD PTR [rdi+0x28],rax
  40845f:	lea    rsi,[rcx+r8*1]
  408463:	mov    QWORD PTR [rdi+0x20],rsi
  408467:	test   edx,edx
  408469:	je     408443 <flatcc_emitter@@Base+0xa3>
  40846b:	lea    ebx,[rdx-0x1]
  40846e:	add    rbx,0x1
  408472:	shl    rbx,0x4
  408476:	add    rbx,r14
  408479:	nop    DWORD PTR [rax+0x0]
  408480:	mov    rsi,QWORD PTR [r14]
  408483:	mov    rdx,QWORD PTR [r14+0x8]
  408487:	mov    rdi,rcx
  40848a:	add    r14,0x10
  40848e:	call   4030b0 <memcpy@plt>
  408493:	mov    rcx,rax
  408496:	add    rcx,QWORD PTR [r14-0x8]
  40849a:	cmp    rbx,r14
  40849d:	jne    408480 <flatcc_emitter@@Base+0xe0>
  40849f:	jmp    408443 <flatcc_emitter@@Base+0xa3>
  4084a1:	nop    DWORD PTR [rax+0x0]
  4084a8:	mov    rbp,r12
  4084ab:	xor    r12d,r12d
  4084ae:	jmp    408419 <flatcc_emitter@@Base+0x79>
  4084b3:	nop    DWORD PTR [rax+rax*1+0x0]
  4084b8:	mov    r15,QWORD PTR [rbx+0x8]
  4084bc:	test   r15,r15
  4084bf:	je     408540 <flatcc_emitter@@Base+0x1a0>
  4084c1:	mov    rbp,QWORD PTR [r15+0xb80]
  4084c8:	cmp    rbp,QWORD PTR [rbx]
  4084cb:	je     408500 <flatcc_emitter@@Base+0x160>
  4084cd:	mov    QWORD PTR [rbx+0x8],rbp
  4084d1:	mov    rax,QWORD PTR [rbp+0xb88]
  4084d8:	mov    QWORD PTR [rbx+0x20],rbp
  4084dc:	mov    QWORD PTR [rbx+0x28],0xb80
  4084e4:	mov    eax,DWORD PTR [rax+0xb90]
  4084ea:	add    eax,0xb80
  4084ef:	mov    DWORD PTR [rbp+0xb90],eax
  4084f5:	jmp    408400 <flatcc_emitter@@Base+0x60>
  4084fa:	nop    WORD PTR [rax+rax*1+0x0]
  408500:	mov    edi,0xb98
  408505:	call   4030c0 <malloc@plt>
  40850a:	test   rax,rax
  40850d:	je     40854f <flatcc_emitter@@Base+0x1af>
  40850f:	mov    QWORD PTR [rax+0xb80],rbp
  408516:	add    QWORD PTR [rbx+0x38],0xb80
  40851e:	mov    QWORD PTR [rax+0xb88],r15
  408525:	mov    QWORD PTR [rbp+0xb88],rax
  40852c:	mov    rbp,rax
  40852f:	mov    QWORD PTR [r15+0xb80],rax
  408536:	mov    QWORD PTR [rbx+0x8],rax
  40853a:	jmp    4084d1 <flatcc_emitter@@Base+0x131>
  40853c:	nop    DWORD PTR [rax+0x0]
  408540:	mov    edi,0xb98
  408545:	call   4030c0 <malloc@plt>
  40854a:	test   rax,rax
  40854d:	jne    408563 <flatcc_emitter@@Base+0x1c3>
  40854f:	add    rsp,0x18
  408553:	mov    eax,0xffffffff
  408558:	pop    rbx
  408559:	pop    rbp
  40855a:	pop    r12
  40855c:	pop    r13
  40855e:	pop    r14
  408560:	pop    r15
  408562:	ret    
  408563:	lea    rdx,[rax+0x5c0]
  40856a:	add    QWORD PTR [rbx+0x38],0xb80
  408572:	mov    QWORD PTR [rbx],rax
  408575:	mov    QWORD PTR [rbx+0x8],rax
  408579:	mov    QWORD PTR [rax+0xb80],rax
  408580:	mov    QWORD PTR [rax+0xb88],rax
  408587:	mov    QWORD PTR [rbx+0x10],rdx
  40858b:	mov    QWORD PTR [rbx+0x20],rdx
  40858f:	mov    QWORD PTR [rbx+0x18],0x5c0
  408597:	mov    QWORD PTR [rbx+0x28],0x5c0
  40859f:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4085a9:	jmp    408400 <flatcc_emitter@@Base+0x60>
  4085ae:	mov    rax,QWORD PTR [rdi+0x18]
  4085b2:	cmp    r8,rax
  4085b5:	jbe    40864c <flatcc_emitter@@Base+0x2ac>
  4085bb:	movsxd rax,edx
  4085be:	shl    rax,0x4
  4085c2:	add    r14,rax
  4085c5:	mov    eax,edx
  4085c7:	shl    rax,0x4
  4085cb:	mov    rcx,r14
  4085ce:	sub    rcx,rax
  4085d1:	mov    QWORD PTR [rsp+0x8],rcx
  4085d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4085e0:	cmp    r14,QWORD PTR [rsp+0x8]
  4085e5:	je     408443 <flatcc_emitter@@Base+0xa3>
  4085eb:	sub    r14,0x10
  4085ef:	mov    rbp,QWORD PTR [r14+0x8]
  4085f3:	mov    r12,rbp
  4085f6:	add    r12,QWORD PTR [r14]
  4085f9:	test   rbp,rbp
  4085fc:	je     4085e0 <flatcc_emitter@@Base+0x240>
  4085fe:	mov    rdx,QWORD PTR [rbx+0x18]
  408602:	cmp    rdx,rbp
  408605:	jae    40863f <flatcc_emitter@@Base+0x29f>
  408607:	test   rdx,rdx
  40860a:	je     408668 <flatcc_emitter@@Base+0x2c8>
  40860c:	sub    rbp,rdx
  40860f:	xor    ecx,ecx
  408611:	mov    rax,rdx
  408614:	mov    QWORD PTR [rbx+0x18],rcx
  408618:	neg    rax
  40861b:	mov    rdi,rax
  40861e:	add    rdi,QWORD PTR [rbx+0x10]
  408622:	add    r12,rax
  408625:	mov    rsi,r12
  408628:	mov    QWORD PTR [rbx+0x10],rdi
  40862c:	call   4030b0 <memcpy@plt>
  408631:	test   rbp,rbp
  408634:	je     4085e0 <flatcc_emitter@@Base+0x240>
  408636:	mov    rdx,QWORD PTR [rbx+0x18]
  40863a:	cmp    rdx,rbp
  40863d:	jb     408607 <flatcc_emitter@@Base+0x267>
  40863f:	mov    rcx,rdx
  408642:	mov    rdx,rbp
  408645:	sub    rcx,rbp
  408648:	xor    ebp,ebp
  40864a:	jmp    408611 <flatcc_emitter@@Base+0x271>
  40864c:	mov    rcx,QWORD PTR [rdi+0x10]
  408650:	sub    rax,r8
  408653:	mov    QWORD PTR [rdi+0x18],rax
  408657:	sub    rcx,r8
  40865a:	mov    QWORD PTR [rdi+0x10],rcx
  40865e:	jmp    408467 <flatcc_emitter@@Base+0xc7>
  408663:	nop    DWORD PTR [rax+rax*1+0x0]
  408668:	mov    r13,QWORD PTR [rbx]
  40866b:	test   r13,r13
  40866e:	je     40870f <flatcc_emitter@@Base+0x36f>
  408674:	mov    r15,QWORD PTR [r13+0xb88]
  40867b:	cmp    r15,QWORD PTR [rbx+0x8]
  40867f:	je     4086d0 <flatcc_emitter@@Base+0x330>
  408681:	mov    eax,DWORD PTR [r13+0xb90]
  408688:	sub    eax,0xb80
  40868d:	mov    DWORD PTR [r15+0xb90],eax
  408694:	mov    QWORD PTR [rbx],r15
  408697:	lea    rax,[r15+0xb80]
  40869e:	mov    QWORD PTR [rbx+0x18],0xb80
  4086a6:	mov    QWORD PTR [rbx+0x10],rax
  4086aa:	mov    rax,QWORD PTR [r15+0xb80]
  4086b1:	mov    eax,DWORD PTR [rax+0xb90]
  4086b7:	sub    eax,0xb80
  4086bc:	mov    DWORD PTR [r15+0xb90],eax
  4086c3:	jmp    4085fe <flatcc_emitter@@Base+0x25e>
  4086c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4086d0:	mov    edi,0xb98
  4086d5:	call   4030c0 <malloc@plt>
  4086da:	test   rax,rax
  4086dd:	je     40854f <flatcc_emitter@@Base+0x1af>
  4086e3:	mov    QWORD PTR [rax+0xb88],r15
  4086ea:	add    QWORD PTR [rbx+0x38],0xb80
  4086f2:	mov    QWORD PTR [rax+0xb80],r13
  4086f9:	mov    QWORD PTR [r13+0xb88],rax
  408700:	mov    QWORD PTR [r15+0xb80],rax
  408707:	mov    QWORD PTR [rbx],rax
  40870a:	mov    r15,rax
  40870d:	jmp    408697 <flatcc_emitter@@Base+0x2f7>
  40870f:	mov    edi,0xb98
  408714:	call   4030c0 <malloc@plt>
  408719:	test   rax,rax
  40871c:	je     40854f <flatcc_emitter@@Base+0x1af>
  408722:	lea    rdx,[rax+0x5c0]
  408729:	add    QWORD PTR [rbx+0x38],0xb80
  408731:	mov    QWORD PTR [rbx],rax
  408734:	mov    QWORD PTR [rbx+0x8],rax
  408738:	mov    QWORD PTR [rax+0xb80],rax
  40873f:	mov    QWORD PTR [rax+0xb88],rax
  408746:	mov    QWORD PTR [rbx+0x10],rdx
  40874a:	mov    QWORD PTR [rbx+0x20],rdx
  40874e:	mov    QWORD PTR [rbx+0x18],0x5c0
  408756:	mov    QWORD PTR [rbx+0x28],0x5c0
  40875e:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408768:	jmp    4085fe <flatcc_emitter@@Base+0x25e>
  40876d:	nop    DWORD PTR [rax]

0000000000408770 <flatcc_emitter_copy_buffer@@Base>:
  408770:	push   rbp
  408771:	push   rbx
  408772:	sub    rsp,0x8
  408776:	mov    r9,QWORD PTR [rdi+0x30]
  40877a:	cmp    r9,rdx
  40877d:	ja     408840 <flatcc_emitter_copy_buffer@@Base+0xd0>
  408783:	mov    rax,QWORD PTR [rdi]
  408786:	test   rax,rax
  408789:	je     408840 <flatcc_emitter_copy_buffer@@Base+0xd0>
  40878f:	cmp    rax,QWORD PTR [rdi+0x8]
  408793:	mov    rcx,rsi
  408796:	mov    rbx,rdi
  408799:	je     408850 <flatcc_emitter_copy_buffer@@Base+0xe0>
  40879f:	mov    r8d,0xb80
  4087a5:	sub    r8,QWORD PTR [rdi+0x18]
  4087a9:	mov    rsi,QWORD PTR [rdi+0x10]
  4087ad:	mov    rdi,rcx
  4087b0:	mov    rbp,r8
  4087b3:	mov    rdx,r8
  4087b6:	call   4030b0 <memcpy@plt>
  4087bb:	add    rbp,rax
  4087be:	mov    rax,QWORD PTR [rbx]
  4087c1:	mov    rsi,QWORD PTR [rbx+0x8]
  4087c5:	mov    rax,QWORD PTR [rax+0xb80]
  4087cc:	cmp    rax,rsi
  4087cf:	je     408824 <flatcc_emitter_copy_buffer@@Base+0xb4>
  4087d1:	nop    DWORD PTR [rax+0x0]
  4087d8:	mov    rdx,QWORD PTR [rax]
  4087db:	lea    rdi,[rbp+0x8]
  4087df:	mov    rcx,rbp
  4087e2:	mov    rsi,rax
  4087e5:	add    rbp,0xb80
  4087ec:	and    rdi,0xfffffffffffffff8
  4087f0:	mov    QWORD PTR [rbp-0xb80],rdx
  4087f7:	mov    rdx,QWORD PTR [rax+0xb78]
  4087fe:	sub    rcx,rdi
  408801:	sub    rsi,rcx
  408804:	add    ecx,0xb80
  40880a:	shr    ecx,0x3
  40880d:	mov    QWORD PTR [rbp-0x8],rdx
  408811:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
  408814:	mov    rax,QWORD PTR [rax+0xb80]
  40881b:	mov    rsi,QWORD PTR [rbx+0x8]
  40881f:	cmp    rsi,rax
  408822:	jne    4087d8 <flatcc_emitter_copy_buffer@@Base+0x68>
  408824:	mov    edx,0xb80
  408829:	sub    rdx,QWORD PTR [rbx+0x28]
  40882d:	mov    rdi,rbp
  408830:	call   4030b0 <memcpy@plt>
  408835:	add    rsp,0x8
  408839:	mov    rax,rbp
  40883c:	pop    rbx
  40883d:	pop    rbp
  40883e:	ret    
  40883f:	nop
  408840:	xor    ebp,ebp
  408842:	add    rsp,0x8
  408846:	mov    rax,rbp
  408849:	pop    rbx
  40884a:	pop    rbp
  40884b:	ret    
  40884c:	nop    DWORD PTR [rax+0x0]
  408850:	mov    rsi,QWORD PTR [rdi+0x10]
  408854:	mov    rdx,r9
  408857:	mov    rdi,rcx
  40885a:	call   4030b0 <memcpy@plt>
  40885f:	mov    rbp,rax
  408862:	jmp    408835 <flatcc_emitter_copy_buffer@@Base+0xc5>
  408864:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40886e:	xchg   ax,ax

0000000000408870 <__libc_csu_init@@Base>:
  408870:	endbr64 
  408874:	push   r15
  408876:	lea    r15,[rip+0x458b]        # 40ce08 <flatcc_builder_padding_base@@Base+0x2f48>
  40887d:	push   r14
  40887f:	mov    r14,rdx
  408882:	push   r13
  408884:	mov    r13,rsi
  408887:	push   r12
  408889:	mov    r12d,edi
  40888c:	push   rbp
  40888d:	lea    rbp,[rip+0x457c]        # 40ce10 <flatcc_builder_padding_base@@Base+0x2f50>
  408894:	push   rbx
  408895:	sub    rbp,r15
  408898:	sub    rsp,0x8
  40889c:	call   403000 <free@plt-0x30>
  4088a1:	sar    rbp,0x3
  4088a5:	je     4088c6 <__libc_csu_init@@Base+0x56>
  4088a7:	xor    ebx,ebx
  4088a9:	nop    DWORD PTR [rax+0x0]
  4088b0:	mov    rdx,r14
  4088b3:	mov    rsi,r13
  4088b6:	mov    edi,r12d
  4088b9:	call   QWORD PTR [r15+rbx*8]
  4088bd:	add    rbx,0x1
  4088c1:	cmp    rbp,rbx
  4088c4:	jne    4088b0 <__libc_csu_init@@Base+0x40>
  4088c6:	add    rsp,0x8
  4088ca:	pop    rbx
  4088cb:	pop    rbp
  4088cc:	pop    r12
  4088ce:	pop    r13
  4088d0:	pop    r14
  4088d2:	pop    r15
  4088d4:	ret    
  4088d5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004088e0 <__libc_csu_fini@@Base>:
  4088e0:	endbr64 
  4088e4:	ret    

Disassembly of section .fini:

00000000004088e8 <.fini>:
  4088e8:	endbr64 
  4088ec:	sub    rsp,0x8
  4088f0:	add    rsp,0x8
  4088f4:	ret    
