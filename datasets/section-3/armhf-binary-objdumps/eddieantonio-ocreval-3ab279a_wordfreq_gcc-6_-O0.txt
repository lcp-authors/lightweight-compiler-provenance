
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

000109e0 <.init>:
   109e0:	push	{r3, lr}
   109e4:	bl	10c04 <__assert_fail@plt+0x48>
   109e8:	pop	{r3, pc}

Disassembly of section .plt:

000109ec <calloc@plt-0x14>:
   109ec:	push	{lr}		; (str lr, [sp, #-4]!)
   109f0:	ldr	lr, [pc, #4]	; 109fc <calloc@plt-0x4>
   109f4:	add	lr, pc, lr
   109f8:	ldr	pc, [lr, #8]!
   109fc:	andeq	r8, r1, r4, lsl #12

00010a00 <calloc@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #24, 20	; 0x18000
   10a08:	ldr	pc, [ip, #1540]!	; 0x604

00010a0c <strcmp@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #24, 20	; 0x18000
   10a14:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a18 <printf@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #24, 20	; 0x18000
   10a20:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a24 <fopen@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #24, 20	; 0x18000
   10a2c:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a30 <free@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #24, 20	; 0x18000
   10a38:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a3c <utf8proc_get_property@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #24, 20	; 0x18000
   10a44:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a48 <fgets@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #24, 20	; 0x18000
   10a50:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a54 <utf8proc_encode_char@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #24, 20	; 0x18000
   10a5c:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a60 <strdup@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #24, 20	; 0x18000
   10a68:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a6c <rewind@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #24, 20	; 0x18000
   10a74:	ldr	pc, [ip, #1468]!	; 0x5bc

00010a78 <unlink@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #24, 20	; 0x18000
   10a80:	ldr	pc, [ip, #1460]!	; 0x5b4

00010a84 <utf8proc_tolower@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #24, 20	; 0x18000
   10a8c:	ldr	pc, [ip, #1452]!	; 0x5ac

00010a90 <__xstat@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #24, 20	; 0x18000
   10a98:	ldr	pc, [ip, #1444]!	; 0x5a4

00010a9c <fwrite@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #24, 20	; 0x18000
   10aa4:	ldr	pc, [ip, #1436]!	; 0x59c

00010aa8 <fread@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #24, 20	; 0x18000
   10ab0:	ldr	pc, [ip, #1428]!	; 0x594

00010ab4 <utf8proc_iterate@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #24, 20	; 0x18000
   10abc:	ldr	pc, [ip, #1420]!	; 0x58c

00010ac0 <puts@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #24, 20	; 0x18000
   10ac8:	ldr	pc, [ip, #1412]!	; 0x584

00010acc <malloc@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #24, 20	; 0x18000
   10ad4:	ldr	pc, [ip, #1404]!	; 0x57c

00010ad8 <__libc_start_main@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #24, 20	; 0x18000
   10ae0:	ldr	pc, [ip, #1396]!	; 0x574

00010ae4 <__sysv_signal@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #24, 20	; 0x18000
   10aec:	ldr	pc, [ip, #1388]!	; 0x56c

00010af0 <__gmon_start__@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #24, 20	; 0x18000
   10af8:	ldr	pc, [ip, #1380]!	; 0x564

00010afc <getpid@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #24, 20	; 0x18000
   10b04:	ldr	pc, [ip, #1372]!	; 0x55c

00010b08 <exit@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #24, 20	; 0x18000
   10b10:	ldr	pc, [ip, #1364]!	; 0x554

00010b14 <utf8proc_category@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #24, 20	; 0x18000
   10b1c:	ldr	pc, [ip, #1356]!	; 0x54c

00010b20 <strlen@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #24, 20	; 0x18000
   10b28:	ldr	pc, [ip, #1348]!	; 0x544

00010b2c <fprintf@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #24, 20	; 0x18000
   10b34:	ldr	pc, [ip, #1340]!	; 0x53c

00010b38 <__isoc99_sscanf@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #24, 20	; 0x18000
   10b40:	ldr	pc, [ip, #1332]!	; 0x534

00010b44 <fclose@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #24, 20	; 0x18000
   10b4c:	ldr	pc, [ip, #1324]!	; 0x52c

00010b50 <utf8proc_NFC@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #24, 20	; 0x18000
   10b58:	ldr	pc, [ip, #1316]!	; 0x524

00010b5c <fputc@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #24, 20	; 0x18000
   10b64:	ldr	pc, [ip, #1308]!	; 0x51c

00010b68 <sprintf@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #24, 20	; 0x18000
   10b70:	ldr	pc, [ip, #1300]!	; 0x514

00010b74 <atoi@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #24, 20	; 0x18000
   10b7c:	ldr	pc, [ip, #1292]!	; 0x50c

00010b80 <utf8proc_errmsg@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #24, 20	; 0x18000
   10b88:	ldr	pc, [ip, #1284]!	; 0x504

00010b8c <fputs@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #24, 20	; 0x18000
   10b94:	ldr	pc, [ip, #1276]!	; 0x4fc

00010b98 <strncmp@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #24, 20	; 0x18000
   10ba0:	ldr	pc, [ip, #1268]!	; 0x4f4

00010ba4 <abort@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #24, 20	; 0x18000
   10bac:	ldr	pc, [ip, #1260]!	; 0x4ec

00010bb0 <getc@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #24, 20	; 0x18000
   10bb8:	ldr	pc, [ip, #1252]!	; 0x4e4

00010bbc <__assert_fail@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #24, 20	; 0x18000
   10bc4:	ldr	pc, [ip, #1244]!	; 0x4dc

Disassembly of section .text:

00010bc8 <error@@Base-0x1bd8>:
   10bc8:	mov	fp, #0
   10bcc:	mov	lr, #0
   10bd0:	pop	{r1}		; (ldr r1, [sp], #4)
   10bd4:	mov	r2, sp
   10bd8:	push	{r2}		; (str r2, [sp, #-4]!)
   10bdc:	push	{r0}		; (str r0, [sp, #-4]!)
   10be0:	ldr	ip, [pc, #16]	; 10bf8 <__assert_fail@plt+0x3c>
   10be4:	push	{ip}		; (str ip, [sp, #-4]!)
   10be8:	ldr	r0, [pc, #12]	; 10bfc <__assert_fail@plt+0x40>
   10bec:	ldr	r3, [pc, #12]	; 10c00 <__assert_fail@plt+0x44>
   10bf0:	bl	10ad8 <__libc_start_main@plt>
   10bf4:	bl	10ba4 <abort@plt>
   10bf8:			; <UNDEFINED> instruction: 0x00014bbc
   10bfc:	andeq	r1, r1, r0, rrx
   10c00:	andeq	r4, r1, ip, asr fp
   10c04:	ldr	r3, [pc, #20]	; 10c20 <__assert_fail@plt+0x64>
   10c08:	ldr	r2, [pc, #20]	; 10c24 <__assert_fail@plt+0x68>
   10c0c:	add	r3, pc, r3
   10c10:	ldr	r2, [r3, r2]
   10c14:	cmp	r2, #0
   10c18:	bxeq	lr
   10c1c:	b	10af0 <__gmon_start__@plt>
   10c20:	andeq	r8, r1, ip, ror #7
   10c24:	andeq	r0, r0, r4, asr #1
   10c28:	ldr	r3, [pc, #28]	; 10c4c <__assert_fail@plt+0x90>
   10c2c:	ldr	r0, [pc, #28]	; 10c50 <__assert_fail@plt+0x94>
   10c30:	sub	r3, r3, r0
   10c34:	cmp	r3, #6
   10c38:	bxls	lr
   10c3c:	ldr	r3, [pc, #16]	; 10c54 <__assert_fail@plt+0x98>
   10c40:	cmp	r3, #0
   10c44:	bxeq	lr
   10c48:	bx	r3
   10c4c:	andeq	r9, r2, fp, lsl #2
   10c50:	andeq	r9, r2, r8, lsl #2
   10c54:	andeq	r0, r0, r0
   10c58:	ldr	r1, [pc, #36]	; 10c84 <__assert_fail@plt+0xc8>
   10c5c:	ldr	r0, [pc, #36]	; 10c88 <__assert_fail@plt+0xcc>
   10c60:	sub	r1, r1, r0
   10c64:	asr	r1, r1, #2
   10c68:	add	r1, r1, r1, lsr #31
   10c6c:	asrs	r1, r1, #1
   10c70:	bxeq	lr
   10c74:	ldr	r3, [pc, #16]	; 10c8c <__assert_fail@plt+0xd0>
   10c78:	cmp	r3, #0
   10c7c:	bxeq	lr
   10c80:	bx	r3
   10c84:	andeq	r9, r2, r8, lsl #2
   10c88:	andeq	r9, r2, r8, lsl #2
   10c8c:	andeq	r0, r0, r0
   10c90:	push	{r4, lr}
   10c94:	ldr	r4, [pc, #24]	; 10cb4 <__assert_fail@plt+0xf8>
   10c98:	ldrb	r3, [r4]
   10c9c:	cmp	r3, #0
   10ca0:	popne	{r4, pc}
   10ca4:	bl	10c28 <__assert_fail@plt+0x6c>
   10ca8:	mov	r3, #1
   10cac:	strb	r3, [r4]
   10cb0:	pop	{r4, pc}
   10cb4:	andeq	r9, r2, r8, lsl #2
   10cb8:	ldr	r0, [pc, #40]	; 10ce8 <__assert_fail@plt+0x12c>
   10cbc:	ldr	r3, [r0]
   10cc0:	cmp	r3, #0
   10cc4:	bne	10ccc <__assert_fail@plt+0x110>
   10cc8:	b	10c58 <__assert_fail@plt+0x9c>
   10ccc:	ldr	r3, [pc, #24]	; 10cec <__assert_fail@plt+0x130>
   10cd0:	cmp	r3, #0
   10cd4:	beq	10cc8 <__assert_fail@plt+0x10c>
   10cd8:	push	{r4, lr}
   10cdc:	blx	r3
   10ce0:	pop	{r4, lr}
   10ce4:	b	10c58 <__assert_fail@plt+0x9c>
   10ce8:	andeq	r8, r2, r4, lsl #30
   10cec:	andeq	r0, r0, r0
   10cf0:	push	{r4, fp, lr}
   10cf4:	add	fp, sp, #8
   10cf8:	sub	sp, sp, #20
   10cfc:	str	r0, [fp, #-24]	; 0xffffffe8
   10d00:	ldr	r4, [pc, #200]	; 10dd0 <__assert_fail@plt+0x214>
   10d04:	add	r4, pc, r4
   10d08:	ldr	r3, [pc, #196]	; 10dd4 <__assert_fail@plt+0x218>
   10d0c:	ldr	r3, [r4, r3]
   10d10:	mov	r2, r3
   10d14:	ldr	r1, [fp, #-24]	; 0xffffffe8
   10d18:	ldr	r3, [pc, #184]	; 10dd8 <__assert_fail@plt+0x21c>
   10d1c:	ldr	r3, [r4, r3]
   10d20:	mov	r0, r3
   10d24:	bl	14570 <error@@Base+0x1dd0>
   10d28:	ldr	r3, [pc, #168]	; 10dd8 <__assert_fail@plt+0x21c>
   10d2c:	ldr	r3, [r4, r3]
   10d30:	mov	r1, r3
   10d34:	ldr	r3, [pc, #160]	; 10ddc <__assert_fail@plt+0x220>
   10d38:	ldr	r3, [r4, r3]
   10d3c:	mov	r0, r3
   10d40:	bl	13f7c <error@@Base+0x17dc>
   10d44:	ldr	r3, [pc, #144]	; 10ddc <__assert_fail@plt+0x220>
   10d48:	ldr	r3, [r4, r3]
   10d4c:	ldr	r3, [r3]
   10d50:	str	r3, [fp, #-16]
   10d54:	b	10d80 <__assert_fail@plt+0x1c4>
   10d58:	ldr	r3, [fp, #-16]
   10d5c:	ldr	r1, [r3, #8]
   10d60:	mov	r3, #0
   10d64:	mov	r2, #1
   10d68:	ldr	r0, [pc, #112]	; 10de0 <__assert_fail@plt+0x224>
   10d6c:	ldr	r0, [r4, r0]
   10d70:	bl	12940 <error@@Base+0x1a0>
   10d74:	ldr	r3, [fp, #-16]
   10d78:	ldr	r3, [r3, #4]
   10d7c:	str	r3, [fp, #-16]
   10d80:	ldr	r3, [fp, #-16]
   10d84:	cmp	r3, #0
   10d88:	bne	10d58 <__assert_fail@plt+0x19c>
   10d8c:	ldr	r3, [pc, #80]	; 10de4 <__assert_fail@plt+0x228>
   10d90:	ldr	r3, [r4, r3]
   10d94:	mov	r1, r3
   10d98:	ldr	r3, [pc, #56]	; 10dd8 <__assert_fail@plt+0x21c>
   10d9c:	ldr	r3, [r4, r3]
   10da0:	mov	r0, r3
   10da4:	bl	114a8 <__assert_fail@plt+0x8ec>
   10da8:	ldr	r3, [pc, #56]	; 10de8 <__assert_fail@plt+0x22c>
   10dac:	ldr	r3, [r4, r3]
   10db0:	mov	r1, r3
   10db4:	ldr	r3, [pc, #32]	; 10ddc <__assert_fail@plt+0x220>
   10db8:	ldr	r3, [r4, r3]
   10dbc:	mov	r0, r3
   10dc0:	bl	114a8 <__assert_fail@plt+0x8ec>
   10dc4:	nop			; (mov r0, r0)
   10dc8:	sub	sp, fp, #8
   10dcc:	pop	{r4, fp, pc}
   10dd0:	strdeq	r8, [r1], -r4
   10dd4:	strheq	r0, [r0], -r8
   10dd8:	andeq	r0, r0, r4, lsr #1
   10ddc:	strheq	r0, [r0], -ip
   10de0:	ldrdeq	r0, [r0], -ip
   10de4:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   10de8:	andeq	r0, r0, r8, lsr #1
   10dec:	push	{fp, lr}
   10df0:	add	fp, sp, #4
   10df4:	sub	sp, sp, #8
   10df8:	str	r0, [fp, #-8]
   10dfc:	str	r1, [fp, #-12]
   10e00:	ldr	r3, [fp, #-8]
   10e04:	ldr	r2, [r3, #8]
   10e08:	ldr	r3, [fp, #-12]
   10e0c:	ldr	r3, [r3, #8]
   10e10:	mov	r1, r3
   10e14:	mov	r0, r2
   10e18:	bl	11ca4 <__assert_fail@plt+0x10e8>
   10e1c:	mov	r3, r0
   10e20:	mov	r0, r3
   10e24:	sub	sp, fp, #4
   10e28:	pop	{fp, pc}
   10e2c:	push	{fp, lr}
   10e30:	add	fp, sp, #4
   10e34:	sub	sp, sp, #8
   10e38:	str	r0, [fp, #-8]
   10e3c:	str	r1, [fp, #-12]
   10e40:	ldr	r3, [fp, #-8]
   10e44:	ldr	r2, [r3, #12]
   10e48:	ldr	r3, [fp, #-12]
   10e4c:	ldr	r3, [r3, #12]
   10e50:	cmp	r2, r3
   10e54:	beq	10e70 <__assert_fail@plt+0x2b4>
   10e58:	ldr	r3, [fp, #-12]
   10e5c:	ldr	r2, [r3, #12]
   10e60:	ldr	r3, [fp, #-8]
   10e64:	ldr	r3, [r3, #12]
   10e68:	sub	r3, r2, r3
   10e6c:	b	10e80 <__assert_fail@plt+0x2c4>
   10e70:	ldr	r1, [fp, #-12]
   10e74:	ldr	r0, [fp, #-8]
   10e78:	bl	10dec <__assert_fail@plt+0x230>
   10e7c:	mov	r3, r0
   10e80:	mov	r0, r3
   10e84:	sub	sp, fp, #4
   10e88:	pop	{fp, pc}
   10e8c:	push	{r4, fp, lr}
   10e90:	add	fp, sp, #8
   10e94:	sub	sp, sp, #12
   10e98:	ldr	r4, [pc, #248]	; 10f98 <__assert_fail@plt+0x3dc>
   10e9c:	add	r4, pc, r4
   10ea0:	mov	r3, #0
   10ea4:	str	r3, [fp, #-20]	; 0xffffffec
   10ea8:	ldr	r3, [pc, #236]	; 10f9c <__assert_fail@plt+0x3e0>
   10eac:	add	r3, pc, r3
   10eb0:	mov	r0, r3
   10eb4:	bl	10ac0 <puts@plt>
   10eb8:	mov	r3, #0
   10ebc:	str	r3, [fp, #-16]
   10ec0:	b	10f5c <__assert_fail@plt+0x3a0>
   10ec4:	ldr	r3, [pc, #212]	; 10fa0 <__assert_fail@plt+0x3e4>
   10ec8:	ldr	r3, [r4, r3]
   10ecc:	add	r3, r3, #4096	; 0x1000
   10ed0:	ldr	r2, [r3, #3952]	; 0xf70
   10ed4:	ldr	r3, [fp, #-16]
   10ed8:	lsl	r3, r3, #2
   10edc:	add	r3, r2, r3
   10ee0:	ldr	r3, [r3]
   10ee4:	ldr	r1, [r3, #12]
   10ee8:	ldr	r3, [pc, #176]	; 10fa0 <__assert_fail@plt+0x3e4>
   10eec:	ldr	r3, [r4, r3]
   10ef0:	add	r3, r3, #4096	; 0x1000
   10ef4:	ldr	r2, [r3, #3952]	; 0xf70
   10ef8:	ldr	r3, [fp, #-16]
   10efc:	lsl	r3, r3, #2
   10f00:	add	r3, r2, r3
   10f04:	ldr	r3, [r3]
   10f08:	ldr	r3, [r3, #8]
   10f0c:	mov	r2, r3
   10f10:	ldr	r3, [pc, #140]	; 10fa4 <__assert_fail@plt+0x3e8>
   10f14:	add	r3, pc, r3
   10f18:	mov	r0, r3
   10f1c:	bl	10a18 <printf@plt>
   10f20:	ldr	r3, [pc, #120]	; 10fa0 <__assert_fail@plt+0x3e4>
   10f24:	ldr	r3, [r4, r3]
   10f28:	add	r3, r3, #4096	; 0x1000
   10f2c:	ldr	r2, [r3, #3952]	; 0xf70
   10f30:	ldr	r3, [fp, #-16]
   10f34:	lsl	r3, r3, #2
   10f38:	add	r3, r2, r3
   10f3c:	ldr	r3, [r3]
   10f40:	ldr	r3, [r3, #12]
   10f44:	ldr	r2, [fp, #-20]	; 0xffffffec
   10f48:	add	r3, r2, r3
   10f4c:	str	r3, [fp, #-20]	; 0xffffffec
   10f50:	ldr	r3, [fp, #-16]
   10f54:	add	r3, r3, #1
   10f58:	str	r3, [fp, #-16]
   10f5c:	ldr	r3, [pc, #60]	; 10fa0 <__assert_fail@plt+0x3e4>
   10f60:	ldr	r3, [r4, r3]
   10f64:	add	r3, r3, #4096	; 0x1000
   10f68:	ldr	r2, [r3, #3956]	; 0xf74
   10f6c:	ldr	r3, [fp, #-16]
   10f70:	cmp	r2, r3
   10f74:	bgt	10ec4 <__assert_fail@plt+0x308>
   10f78:	ldr	r1, [fp, #-20]	; 0xffffffec
   10f7c:	ldr	r3, [pc, #36]	; 10fa8 <__assert_fail@plt+0x3ec>
   10f80:	add	r3, pc, r3
   10f84:	mov	r0, r3
   10f88:	bl	10a18 <printf@plt>
   10f8c:	nop			; (mov r0, r0)
   10f90:	sub	sp, fp, #8
   10f94:	pop	{r4, fp, pc}
   10f98:	andeq	r8, r1, ip, asr r1
   10f9c:	andeq	r3, r0, r8, lsr #26
   10fa0:	ldrdeq	r0, [r0], -ip
   10fa4:	andeq	r3, r0, ip, asr #25
   10fa8:	andeq	r3, r0, ip, ror #24
   10fac:	push	{r4, r5, fp, lr}
   10fb0:	add	fp, sp, #12
   10fb4:	ldr	r4, [pc, #144]	; 1104c <__assert_fail@plt+0x490>
   10fb8:	add	r4, pc, r4
   10fbc:	ldr	r3, [pc, #140]	; 11050 <__assert_fail@plt+0x494>
   10fc0:	ldr	r3, [r4, r3]
   10fc4:	mov	r0, r3
   10fc8:	bl	11ac8 <__assert_fail@plt+0xf0c>
   10fcc:	ldr	r3, [pc, #124]	; 11050 <__assert_fail@plt+0x494>
   10fd0:	ldr	r3, [r4, r3]
   10fd4:	add	r3, r3, #4096	; 0x1000
   10fd8:	ldr	r0, [r3, #3956]	; 0xf74
   10fdc:	ldr	r3, [pc, #108]	; 11050 <__assert_fail@plt+0x494>
   10fe0:	ldr	r3, [r4, r3]
   10fe4:	add	r3, r3, #4096	; 0x1000
   10fe8:	ldr	r1, [r3, #3952]	; 0xf70
   10fec:	ldr	r3, [pc, #96]	; 11054 <__assert_fail@plt+0x498>
   10ff0:	ldr	r3, [r4, r3]
   10ff4:	mov	r2, r3
   10ff8:	bl	11758 <__assert_fail@plt+0xb9c>
   10ffc:	bl	10e8c <__assert_fail@plt+0x2d0>
   11000:	ldr	r3, [pc, #80]	; 11058 <__assert_fail@plt+0x49c>
   11004:	add	r3, pc, r3
   11008:	mov	r0, r3
   1100c:	bl	10ac0 <puts@plt>
   11010:	ldr	r3, [pc, #56]	; 11050 <__assert_fail@plt+0x494>
   11014:	ldr	r3, [r4, r3]
   11018:	add	r3, r3, #4096	; 0x1000
   1101c:	ldr	r0, [r3, #3956]	; 0xf74
   11020:	ldr	r3, [pc, #40]	; 11050 <__assert_fail@plt+0x494>
   11024:	ldr	r3, [r4, r3]
   11028:	add	r3, r3, #4096	; 0x1000
   1102c:	ldr	r1, [r3, #3952]	; 0xf70
   11030:	ldr	r3, [pc, #36]	; 1105c <__assert_fail@plt+0x4a0>
   11034:	ldr	r3, [r4, r3]
   11038:	mov	r2, r3
   1103c:	bl	11758 <__assert_fail@plt+0xb9c>
   11040:	bl	10e8c <__assert_fail@plt+0x2d0>
   11044:	nop			; (mov r0, r0)
   11048:	pop	{r4, r5, fp, pc}
   1104c:	andeq	r8, r1, r0, asr #32
   11050:	ldrdeq	r0, [r0], -ip
   11054:	andeq	r0, r0, r4, ror #1
   11058:	strdeq	r3, [r0], -r8
   1105c:	andeq	r0, r0, r8, ror #1
   11060:	push	{fp, lr}
   11064:	add	fp, sp, #4
   11068:	sub	sp, sp, #16
   1106c:	str	r0, [fp, #-16]
   11070:	str	r1, [fp, #-20]	; 0xffffffec
   11074:	sub	r0, fp, #16
   11078:	mov	r3, #0
   1107c:	ldr	r2, [pc, #112]	; 110f4 <__assert_fail@plt+0x538>
   11080:	add	r2, pc, r2
   11084:	ldr	r1, [fp, #-20]	; 0xffffffec
   11088:	bl	126d0 <__assert_fail@plt+0x1b14>
   1108c:	ldr	r3, [fp, #-16]
   11090:	cmp	r3, #0
   11094:	bne	110a8 <__assert_fail@plt+0x4ec>
   11098:	ldr	r3, [pc, #88]	; 110f8 <__assert_fail@plt+0x53c>
   1109c:	add	r3, pc, r3
   110a0:	mov	r0, r3
   110a4:	bl	127a0 <error@@Base>
   110a8:	mov	r3, #0
   110ac:	str	r3, [fp, #-8]
   110b0:	b	110dc <__assert_fail@plt+0x520>
   110b4:	ldr	r3, [fp, #-8]
   110b8:	lsl	r3, r3, #2
   110bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   110c0:	add	r3, r2, r3
   110c4:	ldr	r3, [r3]
   110c8:	mov	r0, r3
   110cc:	bl	10cf0 <__assert_fail@plt+0x134>
   110d0:	ldr	r3, [fp, #-8]
   110d4:	add	r3, r3, #1
   110d8:	str	r3, [fp, #-8]
   110dc:	ldr	r3, [fp, #-16]
   110e0:	ldr	r2, [fp, #-8]
   110e4:	cmp	r2, r3
   110e8:	blt	110b4 <__assert_fail@plt+0x4f8>
   110ec:	bl	10fac <__assert_fail@plt+0x3f0>
   110f0:	bl	12790 <__assert_fail@plt+0x1bd4>
   110f4:	andeq	r3, r0, r0, lsl #23
   110f8:	andeq	r3, r0, r8, lsl #23
   110fc:	push	{fp}		; (str fp, [sp, #-4]!)
   11100:	add	fp, sp, #0
   11104:	sub	sp, sp, #12
   11108:	str	r0, [fp, #-8]
   1110c:	ldr	r3, [fp, #-8]
   11110:	mov	r2, #0
   11114:	str	r2, [r3, #4]
   11118:	ldr	r3, [fp, #-8]
   1111c:	ldr	r2, [r3, #4]
   11120:	ldr	r3, [fp, #-8]
   11124:	str	r2, [r3]
   11128:	ldr	r3, [fp, #-8]
   1112c:	mov	r2, #0
   11130:	str	r2, [r3, #8]
   11134:	ldr	r3, [fp, #-8]
   11138:	mov	r2, #0
   1113c:	str	r2, [r3, #12]
   11140:	nop			; (mov r0, r0)
   11144:	add	sp, fp, #0
   11148:	pop	{fp}		; (ldr fp, [sp], #4)
   1114c:	bx	lr
   11150:	push	{fp, lr}
   11154:	add	fp, sp, #4
   11158:	sub	sp, sp, #8
   1115c:	str	r0, [fp, #-8]
   11160:	ldr	r3, [fp, #-8]
   11164:	ldr	r3, [r3, #8]
   11168:	cmp	r3, #0
   1116c:	beq	1118c <__assert_fail@plt+0x5d0>
   11170:	ldr	r3, [fp, #-8]
   11174:	ldr	r3, [r3, #8]
   11178:	mov	r0, r3
   1117c:	bl	10a30 <free@plt>
   11180:	ldr	r3, [fp, #-8]
   11184:	mov	r2, #0
   11188:	str	r2, [r3, #8]
   1118c:	nop			; (mov r0, r0)
   11190:	sub	sp, fp, #4
   11194:	pop	{fp, pc}
   11198:	push	{fp, lr}
   1119c:	add	fp, sp, #4
   111a0:	sub	sp, sp, #16
   111a4:	str	r0, [fp, #-8]
   111a8:	str	r1, [fp, #-12]
   111ac:	str	r2, [fp, #-16]
   111b0:	str	r3, [fp, #-20]	; 0xffffffec
   111b4:	ldr	r3, [fp, #-16]
   111b8:	ldr	r2, [fp, #-12]
   111bc:	str	r2, [r3]
   111c0:	ldr	r3, [fp, #-16]
   111c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   111c8:	str	r2, [r3, #4]
   111cc:	ldr	r3, [fp, #-12]
   111d0:	cmp	r3, #0
   111d4:	beq	111e8 <__assert_fail@plt+0x62c>
   111d8:	ldr	r3, [fp, #-12]
   111dc:	ldr	r2, [fp, #-16]
   111e0:	str	r2, [r3, #4]
   111e4:	b	111f4 <__assert_fail@plt+0x638>
   111e8:	ldr	r3, [fp, #-8]
   111ec:	ldr	r2, [fp, #-16]
   111f0:	str	r2, [r3]
   111f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   111f8:	cmp	r3, #0
   111fc:	beq	11210 <__assert_fail@plt+0x654>
   11200:	ldr	r3, [fp, #-20]	; 0xffffffec
   11204:	ldr	r2, [fp, #-16]
   11208:	str	r2, [r3]
   1120c:	b	1121c <__assert_fail@plt+0x660>
   11210:	ldr	r3, [fp, #-8]
   11214:	ldr	r2, [fp, #-16]
   11218:	str	r2, [r3, #4]
   1121c:	ldr	r0, [fp, #-8]
   11220:	bl	11150 <__assert_fail@plt+0x594>
   11224:	ldr	r3, [fp, #-8]
   11228:	ldr	r3, [r3, #12]
   1122c:	add	r2, r3, #1
   11230:	ldr	r3, [fp, #-8]
   11234:	str	r2, [r3, #12]
   11238:	nop			; (mov r0, r0)
   1123c:	sub	sp, fp, #4
   11240:	pop	{fp, pc}
   11244:	push	{fp, lr}
   11248:	add	fp, sp, #4
   1124c:	sub	sp, sp, #8
   11250:	str	r0, [fp, #-8]
   11254:	str	r1, [fp, #-12]
   11258:	ldr	r3, [fp, #-8]
   1125c:	ldr	r3, [r3]
   11260:	ldr	r2, [fp, #-12]
   11264:	mov	r1, #0
   11268:	ldr	r0, [fp, #-8]
   1126c:	bl	11198 <__assert_fail@plt+0x5dc>
   11270:	nop			; (mov r0, r0)
   11274:	sub	sp, fp, #4
   11278:	pop	{fp, pc}
   1127c:	push	{fp, lr}
   11280:	add	fp, sp, #4
   11284:	sub	sp, sp, #8
   11288:	str	r0, [fp, #-8]
   1128c:	str	r1, [fp, #-12]
   11290:	ldr	r3, [fp, #-8]
   11294:	ldr	r1, [r3, #4]
   11298:	mov	r3, #0
   1129c:	ldr	r2, [fp, #-12]
   112a0:	ldr	r0, [fp, #-8]
   112a4:	bl	11198 <__assert_fail@plt+0x5dc>
   112a8:	nop			; (mov r0, r0)
   112ac:	sub	sp, fp, #4
   112b0:	pop	{fp, pc}
   112b4:	push	{fp, lr}
   112b8:	add	fp, sp, #4
   112bc:	sub	sp, sp, #16
   112c0:	str	r0, [fp, #-8]
   112c4:	str	r1, [fp, #-12]
   112c8:	str	r2, [fp, #-16]
   112cc:	ldr	r3, [fp, #-16]
   112d0:	ldr	r1, [r3]
   112d4:	ldr	r3, [fp, #-16]
   112d8:	ldr	r2, [fp, #-12]
   112dc:	ldr	r0, [fp, #-8]
   112e0:	bl	11198 <__assert_fail@plt+0x5dc>
   112e4:	nop			; (mov r0, r0)
   112e8:	sub	sp, fp, #4
   112ec:	pop	{fp, pc}
   112f0:	push	{fp, lr}
   112f4:	add	fp, sp, #4
   112f8:	sub	sp, sp, #16
   112fc:	str	r0, [fp, #-8]
   11300:	str	r1, [fp, #-12]
   11304:	str	r2, [fp, #-16]
   11308:	ldr	r3, [fp, #-12]
   1130c:	ldr	r3, [r3, #4]
   11310:	ldr	r2, [fp, #-16]
   11314:	ldr	r1, [fp, #-12]
   11318:	ldr	r0, [fp, #-8]
   1131c:	bl	11198 <__assert_fail@plt+0x5dc>
   11320:	nop			; (mov r0, r0)
   11324:	sub	sp, fp, #4
   11328:	pop	{fp, pc}
   1132c:	push	{fp, lr}
   11330:	add	fp, sp, #4
   11334:	sub	sp, sp, #8
   11338:	str	r0, [fp, #-8]
   1133c:	str	r1, [fp, #-12]
   11340:	ldr	r3, [fp, #-12]
   11344:	ldr	r3, [r3]
   11348:	cmp	r3, #0
   1134c:	beq	11368 <__assert_fail@plt+0x7ac>
   11350:	ldr	r3, [fp, #-12]
   11354:	ldr	r3, [r3]
   11358:	ldr	r2, [fp, #-12]
   1135c:	ldr	r2, [r2, #4]
   11360:	str	r2, [r3, #4]
   11364:	b	11378 <__assert_fail@plt+0x7bc>
   11368:	ldr	r3, [fp, #-12]
   1136c:	ldr	r2, [r3, #4]
   11370:	ldr	r3, [fp, #-8]
   11374:	str	r2, [r3]
   11378:	ldr	r3, [fp, #-12]
   1137c:	ldr	r3, [r3, #4]
   11380:	cmp	r3, #0
   11384:	beq	113a0 <__assert_fail@plt+0x7e4>
   11388:	ldr	r3, [fp, #-12]
   1138c:	ldr	r3, [r3, #4]
   11390:	ldr	r2, [fp, #-12]
   11394:	ldr	r2, [r2]
   11398:	str	r2, [r3]
   1139c:	b	113b0 <__assert_fail@plt+0x7f4>
   113a0:	ldr	r3, [fp, #-12]
   113a4:	ldr	r2, [r3]
   113a8:	ldr	r3, [fp, #-8]
   113ac:	str	r2, [r3, #4]
   113b0:	ldr	r3, [fp, #-12]
   113b4:	mov	r2, #0
   113b8:	str	r2, [r3, #4]
   113bc:	ldr	r3, [fp, #-12]
   113c0:	ldr	r2, [r3, #4]
   113c4:	ldr	r3, [fp, #-12]
   113c8:	str	r2, [r3]
   113cc:	ldr	r0, [fp, #-8]
   113d0:	bl	11150 <__assert_fail@plt+0x594>
   113d4:	ldr	r3, [fp, #-8]
   113d8:	ldr	r3, [r3, #12]
   113dc:	sub	r2, r3, #1
   113e0:	ldr	r3, [fp, #-8]
   113e4:	str	r2, [r3, #12]
   113e8:	nop			; (mov r0, r0)
   113ec:	sub	sp, fp, #4
   113f0:	pop	{fp, pc}
   113f4:	push	{fp, lr}
   113f8:	add	fp, sp, #4
   113fc:	sub	sp, sp, #16
   11400:	str	r0, [fp, #-16]
   11404:	mov	r3, #0
   11408:	str	r3, [fp, #-12]
   1140c:	ldr	r3, [fp, #-16]
   11410:	ldr	r3, [r3, #8]
   11414:	cmp	r3, #0
   11418:	bne	1149c <__assert_fail@plt+0x8e0>
   1141c:	ldr	r3, [fp, #-16]
   11420:	ldr	r3, [r3, #12]
   11424:	cmp	r3, #0
   11428:	beq	1149c <__assert_fail@plt+0x8e0>
   1142c:	ldr	r3, [fp, #-16]
   11430:	ldr	r3, [r3, #12]
   11434:	mov	r1, #4
   11438:	mov	r0, r3
   1143c:	bl	11c4c <__assert_fail@plt+0x1090>
   11440:	mov	r2, r0
   11444:	ldr	r3, [fp, #-16]
   11448:	str	r2, [r3, #8]
   1144c:	ldr	r3, [fp, #-16]
   11450:	ldr	r3, [r3]
   11454:	str	r3, [fp, #-8]
   11458:	b	1148c <__assert_fail@plt+0x8d0>
   1145c:	ldr	r3, [fp, #-16]
   11460:	ldr	r2, [r3, #8]
   11464:	ldr	r3, [fp, #-12]
   11468:	add	r1, r3, #1
   1146c:	str	r1, [fp, #-12]
   11470:	lsl	r3, r3, #2
   11474:	add	r3, r2, r3
   11478:	ldr	r2, [fp, #-8]
   1147c:	str	r2, [r3]
   11480:	ldr	r3, [fp, #-8]
   11484:	ldr	r3, [r3, #4]
   11488:	str	r3, [fp, #-8]
   1148c:	ldr	r3, [fp, #-8]
   11490:	cmp	r3, #0
   11494:	bne	1145c <__assert_fail@plt+0x8a0>
   11498:	b	114a0 <__assert_fail@plt+0x8e4>
   1149c:	nop			; (mov r0, r0)
   114a0:	sub	sp, fp, #4
   114a4:	pop	{fp, pc}
   114a8:	push	{fp, lr}
   114ac:	add	fp, sp, #4
   114b0:	sub	sp, sp, #16
   114b4:	str	r0, [fp, #-16]
   114b8:	str	r1, [fp, #-20]	; 0xffffffec
   114bc:	b	114e4 <__assert_fail@plt+0x928>
   114c0:	ldr	r3, [fp, #-16]
   114c4:	ldr	r3, [r3]
   114c8:	str	r3, [fp, #-8]
   114cc:	ldr	r1, [fp, #-8]
   114d0:	ldr	r0, [fp, #-16]
   114d4:	bl	1132c <__assert_fail@plt+0x770>
   114d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   114dc:	ldr	r0, [fp, #-8]
   114e0:	blx	r3
   114e4:	ldr	r3, [fp, #-16]
   114e8:	ldr	r3, [r3]
   114ec:	cmp	r3, #0
   114f0:	bne	114c0 <__assert_fail@plt+0x904>
   114f4:	nop			; (mov r0, r0)
   114f8:	sub	sp, fp, #4
   114fc:	pop	{fp, pc}
   11500:	push	{fp, lr}
   11504:	add	fp, sp, #4
   11508:	sub	sp, sp, #24
   1150c:	str	r0, [fp, #-24]	; 0xffffffe8
   11510:	str	r1, [fp, #-28]	; 0xffffffe4
   11514:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11518:	str	r3, [fp, #-8]
   1151c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11520:	str	r3, [fp, #-12]
   11524:	ldr	r3, [pc, #516]	; 11730 <__assert_fail@plt+0xb74>
   11528:	add	r3, pc, r3
   1152c:	ldr	r2, [r3]
   11530:	ldr	r3, [fp, #-8]
   11534:	lsl	r3, r3, #2
   11538:	add	r3, r2, r3
   1153c:	ldr	r3, [r3]
   11540:	str	r3, [fp, #-16]
   11544:	b	116a4 <__assert_fail@plt+0xae8>
   11548:	ldr	r3, [fp, #-12]
   1154c:	sub	r3, r3, #1
   11550:	str	r3, [fp, #-12]
   11554:	ldr	r2, [fp, #-8]
   11558:	ldr	r3, [fp, #-12]
   1155c:	cmp	r2, r3
   11560:	bge	115a4 <__assert_fail@plt+0x9e8>
   11564:	ldr	r3, [pc, #456]	; 11734 <__assert_fail@plt+0xb78>
   11568:	add	r3, pc, r3
   1156c:	ldr	r3, [r3]
   11570:	ldr	r2, [pc, #448]	; 11738 <__assert_fail@plt+0xb7c>
   11574:	add	r2, pc, r2
   11578:	ldr	r1, [r2]
   1157c:	ldr	r2, [fp, #-12]
   11580:	lsl	r2, r2, #2
   11584:	add	r2, r1, r2
   11588:	ldr	r2, [r2]
   1158c:	mov	r1, r2
   11590:	ldr	r0, [fp, #-16]
   11594:	blx	r3
   11598:	mov	r3, r0
   1159c:	cmp	r3, #0
   115a0:	blt	11548 <__assert_fail@plt+0x98c>
   115a4:	ldr	r2, [fp, #-8]
   115a8:	ldr	r3, [fp, #-12]
   115ac:	cmp	r2, r3
   115b0:	beq	11604 <__assert_fail@plt+0xa48>
   115b4:	ldr	r3, [pc, #384]	; 1173c <__assert_fail@plt+0xb80>
   115b8:	add	r3, pc, r3
   115bc:	ldr	r2, [r3]
   115c0:	ldr	r3, [fp, #-8]
   115c4:	add	r1, r3, #1
   115c8:	str	r1, [fp, #-8]
   115cc:	lsl	r3, r3, #2
   115d0:	add	r3, r2, r3
   115d4:	ldr	r2, [pc, #356]	; 11740 <__assert_fail@plt+0xb84>
   115d8:	add	r2, pc, r2
   115dc:	ldr	r1, [r2]
   115e0:	ldr	r2, [fp, #-12]
   115e4:	lsl	r2, r2, #2
   115e8:	add	r2, r1, r2
   115ec:	ldr	r2, [r2]
   115f0:	str	r2, [r3]
   115f4:	b	11604 <__assert_fail@plt+0xa48>
   115f8:	ldr	r3, [fp, #-8]
   115fc:	add	r3, r3, #1
   11600:	str	r3, [fp, #-8]
   11604:	ldr	r2, [fp, #-8]
   11608:	ldr	r3, [fp, #-12]
   1160c:	cmp	r2, r3
   11610:	bge	11654 <__assert_fail@plt+0xa98>
   11614:	ldr	r3, [pc, #296]	; 11744 <__assert_fail@plt+0xb88>
   11618:	add	r3, pc, r3
   1161c:	ldr	r3, [r3]
   11620:	ldr	r2, [pc, #288]	; 11748 <__assert_fail@plt+0xb8c>
   11624:	add	r2, pc, r2
   11628:	ldr	r1, [r2]
   1162c:	ldr	r2, [fp, #-8]
   11630:	lsl	r2, r2, #2
   11634:	add	r2, r1, r2
   11638:	ldr	r2, [r2]
   1163c:	mov	r1, r2
   11640:	ldr	r0, [fp, #-16]
   11644:	blx	r3
   11648:	mov	r3, r0
   1164c:	cmp	r3, #0
   11650:	bgt	115f8 <__assert_fail@plt+0xa3c>
   11654:	ldr	r2, [fp, #-8]
   11658:	ldr	r3, [fp, #-12]
   1165c:	cmp	r2, r3
   11660:	beq	116a4 <__assert_fail@plt+0xae8>
   11664:	ldr	r3, [pc, #224]	; 1174c <__assert_fail@plt+0xb90>
   11668:	add	r3, pc, r3
   1166c:	ldr	r2, [r3]
   11670:	ldr	r3, [fp, #-12]
   11674:	sub	r1, r3, #1
   11678:	str	r1, [fp, #-12]
   1167c:	lsl	r3, r3, #2
   11680:	add	r3, r2, r3
   11684:	ldr	r2, [pc, #196]	; 11750 <__assert_fail@plt+0xb94>
   11688:	add	r2, pc, r2
   1168c:	ldr	r1, [r2]
   11690:	ldr	r2, [fp, #-8]
   11694:	lsl	r2, r2, #2
   11698:	add	r2, r1, r2
   1169c:	ldr	r2, [r2]
   116a0:	str	r2, [r3]
   116a4:	ldr	r2, [fp, #-8]
   116a8:	ldr	r3, [fp, #-12]
   116ac:	cmp	r2, r3
   116b0:	blt	11554 <__assert_fail@plt+0x998>
   116b4:	ldr	r3, [pc, #152]	; 11754 <__assert_fail@plt+0xb98>
   116b8:	add	r3, pc, r3
   116bc:	ldr	r2, [r3]
   116c0:	ldr	r3, [fp, #-12]
   116c4:	lsl	r3, r3, #2
   116c8:	add	r3, r2, r3
   116cc:	ldr	r2, [fp, #-16]
   116d0:	str	r2, [r3]
   116d4:	ldr	r3, [fp, #-12]
   116d8:	sub	r3, r3, #1
   116dc:	str	r3, [fp, #-12]
   116e0:	ldr	r2, [fp, #-12]
   116e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   116e8:	cmp	r2, r3
   116ec:	ble	116fc <__assert_fail@plt+0xb40>
   116f0:	ldr	r1, [fp, #-12]
   116f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   116f8:	bl	11500 <__assert_fail@plt+0x944>
   116fc:	ldr	r3, [fp, #-8]
   11700:	add	r3, r3, #1
   11704:	str	r3, [fp, #-8]
   11708:	ldr	r2, [fp, #-8]
   1170c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11710:	cmp	r2, r3
   11714:	bge	11724 <__assert_fail@plt+0xb68>
   11718:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1171c:	ldr	r0, [fp, #-8]
   11720:	bl	11500 <__assert_fail@plt+0x944>
   11724:	nop			; (mov r0, r0)
   11728:	sub	sp, fp, #4
   1172c:	pop	{fp, pc}
   11730:	ldrdeq	r7, [r1], -ip
   11734:	andeq	r7, r1, r0, lsr #23
   11738:	muleq	r1, r0, fp
   1173c:	andeq	r7, r1, ip, asr #22
   11740:	andeq	r7, r1, ip, lsr #22
   11744:	strdeq	r7, [r1], -r0
   11748:	andeq	r7, r1, r0, ror #21
   1174c:	muleq	r1, ip, sl
   11750:	andeq	r7, r1, ip, ror sl
   11754:	andeq	r7, r1, ip, asr #20
   11758:	push	{fp, lr}
   1175c:	add	fp, sp, #4
   11760:	sub	sp, sp, #16
   11764:	str	r0, [fp, #-8]
   11768:	str	r1, [fp, #-12]
   1176c:	str	r2, [fp, #-16]
   11770:	ldr	r3, [fp, #-8]
   11774:	cmp	r3, #1
   11778:	ble	117b4 <__assert_fail@plt+0xbf8>
   1177c:	ldr	r3, [pc, #60]	; 117c0 <__assert_fail@plt+0xc04>
   11780:	add	r3, pc, r3
   11784:	ldr	r2, [fp, #-12]
   11788:	str	r2, [r3]
   1178c:	ldr	r3, [pc, #48]	; 117c4 <__assert_fail@plt+0xc08>
   11790:	add	r3, pc, r3
   11794:	ldr	r2, [fp, #-16]
   11798:	str	r2, [r3]
   1179c:	ldr	r3, [fp, #-8]
   117a0:	sub	r3, r3, #1
   117a4:	mov	r1, r3
   117a8:	mov	r0, #0
   117ac:	bl	11500 <__assert_fail@plt+0x944>
   117b0:	b	117b8 <__assert_fail@plt+0xbfc>
   117b4:	nop			; (mov r0, r0)
   117b8:	sub	sp, fp, #4
   117bc:	pop	{fp, pc}
   117c0:	andeq	r7, r1, r4, lsl #19
   117c4:	andeq	r7, r1, r8, ror r9
   117c8:	push	{fp, lr}
   117cc:	add	fp, sp, #4
   117d0:	sub	sp, sp, #16
   117d4:	str	r0, [fp, #-16]
   117d8:	mov	r3, #0
   117dc:	strh	r3, [fp, #-6]
   117e0:	b	11810 <__assert_fail@plt+0xc54>
   117e4:	ldrsh	r3, [fp, #-6]
   117e8:	lsl	r3, r3, #4
   117ec:	ldr	r2, [fp, #-16]
   117f0:	add	r3, r2, r3
   117f4:	mov	r0, r3
   117f8:	bl	110fc <__assert_fail@plt+0x540>
   117fc:	ldrsh	r3, [fp, #-6]
   11800:	uxth	r3, r3
   11804:	add	r3, r3, #1
   11808:	uxth	r3, r3
   1180c:	strh	r3, [fp, #-6]
   11810:	ldrsh	r3, [fp, #-6]
   11814:	ldr	r2, [pc, #56]	; 11854 <__assert_fail@plt+0xc98>
   11818:	cmp	r3, r2
   1181c:	ble	117e4 <__assert_fail@plt+0xc28>
   11820:	ldr	r3, [fp, #-16]
   11824:	add	r3, r3, #4096	; 0x1000
   11828:	mov	r2, r3
   1182c:	mov	r3, #0
   11830:	str	r3, [r2, #3952]	; 0xf70
   11834:	ldr	r3, [fp, #-16]
   11838:	add	r3, r3, #4096	; 0x1000
   1183c:	mov	r2, r3
   11840:	mov	r3, #0
   11844:	str	r3, [r2, #3956]	; 0xf74
   11848:	nop			; (mov r0, r0)
   1184c:	sub	sp, fp, #4
   11850:	pop	{fp, pc}
   11854:	strdeq	r0, [r0], -r6
   11858:	push	{fp}		; (str fp, [sp, #-4]!)
   1185c:	add	fp, sp, #0
   11860:	sub	sp, sp, #28
   11864:	str	r0, [fp, #-24]	; 0xffffffe8
   11868:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1186c:	str	r3, [fp, #-16]
   11870:	mov	r3, #0
   11874:	str	r3, [fp, #-12]
   11878:	mov	r3, #0
   1187c:	str	r3, [fp, #-8]
   11880:	b	118b0 <__assert_fail@plt+0xcf4>
   11884:	ldr	r3, [fp, #-8]
   11888:	ldr	r2, [fp, #-16]
   1188c:	add	r3, r2, r3
   11890:	ldrb	r3, [r3]
   11894:	mov	r2, r3
   11898:	ldr	r3, [fp, #-12]
   1189c:	add	r3, r3, r2
   118a0:	str	r3, [fp, #-12]
   118a4:	ldr	r3, [fp, #-8]
   118a8:	add	r3, r3, #1
   118ac:	str	r3, [fp, #-8]
   118b0:	ldr	r3, [fp, #-8]
   118b4:	ldr	r2, [fp, #-16]
   118b8:	add	r3, r2, r3
   118bc:	ldrb	r3, [r3]
   118c0:	cmp	r3, #0
   118c4:	bne	11884 <__assert_fail@plt+0xcc8>
   118c8:	ldr	r2, [fp, #-12]
   118cc:	ldr	r3, [pc, #60]	; 11910 <__assert_fail@plt+0xd54>
   118d0:	smull	r1, r3, r3, r2
   118d4:	add	r3, r3, r2
   118d8:	asr	r1, r3, #8
   118dc:	asr	r3, r2, #31
   118e0:	sub	r1, r1, r3
   118e4:	mov	r3, r1
   118e8:	lsl	r3, r3, #6
   118ec:	sub	r3, r3, r1
   118f0:	lsl	r3, r3, #3
   118f4:	sub	r3, r3, r1
   118f8:	sub	r1, r2, r3
   118fc:	sxth	r3, r1
   11900:	mov	r0, r3
   11904:	add	sp, fp, #0
   11908:	pop	{fp}		; (ldr fp, [sp], #4)
   1190c:	bx	lr
   11910:	subhi	r4, sl, #1552	; 0x610
   11914:	push	{fp, lr}
   11918:	add	fp, sp, #4
   1191c:	sub	sp, sp, #16
   11920:	str	r0, [fp, #-16]
   11924:	str	r1, [fp, #-20]	; 0xffffffec
   11928:	ldr	r0, [fp, #-20]	; 0xffffffec
   1192c:	bl	11858 <__assert_fail@plt+0xc9c>
   11930:	mov	r3, r0
   11934:	mov	r2, r3
   11938:	ldr	r3, [fp, #-16]
   1193c:	ldr	r3, [r3, r2, lsl #4]
   11940:	str	r3, [fp, #-8]
   11944:	b	11954 <__assert_fail@plt+0xd98>
   11948:	ldr	r3, [fp, #-8]
   1194c:	ldr	r3, [r3, #4]
   11950:	str	r3, [fp, #-8]
   11954:	ldr	r3, [fp, #-8]
   11958:	cmp	r3, #0
   1195c:	beq	11980 <__assert_fail@plt+0xdc4>
   11960:	ldr	r3, [fp, #-8]
   11964:	ldr	r3, [r3, #8]
   11968:	mov	r1, r3
   1196c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11970:	bl	10a0c <strcmp@plt>
   11974:	mov	r3, r0
   11978:	cmp	r3, #0
   1197c:	bne	11948 <__assert_fail@plt+0xd8c>
   11980:	ldr	r3, [fp, #-8]
   11984:	mov	r0, r3
   11988:	sub	sp, fp, #4
   1198c:	pop	{fp, pc}
   11990:	push	{fp, lr}
   11994:	add	fp, sp, #4
   11998:	sub	sp, sp, #8
   1199c:	str	r0, [fp, #-8]
   119a0:	ldr	r3, [fp, #-8]
   119a4:	add	r3, r3, #4096	; 0x1000
   119a8:	ldr	r3, [r3, #3952]	; 0xf70
   119ac:	cmp	r3, #0
   119b0:	beq	119dc <__assert_fail@plt+0xe20>
   119b4:	ldr	r3, [fp, #-8]
   119b8:	add	r3, r3, #4096	; 0x1000
   119bc:	ldr	r3, [r3, #3952]	; 0xf70
   119c0:	mov	r0, r3
   119c4:	bl	10a30 <free@plt>
   119c8:	ldr	r3, [fp, #-8]
   119cc:	add	r3, r3, #4096	; 0x1000
   119d0:	mov	r2, r3
   119d4:	mov	r3, #0
   119d8:	str	r3, [r2, #3952]	; 0xf70
   119dc:	nop			; (mov r0, r0)
   119e0:	sub	sp, fp, #4
   119e4:	pop	{fp, pc}
   119e8:	push	{fp, lr}
   119ec:	add	fp, sp, #4
   119f0:	sub	sp, sp, #8
   119f4:	str	r0, [fp, #-8]
   119f8:	str	r1, [fp, #-12]
   119fc:	ldr	r3, [fp, #-12]
   11a00:	ldr	r3, [r3, #8]
   11a04:	mov	r0, r3
   11a08:	bl	11858 <__assert_fail@plt+0xc9c>
   11a0c:	mov	r3, r0
   11a10:	lsl	r3, r3, #4
   11a14:	ldr	r2, [fp, #-8]
   11a18:	add	r3, r2, r3
   11a1c:	ldr	r1, [fp, #-12]
   11a20:	mov	r0, r3
   11a24:	bl	11244 <__assert_fail@plt+0x688>
   11a28:	ldr	r0, [fp, #-8]
   11a2c:	bl	11990 <__assert_fail@plt+0xdd4>
   11a30:	ldr	r3, [fp, #-8]
   11a34:	add	r3, r3, #4096	; 0x1000
   11a38:	ldr	r3, [r3, #3956]	; 0xf74
   11a3c:	add	r3, r3, #1
   11a40:	ldr	r2, [fp, #-8]
   11a44:	add	r2, r2, #4096	; 0x1000
   11a48:	str	r3, [r2, #3956]	; 0xf74
   11a4c:	nop			; (mov r0, r0)
   11a50:	sub	sp, fp, #4
   11a54:	pop	{fp, pc}
   11a58:	push	{fp, lr}
   11a5c:	add	fp, sp, #4
   11a60:	sub	sp, sp, #8
   11a64:	str	r0, [fp, #-8]
   11a68:	str	r1, [fp, #-12]
   11a6c:	ldr	r3, [fp, #-12]
   11a70:	ldr	r3, [r3, #8]
   11a74:	mov	r0, r3
   11a78:	bl	11858 <__assert_fail@plt+0xc9c>
   11a7c:	mov	r3, r0
   11a80:	lsl	r3, r3, #4
   11a84:	ldr	r2, [fp, #-8]
   11a88:	add	r3, r2, r3
   11a8c:	ldr	r1, [fp, #-12]
   11a90:	mov	r0, r3
   11a94:	bl	1132c <__assert_fail@plt+0x770>
   11a98:	ldr	r0, [fp, #-8]
   11a9c:	bl	11990 <__assert_fail@plt+0xdd4>
   11aa0:	ldr	r3, [fp, #-8]
   11aa4:	add	r3, r3, #4096	; 0x1000
   11aa8:	ldr	r3, [r3, #3956]	; 0xf74
   11aac:	sub	r3, r3, #1
   11ab0:	ldr	r2, [fp, #-8]
   11ab4:	add	r2, r2, #4096	; 0x1000
   11ab8:	str	r3, [r2, #3956]	; 0xf74
   11abc:	nop			; (mov r0, r0)
   11ac0:	sub	sp, fp, #4
   11ac4:	pop	{fp, pc}
   11ac8:	push	{fp, lr}
   11acc:	add	fp, sp, #4
   11ad0:	sub	sp, sp, #24
   11ad4:	str	r0, [fp, #-24]	; 0xffffffe8
   11ad8:	mov	r3, #0
   11adc:	str	r3, [fp, #-16]
   11ae0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ae4:	add	r3, r3, #4096	; 0x1000
   11ae8:	ldr	r3, [r3, #3952]	; 0xf70
   11aec:	cmp	r3, #0
   11af0:	bne	11bb0 <__assert_fail@plt+0xff4>
   11af4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11af8:	add	r3, r3, #4096	; 0x1000
   11afc:	ldr	r3, [r3, #3956]	; 0xf74
   11b00:	cmp	r3, #0
   11b04:	beq	11bb0 <__assert_fail@plt+0xff4>
   11b08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b0c:	add	r3, r3, #4096	; 0x1000
   11b10:	ldr	r3, [r3, #3956]	; 0xf74
   11b14:	mov	r1, #4
   11b18:	mov	r0, r3
   11b1c:	bl	11c4c <__assert_fail@plt+0x1090>
   11b20:	mov	r2, r0
   11b24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b28:	add	r3, r3, #4096	; 0x1000
   11b2c:	str	r2, [r3, #3952]	; 0xf70
   11b30:	mov	r3, #0
   11b34:	str	r3, [fp, #-12]
   11b38:	b	11b9c <__assert_fail@plt+0xfe0>
   11b3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b40:	ldr	r2, [fp, #-12]
   11b44:	ldr	r3, [r3, r2, lsl #4]
   11b48:	str	r3, [fp, #-8]
   11b4c:	b	11b84 <__assert_fail@plt+0xfc8>
   11b50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b54:	add	r3, r3, #4096	; 0x1000
   11b58:	ldr	r2, [r3, #3952]	; 0xf70
   11b5c:	ldr	r3, [fp, #-16]
   11b60:	add	r1, r3, #1
   11b64:	str	r1, [fp, #-16]
   11b68:	lsl	r3, r3, #2
   11b6c:	add	r3, r2, r3
   11b70:	ldr	r2, [fp, #-8]
   11b74:	str	r2, [r3]
   11b78:	ldr	r3, [fp, #-8]
   11b7c:	ldr	r3, [r3, #4]
   11b80:	str	r3, [fp, #-8]
   11b84:	ldr	r3, [fp, #-8]
   11b88:	cmp	r3, #0
   11b8c:	bne	11b50 <__assert_fail@plt+0xf94>
   11b90:	ldr	r3, [fp, #-12]
   11b94:	add	r3, r3, #1
   11b98:	str	r3, [fp, #-12]
   11b9c:	ldr	r3, [fp, #-12]
   11ba0:	ldr	r2, [pc, #20]	; 11bbc <__assert_fail@plt+0x1000>
   11ba4:	cmp	r3, r2
   11ba8:	ble	11b3c <__assert_fail@plt+0xf80>
   11bac:	b	11bb4 <__assert_fail@plt+0xff8>
   11bb0:	nop			; (mov r0, r0)
   11bb4:	sub	sp, fp, #4
   11bb8:	pop	{fp, pc}
   11bbc:	strdeq	r0, [r0], -r6
   11bc0:	push	{fp, lr}
   11bc4:	add	fp, sp, #4
   11bc8:	sub	sp, sp, #16
   11bcc:	str	r0, [fp, #-16]
   11bd0:	str	r1, [fp, #-20]	; 0xffffffec
   11bd4:	mov	r3, #0
   11bd8:	strh	r3, [fp, #-6]
   11bdc:	b	11c10 <__assert_fail@plt+0x1054>
   11be0:	ldrsh	r3, [fp, #-6]
   11be4:	lsl	r3, r3, #4
   11be8:	ldr	r2, [fp, #-16]
   11bec:	add	r3, r2, r3
   11bf0:	ldr	r1, [fp, #-20]	; 0xffffffec
   11bf4:	mov	r0, r3
   11bf8:	bl	114a8 <__assert_fail@plt+0x8ec>
   11bfc:	ldrsh	r3, [fp, #-6]
   11c00:	uxth	r3, r3
   11c04:	add	r3, r3, #1
   11c08:	uxth	r3, r3
   11c0c:	strh	r3, [fp, #-6]
   11c10:	ldrsh	r3, [fp, #-6]
   11c14:	ldr	r2, [pc, #44]	; 11c48 <__assert_fail@plt+0x108c>
   11c18:	cmp	r3, r2
   11c1c:	ble	11be0 <__assert_fail@plt+0x1024>
   11c20:	ldr	r0, [fp, #-16]
   11c24:	bl	11990 <__assert_fail@plt+0xdd4>
   11c28:	ldr	r3, [fp, #-16]
   11c2c:	add	r3, r3, #4096	; 0x1000
   11c30:	mov	r2, r3
   11c34:	mov	r3, #0
   11c38:	str	r3, [r2, #3956]	; 0xf74
   11c3c:	nop			; (mov r0, r0)
   11c40:	sub	sp, fp, #4
   11c44:	pop	{fp, pc}
   11c48:	strdeq	r0, [r0], -r6
   11c4c:	push	{fp, lr}
   11c50:	add	fp, sp, #4
   11c54:	sub	sp, sp, #16
   11c58:	str	r0, [fp, #-16]
   11c5c:	str	r1, [fp, #-20]	; 0xffffffec
   11c60:	ldr	r1, [fp, #-20]	; 0xffffffec
   11c64:	ldr	r0, [fp, #-16]
   11c68:	bl	10a00 <calloc@plt>
   11c6c:	mov	r3, r0
   11c70:	str	r3, [fp, #-8]
   11c74:	ldr	r3, [fp, #-8]
   11c78:	cmp	r3, #0
   11c7c:	bne	11c90 <__assert_fail@plt+0x10d4>
   11c80:	ldr	r3, [pc, #24]	; 11ca0 <__assert_fail@plt+0x10e4>
   11c84:	add	r3, pc, r3
   11c88:	mov	r0, r3
   11c8c:	bl	127a0 <error@@Base>
   11c90:	ldr	r3, [fp, #-8]
   11c94:	mov	r0, r3
   11c98:	sub	sp, fp, #4
   11c9c:	pop	{fp, pc}
   11ca0:			; <UNDEFINED> instruction: 0x00002fb8
   11ca4:	push	{fp}		; (str fp, [sp, #-4]!)
   11ca8:	add	fp, sp, #0
   11cac:	sub	sp, sp, #20
   11cb0:	str	r0, [fp, #-16]
   11cb4:	str	r1, [fp, #-20]	; 0xffffffec
   11cb8:	mov	r3, #0
   11cbc:	str	r3, [fp, #-8]
   11cc0:	b	11cd0 <__assert_fail@plt+0x1114>
   11cc4:	ldr	r3, [fp, #-8]
   11cc8:	add	r3, r3, #1
   11ccc:	str	r3, [fp, #-8]
   11cd0:	ldr	r3, [fp, #-8]
   11cd4:	ldr	r2, [fp, #-16]
   11cd8:	add	r3, r2, r3
   11cdc:	ldrb	r3, [r3]
   11ce0:	cmp	r3, #0
   11ce4:	beq	11d10 <__assert_fail@plt+0x1154>
   11ce8:	ldr	r3, [fp, #-8]
   11cec:	ldr	r2, [fp, #-16]
   11cf0:	add	r3, r2, r3
   11cf4:	ldrb	r2, [r3]
   11cf8:	ldr	r3, [fp, #-8]
   11cfc:	ldr	r1, [fp, #-20]	; 0xffffffec
   11d00:	add	r3, r1, r3
   11d04:	ldrb	r3, [r3]
   11d08:	cmp	r2, r3
   11d0c:	beq	11cc4 <__assert_fail@plt+0x1108>
   11d10:	ldr	r3, [fp, #-8]
   11d14:	ldr	r2, [fp, #-16]
   11d18:	add	r3, r2, r3
   11d1c:	ldrb	r3, [r3]
   11d20:	cmp	r3, #0
   11d24:	bne	11d40 <__assert_fail@plt+0x1184>
   11d28:	ldr	r3, [fp, #-8]
   11d2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11d30:	add	r3, r2, r3
   11d34:	ldrb	r3, [r3]
   11d38:	cmp	r3, #0
   11d3c:	beq	11d78 <__assert_fail@plt+0x11bc>
   11d40:	ldr	r3, [fp, #-8]
   11d44:	ldr	r2, [fp, #-16]
   11d48:	add	r3, r2, r3
   11d4c:	ldrb	r2, [r3]
   11d50:	ldr	r3, [fp, #-8]
   11d54:	ldr	r1, [fp, #-20]	; 0xffffffec
   11d58:	add	r3, r1, r3
   11d5c:	ldrb	r3, [r3]
   11d60:	cmp	r2, r3
   11d64:	bcs	11d70 <__assert_fail@plt+0x11b4>
   11d68:	mvn	r3, #0
   11d6c:	b	11d7c <__assert_fail@plt+0x11c0>
   11d70:	mov	r3, #1
   11d74:	b	11d7c <__assert_fail@plt+0x11c0>
   11d78:	mov	r3, #0
   11d7c:	mov	r0, r3
   11d80:	add	sp, fp, #0
   11d84:	pop	{fp}		; (ldr fp, [sp], #4)
   11d88:	bx	lr
   11d8c:	push	{fp, lr}
   11d90:	add	fp, sp, #4
   11d94:	sub	sp, sp, #16
   11d98:	str	r0, [fp, #-16]
   11d9c:	str	r1, [fp, #-20]	; 0xffffffec
   11da0:	ldr	r3, [pc, #164]	; 11e4c <__assert_fail@plt+0x1290>
   11da4:	add	r3, pc, r3
   11da8:	ldr	r2, [fp, #-16]
   11dac:	cmp	r2, #0
   11db0:	bne	11de4 <__assert_fail@plt+0x1228>
   11db4:	ldr	r2, [fp, #-20]	; 0xffffffec
   11db8:	ldrb	r2, [r2]
   11dbc:	cmp	r2, #114	; 0x72
   11dc0:	bne	11dd4 <__assert_fail@plt+0x1218>
   11dc4:	ldr	r2, [pc, #132]	; 11e50 <__assert_fail@plt+0x1294>
   11dc8:	ldr	r3, [r3, r2]
   11dcc:	ldr	r3, [r3]
   11dd0:	b	11e40 <__assert_fail@plt+0x1284>
   11dd4:	ldr	r2, [pc, #120]	; 11e54 <__assert_fail@plt+0x1298>
   11dd8:	ldr	r3, [r3, r2]
   11ddc:	ldr	r3, [r3]
   11de0:	b	11e40 <__assert_fail@plt+0x1284>
   11de4:	ldr	r1, [fp, #-20]	; 0xffffffec
   11de8:	ldr	r0, [fp, #-16]
   11dec:	bl	10a24 <fopen@plt>
   11df0:	str	r0, [fp, #-8]
   11df4:	ldr	r3, [fp, #-8]
   11df8:	cmp	r3, #0
   11dfc:	beq	11e08 <__assert_fail@plt+0x124c>
   11e00:	ldr	r3, [fp, #-8]
   11e04:	b	11e40 <__assert_fail@plt+0x1284>
   11e08:	ldr	r3, [fp, #-20]	; 0xffffffec
   11e0c:	ldrb	r3, [r3]
   11e10:	cmp	r3, #119	; 0x77
   11e14:	bne	11e2c <__assert_fail@plt+0x1270>
   11e18:	ldr	r1, [fp, #-16]
   11e1c:	ldr	r3, [pc, #52]	; 11e58 <__assert_fail@plt+0x129c>
   11e20:	add	r3, pc, r3
   11e24:	mov	r0, r3
   11e28:	bl	12808 <error@@Base+0x68>
   11e2c:	ldr	r1, [fp, #-16]
   11e30:	ldr	r3, [pc, #36]	; 11e5c <__assert_fail@plt+0x12a0>
   11e34:	add	r3, pc, r3
   11e38:	mov	r0, r3
   11e3c:	bl	12808 <error@@Base+0x68>
   11e40:	mov	r0, r3
   11e44:	sub	sp, fp, #4
   11e48:	pop	{fp, pc}
   11e4c:	andeq	r7, r1, r4, asr r2
   11e50:	ldrdeq	r0, [r0], -r4
   11e54:	ldrdeq	r0, [r0], -r8
   11e58:	andeq	r2, r0, r8, lsr lr
   11e5c:	andeq	r2, r0, ip, lsr lr
   11e60:	push	{fp, lr}
   11e64:	add	fp, sp, #4
   11e68:	sub	sp, sp, #8
   11e6c:	str	r0, [fp, #-8]
   11e70:	ldr	r3, [pc, #68]	; 11ebc <__assert_fail@plt+0x1300>
   11e74:	add	r3, pc, r3
   11e78:	ldr	r2, [pc, #64]	; 11ec0 <__assert_fail@plt+0x1304>
   11e7c:	ldr	r2, [r3, r2]
   11e80:	ldr	r2, [r2]
   11e84:	ldr	r1, [fp, #-8]
   11e88:	cmp	r1, r2
   11e8c:	beq	11eb0 <__assert_fail@plt+0x12f4>
   11e90:	ldr	r2, [pc, #44]	; 11ec4 <__assert_fail@plt+0x1308>
   11e94:	ldr	r3, [r3, r2]
   11e98:	ldr	r3, [r3]
   11e9c:	ldr	r2, [fp, #-8]
   11ea0:	cmp	r2, r3
   11ea4:	beq	11eb0 <__assert_fail@plt+0x12f4>
   11ea8:	ldr	r0, [fp, #-8]
   11eac:	bl	10b44 <fclose@plt>
   11eb0:	nop			; (mov r0, r0)
   11eb4:	sub	sp, fp, #4
   11eb8:	pop	{fp, pc}
   11ebc:	andeq	r7, r1, r4, lsl #3
   11ec0:	ldrdeq	r0, [r0], -r4
   11ec4:	ldrdeq	r0, [r0], -r8
   11ec8:	push	{fp, lr}
   11ecc:	add	fp, sp, #4
   11ed0:	sub	sp, sp, #96	; 0x60
   11ed4:	str	r0, [fp, #-96]	; 0xffffffa0
   11ed8:	sub	r3, fp, #92	; 0x5c
   11edc:	mov	r1, r3
   11ee0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   11ee4:	bl	14bc0 <error@@Base+0x2420>
   11ee8:	mov	r3, r0
   11eec:	cmp	r3, #0
   11ef0:	moveq	r3, #1
   11ef4:	movne	r3, #0
   11ef8:	uxtb	r3, r3
   11efc:	mov	r0, r3
   11f00:	sub	sp, fp, #4
   11f04:	pop	{fp, pc}
   11f08:	push	{r4, fp, lr}
   11f0c:	add	fp, sp, #8
   11f10:	sub	sp, sp, #124	; 0x7c
   11f14:	mov	r3, r0
   11f18:	strh	r3, [fp, #-120]	; 0xffffff88
   11f1c:	ldr	r2, [pc, #80]	; 11f74 <__assert_fail@plt+0x13b8>
   11f20:	add	r2, pc, r2
   11f24:	ldr	r3, [pc, #76]	; 11f78 <__assert_fail@plt+0x13bc>
   11f28:	ldr	r3, [r2, r3]
   11f2c:	ldr	r4, [r3]
   11f30:	bl	10afc <getpid@plt>
   11f34:	mov	r2, r0
   11f38:	ldrsh	r3, [fp, #-120]	; 0xffffff88
   11f3c:	sub	r0, fp, #112	; 0x70
   11f40:	str	r3, [sp]
   11f44:	mov	r3, r2
   11f48:	mov	r2, r4
   11f4c:	ldr	r1, [pc, #40]	; 11f7c <__assert_fail@plt+0x13c0>
   11f50:	add	r1, pc, r1
   11f54:	bl	10b68 <sprintf@plt>
   11f58:	sub	r3, fp, #112	; 0x70
   11f5c:	mov	r0, r3
   11f60:	bl	10a60 <strdup@plt>
   11f64:	mov	r3, r0
   11f68:	mov	r0, r3
   11f6c:	sub	sp, fp, #8
   11f70:	pop	{r4, fp, pc}
   11f74:	ldrdeq	r7, [r1], -r8
   11f78:	andeq	r0, r0, r8, asr #1
   11f7c:	andeq	r2, r0, r4, lsr sp
   11f80:	push	{fp, lr}
   11f84:	add	fp, sp, #4
   11f88:	sub	sp, sp, #8
   11f8c:	ldr	r3, [pc, #80]	; 11fe4 <__assert_fail@plt+0x1428>
   11f90:	add	r3, pc, r3
   11f94:	ldrsh	r3, [r3]
   11f98:	uxth	r3, r3
   11f9c:	add	r3, r3, #1
   11fa0:	uxth	r3, r3
   11fa4:	sxth	r2, r3
   11fa8:	ldr	r3, [pc, #56]	; 11fe8 <__assert_fail@plt+0x142c>
   11fac:	add	r3, pc, r3
   11fb0:	strh	r2, [r3]
   11fb4:	ldr	r3, [pc, #48]	; 11fec <__assert_fail@plt+0x1430>
   11fb8:	add	r3, pc, r3
   11fbc:	ldrsh	r3, [r3]
   11fc0:	mov	r0, r3
   11fc4:	bl	11f08 <__assert_fail@plt+0x134c>
   11fc8:	str	r0, [fp, #-8]
   11fcc:	ldr	r0, [fp, #-8]
   11fd0:	bl	10a78 <unlink@plt>
   11fd4:	ldr	r3, [fp, #-8]
   11fd8:	mov	r0, r3
   11fdc:	sub	sp, fp, #4
   11fe0:	pop	{fp, pc}
   11fe4:	andeq	r7, r1, ip, ror r1
   11fe8:	andeq	r7, r1, r0, ror #2
   11fec:	andeq	r7, r1, r4, asr r1
   11ff0:	push	{fp, lr}
   11ff4:	add	fp, sp, #4
   11ff8:	sub	sp, sp, #8
   11ffc:	mov	r3, #1
   12000:	strh	r3, [fp, #-6]
   12004:	b	1203c <__assert_fail@plt+0x1480>
   12008:	ldrsh	r3, [fp, #-6]
   1200c:	mov	r0, r3
   12010:	bl	11f08 <__assert_fail@plt+0x134c>
   12014:	str	r0, [fp, #-12]
   12018:	ldr	r0, [fp, #-12]
   1201c:	bl	10a78 <unlink@plt>
   12020:	ldr	r0, [fp, #-12]
   12024:	bl	10a30 <free@plt>
   12028:	ldrsh	r3, [fp, #-6]
   1202c:	uxth	r3, r3
   12030:	add	r3, r3, #1
   12034:	uxth	r3, r3
   12038:	strh	r3, [fp, #-6]
   1203c:	ldr	r3, [pc, #28]	; 12060 <__assert_fail@plt+0x14a4>
   12040:	add	r3, pc, r3
   12044:	ldrsh	r3, [r3]
   12048:	ldrsh	r2, [fp, #-6]
   1204c:	cmp	r2, r3
   12050:	ble	12008 <__assert_fail@plt+0x144c>
   12054:	nop			; (mov r0, r0)
   12058:	sub	sp, fp, #4
   1205c:	pop	{fp, pc}
   12060:	andeq	r7, r1, ip, asr #1
   12064:	push	{fp, lr}
   12068:	add	fp, sp, #4
   1206c:	sub	sp, sp, #16
   12070:	str	r0, [fp, #-16]
   12074:	mov	r3, #47	; 0x2f
   12078:	strb	r3, [fp, #-7]
   1207c:	ldr	r0, [fp, #-16]
   12080:	bl	10b20 <strlen@plt>
   12084:	mov	r3, r0
   12088:	uxth	r3, r3
   1208c:	sub	r3, r3, #1
   12090:	uxth	r3, r3
   12094:	strh	r3, [fp, #-6]
   12098:	b	120b0 <__assert_fail@plt+0x14f4>
   1209c:	ldrsh	r3, [fp, #-6]
   120a0:	uxth	r3, r3
   120a4:	sub	r3, r3, #1
   120a8:	uxth	r3, r3
   120ac:	strh	r3, [fp, #-6]
   120b0:	ldrsh	r3, [fp, #-6]
   120b4:	cmp	r3, #0
   120b8:	blt	120d8 <__assert_fail@plt+0x151c>
   120bc:	ldrsh	r3, [fp, #-6]
   120c0:	ldr	r2, [fp, #-16]
   120c4:	add	r3, r2, r3
   120c8:	ldrb	r3, [r3]
   120cc:	ldrb	r2, [fp, #-7]
   120d0:	cmp	r2, r3
   120d4:	bne	1209c <__assert_fail@plt+0x14e0>
   120d8:	ldrsh	r3, [fp, #-6]
   120dc:	add	r3, r3, #1
   120e0:	ldr	r2, [fp, #-16]
   120e4:	add	r3, r2, r3
   120e8:	mov	r0, r3
   120ec:	sub	sp, fp, #4
   120f0:	pop	{fp, pc}
   120f4:	push	{fp, lr}
   120f8:	add	fp, sp, #4
   120fc:	sub	sp, sp, #8
   12100:	str	r0, [fp, #-8]
   12104:	ldr	r3, [pc, #56]	; 12144 <__assert_fail@plt+0x1588>
   12108:	add	r3, pc, r3
   1210c:	ldrb	r3, [r3]
   12110:	cmp	r3, #0
   12114:	bne	12138 <__assert_fail@plt+0x157c>
   12118:	ldr	r3, [pc, #40]	; 12148 <__assert_fail@plt+0x158c>
   1211c:	add	r3, pc, r3
   12120:	mov	r2, #1
   12124:	strb	r2, [r3]
   12128:	ldr	r3, [pc, #28]	; 1214c <__assert_fail@plt+0x1590>
   1212c:	add	r3, pc, r3
   12130:	mov	r0, r3
   12134:	bl	127a0 <error@@Base>
   12138:	nop			; (mov r0, r0)
   1213c:	sub	sp, fp, #4
   12140:	pop	{fp, pc}
   12144:	andeq	r7, r1, r6
   12148:	strdeq	r6, [r1], -r2
   1214c:	andeq	r2, r0, r8, ror #22
   12150:	push	{fp, lr}
   12154:	add	fp, sp, #4
   12158:	ldr	r3, [pc, #40]	; 12188 <__assert_fail@plt+0x15cc>
   1215c:	add	r3, pc, r3
   12160:	mov	r1, r3
   12164:	mov	r0, #2
   12168:	bl	10ae4 <__sysv_signal@plt>
   1216c:	ldr	r3, [pc, #24]	; 1218c <__assert_fail@plt+0x15d0>
   12170:	add	r3, pc, r3
   12174:	mov	r1, r3
   12178:	mov	r0, #15
   1217c:	bl	10ae4 <__sysv_signal@plt>
   12180:	nop			; (mov r0, r0)
   12184:	pop	{fp, pc}
   12188:			; <UNDEFINED> instruction: 0xffffff90
   1218c:			; <UNDEFINED> instruction: 0xffffff7c
   12190:	push	{fp, lr}
   12194:	add	fp, sp, #4
   12198:	sub	sp, sp, #8
   1219c:	str	r0, [fp, #-8]
   121a0:	ldr	r3, [pc, #84]	; 121fc <__assert_fail@plt+0x1640>
   121a4:	add	r3, pc, r3
   121a8:	ldr	r2, [pc, #80]	; 12200 <__assert_fail@plt+0x1644>
   121ac:	ldr	r2, [r3, r2]
   121b0:	ldr	r2, [r2]
   121b4:	cmp	r2, #0
   121b8:	beq	121d0 <__assert_fail@plt+0x1614>
   121bc:	ldr	r2, [pc, #60]	; 12200 <__assert_fail@plt+0x1644>
   121c0:	ldr	r3, [r3, r2]
   121c4:	ldr	r3, [r3]
   121c8:	blx	r3
   121cc:	b	121f8 <__assert_fail@plt+0x163c>
   121d0:	ldr	r2, [pc, #44]	; 12204 <__assert_fail@plt+0x1648>
   121d4:	ldr	r2, [r3, r2]
   121d8:	ldr	r0, [r2]
   121dc:	ldr	r2, [pc, #36]	; 12208 <__assert_fail@plt+0x164c>
   121e0:	ldr	r3, [r3, r2]
   121e4:	ldr	r2, [r3]
   121e8:	ldr	r3, [fp, #-8]
   121ec:	ldr	r1, [pc, #24]	; 1220c <__assert_fail@plt+0x1650>
   121f0:	add	r1, pc, r1
   121f4:	bl	10b2c <fprintf@plt>
   121f8:	bl	12790 <__assert_fail@plt+0x1bd4>
   121fc:	andeq	r6, r1, r4, asr lr
   12200:	strheq	r0, [r0], -r4
   12204:	andeq	r0, r0, r0, asr #1
   12208:	andeq	r0, r0, r8, asr #1
   1220c:			; <UNDEFINED> instruction: 0x00002ab4
   12210:	push	{fp, lr}
   12214:	add	fp, sp, #4
   12218:	sub	sp, sp, #24
   1221c:	str	r0, [fp, #-16]
   12220:	str	r1, [fp, #-20]	; 0xffffffec
   12224:	str	r2, [fp, #-24]	; 0xffffffe8
   12228:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1222c:	cmp	r3, #0
   12230:	beq	12470 <__assert_fail@plt+0x18b4>
   12234:	mov	r3, #0
   12238:	strh	r3, [fp, #-6]
   1223c:	b	12254 <__assert_fail@plt+0x1698>
   12240:	ldrsh	r3, [fp, #-6]
   12244:	uxth	r3, r3
   12248:	add	r3, r3, #1
   1224c:	uxth	r3, r3
   12250:	strh	r3, [fp, #-6]
   12254:	ldrsh	r2, [fp, #-6]
   12258:	mov	r3, r2
   1225c:	lsl	r3, r3, #1
   12260:	add	r3, r3, r2
   12264:	lsl	r3, r3, #2
   12268:	mov	r2, r3
   1226c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12270:	add	r3, r3, r2
   12274:	ldrb	r3, [r3]
   12278:	cmp	r3, #0
   1227c:	beq	122b8 <__assert_fail@plt+0x16fc>
   12280:	ldr	r3, [fp, #-16]
   12284:	add	r3, r3, #1
   12288:	ldrb	r1, [r3]
   1228c:	ldrsh	r2, [fp, #-6]
   12290:	mov	r3, r2
   12294:	lsl	r3, r3, #1
   12298:	add	r3, r3, r2
   1229c:	lsl	r3, r3, #2
   122a0:	mov	r2, r3
   122a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   122a8:	add	r3, r3, r2
   122ac:	ldrb	r3, [r3]
   122b0:	cmp	r1, r3
   122b4:	bne	12240 <__assert_fail@plt+0x1684>
   122b8:	ldrsh	r2, [fp, #-6]
   122bc:	mov	r3, r2
   122c0:	lsl	r3, r3, #1
   122c4:	add	r3, r3, r2
   122c8:	lsl	r3, r3, #2
   122cc:	mov	r2, r3
   122d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   122d4:	add	r3, r3, r2
   122d8:	ldrb	r3, [r3]
   122dc:	cmp	r3, #0
   122e0:	beq	12478 <__assert_fail@plt+0x18bc>
   122e4:	ldrsh	r2, [fp, #-6]
   122e8:	mov	r3, r2
   122ec:	lsl	r3, r3, #1
   122f0:	add	r3, r3, r2
   122f4:	lsl	r3, r3, #2
   122f8:	mov	r2, r3
   122fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12300:	add	r3, r3, r2
   12304:	ldr	r3, [r3, #4]
   12308:	cmp	r3, #0
   1230c:	beq	123cc <__assert_fail@plt+0x1810>
   12310:	ldr	r3, [fp, #-16]
   12314:	add	r3, r3, #2
   12318:	ldrb	r3, [r3]
   1231c:	cmp	r3, #0
   12320:	bne	12330 <__assert_fail@plt+0x1774>
   12324:	ldr	r3, [fp, #-20]	; 0xffffffec
   12328:	cmp	r3, #0
   1232c:	beq	123cc <__assert_fail@plt+0x1810>
   12330:	ldrsh	r2, [fp, #-6]
   12334:	mov	r3, r2
   12338:	lsl	r3, r3, #1
   1233c:	add	r3, r3, r2
   12340:	lsl	r3, r3, #2
   12344:	mov	r2, r3
   12348:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1234c:	add	r3, r3, r2
   12350:	ldr	r3, [r3, #4]
   12354:	ldr	r3, [r3]
   12358:	cmp	r3, #0
   1235c:	bne	12490 <__assert_fail@plt+0x18d4>
   12360:	ldrsh	r2, [fp, #-6]
   12364:	mov	r3, r2
   12368:	lsl	r3, r3, #1
   1236c:	add	r3, r3, r2
   12370:	lsl	r3, r3, #2
   12374:	mov	r2, r3
   12378:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1237c:	add	r3, r3, r2
   12380:	ldr	r2, [r3, #4]
   12384:	ldr	r3, [fp, #-16]
   12388:	add	r3, r3, #2
   1238c:	ldrb	r3, [r3]
   12390:	cmp	r3, #0
   12394:	beq	123a4 <__assert_fail@plt+0x17e8>
   12398:	ldr	r3, [fp, #-16]
   1239c:	add	r3, r3, #2
   123a0:	b	123a8 <__assert_fail@plt+0x17ec>
   123a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   123a8:	str	r3, [r2]
   123ac:	ldr	r3, [fp, #-16]
   123b0:	add	r3, r3, #2
   123b4:	ldrb	r3, [r3]
   123b8:	cmp	r3, #0
   123bc:	moveq	r3, #1
   123c0:	movne	r3, #0
   123c4:	uxtb	r3, r3
   123c8:	b	124b0 <__assert_fail@plt+0x18f4>
   123cc:	ldrsh	r2, [fp, #-6]
   123d0:	mov	r3, r2
   123d4:	lsl	r3, r3, #1
   123d8:	add	r3, r3, r2
   123dc:	lsl	r3, r3, #2
   123e0:	mov	r2, r3
   123e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   123e8:	add	r3, r3, r2
   123ec:	ldr	r3, [r3, #8]
   123f0:	cmp	r3, #0
   123f4:	beq	1247c <__assert_fail@plt+0x18c0>
   123f8:	ldr	r3, [fp, #-16]
   123fc:	add	r3, r3, #2
   12400:	ldrb	r3, [r3]
   12404:	cmp	r3, #0
   12408:	bne	1247c <__assert_fail@plt+0x18c0>
   1240c:	ldrsh	r2, [fp, #-6]
   12410:	mov	r3, r2
   12414:	lsl	r3, r3, #1
   12418:	add	r3, r3, r2
   1241c:	lsl	r3, r3, #2
   12420:	mov	r2, r3
   12424:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12428:	add	r3, r3, r2
   1242c:	ldr	r3, [r3, #8]
   12430:	ldrb	r3, [r3]
   12434:	cmp	r3, #0
   12438:	bne	12498 <__assert_fail@plt+0x18dc>
   1243c:	ldrsh	r2, [fp, #-6]
   12440:	mov	r3, r2
   12444:	lsl	r3, r3, #1
   12448:	add	r3, r3, r2
   1244c:	lsl	r3, r3, #2
   12450:	mov	r2, r3
   12454:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12458:	add	r3, r3, r2
   1245c:	ldr	r3, [r3, #8]
   12460:	mov	r2, #1
   12464:	strb	r2, [r3]
   12468:	mov	r3, #0
   1246c:	b	124b0 <__assert_fail@plt+0x18f4>
   12470:	nop			; (mov r0, r0)
   12474:	b	1247c <__assert_fail@plt+0x18c0>
   12478:	nop			; (mov r0, r0)
   1247c:	ldr	r1, [fp, #-16]
   12480:	ldr	r3, [pc, #52]	; 124bc <__assert_fail@plt+0x1900>
   12484:	add	r3, pc, r3
   12488:	mov	r0, r3
   1248c:	bl	12808 <error@@Base+0x68>
   12490:	nop			; (mov r0, r0)
   12494:	b	1249c <__assert_fail@plt+0x18e0>
   12498:	nop			; (mov r0, r0)
   1249c:	ldr	r1, [fp, #-16]
   124a0:	ldr	r3, [pc, #24]	; 124c0 <__assert_fail@plt+0x1904>
   124a4:	add	r3, pc, r3
   124a8:	mov	r0, r3
   124ac:	bl	12808 <error@@Base+0x68>
   124b0:	mov	r0, r3
   124b4:	sub	sp, fp, #4
   124b8:	pop	{fp, pc}
   124bc:	andeq	r2, r0, r0, lsr r8
   124c0:	andeq	r2, r0, r0, lsr #16
   124c4:	push	{r4, fp, lr}
   124c8:	add	fp, sp, #8
   124cc:	sub	sp, sp, #28
   124d0:	str	r0, [fp, #-24]	; 0xffffffe8
   124d4:	str	r1, [fp, #-28]	; 0xffffffe4
   124d8:	str	r2, [fp, #-32]	; 0xffffffe0
   124dc:	str	r3, [fp, #-36]	; 0xffffffdc
   124e0:	ldr	r2, [pc, #476]	; 126c4 <__assert_fail@plt+0x1b08>
   124e4:	add	r2, pc, r2
   124e8:	mov	r3, #0
   124ec:	strh	r3, [fp, #-16]
   124f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   124f4:	ldr	r3, [r3]
   124f8:	cmp	r3, #1
   124fc:	bne	1251c <__assert_fail@plt+0x1960>
   12500:	ldr	r3, [pc, #448]	; 126c8 <__assert_fail@plt+0x1b0c>
   12504:	ldr	r3, [r2, r3]
   12508:	ldrb	r3, [r3]
   1250c:	cmp	r3, #0
   12510:	beq	1251c <__assert_fail@plt+0x1960>
   12514:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12518:	bl	12190 <__assert_fail@plt+0x15d4>
   1251c:	mov	r3, #1
   12520:	strh	r3, [fp, #-14]
   12524:	b	12698 <__assert_fail@plt+0x1adc>
   12528:	ldrsh	r3, [fp, #-14]
   1252c:	lsl	r3, r3, #2
   12530:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12534:	add	r3, r2, r3
   12538:	ldr	r3, [r3]
   1253c:	ldrb	r3, [r3]
   12540:	cmp	r3, #45	; 0x2d
   12544:	bne	12648 <__assert_fail@plt+0x1a8c>
   12548:	ldrsh	r3, [fp, #-14]
   1254c:	lsl	r3, r3, #2
   12550:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12554:	add	r3, r2, r3
   12558:	ldr	r3, [r3]
   1255c:	add	r3, r3, #1
   12560:	ldrb	r3, [r3]
   12564:	cmp	r3, #0
   12568:	beq	12648 <__assert_fail@plt+0x1a8c>
   1256c:	ldrsh	r3, [fp, #-14]
   12570:	lsl	r3, r3, #2
   12574:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12578:	add	r3, r2, r3
   1257c:	ldr	r4, [r3]
   12580:	ldrsh	r3, [fp, #-14]
   12584:	lsl	r3, r3, #2
   12588:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1258c:	add	r3, r2, r3
   12590:	ldr	r3, [r3]
   12594:	mov	r0, r3
   12598:	bl	10b20 <strlen@plt>
   1259c:	mov	r3, r0
   125a0:	mov	r2, r3
   125a4:	mov	r1, r4
   125a8:	ldr	r3, [pc, #284]	; 126cc <__assert_fail@plt+0x1b10>
   125ac:	add	r3, pc, r3
   125b0:	mov	r0, r3
   125b4:	bl	10b98 <strncmp@plt>
   125b8:	mov	r3, r0
   125bc:	cmp	r3, #0
   125c0:	bne	125cc <__assert_fail@plt+0x1a10>
   125c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   125c8:	bl	12190 <__assert_fail@plt+0x15d4>
   125cc:	ldrsh	r3, [fp, #-14]
   125d0:	lsl	r3, r3, #2
   125d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   125d8:	add	r3, r2, r3
   125dc:	ldr	r0, [r3]
   125e0:	ldrsh	r3, [fp, #-14]
   125e4:	add	r2, r3, #1
   125e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   125ec:	ldr	r3, [r3]
   125f0:	cmp	r2, r3
   125f4:	bge	12614 <__assert_fail@plt+0x1a58>
   125f8:	ldrsh	r3, [fp, #-14]
   125fc:	add	r3, r3, #1
   12600:	lsl	r3, r3, #2
   12604:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12608:	add	r3, r2, r3
   1260c:	ldr	r3, [r3]
   12610:	b	12618 <__assert_fail@plt+0x1a5c>
   12614:	mov	r3, #0
   12618:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1261c:	mov	r1, r3
   12620:	bl	12210 <__assert_fail@plt+0x1654>
   12624:	mov	r3, r0
   12628:	cmp	r3, #0
   1262c:	beq	12684 <__assert_fail@plt+0x1ac8>
   12630:	ldrsh	r3, [fp, #-14]
   12634:	uxth	r3, r3
   12638:	add	r3, r3, #1
   1263c:	uxth	r3, r3
   12640:	strh	r3, [fp, #-14]
   12644:	b	12684 <__assert_fail@plt+0x1ac8>
   12648:	ldrsh	r2, [fp, #-16]
   1264c:	uxth	r3, r2
   12650:	add	r3, r3, #1
   12654:	uxth	r3, r3
   12658:	strh	r3, [fp, #-16]
   1265c:	mov	r3, r2
   12660:	lsl	r3, r3, #2
   12664:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12668:	add	r3, r2, r3
   1266c:	ldrsh	r2, [fp, #-14]
   12670:	lsl	r2, r2, #2
   12674:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12678:	add	r2, r1, r2
   1267c:	ldr	r2, [r2]
   12680:	str	r2, [r3]
   12684:	ldrsh	r3, [fp, #-14]
   12688:	uxth	r3, r3
   1268c:	add	r3, r3, #1
   12690:	uxth	r3, r3
   12694:	strh	r3, [fp, #-14]
   12698:	ldrsh	r2, [fp, #-14]
   1269c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   126a0:	ldr	r3, [r3]
   126a4:	cmp	r2, r3
   126a8:	blt	12528 <__assert_fail@plt+0x196c>
   126ac:	ldrsh	r2, [fp, #-16]
   126b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   126b4:	str	r2, [r3]
   126b8:	nop			; (mov r0, r0)
   126bc:	sub	sp, fp, #8
   126c0:	pop	{r4, fp, pc}
   126c4:	andeq	r6, r1, r4, lsl fp
   126c8:	andeq	r0, r0, ip, lsr #1
   126cc:	andeq	r2, r0, ip, lsr #14
   126d0:	push	{r4, fp, lr}
   126d4:	add	fp, sp, #8
   126d8:	sub	sp, sp, #20
   126dc:	str	r0, [fp, #-16]
   126e0:	str	r1, [fp, #-20]	; 0xffffffec
   126e4:	str	r2, [fp, #-24]	; 0xffffffe8
   126e8:	str	r3, [fp, #-28]	; 0xffffffe4
   126ec:	ldr	r4, [pc, #68]	; 12738 <__assert_fail@plt+0x1b7c>
   126f0:	add	r4, pc, r4
   126f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   126f8:	ldr	r3, [r3]
   126fc:	mov	r0, r3
   12700:	bl	12064 <__assert_fail@plt+0x14a8>
   12704:	mov	r2, r0
   12708:	ldr	r3, [pc, #44]	; 1273c <__assert_fail@plt+0x1b80>
   1270c:	ldr	r3, [r4, r3]
   12710:	str	r2, [r3]
   12714:	bl	12150 <__assert_fail@plt+0x1594>
   12718:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1271c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12720:	ldr	r1, [fp, #-20]	; 0xffffffec
   12724:	ldr	r0, [fp, #-16]
   12728:	bl	124c4 <__assert_fail@plt+0x1908>
   1272c:	nop			; (mov r0, r0)
   12730:	sub	sp, fp, #8
   12734:	pop	{r4, fp, pc}
   12738:	andeq	r6, r1, r8, lsl #18
   1273c:	andeq	r0, r0, r8, asr #1
   12740:	push	{fp, lr}
   12744:	add	fp, sp, #4
   12748:	sub	sp, sp, #8
   1274c:	str	r0, [fp, #-8]
   12750:	ldr	r3, [pc, #48]	; 12788 <__assert_fail@plt+0x1bcc>
   12754:	add	r3, pc, r3
   12758:	ldr	r2, [pc, #44]	; 1278c <__assert_fail@plt+0x1bd0>
   1275c:	ldr	r2, [r3, r2]
   12760:	ldr	r2, [r2]
   12764:	cmp	r2, #0
   12768:	beq	1277c <__assert_fail@plt+0x1bc0>
   1276c:	ldr	r2, [pc, #24]	; 1278c <__assert_fail@plt+0x1bd0>
   12770:	ldr	r3, [r3, r2]
   12774:	ldr	r3, [r3]
   12778:	blx	r3
   1277c:	bl	11ff0 <__assert_fail@plt+0x1434>
   12780:	ldr	r0, [fp, #-8]
   12784:	bl	10b08 <exit@plt>
   12788:	andeq	r6, r1, r4, lsr #17
   1278c:	andeq	r0, r0, ip, asr #1
   12790:	push	{fp, lr}
   12794:	add	fp, sp, #4
   12798:	mov	r0, #0
   1279c:	bl	12740 <__assert_fail@plt+0x1b84>

000127a0 <error@@Base>:
   127a0:	push	{r4, fp, lr}
   127a4:	add	fp, sp, #8
   127a8:	sub	sp, sp, #12
   127ac:	str	r0, [fp, #-16]
   127b0:	ldr	r4, [pc, #60]	; 127f4 <error@@Base+0x54>
   127b4:	add	r4, pc, r4
   127b8:	ldr	r3, [pc, #56]	; 127f8 <error@@Base+0x58>
   127bc:	ldr	r3, [r4, r3]
   127c0:	ldr	r0, [r3]
   127c4:	ldr	r3, [pc, #48]	; 127fc <error@@Base+0x5c>
   127c8:	ldr	r3, [r4, r3]
   127cc:	ldr	r2, [r3]
   127d0:	ldr	r3, [fp, #-16]
   127d4:	ldr	r1, [pc, #36]	; 12800 <error@@Base+0x60>
   127d8:	add	r1, pc, r1
   127dc:	bl	10b2c <fprintf@plt>
   127e0:	ldr	r3, [pc, #28]	; 12804 <error@@Base+0x64>
   127e4:	ldr	r3, [r4, r3]
   127e8:	ldr	r3, [r3]
   127ec:	mov	r0, r3
   127f0:	bl	12740 <__assert_fail@plt+0x1b84>
   127f4:	andeq	r6, r1, r4, asr #16
   127f8:	andeq	r0, r0, r0, asr #1
   127fc:	andeq	r0, r0, r8, asr #1
   12800:	andeq	r2, r0, r8, lsl #10
   12804:	andeq	r0, r0, r0, ror #1
   12808:	push	{r4, fp, lr}
   1280c:	add	fp, sp, #8
   12810:	sub	sp, sp, #20
   12814:	str	r0, [fp, #-16]
   12818:	str	r1, [fp, #-20]	; 0xffffffec
   1281c:	ldr	r4, [pc, #68]	; 12868 <error@@Base+0xc8>
   12820:	add	r4, pc, r4
   12824:	ldr	r3, [pc, #64]	; 1286c <error@@Base+0xcc>
   12828:	ldr	r3, [r4, r3]
   1282c:	ldr	r0, [r3]
   12830:	ldr	r3, [pc, #56]	; 12870 <error@@Base+0xd0>
   12834:	ldr	r3, [r4, r3]
   12838:	ldr	r2, [r3]
   1283c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12840:	str	r3, [sp]
   12844:	ldr	r3, [fp, #-16]
   12848:	ldr	r1, [pc, #36]	; 12874 <error@@Base+0xd4>
   1284c:	add	r1, pc, r1
   12850:	bl	10b2c <fprintf@plt>
   12854:	ldr	r3, [pc, #28]	; 12878 <error@@Base+0xd8>
   12858:	ldr	r3, [r4, r3]
   1285c:	ldr	r3, [r3]
   12860:	mov	r0, r3
   12864:	bl	12740 <__assert_fail@plt+0x1b84>
   12868:	ldrdeq	r6, [r1], -r8
   1286c:	andeq	r0, r0, r0, asr #1
   12870:	andeq	r0, r0, r8, asr #1
   12874:	muleq	r0, ip, r4
   12878:	andeq	r0, r0, r0, ror #1
   1287c:	push	{fp, lr}
   12880:	add	fp, sp, #4
   12884:	sub	sp, sp, #16
   12888:	str	r0, [fp, #-8]
   1288c:	str	r1, [fp, #-12]
   12890:	ldr	r3, [pc, #60]	; 128d4 <error@@Base+0x134>
   12894:	add	r3, pc, r3
   12898:	ldr	r2, [pc, #56]	; 128d8 <error@@Base+0x138>
   1289c:	ldr	r2, [r3, r2]
   128a0:	ldr	r0, [r2]
   128a4:	ldr	r2, [pc, #48]	; 128dc <error@@Base+0x13c>
   128a8:	ldr	r3, [r3, r2]
   128ac:	ldr	r2, [r3]
   128b0:	ldr	r3, [fp, #-12]
   128b4:	str	r3, [sp]
   128b8:	ldr	r3, [fp, #-8]
   128bc:	ldr	r1, [pc, #28]	; 128e0 <error@@Base+0x140>
   128c0:	add	r1, pc, r1
   128c4:	bl	10b2c <fprintf@plt>
   128c8:	nop			; (mov r0, r0)
   128cc:	sub	sp, fp, #4
   128d0:	pop	{fp, pc}
   128d4:	andeq	r6, r1, r4, ror #14
   128d8:	andeq	r0, r0, r0, asr #1
   128dc:	andeq	r0, r0, r8, asr #1
   128e0:	andeq	r2, r0, r8, lsr #8
   128e4:	andeq	r0, r0, r0
   128e8:	push	{fp}		; (str fp, [sp, #-4]!)
   128ec:	add	fp, sp, #0
   128f0:	sub	sp, sp, #20
   128f4:	str	r0, [fp, #-8]
   128f8:	str	r1, [fp, #-12]
   128fc:	str	r2, [fp, #-16]
   12900:	ldr	r3, [fp, #-8]
   12904:	ldr	r2, [r3]
   12908:	ldr	r3, [fp, #-12]
   1290c:	add	r2, r2, r3
   12910:	ldr	r3, [fp, #-8]
   12914:	str	r2, [r3]
   12918:	ldr	r3, [fp, #-8]
   1291c:	ldr	r2, [r3, #4]
   12920:	ldr	r3, [fp, #-16]
   12924:	add	r2, r2, r3
   12928:	ldr	r3, [fp, #-8]
   1292c:	str	r2, [r3, #4]
   12930:	nop			; (mov r0, r0)
   12934:	add	sp, fp, #0
   12938:	pop	{fp}		; (ldr fp, [sp], #4)
   1293c:	bx	lr
   12940:	push	{fp, lr}
   12944:	add	fp, sp, #4
   12948:	sub	sp, sp, #24
   1294c:	str	r0, [fp, #-16]
   12950:	str	r1, [fp, #-20]	; 0xffffffec
   12954:	str	r2, [fp, #-24]	; 0xffffffe8
   12958:	str	r3, [fp, #-28]	; 0xffffffe4
   1295c:	ldr	r1, [fp, #-20]	; 0xffffffec
   12960:	ldr	r0, [fp, #-16]
   12964:	bl	11914 <__assert_fail@plt+0xd58>
   12968:	str	r0, [fp, #-8]
   1296c:	ldr	r3, [fp, #-8]
   12970:	cmp	r3, #0
   12974:	bne	129ac <error@@Base+0x20c>
   12978:	mov	r1, #20
   1297c:	mov	r0, #1
   12980:	bl	11c4c <__assert_fail@plt+0x1090>
   12984:	str	r0, [fp, #-8]
   12988:	ldr	r0, [fp, #-20]	; 0xffffffec
   1298c:	bl	10a60 <strdup@plt>
   12990:	mov	r3, r0
   12994:	mov	r2, r3
   12998:	ldr	r3, [fp, #-8]
   1299c:	str	r2, [r3, #8]
   129a0:	ldr	r1, [fp, #-8]
   129a4:	ldr	r0, [fp, #-16]
   129a8:	bl	119e8 <__assert_fail@plt+0xe2c>
   129ac:	ldr	r3, [fp, #-8]
   129b0:	add	r3, r3, #12
   129b4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   129b8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   129bc:	mov	r0, r3
   129c0:	bl	128e8 <error@@Base+0x148>
   129c4:	nop			; (mov r0, r0)
   129c8:	sub	sp, fp, #4
   129cc:	pop	{fp, pc}
   129d0:	push	{fp, lr}
   129d4:	add	fp, sp, #4
   129d8:	sub	sp, sp, #8
   129dc:	str	r0, [fp, #-8]
   129e0:	ldr	r2, [fp, #-8]
   129e4:	mov	r1, #99	; 0x63
   129e8:	ldr	r3, [pc, #40]	; 12a18 <error@@Base+0x278>
   129ec:	add	r3, pc, r3
   129f0:	mov	r0, r3
   129f4:	bl	10a48 <fgets@plt>
   129f8:	mov	r3, r0
   129fc:	cmp	r3, #0
   12a00:	movne	r3, #1
   12a04:	moveq	r3, #0
   12a08:	uxtb	r3, r3
   12a0c:	mov	r0, r3
   12a10:	sub	sp, fp, #4
   12a14:	pop	{fp, pc}
   12a18:	andeq	r6, r1, r4, lsr #14
   12a1c:	push	{fp, lr}
   12a20:	add	fp, sp, #4
   12a24:	sub	sp, sp, #8
   12a28:	str	r0, [fp, #-8]
   12a2c:	str	r1, [fp, #-12]
   12a30:	ldr	r0, [fp, #-8]
   12a34:	bl	129d0 <error@@Base+0x230>
   12a38:	mov	r3, r0
   12a3c:	cmp	r3, #0
   12a40:	beq	12a78 <error@@Base+0x2d8>
   12a44:	ldr	r2, [fp, #-12]
   12a48:	ldr	r3, [pc, #60]	; 12a8c <error@@Base+0x2ec>
   12a4c:	add	r3, pc, r3
   12a50:	mov	r1, r3
   12a54:	ldr	r3, [pc, #52]	; 12a90 <error@@Base+0x2f0>
   12a58:	add	r3, pc, r3
   12a5c:	mov	r0, r3
   12a60:	bl	10b38 <__isoc99_sscanf@plt>
   12a64:	mov	r3, r0
   12a68:	cmp	r3, #1
   12a6c:	bne	12a78 <error@@Base+0x2d8>
   12a70:	mov	r3, #1
   12a74:	b	12a7c <error@@Base+0x2dc>
   12a78:	mov	r3, #0
   12a7c:	uxtb	r3, r3
   12a80:	mov	r0, r3
   12a84:	sub	sp, fp, #4
   12a88:	pop	{fp, pc}
   12a8c:	andeq	r2, r0, ip, lsr #5
   12a90:			; <UNDEFINED> instruction: 0x000166b8
   12a94:	push	{fp, lr}
   12a98:	add	fp, sp, #4
   12a9c:	sub	sp, sp, #16
   12aa0:	str	r0, [fp, #-8]
   12aa4:	str	r1, [fp, #-12]
   12aa8:	str	r2, [fp, #-16]
   12aac:	ldr	r0, [fp, #-8]
   12ab0:	bl	129d0 <error@@Base+0x230>
   12ab4:	mov	r3, r0
   12ab8:	cmp	r3, #0
   12abc:	beq	12af0 <error@@Base+0x350>
   12ac0:	ldr	r3, [fp, #-16]
   12ac4:	ldr	r2, [fp, #-12]
   12ac8:	ldr	r1, [pc, #52]	; 12b04 <error@@Base+0x364>
   12acc:	add	r1, pc, r1
   12ad0:	ldr	r0, [pc, #48]	; 12b08 <error@@Base+0x368>
   12ad4:	add	r0, pc, r0
   12ad8:	bl	10b38 <__isoc99_sscanf@plt>
   12adc:	mov	r3, r0
   12ae0:	cmp	r3, #2
   12ae4:	bne	12af0 <error@@Base+0x350>
   12ae8:	mov	r3, #1
   12aec:	b	12af4 <error@@Base+0x354>
   12af0:	mov	r3, #0
   12af4:	uxtb	r3, r3
   12af8:	mov	r0, r3
   12afc:	sub	sp, fp, #4
   12b00:	pop	{fp, pc}
   12b04:	andeq	r2, r0, r0, lsr r2
   12b08:	andeq	r6, r1, ip, lsr r6
   12b0c:	push	{fp, lr}
   12b10:	add	fp, sp, #4
   12b14:	sub	sp, sp, #24
   12b18:	str	r0, [fp, #-24]	; 0xffffffe8
   12b1c:	str	r1, [fp, #-28]	; 0xffffffe4
   12b20:	mov	r3, #0
   12b24:	str	r3, [fp, #-12]
   12b28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12b2c:	bl	129d0 <error@@Base+0x230>
   12b30:	mov	r3, r0
   12b34:	cmp	r3, #0
   12b38:	beq	12bf0 <error@@Base+0x450>
   12b3c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12b40:	bl	129d0 <error@@Base+0x230>
   12b44:	mov	r3, r0
   12b48:	cmp	r3, #0
   12b4c:	beq	12bf0 <error@@Base+0x450>
   12b50:	b	12bd0 <error@@Base+0x430>
   12b54:	ldr	r3, [pc, #164]	; 12c00 <error@@Base+0x460>
   12b58:	add	r3, pc, r3
   12b5c:	add	r0, r3, #29
   12b60:	bl	10b74 <atoi@plt>
   12b64:	str	r0, [fp, #-8]
   12b68:	ldr	r3, [fp, #-8]
   12b6c:	cmp	r3, #0
   12b70:	bne	12bb0 <error@@Base+0x410>
   12b74:	ldr	r3, [pc, #136]	; 12c04 <error@@Base+0x464>
   12b78:	add	r3, pc, r3
   12b7c:	mov	r1, r3
   12b80:	ldr	r3, [pc, #128]	; 12c08 <error@@Base+0x468>
   12b84:	add	r3, pc, r3
   12b88:	add	r0, r3, #29
   12b8c:	bl	10a0c <strcmp@plt>
   12b90:	mov	r3, r0
   12b94:	cmp	r3, #0
   12b98:	bne	12ba8 <error@@Base+0x408>
   12b9c:	ldr	r3, [fp, #-16]
   12ba0:	str	r3, [fp, #-12]
   12ba4:	b	12bb0 <error@@Base+0x410>
   12ba8:	mov	r3, #11
   12bac:	str	r3, [fp, #-8]
   12bb0:	ldr	r3, [fp, #-8]
   12bb4:	lsl	r3, r3, #3
   12bb8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12bbc:	add	r3, r2, r3
   12bc0:	ldr	r1, [fp, #-16]
   12bc4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12bc8:	mov	r0, r3
   12bcc:	bl	128e8 <error@@Base+0x148>
   12bd0:	sub	r2, fp, #20
   12bd4:	sub	r3, fp, #16
   12bd8:	mov	r1, r3
   12bdc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12be0:	bl	12a94 <error@@Base+0x2f4>
   12be4:	mov	r3, r0
   12be8:	cmp	r3, #0
   12bec:	bne	12b54 <error@@Base+0x3b4>
   12bf0:	ldr	r3, [fp, #-12]
   12bf4:	mov	r0, r3
   12bf8:	sub	sp, fp, #4
   12bfc:	pop	{fp, pc}
   12c00:			; <UNDEFINED> instruction: 0x000165b8
   12c04:	andeq	r2, r0, ip, lsl #3
   12c08:	andeq	r6, r1, ip, lsl #11
   12c0c:	push	{fp, lr}
   12c10:	add	fp, sp, #4
   12c14:	sub	sp, sp, #16
   12c18:	str	r0, [fp, #-16]
   12c1c:	str	r1, [fp, #-20]	; 0xffffffec
   12c20:	ldr	r0, [fp, #-16]
   12c24:	bl	129d0 <error@@Base+0x230>
   12c28:	mov	r3, r0
   12c2c:	cmp	r3, #0
   12c30:	beq	12cb0 <error@@Base+0x510>
   12c34:	ldr	r0, [fp, #-16]
   12c38:	bl	129d0 <error@@Base+0x230>
   12c3c:	mov	r3, r0
   12c40:	cmp	r3, #0
   12c44:	beq	12cb0 <error@@Base+0x510>
   12c48:	b	12c90 <error@@Base+0x4f0>
   12c4c:	ldr	r3, [pc, #104]	; 12cbc <error@@Base+0x51c>
   12c50:	add	r3, pc, r3
   12c54:	mov	r0, r3
   12c58:	bl	10b20 <strlen@plt>
   12c5c:	mov	r3, r0
   12c60:	sub	r3, r3, #1
   12c64:	ldr	r2, [pc, #84]	; 12cc0 <error@@Base+0x520>
   12c68:	add	r2, pc, r2
   12c6c:	mov	r1, #0
   12c70:	strb	r1, [r2, r3]
   12c74:	ldr	r2, [fp, #-8]
   12c78:	ldr	r3, [fp, #-12]
   12c7c:	ldr	r1, [pc, #64]	; 12cc4 <error@@Base+0x524>
   12c80:	add	r1, pc, r1
   12c84:	add	r1, r1, #29
   12c88:	ldr	r0, [fp, #-20]	; 0xffffffec
   12c8c:	bl	12940 <error@@Base+0x1a0>
   12c90:	sub	r2, fp, #12
   12c94:	sub	r3, fp, #8
   12c98:	mov	r1, r3
   12c9c:	ldr	r0, [fp, #-16]
   12ca0:	bl	12a94 <error@@Base+0x2f4>
   12ca4:	mov	r3, r0
   12ca8:	cmp	r3, #0
   12cac:	bne	12c4c <error@@Base+0x4ac>
   12cb0:	nop			; (mov r0, r0)
   12cb4:	sub	sp, fp, #4
   12cb8:	pop	{fp, pc}
   12cbc:	andeq	r6, r1, r0, asr #9
   12cc0:	andeq	r6, r1, r8, lsr #9
   12cc4:	muleq	r1, r0, r4
   12cc8:	push	{fp, lr}
   12ccc:	add	fp, sp, #4
   12cd0:	sub	sp, sp, #32
   12cd4:	str	r0, [fp, #-32]	; 0xffffffe0
   12cd8:	str	r1, [fp, #-36]	; 0xffffffdc
   12cdc:	ldr	r3, [pc, #500]	; 12ed8 <error@@Base+0x738>
   12ce0:	add	r3, pc, r3
   12ce4:	mov	r1, r3
   12ce8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12cec:	bl	11d8c <__assert_fail@plt+0x11d0>
   12cf0:	str	r0, [fp, #-8]
   12cf4:	ldr	r0, [fp, #-8]
   12cf8:	bl	129d0 <error@@Base+0x230>
   12cfc:	mov	r3, r0
   12d00:	cmp	r3, #0
   12d04:	beq	12e90 <error@@Base+0x6f0>
   12d08:	mov	r2, #45	; 0x2d
   12d0c:	ldr	r3, [pc, #456]	; 12edc <error@@Base+0x73c>
   12d10:	add	r3, pc, r3
   12d14:	mov	r1, r3
   12d18:	ldr	r3, [pc, #448]	; 12ee0 <error@@Base+0x740>
   12d1c:	add	r3, pc, r3
   12d20:	mov	r0, r3
   12d24:	bl	10b98 <strncmp@plt>
   12d28:	mov	r3, r0
   12d2c:	cmp	r3, #0
   12d30:	bne	12e90 <error@@Base+0x6f0>
   12d34:	ldr	r0, [fp, #-8]
   12d38:	bl	129d0 <error@@Base+0x230>
   12d3c:	mov	r3, r0
   12d40:	cmp	r3, #0
   12d44:	beq	12e90 <error@@Base+0x6f0>
   12d48:	ldr	r3, [pc, #404]	; 12ee4 <error@@Base+0x744>
   12d4c:	add	r3, pc, r3
   12d50:	mov	r1, r3
   12d54:	ldr	r3, [pc, #396]	; 12ee8 <error@@Base+0x748>
   12d58:	add	r3, pc, r3
   12d5c:	mov	r0, r3
   12d60:	bl	10a0c <strcmp@plt>
   12d64:	mov	r3, r0
   12d68:	cmp	r3, #0
   12d6c:	bne	12e90 <error@@Base+0x6f0>
   12d70:	sub	r3, fp, #20
   12d74:	mov	r1, r3
   12d78:	ldr	r0, [fp, #-8]
   12d7c:	bl	12a1c <error@@Base+0x27c>
   12d80:	mov	r3, r0
   12d84:	cmp	r3, #0
   12d88:	beq	12e90 <error@@Base+0x6f0>
   12d8c:	sub	r3, fp, #24
   12d90:	mov	r1, r3
   12d94:	ldr	r0, [fp, #-8]
   12d98:	bl	12a1c <error@@Base+0x27c>
   12d9c:	mov	r3, r0
   12da0:	cmp	r3, #0
   12da4:	beq	12e90 <error@@Base+0x6f0>
   12da8:	ldr	r0, [fp, #-8]
   12dac:	bl	129d0 <error@@Base+0x230>
   12db0:	mov	r3, r0
   12db4:	cmp	r3, #0
   12db8:	beq	12e90 <error@@Base+0x6f0>
   12dbc:	ldr	r0, [fp, #-8]
   12dc0:	bl	129d0 <error@@Base+0x230>
   12dc4:	mov	r3, r0
   12dc8:	cmp	r3, #0
   12dcc:	beq	12e90 <error@@Base+0x6f0>
   12dd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12dd4:	ldr	r1, [fp, #-20]	; 0xffffffec
   12dd8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12ddc:	mov	r0, r3
   12de0:	bl	128e8 <error@@Base+0x148>
   12de4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12de8:	add	r3, r3, #8
   12dec:	mov	r1, r3
   12df0:	ldr	r0, [fp, #-8]
   12df4:	bl	12b0c <error@@Base+0x36c>
   12df8:	str	r0, [fp, #-12]
   12dfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e00:	add	r3, r3, #416	; 0x1a0
   12e04:	mov	r1, r3
   12e08:	ldr	r0, [fp, #-8]
   12e0c:	bl	12b0c <error@@Base+0x36c>
   12e10:	str	r0, [fp, #-16]
   12e14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e18:	add	r3, r3, #824	; 0x338
   12e1c:	mov	r1, r3
   12e20:	ldr	r0, [fp, #-8]
   12e24:	bl	12b0c <error@@Base+0x36c>
   12e28:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e2c:	cmp	r3, #0
   12e30:	ble	12ec0 <error@@Base+0x720>
   12e34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e38:	add	r3, r3, #920	; 0x398
   12e3c:	mov	r1, r3
   12e40:	ldr	r0, [fp, #-8]
   12e44:	bl	12b0c <error@@Base+0x36c>
   12e48:	ldr	r3, [fp, #-12]
   12e4c:	cmp	r3, #0
   12e50:	ble	12e68 <error@@Base+0x6c8>
   12e54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e58:	add	r3, r3, #992	; 0x3e0
   12e5c:	mov	r1, r3
   12e60:	ldr	r0, [fp, #-8]
   12e64:	bl	12c0c <error@@Base+0x46c>
   12e68:	ldr	r3, [fp, #-16]
   12e6c:	cmp	r3, #0
   12e70:	ble	12ec0 <error@@Base+0x720>
   12e74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e78:	add	r3, r3, #9024	; 0x2340
   12e7c:	add	r3, r3, #24
   12e80:	mov	r1, r3
   12e84:	ldr	r0, [fp, #-8]
   12e88:	bl	12c0c <error@@Base+0x46c>
   12e8c:	b	12ec0 <error@@Base+0x720>
   12e90:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12e94:	cmp	r3, #0
   12e98:	beq	12ea4 <error@@Base+0x704>
   12e9c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12ea0:	b	12eac <error@@Base+0x70c>
   12ea4:	ldr	r3, [pc, #64]	; 12eec <error@@Base+0x74c>
   12ea8:	add	r3, pc, r3
   12eac:	mov	r1, r3
   12eb0:	ldr	r3, [pc, #56]	; 12ef0 <error@@Base+0x750>
   12eb4:	add	r3, pc, r3
   12eb8:	mov	r0, r3
   12ebc:	bl	12808 <error@@Base+0x68>
   12ec0:	nop			; (mov r0, r0)
   12ec4:	ldr	r0, [fp, #-8]
   12ec8:	bl	11e60 <__assert_fail@plt+0x12a4>
   12ecc:	nop			; (mov r0, r0)
   12ed0:	sub	sp, fp, #4
   12ed4:	pop	{fp, pc}
   12ed8:	andeq	r2, r0, ip, lsr #32
   12edc:	andeq	r2, r0, r0
   12ee0:	strdeq	r6, [r1], -r4
   12ee4:	strdeq	r1, [r0], -r4
   12ee8:			; <UNDEFINED> instruction: 0x000163b8
   12eec:	andeq	r1, r0, r8, asr #29
   12ef0:	andeq	r1, r0, r4, asr #29
   12ef4:	push	{fp, lr}
   12ef8:	add	fp, sp, #4
   12efc:	sub	sp, sp, #8
   12f00:	str	r0, [fp, #-8]
   12f04:	str	r1, [fp, #-12]
   12f08:	ldr	r3, [fp, #-12]
   12f0c:	ldr	r3, [r3]
   12f10:	cmp	r3, #0
   12f14:	bne	12f34 <error@@Base+0x794>
   12f18:	ldr	r3, [fp, #-8]
   12f1c:	mov	r2, #8
   12f20:	mov	r1, #1
   12f24:	ldr	r0, [pc, #108]	; 12f98 <error@@Base+0x7f8>
   12f28:	add	r0, pc, r0
   12f2c:	bl	10a9c <fwrite@plt>
   12f30:	b	12f80 <error@@Base+0x7e0>
   12f34:	ldr	r3, [fp, #-12]
   12f38:	ldr	r2, [r3]
   12f3c:	ldr	r3, [fp, #-12]
   12f40:	ldr	r3, [r3, #4]
   12f44:	sub	r3, r2, r3
   12f48:	vmov	s15, r3
   12f4c:	vcvt.f64.s32	d7, s15
   12f50:	vldr	d6, [pc, #56]	; 12f90 <error@@Base+0x7f0>
   12f54:	vmul.f64	d6, d7, d6
   12f58:	ldr	r3, [fp, #-12]
   12f5c:	ldr	r3, [r3]
   12f60:	vmov	s15, r3
   12f64:	vcvt.f64.s32	d7, s15
   12f68:	vdiv.f64	d5, d6, d7
   12f6c:	vmov	r2, r3, d5
   12f70:	ldr	r1, [pc, #36]	; 12f9c <error@@Base+0x7fc>
   12f74:	add	r1, pc, r1
   12f78:	ldr	r0, [fp, #-8]
   12f7c:	bl	10b2c <fprintf@plt>
   12f80:	nop			; (mov r0, r0)
   12f84:	sub	sp, fp, #4
   12f88:	pop	{fp, pc}
   12f8c:	nop			; (mov r0, r0)
   12f90:	andeq	r0, r0, r0
   12f94:	subsmi	r0, r9, r0
   12f98:	andeq	r1, r0, r4, ror #28
   12f9c:	andeq	r1, r0, r4, lsr #28
   12fa0:	push	{fp, lr}
   12fa4:	add	fp, sp, #4
   12fa8:	sub	sp, sp, #8
   12fac:	str	r0, [fp, #-8]
   12fb0:	str	r1, [fp, #-12]
   12fb4:	ldr	r3, [fp, #-12]
   12fb8:	cmp	r3, #0
   12fbc:	beq	12ff0 <error@@Base+0x850>
   12fc0:	ldr	r3, [fp, #-12]
   12fc4:	ldr	r2, [r3]
   12fc8:	ldr	r3, [fp, #-12]
   12fcc:	ldr	r3, [r3, #4]
   12fd0:	ldr	r1, [pc, #84]	; 1302c <error@@Base+0x88c>
   12fd4:	add	r1, pc, r1
   12fd8:	ldr	r0, [fp, #-8]
   12fdc:	bl	10b2c <fprintf@plt>
   12fe0:	ldr	r1, [fp, #-12]
   12fe4:	ldr	r0, [fp, #-8]
   12fe8:	bl	12ef4 <error@@Base+0x754>
   12fec:	b	13008 <error@@Base+0x868>
   12ff0:	ldr	r3, [fp, #-8]
   12ff4:	mov	r2, #26
   12ff8:	mov	r1, #1
   12ffc:	ldr	r0, [pc, #44]	; 13030 <error@@Base+0x890>
   13000:	add	r0, pc, r0
   13004:	bl	10a9c <fwrite@plt>
   13008:	ldr	r3, [fp, #-8]
   1300c:	mov	r2, #3
   13010:	mov	r1, #1
   13014:	ldr	r0, [pc, #24]	; 13034 <error@@Base+0x894>
   13018:	add	r0, pc, r0
   1301c:	bl	10a9c <fwrite@plt>
   13020:	nop			; (mov r0, r0)
   13024:	sub	sp, fp, #4
   13028:	pop	{fp, pc}
   1302c:	andeq	r1, r0, ip, asr #27
   13030:	andeq	r1, r0, ip, lsr #27
   13034:			; <UNDEFINED> instruction: 0x00001db0
   13038:	push	{fp, lr}
   1303c:	add	fp, sp, #4
   13040:	sub	sp, sp, #32
   13044:	str	r0, [fp, #-16]
   13048:	str	r1, [fp, #-20]	; 0xffffffec
   1304c:	mov	r1, r2
   13050:	str	r3, [fp, #-28]	; 0xffffffe4
   13054:	ldr	r2, [fp, #4]
   13058:	ldr	r3, [fp, #8]
   1305c:	strh	r1, [fp, #-24]	; 0xffffffe8
   13060:	strb	r2, [fp, #-32]	; 0xffffffe0
   13064:	strb	r3, [fp, #-36]	; 0xffffffdc
   13068:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1306c:	ldr	r3, [pc, #376]	; 131ec <error@@Base+0xa4c>
   13070:	add	r3, pc, r3
   13074:	mov	r1, r3
   13078:	ldr	r0, [fp, #-16]
   1307c:	bl	10b2c <fprintf@plt>
   13080:	mov	r1, #0
   13084:	ldr	r0, [fp, #-16]
   13088:	bl	12fa0 <error@@Base+0x800>
   1308c:	ldrb	r3, [fp, #-32]	; 0xffffffe0
   13090:	cmp	r3, #0
   13094:	beq	130a4 <error@@Base+0x904>
   13098:	ldr	r3, [pc, #336]	; 131f0 <error@@Base+0xa50>
   1309c:	add	r3, pc, r3
   130a0:	b	130ac <error@@Base+0x90c>
   130a4:	ldr	r3, [pc, #328]	; 131f4 <error@@Base+0xa54>
   130a8:	add	r3, pc, r3
   130ac:	mov	r2, r3
   130b0:	ldr	r3, [pc, #320]	; 131f8 <error@@Base+0xa58>
   130b4:	add	r3, pc, r3
   130b8:	mov	r1, r3
   130bc:	ldr	r0, [fp, #-16]
   130c0:	bl	10b2c <fprintf@plt>
   130c4:	mov	r3, #1
   130c8:	strh	r3, [fp, #-6]
   130cc:	b	13138 <error@@Base+0x998>
   130d0:	ldrsh	r3, [fp, #-6]
   130d4:	lsl	r3, r3, #3
   130d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   130dc:	add	r3, r2, r3
   130e0:	ldr	r3, [r3]
   130e4:	cmp	r3, #0
   130e8:	ble	13124 <error@@Base+0x984>
   130ec:	ldrsh	r3, [fp, #-6]
   130f0:	lsl	r3, r3, #3
   130f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   130f8:	add	r3, r2, r3
   130fc:	mov	r1, r3
   13100:	ldr	r0, [fp, #-16]
   13104:	bl	12fa0 <error@@Base+0x800>
   13108:	ldrsh	r3, [fp, #-6]
   1310c:	mov	r2, r3
   13110:	ldr	r3, [pc, #228]	; 131fc <error@@Base+0xa5c>
   13114:	add	r3, pc, r3
   13118:	mov	r1, r3
   1311c:	ldr	r0, [fp, #-16]
   13120:	bl	10b2c <fprintf@plt>
   13124:	ldrsh	r3, [fp, #-6]
   13128:	uxth	r3, r3
   1312c:	add	r3, r3, #1
   13130:	uxth	r3, r3
   13134:	strh	r3, [fp, #-6]
   13138:	ldrsh	r2, [fp, #-6]
   1313c:	ldrsh	r3, [fp, #-24]	; 0xffffffe8
   13140:	cmp	r2, r3
   13144:	ble	130d0 <error@@Base+0x930>
   13148:	ldrb	r3, [fp, #-32]	; 0xffffffe0
   1314c:	cmp	r3, #0
   13150:	beq	131b0 <error@@Base+0xa10>
   13154:	ldrsh	r3, [fp, #-24]	; 0xffffffe8
   13158:	add	r3, r3, #1
   1315c:	lsl	r3, r3, #3
   13160:	ldr	r2, [fp, #-20]	; 0xffffffec
   13164:	add	r3, r2, r3
   13168:	ldr	r3, [r3]
   1316c:	cmp	r3, #0
   13170:	ble	131b0 <error@@Base+0xa10>
   13174:	ldrsh	r3, [fp, #-24]	; 0xffffffe8
   13178:	add	r3, r3, #1
   1317c:	lsl	r3, r3, #3
   13180:	ldr	r2, [fp, #-20]	; 0xffffffec
   13184:	add	r3, r2, r3
   13188:	mov	r1, r3
   1318c:	ldr	r0, [fp, #-16]
   13190:	bl	12fa0 <error@@Base+0x800>
   13194:	ldrsh	r3, [fp, #-24]	; 0xffffffe8
   13198:	mov	r2, r3
   1319c:	ldr	r3, [pc, #92]	; 13200 <error@@Base+0xa60>
   131a0:	add	r3, pc, r3
   131a4:	mov	r1, r3
   131a8:	ldr	r0, [fp, #-16]
   131ac:	bl	10b2c <fprintf@plt>
   131b0:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   131b4:	cmp	r3, #0
   131b8:	beq	131e0 <error@@Base+0xa40>
   131bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   131c0:	ldr	r0, [fp, #-16]
   131c4:	bl	12fa0 <error@@Base+0x800>
   131c8:	ldr	r3, [fp, #-16]
   131cc:	mov	r2, #7
   131d0:	mov	r1, #1
   131d4:	ldr	r0, [pc, #40]	; 13204 <error@@Base+0xa64>
   131d8:	add	r0, pc, r0
   131dc:	bl	10a9c <fwrite@plt>
   131e0:	nop			; (mov r0, r0)
   131e4:	sub	sp, fp, #4
   131e8:	pop	{fp, pc}
   131ec:	andeq	r1, r0, ip, asr sp
   131f0:	andeq	r1, r0, r8, lsr sp
   131f4:	andeq	r1, r0, r4, lsr sp
   131f8:	andeq	r1, r0, r0, lsr sp
   131fc:	ldrdeq	r1, [r0], -r4
   13200:	andeq	r1, r0, r4, asr ip
   13204:	andeq	r1, r0, ip, lsr #22
   13208:	push	{fp, lr}
   1320c:	add	fp, sp, #4
   13210:	sub	sp, sp, #8
   13214:	str	r0, [fp, #-8]
   13218:	str	r1, [fp, #-12]
   1321c:	ldr	r3, [fp, #-8]
   13220:	ldr	r2, [r3, #8]
   13224:	ldr	r3, [fp, #-12]
   13228:	ldr	r3, [r3, #8]
   1322c:	mov	r1, r3
   13230:	mov	r0, r2
   13234:	bl	11ca4 <__assert_fail@plt+0x10e8>
   13238:	mov	r3, r0
   1323c:	mov	r0, r3
   13240:	sub	sp, fp, #4
   13244:	pop	{fp, pc}
   13248:	push	{fp, lr}
   1324c:	add	fp, sp, #4
   13250:	sub	sp, sp, #24
   13254:	str	r0, [fp, #-16]
   13258:	str	r1, [fp, #-20]	; 0xffffffec
   1325c:	str	r2, [fp, #-24]	; 0xffffffe8
   13260:	ldr	r0, [fp, #-20]	; 0xffffffec
   13264:	bl	11ac8 <__assert_fail@plt+0xf0c>
   13268:	ldr	r3, [fp, #-20]	; 0xffffffec
   1326c:	add	r3, r3, #4096	; 0x1000
   13270:	ldr	r0, [r3, #3956]	; 0xf74
   13274:	ldr	r3, [fp, #-20]	; 0xffffffec
   13278:	add	r3, r3, #4096	; 0x1000
   1327c:	ldr	r3, [r3, #3952]	; 0xf70
   13280:	ldr	r2, [pc, #216]	; 13360 <error@@Base+0xbc0>
   13284:	add	r2, pc, r2
   13288:	mov	r1, r3
   1328c:	bl	11758 <__assert_fail@plt+0xb9c>
   13290:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13294:	ldr	r3, [pc, #200]	; 13364 <error@@Base+0xbc4>
   13298:	add	r3, pc, r3
   1329c:	mov	r1, r3
   132a0:	ldr	r0, [fp, #-16]
   132a4:	bl	10b2c <fprintf@plt>
   132a8:	mov	r1, #0
   132ac:	ldr	r0, [fp, #-16]
   132b0:	bl	12fa0 <error@@Base+0x800>
   132b4:	ldr	r1, [fp, #-16]
   132b8:	mov	r0, #10
   132bc:	bl	10b5c <fputc@plt>
   132c0:	mov	r3, #0
   132c4:	str	r3, [fp, #-8]
   132c8:	b	1333c <error@@Base+0xb9c>
   132cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   132d0:	add	r3, r3, #4096	; 0x1000
   132d4:	ldr	r2, [r3, #3952]	; 0xf70
   132d8:	ldr	r3, [fp, #-8]
   132dc:	lsl	r3, r3, #2
   132e0:	add	r3, r2, r3
   132e4:	ldr	r3, [r3]
   132e8:	add	r3, r3, #12
   132ec:	mov	r1, r3
   132f0:	ldr	r0, [fp, #-16]
   132f4:	bl	12fa0 <error@@Base+0x800>
   132f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   132fc:	add	r3, r3, #4096	; 0x1000
   13300:	ldr	r2, [r3, #3952]	; 0xf70
   13304:	ldr	r3, [fp, #-8]
   13308:	lsl	r3, r3, #2
   1330c:	add	r3, r2, r3
   13310:	ldr	r3, [r3]
   13314:	ldr	r3, [r3, #8]
   13318:	mov	r2, r3
   1331c:	ldr	r3, [pc, #68]	; 13368 <error@@Base+0xbc8>
   13320:	add	r3, pc, r3
   13324:	mov	r1, r3
   13328:	ldr	r0, [fp, #-16]
   1332c:	bl	10b2c <fprintf@plt>
   13330:	ldr	r3, [fp, #-8]
   13334:	add	r3, r3, #1
   13338:	str	r3, [fp, #-8]
   1333c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13340:	add	r3, r3, #4096	; 0x1000
   13344:	ldr	r2, [r3, #3956]	; 0xf74
   13348:	ldr	r3, [fp, #-8]
   1334c:	cmp	r2, r3
   13350:	bgt	132cc <error@@Base+0xb2c>
   13354:	nop			; (mov r0, r0)
   13358:	sub	sp, fp, #4
   1335c:	pop	{fp, pc}
   13360:			; <UNDEFINED> instruction: 0xffffff7c
   13364:	andeq	r1, r0, r4, lsr fp
   13368:	andeq	r1, r0, r4, asr #21
   1336c:	push	{fp, lr}
   13370:	add	fp, sp, #4
   13374:	sub	sp, sp, #24
   13378:	str	r0, [fp, #-16]
   1337c:	str	r1, [fp, #-20]	; 0xffffffec
   13380:	ldr	r3, [pc, #456]	; 13550 <error@@Base+0xdb0>
   13384:	add	r3, pc, r3
   13388:	mov	r1, r3
   1338c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13390:	bl	11d8c <__assert_fail@plt+0x11d0>
   13394:	str	r0, [fp, #-8]
   13398:	ldr	r3, [pc, #436]	; 13554 <error@@Base+0xdb4>
   1339c:	add	r3, pc, r3
   133a0:	ldr	r2, [pc, #432]	; 13558 <error@@Base+0xdb8>
   133a4:	add	r2, pc, r2
   133a8:	ldr	r1, [pc, #428]	; 1355c <error@@Base+0xdbc>
   133ac:	add	r1, pc, r1
   133b0:	ldr	r0, [fp, #-8]
   133b4:	bl	10b2c <fprintf@plt>
   133b8:	ldr	r3, [fp, #-16]
   133bc:	ldr	r3, [r3]
   133c0:	mov	r2, r3
   133c4:	ldr	r3, [pc, #404]	; 13560 <error@@Base+0xdc0>
   133c8:	add	r3, pc, r3
   133cc:	mov	r1, r3
   133d0:	ldr	r0, [fp, #-8]
   133d4:	bl	10b2c <fprintf@plt>
   133d8:	ldr	r3, [fp, #-16]
   133dc:	ldr	r3, [r3, #4]
   133e0:	mov	r2, r3
   133e4:	ldr	r3, [pc, #376]	; 13564 <error@@Base+0xdc4>
   133e8:	add	r3, pc, r3
   133ec:	mov	r1, r3
   133f0:	ldr	r0, [fp, #-8]
   133f4:	bl	10b2c <fprintf@plt>
   133f8:	ldr	r3, [fp, #-16]
   133fc:	mov	r1, r3
   13400:	ldr	r0, [fp, #-8]
   13404:	bl	12ef4 <error@@Base+0x754>
   13408:	ldr	r3, [fp, #-8]
   1340c:	mov	r2, #12
   13410:	mov	r1, #1
   13414:	ldr	r0, [pc, #332]	; 13568 <error@@Base+0xdc8>
   13418:	add	r0, pc, r0
   1341c:	bl	10a9c <fwrite@plt>
   13420:	ldr	r3, [fp, #-16]
   13424:	add	r1, r3, #8
   13428:	mov	r3, #1
   1342c:	str	r3, [sp, #4]
   13430:	mov	r3, #0
   13434:	str	r3, [sp]
   13438:	ldr	r3, [pc, #300]	; 1356c <error@@Base+0xdcc>
   1343c:	add	r3, pc, r3
   13440:	mov	r2, #50	; 0x32
   13444:	ldr	r0, [fp, #-8]
   13448:	bl	13038 <error@@Base+0x898>
   1344c:	ldr	r3, [fp, #-16]
   13450:	add	r1, r3, #416	; 0x1a0
   13454:	mov	r3, #1
   13458:	str	r3, [sp, #4]
   1345c:	mov	r3, #0
   13460:	str	r3, [sp]
   13464:	ldr	r3, [pc, #260]	; 13570 <error@@Base+0xdd0>
   13468:	add	r3, pc, r3
   1346c:	mov	r2, #50	; 0x32
   13470:	ldr	r0, [fp, #-8]
   13474:	bl	13038 <error@@Base+0x898>
   13478:	ldr	r3, [fp, #-16]
   1347c:	add	r1, r3, #824	; 0x338
   13480:	mov	r3, #1
   13484:	str	r3, [sp, #4]
   13488:	mov	r3, #1
   1348c:	str	r3, [sp]
   13490:	ldr	r3, [pc, #220]	; 13574 <error@@Base+0xdd4>
   13494:	add	r3, pc, r3
   13498:	mov	r2, #10
   1349c:	ldr	r0, [fp, #-8]
   134a0:	bl	13038 <error@@Base+0x898>
   134a4:	ldr	r3, [fp, #-16]
   134a8:	ldr	r3, [r3]
   134ac:	cmp	r3, #0
   134b0:	ble	1353c <error@@Base+0xd9c>
   134b4:	ldr	r3, [fp, #-16]
   134b8:	add	r1, r3, #920	; 0x398
   134bc:	mov	r3, #0
   134c0:	str	r3, [sp, #4]
   134c4:	mov	r3, #0
   134c8:	str	r3, [sp]
   134cc:	ldr	r3, [pc, #164]	; 13578 <error@@Base+0xdd8>
   134d0:	add	r3, pc, r3
   134d4:	mov	r2, #8
   134d8:	ldr	r0, [fp, #-8]
   134dc:	bl	13038 <error@@Base+0x898>
   134e0:	ldr	r3, [fp, #-16]
   134e4:	ldr	r3, [r3, #8]
   134e8:	cmp	r3, #0
   134ec:	ble	1350c <error@@Base+0xd6c>
   134f0:	ldr	r3, [fp, #-16]
   134f4:	add	r3, r3, #992	; 0x3e0
   134f8:	ldr	r2, [pc, #124]	; 1357c <error@@Base+0xddc>
   134fc:	add	r2, pc, r2
   13500:	mov	r1, r3
   13504:	ldr	r0, [fp, #-8]
   13508:	bl	13248 <error@@Base+0xaa8>
   1350c:	ldr	r3, [fp, #-16]
   13510:	ldr	r3, [r3, #416]	; 0x1a0
   13514:	cmp	r3, #0
   13518:	ble	1353c <error@@Base+0xd9c>
   1351c:	ldr	r3, [fp, #-16]
   13520:	add	r3, r3, #9024	; 0x2340
   13524:	add	r3, r3, #24
   13528:	ldr	r2, [pc, #80]	; 13580 <error@@Base+0xde0>
   1352c:	add	r2, pc, r2
   13530:	mov	r1, r3
   13534:	ldr	r0, [fp, #-8]
   13538:	bl	13248 <error@@Base+0xaa8>
   1353c:	ldr	r0, [fp, #-8]
   13540:	bl	11e60 <__assert_fail@plt+0x12a4>
   13544:	nop			; (mov r0, r0)
   13548:	sub	sp, fp, #4
   1354c:	pop	{fp, pc}
   13550:	andeq	r1, r0, ip, ror sl
   13554:	andeq	r1, r0, r4, lsr #19
   13558:	andeq	r1, r0, ip, ror #18
   1355c:	andeq	r1, r0, r8, asr sl
   13560:	andeq	r1, r0, r4, asr #20
   13564:	andeq	r1, r0, r4, lsr sl
   13568:	andeq	r1, r0, ip, lsl sl
   1356c:	andeq	r1, r0, r8, lsl #20
   13570:	andeq	r1, r0, r8, ror #19
   13574:	andeq	r1, r0, ip, asr #19
   13578:	andeq	r1, r0, r8, lsr #19
   1357c:	andeq	r1, r0, r8, asr #18
   13580:	andeq	r1, r0, r4, lsr #18
   13584:	push	{fp, lr}
   13588:	add	fp, sp, #4
   1358c:	sub	sp, sp, #24
   13590:	str	r0, [fp, #-16]
   13594:	str	r1, [fp, #-20]	; 0xffffffec
   13598:	str	r2, [fp, #-24]	; 0xffffffe8
   1359c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   135a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   135a4:	cmp	r2, r3
   135a8:	bcs	135b4 <error@@Base+0xe14>
   135ac:	mov	r3, #0
   135b0:	b	136ac <error@@Base+0xf0c>
   135b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   135b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   135bc:	sub	r3, r2, r3
   135c0:	lsr	r2, r3, #1
   135c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   135c8:	add	r3, r2, r3
   135cc:	str	r3, [fp, #-8]
   135d0:	ldr	r2, [fp, #-8]
   135d4:	mov	r3, r2
   135d8:	lsl	r3, r3, #1
   135dc:	add	r3, r3, r2
   135e0:	lsl	r3, r3, #2
   135e4:	ldr	r2, [pc, #204]	; 136b8 <error@@Base+0xf18>
   135e8:	add	r2, pc, r2
   135ec:	add	r3, r3, r2
   135f0:	str	r3, [fp, #-12]
   135f4:	ldr	r3, [fp, #-12]
   135f8:	ldr	r2, [r3]
   135fc:	ldr	r3, [fp, #-16]
   13600:	cmp	r2, r3
   13604:	bls	13628 <error@@Base+0xe88>
   13608:	ldr	r3, [fp, #-8]
   1360c:	sub	r3, r3, #1
   13610:	mov	r2, r3
   13614:	ldr	r1, [fp, #-20]	; 0xffffffec
   13618:	ldr	r0, [fp, #-16]
   1361c:	bl	13584 <error@@Base+0xde4>
   13620:	mov	r3, r0
   13624:	b	136ac <error@@Base+0xf0c>
   13628:	ldr	r3, [fp, #-12]
   1362c:	ldr	r2, [r3, #4]
   13630:	ldr	r3, [fp, #-16]
   13634:	cmp	r2, r3
   13638:	bcs	1365c <error@@Base+0xebc>
   1363c:	ldr	r3, [fp, #-8]
   13640:	add	r3, r3, #1
   13644:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13648:	mov	r1, r3
   1364c:	ldr	r0, [fp, #-16]
   13650:	bl	13584 <error@@Base+0xde4>
   13654:	mov	r3, r0
   13658:	b	136ac <error@@Base+0xf0c>
   1365c:	ldr	r3, [fp, #-12]
   13660:	ldr	r2, [r3]
   13664:	ldr	r3, [fp, #-16]
   13668:	cmp	r2, r3
   1366c:	bhi	13684 <error@@Base+0xee4>
   13670:	ldr	r3, [fp, #-12]
   13674:	ldr	r2, [r3, #4]
   13678:	ldr	r3, [fp, #-16]
   1367c:	cmp	r2, r3
   13680:	bcs	136a4 <error@@Base+0xf04>
   13684:	ldr	r3, [pc, #48]	; 136bc <error@@Base+0xf1c>
   13688:	add	r3, pc, r3
   1368c:	mov	r2, #63	; 0x3f
   13690:	ldr	r1, [pc, #40]	; 136c0 <error@@Base+0xf20>
   13694:	add	r1, pc, r1
   13698:	ldr	r0, [pc, #36]	; 136c4 <error@@Base+0xf24>
   1369c:	add	r0, pc, r0
   136a0:	bl	10bbc <__assert_fail@plt>
   136a4:	ldr	r3, [fp, #-12]
   136a8:	ldr	r3, [r3, #8]
   136ac:	mov	r0, r3
   136b0:	sub	sp, fp, #4
   136b4:	pop	{fp, pc}
   136b8:	muleq	r0, r8, r8
   136bc:	muleq	r0, ip, fp
   136c0:	andeq	r4, r0, r8, lsr #22
   136c4:	andeq	r4, r0, r8, lsr #22
   136c8:	push	{fp, lr}
   136cc:	add	fp, sp, #4
   136d0:	sub	sp, sp, #16
   136d4:	str	r0, [fp, #-16]
   136d8:	ldr	r3, [pc, #40]	; 13708 <error@@Base+0xf68>
   136dc:	str	r3, [fp, #-8]
   136e0:	ldr	r3, [fp, #-8]
   136e4:	sub	r3, r3, #1
   136e8:	mov	r2, r3
   136ec:	mov	r1, #0
   136f0:	ldr	r0, [fp, #-16]
   136f4:	bl	13584 <error@@Base+0xde4>
   136f8:	mov	r3, r0
   136fc:	mov	r0, r3
   13700:	sub	sp, fp, #4
   13704:	pop	{fp, pc}
   13708:	andeq	r0, r0, r5, asr #8
   1370c:	push	{fp, lr}
   13710:	add	fp, sp, #4
   13714:	sub	sp, sp, #8
   13718:	str	r0, [fp, #-8]
   1371c:	ldr	r3, [fp, #-8]
   13720:	cmp	r3, #0
   13724:	bne	13730 <error@@Base+0xf90>
   13728:	mov	r3, #18
   1372c:	b	13744 <error@@Base+0xfa4>
   13730:	ldr	r3, [fp, #-8]
   13734:	ldr	r3, [r3, #12]
   13738:	mov	r0, r3
   1373c:	bl	136c8 <error@@Base+0xf28>
   13740:	mov	r3, r0
   13744:	mov	r0, r3
   13748:	sub	sp, fp, #4
   1374c:	pop	{fp, pc}
   13750:	push	{fp, lr}
   13754:	add	fp, sp, #4
   13758:	sub	sp, sp, #8
   1375c:	str	r0, [fp, #-8]
   13760:	ldr	r3, [fp, #-8]
   13764:	cmp	r3, #0
   13768:	bne	13774 <error@@Base+0xfd4>
   1376c:	mov	r3, #0
   13770:	b	137b8 <error@@Base+0x1018>
   13774:	ldr	r3, [fp, #-8]
   13778:	ldr	r3, [r3, #4]
   1377c:	str	r3, [fp, #-8]
   13780:	ldr	r3, [fp, #-8]
   13784:	cmp	r3, #0
   13788:	beq	137b4 <error@@Base+0x1014>
   1378c:	ldr	r0, [fp, #-8]
   13790:	bl	1370c <error@@Base+0xf6c>
   13794:	mov	r3, r0
   13798:	cmp	r3, #4
   1379c:	beq	13774 <error@@Base+0xfd4>
   137a0:	ldr	r0, [fp, #-8]
   137a4:	bl	1370c <error@@Base+0xf6c>
   137a8:	mov	r3, r0
   137ac:	cmp	r3, #6
   137b0:	beq	13774 <error@@Base+0xfd4>
   137b4:	ldr	r3, [fp, #-8]
   137b8:	mov	r0, r3
   137bc:	sub	sp, fp, #4
   137c0:	pop	{fp, pc}
   137c4:	push	{fp, lr}
   137c8:	add	fp, sp, #4
   137cc:	sub	sp, sp, #8
   137d0:	str	r0, [fp, #-8]
   137d4:	ldr	r0, [fp, #-8]
   137d8:	bl	13750 <error@@Base+0xfb0>
   137dc:	mov	r3, r0
   137e0:	mov	r0, r3
   137e4:	bl	13750 <error@@Base+0xfb0>
   137e8:	mov	r3, r0
   137ec:	mov	r0, r3
   137f0:	sub	sp, fp, #4
   137f4:	pop	{fp, pc}
   137f8:	push	{fp, lr}
   137fc:	add	fp, sp, #4
   13800:	sub	sp, sp, #8
   13804:	str	r0, [fp, #-8]
   13808:	ldr	r3, [fp, #-8]
   1380c:	cmp	r3, #0
   13810:	bne	13828 <error@@Base+0x1088>
   13814:	mov	r3, #0
   13818:	b	13874 <error@@Base+0x10d4>
   1381c:	ldr	r3, [fp, #-8]
   13820:	ldr	r3, [r3, #4]
   13824:	str	r3, [fp, #-8]
   13828:	ldr	r3, [fp, #-8]
   1382c:	ldr	r3, [r3, #4]
   13830:	cmp	r3, #0
   13834:	beq	13870 <error@@Base+0x10d0>
   13838:	ldr	r3, [fp, #-8]
   1383c:	ldr	r3, [r3, #4]
   13840:	mov	r0, r3
   13844:	bl	1370c <error@@Base+0xf6c>
   13848:	mov	r3, r0
   1384c:	cmp	r3, #4
   13850:	beq	1381c <error@@Base+0x107c>
   13854:	ldr	r3, [fp, #-8]
   13858:	ldr	r3, [r3, #4]
   1385c:	mov	r0, r3
   13860:	bl	1370c <error@@Base+0xf6c>
   13864:	mov	r3, r0
   13868:	cmp	r3, #6
   1386c:	beq	1381c <error@@Base+0x107c>
   13870:	ldr	r3, [fp, #-8]
   13874:	mov	r0, r3
   13878:	sub	sp, fp, #4
   1387c:	pop	{fp, pc}
   13880:	push	{fp, lr}
   13884:	add	fp, sp, #4
   13888:	sub	sp, sp, #48	; 0x30
   1388c:	str	r0, [fp, #-48]	; 0xffffffd0
   13890:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13894:	str	r3, [fp, #-36]	; 0xffffffdc
   13898:	sub	r3, fp, #40	; 0x28
   1389c:	str	r3, [fp, #-8]
   138a0:	mov	r3, #17
   138a4:	str	r3, [fp, #-12]
   138a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   138ac:	cmp	r3, #0
   138b0:	bne	13c7c <error@@Base+0x14dc>
   138b4:	mov	r3, #0
   138b8:	b	13ca0 <error@@Base+0x1500>
   138bc:	ldr	r0, [fp, #-8]
   138c0:	bl	13750 <error@@Base+0xfb0>
   138c4:	str	r0, [fp, #-8]
   138c8:	ldr	r3, [fp, #-12]
   138cc:	str	r3, [fp, #-16]
   138d0:	ldr	r0, [fp, #-8]
   138d4:	bl	1370c <error@@Base+0xf6c>
   138d8:	str	r0, [fp, #-12]
   138dc:	ldr	r0, [fp, #-8]
   138e0:	bl	13750 <error@@Base+0xfb0>
   138e4:	mov	r3, r0
   138e8:	mov	r0, r3
   138ec:	bl	1370c <error@@Base+0xf6c>
   138f0:	str	r0, [fp, #-20]	; 0xffffffec
   138f4:	ldr	r0, [fp, #-8]
   138f8:	bl	137c4 <error@@Base+0x1024>
   138fc:	mov	r3, r0
   13900:	mov	r0, r3
   13904:	bl	1370c <error@@Base+0xf6c>
   13908:	str	r0, [fp, #-24]	; 0xffffffe8
   1390c:	ldr	r3, [fp, #-12]
   13910:	cmp	r3, #1
   13914:	bne	13928 <error@@Base+0x1188>
   13918:	ldr	r3, [fp, #-20]	; 0xffffffec
   1391c:	cmp	r3, #2
   13920:	bne	13928 <error@@Base+0x1188>
   13924:	b	13c7c <error@@Base+0x14dc>
   13928:	ldr	r3, [fp, #-12]
   1392c:	cmp	r3, #3
   13930:	beq	13c94 <error@@Base+0x14f4>
   13934:	ldr	r3, [fp, #-12]
   13938:	cmp	r3, #1
   1393c:	beq	13c94 <error@@Base+0x14f4>
   13940:	ldr	r3, [fp, #-12]
   13944:	cmp	r3, #2
   13948:	beq	13c94 <error@@Base+0x14f4>
   1394c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13950:	cmp	r3, #3
   13954:	beq	13c94 <error@@Base+0x14f4>
   13958:	ldr	r3, [fp, #-20]	; 0xffffffec
   1395c:	cmp	r3, #1
   13960:	beq	13c94 <error@@Base+0x14f4>
   13964:	ldr	r3, [fp, #-20]	; 0xffffffec
   13968:	cmp	r3, #2
   1396c:	beq	13c94 <error@@Base+0x14f4>
   13970:	ldr	r3, [fp, #-12]
   13974:	cmp	r3, #9
   13978:	beq	13988 <error@@Base+0x11e8>
   1397c:	ldr	r3, [fp, #-12]
   13980:	cmp	r3, #8
   13984:	bne	139a4 <error@@Base+0x1204>
   13988:	ldr	r3, [fp, #-20]	; 0xffffffec
   1398c:	cmp	r3, #9
   13990:	beq	13c7c <error@@Base+0x14dc>
   13994:	ldr	r3, [fp, #-20]	; 0xffffffec
   13998:	cmp	r3, #8
   1399c:	bne	139a4 <error@@Base+0x1204>
   139a0:	b	13c7c <error@@Base+0x14dc>
   139a4:	ldr	r3, [fp, #-12]
   139a8:	cmp	r3, #9
   139ac:	beq	139bc <error@@Base+0x121c>
   139b0:	ldr	r3, [fp, #-12]
   139b4:	cmp	r3, #8
   139b8:	bne	139fc <error@@Base+0x125c>
   139bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   139c0:	cmp	r3, #13
   139c4:	beq	139e0 <error@@Base+0x1240>
   139c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   139cc:	cmp	r3, #12
   139d0:	beq	139e0 <error@@Base+0x1240>
   139d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   139d8:	cmp	r3, #10
   139dc:	bne	139fc <error@@Base+0x125c>
   139e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   139e4:	cmp	r3, #9
   139e8:	beq	13c7c <error@@Base+0x14dc>
   139ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   139f0:	cmp	r3, #8
   139f4:	bne	139fc <error@@Base+0x125c>
   139f8:	b	13c7c <error@@Base+0x14dc>
   139fc:	ldr	r3, [fp, #-16]
   13a00:	cmp	r3, #9
   13a04:	beq	13a14 <error@@Base+0x1274>
   13a08:	ldr	r3, [fp, #-16]
   13a0c:	cmp	r3, #8
   13a10:	bne	13a54 <error@@Base+0x12b4>
   13a14:	ldr	r3, [fp, #-12]
   13a18:	cmp	r3, #13
   13a1c:	beq	13a38 <error@@Base+0x1298>
   13a20:	ldr	r3, [fp, #-12]
   13a24:	cmp	r3, #12
   13a28:	beq	13a38 <error@@Base+0x1298>
   13a2c:	ldr	r3, [fp, #-12]
   13a30:	cmp	r3, #10
   13a34:	bne	13a54 <error@@Base+0x12b4>
   13a38:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a3c:	cmp	r3, #9
   13a40:	beq	13c7c <error@@Base+0x14dc>
   13a44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a48:	cmp	r3, #8
   13a4c:	bne	13a54 <error@@Base+0x12b4>
   13a50:	b	13c7c <error@@Base+0x14dc>
   13a54:	ldr	r3, [fp, #-12]
   13a58:	cmp	r3, #8
   13a5c:	bne	13a70 <error@@Base+0x12d0>
   13a60:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a64:	cmp	r3, #10
   13a68:	bne	13a70 <error@@Base+0x12d0>
   13a6c:	b	13c7c <error@@Base+0x14dc>
   13a70:	ldr	r3, [fp, #-12]
   13a74:	cmp	r3, #8
   13a78:	bne	13a98 <error@@Base+0x12f8>
   13a7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a80:	cmp	r3, #11
   13a84:	bne	13a98 <error@@Base+0x12f8>
   13a88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a8c:	cmp	r3, #8
   13a90:	bne	13a98 <error@@Base+0x12f8>
   13a94:	b	13c7c <error@@Base+0x14dc>
   13a98:	ldr	r3, [fp, #-16]
   13a9c:	cmp	r3, #8
   13aa0:	bne	13ac0 <error@@Base+0x1320>
   13aa4:	ldr	r3, [fp, #-12]
   13aa8:	cmp	r3, #11
   13aac:	bne	13ac0 <error@@Base+0x1320>
   13ab0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ab4:	cmp	r3, #8
   13ab8:	bne	13ac0 <error@@Base+0x1320>
   13abc:	b	13c7c <error@@Base+0x14dc>
   13ac0:	ldr	r3, [fp, #-12]
   13ac4:	cmp	r3, #15
   13ac8:	bne	13adc <error@@Base+0x133c>
   13acc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ad0:	cmp	r3, #15
   13ad4:	bne	13adc <error@@Base+0x133c>
   13ad8:	b	13c7c <error@@Base+0x14dc>
   13adc:	ldr	r3, [fp, #-12]
   13ae0:	cmp	r3, #9
   13ae4:	beq	13af4 <error@@Base+0x1354>
   13ae8:	ldr	r3, [fp, #-12]
   13aec:	cmp	r3, #8
   13af0:	bne	13b04 <error@@Base+0x1364>
   13af4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13af8:	cmp	r3, #15
   13afc:	bne	13b04 <error@@Base+0x1364>
   13b00:	b	13c7c <error@@Base+0x14dc>
   13b04:	ldr	r3, [fp, #-12]
   13b08:	cmp	r3, #15
   13b0c:	bne	13b2c <error@@Base+0x138c>
   13b10:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b14:	cmp	r3, #9
   13b18:	beq	13c7c <error@@Base+0x14dc>
   13b1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b20:	cmp	r3, #8
   13b24:	bne	13b2c <error@@Base+0x138c>
   13b28:	b	13c7c <error@@Base+0x14dc>
   13b2c:	ldr	r3, [fp, #-16]
   13b30:	cmp	r3, #15
   13b34:	bne	13b6c <error@@Base+0x13cc>
   13b38:	ldr	r3, [fp, #-12]
   13b3c:	cmp	r3, #14
   13b40:	beq	13b5c <error@@Base+0x13bc>
   13b44:	ldr	r3, [fp, #-12]
   13b48:	cmp	r3, #12
   13b4c:	beq	13b5c <error@@Base+0x13bc>
   13b50:	ldr	r3, [fp, #-12]
   13b54:	cmp	r3, #10
   13b58:	bne	13b6c <error@@Base+0x13cc>
   13b5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b60:	cmp	r3, #15
   13b64:	bne	13b6c <error@@Base+0x13cc>
   13b68:	b	13c7c <error@@Base+0x14dc>
   13b6c:	ldr	r3, [fp, #-12]
   13b70:	cmp	r3, #15
   13b74:	bne	13bac <error@@Base+0x140c>
   13b78:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b7c:	cmp	r3, #14
   13b80:	beq	13b9c <error@@Base+0x13fc>
   13b84:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b88:	cmp	r3, #12
   13b8c:	beq	13b9c <error@@Base+0x13fc>
   13b90:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b94:	cmp	r3, #10
   13b98:	bne	13bac <error@@Base+0x140c>
   13b9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ba0:	cmp	r3, #15
   13ba4:	bne	13bac <error@@Base+0x140c>
   13ba8:	b	13c7c <error@@Base+0x14dc>
   13bac:	ldr	r3, [fp, #-12]
   13bb0:	cmp	r3, #7
   13bb4:	bne	13bc8 <error@@Base+0x1428>
   13bb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bbc:	cmp	r3, #7
   13bc0:	bne	13bc8 <error@@Base+0x1428>
   13bc4:	b	13c7c <error@@Base+0x14dc>
   13bc8:	ldr	r3, [fp, #-12]
   13bcc:	cmp	r3, #9
   13bd0:	beq	13c04 <error@@Base+0x1464>
   13bd4:	ldr	r3, [fp, #-12]
   13bd8:	cmp	r3, #8
   13bdc:	beq	13c04 <error@@Base+0x1464>
   13be0:	ldr	r3, [fp, #-12]
   13be4:	cmp	r3, #15
   13be8:	beq	13c04 <error@@Base+0x1464>
   13bec:	ldr	r3, [fp, #-12]
   13bf0:	cmp	r3, #7
   13bf4:	beq	13c04 <error@@Base+0x1464>
   13bf8:	ldr	r3, [fp, #-12]
   13bfc:	cmp	r3, #16
   13c00:	bne	13c14 <error@@Base+0x1474>
   13c04:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c08:	cmp	r3, #16
   13c0c:	bne	13c14 <error@@Base+0x1474>
   13c10:	b	13c7c <error@@Base+0x14dc>
   13c14:	ldr	r3, [fp, #-12]
   13c18:	cmp	r3, #16
   13c1c:	bne	13c60 <error@@Base+0x14c0>
   13c20:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c24:	cmp	r3, #9
   13c28:	beq	13c7c <error@@Base+0x14dc>
   13c2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c30:	cmp	r3, #8
   13c34:	beq	13c7c <error@@Base+0x14dc>
   13c38:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c3c:	cmp	r3, #15
   13c40:	beq	13c7c <error@@Base+0x14dc>
   13c44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c48:	cmp	r3, #7
   13c4c:	beq	13c7c <error@@Base+0x14dc>
   13c50:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c54:	cmp	r3, #16
   13c58:	bne	13c60 <error@@Base+0x14c0>
   13c5c:	b	13c7c <error@@Base+0x14dc>
   13c60:	ldr	r3, [fp, #-12]
   13c64:	cmp	r3, #5
   13c68:	bne	13c90 <error@@Base+0x14f0>
   13c6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c70:	cmp	r3, #5
   13c74:	bne	13c90 <error@@Base+0x14f0>
   13c78:	nop			; (mov r0, r0)
   13c7c:	ldr	r3, [fp, #-8]
   13c80:	ldr	r3, [r3, #4]
   13c84:	cmp	r3, #0
   13c88:	bne	138bc <error@@Base+0x111c>
   13c8c:	b	13c94 <error@@Base+0x14f4>
   13c90:	nop			; (mov r0, r0)
   13c94:	ldr	r0, [fp, #-8]
   13c98:	bl	137f8 <error@@Base+0x1058>
   13c9c:	mov	r3, r0
   13ca0:	mov	r0, r3
   13ca4:	sub	sp, fp, #4
   13ca8:	pop	{fp, pc}
   13cac:	push	{fp, lr}
   13cb0:	add	fp, sp, #4
   13cb4:	sub	sp, sp, #24
   13cb8:	str	r0, [fp, #-24]	; 0xffffffe8
   13cbc:	str	r1, [fp, #-28]	; 0xffffffe4
   13cc0:	mov	r3, #0
   13cc4:	str	r3, [fp, #-12]
   13cc8:	mov	r3, #0
   13ccc:	str	r3, [fp, #-16]
   13cd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13cd4:	str	r3, [fp, #-8]
   13cd8:	b	13d74 <error@@Base+0x15d4>
   13cdc:	ldr	r3, [fp, #-8]
   13ce0:	cmp	r3, #0
   13ce4:	bne	13d08 <error@@Base+0x1568>
   13ce8:	ldr	r3, [pc, #164]	; 13d94 <error@@Base+0x15f4>
   13cec:	add	r3, pc, r3
   13cf0:	mov	r2, #249	; 0xf9
   13cf4:	ldr	r1, [pc, #156]	; 13d98 <error@@Base+0x15f8>
   13cf8:	add	r1, pc, r1
   13cfc:	ldr	r0, [pc, #152]	; 13d9c <error@@Base+0x15fc>
   13d00:	add	r0, pc, r0
   13d04:	bl	10bbc <__assert_fail@plt>
   13d08:	ldr	r3, [fp, #-8]
   13d0c:	ldr	r3, [r3, #12]
   13d10:	mov	r2, r3
   13d14:	sub	r3, fp, #20
   13d18:	mov	r1, r3
   13d1c:	mov	r0, r2
   13d20:	bl	10a54 <utf8proc_encode_char@plt>
   13d24:	mov	r3, r0
   13d28:	str	r3, [fp, #-16]
   13d2c:	ldr	r3, [fp, #-16]
   13d30:	cmp	r3, #0
   13d34:	bne	13d58 <error@@Base+0x15b8>
   13d38:	ldr	r3, [pc, #96]	; 13da0 <error@@Base+0x1600>
   13d3c:	add	r3, pc, r3
   13d40:	mov	r2, #253	; 0xfd
   13d44:	ldr	r1, [pc, #88]	; 13da4 <error@@Base+0x1604>
   13d48:	add	r1, pc, r1
   13d4c:	ldr	r0, [pc, #84]	; 13da8 <error@@Base+0x1608>
   13d50:	add	r0, pc, r0
   13d54:	bl	10bbc <__assert_fail@plt>
   13d58:	ldr	r2, [fp, #-12]
   13d5c:	ldr	r3, [fp, #-16]
   13d60:	add	r3, r2, r3
   13d64:	str	r3, [fp, #-12]
   13d68:	ldr	r3, [fp, #-8]
   13d6c:	ldr	r3, [r3, #4]
   13d70:	str	r3, [fp, #-8]
   13d74:	ldr	r2, [fp, #-8]
   13d78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13d7c:	cmp	r2, r3
   13d80:	bne	13cdc <error@@Base+0x153c>
   13d84:	ldr	r3, [fp, #-12]
   13d88:	mov	r0, r3
   13d8c:	sub	sp, fp, #4
   13d90:	pop	{fp, pc}
   13d94:	andeq	r4, r0, ip, asr #10
   13d98:	andeq	r4, r0, r4, asr #9
   13d9c:	andeq	r4, r0, r0, lsl #10
   13da0:	strdeq	r4, [r0], -ip
   13da4:	andeq	r4, r0, r4, ror r4
   13da8:	andeq	r4, r0, r0, asr #9
   13dac:	push	{fp, lr}
   13db0:	add	fp, sp, #4
   13db4:	sub	sp, sp, #24
   13db8:	str	r0, [fp, #-16]
   13dbc:	str	r1, [fp, #-20]	; 0xffffffec
   13dc0:	str	r2, [fp, #-24]	; 0xffffffe8
   13dc4:	mov	r3, #0
   13dc8:	str	r3, [fp, #-12]
   13dcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13dd0:	str	r3, [fp, #-8]
   13dd4:	b	13e44 <error@@Base+0x16a4>
   13dd8:	ldr	r3, [fp, #-8]
   13ddc:	cmp	r3, #0
   13de0:	bne	13e04 <error@@Base+0x1664>
   13de4:	ldr	r3, [pc, #136]	; 13e74 <error@@Base+0x16d4>
   13de8:	add	r3, pc, r3
   13dec:	ldr	r2, [pc, #132]	; 13e78 <error@@Base+0x16d8>
   13df0:	ldr	r1, [pc, #132]	; 13e7c <error@@Base+0x16dc>
   13df4:	add	r1, pc, r1
   13df8:	ldr	r0, [pc, #128]	; 13e80 <error@@Base+0x16e0>
   13dfc:	add	r0, pc, r0
   13e00:	bl	10bbc <__assert_fail@plt>
   13e04:	ldr	r3, [fp, #-8]
   13e08:	ldr	r3, [r3, #12]
   13e0c:	mov	r0, r3
   13e10:	ldr	r2, [fp, #-16]
   13e14:	ldr	r3, [fp, #-12]
   13e18:	add	r3, r2, r3
   13e1c:	mov	r1, r3
   13e20:	bl	10a54 <utf8proc_encode_char@plt>
   13e24:	mov	r3, r0
   13e28:	mov	r2, r3
   13e2c:	ldr	r3, [fp, #-12]
   13e30:	add	r3, r3, r2
   13e34:	str	r3, [fp, #-12]
   13e38:	ldr	r3, [fp, #-8]
   13e3c:	ldr	r3, [r3, #4]
   13e40:	str	r3, [fp, #-8]
   13e44:	ldr	r2, [fp, #-8]
   13e48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e4c:	cmp	r2, r3
   13e50:	bne	13dd8 <error@@Base+0x1638>
   13e54:	ldr	r2, [fp, #-16]
   13e58:	ldr	r3, [fp, #-12]
   13e5c:	add	r3, r2, r3
   13e60:	mov	r2, #0
   13e64:	strb	r2, [r3]
   13e68:	nop			; (mov r0, r0)
   13e6c:	sub	sp, fp, #4
   13e70:	pop	{fp, pc}
   13e74:	andeq	r4, r0, r4, ror #8
   13e78:	andeq	r0, r0, sp, lsl #2
   13e7c:	andeq	r4, r0, r8, asr #7
   13e80:	andeq	r4, r0, r4, lsl #8
   13e84:	push	{fp, lr}
   13e88:	add	fp, sp, #4
   13e8c:	sub	sp, sp, #32
   13e90:	str	r0, [fp, #-24]	; 0xffffffe8
   13e94:	str	r1, [fp, #-28]	; 0xffffffe4
   13e98:	str	r2, [fp, #-32]	; 0xffffffe0
   13e9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13ea0:	ldr	r3, [r3, #4]
   13ea4:	str	r3, [fp, #-8]
   13ea8:	ldr	r1, [fp, #-8]
   13eac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13eb0:	bl	13cac <error@@Base+0x150c>
   13eb4:	str	r0, [fp, #-12]
   13eb8:	ldr	r3, [fp, #-12]
   13ebc:	add	r3, r3, #1
   13ec0:	mov	r0, r3
   13ec4:	bl	10acc <malloc@plt>
   13ec8:	mov	r3, r0
   13ecc:	str	r3, [fp, #-16]
   13ed0:	ldr	r2, [fp, #-8]
   13ed4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13ed8:	ldr	r0, [fp, #-16]
   13edc:	bl	13dac <error@@Base+0x160c>
   13ee0:	mov	r1, #12
   13ee4:	mov	r0, #1
   13ee8:	bl	11c4c <__assert_fail@plt+0x1090>
   13eec:	str	r0, [fp, #-20]	; 0xffffffec
   13ef0:	ldr	r0, [fp, #-16]
   13ef4:	bl	10b50 <utf8proc_NFC@plt>
   13ef8:	mov	r2, r0
   13efc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f00:	str	r2, [r3, #8]
   13f04:	ldr	r1, [fp, #-20]	; 0xffffffec
   13f08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13f0c:	bl	1127c <__assert_fail@plt+0x6c0>
   13f10:	ldr	r0, [fp, #-16]
   13f14:	bl	10a30 <free@plt>
   13f18:	nop			; (mov r0, r0)
   13f1c:	sub	sp, fp, #4
   13f20:	pop	{fp, pc}
   13f24:	push	{fp, lr}
   13f28:	add	fp, sp, #4
   13f2c:	sub	sp, sp, #16
   13f30:	str	r0, [fp, #-16]
   13f34:	ldr	r3, [fp, #-16]
   13f38:	mov	r0, r3
   13f3c:	bl	10a3c <utf8proc_get_property@plt>
   13f40:	str	r0, [fp, #-8]
   13f44:	ldr	r3, [fp, #-8]
   13f48:	ldrsh	r3, [r3]
   13f4c:	cmp	r3, #1
   13f50:	blt	13f6c <error@@Base+0x17cc>
   13f54:	cmp	r3, #12
   13f58:	ble	13f64 <error@@Base+0x17c4>
   13f5c:	cmp	r3, #29
   13f60:	bne	13f6c <error@@Base+0x17cc>
   13f64:	mov	r3, #1
   13f68:	b	13f70 <error@@Base+0x17d0>
   13f6c:	mov	r3, #0
   13f70:	mov	r0, r3
   13f74:	sub	sp, fp, #4
   13f78:	pop	{fp, pc}
   13f7c:	push	{fp, lr}
   13f80:	add	fp, sp, #4
   13f84:	sub	sp, sp, #16
   13f88:	str	r0, [fp, #-16]
   13f8c:	str	r1, [fp, #-20]	; 0xffffffec
   13f90:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f94:	ldr	r3, [r3]
   13f98:	str	r3, [fp, #-8]
   13f9c:	b	13fd8 <error@@Base+0x1838>
   13fa0:	ldr	r3, [fp, #-8]
   13fa4:	ldr	r3, [r3, #12]
   13fa8:	mov	r0, r3
   13fac:	bl	13f24 <error@@Base+0x1784>
   13fb0:	mov	r3, r0
   13fb4:	cmp	r3, #0
   13fb8:	beq	13fcc <error@@Base+0x182c>
   13fbc:	ldr	r2, [fp, #-12]
   13fc0:	ldr	r1, [fp, #-8]
   13fc4:	ldr	r0, [fp, #-16]
   13fc8:	bl	13e84 <error@@Base+0x16e4>
   13fcc:	ldr	r3, [fp, #-12]
   13fd0:	ldr	r3, [r3, #4]
   13fd4:	str	r3, [fp, #-8]
   13fd8:	ldr	r0, [fp, #-8]
   13fdc:	bl	13880 <error@@Base+0x10e0>
   13fe0:	str	r0, [fp, #-12]
   13fe4:	ldr	r3, [fp, #-12]
   13fe8:	cmp	r3, #0
   13fec:	bne	13fa0 <error@@Base+0x1800>
   13ff0:	nop			; (mov r0, r0)
   13ff4:	sub	sp, fp, #4
   13ff8:	pop	{fp, pc}
   13ffc:	push	{fp, lr}
   14000:	add	fp, sp, #4
   14004:	sub	sp, sp, #8
   14008:	str	r0, [fp, #-8]
   1400c:	ldr	r3, [fp, #-8]
   14010:	ldr	r3, [r3, #8]
   14014:	mov	r0, r3
   14018:	bl	10a30 <free@plt>
   1401c:	ldr	r0, [fp, #-8]
   14020:	bl	10a30 <free@plt>
   14024:	nop			; (mov r0, r0)
   14028:	sub	sp, fp, #4
   1402c:	pop	{fp, pc}
   14030:	push	{fp, lr}
   14034:	add	fp, sp, #4
   14038:	sub	sp, sp, #24
   1403c:	str	r0, [fp, #-16]
   14040:	mov	r3, r1
   14044:	str	r2, [fp, #-24]	; 0xffffffe8
   14048:	strb	r3, [fp, #-20]	; 0xffffffec
   1404c:	mov	r1, #16
   14050:	mov	r0, #1
   14054:	bl	11c4c <__assert_fail@plt+0x1090>
   14058:	str	r0, [fp, #-8]
   1405c:	ldr	r3, [fp, #-8]
   14060:	ldrb	r2, [fp, #-20]	; 0xffffffec
   14064:	strb	r2, [r3, #8]
   14068:	ldr	r3, [fp, #-8]
   1406c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14070:	str	r2, [r3, #12]
   14074:	ldr	r1, [fp, #-8]
   14078:	ldr	r0, [fp, #-16]
   1407c:	bl	1127c <__assert_fail@plt+0x6c0>
   14080:	nop			; (mov r0, r0)
   14084:	sub	sp, fp, #4
   14088:	pop	{fp, pc}
   1408c:	push	{fp, lr}
   14090:	add	fp, sp, #4
   14094:	sub	sp, sp, #112	; 0x70
   14098:	str	r0, [fp, #-112]	; 0xffffff90
   1409c:	mov	r3, #0
   140a0:	strh	r3, [fp, #-6]
   140a4:	sub	r3, fp, #108	; 0x6c
   140a8:	ldr	r2, [fp, #-112]	; 0xffffff90
   140ac:	mov	r1, #99	; 0x63
   140b0:	mov	r0, r3
   140b4:	bl	10a48 <fgets@plt>
   140b8:	mov	r3, r0
   140bc:	cmp	r3, #0
   140c0:	beq	14158 <error@@Base+0x19b8>
   140c4:	sub	r3, fp, #108	; 0x6c
   140c8:	mov	r2, #51	; 0x33
   140cc:	ldr	r1, [pc, #156]	; 14170 <error@@Base+0x19d0>
   140d0:	add	r1, pc, r1
   140d4:	mov	r0, r3
   140d8:	bl	10b98 <strncmp@plt>
   140dc:	mov	r3, r0
   140e0:	cmp	r3, #0
   140e4:	bne	14158 <error@@Base+0x19b8>
   140e8:	b	14124 <error@@Base+0x1984>
   140ec:	sub	r3, fp, #108	; 0x6c
   140f0:	ldr	r2, [pc, #124]	; 14174 <error@@Base+0x19d4>
   140f4:	add	r2, pc, r2
   140f8:	mov	r1, r2
   140fc:	mov	r0, r3
   14100:	bl	10a0c <strcmp@plt>
   14104:	mov	r3, r0
   14108:	cmp	r3, #0
   1410c:	bne	14124 <error@@Base+0x1984>
   14110:	ldrsh	r3, [fp, #-6]
   14114:	uxth	r3, r3
   14118:	add	r3, r3, #1
   1411c:	uxth	r3, r3
   14120:	strh	r3, [fp, #-6]
   14124:	ldrsh	r3, [fp, #-6]
   14128:	cmp	r3, #1
   1412c:	bgt	14150 <error@@Base+0x19b0>
   14130:	sub	r3, fp, #108	; 0x6c
   14134:	ldr	r2, [fp, #-112]	; 0xffffff90
   14138:	mov	r1, #99	; 0x63
   1413c:	mov	r0, r3
   14140:	bl	10a48 <fgets@plt>
   14144:	mov	r3, r0
   14148:	cmp	r3, #0
   1414c:	bne	140ec <error@@Base+0x194c>
   14150:	mov	r3, #1
   14154:	b	14164 <error@@Base+0x19c4>
   14158:	ldr	r0, [fp, #-112]	; 0xffffff90
   1415c:	bl	10a6c <rewind@plt>
   14160:	mov	r3, #0
   14164:	mov	r0, r3
   14168:	sub	sp, fp, #4
   1416c:	pop	{fp, pc}
   14170:	muleq	r0, r0, r1
   14174:	andeq	r4, r0, r4, lsr #3
   14178:	push	{r4, fp, lr}
   1417c:	add	fp, sp, #8
   14180:	sub	sp, sp, #52	; 0x34
   14184:	str	r0, [fp, #-48]	; 0xffffffd0
   14188:	str	r1, [fp, #-52]	; 0xffffffcc
   1418c:	str	r3, [fp, #-60]	; 0xffffffc4
   14190:	mov	r3, r2
   14194:	strb	r3, [fp, #-56]	; 0xffffffc8
   14198:	ldr	r4, [pc, #340]	; 142f4 <error@@Base+0x1b54>
   1419c:	add	r4, pc, r4
   141a0:	mov	r3, #0
   141a4:	strb	r3, [fp, #-13]
   141a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   141ac:	bl	10bb0 <getc@plt>
   141b0:	str	r0, [fp, #-20]	; 0xffffffec
   141b4:	b	142dc <error@@Base+0x1b3c>
   141b8:	ldr	r3, [pc, #312]	; 142f8 <error@@Base+0x1b58>
   141bc:	ldr	r2, [r4, r3]
   141c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   141c4:	add	r3, r2, r3
   141c8:	ldrsb	r3, [r3]
   141cc:	str	r3, [fp, #-24]	; 0xffffffe8
   141d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   141d4:	cmp	r3, #0
   141d8:	bgt	141ec <error@@Base+0x1a4c>
   141dc:	ldr	r3, [pc, #280]	; 142fc <error@@Base+0x1b5c>
   141e0:	add	r3, pc, r3
   141e4:	mov	r0, r3
   141e8:	bl	127a0 <error@@Base>
   141ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   141f0:	uxtb	r3, r3
   141f4:	strb	r3, [fp, #-36]	; 0xffffffdc
   141f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   141fc:	cmp	r3, #1
   14200:	ble	14250 <error@@Base+0x1ab0>
   14204:	sub	r0, fp, #36	; 0x24
   14208:	add	r0, r0, #1
   1420c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14210:	sub	r3, r3, #1
   14214:	mov	r2, r3
   14218:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1421c:	mov	r1, #1
   14220:	bl	10aa8 <fread@plt>
   14224:	mov	r3, r0
   14228:	str	r3, [fp, #-28]	; 0xffffffe4
   1422c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14230:	sub	r2, r3, #1
   14234:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14238:	cmp	r2, r3
   1423c:	beq	14250 <error@@Base+0x1ab0>
   14240:	ldr	r3, [pc, #184]	; 14300 <error@@Base+0x1b60>
   14244:	add	r3, pc, r3
   14248:	mov	r0, r3
   1424c:	bl	127a0 <error@@Base>
   14250:	sub	r2, fp, #40	; 0x28
   14254:	sub	r3, fp, #36	; 0x24
   14258:	mov	r1, #4
   1425c:	mov	r0, r3
   14260:	bl	10ab4 <utf8proc_iterate@plt>
   14264:	str	r0, [fp, #-32]	; 0xffffffe0
   14268:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1426c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14270:	cmp	r2, r3
   14274:	beq	1428c <error@@Base+0x1aec>
   14278:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1427c:	bl	10b80 <utf8proc_errmsg@plt>
   14280:	mov	r3, r0
   14284:	mov	r0, r3
   14288:	bl	127a0 <error@@Base>
   1428c:	ldrb	r3, [fp, #-56]	; 0xffffffc8
   14290:	cmp	r3, #0
   14294:	beq	142b4 <error@@Base+0x1b14>
   14298:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1429c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   142a0:	cmp	r2, r3
   142a4:	bne	142b4 <error@@Base+0x1b14>
   142a8:	mov	r3, #1
   142ac:	strb	r3, [fp, #-13]
   142b0:	b	142d0 <error@@Base+0x1b30>
   142b4:	ldrb	r3, [fp, #-13]
   142b8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   142bc:	mov	r1, r3
   142c0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   142c4:	bl	14030 <error@@Base+0x1890>
   142c8:	mov	r3, #0
   142cc:	strb	r3, [fp, #-13]
   142d0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   142d4:	bl	10bb0 <getc@plt>
   142d8:	str	r0, [fp, #-20]	; 0xffffffec
   142dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   142e0:	cmn	r3, #1
   142e4:	bne	141b8 <error@@Base+0x1a18>
   142e8:	nop			; (mov r0, r0)
   142ec:	sub	sp, fp, #8
   142f0:	pop	{r4, fp, pc}
   142f4:	andeq	r4, r1, ip, asr lr
   142f8:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   142fc:	strdeq	r4, [r0], -r0
   14300:	andeq	r4, r0, r4, lsr #1
   14304:	push	{fp, lr}
   14308:	add	fp, sp, #4
   1430c:	sub	sp, sp, #16
   14310:	str	r0, [fp, #-16]
   14314:	ldr	r0, [fp, #-16]
   14318:	bl	10a3c <utf8proc_get_property@plt>
   1431c:	str	r0, [fp, #-8]
   14320:	ldr	r3, [fp, #-16]
   14324:	cmp	r3, #13
   14328:	bgt	14348 <error@@Base+0x1ba8>
   1432c:	cmp	r3, #11
   14330:	bge	1435c <error@@Base+0x1bbc>
   14334:	cmp	r3, #9
   14338:	beq	1435c <error@@Base+0x1bbc>
   1433c:	cmp	r3, #10
   14340:	beq	14354 <error@@Base+0x1bb4>
   14344:	b	14364 <error@@Base+0x1bc4>
   14348:	cmp	r3, #160	; 0xa0
   1434c:	beq	1435c <error@@Base+0x1bbc>
   14350:	b	14364 <error@@Base+0x1bc4>
   14354:	mov	r3, #0
   14358:	b	14384 <error@@Base+0x1be4>
   1435c:	mov	r3, #1
   14360:	b	14384 <error@@Base+0x1be4>
   14364:	ldr	r3, [fp, #-8]
   14368:	ldrsh	r3, [r3]
   1436c:	sub	r3, r3, #23
   14370:	cmp	r3, #2
   14374:	bhi	14380 <error@@Base+0x1be0>
   14378:	mov	r3, #1
   1437c:	b	14384 <error@@Base+0x1be4>
   14380:	mov	r3, #0
   14384:	mov	r0, r3
   14388:	sub	sp, fp, #4
   1438c:	pop	{fp, pc}
   14390:	push	{fp, lr}
   14394:	add	fp, sp, #4
   14398:	sub	sp, sp, #24
   1439c:	str	r0, [fp, #-24]	; 0xffffffe8
   143a0:	str	r1, [fp, #-28]	; 0xffffffe4
   143a4:	mov	r3, #0
   143a8:	strb	r3, [fp, #-5]
   143ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   143b0:	str	r3, [fp, #-12]
   143b4:	b	143ec <error@@Base+0x1c4c>
   143b8:	ldr	r3, [fp, #-12]
   143bc:	ldr	r3, [r3, #12]
   143c0:	mov	r0, r3
   143c4:	bl	14304 <error@@Base+0x1b64>
   143c8:	mov	r3, r0
   143cc:	cmp	r3, #0
   143d0:	beq	143e0 <error@@Base+0x1c40>
   143d4:	ldr	r3, [fp, #-12]
   143d8:	mov	r2, #32
   143dc:	str	r2, [r3, #12]
   143e0:	ldr	r3, [fp, #-12]
   143e4:	ldr	r3, [r3, #4]
   143e8:	str	r3, [fp, #-12]
   143ec:	ldr	r3, [fp, #-12]
   143f0:	cmp	r3, #0
   143f4:	bne	143b8 <error@@Base+0x1c18>
   143f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   143fc:	str	r3, [fp, #-12]
   14400:	b	144f8 <error@@Base+0x1d58>
   14404:	ldr	r3, [fp, #-12]
   14408:	ldr	r3, [r3, #4]
   1440c:	str	r3, [fp, #-16]
   14410:	ldr	r3, [fp, #-12]
   14414:	ldr	r3, [r3, #12]
   14418:	cmp	r3, #32
   1441c:	bne	14458 <error@@Base+0x1cb8>
   14420:	ldrb	r3, [fp, #-5]
   14424:	cmp	r3, #0
   14428:	beq	14474 <error@@Base+0x1cd4>
   1442c:	ldr	r3, [fp, #-16]
   14430:	cmp	r3, #0
   14434:	beq	14474 <error@@Base+0x1cd4>
   14438:	ldr	r3, [fp, #-16]
   1443c:	ldr	r3, [r3, #12]
   14440:	cmp	r3, #32
   14444:	beq	14474 <error@@Base+0x1cd4>
   14448:	ldr	r3, [fp, #-16]
   1444c:	ldr	r3, [r3, #12]
   14450:	cmp	r3, #10
   14454:	beq	14474 <error@@Base+0x1cd4>
   14458:	ldr	r3, [fp, #-12]
   1445c:	ldr	r3, [r3, #12]
   14460:	cmp	r3, #10
   14464:	bne	144d4 <error@@Base+0x1d34>
   14468:	ldrb	r3, [fp, #-5]
   1446c:	cmp	r3, #0
   14470:	bne	144d4 <error@@Base+0x1d34>
   14474:	ldrb	r3, [fp, #-5]
   14478:	cmp	r3, #0
   1447c:	beq	144bc <error@@Base+0x1d1c>
   14480:	ldr	r3, [fp, #-16]
   14484:	cmp	r3, #0
   14488:	beq	144bc <error@@Base+0x1d1c>
   1448c:	ldr	r3, [fp, #-16]
   14490:	ldr	r3, [r3, #12]
   14494:	cmp	r3, #32
   14498:	bne	144bc <error@@Base+0x1d1c>
   1449c:	ldr	r3, [fp, #-16]
   144a0:	ldrb	r2, [r3, #8]
   144a4:	ldr	r3, [fp, #-12]
   144a8:	ldrb	r3, [r3, #8]
   144ac:	orr	r3, r2, r3
   144b0:	uxtb	r2, r3
   144b4:	ldr	r3, [fp, #-16]
   144b8:	strb	r2, [r3, #8]
   144bc:	ldr	r1, [fp, #-12]
   144c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   144c4:	bl	1132c <__assert_fail@plt+0x770>
   144c8:	ldr	r0, [fp, #-12]
   144cc:	bl	10a30 <free@plt>
   144d0:	b	144f0 <error@@Base+0x1d50>
   144d4:	ldr	r3, [fp, #-12]
   144d8:	ldr	r3, [r3, #12]
   144dc:	cmp	r3, #10
   144e0:	movne	r3, #1
   144e4:	moveq	r3, #0
   144e8:	uxtb	r3, r3
   144ec:	strb	r3, [fp, #-5]
   144f0:	ldr	r3, [fp, #-16]
   144f4:	str	r3, [fp, #-12]
   144f8:	ldr	r3, [fp, #-12]
   144fc:	cmp	r3, #0
   14500:	bne	14404 <error@@Base+0x1c64>
   14504:	nop			; (mov r0, r0)
   14508:	sub	sp, fp, #4
   1450c:	pop	{fp, pc}
   14510:	push	{fp, lr}
   14514:	add	fp, sp, #4
   14518:	sub	sp, sp, #16
   1451c:	str	r0, [fp, #-16]
   14520:	ldr	r3, [fp, #-16]
   14524:	str	r3, [fp, #-8]
   14528:	b	14558 <error@@Base+0x1db8>
   1452c:	ldr	r3, [fp, #-8]
   14530:	ldr	r3, [r3, #12]
   14534:	mov	r0, r3
   14538:	bl	10a84 <utf8proc_tolower@plt>
   1453c:	mov	r3, r0
   14540:	mov	r2, r3
   14544:	ldr	r3, [fp, #-8]
   14548:	str	r2, [r3, #12]
   1454c:	ldr	r3, [fp, #-8]
   14550:	ldr	r3, [r3, #4]
   14554:	str	r3, [fp, #-8]
   14558:	ldr	r3, [fp, #-8]
   1455c:	cmp	r3, #0
   14560:	bne	1452c <error@@Base+0x1d8c>
   14564:	nop			; (mov r0, r0)
   14568:	sub	sp, fp, #4
   1456c:	pop	{fp, pc}
   14570:	push	{fp, lr}
   14574:	add	fp, sp, #4
   14578:	sub	sp, sp, #24
   1457c:	str	r0, [fp, #-16]
   14580:	str	r1, [fp, #-20]	; 0xffffffec
   14584:	str	r2, [fp, #-24]	; 0xffffffe8
   14588:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1458c:	ldrb	r3, [r3]
   14590:	cmp	r3, #0
   14594:	beq	145c0 <error@@Base+0x1e20>
   14598:	ldr	r3, [fp, #-20]	; 0xffffffec
   1459c:	cmp	r3, #0
   145a0:	bne	145c0 <error@@Base+0x1e20>
   145a4:	ldr	r3, [pc, #288]	; 146cc <error@@Base+0x1f2c>
   145a8:	add	r3, pc, r3
   145ac:	mov	r1, r3
   145b0:	ldr	r3, [pc, #280]	; 146d0 <error@@Base+0x1f30>
   145b4:	add	r3, pc, r3
   145b8:	mov	r0, r3
   145bc:	bl	12808 <error@@Base+0x68>
   145c0:	ldr	r3, [fp, #-16]
   145c4:	ldr	r3, [r3, #4]
   145c8:	str	r3, [fp, #-8]
   145cc:	ldr	r3, [pc, #256]	; 146d4 <error@@Base+0x1f34>
   145d0:	add	r3, pc, r3
   145d4:	mov	r1, r3
   145d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   145dc:	bl	11d8c <__assert_fail@plt+0x11d0>
   145e0:	str	r0, [fp, #-12]
   145e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145e8:	ldrb	r3, [r3]
   145ec:	cmp	r3, #0
   145f0:	beq	1460c <error@@Base+0x1e6c>
   145f4:	ldr	r0, [fp, #-12]
   145f8:	bl	1408c <error@@Base+0x18ec>
   145fc:	mov	r3, r0
   14600:	mov	r2, r3
   14604:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14608:	strb	r2, [r3, #11]
   1460c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14610:	ldrb	r3, [r3, #1]
   14614:	mov	r2, r3
   14618:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1461c:	ldr	r3, [r3, #4]
   14620:	cmp	r3, #0
   14624:	beq	14634 <error@@Base+0x1e94>
   14628:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1462c:	ldr	r3, [r3, #4]
   14630:	b	14638 <error@@Base+0x1e98>
   14634:	mov	r3, #94	; 0x5e
   14638:	ldr	r1, [fp, #-16]
   1463c:	ldr	r0, [fp, #-12]
   14640:	bl	14178 <error@@Base+0x19d8>
   14644:	ldr	r0, [fp, #-12]
   14648:	bl	11e60 <__assert_fail@plt+0x12a4>
   1464c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14650:	ldrb	r3, [r3, #9]
   14654:	cmp	r3, #0
   14658:	beq	14688 <error@@Base+0x1ee8>
   1465c:	ldr	r3, [fp, #-8]
   14660:	cmp	r3, #0
   14664:	beq	14674 <error@@Base+0x1ed4>
   14668:	ldr	r3, [fp, #-8]
   1466c:	ldr	r3, [r3, #4]
   14670:	b	1467c <error@@Base+0x1edc>
   14674:	ldr	r3, [fp, #-16]
   14678:	ldr	r3, [r3]
   1467c:	mov	r1, r3
   14680:	ldr	r0, [fp, #-16]
   14684:	bl	14390 <error@@Base+0x1bf0>
   14688:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1468c:	ldrb	r3, [r3, #10]
   14690:	cmp	r3, #0
   14694:	beq	146c0 <error@@Base+0x1f20>
   14698:	ldr	r3, [fp, #-8]
   1469c:	cmp	r3, #0
   146a0:	beq	146b0 <error@@Base+0x1f10>
   146a4:	ldr	r3, [fp, #-8]
   146a8:	ldr	r3, [r3, #4]
   146ac:	b	146b8 <error@@Base+0x1f18>
   146b0:	ldr	r3, [fp, #-16]
   146b4:	ldr	r3, [r3]
   146b8:	mov	r0, r3
   146bc:	bl	14510 <error@@Base+0x1d70>
   146c0:	nop			; (mov r0, r0)
   146c4:	sub	sp, fp, #4
   146c8:	pop	{fp, pc}
   146cc:	andeq	r3, r0, r8, asr sp
   146d0:	andeq	r3, r0, r8, asr sp
   146d4:	andeq	r3, r0, ip, asr #26
   146d8:	push	{fp, lr}
   146dc:	add	fp, sp, #4
   146e0:	sub	sp, sp, #16
   146e4:	str	r0, [fp, #-16]
   146e8:	str	r1, [fp, #-20]	; 0xffffffec
   146ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   146f0:	ldr	r0, [fp, #-16]
   146f4:	bl	10a54 <utf8proc_encode_char@plt>
   146f8:	str	r0, [fp, #-8]
   146fc:	ldr	r3, [fp, #-8]
   14700:	cmp	r3, #0
   14704:	bgt	14718 <error@@Base+0x1f78>
   14708:	ldr	r3, [pc, #28]	; 1472c <error@@Base+0x1f8c>
   1470c:	add	r3, pc, r3
   14710:	mov	r0, r3
   14714:	bl	127a0 <error@@Base>
   14718:	ldr	r3, [fp, #-8]
   1471c:	sxtb	r3, r3
   14720:	mov	r0, r3
   14724:	sub	sp, fp, #4
   14728:	pop	{fp, pc}
   1472c:	andeq	r3, r0, r4, lsl ip
   14730:	push	{fp, lr}
   14734:	add	fp, sp, #4
   14738:	sub	sp, sp, #16
   1473c:	str	r0, [fp, #-16]
   14740:	ldr	r0, [fp, #-16]
   14744:	bl	10a3c <utf8proc_get_property@plt>
   14748:	str	r0, [fp, #-8]
   1474c:	ldr	r3, [fp, #-16]
   14750:	cmp	r3, #32
   14754:	bne	14760 <error@@Base+0x1fc0>
   14758:	mov	r3, #1
   1475c:	b	1478c <error@@Base+0x1fec>
   14760:	ldr	r3, [fp, #-8]
   14764:	ldrsh	r3, [r3]
   14768:	cmp	r3, #1
   1476c:	blt	14788 <error@@Base+0x1fe8>
   14770:	cmp	r3, #22
   14774:	ble	14780 <error@@Base+0x1fe0>
   14778:	cmp	r3, #29
   1477c:	bne	14788 <error@@Base+0x1fe8>
   14780:	mov	r3, #1
   14784:	b	1478c <error@@Base+0x1fec>
   14788:	mov	r3, #0
   1478c:	mov	r0, r3
   14790:	sub	sp, fp, #4
   14794:	pop	{fp, pc}
   14798:	push	{fp, lr}
   1479c:	add	fp, sp, #4
   147a0:	sub	sp, sp, #8
   147a4:	str	r0, [fp, #-8]
   147a8:	ldr	r0, [fp, #-8]
   147ac:	bl	10b14 <utf8proc_category@plt>
   147b0:	mov	r3, r0
   147b4:	sub	r3, r3, #6
   147b8:	cmp	r3, #2
   147bc:	bhi	147c8 <error@@Base+0x2028>
   147c0:	mov	r3, #1
   147c4:	b	147cc <error@@Base+0x202c>
   147c8:	mov	r3, #0
   147cc:	mov	r0, r3
   147d0:	sub	sp, fp, #4
   147d4:	pop	{fp, pc}
   147d8:	push	{fp, lr}
   147dc:	add	fp, sp, #4
   147e0:	sub	sp, sp, #24
   147e4:	str	r1, [fp, #-20]	; 0xffffffec
   147e8:	str	r2, [fp, #-24]	; 0xffffffe8
   147ec:	mov	r2, r3
   147f0:	mov	r3, r0
   147f4:	strb	r3, [fp, #-16]
   147f8:	mov	r3, r2
   147fc:	strb	r3, [fp, #-28]	; 0xffffffe4
   14800:	mov	r3, #0
   14804:	strh	r3, [fp, #-6]
   14808:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1480c:	str	r3, [fp, #-12]
   14810:	ldrb	r3, [fp, #-16]
   14814:	cmp	r3, #0
   14818:	beq	14840 <error@@Base+0x20a0>
   1481c:	ldr	r1, [fp, #-12]
   14820:	mov	r0, #94	; 0x5e
   14824:	bl	146d8 <error@@Base+0x1f38>
   14828:	mov	r3, r0
   1482c:	uxth	r2, r3
   14830:	ldrh	r3, [fp, #-6]
   14834:	add	r3, r2, r3
   14838:	uxth	r3, r3
   1483c:	strh	r3, [fp, #-6]
   14840:	ldr	r3, [fp, #-20]	; 0xffffffec
   14844:	cmp	r3, #10
   14848:	bne	14888 <error@@Base+0x20e8>
   1484c:	ldrsh	r3, [fp, #-6]
   14850:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14854:	add	r2, r2, r3
   14858:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   1485c:	cmp	r3, #0
   14860:	beq	14870 <error@@Base+0x20d0>
   14864:	ldr	r3, [pc, #296]	; 14994 <error@@Base+0x21f4>
   14868:	add	r3, pc, r3
   1486c:	b	14878 <error@@Base+0x20d8>
   14870:	ldr	r3, [pc, #288]	; 14998 <error@@Base+0x21f8>
   14874:	add	r3, pc, r3
   14878:	mov	r1, r3
   1487c:	mov	r0, r2
   14880:	bl	10b68 <sprintf@plt>
   14884:	b	14988 <error@@Base+0x21e8>
   14888:	ldr	r0, [fp, #-20]	; 0xffffffec
   1488c:	bl	14730 <error@@Base+0x1f90>
   14890:	mov	r3, r0
   14894:	cmp	r3, #0
   14898:	beq	14938 <error@@Base+0x2198>
   1489c:	ldr	r0, [fp, #-20]	; 0xffffffec
   148a0:	bl	14798 <error@@Base+0x1ff8>
   148a4:	mov	r3, r0
   148a8:	cmp	r3, #0
   148ac:	beq	148e0 <error@@Base+0x2140>
   148b0:	ldrsh	r3, [fp, #-6]
   148b4:	ldr	r2, [fp, #-12]
   148b8:	add	r3, r2, r3
   148bc:	mov	r1, r3
   148c0:	ldr	r0, [pc, #212]	; 1499c <error@@Base+0x21fc>
   148c4:	bl	146d8 <error@@Base+0x1f38>
   148c8:	mov	r3, r0
   148cc:	uxth	r2, r3
   148d0:	ldrh	r3, [fp, #-6]
   148d4:	add	r3, r2, r3
   148d8:	uxth	r3, r3
   148dc:	strh	r3, [fp, #-6]
   148e0:	ldrsh	r3, [fp, #-6]
   148e4:	ldr	r2, [fp, #-12]
   148e8:	add	r3, r2, r3
   148ec:	mov	r1, r3
   148f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   148f4:	bl	146d8 <error@@Base+0x1f38>
   148f8:	mov	r3, r0
   148fc:	uxth	r2, r3
   14900:	ldrh	r3, [fp, #-6]
   14904:	add	r3, r2, r3
   14908:	uxth	r3, r3
   1490c:	strh	r3, [fp, #-6]
   14910:	ldrsh	r2, [fp, #-6]
   14914:	uxth	r3, r2
   14918:	add	r3, r3, #1
   1491c:	uxth	r3, r3
   14920:	strh	r3, [fp, #-6]
   14924:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14928:	add	r3, r3, r2
   1492c:	mov	r2, #0
   14930:	strb	r2, [r3]
   14934:	b	14988 <error@@Base+0x21e8>
   14938:	ldr	r3, [fp, #-20]	; 0xffffffec
   1493c:	cmp	r3, #255	; 0xff
   14940:	bhi	14968 <error@@Base+0x21c8>
   14944:	ldrsh	r3, [fp, #-6]
   14948:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1494c:	add	r3, r2, r3
   14950:	ldr	r2, [fp, #-20]	; 0xffffffec
   14954:	ldr	r1, [pc, #68]	; 149a0 <error@@Base+0x2200>
   14958:	add	r1, pc, r1
   1495c:	mov	r0, r3
   14960:	bl	10b68 <sprintf@plt>
   14964:	b	14988 <error@@Base+0x21e8>
   14968:	ldrsh	r3, [fp, #-6]
   1496c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14970:	add	r3, r2, r3
   14974:	ldr	r2, [fp, #-20]	; 0xffffffec
   14978:	ldr	r1, [pc, #36]	; 149a4 <error@@Base+0x2204>
   1497c:	add	r1, pc, r1
   14980:	mov	r0, r3
   14984:	bl	10b68 <sprintf@plt>
   14988:	nop			; (mov r0, r0)
   1498c:	sub	sp, fp, #4
   14990:	pop	{fp, pc}
   14994:	ldrdeq	r3, [r0], -r0
   14998:	andeq	r3, r0, ip, asr #21
   1499c:	andeq	r2, r0, ip, asr #11
   149a0:	andeq	r3, r0, ip, ror #19
   149a4:	ldrdeq	r3, [r0], -r0
   149a8:	push	{fp, lr}
   149ac:	add	fp, sp, #4
   149b0:	sub	sp, sp, #40	; 0x28
   149b4:	str	r0, [fp, #-32]	; 0xffffffe0
   149b8:	str	r1, [fp, #-36]	; 0xffffffdc
   149bc:	str	r2, [fp, #-40]	; 0xffffffd8
   149c0:	ldr	r3, [pc, #220]	; 14aa4 <error@@Base+0x2304>
   149c4:	add	r3, pc, r3
   149c8:	mov	r1, r3
   149cc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   149d0:	bl	11d8c <__assert_fail@plt+0x11d0>
   149d4:	str	r0, [fp, #-12]
   149d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   149dc:	cmp	r3, #0
   149e0:	beq	14a38 <error@@Base+0x2298>
   149e4:	ldr	r3, [fp, #-12]
   149e8:	mov	r2, #55	; 0x37
   149ec:	mov	r1, #1
   149f0:	ldr	r0, [pc, #176]	; 14aa8 <error@@Base+0x2308>
   149f4:	add	r0, pc, r0
   149f8:	bl	10a9c <fwrite@plt>
   149fc:	ldr	r3, [fp, #-12]
   14a00:	mov	r2, #55	; 0x37
   14a04:	mov	r1, #1
   14a08:	ldr	r0, [pc, #156]	; 14aac <error@@Base+0x230c>
   14a0c:	add	r0, pc, r0
   14a10:	bl	10a9c <fwrite@plt>
   14a14:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14a18:	ldr	r0, [fp, #-12]
   14a1c:	blx	r3
   14a20:	ldr	r3, [fp, #-12]
   14a24:	mov	r2, #55	; 0x37
   14a28:	mov	r1, #1
   14a2c:	ldr	r0, [pc, #124]	; 14ab0 <error@@Base+0x2310>
   14a30:	add	r0, pc, r0
   14a34:	bl	10a9c <fwrite@plt>
   14a38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14a3c:	ldr	r3, [r3]
   14a40:	str	r3, [fp, #-8]
   14a44:	b	14a84 <error@@Base+0x22e4>
   14a48:	ldr	r3, [fp, #-8]
   14a4c:	ldrb	r3, [r3, #8]
   14a50:	mov	r0, r3
   14a54:	ldr	r3, [fp, #-8]
   14a58:	ldr	r1, [r3, #12]
   14a5c:	sub	r2, fp, #24
   14a60:	mov	r3, #0
   14a64:	bl	147d8 <error@@Base+0x2038>
   14a68:	sub	r3, fp, #24
   14a6c:	ldr	r1, [fp, #-12]
   14a70:	mov	r0, r3
   14a74:	bl	10b8c <fputs@plt>
   14a78:	ldr	r3, [fp, #-8]
   14a7c:	ldr	r3, [r3, #4]
   14a80:	str	r3, [fp, #-8]
   14a84:	ldr	r3, [fp, #-8]
   14a88:	cmp	r3, #0
   14a8c:	bne	14a48 <error@@Base+0x22a8>
   14a90:	ldr	r0, [fp, #-12]
   14a94:	bl	11e60 <__assert_fail@plt+0x12a4>
   14a98:	nop			; (mov r0, r0)
   14a9c:	sub	sp, fp, #4
   14aa0:	pop	{fp, pc}
   14aa4:	muleq	r0, r0, r9
   14aa8:	andeq	r3, r0, ip, ror #16
   14aac:	andeq	r3, r0, ip, lsl #17
   14ab0:	andeq	r3, r0, r8, ror #16
   14ab4:	push	{fp, lr}
   14ab8:	add	fp, sp, #4
   14abc:	sub	sp, sp, #24
   14ac0:	str	r0, [fp, #-24]	; 0xffffffe8
   14ac4:	str	r1, [fp, #-28]	; 0xffffffe4
   14ac8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14acc:	str	r3, [fp, #-8]
   14ad0:	mov	r3, #0
   14ad4:	str	r3, [fp, #-12]
   14ad8:	mov	r3, #0
   14adc:	str	r3, [fp, #-16]
   14ae0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14ae4:	str	r3, [fp, #-8]
   14ae8:	b	14b3c <error@@Base+0x239c>
   14aec:	sub	r3, fp, #16
   14af0:	mov	r2, r3
   14af4:	mvn	r1, #0
   14af8:	ldr	r0, [fp, #-8]
   14afc:	bl	10ab4 <utf8proc_iterate@plt>
   14b00:	str	r0, [fp, #-12]
   14b04:	ldr	r3, [fp, #-12]
   14b08:	cmp	r3, #0
   14b0c:	bgt	14b18 <error@@Base+0x2378>
   14b10:	mov	r3, #0
   14b14:	b	14b50 <error@@Base+0x23b0>
   14b18:	ldr	r3, [fp, #-16]
   14b1c:	mov	r2, r3
   14b20:	mov	r1, #0
   14b24:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14b28:	bl	14030 <error@@Base+0x1890>
   14b2c:	ldr	r3, [fp, #-12]
   14b30:	ldr	r2, [fp, #-8]
   14b34:	add	r3, r2, r3
   14b38:	str	r3, [fp, #-8]
   14b3c:	ldr	r3, [fp, #-8]
   14b40:	ldrb	r3, [r3]
   14b44:	cmp	r3, #0
   14b48:	bne	14aec <error@@Base+0x234c>
   14b4c:	mov	r3, #1
   14b50:	mov	r0, r3
   14b54:	sub	sp, fp, #4
   14b58:	pop	{fp, pc}
   14b5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14b60:	mov	r7, r0
   14b64:	ldr	r6, [pc, #72]	; 14bb4 <error@@Base+0x2414>
   14b68:	ldr	r5, [pc, #72]	; 14bb8 <error@@Base+0x2418>
   14b6c:	add	r6, pc, r6
   14b70:	add	r5, pc, r5
   14b74:	sub	r6, r6, r5
   14b78:	mov	r8, r1
   14b7c:	mov	r9, r2
   14b80:	bl	109e0 <calloc@plt-0x20>
   14b84:	asrs	r6, r6, #2
   14b88:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b8c:	mov	r4, #0
   14b90:	add	r4, r4, #1
   14b94:	ldr	r3, [r5], #4
   14b98:	mov	r2, r9
   14b9c:	mov	r1, r8
   14ba0:	mov	r0, r7
   14ba4:	blx	r3
   14ba8:	cmp	r6, r4
   14bac:	bne	14b90 <error@@Base+0x23f0>
   14bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14bb4:	andeq	r4, r1, ip, lsl #7
   14bb8:	andeq	r4, r1, r4, lsl #7
   14bbc:	bx	lr
   14bc0:	mov	r2, r1
   14bc4:	mov	r1, r0
   14bc8:	mov	r0, #3
   14bcc:	b	10a90 <__xstat@plt>

Disassembly of section .fini:

00014bd0 <.fini>:
   14bd0:	push	{r3, lr}
   14bd4:	pop	{r3, pc}
