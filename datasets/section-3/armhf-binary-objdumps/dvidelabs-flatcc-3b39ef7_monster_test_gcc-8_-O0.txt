
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

000128c4 <.init>:
   128c4:	push	{r3, lr}
   128c8:	bl	12a2c <_start@@Base+0x3c>
   128cc:	pop	{r3, pc}

Disassembly of section .plt:

000128d0 <strcmp@plt-0x14>:
   128d0:	push	{lr}		; (str lr, [sp, #-4]!)
   128d4:	ldr	lr, [pc, #4]	; 128e0 <strcmp@plt-0x4>
   128d8:	add	lr, pc, lr
   128dc:	ldr	pc, [lr, #8]!
   128e0:	andeq	r5, r3, r0, lsr #14

000128e4 <strcmp@plt>:
   128e4:	add	ip, pc, #0, 12
   128e8:	add	ip, ip, #217088	; 0x35000
   128ec:	ldr	pc, [ip, #1824]!	; 0x720

000128f0 <printf@plt>:
   128f0:	add	ip, pc, #0, 12
   128f4:	add	ip, ip, #217088	; 0x35000
   128f8:	ldr	pc, [ip, #1816]!	; 0x718

000128fc <free@plt>:
   128fc:	add	ip, pc, #0, 12
   12900:	add	ip, ip, #217088	; 0x35000
   12904:	ldr	pc, [ip, #1808]!	; 0x710

00012908 <memcpy@plt>:
   12908:	add	ip, pc, #0, 12
   1290c:	add	ip, ip, #217088	; 0x35000
   12910:	ldr	pc, [ip, #1800]!	; 0x708

00012914 <memcmp@plt>:
   12914:	add	ip, pc, #0, 12
   12918:	add	ip, ip, #217088	; 0x35000
   1291c:	ldr	pc, [ip, #1792]!	; 0x700

00012920 <realloc@plt>:
   12920:	add	ip, pc, #0, 12
   12924:	add	ip, ip, #217088	; 0x35000
   12928:	ldr	pc, [ip, #1784]!	; 0x6f8

0001292c <fwrite@plt>:
   1292c:	add	ip, pc, #0, 12
   12930:	add	ip, ip, #217088	; 0x35000
   12934:	ldr	pc, [ip, #1776]!	; 0x6f0

00012938 <gettimeofday@plt>:
   12938:	add	ip, pc, #0, 12
   1293c:	add	ip, ip, #217088	; 0x35000
   12940:	ldr	pc, [ip, #1768]!	; 0x6e8

00012944 <puts@plt>:
   12944:	add	ip, pc, #0, 12
   12948:	add	ip, ip, #217088	; 0x35000
   1294c:	ldr	pc, [ip, #1760]!	; 0x6e0

00012950 <malloc@plt>:
   12950:	add	ip, pc, #0, 12
   12954:	add	ip, ip, #217088	; 0x35000
   12958:	ldr	pc, [ip, #1752]!	; 0x6d8

0001295c <__libc_start_main@plt>:
   1295c:	add	ip, pc, #0, 12
   12960:	add	ip, ip, #217088	; 0x35000
   12964:	ldr	pc, [ip, #1744]!	; 0x6d0

00012968 <__gmon_start__@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #217088	; 0x35000
   12970:	ldr	pc, [ip, #1736]!	; 0x6c8

00012974 <strlen@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #217088	; 0x35000
   1297c:	ldr	pc, [ip, #1728]!	; 0x6c0

00012980 <fprintf@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #217088	; 0x35000
   12988:	ldr	pc, [ip, #1720]!	; 0x6b8

0001298c <posix_memalign@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #217088	; 0x35000
   12994:	ldr	pc, [ip, #1712]!	; 0x6b0

00012998 <memset@plt>:
   12998:	add	ip, pc, #0, 12
   1299c:	add	ip, ip, #217088	; 0x35000
   129a0:	ldr	pc, [ip, #1704]!	; 0x6a8

000129a4 <strncpy@plt>:
   129a4:	add	ip, pc, #0, 12
   129a8:	add	ip, ip, #217088	; 0x35000
   129ac:	ldr	pc, [ip, #1696]!	; 0x6a0

000129b0 <memchr@plt>:
   129b0:	add	ip, pc, #0, 12
   129b4:	add	ip, ip, #217088	; 0x35000
   129b8:	ldr	pc, [ip, #1688]!	; 0x698

000129bc <fputc@plt>:
   129bc:	add	ip, pc, #0, 12
   129c0:	add	ip, ip, #217088	; 0x35000
   129c4:	ldr	pc, [ip, #1680]!	; 0x690

000129c8 <strncmp@plt>:
   129c8:	add	ip, pc, #0, 12
   129cc:	add	ip, ip, #217088	; 0x35000
   129d0:	ldr	pc, [ip, #1672]!	; 0x688

000129d4 <abort@plt>:
   129d4:	add	ip, pc, #0, 12
   129d8:	add	ip, ip, #217088	; 0x35000
   129dc:	ldr	pc, [ip, #1664]!	; 0x680

000129e0 <__assert_fail@plt>:
   129e0:	add	ip, pc, #0, 12
   129e4:	add	ip, ip, #217088	; 0x35000
   129e8:	ldr	pc, [ip, #1656]!	; 0x678

Disassembly of section .text:

000129f0 <_start@@Base>:
   129f0:	mov	fp, #0
   129f4:	mov	lr, #0
   129f8:	pop	{r1}		; (ldr r1, [sp], #4)
   129fc:	mov	r2, sp
   12a00:	push	{r2}		; (str r2, [sp, #-4]!)
   12a04:	push	{r0}		; (str r0, [sp, #-4]!)
   12a08:	ldr	ip, [pc, #16]	; 12a20 <_start@@Base+0x30>
   12a0c:	push	{ip}		; (str ip, [sp, #-4]!)
   12a10:	ldr	r0, [pc, #12]	; 12a24 <_start@@Base+0x34>
   12a14:	ldr	r3, [pc, #12]	; 12a28 <_start@@Base+0x38>
   12a18:	bl	1295c <__libc_start_main@plt>
   12a1c:	bl	129d4 <abort@plt>
   12a20:	andeq	r2, r3, ip, lsl r5
   12a24:			; <UNDEFINED> instruction: 0x000286b0
   12a28:			; <UNDEFINED> instruction: 0x000324bc
   12a2c:	ldr	r3, [pc, #20]	; 12a48 <_start@@Base+0x58>
   12a30:	ldr	r2, [pc, #20]	; 12a4c <_start@@Base+0x5c>
   12a34:	add	r3, pc, r3
   12a38:	ldr	r2, [r3, r2]
   12a3c:	cmp	r2, #0
   12a40:	bxeq	lr
   12a44:	b	12968 <__gmon_start__@plt>
   12a48:	andeq	r5, r3, r4, asr #11
   12a4c:	andeq	r0, r0, ip, rrx
   12a50:	ldr	r0, [pc, #24]	; 12a70 <_start@@Base+0x80>
   12a54:	ldr	r3, [pc, #24]	; 12a74 <_start@@Base+0x84>
   12a58:	cmp	r3, r0
   12a5c:	bxeq	lr
   12a60:	ldr	r3, [pc, #16]	; 12a78 <_start@@Base+0x88>
   12a64:	cmp	r3, #0
   12a68:	bxeq	lr
   12a6c:	bx	r3
   12a70:	andeq	r8, r4, r8, lsl #1
   12a74:	andeq	r8, r4, r8, lsl #1
   12a78:	andeq	r0, r0, r0
   12a7c:	ldr	r0, [pc, #36]	; 12aa8 <_start@@Base+0xb8>
   12a80:	ldr	r1, [pc, #36]	; 12aac <_start@@Base+0xbc>
   12a84:	sub	r1, r1, r0
   12a88:	asr	r1, r1, #2
   12a8c:	add	r1, r1, r1, lsr #31
   12a90:	asrs	r1, r1, #1
   12a94:	bxeq	lr
   12a98:	ldr	r3, [pc, #16]	; 12ab0 <_start@@Base+0xc0>
   12a9c:	cmp	r3, #0
   12aa0:	bxeq	lr
   12aa4:	bx	r3
   12aa8:	andeq	r8, r4, r8, lsl #1
   12aac:	andeq	r8, r4, r8, lsl #1
   12ab0:	andeq	r0, r0, r0
   12ab4:	push	{r4, lr}
   12ab8:	ldr	r4, [pc, #24]	; 12ad8 <_start@@Base+0xe8>
   12abc:	ldrb	r3, [r4]
   12ac0:	cmp	r3, #0
   12ac4:	popne	{r4, pc}
   12ac8:	bl	12a50 <_start@@Base+0x60>
   12acc:	mov	r3, #1
   12ad0:	strb	r3, [r4]
   12ad4:	pop	{r4, pc}
   12ad8:	andeq	r8, r4, r8, lsl #1
   12adc:	b	12a7c <_start@@Base+0x8c>
   12ae0:	push	{fp}		; (str fp, [sp, #-4]!)
   12ae4:	add	fp, sp, #0
   12ae8:	sub	sp, sp, #12
   12aec:	mov	r3, r0
   12af0:	strb	r3, [fp, #-5]
   12af4:	ldrb	r3, [fp, #-5]
   12af8:	mov	r0, r3
   12afc:	add	sp, fp, #0
   12b00:	pop	{fp}		; (ldr fp, [sp], #4)
   12b04:	bx	lr
   12b08:	push	{fp}		; (str fp, [sp, #-4]!)
   12b0c:	add	fp, sp, #0
   12b10:	sub	sp, sp, #12
   12b14:	mov	r3, r0
   12b18:	strb	r3, [fp, #-5]
   12b1c:	ldrb	r3, [fp, #-5]
   12b20:	mov	r0, r3
   12b24:	add	sp, fp, #0
   12b28:	pop	{fp}		; (ldr fp, [sp], #4)
   12b2c:	bx	lr
   12b30:	str	fp, [sp, #-8]!
   12b34:	str	lr, [sp, #4]
   12b38:	add	fp, sp, #4
   12b3c:	sub	sp, sp, #8
   12b40:	str	r0, [fp, #-8]
   12b44:	ldr	r3, [fp, #-8]
   12b48:	ldrb	r3, [r3]
   12b4c:	mov	r0, r3
   12b50:	bl	12ae0 <_start@@Base+0xf0>
   12b54:	mov	r3, r0
   12b58:	mov	r0, r3
   12b5c:	sub	sp, fp, #4
   12b60:	ldr	fp, [sp]
   12b64:	add	sp, sp, #4
   12b68:	pop	{pc}		; (ldr pc, [sp], #4)
   12b6c:	push	{fp}		; (str fp, [sp, #-4]!)
   12b70:	add	fp, sp, #0
   12b74:	sub	sp, sp, #12
   12b78:	mov	r3, r0
   12b7c:	strh	r3, [fp, #-6]
   12b80:	ldrh	r3, [fp, #-6]
   12b84:	mov	r0, r3
   12b88:	add	sp, fp, #0
   12b8c:	pop	{fp}		; (ldr fp, [sp], #4)
   12b90:	bx	lr
   12b94:	push	{fp}		; (str fp, [sp, #-4]!)
   12b98:	add	fp, sp, #0
   12b9c:	sub	sp, sp, #12
   12ba0:	mov	r3, r0
   12ba4:	strh	r3, [fp, #-6]
   12ba8:	ldrh	r3, [fp, #-6]
   12bac:	mov	r0, r3
   12bb0:	add	sp, fp, #0
   12bb4:	pop	{fp}		; (ldr fp, [sp], #4)
   12bb8:	bx	lr
   12bbc:	str	fp, [sp, #-8]!
   12bc0:	str	lr, [sp, #4]
   12bc4:	add	fp, sp, #4
   12bc8:	sub	sp, sp, #8
   12bcc:	str	r0, [fp, #-8]
   12bd0:	ldr	r3, [fp, #-8]
   12bd4:	ldrh	r3, [r3]
   12bd8:	mov	r0, r3
   12bdc:	bl	12b6c <_start@@Base+0x17c>
   12be0:	mov	r3, r0
   12be4:	mov	r0, r3
   12be8:	sub	sp, fp, #4
   12bec:	ldr	fp, [sp]
   12bf0:	add	sp, sp, #4
   12bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   12bf8:	push	{fp}		; (str fp, [sp, #-4]!)
   12bfc:	add	fp, sp, #0
   12c00:	sub	sp, sp, #12
   12c04:	str	r0, [fp, #-8]
   12c08:	ldr	r3, [fp, #-8]
   12c0c:	mov	r0, r3
   12c10:	add	sp, fp, #0
   12c14:	pop	{fp}		; (ldr fp, [sp], #4)
   12c18:	bx	lr
   12c1c:	push	{fp}		; (str fp, [sp, #-4]!)
   12c20:	add	fp, sp, #0
   12c24:	sub	sp, sp, #12
   12c28:	str	r0, [fp, #-8]
   12c2c:	ldr	r3, [fp, #-8]
   12c30:	mov	r0, r3
   12c34:	add	sp, fp, #0
   12c38:	pop	{fp}		; (ldr fp, [sp], #4)
   12c3c:	bx	lr
   12c40:	str	fp, [sp, #-8]!
   12c44:	str	lr, [sp, #4]
   12c48:	add	fp, sp, #4
   12c4c:	sub	sp, sp, #8
   12c50:	str	r0, [fp, #-8]
   12c54:	ldr	r3, [fp, #-8]
   12c58:	ldr	r3, [r3]
   12c5c:	mov	r0, r3
   12c60:	bl	12bf8 <_start@@Base+0x208>
   12c64:	mov	r3, r0
   12c68:	mov	r0, r3
   12c6c:	sub	sp, fp, #4
   12c70:	ldr	fp, [sp]
   12c74:	add	sp, sp, #4
   12c78:	pop	{pc}		; (ldr pc, [sp], #4)
   12c7c:	push	{fp}		; (str fp, [sp, #-4]!)
   12c80:	add	fp, sp, #0
   12c84:	sub	sp, sp, #12
   12c88:	strd	r0, [fp, #-12]
   12c8c:	ldrd	r2, [fp, #-12]
   12c90:	mov	r0, r2
   12c94:	mov	r1, r3
   12c98:	add	sp, fp, #0
   12c9c:	pop	{fp}		; (ldr fp, [sp], #4)
   12ca0:	bx	lr
   12ca4:	push	{fp}		; (str fp, [sp, #-4]!)
   12ca8:	add	fp, sp, #0
   12cac:	sub	sp, sp, #12
   12cb0:	strd	r0, [fp, #-12]
   12cb4:	ldrd	r2, [fp, #-12]
   12cb8:	mov	r0, r2
   12cbc:	mov	r1, r3
   12cc0:	add	sp, fp, #0
   12cc4:	pop	{fp}		; (ldr fp, [sp], #4)
   12cc8:	bx	lr
   12ccc:	str	fp, [sp, #-8]!
   12cd0:	str	lr, [sp, #4]
   12cd4:	add	fp, sp, #4
   12cd8:	sub	sp, sp, #8
   12cdc:	str	r0, [fp, #-8]
   12ce0:	ldr	r3, [fp, #-8]
   12ce4:	ldrd	r2, [r3]
   12ce8:	mov	r0, r2
   12cec:	mov	r1, r3
   12cf0:	bl	12c7c <_start@@Base+0x28c>
   12cf4:	mov	r2, r0
   12cf8:	mov	r3, r1
   12cfc:	mov	r0, r2
   12d00:	mov	r1, r3
   12d04:	sub	sp, fp, #4
   12d08:	ldr	fp, [sp]
   12d0c:	add	sp, sp, #4
   12d10:	pop	{pc}		; (ldr pc, [sp], #4)
   12d14:	push	{fp}		; (str fp, [sp, #-4]!)
   12d18:	add	fp, sp, #0
   12d1c:	sub	sp, sp, #12
   12d20:	mov	r3, r0
   12d24:	strb	r3, [fp, #-5]
   12d28:	ldrsb	r3, [fp, #-5]
   12d2c:	mov	r0, r3
   12d30:	add	sp, fp, #0
   12d34:	pop	{fp}		; (ldr fp, [sp], #4)
   12d38:	bx	lr
   12d3c:	push	{fp}		; (str fp, [sp, #-4]!)
   12d40:	add	fp, sp, #0
   12d44:	sub	sp, sp, #12
   12d48:	mov	r3, r0
   12d4c:	strb	r3, [fp, #-5]
   12d50:	ldrsb	r3, [fp, #-5]
   12d54:	mov	r0, r3
   12d58:	add	sp, fp, #0
   12d5c:	pop	{fp}		; (ldr fp, [sp], #4)
   12d60:	bx	lr
   12d64:	str	fp, [sp, #-8]!
   12d68:	str	lr, [sp, #4]
   12d6c:	add	fp, sp, #4
   12d70:	sub	sp, sp, #8
   12d74:	str	r0, [fp, #-8]
   12d78:	ldr	r3, [fp, #-8]
   12d7c:	ldrsb	r3, [r3]
   12d80:	mov	r0, r3
   12d84:	bl	12d14 <_start@@Base+0x324>
   12d88:	mov	r3, r0
   12d8c:	mov	r0, r3
   12d90:	sub	sp, fp, #4
   12d94:	ldr	fp, [sp]
   12d98:	add	sp, sp, #4
   12d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   12da0:	push	{fp}		; (str fp, [sp, #-4]!)
   12da4:	add	fp, sp, #0
   12da8:	sub	sp, sp, #12
   12dac:	mov	r3, r0
   12db0:	strh	r3, [fp, #-6]
   12db4:	ldrsh	r3, [fp, #-6]
   12db8:	mov	r0, r3
   12dbc:	add	sp, fp, #0
   12dc0:	pop	{fp}		; (ldr fp, [sp], #4)
   12dc4:	bx	lr
   12dc8:	push	{fp}		; (str fp, [sp, #-4]!)
   12dcc:	add	fp, sp, #0
   12dd0:	sub	sp, sp, #12
   12dd4:	mov	r3, r0
   12dd8:	strh	r3, [fp, #-6]
   12ddc:	ldrsh	r3, [fp, #-6]
   12de0:	mov	r0, r3
   12de4:	add	sp, fp, #0
   12de8:	pop	{fp}		; (ldr fp, [sp], #4)
   12dec:	bx	lr
   12df0:	str	fp, [sp, #-8]!
   12df4:	str	lr, [sp, #4]
   12df8:	add	fp, sp, #4
   12dfc:	sub	sp, sp, #8
   12e00:	str	r0, [fp, #-8]
   12e04:	ldr	r3, [fp, #-8]
   12e08:	ldrsh	r3, [r3]
   12e0c:	mov	r0, r3
   12e10:	bl	12da0 <_start@@Base+0x3b0>
   12e14:	mov	r3, r0
   12e18:	mov	r0, r3
   12e1c:	sub	sp, fp, #4
   12e20:	ldr	fp, [sp]
   12e24:	add	sp, sp, #4
   12e28:	pop	{pc}		; (ldr pc, [sp], #4)
   12e2c:	push	{fp}		; (str fp, [sp, #-4]!)
   12e30:	add	fp, sp, #0
   12e34:	sub	sp, sp, #12
   12e38:	str	r0, [fp, #-8]
   12e3c:	ldr	r3, [fp, #-8]
   12e40:	mov	r0, r3
   12e44:	add	sp, fp, #0
   12e48:	pop	{fp}		; (ldr fp, [sp], #4)
   12e4c:	bx	lr
   12e50:	push	{fp}		; (str fp, [sp, #-4]!)
   12e54:	add	fp, sp, #0
   12e58:	sub	sp, sp, #12
   12e5c:	str	r0, [fp, #-8]
   12e60:	ldr	r3, [fp, #-8]
   12e64:	mov	r0, r3
   12e68:	add	sp, fp, #0
   12e6c:	pop	{fp}		; (ldr fp, [sp], #4)
   12e70:	bx	lr
   12e74:	str	fp, [sp, #-8]!
   12e78:	str	lr, [sp, #4]
   12e7c:	add	fp, sp, #4
   12e80:	sub	sp, sp, #8
   12e84:	str	r0, [fp, #-8]
   12e88:	ldr	r3, [fp, #-8]
   12e8c:	ldr	r3, [r3]
   12e90:	mov	r0, r3
   12e94:	bl	12e2c <_start@@Base+0x43c>
   12e98:	mov	r3, r0
   12e9c:	mov	r0, r3
   12ea0:	sub	sp, fp, #4
   12ea4:	ldr	fp, [sp]
   12ea8:	add	sp, sp, #4
   12eac:	pop	{pc}		; (ldr pc, [sp], #4)
   12eb0:	push	{fp}		; (str fp, [sp, #-4]!)
   12eb4:	add	fp, sp, #0
   12eb8:	sub	sp, sp, #12
   12ebc:	strd	r0, [fp, #-12]
   12ec0:	ldrd	r2, [fp, #-12]
   12ec4:	mov	r0, r2
   12ec8:	mov	r1, r3
   12ecc:	add	sp, fp, #0
   12ed0:	pop	{fp}		; (ldr fp, [sp], #4)
   12ed4:	bx	lr
   12ed8:	push	{fp}		; (str fp, [sp, #-4]!)
   12edc:	add	fp, sp, #0
   12ee0:	sub	sp, sp, #12
   12ee4:	strd	r0, [fp, #-12]
   12ee8:	ldrd	r2, [fp, #-12]
   12eec:	mov	r0, r2
   12ef0:	mov	r1, r3
   12ef4:	add	sp, fp, #0
   12ef8:	pop	{fp}		; (ldr fp, [sp], #4)
   12efc:	bx	lr
   12f00:	str	fp, [sp, #-8]!
   12f04:	str	lr, [sp, #4]
   12f08:	add	fp, sp, #4
   12f0c:	sub	sp, sp, #8
   12f10:	str	r0, [fp, #-8]
   12f14:	ldr	r3, [fp, #-8]
   12f18:	ldrd	r2, [r3]
   12f1c:	mov	r0, r2
   12f20:	mov	r1, r3
   12f24:	bl	12eb0 <_start@@Base+0x4c0>
   12f28:	mov	r2, r0
   12f2c:	mov	r3, r1
   12f30:	mov	r0, r2
   12f34:	mov	r1, r3
   12f38:	sub	sp, fp, #4
   12f3c:	ldr	fp, [sp]
   12f40:	add	sp, sp, #4
   12f44:	pop	{pc}		; (ldr pc, [sp], #4)
   12f48:	push	{fp}		; (str fp, [sp, #-4]!)
   12f4c:	add	fp, sp, #0
   12f50:	sub	sp, sp, #20
   12f54:	vstr	s0, [fp, #-16]
   12f58:	ldr	r3, [fp, #-16]
   12f5c:	str	r3, [fp, #-8]
   12f60:	ldr	r3, [fp, #-8]
   12f64:	str	r3, [fp, #-8]
   12f68:	ldr	r3, [fp, #-8]
   12f6c:	vmov	s15, r3
   12f70:	vmov.f32	s0, s15
   12f74:	add	sp, fp, #0
   12f78:	pop	{fp}		; (ldr fp, [sp], #4)
   12f7c:	bx	lr
   12f80:	push	{fp}		; (str fp, [sp, #-4]!)
   12f84:	add	fp, sp, #0
   12f88:	sub	sp, sp, #20
   12f8c:	vstr	s0, [fp, #-16]
   12f90:	ldr	r3, [fp, #-16]
   12f94:	str	r3, [fp, #-8]
   12f98:	ldr	r3, [fp, #-8]
   12f9c:	str	r3, [fp, #-8]
   12fa0:	ldr	r3, [fp, #-8]
   12fa4:	vmov	s15, r3
   12fa8:	vmov.f32	s0, s15
   12fac:	add	sp, fp, #0
   12fb0:	pop	{fp}		; (ldr fp, [sp], #4)
   12fb4:	bx	lr
   12fb8:	str	fp, [sp, #-8]!
   12fbc:	str	lr, [sp, #4]
   12fc0:	add	fp, sp, #4
   12fc4:	sub	sp, sp, #8
   12fc8:	str	r0, [fp, #-8]
   12fcc:	ldr	r3, [fp, #-8]
   12fd0:	vldr	s15, [r3]
   12fd4:	vmov.f32	s0, s15
   12fd8:	bl	12f48 <_start@@Base+0x558>
   12fdc:	vmov.f32	s15, s0
   12fe0:	vmov.f32	s0, s15
   12fe4:	sub	sp, fp, #4
   12fe8:	ldr	fp, [sp]
   12fec:	add	sp, sp, #4
   12ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ff4:	push	{fp}		; (str fp, [sp, #-4]!)
   12ff8:	add	fp, sp, #0
   12ffc:	sub	sp, sp, #20
   13000:	vstr	d0, [fp, #-20]	; 0xffffffec
   13004:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13008:	strd	r2, [fp, #-12]
   1300c:	ldrd	r2, [fp, #-12]
   13010:	strd	r2, [fp, #-12]
   13014:	ldrd	r2, [fp, #-12]
   13018:	vmov	d7, r2, r3
   1301c:	vmov.f64	d0, d7
   13020:	add	sp, fp, #0
   13024:	pop	{fp}		; (ldr fp, [sp], #4)
   13028:	bx	lr
   1302c:	push	{fp}		; (str fp, [sp, #-4]!)
   13030:	add	fp, sp, #0
   13034:	sub	sp, sp, #20
   13038:	vstr	d0, [fp, #-20]	; 0xffffffec
   1303c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13040:	strd	r2, [fp, #-12]
   13044:	ldrd	r2, [fp, #-12]
   13048:	strd	r2, [fp, #-12]
   1304c:	ldrd	r2, [fp, #-12]
   13050:	vmov	d7, r2, r3
   13054:	vmov.f64	d0, d7
   13058:	add	sp, fp, #0
   1305c:	pop	{fp}		; (ldr fp, [sp], #4)
   13060:	bx	lr
   13064:	str	fp, [sp, #-8]!
   13068:	str	lr, [sp, #4]
   1306c:	add	fp, sp, #4
   13070:	sub	sp, sp, #8
   13074:	str	r0, [fp, #-8]
   13078:	ldr	r3, [fp, #-8]
   1307c:	vldr	d7, [r3]
   13080:	vmov.f64	d0, d7
   13084:	bl	12ff4 <_start@@Base+0x604>
   13088:	vmov.f64	d7, d0
   1308c:	vmov.f64	d0, d7
   13090:	sub	sp, fp, #4
   13094:	ldr	fp, [sp]
   13098:	add	sp, sp, #4
   1309c:	pop	{pc}		; (ldr pc, [sp], #4)
   130a0:	push	{fp}		; (str fp, [sp, #-4]!)
   130a4:	add	fp, sp, #0
   130a8:	sub	sp, sp, #12
   130ac:	mov	r3, r0
   130b0:	strb	r3, [fp, #-5]
   130b4:	ldrb	r3, [fp, #-5]
   130b8:	mov	r0, r3
   130bc:	add	sp, fp, #0
   130c0:	pop	{fp}		; (ldr fp, [sp], #4)
   130c4:	bx	lr
   130c8:	push	{fp}		; (str fp, [sp, #-4]!)
   130cc:	add	fp, sp, #0
   130d0:	sub	sp, sp, #12
   130d4:	mov	r3, r0
   130d8:	strb	r3, [fp, #-5]
   130dc:	ldrb	r3, [fp, #-5]
   130e0:	mov	r0, r3
   130e4:	add	sp, fp, #0
   130e8:	pop	{fp}		; (ldr fp, [sp], #4)
   130ec:	bx	lr
   130f0:	push	{fp}		; (str fp, [sp, #-4]!)
   130f4:	add	fp, sp, #0
   130f8:	sub	sp, sp, #12
   130fc:	str	r0, [fp, #-8]
   13100:	str	r1, [fp, #-12]
   13104:	ldr	r2, [fp, #-8]
   13108:	ldr	r3, [fp, #-12]
   1310c:	add	r3, r2, r3
   13110:	mov	r0, r3
   13114:	add	sp, fp, #0
   13118:	pop	{fp}		; (ldr fp, [sp], #4)
   1311c:	bx	lr
   13120:	str	fp, [sp, #-8]!
   13124:	str	lr, [sp, #4]
   13128:	add	fp, sp, #4
   1312c:	sub	sp, sp, #8
   13130:	str	r0, [fp, #-8]
   13134:	ldr	r3, [fp, #-8]
   13138:	ldrb	r3, [r3]
   1313c:	mov	r0, r3
   13140:	bl	130a0 <_start@@Base+0x6b0>
   13144:	mov	r3, r0
   13148:	mov	r0, r3
   1314c:	sub	sp, fp, #4
   13150:	ldr	fp, [sp]
   13154:	add	sp, sp, #4
   13158:	pop	{pc}		; (ldr pc, [sp], #4)
   1315c:	push	{fp}		; (str fp, [sp, #-4]!)
   13160:	add	fp, sp, #0
   13164:	sub	sp, sp, #12
   13168:	mov	r3, r0
   1316c:	strb	r3, [fp, #-5]
   13170:	ldrb	r3, [fp, #-5]
   13174:	mov	r0, r3
   13178:	add	sp, fp, #0
   1317c:	pop	{fp}		; (ldr fp, [sp], #4)
   13180:	bx	lr
   13184:	str	fp, [sp, #-8]!
   13188:	str	lr, [sp, #4]
   1318c:	add	fp, sp, #4
   13190:	sub	sp, sp, #8
   13194:	str	r0, [fp, #-8]
   13198:	ldr	r3, [fp, #-8]
   1319c:	ldrb	r3, [r3]
   131a0:	mov	r0, r3
   131a4:	bl	1315c <_start@@Base+0x76c>
   131a8:	mov	r3, r0
   131ac:	mov	r0, r3
   131b0:	sub	sp, fp, #4
   131b4:	ldr	fp, [sp]
   131b8:	add	sp, sp, #4
   131bc:	pop	{pc}		; (ldr pc, [sp], #4)
   131c0:	push	{fp}		; (str fp, [sp, #-4]!)
   131c4:	add	fp, sp, #0
   131c8:	sub	sp, sp, #12
   131cc:	str	r0, [fp, #-8]
   131d0:	ldr	r3, [fp, #-8]
   131d4:	mov	r0, r3
   131d8:	add	sp, fp, #0
   131dc:	pop	{fp}		; (ldr fp, [sp], #4)
   131e0:	bx	lr
   131e4:	push	{fp}		; (str fp, [sp, #-4]!)
   131e8:	add	fp, sp, #0
   131ec:	sub	sp, sp, #12
   131f0:	str	r0, [fp, #-8]
   131f4:	ldr	r3, [fp, #-8]
   131f8:	mov	r0, r3
   131fc:	add	sp, fp, #0
   13200:	pop	{fp}		; (ldr fp, [sp], #4)
   13204:	bx	lr
   13208:	push	{fp}		; (str fp, [sp, #-4]!)
   1320c:	add	fp, sp, #0
   13210:	mov	r3, #4
   13214:	mov	r0, r3
   13218:	add	sp, fp, #0
   1321c:	pop	{fp}		; (ldr fp, [sp], #4)
   13220:	bx	lr
   13224:	str	fp, [sp, #-8]!
   13228:	str	lr, [sp, #4]
   1322c:	add	fp, sp, #4
   13230:	sub	sp, sp, #8
   13234:	str	r0, [fp, #-8]
   13238:	ldr	r3, [fp, #-8]
   1323c:	ldr	r3, [r3]
   13240:	mov	r0, r3
   13244:	bl	131c0 <_start@@Base+0x7d0>
   13248:	mov	r3, r0
   1324c:	mov	r0, r3
   13250:	sub	sp, fp, #4
   13254:	ldr	fp, [sp]
   13258:	add	sp, sp, #4
   1325c:	pop	{pc}		; (ldr pc, [sp], #4)
   13260:	str	fp, [sp, #-8]!
   13264:	str	lr, [sp, #4]
   13268:	add	fp, sp, #4
   1326c:	sub	sp, sp, #8
   13270:	str	r0, [fp, #-8]
   13274:	str	r1, [fp, #-12]
   13278:	ldr	r0, [fp, #-12]
   1327c:	bl	131e4 <_start@@Base+0x7f4>
   13280:	mov	r2, r0
   13284:	ldr	r3, [fp, #-8]
   13288:	str	r2, [r3]
   1328c:	nop	{0}
   13290:	sub	sp, fp, #4
   13294:	ldr	fp, [sp]
   13298:	add	sp, sp, #4
   1329c:	pop	{pc}		; (ldr pc, [sp], #4)
   132a0:	push	{fp}		; (str fp, [sp, #-4]!)
   132a4:	add	fp, sp, #0
   132a8:	sub	sp, sp, #12
   132ac:	str	r0, [fp, #-8]
   132b0:	ldr	r3, [fp, #-8]
   132b4:	mov	r0, r3
   132b8:	add	sp, fp, #0
   132bc:	pop	{fp}		; (ldr fp, [sp], #4)
   132c0:	bx	lr
   132c4:	str	fp, [sp, #-8]!
   132c8:	str	lr, [sp, #4]
   132cc:	add	fp, sp, #4
   132d0:	sub	sp, sp, #8
   132d4:	str	r0, [fp, #-8]
   132d8:	ldr	r3, [fp, #-8]
   132dc:	ldr	r3, [r3]
   132e0:	mov	r0, r3
   132e4:	bl	132a0 <_start@@Base+0x8b0>
   132e8:	mov	r3, r0
   132ec:	mov	r0, r3
   132f0:	sub	sp, fp, #4
   132f4:	ldr	fp, [sp]
   132f8:	add	sp, sp, #4
   132fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13300:	push	{fp}		; (str fp, [sp, #-4]!)
   13304:	add	fp, sp, #0
   13308:	sub	sp, sp, #12
   1330c:	mov	r3, r0
   13310:	strh	r3, [fp, #-6]
   13314:	ldrh	r3, [fp, #-6]
   13318:	mov	r0, r3
   1331c:	add	sp, fp, #0
   13320:	pop	{fp}		; (ldr fp, [sp], #4)
   13324:	bx	lr
   13328:	str	fp, [sp, #-8]!
   1332c:	str	lr, [sp, #4]
   13330:	add	fp, sp, #4
   13334:	sub	sp, sp, #8
   13338:	str	r0, [fp, #-8]
   1333c:	ldr	r3, [fp, #-8]
   13340:	ldrh	r3, [r3]
   13344:	mov	r0, r3
   13348:	bl	13300 <_start@@Base+0x910>
   1334c:	mov	r3, r0
   13350:	mov	r0, r3
   13354:	sub	sp, fp, #4
   13358:	ldr	fp, [sp]
   1335c:	add	sp, sp, #4
   13360:	pop	{pc}		; (ldr pc, [sp], #4)
   13364:	push	{fp}		; (str fp, [sp, #-4]!)
   13368:	add	fp, sp, #0
   1336c:	sub	sp, sp, #12
   13370:	mov	r3, r0
   13374:	strb	r3, [fp, #-5]
   13378:	ldrb	r3, [fp, #-5]
   1337c:	mov	r0, r3
   13380:	add	sp, fp, #0
   13384:	pop	{fp}		; (ldr fp, [sp], #4)
   13388:	bx	lr
   1338c:	str	fp, [sp, #-8]!
   13390:	str	lr, [sp, #4]
   13394:	add	fp, sp, #4
   13398:	sub	sp, sp, #8
   1339c:	str	r0, [fp, #-8]
   133a0:	ldr	r3, [fp, #-8]
   133a4:	ldrb	r3, [r3]
   133a8:	mov	r0, r3
   133ac:	bl	13364 <_start@@Base+0x974>
   133b0:	mov	r3, r0
   133b4:	mov	r0, r3
   133b8:	sub	sp, fp, #4
   133bc:	ldr	fp, [sp]
   133c0:	add	sp, sp, #4
   133c4:	pop	{pc}		; (ldr pc, [sp], #4)
   133c8:	push	{fp}		; (str fp, [sp, #-4]!)
   133cc:	add	fp, sp, #0
   133d0:	sub	sp, sp, #12
   133d4:	str	r0, [fp, #-8]
   133d8:	ldr	r3, [fp, #-8]
   133dc:	mov	r0, r3
   133e0:	add	sp, fp, #0
   133e4:	pop	{fp}		; (ldr fp, [sp], #4)
   133e8:	bx	lr
   133ec:	push	{fp}		; (str fp, [sp, #-4]!)
   133f0:	add	fp, sp, #0
   133f4:	sub	sp, sp, #12
   133f8:	str	r0, [fp, #-8]
   133fc:	ldr	r3, [fp, #-8]
   13400:	mov	r0, r3
   13404:	add	sp, fp, #0
   13408:	pop	{fp}		; (ldr fp, [sp], #4)
   1340c:	bx	lr
   13410:	str	fp, [sp, #-8]!
   13414:	str	lr, [sp, #4]
   13418:	add	fp, sp, #4
   1341c:	sub	sp, sp, #8
   13420:	str	r0, [fp, #-8]
   13424:	ldr	r3, [fp, #-8]
   13428:	ldr	r3, [r3]
   1342c:	mov	r0, r3
   13430:	bl	133c8 <_start@@Base+0x9d8>
   13434:	mov	r3, r0
   13438:	mov	r0, r3
   1343c:	sub	sp, fp, #4
   13440:	ldr	fp, [sp]
   13444:	add	sp, sp, #4
   13448:	pop	{pc}		; (ldr pc, [sp], #4)
   1344c:	push	{fp}		; (str fp, [sp, #-4]!)
   13450:	add	fp, sp, #0
   13454:	sub	sp, sp, #20
   13458:	str	r0, [fp, #-16]
   1345c:	movw	r3, #40389	; 0x9dc5
   13460:	movt	r3, #33052	; 0x811c
   13464:	str	r3, [fp, #-8]
   13468:	b	134a4 <_start@@Base+0xab4>
   1346c:	ldr	r3, [fp, #-16]
   13470:	ldrb	r3, [r3]
   13474:	mov	r2, r3
   13478:	ldr	r3, [fp, #-8]
   1347c:	eor	r3, r3, r2
   13480:	str	r3, [fp, #-8]
   13484:	ldr	r2, [fp, #-8]
   13488:	movw	r3, #403	; 0x193
   1348c:	movt	r3, #256	; 0x100
   13490:	mul	r3, r3, r2
   13494:	str	r3, [fp, #-8]
   13498:	ldr	r3, [fp, #-16]
   1349c:	add	r3, r3, #1
   134a0:	str	r3, [fp, #-16]
   134a4:	ldr	r3, [fp, #-16]
   134a8:	ldrb	r3, [r3]
   134ac:	cmp	r3, #0
   134b0:	bne	1346c <_start@@Base+0xa7c>
   134b4:	ldr	r3, [fp, #-8]
   134b8:	cmp	r3, #0
   134bc:	bne	134cc <_start@@Base+0xadc>
   134c0:	movw	r3, #40389	; 0x9dc5
   134c4:	movt	r3, #33052	; 0x811c
   134c8:	str	r3, [fp, #-8]
   134cc:	ldr	r3, [fp, #-8]
   134d0:	mov	r0, r3
   134d4:	add	sp, fp, #0
   134d8:	pop	{fp}		; (ldr fp, [sp], #4)
   134dc:	bx	lr
   134e0:	push	{fp}		; (str fp, [sp, #-4]!)
   134e4:	add	fp, sp, #0
   134e8:	sub	sp, sp, #12
   134ec:	str	r0, [fp, #-8]
   134f0:	str	r1, [fp, #-12]
   134f4:	ldr	r3, [fp, #-8]
   134f8:	uxtb	r2, r3
   134fc:	ldr	r3, [fp, #-12]
   13500:	strb	r2, [r3]
   13504:	ldr	r3, [fp, #-8]
   13508:	lsr	r3, r3, #8
   1350c:	str	r3, [fp, #-8]
   13510:	ldr	r3, [fp, #-12]
   13514:	add	r3, r3, #1
   13518:	ldr	r2, [fp, #-8]
   1351c:	uxtb	r2, r2
   13520:	strb	r2, [r3]
   13524:	ldr	r3, [fp, #-8]
   13528:	lsr	r3, r3, #8
   1352c:	str	r3, [fp, #-8]
   13530:	ldr	r3, [fp, #-12]
   13534:	add	r3, r3, #2
   13538:	ldr	r2, [fp, #-8]
   1353c:	uxtb	r2, r2
   13540:	strb	r2, [r3]
   13544:	ldr	r3, [fp, #-8]
   13548:	lsr	r3, r3, #8
   1354c:	str	r3, [fp, #-8]
   13550:	ldr	r3, [fp, #-12]
   13554:	add	r3, r3, #3
   13558:	ldr	r2, [fp, #-8]
   1355c:	uxtb	r2, r2
   13560:	strb	r2, [r3]
   13564:	nop	{0}
   13568:	add	sp, fp, #0
   1356c:	pop	{fp}		; (ldr fp, [sp], #4)
   13570:	bx	lr
   13574:	str	fp, [sp, #-8]!
   13578:	str	lr, [sp, #4]
   1357c:	add	fp, sp, #4
   13580:	sub	sp, sp, #8
   13584:	str	r0, [fp, #-8]
   13588:	ldr	r3, [fp, #-8]
   1358c:	cmp	r3, #0
   13590:	beq	135ac <_start@@Base+0xbbc>
   13594:	ldr	r3, [fp, #-8]
   13598:	sub	r3, r3, #4
   1359c:	mov	r0, r3
   135a0:	bl	13224 <_start@@Base+0x834>
   135a4:	mov	r3, r0
   135a8:	b	135b0 <_start@@Base+0xbc0>
   135ac:	mov	r3, #0
   135b0:	mov	r0, r3
   135b4:	sub	sp, fp, #4
   135b8:	ldr	fp, [sp]
   135bc:	add	sp, sp, #4
   135c0:	pop	{pc}		; (ldr pc, [sp], #4)
   135c4:	str	fp, [sp, #-8]!
   135c8:	str	lr, [sp, #4]
   135cc:	add	fp, sp, #4
   135d0:	sub	sp, sp, #8
   135d4:	str	r0, [fp, #-8]
   135d8:	ldr	r3, [fp, #-8]
   135dc:	cmp	r3, #0
   135e0:	beq	135fc <_start@@Base+0xc0c>
   135e4:	ldr	r3, [fp, #-8]
   135e8:	sub	r3, r3, #4
   135ec:	mov	r0, r3
   135f0:	bl	13224 <_start@@Base+0x834>
   135f4:	mov	r3, r0
   135f8:	b	13600 <_start@@Base+0xc10>
   135fc:	mov	r3, #0
   13600:	mov	r0, r3
   13604:	sub	sp, fp, #4
   13608:	ldr	fp, [sp]
   1360c:	add	sp, sp, #4
   13610:	pop	{pc}		; (ldr pc, [sp], #4)
   13614:	str	fp, [sp, #-8]!
   13618:	str	lr, [sp, #4]
   1361c:	add	fp, sp, #4
   13620:	sub	sp, sp, #8
   13624:	str	r0, [fp, #-8]
   13628:	ldr	r3, [fp, #-8]
   1362c:	cmp	r3, #0
   13630:	beq	1364c <_start@@Base+0xc5c>
   13634:	ldr	r3, [fp, #-8]
   13638:	sub	r3, r3, #4
   1363c:	mov	r0, r3
   13640:	bl	13224 <_start@@Base+0x834>
   13644:	mov	r3, r0
   13648:	b	13650 <_start@@Base+0xc60>
   1364c:	mov	r3, #0
   13650:	mov	r0, r3
   13654:	sub	sp, fp, #4
   13658:	ldr	fp, [sp]
   1365c:	add	sp, sp, #4
   13660:	pop	{pc}		; (ldr pc, [sp], #4)
   13664:	str	fp, [sp, #-8]!
   13668:	str	lr, [sp, #4]
   1366c:	add	fp, sp, #4
   13670:	sub	sp, sp, #16
   13674:	str	r0, [fp, #-16]
   13678:	str	r1, [fp, #-20]	; 0xffffffec
   1367c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13680:	lsl	r3, r3, #2
   13684:	ldr	r2, [fp, #-16]
   13688:	add	r3, r2, r3
   1368c:	str	r3, [fp, #-8]
   13690:	ldr	r0, [fp, #-16]
   13694:	bl	13574 <_start@@Base+0xb84>
   13698:	mov	r2, r0
   1369c:	ldr	r3, [fp, #-20]	; 0xffffffec
   136a0:	cmp	r3, r2
   136a4:	bcc	136c8 <_start@@Base+0xcd8>
   136a8:	ldr	r3, [pc, #68]	; 136f4 <_start@@Base+0xd04>
   136ac:	add	r3, pc, r3
   136b0:	mov	r2, #108	; 0x6c
   136b4:	ldr	r1, [pc, #60]	; 136f8 <_start@@Base+0xd08>
   136b8:	add	r1, pc, r1
   136bc:	ldr	r0, [pc, #56]	; 136fc <_start@@Base+0xd0c>
   136c0:	add	r0, pc, r0
   136c4:	bl	129e0 <__assert_fail@plt>
   136c8:	ldr	r0, [fp, #-8]
   136cc:	bl	13224 <_start@@Base+0x834>
   136d0:	mov	r3, r0
   136d4:	add	r3, r3, #4
   136d8:	ldr	r2, [fp, #-8]
   136dc:	add	r3, r2, r3
   136e0:	mov	r0, r3
   136e4:	sub	sp, fp, #4
   136e8:	ldr	fp, [sp]
   136ec:	add	sp, sp, #4
   136f0:	pop	{pc}		; (ldr pc, [sp], #4)
   136f4:	muleq	r2, r0, r5
   136f8:	andeq	lr, r1, r0, ror lr
   136fc:	andeq	lr, r1, r8, ror #29
   13700:	str	fp, [sp, #-8]!
   13704:	str	lr, [sp, #4]
   13708:	add	fp, sp, #4
   1370c:	sub	sp, sp, #8
   13710:	str	r0, [fp, #-8]
   13714:	ldr	r3, [fp, #-8]
   13718:	cmp	r3, #0
   1371c:	beq	13734 <_start@@Base+0xd44>
   13720:	bl	13208 <_start@@Base+0x818>
   13724:	mov	r2, r0
   13728:	ldr	r3, [fp, #-8]
   1372c:	add	r3, r3, r2
   13730:	b	13738 <_start@@Base+0xd48>
   13734:	mov	r3, #0
   13738:	mov	r0, r3
   1373c:	sub	sp, fp, #4
   13740:	ldr	fp, [sp]
   13744:	add	sp, sp, #4
   13748:	pop	{pc}		; (ldr pc, [sp], #4)
   1374c:	str	fp, [sp, #-8]!
   13750:	str	lr, [sp, #4]
   13754:	add	fp, sp, #4
   13758:	sub	sp, sp, #16
   1375c:	str	r0, [fp, #-16]
   13760:	str	r1, [fp, #-20]	; 0xffffffec
   13764:	ldr	r3, [fp, #-20]	; 0xffffffec
   13768:	lsl	r3, r3, #2
   1376c:	ldr	r2, [fp, #-16]
   13770:	add	r3, r2, r3
   13774:	str	r3, [fp, #-8]
   13778:	ldr	r0, [fp, #-16]
   1377c:	bl	13574 <_start@@Base+0xb84>
   13780:	mov	r2, r0
   13784:	ldr	r3, [fp, #-20]	; 0xffffffec
   13788:	cmp	r3, r2
   1378c:	bcc	137b0 <_start@@Base+0xdc0>
   13790:	ldr	r3, [pc, #64]	; 137d8 <_start@@Base+0xde8>
   13794:	add	r3, pc, r3
   13798:	mov	r2, #117	; 0x75
   1379c:	ldr	r1, [pc, #56]	; 137dc <_start@@Base+0xdec>
   137a0:	add	r1, pc, r1
   137a4:	ldr	r0, [pc, #52]	; 137e0 <_start@@Base+0xdf0>
   137a8:	add	r0, pc, r0
   137ac:	bl	129e0 <__assert_fail@plt>
   137b0:	ldr	r0, [fp, #-8]
   137b4:	bl	13224 <_start@@Base+0x834>
   137b8:	mov	r2, r0
   137bc:	ldr	r3, [fp, #-8]
   137c0:	add	r3, r3, r2
   137c4:	mov	r0, r3
   137c8:	sub	sp, fp, #4
   137cc:	ldr	fp, [sp]
   137d0:	add	sp, sp, #4
   137d4:	pop	{pc}		; (ldr pc, [sp], #4)
   137d8:	andeq	r2, r2, r8, lsr r8
   137dc:	andeq	lr, r1, r8, lsl #27
   137e0:	andeq	lr, r1, r0, lsl #28
   137e4:	str	fp, [sp, #-8]!
   137e8:	str	lr, [sp, #4]
   137ec:	add	fp, sp, #4
   137f0:	sub	sp, sp, #16
   137f4:	str	r0, [fp, #-16]
   137f8:	str	r1, [fp, #-20]	; 0xffffffec
   137fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13800:	lsl	r3, r3, #2
   13804:	ldr	r2, [fp, #-16]
   13808:	add	r3, r2, r3
   1380c:	str	r3, [fp, #-8]
   13810:	ldr	r0, [fp, #-16]
   13814:	bl	13574 <_start@@Base+0xb84>
   13818:	mov	r2, r0
   1381c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13820:	cmp	r3, r2
   13824:	bcc	13848 <_start@@Base+0xe58>
   13828:	ldr	r3, [pc, #68]	; 13874 <_start@@Base+0xe84>
   1382c:	add	r3, pc, r3
   13830:	mov	r2, #119	; 0x77
   13834:	ldr	r1, [pc, #60]	; 13878 <_start@@Base+0xe88>
   13838:	add	r1, pc, r1
   1383c:	ldr	r0, [pc, #56]	; 1387c <_start@@Base+0xe8c>
   13840:	add	r0, pc, r0
   13844:	bl	129e0 <__assert_fail@plt>
   13848:	ldr	r0, [fp, #-8]
   1384c:	bl	13224 <_start@@Base+0x834>
   13850:	mov	r3, r0
   13854:	add	r3, r3, #4
   13858:	ldr	r2, [fp, #-8]
   1385c:	add	r3, r2, r3
   13860:	mov	r0, r3
   13864:	sub	sp, fp, #4
   13868:	ldr	fp, [sp]
   1386c:	add	sp, sp, #4
   13870:	pop	{pc}		; (ldr pc, [sp], #4)
   13874:	andeq	r2, r2, r4, lsr sl
   13878:	strdeq	lr, [r1], -r0
   1387c:	andeq	lr, r1, r8, ror #26
   13880:	str	fp, [sp, #-8]!
   13884:	str	lr, [sp, #4]
   13888:	add	fp, sp, #4
   1388c:	sub	sp, sp, #8
   13890:	sub	r3, fp, #12
   13894:	stm	r3, {r0, r1}
   13898:	ldr	r3, [fp, #-8]
   1389c:	mov	r0, r3
   138a0:	bl	13700 <_start@@Base+0xd10>
   138a4:	mov	r3, r0
   138a8:	mov	r0, r3
   138ac:	sub	sp, fp, #4
   138b0:	ldr	fp, [sp]
   138b4:	add	sp, sp, #4
   138b8:	pop	{pc}		; (ldr pc, [sp], #4)
   138bc:	str	fp, [sp, #-8]!
   138c0:	str	lr, [sp, #4]
   138c4:	add	fp, sp, #4
   138c8:	sub	sp, sp, #24
   138cc:	str	r0, [fp, #-16]
   138d0:	str	r1, [fp, #-20]	; 0xffffffec
   138d4:	str	r2, [fp, #-24]	; 0xffffffe8
   138d8:	ldr	r0, [fp, #-16]
   138dc:	bl	135c4 <_start@@Base+0xbd4>
   138e0:	str	r0, [fp, #-8]
   138e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   138e8:	ldr	r3, [fp, #-8]
   138ec:	cmp	r2, r3
   138f0:	movcc	r3, r2
   138f4:	movcs	r3, r3
   138f8:	mov	r2, r3
   138fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   13900:	ldr	r0, [fp, #-16]
   13904:	bl	129c8 <strncmp@plt>
   13908:	str	r0, [fp, #-12]
   1390c:	ldr	r3, [fp, #-12]
   13910:	cmp	r3, #0
   13914:	bne	1394c <_start@@Base+0xf5c>
   13918:	ldr	r2, [fp, #-8]
   1391c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13920:	cmp	r2, r3
   13924:	bcc	13944 <_start@@Base+0xf54>
   13928:	ldr	r2, [fp, #-8]
   1392c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13930:	cmp	r2, r3
   13934:	movhi	r3, #1
   13938:	movls	r3, #0
   1393c:	uxtb	r3, r3
   13940:	b	13950 <_start@@Base+0xf60>
   13944:	mvn	r3, #0
   13948:	b	13950 <_start@@Base+0xf60>
   1394c:	ldr	r3, [fp, #-12]
   13950:	mov	r0, r3
   13954:	sub	sp, fp, #4
   13958:	ldr	fp, [sp]
   1395c:	add	sp, sp, #4
   13960:	pop	{pc}		; (ldr pc, [sp], #4)
   13964:	str	fp, [sp, #-8]!
   13968:	str	lr, [sp, #4]
   1396c:	add	fp, sp, #4
   13970:	sub	sp, sp, #16
   13974:	str	r0, [fp, #-8]
   13978:	str	r1, [fp, #-12]
   1397c:	str	r2, [fp, #-16]
   13980:	ldr	r1, [fp, #-12]
   13984:	ldr	r0, [fp, #-8]
   13988:	bl	128e4 <strcmp@plt>
   1398c:	mov	r3, r0
   13990:	mov	r0, r3
   13994:	sub	sp, fp, #4
   13998:	ldr	fp, [sp]
   1399c:	add	sp, sp, #4
   139a0:	pop	{pc}		; (ldr pc, [sp], #4)
   139a4:	str	fp, [sp, #-8]!
   139a8:	str	lr, [sp, #4]
   139ac:	add	fp, sp, #4
   139b0:	sub	sp, sp, #8
   139b4:	str	r0, [fp, #-8]
   139b8:	ldr	r0, [fp, #-8]
   139bc:	bl	13574 <_start@@Base+0xb84>
   139c0:	mov	r3, r0
   139c4:	mov	r0, r3
   139c8:	sub	sp, fp, #4
   139cc:	ldr	fp, [sp]
   139d0:	add	sp, sp, #4
   139d4:	pop	{pc}		; (ldr pc, [sp], #4)
   139d8:	str	fp, [sp, #-8]!
   139dc:	str	lr, [sp, #4]
   139e0:	add	fp, sp, #4
   139e4:	sub	sp, sp, #8
   139e8:	str	r0, [fp, #-8]
   139ec:	str	r1, [fp, #-12]
   139f0:	ldr	r0, [fp, #-8]
   139f4:	bl	13574 <_start@@Base+0xb84>
   139f8:	mov	r2, r0
   139fc:	ldr	r3, [fp, #-12]
   13a00:	cmp	r3, r2
   13a04:	bcc	13a28 <_start@@Base+0x1038>
   13a08:	ldr	r3, [pc, #68]	; 13a54 <_start@@Base+0x1064>
   13a0c:	add	r3, pc, r3
   13a10:	movw	r2, #394	; 0x18a
   13a14:	ldr	r1, [pc, #60]	; 13a58 <_start@@Base+0x1068>
   13a18:	add	r1, pc, r1
   13a1c:	ldr	r0, [pc, #56]	; 13a5c <_start@@Base+0x106c>
   13a20:	add	r0, pc, r0
   13a24:	bl	129e0 <__assert_fail@plt>
   13a28:	ldr	r2, [fp, #-8]
   13a2c:	ldr	r3, [fp, #-12]
   13a30:	add	r3, r2, r3
   13a34:	mov	r0, r3
   13a38:	bl	13120 <_start@@Base+0x730>
   13a3c:	mov	r3, r0
   13a40:	mov	r0, r3
   13a44:	sub	sp, fp, #4
   13a48:	ldr	fp, [sp]
   13a4c:	add	sp, sp, #4
   13a50:	pop	{pc}		; (ldr pc, [sp], #4)
   13a54:	andeq	r2, r2, r8, lsr #5
   13a58:	andeq	lr, r1, r0, lsl fp
   13a5c:	andeq	lr, r1, r8, lsl #23
   13a60:	str	fp, [sp, #-8]!
   13a64:	str	lr, [sp, #4]
   13a68:	add	fp, sp, #4
   13a6c:	sub	sp, sp, #8
   13a70:	str	r0, [fp, #-8]
   13a74:	ldr	r0, [fp, #-8]
   13a78:	bl	13574 <_start@@Base+0xb84>
   13a7c:	mov	r3, r0
   13a80:	mov	r0, r3
   13a84:	sub	sp, fp, #4
   13a88:	ldr	fp, [sp]
   13a8c:	add	sp, sp, #4
   13a90:	pop	{pc}		; (ldr pc, [sp], #4)
   13a94:	str	fp, [sp, #-8]!
   13a98:	str	lr, [sp, #4]
   13a9c:	add	fp, sp, #4
   13aa0:	sub	sp, sp, #8
   13aa4:	str	r0, [fp, #-8]
   13aa8:	str	r1, [fp, #-12]
   13aac:	ldr	r0, [fp, #-8]
   13ab0:	bl	13574 <_start@@Base+0xb84>
   13ab4:	mov	r2, r0
   13ab8:	ldr	r3, [fp, #-12]
   13abc:	cmp	r3, r2
   13ac0:	bcc	13ae4 <_start@@Base+0x10f4>
   13ac4:	ldr	r3, [pc, #68]	; 13b10 <_start@@Base+0x1120>
   13ac8:	add	r3, pc, r3
   13acc:	movw	r2, #395	; 0x18b
   13ad0:	ldr	r1, [pc, #60]	; 13b14 <_start@@Base+0x1124>
   13ad4:	add	r1, pc, r1
   13ad8:	ldr	r0, [pc, #56]	; 13b18 <_start@@Base+0x1128>
   13adc:	add	r0, pc, r0
   13ae0:	bl	129e0 <__assert_fail@plt>
   13ae4:	ldr	r2, [fp, #-8]
   13ae8:	ldr	r3, [fp, #-12]
   13aec:	add	r3, r2, r3
   13af0:	mov	r0, r3
   13af4:	bl	12b30 <_start@@Base+0x140>
   13af8:	mov	r3, r0
   13afc:	mov	r0, r3
   13b00:	sub	sp, fp, #4
   13b04:	ldr	fp, [sp]
   13b08:	add	sp, sp, #4
   13b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b10:	andeq	r2, r2, ip, lsr #1
   13b14:	andeq	lr, r1, r4, asr sl
   13b18:	andeq	lr, r1, ip, asr #21
   13b1c:	str	fp, [sp, #-8]!
   13b20:	str	lr, [sp, #4]
   13b24:	add	fp, sp, #4
   13b28:	sub	sp, sp, #24
   13b2c:	str	r0, [fp, #-24]	; 0xffffffe8
   13b30:	mov	r3, r1
   13b34:	strb	r3, [fp, #-25]	; 0xffffffe7
   13b38:	mov	r3, #0
   13b3c:	str	r3, [fp, #-8]
   13b40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13b44:	bl	13a60 <_start@@Base+0x1070>
   13b48:	str	r0, [fp, #-12]
   13b4c:	ldr	r3, [fp, #-12]
   13b50:	cmp	r3, #0
   13b54:	bne	13b68 <_start@@Base+0x1178>
   13b58:	ldr	r3, [pc, #236]	; 13c4c <_start@@Base+0x125c>
   13b5c:	add	r3, pc, r3
   13b60:	ldr	r3, [r3]
   13b64:	b	13c38 <_start@@Base+0x1248>
   13b68:	ldr	r3, [fp, #-12]
   13b6c:	sub	r3, r3, #1
   13b70:	str	r3, [fp, #-12]
   13b74:	b	13bd0 <_start@@Base+0x11e0>
   13b78:	ldr	r2, [fp, #-12]
   13b7c:	ldr	r3, [fp, #-8]
   13b80:	sub	r3, r2, r3
   13b84:	lsr	r3, r3, #1
   13b88:	ldr	r2, [fp, #-8]
   13b8c:	add	r3, r2, r3
   13b90:	str	r3, [fp, #-16]
   13b94:	ldr	r1, [fp, #-16]
   13b98:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13b9c:	bl	13a94 <_start@@Base+0x10a4>
   13ba0:	mov	r3, r0
   13ba4:	strb	r3, [fp, #-17]	; 0xffffffef
   13ba8:	ldrb	r2, [fp, #-17]	; 0xffffffef
   13bac:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13bb0:	cmp	r2, r3
   13bb4:	bcs	13bc8 <_start@@Base+0x11d8>
   13bb8:	ldr	r3, [fp, #-16]
   13bbc:	add	r3, r3, #1
   13bc0:	str	r3, [fp, #-8]
   13bc4:	b	13bd0 <_start@@Base+0x11e0>
   13bc8:	ldr	r3, [fp, #-16]
   13bcc:	str	r3, [fp, #-12]
   13bd0:	ldr	r2, [fp, #-8]
   13bd4:	ldr	r3, [fp, #-12]
   13bd8:	cmp	r2, r3
   13bdc:	bcc	13b78 <_start@@Base+0x1188>
   13be0:	ldr	r2, [fp, #-8]
   13be4:	ldr	r3, [fp, #-12]
   13be8:	cmp	r2, r3
   13bec:	bne	13c2c <_start@@Base+0x123c>
   13bf0:	ldr	r1, [fp, #-8]
   13bf4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13bf8:	bl	13a94 <_start@@Base+0x10a4>
   13bfc:	mov	r3, r0
   13c00:	strb	r3, [fp, #-17]	; 0xffffffef
   13c04:	ldrb	r2, [fp, #-17]	; 0xffffffef
   13c08:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13c0c:	cmp	r2, r3
   13c10:	bcc	13c2c <_start@@Base+0x123c>
   13c14:	ldrb	r2, [fp, #-17]	; 0xffffffef
   13c18:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13c1c:	cmp	r2, r3
   13c20:	bhi	13c2c <_start@@Base+0x123c>
   13c24:	ldr	r3, [fp, #-8]
   13c28:	b	13c38 <_start@@Base+0x1248>
   13c2c:	ldr	r3, [pc, #28]	; 13c50 <_start@@Base+0x1260>
   13c30:	add	r3, pc, r3
   13c34:	ldr	r3, [r3]
   13c38:	mov	r0, r3
   13c3c:	sub	sp, fp, #4
   13c40:	ldr	fp, [sp]
   13c44:	add	sp, sp, #4
   13c48:	pop	{pc}		; (ldr pc, [sp], #4)
   13c4c:	andeq	r4, r3, ip, lsl r5
   13c50:	andeq	r4, r3, r8, asr #8
   13c54:	str	fp, [sp, #-8]!
   13c58:	str	lr, [sp, #4]
   13c5c:	add	fp, sp, #4
   13c60:	sub	sp, sp, #16
   13c64:	str	r0, [fp, #-16]
   13c68:	mov	r3, r1
   13c6c:	strb	r3, [fp, #-17]	; 0xffffffef
   13c70:	mov	r3, #0
   13c74:	str	r3, [fp, #-8]
   13c78:	b	13cc4 <_start@@Base+0x12d4>
   13c7c:	ldr	r1, [fp, #-8]
   13c80:	ldr	r0, [fp, #-16]
   13c84:	bl	13a94 <_start@@Base+0x10a4>
   13c88:	mov	r3, r0
   13c8c:	strb	r3, [fp, #-9]
   13c90:	ldrb	r2, [fp, #-9]
   13c94:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13c98:	cmp	r2, r3
   13c9c:	bcc	13cb8 <_start@@Base+0x12c8>
   13ca0:	ldrb	r2, [fp, #-9]
   13ca4:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13ca8:	cmp	r2, r3
   13cac:	bhi	13cb8 <_start@@Base+0x12c8>
   13cb0:	ldr	r3, [fp, #-8]
   13cb4:	b	13ce8 <_start@@Base+0x12f8>
   13cb8:	ldr	r3, [fp, #-8]
   13cbc:	add	r3, r3, #1
   13cc0:	str	r3, [fp, #-8]
   13cc4:	ldr	r0, [fp, #-16]
   13cc8:	bl	13a60 <_start@@Base+0x1070>
   13ccc:	mov	r2, r0
   13cd0:	ldr	r3, [fp, #-8]
   13cd4:	cmp	r3, r2
   13cd8:	bcc	13c7c <_start@@Base+0x128c>
   13cdc:	ldr	r3, [pc, #24]	; 13cfc <_start@@Base+0x130c>
   13ce0:	add	r3, pc, r3
   13ce4:	ldr	r3, [r3]
   13ce8:	mov	r0, r3
   13cec:	sub	sp, fp, #4
   13cf0:	ldr	fp, [sp]
   13cf4:	add	sp, sp, #4
   13cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   13cfc:	muleq	r3, r8, r3
   13d00:	str	fp, [sp, #-8]!
   13d04:	str	lr, [sp, #4]
   13d08:	add	fp, sp, #4
   13d0c:	sub	sp, sp, #24
   13d10:	str	r0, [fp, #-16]
   13d14:	str	r1, [fp, #-20]	; 0xffffffec
   13d18:	str	r2, [fp, #-24]	; 0xffffffe8
   13d1c:	strb	r3, [fp, #-25]	; 0xffffffe7
   13d20:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d24:	str	r3, [fp, #-8]
   13d28:	b	13d74 <_start@@Base+0x1384>
   13d2c:	ldr	r1, [fp, #-8]
   13d30:	ldr	r0, [fp, #-16]
   13d34:	bl	13a94 <_start@@Base+0x10a4>
   13d38:	mov	r3, r0
   13d3c:	strb	r3, [fp, #-9]
   13d40:	ldrb	r2, [fp, #-9]
   13d44:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13d48:	cmp	r2, r3
   13d4c:	bcc	13d68 <_start@@Base+0x1378>
   13d50:	ldrb	r2, [fp, #-9]
   13d54:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13d58:	cmp	r2, r3
   13d5c:	bhi	13d68 <_start@@Base+0x1378>
   13d60:	ldr	r3, [fp, #-8]
   13d64:	b	13db8 <_start@@Base+0x13c8>
   13d68:	ldr	r3, [fp, #-8]
   13d6c:	add	r3, r3, #1
   13d70:	str	r3, [fp, #-8]
   13d74:	ldr	r0, [fp, #-16]
   13d78:	bl	13a60 <_start@@Base+0x1070>
   13d7c:	mov	r2, r0
   13d80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d84:	cmp	r3, r2
   13d88:	bcc	13d9c <_start@@Base+0x13ac>
   13d8c:	ldr	r0, [fp, #-16]
   13d90:	bl	13a60 <_start@@Base+0x1070>
   13d94:	mov	r3, r0
   13d98:	b	13da0 <_start@@Base+0x13b0>
   13d9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13da0:	ldr	r2, [fp, #-8]
   13da4:	cmp	r3, r2
   13da8:	bhi	13d2c <_start@@Base+0x133c>
   13dac:	ldr	r3, [pc, #24]	; 13dcc <_start@@Base+0x13dc>
   13db0:	add	r3, pc, r3
   13db4:	ldr	r3, [r3]
   13db8:	mov	r0, r3
   13dbc:	sub	sp, fp, #4
   13dc0:	ldr	fp, [sp]
   13dc4:	add	sp, sp, #4
   13dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   13dcc:	andeq	r4, r3, r8, asr #5
   13dd0:	str	fp, [sp, #-8]!
   13dd4:	str	lr, [sp, #4]
   13dd8:	add	fp, sp, #4
   13ddc:	sub	sp, sp, #16
   13de0:	str	r0, [fp, #-16]
   13de4:	mov	r3, r1
   13de8:	strb	r3, [fp, #-17]	; 0xffffffef
   13dec:	ldr	r0, [fp, #-16]
   13df0:	bl	13a60 <_start@@Base+0x1070>
   13df4:	str	r0, [fp, #-8]
   13df8:	b	13e38 <_start@@Base+0x1448>
   13dfc:	ldr	r1, [fp, #-8]
   13e00:	ldr	r0, [fp, #-16]
   13e04:	bl	13a94 <_start@@Base+0x10a4>
   13e08:	mov	r3, r0
   13e0c:	strb	r3, [fp, #-9]
   13e10:	ldrb	r2, [fp, #-9]
   13e14:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13e18:	cmp	r2, r3
   13e1c:	bcc	13e38 <_start@@Base+0x1448>
   13e20:	ldrb	r2, [fp, #-9]
   13e24:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13e28:	cmp	r2, r3
   13e2c:	bhi	13e38 <_start@@Base+0x1448>
   13e30:	ldr	r3, [fp, #-8]
   13e34:	b	13e58 <_start@@Base+0x1468>
   13e38:	ldr	r3, [fp, #-8]
   13e3c:	sub	r2, r3, #1
   13e40:	str	r2, [fp, #-8]
   13e44:	cmp	r3, #0
   13e48:	bne	13dfc <_start@@Base+0x140c>
   13e4c:	ldr	r3, [pc, #24]	; 13e6c <_start@@Base+0x147c>
   13e50:	add	r3, pc, r3
   13e54:	ldr	r3, [r3]
   13e58:	mov	r0, r3
   13e5c:	sub	sp, fp, #4
   13e60:	ldr	fp, [sp]
   13e64:	add	sp, sp, #4
   13e68:	pop	{pc}		; (ldr pc, [sp], #4)
   13e6c:	andeq	r4, r3, r8, lsr #4
   13e70:	str	fp, [sp, #-8]!
   13e74:	str	lr, [sp, #4]
   13e78:	add	fp, sp, #4
   13e7c:	sub	sp, sp, #24
   13e80:	str	r0, [fp, #-16]
   13e84:	str	r1, [fp, #-20]	; 0xffffffec
   13e88:	str	r2, [fp, #-24]	; 0xffffffe8
   13e8c:	strb	r3, [fp, #-25]	; 0xffffffe7
   13e90:	ldr	r0, [fp, #-16]
   13e94:	bl	13a60 <_start@@Base+0x1070>
   13e98:	mov	r2, r0
   13e9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ea0:	cmp	r3, r2
   13ea4:	bcc	13eb8 <_start@@Base+0x14c8>
   13ea8:	ldr	r0, [fp, #-16]
   13eac:	bl	13a60 <_start@@Base+0x1070>
   13eb0:	mov	r3, r0
   13eb4:	b	13ebc <_start@@Base+0x14cc>
   13eb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ebc:	str	r3, [fp, #-8]
   13ec0:	b	13f00 <_start@@Base+0x1510>
   13ec4:	ldr	r1, [fp, #-8]
   13ec8:	ldr	r0, [fp, #-16]
   13ecc:	bl	13a94 <_start@@Base+0x10a4>
   13ed0:	mov	r3, r0
   13ed4:	strb	r3, [fp, #-9]
   13ed8:	ldrb	r2, [fp, #-9]
   13edc:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13ee0:	cmp	r2, r3
   13ee4:	bcc	13f00 <_start@@Base+0x1510>
   13ee8:	ldrb	r2, [fp, #-9]
   13eec:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13ef0:	cmp	r2, r3
   13ef4:	bhi	13f00 <_start@@Base+0x1510>
   13ef8:	ldr	r3, [fp, #-8]
   13efc:	b	13f24 <_start@@Base+0x1534>
   13f00:	ldr	r3, [fp, #-8]
   13f04:	sub	r2, r3, #1
   13f08:	str	r2, [fp, #-8]
   13f0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f10:	cmp	r2, r3
   13f14:	bcc	13ec4 <_start@@Base+0x14d4>
   13f18:	ldr	r3, [pc, #24]	; 13f38 <_start@@Base+0x1548>
   13f1c:	add	r3, pc, r3
   13f20:	ldr	r3, [r3]
   13f24:	mov	r0, r3
   13f28:	sub	sp, fp, #4
   13f2c:	ldr	fp, [sp]
   13f30:	add	sp, sp, #4
   13f34:	pop	{pc}		; (ldr pc, [sp], #4)
   13f38:	andeq	r4, r3, ip, asr r1
   13f3c:	str	fp, [sp, #-8]!
   13f40:	str	lr, [sp, #4]
   13f44:	add	fp, sp, #4
   13f48:	sub	sp, sp, #32
   13f4c:	str	r0, [fp, #-24]	; 0xffffffe8
   13f50:	str	r1, [fp, #-28]	; 0xffffffe4
   13f54:	str	r2, [fp, #-32]	; 0xffffffe0
   13f58:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13f5c:	str	r3, [fp, #-12]
   13f60:	b	14054 <_start@@Base+0x1664>
   13f64:	ldr	r3, [fp, #-12]
   13f68:	lsl	r3, r3, #1
   13f6c:	str	r3, [fp, #-8]
   13f70:	ldr	r2, [fp, #-8]
   13f74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13f78:	cmp	r2, r3
   13f7c:	bcs	13fcc <_start@@Base+0x15dc>
   13f80:	ldr	r1, [fp, #-8]
   13f84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13f88:	bl	13a94 <_start@@Base+0x10a4>
   13f8c:	mov	r3, r0
   13f90:	strb	r3, [fp, #-13]
   13f94:	ldr	r3, [fp, #-8]
   13f98:	add	r3, r3, #1
   13f9c:	mov	r1, r3
   13fa0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13fa4:	bl	13a94 <_start@@Base+0x10a4>
   13fa8:	mov	r3, r0
   13fac:	strb	r3, [fp, #-14]
   13fb0:	ldrb	r2, [fp, #-13]
   13fb4:	ldrb	r3, [fp, #-14]
   13fb8:	cmp	r2, r3
   13fbc:	bcs	13fcc <_start@@Base+0x15dc>
   13fc0:	ldr	r3, [fp, #-8]
   13fc4:	add	r3, r3, #1
   13fc8:	str	r3, [fp, #-8]
   13fcc:	ldr	r1, [fp, #-12]
   13fd0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13fd4:	bl	13a94 <_start@@Base+0x10a4>
   13fd8:	mov	r3, r0
   13fdc:	strb	r3, [fp, #-15]
   13fe0:	ldr	r1, [fp, #-8]
   13fe4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13fe8:	bl	13a94 <_start@@Base+0x10a4>
   13fec:	mov	r3, r0
   13ff0:	strb	r3, [fp, #-13]
   13ff4:	ldrb	r2, [fp, #-15]
   13ff8:	ldrb	r3, [fp, #-13]
   13ffc:	cmp	r2, r3
   14000:	bcs	1406c <_start@@Base+0x167c>
   14004:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14008:	ldr	r3, [fp, #-8]
   1400c:	add	r3, r2, r3
   14010:	ldrb	r3, [r3]
   14014:	strb	r3, [fp, #-16]
   14018:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1401c:	ldr	r3, [fp, #-12]
   14020:	add	r2, r2, r3
   14024:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14028:	ldr	r3, [fp, #-8]
   1402c:	add	r3, r1, r3
   14030:	ldrb	r2, [r2]
   14034:	strb	r2, [r3]
   14038:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1403c:	ldr	r3, [fp, #-12]
   14040:	add	r3, r2, r3
   14044:	ldrb	r2, [fp, #-16]
   14048:	strb	r2, [r3]
   1404c:	ldr	r3, [fp, #-8]
   14050:	str	r3, [fp, #-12]
   14054:	ldr	r3, [fp, #-12]
   14058:	lsl	r3, r3, #1
   1405c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14060:	cmp	r2, r3
   14064:	bcs	13f64 <_start@@Base+0x1574>
   14068:	b	14070 <_start@@Base+0x1680>
   1406c:	nop	{0}
   14070:	sub	sp, fp, #4
   14074:	ldr	fp, [sp]
   14078:	add	sp, sp, #4
   1407c:	pop	{pc}		; (ldr pc, [sp], #4)
   14080:	str	fp, [sp, #-8]!
   14084:	str	lr, [sp, #4]
   14088:	add	fp, sp, #4
   1408c:	sub	sp, sp, #24
   14090:	str	r0, [fp, #-24]	; 0xffffffe8
   14094:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14098:	bl	13a60 <_start@@Base+0x1070>
   1409c:	str	r0, [fp, #-16]
   140a0:	ldr	r3, [fp, #-16]
   140a4:	cmp	r3, #0
   140a8:	beq	14150 <_start@@Base+0x1760>
   140ac:	ldr	r3, [fp, #-16]
   140b0:	sub	r3, r3, #1
   140b4:	str	r3, [fp, #-12]
   140b8:	ldr	r3, [fp, #-16]
   140bc:	lsr	r3, r3, #1
   140c0:	str	r3, [fp, #-8]
   140c4:	ldr	r2, [fp, #-12]
   140c8:	ldr	r1, [fp, #-8]
   140cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   140d0:	bl	13f3c <_start@@Base+0x154c>
   140d4:	ldr	r3, [fp, #-8]
   140d8:	sub	r2, r3, #1
   140dc:	str	r2, [fp, #-8]
   140e0:	cmp	r3, #0
   140e4:	bne	140c4 <_start@@Base+0x16d4>
   140e8:	b	14140 <_start@@Base+0x1750>
   140ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   140f0:	ldr	r3, [fp, #-12]
   140f4:	add	r3, r2, r3
   140f8:	ldrb	r3, [r3]
   140fc:	strb	r3, [fp, #-17]	; 0xffffffef
   14100:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14104:	ldr	r3, [fp, #-12]
   14108:	add	r3, r2, r3
   1410c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14110:	ldrb	r2, [r2]
   14114:	strb	r2, [r3]
   14118:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1411c:	ldrb	r2, [fp, #-17]	; 0xffffffef
   14120:	strb	r2, [r3]
   14124:	ldr	r3, [fp, #-12]
   14128:	sub	r3, r3, #1
   1412c:	str	r3, [fp, #-12]
   14130:	ldr	r2, [fp, #-12]
   14134:	mov	r1, #0
   14138:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1413c:	bl	13f3c <_start@@Base+0x154c>
   14140:	ldr	r3, [fp, #-12]
   14144:	cmp	r3, #0
   14148:	bne	140ec <_start@@Base+0x16fc>
   1414c:	b	14154 <_start@@Base+0x1764>
   14150:	nop	{0}
   14154:	sub	sp, fp, #4
   14158:	ldr	fp, [sp]
   1415c:	add	sp, sp, #4
   14160:	pop	{pc}		; (ldr pc, [sp], #4)
   14164:	str	fp, [sp, #-8]!
   14168:	str	lr, [sp, #4]
   1416c:	add	fp, sp, #4
   14170:	sub	sp, sp, #8
   14174:	str	r0, [fp, #-8]
   14178:	ldr	r0, [fp, #-8]
   1417c:	bl	14080 <_start@@Base+0x1690>
   14180:	nop	{0}
   14184:	sub	sp, fp, #4
   14188:	ldr	fp, [sp]
   1418c:	add	sp, sp, #4
   14190:	pop	{pc}		; (ldr pc, [sp], #4)
   14194:	str	fp, [sp, #-8]!
   14198:	str	lr, [sp, #4]
   1419c:	add	fp, sp, #4
   141a0:	sub	sp, sp, #8
   141a4:	str	r0, [fp, #-8]
   141a8:	str	r1, [fp, #-12]
   141ac:	ldr	r0, [fp, #-8]
   141b0:	bl	13574 <_start@@Base+0xb84>
   141b4:	mov	r2, r0
   141b8:	ldr	r3, [fp, #-12]
   141bc:	cmp	r3, r2
   141c0:	bcc	141e4 <_start@@Base+0x17f4>
   141c4:	ldr	r3, [pc, #68]	; 14210 <_start@@Base+0x1820>
   141c8:	add	r3, pc, r3
   141cc:	movw	r2, #405	; 0x195
   141d0:	ldr	r1, [pc, #60]	; 14214 <_start@@Base+0x1824>
   141d4:	add	r1, pc, r1
   141d8:	ldr	r0, [pc, #56]	; 14218 <_start@@Base+0x1828>
   141dc:	add	r0, pc, r0
   141e0:	bl	129e0 <__assert_fail@plt>
   141e4:	ldr	r2, [fp, #-8]
   141e8:	ldr	r3, [fp, #-12]
   141ec:	add	r3, r2, r3
   141f0:	mov	r0, r3
   141f4:	bl	13184 <_start@@Base+0x794>
   141f8:	mov	r3, r0
   141fc:	mov	r0, r3
   14200:	sub	sp, fp, #4
   14204:	ldr	fp, [sp]
   14208:	add	sp, sp, #4
   1420c:	pop	{pc}		; (ldr pc, [sp], #4)
   14210:	muleq	r2, r4, lr
   14214:	andeq	lr, r1, r4, asr r3
   14218:	andeq	lr, r1, ip, asr #7
   1421c:	str	fp, [sp, #-8]!
   14220:	str	lr, [sp, #4]
   14224:	add	fp, sp, #4
   14228:	sub	sp, sp, #16
   1422c:	str	r0, [fp, #-16]
   14230:	str	r1, [fp, #-20]	; 0xffffffec
   14234:	mov	r3, #0
   14238:	str	r3, [fp, #-8]
   1423c:	b	14280 <_start@@Base+0x1890>
   14240:	ldr	r1, [fp, #-8]
   14244:	ldr	r0, [fp, #-16]
   14248:	bl	13664 <_start@@Base+0xc74>
   1424c:	str	r0, [fp, #-12]
   14250:	mov	r2, #0
   14254:	ldr	r1, [fp, #-20]	; 0xffffffec
   14258:	ldr	r0, [fp, #-12]
   1425c:	bl	13964 <_start@@Base+0xf74>
   14260:	mov	r3, r0
   14264:	cmp	r3, #0
   14268:	bne	14274 <_start@@Base+0x1884>
   1426c:	ldr	r3, [fp, #-8]
   14270:	b	142a4 <_start@@Base+0x18b4>
   14274:	ldr	r3, [fp, #-8]
   14278:	add	r3, r3, #1
   1427c:	str	r3, [fp, #-8]
   14280:	ldr	r0, [fp, #-16]
   14284:	bl	13614 <_start@@Base+0xc24>
   14288:	mov	r2, r0
   1428c:	ldr	r3, [fp, #-8]
   14290:	cmp	r3, r2
   14294:	bcc	14240 <_start@@Base+0x1850>
   14298:	ldr	r3, [pc, #24]	; 142b8 <_start@@Base+0x18c8>
   1429c:	add	r3, pc, r3
   142a0:	ldr	r3, [r3]
   142a4:	mov	r0, r3
   142a8:	sub	sp, fp, #4
   142ac:	ldr	fp, [sp]
   142b0:	add	sp, sp, #4
   142b4:	pop	{pc}		; (ldr pc, [sp], #4)
   142b8:	ldrdeq	r3, [r3], -ip
   142bc:	str	fp, [sp, #-8]!
   142c0:	str	lr, [sp, #4]
   142c4:	add	fp, sp, #4
   142c8:	sub	sp, sp, #24
   142cc:	str	r0, [fp, #-16]
   142d0:	str	r1, [fp, #-20]	; 0xffffffec
   142d4:	str	r2, [fp, #-24]	; 0xffffffe8
   142d8:	mov	r3, #0
   142dc:	str	r3, [fp, #-8]
   142e0:	b	14324 <_start@@Base+0x1934>
   142e4:	ldr	r1, [fp, #-8]
   142e8:	ldr	r0, [fp, #-16]
   142ec:	bl	13664 <_start@@Base+0xc74>
   142f0:	str	r0, [fp, #-12]
   142f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   142f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   142fc:	ldr	r0, [fp, #-12]
   14300:	bl	138bc <_start@@Base+0xecc>
   14304:	mov	r3, r0
   14308:	cmp	r3, #0
   1430c:	bne	14318 <_start@@Base+0x1928>
   14310:	ldr	r3, [fp, #-8]
   14314:	b	14348 <_start@@Base+0x1958>
   14318:	ldr	r3, [fp, #-8]
   1431c:	add	r3, r3, #1
   14320:	str	r3, [fp, #-8]
   14324:	ldr	r0, [fp, #-16]
   14328:	bl	13614 <_start@@Base+0xc24>
   1432c:	mov	r2, r0
   14330:	ldr	r3, [fp, #-8]
   14334:	cmp	r3, r2
   14338:	bcc	142e4 <_start@@Base+0x18f4>
   1433c:	ldr	r3, [pc, #24]	; 1435c <_start@@Base+0x196c>
   14340:	add	r3, pc, r3
   14344:	ldr	r3, [r3]
   14348:	mov	r0, r3
   1434c:	sub	sp, fp, #4
   14350:	ldr	fp, [sp]
   14354:	add	sp, sp, #4
   14358:	pop	{pc}		; (ldr pc, [sp], #4)
   1435c:	andeq	r3, r3, r8, lsr sp
   14360:	str	fp, [sp, #-8]!
   14364:	str	lr, [sp, #4]
   14368:	add	fp, sp, #4
   1436c:	sub	sp, sp, #24
   14370:	str	r0, [fp, #-16]
   14374:	str	r1, [fp, #-20]	; 0xffffffec
   14378:	str	r2, [fp, #-24]	; 0xffffffe8
   1437c:	str	r3, [fp, #-28]	; 0xffffffe4
   14380:	ldr	r3, [fp, #-20]	; 0xffffffec
   14384:	str	r3, [fp, #-8]
   14388:	b	143cc <_start@@Base+0x19dc>
   1438c:	ldr	r1, [fp, #-8]
   14390:	ldr	r0, [fp, #-16]
   14394:	bl	13664 <_start@@Base+0xc74>
   14398:	str	r0, [fp, #-12]
   1439c:	mov	r2, #0
   143a0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   143a4:	ldr	r0, [fp, #-12]
   143a8:	bl	13964 <_start@@Base+0xf74>
   143ac:	mov	r3, r0
   143b0:	cmp	r3, #0
   143b4:	bne	143c0 <_start@@Base+0x19d0>
   143b8:	ldr	r3, [fp, #-8]
   143bc:	b	14410 <_start@@Base+0x1a20>
   143c0:	ldr	r3, [fp, #-8]
   143c4:	add	r3, r3, #1
   143c8:	str	r3, [fp, #-8]
   143cc:	ldr	r0, [fp, #-16]
   143d0:	bl	13614 <_start@@Base+0xc24>
   143d4:	mov	r2, r0
   143d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   143dc:	cmp	r3, r2
   143e0:	bcc	143f4 <_start@@Base+0x1a04>
   143e4:	ldr	r0, [fp, #-16]
   143e8:	bl	13614 <_start@@Base+0xc24>
   143ec:	mov	r3, r0
   143f0:	b	143f8 <_start@@Base+0x1a08>
   143f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   143f8:	ldr	r2, [fp, #-8]
   143fc:	cmp	r3, r2
   14400:	bhi	1438c <_start@@Base+0x199c>
   14404:	ldr	r3, [pc, #24]	; 14424 <_start@@Base+0x1a34>
   14408:	add	r3, pc, r3
   1440c:	ldr	r3, [r3]
   14410:	mov	r0, r3
   14414:	sub	sp, fp, #4
   14418:	ldr	fp, [sp]
   1441c:	add	sp, sp, #4
   14420:	pop	{pc}		; (ldr pc, [sp], #4)
   14424:	andeq	r3, r3, r0, ror ip
   14428:	str	fp, [sp, #-8]!
   1442c:	str	lr, [sp, #4]
   14430:	add	fp, sp, #4
   14434:	sub	sp, sp, #24
   14438:	str	r0, [fp, #-16]
   1443c:	str	r1, [fp, #-20]	; 0xffffffec
   14440:	str	r2, [fp, #-24]	; 0xffffffe8
   14444:	str	r3, [fp, #-28]	; 0xffffffe4
   14448:	ldr	r3, [fp, #-20]	; 0xffffffec
   1444c:	str	r3, [fp, #-8]
   14450:	b	14494 <_start@@Base+0x1aa4>
   14454:	ldr	r1, [fp, #-8]
   14458:	ldr	r0, [fp, #-16]
   1445c:	bl	13664 <_start@@Base+0xc74>
   14460:	str	r0, [fp, #-12]
   14464:	ldr	r2, [fp, #4]
   14468:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1446c:	ldr	r0, [fp, #-12]
   14470:	bl	138bc <_start@@Base+0xecc>
   14474:	mov	r3, r0
   14478:	cmp	r3, #0
   1447c:	bne	14488 <_start@@Base+0x1a98>
   14480:	ldr	r3, [fp, #-8]
   14484:	b	144d8 <_start@@Base+0x1ae8>
   14488:	ldr	r3, [fp, #-8]
   1448c:	add	r3, r3, #1
   14490:	str	r3, [fp, #-8]
   14494:	ldr	r0, [fp, #-16]
   14498:	bl	13614 <_start@@Base+0xc24>
   1449c:	mov	r2, r0
   144a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   144a4:	cmp	r3, r2
   144a8:	bcc	144bc <_start@@Base+0x1acc>
   144ac:	ldr	r0, [fp, #-16]
   144b0:	bl	13614 <_start@@Base+0xc24>
   144b4:	mov	r3, r0
   144b8:	b	144c0 <_start@@Base+0x1ad0>
   144bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   144c0:	ldr	r2, [fp, #-8]
   144c4:	cmp	r3, r2
   144c8:	bhi	14454 <_start@@Base+0x1a64>
   144cc:	ldr	r3, [pc, #24]	; 144ec <_start@@Base+0x1afc>
   144d0:	add	r3, pc, r3
   144d4:	ldr	r3, [r3]
   144d8:	mov	r0, r3
   144dc:	sub	sp, fp, #4
   144e0:	ldr	fp, [sp]
   144e4:	add	sp, sp, #4
   144e8:	pop	{pc}		; (ldr pc, [sp], #4)
   144ec:	andeq	r3, r3, r8, lsr #23
   144f0:	str	fp, [sp, #-8]!
   144f4:	str	lr, [sp, #4]
   144f8:	add	fp, sp, #4
   144fc:	sub	sp, sp, #16
   14500:	str	r0, [fp, #-16]
   14504:	str	r1, [fp, #-20]	; 0xffffffec
   14508:	ldr	r0, [fp, #-16]
   1450c:	bl	13614 <_start@@Base+0xc24>
   14510:	str	r0, [fp, #-8]
   14514:	b	1454c <_start@@Base+0x1b5c>
   14518:	ldr	r1, [fp, #-8]
   1451c:	ldr	r0, [fp, #-16]
   14520:	bl	13664 <_start@@Base+0xc74>
   14524:	str	r0, [fp, #-12]
   14528:	mov	r2, #0
   1452c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14530:	ldr	r0, [fp, #-12]
   14534:	bl	13964 <_start@@Base+0xf74>
   14538:	mov	r3, r0
   1453c:	cmp	r3, #0
   14540:	bne	1454c <_start@@Base+0x1b5c>
   14544:	ldr	r3, [fp, #-8]
   14548:	b	1456c <_start@@Base+0x1b7c>
   1454c:	ldr	r3, [fp, #-8]
   14550:	sub	r2, r3, #1
   14554:	str	r2, [fp, #-8]
   14558:	cmp	r3, #0
   1455c:	bne	14518 <_start@@Base+0x1b28>
   14560:	ldr	r3, [pc, #24]	; 14580 <_start@@Base+0x1b90>
   14564:	add	r3, pc, r3
   14568:	ldr	r3, [r3]
   1456c:	mov	r0, r3
   14570:	sub	sp, fp, #4
   14574:	ldr	fp, [sp]
   14578:	add	sp, sp, #4
   1457c:	pop	{pc}		; (ldr pc, [sp], #4)
   14580:	andeq	r3, r3, r4, lsl fp
   14584:	str	fp, [sp, #-8]!
   14588:	str	lr, [sp, #4]
   1458c:	add	fp, sp, #4
   14590:	sub	sp, sp, #24
   14594:	str	r0, [fp, #-16]
   14598:	str	r1, [fp, #-20]	; 0xffffffec
   1459c:	str	r2, [fp, #-24]	; 0xffffffe8
   145a0:	ldr	r0, [fp, #-16]
   145a4:	bl	13614 <_start@@Base+0xc24>
   145a8:	str	r0, [fp, #-8]
   145ac:	b	145e4 <_start@@Base+0x1bf4>
   145b0:	ldr	r1, [fp, #-8]
   145b4:	ldr	r0, [fp, #-16]
   145b8:	bl	13664 <_start@@Base+0xc74>
   145bc:	str	r0, [fp, #-12]
   145c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   145c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   145c8:	ldr	r0, [fp, #-12]
   145cc:	bl	138bc <_start@@Base+0xecc>
   145d0:	mov	r3, r0
   145d4:	cmp	r3, #0
   145d8:	bne	145e4 <_start@@Base+0x1bf4>
   145dc:	ldr	r3, [fp, #-8]
   145e0:	b	14604 <_start@@Base+0x1c14>
   145e4:	ldr	r3, [fp, #-8]
   145e8:	sub	r2, r3, #1
   145ec:	str	r2, [fp, #-8]
   145f0:	cmp	r3, #0
   145f4:	bne	145b0 <_start@@Base+0x1bc0>
   145f8:	ldr	r3, [pc, #24]	; 14618 <_start@@Base+0x1c28>
   145fc:	add	r3, pc, r3
   14600:	ldr	r3, [r3]
   14604:	mov	r0, r3
   14608:	sub	sp, fp, #4
   1460c:	ldr	fp, [sp]
   14610:	add	sp, sp, #4
   14614:	pop	{pc}		; (ldr pc, [sp], #4)
   14618:	andeq	r3, r3, ip, ror sl
   1461c:	str	fp, [sp, #-8]!
   14620:	str	lr, [sp, #4]
   14624:	add	fp, sp, #4
   14628:	sub	sp, sp, #24
   1462c:	str	r0, [fp, #-16]
   14630:	str	r1, [fp, #-20]	; 0xffffffec
   14634:	str	r2, [fp, #-24]	; 0xffffffe8
   14638:	str	r3, [fp, #-28]	; 0xffffffe4
   1463c:	ldr	r0, [fp, #-16]
   14640:	bl	13614 <_start@@Base+0xc24>
   14644:	mov	r2, r0
   14648:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1464c:	cmp	r3, r2
   14650:	bcc	14664 <_start@@Base+0x1c74>
   14654:	ldr	r0, [fp, #-16]
   14658:	bl	13614 <_start@@Base+0xc24>
   1465c:	mov	r3, r0
   14660:	b	14668 <_start@@Base+0x1c78>
   14664:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14668:	str	r3, [fp, #-8]
   1466c:	b	146a4 <_start@@Base+0x1cb4>
   14670:	ldr	r1, [fp, #-8]
   14674:	ldr	r0, [fp, #-16]
   14678:	bl	13664 <_start@@Base+0xc74>
   1467c:	str	r0, [fp, #-12]
   14680:	mov	r2, #0
   14684:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14688:	ldr	r0, [fp, #-12]
   1468c:	bl	13964 <_start@@Base+0xf74>
   14690:	mov	r3, r0
   14694:	cmp	r3, #0
   14698:	bne	146a4 <_start@@Base+0x1cb4>
   1469c:	ldr	r3, [fp, #-8]
   146a0:	b	146c8 <_start@@Base+0x1cd8>
   146a4:	ldr	r3, [fp, #-8]
   146a8:	sub	r2, r3, #1
   146ac:	str	r2, [fp, #-8]
   146b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   146b4:	cmp	r2, r3
   146b8:	bcc	14670 <_start@@Base+0x1c80>
   146bc:	ldr	r3, [pc, #24]	; 146dc <_start@@Base+0x1cec>
   146c0:	add	r3, pc, r3
   146c4:	ldr	r3, [r3]
   146c8:	mov	r0, r3
   146cc:	sub	sp, fp, #4
   146d0:	ldr	fp, [sp]
   146d4:	add	sp, sp, #4
   146d8:	pop	{pc}		; (ldr pc, [sp], #4)
   146dc:			; <UNDEFINED> instruction: 0x000339b8
   146e0:	str	fp, [sp, #-8]!
   146e4:	str	lr, [sp, #4]
   146e8:	add	fp, sp, #4
   146ec:	sub	sp, sp, #24
   146f0:	str	r0, [fp, #-16]
   146f4:	str	r1, [fp, #-20]	; 0xffffffec
   146f8:	str	r2, [fp, #-24]	; 0xffffffe8
   146fc:	str	r3, [fp, #-28]	; 0xffffffe4
   14700:	ldr	r0, [fp, #-16]
   14704:	bl	13614 <_start@@Base+0xc24>
   14708:	mov	r2, r0
   1470c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14710:	cmp	r3, r2
   14714:	bcc	14728 <_start@@Base+0x1d38>
   14718:	ldr	r0, [fp, #-16]
   1471c:	bl	13614 <_start@@Base+0xc24>
   14720:	mov	r3, r0
   14724:	b	1472c <_start@@Base+0x1d3c>
   14728:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1472c:	str	r3, [fp, #-8]
   14730:	b	14768 <_start@@Base+0x1d78>
   14734:	ldr	r1, [fp, #-8]
   14738:	ldr	r0, [fp, #-16]
   1473c:	bl	13664 <_start@@Base+0xc74>
   14740:	str	r0, [fp, #-12]
   14744:	ldr	r2, [fp, #4]
   14748:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1474c:	ldr	r0, [fp, #-12]
   14750:	bl	138bc <_start@@Base+0xecc>
   14754:	mov	r3, r0
   14758:	cmp	r3, #0
   1475c:	bne	14768 <_start@@Base+0x1d78>
   14760:	ldr	r3, [fp, #-8]
   14764:	b	1478c <_start@@Base+0x1d9c>
   14768:	ldr	r3, [fp, #-8]
   1476c:	sub	r2, r3, #1
   14770:	str	r2, [fp, #-8]
   14774:	ldr	r2, [fp, #-20]	; 0xffffffec
   14778:	cmp	r2, r3
   1477c:	bcc	14734 <_start@@Base+0x1d44>
   14780:	ldr	r3, [pc, #24]	; 147a0 <_start@@Base+0x1db0>
   14784:	add	r3, pc, r3
   14788:	ldr	r3, [r3]
   1478c:	mov	r0, r3
   14790:	sub	sp, fp, #4
   14794:	ldr	fp, [sp]
   14798:	add	sp, sp, #4
   1479c:	pop	{pc}		; (ldr pc, [sp], #4)
   147a0:	strdeq	r3, [r3], -r4
   147a4:	str	fp, [sp, #-8]!
   147a8:	str	lr, [sp, #4]
   147ac:	add	fp, sp, #4
   147b0:	sub	sp, sp, #16
   147b4:	str	r0, [fp, #-16]
   147b8:	str	r1, [fp, #-20]	; 0xffffffec
   147bc:	mov	r3, #0
   147c0:	str	r3, [fp, #-12]
   147c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   147c8:	cmp	r3, #0
   147cc:	bne	147d8 <_start@@Base+0x1de8>
   147d0:	mov	r3, #1
   147d4:	b	1483c <_start@@Base+0x1e4c>
   147d8:	sub	r3, fp, #12
   147dc:	mov	r2, #4
   147e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   147e4:	mov	r0, r3
   147e8:	bl	129a4 <strncpy@plt>
   147ec:	ldr	r3, [fp, #-12]
   147f0:	mov	r0, r3
   147f4:	bl	133ec <_start@@Base+0x9fc>
   147f8:	mov	r3, r0
   147fc:	str	r3, [fp, #-12]
   14800:	ldr	r3, [fp, #-16]
   14804:	add	r3, r3, #4
   14808:	mov	r0, r3
   1480c:	bl	13410 <_start@@Base+0xa20>
   14810:	str	r0, [fp, #-8]
   14814:	ldr	r3, [fp, #-12]
   14818:	cmp	r3, #0
   1481c:	beq	14830 <_start@@Base+0x1e40>
   14820:	ldr	r3, [fp, #-12]
   14824:	ldr	r2, [fp, #-8]
   14828:	cmp	r2, r3
   1482c:	bne	14838 <_start@@Base+0x1e48>
   14830:	mov	r3, #1
   14834:	b	1483c <_start@@Base+0x1e4c>
   14838:	mov	r3, #0
   1483c:	mov	r0, r3
   14840:	sub	sp, fp, #4
   14844:	ldr	fp, [sp]
   14848:	add	sp, sp, #4
   1484c:	pop	{pc}		; (ldr pc, [sp], #4)
   14850:	str	fp, [sp, #-8]!
   14854:	str	lr, [sp, #4]
   14858:	add	fp, sp, #4
   1485c:	sub	sp, sp, #8
   14860:	str	r0, [fp, #-8]
   14864:	str	r1, [fp, #-12]
   14868:	ldr	r3, [fp, #-12]
   1486c:	cmp	r3, #0
   14870:	beq	14894 <_start@@Base+0x1ea4>
   14874:	ldr	r3, [fp, #-8]
   14878:	add	r3, r3, #4
   1487c:	mov	r0, r3
   14880:	bl	13410 <_start@@Base+0xa20>
   14884:	mov	r2, r0
   14888:	ldr	r3, [fp, #-12]
   1488c:	cmp	r3, r2
   14890:	bne	1489c <_start@@Base+0x1eac>
   14894:	mov	r3, #1
   14898:	b	148a0 <_start@@Base+0x1eb0>
   1489c:	mov	r3, #0
   148a0:	mov	r0, r3
   148a4:	sub	sp, fp, #4
   148a8:	ldr	fp, [sp]
   148ac:	add	sp, sp, #4
   148b0:	pop	{pc}		; (ldr pc, [sp], #4)
   148b4:	str	fp, [sp, #-8]!
   148b8:	str	lr, [sp, #4]
   148bc:	add	fp, sp, #4
   148c0:	sub	sp, sp, #8
   148c4:	str	r0, [fp, #-8]
   148c8:	ldr	r3, [fp, #-8]
   148cc:	add	r3, r3, #4
   148d0:	mov	r0, r3
   148d4:	bl	13410 <_start@@Base+0xa20>
   148d8:	mov	r3, r0
   148dc:	mov	r0, r3
   148e0:	sub	sp, fp, #4
   148e4:	ldr	fp, [sp]
   148e8:	add	sp, sp, #4
   148ec:	pop	{pc}		; (ldr pc, [sp], #4)
   148f0:	str	fp, [sp, #-8]!
   148f4:	str	lr, [sp, #4]
   148f8:	add	fp, sp, #4
   148fc:	sub	sp, sp, #8
   14900:	str	r0, [fp, #-8]
   14904:	str	r1, [fp, #-12]
   14908:	ldr	r3, [fp, #-12]
   1490c:	cmp	r3, #0
   14910:	beq	14928 <_start@@Base+0x1f38>
   14914:	ldr	r0, [fp, #-8]
   14918:	bl	13224 <_start@@Base+0x834>
   1491c:	mov	r2, r0
   14920:	ldr	r3, [fp, #-12]
   14924:	str	r2, [r3]
   14928:	ldr	r3, [fp, #-8]
   1492c:	add	r3, r3, #4
   14930:	mov	r0, r3
   14934:	sub	sp, fp, #4
   14938:	ldr	fp, [sp]
   1493c:	add	sp, sp, #4
   14940:	pop	{pc}		; (ldr pc, [sp], #4)
   14944:	push	{fp}		; (str fp, [sp, #-4]!)
   14948:	add	fp, sp, #0
   1494c:	sub	sp, sp, #12
   14950:	mov	r3, r0
   14954:	strb	r3, [fp, #-5]
   14958:	ldrsb	r3, [fp, #-5]
   1495c:	mov	r0, r3
   14960:	add	sp, fp, #0
   14964:	pop	{fp}		; (ldr fp, [sp], #4)
   14968:	bx	lr
   1496c:	push	{fp}		; (str fp, [sp, #-4]!)
   14970:	add	fp, sp, #0
   14974:	sub	sp, sp, #12
   14978:	mov	r3, r0
   1497c:	strb	r3, [fp, #-5]
   14980:	ldrsb	r3, [fp, #-5]
   14984:	mov	r0, r3
   14988:	add	sp, fp, #0
   1498c:	pop	{fp}		; (ldr fp, [sp], #4)
   14990:	bx	lr
   14994:	str	fp, [sp, #-8]!
   14998:	str	lr, [sp, #4]
   1499c:	add	fp, sp, #4
   149a0:	sub	sp, sp, #8
   149a4:	str	r0, [fp, #-8]
   149a8:	ldr	r3, [fp, #-8]
   149ac:	ldrsb	r3, [r3]
   149b0:	mov	r0, r3
   149b4:	bl	14944 <_start@@Base+0x1f54>
   149b8:	mov	r3, r0
   149bc:	mov	r0, r3
   149c0:	sub	sp, fp, #4
   149c4:	ldr	fp, [sp]
   149c8:	add	sp, sp, #4
   149cc:	pop	{pc}		; (ldr pc, [sp], #4)
   149d0:	push	{fp}		; (str fp, [sp, #-4]!)
   149d4:	add	fp, sp, #0
   149d8:	sub	sp, sp, #12
   149dc:	mov	r3, r0
   149e0:	strb	r3, [fp, #-5]
   149e4:	ldrsb	r3, [fp, #-5]
   149e8:	cmp	r3, #2
   149ec:	beq	14a0c <_start@@Base+0x201c>
   149f0:	cmp	r3, #8
   149f4:	beq	14a18 <_start@@Base+0x2028>
   149f8:	cmp	r3, #1
   149fc:	bne	14a24 <_start@@Base+0x2034>
   14a00:	ldr	r3, [pc, #52]	; 14a3c <_start@@Base+0x204c>
   14a04:	add	r3, pc, r3
   14a08:	b	14a2c <_start@@Base+0x203c>
   14a0c:	ldr	r3, [pc, #44]	; 14a40 <_start@@Base+0x2050>
   14a10:	add	r3, pc, r3
   14a14:	b	14a2c <_start@@Base+0x203c>
   14a18:	ldr	r3, [pc, #36]	; 14a44 <_start@@Base+0x2054>
   14a1c:	add	r3, pc, r3
   14a20:	b	14a2c <_start@@Base+0x203c>
   14a24:	ldr	r3, [pc, #28]	; 14a48 <_start@@Base+0x2058>
   14a28:	add	r3, pc, r3
   14a2c:	mov	r0, r3
   14a30:	add	sp, fp, #0
   14a34:	pop	{fp}		; (ldr fp, [sp], #4)
   14a38:	bx	lr
   14a3c:	ldrdeq	sp, [r1], -ip
   14a40:	ldrdeq	sp, [r1], -r4
   14a44:	ldrdeq	sp, [r1], -r0
   14a48:	andeq	sp, r1, ip, asr #23
   14a4c:	push	{fp}		; (str fp, [sp, #-4]!)
   14a50:	add	fp, sp, #0
   14a54:	sub	sp, sp, #12
   14a58:	mov	r3, r0
   14a5c:	strb	r3, [fp, #-5]
   14a60:	ldrsb	r3, [fp, #-5]
   14a64:	cmp	r3, #2
   14a68:	beq	14a84 <_start@@Base+0x2094>
   14a6c:	cmp	r3, #8
   14a70:	beq	14a8c <_start@@Base+0x209c>
   14a74:	cmp	r3, #1
   14a78:	bne	14a94 <_start@@Base+0x20a4>
   14a7c:	mov	r3, #1
   14a80:	b	14a98 <_start@@Base+0x20a8>
   14a84:	mov	r3, #1
   14a88:	b	14a98 <_start@@Base+0x20a8>
   14a8c:	mov	r3, #1
   14a90:	b	14a98 <_start@@Base+0x20a8>
   14a94:	mov	r3, #0
   14a98:	mov	r0, r3
   14a9c:	add	sp, fp, #0
   14aa0:	pop	{fp}		; (ldr fp, [sp], #4)
   14aa4:	bx	lr
   14aa8:	push	{fp}		; (str fp, [sp, #-4]!)
   14aac:	add	fp, sp, #0
   14ab0:	sub	sp, sp, #12
   14ab4:	str	r0, [fp, #-8]
   14ab8:	str	r1, [fp, #-12]
   14abc:	ldr	r3, [fp, #-12]
   14ac0:	lsl	r3, r3, #2
   14ac4:	ldr	r2, [fp, #-8]
   14ac8:	add	r3, r2, r3
   14acc:	mov	r0, r3
   14ad0:	add	sp, fp, #0
   14ad4:	pop	{fp}		; (ldr fp, [sp], #4)
   14ad8:	bx	lr
   14adc:	str	fp, [sp, #-8]!
   14ae0:	str	lr, [sp, #4]
   14ae4:	add	fp, sp, #4
   14ae8:	sub	sp, sp, #8
   14aec:	str	r0, [fp, #-8]
   14af0:	str	r1, [fp, #-12]
   14af4:	ldr	r0, [fp, #-8]
   14af8:	bl	13574 <_start@@Base+0xb84>
   14afc:	mov	r2, r0
   14b00:	ldr	r3, [fp, #-12]
   14b04:	cmp	r3, r2
   14b08:	bcc	14b2c <_start@@Base+0x213c>
   14b0c:	ldr	r3, [pc, #60]	; 14b50 <_start@@Base+0x2160>
   14b10:	add	r3, pc, r3
   14b14:	mov	r2, #380	; 0x17c
   14b18:	ldr	r1, [pc, #52]	; 14b54 <_start@@Base+0x2164>
   14b1c:	add	r1, pc, r1
   14b20:	ldr	r0, [pc, #48]	; 14b58 <_start@@Base+0x2168>
   14b24:	add	r0, pc, r0
   14b28:	bl	129e0 <__assert_fail@plt>
   14b2c:	ldr	r3, [fp, #-12]
   14b30:	lsl	r3, r3, #2
   14b34:	ldr	r2, [fp, #-8]
   14b38:	add	r3, r2, r3
   14b3c:	mov	r0, r3
   14b40:	sub	sp, fp, #4
   14b44:	ldr	fp, [sp]
   14b48:	add	sp, sp, #4
   14b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b50:	andeq	r1, r2, r4, ror #1
   14b54:	ldrdeq	sp, [r1], -ip
   14b58:	andeq	sp, r1, r4, lsl #21
   14b5c:	push	{fp}		; (str fp, [sp, #-4]!)
   14b60:	add	fp, sp, #0
   14b64:	mov	r3, #4
   14b68:	mov	r0, r3
   14b6c:	add	sp, fp, #0
   14b70:	pop	{fp}		; (ldr fp, [sp], #4)
   14b74:	bx	lr
   14b78:	str	fp, [sp, #-8]!
   14b7c:	str	lr, [sp, #4]
   14b80:	add	fp, sp, #4
   14b84:	sub	sp, sp, #8
   14b88:	str	r0, [fp, #-8]
   14b8c:	ldr	r3, [fp, #-8]
   14b90:	cmp	r3, #0
   14b94:	beq	14bb0 <_start@@Base+0x21c0>
   14b98:	ldr	r3, [fp, #-8]
   14b9c:	sub	r3, r3, #4
   14ba0:	mov	r0, r3
   14ba4:	bl	13224 <_start@@Base+0x834>
   14ba8:	mov	r3, r0
   14bac:	b	14bb4 <_start@@Base+0x21c4>
   14bb0:	mov	r3, #0
   14bb4:	mov	r0, r3
   14bb8:	sub	sp, fp, #4
   14bbc:	ldr	fp, [sp]
   14bc0:	add	sp, sp, #4
   14bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   14bc8:	str	fp, [sp, #-8]!
   14bcc:	str	lr, [sp, #4]
   14bd0:	add	fp, sp, #4
   14bd4:	sub	sp, sp, #8
   14bd8:	str	r0, [fp, #-8]
   14bdc:	ldr	r3, [fp, #-8]
   14be0:	cmp	r3, #0
   14be4:	beq	14bfc <_start@@Base+0x220c>
   14be8:	ldr	r3, [fp, #-8]
   14bec:	mov	r0, r3
   14bf0:	bl	12df0 <_start@@Base+0x400>
   14bf4:	mov	r3, r0
   14bf8:	b	14c00 <_start@@Base+0x2210>
   14bfc:	mov	r3, #0
   14c00:	mov	r0, r3
   14c04:	sub	sp, fp, #4
   14c08:	ldr	fp, [sp]
   14c0c:	add	sp, sp, #4
   14c10:	pop	{pc}		; (ldr pc, [sp], #4)
   14c14:	str	fp, [sp, #-8]!
   14c18:	str	lr, [sp, #4]
   14c1c:	add	fp, sp, #4
   14c20:	sub	sp, sp, #8
   14c24:	str	r0, [fp, #-8]
   14c28:	ldr	r3, [fp, #-8]
   14c2c:	cmp	r3, #0
   14c30:	beq	14c4c <_start@@Base+0x225c>
   14c34:	ldr	r3, [fp, #-8]
   14c38:	add	r3, r3, #2
   14c3c:	mov	r0, r3
   14c40:	bl	12d64 <_start@@Base+0x374>
   14c44:	mov	r3, r0
   14c48:	b	14c50 <_start@@Base+0x2260>
   14c4c:	mov	r3, #0
   14c50:	mov	r0, r3
   14c54:	sub	sp, fp, #4
   14c58:	ldr	fp, [sp]
   14c5c:	add	sp, sp, #4
   14c60:	pop	{pc}		; (ldr pc, [sp], #4)
   14c64:	push	{fp}		; (str fp, [sp, #-4]!)
   14c68:	add	fp, sp, #0
   14c6c:	mov	r3, #0
   14c70:	mov	r0, r3
   14c74:	add	sp, fp, #0
   14c78:	pop	{fp}		; (ldr fp, [sp], #4)
   14c7c:	bx	lr
   14c80:	push	{fp}		; (str fp, [sp, #-4]!)
   14c84:	add	fp, sp, #0
   14c88:	mov	r3, #32
   14c8c:	mov	r0, r3
   14c90:	add	sp, fp, #0
   14c94:	pop	{fp}		; (ldr fp, [sp], #4)
   14c98:	bx	lr
   14c9c:	str	fp, [sp, #-8]!
   14ca0:	str	lr, [sp, #4]
   14ca4:	add	fp, sp, #4
   14ca8:	sub	sp, sp, #8
   14cac:	str	r0, [fp, #-8]
   14cb0:	str	r1, [fp, #-12]
   14cb4:	ldr	r3, [fp, #-8]
   14cb8:	cmp	r3, #0
   14cbc:	beq	14cf0 <_start@@Base+0x2300>
   14cc0:	ldr	r1, [fp, #-12]
   14cc4:	ldr	r0, [fp, #-8]
   14cc8:	bl	147a4 <_start@@Base+0x1db4>
   14ccc:	mov	r3, r0
   14cd0:	cmp	r3, #0
   14cd4:	beq	14cf0 <_start@@Base+0x2300>
   14cd8:	ldr	r0, [fp, #-8]
   14cdc:	bl	13224 <_start@@Base+0x834>
   14ce0:	mov	r2, r0
   14ce4:	ldr	r3, [fp, #-8]
   14ce8:	add	r3, r3, r2
   14cec:	b	14cf4 <_start@@Base+0x2304>
   14cf0:	mov	r3, #0
   14cf4:	mov	r0, r3
   14cf8:	sub	sp, fp, #4
   14cfc:	ldr	fp, [sp]
   14d00:	add	sp, sp, #4
   14d04:	pop	{pc}		; (ldr pc, [sp], #4)
   14d08:	str	fp, [sp, #-8]!
   14d0c:	str	lr, [sp, #4]
   14d10:	add	fp, sp, #4
   14d14:	sub	sp, sp, #8
   14d18:	str	r0, [fp, #-8]
   14d1c:	str	r1, [fp, #-12]
   14d20:	ldr	r3, [fp, #-8]
   14d24:	cmp	r3, #0
   14d28:	beq	14d5c <_start@@Base+0x236c>
   14d2c:	ldr	r1, [fp, #-12]
   14d30:	ldr	r0, [fp, #-8]
   14d34:	bl	14850 <_start@@Base+0x1e60>
   14d38:	mov	r3, r0
   14d3c:	cmp	r3, #0
   14d40:	beq	14d5c <_start@@Base+0x236c>
   14d44:	ldr	r0, [fp, #-8]
   14d48:	bl	13224 <_start@@Base+0x834>
   14d4c:	mov	r2, r0
   14d50:	ldr	r3, [fp, #-8]
   14d54:	add	r3, r3, r2
   14d58:	b	14d60 <_start@@Base+0x2370>
   14d5c:	mov	r3, #0
   14d60:	mov	r0, r3
   14d64:	sub	sp, fp, #4
   14d68:	ldr	fp, [sp]
   14d6c:	add	sp, sp, #4
   14d70:	pop	{pc}		; (ldr pc, [sp], #4)
   14d74:	str	fp, [sp, #-8]!
   14d78:	str	lr, [sp, #4]
   14d7c:	add	fp, sp, #4
   14d80:	sub	sp, sp, #16
   14d84:	str	r0, [fp, #-16]
   14d88:	ldr	r3, [pc, #88]	; 14de8 <_start@@Base+0x23f8>
   14d8c:	add	r3, pc, r3
   14d90:	str	r3, [fp, #-8]
   14d94:	ldr	r3, [fp, #-16]
   14d98:	cmp	r3, #0
   14d9c:	beq	14dd0 <_start@@Base+0x23e0>
   14da0:	ldr	r1, [fp, #-8]
   14da4:	ldr	r0, [fp, #-16]
   14da8:	bl	147a4 <_start@@Base+0x1db4>
   14dac:	mov	r3, r0
   14db0:	cmp	r3, #0
   14db4:	beq	14dd0 <_start@@Base+0x23e0>
   14db8:	ldr	r0, [fp, #-16]
   14dbc:	bl	13224 <_start@@Base+0x834>
   14dc0:	mov	r2, r0
   14dc4:	ldr	r3, [fp, #-16]
   14dc8:	add	r3, r3, r2
   14dcc:	b	14dd4 <_start@@Base+0x23e4>
   14dd0:	mov	r3, #0
   14dd4:	mov	r0, r3
   14dd8:	sub	sp, fp, #4
   14ddc:	ldr	fp, [sp]
   14de0:	add	sp, sp, #4
   14de4:	pop	{pc}		; (ldr pc, [sp], #4)
   14de8:	andeq	sp, r1, r8, ror #17
   14dec:	str	fp, [sp, #-8]!
   14df0:	str	lr, [sp, #4]
   14df4:	add	fp, sp, #4
   14df8:	sub	sp, sp, #8
   14dfc:	str	r0, [fp, #-8]
   14e00:	ldr	r3, [fp, #-8]
   14e04:	cmp	r3, #0
   14e08:	beq	14e40 <_start@@Base+0x2450>
   14e0c:	movw	r1, #16082	; 0x3ed2
   14e10:	movt	r1, #43253	; 0xa8f5
   14e14:	ldr	r0, [fp, #-8]
   14e18:	bl	14850 <_start@@Base+0x1e60>
   14e1c:	mov	r3, r0
   14e20:	cmp	r3, #0
   14e24:	beq	14e40 <_start@@Base+0x2450>
   14e28:	ldr	r0, [fp, #-8]
   14e2c:	bl	13224 <_start@@Base+0x834>
   14e30:	mov	r2, r0
   14e34:	ldr	r3, [fp, #-8]
   14e38:	add	r3, r3, r2
   14e3c:	b	14e44 <_start@@Base+0x2454>
   14e40:	mov	r3, #0
   14e44:	mov	r0, r3
   14e48:	sub	sp, fp, #4
   14e4c:	ldr	fp, [sp]
   14e50:	add	sp, sp, #4
   14e54:	pop	{pc}		; (ldr pc, [sp], #4)
   14e58:	str	fp, [sp, #-8]!
   14e5c:	str	lr, [sp, #4]
   14e60:	add	fp, sp, #4
   14e64:	sub	sp, sp, #8
   14e68:	str	r0, [fp, #-8]
   14e6c:	ldr	r3, [fp, #-8]
   14e70:	cmp	r3, #0
   14e74:	beq	14e90 <_start@@Base+0x24a0>
   14e78:	ldr	r3, [fp, #-8]
   14e7c:	add	r3, r3, #8
   14e80:	mov	r0, r3
   14e84:	bl	12fb8 <_start@@Base+0x5c8>
   14e88:	vmov.f32	s15, s0
   14e8c:	b	14e94 <_start@@Base+0x24a4>
   14e90:	vldr	s15, [pc, #16]	; 14ea8 <_start@@Base+0x24b8>
   14e94:	vmov.f32	s0, s15
   14e98:	sub	sp, fp, #4
   14e9c:	ldr	fp, [sp]
   14ea0:	add	sp, sp, #4
   14ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ea8:	andeq	r0, r0, r0
   14eac:	str	fp, [sp, #-8]!
   14eb0:	str	lr, [sp, #4]
   14eb4:	add	fp, sp, #4
   14eb8:	sub	sp, sp, #8
   14ebc:	str	r0, [fp, #-8]
   14ec0:	ldr	r3, [fp, #-8]
   14ec4:	cmp	r3, #0
   14ec8:	beq	14ee0 <_start@@Base+0x24f0>
   14ecc:	ldr	r3, [fp, #-8]
   14ed0:	mov	r0, r3
   14ed4:	bl	12bbc <_start@@Base+0x1cc>
   14ed8:	mov	r3, r0
   14edc:	b	14ee4 <_start@@Base+0x24f4>
   14ee0:	mov	r3, #0
   14ee4:	mov	r0, r3
   14ee8:	sub	sp, fp, #4
   14eec:	ldr	fp, [sp]
   14ef0:	add	sp, sp, #4
   14ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef8:	str	fp, [sp, #-8]!
   14efc:	str	lr, [sp, #4]
   14f00:	add	fp, sp, #4
   14f04:	sub	sp, sp, #8
   14f08:	str	r0, [fp, #-8]
   14f0c:	ldr	r0, [fp, #-8]
   14f10:	bl	13574 <_start@@Base+0xb84>
   14f14:	mov	r3, r0
   14f18:	mov	r0, r3
   14f1c:	sub	sp, fp, #4
   14f20:	ldr	fp, [sp]
   14f24:	add	sp, sp, #4
   14f28:	pop	{pc}		; (ldr pc, [sp], #4)
   14f2c:	str	fp, [sp, #-8]!
   14f30:	str	lr, [sp, #4]
   14f34:	add	fp, sp, #4
   14f38:	sub	sp, sp, #8
   14f3c:	sub	r3, fp, #12
   14f40:	stm	r3, {r0, r1}
   14f44:	ldr	r3, [fp, #-12]
   14f48:	mov	r0, r3
   14f4c:	bl	13574 <_start@@Base+0xb84>
   14f50:	mov	r3, r0
   14f54:	mov	r0, r3
   14f58:	sub	sp, fp, #4
   14f5c:	ldr	fp, [sp]
   14f60:	add	sp, sp, #4
   14f64:	pop	{pc}		; (ldr pc, [sp], #4)
   14f68:	str	fp, [sp, #-8]!
   14f6c:	str	lr, [sp, #4]
   14f70:	add	fp, sp, #4
   14f74:	sub	sp, sp, #32
   14f78:	str	r0, [fp, #-24]	; 0xffffffe8
   14f7c:	sub	r0, fp, #32
   14f80:	stm	r0, {r1, r2}
   14f84:	str	r3, [fp, #-36]	; 0xffffffdc
   14f88:	mov	r3, #0
   14f8c:	strb	r3, [fp, #-16]
   14f90:	mov	r3, #0
   14f94:	str	r3, [fp, #-12]
   14f98:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14f9c:	mov	r0, r3
   14fa0:	bl	13574 <_start@@Base+0xb84>
   14fa4:	str	r0, [fp, #-8]
   14fa8:	ldr	r2, [fp, #-8]
   14fac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14fb0:	cmp	r2, r3
   14fb4:	bhi	14fd8 <_start@@Base+0x25e8>
   14fb8:	ldr	r3, [pc, #144]	; 15050 <_start@@Base+0x2660>
   14fbc:	add	r3, pc, r3
   14fc0:	mov	r2, #520	; 0x208
   14fc4:	ldr	r1, [pc, #136]	; 15054 <_start@@Base+0x2664>
   14fc8:	add	r1, pc, r1
   14fcc:	ldr	r0, [pc, #132]	; 15058 <_start@@Base+0x2668>
   14fd0:	add	r0, pc, r0
   14fd4:	bl	129e0 <__assert_fail@plt>
   14fd8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14fdc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14fe0:	add	r3, r2, r3
   14fe4:	ldrb	r3, [r3]
   14fe8:	strb	r3, [fp, #-16]
   14fec:	ldrb	r3, [fp, #-16]
   14ff0:	cmp	r3, #0
   14ff4:	bne	15010 <_start@@Base+0x2620>
   14ff8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ffc:	mov	r1, r3
   15000:	sub	r3, fp, #16
   15004:	ldrd	r2, [r3]
   15008:	strd	r2, [r1]
   1500c:	b	1503c <_start@@Base+0x264c>
   15010:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15014:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15018:	mov	r0, r3
   1501c:	bl	1374c <_start@@Base+0xd5c>
   15020:	mov	r3, r0
   15024:	str	r3, [fp, #-12]
   15028:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1502c:	mov	r1, r3
   15030:	sub	r3, fp, #16
   15034:	ldrd	r2, [r3]
   15038:	strd	r2, [r1]
   1503c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15040:	sub	sp, fp, #4
   15044:	ldr	fp, [sp]
   15048:	add	sp, sp, #4
   1504c:	pop	{pc}		; (ldr pc, [sp], #4)
   15050:	andeq	r1, r2, r0, lsl #1
   15054:	andeq	sp, r1, r0, lsr r6
   15058:	andeq	sp, r1, ip, lsr #13
   1505c:	push	{fp}		; (str fp, [sp, #-4]!)
   15060:	add	fp, sp, #0
   15064:	sub	sp, sp, #12
   15068:	mov	r3, r0
   1506c:	strb	r3, [fp, #-5]
   15070:	ldrb	r3, [fp, #-5]
   15074:	cmp	r3, #4
   15078:	addls	pc, pc, r3, lsl #2
   1507c:	b	150bc <_start@@Base+0x26cc>
   15080:	b	15094 <_start@@Base+0x26a4>
   15084:	b	1509c <_start@@Base+0x26ac>
   15088:	b	150a4 <_start@@Base+0x26b4>
   1508c:	b	150ac <_start@@Base+0x26bc>
   15090:	b	150b4 <_start@@Base+0x26c4>
   15094:	mov	r3, #1
   15098:	b	150c0 <_start@@Base+0x26d0>
   1509c:	mov	r3, #1
   150a0:	b	150c0 <_start@@Base+0x26d0>
   150a4:	mov	r3, #1
   150a8:	b	150c0 <_start@@Base+0x26d0>
   150ac:	mov	r3, #1
   150b0:	b	150c0 <_start@@Base+0x26d0>
   150b4:	mov	r3, #1
   150b8:	b	150c0 <_start@@Base+0x26d0>
   150bc:	mov	r3, #0
   150c0:	mov	r0, r3
   150c4:	add	sp, fp, #0
   150c8:	pop	{fp}		; (ldr fp, [sp], #4)
   150cc:	bx	lr
   150d0:	str	fp, [sp, #-8]!
   150d4:	str	lr, [sp, #4]
   150d8:	add	fp, sp, #4
   150dc:	sub	sp, sp, #8
   150e0:	str	r0, [fp, #-8]
   150e4:	str	r1, [fp, #-12]
   150e8:	ldr	r3, [fp, #-8]
   150ec:	cmp	r3, #0
   150f0:	beq	15124 <_start@@Base+0x2734>
   150f4:	ldr	r1, [fp, #-12]
   150f8:	ldr	r0, [fp, #-8]
   150fc:	bl	147a4 <_start@@Base+0x1db4>
   15100:	mov	r3, r0
   15104:	cmp	r3, #0
   15108:	beq	15124 <_start@@Base+0x2734>
   1510c:	ldr	r0, [fp, #-8]
   15110:	bl	13224 <_start@@Base+0x834>
   15114:	mov	r2, r0
   15118:	ldr	r3, [fp, #-8]
   1511c:	add	r3, r3, r2
   15120:	b	15128 <_start@@Base+0x2738>
   15124:	mov	r3, #0
   15128:	mov	r0, r3
   1512c:	sub	sp, fp, #4
   15130:	ldr	fp, [sp]
   15134:	add	sp, sp, #4
   15138:	pop	{pc}		; (ldr pc, [sp], #4)
   1513c:	str	fp, [sp, #-8]!
   15140:	str	lr, [sp, #4]
   15144:	add	fp, sp, #4
   15148:	sub	sp, sp, #8
   1514c:	str	r0, [fp, #-8]
   15150:	str	r1, [fp, #-12]
   15154:	ldr	r3, [fp, #-8]
   15158:	cmp	r3, #0
   1515c:	beq	15190 <_start@@Base+0x27a0>
   15160:	ldr	r1, [fp, #-12]
   15164:	ldr	r0, [fp, #-8]
   15168:	bl	14850 <_start@@Base+0x1e60>
   1516c:	mov	r3, r0
   15170:	cmp	r3, #0
   15174:	beq	15190 <_start@@Base+0x27a0>
   15178:	ldr	r0, [fp, #-8]
   1517c:	bl	13224 <_start@@Base+0x834>
   15180:	mov	r2, r0
   15184:	ldr	r3, [fp, #-8]
   15188:	add	r3, r3, r2
   1518c:	b	15194 <_start@@Base+0x27a4>
   15190:	mov	r3, #0
   15194:	mov	r0, r3
   15198:	sub	sp, fp, #4
   1519c:	ldr	fp, [sp]
   151a0:	add	sp, sp, #4
   151a4:	pop	{pc}		; (ldr pc, [sp], #4)
   151a8:	str	fp, [sp, #-8]!
   151ac:	str	lr, [sp, #4]
   151b0:	add	fp, sp, #4
   151b4:	sub	sp, sp, #16
   151b8:	str	r0, [fp, #-16]
   151bc:	ldr	r3, [pc, #88]	; 1521c <_start@@Base+0x282c>
   151c0:	add	r3, pc, r3
   151c4:	str	r3, [fp, #-8]
   151c8:	ldr	r3, [fp, #-16]
   151cc:	cmp	r3, #0
   151d0:	beq	15204 <_start@@Base+0x2814>
   151d4:	ldr	r1, [fp, #-8]
   151d8:	ldr	r0, [fp, #-16]
   151dc:	bl	147a4 <_start@@Base+0x1db4>
   151e0:	mov	r3, r0
   151e4:	cmp	r3, #0
   151e8:	beq	15204 <_start@@Base+0x2814>
   151ec:	ldr	r0, [fp, #-16]
   151f0:	bl	13224 <_start@@Base+0x834>
   151f4:	mov	r2, r0
   151f8:	ldr	r3, [fp, #-16]
   151fc:	add	r3, r3, r2
   15200:	b	15208 <_start@@Base+0x2818>
   15204:	mov	r3, #0
   15208:	mov	r0, r3
   1520c:	sub	sp, fp, #4
   15210:	ldr	fp, [sp]
   15214:	add	sp, sp, #4
   15218:	pop	{pc}		; (ldr pc, [sp], #4)
   1521c:			; <UNDEFINED> instruction: 0x0001d4b4
   15220:	str	fp, [sp, #-8]!
   15224:	str	lr, [sp, #4]
   15228:	add	fp, sp, #4
   1522c:	sub	sp, sp, #8
   15230:	str	r0, [fp, #-8]
   15234:	ldr	r3, [fp, #-8]
   15238:	cmp	r3, #0
   1523c:	beq	15274 <_start@@Base+0x2884>
   15240:	movw	r1, #14262	; 0x37b6
   15244:	movt	r1, #45277	; 0xb0dd
   15248:	ldr	r0, [fp, #-8]
   1524c:	bl	14850 <_start@@Base+0x1e60>
   15250:	mov	r3, r0
   15254:	cmp	r3, #0
   15258:	beq	15274 <_start@@Base+0x2884>
   1525c:	ldr	r0, [fp, #-8]
   15260:	bl	13224 <_start@@Base+0x834>
   15264:	mov	r2, r0
   15268:	ldr	r3, [fp, #-8]
   1526c:	add	r3, r3, r2
   15270:	b	15278 <_start@@Base+0x2888>
   15274:	mov	r3, #0
   15278:	mov	r0, r3
   1527c:	sub	sp, fp, #4
   15280:	ldr	fp, [sp]
   15284:	add	sp, sp, #4
   15288:	pop	{pc}		; (ldr pc, [sp], #4)
   1528c:	str	fp, [sp, #-8]!
   15290:	str	lr, [sp, #4]
   15294:	add	fp, sp, #4
   15298:	sub	sp, sp, #16
   1529c:	str	r0, [fp, #-16]
   152a0:	mov	r3, #0
   152a4:	strh	r3, [fp, #-6]
   152a8:	ldr	r3, [fp, #-16]
   152ac:	cmp	r3, #0
   152b0:	bne	152d4 <_start@@Base+0x28e4>
   152b4:	ldr	r3, [pc, #184]	; 15374 <_start@@Base+0x2984>
   152b8:	add	r3, pc, r3
   152bc:	movw	r2, #569	; 0x239
   152c0:	ldr	r1, [pc, #176]	; 15378 <_start@@Base+0x2988>
   152c4:	add	r1, pc, r1
   152c8:	ldr	r0, [pc, #172]	; 1537c <_start@@Base+0x298c>
   152cc:	add	r0, pc, r0
   152d0:	bl	129e0 <__assert_fail@plt>
   152d4:	mov	r3, #0
   152d8:	strh	r3, [fp, #-8]
   152dc:	ldr	r0, [fp, #-16]
   152e0:	bl	132c4 <_start@@Base+0x8d4>
   152e4:	mov	r3, r0
   152e8:	rsb	r3, r3, #0
   152ec:	ldr	r2, [fp, #-16]
   152f0:	add	r3, r2, r3
   152f4:	str	r3, [fp, #-12]
   152f8:	ldr	r0, [fp, #-12]
   152fc:	bl	13328 <_start@@Base+0x938>
   15300:	mov	r3, r0
   15304:	mov	r2, r3
   15308:	ldrh	r3, [fp, #-8]
   1530c:	add	r3, r3, #3
   15310:	lsl	r3, r3, #1
   15314:	cmp	r2, r3
   15318:	bcc	15340 <_start@@Base+0x2950>
   1531c:	ldrh	r3, [fp, #-8]
   15320:	add	r3, r3, #2
   15324:	lsl	r3, r3, #1
   15328:	ldr	r2, [fp, #-12]
   1532c:	add	r3, r2, r3
   15330:	mov	r0, r3
   15334:	bl	13328 <_start@@Base+0x938>
   15338:	mov	r3, r0
   1533c:	strh	r3, [fp, #-6]
   15340:	ldrh	r3, [fp, #-6]
   15344:	cmp	r3, #0
   15348:	beq	1535c <_start@@Base+0x296c>
   1534c:	ldrh	r3, [fp, #-6]
   15350:	ldr	r2, [fp, #-16]
   15354:	add	r3, r2, r3
   15358:	b	15360 <_start@@Base+0x2970>
   1535c:	mov	r3, #0
   15360:	mov	r0, r3
   15364:	sub	sp, fp, #4
   15368:	ldr	fp, [sp]
   1536c:	add	sp, sp, #4
   15370:	pop	{pc}		; (ldr pc, [sp], #4)
   15374:	andeq	r0, r2, ip, lsl r8
   15378:	andeq	sp, r1, r4, lsr r3
   1537c:	ldrdeq	sp, [r1], -r0
   15380:	str	fp, [sp, #-8]!
   15384:	str	lr, [sp, #4]
   15388:	add	fp, sp, #4
   1538c:	sub	sp, sp, #16
   15390:	str	r0, [fp, #-16]
   15394:	mov	r3, #0
   15398:	strh	r3, [fp, #-6]
   1539c:	ldr	r3, [fp, #-16]
   153a0:	cmp	r3, #0
   153a4:	bne	153c8 <_start@@Base+0x29d8>
   153a8:	ldr	r3, [pc, #196]	; 15474 <_start@@Base+0x2a84>
   153ac:	add	r3, pc, r3
   153b0:	movw	r2, #579	; 0x243
   153b4:	ldr	r1, [pc, #188]	; 15478 <_start@@Base+0x2a88>
   153b8:	add	r1, pc, r1
   153bc:	ldr	r0, [pc, #184]	; 1547c <_start@@Base+0x2a8c>
   153c0:	add	r0, pc, r0
   153c4:	bl	129e0 <__assert_fail@plt>
   153c8:	mov	r3, #0
   153cc:	strh	r3, [fp, #-8]
   153d0:	ldr	r0, [fp, #-16]
   153d4:	bl	132c4 <_start@@Base+0x8d4>
   153d8:	mov	r3, r0
   153dc:	rsb	r3, r3, #0
   153e0:	ldr	r2, [fp, #-16]
   153e4:	add	r3, r2, r3
   153e8:	str	r3, [fp, #-12]
   153ec:	ldr	r0, [fp, #-12]
   153f0:	bl	13328 <_start@@Base+0x938>
   153f4:	mov	r3, r0
   153f8:	mov	r2, r3
   153fc:	ldrh	r3, [fp, #-8]
   15400:	add	r3, r3, #3
   15404:	lsl	r3, r3, #1
   15408:	cmp	r2, r3
   1540c:	bcc	15434 <_start@@Base+0x2a44>
   15410:	ldrh	r3, [fp, #-8]
   15414:	add	r3, r3, #2
   15418:	lsl	r3, r3, #1
   1541c:	ldr	r2, [fp, #-12]
   15420:	add	r3, r2, r3
   15424:	mov	r0, r3
   15428:	bl	13328 <_start@@Base+0x938>
   1542c:	mov	r3, r0
   15430:	strh	r3, [fp, #-6]
   15434:	ldrh	r3, [fp, #-6]
   15438:	cmp	r3, #0
   1543c:	beq	1545c <_start@@Base+0x2a6c>
   15440:	ldrh	r3, [fp, #-6]
   15444:	ldr	r2, [fp, #-16]
   15448:	add	r3, r2, r3
   1544c:	mov	r0, r3
   15450:	bl	14994 <_start@@Base+0x1fa4>
   15454:	mov	r3, r0
   15458:	b	15460 <_start@@Base+0x2a70>
   1545c:	mov	r3, #2
   15460:	mov	r0, r3
   15464:	sub	sp, fp, #4
   15468:	ldr	fp, [sp]
   1546c:	add	sp, sp, #4
   15470:	pop	{pc}		; (ldr pc, [sp], #4)
   15474:	andeq	r0, r2, ip, lsr ip
   15478:	andeq	sp, r1, r0, asr #4
   1547c:	ldrdeq	sp, [r1], -ip
   15480:	str	fp, [sp, #-8]!
   15484:	str	lr, [sp, #4]
   15488:	add	fp, sp, #4
   1548c:	sub	sp, sp, #16
   15490:	str	r0, [fp, #-16]
   15494:	mov	r3, #0
   15498:	strh	r3, [fp, #-6]
   1549c:	ldr	r3, [fp, #-16]
   154a0:	cmp	r3, #0
   154a4:	bne	154c8 <_start@@Base+0x2ad8>
   154a8:	ldr	r3, [pc, #172]	; 1555c <_start@@Base+0x2b6c>
   154ac:	add	r3, pc, r3
   154b0:	movw	r2, #607	; 0x25f
   154b4:	ldr	r1, [pc, #164]	; 15560 <_start@@Base+0x2b70>
   154b8:	add	r1, pc, r1
   154bc:	ldr	r0, [pc, #160]	; 15564 <_start@@Base+0x2b74>
   154c0:	add	r0, pc, r0
   154c4:	bl	129e0 <__assert_fail@plt>
   154c8:	mov	r3, #0
   154cc:	strh	r3, [fp, #-8]
   154d0:	ldr	r0, [fp, #-16]
   154d4:	bl	132c4 <_start@@Base+0x8d4>
   154d8:	mov	r3, r0
   154dc:	rsb	r3, r3, #0
   154e0:	ldr	r2, [fp, #-16]
   154e4:	add	r3, r2, r3
   154e8:	str	r3, [fp, #-12]
   154ec:	ldr	r0, [fp, #-12]
   154f0:	bl	13328 <_start@@Base+0x938>
   154f4:	mov	r3, r0
   154f8:	mov	r2, r3
   154fc:	ldrh	r3, [fp, #-8]
   15500:	add	r3, r3, #3
   15504:	lsl	r3, r3, #1
   15508:	cmp	r2, r3
   1550c:	bcc	15534 <_start@@Base+0x2b44>
   15510:	ldrh	r3, [fp, #-8]
   15514:	add	r3, r3, #2
   15518:	lsl	r3, r3, #1
   1551c:	ldr	r2, [fp, #-12]
   15520:	add	r3, r2, r3
   15524:	mov	r0, r3
   15528:	bl	13328 <_start@@Base+0x938>
   1552c:	mov	r3, r0
   15530:	strh	r3, [fp, #-6]
   15534:	ldrh	r3, [fp, #-6]
   15538:	cmp	r3, #0
   1553c:	movne	r3, #1
   15540:	moveq	r3, #0
   15544:	uxtb	r3, r3
   15548:	mov	r0, r3
   1554c:	sub	sp, fp, #4
   15550:	ldr	fp, [sp]
   15554:	add	sp, sp, #4
   15558:	pop	{pc}		; (ldr pc, [sp], #4)
   1555c:	andeq	r0, r2, r8, asr r9
   15560:	andeq	sp, r1, r0, asr #2
   15564:	ldrdeq	sp, [r1], -ip
   15568:	str	fp, [sp, #-8]!
   1556c:	str	lr, [sp, #4]
   15570:	add	fp, sp, #4
   15574:	sub	sp, sp, #16
   15578:	str	r0, [fp, #-16]
   1557c:	mov	r3, #0
   15580:	strh	r3, [fp, #-6]
   15584:	ldr	r3, [fp, #-16]
   15588:	cmp	r3, #0
   1558c:	bne	155b0 <_start@@Base+0x2bc0>
   15590:	ldr	r3, [pc, #208]	; 15668 <_start@@Base+0x2c78>
   15594:	add	r3, pc, r3
   15598:	mov	r2, #608	; 0x260
   1559c:	ldr	r1, [pc, #200]	; 1566c <_start@@Base+0x2c7c>
   155a0:	add	r1, pc, r1
   155a4:	ldr	r0, [pc, #196]	; 15670 <_start@@Base+0x2c80>
   155a8:	add	r0, pc, r0
   155ac:	bl	129e0 <__assert_fail@plt>
   155b0:	mov	r3, #1
   155b4:	strh	r3, [fp, #-8]
   155b8:	ldr	r0, [fp, #-16]
   155bc:	bl	132c4 <_start@@Base+0x8d4>
   155c0:	mov	r3, r0
   155c4:	rsb	r3, r3, #0
   155c8:	ldr	r2, [fp, #-16]
   155cc:	add	r3, r2, r3
   155d0:	str	r3, [fp, #-12]
   155d4:	ldr	r0, [fp, #-12]
   155d8:	bl	13328 <_start@@Base+0x938>
   155dc:	mov	r3, r0
   155e0:	mov	r2, r3
   155e4:	ldrh	r3, [fp, #-8]
   155e8:	add	r3, r3, #3
   155ec:	lsl	r3, r3, #1
   155f0:	cmp	r2, r3
   155f4:	bcc	1561c <_start@@Base+0x2c2c>
   155f8:	ldrh	r3, [fp, #-8]
   155fc:	add	r3, r3, #2
   15600:	lsl	r3, r3, #1
   15604:	ldr	r2, [fp, #-12]
   15608:	add	r3, r2, r3
   1560c:	mov	r0, r3
   15610:	bl	13328 <_start@@Base+0x938>
   15614:	mov	r3, r0
   15618:	strh	r3, [fp, #-6]
   1561c:	ldrh	r3, [fp, #-6]
   15620:	cmp	r3, #0
   15624:	beq	15648 <_start@@Base+0x2c58>
   15628:	ldrh	r3, [fp, #-6]
   1562c:	ldr	r2, [fp, #-16]
   15630:	add	r3, r2, r3
   15634:	mov	r0, r3
   15638:	bl	12f00 <_start@@Base+0x510>
   1563c:	mov	r2, r0
   15640:	mov	r3, r1
   15644:	b	15650 <_start@@Base+0x2c60>
   15648:	mov	r2, #0
   1564c:	mov	r3, #0
   15650:	mov	r0, r2
   15654:	mov	r1, r3
   15658:	sub	sp, fp, #4
   1565c:	ldr	fp, [sp]
   15660:	add	sp, sp, #4
   15664:	pop	{pc}		; (ldr pc, [sp], #4)
   15668:	andeq	r0, r2, r8, ror r9
   1566c:	andeq	sp, r1, r8, asr r0
   15670:	strdeq	sp, [r1], -r4
   15674:	str	fp, [sp, #-8]!
   15678:	str	lr, [sp, #4]
   1567c:	add	fp, sp, #4
   15680:	sub	sp, sp, #16
   15684:	str	r0, [fp, #-16]
   15688:	mov	r3, #0
   1568c:	strh	r3, [fp, #-6]
   15690:	ldr	r3, [fp, #-16]
   15694:	cmp	r3, #0
   15698:	bne	156bc <_start@@Base+0x2ccc>
   1569c:	ldr	r3, [pc, #172]	; 15750 <_start@@Base+0x2d60>
   156a0:	add	r3, pc, r3
   156a4:	mov	r2, #608	; 0x260
   156a8:	ldr	r1, [pc, #164]	; 15754 <_start@@Base+0x2d64>
   156ac:	add	r1, pc, r1
   156b0:	ldr	r0, [pc, #160]	; 15758 <_start@@Base+0x2d68>
   156b4:	add	r0, pc, r0
   156b8:	bl	129e0 <__assert_fail@plt>
   156bc:	mov	r3, #1
   156c0:	strh	r3, [fp, #-8]
   156c4:	ldr	r0, [fp, #-16]
   156c8:	bl	132c4 <_start@@Base+0x8d4>
   156cc:	mov	r3, r0
   156d0:	rsb	r3, r3, #0
   156d4:	ldr	r2, [fp, #-16]
   156d8:	add	r3, r2, r3
   156dc:	str	r3, [fp, #-12]
   156e0:	ldr	r0, [fp, #-12]
   156e4:	bl	13328 <_start@@Base+0x938>
   156e8:	mov	r3, r0
   156ec:	mov	r2, r3
   156f0:	ldrh	r3, [fp, #-8]
   156f4:	add	r3, r3, #3
   156f8:	lsl	r3, r3, #1
   156fc:	cmp	r2, r3
   15700:	bcc	15728 <_start@@Base+0x2d38>
   15704:	ldrh	r3, [fp, #-8]
   15708:	add	r3, r3, #2
   1570c:	lsl	r3, r3, #1
   15710:	ldr	r2, [fp, #-12]
   15714:	add	r3, r2, r3
   15718:	mov	r0, r3
   1571c:	bl	13328 <_start@@Base+0x938>
   15720:	mov	r3, r0
   15724:	strh	r3, [fp, #-6]
   15728:	ldrh	r3, [fp, #-6]
   1572c:	cmp	r3, #0
   15730:	movne	r3, #1
   15734:	moveq	r3, #0
   15738:	uxtb	r3, r3
   1573c:	mov	r0, r3
   15740:	sub	sp, fp, #4
   15744:	ldr	fp, [sp]
   15748:	add	sp, sp, #4
   1574c:	pop	{pc}		; (ldr pc, [sp], #4)
   15750:	andeq	r0, r2, r8, lsl #15
   15754:	andeq	ip, r1, ip, asr #30
   15758:	andeq	ip, r1, r8, ror #31
   1575c:	str	fp, [sp, #-8]!
   15760:	str	lr, [sp, #4]
   15764:	add	fp, sp, #4
   15768:	sub	sp, sp, #16
   1576c:	str	r0, [fp, #-16]
   15770:	mov	r3, #0
   15774:	strh	r3, [fp, #-6]
   15778:	ldr	r3, [fp, #-16]
   1577c:	cmp	r3, #0
   15780:	bne	157a4 <_start@@Base+0x2db4>
   15784:	ldr	r3, [pc, #172]	; 15838 <_start@@Base+0x2e48>
   15788:	add	r3, pc, r3
   1578c:	movw	r2, #609	; 0x261
   15790:	ldr	r1, [pc, #164]	; 1583c <_start@@Base+0x2e4c>
   15794:	add	r1, pc, r1
   15798:	ldr	r0, [pc, #160]	; 15840 <_start@@Base+0x2e50>
   1579c:	add	r0, pc, r0
   157a0:	bl	129e0 <__assert_fail@plt>
   157a4:	mov	r3, #2
   157a8:	strh	r3, [fp, #-8]
   157ac:	ldr	r0, [fp, #-16]
   157b0:	bl	132c4 <_start@@Base+0x8d4>
   157b4:	mov	r3, r0
   157b8:	rsb	r3, r3, #0
   157bc:	ldr	r2, [fp, #-16]
   157c0:	add	r3, r2, r3
   157c4:	str	r3, [fp, #-12]
   157c8:	ldr	r0, [fp, #-12]
   157cc:	bl	13328 <_start@@Base+0x938>
   157d0:	mov	r3, r0
   157d4:	mov	r2, r3
   157d8:	ldrh	r3, [fp, #-8]
   157dc:	add	r3, r3, #3
   157e0:	lsl	r3, r3, #1
   157e4:	cmp	r2, r3
   157e8:	bcc	15810 <_start@@Base+0x2e20>
   157ec:	ldrh	r3, [fp, #-8]
   157f0:	add	r3, r3, #2
   157f4:	lsl	r3, r3, #1
   157f8:	ldr	r2, [fp, #-12]
   157fc:	add	r3, r2, r3
   15800:	mov	r0, r3
   15804:	bl	13328 <_start@@Base+0x938>
   15808:	mov	r3, r0
   1580c:	strh	r3, [fp, #-6]
   15810:	ldrh	r3, [fp, #-6]
   15814:	cmp	r3, #0
   15818:	movne	r3, #1
   1581c:	moveq	r3, #0
   15820:	uxtb	r3, r3
   15824:	mov	r0, r3
   15828:	sub	sp, fp, #4
   1582c:	ldr	fp, [sp]
   15830:	add	sp, sp, #4
   15834:	pop	{pc}		; (ldr pc, [sp], #4)
   15838:	andeq	r0, r2, r4, asr #13
   1583c:	andeq	ip, r1, r4, ror #28
   15840:	andeq	ip, r1, r0, lsl #30
   15844:	str	fp, [sp, #-8]!
   15848:	str	lr, [sp, #4]
   1584c:	add	fp, sp, #4
   15850:	sub	sp, sp, #24
   15854:	str	r0, [fp, #-24]	; 0xffffffe8
   15858:	mov	r3, #0
   1585c:	strh	r3, [fp, #-6]
   15860:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15864:	cmp	r3, #0
   15868:	bne	1588c <_start@@Base+0x2e9c>
   1586c:	ldr	r3, [pc, #212]	; 15948 <_start@@Base+0x2f58>
   15870:	add	r3, pc, r3
   15874:	movw	r2, #621	; 0x26d
   15878:	ldr	r1, [pc, #204]	; 1594c <_start@@Base+0x2f5c>
   1587c:	add	r1, pc, r1
   15880:	ldr	r0, [pc, #200]	; 15950 <_start@@Base+0x2f60>
   15884:	add	r0, pc, r0
   15888:	bl	129e0 <__assert_fail@plt>
   1588c:	mov	r3, #2
   15890:	strh	r3, [fp, #-8]
   15894:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15898:	bl	132c4 <_start@@Base+0x8d4>
   1589c:	mov	r3, r0
   158a0:	rsb	r3, r3, #0
   158a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   158a8:	add	r3, r2, r3
   158ac:	str	r3, [fp, #-12]
   158b0:	ldr	r0, [fp, #-12]
   158b4:	bl	13328 <_start@@Base+0x938>
   158b8:	mov	r3, r0
   158bc:	mov	r2, r3
   158c0:	ldrh	r3, [fp, #-8]
   158c4:	add	r3, r3, #3
   158c8:	lsl	r3, r3, #1
   158cc:	cmp	r2, r3
   158d0:	bcc	158f8 <_start@@Base+0x2f08>
   158d4:	ldrh	r3, [fp, #-8]
   158d8:	add	r3, r3, #2
   158dc:	lsl	r3, r3, #1
   158e0:	ldr	r2, [fp, #-12]
   158e4:	add	r3, r2, r3
   158e8:	mov	r0, r3
   158ec:	bl	13328 <_start@@Base+0x938>
   158f0:	mov	r3, r0
   158f4:	strh	r3, [fp, #-6]
   158f8:	ldrh	r3, [fp, #-6]
   158fc:	cmp	r3, #0
   15900:	beq	15930 <_start@@Base+0x2f40>
   15904:	ldrh	r3, [fp, #-6]
   15908:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1590c:	add	r3, r2, r3
   15910:	str	r3, [fp, #-16]
   15914:	ldr	r0, [fp, #-16]
   15918:	bl	13224 <_start@@Base+0x834>
   1591c:	mov	r3, r0
   15920:	add	r3, r3, #4
   15924:	ldr	r2, [fp, #-16]
   15928:	add	r3, r2, r3
   1592c:	b	15934 <_start@@Base+0x2f44>
   15930:	mov	r3, #0
   15934:	mov	r0, r3
   15938:	sub	sp, fp, #4
   1593c:	ldr	fp, [sp]
   15940:	add	sp, sp, #4
   15944:	pop	{pc}		; (ldr pc, [sp], #4)
   15948:	andeq	r0, r2, r0, lsr #14
   1594c:	andeq	ip, r1, ip, ror sp
   15950:	andeq	ip, r1, r8, lsl lr
   15954:	str	fp, [sp, #-8]!
   15958:	str	lr, [sp, #4]
   1595c:	add	fp, sp, #4
   15960:	sub	sp, sp, #24
   15964:	str	r0, [fp, #-24]	; 0xffffffe8
   15968:	mov	r3, #0
   1596c:	strh	r3, [fp, #-6]
   15970:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15974:	cmp	r3, #0
   15978:	bne	1599c <_start@@Base+0x2fac>
   1597c:	ldr	r3, [pc, #212]	; 15a58 <_start@@Base+0x3068>
   15980:	add	r3, pc, r3
   15984:	movw	r2, #621	; 0x26d
   15988:	ldr	r1, [pc, #204]	; 15a5c <_start@@Base+0x306c>
   1598c:	add	r1, pc, r1
   15990:	ldr	r0, [pc, #200]	; 15a60 <_start@@Base+0x3070>
   15994:	add	r0, pc, r0
   15998:	bl	129e0 <__assert_fail@plt>
   1599c:	mov	r3, #3
   159a0:	strh	r3, [fp, #-8]
   159a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   159a8:	bl	132c4 <_start@@Base+0x8d4>
   159ac:	mov	r3, r0
   159b0:	rsb	r3, r3, #0
   159b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   159b8:	add	r3, r2, r3
   159bc:	str	r3, [fp, #-12]
   159c0:	ldr	r0, [fp, #-12]
   159c4:	bl	13328 <_start@@Base+0x938>
   159c8:	mov	r3, r0
   159cc:	mov	r2, r3
   159d0:	ldrh	r3, [fp, #-8]
   159d4:	add	r3, r3, #3
   159d8:	lsl	r3, r3, #1
   159dc:	cmp	r2, r3
   159e0:	bcc	15a08 <_start@@Base+0x3018>
   159e4:	ldrh	r3, [fp, #-8]
   159e8:	add	r3, r3, #2
   159ec:	lsl	r3, r3, #1
   159f0:	ldr	r2, [fp, #-12]
   159f4:	add	r3, r2, r3
   159f8:	mov	r0, r3
   159fc:	bl	13328 <_start@@Base+0x938>
   15a00:	mov	r3, r0
   15a04:	strh	r3, [fp, #-6]
   15a08:	ldrh	r3, [fp, #-6]
   15a0c:	cmp	r3, #0
   15a10:	beq	15a40 <_start@@Base+0x3050>
   15a14:	ldrh	r3, [fp, #-6]
   15a18:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15a1c:	add	r3, r2, r3
   15a20:	str	r3, [fp, #-16]
   15a24:	ldr	r0, [fp, #-16]
   15a28:	bl	13224 <_start@@Base+0x834>
   15a2c:	mov	r3, r0
   15a30:	add	r3, r3, #4
   15a34:	ldr	r2, [fp, #-16]
   15a38:	add	r3, r2, r3
   15a3c:	b	15a44 <_start@@Base+0x3054>
   15a40:	mov	r3, #0
   15a44:	mov	r0, r3
   15a48:	sub	sp, fp, #4
   15a4c:	ldr	fp, [sp]
   15a50:	add	sp, sp, #4
   15a54:	pop	{pc}		; (ldr pc, [sp], #4)
   15a58:	andeq	r0, r2, r0, lsr r6
   15a5c:	andeq	ip, r1, ip, ror #24
   15a60:	andeq	ip, r1, r8, lsl #26
   15a64:	str	fp, [sp, #-8]!
   15a68:	str	lr, [sp, #4]
   15a6c:	add	fp, sp, #4
   15a70:	sub	sp, sp, #16
   15a74:	str	r0, [fp, #-16]
   15a78:	mov	r3, #0
   15a7c:	strh	r3, [fp, #-6]
   15a80:	ldr	r3, [fp, #-16]
   15a84:	cmp	r3, #0
   15a88:	bne	15aac <_start@@Base+0x30bc>
   15a8c:	ldr	r3, [pc, #172]	; 15b40 <_start@@Base+0x3150>
   15a90:	add	r3, pc, r3
   15a94:	movw	r2, #621	; 0x26d
   15a98:	ldr	r1, [pc, #164]	; 15b44 <_start@@Base+0x3154>
   15a9c:	add	r1, pc, r1
   15aa0:	ldr	r0, [pc, #160]	; 15b48 <_start@@Base+0x3158>
   15aa4:	add	r0, pc, r0
   15aa8:	bl	129e0 <__assert_fail@plt>
   15aac:	mov	r3, #3
   15ab0:	strh	r3, [fp, #-8]
   15ab4:	ldr	r0, [fp, #-16]
   15ab8:	bl	132c4 <_start@@Base+0x8d4>
   15abc:	mov	r3, r0
   15ac0:	rsb	r3, r3, #0
   15ac4:	ldr	r2, [fp, #-16]
   15ac8:	add	r3, r2, r3
   15acc:	str	r3, [fp, #-12]
   15ad0:	ldr	r0, [fp, #-12]
   15ad4:	bl	13328 <_start@@Base+0x938>
   15ad8:	mov	r3, r0
   15adc:	mov	r2, r3
   15ae0:	ldrh	r3, [fp, #-8]
   15ae4:	add	r3, r3, #3
   15ae8:	lsl	r3, r3, #1
   15aec:	cmp	r2, r3
   15af0:	bcc	15b18 <_start@@Base+0x3128>
   15af4:	ldrh	r3, [fp, #-8]
   15af8:	add	r3, r3, #2
   15afc:	lsl	r3, r3, #1
   15b00:	ldr	r2, [fp, #-12]
   15b04:	add	r3, r2, r3
   15b08:	mov	r0, r3
   15b0c:	bl	13328 <_start@@Base+0x938>
   15b10:	mov	r3, r0
   15b14:	strh	r3, [fp, #-6]
   15b18:	ldrh	r3, [fp, #-6]
   15b1c:	cmp	r3, #0
   15b20:	movne	r3, #1
   15b24:	moveq	r3, #0
   15b28:	uxtb	r3, r3
   15b2c:	mov	r0, r3
   15b30:	sub	sp, fp, #4
   15b34:	ldr	fp, [sp]
   15b38:	add	sp, sp, #4
   15b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b40:	ldrdeq	r0, [r2], -r8
   15b44:	andeq	ip, r1, ip, asr fp
   15b48:	strdeq	ip, [r1], -r8
   15b4c:	str	r4, [sp, #-12]!
   15b50:	str	fp, [sp, #4]
   15b54:	str	lr, [sp, #8]
   15b58:	add	fp, sp, #8
   15b5c:	sub	sp, sp, #20
   15b60:	str	r0, [fp, #-24]	; 0xffffffe8
   15b64:	str	r1, [fp, #-28]	; 0xffffffe4
   15b68:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15b6c:	bl	15844 <_start@@Base+0x2e54>
   15b70:	mov	r3, r0
   15b74:	str	r3, [fp, #-20]	; 0xffffffec
   15b78:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15b7c:	bl	15954 <_start@@Base+0x2f64>
   15b80:	mov	r3, r0
   15b84:	str	r3, [fp, #-16]
   15b88:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b8c:	mov	r0, r3
   15b90:	bl	13574 <_start@@Base+0xb84>
   15b94:	mov	r4, r0
   15b98:	ldr	r3, [fp, #-16]
   15b9c:	mov	r0, r3
   15ba0:	bl	13574 <_start@@Base+0xb84>
   15ba4:	mov	r3, r0
   15ba8:	cmp	r4, r3
   15bac:	beq	15bd0 <_start@@Base+0x31e0>
   15bb0:	ldr	r3, [pc, #68]	; 15bfc <_start@@Base+0x320c>
   15bb4:	add	r3, pc, r3
   15bb8:	movw	r2, #621	; 0x26d
   15bbc:	ldr	r1, [pc, #60]	; 15c00 <_start@@Base+0x3210>
   15bc0:	add	r1, pc, r1
   15bc4:	ldr	r0, [pc, #56]	; 15c04 <_start@@Base+0x3214>
   15bc8:	add	r0, pc, r0
   15bcc:	bl	129e0 <__assert_fail@plt>
   15bd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15bd4:	mov	r1, r3
   15bd8:	sub	r3, fp, #20
   15bdc:	ldrd	r2, [r3]
   15be0:	strd	r2, [r1]
   15be4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15be8:	sub	sp, fp, #8
   15bec:	ldr	r4, [sp]
   15bf0:	ldr	fp, [sp, #4]
   15bf4:	add	sp, sp, #8
   15bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bfc:	andeq	r0, r2, r4, ror #8
   15c00:	andeq	ip, r1, r8, lsr sl
   15c04:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   15c08:	str	fp, [sp, #-8]!
   15c0c:	str	lr, [sp, #4]
   15c10:	add	fp, sp, #4
   15c14:	sub	sp, sp, #8
   15c18:	str	r0, [fp, #-8]
   15c1c:	ldr	r3, [fp, #-8]
   15c20:	cmp	r3, #0
   15c24:	beq	15c40 <_start@@Base+0x3250>
   15c28:	ldr	r3, [fp, #-8]
   15c2c:	sub	r3, r3, #4
   15c30:	mov	r0, r3
   15c34:	bl	13224 <_start@@Base+0x834>
   15c38:	mov	r3, r0
   15c3c:	b	15c44 <_start@@Base+0x3254>
   15c40:	mov	r3, #0
   15c44:	mov	r0, r3
   15c48:	sub	sp, fp, #4
   15c4c:	ldr	fp, [sp]
   15c50:	add	sp, sp, #4
   15c54:	pop	{pc}		; (ldr pc, [sp], #4)
   15c58:	str	fp, [sp, #-8]!
   15c5c:	str	lr, [sp, #4]
   15c60:	add	fp, sp, #4
   15c64:	sub	sp, sp, #16
   15c68:	str	r0, [fp, #-16]
   15c6c:	str	r1, [fp, #-20]	; 0xffffffec
   15c70:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c74:	lsl	r3, r3, #2
   15c78:	ldr	r2, [fp, #-16]
   15c7c:	add	r3, r2, r3
   15c80:	str	r3, [fp, #-8]
   15c84:	ldr	r0, [fp, #-16]
   15c88:	bl	13574 <_start@@Base+0xb84>
   15c8c:	mov	r2, r0
   15c90:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c94:	cmp	r3, r2
   15c98:	bcc	15cbc <_start@@Base+0x32cc>
   15c9c:	ldr	r3, [pc, #64]	; 15ce4 <_start@@Base+0x32f4>
   15ca0:	add	r3, pc, r3
   15ca4:	movw	r2, #693	; 0x2b5
   15ca8:	ldr	r1, [pc, #56]	; 15ce8 <_start@@Base+0x32f8>
   15cac:	add	r1, pc, r1
   15cb0:	ldr	r0, [pc, #52]	; 15cec <_start@@Base+0x32fc>
   15cb4:	add	r0, pc, r0
   15cb8:	bl	129e0 <__assert_fail@plt>
   15cbc:	ldr	r0, [fp, #-8]
   15cc0:	bl	13224 <_start@@Base+0x834>
   15cc4:	mov	r2, r0
   15cc8:	ldr	r3, [fp, #-8]
   15ccc:	add	r3, r3, r2
   15cd0:	mov	r0, r3
   15cd4:	sub	sp, fp, #4
   15cd8:	ldr	fp, [sp]
   15cdc:	add	sp, sp, #4
   15ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ce4:	andeq	r0, r2, r8, ror r0
   15ce8:	andeq	ip, r1, ip, asr #18
   15cec:	strdeq	ip, [r1], -r4
   15cf0:	str	fp, [sp, #-8]!
   15cf4:	str	lr, [sp, #4]
   15cf8:	add	fp, sp, #4
   15cfc:	sub	sp, sp, #8
   15d00:	str	r0, [fp, #-8]
   15d04:	str	r1, [fp, #-12]
   15d08:	ldr	r3, [fp, #-8]
   15d0c:	cmp	r3, #0
   15d10:	beq	15d44 <_start@@Base+0x3354>
   15d14:	ldr	r1, [fp, #-12]
   15d18:	ldr	r0, [fp, #-8]
   15d1c:	bl	147a4 <_start@@Base+0x1db4>
   15d20:	mov	r3, r0
   15d24:	cmp	r3, #0
   15d28:	beq	15d44 <_start@@Base+0x3354>
   15d2c:	ldr	r0, [fp, #-8]
   15d30:	bl	13224 <_start@@Base+0x834>
   15d34:	mov	r2, r0
   15d38:	ldr	r3, [fp, #-8]
   15d3c:	add	r3, r3, r2
   15d40:	b	15d48 <_start@@Base+0x3358>
   15d44:	mov	r3, #0
   15d48:	mov	r0, r3
   15d4c:	sub	sp, fp, #4
   15d50:	ldr	fp, [sp]
   15d54:	add	sp, sp, #4
   15d58:	pop	{pc}		; (ldr pc, [sp], #4)
   15d5c:	str	fp, [sp, #-8]!
   15d60:	str	lr, [sp, #4]
   15d64:	add	fp, sp, #4
   15d68:	sub	sp, sp, #16
   15d6c:	str	r0, [fp, #-16]
   15d70:	ldr	r3, [pc, #88]	; 15dd0 <_start@@Base+0x33e0>
   15d74:	add	r3, pc, r3
   15d78:	str	r3, [fp, #-8]
   15d7c:	ldr	r3, [fp, #-16]
   15d80:	cmp	r3, #0
   15d84:	beq	15db8 <_start@@Base+0x33c8>
   15d88:	ldr	r1, [fp, #-8]
   15d8c:	ldr	r0, [fp, #-16]
   15d90:	bl	147a4 <_start@@Base+0x1db4>
   15d94:	mov	r3, r0
   15d98:	cmp	r3, #0
   15d9c:	beq	15db8 <_start@@Base+0x33c8>
   15da0:	ldr	r0, [fp, #-16]
   15da4:	bl	13224 <_start@@Base+0x834>
   15da8:	mov	r2, r0
   15dac:	ldr	r3, [fp, #-16]
   15db0:	add	r3, r3, r2
   15db4:	b	15dbc <_start@@Base+0x33cc>
   15db8:	mov	r3, #0
   15dbc:	mov	r0, r3
   15dc0:	sub	sp, fp, #4
   15dc4:	ldr	fp, [sp]
   15dc8:	add	sp, sp, #4
   15dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   15dd0:	andeq	ip, r1, r0, lsl #18
   15dd4:	str	fp, [sp, #-8]!
   15dd8:	str	lr, [sp, #4]
   15ddc:	add	fp, sp, #4
   15de0:	sub	sp, sp, #16
   15de4:	str	r0, [fp, #-16]
   15de8:	mov	r3, #0
   15dec:	strh	r3, [fp, #-6]
   15df0:	ldr	r3, [fp, #-16]
   15df4:	cmp	r3, #0
   15df8:	bne	15e1c <_start@@Base+0x342c>
   15dfc:	ldr	r3, [pc, #184]	; 15ebc <_start@@Base+0x34cc>
   15e00:	add	r3, pc, r3
   15e04:	mov	r2, #696	; 0x2b8
   15e08:	ldr	r1, [pc, #176]	; 15ec0 <_start@@Base+0x34d0>
   15e0c:	add	r1, pc, r1
   15e10:	ldr	r0, [pc, #172]	; 15ec4 <_start@@Base+0x34d4>
   15e14:	add	r0, pc, r0
   15e18:	bl	129e0 <__assert_fail@plt>
   15e1c:	mov	r3, #0
   15e20:	strh	r3, [fp, #-8]
   15e24:	ldr	r0, [fp, #-16]
   15e28:	bl	132c4 <_start@@Base+0x8d4>
   15e2c:	mov	r3, r0
   15e30:	rsb	r3, r3, #0
   15e34:	ldr	r2, [fp, #-16]
   15e38:	add	r3, r2, r3
   15e3c:	str	r3, [fp, #-12]
   15e40:	ldr	r0, [fp, #-12]
   15e44:	bl	13328 <_start@@Base+0x938>
   15e48:	mov	r3, r0
   15e4c:	mov	r2, r3
   15e50:	ldrh	r3, [fp, #-8]
   15e54:	add	r3, r3, #3
   15e58:	lsl	r3, r3, #1
   15e5c:	cmp	r2, r3
   15e60:	bcc	15e88 <_start@@Base+0x3498>
   15e64:	ldrh	r3, [fp, #-8]
   15e68:	add	r3, r3, #2
   15e6c:	lsl	r3, r3, #1
   15e70:	ldr	r2, [fp, #-12]
   15e74:	add	r3, r2, r3
   15e78:	mov	r0, r3
   15e7c:	bl	13328 <_start@@Base+0x938>
   15e80:	mov	r3, r0
   15e84:	strh	r3, [fp, #-6]
   15e88:	ldrh	r3, [fp, #-6]
   15e8c:	cmp	r3, #0
   15e90:	beq	15ea4 <_start@@Base+0x34b4>
   15e94:	ldrh	r3, [fp, #-6]
   15e98:	ldr	r2, [fp, #-16]
   15e9c:	add	r3, r2, r3
   15ea0:	b	15ea8 <_start@@Base+0x34b8>
   15ea4:	mov	r3, #0
   15ea8:	mov	r0, r3
   15eac:	sub	sp, fp, #4
   15eb0:	ldr	fp, [sp]
   15eb4:	add	sp, sp, #4
   15eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   15ebc:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   15ec0:	andeq	ip, r1, ip, ror #15
   15ec4:	andeq	ip, r1, r8, lsl #17
   15ec8:	str	fp, [sp, #-8]!
   15ecc:	str	lr, [sp, #4]
   15ed0:	add	fp, sp, #4
   15ed4:	sub	sp, sp, #16
   15ed8:	str	r0, [fp, #-16]
   15edc:	mov	r3, #0
   15ee0:	strh	r3, [fp, #-6]
   15ee4:	ldr	r3, [fp, #-16]
   15ee8:	cmp	r3, #0
   15eec:	bne	15f10 <_start@@Base+0x3520>
   15ef0:	ldr	r3, [pc, #172]	; 15fa4 <_start@@Base+0x35b4>
   15ef4:	add	r3, pc, r3
   15ef8:	mov	r2, #696	; 0x2b8
   15efc:	ldr	r1, [pc, #164]	; 15fa8 <_start@@Base+0x35b8>
   15f00:	add	r1, pc, r1
   15f04:	ldr	r0, [pc, #160]	; 15fac <_start@@Base+0x35bc>
   15f08:	add	r0, pc, r0
   15f0c:	bl	129e0 <__assert_fail@plt>
   15f10:	mov	r3, #0
   15f14:	strh	r3, [fp, #-8]
   15f18:	ldr	r0, [fp, #-16]
   15f1c:	bl	132c4 <_start@@Base+0x8d4>
   15f20:	mov	r3, r0
   15f24:	rsb	r3, r3, #0
   15f28:	ldr	r2, [fp, #-16]
   15f2c:	add	r3, r2, r3
   15f30:	str	r3, [fp, #-12]
   15f34:	ldr	r0, [fp, #-12]
   15f38:	bl	13328 <_start@@Base+0x938>
   15f3c:	mov	r3, r0
   15f40:	mov	r2, r3
   15f44:	ldrh	r3, [fp, #-8]
   15f48:	add	r3, r3, #3
   15f4c:	lsl	r3, r3, #1
   15f50:	cmp	r2, r3
   15f54:	bcc	15f7c <_start@@Base+0x358c>
   15f58:	ldrh	r3, [fp, #-8]
   15f5c:	add	r3, r3, #2
   15f60:	lsl	r3, r3, #1
   15f64:	ldr	r2, [fp, #-12]
   15f68:	add	r3, r2, r3
   15f6c:	mov	r0, r3
   15f70:	bl	13328 <_start@@Base+0x938>
   15f74:	mov	r3, r0
   15f78:	strh	r3, [fp, #-6]
   15f7c:	ldrh	r3, [fp, #-6]
   15f80:	cmp	r3, #0
   15f84:	movne	r3, #1
   15f88:	moveq	r3, #0
   15f8c:	uxtb	r3, r3
   15f90:	mov	r0, r3
   15f94:	sub	sp, fp, #4
   15f98:	ldr	fp, [sp]
   15f9c:	add	sp, sp, #4
   15fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   15fa4:	andeq	pc, r1, r0, lsr #20
   15fa8:	strdeq	ip, [r1], -r8
   15fac:	muleq	r1, r4, r7
   15fb0:	str	fp, [sp, #-8]!
   15fb4:	str	lr, [sp, #4]
   15fb8:	add	fp, sp, #4
   15fbc:	sub	sp, sp, #16
   15fc0:	str	r0, [fp, #-16]
   15fc4:	mov	r3, #0
   15fc8:	strh	r3, [fp, #-6]
   15fcc:	ldr	r3, [fp, #-16]
   15fd0:	cmp	r3, #0
   15fd4:	bne	15ff8 <_start@@Base+0x3608>
   15fd8:	ldr	r3, [pc, #196]	; 160a4 <_start@@Base+0x36b4>
   15fdc:	add	r3, pc, r3
   15fe0:	movw	r2, #697	; 0x2b9
   15fe4:	ldr	r1, [pc, #188]	; 160a8 <_start@@Base+0x36b8>
   15fe8:	add	r1, pc, r1
   15fec:	ldr	r0, [pc, #184]	; 160ac <_start@@Base+0x36bc>
   15ff0:	add	r0, pc, r0
   15ff4:	bl	129e0 <__assert_fail@plt>
   15ff8:	mov	r3, #2
   15ffc:	strh	r3, [fp, #-8]
   16000:	ldr	r0, [fp, #-16]
   16004:	bl	132c4 <_start@@Base+0x8d4>
   16008:	mov	r3, r0
   1600c:	rsb	r3, r3, #0
   16010:	ldr	r2, [fp, #-16]
   16014:	add	r3, r2, r3
   16018:	str	r3, [fp, #-12]
   1601c:	ldr	r0, [fp, #-12]
   16020:	bl	13328 <_start@@Base+0x938>
   16024:	mov	r3, r0
   16028:	mov	r2, r3
   1602c:	ldrh	r3, [fp, #-8]
   16030:	add	r3, r3, #3
   16034:	lsl	r3, r3, #1
   16038:	cmp	r2, r3
   1603c:	bcc	16064 <_start@@Base+0x3674>
   16040:	ldrh	r3, [fp, #-8]
   16044:	add	r3, r3, #2
   16048:	lsl	r3, r3, #1
   1604c:	ldr	r2, [fp, #-12]
   16050:	add	r3, r2, r3
   16054:	mov	r0, r3
   16058:	bl	13328 <_start@@Base+0x938>
   1605c:	mov	r3, r0
   16060:	strh	r3, [fp, #-6]
   16064:	ldrh	r3, [fp, #-6]
   16068:	cmp	r3, #0
   1606c:	beq	1608c <_start@@Base+0x369c>
   16070:	ldrh	r3, [fp, #-6]
   16074:	ldr	r2, [fp, #-16]
   16078:	add	r3, r2, r3
   1607c:	mov	r0, r3
   16080:	bl	12df0 <_start@@Base+0x400>
   16084:	mov	r3, r0
   16088:	b	16090 <_start@@Base+0x36a0>
   1608c:	mov	r3, #100	; 0x64
   16090:	mov	r0, r3
   16094:	sub	sp, fp, #4
   16098:	ldr	fp, [sp]
   1609c:	add	sp, sp, #4
   160a0:	pop	{pc}		; (ldr pc, [sp], #4)
   160a4:	strdeq	pc, [r1], -r4
   160a8:	andeq	ip, r1, r0, lsl r6
   160ac:	andeq	ip, r1, ip, lsr #13
   160b0:	str	fp, [sp, #-8]!
   160b4:	str	lr, [sp, #4]
   160b8:	add	fp, sp, #4
   160bc:	sub	sp, sp, #16
   160c0:	str	r0, [fp, #-16]
   160c4:	mov	r3, #0
   160c8:	strh	r3, [fp, #-6]
   160cc:	ldr	r3, [fp, #-16]
   160d0:	cmp	r3, #0
   160d4:	bne	160f8 <_start@@Base+0x3708>
   160d8:	ldr	r3, [pc, #172]	; 1618c <_start@@Base+0x379c>
   160dc:	add	r3, pc, r3
   160e0:	movw	r2, #697	; 0x2b9
   160e4:	ldr	r1, [pc, #164]	; 16190 <_start@@Base+0x37a0>
   160e8:	add	r1, pc, r1
   160ec:	ldr	r0, [pc, #160]	; 16194 <_start@@Base+0x37a4>
   160f0:	add	r0, pc, r0
   160f4:	bl	129e0 <__assert_fail@plt>
   160f8:	mov	r3, #2
   160fc:	strh	r3, [fp, #-8]
   16100:	ldr	r0, [fp, #-16]
   16104:	bl	132c4 <_start@@Base+0x8d4>
   16108:	mov	r3, r0
   1610c:	rsb	r3, r3, #0
   16110:	ldr	r2, [fp, #-16]
   16114:	add	r3, r2, r3
   16118:	str	r3, [fp, #-12]
   1611c:	ldr	r0, [fp, #-12]
   16120:	bl	13328 <_start@@Base+0x938>
   16124:	mov	r3, r0
   16128:	mov	r2, r3
   1612c:	ldrh	r3, [fp, #-8]
   16130:	add	r3, r3, #3
   16134:	lsl	r3, r3, #1
   16138:	cmp	r2, r3
   1613c:	bcc	16164 <_start@@Base+0x3774>
   16140:	ldrh	r3, [fp, #-8]
   16144:	add	r3, r3, #2
   16148:	lsl	r3, r3, #1
   1614c:	ldr	r2, [fp, #-12]
   16150:	add	r3, r2, r3
   16154:	mov	r0, r3
   16158:	bl	13328 <_start@@Base+0x938>
   1615c:	mov	r3, r0
   16160:	strh	r3, [fp, #-6]
   16164:	ldrh	r3, [fp, #-6]
   16168:	cmp	r3, #0
   1616c:	movne	r3, #1
   16170:	moveq	r3, #0
   16174:	uxtb	r3, r3
   16178:	mov	r0, r3
   1617c:	sub	sp, fp, #4
   16180:	ldr	fp, [sp]
   16184:	add	sp, sp, #4
   16188:	pop	{pc}		; (ldr pc, [sp], #4)
   1618c:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   16190:	andeq	ip, r1, r0, lsl r5
   16194:	andeq	ip, r1, ip, lsr #11
   16198:	str	fp, [sp, #-8]!
   1619c:	str	lr, [sp, #4]
   161a0:	add	fp, sp, #4
   161a4:	sub	sp, sp, #16
   161a8:	str	r0, [fp, #-16]
   161ac:	mov	r3, r1
   161b0:	strh	r3, [fp, #-18]	; 0xffffffee
   161b4:	mov	r3, #0
   161b8:	str	r3, [fp, #-8]
   161bc:	b	16214 <_start@@Base+0x3824>
   161c0:	ldr	r1, [fp, #-8]
   161c4:	ldr	r0, [fp, #-16]
   161c8:	bl	15c58 <_start@@Base+0x3268>
   161cc:	mov	r3, r0
   161d0:	mov	r0, r3
   161d4:	bl	15fb0 <_start@@Base+0x35c0>
   161d8:	mov	r3, r0
   161dc:	strh	r3, [fp, #-10]
   161e0:	ldrsh	r2, [fp, #-10]
   161e4:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   161e8:	cmp	r2, r3
   161ec:	blt	16208 <_start@@Base+0x3818>
   161f0:	ldrsh	r2, [fp, #-10]
   161f4:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   161f8:	cmp	r2, r3
   161fc:	bgt	16208 <_start@@Base+0x3818>
   16200:	ldr	r3, [fp, #-8]
   16204:	b	16238 <_start@@Base+0x3848>
   16208:	ldr	r3, [fp, #-8]
   1620c:	add	r3, r3, #1
   16210:	str	r3, [fp, #-8]
   16214:	ldr	r0, [fp, #-16]
   16218:	bl	15c08 <_start@@Base+0x3218>
   1621c:	mov	r2, r0
   16220:	ldr	r3, [fp, #-8]
   16224:	cmp	r3, r2
   16228:	bcc	161c0 <_start@@Base+0x37d0>
   1622c:	ldr	r3, [pc, #24]	; 1624c <_start@@Base+0x385c>
   16230:	add	r3, pc, r3
   16234:	ldr	r3, [r3]
   16238:	mov	r0, r3
   1623c:	sub	sp, fp, #4
   16240:	ldr	fp, [sp]
   16244:	add	sp, sp, #4
   16248:	pop	{pc}		; (ldr pc, [sp], #4)
   1624c:	andeq	r1, r3, r8, asr #28
   16250:	str	fp, [sp, #-8]!
   16254:	str	lr, [sp, #4]
   16258:	add	fp, sp, #4
   1625c:	sub	sp, sp, #24
   16260:	str	r0, [fp, #-16]
   16264:	str	r1, [fp, #-20]	; 0xffffffec
   16268:	str	r2, [fp, #-24]	; 0xffffffe8
   1626c:	strh	r3, [fp, #-26]	; 0xffffffe6
   16270:	ldr	r3, [fp, #-20]	; 0xffffffec
   16274:	str	r3, [fp, #-8]
   16278:	b	162d0 <_start@@Base+0x38e0>
   1627c:	ldr	r1, [fp, #-8]
   16280:	ldr	r0, [fp, #-16]
   16284:	bl	15c58 <_start@@Base+0x3268>
   16288:	mov	r3, r0
   1628c:	mov	r0, r3
   16290:	bl	15fb0 <_start@@Base+0x35c0>
   16294:	mov	r3, r0
   16298:	strh	r3, [fp, #-10]
   1629c:	ldrsh	r2, [fp, #-10]
   162a0:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
   162a4:	cmp	r2, r3
   162a8:	blt	162c4 <_start@@Base+0x38d4>
   162ac:	ldrsh	r2, [fp, #-10]
   162b0:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
   162b4:	cmp	r2, r3
   162b8:	bgt	162c4 <_start@@Base+0x38d4>
   162bc:	ldr	r3, [fp, #-8]
   162c0:	b	16314 <_start@@Base+0x3924>
   162c4:	ldr	r3, [fp, #-8]
   162c8:	add	r3, r3, #1
   162cc:	str	r3, [fp, #-8]
   162d0:	ldr	r0, [fp, #-16]
   162d4:	bl	15c08 <_start@@Base+0x3218>
   162d8:	mov	r2, r0
   162dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   162e0:	cmp	r3, r2
   162e4:	bcc	162f8 <_start@@Base+0x3908>
   162e8:	ldr	r0, [fp, #-16]
   162ec:	bl	15c08 <_start@@Base+0x3218>
   162f0:	mov	r3, r0
   162f4:	b	162fc <_start@@Base+0x390c>
   162f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   162fc:	ldr	r2, [fp, #-8]
   16300:	cmp	r3, r2
   16304:	bhi	1627c <_start@@Base+0x388c>
   16308:	ldr	r3, [pc, #24]	; 16328 <_start@@Base+0x3938>
   1630c:	add	r3, pc, r3
   16310:	ldr	r3, [r3]
   16314:	mov	r0, r3
   16318:	sub	sp, fp, #4
   1631c:	ldr	fp, [sp]
   16320:	add	sp, sp, #4
   16324:	pop	{pc}		; (ldr pc, [sp], #4)
   16328:	andeq	r1, r3, ip, ror #26
   1632c:	str	fp, [sp, #-8]!
   16330:	str	lr, [sp, #4]
   16334:	add	fp, sp, #4
   16338:	sub	sp, sp, #16
   1633c:	str	r0, [fp, #-16]
   16340:	mov	r3, r1
   16344:	strh	r3, [fp, #-18]	; 0xffffffee
   16348:	ldr	r0, [fp, #-16]
   1634c:	bl	15c08 <_start@@Base+0x3218>
   16350:	str	r0, [fp, #-8]
   16354:	b	163a0 <_start@@Base+0x39b0>
   16358:	ldr	r1, [fp, #-8]
   1635c:	ldr	r0, [fp, #-16]
   16360:	bl	15c58 <_start@@Base+0x3268>
   16364:	mov	r3, r0
   16368:	mov	r0, r3
   1636c:	bl	15fb0 <_start@@Base+0x35c0>
   16370:	mov	r3, r0
   16374:	strh	r3, [fp, #-10]
   16378:	ldrsh	r2, [fp, #-10]
   1637c:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   16380:	cmp	r2, r3
   16384:	blt	163a0 <_start@@Base+0x39b0>
   16388:	ldrsh	r2, [fp, #-10]
   1638c:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   16390:	cmp	r2, r3
   16394:	bgt	163a0 <_start@@Base+0x39b0>
   16398:	ldr	r3, [fp, #-8]
   1639c:	b	163c0 <_start@@Base+0x39d0>
   163a0:	ldr	r3, [fp, #-8]
   163a4:	sub	r2, r3, #1
   163a8:	str	r2, [fp, #-8]
   163ac:	cmp	r3, #0
   163b0:	bne	16358 <_start@@Base+0x3968>
   163b4:	ldr	r3, [pc, #24]	; 163d4 <_start@@Base+0x39e4>
   163b8:	add	r3, pc, r3
   163bc:	ldr	r3, [r3]
   163c0:	mov	r0, r3
   163c4:	sub	sp, fp, #4
   163c8:	ldr	fp, [sp]
   163cc:	add	sp, sp, #4
   163d0:	pop	{pc}		; (ldr pc, [sp], #4)
   163d4:	andeq	r1, r3, r0, asr #25
   163d8:	str	fp, [sp, #-8]!
   163dc:	str	lr, [sp, #4]
   163e0:	add	fp, sp, #4
   163e4:	sub	sp, sp, #24
   163e8:	str	r0, [fp, #-16]
   163ec:	str	r1, [fp, #-20]	; 0xffffffec
   163f0:	str	r2, [fp, #-24]	; 0xffffffe8
   163f4:	strh	r3, [fp, #-26]	; 0xffffffe6
   163f8:	ldr	r0, [fp, #-16]
   163fc:	bl	15c08 <_start@@Base+0x3218>
   16400:	mov	r2, r0
   16404:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16408:	cmp	r3, r2
   1640c:	bcc	16420 <_start@@Base+0x3a30>
   16410:	ldr	r0, [fp, #-16]
   16414:	bl	15c08 <_start@@Base+0x3218>
   16418:	mov	r3, r0
   1641c:	b	16424 <_start@@Base+0x3a34>
   16420:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16424:	str	r3, [fp, #-8]
   16428:	b	16474 <_start@@Base+0x3a84>
   1642c:	ldr	r1, [fp, #-8]
   16430:	ldr	r0, [fp, #-16]
   16434:	bl	15c58 <_start@@Base+0x3268>
   16438:	mov	r3, r0
   1643c:	mov	r0, r3
   16440:	bl	15fb0 <_start@@Base+0x35c0>
   16444:	mov	r3, r0
   16448:	strh	r3, [fp, #-10]
   1644c:	ldrsh	r2, [fp, #-10]
   16450:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
   16454:	cmp	r2, r3
   16458:	blt	16474 <_start@@Base+0x3a84>
   1645c:	ldrsh	r2, [fp, #-10]
   16460:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
   16464:	cmp	r2, r3
   16468:	bgt	16474 <_start@@Base+0x3a84>
   1646c:	ldr	r3, [fp, #-8]
   16470:	b	16498 <_start@@Base+0x3aa8>
   16474:	ldr	r3, [fp, #-8]
   16478:	sub	r2, r3, #1
   1647c:	str	r2, [fp, #-8]
   16480:	ldr	r2, [fp, #-20]	; 0xffffffec
   16484:	cmp	r2, r3
   16488:	bcc	1642c <_start@@Base+0x3a3c>
   1648c:	ldr	r3, [pc, #24]	; 164ac <_start@@Base+0x3abc>
   16490:	add	r3, pc, r3
   16494:	ldr	r3, [r3]
   16498:	mov	r0, r3
   1649c:	sub	sp, fp, #4
   164a0:	ldr	fp, [sp]
   164a4:	add	sp, sp, #4
   164a8:	pop	{pc}		; (ldr pc, [sp], #4)
   164ac:	andeq	r1, r3, r8, ror #23
   164b0:	str	fp, [sp, #-8]!
   164b4:	str	lr, [sp, #4]
   164b8:	add	fp, sp, #4
   164bc:	sub	sp, sp, #16
   164c0:	str	r0, [fp, #-16]
   164c4:	mov	r3, #0
   164c8:	strh	r3, [fp, #-6]
   164cc:	ldr	r3, [fp, #-16]
   164d0:	cmp	r3, #0
   164d4:	bne	164f8 <_start@@Base+0x3b08>
   164d8:	ldr	r3, [pc, #196]	; 165a4 <_start@@Base+0x3bb4>
   164dc:	add	r3, pc, r3
   164e0:	movw	r2, #698	; 0x2ba
   164e4:	ldr	r1, [pc, #188]	; 165a8 <_start@@Base+0x3bb8>
   164e8:	add	r1, pc, r1
   164ec:	ldr	r0, [pc, #184]	; 165ac <_start@@Base+0x3bbc>
   164f0:	add	r0, pc, r0
   164f4:	bl	129e0 <__assert_fail@plt>
   164f8:	mov	r3, #1
   164fc:	strh	r3, [fp, #-8]
   16500:	ldr	r0, [fp, #-16]
   16504:	bl	132c4 <_start@@Base+0x8d4>
   16508:	mov	r3, r0
   1650c:	rsb	r3, r3, #0
   16510:	ldr	r2, [fp, #-16]
   16514:	add	r3, r2, r3
   16518:	str	r3, [fp, #-12]
   1651c:	ldr	r0, [fp, #-12]
   16520:	bl	13328 <_start@@Base+0x938>
   16524:	mov	r3, r0
   16528:	mov	r2, r3
   1652c:	ldrh	r3, [fp, #-8]
   16530:	add	r3, r3, #3
   16534:	lsl	r3, r3, #1
   16538:	cmp	r2, r3
   1653c:	bcc	16564 <_start@@Base+0x3b74>
   16540:	ldrh	r3, [fp, #-8]
   16544:	add	r3, r3, #2
   16548:	lsl	r3, r3, #1
   1654c:	ldr	r2, [fp, #-12]
   16550:	add	r3, r2, r3
   16554:	mov	r0, r3
   16558:	bl	13328 <_start@@Base+0x938>
   1655c:	mov	r3, r0
   16560:	strh	r3, [fp, #-6]
   16564:	ldrh	r3, [fp, #-6]
   16568:	cmp	r3, #0
   1656c:	beq	1658c <_start@@Base+0x3b9c>
   16570:	ldrh	r3, [fp, #-6]
   16574:	ldr	r2, [fp, #-16]
   16578:	add	r3, r2, r3
   1657c:	mov	r0, r3
   16580:	bl	12df0 <_start@@Base+0x400>
   16584:	mov	r3, r0
   16588:	b	16590 <_start@@Base+0x3ba0>
   1658c:	mov	r3, #150	; 0x96
   16590:	mov	r0, r3
   16594:	sub	sp, fp, #4
   16598:	ldr	fp, [sp]
   1659c:	add	sp, sp, #4
   165a0:	pop	{pc}		; (ldr pc, [sp], #4)
   165a4:			; <UNDEFINED> instruction: 0x0001f6b4
   165a8:	andeq	ip, r1, r0, lsl r1
   165ac:	andeq	ip, r1, ip, lsr #3
   165b0:	str	fp, [sp, #-8]!
   165b4:	str	lr, [sp, #4]
   165b8:	add	fp, sp, #4
   165bc:	sub	sp, sp, #16
   165c0:	str	r0, [fp, #-16]
   165c4:	mov	r3, #0
   165c8:	strh	r3, [fp, #-6]
   165cc:	ldr	r3, [fp, #-16]
   165d0:	cmp	r3, #0
   165d4:	bne	165f8 <_start@@Base+0x3c08>
   165d8:	ldr	r3, [pc, #172]	; 1668c <_start@@Base+0x3c9c>
   165dc:	add	r3, pc, r3
   165e0:	movw	r2, #698	; 0x2ba
   165e4:	ldr	r1, [pc, #164]	; 16690 <_start@@Base+0x3ca0>
   165e8:	add	r1, pc, r1
   165ec:	ldr	r0, [pc, #160]	; 16694 <_start@@Base+0x3ca4>
   165f0:	add	r0, pc, r0
   165f4:	bl	129e0 <__assert_fail@plt>
   165f8:	mov	r3, #1
   165fc:	strh	r3, [fp, #-8]
   16600:	ldr	r0, [fp, #-16]
   16604:	bl	132c4 <_start@@Base+0x8d4>
   16608:	mov	r3, r0
   1660c:	rsb	r3, r3, #0
   16610:	ldr	r2, [fp, #-16]
   16614:	add	r3, r2, r3
   16618:	str	r3, [fp, #-12]
   1661c:	ldr	r0, [fp, #-12]
   16620:	bl	13328 <_start@@Base+0x938>
   16624:	mov	r3, r0
   16628:	mov	r2, r3
   1662c:	ldrh	r3, [fp, #-8]
   16630:	add	r3, r3, #3
   16634:	lsl	r3, r3, #1
   16638:	cmp	r2, r3
   1663c:	bcc	16664 <_start@@Base+0x3c74>
   16640:	ldrh	r3, [fp, #-8]
   16644:	add	r3, r3, #2
   16648:	lsl	r3, r3, #1
   1664c:	ldr	r2, [fp, #-12]
   16650:	add	r3, r2, r3
   16654:	mov	r0, r3
   16658:	bl	13328 <_start@@Base+0x938>
   1665c:	mov	r3, r0
   16660:	strh	r3, [fp, #-6]
   16664:	ldrh	r3, [fp, #-6]
   16668:	cmp	r3, #0
   1666c:	movne	r3, #1
   16670:	moveq	r3, #0
   16674:	uxtb	r3, r3
   16678:	mov	r0, r3
   1667c:	sub	sp, fp, #4
   16680:	ldr	fp, [sp]
   16684:	add	sp, sp, #4
   16688:	pop	{pc}		; (ldr pc, [sp], #4)
   1668c:	ldrdeq	pc, [r1], -r0
   16690:	andeq	ip, r1, r0, lsl r0
   16694:	andeq	ip, r1, ip, lsr #1
   16698:	str	fp, [sp, #-8]!
   1669c:	str	lr, [sp, #4]
   166a0:	add	fp, sp, #4
   166a4:	sub	sp, sp, #24
   166a8:	str	r0, [fp, #-24]	; 0xffffffe8
   166ac:	mov	r3, #0
   166b0:	strh	r3, [fp, #-6]
   166b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166b8:	cmp	r3, #0
   166bc:	bne	166e0 <_start@@Base+0x3cf0>
   166c0:	ldr	r3, [pc, #240]	; 167b8 <_start@@Base+0x3dc8>
   166c4:	add	r3, pc, r3
   166c8:	movw	r2, #699	; 0x2bb
   166cc:	ldr	r1, [pc, #232]	; 167bc <_start@@Base+0x3dcc>
   166d0:	add	r1, pc, r1
   166d4:	ldr	r0, [pc, #228]	; 167c0 <_start@@Base+0x3dd0>
   166d8:	add	r0, pc, r0
   166dc:	bl	129e0 <__assert_fail@plt>
   166e0:	mov	r3, #3
   166e4:	strh	r3, [fp, #-8]
   166e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   166ec:	bl	132c4 <_start@@Base+0x8d4>
   166f0:	mov	r3, r0
   166f4:	rsb	r3, r3, #0
   166f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   166fc:	add	r3, r2, r3
   16700:	str	r3, [fp, #-12]
   16704:	ldr	r0, [fp, #-12]
   16708:	bl	13328 <_start@@Base+0x938>
   1670c:	mov	r3, r0
   16710:	mov	r2, r3
   16714:	ldrh	r3, [fp, #-8]
   16718:	add	r3, r3, #3
   1671c:	lsl	r3, r3, #1
   16720:	cmp	r2, r3
   16724:	bcc	1674c <_start@@Base+0x3d5c>
   16728:	ldrh	r3, [fp, #-8]
   1672c:	add	r3, r3, #2
   16730:	lsl	r3, r3, #1
   16734:	ldr	r2, [fp, #-12]
   16738:	add	r3, r2, r3
   1673c:	mov	r0, r3
   16740:	bl	13328 <_start@@Base+0x938>
   16744:	mov	r3, r0
   16748:	strh	r3, [fp, #-6]
   1674c:	ldrh	r3, [fp, #-6]
   16750:	cmp	r3, #0
   16754:	beq	16784 <_start@@Base+0x3d94>
   16758:	ldrh	r3, [fp, #-6]
   1675c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16760:	add	r3, r2, r3
   16764:	str	r3, [fp, #-16]
   16768:	ldr	r0, [fp, #-16]
   1676c:	bl	13224 <_start@@Base+0x834>
   16770:	mov	r3, r0
   16774:	add	r3, r3, #4
   16778:	ldr	r2, [fp, #-16]
   1677c:	add	r3, r2, r3
   16780:	b	167a4 <_start@@Base+0x3db4>
   16784:	ldr	r3, [pc, #56]	; 167c4 <_start@@Base+0x3dd4>
   16788:	add	r3, pc, r3
   1678c:	movw	r2, #699	; 0x2bb
   16790:	ldr	r1, [pc, #48]	; 167c8 <_start@@Base+0x3dd8>
   16794:	add	r1, pc, r1
   16798:	ldr	r0, [pc, #44]	; 167cc <_start@@Base+0x3ddc>
   1679c:	add	r0, pc, r0
   167a0:	bl	129e0 <__assert_fail@plt>
   167a4:	mov	r0, r3
   167a8:	sub	sp, fp, #4
   167ac:	ldr	fp, [sp]
   167b0:	add	sp, sp, #4
   167b4:	pop	{pc}		; (ldr pc, [sp], #4)
   167b8:			; <UNDEFINED> instruction: 0x0001f6b4
   167bc:	andeq	fp, r1, r8, lsr #30
   167c0:	andeq	fp, r1, r4, asr #31
   167c4:	strdeq	pc, [r1], -r0
   167c8:	andeq	fp, r1, r4, ror #28
   167cc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   167d0:	str	fp, [sp, #-8]!
   167d4:	str	lr, [sp, #4]
   167d8:	add	fp, sp, #4
   167dc:	sub	sp, sp, #16
   167e0:	str	r0, [fp, #-16]
   167e4:	str	r1, [fp, #-20]	; 0xffffffec
   167e8:	mov	r3, #0
   167ec:	str	r3, [fp, #-8]
   167f0:	b	16840 <_start@@Base+0x3e50>
   167f4:	ldr	r1, [fp, #-8]
   167f8:	ldr	r0, [fp, #-16]
   167fc:	bl	15c58 <_start@@Base+0x3268>
   16800:	mov	r3, r0
   16804:	mov	r0, r3
   16808:	bl	16698 <_start@@Base+0x3ca8>
   1680c:	str	r0, [fp, #-12]
   16810:	mov	r2, #0
   16814:	ldr	r1, [fp, #-20]	; 0xffffffec
   16818:	ldr	r0, [fp, #-12]
   1681c:	bl	13964 <_start@@Base+0xf74>
   16820:	mov	r3, r0
   16824:	cmp	r3, #0
   16828:	bne	16834 <_start@@Base+0x3e44>
   1682c:	ldr	r3, [fp, #-8]
   16830:	b	16864 <_start@@Base+0x3e74>
   16834:	ldr	r3, [fp, #-8]
   16838:	add	r3, r3, #1
   1683c:	str	r3, [fp, #-8]
   16840:	ldr	r0, [fp, #-16]
   16844:	bl	15c08 <_start@@Base+0x3218>
   16848:	mov	r2, r0
   1684c:	ldr	r3, [fp, #-8]
   16850:	cmp	r3, r2
   16854:	bcc	167f4 <_start@@Base+0x3e04>
   16858:	ldr	r3, [pc, #24]	; 16878 <_start@@Base+0x3e88>
   1685c:	add	r3, pc, r3
   16860:	ldr	r3, [r3]
   16864:	mov	r0, r3
   16868:	sub	sp, fp, #4
   1686c:	ldr	fp, [sp]
   16870:	add	sp, sp, #4
   16874:	pop	{pc}		; (ldr pc, [sp], #4)
   16878:	andeq	r1, r3, ip, lsl r8
   1687c:	str	fp, [sp, #-8]!
   16880:	str	lr, [sp, #4]
   16884:	add	fp, sp, #4
   16888:	sub	sp, sp, #24
   1688c:	str	r0, [fp, #-16]
   16890:	str	r1, [fp, #-20]	; 0xffffffec
   16894:	str	r2, [fp, #-24]	; 0xffffffe8
   16898:	mov	r3, #0
   1689c:	str	r3, [fp, #-8]
   168a0:	b	168f4 <_start@@Base+0x3f04>
   168a4:	ldr	r1, [fp, #-8]
   168a8:	ldr	r0, [fp, #-16]
   168ac:	bl	15c58 <_start@@Base+0x3268>
   168b0:	mov	r3, r0
   168b4:	mov	r0, r3
   168b8:	bl	16698 <_start@@Base+0x3ca8>
   168bc:	str	r0, [fp, #-12]
   168c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168c4:	mov	r2, r3
   168c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   168cc:	ldr	r0, [fp, #-12]
   168d0:	bl	138bc <_start@@Base+0xecc>
   168d4:	mov	r3, r0
   168d8:	cmp	r3, #0
   168dc:	bne	168e8 <_start@@Base+0x3ef8>
   168e0:	ldr	r3, [fp, #-8]
   168e4:	b	16918 <_start@@Base+0x3f28>
   168e8:	ldr	r3, [fp, #-8]
   168ec:	add	r3, r3, #1
   168f0:	str	r3, [fp, #-8]
   168f4:	ldr	r0, [fp, #-16]
   168f8:	bl	15c08 <_start@@Base+0x3218>
   168fc:	mov	r2, r0
   16900:	ldr	r3, [fp, #-8]
   16904:	cmp	r3, r2
   16908:	bcc	168a4 <_start@@Base+0x3eb4>
   1690c:	ldr	r3, [pc, #24]	; 1692c <_start@@Base+0x3f3c>
   16910:	add	r3, pc, r3
   16914:	ldr	r3, [r3]
   16918:	mov	r0, r3
   1691c:	sub	sp, fp, #4
   16920:	ldr	fp, [sp]
   16924:	add	sp, sp, #4
   16928:	pop	{pc}		; (ldr pc, [sp], #4)
   1692c:	andeq	r1, r3, r8, ror #14
   16930:	str	fp, [sp, #-8]!
   16934:	str	lr, [sp, #4]
   16938:	add	fp, sp, #4
   1693c:	sub	sp, sp, #24
   16940:	str	r0, [fp, #-16]
   16944:	str	r1, [fp, #-20]	; 0xffffffec
   16948:	str	r2, [fp, #-24]	; 0xffffffe8
   1694c:	str	r3, [fp, #-28]	; 0xffffffe4
   16950:	ldr	r3, [fp, #-20]	; 0xffffffec
   16954:	str	r3, [fp, #-8]
   16958:	b	169a8 <_start@@Base+0x3fb8>
   1695c:	ldr	r1, [fp, #-8]
   16960:	ldr	r0, [fp, #-16]
   16964:	bl	15c58 <_start@@Base+0x3268>
   16968:	mov	r3, r0
   1696c:	mov	r0, r3
   16970:	bl	16698 <_start@@Base+0x3ca8>
   16974:	str	r0, [fp, #-12]
   16978:	mov	r2, #0
   1697c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16980:	ldr	r0, [fp, #-12]
   16984:	bl	13964 <_start@@Base+0xf74>
   16988:	mov	r3, r0
   1698c:	cmp	r3, #0
   16990:	bne	1699c <_start@@Base+0x3fac>
   16994:	ldr	r3, [fp, #-8]
   16998:	b	169ec <_start@@Base+0x3ffc>
   1699c:	ldr	r3, [fp, #-8]
   169a0:	add	r3, r3, #1
   169a4:	str	r3, [fp, #-8]
   169a8:	ldr	r0, [fp, #-16]
   169ac:	bl	15c08 <_start@@Base+0x3218>
   169b0:	mov	r2, r0
   169b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   169b8:	cmp	r3, r2
   169bc:	bcc	169d0 <_start@@Base+0x3fe0>
   169c0:	ldr	r0, [fp, #-16]
   169c4:	bl	15c08 <_start@@Base+0x3218>
   169c8:	mov	r3, r0
   169cc:	b	169d4 <_start@@Base+0x3fe4>
   169d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   169d4:	ldr	r2, [fp, #-8]
   169d8:	cmp	r3, r2
   169dc:	bhi	1695c <_start@@Base+0x3f6c>
   169e0:	ldr	r3, [pc, #24]	; 16a00 <_start@@Base+0x4010>
   169e4:	add	r3, pc, r3
   169e8:	ldr	r3, [r3]
   169ec:	mov	r0, r3
   169f0:	sub	sp, fp, #4
   169f4:	ldr	fp, [sp]
   169f8:	add	sp, sp, #4
   169fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16a00:	muleq	r3, r4, r6
   16a04:	str	fp, [sp, #-8]!
   16a08:	str	lr, [sp, #4]
   16a0c:	add	fp, sp, #4
   16a10:	sub	sp, sp, #24
   16a14:	str	r0, [fp, #-16]
   16a18:	str	r1, [fp, #-20]	; 0xffffffec
   16a1c:	str	r2, [fp, #-24]	; 0xffffffe8
   16a20:	str	r3, [fp, #-28]	; 0xffffffe4
   16a24:	ldr	r3, [fp, #-20]	; 0xffffffec
   16a28:	str	r3, [fp, #-8]
   16a2c:	b	16a80 <_start@@Base+0x4090>
   16a30:	ldr	r1, [fp, #-8]
   16a34:	ldr	r0, [fp, #-16]
   16a38:	bl	15c58 <_start@@Base+0x3268>
   16a3c:	mov	r3, r0
   16a40:	mov	r0, r3
   16a44:	bl	16698 <_start@@Base+0x3ca8>
   16a48:	str	r0, [fp, #-12]
   16a4c:	ldr	r3, [fp, #4]
   16a50:	mov	r2, r3
   16a54:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16a58:	ldr	r0, [fp, #-12]
   16a5c:	bl	138bc <_start@@Base+0xecc>
   16a60:	mov	r3, r0
   16a64:	cmp	r3, #0
   16a68:	bne	16a74 <_start@@Base+0x4084>
   16a6c:	ldr	r3, [fp, #-8]
   16a70:	b	16ac4 <_start@@Base+0x40d4>
   16a74:	ldr	r3, [fp, #-8]
   16a78:	add	r3, r3, #1
   16a7c:	str	r3, [fp, #-8]
   16a80:	ldr	r0, [fp, #-16]
   16a84:	bl	15c08 <_start@@Base+0x3218>
   16a88:	mov	r2, r0
   16a8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a90:	cmp	r3, r2
   16a94:	bcc	16aa8 <_start@@Base+0x40b8>
   16a98:	ldr	r0, [fp, #-16]
   16a9c:	bl	15c08 <_start@@Base+0x3218>
   16aa0:	mov	r3, r0
   16aa4:	b	16aac <_start@@Base+0x40bc>
   16aa8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16aac:	ldr	r2, [fp, #-8]
   16ab0:	cmp	r3, r2
   16ab4:	bhi	16a30 <_start@@Base+0x4040>
   16ab8:	ldr	r3, [pc, #24]	; 16ad8 <_start@@Base+0x40e8>
   16abc:	add	r3, pc, r3
   16ac0:	ldr	r3, [r3]
   16ac4:	mov	r0, r3
   16ac8:	sub	sp, fp, #4
   16acc:	ldr	fp, [sp]
   16ad0:	add	sp, sp, #4
   16ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ad8:			; <UNDEFINED> instruction: 0x000315bc
   16adc:	str	fp, [sp, #-8]!
   16ae0:	str	lr, [sp, #4]
   16ae4:	add	fp, sp, #4
   16ae8:	sub	sp, sp, #16
   16aec:	str	r0, [fp, #-16]
   16af0:	str	r1, [fp, #-20]	; 0xffffffec
   16af4:	ldr	r0, [fp, #-16]
   16af8:	bl	15c08 <_start@@Base+0x3218>
   16afc:	str	r0, [fp, #-8]
   16b00:	b	16b44 <_start@@Base+0x4154>
   16b04:	ldr	r1, [fp, #-8]
   16b08:	ldr	r0, [fp, #-16]
   16b0c:	bl	15c58 <_start@@Base+0x3268>
   16b10:	mov	r3, r0
   16b14:	mov	r0, r3
   16b18:	bl	16698 <_start@@Base+0x3ca8>
   16b1c:	str	r0, [fp, #-12]
   16b20:	mov	r2, #0
   16b24:	ldr	r1, [fp, #-20]	; 0xffffffec
   16b28:	ldr	r0, [fp, #-12]
   16b2c:	bl	13964 <_start@@Base+0xf74>
   16b30:	mov	r3, r0
   16b34:	cmp	r3, #0
   16b38:	bne	16b44 <_start@@Base+0x4154>
   16b3c:	ldr	r3, [fp, #-8]
   16b40:	b	16b64 <_start@@Base+0x4174>
   16b44:	ldr	r3, [fp, #-8]
   16b48:	sub	r2, r3, #1
   16b4c:	str	r2, [fp, #-8]
   16b50:	cmp	r3, #0
   16b54:	bne	16b04 <_start@@Base+0x4114>
   16b58:	ldr	r3, [pc, #24]	; 16b78 <_start@@Base+0x4188>
   16b5c:	add	r3, pc, r3
   16b60:	ldr	r3, [r3]
   16b64:	mov	r0, r3
   16b68:	sub	sp, fp, #4
   16b6c:	ldr	fp, [sp]
   16b70:	add	sp, sp, #4
   16b74:	pop	{pc}		; (ldr pc, [sp], #4)
   16b78:	andeq	r1, r3, ip, lsl r5
   16b7c:	str	fp, [sp, #-8]!
   16b80:	str	lr, [sp, #4]
   16b84:	add	fp, sp, #4
   16b88:	sub	sp, sp, #24
   16b8c:	str	r0, [fp, #-16]
   16b90:	str	r1, [fp, #-20]	; 0xffffffec
   16b94:	str	r2, [fp, #-24]	; 0xffffffe8
   16b98:	ldr	r0, [fp, #-16]
   16b9c:	bl	15c08 <_start@@Base+0x3218>
   16ba0:	str	r0, [fp, #-8]
   16ba4:	b	16bec <_start@@Base+0x41fc>
   16ba8:	ldr	r1, [fp, #-8]
   16bac:	ldr	r0, [fp, #-16]
   16bb0:	bl	15c58 <_start@@Base+0x3268>
   16bb4:	mov	r3, r0
   16bb8:	mov	r0, r3
   16bbc:	bl	16698 <_start@@Base+0x3ca8>
   16bc0:	str	r0, [fp, #-12]
   16bc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16bc8:	mov	r2, r3
   16bcc:	ldr	r1, [fp, #-20]	; 0xffffffec
   16bd0:	ldr	r0, [fp, #-12]
   16bd4:	bl	138bc <_start@@Base+0xecc>
   16bd8:	mov	r3, r0
   16bdc:	cmp	r3, #0
   16be0:	bne	16bec <_start@@Base+0x41fc>
   16be4:	ldr	r3, [fp, #-8]
   16be8:	b	16c0c <_start@@Base+0x421c>
   16bec:	ldr	r3, [fp, #-8]
   16bf0:	sub	r2, r3, #1
   16bf4:	str	r2, [fp, #-8]
   16bf8:	cmp	r3, #0
   16bfc:	bne	16ba8 <_start@@Base+0x41b8>
   16c00:	ldr	r3, [pc, #24]	; 16c20 <_start@@Base+0x4230>
   16c04:	add	r3, pc, r3
   16c08:	ldr	r3, [r3]
   16c0c:	mov	r0, r3
   16c10:	sub	sp, fp, #4
   16c14:	ldr	fp, [sp]
   16c18:	add	sp, sp, #4
   16c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c20:	andeq	r1, r3, r4, ror r4
   16c24:	str	fp, [sp, #-8]!
   16c28:	str	lr, [sp, #4]
   16c2c:	add	fp, sp, #4
   16c30:	sub	sp, sp, #24
   16c34:	str	r0, [fp, #-16]
   16c38:	str	r1, [fp, #-20]	; 0xffffffec
   16c3c:	str	r2, [fp, #-24]	; 0xffffffe8
   16c40:	str	r3, [fp, #-28]	; 0xffffffe4
   16c44:	ldr	r0, [fp, #-16]
   16c48:	bl	15c08 <_start@@Base+0x3218>
   16c4c:	mov	r2, r0
   16c50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c54:	cmp	r3, r2
   16c58:	bcc	16c6c <_start@@Base+0x427c>
   16c5c:	ldr	r0, [fp, #-16]
   16c60:	bl	15c08 <_start@@Base+0x3218>
   16c64:	mov	r3, r0
   16c68:	b	16c70 <_start@@Base+0x4280>
   16c6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c70:	str	r3, [fp, #-8]
   16c74:	b	16cb8 <_start@@Base+0x42c8>
   16c78:	ldr	r1, [fp, #-8]
   16c7c:	ldr	r0, [fp, #-16]
   16c80:	bl	15c58 <_start@@Base+0x3268>
   16c84:	mov	r3, r0
   16c88:	mov	r0, r3
   16c8c:	bl	16698 <_start@@Base+0x3ca8>
   16c90:	str	r0, [fp, #-12]
   16c94:	mov	r2, #0
   16c98:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16c9c:	ldr	r0, [fp, #-12]
   16ca0:	bl	13964 <_start@@Base+0xf74>
   16ca4:	mov	r3, r0
   16ca8:	cmp	r3, #0
   16cac:	bne	16cb8 <_start@@Base+0x42c8>
   16cb0:	ldr	r3, [fp, #-8]
   16cb4:	b	16cdc <_start@@Base+0x42ec>
   16cb8:	ldr	r3, [fp, #-8]
   16cbc:	sub	r2, r3, #1
   16cc0:	str	r2, [fp, #-8]
   16cc4:	ldr	r2, [fp, #-20]	; 0xffffffec
   16cc8:	cmp	r2, r3
   16ccc:	bcc	16c78 <_start@@Base+0x4288>
   16cd0:	ldr	r3, [pc, #24]	; 16cf0 <_start@@Base+0x4300>
   16cd4:	add	r3, pc, r3
   16cd8:	ldr	r3, [r3]
   16cdc:	mov	r0, r3
   16ce0:	sub	sp, fp, #4
   16ce4:	ldr	fp, [sp]
   16ce8:	add	sp, sp, #4
   16cec:	pop	{pc}		; (ldr pc, [sp], #4)
   16cf0:	andeq	r1, r3, r4, lsr #7
   16cf4:	str	fp, [sp, #-8]!
   16cf8:	str	lr, [sp, #4]
   16cfc:	add	fp, sp, #4
   16d00:	sub	sp, sp, #24
   16d04:	str	r0, [fp, #-16]
   16d08:	str	r1, [fp, #-20]	; 0xffffffec
   16d0c:	str	r2, [fp, #-24]	; 0xffffffe8
   16d10:	str	r3, [fp, #-28]	; 0xffffffe4
   16d14:	ldr	r0, [fp, #-16]
   16d18:	bl	15c08 <_start@@Base+0x3218>
   16d1c:	mov	r2, r0
   16d20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d24:	cmp	r3, r2
   16d28:	bcc	16d3c <_start@@Base+0x434c>
   16d2c:	ldr	r0, [fp, #-16]
   16d30:	bl	15c08 <_start@@Base+0x3218>
   16d34:	mov	r3, r0
   16d38:	b	16d40 <_start@@Base+0x4350>
   16d3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d40:	str	r3, [fp, #-8]
   16d44:	b	16d8c <_start@@Base+0x439c>
   16d48:	ldr	r1, [fp, #-8]
   16d4c:	ldr	r0, [fp, #-16]
   16d50:	bl	15c58 <_start@@Base+0x3268>
   16d54:	mov	r3, r0
   16d58:	mov	r0, r3
   16d5c:	bl	16698 <_start@@Base+0x3ca8>
   16d60:	str	r0, [fp, #-12]
   16d64:	ldr	r3, [fp, #4]
   16d68:	mov	r2, r3
   16d6c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16d70:	ldr	r0, [fp, #-12]
   16d74:	bl	138bc <_start@@Base+0xecc>
   16d78:	mov	r3, r0
   16d7c:	cmp	r3, #0
   16d80:	bne	16d8c <_start@@Base+0x439c>
   16d84:	ldr	r3, [fp, #-8]
   16d88:	b	16db0 <_start@@Base+0x43c0>
   16d8c:	ldr	r3, [fp, #-8]
   16d90:	sub	r2, r3, #1
   16d94:	str	r2, [fp, #-8]
   16d98:	ldr	r2, [fp, #-20]	; 0xffffffec
   16d9c:	cmp	r2, r3
   16da0:	bcc	16d48 <_start@@Base+0x4358>
   16da4:	ldr	r3, [pc, #24]	; 16dc4 <_start@@Base+0x43d4>
   16da8:	add	r3, pc, r3
   16dac:	ldr	r3, [r3]
   16db0:	mov	r0, r3
   16db4:	sub	sp, fp, #4
   16db8:	ldr	fp, [sp]
   16dbc:	add	sp, sp, #4
   16dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   16dc4:	ldrdeq	r1, [r3], -r0
   16dc8:	str	fp, [sp, #-8]!
   16dcc:	str	lr, [sp, #4]
   16dd0:	add	fp, sp, #4
   16dd4:	sub	sp, sp, #24
   16dd8:	str	r0, [fp, #-24]	; 0xffffffe8
   16ddc:	str	r1, [fp, #-28]	; 0xffffffe4
   16de0:	mov	r3, #0
   16de4:	str	r3, [fp, #-8]
   16de8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16dec:	bl	15c08 <_start@@Base+0x3218>
   16df0:	str	r0, [fp, #-12]
   16df4:	ldr	r3, [fp, #-12]
   16df8:	cmp	r3, #0
   16dfc:	bne	16e10 <_start@@Base+0x4420>
   16e00:	ldr	r3, [pc, #260]	; 16f0c <_start@@Base+0x451c>
   16e04:	add	r3, pc, r3
   16e08:	ldr	r3, [r3]
   16e0c:	b	16ef8 <_start@@Base+0x4508>
   16e10:	ldr	r3, [fp, #-12]
   16e14:	sub	r3, r3, #1
   16e18:	str	r3, [fp, #-12]
   16e1c:	b	16e8c <_start@@Base+0x449c>
   16e20:	ldr	r2, [fp, #-12]
   16e24:	ldr	r3, [fp, #-8]
   16e28:	sub	r3, r2, r3
   16e2c:	lsr	r3, r3, #1
   16e30:	ldr	r2, [fp, #-8]
   16e34:	add	r3, r2, r3
   16e38:	str	r3, [fp, #-16]
   16e3c:	ldr	r1, [fp, #-16]
   16e40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16e44:	bl	15c58 <_start@@Base+0x3268>
   16e48:	mov	r3, r0
   16e4c:	mov	r0, r3
   16e50:	bl	16698 <_start@@Base+0x3ca8>
   16e54:	str	r0, [fp, #-20]	; 0xffffffec
   16e58:	mov	r2, #0
   16e5c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16e60:	ldr	r0, [fp, #-20]	; 0xffffffec
   16e64:	bl	13964 <_start@@Base+0xf74>
   16e68:	mov	r3, r0
   16e6c:	cmp	r3, #0
   16e70:	bge	16e84 <_start@@Base+0x4494>
   16e74:	ldr	r3, [fp, #-16]
   16e78:	add	r3, r3, #1
   16e7c:	str	r3, [fp, #-8]
   16e80:	b	16e8c <_start@@Base+0x449c>
   16e84:	ldr	r3, [fp, #-16]
   16e88:	str	r3, [fp, #-12]
   16e8c:	ldr	r2, [fp, #-8]
   16e90:	ldr	r3, [fp, #-12]
   16e94:	cmp	r2, r3
   16e98:	bcc	16e20 <_start@@Base+0x4430>
   16e9c:	ldr	r2, [fp, #-8]
   16ea0:	ldr	r3, [fp, #-12]
   16ea4:	cmp	r2, r3
   16ea8:	bne	16eec <_start@@Base+0x44fc>
   16eac:	ldr	r1, [fp, #-8]
   16eb0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16eb4:	bl	15c58 <_start@@Base+0x3268>
   16eb8:	mov	r3, r0
   16ebc:	mov	r0, r3
   16ec0:	bl	16698 <_start@@Base+0x3ca8>
   16ec4:	str	r0, [fp, #-20]	; 0xffffffec
   16ec8:	mov	r2, #0
   16ecc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16ed0:	ldr	r0, [fp, #-20]	; 0xffffffec
   16ed4:	bl	13964 <_start@@Base+0xf74>
   16ed8:	mov	r3, r0
   16edc:	cmp	r3, #0
   16ee0:	bne	16eec <_start@@Base+0x44fc>
   16ee4:	ldr	r3, [fp, #-8]
   16ee8:	b	16ef8 <_start@@Base+0x4508>
   16eec:	ldr	r3, [pc, #28]	; 16f10 <_start@@Base+0x4520>
   16ef0:	add	r3, pc, r3
   16ef4:	ldr	r3, [r3]
   16ef8:	mov	r0, r3
   16efc:	sub	sp, fp, #4
   16f00:	ldr	fp, [sp]
   16f04:	add	sp, sp, #4
   16f08:	pop	{pc}		; (ldr pc, [sp], #4)
   16f0c:	andeq	r1, r3, r4, ror r2
   16f10:	andeq	r1, r3, r8, lsl #3
   16f14:	str	fp, [sp, #-8]!
   16f18:	str	lr, [sp, #4]
   16f1c:	add	fp, sp, #4
   16f20:	sub	sp, sp, #32
   16f24:	str	r0, [fp, #-24]	; 0xffffffe8
   16f28:	str	r1, [fp, #-28]	; 0xffffffe4
   16f2c:	str	r2, [fp, #-32]	; 0xffffffe0
   16f30:	mov	r3, #0
   16f34:	str	r3, [fp, #-8]
   16f38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16f3c:	bl	15c08 <_start@@Base+0x3218>
   16f40:	str	r0, [fp, #-12]
   16f44:	ldr	r3, [fp, #-12]
   16f48:	cmp	r3, #0
   16f4c:	bne	16f60 <_start@@Base+0x4570>
   16f50:	ldr	r3, [pc, #268]	; 17064 <_start@@Base+0x4674>
   16f54:	add	r3, pc, r3
   16f58:	ldr	r3, [r3]
   16f5c:	b	17050 <_start@@Base+0x4660>
   16f60:	ldr	r3, [fp, #-12]
   16f64:	sub	r3, r3, #1
   16f68:	str	r3, [fp, #-12]
   16f6c:	b	16fe0 <_start@@Base+0x45f0>
   16f70:	ldr	r2, [fp, #-12]
   16f74:	ldr	r3, [fp, #-8]
   16f78:	sub	r3, r2, r3
   16f7c:	lsr	r3, r3, #1
   16f80:	ldr	r2, [fp, #-8]
   16f84:	add	r3, r2, r3
   16f88:	str	r3, [fp, #-16]
   16f8c:	ldr	r1, [fp, #-16]
   16f90:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16f94:	bl	15c58 <_start@@Base+0x3268>
   16f98:	mov	r3, r0
   16f9c:	mov	r0, r3
   16fa0:	bl	16698 <_start@@Base+0x3ca8>
   16fa4:	str	r0, [fp, #-20]	; 0xffffffec
   16fa8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16fac:	mov	r2, r3
   16fb0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16fb4:	ldr	r0, [fp, #-20]	; 0xffffffec
   16fb8:	bl	138bc <_start@@Base+0xecc>
   16fbc:	mov	r3, r0
   16fc0:	cmp	r3, #0
   16fc4:	bge	16fd8 <_start@@Base+0x45e8>
   16fc8:	ldr	r3, [fp, #-16]
   16fcc:	add	r3, r3, #1
   16fd0:	str	r3, [fp, #-8]
   16fd4:	b	16fe0 <_start@@Base+0x45f0>
   16fd8:	ldr	r3, [fp, #-16]
   16fdc:	str	r3, [fp, #-12]
   16fe0:	ldr	r2, [fp, #-8]
   16fe4:	ldr	r3, [fp, #-12]
   16fe8:	cmp	r2, r3
   16fec:	bcc	16f70 <_start@@Base+0x4580>
   16ff0:	ldr	r2, [fp, #-8]
   16ff4:	ldr	r3, [fp, #-12]
   16ff8:	cmp	r2, r3
   16ffc:	bne	17044 <_start@@Base+0x4654>
   17000:	ldr	r1, [fp, #-8]
   17004:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17008:	bl	15c58 <_start@@Base+0x3268>
   1700c:	mov	r3, r0
   17010:	mov	r0, r3
   17014:	bl	16698 <_start@@Base+0x3ca8>
   17018:	str	r0, [fp, #-20]	; 0xffffffec
   1701c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17020:	mov	r2, r3
   17024:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17028:	ldr	r0, [fp, #-20]	; 0xffffffec
   1702c:	bl	138bc <_start@@Base+0xecc>
   17030:	mov	r3, r0
   17034:	cmp	r3, #0
   17038:	bne	17044 <_start@@Base+0x4654>
   1703c:	ldr	r3, [fp, #-8]
   17040:	b	17050 <_start@@Base+0x4660>
   17044:	ldr	r3, [pc, #28]	; 17068 <_start@@Base+0x4678>
   17048:	add	r3, pc, r3
   1704c:	ldr	r3, [r3]
   17050:	mov	r0, r3
   17054:	sub	sp, fp, #4
   17058:	ldr	fp, [sp]
   1705c:	add	sp, sp, #4
   17060:	pop	{pc}		; (ldr pc, [sp], #4)
   17064:	andeq	r1, r3, r4, lsr #2
   17068:	andeq	r1, r3, r0, lsr r0
   1706c:	str	fp, [sp, #-8]!
   17070:	str	lr, [sp, #4]
   17074:	add	fp, sp, #4
   17078:	sub	sp, sp, #48	; 0x30
   1707c:	str	r0, [fp, #-40]	; 0xffffffd8
   17080:	str	r1, [fp, #-44]	; 0xffffffd4
   17084:	str	r2, [fp, #-48]	; 0xffffffd0
   17088:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1708c:	str	r3, [fp, #-12]
   17090:	b	17228 <_start@@Base+0x4838>
   17094:	ldr	r3, [fp, #-12]
   17098:	lsl	r3, r3, #1
   1709c:	str	r3, [fp, #-8]
   170a0:	ldr	r2, [fp, #-8]
   170a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   170a8:	cmp	r2, r3
   170ac:	bcs	17124 <_start@@Base+0x4734>
   170b0:	ldr	r1, [fp, #-8]
   170b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   170b8:	bl	15c58 <_start@@Base+0x3268>
   170bc:	mov	r3, r0
   170c0:	mov	r0, r3
   170c4:	bl	16698 <_start@@Base+0x3ca8>
   170c8:	str	r0, [fp, #-16]
   170cc:	ldr	r3, [fp, #-8]
   170d0:	add	r3, r3, #1
   170d4:	mov	r1, r3
   170d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   170dc:	bl	15c58 <_start@@Base+0x3268>
   170e0:	mov	r3, r0
   170e4:	mov	r0, r3
   170e8:	bl	16698 <_start@@Base+0x3ca8>
   170ec:	str	r0, [fp, #-20]	; 0xffffffec
   170f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   170f4:	bl	135c4 <_start@@Base+0xbd4>
   170f8:	mov	r3, r0
   170fc:	mov	r2, r3
   17100:	ldr	r1, [fp, #-20]	; 0xffffffec
   17104:	ldr	r0, [fp, #-16]
   17108:	bl	138bc <_start@@Base+0xecc>
   1710c:	mov	r3, r0
   17110:	cmp	r3, #0
   17114:	bge	17124 <_start@@Base+0x4734>
   17118:	ldr	r3, [fp, #-8]
   1711c:	add	r3, r3, #1
   17120:	str	r3, [fp, #-8]
   17124:	ldr	r1, [fp, #-12]
   17128:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1712c:	bl	15c58 <_start@@Base+0x3268>
   17130:	mov	r3, r0
   17134:	mov	r0, r3
   17138:	bl	16698 <_start@@Base+0x3ca8>
   1713c:	str	r0, [fp, #-24]	; 0xffffffe8
   17140:	ldr	r1, [fp, #-8]
   17144:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17148:	bl	15c58 <_start@@Base+0x3268>
   1714c:	mov	r3, r0
   17150:	mov	r0, r3
   17154:	bl	16698 <_start@@Base+0x3ca8>
   17158:	str	r0, [fp, #-16]
   1715c:	ldr	r0, [fp, #-16]
   17160:	bl	135c4 <_start@@Base+0xbd4>
   17164:	mov	r3, r0
   17168:	mov	r2, r3
   1716c:	ldr	r1, [fp, #-16]
   17170:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17174:	bl	138bc <_start@@Base+0xecc>
   17178:	mov	r3, r0
   1717c:	cmp	r3, #0
   17180:	bge	17240 <_start@@Base+0x4850>
   17184:	ldr	r2, [fp, #-12]
   17188:	ldr	r3, [fp, #-8]
   1718c:	sub	r3, r2, r3
   17190:	lsl	r3, r3, #2
   17194:	str	r3, [fp, #-28]	; 0xffffffe4
   17198:	ldr	r3, [fp, #-8]
   1719c:	lsl	r3, r3, #2
   171a0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   171a4:	add	r3, r2, r3
   171a8:	mov	r0, r3
   171ac:	bl	13224 <_start@@Base+0x834>
   171b0:	mov	r2, r0
   171b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   171b8:	sub	r3, r2, r3
   171bc:	str	r3, [fp, #-32]	; 0xffffffe0
   171c0:	ldr	r3, [fp, #-12]
   171c4:	lsl	r3, r3, #2
   171c8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   171cc:	add	r3, r2, r3
   171d0:	mov	r0, r3
   171d4:	bl	13224 <_start@@Base+0x834>
   171d8:	mov	r2, r0
   171dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   171e0:	add	r3, r3, r2
   171e4:	str	r3, [fp, #-36]	; 0xffffffdc
   171e8:	ldr	r3, [fp, #-12]
   171ec:	lsl	r3, r3, #2
   171f0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   171f4:	add	r3, r2, r3
   171f8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   171fc:	mov	r0, r3
   17200:	bl	13260 <_start@@Base+0x870>
   17204:	ldr	r3, [fp, #-8]
   17208:	lsl	r3, r3, #2
   1720c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   17210:	add	r3, r2, r3
   17214:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17218:	mov	r0, r3
   1721c:	bl	13260 <_start@@Base+0x870>
   17220:	ldr	r3, [fp, #-8]
   17224:	str	r3, [fp, #-12]
   17228:	ldr	r3, [fp, #-12]
   1722c:	lsl	r3, r3, #1
   17230:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17234:	cmp	r2, r3
   17238:	bcs	17094 <_start@@Base+0x46a4>
   1723c:	b	17244 <_start@@Base+0x4854>
   17240:	nop	{0}
   17244:	sub	sp, fp, #4
   17248:	ldr	fp, [sp]
   1724c:	add	sp, sp, #4
   17250:	pop	{pc}		; (ldr pc, [sp], #4)
   17254:	str	fp, [sp, #-8]!
   17258:	str	lr, [sp, #4]
   1725c:	add	fp, sp, #4
   17260:	sub	sp, sp, #32
   17264:	str	r0, [fp, #-32]	; 0xffffffe0
   17268:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1726c:	bl	15c08 <_start@@Base+0x3218>
   17270:	str	r0, [fp, #-16]
   17274:	ldr	r3, [fp, #-16]
   17278:	cmp	r3, #0
   1727c:	beq	17364 <_start@@Base+0x4974>
   17280:	ldr	r3, [fp, #-16]
   17284:	sub	r3, r3, #1
   17288:	str	r3, [fp, #-12]
   1728c:	ldr	r3, [fp, #-16]
   17290:	lsr	r3, r3, #1
   17294:	str	r3, [fp, #-8]
   17298:	ldr	r2, [fp, #-12]
   1729c:	ldr	r1, [fp, #-8]
   172a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   172a4:	bl	1706c <_start@@Base+0x467c>
   172a8:	ldr	r3, [fp, #-8]
   172ac:	sub	r2, r3, #1
   172b0:	str	r2, [fp, #-8]
   172b4:	cmp	r3, #0
   172b8:	bne	17298 <_start@@Base+0x48a8>
   172bc:	b	17354 <_start@@Base+0x4964>
   172c0:	ldr	r3, [fp, #-12]
   172c4:	lsl	r3, r3, #2
   172c8:	rsb	r3, r3, #0
   172cc:	str	r3, [fp, #-20]	; 0xffffffec
   172d0:	ldr	r3, [fp, #-12]
   172d4:	lsl	r3, r3, #2
   172d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   172dc:	add	r3, r2, r3
   172e0:	mov	r0, r3
   172e4:	bl	13224 <_start@@Base+0x834>
   172e8:	mov	r2, r0
   172ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   172f0:	sub	r3, r2, r3
   172f4:	str	r3, [fp, #-24]	; 0xffffffe8
   172f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   172fc:	bl	13224 <_start@@Base+0x834>
   17300:	mov	r2, r0
   17304:	ldr	r3, [fp, #-20]	; 0xffffffec
   17308:	add	r3, r3, r2
   1730c:	str	r3, [fp, #-28]	; 0xffffffe4
   17310:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17314:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17318:	bl	13260 <_start@@Base+0x870>
   1731c:	ldr	r3, [fp, #-12]
   17320:	lsl	r3, r3, #2
   17324:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17328:	add	r3, r2, r3
   1732c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17330:	mov	r0, r3
   17334:	bl	13260 <_start@@Base+0x870>
   17338:	ldr	r3, [fp, #-12]
   1733c:	sub	r3, r3, #1
   17340:	str	r3, [fp, #-12]
   17344:	ldr	r2, [fp, #-12]
   17348:	mov	r1, #0
   1734c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17350:	bl	1706c <_start@@Base+0x467c>
   17354:	ldr	r3, [fp, #-12]
   17358:	cmp	r3, #0
   1735c:	bne	172c0 <_start@@Base+0x48d0>
   17360:	b	17368 <_start@@Base+0x4978>
   17364:	nop	{0}
   17368:	sub	sp, fp, #4
   1736c:	ldr	fp, [sp]
   17370:	add	sp, sp, #4
   17374:	pop	{pc}		; (ldr pc, [sp], #4)
   17378:	str	fp, [sp, #-8]!
   1737c:	str	lr, [sp, #4]
   17380:	add	fp, sp, #4
   17384:	sub	sp, sp, #8
   17388:	str	r0, [fp, #-8]
   1738c:	ldr	r0, [fp, #-8]
   17390:	bl	17254 <_start@@Base+0x4864>
   17394:	nop	{0}
   17398:	sub	sp, fp, #4
   1739c:	ldr	fp, [sp]
   173a0:	add	sp, sp, #4
   173a4:	pop	{pc}		; (ldr pc, [sp], #4)
   173a8:	str	fp, [sp, #-8]!
   173ac:	str	lr, [sp, #4]
   173b0:	add	fp, sp, #4
   173b4:	sub	sp, sp, #8
   173b8:	str	r0, [fp, #-8]
   173bc:	str	r1, [fp, #-12]
   173c0:	ldr	r1, [fp, #-12]
   173c4:	ldr	r0, [fp, #-8]
   173c8:	bl	16dc8 <_start@@Base+0x43d8>
   173cc:	mov	r3, r0
   173d0:	mov	r0, r3
   173d4:	sub	sp, fp, #4
   173d8:	ldr	fp, [sp]
   173dc:	add	sp, sp, #4
   173e0:	pop	{pc}		; (ldr pc, [sp], #4)
   173e4:	str	fp, [sp, #-8]!
   173e8:	str	lr, [sp, #4]
   173ec:	add	fp, sp, #4
   173f0:	sub	sp, sp, #16
   173f4:	str	r0, [fp, #-8]
   173f8:	str	r1, [fp, #-12]
   173fc:	str	r2, [fp, #-16]
   17400:	ldr	r2, [fp, #-16]
   17404:	ldr	r1, [fp, #-12]
   17408:	ldr	r0, [fp, #-8]
   1740c:	bl	16f14 <_start@@Base+0x4524>
   17410:	mov	r3, r0
   17414:	mov	r0, r3
   17418:	sub	sp, fp, #4
   1741c:	ldr	fp, [sp]
   17420:	add	sp, sp, #4
   17424:	pop	{pc}		; (ldr pc, [sp], #4)
   17428:	str	fp, [sp, #-8]!
   1742c:	str	lr, [sp, #4]
   17430:	add	fp, sp, #4
   17434:	sub	sp, sp, #8
   17438:	str	r0, [fp, #-8]
   1743c:	str	r1, [fp, #-12]
   17440:	ldr	r1, [fp, #-12]
   17444:	ldr	r0, [fp, #-8]
   17448:	bl	167d0 <_start@@Base+0x3de0>
   1744c:	mov	r3, r0
   17450:	mov	r0, r3
   17454:	sub	sp, fp, #4
   17458:	ldr	fp, [sp]
   1745c:	add	sp, sp, #4
   17460:	pop	{pc}		; (ldr pc, [sp], #4)
   17464:	str	fp, [sp, #-8]!
   17468:	str	lr, [sp, #4]
   1746c:	add	fp, sp, #4
   17470:	sub	sp, sp, #16
   17474:	str	r0, [fp, #-8]
   17478:	str	r1, [fp, #-12]
   1747c:	str	r2, [fp, #-16]
   17480:	ldr	r2, [fp, #-16]
   17484:	ldr	r1, [fp, #-12]
   17488:	ldr	r0, [fp, #-8]
   1748c:	bl	1687c <_start@@Base+0x3e8c>
   17490:	mov	r3, r0
   17494:	mov	r0, r3
   17498:	sub	sp, fp, #4
   1749c:	ldr	fp, [sp]
   174a0:	add	sp, sp, #4
   174a4:	pop	{pc}		; (ldr pc, [sp], #4)
   174a8:	str	fp, [sp, #-8]!
   174ac:	str	lr, [sp, #4]
   174b0:	add	fp, sp, #4
   174b4:	sub	sp, sp, #16
   174b8:	str	r0, [fp, #-8]
   174bc:	str	r1, [fp, #-12]
   174c0:	str	r2, [fp, #-16]
   174c4:	str	r3, [fp, #-20]	; 0xffffffec
   174c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   174cc:	ldr	r2, [fp, #-16]
   174d0:	ldr	r1, [fp, #-12]
   174d4:	ldr	r0, [fp, #-8]
   174d8:	bl	16930 <_start@@Base+0x3f40>
   174dc:	mov	r3, r0
   174e0:	mov	r0, r3
   174e4:	sub	sp, fp, #4
   174e8:	ldr	fp, [sp]
   174ec:	add	sp, sp, #4
   174f0:	pop	{pc}		; (ldr pc, [sp], #4)
   174f4:	str	fp, [sp, #-8]!
   174f8:	str	lr, [sp, #4]
   174fc:	add	fp, sp, #4
   17500:	sub	sp, sp, #8
   17504:	str	r0, [fp, #-8]
   17508:	str	r1, [fp, #-12]
   1750c:	ldr	r1, [fp, #-12]
   17510:	ldr	r0, [fp, #-8]
   17514:	bl	16adc <_start@@Base+0x40ec>
   17518:	mov	r3, r0
   1751c:	mov	r0, r3
   17520:	sub	sp, fp, #4
   17524:	ldr	fp, [sp]
   17528:	add	sp, sp, #4
   1752c:	pop	{pc}		; (ldr pc, [sp], #4)
   17530:	str	fp, [sp, #-8]!
   17534:	str	lr, [sp, #4]
   17538:	add	fp, sp, #4
   1753c:	sub	sp, sp, #16
   17540:	str	r0, [fp, #-8]
   17544:	str	r1, [fp, #-12]
   17548:	str	r2, [fp, #-16]
   1754c:	ldr	r2, [fp, #-16]
   17550:	ldr	r1, [fp, #-12]
   17554:	ldr	r0, [fp, #-8]
   17558:	bl	16b7c <_start@@Base+0x418c>
   1755c:	mov	r3, r0
   17560:	mov	r0, r3
   17564:	sub	sp, fp, #4
   17568:	ldr	fp, [sp]
   1756c:	add	sp, sp, #4
   17570:	pop	{pc}		; (ldr pc, [sp], #4)
   17574:	str	fp, [sp, #-8]!
   17578:	str	lr, [sp, #4]
   1757c:	add	fp, sp, #4
   17580:	sub	sp, sp, #16
   17584:	str	r0, [fp, #-8]
   17588:	str	r1, [fp, #-12]
   1758c:	str	r2, [fp, #-16]
   17590:	str	r3, [fp, #-20]	; 0xffffffec
   17594:	ldr	r3, [fp, #-20]	; 0xffffffec
   17598:	ldr	r2, [fp, #-16]
   1759c:	ldr	r1, [fp, #-12]
   175a0:	ldr	r0, [fp, #-8]
   175a4:	bl	16c24 <_start@@Base+0x4234>
   175a8:	mov	r3, r0
   175ac:	mov	r0, r3
   175b0:	sub	sp, fp, #4
   175b4:	ldr	fp, [sp]
   175b8:	add	sp, sp, #4
   175bc:	pop	{pc}		; (ldr pc, [sp], #4)
   175c0:	str	fp, [sp, #-8]!
   175c4:	str	lr, [sp, #4]
   175c8:	add	fp, sp, #4
   175cc:	sub	sp, sp, #16
   175d0:	str	r0, [fp, #-16]
   175d4:	mov	r3, #0
   175d8:	strh	r3, [fp, #-6]
   175dc:	ldr	r3, [fp, #-16]
   175e0:	cmp	r3, #0
   175e4:	bne	17608 <_start@@Base+0x4c18>
   175e8:	ldr	r3, [pc, #196]	; 176b4 <_start@@Base+0x4cc4>
   175ec:	add	r3, pc, r3
   175f0:	movw	r2, #705	; 0x2c1
   175f4:	ldr	r1, [pc, #188]	; 176b8 <_start@@Base+0x4cc8>
   175f8:	add	r1, pc, r1
   175fc:	ldr	r0, [pc, #184]	; 176bc <_start@@Base+0x4ccc>
   17600:	add	r0, pc, r0
   17604:	bl	129e0 <__assert_fail@plt>
   17608:	mov	r3, #6
   1760c:	strh	r3, [fp, #-8]
   17610:	ldr	r0, [fp, #-16]
   17614:	bl	132c4 <_start@@Base+0x8d4>
   17618:	mov	r3, r0
   1761c:	rsb	r3, r3, #0
   17620:	ldr	r2, [fp, #-16]
   17624:	add	r3, r2, r3
   17628:	str	r3, [fp, #-12]
   1762c:	ldr	r0, [fp, #-12]
   17630:	bl	13328 <_start@@Base+0x938>
   17634:	mov	r3, r0
   17638:	mov	r2, r3
   1763c:	ldrh	r3, [fp, #-8]
   17640:	add	r3, r3, #3
   17644:	lsl	r3, r3, #1
   17648:	cmp	r2, r3
   1764c:	bcc	17674 <_start@@Base+0x4c84>
   17650:	ldrh	r3, [fp, #-8]
   17654:	add	r3, r3, #2
   17658:	lsl	r3, r3, #1
   1765c:	ldr	r2, [fp, #-12]
   17660:	add	r3, r2, r3
   17664:	mov	r0, r3
   17668:	bl	13328 <_start@@Base+0x938>
   1766c:	mov	r3, r0
   17670:	strh	r3, [fp, #-6]
   17674:	ldrh	r3, [fp, #-6]
   17678:	cmp	r3, #0
   1767c:	beq	1769c <_start@@Base+0x4cac>
   17680:	ldrh	r3, [fp, #-6]
   17684:	ldr	r2, [fp, #-16]
   17688:	add	r3, r2, r3
   1768c:	mov	r0, r3
   17690:	bl	14994 <_start@@Base+0x1fa4>
   17694:	mov	r3, r0
   17698:	b	176a0 <_start@@Base+0x4cb0>
   1769c:	mov	r3, #8
   176a0:	mov	r0, r3
   176a4:	sub	sp, fp, #4
   176a8:	ldr	fp, [sp]
   176ac:	add	sp, sp, #4
   176b0:	pop	{pc}		; (ldr pc, [sp], #4)
   176b4:	andeq	lr, r1, r4, asr #10
   176b8:	andeq	fp, r1, r0
   176bc:	muleq	r1, ip, r0
   176c0:	str	fp, [sp, #-8]!
   176c4:	str	lr, [sp, #4]
   176c8:	add	fp, sp, #4
   176cc:	sub	sp, sp, #16
   176d0:	str	r0, [fp, #-16]
   176d4:	mov	r3, #0
   176d8:	strh	r3, [fp, #-6]
   176dc:	ldr	r3, [fp, #-16]
   176e0:	cmp	r3, #0
   176e4:	bne	17708 <_start@@Base+0x4d18>
   176e8:	ldr	r3, [pc, #172]	; 1779c <_start@@Base+0x4dac>
   176ec:	add	r3, pc, r3
   176f0:	movw	r2, #705	; 0x2c1
   176f4:	ldr	r1, [pc, #164]	; 177a0 <_start@@Base+0x4db0>
   176f8:	add	r1, pc, r1
   176fc:	ldr	r0, [pc, #160]	; 177a4 <_start@@Base+0x4db4>
   17700:	add	r0, pc, r0
   17704:	bl	129e0 <__assert_fail@plt>
   17708:	mov	r3, #6
   1770c:	strh	r3, [fp, #-8]
   17710:	ldr	r0, [fp, #-16]
   17714:	bl	132c4 <_start@@Base+0x8d4>
   17718:	mov	r3, r0
   1771c:	rsb	r3, r3, #0
   17720:	ldr	r2, [fp, #-16]
   17724:	add	r3, r2, r3
   17728:	str	r3, [fp, #-12]
   1772c:	ldr	r0, [fp, #-12]
   17730:	bl	13328 <_start@@Base+0x938>
   17734:	mov	r3, r0
   17738:	mov	r2, r3
   1773c:	ldrh	r3, [fp, #-8]
   17740:	add	r3, r3, #3
   17744:	lsl	r3, r3, #1
   17748:	cmp	r2, r3
   1774c:	bcc	17774 <_start@@Base+0x4d84>
   17750:	ldrh	r3, [fp, #-8]
   17754:	add	r3, r3, #2
   17758:	lsl	r3, r3, #1
   1775c:	ldr	r2, [fp, #-12]
   17760:	add	r3, r2, r3
   17764:	mov	r0, r3
   17768:	bl	13328 <_start@@Base+0x938>
   1776c:	mov	r3, r0
   17770:	strh	r3, [fp, #-6]
   17774:	ldrh	r3, [fp, #-6]
   17778:	cmp	r3, #0
   1777c:	movne	r3, #1
   17780:	moveq	r3, #0
   17784:	uxtb	r3, r3
   17788:	mov	r0, r3
   1778c:	sub	sp, fp, #4
   17790:	ldr	fp, [sp]
   17794:	add	sp, sp, #4
   17798:	pop	{pc}		; (ldr pc, [sp], #4)
   1779c:			; <UNDEFINED> instruction: 0x0001ebbc
   177a0:	andeq	sl, r1, r0, lsl #30
   177a4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   177a8:	str	fp, [sp, #-8]!
   177ac:	str	lr, [sp, #4]
   177b0:	add	fp, sp, #4
   177b4:	sub	sp, sp, #24
   177b8:	str	r0, [fp, #-24]	; 0xffffffe8
   177bc:	mov	r3, #0
   177c0:	strh	r3, [fp, #-6]
   177c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   177c8:	cmp	r3, #0
   177cc:	bne	177f0 <_start@@Base+0x4e00>
   177d0:	ldr	r3, [pc, #212]	; 178ac <_start@@Base+0x4ebc>
   177d4:	add	r3, pc, r3
   177d8:	movw	r2, #706	; 0x2c2
   177dc:	ldr	r1, [pc, #204]	; 178b0 <_start@@Base+0x4ec0>
   177e0:	add	r1, pc, r1
   177e4:	ldr	r0, [pc, #200]	; 178b4 <_start@@Base+0x4ec4>
   177e8:	add	r0, pc, r0
   177ec:	bl	129e0 <__assert_fail@plt>
   177f0:	mov	r3, #5
   177f4:	strh	r3, [fp, #-8]
   177f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   177fc:	bl	132c4 <_start@@Base+0x8d4>
   17800:	mov	r3, r0
   17804:	rsb	r3, r3, #0
   17808:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1780c:	add	r3, r2, r3
   17810:	str	r3, [fp, #-12]
   17814:	ldr	r0, [fp, #-12]
   17818:	bl	13328 <_start@@Base+0x938>
   1781c:	mov	r3, r0
   17820:	mov	r2, r3
   17824:	ldrh	r3, [fp, #-8]
   17828:	add	r3, r3, #3
   1782c:	lsl	r3, r3, #1
   17830:	cmp	r2, r3
   17834:	bcc	1785c <_start@@Base+0x4e6c>
   17838:	ldrh	r3, [fp, #-8]
   1783c:	add	r3, r3, #2
   17840:	lsl	r3, r3, #1
   17844:	ldr	r2, [fp, #-12]
   17848:	add	r3, r2, r3
   1784c:	mov	r0, r3
   17850:	bl	13328 <_start@@Base+0x938>
   17854:	mov	r3, r0
   17858:	strh	r3, [fp, #-6]
   1785c:	ldrh	r3, [fp, #-6]
   17860:	cmp	r3, #0
   17864:	beq	17894 <_start@@Base+0x4ea4>
   17868:	ldrh	r3, [fp, #-6]
   1786c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17870:	add	r3, r2, r3
   17874:	str	r3, [fp, #-16]
   17878:	ldr	r0, [fp, #-16]
   1787c:	bl	13224 <_start@@Base+0x834>
   17880:	mov	r3, r0
   17884:	add	r3, r3, #4
   17888:	ldr	r2, [fp, #-16]
   1788c:	add	r3, r2, r3
   17890:	b	17898 <_start@@Base+0x4ea8>
   17894:	mov	r3, #0
   17898:	mov	r0, r3
   1789c:	sub	sp, fp, #4
   178a0:	ldr	fp, [sp]
   178a4:	add	sp, sp, #4
   178a8:	pop	{pc}		; (ldr pc, [sp], #4)
   178ac:	andeq	lr, r1, ip, ror r3
   178b0:	andeq	sl, r1, r8, lsl lr
   178b4:			; <UNDEFINED> instruction: 0x0001aeb4
   178b8:	str	fp, [sp, #-8]!
   178bc:	str	lr, [sp, #4]
   178c0:	add	fp, sp, #4
   178c4:	sub	sp, sp, #24
   178c8:	str	r0, [fp, #-24]	; 0xffffffe8
   178cc:	mov	r3, #0
   178d0:	strh	r3, [fp, #-6]
   178d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178d8:	cmp	r3, #0
   178dc:	bne	17900 <_start@@Base+0x4f10>
   178e0:	ldr	r3, [pc, #212]	; 179bc <_start@@Base+0x4fcc>
   178e4:	add	r3, pc, r3
   178e8:	movw	r2, #711	; 0x2c7
   178ec:	ldr	r1, [pc, #204]	; 179c0 <_start@@Base+0x4fd0>
   178f0:	add	r1, pc, r1
   178f4:	ldr	r0, [pc, #200]	; 179c4 <_start@@Base+0x4fd4>
   178f8:	add	r0, pc, r0
   178fc:	bl	129e0 <__assert_fail@plt>
   17900:	mov	r3, #11
   17904:	strh	r3, [fp, #-8]
   17908:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1790c:	bl	132c4 <_start@@Base+0x8d4>
   17910:	mov	r3, r0
   17914:	rsb	r3, r3, #0
   17918:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1791c:	add	r3, r2, r3
   17920:	str	r3, [fp, #-12]
   17924:	ldr	r0, [fp, #-12]
   17928:	bl	13328 <_start@@Base+0x938>
   1792c:	mov	r3, r0
   17930:	mov	r2, r3
   17934:	ldrh	r3, [fp, #-8]
   17938:	add	r3, r3, #3
   1793c:	lsl	r3, r3, #1
   17940:	cmp	r2, r3
   17944:	bcc	1796c <_start@@Base+0x4f7c>
   17948:	ldrh	r3, [fp, #-8]
   1794c:	add	r3, r3, #2
   17950:	lsl	r3, r3, #1
   17954:	ldr	r2, [fp, #-12]
   17958:	add	r3, r2, r3
   1795c:	mov	r0, r3
   17960:	bl	13328 <_start@@Base+0x938>
   17964:	mov	r3, r0
   17968:	strh	r3, [fp, #-6]
   1796c:	ldrh	r3, [fp, #-6]
   17970:	cmp	r3, #0
   17974:	beq	179a4 <_start@@Base+0x4fb4>
   17978:	ldrh	r3, [fp, #-6]
   1797c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17980:	add	r3, r2, r3
   17984:	str	r3, [fp, #-16]
   17988:	ldr	r0, [fp, #-16]
   1798c:	bl	13224 <_start@@Base+0x834>
   17990:	mov	r3, r0
   17994:	add	r3, r3, #4
   17998:	ldr	r2, [fp, #-16]
   1799c:	add	r3, r2, r3
   179a0:	b	179a8 <_start@@Base+0x4fb8>
   179a4:	mov	r3, #0
   179a8:	mov	r0, r3
   179ac:	sub	sp, fp, #4
   179b0:	ldr	fp, [sp]
   179b4:	add	sp, sp, #4
   179b8:	pop	{pc}		; (ldr pc, [sp], #4)
   179bc:	andeq	lr, r1, r8, lsl #8
   179c0:	andeq	sl, r1, r8, lsl #26
   179c4:	andeq	sl, r1, r4, lsr #27
   179c8:	str	fp, [sp, #-8]!
   179cc:	str	lr, [sp, #4]
   179d0:	add	fp, sp, #4
   179d4:	sub	sp, sp, #24
   179d8:	str	r0, [fp, #-24]	; 0xffffffe8
   179dc:	mov	r3, #0
   179e0:	strh	r3, [fp, #-6]
   179e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179e8:	cmp	r3, #0
   179ec:	bne	17a10 <_start@@Base+0x5020>
   179f0:	ldr	r3, [pc, #212]	; 17acc <_start@@Base+0x50dc>
   179f4:	add	r3, pc, r3
   179f8:	mov	r2, #712	; 0x2c8
   179fc:	ldr	r1, [pc, #204]	; 17ad0 <_start@@Base+0x50e0>
   17a00:	add	r1, pc, r1
   17a04:	ldr	r0, [pc, #200]	; 17ad4 <_start@@Base+0x50e4>
   17a08:	add	r0, pc, r0
   17a0c:	bl	129e0 <__assert_fail@plt>
   17a10:	mov	r3, #10
   17a14:	strh	r3, [fp, #-8]
   17a18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a1c:	bl	132c4 <_start@@Base+0x8d4>
   17a20:	mov	r3, r0
   17a24:	rsb	r3, r3, #0
   17a28:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17a2c:	add	r3, r2, r3
   17a30:	str	r3, [fp, #-12]
   17a34:	ldr	r0, [fp, #-12]
   17a38:	bl	13328 <_start@@Base+0x938>
   17a3c:	mov	r3, r0
   17a40:	mov	r2, r3
   17a44:	ldrh	r3, [fp, #-8]
   17a48:	add	r3, r3, #3
   17a4c:	lsl	r3, r3, #1
   17a50:	cmp	r2, r3
   17a54:	bcc	17a7c <_start@@Base+0x508c>
   17a58:	ldrh	r3, [fp, #-8]
   17a5c:	add	r3, r3, #2
   17a60:	lsl	r3, r3, #1
   17a64:	ldr	r2, [fp, #-12]
   17a68:	add	r3, r2, r3
   17a6c:	mov	r0, r3
   17a70:	bl	13328 <_start@@Base+0x938>
   17a74:	mov	r3, r0
   17a78:	strh	r3, [fp, #-6]
   17a7c:	ldrh	r3, [fp, #-6]
   17a80:	cmp	r3, #0
   17a84:	beq	17ab4 <_start@@Base+0x50c4>
   17a88:	ldrh	r3, [fp, #-6]
   17a8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17a90:	add	r3, r2, r3
   17a94:	str	r3, [fp, #-16]
   17a98:	ldr	r0, [fp, #-16]
   17a9c:	bl	13224 <_start@@Base+0x834>
   17aa0:	mov	r3, r0
   17aa4:	add	r3, r3, #4
   17aa8:	ldr	r2, [fp, #-16]
   17aac:	add	r3, r2, r3
   17ab0:	b	17ab8 <_start@@Base+0x50c8>
   17ab4:	mov	r3, #0
   17ab8:	mov	r0, r3
   17abc:	sub	sp, fp, #4
   17ac0:	ldr	fp, [sp]
   17ac4:	add	sp, sp, #4
   17ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   17acc:	andeq	lr, r1, ip, lsl r2
   17ad0:	strdeq	sl, [r1], -r8
   17ad4:	muleq	r1, r4, ip
   17ad8:	str	fp, [sp, #-8]!
   17adc:	str	lr, [sp, #4]
   17ae0:	add	fp, sp, #4
   17ae4:	sub	sp, sp, #24
   17ae8:	str	r0, [fp, #-24]	; 0xffffffe8
   17aec:	mov	r3, #0
   17af0:	strh	r3, [fp, #-6]
   17af4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17af8:	cmp	r3, #0
   17afc:	bne	17b20 <_start@@Base+0x5130>
   17b00:	ldr	r3, [pc, #212]	; 17bdc <_start@@Base+0x51ec>
   17b04:	add	r3, pc, r3
   17b08:	movw	r2, #714	; 0x2ca
   17b0c:	ldr	r1, [pc, #204]	; 17be0 <_start@@Base+0x51f0>
   17b10:	add	r1, pc, r1
   17b14:	ldr	r0, [pc, #200]	; 17be4 <_start@@Base+0x51f4>
   17b18:	add	r0, pc, r0
   17b1c:	bl	129e0 <__assert_fail@plt>
   17b20:	mov	r3, #24
   17b24:	strh	r3, [fp, #-8]
   17b28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17b2c:	bl	132c4 <_start@@Base+0x8d4>
   17b30:	mov	r3, r0
   17b34:	rsb	r3, r3, #0
   17b38:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17b3c:	add	r3, r2, r3
   17b40:	str	r3, [fp, #-12]
   17b44:	ldr	r0, [fp, #-12]
   17b48:	bl	13328 <_start@@Base+0x938>
   17b4c:	mov	r3, r0
   17b50:	mov	r2, r3
   17b54:	ldrh	r3, [fp, #-8]
   17b58:	add	r3, r3, #3
   17b5c:	lsl	r3, r3, #1
   17b60:	cmp	r2, r3
   17b64:	bcc	17b8c <_start@@Base+0x519c>
   17b68:	ldrh	r3, [fp, #-8]
   17b6c:	add	r3, r3, #2
   17b70:	lsl	r3, r3, #1
   17b74:	ldr	r2, [fp, #-12]
   17b78:	add	r3, r2, r3
   17b7c:	mov	r0, r3
   17b80:	bl	13328 <_start@@Base+0x938>
   17b84:	mov	r3, r0
   17b88:	strh	r3, [fp, #-6]
   17b8c:	ldrh	r3, [fp, #-6]
   17b90:	cmp	r3, #0
   17b94:	beq	17bc4 <_start@@Base+0x51d4>
   17b98:	ldrh	r3, [fp, #-6]
   17b9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17ba0:	add	r3, r2, r3
   17ba4:	str	r3, [fp, #-16]
   17ba8:	ldr	r0, [fp, #-16]
   17bac:	bl	13224 <_start@@Base+0x834>
   17bb0:	mov	r3, r0
   17bb4:	add	r3, r3, #4
   17bb8:	ldr	r2, [fp, #-16]
   17bbc:	add	r3, r2, r3
   17bc0:	b	17bc8 <_start@@Base+0x51d8>
   17bc4:	mov	r3, #0
   17bc8:	mov	r0, r3
   17bcc:	sub	sp, fp, #4
   17bd0:	ldr	fp, [sp]
   17bd4:	add	sp, sp, #4
   17bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   17bdc:	andeq	lr, r1, r8, lsl #3
   17be0:	andeq	sl, r1, r8, ror #21
   17be4:	andeq	sl, r1, r4, lsl #23
   17be8:	str	fp, [sp, #-8]!
   17bec:	str	lr, [sp, #4]
   17bf0:	add	fp, sp, #4
   17bf4:	sub	sp, sp, #16
   17bf8:	str	r0, [fp, #-16]
   17bfc:	mov	r3, #0
   17c00:	strh	r3, [fp, #-6]
   17c04:	ldr	r3, [fp, #-16]
   17c08:	cmp	r3, #0
   17c0c:	bne	17c30 <_start@@Base+0x5240>
   17c10:	ldr	r3, [pc, #172]	; 17cc4 <_start@@Base+0x52d4>
   17c14:	add	r3, pc, r3
   17c18:	movw	r2, #714	; 0x2ca
   17c1c:	ldr	r1, [pc, #164]	; 17cc8 <_start@@Base+0x52d8>
   17c20:	add	r1, pc, r1
   17c24:	ldr	r0, [pc, #160]	; 17ccc <_start@@Base+0x52dc>
   17c28:	add	r0, pc, r0
   17c2c:	bl	129e0 <__assert_fail@plt>
   17c30:	mov	r3, #24
   17c34:	strh	r3, [fp, #-8]
   17c38:	ldr	r0, [fp, #-16]
   17c3c:	bl	132c4 <_start@@Base+0x8d4>
   17c40:	mov	r3, r0
   17c44:	rsb	r3, r3, #0
   17c48:	ldr	r2, [fp, #-16]
   17c4c:	add	r3, r2, r3
   17c50:	str	r3, [fp, #-12]
   17c54:	ldr	r0, [fp, #-12]
   17c58:	bl	13328 <_start@@Base+0x938>
   17c5c:	mov	r3, r0
   17c60:	mov	r2, r3
   17c64:	ldrh	r3, [fp, #-8]
   17c68:	add	r3, r3, #3
   17c6c:	lsl	r3, r3, #1
   17c70:	cmp	r2, r3
   17c74:	bcc	17c9c <_start@@Base+0x52ac>
   17c78:	ldrh	r3, [fp, #-8]
   17c7c:	add	r3, r3, #2
   17c80:	lsl	r3, r3, #1
   17c84:	ldr	r2, [fp, #-12]
   17c88:	add	r3, r2, r3
   17c8c:	mov	r0, r3
   17c90:	bl	13328 <_start@@Base+0x938>
   17c94:	mov	r3, r0
   17c98:	strh	r3, [fp, #-6]
   17c9c:	ldrh	r3, [fp, #-6]
   17ca0:	cmp	r3, #0
   17ca4:	movne	r3, #1
   17ca8:	moveq	r3, #0
   17cac:	uxtb	r3, r3
   17cb0:	mov	r0, r3
   17cb4:	sub	sp, fp, #4
   17cb8:	ldr	fp, [sp]
   17cbc:	add	sp, sp, #4
   17cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   17cc4:	andeq	lr, r1, r4, asr #32
   17cc8:	ldrdeq	sl, [r1], -r8
   17ccc:	andeq	sl, r1, r4, ror sl
   17cd0:	str	fp, [sp, #-8]!
   17cd4:	str	lr, [sp, #4]
   17cd8:	add	fp, sp, #4
   17cdc:	sub	sp, sp, #24
   17ce0:	str	r0, [fp, #-24]	; 0xffffffe8
   17ce4:	mov	r3, #0
   17ce8:	strh	r3, [fp, #-6]
   17cec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17cf0:	cmp	r3, #0
   17cf4:	bne	17d18 <_start@@Base+0x5328>
   17cf8:	ldr	r3, [pc, #208]	; 17dd0 <_start@@Base+0x53e0>
   17cfc:	add	r3, pc, r3
   17d00:	mov	r2, #716	; 0x2cc
   17d04:	ldr	r1, [pc, #200]	; 17dd4 <_start@@Base+0x53e4>
   17d08:	add	r1, pc, r1
   17d0c:	ldr	r0, [pc, #196]	; 17dd8 <_start@@Base+0x53e8>
   17d10:	add	r0, pc, r0
   17d14:	bl	129e0 <__assert_fail@plt>
   17d18:	mov	r3, #12
   17d1c:	strh	r3, [fp, #-8]
   17d20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17d24:	bl	132c4 <_start@@Base+0x8d4>
   17d28:	mov	r3, r0
   17d2c:	rsb	r3, r3, #0
   17d30:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17d34:	add	r3, r2, r3
   17d38:	str	r3, [fp, #-12]
   17d3c:	ldr	r0, [fp, #-12]
   17d40:	bl	13328 <_start@@Base+0x938>
   17d44:	mov	r3, r0
   17d48:	mov	r2, r3
   17d4c:	ldrh	r3, [fp, #-8]
   17d50:	add	r3, r3, #3
   17d54:	lsl	r3, r3, #1
   17d58:	cmp	r2, r3
   17d5c:	bcc	17d84 <_start@@Base+0x5394>
   17d60:	ldrh	r3, [fp, #-8]
   17d64:	add	r3, r3, #2
   17d68:	lsl	r3, r3, #1
   17d6c:	ldr	r2, [fp, #-12]
   17d70:	add	r3, r2, r3
   17d74:	mov	r0, r3
   17d78:	bl	13328 <_start@@Base+0x938>
   17d7c:	mov	r3, r0
   17d80:	strh	r3, [fp, #-6]
   17d84:	ldrh	r3, [fp, #-6]
   17d88:	cmp	r3, #0
   17d8c:	beq	17db8 <_start@@Base+0x53c8>
   17d90:	ldrh	r3, [fp, #-6]
   17d94:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17d98:	add	r3, r2, r3
   17d9c:	str	r3, [fp, #-16]
   17da0:	ldr	r0, [fp, #-16]
   17da4:	bl	13224 <_start@@Base+0x834>
   17da8:	mov	r2, r0
   17dac:	ldr	r3, [fp, #-16]
   17db0:	add	r3, r3, r2
   17db4:	b	17dbc <_start@@Base+0x53cc>
   17db8:	mov	r3, #0
   17dbc:	mov	r0, r3
   17dc0:	sub	sp, fp, #4
   17dc4:	ldr	fp, [sp]
   17dc8:	add	sp, sp, #4
   17dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   17dd0:	ldrdeq	sp, [r1], -r0
   17dd4:	strdeq	sl, [r1], -r0
   17dd8:	andeq	sl, r1, ip, lsl #19
   17ddc:	str	fp, [sp, #-8]!
   17de0:	str	lr, [sp, #4]
   17de4:	add	fp, sp, #4
   17de8:	sub	sp, sp, #16
   17dec:	str	r0, [fp, #-16]
   17df0:	mov	r3, #0
   17df4:	strh	r3, [fp, #-6]
   17df8:	ldr	r3, [fp, #-16]
   17dfc:	cmp	r3, #0
   17e00:	bne	17e24 <_start@@Base+0x5434>
   17e04:	ldr	r3, [pc, #172]	; 17eb8 <_start@@Base+0x54c8>
   17e08:	add	r3, pc, r3
   17e0c:	mov	r2, #716	; 0x2cc
   17e10:	ldr	r1, [pc, #164]	; 17ebc <_start@@Base+0x54cc>
   17e14:	add	r1, pc, r1
   17e18:	ldr	r0, [pc, #160]	; 17ec0 <_start@@Base+0x54d0>
   17e1c:	add	r0, pc, r0
   17e20:	bl	129e0 <__assert_fail@plt>
   17e24:	mov	r3, #12
   17e28:	strh	r3, [fp, #-8]
   17e2c:	ldr	r0, [fp, #-16]
   17e30:	bl	132c4 <_start@@Base+0x8d4>
   17e34:	mov	r3, r0
   17e38:	rsb	r3, r3, #0
   17e3c:	ldr	r2, [fp, #-16]
   17e40:	add	r3, r2, r3
   17e44:	str	r3, [fp, #-12]
   17e48:	ldr	r0, [fp, #-12]
   17e4c:	bl	13328 <_start@@Base+0x938>
   17e50:	mov	r3, r0
   17e54:	mov	r2, r3
   17e58:	ldrh	r3, [fp, #-8]
   17e5c:	add	r3, r3, #3
   17e60:	lsl	r3, r3, #1
   17e64:	cmp	r2, r3
   17e68:	bcc	17e90 <_start@@Base+0x54a0>
   17e6c:	ldrh	r3, [fp, #-8]
   17e70:	add	r3, r3, #2
   17e74:	lsl	r3, r3, #1
   17e78:	ldr	r2, [fp, #-12]
   17e7c:	add	r3, r2, r3
   17e80:	mov	r0, r3
   17e84:	bl	13328 <_start@@Base+0x938>
   17e88:	mov	r3, r0
   17e8c:	strh	r3, [fp, #-6]
   17e90:	ldrh	r3, [fp, #-6]
   17e94:	cmp	r3, #0
   17e98:	movne	r3, #1
   17e9c:	moveq	r3, #0
   17ea0:	uxtb	r3, r3
   17ea4:	mov	r0, r3
   17ea8:	sub	sp, fp, #4
   17eac:	ldr	fp, [sp]
   17eb0:	add	sp, sp, #4
   17eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   17eb8:	ldrdeq	lr, [r1], -ip
   17ebc:	andeq	sl, r1, r4, ror #15
   17ec0:	andeq	sl, r1, r0, lsl #17
   17ec4:	str	fp, [sp, #-8]!
   17ec8:	str	lr, [sp, #4]
   17ecc:	add	fp, sp, #4
   17ed0:	sub	sp, sp, #16
   17ed4:	str	r0, [fp, #-16]
   17ed8:	mov	r3, #0
   17edc:	strh	r3, [fp, #-6]
   17ee0:	ldr	r3, [fp, #-16]
   17ee4:	cmp	r3, #0
   17ee8:	bne	17f0c <_start@@Base+0x551c>
   17eec:	ldr	r3, [pc, #196]	; 17fb8 <_start@@Base+0x55c8>
   17ef0:	add	r3, pc, r3
   17ef4:	movw	r2, #717	; 0x2cd
   17ef8:	ldr	r1, [pc, #188]	; 17fbc <_start@@Base+0x55cc>
   17efc:	add	r1, pc, r1
   17f00:	ldr	r0, [pc, #184]	; 17fc0 <_start@@Base+0x55d0>
   17f04:	add	r0, pc, r0
   17f08:	bl	129e0 <__assert_fail@plt>
   17f0c:	mov	r3, #7
   17f10:	strh	r3, [fp, #-8]
   17f14:	ldr	r0, [fp, #-16]
   17f18:	bl	132c4 <_start@@Base+0x8d4>
   17f1c:	mov	r3, r0
   17f20:	rsb	r3, r3, #0
   17f24:	ldr	r2, [fp, #-16]
   17f28:	add	r3, r2, r3
   17f2c:	str	r3, [fp, #-12]
   17f30:	ldr	r0, [fp, #-12]
   17f34:	bl	13328 <_start@@Base+0x938>
   17f38:	mov	r3, r0
   17f3c:	mov	r2, r3
   17f40:	ldrh	r3, [fp, #-8]
   17f44:	add	r3, r3, #3
   17f48:	lsl	r3, r3, #1
   17f4c:	cmp	r2, r3
   17f50:	bcc	17f78 <_start@@Base+0x5588>
   17f54:	ldrh	r3, [fp, #-8]
   17f58:	add	r3, r3, #2
   17f5c:	lsl	r3, r3, #1
   17f60:	ldr	r2, [fp, #-12]
   17f64:	add	r3, r2, r3
   17f68:	mov	r0, r3
   17f6c:	bl	13328 <_start@@Base+0x938>
   17f70:	mov	r3, r0
   17f74:	strh	r3, [fp, #-6]
   17f78:	ldrh	r3, [fp, #-6]
   17f7c:	cmp	r3, #0
   17f80:	beq	17fa0 <_start@@Base+0x55b0>
   17f84:	ldrh	r3, [fp, #-6]
   17f88:	ldr	r2, [fp, #-16]
   17f8c:	add	r3, r2, r3
   17f90:	mov	r0, r3
   17f94:	bl	1338c <_start@@Base+0x99c>
   17f98:	mov	r3, r0
   17f9c:	b	17fa4 <_start@@Base+0x55b4>
   17fa0:	mov	r3, #0
   17fa4:	mov	r0, r3
   17fa8:	sub	sp, fp, #4
   17fac:	ldr	fp, [sp]
   17fb0:	add	sp, sp, #4
   17fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   17fb8:	andeq	sp, r1, r8, asr #28
   17fbc:	strdeq	sl, [r1], -ip
   17fc0:	muleq	r1, r8, r7
   17fc4:	str	fp, [sp, #-8]!
   17fc8:	str	lr, [sp, #4]
   17fcc:	add	fp, sp, #4
   17fd0:	sub	sp, sp, #24
   17fd4:	str	r0, [fp, #-24]	; 0xffffffe8
   17fd8:	mov	r3, #0
   17fdc:	strh	r3, [fp, #-6]
   17fe0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17fe4:	cmp	r3, #0
   17fe8:	bne	1800c <_start@@Base+0x561c>
   17fec:	ldr	r3, [pc, #208]	; 180c4 <_start@@Base+0x56d4>
   17ff0:	add	r3, pc, r3
   17ff4:	movw	r2, #717	; 0x2cd
   17ff8:	ldr	r1, [pc, #200]	; 180c8 <_start@@Base+0x56d8>
   17ffc:	add	r1, pc, r1
   18000:	ldr	r0, [pc, #196]	; 180cc <_start@@Base+0x56dc>
   18004:	add	r0, pc, r0
   18008:	bl	129e0 <__assert_fail@plt>
   1800c:	mov	r3, #8
   18010:	strh	r3, [fp, #-8]
   18014:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18018:	bl	132c4 <_start@@Base+0x8d4>
   1801c:	mov	r3, r0
   18020:	rsb	r3, r3, #0
   18024:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18028:	add	r3, r2, r3
   1802c:	str	r3, [fp, #-12]
   18030:	ldr	r0, [fp, #-12]
   18034:	bl	13328 <_start@@Base+0x938>
   18038:	mov	r3, r0
   1803c:	mov	r2, r3
   18040:	ldrh	r3, [fp, #-8]
   18044:	add	r3, r3, #3
   18048:	lsl	r3, r3, #1
   1804c:	cmp	r2, r3
   18050:	bcc	18078 <_start@@Base+0x5688>
   18054:	ldrh	r3, [fp, #-8]
   18058:	add	r3, r3, #2
   1805c:	lsl	r3, r3, #1
   18060:	ldr	r2, [fp, #-12]
   18064:	add	r3, r2, r3
   18068:	mov	r0, r3
   1806c:	bl	13328 <_start@@Base+0x938>
   18070:	mov	r3, r0
   18074:	strh	r3, [fp, #-6]
   18078:	ldrh	r3, [fp, #-6]
   1807c:	cmp	r3, #0
   18080:	beq	180ac <_start@@Base+0x56bc>
   18084:	ldrh	r3, [fp, #-6]
   18088:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1808c:	add	r3, r2, r3
   18090:	str	r3, [fp, #-16]
   18094:	ldr	r0, [fp, #-16]
   18098:	bl	13224 <_start@@Base+0x834>
   1809c:	mov	r2, r0
   180a0:	ldr	r3, [fp, #-16]
   180a4:	add	r3, r3, r2
   180a8:	b	180b0 <_start@@Base+0x56c0>
   180ac:	mov	r3, #0
   180b0:	mov	r0, r3
   180b4:	sub	sp, fp, #4
   180b8:	ldr	fp, [sp]
   180bc:	add	sp, sp, #4
   180c0:	pop	{pc}		; (ldr pc, [sp], #4)
   180c4:	andeq	sp, r1, ip, ror #26
   180c8:	strdeq	sl, [r1], -ip
   180cc:	muleq	r1, r8, r6
   180d0:	str	fp, [sp, #-8]!
   180d4:	str	lr, [sp, #4]
   180d8:	add	fp, sp, #4
   180dc:	sub	sp, sp, #16
   180e0:	str	r0, [fp, #-16]
   180e4:	str	r1, [fp, #-20]	; 0xffffffec
   180e8:	mov	r3, #0
   180ec:	strb	r3, [fp, #-12]
   180f0:	mov	r3, #0
   180f4:	str	r3, [fp, #-8]
   180f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   180fc:	bl	17ec4 <_start@@Base+0x54d4>
   18100:	mov	r3, r0
   18104:	strb	r3, [fp, #-12]
   18108:	ldrb	r3, [fp, #-12]
   1810c:	cmp	r3, #0
   18110:	bne	1812c <_start@@Base+0x573c>
   18114:	ldr	r3, [fp, #-16]
   18118:	mov	r1, r3
   1811c:	sub	r3, fp, #12
   18120:	ldrd	r2, [r3]
   18124:	strd	r2, [r1]
   18128:	b	18150 <_start@@Base+0x5760>
   1812c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18130:	bl	17fc4 <_start@@Base+0x55d4>
   18134:	mov	r3, r0
   18138:	str	r3, [fp, #-8]
   1813c:	ldr	r3, [fp, #-16]
   18140:	mov	r1, r3
   18144:	sub	r3, fp, #12
   18148:	ldrd	r2, [r3]
   1814c:	strd	r2, [r1]
   18150:	ldr	r0, [fp, #-16]
   18154:	sub	sp, fp, #4
   18158:	ldr	fp, [sp]
   1815c:	add	sp, sp, #4
   18160:	pop	{pc}		; (ldr pc, [sp], #4)
   18164:	str	fp, [sp, #-8]!
   18168:	str	lr, [sp, #4]
   1816c:	add	fp, sp, #4
   18170:	sub	sp, sp, #24
   18174:	str	r0, [fp, #-24]	; 0xffffffe8
   18178:	mov	r3, #0
   1817c:	strh	r3, [fp, #-6]
   18180:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18184:	cmp	r3, #0
   18188:	bne	181ac <_start@@Base+0x57bc>
   1818c:	ldr	r3, [pc, #212]	; 18268 <_start@@Base+0x5878>
   18190:	add	r3, pc, r3
   18194:	movw	r2, #718	; 0x2ce
   18198:	ldr	r1, [pc, #204]	; 1826c <_start@@Base+0x587c>
   1819c:	add	r1, pc, r1
   181a0:	ldr	r0, [pc, #200]	; 18270 <_start@@Base+0x5880>
   181a4:	add	r0, pc, r0
   181a8:	bl	129e0 <__assert_fail@plt>
   181ac:	mov	r3, #9
   181b0:	strh	r3, [fp, #-8]
   181b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   181b8:	bl	132c4 <_start@@Base+0x8d4>
   181bc:	mov	r3, r0
   181c0:	rsb	r3, r3, #0
   181c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   181c8:	add	r3, r2, r3
   181cc:	str	r3, [fp, #-12]
   181d0:	ldr	r0, [fp, #-12]
   181d4:	bl	13328 <_start@@Base+0x938>
   181d8:	mov	r3, r0
   181dc:	mov	r2, r3
   181e0:	ldrh	r3, [fp, #-8]
   181e4:	add	r3, r3, #3
   181e8:	lsl	r3, r3, #1
   181ec:	cmp	r2, r3
   181f0:	bcc	18218 <_start@@Base+0x5828>
   181f4:	ldrh	r3, [fp, #-8]
   181f8:	add	r3, r3, #2
   181fc:	lsl	r3, r3, #1
   18200:	ldr	r2, [fp, #-12]
   18204:	add	r3, r2, r3
   18208:	mov	r0, r3
   1820c:	bl	13328 <_start@@Base+0x938>
   18210:	mov	r3, r0
   18214:	strh	r3, [fp, #-6]
   18218:	ldrh	r3, [fp, #-6]
   1821c:	cmp	r3, #0
   18220:	beq	18250 <_start@@Base+0x5860>
   18224:	ldrh	r3, [fp, #-6]
   18228:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1822c:	add	r3, r2, r3
   18230:	str	r3, [fp, #-16]
   18234:	ldr	r0, [fp, #-16]
   18238:	bl	13224 <_start@@Base+0x834>
   1823c:	mov	r3, r0
   18240:	add	r3, r3, #4
   18244:	ldr	r2, [fp, #-16]
   18248:	add	r3, r2, r3
   1824c:	b	18254 <_start@@Base+0x5864>
   18250:	mov	r3, #0
   18254:	mov	r0, r3
   18258:	sub	sp, fp, #4
   1825c:	ldr	fp, [sp]
   18260:	add	sp, sp, #4
   18264:	pop	{pc}		; (ldr pc, [sp], #4)
   18268:	andeq	sp, r1, r4, asr #20
   1826c:	andeq	sl, r1, ip, asr r4
   18270:	strdeq	sl, [r1], -r8
   18274:	str	fp, [sp, #-8]!
   18278:	str	lr, [sp, #4]
   1827c:	add	fp, sp, #4
   18280:	sub	sp, sp, #24
   18284:	str	r0, [fp, #-24]	; 0xffffffe8
   18288:	mov	r3, #0
   1828c:	strh	r3, [fp, #-6]
   18290:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18294:	cmp	r3, #0
   18298:	bne	182bc <_start@@Base+0x58cc>
   1829c:	ldr	r3, [pc, #212]	; 18378 <_start@@Base+0x5988>
   182a0:	add	r3, pc, r3
   182a4:	mov	r2, #720	; 0x2d0
   182a8:	ldr	r1, [pc, #204]	; 1837c <_start@@Base+0x598c>
   182ac:	add	r1, pc, r1
   182b0:	ldr	r0, [pc, #200]	; 18380 <_start@@Base+0x5990>
   182b4:	add	r0, pc, r0
   182b8:	bl	129e0 <__assert_fail@plt>
   182bc:	mov	r3, #13
   182c0:	strh	r3, [fp, #-8]
   182c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   182c8:	bl	132c4 <_start@@Base+0x8d4>
   182cc:	mov	r3, r0
   182d0:	rsb	r3, r3, #0
   182d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   182d8:	add	r3, r2, r3
   182dc:	str	r3, [fp, #-12]
   182e0:	ldr	r0, [fp, #-12]
   182e4:	bl	13328 <_start@@Base+0x938>
   182e8:	mov	r3, r0
   182ec:	mov	r2, r3
   182f0:	ldrh	r3, [fp, #-8]
   182f4:	add	r3, r3, #3
   182f8:	lsl	r3, r3, #1
   182fc:	cmp	r2, r3
   18300:	bcc	18328 <_start@@Base+0x5938>
   18304:	ldrh	r3, [fp, #-8]
   18308:	add	r3, r3, #2
   1830c:	lsl	r3, r3, #1
   18310:	ldr	r2, [fp, #-12]
   18314:	add	r3, r2, r3
   18318:	mov	r0, r3
   1831c:	bl	13328 <_start@@Base+0x938>
   18320:	mov	r3, r0
   18324:	strh	r3, [fp, #-6]
   18328:	ldrh	r3, [fp, #-6]
   1832c:	cmp	r3, #0
   18330:	beq	18360 <_start@@Base+0x5970>
   18334:	ldrh	r3, [fp, #-6]
   18338:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1833c:	add	r3, r2, r3
   18340:	str	r3, [fp, #-16]
   18344:	ldr	r0, [fp, #-16]
   18348:	bl	13224 <_start@@Base+0x834>
   1834c:	mov	r3, r0
   18350:	add	r3, r3, #4
   18354:	ldr	r2, [fp, #-16]
   18358:	add	r3, r2, r3
   1835c:	b	18364 <_start@@Base+0x5974>
   18360:	mov	r3, #0
   18364:	mov	r0, r3
   18368:	sub	sp, fp, #4
   1836c:	ldr	fp, [sp]
   18370:	add	sp, sp, #4
   18374:	pop	{pc}		; (ldr pc, [sp], #4)
   18378:	andeq	lr, r1, r4, asr #32
   1837c:	andeq	sl, r1, ip, asr #6
   18380:	andeq	sl, r1, r8, ror #7
   18384:	str	fp, [sp, #-8]!
   18388:	str	lr, [sp, #4]
   1838c:	add	fp, sp, #4
   18390:	sub	sp, sp, #16
   18394:	str	r0, [fp, #-16]
   18398:	ldr	r3, [pc, #100]	; 18404 <_start@@Base+0x5a14>
   1839c:	add	r3, pc, r3
   183a0:	str	r3, [fp, #-8]
   183a4:	ldr	r0, [fp, #-16]
   183a8:	bl	18274 <_start@@Base+0x5884>
   183ac:	str	r0, [fp, #-12]
   183b0:	ldr	r3, [fp, #-12]
   183b4:	cmp	r3, #0
   183b8:	beq	183ec <_start@@Base+0x59fc>
   183bc:	ldr	r1, [fp, #-8]
   183c0:	ldr	r0, [fp, #-12]
   183c4:	bl	147a4 <_start@@Base+0x1db4>
   183c8:	mov	r3, r0
   183cc:	cmp	r3, #0
   183d0:	beq	183ec <_start@@Base+0x59fc>
   183d4:	ldr	r0, [fp, #-12]
   183d8:	bl	13224 <_start@@Base+0x834>
   183dc:	mov	r2, r0
   183e0:	ldr	r3, [fp, #-12]
   183e4:	add	r3, r3, r2
   183e8:	b	183f0 <_start@@Base+0x5a00>
   183ec:	mov	r3, #0
   183f0:	mov	r0, r3
   183f4:	sub	sp, fp, #4
   183f8:	ldr	fp, [sp]
   183fc:	add	sp, sp, #4
   18400:	pop	{pc}		; (ldr pc, [sp], #4)
   18404:	ldrdeq	sl, [r1], -r8
   18408:	str	fp, [sp, #-8]!
   1840c:	str	lr, [sp, #4]
   18410:	add	fp, sp, #4
   18414:	sub	sp, sp, #24
   18418:	str	r0, [fp, #-24]	; 0xffffffe8
   1841c:	mov	r3, #0
   18420:	strh	r3, [fp, #-6]
   18424:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18428:	cmp	r3, #0
   1842c:	bne	18450 <_start@@Base+0x5a60>
   18430:	ldr	r3, [pc, #208]	; 18508 <_start@@Base+0x5b18>
   18434:	add	r3, pc, r3
   18438:	movw	r2, #722	; 0x2d2
   1843c:	ldr	r1, [pc, #200]	; 1850c <_start@@Base+0x5b1c>
   18440:	add	r1, pc, r1
   18444:	ldr	r0, [pc, #196]	; 18510 <_start@@Base+0x5b20>
   18448:	add	r0, pc, r0
   1844c:	bl	129e0 <__assert_fail@plt>
   18450:	mov	r3, #14
   18454:	strh	r3, [fp, #-8]
   18458:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1845c:	bl	132c4 <_start@@Base+0x8d4>
   18460:	mov	r3, r0
   18464:	rsb	r3, r3, #0
   18468:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1846c:	add	r3, r2, r3
   18470:	str	r3, [fp, #-12]
   18474:	ldr	r0, [fp, #-12]
   18478:	bl	13328 <_start@@Base+0x938>
   1847c:	mov	r3, r0
   18480:	mov	r2, r3
   18484:	ldrh	r3, [fp, #-8]
   18488:	add	r3, r3, #3
   1848c:	lsl	r3, r3, #1
   18490:	cmp	r2, r3
   18494:	bcc	184bc <_start@@Base+0x5acc>
   18498:	ldrh	r3, [fp, #-8]
   1849c:	add	r3, r3, #2
   184a0:	lsl	r3, r3, #1
   184a4:	ldr	r2, [fp, #-12]
   184a8:	add	r3, r2, r3
   184ac:	mov	r0, r3
   184b0:	bl	13328 <_start@@Base+0x938>
   184b4:	mov	r3, r0
   184b8:	strh	r3, [fp, #-6]
   184bc:	ldrh	r3, [fp, #-6]
   184c0:	cmp	r3, #0
   184c4:	beq	184f0 <_start@@Base+0x5b00>
   184c8:	ldrh	r3, [fp, #-6]
   184cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   184d0:	add	r3, r2, r3
   184d4:	str	r3, [fp, #-16]
   184d8:	ldr	r0, [fp, #-16]
   184dc:	bl	13224 <_start@@Base+0x834>
   184e0:	mov	r2, r0
   184e4:	ldr	r3, [fp, #-16]
   184e8:	add	r3, r3, r2
   184ec:	b	184f4 <_start@@Base+0x5b04>
   184f0:	mov	r3, #0
   184f4:	mov	r0, r3
   184f8:	sub	sp, fp, #4
   184fc:	ldr	fp, [sp]
   18500:	add	sp, sp, #4
   18504:	pop	{pc}		; (ldr pc, [sp], #4)
   18508:	andeq	sp, r1, ip, lsr #19
   1850c:			; <UNDEFINED> instruction: 0x0001a1b8
   18510:	andeq	sl, r1, r4, asr r2
   18514:	str	fp, [sp, #-8]!
   18518:	str	lr, [sp, #4]
   1851c:	add	fp, sp, #4
   18520:	sub	sp, sp, #16
   18524:	str	r0, [fp, #-16]
   18528:	mov	r3, #0
   1852c:	strh	r3, [fp, #-6]
   18530:	ldr	r3, [fp, #-16]
   18534:	cmp	r3, #0
   18538:	bne	1855c <_start@@Base+0x5b6c>
   1853c:	ldr	r3, [pc, #172]	; 185f0 <_start@@Base+0x5c00>
   18540:	add	r3, pc, r3
   18544:	movw	r2, #722	; 0x2d2
   18548:	ldr	r1, [pc, #164]	; 185f4 <_start@@Base+0x5c04>
   1854c:	add	r1, pc, r1
   18550:	ldr	r0, [pc, #160]	; 185f8 <_start@@Base+0x5c08>
   18554:	add	r0, pc, r0
   18558:	bl	129e0 <__assert_fail@plt>
   1855c:	mov	r3, #14
   18560:	strh	r3, [fp, #-8]
   18564:	ldr	r0, [fp, #-16]
   18568:	bl	132c4 <_start@@Base+0x8d4>
   1856c:	mov	r3, r0
   18570:	rsb	r3, r3, #0
   18574:	ldr	r2, [fp, #-16]
   18578:	add	r3, r2, r3
   1857c:	str	r3, [fp, #-12]
   18580:	ldr	r0, [fp, #-12]
   18584:	bl	13328 <_start@@Base+0x938>
   18588:	mov	r3, r0
   1858c:	mov	r2, r3
   18590:	ldrh	r3, [fp, #-8]
   18594:	add	r3, r3, #3
   18598:	lsl	r3, r3, #1
   1859c:	cmp	r2, r3
   185a0:	bcc	185c8 <_start@@Base+0x5bd8>
   185a4:	ldrh	r3, [fp, #-8]
   185a8:	add	r3, r3, #2
   185ac:	lsl	r3, r3, #1
   185b0:	ldr	r2, [fp, #-12]
   185b4:	add	r3, r2, r3
   185b8:	mov	r0, r3
   185bc:	bl	13328 <_start@@Base+0x938>
   185c0:	mov	r3, r0
   185c4:	strh	r3, [fp, #-6]
   185c8:	ldrh	r3, [fp, #-6]
   185cc:	cmp	r3, #0
   185d0:	movne	r3, #1
   185d4:	moveq	r3, #0
   185d8:	uxtb	r3, r3
   185dc:	mov	r0, r3
   185e0:	sub	sp, fp, #4
   185e4:	ldr	fp, [sp]
   185e8:	add	sp, sp, #4
   185ec:	pop	{pc}		; (ldr pc, [sp], #4)
   185f0:	andeq	sp, r1, r4, ror r8
   185f4:	andeq	sl, r1, ip, lsr #1
   185f8:	andeq	sl, r1, r8, asr #2
   185fc:	str	fp, [sp, #-8]!
   18600:	str	lr, [sp, #4]
   18604:	add	fp, sp, #4
   18608:	sub	sp, sp, #16
   1860c:	str	r0, [fp, #-16]
   18610:	mov	r3, #0
   18614:	strh	r3, [fp, #-6]
   18618:	ldr	r3, [fp, #-16]
   1861c:	cmp	r3, #0
   18620:	bne	18644 <_start@@Base+0x5c54>
   18624:	ldr	r3, [pc, #196]	; 186f0 <_start@@Base+0x5d00>
   18628:	add	r3, pc, r3
   1862c:	movw	r2, #723	; 0x2d3
   18630:	ldr	r1, [pc, #188]	; 186f4 <_start@@Base+0x5d04>
   18634:	add	r1, pc, r1
   18638:	ldr	r0, [pc, #184]	; 186f8 <_start@@Base+0x5d08>
   1863c:	add	r0, pc, r0
   18640:	bl	129e0 <__assert_fail@plt>
   18644:	mov	r3, #15
   18648:	strh	r3, [fp, #-8]
   1864c:	ldr	r0, [fp, #-16]
   18650:	bl	132c4 <_start@@Base+0x8d4>
   18654:	mov	r3, r0
   18658:	rsb	r3, r3, #0
   1865c:	ldr	r2, [fp, #-16]
   18660:	add	r3, r2, r3
   18664:	str	r3, [fp, #-12]
   18668:	ldr	r0, [fp, #-12]
   1866c:	bl	13328 <_start@@Base+0x938>
   18670:	mov	r3, r0
   18674:	mov	r2, r3
   18678:	ldrh	r3, [fp, #-8]
   1867c:	add	r3, r3, #3
   18680:	lsl	r3, r3, #1
   18684:	cmp	r2, r3
   18688:	bcc	186b0 <_start@@Base+0x5cc0>
   1868c:	ldrh	r3, [fp, #-8]
   18690:	add	r3, r3, #2
   18694:	lsl	r3, r3, #1
   18698:	ldr	r2, [fp, #-12]
   1869c:	add	r3, r2, r3
   186a0:	mov	r0, r3
   186a4:	bl	13328 <_start@@Base+0x938>
   186a8:	mov	r3, r0
   186ac:	strh	r3, [fp, #-6]
   186b0:	ldrh	r3, [fp, #-6]
   186b4:	cmp	r3, #0
   186b8:	beq	186d8 <_start@@Base+0x5ce8>
   186bc:	ldrh	r3, [fp, #-6]
   186c0:	ldr	r2, [fp, #-16]
   186c4:	add	r3, r2, r3
   186c8:	mov	r0, r3
   186cc:	bl	13120 <_start@@Base+0x730>
   186d0:	mov	r3, r0
   186d4:	b	186dc <_start@@Base+0x5cec>
   186d8:	mov	r3, #1
   186dc:	mov	r0, r3
   186e0:	sub	sp, fp, #4
   186e4:	ldr	fp, [sp]
   186e8:	add	sp, sp, #4
   186ec:	pop	{pc}		; (ldr pc, [sp], #4)
   186f0:	andeq	sp, r1, ip, ror #14
   186f4:	andeq	r9, r1, r4, asr #31
   186f8:	andeq	sl, r1, r0, rrx
   186fc:	str	fp, [sp, #-8]!
   18700:	str	lr, [sp, #4]
   18704:	add	fp, sp, #4
   18708:	sub	sp, sp, #16
   1870c:	str	r0, [fp, #-16]
   18710:	ldr	r3, [pc, #88]	; 18770 <_start@@Base+0x5d80>
   18714:	add	r3, pc, r3
   18718:	str	r3, [fp, #-8]
   1871c:	ldr	r3, [fp, #-16]
   18720:	cmp	r3, #0
   18724:	beq	18758 <_start@@Base+0x5d68>
   18728:	ldr	r1, [fp, #-8]
   1872c:	ldr	r0, [fp, #-16]
   18730:	bl	147a4 <_start@@Base+0x1db4>
   18734:	mov	r3, r0
   18738:	cmp	r3, #0
   1873c:	beq	18758 <_start@@Base+0x5d68>
   18740:	ldr	r0, [fp, #-16]
   18744:	bl	13224 <_start@@Base+0x834>
   18748:	mov	r2, r0
   1874c:	ldr	r3, [fp, #-16]
   18750:	add	r3, r3, r2
   18754:	b	1875c <_start@@Base+0x5d6c>
   18758:	mov	r3, #0
   1875c:	mov	r0, r3
   18760:	sub	sp, fp, #4
   18764:	ldr	fp, [sp]
   18768:	add	sp, sp, #4
   1876c:	pop	{pc}		; (ldr pc, [sp], #4)
   18770:	andeq	r9, r1, r0, ror #30
   18774:	str	fp, [sp, #-8]!
   18778:	str	lr, [sp, #4]
   1877c:	add	fp, sp, #4
   18780:	sub	sp, sp, #16
   18784:	str	r0, [fp, #-16]
   18788:	mov	r3, #0
   1878c:	strh	r3, [fp, #-6]
   18790:	ldr	r3, [fp, #-16]
   18794:	cmp	r3, #0
   18798:	bne	187bc <_start@@Base+0x5dcc>
   1879c:	ldr	r3, [pc, #196]	; 18868 <_start@@Base+0x5e78>
   187a0:	add	r3, pc, r3
   187a4:	movw	r2, #749	; 0x2ed
   187a8:	ldr	r1, [pc, #188]	; 1886c <_start@@Base+0x5e7c>
   187ac:	add	r1, pc, r1
   187b0:	ldr	r0, [pc, #184]	; 18870 <_start@@Base+0x5e80>
   187b4:	add	r0, pc, r0
   187b8:	bl	129e0 <__assert_fail@plt>
   187bc:	mov	r3, #0
   187c0:	strh	r3, [fp, #-8]
   187c4:	ldr	r0, [fp, #-16]
   187c8:	bl	132c4 <_start@@Base+0x8d4>
   187cc:	mov	r3, r0
   187d0:	rsb	r3, r3, #0
   187d4:	ldr	r2, [fp, #-16]
   187d8:	add	r3, r2, r3
   187dc:	str	r3, [fp, #-12]
   187e0:	ldr	r0, [fp, #-12]
   187e4:	bl	13328 <_start@@Base+0x938>
   187e8:	mov	r3, r0
   187ec:	mov	r2, r3
   187f0:	ldrh	r3, [fp, #-8]
   187f4:	add	r3, r3, #3
   187f8:	lsl	r3, r3, #1
   187fc:	cmp	r2, r3
   18800:	bcc	18828 <_start@@Base+0x5e38>
   18804:	ldrh	r3, [fp, #-8]
   18808:	add	r3, r3, #2
   1880c:	lsl	r3, r3, #1
   18810:	ldr	r2, [fp, #-12]
   18814:	add	r3, r2, r3
   18818:	mov	r0, r3
   1881c:	bl	13328 <_start@@Base+0x938>
   18820:	mov	r3, r0
   18824:	strh	r3, [fp, #-6]
   18828:	ldrh	r3, [fp, #-6]
   1882c:	cmp	r3, #0
   18830:	beq	18850 <_start@@Base+0x5e60>
   18834:	ldrh	r3, [fp, #-6]
   18838:	ldr	r2, [fp, #-16]
   1883c:	add	r3, r2, r3
   18840:	mov	r0, r3
   18844:	bl	12d64 <_start@@Base+0x374>
   18848:	mov	r3, r0
   1884c:	b	18854 <_start@@Base+0x5e64>
   18850:	mov	r3, #0
   18854:	mov	r0, r3
   18858:	sub	sp, fp, #4
   1885c:	ldr	fp, [sp]
   18860:	add	sp, sp, #4
   18864:	pop	{pc}		; (ldr pc, [sp], #4)
   18868:	ldrdeq	sp, [r1], -r8
   1886c:	andeq	r9, r1, ip, asr #28
   18870:	andeq	r9, r1, r8, ror #29
   18874:	str	fp, [sp, #-8]!
   18878:	str	lr, [sp, #4]
   1887c:	add	fp, sp, #4
   18880:	sub	sp, sp, #16
   18884:	str	r0, [fp, #-16]
   18888:	mov	r3, #0
   1888c:	strh	r3, [fp, #-6]
   18890:	ldr	r3, [fp, #-16]
   18894:	cmp	r3, #0
   18898:	bne	188bc <_start@@Base+0x5ecc>
   1889c:	ldr	r3, [pc, #196]	; 18968 <_start@@Base+0x5f78>
   188a0:	add	r3, pc, r3
   188a4:	movw	r2, #750	; 0x2ee
   188a8:	ldr	r1, [pc, #188]	; 1896c <_start@@Base+0x5f7c>
   188ac:	add	r1, pc, r1
   188b0:	ldr	r0, [pc, #184]	; 18970 <_start@@Base+0x5f80>
   188b4:	add	r0, pc, r0
   188b8:	bl	129e0 <__assert_fail@plt>
   188bc:	mov	r3, #1
   188c0:	strh	r3, [fp, #-8]
   188c4:	ldr	r0, [fp, #-16]
   188c8:	bl	132c4 <_start@@Base+0x8d4>
   188cc:	mov	r3, r0
   188d0:	rsb	r3, r3, #0
   188d4:	ldr	r2, [fp, #-16]
   188d8:	add	r3, r2, r3
   188dc:	str	r3, [fp, #-12]
   188e0:	ldr	r0, [fp, #-12]
   188e4:	bl	13328 <_start@@Base+0x938>
   188e8:	mov	r3, r0
   188ec:	mov	r2, r3
   188f0:	ldrh	r3, [fp, #-8]
   188f4:	add	r3, r3, #3
   188f8:	lsl	r3, r3, #1
   188fc:	cmp	r2, r3
   18900:	bcc	18928 <_start@@Base+0x5f38>
   18904:	ldrh	r3, [fp, #-8]
   18908:	add	r3, r3, #2
   1890c:	lsl	r3, r3, #1
   18910:	ldr	r2, [fp, #-12]
   18914:	add	r3, r2, r3
   18918:	mov	r0, r3
   1891c:	bl	13328 <_start@@Base+0x938>
   18920:	mov	r3, r0
   18924:	strh	r3, [fp, #-6]
   18928:	ldrh	r3, [fp, #-6]
   1892c:	cmp	r3, #0
   18930:	beq	18950 <_start@@Base+0x5f60>
   18934:	ldrh	r3, [fp, #-6]
   18938:	ldr	r2, [fp, #-16]
   1893c:	add	r3, r2, r3
   18940:	mov	r0, r3
   18944:	bl	12b30 <_start@@Base+0x140>
   18948:	mov	r3, r0
   1894c:	b	18954 <_start@@Base+0x5f64>
   18950:	mov	r3, #0
   18954:	mov	r0, r3
   18958:	sub	sp, fp, #4
   1895c:	ldr	fp, [sp]
   18960:	add	sp, sp, #4
   18964:	pop	{pc}		; (ldr pc, [sp], #4)
   18968:	andeq	sp, r1, r8, asr r1
   1896c:	andeq	r9, r1, ip, asr #26
   18970:	andeq	r9, r1, r8, ror #27
   18974:	str	fp, [sp, #-8]!
   18978:	str	lr, [sp, #4]
   1897c:	add	fp, sp, #4
   18980:	sub	sp, sp, #16
   18984:	str	r0, [fp, #-16]
   18988:	mov	r3, #0
   1898c:	strh	r3, [fp, #-6]
   18990:	ldr	r3, [fp, #-16]
   18994:	cmp	r3, #0
   18998:	bne	189bc <_start@@Base+0x5fcc>
   1899c:	ldr	r3, [pc, #196]	; 18a68 <_start@@Base+0x6078>
   189a0:	add	r3, pc, r3
   189a4:	movw	r2, #751	; 0x2ef
   189a8:	ldr	r1, [pc, #188]	; 18a6c <_start@@Base+0x607c>
   189ac:	add	r1, pc, r1
   189b0:	ldr	r0, [pc, #184]	; 18a70 <_start@@Base+0x6080>
   189b4:	add	r0, pc, r0
   189b8:	bl	129e0 <__assert_fail@plt>
   189bc:	mov	r3, #2
   189c0:	strh	r3, [fp, #-8]
   189c4:	ldr	r0, [fp, #-16]
   189c8:	bl	132c4 <_start@@Base+0x8d4>
   189cc:	mov	r3, r0
   189d0:	rsb	r3, r3, #0
   189d4:	ldr	r2, [fp, #-16]
   189d8:	add	r3, r2, r3
   189dc:	str	r3, [fp, #-12]
   189e0:	ldr	r0, [fp, #-12]
   189e4:	bl	13328 <_start@@Base+0x938>
   189e8:	mov	r3, r0
   189ec:	mov	r2, r3
   189f0:	ldrh	r3, [fp, #-8]
   189f4:	add	r3, r3, #3
   189f8:	lsl	r3, r3, #1
   189fc:	cmp	r2, r3
   18a00:	bcc	18a28 <_start@@Base+0x6038>
   18a04:	ldrh	r3, [fp, #-8]
   18a08:	add	r3, r3, #2
   18a0c:	lsl	r3, r3, #1
   18a10:	ldr	r2, [fp, #-12]
   18a14:	add	r3, r2, r3
   18a18:	mov	r0, r3
   18a1c:	bl	13328 <_start@@Base+0x938>
   18a20:	mov	r3, r0
   18a24:	strh	r3, [fp, #-6]
   18a28:	ldrh	r3, [fp, #-6]
   18a2c:	cmp	r3, #0
   18a30:	beq	18a50 <_start@@Base+0x6060>
   18a34:	ldrh	r3, [fp, #-6]
   18a38:	ldr	r2, [fp, #-16]
   18a3c:	add	r3, r2, r3
   18a40:	mov	r0, r3
   18a44:	bl	12df0 <_start@@Base+0x400>
   18a48:	mov	r3, r0
   18a4c:	b	18a54 <_start@@Base+0x6064>
   18a50:	mov	r3, #0
   18a54:	mov	r0, r3
   18a58:	sub	sp, fp, #4
   18a5c:	ldr	fp, [sp]
   18a60:	add	sp, sp, #4
   18a64:	pop	{pc}		; (ldr pc, [sp], #4)
   18a68:	strdeq	ip, [r1], -r8
   18a6c:	andeq	r9, r1, ip, asr #24
   18a70:	andeq	r9, r1, r8, ror #25
   18a74:	str	fp, [sp, #-8]!
   18a78:	str	lr, [sp, #4]
   18a7c:	add	fp, sp, #4
   18a80:	sub	sp, sp, #16
   18a84:	str	r0, [fp, #-16]
   18a88:	mov	r3, #0
   18a8c:	strh	r3, [fp, #-6]
   18a90:	ldr	r3, [fp, #-16]
   18a94:	cmp	r3, #0
   18a98:	bne	18abc <_start@@Base+0x60cc>
   18a9c:	ldr	r3, [pc, #196]	; 18b68 <_start@@Base+0x6178>
   18aa0:	add	r3, pc, r3
   18aa4:	mov	r2, #752	; 0x2f0
   18aa8:	ldr	r1, [pc, #188]	; 18b6c <_start@@Base+0x617c>
   18aac:	add	r1, pc, r1
   18ab0:	ldr	r0, [pc, #184]	; 18b70 <_start@@Base+0x6180>
   18ab4:	add	r0, pc, r0
   18ab8:	bl	129e0 <__assert_fail@plt>
   18abc:	mov	r3, #3
   18ac0:	strh	r3, [fp, #-8]
   18ac4:	ldr	r0, [fp, #-16]
   18ac8:	bl	132c4 <_start@@Base+0x8d4>
   18acc:	mov	r3, r0
   18ad0:	rsb	r3, r3, #0
   18ad4:	ldr	r2, [fp, #-16]
   18ad8:	add	r3, r2, r3
   18adc:	str	r3, [fp, #-12]
   18ae0:	ldr	r0, [fp, #-12]
   18ae4:	bl	13328 <_start@@Base+0x938>
   18ae8:	mov	r3, r0
   18aec:	mov	r2, r3
   18af0:	ldrh	r3, [fp, #-8]
   18af4:	add	r3, r3, #3
   18af8:	lsl	r3, r3, #1
   18afc:	cmp	r2, r3
   18b00:	bcc	18b28 <_start@@Base+0x6138>
   18b04:	ldrh	r3, [fp, #-8]
   18b08:	add	r3, r3, #2
   18b0c:	lsl	r3, r3, #1
   18b10:	ldr	r2, [fp, #-12]
   18b14:	add	r3, r2, r3
   18b18:	mov	r0, r3
   18b1c:	bl	13328 <_start@@Base+0x938>
   18b20:	mov	r3, r0
   18b24:	strh	r3, [fp, #-6]
   18b28:	ldrh	r3, [fp, #-6]
   18b2c:	cmp	r3, #0
   18b30:	beq	18b50 <_start@@Base+0x6160>
   18b34:	ldrh	r3, [fp, #-6]
   18b38:	ldr	r2, [fp, #-16]
   18b3c:	add	r3, r2, r3
   18b40:	mov	r0, r3
   18b44:	bl	12bbc <_start@@Base+0x1cc>
   18b48:	mov	r3, r0
   18b4c:	b	18b54 <_start@@Base+0x6164>
   18b50:	mov	r3, #0
   18b54:	mov	r0, r3
   18b58:	sub	sp, fp, #4
   18b5c:	ldr	fp, [sp]
   18b60:	add	sp, sp, #4
   18b64:	pop	{pc}		; (ldr pc, [sp], #4)
   18b68:	andeq	ip, r1, r8, ror pc
   18b6c:	andeq	r9, r1, ip, asr #22
   18b70:	andeq	r9, r1, r8, ror #23
   18b74:	str	fp, [sp, #-8]!
   18b78:	str	lr, [sp, #4]
   18b7c:	add	fp, sp, #4
   18b80:	sub	sp, sp, #16
   18b84:	str	r0, [fp, #-16]
   18b88:	mov	r3, #0
   18b8c:	strh	r3, [fp, #-6]
   18b90:	ldr	r3, [fp, #-16]
   18b94:	cmp	r3, #0
   18b98:	bne	18bbc <_start@@Base+0x61cc>
   18b9c:	ldr	r3, [pc, #196]	; 18c68 <_start@@Base+0x6278>
   18ba0:	add	r3, pc, r3
   18ba4:	movw	r2, #753	; 0x2f1
   18ba8:	ldr	r1, [pc, #188]	; 18c6c <_start@@Base+0x627c>
   18bac:	add	r1, pc, r1
   18bb0:	ldr	r0, [pc, #184]	; 18c70 <_start@@Base+0x6280>
   18bb4:	add	r0, pc, r0
   18bb8:	bl	129e0 <__assert_fail@plt>
   18bbc:	mov	r3, #4
   18bc0:	strh	r3, [fp, #-8]
   18bc4:	ldr	r0, [fp, #-16]
   18bc8:	bl	132c4 <_start@@Base+0x8d4>
   18bcc:	mov	r3, r0
   18bd0:	rsb	r3, r3, #0
   18bd4:	ldr	r2, [fp, #-16]
   18bd8:	add	r3, r2, r3
   18bdc:	str	r3, [fp, #-12]
   18be0:	ldr	r0, [fp, #-12]
   18be4:	bl	13328 <_start@@Base+0x938>
   18be8:	mov	r3, r0
   18bec:	mov	r2, r3
   18bf0:	ldrh	r3, [fp, #-8]
   18bf4:	add	r3, r3, #3
   18bf8:	lsl	r3, r3, #1
   18bfc:	cmp	r2, r3
   18c00:	bcc	18c28 <_start@@Base+0x6238>
   18c04:	ldrh	r3, [fp, #-8]
   18c08:	add	r3, r3, #2
   18c0c:	lsl	r3, r3, #1
   18c10:	ldr	r2, [fp, #-12]
   18c14:	add	r3, r2, r3
   18c18:	mov	r0, r3
   18c1c:	bl	13328 <_start@@Base+0x938>
   18c20:	mov	r3, r0
   18c24:	strh	r3, [fp, #-6]
   18c28:	ldrh	r3, [fp, #-6]
   18c2c:	cmp	r3, #0
   18c30:	beq	18c50 <_start@@Base+0x6260>
   18c34:	ldrh	r3, [fp, #-6]
   18c38:	ldr	r2, [fp, #-16]
   18c3c:	add	r3, r2, r3
   18c40:	mov	r0, r3
   18c44:	bl	12e74 <_start@@Base+0x484>
   18c48:	mov	r3, r0
   18c4c:	b	18c54 <_start@@Base+0x6264>
   18c50:	mov	r3, #0
   18c54:	mov	r0, r3
   18c58:	sub	sp, fp, #4
   18c5c:	ldr	fp, [sp]
   18c60:	add	sp, sp, #4
   18c64:	pop	{pc}		; (ldr pc, [sp], #4)
   18c68:	andeq	ip, r1, r8, lsl lr
   18c6c:	andeq	r9, r1, ip, asr #20
   18c70:	andeq	r9, r1, r8, ror #21
   18c74:	str	fp, [sp, #-8]!
   18c78:	str	lr, [sp, #4]
   18c7c:	add	fp, sp, #4
   18c80:	sub	sp, sp, #16
   18c84:	str	r0, [fp, #-16]
   18c88:	mov	r3, #0
   18c8c:	strh	r3, [fp, #-6]
   18c90:	ldr	r3, [fp, #-16]
   18c94:	cmp	r3, #0
   18c98:	bne	18cbc <_start@@Base+0x62cc>
   18c9c:	ldr	r3, [pc, #196]	; 18d68 <_start@@Base+0x6378>
   18ca0:	add	r3, pc, r3
   18ca4:	movw	r2, #754	; 0x2f2
   18ca8:	ldr	r1, [pc, #188]	; 18d6c <_start@@Base+0x637c>
   18cac:	add	r1, pc, r1
   18cb0:	ldr	r0, [pc, #184]	; 18d70 <_start@@Base+0x6380>
   18cb4:	add	r0, pc, r0
   18cb8:	bl	129e0 <__assert_fail@plt>
   18cbc:	mov	r3, #5
   18cc0:	strh	r3, [fp, #-8]
   18cc4:	ldr	r0, [fp, #-16]
   18cc8:	bl	132c4 <_start@@Base+0x8d4>
   18ccc:	mov	r3, r0
   18cd0:	rsb	r3, r3, #0
   18cd4:	ldr	r2, [fp, #-16]
   18cd8:	add	r3, r2, r3
   18cdc:	str	r3, [fp, #-12]
   18ce0:	ldr	r0, [fp, #-12]
   18ce4:	bl	13328 <_start@@Base+0x938>
   18ce8:	mov	r3, r0
   18cec:	mov	r2, r3
   18cf0:	ldrh	r3, [fp, #-8]
   18cf4:	add	r3, r3, #3
   18cf8:	lsl	r3, r3, #1
   18cfc:	cmp	r2, r3
   18d00:	bcc	18d28 <_start@@Base+0x6338>
   18d04:	ldrh	r3, [fp, #-8]
   18d08:	add	r3, r3, #2
   18d0c:	lsl	r3, r3, #1
   18d10:	ldr	r2, [fp, #-12]
   18d14:	add	r3, r2, r3
   18d18:	mov	r0, r3
   18d1c:	bl	13328 <_start@@Base+0x938>
   18d20:	mov	r3, r0
   18d24:	strh	r3, [fp, #-6]
   18d28:	ldrh	r3, [fp, #-6]
   18d2c:	cmp	r3, #0
   18d30:	beq	18d50 <_start@@Base+0x6360>
   18d34:	ldrh	r3, [fp, #-6]
   18d38:	ldr	r2, [fp, #-16]
   18d3c:	add	r3, r2, r3
   18d40:	mov	r0, r3
   18d44:	bl	12c40 <_start@@Base+0x250>
   18d48:	mov	r3, r0
   18d4c:	b	18d54 <_start@@Base+0x6364>
   18d50:	mov	r3, #0
   18d54:	mov	r0, r3
   18d58:	sub	sp, fp, #4
   18d5c:	ldr	fp, [sp]
   18d60:	add	sp, sp, #4
   18d64:	pop	{pc}		; (ldr pc, [sp], #4)
   18d68:	muleq	r1, r8, sp
   18d6c:	andeq	r9, r1, ip, asr #18
   18d70:	andeq	r9, r1, r8, ror #19
   18d74:	str	fp, [sp, #-8]!
   18d78:	str	lr, [sp, #4]
   18d7c:	add	fp, sp, #4
   18d80:	sub	sp, sp, #16
   18d84:	str	r0, [fp, #-16]
   18d88:	mov	r3, #0
   18d8c:	strh	r3, [fp, #-6]
   18d90:	ldr	r3, [fp, #-16]
   18d94:	cmp	r3, #0
   18d98:	bne	18dbc <_start@@Base+0x63cc>
   18d9c:	ldr	r3, [pc, #208]	; 18e74 <_start@@Base+0x6484>
   18da0:	add	r3, pc, r3
   18da4:	movw	r2, #755	; 0x2f3
   18da8:	ldr	r1, [pc, #200]	; 18e78 <_start@@Base+0x6488>
   18dac:	add	r1, pc, r1
   18db0:	ldr	r0, [pc, #196]	; 18e7c <_start@@Base+0x648c>
   18db4:	add	r0, pc, r0
   18db8:	bl	129e0 <__assert_fail@plt>
   18dbc:	mov	r3, #6
   18dc0:	strh	r3, [fp, #-8]
   18dc4:	ldr	r0, [fp, #-16]
   18dc8:	bl	132c4 <_start@@Base+0x8d4>
   18dcc:	mov	r3, r0
   18dd0:	rsb	r3, r3, #0
   18dd4:	ldr	r2, [fp, #-16]
   18dd8:	add	r3, r2, r3
   18ddc:	str	r3, [fp, #-12]
   18de0:	ldr	r0, [fp, #-12]
   18de4:	bl	13328 <_start@@Base+0x938>
   18de8:	mov	r3, r0
   18dec:	mov	r2, r3
   18df0:	ldrh	r3, [fp, #-8]
   18df4:	add	r3, r3, #3
   18df8:	lsl	r3, r3, #1
   18dfc:	cmp	r2, r3
   18e00:	bcc	18e28 <_start@@Base+0x6438>
   18e04:	ldrh	r3, [fp, #-8]
   18e08:	add	r3, r3, #2
   18e0c:	lsl	r3, r3, #1
   18e10:	ldr	r2, [fp, #-12]
   18e14:	add	r3, r2, r3
   18e18:	mov	r0, r3
   18e1c:	bl	13328 <_start@@Base+0x938>
   18e20:	mov	r3, r0
   18e24:	strh	r3, [fp, #-6]
   18e28:	ldrh	r3, [fp, #-6]
   18e2c:	cmp	r3, #0
   18e30:	beq	18e54 <_start@@Base+0x6464>
   18e34:	ldrh	r3, [fp, #-6]
   18e38:	ldr	r2, [fp, #-16]
   18e3c:	add	r3, r2, r3
   18e40:	mov	r0, r3
   18e44:	bl	12f00 <_start@@Base+0x510>
   18e48:	mov	r2, r0
   18e4c:	mov	r3, r1
   18e50:	b	18e5c <_start@@Base+0x646c>
   18e54:	mov	r2, #0
   18e58:	mov	r3, #0
   18e5c:	mov	r0, r2
   18e60:	mov	r1, r3
   18e64:	sub	sp, fp, #4
   18e68:	ldr	fp, [sp]
   18e6c:	add	sp, sp, #4
   18e70:	pop	{pc}		; (ldr pc, [sp], #4)
   18e74:	andeq	ip, r1, r8, lsr ip
   18e78:	andeq	r9, r1, ip, asr #16
   18e7c:	andeq	r9, r1, r8, ror #17
   18e80:	str	fp, [sp, #-8]!
   18e84:	str	lr, [sp, #4]
   18e88:	add	fp, sp, #4
   18e8c:	sub	sp, sp, #16
   18e90:	str	r0, [fp, #-16]
   18e94:	mov	r3, #0
   18e98:	strh	r3, [fp, #-6]
   18e9c:	ldr	r3, [fp, #-16]
   18ea0:	cmp	r3, #0
   18ea4:	bne	18ec8 <_start@@Base+0x64d8>
   18ea8:	ldr	r3, [pc, #208]	; 18f80 <_start@@Base+0x6590>
   18eac:	add	r3, pc, r3
   18eb0:	mov	r2, #756	; 0x2f4
   18eb4:	ldr	r1, [pc, #200]	; 18f84 <_start@@Base+0x6594>
   18eb8:	add	r1, pc, r1
   18ebc:	ldr	r0, [pc, #196]	; 18f88 <_start@@Base+0x6598>
   18ec0:	add	r0, pc, r0
   18ec4:	bl	129e0 <__assert_fail@plt>
   18ec8:	mov	r3, #7
   18ecc:	strh	r3, [fp, #-8]
   18ed0:	ldr	r0, [fp, #-16]
   18ed4:	bl	132c4 <_start@@Base+0x8d4>
   18ed8:	mov	r3, r0
   18edc:	rsb	r3, r3, #0
   18ee0:	ldr	r2, [fp, #-16]
   18ee4:	add	r3, r2, r3
   18ee8:	str	r3, [fp, #-12]
   18eec:	ldr	r0, [fp, #-12]
   18ef0:	bl	13328 <_start@@Base+0x938>
   18ef4:	mov	r3, r0
   18ef8:	mov	r2, r3
   18efc:	ldrh	r3, [fp, #-8]
   18f00:	add	r3, r3, #3
   18f04:	lsl	r3, r3, #1
   18f08:	cmp	r2, r3
   18f0c:	bcc	18f34 <_start@@Base+0x6544>
   18f10:	ldrh	r3, [fp, #-8]
   18f14:	add	r3, r3, #2
   18f18:	lsl	r3, r3, #1
   18f1c:	ldr	r2, [fp, #-12]
   18f20:	add	r3, r2, r3
   18f24:	mov	r0, r3
   18f28:	bl	13328 <_start@@Base+0x938>
   18f2c:	mov	r3, r0
   18f30:	strh	r3, [fp, #-6]
   18f34:	ldrh	r3, [fp, #-6]
   18f38:	cmp	r3, #0
   18f3c:	beq	18f60 <_start@@Base+0x6570>
   18f40:	ldrh	r3, [fp, #-6]
   18f44:	ldr	r2, [fp, #-16]
   18f48:	add	r3, r2, r3
   18f4c:	mov	r0, r3
   18f50:	bl	12ccc <_start@@Base+0x2dc>
   18f54:	mov	r2, r0
   18f58:	mov	r3, r1
   18f5c:	b	18f68 <_start@@Base+0x6578>
   18f60:	mov	r2, #0
   18f64:	mov	r3, #0
   18f68:	mov	r0, r2
   18f6c:	mov	r1, r3
   18f70:	sub	sp, fp, #4
   18f74:	ldr	fp, [sp]
   18f78:	add	sp, sp, #4
   18f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f80:	andeq	ip, r1, ip, lsr #23
   18f84:	andeq	r9, r1, r0, asr #14
   18f88:	ldrdeq	r9, [r1], -ip
   18f8c:	str	fp, [sp, #-8]!
   18f90:	str	lr, [sp, #4]
   18f94:	add	fp, sp, #4
   18f98:	sub	sp, sp, #16
   18f9c:	str	r0, [fp, #-16]
   18fa0:	mov	r3, #0
   18fa4:	strh	r3, [fp, #-6]
   18fa8:	ldr	r3, [fp, #-16]
   18fac:	cmp	r3, #0
   18fb0:	bne	18fd4 <_start@@Base+0x65e4>
   18fb4:	ldr	r3, [pc, #200]	; 19084 <_start@@Base+0x6694>
   18fb8:	add	r3, pc, r3
   18fbc:	movw	r2, #757	; 0x2f5
   18fc0:	ldr	r1, [pc, #192]	; 19088 <_start@@Base+0x6698>
   18fc4:	add	r1, pc, r1
   18fc8:	ldr	r0, [pc, #188]	; 1908c <_start@@Base+0x669c>
   18fcc:	add	r0, pc, r0
   18fd0:	bl	129e0 <__assert_fail@plt>
   18fd4:	mov	r3, #8
   18fd8:	strh	r3, [fp, #-8]
   18fdc:	ldr	r0, [fp, #-16]
   18fe0:	bl	132c4 <_start@@Base+0x8d4>
   18fe4:	mov	r3, r0
   18fe8:	rsb	r3, r3, #0
   18fec:	ldr	r2, [fp, #-16]
   18ff0:	add	r3, r2, r3
   18ff4:	str	r3, [fp, #-12]
   18ff8:	ldr	r0, [fp, #-12]
   18ffc:	bl	13328 <_start@@Base+0x938>
   19000:	mov	r3, r0
   19004:	mov	r2, r3
   19008:	ldrh	r3, [fp, #-8]
   1900c:	add	r3, r3, #3
   19010:	lsl	r3, r3, #1
   19014:	cmp	r2, r3
   19018:	bcc	19040 <_start@@Base+0x6650>
   1901c:	ldrh	r3, [fp, #-8]
   19020:	add	r3, r3, #2
   19024:	lsl	r3, r3, #1
   19028:	ldr	r2, [fp, #-12]
   1902c:	add	r3, r2, r3
   19030:	mov	r0, r3
   19034:	bl	13328 <_start@@Base+0x938>
   19038:	mov	r3, r0
   1903c:	strh	r3, [fp, #-6]
   19040:	ldrh	r3, [fp, #-6]
   19044:	cmp	r3, #0
   19048:	beq	19068 <_start@@Base+0x6678>
   1904c:	ldrh	r3, [fp, #-6]
   19050:	ldr	r2, [fp, #-16]
   19054:	add	r3, r2, r3
   19058:	mov	r0, r3
   1905c:	bl	12fb8 <_start@@Base+0x5c8>
   19060:	vmov.f32	s15, s0
   19064:	b	1906c <_start@@Base+0x667c>
   19068:	vldr	s15, [pc, #16]	; 19080 <_start@@Base+0x6690>
   1906c:	vmov.f32	s0, s15
   19070:	sub	sp, fp, #4
   19074:	ldr	fp, [sp]
   19078:	add	sp, sp, #4
   1907c:	pop	{pc}		; (ldr pc, [sp], #4)
   19080:	andeq	r0, r0, r0
   19084:	andeq	ip, r1, r0, asr #21
   19088:	andeq	r9, r1, r4, lsr r6
   1908c:	ldrdeq	r9, [r1], -r0
   19090:	str	fp, [sp, #-8]!
   19094:	str	lr, [sp, #4]
   19098:	add	fp, sp, #4
   1909c:	sub	sp, sp, #16
   190a0:	str	r0, [fp, #-16]
   190a4:	mov	r3, #0
   190a8:	strh	r3, [fp, #-6]
   190ac:	ldr	r3, [fp, #-16]
   190b0:	cmp	r3, #0
   190b4:	bne	190d8 <_start@@Base+0x66e8>
   190b8:	ldr	r3, [pc, #208]	; 19190 <_start@@Base+0x67a0>
   190bc:	add	r3, pc, r3
   190c0:	movw	r2, #758	; 0x2f6
   190c4:	ldr	r1, [pc, #200]	; 19194 <_start@@Base+0x67a4>
   190c8:	add	r1, pc, r1
   190cc:	ldr	r0, [pc, #196]	; 19198 <_start@@Base+0x67a8>
   190d0:	add	r0, pc, r0
   190d4:	bl	129e0 <__assert_fail@plt>
   190d8:	mov	r3, #9
   190dc:	strh	r3, [fp, #-8]
   190e0:	ldr	r0, [fp, #-16]
   190e4:	bl	132c4 <_start@@Base+0x8d4>
   190e8:	mov	r3, r0
   190ec:	rsb	r3, r3, #0
   190f0:	ldr	r2, [fp, #-16]
   190f4:	add	r3, r2, r3
   190f8:	str	r3, [fp, #-12]
   190fc:	ldr	r0, [fp, #-12]
   19100:	bl	13328 <_start@@Base+0x938>
   19104:	mov	r3, r0
   19108:	mov	r2, r3
   1910c:	ldrh	r3, [fp, #-8]
   19110:	add	r3, r3, #3
   19114:	lsl	r3, r3, #1
   19118:	cmp	r2, r3
   1911c:	bcc	19144 <_start@@Base+0x6754>
   19120:	ldrh	r3, [fp, #-8]
   19124:	add	r3, r3, #2
   19128:	lsl	r3, r3, #1
   1912c:	ldr	r2, [fp, #-12]
   19130:	add	r3, r2, r3
   19134:	mov	r0, r3
   19138:	bl	13328 <_start@@Base+0x938>
   1913c:	mov	r3, r0
   19140:	strh	r3, [fp, #-6]
   19144:	ldrh	r3, [fp, #-6]
   19148:	cmp	r3, #0
   1914c:	beq	1916c <_start@@Base+0x677c>
   19150:	ldrh	r3, [fp, #-6]
   19154:	ldr	r2, [fp, #-16]
   19158:	add	r3, r2, r3
   1915c:	mov	r0, r3
   19160:	bl	13064 <_start@@Base+0x674>
   19164:	vmov.f64	d7, d0
   19168:	b	19170 <_start@@Base+0x6780>
   1916c:	vldr	d7, [pc, #20]	; 19188 <_start@@Base+0x6798>
   19170:	vmov.f64	d0, d7
   19174:	sub	sp, fp, #4
   19178:	ldr	fp, [sp]
   1917c:	add	sp, sp, #4
   19180:	pop	{pc}		; (ldr pc, [sp], #4)
   19184:	nop	{0}
	...
   19190:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   19194:	andeq	r9, r1, r0, lsr r5
   19198:	andeq	r9, r1, ip, asr #11
   1919c:	str	fp, [sp, #-8]!
   191a0:	str	lr, [sp, #4]
   191a4:	add	fp, sp, #4
   191a8:	sub	sp, sp, #16
   191ac:	str	r0, [fp, #-16]
   191b0:	mov	r3, #0
   191b4:	strh	r3, [fp, #-6]
   191b8:	ldr	r3, [fp, #-16]
   191bc:	cmp	r3, #0
   191c0:	bne	191e4 <_start@@Base+0x67f4>
   191c4:	ldr	r3, [pc, #196]	; 19290 <_start@@Base+0x68a0>
   191c8:	add	r3, pc, r3
   191cc:	movw	r2, #770	; 0x302
   191d0:	ldr	r1, [pc, #188]	; 19294 <_start@@Base+0x68a4>
   191d4:	add	r1, pc, r1
   191d8:	ldr	r0, [pc, #184]	; 19298 <_start@@Base+0x68a8>
   191dc:	add	r0, pc, r0
   191e0:	bl	129e0 <__assert_fail@plt>
   191e4:	mov	r3, #0
   191e8:	strh	r3, [fp, #-8]
   191ec:	ldr	r0, [fp, #-16]
   191f0:	bl	132c4 <_start@@Base+0x8d4>
   191f4:	mov	r3, r0
   191f8:	rsb	r3, r3, #0
   191fc:	ldr	r2, [fp, #-16]
   19200:	add	r3, r2, r3
   19204:	str	r3, [fp, #-12]
   19208:	ldr	r0, [fp, #-12]
   1920c:	bl	13328 <_start@@Base+0x938>
   19210:	mov	r3, r0
   19214:	mov	r2, r3
   19218:	ldrh	r3, [fp, #-8]
   1921c:	add	r3, r3, #3
   19220:	lsl	r3, r3, #1
   19224:	cmp	r2, r3
   19228:	bcc	19250 <_start@@Base+0x6860>
   1922c:	ldrh	r3, [fp, #-8]
   19230:	add	r3, r3, #2
   19234:	lsl	r3, r3, #1
   19238:	ldr	r2, [fp, #-12]
   1923c:	add	r3, r2, r3
   19240:	mov	r0, r3
   19244:	bl	13328 <_start@@Base+0x938>
   19248:	mov	r3, r0
   1924c:	strh	r3, [fp, #-6]
   19250:	ldrh	r3, [fp, #-6]
   19254:	cmp	r3, #0
   19258:	beq	19278 <_start@@Base+0x6888>
   1925c:	ldrh	r3, [fp, #-6]
   19260:	ldr	r2, [fp, #-16]
   19264:	add	r3, r2, r3
   19268:	mov	r0, r3
   1926c:	bl	12e74 <_start@@Base+0x484>
   19270:	mov	r3, r0
   19274:	b	1927c <_start@@Base+0x688c>
   19278:	mov	r3, #0
   1927c:	mov	r0, r3
   19280:	sub	sp, fp, #4
   19284:	ldr	fp, [sp]
   19288:	add	sp, sp, #4
   1928c:	pop	{pc}		; (ldr pc, [sp], #4)
   19290:	andeq	sp, r1, r0, asr r0
   19294:	andeq	r9, r1, r4, lsr #8
   19298:	andeq	r9, r1, r0, asr #9
   1929c:	str	fp, [sp, #-8]!
   192a0:	str	lr, [sp, #4]
   192a4:	add	fp, sp, #4
   192a8:	sub	sp, sp, #8
   192ac:	sub	r3, fp, #12
   192b0:	stm	r3, {r0, r1}
   192b4:	ldr	r3, [fp, #-12]
   192b8:	mov	r0, r3
   192bc:	bl	13574 <_start@@Base+0xb84>
   192c0:	mov	r3, r0
   192c4:	mov	r0, r3
   192c8:	sub	sp, fp, #4
   192cc:	ldr	fp, [sp]
   192d0:	add	sp, sp, #4
   192d4:	pop	{pc}		; (ldr pc, [sp], #4)
   192d8:	str	fp, [sp, #-8]!
   192dc:	str	lr, [sp, #4]
   192e0:	add	fp, sp, #4
   192e4:	sub	sp, sp, #32
   192e8:	str	r0, [fp, #-24]	; 0xffffffe8
   192ec:	sub	r0, fp, #32
   192f0:	stm	r0, {r1, r2}
   192f4:	str	r3, [fp, #-36]	; 0xffffffdc
   192f8:	mov	r3, #0
   192fc:	strb	r3, [fp, #-16]
   19300:	mov	r3, #0
   19304:	str	r3, [fp, #-12]
   19308:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1930c:	mov	r0, r3
   19310:	bl	13574 <_start@@Base+0xb84>
   19314:	str	r0, [fp, #-8]
   19318:	ldr	r2, [fp, #-8]
   1931c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19320:	cmp	r2, r3
   19324:	bhi	19348 <_start@@Base+0x6958>
   19328:	ldr	r3, [pc, #144]	; 193c0 <_start@@Base+0x69d0>
   1932c:	add	r3, pc, r3
   19330:	movw	r2, #773	; 0x305
   19334:	ldr	r1, [pc, #136]	; 193c4 <_start@@Base+0x69d4>
   19338:	add	r1, pc, r1
   1933c:	ldr	r0, [pc, #132]	; 193c8 <_start@@Base+0x69d8>
   19340:	add	r0, pc, r0
   19344:	bl	129e0 <__assert_fail@plt>
   19348:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1934c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19350:	add	r3, r2, r3
   19354:	ldrb	r3, [r3]
   19358:	strb	r3, [fp, #-16]
   1935c:	ldrb	r3, [fp, #-16]
   19360:	cmp	r3, #0
   19364:	bne	19380 <_start@@Base+0x6990>
   19368:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1936c:	mov	r1, r3
   19370:	sub	r3, fp, #16
   19374:	ldrd	r2, [r3]
   19378:	strd	r2, [r1]
   1937c:	b	193ac <_start@@Base+0x69bc>
   19380:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19384:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19388:	mov	r0, r3
   1938c:	bl	1374c <_start@@Base+0xd5c>
   19390:	mov	r3, r0
   19394:	str	r3, [fp, #-12]
   19398:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1939c:	mov	r1, r3
   193a0:	sub	r3, fp, #16
   193a4:	ldrd	r2, [r3]
   193a8:	strd	r2, [r1]
   193ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   193b0:	sub	sp, fp, #4
   193b4:	ldr	fp, [sp]
   193b8:	add	sp, sp, #4
   193bc:	pop	{pc}		; (ldr pc, [sp], #4)
   193c0:	andeq	ip, r1, ip, asr pc
   193c4:	andeq	r9, r1, r0, asr #5
   193c8:	andeq	r9, r1, ip, lsr r3
   193cc:	str	fp, [sp, #-8]!
   193d0:	str	lr, [sp, #4]
   193d4:	add	fp, sp, #4
   193d8:	sub	sp, sp, #16
   193dc:	sub	r3, fp, #12
   193e0:	stm	r3, {r0, r1}
   193e4:	str	r2, [fp, #-16]
   193e8:	ldr	r3, [fp, #-8]
   193ec:	ldr	r1, [fp, #-16]
   193f0:	mov	r0, r3
   193f4:	bl	137e4 <_start@@Base+0xdf4>
   193f8:	mov	r3, r0
   193fc:	mov	r0, r3
   19400:	sub	sp, fp, #4
   19404:	ldr	fp, [sp]
   19408:	add	sp, sp, #4
   1940c:	pop	{pc}		; (ldr pc, [sp], #4)
   19410:	str	fp, [sp, #-8]!
   19414:	str	lr, [sp, #4]
   19418:	add	fp, sp, #4
   1941c:	sub	sp, sp, #16
   19420:	str	r0, [fp, #-16]
   19424:	ldr	r3, [pc, #88]	; 19484 <_start@@Base+0x6a94>
   19428:	add	r3, pc, r3
   1942c:	str	r3, [fp, #-8]
   19430:	ldr	r3, [fp, #-16]
   19434:	cmp	r3, #0
   19438:	beq	1946c <_start@@Base+0x6a7c>
   1943c:	ldr	r1, [fp, #-8]
   19440:	ldr	r0, [fp, #-16]
   19444:	bl	147a4 <_start@@Base+0x1db4>
   19448:	mov	r3, r0
   1944c:	cmp	r3, #0
   19450:	beq	1946c <_start@@Base+0x6a7c>
   19454:	ldr	r0, [fp, #-16]
   19458:	bl	13224 <_start@@Base+0x834>
   1945c:	mov	r2, r0
   19460:	ldr	r3, [fp, #-16]
   19464:	add	r3, r3, r2
   19468:	b	19470 <_start@@Base+0x6a80>
   1946c:	mov	r3, #0
   19470:	mov	r0, r3
   19474:	sub	sp, fp, #4
   19478:	ldr	fp, [sp]
   1947c:	add	sp, sp, #4
   19480:	pop	{pc}		; (ldr pc, [sp], #4)
   19484:	andeq	r9, r1, ip, asr #4
   19488:	str	fp, [sp, #-8]!
   1948c:	str	lr, [sp, #4]
   19490:	add	fp, sp, #4
   19494:	sub	sp, sp, #16
   19498:	str	r0, [fp, #-16]
   1949c:	mov	r3, #0
   194a0:	strh	r3, [fp, #-6]
   194a4:	ldr	r3, [fp, #-16]
   194a8:	cmp	r3, #0
   194ac:	bne	194d0 <_start@@Base+0x6ae0>
   194b0:	ldr	r3, [pc, #196]	; 1957c <_start@@Base+0x6b8c>
   194b4:	add	r3, pc, r3
   194b8:	movw	r2, #819	; 0x333
   194bc:	ldr	r1, [pc, #188]	; 19580 <_start@@Base+0x6b90>
   194c0:	add	r1, pc, r1
   194c4:	ldr	r0, [pc, #184]	; 19584 <_start@@Base+0x6b94>
   194c8:	add	r0, pc, r0
   194cc:	bl	129e0 <__assert_fail@plt>
   194d0:	mov	r3, #0
   194d4:	strh	r3, [fp, #-8]
   194d8:	ldr	r0, [fp, #-16]
   194dc:	bl	132c4 <_start@@Base+0x8d4>
   194e0:	mov	r3, r0
   194e4:	rsb	r3, r3, #0
   194e8:	ldr	r2, [fp, #-16]
   194ec:	add	r3, r2, r3
   194f0:	str	r3, [fp, #-12]
   194f4:	ldr	r0, [fp, #-12]
   194f8:	bl	13328 <_start@@Base+0x938>
   194fc:	mov	r3, r0
   19500:	mov	r2, r3
   19504:	ldrh	r3, [fp, #-8]
   19508:	add	r3, r3, #3
   1950c:	lsl	r3, r3, #1
   19510:	cmp	r2, r3
   19514:	bcc	1953c <_start@@Base+0x6b4c>
   19518:	ldrh	r3, [fp, #-8]
   1951c:	add	r3, r3, #2
   19520:	lsl	r3, r3, #1
   19524:	ldr	r2, [fp, #-12]
   19528:	add	r3, r2, r3
   1952c:	mov	r0, r3
   19530:	bl	13328 <_start@@Base+0x938>
   19534:	mov	r3, r0
   19538:	strh	r3, [fp, #-6]
   1953c:	ldrh	r3, [fp, #-6]
   19540:	cmp	r3, #0
   19544:	beq	19564 <_start@@Base+0x6b74>
   19548:	ldrh	r3, [fp, #-6]
   1954c:	ldr	r2, [fp, #-16]
   19550:	add	r3, r2, r3
   19554:	mov	r0, r3
   19558:	bl	1338c <_start@@Base+0x99c>
   1955c:	mov	r3, r0
   19560:	b	19568 <_start@@Base+0x6b78>
   19564:	mov	r3, #0
   19568:	mov	r0, r3
   1956c:	sub	sp, fp, #4
   19570:	ldr	fp, [sp]
   19574:	add	sp, sp, #4
   19578:	pop	{pc}		; (ldr pc, [sp], #4)
   1957c:	andeq	ip, r1, r0, asr #24
   19580:	andeq	r9, r1, r8, lsr r1
   19584:	ldrdeq	r9, [r1], -r4
   19588:	str	fp, [sp, #-8]!
   1958c:	str	lr, [sp, #4]
   19590:	add	fp, sp, #4
   19594:	sub	sp, sp, #24
   19598:	str	r0, [fp, #-24]	; 0xffffffe8
   1959c:	mov	r3, #0
   195a0:	strh	r3, [fp, #-6]
   195a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   195a8:	cmp	r3, #0
   195ac:	bne	195d0 <_start@@Base+0x6be0>
   195b0:	ldr	r3, [pc, #208]	; 19688 <_start@@Base+0x6c98>
   195b4:	add	r3, pc, r3
   195b8:	movw	r2, #819	; 0x333
   195bc:	ldr	r1, [pc, #200]	; 1968c <_start@@Base+0x6c9c>
   195c0:	add	r1, pc, r1
   195c4:	ldr	r0, [pc, #196]	; 19690 <_start@@Base+0x6ca0>
   195c8:	add	r0, pc, r0
   195cc:	bl	129e0 <__assert_fail@plt>
   195d0:	mov	r3, #1
   195d4:	strh	r3, [fp, #-8]
   195d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   195dc:	bl	132c4 <_start@@Base+0x8d4>
   195e0:	mov	r3, r0
   195e4:	rsb	r3, r3, #0
   195e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   195ec:	add	r3, r2, r3
   195f0:	str	r3, [fp, #-12]
   195f4:	ldr	r0, [fp, #-12]
   195f8:	bl	13328 <_start@@Base+0x938>
   195fc:	mov	r3, r0
   19600:	mov	r2, r3
   19604:	ldrh	r3, [fp, #-8]
   19608:	add	r3, r3, #3
   1960c:	lsl	r3, r3, #1
   19610:	cmp	r2, r3
   19614:	bcc	1963c <_start@@Base+0x6c4c>
   19618:	ldrh	r3, [fp, #-8]
   1961c:	add	r3, r3, #2
   19620:	lsl	r3, r3, #1
   19624:	ldr	r2, [fp, #-12]
   19628:	add	r3, r2, r3
   1962c:	mov	r0, r3
   19630:	bl	13328 <_start@@Base+0x938>
   19634:	mov	r3, r0
   19638:	strh	r3, [fp, #-6]
   1963c:	ldrh	r3, [fp, #-6]
   19640:	cmp	r3, #0
   19644:	beq	19670 <_start@@Base+0x6c80>
   19648:	ldrh	r3, [fp, #-6]
   1964c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19650:	add	r3, r2, r3
   19654:	str	r3, [fp, #-16]
   19658:	ldr	r0, [fp, #-16]
   1965c:	bl	13224 <_start@@Base+0x834>
   19660:	mov	r2, r0
   19664:	ldr	r3, [fp, #-16]
   19668:	add	r3, r3, r2
   1966c:	b	19674 <_start@@Base+0x6c84>
   19670:	mov	r3, #0
   19674:	mov	r0, r3
   19678:	sub	sp, fp, #4
   1967c:	ldr	fp, [sp]
   19680:	add	sp, sp, #4
   19684:	pop	{pc}		; (ldr pc, [sp], #4)
   19688:	andeq	ip, r1, r4, ror #22
   1968c:	andeq	r9, r1, r8, lsr r0
   19690:	ldrdeq	r9, [r1], -r4
   19694:	str	fp, [sp, #-8]!
   19698:	str	lr, [sp, #4]
   1969c:	add	fp, sp, #4
   196a0:	sub	sp, sp, #16
   196a4:	str	r0, [fp, #-16]
   196a8:	mov	r3, #0
   196ac:	strh	r3, [fp, #-6]
   196b0:	ldr	r3, [fp, #-16]
   196b4:	cmp	r3, #0
   196b8:	bne	196dc <_start@@Base+0x6cec>
   196bc:	ldr	r3, [pc, #172]	; 19770 <_start@@Base+0x6d80>
   196c0:	add	r3, pc, r3
   196c4:	movw	r2, #819	; 0x333
   196c8:	ldr	r1, [pc, #164]	; 19774 <_start@@Base+0x6d84>
   196cc:	add	r1, pc, r1
   196d0:	ldr	r0, [pc, #160]	; 19778 <_start@@Base+0x6d88>
   196d4:	add	r0, pc, r0
   196d8:	bl	129e0 <__assert_fail@plt>
   196dc:	mov	r3, #1
   196e0:	strh	r3, [fp, #-8]
   196e4:	ldr	r0, [fp, #-16]
   196e8:	bl	132c4 <_start@@Base+0x8d4>
   196ec:	mov	r3, r0
   196f0:	rsb	r3, r3, #0
   196f4:	ldr	r2, [fp, #-16]
   196f8:	add	r3, r2, r3
   196fc:	str	r3, [fp, #-12]
   19700:	ldr	r0, [fp, #-12]
   19704:	bl	13328 <_start@@Base+0x938>
   19708:	mov	r3, r0
   1970c:	mov	r2, r3
   19710:	ldrh	r3, [fp, #-8]
   19714:	add	r3, r3, #3
   19718:	lsl	r3, r3, #1
   1971c:	cmp	r2, r3
   19720:	bcc	19748 <_start@@Base+0x6d58>
   19724:	ldrh	r3, [fp, #-8]
   19728:	add	r3, r3, #2
   1972c:	lsl	r3, r3, #1
   19730:	ldr	r2, [fp, #-12]
   19734:	add	r3, r2, r3
   19738:	mov	r0, r3
   1973c:	bl	13328 <_start@@Base+0x938>
   19740:	mov	r3, r0
   19744:	strh	r3, [fp, #-6]
   19748:	ldrh	r3, [fp, #-6]
   1974c:	cmp	r3, #0
   19750:	movne	r3, #1
   19754:	moveq	r3, #0
   19758:	uxtb	r3, r3
   1975c:	mov	r0, r3
   19760:	sub	sp, fp, #4
   19764:	ldr	fp, [sp]
   19768:	add	sp, sp, #4
   1976c:	pop	{pc}		; (ldr pc, [sp], #4)
   19770:	andeq	ip, r1, r8, ror #19
   19774:	andeq	r8, r1, ip, lsr #30
   19778:	andeq	r8, r1, r8, asr #31
   1977c:	str	fp, [sp, #-8]!
   19780:	str	lr, [sp, #4]
   19784:	add	fp, sp, #4
   19788:	sub	sp, sp, #16
   1978c:	str	r0, [fp, #-16]
   19790:	str	r1, [fp, #-20]	; 0xffffffec
   19794:	mov	r3, #0
   19798:	strb	r3, [fp, #-12]
   1979c:	mov	r3, #0
   197a0:	str	r3, [fp, #-8]
   197a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   197a8:	bl	19488 <_start@@Base+0x6a98>
   197ac:	mov	r3, r0
   197b0:	strb	r3, [fp, #-12]
   197b4:	ldrb	r3, [fp, #-12]
   197b8:	cmp	r3, #0
   197bc:	bne	197d8 <_start@@Base+0x6de8>
   197c0:	ldr	r3, [fp, #-16]
   197c4:	mov	r1, r3
   197c8:	sub	r3, fp, #12
   197cc:	ldrd	r2, [r3]
   197d0:	strd	r2, [r1]
   197d4:	b	197fc <_start@@Base+0x6e0c>
   197d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   197dc:	bl	19588 <_start@@Base+0x6b98>
   197e0:	mov	r3, r0
   197e4:	str	r3, [fp, #-8]
   197e8:	ldr	r3, [fp, #-16]
   197ec:	mov	r1, r3
   197f0:	sub	r3, fp, #12
   197f4:	ldrd	r2, [r3]
   197f8:	strd	r2, [r1]
   197fc:	ldr	r0, [fp, #-16]
   19800:	sub	sp, fp, #4
   19804:	ldr	fp, [sp]
   19808:	add	sp, sp, #4
   1980c:	pop	{pc}		; (ldr pc, [sp], #4)
   19810:	str	fp, [sp, #-8]!
   19814:	str	lr, [sp, #4]
   19818:	add	fp, sp, #4
   1981c:	sub	sp, sp, #16
   19820:	str	r0, [fp, #-16]
   19824:	mov	r3, #0
   19828:	strh	r3, [fp, #-6]
   1982c:	ldr	r3, [fp, #-16]
   19830:	cmp	r3, #0
   19834:	bne	19858 <_start@@Base+0x6e68>
   19838:	ldr	r3, [pc, #196]	; 19904 <_start@@Base+0x6f14>
   1983c:	add	r3, pc, r3
   19840:	mov	r2, #820	; 0x334
   19844:	ldr	r1, [pc, #188]	; 19908 <_start@@Base+0x6f18>
   19848:	add	r1, pc, r1
   1984c:	ldr	r0, [pc, #184]	; 1990c <_start@@Base+0x6f1c>
   19850:	add	r0, pc, r0
   19854:	bl	129e0 <__assert_fail@plt>
   19858:	mov	r3, #2
   1985c:	strh	r3, [fp, #-8]
   19860:	ldr	r0, [fp, #-16]
   19864:	bl	132c4 <_start@@Base+0x8d4>
   19868:	mov	r3, r0
   1986c:	rsb	r3, r3, #0
   19870:	ldr	r2, [fp, #-16]
   19874:	add	r3, r2, r3
   19878:	str	r3, [fp, #-12]
   1987c:	ldr	r0, [fp, #-12]
   19880:	bl	13328 <_start@@Base+0x938>
   19884:	mov	r3, r0
   19888:	mov	r2, r3
   1988c:	ldrh	r3, [fp, #-8]
   19890:	add	r3, r3, #3
   19894:	lsl	r3, r3, #1
   19898:	cmp	r2, r3
   1989c:	bcc	198c4 <_start@@Base+0x6ed4>
   198a0:	ldrh	r3, [fp, #-8]
   198a4:	add	r3, r3, #2
   198a8:	lsl	r3, r3, #1
   198ac:	ldr	r2, [fp, #-12]
   198b0:	add	r3, r2, r3
   198b4:	mov	r0, r3
   198b8:	bl	13328 <_start@@Base+0x938>
   198bc:	mov	r3, r0
   198c0:	strh	r3, [fp, #-6]
   198c4:	ldrh	r3, [fp, #-6]
   198c8:	cmp	r3, #0
   198cc:	beq	198ec <_start@@Base+0x6efc>
   198d0:	ldrh	r3, [fp, #-6]
   198d4:	ldr	r2, [fp, #-16]
   198d8:	add	r3, r2, r3
   198dc:	mov	r0, r3
   198e0:	bl	1338c <_start@@Base+0x99c>
   198e4:	mov	r3, r0
   198e8:	b	198f0 <_start@@Base+0x6f00>
   198ec:	mov	r3, #0
   198f0:	mov	r0, r3
   198f4:	sub	sp, fp, #4
   198f8:	ldr	fp, [sp]
   198fc:	add	sp, sp, #4
   19900:	pop	{pc}		; (ldr pc, [sp], #4)
   19904:	andeq	ip, r1, ip, lsr #18
   19908:			; <UNDEFINED> instruction: 0x00018db0
   1990c:	andeq	r8, r1, ip, asr #28
   19910:	str	fp, [sp, #-8]!
   19914:	str	lr, [sp, #4]
   19918:	add	fp, sp, #4
   1991c:	sub	sp, sp, #24
   19920:	str	r0, [fp, #-24]	; 0xffffffe8
   19924:	mov	r3, #0
   19928:	strh	r3, [fp, #-6]
   1992c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19930:	cmp	r3, #0
   19934:	bne	19958 <_start@@Base+0x6f68>
   19938:	ldr	r3, [pc, #208]	; 19a10 <_start@@Base+0x7020>
   1993c:	add	r3, pc, r3
   19940:	mov	r2, #820	; 0x334
   19944:	ldr	r1, [pc, #200]	; 19a14 <_start@@Base+0x7024>
   19948:	add	r1, pc, r1
   1994c:	ldr	r0, [pc, #196]	; 19a18 <_start@@Base+0x7028>
   19950:	add	r0, pc, r0
   19954:	bl	129e0 <__assert_fail@plt>
   19958:	mov	r3, #3
   1995c:	strh	r3, [fp, #-8]
   19960:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19964:	bl	132c4 <_start@@Base+0x8d4>
   19968:	mov	r3, r0
   1996c:	rsb	r3, r3, #0
   19970:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19974:	add	r3, r2, r3
   19978:	str	r3, [fp, #-12]
   1997c:	ldr	r0, [fp, #-12]
   19980:	bl	13328 <_start@@Base+0x938>
   19984:	mov	r3, r0
   19988:	mov	r2, r3
   1998c:	ldrh	r3, [fp, #-8]
   19990:	add	r3, r3, #3
   19994:	lsl	r3, r3, #1
   19998:	cmp	r2, r3
   1999c:	bcc	199c4 <_start@@Base+0x6fd4>
   199a0:	ldrh	r3, [fp, #-8]
   199a4:	add	r3, r3, #2
   199a8:	lsl	r3, r3, #1
   199ac:	ldr	r2, [fp, #-12]
   199b0:	add	r3, r2, r3
   199b4:	mov	r0, r3
   199b8:	bl	13328 <_start@@Base+0x938>
   199bc:	mov	r3, r0
   199c0:	strh	r3, [fp, #-6]
   199c4:	ldrh	r3, [fp, #-6]
   199c8:	cmp	r3, #0
   199cc:	beq	199f8 <_start@@Base+0x7008>
   199d0:	ldrh	r3, [fp, #-6]
   199d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   199d8:	add	r3, r2, r3
   199dc:	str	r3, [fp, #-16]
   199e0:	ldr	r0, [fp, #-16]
   199e4:	bl	13224 <_start@@Base+0x834>
   199e8:	mov	r2, r0
   199ec:	ldr	r3, [fp, #-16]
   199f0:	add	r3, r3, r2
   199f4:	b	199fc <_start@@Base+0x700c>
   199f8:	mov	r3, #0
   199fc:	mov	r0, r3
   19a00:	sub	sp, fp, #4
   19a04:	ldr	fp, [sp]
   19a08:	add	sp, sp, #4
   19a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   19a10:	andeq	ip, r1, ip, asr #16
   19a14:			; <UNDEFINED> instruction: 0x00018cb0
   19a18:	andeq	r8, r1, ip, asr #26
   19a1c:	str	fp, [sp, #-8]!
   19a20:	str	lr, [sp, #4]
   19a24:	add	fp, sp, #4
   19a28:	sub	sp, sp, #16
   19a2c:	str	r0, [fp, #-16]
   19a30:	mov	r3, #0
   19a34:	strh	r3, [fp, #-6]
   19a38:	ldr	r3, [fp, #-16]
   19a3c:	cmp	r3, #0
   19a40:	bne	19a64 <_start@@Base+0x7074>
   19a44:	ldr	r3, [pc, #196]	; 19b10 <_start@@Base+0x7120>
   19a48:	add	r3, pc, r3
   19a4c:	movw	r2, #821	; 0x335
   19a50:	ldr	r1, [pc, #188]	; 19b14 <_start@@Base+0x7124>
   19a54:	add	r1, pc, r1
   19a58:	ldr	r0, [pc, #184]	; 19b18 <_start@@Base+0x7128>
   19a5c:	add	r0, pc, r0
   19a60:	bl	129e0 <__assert_fail@plt>
   19a64:	mov	r3, #4
   19a68:	strh	r3, [fp, #-8]
   19a6c:	ldr	r0, [fp, #-16]
   19a70:	bl	132c4 <_start@@Base+0x8d4>
   19a74:	mov	r3, r0
   19a78:	rsb	r3, r3, #0
   19a7c:	ldr	r2, [fp, #-16]
   19a80:	add	r3, r2, r3
   19a84:	str	r3, [fp, #-12]
   19a88:	ldr	r0, [fp, #-12]
   19a8c:	bl	13328 <_start@@Base+0x938>
   19a90:	mov	r3, r0
   19a94:	mov	r2, r3
   19a98:	ldrh	r3, [fp, #-8]
   19a9c:	add	r3, r3, #3
   19aa0:	lsl	r3, r3, #1
   19aa4:	cmp	r2, r3
   19aa8:	bcc	19ad0 <_start@@Base+0x70e0>
   19aac:	ldrh	r3, [fp, #-8]
   19ab0:	add	r3, r3, #2
   19ab4:	lsl	r3, r3, #1
   19ab8:	ldr	r2, [fp, #-12]
   19abc:	add	r3, r2, r3
   19ac0:	mov	r0, r3
   19ac4:	bl	13328 <_start@@Base+0x938>
   19ac8:	mov	r3, r0
   19acc:	strh	r3, [fp, #-6]
   19ad0:	ldrh	r3, [fp, #-6]
   19ad4:	cmp	r3, #0
   19ad8:	beq	19af8 <_start@@Base+0x7108>
   19adc:	ldrh	r3, [fp, #-6]
   19ae0:	ldr	r2, [fp, #-16]
   19ae4:	add	r3, r2, r3
   19ae8:	mov	r0, r3
   19aec:	bl	1338c <_start@@Base+0x99c>
   19af0:	mov	r3, r0
   19af4:	b	19afc <_start@@Base+0x710c>
   19af8:	mov	r3, #0
   19afc:	mov	r0, r3
   19b00:	sub	sp, fp, #4
   19b04:	ldr	fp, [sp]
   19b08:	add	sp, sp, #4
   19b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   19b10:	andeq	ip, r1, ip, asr r7
   19b14:	andeq	r8, r1, r4, lsr #23
   19b18:	andeq	r8, r1, r0, asr #24
   19b1c:	str	fp, [sp, #-8]!
   19b20:	str	lr, [sp, #4]
   19b24:	add	fp, sp, #4
   19b28:	sub	sp, sp, #24
   19b2c:	str	r0, [fp, #-24]	; 0xffffffe8
   19b30:	mov	r3, #0
   19b34:	strh	r3, [fp, #-6]
   19b38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19b3c:	cmp	r3, #0
   19b40:	bne	19b64 <_start@@Base+0x7174>
   19b44:	ldr	r3, [pc, #208]	; 19c1c <_start@@Base+0x722c>
   19b48:	add	r3, pc, r3
   19b4c:	movw	r2, #821	; 0x335
   19b50:	ldr	r1, [pc, #200]	; 19c20 <_start@@Base+0x7230>
   19b54:	add	r1, pc, r1
   19b58:	ldr	r0, [pc, #196]	; 19c24 <_start@@Base+0x7234>
   19b5c:	add	r0, pc, r0
   19b60:	bl	129e0 <__assert_fail@plt>
   19b64:	mov	r3, #5
   19b68:	strh	r3, [fp, #-8]
   19b6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19b70:	bl	132c4 <_start@@Base+0x8d4>
   19b74:	mov	r3, r0
   19b78:	rsb	r3, r3, #0
   19b7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19b80:	add	r3, r2, r3
   19b84:	str	r3, [fp, #-12]
   19b88:	ldr	r0, [fp, #-12]
   19b8c:	bl	13328 <_start@@Base+0x938>
   19b90:	mov	r3, r0
   19b94:	mov	r2, r3
   19b98:	ldrh	r3, [fp, #-8]
   19b9c:	add	r3, r3, #3
   19ba0:	lsl	r3, r3, #1
   19ba4:	cmp	r2, r3
   19ba8:	bcc	19bd0 <_start@@Base+0x71e0>
   19bac:	ldrh	r3, [fp, #-8]
   19bb0:	add	r3, r3, #2
   19bb4:	lsl	r3, r3, #1
   19bb8:	ldr	r2, [fp, #-12]
   19bbc:	add	r3, r2, r3
   19bc0:	mov	r0, r3
   19bc4:	bl	13328 <_start@@Base+0x938>
   19bc8:	mov	r3, r0
   19bcc:	strh	r3, [fp, #-6]
   19bd0:	ldrh	r3, [fp, #-6]
   19bd4:	cmp	r3, #0
   19bd8:	beq	19c04 <_start@@Base+0x7214>
   19bdc:	ldrh	r3, [fp, #-6]
   19be0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19be4:	add	r3, r2, r3
   19be8:	str	r3, [fp, #-16]
   19bec:	ldr	r0, [fp, #-16]
   19bf0:	bl	13224 <_start@@Base+0x834>
   19bf4:	mov	r2, r0
   19bf8:	ldr	r3, [fp, #-16]
   19bfc:	add	r3, r3, r2
   19c00:	b	19c08 <_start@@Base+0x7218>
   19c04:	mov	r3, #0
   19c08:	mov	r0, r3
   19c0c:	sub	sp, fp, #4
   19c10:	ldr	fp, [sp]
   19c14:	add	sp, sp, #4
   19c18:	pop	{pc}		; (ldr pc, [sp], #4)
   19c1c:	andeq	ip, r1, ip, ror r6
   19c20:	andeq	r8, r1, r4, lsr #21
   19c24:	andeq	r8, r1, r0, asr #22
   19c28:	str	fp, [sp, #-8]!
   19c2c:	str	lr, [sp, #4]
   19c30:	add	fp, sp, #4
   19c34:	sub	sp, sp, #16
   19c38:	str	r0, [fp, #-16]
   19c3c:	str	r1, [fp, #-20]	; 0xffffffec
   19c40:	mov	r3, #0
   19c44:	strb	r3, [fp, #-12]
   19c48:	mov	r3, #0
   19c4c:	str	r3, [fp, #-8]
   19c50:	ldr	r0, [fp, #-20]	; 0xffffffec
   19c54:	bl	19a1c <_start@@Base+0x702c>
   19c58:	mov	r3, r0
   19c5c:	strb	r3, [fp, #-12]
   19c60:	ldrb	r3, [fp, #-12]
   19c64:	cmp	r3, #0
   19c68:	bne	19c84 <_start@@Base+0x7294>
   19c6c:	ldr	r3, [fp, #-16]
   19c70:	mov	r1, r3
   19c74:	sub	r3, fp, #12
   19c78:	ldrd	r2, [r3]
   19c7c:	strd	r2, [r1]
   19c80:	b	19ca8 <_start@@Base+0x72b8>
   19c84:	ldr	r0, [fp, #-20]	; 0xffffffec
   19c88:	bl	19b1c <_start@@Base+0x712c>
   19c8c:	mov	r3, r0
   19c90:	str	r3, [fp, #-8]
   19c94:	ldr	r3, [fp, #-16]
   19c98:	mov	r1, r3
   19c9c:	sub	r3, fp, #12
   19ca0:	ldrd	r2, [r3]
   19ca4:	strd	r2, [r1]
   19ca8:	ldr	r0, [fp, #-16]
   19cac:	sub	sp, fp, #4
   19cb0:	ldr	fp, [sp]
   19cb4:	add	sp, sp, #4
   19cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   19cbc:	str	fp, [sp, #-8]!
   19cc0:	str	lr, [sp, #4]
   19cc4:	add	fp, sp, #4
   19cc8:	sub	sp, sp, #8
   19ccc:	str	r0, [fp, #-8]
   19cd0:	ldr	r0, [fp, #-8]
   19cd4:	bl	19b1c <_start@@Base+0x712c>
   19cd8:	mov	r3, r0
   19cdc:	mov	r0, r3
   19ce0:	bl	13700 <_start@@Base+0xd10>
   19ce4:	mov	r3, r0
   19ce8:	mov	r0, r3
   19cec:	sub	sp, fp, #4
   19cf0:	ldr	fp, [sp]
   19cf4:	add	sp, sp, #4
   19cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   19cfc:	str	fp, [sp, #-8]!
   19d00:	str	lr, [sp, #4]
   19d04:	add	fp, sp, #4
   19d08:	sub	sp, sp, #16
   19d0c:	str	r0, [fp, #-16]
   19d10:	mov	r3, #0
   19d14:	strh	r3, [fp, #-6]
   19d18:	ldr	r3, [fp, #-16]
   19d1c:	cmp	r3, #0
   19d20:	bne	19d44 <_start@@Base+0x7354>
   19d24:	ldr	r3, [pc, #196]	; 19df0 <_start@@Base+0x7400>
   19d28:	add	r3, pc, r3
   19d2c:	movw	r2, #822	; 0x336
   19d30:	ldr	r1, [pc, #188]	; 19df4 <_start@@Base+0x7404>
   19d34:	add	r1, pc, r1
   19d38:	ldr	r0, [pc, #184]	; 19df8 <_start@@Base+0x7408>
   19d3c:	add	r0, pc, r0
   19d40:	bl	129e0 <__assert_fail@plt>
   19d44:	mov	r3, #6
   19d48:	strh	r3, [fp, #-8]
   19d4c:	ldr	r0, [fp, #-16]
   19d50:	bl	132c4 <_start@@Base+0x8d4>
   19d54:	mov	r3, r0
   19d58:	rsb	r3, r3, #0
   19d5c:	ldr	r2, [fp, #-16]
   19d60:	add	r3, r2, r3
   19d64:	str	r3, [fp, #-12]
   19d68:	ldr	r0, [fp, #-12]
   19d6c:	bl	13328 <_start@@Base+0x938>
   19d70:	mov	r3, r0
   19d74:	mov	r2, r3
   19d78:	ldrh	r3, [fp, #-8]
   19d7c:	add	r3, r3, #3
   19d80:	lsl	r3, r3, #1
   19d84:	cmp	r2, r3
   19d88:	bcc	19db0 <_start@@Base+0x73c0>
   19d8c:	ldrh	r3, [fp, #-8]
   19d90:	add	r3, r3, #2
   19d94:	lsl	r3, r3, #1
   19d98:	ldr	r2, [fp, #-12]
   19d9c:	add	r3, r2, r3
   19da0:	mov	r0, r3
   19da4:	bl	13328 <_start@@Base+0x938>
   19da8:	mov	r3, r0
   19dac:	strh	r3, [fp, #-6]
   19db0:	ldrh	r3, [fp, #-6]
   19db4:	cmp	r3, #0
   19db8:	beq	19dd8 <_start@@Base+0x73e8>
   19dbc:	ldrh	r3, [fp, #-6]
   19dc0:	ldr	r2, [fp, #-16]
   19dc4:	add	r3, r2, r3
   19dc8:	mov	r0, r3
   19dcc:	bl	1338c <_start@@Base+0x99c>
   19dd0:	mov	r3, r0
   19dd4:	b	19ddc <_start@@Base+0x73ec>
   19dd8:	mov	r3, #0
   19ddc:	mov	r0, r3
   19de0:	sub	sp, fp, #4
   19de4:	ldr	fp, [sp]
   19de8:	add	sp, sp, #4
   19dec:	pop	{pc}		; (ldr pc, [sp], #4)
   19df0:	andeq	ip, r1, r0, lsl r4
   19df4:	andeq	r8, r1, r4, asr #17
   19df8:	andeq	r8, r1, r0, ror #18
   19dfc:	str	fp, [sp, #-8]!
   19e00:	str	lr, [sp, #4]
   19e04:	add	fp, sp, #4
   19e08:	sub	sp, sp, #24
   19e0c:	str	r0, [fp, #-24]	; 0xffffffe8
   19e10:	mov	r3, #0
   19e14:	strh	r3, [fp, #-6]
   19e18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19e1c:	cmp	r3, #0
   19e20:	bne	19e44 <_start@@Base+0x7454>
   19e24:	ldr	r3, [pc, #208]	; 19efc <_start@@Base+0x750c>
   19e28:	add	r3, pc, r3
   19e2c:	movw	r2, #822	; 0x336
   19e30:	ldr	r1, [pc, #200]	; 19f00 <_start@@Base+0x7510>
   19e34:	add	r1, pc, r1
   19e38:	ldr	r0, [pc, #196]	; 19f04 <_start@@Base+0x7514>
   19e3c:	add	r0, pc, r0
   19e40:	bl	129e0 <__assert_fail@plt>
   19e44:	mov	r3, #7
   19e48:	strh	r3, [fp, #-8]
   19e4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19e50:	bl	132c4 <_start@@Base+0x8d4>
   19e54:	mov	r3, r0
   19e58:	rsb	r3, r3, #0
   19e5c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19e60:	add	r3, r2, r3
   19e64:	str	r3, [fp, #-12]
   19e68:	ldr	r0, [fp, #-12]
   19e6c:	bl	13328 <_start@@Base+0x938>
   19e70:	mov	r3, r0
   19e74:	mov	r2, r3
   19e78:	ldrh	r3, [fp, #-8]
   19e7c:	add	r3, r3, #3
   19e80:	lsl	r3, r3, #1
   19e84:	cmp	r2, r3
   19e88:	bcc	19eb0 <_start@@Base+0x74c0>
   19e8c:	ldrh	r3, [fp, #-8]
   19e90:	add	r3, r3, #2
   19e94:	lsl	r3, r3, #1
   19e98:	ldr	r2, [fp, #-12]
   19e9c:	add	r3, r2, r3
   19ea0:	mov	r0, r3
   19ea4:	bl	13328 <_start@@Base+0x938>
   19ea8:	mov	r3, r0
   19eac:	strh	r3, [fp, #-6]
   19eb0:	ldrh	r3, [fp, #-6]
   19eb4:	cmp	r3, #0
   19eb8:	beq	19ee4 <_start@@Base+0x74f4>
   19ebc:	ldrh	r3, [fp, #-6]
   19ec0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19ec4:	add	r3, r2, r3
   19ec8:	str	r3, [fp, #-16]
   19ecc:	ldr	r0, [fp, #-16]
   19ed0:	bl	13224 <_start@@Base+0x834>
   19ed4:	mov	r2, r0
   19ed8:	ldr	r3, [fp, #-16]
   19edc:	add	r3, r3, r2
   19ee0:	b	19ee8 <_start@@Base+0x74f8>
   19ee4:	mov	r3, #0
   19ee8:	mov	r0, r3
   19eec:	sub	sp, fp, #4
   19ef0:	ldr	fp, [sp]
   19ef4:	add	sp, sp, #4
   19ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   19efc:	andeq	ip, r1, ip, lsr #6
   19f00:	andeq	r8, r1, r4, asr #15
   19f04:	andeq	r8, r1, r0, ror #16
   19f08:	str	fp, [sp, #-8]!
   19f0c:	str	lr, [sp, #4]
   19f10:	add	fp, sp, #4
   19f14:	sub	sp, sp, #24
   19f18:	str	r0, [fp, #-24]	; 0xffffffe8
   19f1c:	mov	r3, #0
   19f20:	strh	r3, [fp, #-6]
   19f24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19f28:	cmp	r3, #0
   19f2c:	bne	19f50 <_start@@Base+0x7560>
   19f30:	ldr	r3, [pc, #212]	; 1a00c <_start@@Base+0x761c>
   19f34:	add	r3, pc, r3
   19f38:	movw	r2, #823	; 0x337
   19f3c:	ldr	r1, [pc, #204]	; 1a010 <_start@@Base+0x7620>
   19f40:	add	r1, pc, r1
   19f44:	ldr	r0, [pc, #200]	; 1a014 <_start@@Base+0x7624>
   19f48:	add	r0, pc, r0
   19f4c:	bl	129e0 <__assert_fail@plt>
   19f50:	mov	r3, #8
   19f54:	strh	r3, [fp, #-8]
   19f58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19f5c:	bl	132c4 <_start@@Base+0x8d4>
   19f60:	mov	r3, r0
   19f64:	rsb	r3, r3, #0
   19f68:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19f6c:	add	r3, r2, r3
   19f70:	str	r3, [fp, #-12]
   19f74:	ldr	r0, [fp, #-12]
   19f78:	bl	13328 <_start@@Base+0x938>
   19f7c:	mov	r3, r0
   19f80:	mov	r2, r3
   19f84:	ldrh	r3, [fp, #-8]
   19f88:	add	r3, r3, #3
   19f8c:	lsl	r3, r3, #1
   19f90:	cmp	r2, r3
   19f94:	bcc	19fbc <_start@@Base+0x75cc>
   19f98:	ldrh	r3, [fp, #-8]
   19f9c:	add	r3, r3, #2
   19fa0:	lsl	r3, r3, #1
   19fa4:	ldr	r2, [fp, #-12]
   19fa8:	add	r3, r2, r3
   19fac:	mov	r0, r3
   19fb0:	bl	13328 <_start@@Base+0x938>
   19fb4:	mov	r3, r0
   19fb8:	strh	r3, [fp, #-6]
   19fbc:	ldrh	r3, [fp, #-6]
   19fc0:	cmp	r3, #0
   19fc4:	beq	19ff4 <_start@@Base+0x7604>
   19fc8:	ldrh	r3, [fp, #-6]
   19fcc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19fd0:	add	r3, r2, r3
   19fd4:	str	r3, [fp, #-16]
   19fd8:	ldr	r0, [fp, #-16]
   19fdc:	bl	13224 <_start@@Base+0x834>
   19fe0:	mov	r3, r0
   19fe4:	add	r3, r3, #4
   19fe8:	ldr	r2, [fp, #-16]
   19fec:	add	r3, r2, r3
   19ff0:	b	19ff8 <_start@@Base+0x7608>
   19ff4:	mov	r3, #0
   19ff8:	mov	r0, r3
   19ffc:	sub	sp, fp, #4
   1a000:	ldr	fp, [sp]
   1a004:	add	sp, sp, #4
   1a008:	pop	{pc}		; (ldr pc, [sp], #4)
   1a00c:	andeq	ip, r1, ip, lsl #6
   1a010:			; <UNDEFINED> instruction: 0x000186b8
   1a014:	andeq	r8, r1, r4, asr r7
   1a018:	str	fp, [sp, #-8]!
   1a01c:	str	lr, [sp, #4]
   1a020:	add	fp, sp, #4
   1a024:	sub	sp, sp, #24
   1a028:	str	r0, [fp, #-24]	; 0xffffffe8
   1a02c:	mov	r3, #0
   1a030:	strh	r3, [fp, #-6]
   1a034:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a038:	cmp	r3, #0
   1a03c:	bne	1a060 <_start@@Base+0x7670>
   1a040:	ldr	r3, [pc, #212]	; 1a11c <_start@@Base+0x772c>
   1a044:	add	r3, pc, r3
   1a048:	movw	r2, #823	; 0x337
   1a04c:	ldr	r1, [pc, #204]	; 1a120 <_start@@Base+0x7730>
   1a050:	add	r1, pc, r1
   1a054:	ldr	r0, [pc, #200]	; 1a124 <_start@@Base+0x7734>
   1a058:	add	r0, pc, r0
   1a05c:	bl	129e0 <__assert_fail@plt>
   1a060:	mov	r3, #9
   1a064:	strh	r3, [fp, #-8]
   1a068:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a06c:	bl	132c4 <_start@@Base+0x8d4>
   1a070:	mov	r3, r0
   1a074:	rsb	r3, r3, #0
   1a078:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a07c:	add	r3, r2, r3
   1a080:	str	r3, [fp, #-12]
   1a084:	ldr	r0, [fp, #-12]
   1a088:	bl	13328 <_start@@Base+0x938>
   1a08c:	mov	r3, r0
   1a090:	mov	r2, r3
   1a094:	ldrh	r3, [fp, #-8]
   1a098:	add	r3, r3, #3
   1a09c:	lsl	r3, r3, #1
   1a0a0:	cmp	r2, r3
   1a0a4:	bcc	1a0cc <_start@@Base+0x76dc>
   1a0a8:	ldrh	r3, [fp, #-8]
   1a0ac:	add	r3, r3, #2
   1a0b0:	lsl	r3, r3, #1
   1a0b4:	ldr	r2, [fp, #-12]
   1a0b8:	add	r3, r2, r3
   1a0bc:	mov	r0, r3
   1a0c0:	bl	13328 <_start@@Base+0x938>
   1a0c4:	mov	r3, r0
   1a0c8:	strh	r3, [fp, #-6]
   1a0cc:	ldrh	r3, [fp, #-6]
   1a0d0:	cmp	r3, #0
   1a0d4:	beq	1a104 <_start@@Base+0x7714>
   1a0d8:	ldrh	r3, [fp, #-6]
   1a0dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a0e0:	add	r3, r2, r3
   1a0e4:	str	r3, [fp, #-16]
   1a0e8:	ldr	r0, [fp, #-16]
   1a0ec:	bl	13224 <_start@@Base+0x834>
   1a0f0:	mov	r3, r0
   1a0f4:	add	r3, r3, #4
   1a0f8:	ldr	r2, [fp, #-16]
   1a0fc:	add	r3, r2, r3
   1a100:	b	1a108 <_start@@Base+0x7718>
   1a104:	mov	r3, #0
   1a108:	mov	r0, r3
   1a10c:	sub	sp, fp, #4
   1a110:	ldr	fp, [sp]
   1a114:	add	sp, sp, #4
   1a118:	pop	{pc}		; (ldr pc, [sp], #4)
   1a11c:			; <UNDEFINED> instruction: 0x0001c1b8
   1a120:	andeq	r8, r1, r8, lsr #11
   1a124:	andeq	r8, r1, r4, asr #12
   1a128:	str	fp, [sp, #-8]!
   1a12c:	str	lr, [sp, #4]
   1a130:	add	fp, sp, #4
   1a134:	sub	sp, sp, #16
   1a138:	str	r0, [fp, #-16]
   1a13c:	mov	r3, #0
   1a140:	strh	r3, [fp, #-6]
   1a144:	ldr	r3, [fp, #-16]
   1a148:	cmp	r3, #0
   1a14c:	bne	1a170 <_start@@Base+0x7780>
   1a150:	ldr	r3, [pc, #172]	; 1a204 <_start@@Base+0x7814>
   1a154:	add	r3, pc, r3
   1a158:	movw	r2, #823	; 0x337
   1a15c:	ldr	r1, [pc, #164]	; 1a208 <_start@@Base+0x7818>
   1a160:	add	r1, pc, r1
   1a164:	ldr	r0, [pc, #160]	; 1a20c <_start@@Base+0x781c>
   1a168:	add	r0, pc, r0
   1a16c:	bl	129e0 <__assert_fail@plt>
   1a170:	mov	r3, #9
   1a174:	strh	r3, [fp, #-8]
   1a178:	ldr	r0, [fp, #-16]
   1a17c:	bl	132c4 <_start@@Base+0x8d4>
   1a180:	mov	r3, r0
   1a184:	rsb	r3, r3, #0
   1a188:	ldr	r2, [fp, #-16]
   1a18c:	add	r3, r2, r3
   1a190:	str	r3, [fp, #-12]
   1a194:	ldr	r0, [fp, #-12]
   1a198:	bl	13328 <_start@@Base+0x938>
   1a19c:	mov	r3, r0
   1a1a0:	mov	r2, r3
   1a1a4:	ldrh	r3, [fp, #-8]
   1a1a8:	add	r3, r3, #3
   1a1ac:	lsl	r3, r3, #1
   1a1b0:	cmp	r2, r3
   1a1b4:	bcc	1a1dc <_start@@Base+0x77ec>
   1a1b8:	ldrh	r3, [fp, #-8]
   1a1bc:	add	r3, r3, #2
   1a1c0:	lsl	r3, r3, #1
   1a1c4:	ldr	r2, [fp, #-12]
   1a1c8:	add	r3, r2, r3
   1a1cc:	mov	r0, r3
   1a1d0:	bl	13328 <_start@@Base+0x938>
   1a1d4:	mov	r3, r0
   1a1d8:	strh	r3, [fp, #-6]
   1a1dc:	ldrh	r3, [fp, #-6]
   1a1e0:	cmp	r3, #0
   1a1e4:	movne	r3, #1
   1a1e8:	moveq	r3, #0
   1a1ec:	uxtb	r3, r3
   1a1f0:	mov	r0, r3
   1a1f4:	sub	sp, fp, #4
   1a1f8:	ldr	fp, [sp]
   1a1fc:	add	sp, sp, #4
   1a200:	pop	{pc}		; (ldr pc, [sp], #4)
   1a204:	andeq	fp, r1, ip, ror pc
   1a208:	muleq	r1, r8, r4
   1a20c:	andeq	r8, r1, r4, lsr r5
   1a210:	str	r4, [sp, #-12]!
   1a214:	str	fp, [sp, #4]
   1a218:	str	lr, [sp, #8]
   1a21c:	add	fp, sp, #8
   1a220:	sub	sp, sp, #20
   1a224:	str	r0, [fp, #-24]	; 0xffffffe8
   1a228:	str	r1, [fp, #-28]	; 0xffffffe4
   1a22c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a230:	bl	19f08 <_start@@Base+0x7518>
   1a234:	mov	r3, r0
   1a238:	str	r3, [fp, #-20]	; 0xffffffec
   1a23c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a240:	bl	1a018 <_start@@Base+0x7628>
   1a244:	mov	r3, r0
   1a248:	str	r3, [fp, #-16]
   1a24c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a250:	mov	r0, r3
   1a254:	bl	13574 <_start@@Base+0xb84>
   1a258:	mov	r4, r0
   1a25c:	ldr	r3, [fp, #-16]
   1a260:	mov	r0, r3
   1a264:	bl	13574 <_start@@Base+0xb84>
   1a268:	mov	r3, r0
   1a26c:	cmp	r4, r3
   1a270:	beq	1a294 <_start@@Base+0x78a4>
   1a274:	ldr	r3, [pc, #68]	; 1a2c0 <_start@@Base+0x78d0>
   1a278:	add	r3, pc, r3
   1a27c:	movw	r2, #823	; 0x337
   1a280:	ldr	r1, [pc, #60]	; 1a2c4 <_start@@Base+0x78d4>
   1a284:	add	r1, pc, r1
   1a288:	ldr	r0, [pc, #56]	; 1a2c8 <_start@@Base+0x78d8>
   1a28c:	add	r0, pc, r0
   1a290:	bl	129e0 <__assert_fail@plt>
   1a294:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a298:	mov	r1, r3
   1a29c:	sub	r3, fp, #20
   1a2a0:	ldrd	r2, [r3]
   1a2a4:	strd	r2, [r1]
   1a2a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a2ac:	sub	sp, fp, #8
   1a2b0:	ldr	r4, [sp]
   1a2b4:	ldr	fp, [sp, #4]
   1a2b8:	add	sp, sp, #8
   1a2bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2c0:	andeq	fp, r1, r4, ror #30
   1a2c4:	andeq	r8, r1, r4, ror r3
   1a2c8:	andeq	r8, r1, r8, lsr r4
   1a2cc:	push	{fp}		; (str fp, [sp, #-4]!)
   1a2d0:	add	fp, sp, #0
   1a2d4:	sub	sp, sp, #12
   1a2d8:	str	r0, [fp, #-8]
   1a2dc:	ldr	r3, [fp, #-8]
   1a2e0:	ldr	r3, [r3, #24]
   1a2e4:	mov	r0, r3
   1a2e8:	add	sp, fp, #0
   1a2ec:	pop	{fp}		; (ldr fp, [sp], #4)
   1a2f0:	bx	lr
   1a2f4:	str	fp, [sp, #-8]!
   1a2f8:	str	lr, [sp, #4]
   1a2fc:	add	fp, sp, #4
   1a300:	sub	sp, sp, #8
   1a304:	str	r0, [fp, #-8]
   1a308:	mov	r3, r1
   1a30c:	strb	r3, [fp, #-9]
   1a310:	ldrb	r3, [fp, #-9]
   1a314:	mov	r0, r3
   1a318:	bl	12b08 <_start@@Base+0x118>
   1a31c:	mov	r3, r0
   1a320:	mov	r2, r3
   1a324:	ldr	r3, [fp, #-8]
   1a328:	strb	r2, [r3]
   1a32c:	ldr	r3, [fp, #-8]
   1a330:	mov	r0, r3
   1a334:	sub	sp, fp, #4
   1a338:	ldr	fp, [sp]
   1a33c:	add	sp, sp, #4
   1a340:	pop	{pc}		; (ldr pc, [sp], #4)
   1a344:	str	fp, [sp, #-8]!
   1a348:	str	lr, [sp, #4]
   1a34c:	add	fp, sp, #4
   1a350:	sub	sp, sp, #24
   1a354:	str	r0, [fp, #-8]
   1a358:	str	r1, [fp, #-12]
   1a35c:	str	r2, [fp, #-16]
   1a360:	mvn	r3, #0
   1a364:	str	r3, [sp, #4]
   1a368:	mov	r3, #1
   1a36c:	str	r3, [sp]
   1a370:	mov	r3, #1
   1a374:	ldr	r2, [fp, #-16]
   1a378:	ldr	r1, [fp, #-12]
   1a37c:	ldr	r0, [fp, #-8]
   1a380:	bl	2ce8c <flatcc_builder_create_vector@@Base>
   1a384:	mov	r3, r0
   1a388:	mov	r0, r3
   1a38c:	sub	sp, fp, #4
   1a390:	ldr	fp, [sp]
   1a394:	add	sp, sp, #4
   1a398:	pop	{pc}		; (ldr pc, [sp], #4)
   1a39c:	str	fp, [sp, #-8]!
   1a3a0:	str	lr, [sp, #4]
   1a3a4:	add	fp, sp, #4
   1a3a8:	sub	sp, sp, #8
   1a3ac:	str	r0, [fp, #-8]
   1a3b0:	mov	r3, r1
   1a3b4:	strb	r3, [fp, #-9]
   1a3b8:	ldrsb	r3, [fp, #-9]
   1a3bc:	mov	r0, r3
   1a3c0:	bl	12d3c <_start@@Base+0x34c>
   1a3c4:	mov	r3, r0
   1a3c8:	mov	r2, r3
   1a3cc:	ldr	r3, [fp, #-8]
   1a3d0:	strb	r2, [r3]
   1a3d4:	ldr	r3, [fp, #-8]
   1a3d8:	mov	r0, r3
   1a3dc:	sub	sp, fp, #4
   1a3e0:	ldr	fp, [sp]
   1a3e4:	add	sp, sp, #4
   1a3e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3ec:	str	fp, [sp, #-8]!
   1a3f0:	str	lr, [sp, #4]
   1a3f4:	add	fp, sp, #4
   1a3f8:	sub	sp, sp, #8
   1a3fc:	str	r0, [fp, #-8]
   1a400:	mov	r3, r1
   1a404:	strb	r3, [fp, #-9]
   1a408:	ldrb	r3, [fp, #-9]
   1a40c:	mov	r0, r3
   1a410:	bl	130c8 <_start@@Base+0x6d8>
   1a414:	mov	r3, r0
   1a418:	mov	r2, r3
   1a41c:	ldr	r3, [fp, #-8]
   1a420:	strb	r2, [r3]
   1a424:	ldr	r3, [fp, #-8]
   1a428:	mov	r0, r3
   1a42c:	sub	sp, fp, #4
   1a430:	ldr	fp, [sp]
   1a434:	add	sp, sp, #4
   1a438:	pop	{pc}		; (ldr pc, [sp], #4)
   1a43c:	str	fp, [sp, #-8]!
   1a440:	str	lr, [sp, #4]
   1a444:	add	fp, sp, #4
   1a448:	sub	sp, sp, #8
   1a44c:	str	r0, [fp, #-8]
   1a450:	mvn	r3, #0
   1a454:	mov	r2, #1
   1a458:	mov	r1, #1
   1a45c:	ldr	r0, [fp, #-8]
   1a460:	bl	2bdc0 <flatcc_builder_start_vector@@Base>
   1a464:	mov	r3, r0
   1a468:	mov	r0, r3
   1a46c:	sub	sp, fp, #4
   1a470:	ldr	fp, [sp]
   1a474:	add	sp, sp, #4
   1a478:	pop	{pc}		; (ldr pc, [sp], #4)
   1a47c:	str	fp, [sp, #-8]!
   1a480:	str	lr, [sp, #4]
   1a484:	add	fp, sp, #4
   1a488:	sub	sp, sp, #8
   1a48c:	str	r0, [fp, #-8]
   1a490:	ldr	r0, [fp, #-8]
   1a494:	bl	2d0bc <flatcc_builder_end_vector@@Base>
   1a498:	mov	r3, r0
   1a49c:	mov	r0, r3
   1a4a0:	sub	sp, fp, #4
   1a4a4:	ldr	fp, [sp]
   1a4a8:	add	sp, sp, #4
   1a4ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4b0:	str	fp, [sp, #-8]!
   1a4b4:	str	lr, [sp, #4]
   1a4b8:	add	fp, sp, #4
   1a4bc:	sub	sp, sp, #24
   1a4c0:	str	r0, [fp, #-8]
   1a4c4:	str	r1, [fp, #-12]
   1a4c8:	str	r2, [fp, #-16]
   1a4cc:	mvn	r3, #0
   1a4d0:	str	r3, [sp, #4]
   1a4d4:	mov	r3, #1
   1a4d8:	str	r3, [sp]
   1a4dc:	mov	r3, #1
   1a4e0:	ldr	r2, [fp, #-16]
   1a4e4:	ldr	r1, [fp, #-12]
   1a4e8:	ldr	r0, [fp, #-8]
   1a4ec:	bl	2ce8c <flatcc_builder_create_vector@@Base>
   1a4f0:	mov	r3, r0
   1a4f4:	mov	r0, r3
   1a4f8:	sub	sp, fp, #4
   1a4fc:	ldr	fp, [sp]
   1a500:	add	sp, sp, #4
   1a504:	pop	{pc}		; (ldr pc, [sp], #4)
   1a508:	str	fp, [sp, #-8]!
   1a50c:	str	lr, [sp, #4]
   1a510:	add	fp, sp, #4
   1a514:	sub	sp, sp, #16
   1a518:	str	r0, [fp, #-8]
   1a51c:	str	r1, [fp, #-12]
   1a520:	ldr	r0, [fp, #-12]
   1a524:	bl	139a4 <_start@@Base+0xfb4>
   1a528:	mov	r2, r0
   1a52c:	mvn	r3, #0
   1a530:	str	r3, [sp, #4]
   1a534:	mov	r3, #1
   1a538:	str	r3, [sp]
   1a53c:	mov	r3, #1
   1a540:	ldr	r1, [fp, #-12]
   1a544:	ldr	r0, [fp, #-8]
   1a548:	bl	2ce8c <flatcc_builder_create_vector@@Base>
   1a54c:	mov	r3, r0
   1a550:	mov	r0, r3
   1a554:	sub	sp, fp, #4
   1a558:	ldr	fp, [sp]
   1a55c:	add	sp, sp, #4
   1a560:	pop	{pc}		; (ldr pc, [sp], #4)
   1a564:	str	fp, [sp, #-8]!
   1a568:	str	lr, [sp, #4]
   1a56c:	add	fp, sp, #4
   1a570:	sub	sp, sp, #32
   1a574:	str	r0, [fp, #-16]
   1a578:	str	r1, [fp, #-20]	; 0xffffffec
   1a57c:	str	r2, [fp, #-24]	; 0xffffffe8
   1a580:	str	r3, [fp, #-28]	; 0xffffffe4
   1a584:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a588:	bl	139a4 <_start@@Base+0xfb4>
   1a58c:	str	r0, [fp, #-8]
   1a590:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a594:	ldr	r3, [fp, #-8]
   1a598:	cmp	r2, r3
   1a59c:	bcc	1a5a8 <_start@@Base+0x7bb8>
   1a5a0:	ldr	r3, [fp, #-8]
   1a5a4:	str	r3, [fp, #-24]	; 0xffffffe8
   1a5a8:	ldr	r2, [fp, #-8]
   1a5ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a5b0:	sub	r3, r2, r3
   1a5b4:	str	r3, [fp, #-8]
   1a5b8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a5bc:	ldr	r3, [fp, #-8]
   1a5c0:	cmp	r2, r3
   1a5c4:	bls	1a5d0 <_start@@Base+0x7be0>
   1a5c8:	ldr	r3, [fp, #-8]
   1a5cc:	str	r3, [fp, #-28]	; 0xffffffe4
   1a5d0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a5d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a5d8:	bl	130f0 <_start@@Base+0x700>
   1a5dc:	mov	r1, r0
   1a5e0:	mvn	r3, #0
   1a5e4:	str	r3, [sp, #4]
   1a5e8:	mov	r3, #1
   1a5ec:	str	r3, [sp]
   1a5f0:	mov	r3, #1
   1a5f4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a5f8:	ldr	r0, [fp, #-16]
   1a5fc:	bl	2ce8c <flatcc_builder_create_vector@@Base>
   1a600:	mov	r3, r0
   1a604:	mov	r0, r3
   1a608:	sub	sp, fp, #4
   1a60c:	ldr	fp, [sp]
   1a610:	add	sp, sp, #4
   1a614:	pop	{pc}		; (ldr pc, [sp], #4)
   1a618:	str	fp, [sp, #-8]!
   1a61c:	str	lr, [sp, #4]
   1a620:	add	fp, sp, #4
   1a624:	sub	sp, sp, #8
   1a628:	str	r0, [fp, #-8]
   1a62c:	mov	r3, r1
   1a630:	strh	r3, [fp, #-10]
   1a634:	ldrh	r3, [fp, #-10]
   1a638:	mov	r0, r3
   1a63c:	bl	12b94 <_start@@Base+0x1a4>
   1a640:	mov	r3, r0
   1a644:	mov	r2, r3
   1a648:	ldr	r3, [fp, #-8]
   1a64c:	strh	r2, [r3]
   1a650:	ldr	r3, [fp, #-8]
   1a654:	mov	r0, r3
   1a658:	sub	sp, fp, #4
   1a65c:	ldr	fp, [sp]
   1a660:	add	sp, sp, #4
   1a664:	pop	{pc}		; (ldr pc, [sp], #4)
   1a668:	str	fp, [sp, #-8]!
   1a66c:	str	lr, [sp, #4]
   1a670:	add	fp, sp, #4
   1a674:	sub	sp, sp, #8
   1a678:	str	r0, [fp, #-8]
   1a67c:	str	r1, [fp, #-12]
   1a680:	ldr	r0, [fp, #-12]
   1a684:	bl	12c1c <_start@@Base+0x22c>
   1a688:	mov	r2, r0
   1a68c:	ldr	r3, [fp, #-8]
   1a690:	str	r2, [r3]
   1a694:	ldr	r3, [fp, #-8]
   1a698:	mov	r0, r3
   1a69c:	sub	sp, fp, #4
   1a6a0:	ldr	fp, [sp]
   1a6a4:	add	sp, sp, #4
   1a6a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6ac:	str	fp, [sp, #-8]!
   1a6b0:	str	lr, [sp, #4]
   1a6b4:	add	fp, sp, #4
   1a6b8:	sub	sp, sp, #16
   1a6bc:	str	r0, [fp, #-8]
   1a6c0:	strd	r2, [fp, #-20]	; 0xffffffec
   1a6c4:	ldrd	r0, [fp, #-20]	; 0xffffffec
   1a6c8:	bl	12ca4 <_start@@Base+0x2b4>
   1a6cc:	mov	r2, r0
   1a6d0:	mov	r3, r1
   1a6d4:	ldr	r1, [fp, #-8]
   1a6d8:	strd	r2, [r1]
   1a6dc:	ldr	r3, [fp, #-8]
   1a6e0:	mov	r0, r3
   1a6e4:	sub	sp, fp, #4
   1a6e8:	ldr	fp, [sp]
   1a6ec:	add	sp, sp, #4
   1a6f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6f4:	str	fp, [sp, #-8]!
   1a6f8:	str	lr, [sp, #4]
   1a6fc:	add	fp, sp, #4
   1a700:	sub	sp, sp, #8
   1a704:	str	r0, [fp, #-8]
   1a708:	str	r1, [fp, #-12]
   1a70c:	ldr	r3, [fp, #-12]
   1a710:	ldrsh	r3, [r3]
   1a714:	mov	r0, r3
   1a718:	bl	12da0 <_start@@Base+0x3b0>
   1a71c:	mov	r3, r0
   1a720:	mov	r2, r3
   1a724:	ldr	r3, [fp, #-8]
   1a728:	strh	r2, [r3]
   1a72c:	ldr	r3, [fp, #-8]
   1a730:	mov	r0, r3
   1a734:	sub	sp, fp, #4
   1a738:	ldr	fp, [sp]
   1a73c:	add	sp, sp, #4
   1a740:	pop	{pc}		; (ldr pc, [sp], #4)
   1a744:	str	fp, [sp, #-8]!
   1a748:	str	lr, [sp, #4]
   1a74c:	add	fp, sp, #4
   1a750:	sub	sp, sp, #8
   1a754:	str	r0, [fp, #-8]
   1a758:	mov	r3, r1
   1a75c:	strh	r3, [fp, #-10]
   1a760:	ldrsh	r3, [fp, #-10]
   1a764:	mov	r0, r3
   1a768:	bl	12dc8 <_start@@Base+0x3d8>
   1a76c:	mov	r3, r0
   1a770:	mov	r2, r3
   1a774:	ldr	r3, [fp, #-8]
   1a778:	strh	r2, [r3]
   1a77c:	ldr	r3, [fp, #-8]
   1a780:	mov	r0, r3
   1a784:	sub	sp, fp, #4
   1a788:	ldr	fp, [sp]
   1a78c:	add	sp, sp, #4
   1a790:	pop	{pc}		; (ldr pc, [sp], #4)
   1a794:	str	fp, [sp, #-8]!
   1a798:	str	lr, [sp, #4]
   1a79c:	add	fp, sp, #4
   1a7a0:	sub	sp, sp, #8
   1a7a4:	str	r0, [fp, #-8]
   1a7a8:	str	r1, [fp, #-12]
   1a7ac:	ldr	r0, [fp, #-12]
   1a7b0:	bl	12e50 <_start@@Base+0x460>
   1a7b4:	mov	r2, r0
   1a7b8:	ldr	r3, [fp, #-8]
   1a7bc:	str	r2, [r3]
   1a7c0:	ldr	r3, [fp, #-8]
   1a7c4:	mov	r0, r3
   1a7c8:	sub	sp, fp, #4
   1a7cc:	ldr	fp, [sp]
   1a7d0:	add	sp, sp, #4
   1a7d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7d8:	str	fp, [sp, #-8]!
   1a7dc:	str	lr, [sp, #4]
   1a7e0:	add	fp, sp, #4
   1a7e4:	sub	sp, sp, #16
   1a7e8:	str	r0, [fp, #-8]
   1a7ec:	strd	r2, [fp, #-20]	; 0xffffffec
   1a7f0:	ldrd	r0, [fp, #-20]	; 0xffffffec
   1a7f4:	bl	12ed8 <_start@@Base+0x4e8>
   1a7f8:	mov	r2, r0
   1a7fc:	mov	r3, r1
   1a800:	ldr	r1, [fp, #-8]
   1a804:	strd	r2, [r1]
   1a808:	ldr	r3, [fp, #-8]
   1a80c:	mov	r0, r3
   1a810:	sub	sp, fp, #4
   1a814:	ldr	fp, [sp]
   1a818:	add	sp, sp, #4
   1a81c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a820:	str	fp, [sp, #-8]!
   1a824:	str	lr, [sp, #4]
   1a828:	add	fp, sp, #4
   1a82c:	sub	sp, sp, #8
   1a830:	str	r0, [fp, #-8]
   1a834:	str	r1, [fp, #-12]
   1a838:	ldr	r3, [fp, #-12]
   1a83c:	vldr	s15, [r3]
   1a840:	vmov.f32	s0, s15
   1a844:	bl	12f48 <_start@@Base+0x558>
   1a848:	vmov.f32	s15, s0
   1a84c:	ldr	r3, [fp, #-8]
   1a850:	vstr	s15, [r3]
   1a854:	ldr	r3, [fp, #-8]
   1a858:	mov	r0, r3
   1a85c:	sub	sp, fp, #4
   1a860:	ldr	fp, [sp]
   1a864:	add	sp, sp, #4
   1a868:	pop	{pc}		; (ldr pc, [sp], #4)
   1a86c:	str	fp, [sp, #-8]!
   1a870:	str	lr, [sp, #4]
   1a874:	add	fp, sp, #4
   1a878:	sub	sp, sp, #8
   1a87c:	str	r0, [fp, #-8]
   1a880:	vstr	s0, [fp, #-12]
   1a884:	vldr	s0, [fp, #-12]
   1a888:	bl	12f80 <_start@@Base+0x590>
   1a88c:	vmov.f32	s15, s0
   1a890:	ldr	r3, [fp, #-8]
   1a894:	vstr	s15, [r3]
   1a898:	ldr	r3, [fp, #-8]
   1a89c:	mov	r0, r3
   1a8a0:	sub	sp, fp, #4
   1a8a4:	ldr	fp, [sp]
   1a8a8:	add	sp, sp, #4
   1a8ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8b0:	str	fp, [sp, #-8]!
   1a8b4:	str	lr, [sp, #4]
   1a8b8:	add	fp, sp, #4
   1a8bc:	sub	sp, sp, #8
   1a8c0:	str	r0, [fp, #-8]
   1a8c4:	str	r1, [fp, #-12]
   1a8c8:	ldr	r3, [fp, #-12]
   1a8cc:	vldr	d7, [r3]
   1a8d0:	vmov.f64	d0, d7
   1a8d4:	bl	12ff4 <_start@@Base+0x604>
   1a8d8:	vmov.f64	d7, d0
   1a8dc:	ldr	r3, [fp, #-8]
   1a8e0:	vstr	d7, [r3]
   1a8e4:	ldr	r3, [fp, #-8]
   1a8e8:	mov	r0, r3
   1a8ec:	sub	sp, fp, #4
   1a8f0:	ldr	fp, [sp]
   1a8f4:	add	sp, sp, #4
   1a8f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8fc:	str	fp, [sp, #-8]!
   1a900:	str	lr, [sp, #4]
   1a904:	add	fp, sp, #4
   1a908:	sub	sp, sp, #16
   1a90c:	str	r0, [fp, #-8]
   1a910:	vstr	d0, [fp, #-20]	; 0xffffffec
   1a914:	vldr	d0, [fp, #-20]	; 0xffffffec
   1a918:	bl	1302c <_start@@Base+0x63c>
   1a91c:	vmov.f64	d7, d0
   1a920:	ldr	r3, [fp, #-8]
   1a924:	vstr	d7, [r3]
   1a928:	ldr	r3, [fp, #-8]
   1a92c:	mov	r0, r3
   1a930:	sub	sp, fp, #4
   1a934:	ldr	fp, [sp]
   1a938:	add	sp, sp, #4
   1a93c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a940:	str	fp, [sp, #-8]!
   1a944:	str	lr, [sp, #4]
   1a948:	add	fp, sp, #4
   1a94c:	sub	sp, sp, #24
   1a950:	str	r0, [fp, #-8]
   1a954:	str	r1, [fp, #-12]
   1a958:	str	r2, [fp, #-16]
   1a95c:	mvn	r3, #-536870912	; 0xe0000000
   1a960:	str	r3, [sp, #4]
   1a964:	mov	r3, #8
   1a968:	str	r3, [sp]
   1a96c:	mov	r3, #8
   1a970:	ldr	r2, [fp, #-16]
   1a974:	ldr	r1, [fp, #-12]
   1a978:	ldr	r0, [fp, #-8]
   1a97c:	bl	2ce8c <flatcc_builder_create_vector@@Base>
   1a980:	mov	r3, r0
   1a984:	mov	r0, r3
   1a988:	sub	sp, fp, #4
   1a98c:	ldr	fp, [sp]
   1a990:	add	sp, sp, #4
   1a994:	pop	{pc}		; (ldr pc, [sp], #4)
   1a998:	str	fp, [sp, #-8]!
   1a99c:	str	lr, [sp, #4]
   1a9a0:	add	fp, sp, #4
   1a9a4:	sub	sp, sp, #16
   1a9a8:	str	r0, [fp, #-8]
   1a9ac:	str	r1, [fp, #-12]
   1a9b0:	str	r2, [fp, #-16]
   1a9b4:	ldr	r2, [fp, #-16]
   1a9b8:	ldr	r1, [fp, #-12]
   1a9bc:	ldr	r0, [fp, #-8]
   1a9c0:	bl	2e300 <flatcc_builder_create_string@@Base>
   1a9c4:	mov	r3, r0
   1a9c8:	mov	r0, r3
   1a9cc:	sub	sp, fp, #4
   1a9d0:	ldr	fp, [sp]
   1a9d4:	add	sp, sp, #4
   1a9d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9dc:	str	fp, [sp, #-8]!
   1a9e0:	str	lr, [sp, #4]
   1a9e4:	add	fp, sp, #4
   1a9e8:	sub	sp, sp, #8
   1a9ec:	str	r0, [fp, #-8]
   1a9f0:	str	r1, [fp, #-12]
   1a9f4:	ldr	r1, [fp, #-12]
   1a9f8:	ldr	r0, [fp, #-8]
   1a9fc:	bl	2e4b4 <flatcc_builder_create_string_str@@Base>
   1aa00:	mov	r3, r0
   1aa04:	mov	r0, r3
   1aa08:	sub	sp, fp, #4
   1aa0c:	ldr	fp, [sp]
   1aa10:	add	sp, sp, #4
   1aa14:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa18:	str	fp, [sp, #-8]!
   1aa1c:	str	lr, [sp, #4]
   1aa20:	add	fp, sp, #4
   1aa24:	sub	sp, sp, #8
   1aa28:	str	r0, [fp, #-8]
   1aa2c:	str	r1, [fp, #-12]
   1aa30:	ldr	r0, [fp, #-12]
   1aa34:	bl	135c4 <_start@@Base+0xbd4>
   1aa38:	mov	r3, r0
   1aa3c:	mov	r2, r3
   1aa40:	ldr	r1, [fp, #-12]
   1aa44:	ldr	r0, [fp, #-8]
   1aa48:	bl	2e300 <flatcc_builder_create_string@@Base>
   1aa4c:	mov	r3, r0
   1aa50:	mov	r0, r3
   1aa54:	sub	sp, fp, #4
   1aa58:	ldr	fp, [sp]
   1aa5c:	add	sp, sp, #4
   1aa60:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa64:	str	fp, [sp, #-8]!
   1aa68:	str	lr, [sp, #4]
   1aa6c:	add	fp, sp, #4
   1aa70:	sub	sp, sp, #24
   1aa74:	str	r0, [fp, #-16]
   1aa78:	str	r1, [fp, #-20]	; 0xffffffec
   1aa7c:	str	r2, [fp, #-24]	; 0xffffffe8
   1aa80:	str	r3, [fp, #-28]	; 0xffffffe4
   1aa84:	ldr	r0, [fp, #-20]	; 0xffffffec
   1aa88:	bl	135c4 <_start@@Base+0xbd4>
   1aa8c:	str	r0, [fp, #-8]
   1aa90:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1aa94:	ldr	r3, [fp, #-8]
   1aa98:	cmp	r2, r3
   1aa9c:	bcc	1aaa8 <_start@@Base+0x80b8>
   1aaa0:	ldr	r3, [fp, #-8]
   1aaa4:	str	r3, [fp, #-24]	; 0xffffffe8
   1aaa8:	ldr	r2, [fp, #-8]
   1aaac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1aab0:	sub	r3, r2, r3
   1aab4:	str	r3, [fp, #-8]
   1aab8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1aabc:	ldr	r3, [fp, #-8]
   1aac0:	cmp	r2, r3
   1aac4:	bls	1aad0 <_start@@Base+0x80e0>
   1aac8:	ldr	r3, [fp, #-8]
   1aacc:	str	r3, [fp, #-28]	; 0xffffffe4
   1aad0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1aad4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1aad8:	add	r3, r2, r3
   1aadc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1aae0:	mov	r1, r3
   1aae4:	ldr	r0, [fp, #-16]
   1aae8:	bl	2e300 <flatcc_builder_create_string@@Base>
   1aaec:	mov	r3, r0
   1aaf0:	mov	r0, r3
   1aaf4:	sub	sp, fp, #4
   1aaf8:	ldr	fp, [sp]
   1aafc:	add	sp, sp, #4
   1ab00:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab04:	str	fp, [sp, #-8]!
   1ab08:	str	lr, [sp, #4]
   1ab0c:	add	fp, sp, #4
   1ab10:	sub	sp, sp, #8
   1ab14:	str	r0, [fp, #-8]
   1ab18:	str	r1, [fp, #-12]
   1ab1c:	ldr	r3, [fp, #-12]
   1ab20:	cmp	r3, #0
   1ab24:	beq	1ab3c <_start@@Base+0x814c>
   1ab28:	ldr	r1, [fp, #-12]
   1ab2c:	ldr	r0, [fp, #-8]
   1ab30:	bl	2b728 <flatcc_builder_offset_vector_push@@Base>
   1ab34:	mov	r3, r0
   1ab38:	b	1ab40 <_start@@Base+0x8150>
   1ab3c:	mov	r3, #0
   1ab40:	mov	r0, r3
   1ab44:	sub	sp, fp, #4
   1ab48:	ldr	fp, [sp]
   1ab4c:	add	sp, sp, #4
   1ab50:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab54:	str	fp, [sp, #-8]!
   1ab58:	str	lr, [sp, #4]
   1ab5c:	add	fp, sp, #4
   1ab60:	sub	sp, sp, #8
   1ab64:	str	r0, [fp, #-8]
   1ab68:	str	r1, [fp, #-12]
   1ab6c:	mov	r3, #0
   1ab70:	mov	r2, #0
   1ab74:	ldr	r1, [fp, #-12]
   1ab78:	ldr	r0, [fp, #-8]
   1ab7c:	bl	2af5c <flatcc_builder_start_buffer@@Base>
   1ab80:	mov	r3, r0
   1ab84:	mov	r0, r3
   1ab88:	sub	sp, fp, #4
   1ab8c:	ldr	fp, [sp]
   1ab90:	add	sp, sp, #4
   1ab94:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab98:	str	fp, [sp, #-8]!
   1ab9c:	str	lr, [sp, #4]
   1aba0:	add	fp, sp, #4
   1aba4:	sub	sp, sp, #8
   1aba8:	str	r0, [fp, #-8]
   1abac:	str	r1, [fp, #-12]
   1abb0:	mov	r3, #2
   1abb4:	mov	r2, #0
   1abb8:	ldr	r1, [fp, #-12]
   1abbc:	ldr	r0, [fp, #-8]
   1abc0:	bl	2af5c <flatcc_builder_start_buffer@@Base>
   1abc4:	mov	r3, r0
   1abc8:	mov	r0, r3
   1abcc:	sub	sp, fp, #4
   1abd0:	ldr	fp, [sp]
   1abd4:	add	sp, sp, #4
   1abd8:	pop	{pc}		; (ldr pc, [sp], #4)
   1abdc:	str	fp, [sp, #-8]!
   1abe0:	str	lr, [sp, #4]
   1abe4:	add	fp, sp, #4
   1abe8:	sub	sp, sp, #8
   1abec:	str	r0, [fp, #-8]
   1abf0:	str	r1, [fp, #-12]
   1abf4:	ldr	r1, [fp, #-12]
   1abf8:	ldr	r0, [fp, #-8]
   1abfc:	bl	2b0cc <flatcc_builder_end_buffer@@Base>
   1ac00:	mov	r3, r0
   1ac04:	mov	r0, r3
   1ac08:	sub	sp, fp, #4
   1ac0c:	ldr	fp, [sp]
   1ac10:	add	sp, sp, #4
   1ac14:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac18:	str	fp, [sp, #-8]!
   1ac1c:	str	lr, [sp, #4]
   1ac20:	add	fp, sp, #4
   1ac24:	sub	sp, sp, #8
   1ac28:	str	r0, [fp, #-8]
   1ac2c:	mov	r3, r1
   1ac30:	strb	r3, [fp, #-9]
   1ac34:	ldrsb	r3, [fp, #-9]
   1ac38:	mov	r0, r3
   1ac3c:	bl	1496c <_start@@Base+0x1f7c>
   1ac40:	mov	r3, r0
   1ac44:	mov	r2, r3
   1ac48:	ldr	r3, [fp, #-8]
   1ac4c:	strb	r2, [r3]
   1ac50:	ldr	r3, [fp, #-8]
   1ac54:	mov	r0, r3
   1ac58:	sub	sp, fp, #4
   1ac5c:	ldr	fp, [sp]
   1ac60:	add	sp, sp, #4
   1ac64:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac68:	push	{fp}		; (str fp, [sp, #-4]!)
   1ac6c:	add	fp, sp, #0
   1ac70:	sub	sp, sp, #12
   1ac74:	str	r0, [fp, #-8]
   1ac78:	mov	r3, r1
   1ac7c:	strh	r3, [fp, #-10]
   1ac80:	mov	r3, r2
   1ac84:	strb	r3, [fp, #-11]
   1ac88:	ldr	r3, [fp, #-8]
   1ac8c:	ldrh	r2, [fp, #-10]
   1ac90:	strh	r2, [r3]
   1ac94:	ldr	r3, [fp, #-8]
   1ac98:	ldrb	r2, [fp, #-11]
   1ac9c:	strb	r2, [r3, #2]
   1aca0:	ldr	r3, [fp, #-8]
   1aca4:	mov	r0, r3
   1aca8:	add	sp, fp, #0
   1acac:	pop	{fp}		; (ldr fp, [sp], #4)
   1acb0:	bx	lr
   1acb4:	str	fp, [sp, #-8]!
   1acb8:	str	lr, [sp, #4]
   1acbc:	add	fp, sp, #4
   1acc0:	sub	sp, sp, #8
   1acc4:	str	r0, [fp, #-8]
   1acc8:	mov	r3, r1
   1accc:	strh	r3, [fp, #-10]
   1acd0:	mov	r3, r2
   1acd4:	strb	r3, [fp, #-11]
   1acd8:	ldr	r3, [fp, #-8]
   1acdc:	ldrsh	r2, [fp, #-10]
   1ace0:	mov	r1, r2
   1ace4:	mov	r0, r3
   1ace8:	bl	1a744 <_start@@Base+0x7d54>
   1acec:	ldr	r3, [fp, #-8]
   1acf0:	ldrb	r2, [fp, #-11]
   1acf4:	strb	r2, [r3, #2]
   1acf8:	ldr	r3, [fp, #-8]
   1acfc:	mov	r0, r3
   1ad00:	sub	sp, fp, #4
   1ad04:	ldr	fp, [sp]
   1ad08:	add	sp, sp, #4
   1ad0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad10:	str	fp, [sp, #-8]!
   1ad14:	str	lr, [sp, #4]
   1ad18:	add	fp, sp, #4
   1ad1c:	sub	sp, sp, #8
   1ad20:	str	r0, [fp, #-8]
   1ad24:	str	r1, [fp, #-12]
   1ad28:	ldr	r3, [fp, #-8]
   1ad2c:	ldr	r2, [fp, #-12]
   1ad30:	mov	r1, r2
   1ad34:	mov	r0, r3
   1ad38:	bl	1a6f4 <_start@@Base+0x7d04>
   1ad3c:	ldr	r3, [fp, #-12]
   1ad40:	ldrsb	r2, [r3, #2]
   1ad44:	ldr	r3, [fp, #-8]
   1ad48:	strb	r2, [r3, #2]
   1ad4c:	ldr	r3, [fp, #-8]
   1ad50:	mov	r0, r3
   1ad54:	sub	sp, fp, #4
   1ad58:	ldr	fp, [sp]
   1ad5c:	add	sp, sp, #4
   1ad60:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad64:	str	fp, [sp, #-8]!
   1ad68:	str	lr, [sp, #4]
   1ad6c:	add	fp, sp, #4
   1ad70:	sub	sp, sp, #8
   1ad74:	str	r0, [fp, #-8]
   1ad78:	mvn	r3, #-1073741824	; 0xc0000000
   1ad7c:	mov	r2, #2
   1ad80:	mov	r1, #4
   1ad84:	ldr	r0, [fp, #-8]
   1ad88:	bl	2bdc0 <flatcc_builder_start_vector@@Base>
   1ad8c:	mov	r3, r0
   1ad90:	mov	r0, r3
   1ad94:	sub	sp, fp, #4
   1ad98:	ldr	fp, [sp]
   1ad9c:	add	sp, sp, #4
   1ada0:	pop	{pc}		; (ldr pc, [sp], #4)
   1ada4:	str	fp, [sp, #-8]!
   1ada8:	str	lr, [sp, #4]
   1adac:	add	fp, sp, #4
   1adb0:	sub	sp, sp, #8
   1adb4:	str	r0, [fp, #-8]
   1adb8:	ldr	r0, [fp, #-8]
   1adbc:	bl	2d0bc <flatcc_builder_end_vector@@Base>
   1adc0:	mov	r3, r0
   1adc4:	mov	r0, r3
   1adc8:	sub	sp, fp, #4
   1adcc:	ldr	fp, [sp]
   1add0:	add	sp, sp, #4
   1add4:	pop	{pc}		; (ldr pc, [sp], #4)
   1add8:	str	fp, [sp, #-8]!
   1addc:	str	lr, [sp, #4]
   1ade0:	add	fp, sp, #4
   1ade4:	sub	sp, sp, #16
   1ade8:	str	r0, [fp, #-8]
   1adec:	str	r1, [fp, #-12]
   1adf0:	ldr	r0, [fp, #-12]
   1adf4:	bl	14b78 <_start@@Base+0x2188>
   1adf8:	mov	r2, r0
   1adfc:	mvn	r3, #-1073741824	; 0xc0000000
   1ae00:	str	r3, [sp, #4]
   1ae04:	mov	r3, #2
   1ae08:	str	r3, [sp]
   1ae0c:	mov	r3, #4
   1ae10:	ldr	r1, [fp, #-12]
   1ae14:	ldr	r0, [fp, #-8]
   1ae18:	bl	2ce8c <flatcc_builder_create_vector@@Base>
   1ae1c:	mov	r3, r0
   1ae20:	mov	r0, r3
   1ae24:	sub	sp, fp, #4
   1ae28:	ldr	fp, [sp]
   1ae2c:	add	sp, sp, #4
   1ae30:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae34:	str	fp, [sp, #-8]!
   1ae38:	str	lr, [sp, #4]
   1ae3c:	add	fp, sp, #4
   1ae40:	sub	sp, sp, #32
   1ae44:	str	r0, [fp, #-16]
   1ae48:	str	r1, [fp, #-20]	; 0xffffffec
   1ae4c:	str	r2, [fp, #-24]	; 0xffffffe8
   1ae50:	str	r3, [fp, #-28]	; 0xffffffe4
   1ae54:	ldr	r0, [fp, #-20]	; 0xffffffec
   1ae58:	bl	14b78 <_start@@Base+0x2188>
   1ae5c:	str	r0, [fp, #-8]
   1ae60:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ae64:	ldr	r3, [fp, #-8]
   1ae68:	cmp	r2, r3
   1ae6c:	bcc	1ae78 <_start@@Base+0x8488>
   1ae70:	ldr	r3, [fp, #-8]
   1ae74:	str	r3, [fp, #-24]	; 0xffffffe8
   1ae78:	ldr	r2, [fp, #-8]
   1ae7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ae80:	sub	r3, r2, r3
   1ae84:	str	r3, [fp, #-8]
   1ae88:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1ae8c:	ldr	r3, [fp, #-8]
   1ae90:	cmp	r2, r3
   1ae94:	bls	1aea0 <_start@@Base+0x84b0>
   1ae98:	ldr	r3, [fp, #-8]
   1ae9c:	str	r3, [fp, #-28]	; 0xffffffe4
   1aea0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1aea4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1aea8:	bl	14aa8 <_start@@Base+0x20b8>
   1aeac:	mov	r1, r0
   1aeb0:	mvn	r3, #-1073741824	; 0xc0000000
   1aeb4:	str	r3, [sp, #4]
   1aeb8:	mov	r3, #2
   1aebc:	str	r3, [sp]
   1aec0:	mov	r3, #4
   1aec4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1aec8:	ldr	r0, [fp, #-16]
   1aecc:	bl	2ce8c <flatcc_builder_create_vector@@Base>
   1aed0:	mov	r3, r0
   1aed4:	mov	r0, r3
   1aed8:	sub	sp, fp, #4
   1aedc:	ldr	fp, [sp]
   1aee0:	add	sp, sp, #4
   1aee4:	pop	{pc}		; (ldr pc, [sp], #4)
   1aee8:	str	fp, [sp, #-8]!
   1aeec:	str	lr, [sp, #4]
   1aef0:	add	fp, sp, #4
   1aef4:	sub	sp, sp, #16
   1aef8:	str	r0, [fp, #-16]
   1aefc:	str	r1, [fp, #-20]	; 0xffffffec
   1af00:	mov	r1, #1
   1af04:	ldr	r0, [fp, #-16]
   1af08:	bl	2b45c <flatcc_builder_extend_vector@@Base>
   1af0c:	str	r0, [fp, #-8]
   1af10:	ldr	r3, [fp, #-8]
   1af14:	cmp	r3, #0
   1af18:	beq	1af3c <_start@@Base+0x854c>
   1af1c:	bl	14b5c <_start@@Base+0x216c>
   1af20:	mov	r3, r0
   1af24:	mov	r2, r3
   1af28:	ldr	r1, [fp, #-20]	; 0xffffffec
   1af2c:	ldr	r0, [fp, #-8]
   1af30:	bl	12908 <memcpy@plt>
   1af34:	ldr	r3, [fp, #-8]
   1af38:	b	1af40 <_start@@Base+0x8550>
   1af3c:	mov	r3, #0
   1af40:	mov	r0, r3
   1af44:	sub	sp, fp, #4
   1af48:	ldr	fp, [sp]
   1af4c:	add	sp, sp, #4
   1af50:	pop	{pc}		; (ldr pc, [sp], #4)
   1af54:	push	{fp}		; (str fp, [sp, #-4]!)
   1af58:	add	fp, sp, #0
   1af5c:	sub	sp, sp, #12
   1af60:	str	r0, [fp, #-8]
   1af64:	str	r1, [fp, #-12]
   1af68:	ldr	r3, [fp, #-8]
   1af6c:	mov	r0, r3
   1af70:	add	sp, fp, #0
   1af74:	pop	{fp}		; (ldr fp, [sp], #4)
   1af78:	bx	lr
   1af7c:	str	fp, [sp, #-8]!
   1af80:	str	lr, [sp, #4]
   1af84:	add	fp, sp, #4
   1af88:	sub	sp, sp, #32
   1af8c:	str	r0, [fp, #-8]
   1af90:	vstr	s0, [fp, #-12]
   1af94:	vstr	s1, [fp, #-16]
   1af98:	vstr	s2, [fp, #-20]	; 0xffffffec
   1af9c:	vstr	d2, [fp, #-28]	; 0xffffffe4
   1afa0:	mov	r0, r1
   1afa4:	mov	r1, r2
   1afa8:	mov	r2, r3
   1afac:	mov	r3, r0
   1afb0:	strb	r3, [fp, #-29]	; 0xffffffe3
   1afb4:	mov	r3, r1
   1afb8:	strh	r3, [fp, #-32]	; 0xffffffe0
   1afbc:	mov	r3, r2
   1afc0:	strb	r3, [fp, #-30]	; 0xffffffe2
   1afc4:	ldr	r3, [fp, #-8]
   1afc8:	vldr	s0, [fp, #-12]
   1afcc:	mov	r0, r3
   1afd0:	bl	1a86c <_start@@Base+0x7e7c>
   1afd4:	ldr	r3, [fp, #-8]
   1afd8:	add	r3, r3, #4
   1afdc:	vldr	s0, [fp, #-16]
   1afe0:	mov	r0, r3
   1afe4:	bl	1a86c <_start@@Base+0x7e7c>
   1afe8:	ldr	r3, [fp, #-8]
   1afec:	add	r3, r3, #8
   1aff0:	vldr	s0, [fp, #-20]	; 0xffffffec
   1aff4:	mov	r0, r3
   1aff8:	bl	1a86c <_start@@Base+0x7e7c>
   1affc:	ldr	r3, [fp, #-8]
   1b000:	add	r3, r3, #16
   1b004:	vldr	d0, [fp, #-28]	; 0xffffffe4
   1b008:	mov	r0, r3
   1b00c:	bl	1a8fc <_start@@Base+0x7f0c>
   1b010:	ldr	r3, [fp, #-8]
   1b014:	ldrb	r2, [fp, #-29]	; 0xffffffe3
   1b018:	strb	r2, [r3, #24]
   1b01c:	ldr	r3, [fp, #-8]
   1b020:	add	r3, r3, #26
   1b024:	ldrsb	r2, [fp, #-30]	; 0xffffffe2
   1b028:	ldrsh	r1, [fp, #-32]	; 0xffffffe0
   1b02c:	mov	r0, r3
   1b030:	bl	1acb4 <_start@@Base+0x82c4>
   1b034:	ldr	r3, [fp, #-8]
   1b038:	mov	r0, r3
   1b03c:	sub	sp, fp, #4
   1b040:	ldr	fp, [sp]
   1b044:	add	sp, sp, #4
   1b048:	pop	{pc}		; (ldr pc, [sp], #4)
   1b04c:	str	fp, [sp, #-8]!
   1b050:	str	lr, [sp, #4]
   1b054:	add	fp, sp, #4
   1b058:	sub	sp, sp, #8
   1b05c:	str	r0, [fp, #-8]
   1b060:	str	r1, [fp, #-12]
   1b064:	ldr	r3, [fp, #-8]
   1b068:	ldr	r2, [fp, #-12]
   1b06c:	mov	r1, r2
   1b070:	mov	r0, r3
   1b074:	bl	1a820 <_start@@Base+0x7e30>
   1b078:	ldr	r3, [fp, #-8]
   1b07c:	add	r2, r3, #4
   1b080:	ldr	r3, [fp, #-12]
   1b084:	add	r3, r3, #4
   1b088:	mov	r1, r3
   1b08c:	mov	r0, r2
   1b090:	bl	1a820 <_start@@Base+0x7e30>
   1b094:	ldr	r3, [fp, #-8]
   1b098:	add	r2, r3, #8
   1b09c:	ldr	r3, [fp, #-12]
   1b0a0:	add	r3, r3, #8
   1b0a4:	mov	r1, r3
   1b0a8:	mov	r0, r2
   1b0ac:	bl	1a820 <_start@@Base+0x7e30>
   1b0b0:	ldr	r3, [fp, #-8]
   1b0b4:	add	r2, r3, #16
   1b0b8:	ldr	r3, [fp, #-12]
   1b0bc:	add	r3, r3, #16
   1b0c0:	mov	r1, r3
   1b0c4:	mov	r0, r2
   1b0c8:	bl	1a8b0 <_start@@Base+0x7ec0>
   1b0cc:	ldr	r3, [fp, #-12]
   1b0d0:	ldrsb	r2, [r3, #24]
   1b0d4:	ldr	r3, [fp, #-8]
   1b0d8:	strb	r2, [r3, #24]
   1b0dc:	ldr	r3, [fp, #-8]
   1b0e0:	add	r2, r3, #26
   1b0e4:	ldr	r3, [fp, #-12]
   1b0e8:	add	r3, r3, #26
   1b0ec:	mov	r1, r3
   1b0f0:	mov	r0, r2
   1b0f4:	bl	1ad10 <_start@@Base+0x8320>
   1b0f8:	ldr	r3, [fp, #-8]
   1b0fc:	mov	r0, r3
   1b100:	sub	sp, fp, #4
   1b104:	ldr	fp, [sp]
   1b108:	add	sp, sp, #4
   1b10c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b110:	push	{fp}		; (str fp, [sp, #-4]!)
   1b114:	add	fp, sp, #0
   1b118:	sub	sp, sp, #12
   1b11c:	str	r0, [fp, #-8]
   1b120:	ldr	r3, [fp, #-8]
   1b124:	mov	r0, r3
   1b128:	add	sp, fp, #0
   1b12c:	pop	{fp}		; (ldr fp, [sp], #4)
   1b130:	bx	lr
   1b134:	str	fp, [sp, #-8]!
   1b138:	str	lr, [sp, #4]
   1b13c:	add	fp, sp, #4
   1b140:	sub	sp, sp, #8
   1b144:	str	r0, [fp, #-8]
   1b148:	bl	14c80 <_start@@Base+0x2290>
   1b14c:	mov	r3, r0
   1b150:	mov	r2, r3
   1b154:	mov	r1, #0
   1b158:	ldr	r0, [fp, #-8]
   1b15c:	bl	12998 <memset@plt>
   1b160:	mov	r3, r0
   1b164:	mov	r0, r3
   1b168:	sub	sp, fp, #4
   1b16c:	ldr	fp, [sp]
   1b170:	add	sp, sp, #4
   1b174:	pop	{pc}		; (ldr pc, [sp], #4)
   1b178:	str	fp, [sp, #-8]!
   1b17c:	str	lr, [sp, #4]
   1b180:	add	fp, sp, #4
   1b184:	sub	sp, sp, #8
   1b188:	str	r0, [fp, #-8]
   1b18c:	mov	r2, #16
   1b190:	mov	r1, #32
   1b194:	ldr	r0, [fp, #-8]
   1b198:	bl	2b22c <flatcc_builder_start_struct@@Base>
   1b19c:	mov	r3, r0
   1b1a0:	mov	r0, r3
   1b1a4:	sub	sp, fp, #4
   1b1a8:	ldr	fp, [sp]
   1b1ac:	add	sp, sp, #4
   1b1b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1b4:	str	fp, [sp, #-8]!
   1b1b8:	str	lr, [sp, #4]
   1b1bc:	add	fp, sp, #4
   1b1c0:	sub	sp, sp, #8
   1b1c4:	str	r0, [fp, #-8]
   1b1c8:	ldr	r0, [fp, #-8]
   1b1cc:	bl	2b2d8 <flatcc_builder_end_struct@@Base>
   1b1d0:	mov	r3, r0
   1b1d4:	mov	r0, r3
   1b1d8:	sub	sp, fp, #4
   1b1dc:	ldr	fp, [sp]
   1b1e0:	add	sp, sp, #4
   1b1e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1e8:	str	fp, [sp, #-8]!
   1b1ec:	str	lr, [sp, #4]
   1b1f0:	add	fp, sp, #4
   1b1f4:	sub	sp, sp, #40	; 0x28
   1b1f8:	str	r0, [fp, #-16]
   1b1fc:	vstr	s0, [fp, #-20]	; 0xffffffec
   1b200:	vstr	s1, [fp, #-24]	; 0xffffffe8
   1b204:	vstr	s2, [fp, #-28]	; 0xffffffe4
   1b208:	vstr	d2, [fp, #-36]	; 0xffffffdc
   1b20c:	mov	r0, r1
   1b210:	mov	r1, r2
   1b214:	mov	r2, r3
   1b218:	mov	r3, r0
   1b21c:	strb	r3, [fp, #-37]	; 0xffffffdb
   1b220:	mov	r3, r1
   1b224:	strh	r3, [fp, #-40]	; 0xffffffd8
   1b228:	mov	r3, r2
   1b22c:	strb	r3, [fp, #-38]	; 0xffffffda
   1b230:	ldr	r0, [fp, #-16]
   1b234:	bl	1b178 <_start@@Base+0x8788>
   1b238:	str	r0, [fp, #-8]
   1b23c:	ldr	r3, [fp, #-8]
   1b240:	cmp	r3, #0
   1b244:	bne	1b250 <_start@@Base+0x8860>
   1b248:	mov	r3, #0
   1b24c:	b	1b280 <_start@@Base+0x8890>
   1b250:	ldrsb	r3, [fp, #-38]	; 0xffffffda
   1b254:	ldrsh	r2, [fp, #-40]	; 0xffffffd8
   1b258:	ldrsb	r1, [fp, #-37]	; 0xffffffdb
   1b25c:	vldr	d2, [fp, #-36]	; 0xffffffdc
   1b260:	vldr	s2, [fp, #-28]	; 0xffffffe4
   1b264:	vldr	s1, [fp, #-24]	; 0xffffffe8
   1b268:	vldr	s0, [fp, #-20]	; 0xffffffec
   1b26c:	ldr	r0, [fp, #-8]
   1b270:	bl	1af7c <_start@@Base+0x858c>
   1b274:	ldr	r0, [fp, #-16]
   1b278:	bl	1b1b4 <_start@@Base+0x87c4>
   1b27c:	mov	r3, r0
   1b280:	mov	r0, r3
   1b284:	sub	sp, fp, #4
   1b288:	ldr	fp, [sp]
   1b28c:	add	sp, sp, #4
   1b290:	pop	{pc}		; (ldr pc, [sp], #4)
   1b294:	str	fp, [sp, #-8]!
   1b298:	str	lr, [sp, #4]
   1b29c:	add	fp, sp, #4
   1b2a0:	sub	sp, sp, #40	; 0x28
   1b2a4:	str	r0, [fp, #-8]
   1b2a8:	vstr	s0, [fp, #-12]
   1b2ac:	vstr	s1, [fp, #-16]
   1b2b0:	vstr	s2, [fp, #-20]	; 0xffffffec
   1b2b4:	vstr	d2, [fp, #-28]	; 0xffffffe4
   1b2b8:	mov	r0, r1
   1b2bc:	mov	r1, r2
   1b2c0:	mov	r2, r3
   1b2c4:	mov	r3, r0
   1b2c8:	strb	r3, [fp, #-29]	; 0xffffffe3
   1b2cc:	mov	r3, r1
   1b2d0:	strh	r3, [fp, #-32]	; 0xffffffe0
   1b2d4:	mov	r3, r2
   1b2d8:	strb	r3, [fp, #-30]	; 0xffffffe2
   1b2dc:	ldrsb	r3, [fp, #-30]	; 0xffffffe2
   1b2e0:	ldrsh	r2, [fp, #-32]	; 0xffffffe0
   1b2e4:	ldrsb	r1, [fp, #-29]	; 0xffffffe3
   1b2e8:	vldr	d2, [fp, #-28]	; 0xffffffe4
   1b2ec:	vldr	s2, [fp, #-20]	; 0xffffffec
   1b2f0:	vldr	s1, [fp, #-16]
   1b2f4:	vldr	s0, [fp, #-12]
   1b2f8:	ldr	r0, [fp, #-8]
   1b2fc:	bl	1b1e8 <_start@@Base+0x87f8>
   1b300:	mov	r2, r0
   1b304:	mov	r3, #0
   1b308:	str	r3, [sp, #4]
   1b30c:	mov	r3, #16
   1b310:	str	r3, [sp]
   1b314:	mov	r3, r2
   1b318:	mov	r2, #0
   1b31c:	ldr	r1, [pc, #32]	; 1b344 <_start@@Base+0x8954>
   1b320:	add	r1, pc, r1
   1b324:	ldr	r0, [fp, #-8]
   1b328:	bl	2a9d4 <flatcc_builder_create_buffer@@Base>
   1b32c:	mov	r3, r0
   1b330:	mov	r0, r3
   1b334:	sub	sp, fp, #4
   1b338:	ldr	fp, [sp]
   1b33c:	add	sp, sp, #4
   1b340:	pop	{pc}		; (ldr pc, [sp], #4)
   1b344:	andeq	r7, r1, r4, asr r3
   1b348:	str	fp, [sp, #-8]!
   1b34c:	str	lr, [sp, #4]
   1b350:	add	fp, sp, #4
   1b354:	sub	sp, sp, #40	; 0x28
   1b358:	str	r0, [fp, #-8]
   1b35c:	vstr	s0, [fp, #-12]
   1b360:	vstr	s1, [fp, #-16]
   1b364:	vstr	s2, [fp, #-20]	; 0xffffffec
   1b368:	vstr	d2, [fp, #-28]	; 0xffffffe4
   1b36c:	mov	r0, r1
   1b370:	mov	r1, r2
   1b374:	mov	r2, r3
   1b378:	mov	r3, r0
   1b37c:	strb	r3, [fp, #-29]	; 0xffffffe3
   1b380:	mov	r3, r1
   1b384:	strh	r3, [fp, #-32]	; 0xffffffe0
   1b388:	mov	r3, r2
   1b38c:	strb	r3, [fp, #-30]	; 0xffffffe2
   1b390:	ldrsb	r3, [fp, #-30]	; 0xffffffe2
   1b394:	ldrsh	r2, [fp, #-32]	; 0xffffffe0
   1b398:	ldrsb	r1, [fp, #-29]	; 0xffffffe3
   1b39c:	vldr	d2, [fp, #-28]	; 0xffffffe4
   1b3a0:	vldr	s2, [fp, #-20]	; 0xffffffec
   1b3a4:	vldr	s1, [fp, #-16]
   1b3a8:	vldr	s0, [fp, #-12]
   1b3ac:	ldr	r0, [fp, #-8]
   1b3b0:	bl	1b1e8 <_start@@Base+0x87f8>
   1b3b4:	mov	r2, r0
   1b3b8:	mov	r3, #0
   1b3bc:	str	r3, [sp, #4]
   1b3c0:	mov	r3, #16
   1b3c4:	str	r3, [sp]
   1b3c8:	mov	r3, r2
   1b3cc:	mov	r2, #0
   1b3d0:	ldr	r1, [pc, #32]	; 1b3f8 <_start@@Base+0x8a08>
   1b3d4:	add	r1, pc, r1
   1b3d8:	ldr	r0, [fp, #-8]
   1b3dc:	bl	2a9d4 <flatcc_builder_create_buffer@@Base>
   1b3e0:	mov	r3, r0
   1b3e4:	mov	r0, r3
   1b3e8:	sub	sp, fp, #4
   1b3ec:	ldr	fp, [sp]
   1b3f0:	add	sp, sp, #4
   1b3f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3f8:	andeq	r7, r1, ip, ror r3
   1b3fc:	str	fp, [sp, #-8]!
   1b400:	str	lr, [sp, #4]
   1b404:	add	fp, sp, #4
   1b408:	sub	sp, sp, #8
   1b40c:	str	r0, [fp, #-8]
   1b410:	mov	r3, r1
   1b414:	strh	r3, [fp, #-10]
   1b418:	ldr	r3, [fp, #-8]
   1b41c:	ldrh	r2, [fp, #-10]
   1b420:	mov	r1, r2
   1b424:	mov	r0, r3
   1b428:	bl	1a618 <_start@@Base+0x7c28>
   1b42c:	ldr	r3, [fp, #-8]
   1b430:	mov	r0, r3
   1b434:	sub	sp, fp, #4
   1b438:	ldr	fp, [sp]
   1b43c:	add	sp, sp, #4
   1b440:	pop	{pc}		; (ldr pc, [sp], #4)
   1b444:	str	fp, [sp, #-8]!
   1b448:	str	lr, [sp, #4]
   1b44c:	add	fp, sp, #4
   1b450:	sub	sp, sp, #8
   1b454:	str	r0, [fp, #-8]
   1b458:	mov	r2, #2
   1b45c:	mov	r1, #2
   1b460:	ldr	r0, [fp, #-8]
   1b464:	bl	2b22c <flatcc_builder_start_struct@@Base>
   1b468:	mov	r3, r0
   1b46c:	mov	r0, r3
   1b470:	sub	sp, fp, #4
   1b474:	ldr	fp, [sp]
   1b478:	add	sp, sp, #4
   1b47c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b480:	str	fp, [sp, #-8]!
   1b484:	str	lr, [sp, #4]
   1b488:	add	fp, sp, #4
   1b48c:	sub	sp, sp, #8
   1b490:	str	r0, [fp, #-8]
   1b494:	ldr	r0, [fp, #-8]
   1b498:	bl	2b2d8 <flatcc_builder_end_struct@@Base>
   1b49c:	mov	r3, r0
   1b4a0:	mov	r0, r3
   1b4a4:	sub	sp, fp, #4
   1b4a8:	ldr	fp, [sp]
   1b4ac:	add	sp, sp, #4
   1b4b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4b4:	str	fp, [sp, #-8]!
   1b4b8:	str	lr, [sp, #4]
   1b4bc:	add	fp, sp, #4
   1b4c0:	sub	sp, sp, #16
   1b4c4:	str	r0, [fp, #-16]
   1b4c8:	mov	r3, r1
   1b4cc:	strh	r3, [fp, #-18]	; 0xffffffee
   1b4d0:	ldr	r0, [fp, #-16]
   1b4d4:	bl	1b444 <_start@@Base+0x8a54>
   1b4d8:	str	r0, [fp, #-8]
   1b4dc:	ldr	r3, [fp, #-8]
   1b4e0:	cmp	r3, #0
   1b4e4:	bne	1b4f0 <_start@@Base+0x8b00>
   1b4e8:	mov	r3, #0
   1b4ec:	b	1b50c <_start@@Base+0x8b1c>
   1b4f0:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1b4f4:	mov	r1, r3
   1b4f8:	ldr	r0, [fp, #-8]
   1b4fc:	bl	1b3fc <_start@@Base+0x8a0c>
   1b500:	ldr	r0, [fp, #-16]
   1b504:	bl	1b480 <_start@@Base+0x8a90>
   1b508:	mov	r3, r0
   1b50c:	mov	r0, r3
   1b510:	sub	sp, fp, #4
   1b514:	ldr	fp, [sp]
   1b518:	add	sp, sp, #4
   1b51c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b520:	str	fp, [sp, #-8]!
   1b524:	str	lr, [sp, #4]
   1b528:	add	fp, sp, #4
   1b52c:	sub	sp, sp, #8
   1b530:	str	r0, [fp, #-8]
   1b534:	str	r1, [fp, #-12]
   1b538:	ldr	r3, [fp, #-8]
   1b53c:	ldr	r1, [fp, #-12]
   1b540:	mov	r0, r3
   1b544:	bl	1a794 <_start@@Base+0x7da4>
   1b548:	ldr	r3, [fp, #-8]
   1b54c:	mov	r0, r3
   1b550:	sub	sp, fp, #4
   1b554:	ldr	fp, [sp]
   1b558:	add	sp, sp, #4
   1b55c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b560:	str	fp, [sp, #-8]!
   1b564:	str	lr, [sp, #4]
   1b568:	add	fp, sp, #4
   1b56c:	sub	sp, sp, #8
   1b570:	str	r0, [fp, #-8]
   1b574:	mov	r2, #4
   1b578:	mov	r1, #4
   1b57c:	ldr	r0, [fp, #-8]
   1b580:	bl	2b22c <flatcc_builder_start_struct@@Base>
   1b584:	mov	r3, r0
   1b588:	mov	r0, r3
   1b58c:	sub	sp, fp, #4
   1b590:	ldr	fp, [sp]
   1b594:	add	sp, sp, #4
   1b598:	pop	{pc}		; (ldr pc, [sp], #4)
   1b59c:	str	fp, [sp, #-8]!
   1b5a0:	str	lr, [sp, #4]
   1b5a4:	add	fp, sp, #4
   1b5a8:	sub	sp, sp, #8
   1b5ac:	str	r0, [fp, #-8]
   1b5b0:	ldr	r0, [fp, #-8]
   1b5b4:	bl	2b2d8 <flatcc_builder_end_struct@@Base>
   1b5b8:	mov	r3, r0
   1b5bc:	mov	r0, r3
   1b5c0:	sub	sp, fp, #4
   1b5c4:	ldr	fp, [sp]
   1b5c8:	add	sp, sp, #4
   1b5cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5d0:	str	fp, [sp, #-8]!
   1b5d4:	str	lr, [sp, #4]
   1b5d8:	add	fp, sp, #4
   1b5dc:	sub	sp, sp, #8
   1b5e0:	str	r0, [fp, #-8]
   1b5e4:	ldr	r0, [fp, #-8]
   1b5e8:	bl	2b2d8 <flatcc_builder_end_struct@@Base>
   1b5ec:	mov	r3, r0
   1b5f0:	mov	r0, r3
   1b5f4:	sub	sp, fp, #4
   1b5f8:	ldr	fp, [sp]
   1b5fc:	add	sp, sp, #4
   1b600:	pop	{pc}		; (ldr pc, [sp], #4)
   1b604:	str	fp, [sp, #-8]!
   1b608:	str	lr, [sp, #4]
   1b60c:	add	fp, sp, #4
   1b610:	sub	sp, sp, #16
   1b614:	str	r0, [fp, #-16]
   1b618:	str	r1, [fp, #-20]	; 0xffffffec
   1b61c:	ldr	r0, [fp, #-16]
   1b620:	bl	1b560 <_start@@Base+0x8b70>
   1b624:	str	r0, [fp, #-8]
   1b628:	ldr	r3, [fp, #-8]
   1b62c:	cmp	r3, #0
   1b630:	bne	1b63c <_start@@Base+0x8c4c>
   1b634:	mov	r3, #0
   1b638:	b	1b654 <_start@@Base+0x8c64>
   1b63c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b640:	ldr	r0, [fp, #-8]
   1b644:	bl	1b520 <_start@@Base+0x8b30>
   1b648:	ldr	r0, [fp, #-16]
   1b64c:	bl	1b5d0 <_start@@Base+0x8be0>
   1b650:	mov	r3, r0
   1b654:	mov	r0, r3
   1b658:	sub	sp, fp, #4
   1b65c:	ldr	fp, [sp]
   1b660:	add	sp, sp, #4
   1b664:	pop	{pc}		; (ldr pc, [sp], #4)
   1b668:	str	fp, [sp, #-8]!
   1b66c:	str	lr, [sp, #4]
   1b670:	add	fp, sp, #4
   1b674:	sub	sp, sp, #8
   1b678:	str	r0, [fp, #-8]
   1b67c:	mov	r1, #1
   1b680:	ldr	r0, [fp, #-8]
   1b684:	bl	2c094 <flatcc_builder_start_table@@Base>
   1b688:	mov	r3, r0
   1b68c:	mov	r0, r3
   1b690:	sub	sp, fp, #4
   1b694:	ldr	fp, [sp]
   1b698:	add	sp, sp, #4
   1b69c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6a0:	str	fp, [sp, #-8]!
   1b6a4:	str	lr, [sp, #4]
   1b6a8:	add	fp, sp, #4
   1b6ac:	sub	sp, sp, #8
   1b6b0:	str	r0, [fp, #-8]
   1b6b4:	mov	r2, #0
   1b6b8:	ldr	r3, [pc, #88]	; 1b718 <_start@@Base+0x8d28>
   1b6bc:	add	r3, pc, r3
   1b6c0:	mov	r1, r3
   1b6c4:	ldr	r0, [fp, #-8]
   1b6c8:	bl	2cb54 <flatcc_builder_check_required@@Base>
   1b6cc:	mov	r3, r0
   1b6d0:	cmp	r3, #0
   1b6d4:	bne	1b6f8 <_start@@Base+0x8d08>
   1b6d8:	ldr	r3, [pc, #60]	; 1b71c <_start@@Base+0x8d2c>
   1b6dc:	add	r3, pc, r3
   1b6e0:	mov	r2, #215	; 0xd7
   1b6e4:	ldr	r1, [pc, #52]	; 1b720 <_start@@Base+0x8d30>
   1b6e8:	add	r1, pc, r1
   1b6ec:	ldr	r0, [pc, #48]	; 1b724 <_start@@Base+0x8d34>
   1b6f0:	add	r0, pc, r0
   1b6f4:	bl	129e0 <__assert_fail@plt>
   1b6f8:	ldr	r0, [fp, #-8]
   1b6fc:	bl	2cc48 <flatcc_builder_end_table@@Base>
   1b700:	mov	r3, r0
   1b704:	mov	r0, r3
   1b708:	sub	sp, fp, #4
   1b70c:	ldr	fp, [sp]
   1b710:	add	sp, sp, #4
   1b714:	pop	{pc}		; (ldr pc, [sp], #4)
   1b718:	andeq	r7, r1, r8, lsr #1
   1b71c:	andeq	sl, r1, r0, lsr #8
   1b720:	andeq	r7, r1, r0, lsl #1
   1b724:	strdeq	r7, [r1], -r4
   1b728:	str	fp, [sp, #-8]!
   1b72c:	str	lr, [sp, #4]
   1b730:	add	fp, sp, #4
   1b734:	sub	sp, sp, #8
   1b738:	str	r0, [fp, #-8]
   1b73c:	mov	r1, #4
   1b740:	ldr	r0, [fp, #-8]
   1b744:	bl	2c094 <flatcc_builder_start_table@@Base>
   1b748:	mov	r3, r0
   1b74c:	mov	r0, r3
   1b750:	sub	sp, fp, #4
   1b754:	ldr	fp, [sp]
   1b758:	add	sp, sp, #4
   1b75c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b760:	str	fp, [sp, #-8]!
   1b764:	str	lr, [sp, #4]
   1b768:	add	fp, sp, #4
   1b76c:	sub	sp, sp, #8
   1b770:	str	r0, [fp, #-8]
   1b774:	mov	r2, #0
   1b778:	ldr	r3, [pc, #88]	; 1b7d8 <_start@@Base+0x8de8>
   1b77c:	add	r3, pc, r3
   1b780:	mov	r1, r3
   1b784:	ldr	r0, [fp, #-8]
   1b788:	bl	2cb54 <flatcc_builder_check_required@@Base>
   1b78c:	mov	r3, r0
   1b790:	cmp	r3, #0
   1b794:	bne	1b7b8 <_start@@Base+0x8dc8>
   1b798:	ldr	r3, [pc, #60]	; 1b7dc <_start@@Base+0x8dec>
   1b79c:	add	r3, pc, r3
   1b7a0:	mov	r2, #217	; 0xd9
   1b7a4:	ldr	r1, [pc, #52]	; 1b7e0 <_start@@Base+0x8df0>
   1b7a8:	add	r1, pc, r1
   1b7ac:	ldr	r0, [pc, #48]	; 1b7e4 <_start@@Base+0x8df4>
   1b7b0:	add	r0, pc, r0
   1b7b4:	bl	129e0 <__assert_fail@plt>
   1b7b8:	ldr	r0, [fp, #-8]
   1b7bc:	bl	2cc48 <flatcc_builder_end_table@@Base>
   1b7c0:	mov	r3, r0
   1b7c4:	mov	r0, r3
   1b7c8:	sub	sp, fp, #4
   1b7cc:	ldr	fp, [sp]
   1b7d0:	add	sp, sp, #4
   1b7d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7d8:	andeq	r7, r1, r8, lsr #2
   1b7dc:	andeq	sl, r1, r8, lsl #15
   1b7e0:	andeq	r6, r1, r0, asr #31
   1b7e4:	strdeq	r7, [r1], -r8
   1b7e8:	str	fp, [sp, #-8]!
   1b7ec:	str	lr, [sp, #4]
   1b7f0:	add	fp, sp, #4
   1b7f4:	sub	sp, sp, #8
   1b7f8:	str	r0, [fp, #-8]
   1b7fc:	mov	r1, #3
   1b800:	ldr	r0, [fp, #-8]
   1b804:	bl	2c094 <flatcc_builder_start_table@@Base>
   1b808:	mov	r3, r0
   1b80c:	mov	r0, r3
   1b810:	sub	sp, fp, #4
   1b814:	ldr	fp, [sp]
   1b818:	add	sp, sp, #4
   1b81c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b820:	str	fp, [sp, #-8]!
   1b824:	str	lr, [sp, #4]
   1b828:	add	fp, sp, #4
   1b82c:	sub	sp, sp, #8
   1b830:	str	r0, [fp, #-8]
   1b834:	mov	r2, #0
   1b838:	ldr	r3, [pc, #88]	; 1b898 <_start@@Base+0x8ea8>
   1b83c:	add	r3, pc, r3
   1b840:	mov	r1, r3
   1b844:	ldr	r0, [fp, #-8]
   1b848:	bl	2cb54 <flatcc_builder_check_required@@Base>
   1b84c:	mov	r3, r0
   1b850:	cmp	r3, #0
   1b854:	bne	1b878 <_start@@Base+0x8e88>
   1b858:	ldr	r3, [pc, #60]	; 1b89c <_start@@Base+0x8eac>
   1b85c:	add	r3, pc, r3
   1b860:	mov	r2, #221	; 0xdd
   1b864:	ldr	r1, [pc, #52]	; 1b8a0 <_start@@Base+0x8eb0>
   1b868:	add	r1, pc, r1
   1b86c:	ldr	r0, [pc, #48]	; 1b8a4 <_start@@Base+0x8eb4>
   1b870:	add	r0, pc, r0
   1b874:	bl	129e0 <__assert_fail@plt>
   1b878:	ldr	r0, [fp, #-8]
   1b87c:	bl	2cc48 <flatcc_builder_end_table@@Base>
   1b880:	mov	r3, r0
   1b884:	mov	r0, r3
   1b888:	sub	sp, fp, #4
   1b88c:	ldr	fp, [sp]
   1b890:	add	sp, sp, #4
   1b894:	pop	{pc}		; (ldr pc, [sp], #4)
   1b898:	andeq	r7, r1, r4, asr #2
   1b89c:	andeq	sl, r1, r4, lsr #12
   1b8a0:	andeq	r6, r1, r0, lsl #30
   1b8a4:	andeq	r7, r1, r4, lsl r1
   1b8a8:	str	fp, [sp, #-8]!
   1b8ac:	str	lr, [sp, #4]
   1b8b0:	add	fp, sp, #4
   1b8b4:	sub	sp, sp, #8
   1b8b8:	str	r0, [fp, #-8]
   1b8bc:	mov	r1, #4
   1b8c0:	ldr	r0, [fp, #-8]
   1b8c4:	bl	2c094 <flatcc_builder_start_table@@Base>
   1b8c8:	mov	r3, r0
   1b8cc:	mov	r0, r3
   1b8d0:	sub	sp, fp, #4
   1b8d4:	ldr	fp, [sp]
   1b8d8:	add	sp, sp, #4
   1b8dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8e0:	str	fp, [sp, #-8]!
   1b8e4:	str	lr, [sp, #4]
   1b8e8:	add	fp, sp, #4
   1b8ec:	sub	sp, sp, #8
   1b8f0:	str	r0, [fp, #-8]
   1b8f4:	mov	r2, #0
   1b8f8:	ldr	r3, [pc, #88]	; 1b958 <_start@@Base+0x8f68>
   1b8fc:	add	r3, pc, r3
   1b900:	mov	r1, r3
   1b904:	ldr	r0, [fp, #-8]
   1b908:	bl	2cb54 <flatcc_builder_check_required@@Base>
   1b90c:	mov	r3, r0
   1b910:	cmp	r3, #0
   1b914:	bne	1b938 <_start@@Base+0x8f48>
   1b918:	ldr	r3, [pc, #60]	; 1b95c <_start@@Base+0x8f6c>
   1b91c:	add	r3, pc, r3
   1b920:	mov	r2, #223	; 0xdf
   1b924:	ldr	r1, [pc, #52]	; 1b960 <_start@@Base+0x8f70>
   1b928:	add	r1, pc, r1
   1b92c:	ldr	r0, [pc, #48]	; 1b964 <_start@@Base+0x8f74>
   1b930:	add	r0, pc, r0
   1b934:	bl	129e0 <__assert_fail@plt>
   1b938:	ldr	r0, [fp, #-8]
   1b93c:	bl	2cc48 <flatcc_builder_end_table@@Base>
   1b940:	mov	r3, r0
   1b944:	mov	r0, r3
   1b948:	sub	sp, fp, #4
   1b94c:	ldr	fp, [sp]
   1b950:	add	sp, sp, #4
   1b954:	pop	{pc}		; (ldr pc, [sp], #4)
   1b958:	andeq	r7, r1, r4, lsr #2
   1b95c:	andeq	sl, r1, r4, lsr r6
   1b960:	andeq	r6, r1, r0, asr #28
   1b964:	strdeq	r7, [r1], -r4
   1b968:	str	fp, [sp, #-8]!
   1b96c:	str	lr, [sp, #4]
   1b970:	add	fp, sp, #4
   1b974:	sub	sp, sp, #8
   1b978:	str	r0, [fp, #-8]
   1b97c:	mov	r1, #36	; 0x24
   1b980:	ldr	r0, [fp, #-8]
   1b984:	bl	2c094 <flatcc_builder_start_table@@Base>
   1b988:	mov	r3, r0
   1b98c:	mov	r0, r3
   1b990:	sub	sp, fp, #4
   1b994:	ldr	fp, [sp]
   1b998:	add	sp, sp, #4
   1b99c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9a0:	str	fp, [sp, #-8]!
   1b9a4:	str	lr, [sp, #4]
   1b9a8:	add	fp, sp, #4
   1b9ac:	sub	sp, sp, #8
   1b9b0:	str	r0, [fp, #-8]
   1b9b4:	mov	r2, #1
   1b9b8:	ldr	r3, [pc, #88]	; 1ba18 <_start@@Base+0x9028>
   1b9bc:	add	r3, pc, r3
   1b9c0:	mov	r1, r3
   1b9c4:	ldr	r0, [fp, #-8]
   1b9c8:	bl	2cb54 <flatcc_builder_check_required@@Base>
   1b9cc:	mov	r3, r0
   1b9d0:	cmp	r3, #0
   1b9d4:	bne	1b9f8 <_start@@Base+0x9008>
   1b9d8:	ldr	r3, [pc, #60]	; 1ba1c <_start@@Base+0x902c>
   1b9dc:	add	r3, pc, r3
   1b9e0:	mov	r2, #235	; 0xeb
   1b9e4:	ldr	r1, [pc, #52]	; 1ba20 <_start@@Base+0x9030>
   1b9e8:	add	r1, pc, r1
   1b9ec:	ldr	r0, [pc, #48]	; 1ba24 <_start@@Base+0x9034>
   1b9f0:	add	r0, pc, r0
   1b9f4:	bl	129e0 <__assert_fail@plt>
   1b9f8:	ldr	r0, [fp, #-8]
   1b9fc:	bl	2cc48 <flatcc_builder_end_table@@Base>
   1ba00:	mov	r3, r0
   1ba04:	mov	r0, r3
   1ba08:	sub	sp, fp, #4
   1ba0c:	ldr	fp, [sp]
   1ba10:	add	sp, sp, #4
   1ba14:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba18:	andeq	r7, r1, r4, lsl r1
   1ba1c:	ldrdeq	sl, [r1], -ip
   1ba20:	andeq	r6, r1, r0, lsl #27
   1ba24:	andeq	r7, r1, r4, ror #1
   1ba28:	str	fp, [sp, #-8]!
   1ba2c:	str	lr, [sp, #4]
   1ba30:	add	fp, sp, #4
   1ba34:	sub	sp, sp, #8
   1ba38:	str	r0, [fp, #-8]
   1ba3c:	str	r1, [fp, #-12]
   1ba40:	ldr	r3, [fp, #-12]
   1ba44:	cmp	r3, #0
   1ba48:	beq	1ba60 <_start@@Base+0x9070>
   1ba4c:	ldr	r1, [fp, #-12]
   1ba50:	ldr	r0, [fp, #-8]
   1ba54:	bl	2b728 <flatcc_builder_offset_vector_push@@Base>
   1ba58:	mov	r3, r0
   1ba5c:	b	1ba64 <_start@@Base+0x9074>
   1ba60:	mov	r3, #0
   1ba64:	mov	r0, r3
   1ba68:	sub	sp, fp, #4
   1ba6c:	ldr	fp, [sp]
   1ba70:	add	sp, sp, #4
   1ba74:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba78:	str	fp, [sp, #-8]!
   1ba7c:	str	lr, [sp, #4]
   1ba80:	add	fp, sp, #4
   1ba84:	sub	sp, sp, #8
   1ba88:	str	r0, [fp, #-8]
   1ba8c:	mov	r1, #12
   1ba90:	ldr	r0, [fp, #-8]
   1ba94:	bl	2c094 <flatcc_builder_start_table@@Base>
   1ba98:	mov	r3, r0
   1ba9c:	mov	r0, r3
   1baa0:	sub	sp, fp, #4
   1baa4:	ldr	fp, [sp]
   1baa8:	add	sp, sp, #4
   1baac:	pop	{pc}		; (ldr pc, [sp], #4)
   1bab0:	str	fp, [sp, #-8]!
   1bab4:	str	lr, [sp, #4]
   1bab8:	add	fp, sp, #4
   1babc:	sub	sp, sp, #8
   1bac0:	str	r0, [fp, #-8]
   1bac4:	mov	r2, #0
   1bac8:	ldr	r3, [pc, #88]	; 1bb28 <_start@@Base+0x9138>
   1bacc:	add	r3, pc, r3
   1bad0:	mov	r1, r3
   1bad4:	ldr	r0, [fp, #-8]
   1bad8:	bl	2cb54 <flatcc_builder_check_required@@Base>
   1badc:	mov	r3, r0
   1bae0:	cmp	r3, #0
   1bae4:	bne	1bb08 <_start@@Base+0x9118>
   1bae8:	ldr	r3, [pc, #60]	; 1bb2c <_start@@Base+0x913c>
   1baec:	add	r3, pc, r3
   1baf0:	mov	r2, #237	; 0xed
   1baf4:	ldr	r1, [pc, #52]	; 1bb30 <_start@@Base+0x9140>
   1baf8:	add	r1, pc, r1
   1bafc:	ldr	r0, [pc, #48]	; 1bb34 <_start@@Base+0x9144>
   1bb00:	add	r0, pc, r0
   1bb04:	bl	129e0 <__assert_fail@plt>
   1bb08:	ldr	r0, [fp, #-8]
   1bb0c:	bl	2cc48 <flatcc_builder_end_table@@Base>
   1bb10:	mov	r3, r0
   1bb14:	mov	r0, r3
   1bb18:	sub	sp, fp, #4
   1bb1c:	ldr	fp, [sp]
   1bb20:	add	sp, sp, #4
   1bb24:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb28:	andeq	r7, r1, ip, lsr #1
   1bb2c:	andeq	r9, r1, ip, ror #28
   1bb30:	andeq	r6, r1, r0, ror ip
   1bb34:	andeq	r7, r1, ip, ror r0
   1bb38:	str	fp, [sp, #-8]!
   1bb3c:	str	lr, [sp, #4]
   1bb40:	add	fp, sp, #4
   1bb44:	sub	sp, sp, #8
   1bb48:	str	r0, [fp, #-8]
   1bb4c:	mov	r1, #1
   1bb50:	ldr	r0, [fp, #-8]
   1bb54:	bl	2c094 <flatcc_builder_start_table@@Base>
   1bb58:	mov	r3, r0
   1bb5c:	mov	r0, r3
   1bb60:	sub	sp, fp, #4
   1bb64:	ldr	fp, [sp]
   1bb68:	add	sp, sp, #4
   1bb6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb70:	str	fp, [sp, #-8]!
   1bb74:	str	lr, [sp, #4]
   1bb78:	add	fp, sp, #4
   1bb7c:	sub	sp, sp, #8
   1bb80:	str	r0, [fp, #-8]
   1bb84:	mov	r2, #0
   1bb88:	ldr	r3, [pc, #88]	; 1bbe8 <_start@@Base+0x91f8>
   1bb8c:	add	r3, pc, r3
   1bb90:	mov	r1, r3
   1bb94:	ldr	r0, [fp, #-8]
   1bb98:	bl	2cb54 <flatcc_builder_check_required@@Base>
   1bb9c:	mov	r3, r0
   1bba0:	cmp	r3, #0
   1bba4:	bne	1bbc8 <_start@@Base+0x91d8>
   1bba8:	ldr	r3, [pc, #60]	; 1bbec <_start@@Base+0x91fc>
   1bbac:	add	r3, pc, r3
   1bbb0:	mov	r2, #239	; 0xef
   1bbb4:	ldr	r1, [pc, #52]	; 1bbf0 <_start@@Base+0x9200>
   1bbb8:	add	r1, pc, r1
   1bbbc:	ldr	r0, [pc, #48]	; 1bbf4 <_start@@Base+0x9204>
   1bbc0:	add	r0, pc, r0
   1bbc4:	bl	129e0 <__assert_fail@plt>
   1bbc8:	ldr	r0, [fp, #-8]
   1bbcc:	bl	2cc48 <flatcc_builder_end_table@@Base>
   1bbd0:	mov	r3, r0
   1bbd4:	mov	r0, r3
   1bbd8:	sub	sp, fp, #4
   1bbdc:	ldr	fp, [sp]
   1bbe0:	add	sp, sp, #4
   1bbe4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbe8:	andeq	r7, r1, r0, lsr #1
   1bbec:	ldrdeq	sl, [r1], -r0
   1bbf0:			; <UNDEFINED> instruction: 0x00016bb0
   1bbf4:	andeq	r7, r1, r0, ror r0
   1bbf8:	str	fp, [sp, #-8]!
   1bbfc:	str	lr, [sp, #4]
   1bc00:	add	fp, sp, #4
   1bc04:	sub	sp, sp, #8
   1bc08:	str	r0, [fp, #-8]
   1bc0c:	mov	r1, #10
   1bc10:	ldr	r0, [fp, #-8]
   1bc14:	bl	2c094 <flatcc_builder_start_table@@Base>
   1bc18:	mov	r3, r0
   1bc1c:	mov	r0, r3
   1bc20:	sub	sp, fp, #4
   1bc24:	ldr	fp, [sp]
   1bc28:	add	sp, sp, #4
   1bc2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc30:	str	fp, [sp, #-8]!
   1bc34:	str	lr, [sp, #4]
   1bc38:	add	fp, sp, #4
   1bc3c:	sub	sp, sp, #8
   1bc40:	str	r0, [fp, #-8]
   1bc44:	mov	r2, #0
   1bc48:	ldr	r3, [pc, #88]	; 1bca8 <_start@@Base+0x92b8>
   1bc4c:	add	r3, pc, r3
   1bc50:	mov	r1, r3
   1bc54:	ldr	r0, [fp, #-8]
   1bc58:	bl	2cb54 <flatcc_builder_check_required@@Base>
   1bc5c:	mov	r3, r0
   1bc60:	cmp	r3, #0
   1bc64:	bne	1bc88 <_start@@Base+0x9298>
   1bc68:	ldr	r3, [pc, #60]	; 1bcac <_start@@Base+0x92bc>
   1bc6c:	add	r3, pc, r3
   1bc70:	mov	r2, #241	; 0xf1
   1bc74:	ldr	r1, [pc, #52]	; 1bcb0 <_start@@Base+0x92c0>
   1bc78:	add	r1, pc, r1
   1bc7c:	ldr	r0, [pc, #48]	; 1bcb4 <_start@@Base+0x92c4>
   1bc80:	add	r0, pc, r0
   1bc84:	bl	129e0 <__assert_fail@plt>
   1bc88:	ldr	r0, [fp, #-8]
   1bc8c:	bl	2cc48 <flatcc_builder_end_table@@Base>
   1bc90:	mov	r3, r0
   1bc94:	mov	r0, r3
   1bc98:	sub	sp, fp, #4
   1bc9c:	ldr	fp, [sp]
   1bca0:	add	sp, sp, #4
   1bca4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bca8:	andeq	r7, r1, r4, ror r0
   1bcac:	andeq	sl, r1, r8, lsr #8
   1bcb0:	strdeq	r6, [r1], -r0
   1bcb4:	andeq	r7, r1, r4, asr #32
   1bcb8:	push	{fp}		; (str fp, [sp, #-4]!)
   1bcbc:	add	fp, sp, #0
   1bcc0:	sub	sp, sp, #20
   1bcc4:	str	r0, [fp, #-16]
   1bcc8:	str	r1, [fp, #-20]	; 0xffffffec
   1bccc:	mov	r3, #1
   1bcd0:	strb	r3, [fp, #-12]
   1bcd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bcd8:	str	r3, [fp, #-8]
   1bcdc:	ldr	r3, [fp, #-16]
   1bce0:	mov	r1, r3
   1bce4:	sub	r3, fp, #12
   1bce8:	ldrd	r2, [r3]
   1bcec:	strd	r2, [r1]
   1bcf0:	ldr	r0, [fp, #-16]
   1bcf4:	add	sp, fp, #0
   1bcf8:	pop	{fp}		; (ldr fp, [sp], #4)
   1bcfc:	bx	lr
   1bd00:	push	{fp}		; (str fp, [sp, #-4]!)
   1bd04:	add	fp, sp, #0
   1bd08:	sub	sp, sp, #20
   1bd0c:	str	r0, [fp, #-16]
   1bd10:	str	r1, [fp, #-20]	; 0xffffffec
   1bd14:	mov	r3, #2
   1bd18:	strb	r3, [fp, #-12]
   1bd1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bd20:	str	r3, [fp, #-8]
   1bd24:	ldr	r3, [fp, #-16]
   1bd28:	mov	r1, r3
   1bd2c:	sub	r3, fp, #12
   1bd30:	ldrd	r2, [r3]
   1bd34:	strd	r2, [r1]
   1bd38:	ldr	r0, [fp, #-16]
   1bd3c:	add	sp, fp, #0
   1bd40:	pop	{fp}		; (ldr fp, [sp], #4)
   1bd44:	bx	lr
   1bd48:	push	{fp}		; (str fp, [sp, #-4]!)
   1bd4c:	add	fp, sp, #0
   1bd50:	sub	sp, sp, #20
   1bd54:	str	r0, [fp, #-16]
   1bd58:	str	r1, [fp, #-20]	; 0xffffffec
   1bd5c:	mov	r3, #4
   1bd60:	strb	r3, [fp, #-12]
   1bd64:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bd68:	str	r3, [fp, #-8]
   1bd6c:	ldr	r3, [fp, #-16]
   1bd70:	mov	r1, r3
   1bd74:	sub	r3, fp, #12
   1bd78:	ldrd	r2, [r3]
   1bd7c:	strd	r2, [r1]
   1bd80:	ldr	r0, [fp, #-16]
   1bd84:	add	sp, fp, #0
   1bd88:	pop	{fp}		; (ldr fp, [sp], #4)
   1bd8c:	bx	lr
   1bd90:	str	fp, [sp, #-8]!
   1bd94:	str	lr, [sp, #4]
   1bd98:	add	fp, sp, #4
   1bd9c:	sub	sp, sp, #8
   1bda0:	str	r0, [fp, #-8]
   1bda4:	ldr	r0, [fp, #-8]
   1bda8:	bl	2dd7c <flatcc_builder_start_union_vector@@Base>
   1bdac:	mov	r3, r0
   1bdb0:	mov	r0, r3
   1bdb4:	sub	sp, fp, #4
   1bdb8:	ldr	fp, [sp]
   1bdbc:	add	sp, sp, #4
   1bdc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdc4:	str	fp, [sp, #-8]!
   1bdc8:	str	lr, [sp, #4]
   1bdcc:	add	fp, sp, #4
   1bdd0:	sub	sp, sp, #8
   1bdd4:	str	r0, [fp, #-8]
   1bdd8:	str	r1, [fp, #-12]
   1bddc:	ldr	r3, [fp, #-8]
   1bde0:	ldr	r1, [fp, #-12]
   1bde4:	mov	r0, r3
   1bde8:	bl	2de04 <flatcc_builder_end_union_vector@@Base>
   1bdec:	ldr	r0, [fp, #-8]
   1bdf0:	sub	sp, fp, #4
   1bdf4:	ldr	fp, [sp]
   1bdf8:	add	sp, sp, #4
   1bdfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1be00:	str	fp, [sp, #-8]!
   1be04:	str	lr, [sp, #4]
   1be08:	add	fp, sp, #4
   1be0c:	sub	sp, sp, #16
   1be10:	str	r0, [fp, #-8]
   1be14:	sub	r3, fp, #16
   1be18:	stm	r3, {r1, r2}
   1be1c:	sub	r3, fp, #16
   1be20:	ldm	r3, {r1, r2}
   1be24:	ldr	r0, [fp, #-8]
   1be28:	bl	2e16c <flatcc_builder_union_vector_push@@Base>
   1be2c:	mov	r3, r0
   1be30:	mov	r0, r3
   1be34:	sub	sp, fp, #4
   1be38:	ldr	fp, [sp]
   1be3c:	add	sp, sp, #4
   1be40:	pop	{pc}		; (ldr pc, [sp], #4)
   1be44:	push	{fp}		; (str fp, [sp, #-4]!)
   1be48:	add	fp, sp, #0
   1be4c:	sub	sp, sp, #20
   1be50:	str	r0, [fp, #-16]
   1be54:	str	r1, [fp, #-20]	; 0xffffffec
   1be58:	mov	r3, #2
   1be5c:	strb	r3, [fp, #-12]
   1be60:	ldr	r3, [fp, #-20]	; 0xffffffec
   1be64:	str	r3, [fp, #-8]
   1be68:	ldr	r3, [fp, #-16]
   1be6c:	mov	r1, r3
   1be70:	sub	r3, fp, #12
   1be74:	ldrd	r2, [r3]
   1be78:	strd	r2, [r1]
   1be7c:	ldr	r0, [fp, #-16]
   1be80:	add	sp, fp, #0
   1be84:	pop	{fp}		; (ldr fp, [sp], #4)
   1be88:	bx	lr
   1be8c:	push	{fp}		; (str fp, [sp, #-4]!)
   1be90:	add	fp, sp, #0
   1be94:	sub	sp, sp, #20
   1be98:	str	r0, [fp, #-16]
   1be9c:	str	r1, [fp, #-20]	; 0xffffffec
   1bea0:	mov	r3, #8
   1bea4:	strb	r3, [fp, #-12]
   1bea8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1beac:	str	r3, [fp, #-8]
   1beb0:	ldr	r3, [fp, #-16]
   1beb4:	mov	r1, r3
   1beb8:	sub	r3, fp, #12
   1bebc:	ldrd	r2, [r3]
   1bec0:	strd	r2, [r1]
   1bec4:	ldr	r0, [fp, #-16]
   1bec8:	add	sp, fp, #0
   1becc:	pop	{fp}		; (ldr fp, [sp], #4)
   1bed0:	bx	lr
   1bed4:	push	{fp}		; (str fp, [sp, #-4]!)
   1bed8:	add	fp, sp, #0
   1bedc:	sub	sp, sp, #20
   1bee0:	str	r0, [fp, #-16]
   1bee4:	str	r1, [fp, #-20]	; 0xffffffec
   1bee8:	mov	r3, #9
   1beec:	strb	r3, [fp, #-12]
   1bef0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bef4:	str	r3, [fp, #-8]
   1bef8:	ldr	r3, [fp, #-16]
   1befc:	mov	r1, r3
   1bf00:	sub	r3, fp, #12
   1bf04:	ldrd	r2, [r3]
   1bf08:	strd	r2, [r1]
   1bf0c:	ldr	r0, [fp, #-16]
   1bf10:	add	sp, fp, #0
   1bf14:	pop	{fp}		; (ldr fp, [sp], #4)
   1bf18:	bx	lr
   1bf1c:	push	{fp}		; (str fp, [sp, #-4]!)
   1bf20:	add	fp, sp, #0
   1bf24:	sub	sp, sp, #20
   1bf28:	str	r0, [fp, #-16]
   1bf2c:	str	r1, [fp, #-20]	; 0xffffffec
   1bf30:	mov	r3, #11
   1bf34:	strb	r3, [fp, #-12]
   1bf38:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bf3c:	str	r3, [fp, #-8]
   1bf40:	ldr	r3, [fp, #-16]
   1bf44:	mov	r1, r3
   1bf48:	sub	r3, fp, #12
   1bf4c:	ldrd	r2, [r3]
   1bf50:	strd	r2, [r1]
   1bf54:	ldr	r0, [fp, #-16]
   1bf58:	add	sp, fp, #0
   1bf5c:	pop	{fp}		; (ldr fp, [sp], #4)
   1bf60:	bx	lr
   1bf64:	str	fp, [sp, #-8]!
   1bf68:	str	lr, [sp, #4]
   1bf6c:	add	fp, sp, #4
   1bf70:	sub	sp, sp, #16
   1bf74:	str	r0, [fp, #-8]
   1bf78:	sub	r3, fp, #16
   1bf7c:	stm	r3, {r1, r2}
   1bf80:	sub	r3, fp, #16
   1bf84:	ldm	r3, {r1, r2}
   1bf88:	ldr	r0, [fp, #-8]
   1bf8c:	bl	2e16c <flatcc_builder_union_vector_push@@Base>
   1bf90:	mov	r3, r0
   1bf94:	mov	r0, r3
   1bf98:	sub	sp, fp, #4
   1bf9c:	ldr	fp, [sp]
   1bfa0:	add	sp, sp, #4
   1bfa4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfa8:	str	fp, [sp, #-8]!
   1bfac:	str	lr, [sp, #4]
   1bfb0:	add	fp, sp, #4
   1bfb4:	sub	sp, sp, #8
   1bfb8:	str	r0, [fp, #-8]
   1bfbc:	mov	r3, #1
   1bfc0:	mov	r2, #0
   1bfc4:	mov	r1, #0
   1bfc8:	ldr	r0, [fp, #-8]
   1bfcc:	bl	2e698 <flatcc_builder_table_add@@Base>
   1bfd0:	mov	r3, r0
   1bfd4:	mov	r0, r3
   1bfd8:	sub	sp, fp, #4
   1bfdc:	ldr	fp, [sp]
   1bfe0:	add	sp, sp, #4
   1bfe4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfe8:	str	fp, [sp, #-8]!
   1bfec:	str	lr, [sp, #4]
   1bff0:	add	fp, sp, #4
   1bff4:	sub	sp, sp, #16
   1bff8:	str	r0, [fp, #-16]
   1bffc:	str	r1, [fp, #-20]	; 0xffffffec
   1c000:	ldr	r0, [fp, #-16]
   1c004:	bl	1bfa8 <_start@@Base+0x95b8>
   1c008:	str	r0, [fp, #-8]
   1c00c:	ldr	r3, [fp, #-8]
   1c010:	cmp	r3, #0
   1c014:	bne	1c020 <_start@@Base+0x9630>
   1c018:	mvn	r3, #0
   1c01c:	b	1c030 <_start@@Base+0x9640>
   1c020:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c024:	ldr	r0, [fp, #-8]
   1c028:	bl	1af54 <_start@@Base+0x8564>
   1c02c:	mov	r3, #0
   1c030:	mov	r0, r3
   1c034:	sub	sp, fp, #4
   1c038:	ldr	fp, [sp]
   1c03c:	add	sp, sp, #4
   1c040:	pop	{pc}		; (ldr pc, [sp], #4)
   1c044:	str	fp, [sp, #-8]!
   1c048:	str	lr, [sp, #4]
   1c04c:	add	fp, sp, #4
   1c050:	sub	sp, sp, #8
   1c054:	str	r0, [fp, #-8]
   1c058:	str	r1, [fp, #-12]
   1c05c:	ldr	r0, [fp, #-8]
   1c060:	bl	1b668 <_start@@Base+0x8c78>
   1c064:	mov	r3, r0
   1c068:	cmp	r3, #0
   1c06c:	bne	1c088 <_start@@Base+0x9698>
   1c070:	ldr	r1, [fp, #-12]
   1c074:	ldr	r0, [fp, #-8]
   1c078:	bl	1bfe8 <_start@@Base+0x95f8>
   1c07c:	mov	r3, r0
   1c080:	cmp	r3, #0
   1c084:	beq	1c090 <_start@@Base+0x96a0>
   1c088:	mov	r3, #0
   1c08c:	b	1c09c <_start@@Base+0x96ac>
   1c090:	ldr	r0, [fp, #-8]
   1c094:	bl	1b6a0 <_start@@Base+0x8cb0>
   1c098:	mov	r3, r0
   1c09c:	mov	r0, r3
   1c0a0:	sub	sp, fp, #4
   1c0a4:	ldr	fp, [sp]
   1c0a8:	add	sp, sp, #4
   1c0ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0b0:	str	fp, [sp, #-8]!
   1c0b4:	str	lr, [sp, #4]
   1c0b8:	add	fp, sp, #4
   1c0bc:	sub	sp, sp, #8
   1c0c0:	str	r0, [fp, #-8]
   1c0c4:	str	r1, [fp, #-12]
   1c0c8:	ldr	r3, [pc, #84]	; 1c124 <_start@@Base+0x9734>
   1c0cc:	add	r3, pc, r3
   1c0d0:	mov	r1, r3
   1c0d4:	ldr	r0, [fp, #-8]
   1c0d8:	bl	1ab54 <_start@@Base+0x8164>
   1c0dc:	mov	r3, r0
   1c0e0:	cmp	r3, #0
   1c0e4:	beq	1c0f0 <_start@@Base+0x9700>
   1c0e8:	mov	r3, #0
   1c0ec:	b	1c110 <_start@@Base+0x9720>
   1c0f0:	ldr	r1, [fp, #-12]
   1c0f4:	ldr	r0, [fp, #-8]
   1c0f8:	bl	1c044 <_start@@Base+0x9654>
   1c0fc:	mov	r3, r0
   1c100:	mov	r1, r3
   1c104:	ldr	r0, [fp, #-8]
   1c108:	bl	1abdc <_start@@Base+0x81ec>
   1c10c:	mov	r3, r0
   1c110:	mov	r0, r3
   1c114:	sub	sp, fp, #4
   1c118:	ldr	fp, [sp]
   1c11c:	add	sp, sp, #4
   1c120:	pop	{pc}		; (ldr pc, [sp], #4)
   1c124:	andeq	r6, r1, r8, lsr #11
   1c128:	str	fp, [sp, #-8]!
   1c12c:	str	lr, [sp, #4]
   1c130:	add	fp, sp, #4
   1c134:	sub	sp, sp, #8
   1c138:	str	r0, [fp, #-8]
   1c13c:	str	r1, [fp, #-12]
   1c140:	ldr	r3, [pc, #84]	; 1c19c <_start@@Base+0x97ac>
   1c144:	add	r3, pc, r3
   1c148:	mov	r1, r3
   1c14c:	ldr	r0, [fp, #-8]
   1c150:	bl	1ab54 <_start@@Base+0x8164>
   1c154:	mov	r3, r0
   1c158:	cmp	r3, #0
   1c15c:	beq	1c168 <_start@@Base+0x9778>
   1c160:	mov	r3, #0
   1c164:	b	1c188 <_start@@Base+0x9798>
   1c168:	ldr	r1, [fp, #-12]
   1c16c:	ldr	r0, [fp, #-8]
   1c170:	bl	1c044 <_start@@Base+0x9654>
   1c174:	mov	r3, r0
   1c178:	mov	r1, r3
   1c17c:	ldr	r0, [fp, #-8]
   1c180:	bl	1abdc <_start@@Base+0x81ec>
   1c184:	mov	r3, r0
   1c188:	mov	r0, r3
   1c18c:	sub	sp, fp, #4
   1c190:	ldr	fp, [sp]
   1c194:	add	sp, sp, #4
   1c198:	pop	{pc}		; (ldr pc, [sp], #4)
   1c19c:	andeq	r6, r1, r8, lsl #24
   1c1a0:	str	fp, [sp, #-8]!
   1c1a4:	str	lr, [sp, #4]
   1c1a8:	add	fp, sp, #4
   1c1ac:	sub	sp, sp, #16
   1c1b0:	str	r0, [fp, #-16]
   1c1b4:	mov	r3, r1
   1c1b8:	strb	r3, [fp, #-17]	; 0xffffffef
   1c1bc:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1c1c0:	cmp	r3, #2
   1c1c4:	bne	1c1d0 <_start@@Base+0x97e0>
   1c1c8:	mov	r3, #0
   1c1cc:	b	1c210 <_start@@Base+0x9820>
   1c1d0:	mov	r3, #1
   1c1d4:	mov	r2, #1
   1c1d8:	mov	r1, #0
   1c1dc:	ldr	r0, [fp, #-16]
   1c1e0:	bl	2e698 <flatcc_builder_table_add@@Base>
   1c1e4:	str	r0, [fp, #-8]
   1c1e8:	ldr	r3, [fp, #-8]
   1c1ec:	cmp	r3, #0
   1c1f0:	bne	1c1fc <_start@@Base+0x980c>
   1c1f4:	mvn	r3, #0
   1c1f8:	b	1c210 <_start@@Base+0x9820>
   1c1fc:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1c200:	mov	r1, r3
   1c204:	ldr	r0, [fp, #-8]
   1c208:	bl	1ac18 <_start@@Base+0x8228>
   1c20c:	mov	r3, #0
   1c210:	mov	r0, r3
   1c214:	sub	sp, fp, #4
   1c218:	ldr	fp, [sp]
   1c21c:	add	sp, sp, #4
   1c220:	pop	{pc}		; (ldr pc, [sp], #4)
   1c224:	str	fp, [sp, #-8]!
   1c228:	str	lr, [sp, #4]
   1c22c:	add	fp, sp, #4
   1c230:	sub	sp, sp, #16
   1c234:	str	r0, [fp, #-16]
   1c238:	mov	r3, r1
   1c23c:	strb	r3, [fp, #-17]	; 0xffffffef
   1c240:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1c244:	cmp	r3, #2
   1c248:	bne	1c254 <_start@@Base+0x9864>
   1c24c:	mov	r3, #0
   1c250:	b	1c294 <_start@@Base+0x98a4>
   1c254:	mov	r3, #1
   1c258:	mov	r2, #1
   1c25c:	mov	r1, #1
   1c260:	ldr	r0, [fp, #-16]
   1c264:	bl	2e698 <flatcc_builder_table_add@@Base>
   1c268:	str	r0, [fp, #-8]
   1c26c:	ldr	r3, [fp, #-8]
   1c270:	cmp	r3, #0
   1c274:	bne	1c280 <_start@@Base+0x9890>
   1c278:	mvn	r3, #0
   1c27c:	b	1c294 <_start@@Base+0x98a4>
   1c280:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1c284:	mov	r1, r3
   1c288:	ldr	r0, [fp, #-8]
   1c28c:	bl	1ac18 <_start@@Base+0x8228>
   1c290:	mov	r3, #0
   1c294:	mov	r0, r3
   1c298:	sub	sp, fp, #4
   1c29c:	ldr	fp, [sp]
   1c2a0:	add	sp, sp, #4
   1c2a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2a8:	str	fp, [sp, #-8]!
   1c2ac:	str	lr, [sp, #4]
   1c2b0:	add	fp, sp, #4
   1c2b4:	sub	sp, sp, #16
   1c2b8:	str	r0, [fp, #-16]
   1c2bc:	mov	r3, r1
   1c2c0:	strb	r3, [fp, #-17]	; 0xffffffef
   1c2c4:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1c2c8:	cmp	r3, #2
   1c2cc:	bne	1c2d8 <_start@@Base+0x98e8>
   1c2d0:	mov	r3, #0
   1c2d4:	b	1c318 <_start@@Base+0x9928>
   1c2d8:	mov	r3, #1
   1c2dc:	mov	r2, #1
   1c2e0:	mov	r1, #2
   1c2e4:	ldr	r0, [fp, #-16]
   1c2e8:	bl	2e698 <flatcc_builder_table_add@@Base>
   1c2ec:	str	r0, [fp, #-8]
   1c2f0:	ldr	r3, [fp, #-8]
   1c2f4:	cmp	r3, #0
   1c2f8:	bne	1c304 <_start@@Base+0x9914>
   1c2fc:	mvn	r3, #0
   1c300:	b	1c318 <_start@@Base+0x9928>
   1c304:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1c308:	mov	r1, r3
   1c30c:	ldr	r0, [fp, #-8]
   1c310:	bl	1a2f4 <_start@@Base+0x7904>
   1c314:	mov	r3, #0
   1c318:	mov	r0, r3
   1c31c:	sub	sp, fp, #4
   1c320:	ldr	fp, [sp]
   1c324:	add	sp, sp, #4
   1c328:	pop	{pc}		; (ldr pc, [sp], #4)
   1c32c:	str	fp, [sp, #-8]!
   1c330:	str	lr, [sp, #4]
   1c334:	add	fp, sp, #4
   1c338:	sub	sp, sp, #16
   1c33c:	str	r0, [fp, #-16]
   1c340:	mov	r3, r1
   1c344:	strb	r3, [fp, #-17]	; 0xffffffef
   1c348:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1c34c:	cmp	r3, #2
   1c350:	bne	1c35c <_start@@Base+0x996c>
   1c354:	mov	r3, #0
   1c358:	b	1c39c <_start@@Base+0x99ac>
   1c35c:	mov	r3, #1
   1c360:	mov	r2, #1
   1c364:	mov	r1, #3
   1c368:	ldr	r0, [fp, #-16]
   1c36c:	bl	2e698 <flatcc_builder_table_add@@Base>
   1c370:	str	r0, [fp, #-8]
   1c374:	ldr	r3, [fp, #-8]
   1c378:	cmp	r3, #0
   1c37c:	bne	1c388 <_start@@Base+0x9998>
   1c380:	mvn	r3, #0
   1c384:	b	1c39c <_start@@Base+0x99ac>
   1c388:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1c38c:	mov	r1, r3
   1c390:	ldr	r0, [fp, #-8]
   1c394:	bl	1a2f4 <_start@@Base+0x7904>
   1c398:	mov	r3, #0
   1c39c:	mov	r0, r3
   1c3a0:	sub	sp, fp, #4
   1c3a4:	ldr	fp, [sp]
   1c3a8:	add	sp, sp, #4
   1c3ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3b0:	str	fp, [sp, #-8]!
   1c3b4:	str	lr, [sp, #4]
   1c3b8:	add	fp, sp, #4
   1c3bc:	sub	sp, sp, #8
   1c3c0:	str	r0, [fp, #-8]
   1c3c4:	mov	r0, r1
   1c3c8:	mov	r1, r2
   1c3cc:	mov	r2, r3
   1c3d0:	mov	r3, r0
   1c3d4:	strb	r3, [fp, #-9]
   1c3d8:	mov	r3, r1
   1c3dc:	strb	r3, [fp, #-10]
   1c3e0:	mov	r3, r2
   1c3e4:	strb	r3, [fp, #-11]
   1c3e8:	ldr	r0, [fp, #-8]
   1c3ec:	bl	1b728 <_start@@Base+0x8d38>
   1c3f0:	mov	r3, r0
   1c3f4:	cmp	r3, #0
   1c3f8:	bne	1c46c <_start@@Base+0x9a7c>
   1c3fc:	ldrsb	r3, [fp, #-9]
   1c400:	mov	r1, r3
   1c404:	ldr	r0, [fp, #-8]
   1c408:	bl	1c1a0 <_start@@Base+0x97b0>
   1c40c:	mov	r3, r0
   1c410:	cmp	r3, #0
   1c414:	bne	1c46c <_start@@Base+0x9a7c>
   1c418:	ldrsb	r3, [fp, #-10]
   1c41c:	mov	r1, r3
   1c420:	ldr	r0, [fp, #-8]
   1c424:	bl	1c224 <_start@@Base+0x9834>
   1c428:	mov	r3, r0
   1c42c:	cmp	r3, #0
   1c430:	bne	1c46c <_start@@Base+0x9a7c>
   1c434:	ldrb	r3, [fp, #-11]
   1c438:	mov	r1, r3
   1c43c:	ldr	r0, [fp, #-8]
   1c440:	bl	1c2a8 <_start@@Base+0x98b8>
   1c444:	mov	r3, r0
   1c448:	cmp	r3, #0
   1c44c:	bne	1c46c <_start@@Base+0x9a7c>
   1c450:	ldrb	r3, [fp, #4]
   1c454:	mov	r1, r3
   1c458:	ldr	r0, [fp, #-8]
   1c45c:	bl	1c32c <_start@@Base+0x993c>
   1c460:	mov	r3, r0
   1c464:	cmp	r3, #0
   1c468:	beq	1c474 <_start@@Base+0x9a84>
   1c46c:	mov	r3, #0
   1c470:	b	1c480 <_start@@Base+0x9a90>
   1c474:	ldr	r0, [fp, #-8]
   1c478:	bl	1b760 <_start@@Base+0x8d70>
   1c47c:	mov	r3, r0
   1c480:	mov	r0, r3
   1c484:	sub	sp, fp, #4
   1c488:	ldr	fp, [sp]
   1c48c:	add	sp, sp, #4
   1c490:	pop	{pc}		; (ldr pc, [sp], #4)
   1c494:	str	fp, [sp, #-8]!
   1c498:	str	lr, [sp, #4]
   1c49c:	add	fp, sp, #4
   1c4a0:	sub	sp, sp, #16
   1c4a4:	str	r0, [fp, #-16]
   1c4a8:	str	r1, [fp, #-20]	; 0xffffffec
   1c4ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c4b0:	cmp	r3, #0
   1c4b4:	beq	1c4e8 <_start@@Base+0x9af8>
   1c4b8:	mov	r1, #0
   1c4bc:	ldr	r0, [fp, #-16]
   1c4c0:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1c4c4:	str	r0, [fp, #-8]
   1c4c8:	ldr	r3, [fp, #-8]
   1c4cc:	cmp	r3, #0
   1c4d0:	beq	1c4e8 <_start@@Base+0x9af8>
   1c4d4:	ldr	r3, [fp, #-8]
   1c4d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c4dc:	str	r2, [r3]
   1c4e0:	mov	r3, #0
   1c4e4:	b	1c4ec <_start@@Base+0x9afc>
   1c4e8:	mvn	r3, #0
   1c4ec:	mov	r0, r3
   1c4f0:	sub	sp, fp, #4
   1c4f4:	ldr	fp, [sp]
   1c4f8:	add	sp, sp, #4
   1c4fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c500:	str	fp, [sp, #-8]!
   1c504:	str	lr, [sp, #4]
   1c508:	add	fp, sp, #4
   1c50c:	sub	sp, sp, #24
   1c510:	str	r0, [fp, #-16]
   1c514:	strd	r2, [fp, #-28]	; 0xffffffe4
   1c518:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1c51c:	orrs	r3, r2, r3
   1c520:	bne	1c52c <_start@@Base+0x9b3c>
   1c524:	mov	r3, #0
   1c528:	b	1c568 <_start@@Base+0x9b78>
   1c52c:	mov	r3, #8
   1c530:	mov	r2, #8
   1c534:	mov	r1, #1
   1c538:	ldr	r0, [fp, #-16]
   1c53c:	bl	2e698 <flatcc_builder_table_add@@Base>
   1c540:	str	r0, [fp, #-8]
   1c544:	ldr	r3, [fp, #-8]
   1c548:	cmp	r3, #0
   1c54c:	bne	1c558 <_start@@Base+0x9b68>
   1c550:	mvn	r3, #0
   1c554:	b	1c568 <_start@@Base+0x9b78>
   1c558:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1c55c:	ldr	r0, [fp, #-8]
   1c560:	bl	1a7d8 <_start@@Base+0x7de8>
   1c564:	mov	r3, #0
   1c568:	mov	r0, r3
   1c56c:	sub	sp, fp, #4
   1c570:	ldr	fp, [sp]
   1c574:	add	sp, sp, #4
   1c578:	pop	{pc}		; (ldr pc, [sp], #4)
   1c57c:	str	fp, [sp, #-8]!
   1c580:	str	lr, [sp, #4]
   1c584:	add	fp, sp, #4
   1c588:	sub	sp, sp, #16
   1c58c:	str	r0, [fp, #-16]
   1c590:	mov	r3, r1
   1c594:	strh	r3, [fp, #-18]	; 0xffffffee
   1c598:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1c59c:	cmp	r3, #0
   1c5a0:	bne	1c5ac <_start@@Base+0x9bbc>
   1c5a4:	mov	r3, #0
   1c5a8:	b	1c5ec <_start@@Base+0x9bfc>
   1c5ac:	mov	r3, #2
   1c5b0:	mov	r2, #2
   1c5b4:	mov	r1, #2
   1c5b8:	ldr	r0, [fp, #-16]
   1c5bc:	bl	2e698 <flatcc_builder_table_add@@Base>
   1c5c0:	str	r0, [fp, #-8]
   1c5c4:	ldr	r3, [fp, #-8]
   1c5c8:	cmp	r3, #0
   1c5cc:	bne	1c5d8 <_start@@Base+0x9be8>
   1c5d0:	mvn	r3, #0
   1c5d4:	b	1c5ec <_start@@Base+0x9bfc>
   1c5d8:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1c5dc:	mov	r1, r3
   1c5e0:	ldr	r0, [fp, #-8]
   1c5e4:	bl	1a618 <_start@@Base+0x7c28>
   1c5e8:	mov	r3, #0
   1c5ec:	mov	r0, r3
   1c5f0:	sub	sp, fp, #4
   1c5f4:	ldr	fp, [sp]
   1c5f8:	add	sp, sp, #4
   1c5fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c600:	str	fp, [sp, #-8]!
   1c604:	str	lr, [sp, #4]
   1c608:	add	fp, sp, #4
   1c60c:	sub	sp, sp, #16
   1c610:	str	r0, [fp, #-8]
   1c614:	str	r1, [fp, #-12]
   1c618:	strd	r2, [fp, #-20]	; 0xffffffec
   1c61c:	ldr	r0, [fp, #-8]
   1c620:	bl	1b7e8 <_start@@Base+0x8df8>
   1c624:	mov	r3, r0
   1c628:	cmp	r3, #0
   1c62c:	bne	1c67c <_start@@Base+0x9c8c>
   1c630:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1c634:	ldr	r0, [fp, #-8]
   1c638:	bl	1c500 <_start@@Base+0x9b10>
   1c63c:	mov	r3, r0
   1c640:	cmp	r3, #0
   1c644:	bne	1c67c <_start@@Base+0x9c8c>
   1c648:	ldr	r1, [fp, #-12]
   1c64c:	ldr	r0, [fp, #-8]
   1c650:	bl	1c494 <_start@@Base+0x9aa4>
   1c654:	mov	r3, r0
   1c658:	cmp	r3, #0
   1c65c:	bne	1c67c <_start@@Base+0x9c8c>
   1c660:	ldrh	r3, [fp, #4]
   1c664:	mov	r1, r3
   1c668:	ldr	r0, [fp, #-8]
   1c66c:	bl	1c57c <_start@@Base+0x9b8c>
   1c670:	mov	r3, r0
   1c674:	cmp	r3, #0
   1c678:	beq	1c684 <_start@@Base+0x9c94>
   1c67c:	mov	r3, #0
   1c680:	b	1c690 <_start@@Base+0x9ca0>
   1c684:	ldr	r0, [fp, #-8]
   1c688:	bl	1b820 <_start@@Base+0x8e30>
   1c68c:	mov	r3, r0
   1c690:	mov	r0, r3
   1c694:	sub	sp, fp, #4
   1c698:	ldr	fp, [sp]
   1c69c:	add	sp, sp, #4
   1c6a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6a4:	str	fp, [sp, #-8]!
   1c6a8:	str	lr, [sp, #4]
   1c6ac:	add	fp, sp, #4
   1c6b0:	sub	sp, sp, #24
   1c6b4:	str	r0, [fp, #-16]
   1c6b8:	sub	r3, fp, #24
   1c6bc:	stm	r3, {r1, r2}
   1c6c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c6c4:	cmp	r3, #0
   1c6c8:	beq	1c6d8 <_start@@Base+0x9ce8>
   1c6cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c6d0:	cmp	r3, #0
   1c6d4:	bne	1c6f8 <_start@@Base+0x9d08>
   1c6d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c6dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c6e0:	cmp	r2, r3
   1c6e4:	bne	1c6f0 <_start@@Base+0x9d00>
   1c6e8:	mov	r3, #0
   1c6ec:	b	1c75c <_start@@Base+0x9d6c>
   1c6f0:	mvn	r3, #0
   1c6f4:	b	1c75c <_start@@Base+0x9d6c>
   1c6f8:	mov	r1, #2
   1c6fc:	ldr	r0, [fp, #-16]
   1c700:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1c704:	str	r0, [fp, #-8]
   1c708:	ldr	r3, [fp, #-8]
   1c70c:	cmp	r3, #0
   1c710:	bne	1c71c <_start@@Base+0x9d2c>
   1c714:	mvn	r3, #0
   1c718:	b	1c75c <_start@@Base+0x9d6c>
   1c71c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c720:	ldr	r3, [fp, #-8]
   1c724:	str	r2, [r3]
   1c728:	mov	r1, #3
   1c72c:	ldr	r0, [fp, #-16]
   1c730:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1c734:	str	r0, [fp, #-8]
   1c738:	ldr	r3, [fp, #-8]
   1c73c:	cmp	r3, #0
   1c740:	bne	1c74c <_start@@Base+0x9d5c>
   1c744:	mvn	r3, #0
   1c748:	b	1c75c <_start@@Base+0x9d6c>
   1c74c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c750:	ldr	r3, [fp, #-8]
   1c754:	str	r2, [r3]
   1c758:	mov	r3, #0
   1c75c:	mov	r0, r3
   1c760:	sub	sp, fp, #4
   1c764:	ldr	fp, [sp]
   1c768:	add	sp, sp, #4
   1c76c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c770:	str	fp, [sp, #-8]!
   1c774:	str	lr, [sp, #4]
   1c778:	add	fp, sp, #4
   1c77c:	sub	sp, sp, #8
   1c780:	str	r0, [fp, #-8]
   1c784:	mov	r3, #16
   1c788:	mov	r2, #32
   1c78c:	mov	r1, #0
   1c790:	ldr	r0, [fp, #-8]
   1c794:	bl	2e698 <flatcc_builder_table_add@@Base>
   1c798:	mov	r3, r0
   1c79c:	mov	r0, r3
   1c7a0:	sub	sp, fp, #4
   1c7a4:	ldr	fp, [sp]
   1c7a8:	add	sp, sp, #4
   1c7ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7b0:	push	{fp}		; (str fp, [sp, #-4]!)
   1c7b4:	add	fp, sp, #0
   1c7b8:	sub	sp, sp, #12
   1c7bc:	str	r0, [fp, #-8]
   1c7c0:	mov	r3, #0
   1c7c4:	mov	r0, r3
   1c7c8:	add	sp, fp, #0
   1c7cc:	pop	{fp}		; (ldr fp, [sp], #4)
   1c7d0:	bx	lr
   1c7d4:	str	fp, [sp, #-8]!
   1c7d8:	str	lr, [sp, #4]
   1c7dc:	add	fp, sp, #4
   1c7e0:	sub	sp, sp, #16
   1c7e4:	str	r0, [fp, #-8]
   1c7e8:	str	r1, [fp, #-12]
   1c7ec:	mov	r3, #16
   1c7f0:	str	r3, [sp]
   1c7f4:	mov	r3, #32
   1c7f8:	ldr	r2, [fp, #-12]
   1c7fc:	mov	r1, #0
   1c800:	ldr	r0, [fp, #-8]
   1c804:	bl	2e89c <flatcc_builder_table_add_copy@@Base>
   1c808:	mov	r3, r0
   1c80c:	cmp	r3, #0
   1c810:	bne	1c81c <_start@@Base+0x9e2c>
   1c814:	mvn	r3, #0
   1c818:	b	1c820 <_start@@Base+0x9e30>
   1c81c:	mov	r3, #0
   1c820:	mov	r0, r3
   1c824:	sub	sp, fp, #4
   1c828:	ldr	fp, [sp]
   1c82c:	add	sp, sp, #4
   1c830:	pop	{pc}		; (ldr pc, [sp], #4)
   1c834:	str	fp, [sp, #-8]!
   1c838:	str	lr, [sp, #4]
   1c83c:	add	fp, sp, #4
   1c840:	sub	sp, sp, #16
   1c844:	str	r0, [fp, #-16]
   1c848:	mov	r3, r1
   1c84c:	strh	r3, [fp, #-18]	; 0xffffffee
   1c850:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1c854:	cmp	r3, #100	; 0x64
   1c858:	bne	1c864 <_start@@Base+0x9e74>
   1c85c:	mov	r3, #0
   1c860:	b	1c8a4 <_start@@Base+0x9eb4>
   1c864:	mov	r3, #2
   1c868:	mov	r2, #2
   1c86c:	mov	r1, #2
   1c870:	ldr	r0, [fp, #-16]
   1c874:	bl	2e698 <flatcc_builder_table_add@@Base>
   1c878:	str	r0, [fp, #-8]
   1c87c:	ldr	r3, [fp, #-8]
   1c880:	cmp	r3, #0
   1c884:	bne	1c890 <_start@@Base+0x9ea0>
   1c888:	mvn	r3, #0
   1c88c:	b	1c8a4 <_start@@Base+0x9eb4>
   1c890:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1c894:	mov	r1, r3
   1c898:	ldr	r0, [fp, #-8]
   1c89c:	bl	1a744 <_start@@Base+0x7d54>
   1c8a0:	mov	r3, #0
   1c8a4:	mov	r0, r3
   1c8a8:	sub	sp, fp, #4
   1c8ac:	ldr	fp, [sp]
   1c8b0:	add	sp, sp, #4
   1c8b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c8b8:	str	fp, [sp, #-8]!
   1c8bc:	str	lr, [sp, #4]
   1c8c0:	add	fp, sp, #4
   1c8c4:	sub	sp, sp, #16
   1c8c8:	str	r0, [fp, #-16]
   1c8cc:	mov	r3, r1
   1c8d0:	strh	r3, [fp, #-18]	; 0xffffffee
   1c8d4:	mov	r3, #2
   1c8d8:	mov	r2, #2
   1c8dc:	mov	r1, #2
   1c8e0:	ldr	r0, [fp, #-16]
   1c8e4:	bl	2e698 <flatcc_builder_table_add@@Base>
   1c8e8:	str	r0, [fp, #-8]
   1c8ec:	ldr	r3, [fp, #-8]
   1c8f0:	cmp	r3, #0
   1c8f4:	bne	1c900 <_start@@Base+0x9f10>
   1c8f8:	mvn	r3, #0
   1c8fc:	b	1c914 <_start@@Base+0x9f24>
   1c900:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1c904:	mov	r1, r3
   1c908:	ldr	r0, [fp, #-8]
   1c90c:	bl	1a744 <_start@@Base+0x7d54>
   1c910:	mov	r3, #0
   1c914:	mov	r0, r3
   1c918:	sub	sp, fp, #4
   1c91c:	ldr	fp, [sp]
   1c920:	add	sp, sp, #4
   1c924:	pop	{pc}		; (ldr pc, [sp], #4)
   1c928:	str	fp, [sp, #-8]!
   1c92c:	str	lr, [sp, #4]
   1c930:	add	fp, sp, #4
   1c934:	sub	sp, sp, #16
   1c938:	str	r0, [fp, #-16]
   1c93c:	mov	r3, r1
   1c940:	strh	r3, [fp, #-18]	; 0xffffffee
   1c944:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1c948:	cmp	r3, #150	; 0x96
   1c94c:	bne	1c958 <_start@@Base+0x9f68>
   1c950:	mov	r3, #0
   1c954:	b	1c998 <_start@@Base+0x9fa8>
   1c958:	mov	r3, #2
   1c95c:	mov	r2, #2
   1c960:	mov	r1, #1
   1c964:	ldr	r0, [fp, #-16]
   1c968:	bl	2e698 <flatcc_builder_table_add@@Base>
   1c96c:	str	r0, [fp, #-8]
   1c970:	ldr	r3, [fp, #-8]
   1c974:	cmp	r3, #0
   1c978:	bne	1c984 <_start@@Base+0x9f94>
   1c97c:	mvn	r3, #0
   1c980:	b	1c998 <_start@@Base+0x9fa8>
   1c984:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1c988:	mov	r1, r3
   1c98c:	ldr	r0, [fp, #-8]
   1c990:	bl	1a744 <_start@@Base+0x7d54>
   1c994:	mov	r3, #0
   1c998:	mov	r0, r3
   1c99c:	sub	sp, fp, #4
   1c9a0:	ldr	fp, [sp]
   1c9a4:	add	sp, sp, #4
   1c9a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9ac:	str	fp, [sp, #-8]!
   1c9b0:	str	lr, [sp, #4]
   1c9b4:	add	fp, sp, #4
   1c9b8:	sub	sp, sp, #16
   1c9bc:	str	r0, [fp, #-16]
   1c9c0:	mov	r3, r1
   1c9c4:	strh	r3, [fp, #-18]	; 0xffffffee
   1c9c8:	mov	r3, #2
   1c9cc:	mov	r2, #2
   1c9d0:	mov	r1, #1
   1c9d4:	ldr	r0, [fp, #-16]
   1c9d8:	bl	2e698 <flatcc_builder_table_add@@Base>
   1c9dc:	str	r0, [fp, #-8]
   1c9e0:	ldr	r3, [fp, #-8]
   1c9e4:	cmp	r3, #0
   1c9e8:	bne	1c9f4 <_start@@Base+0xa004>
   1c9ec:	mvn	r3, #0
   1c9f0:	b	1ca08 <_start@@Base+0xa018>
   1c9f4:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1c9f8:	mov	r1, r3
   1c9fc:	ldr	r0, [fp, #-8]
   1ca00:	bl	1a744 <_start@@Base+0x7d54>
   1ca04:	mov	r3, #0
   1ca08:	mov	r0, r3
   1ca0c:	sub	sp, fp, #4
   1ca10:	ldr	fp, [sp]
   1ca14:	add	sp, sp, #4
   1ca18:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca1c:	str	fp, [sp, #-8]!
   1ca20:	str	lr, [sp, #4]
   1ca24:	add	fp, sp, #4
   1ca28:	sub	sp, sp, #16
   1ca2c:	str	r0, [fp, #-16]
   1ca30:	str	r1, [fp, #-20]	; 0xffffffec
   1ca34:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ca38:	cmp	r3, #0
   1ca3c:	beq	1ca70 <_start@@Base+0xa080>
   1ca40:	mov	r1, #3
   1ca44:	ldr	r0, [fp, #-16]
   1ca48:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1ca4c:	str	r0, [fp, #-8]
   1ca50:	ldr	r3, [fp, #-8]
   1ca54:	cmp	r3, #0
   1ca58:	beq	1ca70 <_start@@Base+0xa080>
   1ca5c:	ldr	r3, [fp, #-8]
   1ca60:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ca64:	str	r2, [r3]
   1ca68:	mov	r3, #0
   1ca6c:	b	1ca74 <_start@@Base+0xa084>
   1ca70:	mvn	r3, #0
   1ca74:	mov	r0, r3
   1ca78:	sub	sp, fp, #4
   1ca7c:	ldr	fp, [sp]
   1ca80:	add	sp, sp, #4
   1ca84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca88:	str	fp, [sp, #-8]!
   1ca8c:	str	lr, [sp, #4]
   1ca90:	add	fp, sp, #4
   1ca94:	sub	sp, sp, #8
   1ca98:	str	r0, [fp, #-8]
   1ca9c:	ldr	r0, [fp, #-8]
   1caa0:	bl	2bf98 <flatcc_builder_start_string@@Base>
   1caa4:	mov	r3, r0
   1caa8:	mov	r0, r3
   1caac:	sub	sp, fp, #4
   1cab0:	ldr	fp, [sp]
   1cab4:	add	sp, sp, #4
   1cab8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cabc:	str	fp, [sp, #-8]!
   1cac0:	str	lr, [sp, #4]
   1cac4:	add	fp, sp, #4
   1cac8:	sub	sp, sp, #8
   1cacc:	str	r0, [fp, #-8]
   1cad0:	ldr	r0, [fp, #-8]
   1cad4:	bl	2e554 <flatcc_builder_end_string@@Base>
   1cad8:	mov	r3, r0
   1cadc:	mov	r1, r3
   1cae0:	ldr	r0, [fp, #-8]
   1cae4:	bl	1ca1c <_start@@Base+0xa02c>
   1cae8:	mov	r3, r0
   1caec:	mov	r0, r3
   1caf0:	sub	sp, fp, #4
   1caf4:	ldr	fp, [sp]
   1caf8:	add	sp, sp, #4
   1cafc:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb00:	str	fp, [sp, #-8]!
   1cb04:	str	lr, [sp, #4]
   1cb08:	add	fp, sp, #4
   1cb0c:	sub	sp, sp, #8
   1cb10:	str	r0, [fp, #-8]
   1cb14:	str	r1, [fp, #-12]
   1cb18:	ldr	r1, [fp, #-12]
   1cb1c:	ldr	r0, [fp, #-8]
   1cb20:	bl	2e4b4 <flatcc_builder_create_string_str@@Base>
   1cb24:	mov	r3, r0
   1cb28:	mov	r1, r3
   1cb2c:	ldr	r0, [fp, #-8]
   1cb30:	bl	1ca1c <_start@@Base+0xa02c>
   1cb34:	mov	r3, r0
   1cb38:	mov	r0, r3
   1cb3c:	sub	sp, fp, #4
   1cb40:	ldr	fp, [sp]
   1cb44:	add	sp, sp, #4
   1cb48:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb4c:	str	fp, [sp, #-8]!
   1cb50:	str	lr, [sp, #4]
   1cb54:	add	fp, sp, #4
   1cb58:	sub	sp, sp, #16
   1cb5c:	str	r0, [fp, #-8]
   1cb60:	str	r1, [fp, #-12]
   1cb64:	str	r2, [fp, #-16]
   1cb68:	ldr	r2, [fp, #-16]
   1cb6c:	ldr	r1, [fp, #-12]
   1cb70:	ldr	r0, [fp, #-8]
   1cb74:	bl	2e500 <flatcc_builder_create_string_strn@@Base>
   1cb78:	mov	r3, r0
   1cb7c:	mov	r1, r3
   1cb80:	ldr	r0, [fp, #-8]
   1cb84:	bl	1ca1c <_start@@Base+0xa02c>
   1cb88:	mov	r3, r0
   1cb8c:	mov	r0, r3
   1cb90:	sub	sp, fp, #4
   1cb94:	ldr	fp, [sp]
   1cb98:	add	sp, sp, #4
   1cb9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cba0:	str	fp, [sp, #-8]!
   1cba4:	str	lr, [sp, #4]
   1cba8:	add	fp, sp, #4
   1cbac:	sub	sp, sp, #8
   1cbb0:	str	r0, [fp, #-8]
   1cbb4:	str	r1, [fp, #-12]
   1cbb8:	ldr	r1, [fp, #-12]
   1cbbc:	ldr	r0, [fp, #-8]
   1cbc0:	bl	1aa18 <_start@@Base+0x8028>
   1cbc4:	mov	r3, r0
   1cbc8:	mov	r1, r3
   1cbcc:	ldr	r0, [fp, #-8]
   1cbd0:	bl	1ca1c <_start@@Base+0xa02c>
   1cbd4:	mov	r3, r0
   1cbd8:	mov	r0, r3
   1cbdc:	sub	sp, fp, #4
   1cbe0:	ldr	fp, [sp]
   1cbe4:	add	sp, sp, #4
   1cbe8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbec:	str	fp, [sp, #-8]!
   1cbf0:	str	lr, [sp, #4]
   1cbf4:	add	fp, sp, #4
   1cbf8:	sub	sp, sp, #16
   1cbfc:	str	r0, [fp, #-8]
   1cc00:	str	r1, [fp, #-12]
   1cc04:	str	r2, [fp, #-16]
   1cc08:	str	r3, [fp, #-20]	; 0xffffffec
   1cc0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cc10:	ldr	r2, [fp, #-16]
   1cc14:	ldr	r1, [fp, #-12]
   1cc18:	ldr	r0, [fp, #-8]
   1cc1c:	bl	1aa64 <_start@@Base+0x8074>
   1cc20:	mov	r3, r0
   1cc24:	mov	r1, r3
   1cc28:	ldr	r0, [fp, #-8]
   1cc2c:	bl	1ca1c <_start@@Base+0xa02c>
   1cc30:	mov	r3, r0
   1cc34:	mov	r0, r3
   1cc38:	sub	sp, fp, #4
   1cc3c:	ldr	fp, [sp]
   1cc40:	add	sp, sp, #4
   1cc44:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc48:	str	fp, [sp, #-8]!
   1cc4c:	str	lr, [sp, #4]
   1cc50:	add	fp, sp, #4
   1cc54:	sub	sp, sp, #16
   1cc58:	str	r0, [fp, #-8]
   1cc5c:	str	r1, [fp, #-12]
   1cc60:	str	r2, [fp, #-16]
   1cc64:	ldr	r2, [fp, #-16]
   1cc68:	ldr	r1, [fp, #-12]
   1cc6c:	ldr	r0, [fp, #-8]
   1cc70:	bl	2b950 <flatcc_builder_append_string@@Base>
   1cc74:	mov	r3, r0
   1cc78:	mov	r0, r3
   1cc7c:	sub	sp, fp, #4
   1cc80:	ldr	fp, [sp]
   1cc84:	add	sp, sp, #4
   1cc88:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc8c:	str	fp, [sp, #-8]!
   1cc90:	str	lr, [sp, #4]
   1cc94:	add	fp, sp, #4
   1cc98:	sub	sp, sp, #8
   1cc9c:	str	r0, [fp, #-8]
   1cca0:	str	r1, [fp, #-12]
   1cca4:	ldr	r1, [fp, #-12]
   1cca8:	ldr	r0, [fp, #-8]
   1ccac:	bl	2b9f8 <flatcc_builder_append_string_str@@Base>
   1ccb0:	mov	r3, r0
   1ccb4:	mov	r0, r3
   1ccb8:	sub	sp, fp, #4
   1ccbc:	ldr	fp, [sp]
   1ccc0:	add	sp, sp, #4
   1ccc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1ccc8:	str	fp, [sp, #-8]!
   1cccc:	str	lr, [sp, #4]
   1ccd0:	add	fp, sp, #4
   1ccd4:	sub	sp, sp, #16
   1ccd8:	str	r0, [fp, #-8]
   1ccdc:	str	r1, [fp, #-12]
   1cce0:	str	r2, [fp, #-16]
   1cce4:	ldr	r2, [fp, #-16]
   1cce8:	ldr	r1, [fp, #-12]
   1ccec:	ldr	r0, [fp, #-8]
   1ccf0:	bl	2ba44 <flatcc_builder_append_string_strn@@Base>
   1ccf4:	mov	r3, r0
   1ccf8:	mov	r0, r3
   1ccfc:	sub	sp, fp, #4
   1cd00:	ldr	fp, [sp]
   1cd04:	add	sp, sp, #4
   1cd08:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd0c:	str	fp, [sp, #-8]!
   1cd10:	str	lr, [sp, #4]
   1cd14:	add	fp, sp, #4
   1cd18:	sub	sp, sp, #8
   1cd1c:	str	r0, [fp, #-8]
   1cd20:	ldr	r0, [fp, #-8]
   1cd24:	bl	2e66c <flatcc_builder_string_len@@Base>
   1cd28:	mov	r3, r0
   1cd2c:	mov	r0, r3
   1cd30:	sub	sp, fp, #4
   1cd34:	ldr	fp, [sp]
   1cd38:	add	sp, sp, #4
   1cd3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd40:	str	fp, [sp, #-8]!
   1cd44:	str	lr, [sp, #4]
   1cd48:	add	fp, sp, #4
   1cd4c:	sub	sp, sp, #8
   1cd50:	str	r0, [fp, #-8]
   1cd54:	str	r1, [fp, #-12]
   1cd58:	ldr	r1, [fp, #-12]
   1cd5c:	ldr	r0, [fp, #-8]
   1cd60:	bl	2b8b0 <flatcc_builder_extend_string@@Base>
   1cd64:	mov	r3, r0
   1cd68:	mov	r0, r3
   1cd6c:	sub	sp, fp, #4
   1cd70:	ldr	fp, [sp]
   1cd74:	add	sp, sp, #4
   1cd78:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd7c:	str	fp, [sp, #-8]!
   1cd80:	str	lr, [sp, #4]
   1cd84:	add	fp, sp, #4
   1cd88:	sub	sp, sp, #8
   1cd8c:	str	r0, [fp, #-8]
   1cd90:	ldr	r0, [fp, #-8]
   1cd94:	bl	2e644 <flatcc_builder_string_edit@@Base>
   1cd98:	mov	r3, r0
   1cd9c:	mov	r0, r3
   1cda0:	sub	sp, fp, #4
   1cda4:	ldr	fp, [sp]
   1cda8:	add	sp, sp, #4
   1cdac:	pop	{pc}		; (ldr pc, [sp], #4)
   1cdb0:	str	fp, [sp, #-8]!
   1cdb4:	str	lr, [sp, #4]
   1cdb8:	add	fp, sp, #4
   1cdbc:	sub	sp, sp, #8
   1cdc0:	str	r0, [fp, #-8]
   1cdc4:	str	r1, [fp, #-12]
   1cdc8:	ldr	r1, [fp, #-12]
   1cdcc:	ldr	r0, [fp, #-8]
   1cdd0:	bl	2bcc0 <flatcc_builder_truncate_string@@Base>
   1cdd4:	mov	r3, r0
   1cdd8:	mov	r0, r3
   1cddc:	sub	sp, fp, #4
   1cde0:	ldr	fp, [sp]
   1cde4:	add	sp, sp, #4
   1cde8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cdec:	str	fp, [sp, #-8]!
   1cdf0:	str	lr, [sp, #4]
   1cdf4:	add	fp, sp, #4
   1cdf8:	sub	sp, sp, #16
   1cdfc:	str	r0, [fp, #-16]
   1ce00:	mov	r3, r1
   1ce04:	strb	r3, [fp, #-17]	; 0xffffffef
   1ce08:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1ce0c:	cmp	r3, #8
   1ce10:	bne	1ce1c <_start@@Base+0xa42c>
   1ce14:	mov	r3, #0
   1ce18:	b	1ce5c <_start@@Base+0xa46c>
   1ce1c:	mov	r3, #1
   1ce20:	mov	r2, #1
   1ce24:	mov	r1, #6
   1ce28:	ldr	r0, [fp, #-16]
   1ce2c:	bl	2e698 <flatcc_builder_table_add@@Base>
   1ce30:	str	r0, [fp, #-8]
   1ce34:	ldr	r3, [fp, #-8]
   1ce38:	cmp	r3, #0
   1ce3c:	bne	1ce48 <_start@@Base+0xa458>
   1ce40:	mvn	r3, #0
   1ce44:	b	1ce5c <_start@@Base+0xa46c>
   1ce48:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1ce4c:	mov	r1, r3
   1ce50:	ldr	r0, [fp, #-8]
   1ce54:	bl	1ac18 <_start@@Base+0x8228>
   1ce58:	mov	r3, #0
   1ce5c:	mov	r0, r3
   1ce60:	sub	sp, fp, #4
   1ce64:	ldr	fp, [sp]
   1ce68:	add	sp, sp, #4
   1ce6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce70:	str	fp, [sp, #-8]!
   1ce74:	str	lr, [sp, #4]
   1ce78:	add	fp, sp, #4
   1ce7c:	sub	sp, sp, #16
   1ce80:	str	r0, [fp, #-16]
   1ce84:	mov	r3, r1
   1ce88:	strb	r3, [fp, #-17]	; 0xffffffef
   1ce8c:	mov	r3, #1
   1ce90:	mov	r2, #1
   1ce94:	mov	r1, #6
   1ce98:	ldr	r0, [fp, #-16]
   1ce9c:	bl	2e698 <flatcc_builder_table_add@@Base>
   1cea0:	str	r0, [fp, #-8]
   1cea4:	ldr	r3, [fp, #-8]
   1cea8:	cmp	r3, #0
   1ceac:	bne	1ceb8 <_start@@Base+0xa4c8>
   1ceb0:	mvn	r3, #0
   1ceb4:	b	1cecc <_start@@Base+0xa4dc>
   1ceb8:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1cebc:	mov	r1, r3
   1cec0:	ldr	r0, [fp, #-8]
   1cec4:	bl	1ac18 <_start@@Base+0x8228>
   1cec8:	mov	r3, #0
   1cecc:	mov	r0, r3
   1ced0:	sub	sp, fp, #4
   1ced4:	ldr	fp, [sp]
   1ced8:	add	sp, sp, #4
   1cedc:	pop	{pc}		; (ldr pc, [sp], #4)
   1cee0:	str	fp, [sp, #-8]!
   1cee4:	str	lr, [sp, #4]
   1cee8:	add	fp, sp, #4
   1ceec:	sub	sp, sp, #16
   1cef0:	str	r0, [fp, #-16]
   1cef4:	str	r1, [fp, #-20]	; 0xffffffec
   1cef8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cefc:	cmp	r3, #0
   1cf00:	beq	1cf34 <_start@@Base+0xa544>
   1cf04:	mov	r1, #5
   1cf08:	ldr	r0, [fp, #-16]
   1cf0c:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1cf10:	str	r0, [fp, #-8]
   1cf14:	ldr	r3, [fp, #-8]
   1cf18:	cmp	r3, #0
   1cf1c:	beq	1cf34 <_start@@Base+0xa544>
   1cf20:	ldr	r3, [fp, #-8]
   1cf24:	ldr	r2, [fp, #-20]	; 0xffffffec
   1cf28:	str	r2, [r3]
   1cf2c:	mov	r3, #0
   1cf30:	b	1cf38 <_start@@Base+0xa548>
   1cf34:	mvn	r3, #0
   1cf38:	mov	r0, r3
   1cf3c:	sub	sp, fp, #4
   1cf40:	ldr	fp, [sp]
   1cf44:	add	sp, sp, #4
   1cf48:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf4c:	str	fp, [sp, #-8]!
   1cf50:	str	lr, [sp, #4]
   1cf54:	add	fp, sp, #4
   1cf58:	sub	sp, sp, #16
   1cf5c:	str	r0, [fp, #-8]
   1cf60:	str	r1, [fp, #-12]
   1cf64:	str	r2, [fp, #-16]
   1cf68:	ldr	r2, [fp, #-16]
   1cf6c:	ldr	r1, [fp, #-12]
   1cf70:	ldr	r0, [fp, #-8]
   1cf74:	bl	1a344 <_start@@Base+0x7954>
   1cf78:	mov	r3, r0
   1cf7c:	mov	r1, r3
   1cf80:	ldr	r0, [fp, #-8]
   1cf84:	bl	1cee0 <_start@@Base+0xa4f0>
   1cf88:	mov	r3, r0
   1cf8c:	mov	r0, r3
   1cf90:	sub	sp, fp, #4
   1cf94:	ldr	fp, [sp]
   1cf98:	add	sp, sp, #4
   1cf9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cfa0:	str	fp, [sp, #-8]!
   1cfa4:	str	lr, [sp, #4]
   1cfa8:	add	fp, sp, #4
   1cfac:	sub	sp, sp, #16
   1cfb0:	str	r0, [fp, #-16]
   1cfb4:	str	r1, [fp, #-20]	; 0xffffffec
   1cfb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cfbc:	cmp	r3, #0
   1cfc0:	beq	1cff4 <_start@@Base+0xa604>
   1cfc4:	mov	r1, #11
   1cfc8:	ldr	r0, [fp, #-16]
   1cfcc:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1cfd0:	str	r0, [fp, #-8]
   1cfd4:	ldr	r3, [fp, #-8]
   1cfd8:	cmp	r3, #0
   1cfdc:	beq	1cff4 <_start@@Base+0xa604>
   1cfe0:	ldr	r3, [fp, #-8]
   1cfe4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1cfe8:	str	r2, [r3]
   1cfec:	mov	r3, #0
   1cff0:	b	1cff8 <_start@@Base+0xa608>
   1cff4:	mvn	r3, #0
   1cff8:	mov	r0, r3
   1cffc:	sub	sp, fp, #4
   1d000:	ldr	fp, [sp]
   1d004:	add	sp, sp, #4
   1d008:	pop	{pc}		; (ldr pc, [sp], #4)
   1d00c:	str	fp, [sp, #-8]!
   1d010:	str	lr, [sp, #4]
   1d014:	add	fp, sp, #4
   1d018:	sub	sp, sp, #8
   1d01c:	str	r0, [fp, #-8]
   1d020:	ldr	r0, [fp, #-8]
   1d024:	bl	2be7c <flatcc_builder_start_offset_vector@@Base>
   1d028:	mov	r3, r0
   1d02c:	mov	r0, r3
   1d030:	sub	sp, fp, #4
   1d034:	ldr	fp, [sp]
   1d038:	add	sp, sp, #4
   1d03c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d040:	str	fp, [sp, #-8]!
   1d044:	str	lr, [sp, #4]
   1d048:	add	fp, sp, #4
   1d04c:	sub	sp, sp, #8
   1d050:	str	r0, [fp, #-8]
   1d054:	ldr	r0, [fp, #-8]
   1d058:	bl	2d584 <flatcc_builder_end_offset_vector@@Base>
   1d05c:	mov	r3, r0
   1d060:	mov	r1, r3
   1d064:	ldr	r0, [fp, #-8]
   1d068:	bl	1cfa0 <_start@@Base+0xa5b0>
   1d06c:	mov	r3, r0
   1d070:	mov	r0, r3
   1d074:	sub	sp, fp, #4
   1d078:	ldr	fp, [sp]
   1d07c:	add	sp, sp, #4
   1d080:	pop	{pc}		; (ldr pc, [sp], #4)
   1d084:	str	fp, [sp, #-8]!
   1d088:	str	lr, [sp, #4]
   1d08c:	add	fp, sp, #4
   1d090:	sub	sp, sp, #8
   1d094:	str	r0, [fp, #-8]
   1d098:	str	r1, [fp, #-12]
   1d09c:	ldr	r1, [fp, #-12]
   1d0a0:	ldr	r0, [fp, #-8]
   1d0a4:	bl	2b6c0 <flatcc_builder_extend_offset_vector@@Base>
   1d0a8:	mov	r3, r0
   1d0ac:	mov	r0, r3
   1d0b0:	sub	sp, fp, #4
   1d0b4:	ldr	fp, [sp]
   1d0b8:	add	sp, sp, #4
   1d0bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0c0:	str	fp, [sp, #-8]!
   1d0c4:	str	lr, [sp, #4]
   1d0c8:	add	fp, sp, #4
   1d0cc:	sub	sp, sp, #16
   1d0d0:	str	r0, [fp, #-8]
   1d0d4:	str	r1, [fp, #-12]
   1d0d8:	str	r2, [fp, #-16]
   1d0dc:	ldr	r2, [fp, #-16]
   1d0e0:	ldr	r1, [fp, #-12]
   1d0e4:	ldr	r0, [fp, #-8]
   1d0e8:	bl	2b800 <flatcc_builder_append_offset_vector@@Base>
   1d0ec:	mov	r3, r0
   1d0f0:	mov	r0, r3
   1d0f4:	sub	sp, fp, #4
   1d0f8:	ldr	fp, [sp]
   1d0fc:	add	sp, sp, #4
   1d100:	pop	{pc}		; (ldr pc, [sp], #4)
   1d104:	str	fp, [sp, #-8]!
   1d108:	str	lr, [sp, #4]
   1d10c:	add	fp, sp, #4
   1d110:	sub	sp, sp, #8
   1d114:	str	r0, [fp, #-8]
   1d118:	str	r1, [fp, #-12]
   1d11c:	ldr	r1, [fp, #-12]
   1d120:	ldr	r0, [fp, #-8]
   1d124:	bl	2bbac <flatcc_builder_truncate_offset_vector@@Base>
   1d128:	mov	r3, r0
   1d12c:	mov	r0, r3
   1d130:	sub	sp, fp, #4
   1d134:	ldr	fp, [sp]
   1d138:	add	sp, sp, #4
   1d13c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d140:	str	fp, [sp, #-8]!
   1d144:	str	lr, [sp, #4]
   1d148:	add	fp, sp, #4
   1d14c:	sub	sp, sp, #8
   1d150:	str	r0, [fp, #-8]
   1d154:	ldr	r0, [fp, #-8]
   1d158:	bl	2d6e0 <flatcc_builder_offset_vector_edit@@Base>
   1d15c:	mov	r3, r0
   1d160:	mov	r0, r3
   1d164:	sub	sp, fp, #4
   1d168:	ldr	fp, [sp]
   1d16c:	add	sp, sp, #4
   1d170:	pop	{pc}		; (ldr pc, [sp], #4)
   1d174:	str	fp, [sp, #-8]!
   1d178:	str	lr, [sp, #4]
   1d17c:	add	fp, sp, #4
   1d180:	sub	sp, sp, #8
   1d184:	str	r0, [fp, #-8]
   1d188:	ldr	r0, [fp, #-8]
   1d18c:	bl	2d708 <flatcc_builder_offset_vector_count@@Base>
   1d190:	mov	r3, r0
   1d194:	mov	r0, r3
   1d198:	sub	sp, fp, #4
   1d19c:	ldr	fp, [sp]
   1d1a0:	add	sp, sp, #4
   1d1a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d1a8:	str	fp, [sp, #-8]!
   1d1ac:	str	lr, [sp, #4]
   1d1b0:	add	fp, sp, #4
   1d1b4:	sub	sp, sp, #8
   1d1b8:	str	r0, [fp, #-8]
   1d1bc:	str	r1, [fp, #-12]
   1d1c0:	ldr	r3, [fp, #-12]
   1d1c4:	cmp	r3, #0
   1d1c8:	beq	1d1e0 <_start@@Base+0xa7f0>
   1d1cc:	ldr	r1, [fp, #-12]
   1d1d0:	ldr	r0, [fp, #-8]
   1d1d4:	bl	2b728 <flatcc_builder_offset_vector_push@@Base>
   1d1d8:	mov	r3, r0
   1d1dc:	b	1d1e4 <_start@@Base+0xa7f4>
   1d1e0:	mov	r3, #0
   1d1e4:	mov	r0, r3
   1d1e8:	sub	sp, fp, #4
   1d1ec:	ldr	fp, [sp]
   1d1f0:	add	sp, sp, #4
   1d1f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d1f8:	str	fp, [sp, #-8]!
   1d1fc:	str	lr, [sp, #4]
   1d200:	add	fp, sp, #4
   1d204:	sub	sp, sp, #8
   1d208:	str	r0, [fp, #-8]
   1d20c:	ldr	r0, [fp, #-8]
   1d210:	bl	1b968 <_start@@Base+0x8f78>
   1d214:	mov	r3, r0
   1d218:	mov	r0, r3
   1d21c:	sub	sp, fp, #4
   1d220:	ldr	fp, [sp]
   1d224:	add	sp, sp, #4
   1d228:	pop	{pc}		; (ldr pc, [sp], #4)
   1d22c:	str	fp, [sp, #-8]!
   1d230:	str	lr, [sp, #4]
   1d234:	add	fp, sp, #4
   1d238:	sub	sp, sp, #8
   1d23c:	str	r0, [fp, #-8]
   1d240:	ldr	r0, [fp, #-8]
   1d244:	bl	1b9a0 <_start@@Base+0x8fb0>
   1d248:	mov	r3, r0
   1d24c:	mov	r1, r3
   1d250:	ldr	r0, [fp, #-8]
   1d254:	bl	1d1a8 <_start@@Base+0xa7b8>
   1d258:	mov	r3, r0
   1d25c:	mov	r0, r3
   1d260:	sub	sp, fp, #4
   1d264:	ldr	fp, [sp]
   1d268:	add	sp, sp, #4
   1d26c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d270:	str	fp, [sp, #-8]!
   1d274:	str	lr, [sp, #4]
   1d278:	add	fp, sp, #4
   1d27c:	sub	sp, sp, #16
   1d280:	str	r0, [fp, #-16]
   1d284:	str	r1, [fp, #-20]	; 0xffffffec
   1d288:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d28c:	cmp	r3, #0
   1d290:	beq	1d2c4 <_start@@Base+0xa8d4>
   1d294:	mov	r1, #10
   1d298:	ldr	r0, [fp, #-16]
   1d29c:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1d2a0:	str	r0, [fp, #-8]
   1d2a4:	ldr	r3, [fp, #-8]
   1d2a8:	cmp	r3, #0
   1d2ac:	beq	1d2c4 <_start@@Base+0xa8d4>
   1d2b0:	ldr	r3, [fp, #-8]
   1d2b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d2b8:	str	r2, [r3]
   1d2bc:	mov	r3, #0
   1d2c0:	b	1d2c8 <_start@@Base+0xa8d8>
   1d2c4:	mvn	r3, #0
   1d2c8:	mov	r0, r3
   1d2cc:	sub	sp, fp, #4
   1d2d0:	ldr	fp, [sp]
   1d2d4:	add	sp, sp, #4
   1d2d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d2dc:	str	fp, [sp, #-8]!
   1d2e0:	str	lr, [sp, #4]
   1d2e4:	add	fp, sp, #4
   1d2e8:	sub	sp, sp, #8
   1d2ec:	str	r0, [fp, #-8]
   1d2f0:	ldr	r0, [fp, #-8]
   1d2f4:	bl	2be7c <flatcc_builder_start_offset_vector@@Base>
   1d2f8:	mov	r3, r0
   1d2fc:	mov	r0, r3
   1d300:	sub	sp, fp, #4
   1d304:	ldr	fp, [sp]
   1d308:	add	sp, sp, #4
   1d30c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d310:	str	fp, [sp, #-8]!
   1d314:	str	lr, [sp, #4]
   1d318:	add	fp, sp, #4
   1d31c:	sub	sp, sp, #8
   1d320:	str	r0, [fp, #-8]
   1d324:	ldr	r0, [fp, #-8]
   1d328:	bl	2d584 <flatcc_builder_end_offset_vector@@Base>
   1d32c:	mov	r3, r0
   1d330:	mov	r1, r3
   1d334:	ldr	r0, [fp, #-8]
   1d338:	bl	1d270 <_start@@Base+0xa880>
   1d33c:	mov	r3, r0
   1d340:	mov	r0, r3
   1d344:	sub	sp, fp, #4
   1d348:	ldr	fp, [sp]
   1d34c:	add	sp, sp, #4
   1d350:	pop	{pc}		; (ldr pc, [sp], #4)
   1d354:	str	fp, [sp, #-8]!
   1d358:	str	lr, [sp, #4]
   1d35c:	add	fp, sp, #4
   1d360:	sub	sp, sp, #16
   1d364:	str	r0, [fp, #-8]
   1d368:	str	r1, [fp, #-12]
   1d36c:	str	r2, [fp, #-16]
   1d370:	ldr	r2, [fp, #-16]
   1d374:	ldr	r1, [fp, #-12]
   1d378:	ldr	r0, [fp, #-8]
   1d37c:	bl	2bf04 <flatcc_builder_create_offset_vector@@Base>
   1d380:	mov	r3, r0
   1d384:	mov	r1, r3
   1d388:	ldr	r0, [fp, #-8]
   1d38c:	bl	1d270 <_start@@Base+0xa880>
   1d390:	mov	r3, r0
   1d394:	mov	r0, r3
   1d398:	sub	sp, fp, #4
   1d39c:	ldr	fp, [sp]
   1d3a0:	add	sp, sp, #4
   1d3a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d3a8:	str	fp, [sp, #-8]!
   1d3ac:	str	lr, [sp, #4]
   1d3b0:	add	fp, sp, #4
   1d3b4:	sub	sp, sp, #8
   1d3b8:	str	r0, [fp, #-8]
   1d3bc:	str	r1, [fp, #-12]
   1d3c0:	ldr	r1, [fp, #-12]
   1d3c4:	ldr	r0, [fp, #-8]
   1d3c8:	bl	1aa18 <_start@@Base+0x8028>
   1d3cc:	mov	r3, r0
   1d3d0:	mov	r1, r3
   1d3d4:	ldr	r0, [fp, #-8]
   1d3d8:	bl	1ab04 <_start@@Base+0x8114>
   1d3dc:	mov	r3, r0
   1d3e0:	mov	r0, r3
   1d3e4:	sub	sp, fp, #4
   1d3e8:	ldr	fp, [sp]
   1d3ec:	add	sp, sp, #4
   1d3f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d3f4:	str	fp, [sp, #-8]!
   1d3f8:	str	lr, [sp, #4]
   1d3fc:	add	fp, sp, #4
   1d400:	sub	sp, sp, #16
   1d404:	str	r0, [fp, #-8]
   1d408:	str	r1, [fp, #-12]
   1d40c:	str	r2, [fp, #-16]
   1d410:	str	r3, [fp, #-20]	; 0xffffffec
   1d414:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d418:	ldr	r2, [fp, #-16]
   1d41c:	ldr	r1, [fp, #-12]
   1d420:	ldr	r0, [fp, #-8]
   1d424:	bl	1aa64 <_start@@Base+0x8074>
   1d428:	mov	r3, r0
   1d42c:	mov	r1, r3
   1d430:	ldr	r0, [fp, #-8]
   1d434:	bl	1ab04 <_start@@Base+0x8114>
   1d438:	mov	r3, r0
   1d43c:	mov	r0, r3
   1d440:	sub	sp, fp, #4
   1d444:	ldr	fp, [sp]
   1d448:	add	sp, sp, #4
   1d44c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d450:	str	fp, [sp, #-8]!
   1d454:	str	lr, [sp, #4]
   1d458:	add	fp, sp, #4
   1d45c:	sub	sp, sp, #16
   1d460:	str	r0, [fp, #-16]
   1d464:	str	r1, [fp, #-20]	; 0xffffffec
   1d468:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d46c:	cmp	r3, #0
   1d470:	beq	1d4a4 <_start@@Base+0xaab4>
   1d474:	mov	r1, #24
   1d478:	ldr	r0, [fp, #-16]
   1d47c:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1d480:	str	r0, [fp, #-8]
   1d484:	ldr	r3, [fp, #-8]
   1d488:	cmp	r3, #0
   1d48c:	beq	1d4a4 <_start@@Base+0xaab4>
   1d490:	ldr	r3, [fp, #-8]
   1d494:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d498:	str	r2, [r3]
   1d49c:	mov	r3, #0
   1d4a0:	b	1d4a8 <_start@@Base+0xaab8>
   1d4a4:	mvn	r3, #0
   1d4a8:	mov	r0, r3
   1d4ac:	sub	sp, fp, #4
   1d4b0:	ldr	fp, [sp]
   1d4b4:	add	sp, sp, #4
   1d4b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4bc:	str	fp, [sp, #-8]!
   1d4c0:	str	lr, [sp, #4]
   1d4c4:	add	fp, sp, #4
   1d4c8:	sub	sp, sp, #8
   1d4cc:	str	r0, [fp, #-8]
   1d4d0:	ldr	r0, [fp, #-8]
   1d4d4:	bl	1a43c <_start@@Base+0x7a4c>
   1d4d8:	mov	r3, r0
   1d4dc:	mov	r0, r3
   1d4e0:	sub	sp, fp, #4
   1d4e4:	ldr	fp, [sp]
   1d4e8:	add	sp, sp, #4
   1d4ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4f0:	str	fp, [sp, #-8]!
   1d4f4:	str	lr, [sp, #4]
   1d4f8:	add	fp, sp, #4
   1d4fc:	sub	sp, sp, #8
   1d500:	str	r0, [fp, #-8]
   1d504:	ldr	r0, [fp, #-8]
   1d508:	bl	1a47c <_start@@Base+0x7a8c>
   1d50c:	mov	r3, r0
   1d510:	mov	r1, r3
   1d514:	ldr	r0, [fp, #-8]
   1d518:	bl	1d450 <_start@@Base+0xaa60>
   1d51c:	mov	r3, r0
   1d520:	mov	r0, r3
   1d524:	sub	sp, fp, #4
   1d528:	ldr	fp, [sp]
   1d52c:	add	sp, sp, #4
   1d530:	pop	{pc}		; (ldr pc, [sp], #4)
   1d534:	str	fp, [sp, #-8]!
   1d538:	str	lr, [sp, #4]
   1d53c:	add	fp, sp, #4
   1d540:	sub	sp, sp, #16
   1d544:	str	r0, [fp, #-8]
   1d548:	str	r1, [fp, #-12]
   1d54c:	str	r2, [fp, #-16]
   1d550:	ldr	r2, [fp, #-16]
   1d554:	ldr	r1, [fp, #-12]
   1d558:	ldr	r0, [fp, #-8]
   1d55c:	bl	1a4b0 <_start@@Base+0x7ac0>
   1d560:	mov	r3, r0
   1d564:	mov	r1, r3
   1d568:	ldr	r0, [fp, #-8]
   1d56c:	bl	1d450 <_start@@Base+0xaa60>
   1d570:	mov	r3, r0
   1d574:	mov	r0, r3
   1d578:	sub	sp, fp, #4
   1d57c:	ldr	fp, [sp]
   1d580:	add	sp, sp, #4
   1d584:	pop	{pc}		; (ldr pc, [sp], #4)
   1d588:	str	fp, [sp, #-8]!
   1d58c:	str	lr, [sp, #4]
   1d590:	add	fp, sp, #4
   1d594:	sub	sp, sp, #8
   1d598:	str	r0, [fp, #-8]
   1d59c:	str	r1, [fp, #-12]
   1d5a0:	ldr	r1, [fp, #-12]
   1d5a4:	ldr	r0, [fp, #-8]
   1d5a8:	bl	1a508 <_start@@Base+0x7b18>
   1d5ac:	mov	r3, r0
   1d5b0:	mov	r1, r3
   1d5b4:	ldr	r0, [fp, #-8]
   1d5b8:	bl	1d450 <_start@@Base+0xaa60>
   1d5bc:	mov	r3, r0
   1d5c0:	mov	r0, r3
   1d5c4:	sub	sp, fp, #4
   1d5c8:	ldr	fp, [sp]
   1d5cc:	add	sp, sp, #4
   1d5d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d5d4:	str	fp, [sp, #-8]!
   1d5d8:	str	lr, [sp, #4]
   1d5dc:	add	fp, sp, #4
   1d5e0:	sub	sp, sp, #16
   1d5e4:	str	r0, [fp, #-8]
   1d5e8:	str	r1, [fp, #-12]
   1d5ec:	str	r2, [fp, #-16]
   1d5f0:	str	r3, [fp, #-20]	; 0xffffffec
   1d5f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d5f8:	ldr	r2, [fp, #-16]
   1d5fc:	ldr	r1, [fp, #-12]
   1d600:	ldr	r0, [fp, #-8]
   1d604:	bl	1a564 <_start@@Base+0x7b74>
   1d608:	mov	r3, r0
   1d60c:	mov	r1, r3
   1d610:	ldr	r0, [fp, #-8]
   1d614:	bl	1d450 <_start@@Base+0xaa60>
   1d618:	mov	r3, r0
   1d61c:	mov	r0, r3
   1d620:	sub	sp, fp, #4
   1d624:	ldr	fp, [sp]
   1d628:	add	sp, sp, #4
   1d62c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d630:	str	fp, [sp, #-8]!
   1d634:	str	lr, [sp, #4]
   1d638:	add	fp, sp, #4
   1d63c:	sub	sp, sp, #16
   1d640:	str	r0, [fp, #-8]
   1d644:	str	r1, [fp, #-12]
   1d648:	str	r2, [fp, #-16]
   1d64c:	ldr	r2, [fp, #-16]
   1d650:	ldr	r1, [fp, #-12]
   1d654:	ldr	r0, [fp, #-8]
   1d658:	bl	2b5f8 <flatcc_builder_append_vector@@Base>
   1d65c:	mov	r3, r0
   1d660:	mov	r0, r3
   1d664:	sub	sp, fp, #4
   1d668:	ldr	fp, [sp]
   1d66c:	add	sp, sp, #4
   1d670:	pop	{pc}		; (ldr pc, [sp], #4)
   1d674:	str	fp, [sp, #-8]!
   1d678:	str	lr, [sp, #4]
   1d67c:	add	fp, sp, #4
   1d680:	sub	sp, sp, #16
   1d684:	str	r0, [fp, #-16]
   1d688:	str	r1, [fp, #-20]	; 0xffffffec
   1d68c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d690:	cmp	r3, #0
   1d694:	beq	1d6c8 <_start@@Base+0xacd8>
   1d698:	mov	r1, #12
   1d69c:	ldr	r0, [fp, #-16]
   1d6a0:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1d6a4:	str	r0, [fp, #-8]
   1d6a8:	ldr	r3, [fp, #-8]
   1d6ac:	cmp	r3, #0
   1d6b0:	beq	1d6c8 <_start@@Base+0xacd8>
   1d6b4:	ldr	r3, [fp, #-8]
   1d6b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d6bc:	str	r2, [r3]
   1d6c0:	mov	r3, #0
   1d6c4:	b	1d6cc <_start@@Base+0xacdc>
   1d6c8:	mvn	r3, #0
   1d6cc:	mov	r0, r3
   1d6d0:	sub	sp, fp, #4
   1d6d4:	ldr	fp, [sp]
   1d6d8:	add	sp, sp, #4
   1d6dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6e0:	str	fp, [sp, #-8]!
   1d6e4:	str	lr, [sp, #4]
   1d6e8:	add	fp, sp, #4
   1d6ec:	sub	sp, sp, #8
   1d6f0:	str	r0, [fp, #-8]
   1d6f4:	ldr	r0, [fp, #-8]
   1d6f8:	bl	1b968 <_start@@Base+0x8f78>
   1d6fc:	mov	r3, r0
   1d700:	mov	r0, r3
   1d704:	sub	sp, fp, #4
   1d708:	ldr	fp, [sp]
   1d70c:	add	sp, sp, #4
   1d710:	pop	{pc}		; (ldr pc, [sp], #4)
   1d714:	str	fp, [sp, #-8]!
   1d718:	str	lr, [sp, #4]
   1d71c:	add	fp, sp, #4
   1d720:	sub	sp, sp, #8
   1d724:	str	r0, [fp, #-8]
   1d728:	ldr	r0, [fp, #-8]
   1d72c:	bl	1b9a0 <_start@@Base+0x8fb0>
   1d730:	mov	r3, r0
   1d734:	mov	r1, r3
   1d738:	ldr	r0, [fp, #-8]
   1d73c:	bl	1d674 <_start@@Base+0xac84>
   1d740:	mov	r3, r0
   1d744:	mov	r0, r3
   1d748:	sub	sp, fp, #4
   1d74c:	ldr	fp, [sp]
   1d750:	add	sp, sp, #4
   1d754:	pop	{pc}		; (ldr pc, [sp], #4)
   1d758:	str	fp, [sp, #-8]!
   1d75c:	str	lr, [sp, #4]
   1d760:	add	fp, sp, #4
   1d764:	sub	sp, sp, #24
   1d768:	str	r0, [fp, #-16]
   1d76c:	sub	r3, fp, #24
   1d770:	stm	r3, {r1, r2}
   1d774:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   1d778:	cmp	r3, #0
   1d77c:	bne	1d788 <_start@@Base+0xad98>
   1d780:	mov	r3, #0
   1d784:	b	1d800 <_start@@Base+0xae10>
   1d788:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d78c:	cmp	r3, #0
   1d790:	bne	1d79c <_start@@Base+0xadac>
   1d794:	mvn	r3, #0
   1d798:	b	1d800 <_start@@Base+0xae10>
   1d79c:	mov	r3, #1
   1d7a0:	mov	r2, #1
   1d7a4:	mov	r1, #7
   1d7a8:	ldr	r0, [fp, #-16]
   1d7ac:	bl	2e698 <flatcc_builder_table_add@@Base>
   1d7b0:	str	r0, [fp, #-8]
   1d7b4:	ldr	r3, [fp, #-8]
   1d7b8:	cmp	r3, #0
   1d7bc:	beq	1d7dc <_start@@Base+0xadec>
   1d7c0:	mov	r1, #8
   1d7c4:	ldr	r0, [fp, #-16]
   1d7c8:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1d7cc:	str	r0, [fp, #-12]
   1d7d0:	ldr	r3, [fp, #-12]
   1d7d4:	cmp	r3, #0
   1d7d8:	bne	1d7e4 <_start@@Base+0xadf4>
   1d7dc:	mvn	r3, #0
   1d7e0:	b	1d800 <_start@@Base+0xae10>
   1d7e4:	ldrb	r2, [fp, #-24]	; 0xffffffe8
   1d7e8:	ldr	r3, [fp, #-8]
   1d7ec:	strb	r2, [r3]
   1d7f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d7f4:	ldr	r3, [fp, #-12]
   1d7f8:	str	r2, [r3]
   1d7fc:	mov	r3, #0
   1d800:	mov	r0, r3
   1d804:	sub	sp, fp, #4
   1d808:	ldr	fp, [sp]
   1d80c:	add	sp, sp, #4
   1d810:	pop	{pc}		; (ldr pc, [sp], #4)
   1d814:	str	fp, [sp, #-8]!
   1d818:	str	lr, [sp, #4]
   1d81c:	add	fp, sp, #4
   1d820:	sub	sp, sp, #16
   1d824:	str	r0, [fp, #-16]
   1d828:	mov	r3, r1
   1d82c:	strb	r3, [fp, #-17]	; 0xffffffef
   1d830:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1d834:	cmp	r3, #0
   1d838:	bne	1d844 <_start@@Base+0xae54>
   1d83c:	mov	r3, #0
   1d840:	b	1d880 <_start@@Base+0xae90>
   1d844:	mov	r3, #1
   1d848:	mov	r2, #1
   1d84c:	mov	r1, #7
   1d850:	ldr	r0, [fp, #-16]
   1d854:	bl	2e698 <flatcc_builder_table_add@@Base>
   1d858:	str	r0, [fp, #-8]
   1d85c:	ldr	r3, [fp, #-8]
   1d860:	cmp	r3, #0
   1d864:	beq	1d87c <_start@@Base+0xae8c>
   1d868:	ldr	r3, [fp, #-8]
   1d86c:	ldrb	r2, [fp, #-17]	; 0xffffffef
   1d870:	strb	r2, [r3]
   1d874:	mov	r3, #0
   1d878:	b	1d880 <_start@@Base+0xae90>
   1d87c:	mvn	r3, #0
   1d880:	mov	r0, r3
   1d884:	sub	sp, fp, #4
   1d888:	ldr	fp, [sp]
   1d88c:	add	sp, sp, #4
   1d890:	pop	{pc}		; (ldr pc, [sp], #4)
   1d894:	str	fp, [sp, #-8]!
   1d898:	str	lr, [sp, #4]
   1d89c:	add	fp, sp, #4
   1d8a0:	sub	sp, sp, #24
   1d8a4:	str	r0, [fp, #-16]
   1d8a8:	sub	r3, fp, #24
   1d8ac:	stm	r3, {r1, r2}
   1d8b0:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   1d8b4:	cmp	r3, #0
   1d8b8:	bne	1d8c4 <_start@@Base+0xaed4>
   1d8bc:	mov	r3, #0
   1d8c0:	b	1d8f8 <_start@@Base+0xaf08>
   1d8c4:	mov	r1, #8
   1d8c8:	ldr	r0, [fp, #-16]
   1d8cc:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1d8d0:	str	r0, [fp, #-8]
   1d8d4:	ldr	r3, [fp, #-8]
   1d8d8:	cmp	r3, #0
   1d8dc:	beq	1d8f4 <_start@@Base+0xaf04>
   1d8e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d8e4:	ldr	r3, [fp, #-8]
   1d8e8:	str	r2, [r3]
   1d8ec:	mov	r3, #0
   1d8f0:	b	1d8f8 <_start@@Base+0xaf08>
   1d8f4:	mvn	r3, #0
   1d8f8:	mov	r0, r3
   1d8fc:	sub	sp, fp, #4
   1d900:	ldr	fp, [sp]
   1d904:	add	sp, sp, #4
   1d908:	pop	{pc}		; (ldr pc, [sp], #4)
   1d90c:	str	fp, [sp, #-8]!
   1d910:	str	lr, [sp, #4]
   1d914:	add	fp, sp, #4
   1d918:	sub	sp, sp, #16
   1d91c:	str	r0, [fp, #-16]
   1d920:	str	r1, [fp, #-20]	; 0xffffffec
   1d924:	sub	r3, fp, #12
   1d928:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d92c:	mov	r0, r3
   1d930:	bl	1bcb8 <_start@@Base+0x92c8>
   1d934:	sub	r3, fp, #12
   1d938:	ldm	r3, {r1, r2}
   1d93c:	ldr	r0, [fp, #-16]
   1d940:	bl	1d758 <_start@@Base+0xad68>
   1d944:	mov	r3, r0
   1d948:	mov	r0, r3
   1d94c:	sub	sp, fp, #4
   1d950:	ldr	fp, [sp]
   1d954:	add	sp, sp, #4
   1d958:	pop	{pc}		; (ldr pc, [sp], #4)
   1d95c:	str	fp, [sp, #-8]!
   1d960:	str	lr, [sp, #4]
   1d964:	add	fp, sp, #4
   1d968:	sub	sp, sp, #16
   1d96c:	str	r0, [fp, #-16]
   1d970:	str	r1, [fp, #-20]	; 0xffffffec
   1d974:	sub	r3, fp, #12
   1d978:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d97c:	mov	r0, r3
   1d980:	bl	1bd48 <_start@@Base+0x9358>
   1d984:	sub	r3, fp, #12
   1d988:	ldm	r3, {r1, r2}
   1d98c:	ldr	r0, [fp, #-16]
   1d990:	bl	1d758 <_start@@Base+0xad68>
   1d994:	mov	r3, r0
   1d998:	mov	r0, r3
   1d99c:	sub	sp, fp, #4
   1d9a0:	ldr	fp, [sp]
   1d9a4:	add	sp, sp, #4
   1d9a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9ac:	str	fp, [sp, #-8]!
   1d9b0:	str	lr, [sp, #4]
   1d9b4:	add	fp, sp, #4
   1d9b8:	sub	sp, sp, #8
   1d9bc:	str	r0, [fp, #-8]
   1d9c0:	ldr	r0, [fp, #-8]
   1d9c4:	bl	1b8a8 <_start@@Base+0x8eb8>
   1d9c8:	mov	r3, r0
   1d9cc:	mov	r0, r3
   1d9d0:	sub	sp, fp, #4
   1d9d4:	ldr	fp, [sp]
   1d9d8:	add	sp, sp, #4
   1d9dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9e0:	str	fp, [sp, #-8]!
   1d9e4:	str	lr, [sp, #4]
   1d9e8:	add	fp, sp, #4
   1d9ec:	sub	sp, sp, #16
   1d9f0:	str	r0, [fp, #-16]
   1d9f4:	ldr	r0, [fp, #-16]
   1d9f8:	bl	1b8e0 <_start@@Base+0x8ef0>
   1d9fc:	str	r0, [fp, #-8]
   1da00:	ldr	r3, [fp, #-8]
   1da04:	cmp	r3, #0
   1da08:	beq	1da20 <_start@@Base+0xb030>
   1da0c:	ldr	r1, [fp, #-8]
   1da10:	ldr	r0, [fp, #-16]
   1da14:	bl	1d95c <_start@@Base+0xaf6c>
   1da18:	mov	r3, r0
   1da1c:	b	1da24 <_start@@Base+0xb034>
   1da20:	mvn	r3, #0
   1da24:	mov	r0, r3
   1da28:	sub	sp, fp, #4
   1da2c:	ldr	fp, [sp]
   1da30:	add	sp, sp, #4
   1da34:	pop	{pc}		; (ldr pc, [sp], #4)
   1da38:	str	fp, [sp, #-8]!
   1da3c:	str	lr, [sp, #4]
   1da40:	add	fp, sp, #4
   1da44:	sub	sp, sp, #16
   1da48:	str	r0, [fp, #-16]
   1da4c:	str	r1, [fp, #-20]	; 0xffffffec
   1da50:	ldr	r3, [fp, #-20]	; 0xffffffec
   1da54:	cmp	r3, #0
   1da58:	beq	1da8c <_start@@Base+0xb09c>
   1da5c:	mov	r1, #9
   1da60:	ldr	r0, [fp, #-16]
   1da64:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1da68:	str	r0, [fp, #-8]
   1da6c:	ldr	r3, [fp, #-8]
   1da70:	cmp	r3, #0
   1da74:	beq	1da8c <_start@@Base+0xb09c>
   1da78:	ldr	r3, [fp, #-8]
   1da7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1da80:	str	r2, [r3]
   1da84:	mov	r3, #0
   1da88:	b	1da90 <_start@@Base+0xb0a0>
   1da8c:	mvn	r3, #0
   1da90:	mov	r0, r3
   1da94:	sub	sp, fp, #4
   1da98:	ldr	fp, [sp]
   1da9c:	add	sp, sp, #4
   1daa0:	pop	{pc}		; (ldr pc, [sp], #4)
   1daa4:	str	fp, [sp, #-8]!
   1daa8:	str	lr, [sp, #4]
   1daac:	add	fp, sp, #4
   1dab0:	sub	sp, sp, #8
   1dab4:	str	r0, [fp, #-8]
   1dab8:	ldr	r0, [fp, #-8]
   1dabc:	bl	1ad64 <_start@@Base+0x8374>
   1dac0:	mov	r3, r0
   1dac4:	mov	r0, r3
   1dac8:	sub	sp, fp, #4
   1dacc:	ldr	fp, [sp]
   1dad0:	add	sp, sp, #4
   1dad4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dad8:	str	fp, [sp, #-8]!
   1dadc:	str	lr, [sp, #4]
   1dae0:	add	fp, sp, #4
   1dae4:	sub	sp, sp, #8
   1dae8:	str	r0, [fp, #-8]
   1daec:	ldr	r0, [fp, #-8]
   1daf0:	bl	1ada4 <_start@@Base+0x83b4>
   1daf4:	mov	r3, r0
   1daf8:	mov	r1, r3
   1dafc:	ldr	r0, [fp, #-8]
   1db00:	bl	1da38 <_start@@Base+0xb048>
   1db04:	mov	r3, r0
   1db08:	mov	r0, r3
   1db0c:	sub	sp, fp, #4
   1db10:	ldr	fp, [sp]
   1db14:	add	sp, sp, #4
   1db18:	pop	{pc}		; (ldr pc, [sp], #4)
   1db1c:	str	fp, [sp, #-8]!
   1db20:	str	lr, [sp, #4]
   1db24:	add	fp, sp, #4
   1db28:	sub	sp, sp, #8
   1db2c:	str	r0, [fp, #-8]
   1db30:	str	r1, [fp, #-12]
   1db34:	ldr	r1, [fp, #-12]
   1db38:	ldr	r0, [fp, #-8]
   1db3c:	bl	1add8 <_start@@Base+0x83e8>
   1db40:	mov	r3, r0
   1db44:	mov	r1, r3
   1db48:	ldr	r0, [fp, #-8]
   1db4c:	bl	1da38 <_start@@Base+0xb048>
   1db50:	mov	r3, r0
   1db54:	mov	r0, r3
   1db58:	sub	sp, fp, #4
   1db5c:	ldr	fp, [sp]
   1db60:	add	sp, sp, #4
   1db64:	pop	{pc}		; (ldr pc, [sp], #4)
   1db68:	str	fp, [sp, #-8]!
   1db6c:	str	lr, [sp, #4]
   1db70:	add	fp, sp, #4
   1db74:	sub	sp, sp, #16
   1db78:	str	r0, [fp, #-8]
   1db7c:	str	r1, [fp, #-12]
   1db80:	str	r2, [fp, #-16]
   1db84:	str	r3, [fp, #-20]	; 0xffffffec
   1db88:	ldr	r3, [fp, #-20]	; 0xffffffec
   1db8c:	ldr	r2, [fp, #-16]
   1db90:	ldr	r1, [fp, #-12]
   1db94:	ldr	r0, [fp, #-8]
   1db98:	bl	1ae34 <_start@@Base+0x8444>
   1db9c:	mov	r3, r0
   1dba0:	mov	r1, r3
   1dba4:	ldr	r0, [fp, #-8]
   1dba8:	bl	1da38 <_start@@Base+0xb048>
   1dbac:	mov	r3, r0
   1dbb0:	mov	r0, r3
   1dbb4:	sub	sp, fp, #4
   1dbb8:	ldr	fp, [sp]
   1dbbc:	add	sp, sp, #4
   1dbc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1dbc4:	str	fp, [sp, #-8]!
   1dbc8:	str	lr, [sp, #4]
   1dbcc:	add	fp, sp, #4
   1dbd0:	sub	sp, sp, #8
   1dbd4:	str	r0, [fp, #-8]
   1dbd8:	str	r1, [fp, #-12]
   1dbdc:	ldr	r1, [fp, #-12]
   1dbe0:	ldr	r0, [fp, #-8]
   1dbe4:	bl	2b45c <flatcc_builder_extend_vector@@Base>
   1dbe8:	mov	r3, r0
   1dbec:	mov	r0, r3
   1dbf0:	sub	sp, fp, #4
   1dbf4:	ldr	fp, [sp]
   1dbf8:	add	sp, sp, #4
   1dbfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc00:	str	fp, [sp, #-8]!
   1dc04:	str	lr, [sp, #4]
   1dc08:	add	fp, sp, #4
   1dc0c:	sub	sp, sp, #8
   1dc10:	str	r0, [fp, #-8]
   1dc14:	str	r1, [fp, #-12]
   1dc18:	ldr	r1, [fp, #-12]
   1dc1c:	ldr	r0, [fp, #-8]
   1dc20:	bl	2ba98 <flatcc_builder_truncate_vector@@Base>
   1dc24:	mov	r3, r0
   1dc28:	mov	r0, r3
   1dc2c:	sub	sp, fp, #4
   1dc30:	ldr	fp, [sp]
   1dc34:	add	sp, sp, #4
   1dc38:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc3c:	str	fp, [sp, #-8]!
   1dc40:	str	lr, [sp, #4]
   1dc44:	add	fp, sp, #4
   1dc48:	sub	sp, sp, #8
   1dc4c:	str	r0, [fp, #-8]
   1dc50:	ldr	r0, [fp, #-8]
   1dc54:	bl	2d1c0 <flatcc_builder_vector_edit@@Base>
   1dc58:	mov	r3, r0
   1dc5c:	mov	r0, r3
   1dc60:	sub	sp, fp, #4
   1dc64:	ldr	fp, [sp]
   1dc68:	add	sp, sp, #4
   1dc6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc70:	str	fp, [sp, #-8]!
   1dc74:	str	lr, [sp, #4]
   1dc78:	add	fp, sp, #4
   1dc7c:	sub	sp, sp, #8
   1dc80:	str	r0, [fp, #-8]
   1dc84:	ldr	r0, [fp, #-8]
   1dc88:	bl	2d194 <flatcc_builder_vector_count@@Base>
   1dc8c:	mov	r3, r0
   1dc90:	mov	r0, r3
   1dc94:	sub	sp, fp, #4
   1dc98:	ldr	fp, [sp]
   1dc9c:	add	sp, sp, #4
   1dca0:	pop	{pc}		; (ldr pc, [sp], #4)
   1dca4:	str	fp, [sp, #-8]!
   1dca8:	str	lr, [sp, #4]
   1dcac:	add	fp, sp, #4
   1dcb0:	sub	sp, sp, #16
   1dcb4:	str	r0, [fp, #-16]
   1dcb8:	str	r1, [fp, #-20]	; 0xffffffec
   1dcbc:	mov	r1, #1
   1dcc0:	ldr	r0, [fp, #-16]
   1dcc4:	bl	2b45c <flatcc_builder_extend_vector@@Base>
   1dcc8:	str	r0, [fp, #-8]
   1dccc:	ldr	r3, [fp, #-8]
   1dcd0:	cmp	r3, #0
   1dcd4:	beq	1dcf8 <_start@@Base+0xb308>
   1dcd8:	bl	14b5c <_start@@Base+0x216c>
   1dcdc:	mov	r3, r0
   1dce0:	mov	r2, r3
   1dce4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1dce8:	ldr	r0, [fp, #-8]
   1dcec:	bl	12908 <memcpy@plt>
   1dcf0:	ldr	r3, [fp, #-8]
   1dcf4:	b	1dcfc <_start@@Base+0xb30c>
   1dcf8:	mov	r3, #0
   1dcfc:	mov	r0, r3
   1dd00:	sub	sp, fp, #4
   1dd04:	ldr	fp, [sp]
   1dd08:	add	sp, sp, #4
   1dd0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd10:	str	fp, [sp, #-8]!
   1dd14:	str	lr, [sp, #4]
   1dd18:	add	fp, sp, #4
   1dd1c:	sub	sp, sp, #16
   1dd20:	str	r0, [fp, #-16]
   1dd24:	mov	r3, r1
   1dd28:	strh	r3, [fp, #-18]	; 0xffffffee
   1dd2c:	mov	r3, r2
   1dd30:	strb	r3, [fp, #-19]	; 0xffffffed
   1dd34:	mov	r1, #1
   1dd38:	ldr	r0, [fp, #-16]
   1dd3c:	bl	2b45c <flatcc_builder_extend_vector@@Base>
   1dd40:	str	r0, [fp, #-8]
   1dd44:	ldr	r3, [fp, #-8]
   1dd48:	cmp	r3, #0
   1dd4c:	beq	1dd6c <_start@@Base+0xb37c>
   1dd50:	ldrsb	r2, [fp, #-19]	; 0xffffffed
   1dd54:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1dd58:	mov	r1, r3
   1dd5c:	ldr	r0, [fp, #-8]
   1dd60:	bl	1ac68 <_start@@Base+0x8278>
   1dd64:	mov	r3, r0
   1dd68:	b	1dd70 <_start@@Base+0xb380>
   1dd6c:	mov	r3, #0
   1dd70:	mov	r0, r3
   1dd74:	sub	sp, fp, #4
   1dd78:	ldr	fp, [sp]
   1dd7c:	add	sp, sp, #4
   1dd80:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd84:	str	fp, [sp, #-8]!
   1dd88:	str	lr, [sp, #4]
   1dd8c:	add	fp, sp, #4
   1dd90:	sub	sp, sp, #16
   1dd94:	str	r0, [fp, #-16]
   1dd98:	str	r1, [fp, #-20]	; 0xffffffec
   1dd9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dda0:	cmp	r3, #0
   1dda4:	beq	1ddd8 <_start@@Base+0xb3e8>
   1dda8:	mov	r1, #13
   1ddac:	ldr	r0, [fp, #-16]
   1ddb0:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1ddb4:	str	r0, [fp, #-8]
   1ddb8:	ldr	r3, [fp, #-8]
   1ddbc:	cmp	r3, #0
   1ddc0:	beq	1ddd8 <_start@@Base+0xb3e8>
   1ddc4:	ldr	r3, [fp, #-8]
   1ddc8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ddcc:	str	r2, [r3]
   1ddd0:	mov	r3, #0
   1ddd4:	b	1dddc <_start@@Base+0xb3ec>
   1ddd8:	mvn	r3, #0
   1dddc:	mov	r0, r3
   1dde0:	sub	sp, fp, #4
   1dde4:	ldr	fp, [sp]
   1dde8:	add	sp, sp, #4
   1ddec:	pop	{pc}		; (ldr pc, [sp], #4)
   1ddf0:	str	fp, [sp, #-8]!
   1ddf4:	str	lr, [sp, #4]
   1ddf8:	add	fp, sp, #4
   1ddfc:	sub	sp, sp, #8
   1de00:	str	r0, [fp, #-8]
   1de04:	ldr	r3, [pc, #64]	; 1de4c <_start@@Base+0xb45c>
   1de08:	add	r3, pc, r3
   1de0c:	mov	r1, r3
   1de10:	ldr	r0, [fp, #-8]
   1de14:	bl	1ab54 <_start@@Base+0x8164>
   1de18:	mov	r3, r0
   1de1c:	cmp	r3, #0
   1de20:	bne	1de34 <_start@@Base+0xb444>
   1de24:	ldr	r0, [fp, #-8]
   1de28:	bl	1b968 <_start@@Base+0x8f78>
   1de2c:	mov	r3, r0
   1de30:	b	1de38 <_start@@Base+0xb448>
   1de34:	mvn	r3, #0
   1de38:	mov	r0, r3
   1de3c:	sub	sp, fp, #4
   1de40:	ldr	fp, [sp]
   1de44:	add	sp, sp, #4
   1de48:	pop	{pc}		; (ldr pc, [sp], #4)
   1de4c:	andeq	r4, r1, ip, ror #16
   1de50:	str	fp, [sp, #-8]!
   1de54:	str	lr, [sp, #4]
   1de58:	add	fp, sp, #4
   1de5c:	sub	sp, sp, #8
   1de60:	str	r0, [fp, #-8]
   1de64:	ldr	r0, [fp, #-8]
   1de68:	bl	1b9a0 <_start@@Base+0x8fb0>
   1de6c:	mov	r3, r0
   1de70:	mov	r1, r3
   1de74:	ldr	r0, [fp, #-8]
   1de78:	bl	1abdc <_start@@Base+0x81ec>
   1de7c:	mov	r3, r0
   1de80:	mov	r1, r3
   1de84:	ldr	r0, [fp, #-8]
   1de88:	bl	1dd84 <_start@@Base+0xb394>
   1de8c:	mov	r3, r0
   1de90:	mov	r0, r3
   1de94:	sub	sp, fp, #4
   1de98:	ldr	fp, [sp]
   1de9c:	add	sp, sp, #4
   1dea0:	pop	{pc}		; (ldr pc, [sp], #4)
   1dea4:	str	fp, [sp, #-8]!
   1dea8:	str	lr, [sp, #4]
   1deac:	add	fp, sp, #4
   1deb0:	sub	sp, sp, #24
   1deb4:	str	r0, [fp, #-8]
   1deb8:	str	r1, [fp, #-12]
   1debc:	str	r2, [fp, #-16]
   1dec0:	strh	r3, [fp, #-18]	; 0xffffffee
   1dec4:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1dec8:	cmp	r3, #0
   1decc:	beq	1ded8 <_start@@Base+0xb4e8>
   1ded0:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1ded4:	b	1dedc <_start@@Base+0xb4ec>
   1ded8:	mov	r3, #8
   1dedc:	mvn	r2, #0
   1dee0:	str	r2, [sp, #4]
   1dee4:	str	r3, [sp]
   1dee8:	mov	r3, #1
   1deec:	ldr	r2, [fp, #-16]
   1def0:	ldr	r1, [fp, #-12]
   1def4:	ldr	r0, [fp, #-8]
   1def8:	bl	2ce8c <flatcc_builder_create_vector@@Base>
   1defc:	mov	r3, r0
   1df00:	mov	r1, r3
   1df04:	ldr	r0, [fp, #-8]
   1df08:	bl	1dd84 <_start@@Base+0xb394>
   1df0c:	mov	r3, r0
   1df10:	mov	r0, r3
   1df14:	sub	sp, fp, #4
   1df18:	ldr	fp, [sp]
   1df1c:	add	sp, sp, #4
   1df20:	pop	{pc}		; (ldr pc, [sp], #4)
   1df24:	str	fp, [sp, #-8]!
   1df28:	str	lr, [sp, #4]
   1df2c:	add	fp, sp, #4
   1df30:	sub	sp, sp, #16
   1df34:	str	r0, [fp, #-16]
   1df38:	str	r1, [fp, #-20]	; 0xffffffec
   1df3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1df40:	cmp	r3, #0
   1df44:	beq	1df78 <_start@@Base+0xb588>
   1df48:	mov	r1, #14
   1df4c:	ldr	r0, [fp, #-16]
   1df50:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1df54:	str	r0, [fp, #-8]
   1df58:	ldr	r3, [fp, #-8]
   1df5c:	cmp	r3, #0
   1df60:	beq	1df78 <_start@@Base+0xb588>
   1df64:	ldr	r3, [fp, #-8]
   1df68:	ldr	r2, [fp, #-20]	; 0xffffffec
   1df6c:	str	r2, [r3]
   1df70:	mov	r3, #0
   1df74:	b	1df7c <_start@@Base+0xb58c>
   1df78:	mvn	r3, #0
   1df7c:	mov	r0, r3
   1df80:	sub	sp, fp, #4
   1df84:	ldr	fp, [sp]
   1df88:	add	sp, sp, #4
   1df8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1df90:	str	fp, [sp, #-8]!
   1df94:	str	lr, [sp, #4]
   1df98:	add	fp, sp, #4
   1df9c:	sub	sp, sp, #8
   1dfa0:	str	r0, [fp, #-8]
   1dfa4:	ldr	r0, [fp, #-8]
   1dfa8:	bl	1b7e8 <_start@@Base+0x8df8>
   1dfac:	mov	r3, r0
   1dfb0:	mov	r0, r3
   1dfb4:	sub	sp, fp, #4
   1dfb8:	ldr	fp, [sp]
   1dfbc:	add	sp, sp, #4
   1dfc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1dfc4:	str	fp, [sp, #-8]!
   1dfc8:	str	lr, [sp, #4]
   1dfcc:	add	fp, sp, #4
   1dfd0:	sub	sp, sp, #8
   1dfd4:	str	r0, [fp, #-8]
   1dfd8:	ldr	r0, [fp, #-8]
   1dfdc:	bl	1b820 <_start@@Base+0x8e30>
   1dfe0:	mov	r3, r0
   1dfe4:	mov	r1, r3
   1dfe8:	ldr	r0, [fp, #-8]
   1dfec:	bl	1df24 <_start@@Base+0xb534>
   1dff0:	mov	r3, r0
   1dff4:	mov	r0, r3
   1dff8:	sub	sp, fp, #4
   1dffc:	ldr	fp, [sp]
   1e000:	add	sp, sp, #4
   1e004:	pop	{pc}		; (ldr pc, [sp], #4)
   1e008:	str	fp, [sp, #-8]!
   1e00c:	str	lr, [sp, #4]
   1e010:	add	fp, sp, #4
   1e014:	sub	sp, sp, #24
   1e018:	str	r0, [fp, #-8]
   1e01c:	str	r1, [fp, #-12]
   1e020:	strd	r2, [fp, #-20]	; 0xffffffec
   1e024:	ldrh	r3, [fp, #4]
   1e028:	str	r3, [sp]
   1e02c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1e030:	ldr	r1, [fp, #-12]
   1e034:	ldr	r0, [fp, #-8]
   1e038:	bl	1c600 <_start@@Base+0x9c10>
   1e03c:	mov	r3, r0
   1e040:	mov	r1, r3
   1e044:	ldr	r0, [fp, #-8]
   1e048:	bl	1df24 <_start@@Base+0xb534>
   1e04c:	mov	r3, r0
   1e050:	mov	r0, r3
   1e054:	sub	sp, fp, #4
   1e058:	ldr	fp, [sp]
   1e05c:	add	sp, sp, #4
   1e060:	pop	{pc}		; (ldr pc, [sp], #4)
   1e064:	str	fp, [sp, #-8]!
   1e068:	str	lr, [sp, #4]
   1e06c:	add	fp, sp, #4
   1e070:	sub	sp, sp, #16
   1e074:	str	r0, [fp, #-16]
   1e078:	mov	r3, r1
   1e07c:	strb	r3, [fp, #-17]	; 0xffffffef
   1e080:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1e084:	cmp	r3, #1
   1e088:	bne	1e094 <_start@@Base+0xb6a4>
   1e08c:	mov	r3, #0
   1e090:	b	1e0d4 <_start@@Base+0xb6e4>
   1e094:	mov	r3, #1
   1e098:	mov	r2, #1
   1e09c:	mov	r1, #15
   1e0a0:	ldr	r0, [fp, #-16]
   1e0a4:	bl	2e698 <flatcc_builder_table_add@@Base>
   1e0a8:	str	r0, [fp, #-8]
   1e0ac:	ldr	r3, [fp, #-8]
   1e0b0:	cmp	r3, #0
   1e0b4:	bne	1e0c0 <_start@@Base+0xb6d0>
   1e0b8:	mvn	r3, #0
   1e0bc:	b	1e0d4 <_start@@Base+0xb6e4>
   1e0c0:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1e0c4:	mov	r1, r3
   1e0c8:	ldr	r0, [fp, #-8]
   1e0cc:	bl	1a3ec <_start@@Base+0x79fc>
   1e0d0:	mov	r3, #0
   1e0d4:	mov	r0, r3
   1e0d8:	sub	sp, fp, #4
   1e0dc:	ldr	fp, [sp]
   1e0e0:	add	sp, sp, #4
   1e0e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e0e8:	str	fp, [sp, #-8]!
   1e0ec:	str	lr, [sp, #4]
   1e0f0:	add	fp, sp, #4
   1e0f4:	sub	sp, sp, #8
   1e0f8:	str	r0, [fp, #-8]
   1e0fc:	ldr	r0, [fp, #-8]
   1e100:	bl	1b968 <_start@@Base+0x8f78>
   1e104:	mov	r3, r0
   1e108:	mov	r0, r3
   1e10c:	sub	sp, fp, #4
   1e110:	ldr	fp, [sp]
   1e114:	add	sp, sp, #4
   1e118:	pop	{pc}		; (ldr pc, [sp], #4)
   1e11c:	str	fp, [sp, #-8]!
   1e120:	str	lr, [sp, #4]
   1e124:	add	fp, sp, #4
   1e128:	sub	sp, sp, #8
   1e12c:	str	r0, [fp, #-8]
   1e130:	ldr	r0, [fp, #-8]
   1e134:	bl	1b9a0 <_start@@Base+0x8fb0>
   1e138:	mov	r3, r0
   1e13c:	mov	r1, r3
   1e140:	ldr	r0, [fp, #-8]
   1e144:	bl	1ba28 <_start@@Base+0x9038>
   1e148:	mov	r3, r0
   1e14c:	mov	r0, r3
   1e150:	sub	sp, fp, #4
   1e154:	ldr	fp, [sp]
   1e158:	add	sp, sp, #4
   1e15c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e160:	str	fp, [sp, #-8]!
   1e164:	str	lr, [sp, #4]
   1e168:	add	fp, sp, #4
   1e16c:	sub	sp, sp, #8
   1e170:	str	r0, [fp, #-8]
   1e174:	ldr	r3, [pc, #64]	; 1e1bc <_start@@Base+0xb7cc>
   1e178:	add	r3, pc, r3
   1e17c:	mov	r1, r3
   1e180:	ldr	r0, [fp, #-8]
   1e184:	bl	1ab54 <_start@@Base+0x8164>
   1e188:	mov	r3, r0
   1e18c:	cmp	r3, #0
   1e190:	bne	1e1a4 <_start@@Base+0xb7b4>
   1e194:	ldr	r0, [fp, #-8]
   1e198:	bl	1b968 <_start@@Base+0x8f78>
   1e19c:	mov	r3, r0
   1e1a0:	b	1e1a8 <_start@@Base+0xb7b8>
   1e1a4:	mvn	r3, #0
   1e1a8:	mov	r0, r3
   1e1ac:	sub	sp, fp, #4
   1e1b0:	ldr	fp, [sp]
   1e1b4:	add	sp, sp, #4
   1e1b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e1bc:	strdeq	r4, [r1], -ip
   1e1c0:	str	fp, [sp, #-8]!
   1e1c4:	str	lr, [sp, #4]
   1e1c8:	add	fp, sp, #4
   1e1cc:	sub	sp, sp, #8
   1e1d0:	str	r0, [fp, #-8]
   1e1d4:	ldr	r3, [pc, #64]	; 1e21c <_start@@Base+0xb82c>
   1e1d8:	add	r3, pc, r3
   1e1dc:	mov	r1, r3
   1e1e0:	ldr	r0, [fp, #-8]
   1e1e4:	bl	1ab98 <_start@@Base+0x81a8>
   1e1e8:	mov	r3, r0
   1e1ec:	cmp	r3, #0
   1e1f0:	bne	1e204 <_start@@Base+0xb814>
   1e1f4:	ldr	r0, [fp, #-8]
   1e1f8:	bl	1b968 <_start@@Base+0x8f78>
   1e1fc:	mov	r3, r0
   1e200:	b	1e208 <_start@@Base+0xb818>
   1e204:	mvn	r3, #0
   1e208:	mov	r0, r3
   1e20c:	sub	sp, fp, #4
   1e210:	ldr	fp, [sp]
   1e214:	add	sp, sp, #4
   1e218:	pop	{pc}		; (ldr pc, [sp], #4)
   1e21c:	muleq	r1, ip, r4
   1e220:	str	fp, [sp, #-8]!
   1e224:	str	lr, [sp, #4]
   1e228:	add	fp, sp, #4
   1e22c:	sub	sp, sp, #8
   1e230:	str	r0, [fp, #-8]
   1e234:	ldr	r0, [fp, #-8]
   1e238:	bl	1b9a0 <_start@@Base+0x8fb0>
   1e23c:	mov	r3, r0
   1e240:	mov	r1, r3
   1e244:	ldr	r0, [fp, #-8]
   1e248:	bl	1abdc <_start@@Base+0x81ec>
   1e24c:	mov	r3, r0
   1e250:	mov	r0, r3
   1e254:	sub	sp, fp, #4
   1e258:	ldr	fp, [sp]
   1e25c:	add	sp, sp, #4
   1e260:	pop	{pc}		; (ldr pc, [sp], #4)
   1e264:	str	fp, [sp, #-8]!
   1e268:	str	lr, [sp, #4]
   1e26c:	add	fp, sp, #4
   1e270:	sub	sp, sp, #16
   1e274:	str	r0, [fp, #-16]
   1e278:	mov	r3, r1
   1e27c:	strb	r3, [fp, #-17]	; 0xffffffef
   1e280:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1e284:	cmp	r3, #0
   1e288:	bne	1e294 <_start@@Base+0xb8a4>
   1e28c:	mov	r3, #0
   1e290:	b	1e2d4 <_start@@Base+0xb8e4>
   1e294:	mov	r3, #1
   1e298:	mov	r2, #1
   1e29c:	mov	r1, #0
   1e2a0:	ldr	r0, [fp, #-16]
   1e2a4:	bl	2e698 <flatcc_builder_table_add@@Base>
   1e2a8:	str	r0, [fp, #-8]
   1e2ac:	ldr	r3, [fp, #-8]
   1e2b0:	cmp	r3, #0
   1e2b4:	bne	1e2c0 <_start@@Base+0xb8d0>
   1e2b8:	mvn	r3, #0
   1e2bc:	b	1e2d4 <_start@@Base+0xb8e4>
   1e2c0:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1e2c4:	mov	r1, r3
   1e2c8:	ldr	r0, [fp, #-8]
   1e2cc:	bl	1a39c <_start@@Base+0x79ac>
   1e2d0:	mov	r3, #0
   1e2d4:	mov	r0, r3
   1e2d8:	sub	sp, fp, #4
   1e2dc:	ldr	fp, [sp]
   1e2e0:	add	sp, sp, #4
   1e2e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e2e8:	str	fp, [sp, #-8]!
   1e2ec:	str	lr, [sp, #4]
   1e2f0:	add	fp, sp, #4
   1e2f4:	sub	sp, sp, #16
   1e2f8:	str	r0, [fp, #-16]
   1e2fc:	mov	r3, r1
   1e300:	strb	r3, [fp, #-17]	; 0xffffffef
   1e304:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1e308:	cmp	r3, #0
   1e30c:	bne	1e318 <_start@@Base+0xb928>
   1e310:	mov	r3, #0
   1e314:	b	1e358 <_start@@Base+0xb968>
   1e318:	mov	r3, #1
   1e31c:	mov	r2, #1
   1e320:	mov	r1, #1
   1e324:	ldr	r0, [fp, #-16]
   1e328:	bl	2e698 <flatcc_builder_table_add@@Base>
   1e32c:	str	r0, [fp, #-8]
   1e330:	ldr	r3, [fp, #-8]
   1e334:	cmp	r3, #0
   1e338:	bne	1e344 <_start@@Base+0xb954>
   1e33c:	mvn	r3, #0
   1e340:	b	1e358 <_start@@Base+0xb968>
   1e344:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1e348:	mov	r1, r3
   1e34c:	ldr	r0, [fp, #-8]
   1e350:	bl	1a2f4 <_start@@Base+0x7904>
   1e354:	mov	r3, #0
   1e358:	mov	r0, r3
   1e35c:	sub	sp, fp, #4
   1e360:	ldr	fp, [sp]
   1e364:	add	sp, sp, #4
   1e368:	pop	{pc}		; (ldr pc, [sp], #4)
   1e36c:	str	fp, [sp, #-8]!
   1e370:	str	lr, [sp, #4]
   1e374:	add	fp, sp, #4
   1e378:	sub	sp, sp, #16
   1e37c:	str	r0, [fp, #-16]
   1e380:	mov	r3, r1
   1e384:	strh	r3, [fp, #-18]	; 0xffffffee
   1e388:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1e38c:	cmp	r3, #0
   1e390:	bne	1e39c <_start@@Base+0xb9ac>
   1e394:	mov	r3, #0
   1e398:	b	1e3dc <_start@@Base+0xb9ec>
   1e39c:	mov	r3, #2
   1e3a0:	mov	r2, #2
   1e3a4:	mov	r1, #2
   1e3a8:	ldr	r0, [fp, #-16]
   1e3ac:	bl	2e698 <flatcc_builder_table_add@@Base>
   1e3b0:	str	r0, [fp, #-8]
   1e3b4:	ldr	r3, [fp, #-8]
   1e3b8:	cmp	r3, #0
   1e3bc:	bne	1e3c8 <_start@@Base+0xb9d8>
   1e3c0:	mvn	r3, #0
   1e3c4:	b	1e3dc <_start@@Base+0xb9ec>
   1e3c8:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1e3cc:	mov	r1, r3
   1e3d0:	ldr	r0, [fp, #-8]
   1e3d4:	bl	1a744 <_start@@Base+0x7d54>
   1e3d8:	mov	r3, #0
   1e3dc:	mov	r0, r3
   1e3e0:	sub	sp, fp, #4
   1e3e4:	ldr	fp, [sp]
   1e3e8:	add	sp, sp, #4
   1e3ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1e3f0:	str	fp, [sp, #-8]!
   1e3f4:	str	lr, [sp, #4]
   1e3f8:	add	fp, sp, #4
   1e3fc:	sub	sp, sp, #16
   1e400:	str	r0, [fp, #-16]
   1e404:	mov	r3, r1
   1e408:	strh	r3, [fp, #-18]	; 0xffffffee
   1e40c:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1e410:	cmp	r3, #0
   1e414:	bne	1e420 <_start@@Base+0xba30>
   1e418:	mov	r3, #0
   1e41c:	b	1e460 <_start@@Base+0xba70>
   1e420:	mov	r3, #2
   1e424:	mov	r2, #2
   1e428:	mov	r1, #3
   1e42c:	ldr	r0, [fp, #-16]
   1e430:	bl	2e698 <flatcc_builder_table_add@@Base>
   1e434:	str	r0, [fp, #-8]
   1e438:	ldr	r3, [fp, #-8]
   1e43c:	cmp	r3, #0
   1e440:	bne	1e44c <_start@@Base+0xba5c>
   1e444:	mvn	r3, #0
   1e448:	b	1e460 <_start@@Base+0xba70>
   1e44c:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1e450:	mov	r1, r3
   1e454:	ldr	r0, [fp, #-8]
   1e458:	bl	1a618 <_start@@Base+0x7c28>
   1e45c:	mov	r3, #0
   1e460:	mov	r0, r3
   1e464:	sub	sp, fp, #4
   1e468:	ldr	fp, [sp]
   1e46c:	add	sp, sp, #4
   1e470:	pop	{pc}		; (ldr pc, [sp], #4)
   1e474:	str	fp, [sp, #-8]!
   1e478:	str	lr, [sp, #4]
   1e47c:	add	fp, sp, #4
   1e480:	sub	sp, sp, #16
   1e484:	str	r0, [fp, #-16]
   1e488:	str	r1, [fp, #-20]	; 0xffffffec
   1e48c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e490:	cmp	r3, #0
   1e494:	bne	1e4a0 <_start@@Base+0xbab0>
   1e498:	mov	r3, #0
   1e49c:	b	1e4dc <_start@@Base+0xbaec>
   1e4a0:	mov	r3, #4
   1e4a4:	mov	r2, #4
   1e4a8:	mov	r1, #4
   1e4ac:	ldr	r0, [fp, #-16]
   1e4b0:	bl	2e698 <flatcc_builder_table_add@@Base>
   1e4b4:	str	r0, [fp, #-8]
   1e4b8:	ldr	r3, [fp, #-8]
   1e4bc:	cmp	r3, #0
   1e4c0:	bne	1e4cc <_start@@Base+0xbadc>
   1e4c4:	mvn	r3, #0
   1e4c8:	b	1e4dc <_start@@Base+0xbaec>
   1e4cc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1e4d0:	ldr	r0, [fp, #-8]
   1e4d4:	bl	1a794 <_start@@Base+0x7da4>
   1e4d8:	mov	r3, #0
   1e4dc:	mov	r0, r3
   1e4e0:	sub	sp, fp, #4
   1e4e4:	ldr	fp, [sp]
   1e4e8:	add	sp, sp, #4
   1e4ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1e4f0:	str	fp, [sp, #-8]!
   1e4f4:	str	lr, [sp, #4]
   1e4f8:	add	fp, sp, #4
   1e4fc:	sub	sp, sp, #16
   1e500:	str	r0, [fp, #-16]
   1e504:	str	r1, [fp, #-20]	; 0xffffffec
   1e508:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e50c:	cmp	r3, #0
   1e510:	bne	1e51c <_start@@Base+0xbb2c>
   1e514:	mov	r3, #0
   1e518:	b	1e558 <_start@@Base+0xbb68>
   1e51c:	mov	r3, #4
   1e520:	mov	r2, #4
   1e524:	mov	r1, #5
   1e528:	ldr	r0, [fp, #-16]
   1e52c:	bl	2e698 <flatcc_builder_table_add@@Base>
   1e530:	str	r0, [fp, #-8]
   1e534:	ldr	r3, [fp, #-8]
   1e538:	cmp	r3, #0
   1e53c:	bne	1e548 <_start@@Base+0xbb58>
   1e540:	mvn	r3, #0
   1e544:	b	1e558 <_start@@Base+0xbb68>
   1e548:	ldr	r1, [fp, #-20]	; 0xffffffec
   1e54c:	ldr	r0, [fp, #-8]
   1e550:	bl	1a668 <_start@@Base+0x7c78>
   1e554:	mov	r3, #0
   1e558:	mov	r0, r3
   1e55c:	sub	sp, fp, #4
   1e560:	ldr	fp, [sp]
   1e564:	add	sp, sp, #4
   1e568:	pop	{pc}		; (ldr pc, [sp], #4)
   1e56c:	str	fp, [sp, #-8]!
   1e570:	str	lr, [sp, #4]
   1e574:	add	fp, sp, #4
   1e578:	sub	sp, sp, #24
   1e57c:	str	r0, [fp, #-16]
   1e580:	strd	r2, [fp, #-28]	; 0xffffffe4
   1e584:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1e588:	orrs	r3, r2, r3
   1e58c:	bne	1e598 <_start@@Base+0xbba8>
   1e590:	mov	r3, #0
   1e594:	b	1e5d4 <_start@@Base+0xbbe4>
   1e598:	mov	r3, #8
   1e59c:	mov	r2, #8
   1e5a0:	mov	r1, #6
   1e5a4:	ldr	r0, [fp, #-16]
   1e5a8:	bl	2e698 <flatcc_builder_table_add@@Base>
   1e5ac:	str	r0, [fp, #-8]
   1e5b0:	ldr	r3, [fp, #-8]
   1e5b4:	cmp	r3, #0
   1e5b8:	bne	1e5c4 <_start@@Base+0xbbd4>
   1e5bc:	mvn	r3, #0
   1e5c0:	b	1e5d4 <_start@@Base+0xbbe4>
   1e5c4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1e5c8:	ldr	r0, [fp, #-8]
   1e5cc:	bl	1a7d8 <_start@@Base+0x7de8>
   1e5d0:	mov	r3, #0
   1e5d4:	mov	r0, r3
   1e5d8:	sub	sp, fp, #4
   1e5dc:	ldr	fp, [sp]
   1e5e0:	add	sp, sp, #4
   1e5e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e5e8:	str	fp, [sp, #-8]!
   1e5ec:	str	lr, [sp, #4]
   1e5f0:	add	fp, sp, #4
   1e5f4:	sub	sp, sp, #24
   1e5f8:	str	r0, [fp, #-16]
   1e5fc:	strd	r2, [fp, #-28]	; 0xffffffe4
   1e600:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1e604:	orrs	r3, r2, r3
   1e608:	bne	1e614 <_start@@Base+0xbc24>
   1e60c:	mov	r3, #0
   1e610:	b	1e650 <_start@@Base+0xbc60>
   1e614:	mov	r3, #8
   1e618:	mov	r2, #8
   1e61c:	mov	r1, #7
   1e620:	ldr	r0, [fp, #-16]
   1e624:	bl	2e698 <flatcc_builder_table_add@@Base>
   1e628:	str	r0, [fp, #-8]
   1e62c:	ldr	r3, [fp, #-8]
   1e630:	cmp	r3, #0
   1e634:	bne	1e640 <_start@@Base+0xbc50>
   1e638:	mvn	r3, #0
   1e63c:	b	1e650 <_start@@Base+0xbc60>
   1e640:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1e644:	ldr	r0, [fp, #-8]
   1e648:	bl	1a6ac <_start@@Base+0x7cbc>
   1e64c:	mov	r3, #0
   1e650:	mov	r0, r3
   1e654:	sub	sp, fp, #4
   1e658:	ldr	fp, [sp]
   1e65c:	add	sp, sp, #4
   1e660:	pop	{pc}		; (ldr pc, [sp], #4)
   1e664:	str	fp, [sp, #-8]!
   1e668:	str	lr, [sp, #4]
   1e66c:	add	fp, sp, #4
   1e670:	sub	sp, sp, #16
   1e674:	str	r0, [fp, #-16]
   1e678:	vstr	s0, [fp, #-20]	; 0xffffffec
   1e67c:	vldr	s15, [fp, #-20]	; 0xffffffec
   1e680:	vcmp.f32	s15, #0.0
   1e684:	vmrs	APSR_nzcv, fpscr
   1e688:	bne	1e694 <_start@@Base+0xbca4>
   1e68c:	mov	r3, #0
   1e690:	b	1e6d0 <_start@@Base+0xbce0>
   1e694:	mov	r3, #4
   1e698:	mov	r2, #4
   1e69c:	mov	r1, #8
   1e6a0:	ldr	r0, [fp, #-16]
   1e6a4:	bl	2e698 <flatcc_builder_table_add@@Base>
   1e6a8:	str	r0, [fp, #-8]
   1e6ac:	ldr	r3, [fp, #-8]
   1e6b0:	cmp	r3, #0
   1e6b4:	bne	1e6c0 <_start@@Base+0xbcd0>
   1e6b8:	mvn	r3, #0
   1e6bc:	b	1e6d0 <_start@@Base+0xbce0>
   1e6c0:	vldr	s0, [fp, #-20]	; 0xffffffec
   1e6c4:	ldr	r0, [fp, #-8]
   1e6c8:	bl	1a86c <_start@@Base+0x7e7c>
   1e6cc:	mov	r3, #0
   1e6d0:	mov	r0, r3
   1e6d4:	sub	sp, fp, #4
   1e6d8:	ldr	fp, [sp]
   1e6dc:	add	sp, sp, #4
   1e6e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e6e4:	str	fp, [sp, #-8]!
   1e6e8:	str	lr, [sp, #4]
   1e6ec:	add	fp, sp, #4
   1e6f0:	sub	sp, sp, #24
   1e6f4:	str	r0, [fp, #-16]
   1e6f8:	vstr	d0, [fp, #-28]	; 0xffffffe4
   1e6fc:	vldr	d7, [fp, #-28]	; 0xffffffe4
   1e700:	vcmp.f64	d7, #0.0
   1e704:	vmrs	APSR_nzcv, fpscr
   1e708:	bne	1e714 <_start@@Base+0xbd24>
   1e70c:	mov	r3, #0
   1e710:	b	1e750 <_start@@Base+0xbd60>
   1e714:	mov	r3, #8
   1e718:	mov	r2, #8
   1e71c:	mov	r1, #9
   1e720:	ldr	r0, [fp, #-16]
   1e724:	bl	2e698 <flatcc_builder_table_add@@Base>
   1e728:	str	r0, [fp, #-8]
   1e72c:	ldr	r3, [fp, #-8]
   1e730:	cmp	r3, #0
   1e734:	bne	1e740 <_start@@Base+0xbd50>
   1e738:	mvn	r3, #0
   1e73c:	b	1e750 <_start@@Base+0xbd60>
   1e740:	vldr	d0, [fp, #-28]	; 0xffffffe4
   1e744:	ldr	r0, [fp, #-8]
   1e748:	bl	1a8fc <_start@@Base+0x7f0c>
   1e74c:	mov	r3, #0
   1e750:	mov	r0, r3
   1e754:	sub	sp, fp, #4
   1e758:	ldr	fp, [sp]
   1e75c:	add	sp, sp, #4
   1e760:	pop	{pc}		; (ldr pc, [sp], #4)
   1e764:	str	fp, [sp, #-8]!
   1e768:	str	lr, [sp, #4]
   1e76c:	add	fp, sp, #4
   1e770:	sub	sp, sp, #16
   1e774:	str	r0, [fp, #-16]
   1e778:	str	r1, [fp, #-20]	; 0xffffffec
   1e77c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e780:	cmp	r3, #0
   1e784:	beq	1e7b8 <_start@@Base+0xbdc8>
   1e788:	mov	r1, #10
   1e78c:	ldr	r0, [fp, #-16]
   1e790:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1e794:	str	r0, [fp, #-8]
   1e798:	ldr	r3, [fp, #-8]
   1e79c:	cmp	r3, #0
   1e7a0:	beq	1e7b8 <_start@@Base+0xbdc8>
   1e7a4:	ldr	r3, [fp, #-8]
   1e7a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1e7ac:	str	r2, [r3]
   1e7b0:	mov	r3, #0
   1e7b4:	b	1e7bc <_start@@Base+0xbdcc>
   1e7b8:	mvn	r3, #0
   1e7bc:	mov	r0, r3
   1e7c0:	sub	sp, fp, #4
   1e7c4:	ldr	fp, [sp]
   1e7c8:	add	sp, sp, #4
   1e7cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e7d0:	str	fp, [sp, #-8]!
   1e7d4:	str	lr, [sp, #4]
   1e7d8:	add	fp, sp, #4
   1e7dc:	sub	sp, sp, #16
   1e7e0:	str	r0, [fp, #-16]
   1e7e4:	str	r1, [fp, #-20]	; 0xffffffec
   1e7e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e7ec:	cmp	r3, #0
   1e7f0:	beq	1e824 <_start@@Base+0xbe34>
   1e7f4:	mov	r1, #11
   1e7f8:	ldr	r0, [fp, #-16]
   1e7fc:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1e800:	str	r0, [fp, #-8]
   1e804:	ldr	r3, [fp, #-8]
   1e808:	cmp	r3, #0
   1e80c:	beq	1e824 <_start@@Base+0xbe34>
   1e810:	ldr	r3, [fp, #-8]
   1e814:	ldr	r2, [fp, #-20]	; 0xffffffec
   1e818:	str	r2, [r3]
   1e81c:	mov	r3, #0
   1e820:	b	1e828 <_start@@Base+0xbe38>
   1e824:	mvn	r3, #0
   1e828:	mov	r0, r3
   1e82c:	sub	sp, fp, #4
   1e830:	ldr	fp, [sp]
   1e834:	add	sp, sp, #4
   1e838:	pop	{pc}		; (ldr pc, [sp], #4)
   1e83c:	str	fp, [sp, #-8]!
   1e840:	str	lr, [sp, #4]
   1e844:	add	fp, sp, #4
   1e848:	sub	sp, sp, #24
   1e84c:	str	r0, [fp, #-8]
   1e850:	mov	r0, r1
   1e854:	mov	r1, r2
   1e858:	mov	r2, r3
   1e85c:	vstr	s0, [fp, #-16]
   1e860:	vstr	d1, [fp, #-28]	; 0xffffffe4
   1e864:	mov	r3, r0
   1e868:	strb	r3, [fp, #-9]
   1e86c:	mov	r3, r1
   1e870:	strb	r3, [fp, #-10]
   1e874:	mov	r3, r2
   1e878:	strh	r3, [fp, #-12]
   1e87c:	ldr	r0, [fp, #-8]
   1e880:	bl	1ba78 <_start@@Base+0x9088>
   1e884:	mov	r3, r0
   1e888:	cmp	r3, #0
   1e88c:	bne	1e9c0 <_start@@Base+0xbfd0>
   1e890:	ldrd	r2, [fp, #20]
   1e894:	ldr	r0, [fp, #-8]
   1e898:	bl	1e56c <_start@@Base+0xbb7c>
   1e89c:	mov	r3, r0
   1e8a0:	cmp	r3, #0
   1e8a4:	bne	1e9c0 <_start@@Base+0xbfd0>
   1e8a8:	ldrd	r2, [fp, #28]
   1e8ac:	ldr	r0, [fp, #-8]
   1e8b0:	bl	1e5e8 <_start@@Base+0xbbf8>
   1e8b4:	mov	r3, r0
   1e8b8:	cmp	r3, #0
   1e8bc:	bne	1e9c0 <_start@@Base+0xbfd0>
   1e8c0:	vldr	d0, [fp, #-28]	; 0xffffffe4
   1e8c4:	ldr	r0, [fp, #-8]
   1e8c8:	bl	1e6e4 <_start@@Base+0xbcf4>
   1e8cc:	mov	r3, r0
   1e8d0:	cmp	r3, #0
   1e8d4:	bne	1e9c0 <_start@@Base+0xbfd0>
   1e8d8:	ldr	r1, [fp, #8]
   1e8dc:	ldr	r0, [fp, #-8]
   1e8e0:	bl	1e474 <_start@@Base+0xba84>
   1e8e4:	mov	r3, r0
   1e8e8:	cmp	r3, #0
   1e8ec:	bne	1e9c0 <_start@@Base+0xbfd0>
   1e8f0:	ldr	r1, [fp, #12]
   1e8f4:	ldr	r0, [fp, #-8]
   1e8f8:	bl	1e4f0 <_start@@Base+0xbb00>
   1e8fc:	mov	r3, r0
   1e900:	cmp	r3, #0
   1e904:	bne	1e9c0 <_start@@Base+0xbfd0>
   1e908:	vldr	s0, [fp, #-16]
   1e90c:	ldr	r0, [fp, #-8]
   1e910:	bl	1e664 <_start@@Base+0xbc74>
   1e914:	mov	r3, r0
   1e918:	cmp	r3, #0
   1e91c:	bne	1e9c0 <_start@@Base+0xbfd0>
   1e920:	ldr	r1, [fp, #36]	; 0x24
   1e924:	ldr	r0, [fp, #-8]
   1e928:	bl	1e764 <_start@@Base+0xbd74>
   1e92c:	mov	r3, r0
   1e930:	cmp	r3, #0
   1e934:	bne	1e9c0 <_start@@Base+0xbfd0>
   1e938:	ldr	r1, [fp, #40]	; 0x28
   1e93c:	ldr	r0, [fp, #-8]
   1e940:	bl	1e7d0 <_start@@Base+0xbde0>
   1e944:	mov	r3, r0
   1e948:	cmp	r3, #0
   1e94c:	bne	1e9c0 <_start@@Base+0xbfd0>
   1e950:	ldrsh	r3, [fp, #-12]
   1e954:	mov	r1, r3
   1e958:	ldr	r0, [fp, #-8]
   1e95c:	bl	1e36c <_start@@Base+0xb97c>
   1e960:	mov	r3, r0
   1e964:	cmp	r3, #0
   1e968:	bne	1e9c0 <_start@@Base+0xbfd0>
   1e96c:	ldrh	r3, [fp, #4]
   1e970:	mov	r1, r3
   1e974:	ldr	r0, [fp, #-8]
   1e978:	bl	1e3f0 <_start@@Base+0xba00>
   1e97c:	mov	r3, r0
   1e980:	cmp	r3, #0
   1e984:	bne	1e9c0 <_start@@Base+0xbfd0>
   1e988:	ldrsb	r3, [fp, #-9]
   1e98c:	mov	r1, r3
   1e990:	ldr	r0, [fp, #-8]
   1e994:	bl	1e264 <_start@@Base+0xb874>
   1e998:	mov	r3, r0
   1e99c:	cmp	r3, #0
   1e9a0:	bne	1e9c0 <_start@@Base+0xbfd0>
   1e9a4:	ldrb	r3, [fp, #-10]
   1e9a8:	mov	r1, r3
   1e9ac:	ldr	r0, [fp, #-8]
   1e9b0:	bl	1e2e8 <_start@@Base+0xb8f8>
   1e9b4:	mov	r3, r0
   1e9b8:	cmp	r3, #0
   1e9bc:	beq	1e9c8 <_start@@Base+0xbfd8>
   1e9c0:	mov	r3, #0
   1e9c4:	b	1e9d4 <_start@@Base+0xbfe4>
   1e9c8:	ldr	r0, [fp, #-8]
   1e9cc:	bl	1bab0 <_start@@Base+0x90c0>
   1e9d0:	mov	r3, r0
   1e9d4:	mov	r0, r3
   1e9d8:	sub	sp, fp, #4
   1e9dc:	ldr	fp, [sp]
   1e9e0:	add	sp, sp, #4
   1e9e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e9e8:	str	fp, [sp, #-8]!
   1e9ec:	str	lr, [sp, #4]
   1e9f0:	add	fp, sp, #4
   1e9f4:	sub	sp, sp, #64	; 0x40
   1e9f8:	str	r0, [fp, #-8]
   1e9fc:	mov	r0, r1
   1ea00:	mov	r1, r2
   1ea04:	mov	r2, r3
   1ea08:	vstr	s0, [fp, #-16]
   1ea0c:	vstr	d1, [fp, #-28]	; 0xffffffe4
   1ea10:	mov	r3, r0
   1ea14:	strb	r3, [fp, #-9]
   1ea18:	mov	r3, r1
   1ea1c:	strb	r3, [fp, #-10]
   1ea20:	mov	r3, r2
   1ea24:	strh	r3, [fp, #-12]
   1ea28:	ldr	r3, [pc, #164]	; 1ead4 <_start@@Base+0xc0e4>
   1ea2c:	add	r3, pc, r3
   1ea30:	mov	r1, r3
   1ea34:	ldr	r0, [fp, #-8]
   1ea38:	bl	1ab54 <_start@@Base+0x8164>
   1ea3c:	mov	r3, r0
   1ea40:	cmp	r3, #0
   1ea44:	beq	1ea50 <_start@@Base+0xc060>
   1ea48:	mov	r3, #0
   1ea4c:	b	1eac0 <_start@@Base+0xc0d0>
   1ea50:	ldrsh	ip, [fp, #-12]
   1ea54:	ldrb	r0, [fp, #-10]
   1ea58:	ldrsb	r1, [fp, #-9]
   1ea5c:	ldr	r3, [fp, #40]	; 0x28
   1ea60:	str	r3, [sp, #36]	; 0x24
   1ea64:	ldr	r3, [fp, #36]	; 0x24
   1ea68:	str	r3, [sp, #32]
   1ea6c:	ldrd	r2, [fp, #28]
   1ea70:	strd	r2, [sp, #24]
   1ea74:	ldrd	r2, [fp, #20]
   1ea78:	strd	r2, [sp, #16]
   1ea7c:	ldr	r3, [fp, #12]
   1ea80:	str	r3, [sp, #8]
   1ea84:	ldr	r3, [fp, #8]
   1ea88:	str	r3, [sp, #4]
   1ea8c:	ldrh	r3, [fp, #4]
   1ea90:	str	r3, [sp]
   1ea94:	vldr	d1, [fp, #-28]	; 0xffffffe4
   1ea98:	vldr	s0, [fp, #-16]
   1ea9c:	mov	r3, ip
   1eaa0:	mov	r2, r0
   1eaa4:	ldr	r0, [fp, #-8]
   1eaa8:	bl	1e83c <_start@@Base+0xbe4c>
   1eaac:	mov	r3, r0
   1eab0:	mov	r1, r3
   1eab4:	ldr	r0, [fp, #-8]
   1eab8:	bl	1abdc <_start@@Base+0x81ec>
   1eabc:	mov	r3, r0
   1eac0:	mov	r0, r3
   1eac4:	sub	sp, fp, #4
   1eac8:	ldr	fp, [sp]
   1eacc:	add	sp, sp, #4
   1ead0:	pop	{pc}		; (ldr pc, [sp], #4)
   1ead4:	andeq	r3, r1, r8, asr #24
   1ead8:	str	fp, [sp, #-8]!
   1eadc:	str	lr, [sp, #4]
   1eae0:	add	fp, sp, #4
   1eae4:	sub	sp, sp, #16
   1eae8:	str	r0, [fp, #-16]
   1eaec:	str	r1, [fp, #-20]	; 0xffffffec
   1eaf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1eaf4:	cmp	r3, #0
   1eaf8:	bne	1eb04 <_start@@Base+0xc114>
   1eafc:	mov	r3, #0
   1eb00:	b	1eb40 <_start@@Base+0xc150>
   1eb04:	mov	r3, #4
   1eb08:	mov	r2, #4
   1eb0c:	mov	r1, #0
   1eb10:	ldr	r0, [fp, #-16]
   1eb14:	bl	2e698 <flatcc_builder_table_add@@Base>
   1eb18:	str	r0, [fp, #-8]
   1eb1c:	ldr	r3, [fp, #-8]
   1eb20:	cmp	r3, #0
   1eb24:	bne	1eb30 <_start@@Base+0xc140>
   1eb28:	mvn	r3, #0
   1eb2c:	b	1eb40 <_start@@Base+0xc150>
   1eb30:	ldr	r1, [fp, #-20]	; 0xffffffec
   1eb34:	ldr	r0, [fp, #-8]
   1eb38:	bl	1a794 <_start@@Base+0x7da4>
   1eb3c:	mov	r3, #0
   1eb40:	mov	r0, r3
   1eb44:	sub	sp, fp, #4
   1eb48:	ldr	fp, [sp]
   1eb4c:	add	sp, sp, #4
   1eb50:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb54:	str	fp, [sp, #-8]!
   1eb58:	str	lr, [sp, #4]
   1eb5c:	add	fp, sp, #4
   1eb60:	sub	sp, sp, #8
   1eb64:	str	r0, [fp, #-8]
   1eb68:	str	r1, [fp, #-12]
   1eb6c:	ldr	r0, [fp, #-8]
   1eb70:	bl	1bb38 <_start@@Base+0x9148>
   1eb74:	mov	r3, r0
   1eb78:	cmp	r3, #0
   1eb7c:	bne	1eb98 <_start@@Base+0xc1a8>
   1eb80:	ldr	r1, [fp, #-12]
   1eb84:	ldr	r0, [fp, #-8]
   1eb88:	bl	1ead8 <_start@@Base+0xc0e8>
   1eb8c:	mov	r3, r0
   1eb90:	cmp	r3, #0
   1eb94:	beq	1eba0 <_start@@Base+0xc1b0>
   1eb98:	mov	r3, #0
   1eb9c:	b	1ebac <_start@@Base+0xc1bc>
   1eba0:	ldr	r0, [fp, #-8]
   1eba4:	bl	1bb70 <_start@@Base+0x9180>
   1eba8:	mov	r3, r0
   1ebac:	mov	r0, r3
   1ebb0:	sub	sp, fp, #4
   1ebb4:	ldr	fp, [sp]
   1ebb8:	add	sp, sp, #4
   1ebbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ebc0:	str	fp, [sp, #-8]!
   1ebc4:	str	lr, [sp, #4]
   1ebc8:	add	fp, sp, #4
   1ebcc:	sub	sp, sp, #24
   1ebd0:	str	r0, [fp, #-16]
   1ebd4:	sub	r3, fp, #24
   1ebd8:	stm	r3, {r1, r2}
   1ebdc:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   1ebe0:	cmp	r3, #0
   1ebe4:	bne	1ebf0 <_start@@Base+0xc200>
   1ebe8:	mov	r3, #0
   1ebec:	b	1ec68 <_start@@Base+0xc278>
   1ebf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ebf4:	cmp	r3, #0
   1ebf8:	bne	1ec04 <_start@@Base+0xc214>
   1ebfc:	mvn	r3, #0
   1ec00:	b	1ec68 <_start@@Base+0xc278>
   1ec04:	mov	r3, #1
   1ec08:	mov	r2, #1
   1ec0c:	mov	r1, #0
   1ec10:	ldr	r0, [fp, #-16]
   1ec14:	bl	2e698 <flatcc_builder_table_add@@Base>
   1ec18:	str	r0, [fp, #-8]
   1ec1c:	ldr	r3, [fp, #-8]
   1ec20:	cmp	r3, #0
   1ec24:	beq	1ec44 <_start@@Base+0xc254>
   1ec28:	mov	r1, #1
   1ec2c:	ldr	r0, [fp, #-16]
   1ec30:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1ec34:	str	r0, [fp, #-12]
   1ec38:	ldr	r3, [fp, #-12]
   1ec3c:	cmp	r3, #0
   1ec40:	bne	1ec4c <_start@@Base+0xc25c>
   1ec44:	mvn	r3, #0
   1ec48:	b	1ec68 <_start@@Base+0xc278>
   1ec4c:	ldrb	r2, [fp, #-24]	; 0xffffffe8
   1ec50:	ldr	r3, [fp, #-8]
   1ec54:	strb	r2, [r3]
   1ec58:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ec5c:	ldr	r3, [fp, #-12]
   1ec60:	str	r2, [r3]
   1ec64:	mov	r3, #0
   1ec68:	mov	r0, r3
   1ec6c:	sub	sp, fp, #4
   1ec70:	ldr	fp, [sp]
   1ec74:	add	sp, sp, #4
   1ec78:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec7c:	str	fp, [sp, #-8]!
   1ec80:	str	lr, [sp, #4]
   1ec84:	add	fp, sp, #4
   1ec88:	sub	sp, sp, #24
   1ec8c:	str	r0, [fp, #-24]	; 0xffffffe8
   1ec90:	mov	r3, r1
   1ec94:	strh	r3, [fp, #-26]	; 0xffffffe6
   1ec98:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   1ec9c:	mov	r1, r3
   1eca0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1eca4:	bl	1b4b4 <_start@@Base+0x8ac4>
   1eca8:	str	r0, [fp, #-8]
   1ecac:	ldr	r3, [fp, #-8]
   1ecb0:	cmp	r3, #0
   1ecb4:	beq	1ece0 <_start@@Base+0xc2f0>
   1ecb8:	sub	r3, fp, #16
   1ecbc:	ldr	r1, [fp, #-8]
   1ecc0:	mov	r0, r3
   1ecc4:	bl	1be8c <_start@@Base+0x949c>
   1ecc8:	sub	r3, fp, #16
   1eccc:	ldm	r3, {r1, r2}
   1ecd0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ecd4:	bl	1ebc0 <_start@@Base+0xc1d0>
   1ecd8:	mov	r3, r0
   1ecdc:	b	1ece4 <_start@@Base+0xc2f4>
   1ece0:	mvn	r3, #0
   1ece4:	mov	r0, r3
   1ece8:	sub	sp, fp, #4
   1ecec:	ldr	fp, [sp]
   1ecf0:	add	sp, sp, #4
   1ecf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1ecf8:	str	fp, [sp, #-8]!
   1ecfc:	str	lr, [sp, #4]
   1ed00:	add	fp, sp, #4
   1ed04:	sub	sp, sp, #24
   1ed08:	str	r0, [fp, #-16]
   1ed0c:	sub	r3, fp, #24
   1ed10:	stm	r3, {r1, r2}
   1ed14:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   1ed18:	cmp	r3, #0
   1ed1c:	bne	1ed28 <_start@@Base+0xc338>
   1ed20:	mov	r3, #0
   1ed24:	b	1eda0 <_start@@Base+0xc3b0>
   1ed28:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ed2c:	cmp	r3, #0
   1ed30:	bne	1ed3c <_start@@Base+0xc34c>
   1ed34:	mvn	r3, #0
   1ed38:	b	1eda0 <_start@@Base+0xc3b0>
   1ed3c:	mov	r3, #1
   1ed40:	mov	r2, #1
   1ed44:	mov	r1, #2
   1ed48:	ldr	r0, [fp, #-16]
   1ed4c:	bl	2e698 <flatcc_builder_table_add@@Base>
   1ed50:	str	r0, [fp, #-8]
   1ed54:	ldr	r3, [fp, #-8]
   1ed58:	cmp	r3, #0
   1ed5c:	beq	1ed7c <_start@@Base+0xc38c>
   1ed60:	mov	r1, #3
   1ed64:	ldr	r0, [fp, #-16]
   1ed68:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1ed6c:	str	r0, [fp, #-12]
   1ed70:	ldr	r3, [fp, #-12]
   1ed74:	cmp	r3, #0
   1ed78:	bne	1ed84 <_start@@Base+0xc394>
   1ed7c:	mvn	r3, #0
   1ed80:	b	1eda0 <_start@@Base+0xc3b0>
   1ed84:	ldrb	r2, [fp, #-24]	; 0xffffffe8
   1ed88:	ldr	r3, [fp, #-8]
   1ed8c:	strb	r2, [r3]
   1ed90:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ed94:	ldr	r3, [fp, #-12]
   1ed98:	str	r2, [r3]
   1ed9c:	mov	r3, #0
   1eda0:	mov	r0, r3
   1eda4:	sub	sp, fp, #4
   1eda8:	ldr	fp, [sp]
   1edac:	add	sp, sp, #4
   1edb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1edb4:	str	fp, [sp, #-8]!
   1edb8:	str	lr, [sp, #4]
   1edbc:	add	fp, sp, #4
   1edc0:	sub	sp, sp, #16
   1edc4:	str	r0, [fp, #-16]
   1edc8:	str	r1, [fp, #-20]	; 0xffffffec
   1edcc:	sub	r3, fp, #12
   1edd0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1edd4:	mov	r0, r3
   1edd8:	bl	1be44 <_start@@Base+0x9454>
   1eddc:	sub	r3, fp, #12
   1ede0:	ldm	r3, {r1, r2}
   1ede4:	ldr	r0, [fp, #-16]
   1ede8:	bl	1ecf8 <_start@@Base+0xc308>
   1edec:	mov	r3, r0
   1edf0:	mov	r0, r3
   1edf4:	sub	sp, fp, #4
   1edf8:	ldr	fp, [sp]
   1edfc:	add	sp, sp, #4
   1ee00:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee04:	str	fp, [sp, #-8]!
   1ee08:	str	lr, [sp, #4]
   1ee0c:	add	fp, sp, #4
   1ee10:	sub	sp, sp, #24
   1ee14:	str	r0, [fp, #-16]
   1ee18:	sub	r3, fp, #24
   1ee1c:	stm	r3, {r1, r2}
   1ee20:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   1ee24:	cmp	r3, #0
   1ee28:	bne	1ee34 <_start@@Base+0xc444>
   1ee2c:	mov	r3, #0
   1ee30:	b	1eeac <_start@@Base+0xc4bc>
   1ee34:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ee38:	cmp	r3, #0
   1ee3c:	bne	1ee48 <_start@@Base+0xc458>
   1ee40:	mvn	r3, #0
   1ee44:	b	1eeac <_start@@Base+0xc4bc>
   1ee48:	mov	r3, #1
   1ee4c:	mov	r2, #1
   1ee50:	mov	r1, #4
   1ee54:	ldr	r0, [fp, #-16]
   1ee58:	bl	2e698 <flatcc_builder_table_add@@Base>
   1ee5c:	str	r0, [fp, #-8]
   1ee60:	ldr	r3, [fp, #-8]
   1ee64:	cmp	r3, #0
   1ee68:	beq	1ee88 <_start@@Base+0xc498>
   1ee6c:	mov	r1, #5
   1ee70:	ldr	r0, [fp, #-16]
   1ee74:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1ee78:	str	r0, [fp, #-12]
   1ee7c:	ldr	r3, [fp, #-12]
   1ee80:	cmp	r3, #0
   1ee84:	bne	1ee90 <_start@@Base+0xc4a0>
   1ee88:	mvn	r3, #0
   1ee8c:	b	1eeac <_start@@Base+0xc4bc>
   1ee90:	ldrb	r2, [fp, #-24]	; 0xffffffe8
   1ee94:	ldr	r3, [fp, #-8]
   1ee98:	strb	r2, [r3]
   1ee9c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1eea0:	ldr	r3, [fp, #-12]
   1eea4:	str	r2, [r3]
   1eea8:	mov	r3, #0
   1eeac:	mov	r0, r3
   1eeb0:	sub	sp, fp, #4
   1eeb4:	ldr	fp, [sp]
   1eeb8:	add	sp, sp, #4
   1eebc:	pop	{pc}		; (ldr pc, [sp], #4)
   1eec0:	str	fp, [sp, #-8]!
   1eec4:	str	lr, [sp, #4]
   1eec8:	add	fp, sp, #4
   1eecc:	sub	sp, sp, #16
   1eed0:	str	r0, [fp, #-16]
   1eed4:	str	r1, [fp, #-20]	; 0xffffffec
   1eed8:	sub	r3, fp, #12
   1eedc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1eee0:	mov	r0, r3
   1eee4:	bl	1bf1c <_start@@Base+0x952c>
   1eee8:	sub	r3, fp, #12
   1eeec:	ldm	r3, {r1, r2}
   1eef0:	ldr	r0, [fp, #-16]
   1eef4:	bl	1ee04 <_start@@Base+0xc414>
   1eef8:	mov	r3, r0
   1eefc:	mov	r0, r3
   1ef00:	sub	sp, fp, #4
   1ef04:	ldr	fp, [sp]
   1ef08:	add	sp, sp, #4
   1ef0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef10:	str	fp, [sp, #-8]!
   1ef14:	str	lr, [sp, #4]
   1ef18:	add	fp, sp, #4
   1ef1c:	sub	sp, sp, #8
   1ef20:	str	r0, [fp, #-8]
   1ef24:	str	r1, [fp, #-12]
   1ef28:	ldr	r1, [fp, #-12]
   1ef2c:	ldr	r0, [fp, #-8]
   1ef30:	bl	2e4b4 <flatcc_builder_create_string_str@@Base>
   1ef34:	mov	r3, r0
   1ef38:	mov	r1, r3
   1ef3c:	ldr	r0, [fp, #-8]
   1ef40:	bl	1eec0 <_start@@Base+0xc4d0>
   1ef44:	mov	r3, r0
   1ef48:	mov	r0, r3
   1ef4c:	sub	sp, fp, #4
   1ef50:	ldr	fp, [sp]
   1ef54:	add	sp, sp, #4
   1ef58:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef5c:	str	fp, [sp, #-8]!
   1ef60:	str	lr, [sp, #4]
   1ef64:	add	fp, sp, #4
   1ef68:	sub	sp, sp, #24
   1ef6c:	str	r0, [fp, #-16]
   1ef70:	sub	r3, fp, #24
   1ef74:	stm	r3, {r1, r2}
   1ef78:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   1ef7c:	cmp	r3, #0
   1ef80:	bne	1ef8c <_start@@Base+0xc59c>
   1ef84:	mov	r3, #0
   1ef88:	b	1f004 <_start@@Base+0xc614>
   1ef8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ef90:	cmp	r3, #0
   1ef94:	bne	1efa0 <_start@@Base+0xc5b0>
   1ef98:	mvn	r3, #0
   1ef9c:	b	1f004 <_start@@Base+0xc614>
   1efa0:	mov	r3, #1
   1efa4:	mov	r2, #1
   1efa8:	mov	r1, #6
   1efac:	ldr	r0, [fp, #-16]
   1efb0:	bl	2e698 <flatcc_builder_table_add@@Base>
   1efb4:	str	r0, [fp, #-8]
   1efb8:	ldr	r3, [fp, #-8]
   1efbc:	cmp	r3, #0
   1efc0:	beq	1efe0 <_start@@Base+0xc5f0>
   1efc4:	mov	r1, #7
   1efc8:	ldr	r0, [fp, #-16]
   1efcc:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1efd0:	str	r0, [fp, #-12]
   1efd4:	ldr	r3, [fp, #-12]
   1efd8:	cmp	r3, #0
   1efdc:	bne	1efe8 <_start@@Base+0xc5f8>
   1efe0:	mvn	r3, #0
   1efe4:	b	1f004 <_start@@Base+0xc614>
   1efe8:	ldrb	r2, [fp, #-24]	; 0xffffffe8
   1efec:	ldr	r3, [fp, #-8]
   1eff0:	strb	r2, [r3]
   1eff4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1eff8:	ldr	r3, [fp, #-12]
   1effc:	str	r2, [r3]
   1f000:	mov	r3, #0
   1f004:	mov	r0, r3
   1f008:	sub	sp, fp, #4
   1f00c:	ldr	fp, [sp]
   1f010:	add	sp, sp, #4
   1f014:	pop	{pc}		; (ldr pc, [sp], #4)
   1f018:	str	fp, [sp, #-8]!
   1f01c:	str	lr, [sp, #4]
   1f020:	add	fp, sp, #4
   1f024:	sub	sp, sp, #16
   1f028:	str	r0, [fp, #-16]
   1f02c:	str	r1, [fp, #-20]	; 0xffffffec
   1f030:	sub	r3, fp, #12
   1f034:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f038:	mov	r0, r3
   1f03c:	bl	1be8c <_start@@Base+0x949c>
   1f040:	sub	r3, fp, #12
   1f044:	ldm	r3, {r1, r2}
   1f048:	ldr	r0, [fp, #-16]
   1f04c:	bl	1ef5c <_start@@Base+0xc56c>
   1f050:	mov	r3, r0
   1f054:	mov	r0, r3
   1f058:	sub	sp, fp, #4
   1f05c:	ldr	fp, [sp]
   1f060:	add	sp, sp, #4
   1f064:	pop	{pc}		; (ldr pc, [sp], #4)
   1f068:	str	fp, [sp, #-8]!
   1f06c:	str	lr, [sp, #4]
   1f070:	add	fp, sp, #4
   1f074:	sub	sp, sp, #24
   1f078:	str	r0, [fp, #-16]
   1f07c:	sub	r3, fp, #24
   1f080:	stm	r3, {r1, r2}
   1f084:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f088:	cmp	r3, #0
   1f08c:	beq	1f09c <_start@@Base+0xc6ac>
   1f090:	ldr	r3, [fp, #-20]	; 0xffffffec
   1f094:	cmp	r3, #0
   1f098:	bne	1f0bc <_start@@Base+0xc6cc>
   1f09c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f0a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1f0a4:	cmp	r2, r3
   1f0a8:	bne	1f0b4 <_start@@Base+0xc6c4>
   1f0ac:	mov	r3, #0
   1f0b0:	b	1f120 <_start@@Base+0xc730>
   1f0b4:	mvn	r3, #0
   1f0b8:	b	1f120 <_start@@Base+0xc730>
   1f0bc:	mov	r1, #8
   1f0c0:	ldr	r0, [fp, #-16]
   1f0c4:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1f0c8:	str	r0, [fp, #-8]
   1f0cc:	ldr	r3, [fp, #-8]
   1f0d0:	cmp	r3, #0
   1f0d4:	bne	1f0e0 <_start@@Base+0xc6f0>
   1f0d8:	mvn	r3, #0
   1f0dc:	b	1f120 <_start@@Base+0xc730>
   1f0e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f0e4:	ldr	r3, [fp, #-8]
   1f0e8:	str	r2, [r3]
   1f0ec:	mov	r1, #9
   1f0f0:	ldr	r0, [fp, #-16]
   1f0f4:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   1f0f8:	str	r0, [fp, #-8]
   1f0fc:	ldr	r3, [fp, #-8]
   1f100:	cmp	r3, #0
   1f104:	bne	1f110 <_start@@Base+0xc720>
   1f108:	mvn	r3, #0
   1f10c:	b	1f120 <_start@@Base+0xc730>
   1f110:	ldr	r2, [fp, #-20]	; 0xffffffec
   1f114:	ldr	r3, [fp, #-8]
   1f118:	str	r2, [r3]
   1f11c:	mov	r3, #0
   1f120:	mov	r0, r3
   1f124:	sub	sp, fp, #4
   1f128:	ldr	fp, [sp]
   1f12c:	add	sp, sp, #4
   1f130:	pop	{pc}		; (ldr pc, [sp], #4)
   1f134:	str	fp, [sp, #-8]!
   1f138:	str	lr, [sp, #4]
   1f13c:	add	fp, sp, #4
   1f140:	sub	sp, sp, #8
   1f144:	str	r0, [fp, #-8]
   1f148:	ldr	r0, [fp, #-8]
   1f14c:	bl	2dd7c <flatcc_builder_start_union_vector@@Base>
   1f150:	mov	r3, r0
   1f154:	mov	r0, r3
   1f158:	sub	sp, fp, #4
   1f15c:	ldr	fp, [sp]
   1f160:	add	sp, sp, #4
   1f164:	pop	{pc}		; (ldr pc, [sp], #4)
   1f168:	str	fp, [sp, #-8]!
   1f16c:	str	lr, [sp, #4]
   1f170:	add	fp, sp, #4
   1f174:	sub	sp, sp, #16
   1f178:	str	r0, [fp, #-16]
   1f17c:	sub	r3, fp, #12
   1f180:	ldr	r1, [fp, #-16]
   1f184:	mov	r0, r3
   1f188:	bl	2de04 <flatcc_builder_end_union_vector@@Base>
   1f18c:	sub	r3, fp, #12
   1f190:	ldm	r3, {r1, r2}
   1f194:	ldr	r0, [fp, #-16]
   1f198:	bl	1f068 <_start@@Base+0xc678>
   1f19c:	mov	r3, r0
   1f1a0:	mov	r0, r3
   1f1a4:	sub	sp, fp, #4
   1f1a8:	ldr	fp, [sp]
   1f1ac:	add	sp, sp, #4
   1f1b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1b4:	str	fp, [sp, #-8]!
   1f1b8:	str	lr, [sp, #4]
   1f1bc:	add	fp, sp, #4
   1f1c0:	sub	sp, sp, #16
   1f1c4:	str	r0, [fp, #-8]
   1f1c8:	sub	r3, fp, #16
   1f1cc:	stm	r3, {r1, r2}
   1f1d0:	sub	r3, fp, #16
   1f1d4:	ldm	r3, {r1, r2}
   1f1d8:	ldr	r0, [fp, #-8]
   1f1dc:	bl	2e16c <flatcc_builder_union_vector_push@@Base>
   1f1e0:	mov	r3, r0
   1f1e4:	mov	r0, r3
   1f1e8:	sub	sp, fp, #4
   1f1ec:	ldr	fp, [sp]
   1f1f0:	add	sp, sp, #4
   1f1f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1f8:	str	fp, [sp, #-8]!
   1f1fc:	str	lr, [sp, #4]
   1f200:	add	fp, sp, #4
   1f204:	sub	sp, sp, #16
   1f208:	str	r0, [fp, #-16]
   1f20c:	str	r1, [fp, #-20]	; 0xffffffec
   1f210:	sub	r3, fp, #12
   1f214:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f218:	mov	r0, r3
   1f21c:	bl	1be44 <_start@@Base+0x9454>
   1f220:	sub	r3, fp, #12
   1f224:	ldm	r3, {r1, r2}
   1f228:	ldr	r0, [fp, #-16]
   1f22c:	bl	1bf64 <_start@@Base+0x9574>
   1f230:	mov	r3, r0
   1f234:	mov	r0, r3
   1f238:	sub	sp, fp, #4
   1f23c:	ldr	fp, [sp]
   1f240:	add	sp, sp, #4
   1f244:	pop	{pc}		; (ldr pc, [sp], #4)
   1f248:	str	fp, [sp, #-8]!
   1f24c:	str	lr, [sp, #4]
   1f250:	add	fp, sp, #4
   1f254:	sub	sp, sp, #16
   1f258:	str	r0, [fp, #-16]
   1f25c:	str	r1, [fp, #-20]	; 0xffffffec
   1f260:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f264:	ldr	r0, [fp, #-16]
   1f268:	bl	1eb54 <_start@@Base+0xc164>
   1f26c:	mov	r2, r0
   1f270:	sub	r3, fp, #12
   1f274:	mov	r1, r2
   1f278:	mov	r0, r3
   1f27c:	bl	1be44 <_start@@Base+0x9454>
   1f280:	sub	r3, fp, #12
   1f284:	ldm	r3, {r1, r2}
   1f288:	ldr	r0, [fp, #-16]
   1f28c:	bl	1bf64 <_start@@Base+0x9574>
   1f290:	mov	r3, r0
   1f294:	mov	r0, r3
   1f298:	sub	sp, fp, #4
   1f29c:	ldr	fp, [sp]
   1f2a0:	add	sp, sp, #4
   1f2a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f2a8:	str	fp, [sp, #-8]!
   1f2ac:	str	lr, [sp, #4]
   1f2b0:	add	fp, sp, #4
   1f2b4:	sub	sp, sp, #8
   1f2b8:	str	r0, [fp, #-8]
   1f2bc:	ldr	r0, [fp, #-8]
   1f2c0:	bl	1b560 <_start@@Base+0x8b70>
   1f2c4:	mov	r3, r0
   1f2c8:	mov	r0, r3
   1f2cc:	sub	sp, fp, #4
   1f2d0:	ldr	fp, [sp]
   1f2d4:	add	sp, sp, #4
   1f2d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f2dc:	str	fp, [sp, #-8]!
   1f2e0:	str	lr, [sp, #4]
   1f2e4:	add	fp, sp, #4
   1f2e8:	sub	sp, sp, #16
   1f2ec:	str	r0, [fp, #-16]
   1f2f0:	ldr	r0, [fp, #-16]
   1f2f4:	bl	1b59c <_start@@Base+0x8bac>
   1f2f8:	mov	r2, r0
   1f2fc:	sub	r3, fp, #12
   1f300:	mov	r1, r2
   1f304:	mov	r0, r3
   1f308:	bl	1bed4 <_start@@Base+0x94e4>
   1f30c:	sub	r3, fp, #12
   1f310:	ldm	r3, {r1, r2}
   1f314:	ldr	r0, [fp, #-16]
   1f318:	bl	1bf64 <_start@@Base+0x9574>
   1f31c:	mov	r3, r0
   1f320:	mov	r0, r3
   1f324:	sub	sp, fp, #4
   1f328:	ldr	fp, [sp]
   1f32c:	add	sp, sp, #4
   1f330:	pop	{pc}		; (ldr pc, [sp], #4)
   1f334:	str	fp, [sp, #-8]!
   1f338:	str	lr, [sp, #4]
   1f33c:	add	fp, sp, #4
   1f340:	sub	sp, sp, #16
   1f344:	str	r0, [fp, #-16]
   1f348:	str	r1, [fp, #-20]	; 0xffffffec
   1f34c:	sub	r3, fp, #12
   1f350:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f354:	mov	r0, r3
   1f358:	bl	1bed4 <_start@@Base+0x94e4>
   1f35c:	sub	r3, fp, #12
   1f360:	ldm	r3, {r1, r2}
   1f364:	ldr	r0, [fp, #-16]
   1f368:	bl	1bf64 <_start@@Base+0x9574>
   1f36c:	mov	r3, r0
   1f370:	mov	r0, r3
   1f374:	sub	sp, fp, #4
   1f378:	ldr	fp, [sp]
   1f37c:	add	sp, sp, #4
   1f380:	pop	{pc}		; (ldr pc, [sp], #4)
   1f384:	str	fp, [sp, #-8]!
   1f388:	str	lr, [sp, #4]
   1f38c:	add	fp, sp, #4
   1f390:	sub	sp, sp, #16
   1f394:	str	r0, [fp, #-16]
   1f398:	str	r1, [fp, #-20]	; 0xffffffec
   1f39c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f3a0:	ldr	r0, [fp, #-16]
   1f3a4:	bl	1b604 <_start@@Base+0x8c14>
   1f3a8:	mov	r2, r0
   1f3ac:	sub	r3, fp, #12
   1f3b0:	mov	r1, r2
   1f3b4:	mov	r0, r3
   1f3b8:	bl	1bed4 <_start@@Base+0x94e4>
   1f3bc:	sub	r3, fp, #12
   1f3c0:	ldm	r3, {r1, r2}
   1f3c4:	ldr	r0, [fp, #-16]
   1f3c8:	bl	1bf64 <_start@@Base+0x9574>
   1f3cc:	mov	r3, r0
   1f3d0:	mov	r0, r3
   1f3d4:	sub	sp, fp, #4
   1f3d8:	ldr	fp, [sp]
   1f3dc:	add	sp, sp, #4
   1f3e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f3e4:	str	fp, [sp, #-8]!
   1f3e8:	str	lr, [sp, #4]
   1f3ec:	add	fp, sp, #4
   1f3f0:	sub	sp, sp, #16
   1f3f4:	str	r0, [fp, #-16]
   1f3f8:	str	r1, [fp, #-20]	; 0xffffffec
   1f3fc:	sub	r3, fp, #12
   1f400:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f404:	mov	r0, r3
   1f408:	bl	1bf1c <_start@@Base+0x952c>
   1f40c:	sub	r3, fp, #12
   1f410:	ldm	r3, {r1, r2}
   1f414:	ldr	r0, [fp, #-16]
   1f418:	bl	1bf64 <_start@@Base+0x9574>
   1f41c:	mov	r3, r0
   1f420:	mov	r0, r3
   1f424:	sub	sp, fp, #4
   1f428:	ldr	fp, [sp]
   1f42c:	add	sp, sp, #4
   1f430:	pop	{pc}		; (ldr pc, [sp], #4)
   1f434:	str	fp, [sp, #-8]!
   1f438:	str	lr, [sp, #4]
   1f43c:	add	fp, sp, #4
   1f440:	sub	sp, sp, #16
   1f444:	str	r0, [fp, #-16]
   1f448:	str	r1, [fp, #-20]	; 0xffffffec
   1f44c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f450:	ldr	r0, [fp, #-16]
   1f454:	bl	1a9dc <_start@@Base+0x7fec>
   1f458:	mov	r2, r0
   1f45c:	sub	r3, fp, #12
   1f460:	mov	r1, r2
   1f464:	mov	r0, r3
   1f468:	bl	1bf1c <_start@@Base+0x952c>
   1f46c:	sub	r3, fp, #12
   1f470:	ldm	r3, {r1, r2}
   1f474:	ldr	r0, [fp, #-16]
   1f478:	bl	1bf64 <_start@@Base+0x9574>
   1f47c:	mov	r3, r0
   1f480:	mov	r0, r3
   1f484:	sub	sp, fp, #4
   1f488:	ldr	fp, [sp]
   1f48c:	add	sp, sp, #4
   1f490:	pop	{pc}		; (ldr pc, [sp], #4)
   1f494:	str	fp, [sp, #-8]!
   1f498:	str	lr, [sp, #4]
   1f49c:	add	fp, sp, #4
   1f4a0:	sub	sp, sp, #8
   1f4a4:	str	r0, [fp, #-8]
   1f4a8:	ldr	r3, [pc, #64]	; 1f4f0 <_start@@Base+0xcb00>
   1f4ac:	add	r3, pc, r3
   1f4b0:	mov	r1, r3
   1f4b4:	ldr	r0, [fp, #-8]
   1f4b8:	bl	1ab54 <_start@@Base+0x8164>
   1f4bc:	mov	r3, r0
   1f4c0:	cmp	r3, #0
   1f4c4:	bne	1f4d8 <_start@@Base+0xcae8>
   1f4c8:	ldr	r0, [fp, #-8]
   1f4cc:	bl	1bbf8 <_start@@Base+0x9208>
   1f4d0:	mov	r3, r0
   1f4d4:	b	1f4dc <_start@@Base+0xcaec>
   1f4d8:	mvn	r3, #0
   1f4dc:	mov	r0, r3
   1f4e0:	sub	sp, fp, #4
   1f4e4:	ldr	fp, [sp]
   1f4e8:	add	sp, sp, #4
   1f4ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4f0:	andeq	r3, r1, r8, asr #3
   1f4f4:	str	fp, [sp, #-8]!
   1f4f8:	str	lr, [sp, #4]
   1f4fc:	add	fp, sp, #4
   1f500:	sub	sp, sp, #8
   1f504:	str	r0, [fp, #-8]
   1f508:	ldr	r0, [fp, #-8]
   1f50c:	bl	1bc30 <_start@@Base+0x9240>
   1f510:	mov	r3, r0
   1f514:	mov	r1, r3
   1f518:	ldr	r0, [fp, #-8]
   1f51c:	bl	1abdc <_start@@Base+0x81ec>
   1f520:	mov	r3, r0
   1f524:	mov	r0, r3
   1f528:	sub	sp, fp, #4
   1f52c:	ldr	fp, [sp]
   1f530:	add	sp, sp, #4
   1f534:	pop	{pc}		; (ldr pc, [sp], #4)
   1f538:	str	fp, [sp, #-8]!
   1f53c:	str	lr, [sp, #4]
   1f540:	add	fp, sp, #4
   1f544:	sub	sp, sp, #8
   1f548:	str	r0, [fp, #-8]
   1f54c:	ldr	r3, [fp, #-8]
   1f550:	ldrb	r3, [r3, #12]
   1f554:	cmp	r3, #1
   1f558:	bne	1f578 <_start@@Base+0xcb88>
   1f55c:	ldr	r3, [pc, #44]	; 1f590 <_start@@Base+0xcba0>
   1f560:	add	r3, pc, r3
   1f564:	mov	r1, r3
   1f568:	ldr	r0, [fp, #-8]
   1f56c:	bl	317b8 <flatcc_verify_union_table@@Base>
   1f570:	mov	r3, r0
   1f574:	b	1f57c <_start@@Base+0xcb8c>
   1f578:	mov	r3, #0
   1f57c:	mov	r0, r3
   1f580:	sub	sp, fp, #4
   1f584:	ldr	fp, [sp]
   1f588:	add	sp, sp, #4
   1f58c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f590:	muleq	r0, ip, r2
   1f594:	str	fp, [sp, #-8]!
   1f598:	str	lr, [sp, #4]
   1f59c:	add	fp, sp, #4
   1f5a0:	sub	sp, sp, #8
   1f5a4:	str	r0, [fp, #-8]
   1f5a8:	ldr	r3, [fp, #-8]
   1f5ac:	ldrb	r3, [r3, #12]
   1f5b0:	sub	r3, r3, #1
   1f5b4:	cmp	r3, #3
   1f5b8:	addls	pc, pc, r3, lsl #2
   1f5bc:	b	1f640 <_start@@Base+0xcc50>
   1f5c0:	b	1f5d0 <_start@@Base+0xcbe0>
   1f5c4:	b	1f5ec <_start@@Base+0xcbfc>
   1f5c8:	b	1f608 <_start@@Base+0xcc18>
   1f5cc:	b	1f624 <_start@@Base+0xcc34>
   1f5d0:	ldr	r3, [pc, #128]	; 1f658 <_start@@Base+0xcc68>
   1f5d4:	add	r3, pc, r3
   1f5d8:	mov	r1, r3
   1f5dc:	ldr	r0, [fp, #-8]
   1f5e0:	bl	317b8 <flatcc_verify_union_table@@Base>
   1f5e4:	mov	r3, r0
   1f5e8:	b	1f644 <_start@@Base+0xcc54>
   1f5ec:	ldr	r3, [pc, #104]	; 1f65c <_start@@Base+0xcc6c>
   1f5f0:	add	r3, pc, r3
   1f5f4:	mov	r1, r3
   1f5f8:	ldr	r0, [fp, #-8]
   1f5fc:	bl	317b8 <flatcc_verify_union_table@@Base>
   1f600:	mov	r3, r0
   1f604:	b	1f644 <_start@@Base+0xcc54>
   1f608:	ldr	r3, [pc, #80]	; 1f660 <_start@@Base+0xcc70>
   1f60c:	add	r3, pc, r3
   1f610:	mov	r1, r3
   1f614:	ldr	r0, [fp, #-8]
   1f618:	bl	317b8 <flatcc_verify_union_table@@Base>
   1f61c:	mov	r3, r0
   1f620:	b	1f644 <_start@@Base+0xcc54>
   1f624:	ldr	r3, [pc, #56]	; 1f664 <_start@@Base+0xcc74>
   1f628:	add	r3, pc, r3
   1f62c:	mov	r1, r3
   1f630:	ldr	r0, [fp, #-8]
   1f634:	bl	317b8 <flatcc_verify_union_table@@Base>
   1f638:	mov	r3, r0
   1f63c:	b	1f644 <_start@@Base+0xcc54>
   1f640:	mov	r3, #0
   1f644:	mov	r0, r3
   1f648:	sub	sp, fp, #4
   1f64c:	ldr	fp, [sp]
   1f650:	add	sp, sp, #4
   1f654:	pop	{pc}		; (ldr pc, [sp], #4)
   1f658:	andeq	r0, r0, r8, asr #23
   1f65c:	andeq	r0, r0, r4, asr #7
   1f660:	andeq	r0, r0, r4, lsl r2
   1f664:	andeq	r0, r0, r8, asr #12
   1f668:	str	fp, [sp, #-8]!
   1f66c:	str	lr, [sp, #4]
   1f670:	add	fp, sp, #4
   1f674:	sub	sp, sp, #8
   1f678:	str	r0, [fp, #-8]
   1f67c:	ldr	r3, [fp, #-8]
   1f680:	ldrb	r3, [r3, #12]
   1f684:	cmp	r3, #9
   1f688:	beq	1f6f8 <_start@@Base+0xcd08>
   1f68c:	cmp	r3, #9
   1f690:	bgt	1f6a8 <_start@@Base+0xccb8>
   1f694:	cmp	r3, #2
   1f698:	beq	1f6c4 <_start@@Base+0xccd4>
   1f69c:	cmp	r3, #8
   1f6a0:	beq	1f6e0 <_start@@Base+0xccf0>
   1f6a4:	b	1f748 <_start@@Base+0xcd58>
   1f6a8:	cmp	r3, #11
   1f6ac:	beq	1f728 <_start@@Base+0xcd38>
   1f6b0:	cmp	r3, #11
   1f6b4:	blt	1f710 <_start@@Base+0xcd20>
   1f6b8:	cmp	r3, #255	; 0xff
   1f6bc:	beq	1f738 <_start@@Base+0xcd48>
   1f6c0:	b	1f748 <_start@@Base+0xcd58>
   1f6c4:	ldr	r3, [pc, #148]	; 1f760 <_start@@Base+0xcd70>
   1f6c8:	add	r3, pc, r3
   1f6cc:	mov	r1, r3
   1f6d0:	ldr	r0, [fp, #-8]
   1f6d4:	bl	317b8 <flatcc_verify_union_table@@Base>
   1f6d8:	mov	r3, r0
   1f6dc:	b	1f74c <_start@@Base+0xcd5c>
   1f6e0:	mov	r2, #2
   1f6e4:	mov	r1, #2
   1f6e8:	ldr	r0, [fp, #-8]
   1f6ec:	bl	31828 <flatcc_verify_union_struct@@Base>
   1f6f0:	mov	r3, r0
   1f6f4:	b	1f74c <_start@@Base+0xcd5c>
   1f6f8:	mov	r2, #4
   1f6fc:	mov	r1, #4
   1f700:	ldr	r0, [fp, #-8]
   1f704:	bl	31828 <flatcc_verify_union_struct@@Base>
   1f708:	mov	r3, r0
   1f70c:	b	1f74c <_start@@Base+0xcd5c>
   1f710:	mov	r2, #4
   1f714:	mov	r1, #4
   1f718:	ldr	r0, [fp, #-8]
   1f71c:	bl	31828 <flatcc_verify_union_struct@@Base>
   1f720:	mov	r3, r0
   1f724:	b	1f74c <_start@@Base+0xcd5c>
   1f728:	ldr	r0, [fp, #-8]
   1f72c:	bl	31888 <flatcc_verify_union_string@@Base>
   1f730:	mov	r3, r0
   1f734:	b	1f74c <_start@@Base+0xcd5c>
   1f738:	ldr	r0, [fp, #-8]
   1f73c:	bl	31888 <flatcc_verify_union_string@@Base>
   1f740:	mov	r3, r0
   1f744:	b	1f74c <_start@@Base+0xcd5c>
   1f748:	mov	r3, #0
   1f74c:	mov	r0, r3
   1f750:	sub	sp, fp, #4
   1f754:	ldr	fp, [sp]
   1f758:	add	sp, sp, #4
   1f75c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f760:	andeq	r1, r0, ip, lsl #11
   1f764:	str	fp, [sp, #-8]!
   1f768:	str	lr, [sp, #4]
   1f76c:	add	fp, sp, #4
   1f770:	sub	sp, sp, #16
   1f774:	str	r0, [fp, #-8]
   1f778:	str	r1, [fp, #-12]
   1f77c:	mov	r3, #16
   1f780:	str	r3, [sp]
   1f784:	mov	r3, #32
   1f788:	movw	r2, #16082	; 0x3ed2
   1f78c:	movt	r2, #43253	; 0xa8f5
   1f790:	ldr	r1, [fp, #-12]
   1f794:	ldr	r0, [fp, #-8]
   1f798:	bl	31bb0 <flatcc_verify_struct_as_typed_root@@Base>
   1f79c:	mov	r3, r0
   1f7a0:	mov	r0, r3
   1f7a4:	sub	sp, fp, #4
   1f7a8:	ldr	fp, [sp]
   1f7ac:	add	sp, sp, #4
   1f7b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f7b4:	str	fp, [sp, #-8]!
   1f7b8:	str	lr, [sp, #4]
   1f7bc:	add	fp, sp, #4
   1f7c0:	sub	sp, sp, #24
   1f7c4:	str	r0, [fp, #-8]
   1f7c8:	str	r1, [fp, #-12]
   1f7cc:	str	r2, [fp, #-16]
   1f7d0:	mov	r3, #16
   1f7d4:	str	r3, [sp]
   1f7d8:	mov	r3, #32
   1f7dc:	ldr	r2, [fp, #-16]
   1f7e0:	ldr	r1, [fp, #-12]
   1f7e4:	ldr	r0, [fp, #-8]
   1f7e8:	bl	31bb0 <flatcc_verify_struct_as_typed_root@@Base>
   1f7ec:	mov	r3, r0
   1f7f0:	mov	r0, r3
   1f7f4:	sub	sp, fp, #4
   1f7f8:	ldr	fp, [sp]
   1f7fc:	add	sp, sp, #4
   1f800:	pop	{pc}		; (ldr pc, [sp], #4)
   1f804:	push	{fp}		; (str fp, [sp, #-4]!)
   1f808:	add	fp, sp, #0
   1f80c:	sub	sp, sp, #12
   1f810:	str	r0, [fp, #-8]
   1f814:	mov	r3, #0
   1f818:	mov	r0, r3
   1f81c:	add	sp, fp, #0
   1f820:	pop	{fp}		; (ldr fp, [sp], #4)
   1f824:	bx	lr
   1f828:	push	{fp}		; (str fp, [sp, #-4]!)
   1f82c:	add	fp, sp, #0
   1f830:	sub	sp, sp, #12
   1f834:	str	r0, [fp, #-8]
   1f838:	mov	r3, #0
   1f83c:	mov	r0, r3
   1f840:	add	sp, fp, #0
   1f844:	pop	{fp}		; (ldr fp, [sp], #4)
   1f848:	bx	lr
   1f84c:	push	{fp}		; (str fp, [sp, #-4]!)
   1f850:	add	fp, sp, #0
   1f854:	sub	sp, sp, #12
   1f858:	str	r0, [fp, #-8]
   1f85c:	mov	r3, #0
   1f860:	mov	r0, r3
   1f864:	add	sp, fp, #0
   1f868:	pop	{fp}		; (ldr fp, [sp], #4)
   1f86c:	bx	lr
   1f870:	str	fp, [sp, #-8]!
   1f874:	str	lr, [sp, #4]
   1f878:	add	fp, sp, #4
   1f87c:	sub	sp, sp, #16
   1f880:	str	r0, [fp, #-16]
   1f884:	mov	r3, #1
   1f888:	mov	r2, #0
   1f88c:	mov	r1, #0
   1f890:	ldr	r0, [fp, #-16]
   1f894:	bl	31310 <flatcc_verify_field@@Base>
   1f898:	str	r0, [fp, #-8]
   1f89c:	ldr	r3, [fp, #-8]
   1f8a0:	cmp	r3, #0
   1f8a4:	beq	1f8b0 <_start@@Base+0xcec0>
   1f8a8:	ldr	r3, [fp, #-8]
   1f8ac:	b	1f8b4 <_start@@Base+0xcec4>
   1f8b0:	mov	r3, #0
   1f8b4:	mov	r0, r3
   1f8b8:	sub	sp, fp, #4
   1f8bc:	ldr	fp, [sp]
   1f8c0:	add	sp, sp, #4
   1f8c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f8c8:	str	fp, [sp, #-8]!
   1f8cc:	str	lr, [sp, #4]
   1f8d0:	add	fp, sp, #4
   1f8d4:	sub	sp, sp, #8
   1f8d8:	str	r0, [fp, #-8]
   1f8dc:	str	r1, [fp, #-12]
   1f8e0:	ldr	r3, [pc, #44]	; 1f914 <_start@@Base+0xcf24>
   1f8e4:	add	r3, pc, r3
   1f8e8:	ldr	r2, [pc, #40]	; 1f918 <_start@@Base+0xcf28>
   1f8ec:	add	r2, pc, r2
   1f8f0:	ldr	r1, [fp, #-12]
   1f8f4:	ldr	r0, [fp, #-8]
   1f8f8:	bl	31c44 <flatcc_verify_table_as_root@@Base>
   1f8fc:	mov	r3, r0
   1f900:	mov	r0, r3
   1f904:	sub	sp, fp, #4
   1f908:	ldr	fp, [sp]
   1f90c:	add	sp, sp, #4
   1f910:	pop	{pc}		; (ldr pc, [sp], #4)
   1f914:			; <UNDEFINED> instruction: 0xffffff84
   1f918:	andeq	r3, r1, r0, ror #8
   1f91c:	str	fp, [sp, #-8]!
   1f920:	str	lr, [sp, #4]
   1f924:	add	fp, sp, #4
   1f928:	sub	sp, sp, #16
   1f92c:	str	r0, [fp, #-8]
   1f930:	str	r1, [fp, #-12]
   1f934:	str	r2, [fp, #-16]
   1f938:	ldr	r3, [pc, #40]	; 1f968 <_start@@Base+0xcf78>
   1f93c:	add	r3, pc, r3
   1f940:	ldr	r2, [fp, #-16]
   1f944:	ldr	r1, [fp, #-12]
   1f948:	ldr	r0, [fp, #-8]
   1f94c:	bl	31c44 <flatcc_verify_table_as_root@@Base>
   1f950:	mov	r3, r0
   1f954:	mov	r0, r3
   1f958:	sub	sp, fp, #4
   1f95c:	ldr	fp, [sp]
   1f960:	add	sp, sp, #4
   1f964:	pop	{pc}		; (ldr pc, [sp], #4)
   1f968:			; <UNDEFINED> instruction: 0xffffff2c
   1f96c:	str	fp, [sp, #-8]!
   1f970:	str	lr, [sp, #4]
   1f974:	add	fp, sp, #4
   1f978:	sub	sp, sp, #16
   1f97c:	str	r0, [fp, #-8]
   1f980:	str	r1, [fp, #-12]
   1f984:	str	r2, [fp, #-16]
   1f988:	ldr	r3, [pc, #40]	; 1f9b8 <_start@@Base+0xcfc8>
   1f98c:	add	r3, pc, r3
   1f990:	ldr	r2, [fp, #-16]
   1f994:	ldr	r1, [fp, #-12]
   1f998:	ldr	r0, [fp, #-8]
   1f99c:	bl	31ce4 <flatcc_verify_table_as_typed_root@@Base>
   1f9a0:	mov	r3, r0
   1f9a4:	mov	r0, r3
   1f9a8:	sub	sp, fp, #4
   1f9ac:	ldr	fp, [sp]
   1f9b0:	add	sp, sp, #4
   1f9b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f9b8:			; <UNDEFINED> instruction: 0xfffffedc
   1f9bc:	str	fp, [sp, #-8]!
   1f9c0:	str	lr, [sp, #4]
   1f9c4:	add	fp, sp, #4
   1f9c8:	sub	sp, sp, #16
   1f9cc:	str	r0, [fp, #-16]
   1f9d0:	mov	r3, #1
   1f9d4:	mov	r2, #1
   1f9d8:	mov	r1, #0
   1f9dc:	ldr	r0, [fp, #-16]
   1f9e0:	bl	31310 <flatcc_verify_field@@Base>
   1f9e4:	str	r0, [fp, #-8]
   1f9e8:	ldr	r3, [fp, #-8]
   1f9ec:	cmp	r3, #0
   1f9f0:	beq	1f9fc <_start@@Base+0xd00c>
   1f9f4:	ldr	r3, [fp, #-8]
   1f9f8:	b	1fa84 <_start@@Base+0xd094>
   1f9fc:	mov	r3, #1
   1fa00:	mov	r2, #1
   1fa04:	mov	r1, #1
   1fa08:	ldr	r0, [fp, #-16]
   1fa0c:	bl	31310 <flatcc_verify_field@@Base>
   1fa10:	str	r0, [fp, #-8]
   1fa14:	ldr	r3, [fp, #-8]
   1fa18:	cmp	r3, #0
   1fa1c:	beq	1fa28 <_start@@Base+0xd038>
   1fa20:	ldr	r3, [fp, #-8]
   1fa24:	b	1fa84 <_start@@Base+0xd094>
   1fa28:	mov	r3, #1
   1fa2c:	mov	r2, #1
   1fa30:	mov	r1, #2
   1fa34:	ldr	r0, [fp, #-16]
   1fa38:	bl	31310 <flatcc_verify_field@@Base>
   1fa3c:	str	r0, [fp, #-8]
   1fa40:	ldr	r3, [fp, #-8]
   1fa44:	cmp	r3, #0
   1fa48:	beq	1fa54 <_start@@Base+0xd064>
   1fa4c:	ldr	r3, [fp, #-8]
   1fa50:	b	1fa84 <_start@@Base+0xd094>
   1fa54:	mov	r3, #1
   1fa58:	mov	r2, #1
   1fa5c:	mov	r1, #3
   1fa60:	ldr	r0, [fp, #-16]
   1fa64:	bl	31310 <flatcc_verify_field@@Base>
   1fa68:	str	r0, [fp, #-8]
   1fa6c:	ldr	r3, [fp, #-8]
   1fa70:	cmp	r3, #0
   1fa74:	beq	1fa80 <_start@@Base+0xd090>
   1fa78:	ldr	r3, [fp, #-8]
   1fa7c:	b	1fa84 <_start@@Base+0xd094>
   1fa80:	mov	r3, #0
   1fa84:	mov	r0, r3
   1fa88:	sub	sp, fp, #4
   1fa8c:	ldr	fp, [sp]
   1fa90:	add	sp, sp, #4
   1fa94:	pop	{pc}		; (ldr pc, [sp], #4)
   1fa98:	str	fp, [sp, #-8]!
   1fa9c:	str	lr, [sp, #4]
   1faa0:	add	fp, sp, #4
   1faa4:	sub	sp, sp, #16
   1faa8:	str	r0, [fp, #-16]
   1faac:	mov	r3, #1
   1fab0:	mov	r2, #0
   1fab4:	mov	r1, #0
   1fab8:	ldr	r0, [fp, #-16]
   1fabc:	bl	31310 <flatcc_verify_field@@Base>
   1fac0:	str	r0, [fp, #-8]
   1fac4:	ldr	r3, [fp, #-8]
   1fac8:	cmp	r3, #0
   1facc:	beq	1fad8 <_start@@Base+0xd0e8>
   1fad0:	ldr	r3, [fp, #-8]
   1fad4:	b	1fbb8 <_start@@Base+0xd1c8>
   1fad8:	mov	r3, #8
   1fadc:	mov	r2, #8
   1fae0:	mov	r1, #1
   1fae4:	ldr	r0, [fp, #-16]
   1fae8:	bl	31310 <flatcc_verify_field@@Base>
   1faec:	str	r0, [fp, #-8]
   1faf0:	ldr	r3, [fp, #-8]
   1faf4:	cmp	r3, #0
   1faf8:	beq	1fb04 <_start@@Base+0xd114>
   1fafc:	ldr	r3, [fp, #-8]
   1fb00:	b	1fbb8 <_start@@Base+0xd1c8>
   1fb04:	mov	r3, #8
   1fb08:	mov	r2, #8
   1fb0c:	mov	r1, #2
   1fb10:	ldr	r0, [fp, #-16]
   1fb14:	bl	31310 <flatcc_verify_field@@Base>
   1fb18:	str	r0, [fp, #-8]
   1fb1c:	ldr	r3, [fp, #-8]
   1fb20:	cmp	r3, #0
   1fb24:	beq	1fb30 <_start@@Base+0xd140>
   1fb28:	ldr	r3, [fp, #-8]
   1fb2c:	b	1fbb8 <_start@@Base+0xd1c8>
   1fb30:	mov	r3, #4
   1fb34:	mov	r2, #4
   1fb38:	mov	r1, #3
   1fb3c:	ldr	r0, [fp, #-16]
   1fb40:	bl	31310 <flatcc_verify_field@@Base>
   1fb44:	str	r0, [fp, #-8]
   1fb48:	ldr	r3, [fp, #-8]
   1fb4c:	cmp	r3, #0
   1fb50:	beq	1fb5c <_start@@Base+0xd16c>
   1fb54:	ldr	r3, [fp, #-8]
   1fb58:	b	1fbb8 <_start@@Base+0xd1c8>
   1fb5c:	mov	r3, #8
   1fb60:	mov	r2, #8
   1fb64:	mov	r1, #4
   1fb68:	ldr	r0, [fp, #-16]
   1fb6c:	bl	31310 <flatcc_verify_field@@Base>
   1fb70:	str	r0, [fp, #-8]
   1fb74:	ldr	r3, [fp, #-8]
   1fb78:	cmp	r3, #0
   1fb7c:	beq	1fb88 <_start@@Base+0xd198>
   1fb80:	ldr	r3, [fp, #-8]
   1fb84:	b	1fbb8 <_start@@Base+0xd1c8>
   1fb88:	mov	r3, #8
   1fb8c:	mov	r2, #8
   1fb90:	mov	r1, #5
   1fb94:	ldr	r0, [fp, #-16]
   1fb98:	bl	31310 <flatcc_verify_field@@Base>
   1fb9c:	str	r0, [fp, #-8]
   1fba0:	ldr	r3, [fp, #-8]
   1fba4:	cmp	r3, #0
   1fba8:	beq	1fbb4 <_start@@Base+0xd1c4>
   1fbac:	ldr	r3, [fp, #-8]
   1fbb0:	b	1fbb8 <_start@@Base+0xd1c8>
   1fbb4:	mov	r3, #0
   1fbb8:	mov	r0, r3
   1fbbc:	sub	sp, fp, #4
   1fbc0:	ldr	fp, [sp]
   1fbc4:	add	sp, sp, #4
   1fbc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1fbcc:	str	fp, [sp, #-8]!
   1fbd0:	str	lr, [sp, #4]
   1fbd4:	add	fp, sp, #4
   1fbd8:	sub	sp, sp, #16
   1fbdc:	str	r0, [fp, #-16]
   1fbe0:	mov	r2, #0
   1fbe4:	mov	r1, #0
   1fbe8:	ldr	r0, [fp, #-16]
   1fbec:	bl	313a0 <flatcc_verify_string_field@@Base>
   1fbf0:	str	r0, [fp, #-8]
   1fbf4:	ldr	r3, [fp, #-8]
   1fbf8:	cmp	r3, #0
   1fbfc:	beq	1fc08 <_start@@Base+0xd218>
   1fc00:	ldr	r3, [fp, #-8]
   1fc04:	b	1fc64 <_start@@Base+0xd274>
   1fc08:	mov	r3, #8
   1fc0c:	mov	r2, #8
   1fc10:	mov	r1, #1
   1fc14:	ldr	r0, [fp, #-16]
   1fc18:	bl	31310 <flatcc_verify_field@@Base>
   1fc1c:	str	r0, [fp, #-8]
   1fc20:	ldr	r3, [fp, #-8]
   1fc24:	cmp	r3, #0
   1fc28:	beq	1fc34 <_start@@Base+0xd244>
   1fc2c:	ldr	r3, [fp, #-8]
   1fc30:	b	1fc64 <_start@@Base+0xd274>
   1fc34:	mov	r3, #2
   1fc38:	mov	r2, #2
   1fc3c:	mov	r1, #2
   1fc40:	ldr	r0, [fp, #-16]
   1fc44:	bl	31310 <flatcc_verify_field@@Base>
   1fc48:	str	r0, [fp, #-8]
   1fc4c:	ldr	r3, [fp, #-8]
   1fc50:	cmp	r3, #0
   1fc54:	beq	1fc60 <_start@@Base+0xd270>
   1fc58:	ldr	r3, [fp, #-8]
   1fc5c:	b	1fc64 <_start@@Base+0xd274>
   1fc60:	mov	r3, #0
   1fc64:	mov	r0, r3
   1fc68:	sub	sp, fp, #4
   1fc6c:	ldr	fp, [sp]
   1fc70:	add	sp, sp, #4
   1fc74:	pop	{pc}		; (ldr pc, [sp], #4)
   1fc78:	str	fp, [sp, #-8]!
   1fc7c:	str	lr, [sp, #4]
   1fc80:	add	fp, sp, #4
   1fc84:	sub	sp, sp, #16
   1fc88:	str	r0, [fp, #-16]
   1fc8c:	ldr	r3, [pc, #160]	; 1fd34 <_start@@Base+0xd344>
   1fc90:	add	r3, pc, r3
   1fc94:	mov	r2, #0
   1fc98:	mov	r1, #0
   1fc9c:	ldr	r0, [fp, #-16]
   1fca0:	bl	31600 <flatcc_verify_table_field@@Base>
   1fca4:	str	r0, [fp, #-8]
   1fca8:	ldr	r3, [fp, #-8]
   1fcac:	cmp	r3, #0
   1fcb0:	beq	1fcbc <_start@@Base+0xd2cc>
   1fcb4:	ldr	r3, [fp, #-8]
   1fcb8:	b	1fd20 <_start@@Base+0xd330>
   1fcbc:	ldr	r3, [pc, #116]	; 1fd38 <_start@@Base+0xd348>
   1fcc0:	add	r3, pc, r3
   1fcc4:	mov	r2, #0
   1fcc8:	mov	r1, #1
   1fccc:	ldr	r0, [fp, #-16]
   1fcd0:	bl	31600 <flatcc_verify_table_field@@Base>
   1fcd4:	str	r0, [fp, #-8]
   1fcd8:	ldr	r3, [fp, #-8]
   1fcdc:	cmp	r3, #0
   1fce0:	beq	1fcec <_start@@Base+0xd2fc>
   1fce4:	ldr	r3, [fp, #-8]
   1fce8:	b	1fd20 <_start@@Base+0xd330>
   1fcec:	ldr	r3, [pc, #72]	; 1fd3c <_start@@Base+0xd34c>
   1fcf0:	add	r3, pc, r3
   1fcf4:	mov	r2, #0
   1fcf8:	mov	r1, #3
   1fcfc:	ldr	r0, [fp, #-16]
   1fd00:	bl	32278 <flatcc_verify_union_vector_field@@Base>
   1fd04:	str	r0, [fp, #-8]
   1fd08:	ldr	r3, [fp, #-8]
   1fd0c:	cmp	r3, #0
   1fd10:	beq	1fd1c <_start@@Base+0xd32c>
   1fd14:	ldr	r3, [fp, #-8]
   1fd18:	b	1fd20 <_start@@Base+0xd330>
   1fd1c:	mov	r3, #0
   1fd20:	mov	r0, r3
   1fd24:	sub	sp, fp, #4
   1fd28:	ldr	fp, [sp]
   1fd2c:	add	sp, sp, #4
   1fd30:	pop	{pc}		; (ldr pc, [sp], #4)
   1fd34:	andeq	r0, r0, r8, lsr #1
   1fd38:	andeq	r0, r0, ip, ror #31
   1fd3c:			; <UNDEFINED> instruction: 0xfffff89c
   1fd40:	str	fp, [sp, #-8]!
   1fd44:	str	lr, [sp, #4]
   1fd48:	add	fp, sp, #4
   1fd4c:	sub	sp, sp, #16
   1fd50:	str	r0, [fp, #-16]
   1fd54:	ldr	r3, [pc, #160]	; 1fdfc <_start@@Base+0xd40c>
   1fd58:	add	r3, pc, r3
   1fd5c:	mov	r2, #0
   1fd60:	mov	r1, #0
   1fd64:	ldr	r0, [fp, #-16]
   1fd68:	bl	31600 <flatcc_verify_table_field@@Base>
   1fd6c:	str	r0, [fp, #-8]
   1fd70:	ldr	r3, [fp, #-8]
   1fd74:	cmp	r3, #0
   1fd78:	beq	1fd84 <_start@@Base+0xd394>
   1fd7c:	ldr	r3, [fp, #-8]
   1fd80:	b	1fde8 <_start@@Base+0xd3f8>
   1fd84:	ldr	r3, [pc, #116]	; 1fe00 <_start@@Base+0xd410>
   1fd88:	add	r3, pc, r3
   1fd8c:	mov	r2, #0
   1fd90:	mov	r1, #1
   1fd94:	ldr	r0, [fp, #-16]
   1fd98:	bl	31600 <flatcc_verify_table_field@@Base>
   1fd9c:	str	r0, [fp, #-8]
   1fda0:	ldr	r3, [fp, #-8]
   1fda4:	cmp	r3, #0
   1fda8:	beq	1fdb4 <_start@@Base+0xd3c4>
   1fdac:	ldr	r3, [fp, #-8]
   1fdb0:	b	1fde8 <_start@@Base+0xd3f8>
   1fdb4:	ldr	r3, [pc, #72]	; 1fe04 <_start@@Base+0xd414>
   1fdb8:	add	r3, pc, r3
   1fdbc:	mov	r2, #0
   1fdc0:	mov	r1, #2
   1fdc4:	ldr	r0, [fp, #-16]
   1fdc8:	bl	31600 <flatcc_verify_table_field@@Base>
   1fdcc:	str	r0, [fp, #-8]
   1fdd0:	ldr	r3, [fp, #-8]
   1fdd4:	cmp	r3, #0
   1fdd8:	beq	1fde4 <_start@@Base+0xd3f4>
   1fddc:	ldr	r3, [fp, #-8]
   1fde0:	b	1fde8 <_start@@Base+0xd3f8>
   1fde4:	mov	r3, #0
   1fde8:	mov	r0, r3
   1fdec:	sub	sp, fp, #4
   1fdf0:	ldr	fp, [sp]
   1fdf4:	add	sp, sp, #4
   1fdf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1fdfc:	andeq	r0, r0, r8, lsr #1
   1fe00:	andeq	r0, r0, r4, lsr #4
   1fe04:	andeq	r0, r0, r8, ror r2
   1fe08:	str	fp, [sp, #-8]!
   1fe0c:	str	lr, [sp, #4]
   1fe10:	add	fp, sp, #4
   1fe14:	sub	sp, sp, #16
   1fe18:	str	r0, [fp, #-16]
   1fe1c:	mov	r2, #0
   1fe20:	mov	r1, #0
   1fe24:	ldr	r0, [fp, #-16]
   1fe28:	bl	313a0 <flatcc_verify_string_field@@Base>
   1fe2c:	str	r0, [fp, #-8]
   1fe30:	ldr	r3, [fp, #-8]
   1fe34:	cmp	r3, #0
   1fe38:	beq	1fe44 <_start@@Base+0xd454>
   1fe3c:	ldr	r3, [fp, #-8]
   1fe40:	b	1ffa0 <_start@@Base+0xd5b0>
   1fe44:	mov	r3, #4
   1fe48:	mov	r2, #4
   1fe4c:	mov	r1, #1
   1fe50:	ldr	r0, [fp, #-16]
   1fe54:	bl	31310 <flatcc_verify_field@@Base>
   1fe58:	str	r0, [fp, #-8]
   1fe5c:	ldr	r3, [fp, #-8]
   1fe60:	cmp	r3, #0
   1fe64:	beq	1fe70 <_start@@Base+0xd480>
   1fe68:	ldr	r3, [fp, #-8]
   1fe6c:	b	1ffa0 <_start@@Base+0xd5b0>
   1fe70:	mov	r2, #0
   1fe74:	mov	r1, #2
   1fe78:	ldr	r0, [fp, #-16]
   1fe7c:	bl	313a0 <flatcc_verify_string_field@@Base>
   1fe80:	str	r0, [fp, #-8]
   1fe84:	ldr	r3, [fp, #-8]
   1fe88:	cmp	r3, #0
   1fe8c:	beq	1fe98 <_start@@Base+0xd4a8>
   1fe90:	ldr	r3, [fp, #-8]
   1fe94:	b	1ffa0 <_start@@Base+0xd5b0>
   1fe98:	mov	r3, #8
   1fe9c:	mov	r2, #8
   1fea0:	mov	r1, #3
   1fea4:	ldr	r0, [fp, #-16]
   1fea8:	bl	31310 <flatcc_verify_field@@Base>
   1feac:	str	r0, [fp, #-8]
   1feb0:	ldr	r3, [fp, #-8]
   1feb4:	cmp	r3, #0
   1feb8:	beq	1fec4 <_start@@Base+0xd4d4>
   1febc:	ldr	r3, [fp, #-8]
   1fec0:	b	1ffa0 <_start@@Base+0xd5b0>
   1fec4:	mov	r2, #0
   1fec8:	mov	r1, #4
   1fecc:	ldr	r0, [fp, #-16]
   1fed0:	bl	313a0 <flatcc_verify_string_field@@Base>
   1fed4:	str	r0, [fp, #-8]
   1fed8:	ldr	r3, [fp, #-8]
   1fedc:	cmp	r3, #0
   1fee0:	beq	1feec <_start@@Base+0xd4fc>
   1fee4:	ldr	r3, [fp, #-8]
   1fee8:	b	1ffa0 <_start@@Base+0xd5b0>
   1feec:	mov	r3, #8
   1fef0:	mov	r2, #8
   1fef4:	mov	r1, #5
   1fef8:	ldr	r0, [fp, #-16]
   1fefc:	bl	31310 <flatcc_verify_field@@Base>
   1ff00:	str	r0, [fp, #-8]
   1ff04:	ldr	r3, [fp, #-8]
   1ff08:	cmp	r3, #0
   1ff0c:	beq	1ff18 <_start@@Base+0xd528>
   1ff10:	ldr	r3, [fp, #-8]
   1ff14:	b	1ffa0 <_start@@Base+0xd5b0>
   1ff18:	mov	r3, #4
   1ff1c:	mov	r2, #4
   1ff20:	mov	r1, #6
   1ff24:	ldr	r0, [fp, #-16]
   1ff28:	bl	31310 <flatcc_verify_field@@Base>
   1ff2c:	str	r0, [fp, #-8]
   1ff30:	ldr	r3, [fp, #-8]
   1ff34:	cmp	r3, #0
   1ff38:	beq	1ff44 <_start@@Base+0xd554>
   1ff3c:	ldr	r3, [fp, #-8]
   1ff40:	b	1ffa0 <_start@@Base+0xd5b0>
   1ff44:	mov	r3, #8
   1ff48:	mov	r2, #8
   1ff4c:	mov	r1, #7
   1ff50:	ldr	r0, [fp, #-16]
   1ff54:	bl	31310 <flatcc_verify_field@@Base>
   1ff58:	str	r0, [fp, #-8]
   1ff5c:	ldr	r3, [fp, #-8]
   1ff60:	cmp	r3, #0
   1ff64:	beq	1ff70 <_start@@Base+0xd580>
   1ff68:	ldr	r3, [fp, #-8]
   1ff6c:	b	1ffa0 <_start@@Base+0xd5b0>
   1ff70:	mov	r3, #4
   1ff74:	mov	r2, #4
   1ff78:	mov	r1, #8
   1ff7c:	ldr	r0, [fp, #-16]
   1ff80:	bl	31310 <flatcc_verify_field@@Base>
   1ff84:	str	r0, [fp, #-8]
   1ff88:	ldr	r3, [fp, #-8]
   1ff8c:	cmp	r3, #0
   1ff90:	beq	1ff9c <_start@@Base+0xd5ac>
   1ff94:	ldr	r3, [fp, #-8]
   1ff98:	b	1ffa0 <_start@@Base+0xd5b0>
   1ff9c:	mov	r3, #0
   1ffa0:	mov	r0, r3
   1ffa4:	sub	sp, fp, #4
   1ffa8:	ldr	fp, [sp]
   1ffac:	add	sp, sp, #4
   1ffb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1ffb4:	str	fp, [sp, #-8]!
   1ffb8:	str	lr, [sp, #4]
   1ffbc:	add	fp, sp, #4
   1ffc0:	sub	sp, sp, #16
   1ffc4:	str	r0, [fp, #-16]
   1ffc8:	mov	r3, #8
   1ffcc:	mov	r2, #8
   1ffd0:	mov	r1, #0
   1ffd4:	ldr	r0, [fp, #-16]
   1ffd8:	bl	31310 <flatcc_verify_field@@Base>
   1ffdc:	str	r0, [fp, #-8]
   1ffe0:	ldr	r3, [fp, #-8]
   1ffe4:	cmp	r3, #0
   1ffe8:	beq	1fff4 <_start@@Base+0xd604>
   1ffec:	ldr	r3, [fp, #-8]
   1fff0:	b	20024 <_start@@Base+0xd634>
   1fff4:	mov	r3, #4
   1fff8:	mov	r2, #4
   1fffc:	mov	r1, #1
   20000:	ldr	r0, [fp, #-16]
   20004:	bl	31310 <flatcc_verify_field@@Base>
   20008:	str	r0, [fp, #-8]
   2000c:	ldr	r3, [fp, #-8]
   20010:	cmp	r3, #0
   20014:	beq	20020 <_start@@Base+0xd630>
   20018:	ldr	r3, [fp, #-8]
   2001c:	b	20024 <_start@@Base+0xd634>
   20020:	mov	r3, #0
   20024:	mov	r0, r3
   20028:	sub	sp, fp, #4
   2002c:	ldr	fp, [sp]
   20030:	add	sp, sp, #4
   20034:	pop	{pc}		; (ldr pc, [sp], #4)
   20038:	str	fp, [sp, #-8]!
   2003c:	str	lr, [sp, #4]
   20040:	add	fp, sp, #4
   20044:	sub	sp, sp, #16
   20048:	str	r0, [fp, #-16]
   2004c:	mov	r3, #8
   20050:	mov	r2, #8
   20054:	mov	r1, #0
   20058:	ldr	r0, [fp, #-16]
   2005c:	bl	31310 <flatcc_verify_field@@Base>
   20060:	str	r0, [fp, #-8]
   20064:	ldr	r3, [fp, #-8]
   20068:	cmp	r3, #0
   2006c:	beq	20078 <_start@@Base+0xd688>
   20070:	ldr	r3, [fp, #-8]
   20074:	b	200a8 <_start@@Base+0xd6b8>
   20078:	mov	r3, #4
   2007c:	mov	r2, #4
   20080:	mov	r1, #1
   20084:	ldr	r0, [fp, #-16]
   20088:	bl	31310 <flatcc_verify_field@@Base>
   2008c:	str	r0, [fp, #-8]
   20090:	ldr	r3, [fp, #-8]
   20094:	cmp	r3, #0
   20098:	beq	200a4 <_start@@Base+0xd6b4>
   2009c:	ldr	r3, [fp, #-8]
   200a0:	b	200a8 <_start@@Base+0xd6b8>
   200a4:	mov	r3, #0
   200a8:	mov	r0, r3
   200ac:	sub	sp, fp, #4
   200b0:	ldr	fp, [sp]
   200b4:	add	sp, sp, #4
   200b8:	pop	{pc}		; (ldr pc, [sp], #4)
   200bc:	str	fp, [sp, #-8]!
   200c0:	str	lr, [sp, #4]
   200c4:	add	fp, sp, #4
   200c8:	sub	sp, sp, #24
   200cc:	str	r0, [fp, #-16]
   200d0:	mvn	r3, #0
   200d4:	str	r3, [sp, #4]
   200d8:	mov	r3, #1
   200dc:	str	r3, [sp]
   200e0:	mov	r3, #1
   200e4:	mov	r2, #0
   200e8:	mov	r1, #0
   200ec:	ldr	r0, [fp, #-16]
   200f0:	bl	31460 <flatcc_verify_vector_field@@Base>
   200f4:	str	r0, [fp, #-8]
   200f8:	ldr	r3, [fp, #-8]
   200fc:	cmp	r3, #0
   20100:	beq	2010c <_start@@Base+0xd71c>
   20104:	ldr	r3, [fp, #-8]
   20108:	b	2018c <_start@@Base+0xd79c>
   2010c:	mvn	r3, #0
   20110:	str	r3, [sp, #4]
   20114:	mov	r3, #1
   20118:	str	r3, [sp]
   2011c:	mov	r3, #1
   20120:	mov	r2, #0
   20124:	mov	r1, #1
   20128:	ldr	r0, [fp, #-16]
   2012c:	bl	31460 <flatcc_verify_vector_field@@Base>
   20130:	str	r0, [fp, #-8]
   20134:	ldr	r3, [fp, #-8]
   20138:	cmp	r3, #0
   2013c:	beq	20148 <_start@@Base+0xd758>
   20140:	ldr	r3, [fp, #-8]
   20144:	b	2018c <_start@@Base+0xd79c>
   20148:	ldr	r3, [pc, #80]	; 201a0 <_start@@Base+0xd7b0>
   2014c:	add	r3, pc, r3
   20150:	str	r3, [sp, #4]
   20154:	mov	r3, #1
   20158:	str	r3, [sp]
   2015c:	mov	r3, #0
   20160:	mov	r2, #0
   20164:	mov	r1, #2
   20168:	ldr	r0, [fp, #-16]
   2016c:	bl	31ea0 <flatcc_verify_table_as_nested_root@@Base>
   20170:	str	r0, [fp, #-8]
   20174:	ldr	r3, [fp, #-8]
   20178:	cmp	r3, #0
   2017c:	beq	20188 <_start@@Base+0xd798>
   20180:	ldr	r3, [fp, #-8]
   20184:	b	2018c <_start@@Base+0xd79c>
   20188:	mov	r3, #0
   2018c:	mov	r0, r3
   20190:	sub	sp, fp, #4
   20194:	ldr	fp, [sp]
   20198:	add	sp, sp, #4
   2019c:	pop	{pc}		; (ldr pc, [sp], #4)
   201a0:	andeq	r0, r0, r0, asr r0
   201a4:	str	fp, [sp, #-8]!
   201a8:	str	lr, [sp, #4]
   201ac:	add	fp, sp, #4
   201b0:	sub	sp, sp, #24
   201b4:	str	r0, [fp, #-16]
   201b8:	mov	r3, #16
   201bc:	mov	r2, #32
   201c0:	mov	r1, #0
   201c4:	ldr	r0, [fp, #-16]
   201c8:	bl	31310 <flatcc_verify_field@@Base>
   201cc:	str	r0, [fp, #-8]
   201d0:	ldr	r3, [fp, #-8]
   201d4:	cmp	r3, #0
   201d8:	beq	201e4 <_start@@Base+0xd7f4>
   201dc:	ldr	r3, [fp, #-8]
   201e0:	b	20834 <_start@@Base+0xde44>
   201e4:	mov	r3, #2
   201e8:	mov	r2, #2
   201ec:	mov	r1, #2
   201f0:	ldr	r0, [fp, #-16]
   201f4:	bl	31310 <flatcc_verify_field@@Base>
   201f8:	str	r0, [fp, #-8]
   201fc:	ldr	r3, [fp, #-8]
   20200:	cmp	r3, #0
   20204:	beq	20210 <_start@@Base+0xd820>
   20208:	ldr	r3, [fp, #-8]
   2020c:	b	20834 <_start@@Base+0xde44>
   20210:	mov	r3, #2
   20214:	mov	r2, #2
   20218:	mov	r1, #1
   2021c:	ldr	r0, [fp, #-16]
   20220:	bl	31310 <flatcc_verify_field@@Base>
   20224:	str	r0, [fp, #-8]
   20228:	ldr	r3, [fp, #-8]
   2022c:	cmp	r3, #0
   20230:	beq	2023c <_start@@Base+0xd84c>
   20234:	ldr	r3, [fp, #-8]
   20238:	b	20834 <_start@@Base+0xde44>
   2023c:	mov	r2, #1
   20240:	mov	r1, #3
   20244:	ldr	r0, [fp, #-16]
   20248:	bl	313a0 <flatcc_verify_string_field@@Base>
   2024c:	str	r0, [fp, #-8]
   20250:	ldr	r3, [fp, #-8]
   20254:	cmp	r3, #0
   20258:	beq	20264 <_start@@Base+0xd874>
   2025c:	ldr	r3, [fp, #-8]
   20260:	b	20834 <_start@@Base+0xde44>
   20264:	mov	r3, #1
   20268:	mov	r2, #1
   2026c:	mov	r1, #6
   20270:	ldr	r0, [fp, #-16]
   20274:	bl	31310 <flatcc_verify_field@@Base>
   20278:	str	r0, [fp, #-8]
   2027c:	ldr	r3, [fp, #-8]
   20280:	cmp	r3, #0
   20284:	beq	20290 <_start@@Base+0xd8a0>
   20288:	ldr	r3, [fp, #-8]
   2028c:	b	20834 <_start@@Base+0xde44>
   20290:	mvn	r3, #0
   20294:	str	r3, [sp, #4]
   20298:	mov	r3, #1
   2029c:	str	r3, [sp]
   202a0:	mov	r3, #1
   202a4:	mov	r2, #0
   202a8:	mov	r1, #5
   202ac:	ldr	r0, [fp, #-16]
   202b0:	bl	31460 <flatcc_verify_vector_field@@Base>
   202b4:	str	r0, [fp, #-8]
   202b8:	ldr	r3, [fp, #-8]
   202bc:	cmp	r3, #0
   202c0:	beq	202cc <_start@@Base+0xd8dc>
   202c4:	ldr	r3, [fp, #-8]
   202c8:	b	20834 <_start@@Base+0xde44>
   202cc:	ldr	r3, [pc, #1396]	; 20848 <_start@@Base+0xde58>
   202d0:	add	r3, pc, r3
   202d4:	mov	r2, #0
   202d8:	mov	r1, #11
   202dc:	ldr	r0, [fp, #-16]
   202e0:	bl	316dc <flatcc_verify_table_vector_field@@Base>
   202e4:	str	r0, [fp, #-8]
   202e8:	ldr	r3, [fp, #-8]
   202ec:	cmp	r3, #0
   202f0:	beq	202fc <_start@@Base+0xd90c>
   202f4:	ldr	r3, [fp, #-8]
   202f8:	b	20834 <_start@@Base+0xde44>
   202fc:	mov	r2, #0
   20300:	mov	r1, #10
   20304:	ldr	r0, [fp, #-16]
   20308:	bl	31540 <flatcc_verify_string_vector_field@@Base>
   2030c:	str	r0, [fp, #-8]
   20310:	ldr	r3, [fp, #-8]
   20314:	cmp	r3, #0
   20318:	beq	20324 <_start@@Base+0xd934>
   2031c:	ldr	r3, [fp, #-8]
   20320:	b	20834 <_start@@Base+0xde44>
   20324:	mov	r2, #0
   20328:	mov	r1, #28
   2032c:	ldr	r0, [fp, #-16]
   20330:	bl	31540 <flatcc_verify_string_vector_field@@Base>
   20334:	str	r0, [fp, #-8]
   20338:	ldr	r3, [fp, #-8]
   2033c:	cmp	r3, #0
   20340:	beq	2034c <_start@@Base+0xd95c>
   20344:	ldr	r3, [fp, #-8]
   20348:	b	20834 <_start@@Base+0xde44>
   2034c:	mvn	r3, #0
   20350:	str	r3, [sp, #4]
   20354:	mov	r3, #1
   20358:	str	r3, [sp]
   2035c:	mov	r3, #1
   20360:	mov	r2, #0
   20364:	mov	r1, #24
   20368:	ldr	r0, [fp, #-16]
   2036c:	bl	31460 <flatcc_verify_vector_field@@Base>
   20370:	str	r0, [fp, #-8]
   20374:	ldr	r3, [fp, #-8]
   20378:	cmp	r3, #0
   2037c:	beq	20388 <_start@@Base+0xd998>
   20380:	ldr	r3, [fp, #-8]
   20384:	b	20834 <_start@@Base+0xde44>
   20388:	mvn	r3, #-536870912	; 0xe0000000
   2038c:	str	r3, [sp, #4]
   20390:	mov	r3, #4
   20394:	str	r3, [sp]
   20398:	mov	r3, #8
   2039c:	mov	r2, #0
   203a0:	mov	r1, #29
   203a4:	ldr	r0, [fp, #-16]
   203a8:	bl	31460 <flatcc_verify_vector_field@@Base>
   203ac:	str	r0, [fp, #-8]
   203b0:	ldr	r3, [fp, #-8]
   203b4:	cmp	r3, #0
   203b8:	beq	203c4 <_start@@Base+0xd9d4>
   203bc:	ldr	r3, [fp, #-8]
   203c0:	b	20834 <_start@@Base+0xde44>
   203c4:	ldr	r3, [pc, #1152]	; 2084c <_start@@Base+0xde5c>
   203c8:	add	r3, pc, r3
   203cc:	mov	r2, #0
   203d0:	mov	r1, #12
   203d4:	ldr	r0, [fp, #-16]
   203d8:	bl	31600 <flatcc_verify_table_field@@Base>
   203dc:	str	r0, [fp, #-8]
   203e0:	ldr	r3, [fp, #-8]
   203e4:	cmp	r3, #0
   203e8:	beq	203f4 <_start@@Base+0xda04>
   203ec:	ldr	r3, [fp, #-8]
   203f0:	b	20834 <_start@@Base+0xde44>
   203f4:	ldr	r3, [pc, #1108]	; 20850 <_start@@Base+0xde60>
   203f8:	add	r3, pc, r3
   203fc:	mov	r2, #0
   20400:	mov	r1, #8
   20404:	ldr	r0, [fp, #-16]
   20408:	bl	3200c <flatcc_verify_union_field@@Base>
   2040c:	str	r0, [fp, #-8]
   20410:	ldr	r3, [fp, #-8]
   20414:	cmp	r3, #0
   20418:	beq	20424 <_start@@Base+0xda34>
   2041c:	ldr	r3, [fp, #-8]
   20420:	b	20834 <_start@@Base+0xde44>
   20424:	mvn	r3, #-1073741824	; 0xc0000000
   20428:	str	r3, [sp, #4]
   2042c:	mov	r3, #2
   20430:	str	r3, [sp]
   20434:	mov	r3, #4
   20438:	mov	r2, #0
   2043c:	mov	r1, #9
   20440:	ldr	r0, [fp, #-16]
   20444:	bl	31460 <flatcc_verify_vector_field@@Base>
   20448:	str	r0, [fp, #-8]
   2044c:	ldr	r3, [fp, #-8]
   20450:	cmp	r3, #0
   20454:	beq	20460 <_start@@Base+0xda70>
   20458:	ldr	r3, [fp, #-8]
   2045c:	b	20834 <_start@@Base+0xde44>
   20460:	mvn	r3, #-1073741824	; 0xc0000000
   20464:	str	r3, [sp, #4]
   20468:	mov	r3, #2
   2046c:	str	r3, [sp]
   20470:	mov	r3, #4
   20474:	mov	r2, #0
   20478:	mov	r1, #31
   2047c:	ldr	r0, [fp, #-16]
   20480:	bl	31460 <flatcc_verify_vector_field@@Base>
   20484:	str	r0, [fp, #-8]
   20488:	ldr	r3, [fp, #-8]
   2048c:	cmp	r3, #0
   20490:	beq	2049c <_start@@Base+0xdaac>
   20494:	ldr	r3, [fp, #-8]
   20498:	b	20834 <_start@@Base+0xde44>
   2049c:	ldr	r3, [pc, #944]	; 20854 <_start@@Base+0xde64>
   204a0:	add	r3, pc, r3
   204a4:	str	r3, [sp, #4]
   204a8:	mov	r3, #1
   204ac:	str	r3, [sp]
   204b0:	mov	r3, #0
   204b4:	mov	r2, #0
   204b8:	mov	r1, #13
   204bc:	ldr	r0, [fp, #-16]
   204c0:	bl	31ea0 <flatcc_verify_table_as_nested_root@@Base>
   204c4:	str	r0, [fp, #-8]
   204c8:	ldr	r3, [fp, #-8]
   204cc:	cmp	r3, #0
   204d0:	beq	204dc <_start@@Base+0xdaec>
   204d4:	ldr	r3, [fp, #-8]
   204d8:	b	20834 <_start@@Base+0xde44>
   204dc:	ldr	r3, [pc, #884]	; 20858 <_start@@Base+0xde68>
   204e0:	add	r3, pc, r3
   204e4:	mov	r2, #0
   204e8:	mov	r1, #14
   204ec:	ldr	r0, [fp, #-16]
   204f0:	bl	31600 <flatcc_verify_table_field@@Base>
   204f4:	str	r0, [fp, #-8]
   204f8:	ldr	r3, [fp, #-8]
   204fc:	cmp	r3, #0
   20500:	beq	2050c <_start@@Base+0xdb1c>
   20504:	ldr	r3, [fp, #-8]
   20508:	b	20834 <_start@@Base+0xde44>
   2050c:	mov	r3, #1
   20510:	mov	r2, #1
   20514:	mov	r1, #15
   20518:	ldr	r0, [fp, #-16]
   2051c:	bl	31310 <flatcc_verify_field@@Base>
   20520:	str	r0, [fp, #-8]
   20524:	ldr	r3, [fp, #-8]
   20528:	cmp	r3, #0
   2052c:	beq	20538 <_start@@Base+0xdb48>
   20530:	ldr	r3, [fp, #-8]
   20534:	b	20834 <_start@@Base+0xde44>
   20538:	mov	r3, #4
   2053c:	mov	r2, #4
   20540:	mov	r1, #16
   20544:	ldr	r0, [fp, #-16]
   20548:	bl	31310 <flatcc_verify_field@@Base>
   2054c:	str	r0, [fp, #-8]
   20550:	ldr	r3, [fp, #-8]
   20554:	cmp	r3, #0
   20558:	beq	20564 <_start@@Base+0xdb74>
   2055c:	ldr	r3, [fp, #-8]
   20560:	b	20834 <_start@@Base+0xde44>
   20564:	mov	r3, #4
   20568:	mov	r2, #4
   2056c:	mov	r1, #17
   20570:	ldr	r0, [fp, #-16]
   20574:	bl	31310 <flatcc_verify_field@@Base>
   20578:	str	r0, [fp, #-8]
   2057c:	ldr	r3, [fp, #-8]
   20580:	cmp	r3, #0
   20584:	beq	20590 <_start@@Base+0xdba0>
   20588:	ldr	r3, [fp, #-8]
   2058c:	b	20834 <_start@@Base+0xde44>
   20590:	mov	r3, #8
   20594:	mov	r2, #8
   20598:	mov	r1, #18
   2059c:	ldr	r0, [fp, #-16]
   205a0:	bl	31310 <flatcc_verify_field@@Base>
   205a4:	str	r0, [fp, #-8]
   205a8:	ldr	r3, [fp, #-8]
   205ac:	cmp	r3, #0
   205b0:	beq	205bc <_start@@Base+0xdbcc>
   205b4:	ldr	r3, [fp, #-8]
   205b8:	b	20834 <_start@@Base+0xde44>
   205bc:	mov	r3, #8
   205c0:	mov	r2, #8
   205c4:	mov	r1, #19
   205c8:	ldr	r0, [fp, #-16]
   205cc:	bl	31310 <flatcc_verify_field@@Base>
   205d0:	str	r0, [fp, #-8]
   205d4:	ldr	r3, [fp, #-8]
   205d8:	cmp	r3, #0
   205dc:	beq	205e8 <_start@@Base+0xdbf8>
   205e0:	ldr	r3, [fp, #-8]
   205e4:	b	20834 <_start@@Base+0xde44>
   205e8:	mov	r3, #4
   205ec:	mov	r2, #4
   205f0:	mov	r1, #20
   205f4:	ldr	r0, [fp, #-16]
   205f8:	bl	31310 <flatcc_verify_field@@Base>
   205fc:	str	r0, [fp, #-8]
   20600:	ldr	r3, [fp, #-8]
   20604:	cmp	r3, #0
   20608:	beq	20614 <_start@@Base+0xdc24>
   2060c:	ldr	r3, [fp, #-8]
   20610:	b	20834 <_start@@Base+0xde44>
   20614:	mov	r3, #4
   20618:	mov	r2, #4
   2061c:	mov	r1, #21
   20620:	ldr	r0, [fp, #-16]
   20624:	bl	31310 <flatcc_verify_field@@Base>
   20628:	str	r0, [fp, #-8]
   2062c:	ldr	r3, [fp, #-8]
   20630:	cmp	r3, #0
   20634:	beq	20640 <_start@@Base+0xdc50>
   20638:	ldr	r3, [fp, #-8]
   2063c:	b	20834 <_start@@Base+0xde44>
   20640:	mov	r3, #8
   20644:	mov	r2, #8
   20648:	mov	r1, #22
   2064c:	ldr	r0, [fp, #-16]
   20650:	bl	31310 <flatcc_verify_field@@Base>
   20654:	str	r0, [fp, #-8]
   20658:	ldr	r3, [fp, #-8]
   2065c:	cmp	r3, #0
   20660:	beq	2066c <_start@@Base+0xdc7c>
   20664:	ldr	r3, [fp, #-8]
   20668:	b	20834 <_start@@Base+0xde44>
   2066c:	mov	r3, #8
   20670:	mov	r2, #8
   20674:	mov	r1, #23
   20678:	ldr	r0, [fp, #-16]
   2067c:	bl	31310 <flatcc_verify_field@@Base>
   20680:	str	r0, [fp, #-8]
   20684:	ldr	r3, [fp, #-8]
   20688:	cmp	r3, #0
   2068c:	beq	20698 <_start@@Base+0xdca8>
   20690:	ldr	r3, [fp, #-8]
   20694:	b	20834 <_start@@Base+0xde44>
   20698:	mov	r3, #4
   2069c:	mov	r2, #4
   206a0:	mov	r1, #25
   206a4:	ldr	r0, [fp, #-16]
   206a8:	bl	31310 <flatcc_verify_field@@Base>
   206ac:	str	r0, [fp, #-8]
   206b0:	ldr	r3, [fp, #-8]
   206b4:	cmp	r3, #0
   206b8:	beq	206c4 <_start@@Base+0xdcd4>
   206bc:	ldr	r3, [fp, #-8]
   206c0:	b	20834 <_start@@Base+0xde44>
   206c4:	mov	r3, #4
   206c8:	mov	r2, #4
   206cc:	mov	r1, #26
   206d0:	ldr	r0, [fp, #-16]
   206d4:	bl	31310 <flatcc_verify_field@@Base>
   206d8:	str	r0, [fp, #-8]
   206dc:	ldr	r3, [fp, #-8]
   206e0:	cmp	r3, #0
   206e4:	beq	206f0 <_start@@Base+0xdd00>
   206e8:	ldr	r3, [fp, #-8]
   206ec:	b	20834 <_start@@Base+0xde44>
   206f0:	mov	r3, #4
   206f4:	mov	r2, #4
   206f8:	mov	r1, #27
   206fc:	ldr	r0, [fp, #-16]
   20700:	bl	31310 <flatcc_verify_field@@Base>
   20704:	str	r0, [fp, #-8]
   20708:	ldr	r3, [fp, #-8]
   2070c:	cmp	r3, #0
   20710:	beq	2071c <_start@@Base+0xdd2c>
   20714:	ldr	r3, [fp, #-8]
   20718:	b	20834 <_start@@Base+0xde44>
   2071c:	mvn	r3, #0
   20720:	str	r3, [sp, #4]
   20724:	mov	r3, #1
   20728:	str	r3, [sp]
   2072c:	mov	r3, #1
   20730:	mov	r2, #0
   20734:	mov	r1, #30
   20738:	ldr	r0, [fp, #-16]
   2073c:	bl	31460 <flatcc_verify_vector_field@@Base>
   20740:	str	r0, [fp, #-8]
   20744:	ldr	r3, [fp, #-8]
   20748:	cmp	r3, #0
   2074c:	beq	20758 <_start@@Base+0xdd68>
   20750:	ldr	r3, [fp, #-8]
   20754:	b	20834 <_start@@Base+0xde44>
   20758:	mvn	r3, #-536870912	; 0xe0000000
   2075c:	str	r3, [sp, #4]
   20760:	mov	r3, #8
   20764:	str	r3, [sp]
   20768:	mov	r3, #8
   2076c:	mov	r2, #0
   20770:	mov	r1, #32
   20774:	ldr	r0, [fp, #-16]
   20778:	bl	31460 <flatcc_verify_vector_field@@Base>
   2077c:	str	r0, [fp, #-8]
   20780:	ldr	r3, [fp, #-8]
   20784:	cmp	r3, #0
   20788:	beq	20794 <_start@@Base+0xdda4>
   2078c:	ldr	r3, [fp, #-8]
   20790:	b	20834 <_start@@Base+0xde44>
   20794:	mvn	r3, #-536870912	; 0xe0000000
   20798:	str	r3, [sp, #4]
   2079c:	mov	r3, #8
   207a0:	str	r3, [sp]
   207a4:	mov	r3, #8
   207a8:	mov	r2, #0
   207ac:	mov	r1, #33	; 0x21
   207b0:	ldr	r0, [fp, #-16]
   207b4:	bl	31460 <flatcc_verify_vector_field@@Base>
   207b8:	str	r0, [fp, #-8]
   207bc:	ldr	r3, [fp, #-8]
   207c0:	cmp	r3, #0
   207c4:	beq	207d0 <_start@@Base+0xdde0>
   207c8:	ldr	r3, [fp, #-8]
   207cc:	b	20834 <_start@@Base+0xde44>
   207d0:	ldr	r3, [pc, #132]	; 2085c <_start@@Base+0xde6c>
   207d4:	add	r3, pc, r3
   207d8:	mov	r2, #0
   207dc:	mov	r1, #34	; 0x22
   207e0:	ldr	r0, [fp, #-16]
   207e4:	bl	31600 <flatcc_verify_table_field@@Base>
   207e8:	str	r0, [fp, #-8]
   207ec:	ldr	r3, [fp, #-8]
   207f0:	cmp	r3, #0
   207f4:	beq	20800 <_start@@Base+0xde10>
   207f8:	ldr	r3, [fp, #-8]
   207fc:	b	20834 <_start@@Base+0xde44>
   20800:	ldr	r3, [pc, #88]	; 20860 <_start@@Base+0xde70>
   20804:	add	r3, pc, r3
   20808:	mov	r2, #0
   2080c:	mov	r1, #35	; 0x23
   20810:	ldr	r0, [fp, #-16]
   20814:	bl	31600 <flatcc_verify_table_field@@Base>
   20818:	str	r0, [fp, #-8]
   2081c:	ldr	r3, [fp, #-8]
   20820:	cmp	r3, #0
   20824:	beq	20830 <_start@@Base+0xde40>
   20828:	ldr	r3, [fp, #-8]
   2082c:	b	20834 <_start@@Base+0xde44>
   20830:	mov	r3, #0
   20834:	mov	r0, r3
   20838:	sub	sp, fp, #4
   2083c:	ldr	fp, [sp]
   20840:	add	sp, sp, #4
   20844:	pop	{pc}		; (ldr pc, [sp], #4)
   20848:			; <UNDEFINED> instruction: 0xfffffecc
   2084c:			; <UNDEFINED> instruction: 0xfffffdd4
   20850:			; <UNDEFINED> instruction: 0xfffff194
   20854:			; <UNDEFINED> instruction: 0xfffffcfc
   20858:			; <UNDEFINED> instruction: 0xfffff6e4
   2085c:			; <UNDEFINED> instruction: 0xfffff028
   20860:			; <UNDEFINED> instruction: 0xfffff8b0
   20864:	str	fp, [sp, #-8]!
   20868:	str	lr, [sp, #4]
   2086c:	add	fp, sp, #4
   20870:	sub	sp, sp, #8
   20874:	str	r0, [fp, #-8]
   20878:	str	r1, [fp, #-12]
   2087c:	ldr	r3, [pc, #44]	; 208b0 <_start@@Base+0xdec0>
   20880:	add	r3, pc, r3
   20884:	ldr	r2, [pc, #40]	; 208b4 <_start@@Base+0xdec4>
   20888:	add	r2, pc, r2
   2088c:	ldr	r1, [fp, #-12]
   20890:	ldr	r0, [fp, #-8]
   20894:	bl	31c44 <flatcc_verify_table_as_root@@Base>
   20898:	mov	r3, r0
   2089c:	mov	r0, r3
   208a0:	sub	sp, fp, #4
   208a4:	ldr	fp, [sp]
   208a8:	add	sp, sp, #4
   208ac:	pop	{pc}		; (ldr pc, [sp], #4)
   208b0:			; <UNDEFINED> instruction: 0xfffff91c
   208b4:	andeq	r1, r1, ip, ror #27
   208b8:	str	fp, [sp, #-8]!
   208bc:	str	lr, [sp, #4]
   208c0:	add	fp, sp, #4
   208c4:	sub	sp, sp, #8
   208c8:	str	r0, [fp, #-8]
   208cc:	str	r1, [fp, #-12]
   208d0:	ldr	r3, [pc, #44]	; 20904 <_start@@Base+0xdf14>
   208d4:	add	r3, pc, r3
   208d8:	ldr	r2, [pc, #40]	; 20908 <_start@@Base+0xdf18>
   208dc:	add	r2, pc, r2
   208e0:	ldr	r1, [fp, #-12]
   208e4:	ldr	r0, [fp, #-8]
   208e8:	bl	31c44 <flatcc_verify_table_as_root@@Base>
   208ec:	mov	r3, r0
   208f0:	mov	r0, r3
   208f4:	sub	sp, fp, #4
   208f8:	ldr	fp, [sp]
   208fc:	add	sp, sp, #4
   20900:	pop	{pc}		; (ldr pc, [sp], #4)
   20904:			; <UNDEFINED> instruction: 0xfffff8c8
   20908:	andeq	r2, r1, r8, ror r4
   2090c:	str	fp, [sp, #-8]!
   20910:	str	lr, [sp, #4]
   20914:	add	fp, sp, #4
   20918:	sub	sp, sp, #16
   2091c:	str	r0, [fp, #-8]
   20920:	str	r1, [fp, #-12]
   20924:	str	r2, [fp, #-16]
   20928:	ldr	r3, [pc, #40]	; 20958 <_start@@Base+0xdf68>
   2092c:	add	r3, pc, r3
   20930:	ldr	r2, [fp, #-16]
   20934:	ldr	r1, [fp, #-12]
   20938:	ldr	r0, [fp, #-8]
   2093c:	bl	31c44 <flatcc_verify_table_as_root@@Base>
   20940:	mov	r3, r0
   20944:	mov	r0, r3
   20948:	sub	sp, fp, #4
   2094c:	ldr	fp, [sp]
   20950:	add	sp, sp, #4
   20954:	pop	{pc}		; (ldr pc, [sp], #4)
   20958:			; <UNDEFINED> instruction: 0xfffff870
   2095c:	str	fp, [sp, #-8]!
   20960:	str	lr, [sp, #4]
   20964:	add	fp, sp, #4
   20968:	sub	sp, sp, #16
   2096c:	str	r0, [fp, #-8]
   20970:	str	r1, [fp, #-12]
   20974:	str	r2, [fp, #-16]
   20978:	ldr	r3, [pc, #40]	; 209a8 <_start@@Base+0xdfb8>
   2097c:	add	r3, pc, r3
   20980:	ldr	r2, [fp, #-16]
   20984:	ldr	r1, [fp, #-12]
   20988:	ldr	r0, [fp, #-8]
   2098c:	bl	31ce4 <flatcc_verify_table_as_typed_root@@Base>
   20990:	mov	r3, r0
   20994:	mov	r0, r3
   20998:	sub	sp, fp, #4
   2099c:	ldr	fp, [sp]
   209a0:	add	sp, sp, #4
   209a4:	pop	{pc}		; (ldr pc, [sp], #4)
   209a8:			; <UNDEFINED> instruction: 0xfffff820
   209ac:	str	fp, [sp, #-8]!
   209b0:	str	lr, [sp, #4]
   209b4:	add	fp, sp, #4
   209b8:	sub	sp, sp, #24
   209bc:	str	r0, [fp, #-16]
   209c0:	mov	r3, #1
   209c4:	mov	r2, #1
   209c8:	mov	r1, #0
   209cc:	ldr	r0, [fp, #-16]
   209d0:	bl	31310 <flatcc_verify_field@@Base>
   209d4:	str	r0, [fp, #-8]
   209d8:	ldr	r3, [fp, #-8]
   209dc:	cmp	r3, #0
   209e0:	beq	209ec <_start@@Base+0xdffc>
   209e4:	ldr	r3, [fp, #-8]
   209e8:	b	20bf4 <_start@@Base+0xe204>
   209ec:	mov	r3, #1
   209f0:	mov	r2, #1
   209f4:	mov	r1, #1
   209f8:	ldr	r0, [fp, #-16]
   209fc:	bl	31310 <flatcc_verify_field@@Base>
   20a00:	str	r0, [fp, #-8]
   20a04:	ldr	r3, [fp, #-8]
   20a08:	cmp	r3, #0
   20a0c:	beq	20a18 <_start@@Base+0xe028>
   20a10:	ldr	r3, [fp, #-8]
   20a14:	b	20bf4 <_start@@Base+0xe204>
   20a18:	mov	r3, #2
   20a1c:	mov	r2, #2
   20a20:	mov	r1, #2
   20a24:	ldr	r0, [fp, #-16]
   20a28:	bl	31310 <flatcc_verify_field@@Base>
   20a2c:	str	r0, [fp, #-8]
   20a30:	ldr	r3, [fp, #-8]
   20a34:	cmp	r3, #0
   20a38:	beq	20a44 <_start@@Base+0xe054>
   20a3c:	ldr	r3, [fp, #-8]
   20a40:	b	20bf4 <_start@@Base+0xe204>
   20a44:	mov	r3, #2
   20a48:	mov	r2, #2
   20a4c:	mov	r1, #3
   20a50:	ldr	r0, [fp, #-16]
   20a54:	bl	31310 <flatcc_verify_field@@Base>
   20a58:	str	r0, [fp, #-8]
   20a5c:	ldr	r3, [fp, #-8]
   20a60:	cmp	r3, #0
   20a64:	beq	20a70 <_start@@Base+0xe080>
   20a68:	ldr	r3, [fp, #-8]
   20a6c:	b	20bf4 <_start@@Base+0xe204>
   20a70:	mov	r3, #4
   20a74:	mov	r2, #4
   20a78:	mov	r1, #4
   20a7c:	ldr	r0, [fp, #-16]
   20a80:	bl	31310 <flatcc_verify_field@@Base>
   20a84:	str	r0, [fp, #-8]
   20a88:	ldr	r3, [fp, #-8]
   20a8c:	cmp	r3, #0
   20a90:	beq	20a9c <_start@@Base+0xe0ac>
   20a94:	ldr	r3, [fp, #-8]
   20a98:	b	20bf4 <_start@@Base+0xe204>
   20a9c:	mov	r3, #4
   20aa0:	mov	r2, #4
   20aa4:	mov	r1, #5
   20aa8:	ldr	r0, [fp, #-16]
   20aac:	bl	31310 <flatcc_verify_field@@Base>
   20ab0:	str	r0, [fp, #-8]
   20ab4:	ldr	r3, [fp, #-8]
   20ab8:	cmp	r3, #0
   20abc:	beq	20ac8 <_start@@Base+0xe0d8>
   20ac0:	ldr	r3, [fp, #-8]
   20ac4:	b	20bf4 <_start@@Base+0xe204>
   20ac8:	mov	r3, #8
   20acc:	mov	r2, #8
   20ad0:	mov	r1, #6
   20ad4:	ldr	r0, [fp, #-16]
   20ad8:	bl	31310 <flatcc_verify_field@@Base>
   20adc:	str	r0, [fp, #-8]
   20ae0:	ldr	r3, [fp, #-8]
   20ae4:	cmp	r3, #0
   20ae8:	beq	20af4 <_start@@Base+0xe104>
   20aec:	ldr	r3, [fp, #-8]
   20af0:	b	20bf4 <_start@@Base+0xe204>
   20af4:	mov	r3, #8
   20af8:	mov	r2, #8
   20afc:	mov	r1, #7
   20b00:	ldr	r0, [fp, #-16]
   20b04:	bl	31310 <flatcc_verify_field@@Base>
   20b08:	str	r0, [fp, #-8]
   20b0c:	ldr	r3, [fp, #-8]
   20b10:	cmp	r3, #0
   20b14:	beq	20b20 <_start@@Base+0xe130>
   20b18:	ldr	r3, [fp, #-8]
   20b1c:	b	20bf4 <_start@@Base+0xe204>
   20b20:	mov	r3, #4
   20b24:	mov	r2, #4
   20b28:	mov	r1, #8
   20b2c:	ldr	r0, [fp, #-16]
   20b30:	bl	31310 <flatcc_verify_field@@Base>
   20b34:	str	r0, [fp, #-8]
   20b38:	ldr	r3, [fp, #-8]
   20b3c:	cmp	r3, #0
   20b40:	beq	20b4c <_start@@Base+0xe15c>
   20b44:	ldr	r3, [fp, #-8]
   20b48:	b	20bf4 <_start@@Base+0xe204>
   20b4c:	mov	r3, #8
   20b50:	mov	r2, #8
   20b54:	mov	r1, #9
   20b58:	ldr	r0, [fp, #-16]
   20b5c:	bl	31310 <flatcc_verify_field@@Base>
   20b60:	str	r0, [fp, #-8]
   20b64:	ldr	r3, [fp, #-8]
   20b68:	cmp	r3, #0
   20b6c:	beq	20b78 <_start@@Base+0xe188>
   20b70:	ldr	r3, [fp, #-8]
   20b74:	b	20bf4 <_start@@Base+0xe204>
   20b78:	mvn	r3, #0
   20b7c:	str	r3, [sp, #4]
   20b80:	mov	r3, #1
   20b84:	str	r3, [sp]
   20b88:	mov	r3, #1
   20b8c:	mov	r2, #0
   20b90:	mov	r1, #10
   20b94:	ldr	r0, [fp, #-16]
   20b98:	bl	31460 <flatcc_verify_vector_field@@Base>
   20b9c:	str	r0, [fp, #-8]
   20ba0:	ldr	r3, [fp, #-8]
   20ba4:	cmp	r3, #0
   20ba8:	beq	20bb4 <_start@@Base+0xe1c4>
   20bac:	ldr	r3, [fp, #-8]
   20bb0:	b	20bf4 <_start@@Base+0xe204>
   20bb4:	mvn	r3, #-536870912	; 0xe0000000
   20bb8:	str	r3, [sp, #4]
   20bbc:	mov	r3, #8
   20bc0:	str	r3, [sp]
   20bc4:	mov	r3, #8
   20bc8:	mov	r2, #0
   20bcc:	mov	r1, #11
   20bd0:	ldr	r0, [fp, #-16]
   20bd4:	bl	31460 <flatcc_verify_vector_field@@Base>
   20bd8:	str	r0, [fp, #-8]
   20bdc:	ldr	r3, [fp, #-8]
   20be0:	cmp	r3, #0
   20be4:	beq	20bf0 <_start@@Base+0xe200>
   20be8:	ldr	r3, [fp, #-8]
   20bec:	b	20bf4 <_start@@Base+0xe204>
   20bf0:	mov	r3, #0
   20bf4:	mov	r0, r3
   20bf8:	sub	sp, fp, #4
   20bfc:	ldr	fp, [sp]
   20c00:	add	sp, sp, #4
   20c04:	pop	{pc}		; (ldr pc, [sp], #4)
   20c08:	str	fp, [sp, #-8]!
   20c0c:	str	lr, [sp, #4]
   20c10:	add	fp, sp, #4
   20c14:	sub	sp, sp, #8
   20c18:	str	r0, [fp, #-8]
   20c1c:	str	r1, [fp, #-12]
   20c20:	ldr	r3, [pc, #44]	; 20c54 <_start@@Base+0xe264>
   20c24:	add	r3, pc, r3
   20c28:	ldr	r2, [pc, #40]	; 20c58 <_start@@Base+0xe268>
   20c2c:	add	r2, pc, r2
   20c30:	ldr	r1, [fp, #-12]
   20c34:	ldr	r0, [fp, #-8]
   20c38:	bl	31c44 <flatcc_verify_table_as_root@@Base>
   20c3c:	mov	r3, r0
   20c40:	mov	r0, r3
   20c44:	sub	sp, fp, #4
   20c48:	ldr	fp, [sp]
   20c4c:	add	sp, sp, #4
   20c50:	pop	{pc}		; (ldr pc, [sp], #4)
   20c54:			; <UNDEFINED> instruction: 0xfffffd80
   20c58:	andeq	r1, r1, r8, asr #20
   20c5c:	str	fp, [sp, #-8]!
   20c60:	str	lr, [sp, #4]
   20c64:	add	fp, sp, #4
   20c68:	sub	sp, sp, #16
   20c6c:	str	r0, [fp, #-16]
   20c70:	mov	r3, #4
   20c74:	mov	r2, #4
   20c78:	mov	r1, #0
   20c7c:	ldr	r0, [fp, #-16]
   20c80:	bl	31310 <flatcc_verify_field@@Base>
   20c84:	str	r0, [fp, #-8]
   20c88:	ldr	r3, [fp, #-8]
   20c8c:	cmp	r3, #0
   20c90:	beq	20c9c <_start@@Base+0xe2ac>
   20c94:	ldr	r3, [fp, #-8]
   20c98:	b	20ca0 <_start@@Base+0xe2b0>
   20c9c:	mov	r3, #0
   20ca0:	mov	r0, r3
   20ca4:	sub	sp, fp, #4
   20ca8:	ldr	fp, [sp]
   20cac:	add	sp, sp, #4
   20cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   20cb4:	str	fp, [sp, #-8]!
   20cb8:	str	lr, [sp, #4]
   20cbc:	add	fp, sp, #4
   20cc0:	sub	sp, sp, #16
   20cc4:	str	r0, [fp, #-16]
   20cc8:	ldr	r3, [pc, #256]	; 20dd0 <_start@@Base+0xe3e0>
   20ccc:	add	r3, pc, r3
   20cd0:	mov	r2, #0
   20cd4:	mov	r1, #1
   20cd8:	ldr	r0, [fp, #-16]
   20cdc:	bl	3200c <flatcc_verify_union_field@@Base>
   20ce0:	str	r0, [fp, #-8]
   20ce4:	ldr	r3, [fp, #-8]
   20ce8:	cmp	r3, #0
   20cec:	beq	20cf8 <_start@@Base+0xe308>
   20cf0:	ldr	r3, [fp, #-8]
   20cf4:	b	20dbc <_start@@Base+0xe3cc>
   20cf8:	ldr	r3, [pc, #212]	; 20dd4 <_start@@Base+0xe3e4>
   20cfc:	add	r3, pc, r3
   20d00:	mov	r2, #0
   20d04:	mov	r1, #3
   20d08:	ldr	r0, [fp, #-16]
   20d0c:	bl	3200c <flatcc_verify_union_field@@Base>
   20d10:	str	r0, [fp, #-8]
   20d14:	ldr	r3, [fp, #-8]
   20d18:	cmp	r3, #0
   20d1c:	beq	20d28 <_start@@Base+0xe338>
   20d20:	ldr	r3, [fp, #-8]
   20d24:	b	20dbc <_start@@Base+0xe3cc>
   20d28:	ldr	r3, [pc, #168]	; 20dd8 <_start@@Base+0xe3e8>
   20d2c:	add	r3, pc, r3
   20d30:	mov	r2, #0
   20d34:	mov	r1, #5
   20d38:	ldr	r0, [fp, #-16]
   20d3c:	bl	3200c <flatcc_verify_union_field@@Base>
   20d40:	str	r0, [fp, #-8]
   20d44:	ldr	r3, [fp, #-8]
   20d48:	cmp	r3, #0
   20d4c:	beq	20d58 <_start@@Base+0xe368>
   20d50:	ldr	r3, [fp, #-8]
   20d54:	b	20dbc <_start@@Base+0xe3cc>
   20d58:	ldr	r3, [pc, #124]	; 20ddc <_start@@Base+0xe3ec>
   20d5c:	add	r3, pc, r3
   20d60:	mov	r2, #0
   20d64:	mov	r1, #7
   20d68:	ldr	r0, [fp, #-16]
   20d6c:	bl	3200c <flatcc_verify_union_field@@Base>
   20d70:	str	r0, [fp, #-8]
   20d74:	ldr	r3, [fp, #-8]
   20d78:	cmp	r3, #0
   20d7c:	beq	20d88 <_start@@Base+0xe398>
   20d80:	ldr	r3, [fp, #-8]
   20d84:	b	20dbc <_start@@Base+0xe3cc>
   20d88:	ldr	r3, [pc, #80]	; 20de0 <_start@@Base+0xe3f0>
   20d8c:	add	r3, pc, r3
   20d90:	mov	r2, #0
   20d94:	mov	r1, #9
   20d98:	ldr	r0, [fp, #-16]
   20d9c:	bl	32278 <flatcc_verify_union_vector_field@@Base>
   20da0:	str	r0, [fp, #-8]
   20da4:	ldr	r3, [fp, #-8]
   20da8:	cmp	r3, #0
   20dac:	beq	20db8 <_start@@Base+0xe3c8>
   20db0:	ldr	r3, [fp, #-8]
   20db4:	b	20dbc <_start@@Base+0xe3cc>
   20db8:	mov	r3, #0
   20dbc:	mov	r0, r3
   20dc0:	sub	sp, fp, #4
   20dc4:	ldr	fp, [sp]
   20dc8:	add	sp, sp, #4
   20dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   20dd0:			; <UNDEFINED> instruction: 0xffffe994
   20dd4:			; <UNDEFINED> instruction: 0xffffe964
   20dd8:			; <UNDEFINED> instruction: 0xffffe934
   20ddc:			; <UNDEFINED> instruction: 0xffffe904
   20de0:			; <UNDEFINED> instruction: 0xffffe8d4
   20de4:	str	fp, [sp, #-8]!
   20de8:	str	lr, [sp, #4]
   20dec:	add	fp, sp, #4
   20df0:	sub	sp, sp, #8
   20df4:	str	r0, [fp, #-8]
   20df8:	str	r1, [fp, #-12]
   20dfc:	ldr	r3, [pc, #44]	; 20e30 <_start@@Base+0xe440>
   20e00:	add	r3, pc, r3
   20e04:	ldr	r2, [pc, #40]	; 20e34 <_start@@Base+0xe444>
   20e08:	add	r2, pc, r2
   20e0c:	ldr	r1, [fp, #-12]
   20e10:	ldr	r0, [fp, #-8]
   20e14:	bl	31c44 <flatcc_verify_table_as_root@@Base>
   20e18:	mov	r3, r0
   20e1c:	mov	r0, r3
   20e20:	sub	sp, fp, #4
   20e24:	ldr	fp, [sp]
   20e28:	add	sp, sp, #4
   20e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   20e30:			; <UNDEFINED> instruction: 0xfffffeac
   20e34:	andeq	r1, r1, ip, ror #16
   20e38:	str	fp, [sp, #-8]!
   20e3c:	str	lr, [sp, #4]
   20e40:	add	fp, sp, #4
   20e44:	sub	sp, sp, #48	; 0x30
   20e48:	str	r0, [fp, #-40]	; 0xffffffd8
   20e4c:	str	r1, [fp, #-44]	; 0xffffffd4
   20e50:	str	r2, [fp, #-48]	; 0xffffffd0
   20e54:	str	r3, [fp, #-52]	; 0xffffffcc
   20e58:	ldr	r3, [fp, #-44]	; 0xffffffd4
   20e5c:	str	r3, [fp, #-12]
   20e60:	ldr	r3, [fp, #-40]	; 0xffffffd8
   20e64:	cmp	r3, #0
   20e68:	beq	20e84 <_start@@Base+0xe494>
   20e6c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   20e70:	ldr	r3, [pc, #448]	; 21038 <_start@@Base+0xe648>
   20e74:	add	r3, pc, r3
   20e78:	mov	r1, r3
   20e7c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   20e80:	bl	12980 <fprintf@plt>
   20e84:	mov	r3, #0
   20e88:	str	r3, [fp, #-8]
   20e8c:	b	20fc0 <_start@@Base+0xe5d0>
   20e90:	ldr	r3, [fp, #-8]
   20e94:	and	r3, r3, #15
   20e98:	cmp	r3, #0
   20e9c:	bne	20ee4 <_start@@Base+0xe4f4>
   20ea0:	ldr	r3, [fp, #-8]
   20ea4:	cmp	r3, #0
   20ea8:	beq	20ec8 <_start@@Base+0xe4d8>
   20eac:	sub	r3, fp, #32
   20eb0:	mov	r2, r3
   20eb4:	ldr	r3, [pc, #384]	; 2103c <_start@@Base+0xe64c>
   20eb8:	add	r3, pc, r3
   20ebc:	mov	r1, r3
   20ec0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   20ec4:	bl	12980 <fprintf@plt>
   20ec8:	ldr	r2, [fp, #-8]
   20ecc:	ldr	r3, [pc, #364]	; 21040 <_start@@Base+0xe650>
   20ed0:	add	r3, pc, r3
   20ed4:	mov	r1, r3
   20ed8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   20edc:	bl	12980 <fprintf@plt>
   20ee0:	b	20f00 <_start@@Base+0xe510>
   20ee4:	ldr	r3, [fp, #-8]
   20ee8:	and	r3, r3, #7
   20eec:	cmp	r3, #0
   20ef0:	bne	20f00 <_start@@Base+0xe510>
   20ef4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   20ef8:	mov	r0, #32
   20efc:	bl	129bc <fputc@plt>
   20f00:	ldr	r2, [fp, #-12]
   20f04:	ldr	r3, [fp, #-8]
   20f08:	add	r3, r2, r3
   20f0c:	ldrb	r3, [r3]
   20f10:	mov	r2, r3
   20f14:	ldr	r3, [pc, #296]	; 21044 <_start@@Base+0xe654>
   20f18:	add	r3, pc, r3
   20f1c:	mov	r1, r3
   20f20:	ldr	r0, [fp, #-52]	; 0xffffffcc
   20f24:	bl	12980 <fprintf@plt>
   20f28:	ldr	r2, [fp, #-12]
   20f2c:	ldr	r3, [fp, #-8]
   20f30:	add	r3, r2, r3
   20f34:	ldrb	r3, [r3]
   20f38:	cmp	r3, #31
   20f3c:	bls	20f58 <_start@@Base+0xe568>
   20f40:	ldr	r2, [fp, #-12]
   20f44:	ldr	r3, [fp, #-8]
   20f48:	add	r3, r2, r3
   20f4c:	ldrb	r3, [r3]
   20f50:	cmp	r3, #126	; 0x7e
   20f54:	bls	20f74 <_start@@Base+0xe584>
   20f58:	ldr	r3, [fp, #-8]
   20f5c:	and	r3, r3, #15
   20f60:	sub	r2, fp, #4
   20f64:	add	r3, r2, r3
   20f68:	mov	r2, #46	; 0x2e
   20f6c:	strb	r2, [r3, #-28]	; 0xffffffe4
   20f70:	b	20f98 <_start@@Base+0xe5a8>
   20f74:	ldr	r2, [fp, #-12]
   20f78:	ldr	r3, [fp, #-8]
   20f7c:	add	r2, r2, r3
   20f80:	ldr	r3, [fp, #-8]
   20f84:	and	r3, r3, #15
   20f88:	ldrb	r2, [r2]
   20f8c:	sub	r1, fp, #4
   20f90:	add	r3, r1, r3
   20f94:	strb	r2, [r3, #-28]	; 0xffffffe4
   20f98:	ldr	r3, [fp, #-8]
   20f9c:	and	r3, r3, #15
   20fa0:	add	r3, r3, #1
   20fa4:	sub	r2, fp, #4
   20fa8:	add	r3, r2, r3
   20fac:	mov	r2, #0
   20fb0:	strb	r2, [r3, #-28]	; 0xffffffe4
   20fb4:	ldr	r3, [fp, #-8]
   20fb8:	add	r3, r3, #1
   20fbc:	str	r3, [fp, #-8]
   20fc0:	ldr	r2, [fp, #-8]
   20fc4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   20fc8:	cmp	r2, r3
   20fcc:	bcc	20e90 <_start@@Base+0xe4a0>
   20fd0:	b	20ff8 <_start@@Base+0xe608>
   20fd4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   20fd8:	mov	r2, #3
   20fdc:	mov	r1, #1
   20fe0:	ldr	r0, [pc, #96]	; 21048 <_start@@Base+0xe658>
   20fe4:	add	r0, pc, r0
   20fe8:	bl	1292c <fwrite@plt>
   20fec:	ldr	r3, [fp, #-8]
   20ff0:	add	r3, r3, #1
   20ff4:	str	r3, [fp, #-8]
   20ff8:	ldr	r3, [fp, #-8]
   20ffc:	and	r3, r3, #15
   21000:	cmp	r3, #0
   21004:	bne	20fd4 <_start@@Base+0xe5e4>
   21008:	sub	r3, fp, #32
   2100c:	mov	r2, r3
   21010:	ldr	r3, [pc, #52]	; 2104c <_start@@Base+0xe65c>
   21014:	add	r3, pc, r3
   21018:	mov	r1, r3
   2101c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   21020:	bl	12980 <fprintf@plt>
   21024:	nop	{0}
   21028:	sub	sp, fp, #4
   2102c:	ldr	fp, [sp]
   21030:	add	sp, sp, #4
   21034:	pop	{pc}		; (ldr pc, [sp], #4)
   21038:	andeq	r1, r1, r8, ror #29
   2103c:	andeq	r1, r1, ip, lsr #29
   21040:	muleq	r1, ip, lr
   21044:	andeq	r1, r1, ip, asr lr
   21048:	muleq	r1, r8, sp
   2104c:	andeq	r1, r1, r0, asr sp
   21050:	str	fp, [sp, #-8]!
   21054:	str	lr, [sp, #4]
   21058:	add	fp, sp, #4
   2105c:	sub	sp, sp, #8
   21060:	sub	r3, fp, #12
   21064:	mov	r1, #0
   21068:	mov	r0, r3
   2106c:	bl	12938 <gettimeofday@plt>
   21070:	ldr	r3, [pc, #136]	; 21100 <_start@@Base+0xe710>
   21074:	add	r3, pc, r3
   21078:	ldr	r3, [r3]
   2107c:	cmp	r3, #0
   21080:	bne	2109c <_start@@Base+0xe6ac>
   21084:	ldr	r3, [pc, #120]	; 21104 <_start@@Base+0xe714>
   21088:	add	r3, pc, r3
   2108c:	mov	r1, r3
   21090:	sub	r3, fp, #12
   21094:	ldrd	r2, [r3]
   21098:	strd	r2, [r1]
   2109c:	ldr	r2, [fp, #-12]
   210a0:	ldr	r3, [pc, #96]	; 21108 <_start@@Base+0xe718>
   210a4:	add	r3, pc, r3
   210a8:	ldr	r3, [r3]
   210ac:	sub	r3, r2, r3
   210b0:	vmov	s15, r3
   210b4:	vcvt.f64.s32	d6, s15
   210b8:	ldr	r2, [fp, #-8]
   210bc:	ldr	r3, [pc, #72]	; 2110c <_start@@Base+0xe71c>
   210c0:	add	r3, pc, r3
   210c4:	ldr	r3, [r3, #4]
   210c8:	sub	r3, r2, r3
   210cc:	vmov	s15, r3
   210d0:	vcvt.f64.s32	d5, s15
   210d4:	vldr	d4, [pc, #28]	; 210f8 <_start@@Base+0xe708>
   210d8:	vdiv.f64	d7, d5, d4
   210dc:	vadd.f64	d7, d6, d7
   210e0:	vmov.f64	d0, d7
   210e4:	sub	sp, fp, #4
   210e8:	ldr	fp, [sp]
   210ec:	add	sp, sp, #4
   210f0:	pop	{pc}		; (ldr pc, [sp], #4)
   210f4:	nop	{0}
   210f8:	andeq	r0, r0, r0
   210fc:	smlawbmi	lr, r0, r4, r8
   21100:	andeq	r7, r2, r0, lsl r0
   21104:	strdeq	r6, [r2], -ip
   21108:	andeq	r6, r2, r0, ror #31
   2110c:	andeq	r6, r2, r4, asr #31
   21110:	str	fp, [sp, #-8]!
   21114:	str	lr, [sp, #4]
   21118:	add	fp, sp, #4
   2111c:	sub	sp, sp, #48	; 0x30
   21120:	str	r0, [fp, #-24]	; 0xffffffe8
   21124:	vstr	d0, [fp, #-36]	; 0xffffffdc
   21128:	vstr	d1, [fp, #-44]	; 0xffffffd4
   2112c:	str	r1, [fp, #-28]	; 0xffffffe4
   21130:	str	r2, [fp, #-48]	; 0xffffffd0
   21134:	str	r3, [fp, #-52]	; 0xffffffcc
   21138:	vldr	d6, [fp, #-44]	; 0xffffffd4
   2113c:	vldr	d7, [fp, #-36]	; 0xffffffdc
   21140:	vsub.f64	d7, d6, d7
   21144:	vstr	d7, [fp, #-12]
   21148:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2114c:	ldr	r3, [pc, #508]	; 21350 <_start@@Base+0xe960>
   21150:	add	r3, pc, r3
   21154:	mov	r0, r3
   21158:	bl	128f0 <printf@plt>
   2115c:	ldrd	r2, [fp, #-12]
   21160:	ldr	r1, [pc, #492]	; 21354 <_start@@Base+0xe964>
   21164:	add	r1, pc, r1
   21168:	mov	r0, r1
   2116c:	bl	128f0 <printf@plt>
   21170:	ldr	r1, [fp, #-48]	; 0xffffffd0
   21174:	ldr	r3, [pc, #476]	; 21358 <_start@@Base+0xe968>
   21178:	add	r3, pc, r3
   2117c:	mov	r0, r3
   21180:	bl	128f0 <printf@plt>
   21184:	ldr	r1, [fp, #-28]	; 0xffffffe4
   21188:	ldr	r3, [pc, #460]	; 2135c <_start@@Base+0xe96c>
   2118c:	add	r3, pc, r3
   21190:	mov	r0, r3
   21194:	bl	128f0 <printf@plt>
   21198:	ldr	r3, [fp, #-48]	; 0xffffffd0
   2119c:	vmov	s15, r3
   211a0:	vcvt.f64.s32	d6, s15
   211a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   211a8:	vmov	s15, r3
   211ac:	vcvt.f64.u32	d7, s15
   211b0:	vmul.f64	d7, d6, d7
   211b4:	vldr	d5, [pc, #372]	; 21330 <_start@@Base+0xe940>
   211b8:	vdiv.f64	d6, d7, d5
   211bc:	vldr	d7, [fp, #-12]
   211c0:	vdiv.f64	d5, d6, d7
   211c4:	vmov	r2, r3, d5
   211c8:	ldr	r1, [pc, #400]	; 21360 <_start@@Base+0xe970>
   211cc:	add	r1, pc, r1
   211d0:	mov	r0, r1
   211d4:	bl	128f0 <printf@plt>
   211d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   211dc:	vmov	s15, r3
   211e0:	vcvt.f64.s32	d6, s15
   211e4:	vldr	d7, [fp, #-12]
   211e8:	vdiv.f64	d5, d6, d7
   211ec:	vmov	r2, r3, d5
   211f0:	ldr	r1, [pc, #364]	; 21364 <_start@@Base+0xe974>
   211f4:	add	r1, pc, r1
   211f8:	mov	r0, r1
   211fc:	bl	128f0 <printf@plt>
   21200:	ldr	r3, [fp, #-52]	; 0xffffffcc
   21204:	cmp	r3, #0
   21208:	beq	21238 <_start@@Base+0xe848>
   2120c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   21210:	cmp	r3, #1
   21214:	beq	21238 <_start@@Base+0xe848>
   21218:	vldr	d6, [pc, #280]	; 21338 <_start@@Base+0xe948>
   2121c:	vldr	d7, [fp, #-12]
   21220:	vdiv.f64	d5, d6, d7
   21224:	vmov	r2, r3, d5
   21228:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2122c:	ldr	r0, [pc, #308]	; 21368 <_start@@Base+0xe978>
   21230:	add	r0, pc, r0
   21234:	bl	128f0 <printf@plt>
   21238:	vldr	d7, [fp, #-12]
   2123c:	vldr	d6, [pc, #252]	; 21340 <_start@@Base+0xe950>
   21240:	vmul.f64	d5, d7, d6
   21244:	ldr	r3, [fp, #-48]	; 0xffffffd0
   21248:	vmov	s15, r3
   2124c:	vcvt.f64.s32	d6, s15
   21250:	vdiv.f64	d7, d5, d6
   21254:	vstr	d7, [fp, #-20]	; 0xffffffec
   21258:	vldr	d7, [fp, #-20]	; 0xffffffec
   2125c:	vldr	d6, [pc, #228]	; 21348 <_start@@Base+0xe958>
   21260:	vcmpe.f64	d7, d6
   21264:	vmrs	APSR_nzcv, fpscr
   21268:	bpl	21284 <_start@@Base+0xe894>
   2126c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   21270:	ldr	r1, [pc, #244]	; 2136c <_start@@Base+0xe97c>
   21274:	add	r1, pc, r1
   21278:	mov	r0, r1
   2127c:	bl	128f0 <printf@plt>
   21280:	b	21314 <_start@@Base+0xe924>
   21284:	vldr	d7, [fp, #-20]	; 0xffffffec
   21288:	vldr	d6, [pc, #160]	; 21330 <_start@@Base+0xe940>
   2128c:	vcmpe.f64	d7, d6
   21290:	vmrs	APSR_nzcv, fpscr
   21294:	bpl	212bc <_start@@Base+0xe8cc>
   21298:	vldr	d7, [fp, #-20]	; 0xffffffec
   2129c:	vldr	d6, [pc, #164]	; 21348 <_start@@Base+0xe958>
   212a0:	vdiv.f64	d5, d7, d6
   212a4:	vmov	r2, r3, d5
   212a8:	ldr	r1, [pc, #192]	; 21370 <_start@@Base+0xe980>
   212ac:	add	r1, pc, r1
   212b0:	mov	r0, r1
   212b4:	bl	128f0 <printf@plt>
   212b8:	b	21314 <_start@@Base+0xe924>
   212bc:	vldr	d7, [fp, #-20]	; 0xffffffec
   212c0:	vldr	d6, [pc, #120]	; 21340 <_start@@Base+0xe950>
   212c4:	vcmpe.f64	d7, d6
   212c8:	vmrs	APSR_nzcv, fpscr
   212cc:	bpl	212f4 <_start@@Base+0xe904>
   212d0:	vldr	d7, [fp, #-20]	; 0xffffffec
   212d4:	vldr	d6, [pc, #84]	; 21330 <_start@@Base+0xe940>
   212d8:	vdiv.f64	d5, d7, d6
   212dc:	vmov	r2, r3, d5
   212e0:	ldr	r1, [pc, #140]	; 21374 <_start@@Base+0xe984>
   212e4:	add	r1, pc, r1
   212e8:	mov	r0, r1
   212ec:	bl	128f0 <printf@plt>
   212f0:	b	21314 <_start@@Base+0xe924>
   212f4:	vldr	d7, [fp, #-20]	; 0xffffffec
   212f8:	vldr	d6, [pc, #64]	; 21340 <_start@@Base+0xe950>
   212fc:	vdiv.f64	d5, d7, d6
   21300:	vmov	r2, r3, d5
   21304:	ldr	r1, [pc, #108]	; 21378 <_start@@Base+0xe988>
   21308:	add	r1, pc, r1
   2130c:	mov	r0, r1
   21310:	bl	128f0 <printf@plt>
   21314:	mov	r3, #0
   21318:	mov	r0, r3
   2131c:	sub	sp, fp, #4
   21320:	ldr	fp, [sp]
   21324:	add	sp, sp, #4
   21328:	pop	{pc}		; (ldr pc, [sp], #4)
   2132c:	nop	{0}
   21330:	andeq	r0, r0, r0
   21334:	smlawbmi	lr, r0, r4, r8
   21338:	andeq	r0, r0, r0
   2133c:	svccc	0x00f00000	; IMB
   21340:	andeq	r0, r0, r0
   21344:	bicmi	ip, sp, r5, ror #26
   21348:	andeq	r0, r0, r0
   2134c:	addmi	r4, pc, r0
   21350:	andeq	r1, r1, r0, lsr ip
   21354:	andeq	r1, r1, ip, lsr #24
   21358:	andeq	r1, r1, r0, lsr ip
   2135c:	andeq	r1, r1, ip, lsr #24
   21360:	andeq	r1, r1, r0, lsl #24
   21364:	strdeq	r1, [r1], -r0
   21368:	ldrdeq	r1, [r1], -r8
   2136c:			; <UNDEFINED> instruction: 0x00011bb8
   21370:	muleq	r1, r8, fp
   21374:	andeq	r1, r1, r8, ror fp
   21378:	andeq	r1, r1, ip, ror #22

0002137c <verify_empty_monster@@Base>:
   2137c:	str	fp, [sp, #-8]!
   21380:	str	lr, [sp, #4]
   21384:	add	fp, sp, #4
   21388:	sub	sp, sp, #32
   2138c:	str	r0, [fp, #-32]	; 0xffffffe0
   21390:	ldr	r3, [pc, #484]	; 2157c <verify_empty_monster@@Base+0x200>
   21394:	add	r3, pc, r3
   21398:	mov	r1, r3
   2139c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   213a0:	bl	15cf0 <_start@@Base+0x3300>
   213a4:	str	r0, [fp, #-8]
   213a8:	ldr	r3, [pc, #464]	; 21580 <verify_empty_monster@@Base+0x204>
   213ac:	add	r3, pc, r3
   213b0:	mov	r1, r3
   213b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   213b8:	bl	15cf0 <_start@@Base+0x3300>
   213bc:	str	r0, [fp, #-12]
   213c0:	mov	r1, #0
   213c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   213c8:	bl	15cf0 <_start@@Base+0x3300>
   213cc:	str	r0, [fp, #-16]
   213d0:	ldr	r3, [pc, #428]	; 21584 <verify_empty_monster@@Base+0x208>
   213d4:	add	r3, pc, r3
   213d8:	mov	r1, r3
   213dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   213e0:	bl	15cf0 <_start@@Base+0x3300>
   213e4:	str	r0, [fp, #-20]	; 0xffffffec
   213e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   213ec:	bl	15d5c <_start@@Base+0x336c>
   213f0:	str	r0, [fp, #-24]	; 0xffffffe8
   213f4:	ldr	r3, [fp, #-8]
   213f8:	cmp	r3, #0
   213fc:	bne	21418 <verify_empty_monster@@Base+0x9c>
   21400:	ldr	r3, [pc, #384]	; 21588 <verify_empty_monster@@Base+0x20c>
   21404:	add	r3, pc, r3
   21408:	mov	r0, r3
   2140c:	bl	12944 <puts@plt>
   21410:	mvn	r3, #0
   21414:	b	21568 <verify_empty_monster@@Base+0x1ec>
   21418:	ldr	r3, [fp, #-12]
   2141c:	cmp	r3, #0
   21420:	beq	2143c <verify_empty_monster@@Base+0xc0>
   21424:	ldr	r3, [pc, #352]	; 2158c <verify_empty_monster@@Base+0x210>
   21428:	add	r3, pc, r3
   2142c:	mov	r0, r3
   21430:	bl	12944 <puts@plt>
   21434:	mvn	r3, #0
   21438:	b	21568 <verify_empty_monster@@Base+0x1ec>
   2143c:	ldr	r2, [fp, #-16]
   21440:	ldr	r3, [fp, #-8]
   21444:	cmp	r2, r3
   21448:	beq	21464 <verify_empty_monster@@Base+0xe8>
   2144c:	ldr	r3, [pc, #316]	; 21590 <verify_empty_monster@@Base+0x214>
   21450:	add	r3, pc, r3
   21454:	mov	r0, r3
   21458:	bl	12944 <puts@plt>
   2145c:	mvn	r3, #0
   21460:	b	21568 <verify_empty_monster@@Base+0x1ec>
   21464:	ldr	r2, [fp, #-20]	; 0xffffffec
   21468:	ldr	r3, [fp, #-8]
   2146c:	cmp	r2, r3
   21470:	beq	2148c <verify_empty_monster@@Base+0x110>
   21474:	ldr	r3, [pc, #280]	; 21594 <verify_empty_monster@@Base+0x218>
   21478:	add	r3, pc, r3
   2147c:	mov	r0, r3
   21480:	bl	128f0 <printf@plt>
   21484:	mvn	r3, #0
   21488:	b	21568 <verify_empty_monster@@Base+0x1ec>
   2148c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   21490:	ldr	r3, [fp, #-8]
   21494:	cmp	r2, r3
   21498:	beq	214b4 <verify_empty_monster@@Base+0x138>
   2149c:	ldr	r3, [pc, #244]	; 21598 <verify_empty_monster@@Base+0x21c>
   214a0:	add	r3, pc, r3
   214a4:	mov	r0, r3
   214a8:	bl	128f0 <printf@plt>
   214ac:	mvn	r3, #0
   214b0:	b	21568 <verify_empty_monster@@Base+0x1ec>
   214b4:	ldr	r0, [fp, #-8]
   214b8:	bl	15fb0 <_start@@Base+0x35c0>
   214bc:	mov	r3, r0
   214c0:	cmp	r3, #100	; 0x64
   214c4:	beq	214e0 <verify_empty_monster@@Base+0x164>
   214c8:	ldr	r3, [pc, #204]	; 2159c <verify_empty_monster@@Base+0x220>
   214cc:	add	r3, pc, r3
   214d0:	mov	r0, r3
   214d4:	bl	12944 <puts@plt>
   214d8:	mvn	r3, #0
   214dc:	b	21568 <verify_empty_monster@@Base+0x1ec>
   214e0:	ldr	r0, [fp, #-8]
   214e4:	bl	160b0 <_start@@Base+0x36c0>
   214e8:	mov	r3, r0
   214ec:	cmp	r3, #0
   214f0:	beq	2150c <verify_empty_monster@@Base+0x190>
   214f4:	ldr	r3, [pc, #164]	; 215a0 <verify_empty_monster@@Base+0x224>
   214f8:	add	r3, pc, r3
   214fc:	mov	r0, r3
   21500:	bl	12944 <puts@plt>
   21504:	mvn	r3, #0
   21508:	b	21568 <verify_empty_monster@@Base+0x1ec>
   2150c:	ldr	r0, [fp, #-8]
   21510:	bl	15ec8 <_start@@Base+0x34d8>
   21514:	mov	r3, r0
   21518:	cmp	r3, #0
   2151c:	beq	21538 <verify_empty_monster@@Base+0x1bc>
   21520:	ldr	r3, [pc, #124]	; 215a4 <verify_empty_monster@@Base+0x228>
   21524:	add	r3, pc, r3
   21528:	mov	r0, r3
   2152c:	bl	12944 <puts@plt>
   21530:	mvn	r3, #0
   21534:	b	21568 <verify_empty_monster@@Base+0x1ec>
   21538:	ldr	r0, [fp, #-8]
   2153c:	bl	15dd4 <_start@@Base+0x33e4>
   21540:	mov	r3, r0
   21544:	cmp	r3, #0
   21548:	beq	21564 <verify_empty_monster@@Base+0x1e8>
   2154c:	ldr	r3, [pc, #84]	; 215a8 <verify_empty_monster@@Base+0x22c>
   21550:	add	r3, pc, r3
   21554:	mov	r0, r3
   21558:	bl	12944 <puts@plt>
   2155c:	mvn	r3, #0
   21560:	b	21568 <verify_empty_monster@@Base+0x1ec>
   21564:	mov	r3, #0
   21568:	mov	r0, r3
   2156c:	sub	sp, fp, #4
   21570:	ldr	fp, [sp]
   21574:	add	sp, sp, #4
   21578:	pop	{pc}		; (ldr pc, [sp], #4)
   2157c:	andeq	r1, r1, r0, ror #5
   21580:	andeq	r1, r1, r4, asr #22
   21584:	andeq	r1, r1, r4, lsr #22
   21588:	strdeq	r1, [r1], -ip
   2158c:	strdeq	r1, [r1], -r0
   21590:	strdeq	r1, [r1], -r8
   21594:	andeq	r1, r1, r8, lsl #22
   21598:	andeq	r1, r1, r4, lsl fp
   2159c:	andeq	r1, r1, r4, lsl fp
   215a0:	andeq	r1, r1, ip, lsl #22
   215a4:	andeq	r1, r1, r0, lsl #22
   215a8:	strdeq	r1, [r1], -r0

000215ac <test_enums@@Base>:
   215ac:	push	{fp}		; (str fp, [sp, #-4]!)
   215b0:	add	fp, sp, #0
   215b4:	sub	sp, sp, #12
   215b8:	str	r0, [fp, #-8]
   215bc:	mov	r3, #0
   215c0:	mov	r0, r3
   215c4:	add	sp, fp, #0
   215c8:	pop	{fp}		; (ldr fp, [sp], #4)
   215cc:	bx	lr

000215d0 <test_type_aliases@@Base>:
   215d0:	str	r4, [sp, #-12]!
   215d4:	str	fp, [sp, #4]
   215d8:	str	lr, [sp, #8]
   215dc:	add	fp, sp, #8
   215e0:	sub	sp, sp, #76	; 0x4c
   215e4:	str	r0, [fp, #-40]	; 0xffffffd8
   215e8:	ldr	r4, [pc, #692]	; 218a4 <test_type_aliases@@Base+0x2d4>
   215ec:	add	r4, pc, r4
   215f0:	mov	r3, #0
   215f4:	str	r3, [fp, #-16]
   215f8:	mov	r3, #0
   215fc:	str	r3, [fp, #-20]	; 0xffffffec
   21600:	ldr	r0, [fp, #-40]	; 0xffffffd8
   21604:	bl	29bf4 <flatcc_builder_reset@@Base>
   21608:	mov	r2, #0
   2160c:	mov	r1, #0
   21610:	ldr	r0, [fp, #-40]	; 0xffffffd8
   21614:	bl	1a344 <_start@@Base+0x7954>
   21618:	str	r0, [fp, #-24]	; 0xffffffe8
   2161c:	mov	r2, #0
   21620:	mov	r1, #0
   21624:	ldr	r0, [fp, #-40]	; 0xffffffd8
   21628:	bl	1a940 <_start@@Base+0x7f50>
   2162c:	str	r0, [fp, #-28]	; 0xffffffe4
   21630:	ldr	r3, [fp, #-28]	; 0xffffffe4
   21634:	str	r3, [sp, #36]	; 0x24
   21638:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2163c:	str	r3, [sp, #32]
   21640:	mvn	r2, #0
   21644:	mvn	r3, #0
   21648:	strd	r2, [sp, #24]
   2164c:	mov	r2, #0
   21650:	mov	r3, #-2147483648	; 0x80000000
   21654:	strd	r2, [sp, #16]
   21658:	mvn	r3, #0
   2165c:	str	r3, [sp, #8]
   21660:	mov	r3, #-2147483648	; 0x80000000
   21664:	str	r3, [sp, #4]
   21668:	movw	r3, #65535	; 0xffff
   2166c:	str	r3, [sp]
   21670:	vldr	d1, [pc, #544]	; 21898 <test_type_aliases@@Base+0x2c8>
   21674:	vldr	s0, [pc, #548]	; 218a0 <test_type_aliases@@Base+0x2d0>
   21678:	mov	r3, #32768	; 0x8000
   2167c:	movt	r3, #65535	; 0xffff
   21680:	mov	r2, #255	; 0xff
   21684:	mvn	r1, #127	; 0x7f
   21688:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2168c:	bl	1e9e8 <_start@@Base+0xbff8>
   21690:	sub	r3, fp, #36	; 0x24
   21694:	mov	r1, r3
   21698:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2169c:	bl	2efe8 <flatcc_builder_finalize_aligned_buffer@@Base>
   216a0:	str	r0, [fp, #-20]	; 0xffffffec
   216a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   216a8:	mov	r1, r3
   216ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   216b0:	bl	20c08 <_start@@Base+0xe218>
   216b4:	str	r0, [fp, #-16]
   216b8:	ldr	r3, [fp, #-16]
   216bc:	cmp	r3, #0
   216c0:	beq	21708 <test_type_aliases@@Base+0x138>
   216c4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   216c8:	ldr	r3, [pc, #472]	; 218a8 <test_type_aliases@@Base+0x2d8>
   216cc:	ldr	r3, [r4, r3]
   216d0:	ldr	r3, [r3]
   216d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   216d8:	ldr	r0, [pc, #460]	; 218ac <test_type_aliases@@Base+0x2dc>
   216dc:	add	r0, pc, r0
   216e0:	bl	20e38 <_start@@Base+0xe448>
   216e4:	ldr	r0, [fp, #-16]
   216e8:	bl	2ff24 <flatcc_verify_error_string@@Base>
   216ec:	mov	r3, r0
   216f0:	mov	r1, r3
   216f4:	ldr	r3, [pc, #436]	; 218b0 <test_type_aliases@@Base+0x2e0>
   216f8:	add	r3, pc, r3
   216fc:	mov	r0, r3
   21700:	bl	128f0 <printf@plt>
   21704:	b	21808 <test_type_aliases@@Base+0x238>
   21708:	ldr	r0, [fp, #-20]	; 0xffffffec
   2170c:	bl	186fc <_start@@Base+0x5d0c>
   21710:	str	r0, [fp, #-32]	; 0xffffffe0
   21714:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21718:	bl	18774 <_start@@Base+0x5d84>
   2171c:	mov	r3, r0
   21720:	cmn	r3, #128	; 0x80
   21724:	bne	21818 <test_type_aliases@@Base+0x248>
   21728:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2172c:	bl	18974 <_start@@Base+0x5f84>
   21730:	mov	r3, r0
   21734:	cmn	r3, #32768	; 0x8000
   21738:	bne	21820 <test_type_aliases@@Base+0x250>
   2173c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21740:	bl	18b74 <_start@@Base+0x6184>
   21744:	mov	r3, r0
   21748:	cmp	r3, #-2147483648	; 0x80000000
   2174c:	bne	21828 <test_type_aliases@@Base+0x258>
   21750:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21754:	bl	18d74 <_start@@Base+0x6384>
   21758:	mov	r2, r0
   2175c:	mov	r3, r1
   21760:	cmp	r3, #-2147483648	; 0x80000000
   21764:	cmpeq	r2, #0
   21768:	bne	21830 <test_type_aliases@@Base+0x260>
   2176c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21770:	bl	18874 <_start@@Base+0x5e84>
   21774:	mov	r3, r0
   21778:	cmp	r3, #255	; 0xff
   2177c:	bne	21838 <test_type_aliases@@Base+0x268>
   21780:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21784:	bl	18a74 <_start@@Base+0x6084>
   21788:	mov	r3, r0
   2178c:	mov	r2, r3
   21790:	movw	r3, #65535	; 0xffff
   21794:	cmp	r2, r3
   21798:	bne	21840 <test_type_aliases@@Base+0x270>
   2179c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   217a0:	bl	18c74 <_start@@Base+0x6284>
   217a4:	mov	r3, r0
   217a8:	cmn	r3, #1
   217ac:	bne	21848 <test_type_aliases@@Base+0x278>
   217b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   217b4:	bl	18e80 <_start@@Base+0x6490>
   217b8:	mvn	r2, #0
   217bc:	mvn	r3, #0
   217c0:	cmp	r1, r3
   217c4:	cmpeq	r0, r2
   217c8:	bne	21850 <test_type_aliases@@Base+0x280>
   217cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   217d0:	bl	18f8c <_start@@Base+0x659c>
   217d4:	vmov.f32	s14, s0
   217d8:	vldr	s15, [pc, #192]	; 218a0 <test_type_aliases@@Base+0x2d0>
   217dc:	vcmp.f32	s14, s15
   217e0:	vmrs	APSR_nzcv, fpscr
   217e4:	bne	21858 <test_type_aliases@@Base+0x288>
   217e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   217ec:	bl	19090 <_start@@Base+0x66a0>
   217f0:	vmov.f64	d6, d0
   217f4:	vldr	d7, [pc, #156]	; 21898 <test_type_aliases@@Base+0x2c8>
   217f8:	vcmp.f64	d6, d7
   217fc:	vmrs	APSR_nzcv, fpscr
   21800:	bne	21860 <test_type_aliases@@Base+0x290>
   21804:	nop	{0}
   21808:	ldr	r0, [fp, #-20]	; 0xffffffec
   2180c:	bl	2f124 <flatcc_builder_aligned_free@@Base>
   21810:	ldr	r3, [fp, #-16]
   21814:	b	21880 <test_type_aliases@@Base+0x2b0>
   21818:	nop	{0}
   2181c:	b	21864 <test_type_aliases@@Base+0x294>
   21820:	nop	{0}
   21824:	b	21864 <test_type_aliases@@Base+0x294>
   21828:	nop	{0}
   2182c:	b	21864 <test_type_aliases@@Base+0x294>
   21830:	nop	{0}
   21834:	b	21864 <test_type_aliases@@Base+0x294>
   21838:	nop	{0}
   2183c:	b	21864 <test_type_aliases@@Base+0x294>
   21840:	nop	{0}
   21844:	b	21864 <test_type_aliases@@Base+0x294>
   21848:	nop	{0}
   2184c:	b	21864 <test_type_aliases@@Base+0x294>
   21850:	nop	{0}
   21854:	b	21864 <test_type_aliases@@Base+0x294>
   21858:	nop	{0}
   2185c:	b	21864 <test_type_aliases@@Base+0x294>
   21860:	nop	{0}
   21864:	mvn	r3, #0
   21868:	str	r3, [fp, #-16]
   2186c:	ldr	r3, [pc, #64]	; 218b4 <test_type_aliases@@Base+0x2e4>
   21870:	add	r3, pc, r3
   21874:	mov	r0, r3
   21878:	bl	12944 <puts@plt>
   2187c:	b	21808 <test_type_aliases@@Base+0x238>
   21880:	mov	r0, r3
   21884:	sub	sp, fp, #8
   21888:	ldr	r4, [sp]
   2188c:	ldr	fp, [sp, #4]
   21890:	add	sp, sp, #8
   21894:	pop	{pc}		; (ldr pc, [sp], #4)
   21898:	strbtvs	r6, [r6], -r6, ror #12
   2189c:	andmi	r6, r2, r6, ror #12
   218a0:	andsmi	r3, r3, r3, lsr r3
   218a4:	andeq	r6, r2, ip, lsl #20
   218a8:	andeq	r0, r0, r8, rrx
   218ac:	andeq	r1, r1, r4, lsl #19
   218b0:	andeq	r1, r1, ip, ror r9
   218b4:	andeq	r1, r1, r0, lsr r8

000218b8 <test_empty_monster@@Base>:
   218b8:	str	r4, [sp, #-12]!
   218bc:	str	fp, [sp, #4]
   218c0:	str	lr, [sp, #8]
   218c4:	add	fp, sp, #8
   218c8:	sub	sp, sp, #28
   218cc:	str	r0, [fp, #-32]	; 0xffffffe0
   218d0:	ldr	r4, [pc, #340]	; 21a2c <test_empty_monster@@Base+0x174>
   218d4:	add	r4, pc, r4
   218d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   218dc:	bl	29bf4 <flatcc_builder_reset@@Base>
   218e0:	ldr	r3, [pc, #328]	; 21a30 <test_empty_monster@@Base+0x178>
   218e4:	add	r3, pc, r3
   218e8:	mov	r1, r3
   218ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   218f0:	bl	1ab54 <_start@@Base+0x8164>
   218f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   218f8:	bl	1b968 <_start@@Base+0x8f78>
   218fc:	ldr	r3, [pc, #304]	; 21a34 <test_empty_monster@@Base+0x17c>
   21900:	add	r3, pc, r3
   21904:	mov	r1, r3
   21908:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2190c:	bl	1cb00 <_start@@Base+0xa110>
   21910:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21914:	bl	1b9a0 <_start@@Base+0x8fb0>
   21918:	str	r0, [fp, #-20]	; 0xffffffec
   2191c:	ldr	r1, [fp, #-20]	; 0xffffffec
   21920:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21924:	bl	1abdc <_start@@Base+0x81ec>
   21928:	sub	r3, fp, #28
   2192c:	mov	r1, r3
   21930:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21934:	bl	2efe8 <flatcc_builder_finalize_aligned_buffer@@Base>
   21938:	str	r0, [fp, #-24]	; 0xffffffe8
   2193c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   21940:	ldr	r3, [pc, #240]	; 21a38 <test_empty_monster@@Base+0x180>
   21944:	ldr	r3, [r4, r3]
   21948:	ldr	r3, [r3]
   2194c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   21950:	ldr	r0, [pc, #228]	; 21a3c <test_empty_monster@@Base+0x184>
   21954:	add	r0, pc, r0
   21958:	bl	20e38 <_start@@Base+0xe448>
   2195c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21960:	bl	2137c <verify_empty_monster@@Base>
   21964:	str	r0, [fp, #-16]
   21968:	ldr	r3, [fp, #-16]
   2196c:	cmp	r3, #0
   21970:	bne	219fc <test_empty_monster@@Base+0x144>
   21974:	ldr	r3, [fp, #-28]	; 0xffffffe4
   21978:	ldr	r2, [pc, #192]	; 21a40 <test_empty_monster@@Base+0x188>
   2197c:	add	r2, pc, r2
   21980:	mov	r1, r3
   21984:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21988:	bl	2090c <_start@@Base+0xdf1c>
   2198c:	str	r0, [fp, #-16]
   21990:	ldr	r3, [fp, #-16]
   21994:	cmp	r3, #0
   21998:	beq	219c4 <test_empty_monster@@Base+0x10c>
   2199c:	ldr	r0, [fp, #-16]
   219a0:	bl	2ff24 <flatcc_verify_error_string@@Base>
   219a4:	mov	r3, r0
   219a8:	mov	r1, r3
   219ac:	ldr	r3, [pc, #144]	; 21a44 <test_empty_monster@@Base+0x18c>
   219b0:	add	r3, pc, r3
   219b4:	mov	r0, r3
   219b8:	bl	128f0 <printf@plt>
   219bc:	mvn	r3, #0
   219c0:	b	21a14 <test_empty_monster@@Base+0x15c>
   219c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   219c8:	sub	r3, r3, #1
   219cc:	mov	r1, r3
   219d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   219d4:	bl	20864 <_start@@Base+0xde74>
   219d8:	mov	r3, r0
   219dc:	cmp	r3, #0
   219e0:	bne	21a04 <test_empty_monster@@Base+0x14c>
   219e4:	ldr	r3, [pc, #92]	; 21a48 <test_empty_monster@@Base+0x190>
   219e8:	add	r3, pc, r3
   219ec:	mov	r0, r3
   219f0:	bl	12944 <puts@plt>
   219f4:	mvn	r3, #0
   219f8:	b	21a14 <test_empty_monster@@Base+0x15c>
   219fc:	nop	{0}
   21a00:	b	21a08 <test_empty_monster@@Base+0x150>
   21a04:	nop	{0}
   21a08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21a0c:	bl	2f124 <flatcc_builder_aligned_free@@Base>
   21a10:	ldr	r3, [fp, #-16]
   21a14:	mov	r0, r3
   21a18:	sub	sp, fp, #8
   21a1c:	ldr	r4, [sp]
   21a20:	ldr	fp, [sp, #4]
   21a24:	add	sp, sp, #8
   21a28:	pop	{pc}		; (ldr pc, [sp], #4)
   21a2c:	andeq	r6, r2, r4, lsr #14
   21a30:	muleq	r1, r0, sp
   21a34:	ldrdeq	r1, [r1], -r0
   21a38:	andeq	r0, r0, r8, rrx
   21a3c:	andeq	r1, r1, r8, lsl #15
   21a40:	strdeq	r0, [r1], -r8
   21a44:	andeq	r1, r1, r0, asr #14
   21a48:	andeq	r1, r1, r0, lsr r7

00021a4c <test_typed_empty_monster@@Base>:
   21a4c:	str	r4, [sp, #-12]!
   21a50:	str	fp, [sp, #4]
   21a54:	str	lr, [sp, #8]
   21a58:	add	fp, sp, #8
   21a5c:	sub	sp, sp, #36	; 0x24
   21a60:	str	r0, [fp, #-40]	; 0xffffffd8
   21a64:	ldr	r4, [pc, #856]	; 21dc4 <test_typed_empty_monster@@Base+0x378>
   21a68:	add	r4, pc, r4
   21a6c:	mvn	r3, #0
   21a70:	str	r3, [fp, #-16]
   21a74:	mov	r3, #0
   21a78:	str	r3, [fp, #-32]	; 0xffffffe0
   21a7c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   21a80:	bl	29bf4 <flatcc_builder_reset@@Base>
   21a84:	ldr	r3, [pc, #828]	; 21dc8 <test_typed_empty_monster@@Base+0x37c>
   21a88:	add	r3, pc, r3
   21a8c:	mov	r1, r3
   21a90:	ldr	r0, [fp, #-40]	; 0xffffffd8
   21a94:	bl	1ab54 <_start@@Base+0x8164>
   21a98:	ldr	r0, [fp, #-40]	; 0xffffffd8
   21a9c:	bl	1b968 <_start@@Base+0x8f78>
   21aa0:	ldr	r3, [pc, #804]	; 21dcc <test_typed_empty_monster@@Base+0x380>
   21aa4:	add	r3, pc, r3
   21aa8:	mov	r1, r3
   21aac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   21ab0:	bl	1cb00 <_start@@Base+0xa110>
   21ab4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   21ab8:	bl	1b9a0 <_start@@Base+0x8fb0>
   21abc:	str	r0, [fp, #-20]	; 0xffffffec
   21ac0:	ldr	r1, [fp, #-20]	; 0xffffffec
   21ac4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   21ac8:	bl	1abdc <_start@@Base+0x81ec>
   21acc:	sub	r3, fp, #28
   21ad0:	mov	r1, r3
   21ad4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   21ad8:	bl	2efe8 <flatcc_builder_finalize_aligned_buffer@@Base>
   21adc:	str	r0, [fp, #-24]	; 0xffffffe8
   21ae0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   21ae4:	ldr	r3, [pc, #740]	; 21dd0 <test_typed_empty_monster@@Base+0x384>
   21ae8:	ldr	r3, [r4, r3]
   21aec:	ldr	r3, [r3]
   21af0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   21af4:	ldr	r0, [pc, #728]	; 21dd4 <test_typed_empty_monster@@Base+0x388>
   21af8:	add	r0, pc, r0
   21afc:	bl	20e38 <_start@@Base+0xe448>
   21b00:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21b04:	bl	148b4 <_start@@Base+0x1ec4>
   21b08:	mov	r4, r0
   21b0c:	ldr	r3, [pc, #708]	; 21dd8 <test_typed_empty_monster@@Base+0x38c>
   21b10:	add	r3, pc, r3
   21b14:	mov	r0, r3
   21b18:	bl	1344c <_start@@Base+0xa5c>
   21b1c:	mov	r3, r0
   21b20:	cmp	r4, r3
   21b24:	beq	21b4c <test_typed_empty_monster@@Base+0x100>
   21b28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21b2c:	bl	148b4 <_start@@Base+0x1ec4>
   21b30:	mov	r3, r0
   21b34:	mov	r1, r3
   21b38:	ldr	r3, [pc, #668]	; 21ddc <test_typed_empty_monster@@Base+0x390>
   21b3c:	add	r3, pc, r3
   21b40:	mov	r0, r3
   21b44:	bl	128f0 <printf@plt>
   21b48:	b	21da0 <test_typed_empty_monster@@Base+0x354>
   21b4c:	movw	r1, #62593	; 0xf481
   21b50:	movt	r1, #13070	; 0x330e
   21b54:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21b58:	bl	14850 <_start@@Base+0x1e60>
   21b5c:	mov	r3, r0
   21b60:	cmp	r3, #0
   21b64:	bne	21b7c <test_typed_empty_monster@@Base+0x130>
   21b68:	ldr	r3, [pc, #624]	; 21de0 <test_typed_empty_monster@@Base+0x394>
   21b6c:	add	r3, pc, r3
   21b70:	mov	r0, r3
   21b74:	bl	12944 <puts@plt>
   21b78:	b	21da0 <test_typed_empty_monster@@Base+0x354>
   21b7c:	movw	r1, #62593	; 0xf481
   21b80:	movt	r1, #13070	; 0x330e
   21b84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21b88:	bl	14850 <_start@@Base+0x1e60>
   21b8c:	mov	r3, r0
   21b90:	cmp	r3, #0
   21b94:	bne	21bac <test_typed_empty_monster@@Base+0x160>
   21b98:	ldr	r3, [pc, #580]	; 21de4 <test_typed_empty_monster@@Base+0x398>
   21b9c:	add	r3, pc, r3
   21ba0:	mov	r0, r3
   21ba4:	bl	12944 <puts@plt>
   21ba8:	b	21da0 <test_typed_empty_monster@@Base+0x354>
   21bac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21bb0:	bl	2137c <verify_empty_monster@@Base>
   21bb4:	mov	r3, r0
   21bb8:	cmp	r3, #0
   21bbc:	bne	21bd4 <test_typed_empty_monster@@Base+0x188>
   21bc0:	ldr	r3, [pc, #544]	; 21de8 <test_typed_empty_monster@@Base+0x39c>
   21bc4:	add	r3, pc, r3
   21bc8:	mov	r0, r3
   21bcc:	bl	12944 <puts@plt>
   21bd0:	b	21da0 <test_typed_empty_monster@@Base+0x354>
   21bd4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   21bd8:	ldr	r2, [pc, #524]	; 21dec <test_typed_empty_monster@@Base+0x3a0>
   21bdc:	add	r2, pc, r2
   21be0:	mov	r1, r3
   21be4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21be8:	bl	2090c <_start@@Base+0xdf1c>
   21bec:	str	r0, [fp, #-16]
   21bf0:	ldr	r3, [fp, #-16]
   21bf4:	cmp	r3, #0
   21bf8:	beq	21c20 <test_typed_empty_monster@@Base+0x1d4>
   21bfc:	ldr	r0, [fp, #-16]
   21c00:	bl	2ff24 <flatcc_verify_error_string@@Base>
   21c04:	mov	r3, r0
   21c08:	mov	r1, r3
   21c0c:	ldr	r3, [pc, #476]	; 21df0 <test_typed_empty_monster@@Base+0x3a4>
   21c10:	add	r3, pc, r3
   21c14:	mov	r0, r3
   21c18:	bl	128f0 <printf@plt>
   21c1c:	b	21da0 <test_typed_empty_monster@@Base+0x354>
   21c20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   21c24:	mov	r1, r3
   21c28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21c2c:	bl	208b8 <_start@@Base+0xdec8>
   21c30:	str	r0, [fp, #-16]
   21c34:	ldr	r3, [fp, #-16]
   21c38:	cmp	r3, #0
   21c3c:	beq	21c64 <test_typed_empty_monster@@Base+0x218>
   21c40:	ldr	r0, [fp, #-16]
   21c44:	bl	2ff24 <flatcc_verify_error_string@@Base>
   21c48:	mov	r3, r0
   21c4c:	mov	r1, r3
   21c50:	ldr	r3, [pc, #412]	; 21df4 <test_typed_empty_monster@@Base+0x3a8>
   21c54:	add	r3, pc, r3
   21c58:	mov	r0, r3
   21c5c:	bl	128f0 <printf@plt>
   21c60:	b	21da0 <test_typed_empty_monster@@Base+0x354>
   21c64:	ldr	r3, [fp, #-28]	; 0xffffffe4
   21c68:	movw	r2, #62593	; 0xf481
   21c6c:	movt	r2, #13070	; 0x330e
   21c70:	mov	r1, r3
   21c74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21c78:	bl	2095c <_start@@Base+0xdf6c>
   21c7c:	str	r0, [fp, #-16]
   21c80:	ldr	r3, [fp, #-16]
   21c84:	cmp	r3, #0
   21c88:	beq	21cb0 <test_typed_empty_monster@@Base+0x264>
   21c8c:	ldr	r0, [fp, #-16]
   21c90:	bl	2ff24 <flatcc_verify_error_string@@Base>
   21c94:	mov	r3, r0
   21c98:	mov	r1, r3
   21c9c:	ldr	r3, [pc, #340]	; 21df8 <test_typed_empty_monster@@Base+0x3ac>
   21ca0:	add	r3, pc, r3
   21ca4:	mov	r0, r3
   21ca8:	bl	128f0 <printf@plt>
   21cac:	b	21da0 <test_typed_empty_monster@@Base+0x354>
   21cb0:	ldr	r4, [fp, #-28]	; 0xffffffe4
   21cb4:	ldr	r3, [pc, #320]	; 21dfc <test_typed_empty_monster@@Base+0x3b0>
   21cb8:	add	r3, pc, r3
   21cbc:	mov	r0, r3
   21cc0:	bl	1344c <_start@@Base+0xa5c>
   21cc4:	mov	r3, r0
   21cc8:	mov	r2, r3
   21ccc:	mov	r1, r4
   21cd0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21cd4:	bl	2095c <_start@@Base+0xdf6c>
   21cd8:	str	r0, [fp, #-16]
   21cdc:	ldr	r3, [fp, #-16]
   21ce0:	cmp	r3, #0
   21ce4:	beq	21d0c <test_typed_empty_monster@@Base+0x2c0>
   21ce8:	ldr	r0, [fp, #-16]
   21cec:	bl	2ff24 <flatcc_verify_error_string@@Base>
   21cf0:	mov	r3, r0
   21cf4:	mov	r1, r3
   21cf8:	ldr	r3, [pc, #256]	; 21e00 <test_typed_empty_monster@@Base+0x3b4>
   21cfc:	add	r3, pc, r3
   21d00:	mov	r0, r3
   21d04:	bl	128f0 <printf@plt>
   21d08:	b	21da0 <test_typed_empty_monster@@Base+0x354>
   21d0c:	sub	r3, fp, #32
   21d10:	mov	r1, r3
   21d14:	movw	r0, #62593	; 0xf481
   21d18:	movt	r0, #13070	; 0x330e
   21d1c:	bl	134e0 <_start@@Base+0xaf0>
   21d20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   21d24:	sub	r2, fp, #32
   21d28:	mov	r1, r3
   21d2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21d30:	bl	2090c <_start@@Base+0xdf1c>
   21d34:	str	r0, [fp, #-16]
   21d38:	ldr	r3, [fp, #-16]
   21d3c:	cmp	r3, #0
   21d40:	beq	21d68 <test_typed_empty_monster@@Base+0x31c>
   21d44:	ldr	r0, [fp, #-16]
   21d48:	bl	2ff24 <flatcc_verify_error_string@@Base>
   21d4c:	mov	r3, r0
   21d50:	mov	r1, r3
   21d54:	ldr	r3, [pc, #168]	; 21e04 <test_typed_empty_monster@@Base+0x3b8>
   21d58:	add	r3, pc, r3
   21d5c:	mov	r0, r3
   21d60:	bl	128f0 <printf@plt>
   21d64:	b	21da0 <test_typed_empty_monster@@Base+0x354>
   21d68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   21d6c:	mov	r1, r3
   21d70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21d74:	bl	20864 <_start@@Base+0xde74>
   21d78:	mov	r3, r0
   21d7c:	cmp	r3, #0
   21d80:	bne	21d98 <test_typed_empty_monster@@Base+0x34c>
   21d84:	ldr	r3, [pc, #124]	; 21e08 <test_typed_empty_monster@@Base+0x3bc>
   21d88:	add	r3, pc, r3
   21d8c:	mov	r0, r3
   21d90:	bl	12944 <puts@plt>
   21d94:	b	21da0 <test_typed_empty_monster@@Base+0x354>
   21d98:	mov	r3, #0
   21d9c:	str	r3, [fp, #-16]
   21da0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21da4:	bl	2f124 <flatcc_builder_aligned_free@@Base>
   21da8:	ldr	r3, [fp, #-16]
   21dac:	mov	r0, r3
   21db0:	sub	sp, fp, #8
   21db4:	ldr	r4, [sp]
   21db8:	ldr	fp, [sp, #4]
   21dbc:	add	sp, sp, #8
   21dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   21dc4:	muleq	r2, r0, r5
   21dc8:	andeq	r1, r1, ip, asr #5
   21dcc:	andeq	r1, r1, ip, lsr #12
   21dd0:	andeq	r0, r0, r8, rrx
   21dd4:	andeq	r1, r1, r0, asr r6
   21dd8:	andeq	r1, r1, r4, asr r6
   21ddc:	andeq	r1, r1, r0, asr #12
   21de0:	andeq	r1, r1, r4, asr #12
   21de4:	andeq	r1, r1, r4, lsl r6
   21de8:	andeq	r1, r1, r4, lsl r6
   21dec:	andeq	r1, r1, r8, ror r1
   21df0:	andeq	r1, r1, r8, lsl #12
   21df4:	andeq	r1, r1, r4, asr #11
   21df8:	andeq	r1, r1, r8, lsr #11
   21dfc:	andeq	r1, r1, ip, lsr #9
   21e00:	andeq	r1, r1, r4, lsl #11
   21e04:	andeq	r1, r1, r0, asr #9
   21e08:	andeq	r1, r1, r8, lsr r5

00021e0c <verify_table_with_emptystruct@@Base>:
   21e0c:	str	fp, [sp, #-8]!
   21e10:	str	lr, [sp, #4]
   21e14:	add	fp, sp, #4
   21e18:	sub	sp, sp, #16
   21e1c:	str	r0, [fp, #-16]
   21e20:	ldr	r0, [fp, #-16]
   21e24:	bl	151a8 <_start@@Base+0x27b8>
   21e28:	str	r0, [fp, #-8]
   21e2c:	ldr	r3, [fp, #-8]
   21e30:	cmp	r3, #0
   21e34:	bne	21e50 <verify_table_with_emptystruct@@Base+0x44>
   21e38:	ldr	r3, [pc, #128]	; 21ec0 <verify_table_with_emptystruct@@Base+0xb4>
   21e3c:	add	r3, pc, r3
   21e40:	mov	r0, r3
   21e44:	bl	12944 <puts@plt>
   21e48:	mvn	r3, #0
   21e4c:	b	21eac <verify_table_with_emptystruct@@Base+0xa0>
   21e50:	ldr	r0, [fp, #-8]
   21e54:	bl	1528c <_start@@Base+0x289c>
   21e58:	str	r0, [fp, #-12]
   21e5c:	ldr	r3, [fp, #-12]
   21e60:	cmp	r3, #0
   21e64:	bne	21e80 <verify_table_with_emptystruct@@Base+0x74>
   21e68:	ldr	r3, [pc, #84]	; 21ec4 <verify_table_with_emptystruct@@Base+0xb8>
   21e6c:	add	r3, pc, r3
   21e70:	mov	r0, r3
   21e74:	bl	12944 <puts@plt>
   21e78:	mvn	r3, #0
   21e7c:	b	21eac <verify_table_with_emptystruct@@Base+0xa0>
   21e80:	bl	14c64 <_start@@Base+0x2274>
   21e84:	mov	r3, r0
   21e88:	cmp	r3, #0
   21e8c:	beq	21ea8 <verify_table_with_emptystruct@@Base+0x9c>
   21e90:	ldr	r3, [pc, #48]	; 21ec8 <verify_table_with_emptystruct@@Base+0xbc>
   21e94:	add	r3, pc, r3
   21e98:	mov	r0, r3
   21e9c:	bl	12944 <puts@plt>
   21ea0:	mvn	r3, #0
   21ea4:	b	21eac <verify_table_with_emptystruct@@Base+0xa0>
   21ea8:	mov	r3, #0
   21eac:	mov	r0, r3
   21eb0:	sub	sp, fp, #4
   21eb4:	ldr	fp, [sp]
   21eb8:	add	sp, sp, #4
   21ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   21ec0:	ldrdeq	r1, [r1], -r0
   21ec4:	andeq	r1, r1, r8, asr #9
   21ec8:			; <UNDEFINED> instruction: 0x000114bc

00021ecc <test_table_with_emptystruct@@Base>:
   21ecc:	str	r4, [sp, #-12]!
   21ed0:	str	fp, [sp, #4]
   21ed4:	str	lr, [sp, #8]
   21ed8:	add	fp, sp, #8
   21edc:	sub	sp, sp, #28
   21ee0:	str	r0, [fp, #-32]	; 0xffffffe0
   21ee4:	ldr	r4, [pc, #128]	; 21f6c <test_table_with_emptystruct@@Base+0xa0>
   21ee8:	add	r4, pc, r4
   21eec:	mov	r3, #0
   21ef0:	str	r3, [fp, #-16]
   21ef4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21ef8:	bl	29bf4 <flatcc_builder_reset@@Base>
   21efc:	ldr	r1, [fp, #-16]
   21f00:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21f04:	bl	1c0b0 <_start@@Base+0x96c0>
   21f08:	sub	r3, fp, #28
   21f0c:	mov	r1, r3
   21f10:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21f14:	bl	2efe8 <flatcc_builder_finalize_aligned_buffer@@Base>
   21f18:	str	r0, [fp, #-20]	; 0xffffffec
   21f1c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   21f20:	ldr	r3, [pc, #72]	; 21f70 <test_table_with_emptystruct@@Base+0xa4>
   21f24:	ldr	r3, [r4, r3]
   21f28:	ldr	r3, [r3]
   21f2c:	ldr	r1, [fp, #-20]	; 0xffffffec
   21f30:	ldr	r0, [pc, #60]	; 21f74 <test_table_with_emptystruct@@Base+0xa8>
   21f34:	add	r0, pc, r0
   21f38:	bl	20e38 <_start@@Base+0xe448>
   21f3c:	ldr	r0, [fp, #-20]	; 0xffffffec
   21f40:	bl	21e0c <verify_table_with_emptystruct@@Base>
   21f44:	str	r0, [fp, #-24]	; 0xffffffe8
   21f48:	ldr	r0, [fp, #-20]	; 0xffffffec
   21f4c:	bl	2f124 <flatcc_builder_aligned_free@@Base>
   21f50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21f54:	mov	r0, r3
   21f58:	sub	sp, fp, #8
   21f5c:	ldr	r4, [sp]
   21f60:	ldr	fp, [sp, #4]
   21f64:	add	sp, sp, #8
   21f68:	pop	{pc}		; (ldr pc, [sp], #4)
   21f6c:	andeq	r6, r2, r0, lsl r1
   21f70:	andeq	r0, r0, r8, rrx
   21f74:	andeq	r1, r1, r8, lsr r4

00021f78 <test_typed_table_with_emptystruct@@Base>:
   21f78:	str	r4, [sp, #-12]!
   21f7c:	str	fp, [sp, #4]
   21f80:	str	lr, [sp, #8]
   21f84:	add	fp, sp, #8
   21f88:	sub	sp, sp, #28
   21f8c:	str	r0, [fp, #-32]	; 0xffffffe0
   21f90:	ldr	r4, [pc, #816]	; 222c8 <test_typed_table_with_emptystruct@@Base+0x350>
   21f94:	add	r4, pc, r4
   21f98:	mov	r3, #0
   21f9c:	str	r3, [fp, #-16]
   21fa0:	mov	r3, #0
   21fa4:	str	r3, [fp, #-20]	; 0xffffffec
   21fa8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21fac:	bl	29bf4 <flatcc_builder_reset@@Base>
   21fb0:	ldr	r1, [fp, #-20]	; 0xffffffec
   21fb4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21fb8:	bl	1c128 <_start@@Base+0x9738>
   21fbc:	sub	r3, fp, #28
   21fc0:	mov	r1, r3
   21fc4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21fc8:	bl	2edc8 <flatcc_builder_get_direct_buffer@@Base>
   21fcc:	str	r0, [fp, #-24]	; 0xffffffe8
   21fd0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   21fd4:	ldr	r3, [pc, #752]	; 222cc <test_typed_table_with_emptystruct@@Base+0x354>
   21fd8:	ldr	r3, [r4, r3]
   21fdc:	ldr	r3, [r3]
   21fe0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   21fe4:	ldr	r0, [pc, #740]	; 222d0 <test_typed_table_with_emptystruct@@Base+0x358>
   21fe8:	add	r0, pc, r0
   21fec:	bl	20e38 <_start@@Base+0xe448>
   21ff0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   21ff4:	ldr	r2, [pc, #728]	; 222d4 <test_typed_table_with_emptystruct@@Base+0x35c>
   21ff8:	add	r2, pc, r2
   21ffc:	mov	r1, r3
   22000:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22004:	bl	1f91c <_start@@Base+0xcf2c>
   22008:	mov	r3, r0
   2200c:	cmp	r3, #0
   22010:	beq	2202c <test_typed_table_with_emptystruct@@Base+0xb4>
   22014:	ldr	r3, [pc, #700]	; 222d8 <test_typed_table_with_emptystruct@@Base+0x360>
   22018:	add	r3, pc, r3
   2201c:	mov	r0, r3
   22020:	bl	12944 <puts@plt>
   22024:	mvn	r3, #0
   22028:	b	222b0 <test_typed_table_with_emptystruct@@Base+0x338>
   2202c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22030:	mov	r1, r3
   22034:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22038:	bl	1f8c8 <_start@@Base+0xced8>
   2203c:	mov	r3, r0
   22040:	cmp	r3, #0
   22044:	beq	22060 <test_typed_table_with_emptystruct@@Base+0xe8>
   22048:	ldr	r3, [pc, #652]	; 222dc <test_typed_table_with_emptystruct@@Base+0x364>
   2204c:	add	r3, pc, r3
   22050:	mov	r0, r3
   22054:	bl	12944 <puts@plt>
   22058:	mvn	r3, #0
   2205c:	b	222b0 <test_typed_table_with_emptystruct@@Base+0x338>
   22060:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22064:	movw	r2, #14262	; 0x37b6
   22068:	movt	r2, #45277	; 0xb0dd
   2206c:	mov	r1, r3
   22070:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22074:	bl	1f96c <_start@@Base+0xcf7c>
   22078:	mov	r3, r0
   2207c:	cmp	r3, #0
   22080:	beq	2209c <test_typed_table_with_emptystruct@@Base+0x124>
   22084:	ldr	r3, [pc, #596]	; 222e0 <test_typed_table_with_emptystruct@@Base+0x368>
   22088:	add	r3, pc, r3
   2208c:	mov	r0, r3
   22090:	bl	12944 <puts@plt>
   22094:	mvn	r3, #0
   22098:	b	222b0 <test_typed_table_with_emptystruct@@Base+0x338>
   2209c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   220a0:	cmp	r3, #0
   220a4:	bne	220c0 <test_typed_table_with_emptystruct@@Base+0x148>
   220a8:	ldr	r3, [pc, #564]	; 222e4 <test_typed_table_with_emptystruct@@Base+0x36c>
   220ac:	add	r3, pc, r3
   220b0:	mov	r0, r3
   220b4:	bl	12944 <puts@plt>
   220b8:	mvn	r3, #0
   220bc:	b	222b0 <test_typed_table_with_emptystruct@@Base+0x338>
   220c0:	movw	r1, #14262	; 0x37b6
   220c4:	movt	r1, #45277	; 0xb0dd
   220c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   220cc:	bl	14850 <_start@@Base+0x1e60>
   220d0:	mov	r3, r0
   220d4:	cmp	r3, #0
   220d8:	bne	220f4 <test_typed_table_with_emptystruct@@Base+0x17c>
   220dc:	ldr	r3, [pc, #516]	; 222e8 <test_typed_table_with_emptystruct@@Base+0x370>
   220e0:	add	r3, pc, r3
   220e4:	mov	r0, r3
   220e8:	bl	12944 <puts@plt>
   220ec:	mvn	r3, #0
   220f0:	b	222b0 <test_typed_table_with_emptystruct@@Base+0x338>
   220f4:	mov	r1, #0
   220f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   220fc:	bl	14850 <_start@@Base+0x1e60>
   22100:	mov	r3, r0
   22104:	cmp	r3, #0
   22108:	bne	22124 <test_typed_table_with_emptystruct@@Base+0x1ac>
   2210c:	ldr	r3, [pc, #472]	; 222ec <test_typed_table_with_emptystruct@@Base+0x374>
   22110:	add	r3, pc, r3
   22114:	mov	r0, r3
   22118:	bl	12944 <puts@plt>
   2211c:	mvn	r3, #0
   22120:	b	222b0 <test_typed_table_with_emptystruct@@Base+0x338>
   22124:	mov	r1, #1
   22128:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2212c:	bl	14850 <_start@@Base+0x1e60>
   22130:	mov	r3, r0
   22134:	cmp	r3, #0
   22138:	beq	22154 <test_typed_table_with_emptystruct@@Base+0x1dc>
   2213c:	ldr	r3, [pc, #428]	; 222f0 <test_typed_table_with_emptystruct@@Base+0x378>
   22140:	add	r3, pc, r3
   22144:	mov	r0, r3
   22148:	bl	12944 <puts@plt>
   2214c:	mvn	r3, #0
   22150:	b	222b0 <test_typed_table_with_emptystruct@@Base+0x338>
   22154:	mov	r1, #0
   22158:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2215c:	bl	147a4 <_start@@Base+0x1db4>
   22160:	mov	r3, r0
   22164:	cmp	r3, #0
   22168:	bne	22184 <test_typed_table_with_emptystruct@@Base+0x20c>
   2216c:	ldr	r3, [pc, #384]	; 222f4 <test_typed_table_with_emptystruct@@Base+0x37c>
   22170:	add	r3, pc, r3
   22174:	mov	r0, r3
   22178:	bl	12944 <puts@plt>
   2217c:	mvn	r3, #0
   22180:	b	222b0 <test_typed_table_with_emptystruct@@Base+0x338>
   22184:	ldr	r3, [pc, #364]	; 222f8 <test_typed_table_with_emptystruct@@Base+0x380>
   22188:	add	r3, pc, r3
   2218c:	mov	r1, r3
   22190:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22194:	bl	147a4 <_start@@Base+0x1db4>
   22198:	mov	r3, r0
   2219c:	cmp	r3, #0
   221a0:	bne	221bc <test_typed_table_with_emptystruct@@Base+0x244>
   221a4:	ldr	r3, [pc, #336]	; 222fc <test_typed_table_with_emptystruct@@Base+0x384>
   221a8:	add	r3, pc, r3
   221ac:	mov	r0, r3
   221b0:	bl	12944 <puts@plt>
   221b4:	mvn	r3, #0
   221b8:	b	222b0 <test_typed_table_with_emptystruct@@Base+0x338>
   221bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   221c0:	bl	151a8 <_start@@Base+0x27b8>
   221c4:	mov	r3, r0
   221c8:	cmp	r3, #0
   221cc:	beq	221e8 <test_typed_table_with_emptystruct@@Base+0x270>
   221d0:	ldr	r3, [pc, #296]	; 22300 <test_typed_table_with_emptystruct@@Base+0x388>
   221d4:	add	r3, pc, r3
   221d8:	mov	r0, r3
   221dc:	bl	12944 <puts@plt>
   221e0:	mvn	r3, #0
   221e4:	b	222b0 <test_typed_table_with_emptystruct@@Base+0x338>
   221e8:	mov	r1, #1
   221ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   221f0:	bl	1513c <_start@@Base+0x274c>
   221f4:	mov	r3, r0
   221f8:	cmp	r3, #0
   221fc:	beq	22218 <test_typed_table_with_emptystruct@@Base+0x2a0>
   22200:	ldr	r3, [pc, #252]	; 22304 <test_typed_table_with_emptystruct@@Base+0x38c>
   22204:	add	r3, pc, r3
   22208:	mov	r0, r3
   2220c:	bl	12944 <puts@plt>
   22210:	mvn	r3, #0
   22214:	b	222b0 <test_typed_table_with_emptystruct@@Base+0x338>
   22218:	ldr	r3, [pc, #232]	; 22308 <test_typed_table_with_emptystruct@@Base+0x390>
   2221c:	add	r3, pc, r3
   22220:	mov	r1, r3
   22224:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22228:	bl	150d0 <_start@@Base+0x26e0>
   2222c:	mov	r3, r0
   22230:	cmp	r3, #0
   22234:	bne	22250 <test_typed_table_with_emptystruct@@Base+0x2d8>
   22238:	ldr	r3, [pc, #204]	; 2230c <test_typed_table_with_emptystruct@@Base+0x394>
   2223c:	add	r3, pc, r3
   22240:	mov	r0, r3
   22244:	bl	12944 <puts@plt>
   22248:	mvn	r3, #0
   2224c:	b	222b0 <test_typed_table_with_emptystruct@@Base+0x338>
   22250:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22254:	bl	15220 <_start@@Base+0x2830>
   22258:	mov	r3, r0
   2225c:	cmp	r3, #0
   22260:	bne	2227c <test_typed_table_with_emptystruct@@Base+0x304>
   22264:	ldr	r3, [pc, #164]	; 22310 <test_typed_table_with_emptystruct@@Base+0x398>
   22268:	add	r3, pc, r3
   2226c:	mov	r0, r3
   22270:	bl	12944 <puts@plt>
   22274:	mvn	r3, #0
   22278:	b	222b0 <test_typed_table_with_emptystruct@@Base+0x338>
   2227c:	mov	r1, #0
   22280:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22284:	bl	1513c <_start@@Base+0x274c>
   22288:	mov	r3, r0
   2228c:	cmp	r3, #0
   22290:	bne	222ac <test_typed_table_with_emptystruct@@Base+0x334>
   22294:	ldr	r3, [pc, #120]	; 22314 <test_typed_table_with_emptystruct@@Base+0x39c>
   22298:	add	r3, pc, r3
   2229c:	mov	r0, r3
   222a0:	bl	12944 <puts@plt>
   222a4:	mvn	r3, #0
   222a8:	b	222b0 <test_typed_table_with_emptystruct@@Base+0x338>
   222ac:	ldr	r3, [fp, #-16]
   222b0:	mov	r0, r3
   222b4:	sub	sp, fp, #8
   222b8:	ldr	r4, [sp]
   222bc:	ldr	fp, [sp, #4]
   222c0:	add	sp, sp, #8
   222c4:	pop	{pc}		; (ldr pc, [sp], #4)
   222c8:	andeq	r6, r2, r4, rrx
   222cc:	andeq	r0, r0, r8, rrx
   222d0:	muleq	r1, ip, r3
   222d4:	andeq	r0, r1, r4, asr sp
   222d8:	andeq	r1, r1, ip, lsl #7
   222dc:	andeq	r1, r1, r8, ror r3
   222e0:	andeq	r1, r1, r8, asr r3
   222e4:	andeq	r1, r1, ip, asr r3
   222e8:	andeq	r1, r1, r0, asr #6
   222ec:	andeq	r1, r1, r0, lsr #6
   222f0:	andeq	r1, r1, r4, lsl #6
   222f4:	strdeq	r1, [r1], -r8
   222f8:	andeq	r0, r1, r4, asr #23
   222fc:	andeq	r1, r1, r4, ror #5
   22300:	andeq	r1, r1, r4, ror #5
   22304:	ldrdeq	r1, [r1], -r4
   22308:	andeq	r0, r1, r0, lsr fp
   2230c:	andeq	r1, r1, r4, asr #5
   22310:	ldrdeq	r1, [r1], -r0
   22314:			; <UNDEFINED> instruction: 0x000112b8

00022318 <verify_monster@@Base>:
   22318:	str	r4, [sp, #-12]!
   2231c:	str	fp, [sp, #4]
   22320:	str	lr, [sp, #8]
   22324:	add	fp, sp, #8
   22328:	sub	sp, sp, #164	; 0xa4
   2232c:	str	r0, [fp, #-168]	; 0xffffff58
   22330:	sub	r3, fp, #12
   22334:	sub	r3, r3, #152	; 0x98
   22338:	add	r3, r3, #15
   2233c:	lsr	r3, r3, #4
   22340:	lsl	r4, r3, #4
   22344:	ldr	r2, [pc, #1516]	; 22938 <verify_monster@@Base+0x620>
   22348:	add	r2, pc, r2
   2234c:	sub	r3, fp, #104	; 0x68
   22350:	ldrd	r0, [r2]
   22354:	strd	r0, [r3]
   22358:	ldrd	r0, [r2, #8]
   2235c:	strd	r0, [r3, #8]
   22360:	ldr	r2, [r2, #16]
   22364:	str	r2, [r3, #16]
   22368:	ldr	r3, [pc, #1484]	; 2293c <verify_monster@@Base+0x624>
   2236c:	add	r3, pc, r3
   22370:	sub	r1, fp, #120	; 0x78
   22374:	mov	r0, r3
   22378:	ldrd	r2, [r0]
   2237c:	strd	r2, [r1]
   22380:	ldrd	r2, [r0, #8]
   22384:	strd	r2, [r1, #8]
   22388:	mov	r1, #0
   2238c:	ldr	r0, [fp, #-168]	; 0xffffff58
   22390:	bl	147a4 <_start@@Base+0x1db4>
   22394:	mov	r3, r0
   22398:	cmp	r3, #0
   2239c:	bne	223b8 <verify_monster@@Base+0xa0>
   223a0:	ldr	r3, [pc, #1432]	; 22940 <verify_monster@@Base+0x628>
   223a4:	add	r3, pc, r3
   223a8:	mov	r0, r3
   223ac:	bl	12944 <puts@plt>
   223b0:	mvn	r3, #0
   223b4:	b	234dc <verify_monster@@Base+0x11c4>
   223b8:	ldr	r3, [pc, #1412]	; 22944 <verify_monster@@Base+0x62c>
   223bc:	add	r3, pc, r3
   223c0:	mov	r1, r3
   223c4:	ldr	r0, [fp, #-168]	; 0xffffff58
   223c8:	bl	147a4 <_start@@Base+0x1db4>
   223cc:	mov	r3, r0
   223d0:	cmp	r3, #0
   223d4:	bne	223f0 <verify_monster@@Base+0xd8>
   223d8:	ldr	r3, [pc, #1384]	; 22948 <verify_monster@@Base+0x630>
   223dc:	add	r3, pc, r3
   223e0:	mov	r0, r3
   223e4:	bl	12944 <puts@plt>
   223e8:	mvn	r3, #0
   223ec:	b	234dc <verify_monster@@Base+0x11c4>
   223f0:	ldr	r3, [pc, #1364]	; 2294c <verify_monster@@Base+0x634>
   223f4:	add	r3, pc, r3
   223f8:	mov	r1, r3
   223fc:	ldr	r0, [fp, #-168]	; 0xffffff58
   22400:	bl	147a4 <_start@@Base+0x1db4>
   22404:	mov	r3, r0
   22408:	cmp	r3, #0
   2240c:	bne	22428 <verify_monster@@Base+0x110>
   22410:	ldr	r3, [pc, #1336]	; 22950 <verify_monster@@Base+0x638>
   22414:	add	r3, pc, r3
   22418:	mov	r0, r3
   2241c:	bl	12944 <puts@plt>
   22420:	mvn	r3, #0
   22424:	b	234dc <verify_monster@@Base+0x11c4>
   22428:	ldr	r3, [pc, #1316]	; 22954 <verify_monster@@Base+0x63c>
   2242c:	add	r3, pc, r3
   22430:	mov	r1, r3
   22434:	ldr	r0, [fp, #-168]	; 0xffffff58
   22438:	bl	147a4 <_start@@Base+0x1db4>
   2243c:	mov	r3, r0
   22440:	cmp	r3, #0
   22444:	beq	22460 <verify_monster@@Base+0x148>
   22448:	ldr	r3, [pc, #1288]	; 22958 <verify_monster@@Base+0x640>
   2244c:	add	r3, pc, r3
   22450:	mov	r0, r3
   22454:	bl	12944 <puts@plt>
   22458:	mvn	r3, #0
   2245c:	b	234dc <verify_monster@@Base+0x11c4>
   22460:	ldr	r3, [pc, #1268]	; 2295c <verify_monster@@Base+0x644>
   22464:	add	r3, pc, r3
   22468:	mov	r1, r3
   2246c:	ldr	r0, [fp, #-168]	; 0xffffff58
   22470:	bl	147a4 <_start@@Base+0x1db4>
   22474:	mov	r3, r0
   22478:	cmp	r3, #0
   2247c:	bne	22498 <verify_monster@@Base+0x180>
   22480:	ldr	r3, [pc, #1240]	; 22960 <verify_monster@@Base+0x648>
   22484:	add	r3, pc, r3
   22488:	mov	r0, r3
   2248c:	bl	12944 <puts@plt>
   22490:	mvn	r3, #0
   22494:	b	234dc <verify_monster@@Base+0x11c4>
   22498:	ldr	r0, [fp, #-168]	; 0xffffff58
   2249c:	bl	15d5c <_start@@Base+0x336c>
   224a0:	str	r0, [fp, #-20]	; 0xffffffec
   224a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   224a8:	cmp	r3, #0
   224ac:	bne	224c8 <verify_monster@@Base+0x1b0>
   224b0:	ldr	r3, [pc, #1196]	; 22964 <verify_monster@@Base+0x64c>
   224b4:	add	r3, pc, r3
   224b8:	mov	r0, r3
   224bc:	bl	12944 <puts@plt>
   224c0:	mvn	r3, #0
   224c4:	b	234dc <verify_monster@@Base+0x11c4>
   224c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   224cc:	bl	15fb0 <_start@@Base+0x35c0>
   224d0:	mov	r3, r0
   224d4:	cmp	r3, #80	; 0x50
   224d8:	beq	224f4 <verify_monster@@Base+0x1dc>
   224dc:	ldr	r3, [pc, #1156]	; 22968 <verify_monster@@Base+0x650>
   224e0:	add	r3, pc, r3
   224e4:	mov	r0, r3
   224e8:	bl	12944 <puts@plt>
   224ec:	mvn	r3, #0
   224f0:	b	234dc <verify_monster@@Base+0x11c4>
   224f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   224f8:	bl	15dd4 <_start@@Base+0x33e4>
   224fc:	str	r0, [fp, #-24]	; 0xffffffe8
   22500:	ldr	r3, [fp, #-24]	; 0xffffffe8
   22504:	cmp	r3, #0
   22508:	bne	22524 <verify_monster@@Base+0x20c>
   2250c:	ldr	r3, [pc, #1112]	; 2296c <verify_monster@@Base+0x654>
   22510:	add	r3, pc, r3
   22514:	mov	r0, r3
   22518:	bl	12944 <puts@plt>
   2251c:	mvn	r3, #0
   22520:	b	234dc <verify_monster@@Base+0x11c4>
   22524:	ldr	r3, [fp, #-24]	; 0xffffffe8
   22528:	and	r3, r3, #15
   2252c:	cmp	r3, #0
   22530:	beq	22544 <verify_monster@@Base+0x22c>
   22534:	ldr	r3, [pc, #1076]	; 22970 <verify_monster@@Base+0x658>
   22538:	add	r3, pc, r3
   2253c:	mov	r0, r3
   22540:	bl	12944 <puts@plt>
   22544:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22548:	bl	14e58 <_start@@Base+0x2468>
   2254c:	vmov.f32	s14, s0
   22550:	vldr	s15, [pc, #980]	; 2292c <verify_monster@@Base+0x614>
   22554:	vcmp.f32	s14, s15
   22558:	vmrs	APSR_nzcv, fpscr
   2255c:	beq	22578 <verify_monster@@Base+0x260>
   22560:	ldr	r3, [pc, #1036]	; 22974 <verify_monster@@Base+0x65c>
   22564:	add	r3, pc, r3
   22568:	mov	r0, r3
   2256c:	bl	12944 <puts@plt>
   22570:	mvn	r3, #0
   22574:	b	234dc <verify_monster@@Base+0x11c4>
   22578:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2257c:	vldr	s15, [r3]
   22580:	vldr	s14, [pc, #936]	; 22930 <verify_monster@@Base+0x618>
   22584:	vcmp.f32	s15, s14
   22588:	vmrs	APSR_nzcv, fpscr
   2258c:	bne	225c0 <verify_monster@@Base+0x2a8>
   22590:	ldr	r3, [fp, #-24]	; 0xffffffe8
   22594:	vldr	s15, [r3, #4]
   22598:	vldr	s14, [pc, #916]	; 22934 <verify_monster@@Base+0x61c>
   2259c:	vcmp.f32	s15, s14
   225a0:	vmrs	APSR_nzcv, fpscr
   225a4:	bne	225c0 <verify_monster@@Base+0x2a8>
   225a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   225ac:	vldr	s15, [r3, #8]
   225b0:	vldr	s14, [pc, #884]	; 2292c <verify_monster@@Base+0x614>
   225b4:	vcmp.f32	s15, s14
   225b8:	vmrs	APSR_nzcv, fpscr
   225bc:	beq	225d8 <verify_monster@@Base+0x2c0>
   225c0:	ldr	r3, [pc, #944]	; 22978 <verify_monster@@Base+0x660>
   225c4:	add	r3, pc, r3
   225c8:	mov	r0, r3
   225cc:	bl	12944 <puts@plt>
   225d0:	mvn	r3, #0
   225d4:	b	234dc <verify_monster@@Base+0x11c4>
   225d8:	mov	r0, r4
   225dc:	bl	1b134 <_start@@Base+0x8744>
   225e0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   225e4:	mov	r0, r4
   225e8:	bl	1b04c <_start@@Base+0x865c>
   225ec:	vldr	s15, [r4]
   225f0:	vldr	s14, [pc, #824]	; 22930 <verify_monster@@Base+0x618>
   225f4:	vcmp.f32	s15, s14
   225f8:	vmrs	APSR_nzcv, fpscr
   225fc:	bne	22628 <verify_monster@@Base+0x310>
   22600:	vldr	s15, [r4, #4]
   22604:	vldr	s14, [pc, #808]	; 22934 <verify_monster@@Base+0x61c>
   22608:	vcmp.f32	s15, s14
   2260c:	vmrs	APSR_nzcv, fpscr
   22610:	bne	22628 <verify_monster@@Base+0x310>
   22614:	vldr	s15, [r4, #8]
   22618:	vldr	s14, [pc, #780]	; 2292c <verify_monster@@Base+0x614>
   2261c:	vcmp.f32	s15, s14
   22620:	vmrs	APSR_nzcv, fpscr
   22624:	beq	22640 <verify_monster@@Base+0x328>
   22628:	ldr	r3, [pc, #844]	; 2297c <verify_monster@@Base+0x664>
   2262c:	add	r3, pc, r3
   22630:	mov	r0, r3
   22634:	bl	12944 <puts@plt>
   22638:	mvn	r3, #0
   2263c:	b	234dc <verify_monster@@Base+0x11c4>
   22640:	ldr	r3, [fp, #-24]	; 0xffffffe8
   22644:	vldr	d7, [r3, #16]
   22648:	vcmp.f64	d7, #0.0
   2264c:	vmrs	APSR_nzcv, fpscr
   22650:	bne	22690 <verify_monster@@Base+0x378>
   22654:	ldr	r3, [fp, #-24]	; 0xffffffe8
   22658:	vldr	d7, [r3, #16]
   2265c:	vcmp.f64	d7, #0.0
   22660:	vmrs	APSR_nzcv, fpscr
   22664:	bne	22690 <verify_monster@@Base+0x378>
   22668:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2266c:	add	r3, r3, #26
   22670:	mov	r2, #4
   22674:	ldr	r1, [pc, #772]	; 22980 <verify_monster@@Base+0x668>
   22678:	add	r1, pc, r1
   2267c:	mov	r0, r3
   22680:	bl	12914 <memcmp@plt>
   22684:	mov	r3, r0
   22688:	cmp	r3, #0
   2268c:	beq	226a8 <verify_monster@@Base+0x390>
   22690:	ldr	r3, [pc, #748]	; 22984 <verify_monster@@Base+0x66c>
   22694:	add	r3, pc, r3
   22698:	mov	r0, r3
   2269c:	bl	12944 <puts@plt>
   226a0:	mvn	r3, #0
   226a4:	b	234dc <verify_monster@@Base+0x11c4>
   226a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   226ac:	bl	16698 <_start@@Base+0x3ca8>
   226b0:	str	r0, [fp, #-28]	; 0xffffffe4
   226b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   226b8:	cmp	r3, #0
   226bc:	beq	226e0 <verify_monster@@Base+0x3c8>
   226c0:	ldr	r3, [pc, #704]	; 22988 <verify_monster@@Base+0x670>
   226c4:	add	r3, pc, r3
   226c8:	mov	r1, r3
   226cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   226d0:	bl	128e4 <strcmp@plt>
   226d4:	mov	r3, r0
   226d8:	cmp	r3, #0
   226dc:	beq	226f8 <verify_monster@@Base+0x3e0>
   226e0:	ldr	r3, [pc, #676]	; 2298c <verify_monster@@Base+0x674>
   226e4:	add	r3, pc, r3
   226e8:	mov	r0, r3
   226ec:	bl	12944 <puts@plt>
   226f0:	mvn	r3, #0
   226f4:	b	234dc <verify_monster@@Base+0x11c4>
   226f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   226fc:	bl	16698 <_start@@Base+0x3ca8>
   22700:	str	r0, [fp, #-32]	; 0xffffffe0
   22704:	ldr	r0, [fp, #-28]	; 0xffffffe4
   22708:	bl	135c4 <_start@@Base+0xbd4>
   2270c:	mov	r3, r0
   22710:	cmp	r3, #9
   22714:	bne	2272c <verify_monster@@Base+0x414>
   22718:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2271c:	bl	135c4 <_start@@Base+0xbd4>
   22720:	mov	r3, r0
   22724:	cmp	r3, #9
   22728:	beq	22744 <verify_monster@@Base+0x42c>
   2272c:	ldr	r3, [pc, #604]	; 22990 <verify_monster@@Base+0x678>
   22730:	add	r3, pc, r3
   22734:	mov	r0, r3
   22738:	bl	12944 <puts@plt>
   2273c:	mvn	r3, #0
   22740:	b	234dc <verify_monster@@Base+0x11c4>
   22744:	ldr	r0, [fp, #-20]	; 0xffffffec
   22748:	bl	175c0 <_start@@Base+0x4bd0>
   2274c:	mov	r3, r0
   22750:	cmp	r3, #2
   22754:	beq	22770 <verify_monster@@Base+0x458>
   22758:	ldr	r3, [pc, #564]	; 22994 <verify_monster@@Base+0x67c>
   2275c:	add	r3, pc, r3
   22760:	mov	r0, r3
   22764:	bl	12944 <puts@plt>
   22768:	mvn	r3, #0
   2276c:	b	234dc <verify_monster@@Base+0x11c4>
   22770:	mov	r0, #2
   22774:	bl	149d0 <_start@@Base+0x1fe0>
   22778:	mov	r2, r0
   2277c:	ldr	r3, [pc, #532]	; 22998 <verify_monster@@Base+0x680>
   22780:	add	r3, pc, r3
   22784:	mov	r1, r3
   22788:	mov	r0, r2
   2278c:	bl	128e4 <strcmp@plt>
   22790:	mov	r3, r0
   22794:	cmp	r3, #0
   22798:	beq	227b4 <verify_monster@@Base+0x49c>
   2279c:	ldr	r3, [pc, #504]	; 2299c <verify_monster@@Base+0x684>
   227a0:	add	r3, pc, r3
   227a4:	mov	r0, r3
   227a8:	bl	12944 <puts@plt>
   227ac:	mvn	r3, #0
   227b0:	b	234dc <verify_monster@@Base+0x11c4>
   227b4:	mov	r0, #2
   227b8:	bl	14a4c <_start@@Base+0x205c>
   227bc:	mov	r3, r0
   227c0:	cmp	r3, #0
   227c4:	bne	227e0 <verify_monster@@Base+0x4c8>
   227c8:	ldr	r3, [pc, #464]	; 229a0 <verify_monster@@Base+0x688>
   227cc:	add	r3, pc, r3
   227d0:	mov	r0, r3
   227d4:	bl	12944 <puts@plt>
   227d8:	mvn	r3, #0
   227dc:	b	234dc <verify_monster@@Base+0x11c4>
   227e0:	mov	r0, #1
   227e4:	bl	14a4c <_start@@Base+0x205c>
   227e8:	mov	r3, r0
   227ec:	cmp	r3, #0
   227f0:	bne	2280c <verify_monster@@Base+0x4f4>
   227f4:	ldr	r3, [pc, #424]	; 229a4 <verify_monster@@Base+0x68c>
   227f8:	add	r3, pc, r3
   227fc:	mov	r0, r3
   22800:	bl	12944 <puts@plt>
   22804:	mvn	r3, #0
   22808:	b	234dc <verify_monster@@Base+0x11c4>
   2280c:	mov	r0, #4
   22810:	bl	14a4c <_start@@Base+0x205c>
   22814:	mov	r3, r0
   22818:	cmp	r3, #0
   2281c:	beq	22838 <verify_monster@@Base+0x520>
   22820:	ldr	r3, [pc, #384]	; 229a8 <verify_monster@@Base+0x690>
   22824:	add	r3, pc, r3
   22828:	mov	r0, r3
   2282c:	bl	12944 <puts@plt>
   22830:	mvn	r3, #0
   22834:	b	234dc <verify_monster@@Base+0x11c4>
   22838:	mov	r0, #8
   2283c:	bl	14a4c <_start@@Base+0x205c>
   22840:	mov	r3, r0
   22844:	cmp	r3, #0
   22848:	bne	22864 <verify_monster@@Base+0x54c>
   2284c:	ldr	r3, [pc, #344]	; 229ac <verify_monster@@Base+0x694>
   22850:	add	r3, pc, r3
   22854:	mov	r0, r3
   22858:	bl	12944 <puts@plt>
   2285c:	mvn	r3, #0
   22860:	b	234dc <verify_monster@@Base+0x11c4>
   22864:	mov	r0, #9
   22868:	bl	14a4c <_start@@Base+0x205c>
   2286c:	mov	r3, r0
   22870:	cmp	r3, #0
   22874:	beq	22890 <verify_monster@@Base+0x578>
   22878:	ldr	r3, [pc, #304]	; 229b0 <verify_monster@@Base+0x698>
   2287c:	add	r3, pc, r3
   22880:	mov	r0, r3
   22884:	bl	12944 <puts@plt>
   22888:	mvn	r3, #0
   2288c:	b	234dc <verify_monster@@Base+0x11c4>
   22890:	mov	r0, #1
   22894:	bl	1505c <_start@@Base+0x266c>
   22898:	mov	r3, r0
   2289c:	cmp	r3, #0
   228a0:	bne	228bc <verify_monster@@Base+0x5a4>
   228a4:	ldr	r3, [pc, #264]	; 229b4 <verify_monster@@Base+0x69c>
   228a8:	add	r3, pc, r3
   228ac:	mov	r0, r3
   228b0:	bl	12944 <puts@plt>
   228b4:	mvn	r3, #0
   228b8:	b	234dc <verify_monster@@Base+0x11c4>
   228bc:	mov	r0, #42	; 0x2a
   228c0:	bl	1505c <_start@@Base+0x266c>
   228c4:	mov	r3, r0
   228c8:	cmp	r3, #0
   228cc:	beq	228e8 <verify_monster@@Base+0x5d0>
   228d0:	ldr	r3, [pc, #224]	; 229b8 <verify_monster@@Base+0x6a0>
   228d4:	add	r3, pc, r3
   228d8:	mov	r0, r3
   228dc:	bl	12944 <puts@plt>
   228e0:	mvn	r3, #0
   228e4:	b	234dc <verify_monster@@Base+0x11c4>
   228e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   228ec:	bl	177a8 <_start@@Base+0x4db8>
   228f0:	str	r0, [fp, #-36]	; 0xffffffdc
   228f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   228f8:	bl	13a60 <_start@@Base+0x1070>
   228fc:	mov	r3, r0
   22900:	cmp	r3, #10
   22904:	beq	22920 <verify_monster@@Base+0x608>
   22908:	ldr	r3, [pc, #172]	; 229bc <verify_monster@@Base+0x6a4>
   2290c:	add	r3, pc, r3
   22910:	mov	r0, r3
   22914:	bl	12944 <puts@plt>
   22918:	mvn	r3, #0
   2291c:	b	234dc <verify_monster@@Base+0x11c4>
   22920:	mov	r3, #0
   22924:	str	r3, [fp, #-16]
   22928:	b	22ae4 <verify_monster@@Base+0x7cc>
   2292c:	subgt	ip, ip, sp, asr #25
   22930:	svccc	0x00800000
   22934:	andmi	r0, r0, r0
   22938:	andeq	r1, r1, r4, lsr #22
   2293c:	andeq	r1, r1, r4, lsl fp
   22940:	andeq	r1, r1, r8, asr #3
   22944:			; <UNDEFINED> instruction: 0x000102b8
   22948:			; <UNDEFINED> instruction: 0x000111bc
   2294c:	ldrdeq	r1, [r1], -r0
   22950:			; <UNDEFINED> instruction: 0x000111b8
   22954:	ldrdeq	r1, [r1], -r4
   22958:			; <UNDEFINED> instruction: 0x000111bc
   2295c:	andeq	r0, r1, r0, lsl r2
   22960:			; <UNDEFINED> instruction: 0x000111b8
   22964:	andeq	r0, r1, ip, asr #20
   22968:	andeq	r0, r1, r0, lsl #22
   2296c:	andeq	r1, r1, r0, ror #2
   22970:	andeq	r1, r1, ip, asr #2
   22974:	andeq	r1, r1, r8, asr #2
   22978:	andeq	r1, r1, ip, lsl #2
   2297c:	strheq	r1, [r1], -ip
   22980:	andeq	r0, r1, r4, lsl r8
   22984:	andeq	r1, r1, r8, ror r0
   22988:	andeq	r0, r1, ip, lsl #20
   2298c:	andeq	r1, r1, ip, asr #32
   22990:	andeq	r1, r1, r4, lsl r0
   22994:	andeq	r1, r1, r4
   22998:	andeq	pc, r0, r4, ror #28
   2299c:	andeq	r0, r1, r0, ror #31
   229a0:	andeq	r0, r1, r4, ror #31
   229a4:	strdeq	r0, [r1], -r4
   229a8:	andeq	r1, r1, r0
   229ac:	andeq	r1, r1, r0
   229b0:	andeq	r0, r1, r8, lsr #31
   229b4:	andeq	r0, r1, r4, ror #31
   229b8:	ldrdeq	r0, [r1], -ip
   229bc:	andeq	r0, r1, r8, asr #31
   229c0:	andeq	r0, r1, ip, lsr #28
   229c4:	strdeq	r0, [r1], -ip
   229c8:	andeq	r0, r1, r4, ror #27
   229cc:	andeq	r0, r1, ip, asr #27
   229d0:	andeq	r0, r1, ip, lsl #9
   229d4:	andeq	r0, r1, r8, lsl #27
   229d8:	andeq	r0, r1, r8, asr #26
   229dc:	andeq	r0, r1, r0, lsl #26
   229e0:	ldrdeq	r0, [r1], -r8
   229e4:	andeq	r2, r1, ip, lsl lr
   229e8:			; <UNDEFINED> instruction: 0x00010cbc
   229ec:	andeq	r0, r1, ip, lsl sp
   229f0:	andeq	r0, r1, r8, lsl #26
   229f4:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   229f8:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   229fc:	andeq	r0, r1, ip, lsl #25
   22a00:	andeq	r0, r1, r0, asr #25
   22a04:			; <UNDEFINED> instruction: 0x00010cb0
   22a08:	muleq	r1, r4, ip
   22a0c:	andeq	r0, r1, r4, lsl #25
   22a10:	andeq	r0, r1, ip, ror #24
   22a14:	andeq	r0, r1, r4, lsl #23
   22a18:	andeq	r0, r1, ip, lsr ip
   22a1c:	andeq	r0, r1, r8, lsr #23
   22a20:	andeq	r0, r1, r8, lsl #24
   22a24:	andeq	r0, r1, ip, ror fp
   22a28:	ldrdeq	r0, [r1], -r4
   22a2c:	strdeq	r0, [r1], -r8
   22a30:	andeq	r0, r1, r4, lsr #23
   22a34:	muleq	r1, r4, fp
   22a38:	muleq	r1, r8, fp
   22a3c:	andeq	r0, r1, r0, lsl #23
   22a40:	andeq	r0, r1, ip, asr fp
   22a44:	andeq	r0, r1, ip, asr fp
   22a48:	andeq	r0, r1, r0, asr #22
   22a4c:	andeq	r0, r1, r8, lsr fp
   22a50:	andeq	r0, r1, r0, lsr #22
   22a54:	andeq	r0, r1, ip, lsl #22
   22a58:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   22a5c:			; <UNDEFINED> instruction: 0x00010ab4
   22a60:	andeq	r0, r1, r8, lsl #21
   22a64:	ldrdeq	r0, [r1], -ip
   22a68:	andeq	r0, r1, r4, ror #20
   22a6c:	andeq	r0, r1, r4, asr sl
   22a70:	andeq	r0, r1, r0, asr #20
   22a74:	andeq	r0, r1, r4, lsr sl
   22a78:	andeq	r0, r1, r0, lsr #20
   22a7c:	andeq	r0, r1, r0, lsr #20
   22a80:	andeq	r0, r1, r4, ror #19
   22a84:	andeq	r0, r1, ip, asr #12
   22a88:	ldrdeq	r0, [r1], -r8
   22a8c:	andeq	r0, r1, r8, ror #19
   22a90:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   22a94:	muleq	r1, r0, r9
   22a98:	ldr	r1, [fp, #-16]
   22a9c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   22aa0:	bl	13a94 <_start@@Base+0x10a4>
   22aa4:	mov	r3, r0
   22aa8:	mov	r2, r3
   22aac:	ldr	r3, [fp, #-16]
   22ab0:	cmp	r3, r2
   22ab4:	beq	22ad8 <verify_monster@@Base+0x7c0>
   22ab8:	ldr	r3, [fp, #-16]
   22abc:	mov	r1, r3
   22ac0:	ldr	r3, [pc, #-264]	; 229c0 <verify_monster@@Base+0x6a8>
   22ac4:	add	r3, pc, r3
   22ac8:	mov	r0, r3
   22acc:	bl	128f0 <printf@plt>
   22ad0:	mvn	r3, #0
   22ad4:	b	234dc <verify_monster@@Base+0x11c4>
   22ad8:	ldr	r3, [fp, #-16]
   22adc:	add	r3, r3, #1
   22ae0:	str	r3, [fp, #-16]
   22ae4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   22ae8:	bl	13a60 <_start@@Base+0x1070>
   22aec:	mov	r2, r0
   22af0:	ldr	r3, [fp, #-16]
   22af4:	cmp	r3, r2
   22af8:	bcc	22a98 <verify_monster@@Base+0x780>
   22afc:	ldr	r0, [fp, #-20]	; 0xffffffec
   22b00:	bl	164b0 <_start@@Base+0x3ac0>
   22b04:	mov	r3, r0
   22b08:	cmp	r3, #150	; 0x96
   22b0c:	beq	22b28 <verify_monster@@Base+0x810>
   22b10:	ldr	r3, [pc, #-340]	; 229c4 <verify_monster@@Base+0x6ac>
   22b14:	add	r3, pc, r3
   22b18:	mov	r0, r3
   22b1c:	bl	12944 <puts@plt>
   22b20:	mvn	r3, #0
   22b24:	b	234dc <verify_monster@@Base+0x11c4>
   22b28:	ldr	r0, [fp, #-20]	; 0xffffffec
   22b2c:	bl	165b0 <_start@@Base+0x3bc0>
   22b30:	mov	r3, r0
   22b34:	cmp	r3, #0
   22b38:	beq	22b54 <verify_monster@@Base+0x83c>
   22b3c:	ldr	r3, [pc, #-380]	; 229c8 <verify_monster@@Base+0x6b0>
   22b40:	add	r3, pc, r3
   22b44:	mov	r0, r3
   22b48:	bl	12944 <puts@plt>
   22b4c:	mvn	r3, #0
   22b50:	b	234dc <verify_monster@@Base+0x11c4>
   22b54:	ldr	r0, [fp, #-20]	; 0xffffffec
   22b58:	bl	160b0 <_start@@Base+0x36c0>
   22b5c:	mov	r3, r0
   22b60:	cmp	r3, #0
   22b64:	bne	22b80 <verify_monster@@Base+0x868>
   22b68:	ldr	r3, [pc, #-420]	; 229cc <verify_monster@@Base+0x6b4>
   22b6c:	add	r3, pc, r3
   22b70:	mov	r0, r3
   22b74:	bl	12944 <puts@plt>
   22b78:	mvn	r3, #0
   22b7c:	b	234dc <verify_monster@@Base+0x11c4>
   22b80:	ldr	r0, [fp, #-20]	; 0xffffffec
   22b84:	bl	15ec8 <_start@@Base+0x34d8>
   22b88:	mov	r3, r0
   22b8c:	cmp	r3, #0
   22b90:	bne	22bac <verify_monster@@Base+0x894>
   22b94:	ldr	r3, [pc, #-460]	; 229d0 <verify_monster@@Base+0x6b8>
   22b98:	add	r3, pc, r3
   22b9c:	mov	r0, r3
   22ba0:	bl	12944 <puts@plt>
   22ba4:	mvn	r3, #0
   22ba8:	b	234dc <verify_monster@@Base+0x11c4>
   22bac:	ldr	r0, [fp, #-20]	; 0xffffffec
   22bb0:	bl	18164 <_start@@Base+0x5774>
   22bb4:	str	r0, [fp, #-40]	; 0xffffffd8
   22bb8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   22bbc:	bl	14b78 <_start@@Base+0x2188>
   22bc0:	mov	r3, r0
   22bc4:	cmp	r3, #5
   22bc8:	beq	22be4 <verify_monster@@Base+0x8cc>
   22bcc:	ldr	r3, [pc, #-512]	; 229d4 <verify_monster@@Base+0x6bc>
   22bd0:	add	r3, pc, r3
   22bd4:	mov	r0, r3
   22bd8:	bl	12944 <puts@plt>
   22bdc:	mvn	r3, #0
   22be0:	b	234dc <verify_monster@@Base+0x11c4>
   22be4:	mov	r3, #0
   22be8:	str	r3, [fp, #-16]
   22bec:	b	22ca0 <verify_monster@@Base+0x988>
   22bf0:	ldr	r1, [fp, #-16]
   22bf4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   22bf8:	bl	14adc <_start@@Base+0x20ec>
   22bfc:	str	r0, [fp, #-44]	; 0xffffffd4
   22c00:	ldr	r3, [fp, #-16]
   22c04:	lsl	r3, r3, #2
   22c08:	sub	r2, fp, #12
   22c0c:	add	r3, r2, r3
   22c10:	sub	r3, r3, #92	; 0x5c
   22c14:	ldrsh	r4, [r3]
   22c18:	ldr	r0, [fp, #-44]	; 0xffffffd4
   22c1c:	bl	14bc8 <_start@@Base+0x21d8>
   22c20:	mov	r3, r0
   22c24:	cmp	r4, r3
   22c28:	beq	22c4c <verify_monster@@Base+0x934>
   22c2c:	ldr	r3, [fp, #-16]
   22c30:	mov	r1, r3
   22c34:	ldr	r3, [pc, #-612]	; 229d8 <verify_monster@@Base+0x6c0>
   22c38:	add	r3, pc, r3
   22c3c:	mov	r0, r3
   22c40:	bl	128f0 <printf@plt>
   22c44:	mvn	r3, #0
   22c48:	b	234dc <verify_monster@@Base+0x11c4>
   22c4c:	ldr	r3, [fp, #-16]
   22c50:	lsl	r3, r3, #2
   22c54:	sub	r2, fp, #12
   22c58:	add	r3, r2, r3
   22c5c:	ldrsb	r4, [r3, #-90]	; 0xffffffa6
   22c60:	ldr	r0, [fp, #-44]	; 0xffffffd4
   22c64:	bl	14c14 <_start@@Base+0x2224>
   22c68:	mov	r3, r0
   22c6c:	cmp	r4, r3
   22c70:	beq	22c94 <verify_monster@@Base+0x97c>
   22c74:	ldr	r3, [fp, #-16]
   22c78:	mov	r1, r3
   22c7c:	ldr	r3, [pc, #-680]	; 229dc <verify_monster@@Base+0x6c4>
   22c80:	add	r3, pc, r3
   22c84:	mov	r0, r3
   22c88:	bl	128f0 <printf@plt>
   22c8c:	mvn	r3, #0
   22c90:	b	234dc <verify_monster@@Base+0x11c4>
   22c94:	ldr	r3, [fp, #-16]
   22c98:	add	r3, r3, #1
   22c9c:	str	r3, [fp, #-16]
   22ca0:	ldr	r3, [fp, #-16]
   22ca4:	cmp	r3, #4
   22ca8:	bls	22bf0 <verify_monster@@Base+0x8d8>
   22cac:	ldr	r0, [fp, #-20]	; 0xffffffec
   22cb0:	bl	178b8 <_start@@Base+0x4ec8>
   22cb4:	str	r0, [fp, #-48]	; 0xffffffd0
   22cb8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22cbc:	bl	15c08 <_start@@Base+0x3218>
   22cc0:	mov	r3, r0
   22cc4:	cmp	r3, #8
   22cc8:	beq	22ce4 <verify_monster@@Base+0x9cc>
   22ccc:	ldr	r3, [pc, #-756]	; 229e0 <verify_monster@@Base+0x6c8>
   22cd0:	add	r3, pc, r3
   22cd4:	mov	r0, r3
   22cd8:	bl	12944 <puts@plt>
   22cdc:	mvn	r3, #0
   22ce0:	b	234dc <verify_monster@@Base+0x11c4>
   22ce4:	mov	r1, #5
   22ce8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22cec:	bl	15c58 <_start@@Base+0x3268>
   22cf0:	str	r0, [fp, #-52]	; 0xffffffcc
   22cf4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   22cf8:	cmp	r3, #0
   22cfc:	bne	22d20 <verify_monster@@Base+0xa08>
   22d00:	ldr	r3, [pc, #-804]	; 229e4 <verify_monster@@Base+0x6cc>
   22d04:	add	r3, pc, r3
   22d08:	movw	r2, #662	; 0x296
   22d0c:	ldr	r1, [pc, #-812]	; 229e8 <verify_monster@@Base+0x6d0>
   22d10:	add	r1, pc, r1
   22d14:	ldr	r0, [pc, #-816]	; 229ec <verify_monster@@Base+0x6d4>
   22d18:	add	r0, pc, r0
   22d1c:	bl	129e0 <__assert_fail@plt>
   22d20:	ldr	r0, [fp, #-52]	; 0xffffffcc
   22d24:	bl	16698 <_start@@Base+0x3ca8>
   22d28:	str	r0, [fp, #-28]	; 0xffffffe4
   22d2c:	ldr	r3, [pc, #-836]	; 229f0 <verify_monster@@Base+0x6d8>
   22d30:	add	r3, pc, r3
   22d34:	mov	r1, r3
   22d38:	ldr	r0, [fp, #-28]	; 0xffffffe4
   22d3c:	bl	128e4 <strcmp@plt>
   22d40:	mov	r3, r0
   22d44:	cmp	r3, #0
   22d48:	beq	22d64 <verify_monster@@Base+0xa4c>
   22d4c:	ldr	r3, [pc, #-864]	; 229f4 <verify_monster@@Base+0x6dc>
   22d50:	add	r3, pc, r3
   22d54:	mov	r0, r3
   22d58:	bl	128f0 <printf@plt>
   22d5c:	mvn	r3, #0
   22d60:	b	234dc <verify_monster@@Base+0x11c4>
   22d64:	mov	r1, #1
   22d68:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22d6c:	bl	15c58 <_start@@Base+0x3268>
   22d70:	str	r0, [fp, #-56]	; 0xffffffc8
   22d74:	ldr	r2, [fp, #-56]	; 0xffffffc8
   22d78:	ldr	r3, [fp, #-52]	; 0xffffffcc
   22d7c:	cmp	r2, r3
   22d80:	beq	22d9c <verify_monster@@Base+0xa84>
   22d84:	ldr	r3, [pc, #-916]	; 229f8 <verify_monster@@Base+0x6e0>
   22d88:	add	r3, pc, r3
   22d8c:	mov	r0, r3
   22d90:	bl	12944 <puts@plt>
   22d94:	mvn	r3, #0
   22d98:	b	234dc <verify_monster@@Base+0x11c4>
   22d9c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   22da0:	bl	16698 <_start@@Base+0x3ca8>
   22da4:	str	r0, [fp, #-28]	; 0xffffffe4
   22da8:	ldr	r3, [pc, #-948]	; 229fc <verify_monster@@Base+0x6e4>
   22dac:	add	r3, pc, r3
   22db0:	mov	r1, r3
   22db4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   22db8:	bl	128e4 <strcmp@plt>
   22dbc:	mov	r3, r0
   22dc0:	cmp	r3, #0
   22dc4:	beq	22de4 <verify_monster@@Base+0xacc>
   22dc8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   22dcc:	ldr	r3, [pc, #-980]	; 22a00 <verify_monster@@Base+0x6e8>
   22dd0:	add	r3, pc, r3
   22dd4:	mov	r0, r3
   22dd8:	bl	128f0 <printf@plt>
   22ddc:	mvn	r3, #0
   22de0:	b	234dc <verify_monster@@Base+0x11c4>
   22de4:	mov	r1, #2
   22de8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22dec:	bl	15c58 <_start@@Base+0x3268>
   22df0:	str	r0, [fp, #-52]	; 0xffffffcc
   22df4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   22df8:	bl	16698 <_start@@Base+0x3ca8>
   22dfc:	str	r0, [fp, #-28]	; 0xffffffe4
   22e00:	ldr	r3, [pc, #-1028]	; 22a04 <verify_monster@@Base+0x6ec>
   22e04:	add	r3, pc, r3
   22e08:	mov	r1, r3
   22e0c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   22e10:	bl	128e4 <strcmp@plt>
   22e14:	mov	r3, r0
   22e18:	cmp	r3, #0
   22e1c:	beq	22e3c <verify_monster@@Base+0xb24>
   22e20:	ldr	r1, [fp, #-28]	; 0xffffffe4
   22e24:	ldr	r3, [pc, #-1060]	; 22a08 <verify_monster@@Base+0x6f0>
   22e28:	add	r3, pc, r3
   22e2c:	mov	r0, r3
   22e30:	bl	128f0 <printf@plt>
   22e34:	mvn	r3, #0
   22e38:	b	234dc <verify_monster@@Base+0x11c4>
   22e3c:	mov	r1, #0
   22e40:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e44:	bl	15c58 <_start@@Base+0x3268>
   22e48:	str	r0, [fp, #-52]	; 0xffffffcc
   22e4c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   22e50:	bl	16698 <_start@@Base+0x3ca8>
   22e54:	str	r0, [fp, #-28]	; 0xffffffe4
   22e58:	ldr	r3, [pc, #-1108]	; 22a0c <verify_monster@@Base+0x6f4>
   22e5c:	add	r3, pc, r3
   22e60:	mov	r1, r3
   22e64:	ldr	r0, [fp, #-28]	; 0xffffffe4
   22e68:	bl	128e4 <strcmp@plt>
   22e6c:	mov	r3, r0
   22e70:	cmp	r3, #0
   22e74:	beq	22e94 <verify_monster@@Base+0xb7c>
   22e78:	ldr	r1, [fp, #-28]	; 0xffffffe4
   22e7c:	ldr	r3, [pc, #-1140]	; 22a10 <verify_monster@@Base+0x6f8>
   22e80:	add	r3, pc, r3
   22e84:	mov	r0, r3
   22e88:	bl	128f0 <printf@plt>
   22e8c:	mvn	r3, #0
   22e90:	b	234dc <verify_monster@@Base+0x11c4>
   22e94:	mov	r1, #3
   22e98:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e9c:	bl	15c58 <_start@@Base+0x3268>
   22ea0:	str	r0, [fp, #-52]	; 0xffffffcc
   22ea4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   22ea8:	bl	16698 <_start@@Base+0x3ca8>
   22eac:	str	r0, [fp, #-28]	; 0xffffffe4
   22eb0:	ldr	r3, [pc, #-1188]	; 22a14 <verify_monster@@Base+0x6fc>
   22eb4:	add	r3, pc, r3
   22eb8:	mov	r1, r3
   22ebc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   22ec0:	bl	128e4 <strcmp@plt>
   22ec4:	mov	r3, r0
   22ec8:	cmp	r3, #0
   22ecc:	beq	22eec <verify_monster@@Base+0xbd4>
   22ed0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   22ed4:	ldr	r3, [pc, #-1220]	; 22a18 <verify_monster@@Base+0x700>
   22ed8:	add	r3, pc, r3
   22edc:	mov	r0, r3
   22ee0:	bl	128f0 <printf@plt>
   22ee4:	mvn	r3, #0
   22ee8:	b	234dc <verify_monster@@Base+0x11c4>
   22eec:	mov	r1, #4
   22ef0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22ef4:	bl	15c58 <_start@@Base+0x3268>
   22ef8:	str	r0, [fp, #-52]	; 0xffffffcc
   22efc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   22f00:	bl	16698 <_start@@Base+0x3ca8>
   22f04:	str	r0, [fp, #-28]	; 0xffffffe4
   22f08:	ldr	r3, [pc, #-1268]	; 22a1c <verify_monster@@Base+0x704>
   22f0c:	add	r3, pc, r3
   22f10:	mov	r1, r3
   22f14:	ldr	r0, [fp, #-28]	; 0xffffffe4
   22f18:	bl	128e4 <strcmp@plt>
   22f1c:	mov	r3, r0
   22f20:	cmp	r3, #0
   22f24:	beq	22f44 <verify_monster@@Base+0xc2c>
   22f28:	ldr	r1, [fp, #-28]	; 0xffffffe4
   22f2c:	ldr	r3, [pc, #-1300]	; 22a20 <verify_monster@@Base+0x708>
   22f30:	add	r3, pc, r3
   22f34:	mov	r0, r3
   22f38:	bl	128f0 <printf@plt>
   22f3c:	mvn	r3, #0
   22f40:	b	234dc <verify_monster@@Base+0x11c4>
   22f44:	mov	r1, #6
   22f48:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22f4c:	bl	15c58 <_start@@Base+0x3268>
   22f50:	str	r0, [fp, #-52]	; 0xffffffcc
   22f54:	ldr	r0, [fp, #-52]	; 0xffffffcc
   22f58:	bl	16698 <_start@@Base+0x3ca8>
   22f5c:	str	r0, [fp, #-28]	; 0xffffffe4
   22f60:	ldr	r3, [pc, #-1348]	; 22a24 <verify_monster@@Base+0x70c>
   22f64:	add	r3, pc, r3
   22f68:	mov	r1, r3
   22f6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   22f70:	bl	128e4 <strcmp@plt>
   22f74:	mov	r3, r0
   22f78:	cmp	r3, #0
   22f7c:	beq	22f9c <verify_monster@@Base+0xc84>
   22f80:	ldr	r1, [fp, #-28]	; 0xffffffe4
   22f84:	ldr	r3, [pc, #-1380]	; 22a28 <verify_monster@@Base+0x710>
   22f88:	add	r3, pc, r3
   22f8c:	mov	r0, r3
   22f90:	bl	128f0 <printf@plt>
   22f94:	mvn	r3, #0
   22f98:	b	234dc <verify_monster@@Base+0x11c4>
   22f9c:	mov	r1, #7
   22fa0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22fa4:	bl	15c58 <_start@@Base+0x3268>
   22fa8:	str	r0, [fp, #-52]	; 0xffffffcc
   22fac:	ldr	r0, [fp, #-52]	; 0xffffffcc
   22fb0:	bl	16698 <_start@@Base+0x3ca8>
   22fb4:	str	r0, [fp, #-28]	; 0xffffffe4
   22fb8:	ldr	r3, [pc, #-1428]	; 22a2c <verify_monster@@Base+0x714>
   22fbc:	add	r3, pc, r3
   22fc0:	mov	r1, r3
   22fc4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   22fc8:	bl	128e4 <strcmp@plt>
   22fcc:	mov	r3, r0
   22fd0:	cmp	r3, #0
   22fd4:	beq	22ff4 <verify_monster@@Base+0xcdc>
   22fd8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   22fdc:	ldr	r3, [pc, #-1460]	; 22a30 <verify_monster@@Base+0x718>
   22fe0:	add	r3, pc, r3
   22fe4:	mov	r0, r3
   22fe8:	bl	128f0 <printf@plt>
   22fec:	mvn	r3, #0
   22ff0:	b	234dc <verify_monster@@Base+0x11c4>
   22ff4:	ldr	r0, [fp, #-20]	; 0xffffffec
   22ff8:	bl	179c8 <_start@@Base+0x4fd8>
   22ffc:	str	r0, [fp, #-60]	; 0xffffffc4
   23000:	ldr	r0, [fp, #-60]	; 0xffffffc4
   23004:	bl	13614 <_start@@Base+0xc24>
   23008:	mov	r3, r0
   2300c:	cmp	r3, #3
   23010:	beq	2302c <verify_monster@@Base+0xd14>
   23014:	ldr	r3, [pc, #-1512]	; 22a34 <verify_monster@@Base+0x71c>
   23018:	add	r3, pc, r3
   2301c:	mov	r0, r3
   23020:	bl	12944 <puts@plt>
   23024:	mvn	r3, #0
   23028:	b	234dc <verify_monster@@Base+0x11c4>
   2302c:	mov	r1, #0
   23030:	ldr	r0, [fp, #-60]	; 0xffffffc4
   23034:	bl	13664 <_start@@Base+0xc74>
   23038:	mov	r2, r0
   2303c:	ldr	r3, [pc, #-1548]	; 22a38 <verify_monster@@Base+0x720>
   23040:	add	r3, pc, r3
   23044:	mov	r1, r3
   23048:	mov	r0, r2
   2304c:	bl	128e4 <strcmp@plt>
   23050:	mov	r3, r0
   23054:	cmp	r3, #0
   23058:	beq	23074 <verify_monster@@Base+0xd5c>
   2305c:	ldr	r3, [pc, #-1576]	; 22a3c <verify_monster@@Base+0x724>
   23060:	add	r3, pc, r3
   23064:	mov	r0, r3
   23068:	bl	12944 <puts@plt>
   2306c:	mvn	r3, #0
   23070:	b	234dc <verify_monster@@Base+0x11c4>
   23074:	mov	r1, #1
   23078:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2307c:	bl	13664 <_start@@Base+0xc74>
   23080:	str	r0, [fp, #-64]	; 0xffffffc0
   23084:	ldr	r0, [fp, #-64]	; 0xffffffc0
   23088:	bl	135c4 <_start@@Base+0xbd4>
   2308c:	mov	r3, r0
   23090:	cmp	r3, #2
   23094:	beq	230b0 <verify_monster@@Base+0xd98>
   23098:	ldr	r3, [pc, #-1632]	; 22a40 <verify_monster@@Base+0x728>
   2309c:	add	r3, pc, r3
   230a0:	mov	r0, r3
   230a4:	bl	128f0 <printf@plt>
   230a8:	mvn	r3, #0
   230ac:	b	234dc <verify_monster@@Base+0x11c4>
   230b0:	mov	r2, #2
   230b4:	ldr	r3, [pc, #-1656]	; 22a44 <verify_monster@@Base+0x72c>
   230b8:	add	r3, pc, r3
   230bc:	mov	r1, r3
   230c0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   230c4:	bl	12914 <memcmp@plt>
   230c8:	mov	r3, r0
   230cc:	cmp	r3, #0
   230d0:	beq	230ec <verify_monster@@Base+0xdd4>
   230d4:	ldr	r3, [pc, #-1684]	; 22a48 <verify_monster@@Base+0x730>
   230d8:	add	r3, pc, r3
   230dc:	mov	r0, r3
   230e0:	bl	12944 <puts@plt>
   230e4:	mvn	r3, #0
   230e8:	b	234dc <verify_monster@@Base+0x11c4>
   230ec:	mov	r1, #2
   230f0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   230f4:	bl	13664 <_start@@Base+0xc74>
   230f8:	mov	r2, r0
   230fc:	ldr	r3, [pc, #-1720]	; 22a4c <verify_monster@@Base+0x734>
   23100:	add	r3, pc, r3
   23104:	mov	r1, r3
   23108:	mov	r0, r2
   2310c:	bl	128e4 <strcmp@plt>
   23110:	mov	r3, r0
   23114:	cmp	r3, #0
   23118:	beq	23134 <verify_monster@@Base+0xe1c>
   2311c:	ldr	r3, [pc, #-1748]	; 22a50 <verify_monster@@Base+0x738>
   23120:	add	r3, pc, r3
   23124:	mov	r0, r3
   23128:	bl	12944 <puts@plt>
   2312c:	mvn	r3, #0
   23130:	b	234dc <verify_monster@@Base+0x11c4>
   23134:	ldr	r0, [fp, #-20]	; 0xffffffec
   23138:	bl	17be8 <_start@@Base+0x51f8>
   2313c:	mov	r3, r0
   23140:	cmp	r3, #0
   23144:	bne	23160 <verify_monster@@Base+0xe48>
   23148:	ldr	r3, [pc, #-1788]	; 22a54 <verify_monster@@Base+0x73c>
   2314c:	add	r3, pc, r3
   23150:	mov	r0, r3
   23154:	bl	12944 <puts@plt>
   23158:	mvn	r3, #0
   2315c:	b	234dc <verify_monster@@Base+0x11c4>
   23160:	ldr	r0, [fp, #-20]	; 0xffffffec
   23164:	bl	17ad8 <_start@@Base+0x50e8>
   23168:	str	r0, [fp, #-68]	; 0xffffffbc
   2316c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   23170:	bl	139a4 <_start@@Base+0xfb4>
   23174:	mov	r3, r0
   23178:	cmp	r3, #4
   2317c:	beq	23198 <verify_monster@@Base+0xe80>
   23180:	ldr	r3, [pc, #-1840]	; 22a58 <verify_monster@@Base+0x740>
   23184:	add	r3, pc, r3
   23188:	mov	r0, r3
   2318c:	bl	12944 <puts@plt>
   23190:	mvn	r3, #0
   23194:	b	234dc <verify_monster@@Base+0x11c4>
   23198:	mov	r3, #0
   2319c:	str	r3, [fp, #-16]
   231a0:	b	23200 <verify_monster@@Base+0xee8>
   231a4:	ldr	r1, [fp, #-16]
   231a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   231ac:	bl	139d8 <_start@@Base+0xfe8>
   231b0:	mov	r3, r0
   231b4:	mov	r2, r3
   231b8:	ldr	r3, [fp, #-16]
   231bc:	lsl	r3, r3, #2
   231c0:	sub	r1, fp, #12
   231c4:	add	r3, r1, r3
   231c8:	ldr	r3, [r3, #-108]	; 0xffffff94
   231cc:	cmp	r2, r3
   231d0:	beq	231f4 <verify_monster@@Base+0xedc>
   231d4:	ldr	r3, [fp, #-16]
   231d8:	mov	r1, r3
   231dc:	ldr	r3, [pc, #-1928]	; 22a5c <verify_monster@@Base+0x744>
   231e0:	add	r3, pc, r3
   231e4:	mov	r0, r3
   231e8:	bl	128f0 <printf@plt>
   231ec:	mvn	r3, #0
   231f0:	b	234dc <verify_monster@@Base+0x11c4>
   231f4:	ldr	r3, [fp, #-16]
   231f8:	add	r3, r3, #1
   231fc:	str	r3, [fp, #-16]
   23200:	ldr	r3, [fp, #-16]
   23204:	cmp	r3, #3
   23208:	bls	231a4 <verify_monster@@Base+0xe8c>
   2320c:	ldr	r0, [fp, #-20]	; 0xffffffec
   23210:	bl	17ec4 <_start@@Base+0x54d4>
   23214:	mov	r3, r0
   23218:	strb	r3, [fp, #-69]	; 0xffffffbb
   2321c:	ldrb	r3, [fp, #-69]	; 0xffffffbb
   23220:	cmp	r3, #1
   23224:	beq	23240 <verify_monster@@Base+0xf28>
   23228:	ldr	r3, [pc, #-2000]	; 22a60 <verify_monster@@Base+0x748>
   2322c:	add	r3, pc, r3
   23230:	mov	r0, r3
   23234:	bl	12944 <puts@plt>
   23238:	mvn	r3, #0
   2323c:	b	234dc <verify_monster@@Base+0x11c4>
   23240:	ldr	r0, [fp, #-20]	; 0xffffffec
   23244:	bl	17fc4 <_start@@Base+0x55d4>
   23248:	str	r0, [fp, #-52]	; 0xffffffcc
   2324c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   23250:	bl	16698 <_start@@Base+0x3ca8>
   23254:	mov	r2, r0
   23258:	ldr	r3, [pc, #-2044]	; 22a64 <verify_monster@@Base+0x74c>
   2325c:	add	r3, pc, r3
   23260:	mov	r1, r3
   23264:	mov	r0, r2
   23268:	bl	128e4 <strcmp@plt>
   2326c:	mov	r3, r0
   23270:	cmp	r3, #0
   23274:	beq	23290 <verify_monster@@Base+0xf78>
   23278:	ldr	r3, [pc, #-2072]	; 22a68 <verify_monster@@Base+0x750>
   2327c:	add	r3, pc, r3
   23280:	mov	r0, r3
   23284:	bl	12944 <puts@plt>
   23288:	mvn	r3, #0
   2328c:	b	234dc <verify_monster@@Base+0x11c4>
   23290:	ldr	r0, [fp, #-20]	; 0xffffffec
   23294:	bl	17cd0 <_start@@Base+0x52e0>
   23298:	str	r0, [fp, #-52]	; 0xffffffcc
   2329c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   232a0:	bl	16698 <_start@@Base+0x3ca8>
   232a4:	mov	r2, r0
   232a8:	ldr	r3, [pc, #-2116]	; 22a6c <verify_monster@@Base+0x754>
   232ac:	add	r3, pc, r3
   232b0:	mov	r1, r3
   232b4:	mov	r0, r2
   232b8:	bl	128e4 <strcmp@plt>
   232bc:	mov	r3, r0
   232c0:	cmp	r3, #0
   232c4:	beq	232e0 <verify_monster@@Base+0xfc8>
   232c8:	ldr	r3, [pc, #-2144]	; 22a70 <verify_monster@@Base+0x758>
   232cc:	add	r3, pc, r3
   232d0:	mov	r0, r3
   232d4:	bl	12944 <puts@plt>
   232d8:	mvn	r3, #0
   232dc:	b	234dc <verify_monster@@Base+0x11c4>
   232e0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   232e4:	bl	17ec4 <_start@@Base+0x54d4>
   232e8:	mov	r3, r0
   232ec:	cmp	r3, #0
   232f0:	beq	2330c <verify_monster@@Base+0xff4>
   232f4:	ldr	r3, [pc, #-2184]	; 22a74 <verify_monster@@Base+0x75c>
   232f8:	add	r3, pc, r3
   232fc:	mov	r0, r3
   23300:	bl	12944 <puts@plt>
   23304:	mvn	r3, #0
   23308:	b	234dc <verify_monster@@Base+0x11c4>
   2330c:	sub	r3, fp, #84	; 0x54
   23310:	ldr	r1, [fp, #-20]	; 0xffffffec
   23314:	mov	r0, r3
   23318:	bl	180d0 <_start@@Base+0x56e0>
   2331c:	ldrb	r3, [fp, #-84]	; 0xffffffac
   23320:	ldrb	r2, [fp, #-69]	; 0xffffffbb
   23324:	cmp	r2, r3
   23328:	beq	23344 <verify_monster@@Base+0x102c>
   2332c:	ldr	r3, [pc, #-2236]	; 22a78 <verify_monster@@Base+0x760>
   23330:	add	r3, pc, r3
   23334:	mov	r0, r3
   23338:	bl	12944 <puts@plt>
   2333c:	mvn	r3, #0
   23340:	b	234dc <verify_monster@@Base+0x11c4>
   23344:	ldr	r4, [fp, #-80]	; 0xffffffb0
   23348:	ldr	r0, [fp, #-20]	; 0xffffffec
   2334c:	bl	17fc4 <_start@@Base+0x55d4>
   23350:	mov	r3, r0
   23354:	cmp	r4, r3
   23358:	beq	23374 <verify_monster@@Base+0x105c>
   2335c:	ldr	r3, [pc, #-2280]	; 22a7c <verify_monster@@Base+0x764>
   23360:	add	r3, pc, r3
   23364:	mov	r0, r3
   23368:	bl	12944 <puts@plt>
   2336c:	mvn	r3, #0
   23370:	b	234dc <verify_monster@@Base+0x11c4>
   23374:	ldr	r0, [fp, #-52]	; 0xffffffcc
   23378:	bl	178b8 <_start@@Base+0x4ec8>
   2337c:	str	r0, [fp, #-48]	; 0xffffffd0
   23380:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23384:	bl	15c08 <_start@@Base+0x3218>
   23388:	str	r0, [fp, #-16]
   2338c:	ldr	r3, [fp, #-16]
   23390:	sub	r3, r3, #1
   23394:	mov	r1, r3
   23398:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2339c:	bl	15c58 <_start@@Base+0x3268>
   233a0:	str	r0, [fp, #-52]	; 0xffffffcc
   233a4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   233a8:	bl	17ec4 <_start@@Base+0x54d4>
   233ac:	mov	r3, r0
   233b0:	cmp	r3, #1
   233b4:	beq	233d0 <verify_monster@@Base+0x10b8>
   233b8:	ldr	r3, [pc, #-2368]	; 22a80 <verify_monster@@Base+0x768>
   233bc:	add	r3, pc, r3
   233c0:	mov	r0, r3
   233c4:	bl	12944 <puts@plt>
   233c8:	mvn	r3, #0
   233cc:	b	234dc <verify_monster@@Base+0x11c4>
   233d0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   233d4:	bl	17fc4 <_start@@Base+0x55d4>
   233d8:	str	r0, [fp, #-52]	; 0xffffffcc
   233dc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   233e0:	bl	16698 <_start@@Base+0x3ca8>
   233e4:	mov	r2, r0
   233e8:	ldr	r3, [pc, #-2412]	; 22a84 <verify_monster@@Base+0x76c>
   233ec:	add	r3, pc, r3
   233f0:	mov	r1, r3
   233f4:	mov	r0, r2
   233f8:	bl	128e4 <strcmp@plt>
   233fc:	mov	r3, r0
   23400:	cmp	r3, #0
   23404:	beq	23420 <verify_monster@@Base+0x1108>
   23408:	ldr	r3, [pc, #-2440]	; 22a88 <verify_monster@@Base+0x770>
   2340c:	add	r3, pc, r3
   23410:	mov	r0, r3
   23414:	bl	12944 <puts@plt>
   23418:	mvn	r3, #0
   2341c:	b	234dc <verify_monster@@Base+0x11c4>
   23420:	ldr	r0, [fp, #-20]	; 0xffffffec
   23424:	bl	185fc <_start@@Base+0x5c0c>
   23428:	mov	r3, r0
   2342c:	cmp	r3, #0
   23430:	beq	2344c <verify_monster@@Base+0x1134>
   23434:	ldr	r3, [pc, #-2480]	; 22a8c <verify_monster@@Base+0x774>
   23438:	add	r3, pc, r3
   2343c:	mov	r0, r3
   23440:	bl	12944 <puts@plt>
   23444:	mvn	r3, #0
   23448:	b	234dc <verify_monster@@Base+0x11c4>
   2344c:	ldr	r0, [fp, #-20]	; 0xffffffec
   23450:	bl	18514 <_start@@Base+0x5b24>
   23454:	mov	r3, r0
   23458:	cmp	r3, #0
   2345c:	bne	23478 <verify_monster@@Base+0x1160>
   23460:	ldr	r3, [pc, #-2520]	; 22a90 <verify_monster@@Base+0x778>
   23464:	add	r3, pc, r3
   23468:	mov	r0, r3
   2346c:	bl	12944 <puts@plt>
   23470:	mvn	r3, #0
   23474:	b	234dc <verify_monster@@Base+0x11c4>
   23478:	ldr	r0, [fp, #-20]	; 0xffffffec
   2347c:	bl	18408 <_start@@Base+0x5a18>
   23480:	str	r0, [fp, #-76]	; 0xffffffb4
   23484:	ldr	r0, [fp, #-76]	; 0xffffffb4
   23488:	bl	15480 <_start@@Base+0x2a90>
   2348c:	mov	r3, r0
   23490:	cmp	r3, #0
   23494:	bne	234c0 <verify_monster@@Base+0x11a8>
   23498:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2349c:	bl	15674 <_start@@Base+0x2c84>
   234a0:	mov	r3, r0
   234a4:	cmp	r3, #0
   234a8:	bne	234c0 <verify_monster@@Base+0x11a8>
   234ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   234b0:	bl	1575c <_start@@Base+0x2d6c>
   234b4:	mov	r3, r0
   234b8:	cmp	r3, #0
   234bc:	beq	234d8 <verify_monster@@Base+0x11c0>
   234c0:	ldr	r3, [pc, #-2612]	; 22a94 <verify_monster@@Base+0x77c>
   234c4:	add	r3, pc, r3
   234c8:	mov	r0, r3
   234cc:	bl	12944 <puts@plt>
   234d0:	mvn	r3, #0
   234d4:	b	234dc <verify_monster@@Base+0x11c4>
   234d8:	mov	r3, #0
   234dc:	mov	r0, r3
   234e0:	sub	sp, fp, #8
   234e4:	ldr	r4, [sp]
   234e8:	ldr	fp, [sp, #4]
   234ec:	add	sp, sp, #8
   234f0:	pop	{pc}		; (ldr pc, [sp], #4)

000234f4 <gen_monster@@Base>:
   234f4:	str	fp, [sp, #-8]!
   234f8:	str	lr, [sp, #4]
   234fc:	add	fp, sp, #4
   23500:	sub	sp, sp, #96	; 0x60
   23504:	str	r0, [fp, #-96]	; 0xffffffa0
   23508:	str	r1, [fp, #-100]	; 0xffffff9c
   2350c:	ldr	r3, [pc, #1556]	; 23b28 <gen_monster@@Base+0x634>
   23510:	add	r3, pc, r3
   23514:	sub	r1, fp, #64	; 0x40
   23518:	mov	r0, r3
   2351c:	ldrd	r2, [r0]
   23520:	strd	r2, [r1]
   23524:	ldrh	r3, [r0, #8]
   23528:	strh	r3, [r1, #8]
   2352c:	ldr	r3, [pc, #1528]	; 23b2c <gen_monster@@Base+0x638>
   23530:	add	r3, pc, r3
   23534:	ldr	r3, [r3]
   23538:	str	r3, [fp, #-92]	; 0xffffffa4
   2353c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23540:	bl	29bf4 <flatcc_builder_reset@@Base>
   23544:	ldr	r3, [fp, #-100]	; 0xffffff9c
   23548:	cmp	r3, #0
   2354c:	beq	2355c <gen_monster@@Base+0x68>
   23550:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23554:	bl	1e1c0 <_start@@Base+0xb7d0>
   23558:	b	23564 <gen_monster@@Base+0x70>
   2355c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23560:	bl	1e160 <_start@@Base+0xb770>
   23564:	mov	r1, #80	; 0x50
   23568:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2356c:	bl	1c834 <_start@@Base+0x9e44>
   23570:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23574:	bl	1c770 <_start@@Base+0x9d80>
   23578:	str	r0, [fp, #-8]
   2357c:	ldr	r3, [fp, #-8]
   23580:	mov	r2, #1065353216	; 0x3f800000
   23584:	str	r2, [r3]
   23588:	ldr	r3, [fp, #-8]
   2358c:	mov	r2, #1073741824	; 0x40000000
   23590:	str	r2, [r3, #4]
   23594:	ldr	r3, [fp, #-8]
   23598:	movw	r2, #52429	; 0xcccd
   2359c:	movt	r2, #49228	; 0xc04c
   235a0:	str	r2, [r3, #8]
   235a4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   235a8:	bl	1c7b0 <_start@@Base+0x9dc0>
   235ac:	ldr	r3, [pc, #1404]	; 23b30 <gen_monster@@Base+0x63c>
   235b0:	add	r3, pc, r3
   235b4:	mov	r1, r3
   235b8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   235bc:	bl	1cb00 <_start@@Base+0xa110>
   235c0:	mov	r1, #2
   235c4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   235c8:	bl	1cdec <_start@@Base+0xa3fc>
   235cc:	sub	r3, fp, #64	; 0x40
   235d0:	mov	r2, #10
   235d4:	mov	r1, r3
   235d8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   235dc:	bl	1cf4c <_start@@Base+0xa55c>
   235e0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   235e4:	bl	1daa4 <_start@@Base+0xb0b4>
   235e8:	mov	r1, #1
   235ec:	ldr	r0, [fp, #-96]	; 0xffffffa0
   235f0:	bl	1dbc4 <_start@@Base+0xb1d4>
   235f4:	str	r0, [fp, #-12]
   235f8:	ldr	r3, [fp, #-12]
   235fc:	mov	r2, #16
   23600:	strh	r2, [r3]
   23604:	ldr	r3, [fp, #-12]
   23608:	mov	r2, #32
   2360c:	strb	r2, [r3, #2]
   23610:	mov	r1, #2
   23614:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23618:	bl	1dbc4 <_start@@Base+0xb1d4>
   2361c:	str	r0, [fp, #-12]
   23620:	ldr	r3, [fp, #-12]
   23624:	mov	r2, #48	; 0x30
   23628:	strh	r2, [r3]
   2362c:	ldr	r3, [fp, #-12]
   23630:	mov	r2, #64	; 0x40
   23634:	strb	r2, [r3, #2]
   23638:	ldr	r3, [fp, #-12]
   2363c:	add	r3, r3, #4
   23640:	mov	r2, #80	; 0x50
   23644:	strh	r2, [r3]
   23648:	ldr	r3, [fp, #-12]
   2364c:	add	r3, r3, #4
   23650:	mov	r2, #96	; 0x60
   23654:	strb	r2, [r3, #2]
   23658:	mvn	r2, #127	; 0x7f
   2365c:	mov	r1, #112	; 0x70
   23660:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23664:	bl	1dd10 <_start@@Base+0xb320>
   23668:	mov	r3, #400	; 0x190
   2366c:	strh	r3, [fp, #-68]	; 0xffffffbc
   23670:	mvn	r3, #110	; 0x6e
   23674:	strb	r3, [fp, #-66]	; 0xffffffbe
   23678:	sub	r3, fp, #68	; 0x44
   2367c:	mov	r1, r3
   23680:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23684:	bl	1dca4 <_start@@Base+0xb2b4>
   23688:	sub	r3, fp, #68	; 0x44
   2368c:	mov	r1, r3
   23690:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23694:	bl	1dca4 <_start@@Base+0xb2b4>
   23698:	sub	r3, fp, #68	; 0x44
   2369c:	mov	r1, r3
   236a0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   236a4:	bl	1aee8 <_start@@Base+0x84f8>
   236a8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   236ac:	bl	1dc70 <_start@@Base+0xb280>
   236b0:	mov	r3, r0
   236b4:	cmp	r3, #7
   236b8:	beq	236dc <gen_monster@@Base+0x1e8>
   236bc:	ldr	r3, [pc, #1136]	; 23b34 <gen_monster@@Base+0x640>
   236c0:	add	r3, pc, r3
   236c4:	movw	r2, #881	; 0x371
   236c8:	ldr	r1, [pc, #1128]	; 23b38 <gen_monster@@Base+0x644>
   236cc:	add	r1, pc, r1
   236d0:	ldr	r0, [pc, #1124]	; 23b3c <gen_monster@@Base+0x648>
   236d4:	add	r0, pc, r0
   236d8:	bl	129e0 <__assert_fail@plt>
   236dc:	mov	r1, #2
   236e0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   236e4:	bl	1dc00 <_start@@Base+0xb210>
   236e8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   236ec:	bl	1dc70 <_start@@Base+0xb280>
   236f0:	mov	r3, r0
   236f4:	cmp	r3, #5
   236f8:	beq	2371c <gen_monster@@Base+0x228>
   236fc:	ldr	r3, [pc, #1084]	; 23b40 <gen_monster@@Base+0x64c>
   23700:	add	r3, pc, r3
   23704:	movw	r2, #883	; 0x373
   23708:	ldr	r1, [pc, #1076]	; 23b44 <gen_monster@@Base+0x650>
   2370c:	add	r1, pc, r1
   23710:	ldr	r0, [pc, #1072]	; 23b48 <gen_monster@@Base+0x654>
   23714:	add	r0, pc, r0
   23718:	bl	129e0 <__assert_fail@plt>
   2371c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23720:	bl	1dc3c <_start@@Base+0xb24c>
   23724:	str	r0, [fp, #-12]
   23728:	ldr	r3, [fp, #-12]
   2372c:	add	r3, r3, #16
   23730:	ldrsh	r3, [r3]
   23734:	uxth	r3, r3
   23738:	add	r3, r3, #1
   2373c:	uxth	r2, r3
   23740:	ldr	r3, [fp, #-12]
   23744:	add	r3, r3, #16
   23748:	sxth	r2, r2
   2374c:	strh	r2, [r3]
   23750:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23754:	bl	1dad8 <_start@@Base+0xb0e8>
   23758:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2375c:	bl	1b968 <_start@@Base+0x8f78>
   23760:	mov	r2, #7
   23764:	ldr	r3, [pc, #992]	; 23b4c <gen_monster@@Base+0x658>
   23768:	add	r3, pc, r3
   2376c:	mov	r1, r3
   23770:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23774:	bl	1a998 <_start@@Base+0x7fa8>
   23778:	str	r0, [fp, #-16]
   2377c:	ldr	r1, [fp, #-16]
   23780:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23784:	bl	1ca1c <_start@@Base+0xa02c>
   23788:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2378c:	bl	1b9a0 <_start@@Base+0x8fb0>
   23790:	str	r0, [fp, #-20]	; 0xffffffec
   23794:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23798:	bl	1d00c <_start@@Base+0xa61c>
   2379c:	mov	r1, #2
   237a0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   237a4:	bl	1d084 <_start@@Base+0xa694>
   237a8:	str	r0, [fp, #-24]	; 0xffffffe8
   237ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   237b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   237b4:	str	r2, [r3]
   237b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   237bc:	add	r3, r3, #4
   237c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   237c4:	str	r2, [r3]
   237c8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   237cc:	bl	1d1f8 <_start@@Base+0xa808>
   237d0:	mov	r2, #30
   237d4:	ldr	r3, [pc, #884]	; 23b50 <gen_monster@@Base+0x65c>
   237d8:	add	r3, pc, r3
   237dc:	mov	r1, r3
   237e0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   237e4:	bl	1cb4c <_start@@Base+0xa15c>
   237e8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   237ec:	bl	1d22c <_start@@Base+0xa83c>
   237f0:	mov	r3, r0
   237f4:	ldr	r3, [r3]
   237f8:	str	r3, [fp, #-28]	; 0xffffffe4
   237fc:	mov	r1, #3
   23800:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23804:	bl	1d084 <_start@@Base+0xa694>
   23808:	str	r0, [fp, #-24]	; 0xffffffe8
   2380c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   23810:	ldr	r2, [fp, #-20]	; 0xffffffec
   23814:	str	r2, [r3]
   23818:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2381c:	add	r3, r3, #4
   23820:	ldr	r2, [fp, #-28]	; 0xffffffe4
   23824:	str	r2, [r3]
   23828:	mov	r1, #1
   2382c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23830:	bl	1d104 <_start@@Base+0xa714>
   23834:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23838:	bl	1d174 <_start@@Base+0xa784>
   2383c:	mov	r3, r0
   23840:	cmp	r3, #5
   23844:	beq	23868 <gen_monster@@Base+0x374>
   23848:	ldr	r3, [pc, #772]	; 23b54 <gen_monster@@Base+0x660>
   2384c:	add	r3, pc, r3
   23850:	movw	r2, #923	; 0x39b
   23854:	ldr	r1, [pc, #764]	; 23b58 <gen_monster@@Base+0x664>
   23858:	add	r1, pc, r1
   2385c:	ldr	r0, [pc, #760]	; 23b5c <gen_monster@@Base+0x668>
   23860:	add	r0, pc, r0
   23864:	bl	129e0 <__assert_fail@plt>
   23868:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2386c:	bl	1d1f8 <_start@@Base+0xa808>
   23870:	mov	r2, #8
   23874:	ldr	r3, [pc, #740]	; 23b60 <gen_monster@@Base+0x66c>
   23878:	add	r3, pc, r3
   2387c:	mov	r1, r3
   23880:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23884:	bl	1cb4c <_start@@Base+0xa15c>
   23888:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2388c:	bl	1d22c <_start@@Base+0xa83c>
   23890:	mov	r3, r0
   23894:	ldr	r3, [r3]
   23898:	str	r3, [fp, #-76]	; 0xffffffb4
   2389c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   238a0:	bl	1d174 <_start@@Base+0xa784>
   238a4:	mov	r3, r0
   238a8:	cmp	r3, #6
   238ac:	beq	238d0 <gen_monster@@Base+0x3dc>
   238b0:	ldr	r3, [pc, #684]	; 23b64 <gen_monster@@Base+0x670>
   238b4:	add	r3, pc, r3
   238b8:	movw	r2, #929	; 0x3a1
   238bc:	ldr	r1, [pc, #676]	; 23b68 <gen_monster@@Base+0x674>
   238c0:	add	r1, pc, r1
   238c4:	ldr	r0, [pc, #672]	; 23b6c <gen_monster@@Base+0x678>
   238c8:	add	r0, pc, r0
   238cc:	bl	129e0 <__assert_fail@plt>
   238d0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   238d4:	bl	1d140 <_start@@Base+0xa750>
   238d8:	str	r0, [fp, #-24]	; 0xffffffe8
   238dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   238e0:	ldr	r3, [r3, #20]
   238e4:	str	r3, [fp, #-28]	; 0xffffffe4
   238e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   238ec:	ldr	r3, [r3, #8]
   238f0:	str	r3, [fp, #-72]	; 0xffffffb8
   238f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   238f8:	add	r3, r3, #20
   238fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   23900:	str	r2, [r3]
   23904:	ldr	r3, [fp, #-24]	; 0xffffffe8
   23908:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2390c:	str	r2, [r3]
   23910:	sub	r3, fp, #76	; 0x4c
   23914:	mov	r2, #2
   23918:	mov	r1, r3
   2391c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23920:	bl	1d0c0 <_start@@Base+0xa6d0>
   23924:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23928:	bl	1d040 <_start@@Base+0xa650>
   2392c:	ldr	r3, [pc, #572]	; 23b70 <gen_monster@@Base+0x67c>
   23930:	add	r3, pc, r3
   23934:	mov	r1, r3
   23938:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2393c:	bl	1a9dc <_start@@Base+0x7fec>
   23940:	mov	r3, r0
   23944:	str	r3, [fp, #-88]	; 0xffffffa8
   23948:	mov	r2, #2
   2394c:	ldr	r3, [pc, #544]	; 23b74 <gen_monster@@Base+0x680>
   23950:	add	r3, pc, r3
   23954:	mov	r1, r3
   23958:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2395c:	bl	1a998 <_start@@Base+0x7fa8>
   23960:	mov	r3, r0
   23964:	str	r3, [fp, #-84]	; 0xffffffac
   23968:	ldr	r3, [pc, #520]	; 23b78 <gen_monster@@Base+0x684>
   2396c:	add	r3, pc, r3
   23970:	mov	r1, r3
   23974:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23978:	bl	1a9dc <_start@@Base+0x7fec>
   2397c:	mov	r3, r0
   23980:	str	r3, [fp, #-80]	; 0xffffffb0
   23984:	sub	r3, fp, #88	; 0x58
   23988:	mov	r2, #3
   2398c:	mov	r1, r3
   23990:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23994:	bl	1d354 <_start@@Base+0xa964>
   23998:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2399c:	bl	1d4bc <_start@@Base+0xaacc>
   239a0:	sub	r3, fp, #92	; 0x5c
   239a4:	mov	r2, #1
   239a8:	mov	r1, r3
   239ac:	ldr	r0, [fp, #-96]	; 0xffffffa0
   239b0:	bl	1d630 <_start@@Base+0xac40>
   239b4:	sub	r3, fp, #92	; 0x5c
   239b8:	add	r3, r3, #1
   239bc:	mov	r2, #3
   239c0:	mov	r1, r3
   239c4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   239c8:	bl	1d630 <_start@@Base+0xac40>
   239cc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   239d0:	bl	1d4f0 <_start@@Base+0xab00>
   239d4:	sub	r3, fp, #52	; 0x34
   239d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   239dc:	mov	r0, r3
   239e0:	bl	1bcb8 <_start@@Base+0x92c8>
   239e4:	sub	r3, fp, #52	; 0x34
   239e8:	ldm	r3, {r1, r2}
   239ec:	ldr	r0, [fp, #-96]	; 0xffffffa0
   239f0:	bl	1d758 <_start@@Base+0xad68>
   239f4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   239f8:	bl	1d6e0 <_start@@Base+0xacf0>
   239fc:	ldr	r3, [pc, #376]	; 23b7c <gen_monster@@Base+0x688>
   23a00:	add	r3, pc, r3
   23a04:	mov	r1, r3
   23a08:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23a0c:	bl	1cb00 <_start@@Base+0xa110>
   23a10:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23a14:	bl	1d00c <_start@@Base+0xa61c>
   23a18:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23a1c:	bl	1e0e8 <_start@@Base+0xb6f8>
   23a20:	sub	r3, fp, #44	; 0x2c
   23a24:	ldr	r1, [fp, #-20]	; 0xffffffec
   23a28:	mov	r0, r3
   23a2c:	bl	1bcb8 <_start@@Base+0x92c8>
   23a30:	sub	r3, fp, #44	; 0x2c
   23a34:	ldm	r3, {r1, r2}
   23a38:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23a3c:	bl	1d758 <_start@@Base+0xad68>
   23a40:	ldr	r3, [pc, #312]	; 23b80 <gen_monster@@Base+0x68c>
   23a44:	add	r3, pc, r3
   23a48:	mov	r1, r3
   23a4c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23a50:	bl	1cb00 <_start@@Base+0xa110>
   23a54:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23a58:	bl	1d22c <_start@@Base+0xa83c>
   23a5c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23a60:	bl	1d1f8 <_start@@Base+0xa808>
   23a64:	ldr	r1, [fp, #-20]	; 0xffffffec
   23a68:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23a6c:	bl	1d90c <_start@@Base+0xaf1c>
   23a70:	ldr	r3, [pc, #268]	; 23b84 <gen_monster@@Base+0x690>
   23a74:	add	r3, pc, r3
   23a78:	mov	r1, r3
   23a7c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23a80:	bl	1cb00 <_start@@Base+0xa110>
   23a84:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23a88:	bl	1e11c <_start@@Base+0xb72c>
   23a8c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23a90:	bl	1d1f8 <_start@@Base+0xa808>
   23a94:	sub	r3, fp, #36	; 0x24
   23a98:	ldr	r1, [fp, #-20]	; 0xffffffec
   23a9c:	mov	r0, r3
   23aa0:	bl	1bcb8 <_start@@Base+0x92c8>
   23aa4:	sub	r3, fp, #36	; 0x24
   23aa8:	ldm	r3, {r1, r2}
   23aac:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23ab0:	bl	1d894 <_start@@Base+0xaea4>
   23ab4:	ldr	r3, [pc, #204]	; 23b88 <gen_monster@@Base+0x694>
   23ab8:	add	r3, pc, r3
   23abc:	mov	r1, r3
   23ac0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23ac4:	bl	1cb00 <_start@@Base+0xa110>
   23ac8:	mov	r1, #1
   23acc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23ad0:	bl	1d814 <_start@@Base+0xae24>
   23ad4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23ad8:	bl	1d22c <_start@@Base+0xa83c>
   23adc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23ae0:	bl	1d040 <_start@@Base+0xa650>
   23ae4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23ae8:	bl	1d714 <_start@@Base+0xad24>
   23aec:	mov	r1, #0
   23af0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23af4:	bl	1e064 <_start@@Base+0xb674>
   23af8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23afc:	bl	1df90 <_start@@Base+0xb5a0>
   23b00:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23b04:	bl	1dfc4 <_start@@Base+0xb5d4>
   23b08:	ldr	r0, [fp, #-96]	; 0xffffffa0
   23b0c:	bl	1e220 <_start@@Base+0xb830>
   23b10:	mov	r3, #0
   23b14:	mov	r0, r3
   23b18:	sub	sp, fp, #4
   23b1c:	ldr	fp, [sp]
   23b20:	add	sp, sp, #4
   23b24:	pop	{pc}		; (ldr pc, [sp], #4)
   23b28:	andeq	r0, r1, r0, ror #20
   23b2c:	andeq	r0, r1, ip, asr #20
   23b30:	andeq	pc, r0, r0, lsr #22
   23b34:			; <UNDEFINED> instruction: 0x000127b4
   23b38:	andeq	r0, r1, r0, lsl #6
   23b3c:			; <UNDEFINED> instruction: 0x000107bc
   23b40:	andeq	r2, r1, r4, ror r7
   23b44:	andeq	r0, r1, r0, asr #5
   23b48:	andeq	r0, r1, r4, lsr #15
   23b4c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   23b50:	ldrdeq	r0, [r1], -ip
   23b54:	andeq	r2, r1, r8, lsr #12
   23b58:	andeq	r0, r1, r4, ror r1
   23b5c:	andeq	r0, r1, r0, lsl #13
   23b60:	muleq	r1, ip, r6
   23b64:	andeq	r2, r1, r0, asr #11
   23b68:	andeq	r0, r1, ip, lsl #2
   23b6c:	andeq	r0, r1, r8, ror #12
   23b70:	andeq	r0, r1, r8, lsr #5
   23b74:	andeq	r0, r1, r4, asr #5
   23b78:	andeq	r0, r1, ip, asr #5
   23b7c:	andeq	r0, r1, r0, lsl #6
   23b80:	andeq	r0, r1, r0, lsr #10
   23b84:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   23b88:	andeq	r0, r1, ip, lsr #9

00023b8c <test_monster@@Base>:
   23b8c:	str	r4, [sp, #-12]!
   23b90:	str	fp, [sp, #4]
   23b94:	str	lr, [sp, #8]
   23b98:	add	fp, sp, #8
   23b9c:	sub	sp, sp, #28
   23ba0:	str	r0, [fp, #-32]	; 0xffffffe0
   23ba4:	ldr	r4, [pc, #184]	; 23c64 <test_monster@@Base+0xd8>
   23ba8:	add	r4, pc, r4
   23bac:	mov	r1, #0
   23bb0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   23bb4:	bl	234f4 <gen_monster@@Base>
   23bb8:	sub	r3, fp, #24
   23bbc:	mov	r1, r3
   23bc0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   23bc4:	bl	2efe8 <flatcc_builder_finalize_aligned_buffer@@Base>
   23bc8:	str	r0, [fp, #-16]
   23bcc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23bd0:	ldr	r3, [pc, #144]	; 23c68 <test_monster@@Base+0xdc>
   23bd4:	ldr	r3, [r4, r3]
   23bd8:	ldr	r3, [r3]
   23bdc:	ldr	r1, [fp, #-16]
   23be0:	ldr	r0, [pc, #132]	; 23c6c <test_monster@@Base+0xe0>
   23be4:	add	r0, pc, r0
   23be8:	bl	20e38 <_start@@Base+0xe448>
   23bec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   23bf0:	mov	r1, r3
   23bf4:	ldr	r0, [fp, #-16]
   23bf8:	bl	20864 <_start@@Base+0xde74>
   23bfc:	str	r0, [fp, #-20]	; 0xffffffec
   23c00:	ldr	r3, [fp, #-20]	; 0xffffffec
   23c04:	cmp	r3, #0
   23c08:	beq	23c34 <test_monster@@Base+0xa8>
   23c0c:	ldr	r0, [fp, #-20]	; 0xffffffec
   23c10:	bl	2ff24 <flatcc_verify_error_string@@Base>
   23c14:	mov	r3, r0
   23c18:	mov	r1, r3
   23c1c:	ldr	r3, [pc, #76]	; 23c70 <test_monster@@Base+0xe4>
   23c20:	add	r3, pc, r3
   23c24:	mov	r0, r3
   23c28:	bl	128f0 <printf@plt>
   23c2c:	mvn	r3, #0
   23c30:	b	23c4c <test_monster@@Base+0xc0>
   23c34:	ldr	r0, [fp, #-16]
   23c38:	bl	22318 <verify_monster@@Base>
   23c3c:	str	r0, [fp, #-20]	; 0xffffffec
   23c40:	ldr	r0, [fp, #-16]
   23c44:	bl	2f124 <flatcc_builder_aligned_free@@Base>
   23c48:	ldr	r3, [fp, #-20]	; 0xffffffec
   23c4c:	mov	r0, r3
   23c50:	sub	sp, fp, #8
   23c54:	ldr	r4, [sp]
   23c58:	ldr	fp, [sp, #4]
   23c5c:	add	sp, sp, #8
   23c60:	pop	{pc}		; (ldr pc, [sp], #4)
   23c64:	andeq	r4, r2, r0, asr r4
   23c68:	andeq	r0, r0, r8, rrx
   23c6c:	muleq	r1, ip, r3
   23c70:	andeq	r0, r1, r0, ror r3

00023c74 <test_monster_with_size@@Base>:
   23c74:	str	r4, [sp, #-12]!
   23c78:	str	fp, [sp, #4]
   23c7c:	str	lr, [sp, #8]
   23c80:	add	fp, sp, #8
   23c84:	sub	sp, sp, #36	; 0x24
   23c88:	str	r0, [fp, #-40]	; 0xffffffd8
   23c8c:	ldr	r4, [pc, #336]	; 23de4 <test_monster_with_size@@Base+0x170>
   23c90:	add	r4, pc, r4
   23c94:	mov	r1, #1
   23c98:	ldr	r0, [fp, #-40]	; 0xffffffd8
   23c9c:	bl	234f4 <gen_monster@@Base>
   23ca0:	sub	r3, fp, #32
   23ca4:	mov	r1, r3
   23ca8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   23cac:	bl	2efe8 <flatcc_builder_finalize_aligned_buffer@@Base>
   23cb0:	str	r0, [fp, #-16]
   23cb4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   23cb8:	ldr	r3, [pc, #296]	; 23de8 <test_monster_with_size@@Base+0x174>
   23cbc:	ldr	r3, [r4, r3]
   23cc0:	ldr	r3, [r3]
   23cc4:	ldr	r1, [fp, #-16]
   23cc8:	ldr	r0, [pc, #284]	; 23dec <test_monster_with_size@@Base+0x178>
   23ccc:	add	r0, pc, r0
   23cd0:	bl	20e38 <_start@@Base+0xe448>
   23cd4:	ldr	r3, [fp, #-16]
   23cd8:	and	r3, r3, #15
   23cdc:	cmp	r3, #0
   23ce0:	beq	23d14 <test_monster_with_size@@Base+0xa0>
   23ce4:	ldr	r3, [pc, #260]	; 23df0 <test_monster_with_size@@Base+0x17c>
   23ce8:	add	r3, pc, r3
   23cec:	mov	r0, r3
   23cf0:	bl	128f0 <printf@plt>
   23cf4:	ldr	r3, [fp, #-16]
   23cf8:	mov	r1, r3
   23cfc:	ldr	r3, [pc, #240]	; 23df4 <test_monster_with_size@@Base+0x180>
   23d00:	add	r3, pc, r3
   23d04:	mov	r0, r3
   23d08:	bl	128f0 <printf@plt>
   23d0c:	mvn	r3, #0
   23d10:	b	23dcc <test_monster_with_size@@Base+0x158>
   23d14:	sub	r3, fp, #36	; 0x24
   23d18:	mov	r1, r3
   23d1c:	ldr	r0, [fp, #-16]
   23d20:	bl	148f0 <_start@@Base+0x1f00>
   23d24:	str	r0, [fp, #-20]	; 0xffffffec
   23d28:	ldr	r3, [fp, #-32]	; 0xffffffe0
   23d2c:	sub	r3, r3, #4
   23d30:	str	r3, [fp, #-24]	; 0xffffffe8
   23d34:	ldr	r3, [fp, #-36]	; 0xffffffdc
   23d38:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23d3c:	cmp	r2, r3
   23d40:	beq	23d6c <test_monster_with_size@@Base+0xf8>
   23d44:	ldr	r3, [fp, #-36]	; 0xffffffdc
   23d48:	mov	r1, r3
   23d4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   23d50:	mov	r2, r3
   23d54:	ldr	r3, [pc, #156]	; 23df8 <test_monster_with_size@@Base+0x184>
   23d58:	add	r3, pc, r3
   23d5c:	mov	r0, r3
   23d60:	bl	128f0 <printf@plt>
   23d64:	mvn	r3, #0
   23d68:	b	23dcc <test_monster_with_size@@Base+0x158>
   23d6c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   23d70:	mov	r1, r3
   23d74:	ldr	r0, [fp, #-20]	; 0xffffffec
   23d78:	bl	20864 <_start@@Base+0xde74>
   23d7c:	str	r0, [fp, #-28]	; 0xffffffe4
   23d80:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23d84:	cmp	r3, #0
   23d88:	beq	23db4 <test_monster_with_size@@Base+0x140>
   23d8c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   23d90:	bl	2ff24 <flatcc_verify_error_string@@Base>
   23d94:	mov	r3, r0
   23d98:	mov	r1, r3
   23d9c:	ldr	r3, [pc, #88]	; 23dfc <test_monster_with_size@@Base+0x188>
   23da0:	add	r3, pc, r3
   23da4:	mov	r0, r3
   23da8:	bl	128f0 <printf@plt>
   23dac:	mvn	r3, #0
   23db0:	b	23dcc <test_monster_with_size@@Base+0x158>
   23db4:	ldr	r0, [fp, #-20]	; 0xffffffec
   23db8:	bl	22318 <verify_monster@@Base>
   23dbc:	str	r0, [fp, #-28]	; 0xffffffe4
   23dc0:	ldr	r0, [fp, #-16]
   23dc4:	bl	2f124 <flatcc_builder_aligned_free@@Base>
   23dc8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23dcc:	mov	r0, r3
   23dd0:	sub	sp, fp, #8
   23dd4:	ldr	r4, [sp]
   23dd8:	ldr	fp, [sp, #4]
   23ddc:	add	sp, sp, #8
   23de0:	pop	{pc}		; (ldr pc, [sp], #4)
   23de4:	andeq	r4, r2, r8, ror #6
   23de8:	andeq	r0, r0, r8, rrx
   23dec:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   23df0:	andeq	r0, r1, ip, ror #5
   23df4:	andeq	r0, r1, r8, lsr #6
   23df8:	andeq	r0, r1, r4, ror #5
   23dfc:	ldrdeq	r0, [r1], -r4

00023e00 <test_string@@Base>:
   23e00:	str	fp, [sp, #-8]!
   23e04:	str	lr, [sp, #4]
   23e08:	add	fp, sp, #4
   23e0c:	sub	sp, sp, #24
   23e10:	str	r0, [fp, #-24]	; 0xffffffe8
   23e14:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23e18:	bl	29bf4 <flatcc_builder_reset@@Base>
   23e1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23e20:	bl	1e160 <_start@@Base+0xb770>
   23e24:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23e28:	bl	1ca88 <_start@@Base+0xa098>
   23e2c:	mov	r1, #3
   23e30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23e34:	bl	1cd40 <_start@@Base+0xa350>
   23e38:	str	r0, [fp, #-8]
   23e3c:	ldr	r3, [fp, #-8]
   23e40:	mov	r2, #49	; 0x31
   23e44:	strb	r2, [r3]
   23e48:	ldr	r3, [fp, #-8]
   23e4c:	add	r3, r3, #1
   23e50:	mov	r2, #50	; 0x32
   23e54:	strb	r2, [r3]
   23e58:	ldr	r3, [fp, #-8]
   23e5c:	add	r3, r3, #2
   23e60:	mov	r2, #51	; 0x33
   23e64:	strb	r2, [r3]
   23e68:	ldr	r3, [pc, #488]	; 24058 <test_string@@Base+0x258>
   23e6c:	add	r3, pc, r3
   23e70:	mov	r1, r3
   23e74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23e78:	bl	1cc8c <_start@@Base+0xa29c>
   23e7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23e80:	bl	1cd0c <_start@@Base+0xa31c>
   23e84:	mov	r3, r0
   23e88:	cmp	r3, #4
   23e8c:	beq	23eb0 <test_string@@Base+0xb0>
   23e90:	ldr	r3, [pc, #452]	; 2405c <test_string@@Base+0x25c>
   23e94:	add	r3, pc, r3
   23e98:	movw	r2, #1080	; 0x438
   23e9c:	ldr	r1, [pc, #444]	; 24060 <test_string@@Base+0x260>
   23ea0:	add	r1, pc, r1
   23ea4:	ldr	r0, [pc, #440]	; 24064 <test_string@@Base+0x264>
   23ea8:	add	r0, pc, r0
   23eac:	bl	129e0 <__assert_fail@plt>
   23eb0:	mov	r2, #30
   23eb4:	ldr	r3, [pc, #428]	; 24068 <test_string@@Base+0x268>
   23eb8:	add	r3, pc, r3
   23ebc:	mov	r1, r3
   23ec0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23ec4:	bl	1ccc8 <_start@@Base+0xa2d8>
   23ec8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23ecc:	bl	1cd0c <_start@@Base+0xa31c>
   23ed0:	mov	r3, r0
   23ed4:	cmp	r3, #8
   23ed8:	beq	23efc <test_string@@Base+0xfc>
   23edc:	ldr	r3, [pc, #392]	; 2406c <test_string@@Base+0x26c>
   23ee0:	add	r3, pc, r3
   23ee4:	movw	r2, #1082	; 0x43a
   23ee8:	ldr	r1, [pc, #384]	; 24070 <test_string@@Base+0x270>
   23eec:	add	r1, pc, r1
   23ef0:	ldr	r0, [pc, #380]	; 24074 <test_string@@Base+0x274>
   23ef4:	add	r0, pc, r0
   23ef8:	bl	129e0 <__assert_fail@plt>
   23efc:	mov	r2, #2
   23f00:	ldr	r3, [pc, #368]	; 24078 <test_string@@Base+0x278>
   23f04:	add	r3, pc, r3
   23f08:	mov	r1, r3
   23f0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23f10:	bl	1cc48 <_start@@Base+0xa258>
   23f14:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23f18:	bl	1cd0c <_start@@Base+0xa31c>
   23f1c:	mov	r3, r0
   23f20:	cmp	r3, #10
   23f24:	beq	23f48 <test_string@@Base+0x148>
   23f28:	ldr	r3, [pc, #332]	; 2407c <test_string@@Base+0x27c>
   23f2c:	add	r3, pc, r3
   23f30:	movw	r2, #1084	; 0x43c
   23f34:	ldr	r1, [pc, #324]	; 24080 <test_string@@Base+0x280>
   23f38:	add	r1, pc, r1
   23f3c:	ldr	r0, [pc, #320]	; 24084 <test_string@@Base+0x284>
   23f40:	add	r0, pc, r0
   23f44:	bl	129e0 <__assert_fail@plt>
   23f48:	mov	r1, #3
   23f4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23f50:	bl	1cdb0 <_start@@Base+0xa3c0>
   23f54:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23f58:	bl	1cd0c <_start@@Base+0xa31c>
   23f5c:	mov	r3, r0
   23f60:	cmp	r3, #7
   23f64:	beq	23f88 <test_string@@Base+0x188>
   23f68:	ldr	r3, [pc, #280]	; 24088 <test_string@@Base+0x288>
   23f6c:	add	r3, pc, r3
   23f70:	movw	r2, #1086	; 0x43e
   23f74:	ldr	r1, [pc, #272]	; 2408c <test_string@@Base+0x28c>
   23f78:	add	r1, pc, r1
   23f7c:	ldr	r0, [pc, #268]	; 24090 <test_string@@Base+0x290>
   23f80:	add	r0, pc, r0
   23f84:	bl	129e0 <__assert_fail@plt>
   23f88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23f8c:	bl	1cd7c <_start@@Base+0xa38c>
   23f90:	str	r0, [fp, #-8]
   23f94:	ldr	r3, [fp, #-8]
   23f98:	add	r3, r3, #4
   23f9c:	mov	r2, #46	; 0x2e
   23fa0:	strb	r2, [r3]
   23fa4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23fa8:	bl	1cabc <_start@@Base+0xa0cc>
   23fac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23fb0:	bl	1e220 <_start@@Base+0xb830>
   23fb4:	mov	r1, #0
   23fb8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23fbc:	bl	2edc8 <flatcc_builder_get_direct_buffer@@Base>
   23fc0:	str	r0, [fp, #-12]
   23fc4:	ldr	r3, [fp, #-12]
   23fc8:	cmp	r3, #0
   23fcc:	bne	23ff0 <test_string@@Base+0x1f0>
   23fd0:	ldr	r3, [pc, #188]	; 24094 <test_string@@Base+0x294>
   23fd4:	add	r3, pc, r3
   23fd8:	movw	r2, #1093	; 0x445
   23fdc:	ldr	r1, [pc, #180]	; 24098 <test_string@@Base+0x298>
   23fe0:	add	r1, pc, r1
   23fe4:	ldr	r0, [pc, #176]	; 2409c <test_string@@Base+0x29c>
   23fe8:	add	r0, pc, r0
   23fec:	bl	129e0 <__assert_fail@plt>
   23ff0:	ldr	r0, [fp, #-12]
   23ff4:	bl	15d5c <_start@@Base+0x336c>
   23ff8:	str	r0, [fp, #-16]
   23ffc:	ldr	r0, [fp, #-16]
   24000:	bl	16698 <_start@@Base+0x3ca8>
   24004:	mov	r2, r0
   24008:	ldr	r3, [pc, #144]	; 240a0 <test_string@@Base+0x2a0>
   2400c:	add	r3, pc, r3
   24010:	mov	r1, r3
   24014:	mov	r0, r2
   24018:	bl	128e4 <strcmp@plt>
   2401c:	mov	r3, r0
   24020:	cmp	r3, #0
   24024:	beq	24040 <test_string@@Base+0x240>
   24028:	ldr	r3, [pc, #116]	; 240a4 <test_string@@Base+0x2a4>
   2402c:	add	r3, pc, r3
   24030:	mov	r0, r3
   24034:	bl	12944 <puts@plt>
   24038:	mvn	r3, #0
   2403c:	b	24044 <test_string@@Base+0x244>
   24040:	mov	r3, #0
   24044:	mov	r0, r3
   24048:	sub	sp, fp, #4
   2404c:	ldr	fp, [sp]
   24050:	add	sp, sp, #4
   24054:	pop	{pc}		; (ldr pc, [sp], #4)
   24058:	andeq	r0, r1, r4, asr #4
   2405c:	andeq	r2, r1, r4
   24060:	andeq	pc, r0, ip, lsr #22
   24064:	andeq	r0, r1, ip, lsl #4
   24068:	andeq	r0, r1, r4, lsr #4
   2406c:			; <UNDEFINED> instruction: 0x00011fb8
   24070:	andeq	pc, r0, r0, ror #21
   24074:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   24078:	andeq	r0, r1, r8, lsl #4
   2407c:	andeq	r1, r1, ip, ror #30
   24080:	muleq	r0, r4, sl
   24084:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   24088:	andeq	r1, r1, ip, lsr #30
   2408c:	andeq	pc, r0, r4, asr sl	; <UNPREDICTABLE>
   24090:			; <UNDEFINED> instruction: 0x000101b8
   24094:	andeq	r1, r1, r4, asr #29
   24098:	andeq	pc, r0, ip, ror #19
   2409c:	andeq	r0, r1, r8, ror r1
   240a0:	andeq	r0, r1, ip, asr r1
   240a4:	andeq	r0, r1, r4, asr #2

000240a8 <test_sort_find@@Base>:
   240a8:	str	r4, [sp, #-12]!
   240ac:	str	fp, [sp, #4]
   240b0:	str	lr, [sp, #8]
   240b4:	add	fp, sp, #8
   240b8:	sub	sp, sp, #44	; 0x2c
   240bc:	str	r0, [fp, #-48]	; 0xffffffd0
   240c0:	ldr	r4, [pc, #1460]	; 2467c <test_sort_find@@Base+0x5d4>
   240c4:	add	r4, pc, r4
   240c8:	mvn	r3, #0
   240cc:	str	r3, [fp, #-16]
   240d0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   240d4:	bl	29bf4 <flatcc_builder_reset@@Base>
   240d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   240dc:	bl	1e160 <_start@@Base+0xb770>
   240e0:	ldr	r3, [pc, #1432]	; 24680 <test_sort_find@@Base+0x5d8>
   240e4:	add	r3, pc, r3
   240e8:	mov	r1, r3
   240ec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   240f0:	bl	1cb00 <_start@@Base+0xa110>
   240f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   240f8:	bl	1d00c <_start@@Base+0xa61c>
   240fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24100:	bl	1d1f8 <_start@@Base+0xa808>
   24104:	ldr	r3, [pc, #1400]	; 24684 <test_sort_find@@Base+0x5dc>
   24108:	add	r3, pc, r3
   2410c:	mov	r1, r3
   24110:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24114:	bl	1cb00 <_start@@Base+0xa110>
   24118:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2411c:	bl	1d22c <_start@@Base+0xa83c>
   24120:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24124:	bl	1d1f8 <_start@@Base+0xa808>
   24128:	ldr	r3, [pc, #1368]	; 24688 <test_sort_find@@Base+0x5e0>
   2412c:	add	r3, pc, r3
   24130:	mov	r1, r3
   24134:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24138:	bl	1cb00 <_start@@Base+0xa110>
   2413c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24140:	bl	1d22c <_start@@Base+0xa83c>
   24144:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24148:	bl	1d1f8 <_start@@Base+0xa808>
   2414c:	ldr	r3, [pc, #1336]	; 2468c <test_sort_find@@Base+0x5e4>
   24150:	add	r3, pc, r3
   24154:	mov	r1, r3
   24158:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2415c:	bl	1cb00 <_start@@Base+0xa110>
   24160:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24164:	bl	1d22c <_start@@Base+0xa83c>
   24168:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2416c:	bl	1d1f8 <_start@@Base+0xa808>
   24170:	ldr	r3, [pc, #1304]	; 24690 <test_sort_find@@Base+0x5e8>
   24174:	add	r3, pc, r3
   24178:	mov	r1, r3
   2417c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24180:	bl	1cb00 <_start@@Base+0xa110>
   24184:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24188:	bl	1d22c <_start@@Base+0xa83c>
   2418c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24190:	bl	1d1f8 <_start@@Base+0xa808>
   24194:	ldr	r3, [pc, #1272]	; 24694 <test_sort_find@@Base+0x5ec>
   24198:	add	r3, pc, r3
   2419c:	mov	r1, r3
   241a0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   241a4:	bl	1cb00 <_start@@Base+0xa110>
   241a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   241ac:	bl	1d22c <_start@@Base+0xa83c>
   241b0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   241b4:	bl	1d040 <_start@@Base+0xa650>
   241b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   241bc:	bl	1e220 <_start@@Base+0xb830>
   241c0:	sub	r3, fp, #40	; 0x28
   241c4:	mov	r1, r3
   241c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   241cc:	bl	2efe8 <flatcc_builder_finalize_aligned_buffer@@Base>
   241d0:	str	r0, [fp, #-20]	; 0xffffffec
   241d4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   241d8:	ldr	r3, [pc, #1208]	; 24698 <test_sort_find@@Base+0x5f0>
   241dc:	ldr	r3, [r4, r3]
   241e0:	ldr	r3, [r3]
   241e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   241e8:	ldr	r0, [pc, #1196]	; 2469c <test_sort_find@@Base+0x5f4>
   241ec:	add	r0, pc, r0
   241f0:	bl	20e38 <_start@@Base+0xe448>
   241f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   241f8:	bl	15d5c <_start@@Base+0x336c>
   241fc:	str	r0, [fp, #-24]	; 0xffffffe8
   24200:	ldr	r0, [fp, #-24]	; 0xffffffe8
   24204:	bl	178b8 <_start@@Base+0x4ec8>
   24208:	str	r0, [fp, #-28]	; 0xffffffe4
   2420c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   24210:	cmp	r3, #0
   24214:	bne	24238 <test_sort_find@@Base+0x190>
   24218:	ldr	r3, [pc, #1152]	; 246a0 <test_sort_find@@Base+0x5f8>
   2421c:	add	r3, pc, r3
   24220:	movw	r2, #1147	; 0x47b
   24224:	ldr	r1, [pc, #1144]	; 246a4 <test_sort_find@@Base+0x5fc>
   24228:	add	r1, pc, r1
   2422c:	ldr	r0, [pc, #1140]	; 246a8 <test_sort_find@@Base+0x600>
   24230:	add	r0, pc, r0
   24234:	bl	129e0 <__assert_fail@plt>
   24238:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2423c:	str	r3, [fp, #-32]	; 0xffffffe0
   24240:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24244:	bl	17378 <_start@@Base+0x4988>
   24248:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2424c:	ldr	r3, [pc, #1092]	; 24698 <test_sort_find@@Base+0x5f0>
   24250:	ldr	r3, [r4, r3]
   24254:	ldr	r3, [r3]
   24258:	ldr	r1, [fp, #-20]	; 0xffffffec
   2425c:	ldr	r0, [pc, #1096]	; 246ac <test_sort_find@@Base+0x604>
   24260:	add	r0, pc, r0
   24264:	bl	20e38 <_start@@Base+0xe448>
   24268:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2426c:	bl	15c08 <_start@@Base+0x3218>
   24270:	mov	r3, r0
   24274:	cmp	r3, #5
   24278:	beq	24290 <test_sort_find@@Base+0x1e8>
   2427c:	ldr	r3, [pc, #1068]	; 246b0 <test_sort_find@@Base+0x608>
   24280:	add	r3, pc, r3
   24284:	mov	r0, r3
   24288:	bl	12944 <puts@plt>
   2428c:	b	24658 <test_sort_find@@Base+0x5b0>
   24290:	mov	r1, #0
   24294:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24298:	bl	15c58 <_start@@Base+0x3268>
   2429c:	mov	r3, r0
   242a0:	mov	r0, r3
   242a4:	bl	16698 <_start@@Base+0x3ca8>
   242a8:	mov	r2, r0
   242ac:	ldr	r3, [pc, #1024]	; 246b4 <test_sort_find@@Base+0x60c>
   242b0:	add	r3, pc, r3
   242b4:	mov	r1, r3
   242b8:	mov	r0, r2
   242bc:	bl	128e4 <strcmp@plt>
   242c0:	mov	r3, r0
   242c4:	cmp	r3, #0
   242c8:	beq	242e0 <test_sort_find@@Base+0x238>
   242cc:	ldr	r3, [pc, #996]	; 246b8 <test_sort_find@@Base+0x610>
   242d0:	add	r3, pc, r3
   242d4:	mov	r0, r3
   242d8:	bl	12944 <puts@plt>
   242dc:	b	24658 <test_sort_find@@Base+0x5b0>
   242e0:	mov	r1, #1
   242e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   242e8:	bl	15c58 <_start@@Base+0x3268>
   242ec:	mov	r3, r0
   242f0:	mov	r0, r3
   242f4:	bl	16698 <_start@@Base+0x3ca8>
   242f8:	mov	r2, r0
   242fc:	ldr	r3, [pc, #952]	; 246bc <test_sort_find@@Base+0x614>
   24300:	add	r3, pc, r3
   24304:	mov	r1, r3
   24308:	mov	r0, r2
   2430c:	bl	128e4 <strcmp@plt>
   24310:	mov	r3, r0
   24314:	cmp	r3, #0
   24318:	beq	24330 <test_sort_find@@Base+0x288>
   2431c:	ldr	r3, [pc, #924]	; 246c0 <test_sort_find@@Base+0x618>
   24320:	add	r3, pc, r3
   24324:	mov	r0, r3
   24328:	bl	12944 <puts@plt>
   2432c:	b	24658 <test_sort_find@@Base+0x5b0>
   24330:	mov	r1, #2
   24334:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24338:	bl	15c58 <_start@@Base+0x3268>
   2433c:	mov	r3, r0
   24340:	mov	r0, r3
   24344:	bl	16698 <_start@@Base+0x3ca8>
   24348:	mov	r2, r0
   2434c:	ldr	r3, [pc, #880]	; 246c4 <test_sort_find@@Base+0x61c>
   24350:	add	r3, pc, r3
   24354:	mov	r1, r3
   24358:	mov	r0, r2
   2435c:	bl	128e4 <strcmp@plt>
   24360:	mov	r3, r0
   24364:	cmp	r3, #0
   24368:	beq	24380 <test_sort_find@@Base+0x2d8>
   2436c:	ldr	r3, [pc, #852]	; 246c8 <test_sort_find@@Base+0x620>
   24370:	add	r3, pc, r3
   24374:	mov	r0, r3
   24378:	bl	12944 <puts@plt>
   2437c:	b	24658 <test_sort_find@@Base+0x5b0>
   24380:	mov	r1, #3
   24384:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24388:	bl	15c58 <_start@@Base+0x3268>
   2438c:	mov	r3, r0
   24390:	mov	r0, r3
   24394:	bl	16698 <_start@@Base+0x3ca8>
   24398:	mov	r2, r0
   2439c:	ldr	r3, [pc, #808]	; 246cc <test_sort_find@@Base+0x624>
   243a0:	add	r3, pc, r3
   243a4:	mov	r1, r3
   243a8:	mov	r0, r2
   243ac:	bl	128e4 <strcmp@plt>
   243b0:	mov	r3, r0
   243b4:	cmp	r3, #0
   243b8:	beq	243d0 <test_sort_find@@Base+0x328>
   243bc:	ldr	r3, [pc, #780]	; 246d0 <test_sort_find@@Base+0x628>
   243c0:	add	r3, pc, r3
   243c4:	mov	r0, r3
   243c8:	bl	12944 <puts@plt>
   243cc:	b	24658 <test_sort_find@@Base+0x5b0>
   243d0:	mov	r1, #4
   243d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   243d8:	bl	15c58 <_start@@Base+0x3268>
   243dc:	mov	r3, r0
   243e0:	mov	r0, r3
   243e4:	bl	16698 <_start@@Base+0x3ca8>
   243e8:	mov	r2, r0
   243ec:	ldr	r3, [pc, #736]	; 246d4 <test_sort_find@@Base+0x62c>
   243f0:	add	r3, pc, r3
   243f4:	mov	r1, r3
   243f8:	mov	r0, r2
   243fc:	bl	128e4 <strcmp@plt>
   24400:	mov	r3, r0
   24404:	cmp	r3, #0
   24408:	beq	24420 <test_sort_find@@Base+0x378>
   2440c:	ldr	r3, [pc, #708]	; 246d8 <test_sort_find@@Base+0x630>
   24410:	add	r3, pc, r3
   24414:	mov	r0, r3
   24418:	bl	12944 <puts@plt>
   2441c:	b	24658 <test_sort_find@@Base+0x5b0>
   24420:	mov	r1, #1
   24424:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24428:	bl	15c58 <_start@@Base+0x3268>
   2442c:	mov	r4, r0
   24430:	mov	r1, #2
   24434:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24438:	bl	15c58 <_start@@Base+0x3268>
   2443c:	mov	r3, r0
   24440:	cmp	r4, r3
   24444:	bne	2445c <test_sort_find@@Base+0x3b4>
   24448:	ldr	r3, [pc, #652]	; 246dc <test_sort_find@@Base+0x634>
   2444c:	add	r3, pc, r3
   24450:	mov	r0, r3
   24454:	bl	12944 <puts@plt>
   24458:	b	24658 <test_sort_find@@Base+0x5b0>
   2445c:	ldr	r3, [pc, #636]	; 246e0 <test_sort_find@@Base+0x638>
   24460:	add	r3, pc, r3
   24464:	mov	r1, r3
   24468:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2446c:	bl	173a8 <_start@@Base+0x49b8>
   24470:	mov	r3, r0
   24474:	cmp	r3, #3
   24478:	beq	24490 <test_sort_find@@Base+0x3e8>
   2447c:	ldr	r3, [pc, #608]	; 246e4 <test_sort_find@@Base+0x63c>
   24480:	add	r3, pc, r3
   24484:	mov	r0, r3
   24488:	bl	12944 <puts@plt>
   2448c:	b	24658 <test_sort_find@@Base+0x5b0>
   24490:	mov	r2, #5
   24494:	ldr	r3, [pc, #588]	; 246e8 <test_sort_find@@Base+0x640>
   24498:	add	r3, pc, r3
   2449c:	mov	r1, r3
   244a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   244a4:	bl	173e4 <_start@@Base+0x49f4>
   244a8:	mov	r3, r0
   244ac:	cmp	r3, #3
   244b0:	beq	244c8 <test_sort_find@@Base+0x420>
   244b4:	ldr	r3, [pc, #560]	; 246ec <test_sort_find@@Base+0x644>
   244b8:	add	r3, pc, r3
   244bc:	mov	r0, r3
   244c0:	bl	12944 <puts@plt>
   244c4:	b	24658 <test_sort_find@@Base+0x5b0>
   244c8:	ldr	r3, [pc, #544]	; 246f0 <test_sort_find@@Base+0x648>
   244cc:	add	r3, pc, r3
   244d0:	mov	r1, r3
   244d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   244d8:	bl	16dc8 <_start@@Base+0x43d8>
   244dc:	mov	r3, r0
   244e0:	cmp	r3, #3
   244e4:	beq	244fc <test_sort_find@@Base+0x454>
   244e8:	ldr	r3, [pc, #516]	; 246f4 <test_sort_find@@Base+0x64c>
   244ec:	add	r3, pc, r3
   244f0:	mov	r0, r3
   244f4:	bl	12944 <puts@plt>
   244f8:	b	24658 <test_sort_find@@Base+0x5b0>
   244fc:	mov	r2, #5
   24500:	ldr	r3, [pc, #496]	; 246f8 <test_sort_find@@Base+0x650>
   24504:	add	r3, pc, r3
   24508:	mov	r1, r3
   2450c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24510:	bl	16f14 <_start@@Base+0x4524>
   24514:	mov	r3, r0
   24518:	cmp	r3, #3
   2451c:	beq	24534 <test_sort_find@@Base+0x48c>
   24520:	ldr	r3, [pc, #468]	; 246fc <test_sort_find@@Base+0x654>
   24524:	add	r3, pc, r3
   24528:	mov	r0, r3
   2452c:	bl	12944 <puts@plt>
   24530:	b	24658 <test_sort_find@@Base+0x5b0>
   24534:	ldr	r3, [pc, #452]	; 24700 <test_sort_find@@Base+0x658>
   24538:	add	r3, pc, r3
   2453c:	mov	r1, r3
   24540:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24544:	bl	16dc8 <_start@@Base+0x43d8>
   24548:	mov	r2, r0
   2454c:	ldr	r3, [pc, #432]	; 24704 <test_sort_find@@Base+0x65c>
   24550:	add	r3, pc, r3
   24554:	ldr	r3, [r3]
   24558:	cmp	r2, r3
   2455c:	beq	24574 <test_sort_find@@Base+0x4cc>
   24560:	ldr	r3, [pc, #416]	; 24708 <test_sort_find@@Base+0x660>
   24564:	add	r3, pc, r3
   24568:	mov	r0, r3
   2456c:	bl	12944 <puts@plt>
   24570:	b	24658 <test_sort_find@@Base+0x5b0>
   24574:	ldr	r3, [pc, #400]	; 2470c <test_sort_find@@Base+0x664>
   24578:	add	r3, pc, r3
   2457c:	mov	r1, r3
   24580:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24584:	bl	16dc8 <_start@@Base+0x43d8>
   24588:	mov	r3, r0
   2458c:	cmp	r3, #0
   24590:	beq	245a8 <test_sort_find@@Base+0x500>
   24594:	ldr	r3, [pc, #372]	; 24710 <test_sort_find@@Base+0x668>
   24598:	add	r3, pc, r3
   2459c:	mov	r0, r3
   245a0:	bl	12944 <puts@plt>
   245a4:	b	24658 <test_sort_find@@Base+0x5b0>
   245a8:	ldr	r3, [pc, #356]	; 24714 <test_sort_find@@Base+0x66c>
   245ac:	add	r3, pc, r3
   245b0:	mov	r1, r3
   245b4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   245b8:	bl	16dc8 <_start@@Base+0x43d8>
   245bc:	str	r0, [fp, #-36]	; 0xffffffdc
   245c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   245c4:	cmp	r3, #1
   245c8:	beq	245f8 <test_sort_find@@Base+0x550>
   245cc:	ldr	r3, [pc, #324]	; 24718 <test_sort_find@@Base+0x670>
   245d0:	add	r3, pc, r3
   245d4:	mov	r0, r3
   245d8:	bl	12944 <puts@plt>
   245dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   245e0:	mov	r1, r3
   245e4:	ldr	r3, [pc, #304]	; 2471c <test_sort_find@@Base+0x674>
   245e8:	add	r3, pc, r3
   245ec:	mov	r0, r3
   245f0:	bl	128f0 <printf@plt>
   245f4:	b	24658 <test_sort_find@@Base+0x5b0>
   245f8:	ldr	r3, [pc, #288]	; 24720 <test_sort_find@@Base+0x678>
   245fc:	add	r3, pc, r3
   24600:	mov	r1, r3
   24604:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24608:	bl	16dc8 <_start@@Base+0x43d8>
   2460c:	str	r0, [fp, #-36]	; 0xffffffdc
   24610:	ldr	r3, [fp, #-36]	; 0xffffffdc
   24614:	cmp	r3, #4
   24618:	beq	24648 <test_sort_find@@Base+0x5a0>
   2461c:	ldr	r3, [pc, #256]	; 24724 <test_sort_find@@Base+0x67c>
   24620:	add	r3, pc, r3
   24624:	mov	r0, r3
   24628:	bl	12944 <puts@plt>
   2462c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   24630:	mov	r1, r3
   24634:	ldr	r3, [pc, #236]	; 24728 <test_sort_find@@Base+0x680>
   24638:	add	r3, pc, r3
   2463c:	mov	r0, r3
   24640:	bl	128f0 <printf@plt>
   24644:	b	24658 <test_sort_find@@Base+0x5b0>
   24648:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2464c:	bl	17378 <_start@@Base+0x4988>
   24650:	mov	r3, #0
   24654:	str	r3, [fp, #-16]
   24658:	ldr	r0, [fp, #-20]	; 0xffffffec
   2465c:	bl	2f124 <flatcc_builder_aligned_free@@Base>
   24660:	ldr	r3, [fp, #-16]
   24664:	mov	r0, r3
   24668:	sub	sp, fp, #8
   2466c:	ldr	r4, [sp]
   24670:	ldr	fp, [sp, #4]
   24674:	add	sp, sp, #8
   24678:	pop	{pc}		; (ldr pc, [sp], #4)
   2467c:	andeq	r3, r2, r4, lsr pc
   24680:	andeq	lr, r0, ip, ror #31
   24684:	andeq	pc, r0, r0, lsr r9	; <UNPREDICTABLE>
   24688:	andeq	pc, r0, r8, lsl #19
   2468c:	muleq	r0, r0, r9
   24690:	andeq	r0, r1, r0, lsl r0
   24694:	andeq	pc, r0, r8, asr #18
   24698:	andeq	r0, r0, r8, rrx
   2469c:	andeq	pc, r0, r0, lsr #31
   246a0:	andeq	r1, r1, r8, lsl #25
   246a4:	andeq	pc, r0, r4, lsr #15
   246a8:	andeq	pc, r0, r4, ror pc	; <UNPREDICTABLE>
   246ac:	andeq	pc, r0, r0, asr pc	; <UNPREDICTABLE>
   246b0:	andeq	pc, r0, r8, asr #30
   246b4:	ldrdeq	pc, [r0], -r4
   246b8:	andeq	pc, r0, r0, lsr #30
   246bc:	andeq	pc, r0, r0, ror #15
   246c0:	strdeq	pc, [r0], -r0
   246c4:	muleq	r0, r0, r7
   246c8:	andeq	pc, r0, r0, asr #29
   246cc:	andeq	pc, r0, r4, lsl r7	; <UNPREDICTABLE>
   246d0:	muleq	r0, r0, lr
   246d4:	andeq	pc, r0, r8, asr #12
   246d8:	andeq	pc, r0, r0, ror #28
   246dc:	andeq	pc, r0, r4, asr #28
   246e0:	andeq	pc, r0, r4, asr r6	; <UNPREDICTABLE>
   246e4:	andeq	pc, r0, r8, asr lr	; <UNPREDICTABLE>
   246e8:	andeq	pc, r0, ip, ror #28
   246ec:	andeq	pc, r0, r4, asr lr	; <UNPREDICTABLE>
   246f0:	andeq	pc, r0, r8, ror #11
   246f4:	andeq	pc, r0, r4, asr lr	; <UNPREDICTABLE>
   246f8:	andeq	pc, r0, r8, asr lr	; <UNPREDICTABLE>
   246fc:	andeq	pc, r0, r0, asr #28
   24700:	andeq	pc, r0, r0, asr lr	; <UNPREDICTABLE>
   24704:	andeq	r3, r2, r8, lsr #22
   24708:	andeq	pc, r0, ip, lsr #28
   2470c:	andeq	pc, r0, ip, lsl #24
   24710:	andeq	pc, r0, r0, lsl lr	; <UNPREDICTABLE>
   24714:	andeq	pc, r0, r4, lsr r5	; <UNPREDICTABLE>
   24718:	andeq	pc, r0, r8, ror #27
   2471c:	andeq	pc, r0, r4, ror #27
   24720:	andeq	pc, r0, ip, lsr r4	; <UNPREDICTABLE>
   24724:			; <UNDEFINED> instruction: 0x0000fdb4
   24728:	muleq	r0, r4, sp
   2472c:	str	fp, [sp, #-8]!
   24730:	str	lr, [sp, #4]
   24734:	add	fp, sp, #4
   24738:	sub	sp, sp, #16
   2473c:	str	r0, [fp, #-16]
   24740:	str	r1, [fp, #-20]	; 0xffffffec
   24744:	mov	r3, #0
   24748:	str	r3, [fp, #-12]
   2474c:	ldr	r1, [fp, #-20]	; 0xffffffec
   24750:	ldr	r0, [fp, #-16]
   24754:	bl	17428 <_start@@Base+0x4a38>
   24758:	str	r0, [fp, #-8]
   2475c:	b	24790 <test_sort_find@@Base+0x6e8>
   24760:	ldr	r3, [fp, #-12]
   24764:	add	r3, r3, #1
   24768:	str	r3, [fp, #-12]
   2476c:	ldr	r3, [fp, #-8]
   24770:	add	r1, r3, #1
   24774:	ldr	r3, [pc, #68]	; 247c0 <test_sort_find@@Base+0x718>
   24778:	add	r3, pc, r3
   2477c:	ldr	r2, [r3]
   24780:	ldr	r3, [fp, #-20]	; 0xffffffec
   24784:	ldr	r0, [fp, #-16]
   24788:	bl	174a8 <_start@@Base+0x4ab8>
   2478c:	str	r0, [fp, #-8]
   24790:	ldr	r3, [pc, #44]	; 247c4 <test_sort_find@@Base+0x71c>
   24794:	add	r3, pc, r3
   24798:	ldr	r3, [r3]
   2479c:	ldr	r2, [fp, #-8]
   247a0:	cmp	r2, r3
   247a4:	bne	24760 <test_sort_find@@Base+0x6b8>
   247a8:	ldr	r3, [fp, #-12]
   247ac:	mov	r0, r3
   247b0:	sub	sp, fp, #4
   247b4:	ldr	fp, [sp]
   247b8:	add	sp, sp, #4
   247bc:	pop	{pc}		; (ldr pc, [sp], #4)
   247c0:	andeq	r3, r2, r4, lsl #18
   247c4:	andeq	r3, r2, r4, ror #17

000247c8 <test_scan@@Base>:
   247c8:	str	fp, [sp, #-8]!
   247cc:	str	lr, [sp, #4]
   247d0:	add	fp, sp, #4
   247d4:	sub	sp, sp, #56	; 0x38
   247d8:	str	r0, [fp, #-48]	; 0xffffffd0
   247dc:	ldr	r2, [pc, #3664]	; 25634 <test_scan@@Base+0xe6c>
   247e0:	add	r2, pc, r2
   247e4:	sub	r3, fp, #44	; 0x2c
   247e8:	ldr	r1, [r2]
   247ec:	str	r1, [r3]
   247f0:	ldrh	r1, [r2, #4]
   247f4:	strh	r1, [r3, #4]
   247f8:	ldrb	r2, [r2, #6]
   247fc:	strb	r2, [r3, #6]
   24800:	mvn	r3, #0
   24804:	str	r3, [fp, #-8]
   24808:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2480c:	bl	29bf4 <flatcc_builder_reset@@Base>
   24810:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24814:	bl	1e160 <_start@@Base+0xb770>
   24818:	ldr	r3, [pc, #3608]	; 25638 <test_scan@@Base+0xe70>
   2481c:	add	r3, pc, r3
   24820:	mov	r1, r3
   24824:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24828:	bl	1cb00 <_start@@Base+0xa110>
   2482c:	sub	r3, fp, #44	; 0x2c
   24830:	mov	r2, #7
   24834:	mov	r1, r3
   24838:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2483c:	bl	1cf4c <_start@@Base+0xa55c>
   24840:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24844:	bl	1d2dc <_start@@Base+0xa8ec>
   24848:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2484c:	bl	1d310 <_start@@Base+0xa920>
   24850:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24854:	bl	1d00c <_start@@Base+0xa61c>
   24858:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2485c:	bl	1d1f8 <_start@@Base+0xa808>
   24860:	ldr	r3, [pc, #3540]	; 2563c <test_scan@@Base+0xe74>
   24864:	add	r3, pc, r3
   24868:	mov	r1, r3
   2486c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24870:	bl	1cb00 <_start@@Base+0xa110>
   24874:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24878:	bl	1d22c <_start@@Base+0xa83c>
   2487c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24880:	bl	1d1f8 <_start@@Base+0xa808>
   24884:	ldr	r3, [pc, #3508]	; 25640 <test_scan@@Base+0xe78>
   24888:	add	r3, pc, r3
   2488c:	mov	r1, r3
   24890:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24894:	bl	1cb00 <_start@@Base+0xa110>
   24898:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2489c:	bl	1d22c <_start@@Base+0xa83c>
   248a0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   248a4:	bl	1d1f8 <_start@@Base+0xa808>
   248a8:	ldr	r3, [pc, #3476]	; 25644 <test_scan@@Base+0xe7c>
   248ac:	add	r3, pc, r3
   248b0:	mov	r1, r3
   248b4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   248b8:	bl	1cb00 <_start@@Base+0xa110>
   248bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   248c0:	bl	1d22c <_start@@Base+0xa83c>
   248c4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   248c8:	bl	1d1f8 <_start@@Base+0xa808>
   248cc:	ldr	r3, [pc, #3444]	; 25648 <test_scan@@Base+0xe80>
   248d0:	add	r3, pc, r3
   248d4:	mov	r1, r3
   248d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   248dc:	bl	1cb00 <_start@@Base+0xa110>
   248e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   248e4:	bl	1d22c <_start@@Base+0xa83c>
   248e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   248ec:	bl	1d1f8 <_start@@Base+0xa808>
   248f0:	ldr	r3, [pc, #3412]	; 2564c <test_scan@@Base+0xe84>
   248f4:	add	r3, pc, r3
   248f8:	mov	r1, r3
   248fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24900:	bl	1cb00 <_start@@Base+0xa110>
   24904:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24908:	bl	1d22c <_start@@Base+0xa83c>
   2490c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24910:	bl	1d040 <_start@@Base+0xa650>
   24914:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24918:	bl	1e220 <_start@@Base+0xb830>
   2491c:	sub	r3, fp, #36	; 0x24
   24920:	mov	r1, r3
   24924:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24928:	bl	2efe8 <flatcc_builder_finalize_aligned_buffer@@Base>
   2492c:	str	r0, [fp, #-12]
   24930:	ldr	r0, [fp, #-12]
   24934:	bl	15d5c <_start@@Base+0x336c>
   24938:	str	r0, [fp, #-16]
   2493c:	ldr	r0, [fp, #-16]
   24940:	bl	178b8 <_start@@Base+0x4ec8>
   24944:	str	r0, [fp, #-20]	; 0xffffffec
   24948:	ldr	r3, [fp, #-20]	; 0xffffffec
   2494c:	cmp	r3, #0
   24950:	bne	24974 <test_scan@@Base+0x1ac>
   24954:	ldr	r3, [pc, #3316]	; 25650 <test_scan@@Base+0xe88>
   24958:	add	r3, pc, r3
   2495c:	movw	r2, #1305	; 0x519
   24960:	ldr	r1, [pc, #3308]	; 25654 <test_scan@@Base+0xe8c>
   24964:	add	r1, pc, r1
   24968:	ldr	r0, [pc, #3304]	; 25658 <test_scan@@Base+0xe90>
   2496c:	add	r0, pc, r0
   24970:	bl	129e0 <__assert_fail@plt>
   24974:	ldr	r0, [fp, #-16]
   24978:	bl	177a8 <_start@@Base+0x4db8>
   2497c:	str	r0, [fp, #-24]	; 0xffffffe8
   24980:	ldr	r3, [fp, #-24]	; 0xffffffe8
   24984:	cmp	r3, #0
   24988:	bne	249ac <test_scan@@Base+0x1e4>
   2498c:	ldr	r3, [pc, #3272]	; 2565c <test_scan@@Base+0xe94>
   24990:	add	r3, pc, r3
   24994:	movw	r2, #1307	; 0x51b
   24998:	ldr	r1, [pc, #3264]	; 25660 <test_scan@@Base+0xe98>
   2499c:	add	r1, pc, r1
   249a0:	ldr	r0, [pc, #3260]	; 25664 <test_scan@@Base+0xe9c>
   249a4:	add	r0, pc, r0
   249a8:	bl	129e0 <__assert_fail@plt>
   249ac:	ldr	r0, [fp, #-16]
   249b0:	bl	179c8 <_start@@Base+0x4fd8>
   249b4:	str	r0, [fp, #-28]	; 0xffffffe4
   249b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   249bc:	cmp	r3, #0
   249c0:	bne	249e4 <test_scan@@Base+0x21c>
   249c4:	ldr	r3, [pc, #3228]	; 25668 <test_scan@@Base+0xea0>
   249c8:	add	r3, pc, r3
   249cc:	movw	r2, #1309	; 0x51d
   249d0:	ldr	r1, [pc, #3220]	; 2566c <test_scan@@Base+0xea4>
   249d4:	add	r1, pc, r1
   249d8:	ldr	r0, [pc, #3216]	; 25670 <test_scan@@Base+0xea8>
   249dc:	add	r0, pc, r0
   249e0:	bl	129e0 <__assert_fail@plt>
   249e4:	ldr	r3, [pc, #3208]	; 25674 <test_scan@@Base+0xeac>
   249e8:	add	r3, pc, r3
   249ec:	mov	r1, r3
   249f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   249f4:	bl	17428 <_start@@Base+0x4a38>
   249f8:	mov	r3, r0
   249fc:	cmp	r3, #1
   24a00:	beq	24a18 <test_scan@@Base+0x250>
   24a04:	ldr	r3, [pc, #3180]	; 25678 <test_scan@@Base+0xeb0>
   24a08:	add	r3, pc, r3
   24a0c:	mov	r0, r3
   24a10:	bl	12944 <puts@plt>
   24a14:	b	25614 <test_scan@@Base+0xe4c>
   24a18:	ldr	r3, [pc, #3164]	; 2567c <test_scan@@Base+0xeb4>
   24a1c:	add	r3, pc, r3
   24a20:	mov	r1, r3
   24a24:	ldr	r0, [fp, #-20]	; 0xffffffec
   24a28:	bl	174f4 <_start@@Base+0x4b04>
   24a2c:	mov	r3, r0
   24a30:	cmp	r3, #1
   24a34:	beq	24a4c <test_scan@@Base+0x284>
   24a38:	ldr	r3, [pc, #3136]	; 25680 <test_scan@@Base+0xeb8>
   24a3c:	add	r3, pc, r3
   24a40:	mov	r0, r3
   24a44:	bl	12944 <puts@plt>
   24a48:	b	25614 <test_scan@@Base+0xe4c>
   24a4c:	mov	r2, #5
   24a50:	ldr	r3, [pc, #3116]	; 25684 <test_scan@@Base+0xebc>
   24a54:	add	r3, pc, r3
   24a58:	mov	r1, r3
   24a5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   24a60:	bl	17464 <_start@@Base+0x4a74>
   24a64:	mov	r3, r0
   24a68:	cmp	r3, #1
   24a6c:	beq	24a84 <test_scan@@Base+0x2bc>
   24a70:	ldr	r3, [pc, #3088]	; 25688 <test_scan@@Base+0xec0>
   24a74:	add	r3, pc, r3
   24a78:	mov	r0, r3
   24a7c:	bl	12944 <puts@plt>
   24a80:	b	25614 <test_scan@@Base+0xe4c>
   24a84:	mov	r2, #5
   24a88:	ldr	r3, [pc, #3068]	; 2568c <test_scan@@Base+0xec4>
   24a8c:	add	r3, pc, r3
   24a90:	mov	r1, r3
   24a94:	ldr	r0, [fp, #-20]	; 0xffffffec
   24a98:	bl	17530 <_start@@Base+0x4b40>
   24a9c:	mov	r3, r0
   24aa0:	cmp	r3, #1
   24aa4:	beq	24abc <test_scan@@Base+0x2f4>
   24aa8:	ldr	r3, [pc, #3040]	; 25690 <test_scan@@Base+0xec8>
   24aac:	add	r3, pc, r3
   24ab0:	mov	r0, r3
   24ab4:	bl	12944 <puts@plt>
   24ab8:	b	25614 <test_scan@@Base+0xe4c>
   24abc:	ldr	r3, [pc, #3024]	; 25694 <test_scan@@Base+0xecc>
   24ac0:	add	r3, pc, r3
   24ac4:	ldr	r2, [r3]
   24ac8:	ldr	r3, [pc, #3016]	; 25698 <test_scan@@Base+0xed0>
   24acc:	add	r3, pc, r3
   24ad0:	mov	r1, #2
   24ad4:	ldr	r0, [fp, #-20]	; 0xffffffec
   24ad8:	bl	174a8 <_start@@Base+0x4ab8>
   24adc:	mov	r2, r0
   24ae0:	ldr	r3, [pc, #2996]	; 2569c <test_scan@@Base+0xed4>
   24ae4:	add	r3, pc, r3
   24ae8:	ldr	r3, [r3]
   24aec:	cmp	r2, r3
   24af0:	beq	24b08 <test_scan@@Base+0x340>
   24af4:	ldr	r3, [pc, #2980]	; 256a0 <test_scan@@Base+0xed8>
   24af8:	add	r3, pc, r3
   24afc:	mov	r0, r3
   24b00:	bl	12944 <puts@plt>
   24b04:	b	25614 <test_scan@@Base+0xe4c>
   24b08:	ldr	r3, [pc, #2964]	; 256a4 <test_scan@@Base+0xedc>
   24b0c:	add	r3, pc, r3
   24b10:	mov	r1, r3
   24b14:	ldr	r0, [fp, #-20]	; 0xffffffec
   24b18:	bl	17428 <_start@@Base+0x4a38>
   24b1c:	mov	r2, r0
   24b20:	ldr	r3, [pc, #2944]	; 256a8 <test_scan@@Base+0xee0>
   24b24:	add	r3, pc, r3
   24b28:	ldr	r3, [r3]
   24b2c:	cmp	r2, r3
   24b30:	beq	24b48 <test_scan@@Base+0x380>
   24b34:	ldr	r3, [pc, #2928]	; 256ac <test_scan@@Base+0xee4>
   24b38:	add	r3, pc, r3
   24b3c:	mov	r0, r3
   24b40:	bl	12944 <puts@plt>
   24b44:	b	25614 <test_scan@@Base+0xe4c>
   24b48:	ldr	r3, [pc, #2912]	; 256b0 <test_scan@@Base+0xee8>
   24b4c:	add	r3, pc, r3
   24b50:	mov	r1, r3
   24b54:	ldr	r0, [fp, #-20]	; 0xffffffec
   24b58:	bl	17428 <_start@@Base+0x4a38>
   24b5c:	mov	r3, r0
   24b60:	cmp	r3, #0
   24b64:	beq	24b7c <test_scan@@Base+0x3b4>
   24b68:	ldr	r3, [pc, #2884]	; 256b4 <test_scan@@Base+0xeec>
   24b6c:	add	r3, pc, r3
   24b70:	mov	r0, r3
   24b74:	bl	12944 <puts@plt>
   24b78:	b	25614 <test_scan@@Base+0xe4c>
   24b7c:	ldr	r3, [pc, #2868]	; 256b8 <test_scan@@Base+0xef0>
   24b80:	add	r3, pc, r3
   24b84:	mov	r1, r3
   24b88:	ldr	r0, [fp, #-20]	; 0xffffffec
   24b8c:	bl	167d0 <_start@@Base+0x3de0>
   24b90:	mov	r3, r0
   24b94:	cmp	r3, #2
   24b98:	beq	24bb0 <test_scan@@Base+0x3e8>
   24b9c:	ldr	r3, [pc, #2840]	; 256bc <test_scan@@Base+0xef4>
   24ba0:	add	r3, pc, r3
   24ba4:	mov	r0, r3
   24ba8:	bl	12944 <puts@plt>
   24bac:	b	25614 <test_scan@@Base+0xe4c>
   24bb0:	ldr	r3, [pc, #2824]	; 256c0 <test_scan@@Base+0xef8>
   24bb4:	add	r3, pc, r3
   24bb8:	mov	r1, r3
   24bbc:	ldr	r0, [fp, #-20]	; 0xffffffec
   24bc0:	bl	16adc <_start@@Base+0x40ec>
   24bc4:	mov	r3, r0
   24bc8:	cmp	r3, #4
   24bcc:	beq	24be4 <test_scan@@Base+0x41c>
   24bd0:	ldr	r3, [pc, #2796]	; 256c4 <test_scan@@Base+0xefc>
   24bd4:	add	r3, pc, r3
   24bd8:	mov	r0, r3
   24bdc:	bl	12944 <puts@plt>
   24be0:	b	25614 <test_scan@@Base+0xe4c>
   24be4:	mov	r2, #8
   24be8:	ldr	r3, [pc, #2776]	; 256c8 <test_scan@@Base+0xf00>
   24bec:	add	r3, pc, r3
   24bf0:	mov	r1, r3
   24bf4:	ldr	r0, [fp, #-20]	; 0xffffffec
   24bf8:	bl	16b7c <_start@@Base+0x418c>
   24bfc:	mov	r3, r0
   24c00:	cmp	r3, #4
   24c04:	beq	24c1c <test_scan@@Base+0x454>
   24c08:	ldr	r3, [pc, #2748]	; 256cc <test_scan@@Base+0xf04>
   24c0c:	add	r3, pc, r3
   24c10:	mov	r0, r3
   24c14:	bl	12944 <puts@plt>
   24c18:	b	25614 <test_scan@@Base+0xe4c>
   24c1c:	mov	r3, #8
   24c20:	str	r3, [sp]
   24c24:	ldr	r3, [pc, #2724]	; 256d0 <test_scan@@Base+0xf08>
   24c28:	add	r3, pc, r3
   24c2c:	mov	r2, #3
   24c30:	mov	r1, #1
   24c34:	ldr	r0, [fp, #-20]	; 0xffffffec
   24c38:	bl	16cf4 <_start@@Base+0x4304>
   24c3c:	mov	r3, r0
   24c40:	cmp	r3, #2
   24c44:	beq	24c5c <test_scan@@Base+0x494>
   24c48:	ldr	r3, [pc, #2692]	; 256d4 <test_scan@@Base+0xf0c>
   24c4c:	add	r3, pc, r3
   24c50:	mov	r0, r3
   24c54:	bl	12944 <puts@plt>
   24c58:	b	25614 <test_scan@@Base+0xe4c>
   24c5c:	ldr	r3, [pc, #2676]	; 256d8 <test_scan@@Base+0xf10>
   24c60:	add	r3, pc, r3
   24c64:	ldr	r2, [r3]
   24c68:	ldr	r3, [pc, #2668]	; 256dc <test_scan@@Base+0xf14>
   24c6c:	add	r3, pc, r3
   24c70:	mov	r1, #2
   24c74:	ldr	r0, [fp, #-20]	; 0xffffffec
   24c78:	bl	16930 <_start@@Base+0x3f40>
   24c7c:	mov	r3, r0
   24c80:	cmp	r3, #2
   24c84:	beq	24c9c <test_scan@@Base+0x4d4>
   24c88:	ldr	r3, [pc, #2640]	; 256e0 <test_scan@@Base+0xf18>
   24c8c:	add	r3, pc, r3
   24c90:	mov	r0, r3
   24c94:	bl	12944 <puts@plt>
   24c98:	b	25614 <test_scan@@Base+0xe4c>
   24c9c:	ldr	r3, [pc, #2624]	; 256e4 <test_scan@@Base+0xf1c>
   24ca0:	add	r3, pc, r3
   24ca4:	ldr	r2, [r3]
   24ca8:	mov	r3, #8
   24cac:	str	r3, [sp]
   24cb0:	ldr	r3, [pc, #2608]	; 256e8 <test_scan@@Base+0xf20>
   24cb4:	add	r3, pc, r3
   24cb8:	mov	r1, #2
   24cbc:	ldr	r0, [fp, #-20]	; 0xffffffec
   24cc0:	bl	16a04 <_start@@Base+0x4014>
   24cc4:	mov	r3, r0
   24cc8:	cmp	r3, #2
   24ccc:	beq	24ce4 <test_scan@@Base+0x51c>
   24cd0:	ldr	r3, [pc, #2580]	; 256ec <test_scan@@Base+0xf24>
   24cd4:	add	r3, pc, r3
   24cd8:	mov	r0, r3
   24cdc:	bl	12944 <puts@plt>
   24ce0:	b	25614 <test_scan@@Base+0xe4c>
   24ce4:	ldr	r3, [pc, #2564]	; 256f0 <test_scan@@Base+0xf28>
   24ce8:	add	r3, pc, r3
   24cec:	ldr	r2, [r3]
   24cf0:	ldr	r3, [pc, #2556]	; 256f4 <test_scan@@Base+0xf2c>
   24cf4:	add	r3, pc, r3
   24cf8:	mov	r1, #3
   24cfc:	ldr	r0, [fp, #-20]	; 0xffffffec
   24d00:	bl	16930 <_start@@Base+0x3f40>
   24d04:	mov	r3, r0
   24d08:	cmp	r3, #4
   24d0c:	beq	24d24 <test_scan@@Base+0x55c>
   24d10:	ldr	r3, [pc, #2528]	; 256f8 <test_scan@@Base+0xf30>
   24d14:	add	r3, pc, r3
   24d18:	mov	r0, r3
   24d1c:	bl	12944 <puts@plt>
   24d20:	b	25614 <test_scan@@Base+0xe4c>
   24d24:	ldr	r3, [pc, #2512]	; 256fc <test_scan@@Base+0xf34>
   24d28:	add	r3, pc, r3
   24d2c:	mov	r2, #3
   24d30:	mov	r1, #1
   24d34:	ldr	r0, [fp, #-20]	; 0xffffffec
   24d38:	bl	174a8 <_start@@Base+0x4ab8>
   24d3c:	mov	r2, r0
   24d40:	ldr	r3, [pc, #2488]	; 25700 <test_scan@@Base+0xf38>
   24d44:	add	r3, pc, r3
   24d48:	ldr	r3, [r3]
   24d4c:	cmp	r2, r3
   24d50:	beq	24d68 <test_scan@@Base+0x5a0>
   24d54:	ldr	r3, [pc, #2472]	; 25704 <test_scan@@Base+0xf3c>
   24d58:	add	r3, pc, r3
   24d5c:	mov	r0, r3
   24d60:	bl	12944 <puts@plt>
   24d64:	b	25614 <test_scan@@Base+0xe4c>
   24d68:	ldr	r3, [pc, #2456]	; 25708 <test_scan@@Base+0xf40>
   24d6c:	add	r3, pc, r3
   24d70:	mov	r2, #3
   24d74:	mov	r1, #1
   24d78:	ldr	r0, [fp, #-20]	; 0xffffffec
   24d7c:	bl	174a8 <_start@@Base+0x4ab8>
   24d80:	mov	r2, r0
   24d84:	ldr	r3, [pc, #2432]	; 2570c <test_scan@@Base+0xf44>
   24d88:	add	r3, pc, r3
   24d8c:	ldr	r3, [r3]
   24d90:	cmp	r2, r3
   24d94:	beq	24dac <test_scan@@Base+0x5e4>
   24d98:	ldr	r3, [pc, #2416]	; 25710 <test_scan@@Base+0xf48>
   24d9c:	add	r3, pc, r3
   24da0:	mov	r0, r3
   24da4:	bl	12944 <puts@plt>
   24da8:	b	25614 <test_scan@@Base+0xe4c>
   24dac:	ldr	r3, [pc, #2400]	; 25714 <test_scan@@Base+0xf4c>
   24db0:	add	r3, pc, r3
   24db4:	mov	r2, #3
   24db8:	mov	r1, #1
   24dbc:	ldr	r0, [fp, #-20]	; 0xffffffec
   24dc0:	bl	174a8 <_start@@Base+0x4ab8>
   24dc4:	mov	r3, r0
   24dc8:	cmp	r3, #1
   24dcc:	beq	24de4 <test_scan@@Base+0x61c>
   24dd0:	ldr	r3, [pc, #2368]	; 25718 <test_scan@@Base+0xf50>
   24dd4:	add	r3, pc, r3
   24dd8:	mov	r0, r3
   24ddc:	bl	12944 <puts@plt>
   24de0:	b	25614 <test_scan@@Base+0xe4c>
   24de4:	ldr	r3, [pc, #2352]	; 2571c <test_scan@@Base+0xf54>
   24de8:	add	r3, pc, r3
   24dec:	mov	r2, #3
   24df0:	mov	r1, #1
   24df4:	ldr	r0, [fp, #-20]	; 0xffffffec
   24df8:	bl	16930 <_start@@Base+0x3f40>
   24dfc:	mov	r3, r0
   24e00:	cmp	r3, #2
   24e04:	beq	24e1c <test_scan@@Base+0x654>
   24e08:	ldr	r3, [pc, #2320]	; 25720 <test_scan@@Base+0xf58>
   24e0c:	add	r3, pc, r3
   24e10:	mov	r0, r3
   24e14:	bl	12944 <puts@plt>
   24e18:	b	25614 <test_scan@@Base+0xe4c>
   24e1c:	ldr	r3, [pc, #2304]	; 25724 <test_scan@@Base+0xf5c>
   24e20:	add	r3, pc, r3
   24e24:	mov	r2, #3
   24e28:	mov	r1, #1
   24e2c:	ldr	r0, [fp, #-20]	; 0xffffffec
   24e30:	bl	16930 <_start@@Base+0x3f40>
   24e34:	mov	r2, r0
   24e38:	ldr	r3, [pc, #2280]	; 25728 <test_scan@@Base+0xf60>
   24e3c:	add	r3, pc, r3
   24e40:	ldr	r3, [r3]
   24e44:	cmp	r2, r3
   24e48:	beq	24e60 <test_scan@@Base+0x698>
   24e4c:	ldr	r3, [pc, #2264]	; 2572c <test_scan@@Base+0xf64>
   24e50:	add	r3, pc, r3
   24e54:	mov	r0, r3
   24e58:	bl	12944 <puts@plt>
   24e5c:	b	25614 <test_scan@@Base+0xe4c>
   24e60:	ldr	r3, [pc, #2248]	; 25730 <test_scan@@Base+0xf68>
   24e64:	add	r3, pc, r3
   24e68:	mov	r2, #3
   24e6c:	mov	r1, #1
   24e70:	ldr	r0, [fp, #-20]	; 0xffffffec
   24e74:	bl	17574 <_start@@Base+0x4b84>
   24e78:	mov	r2, r0
   24e7c:	ldr	r3, [pc, #2224]	; 25734 <test_scan@@Base+0xf6c>
   24e80:	add	r3, pc, r3
   24e84:	ldr	r3, [r3]
   24e88:	cmp	r2, r3
   24e8c:	beq	24ea4 <test_scan@@Base+0x6dc>
   24e90:	ldr	r3, [pc, #2208]	; 25738 <test_scan@@Base+0xf70>
   24e94:	add	r3, pc, r3
   24e98:	mov	r0, r3
   24e9c:	bl	12944 <puts@plt>
   24ea0:	b	25614 <test_scan@@Base+0xe4c>
   24ea4:	ldr	r3, [pc, #2192]	; 2573c <test_scan@@Base+0xf74>
   24ea8:	add	r3, pc, r3
   24eac:	mov	r2, #3
   24eb0:	mov	r1, #1
   24eb4:	ldr	r0, [fp, #-20]	; 0xffffffec
   24eb8:	bl	17574 <_start@@Base+0x4b84>
   24ebc:	mov	r2, r0
   24ec0:	ldr	r3, [pc, #2168]	; 25740 <test_scan@@Base+0xf78>
   24ec4:	add	r3, pc, r3
   24ec8:	ldr	r3, [r3]
   24ecc:	cmp	r2, r3
   24ed0:	beq	24ee8 <test_scan@@Base+0x720>
   24ed4:	ldr	r3, [pc, #2152]	; 25744 <test_scan@@Base+0xf7c>
   24ed8:	add	r3, pc, r3
   24edc:	mov	r0, r3
   24ee0:	bl	12944 <puts@plt>
   24ee4:	b	25614 <test_scan@@Base+0xe4c>
   24ee8:	ldr	r3, [pc, #2136]	; 25748 <test_scan@@Base+0xf80>
   24eec:	add	r3, pc, r3
   24ef0:	mov	r2, #3
   24ef4:	mov	r1, #1
   24ef8:	ldr	r0, [fp, #-20]	; 0xffffffec
   24efc:	bl	17574 <_start@@Base+0x4b84>
   24f00:	mov	r3, r0
   24f04:	cmp	r3, #1
   24f08:	beq	24f20 <test_scan@@Base+0x758>
   24f0c:	ldr	r3, [pc, #2104]	; 2574c <test_scan@@Base+0xf84>
   24f10:	add	r3, pc, r3
   24f14:	mov	r0, r3
   24f18:	bl	12944 <puts@plt>
   24f1c:	b	25614 <test_scan@@Base+0xe4c>
   24f20:	ldr	r3, [pc, #2088]	; 25750 <test_scan@@Base+0xf88>
   24f24:	add	r3, pc, r3
   24f28:	mov	r2, #3
   24f2c:	mov	r1, #1
   24f30:	ldr	r0, [fp, #-20]	; 0xffffffec
   24f34:	bl	16c24 <_start@@Base+0x4234>
   24f38:	mov	r3, r0
   24f3c:	cmp	r3, #2
   24f40:	beq	24f58 <test_scan@@Base+0x790>
   24f44:	ldr	r3, [pc, #2056]	; 25754 <test_scan@@Base+0xf8c>
   24f48:	add	r3, pc, r3
   24f4c:	mov	r0, r3
   24f50:	bl	12944 <puts@plt>
   24f54:	b	25614 <test_scan@@Base+0xe4c>
   24f58:	ldr	r3, [pc, #2040]	; 25758 <test_scan@@Base+0xf90>
   24f5c:	add	r3, pc, r3
   24f60:	mov	r2, #3
   24f64:	mov	r1, #1
   24f68:	ldr	r0, [fp, #-20]	; 0xffffffec
   24f6c:	bl	16c24 <_start@@Base+0x4234>
   24f70:	mov	r2, r0
   24f74:	ldr	r3, [pc, #2016]	; 2575c <test_scan@@Base+0xf94>
   24f78:	add	r3, pc, r3
   24f7c:	ldr	r3, [r3]
   24f80:	cmp	r2, r3
   24f84:	beq	24f9c <test_scan@@Base+0x7d4>
   24f88:	ldr	r3, [pc, #2000]	; 25760 <test_scan@@Base+0xf98>
   24f8c:	add	r3, pc, r3
   24f90:	mov	r0, r3
   24f94:	bl	12944 <puts@plt>
   24f98:	b	25614 <test_scan@@Base+0xe4c>
   24f9c:	ldr	r3, [pc, #1984]	; 25764 <test_scan@@Base+0xf9c>
   24fa0:	add	r3, pc, r3
   24fa4:	mov	r2, #0
   24fa8:	mov	r1, #0
   24fac:	ldr	r0, [fp, #-20]	; 0xffffffec
   24fb0:	bl	174a8 <_start@@Base+0x4ab8>
   24fb4:	mov	r2, r0
   24fb8:	ldr	r3, [pc, #1960]	; 25768 <test_scan@@Base+0xfa0>
   24fbc:	add	r3, pc, r3
   24fc0:	ldr	r3, [r3]
   24fc4:	cmp	r2, r3
   24fc8:	beq	24fe0 <test_scan@@Base+0x818>
   24fcc:	ldr	r3, [pc, #1944]	; 2576c <test_scan@@Base+0xfa4>
   24fd0:	add	r3, pc, r3
   24fd4:	mov	r0, r3
   24fd8:	bl	12944 <puts@plt>
   24fdc:	b	25614 <test_scan@@Base+0xe4c>
   24fe0:	ldr	r3, [pc, #1928]	; 25770 <test_scan@@Base+0xfa8>
   24fe4:	add	r3, pc, r3
   24fe8:	mov	r2, #0
   24fec:	mov	r1, #0
   24ff0:	ldr	r0, [fp, #-20]	; 0xffffffec
   24ff4:	bl	174a8 <_start@@Base+0x4ab8>
   24ff8:	mov	r2, r0
   24ffc:	ldr	r3, [pc, #1904]	; 25774 <test_scan@@Base+0xfac>
   25000:	add	r3, pc, r3
   25004:	ldr	r3, [r3]
   25008:	cmp	r2, r3
   2500c:	beq	25024 <test_scan@@Base+0x85c>
   25010:	ldr	r3, [pc, #1888]	; 25778 <test_scan@@Base+0xfb0>
   25014:	add	r3, pc, r3
   25018:	mov	r0, r3
   2501c:	bl	12944 <puts@plt>
   25020:	b	25614 <test_scan@@Base+0xe4c>
   25024:	ldr	r3, [pc, #1872]	; 2577c <test_scan@@Base+0xfb4>
   25028:	add	r3, pc, r3
   2502c:	mov	r2, #1
   25030:	mov	r1, #1
   25034:	ldr	r0, [fp, #-20]	; 0xffffffec
   25038:	bl	174a8 <_start@@Base+0x4ab8>
   2503c:	mov	r2, r0
   25040:	ldr	r3, [pc, #1848]	; 25780 <test_scan@@Base+0xfb8>
   25044:	add	r3, pc, r3
   25048:	ldr	r3, [r3]
   2504c:	cmp	r2, r3
   25050:	beq	25068 <test_scan@@Base+0x8a0>
   25054:	ldr	r3, [pc, #1832]	; 25784 <test_scan@@Base+0xfbc>
   25058:	add	r3, pc, r3
   2505c:	mov	r0, r3
   25060:	bl	12944 <puts@plt>
   25064:	b	25614 <test_scan@@Base+0xe4c>
   25068:	ldr	r0, [fp, #-20]	; 0xffffffec
   2506c:	bl	15c08 <_start@@Base+0x3218>
   25070:	mov	r1, r0
   25074:	ldr	r3, [pc, #1804]	; 25788 <test_scan@@Base+0xfc0>
   25078:	add	r3, pc, r3
   2507c:	ldr	r2, [r3]
   25080:	ldr	r3, [pc, #1796]	; 2578c <test_scan@@Base+0xfc4>
   25084:	add	r3, pc, r3
   25088:	ldr	r0, [fp, #-20]	; 0xffffffec
   2508c:	bl	174a8 <_start@@Base+0x4ab8>
   25090:	mov	r2, r0
   25094:	ldr	r3, [pc, #1780]	; 25790 <test_scan@@Base+0xfc8>
   25098:	add	r3, pc, r3
   2509c:	ldr	r3, [r3]
   250a0:	cmp	r2, r3
   250a4:	beq	250bc <test_scan@@Base+0x8f4>
   250a8:	ldr	r3, [pc, #1764]	; 25794 <test_scan@@Base+0xfcc>
   250ac:	add	r3, pc, r3
   250b0:	mov	r0, r3
   250b4:	bl	12944 <puts@plt>
   250b8:	b	25614 <test_scan@@Base+0xe4c>
   250bc:	ldr	r3, [pc, #1748]	; 25798 <test_scan@@Base+0xfd0>
   250c0:	add	r3, pc, r3
   250c4:	mov	r2, #0
   250c8:	mov	r1, #0
   250cc:	ldr	r0, [fp, #-20]	; 0xffffffec
   250d0:	bl	17574 <_start@@Base+0x4b84>
   250d4:	mov	r2, r0
   250d8:	ldr	r3, [pc, #1724]	; 2579c <test_scan@@Base+0xfd4>
   250dc:	add	r3, pc, r3
   250e0:	ldr	r3, [r3]
   250e4:	cmp	r2, r3
   250e8:	beq	25100 <test_scan@@Base+0x938>
   250ec:	ldr	r3, [pc, #1708]	; 257a0 <test_scan@@Base+0xfd8>
   250f0:	add	r3, pc, r3
   250f4:	mov	r0, r3
   250f8:	bl	12944 <puts@plt>
   250fc:	b	25614 <test_scan@@Base+0xe4c>
   25100:	ldr	r3, [pc, #1692]	; 257a4 <test_scan@@Base+0xfdc>
   25104:	add	r3, pc, r3
   25108:	mov	r2, #0
   2510c:	mov	r1, #0
   25110:	ldr	r0, [fp, #-20]	; 0xffffffec
   25114:	bl	17574 <_start@@Base+0x4b84>
   25118:	mov	r2, r0
   2511c:	ldr	r3, [pc, #1668]	; 257a8 <test_scan@@Base+0xfe0>
   25120:	add	r3, pc, r3
   25124:	ldr	r3, [r3]
   25128:	cmp	r2, r3
   2512c:	beq	25144 <test_scan@@Base+0x97c>
   25130:	ldr	r3, [pc, #1652]	; 257ac <test_scan@@Base+0xfe4>
   25134:	add	r3, pc, r3
   25138:	mov	r0, r3
   2513c:	bl	12944 <puts@plt>
   25140:	b	25614 <test_scan@@Base+0xe4c>
   25144:	ldr	r3, [pc, #1636]	; 257b0 <test_scan@@Base+0xfe8>
   25148:	add	r3, pc, r3
   2514c:	mov	r2, #1
   25150:	mov	r1, #1
   25154:	ldr	r0, [fp, #-20]	; 0xffffffec
   25158:	bl	17574 <_start@@Base+0x4b84>
   2515c:	mov	r2, r0
   25160:	ldr	r3, [pc, #1612]	; 257b4 <test_scan@@Base+0xfec>
   25164:	add	r3, pc, r3
   25168:	ldr	r3, [r3]
   2516c:	cmp	r2, r3
   25170:	beq	25188 <test_scan@@Base+0x9c0>
   25174:	ldr	r3, [pc, #1596]	; 257b8 <test_scan@@Base+0xff0>
   25178:	add	r3, pc, r3
   2517c:	mov	r0, r3
   25180:	bl	12944 <puts@plt>
   25184:	b	25614 <test_scan@@Base+0xe4c>
   25188:	ldr	r0, [fp, #-20]	; 0xffffffec
   2518c:	bl	15c08 <_start@@Base+0x3218>
   25190:	mov	r1, r0
   25194:	ldr	r3, [pc, #1568]	; 257bc <test_scan@@Base+0xff4>
   25198:	add	r3, pc, r3
   2519c:	ldr	r2, [r3]
   251a0:	ldr	r3, [pc, #1560]	; 257c0 <test_scan@@Base+0xff8>
   251a4:	add	r3, pc, r3
   251a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   251ac:	bl	17574 <_start@@Base+0x4b84>
   251b0:	mov	r2, r0
   251b4:	ldr	r3, [pc, #1544]	; 257c4 <test_scan@@Base+0xffc>
   251b8:	add	r3, pc, r3
   251bc:	ldr	r3, [r3]
   251c0:	cmp	r2, r3
   251c4:	beq	251dc <test_scan@@Base+0xa14>
   251c8:	ldr	r3, [pc, #1528]	; 257c8 <test_scan@@Base+0x1000>
   251cc:	add	r3, pc, r3
   251d0:	mov	r0, r3
   251d4:	bl	12944 <puts@plt>
   251d8:	b	25614 <test_scan@@Base+0xe4c>
   251dc:	ldr	r3, [pc, #1512]	; 257cc <test_scan@@Base+0x1004>
   251e0:	add	r3, pc, r3
   251e4:	mov	r1, r3
   251e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   251ec:	bl	2472c <test_sort_find@@Base+0x684>
   251f0:	mov	r3, r0
   251f4:	cmp	r3, #1
   251f8:	beq	25210 <test_scan@@Base+0xa48>
   251fc:	ldr	r3, [pc, #1484]	; 257d0 <test_scan@@Base+0x1008>
   25200:	add	r3, pc, r3
   25204:	mov	r0, r3
   25208:	bl	12944 <puts@plt>
   2520c:	b	25614 <test_scan@@Base+0xe4c>
   25210:	ldr	r3, [pc, #1468]	; 257d4 <test_scan@@Base+0x100c>
   25214:	add	r3, pc, r3
   25218:	mov	r1, r3
   2521c:	ldr	r0, [fp, #-20]	; 0xffffffec
   25220:	bl	2472c <test_sort_find@@Base+0x684>
   25224:	mov	r3, r0
   25228:	cmp	r3, #0
   2522c:	beq	25244 <test_scan@@Base+0xa7c>
   25230:	ldr	r3, [pc, #1440]	; 257d8 <test_scan@@Base+0x1010>
   25234:	add	r3, pc, r3
   25238:	mov	r0, r3
   2523c:	bl	12944 <puts@plt>
   25240:	b	25614 <test_scan@@Base+0xe4c>
   25244:	ldr	r3, [pc, #1424]	; 257dc <test_scan@@Base+0x1014>
   25248:	add	r3, pc, r3
   2524c:	mov	r1, r3
   25250:	ldr	r0, [fp, #-20]	; 0xffffffec
   25254:	bl	2472c <test_sort_find@@Base+0x684>
   25258:	mov	r3, r0
   2525c:	cmp	r3, #1
   25260:	beq	25278 <test_scan@@Base+0xab0>
   25264:	ldr	r3, [pc, #1396]	; 257e0 <test_scan@@Base+0x1018>
   25268:	add	r3, pc, r3
   2526c:	mov	r0, r3
   25270:	bl	12944 <puts@plt>
   25274:	b	25614 <test_scan@@Base+0xe4c>
   25278:	ldr	r3, [pc, #1380]	; 257e4 <test_scan@@Base+0x101c>
   2527c:	add	r3, pc, r3
   25280:	mov	r1, r3
   25284:	ldr	r0, [fp, #-20]	; 0xffffffec
   25288:	bl	2472c <test_sort_find@@Base+0x684>
   2528c:	mov	r3, r0
   25290:	cmp	r3, #2
   25294:	beq	252ac <test_scan@@Base+0xae4>
   25298:	ldr	r3, [pc, #1352]	; 257e8 <test_scan@@Base+0x1020>
   2529c:	add	r3, pc, r3
   252a0:	mov	r0, r3
   252a4:	bl	12944 <puts@plt>
   252a8:	b	25614 <test_scan@@Base+0xe4c>
   252ac:	mov	r1, #6
   252b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   252b4:	bl	13c54 <_start@@Base+0x1264>
   252b8:	str	r0, [fp, #-32]	; 0xffffffe0
   252bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   252c0:	cmp	r3, #0
   252c4:	beq	252dc <test_scan@@Base+0xb14>
   252c8:	ldr	r3, [pc, #1308]	; 257ec <test_scan@@Base+0x1024>
   252cc:	add	r3, pc, r3
   252d0:	mov	r0, r3
   252d4:	bl	12944 <puts@plt>
   252d8:	b	25614 <test_scan@@Base+0xe4c>
   252dc:	mov	r1, #1
   252e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   252e4:	bl	13c54 <_start@@Base+0x1264>
   252e8:	str	r0, [fp, #-32]	; 0xffffffe0
   252ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   252f0:	cmp	r3, #2
   252f4:	beq	2530c <test_scan@@Base+0xb44>
   252f8:	ldr	r3, [pc, #1264]	; 257f0 <test_scan@@Base+0x1028>
   252fc:	add	r3, pc, r3
   25300:	mov	r0, r3
   25304:	bl	12944 <puts@plt>
   25308:	b	25614 <test_scan@@Base+0xe4c>
   2530c:	ldr	r3, [pc, #1248]	; 257f4 <test_scan@@Base+0x102c>
   25310:	add	r3, pc, r3
   25314:	ldr	r2, [r3]
   25318:	mov	r3, #1
   2531c:	mov	r1, #3
   25320:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25324:	bl	13d00 <_start@@Base+0x1310>
   25328:	str	r0, [fp, #-32]	; 0xffffffe0
   2532c:	ldr	r3, [pc, #1220]	; 257f8 <test_scan@@Base+0x1030>
   25330:	add	r3, pc, r3
   25334:	ldr	r3, [r3]
   25338:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2533c:	cmp	r2, r3
   25340:	beq	25358 <test_scan@@Base+0xb90>
   25344:	ldr	r3, [pc, #1200]	; 257fc <test_scan@@Base+0x1034>
   25348:	add	r3, pc, r3
   2534c:	mov	r0, r3
   25350:	bl	12944 <puts@plt>
   25354:	b	25614 <test_scan@@Base+0xe4c>
   25358:	mov	r1, #5
   2535c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25360:	bl	13c54 <_start@@Base+0x1264>
   25364:	str	r0, [fp, #-32]	; 0xffffffe0
   25368:	ldr	r3, [pc, #1168]	; 25800 <test_scan@@Base+0x1038>
   2536c:	add	r3, pc, r3
   25370:	ldr	r3, [r3]
   25374:	ldr	r2, [fp, #-32]	; 0xffffffe0
   25378:	cmp	r2, r3
   2537c:	beq	25394 <test_scan@@Base+0xbcc>
   25380:	ldr	r3, [pc, #1148]	; 25804 <test_scan@@Base+0x103c>
   25384:	add	r3, pc, r3
   25388:	mov	r0, r3
   2538c:	bl	12944 <puts@plt>
   25390:	b	25614 <test_scan@@Base+0xe4c>
   25394:	mov	r1, #2
   25398:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2539c:	bl	13c54 <_start@@Base+0x1264>
   253a0:	str	r0, [fp, #-32]	; 0xffffffe0
   253a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   253a8:	cmp	r3, #6
   253ac:	beq	253c4 <test_scan@@Base+0xbfc>
   253b0:	ldr	r3, [pc, #1104]	; 25808 <test_scan@@Base+0x1040>
   253b4:	add	r3, pc, r3
   253b8:	mov	r0, r3
   253bc:	bl	12944 <puts@plt>
   253c0:	b	25614 <test_scan@@Base+0xe4c>
   253c4:	mov	r1, #3
   253c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   253cc:	bl	13c54 <_start@@Base+0x1264>
   253d0:	str	r0, [fp, #-32]	; 0xffffffe0
   253d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   253d8:	cmp	r3, #3
   253dc:	beq	253f4 <test_scan@@Base+0xc2c>
   253e0:	ldr	r3, [pc, #1060]	; 2580c <test_scan@@Base+0x1044>
   253e4:	add	r3, pc, r3
   253e8:	mov	r0, r3
   253ec:	bl	12944 <puts@plt>
   253f0:	b	25614 <test_scan@@Base+0xe4c>
   253f4:	ldr	r3, [pc, #1044]	; 25810 <test_scan@@Base+0x1048>
   253f8:	add	r3, pc, r3
   253fc:	ldr	r2, [r3]
   25400:	mov	r3, #3
   25404:	mov	r1, #3
   25408:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2540c:	bl	13d00 <_start@@Base+0x1310>
   25410:	str	r0, [fp, #-32]	; 0xffffffe0
   25414:	ldr	r3, [fp, #-32]	; 0xffffffe0
   25418:	cmp	r3, #3
   2541c:	beq	25434 <test_scan@@Base+0xc6c>
   25420:	ldr	r3, [pc, #1004]	; 25814 <test_scan@@Base+0x104c>
   25424:	add	r3, pc, r3
   25428:	mov	r0, r3
   2542c:	bl	12944 <puts@plt>
   25430:	b	25614 <test_scan@@Base+0xe4c>
   25434:	ldr	r3, [pc, #988]	; 25818 <test_scan@@Base+0x1050>
   25438:	add	r3, pc, r3
   2543c:	ldr	r2, [r3]
   25440:	mov	r3, #3
   25444:	mov	r1, #4
   25448:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2544c:	bl	13d00 <_start@@Base+0x1310>
   25450:	str	r0, [fp, #-32]	; 0xffffffe0
   25454:	ldr	r3, [fp, #-32]	; 0xffffffe0
   25458:	cmp	r3, #5
   2545c:	beq	25474 <test_scan@@Base+0xcac>
   25460:	ldr	r3, [pc, #948]	; 2581c <test_scan@@Base+0x1054>
   25464:	add	r3, pc, r3
   25468:	mov	r0, r3
   2546c:	bl	12944 <puts@plt>
   25470:	b	25614 <test_scan@@Base+0xe4c>
   25474:	mov	r1, #3
   25478:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2547c:	bl	13dd0 <_start@@Base+0x13e0>
   25480:	str	r0, [fp, #-32]	; 0xffffffe0
   25484:	ldr	r3, [fp, #-32]	; 0xffffffe0
   25488:	cmp	r3, #5
   2548c:	beq	254a4 <test_scan@@Base+0xcdc>
   25490:	ldr	r3, [pc, #904]	; 25820 <test_scan@@Base+0x1058>
   25494:	add	r3, pc, r3
   25498:	mov	r0, r3
   2549c:	bl	12944 <puts@plt>
   254a0:	b	25614 <test_scan@@Base+0xe4c>
   254a4:	mov	r3, #3
   254a8:	mov	r2, #4
   254ac:	mov	r1, #1
   254b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   254b4:	bl	13e70 <_start@@Base+0x1480>
   254b8:	str	r0, [fp, #-32]	; 0xffffffe0
   254bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   254c0:	cmp	r3, #3
   254c4:	beq	254dc <test_scan@@Base+0xd14>
   254c8:	ldr	r3, [pc, #852]	; 25824 <test_scan@@Base+0x105c>
   254cc:	add	r3, pc, r3
   254d0:	mov	r0, r3
   254d4:	bl	12944 <puts@plt>
   254d8:	b	25614 <test_scan@@Base+0xe4c>
   254dc:	ldr	r3, [pc, #836]	; 25828 <test_scan@@Base+0x1060>
   254e0:	add	r3, pc, r3
   254e4:	mov	r1, r3
   254e8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   254ec:	bl	1421c <_start@@Base+0x182c>
   254f0:	ldr	r3, [pc, #820]	; 2582c <test_scan@@Base+0x1064>
   254f4:	add	r3, pc, r3
   254f8:	ldr	r2, [r3]
   254fc:	ldr	r3, [pc, #812]	; 25830 <test_scan@@Base+0x1068>
   25500:	add	r3, pc, r3
   25504:	mov	r1, #0
   25508:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2550c:	bl	14360 <_start@@Base+0x1970>
   25510:	mov	r2, #4
   25514:	ldr	r3, [pc, #792]	; 25834 <test_scan@@Base+0x106c>
   25518:	add	r3, pc, r3
   2551c:	mov	r1, r3
   25520:	ldr	r0, [fp, #-28]	; 0xffffffe4
   25524:	bl	142bc <_start@@Base+0x18cc>
   25528:	ldr	r3, [pc, #776]	; 25838 <test_scan@@Base+0x1070>
   2552c:	add	r3, pc, r3
   25530:	ldr	r2, [r3]
   25534:	mov	r3, #4
   25538:	str	r3, [sp]
   2553c:	ldr	r3, [pc, #760]	; 2583c <test_scan@@Base+0x1074>
   25540:	add	r3, pc, r3
   25544:	mov	r1, #0
   25548:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2554c:	bl	14428 <_start@@Base+0x1a38>
   25550:	ldr	r3, [pc, #744]	; 25840 <test_scan@@Base+0x1078>
   25554:	add	r3, pc, r3
   25558:	mov	r1, r3
   2555c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   25560:	bl	144f0 <_start@@Base+0x1b00>
   25564:	ldr	r3, [pc, #728]	; 25844 <test_scan@@Base+0x107c>
   25568:	add	r3, pc, r3
   2556c:	ldr	r2, [r3]
   25570:	ldr	r3, [pc, #720]	; 25848 <test_scan@@Base+0x1080>
   25574:	add	r3, pc, r3
   25578:	mov	r1, #0
   2557c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   25580:	bl	1461c <_start@@Base+0x1c2c>
   25584:	mov	r2, #4
   25588:	ldr	r3, [pc, #700]	; 2584c <test_scan@@Base+0x1084>
   2558c:	add	r3, pc, r3
   25590:	mov	r1, r3
   25594:	ldr	r0, [fp, #-28]	; 0xffffffe4
   25598:	bl	14584 <_start@@Base+0x1b94>
   2559c:	ldr	r3, [pc, #684]	; 25850 <test_scan@@Base+0x1088>
   255a0:	add	r3, pc, r3
   255a4:	ldr	r2, [r3]
   255a8:	mov	r3, #4
   255ac:	str	r3, [sp]
   255b0:	ldr	r3, [pc, #668]	; 25854 <test_scan@@Base+0x108c>
   255b4:	add	r3, pc, r3
   255b8:	mov	r1, #0
   255bc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   255c0:	bl	146e0 <_start@@Base+0x1cf0>
   255c4:	mov	r1, #13
   255c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   255cc:	bl	16198 <_start@@Base+0x37a8>
   255d0:	ldr	r3, [pc, #640]	; 25858 <test_scan@@Base+0x1090>
   255d4:	add	r3, pc, r3
   255d8:	ldr	r2, [r3]
   255dc:	mov	r3, #42	; 0x2a
   255e0:	mov	r1, #1
   255e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   255e8:	bl	16250 <_start@@Base+0x3860>
   255ec:	mov	r1, #1
   255f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   255f4:	bl	1632c <_start@@Base+0x393c>
   255f8:	mov	r3, #42	; 0x2a
   255fc:	mov	r2, #2
   25600:	mov	r1, #0
   25604:	ldr	r0, [fp, #-20]	; 0xffffffec
   25608:	bl	163d8 <_start@@Base+0x39e8>
   2560c:	mov	r3, #0
   25610:	str	r3, [fp, #-8]
   25614:	ldr	r0, [fp, #-12]
   25618:	bl	2f124 <flatcc_builder_aligned_free@@Base>
   2561c:	ldr	r3, [fp, #-8]
   25620:	mov	r0, r3
   25624:	sub	sp, fp, #4
   25628:	ldr	fp, [sp]
   2562c:	add	sp, sp, #4
   25630:	pop	{pc}		; (ldr pc, [sp], #4)
   25634:	muleq	r1, r0, r1
   25638:			; <UNDEFINED> instruction: 0x0000e8b4
   2563c:	ldrdeq	pc, [r0], -r4
   25640:	andeq	pc, r0, ip, lsr #4
   25644:	andeq	pc, r0, r4, lsr r2	; <UNPREDICTABLE>
   25648:			; <UNDEFINED> instruction: 0x0000f8b4
   2564c:	andeq	pc, r0, ip, ror #3
   25650:	andeq	r1, r1, ip, asr r5
   25654:	andeq	pc, r0, r8, rrx
   25658:	andeq	pc, r0, r8, lsr r8	; <UNPREDICTABLE>
   2565c:	andeq	r1, r1, r4, lsr #10
   25660:	andeq	pc, r0, r0, lsr r0	; <UNPREDICTABLE>
   25664:	andeq	pc, r0, r4, asr #20
   25668:	andeq	r1, r1, ip, ror #9
   2566c:	strdeq	lr, [r0], -r8
   25670:	andeq	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
   25674:	andeq	pc, r0, ip, asr #1
   25678:	andeq	pc, r0, ip, ror #19
   2567c:	muleq	r0, r8, r0
   25680:	ldrdeq	pc, [r0], -r8
   25684:	andeq	pc, r0, r8, lsl #18
   25688:	andeq	pc, r0, r0, asr #19
   2568c:	ldrdeq	pc, [r0], -r0
   25690:	andeq	pc, r0, r8, lsl #19
   25694:			; <UNDEFINED> instruction: 0x000235bc
   25698:	andeq	lr, r0, r8, ror #31
   2569c:	muleq	r2, r4, r5
   256a0:	andeq	pc, r0, r4, ror #18
   256a4:	andeq	pc, r0, ip, ror r8	; <UNPREDICTABLE>
   256a8:	andeq	r3, r2, r4, asr r5
   256ac:	andeq	pc, r0, r8, asr r8	; <UNPREDICTABLE>
   256b0:	andeq	lr, r0, ip, ror #29
   256b4:	andeq	pc, r0, r8, ror #16
   256b8:	andeq	lr, r0, r0, ror #30
   256bc:	andeq	pc, r0, r8, lsl r8	; <UNPREDICTABLE>
   256c0:	andeq	lr, r0, ip, lsr #30
   256c4:	andeq	pc, r0, r4, ror #15
   256c8:	muleq	r0, ip, r8
   256cc:	andeq	pc, r0, r8, lsl #17
   256d0:	andeq	pc, r0, r0, ror #16
   256d4:	andeq	pc, r0, r8, asr #16
   256d8:	andeq	r3, r2, ip, lsl r4
   256dc:	andeq	lr, r0, r4, ror lr
   256e0:	andeq	pc, r0, r4, lsr #16
   256e4:	ldrdeq	r3, [r2], -ip
   256e8:	ldrdeq	pc, [r0], -r4
   256ec:	ldrdeq	pc, [r0], -ip
   256f0:	muleq	r2, r4, r3
   256f4:	andeq	lr, r0, ip, ror #27
   256f8:	andeq	pc, r0, r8, asr #15
   256fc:	andeq	pc, r0, r0, ror #12
   25700:	andeq	r3, r2, r4, lsr r3
   25704:	andeq	pc, r0, r0, lsr #15
   25708:	andeq	lr, r0, ip, asr #25
   2570c:	strdeq	r3, [r2], -r0
   25710:	andeq	pc, r0, r0, lsl #15
   25714:	andeq	lr, r0, r4, lsl #26
   25718:	andeq	pc, r0, ip, ror #14
   2571c:	strdeq	lr, [r0], -r8
   25720:	andeq	pc, r0, r8, asr r7	; <UNPREDICTABLE>
   25724:	andeq	pc, r0, r4, ror #6
   25728:	andeq	r3, r2, ip, lsr r2
   2572c:	andeq	pc, r0, ip, lsr r7	; <UNPREDICTABLE>
   25730:	andeq	pc, r0, r4, lsr #10
   25734:	strdeq	r3, [r2], -r8
   25738:	andeq	pc, r0, r4, lsr #14
   2573c:	muleq	r0, r0, fp
   25740:			; <UNDEFINED> instruction: 0x000231b4
   25744:	andeq	pc, r0, r0, lsl r7	; <UNPREDICTABLE>
   25748:	andeq	lr, r0, r8, asr #23
   2574c:	andeq	pc, r0, r4, lsl #14
   25750:			; <UNDEFINED> instruction: 0x0000ebbc
   25754:	strdeq	pc, [r0], -r4
   25758:	andeq	pc, r0, r8, lsr #4
   2575c:	andeq	r3, r2, r0, lsl #2
   25760:	ldrdeq	pc, [r0], -r8
   25764:	muleq	r0, r8, sl
   25768:	strheq	r3, [r2], -ip
   2576c:	andeq	pc, r0, r0, asr #13
   25770:	ldrdeq	lr, [r0], -r0
   25774:	andeq	r3, r2, r8, ror r0
   25778:	muleq	r0, ip, r6
   2577c:	andeq	lr, r0, ip, lsl #21
   25780:	andeq	r3, r2, r4, lsr r0
   25784:	andeq	pc, r0, r8, ror r6	; <UNPREDICTABLE>
   25788:	andeq	r3, r2, r4
   2578c:			; <UNDEFINED> instruction: 0x0000e9b4
   25790:	andeq	r2, r2, r0, ror #31
   25794:	andeq	pc, r0, ip, asr #12
   25798:	andeq	lr, r0, r8, ror r9
   2579c:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   257a0:	andeq	pc, r0, r0, lsr #11
   257a4:			; <UNDEFINED> instruction: 0x0000e9b0
   257a8:	andeq	r2, r2, r8, asr pc
   257ac:	andeq	pc, r0, ip, ror r5	; <UNPREDICTABLE>
   257b0:	andeq	lr, r0, ip, ror #18
   257b4:	andeq	r2, r2, r4, lsl pc
   257b8:	andeq	pc, r0, r8, asr r5	; <UNPREDICTABLE>
   257bc:	andeq	r2, r2, r4, ror #29
   257c0:	muleq	r0, r4, r8
   257c4:	andeq	r2, r2, r0, asr #29
   257c8:	andeq	pc, r0, ip, lsr #10
   257cc:	ldrdeq	lr, [r0], -r4
   257d0:	andeq	pc, r0, r4, lsr #10
   257d4:	andeq	pc, r0, r4, ror r1	; <UNPREDICTABLE>
   257d8:	andeq	pc, r0, ip, lsl #10
   257dc:	strdeq	lr, [r0], -r0
   257e0:	strdeq	pc, [r0], -r4
   257e4:	andeq	lr, r0, r4, ror #16
   257e8:	ldrdeq	pc, [r0], -ip
   257ec:	andeq	pc, r0, ip, asr #9
   257f0:	andeq	pc, r0, r8, asr #9
   257f4:	andeq	r2, r2, ip, ror #26
   257f8:	andeq	r2, r2, r8, asr #26
   257fc:	andeq	pc, r0, ip, lsr #9
   25800:	andeq	r2, r2, ip, lsl #26
   25804:	andeq	pc, r0, r8, lsr #9
   25808:	andeq	pc, r0, ip, lsr #9
   2580c:	andeq	pc, r0, r8, asr #8
   25810:	andeq	r2, r2, r4, lsl #25
   25814:	andeq	pc, r0, r8, ror #8
   25818:	andeq	r2, r2, r4, asr #24
   2581c:	andeq	pc, r0, r4, ror #8
   25820:	andeq	pc, r0, r0, ror r4	; <UNPREDICTABLE>
   25824:	andeq	pc, r0, ip, ror #8
   25828:	strdeq	lr, [r0], -r8
   2582c:	andeq	r2, r2, r8, lsl #23
   25830:	ldrdeq	lr, [r0], -r8
   25834:	andeq	lr, r0, r0, asr #13
   25838:	andeq	r2, r2, r0, asr fp
   2583c:	muleq	r0, r8, r6
   25840:	andeq	lr, r0, r4, lsl #13
   25844:	andeq	r2, r2, r4, lsl fp
   25848:	andeq	lr, r0, r4, ror #12
   2584c:	andeq	lr, r0, ip, asr #12
   25850:	ldrdeq	r2, [r2], -ip
   25854:	andeq	lr, r0, r4, lsr #12
   25858:	andeq	r2, r2, r8, lsr #21

0002585c <test_basic_sort@@Base>:
   2585c:	str	r4, [sp, #-12]!
   25860:	str	fp, [sp, #4]
   25864:	str	lr, [sp, #8]
   25868:	add	fp, sp, #8
   2586c:	sub	sp, sp, #60	; 0x3c
   25870:	str	r0, [fp, #-64]	; 0xffffffc0
   25874:	ldr	r2, [pc, #468]	; 25a50 <test_basic_sort@@Base+0x1f4>
   25878:	add	r2, pc, r2
   2587c:	sub	r3, fp, #48	; 0x30
   25880:	ldr	r1, [r2]
   25884:	str	r1, [r3]
   25888:	ldrh	r1, [r2, #4]
   2588c:	strh	r1, [r3, #4]
   25890:	ldrb	r2, [r2, #6]
   25894:	strb	r2, [r3, #6]
   25898:	ldr	r2, [pc, #436]	; 25a54 <test_basic_sort@@Base+0x1f8>
   2589c:	add	r2, pc, r2
   258a0:	sub	r3, fp, #56	; 0x38
   258a4:	ldr	r1, [r2]
   258a8:	str	r1, [r3]
   258ac:	ldrh	r1, [r2, #4]
   258b0:	strh	r1, [r3, #4]
   258b4:	ldrb	r2, [r2, #6]
   258b8:	strb	r2, [r3, #6]
   258bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   258c0:	bl	29bf4 <flatcc_builder_reset@@Base>
   258c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   258c8:	bl	1e160 <_start@@Base+0xb770>
   258cc:	ldr	r3, [pc, #388]	; 25a58 <test_basic_sort@@Base+0x1fc>
   258d0:	add	r3, pc, r3
   258d4:	mov	r1, r3
   258d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   258dc:	bl	1cb00 <_start@@Base+0xa110>
   258e0:	sub	r3, fp, #48	; 0x30
   258e4:	mov	r2, #7
   258e8:	mov	r1, r3
   258ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   258f0:	bl	1cf4c <_start@@Base+0xa55c>
   258f4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   258f8:	bl	1e220 <_start@@Base+0xb830>
   258fc:	sub	r3, fp, #40	; 0x28
   25900:	mov	r1, r3
   25904:	ldr	r0, [fp, #-64]	; 0xffffffc0
   25908:	bl	2edc8 <flatcc_builder_get_direct_buffer@@Base>
   2590c:	str	r0, [fp, #-20]	; 0xffffffec
   25910:	ldr	r0, [fp, #-20]	; 0xffffffec
   25914:	bl	15d5c <_start@@Base+0x336c>
   25918:	str	r0, [fp, #-24]	; 0xffffffe8
   2591c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25920:	bl	177a8 <_start@@Base+0x4db8>
   25924:	str	r0, [fp, #-28]	; 0xffffffe4
   25928:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2592c:	str	r3, [fp, #-32]	; 0xffffffe0
   25930:	ldr	r0, [fp, #-32]	; 0xffffffe0
   25934:	bl	14164 <_start@@Base+0x1774>
   25938:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2593c:	bl	13a60 <_start@@Base+0x1070>
   25940:	mov	r3, r0
   25944:	cmp	r3, #7
   25948:	beq	2596c <test_basic_sort@@Base+0x110>
   2594c:	ldr	r3, [pc, #264]	; 25a5c <test_basic_sort@@Base+0x200>
   25950:	add	r3, pc, r3
   25954:	mov	r2, #1552	; 0x610
   25958:	ldr	r1, [pc, #256]	; 25a60 <test_basic_sort@@Base+0x204>
   2595c:	add	r1, pc, r1
   25960:	ldr	r0, [pc, #252]	; 25a64 <test_basic_sort@@Base+0x208>
   25964:	add	r0, pc, r0
   25968:	bl	129e0 <__assert_fail@plt>
   2596c:	mov	r3, #0
   25970:	strb	r3, [fp, #-13]
   25974:	b	25a1c <test_basic_sort@@Base+0x1c0>
   25978:	ldrb	r3, [fp, #-13]
   2597c:	mov	r1, r3
   25980:	ldr	r0, [fp, #-28]	; 0xffffffe4
   25984:	bl	13a94 <_start@@Base+0x10a4>
   25988:	mov	r3, r0
   2598c:	strb	r3, [fp, #-33]	; 0xffffffdf
   25990:	ldrb	r3, [fp, #-13]
   25994:	sub	r2, fp, #12
   25998:	add	r3, r2, r3
   2599c:	ldrb	r3, [r3, #-44]	; 0xffffffd4
   259a0:	ldrb	r2, [fp, #-33]	; 0xffffffdf
   259a4:	cmp	r2, r3
   259a8:	beq	259c4 <test_basic_sort@@Base+0x168>
   259ac:	ldr	r3, [pc, #180]	; 25a68 <test_basic_sort@@Base+0x20c>
   259b0:	add	r3, pc, r3
   259b4:	mov	r0, r3
   259b8:	bl	12944 <puts@plt>
   259bc:	mvn	r3, #0
   259c0:	b	25a38 <test_basic_sort@@Base+0x1dc>
   259c4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   259c8:	mov	r1, r3
   259cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   259d0:	bl	13b1c <_start@@Base+0x112c>
   259d4:	mov	r2, r0
   259d8:	ldrb	r3, [fp, #-13]
   259dc:	cmp	r3, #3
   259e0:	beq	259ec <test_basic_sort@@Base+0x190>
   259e4:	ldrb	r3, [fp, #-13]
   259e8:	b	259f0 <test_basic_sort@@Base+0x194>
   259ec:	mov	r3, #2
   259f0:	cmp	r3, r2
   259f4:	beq	25a10 <test_basic_sort@@Base+0x1b4>
   259f8:	ldr	r3, [pc, #108]	; 25a6c <test_basic_sort@@Base+0x210>
   259fc:	add	r3, pc, r3
   25a00:	mov	r0, r3
   25a04:	bl	12944 <puts@plt>
   25a08:	mvn	r3, #0
   25a0c:	b	25a38 <test_basic_sort@@Base+0x1dc>
   25a10:	ldrb	r3, [fp, #-13]
   25a14:	add	r3, r3, #1
   25a18:	strb	r3, [fp, #-13]
   25a1c:	ldrb	r4, [fp, #-13]
   25a20:	ldr	r0, [fp, #-28]	; 0xffffffe4
   25a24:	bl	13a60 <_start@@Base+0x1070>
   25a28:	mov	r3, r0
   25a2c:	cmp	r4, r3
   25a30:	bcc	25978 <test_basic_sort@@Base+0x11c>
   25a34:	mov	r3, #0
   25a38:	mov	r0, r3
   25a3c:	sub	sp, fp, #8
   25a40:	ldr	r4, [sp]
   25a44:	ldr	fp, [sp, #4]
   25a48:	add	sp, sp, #8
   25a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   25a50:	strdeq	pc, [r0], -r8
   25a54:	andeq	pc, r0, r4, asr #2
   25a58:	andeq	sp, r0, r0, lsl #16
   25a5c:	andeq	r0, r1, r0, ror r5
   25a60:	andeq	lr, r0, r0, ror r0
   25a64:	andeq	pc, r0, r4, lsl r0	; <UNPREDICTABLE>
   25a68:	strdeq	lr, [r0], -r8
   25a6c:	andeq	lr, r0, r4, asr #31

00025a70 <test_clone_slice@@Base>:
   25a70:	str	r4, [sp, #-12]!
   25a74:	str	fp, [sp, #4]
   25a78:	str	lr, [sp, #8]
   25a7c:	add	fp, sp, #8
   25a80:	sub	sp, sp, #84	; 0x54
   25a84:	str	r0, [fp, #-88]	; 0xffffffa8
   25a88:	ldr	r4, [pc, #1896]	; 261f8 <test_clone_slice@@Base+0x788>
   25a8c:	add	r4, pc, r4
   25a90:	mvn	r3, #0
   25a94:	str	r3, [fp, #-16]
   25a98:	ldr	r2, [pc, #1884]	; 261fc <test_clone_slice@@Base+0x78c>
   25a9c:	add	r2, pc, r2
   25aa0:	sub	r3, fp, #80	; 0x50
   25aa4:	ldr	r1, [r2]
   25aa8:	str	r1, [r3]
   25aac:	ldrh	r1, [r2, #4]
   25ab0:	strh	r1, [r3, #4]
   25ab4:	ldrb	r2, [r2, #6]
   25ab8:	strb	r2, [r3, #6]
   25abc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25ac0:	bl	29bf4 <flatcc_builder_reset@@Base>
   25ac4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25ac8:	bl	1e160 <_start@@Base+0xb770>
   25acc:	ldr	r3, [pc, #1836]	; 26200 <test_clone_slice@@Base+0x790>
   25ad0:	add	r3, pc, r3
   25ad4:	mov	r1, r3
   25ad8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25adc:	bl	1cb00 <_start@@Base+0xa110>
   25ae0:	sub	r3, fp, #80	; 0x50
   25ae4:	mov	r2, #7
   25ae8:	mov	r1, r3
   25aec:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25af0:	bl	1d534 <_start@@Base+0xab44>
   25af4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25af8:	bl	1daa4 <_start@@Base+0xb0b4>
   25afc:	mov	r1, #2
   25b00:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25b04:	bl	1dbc4 <_start@@Base+0xb1d4>
   25b08:	str	r0, [fp, #-20]	; 0xffffffec
   25b0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   25b10:	mov	r2, #22
   25b14:	strh	r2, [r3]
   25b18:	ldr	r3, [fp, #-20]	; 0xffffffec
   25b1c:	add	r3, r3, #4
   25b20:	mov	r2, #44	; 0x2c
   25b24:	strh	r2, [r3]
   25b28:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25b2c:	bl	1dad8 <_start@@Base+0xb0e8>
   25b30:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25b34:	bl	1c770 <_start@@Base+0x9d80>
   25b38:	mov	r2, r0
   25b3c:	movw	r3, #13107	; 0x3333
   25b40:	movt	r3, #49705	; 0xc229
   25b44:	str	r3, [r2]
   25b48:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25b4c:	bl	1e220 <_start@@Base+0xb830>
   25b50:	sub	r3, fp, #72	; 0x48
   25b54:	mov	r1, r3
   25b58:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25b5c:	bl	2efe8 <flatcc_builder_finalize_aligned_buffer@@Base>
   25b60:	str	r0, [fp, #-24]	; 0xffffffe8
   25b64:	ldr	r2, [fp, #-72]	; 0xffffffb8
   25b68:	ldr	r3, [pc, #1684]	; 26204 <test_clone_slice@@Base+0x794>
   25b6c:	ldr	r3, [r4, r3]
   25b70:	ldr	r3, [r3]
   25b74:	ldr	r1, [fp, #-24]	; 0xffffffe8
   25b78:	ldr	r0, [pc, #1672]	; 26208 <test_clone_slice@@Base+0x798>
   25b7c:	add	r0, pc, r0
   25b80:	bl	20e38 <_start@@Base+0xe448>
   25b84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25b88:	bl	15d5c <_start@@Base+0x336c>
   25b8c:	str	r0, [fp, #-28]	; 0xffffffe4
   25b90:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25b94:	bl	29bf4 <flatcc_builder_reset@@Base>
   25b98:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25b9c:	bl	1e160 <_start@@Base+0xb770>
   25ba0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   25ba4:	bl	16698 <_start@@Base+0x3ca8>
   25ba8:	str	r0, [fp, #-32]	; 0xffffffe0
   25bac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   25bb0:	cmp	r3, #0
   25bb4:	bne	25bd8 <test_clone_slice@@Base+0x168>
   25bb8:	ldr	r3, [pc, #1612]	; 2620c <test_clone_slice@@Base+0x79c>
   25bbc:	add	r3, pc, r3
   25bc0:	movw	r2, #1604	; 0x644
   25bc4:	ldr	r1, [pc, #1604]	; 26210 <test_clone_slice@@Base+0x7a0>
   25bc8:	add	r1, pc, r1
   25bcc:	ldr	r0, [pc, #1600]	; 26214 <test_clone_slice@@Base+0x7a4>
   25bd0:	add	r0, pc, r0
   25bd4:	bl	129e0 <__assert_fail@plt>
   25bd8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   25bdc:	bl	17ad8 <_start@@Base+0x50e8>
   25be0:	str	r0, [fp, #-36]	; 0xffffffdc
   25be4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   25be8:	cmp	r3, #0
   25bec:	bne	25c10 <test_clone_slice@@Base+0x1a0>
   25bf0:	ldr	r3, [pc, #1568]	; 26218 <test_clone_slice@@Base+0x7a8>
   25bf4:	add	r3, pc, r3
   25bf8:	movw	r2, #1606	; 0x646
   25bfc:	ldr	r1, [pc, #1560]	; 2621c <test_clone_slice@@Base+0x7ac>
   25c00:	add	r1, pc, r1
   25c04:	ldr	r0, [pc, #1556]	; 26220 <test_clone_slice@@Base+0x7b0>
   25c08:	add	r0, pc, r0
   25c0c:	bl	129e0 <__assert_fail@plt>
   25c10:	ldr	r0, [fp, #-28]	; 0xffffffe4
   25c14:	bl	18164 <_start@@Base+0x5774>
   25c18:	str	r0, [fp, #-40]	; 0xffffffd8
   25c1c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   25c20:	cmp	r3, #0
   25c24:	bne	25c48 <test_clone_slice@@Base+0x1d8>
   25c28:	ldr	r3, [pc, #1524]	; 26224 <test_clone_slice@@Base+0x7b4>
   25c2c:	add	r3, pc, r3
   25c30:	movw	r2, #1608	; 0x648
   25c34:	ldr	r1, [pc, #1516]	; 26228 <test_clone_slice@@Base+0x7b8>
   25c38:	add	r1, pc, r1
   25c3c:	ldr	r0, [pc, #1512]	; 2622c <test_clone_slice@@Base+0x7bc>
   25c40:	add	r0, pc, r0
   25c44:	bl	129e0 <__assert_fail@plt>
   25c48:	ldr	r1, [fp, #-32]	; 0xffffffe0
   25c4c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25c50:	bl	1cba0 <_start@@Base+0xa1b0>
   25c54:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25c58:	bl	1d2dc <_start@@Base+0xa8ec>
   25c5c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   25c60:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25c64:	bl	1d3a8 <_start@@Base+0xa9b8>
   25c68:	mov	r3, #20
   25c6c:	mov	r2, #4
   25c70:	ldr	r1, [fp, #-32]	; 0xffffffe0
   25c74:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25c78:	bl	1d3f4 <_start@@Base+0xaa04>
   25c7c:	mov	r3, #3
   25c80:	mov	r2, #0
   25c84:	ldr	r1, [fp, #-32]	; 0xffffffe0
   25c88:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25c8c:	bl	1d3f4 <_start@@Base+0xaa04>
   25c90:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25c94:	bl	1d310 <_start@@Base+0xa920>
   25c98:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25c9c:	bl	1b968 <_start@@Base+0x8f78>
   25ca0:	mov	r3, #20
   25ca4:	mov	r2, #2
   25ca8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   25cac:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25cb0:	bl	1cbec <_start@@Base+0xa1fc>
   25cb4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   25cb8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25cbc:	bl	1d588 <_start@@Base+0xab98>
   25cc0:	mov	r3, #2
   25cc4:	mov	r2, #1
   25cc8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   25ccc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25cd0:	bl	1db68 <_start@@Base+0xb178>
   25cd4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25cd8:	bl	1b9a0 <_start@@Base+0x8fb0>
   25cdc:	str	r0, [fp, #-44]	; 0xffffffd4
   25ce0:	sub	r3, fp, #68	; 0x44
   25ce4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   25ce8:	mov	r0, r3
   25cec:	bl	1bcb8 <_start@@Base+0x92c8>
   25cf0:	sub	r3, fp, #68	; 0x44
   25cf4:	ldm	r3, {r1, r2}
   25cf8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25cfc:	bl	1d758 <_start@@Base+0xad68>
   25d00:	mvn	r3, #0
   25d04:	mov	r2, #3
   25d08:	ldr	r1, [fp, #-36]	; 0xffffffdc
   25d0c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25d10:	bl	1d5d4 <_start@@Base+0xabe4>
   25d14:	ldr	r0, [fp, #-28]	; 0xffffffe4
   25d18:	bl	15dd4 <_start@@Base+0x33e4>
   25d1c:	mov	r3, r0
   25d20:	mov	r1, r3
   25d24:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25d28:	bl	1c7d4 <_start@@Base+0x9de4>
   25d2c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   25d30:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25d34:	bl	1db1c <_start@@Base+0xb12c>
   25d38:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25d3c:	bl	1e220 <_start@@Base+0xb830>
   25d40:	sub	r3, fp, #72	; 0x48
   25d44:	mov	r1, r3
   25d48:	ldr	r0, [fp, #-88]	; 0xffffffa8
   25d4c:	bl	2edc8 <flatcc_builder_get_direct_buffer@@Base>
   25d50:	str	r0, [fp, #-48]	; 0xffffffd0
   25d54:	ldr	r2, [fp, #-72]	; 0xffffffb8
   25d58:	ldr	r3, [pc, #1188]	; 26204 <test_clone_slice@@Base+0x794>
   25d5c:	ldr	r3, [r4, r3]
   25d60:	ldr	r3, [r3]
   25d64:	ldr	r1, [fp, #-48]	; 0xffffffd0
   25d68:	ldr	r0, [pc, #1216]	; 26230 <test_clone_slice@@Base+0x7c0>
   25d6c:	add	r0, pc, r0
   25d70:	bl	20e38 <_start@@Base+0xe448>
   25d74:	ldr	r0, [fp, #-48]	; 0xffffffd0
   25d78:	bl	15d5c <_start@@Base+0x336c>
   25d7c:	str	r0, [fp, #-52]	; 0xffffffcc
   25d80:	ldr	r0, [fp, #-52]	; 0xffffffcc
   25d84:	bl	16698 <_start@@Base+0x3ca8>
   25d88:	mov	r2, r0
   25d8c:	ldr	r3, [pc, #1184]	; 26234 <test_clone_slice@@Base+0x7c4>
   25d90:	add	r3, pc, r3
   25d94:	mov	r1, r3
   25d98:	mov	r0, r2
   25d9c:	bl	128e4 <strcmp@plt>
   25da0:	mov	r3, r0
   25da4:	cmp	r3, #0
   25da8:	beq	25dc0 <test_clone_slice@@Base+0x350>
   25dac:	ldr	r3, [pc, #1156]	; 26238 <test_clone_slice@@Base+0x7c8>
   25db0:	add	r3, pc, r3
   25db4:	mov	r0, r3
   25db8:	bl	12944 <puts@plt>
   25dbc:	b	261d0 <test_clone_slice@@Base+0x760>
   25dc0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   25dc4:	bl	179c8 <_start@@Base+0x4fd8>
   25dc8:	str	r0, [fp, #-56]	; 0xffffffc8
   25dcc:	mov	r1, #0
   25dd0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   25dd4:	bl	13664 <_start@@Base+0xc74>
   25dd8:	mov	r2, r0
   25ddc:	ldr	r3, [pc, #1112]	; 2623c <test_clone_slice@@Base+0x7cc>
   25de0:	add	r3, pc, r3
   25de4:	mov	r1, r3
   25de8:	mov	r0, r2
   25dec:	bl	128e4 <strcmp@plt>
   25df0:	mov	r3, r0
   25df4:	cmp	r3, #0
   25df8:	beq	25e10 <test_clone_slice@@Base+0x3a0>
   25dfc:	ldr	r3, [pc, #1084]	; 26240 <test_clone_slice@@Base+0x7d0>
   25e00:	add	r3, pc, r3
   25e04:	mov	r0, r3
   25e08:	bl	12944 <puts@plt>
   25e0c:	b	261d0 <test_clone_slice@@Base+0x760>
   25e10:	mov	r1, #1
   25e14:	ldr	r0, [fp, #-56]	; 0xffffffc8
   25e18:	bl	13664 <_start@@Base+0xc74>
   25e1c:	mov	r3, r0
   25e20:	mov	r0, r3
   25e24:	bl	135c4 <_start@@Base+0xbd4>
   25e28:	mov	r3, r0
   25e2c:	cmp	r3, #6
   25e30:	beq	25e48 <test_clone_slice@@Base+0x3d8>
   25e34:	ldr	r3, [pc, #1032]	; 26244 <test_clone_slice@@Base+0x7d4>
   25e38:	add	r3, pc, r3
   25e3c:	mov	r0, r3
   25e40:	bl	12944 <puts@plt>
   25e44:	b	261d0 <test_clone_slice@@Base+0x760>
   25e48:	mov	r1, #1
   25e4c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   25e50:	bl	13664 <_start@@Base+0xc74>
   25e54:	mov	r2, r0
   25e58:	ldr	r3, [pc, #1000]	; 26248 <test_clone_slice@@Base+0x7d8>
   25e5c:	add	r3, pc, r3
   25e60:	mov	r1, r3
   25e64:	mov	r0, r2
   25e68:	bl	128e4 <strcmp@plt>
   25e6c:	mov	r3, r0
   25e70:	cmp	r3, #0
   25e74:	beq	25e8c <test_clone_slice@@Base+0x41c>
   25e78:	ldr	r3, [pc, #972]	; 2624c <test_clone_slice@@Base+0x7dc>
   25e7c:	add	r3, pc, r3
   25e80:	mov	r0, r3
   25e84:	bl	12944 <puts@plt>
   25e88:	b	261d0 <test_clone_slice@@Base+0x760>
   25e8c:	mov	r1, #2
   25e90:	ldr	r0, [fp, #-56]	; 0xffffffc8
   25e94:	bl	13664 <_start@@Base+0xc74>
   25e98:	mov	r3, r0
   25e9c:	mov	r0, r3
   25ea0:	bl	135c4 <_start@@Base+0xbd4>
   25ea4:	mov	r3, r0
   25ea8:	cmp	r3, #3
   25eac:	beq	25ec4 <test_clone_slice@@Base+0x454>
   25eb0:	ldr	r3, [pc, #920]	; 26250 <test_clone_slice@@Base+0x7e0>
   25eb4:	add	r3, pc, r3
   25eb8:	mov	r0, r3
   25ebc:	bl	12944 <puts@plt>
   25ec0:	b	261d0 <test_clone_slice@@Base+0x760>
   25ec4:	mov	r1, #2
   25ec8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   25ecc:	bl	13664 <_start@@Base+0xc74>
   25ed0:	mov	r2, r0
   25ed4:	ldr	r3, [pc, #888]	; 26254 <test_clone_slice@@Base+0x7e4>
   25ed8:	add	r3, pc, r3
   25edc:	mov	r1, r3
   25ee0:	mov	r0, r2
   25ee4:	bl	128e4 <strcmp@plt>
   25ee8:	mov	r3, r0
   25eec:	cmp	r3, #0
   25ef0:	beq	25f08 <test_clone_slice@@Base+0x498>
   25ef4:	ldr	r3, [pc, #860]	; 26258 <test_clone_slice@@Base+0x7e8>
   25ef8:	add	r3, pc, r3
   25efc:	mov	r0, r3
   25f00:	bl	12944 <puts@plt>
   25f04:	b	261d0 <test_clone_slice@@Base+0x760>
   25f08:	ldr	r0, [fp, #-52]	; 0xffffffcc
   25f0c:	bl	17fc4 <_start@@Base+0x55d4>
   25f10:	str	r0, [fp, #-28]	; 0xffffffe4
   25f14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   25f18:	cmp	r3, #0
   25f1c:	bne	25f40 <test_clone_slice@@Base+0x4d0>
   25f20:	ldr	r3, [pc, #820]	; 2625c <test_clone_slice@@Base+0x7ec>
   25f24:	add	r3, pc, r3
   25f28:	mov	r2, #1664	; 0x680
   25f2c:	ldr	r1, [pc, #812]	; 26260 <test_clone_slice@@Base+0x7f0>
   25f30:	add	r1, pc, r1
   25f34:	ldr	r0, [pc, #808]	; 26264 <test_clone_slice@@Base+0x7f4>
   25f38:	add	r0, pc, r0
   25f3c:	bl	129e0 <__assert_fail@plt>
   25f40:	ldr	r0, [fp, #-28]	; 0xffffffe4
   25f44:	bl	16698 <_start@@Base+0x3ca8>
   25f48:	mov	r2, r0
   25f4c:	ldr	r3, [pc, #788]	; 26268 <test_clone_slice@@Base+0x7f8>
   25f50:	add	r3, pc, r3
   25f54:	mov	r1, r3
   25f58:	mov	r0, r2
   25f5c:	bl	128e4 <strcmp@plt>
   25f60:	mov	r3, r0
   25f64:	cmp	r3, #0
   25f68:	beq	25f80 <test_clone_slice@@Base+0x510>
   25f6c:	ldr	r3, [pc, #760]	; 2626c <test_clone_slice@@Base+0x7fc>
   25f70:	add	r3, pc, r3
   25f74:	mov	r0, r3
   25f78:	bl	128f0 <printf@plt>
   25f7c:	b	261d0 <test_clone_slice@@Base+0x760>
   25f80:	ldr	r0, [fp, #-28]	; 0xffffffe4
   25f84:	bl	17ad8 <_start@@Base+0x50e8>
   25f88:	str	r0, [fp, #-36]	; 0xffffffdc
   25f8c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   25f90:	bl	139a4 <_start@@Base+0xfb4>
   25f94:	mov	r3, r0
   25f98:	cmp	r3, #7
   25f9c:	beq	25fb4 <test_clone_slice@@Base+0x544>
   25fa0:	ldr	r3, [pc, #712]	; 26270 <test_clone_slice@@Base+0x800>
   25fa4:	add	r3, pc, r3
   25fa8:	mov	r0, r3
   25fac:	bl	12944 <puts@plt>
   25fb0:	b	261d0 <test_clone_slice@@Base+0x760>
   25fb4:	sub	r3, fp, #80	; 0x50
   25fb8:	mov	r2, #7
   25fbc:	mov	r1, r3
   25fc0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   25fc4:	bl	12914 <memcmp@plt>
   25fc8:	mov	r3, r0
   25fcc:	cmp	r3, #0
   25fd0:	beq	25fe8 <test_clone_slice@@Base+0x578>
   25fd4:	ldr	r3, [pc, #664]	; 26274 <test_clone_slice@@Base+0x804>
   25fd8:	add	r3, pc, r3
   25fdc:	mov	r0, r3
   25fe0:	bl	12944 <puts@plt>
   25fe4:	b	261d0 <test_clone_slice@@Base+0x760>
   25fe8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   25fec:	bl	17ad8 <_start@@Base+0x50e8>
   25ff0:	str	r0, [fp, #-36]	; 0xffffffdc
   25ff4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   25ff8:	bl	139a4 <_start@@Base+0xfb4>
   25ffc:	mov	r3, r0
   26000:	cmp	r3, #4
   26004:	beq	2601c <test_clone_slice@@Base+0x5ac>
   26008:	ldr	r3, [pc, #616]	; 26278 <test_clone_slice@@Base+0x808>
   2600c:	add	r3, pc, r3
   26010:	mov	r0, r3
   26014:	bl	12944 <puts@plt>
   26018:	b	261d0 <test_clone_slice@@Base+0x760>
   2601c:	sub	r3, fp, #80	; 0x50
   26020:	add	r3, r3, #3
   26024:	mov	r2, #4
   26028:	mov	r1, r3
   2602c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   26030:	bl	12914 <memcmp@plt>
   26034:	mov	r3, r0
   26038:	cmp	r3, #0
   2603c:	beq	26054 <test_clone_slice@@Base+0x5e4>
   26040:	ldr	r3, [pc, #564]	; 2627c <test_clone_slice@@Base+0x80c>
   26044:	add	r3, pc, r3
   26048:	mov	r0, r3
   2604c:	bl	12944 <puts@plt>
   26050:	b	261d0 <test_clone_slice@@Base+0x760>
   26054:	ldr	r0, [fp, #-52]	; 0xffffffcc
   26058:	bl	15dd4 <_start@@Base+0x33e4>
   2605c:	mov	r3, r0
   26060:	vldr	s15, [r3]
   26064:	vldr	s14, [pc, #392]	; 261f4 <test_clone_slice@@Base+0x784>
   26068:	vcmp.f32	s15, s14
   2606c:	vmrs	APSR_nzcv, fpscr
   26070:	beq	26088 <test_clone_slice@@Base+0x618>
   26074:	ldr	r3, [pc, #516]	; 26280 <test_clone_slice@@Base+0x810>
   26078:	add	r3, pc, r3
   2607c:	mov	r0, r3
   26080:	bl	12944 <puts@plt>
   26084:	b	261d0 <test_clone_slice@@Base+0x760>
   26088:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2608c:	bl	18164 <_start@@Base+0x5774>
   26090:	str	r0, [fp, #-40]	; 0xffffffd8
   26094:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26098:	bl	14b78 <_start@@Base+0x2188>
   2609c:	mov	r3, r0
   260a0:	cmp	r3, #2
   260a4:	beq	260bc <test_clone_slice@@Base+0x64c>
   260a8:	ldr	r3, [pc, #468]	; 26284 <test_clone_slice@@Base+0x814>
   260ac:	add	r3, pc, r3
   260b0:	mov	r0, r3
   260b4:	bl	12944 <puts@plt>
   260b8:	b	261d0 <test_clone_slice@@Base+0x760>
   260bc:	mov	r1, #0
   260c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   260c4:	bl	14adc <_start@@Base+0x20ec>
   260c8:	str	r0, [fp, #-60]	; 0xffffffc4
   260cc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   260d0:	bl	14bc8 <_start@@Base+0x21d8>
   260d4:	mov	r3, r0
   260d8:	cmp	r3, #22
   260dc:	beq	260f4 <test_clone_slice@@Base+0x684>
   260e0:	ldr	r3, [pc, #416]	; 26288 <test_clone_slice@@Base+0x818>
   260e4:	add	r3, pc, r3
   260e8:	mov	r0, r3
   260ec:	bl	12944 <puts@plt>
   260f0:	b	261d0 <test_clone_slice@@Base+0x760>
   260f4:	mov	r1, #0
   260f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   260fc:	bl	14adc <_start@@Base+0x20ec>
   26100:	mov	r3, r0
   26104:	ldrsh	r3, [r3]
   26108:	cmp	r3, #22
   2610c:	beq	26124 <test_clone_slice@@Base+0x6b4>
   26110:	ldr	r3, [pc, #372]	; 2628c <test_clone_slice@@Base+0x81c>
   26114:	add	r3, pc, r3
   26118:	mov	r0, r3
   2611c:	bl	12944 <puts@plt>
   26120:	b	261d0 <test_clone_slice@@Base+0x760>
   26124:	mov	r1, #1
   26128:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2612c:	bl	14adc <_start@@Base+0x20ec>
   26130:	str	r0, [fp, #-60]	; 0xffffffc4
   26134:	ldr	r0, [fp, #-60]	; 0xffffffc4
   26138:	bl	14bc8 <_start@@Base+0x21d8>
   2613c:	mov	r3, r0
   26140:	cmp	r3, #44	; 0x2c
   26144:	beq	2615c <test_clone_slice@@Base+0x6ec>
   26148:	ldr	r3, [pc, #320]	; 26290 <test_clone_slice@@Base+0x820>
   2614c:	add	r3, pc, r3
   26150:	mov	r0, r3
   26154:	bl	12944 <puts@plt>
   26158:	b	261d0 <test_clone_slice@@Base+0x760>
   2615c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   26160:	bl	18164 <_start@@Base+0x5774>
   26164:	str	r0, [fp, #-40]	; 0xffffffd8
   26168:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2616c:	bl	14b78 <_start@@Base+0x2188>
   26170:	mov	r3, r0
   26174:	cmp	r3, #1
   26178:	beq	26190 <test_clone_slice@@Base+0x720>
   2617c:	ldr	r3, [pc, #272]	; 26294 <test_clone_slice@@Base+0x824>
   26180:	add	r3, pc, r3
   26184:	mov	r0, r3
   26188:	bl	12944 <puts@plt>
   2618c:	b	261d0 <test_clone_slice@@Base+0x760>
   26190:	mov	r1, #0
   26194:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26198:	bl	14adc <_start@@Base+0x20ec>
   2619c:	str	r0, [fp, #-60]	; 0xffffffc4
   261a0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   261a4:	bl	14bc8 <_start@@Base+0x21d8>
   261a8:	mov	r3, r0
   261ac:	cmp	r3, #44	; 0x2c
   261b0:	beq	261c8 <test_clone_slice@@Base+0x758>
   261b4:	ldr	r3, [pc, #220]	; 26298 <test_clone_slice@@Base+0x828>
   261b8:	add	r3, pc, r3
   261bc:	mov	r0, r3
   261c0:	bl	12944 <puts@plt>
   261c4:	b	261d0 <test_clone_slice@@Base+0x760>
   261c8:	mov	r3, #0
   261cc:	str	r3, [fp, #-16]
   261d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   261d4:	bl	2f124 <flatcc_builder_aligned_free@@Base>
   261d8:	ldr	r3, [fp, #-16]
   261dc:	mov	r0, r3
   261e0:	sub	sp, fp, #8
   261e4:	ldr	r4, [sp]
   261e8:	ldr	fp, [sp, #4]
   261ec:	add	sp, sp, #8
   261f0:	pop	{pc}		; (ldr pc, [sp], #4)
   261f4:	eorgt	r3, r9, #-872415232	; 0xcc000000
   261f8:	andeq	r2, r2, ip, ror #10
   261fc:	andeq	pc, r0, r0, lsl r2	; <UNPREDICTABLE>
   26200:	andeq	lr, r0, r8, lsl pc
   26204:	andeq	r0, r0, r8, rrx
   26208:	andeq	lr, r0, r8, ror lr
   2620c:	andeq	r0, r1, r4, lsl r3
   26210:	andeq	sp, r0, r4, lsl #28
   26214:	andeq	lr, r0, r0, asr #28
   26218:	ldrdeq	r0, [r1], -ip
   2621c:	andeq	sp, r0, ip, asr #27
   26220:	andeq	lr, r0, r0, lsl lr
   26224:	andeq	r0, r1, r4, lsr #5
   26228:	muleq	r0, r4, sp
   2622c:	andeq	lr, r0, r0, ror #27
   26230:			; <UNDEFINED> instruction: 0x0000ecbc
   26234:	andeq	lr, r0, r8, asr ip
   26238:	muleq	r0, r0, ip
   2623c:	andeq	lr, r0, r8, lsl #24
   26240:	andeq	lr, r0, ip, asr ip
   26244:	andeq	lr, r0, r4, asr #24
   26248:	andeq	lr, r0, r4, asr #24
   2624c:	andeq	lr, r0, ip, lsr #24
   26250:	andeq	lr, r0, r0, lsl ip
   26254:	andeq	lr, r0, ip, lsl #24
   26258:	strdeq	lr, [r0], -r0
   2625c:	andeq	pc, r0, ip, lsr #31
   26260:	muleq	r0, ip, sl
   26264:	strdeq	sp, [r0], -ip
   26268:			; <UNDEFINED> instruction: 0x0000ebb0
   2626c:	muleq	r0, ip, fp
   26270:	muleq	r0, r8, fp
   26274:	andeq	lr, r0, r0, lsl #23
   26278:	andeq	lr, r0, ip, ror #22
   2627c:	andeq	lr, r0, r0, asr fp
   26280:	andeq	lr, r0, ip, lsr fp
   26284:	andeq	lr, r0, r4, lsr #22
   26288:	andeq	lr, r0, r0, lsr #22
   2628c:	andeq	lr, r0, ip, lsl #22
   26290:	andeq	lr, r0, r0, lsl #22
   26294:	andeq	lr, r0, r8, ror #21
   26298:	ldrdeq	lr, [r0], -r0

0002629c <test_create_add_field@@Base>:
   2629c:	str	fp, [sp, #-8]!
   262a0:	str	lr, [sp, #4]
   262a4:	add	fp, sp, #4
   262a8:	sub	sp, sp, #40	; 0x28
   262ac:	str	r0, [fp, #-32]	; 0xffffffe0
   262b0:	mvn	r3, #0
   262b4:	str	r3, [fp, #-8]
   262b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   262bc:	bl	29bf4 <flatcc_builder_reset@@Base>
   262c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   262c4:	bl	1e160 <_start@@Base+0xb770>
   262c8:	ldr	r3, [pc, #252]	; 263cc <test_create_add_field@@Base+0x130>
   262cc:	add	r3, pc, r3
   262d0:	mov	r1, r3
   262d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   262d8:	bl	1cb00 <_start@@Base+0xa110>
   262dc:	ldr	r3, [pc, #236]	; 263d0 <test_create_add_field@@Base+0x134>
   262e0:	add	r3, pc, r3
   262e4:	mov	r1, r3
   262e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   262ec:	bl	1a9dc <_start@@Base+0x7fec>
   262f0:	mov	r1, r0
   262f4:	mov	r3, #2
   262f8:	str	r3, [sp]
   262fc:	mvn	r2, #99	; 0x63
   26300:	mvn	r3, #0
   26304:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26308:	bl	1e008 <_start@@Base+0xb618>
   2630c:	mov	r1, #0
   26310:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26314:	bl	1d674 <_start@@Base+0xac84>
   26318:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2631c:	bl	1e220 <_start@@Base+0xb830>
   26320:	sub	r3, fp, #24
   26324:	mov	r1, r3
   26328:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2632c:	bl	2efe8 <flatcc_builder_finalize_aligned_buffer@@Base>
   26330:	str	r0, [fp, #-12]
   26334:	ldr	r0, [fp, #-12]
   26338:	bl	15d5c <_start@@Base+0x336c>
   2633c:	str	r0, [fp, #-16]
   26340:	ldr	r0, [fp, #-16]
   26344:	bl	17ddc <_start@@Base+0x53ec>
   26348:	mov	r3, r0
   2634c:	cmp	r3, #0
   26350:	beq	26368 <test_create_add_field@@Base+0xcc>
   26354:	ldr	r3, [pc, #120]	; 263d4 <test_create_add_field@@Base+0x138>
   26358:	add	r3, pc, r3
   2635c:	mov	r0, r3
   26360:	bl	12944 <puts@plt>
   26364:	b	263ac <test_create_add_field@@Base+0x110>
   26368:	ldr	r0, [fp, #-16]
   2636c:	bl	18408 <_start@@Base+0x5a18>
   26370:	str	r0, [fp, #-20]	; 0xffffffec
   26374:	ldr	r0, [fp, #-20]	; 0xffffffec
   26378:	bl	15568 <_start@@Base+0x2b78>
   2637c:	mvn	r2, #99	; 0x63
   26380:	mvn	r3, #0
   26384:	cmp	r1, r3
   26388:	cmpeq	r0, r2
   2638c:	beq	263a4 <test_create_add_field@@Base+0x108>
   26390:	ldr	r3, [pc, #64]	; 263d8 <test_create_add_field@@Base+0x13c>
   26394:	add	r3, pc, r3
   26398:	mov	r0, r3
   2639c:	bl	12944 <puts@plt>
   263a0:	b	263ac <test_create_add_field@@Base+0x110>
   263a4:	mov	r3, #0
   263a8:	str	r3, [fp, #-8]
   263ac:	ldr	r0, [fp, #-12]
   263b0:	bl	2f124 <flatcc_builder_aligned_free@@Base>
   263b4:	ldr	r3, [fp, #-8]
   263b8:	mov	r0, r3
   263bc:	sub	sp, fp, #4
   263c0:	ldr	fp, [sp]
   263c4:	add	sp, sp, #4
   263c8:	pop	{pc}		; (ldr pc, [sp], #4)
   263cc:	andeq	ip, r0, r4, lsl #28
   263d0:	ldrdeq	lr, [r0], -r4
   263d4:	andeq	lr, r0, r4, ror #18
   263d8:	andeq	lr, r0, r8, asr r9

000263dc <test_union_vector@@Base>:
   263dc:	str	r4, [sp, #-12]!
   263e0:	str	fp, [sp, #4]
   263e4:	str	lr, [sp, #8]
   263e8:	add	fp, sp, #8
   263ec:	sub	sp, sp, #100	; 0x64
   263f0:	str	r0, [fp, #-96]	; 0xffffffa0
   263f4:	mvn	r3, #0
   263f8:	str	r3, [fp, #-16]
   263fc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26400:	bl	29bf4 <flatcc_builder_reset@@Base>
   26404:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26408:	bl	1e160 <_start@@Base+0xb770>
   2640c:	ldr	r3, [pc, #768]	; 26714 <test_union_vector@@Base+0x338>
   26410:	add	r3, pc, r3
   26414:	mov	r1, r3
   26418:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2641c:	bl	1cb00 <_start@@Base+0xa110>
   26420:	mov	r3, #2
   26424:	str	r3, [sp]
   26428:	mov	r3, #2
   2642c:	mov	r2, #2
   26430:	mov	r1, #2
   26434:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26438:	bl	1c3b0 <_start@@Base+0x99c0>
   2643c:	str	r0, [fp, #-20]	; 0xffffffec
   26440:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26444:	bl	1bd90 <_start@@Base+0x93a0>
   26448:	sub	r3, fp, #60	; 0x3c
   2644c:	ldr	r1, [fp, #-20]	; 0xffffffec
   26450:	mov	r0, r3
   26454:	bl	1bd00 <_start@@Base+0x9310>
   26458:	sub	r3, fp, #60	; 0x3c
   2645c:	ldm	r3, {r1, r2}
   26460:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26464:	bl	1be00 <_start@@Base+0x9410>
   26468:	sub	r3, fp, #72	; 0x48
   2646c:	ldr	r1, [fp, #-96]	; 0xffffffa0
   26470:	mov	r0, r3
   26474:	bl	1bdc4 <_start@@Base+0x93d4>
   26478:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2647c:	bl	1d9ac <_start@@Base+0xafbc>
   26480:	sub	r3, fp, #72	; 0x48
   26484:	ldm	r3, {r1, r2}
   26488:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2648c:	bl	1c6a4 <_start@@Base+0x9cb4>
   26490:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26494:	bl	1d9e0 <_start@@Base+0xaff0>
   26498:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2649c:	bl	1e220 <_start@@Base+0xb830>
   264a0:	sub	r3, fp, #64	; 0x40
   264a4:	mov	r1, r3
   264a8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   264ac:	bl	2efe8 <flatcc_builder_finalize_aligned_buffer@@Base>
   264b0:	str	r0, [fp, #-24]	; 0xffffffe8
   264b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   264b8:	mov	r1, r3
   264bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   264c0:	bl	20864 <_start@@Base+0xde74>
   264c4:	str	r0, [fp, #-16]
   264c8:	ldr	r3, [fp, #-16]
   264cc:	cmp	r3, #0
   264d0:	beq	264fc <test_union_vector@@Base+0x120>
   264d4:	ldr	r0, [fp, #-16]
   264d8:	bl	2ff24 <flatcc_verify_error_string@@Base>
   264dc:	mov	r3, r0
   264e0:	mov	r1, r3
   264e4:	ldr	r3, [pc, #556]	; 26718 <test_union_vector@@Base+0x33c>
   264e8:	add	r3, pc, r3
   264ec:	mov	r0, r3
   264f0:	bl	128f0 <printf@plt>
   264f4:	mvn	r3, #0
   264f8:	b	266fc <test_union_vector@@Base+0x320>
   264fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   26500:	bl	15d5c <_start@@Base+0x336c>
   26504:	str	r0, [fp, #-28]	; 0xffffffe4
   26508:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2650c:	bl	17ec4 <_start@@Base+0x54d4>
   26510:	mov	r3, r0
   26514:	cmp	r3, #4
   26518:	beq	26530 <test_union_vector@@Base+0x154>
   2651c:	ldr	r3, [pc, #504]	; 2671c <test_union_vector@@Base+0x340>
   26520:	add	r3, pc, r3
   26524:	mov	r0, r3
   26528:	bl	128f0 <printf@plt>
   2652c:	b	266f0 <test_union_vector@@Base+0x314>
   26530:	ldr	r0, [fp, #-28]	; 0xffffffe4
   26534:	bl	17fc4 <_start@@Base+0x55d4>
   26538:	str	r0, [fp, #-32]	; 0xffffffe0
   2653c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   26540:	cmp	r3, #0
   26544:	beq	2655c <test_union_vector@@Base+0x180>
   26548:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2654c:	bl	15a64 <_start@@Base+0x3074>
   26550:	mov	r3, r0
   26554:	cmp	r3, #0
   26558:	beq	26570 <test_union_vector@@Base+0x194>
   2655c:	ldr	r3, [pc, #444]	; 26720 <test_union_vector@@Base+0x344>
   26560:	add	r3, pc, r3
   26564:	mov	r0, r3
   26568:	bl	12944 <puts@plt>
   2656c:	b	266f0 <test_union_vector@@Base+0x314>
   26570:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26574:	bl	15844 <_start@@Base+0x2e54>
   26578:	str	r0, [fp, #-36]	; 0xffffffdc
   2657c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26580:	bl	15954 <_start@@Base+0x2f64>
   26584:	str	r0, [fp, #-40]	; 0xffffffd8
   26588:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2658c:	bl	14ef8 <_start@@Base+0x2508>
   26590:	str	r0, [fp, #-44]	; 0xffffffd4
   26594:	ldr	r3, [fp, #-44]	; 0xffffffd4
   26598:	cmp	r3, #1
   2659c:	beq	265b4 <test_union_vector@@Base+0x1d8>
   265a0:	ldr	r3, [pc, #380]	; 26724 <test_union_vector@@Base+0x348>
   265a4:	add	r3, pc, r3
   265a8:	mov	r0, r3
   265ac:	bl	12944 <puts@plt>
   265b0:	b	266f0 <test_union_vector@@Base+0x314>
   265b4:	mov	r1, #0
   265b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   265bc:	bl	14194 <_start@@Base+0x17a4>
   265c0:	mov	r3, r0
   265c4:	cmp	r3, #2
   265c8:	beq	265e0 <test_union_vector@@Base+0x204>
   265cc:	ldr	r3, [pc, #340]	; 26728 <test_union_vector@@Base+0x34c>
   265d0:	add	r3, pc, r3
   265d4:	mov	r0, r3
   265d8:	bl	12944 <puts@plt>
   265dc:	b	266f0 <test_union_vector@@Base+0x314>
   265e0:	mov	r1, #0
   265e4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   265e8:	bl	1374c <_start@@Base+0xd5c>
   265ec:	str	r0, [fp, #-48]	; 0xffffffd0
   265f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   265f4:	cmp	r3, #0
   265f8:	bne	26610 <test_union_vector@@Base+0x234>
   265fc:	ldr	r3, [pc, #296]	; 2672c <test_union_vector@@Base+0x350>
   26600:	add	r3, pc, r3
   26604:	mov	r0, r3
   26608:	bl	12944 <puts@plt>
   2660c:	b	266f0 <test_union_vector@@Base+0x314>
   26610:	ldr	r0, [fp, #-48]	; 0xffffffd0
   26614:	bl	15380 <_start@@Base+0x2990>
   26618:	mov	r3, r0
   2661c:	str	r3, [fp, #-52]	; 0xffffffcc
   26620:	ldr	r3, [fp, #-52]	; 0xffffffcc
   26624:	cmp	r3, #2
   26628:	beq	26644 <test_union_vector@@Base+0x268>
   2662c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   26630:	ldr	r3, [pc, #248]	; 26730 <test_union_vector@@Base+0x354>
   26634:	add	r3, pc, r3
   26638:	mov	r0, r3
   2663c:	bl	128f0 <printf@plt>
   26640:	b	266f0 <test_union_vector@@Base+0x314>
   26644:	sub	r3, fp, #80	; 0x50
   26648:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2664c:	mov	r0, r3
   26650:	bl	15b4c <_start@@Base+0x315c>
   26654:	sub	r3, fp, #80	; 0x50
   26658:	ldm	r3, {r0, r1}
   2665c:	bl	14f2c <_start@@Base+0x253c>
   26660:	mov	r3, r0
   26664:	cmp	r3, #1
   26668:	beq	26680 <test_union_vector@@Base+0x2a4>
   2666c:	ldr	r3, [pc, #192]	; 26734 <test_union_vector@@Base+0x358>
   26670:	add	r3, pc, r3
   26674:	mov	r0, r3
   26678:	bl	12944 <puts@plt>
   2667c:	b	266f0 <test_union_vector@@Base+0x314>
   26680:	sub	r0, fp, #88	; 0x58
   26684:	mov	r3, #0
   26688:	sub	r2, fp, #80	; 0x50
   2668c:	ldm	r2, {r1, r2}
   26690:	bl	14f68 <_start@@Base+0x2578>
   26694:	ldrb	r4, [fp, #-88]	; 0xffffffa8
   26698:	mov	r1, #0
   2669c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   266a0:	bl	14194 <_start@@Base+0x17a4>
   266a4:	mov	r3, r0
   266a8:	cmp	r4, r3
   266ac:	beq	266c4 <test_union_vector@@Base+0x2e8>
   266b0:	ldr	r3, [pc, #128]	; 26738 <test_union_vector@@Base+0x35c>
   266b4:	add	r3, pc, r3
   266b8:	mov	r0, r3
   266bc:	bl	12944 <puts@plt>
   266c0:	b	266f0 <test_union_vector@@Base+0x314>
   266c4:	ldr	r3, [fp, #-84]	; 0xffffffac
   266c8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   266cc:	cmp	r2, r3
   266d0:	beq	266e8 <test_union_vector@@Base+0x30c>
   266d4:	ldr	r3, [pc, #96]	; 2673c <test_union_vector@@Base+0x360>
   266d8:	add	r3, pc, r3
   266dc:	mov	r0, r3
   266e0:	bl	12944 <puts@plt>
   266e4:	b	266f0 <test_union_vector@@Base+0x314>
   266e8:	mov	r3, #0
   266ec:	str	r3, [fp, #-16]
   266f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   266f4:	bl	2f124 <flatcc_builder_aligned_free@@Base>
   266f8:	ldr	r3, [fp, #-16]
   266fc:	mov	r0, r3
   26700:	sub	sp, fp, #8
   26704:	ldr	r4, [sp]
   26708:	ldr	fp, [sp, #4]
   2670c:	add	sp, sp, #8
   26710:	pop	{pc}		; (ldr pc, [sp], #4)
   26714:	strdeq	lr, [r0], -r0
   26718:	andeq	lr, r0, r0, lsr #16
   2671c:	andeq	lr, r0, r4, lsr #16
   26720:	andeq	lr, r0, r8, lsl #16
   26724:	andeq	lr, r0, ip, ror #15
   26728:	andeq	lr, r0, r8, ror #15
   2672c:	andeq	lr, r0, r8, ror #15
   26730:	andeq	lr, r0, r4, asr #15
   26734:	andeq	lr, r0, r8, lsr #15
   26738:	andeq	lr, r0, r8, lsr #15
   2673c:	andeq	lr, r0, r0, lsr #15

00026740 <test_mixed_type_union@@Base>:
   26740:	str	r4, [sp, #-12]!
   26744:	str	fp, [sp, #4]
   26748:	str	lr, [sp, #8]
   2674c:	add	fp, sp, #8
   26750:	sub	sp, sp, #100	; 0x64
   26754:	str	r0, [fp, #-96]	; 0xffffffa0
   26758:	ldr	r4, [pc, #2476]	; 2710c <test_mixed_type_union@@Base+0x9cc>
   2675c:	add	r4, pc, r4
   26760:	mvn	r3, #0
   26764:	str	r3, [fp, #-16]
   26768:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2676c:	bl	29bf4 <flatcc_builder_reset@@Base>
   26770:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26774:	bl	1f494 <_start@@Base+0xcaa4>
   26778:	mov	r1, #10
   2677c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26780:	bl	1b604 <_start@@Base+0x8c14>
   26784:	str	r0, [fp, #-20]	; 0xffffffec
   26788:	mov	r1, #22
   2678c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26790:	bl	1b4b4 <_start@@Base+0x8ac4>
   26794:	str	r0, [fp, #-24]	; 0xffffffe8
   26798:	sub	r3, fp, #72	; 0x48
   2679c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   267a0:	mov	r0, r3
   267a4:	bl	1be8c <_start@@Base+0x949c>
   267a8:	mov	r1, #19
   267ac:	ldr	r0, [fp, #-96]	; 0xffffffa0
   267b0:	bl	1ec7c <_start@@Base+0xc28c>
   267b4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   267b8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   267bc:	bl	1f018 <_start@@Base+0xc628>
   267c0:	mov	r1, #42	; 0x2a
   267c4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   267c8:	bl	1eb54 <_start@@Base+0xc164>
   267cc:	str	r0, [fp, #-28]	; 0xffffffe4
   267d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   267d4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   267d8:	bl	1edb4 <_start@@Base+0xc3c4>
   267dc:	ldr	r3, [pc, #2348]	; 27110 <test_mixed_type_union@@Base+0x9d0>
   267e0:	add	r3, pc, r3
   267e4:	mov	r1, r3
   267e8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   267ec:	bl	1ef10 <_start@@Base+0xc520>
   267f0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   267f4:	bl	1f134 <_start@@Base+0xc744>
   267f8:	sub	r3, fp, #72	; 0x48
   267fc:	ldm	r3, {r1, r2}
   26800:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26804:	bl	1f1b4 <_start@@Base+0xc7c4>
   26808:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2680c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26810:	bl	1f1f8 <_start@@Base+0xc808>
   26814:	mov	r1, #1
   26818:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2681c:	bl	1f248 <_start@@Base+0xc858>
   26820:	ldr	r3, [pc, #2284]	; 27114 <test_mixed_type_union@@Base+0x9d4>
   26824:	add	r3, pc, r3
   26828:	mov	r1, r3
   2682c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26830:	bl	1a9dc <_start@@Base+0x7fec>
   26834:	mov	r2, r0
   26838:	sub	r3, fp, #60	; 0x3c
   2683c:	mov	r1, r2
   26840:	mov	r0, r3
   26844:	bl	1bf1c <_start@@Base+0x952c>
   26848:	sub	r3, fp, #60	; 0x3c
   2684c:	ldm	r3, {r1, r2}
   26850:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26854:	bl	1bf64 <_start@@Base+0x9574>
   26858:	ldr	r1, [fp, #-20]	; 0xffffffec
   2685c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26860:	bl	1f334 <_start@@Base+0xc944>
   26864:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26868:	bl	1f2a8 <_start@@Base+0xc8b8>
   2686c:	str	r0, [fp, #-32]	; 0xffffffe0
   26870:	ldr	r3, [fp, #-32]	; 0xffffffe0
   26874:	mov	r2, #3
   26878:	str	r2, [r3]
   2687c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26880:	bl	1f2dc <_start@@Base+0xc8ec>
   26884:	mov	r1, #1
   26888:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2688c:	bl	1b604 <_start@@Base+0x8c14>
   26890:	mov	r3, r0
   26894:	mov	r1, r3
   26898:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2689c:	bl	1f334 <_start@@Base+0xc944>
   268a0:	mov	r1, #2
   268a4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   268a8:	bl	1f384 <_start@@Base+0xc994>
   268ac:	ldr	r3, [pc, #2148]	; 27118 <test_mixed_type_union@@Base+0x9d8>
   268b0:	add	r3, pc, r3
   268b4:	mov	r1, r3
   268b8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   268bc:	bl	1a9dc <_start@@Base+0x7fec>
   268c0:	mov	r3, r0
   268c4:	mov	r1, r3
   268c8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   268cc:	bl	1f3e4 <_start@@Base+0xc9f4>
   268d0:	ldr	r3, [pc, #2116]	; 2711c <test_mixed_type_union@@Base+0x9dc>
   268d4:	add	r3, pc, r3
   268d8:	mov	r1, r3
   268dc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   268e0:	bl	1f434 <_start@@Base+0xca44>
   268e4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   268e8:	bl	1f168 <_start@@Base+0xc778>
   268ec:	ldr	r0, [fp, #-96]	; 0xffffffa0
   268f0:	bl	1f4f4 <_start@@Base+0xcb04>
   268f4:	sub	r3, fp, #64	; 0x40
   268f8:	mov	r1, r3
   268fc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   26900:	bl	2efe8 <flatcc_builder_finalize_aligned_buffer@@Base>
   26904:	str	r0, [fp, #-36]	; 0xffffffdc
   26908:	ldr	r2, [fp, #-64]	; 0xffffffc0
   2690c:	ldr	r3, [pc, #2060]	; 27120 <test_mixed_type_union@@Base+0x9e0>
   26910:	ldr	r3, [r4, r3]
   26914:	ldr	r3, [r3]
   26918:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2691c:	ldr	r0, [pc, #2048]	; 27124 <test_mixed_type_union@@Base+0x9e4>
   26920:	add	r0, pc, r0
   26924:	bl	20e38 <_start@@Base+0xe448>
   26928:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2692c:	mov	r1, r3
   26930:	ldr	r0, [fp, #-36]	; 0xffffffdc
   26934:	bl	20de4 <_start@@Base+0xe3f4>
   26938:	str	r0, [fp, #-16]
   2693c:	ldr	r3, [fp, #-16]
   26940:	cmp	r3, #0
   26944:	beq	26970 <test_mixed_type_union@@Base+0x230>
   26948:	ldr	r0, [fp, #-16]
   2694c:	bl	2ff24 <flatcc_verify_error_string@@Base>
   26950:	mov	r3, r0
   26954:	mov	r1, r3
   26958:	ldr	r3, [pc, #1992]	; 27128 <test_mixed_type_union@@Base+0x9e8>
   2695c:	add	r3, pc, r3
   26960:	mov	r0, r3
   26964:	bl	128f0 <printf@plt>
   26968:	mvn	r3, #0
   2696c:	b	270f4 <test_mixed_type_union@@Base+0x9b4>
   26970:	mvn	r3, #0
   26974:	str	r3, [fp, #-16]
   26978:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2697c:	bl	19410 <_start@@Base+0x6a20>
   26980:	str	r0, [fp, #-40]	; 0xffffffd8
   26984:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26988:	bl	19694 <_start@@Base+0x6ca4>
   2698c:	mov	r3, r0
   26990:	cmp	r3, #0
   26994:	bne	269ac <test_mixed_type_union@@Base+0x26c>
   26998:	ldr	r3, [pc, #1932]	; 2712c <test_mixed_type_union@@Base+0x9ec>
   2699c:	add	r3, pc, r3
   269a0:	mov	r0, r3
   269a4:	bl	12944 <puts@plt>
   269a8:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   269ac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   269b0:	bl	1a128 <_start@@Base+0x7738>
   269b4:	mov	r3, r0
   269b8:	cmp	r3, #0
   269bc:	bne	269d4 <test_mixed_type_union@@Base+0x294>
   269c0:	ldr	r3, [pc, #1896]	; 27130 <test_mixed_type_union@@Base+0x9f0>
   269c4:	add	r3, pc, r3
   269c8:	mov	r0, r3
   269cc:	bl	12944 <puts@plt>
   269d0:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   269d4:	sub	r3, fp, #88	; 0x58
   269d8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   269dc:	mov	r0, r3
   269e0:	bl	1977c <_start@@Base+0x6d8c>
   269e4:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   269e8:	cmp	r3, #8
   269ec:	beq	26a04 <test_mixed_type_union@@Base+0x2c4>
   269f0:	ldr	r3, [pc, #1852]	; 27134 <test_mixed_type_union@@Base+0x9f4>
   269f4:	add	r3, pc, r3
   269f8:	mov	r0, r3
   269fc:	bl	12944 <puts@plt>
   26a00:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26a04:	ldr	r3, [fp, #-84]	; 0xffffffac
   26a08:	str	r3, [fp, #-44]	; 0xffffffd4
   26a0c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   26a10:	cmp	r3, #0
   26a14:	bne	26a28 <test_mixed_type_union@@Base+0x2e8>
   26a18:	ldr	r3, [pc, #1816]	; 27138 <test_mixed_type_union@@Base+0x9f8>
   26a1c:	add	r3, pc, r3
   26a20:	mov	r0, r3
   26a24:	bl	12944 <puts@plt>
   26a28:	ldr	r0, [fp, #-44]	; 0xffffffd4
   26a2c:	bl	14eac <_start@@Base+0x24bc>
   26a30:	mov	r3, r0
   26a34:	cmp	r3, #19
   26a38:	bls	26a50 <test_mixed_type_union@@Base+0x310>
   26a3c:	ldr	r3, [pc, #1784]	; 2713c <test_mixed_type_union@@Base+0x9fc>
   26a40:	add	r3, pc, r3
   26a44:	mov	r0, r3
   26a48:	bl	12944 <puts@plt>
   26a4c:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26a50:	ldr	r0, [fp, #-44]	; 0xffffffd4
   26a54:	bl	14eac <_start@@Base+0x24bc>
   26a58:	mov	r3, r0
   26a5c:	cmp	r3, #18
   26a60:	bhi	26a78 <test_mixed_type_union@@Base+0x338>
   26a64:	ldr	r3, [pc, #1748]	; 27140 <test_mixed_type_union@@Base+0xa00>
   26a68:	add	r3, pc, r3
   26a6c:	mov	r0, r3
   26a70:	bl	12944 <puts@plt>
   26a74:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26a78:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26a7c:	bl	19cfc <_start@@Base+0x730c>
   26a80:	mov	r3, r0
   26a84:	cmp	r3, #8
   26a88:	beq	26aa0 <test_mixed_type_union@@Base+0x360>
   26a8c:	ldr	r3, [pc, #1712]	; 27144 <test_mixed_type_union@@Base+0xa04>
   26a90:	add	r3, pc, r3
   26a94:	mov	r0, r3
   26a98:	bl	12944 <puts@plt>
   26a9c:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26aa0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26aa4:	bl	19dfc <_start@@Base+0x740c>
   26aa8:	str	r0, [fp, #-44]	; 0xffffffd4
   26aac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   26ab0:	cmp	r3, #0
   26ab4:	bne	26acc <test_mixed_type_union@@Base+0x38c>
   26ab8:	ldr	r3, [pc, #1672]	; 27148 <test_mixed_type_union@@Base+0xa08>
   26abc:	add	r3, pc, r3
   26ac0:	mov	r0, r3
   26ac4:	bl	12944 <puts@plt>
   26ac8:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26acc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   26ad0:	bl	14eac <_start@@Base+0x24bc>
   26ad4:	mov	r3, r0
   26ad8:	cmp	r3, #22
   26adc:	beq	26af4 <test_mixed_type_union@@Base+0x3b4>
   26ae0:	ldr	r3, [pc, #1636]	; 2714c <test_mixed_type_union@@Base+0xa0c>
   26ae4:	add	r3, pc, r3
   26ae8:	mov	r0, r3
   26aec:	bl	12944 <puts@plt>
   26af0:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26af4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26af8:	bl	19810 <_start@@Base+0x6e20>
   26afc:	mov	r3, r0
   26b00:	cmp	r3, #2
   26b04:	beq	26b1c <test_mixed_type_union@@Base+0x3dc>
   26b08:	ldr	r3, [pc, #1600]	; 27150 <test_mixed_type_union@@Base+0xa10>
   26b0c:	add	r3, pc, r3
   26b10:	mov	r0, r3
   26b14:	bl	12944 <puts@plt>
   26b18:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26b1c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26b20:	bl	19910 <_start@@Base+0x6f20>
   26b24:	str	r0, [fp, #-48]	; 0xffffffd0
   26b28:	ldr	r3, [fp, #-48]	; 0xffffffd0
   26b2c:	cmp	r3, #0
   26b30:	beq	26b48 <test_mixed_type_union@@Base+0x408>
   26b34:	ldr	r0, [fp, #-48]	; 0xffffffd0
   26b38:	bl	1919c <_start@@Base+0x67ac>
   26b3c:	mov	r3, r0
   26b40:	cmp	r3, #42	; 0x2a
   26b44:	beq	26b5c <test_mixed_type_union@@Base+0x41c>
   26b48:	ldr	r3, [pc, #1540]	; 27154 <test_mixed_type_union@@Base+0xa14>
   26b4c:	add	r3, pc, r3
   26b50:	mov	r0, r3
   26b54:	bl	12944 <puts@plt>
   26b58:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26b5c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26b60:	bl	19a1c <_start@@Base+0x702c>
   26b64:	mov	r3, r0
   26b68:	cmp	r3, #11
   26b6c:	beq	26b84 <test_mixed_type_union@@Base+0x444>
   26b70:	ldr	r3, [pc, #1504]	; 27158 <test_mixed_type_union@@Base+0xa18>
   26b74:	add	r3, pc, r3
   26b78:	mov	r0, r3
   26b7c:	bl	12944 <puts@plt>
   26b80:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26b84:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26b88:	bl	19b1c <_start@@Base+0x712c>
   26b8c:	mov	r3, r0
   26b90:	mov	r0, r3
   26b94:	bl	13700 <_start@@Base+0xd10>
   26b98:	str	r0, [fp, #-52]	; 0xffffffcc
   26b9c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   26ba0:	cmp	r3, #0
   26ba4:	bne	26bbc <test_mixed_type_union@@Base+0x47c>
   26ba8:	ldr	r3, [pc, #1452]	; 2715c <test_mixed_type_union@@Base+0xa1c>
   26bac:	add	r3, pc, r3
   26bb0:	mov	r0, r3
   26bb4:	bl	12944 <puts@plt>
   26bb8:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26bbc:	ldr	r3, [pc, #1436]	; 27160 <test_mixed_type_union@@Base+0xa20>
   26bc0:	add	r3, pc, r3
   26bc4:	mov	r1, r3
   26bc8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   26bcc:	bl	128e4 <strcmp@plt>
   26bd0:	mov	r3, r0
   26bd4:	cmp	r3, #0
   26bd8:	beq	26bf4 <test_mixed_type_union@@Base+0x4b4>
   26bdc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   26be0:	ldr	r3, [pc, #1404]	; 27164 <test_mixed_type_union@@Base+0xa24>
   26be4:	add	r3, pc, r3
   26be8:	mov	r0, r3
   26bec:	bl	128f0 <printf@plt>
   26bf0:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26bf4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26bf8:	bl	19cbc <_start@@Base+0x72cc>
   26bfc:	str	r0, [fp, #-52]	; 0xffffffcc
   26c00:	ldr	r3, [fp, #-52]	; 0xffffffcc
   26c04:	cmp	r3, #0
   26c08:	bne	26c20 <test_mixed_type_union@@Base+0x4e0>
   26c0c:	ldr	r3, [pc, #1364]	; 27168 <test_mixed_type_union@@Base+0xa28>
   26c10:	add	r3, pc, r3
   26c14:	mov	r0, r3
   26c18:	bl	12944 <puts@plt>
   26c1c:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26c20:	ldr	r3, [pc, #1348]	; 2716c <test_mixed_type_union@@Base+0xa2c>
   26c24:	add	r3, pc, r3
   26c28:	mov	r1, r3
   26c2c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   26c30:	bl	128e4 <strcmp@plt>
   26c34:	mov	r3, r0
   26c38:	cmp	r3, #0
   26c3c:	beq	26c58 <test_mixed_type_union@@Base+0x518>
   26c40:	ldr	r1, [fp, #-52]	; 0xffffffcc
   26c44:	ldr	r3, [pc, #1316]	; 27170 <test_mixed_type_union@@Base+0xa30>
   26c48:	add	r3, pc, r3
   26c4c:	mov	r0, r3
   26c50:	bl	128f0 <printf@plt>
   26c54:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26c58:	sub	r3, fp, #108	; 0x6c
   26c5c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   26c60:	mov	r0, r3
   26c64:	bl	19c28 <_start@@Base+0x7238>
   26c68:	sub	r1, fp, #88	; 0x58
   26c6c:	sub	r3, fp, #108	; 0x6c
   26c70:	ldrd	r2, [r3]
   26c74:	strd	r2, [r1]
   26c78:	sub	r3, fp, #88	; 0x58
   26c7c:	ldm	r3, {r0, r1}
   26c80:	bl	13880 <_start@@Base+0xe90>
   26c84:	str	r0, [fp, #-52]	; 0xffffffcc
   26c88:	ldr	r3, [pc, #1252]	; 27174 <test_mixed_type_union@@Base+0xa34>
   26c8c:	add	r3, pc, r3
   26c90:	mov	r1, r3
   26c94:	ldr	r0, [fp, #-52]	; 0xffffffcc
   26c98:	bl	128e4 <strcmp@plt>
   26c9c:	mov	r3, r0
   26ca0:	cmp	r3, #0
   26ca4:	beq	26cc0 <test_mixed_type_union@@Base+0x580>
   26ca8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   26cac:	ldr	r3, [pc, #1220]	; 27178 <test_mixed_type_union@@Base+0xa38>
   26cb0:	add	r3, pc, r3
   26cb4:	mov	r0, r3
   26cb8:	bl	128f0 <printf@plt>
   26cbc:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26cc0:	sub	r3, fp, #80	; 0x50
   26cc4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   26cc8:	mov	r0, r3
   26ccc:	bl	1a210 <_start@@Base+0x7820>
   26cd0:	sub	r0, fp, #108	; 0x6c
   26cd4:	mov	r3, #0
   26cd8:	sub	r2, fp, #80	; 0x50
   26cdc:	ldm	r2, {r1, r2}
   26ce0:	bl	192d8 <_start@@Base+0x68e8>
   26ce4:	sub	r1, fp, #88	; 0x58
   26ce8:	sub	r3, fp, #108	; 0x6c
   26cec:	ldrd	r2, [r3]
   26cf0:	strd	r2, [r1]
   26cf4:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   26cf8:	cmp	r3, #8
   26cfc:	beq	26d14 <test_mixed_type_union@@Base+0x5d4>
   26d00:	ldr	r3, [pc, #1140]	; 2717c <test_mixed_type_union@@Base+0xa3c>
   26d04:	add	r3, pc, r3
   26d08:	mov	r0, r3
   26d0c:	bl	128f0 <printf@plt>
   26d10:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26d14:	sub	r0, fp, #108	; 0x6c
   26d18:	mov	r3, #1
   26d1c:	sub	r2, fp, #80	; 0x50
   26d20:	ldm	r2, {r1, r2}
   26d24:	bl	192d8 <_start@@Base+0x68e8>
   26d28:	sub	r1, fp, #88	; 0x58
   26d2c:	sub	r3, fp, #108	; 0x6c
   26d30:	ldrd	r2, [r3]
   26d34:	strd	r2, [r1]
   26d38:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   26d3c:	cmp	r3, #2
   26d40:	beq	26d58 <test_mixed_type_union@@Base+0x618>
   26d44:	ldr	r3, [pc, #1076]	; 27180 <test_mixed_type_union@@Base+0xa40>
   26d48:	add	r3, pc, r3
   26d4c:	mov	r0, r3
   26d50:	bl	128f0 <printf@plt>
   26d54:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26d58:	ldr	r3, [fp, #-84]	; 0xffffffac
   26d5c:	str	r3, [fp, #-48]	; 0xffffffd0
   26d60:	ldr	r0, [fp, #-48]	; 0xffffffd0
   26d64:	bl	1919c <_start@@Base+0x67ac>
   26d68:	mov	r3, r0
   26d6c:	cmp	r3, #42	; 0x2a
   26d70:	beq	26d88 <test_mixed_type_union@@Base+0x648>
   26d74:	ldr	r3, [pc, #1032]	; 27184 <test_mixed_type_union@@Base+0xa44>
   26d78:	add	r3, pc, r3
   26d7c:	mov	r0, r3
   26d80:	bl	128f0 <printf@plt>
   26d84:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26d88:	sub	r0, fp, #108	; 0x6c
   26d8c:	mov	r3, #2
   26d90:	sub	r2, fp, #80	; 0x50
   26d94:	ldm	r2, {r1, r2}
   26d98:	bl	192d8 <_start@@Base+0x68e8>
   26d9c:	sub	r1, fp, #88	; 0x58
   26da0:	sub	r3, fp, #108	; 0x6c
   26da4:	ldrd	r2, [r3]
   26da8:	strd	r2, [r1]
   26dac:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   26db0:	cmp	r3, #2
   26db4:	beq	26dcc <test_mixed_type_union@@Base+0x68c>
   26db8:	ldr	r3, [pc, #968]	; 27188 <test_mixed_type_union@@Base+0xa48>
   26dbc:	add	r3, pc, r3
   26dc0:	mov	r0, r3
   26dc4:	bl	128f0 <printf@plt>
   26dc8:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26dcc:	ldr	r3, [fp, #-84]	; 0xffffffac
   26dd0:	str	r3, [fp, #-48]	; 0xffffffd0
   26dd4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   26dd8:	bl	1919c <_start@@Base+0x67ac>
   26ddc:	mov	r3, r0
   26de0:	cmp	r3, #1
   26de4:	beq	26dfc <test_mixed_type_union@@Base+0x6bc>
   26de8:	ldr	r3, [pc, #924]	; 2718c <test_mixed_type_union@@Base+0xa4c>
   26dec:	add	r3, pc, r3
   26df0:	mov	r0, r3
   26df4:	bl	128f0 <printf@plt>
   26df8:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26dfc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26e00:	bl	19f08 <_start@@Base+0x7518>
   26e04:	mov	r3, r0
   26e08:	mov	r1, #3
   26e0c:	mov	r0, r3
   26e10:	bl	14194 <_start@@Base+0x17a4>
   26e14:	mov	r3, r0
   26e18:	cmp	r3, #11
   26e1c:	beq	26e34 <test_mixed_type_union@@Base+0x6f4>
   26e20:	ldr	r3, [pc, #872]	; 27190 <test_mixed_type_union@@Base+0xa50>
   26e24:	add	r3, pc, r3
   26e28:	mov	r0, r3
   26e2c:	bl	12944 <puts@plt>
   26e30:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26e34:	mov	r2, #3
   26e38:	sub	r3, fp, #80	; 0x50
   26e3c:	ldm	r3, {r0, r1}
   26e40:	bl	193cc <_start@@Base+0x69dc>
   26e44:	str	r0, [fp, #-52]	; 0xffffffcc
   26e48:	ldr	r3, [fp, #-52]	; 0xffffffcc
   26e4c:	cmp	r3, #0
   26e50:	beq	26e74 <test_mixed_type_union@@Base+0x734>
   26e54:	ldr	r3, [pc, #824]	; 27194 <test_mixed_type_union@@Base+0xa54>
   26e58:	add	r3, pc, r3
   26e5c:	mov	r1, r3
   26e60:	ldr	r0, [fp, #-52]	; 0xffffffcc
   26e64:	bl	128e4 <strcmp@plt>
   26e68:	mov	r3, r0
   26e6c:	cmp	r3, #0
   26e70:	beq	26e88 <test_mixed_type_union@@Base+0x748>
   26e74:	ldr	r3, [pc, #796]	; 27198 <test_mixed_type_union@@Base+0xa58>
   26e78:	add	r3, pc, r3
   26e7c:	mov	r0, r3
   26e80:	bl	12944 <puts@plt>
   26e84:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26e88:	sub	r0, fp, #108	; 0x6c
   26e8c:	mov	r3, #3
   26e90:	sub	r2, fp, #80	; 0x50
   26e94:	ldm	r2, {r1, r2}
   26e98:	bl	192d8 <_start@@Base+0x68e8>
   26e9c:	sub	r1, fp, #88	; 0x58
   26ea0:	sub	r3, fp, #108	; 0x6c
   26ea4:	ldrd	r2, [r3]
   26ea8:	strd	r2, [r1]
   26eac:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   26eb0:	cmp	r3, #11
   26eb4:	beq	26ecc <test_mixed_type_union@@Base+0x78c>
   26eb8:	ldr	r3, [pc, #732]	; 2719c <test_mixed_type_union@@Base+0xa5c>
   26ebc:	add	r3, pc, r3
   26ec0:	mov	r0, r3
   26ec4:	bl	128f0 <printf@plt>
   26ec8:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26ecc:	sub	r3, fp, #88	; 0x58
   26ed0:	ldm	r3, {r0, r1}
   26ed4:	bl	13880 <_start@@Base+0xe90>
   26ed8:	str	r0, [fp, #-52]	; 0xffffffcc
   26edc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   26ee0:	cmp	r3, #0
   26ee4:	beq	26f08 <test_mixed_type_union@@Base+0x7c8>
   26ee8:	ldr	r3, [pc, #688]	; 271a0 <test_mixed_type_union@@Base+0xa60>
   26eec:	add	r3, pc, r3
   26ef0:	mov	r1, r3
   26ef4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   26ef8:	bl	128e4 <strcmp@plt>
   26efc:	mov	r3, r0
   26f00:	cmp	r3, #0
   26f04:	beq	26f1c <test_mixed_type_union@@Base+0x7dc>
   26f08:	ldr	r3, [pc, #660]	; 271a4 <test_mixed_type_union@@Base+0xa64>
   26f0c:	add	r3, pc, r3
   26f10:	mov	r0, r3
   26f14:	bl	12944 <puts@plt>
   26f18:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26f1c:	sub	r0, fp, #108	; 0x6c
   26f20:	mov	r3, #4
   26f24:	sub	r2, fp, #80	; 0x50
   26f28:	ldm	r2, {r1, r2}
   26f2c:	bl	192d8 <_start@@Base+0x68e8>
   26f30:	sub	r1, fp, #88	; 0x58
   26f34:	sub	r3, fp, #108	; 0x6c
   26f38:	ldrd	r2, [r3]
   26f3c:	strd	r2, [r1]
   26f40:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   26f44:	cmp	r3, #9
   26f48:	beq	26f60 <test_mixed_type_union@@Base+0x820>
   26f4c:	ldr	r3, [pc, #596]	; 271a8 <test_mixed_type_union@@Base+0xa68>
   26f50:	add	r3, pc, r3
   26f54:	mov	r0, r3
   26f58:	bl	128f0 <printf@plt>
   26f5c:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26f60:	sub	r0, fp, #108	; 0x6c
   26f64:	mov	r3, #5
   26f68:	sub	r2, fp, #80	; 0x50
   26f6c:	ldm	r2, {r1, r2}
   26f70:	bl	192d8 <_start@@Base+0x68e8>
   26f74:	sub	r1, fp, #88	; 0x58
   26f78:	sub	r3, fp, #108	; 0x6c
   26f7c:	ldrd	r2, [r3]
   26f80:	strd	r2, [r1]
   26f84:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   26f88:	cmp	r3, #9
   26f8c:	beq	26fa4 <test_mixed_type_union@@Base+0x864>
   26f90:	ldr	r3, [pc, #532]	; 271ac <test_mixed_type_union@@Base+0xa6c>
   26f94:	add	r3, pc, r3
   26f98:	mov	r0, r3
   26f9c:	bl	128f0 <printf@plt>
   26fa0:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26fa4:	sub	r0, fp, #108	; 0x6c
   26fa8:	mov	r3, #6
   26fac:	sub	r2, fp, #80	; 0x50
   26fb0:	ldm	r2, {r1, r2}
   26fb4:	bl	192d8 <_start@@Base+0x68e8>
   26fb8:	sub	r1, fp, #88	; 0x58
   26fbc:	sub	r3, fp, #108	; 0x6c
   26fc0:	ldrd	r2, [r3]
   26fc4:	strd	r2, [r1]
   26fc8:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   26fcc:	cmp	r3, #9
   26fd0:	beq	26fe8 <test_mixed_type_union@@Base+0x8a8>
   26fd4:	ldr	r3, [pc, #468]	; 271b0 <test_mixed_type_union@@Base+0xa70>
   26fd8:	add	r3, pc, r3
   26fdc:	mov	r0, r3
   26fe0:	bl	128f0 <printf@plt>
   26fe4:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   26fe8:	sub	r0, fp, #108	; 0x6c
   26fec:	mov	r3, #7
   26ff0:	sub	r2, fp, #80	; 0x50
   26ff4:	ldm	r2, {r1, r2}
   26ff8:	bl	192d8 <_start@@Base+0x68e8>
   26ffc:	sub	r1, fp, #88	; 0x58
   27000:	sub	r3, fp, #108	; 0x6c
   27004:	ldrd	r2, [r3]
   27008:	strd	r2, [r1]
   2700c:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   27010:	cmp	r3, #9
   27014:	beq	2702c <test_mixed_type_union@@Base+0x8ec>
   27018:	ldr	r3, [pc, #404]	; 271b4 <test_mixed_type_union@@Base+0xa74>
   2701c:	add	r3, pc, r3
   27020:	mov	r0, r3
   27024:	bl	128f0 <printf@plt>
   27028:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   2702c:	sub	r0, fp, #108	; 0x6c
   27030:	mov	r3, #8
   27034:	sub	r2, fp, #80	; 0x50
   27038:	ldm	r2, {r1, r2}
   2703c:	bl	192d8 <_start@@Base+0x68e8>
   27040:	sub	r1, fp, #88	; 0x58
   27044:	sub	r3, fp, #108	; 0x6c
   27048:	ldrd	r2, [r3]
   2704c:	strd	r2, [r1]
   27050:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   27054:	cmp	r3, #11
   27058:	beq	27070 <test_mixed_type_union@@Base+0x930>
   2705c:	ldr	r3, [pc, #340]	; 271b8 <test_mixed_type_union@@Base+0xa78>
   27060:	add	r3, pc, r3
   27064:	mov	r0, r3
   27068:	bl	128f0 <printf@plt>
   2706c:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   27070:	sub	r0, fp, #108	; 0x6c
   27074:	mov	r3, #9
   27078:	sub	r2, fp, #80	; 0x50
   2707c:	ldm	r2, {r1, r2}
   27080:	bl	192d8 <_start@@Base+0x68e8>
   27084:	sub	r1, fp, #88	; 0x58
   27088:	sub	r3, fp, #108	; 0x6c
   2708c:	ldrd	r2, [r3]
   27090:	strd	r2, [r1]
   27094:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   27098:	cmp	r3, #11
   2709c:	beq	270b4 <test_mixed_type_union@@Base+0x974>
   270a0:	ldr	r3, [pc, #276]	; 271bc <test_mixed_type_union@@Base+0xa7c>
   270a4:	add	r3, pc, r3
   270a8:	mov	r0, r3
   270ac:	bl	128f0 <printf@plt>
   270b0:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   270b4:	sub	r3, fp, #80	; 0x50
   270b8:	ldm	r3, {r0, r1}
   270bc:	bl	1929c <_start@@Base+0x68ac>
   270c0:	mov	r3, r0
   270c4:	cmp	r3, #10
   270c8:	beq	270e0 <test_mixed_type_union@@Base+0x9a0>
   270cc:	ldr	r3, [pc, #236]	; 271c0 <test_mixed_type_union@@Base+0xa80>
   270d0:	add	r3, pc, r3
   270d4:	mov	r0, r3
   270d8:	bl	128f0 <printf@plt>
   270dc:	b	270e8 <test_mixed_type_union@@Base+0x9a8>
   270e0:	mov	r3, #0
   270e4:	str	r3, [fp, #-16]
   270e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   270ec:	bl	2f124 <flatcc_builder_aligned_free@@Base>
   270f0:	ldr	r3, [fp, #-16]
   270f4:	mov	r0, r3
   270f8:	sub	sp, fp, #8
   270fc:	ldr	r4, [sp]
   27100:	ldr	fp, [sp, #4]
   27104:	add	sp, sp, #8
   27108:	pop	{pc}		; (ldr pc, [sp], #4)
   2710c:	muleq	r2, ip, r8
   27110:			; <UNDEFINED> instruction: 0x0000e6b0
   27114:	andeq	lr, r0, r4, ror r6
   27118:	strdeq	lr, [r0], -r0
   2711c:	ldrdeq	lr, [r0], -r4
   27120:	andeq	r0, r0, r8, rrx
   27124:	muleq	r0, r4, r5
   27128:	andeq	lr, r0, r8, ror #10
   2712c:	andeq	lr, r0, r8, ror r5
   27130:	andeq	lr, r0, ip, ror r5
   27134:	andeq	lr, r0, r8, ror r5
   27138:	andeq	lr, r0, ip, ror #10
   2713c:	andeq	lr, r0, r0, ror #10
   27140:	andeq	lr, r0, r0, ror #10
   27144:	andeq	lr, r0, r8, ror #10
   27148:	andeq	lr, r0, r0, ror r5
   2714c:	andeq	lr, r0, r8, ror r5
   27150:	andeq	lr, r0, r0, lsl #11
   27154:	andeq	lr, r0, r8, asr r5
   27158:	andeq	lr, r0, r4, asr r5
   2715c:	andeq	lr, r0, r4, lsr r5
   27160:	ldrdeq	lr, [r0], -r0
   27164:	andeq	lr, r0, r8, lsl r5
   27168:	ldrdeq	lr, [r0], -r0
   2716c:	andeq	lr, r0, ip, ror #4
   27170:	ldrdeq	lr, [r0], -r8
   27174:	andeq	lr, r0, r4, lsl #4
   27178:	andeq	lr, r0, r0, lsr #9
   2717c:	andeq	lr, r0, ip, ror r4
   27180:	andeq	lr, r0, r0, ror #8
   27184:	andeq	lr, r0, r4, asr r4
   27188:	andeq	lr, r0, r4, asr #8
   2718c:	andeq	lr, r0, r8, lsr r4
   27190:	andeq	lr, r0, r4, lsr r4
   27194:	andeq	lr, r0, r0, asr #32
   27198:	andeq	lr, r0, r0, lsl r4
   2719c:	andeq	lr, r0, r0, lsl #8
   271a0:	andeq	sp, r0, ip, lsr #31
   271a4:	andeq	lr, r0, r8, ror #7
   271a8:	andeq	lr, r0, r4, ror #7
   271ac:	andeq	lr, r0, r4, asr #7
   271b0:	andeq	lr, r0, r4, lsr #7
   271b4:	andeq	lr, r0, r4, lsl #7
   271b8:	andeq	lr, r0, r4, ror #6
   271bc:	andeq	lr, r0, r0, lsr #6
   271c0:	andeq	lr, r0, r0, lsr #6

000271c4 <test_add_set_defaults@@Base>:
   271c4:	str	fp, [sp, #-8]!
   271c8:	str	lr, [sp, #4]
   271cc:	add	fp, sp, #4
   271d0:	sub	sp, sp, #24
   271d4:	str	r0, [fp, #-24]	; 0xffffffe8
   271d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   271dc:	bl	29bf4 <flatcc_builder_reset@@Base>
   271e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   271e4:	bl	1e160 <_start@@Base+0xb770>
   271e8:	ldr	r3, [pc, #488]	; 273d8 <test_add_set_defaults@@Base+0x214>
   271ec:	add	r3, pc, r3
   271f0:	mov	r1, r3
   271f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   271f8:	bl	1cb00 <_start@@Base+0xa110>
   271fc:	mov	r1, #100	; 0x64
   27200:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27204:	bl	1c834 <_start@@Base+0x9e44>
   27208:	mov	r1, #100	; 0x64
   2720c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27210:	bl	1c928 <_start@@Base+0x9f38>
   27214:	mov	r1, #8
   27218:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2721c:	bl	1cdec <_start@@Base+0xa3fc>
   27220:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27224:	bl	1e220 <_start@@Base+0xb830>
   27228:	sub	r3, fp, #16
   2722c:	mov	r1, r3
   27230:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27234:	bl	2edc8 <flatcc_builder_get_direct_buffer@@Base>
   27238:	str	r0, [fp, #-8]
   2723c:	ldr	r0, [fp, #-8]
   27240:	bl	15d5c <_start@@Base+0x336c>
   27244:	str	r0, [fp, #-12]
   27248:	ldr	r0, [fp, #-12]
   2724c:	bl	160b0 <_start@@Base+0x36c0>
   27250:	mov	r3, r0
   27254:	cmp	r3, #0
   27258:	beq	27274 <test_add_set_defaults@@Base+0xb0>
   2725c:	ldr	r3, [pc, #376]	; 273dc <test_add_set_defaults@@Base+0x218>
   27260:	add	r3, pc, r3
   27264:	mov	r0, r3
   27268:	bl	12944 <puts@plt>
   2726c:	mvn	r3, #0
   27270:	b	273c4 <test_add_set_defaults@@Base+0x200>
   27274:	ldr	r0, [fp, #-12]
   27278:	bl	165b0 <_start@@Base+0x3bc0>
   2727c:	mov	r3, r0
   27280:	cmp	r3, #0
   27284:	bne	272a0 <test_add_set_defaults@@Base+0xdc>
   27288:	ldr	r3, [pc, #336]	; 273e0 <test_add_set_defaults@@Base+0x21c>
   2728c:	add	r3, pc, r3
   27290:	mov	r0, r3
   27294:	bl	12944 <puts@plt>
   27298:	mvn	r3, #0
   2729c:	b	273c4 <test_add_set_defaults@@Base+0x200>
   272a0:	ldr	r0, [fp, #-12]
   272a4:	bl	176c0 <_start@@Base+0x4cd0>
   272a8:	mov	r3, r0
   272ac:	cmp	r3, #0
   272b0:	beq	272cc <test_add_set_defaults@@Base+0x108>
   272b4:	ldr	r3, [pc, #296]	; 273e4 <test_add_set_defaults@@Base+0x220>
   272b8:	add	r3, pc, r3
   272bc:	mov	r0, r3
   272c0:	bl	12944 <puts@plt>
   272c4:	mvn	r3, #0
   272c8:	b	273c4 <test_add_set_defaults@@Base+0x200>
   272cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   272d0:	bl	29bf4 <flatcc_builder_reset@@Base>
   272d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   272d8:	bl	1e160 <_start@@Base+0xb770>
   272dc:	ldr	r3, [pc, #260]	; 273e8 <test_add_set_defaults@@Base+0x224>
   272e0:	add	r3, pc, r3
   272e4:	mov	r1, r3
   272e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   272ec:	bl	1cb00 <_start@@Base+0xa110>
   272f0:	mov	r1, #100	; 0x64
   272f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   272f8:	bl	1c8b8 <_start@@Base+0x9ec8>
   272fc:	mov	r1, #100	; 0x64
   27300:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27304:	bl	1c9ac <_start@@Base+0x9fbc>
   27308:	mov	r1, #8
   2730c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27310:	bl	1ce70 <_start@@Base+0xa480>
   27314:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27318:	bl	1e220 <_start@@Base+0xb830>
   2731c:	sub	r3, fp, #16
   27320:	mov	r1, r3
   27324:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27328:	bl	2edc8 <flatcc_builder_get_direct_buffer@@Base>
   2732c:	str	r0, [fp, #-8]
   27330:	ldr	r0, [fp, #-8]
   27334:	bl	15d5c <_start@@Base+0x336c>
   27338:	str	r0, [fp, #-12]
   2733c:	ldr	r0, [fp, #-12]
   27340:	bl	160b0 <_start@@Base+0x36c0>
   27344:	mov	r3, r0
   27348:	cmp	r3, #0
   2734c:	bne	27368 <test_add_set_defaults@@Base+0x1a4>
   27350:	ldr	r3, [pc, #148]	; 273ec <test_add_set_defaults@@Base+0x228>
   27354:	add	r3, pc, r3
   27358:	mov	r0, r3
   2735c:	bl	12944 <puts@plt>
   27360:	mvn	r3, #0
   27364:	b	273c4 <test_add_set_defaults@@Base+0x200>
   27368:	ldr	r0, [fp, #-12]
   2736c:	bl	165b0 <_start@@Base+0x3bc0>
   27370:	mov	r3, r0
   27374:	cmp	r3, #0
   27378:	bne	27394 <test_add_set_defaults@@Base+0x1d0>
   2737c:	ldr	r3, [pc, #108]	; 273f0 <test_add_set_defaults@@Base+0x22c>
   27380:	add	r3, pc, r3
   27384:	mov	r0, r3
   27388:	bl	12944 <puts@plt>
   2738c:	mvn	r3, #0
   27390:	b	273c4 <test_add_set_defaults@@Base+0x200>
   27394:	ldr	r0, [fp, #-12]
   27398:	bl	176c0 <_start@@Base+0x4cd0>
   2739c:	mov	r3, r0
   273a0:	cmp	r3, #0
   273a4:	bne	273c0 <test_add_set_defaults@@Base+0x1fc>
   273a8:	ldr	r3, [pc, #68]	; 273f4 <test_add_set_defaults@@Base+0x230>
   273ac:	add	r3, pc, r3
   273b0:	mov	r0, r3
   273b4:	bl	12944 <puts@plt>
   273b8:	mvn	r3, #0
   273bc:	b	273c4 <test_add_set_defaults@@Base+0x200>
   273c0:	mov	r3, #0
   273c4:	mov	r0, r3
   273c8:	sub	sp, fp, #4
   273cc:	ldr	fp, [sp]
   273d0:	add	sp, sp, #4
   273d4:	pop	{pc}		; (ldr pc, [sp], #4)
   273d8:	andeq	fp, r0, r4, ror #29
   273dc:			; <UNDEFINED> instruction: 0x0000e1b8
   273e0:			; <UNDEFINED> instruction: 0x0000e1b8
   273e4:			; <UNDEFINED> instruction: 0x0000e1bc
   273e8:	strdeq	fp, [r0], -r0
   273ec:	andeq	lr, r0, r0, asr r1
   273f0:	andeq	lr, r0, r8, asr r1
   273f4:	andeq	lr, r0, ip, ror #2

000273f8 <test_nested_buffer@@Base>:
   273f8:	str	r4, [sp, #-12]!
   273fc:	str	fp, [sp, #4]
   27400:	str	lr, [sp, #8]
   27404:	add	fp, sp, #8
   27408:	sub	sp, sp, #28
   2740c:	str	r0, [fp, #-32]	; 0xffffffe0
   27410:	ldr	r4, [pc, #428]	; 275c4 <test_nested_buffer@@Base+0x1cc>
   27414:	add	r4, pc, r4
   27418:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2741c:	bl	29bf4 <flatcc_builder_reset@@Base>
   27420:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27424:	bl	1e160 <_start@@Base+0xb770>
   27428:	ldr	r3, [pc, #408]	; 275c8 <test_nested_buffer@@Base+0x1d0>
   2742c:	add	r3, pc, r3
   27430:	mov	r1, r3
   27434:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27438:	bl	1cb00 <_start@@Base+0xa110>
   2743c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27440:	bl	1ddf0 <_start@@Base+0xb400>
   27444:	ldr	r3, [pc, #384]	; 275cc <test_nested_buffer@@Base+0x1d4>
   27448:	add	r3, pc, r3
   2744c:	mov	r1, r3
   27450:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27454:	bl	1cb00 <_start@@Base+0xa110>
   27458:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2745c:	bl	1de50 <_start@@Base+0xb460>
   27460:	mov	r1, #10
   27464:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27468:	bl	1c834 <_start@@Base+0x9e44>
   2746c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27470:	bl	1e220 <_start@@Base+0xb830>
   27474:	sub	r3, fp, #28
   27478:	mov	r1, r3
   2747c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27480:	bl	2edc8 <flatcc_builder_get_direct_buffer@@Base>
   27484:	str	r0, [fp, #-16]
   27488:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2748c:	ldr	r3, [pc, #316]	; 275d0 <test_nested_buffer@@Base+0x1d8>
   27490:	ldr	r3, [r4, r3]
   27494:	ldr	r3, [r3]
   27498:	ldr	r1, [fp, #-16]
   2749c:	ldr	r0, [pc, #304]	; 275d4 <test_nested_buffer@@Base+0x1dc>
   274a0:	add	r0, pc, r0
   274a4:	bl	20e38 <_start@@Base+0xe448>
   274a8:	ldr	r0, [fp, #-16]
   274ac:	bl	15d5c <_start@@Base+0x336c>
   274b0:	str	r0, [fp, #-20]	; 0xffffffec
   274b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   274b8:	bl	16698 <_start@@Base+0x3ca8>
   274bc:	mov	r2, r0
   274c0:	ldr	r3, [pc, #272]	; 275d8 <test_nested_buffer@@Base+0x1e0>
   274c4:	add	r3, pc, r3
   274c8:	mov	r1, r3
   274cc:	mov	r0, r2
   274d0:	bl	128e4 <strcmp@plt>
   274d4:	mov	r3, r0
   274d8:	cmp	r3, #0
   274dc:	beq	274f8 <test_nested_buffer@@Base+0x100>
   274e0:	ldr	r3, [pc, #244]	; 275dc <test_nested_buffer@@Base+0x1e4>
   274e4:	add	r3, pc, r3
   274e8:	mov	r0, r3
   274ec:	bl	12944 <puts@plt>
   274f0:	mvn	r3, #0
   274f4:	b	275ac <test_nested_buffer@@Base+0x1b4>
   274f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   274fc:	bl	18384 <_start@@Base+0x5994>
   27500:	str	r0, [fp, #-24]	; 0xffffffe8
   27504:	ldr	r0, [fp, #-20]	; 0xffffffec
   27508:	bl	15fb0 <_start@@Base+0x35c0>
   2750c:	mov	r3, r0
   27510:	cmp	r3, #10
   27514:	beq	27530 <test_nested_buffer@@Base+0x138>
   27518:	ldr	r3, [pc, #192]	; 275e0 <test_nested_buffer@@Base+0x1e8>
   2751c:	add	r3, pc, r3
   27520:	mov	r0, r3
   27524:	bl	12944 <puts@plt>
   27528:	mvn	r3, #0
   2752c:	b	275ac <test_nested_buffer@@Base+0x1b4>
   27530:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27534:	bl	16698 <_start@@Base+0x3ca8>
   27538:	mov	r3, r0
   2753c:	cmp	r3, #0
   27540:	bne	27564 <test_nested_buffer@@Base+0x16c>
   27544:	ldr	r3, [pc, #152]	; 275e4 <test_nested_buffer@@Base+0x1ec>
   27548:	add	r3, pc, r3
   2754c:	movw	r2, #2188	; 0x88c
   27550:	ldr	r1, [pc, #144]	; 275e8 <test_nested_buffer@@Base+0x1f0>
   27554:	add	r1, pc, r1
   27558:	ldr	r0, [pc, #140]	; 275ec <test_nested_buffer@@Base+0x1f4>
   2755c:	add	r0, pc, r0
   27560:	bl	129e0 <__assert_fail@plt>
   27564:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27568:	bl	16698 <_start@@Base+0x3ca8>
   2756c:	mov	r2, r0
   27570:	ldr	r3, [pc, #120]	; 275f0 <test_nested_buffer@@Base+0x1f8>
   27574:	add	r3, pc, r3
   27578:	mov	r1, r3
   2757c:	mov	r0, r2
   27580:	bl	128e4 <strcmp@plt>
   27584:	mov	r3, r0
   27588:	cmp	r3, #0
   2758c:	beq	275a8 <test_nested_buffer@@Base+0x1b0>
   27590:	ldr	r3, [pc, #92]	; 275f4 <test_nested_buffer@@Base+0x1fc>
   27594:	add	r3, pc, r3
   27598:	mov	r0, r3
   2759c:	bl	12944 <puts@plt>
   275a0:	mvn	r3, #0
   275a4:	b	275ac <test_nested_buffer@@Base+0x1b4>
   275a8:	mov	r3, #0
   275ac:	mov	r0, r3
   275b0:	sub	sp, fp, #8
   275b4:	ldr	r4, [sp]
   275b8:	ldr	fp, [sp, #4]
   275bc:	add	sp, sp, #8
   275c0:	pop	{pc}		; (ldr pc, [sp], #4)
   275c4:	andeq	r0, r2, r4, ror #23
   275c8:	andeq	fp, r0, r4, lsr #25
   275cc:	andeq	lr, r0, r8, lsl #2
   275d0:	andeq	r0, r0, r8, rrx
   275d4:	andeq	lr, r0, r0, asr #1
   275d8:	andeq	fp, r0, ip, lsl #24
   275dc:	muleq	r0, r0, r0
   275e0:	andeq	lr, r0, r4, ror r0
   275e4:	andeq	lr, r0, r8, lsl #27
   275e8:	andeq	ip, r0, r8, ror r4
   275ec:	andeq	lr, r0, r8, asr r0
   275f0:	ldrdeq	sp, [r0], -ip
   275f4:	andeq	lr, r0, ip, lsr r0

000275f8 <test_nested_buffer_first@@Base>:
   275f8:	str	r4, [sp, #-12]!
   275fc:	str	fp, [sp, #4]
   27600:	str	lr, [sp, #8]
   27604:	add	fp, sp, #8
   27608:	sub	sp, sp, #28
   2760c:	str	r0, [fp, #-32]	; 0xffffffe0
   27610:	ldr	r4, [pc, #428]	; 277c4 <test_nested_buffer_first@@Base+0x1cc>
   27614:	add	r4, pc, r4
   27618:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2761c:	bl	29bf4 <flatcc_builder_reset@@Base>
   27620:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27624:	bl	1e160 <_start@@Base+0xb770>
   27628:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2762c:	bl	1ddf0 <_start@@Base+0xb400>
   27630:	ldr	r3, [pc, #400]	; 277c8 <test_nested_buffer_first@@Base+0x1d0>
   27634:	add	r3, pc, r3
   27638:	mov	r1, r3
   2763c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27640:	bl	1cb00 <_start@@Base+0xa110>
   27644:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27648:	bl	1de50 <_start@@Base+0xb460>
   2764c:	mov	r1, #10
   27650:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27654:	bl	1c834 <_start@@Base+0x9e44>
   27658:	ldr	r3, [pc, #364]	; 277cc <test_nested_buffer_first@@Base+0x1d4>
   2765c:	add	r3, pc, r3
   27660:	mov	r1, r3
   27664:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27668:	bl	1cb00 <_start@@Base+0xa110>
   2766c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27670:	bl	1e220 <_start@@Base+0xb830>
   27674:	sub	r3, fp, #28
   27678:	mov	r1, r3
   2767c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27680:	bl	2edc8 <flatcc_builder_get_direct_buffer@@Base>
   27684:	str	r0, [fp, #-16]
   27688:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2768c:	ldr	r3, [pc, #316]	; 277d0 <test_nested_buffer_first@@Base+0x1d8>
   27690:	ldr	r3, [r4, r3]
   27694:	ldr	r3, [r3]
   27698:	ldr	r1, [fp, #-16]
   2769c:	ldr	r0, [pc, #304]	; 277d4 <test_nested_buffer_first@@Base+0x1dc>
   276a0:	add	r0, pc, r0
   276a4:	bl	20e38 <_start@@Base+0xe448>
   276a8:	ldr	r0, [fp, #-16]
   276ac:	bl	15d5c <_start@@Base+0x336c>
   276b0:	str	r0, [fp, #-20]	; 0xffffffec
   276b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   276b8:	bl	16698 <_start@@Base+0x3ca8>
   276bc:	mov	r2, r0
   276c0:	ldr	r3, [pc, #272]	; 277d8 <test_nested_buffer_first@@Base+0x1e0>
   276c4:	add	r3, pc, r3
   276c8:	mov	r1, r3
   276cc:	mov	r0, r2
   276d0:	bl	128e4 <strcmp@plt>
   276d4:	mov	r3, r0
   276d8:	cmp	r3, #0
   276dc:	beq	276f8 <test_nested_buffer_first@@Base+0x100>
   276e0:	ldr	r3, [pc, #244]	; 277dc <test_nested_buffer_first@@Base+0x1e4>
   276e4:	add	r3, pc, r3
   276e8:	mov	r0, r3
   276ec:	bl	12944 <puts@plt>
   276f0:	mvn	r3, #0
   276f4:	b	277ac <test_nested_buffer_first@@Base+0x1b4>
   276f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   276fc:	bl	18384 <_start@@Base+0x5994>
   27700:	str	r0, [fp, #-24]	; 0xffffffe8
   27704:	ldr	r0, [fp, #-20]	; 0xffffffec
   27708:	bl	15fb0 <_start@@Base+0x35c0>
   2770c:	mov	r3, r0
   27710:	cmp	r3, #10
   27714:	beq	27730 <test_nested_buffer_first@@Base+0x138>
   27718:	ldr	r3, [pc, #192]	; 277e0 <test_nested_buffer_first@@Base+0x1e8>
   2771c:	add	r3, pc, r3
   27720:	mov	r0, r3
   27724:	bl	12944 <puts@plt>
   27728:	mvn	r3, #0
   2772c:	b	277ac <test_nested_buffer_first@@Base+0x1b4>
   27730:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27734:	bl	16698 <_start@@Base+0x3ca8>
   27738:	mov	r3, r0
   2773c:	cmp	r3, #0
   27740:	bne	27764 <test_nested_buffer_first@@Base+0x16c>
   27744:	ldr	r3, [pc, #152]	; 277e4 <test_nested_buffer_first@@Base+0x1ec>
   27748:	add	r3, pc, r3
   2774c:	movw	r2, #2241	; 0x8c1
   27750:	ldr	r1, [pc, #144]	; 277e8 <test_nested_buffer_first@@Base+0x1f0>
   27754:	add	r1, pc, r1
   27758:	ldr	r0, [pc, #140]	; 277ec <test_nested_buffer_first@@Base+0x1f4>
   2775c:	add	r0, pc, r0
   27760:	bl	129e0 <__assert_fail@plt>
   27764:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27768:	bl	16698 <_start@@Base+0x3ca8>
   2776c:	mov	r2, r0
   27770:	ldr	r3, [pc, #120]	; 277f0 <test_nested_buffer_first@@Base+0x1f8>
   27774:	add	r3, pc, r3
   27778:	mov	r1, r3
   2777c:	mov	r0, r2
   27780:	bl	128e4 <strcmp@plt>
   27784:	mov	r3, r0
   27788:	cmp	r3, #0
   2778c:	beq	277a8 <test_nested_buffer_first@@Base+0x1b0>
   27790:	ldr	r3, [pc, #92]	; 277f4 <test_nested_buffer_first@@Base+0x1fc>
   27794:	add	r3, pc, r3
   27798:	mov	r0, r3
   2779c:	bl	12944 <puts@plt>
   277a0:	mvn	r3, #0
   277a4:	b	277ac <test_nested_buffer_first@@Base+0x1b4>
   277a8:	mov	r3, #0
   277ac:	mov	r0, r3
   277b0:	sub	sp, fp, #8
   277b4:	ldr	r4, [sp]
   277b8:	ldr	fp, [sp, #4]
   277bc:	add	sp, sp, #8
   277c0:	pop	{pc}		; (ldr pc, [sp], #4)
   277c4:	andeq	r0, r2, r4, ror #19
   277c8:	andeq	sp, r0, ip, lsl pc
   277cc:	andeq	fp, r0, r4, ror sl
   277d0:	andeq	r0, r0, r8, rrx
   277d4:	andeq	sp, r0, r0, asr #29
   277d8:	andeq	fp, r0, ip, lsl #20
   277dc:	muleq	r0, r0, lr
   277e0:	andeq	sp, r0, r4, ror lr
   277e4:	andeq	lr, r0, r8, asr #23
   277e8:	andeq	ip, r0, r8, ror r2
   277ec:	andeq	sp, r0, r8, asr lr
   277f0:	ldrdeq	sp, [r0], -ip
   277f4:	andeq	sp, r0, ip, lsr lr

000277f8 <test_nested_buffer_using_nest@@Base>:
   277f8:	str	r4, [sp, #-12]!
   277fc:	str	fp, [sp, #4]
   27800:	str	lr, [sp, #8]
   27804:	add	fp, sp, #8
   27808:	sub	sp, sp, #1056	; 0x420
   2780c:	sub	sp, sp, #4
   27810:	str	r0, [fp, #-1064]	; 0xfffffbd8
   27814:	ldr	r4, [pc, #596]	; 27a70 <test_nested_buffer_using_nest@@Base+0x278>
   27818:	add	r4, pc, r4
   2781c:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   27820:	bl	29bf4 <flatcc_builder_reset@@Base>
   27824:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   27828:	bl	1e160 <_start@@Base+0xb770>
   2782c:	ldr	r3, [pc, #576]	; 27a74 <test_nested_buffer_using_nest@@Base+0x27c>
   27830:	add	r3, pc, r3
   27834:	mov	r1, r3
   27838:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   2783c:	bl	1cb00 <_start@@Base+0xa110>
   27840:	mov	r1, #42	; 0x2a
   27844:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   27848:	bl	1c928 <_start@@Base+0x9f38>
   2784c:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   27850:	bl	1e220 <_start@@Base+0xb830>
   27854:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   27858:	bl	2ebf0 <flatcc_builder_get_buffer_size@@Base>
   2785c:	str	r0, [fp, #-16]
   27860:	sub	r3, fp, #1040	; 0x410
   27864:	sub	r3, r3, #12
   27868:	mov	r2, #1024	; 0x400
   2786c:	mov	r1, r3
   27870:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   27874:	bl	2ee3c <flatcc_builder_copy_buffer@@Base>
   27878:	mov	r3, r0
   2787c:	cmp	r3, #0
   27880:	bne	2789c <test_nested_buffer_using_nest@@Base+0xa4>
   27884:	ldr	r3, [pc, #492]	; 27a78 <test_nested_buffer_using_nest@@Base+0x280>
   27888:	add	r3, pc, r3
   2788c:	mov	r0, r3
   27890:	bl	12944 <puts@plt>
   27894:	mvn	r3, #0
   27898:	b	27a58 <test_nested_buffer_using_nest@@Base+0x260>
   2789c:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   278a0:	bl	29bf4 <flatcc_builder_reset@@Base>
   278a4:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   278a8:	bl	1e160 <_start@@Base+0xb770>
   278ac:	sub	r1, fp, #1040	; 0x410
   278b0:	sub	r1, r1, #12
   278b4:	mov	r3, #0
   278b8:	ldr	r2, [fp, #-16]
   278bc:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   278c0:	bl	1dea4 <_start@@Base+0xb4b4>
   278c4:	mov	r1, #10
   278c8:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   278cc:	bl	1c834 <_start@@Base+0x9e44>
   278d0:	ldr	r3, [pc, #420]	; 27a7c <test_nested_buffer_using_nest@@Base+0x284>
   278d4:	add	r3, pc, r3
   278d8:	mov	r1, r3
   278dc:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   278e0:	bl	1cb00 <_start@@Base+0xa110>
   278e4:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   278e8:	bl	1e220 <_start@@Base+0xb830>
   278ec:	sub	r3, fp, #1040	; 0x410
   278f0:	sub	r3, r3, #12
   278f4:	sub	r3, r3, #4
   278f8:	mov	r1, r3
   278fc:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   27900:	bl	2edc8 <flatcc_builder_get_direct_buffer@@Base>
   27904:	str	r0, [fp, #-20]	; 0xffffffec
   27908:	ldr	r2, [fp, #-1056]	; 0xfffffbe0
   2790c:	ldr	r3, [pc, #364]	; 27a80 <test_nested_buffer_using_nest@@Base+0x288>
   27910:	ldr	r3, [r4, r3]
   27914:	ldr	r3, [r3]
   27918:	ldr	r1, [fp, #-20]	; 0xffffffec
   2791c:	ldr	r0, [pc, #352]	; 27a84 <test_nested_buffer_using_nest@@Base+0x28c>
   27920:	add	r0, pc, r0
   27924:	bl	20e38 <_start@@Base+0xe448>
   27928:	ldr	r0, [fp, #-20]	; 0xffffffec
   2792c:	bl	15d5c <_start@@Base+0x336c>
   27930:	str	r0, [fp, #-24]	; 0xffffffe8
   27934:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27938:	bl	16698 <_start@@Base+0x3ca8>
   2793c:	mov	r2, r0
   27940:	ldr	r3, [pc, #320]	; 27a88 <test_nested_buffer_using_nest@@Base+0x290>
   27944:	add	r3, pc, r3
   27948:	mov	r1, r3
   2794c:	mov	r0, r2
   27950:	bl	128e4 <strcmp@plt>
   27954:	mov	r3, r0
   27958:	cmp	r3, #0
   2795c:	beq	27978 <test_nested_buffer_using_nest@@Base+0x180>
   27960:	ldr	r3, [pc, #292]	; 27a8c <test_nested_buffer_using_nest@@Base+0x294>
   27964:	add	r3, pc, r3
   27968:	mov	r0, r3
   2796c:	bl	12944 <puts@plt>
   27970:	mvn	r3, #0
   27974:	b	27a58 <test_nested_buffer_using_nest@@Base+0x260>
   27978:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2797c:	bl	18384 <_start@@Base+0x5994>
   27980:	str	r0, [fp, #-28]	; 0xffffffe4
   27984:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27988:	bl	15fb0 <_start@@Base+0x35c0>
   2798c:	mov	r3, r0
   27990:	cmp	r3, #10
   27994:	beq	279b0 <test_nested_buffer_using_nest@@Base+0x1b8>
   27998:	ldr	r3, [pc, #240]	; 27a90 <test_nested_buffer_using_nest@@Base+0x298>
   2799c:	add	r3, pc, r3
   279a0:	mov	r0, r3
   279a4:	bl	12944 <puts@plt>
   279a8:	mvn	r3, #0
   279ac:	b	27a58 <test_nested_buffer_using_nest@@Base+0x260>
   279b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   279b4:	bl	16698 <_start@@Base+0x3ca8>
   279b8:	mov	r3, r0
   279bc:	cmp	r3, #0
   279c0:	bne	279e4 <test_nested_buffer_using_nest@@Base+0x1ec>
   279c4:	ldr	r3, [pc, #200]	; 27a94 <test_nested_buffer_using_nest@@Base+0x29c>
   279c8:	add	r3, pc, r3
   279cc:	movw	r2, #2298	; 0x8fa
   279d0:	ldr	r1, [pc, #192]	; 27a98 <test_nested_buffer_using_nest@@Base+0x2a0>
   279d4:	add	r1, pc, r1
   279d8:	ldr	r0, [pc, #188]	; 27a9c <test_nested_buffer_using_nest@@Base+0x2a4>
   279dc:	add	r0, pc, r0
   279e0:	bl	129e0 <__assert_fail@plt>
   279e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   279e8:	bl	16698 <_start@@Base+0x3ca8>
   279ec:	mov	r2, r0
   279f0:	ldr	r3, [pc, #168]	; 27aa0 <test_nested_buffer_using_nest@@Base+0x2a8>
   279f4:	add	r3, pc, r3
   279f8:	mov	r1, r3
   279fc:	mov	r0, r2
   27a00:	bl	128e4 <strcmp@plt>
   27a04:	mov	r3, r0
   27a08:	cmp	r3, #0
   27a0c:	beq	27a28 <test_nested_buffer_using_nest@@Base+0x230>
   27a10:	ldr	r3, [pc, #140]	; 27aa4 <test_nested_buffer_using_nest@@Base+0x2ac>
   27a14:	add	r3, pc, r3
   27a18:	mov	r0, r3
   27a1c:	bl	12944 <puts@plt>
   27a20:	mvn	r3, #0
   27a24:	b	27a58 <test_nested_buffer_using_nest@@Base+0x260>
   27a28:	ldr	r0, [fp, #-28]	; 0xffffffe4
   27a2c:	bl	164b0 <_start@@Base+0x3ac0>
   27a30:	mov	r3, r0
   27a34:	cmp	r3, #42	; 0x2a
   27a38:	beq	27a54 <test_nested_buffer_using_nest@@Base+0x25c>
   27a3c:	ldr	r3, [pc, #100]	; 27aa8 <test_nested_buffer_using_nest@@Base+0x2b0>
   27a40:	add	r3, pc, r3
   27a44:	mov	r0, r3
   27a48:	bl	12944 <puts@plt>
   27a4c:	mvn	r3, #0
   27a50:	b	27a58 <test_nested_buffer_using_nest@@Base+0x260>
   27a54:	mov	r3, #0
   27a58:	mov	r0, r3
   27a5c:	sub	sp, fp, #8
   27a60:	ldr	r4, [sp]
   27a64:	ldr	fp, [sp, #4]
   27a68:	add	sp, sp, #8
   27a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   27a70:	andeq	r0, r2, r0, ror #15
   27a74:	andeq	sp, r0, r0, lsr #26
   27a78:	andeq	sp, r0, r8, ror #26
   27a7c:	strdeq	fp, [r0], -ip
   27a80:	andeq	r0, r0, r8, rrx
   27a84:	andeq	sp, r0, ip, ror #25
   27a88:	andeq	fp, r0, ip, lsl #15
   27a8c:	andeq	sp, r0, r0, lsl ip
   27a90:	strdeq	sp, [r0], -r4
   27a94:	andeq	lr, r0, r4, ror #18
   27a98:	strdeq	fp, [r0], -r8
   27a9c:	ldrdeq	sp, [r0], -r8
   27aa0:	andeq	sp, r0, ip, asr fp
   27aa4:			; <UNDEFINED> instruction: 0x0000dbbc
   27aa8:	strdeq	sp, [r0], -r0

00027aac <verify_include@@Base>:
   27aac:	push	{fp}		; (str fp, [sp, #-4]!)
   27ab0:	add	fp, sp, #0
   27ab4:	sub	sp, sp, #12
   27ab8:	str	r0, [fp, #-8]
   27abc:	mov	r3, #0
   27ac0:	mov	r0, r3
   27ac4:	add	sp, fp, #0
   27ac8:	pop	{fp}		; (ldr fp, [sp], #4)
   27acc:	bx	lr

00027ad0 <test_struct_buffer@@Base>:
   27ad0:	str	r4, [sp, #-12]!
   27ad4:	str	fp, [sp, #4]
   27ad8:	str	lr, [sp, #8]
   27adc:	add	fp, sp, #8
   27ae0:	sub	sp, sp, #124	; 0x7c
   27ae4:	str	r0, [fp, #-128]	; 0xffffff80
   27ae8:	ldr	r4, [pc, #716]	; 27dbc <test_struct_buffer@@Base+0x2ec>
   27aec:	add	r4, pc, r4
   27af0:	ldr	r0, [fp, #-128]	; 0xffffff80
   27af4:	bl	29bf4 <flatcc_builder_reset@@Base>
   27af8:	mvn	r3, #16
   27afc:	movw	r2, #2730	; 0xaaa
   27b00:	mov	r1, #8
   27b04:	vldr	d2, [pc, #668]	; 27da8 <test_struct_buffer@@Base+0x2d8>
   27b08:	vldr	s2, [pc, #672]	; 27db0 <test_struct_buffer@@Base+0x2e0>
   27b0c:	vldr	s1, [pc, #672]	; 27db4 <test_struct_buffer@@Base+0x2e4>
   27b10:	vldr	s0, [pc, #672]	; 27db8 <test_struct_buffer@@Base+0x2e8>
   27b14:	ldr	r0, [fp, #-128]	; 0xffffff80
   27b18:	bl	1b294 <_start@@Base+0x88a4>
   27b1c:	ldr	r0, [fp, #-128]	; 0xffffff80
   27b20:	bl	2ebf0 <flatcc_builder_get_buffer_size@@Base>
   27b24:	str	r0, [fp, #-16]
   27b28:	ldr	r3, [fp, #-16]
   27b2c:	cmp	r3, #48	; 0x30
   27b30:	beq	27b54 <test_struct_buffer@@Base+0x84>
   27b34:	ldr	r3, [pc, #644]	; 27dc0 <test_struct_buffer@@Base+0x2f0>
   27b38:	add	r3, pc, r3
   27b3c:	movw	r2, #2339	; 0x923
   27b40:	ldr	r1, [pc, #636]	; 27dc4 <test_struct_buffer@@Base+0x2f4>
   27b44:	add	r1, pc, r1
   27b48:	ldr	r0, [pc, #632]	; 27dc8 <test_struct_buffer@@Base+0x2f8>
   27b4c:	add	r0, pc, r0
   27b50:	bl	129e0 <__assert_fail@plt>
   27b54:	ldr	r3, [fp, #-16]
   27b58:	mov	r1, r3
   27b5c:	ldr	r3, [pc, #616]	; 27dcc <test_struct_buffer@@Base+0x2fc>
   27b60:	add	r3, pc, r3
   27b64:	mov	r0, r3
   27b68:	bl	128f0 <printf@plt>
   27b6c:	ldr	r0, [fp, #-128]	; 0xffffff80
   27b70:	bl	2f154 <flatcc_builder_get_emit_context@@Base>
   27b74:	mov	r3, r0
   27b78:	mov	r0, r3
   27b7c:	bl	1a2cc <_start@@Base+0x78dc>
   27b80:	mov	r2, r0
   27b84:	ldr	r3, [fp, #-16]
   27b88:	cmp	r3, r2
   27b8c:	beq	27bb0 <test_struct_buffer@@Base+0xe0>
   27b90:	ldr	r3, [pc, #568]	; 27dd0 <test_struct_buffer@@Base+0x300>
   27b94:	add	r3, pc, r3
   27b98:	movw	r2, #2341	; 0x925
   27b9c:	ldr	r1, [pc, #560]	; 27dd4 <test_struct_buffer@@Base+0x304>
   27ba0:	add	r1, pc, r1
   27ba4:	ldr	r0, [pc, #556]	; 27dd8 <test_struct_buffer@@Base+0x308>
   27ba8:	add	r0, pc, r0
   27bac:	bl	129e0 <__assert_fail@plt>
   27bb0:	sub	r3, fp, #124	; 0x7c
   27bb4:	mov	r2, #100	; 0x64
   27bb8:	mov	r1, r3
   27bbc:	ldr	r0, [fp, #-128]	; 0xffffff80
   27bc0:	bl	2ee3c <flatcc_builder_copy_buffer@@Base>
   27bc4:	mov	r3, r0
   27bc8:	cmp	r3, #0
   27bcc:	bne	27be8 <test_struct_buffer@@Base+0x118>
   27bd0:	ldr	r3, [pc, #516]	; 27ddc <test_struct_buffer@@Base+0x30c>
   27bd4:	add	r3, pc, r3
   27bd8:	mov	r0, r3
   27bdc:	bl	12944 <puts@plt>
   27be0:	mvn	r3, #0
   27be4:	b	27d8c <test_struct_buffer@@Base+0x2bc>
   27be8:	ldr	r3, [pc, #496]	; 27de0 <test_struct_buffer@@Base+0x310>
   27bec:	ldr	r3, [r4, r3]
   27bf0:	ldr	r3, [r3]
   27bf4:	sub	r1, fp, #124	; 0x7c
   27bf8:	ldr	r2, [fp, #-16]
   27bfc:	ldr	r0, [pc, #480]	; 27de4 <test_struct_buffer@@Base+0x314>
   27c00:	add	r0, pc, r0
   27c04:	bl	20e38 <_start@@Base+0xe448>
   27c08:	sub	r3, fp, #124	; 0x7c
   27c0c:	ldr	r2, [pc, #468]	; 27de8 <test_struct_buffer@@Base+0x318>
   27c10:	add	r2, pc, r2
   27c14:	mov	r1, r2
   27c18:	mov	r0, r3
   27c1c:	bl	147a4 <_start@@Base+0x1db4>
   27c20:	mov	r3, r0
   27c24:	cmp	r3, #0
   27c28:	bne	27c44 <test_struct_buffer@@Base+0x174>
   27c2c:	ldr	r3, [pc, #440]	; 27dec <test_struct_buffer@@Base+0x31c>
   27c30:	add	r3, pc, r3
   27c34:	mov	r0, r3
   27c38:	bl	12944 <puts@plt>
   27c3c:	mvn	r3, #0
   27c40:	b	27d8c <test_struct_buffer@@Base+0x2bc>
   27c44:	sub	r3, fp, #124	; 0x7c
   27c48:	ldr	r2, [pc, #416]	; 27df0 <test_struct_buffer@@Base+0x320>
   27c4c:	add	r2, pc, r2
   27c50:	mov	r1, r2
   27c54:	mov	r0, r3
   27c58:	bl	147a4 <_start@@Base+0x1db4>
   27c5c:	mov	r3, r0
   27c60:	cmp	r3, #0
   27c64:	beq	27c80 <test_struct_buffer@@Base+0x1b0>
   27c68:	ldr	r3, [pc, #388]	; 27df4 <test_struct_buffer@@Base+0x324>
   27c6c:	add	r3, pc, r3
   27c70:	mov	r0, r3
   27c74:	bl	12944 <puts@plt>
   27c78:	mvn	r3, #0
   27c7c:	b	27d8c <test_struct_buffer@@Base+0x2bc>
   27c80:	sub	r3, fp, #124	; 0x7c
   27c84:	ldr	r2, [pc, #364]	; 27df8 <test_struct_buffer@@Base+0x328>
   27c88:	add	r2, pc, r2
   27c8c:	mov	r1, r2
   27c90:	mov	r0, r3
   27c94:	bl	147a4 <_start@@Base+0x1db4>
   27c98:	mov	r3, r0
   27c9c:	cmp	r3, #0
   27ca0:	bne	27cbc <test_struct_buffer@@Base+0x1ec>
   27ca4:	ldr	r3, [pc, #336]	; 27dfc <test_struct_buffer@@Base+0x32c>
   27ca8:	add	r3, pc, r3
   27cac:	mov	r0, r3
   27cb0:	bl	12944 <puts@plt>
   27cb4:	mvn	r3, #0
   27cb8:	b	27d8c <test_struct_buffer@@Base+0x2bc>
   27cbc:	sub	r3, fp, #124	; 0x7c
   27cc0:	mov	r0, r3
   27cc4:	bl	14d74 <_start@@Base+0x2384>
   27cc8:	str	r0, [fp, #-20]	; 0xffffffec
   27ccc:	ldr	r3, [fp, #-20]	; 0xffffffec
   27cd0:	str	r3, [fp, #-24]	; 0xffffffe8
   27cd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27cd8:	bl	1b110 <_start@@Base+0x8720>
   27cdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27ce0:	vldr	s15, [r3]
   27ce4:	vldr	s14, [pc, #204]	; 27db8 <test_struct_buffer@@Base+0x2e8>
   27ce8:	vcmp.f32	s15, s14
   27cec:	vmrs	APSR_nzcv, fpscr
   27cf0:	bne	27d70 <test_struct_buffer@@Base+0x2a0>
   27cf4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27cf8:	vldr	s15, [r3, #4]
   27cfc:	vldr	s14, [pc, #176]	; 27db4 <test_struct_buffer@@Base+0x2e4>
   27d00:	vcmp.f32	s15, s14
   27d04:	vmrs	APSR_nzcv, fpscr
   27d08:	bne	27d70 <test_struct_buffer@@Base+0x2a0>
   27d0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27d10:	vldr	s15, [r3, #8]
   27d14:	vldr	s14, [pc, #148]	; 27db0 <test_struct_buffer@@Base+0x2e0>
   27d18:	vcmp.f32	s15, s14
   27d1c:	vmrs	APSR_nzcv, fpscr
   27d20:	bne	27d70 <test_struct_buffer@@Base+0x2a0>
   27d24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27d28:	vldr	d7, [r3, #16]
   27d2c:	vldr	d6, [pc, #116]	; 27da8 <test_struct_buffer@@Base+0x2d8>
   27d30:	vcmp.f64	d7, d6
   27d34:	vmrs	APSR_nzcv, fpscr
   27d38:	bne	27d70 <test_struct_buffer@@Base+0x2a0>
   27d3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27d40:	ldrsb	r3, [r3, #24]
   27d44:	cmp	r3, #8
   27d48:	bne	27d70 <test_struct_buffer@@Base+0x2a0>
   27d4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27d50:	ldrsh	r3, [r3, #26]
   27d54:	movw	r2, #2730	; 0xaaa
   27d58:	cmp	r3, r2
   27d5c:	bne	27d70 <test_struct_buffer@@Base+0x2a0>
   27d60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27d64:	ldrsb	r3, [r3, #28]
   27d68:	cmn	r3, #17
   27d6c:	beq	27d88 <test_struct_buffer@@Base+0x2b8>
   27d70:	ldr	r3, [pc, #136]	; 27e00 <test_struct_buffer@@Base+0x330>
   27d74:	add	r3, pc, r3
   27d78:	mov	r0, r3
   27d7c:	bl	12944 <puts@plt>
   27d80:	mvn	r3, #0
   27d84:	b	27d8c <test_struct_buffer@@Base+0x2bc>
   27d88:	mov	r3, #0
   27d8c:	mov	r0, r3
   27d90:	sub	sp, fp, #8
   27d94:	ldr	r4, [sp]
   27d98:	ldr	fp, [sp, #4]
   27d9c:	add	sp, sp, #8
   27da0:	pop	{pc}		; (ldr pc, [sp], #4)
   27da4:	nop	{0}
   27da8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   27dac:	andsmi	ip, r0, ip, asr #25
   27db0:	submi	r0, r0, r0
   27db4:	andmi	r0, r0, r0
   27db8:	svccc	0x00800000
   27dbc:	andeq	r0, r2, ip, lsl #10
   27dc0:	andeq	lr, r0, r4, lsl r8
   27dc4:	andeq	fp, r0, r8, lsl #29
   27dc8:	andeq	sp, r0, r8, lsl #22
   27dcc:	andeq	sp, r0, r0, lsl #22
   27dd0:			; <UNDEFINED> instruction: 0x0000e7b8
   27dd4:	andeq	fp, r0, ip, lsr #28
   27dd8:	ldrdeq	sp, [r0], -r8
   27ddc:	strdeq	sp, [r0], -r8
   27de0:	andeq	r0, r0, r8, rrx
   27de4:	ldrdeq	sp, [r0], -r8
   27de8:	andeq	sl, r0, r4, ror #20
   27dec:			; <UNDEFINED> instruction: 0x0000dabc
   27df0:	andeq	sp, r0, r4, asr #21
   27df4:	andeq	sp, r0, ip, lsr #21
   27df8:	andeq	sl, r0, ip, ror #19
   27dfc:	muleq	r0, ip, sl
   27e00:	strdeq	sp, [r0], -r4

00027e04 <test_typed_struct_buffer@@Base>:
   27e04:	str	r4, [sp, #-12]!
   27e08:	str	fp, [sp, #4]
   27e0c:	str	lr, [sp, #8]
   27e10:	add	fp, sp, #8
   27e14:	sub	sp, sp, #124	; 0x7c
   27e18:	str	r0, [fp, #-128]	; 0xffffff80
   27e1c:	ldr	r4, [pc, #920]	; 281bc <test_typed_struct_buffer@@Base+0x3b8>
   27e20:	add	r4, pc, r4
   27e24:	ldr	r0, [fp, #-128]	; 0xffffff80
   27e28:	bl	29bf4 <flatcc_builder_reset@@Base>
   27e2c:	mvn	r3, #16
   27e30:	movw	r2, #2730	; 0xaaa
   27e34:	mov	r1, #8
   27e38:	vldr	d2, [pc, #872]	; 281a8 <test_typed_struct_buffer@@Base+0x3a4>
   27e3c:	vldr	s2, [pc, #876]	; 281b0 <test_typed_struct_buffer@@Base+0x3ac>
   27e40:	vldr	s1, [pc, #876]	; 281b4 <test_typed_struct_buffer@@Base+0x3b0>
   27e44:	vldr	s0, [pc, #876]	; 281b8 <test_typed_struct_buffer@@Base+0x3b4>
   27e48:	ldr	r0, [fp, #-128]	; 0xffffff80
   27e4c:	bl	1b348 <_start@@Base+0x8958>
   27e50:	ldr	r0, [fp, #-128]	; 0xffffff80
   27e54:	bl	2ebf0 <flatcc_builder_get_buffer_size@@Base>
   27e58:	str	r0, [fp, #-16]
   27e5c:	ldr	r3, [fp, #-16]
   27e60:	cmp	r3, #48	; 0x30
   27e64:	beq	27e88 <test_typed_struct_buffer@@Base+0x84>
   27e68:	ldr	r3, [pc, #848]	; 281c0 <test_typed_struct_buffer@@Base+0x3bc>
   27e6c:	add	r3, pc, r3
   27e70:	movw	r2, #2388	; 0x954
   27e74:	ldr	r1, [pc, #840]	; 281c4 <test_typed_struct_buffer@@Base+0x3c0>
   27e78:	add	r1, pc, r1
   27e7c:	ldr	r0, [pc, #836]	; 281c8 <test_typed_struct_buffer@@Base+0x3c4>
   27e80:	add	r0, pc, r0
   27e84:	bl	129e0 <__assert_fail@plt>
   27e88:	ldr	r3, [fp, #-16]
   27e8c:	mov	r1, r3
   27e90:	ldr	r3, [pc, #820]	; 281cc <test_typed_struct_buffer@@Base+0x3c8>
   27e94:	add	r3, pc, r3
   27e98:	mov	r0, r3
   27e9c:	bl	128f0 <printf@plt>
   27ea0:	ldr	r0, [fp, #-128]	; 0xffffff80
   27ea4:	bl	2f154 <flatcc_builder_get_emit_context@@Base>
   27ea8:	mov	r3, r0
   27eac:	mov	r0, r3
   27eb0:	bl	1a2cc <_start@@Base+0x78dc>
   27eb4:	mov	r2, r0
   27eb8:	ldr	r3, [fp, #-16]
   27ebc:	cmp	r3, r2
   27ec0:	beq	27ee4 <test_typed_struct_buffer@@Base+0xe0>
   27ec4:	ldr	r3, [pc, #772]	; 281d0 <test_typed_struct_buffer@@Base+0x3cc>
   27ec8:	add	r3, pc, r3
   27ecc:	movw	r2, #2390	; 0x956
   27ed0:	ldr	r1, [pc, #764]	; 281d4 <test_typed_struct_buffer@@Base+0x3d0>
   27ed4:	add	r1, pc, r1
   27ed8:	ldr	r0, [pc, #760]	; 281d8 <test_typed_struct_buffer@@Base+0x3d4>
   27edc:	add	r0, pc, r0
   27ee0:	bl	129e0 <__assert_fail@plt>
   27ee4:	sub	r3, fp, #124	; 0x7c
   27ee8:	mov	r2, #100	; 0x64
   27eec:	mov	r1, r3
   27ef0:	ldr	r0, [fp, #-128]	; 0xffffff80
   27ef4:	bl	2ee3c <flatcc_builder_copy_buffer@@Base>
   27ef8:	mov	r3, r0
   27efc:	cmp	r3, #0
   27f00:	bne	27f1c <test_typed_struct_buffer@@Base+0x118>
   27f04:	ldr	r3, [pc, #720]	; 281dc <test_typed_struct_buffer@@Base+0x3d8>
   27f08:	add	r3, pc, r3
   27f0c:	mov	r0, r3
   27f10:	bl	12944 <puts@plt>
   27f14:	mvn	r3, #0
   27f18:	b	2818c <test_typed_struct_buffer@@Base+0x388>
   27f1c:	ldr	r3, [pc, #700]	; 281e0 <test_typed_struct_buffer@@Base+0x3dc>
   27f20:	ldr	r3, [r4, r3]
   27f24:	ldr	r3, [r3]
   27f28:	sub	r1, fp, #124	; 0x7c
   27f2c:	ldr	r2, [fp, #-16]
   27f30:	ldr	r0, [pc, #684]	; 281e4 <test_typed_struct_buffer@@Base+0x3e0>
   27f34:	add	r0, pc, r0
   27f38:	bl	20e38 <_start@@Base+0xe448>
   27f3c:	sub	r3, fp, #124	; 0x7c
   27f40:	ldr	r2, [pc, #672]	; 281e8 <test_typed_struct_buffer@@Base+0x3e4>
   27f44:	add	r2, pc, r2
   27f48:	mov	r1, r2
   27f4c:	mov	r0, r3
   27f50:	bl	147a4 <_start@@Base+0x1db4>
   27f54:	mov	r3, r0
   27f58:	cmp	r3, #0
   27f5c:	bne	27f78 <test_typed_struct_buffer@@Base+0x174>
   27f60:	ldr	r3, [pc, #644]	; 281ec <test_typed_struct_buffer@@Base+0x3e8>
   27f64:	add	r3, pc, r3
   27f68:	mov	r0, r3
   27f6c:	bl	12944 <puts@plt>
   27f70:	mvn	r3, #0
   27f74:	b	2818c <test_typed_struct_buffer@@Base+0x388>
   27f78:	sub	r3, fp, #124	; 0x7c
   27f7c:	ldr	r2, [pc, #620]	; 281f0 <test_typed_struct_buffer@@Base+0x3ec>
   27f80:	add	r2, pc, r2
   27f84:	mov	r1, r2
   27f88:	mov	r0, r3
   27f8c:	bl	147a4 <_start@@Base+0x1db4>
   27f90:	mov	r3, r0
   27f94:	cmp	r3, #0
   27f98:	beq	27fb4 <test_typed_struct_buffer@@Base+0x1b0>
   27f9c:	ldr	r3, [pc, #592]	; 281f4 <test_typed_struct_buffer@@Base+0x3f0>
   27fa0:	add	r3, pc, r3
   27fa4:	mov	r0, r3
   27fa8:	bl	12944 <puts@plt>
   27fac:	mvn	r3, #0
   27fb0:	b	2818c <test_typed_struct_buffer@@Base+0x388>
   27fb4:	sub	r3, fp, #124	; 0x7c
   27fb8:	ldr	r2, [pc, #568]	; 281f8 <test_typed_struct_buffer@@Base+0x3f4>
   27fbc:	add	r2, pc, r2
   27fc0:	mov	r1, r2
   27fc4:	mov	r0, r3
   27fc8:	bl	147a4 <_start@@Base+0x1db4>
   27fcc:	mov	r3, r0
   27fd0:	cmp	r3, #0
   27fd4:	bne	27ff0 <test_typed_struct_buffer@@Base+0x1ec>
   27fd8:	ldr	r3, [pc, #540]	; 281fc <test_typed_struct_buffer@@Base+0x3f8>
   27fdc:	add	r3, pc, r3
   27fe0:	mov	r0, r3
   27fe4:	bl	12944 <puts@plt>
   27fe8:	mvn	r3, #0
   27fec:	b	2818c <test_typed_struct_buffer@@Base+0x388>
   27ff0:	sub	r3, fp, #124	; 0x7c
   27ff4:	movw	r1, #16082	; 0x3ed2
   27ff8:	movt	r1, #43253	; 0xa8f5
   27ffc:	mov	r0, r3
   28000:	bl	14d08 <_start@@Base+0x2318>
   28004:	mov	r3, r0
   28008:	cmp	r3, #0
   2800c:	bne	28028 <test_typed_struct_buffer@@Base+0x224>
   28010:	ldr	r3, [pc, #488]	; 28200 <test_typed_struct_buffer@@Base+0x3fc>
   28014:	add	r3, pc, r3
   28018:	mov	r0, r3
   2801c:	bl	12944 <puts@plt>
   28020:	mvn	r3, #0
   28024:	b	2818c <test_typed_struct_buffer@@Base+0x388>
   28028:	sub	r3, fp, #124	; 0x7c
   2802c:	movw	r2, #16082	; 0x3ed2
   28030:	movt	r2, #43253	; 0xa8f5
   28034:	ldr	r1, [fp, #-16]
   28038:	mov	r0, r3
   2803c:	bl	1f7b4 <_start@@Base+0xcdc4>
   28040:	mov	r3, r0
   28044:	cmp	r3, #0
   28048:	beq	28064 <test_typed_struct_buffer@@Base+0x260>
   2804c:	ldr	r3, [pc, #432]	; 28204 <test_typed_struct_buffer@@Base+0x400>
   28050:	add	r3, pc, r3
   28054:	mov	r0, r3
   28058:	bl	12944 <puts@plt>
   2805c:	mvn	r3, #0
   28060:	b	2818c <test_typed_struct_buffer@@Base+0x388>
   28064:	sub	r3, fp, #124	; 0x7c
   28068:	mov	r0, r3
   2806c:	bl	14dec <_start@@Base+0x23fc>
   28070:	str	r0, [fp, #-20]	; 0xffffffec
   28074:	ldr	r3, [fp, #-20]	; 0xffffffec
   28078:	cmp	r3, #0
   2807c:	bne	28098 <test_typed_struct_buffer@@Base+0x294>
   28080:	ldr	r3, [pc, #384]	; 28208 <test_typed_struct_buffer@@Base+0x404>
   28084:	add	r3, pc, r3
   28088:	mov	r0, r3
   2808c:	bl	12944 <puts@plt>
   28090:	mvn	r3, #0
   28094:	b	2818c <test_typed_struct_buffer@@Base+0x388>
   28098:	sub	r3, fp, #124	; 0x7c
   2809c:	ldr	r1, [fp, #-16]
   280a0:	mov	r0, r3
   280a4:	bl	1f764 <_start@@Base+0xcd74>
   280a8:	mov	r3, r0
   280ac:	cmp	r3, #0
   280b0:	beq	280cc <test_typed_struct_buffer@@Base+0x2c8>
   280b4:	ldr	r3, [pc, #336]	; 2820c <test_typed_struct_buffer@@Base+0x408>
   280b8:	add	r3, pc, r3
   280bc:	mov	r0, r3
   280c0:	bl	12944 <puts@plt>
   280c4:	mvn	r3, #0
   280c8:	b	2818c <test_typed_struct_buffer@@Base+0x388>
   280cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   280d0:	str	r3, [fp, #-24]	; 0xffffffe8
   280d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   280d8:	bl	1b110 <_start@@Base+0x8720>
   280dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   280e0:	vldr	s15, [r3]
   280e4:	vldr	s14, [pc, #204]	; 281b8 <test_typed_struct_buffer@@Base+0x3b4>
   280e8:	vcmp.f32	s15, s14
   280ec:	vmrs	APSR_nzcv, fpscr
   280f0:	bne	28170 <test_typed_struct_buffer@@Base+0x36c>
   280f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   280f8:	vldr	s15, [r3, #4]
   280fc:	vldr	s14, [pc, #176]	; 281b4 <test_typed_struct_buffer@@Base+0x3b0>
   28100:	vcmp.f32	s15, s14
   28104:	vmrs	APSR_nzcv, fpscr
   28108:	bne	28170 <test_typed_struct_buffer@@Base+0x36c>
   2810c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28110:	vldr	s15, [r3, #8]
   28114:	vldr	s14, [pc, #148]	; 281b0 <test_typed_struct_buffer@@Base+0x3ac>
   28118:	vcmp.f32	s15, s14
   2811c:	vmrs	APSR_nzcv, fpscr
   28120:	bne	28170 <test_typed_struct_buffer@@Base+0x36c>
   28124:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28128:	vldr	d7, [r3, #16]
   2812c:	vldr	d6, [pc, #116]	; 281a8 <test_typed_struct_buffer@@Base+0x3a4>
   28130:	vcmp.f64	d7, d6
   28134:	vmrs	APSR_nzcv, fpscr
   28138:	bne	28170 <test_typed_struct_buffer@@Base+0x36c>
   2813c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28140:	ldrsb	r3, [r3, #24]
   28144:	cmp	r3, #8
   28148:	bne	28170 <test_typed_struct_buffer@@Base+0x36c>
   2814c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28150:	ldrsh	r3, [r3, #26]
   28154:	movw	r2, #2730	; 0xaaa
   28158:	cmp	r3, r2
   2815c:	bne	28170 <test_typed_struct_buffer@@Base+0x36c>
   28160:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28164:	ldrsb	r3, [r3, #28]
   28168:	cmn	r3, #17
   2816c:	beq	28188 <test_typed_struct_buffer@@Base+0x384>
   28170:	ldr	r3, [pc, #152]	; 28210 <test_typed_struct_buffer@@Base+0x40c>
   28174:	add	r3, pc, r3
   28178:	mov	r0, r3
   2817c:	bl	12944 <puts@plt>
   28180:	mvn	r3, #0
   28184:	b	2818c <test_typed_struct_buffer@@Base+0x388>
   28188:	mov	r3, #0
   2818c:	mov	r0, r3
   28190:	sub	sp, fp, #8
   28194:	ldr	r4, [sp]
   28198:	ldr	fp, [sp, #4]
   2819c:	add	sp, sp, #8
   281a0:	pop	{pc}		; (ldr pc, [sp], #4)
   281a4:	nop	{0}
   281a8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   281ac:	andsmi	ip, r0, ip, asr #25
   281b0:	submi	r0, r0, r0
   281b4:	andmi	r0, r0, r0
   281b8:	svccc	0x00800000
   281bc:	ldrdeq	r0, [r2], -r8
   281c0:	strdeq	lr, [r0], -r4
   281c4:	andeq	fp, r0, r4, asr fp
   281c8:	ldrdeq	sp, [r0], -r4
   281cc:	andeq	sp, r0, ip, asr #15
   281d0:	muleq	r0, r8, r4
   281d4:	strdeq	fp, [r0], -r8
   281d8:	andeq	sp, r0, r4, lsr #15
   281dc:	andeq	sp, r0, r4, asr #15
   281e0:	andeq	r0, r0, r8, rrx
   281e4:	andeq	sp, r0, ip, asr #16
   281e8:	andeq	sl, r0, ip, lsl #16
   281ec:	andeq	sp, r0, r8, lsl #15
   281f0:	muleq	r0, r0, r7
   281f4:	andeq	sp, r0, r8, ror r7
   281f8:	muleq	r0, r4, r7
   281fc:	andeq	sp, r0, r8, ror #14
   28200:	andeq	sp, r0, r8, lsl #15
   28204:	andeq	sp, r0, r4, ror r7
   28208:	andeq	sp, r0, r4, ror #14
   2820c:	andeq	sp, r0, r0, asr r7
   28210:	strdeq	sp, [r0], -r4

00028214 <gen_monster_benchmark@@Base>:
   28214:	str	fp, [sp, #-8]!
   28218:	str	lr, [sp, #4]
   2821c:	add	fp, sp, #4
   28220:	sub	sp, sp, #32
   28224:	str	r0, [fp, #-32]	; 0xffffffe0
   28228:	ldr	r3, [pc, #360]	; 28398 <gen_monster_benchmark@@Base+0x184>
   2822c:	add	r3, pc, r3
   28230:	sub	r1, fp, #24
   28234:	mov	r0, r3
   28238:	ldrd	r2, [r0]
   2823c:	strd	r2, [r1]
   28240:	ldrh	r3, [r0, #8]
   28244:	strh	r3, [r1, #8]
   28248:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2824c:	bl	29bf4 <flatcc_builder_reset@@Base>
   28250:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28254:	bl	1e160 <_start@@Base+0xb770>
   28258:	mov	r1, #80	; 0x50
   2825c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28260:	bl	1c834 <_start@@Base+0x9e44>
   28264:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28268:	bl	1c770 <_start@@Base+0x9d80>
   2826c:	str	r0, [fp, #-8]
   28270:	ldr	r3, [fp, #-8]
   28274:	mov	r2, #1065353216	; 0x3f800000
   28278:	str	r2, [r3]
   2827c:	ldr	r3, [fp, #-8]
   28280:	mov	r2, #1073741824	; 0x40000000
   28284:	str	r2, [r3, #4]
   28288:	ldr	r3, [fp, #-8]
   2828c:	movw	r2, #52429	; 0xcccd
   28290:	movt	r2, #49228	; 0xc04c
   28294:	str	r2, [r3, #8]
   28298:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2829c:	bl	1c7b0 <_start@@Base+0x9dc0>
   282a0:	ldr	r3, [pc, #244]	; 2839c <gen_monster_benchmark@@Base+0x188>
   282a4:	add	r3, pc, r3
   282a8:	mov	r1, r3
   282ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   282b0:	bl	1cb00 <_start@@Base+0xa110>
   282b4:	sub	r3, fp, #24
   282b8:	mov	r2, #10
   282bc:	mov	r1, r3
   282c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   282c4:	bl	1cf4c <_start@@Base+0xa55c>
   282c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   282cc:	bl	1daa4 <_start@@Base+0xb0b4>
   282d0:	mov	r1, #1
   282d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   282d8:	bl	1dbc4 <_start@@Base+0xb1d4>
   282dc:	str	r0, [fp, #-12]
   282e0:	ldr	r3, [fp, #-12]
   282e4:	mov	r2, #16
   282e8:	strh	r2, [r3]
   282ec:	ldr	r3, [fp, #-12]
   282f0:	mov	r2, #32
   282f4:	strb	r2, [r3, #2]
   282f8:	mov	r1, #2
   282fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28300:	bl	1dbc4 <_start@@Base+0xb1d4>
   28304:	str	r0, [fp, #-12]
   28308:	ldr	r3, [fp, #-12]
   2830c:	mov	r2, #48	; 0x30
   28310:	strh	r2, [r3]
   28314:	ldr	r3, [fp, #-12]
   28318:	mov	r2, #64	; 0x40
   2831c:	strb	r2, [r3, #2]
   28320:	ldr	r3, [fp, #-12]
   28324:	add	r3, r3, #4
   28328:	mov	r2, #80	; 0x50
   2832c:	strh	r2, [r3]
   28330:	ldr	r3, [fp, #-12]
   28334:	add	r3, r3, #4
   28338:	mov	r2, #96	; 0x60
   2833c:	strb	r2, [r3, #2]
   28340:	mvn	r2, #127	; 0x7f
   28344:	mov	r1, #112	; 0x70
   28348:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2834c:	bl	1dd10 <_start@@Base+0xb320>
   28350:	movw	r3, #401	; 0x191
   28354:	strh	r3, [fp, #-28]	; 0xffffffe4
   28358:	mvn	r3, #110	; 0x6e
   2835c:	strb	r3, [fp, #-26]	; 0xffffffe6
   28360:	sub	r3, fp, #28
   28364:	mov	r1, r3
   28368:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2836c:	bl	1dca4 <_start@@Base+0xb2b4>
   28370:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28374:	bl	1dad8 <_start@@Base+0xb0e8>
   28378:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2837c:	bl	1e220 <_start@@Base+0xb830>
   28380:	mov	r3, #0
   28384:	mov	r0, r3
   28388:	sub	sp, fp, #4
   2838c:	ldr	fp, [sp]
   28390:	add	sp, sp, #4
   28394:	pop	{pc}		; (ldr pc, [sp], #4)
   28398:	andeq	fp, r0, r4, asr #26
   2839c:	andeq	sl, r0, ip, lsr #28

000283a0 <time_monster@@Base>:
   283a0:	str	fp, [sp, #-8]!
   283a4:	str	lr, [sp, #4]
   283a8:	add	fp, sp, #4
   283ac:	sub	sp, sp, #40	; 0x28
   283b0:	str	r0, [fp, #-40]	; 0xffffffd8
   283b4:	movw	r3, #16960	; 0x4240
   283b8:	movt	r3, #15
   283bc:	str	r3, [fp, #-12]
   283c0:	ldr	r3, [pc, #144]	; 28458 <time_monster@@Base+0xb8>
   283c4:	add	r3, pc, r3
   283c8:	mov	r0, r3
   283cc:	bl	12944 <puts@plt>
   283d0:	bl	21050 <_start@@Base+0xe660>
   283d4:	vstr	d0, [fp, #-20]	; 0xffffffec
   283d8:	mov	r3, #0
   283dc:	str	r3, [fp, #-8]
   283e0:	b	283f8 <time_monster@@Base+0x58>
   283e4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   283e8:	bl	28214 <gen_monster_benchmark@@Base>
   283ec:	ldr	r3, [fp, #-8]
   283f0:	add	r3, r3, #1
   283f4:	str	r3, [fp, #-8]
   283f8:	ldr	r2, [fp, #-8]
   283fc:	ldr	r3, [fp, #-12]
   28400:	cmp	r2, r3
   28404:	blt	283e4 <time_monster@@Base+0x44>
   28408:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2840c:	bl	2ebf0 <flatcc_builder_get_buffer_size@@Base>
   28410:	str	r0, [fp, #-24]	; 0xffffffe8
   28414:	bl	21050 <_start@@Base+0xe660>
   28418:	vstr	d0, [fp, #-36]	; 0xffffffdc
   2841c:	ldr	r3, [pc, #56]	; 2845c <time_monster@@Base+0xbc>
   28420:	add	r3, pc, r3
   28424:	ldr	r2, [fp, #-12]
   28428:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2842c:	vldr	d1, [fp, #-36]	; 0xffffffdc
   28430:	vldr	d0, [fp, #-20]	; 0xffffffec
   28434:	ldr	r0, [pc, #36]	; 28460 <time_monster@@Base+0xc0>
   28438:	add	r0, pc, r0
   2843c:	bl	21110 <_start@@Base+0xe720>
   28440:	mov	r3, #0
   28444:	mov	r0, r3
   28448:	sub	sp, fp, #4
   2844c:	ldr	fp, [sp]
   28450:	add	sp, sp, #4
   28454:	pop	{pc}		; (ldr pc, [sp], #4)
   28458:	andeq	sp, r0, ip, ror #8
   2845c:	andeq	sp, r0, r4, lsr #8
   28460:	andeq	sp, r0, r4, lsl r4

00028464 <gen_struct_buffer_benchmark@@Base>:
   28464:	str	fp, [sp, #-8]!
   28468:	str	lr, [sp, #4]
   2846c:	add	fp, sp, #4
   28470:	sub	sp, sp, #24
   28474:	str	r0, [fp, #-24]	; 0xffffffe8
   28478:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2847c:	bl	29bf4 <flatcc_builder_reset@@Base>
   28480:	mvn	r3, #16
   28484:	movw	r2, #2730	; 0xaaa
   28488:	mov	r1, #8
   2848c:	vldr	d2, [pc, #268]	; 285a0 <gen_struct_buffer_benchmark@@Base+0x13c>
   28490:	vldr	s2, [pc, #272]	; 285a8 <gen_struct_buffer_benchmark@@Base+0x144>
   28494:	vldr	s1, [pc, #272]	; 285ac <gen_struct_buffer_benchmark@@Base+0x148>
   28498:	vldr	s0, [pc, #272]	; 285b0 <gen_struct_buffer_benchmark@@Base+0x14c>
   2849c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   284a0:	bl	1b294 <_start@@Base+0x88a4>
   284a4:	mov	r1, #0
   284a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   284ac:	bl	2edc8 <flatcc_builder_get_direct_buffer@@Base>
   284b0:	str	r0, [fp, #-8]
   284b4:	ldr	r3, [fp, #-8]
   284b8:	cmp	r3, #0
   284bc:	bne	284c8 <gen_struct_buffer_benchmark@@Base+0x64>
   284c0:	mvn	r3, #0
   284c4:	b	28588 <gen_struct_buffer_benchmark@@Base+0x124>
   284c8:	mov	r1, #0
   284cc:	ldr	r0, [fp, #-8]
   284d0:	bl	14c9c <_start@@Base+0x22ac>
   284d4:	str	r0, [fp, #-12]
   284d8:	ldr	r3, [fp, #-12]
   284dc:	str	r3, [fp, #-16]
   284e0:	ldr	r0, [fp, #-16]
   284e4:	bl	1b110 <_start@@Base+0x8720>
   284e8:	ldr	r3, [fp, #-16]
   284ec:	vldr	s15, [r3]
   284f0:	vldr	s14, [pc, #184]	; 285b0 <gen_struct_buffer_benchmark@@Base+0x14c>
   284f4:	vcmp.f32	s15, s14
   284f8:	vmrs	APSR_nzcv, fpscr
   284fc:	bne	2857c <gen_struct_buffer_benchmark@@Base+0x118>
   28500:	ldr	r3, [fp, #-16]
   28504:	vldr	s15, [r3, #4]
   28508:	vldr	s14, [pc, #156]	; 285ac <gen_struct_buffer_benchmark@@Base+0x148>
   2850c:	vcmp.f32	s15, s14
   28510:	vmrs	APSR_nzcv, fpscr
   28514:	bne	2857c <gen_struct_buffer_benchmark@@Base+0x118>
   28518:	ldr	r3, [fp, #-16]
   2851c:	vldr	s15, [r3, #8]
   28520:	vldr	s14, [pc, #128]	; 285a8 <gen_struct_buffer_benchmark@@Base+0x144>
   28524:	vcmp.f32	s15, s14
   28528:	vmrs	APSR_nzcv, fpscr
   2852c:	bne	2857c <gen_struct_buffer_benchmark@@Base+0x118>
   28530:	ldr	r3, [fp, #-16]
   28534:	vldr	d7, [r3, #16]
   28538:	vldr	d6, [pc, #96]	; 285a0 <gen_struct_buffer_benchmark@@Base+0x13c>
   2853c:	vcmp.f64	d7, d6
   28540:	vmrs	APSR_nzcv, fpscr
   28544:	bne	2857c <gen_struct_buffer_benchmark@@Base+0x118>
   28548:	ldr	r3, [fp, #-16]
   2854c:	ldrsb	r3, [r3, #24]
   28550:	cmp	r3, #8
   28554:	bne	2857c <gen_struct_buffer_benchmark@@Base+0x118>
   28558:	ldr	r3, [fp, #-16]
   2855c:	ldrsh	r3, [r3, #26]
   28560:	movw	r2, #2730	; 0xaaa
   28564:	cmp	r3, r2
   28568:	bne	2857c <gen_struct_buffer_benchmark@@Base+0x118>
   2856c:	ldr	r3, [fp, #-16]
   28570:	ldrsb	r3, [r3, #28]
   28574:	cmn	r3, #17
   28578:	beq	28584 <gen_struct_buffer_benchmark@@Base+0x120>
   2857c:	mvn	r3, #0
   28580:	b	28588 <gen_struct_buffer_benchmark@@Base+0x124>
   28584:	mov	r3, #0
   28588:	mov	r0, r3
   2858c:	sub	sp, fp, #4
   28590:	ldr	fp, [sp]
   28594:	add	sp, sp, #4
   28598:	pop	{pc}		; (ldr pc, [sp], #4)
   2859c:	nop	{0}
   285a0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   285a4:	andsmi	ip, r0, ip, asr #25
   285a8:	submi	r0, r0, r0
   285ac:	andmi	r0, r0, r0
   285b0:	svccc	0x00800000

000285b4 <time_struct_buffer@@Base>:
   285b4:	str	fp, [sp, #-8]!
   285b8:	str	lr, [sp, #4]
   285bc:	add	fp, sp, #4
   285c0:	sub	sp, sp, #48	; 0x30
   285c4:	str	r0, [fp, #-48]	; 0xffffffd0
   285c8:	movw	r3, #16960	; 0x4240
   285cc:	movt	r3, #15
   285d0:	str	r3, [fp, #-16]
   285d4:	mov	r3, #0
   285d8:	str	r3, [fp, #-12]
   285dc:	ldr	r3, [pc, #188]	; 286a0 <time_struct_buffer@@Base+0xec>
   285e0:	add	r3, pc, r3
   285e4:	mov	r0, r3
   285e8:	bl	12944 <puts@plt>
   285ec:	bl	21050 <_start@@Base+0xe660>
   285f0:	vstr	d0, [fp, #-28]	; 0xffffffe4
   285f4:	mov	r3, #0
   285f8:	str	r3, [fp, #-8]
   285fc:	b	28624 <time_struct_buffer@@Base+0x70>
   28600:	ldr	r0, [fp, #-48]	; 0xffffffd0
   28604:	bl	28464 <gen_struct_buffer_benchmark@@Base>
   28608:	mov	r2, r0
   2860c:	ldr	r3, [fp, #-12]
   28610:	orr	r3, r3, r2
   28614:	str	r3, [fp, #-12]
   28618:	ldr	r3, [fp, #-8]
   2861c:	add	r3, r3, #1
   28620:	str	r3, [fp, #-8]
   28624:	ldr	r2, [fp, #-8]
   28628:	ldr	r3, [fp, #-16]
   2862c:	cmp	r2, r3
   28630:	blt	28600 <time_struct_buffer@@Base+0x4c>
   28634:	bl	21050 <_start@@Base+0xe660>
   28638:	vstr	d0, [fp, #-36]	; 0xffffffdc
   2863c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   28640:	bl	2ebf0 <flatcc_builder_get_buffer_size@@Base>
   28644:	str	r0, [fp, #-40]	; 0xffffffd8
   28648:	ldr	r3, [fp, #-12]
   2864c:	cmp	r3, #0
   28650:	beq	28664 <time_struct_buffer@@Base+0xb0>
   28654:	ldr	r3, [pc, #72]	; 286a4 <time_struct_buffer@@Base+0xf0>
   28658:	add	r3, pc, r3
   2865c:	mov	r0, r3
   28660:	bl	12944 <puts@plt>
   28664:	ldr	r3, [pc, #60]	; 286a8 <time_struct_buffer@@Base+0xf4>
   28668:	add	r3, pc, r3
   2866c:	ldr	r2, [fp, #-16]
   28670:	ldr	r1, [fp, #-40]	; 0xffffffd8
   28674:	vldr	d1, [fp, #-36]	; 0xffffffdc
   28678:	vldr	d0, [fp, #-28]	; 0xffffffe4
   2867c:	ldr	r0, [pc, #40]	; 286ac <time_struct_buffer@@Base+0xf8>
   28680:	add	r0, pc, r0
   28684:	bl	21110 <_start@@Base+0xe720>
   28688:	ldr	r3, [fp, #-12]
   2868c:	mov	r0, r3
   28690:	sub	sp, fp, #4
   28694:	ldr	fp, [sp]
   28698:	add	sp, sp, #4
   2869c:	pop	{pc}		; (ldr pc, [sp], #4)
   286a0:	andeq	sp, r0, r0, asr r2
   286a4:	andeq	sp, r0, ip, lsl #4
   286a8:	ldrdeq	sp, [r0], -ip
   286ac:	strdeq	sp, [r0], -r8

000286b0 <main@@Base>:
   286b0:	str	fp, [sp, #-8]!
   286b4:	str	lr, [sp, #4]
   286b8:	add	fp, sp, #4
   286bc:	sub	sp, sp, #248	; 0xf8
   286c0:	str	r0, [fp, #-248]	; 0xffffff08
   286c4:	str	r1, [fp, #-252]	; 0xffffff04
   286c8:	sub	r3, fp, #240	; 0xf0
   286cc:	str	r3, [fp, #-8]
   286d0:	ldr	r0, [fp, #-8]
   286d4:	bl	29954 <flatcc_builder_init@@Base>
   286d8:	ldr	r3, [pc, #1052]	; 28afc <main@@Base+0x44c>
   286dc:	add	r3, pc, r3
   286e0:	mov	r0, r3
   286e4:	bl	12944 <puts@plt>
   286e8:	ldr	r0, [fp, #-8]
   286ec:	bl	21ecc <test_table_with_emptystruct@@Base>
   286f0:	mov	r3, r0
   286f4:	cmp	r3, #0
   286f8:	beq	28714 <main@@Base+0x64>
   286fc:	ldr	r3, [pc, #1020]	; 28b00 <main@@Base+0x450>
   28700:	add	r3, pc, r3
   28704:	mov	r0, r3
   28708:	bl	12944 <puts@plt>
   2870c:	mvn	r3, #0
   28710:	b	28ae8 <main@@Base+0x438>
   28714:	ldr	r0, [fp, #-8]
   28718:	bl	215ac <test_enums@@Base>
   2871c:	mov	r3, r0
   28720:	cmp	r3, #0
   28724:	beq	28740 <main@@Base+0x90>
   28728:	ldr	r3, [pc, #980]	; 28b04 <main@@Base+0x454>
   2872c:	add	r3, pc, r3
   28730:	mov	r0, r3
   28734:	bl	12944 <puts@plt>
   28738:	mvn	r3, #0
   2873c:	b	28ae8 <main@@Base+0x438>
   28740:	ldr	r0, [fp, #-8]
   28744:	bl	218b8 <test_empty_monster@@Base>
   28748:	mov	r3, r0
   2874c:	cmp	r3, #0
   28750:	beq	2876c <main@@Base+0xbc>
   28754:	ldr	r3, [pc, #940]	; 28b08 <main@@Base+0x458>
   28758:	add	r3, pc, r3
   2875c:	mov	r0, r3
   28760:	bl	12944 <puts@plt>
   28764:	mvn	r3, #0
   28768:	b	28ae8 <main@@Base+0x438>
   2876c:	ldr	r0, [fp, #-8]
   28770:	bl	23b8c <test_monster@@Base>
   28774:	mov	r3, r0
   28778:	cmp	r3, #0
   2877c:	beq	28798 <main@@Base+0xe8>
   28780:	ldr	r3, [pc, #900]	; 28b0c <main@@Base+0x45c>
   28784:	add	r3, pc, r3
   28788:	mov	r0, r3
   2878c:	bl	12944 <puts@plt>
   28790:	mvn	r3, #0
   28794:	b	28ae8 <main@@Base+0x438>
   28798:	ldr	r0, [fp, #-8]
   2879c:	bl	23c74 <test_monster_with_size@@Base>
   287a0:	mov	r3, r0
   287a4:	cmp	r3, #0
   287a8:	beq	287c4 <main@@Base+0x114>
   287ac:	ldr	r3, [pc, #860]	; 28b10 <main@@Base+0x460>
   287b0:	add	r3, pc, r3
   287b4:	mov	r0, r3
   287b8:	bl	12944 <puts@plt>
   287bc:	mvn	r3, #0
   287c0:	b	28ae8 <main@@Base+0x438>
   287c4:	ldr	r0, [fp, #-8]
   287c8:	bl	23e00 <test_string@@Base>
   287cc:	mov	r3, r0
   287d0:	cmp	r3, #0
   287d4:	beq	287f0 <main@@Base+0x140>
   287d8:	ldr	r3, [pc, #820]	; 28b14 <main@@Base+0x464>
   287dc:	add	r3, pc, r3
   287e0:	mov	r0, r3
   287e4:	bl	12944 <puts@plt>
   287e8:	mvn	r3, #0
   287ec:	b	28ae8 <main@@Base+0x438>
   287f0:	ldr	r0, [fp, #-8]
   287f4:	bl	27ad0 <test_struct_buffer@@Base>
   287f8:	mov	r3, r0
   287fc:	cmp	r3, #0
   28800:	beq	2881c <main@@Base+0x16c>
   28804:	ldr	r3, [pc, #780]	; 28b18 <main@@Base+0x468>
   28808:	add	r3, pc, r3
   2880c:	mov	r0, r3
   28810:	bl	12944 <puts@plt>
   28814:	mvn	r3, #0
   28818:	b	28ae8 <main@@Base+0x438>
   2881c:	ldr	r0, [fp, #-8]
   28820:	bl	21a4c <test_typed_empty_monster@@Base>
   28824:	mov	r3, r0
   28828:	cmp	r3, #0
   2882c:	beq	28848 <main@@Base+0x198>
   28830:	ldr	r3, [pc, #740]	; 28b1c <main@@Base+0x46c>
   28834:	add	r3, pc, r3
   28838:	mov	r0, r3
   2883c:	bl	12944 <puts@plt>
   28840:	mvn	r3, #0
   28844:	b	28ae8 <main@@Base+0x438>
   28848:	ldr	r0, [fp, #-8]
   2884c:	bl	21f78 <test_typed_table_with_emptystruct@@Base>
   28850:	mov	r3, r0
   28854:	cmp	r3, #0
   28858:	beq	28874 <main@@Base+0x1c4>
   2885c:	ldr	r3, [pc, #700]	; 28b20 <main@@Base+0x470>
   28860:	add	r3, pc, r3
   28864:	mov	r0, r3
   28868:	bl	12944 <puts@plt>
   2886c:	mvn	r3, #0
   28870:	b	28ae8 <main@@Base+0x438>
   28874:	ldr	r0, [fp, #-8]
   28878:	bl	27e04 <test_typed_struct_buffer@@Base>
   2887c:	mov	r3, r0
   28880:	cmp	r3, #0
   28884:	beq	288a0 <main@@Base+0x1f0>
   28888:	ldr	r3, [pc, #660]	; 28b24 <main@@Base+0x474>
   2888c:	add	r3, pc, r3
   28890:	mov	r0, r3
   28894:	bl	12944 <puts@plt>
   28898:	mvn	r3, #0
   2889c:	b	28ae8 <main@@Base+0x438>
   288a0:	ldr	r0, [fp, #-8]
   288a4:	bl	25a70 <test_clone_slice@@Base>
   288a8:	mov	r3, r0
   288ac:	cmp	r3, #0
   288b0:	beq	288cc <main@@Base+0x21c>
   288b4:	ldr	r3, [pc, #620]	; 28b28 <main@@Base+0x478>
   288b8:	add	r3, pc, r3
   288bc:	mov	r0, r3
   288c0:	bl	12944 <puts@plt>
   288c4:	mvn	r3, #0
   288c8:	b	28ae8 <main@@Base+0x438>
   288cc:	ldr	r0, [fp, #-8]
   288d0:	bl	271c4 <test_add_set_defaults@@Base>
   288d4:	mov	r3, r0
   288d8:	cmp	r3, #0
   288dc:	beq	288f8 <main@@Base+0x248>
   288e0:	ldr	r3, [pc, #580]	; 28b2c <main@@Base+0x47c>
   288e4:	add	r3, pc, r3
   288e8:	mov	r0, r3
   288ec:	bl	12944 <puts@plt>
   288f0:	mvn	r3, #0
   288f4:	b	28ae8 <main@@Base+0x438>
   288f8:	ldr	r0, [fp, #-8]
   288fc:	bl	2629c <test_create_add_field@@Base>
   28900:	mov	r3, r0
   28904:	cmp	r3, #0
   28908:	beq	28924 <main@@Base+0x274>
   2890c:	ldr	r3, [pc, #540]	; 28b30 <main@@Base+0x480>
   28910:	add	r3, pc, r3
   28914:	mov	r0, r3
   28918:	bl	12944 <puts@plt>
   2891c:	mvn	r3, #0
   28920:	b	28ae8 <main@@Base+0x438>
   28924:	ldr	r0, [fp, #-8]
   28928:	bl	263dc <test_union_vector@@Base>
   2892c:	mov	r3, r0
   28930:	cmp	r3, #0
   28934:	beq	28950 <main@@Base+0x2a0>
   28938:	ldr	r3, [pc, #500]	; 28b34 <main@@Base+0x484>
   2893c:	add	r3, pc, r3
   28940:	mov	r0, r3
   28944:	bl	12944 <puts@plt>
   28948:	mvn	r3, #0
   2894c:	b	28ae8 <main@@Base+0x438>
   28950:	ldr	r0, [fp, #-8]
   28954:	bl	2585c <test_basic_sort@@Base>
   28958:	mov	r3, r0
   2895c:	cmp	r3, #0
   28960:	beq	2897c <main@@Base+0x2cc>
   28964:	ldr	r3, [pc, #460]	; 28b38 <main@@Base+0x488>
   28968:	add	r3, pc, r3
   2896c:	mov	r0, r3
   28970:	bl	12944 <puts@plt>
   28974:	mvn	r3, #0
   28978:	b	28ae8 <main@@Base+0x438>
   2897c:	ldr	r0, [fp, #-8]
   28980:	bl	240a8 <test_sort_find@@Base>
   28984:	mov	r3, r0
   28988:	cmp	r3, #0
   2898c:	beq	289a8 <main@@Base+0x2f8>
   28990:	ldr	r3, [pc, #420]	; 28b3c <main@@Base+0x48c>
   28994:	add	r3, pc, r3
   28998:	mov	r0, r3
   2899c:	bl	12944 <puts@plt>
   289a0:	mvn	r3, #0
   289a4:	b	28ae8 <main@@Base+0x438>
   289a8:	ldr	r0, [fp, #-8]
   289ac:	bl	247c8 <test_scan@@Base>
   289b0:	mov	r3, r0
   289b4:	cmp	r3, #0
   289b8:	beq	289d4 <main@@Base+0x324>
   289bc:	ldr	r3, [pc, #380]	; 28b40 <main@@Base+0x490>
   289c0:	add	r3, pc, r3
   289c4:	mov	r0, r3
   289c8:	bl	12944 <puts@plt>
   289cc:	mvn	r3, #0
   289d0:	b	28ae8 <main@@Base+0x438>
   289d4:	ldr	r0, [fp, #-8]
   289d8:	bl	273f8 <test_nested_buffer@@Base>
   289dc:	mov	r3, r0
   289e0:	cmp	r3, #0
   289e4:	beq	28a00 <main@@Base+0x350>
   289e8:	ldr	r3, [pc, #340]	; 28b44 <main@@Base+0x494>
   289ec:	add	r3, pc, r3
   289f0:	mov	r0, r3
   289f4:	bl	12944 <puts@plt>
   289f8:	mvn	r3, #0
   289fc:	b	28ae8 <main@@Base+0x438>
   28a00:	ldr	r0, [fp, #-8]
   28a04:	bl	275f8 <test_nested_buffer_first@@Base>
   28a08:	mov	r3, r0
   28a0c:	cmp	r3, #0
   28a10:	beq	28a2c <main@@Base+0x37c>
   28a14:	ldr	r3, [pc, #300]	; 28b48 <main@@Base+0x498>
   28a18:	add	r3, pc, r3
   28a1c:	mov	r0, r3
   28a20:	bl	12944 <puts@plt>
   28a24:	mvn	r3, #0
   28a28:	b	28ae8 <main@@Base+0x438>
   28a2c:	ldr	r0, [fp, #-8]
   28a30:	bl	277f8 <test_nested_buffer_using_nest@@Base>
   28a34:	mov	r3, r0
   28a38:	cmp	r3, #0
   28a3c:	beq	28a58 <main@@Base+0x3a8>
   28a40:	ldr	r3, [pc, #260]	; 28b4c <main@@Base+0x49c>
   28a44:	add	r3, pc, r3
   28a48:	mov	r0, r3
   28a4c:	bl	12944 <puts@plt>
   28a50:	mvn	r3, #0
   28a54:	b	28ae8 <main@@Base+0x438>
   28a58:	ldr	r0, [fp, #-8]
   28a5c:	bl	27aac <verify_include@@Base>
   28a60:	mov	r3, r0
   28a64:	cmp	r3, #0
   28a68:	beq	28a84 <main@@Base+0x3d4>
   28a6c:	ldr	r3, [pc, #220]	; 28b50 <main@@Base+0x4a0>
   28a70:	add	r3, pc, r3
   28a74:	mov	r0, r3
   28a78:	bl	12944 <puts@plt>
   28a7c:	mvn	r3, #0
   28a80:	b	28ae8 <main@@Base+0x438>
   28a84:	ldr	r0, [fp, #-8]
   28a88:	bl	215d0 <test_type_aliases@@Base>
   28a8c:	mov	r3, r0
   28a90:	cmp	r3, #0
   28a94:	beq	28ab0 <main@@Base+0x400>
   28a98:	ldr	r3, [pc, #180]	; 28b54 <main@@Base+0x4a4>
   28a9c:	add	r3, pc, r3
   28aa0:	mov	r0, r3
   28aa4:	bl	12944 <puts@plt>
   28aa8:	mvn	r3, #0
   28aac:	b	28ae8 <main@@Base+0x438>
   28ab0:	ldr	r0, [fp, #-8]
   28ab4:	bl	26740 <test_mixed_type_union@@Base>
   28ab8:	mov	r3, r0
   28abc:	cmp	r3, #0
   28ac0:	beq	28adc <main@@Base+0x42c>
   28ac4:	ldr	r3, [pc, #140]	; 28b58 <main@@Base+0x4a8>
   28ac8:	add	r3, pc, r3
   28acc:	mov	r0, r3
   28ad0:	bl	12944 <puts@plt>
   28ad4:	mvn	r3, #0
   28ad8:	b	28ae8 <main@@Base+0x438>
   28adc:	ldr	r0, [fp, #-8]
   28ae0:	bl	29c30 <flatcc_builder_clear@@Base>
   28ae4:	mov	r3, #0
   28ae8:	mov	r0, r3
   28aec:	sub	sp, fp, #4
   28af0:	ldr	fp, [sp]
   28af4:	add	sp, sp, #4
   28af8:	pop	{pc}		; (ldr pc, [sp], #4)
   28afc:	andeq	sp, r0, ip, asr #3
   28b00:	andeq	sp, r0, r4, asr #3
   28b04:	muleq	r0, r8, r1
   28b08:	andeq	sp, r0, ip, ror #2
   28b0c:	andeq	sp, r0, r0, asr #2
   28b10:	andeq	sp, r0, r4, lsl r1
   28b14:	andeq	sp, r0, r8, ror #1
   28b18:	strheq	sp, [r0], -ip
   28b1c:	muleq	r0, r0, r0
   28b20:	andeq	sp, r0, r4, rrx
   28b24:	andeq	sp, r0, r8, lsr r0
   28b28:	andeq	sp, r0, ip
   28b2c:	andeq	ip, r0, r0, ror #31
   28b30:			; <UNDEFINED> instruction: 0x0000cfb4
   28b34:	andeq	ip, r0, r8, lsl #31
   28b38:	andeq	ip, r0, ip, asr pc
   28b3c:	andeq	ip, r0, r0, lsr pc
   28b40:	andeq	ip, r0, r4, lsl #30
   28b44:	ldrdeq	ip, [r0], -r8
   28b48:	andeq	ip, r0, ip, lsr #29
   28b4c:	andeq	ip, r0, r0, lsl #29
   28b50:	andeq	ip, r0, r4, asr lr
   28b54:	andeq	ip, r0, r8, lsr #28
   28b58:	strdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   28b5c:	str	fp, [sp, #-8]!
   28b60:	str	lr, [sp, #4]
   28b64:	add	fp, sp, #4
   28b68:	sub	sp, sp, #16
   28b6c:	str	r0, [fp, #-16]
   28b70:	str	r1, [fp, #-20]	; 0xffffffec
   28b74:	mov	r3, #0
   28b78:	str	r3, [fp, #-12]
   28b7c:	ldr	r3, [fp, #-16]
   28b80:	cmp	r3, #3
   28b84:	bhi	28b90 <main@@Base+0x4e0>
   28b88:	mov	r3, #4
   28b8c:	str	r3, [fp, #-16]
   28b90:	sub	r3, fp, #12
   28b94:	ldr	r2, [fp, #-20]	; 0xffffffec
   28b98:	ldr	r1, [fp, #-16]
   28b9c:	mov	r0, r3
   28ba0:	bl	1298c <posix_memalign@plt>
   28ba4:	str	r0, [fp, #-8]
   28ba8:	ldr	r3, [fp, #-8]
   28bac:	cmp	r3, #0
   28bb0:	beq	28bd4 <main@@Base+0x524>
   28bb4:	ldr	r3, [fp, #-12]
   28bb8:	cmp	r3, #0
   28bbc:	beq	28bd4 <main@@Base+0x524>
   28bc0:	ldr	r3, [fp, #-12]
   28bc4:	mov	r0, r3
   28bc8:	bl	128fc <free@plt>
   28bcc:	mov	r3, #0
   28bd0:	str	r3, [fp, #-12]
   28bd4:	ldr	r3, [fp, #-12]
   28bd8:	mov	r0, r3
   28bdc:	sub	sp, fp, #4
   28be0:	ldr	fp, [sp]
   28be4:	add	sp, sp, #4
   28be8:	pop	{pc}		; (ldr pc, [sp], #4)
   28bec:	push	{fp}		; (str fp, [sp, #-4]!)
   28bf0:	add	fp, sp, #0
   28bf4:	sub	sp, sp, #12
   28bf8:	str	r0, [fp, #-8]
   28bfc:	ldr	r3, [fp, #-8]
   28c00:	mov	r0, r3
   28c04:	add	sp, fp, #0
   28c08:	pop	{fp}		; (ldr fp, [sp], #4)
   28c0c:	bx	lr
   28c10:	push	{fp}		; (str fp, [sp, #-4]!)
   28c14:	add	fp, sp, #0
   28c18:	sub	sp, sp, #12
   28c1c:	mov	r3, r0
   28c20:	strb	r3, [fp, #-5]
   28c24:	ldrb	r3, [fp, #-5]
   28c28:	mov	r0, r3
   28c2c:	add	sp, fp, #0
   28c30:	pop	{fp}		; (ldr fp, [sp], #4)
   28c34:	bx	lr
   28c38:	push	{fp}		; (str fp, [sp, #-4]!)
   28c3c:	add	fp, sp, #0
   28c40:	sub	sp, sp, #12
   28c44:	str	r0, [fp, #-8]
   28c48:	ldr	r3, [fp, #-8]
   28c4c:	mov	r0, r3
   28c50:	add	sp, fp, #0
   28c54:	pop	{fp}		; (ldr fp, [sp], #4)
   28c58:	bx	lr
   28c5c:	push	{fp}		; (str fp, [sp, #-4]!)
   28c60:	add	fp, sp, #0
   28c64:	sub	sp, sp, #12
   28c68:	str	r0, [fp, #-8]
   28c6c:	str	r1, [fp, #-12]
   28c70:	ldr	r3, [fp, #-8]
   28c74:	ldr	r2, [r3]
   28c78:	ldr	r3, [fp, #-8]
   28c7c:	ldr	r3, [r3, #4]
   28c80:	cmp	r2, r3
   28c84:	bne	28cb0 <main@@Base+0x600>
   28c88:	ldr	r3, [fp, #-12]
   28c8c:	cmp	r3, #0
   28c90:	beq	28ca4 <main@@Base+0x5f4>
   28c94:	ldr	r3, [fp, #-8]
   28c98:	ldr	r2, [r3, #24]
   28c9c:	ldr	r3, [fp, #-12]
   28ca0:	str	r2, [r3]
   28ca4:	ldr	r3, [fp, #-8]
   28ca8:	ldr	r3, [r3, #8]
   28cac:	b	28ccc <main@@Base+0x61c>
   28cb0:	ldr	r3, [fp, #-12]
   28cb4:	cmp	r3, #0
   28cb8:	beq	28cc8 <main@@Base+0x618>
   28cbc:	ldr	r3, [fp, #-12]
   28cc0:	mov	r2, #0
   28cc4:	str	r2, [r3]
   28cc8:	mov	r3, #0
   28ccc:	mov	r0, r3
   28cd0:	add	sp, fp, #0
   28cd4:	pop	{fp}		; (ldr fp, [sp], #4)
   28cd8:	bx	lr
   28cdc:	str	fp, [sp, #-8]!
   28ce0:	str	lr, [sp, #4]
   28ce4:	add	fp, sp, #4
   28ce8:	sub	sp, sp, #16
   28cec:	str	r0, [fp, #-16]
   28cf0:	str	r1, [fp, #-20]	; 0xffffffec
   28cf4:	ldr	r2, [fp, #-20]	; 0xffffffec
   28cf8:	mov	r1, #0
   28cfc:	ldr	r0, [fp, #-16]
   28d00:	bl	129b0 <memchr@plt>
   28d04:	str	r0, [fp, #-8]
   28d08:	ldr	r3, [fp, #-8]
   28d0c:	cmp	r3, #0
   28d10:	beq	28d24 <main@@Base+0x674>
   28d14:	ldr	r2, [fp, #-8]
   28d18:	ldr	r3, [fp, #-16]
   28d1c:	sub	r3, r2, r3
   28d20:	b	28d28 <main@@Base+0x678>
   28d24:	ldr	r3, [fp, #-20]	; 0xffffffec
   28d28:	mov	r0, r3
   28d2c:	sub	sp, fp, #4
   28d30:	ldr	fp, [sp]
   28d34:	add	sp, sp, #4
   28d38:	pop	{pc}		; (ldr pc, [sp], #4)

00028d3c <flatcc_builder_default_alloc@@Base>:
   28d3c:	str	fp, [sp, #-8]!
   28d40:	str	lr, [sp, #4]
   28d44:	add	fp, sp, #4
   28d48:	sub	sp, sp, #24
   28d4c:	str	r0, [fp, #-16]
   28d50:	str	r1, [fp, #-20]	; 0xffffffec
   28d54:	str	r2, [fp, #-24]	; 0xffffffe8
   28d58:	str	r3, [fp, #-28]	; 0xffffffe4
   28d5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28d60:	cmp	r3, #0
   28d64:	bne	28da8 <flatcc_builder_default_alloc@@Base+0x6c>
   28d68:	ldr	r3, [fp, #-20]	; 0xffffffec
   28d6c:	ldr	r3, [r3]
   28d70:	cmp	r3, #0
   28d74:	beq	28da0 <flatcc_builder_default_alloc@@Base+0x64>
   28d78:	ldr	r3, [fp, #-20]	; 0xffffffec
   28d7c:	ldr	r3, [r3]
   28d80:	mov	r0, r3
   28d84:	bl	128fc <free@plt>
   28d88:	ldr	r3, [fp, #-20]	; 0xffffffec
   28d8c:	mov	r2, #0
   28d90:	str	r2, [r3]
   28d94:	ldr	r3, [fp, #-20]	; 0xffffffec
   28d98:	mov	r2, #0
   28d9c:	str	r2, [r3, #4]
   28da0:	mov	r3, #0
   28da4:	b	28efc <flatcc_builder_default_alloc@@Base+0x1c0>
   28da8:	ldr	r3, [fp, #4]
   28dac:	sub	r3, r3, #1
   28db0:	cmp	r3, #6
   28db4:	addls	pc, pc, r3, lsl #2
   28db8:	b	28e08 <flatcc_builder_default_alloc@@Base+0xcc>
   28dbc:	b	28dd8 <flatcc_builder_default_alloc@@Base+0x9c>
   28dc0:	b	28e08 <flatcc_builder_default_alloc@@Base+0xcc>
   28dc4:	b	28e08 <flatcc_builder_default_alloc@@Base+0xcc>
   28dc8:	b	28df0 <flatcc_builder_default_alloc@@Base+0xb4>
   28dcc:	b	28de4 <flatcc_builder_default_alloc@@Base+0xa8>
   28dd0:	b	28e08 <flatcc_builder_default_alloc@@Base+0xcc>
   28dd4:	b	28dfc <flatcc_builder_default_alloc@@Base+0xc0>
   28dd8:	mov	r3, #256	; 0x100
   28ddc:	str	r3, [fp, #-8]
   28de0:	b	28e14 <flatcc_builder_default_alloc@@Base+0xd8>
   28de4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28de8:	str	r3, [fp, #-8]
   28dec:	b	28e14 <flatcc_builder_default_alloc@@Base+0xd8>
   28df0:	mov	r3, #288	; 0x120
   28df4:	str	r3, [fp, #-8]
   28df8:	b	28e14 <flatcc_builder_default_alloc@@Base+0xd8>
   28dfc:	mov	r3, #64	; 0x40
   28e00:	str	r3, [fp, #-8]
   28e04:	b	28e14 <flatcc_builder_default_alloc@@Base+0xd8>
   28e08:	mov	r3, #32
   28e0c:	str	r3, [fp, #-8]
   28e10:	nop	{0}
   28e14:	b	28e24 <flatcc_builder_default_alloc@@Base+0xe8>
   28e18:	ldr	r3, [fp, #-8]
   28e1c:	lsl	r3, r3, #1
   28e20:	str	r3, [fp, #-8]
   28e24:	ldr	r2, [fp, #-8]
   28e28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28e2c:	cmp	r2, r3
   28e30:	bcc	28e18 <flatcc_builder_default_alloc@@Base+0xdc>
   28e34:	ldr	r3, [fp, #-20]	; 0xffffffec
   28e38:	ldr	r3, [r3, #4]
   28e3c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   28e40:	cmp	r2, r3
   28e44:	bhi	28e68 <flatcc_builder_default_alloc@@Base+0x12c>
   28e48:	ldr	r3, [fp, #-20]	; 0xffffffec
   28e4c:	ldr	r3, [r3, #4]
   28e50:	lsr	r3, r3, #1
   28e54:	ldr	r2, [fp, #-8]
   28e58:	cmp	r2, r3
   28e5c:	bhi	28e68 <flatcc_builder_default_alloc@@Base+0x12c>
   28e60:	mov	r3, #0
   28e64:	b	28efc <flatcc_builder_default_alloc@@Base+0x1c0>
   28e68:	ldr	r3, [fp, #-20]	; 0xffffffec
   28e6c:	ldr	r3, [r3]
   28e70:	ldr	r1, [fp, #-8]
   28e74:	mov	r0, r3
   28e78:	bl	12920 <realloc@plt>
   28e7c:	str	r0, [fp, #-12]
   28e80:	ldr	r3, [fp, #-12]
   28e84:	cmp	r3, #0
   28e88:	bne	28e94 <flatcc_builder_default_alloc@@Base+0x158>
   28e8c:	mvn	r3, #0
   28e90:	b	28efc <flatcc_builder_default_alloc@@Base+0x1c0>
   28e94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   28e98:	cmp	r3, #0
   28e9c:	beq	28ee0 <flatcc_builder_default_alloc@@Base+0x1a4>
   28ea0:	ldr	r3, [fp, #-20]	; 0xffffffec
   28ea4:	ldr	r3, [r3, #4]
   28ea8:	ldr	r2, [fp, #-8]
   28eac:	cmp	r2, r3
   28eb0:	bls	28ee0 <flatcc_builder_default_alloc@@Base+0x1a4>
   28eb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   28eb8:	ldr	r3, [r3, #4]
   28ebc:	ldr	r2, [fp, #-12]
   28ec0:	add	r0, r2, r3
   28ec4:	ldr	r3, [fp, #-20]	; 0xffffffec
   28ec8:	ldr	r3, [r3, #4]
   28ecc:	ldr	r2, [fp, #-8]
   28ed0:	sub	r3, r2, r3
   28ed4:	mov	r2, r3
   28ed8:	mov	r1, #0
   28edc:	bl	12998 <memset@plt>
   28ee0:	ldr	r3, [fp, #-20]	; 0xffffffec
   28ee4:	ldr	r2, [fp, #-12]
   28ee8:	str	r2, [r3]
   28eec:	ldr	r3, [fp, #-20]	; 0xffffffec
   28ef0:	ldr	r2, [fp, #-8]
   28ef4:	str	r2, [r3, #4]
   28ef8:	mov	r3, #0
   28efc:	mov	r0, r3
   28f00:	sub	sp, fp, #4
   28f04:	ldr	fp, [sp]
   28f08:	add	sp, sp, #4
   28f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   28f10:	push	{fp}		; (str fp, [sp, #-4]!)
   28f14:	add	fp, sp, #0
   28f18:	sub	sp, sp, #20
   28f1c:	str	r0, [fp, #-16]
   28f20:	str	r1, [fp, #-20]	; 0xffffffec
   28f24:	ldr	r3, [fp, #-16]
   28f28:	add	r3, r3, #52	; 0x34
   28f2c:	add	r3, r3, #8
   28f30:	str	r3, [fp, #-8]
   28f34:	ldr	r3, [fp, #-16]
   28f38:	ldr	r2, [r3, #60]	; 0x3c
   28f3c:	ldr	r3, [fp, #-16]
   28f40:	ldr	r3, [r3, #28]
   28f44:	add	r2, r2, r3
   28f48:	ldr	r3, [fp, #-16]
   28f4c:	str	r2, [r3, #16]
   28f50:	ldr	r3, [fp, #-8]
   28f54:	ldr	r2, [r3, #4]
   28f58:	ldr	r3, [fp, #-16]
   28f5c:	ldr	r3, [r3, #28]
   28f60:	sub	r2, r2, r3
   28f64:	ldr	r3, [fp, #-16]
   28f68:	str	r2, [r3, #24]
   28f6c:	ldr	r3, [fp, #-16]
   28f70:	ldr	r3, [r3, #24]
   28f74:	ldr	r2, [fp, #-20]	; 0xffffffec
   28f78:	cmp	r2, r3
   28f7c:	bcs	28f8c <flatcc_builder_default_alloc@@Base+0x250>
   28f80:	ldr	r3, [fp, #-16]
   28f84:	ldr	r2, [fp, #-20]	; 0xffffffec
   28f88:	str	r2, [r3, #24]
   28f8c:	ldr	r3, [fp, #-16]
   28f90:	ldr	r3, [r3, #32]
   28f94:	ldr	r2, [fp, #-20]	; 0xffffffec
   28f98:	str	r2, [r3, #4]
   28f9c:	nop	{0}
   28fa0:	add	sp, fp, #0
   28fa4:	pop	{fp}		; (ldr fp, [sp], #4)
   28fa8:	bx	lr
   28fac:	str	r4, [sp, #-12]!
   28fb0:	str	fp, [sp, #4]
   28fb4:	str	lr, [sp, #8]
   28fb8:	add	fp, sp, #8
   28fbc:	sub	sp, sp, #36	; 0x24
   28fc0:	str	r0, [fp, #-24]	; 0xffffffe8
   28fc4:	str	r1, [fp, #-28]	; 0xffffffe4
   28fc8:	str	r2, [fp, #-32]	; 0xffffffe0
   28fcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28fd0:	add	r3, r3, #52	; 0x34
   28fd4:	add	r3, r3, #8
   28fd8:	str	r3, [fp, #-16]
   28fdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28fe0:	ldr	r4, [r3, #48]	; 0x30
   28fe4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28fe8:	ldr	r0, [r3, #40]	; 0x28
   28fec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28ff0:	ldr	r2, [r3, #28]
   28ff4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   28ff8:	add	r2, r2, r3
   28ffc:	mov	r3, #1
   29000:	str	r3, [sp]
   29004:	mov	r3, #1
   29008:	ldr	r1, [fp, #-16]
   2900c:	blx	r4
   29010:	mov	r3, r0
   29014:	cmp	r3, #0
   29018:	beq	29024 <flatcc_builder_default_alloc@@Base+0x2e8>
   2901c:	mvn	r3, #0
   29020:	b	29034 <flatcc_builder_default_alloc@@Base+0x2f8>
   29024:	ldr	r1, [fp, #-32]	; 0xffffffe0
   29028:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2902c:	bl	28f10 <flatcc_builder_default_alloc@@Base+0x1d4>
   29030:	mov	r3, #0
   29034:	mov	r0, r3
   29038:	sub	sp, fp, #8
   2903c:	ldr	r4, [sp]
   29040:	ldr	fp, [sp, #4]
   29044:	add	sp, sp, #8
   29048:	pop	{pc}		; (ldr pc, [sp], #4)
   2904c:	str	fp, [sp, #-8]!
   29050:	str	lr, [sp, #4]
   29054:	add	fp, sp, #4
   29058:	sub	sp, sp, #16
   2905c:	str	r0, [fp, #-16]
   29060:	str	r1, [fp, #-20]	; 0xffffffec
   29064:	ldr	r3, [fp, #-16]
   29068:	ldr	r3, [r3, #20]
   2906c:	str	r3, [fp, #-8]
   29070:	ldr	r3, [fp, #-16]
   29074:	ldr	r2, [r3, #20]
   29078:	ldr	r3, [fp, #-20]	; 0xffffffec
   2907c:	add	r2, r2, r3
   29080:	ldr	r3, [fp, #-16]
   29084:	str	r2, [r3, #20]
   29088:	ldr	r3, [fp, #-16]
   2908c:	ldr	r2, [r3, #20]
   29090:	ldr	r3, [fp, #-16]
   29094:	ldr	r3, [r3, #24]
   29098:	cmp	r2, r3
   2909c:	bcc	290d0 <flatcc_builder_default_alloc@@Base+0x394>
   290a0:	ldr	r3, [fp, #-16]
   290a4:	ldr	r3, [r3, #20]
   290a8:	add	r3, r3, #1
   290ac:	mvn	r2, #3
   290b0:	mov	r1, r3
   290b4:	ldr	r0, [fp, #-16]
   290b8:	bl	28fac <flatcc_builder_default_alloc@@Base+0x270>
   290bc:	mov	r3, r0
   290c0:	cmp	r3, #0
   290c4:	beq	290d0 <flatcc_builder_default_alloc@@Base+0x394>
   290c8:	mov	r3, #0
   290cc:	b	290e0 <flatcc_builder_default_alloc@@Base+0x3a4>
   290d0:	ldr	r3, [fp, #-16]
   290d4:	ldr	r2, [r3, #16]
   290d8:	ldr	r3, [fp, #-8]
   290dc:	add	r3, r2, r3
   290e0:	mov	r0, r3
   290e4:	sub	sp, fp, #4
   290e8:	ldr	fp, [sp]
   290ec:	add	sp, sp, #4
   290f0:	pop	{pc}		; (ldr pc, [sp], #4)
   290f4:	str	fp, [sp, #-8]!
   290f8:	str	lr, [sp, #4]
   290fc:	add	fp, sp, #4
   29100:	sub	sp, sp, #8
   29104:	str	r0, [fp, #-8]
   29108:	str	r1, [fp, #-12]
   2910c:	ldr	r3, [fp, #-8]
   29110:	ldr	r2, [r3, #20]
   29114:	ldr	r3, [fp, #-12]
   29118:	sub	r2, r2, r3
   2911c:	ldr	r3, [fp, #-8]
   29120:	str	r2, [r3, #20]
   29124:	ldr	r3, [fp, #-8]
   29128:	ldr	r2, [r3, #16]
   2912c:	ldr	r3, [fp, #-8]
   29130:	ldr	r3, [r3, #20]
   29134:	add	r3, r2, r3
   29138:	ldr	r2, [fp, #-12]
   2913c:	mov	r1, #0
   29140:	mov	r0, r3
   29144:	bl	12998 <memset@plt>
   29148:	nop	{0}
   2914c:	sub	sp, fp, #4
   29150:	ldr	fp, [sp]
   29154:	add	sp, sp, #4
   29158:	pop	{pc}		; (ldr pc, [sp], #4)
   2915c:	str	fp, [sp, #-8]!
   29160:	str	lr, [sp, #4]
   29164:	add	fp, sp, #4
   29168:	sub	sp, sp, #24
   2916c:	str	r0, [fp, #-16]
   29170:	str	r1, [fp, #-20]	; 0xffffffec
   29174:	str	r2, [fp, #-24]	; 0xffffffe8
   29178:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2917c:	ldr	r0, [fp, #-16]
   29180:	bl	2904c <flatcc_builder_default_alloc@@Base+0x310>
   29184:	str	r0, [fp, #-8]
   29188:	ldr	r3, [fp, #-8]
   2918c:	cmp	r3, #0
   29190:	bne	2919c <flatcc_builder_default_alloc@@Base+0x460>
   29194:	mov	r3, #0
   29198:	b	291b0 <flatcc_builder_default_alloc@@Base+0x474>
   2919c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   291a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   291a4:	ldr	r0, [fp, #-8]
   291a8:	bl	12908 <memcpy@plt>
   291ac:	ldr	r3, [fp, #-8]
   291b0:	mov	r0, r3
   291b4:	sub	sp, fp, #4
   291b8:	ldr	fp, [sp]
   291bc:	add	sp, sp, #4
   291c0:	pop	{pc}		; (ldr pc, [sp], #4)
   291c4:	str	fp, [sp, #-8]!
   291c8:	str	lr, [sp, #4]
   291cc:	add	fp, sp, #4
   291d0:	sub	sp, sp, #24
   291d4:	str	r0, [fp, #-16]
   291d8:	str	r1, [fp, #-20]	; 0xffffffec
   291dc:	mov	r1, r2
   291e0:	mov	r2, r3
   291e4:	mov	r3, r1
   291e8:	strh	r3, [fp, #-22]	; 0xffffffea
   291ec:	mov	r3, r2
   291f0:	strh	r3, [fp, #-24]	; 0xffffffe8
   291f4:	ldr	r3, [fp, #-16]
   291f8:	ldr	r2, [r3, #20]
   291fc:	ldrh	r3, [fp, #-22]	; 0xffffffea
   29200:	add	r3, r2, r3
   29204:	sub	r3, r3, #1
   29208:	ldrh	r2, [fp, #-22]	; 0xffffffea
   2920c:	rsb	r2, r2, #0
   29210:	and	r3, r3, r2
   29214:	str	r3, [fp, #-8]
   29218:	ldr	r2, [fp, #-8]
   2921c:	ldr	r3, [fp, #-20]	; 0xffffffec
   29220:	add	r2, r2, r3
   29224:	ldr	r3, [fp, #-16]
   29228:	str	r2, [r3, #20]
   2922c:	ldr	r3, [fp, #-16]
   29230:	ldr	r2, [r3, #20]
   29234:	ldr	r3, [fp, #-16]
   29238:	ldr	r3, [r3, #24]
   2923c:	cmp	r2, r3
   29240:	bcc	29274 <flatcc_builder_default_alloc@@Base+0x538>
   29244:	ldr	r3, [fp, #-16]
   29248:	ldr	r3, [r3, #20]
   2924c:	add	r3, r3, #1
   29250:	movw	r2, #65532	; 0xfffc
   29254:	mov	r1, r3
   29258:	ldr	r0, [fp, #-16]
   2925c:	bl	28fac <flatcc_builder_default_alloc@@Base+0x270>
   29260:	mov	r3, r0
   29264:	cmp	r3, #0
   29268:	beq	29274 <flatcc_builder_default_alloc@@Base+0x538>
   2926c:	mov	r3, #0
   29270:	b	292d4 <flatcc_builder_default_alloc@@Base+0x598>
   29274:	ldr	r3, [fp, #-8]
   29278:	uxth	r2, r3
   2927c:	ldr	r3, [fp, #-16]
   29280:	ldr	r1, [r3, #4]
   29284:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   29288:	lsl	r3, r3, #1
   2928c:	add	r3, r1, r3
   29290:	add	r2, r2, #4
   29294:	uxth	r2, r2
   29298:	strh	r2, [r3]
   2929c:	ldr	r3, [fp, #-16]
   292a0:	ldrh	r3, [r3, #8]
   292a4:	ldrh	r2, [fp, #-24]	; 0xffffffe8
   292a8:	cmp	r2, r3
   292ac:	bcc	292c4 <flatcc_builder_default_alloc@@Base+0x588>
   292b0:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   292b4:	add	r3, r3, #1
   292b8:	uxth	r2, r3
   292bc:	ldr	r3, [fp, #-16]
   292c0:	strh	r2, [r3, #8]
   292c4:	ldr	r3, [fp, #-16]
   292c8:	ldr	r2, [r3, #16]
   292cc:	ldr	r3, [fp, #-8]
   292d0:	add	r3, r2, r3
   292d4:	mov	r0, r3
   292d8:	sub	sp, fp, #4
   292dc:	ldr	fp, [sp]
   292e0:	add	sp, sp, #4
   292e4:	pop	{pc}		; (ldr pc, [sp], #4)
   292e8:	str	fp, [sp, #-8]!
   292ec:	str	lr, [sp, #4]
   292f0:	add	fp, sp, #4
   292f4:	sub	sp, sp, #16
   292f8:	str	r0, [fp, #-16]
   292fc:	mov	r3, r1
   29300:	strh	r3, [fp, #-18]	; 0xffffffee
   29304:	ldr	r3, [fp, #-16]
   29308:	ldr	r3, [r3, #20]
   2930c:	add	r3, r3, #3
   29310:	bic	r3, r3, #3
   29314:	str	r3, [fp, #-8]
   29318:	ldr	r3, [fp, #-8]
   2931c:	add	r2, r3, #4
   29320:	ldr	r3, [fp, #-16]
   29324:	str	r2, [r3, #20]
   29328:	ldr	r3, [fp, #-16]
   2932c:	ldr	r2, [r3, #20]
   29330:	ldr	r3, [fp, #-16]
   29334:	ldr	r3, [r3, #24]
   29338:	cmp	r2, r3
   2933c:	bls	2936c <flatcc_builder_default_alloc@@Base+0x630>
   29340:	ldr	r3, [fp, #-16]
   29344:	ldr	r3, [r3, #20]
   29348:	movw	r2, #65532	; 0xfffc
   2934c:	mov	r1, r3
   29350:	ldr	r0, [fp, #-16]
   29354:	bl	28fac <flatcc_builder_default_alloc@@Base+0x270>
   29358:	mov	r3, r0
   2935c:	cmp	r3, #0
   29360:	beq	2936c <flatcc_builder_default_alloc@@Base+0x630>
   29364:	mov	r3, #0
   29368:	b	293ec <flatcc_builder_default_alloc@@Base+0x6b0>
   2936c:	ldr	r3, [fp, #-8]
   29370:	uxth	r2, r3
   29374:	ldr	r3, [fp, #-16]
   29378:	ldr	r1, [r3, #4]
   2937c:	ldrh	r3, [fp, #-18]	; 0xffffffee
   29380:	lsl	r3, r3, #1
   29384:	add	r3, r1, r3
   29388:	add	r2, r2, #4
   2938c:	uxth	r2, r2
   29390:	strh	r2, [r3]
   29394:	ldr	r3, [fp, #-16]
   29398:	ldrh	r3, [r3, #8]
   2939c:	ldrh	r2, [fp, #-18]	; 0xffffffee
   293a0:	cmp	r2, r3
   293a4:	bcc	293bc <flatcc_builder_default_alloc@@Base+0x680>
   293a8:	ldrh	r3, [fp, #-18]	; 0xffffffee
   293ac:	add	r3, r3, #1
   293b0:	uxth	r2, r3
   293b4:	ldr	r3, [fp, #-16]
   293b8:	strh	r2, [r3, #8]
   293bc:	ldr	r3, [fp, #-16]
   293c0:	ldr	r3, [r3]
   293c4:	add	r1, r3, #2
   293c8:	ldr	r2, [fp, #-16]
   293cc:	str	r1, [r2]
   293d0:	ldr	r2, [fp, #-8]
   293d4:	uxth	r2, r2
   293d8:	strh	r2, [r3]
   293dc:	ldr	r3, [fp, #-16]
   293e0:	ldr	r2, [r3, #16]
   293e4:	ldr	r3, [fp, #-8]
   293e8:	add	r3, r2, r3
   293ec:	mov	r0, r3
   293f0:	sub	sp, fp, #4
   293f4:	ldr	fp, [sp]
   293f8:	add	sp, sp, #4
   293fc:	pop	{pc}		; (ldr pc, [sp], #4)
   29400:	str	r4, [sp, #-12]!
   29404:	str	fp, [sp, #4]
   29408:	str	lr, [sp, #8]
   2940c:	add	fp, sp, #8
   29410:	sub	sp, sp, #36	; 0x24
   29414:	str	r0, [fp, #-24]	; 0xffffffe8
   29418:	str	r1, [fp, #-28]	; 0xffffffe4
   2941c:	str	r2, [fp, #-32]	; 0xffffffe0
   29420:	str	r3, [fp, #-36]	; 0xffffffdc
   29424:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29428:	add	r2, r3, #52	; 0x34
   2942c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   29430:	lsl	r3, r3, #3
   29434:	add	r3, r2, r3
   29438:	str	r3, [fp, #-16]
   2943c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   29440:	ldr	r3, [fp, #-36]	; 0xffffffdc
   29444:	add	r2, r2, r3
   29448:	ldr	r3, [fp, #-16]
   2944c:	ldr	r3, [r3, #4]
   29450:	cmp	r2, r3
   29454:	bls	294b4 <flatcc_builder_default_alloc@@Base+0x778>
   29458:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2945c:	ldr	r4, [r3, #48]	; 0x30
   29460:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29464:	ldr	r0, [r3, #40]	; 0x28
   29468:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2946c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   29470:	add	r2, r2, r3
   29474:	ldr	r3, [fp, #-28]	; 0xffffffe4
   29478:	str	r3, [sp]
   2947c:	ldr	r3, [fp, #4]
   29480:	ldr	r1, [fp, #-16]
   29484:	blx	r4
   29488:	mov	r3, r0
   2948c:	cmp	r3, #0
   29490:	beq	294b4 <flatcc_builder_default_alloc@@Base+0x778>
   29494:	ldr	r3, [pc, #68]	; 294e0 <flatcc_builder_default_alloc@@Base+0x7a4>
   29498:	add	r3, pc, r3
   2949c:	mov	r2, #308	; 0x134
   294a0:	ldr	r1, [pc, #60]	; 294e4 <flatcc_builder_default_alloc@@Base+0x7a8>
   294a4:	add	r1, pc, r1
   294a8:	ldr	r0, [pc, #56]	; 294e8 <flatcc_builder_default_alloc@@Base+0x7ac>
   294ac:	add	r0, pc, r0
   294b0:	bl	129e0 <__assert_fail@plt>
   294b4:	ldr	r3, [fp, #-16]
   294b8:	ldr	r3, [r3]
   294bc:	mov	r2, r3
   294c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   294c4:	add	r3, r2, r3
   294c8:	mov	r0, r3
   294cc:	sub	sp, fp, #8
   294d0:	ldr	r4, [sp]
   294d4:	ldr	fp, [sp, #4]
   294d8:	add	sp, sp, #8
   294dc:	pop	{pc}		; (ldr pc, [sp], #4)
   294e0:	andeq	sp, r0, ip, lsl r5
   294e4:	ldrdeq	sp, [r0], -ip
   294e8:	andeq	sp, r0, r4, lsr r1
   294ec:	str	fp, [sp, #-8]!
   294f0:	str	lr, [sp, #4]
   294f4:	add	fp, sp, #4
   294f8:	sub	sp, sp, #24
   294fc:	str	r0, [fp, #-16]
   29500:	str	r1, [fp, #-20]	; 0xffffffec
   29504:	ldr	r3, [fp, #-16]
   29508:	ldr	r3, [r3, #32]
   2950c:	ldr	r2, [r3, #16]
   29510:	ldr	r3, [fp, #-16]
   29514:	ldr	r3, [r3, #32]
   29518:	ldrh	r3, [r3, #28]
   2951c:	lsl	r3, r3, #1
   29520:	add	r3, r2, r3
   29524:	str	r3, [fp, #-8]
   29528:	ldr	r3, [fp, #-20]	; 0xffffffec
   2952c:	add	r3, r3, #2
   29530:	lsl	r3, r3, #1
   29534:	str	r3, [fp, #-12]
   29538:	mov	r3, #1
   2953c:	str	r3, [sp]
   29540:	ldr	r3, [fp, #-12]
   29544:	ldr	r2, [fp, #-8]
   29548:	mov	r1, #0
   2954c:	ldr	r0, [fp, #-16]
   29550:	bl	29400 <flatcc_builder_default_alloc@@Base+0x6c4>
   29554:	mov	r2, r0
   29558:	ldr	r3, [fp, #-16]
   2955c:	str	r2, [r3, #4]
   29560:	ldr	r3, [fp, #-16]
   29564:	ldr	r3, [r3, #4]
   29568:	cmp	r3, #0
   2956c:	bne	29578 <flatcc_builder_default_alloc@@Base+0x83c>
   29570:	mvn	r3, #0
   29574:	b	295f0 <flatcc_builder_default_alloc@@Base+0x8b4>
   29578:	ldr	r3, [fp, #-16]
   2957c:	ldr	r3, [r3, #4]
   29580:	add	r2, r3, #4
   29584:	ldr	r3, [fp, #-16]
   29588:	str	r2, [r3, #4]
   2958c:	ldr	r3, [fp, #-16]
   29590:	ldr	r3, [r3, #32]
   29594:	ldr	r3, [r3, #20]
   29598:	str	r3, [fp, #-8]
   2959c:	ldr	r3, [fp, #-20]	; 0xffffffec
   295a0:	lsl	r3, r3, #1
   295a4:	add	r3, r3, #1
   295a8:	str	r3, [fp, #-12]
   295ac:	mov	r3, #0
   295b0:	str	r3, [sp]
   295b4:	ldr	r3, [fp, #-12]
   295b8:	ldr	r2, [fp, #-8]
   295bc:	mov	r1, #3
   295c0:	ldr	r0, [fp, #-16]
   295c4:	bl	29400 <flatcc_builder_default_alloc@@Base+0x6c4>
   295c8:	mov	r2, r0
   295cc:	ldr	r3, [fp, #-16]
   295d0:	str	r2, [r3]
   295d4:	ldr	r3, [fp, #-16]
   295d8:	ldr	r3, [r3]
   295dc:	cmp	r3, #0
   295e0:	bne	295ec <flatcc_builder_default_alloc@@Base+0x8b0>
   295e4:	mvn	r3, #0
   295e8:	b	295f0 <flatcc_builder_default_alloc@@Base+0x8b4>
   295ec:	mov	r3, #0
   295f0:	mov	r0, r3
   295f4:	sub	sp, fp, #4
   295f8:	ldr	fp, [sp]
   295fc:	add	sp, sp, #4
   29600:	pop	{pc}		; (ldr pc, [sp], #4)
   29604:	str	r4, [sp, #-12]!
   29608:	str	fp, [sp, #4]
   2960c:	str	lr, [sp, #8]
   29610:	add	fp, sp, #8
   29614:	sub	sp, sp, #36	; 0x24
   29618:	str	r0, [fp, #-32]	; 0xffffffe0
   2961c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   29620:	add	r3, r3, #52	; 0x34
   29624:	add	r3, r3, #40	; 0x28
   29628:	str	r3, [fp, #-24]	; 0xffffffe8
   2962c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   29630:	ldr	r3, [r3, #124]	; 0x7c
   29634:	cmp	r3, #0
   29638:	beq	2965c <flatcc_builder_default_alloc@@Base+0x920>
   2963c:	ldr	r3, [pc, #292]	; 29768 <flatcc_builder_default_alloc@@Base+0xa2c>
   29640:	add	r3, pc, r3
   29644:	movw	r2, #342	; 0x156
   29648:	ldr	r1, [pc, #284]	; 2976c <flatcc_builder_default_alloc@@Base+0xa30>
   2964c:	add	r1, pc, r1
   29650:	ldr	r0, [pc, #280]	; 29770 <flatcc_builder_default_alloc@@Base+0xa34>
   29654:	add	r0, pc, r0
   29658:	bl	129e0 <__assert_fail@plt>
   2965c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   29660:	ldr	r2, [r3, #124]	; 0x7c
   29664:	mov	r3, #0
   29668:	str	r3, [sp]
   2966c:	mov	r3, #16
   29670:	mov	r1, #6
   29674:	ldr	r0, [fp, #-32]	; 0xffffffe0
   29678:	bl	29400 <flatcc_builder_default_alloc@@Base+0x6c4>
   2967c:	mov	r3, r0
   29680:	cmp	r3, #0
   29684:	bne	29690 <flatcc_builder_default_alloc@@Base+0x954>
   29688:	mvn	r3, #0
   2968c:	b	29750 <flatcc_builder_default_alloc@@Base+0xa14>
   29690:	ldr	r3, [fp, #-32]	; 0xffffffe0
   29694:	mov	r2, #16
   29698:	str	r2, [r3, #124]	; 0x7c
   2969c:	mov	r3, #256	; 0x100
   296a0:	str	r3, [fp, #-16]
   296a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   296a8:	ldr	r4, [r3, #48]	; 0x30
   296ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   296b0:	ldr	r0, [r3, #40]	; 0x28
   296b4:	mov	r3, #5
   296b8:	str	r3, [sp]
   296bc:	mov	r3, #1
   296c0:	ldr	r2, [fp, #-16]
   296c4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   296c8:	blx	r4
   296cc:	mov	r3, r0
   296d0:	cmp	r3, #0
   296d4:	beq	296ec <flatcc_builder_default_alloc@@Base+0x9b0>
   296d8:	mvn	r3, #0
   296dc:	b	29750 <flatcc_builder_default_alloc@@Base+0xa14>
   296e0:	ldr	r3, [fp, #-16]
   296e4:	lsl	r3, r3, #1
   296e8:	str	r3, [fp, #-16]
   296ec:	ldr	r3, [fp, #-16]
   296f0:	lsl	r2, r3, #1
   296f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   296f8:	ldr	r3, [r3, #4]
   296fc:	cmp	r2, r3
   29700:	bls	296e0 <flatcc_builder_default_alloc@@Base+0x9a4>
   29704:	ldr	r3, [fp, #-16]
   29708:	lsr	r3, r3, #2
   2970c:	str	r3, [fp, #-16]
   29710:	mov	r3, #0
   29714:	str	r3, [fp, #-20]	; 0xffffffec
   29718:	b	29728 <flatcc_builder_default_alloc@@Base+0x9ec>
   2971c:	ldr	r3, [fp, #-20]	; 0xffffffec
   29720:	add	r3, r3, #1
   29724:	str	r3, [fp, #-20]	; 0xffffffec
   29728:	mov	r2, #1
   2972c:	ldr	r3, [fp, #-20]	; 0xffffffec
   29730:	lsl	r3, r2, r3
   29734:	ldr	r2, [fp, #-16]
   29738:	cmp	r2, r3
   2973c:	bhi	2971c <flatcc_builder_default_alloc@@Base+0x9e0>
   29740:	ldr	r3, [fp, #-32]	; 0xffffffe0
   29744:	ldr	r2, [fp, #-20]	; 0xffffffec
   29748:	str	r2, [r3, #116]	; 0x74
   2974c:	mov	r3, #0
   29750:	mov	r0, r3
   29754:	sub	sp, fp, #8
   29758:	ldr	r4, [sp]
   2975c:	ldr	fp, [sp, #4]
   29760:	add	sp, sp, #8
   29764:	pop	{pc}		; (ldr pc, [sp], #4)
   29768:	andeq	sp, r0, r8, ror #6
   2976c:	andeq	ip, r0, r4, lsr pc
   29770:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   29774:	str	fp, [sp, #-8]!
   29778:	str	lr, [sp, #4]
   2977c:	add	fp, sp, #4
   29780:	sub	sp, sp, #16
   29784:	str	r0, [fp, #-16]
   29788:	str	r1, [fp, #-20]	; 0xffffffec
   2978c:	ldr	r3, [fp, #-16]
   29790:	ldr	r3, [r3, #116]	; 0x74
   29794:	cmp	r3, #0
   29798:	bne	297b8 <flatcc_builder_default_alloc@@Base+0xa7c>
   2979c:	ldr	r0, [fp, #-16]
   297a0:	bl	29604 <flatcc_builder_default_alloc@@Base+0x8c8>
   297a4:	mov	r3, r0
   297a8:	cmp	r3, #0
   297ac:	beq	297b8 <flatcc_builder_default_alloc@@Base+0xa7c>
   297b0:	mov	r3, #0
   297b4:	b	297e4 <flatcc_builder_default_alloc@@Base+0xaa8>
   297b8:	ldr	r3, [fp, #-16]
   297bc:	ldr	r3, [r3, #92]	; 0x5c
   297c0:	str	r3, [fp, #-8]
   297c4:	ldr	r3, [fp, #-16]
   297c8:	ldr	r3, [r3, #116]	; 0x74
   297cc:	rsb	r3, r3, #32
   297d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   297d4:	lsr	r3, r2, r3
   297d8:	lsl	r3, r3, #2
   297dc:	ldr	r2, [fp, #-8]
   297e0:	add	r3, r2, r3
   297e4:	mov	r0, r3
   297e8:	sub	sp, fp, #4
   297ec:	ldr	fp, [sp]
   297f0:	add	sp, sp, #4
   297f4:	pop	{pc}		; (ldr pc, [sp], #4)

000297f8 <flatcc_builder_flush_vtable_cache@@Base>:
   297f8:	str	fp, [sp, #-8]!
   297fc:	str	lr, [sp, #4]
   29800:	add	fp, sp, #4
   29804:	sub	sp, sp, #16
   29808:	str	r0, [fp, #-16]
   2980c:	ldr	r3, [fp, #-16]
   29810:	add	r3, r3, #52	; 0x34
   29814:	add	r3, r3, #40	; 0x28
   29818:	str	r3, [fp, #-8]
   2981c:	ldr	r3, [fp, #-16]
   29820:	ldr	r3, [r3, #116]	; 0x74
   29824:	cmp	r3, #0
   29828:	beq	29864 <flatcc_builder_flush_vtable_cache@@Base+0x6c>
   2982c:	ldr	r3, [fp, #-8]
   29830:	ldr	r0, [r3]
   29834:	ldr	r3, [fp, #-8]
   29838:	ldr	r3, [r3, #4]
   2983c:	mov	r2, r3
   29840:	mov	r1, #0
   29844:	bl	12998 <memset@plt>
   29848:	ldr	r3, [fp, #-16]
   2984c:	mov	r2, #16
   29850:	str	r2, [r3, #124]	; 0x7c
   29854:	ldr	r3, [fp, #-16]
   29858:	mov	r2, #0
   2985c:	str	r2, [r3, #120]	; 0x78
   29860:	b	29868 <flatcc_builder_flush_vtable_cache@@Base+0x70>
   29864:	nop	{0}
   29868:	sub	sp, fp, #4
   2986c:	ldr	fp, [sp]
   29870:	add	sp, sp, #4
   29874:	pop	{pc}		; (ldr pc, [sp], #4)

00029878 <flatcc_builder_custom_init@@Base>:
   29878:	str	r4, [sp, #-12]!
   2987c:	str	fp, [sp, #4]
   29880:	str	lr, [sp, #8]
   29884:	add	fp, sp, #8
   29888:	sub	sp, sp, #20
   2988c:	str	r0, [fp, #-16]
   29890:	str	r1, [fp, #-20]	; 0xffffffec
   29894:	str	r2, [fp, #-24]	; 0xffffffe8
   29898:	str	r3, [fp, #-28]	; 0xffffffe4
   2989c:	ldr	r4, [pc, #164]	; 29948 <flatcc_builder_custom_init@@Base+0xd0>
   298a0:	add	r4, pc, r4
   298a4:	mov	r2, #232	; 0xe8
   298a8:	mov	r1, #0
   298ac:	ldr	r0, [fp, #-16]
   298b0:	bl	12998 <memset@plt>
   298b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   298b8:	cmp	r3, #0
   298bc:	bne	298e4 <flatcc_builder_custom_init@@Base+0x6c>
   298c0:	ldr	r3, [fp, #-16]
   298c4:	mov	r2, #1
   298c8:	str	r2, [r3, #184]	; 0xb8
   298cc:	ldr	r3, [pc, #120]	; 2994c <flatcc_builder_custom_init@@Base+0xd4>
   298d0:	ldr	r3, [r4, r3]
   298d4:	str	r3, [fp, #-20]	; 0xffffffec
   298d8:	ldr	r3, [fp, #-16]
   298dc:	add	r3, r3, #188	; 0xbc
   298e0:	str	r3, [fp, #-24]	; 0xffffffe8
   298e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   298e8:	cmp	r3, #0
   298ec:	bne	298fc <flatcc_builder_custom_init@@Base+0x84>
   298f0:	ldr	r3, [pc, #88]	; 29950 <flatcc_builder_custom_init@@Base+0xd8>
   298f4:	ldr	r3, [r4, r3]
   298f8:	str	r3, [fp, #-28]	; 0xffffffe4
   298fc:	ldr	r3, [fp, #-16]
   29900:	ldr	r2, [fp, #4]
   29904:	str	r2, [r3, #40]	; 0x28
   29908:	ldr	r3, [fp, #-16]
   2990c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   29910:	str	r2, [r3, #48]	; 0x30
   29914:	ldr	r3, [fp, #-16]
   29918:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2991c:	str	r2, [r3, #36]	; 0x24
   29920:	ldr	r3, [fp, #-16]
   29924:	ldr	r2, [fp, #-20]	; 0xffffffec
   29928:	str	r2, [r3, #44]	; 0x2c
   2992c:	mov	r3, #0
   29930:	mov	r0, r3
   29934:	sub	sp, fp, #8
   29938:	ldr	r4, [sp]
   2993c:	ldr	fp, [sp, #4]
   29940:	add	sp, sp, #8
   29944:	pop	{pc}		; (ldr pc, [sp], #4)
   29948:	andeq	lr, r1, r8, asr r7
   2994c:	andeq	r0, r0, r4, ror r0
   29950:	andeq	r0, r0, r0, ror r0

00029954 <flatcc_builder_init@@Base>:
   29954:	str	fp, [sp, #-8]!
   29958:	str	lr, [sp, #4]
   2995c:	add	fp, sp, #4
   29960:	sub	sp, sp, #16
   29964:	str	r0, [fp, #-8]
   29968:	mov	r3, #0
   2996c:	str	r3, [sp]
   29970:	mov	r3, #0
   29974:	mov	r2, #0
   29978:	mov	r1, #0
   2997c:	ldr	r0, [fp, #-8]
   29980:	bl	29878 <flatcc_builder_custom_init@@Base>
   29984:	mov	r3, r0
   29988:	mov	r0, r3
   2998c:	sub	sp, fp, #4
   29990:	ldr	fp, [sp]
   29994:	add	sp, sp, #4
   29998:	pop	{pc}		; (ldr pc, [sp], #4)

0002999c <flatcc_builder_custom_reset@@Base>:
   2999c:	str	r4, [sp, #-12]!
   299a0:	str	fp, [sp, #4]
   299a4:	str	lr, [sp, #8]
   299a8:	add	fp, sp, #8
   299ac:	sub	sp, sp, #36	; 0x24
   299b0:	str	r0, [fp, #-24]	; 0xffffffe8
   299b4:	str	r1, [fp, #-28]	; 0xffffffe4
   299b8:	str	r2, [fp, #-32]	; 0xffffffe0
   299bc:	mov	r3, #0
   299c0:	str	r3, [fp, #-16]
   299c4:	b	29aa0 <flatcc_builder_custom_reset@@Base+0x104>
   299c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   299cc:	add	r2, r3, #52	; 0x34
   299d0:	ldr	r3, [fp, #-16]
   299d4:	lsl	r3, r3, #3
   299d8:	add	r3, r2, r3
   299dc:	str	r3, [fp, #-20]	; 0xffffffec
   299e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   299e4:	ldr	r3, [r3]
   299e8:	cmp	r3, #0
   299ec:	beq	29a64 <flatcc_builder_custom_reset@@Base+0xc8>
   299f0:	ldr	r3, [fp, #-16]
   299f4:	cmp	r3, #5
   299f8:	beq	29a44 <flatcc_builder_custom_reset@@Base+0xa8>
   299fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   29a00:	cmp	r3, #0
   29a04:	beq	29a44 <flatcc_builder_custom_reset@@Base+0xa8>
   29a08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29a0c:	ldr	r4, [r3, #48]	; 0x30
   29a10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29a14:	ldr	r0, [r3, #40]	; 0x28
   29a18:	ldr	r3, [fp, #-16]
   29a1c:	str	r3, [sp]
   29a20:	mov	r3, #1
   29a24:	mov	r2, #1
   29a28:	ldr	r1, [fp, #-20]	; 0xffffffec
   29a2c:	blx	r4
   29a30:	mov	r3, r0
   29a34:	cmp	r3, #0
   29a38:	beq	29a44 <flatcc_builder_custom_reset@@Base+0xa8>
   29a3c:	mvn	r3, #0
   29a40:	b	29bd0 <flatcc_builder_custom_reset@@Base+0x234>
   29a44:	ldr	r3, [fp, #-20]	; 0xffffffec
   29a48:	ldr	r0, [r3]
   29a4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   29a50:	ldr	r3, [r3, #4]
   29a54:	mov	r2, r3
   29a58:	mov	r1, #0
   29a5c:	bl	12998 <memset@plt>
   29a60:	b	29a94 <flatcc_builder_custom_reset@@Base+0xf8>
   29a64:	ldr	r3, [fp, #-20]	; 0xffffffec
   29a68:	ldr	r3, [r3, #4]
   29a6c:	cmp	r3, #0
   29a70:	beq	29a94 <flatcc_builder_custom_reset@@Base+0xf8>
   29a74:	ldr	r3, [pc, #364]	; 29be8 <flatcc_builder_custom_reset@@Base+0x24c>
   29a78:	add	r3, pc, r3
   29a7c:	movw	r2, #434	; 0x1b2
   29a80:	ldr	r1, [pc, #356]	; 29bec <flatcc_builder_custom_reset@@Base+0x250>
   29a84:	add	r1, pc, r1
   29a88:	ldr	r0, [pc, #352]	; 29bf0 <flatcc_builder_custom_reset@@Base+0x254>
   29a8c:	add	r0, pc, r0
   29a90:	bl	129e0 <__assert_fail@plt>
   29a94:	ldr	r3, [fp, #-16]
   29a98:	add	r3, r3, #1
   29a9c:	str	r3, [fp, #-16]
   29aa0:	ldr	r3, [fp, #-16]
   29aa4:	cmp	r3, #7
   29aa8:	ble	299c8 <flatcc_builder_custom_reset@@Base+0x2c>
   29aac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29ab0:	mov	r2, #0
   29ab4:	str	r2, [r3, #120]	; 0x78
   29ab8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29abc:	ldr	r3, [r3, #124]	; 0x7c
   29ac0:	cmp	r3, #0
   29ac4:	beq	29ad4 <flatcc_builder_custom_reset@@Base+0x138>
   29ac8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29acc:	mov	r2, #16
   29ad0:	str	r2, [r3, #124]	; 0x7c
   29ad4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29ad8:	mov	r2, #0
   29adc:	strh	r2, [r3, #128]	; 0x80
   29ae0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29ae4:	mov	r2, #0
   29ae8:	str	r2, [r3, #136]	; 0x88
   29aec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29af0:	mov	r2, #0
   29af4:	str	r2, [r3, #140]	; 0x8c
   29af8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29afc:	mov	r2, #0
   29b00:	str	r2, [r3, #156]	; 0x9c
   29b04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29b08:	mov	r2, #0
   29b0c:	str	r2, [r3, #160]	; 0xa0
   29b10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29b14:	mov	r2, #0
   29b18:	str	r2, [r3, #20]
   29b1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29b20:	mov	r2, #0
   29b24:	str	r2, [r3, #24]
   29b28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29b2c:	mov	r2, #0
   29b30:	str	r2, [r3, #148]	; 0x94
   29b34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29b38:	mov	r2, #0
   29b3c:	str	r2, [r3, #152]	; 0x98
   29b40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29b44:	ldr	r2, [r3, #60]	; 0x3c
   29b48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29b4c:	str	r2, [r3, #16]
   29b50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29b54:	ldr	r2, [r3, #76]	; 0x4c
   29b58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29b5c:	str	r2, [r3]
   29b60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29b64:	ldr	r2, [r3, #52]	; 0x34
   29b68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29b6c:	str	r2, [r3, #4]
   29b70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29b74:	mov	r2, #0
   29b78:	str	r2, [r3, #32]
   29b7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   29b80:	cmp	r3, #0
   29b84:	beq	29bac <flatcc_builder_custom_reset@@Base+0x210>
   29b88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29b8c:	mov	r2, #0
   29b90:	str	r2, [r3, #172]	; 0xac
   29b94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29b98:	mov	r2, #0
   29b9c:	str	r2, [r3, #176]	; 0xb0
   29ba0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29ba4:	mov	r2, #0
   29ba8:	str	r2, [r3, #180]	; 0xb4
   29bac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29bb0:	ldr	r3, [r3, #184]	; 0xb8
   29bb4:	cmp	r3, #0
   29bb8:	beq	29bcc <flatcc_builder_custom_reset@@Base+0x230>
   29bbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29bc0:	add	r3, r3, #188	; 0xbc
   29bc4:	mov	r0, r3
   29bc8:	bl	2f830 <flatcc_emitter_reset@@Base>
   29bcc:	mov	r3, #0
   29bd0:	mov	r0, r3
   29bd4:	sub	sp, fp, #8
   29bd8:	ldr	r4, [sp]
   29bdc:	ldr	fp, [sp, #4]
   29be0:	add	sp, sp, #8
   29be4:	pop	{pc}		; (ldr pc, [sp], #4)
   29be8:	andeq	ip, r0, ip, asr #30
   29bec:	strdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   29bf0:	andeq	ip, r0, r8, ror #22

00029bf4 <flatcc_builder_reset@@Base>:
   29bf4:	str	fp, [sp, #-8]!
   29bf8:	str	lr, [sp, #4]
   29bfc:	add	fp, sp, #4
   29c00:	sub	sp, sp, #8
   29c04:	str	r0, [fp, #-8]
   29c08:	mov	r2, #0
   29c0c:	mov	r1, #0
   29c10:	ldr	r0, [fp, #-8]
   29c14:	bl	2999c <flatcc_builder_custom_reset@@Base>
   29c18:	mov	r3, r0
   29c1c:	mov	r0, r3
   29c20:	sub	sp, fp, #4
   29c24:	ldr	fp, [sp]
   29c28:	add	sp, sp, #4
   29c2c:	pop	{pc}		; (ldr pc, [sp], #4)

00029c30 <flatcc_builder_clear@@Base>:
   29c30:	str	r4, [sp, #-12]!
   29c34:	str	fp, [sp, #4]
   29c38:	str	lr, [sp, #8]
   29c3c:	add	fp, sp, #8
   29c40:	sub	sp, sp, #28
   29c44:	str	r0, [fp, #-24]	; 0xffffffe8
   29c48:	mov	r3, #0
   29c4c:	str	r3, [fp, #-16]
   29c50:	b	29ca0 <flatcc_builder_clear@@Base+0x70>
   29c54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29c58:	add	r2, r3, #52	; 0x34
   29c5c:	ldr	r3, [fp, #-16]
   29c60:	lsl	r3, r3, #3
   29c64:	add	r3, r2, r3
   29c68:	str	r3, [fp, #-20]	; 0xffffffec
   29c6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29c70:	ldr	r4, [r3, #48]	; 0x30
   29c74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29c78:	ldr	r0, [r3, #40]	; 0x28
   29c7c:	ldr	r3, [fp, #-16]
   29c80:	str	r3, [sp]
   29c84:	mov	r3, #0
   29c88:	mov	r2, #0
   29c8c:	ldr	r1, [fp, #-20]	; 0xffffffec
   29c90:	blx	r4
   29c94:	ldr	r3, [fp, #-16]
   29c98:	add	r3, r3, #1
   29c9c:	str	r3, [fp, #-16]
   29ca0:	ldr	r3, [fp, #-16]
   29ca4:	cmp	r3, #7
   29ca8:	ble	29c54 <flatcc_builder_clear@@Base+0x24>
   29cac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29cb0:	ldr	r3, [r3, #184]	; 0xb8
   29cb4:	cmp	r3, #0
   29cb8:	beq	29ccc <flatcc_builder_clear@@Base+0x9c>
   29cbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29cc0:	add	r3, r3, #188	; 0xbc
   29cc4:	mov	r0, r3
   29cc8:	bl	2f9cc <flatcc_emitter_clear@@Base>
   29ccc:	mov	r2, #232	; 0xe8
   29cd0:	mov	r1, #0
   29cd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   29cd8:	bl	12998 <memset@plt>
   29cdc:	nop	{0}
   29ce0:	sub	sp, fp, #8
   29ce4:	ldr	r4, [sp]
   29ce8:	ldr	fp, [sp, #4]
   29cec:	add	sp, sp, #8
   29cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   29cf4:	push	{fp}		; (str fp, [sp, #-4]!)
   29cf8:	add	fp, sp, #0
   29cfc:	sub	sp, sp, #12
   29d00:	str	r0, [fp, #-8]
   29d04:	mov	r3, r1
   29d08:	strh	r3, [fp, #-10]
   29d0c:	ldr	r3, [fp, #-8]
   29d10:	ldrh	r3, [r3, #128]	; 0x80
   29d14:	ldrh	r2, [fp, #-10]
   29d18:	cmp	r2, r3
   29d1c:	bls	29d2c <flatcc_builder_clear@@Base+0xfc>
   29d20:	ldr	r3, [fp, #-8]
   29d24:	ldrh	r2, [fp, #-10]
   29d28:	strh	r2, [r3, #128]	; 0x80
   29d2c:	nop	{0}
   29d30:	add	sp, fp, #0
   29d34:	pop	{fp}		; (ldr fp, [sp], #4)
   29d38:	bx	lr
   29d3c:	push	{fp}		; (str fp, [sp, #-4]!)
   29d40:	add	fp, sp, #0
   29d44:	sub	sp, sp, #12
   29d48:	str	r0, [fp, #-8]
   29d4c:	mov	r3, r1
   29d50:	strh	r3, [fp, #-10]
   29d54:	ldr	r3, [fp, #-8]
   29d58:	ldrh	r3, [r3]
   29d5c:	ldrh	r2, [fp, #-10]
   29d60:	cmp	r2, r3
   29d64:	bls	29d74 <flatcc_builder_clear@@Base+0x144>
   29d68:	ldr	r3, [fp, #-8]
   29d6c:	ldrh	r2, [fp, #-10]
   29d70:	strh	r2, [r3]
   29d74:	nop	{0}
   29d78:	add	sp, fp, #0
   29d7c:	pop	{fp}		; (ldr fp, [sp], #4)
   29d80:	bx	lr

00029d84 <flatcc_builder_enter_user_frame_ptr@@Base>:
   29d84:	str	fp, [sp, #-8]!
   29d88:	str	lr, [sp, #4]
   29d8c:	add	fp, sp, #4
   29d90:	sub	sp, sp, #24
   29d94:	str	r0, [fp, #-16]
   29d98:	str	r1, [fp, #-20]	; 0xffffffec
   29d9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   29da0:	add	r3, r3, #3
   29da4:	bic	r3, r3, #3
   29da8:	add	r3, r3, #4
   29dac:	str	r3, [fp, #-20]	; 0xffffffec
   29db0:	ldr	r3, [fp, #-16]
   29db4:	ldr	r2, [r3, #228]	; 0xe4
   29db8:	mov	r3, #0
   29dbc:	str	r3, [sp]
   29dc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   29dc4:	mov	r1, #7
   29dc8:	ldr	r0, [fp, #-16]
   29dcc:	bl	29400 <flatcc_builder_default_alloc@@Base+0x6c4>
   29dd0:	str	r0, [fp, #-8]
   29dd4:	ldr	r3, [fp, #-8]
   29dd8:	cmp	r3, #0
   29ddc:	bne	29de8 <flatcc_builder_enter_user_frame_ptr@@Base+0x64>
   29de0:	mov	r3, #0
   29de4:	b	29e40 <flatcc_builder_enter_user_frame_ptr@@Base+0xbc>
   29de8:	ldr	r2, [fp, #-20]	; 0xffffffec
   29dec:	mov	r1, #0
   29df0:	ldr	r0, [fp, #-8]
   29df4:	bl	12998 <memset@plt>
   29df8:	ldr	r3, [fp, #-8]
   29dfc:	add	r2, r3, #4
   29e00:	str	r2, [fp, #-8]
   29e04:	ldr	r2, [fp, #-16]
   29e08:	ldr	r2, [r2, #224]	; 0xe0
   29e0c:	str	r2, [r3]
   29e10:	ldr	r3, [fp, #-16]
   29e14:	ldr	r3, [r3, #228]	; 0xe4
   29e18:	add	r2, r3, #4
   29e1c:	ldr	r3, [fp, #-16]
   29e20:	str	r2, [r3, #224]	; 0xe0
   29e24:	ldr	r3, [fp, #-16]
   29e28:	ldr	r2, [r3, #228]	; 0xe4
   29e2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   29e30:	add	r2, r2, r3
   29e34:	ldr	r3, [fp, #-16]
   29e38:	str	r2, [r3, #228]	; 0xe4
   29e3c:	ldr	r3, [fp, #-8]
   29e40:	mov	r0, r3
   29e44:	sub	sp, fp, #4
   29e48:	ldr	fp, [sp]
   29e4c:	add	sp, sp, #4
   29e50:	pop	{pc}		; (ldr pc, [sp], #4)

00029e54 <flatcc_builder_enter_user_frame@@Base>:
   29e54:	str	fp, [sp, #-8]!
   29e58:	str	lr, [sp, #4]
   29e5c:	add	fp, sp, #4
   29e60:	sub	sp, sp, #24
   29e64:	str	r0, [fp, #-16]
   29e68:	str	r1, [fp, #-20]	; 0xffffffec
   29e6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   29e70:	add	r3, r3, #3
   29e74:	bic	r3, r3, #3
   29e78:	add	r3, r3, #4
   29e7c:	str	r3, [fp, #-20]	; 0xffffffec
   29e80:	ldr	r3, [fp, #-16]
   29e84:	ldr	r2, [r3, #228]	; 0xe4
   29e88:	mov	r3, #0
   29e8c:	str	r3, [sp]
   29e90:	ldr	r3, [fp, #-20]	; 0xffffffec
   29e94:	mov	r1, #7
   29e98:	ldr	r0, [fp, #-16]
   29e9c:	bl	29400 <flatcc_builder_default_alloc@@Base+0x6c4>
   29ea0:	str	r0, [fp, #-8]
   29ea4:	ldr	r3, [fp, #-8]
   29ea8:	cmp	r3, #0
   29eac:	bne	29eb8 <flatcc_builder_enter_user_frame@@Base+0x64>
   29eb0:	mov	r3, #0
   29eb4:	b	29f14 <flatcc_builder_enter_user_frame@@Base+0xc0>
   29eb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   29ebc:	mov	r1, #0
   29ec0:	ldr	r0, [fp, #-8]
   29ec4:	bl	12998 <memset@plt>
   29ec8:	ldr	r3, [fp, #-8]
   29ecc:	add	r2, r3, #4
   29ed0:	str	r2, [fp, #-8]
   29ed4:	ldr	r2, [fp, #-16]
   29ed8:	ldr	r2, [r2, #224]	; 0xe0
   29edc:	str	r2, [r3]
   29ee0:	ldr	r3, [fp, #-16]
   29ee4:	ldr	r3, [r3, #228]	; 0xe4
   29ee8:	add	r2, r3, #4
   29eec:	ldr	r3, [fp, #-16]
   29ef0:	str	r2, [r3, #224]	; 0xe0
   29ef4:	ldr	r3, [fp, #-16]
   29ef8:	ldr	r2, [r3, #228]	; 0xe4
   29efc:	ldr	r3, [fp, #-20]	; 0xffffffec
   29f00:	add	r2, r2, r3
   29f04:	ldr	r3, [fp, #-16]
   29f08:	str	r2, [r3, #228]	; 0xe4
   29f0c:	ldr	r3, [fp, #-16]
   29f10:	ldr	r3, [r3, #224]	; 0xe0
   29f14:	mov	r0, r3
   29f18:	sub	sp, fp, #4
   29f1c:	ldr	fp, [sp]
   29f20:	add	sp, sp, #4
   29f24:	pop	{pc}		; (ldr pc, [sp], #4)

00029f28 <flatcc_builder_exit_user_frame@@Base>:
   29f28:	str	fp, [sp, #-8]!
   29f2c:	str	lr, [sp, #4]
   29f30:	add	fp, sp, #4
   29f34:	sub	sp, sp, #16
   29f38:	str	r0, [fp, #-16]
   29f3c:	ldr	r3, [fp, #-16]
   29f40:	ldr	r3, [r3, #224]	; 0xe0
   29f44:	cmp	r3, #0
   29f48:	bne	29f6c <flatcc_builder_exit_user_frame@@Base+0x44>
   29f4c:	ldr	r3, [pc, #112]	; 29fc4 <flatcc_builder_exit_user_frame@@Base+0x9c>
   29f50:	add	r3, pc, r3
   29f54:	movw	r2, #542	; 0x21e
   29f58:	ldr	r1, [pc, #104]	; 29fc8 <flatcc_builder_exit_user_frame@@Base+0xa0>
   29f5c:	add	r1, pc, r1
   29f60:	ldr	r0, [pc, #100]	; 29fcc <flatcc_builder_exit_user_frame@@Base+0xa4>
   29f64:	add	r0, pc, r0
   29f68:	bl	129e0 <__assert_fail@plt>
   29f6c:	ldr	r3, [fp, #-16]
   29f70:	ldr	r2, [r3, #108]	; 0x6c
   29f74:	ldr	r3, [fp, #-16]
   29f78:	ldr	r3, [r3, #224]	; 0xe0
   29f7c:	add	r3, r2, r3
   29f80:	str	r3, [fp, #-8]
   29f84:	ldr	r3, [fp, #-16]
   29f88:	ldr	r3, [r3, #224]	; 0xe0
   29f8c:	sub	r2, r3, #4
   29f90:	ldr	r3, [fp, #-16]
   29f94:	str	r2, [r3, #228]	; 0xe4
   29f98:	ldr	r3, [fp, #-8]
   29f9c:	ldr	r2, [r3, #-4]
   29fa0:	ldr	r3, [fp, #-16]
   29fa4:	str	r2, [r3, #224]	; 0xe0
   29fa8:	ldr	r3, [fp, #-16]
   29fac:	ldr	r3, [r3, #224]	; 0xe0
   29fb0:	mov	r0, r3
   29fb4:	sub	sp, fp, #4
   29fb8:	ldr	fp, [sp]
   29fbc:	add	sp, sp, #4
   29fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   29fc4:	muleq	r0, r0, sl
   29fc8:	andeq	ip, r0, r4, lsr #12
   29fcc:	andeq	ip, r0, r4, lsr #13

00029fd0 <flatcc_builder_exit_user_frame_at@@Base>:
   29fd0:	str	fp, [sp, #-8]!
   29fd4:	str	lr, [sp, #4]
   29fd8:	add	fp, sp, #4
   29fdc:	sub	sp, sp, #8
   29fe0:	str	r0, [fp, #-8]
   29fe4:	str	r1, [fp, #-12]
   29fe8:	ldr	r3, [fp, #-8]
   29fec:	ldr	r3, [r3, #224]	; 0xe0
   29ff0:	ldr	r2, [fp, #-12]
   29ff4:	cmp	r2, r3
   29ff8:	bls	2a01c <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   29ffc:	ldr	r3, [pc, #68]	; 2a048 <flatcc_builder_exit_user_frame_at@@Base+0x78>
   2a000:	add	r3, pc, r3
   2a004:	movw	r2, #551	; 0x227
   2a008:	ldr	r1, [pc, #60]	; 2a04c <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   2a00c:	add	r1, pc, r1
   2a010:	ldr	r0, [pc, #56]	; 2a050 <flatcc_builder_exit_user_frame_at@@Base+0x80>
   2a014:	add	r0, pc, r0
   2a018:	bl	129e0 <__assert_fail@plt>
   2a01c:	ldr	r3, [fp, #-8]
   2a020:	ldr	r2, [fp, #-12]
   2a024:	str	r2, [r3, #224]	; 0xe0
   2a028:	ldr	r0, [fp, #-8]
   2a02c:	bl	29f28 <flatcc_builder_exit_user_frame@@Base>
   2a030:	mov	r3, r0
   2a034:	mov	r0, r3
   2a038:	sub	sp, fp, #4
   2a03c:	ldr	fp, [sp]
   2a040:	add	sp, sp, #4
   2a044:	pop	{pc}		; (ldr pc, [sp], #4)
   2a048:	andeq	ip, r0, r0, lsl #20
   2a04c:	andeq	ip, r0, r4, ror r5
   2a050:	andeq	ip, r0, r0, lsl r6

0002a054 <flatcc_builder_get_current_user_frame@@Base>:
   2a054:	push	{fp}		; (str fp, [sp, #-4]!)
   2a058:	add	fp, sp, #0
   2a05c:	sub	sp, sp, #12
   2a060:	str	r0, [fp, #-8]
   2a064:	ldr	r3, [fp, #-8]
   2a068:	ldr	r3, [r3, #224]	; 0xe0
   2a06c:	mov	r0, r3
   2a070:	add	sp, fp, #0
   2a074:	pop	{fp}		; (ldr fp, [sp], #4)
   2a078:	bx	lr

0002a07c <flatcc_builder_get_user_frame_ptr@@Base>:
   2a07c:	push	{fp}		; (str fp, [sp, #-4]!)
   2a080:	add	fp, sp, #0
   2a084:	sub	sp, sp, #12
   2a088:	str	r0, [fp, #-8]
   2a08c:	str	r1, [fp, #-12]
   2a090:	ldr	r3, [fp, #-8]
   2a094:	ldr	r2, [r3, #108]	; 0x6c
   2a098:	ldr	r3, [fp, #-12]
   2a09c:	add	r3, r2, r3
   2a0a0:	mov	r0, r3
   2a0a4:	add	sp, fp, #0
   2a0a8:	pop	{fp}		; (ldr fp, [sp], #4)
   2a0ac:	bx	lr
   2a0b0:	str	fp, [sp, #-8]!
   2a0b4:	str	lr, [sp, #4]
   2a0b8:	add	fp, sp, #4
   2a0bc:	sub	sp, sp, #16
   2a0c0:	str	r0, [fp, #-8]
   2a0c4:	mov	r3, r1
   2a0c8:	strh	r3, [fp, #-10]
   2a0cc:	ldr	r3, [fp, #-8]
   2a0d0:	ldr	r3, [r3, #156]	; 0x9c
   2a0d4:	add	r2, r3, #1
   2a0d8:	ldr	r3, [fp, #-8]
   2a0dc:	str	r2, [r3, #156]	; 0x9c
   2a0e0:	ldr	r3, [fp, #-8]
   2a0e4:	ldr	r2, [r3, #156]	; 0x9c
   2a0e8:	ldr	r3, [fp, #-8]
   2a0ec:	ldr	r3, [r3, #160]	; 0xa0
   2a0f0:	cmp	r2, r3
   2a0f4:	ble	2a1e8 <flatcc_builder_get_user_frame_ptr@@Base+0x16c>
   2a0f8:	ldr	r3, [fp, #-8]
   2a0fc:	ldr	r3, [r3, #176]	; 0xb0
   2a100:	cmp	r3, #0
   2a104:	ble	2a128 <flatcc_builder_get_user_frame_ptr@@Base+0xac>
   2a108:	ldr	r3, [fp, #-8]
   2a10c:	ldr	r2, [r3, #156]	; 0x9c
   2a110:	ldr	r3, [fp, #-8]
   2a114:	ldr	r3, [r3, #176]	; 0xb0
   2a118:	cmp	r2, r3
   2a11c:	ble	2a128 <flatcc_builder_get_user_frame_ptr@@Base+0xac>
   2a120:	mvn	r3, #0
   2a124:	b	2a288 <flatcc_builder_get_user_frame_ptr@@Base+0x20c>
   2a128:	ldr	r3, [fp, #-8]
   2a12c:	ldr	r3, [r3, #156]	; 0x9c
   2a130:	sub	r3, r3, #1
   2a134:	mov	r2, r3
   2a138:	mov	r3, r2
   2a13c:	lsl	r3, r3, #3
   2a140:	add	r3, r3, r2
   2a144:	lsl	r3, r3, #2
   2a148:	mov	r2, r3
   2a14c:	mov	r3, #0
   2a150:	str	r3, [sp]
   2a154:	mov	r3, #36	; 0x24
   2a158:	mov	r1, #4
   2a15c:	ldr	r0, [fp, #-8]
   2a160:	bl	29400 <flatcc_builder_default_alloc@@Base+0x6c4>
   2a164:	mov	r2, r0
   2a168:	ldr	r3, [fp, #-8]
   2a16c:	str	r2, [r3, #32]
   2a170:	ldr	r3, [fp, #-8]
   2a174:	ldr	r3, [r3, #32]
   2a178:	cmp	r3, #0
   2a17c:	bne	2a188 <flatcc_builder_get_user_frame_ptr@@Base+0x10c>
   2a180:	mvn	r3, #0
   2a184:	b	2a288 <flatcc_builder_get_user_frame_ptr@@Base+0x20c>
   2a188:	ldr	r3, [fp, #-8]
   2a18c:	ldr	r2, [r3, #88]	; 0x58
   2a190:	movw	r3, #36409	; 0x8e39
   2a194:	movt	r3, #14563	; 0x38e3
   2a198:	umull	r2, r3, r3, r2
   2a19c:	lsr	r3, r3, #3
   2a1a0:	mov	r2, r3
   2a1a4:	ldr	r3, [fp, #-8]
   2a1a8:	str	r2, [r3, #160]	; 0xa0
   2a1ac:	ldr	r3, [fp, #-8]
   2a1b0:	ldr	r3, [r3, #176]	; 0xb0
   2a1b4:	cmp	r3, #0
   2a1b8:	ble	2a1fc <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   2a1bc:	ldr	r3, [fp, #-8]
   2a1c0:	ldr	r2, [r3, #176]	; 0xb0
   2a1c4:	ldr	r3, [fp, #-8]
   2a1c8:	ldr	r3, [r3, #160]	; 0xa0
   2a1cc:	cmp	r2, r3
   2a1d0:	bge	2a1fc <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   2a1d4:	ldr	r3, [fp, #-8]
   2a1d8:	ldr	r2, [r3, #176]	; 0xb0
   2a1dc:	ldr	r3, [fp, #-8]
   2a1e0:	str	r2, [r3, #160]	; 0xa0
   2a1e4:	b	2a1fc <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   2a1e8:	ldr	r3, [fp, #-8]
   2a1ec:	ldr	r3, [r3, #32]
   2a1f0:	add	r2, r3, #36	; 0x24
   2a1f4:	ldr	r3, [fp, #-8]
   2a1f8:	str	r2, [r3, #32]
   2a1fc:	ldr	r3, [fp, #-8]
   2a200:	ldr	r3, [r3, #32]
   2a204:	ldr	r2, [fp, #-8]
   2a208:	ldr	r2, [r2, #20]
   2a20c:	str	r2, [r3, #8]
   2a210:	ldr	r3, [fp, #-8]
   2a214:	ldr	r3, [r3, #32]
   2a218:	ldr	r2, [fp, #-8]
   2a21c:	ldrh	r2, [r2, #130]	; 0x82
   2a220:	strh	r2, [r3, #12]
   2a224:	ldr	r3, [fp, #-8]
   2a228:	ldrh	r2, [fp, #-10]
   2a22c:	strh	r2, [r3, #130]	; 0x82
   2a230:	ldr	r3, [fp, #-8]
   2a234:	ldr	r3, [r3, #32]
   2a238:	ldr	r2, [fp, #-8]
   2a23c:	ldr	r2, [r2, #28]
   2a240:	str	r2, [r3]
   2a244:	ldr	r3, [fp, #-8]
   2a248:	ldr	r3, [r3, #32]
   2a24c:	mvn	r2, #3
   2a250:	str	r2, [r3, #4]
   2a254:	ldr	r3, [fp, #-8]
   2a258:	ldr	r2, [r3, #28]
   2a25c:	ldr	r3, [fp, #-8]
   2a260:	ldr	r3, [r3, #20]
   2a264:	add	r3, r2, r3
   2a268:	add	r3, r3, #7
   2a26c:	bic	r2, r3, #7
   2a270:	ldr	r3, [fp, #-8]
   2a274:	str	r2, [r3, #28]
   2a278:	ldr	r3, [fp, #-8]
   2a27c:	mov	r2, #0
   2a280:	str	r2, [r3, #20]
   2a284:	mov	r3, #0
   2a288:	mov	r0, r3
   2a28c:	sub	sp, fp, #4
   2a290:	ldr	fp, [sp]
   2a294:	add	sp, sp, #4
   2a298:	pop	{pc}		; (ldr pc, [sp], #4)
   2a29c:	str	fp, [sp, #-8]!
   2a2a0:	str	lr, [sp, #4]
   2a2a4:	add	fp, sp, #4
   2a2a8:	sub	sp, sp, #8
   2a2ac:	str	r0, [fp, #-8]
   2a2b0:	ldr	r3, [fp, #-8]
   2a2b4:	ldr	r0, [r3, #16]
   2a2b8:	ldr	r3, [fp, #-8]
   2a2bc:	ldr	r3, [r3, #20]
   2a2c0:	mov	r2, r3
   2a2c4:	mov	r1, #0
   2a2c8:	bl	12998 <memset@plt>
   2a2cc:	ldr	r3, [fp, #-8]
   2a2d0:	ldr	r3, [r3, #32]
   2a2d4:	ldr	r2, [r3, #8]
   2a2d8:	ldr	r3, [fp, #-8]
   2a2dc:	str	r2, [r3, #20]
   2a2e0:	ldr	r3, [fp, #-8]
   2a2e4:	ldr	r3, [r3, #32]
   2a2e8:	ldr	r2, [r3]
   2a2ec:	ldr	r3, [fp, #-8]
   2a2f0:	str	r2, [r3, #28]
   2a2f4:	ldr	r3, [fp, #-8]
   2a2f8:	ldr	r3, [r3, #32]
   2a2fc:	ldr	r3, [r3, #4]
   2a300:	mov	r1, r3
   2a304:	ldr	r0, [fp, #-8]
   2a308:	bl	28f10 <flatcc_builder_default_alloc@@Base+0x1d4>
   2a30c:	ldr	r3, [fp, #-8]
   2a310:	ldrh	r3, [r3, #130]	; 0x82
   2a314:	mov	r1, r3
   2a318:	ldr	r0, [fp, #-8]
   2a31c:	bl	29cf4 <flatcc_builder_clear@@Base+0xc4>
   2a320:	ldr	r3, [fp, #-8]
   2a324:	ldr	r3, [r3, #32]
   2a328:	ldrh	r2, [r3, #12]
   2a32c:	ldr	r3, [fp, #-8]
   2a330:	strh	r2, [r3, #130]	; 0x82
   2a334:	ldr	r3, [fp, #-8]
   2a338:	ldr	r3, [r3, #32]
   2a33c:	sub	r2, r3, #36	; 0x24
   2a340:	ldr	r3, [fp, #-8]
   2a344:	str	r2, [r3, #32]
   2a348:	ldr	r3, [fp, #-8]
   2a34c:	ldr	r3, [r3, #156]	; 0x9c
   2a350:	sub	r2, r3, #1
   2a354:	ldr	r3, [fp, #-8]
   2a358:	str	r2, [r3, #156]	; 0x9c
   2a35c:	nop	{0}
   2a360:	sub	sp, fp, #4
   2a364:	ldr	fp, [sp]
   2a368:	add	sp, sp, #4
   2a36c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a370:	push	{fp}		; (str fp, [sp, #-4]!)
   2a374:	add	fp, sp, #0
   2a378:	sub	sp, sp, #20
   2a37c:	str	r0, [fp, #-8]
   2a380:	str	r1, [fp, #-12]
   2a384:	mov	r3, r2
   2a388:	strh	r3, [fp, #-14]
   2a38c:	ldr	r3, [fp, #-8]
   2a390:	ldr	r3, [r3, #136]	; 0x88
   2a394:	mov	r2, r3
   2a398:	ldr	r3, [fp, #-12]
   2a39c:	sub	r3, r2, r3
   2a3a0:	ldrh	r2, [fp, #-14]
   2a3a4:	sub	r2, r2, #1
   2a3a8:	and	r3, r3, r2
   2a3ac:	mov	r0, r3
   2a3b0:	add	sp, fp, #0
   2a3b4:	pop	{fp}		; (ldr fp, [sp], #4)
   2a3b8:	bx	lr
   2a3bc:	push	{fp}		; (str fp, [sp, #-4]!)
   2a3c0:	add	fp, sp, #0
   2a3c4:	sub	sp, sp, #12
   2a3c8:	str	r0, [fp, #-8]
   2a3cc:	mov	r3, r1
   2a3d0:	strh	r3, [fp, #-10]
   2a3d4:	ldr	r3, [fp, #-8]
   2a3d8:	ldr	r2, [r3, #140]	; 0x8c
   2a3dc:	ldrh	r3, [fp, #-10]
   2a3e0:	sub	r3, r3, #1
   2a3e4:	and	r3, r3, r2
   2a3e8:	mov	r0, r3
   2a3ec:	add	sp, fp, #0
   2a3f0:	pop	{fp}		; (ldr fp, [sp], #4)
   2a3f4:	bx	lr
   2a3f8:	str	r4, [sp, #-12]!
   2a3fc:	str	fp, [sp, #4]
   2a400:	str	lr, [sp, #8]
   2a404:	add	fp, sp, #8
   2a408:	sub	sp, sp, #28
   2a40c:	str	r0, [fp, #-24]	; 0xffffffe8
   2a410:	str	r1, [fp, #-28]	; 0xffffffe4
   2a414:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a418:	ldr	r3, [r3, #136]	; 0x88
   2a41c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2a420:	ldr	r2, [r2]
   2a424:	sub	r3, r3, r2
   2a428:	str	r3, [fp, #-16]
   2a42c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a430:	ldr	r3, [r3, #136]	; 0x88
   2a434:	ldr	r2, [fp, #-16]
   2a438:	cmp	r2, r3
   2a43c:	blt	2a460 <flatcc_builder_get_user_frame_ptr@@Base+0x3e4>
   2a440:	ldr	r3, [pc, #164]	; 2a4ec <flatcc_builder_get_user_frame_ptr@@Base+0x470>
   2a444:	add	r3, pc, r3
   2a448:	movw	r2, #647	; 0x287
   2a44c:	ldr	r1, [pc, #156]	; 2a4f0 <flatcc_builder_get_user_frame_ptr@@Base+0x474>
   2a450:	add	r1, pc, r1
   2a454:	ldr	r0, [pc, #152]	; 2a4f4 <flatcc_builder_get_user_frame_ptr@@Base+0x478>
   2a458:	add	r0, pc, r0
   2a45c:	bl	129e0 <__assert_fail@plt>
   2a460:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a464:	ldr	r4, [r3, #44]	; 0x2c
   2a468:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a46c:	ldr	r0, [r3, #36]	; 0x24
   2a470:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a474:	add	r1, r3, #8
   2a478:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a47c:	ldr	r2, [r3, #4]
   2a480:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a484:	ldr	r3, [r3]
   2a488:	str	r3, [sp]
   2a48c:	ldr	r3, [fp, #-16]
   2a490:	blx	r4
   2a494:	mov	r3, r0
   2a498:	cmp	r3, #0
   2a49c:	beq	2a4c0 <flatcc_builder_get_user_frame_ptr@@Base+0x444>
   2a4a0:	ldr	r3, [pc, #80]	; 2a4f8 <flatcc_builder_get_user_frame_ptr@@Base+0x47c>
   2a4a4:	add	r3, pc, r3
   2a4a8:	movw	r2, #651	; 0x28b
   2a4ac:	ldr	r1, [pc, #72]	; 2a4fc <flatcc_builder_get_user_frame_ptr@@Base+0x480>
   2a4b0:	add	r1, pc, r1
   2a4b4:	ldr	r0, [pc, #68]	; 2a500 <flatcc_builder_get_user_frame_ptr@@Base+0x484>
   2a4b8:	add	r0, pc, r0
   2a4bc:	bl	129e0 <__assert_fail@plt>
   2a4c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a4c4:	ldr	r2, [fp, #-16]
   2a4c8:	str	r2, [r3, #136]	; 0x88
   2a4cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a4d0:	ldr	r3, [r3, #136]	; 0x88
   2a4d4:	mov	r0, r3
   2a4d8:	sub	sp, fp, #8
   2a4dc:	ldr	r4, [sp]
   2a4e0:	ldr	fp, [sp, #4]
   2a4e4:	add	sp, sp, #8
   2a4e8:	pop	{pc}		; (ldr pc, [sp], #4)
   2a4ec:	strdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   2a4f0:	andeq	ip, r0, r0, lsr r1
   2a4f4:	andeq	ip, r0, r8, lsl #3
   2a4f8:	muleq	r0, ip, r5
   2a4fc:	ldrdeq	ip, [r0], -r0
   2a500:	andeq	ip, r0, r8, lsr #2
   2a504:	str	r4, [sp, #-12]!
   2a508:	str	fp, [sp, #4]
   2a50c:	str	lr, [sp, #8]
   2a510:	add	fp, sp, #8
   2a514:	sub	sp, sp, #28
   2a518:	str	r0, [fp, #-24]	; 0xffffffe8
   2a51c:	str	r1, [fp, #-28]	; 0xffffffe4
   2a520:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a524:	ldr	r3, [r3, #140]	; 0x8c
   2a528:	str	r3, [fp, #-16]
   2a52c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a530:	ldr	r3, [r3]
   2a534:	mov	r2, r3
   2a538:	ldr	r3, [fp, #-16]
   2a53c:	add	r2, r2, r3
   2a540:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a544:	str	r2, [r3, #140]	; 0x8c
   2a548:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a54c:	ldr	r3, [r3, #140]	; 0x8c
   2a550:	ldr	r2, [fp, #-16]
   2a554:	cmp	r2, r3
   2a558:	ble	2a57c <flatcc_builder_get_user_frame_ptr@@Base+0x500>
   2a55c:	ldr	r3, [pc, #152]	; 2a5fc <flatcc_builder_get_user_frame_ptr@@Base+0x580>
   2a560:	add	r3, pc, r3
   2a564:	movw	r2, #673	; 0x2a1
   2a568:	ldr	r1, [pc, #144]	; 2a600 <flatcc_builder_get_user_frame_ptr@@Base+0x584>
   2a56c:	add	r1, pc, r1
   2a570:	ldr	r0, [pc, #140]	; 2a604 <flatcc_builder_get_user_frame_ptr@@Base+0x588>
   2a574:	add	r0, pc, r0
   2a578:	bl	129e0 <__assert_fail@plt>
   2a57c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a580:	ldr	r4, [r3, #44]	; 0x2c
   2a584:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a588:	ldr	r0, [r3, #36]	; 0x24
   2a58c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a590:	add	r1, r3, #8
   2a594:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a598:	ldr	r2, [r3, #4]
   2a59c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a5a0:	ldr	r3, [r3]
   2a5a4:	str	r3, [sp]
   2a5a8:	ldr	r3, [fp, #-16]
   2a5ac:	blx	r4
   2a5b0:	mov	r3, r0
   2a5b4:	cmp	r3, #0
   2a5b8:	beq	2a5dc <flatcc_builder_get_user_frame_ptr@@Base+0x560>
   2a5bc:	ldr	r3, [pc, #68]	; 2a608 <flatcc_builder_get_user_frame_ptr@@Base+0x58c>
   2a5c0:	add	r3, pc, r3
   2a5c4:	movw	r2, #677	; 0x2a5
   2a5c8:	ldr	r1, [pc, #60]	; 2a60c <flatcc_builder_get_user_frame_ptr@@Base+0x590>
   2a5cc:	add	r1, pc, r1
   2a5d0:	ldr	r0, [pc, #56]	; 2a610 <flatcc_builder_get_user_frame_ptr@@Base+0x594>
   2a5d4:	add	r0, pc, r0
   2a5d8:	bl	129e0 <__assert_fail@plt>
   2a5dc:	ldr	r3, [fp, #-16]
   2a5e0:	add	r3, r3, #1
   2a5e4:	mov	r0, r3
   2a5e8:	sub	sp, fp, #8
   2a5ec:	ldr	r4, [sp]
   2a5f0:	ldr	fp, [sp, #4]
   2a5f4:	add	sp, sp, #8
   2a5f8:	pop	{pc}		; (ldr pc, [sp], #4)
   2a5fc:	ldrdeq	ip, [r0], -r4
   2a600:	andeq	ip, r0, r4, lsl r0
   2a604:	andeq	ip, r0, ip, rrx
   2a608:	andeq	ip, r0, r4, ror r4
   2a60c:			; <UNDEFINED> instruction: 0x0000bfb4
   2a610:	andeq	ip, r0, ip
   2a614:	str	r4, [sp, #-12]!
   2a618:	str	fp, [sp, #4]
   2a61c:	str	lr, [sp, #8]
   2a620:	add	fp, sp, #8
   2a624:	sub	sp, sp, #100	; 0x64
   2a628:	str	r0, [fp, #-96]	; 0xffffffa0
   2a62c:	str	r1, [fp, #-100]	; 0xffffff9c
   2a630:	str	r3, [fp, #-108]	; 0xffffff94
   2a634:	mov	r3, r2
   2a638:	strh	r3, [fp, #-102]	; 0xffffff9a
   2a63c:	ldr	r4, [pc, #332]	; 2a790 <flatcc_builder_get_user_frame_ptr@@Base+0x714>
   2a640:	add	r4, pc, r4
   2a644:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   2a648:	cmp	r3, #0
   2a64c:	bne	2a674 <flatcc_builder_get_user_frame_ptr@@Base+0x5f8>
   2a650:	ldr	r3, [fp, #-96]	; 0xffffffa0
   2a654:	ldrh	r3, [r3, #132]	; 0x84
   2a658:	cmp	r3, #0
   2a65c:	beq	2a66c <flatcc_builder_get_user_frame_ptr@@Base+0x5f0>
   2a660:	ldr	r3, [fp, #-96]	; 0xffffffa0
   2a664:	ldrh	r3, [r3, #132]	; 0x84
   2a668:	b	2a678 <flatcc_builder_get_user_frame_ptr@@Base+0x5fc>
   2a66c:	mov	r3, #1
   2a670:	b	2a678 <flatcc_builder_get_user_frame_ptr@@Base+0x5fc>
   2a674:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   2a678:	strh	r3, [fp, #-102]	; 0xffffff9a
   2a67c:	mov	r1, #4
   2a680:	ldr	r0, [fp, #-100]	; 0xffffff9c
   2a684:	bl	29d3c <flatcc_builder_clear@@Base+0x10c>
   2a688:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   2a68c:	mov	r1, r3
   2a690:	ldr	r0, [fp, #-100]	; 0xffffff9c
   2a694:	bl	29d3c <flatcc_builder_clear@@Base+0x10c>
   2a698:	ldr	r3, [fp, #-108]	; 0xffffff94
   2a69c:	cmp	r3, #0
   2a6a0:	bne	2a774 <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   2a6a4:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   2a6a8:	mov	r1, r3
   2a6ac:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2a6b0:	bl	2a3bc <flatcc_builder_get_user_frame_ptr@@Base+0x340>
   2a6b4:	str	r0, [fp, #-16]
   2a6b8:	ldr	r3, [fp, #-16]
   2a6bc:	cmp	r3, #0
   2a6c0:	beq	2a774 <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   2a6c4:	mov	r3, #0
   2a6c8:	str	r3, [fp, #-88]	; 0xffffffa8
   2a6cc:	mov	r3, #0
   2a6d0:	str	r3, [fp, #-84]	; 0xffffffac
   2a6d4:	ldr	r3, [fp, #-16]
   2a6d8:	cmp	r3, #0
   2a6dc:	beq	2a738 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   2a6e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   2a6e4:	ldr	r3, [fp, #-16]
   2a6e8:	add	r3, r2, r3
   2a6ec:	str	r3, [fp, #-88]	; 0xffffffa8
   2a6f0:	ldr	r3, [fp, #-84]	; 0xffffffac
   2a6f4:	add	r3, r3, #1
   2a6f8:	lsl	r3, r3, #3
   2a6fc:	sub	r2, fp, #12
   2a700:	add	r3, r2, r3
   2a704:	ldr	r2, [pc, #136]	; 2a794 <flatcc_builder_get_user_frame_ptr@@Base+0x718>
   2a708:	ldr	r2, [r4, r2]
   2a70c:	str	r2, [r3, #-76]	; 0xffffffb4
   2a710:	ldr	r3, [fp, #-84]	; 0xffffffac
   2a714:	add	r3, r3, #1
   2a718:	lsl	r3, r3, #3
   2a71c:	sub	r2, fp, #12
   2a720:	add	r3, r2, r3
   2a724:	ldr	r2, [fp, #-16]
   2a728:	str	r2, [r3, #-72]	; 0xffffffb8
   2a72c:	ldr	r3, [fp, #-84]	; 0xffffffac
   2a730:	add	r3, r3, #1
   2a734:	str	r3, [fp, #-84]	; 0xffffffac
   2a738:	sub	r3, fp, #88	; 0x58
   2a73c:	mov	r1, r3
   2a740:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2a744:	bl	2a504 <flatcc_builder_get_user_frame_ptr@@Base+0x488>
   2a748:	mov	r3, r0
   2a74c:	cmp	r3, #0
   2a750:	bne	2a774 <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   2a754:	ldr	r3, [pc, #60]	; 2a798 <flatcc_builder_get_user_frame_ptr@@Base+0x71c>
   2a758:	add	r3, pc, r3
   2a75c:	movw	r2, #702	; 0x2be
   2a760:	ldr	r1, [pc, #52]	; 2a79c <flatcc_builder_get_user_frame_ptr@@Base+0x720>
   2a764:	add	r1, pc, r1
   2a768:	ldr	r0, [pc, #48]	; 2a7a0 <flatcc_builder_get_user_frame_ptr@@Base+0x724>
   2a76c:	add	r0, pc, r0
   2a770:	bl	129e0 <__assert_fail@plt>
   2a774:	mov	r3, #0
   2a778:	mov	r0, r3
   2a77c:	sub	sp, fp, #8
   2a780:	ldr	r4, [sp]
   2a784:	ldr	fp, [sp, #4]
   2a788:	add	sp, sp, #8
   2a78c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a790:			; <UNDEFINED> instruction: 0x0001d9b8
   2a794:	andeq	r0, r0, r4, rrx
   2a798:	andeq	ip, r0, ip, asr #5
   2a79c:	andeq	fp, r0, ip, lsl lr
   2a7a0:	andeq	fp, r0, r4, ror lr

0002a7a4 <flatcc_builder_embed_buffer@@Base>:
   2a7a4:	str	r4, [sp, #-12]!
   2a7a8:	str	fp, [sp, #4]
   2a7ac:	str	lr, [sp, #8]
   2a7b0:	add	fp, sp, #8
   2a7b4:	sub	sp, sp, #108	; 0x6c
   2a7b8:	str	r0, [fp, #-104]	; 0xffffff98
   2a7bc:	str	r2, [fp, #-112]	; 0xffffff90
   2a7c0:	str	r3, [fp, #-116]	; 0xffffff8c
   2a7c4:	mov	r3, r1
   2a7c8:	strh	r3, [fp, #-106]	; 0xffffff96
   2a7cc:	ldr	r4, [pc, #504]	; 2a9cc <flatcc_builder_embed_buffer@@Base+0x228>
   2a7d0:	add	r4, pc, r4
   2a7d4:	ldr	r3, [fp, #8]
   2a7d8:	and	r3, r3, #2
   2a7dc:	str	r3, [fp, #-16]
   2a7e0:	ldr	r3, [fp, #-104]	; 0xffffff98
   2a7e4:	ldr	r3, [r3, #152]	; 0x98
   2a7e8:	cmp	r3, #0
   2a7ec:	movne	r3, #1
   2a7f0:	moveq	r3, #0
   2a7f4:	uxtb	r3, r3
   2a7f8:	ldrh	r2, [fp, #-106]	; 0xffffff96
   2a7fc:	add	r1, fp, #4
   2a800:	ldr	r0, [fp, #-104]	; 0xffffff98
   2a804:	bl	2a614 <flatcc_builder_get_user_frame_ptr@@Base+0x598>
   2a808:	mov	r3, r0
   2a80c:	cmp	r3, #0
   2a810:	beq	2a81c <flatcc_builder_embed_buffer@@Base+0x78>
   2a814:	mov	r3, #0
   2a818:	b	2a9b4 <flatcc_builder_embed_buffer@@Base+0x210>
   2a81c:	ldr	r3, [fp, #-16]
   2a820:	cmp	r3, #0
   2a824:	beq	2a830 <flatcc_builder_embed_buffer@@Base+0x8c>
   2a828:	mov	r2, #4
   2a82c:	b	2a834 <flatcc_builder_embed_buffer@@Base+0x90>
   2a830:	mov	r2, #0
   2a834:	ldr	r3, [fp, #-116]	; 0xffffff8c
   2a838:	add	r3, r2, r3
   2a83c:	ldrh	r2, [fp, #4]
   2a840:	mov	r1, r3
   2a844:	ldr	r0, [fp, #-104]	; 0xffffff98
   2a848:	bl	2a370 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   2a84c:	str	r0, [fp, #-20]	; 0xffffffec
   2a850:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2a854:	ldr	r3, [fp, #-20]	; 0xffffffec
   2a858:	add	r3, r2, r3
   2a85c:	mov	r0, r3
   2a860:	bl	28bec <main@@Base+0x53c>
   2a864:	mov	r3, r0
   2a868:	str	r3, [fp, #-24]	; 0xffffffe8
   2a86c:	mov	r3, #0
   2a870:	str	r3, [fp, #-96]	; 0xffffffa0
   2a874:	mov	r3, #0
   2a878:	str	r3, [fp, #-92]	; 0xffffffa4
   2a87c:	ldr	r3, [fp, #-104]	; 0xffffff98
   2a880:	ldr	r3, [r3, #152]	; 0x98
   2a884:	cmp	r3, #0
   2a888:	beq	2a8dc <flatcc_builder_embed_buffer@@Base+0x138>
   2a88c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   2a890:	add	r3, r3, #4
   2a894:	str	r3, [fp, #-96]	; 0xffffffa0
   2a898:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2a89c:	add	r3, r3, #1
   2a8a0:	lsl	r3, r3, #3
   2a8a4:	sub	r2, fp, #12
   2a8a8:	add	r3, r2, r3
   2a8ac:	sub	r2, fp, #24
   2a8b0:	str	r2, [r3, #-84]	; 0xffffffac
   2a8b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2a8b8:	add	r3, r3, #1
   2a8bc:	lsl	r3, r3, #3
   2a8c0:	sub	r2, fp, #12
   2a8c4:	add	r3, r2, r3
   2a8c8:	mov	r2, #4
   2a8cc:	str	r2, [r3, #-80]	; 0xffffffb0
   2a8d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2a8d4:	add	r3, r3, #1
   2a8d8:	str	r3, [fp, #-92]	; 0xffffffa4
   2a8dc:	ldr	r3, [fp, #-116]	; 0xffffff8c
   2a8e0:	cmp	r3, #0
   2a8e4:	beq	2a93c <flatcc_builder_embed_buffer@@Base+0x198>
   2a8e8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   2a8ec:	ldr	r3, [fp, #-116]	; 0xffffff8c
   2a8f0:	add	r3, r2, r3
   2a8f4:	str	r3, [fp, #-96]	; 0xffffffa0
   2a8f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2a8fc:	add	r3, r3, #1
   2a900:	lsl	r3, r3, #3
   2a904:	sub	r2, fp, #12
   2a908:	add	r3, r2, r3
   2a90c:	ldr	r2, [fp, #-112]	; 0xffffff90
   2a910:	str	r2, [r3, #-84]	; 0xffffffac
   2a914:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2a918:	add	r3, r3, #1
   2a91c:	lsl	r3, r3, #3
   2a920:	sub	r2, fp, #12
   2a924:	add	r3, r2, r3
   2a928:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2a92c:	str	r2, [r3, #-80]	; 0xffffffb0
   2a930:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2a934:	add	r3, r3, #1
   2a938:	str	r3, [fp, #-92]	; 0xffffffa4
   2a93c:	ldr	r3, [fp, #-20]	; 0xffffffec
   2a940:	cmp	r3, #0
   2a944:	beq	2a9a0 <flatcc_builder_embed_buffer@@Base+0x1fc>
   2a948:	ldr	r2, [fp, #-96]	; 0xffffffa0
   2a94c:	ldr	r3, [fp, #-20]	; 0xffffffec
   2a950:	add	r3, r2, r3
   2a954:	str	r3, [fp, #-96]	; 0xffffffa0
   2a958:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2a95c:	add	r3, r3, #1
   2a960:	lsl	r3, r3, #3
   2a964:	sub	r2, fp, #12
   2a968:	add	r3, r2, r3
   2a96c:	ldr	r2, [pc, #92]	; 2a9d0 <flatcc_builder_embed_buffer@@Base+0x22c>
   2a970:	ldr	r2, [r4, r2]
   2a974:	str	r2, [r3, #-84]	; 0xffffffac
   2a978:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2a97c:	add	r3, r3, #1
   2a980:	lsl	r3, r3, #3
   2a984:	sub	r2, fp, #12
   2a988:	add	r3, r2, r3
   2a98c:	ldr	r2, [fp, #-20]	; 0xffffffec
   2a990:	str	r2, [r3, #-80]	; 0xffffffb0
   2a994:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2a998:	add	r3, r3, #1
   2a99c:	str	r3, [fp, #-92]	; 0xffffffa4
   2a9a0:	sub	r3, fp, #96	; 0x60
   2a9a4:	mov	r1, r3
   2a9a8:	ldr	r0, [fp, #-104]	; 0xffffff98
   2a9ac:	bl	2a3f8 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   2a9b0:	mov	r3, r0
   2a9b4:	mov	r0, r3
   2a9b8:	sub	sp, fp, #8
   2a9bc:	ldr	r4, [sp]
   2a9c0:	ldr	fp, [sp, #4]
   2a9c4:	add	sp, sp, #8
   2a9c8:	pop	{pc}		; (ldr pc, [sp], #4)
   2a9cc:	andeq	sp, r1, r8, lsr #16
   2a9d0:	andeq	r0, r0, r4, rrx

0002a9d4 <flatcc_builder_create_buffer@@Base>:
   2a9d4:	str	r4, [sp, #-12]!
   2a9d8:	str	fp, [sp, #4]
   2a9dc:	str	lr, [sp, #8]
   2a9e0:	add	fp, sp, #8
   2a9e4:	sub	sp, sp, #132	; 0x84
   2a9e8:	str	r0, [fp, #-128]	; 0xffffff80
   2a9ec:	str	r1, [fp, #-132]	; 0xffffff7c
   2a9f0:	str	r3, [fp, #-140]	; 0xffffff74
   2a9f4:	mov	r3, r2
   2a9f8:	strh	r3, [fp, #-134]	; 0xffffff7a
   2a9fc:	ldr	r4, [pc, #944]	; 2adb4 <flatcc_builder_create_buffer@@Base+0x3e0>
   2aa00:	add	r4, pc, r4
   2aa04:	mov	r3, #0
   2aa08:	str	r3, [fp, #-16]
   2aa0c:	mov	r3, #0
   2aa10:	str	r3, [fp, #-120]	; 0xffffff88
   2aa14:	ldr	r3, [fp, #8]
   2aa18:	and	r3, r3, #1
   2aa1c:	cmp	r3, #0
   2aa20:	movne	r3, #1
   2aa24:	moveq	r3, #0
   2aa28:	uxtb	r3, r3
   2aa2c:	str	r3, [fp, #-20]	; 0xffffffec
   2aa30:	ldr	r3, [fp, #8]
   2aa34:	and	r3, r3, #2
   2aa38:	cmp	r3, #0
   2aa3c:	movne	r3, #1
   2aa40:	moveq	r3, #0
   2aa44:	uxtb	r3, r3
   2aa48:	str	r3, [fp, #-24]	; 0xffffffe8
   2aa4c:	ldrh	r2, [fp, #-134]	; 0xffffff7a
   2aa50:	ldr	r3, [fp, #-20]	; 0xffffffec
   2aa54:	add	r1, fp, #4
   2aa58:	ldr	r0, [fp, #-128]	; 0xffffff80
   2aa5c:	bl	2a614 <flatcc_builder_get_user_frame_ptr@@Base+0x598>
   2aa60:	mov	r3, r0
   2aa64:	cmp	r3, #0
   2aa68:	beq	2aa74 <flatcc_builder_create_buffer@@Base+0xa0>
   2aa6c:	mov	r3, #0
   2aa70:	b	2ad9c <flatcc_builder_create_buffer@@Base+0x3c8>
   2aa74:	ldrh	r3, [fp, #4]
   2aa78:	mov	r1, r3
   2aa7c:	ldr	r0, [fp, #-128]	; 0xffffff80
   2aa80:	bl	29cf4 <flatcc_builder_clear@@Base+0xc4>
   2aa84:	ldr	r3, [fp, #-132]	; 0xffffff7c
   2aa88:	cmp	r3, #0
   2aa8c:	beq	2aac4 <flatcc_builder_create_buffer@@Base+0xf0>
   2aa90:	ldr	r3, [fp, #-132]	; 0xffffff7c
   2aa94:	ldr	r3, [r3]
   2aa98:	str	r3, [fp, #-120]	; 0xffffff88
   2aa9c:	ldr	r3, [fp, #-120]	; 0xffffff88
   2aaa0:	mov	r0, r3
   2aaa4:	bl	28c38 <main@@Base+0x588>
   2aaa8:	mov	r3, r0
   2aaac:	str	r3, [fp, #-120]	; 0xffffff88
   2aab0:	ldr	r3, [fp, #-120]	; 0xffffff88
   2aab4:	mov	r0, r3
   2aab8:	bl	28bec <main@@Base+0x53c>
   2aabc:	mov	r3, r0
   2aac0:	str	r3, [fp, #-120]	; 0xffffff88
   2aac4:	ldr	r3, [fp, #-120]	; 0xffffff88
   2aac8:	cmp	r3, #0
   2aacc:	beq	2aad8 <flatcc_builder_create_buffer@@Base+0x104>
   2aad0:	mov	r3, #4
   2aad4:	b	2aadc <flatcc_builder_create_buffer@@Base+0x108>
   2aad8:	mov	r3, #0
   2aadc:	str	r3, [fp, #-16]
   2aae0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2aae4:	cmp	r3, #0
   2aae8:	beq	2aaf4 <flatcc_builder_create_buffer@@Base+0x120>
   2aaec:	mov	r2, #4
   2aaf0:	b	2aaf8 <flatcc_builder_create_buffer@@Base+0x124>
   2aaf4:	mov	r2, #0
   2aaf8:	ldr	r3, [fp, #-16]
   2aafc:	add	r3, r2, r3
   2ab00:	add	r3, r3, #4
   2ab04:	ldrh	r2, [fp, #4]
   2ab08:	mov	r1, r3
   2ab0c:	ldr	r0, [fp, #-128]	; 0xffffff80
   2ab10:	bl	2a370 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   2ab14:	str	r0, [fp, #-28]	; 0xffffffe4
   2ab18:	mov	r3, #0
   2ab1c:	str	r3, [fp, #-116]	; 0xffffff8c
   2ab20:	mov	r3, #0
   2ab24:	str	r3, [fp, #-112]	; 0xffffff90
   2ab28:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ab2c:	cmp	r3, #0
   2ab30:	bne	2ab40 <flatcc_builder_create_buffer@@Base+0x16c>
   2ab34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ab38:	cmp	r3, #0
   2ab3c:	beq	2ab90 <flatcc_builder_create_buffer@@Base+0x1bc>
   2ab40:	ldr	r3, [fp, #-116]	; 0xffffff8c
   2ab44:	add	r3, r3, #4
   2ab48:	str	r3, [fp, #-116]	; 0xffffff8c
   2ab4c:	ldr	r3, [fp, #-112]	; 0xffffff90
   2ab50:	add	r3, r3, #1
   2ab54:	lsl	r3, r3, #3
   2ab58:	sub	r2, fp, #12
   2ab5c:	add	r3, r2, r3
   2ab60:	sub	r2, fp, #44	; 0x2c
   2ab64:	str	r2, [r3, #-104]	; 0xffffff98
   2ab68:	ldr	r3, [fp, #-112]	; 0xffffff90
   2ab6c:	add	r3, r3, #1
   2ab70:	lsl	r3, r3, #3
   2ab74:	sub	r2, fp, #12
   2ab78:	add	r3, r2, r3
   2ab7c:	mov	r2, #4
   2ab80:	str	r2, [r3, #-100]	; 0xffffff9c
   2ab84:	ldr	r3, [fp, #-112]	; 0xffffff90
   2ab88:	add	r3, r3, #1
   2ab8c:	str	r3, [fp, #-112]	; 0xffffff90
   2ab90:	ldr	r3, [fp, #-116]	; 0xffffff8c
   2ab94:	add	r3, r3, #4
   2ab98:	str	r3, [fp, #-116]	; 0xffffff8c
   2ab9c:	ldr	r3, [fp, #-112]	; 0xffffff90
   2aba0:	add	r3, r3, #1
   2aba4:	lsl	r3, r3, #3
   2aba8:	sub	r2, fp, #12
   2abac:	add	r3, r2, r3
   2abb0:	sub	r2, fp, #40	; 0x28
   2abb4:	str	r2, [r3, #-104]	; 0xffffff98
   2abb8:	ldr	r3, [fp, #-112]	; 0xffffff90
   2abbc:	add	r3, r3, #1
   2abc0:	lsl	r3, r3, #3
   2abc4:	sub	r2, fp, #12
   2abc8:	add	r3, r2, r3
   2abcc:	mov	r2, #4
   2abd0:	str	r2, [r3, #-100]	; 0xffffff9c
   2abd4:	ldr	r3, [fp, #-112]	; 0xffffff90
   2abd8:	add	r3, r3, #1
   2abdc:	str	r3, [fp, #-112]	; 0xffffff90
   2abe0:	ldr	r3, [fp, #-16]
   2abe4:	cmp	r3, #0
   2abe8:	beq	2ac40 <flatcc_builder_create_buffer@@Base+0x26c>
   2abec:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2abf0:	ldr	r3, [fp, #-16]
   2abf4:	add	r3, r2, r3
   2abf8:	str	r3, [fp, #-116]	; 0xffffff8c
   2abfc:	ldr	r3, [fp, #-112]	; 0xffffff90
   2ac00:	add	r3, r3, #1
   2ac04:	lsl	r3, r3, #3
   2ac08:	sub	r2, fp, #12
   2ac0c:	add	r3, r2, r3
   2ac10:	sub	r2, fp, #120	; 0x78
   2ac14:	str	r2, [r3, #-104]	; 0xffffff98
   2ac18:	ldr	r3, [fp, #-112]	; 0xffffff90
   2ac1c:	add	r3, r3, #1
   2ac20:	lsl	r3, r3, #3
   2ac24:	sub	r2, fp, #12
   2ac28:	add	r3, r2, r3
   2ac2c:	ldr	r2, [fp, #-16]
   2ac30:	str	r2, [r3, #-100]	; 0xffffff9c
   2ac34:	ldr	r3, [fp, #-112]	; 0xffffff90
   2ac38:	add	r3, r3, #1
   2ac3c:	str	r3, [fp, #-112]	; 0xffffff90
   2ac40:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2ac44:	cmp	r3, #0
   2ac48:	beq	2aca4 <flatcc_builder_create_buffer@@Base+0x2d0>
   2ac4c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2ac50:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2ac54:	add	r3, r2, r3
   2ac58:	str	r3, [fp, #-116]	; 0xffffff8c
   2ac5c:	ldr	r3, [fp, #-112]	; 0xffffff90
   2ac60:	add	r3, r3, #1
   2ac64:	lsl	r3, r3, #3
   2ac68:	sub	r2, fp, #12
   2ac6c:	add	r3, r2, r3
   2ac70:	ldr	r2, [pc, #320]	; 2adb8 <flatcc_builder_create_buffer@@Base+0x3e4>
   2ac74:	ldr	r2, [r4, r2]
   2ac78:	str	r2, [r3, #-104]	; 0xffffff98
   2ac7c:	ldr	r3, [fp, #-112]	; 0xffffff90
   2ac80:	add	r3, r3, #1
   2ac84:	lsl	r3, r3, #3
   2ac88:	sub	r2, fp, #12
   2ac8c:	add	r3, r2, r3
   2ac90:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2ac94:	str	r2, [r3, #-100]	; 0xffffff9c
   2ac98:	ldr	r3, [fp, #-112]	; 0xffffff90
   2ac9c:	add	r3, r3, #1
   2aca0:	str	r3, [fp, #-112]	; 0xffffff90
   2aca4:	ldr	r3, [fp, #-128]	; 0xffffff80
   2aca8:	ldr	r3, [r3, #136]	; 0x88
   2acac:	mov	r2, r3
   2acb0:	ldr	r3, [fp, #-116]	; 0xffffff8c
   2acb4:	sub	r3, r2, r3
   2acb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   2acbc:	cmp	r2, #0
   2acc0:	bne	2acd0 <flatcc_builder_create_buffer@@Base+0x2fc>
   2acc4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2acc8:	cmp	r2, #0
   2accc:	beq	2acd8 <flatcc_builder_create_buffer@@Base+0x304>
   2acd0:	mov	r2, #4
   2acd4:	b	2acdc <flatcc_builder_create_buffer@@Base+0x308>
   2acd8:	mov	r2, #0
   2acdc:	add	r3, r2, r3
   2ace0:	str	r3, [fp, #-32]	; 0xffffffe0
   2ace4:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ace8:	cmp	r3, #0
   2acec:	beq	2ad18 <flatcc_builder_create_buffer@@Base+0x344>
   2acf0:	ldr	r3, [fp, #-128]	; 0xffffff80
   2acf4:	ldr	r3, [r3, #144]	; 0x90
   2acf8:	mov	r2, r3
   2acfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ad00:	sub	r3, r2, r3
   2ad04:	mov	r0, r3
   2ad08:	bl	28bec <main@@Base+0x53c>
   2ad0c:	mov	r3, r0
   2ad10:	str	r3, [fp, #-44]	; 0xffffffd4
   2ad14:	b	2ad3c <flatcc_builder_create_buffer@@Base+0x368>
   2ad18:	ldr	r3, [fp, #-128]	; 0xffffff80
   2ad1c:	ldr	r3, [r3, #140]	; 0x8c
   2ad20:	mov	r2, r3
   2ad24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ad28:	sub	r3, r2, r3
   2ad2c:	mov	r0, r3
   2ad30:	bl	28bec <main@@Base+0x53c>
   2ad34:	mov	r3, r0
   2ad38:	str	r3, [fp, #-44]	; 0xffffffd4
   2ad3c:	ldr	r2, [fp, #-140]	; 0xffffff74
   2ad40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ad44:	sub	r3, r2, r3
   2ad48:	mov	r0, r3
   2ad4c:	bl	28bec <main@@Base+0x53c>
   2ad50:	mov	r3, r0
   2ad54:	str	r3, [fp, #-40]	; 0xffffffd8
   2ad58:	sub	r3, fp, #116	; 0x74
   2ad5c:	mov	r1, r3
   2ad60:	ldr	r0, [fp, #-128]	; 0xffffff80
   2ad64:	bl	2a3f8 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   2ad68:	str	r0, [fp, #-36]	; 0xffffffdc
   2ad6c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2ad70:	cmp	r3, #0
   2ad74:	bne	2ad98 <flatcc_builder_create_buffer@@Base+0x3c4>
   2ad78:	ldr	r3, [pc, #60]	; 2adbc <flatcc_builder_create_buffer@@Base+0x3e8>
   2ad7c:	add	r3, pc, r3
   2ad80:	mov	r2, #772	; 0x304
   2ad84:	ldr	r1, [pc, #52]	; 2adc0 <flatcc_builder_create_buffer@@Base+0x3ec>
   2ad88:	add	r1, pc, r1
   2ad8c:	ldr	r0, [pc, #48]	; 2adc4 <flatcc_builder_create_buffer@@Base+0x3f0>
   2ad90:	add	r0, pc, r0
   2ad94:	bl	129e0 <__assert_fail@plt>
   2ad98:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2ad9c:	mov	r0, r3
   2ada0:	sub	sp, fp, #8
   2ada4:	ldr	r4, [sp]
   2ada8:	ldr	fp, [sp, #4]
   2adac:	add	sp, sp, #8
   2adb0:	pop	{pc}		; (ldr pc, [sp], #4)
   2adb4:	strdeq	sp, [r1], -r8
   2adb8:	andeq	r0, r0, r4, rrx
   2adbc:	ldrdeq	fp, [r0], -r0
   2adc0:	strdeq	fp, [r0], -r8
   2adc4:	andeq	fp, r0, r0, asr r8

0002adc8 <flatcc_builder_create_struct@@Base>:
   2adc8:	str	r4, [sp, #-12]!
   2adcc:	str	fp, [sp, #4]
   2add0:	str	lr, [sp, #8]
   2add4:	add	fp, sp, #8
   2add8:	sub	sp, sp, #100	; 0x64
   2addc:	str	r0, [fp, #-96]	; 0xffffffa0
   2ade0:	str	r1, [fp, #-100]	; 0xffffff9c
   2ade4:	str	r2, [fp, #-104]	; 0xffffff98
   2ade8:	strh	r3, [fp, #-106]	; 0xffffff96
   2adec:	ldr	r4, [pc, #340]	; 2af48 <flatcc_builder_create_struct@@Base+0x180>
   2adf0:	add	r4, pc, r4
   2adf4:	ldrh	r3, [fp, #-106]	; 0xffffff96
   2adf8:	cmp	r3, #0
   2adfc:	bne	2ae20 <flatcc_builder_create_struct@@Base+0x58>
   2ae00:	ldr	r3, [pc, #324]	; 2af4c <flatcc_builder_create_struct@@Base+0x184>
   2ae04:	add	r3, pc, r3
   2ae08:	movw	r2, #783	; 0x30f
   2ae0c:	ldr	r1, [pc, #316]	; 2af50 <flatcc_builder_create_struct@@Base+0x188>
   2ae10:	add	r1, pc, r1
   2ae14:	ldr	r0, [pc, #312]	; 2af54 <flatcc_builder_create_struct@@Base+0x18c>
   2ae18:	add	r0, pc, r0
   2ae1c:	bl	129e0 <__assert_fail@plt>
   2ae20:	ldrh	r3, [fp, #-106]	; 0xffffff96
   2ae24:	mov	r1, r3
   2ae28:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2ae2c:	bl	29cf4 <flatcc_builder_clear@@Base+0xc4>
   2ae30:	ldrh	r3, [fp, #-106]	; 0xffffff96
   2ae34:	mov	r2, r3
   2ae38:	ldr	r1, [fp, #-104]	; 0xffffff98
   2ae3c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2ae40:	bl	2a370 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   2ae44:	str	r0, [fp, #-16]
   2ae48:	mov	r3, #0
   2ae4c:	str	r3, [fp, #-88]	; 0xffffffa8
   2ae50:	mov	r3, #0
   2ae54:	str	r3, [fp, #-84]	; 0xffffffac
   2ae58:	ldr	r3, [fp, #-104]	; 0xffffff98
   2ae5c:	cmp	r3, #0
   2ae60:	beq	2aeb8 <flatcc_builder_create_struct@@Base+0xf0>
   2ae64:	ldr	r2, [fp, #-88]	; 0xffffffa8
   2ae68:	ldr	r3, [fp, #-104]	; 0xffffff98
   2ae6c:	add	r3, r2, r3
   2ae70:	str	r3, [fp, #-88]	; 0xffffffa8
   2ae74:	ldr	r3, [fp, #-84]	; 0xffffffac
   2ae78:	add	r3, r3, #1
   2ae7c:	lsl	r3, r3, #3
   2ae80:	sub	r2, fp, #12
   2ae84:	add	r3, r2, r3
   2ae88:	ldr	r2, [fp, #-100]	; 0xffffff9c
   2ae8c:	str	r2, [r3, #-76]	; 0xffffffb4
   2ae90:	ldr	r3, [fp, #-84]	; 0xffffffac
   2ae94:	add	r3, r3, #1
   2ae98:	lsl	r3, r3, #3
   2ae9c:	sub	r2, fp, #12
   2aea0:	add	r3, r2, r3
   2aea4:	ldr	r2, [fp, #-104]	; 0xffffff98
   2aea8:	str	r2, [r3, #-72]	; 0xffffffb8
   2aeac:	ldr	r3, [fp, #-84]	; 0xffffffac
   2aeb0:	add	r3, r3, #1
   2aeb4:	str	r3, [fp, #-84]	; 0xffffffac
   2aeb8:	ldr	r3, [fp, #-16]
   2aebc:	cmp	r3, #0
   2aec0:	beq	2af1c <flatcc_builder_create_struct@@Base+0x154>
   2aec4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   2aec8:	ldr	r3, [fp, #-16]
   2aecc:	add	r3, r2, r3
   2aed0:	str	r3, [fp, #-88]	; 0xffffffa8
   2aed4:	ldr	r3, [fp, #-84]	; 0xffffffac
   2aed8:	add	r3, r3, #1
   2aedc:	lsl	r3, r3, #3
   2aee0:	sub	r2, fp, #12
   2aee4:	add	r3, r2, r3
   2aee8:	ldr	r2, [pc, #104]	; 2af58 <flatcc_builder_create_struct@@Base+0x190>
   2aeec:	ldr	r2, [r4, r2]
   2aef0:	str	r2, [r3, #-76]	; 0xffffffb4
   2aef4:	ldr	r3, [fp, #-84]	; 0xffffffac
   2aef8:	add	r3, r3, #1
   2aefc:	lsl	r3, r3, #3
   2af00:	sub	r2, fp, #12
   2af04:	add	r3, r2, r3
   2af08:	ldr	r2, [fp, #-16]
   2af0c:	str	r2, [r3, #-72]	; 0xffffffb8
   2af10:	ldr	r3, [fp, #-84]	; 0xffffffac
   2af14:	add	r3, r3, #1
   2af18:	str	r3, [fp, #-84]	; 0xffffffac
   2af1c:	sub	r3, fp, #88	; 0x58
   2af20:	mov	r1, r3
   2af24:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2af28:	bl	2a3f8 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   2af2c:	mov	r3, r0
   2af30:	mov	r0, r3
   2af34:	sub	sp, fp, #8
   2af38:	ldr	r4, [sp]
   2af3c:	ldr	fp, [sp, #4]
   2af40:	add	sp, sp, #8
   2af44:	pop	{pc}		; (ldr pc, [sp], #4)
   2af48:	andeq	sp, r1, r8, lsl #4
   2af4c:	andeq	fp, r0, r8, ror #24
   2af50:	andeq	fp, r0, r0, ror r7
   2af54:	andeq	fp, r0, ip, lsr #16
   2af58:	andeq	r0, r0, r4, rrx

0002af5c <flatcc_builder_start_buffer@@Base>:
   2af5c:	str	r4, [sp, #-12]!
   2af60:	str	fp, [sp, #4]
   2af64:	str	lr, [sp, #8]
   2af68:	add	fp, sp, #8
   2af6c:	sub	sp, sp, #20
   2af70:	str	r0, [fp, #-16]
   2af74:	str	r1, [fp, #-20]	; 0xffffffec
   2af78:	str	r3, [fp, #-28]	; 0xffffffe4
   2af7c:	mov	r3, r2
   2af80:	strh	r3, [fp, #-22]	; 0xffffffea
   2af84:	ldr	r4, [pc, #312]	; 2b0c4 <flatcc_builder_start_buffer@@Base+0x168>
   2af88:	add	r4, pc, r4
   2af8c:	ldr	r3, [fp, #-16]
   2af90:	ldrh	r3, [r3, #128]	; 0x80
   2af94:	mov	r1, r3
   2af98:	ldr	r0, [fp, #-16]
   2af9c:	bl	2a0b0 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   2afa0:	mov	r3, r0
   2afa4:	cmp	r3, #0
   2afa8:	beq	2afb4 <flatcc_builder_start_buffer@@Base+0x58>
   2afac:	mvn	r3, #0
   2afb0:	b	2b0ac <flatcc_builder_start_buffer@@Base+0x150>
   2afb4:	ldr	r3, [fp, #-16]
   2afb8:	mov	r2, #1
   2afbc:	strh	r2, [r3, #128]	; 0x80
   2afc0:	ldr	r3, [fp, #-16]
   2afc4:	ldr	r3, [r3, #32]
   2afc8:	ldr	r2, [fp, #-16]
   2afcc:	ldrh	r2, [r2, #132]	; 0x84
   2afd0:	strh	r2, [r3, #34]	; 0x22
   2afd4:	ldr	r3, [fp, #-16]
   2afd8:	ldrh	r2, [fp, #-22]	; 0xffffffea
   2afdc:	strh	r2, [r3, #132]	; 0x84
   2afe0:	ldr	r3, [fp, #-16]
   2afe4:	ldr	r3, [r3, #32]
   2afe8:	ldr	r2, [fp, #-16]
   2afec:	ldrh	r2, [r2, #164]	; 0xa4
   2aff0:	strh	r2, [r3, #32]
   2aff4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2aff8:	uxth	r2, r3
   2affc:	ldr	r3, [fp, #-16]
   2b000:	strh	r2, [r3, #164]	; 0xa4
   2b004:	ldr	r3, [fp, #-16]
   2b008:	ldr	r3, [r3, #32]
   2b00c:	ldr	r2, [fp, #-16]
   2b010:	ldr	r2, [r2, #144]	; 0x90
   2b014:	str	r2, [r3, #20]
   2b018:	ldr	r3, [fp, #-16]
   2b01c:	ldr	r3, [r3, #32]
   2b020:	ldr	r2, [fp, #-16]
   2b024:	ldr	r2, [r2, #152]	; 0x98
   2b028:	str	r2, [r3, #28]
   2b02c:	ldr	r3, [fp, #-16]
   2b030:	ldr	r2, [r3, #136]	; 0x88
   2b034:	ldr	r3, [fp, #-16]
   2b038:	str	r2, [r3, #144]	; 0x90
   2b03c:	ldr	r3, [fp, #-16]
   2b040:	ldr	r3, [r3, #148]	; 0x94
   2b044:	add	r1, r3, #1
   2b048:	ldr	r2, [fp, #-16]
   2b04c:	str	r1, [r2, #148]	; 0x94
   2b050:	ldr	r2, [fp, #-16]
   2b054:	str	r3, [r2, #152]	; 0x98
   2b058:	ldr	r3, [fp, #-16]
   2b05c:	ldr	r3, [r3, #32]
   2b060:	ldr	r2, [fp, #-16]
   2b064:	ldr	r2, [r2, #168]	; 0xa8
   2b068:	str	r2, [r3, #16]
   2b06c:	ldr	r3, [fp, #-16]
   2b070:	add	r2, r3, #168	; 0xa8
   2b074:	ldr	r3, [fp, #-20]	; 0xffffffec
   2b078:	cmp	r3, #0
   2b07c:	beq	2b088 <flatcc_builder_start_buffer@@Base+0x12c>
   2b080:	ldr	r3, [fp, #-20]	; 0xffffffec
   2b084:	b	2b090 <flatcc_builder_start_buffer@@Base+0x134>
   2b088:	ldr	r3, [pc, #56]	; 2b0c8 <flatcc_builder_start_buffer@@Base+0x16c>
   2b08c:	ldr	r3, [r4, r3]
   2b090:	ldr	r3, [r3]
   2b094:	str	r3, [r2]
   2b098:	ldr	r3, [fp, #-16]
   2b09c:	ldr	r3, [r3, #32]
   2b0a0:	mov	r2, #1
   2b0a4:	strh	r2, [r3, #14]
   2b0a8:	mov	r3, #0
   2b0ac:	mov	r0, r3
   2b0b0:	sub	sp, fp, #8
   2b0b4:	ldr	r4, [sp]
   2b0b8:	ldr	fp, [sp, #4]
   2b0bc:	add	sp, sp, #8
   2b0c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2b0c4:	andeq	sp, r1, r0, ror r0
   2b0c8:	andeq	r0, r0, r4, rrx

0002b0cc <flatcc_builder_end_buffer@@Base>:
   2b0cc:	str	fp, [sp, #-8]!
   2b0d0:	str	lr, [sp, #4]
   2b0d4:	add	fp, sp, #4
   2b0d8:	sub	sp, sp, #24
   2b0dc:	str	r0, [fp, #-16]
   2b0e0:	str	r1, [fp, #-20]	; 0xffffffec
   2b0e4:	ldr	r3, [fp, #-16]
   2b0e8:	ldrh	r3, [r3, #164]	; 0xa4
   2b0ec:	and	r3, r3, #2
   2b0f0:	str	r3, [fp, #-8]
   2b0f4:	ldr	r3, [fp, #-16]
   2b0f8:	ldr	r3, [r3, #152]	; 0x98
   2b0fc:	cmp	r3, #0
   2b100:	movne	r3, #1
   2b104:	moveq	r3, #0
   2b108:	uxtb	r3, r3
   2b10c:	mov	r2, r3
   2b110:	ldr	r3, [fp, #-8]
   2b114:	orr	r3, r3, r2
   2b118:	str	r3, [fp, #-8]
   2b11c:	ldr	r3, [fp, #-16]
   2b120:	ldr	r3, [r3, #32]
   2b124:	ldrh	r3, [r3, #14]
   2b128:	cmp	r3, #1
   2b12c:	beq	2b150 <flatcc_builder_end_buffer@@Base+0x84>
   2b130:	ldr	r3, [pc, #232]	; 2b220 <flatcc_builder_end_buffer@@Base+0x154>
   2b134:	add	r3, pc, r3
   2b138:	movw	r2, #838	; 0x346
   2b13c:	ldr	r1, [pc, #224]	; 2b224 <flatcc_builder_end_buffer@@Base+0x158>
   2b140:	add	r1, pc, r1
   2b144:	ldr	r0, [pc, #220]	; 2b228 <flatcc_builder_end_buffer@@Base+0x15c>
   2b148:	add	r0, pc, r0
   2b14c:	bl	129e0 <__assert_fail@plt>
   2b150:	ldr	r3, [fp, #-16]
   2b154:	ldrh	r3, [r3, #132]	; 0x84
   2b158:	mov	r1, r3
   2b15c:	ldr	r0, [fp, #-16]
   2b160:	bl	29cf4 <flatcc_builder_clear@@Base+0xc4>
   2b164:	ldr	r3, [fp, #-16]
   2b168:	add	r1, r3, #168	; 0xa8
   2b16c:	ldr	r3, [fp, #-16]
   2b170:	ldrh	r0, [r3, #132]	; 0x84
   2b174:	ldr	r3, [fp, #-16]
   2b178:	ldrh	r3, [r3, #128]	; 0x80
   2b17c:	ldr	r2, [fp, #-8]
   2b180:	str	r2, [sp, #4]
   2b184:	str	r3, [sp]
   2b188:	ldr	r3, [fp, #-20]	; 0xffffffec
   2b18c:	mov	r2, r0
   2b190:	ldr	r0, [fp, #-16]
   2b194:	bl	2a9d4 <flatcc_builder_create_buffer@@Base>
   2b198:	str	r0, [fp, #-12]
   2b19c:	ldr	r3, [fp, #-12]
   2b1a0:	cmp	r3, #0
   2b1a4:	bne	2b1b0 <flatcc_builder_end_buffer@@Base+0xe4>
   2b1a8:	mov	r3, #0
   2b1ac:	b	2b20c <flatcc_builder_end_buffer@@Base+0x140>
   2b1b0:	ldr	r3, [fp, #-16]
   2b1b4:	ldr	r3, [r3, #32]
   2b1b8:	ldr	r2, [r3, #20]
   2b1bc:	ldr	r3, [fp, #-16]
   2b1c0:	str	r2, [r3, #144]	; 0x90
   2b1c4:	ldr	r3, [fp, #-16]
   2b1c8:	ldr	r3, [r3, #32]
   2b1cc:	ldr	r2, [r3, #28]
   2b1d0:	ldr	r3, [fp, #-16]
   2b1d4:	str	r2, [r3, #152]	; 0x98
   2b1d8:	ldr	r3, [fp, #-16]
   2b1dc:	ldr	r3, [r3, #32]
   2b1e0:	ldr	r2, [r3, #16]
   2b1e4:	ldr	r3, [fp, #-16]
   2b1e8:	str	r2, [r3, #168]	; 0xa8
   2b1ec:	ldr	r3, [fp, #-16]
   2b1f0:	ldr	r3, [r3, #32]
   2b1f4:	ldrh	r2, [r3, #32]
   2b1f8:	ldr	r3, [fp, #-16]
   2b1fc:	strh	r2, [r3, #164]	; 0xa4
   2b200:	ldr	r0, [fp, #-16]
   2b204:	bl	2a29c <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   2b208:	ldr	r3, [fp, #-12]
   2b20c:	mov	r0, r3
   2b210:	sub	sp, fp, #4
   2b214:	ldr	fp, [sp]
   2b218:	add	sp, sp, #4
   2b21c:	pop	{pc}		; (ldr pc, [sp], #4)
   2b220:	andeq	fp, r0, r8, asr r9
   2b224:	andeq	fp, r0, r0, asr #8
   2b228:	andeq	fp, r0, r8, lsl #10

0002b22c <flatcc_builder_start_struct@@Base>:
   2b22c:	str	fp, [sp, #-8]!
   2b230:	str	lr, [sp, #4]
   2b234:	add	fp, sp, #4
   2b238:	sub	sp, sp, #16
   2b23c:	str	r0, [fp, #-8]
   2b240:	str	r1, [fp, #-12]
   2b244:	mov	r3, r2
   2b248:	strh	r3, [fp, #-14]
   2b24c:	ldrh	r3, [fp, #-14]
   2b250:	mov	r1, r3
   2b254:	ldr	r0, [fp, #-8]
   2b258:	bl	2a0b0 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   2b25c:	mov	r3, r0
   2b260:	cmp	r3, #0
   2b264:	beq	2b270 <flatcc_builder_start_struct@@Base+0x44>
   2b268:	mov	r3, #0
   2b26c:	b	2b29c <flatcc_builder_start_struct@@Base+0x70>
   2b270:	ldr	r3, [fp, #-8]
   2b274:	ldr	r3, [r3, #32]
   2b278:	mov	r2, #2
   2b27c:	strh	r2, [r3, #14]
   2b280:	mvn	r1, #3
   2b284:	ldr	r0, [fp, #-8]
   2b288:	bl	28f10 <flatcc_builder_default_alloc@@Base+0x1d4>
   2b28c:	ldr	r1, [fp, #-12]
   2b290:	ldr	r0, [fp, #-8]
   2b294:	bl	2904c <flatcc_builder_default_alloc@@Base+0x310>
   2b298:	mov	r3, r0
   2b29c:	mov	r0, r3
   2b2a0:	sub	sp, fp, #4
   2b2a4:	ldr	fp, [sp]
   2b2a8:	add	sp, sp, #4
   2b2ac:	pop	{pc}		; (ldr pc, [sp], #4)

0002b2b0 <flatcc_builder_struct_edit@@Base>:
   2b2b0:	push	{fp}		; (str fp, [sp, #-4]!)
   2b2b4:	add	fp, sp, #0
   2b2b8:	sub	sp, sp, #12
   2b2bc:	str	r0, [fp, #-8]
   2b2c0:	ldr	r3, [fp, #-8]
   2b2c4:	ldr	r3, [r3, #16]
   2b2c8:	mov	r0, r3
   2b2cc:	add	sp, fp, #0
   2b2d0:	pop	{fp}		; (ldr fp, [sp], #4)
   2b2d4:	bx	lr

0002b2d8 <flatcc_builder_end_struct@@Base>:
   2b2d8:	str	fp, [sp, #-8]!
   2b2dc:	str	lr, [sp, #4]
   2b2e0:	add	fp, sp, #4
   2b2e4:	sub	sp, sp, #16
   2b2e8:	str	r0, [fp, #-16]
   2b2ec:	ldr	r3, [fp, #-16]
   2b2f0:	ldr	r3, [r3, #32]
   2b2f4:	ldrh	r3, [r3, #14]
   2b2f8:	cmp	r3, #2
   2b2fc:	beq	2b320 <flatcc_builder_end_struct@@Base+0x48>
   2b300:	ldr	r3, [pc, #112]	; 2b378 <flatcc_builder_end_struct@@Base+0xa0>
   2b304:	add	r3, pc, r3
   2b308:	mov	r2, #872	; 0x368
   2b30c:	ldr	r1, [pc, #104]	; 2b37c <flatcc_builder_end_struct@@Base+0xa4>
   2b310:	add	r1, pc, r1
   2b314:	ldr	r0, [pc, #100]	; 2b380 <flatcc_builder_end_struct@@Base+0xa8>
   2b318:	add	r0, pc, r0
   2b31c:	bl	129e0 <__assert_fail@plt>
   2b320:	ldr	r3, [fp, #-16]
   2b324:	ldr	r1, [r3, #16]
   2b328:	ldr	r3, [fp, #-16]
   2b32c:	ldr	r2, [r3, #20]
   2b330:	ldr	r3, [fp, #-16]
   2b334:	ldrh	r3, [r3, #130]	; 0x82
   2b338:	ldr	r0, [fp, #-16]
   2b33c:	bl	2adc8 <flatcc_builder_create_struct@@Base>
   2b340:	str	r0, [fp, #-8]
   2b344:	ldr	r3, [fp, #-8]
   2b348:	cmp	r3, #0
   2b34c:	bne	2b358 <flatcc_builder_end_struct@@Base+0x80>
   2b350:	mov	r3, #0
   2b354:	b	2b364 <flatcc_builder_end_struct@@Base+0x8c>
   2b358:	ldr	r0, [fp, #-16]
   2b35c:	bl	2a29c <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   2b360:	ldr	r3, [fp, #-8]
   2b364:	mov	r0, r3
   2b368:	sub	sp, fp, #4
   2b36c:	ldr	fp, [sp]
   2b370:	add	sp, sp, #4
   2b374:	pop	{pc}		; (ldr pc, [sp], #4)
   2b378:	andeq	fp, r0, r4, lsr #15
   2b37c:	andeq	fp, r0, r0, ror r2
   2b380:	andeq	fp, r0, r4, ror #6
   2b384:	str	fp, [sp, #-8]!
   2b388:	str	lr, [sp, #4]
   2b38c:	add	fp, sp, #4
   2b390:	sub	sp, sp, #24
   2b394:	str	r0, [fp, #-16]
   2b398:	str	r1, [fp, #-20]	; 0xffffffec
   2b39c:	str	r2, [fp, #-24]	; 0xffffffe8
   2b3a0:	ldr	r3, [fp, #-16]
   2b3a4:	ldr	r3, [r3, #32]
   2b3a8:	ldr	r3, [r3, #20]
   2b3ac:	str	r3, [fp, #-8]
   2b3b0:	ldr	r2, [fp, #-8]
   2b3b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   2b3b8:	add	r3, r2, r3
   2b3bc:	str	r3, [fp, #-12]
   2b3c0:	ldr	r2, [fp, #-8]
   2b3c4:	ldr	r3, [fp, #-12]
   2b3c8:	cmp	r2, r3
   2b3cc:	bhi	2b3e0 <flatcc_builder_end_struct@@Base+0x108>
   2b3d0:	ldr	r2, [fp, #-12]
   2b3d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b3d8:	cmp	r2, r3
   2b3dc:	bls	2b428 <flatcc_builder_end_struct@@Base+0x150>
   2b3e0:	ldr	r2, [fp, #-8]
   2b3e4:	ldr	r3, [fp, #-12]
   2b3e8:	cmp	r2, r3
   2b3ec:	bhi	2b400 <flatcc_builder_end_struct@@Base+0x128>
   2b3f0:	ldr	r2, [fp, #-12]
   2b3f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b3f8:	cmp	r2, r3
   2b3fc:	bls	2b420 <flatcc_builder_end_struct@@Base+0x148>
   2b400:	ldr	r3, [pc, #72]	; 2b450 <flatcc_builder_end_struct@@Base+0x178>
   2b404:	add	r3, pc, r3
   2b408:	mov	r2, #892	; 0x37c
   2b40c:	ldr	r1, [pc, #64]	; 2b454 <flatcc_builder_end_struct@@Base+0x17c>
   2b410:	add	r1, pc, r1
   2b414:	ldr	r0, [pc, #60]	; 2b458 <flatcc_builder_end_struct@@Base+0x180>
   2b418:	add	r0, pc, r0
   2b41c:	bl	129e0 <__assert_fail@plt>
   2b420:	mvn	r3, #0
   2b424:	b	2b43c <flatcc_builder_end_struct@@Base+0x164>
   2b428:	ldr	r3, [fp, #-16]
   2b42c:	ldr	r3, [r3, #32]
   2b430:	ldr	r2, [fp, #-12]
   2b434:	str	r2, [r3, #20]
   2b438:	mov	r3, #0
   2b43c:	mov	r0, r3
   2b440:	sub	sp, fp, #4
   2b444:	ldr	fp, [sp]
   2b448:	add	sp, sp, #4
   2b44c:	pop	{pc}		; (ldr pc, [sp], #4)
   2b450:	andeq	fp, r0, r0, asr #13
   2b454:	andeq	fp, r0, r0, ror r1
   2b458:	muleq	r0, r0, r2

0002b45c <flatcc_builder_extend_vector@@Base>:
   2b45c:	str	fp, [sp, #-8]!
   2b460:	str	lr, [sp, #4]
   2b464:	add	fp, sp, #4
   2b468:	sub	sp, sp, #8
   2b46c:	str	r0, [fp, #-8]
   2b470:	str	r1, [fp, #-12]
   2b474:	ldr	r3, [fp, #-8]
   2b478:	ldr	r3, [r3, #32]
   2b47c:	ldr	r3, [r3, #24]
   2b480:	mov	r2, r3
   2b484:	ldr	r1, [fp, #-12]
   2b488:	ldr	r0, [fp, #-8]
   2b48c:	bl	2b384 <flatcc_builder_end_struct@@Base+0xac>
   2b490:	mov	r3, r0
   2b494:	cmp	r3, #0
   2b498:	beq	2b4a4 <flatcc_builder_extend_vector@@Base+0x48>
   2b49c:	mov	r3, #0
   2b4a0:	b	2b4c8 <flatcc_builder_extend_vector@@Base+0x6c>
   2b4a4:	ldr	r3, [fp, #-8]
   2b4a8:	ldr	r3, [r3, #32]
   2b4ac:	ldr	r3, [r3, #16]
   2b4b0:	ldr	r2, [fp, #-12]
   2b4b4:	mul	r3, r2, r3
   2b4b8:	mov	r1, r3
   2b4bc:	ldr	r0, [fp, #-8]
   2b4c0:	bl	2904c <flatcc_builder_default_alloc@@Base+0x310>
   2b4c4:	mov	r3, r0
   2b4c8:	mov	r0, r3
   2b4cc:	sub	sp, fp, #4
   2b4d0:	ldr	fp, [sp]
   2b4d4:	add	sp, sp, #4
   2b4d8:	pop	{pc}		; (ldr pc, [sp], #4)

0002b4dc <flatcc_builder_vector_push@@Base>:
   2b4dc:	str	fp, [sp, #-8]!
   2b4e0:	str	lr, [sp, #4]
   2b4e4:	add	fp, sp, #4
   2b4e8:	sub	sp, sp, #8
   2b4ec:	str	r0, [fp, #-8]
   2b4f0:	str	r1, [fp, #-12]
   2b4f4:	ldr	r3, [fp, #-8]
   2b4f8:	ldr	r3, [r3, #32]
   2b4fc:	ldrh	r3, [r3, #14]
   2b500:	cmp	r3, #4
   2b504:	beq	2b528 <flatcc_builder_vector_push@@Base+0x4c>
   2b508:	ldr	r3, [pc, #208]	; 2b5e0 <flatcc_builder_vector_push@@Base+0x104>
   2b50c:	add	r3, pc, r3
   2b510:	movw	r2, #907	; 0x38b
   2b514:	ldr	r1, [pc, #200]	; 2b5e4 <flatcc_builder_vector_push@@Base+0x108>
   2b518:	add	r1, pc, r1
   2b51c:	ldr	r0, [pc, #196]	; 2b5e8 <flatcc_builder_vector_push@@Base+0x10c>
   2b520:	add	r0, pc, r0
   2b524:	bl	129e0 <__assert_fail@plt>
   2b528:	ldr	r3, [fp, #-8]
   2b52c:	ldr	r3, [r3, #32]
   2b530:	ldr	r2, [r3, #20]
   2b534:	ldr	r3, [fp, #-8]
   2b538:	ldr	r3, [r3, #32]
   2b53c:	ldr	r3, [r3, #24]
   2b540:	cmp	r2, r3
   2b544:	bls	2b590 <flatcc_builder_vector_push@@Base+0xb4>
   2b548:	ldr	r3, [fp, #-8]
   2b54c:	ldr	r3, [r3, #32]
   2b550:	ldr	r2, [r3, #20]
   2b554:	ldr	r3, [fp, #-8]
   2b558:	ldr	r3, [r3, #32]
   2b55c:	ldr	r3, [r3, #24]
   2b560:	cmp	r2, r3
   2b564:	bls	2b588 <flatcc_builder_vector_push@@Base+0xac>
   2b568:	ldr	r3, [pc, #124]	; 2b5ec <flatcc_builder_vector_push@@Base+0x110>
   2b56c:	add	r3, pc, r3
   2b570:	mov	r2, #908	; 0x38c
   2b574:	ldr	r1, [pc, #116]	; 2b5f0 <flatcc_builder_vector_push@@Base+0x114>
   2b578:	add	r1, pc, r1
   2b57c:	ldr	r0, [pc, #112]	; 2b5f4 <flatcc_builder_vector_push@@Base+0x118>
   2b580:	add	r0, pc, r0
   2b584:	bl	129e0 <__assert_fail@plt>
   2b588:	mov	r3, #0
   2b58c:	b	2b5cc <flatcc_builder_vector_push@@Base+0xf0>
   2b590:	ldr	r3, [fp, #-8]
   2b594:	ldr	r3, [r3, #32]
   2b598:	ldr	r2, [r3, #20]
   2b59c:	ldr	r3, [fp, #-8]
   2b5a0:	ldr	r3, [r3, #32]
   2b5a4:	add	r2, r2, #1
   2b5a8:	str	r2, [r3, #20]
   2b5ac:	ldr	r3, [fp, #-8]
   2b5b0:	ldr	r3, [r3, #32]
   2b5b4:	ldr	r3, [r3, #16]
   2b5b8:	mov	r2, r3
   2b5bc:	ldr	r1, [fp, #-12]
   2b5c0:	ldr	r0, [fp, #-8]
   2b5c4:	bl	2915c <flatcc_builder_default_alloc@@Base+0x420>
   2b5c8:	mov	r3, r0
   2b5cc:	mov	r0, r3
   2b5d0:	sub	sp, fp, #4
   2b5d4:	ldr	fp, [sp]
   2b5d8:	add	sp, sp, #4
   2b5dc:	pop	{pc}		; (ldr pc, [sp], #4)
   2b5e0:	andeq	fp, r0, ip, asr #11
   2b5e4:	andeq	fp, r0, r8, rrx
   2b5e8:	andeq	fp, r0, r4, lsr #3
   2b5ec:	andeq	fp, r0, ip, ror #10
   2b5f0:	andeq	fp, r0, r8
   2b5f4:	andeq	fp, r0, r0, ror r1

0002b5f8 <flatcc_builder_append_vector@@Base>:
   2b5f8:	str	fp, [sp, #-8]!
   2b5fc:	str	lr, [sp, #4]
   2b600:	add	fp, sp, #4
   2b604:	sub	sp, sp, #16
   2b608:	str	r0, [fp, #-8]
   2b60c:	str	r1, [fp, #-12]
   2b610:	str	r2, [fp, #-16]
   2b614:	ldr	r3, [fp, #-8]
   2b618:	ldr	r3, [r3, #32]
   2b61c:	ldrh	r3, [r3, #14]
   2b620:	cmp	r3, #4
   2b624:	beq	2b648 <flatcc_builder_append_vector@@Base+0x50>
   2b628:	ldr	r3, [pc, #132]	; 2b6b4 <flatcc_builder_append_vector@@Base+0xbc>
   2b62c:	add	r3, pc, r3
   2b630:	movw	r2, #915	; 0x393
   2b634:	ldr	r1, [pc, #124]	; 2b6b8 <flatcc_builder_append_vector@@Base+0xc0>
   2b638:	add	r1, pc, r1
   2b63c:	ldr	r0, [pc, #120]	; 2b6bc <flatcc_builder_append_vector@@Base+0xc4>
   2b640:	add	r0, pc, r0
   2b644:	bl	129e0 <__assert_fail@plt>
   2b648:	ldr	r3, [fp, #-8]
   2b64c:	ldr	r3, [r3, #32]
   2b650:	ldr	r3, [r3, #24]
   2b654:	mov	r2, r3
   2b658:	ldr	r1, [fp, #-16]
   2b65c:	ldr	r0, [fp, #-8]
   2b660:	bl	2b384 <flatcc_builder_end_struct@@Base+0xac>
   2b664:	mov	r3, r0
   2b668:	cmp	r3, #0
   2b66c:	beq	2b678 <flatcc_builder_append_vector@@Base+0x80>
   2b670:	mov	r3, #0
   2b674:	b	2b6a0 <flatcc_builder_append_vector@@Base+0xa8>
   2b678:	ldr	r3, [fp, #-8]
   2b67c:	ldr	r3, [r3, #32]
   2b680:	ldr	r3, [r3, #16]
   2b684:	ldr	r2, [fp, #-16]
   2b688:	mul	r3, r2, r3
   2b68c:	mov	r2, r3
   2b690:	ldr	r1, [fp, #-12]
   2b694:	ldr	r0, [fp, #-8]
   2b698:	bl	2915c <flatcc_builder_default_alloc@@Base+0x420>
   2b69c:	mov	r3, r0
   2b6a0:	mov	r0, r3
   2b6a4:	sub	sp, fp, #4
   2b6a8:	ldr	fp, [sp]
   2b6ac:	add	sp, sp, #4
   2b6b0:	pop	{pc}		; (ldr pc, [sp], #4)
   2b6b4:	andeq	fp, r0, r8, asr #9
   2b6b8:	andeq	sl, r0, r8, asr #30
   2b6bc:	andeq	fp, r0, r4, lsl #1

0002b6c0 <flatcc_builder_extend_offset_vector@@Base>:
   2b6c0:	str	fp, [sp, #-8]!
   2b6c4:	str	lr, [sp, #4]
   2b6c8:	add	fp, sp, #4
   2b6cc:	sub	sp, sp, #8
   2b6d0:	str	r0, [fp, #-8]
   2b6d4:	str	r1, [fp, #-12]
   2b6d8:	mvn	r2, #-1073741824	; 0xc0000000
   2b6dc:	ldr	r1, [fp, #-12]
   2b6e0:	ldr	r0, [fp, #-8]
   2b6e4:	bl	2b384 <flatcc_builder_end_struct@@Base+0xac>
   2b6e8:	mov	r3, r0
   2b6ec:	cmp	r3, #0
   2b6f0:	beq	2b6fc <flatcc_builder_extend_offset_vector@@Base+0x3c>
   2b6f4:	mov	r3, #0
   2b6f8:	b	2b714 <flatcc_builder_extend_offset_vector@@Base+0x54>
   2b6fc:	ldr	r3, [fp, #-12]
   2b700:	lsl	r3, r3, #2
   2b704:	mov	r1, r3
   2b708:	ldr	r0, [fp, #-8]
   2b70c:	bl	2904c <flatcc_builder_default_alloc@@Base+0x310>
   2b710:	mov	r3, r0
   2b714:	mov	r0, r3
   2b718:	sub	sp, fp, #4
   2b71c:	ldr	fp, [sp]
   2b720:	add	sp, sp, #4
   2b724:	pop	{pc}		; (ldr pc, [sp], #4)

0002b728 <flatcc_builder_offset_vector_push@@Base>:
   2b728:	str	fp, [sp, #-8]!
   2b72c:	str	lr, [sp, #4]
   2b730:	add	fp, sp, #4
   2b734:	sub	sp, sp, #16
   2b738:	str	r0, [fp, #-16]
   2b73c:	str	r1, [fp, #-20]	; 0xffffffec
   2b740:	ldr	r3, [fp, #-16]
   2b744:	ldr	r3, [r3, #32]
   2b748:	ldrh	r3, [r3, #14]
   2b74c:	cmp	r3, #5
   2b750:	beq	2b774 <flatcc_builder_offset_vector_push@@Base+0x4c>
   2b754:	ldr	r3, [pc, #152]	; 2b7f4 <flatcc_builder_offset_vector_push@@Base+0xcc>
   2b758:	add	r3, pc, r3
   2b75c:	movw	r2, #934	; 0x3a6
   2b760:	ldr	r1, [pc, #144]	; 2b7f8 <flatcc_builder_offset_vector_push@@Base+0xd0>
   2b764:	add	r1, pc, r1
   2b768:	ldr	r0, [pc, #140]	; 2b7fc <flatcc_builder_offset_vector_push@@Base+0xd4>
   2b76c:	add	r0, pc, r0
   2b770:	bl	129e0 <__assert_fail@plt>
   2b774:	ldr	r3, [fp, #-16]
   2b778:	ldr	r3, [r3, #32]
   2b77c:	ldr	r3, [r3, #20]
   2b780:	cmn	r3, #-1073741823	; 0xc0000001
   2b784:	bne	2b790 <flatcc_builder_offset_vector_push@@Base+0x68>
   2b788:	mov	r3, #0
   2b78c:	b	2b7e0 <flatcc_builder_offset_vector_push@@Base+0xb8>
   2b790:	ldr	r3, [fp, #-16]
   2b794:	ldr	r3, [r3, #32]
   2b798:	ldr	r2, [r3, #20]
   2b79c:	ldr	r3, [fp, #-16]
   2b7a0:	ldr	r3, [r3, #32]
   2b7a4:	add	r2, r2, #1
   2b7a8:	str	r2, [r3, #20]
   2b7ac:	mov	r1, #4
   2b7b0:	ldr	r0, [fp, #-16]
   2b7b4:	bl	2904c <flatcc_builder_default_alloc@@Base+0x310>
   2b7b8:	str	r0, [fp, #-8]
   2b7bc:	ldr	r3, [fp, #-8]
   2b7c0:	cmp	r3, #0
   2b7c4:	bne	2b7d0 <flatcc_builder_offset_vector_push@@Base+0xa8>
   2b7c8:	mov	r3, #0
   2b7cc:	b	2b7e0 <flatcc_builder_offset_vector_push@@Base+0xb8>
   2b7d0:	ldr	r3, [fp, #-8]
   2b7d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   2b7d8:	str	r2, [r3]
   2b7dc:	ldr	r3, [fp, #-8]
   2b7e0:	mov	r0, r3
   2b7e4:	sub	sp, fp, #4
   2b7e8:	ldr	fp, [sp]
   2b7ec:	add	sp, sp, #4
   2b7f0:	pop	{pc}		; (ldr pc, [sp], #4)
   2b7f4:			; <UNDEFINED> instruction: 0x0000b3bc
   2b7f8:	andeq	sl, r0, ip, lsl lr
   2b7fc:	andeq	sl, r0, r4, asr #31

0002b800 <flatcc_builder_append_offset_vector@@Base>:
   2b800:	str	fp, [sp, #-8]!
   2b804:	str	lr, [sp, #4]
   2b808:	add	fp, sp, #4
   2b80c:	sub	sp, sp, #16
   2b810:	str	r0, [fp, #-8]
   2b814:	str	r1, [fp, #-12]
   2b818:	str	r2, [fp, #-16]
   2b81c:	ldr	r3, [fp, #-8]
   2b820:	ldr	r3, [r3, #32]
   2b824:	ldrh	r3, [r3, #14]
   2b828:	cmp	r3, #5
   2b82c:	beq	2b850 <flatcc_builder_append_offset_vector@@Base+0x50>
   2b830:	ldr	r3, [pc, #108]	; 2b8a4 <flatcc_builder_append_offset_vector@@Base+0xa4>
   2b834:	add	r3, pc, r3
   2b838:	mov	r2, #948	; 0x3b4
   2b83c:	ldr	r1, [pc, #100]	; 2b8a8 <flatcc_builder_append_offset_vector@@Base+0xa8>
   2b840:	add	r1, pc, r1
   2b844:	ldr	r0, [pc, #96]	; 2b8ac <flatcc_builder_append_offset_vector@@Base+0xac>
   2b848:	add	r0, pc, r0
   2b84c:	bl	129e0 <__assert_fail@plt>
   2b850:	mvn	r2, #-1073741824	; 0xc0000000
   2b854:	ldr	r1, [fp, #-16]
   2b858:	ldr	r0, [fp, #-8]
   2b85c:	bl	2b384 <flatcc_builder_end_struct@@Base+0xac>
   2b860:	mov	r3, r0
   2b864:	cmp	r3, #0
   2b868:	beq	2b874 <flatcc_builder_append_offset_vector@@Base+0x74>
   2b86c:	mov	r3, #0
   2b870:	b	2b890 <flatcc_builder_append_offset_vector@@Base+0x90>
   2b874:	ldr	r3, [fp, #-16]
   2b878:	lsl	r3, r3, #2
   2b87c:	mov	r2, r3
   2b880:	ldr	r1, [fp, #-12]
   2b884:	ldr	r0, [fp, #-8]
   2b888:	bl	2915c <flatcc_builder_default_alloc@@Base+0x420>
   2b88c:	mov	r3, r0
   2b890:	mov	r0, r3
   2b894:	sub	sp, fp, #4
   2b898:	ldr	fp, [sp]
   2b89c:	add	sp, sp, #4
   2b8a0:	pop	{pc}		; (ldr pc, [sp], #4)
   2b8a4:	andeq	fp, r0, r4, lsl #6
   2b8a8:	andeq	sl, r0, r0, asr #26
   2b8ac:	andeq	sl, r0, r8, ror #29

0002b8b0 <flatcc_builder_extend_string@@Base>:
   2b8b0:	str	fp, [sp, #-8]!
   2b8b4:	str	lr, [sp, #4]
   2b8b8:	add	fp, sp, #4
   2b8bc:	sub	sp, sp, #8
   2b8c0:	str	r0, [fp, #-8]
   2b8c4:	str	r1, [fp, #-12]
   2b8c8:	ldr	r3, [fp, #-8]
   2b8cc:	ldr	r3, [r3, #32]
   2b8d0:	ldrh	r3, [r3, #14]
   2b8d4:	cmp	r3, #6
   2b8d8:	beq	2b8fc <flatcc_builder_extend_string@@Base+0x4c>
   2b8dc:	ldr	r3, [pc, #96]	; 2b944 <flatcc_builder_extend_string@@Base+0x94>
   2b8e0:	add	r3, pc, r3
   2b8e4:	movw	r2, #957	; 0x3bd
   2b8e8:	ldr	r1, [pc, #88]	; 2b948 <flatcc_builder_extend_string@@Base+0x98>
   2b8ec:	add	r1, pc, r1
   2b8f0:	ldr	r0, [pc, #84]	; 2b94c <flatcc_builder_extend_string@@Base+0x9c>
   2b8f4:	add	r0, pc, r0
   2b8f8:	bl	129e0 <__assert_fail@plt>
   2b8fc:	mvn	r2, #0
   2b900:	ldr	r1, [fp, #-12]
   2b904:	ldr	r0, [fp, #-8]
   2b908:	bl	2b384 <flatcc_builder_end_struct@@Base+0xac>
   2b90c:	mov	r3, r0
   2b910:	cmp	r3, #0
   2b914:	beq	2b920 <flatcc_builder_extend_string@@Base+0x70>
   2b918:	mov	r3, #0
   2b91c:	b	2b930 <flatcc_builder_extend_string@@Base+0x80>
   2b920:	ldr	r1, [fp, #-12]
   2b924:	ldr	r0, [fp, #-8]
   2b928:	bl	2904c <flatcc_builder_default_alloc@@Base+0x310>
   2b92c:	mov	r3, r0
   2b930:	mov	r0, r3
   2b934:	sub	sp, fp, #4
   2b938:	ldr	fp, [sp]
   2b93c:	add	sp, sp, #4
   2b940:	pop	{pc}		; (ldr pc, [sp], #4)
   2b944:	andeq	fp, r0, ip, ror r2
   2b948:	muleq	r0, r4, ip
   2b94c:	andeq	sl, r0, r0, ror lr

0002b950 <flatcc_builder_append_string@@Base>:
   2b950:	str	fp, [sp, #-8]!
   2b954:	str	lr, [sp, #4]
   2b958:	add	fp, sp, #4
   2b95c:	sub	sp, sp, #16
   2b960:	str	r0, [fp, #-8]
   2b964:	str	r1, [fp, #-12]
   2b968:	str	r2, [fp, #-16]
   2b96c:	ldr	r3, [fp, #-8]
   2b970:	ldr	r3, [r3, #32]
   2b974:	ldrh	r3, [r3, #14]
   2b978:	cmp	r3, #6
   2b97c:	beq	2b9a0 <flatcc_builder_append_string@@Base+0x50>
   2b980:	ldr	r3, [pc, #100]	; 2b9ec <flatcc_builder_append_string@@Base+0x9c>
   2b984:	add	r3, pc, r3
   2b988:	movw	r2, #966	; 0x3c6
   2b98c:	ldr	r1, [pc, #92]	; 2b9f0 <flatcc_builder_append_string@@Base+0xa0>
   2b990:	add	r1, pc, r1
   2b994:	ldr	r0, [pc, #88]	; 2b9f4 <flatcc_builder_append_string@@Base+0xa4>
   2b998:	add	r0, pc, r0
   2b99c:	bl	129e0 <__assert_fail@plt>
   2b9a0:	mvn	r2, #0
   2b9a4:	ldr	r1, [fp, #-16]
   2b9a8:	ldr	r0, [fp, #-8]
   2b9ac:	bl	2b384 <flatcc_builder_end_struct@@Base+0xac>
   2b9b0:	mov	r3, r0
   2b9b4:	cmp	r3, #0
   2b9b8:	beq	2b9c4 <flatcc_builder_append_string@@Base+0x74>
   2b9bc:	mov	r3, #0
   2b9c0:	b	2b9d8 <flatcc_builder_append_string@@Base+0x88>
   2b9c4:	ldr	r2, [fp, #-16]
   2b9c8:	ldr	r1, [fp, #-12]
   2b9cc:	ldr	r0, [fp, #-8]
   2b9d0:	bl	2915c <flatcc_builder_default_alloc@@Base+0x420>
   2b9d4:	mov	r3, r0
   2b9d8:	mov	r0, r3
   2b9dc:	sub	sp, fp, #4
   2b9e0:	ldr	fp, [sp]
   2b9e4:	add	sp, sp, #4
   2b9e8:	pop	{pc}		; (ldr pc, [sp], #4)
   2b9ec:	strdeq	fp, [r0], -r8
   2b9f0:	strdeq	sl, [r0], -r0
   2b9f4:	andeq	sl, r0, ip, asr #27

0002b9f8 <flatcc_builder_append_string_str@@Base>:
   2b9f8:	str	fp, [sp, #-8]!
   2b9fc:	str	lr, [sp, #4]
   2ba00:	add	fp, sp, #4
   2ba04:	sub	sp, sp, #8
   2ba08:	str	r0, [fp, #-8]
   2ba0c:	str	r1, [fp, #-12]
   2ba10:	ldr	r0, [fp, #-12]
   2ba14:	bl	12974 <strlen@plt>
   2ba18:	mov	r3, r0
   2ba1c:	mov	r2, r3
   2ba20:	ldr	r1, [fp, #-12]
   2ba24:	ldr	r0, [fp, #-8]
   2ba28:	bl	2b950 <flatcc_builder_append_string@@Base>
   2ba2c:	mov	r3, r0
   2ba30:	mov	r0, r3
   2ba34:	sub	sp, fp, #4
   2ba38:	ldr	fp, [sp]
   2ba3c:	add	sp, sp, #4
   2ba40:	pop	{pc}		; (ldr pc, [sp], #4)

0002ba44 <flatcc_builder_append_string_strn@@Base>:
   2ba44:	str	fp, [sp, #-8]!
   2ba48:	str	lr, [sp, #4]
   2ba4c:	add	fp, sp, #4
   2ba50:	sub	sp, sp, #16
   2ba54:	str	r0, [fp, #-8]
   2ba58:	str	r1, [fp, #-12]
   2ba5c:	str	r2, [fp, #-16]
   2ba60:	ldr	r1, [fp, #-16]
   2ba64:	ldr	r0, [fp, #-12]
   2ba68:	bl	28cdc <main@@Base+0x62c>
   2ba6c:	mov	r3, r0
   2ba70:	mov	r2, r3
   2ba74:	ldr	r1, [fp, #-12]
   2ba78:	ldr	r0, [fp, #-8]
   2ba7c:	bl	2b950 <flatcc_builder_append_string@@Base>
   2ba80:	mov	r3, r0
   2ba84:	mov	r0, r3
   2ba88:	sub	sp, fp, #4
   2ba8c:	ldr	fp, [sp]
   2ba90:	add	sp, sp, #4
   2ba94:	pop	{pc}		; (ldr pc, [sp], #4)

0002ba98 <flatcc_builder_truncate_vector@@Base>:
   2ba98:	str	fp, [sp, #-8]!
   2ba9c:	str	lr, [sp, #4]
   2baa0:	add	fp, sp, #4
   2baa4:	sub	sp, sp, #8
   2baa8:	str	r0, [fp, #-8]
   2baac:	str	r1, [fp, #-12]
   2bab0:	ldr	r3, [fp, #-8]
   2bab4:	ldr	r3, [r3, #32]
   2bab8:	ldrh	r3, [r3, #14]
   2babc:	cmp	r3, #4
   2bac0:	beq	2bae4 <flatcc_builder_truncate_vector@@Base+0x4c>
   2bac4:	ldr	r3, [pc, #200]	; 2bb94 <flatcc_builder_truncate_vector@@Base+0xfc>
   2bac8:	add	r3, pc, r3
   2bacc:	movw	r2, #985	; 0x3d9
   2bad0:	ldr	r1, [pc, #192]	; 2bb98 <flatcc_builder_truncate_vector@@Base+0x100>
   2bad4:	add	r1, pc, r1
   2bad8:	ldr	r0, [pc, #188]	; 2bb9c <flatcc_builder_truncate_vector@@Base+0x104>
   2badc:	add	r0, pc, r0
   2bae0:	bl	129e0 <__assert_fail@plt>
   2bae4:	ldr	r3, [fp, #-8]
   2bae8:	ldr	r3, [r3, #32]
   2baec:	ldr	r3, [r3, #20]
   2baf0:	ldr	r2, [fp, #-12]
   2baf4:	cmp	r2, r3
   2baf8:	bls	2bb3c <flatcc_builder_truncate_vector@@Base+0xa4>
   2bafc:	ldr	r3, [fp, #-8]
   2bb00:	ldr	r3, [r3, #32]
   2bb04:	ldr	r3, [r3, #20]
   2bb08:	ldr	r2, [fp, #-12]
   2bb0c:	cmp	r2, r3
   2bb10:	bls	2bb34 <flatcc_builder_truncate_vector@@Base+0x9c>
   2bb14:	ldr	r3, [pc, #132]	; 2bba0 <flatcc_builder_truncate_vector@@Base+0x108>
   2bb18:	add	r3, pc, r3
   2bb1c:	movw	r2, #986	; 0x3da
   2bb20:	ldr	r1, [pc, #124]	; 2bba4 <flatcc_builder_truncate_vector@@Base+0x10c>
   2bb24:	add	r1, pc, r1
   2bb28:	ldr	r0, [pc, #120]	; 2bba8 <flatcc_builder_truncate_vector@@Base+0x110>
   2bb2c:	add	r0, pc, r0
   2bb30:	bl	129e0 <__assert_fail@plt>
   2bb34:	mvn	r3, #0
   2bb38:	b	2bb80 <flatcc_builder_truncate_vector@@Base+0xe8>
   2bb3c:	ldr	r3, [fp, #-8]
   2bb40:	ldr	r3, [r3, #32]
   2bb44:	ldr	r1, [r3, #20]
   2bb48:	ldr	r3, [fp, #-8]
   2bb4c:	ldr	r3, [r3, #32]
   2bb50:	ldr	r2, [fp, #-12]
   2bb54:	sub	r2, r1, r2
   2bb58:	str	r2, [r3, #20]
   2bb5c:	ldr	r3, [fp, #-8]
   2bb60:	ldr	r3, [r3, #32]
   2bb64:	ldr	r3, [r3, #16]
   2bb68:	ldr	r2, [fp, #-12]
   2bb6c:	mul	r3, r2, r3
   2bb70:	mov	r1, r3
   2bb74:	ldr	r0, [fp, #-8]
   2bb78:	bl	290f4 <flatcc_builder_default_alloc@@Base+0x3b8>
   2bb7c:	mov	r3, #0
   2bb80:	mov	r0, r3
   2bb84:	sub	sp, fp, #4
   2bb88:	ldr	fp, [sp]
   2bb8c:	add	sp, sp, #4
   2bb90:	pop	{pc}		; (ldr pc, [sp], #4)
   2bb94:	ldrdeq	fp, [r0], -r4
   2bb98:	andeq	sl, r0, ip, lsr #21
   2bb9c:	andeq	sl, r0, r8, ror #23
   2bba0:	andeq	fp, r0, r4, lsl #1
   2bba4:	andeq	sl, r0, ip, asr sl
   2bba8:	andeq	sl, r0, r4, ror #24

0002bbac <flatcc_builder_truncate_offset_vector@@Base>:
   2bbac:	str	fp, [sp, #-8]!
   2bbb0:	str	lr, [sp, #4]
   2bbb4:	add	fp, sp, #4
   2bbb8:	sub	sp, sp, #8
   2bbbc:	str	r0, [fp, #-8]
   2bbc0:	str	r1, [fp, #-12]
   2bbc4:	ldr	r3, [fp, #-8]
   2bbc8:	ldr	r3, [r3, #32]
   2bbcc:	ldrh	r3, [r3, #14]
   2bbd0:	cmp	r3, #5
   2bbd4:	beq	2bbf8 <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   2bbd8:	ldr	r3, [pc, #200]	; 2bca8 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   2bbdc:	add	r3, pc, r3
   2bbe0:	movw	r2, #994	; 0x3e2
   2bbe4:	ldr	r1, [pc, #192]	; 2bcac <flatcc_builder_truncate_offset_vector@@Base+0x100>
   2bbe8:	add	r1, pc, r1
   2bbec:	ldr	r0, [pc, #188]	; 2bcb0 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   2bbf0:	add	r0, pc, r0
   2bbf4:	bl	129e0 <__assert_fail@plt>
   2bbf8:	ldr	r3, [fp, #-8]
   2bbfc:	ldr	r3, [r3, #32]
   2bc00:	ldr	r3, [r3, #20]
   2bc04:	ldr	r2, [fp, #-12]
   2bc08:	cmp	r2, r3
   2bc0c:	bls	2bc50 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   2bc10:	ldr	r3, [fp, #-8]
   2bc14:	ldr	r3, [r3, #32]
   2bc18:	ldr	r3, [r3, #20]
   2bc1c:	ldr	r2, [fp, #-12]
   2bc20:	cmp	r2, r3
   2bc24:	bls	2bc48 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   2bc28:	ldr	r3, [pc, #132]	; 2bcb4 <flatcc_builder_truncate_offset_vector@@Base+0x108>
   2bc2c:	add	r3, pc, r3
   2bc30:	movw	r2, #995	; 0x3e3
   2bc34:	ldr	r1, [pc, #124]	; 2bcb8 <flatcc_builder_truncate_offset_vector@@Base+0x10c>
   2bc38:	add	r1, pc, r1
   2bc3c:	ldr	r0, [pc, #120]	; 2bcbc <flatcc_builder_truncate_offset_vector@@Base+0x110>
   2bc40:	add	r0, pc, r0
   2bc44:	bl	129e0 <__assert_fail@plt>
   2bc48:	mvn	r3, #0
   2bc4c:	b	2bc94 <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   2bc50:	ldr	r3, [fp, #-8]
   2bc54:	ldr	r3, [r3, #32]
   2bc58:	ldr	r1, [r3, #20]
   2bc5c:	ldr	r3, [fp, #-8]
   2bc60:	ldr	r3, [r3, #32]
   2bc64:	ldr	r2, [fp, #-12]
   2bc68:	sub	r2, r1, r2
   2bc6c:	str	r2, [r3, #20]
   2bc70:	ldr	r3, [fp, #-8]
   2bc74:	ldr	r3, [r3, #32]
   2bc78:	ldr	r3, [r3, #16]
   2bc7c:	ldr	r2, [fp, #-12]
   2bc80:	mul	r3, r2, r3
   2bc84:	mov	r1, r3
   2bc88:	ldr	r0, [fp, #-8]
   2bc8c:	bl	290f4 <flatcc_builder_default_alloc@@Base+0x3b8>
   2bc90:	mov	r3, #0
   2bc94:	mov	r0, r3
   2bc98:	sub	sp, fp, #4
   2bc9c:	ldr	fp, [sp]
   2bca0:	add	sp, sp, #4
   2bca4:	pop	{pc}		; (ldr pc, [sp], #4)
   2bca8:	andeq	sl, r0, r0, ror #31
   2bcac:	muleq	r0, r8, r9
   2bcb0:	andeq	sl, r0, r0, asr #22
   2bcb4:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   2bcb8:	andeq	sl, r0, r8, asr #18
   2bcbc:	andeq	sl, r0, r4, ror fp

0002bcc0 <flatcc_builder_truncate_string@@Base>:
   2bcc0:	str	fp, [sp, #-8]!
   2bcc4:	str	lr, [sp, #4]
   2bcc8:	add	fp, sp, #4
   2bccc:	sub	sp, sp, #8
   2bcd0:	str	r0, [fp, #-8]
   2bcd4:	str	r1, [fp, #-12]
   2bcd8:	ldr	r3, [fp, #-8]
   2bcdc:	ldr	r3, [r3, #32]
   2bce0:	ldrh	r3, [r3, #14]
   2bce4:	cmp	r3, #6
   2bce8:	beq	2bd0c <flatcc_builder_truncate_string@@Base+0x4c>
   2bcec:	ldr	r3, [pc, #180]	; 2bda8 <flatcc_builder_truncate_string@@Base+0xe8>
   2bcf0:	add	r3, pc, r3
   2bcf4:	movw	r2, #1003	; 0x3eb
   2bcf8:	ldr	r1, [pc, #172]	; 2bdac <flatcc_builder_truncate_string@@Base+0xec>
   2bcfc:	add	r1, pc, r1
   2bd00:	ldr	r0, [pc, #168]	; 2bdb0 <flatcc_builder_truncate_string@@Base+0xf0>
   2bd04:	add	r0, pc, r0
   2bd08:	bl	129e0 <__assert_fail@plt>
   2bd0c:	ldr	r3, [fp, #-8]
   2bd10:	ldr	r3, [r3, #32]
   2bd14:	ldr	r3, [r3, #20]
   2bd18:	ldr	r2, [fp, #-12]
   2bd1c:	cmp	r2, r3
   2bd20:	bls	2bd64 <flatcc_builder_truncate_string@@Base+0xa4>
   2bd24:	ldr	r3, [fp, #-8]
   2bd28:	ldr	r3, [r3, #32]
   2bd2c:	ldr	r3, [r3, #20]
   2bd30:	ldr	r2, [fp, #-12]
   2bd34:	cmp	r2, r3
   2bd38:	bls	2bd5c <flatcc_builder_truncate_string@@Base+0x9c>
   2bd3c:	ldr	r3, [pc, #112]	; 2bdb4 <flatcc_builder_truncate_string@@Base+0xf4>
   2bd40:	add	r3, pc, r3
   2bd44:	mov	r2, #1004	; 0x3ec
   2bd48:	ldr	r1, [pc, #104]	; 2bdb8 <flatcc_builder_truncate_string@@Base+0xf8>
   2bd4c:	add	r1, pc, r1
   2bd50:	ldr	r0, [pc, #100]	; 2bdbc <flatcc_builder_truncate_string@@Base+0xfc>
   2bd54:	add	r0, pc, r0
   2bd58:	bl	129e0 <__assert_fail@plt>
   2bd5c:	mvn	r3, #0
   2bd60:	b	2bd94 <flatcc_builder_truncate_string@@Base+0xd4>
   2bd64:	ldr	r3, [fp, #-8]
   2bd68:	ldr	r3, [r3, #32]
   2bd6c:	ldr	r1, [r3, #20]
   2bd70:	ldr	r3, [fp, #-8]
   2bd74:	ldr	r3, [r3, #32]
   2bd78:	ldr	r2, [fp, #-12]
   2bd7c:	sub	r2, r1, r2
   2bd80:	str	r2, [r3, #20]
   2bd84:	ldr	r1, [fp, #-12]
   2bd88:	ldr	r0, [fp, #-8]
   2bd8c:	bl	290f4 <flatcc_builder_default_alloc@@Base+0x3b8>
   2bd90:	mov	r3, #0
   2bd94:	mov	r0, r3
   2bd98:	sub	sp, fp, #4
   2bd9c:	ldr	fp, [sp]
   2bda0:	add	sp, sp, #4
   2bda4:	pop	{pc}		; (ldr pc, [sp], #4)
   2bda8:	strdeq	sl, [r0], -r4
   2bdac:	andeq	sl, r0, r4, lsl #17
   2bdb0:	andeq	sl, r0, r0, ror #20
   2bdb4:	andeq	sl, r0, r4, lsr #29
   2bdb8:	andeq	sl, r0, r4, lsr r8
   2bdbc:	muleq	r0, ip, sl

0002bdc0 <flatcc_builder_start_vector@@Base>:
   2bdc0:	str	fp, [sp, #-8]!
   2bdc4:	str	lr, [sp, #4]
   2bdc8:	add	fp, sp, #4
   2bdcc:	sub	sp, sp, #16
   2bdd0:	str	r0, [fp, #-8]
   2bdd4:	str	r1, [fp, #-12]
   2bdd8:	str	r3, [fp, #-20]	; 0xffffffec
   2bddc:	mov	r3, r2
   2bde0:	strh	r3, [fp, #-14]
   2bde4:	sub	r3, fp, #14
   2bde8:	mov	r1, #4
   2bdec:	mov	r0, r3
   2bdf0:	bl	29d3c <flatcc_builder_clear@@Base+0x10c>
   2bdf4:	ldrh	r3, [fp, #-14]
   2bdf8:	mov	r1, r3
   2bdfc:	ldr	r0, [fp, #-8]
   2be00:	bl	2a0b0 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   2be04:	mov	r3, r0
   2be08:	cmp	r3, #0
   2be0c:	beq	2be18 <flatcc_builder_start_vector@@Base+0x58>
   2be10:	mvn	r3, #0
   2be14:	b	2be68 <flatcc_builder_start_vector@@Base+0xa8>
   2be18:	ldr	r3, [fp, #-8]
   2be1c:	ldr	r3, [r3, #32]
   2be20:	ldr	r2, [fp, #-12]
   2be24:	str	r2, [r3, #16]
   2be28:	ldr	r3, [fp, #-8]
   2be2c:	ldr	r3, [r3, #32]
   2be30:	mov	r2, #0
   2be34:	str	r2, [r3, #20]
   2be38:	ldr	r3, [fp, #-8]
   2be3c:	ldr	r3, [r3, #32]
   2be40:	ldr	r2, [fp, #-20]	; 0xffffffec
   2be44:	str	r2, [r3, #24]
   2be48:	ldr	r3, [fp, #-8]
   2be4c:	ldr	r3, [r3, #32]
   2be50:	mov	r2, #4
   2be54:	strh	r2, [r3, #14]
   2be58:	mvn	r1, #3
   2be5c:	ldr	r0, [fp, #-8]
   2be60:	bl	28f10 <flatcc_builder_default_alloc@@Base+0x1d4>
   2be64:	mov	r3, #0
   2be68:	mov	r0, r3
   2be6c:	sub	sp, fp, #4
   2be70:	ldr	fp, [sp]
   2be74:	add	sp, sp, #4
   2be78:	pop	{pc}		; (ldr pc, [sp], #4)

0002be7c <flatcc_builder_start_offset_vector@@Base>:
   2be7c:	str	fp, [sp, #-8]!
   2be80:	str	lr, [sp, #4]
   2be84:	add	fp, sp, #4
   2be88:	sub	sp, sp, #8
   2be8c:	str	r0, [fp, #-8]
   2be90:	mov	r1, #4
   2be94:	ldr	r0, [fp, #-8]
   2be98:	bl	2a0b0 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   2be9c:	mov	r3, r0
   2bea0:	cmp	r3, #0
   2bea4:	beq	2beb0 <flatcc_builder_start_offset_vector@@Base+0x34>
   2bea8:	mvn	r3, #0
   2beac:	b	2bef0 <flatcc_builder_start_offset_vector@@Base+0x74>
   2beb0:	ldr	r3, [fp, #-8]
   2beb4:	ldr	r3, [r3, #32]
   2beb8:	mov	r2, #4
   2bebc:	str	r2, [r3, #16]
   2bec0:	ldr	r3, [fp, #-8]
   2bec4:	ldr	r3, [r3, #32]
   2bec8:	mov	r2, #0
   2becc:	str	r2, [r3, #20]
   2bed0:	ldr	r3, [fp, #-8]
   2bed4:	ldr	r3, [r3, #32]
   2bed8:	mov	r2, #5
   2bedc:	strh	r2, [r3, #14]
   2bee0:	mvn	r1, #3
   2bee4:	ldr	r0, [fp, #-8]
   2bee8:	bl	28f10 <flatcc_builder_default_alloc@@Base+0x1d4>
   2beec:	mov	r3, #0
   2bef0:	mov	r0, r3
   2bef4:	sub	sp, fp, #4
   2bef8:	ldr	fp, [sp]
   2befc:	add	sp, sp, #4
   2bf00:	pop	{pc}		; (ldr pc, [sp], #4)

0002bf04 <flatcc_builder_create_offset_vector@@Base>:
   2bf04:	str	fp, [sp, #-8]!
   2bf08:	str	lr, [sp, #4]
   2bf0c:	add	fp, sp, #4
   2bf10:	sub	sp, sp, #24
   2bf14:	str	r0, [fp, #-16]
   2bf18:	str	r1, [fp, #-20]	; 0xffffffec
   2bf1c:	str	r2, [fp, #-24]	; 0xffffffe8
   2bf20:	ldr	r0, [fp, #-16]
   2bf24:	bl	2be7c <flatcc_builder_start_offset_vector@@Base>
   2bf28:	mov	r3, r0
   2bf2c:	cmp	r3, #0
   2bf30:	beq	2bf3c <flatcc_builder_create_offset_vector@@Base+0x38>
   2bf34:	mov	r3, #0
   2bf38:	b	2bf84 <flatcc_builder_create_offset_vector@@Base+0x80>
   2bf3c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2bf40:	ldr	r0, [fp, #-16]
   2bf44:	bl	2b6c0 <flatcc_builder_extend_offset_vector@@Base>
   2bf48:	str	r0, [fp, #-8]
   2bf4c:	ldr	r3, [fp, #-8]
   2bf50:	cmp	r3, #0
   2bf54:	bne	2bf60 <flatcc_builder_create_offset_vector@@Base+0x5c>
   2bf58:	mov	r3, #0
   2bf5c:	b	2bf84 <flatcc_builder_create_offset_vector@@Base+0x80>
   2bf60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bf64:	lsl	r3, r3, #2
   2bf68:	mov	r2, r3
   2bf6c:	ldr	r1, [fp, #-20]	; 0xffffffec
   2bf70:	ldr	r0, [fp, #-8]
   2bf74:	bl	12908 <memcpy@plt>
   2bf78:	ldr	r0, [fp, #-16]
   2bf7c:	bl	2d584 <flatcc_builder_end_offset_vector@@Base>
   2bf80:	mov	r3, r0
   2bf84:	mov	r0, r3
   2bf88:	sub	sp, fp, #4
   2bf8c:	ldr	fp, [sp]
   2bf90:	add	sp, sp, #4
   2bf94:	pop	{pc}		; (ldr pc, [sp], #4)

0002bf98 <flatcc_builder_start_string@@Base>:
   2bf98:	str	fp, [sp, #-8]!
   2bf9c:	str	lr, [sp, #4]
   2bfa0:	add	fp, sp, #4
   2bfa4:	sub	sp, sp, #8
   2bfa8:	str	r0, [fp, #-8]
   2bfac:	mov	r1, #1
   2bfb0:	ldr	r0, [fp, #-8]
   2bfb4:	bl	2a0b0 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   2bfb8:	mov	r3, r0
   2bfbc:	cmp	r3, #0
   2bfc0:	beq	2bfcc <flatcc_builder_start_string@@Base+0x34>
   2bfc4:	mvn	r3, #0
   2bfc8:	b	2c00c <flatcc_builder_start_string@@Base+0x74>
   2bfcc:	ldr	r3, [fp, #-8]
   2bfd0:	ldr	r3, [r3, #32]
   2bfd4:	mov	r2, #1
   2bfd8:	str	r2, [r3, #16]
   2bfdc:	ldr	r3, [fp, #-8]
   2bfe0:	ldr	r3, [r3, #32]
   2bfe4:	mov	r2, #0
   2bfe8:	str	r2, [r3, #20]
   2bfec:	ldr	r3, [fp, #-8]
   2bff0:	ldr	r3, [r3, #32]
   2bff4:	mov	r2, #6
   2bff8:	strh	r2, [r3, #14]
   2bffc:	mvn	r1, #3
   2c000:	ldr	r0, [fp, #-8]
   2c004:	bl	28f10 <flatcc_builder_default_alloc@@Base+0x1d4>
   2c008:	mov	r3, #0
   2c00c:	mov	r0, r3
   2c010:	sub	sp, fp, #4
   2c014:	ldr	fp, [sp]
   2c018:	add	sp, sp, #4
   2c01c:	pop	{pc}		; (ldr pc, [sp], #4)

0002c020 <flatcc_builder_reserve_table@@Base>:
   2c020:	str	fp, [sp, #-8]!
   2c024:	str	lr, [sp, #4]
   2c028:	add	fp, sp, #4
   2c02c:	sub	sp, sp, #8
   2c030:	str	r0, [fp, #-8]
   2c034:	str	r1, [fp, #-12]
   2c038:	ldr	r3, [fp, #-12]
   2c03c:	cmp	r3, #0
   2c040:	bge	2c064 <flatcc_builder_reserve_table@@Base+0x44>
   2c044:	ldr	r3, [pc, #60]	; 2c088 <flatcc_builder_reserve_table@@Base+0x68>
   2c048:	add	r3, pc, r3
   2c04c:	movw	r2, #1065	; 0x429
   2c050:	ldr	r1, [pc, #52]	; 2c08c <flatcc_builder_reserve_table@@Base+0x6c>
   2c054:	add	r1, pc, r1
   2c058:	ldr	r0, [pc, #48]	; 2c090 <flatcc_builder_reserve_table@@Base+0x70>
   2c05c:	add	r0, pc, r0
   2c060:	bl	129e0 <__assert_fail@plt>
   2c064:	ldr	r1, [fp, #-12]
   2c068:	ldr	r0, [fp, #-8]
   2c06c:	bl	294ec <flatcc_builder_default_alloc@@Base+0x7b0>
   2c070:	mov	r3, r0
   2c074:	mov	r0, r3
   2c078:	sub	sp, fp, #4
   2c07c:	ldr	fp, [sp]
   2c080:	add	sp, sp, #4
   2c084:	pop	{pc}		; (ldr pc, [sp], #4)
   2c088:			; <UNDEFINED> instruction: 0x0000abbc
   2c08c:	andeq	sl, r0, ip, lsr #10
   2c090:			; <UNDEFINED> instruction: 0x0000a7b8

0002c094 <flatcc_builder_start_table@@Base>:
   2c094:	str	fp, [sp, #-8]!
   2c098:	str	lr, [sp, #4]
   2c09c:	add	fp, sp, #4
   2c0a0:	sub	sp, sp, #8
   2c0a4:	str	r0, [fp, #-8]
   2c0a8:	str	r1, [fp, #-12]
   2c0ac:	mov	r1, #4
   2c0b0:	ldr	r0, [fp, #-8]
   2c0b4:	bl	2a0b0 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   2c0b8:	mov	r3, r0
   2c0bc:	cmp	r3, #0
   2c0c0:	beq	2c0cc <flatcc_builder_start_table@@Base+0x38>
   2c0c4:	mvn	r3, #0
   2c0c8:	b	2c1ac <flatcc_builder_start_table@@Base+0x118>
   2c0cc:	ldr	r3, [fp, #-8]
   2c0d0:	ldr	r3, [r3, #4]
   2c0d4:	mov	r1, r3
   2c0d8:	ldr	r3, [fp, #-8]
   2c0dc:	ldr	r3, [r3, #52]	; 0x34
   2c0e0:	mov	r2, r3
   2c0e4:	ldr	r3, [fp, #-8]
   2c0e8:	ldr	r3, [r3, #32]
   2c0ec:	sub	r2, r1, r2
   2c0f0:	str	r2, [r3, #16]
   2c0f4:	ldr	r3, [fp, #-8]
   2c0f8:	ldr	r3, [r3]
   2c0fc:	mov	r1, r3
   2c100:	ldr	r3, [fp, #-8]
   2c104:	ldr	r3, [r3, #76]	; 0x4c
   2c108:	mov	r2, r3
   2c10c:	ldr	r3, [fp, #-8]
   2c110:	ldr	r3, [r3, #32]
   2c114:	sub	r2, r1, r2
   2c118:	str	r2, [r3, #20]
   2c11c:	ldr	r3, [fp, #-8]
   2c120:	ldr	r3, [r3, #32]
   2c124:	ldr	r2, [fp, #-8]
   2c128:	ldr	r2, [r2, #12]
   2c12c:	str	r2, [r3, #24]
   2c130:	ldr	r3, [fp, #-8]
   2c134:	ldr	r3, [r3, #32]
   2c138:	ldr	r2, [fp, #-8]
   2c13c:	ldrh	r2, [r2, #8]
   2c140:	strh	r2, [r3, #28]
   2c144:	ldr	r3, [fp, #-8]
   2c148:	mov	r2, #0
   2c14c:	str	r2, [r3, #12]
   2c150:	ldr	r2, [fp, #-8]
   2c154:	movw	r3, #15186	; 0x3b52
   2c158:	movt	r3, #12137	; 0x2f69
   2c15c:	str	r3, [r2, #12]
   2c160:	ldr	r3, [fp, #-8]
   2c164:	mov	r2, #0
   2c168:	strh	r2, [r3, #8]
   2c16c:	ldr	r3, [fp, #-8]
   2c170:	ldr	r3, [r3, #32]
   2c174:	mov	r2, #3
   2c178:	strh	r2, [r3, #14]
   2c17c:	ldr	r1, [fp, #-12]
   2c180:	ldr	r0, [fp, #-8]
   2c184:	bl	294ec <flatcc_builder_default_alloc@@Base+0x7b0>
   2c188:	mov	r3, r0
   2c18c:	cmp	r3, #0
   2c190:	beq	2c19c <flatcc_builder_start_table@@Base+0x108>
   2c194:	mvn	r3, #0
   2c198:	b	2c1ac <flatcc_builder_start_table@@Base+0x118>
   2c19c:	movw	r1, #65532	; 0xfffc
   2c1a0:	ldr	r0, [fp, #-8]
   2c1a4:	bl	28f10 <flatcc_builder_default_alloc@@Base+0x1d4>
   2c1a8:	mov	r3, #0
   2c1ac:	mov	r0, r3
   2c1b0:	sub	sp, fp, #4
   2c1b4:	ldr	fp, [sp]
   2c1b8:	add	sp, sp, #4
   2c1bc:	pop	{pc}		; (ldr pc, [sp], #4)

0002c1c0 <flatcc_builder_create_vtable@@Base>:
   2c1c0:	str	fp, [sp, #-8]!
   2c1c4:	str	lr, [sp, #4]
   2c1c8:	add	fp, sp, #4
   2c1cc:	sub	sp, sp, #96	; 0x60
   2c1d0:	str	r0, [fp, #-88]	; 0xffffffa8
   2c1d4:	str	r1, [fp, #-92]	; 0xffffffa4
   2c1d8:	mov	r3, r2
   2c1dc:	strh	r3, [fp, #-94]	; 0xffffffa2
   2c1e0:	mov	r3, #0
   2c1e4:	str	r3, [fp, #-80]	; 0xffffffb0
   2c1e8:	mov	r3, #0
   2c1ec:	str	r3, [fp, #-76]	; 0xffffffb4
   2c1f0:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   2c1f4:	cmp	r3, #0
   2c1f8:	beq	2c250 <flatcc_builder_create_vtable@@Base+0x90>
   2c1fc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   2c200:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   2c204:	add	r3, r2, r3
   2c208:	str	r3, [fp, #-80]	; 0xffffffb0
   2c20c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2c210:	add	r3, r3, #1
   2c214:	lsl	r3, r3, #3
   2c218:	sub	r2, fp, #4
   2c21c:	add	r3, r2, r3
   2c220:	ldr	r2, [fp, #-92]	; 0xffffffa4
   2c224:	str	r2, [r3, #-76]	; 0xffffffb4
   2c228:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2c22c:	ldrh	r2, [fp, #-94]	; 0xffffffa2
   2c230:	add	r3, r3, #1
   2c234:	lsl	r3, r3, #3
   2c238:	sub	r1, fp, #4
   2c23c:	add	r3, r1, r3
   2c240:	str	r2, [r3, #-72]	; 0xffffffb8
   2c244:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2c248:	add	r3, r3, #1
   2c24c:	str	r3, [fp, #-76]	; 0xffffffb4
   2c250:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2c254:	ldr	r3, [r3, #152]	; 0x98
   2c258:	cmp	r3, #0
   2c25c:	bne	2c298 <flatcc_builder_create_vtable@@Base+0xd8>
   2c260:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2c264:	ldr	r3, [r3, #180]	; 0xb4
   2c268:	cmp	r3, #0
   2c26c:	bne	2c298 <flatcc_builder_create_vtable@@Base+0xd8>
   2c270:	sub	r3, fp, #80	; 0x50
   2c274:	mov	r1, r3
   2c278:	ldr	r0, [fp, #-88]	; 0xffffffa8
   2c27c:	bl	2a504 <flatcc_builder_get_user_frame_ptr@@Base+0x488>
   2c280:	str	r0, [fp, #-8]
   2c284:	ldr	r3, [fp, #-8]
   2c288:	cmp	r3, #0
   2c28c:	bne	2c2cc <flatcc_builder_create_vtable@@Base+0x10c>
   2c290:	mov	r3, #0
   2c294:	b	2c2d0 <flatcc_builder_create_vtable@@Base+0x110>
   2c298:	sub	r3, fp, #80	; 0x50
   2c29c:	mov	r1, r3
   2c2a0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   2c2a4:	bl	2a3f8 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   2c2a8:	str	r0, [fp, #-8]
   2c2ac:	ldr	r3, [fp, #-8]
   2c2b0:	cmp	r3, #0
   2c2b4:	bne	2c2c0 <flatcc_builder_create_vtable@@Base+0x100>
   2c2b8:	mov	r3, #0
   2c2bc:	b	2c2d0 <flatcc_builder_create_vtable@@Base+0x110>
   2c2c0:	ldr	r3, [fp, #-8]
   2c2c4:	add	r3, r3, #1
   2c2c8:	str	r3, [fp, #-8]
   2c2cc:	ldr	r3, [fp, #-8]
   2c2d0:	mov	r0, r3
   2c2d4:	sub	sp, fp, #4
   2c2d8:	ldr	fp, [sp]
   2c2dc:	add	sp, sp, #4
   2c2e0:	pop	{pc}		; (ldr pc, [sp], #4)

0002c2e4 <flatcc_builder_create_cached_vtable@@Base>:
   2c2e4:	str	fp, [sp, #-8]!
   2c2e8:	str	lr, [sp, #4]
   2c2ec:	add	fp, sp, #4
   2c2f0:	sub	sp, sp, #48	; 0x30
   2c2f4:	str	r0, [fp, #-32]	; 0xffffffe0
   2c2f8:	str	r1, [fp, #-36]	; 0xffffffdc
   2c2fc:	str	r3, [fp, #-44]	; 0xffffffd4
   2c300:	mov	r3, r2
   2c304:	strh	r3, [fp, #-38]	; 0xffffffda
   2c308:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2c30c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2c310:	bl	29774 <flatcc_builder_default_alloc@@Base+0xa38>
   2c314:	str	r0, [fp, #-20]	; 0xffffffec
   2c318:	ldr	r3, [fp, #-20]	; 0xffffffec
   2c31c:	cmp	r3, #0
   2c320:	bne	2c32c <flatcc_builder_create_cached_vtable@@Base+0x48>
   2c324:	mov	r3, #0
   2c328:	b	2c5f0 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   2c32c:	ldr	r3, [fp, #-20]	; 0xffffffec
   2c330:	str	r3, [fp, #-12]
   2c334:	ldr	r3, [fp, #-12]
   2c338:	ldr	r3, [r3]
   2c33c:	str	r3, [fp, #-16]
   2c340:	mov	r3, #0
   2c344:	str	r3, [fp, #-8]
   2c348:	b	2c44c <flatcc_builder_create_cached_vtable@@Base+0x168>
   2c34c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c350:	ldr	r2, [r3, #100]	; 0x64
   2c354:	ldr	r3, [fp, #-16]
   2c358:	add	r3, r2, r3
   2c35c:	str	r3, [fp, #-24]	; 0xffffffe8
   2c360:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c364:	ldr	r2, [r3, #68]	; 0x44
   2c368:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c36c:	ldr	r3, [r3, #8]
   2c370:	add	r3, r2, r3
   2c374:	str	r3, [fp, #-28]	; 0xffffffe4
   2c378:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c37c:	ldrh	r3, [r3]
   2c380:	ldrh	r2, [fp, #-38]	; 0xffffffda
   2c384:	cmp	r2, r3
   2c388:	bne	2c3ac <flatcc_builder_create_cached_vtable@@Base+0xc8>
   2c38c:	ldrh	r3, [fp, #-38]	; 0xffffffda
   2c390:	mov	r2, r3
   2c394:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2c398:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2c39c:	bl	12914 <memcmp@plt>
   2c3a0:	mov	r3, r0
   2c3a4:	cmp	r3, #0
   2c3a8:	beq	2c3c8 <flatcc_builder_create_cached_vtable@@Base+0xe4>
   2c3ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c3b0:	add	r3, r3, #12
   2c3b4:	str	r3, [fp, #-12]
   2c3b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c3bc:	ldr	r3, [r3, #12]
   2c3c0:	str	r3, [fp, #-16]
   2c3c4:	b	2c44c <flatcc_builder_create_cached_vtable@@Base+0x168>
   2c3c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c3cc:	ldr	r2, [r3, #4]
   2c3d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c3d4:	ldr	r3, [r3, #152]	; 0x98
   2c3d8:	cmp	r2, r3
   2c3dc:	beq	2c404 <flatcc_builder_create_cached_vtable@@Base+0x120>
   2c3e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c3e4:	str	r3, [fp, #-8]
   2c3e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c3ec:	add	r3, r3, #12
   2c3f0:	str	r3, [fp, #-12]
   2c3f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c3f8:	ldr	r3, [r3, #12]
   2c3fc:	str	r3, [fp, #-16]
   2c400:	b	2c44c <flatcc_builder_create_cached_vtable@@Base+0x168>
   2c404:	ldr	r2, [fp, #-12]
   2c408:	ldr	r3, [fp, #-20]	; 0xffffffec
   2c40c:	cmp	r2, r3
   2c410:	beq	2c440 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   2c414:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c418:	ldr	r2, [r3, #12]
   2c41c:	ldr	r3, [fp, #-12]
   2c420:	str	r2, [r3]
   2c424:	ldr	r3, [fp, #-20]	; 0xffffffec
   2c428:	ldr	r2, [r3]
   2c42c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c430:	str	r2, [r3, #12]
   2c434:	ldr	r3, [fp, #-20]	; 0xffffffec
   2c438:	ldr	r2, [fp, #-16]
   2c43c:	str	r2, [r3]
   2c440:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c444:	ldr	r3, [r3]
   2c448:	b	2c5f0 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   2c44c:	ldr	r3, [fp, #-16]
   2c450:	cmp	r3, #0
   2c454:	bne	2c34c <flatcc_builder_create_cached_vtable@@Base+0x68>
   2c458:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c45c:	ldr	r2, [r3, #124]	; 0x7c
   2c460:	mov	r3, #0
   2c464:	str	r3, [sp]
   2c468:	mov	r3, #16
   2c46c:	mov	r1, #6
   2c470:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2c474:	bl	29400 <flatcc_builder_default_alloc@@Base+0x6c4>
   2c478:	str	r0, [fp, #-24]	; 0xffffffe8
   2c47c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c480:	cmp	r3, #0
   2c484:	bne	2c490 <flatcc_builder_create_cached_vtable@@Base+0x1ac>
   2c488:	mov	r3, #0
   2c48c:	b	2c5f0 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   2c490:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c494:	ldr	r3, [r3, #124]	; 0x7c
   2c498:	str	r3, [fp, #-16]
   2c49c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c4a0:	ldr	r3, [r3, #124]	; 0x7c
   2c4a4:	add	r2, r3, #16
   2c4a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c4ac:	str	r2, [r3, #124]	; 0x7c
   2c4b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c4b4:	ldr	r2, [r3, #152]	; 0x98
   2c4b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c4bc:	str	r2, [r3, #4]
   2c4c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   2c4c4:	ldr	r2, [r3]
   2c4c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c4cc:	str	r2, [r3, #12]
   2c4d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   2c4d4:	ldr	r2, [fp, #-16]
   2c4d8:	str	r2, [r3]
   2c4dc:	ldrh	r3, [fp, #-38]	; 0xffffffda
   2c4e0:	mov	r2, r3
   2c4e4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2c4e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2c4ec:	bl	2c1c0 <flatcc_builder_create_vtable@@Base>
   2c4f0:	mov	r2, r0
   2c4f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c4f8:	str	r2, [r3]
   2c4fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c500:	ldr	r3, [r3]
   2c504:	cmp	r3, #0
   2c508:	bne	2c514 <flatcc_builder_create_cached_vtable@@Base+0x230>
   2c50c:	mov	r3, #0
   2c510:	b	2c5f0 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   2c514:	ldr	r3, [fp, #-8]
   2c518:	cmp	r3, #0
   2c51c:	beq	2c534 <flatcc_builder_create_cached_vtable@@Base+0x250>
   2c520:	ldr	r3, [fp, #-8]
   2c524:	ldr	r2, [r3, #8]
   2c528:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c52c:	str	r2, [r3, #8]
   2c530:	b	2c5e8 <flatcc_builder_create_cached_vtable@@Base+0x304>
   2c534:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c538:	ldr	r3, [r3, #172]	; 0xac
   2c53c:	cmp	r3, #0
   2c540:	beq	2c570 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   2c544:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c548:	ldr	r2, [r3, #172]	; 0xac
   2c54c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c550:	ldr	r1, [r3, #120]	; 0x78
   2c554:	ldrh	r3, [fp, #-38]	; 0xffffffda
   2c558:	add	r3, r1, r3
   2c55c:	cmp	r2, r3
   2c560:	bcs	2c570 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   2c564:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2c568:	bl	297f8 <flatcc_builder_flush_vtable_cache@@Base>
   2c56c:	b	2c5e8 <flatcc_builder_create_cached_vtable@@Base+0x304>
   2c570:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c574:	ldr	r2, [r3, #120]	; 0x78
   2c578:	ldrh	r1, [fp, #-38]	; 0xffffffda
   2c57c:	mov	r3, #0
   2c580:	str	r3, [sp]
   2c584:	mov	r3, r1
   2c588:	mov	r1, #2
   2c58c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2c590:	bl	29400 <flatcc_builder_default_alloc@@Base+0x6c4>
   2c594:	str	r0, [fp, #-28]	; 0xffffffe4
   2c598:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c59c:	cmp	r3, #0
   2c5a0:	bne	2c5ac <flatcc_builder_create_cached_vtable@@Base+0x2c8>
   2c5a4:	mvn	r3, #0
   2c5a8:	b	2c5f0 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   2c5ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c5b0:	ldr	r2, [r3, #120]	; 0x78
   2c5b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c5b8:	str	r2, [r3, #8]
   2c5bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c5c0:	ldr	r2, [r3, #120]	; 0x78
   2c5c4:	ldrh	r3, [fp, #-38]	; 0xffffffda
   2c5c8:	add	r2, r2, r3
   2c5cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c5d0:	str	r2, [r3, #120]	; 0x78
   2c5d4:	ldrh	r3, [fp, #-38]	; 0xffffffda
   2c5d8:	mov	r2, r3
   2c5dc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2c5e0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2c5e4:	bl	12908 <memcpy@plt>
   2c5e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c5ec:	ldr	r3, [r3]
   2c5f0:	mov	r0, r3
   2c5f4:	sub	sp, fp, #4
   2c5f8:	ldr	fp, [sp]
   2c5fc:	add	sp, sp, #4
   2c600:	pop	{pc}		; (ldr pc, [sp], #4)

0002c604 <flatcc_builder_create_table@@Base>:
   2c604:	str	r4, [sp, #-12]!
   2c608:	str	fp, [sp, #4]
   2c60c:	str	lr, [sp, #8]
   2c610:	add	fp, sp, #8
   2c614:	sub	sp, sp, #124	; 0x7c
   2c618:	str	r0, [fp, #-120]	; 0xffffff88
   2c61c:	str	r1, [fp, #-124]	; 0xffffff84
   2c620:	str	r2, [fp, #-128]	; 0xffffff80
   2c624:	strh	r3, [fp, #-130]	; 0xffffff7e
   2c628:	ldr	r4, [pc, #740]	; 2c914 <flatcc_builder_create_table@@Base+0x310>
   2c62c:	add	r4, pc, r4
   2c630:	ldr	r3, [fp, #8]
   2c634:	cmp	r3, #0
   2c638:	bge	2c65c <flatcc_builder_create_table@@Base+0x58>
   2c63c:	ldr	r3, [pc, #724]	; 2c918 <flatcc_builder_create_table@@Base+0x314>
   2c640:	add	r3, pc, r3
   2c644:	movw	r2, #1237	; 0x4d5
   2c648:	ldr	r1, [pc, #716]	; 2c91c <flatcc_builder_create_table@@Base+0x318>
   2c64c:	add	r1, pc, r1
   2c650:	ldr	r0, [pc, #712]	; 2c920 <flatcc_builder_create_table@@Base+0x31c>
   2c654:	add	r0, pc, r0
   2c658:	bl	129e0 <__assert_fail@plt>
   2c65c:	ldr	r3, [fp, #12]
   2c660:	and	r3, r3, #1
   2c664:	cmp	r3, #0
   2c668:	bne	2c68c <flatcc_builder_create_table@@Base+0x88>
   2c66c:	ldr	r3, [pc, #688]	; 2c924 <flatcc_builder_create_table@@Base+0x320>
   2c670:	add	r3, pc, r3
   2c674:	movw	r2, #1243	; 0x4db
   2c678:	ldr	r1, [pc, #680]	; 2c928 <flatcc_builder_create_table@@Base+0x324>
   2c67c:	add	r1, pc, r1
   2c680:	ldr	r0, [pc, #676]	; 2c92c <flatcc_builder_create_table@@Base+0x328>
   2c684:	add	r0, pc, r0
   2c688:	bl	129e0 <__assert_fail@plt>
   2c68c:	sub	r3, fp, #130	; 0x82
   2c690:	mov	r1, #4
   2c694:	mov	r0, r3
   2c698:	bl	29d3c <flatcc_builder_clear@@Base+0x10c>
   2c69c:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   2c6a0:	mov	r1, r3
   2c6a4:	ldr	r0, [fp, #-120]	; 0xffffff88
   2c6a8:	bl	29cf4 <flatcc_builder_clear@@Base+0xc4>
   2c6ac:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   2c6b0:	mov	r2, r3
   2c6b4:	ldr	r1, [fp, #-128]	; 0xffffff80
   2c6b8:	ldr	r0, [fp, #-120]	; 0xffffff88
   2c6bc:	bl	2a370 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   2c6c0:	str	r0, [fp, #-20]	; 0xffffffec
   2c6c4:	ldr	r3, [fp, #-120]	; 0xffffff88
   2c6c8:	ldr	r3, [r3, #136]	; 0x88
   2c6cc:	mov	r1, r3
   2c6d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   2c6d4:	ldr	r3, [fp, #-128]	; 0xffffff80
   2c6d8:	add	r3, r2, r3
   2c6dc:	sub	r3, r1, r3
   2c6e0:	sub	r3, r3, #4
   2c6e4:	str	r3, [fp, #-24]	; 0xffffffe8
   2c6e8:	ldr	r3, [fp, #12]
   2c6ec:	sub	r3, r3, #1
   2c6f0:	str	r3, [fp, #-28]	; 0xffffffe4
   2c6f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2c6f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c6fc:	sub	r3, r2, r3
   2c700:	str	r3, [fp, #-32]	; 0xffffffe0
   2c704:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2c708:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c70c:	sub	r3, r2, r3
   2c710:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2c714:	cmp	r2, r3
   2c718:	beq	2c724 <flatcc_builder_create_table@@Base+0x120>
   2c71c:	mvn	r3, #0
   2c720:	b	2c8fc <flatcc_builder_create_table@@Base+0x2f8>
   2c724:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2c728:	bl	28bec <main@@Base+0x53c>
   2c72c:	mov	r3, r0
   2c730:	str	r3, [fp, #-44]	; 0xffffffd4
   2c734:	mov	r3, #0
   2c738:	str	r3, [fp, #-16]
   2c73c:	b	2c7b4 <flatcc_builder_create_table@@Base+0x1b0>
   2c740:	ldr	r3, [fp, #-16]
   2c744:	lsl	r3, r3, #1
   2c748:	ldr	r2, [fp, #4]
   2c74c:	add	r3, r2, r3
   2c750:	ldrh	r3, [r3]
   2c754:	mov	r2, r3
   2c758:	ldr	r3, [fp, #-124]	; 0xffffff84
   2c75c:	add	r3, r2, r3
   2c760:	str	r3, [fp, #-36]	; 0xffffffdc
   2c764:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2c768:	ldr	r2, [r3]
   2c76c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c770:	sub	r3, r2, r3
   2c774:	ldr	r2, [fp, #-16]
   2c778:	lsl	r2, r2, #1
   2c77c:	ldr	r1, [fp, #4]
   2c780:	add	r2, r1, r2
   2c784:	ldrh	r2, [r2]
   2c788:	sub	r3, r3, r2
   2c78c:	sub	r3, r3, #4
   2c790:	str	r3, [fp, #-40]	; 0xffffffd8
   2c794:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2c798:	bl	28bec <main@@Base+0x53c>
   2c79c:	mov	r2, r0
   2c7a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2c7a4:	str	r2, [r3]
   2c7a8:	ldr	r3, [fp, #-16]
   2c7ac:	add	r3, r3, #1
   2c7b0:	str	r3, [fp, #-16]
   2c7b4:	ldr	r2, [fp, #-16]
   2c7b8:	ldr	r3, [fp, #8]
   2c7bc:	cmp	r2, r3
   2c7c0:	blt	2c740 <flatcc_builder_create_table@@Base+0x13c>
   2c7c4:	mov	r3, #0
   2c7c8:	str	r3, [fp, #-116]	; 0xffffff8c
   2c7cc:	mov	r3, #0
   2c7d0:	str	r3, [fp, #-112]	; 0xffffff90
   2c7d4:	ldr	r3, [fp, #-116]	; 0xffffff8c
   2c7d8:	add	r3, r3, #4
   2c7dc:	str	r3, [fp, #-116]	; 0xffffff8c
   2c7e0:	ldr	r3, [fp, #-112]	; 0xffffff90
   2c7e4:	add	r3, r3, #1
   2c7e8:	lsl	r3, r3, #3
   2c7ec:	sub	r2, fp, #12
   2c7f0:	add	r3, r2, r3
   2c7f4:	sub	r2, fp, #44	; 0x2c
   2c7f8:	str	r2, [r3, #-104]	; 0xffffff98
   2c7fc:	ldr	r3, [fp, #-112]	; 0xffffff90
   2c800:	add	r3, r3, #1
   2c804:	lsl	r3, r3, #3
   2c808:	sub	r2, fp, #12
   2c80c:	add	r3, r2, r3
   2c810:	mov	r2, #4
   2c814:	str	r2, [r3, #-100]	; 0xffffff9c
   2c818:	ldr	r3, [fp, #-112]	; 0xffffff90
   2c81c:	add	r3, r3, #1
   2c820:	str	r3, [fp, #-112]	; 0xffffff90
   2c824:	ldr	r3, [fp, #-128]	; 0xffffff80
   2c828:	cmp	r3, #0
   2c82c:	beq	2c884 <flatcc_builder_create_table@@Base+0x280>
   2c830:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2c834:	ldr	r3, [fp, #-128]	; 0xffffff80
   2c838:	add	r3, r2, r3
   2c83c:	str	r3, [fp, #-116]	; 0xffffff8c
   2c840:	ldr	r3, [fp, #-112]	; 0xffffff90
   2c844:	add	r3, r3, #1
   2c848:	lsl	r3, r3, #3
   2c84c:	sub	r2, fp, #12
   2c850:	add	r3, r2, r3
   2c854:	ldr	r2, [fp, #-124]	; 0xffffff84
   2c858:	str	r2, [r3, #-104]	; 0xffffff98
   2c85c:	ldr	r3, [fp, #-112]	; 0xffffff90
   2c860:	add	r3, r3, #1
   2c864:	lsl	r3, r3, #3
   2c868:	sub	r2, fp, #12
   2c86c:	add	r3, r2, r3
   2c870:	ldr	r2, [fp, #-128]	; 0xffffff80
   2c874:	str	r2, [r3, #-100]	; 0xffffff9c
   2c878:	ldr	r3, [fp, #-112]	; 0xffffff90
   2c87c:	add	r3, r3, #1
   2c880:	str	r3, [fp, #-112]	; 0xffffff90
   2c884:	ldr	r3, [fp, #-20]	; 0xffffffec
   2c888:	cmp	r3, #0
   2c88c:	beq	2c8e8 <flatcc_builder_create_table@@Base+0x2e4>
   2c890:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2c894:	ldr	r3, [fp, #-20]	; 0xffffffec
   2c898:	add	r3, r2, r3
   2c89c:	str	r3, [fp, #-116]	; 0xffffff8c
   2c8a0:	ldr	r3, [fp, #-112]	; 0xffffff90
   2c8a4:	add	r3, r3, #1
   2c8a8:	lsl	r3, r3, #3
   2c8ac:	sub	r2, fp, #12
   2c8b0:	add	r3, r2, r3
   2c8b4:	ldr	r2, [pc, #116]	; 2c930 <flatcc_builder_create_table@@Base+0x32c>
   2c8b8:	ldr	r2, [r4, r2]
   2c8bc:	str	r2, [r3, #-104]	; 0xffffff98
   2c8c0:	ldr	r3, [fp, #-112]	; 0xffffff90
   2c8c4:	add	r3, r3, #1
   2c8c8:	lsl	r3, r3, #3
   2c8cc:	sub	r2, fp, #12
   2c8d0:	add	r3, r2, r3
   2c8d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   2c8d8:	str	r2, [r3, #-100]	; 0xffffff9c
   2c8dc:	ldr	r3, [fp, #-112]	; 0xffffff90
   2c8e0:	add	r3, r3, #1
   2c8e4:	str	r3, [fp, #-112]	; 0xffffff90
   2c8e8:	sub	r3, fp, #116	; 0x74
   2c8ec:	mov	r1, r3
   2c8f0:	ldr	r0, [fp, #-120]	; 0xffffff88
   2c8f4:	bl	2a3f8 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   2c8f8:	mov	r3, r0
   2c8fc:	mov	r0, r3
   2c900:	sub	sp, fp, #8
   2c904:	ldr	r4, [sp]
   2c908:	ldr	fp, [sp, #4]
   2c90c:	add	sp, sp, #8
   2c910:	pop	{pc}		; (ldr pc, [sp], #4)
   2c914:	andeq	fp, r1, ip, asr #19
   2c918:	andeq	sl, r0, r4, ror #11
   2c91c:	andeq	r9, r0, r4, lsr pc
   2c920:	andeq	sl, r0, ip, asr #3
   2c924:			; <UNDEFINED> instruction: 0x0000a5b4
   2c928:	andeq	r9, r0, r4, lsl #30
   2c92c:			; <UNDEFINED> instruction: 0x0000a1b0
   2c930:	andeq	r0, r0, r4, rrx

0002c934 <flatcc_builder_check_required_field@@Base>:
   2c934:	str	fp, [sp, #-8]!
   2c938:	str	lr, [sp, #4]
   2c93c:	add	fp, sp, #4
   2c940:	sub	sp, sp, #8
   2c944:	str	r0, [fp, #-8]
   2c948:	mov	r3, r1
   2c94c:	strh	r3, [fp, #-10]
   2c950:	ldr	r3, [fp, #-8]
   2c954:	ldr	r3, [r3, #32]
   2c958:	ldrh	r3, [r3, #14]
   2c95c:	cmp	r3, #3
   2c960:	beq	2c984 <flatcc_builder_check_required_field@@Base+0x50>
   2c964:	ldr	r3, [pc, #108]	; 2c9d8 <flatcc_builder_check_required_field@@Base+0xa4>
   2c968:	add	r3, pc, r3
   2c96c:	movw	r2, #1272	; 0x4f8
   2c970:	ldr	r1, [pc, #100]	; 2c9dc <flatcc_builder_check_required_field@@Base+0xa8>
   2c974:	add	r1, pc, r1
   2c978:	ldr	r0, [pc, #96]	; 2c9e0 <flatcc_builder_check_required_field@@Base+0xac>
   2c97c:	add	r0, pc, r0
   2c980:	bl	129e0 <__assert_fail@plt>
   2c984:	ldr	r3, [fp, #-8]
   2c988:	ldrh	r3, [r3, #8]
   2c98c:	ldrh	r2, [fp, #-10]
   2c990:	cmp	r2, r3
   2c994:	bcs	2c9c0 <flatcc_builder_check_required_field@@Base+0x8c>
   2c998:	ldr	r3, [fp, #-8]
   2c99c:	ldr	r2, [r3, #4]
   2c9a0:	ldrh	r3, [fp, #-10]
   2c9a4:	lsl	r3, r3, #1
   2c9a8:	add	r3, r2, r3
   2c9ac:	ldrh	r3, [r3]
   2c9b0:	cmp	r3, #0
   2c9b4:	beq	2c9c0 <flatcc_builder_check_required_field@@Base+0x8c>
   2c9b8:	mov	r3, #1
   2c9bc:	b	2c9c4 <flatcc_builder_check_required_field@@Base+0x90>
   2c9c0:	mov	r3, #0
   2c9c4:	mov	r0, r3
   2c9c8:	sub	sp, fp, #4
   2c9cc:	ldr	fp, [sp]
   2c9d0:	add	sp, sp, #4
   2c9d4:	pop	{pc}		; (ldr pc, [sp], #4)
   2c9d8:	ldrdeq	sl, [r0], -r8
   2c9dc:	andeq	r9, r0, ip, lsl #24
   2c9e0:	andeq	r9, r0, r4, asr #29

0002c9e4 <flatcc_builder_check_union_field@@Base>:
   2c9e4:	str	fp, [sp, #-8]!
   2c9e8:	str	lr, [sp, #4]
   2c9ec:	add	fp, sp, #4
   2c9f0:	sub	sp, sp, #8
   2c9f4:	str	r0, [fp, #-8]
   2c9f8:	mov	r3, r1
   2c9fc:	strh	r3, [fp, #-10]
   2ca00:	ldr	r3, [fp, #-8]
   2ca04:	ldr	r3, [r3, #32]
   2ca08:	ldrh	r3, [r3, #14]
   2ca0c:	cmp	r3, #3
   2ca10:	beq	2ca34 <flatcc_builder_check_union_field@@Base+0x50>
   2ca14:	ldr	r3, [pc, #300]	; 2cb48 <flatcc_builder_check_union_field@@Base+0x164>
   2ca18:	add	r3, pc, r3
   2ca1c:	movw	r2, #1279	; 0x4ff
   2ca20:	ldr	r1, [pc, #292]	; 2cb4c <flatcc_builder_check_union_field@@Base+0x168>
   2ca24:	add	r1, pc, r1
   2ca28:	ldr	r0, [pc, #288]	; 2cb50 <flatcc_builder_check_union_field@@Base+0x16c>
   2ca2c:	add	r0, pc, r0
   2ca30:	bl	129e0 <__assert_fail@plt>
   2ca34:	ldrh	r3, [fp, #-10]
   2ca38:	cmp	r3, #0
   2ca3c:	beq	2ca54 <flatcc_builder_check_union_field@@Base+0x70>
   2ca40:	ldr	r3, [fp, #-8]
   2ca44:	ldrh	r3, [r3, #8]
   2ca48:	ldrh	r2, [fp, #-10]
   2ca4c:	cmp	r2, r3
   2ca50:	bcc	2ca5c <flatcc_builder_check_union_field@@Base+0x78>
   2ca54:	mov	r3, #0
   2ca58:	b	2cb34 <flatcc_builder_check_union_field@@Base+0x150>
   2ca5c:	ldr	r3, [fp, #-8]
   2ca60:	ldr	r2, [r3, #4]
   2ca64:	ldrh	r3, [fp, #-10]
   2ca68:	sub	r3, r3, #-2147483647	; 0x80000001
   2ca6c:	lsl	r3, r3, #1
   2ca70:	add	r3, r2, r3
   2ca74:	ldrh	r3, [r3]
   2ca78:	cmp	r3, #0
   2ca7c:	bne	2caac <flatcc_builder_check_union_field@@Base+0xc8>
   2ca80:	ldr	r3, [fp, #-8]
   2ca84:	ldr	r2, [r3, #4]
   2ca88:	ldrh	r3, [fp, #-10]
   2ca8c:	lsl	r3, r3, #1
   2ca90:	add	r3, r2, r3
   2ca94:	ldrh	r3, [r3]
   2ca98:	cmp	r3, #0
   2ca9c:	moveq	r3, #1
   2caa0:	movne	r3, #0
   2caa4:	uxtb	r3, r3
   2caa8:	b	2cb34 <flatcc_builder_check_union_field@@Base+0x150>
   2caac:	ldr	r3, [fp, #-8]
   2cab0:	ldr	r3, [r3, #16]
   2cab4:	ldr	r2, [fp, #-8]
   2cab8:	ldr	r1, [r2, #4]
   2cabc:	ldrh	r2, [fp, #-10]
   2cac0:	sub	r2, r2, #-2147483647	; 0x80000001
   2cac4:	lsl	r2, r2, #1
   2cac8:	add	r2, r1, r2
   2cacc:	ldrh	r2, [r2]
   2cad0:	add	r3, r3, r2
   2cad4:	ldrb	r3, [r3]
   2cad8:	cmp	r3, #0
   2cadc:	beq	2cb0c <flatcc_builder_check_union_field@@Base+0x128>
   2cae0:	ldr	r3, [fp, #-8]
   2cae4:	ldr	r2, [r3, #4]
   2cae8:	ldrh	r3, [fp, #-10]
   2caec:	lsl	r3, r3, #1
   2caf0:	add	r3, r2, r3
   2caf4:	ldrh	r3, [r3]
   2caf8:	cmp	r3, #0
   2cafc:	movne	r3, #1
   2cb00:	moveq	r3, #0
   2cb04:	uxtb	r3, r3
   2cb08:	b	2cb34 <flatcc_builder_check_union_field@@Base+0x150>
   2cb0c:	ldr	r3, [fp, #-8]
   2cb10:	ldr	r2, [r3, #4]
   2cb14:	ldrh	r3, [fp, #-10]
   2cb18:	lsl	r3, r3, #1
   2cb1c:	add	r3, r2, r3
   2cb20:	ldrh	r3, [r3]
   2cb24:	cmp	r3, #0
   2cb28:	moveq	r3, #1
   2cb2c:	movne	r3, #0
   2cb30:	uxtb	r3, r3
   2cb34:	mov	r0, r3
   2cb38:	sub	sp, fp, #4
   2cb3c:	ldr	fp, [sp]
   2cb40:	add	sp, sp, #4
   2cb44:	pop	{pc}		; (ldr pc, [sp], #4)
   2cb48:	andeq	sl, r0, ip, asr #4
   2cb4c:	andeq	r9, r0, ip, asr fp
   2cb50:	andeq	r9, r0, r4, lsl lr

0002cb54 <flatcc_builder_check_required@@Base>:
   2cb54:	str	fp, [sp, #-8]!
   2cb58:	str	lr, [sp, #4]
   2cb5c:	add	fp, sp, #4
   2cb60:	sub	sp, sp, #24
   2cb64:	str	r0, [fp, #-16]
   2cb68:	str	r1, [fp, #-20]	; 0xffffffec
   2cb6c:	str	r2, [fp, #-24]	; 0xffffffe8
   2cb70:	ldr	r3, [fp, #-16]
   2cb74:	ldr	r3, [r3, #32]
   2cb78:	ldrh	r3, [r3, #14]
   2cb7c:	cmp	r3, #3
   2cb80:	beq	2cba4 <flatcc_builder_check_required@@Base+0x50>
   2cb84:	ldr	r3, [pc, #176]	; 2cc3c <flatcc_builder_check_required@@Base+0xe8>
   2cb88:	add	r3, pc, r3
   2cb8c:	movw	r2, #1297	; 0x511
   2cb90:	ldr	r1, [pc, #168]	; 2cc40 <flatcc_builder_check_required@@Base+0xec>
   2cb94:	add	r1, pc, r1
   2cb98:	ldr	r0, [pc, #164]	; 2cc44 <flatcc_builder_check_required@@Base+0xf0>
   2cb9c:	add	r0, pc, r0
   2cba0:	bl	129e0 <__assert_fail@plt>
   2cba4:	ldr	r3, [fp, #-16]
   2cba8:	ldrh	r3, [r3, #8]
   2cbac:	mov	r2, r3
   2cbb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2cbb4:	cmp	r3, r2
   2cbb8:	ble	2cbc4 <flatcc_builder_check_required@@Base+0x70>
   2cbbc:	mov	r3, #0
   2cbc0:	b	2cc28 <flatcc_builder_check_required@@Base+0xd4>
   2cbc4:	mov	r3, #0
   2cbc8:	str	r3, [fp, #-8]
   2cbcc:	b	2cc14 <flatcc_builder_check_required@@Base+0xc0>
   2cbd0:	ldr	r3, [fp, #-16]
   2cbd4:	ldr	r2, [r3, #4]
   2cbd8:	ldr	r3, [fp, #-8]
   2cbdc:	lsl	r3, r3, #1
   2cbe0:	ldr	r1, [fp, #-20]	; 0xffffffec
   2cbe4:	add	r3, r1, r3
   2cbe8:	ldrh	r3, [r3]
   2cbec:	lsl	r3, r3, #1
   2cbf0:	add	r3, r2, r3
   2cbf4:	ldrh	r3, [r3]
   2cbf8:	cmp	r3, #0
   2cbfc:	bne	2cc08 <flatcc_builder_check_required@@Base+0xb4>
   2cc00:	mov	r3, #0
   2cc04:	b	2cc28 <flatcc_builder_check_required@@Base+0xd4>
   2cc08:	ldr	r3, [fp, #-8]
   2cc0c:	add	r3, r3, #1
   2cc10:	str	r3, [fp, #-8]
   2cc14:	ldr	r2, [fp, #-8]
   2cc18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2cc1c:	cmp	r2, r3
   2cc20:	blt	2cbd0 <flatcc_builder_check_required@@Base+0x7c>
   2cc24:	mov	r3, #1
   2cc28:	mov	r0, r3
   2cc2c:	sub	sp, fp, #4
   2cc30:	ldr	fp, [sp]
   2cc34:	add	sp, sp, #4
   2cc38:	pop	{pc}		; (ldr pc, [sp], #4)
   2cc3c:	andeq	sl, r0, r0, lsl #2
   2cc40:	andeq	r9, r0, ip, ror #19
   2cc44:	andeq	r9, r0, r4, lsr #25

0002cc48 <flatcc_builder_end_table@@Base>:
   2cc48:	str	fp, [sp, #-8]!
   2cc4c:	str	lr, [sp, #4]
   2cc50:	add	fp, sp, #4
   2cc54:	sub	sp, sp, #48	; 0x30
   2cc58:	str	r0, [fp, #-32]	; 0xffffffe0
   2cc5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2cc60:	ldr	r3, [r3, #32]
   2cc64:	ldrh	r3, [r3, #14]
   2cc68:	cmp	r3, #3
   2cc6c:	beq	2cc90 <flatcc_builder_end_table@@Base+0x48>
   2cc70:	ldr	r3, [pc, #520]	; 2ce80 <flatcc_builder_end_table@@Base+0x238>
   2cc74:	add	r3, pc, r3
   2cc78:	movw	r2, #1317	; 0x525
   2cc7c:	ldr	r1, [pc, #512]	; 2ce84 <flatcc_builder_end_table@@Base+0x23c>
   2cc80:	add	r1, pc, r1
   2cc84:	ldr	r0, [pc, #508]	; 2ce88 <flatcc_builder_end_table@@Base+0x240>
   2cc88:	add	r0, pc, r0
   2cc8c:	bl	129e0 <__assert_fail@plt>
   2cc90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2cc94:	ldr	r3, [r3, #4]
   2cc98:	sub	r3, r3, #4
   2cc9c:	str	r3, [fp, #-8]
   2cca0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2cca4:	ldrh	r3, [r3, #8]
   2cca8:	add	r3, r3, #2
   2ccac:	uxth	r3, r3
   2ccb0:	lsl	r3, r3, #1
   2ccb4:	strh	r3, [fp, #-10]
   2ccb8:	ldr	r3, [fp, #-8]
   2ccbc:	ldrh	r2, [fp, #-10]
   2ccc0:	strh	r2, [r3]
   2ccc4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ccc8:	ldr	r3, [r3, #20]
   2cccc:	uxth	r2, r3
   2ccd0:	ldr	r3, [fp, #-8]
   2ccd4:	add	r3, r3, #2
   2ccd8:	add	r2, r2, #4
   2ccdc:	uxth	r2, r2
   2cce0:	strh	r2, [r3]
   2cce4:	ldr	r3, [fp, #-8]
   2cce8:	ldrh	r3, [r3]
   2ccec:	mov	r2, r3
   2ccf0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ccf4:	ldr	r3, [r3, #12]
   2ccf8:	eor	r2, r2, r3
   2ccfc:	movw	r3, #31153	; 0x79b1
   2cd00:	movt	r3, #40503	; 0x9e37
   2cd04:	mul	r3, r3, r2
   2cd08:	ldr	r2, [fp, #-8]
   2cd0c:	add	r2, r2, #2
   2cd10:	ldrh	r2, [r2]
   2cd14:	eor	r2, r2, r3
   2cd18:	movw	r3, #31153	; 0x79b1
   2cd1c:	movt	r3, #40503	; 0x9e37
   2cd20:	mul	r2, r3, r2
   2cd24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2cd28:	str	r2, [r3, #12]
   2cd2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2cd30:	ldr	r3, [r3, #12]
   2cd34:	ldrh	r2, [fp, #-10]
   2cd38:	ldr	r1, [fp, #-8]
   2cd3c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2cd40:	bl	2c2e4 <flatcc_builder_create_cached_vtable@@Base>
   2cd44:	str	r0, [fp, #-16]
   2cd48:	ldr	r3, [fp, #-16]
   2cd4c:	cmp	r3, #0
   2cd50:	bne	2cd5c <flatcc_builder_end_table@@Base+0x114>
   2cd54:	mov	r3, #0
   2cd58:	b	2ce6c <flatcc_builder_end_table@@Base+0x224>
   2cd5c:	ldrh	r3, [fp, #-10]
   2cd60:	mov	r2, r3
   2cd64:	mov	r1, #0
   2cd68:	ldr	r0, [fp, #-8]
   2cd6c:	bl	12998 <memset@plt>
   2cd70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2cd74:	ldr	r2, [r3, #76]	; 0x4c
   2cd78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2cd7c:	ldr	r3, [r3, #32]
   2cd80:	ldr	r3, [r3, #20]
   2cd84:	add	r3, r2, r3
   2cd88:	str	r3, [fp, #-20]	; 0xffffffec
   2cd8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2cd90:	ldr	r2, [r3]
   2cd94:	ldr	r3, [fp, #-20]	; 0xffffffec
   2cd98:	sub	r3, r2, r3
   2cd9c:	asr	r3, r3, #1
   2cda0:	str	r3, [fp, #-24]	; 0xffffffe8
   2cda4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2cda8:	ldr	r1, [r3, #16]
   2cdac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2cdb0:	ldr	r2, [r3, #20]
   2cdb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2cdb8:	ldrh	r0, [r3, #130]	; 0x82
   2cdbc:	ldr	r3, [fp, #-16]
   2cdc0:	str	r3, [sp, #8]
   2cdc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2cdc8:	str	r3, [sp, #4]
   2cdcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   2cdd0:	str	r3, [sp]
   2cdd4:	mov	r3, r0
   2cdd8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2cddc:	bl	2c604 <flatcc_builder_create_table@@Base>
   2cde0:	str	r0, [fp, #-28]	; 0xffffffe4
   2cde4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2cde8:	cmp	r3, #0
   2cdec:	bne	2cdf8 <flatcc_builder_end_table@@Base+0x1b0>
   2cdf0:	mov	r3, #0
   2cdf4:	b	2ce6c <flatcc_builder_end_table@@Base+0x224>
   2cdf8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2cdfc:	ldr	r3, [r3, #32]
   2ce00:	ldr	r2, [r3, #24]
   2ce04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ce08:	str	r2, [r3, #12]
   2ce0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ce10:	ldr	r3, [r3, #32]
   2ce14:	ldrh	r2, [r3, #28]
   2ce18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ce1c:	strh	r2, [r3, #8]
   2ce20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ce24:	ldr	r2, [r3, #52]	; 0x34
   2ce28:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ce2c:	ldr	r3, [r3, #32]
   2ce30:	ldr	r3, [r3, #16]
   2ce34:	add	r2, r2, r3
   2ce38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ce3c:	str	r2, [r3, #4]
   2ce40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ce44:	ldr	r2, [r3, #76]	; 0x4c
   2ce48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ce4c:	ldr	r3, [r3, #32]
   2ce50:	ldr	r3, [r3, #20]
   2ce54:	add	r2, r2, r3
   2ce58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ce5c:	str	r2, [r3]
   2ce60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2ce64:	bl	2a29c <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   2ce68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2ce6c:	mov	r0, r3
   2ce70:	sub	sp, fp, #4
   2ce74:	ldr	fp, [sp]
   2ce78:	add	sp, sp, #4
   2ce7c:	pop	{pc}		; (ldr pc, [sp], #4)
   2ce80:	andeq	sl, r0, r4, lsr r0
   2ce84:	andeq	r9, r0, r0, lsl #18
   2ce88:			; <UNDEFINED> instruction: 0x00009bb8

0002ce8c <flatcc_builder_create_vector@@Base>:
   2ce8c:	str	r4, [sp, #-12]!
   2ce90:	str	fp, [sp, #4]
   2ce94:	str	lr, [sp, #8]
   2ce98:	add	fp, sp, #8
   2ce9c:	sub	sp, sp, #108	; 0x6c
   2cea0:	str	r0, [fp, #-104]	; 0xffffff98
   2cea4:	str	r1, [fp, #-108]	; 0xffffff94
   2cea8:	str	r2, [fp, #-112]	; 0xffffff90
   2ceac:	str	r3, [fp, #-116]	; 0xffffff8c
   2ceb0:	ldr	r4, [pc, #496]	; 2d0a8 <flatcc_builder_create_vector@@Base+0x21c>
   2ceb4:	add	r4, pc, r4
   2ceb8:	ldr	r2, [fp, #-112]	; 0xffffff90
   2cebc:	ldr	r3, [fp, #8]
   2cec0:	cmp	r2, r3
   2cec4:	bls	2cf00 <flatcc_builder_create_vector@@Base+0x74>
   2cec8:	ldr	r2, [fp, #-112]	; 0xffffff90
   2cecc:	ldr	r3, [fp, #8]
   2ced0:	cmp	r2, r3
   2ced4:	bls	2cef8 <flatcc_builder_create_vector@@Base+0x6c>
   2ced8:	ldr	r3, [pc, #460]	; 2d0ac <flatcc_builder_create_vector@@Base+0x220>
   2cedc:	add	r3, pc, r3
   2cee0:	movw	r2, #1365	; 0x555
   2cee4:	ldr	r1, [pc, #452]	; 2d0b0 <flatcc_builder_create_vector@@Base+0x224>
   2cee8:	add	r1, pc, r1
   2ceec:	ldr	r0, [pc, #448]	; 2d0b4 <flatcc_builder_create_vector@@Base+0x228>
   2cef0:	add	r0, pc, r0
   2cef4:	bl	129e0 <__assert_fail@plt>
   2cef8:	mov	r3, #0
   2cefc:	b	2d090 <flatcc_builder_create_vector@@Base+0x204>
   2cf00:	mov	r1, #4
   2cf04:	add	r3, fp, #4
   2cf08:	mov	r0, r3
   2cf0c:	bl	29d3c <flatcc_builder_clear@@Base+0x10c>
   2cf10:	ldrh	r3, [fp, #4]
   2cf14:	mov	r1, r3
   2cf18:	ldr	r0, [fp, #-104]	; 0xffffff98
   2cf1c:	bl	29cf4 <flatcc_builder_clear@@Base+0xc4>
   2cf20:	ldr	r3, [fp, #-112]	; 0xffffff90
   2cf24:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2cf28:	mul	r3, r2, r3
   2cf2c:	str	r3, [fp, #-16]
   2cf30:	ldr	r0, [fp, #-112]	; 0xffffff90
   2cf34:	bl	28bec <main@@Base+0x53c>
   2cf38:	mov	r3, r0
   2cf3c:	str	r3, [fp, #-24]	; 0xffffffe8
   2cf40:	ldrh	r3, [fp, #4]
   2cf44:	mov	r2, r3
   2cf48:	ldr	r1, [fp, #-16]
   2cf4c:	ldr	r0, [fp, #-104]	; 0xffffff98
   2cf50:	bl	2a370 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   2cf54:	str	r0, [fp, #-20]	; 0xffffffec
   2cf58:	mov	r3, #0
   2cf5c:	str	r3, [fp, #-96]	; 0xffffffa0
   2cf60:	mov	r3, #0
   2cf64:	str	r3, [fp, #-92]	; 0xffffffa4
   2cf68:	ldr	r3, [fp, #-96]	; 0xffffffa0
   2cf6c:	add	r3, r3, #4
   2cf70:	str	r3, [fp, #-96]	; 0xffffffa0
   2cf74:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2cf78:	add	r3, r3, #1
   2cf7c:	lsl	r3, r3, #3
   2cf80:	sub	r2, fp, #12
   2cf84:	add	r3, r2, r3
   2cf88:	sub	r2, fp, #24
   2cf8c:	str	r2, [r3, #-84]	; 0xffffffac
   2cf90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2cf94:	add	r3, r3, #1
   2cf98:	lsl	r3, r3, #3
   2cf9c:	sub	r2, fp, #12
   2cfa0:	add	r3, r2, r3
   2cfa4:	mov	r2, #4
   2cfa8:	str	r2, [r3, #-80]	; 0xffffffb0
   2cfac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2cfb0:	add	r3, r3, #1
   2cfb4:	str	r3, [fp, #-92]	; 0xffffffa4
   2cfb8:	ldr	r3, [fp, #-16]
   2cfbc:	cmp	r3, #0
   2cfc0:	beq	2d018 <flatcc_builder_create_vector@@Base+0x18c>
   2cfc4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   2cfc8:	ldr	r3, [fp, #-16]
   2cfcc:	add	r3, r2, r3
   2cfd0:	str	r3, [fp, #-96]	; 0xffffffa0
   2cfd4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2cfd8:	add	r3, r3, #1
   2cfdc:	lsl	r3, r3, #3
   2cfe0:	sub	r2, fp, #12
   2cfe4:	add	r3, r2, r3
   2cfe8:	ldr	r2, [fp, #-108]	; 0xffffff94
   2cfec:	str	r2, [r3, #-84]	; 0xffffffac
   2cff0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2cff4:	add	r3, r3, #1
   2cff8:	lsl	r3, r3, #3
   2cffc:	sub	r2, fp, #12
   2d000:	add	r3, r2, r3
   2d004:	ldr	r2, [fp, #-16]
   2d008:	str	r2, [r3, #-80]	; 0xffffffb0
   2d00c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2d010:	add	r3, r3, #1
   2d014:	str	r3, [fp, #-92]	; 0xffffffa4
   2d018:	ldr	r3, [fp, #-20]	; 0xffffffec
   2d01c:	cmp	r3, #0
   2d020:	beq	2d07c <flatcc_builder_create_vector@@Base+0x1f0>
   2d024:	ldr	r2, [fp, #-96]	; 0xffffffa0
   2d028:	ldr	r3, [fp, #-20]	; 0xffffffec
   2d02c:	add	r3, r2, r3
   2d030:	str	r3, [fp, #-96]	; 0xffffffa0
   2d034:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2d038:	add	r3, r3, #1
   2d03c:	lsl	r3, r3, #3
   2d040:	sub	r2, fp, #12
   2d044:	add	r3, r2, r3
   2d048:	ldr	r2, [pc, #104]	; 2d0b8 <flatcc_builder_create_vector@@Base+0x22c>
   2d04c:	ldr	r2, [r4, r2]
   2d050:	str	r2, [r3, #-84]	; 0xffffffac
   2d054:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2d058:	add	r3, r3, #1
   2d05c:	lsl	r3, r3, #3
   2d060:	sub	r2, fp, #12
   2d064:	add	r3, r2, r3
   2d068:	ldr	r2, [fp, #-20]	; 0xffffffec
   2d06c:	str	r2, [r3, #-80]	; 0xffffffb0
   2d070:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2d074:	add	r3, r3, #1
   2d078:	str	r3, [fp, #-92]	; 0xffffffa4
   2d07c:	sub	r3, fp, #96	; 0x60
   2d080:	mov	r1, r3
   2d084:	ldr	r0, [fp, #-104]	; 0xffffff98
   2d088:	bl	2a3f8 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   2d08c:	mov	r3, r0
   2d090:	mov	r0, r3
   2d094:	sub	sp, fp, #8
   2d098:	ldr	r4, [sp]
   2d09c:	ldr	fp, [sp, #4]
   2d0a0:	add	sp, sp, #8
   2d0a4:	pop	{pc}		; (ldr pc, [sp], #4)
   2d0a8:	andeq	fp, r1, r4, asr #2
   2d0ac:	andeq	r9, r0, r8, ror #27
   2d0b0:	muleq	r0, r8, r6
   2d0b4:	andeq	r9, r0, ip, ror r9
   2d0b8:	andeq	r0, r0, r4, rrx

0002d0bc <flatcc_builder_end_vector@@Base>:
   2d0bc:	str	fp, [sp, #-8]!
   2d0c0:	str	lr, [sp, #4]
   2d0c4:	add	fp, sp, #4
   2d0c8:	sub	sp, sp, #24
   2d0cc:	str	r0, [fp, #-16]
   2d0d0:	ldr	r3, [fp, #-16]
   2d0d4:	ldr	r3, [r3, #32]
   2d0d8:	ldrh	r3, [r3, #14]
   2d0dc:	cmp	r3, #4
   2d0e0:	beq	2d104 <flatcc_builder_end_vector@@Base+0x48>
   2d0e4:	ldr	r3, [pc, #156]	; 2d188 <flatcc_builder_end_vector@@Base+0xcc>
   2d0e8:	add	r3, pc, r3
   2d0ec:	movw	r2, #1400	; 0x578
   2d0f0:	ldr	r1, [pc, #148]	; 2d18c <flatcc_builder_end_vector@@Base+0xd0>
   2d0f4:	add	r1, pc, r1
   2d0f8:	ldr	r0, [pc, #144]	; 2d190 <flatcc_builder_end_vector@@Base+0xd4>
   2d0fc:	add	r0, pc, r0
   2d100:	bl	129e0 <__assert_fail@plt>
   2d104:	ldr	r3, [fp, #-16]
   2d108:	ldr	r1, [r3, #16]
   2d10c:	ldr	r3, [fp, #-16]
   2d110:	ldr	r3, [r3, #32]
   2d114:	ldr	r0, [r3, #20]
   2d118:	ldr	r3, [fp, #-16]
   2d11c:	ldr	r3, [r3, #32]
   2d120:	ldr	ip, [r3, #16]
   2d124:	ldr	r3, [fp, #-16]
   2d128:	ldrh	r3, [r3, #130]	; 0x82
   2d12c:	ldr	r2, [fp, #-16]
   2d130:	ldr	r2, [r2, #32]
   2d134:	ldr	r2, [r2, #24]
   2d138:	str	r2, [sp, #4]
   2d13c:	str	r3, [sp]
   2d140:	mov	r3, ip
   2d144:	mov	r2, r0
   2d148:	ldr	r0, [fp, #-16]
   2d14c:	bl	2ce8c <flatcc_builder_create_vector@@Base>
   2d150:	str	r0, [fp, #-8]
   2d154:	ldr	r3, [fp, #-8]
   2d158:	cmp	r3, #0
   2d15c:	bne	2d168 <flatcc_builder_end_vector@@Base+0xac>
   2d160:	mov	r3, #0
   2d164:	b	2d174 <flatcc_builder_end_vector@@Base+0xb8>
   2d168:	ldr	r0, [fp, #-16]
   2d16c:	bl	2a29c <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   2d170:	ldr	r3, [fp, #-8]
   2d174:	mov	r0, r3
   2d178:	sub	sp, fp, #4
   2d17c:	ldr	fp, [sp]
   2d180:	add	sp, sp, #4
   2d184:	pop	{pc}		; (ldr pc, [sp], #4)
   2d188:	strdeq	r9, [r0], -ip
   2d18c:	andeq	r9, r0, ip, lsl #9
   2d190:	andeq	r9, r0, r8, asr #11

0002d194 <flatcc_builder_vector_count@@Base>:
   2d194:	push	{fp}		; (str fp, [sp, #-4]!)
   2d198:	add	fp, sp, #0
   2d19c:	sub	sp, sp, #12
   2d1a0:	str	r0, [fp, #-8]
   2d1a4:	ldr	r3, [fp, #-8]
   2d1a8:	ldr	r3, [r3, #32]
   2d1ac:	ldr	r3, [r3, #20]
   2d1b0:	mov	r0, r3
   2d1b4:	add	sp, fp, #0
   2d1b8:	pop	{fp}		; (ldr fp, [sp], #4)
   2d1bc:	bx	lr

0002d1c0 <flatcc_builder_vector_edit@@Base>:
   2d1c0:	push	{fp}		; (str fp, [sp, #-4]!)
   2d1c4:	add	fp, sp, #0
   2d1c8:	sub	sp, sp, #12
   2d1cc:	str	r0, [fp, #-8]
   2d1d0:	ldr	r3, [fp, #-8]
   2d1d4:	ldr	r3, [r3, #16]
   2d1d8:	mov	r0, r3
   2d1dc:	add	sp, fp, #0
   2d1e0:	pop	{fp}		; (ldr fp, [sp], #4)
   2d1e4:	bx	lr
   2d1e8:	str	r4, [sp, #-12]!
   2d1ec:	str	fp, [sp, #4]
   2d1f0:	str	lr, [sp, #8]
   2d1f4:	add	fp, sp, #8
   2d1f8:	sub	sp, sp, #116	; 0x74
   2d1fc:	str	r0, [fp, #-112]	; 0xffffff90
   2d200:	str	r1, [fp, #-116]	; 0xffffff8c
   2d204:	str	r2, [fp, #-120]	; 0xffffff88
   2d208:	str	r3, [fp, #-124]	; 0xffffff84
   2d20c:	ldr	r4, [pc, #764]	; 2d510 <flatcc_builder_vector_edit@@Base+0x350>
   2d210:	add	r4, pc, r4
   2d214:	ldr	r3, [fp, #-120]	; 0xffffff88
   2d218:	cmn	r3, #-1073741823	; 0xc0000001
   2d21c:	bls	2d228 <flatcc_builder_vector_edit@@Base+0x68>
   2d220:	mov	r3, #0
   2d224:	b	2d4f8 <flatcc_builder_vector_edit@@Base+0x338>
   2d228:	mov	r1, #4
   2d22c:	ldr	r0, [fp, #-112]	; 0xffffff90
   2d230:	bl	29cf4 <flatcc_builder_clear@@Base+0xc4>
   2d234:	ldr	r3, [fp, #-120]	; 0xffffff88
   2d238:	lsl	r3, r3, #2
   2d23c:	str	r3, [fp, #-20]	; 0xffffffec
   2d240:	ldr	r0, [fp, #-120]	; 0xffffff88
   2d244:	bl	28bec <main@@Base+0x53c>
   2d248:	mov	r3, r0
   2d24c:	str	r3, [fp, #-36]	; 0xffffffdc
   2d250:	mov	r2, #4
   2d254:	ldr	r1, [fp, #-20]	; 0xffffffec
   2d258:	ldr	r0, [fp, #-112]	; 0xffffff90
   2d25c:	bl	2a370 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   2d260:	str	r0, [fp, #-24]	; 0xffffffe8
   2d264:	mov	r3, #0
   2d268:	str	r3, [fp, #-108]	; 0xffffff94
   2d26c:	mov	r3, #0
   2d270:	str	r3, [fp, #-104]	; 0xffffff98
   2d274:	ldr	r3, [fp, #-108]	; 0xffffff94
   2d278:	add	r3, r3, #4
   2d27c:	str	r3, [fp, #-108]	; 0xffffff94
   2d280:	ldr	r3, [fp, #-104]	; 0xffffff98
   2d284:	add	r3, r3, #1
   2d288:	lsl	r3, r3, #3
   2d28c:	sub	r2, fp, #12
   2d290:	add	r3, r2, r3
   2d294:	sub	r2, fp, #36	; 0x24
   2d298:	str	r2, [r3, #-96]	; 0xffffffa0
   2d29c:	ldr	r3, [fp, #-104]	; 0xffffff98
   2d2a0:	add	r3, r3, #1
   2d2a4:	lsl	r3, r3, #3
   2d2a8:	sub	r2, fp, #12
   2d2ac:	add	r3, r2, r3
   2d2b0:	mov	r2, #4
   2d2b4:	str	r2, [r3, #-92]	; 0xffffffa4
   2d2b8:	ldr	r3, [fp, #-104]	; 0xffffff98
   2d2bc:	add	r3, r3, #1
   2d2c0:	str	r3, [fp, #-104]	; 0xffffff98
   2d2c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   2d2c8:	cmp	r3, #0
   2d2cc:	beq	2d324 <flatcc_builder_vector_edit@@Base+0x164>
   2d2d0:	ldr	r2, [fp, #-108]	; 0xffffff94
   2d2d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   2d2d8:	add	r3, r2, r3
   2d2dc:	str	r3, [fp, #-108]	; 0xffffff94
   2d2e0:	ldr	r3, [fp, #-104]	; 0xffffff98
   2d2e4:	add	r3, r3, #1
   2d2e8:	lsl	r3, r3, #3
   2d2ec:	sub	r2, fp, #12
   2d2f0:	add	r3, r2, r3
   2d2f4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2d2f8:	str	r2, [r3, #-96]	; 0xffffffa0
   2d2fc:	ldr	r3, [fp, #-104]	; 0xffffff98
   2d300:	add	r3, r3, #1
   2d304:	lsl	r3, r3, #3
   2d308:	sub	r2, fp, #12
   2d30c:	add	r3, r2, r3
   2d310:	ldr	r2, [fp, #-20]	; 0xffffffec
   2d314:	str	r2, [r3, #-92]	; 0xffffffa4
   2d318:	ldr	r3, [fp, #-104]	; 0xffffff98
   2d31c:	add	r3, r3, #1
   2d320:	str	r3, [fp, #-104]	; 0xffffff98
   2d324:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d328:	cmp	r3, #0
   2d32c:	beq	2d388 <flatcc_builder_vector_edit@@Base+0x1c8>
   2d330:	ldr	r2, [fp, #-108]	; 0xffffff94
   2d334:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d338:	add	r3, r2, r3
   2d33c:	str	r3, [fp, #-108]	; 0xffffff94
   2d340:	ldr	r3, [fp, #-104]	; 0xffffff98
   2d344:	add	r3, r3, #1
   2d348:	lsl	r3, r3, #3
   2d34c:	sub	r2, fp, #12
   2d350:	add	r3, r2, r3
   2d354:	ldr	r2, [pc, #440]	; 2d514 <flatcc_builder_vector_edit@@Base+0x354>
   2d358:	ldr	r2, [r4, r2]
   2d35c:	str	r2, [r3, #-96]	; 0xffffffa0
   2d360:	ldr	r3, [fp, #-104]	; 0xffffff98
   2d364:	add	r3, r3, #1
   2d368:	lsl	r3, r3, #3
   2d36c:	sub	r2, fp, #12
   2d370:	add	r3, r2, r3
   2d374:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2d378:	str	r2, [r3, #-92]	; 0xffffffa4
   2d37c:	ldr	r3, [fp, #-104]	; 0xffffff98
   2d380:	add	r3, r3, #1
   2d384:	str	r3, [fp, #-104]	; 0xffffff98
   2d388:	ldr	r3, [fp, #-112]	; 0xffffff90
   2d38c:	ldr	r3, [r3, #136]	; 0x88
   2d390:	mov	r2, r3
   2d394:	ldr	r3, [fp, #-108]	; 0xffffff94
   2d398:	sub	r3, r2, r3
   2d39c:	str	r3, [fp, #-28]	; 0xffffffe4
   2d3a0:	mov	r3, #0
   2d3a4:	str	r3, [fp, #-16]
   2d3a8:	b	2d4d4 <flatcc_builder_vector_edit@@Base+0x314>
   2d3ac:	ldr	r3, [fp, #-16]
   2d3b0:	lsl	r3, r3, #2
   2d3b4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2d3b8:	add	r3, r2, r3
   2d3bc:	ldr	r3, [r3]
   2d3c0:	cmp	r3, #0
   2d3c4:	beq	2d464 <flatcc_builder_vector_edit@@Base+0x2a4>
   2d3c8:	ldr	r3, [fp, #-16]
   2d3cc:	lsl	r3, r3, #2
   2d3d0:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2d3d4:	add	r3, r2, r3
   2d3d8:	ldr	r3, [r3]
   2d3dc:	mov	r2, r3
   2d3e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2d3e4:	sub	r2, r2, r3
   2d3e8:	ldr	r3, [fp, #-16]
   2d3ec:	lsl	r3, r3, #2
   2d3f0:	sub	r3, r2, r3
   2d3f4:	sub	r3, r3, #4
   2d3f8:	str	r3, [fp, #-32]	; 0xffffffe0
   2d3fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2d400:	bl	28bec <main@@Base+0x53c>
   2d404:	mov	r1, r0
   2d408:	ldr	r3, [fp, #-16]
   2d40c:	lsl	r3, r3, #2
   2d410:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2d414:	add	r3, r2, r3
   2d418:	mov	r2, r1
   2d41c:	str	r2, [r3]
   2d420:	ldr	r3, [fp, #-124]	; 0xffffff84
   2d424:	cmp	r3, #0
   2d428:	beq	2d4c8 <flatcc_builder_vector_edit@@Base+0x308>
   2d42c:	ldr	r2, [fp, #-124]	; 0xffffff84
   2d430:	ldr	r3, [fp, #-16]
   2d434:	add	r3, r2, r3
   2d438:	ldrb	r3, [r3]
   2d43c:	cmp	r3, #0
   2d440:	bne	2d4c8 <flatcc_builder_vector_edit@@Base+0x308>
   2d444:	ldr	r3, [pc, #204]	; 2d518 <flatcc_builder_vector_edit@@Base+0x358>
   2d448:	add	r3, pc, r3
   2d44c:	movw	r2, #1457	; 0x5b1
   2d450:	ldr	r1, [pc, #196]	; 2d51c <flatcc_builder_vector_edit@@Base+0x35c>
   2d454:	add	r1, pc, r1
   2d458:	ldr	r0, [pc, #192]	; 2d520 <flatcc_builder_vector_edit@@Base+0x360>
   2d45c:	add	r0, pc, r0
   2d460:	bl	129e0 <__assert_fail@plt>
   2d464:	ldr	r3, [fp, #-124]	; 0xffffff84
   2d468:	cmp	r3, #0
   2d46c:	beq	2d4a8 <flatcc_builder_vector_edit@@Base+0x2e8>
   2d470:	ldr	r2, [fp, #-124]	; 0xffffff84
   2d474:	ldr	r3, [fp, #-16]
   2d478:	add	r3, r2, r3
   2d47c:	ldrb	r3, [r3]
   2d480:	cmp	r3, #0
   2d484:	beq	2d4c8 <flatcc_builder_vector_edit@@Base+0x308>
   2d488:	ldr	r3, [pc, #148]	; 2d524 <flatcc_builder_vector_edit@@Base+0x364>
   2d48c:	add	r3, pc, r3
   2d490:	movw	r2, #1461	; 0x5b5
   2d494:	ldr	r1, [pc, #140]	; 2d528 <flatcc_builder_vector_edit@@Base+0x368>
   2d498:	add	r1, pc, r1
   2d49c:	ldr	r0, [pc, #136]	; 2d52c <flatcc_builder_vector_edit@@Base+0x36c>
   2d4a0:	add	r0, pc, r0
   2d4a4:	bl	129e0 <__assert_fail@plt>
   2d4a8:	ldr	r3, [pc, #128]	; 2d530 <flatcc_builder_vector_edit@@Base+0x370>
   2d4ac:	add	r3, pc, r3
   2d4b0:	movw	r2, #1463	; 0x5b7
   2d4b4:	ldr	r1, [pc, #120]	; 2d534 <flatcc_builder_vector_edit@@Base+0x374>
   2d4b8:	add	r1, pc, r1
   2d4bc:	ldr	r0, [pc, #116]	; 2d538 <flatcc_builder_vector_edit@@Base+0x378>
   2d4c0:	add	r0, pc, r0
   2d4c4:	bl	129e0 <__assert_fail@plt>
   2d4c8:	ldr	r3, [fp, #-16]
   2d4cc:	add	r3, r3, #1
   2d4d0:	str	r3, [fp, #-16]
   2d4d4:	ldr	r2, [fp, #-16]
   2d4d8:	ldr	r3, [fp, #-120]	; 0xffffff88
   2d4dc:	cmp	r2, r3
   2d4e0:	bcc	2d3ac <flatcc_builder_vector_edit@@Base+0x1ec>
   2d4e4:	sub	r3, fp, #108	; 0x6c
   2d4e8:	mov	r1, r3
   2d4ec:	ldr	r0, [fp, #-112]	; 0xffffff90
   2d4f0:	bl	2a3f8 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   2d4f4:	mov	r3, r0
   2d4f8:	mov	r0, r3
   2d4fc:	sub	sp, fp, #8
   2d500:	ldr	r4, [sp]
   2d504:	ldr	fp, [sp, #4]
   2d508:	add	sp, sp, #8
   2d50c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d510:	andeq	sl, r1, r8, ror #27
   2d514:	andeq	r0, r0, r4, rrx
   2d518:			; <UNDEFINED> instruction: 0x000098b8
   2d51c:	andeq	r9, r0, ip, lsr #2
   2d520:	andeq	r9, r0, r4, lsr #8
   2d524:	andeq	r9, r0, r4, ror r8
   2d528:	andeq	r9, r0, r8, ror #1
   2d52c:	strdeq	r9, [r0], -r0
   2d530:	andeq	r9, r0, r4, asr r8
   2d534:	andeq	r9, r0, r8, asr #1
   2d538:	andeq	r9, r0, r0, lsr #2

0002d53c <flatcc_builder_create_offset_vector_direct@@Base>:
   2d53c:	str	fp, [sp, #-8]!
   2d540:	str	lr, [sp, #4]
   2d544:	add	fp, sp, #4
   2d548:	sub	sp, sp, #16
   2d54c:	str	r0, [fp, #-8]
   2d550:	str	r1, [fp, #-12]
   2d554:	str	r2, [fp, #-16]
   2d558:	mov	r3, #0
   2d55c:	ldr	r2, [fp, #-16]
   2d560:	ldr	r1, [fp, #-12]
   2d564:	ldr	r0, [fp, #-8]
   2d568:	bl	2d1e8 <flatcc_builder_vector_edit@@Base+0x28>
   2d56c:	mov	r3, r0
   2d570:	mov	r0, r3
   2d574:	sub	sp, fp, #4
   2d578:	ldr	fp, [sp]
   2d57c:	add	sp, sp, #4
   2d580:	pop	{pc}		; (ldr pc, [sp], #4)

0002d584 <flatcc_builder_end_offset_vector@@Base>:
   2d584:	str	fp, [sp, #-8]!
   2d588:	str	lr, [sp, #4]
   2d58c:	add	fp, sp, #4
   2d590:	sub	sp, sp, #16
   2d594:	str	r0, [fp, #-16]
   2d598:	ldr	r3, [fp, #-16]
   2d59c:	ldr	r3, [r3, #32]
   2d5a0:	ldrh	r3, [r3, #14]
   2d5a4:	cmp	r3, #5
   2d5a8:	beq	2d5cc <flatcc_builder_end_offset_vector@@Base+0x48>
   2d5ac:	ldr	r3, [pc, #112]	; 2d624 <flatcc_builder_end_offset_vector@@Base+0xa0>
   2d5b0:	add	r3, pc, r3
   2d5b4:	movw	r2, #1480	; 0x5c8
   2d5b8:	ldr	r1, [pc, #104]	; 2d628 <flatcc_builder_end_offset_vector@@Base+0xa4>
   2d5bc:	add	r1, pc, r1
   2d5c0:	ldr	r0, [pc, #100]	; 2d62c <flatcc_builder_end_offset_vector@@Base+0xa8>
   2d5c4:	add	r0, pc, r0
   2d5c8:	bl	129e0 <__assert_fail@plt>
   2d5cc:	ldr	r3, [fp, #-16]
   2d5d0:	ldr	r1, [r3, #16]
   2d5d4:	ldr	r3, [fp, #-16]
   2d5d8:	ldr	r3, [r3, #32]
   2d5dc:	ldr	r3, [r3, #20]
   2d5e0:	mov	r2, r3
   2d5e4:	ldr	r0, [fp, #-16]
   2d5e8:	bl	2d53c <flatcc_builder_create_offset_vector_direct@@Base>
   2d5ec:	str	r0, [fp, #-8]
   2d5f0:	ldr	r3, [fp, #-8]
   2d5f4:	cmp	r3, #0
   2d5f8:	bne	2d604 <flatcc_builder_end_offset_vector@@Base+0x80>
   2d5fc:	mov	r3, #0
   2d600:	b	2d610 <flatcc_builder_end_offset_vector@@Base+0x8c>
   2d604:	ldr	r0, [fp, #-16]
   2d608:	bl	2a29c <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   2d60c:	ldr	r3, [fp, #-8]
   2d610:	mov	r0, r3
   2d614:	sub	sp, fp, #4
   2d618:	ldr	fp, [sp]
   2d61c:	add	sp, sp, #4
   2d620:	pop	{pc}		; (ldr pc, [sp], #4)
   2d624:	andeq	r9, r0, r0, ror r7
   2d628:	andeq	r8, r0, r4, asr #31
   2d62c:	andeq	r9, r0, ip, ror #2

0002d630 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   2d630:	str	fp, [sp, #-8]!
   2d634:	str	lr, [sp, #4]
   2d638:	add	fp, sp, #4
   2d63c:	sub	sp, sp, #16
   2d640:	str	r0, [fp, #-16]
   2d644:	str	r1, [fp, #-20]	; 0xffffffec
   2d648:	ldr	r3, [fp, #-16]
   2d64c:	ldr	r3, [r3, #32]
   2d650:	ldrh	r3, [r3, #14]
   2d654:	cmp	r3, #5
   2d658:	beq	2d67c <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   2d65c:	ldr	r3, [pc, #112]	; 2d6d4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   2d660:	add	r3, pc, r3
   2d664:	movw	r2, #1493	; 0x5d5
   2d668:	ldr	r1, [pc, #104]	; 2d6d8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   2d66c:	add	r1, pc, r1
   2d670:	ldr	r0, [pc, #100]	; 2d6dc <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   2d674:	add	r0, pc, r0
   2d678:	bl	129e0 <__assert_fail@plt>
   2d67c:	ldr	r3, [fp, #-16]
   2d680:	ldr	r1, [r3, #16]
   2d684:	ldr	r3, [fp, #-16]
   2d688:	ldr	r3, [r3, #32]
   2d68c:	ldr	r2, [r3, #20]
   2d690:	ldr	r3, [fp, #-20]	; 0xffffffec
   2d694:	ldr	r0, [fp, #-16]
   2d698:	bl	2d1e8 <flatcc_builder_vector_edit@@Base+0x28>
   2d69c:	str	r0, [fp, #-8]
   2d6a0:	ldr	r3, [fp, #-8]
   2d6a4:	cmp	r3, #0
   2d6a8:	bne	2d6b4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x84>
   2d6ac:	mov	r3, #0
   2d6b0:	b	2d6c0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x90>
   2d6b4:	ldr	r0, [fp, #-16]
   2d6b8:	bl	2a29c <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   2d6bc:	ldr	r3, [fp, #-8]
   2d6c0:	mov	r0, r3
   2d6c4:	sub	sp, fp, #4
   2d6c8:	ldr	fp, [sp]
   2d6cc:	add	sp, sp, #4
   2d6d0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d6d4:	andeq	r9, r0, r4, ror #13
   2d6d8:	andeq	r8, r0, r4, lsl pc
   2d6dc:	strheq	r9, [r0], -ip

0002d6e0 <flatcc_builder_offset_vector_edit@@Base>:
   2d6e0:	push	{fp}		; (str fp, [sp, #-4]!)
   2d6e4:	add	fp, sp, #0
   2d6e8:	sub	sp, sp, #12
   2d6ec:	str	r0, [fp, #-8]
   2d6f0:	ldr	r3, [fp, #-8]
   2d6f4:	ldr	r3, [r3, #16]
   2d6f8:	mov	r0, r3
   2d6fc:	add	sp, fp, #0
   2d700:	pop	{fp}		; (ldr fp, [sp], #4)
   2d704:	bx	lr

0002d708 <flatcc_builder_offset_vector_count@@Base>:
   2d708:	push	{fp}		; (str fp, [sp, #-4]!)
   2d70c:	add	fp, sp, #0
   2d710:	sub	sp, sp, #12
   2d714:	str	r0, [fp, #-8]
   2d718:	ldr	r3, [fp, #-8]
   2d71c:	ldr	r3, [r3, #32]
   2d720:	ldr	r3, [r3, #20]
   2d724:	mov	r0, r3
   2d728:	add	sp, fp, #0
   2d72c:	pop	{fp}		; (ldr fp, [sp], #4)
   2d730:	bx	lr

0002d734 <flatcc_builder_table_add_union@@Base>:
   2d734:	str	fp, [sp, #-8]!
   2d738:	str	lr, [sp, #4]
   2d73c:	add	fp, sp, #4
   2d740:	sub	sp, sp, #24
   2d744:	str	r0, [fp, #-16]
   2d748:	str	r1, [fp, #-20]	; 0xffffffec
   2d74c:	sub	r1, fp, #28
   2d750:	stm	r1, {r2, r3}
   2d754:	ldr	r3, [fp, #-16]
   2d758:	ldr	r3, [r3, #32]
   2d75c:	ldrh	r3, [r3, #14]
   2d760:	cmp	r3, #3
   2d764:	beq	2d788 <flatcc_builder_table_add_union@@Base+0x54>
   2d768:	ldr	r3, [pc, #360]	; 2d8d8 <flatcc_builder_table_add_union@@Base+0x1a4>
   2d76c:	add	r3, pc, r3
   2d770:	movw	r2, #1518	; 0x5ee
   2d774:	ldr	r1, [pc, #352]	; 2d8dc <flatcc_builder_table_add_union@@Base+0x1a8>
   2d778:	add	r1, pc, r1
   2d77c:	ldr	r0, [pc, #348]	; 2d8e0 <flatcc_builder_table_add_union@@Base+0x1ac>
   2d780:	add	r0, pc, r0
   2d784:	bl	129e0 <__assert_fail@plt>
   2d788:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   2d78c:	cmp	r3, #0
   2d790:	bne	2d7e0 <flatcc_builder_table_add_union@@Base+0xac>
   2d794:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d798:	cmp	r3, #0
   2d79c:	beq	2d7e0 <flatcc_builder_table_add_union@@Base+0xac>
   2d7a0:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   2d7a4:	cmp	r3, #0
   2d7a8:	bne	2d7d8 <flatcc_builder_table_add_union@@Base+0xa4>
   2d7ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d7b0:	cmp	r3, #0
   2d7b4:	beq	2d7d8 <flatcc_builder_table_add_union@@Base+0xa4>
   2d7b8:	ldr	r3, [pc, #292]	; 2d8e4 <flatcc_builder_table_add_union@@Base+0x1b0>
   2d7bc:	add	r3, pc, r3
   2d7c0:	movw	r2, #1519	; 0x5ef
   2d7c4:	ldr	r1, [pc, #284]	; 2d8e8 <flatcc_builder_table_add_union@@Base+0x1b4>
   2d7c8:	add	r1, pc, r1
   2d7cc:	ldr	r0, [pc, #280]	; 2d8ec <flatcc_builder_table_add_union@@Base+0x1b8>
   2d7d0:	add	r0, pc, r0
   2d7d4:	bl	129e0 <__assert_fail@plt>
   2d7d8:	mvn	r3, #0
   2d7dc:	b	2d8c4 <flatcc_builder_table_add_union@@Base+0x190>
   2d7e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d7e4:	cmp	r3, #0
   2d7e8:	beq	2d848 <flatcc_builder_table_add_union@@Base+0x114>
   2d7ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   2d7f0:	ldr	r0, [fp, #-16]
   2d7f4:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   2d7f8:	str	r0, [fp, #-8]
   2d7fc:	ldr	r3, [fp, #-8]
   2d800:	cmp	r3, #0
   2d804:	bne	2d83c <flatcc_builder_table_add_union@@Base+0x108>
   2d808:	ldr	r3, [fp, #-8]
   2d80c:	cmp	r3, #0
   2d810:	bne	2d834 <flatcc_builder_table_add_union@@Base+0x100>
   2d814:	ldr	r3, [pc, #212]	; 2d8f0 <flatcc_builder_table_add_union@@Base+0x1bc>
   2d818:	add	r3, pc, r3
   2d81c:	movw	r2, #1522	; 0x5f2
   2d820:	ldr	r1, [pc, #204]	; 2d8f4 <flatcc_builder_table_add_union@@Base+0x1c0>
   2d824:	add	r1, pc, r1
   2d828:	ldr	r0, [pc, #200]	; 2d8f8 <flatcc_builder_table_add_union@@Base+0x1c4>
   2d82c:	add	r0, pc, r0
   2d830:	bl	129e0 <__assert_fail@plt>
   2d834:	mvn	r3, #0
   2d838:	b	2d8c4 <flatcc_builder_table_add_union@@Base+0x190>
   2d83c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2d840:	ldr	r3, [fp, #-8]
   2d844:	str	r2, [r3]
   2d848:	ldr	r3, [fp, #-20]	; 0xffffffec
   2d84c:	sub	r1, r3, #1
   2d850:	mov	r3, #1
   2d854:	mov	r2, #1
   2d858:	ldr	r0, [fp, #-16]
   2d85c:	bl	2e698 <flatcc_builder_table_add@@Base>
   2d860:	str	r0, [fp, #-12]
   2d864:	ldr	r3, [fp, #-12]
   2d868:	cmp	r3, #0
   2d86c:	bne	2d8a4 <flatcc_builder_table_add_union@@Base+0x170>
   2d870:	ldr	r3, [fp, #-12]
   2d874:	cmp	r3, #0
   2d878:	bne	2d89c <flatcc_builder_table_add_union@@Base+0x168>
   2d87c:	ldr	r3, [pc, #120]	; 2d8fc <flatcc_builder_table_add_union@@Base+0x1c8>
   2d880:	add	r3, pc, r3
   2d884:	movw	r2, #1526	; 0x5f6
   2d888:	ldr	r1, [pc, #112]	; 2d900 <flatcc_builder_table_add_union@@Base+0x1cc>
   2d88c:	add	r1, pc, r1
   2d890:	ldr	r0, [pc, #108]	; 2d904 <flatcc_builder_table_add_union@@Base+0x1d0>
   2d894:	add	r0, pc, r0
   2d898:	bl	129e0 <__assert_fail@plt>
   2d89c:	mvn	r3, #0
   2d8a0:	b	2d8c4 <flatcc_builder_table_add_union@@Base+0x190>
   2d8a4:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   2d8a8:	mov	r0, r3
   2d8ac:	bl	28c10 <main@@Base+0x560>
   2d8b0:	mov	r3, r0
   2d8b4:	mov	r2, r3
   2d8b8:	ldr	r3, [fp, #-12]
   2d8bc:	strb	r2, [r3]
   2d8c0:	mov	r3, #0
   2d8c4:	mov	r0, r3
   2d8c8:	sub	sp, fp, #4
   2d8cc:	ldr	fp, [sp]
   2d8d0:	add	sp, sp, #4
   2d8d4:	pop	{pc}		; (ldr pc, [sp], #4)
   2d8d8:	andeq	r9, r0, r4, lsl #12
   2d8dc:	andeq	r8, r0, r8, lsl #28
   2d8e0:	andeq	r9, r0, r0, asr #1
   2d8e4:			; <UNDEFINED> instruction: 0x000095b4
   2d8e8:			; <UNDEFINED> instruction: 0x00008db8
   2d8ec:	ldrdeq	r9, [r0], -r0
   2d8f0:	andeq	r9, r0, r8, asr r5
   2d8f4:	andeq	r8, r0, ip, asr sp
   2d8f8:	muleq	r0, r8, r0
   2d8fc:	strdeq	r9, [r0], -r0
   2d900:	strdeq	r8, [r0], -r4
   2d904:	andeq	r9, r0, ip, lsr r0

0002d908 <flatcc_builder_table_add_union_vector@@Base>:
   2d908:	str	fp, [sp, #-8]!
   2d90c:	str	lr, [sp, #4]
   2d910:	add	fp, sp, #4
   2d914:	sub	sp, sp, #24
   2d918:	str	r0, [fp, #-16]
   2d91c:	str	r1, [fp, #-20]	; 0xffffffec
   2d920:	sub	r1, fp, #28
   2d924:	stm	r1, {r2, r3}
   2d928:	ldr	r3, [fp, #-16]
   2d92c:	ldr	r3, [r3, #32]
   2d930:	ldrh	r3, [r3, #14]
   2d934:	cmp	r3, #3
   2d938:	beq	2d95c <flatcc_builder_table_add_union_vector@@Base+0x54>
   2d93c:	ldr	r3, [pc, #404]	; 2dad8 <flatcc_builder_table_add_union_vector@@Base+0x1d0>
   2d940:	add	r3, pc, r3
   2d944:	mov	r2, #1536	; 0x600
   2d948:	ldr	r1, [pc, #396]	; 2dadc <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   2d94c:	add	r1, pc, r1
   2d950:	ldr	r0, [pc, #392]	; 2dae0 <flatcc_builder_table_add_union_vector@@Base+0x1d8>
   2d954:	add	r0, pc, r0
   2d958:	bl	129e0 <__assert_fail@plt>
   2d95c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2d960:	cmp	r3, #0
   2d964:	moveq	r3, #1
   2d968:	movne	r3, #0
   2d96c:	uxtb	r2, r3
   2d970:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d974:	cmp	r3, #0
   2d978:	moveq	r3, #1
   2d97c:	movne	r3, #0
   2d980:	uxtb	r3, r3
   2d984:	eor	r3, r3, r2
   2d988:	uxtb	r3, r3
   2d98c:	cmp	r3, #0
   2d990:	beq	2d9f4 <flatcc_builder_table_add_union_vector@@Base+0xec>
   2d994:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2d998:	cmp	r3, #0
   2d99c:	movne	r3, #1
   2d9a0:	moveq	r3, #0
   2d9a4:	uxtb	r2, r3
   2d9a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d9ac:	cmp	r3, #0
   2d9b0:	moveq	r3, #1
   2d9b4:	movne	r3, #0
   2d9b8:	uxtb	r3, r3
   2d9bc:	eor	r3, r3, r2
   2d9c0:	uxtb	r3, r3
   2d9c4:	cmp	r3, #0
   2d9c8:	bne	2d9ec <flatcc_builder_table_add_union_vector@@Base+0xe4>
   2d9cc:	ldr	r3, [pc, #272]	; 2dae4 <flatcc_builder_table_add_union_vector@@Base+0x1dc>
   2d9d0:	add	r3, pc, r3
   2d9d4:	movw	r2, #1537	; 0x601
   2d9d8:	ldr	r1, [pc, #264]	; 2dae8 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   2d9dc:	add	r1, pc, r1
   2d9e0:	ldr	r0, [pc, #260]	; 2daec <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   2d9e4:	add	r0, pc, r0
   2d9e8:	bl	129e0 <__assert_fail@plt>
   2d9ec:	mvn	r3, #0
   2d9f0:	b	2dac4 <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   2d9f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2d9f8:	cmp	r3, #0
   2d9fc:	beq	2dac0 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   2da00:	ldr	r3, [fp, #-20]	; 0xffffffec
   2da04:	sub	r3, r3, #1
   2da08:	mov	r1, r3
   2da0c:	ldr	r0, [fp, #-16]
   2da10:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   2da14:	str	r0, [fp, #-8]
   2da18:	ldr	r3, [fp, #-8]
   2da1c:	cmp	r3, #0
   2da20:	bne	2da58 <flatcc_builder_table_add_union_vector@@Base+0x150>
   2da24:	ldr	r3, [fp, #-8]
   2da28:	cmp	r3, #0
   2da2c:	bne	2da50 <flatcc_builder_table_add_union_vector@@Base+0x148>
   2da30:	ldr	r3, [pc, #184]	; 2daf0 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   2da34:	add	r3, pc, r3
   2da38:	movw	r2, #1540	; 0x604
   2da3c:	ldr	r1, [pc, #176]	; 2daf4 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   2da40:	add	r1, pc, r1
   2da44:	ldr	r0, [pc, #172]	; 2daf8 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   2da48:	add	r0, pc, r0
   2da4c:	bl	129e0 <__assert_fail@plt>
   2da50:	mvn	r3, #0
   2da54:	b	2dac4 <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   2da58:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2da5c:	ldr	r3, [fp, #-8]
   2da60:	str	r2, [r3]
   2da64:	ldr	r1, [fp, #-20]	; 0xffffffec
   2da68:	ldr	r0, [fp, #-16]
   2da6c:	bl	2e908 <flatcc_builder_table_add_offset@@Base>
   2da70:	str	r0, [fp, #-8]
   2da74:	ldr	r3, [fp, #-8]
   2da78:	cmp	r3, #0
   2da7c:	bne	2dab4 <flatcc_builder_table_add_union_vector@@Base+0x1ac>
   2da80:	ldr	r3, [fp, #-8]
   2da84:	cmp	r3, #0
   2da88:	bne	2daac <flatcc_builder_table_add_union_vector@@Base+0x1a4>
   2da8c:	ldr	r3, [pc, #104]	; 2dafc <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   2da90:	add	r3, pc, r3
   2da94:	movw	r2, #1544	; 0x608
   2da98:	ldr	r1, [pc, #96]	; 2db00 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   2da9c:	add	r1, pc, r1
   2daa0:	ldr	r0, [pc, #92]	; 2db04 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   2daa4:	add	r0, pc, r0
   2daa8:	bl	129e0 <__assert_fail@plt>
   2daac:	mvn	r3, #0
   2dab0:	b	2dac4 <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   2dab4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2dab8:	ldr	r3, [fp, #-8]
   2dabc:	str	r2, [r3]
   2dac0:	mov	r3, #0
   2dac4:	mov	r0, r3
   2dac8:	sub	sp, fp, #4
   2dacc:	ldr	fp, [sp]
   2dad0:	add	sp, sp, #4
   2dad4:	pop	{pc}		; (ldr pc, [sp], #4)
   2dad8:	andeq	r9, r0, r0, asr r4
   2dadc:	andeq	r8, r0, r4, lsr ip
   2dae0:	andeq	r8, r0, ip, ror #29
   2dae4:	andeq	r9, r0, r0, asr #7
   2dae8:	andeq	r8, r0, r4, lsr #23
   2daec:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   2daf0:	andeq	r9, r0, ip, asr r3
   2daf4:	andeq	r8, r0, r0, asr #22
   2daf8:	andeq	r8, r0, ip, ror lr
   2dafc:	andeq	r9, r0, r0, lsl #6
   2db00:	andeq	r8, r0, r4, ror #21
   2db04:	andeq	r8, r0, r0, lsr #28

0002db08 <flatcc_builder_create_union_vector@@Base>:
   2db08:	str	fp, [sp, #-8]!
   2db0c:	str	lr, [sp, #4]
   2db10:	add	fp, sp, #4
   2db14:	sub	sp, sp, #48	; 0x30
   2db18:	str	r0, [fp, #-32]	; 0xffffffe0
   2db1c:	str	r1, [fp, #-36]	; 0xffffffdc
   2db20:	str	r2, [fp, #-40]	; 0xffffffd8
   2db24:	str	r3, [fp, #-44]	; 0xffffffd4
   2db28:	mov	r3, #0
   2db2c:	str	r3, [fp, #-24]	; 0xffffffe8
   2db30:	mov	r3, #0
   2db34:	str	r3, [fp, #-20]	; 0xffffffec
   2db38:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2db3c:	bl	2be7c <flatcc_builder_start_offset_vector@@Base>
   2db40:	mov	r3, r0
   2db44:	cmp	r3, #0
   2db48:	beq	2db64 <flatcc_builder_create_union_vector@@Base+0x5c>
   2db4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2db50:	mov	r1, r3
   2db54:	sub	r3, fp, #24
   2db58:	ldrd	r2, [r3]
   2db5c:	strd	r2, [r1]
   2db60:	b	2dc80 <flatcc_builder_create_union_vector@@Base+0x178>
   2db64:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2db68:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2db6c:	bl	2b6c0 <flatcc_builder_extend_offset_vector@@Base>
   2db70:	mov	r3, r0
   2db74:	cmp	r3, #0
   2db78:	bne	2db94 <flatcc_builder_create_union_vector@@Base+0x8c>
   2db7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2db80:	mov	r1, r3
   2db84:	sub	r3, fp, #24
   2db88:	ldrd	r2, [r3]
   2db8c:	strd	r2, [r1]
   2db90:	b	2dc80 <flatcc_builder_create_union_vector@@Base+0x178>
   2db94:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2db98:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2db9c:	bl	2904c <flatcc_builder_default_alloc@@Base+0x310>
   2dba0:	str	r0, [fp, #-12]
   2dba4:	ldr	r3, [fp, #-12]
   2dba8:	cmp	r3, #0
   2dbac:	bne	2dbc8 <flatcc_builder_create_union_vector@@Base+0xc0>
   2dbb0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2dbb4:	mov	r1, r3
   2dbb8:	sub	r3, fp, #24
   2dbbc:	ldrd	r2, [r3]
   2dbc0:	strd	r2, [r1]
   2dbc4:	b	2dc80 <flatcc_builder_create_union_vector@@Base+0x178>
   2dbc8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2dbcc:	bl	2d6e0 <flatcc_builder_offset_vector_edit@@Base>
   2dbd0:	str	r0, [fp, #-16]
   2dbd4:	mov	r3, #0
   2dbd8:	str	r3, [fp, #-8]
   2dbdc:	b	2dc38 <flatcc_builder_create_union_vector@@Base+0x130>
   2dbe0:	ldr	r3, [fp, #-8]
   2dbe4:	lsl	r3, r3, #3
   2dbe8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2dbec:	add	r2, r2, r3
   2dbf0:	ldr	r1, [fp, #-12]
   2dbf4:	ldr	r3, [fp, #-8]
   2dbf8:	add	r3, r1, r3
   2dbfc:	ldrb	r2, [r2]
   2dc00:	strb	r2, [r3]
   2dc04:	ldr	r3, [fp, #-8]
   2dc08:	lsl	r3, r3, #3
   2dc0c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2dc10:	add	r2, r2, r3
   2dc14:	ldr	r3, [fp, #-8]
   2dc18:	lsl	r3, r3, #2
   2dc1c:	ldr	r1, [fp, #-16]
   2dc20:	add	r3, r1, r3
   2dc24:	ldr	r2, [r2, #4]
   2dc28:	str	r2, [r3]
   2dc2c:	ldr	r3, [fp, #-8]
   2dc30:	add	r3, r3, #1
   2dc34:	str	r3, [fp, #-8]
   2dc38:	ldr	r2, [fp, #-8]
   2dc3c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2dc40:	cmp	r2, r3
   2dc44:	bcc	2dbe0 <flatcc_builder_create_union_vector@@Base+0xd8>
   2dc48:	sub	r0, fp, #24
   2dc4c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2dc50:	str	r3, [sp]
   2dc54:	ldr	r3, [fp, #-16]
   2dc58:	ldr	r2, [fp, #-12]
   2dc5c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2dc60:	bl	2dc94 <flatcc_builder_create_union_vector_direct@@Base>
   2dc64:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2dc68:	bl	2a29c <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   2dc6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2dc70:	mov	r1, r3
   2dc74:	sub	r3, fp, #24
   2dc78:	ldrd	r2, [r3]
   2dc7c:	strd	r2, [r1]
   2dc80:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2dc84:	sub	sp, fp, #4
   2dc88:	ldr	fp, [sp]
   2dc8c:	add	sp, sp, #4
   2dc90:	pop	{pc}		; (ldr pc, [sp], #4)

0002dc94 <flatcc_builder_create_union_vector_direct@@Base>:
   2dc94:	str	fp, [sp, #-8]!
   2dc98:	str	lr, [sp, #4]
   2dc9c:	add	fp, sp, #4
   2dca0:	sub	sp, sp, #32
   2dca4:	str	r0, [fp, #-16]
   2dca8:	str	r1, [fp, #-20]	; 0xffffffec
   2dcac:	str	r2, [fp, #-24]	; 0xffffffe8
   2dcb0:	str	r3, [fp, #-28]	; 0xffffffe4
   2dcb4:	mov	r3, #0
   2dcb8:	str	r3, [fp, #-12]
   2dcbc:	mov	r3, #0
   2dcc0:	str	r3, [fp, #-8]
   2dcc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2dcc8:	ldr	r2, [fp, #4]
   2dccc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2dcd0:	ldr	r0, [fp, #-20]	; 0xffffffec
   2dcd4:	bl	2d1e8 <flatcc_builder_vector_edit@@Base+0x28>
   2dcd8:	mov	r3, r0
   2dcdc:	str	r3, [fp, #-8]
   2dce0:	ldr	r3, [fp, #-8]
   2dce4:	cmp	r3, #0
   2dce8:	bne	2dd04 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   2dcec:	ldr	r3, [fp, #-16]
   2dcf0:	mov	r1, r3
   2dcf4:	sub	r3, fp, #12
   2dcf8:	ldrd	r2, [r3]
   2dcfc:	strd	r2, [r1]
   2dd00:	b	2dd68 <flatcc_builder_create_union_vector_direct@@Base+0xd4>
   2dd04:	mvn	r3, #0
   2dd08:	str	r3, [sp, #4]
   2dd0c:	mov	r3, #1
   2dd10:	str	r3, [sp]
   2dd14:	mov	r3, #1
   2dd18:	ldr	r2, [fp, #4]
   2dd1c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2dd20:	ldr	r0, [fp, #-20]	; 0xffffffec
   2dd24:	bl	2ce8c <flatcc_builder_create_vector@@Base>
   2dd28:	mov	r3, r0
   2dd2c:	str	r3, [fp, #-12]
   2dd30:	ldr	r3, [fp, #-12]
   2dd34:	cmp	r3, #0
   2dd38:	bne	2dd54 <flatcc_builder_create_union_vector_direct@@Base+0xc0>
   2dd3c:	ldr	r3, [fp, #-16]
   2dd40:	mov	r1, r3
   2dd44:	sub	r3, fp, #12
   2dd48:	ldrd	r2, [r3]
   2dd4c:	strd	r2, [r1]
   2dd50:	b	2dd68 <flatcc_builder_create_union_vector_direct@@Base+0xd4>
   2dd54:	ldr	r3, [fp, #-16]
   2dd58:	mov	r1, r3
   2dd5c:	sub	r3, fp, #12
   2dd60:	ldrd	r2, [r3]
   2dd64:	strd	r2, [r1]
   2dd68:	ldr	r0, [fp, #-16]
   2dd6c:	sub	sp, fp, #4
   2dd70:	ldr	fp, [sp]
   2dd74:	add	sp, sp, #4
   2dd78:	pop	{pc}		; (ldr pc, [sp], #4)

0002dd7c <flatcc_builder_start_union_vector@@Base>:
   2dd7c:	str	fp, [sp, #-8]!
   2dd80:	str	lr, [sp, #4]
   2dd84:	add	fp, sp, #4
   2dd88:	sub	sp, sp, #8
   2dd8c:	str	r0, [fp, #-8]
   2dd90:	mov	r1, #4
   2dd94:	ldr	r0, [fp, #-8]
   2dd98:	bl	2a0b0 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   2dd9c:	mov	r3, r0
   2dda0:	cmp	r3, #0
   2dda4:	beq	2ddb0 <flatcc_builder_start_union_vector@@Base+0x34>
   2dda8:	mvn	r3, #0
   2ddac:	b	2ddf0 <flatcc_builder_start_union_vector@@Base+0x74>
   2ddb0:	ldr	r3, [fp, #-8]
   2ddb4:	ldr	r3, [r3, #32]
   2ddb8:	mov	r2, #8
   2ddbc:	str	r2, [r3, #16]
   2ddc0:	ldr	r3, [fp, #-8]
   2ddc4:	ldr	r3, [r3, #32]
   2ddc8:	mov	r2, #0
   2ddcc:	str	r2, [r3, #20]
   2ddd0:	ldr	r3, [fp, #-8]
   2ddd4:	ldr	r3, [r3, #32]
   2ddd8:	mov	r2, #7
   2dddc:	strh	r2, [r3, #14]
   2dde0:	mvn	r1, #3
   2dde4:	ldr	r0, [fp, #-8]
   2dde8:	bl	28f10 <flatcc_builder_default_alloc@@Base+0x1d4>
   2ddec:	mov	r3, #0
   2ddf0:	mov	r0, r3
   2ddf4:	sub	sp, fp, #4
   2ddf8:	ldr	fp, [sp]
   2ddfc:	add	sp, sp, #4
   2de00:	pop	{pc}		; (ldr pc, [sp], #4)

0002de04 <flatcc_builder_end_union_vector@@Base>:
   2de04:	str	fp, [sp, #-8]!
   2de08:	str	lr, [sp, #4]
   2de0c:	add	fp, sp, #4
   2de10:	sub	sp, sp, #48	; 0x30
   2de14:	str	r0, [fp, #-40]	; 0xffffffd8
   2de18:	str	r1, [fp, #-44]	; 0xffffffd4
   2de1c:	mov	r3, #0
   2de20:	str	r3, [fp, #-32]	; 0xffffffe0
   2de24:	mov	r3, #0
   2de28:	str	r3, [fp, #-28]	; 0xffffffe4
   2de2c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2de30:	ldr	r3, [r3, #32]
   2de34:	ldrh	r3, [r3, #14]
   2de38:	cmp	r3, #7
   2de3c:	beq	2de60 <flatcc_builder_end_union_vector@@Base+0x5c>
   2de40:	ldr	r3, [pc, #328]	; 2df90 <flatcc_builder_end_union_vector@@Base+0x18c>
   2de44:	add	r3, pc, r3
   2de48:	movw	r2, #1617	; 0x651
   2de4c:	ldr	r1, [pc, #320]	; 2df94 <flatcc_builder_end_union_vector@@Base+0x190>
   2de50:	add	r1, pc, r1
   2de54:	ldr	r0, [pc, #316]	; 2df98 <flatcc_builder_end_union_vector@@Base+0x194>
   2de58:	add	r0, pc, r0
   2de5c:	bl	129e0 <__assert_fail@plt>
   2de60:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2de64:	bl	2dfc4 <flatcc_builder_union_vector_count@@Base>
   2de68:	str	r0, [fp, #-12]
   2de6c:	ldr	r2, [fp, #-12]
   2de70:	mov	r3, r2
   2de74:	lsl	r3, r3, #2
   2de78:	add	r3, r3, r2
   2de7c:	mov	r1, r3
   2de80:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2de84:	bl	2904c <flatcc_builder_default_alloc@@Base+0x310>
   2de88:	str	r0, [fp, #-16]
   2de8c:	ldr	r3, [fp, #-16]
   2de90:	cmp	r3, #0
   2de94:	bne	2deb0 <flatcc_builder_end_union_vector@@Base+0xac>
   2de98:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2de9c:	mov	r1, r3
   2dea0:	sub	r3, fp, #32
   2dea4:	ldrd	r2, [r3]
   2dea8:	strd	r2, [r1]
   2deac:	b	2df7c <flatcc_builder_end_union_vector@@Base+0x178>
   2deb0:	ldr	r3, [fp, #-12]
   2deb4:	lsl	r3, r3, #2
   2deb8:	ldr	r2, [fp, #-16]
   2debc:	add	r3, r2, r3
   2dec0:	str	r3, [fp, #-20]	; 0xffffffec
   2dec4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2dec8:	bl	2df9c <flatcc_builder_union_vector_edit@@Base>
   2decc:	str	r0, [fp, #-24]	; 0xffffffe8
   2ded0:	mov	r3, #0
   2ded4:	str	r3, [fp, #-8]
   2ded8:	b	2df34 <flatcc_builder_end_union_vector@@Base+0x130>
   2dedc:	ldr	r3, [fp, #-8]
   2dee0:	lsl	r3, r3, #3
   2dee4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2dee8:	add	r2, r2, r3
   2deec:	ldr	r1, [fp, #-20]	; 0xffffffec
   2def0:	ldr	r3, [fp, #-8]
   2def4:	add	r3, r1, r3
   2def8:	ldrb	r2, [r2]
   2defc:	strb	r2, [r3]
   2df00:	ldr	r3, [fp, #-8]
   2df04:	lsl	r3, r3, #3
   2df08:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2df0c:	add	r2, r2, r3
   2df10:	ldr	r3, [fp, #-8]
   2df14:	lsl	r3, r3, #2
   2df18:	ldr	r1, [fp, #-16]
   2df1c:	add	r3, r1, r3
   2df20:	ldr	r2, [r2, #4]
   2df24:	str	r2, [r3]
   2df28:	ldr	r3, [fp, #-8]
   2df2c:	add	r3, r3, #1
   2df30:	str	r3, [fp, #-8]
   2df34:	ldr	r2, [fp, #-8]
   2df38:	ldr	r3, [fp, #-12]
   2df3c:	cmp	r2, r3
   2df40:	bcc	2dedc <flatcc_builder_end_union_vector@@Base+0xd8>
   2df44:	sub	r0, fp, #32
   2df48:	ldr	r3, [fp, #-12]
   2df4c:	str	r3, [sp]
   2df50:	ldr	r3, [fp, #-16]
   2df54:	ldr	r2, [fp, #-20]	; 0xffffffec
   2df58:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2df5c:	bl	2dc94 <flatcc_builder_create_union_vector_direct@@Base>
   2df60:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2df64:	bl	2a29c <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   2df68:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2df6c:	mov	r1, r3
   2df70:	sub	r3, fp, #32
   2df74:	ldrd	r2, [r3]
   2df78:	strd	r2, [r1]
   2df7c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2df80:	sub	sp, fp, #4
   2df84:	ldr	fp, [sp]
   2df88:	add	sp, sp, #4
   2df8c:	pop	{pc}		; (ldr pc, [sp], #4)
   2df90:	andeq	r8, r0, r4, ror pc
   2df94:	andeq	r8, r0, r0, lsr r7
   2df98:	andeq	r8, r0, ip, lsr #21

0002df9c <flatcc_builder_union_vector_edit@@Base>:
   2df9c:	push	{fp}		; (str fp, [sp, #-4]!)
   2dfa0:	add	fp, sp, #0
   2dfa4:	sub	sp, sp, #12
   2dfa8:	str	r0, [fp, #-8]
   2dfac:	ldr	r3, [fp, #-8]
   2dfb0:	ldr	r3, [r3, #16]
   2dfb4:	mov	r0, r3
   2dfb8:	add	sp, fp, #0
   2dfbc:	pop	{fp}		; (ldr fp, [sp], #4)
   2dfc0:	bx	lr

0002dfc4 <flatcc_builder_union_vector_count@@Base>:
   2dfc4:	push	{fp}		; (str fp, [sp, #-4]!)
   2dfc8:	add	fp, sp, #0
   2dfcc:	sub	sp, sp, #12
   2dfd0:	str	r0, [fp, #-8]
   2dfd4:	ldr	r3, [fp, #-8]
   2dfd8:	ldr	r3, [r3, #32]
   2dfdc:	ldr	r3, [r3, #20]
   2dfe0:	mov	r0, r3
   2dfe4:	add	sp, fp, #0
   2dfe8:	pop	{fp}		; (ldr fp, [sp], #4)
   2dfec:	bx	lr

0002dff0 <flatcc_builder_extend_union_vector@@Base>:
   2dff0:	str	fp, [sp, #-8]!
   2dff4:	str	lr, [sp, #4]
   2dff8:	add	fp, sp, #4
   2dffc:	sub	sp, sp, #8
   2e000:	str	r0, [fp, #-8]
   2e004:	str	r1, [fp, #-12]
   2e008:	mvn	r2, #-536870912	; 0xe0000000
   2e00c:	ldr	r1, [fp, #-12]
   2e010:	ldr	r0, [fp, #-8]
   2e014:	bl	2b384 <flatcc_builder_end_struct@@Base+0xac>
   2e018:	mov	r3, r0
   2e01c:	cmp	r3, #0
   2e020:	beq	2e02c <flatcc_builder_extend_union_vector@@Base+0x3c>
   2e024:	mov	r3, #0
   2e028:	b	2e044 <flatcc_builder_extend_union_vector@@Base+0x54>
   2e02c:	ldr	r3, [fp, #-12]
   2e030:	lsl	r3, r3, #3
   2e034:	mov	r1, r3
   2e038:	ldr	r0, [fp, #-8]
   2e03c:	bl	2904c <flatcc_builder_default_alloc@@Base+0x310>
   2e040:	mov	r3, r0
   2e044:	mov	r0, r3
   2e048:	sub	sp, fp, #4
   2e04c:	ldr	fp, [sp]
   2e050:	add	sp, sp, #4
   2e054:	pop	{pc}		; (ldr pc, [sp], #4)

0002e058 <flatcc_builder_truncate_union_vector@@Base>:
   2e058:	str	fp, [sp, #-8]!
   2e05c:	str	lr, [sp, #4]
   2e060:	add	fp, sp, #4
   2e064:	sub	sp, sp, #8
   2e068:	str	r0, [fp, #-8]
   2e06c:	str	r1, [fp, #-12]
   2e070:	ldr	r3, [fp, #-8]
   2e074:	ldr	r3, [r3, #32]
   2e078:	ldrh	r3, [r3, #14]
   2e07c:	cmp	r3, #7
   2e080:	beq	2e0a4 <flatcc_builder_truncate_union_vector@@Base+0x4c>
   2e084:	ldr	r3, [pc, #200]	; 2e154 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   2e088:	add	r3, pc, r3
   2e08c:	movw	r2, #1665	; 0x681
   2e090:	ldr	r1, [pc, #192]	; 2e158 <flatcc_builder_truncate_union_vector@@Base+0x100>
   2e094:	add	r1, pc, r1
   2e098:	ldr	r0, [pc, #188]	; 2e15c <flatcc_builder_truncate_union_vector@@Base+0x104>
   2e09c:	add	r0, pc, r0
   2e0a0:	bl	129e0 <__assert_fail@plt>
   2e0a4:	ldr	r3, [fp, #-8]
   2e0a8:	ldr	r3, [r3, #32]
   2e0ac:	ldr	r3, [r3, #20]
   2e0b0:	ldr	r2, [fp, #-12]
   2e0b4:	cmp	r2, r3
   2e0b8:	bls	2e0fc <flatcc_builder_truncate_union_vector@@Base+0xa4>
   2e0bc:	ldr	r3, [fp, #-8]
   2e0c0:	ldr	r3, [r3, #32]
   2e0c4:	ldr	r3, [r3, #20]
   2e0c8:	ldr	r2, [fp, #-12]
   2e0cc:	cmp	r2, r3
   2e0d0:	bls	2e0f4 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   2e0d4:	ldr	r3, [pc, #132]	; 2e160 <flatcc_builder_truncate_union_vector@@Base+0x108>
   2e0d8:	add	r3, pc, r3
   2e0dc:	movw	r2, #1666	; 0x682
   2e0e0:	ldr	r1, [pc, #124]	; 2e164 <flatcc_builder_truncate_union_vector@@Base+0x10c>
   2e0e4:	add	r1, pc, r1
   2e0e8:	ldr	r0, [pc, #120]	; 2e168 <flatcc_builder_truncate_union_vector@@Base+0x110>
   2e0ec:	add	r0, pc, r0
   2e0f0:	bl	129e0 <__assert_fail@plt>
   2e0f4:	mvn	r3, #0
   2e0f8:	b	2e140 <flatcc_builder_truncate_union_vector@@Base+0xe8>
   2e0fc:	ldr	r3, [fp, #-8]
   2e100:	ldr	r3, [r3, #32]
   2e104:	ldr	r1, [r3, #20]
   2e108:	ldr	r3, [fp, #-8]
   2e10c:	ldr	r3, [r3, #32]
   2e110:	ldr	r2, [fp, #-12]
   2e114:	sub	r2, r1, r2
   2e118:	str	r2, [r3, #20]
   2e11c:	ldr	r3, [fp, #-8]
   2e120:	ldr	r3, [r3, #32]
   2e124:	ldr	r3, [r3, #16]
   2e128:	ldr	r2, [fp, #-12]
   2e12c:	mul	r3, r2, r3
   2e130:	mov	r1, r3
   2e134:	ldr	r0, [fp, #-8]
   2e138:	bl	290f4 <flatcc_builder_default_alloc@@Base+0x3b8>
   2e13c:	mov	r3, #0
   2e140:	mov	r0, r3
   2e144:	sub	sp, fp, #4
   2e148:	ldr	fp, [sp]
   2e14c:	add	sp, sp, #4
   2e150:	pop	{pc}		; (ldr pc, [sp], #4)
   2e154:	andeq	r8, r0, r0, asr sp
   2e158:	andeq	r8, r0, ip, ror #9
   2e15c:	andeq	r8, r0, r8, ror #16
   2e160:	andeq	r8, r0, r0, lsl #26
   2e164:	muleq	r0, ip, r4
   2e168:	andeq	r8, r0, r8, asr #13

0002e16c <flatcc_builder_union_vector_push@@Base>:
   2e16c:	str	fp, [sp, #-8]!
   2e170:	str	lr, [sp, #4]
   2e174:	add	fp, sp, #4
   2e178:	sub	sp, sp, #24
   2e17c:	str	r0, [fp, #-16]
   2e180:	sub	r3, fp, #24
   2e184:	stm	r3, {r1, r2}
   2e188:	ldr	r3, [fp, #-16]
   2e18c:	ldr	r3, [r3, #32]
   2e190:	ldrh	r3, [r3, #14]
   2e194:	cmp	r3, #7
   2e198:	beq	2e1bc <flatcc_builder_union_vector_push@@Base+0x50>
   2e19c:	ldr	r3, [pc, #160]	; 2e244 <flatcc_builder_union_vector_push@@Base+0xd8>
   2e1a0:	add	r3, pc, r3
   2e1a4:	movw	r2, #1677	; 0x68d
   2e1a8:	ldr	r1, [pc, #152]	; 2e248 <flatcc_builder_union_vector_push@@Base+0xdc>
   2e1ac:	add	r1, pc, r1
   2e1b0:	ldr	r0, [pc, #148]	; 2e24c <flatcc_builder_union_vector_push@@Base+0xe0>
   2e1b4:	add	r0, pc, r0
   2e1b8:	bl	129e0 <__assert_fail@plt>
   2e1bc:	ldr	r3, [fp, #-16]
   2e1c0:	ldr	r3, [r3, #32]
   2e1c4:	ldr	r3, [r3, #20]
   2e1c8:	cmn	r3, #-536870911	; 0xe0000001
   2e1cc:	bne	2e1d8 <flatcc_builder_union_vector_push@@Base+0x6c>
   2e1d0:	mov	r3, #0
   2e1d4:	b	2e230 <flatcc_builder_union_vector_push@@Base+0xc4>
   2e1d8:	ldr	r3, [fp, #-16]
   2e1dc:	ldr	r3, [r3, #32]
   2e1e0:	ldr	r2, [r3, #20]
   2e1e4:	ldr	r3, [fp, #-16]
   2e1e8:	ldr	r3, [r3, #32]
   2e1ec:	add	r2, r2, #1
   2e1f0:	str	r2, [r3, #20]
   2e1f4:	mov	r1, #8
   2e1f8:	ldr	r0, [fp, #-16]
   2e1fc:	bl	2904c <flatcc_builder_default_alloc@@Base+0x310>
   2e200:	str	r0, [fp, #-8]
   2e204:	ldr	r3, [fp, #-8]
   2e208:	cmp	r3, #0
   2e20c:	bne	2e218 <flatcc_builder_union_vector_push@@Base+0xac>
   2e210:	mov	r3, #0
   2e214:	b	2e230 <flatcc_builder_union_vector_push@@Base+0xc4>
   2e218:	ldr	r3, [fp, #-8]
   2e21c:	mov	r1, r3
   2e220:	sub	r3, fp, #24
   2e224:	ldrd	r2, [r3]
   2e228:	strd	r2, [r1]
   2e22c:	ldr	r3, [fp, #-8]
   2e230:	mov	r0, r3
   2e234:	sub	sp, fp, #4
   2e238:	ldr	fp, [sp]
   2e23c:	add	sp, sp, #4
   2e240:	pop	{pc}		; (ldr pc, [sp], #4)
   2e244:	andeq	r8, r0, r0, ror #24
   2e248:	ldrdeq	r8, [r0], -r4
   2e24c:	andeq	r8, r0, r0, asr r7

0002e250 <flatcc_builder_append_union_vector@@Base>:
   2e250:	str	fp, [sp, #-8]!
   2e254:	str	lr, [sp, #4]
   2e258:	add	fp, sp, #4
   2e25c:	sub	sp, sp, #16
   2e260:	str	r0, [fp, #-8]
   2e264:	str	r1, [fp, #-12]
   2e268:	str	r2, [fp, #-16]
   2e26c:	ldr	r3, [fp, #-8]
   2e270:	ldr	r3, [r3, #32]
   2e274:	ldrh	r3, [r3, #14]
   2e278:	cmp	r3, #7
   2e27c:	beq	2e2a0 <flatcc_builder_append_union_vector@@Base+0x50>
   2e280:	ldr	r3, [pc, #108]	; 2e2f4 <flatcc_builder_append_union_vector@@Base+0xa4>
   2e284:	add	r3, pc, r3
   2e288:	movw	r2, #1692	; 0x69c
   2e28c:	ldr	r1, [pc, #100]	; 2e2f8 <flatcc_builder_append_union_vector@@Base+0xa8>
   2e290:	add	r1, pc, r1
   2e294:	ldr	r0, [pc, #96]	; 2e2fc <flatcc_builder_append_union_vector@@Base+0xac>
   2e298:	add	r0, pc, r0
   2e29c:	bl	129e0 <__assert_fail@plt>
   2e2a0:	mvn	r2, #-536870912	; 0xe0000000
   2e2a4:	ldr	r1, [fp, #-16]
   2e2a8:	ldr	r0, [fp, #-8]
   2e2ac:	bl	2b384 <flatcc_builder_end_struct@@Base+0xac>
   2e2b0:	mov	r3, r0
   2e2b4:	cmp	r3, #0
   2e2b8:	beq	2e2c4 <flatcc_builder_append_union_vector@@Base+0x74>
   2e2bc:	mov	r3, #0
   2e2c0:	b	2e2e0 <flatcc_builder_append_union_vector@@Base+0x90>
   2e2c4:	ldr	r3, [fp, #-16]
   2e2c8:	lsl	r3, r3, #3
   2e2cc:	mov	r2, r3
   2e2d0:	ldr	r1, [fp, #-12]
   2e2d4:	ldr	r0, [fp, #-8]
   2e2d8:	bl	2915c <flatcc_builder_default_alloc@@Base+0x420>
   2e2dc:	mov	r3, r0
   2e2e0:	mov	r0, r3
   2e2e4:	sub	sp, fp, #4
   2e2e8:	ldr	fp, [sp]
   2e2ec:	add	sp, sp, #4
   2e2f0:	pop	{pc}		; (ldr pc, [sp], #4)
   2e2f4:	andeq	r8, r0, r0, lsr #23
   2e2f8:	strdeq	r8, [r0], -r0
   2e2fc:	andeq	r8, r0, ip, ror #12

0002e300 <flatcc_builder_create_string@@Base>:
   2e300:	str	r4, [sp, #-12]!
   2e304:	str	fp, [sp, #4]
   2e308:	str	lr, [sp, #8]
   2e30c:	add	fp, sp, #8
   2e310:	sub	sp, sp, #100	; 0x64
   2e314:	str	r0, [fp, #-96]	; 0xffffffa0
   2e318:	str	r1, [fp, #-100]	; 0xffffff9c
   2e31c:	str	r2, [fp, #-104]	; 0xffffff98
   2e320:	ldr	r4, [pc, #388]	; 2e4ac <flatcc_builder_create_string@@Base+0x1ac>
   2e324:	add	r4, pc, r4
   2e328:	ldr	r0, [fp, #-104]	; 0xffffff98
   2e32c:	bl	28bec <main@@Base+0x53c>
   2e330:	mov	r3, r0
   2e334:	str	r3, [fp, #-20]	; 0xffffffec
   2e338:	ldr	r3, [fp, #-104]	; 0xffffff98
   2e33c:	add	r3, r3, #1
   2e340:	mov	r2, #4
   2e344:	mov	r1, r3
   2e348:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2e34c:	bl	2a370 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   2e350:	mov	r3, r0
   2e354:	add	r3, r3, #1
   2e358:	str	r3, [fp, #-16]
   2e35c:	mov	r3, #0
   2e360:	str	r3, [fp, #-92]	; 0xffffffa4
   2e364:	mov	r3, #0
   2e368:	str	r3, [fp, #-88]	; 0xffffffa8
   2e36c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2e370:	add	r3, r3, #4
   2e374:	str	r3, [fp, #-92]	; 0xffffffa4
   2e378:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2e37c:	add	r3, r3, #1
   2e380:	lsl	r3, r3, #3
   2e384:	sub	r2, fp, #12
   2e388:	add	r3, r2, r3
   2e38c:	sub	r2, fp, #20
   2e390:	str	r2, [r3, #-80]	; 0xffffffb0
   2e394:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2e398:	add	r3, r3, #1
   2e39c:	lsl	r3, r3, #3
   2e3a0:	sub	r2, fp, #12
   2e3a4:	add	r3, r2, r3
   2e3a8:	mov	r2, #4
   2e3ac:	str	r2, [r3, #-76]	; 0xffffffb4
   2e3b0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2e3b4:	add	r3, r3, #1
   2e3b8:	str	r3, [fp, #-88]	; 0xffffffa8
   2e3bc:	ldr	r3, [fp, #-104]	; 0xffffff98
   2e3c0:	cmp	r3, #0
   2e3c4:	beq	2e41c <flatcc_builder_create_string@@Base+0x11c>
   2e3c8:	ldr	r2, [fp, #-92]	; 0xffffffa4
   2e3cc:	ldr	r3, [fp, #-104]	; 0xffffff98
   2e3d0:	add	r3, r2, r3
   2e3d4:	str	r3, [fp, #-92]	; 0xffffffa4
   2e3d8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2e3dc:	add	r3, r3, #1
   2e3e0:	lsl	r3, r3, #3
   2e3e4:	sub	r2, fp, #12
   2e3e8:	add	r3, r2, r3
   2e3ec:	ldr	r2, [fp, #-100]	; 0xffffff9c
   2e3f0:	str	r2, [r3, #-80]	; 0xffffffb0
   2e3f4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2e3f8:	add	r3, r3, #1
   2e3fc:	lsl	r3, r3, #3
   2e400:	sub	r2, fp, #12
   2e404:	add	r3, r2, r3
   2e408:	ldr	r2, [fp, #-104]	; 0xffffff98
   2e40c:	str	r2, [r3, #-76]	; 0xffffffb4
   2e410:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2e414:	add	r3, r3, #1
   2e418:	str	r3, [fp, #-88]	; 0xffffffa8
   2e41c:	ldr	r3, [fp, #-16]
   2e420:	cmp	r3, #0
   2e424:	beq	2e480 <flatcc_builder_create_string@@Base+0x180>
   2e428:	ldr	r2, [fp, #-92]	; 0xffffffa4
   2e42c:	ldr	r3, [fp, #-16]
   2e430:	add	r3, r2, r3
   2e434:	str	r3, [fp, #-92]	; 0xffffffa4
   2e438:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2e43c:	add	r3, r3, #1
   2e440:	lsl	r3, r3, #3
   2e444:	sub	r2, fp, #12
   2e448:	add	r3, r2, r3
   2e44c:	ldr	r2, [pc, #92]	; 2e4b0 <flatcc_builder_create_string@@Base+0x1b0>
   2e450:	ldr	r2, [r4, r2]
   2e454:	str	r2, [r3, #-80]	; 0xffffffb0
   2e458:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2e45c:	add	r3, r3, #1
   2e460:	lsl	r3, r3, #3
   2e464:	sub	r2, fp, #12
   2e468:	add	r3, r2, r3
   2e46c:	ldr	r2, [fp, #-16]
   2e470:	str	r2, [r3, #-76]	; 0xffffffb4
   2e474:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2e478:	add	r3, r3, #1
   2e47c:	str	r3, [fp, #-88]	; 0xffffffa8
   2e480:	sub	r3, fp, #92	; 0x5c
   2e484:	mov	r1, r3
   2e488:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2e48c:	bl	2a3f8 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   2e490:	mov	r3, r0
   2e494:	mov	r0, r3
   2e498:	sub	sp, fp, #8
   2e49c:	ldr	r4, [sp]
   2e4a0:	ldr	fp, [sp, #4]
   2e4a4:	add	sp, sp, #8
   2e4a8:	pop	{pc}		; (ldr pc, [sp], #4)
   2e4ac:	ldrdeq	r9, [r1], -r4
   2e4b0:	andeq	r0, r0, r4, rrx

0002e4b4 <flatcc_builder_create_string_str@@Base>:
   2e4b4:	str	fp, [sp, #-8]!
   2e4b8:	str	lr, [sp, #4]
   2e4bc:	add	fp, sp, #4
   2e4c0:	sub	sp, sp, #8
   2e4c4:	str	r0, [fp, #-8]
   2e4c8:	str	r1, [fp, #-12]
   2e4cc:	ldr	r0, [fp, #-12]
   2e4d0:	bl	12974 <strlen@plt>
   2e4d4:	mov	r3, r0
   2e4d8:	mov	r2, r3
   2e4dc:	ldr	r1, [fp, #-12]
   2e4e0:	ldr	r0, [fp, #-8]
   2e4e4:	bl	2e300 <flatcc_builder_create_string@@Base>
   2e4e8:	mov	r3, r0
   2e4ec:	mov	r0, r3
   2e4f0:	sub	sp, fp, #4
   2e4f4:	ldr	fp, [sp]
   2e4f8:	add	sp, sp, #4
   2e4fc:	pop	{pc}		; (ldr pc, [sp], #4)

0002e500 <flatcc_builder_create_string_strn@@Base>:
   2e500:	str	fp, [sp, #-8]!
   2e504:	str	lr, [sp, #4]
   2e508:	add	fp, sp, #4
   2e50c:	sub	sp, sp, #16
   2e510:	str	r0, [fp, #-8]
   2e514:	str	r1, [fp, #-12]
   2e518:	str	r2, [fp, #-16]
   2e51c:	ldr	r1, [fp, #-16]
   2e520:	ldr	r0, [fp, #-12]
   2e524:	bl	28cdc <main@@Base+0x62c>
   2e528:	mov	r3, r0
   2e52c:	mov	r2, r3
   2e530:	ldr	r1, [fp, #-12]
   2e534:	ldr	r0, [fp, #-8]
   2e538:	bl	2e300 <flatcc_builder_create_string@@Base>
   2e53c:	mov	r3, r0
   2e540:	mov	r0, r3
   2e544:	sub	sp, fp, #4
   2e548:	ldr	fp, [sp]
   2e54c:	add	sp, sp, #4
   2e550:	pop	{pc}		; (ldr pc, [sp], #4)

0002e554 <flatcc_builder_end_string@@Base>:
   2e554:	str	fp, [sp, #-8]!
   2e558:	str	lr, [sp, #4]
   2e55c:	add	fp, sp, #4
   2e560:	sub	sp, sp, #16
   2e564:	str	r0, [fp, #-16]
   2e568:	ldr	r3, [fp, #-16]
   2e56c:	ldr	r3, [r3, #32]
   2e570:	ldrh	r3, [r3, #14]
   2e574:	cmp	r3, #6
   2e578:	beq	2e59c <flatcc_builder_end_string@@Base+0x48>
   2e57c:	ldr	r3, [pc, #168]	; 2e62c <flatcc_builder_end_string@@Base+0xd8>
   2e580:	add	r3, pc, r3
   2e584:	movw	r2, #1732	; 0x6c4
   2e588:	ldr	r1, [pc, #160]	; 2e630 <flatcc_builder_end_string@@Base+0xdc>
   2e58c:	add	r1, pc, r1
   2e590:	ldr	r0, [pc, #156]	; 2e634 <flatcc_builder_end_string@@Base+0xe0>
   2e594:	add	r0, pc, r0
   2e598:	bl	129e0 <__assert_fail@plt>
   2e59c:	ldr	r3, [fp, #-16]
   2e5a0:	ldr	r3, [r3, #32]
   2e5a4:	ldr	r2, [r3, #20]
   2e5a8:	ldr	r3, [fp, #-16]
   2e5ac:	ldr	r3, [r3, #20]
   2e5b0:	cmp	r2, r3
   2e5b4:	beq	2e5d8 <flatcc_builder_end_string@@Base+0x84>
   2e5b8:	ldr	r3, [pc, #120]	; 2e638 <flatcc_builder_end_string@@Base+0xe4>
   2e5bc:	add	r3, pc, r3
   2e5c0:	movw	r2, #1733	; 0x6c5
   2e5c4:	ldr	r1, [pc, #112]	; 2e63c <flatcc_builder_end_string@@Base+0xe8>
   2e5c8:	add	r1, pc, r1
   2e5cc:	ldr	r0, [pc, #108]	; 2e640 <flatcc_builder_end_string@@Base+0xec>
   2e5d0:	add	r0, pc, r0
   2e5d4:	bl	129e0 <__assert_fail@plt>
   2e5d8:	ldr	r3, [fp, #-16]
   2e5dc:	ldr	r1, [r3, #16]
   2e5e0:	ldr	r3, [fp, #-16]
   2e5e4:	ldr	r3, [r3, #20]
   2e5e8:	mov	r2, r3
   2e5ec:	ldr	r0, [fp, #-16]
   2e5f0:	bl	2e300 <flatcc_builder_create_string@@Base>
   2e5f4:	str	r0, [fp, #-8]
   2e5f8:	ldr	r3, [fp, #-8]
   2e5fc:	cmp	r3, #0
   2e600:	bne	2e60c <flatcc_builder_end_string@@Base+0xb8>
   2e604:	mov	r3, #0
   2e608:	b	2e618 <flatcc_builder_end_string@@Base+0xc4>
   2e60c:	ldr	r0, [fp, #-16]
   2e610:	bl	2a29c <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   2e614:	ldr	r3, [fp, #-8]
   2e618:	mov	r0, r3
   2e61c:	sub	sp, fp, #4
   2e620:	ldr	fp, [sp]
   2e624:	add	sp, sp, #4
   2e628:	pop	{pc}		; (ldr pc, [sp], #4)
   2e62c:	andeq	r8, r0, r8, asr #17
   2e630:	strdeq	r7, [r0], -r4
   2e634:	ldrdeq	r8, [r0], -r0
   2e638:	andeq	r8, r0, ip, lsl #17
   2e63c:			; <UNDEFINED> instruction: 0x00007fb8
   2e640:	andeq	r8, r0, r8, ror #6

0002e644 <flatcc_builder_string_edit@@Base>:
   2e644:	push	{fp}		; (str fp, [sp, #-4]!)
   2e648:	add	fp, sp, #0
   2e64c:	sub	sp, sp, #12
   2e650:	str	r0, [fp, #-8]
   2e654:	ldr	r3, [fp, #-8]
   2e658:	ldr	r3, [r3, #16]
   2e65c:	mov	r0, r3
   2e660:	add	sp, fp, #0
   2e664:	pop	{fp}		; (ldr fp, [sp], #4)
   2e668:	bx	lr

0002e66c <flatcc_builder_string_len@@Base>:
   2e66c:	push	{fp}		; (str fp, [sp, #-4]!)
   2e670:	add	fp, sp, #0
   2e674:	sub	sp, sp, #12
   2e678:	str	r0, [fp, #-8]
   2e67c:	ldr	r3, [fp, #-8]
   2e680:	ldr	r3, [r3, #32]
   2e684:	ldr	r3, [r3, #20]
   2e688:	mov	r0, r3
   2e68c:	add	sp, fp, #0
   2e690:	pop	{fp}		; (ldr fp, [sp], #4)
   2e694:	bx	lr

0002e698 <flatcc_builder_table_add@@Base>:
   2e698:	str	fp, [sp, #-8]!
   2e69c:	str	lr, [sp, #4]
   2e6a0:	add	fp, sp, #4
   2e6a4:	sub	sp, sp, #16
   2e6a8:	str	r0, [fp, #-8]
   2e6ac:	str	r1, [fp, #-12]
   2e6b0:	str	r2, [fp, #-16]
   2e6b4:	strh	r3, [fp, #-18]	; 0xffffffee
   2e6b8:	ldr	r3, [fp, #-8]
   2e6bc:	ldr	r3, [r3, #32]
   2e6c0:	ldrh	r3, [r3, #14]
   2e6c4:	cmp	r3, #3
   2e6c8:	beq	2e6ec <flatcc_builder_table_add@@Base+0x54>
   2e6cc:	ldr	r3, [pc, #284]	; 2e7f0 <flatcc_builder_table_add@@Base+0x158>
   2e6d0:	add	r3, pc, r3
   2e6d4:	movw	r2, #1773	; 0x6ed
   2e6d8:	ldr	r1, [pc, #276]	; 2e7f4 <flatcc_builder_table_add@@Base+0x15c>
   2e6dc:	add	r1, pc, r1
   2e6e0:	ldr	r0, [pc, #272]	; 2e7f8 <flatcc_builder_table_add@@Base+0x160>
   2e6e4:	add	r0, pc, r0
   2e6e8:	bl	129e0 <__assert_fail@plt>
   2e6ec:	ldr	r3, [fp, #-12]
   2e6f0:	cmp	r3, #0
   2e6f4:	blt	2e708 <flatcc_builder_table_add@@Base+0x70>
   2e6f8:	ldr	r3, [fp, #-12]
   2e6fc:	movw	r2, #32764	; 0x7ffc
   2e700:	cmp	r3, r2
   2e704:	ble	2e728 <flatcc_builder_table_add@@Base+0x90>
   2e708:	ldr	r3, [pc, #236]	; 2e7fc <flatcc_builder_table_add@@Base+0x164>
   2e70c:	add	r3, pc, r3
   2e710:	movw	r2, #1774	; 0x6ee
   2e714:	ldr	r1, [pc, #228]	; 2e800 <flatcc_builder_table_add@@Base+0x168>
   2e718:	add	r1, pc, r1
   2e71c:	ldr	r0, [pc, #224]	; 2e804 <flatcc_builder_table_add@@Base+0x16c>
   2e720:	add	r0, pc, r0
   2e724:	bl	129e0 <__assert_fail@plt>
   2e728:	ldr	r3, [fp, #-8]
   2e72c:	ldrh	r3, [r3, #130]	; 0x82
   2e730:	ldrh	r2, [fp, #-18]	; 0xffffffee
   2e734:	cmp	r2, r3
   2e738:	bls	2e748 <flatcc_builder_table_add@@Base+0xb0>
   2e73c:	ldr	r3, [fp, #-8]
   2e740:	ldrh	r2, [fp, #-18]	; 0xffffffee
   2e744:	strh	r2, [r3, #130]	; 0x82
   2e748:	ldr	r3, [fp, #-8]
   2e74c:	ldr	r2, [r3, #4]
   2e750:	ldr	r3, [fp, #-12]
   2e754:	lsl	r3, r3, #1
   2e758:	add	r3, r2, r3
   2e75c:	ldrh	r3, [r3]
   2e760:	cmp	r3, #0
   2e764:	beq	2e788 <flatcc_builder_table_add@@Base+0xf0>
   2e768:	ldr	r3, [pc, #152]	; 2e808 <flatcc_builder_table_add@@Base+0x170>
   2e76c:	add	r3, pc, r3
   2e770:	movw	r2, #1784	; 0x6f8
   2e774:	ldr	r1, [pc, #144]	; 2e80c <flatcc_builder_table_add@@Base+0x174>
   2e778:	add	r1, pc, r1
   2e77c:	ldr	r0, [pc, #140]	; 2e810 <flatcc_builder_table_add@@Base+0x178>
   2e780:	add	r0, pc, r0
   2e784:	bl	129e0 <__assert_fail@plt>
   2e788:	ldr	r3, [fp, #-8]
   2e78c:	ldr	r2, [r3, #12]
   2e790:	ldr	r3, [fp, #-12]
   2e794:	eor	r2, r2, r3
   2e798:	movw	r3, #31153	; 0x79b1
   2e79c:	movt	r3, #40503	; 0x9e37
   2e7a0:	mul	r2, r3, r2
   2e7a4:	ldr	r3, [fp, #-16]
   2e7a8:	eor	r2, r2, r3
   2e7ac:	movw	r3, #31153	; 0x79b1
   2e7b0:	movt	r3, #40503	; 0x9e37
   2e7b4:	mul	r2, r3, r2
   2e7b8:	ldr	r3, [fp, #-8]
   2e7bc:	str	r2, [r3, #12]
   2e7c0:	ldr	r3, [fp, #-12]
   2e7c4:	uxth	r3, r3
   2e7c8:	ldrh	r2, [fp, #-18]	; 0xffffffee
   2e7cc:	ldr	r1, [fp, #-16]
   2e7d0:	ldr	r0, [fp, #-8]
   2e7d4:	bl	291c4 <flatcc_builder_default_alloc@@Base+0x488>
   2e7d8:	mov	r3, r0
   2e7dc:	mov	r0, r3
   2e7e0:	sub	sp, fp, #4
   2e7e4:	ldr	fp, [sp]
   2e7e8:	add	sp, sp, #4
   2e7ec:	pop	{pc}		; (ldr pc, [sp], #4)
   2e7f0:	muleq	r0, r4, r7
   2e7f4:	andeq	r7, r0, r4, lsr #29
   2e7f8:	andeq	r8, r0, ip, asr r1
   2e7fc:	andeq	r8, r0, r8, asr r7
   2e800:	andeq	r7, r0, r8, ror #28
   2e804:	andeq	r8, r0, ip, lsr r2
   2e808:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   2e80c:	andeq	r7, r0, r8, lsl #28
   2e810:	andeq	r7, r0, r0, ror #28

0002e814 <flatcc_builder_table_edit@@Base>:
   2e814:	str	fp, [sp, #-8]!
   2e818:	str	lr, [sp, #4]
   2e81c:	add	fp, sp, #4
   2e820:	sub	sp, sp, #8
   2e824:	str	r0, [fp, #-8]
   2e828:	str	r1, [fp, #-12]
   2e82c:	ldr	r3, [fp, #-8]
   2e830:	ldr	r3, [r3, #32]
   2e834:	ldrh	r3, [r3, #14]
   2e838:	cmp	r3, #3
   2e83c:	beq	2e860 <flatcc_builder_table_edit@@Base+0x4c>
   2e840:	ldr	r3, [pc, #72]	; 2e890 <flatcc_builder_table_edit@@Base+0x7c>
   2e844:	add	r3, pc, r3
   2e848:	movw	r2, #1794	; 0x702
   2e84c:	ldr	r1, [pc, #64]	; 2e894 <flatcc_builder_table_edit@@Base+0x80>
   2e850:	add	r1, pc, r1
   2e854:	ldr	r0, [pc, #60]	; 2e898 <flatcc_builder_table_edit@@Base+0x84>
   2e858:	add	r0, pc, r0
   2e85c:	bl	129e0 <__assert_fail@plt>
   2e860:	ldr	r3, [fp, #-8]
   2e864:	ldr	r2, [r3, #16]
   2e868:	ldr	r3, [fp, #-8]
   2e86c:	ldr	r1, [r3, #20]
   2e870:	ldr	r3, [fp, #-12]
   2e874:	sub	r3, r1, r3
   2e878:	add	r3, r2, r3
   2e87c:	mov	r0, r3
   2e880:	sub	sp, fp, #4
   2e884:	ldr	fp, [sp]
   2e888:	add	sp, sp, #4
   2e88c:	pop	{pc}		; (ldr pc, [sp], #4)
   2e890:	andeq	r8, r0, ip, lsr r6
   2e894:	andeq	r7, r0, r0, lsr sp
   2e898:	andeq	r7, r0, r8, ror #31

0002e89c <flatcc_builder_table_add_copy@@Base>:
   2e89c:	str	fp, [sp, #-8]!
   2e8a0:	str	lr, [sp, #4]
   2e8a4:	add	fp, sp, #4
   2e8a8:	sub	sp, sp, #24
   2e8ac:	str	r0, [fp, #-16]
   2e8b0:	str	r1, [fp, #-20]	; 0xffffffec
   2e8b4:	str	r2, [fp, #-24]	; 0xffffffe8
   2e8b8:	str	r3, [fp, #-28]	; 0xffffffe4
   2e8bc:	ldrh	r3, [fp, #4]
   2e8c0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2e8c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   2e8c8:	ldr	r0, [fp, #-16]
   2e8cc:	bl	2e698 <flatcc_builder_table_add@@Base>
   2e8d0:	str	r0, [fp, #-8]
   2e8d4:	ldr	r3, [fp, #-8]
   2e8d8:	cmp	r3, #0
   2e8dc:	beq	2e8f0 <flatcc_builder_table_add_copy@@Base+0x54>
   2e8e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2e8e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2e8e8:	ldr	r0, [fp, #-8]
   2e8ec:	bl	12908 <memcpy@plt>
   2e8f0:	ldr	r3, [fp, #-8]
   2e8f4:	mov	r0, r3
   2e8f8:	sub	sp, fp, #4
   2e8fc:	ldr	fp, [sp]
   2e900:	add	sp, sp, #4
   2e904:	pop	{pc}		; (ldr pc, [sp], #4)

0002e908 <flatcc_builder_table_add_offset@@Base>:
   2e908:	str	fp, [sp, #-8]!
   2e90c:	str	lr, [sp, #4]
   2e910:	add	fp, sp, #4
   2e914:	sub	sp, sp, #8
   2e918:	str	r0, [fp, #-8]
   2e91c:	str	r1, [fp, #-12]
   2e920:	ldr	r3, [fp, #-8]
   2e924:	ldr	r3, [r3, #32]
   2e928:	ldrh	r3, [r3, #14]
   2e92c:	cmp	r3, #3
   2e930:	beq	2e954 <flatcc_builder_table_add_offset@@Base+0x4c>
   2e934:	ldr	r3, [pc, #244]	; 2ea30 <flatcc_builder_table_add_offset@@Base+0x128>
   2e938:	add	r3, pc, r3
   2e93c:	movw	r2, #1811	; 0x713
   2e940:	ldr	r1, [pc, #236]	; 2ea34 <flatcc_builder_table_add_offset@@Base+0x12c>
   2e944:	add	r1, pc, r1
   2e948:	ldr	r0, [pc, #232]	; 2ea38 <flatcc_builder_table_add_offset@@Base+0x130>
   2e94c:	add	r0, pc, r0
   2e950:	bl	129e0 <__assert_fail@plt>
   2e954:	ldr	r3, [fp, #-12]
   2e958:	cmp	r3, #0
   2e95c:	blt	2e970 <flatcc_builder_table_add_offset@@Base+0x68>
   2e960:	ldr	r3, [fp, #-12]
   2e964:	movw	r2, #32764	; 0x7ffc
   2e968:	cmp	r3, r2
   2e96c:	ble	2e990 <flatcc_builder_table_add_offset@@Base+0x88>
   2e970:	ldr	r3, [pc, #196]	; 2ea3c <flatcc_builder_table_add_offset@@Base+0x134>
   2e974:	add	r3, pc, r3
   2e978:	movw	r2, #1812	; 0x714
   2e97c:	ldr	r1, [pc, #188]	; 2ea40 <flatcc_builder_table_add_offset@@Base+0x138>
   2e980:	add	r1, pc, r1
   2e984:	ldr	r0, [pc, #184]	; 2ea44 <flatcc_builder_table_add_offset@@Base+0x13c>
   2e988:	add	r0, pc, r0
   2e98c:	bl	129e0 <__assert_fail@plt>
   2e990:	ldr	r3, [fp, #-8]
   2e994:	ldr	r2, [r3, #4]
   2e998:	ldr	r3, [fp, #-12]
   2e99c:	lsl	r3, r3, #1
   2e9a0:	add	r3, r2, r3
   2e9a4:	ldrh	r3, [r3]
   2e9a8:	cmp	r3, #0
   2e9ac:	beq	2e9d0 <flatcc_builder_table_add_offset@@Base+0xc8>
   2e9b0:	ldr	r3, [pc, #144]	; 2ea48 <flatcc_builder_table_add_offset@@Base+0x140>
   2e9b4:	add	r3, pc, r3
   2e9b8:	movw	r2, #1819	; 0x71b
   2e9bc:	ldr	r1, [pc, #136]	; 2ea4c <flatcc_builder_table_add_offset@@Base+0x144>
   2e9c0:	add	r1, pc, r1
   2e9c4:	ldr	r0, [pc, #132]	; 2ea50 <flatcc_builder_table_add_offset@@Base+0x148>
   2e9c8:	add	r0, pc, r0
   2e9cc:	bl	129e0 <__assert_fail@plt>
   2e9d0:	ldr	r3, [fp, #-8]
   2e9d4:	ldr	r2, [r3, #12]
   2e9d8:	ldr	r3, [fp, #-12]
   2e9dc:	eor	r2, r2, r3
   2e9e0:	movw	r3, #31153	; 0x79b1
   2e9e4:	movt	r3, #40503	; 0x9e37
   2e9e8:	mul	r3, r3, r2
   2e9ec:	eor	r2, r3, #4
   2e9f0:	movw	r3, #31153	; 0x79b1
   2e9f4:	movt	r3, #40503	; 0x9e37
   2e9f8:	mul	r2, r3, r2
   2e9fc:	ldr	r3, [fp, #-8]
   2ea00:	str	r2, [r3, #12]
   2ea04:	ldr	r3, [fp, #-12]
   2ea08:	uxth	r3, r3
   2ea0c:	mov	r1, r3
   2ea10:	ldr	r0, [fp, #-8]
   2ea14:	bl	292e8 <flatcc_builder_default_alloc@@Base+0x5ac>
   2ea18:	mov	r3, r0
   2ea1c:	mov	r0, r3
   2ea20:	sub	sp, fp, #4
   2ea24:	ldr	fp, [sp]
   2ea28:	add	sp, sp, #4
   2ea2c:	pop	{pc}		; (ldr pc, [sp], #4)
   2ea30:	andeq	r8, r0, r4, ror #10
   2ea34:	andeq	r7, r0, ip, lsr ip
   2ea38:	strdeq	r7, [r0], -r4
   2ea3c:	andeq	r8, r0, r8, lsr #10
   2ea40:	andeq	r7, r0, r0, lsl #24
   2ea44:	ldrdeq	r7, [r0], -r4
   2ea48:	andeq	r8, r0, r8, ror #9
   2ea4c:	andeq	r7, r0, r0, asr #23
   2ea50:	andeq	r7, r0, r8, lsl ip

0002ea54 <flatcc_builder_push_buffer_alignment@@Base>:
   2ea54:	push	{fp}		; (str fp, [sp, #-4]!)
   2ea58:	add	fp, sp, #0
   2ea5c:	sub	sp, sp, #20
   2ea60:	str	r0, [fp, #-16]
   2ea64:	ldr	r3, [fp, #-16]
   2ea68:	ldrh	r3, [r3, #128]	; 0x80
   2ea6c:	strh	r3, [fp, #-6]
   2ea70:	ldr	r3, [fp, #-16]
   2ea74:	mov	r2, #4
   2ea78:	strh	r2, [r3, #128]	; 0x80
   2ea7c:	ldrh	r3, [fp, #-6]
   2ea80:	mov	r0, r3
   2ea84:	add	sp, fp, #0
   2ea88:	pop	{fp}		; (ldr fp, [sp], #4)
   2ea8c:	bx	lr

0002ea90 <flatcc_builder_pop_buffer_alignment@@Base>:
   2ea90:	str	fp, [sp, #-8]!
   2ea94:	str	lr, [sp, #4]
   2ea98:	add	fp, sp, #4
   2ea9c:	sub	sp, sp, #8
   2eaa0:	str	r0, [fp, #-8]
   2eaa4:	mov	r3, r1
   2eaa8:	strh	r3, [fp, #-10]
   2eaac:	ldrh	r3, [fp, #-10]
   2eab0:	mov	r1, r3
   2eab4:	ldr	r0, [fp, #-8]
   2eab8:	bl	29cf4 <flatcc_builder_clear@@Base+0xc4>
   2eabc:	nop	{0}
   2eac0:	sub	sp, fp, #4
   2eac4:	ldr	fp, [sp]
   2eac8:	add	sp, sp, #4
   2eacc:	pop	{pc}		; (ldr pc, [sp], #4)

0002ead0 <flatcc_builder_get_buffer_alignment@@Base>:
   2ead0:	push	{fp}		; (str fp, [sp, #-4]!)
   2ead4:	add	fp, sp, #0
   2ead8:	sub	sp, sp, #12
   2eadc:	str	r0, [fp, #-8]
   2eae0:	ldr	r3, [fp, #-8]
   2eae4:	ldrh	r3, [r3, #128]	; 0x80
   2eae8:	mov	r0, r3
   2eaec:	add	sp, fp, #0
   2eaf0:	pop	{fp}		; (ldr fp, [sp], #4)
   2eaf4:	bx	lr

0002eaf8 <flatcc_builder_set_vtable_clustering@@Base>:
   2eaf8:	push	{fp}		; (str fp, [sp, #-4]!)
   2eafc:	add	fp, sp, #0
   2eb00:	sub	sp, sp, #12
   2eb04:	str	r0, [fp, #-8]
   2eb08:	str	r1, [fp, #-12]
   2eb0c:	ldr	r3, [fp, #-12]
   2eb10:	cmp	r3, #0
   2eb14:	moveq	r3, #1
   2eb18:	movne	r3, #0
   2eb1c:	uxtb	r3, r3
   2eb20:	mov	r2, r3
   2eb24:	ldr	r3, [fp, #-8]
   2eb28:	str	r2, [r3, #180]	; 0xb4
   2eb2c:	nop	{0}
   2eb30:	add	sp, fp, #0
   2eb34:	pop	{fp}		; (ldr fp, [sp], #4)
   2eb38:	bx	lr

0002eb3c <flatcc_builder_set_block_align@@Base>:
   2eb3c:	push	{fp}		; (str fp, [sp, #-4]!)
   2eb40:	add	fp, sp, #0
   2eb44:	sub	sp, sp, #12
   2eb48:	str	r0, [fp, #-8]
   2eb4c:	mov	r3, r1
   2eb50:	strh	r3, [fp, #-10]
   2eb54:	ldr	r3, [fp, #-8]
   2eb58:	ldrh	r2, [fp, #-10]
   2eb5c:	strh	r2, [r3, #132]	; 0x84
   2eb60:	nop	{0}
   2eb64:	add	sp, fp, #0
   2eb68:	pop	{fp}		; (ldr fp, [sp], #4)
   2eb6c:	bx	lr

0002eb70 <flatcc_builder_get_level@@Base>:
   2eb70:	push	{fp}		; (str fp, [sp, #-4]!)
   2eb74:	add	fp, sp, #0
   2eb78:	sub	sp, sp, #12
   2eb7c:	str	r0, [fp, #-8]
   2eb80:	ldr	r3, [fp, #-8]
   2eb84:	ldr	r3, [r3, #156]	; 0x9c
   2eb88:	mov	r0, r3
   2eb8c:	add	sp, fp, #0
   2eb90:	pop	{fp}		; (ldr fp, [sp], #4)
   2eb94:	bx	lr

0002eb98 <flatcc_builder_set_max_level@@Base>:
   2eb98:	push	{fp}		; (str fp, [sp, #-4]!)
   2eb9c:	add	fp, sp, #0
   2eba0:	sub	sp, sp, #12
   2eba4:	str	r0, [fp, #-8]
   2eba8:	str	r1, [fp, #-12]
   2ebac:	ldr	r3, [fp, #-8]
   2ebb0:	ldr	r2, [fp, #-12]
   2ebb4:	str	r2, [r3, #176]	; 0xb0
   2ebb8:	ldr	r3, [fp, #-8]
   2ebbc:	ldr	r2, [r3, #160]	; 0xa0
   2ebc0:	ldr	r3, [fp, #-8]
   2ebc4:	ldr	r3, [r3, #176]	; 0xb0
   2ebc8:	cmp	r2, r3
   2ebcc:	bge	2ebe0 <flatcc_builder_set_max_level@@Base+0x48>
   2ebd0:	ldr	r3, [fp, #-8]
   2ebd4:	ldr	r2, [r3, #176]	; 0xb0
   2ebd8:	ldr	r3, [fp, #-8]
   2ebdc:	str	r2, [r3, #160]	; 0xa0
   2ebe0:	nop	{0}
   2ebe4:	add	sp, fp, #0
   2ebe8:	pop	{fp}		; (ldr fp, [sp], #4)
   2ebec:	bx	lr

0002ebf0 <flatcc_builder_get_buffer_size@@Base>:
   2ebf0:	push	{fp}		; (str fp, [sp, #-4]!)
   2ebf4:	add	fp, sp, #0
   2ebf8:	sub	sp, sp, #12
   2ebfc:	str	r0, [fp, #-8]
   2ec00:	ldr	r3, [fp, #-8]
   2ec04:	ldr	r2, [r3, #140]	; 0x8c
   2ec08:	ldr	r3, [fp, #-8]
   2ec0c:	ldr	r3, [r3, #136]	; 0x88
   2ec10:	sub	r3, r2, r3
   2ec14:	mov	r0, r3
   2ec18:	add	sp, fp, #0
   2ec1c:	pop	{fp}		; (ldr fp, [sp], #4)
   2ec20:	bx	lr

0002ec24 <flatcc_builder_get_buffer_start@@Base>:
   2ec24:	push	{fp}		; (str fp, [sp, #-4]!)
   2ec28:	add	fp, sp, #0
   2ec2c:	sub	sp, sp, #12
   2ec30:	str	r0, [fp, #-8]
   2ec34:	ldr	r3, [fp, #-8]
   2ec38:	ldr	r3, [r3, #136]	; 0x88
   2ec3c:	mov	r0, r3
   2ec40:	add	sp, fp, #0
   2ec44:	pop	{fp}		; (ldr fp, [sp], #4)
   2ec48:	bx	lr

0002ec4c <flatcc_builder_get_buffer_end@@Base>:
   2ec4c:	push	{fp}		; (str fp, [sp, #-4]!)
   2ec50:	add	fp, sp, #0
   2ec54:	sub	sp, sp, #12
   2ec58:	str	r0, [fp, #-8]
   2ec5c:	ldr	r3, [fp, #-8]
   2ec60:	ldr	r3, [r3, #140]	; 0x8c
   2ec64:	mov	r0, r3
   2ec68:	add	sp, fp, #0
   2ec6c:	pop	{fp}		; (ldr fp, [sp], #4)
   2ec70:	bx	lr

0002ec74 <flatcc_builder_set_vtable_cache_limit@@Base>:
   2ec74:	push	{fp}		; (str fp, [sp, #-4]!)
   2ec78:	add	fp, sp, #0
   2ec7c:	sub	sp, sp, #12
   2ec80:	str	r0, [fp, #-8]
   2ec84:	str	r1, [fp, #-12]
   2ec88:	ldr	r3, [fp, #-8]
   2ec8c:	ldr	r2, [fp, #-12]
   2ec90:	str	r2, [r3, #172]	; 0xac
   2ec94:	nop	{0}
   2ec98:	add	sp, fp, #0
   2ec9c:	pop	{fp}		; (ldr fp, [sp], #4)
   2eca0:	bx	lr

0002eca4 <flatcc_builder_set_identifier@@Base>:
   2eca4:	push	{fp}		; (str fp, [sp, #-4]!)
   2eca8:	add	fp, sp, #0
   2ecac:	sub	sp, sp, #12
   2ecb0:	str	r0, [fp, #-8]
   2ecb4:	str	r1, [fp, #-12]
   2ecb8:	ldr	r1, [pc, #60]	; 2ecfc <flatcc_builder_set_identifier@@Base+0x58>
   2ecbc:	add	r1, pc, r1
   2ecc0:	ldr	r3, [fp, #-8]
   2ecc4:	add	r2, r3, #168	; 0xa8
   2ecc8:	ldr	r3, [fp, #-12]
   2eccc:	cmp	r3, #0
   2ecd0:	beq	2ecdc <flatcc_builder_set_identifier@@Base+0x38>
   2ecd4:	ldr	r3, [fp, #-12]
   2ecd8:	b	2ece4 <flatcc_builder_set_identifier@@Base+0x40>
   2ecdc:	ldr	r3, [pc, #28]	; 2ed00 <flatcc_builder_set_identifier@@Base+0x5c>
   2ece0:	ldr	r3, [r1, r3]
   2ece4:	ldr	r3, [r3]
   2ece8:	str	r3, [r2]
   2ecec:	nop	{0}
   2ecf0:	add	sp, fp, #0
   2ecf4:	pop	{fp}		; (ldr fp, [sp], #4)
   2ecf8:	bx	lr
   2ecfc:	andeq	r9, r1, ip, lsr r3
   2ed00:	andeq	r0, r0, r4, rrx

0002ed04 <flatcc_builder_get_type@@Base>:
   2ed04:	push	{fp}		; (str fp, [sp, #-4]!)
   2ed08:	add	fp, sp, #0
   2ed0c:	sub	sp, sp, #12
   2ed10:	str	r0, [fp, #-8]
   2ed14:	ldr	r3, [fp, #-8]
   2ed18:	ldr	r3, [r3, #32]
   2ed1c:	cmp	r3, #0
   2ed20:	beq	2ed34 <flatcc_builder_get_type@@Base+0x30>
   2ed24:	ldr	r3, [fp, #-8]
   2ed28:	ldr	r3, [r3, #32]
   2ed2c:	ldrh	r3, [r3, #14]
   2ed30:	b	2ed38 <flatcc_builder_get_type@@Base+0x34>
   2ed34:	mov	r3, #0
   2ed38:	mov	r0, r3
   2ed3c:	add	sp, fp, #0
   2ed40:	pop	{fp}		; (ldr fp, [sp], #4)
   2ed44:	bx	lr

0002ed48 <flatcc_builder_get_type_at@@Base>:
   2ed48:	push	{fp}		; (str fp, [sp, #-4]!)
   2ed4c:	add	fp, sp, #0
   2ed50:	sub	sp, sp, #12
   2ed54:	str	r0, [fp, #-8]
   2ed58:	str	r1, [fp, #-12]
   2ed5c:	ldr	r3, [fp, #-12]
   2ed60:	cmp	r3, #0
   2ed64:	ble	2ed7c <flatcc_builder_get_type_at@@Base+0x34>
   2ed68:	ldr	r3, [fp, #-8]
   2ed6c:	ldr	r3, [r3, #156]	; 0x9c
   2ed70:	ldr	r2, [fp, #-12]
   2ed74:	cmp	r2, r3
   2ed78:	ble	2ed84 <flatcc_builder_get_type_at@@Base+0x3c>
   2ed7c:	mov	r3, #0
   2ed80:	b	2edb8 <flatcc_builder_get_type_at@@Base+0x70>
   2ed84:	ldr	r3, [fp, #-8]
   2ed88:	ldr	r2, [r3, #32]
   2ed8c:	ldr	r3, [fp, #-8]
   2ed90:	ldr	r3, [r3, #156]	; 0x9c
   2ed94:	ldr	r1, [fp, #-12]
   2ed98:	sub	r3, r1, r3
   2ed9c:	mov	r1, r3
   2eda0:	mov	r3, r1
   2eda4:	lsl	r3, r3, #3
   2eda8:	add	r3, r3, r1
   2edac:	lsl	r3, r3, #2
   2edb0:	add	r3, r2, r3
   2edb4:	ldrh	r3, [r3, #14]
   2edb8:	mov	r0, r3
   2edbc:	add	sp, fp, #0
   2edc0:	pop	{fp}		; (ldr fp, [sp], #4)
   2edc4:	bx	lr

0002edc8 <flatcc_builder_get_direct_buffer@@Base>:
   2edc8:	str	fp, [sp, #-8]!
   2edcc:	str	lr, [sp, #4]
   2edd0:	add	fp, sp, #4
   2edd4:	sub	sp, sp, #8
   2edd8:	str	r0, [fp, #-8]
   2eddc:	str	r1, [fp, #-12]
   2ede0:	ldr	r3, [fp, #-8]
   2ede4:	ldr	r3, [r3, #184]	; 0xb8
   2ede8:	cmp	r3, #0
   2edec:	beq	2ee0c <flatcc_builder_get_direct_buffer@@Base+0x44>
   2edf0:	ldr	r3, [fp, #-8]
   2edf4:	add	r3, r3, #188	; 0xbc
   2edf8:	ldr	r1, [fp, #-12]
   2edfc:	mov	r0, r3
   2ee00:	bl	28c5c <main@@Base+0x5ac>
   2ee04:	mov	r3, r0
   2ee08:	b	2ee28 <flatcc_builder_get_direct_buffer@@Base+0x60>
   2ee0c:	ldr	r3, [fp, #-12]
   2ee10:	cmp	r3, #0
   2ee14:	beq	2ee24 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   2ee18:	ldr	r3, [fp, #-12]
   2ee1c:	mov	r2, #0
   2ee20:	str	r2, [r3]
   2ee24:	mov	r3, #0
   2ee28:	mov	r0, r3
   2ee2c:	sub	sp, fp, #4
   2ee30:	ldr	fp, [sp]
   2ee34:	add	sp, sp, #4
   2ee38:	pop	{pc}		; (ldr pc, [sp], #4)

0002ee3c <flatcc_builder_copy_buffer@@Base>:
   2ee3c:	str	fp, [sp, #-8]!
   2ee40:	str	lr, [sp, #4]
   2ee44:	add	fp, sp, #4
   2ee48:	sub	sp, sp, #16
   2ee4c:	str	r0, [fp, #-8]
   2ee50:	str	r1, [fp, #-12]
   2ee54:	str	r2, [fp, #-16]
   2ee58:	ldr	r3, [fp, #-8]
   2ee5c:	ldr	r3, [r3, #184]	; 0xb8
   2ee60:	cmp	r3, #0
   2ee64:	bne	2ee70 <flatcc_builder_copy_buffer@@Base+0x34>
   2ee68:	mov	r3, #0
   2ee6c:	b	2eebc <flatcc_builder_copy_buffer@@Base+0x80>
   2ee70:	ldr	r3, [fp, #-8]
   2ee74:	add	r3, r3, #188	; 0xbc
   2ee78:	ldr	r2, [fp, #-16]
   2ee7c:	ldr	r1, [fp, #-12]
   2ee80:	mov	r0, r3
   2ee84:	bl	2fc90 <flatcc_emitter_copy_buffer@@Base>
   2ee88:	str	r0, [fp, #-12]
   2ee8c:	ldr	r3, [fp, #-12]
   2ee90:	cmp	r3, #0
   2ee94:	bne	2eeb8 <flatcc_builder_copy_buffer@@Base+0x7c>
   2ee98:	ldr	r3, [pc, #48]	; 2eed0 <flatcc_builder_copy_buffer@@Base+0x94>
   2ee9c:	add	r3, pc, r3
   2eea0:	movw	r2, #1926	; 0x786
   2eea4:	ldr	r1, [pc, #40]	; 2eed4 <flatcc_builder_copy_buffer@@Base+0x98>
   2eea8:	add	r1, pc, r1
   2eeac:	ldr	r0, [pc, #36]	; 2eed8 <flatcc_builder_copy_buffer@@Base+0x9c>
   2eeb0:	add	r0, pc, r0
   2eeb4:	bl	129e0 <__assert_fail@plt>
   2eeb8:	ldr	r3, [fp, #-12]
   2eebc:	mov	r0, r3
   2eec0:	sub	sp, fp, #4
   2eec4:	ldr	fp, [sp]
   2eec8:	add	sp, sp, #4
   2eecc:	pop	{pc}		; (ldr pc, [sp], #4)
   2eed0:	andeq	r8, r0, r0, lsr #32
   2eed4:	ldrdeq	r7, [r0], -r8
   2eed8:	strdeq	r7, [r0], -r0

0002eedc <flatcc_builder_finalize_buffer@@Base>:
   2eedc:	str	fp, [sp, #-8]!
   2eee0:	str	lr, [sp, #4]
   2eee4:	add	fp, sp, #4
   2eee8:	sub	sp, sp, #16
   2eeec:	str	r0, [fp, #-16]
   2eef0:	str	r1, [fp, #-20]	; 0xffffffec
   2eef4:	ldr	r0, [fp, #-16]
   2eef8:	bl	2ebf0 <flatcc_builder_get_buffer_size@@Base>
   2eefc:	str	r0, [fp, #-8]
   2ef00:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ef04:	cmp	r3, #0
   2ef08:	beq	2ef18 <flatcc_builder_finalize_buffer@@Base+0x3c>
   2ef0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ef10:	ldr	r2, [fp, #-8]
   2ef14:	str	r2, [r3]
   2ef18:	ldr	r0, [fp, #-8]
   2ef1c:	bl	12950 <malloc@plt>
   2ef20:	mov	r3, r0
   2ef24:	str	r3, [fp, #-12]
   2ef28:	ldr	r3, [fp, #-12]
   2ef2c:	cmp	r3, #0
   2ef30:	bne	2ef54 <flatcc_builder_finalize_buffer@@Base+0x78>
   2ef34:	ldr	r3, [pc, #148]	; 2efd0 <flatcc_builder_finalize_buffer@@Base+0xf4>
   2ef38:	add	r3, pc, r3
   2ef3c:	movw	r2, #1944	; 0x798
   2ef40:	ldr	r1, [pc, #140]	; 2efd4 <flatcc_builder_finalize_buffer@@Base+0xf8>
   2ef44:	add	r1, pc, r1
   2ef48:	ldr	r0, [pc, #136]	; 2efd8 <flatcc_builder_finalize_buffer@@Base+0xfc>
   2ef4c:	add	r0, pc, r0
   2ef50:	bl	129e0 <__assert_fail@plt>
   2ef54:	ldr	r2, [fp, #-8]
   2ef58:	ldr	r1, [fp, #-12]
   2ef5c:	ldr	r0, [fp, #-16]
   2ef60:	bl	2ee3c <flatcc_builder_copy_buffer@@Base>
   2ef64:	mov	r3, r0
   2ef68:	cmp	r3, #0
   2ef6c:	bne	2ef90 <flatcc_builder_finalize_buffer@@Base+0xb4>
   2ef70:	ldr	r3, [pc, #100]	; 2efdc <flatcc_builder_finalize_buffer@@Base+0x100>
   2ef74:	add	r3, pc, r3
   2ef78:	movw	r2, #1948	; 0x79c
   2ef7c:	ldr	r1, [pc, #92]	; 2efe0 <flatcc_builder_finalize_buffer@@Base+0x104>
   2ef80:	add	r1, pc, r1
   2ef84:	ldr	r0, [pc, #88]	; 2efe4 <flatcc_builder_finalize_buffer@@Base+0x108>
   2ef88:	add	r0, pc, r0
   2ef8c:	bl	129e0 <__assert_fail@plt>
   2ef90:	nop	{0}
   2ef94:	ldr	r3, [fp, #-12]
   2ef98:	cmp	r3, #0
   2ef9c:	bne	2efb8 <flatcc_builder_finalize_buffer@@Base+0xdc>
   2efa0:	ldr	r3, [fp, #-20]	; 0xffffffec
   2efa4:	cmp	r3, #0
   2efa8:	beq	2efb8 <flatcc_builder_finalize_buffer@@Base+0xdc>
   2efac:	ldr	r3, [fp, #-20]	; 0xffffffec
   2efb0:	mov	r2, #0
   2efb4:	str	r2, [r3]
   2efb8:	ldr	r3, [fp, #-12]
   2efbc:	mov	r0, r3
   2efc0:	sub	sp, fp, #4
   2efc4:	ldr	fp, [sp]
   2efc8:	add	sp, sp, #4
   2efcc:	pop	{pc}		; (ldr pc, [sp], #4)
   2efd0:	andeq	r7, r0, r0, lsr #31
   2efd4:	andeq	r7, r0, ip, lsr r6
   2efd8:	muleq	r0, r4, r6
   2efdc:	andeq	r7, r0, r4, ror #30
   2efe0:	andeq	r7, r0, r0, lsl #12
   2efe4:	andeq	r7, r0, r8, asr r6

0002efe8 <flatcc_builder_finalize_aligned_buffer@@Base>:
   2efe8:	str	fp, [sp, #-8]!
   2efec:	str	lr, [sp, #4]
   2eff0:	add	fp, sp, #4
   2eff4:	sub	sp, sp, #24
   2eff8:	str	r0, [fp, #-24]	; 0xffffffe8
   2effc:	str	r1, [fp, #-28]	; 0xffffffe4
   2f000:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f004:	bl	2ebf0 <flatcc_builder_get_buffer_size@@Base>
   2f008:	str	r0, [fp, #-12]
   2f00c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2f010:	cmp	r3, #0
   2f014:	beq	2f024 <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   2f018:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2f01c:	ldr	r2, [fp, #-12]
   2f020:	str	r2, [r3]
   2f024:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f028:	bl	2ead0 <flatcc_builder_get_buffer_alignment@@Base>
   2f02c:	mov	r3, r0
   2f030:	str	r3, [fp, #-16]
   2f034:	ldr	r2, [fp, #-12]
   2f038:	ldr	r3, [fp, #-16]
   2f03c:	add	r3, r2, r3
   2f040:	sub	r2, r3, #1
   2f044:	ldr	r3, [fp, #-16]
   2f048:	rsb	r3, r3, #0
   2f04c:	and	r3, r3, r2
   2f050:	str	r3, [fp, #-12]
   2f054:	ldr	r1, [fp, #-12]
   2f058:	ldr	r0, [fp, #-16]
   2f05c:	bl	28b5c <main@@Base+0x4ac>
   2f060:	str	r0, [fp, #-8]
   2f064:	ldr	r3, [fp, #-8]
   2f068:	cmp	r3, #0
   2f06c:	beq	2f0a0 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   2f070:	ldr	r2, [fp, #-12]
   2f074:	ldr	r1, [fp, #-8]
   2f078:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f07c:	bl	2ee3c <flatcc_builder_copy_buffer@@Base>
   2f080:	mov	r3, r0
   2f084:	cmp	r3, #0
   2f088:	bne	2f0a8 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   2f08c:	ldr	r0, [fp, #-8]
   2f090:	bl	128fc <free@plt>
   2f094:	mov	r3, #0
   2f098:	str	r3, [fp, #-8]
   2f09c:	b	2f0ac <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   2f0a0:	nop	{0}
   2f0a4:	b	2f0ac <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   2f0a8:	nop	{0}
   2f0ac:	ldr	r3, [fp, #-8]
   2f0b0:	cmp	r3, #0
   2f0b4:	bne	2f0d0 <flatcc_builder_finalize_aligned_buffer@@Base+0xe8>
   2f0b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2f0bc:	cmp	r3, #0
   2f0c0:	beq	2f0d0 <flatcc_builder_finalize_aligned_buffer@@Base+0xe8>
   2f0c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2f0c8:	mov	r2, #0
   2f0cc:	str	r2, [r3]
   2f0d0:	ldr	r3, [fp, #-8]
   2f0d4:	mov	r0, r3
   2f0d8:	sub	sp, fp, #4
   2f0dc:	ldr	fp, [sp]
   2f0e0:	add	sp, sp, #4
   2f0e4:	pop	{pc}		; (ldr pc, [sp], #4)

0002f0e8 <flatcc_builder_aligned_alloc@@Base>:
   2f0e8:	str	fp, [sp, #-8]!
   2f0ec:	str	lr, [sp, #4]
   2f0f0:	add	fp, sp, #4
   2f0f4:	sub	sp, sp, #8
   2f0f8:	str	r0, [fp, #-8]
   2f0fc:	str	r1, [fp, #-12]
   2f100:	ldr	r1, [fp, #-12]
   2f104:	ldr	r0, [fp, #-8]
   2f108:	bl	28b5c <main@@Base+0x4ac>
   2f10c:	mov	r3, r0
   2f110:	mov	r0, r3
   2f114:	sub	sp, fp, #4
   2f118:	ldr	fp, [sp]
   2f11c:	add	sp, sp, #4
   2f120:	pop	{pc}		; (ldr pc, [sp], #4)

0002f124 <flatcc_builder_aligned_free@@Base>:
   2f124:	str	fp, [sp, #-8]!
   2f128:	str	lr, [sp, #4]
   2f12c:	add	fp, sp, #4
   2f130:	sub	sp, sp, #8
   2f134:	str	r0, [fp, #-8]
   2f138:	ldr	r0, [fp, #-8]
   2f13c:	bl	128fc <free@plt>
   2f140:	nop	{0}
   2f144:	sub	sp, fp, #4
   2f148:	ldr	fp, [sp]
   2f14c:	add	sp, sp, #4
   2f150:	pop	{pc}		; (ldr pc, [sp], #4)

0002f154 <flatcc_builder_get_emit_context@@Base>:
   2f154:	push	{fp}		; (str fp, [sp, #-4]!)
   2f158:	add	fp, sp, #0
   2f15c:	sub	sp, sp, #12
   2f160:	str	r0, [fp, #-8]
   2f164:	ldr	r3, [fp, #-8]
   2f168:	ldr	r3, [r3, #36]	; 0x24
   2f16c:	mov	r0, r3
   2f170:	add	sp, fp, #0
   2f174:	pop	{fp}		; (ldr fp, [sp], #4)
   2f178:	bx	lr
   2f17c:	str	fp, [sp, #-8]!
   2f180:	str	lr, [sp, #4]
   2f184:	add	fp, sp, #4
   2f188:	sub	sp, sp, #16
   2f18c:	str	r0, [fp, #-16]
   2f190:	mov	r3, #0
   2f194:	str	r3, [fp, #-8]
   2f198:	ldr	r3, [fp, #-16]
   2f19c:	ldr	r3, [r3]
   2f1a0:	cmp	r3, #0
   2f1a4:	beq	2f1fc <flatcc_builder_get_emit_context@@Base+0xa8>
   2f1a8:	ldr	r3, [fp, #-16]
   2f1ac:	ldr	r3, [r3]
   2f1b0:	ldr	r2, [r3, #2948]	; 0xb84
   2f1b4:	ldr	r3, [fp, #-16]
   2f1b8:	ldr	r3, [r3, #4]
   2f1bc:	cmp	r2, r3
   2f1c0:	beq	2f1fc <flatcc_builder_get_emit_context@@Base+0xa8>
   2f1c4:	ldr	r3, [fp, #-16]
   2f1c8:	ldr	r3, [r3]
   2f1cc:	ldr	r2, [r3, #2952]	; 0xb88
   2f1d0:	ldr	r3, [fp, #-16]
   2f1d4:	ldr	r3, [r3]
   2f1d8:	ldr	r3, [r3, #2948]	; 0xb84
   2f1dc:	sub	r2, r2, #2944	; 0xb80
   2f1e0:	str	r2, [r3, #2952]	; 0xb88
   2f1e4:	ldr	r3, [fp, #-16]
   2f1e8:	ldr	r3, [r3]
   2f1ec:	ldr	r2, [r3, #2948]	; 0xb84
   2f1f0:	ldr	r3, [fp, #-16]
   2f1f4:	str	r2, [r3]
   2f1f8:	b	2f324 <flatcc_builder_get_emit_context@@Base+0x1d0>
   2f1fc:	movw	r0, #2956	; 0xb8c
   2f200:	bl	12950 <malloc@plt>
   2f204:	mov	r3, r0
   2f208:	str	r3, [fp, #-8]
   2f20c:	ldr	r3, [fp, #-8]
   2f210:	cmp	r3, #0
   2f214:	bne	2f220 <flatcc_builder_get_emit_context@@Base+0xcc>
   2f218:	mvn	r3, #0
   2f21c:	b	2f368 <flatcc_builder_get_emit_context@@Base+0x214>
   2f220:	ldr	r3, [fp, #-16]
   2f224:	ldr	r3, [r3, #28]
   2f228:	add	r2, r3, #2944	; 0xb80
   2f22c:	ldr	r3, [fp, #-16]
   2f230:	str	r2, [r3, #28]
   2f234:	ldr	r3, [fp, #-16]
   2f238:	ldr	r3, [r3]
   2f23c:	cmp	r3, #0
   2f240:	beq	2f294 <flatcc_builder_get_emit_context@@Base+0x140>
   2f244:	ldr	r3, [fp, #-16]
   2f248:	ldr	r2, [r3, #4]
   2f24c:	ldr	r3, [fp, #-8]
   2f250:	str	r2, [r3, #2948]	; 0xb84
   2f254:	ldr	r3, [fp, #-16]
   2f258:	ldr	r2, [r3]
   2f25c:	ldr	r3, [fp, #-8]
   2f260:	str	r2, [r3, #2944]	; 0xb80
   2f264:	ldr	r3, [fp, #-16]
   2f268:	ldr	r3, [r3]
   2f26c:	ldr	r2, [fp, #-8]
   2f270:	str	r2, [r3, #2948]	; 0xb84
   2f274:	ldr	r3, [fp, #-16]
   2f278:	ldr	r3, [r3, #4]
   2f27c:	ldr	r2, [fp, #-8]
   2f280:	str	r2, [r3, #2944]	; 0xb80
   2f284:	ldr	r3, [fp, #-16]
   2f288:	ldr	r2, [fp, #-8]
   2f28c:	str	r2, [r3]
   2f290:	b	2f324 <flatcc_builder_get_emit_context@@Base+0x1d0>
   2f294:	ldr	r3, [fp, #-16]
   2f298:	ldr	r2, [fp, #-8]
   2f29c:	str	r2, [r3]
   2f2a0:	ldr	r3, [fp, #-16]
   2f2a4:	ldr	r2, [fp, #-8]
   2f2a8:	str	r2, [r3, #4]
   2f2ac:	ldr	r3, [fp, #-8]
   2f2b0:	ldr	r2, [fp, #-8]
   2f2b4:	str	r2, [r3, #2944]	; 0xb80
   2f2b8:	ldr	r3, [fp, #-8]
   2f2bc:	ldr	r2, [fp, #-8]
   2f2c0:	str	r2, [r3, #2948]	; 0xb84
   2f2c4:	ldr	r3, [fp, #-16]
   2f2c8:	ldr	r3, [r3]
   2f2cc:	add	r2, r3, #1472	; 0x5c0
   2f2d0:	ldr	r3, [fp, #-16]
   2f2d4:	str	r2, [r3, #8]
   2f2d8:	ldr	r3, [fp, #-16]
   2f2dc:	ldr	r2, [r3, #8]
   2f2e0:	ldr	r3, [fp, #-16]
   2f2e4:	str	r2, [r3, #16]
   2f2e8:	ldr	r3, [fp, #-16]
   2f2ec:	mov	r2, #1472	; 0x5c0
   2f2f0:	str	r2, [r3, #12]
   2f2f4:	ldr	r3, [fp, #-16]
   2f2f8:	ldr	r3, [r3, #12]
   2f2fc:	rsb	r2, r3, #2944	; 0xb80
   2f300:	ldr	r3, [fp, #-16]
   2f304:	str	r2, [r3, #20]
   2f308:	ldr	r3, [fp, #-16]
   2f30c:	ldr	r3, [r3, #12]
   2f310:	rsb	r2, r3, #0
   2f314:	ldr	r3, [fp, #-8]
   2f318:	str	r2, [r3, #2952]	; 0xb88
   2f31c:	mov	r3, #0
   2f320:	b	2f368 <flatcc_builder_get_emit_context@@Base+0x214>
   2f324:	ldr	r3, [fp, #-16]
   2f328:	ldr	r3, [r3]
   2f32c:	add	r2, r3, #2944	; 0xb80
   2f330:	ldr	r3, [fp, #-16]
   2f334:	str	r2, [r3, #8]
   2f338:	ldr	r3, [fp, #-16]
   2f33c:	mov	r2, #2944	; 0xb80
   2f340:	str	r2, [r3, #12]
   2f344:	ldr	r3, [fp, #-16]
   2f348:	ldr	r3, [r3]
   2f34c:	ldr	r3, [r3, #2944]	; 0xb80
   2f350:	ldr	r2, [r3, #2952]	; 0xb88
   2f354:	ldr	r3, [fp, #-16]
   2f358:	ldr	r3, [r3]
   2f35c:	sub	r2, r2, #2944	; 0xb80
   2f360:	str	r2, [r3, #2952]	; 0xb88
   2f364:	mov	r3, #0
   2f368:	mov	r0, r3
   2f36c:	sub	sp, fp, #4
   2f370:	ldr	fp, [sp]
   2f374:	add	sp, sp, #4
   2f378:	pop	{pc}		; (ldr pc, [sp], #4)
   2f37c:	str	fp, [sp, #-8]!
   2f380:	str	lr, [sp, #4]
   2f384:	add	fp, sp, #4
   2f388:	sub	sp, sp, #16
   2f38c:	str	r0, [fp, #-16]
   2f390:	mov	r3, #0
   2f394:	str	r3, [fp, #-8]
   2f398:	ldr	r3, [fp, #-16]
   2f39c:	ldr	r3, [r3, #4]
   2f3a0:	cmp	r3, #0
   2f3a4:	beq	2f3dc <flatcc_builder_get_emit_context@@Base+0x288>
   2f3a8:	ldr	r3, [fp, #-16]
   2f3ac:	ldr	r3, [r3, #4]
   2f3b0:	ldr	r2, [r3, #2944]	; 0xb80
   2f3b4:	ldr	r3, [fp, #-16]
   2f3b8:	ldr	r3, [r3]
   2f3bc:	cmp	r2, r3
   2f3c0:	beq	2f3dc <flatcc_builder_get_emit_context@@Base+0x288>
   2f3c4:	ldr	r3, [fp, #-16]
   2f3c8:	ldr	r3, [r3, #4]
   2f3cc:	ldr	r2, [r3, #2944]	; 0xb80
   2f3d0:	ldr	r3, [fp, #-16]
   2f3d4:	str	r2, [r3, #4]
   2f3d8:	b	2f504 <flatcc_builder_get_emit_context@@Base+0x3b0>
   2f3dc:	movw	r0, #2956	; 0xb8c
   2f3e0:	bl	12950 <malloc@plt>
   2f3e4:	mov	r3, r0
   2f3e8:	str	r3, [fp, #-8]
   2f3ec:	ldr	r3, [fp, #-8]
   2f3f0:	cmp	r3, #0
   2f3f4:	bne	2f400 <flatcc_builder_get_emit_context@@Base+0x2ac>
   2f3f8:	mvn	r3, #0
   2f3fc:	b	2f548 <flatcc_builder_get_emit_context@@Base+0x3f4>
   2f400:	ldr	r3, [fp, #-16]
   2f404:	ldr	r3, [r3, #28]
   2f408:	add	r2, r3, #2944	; 0xb80
   2f40c:	ldr	r3, [fp, #-16]
   2f410:	str	r2, [r3, #28]
   2f414:	ldr	r3, [fp, #-16]
   2f418:	ldr	r3, [r3, #4]
   2f41c:	cmp	r3, #0
   2f420:	beq	2f474 <flatcc_builder_get_emit_context@@Base+0x320>
   2f424:	ldr	r3, [fp, #-16]
   2f428:	ldr	r2, [r3, #4]
   2f42c:	ldr	r3, [fp, #-8]
   2f430:	str	r2, [r3, #2948]	; 0xb84
   2f434:	ldr	r3, [fp, #-16]
   2f438:	ldr	r2, [r3]
   2f43c:	ldr	r3, [fp, #-8]
   2f440:	str	r2, [r3, #2944]	; 0xb80
   2f444:	ldr	r3, [fp, #-16]
   2f448:	ldr	r3, [r3]
   2f44c:	ldr	r2, [fp, #-8]
   2f450:	str	r2, [r3, #2948]	; 0xb84
   2f454:	ldr	r3, [fp, #-16]
   2f458:	ldr	r3, [r3, #4]
   2f45c:	ldr	r2, [fp, #-8]
   2f460:	str	r2, [r3, #2944]	; 0xb80
   2f464:	ldr	r3, [fp, #-16]
   2f468:	ldr	r2, [fp, #-8]
   2f46c:	str	r2, [r3, #4]
   2f470:	b	2f504 <flatcc_builder_get_emit_context@@Base+0x3b0>
   2f474:	ldr	r3, [fp, #-16]
   2f478:	ldr	r2, [fp, #-8]
   2f47c:	str	r2, [r3]
   2f480:	ldr	r3, [fp, #-16]
   2f484:	ldr	r2, [fp, #-8]
   2f488:	str	r2, [r3, #4]
   2f48c:	ldr	r3, [fp, #-8]
   2f490:	ldr	r2, [fp, #-8]
   2f494:	str	r2, [r3, #2944]	; 0xb80
   2f498:	ldr	r3, [fp, #-8]
   2f49c:	ldr	r2, [fp, #-8]
   2f4a0:	str	r2, [r3, #2948]	; 0xb84
   2f4a4:	ldr	r3, [fp, #-16]
   2f4a8:	ldr	r3, [r3]
   2f4ac:	add	r2, r3, #1472	; 0x5c0
   2f4b0:	ldr	r3, [fp, #-16]
   2f4b4:	str	r2, [r3, #8]
   2f4b8:	ldr	r3, [fp, #-16]
   2f4bc:	ldr	r2, [r3, #8]
   2f4c0:	ldr	r3, [fp, #-16]
   2f4c4:	str	r2, [r3, #16]
   2f4c8:	ldr	r3, [fp, #-16]
   2f4cc:	mov	r2, #1472	; 0x5c0
   2f4d0:	str	r2, [r3, #12]
   2f4d4:	ldr	r3, [fp, #-16]
   2f4d8:	ldr	r3, [r3, #12]
   2f4dc:	rsb	r2, r3, #2944	; 0xb80
   2f4e0:	ldr	r3, [fp, #-16]
   2f4e4:	str	r2, [r3, #20]
   2f4e8:	ldr	r3, [fp, #-16]
   2f4ec:	ldr	r3, [r3, #12]
   2f4f0:	rsb	r2, r3, #0
   2f4f4:	ldr	r3, [fp, #-8]
   2f4f8:	str	r2, [r3, #2952]	; 0xb88
   2f4fc:	mov	r3, #0
   2f500:	b	2f548 <flatcc_builder_get_emit_context@@Base+0x3f4>
   2f504:	ldr	r3, [fp, #-16]
   2f508:	ldr	r3, [r3, #4]
   2f50c:	mov	r2, r3
   2f510:	ldr	r3, [fp, #-16]
   2f514:	str	r2, [r3, #16]
   2f518:	ldr	r3, [fp, #-16]
   2f51c:	mov	r2, #2944	; 0xb80
   2f520:	str	r2, [r3, #20]
   2f524:	ldr	r3, [fp, #-16]
   2f528:	ldr	r3, [r3, #4]
   2f52c:	ldr	r3, [r3, #2948]	; 0xb84
   2f530:	ldr	r2, [r3, #2952]	; 0xb88
   2f534:	ldr	r3, [fp, #-16]
   2f538:	ldr	r3, [r3, #4]
   2f53c:	add	r2, r2, #2944	; 0xb80
   2f540:	str	r2, [r3, #2952]	; 0xb88
   2f544:	mov	r3, #0
   2f548:	mov	r0, r3
   2f54c:	sub	sp, fp, #4
   2f550:	ldr	fp, [sp]
   2f554:	add	sp, sp, #4
   2f558:	pop	{pc}		; (ldr pc, [sp], #4)
   2f55c:	str	fp, [sp, #-8]!
   2f560:	str	lr, [sp, #4]
   2f564:	add	fp, sp, #4
   2f568:	sub	sp, sp, #24
   2f56c:	str	r0, [fp, #-16]
   2f570:	str	r1, [fp, #-20]	; 0xffffffec
   2f574:	str	r2, [fp, #-24]	; 0xffffffe8
   2f578:	ldr	r2, [fp, #-20]	; 0xffffffec
   2f57c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f580:	add	r3, r2, r3
   2f584:	str	r3, [fp, #-20]	; 0xffffffec
   2f588:	b	2f64c <flatcc_builder_get_emit_context@@Base+0x4f8>
   2f58c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f590:	str	r3, [fp, #-8]
   2f594:	ldr	r3, [fp, #-16]
   2f598:	ldr	r3, [r3, #12]
   2f59c:	ldr	r2, [fp, #-8]
   2f5a0:	cmp	r2, r3
   2f5a4:	bls	2f5dc <flatcc_builder_get_emit_context@@Base+0x488>
   2f5a8:	ldr	r3, [fp, #-16]
   2f5ac:	ldr	r3, [r3, #12]
   2f5b0:	str	r3, [fp, #-8]
   2f5b4:	ldr	r3, [fp, #-8]
   2f5b8:	cmp	r3, #0
   2f5bc:	bne	2f5dc <flatcc_builder_get_emit_context@@Base+0x488>
   2f5c0:	ldr	r0, [fp, #-16]
   2f5c4:	bl	2f17c <flatcc_builder_get_emit_context@@Base+0x28>
   2f5c8:	mov	r3, r0
   2f5cc:	cmp	r3, #0
   2f5d0:	beq	2f64c <flatcc_builder_get_emit_context@@Base+0x4f8>
   2f5d4:	mvn	r3, #0
   2f5d8:	b	2f65c <flatcc_builder_get_emit_context@@Base+0x508>
   2f5dc:	ldr	r3, [fp, #-16]
   2f5e0:	ldr	r2, [r3, #8]
   2f5e4:	ldr	r3, [fp, #-8]
   2f5e8:	rsb	r3, r3, #0
   2f5ec:	add	r2, r2, r3
   2f5f0:	ldr	r3, [fp, #-16]
   2f5f4:	str	r2, [r3, #8]
   2f5f8:	ldr	r3, [fp, #-16]
   2f5fc:	ldr	r2, [r3, #12]
   2f600:	ldr	r3, [fp, #-8]
   2f604:	sub	r2, r2, r3
   2f608:	ldr	r3, [fp, #-16]
   2f60c:	str	r2, [r3, #12]
   2f610:	ldr	r3, [fp, #-8]
   2f614:	rsb	r3, r3, #0
   2f618:	ldr	r2, [fp, #-20]	; 0xffffffec
   2f61c:	add	r3, r2, r3
   2f620:	str	r3, [fp, #-20]	; 0xffffffec
   2f624:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2f628:	ldr	r3, [fp, #-8]
   2f62c:	sub	r3, r2, r3
   2f630:	str	r3, [fp, #-24]	; 0xffffffe8
   2f634:	ldr	r3, [fp, #-16]
   2f638:	ldr	r3, [r3, #8]
   2f63c:	ldr	r2, [fp, #-8]
   2f640:	ldr	r1, [fp, #-20]	; 0xffffffec
   2f644:	mov	r0, r3
   2f648:	bl	12908 <memcpy@plt>
   2f64c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f650:	cmp	r3, #0
   2f654:	bne	2f58c <flatcc_builder_get_emit_context@@Base+0x438>
   2f658:	mov	r3, #0
   2f65c:	mov	r0, r3
   2f660:	sub	sp, fp, #4
   2f664:	ldr	fp, [sp]
   2f668:	add	sp, sp, #4
   2f66c:	pop	{pc}		; (ldr pc, [sp], #4)
   2f670:	str	fp, [sp, #-8]!
   2f674:	str	lr, [sp, #4]
   2f678:	add	fp, sp, #4
   2f67c:	sub	sp, sp, #24
   2f680:	str	r0, [fp, #-16]
   2f684:	str	r1, [fp, #-20]	; 0xffffffec
   2f688:	str	r2, [fp, #-24]	; 0xffffffe8
   2f68c:	b	2f748 <flatcc_builder_get_emit_context@@Base+0x5f4>
   2f690:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f694:	str	r3, [fp, #-8]
   2f698:	ldr	r3, [fp, #-16]
   2f69c:	ldr	r3, [r3, #20]
   2f6a0:	ldr	r2, [fp, #-8]
   2f6a4:	cmp	r2, r3
   2f6a8:	bls	2f6e0 <flatcc_builder_get_emit_context@@Base+0x58c>
   2f6ac:	ldr	r3, [fp, #-16]
   2f6b0:	ldr	r3, [r3, #20]
   2f6b4:	str	r3, [fp, #-8]
   2f6b8:	ldr	r3, [fp, #-8]
   2f6bc:	cmp	r3, #0
   2f6c0:	bne	2f6e0 <flatcc_builder_get_emit_context@@Base+0x58c>
   2f6c4:	ldr	r0, [fp, #-16]
   2f6c8:	bl	2f37c <flatcc_builder_get_emit_context@@Base+0x228>
   2f6cc:	mov	r3, r0
   2f6d0:	cmp	r3, #0
   2f6d4:	beq	2f748 <flatcc_builder_get_emit_context@@Base+0x5f4>
   2f6d8:	mvn	r3, #0
   2f6dc:	b	2f758 <flatcc_builder_get_emit_context@@Base+0x604>
   2f6e0:	ldr	r3, [fp, #-16]
   2f6e4:	ldr	r3, [r3, #16]
   2f6e8:	ldr	r2, [fp, #-8]
   2f6ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   2f6f0:	mov	r0, r3
   2f6f4:	bl	12908 <memcpy@plt>
   2f6f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2f6fc:	ldr	r3, [fp, #-8]
   2f700:	sub	r3, r2, r3
   2f704:	str	r3, [fp, #-24]	; 0xffffffe8
   2f708:	ldr	r2, [fp, #-20]	; 0xffffffec
   2f70c:	ldr	r3, [fp, #-8]
   2f710:	add	r3, r2, r3
   2f714:	str	r3, [fp, #-20]	; 0xffffffec
   2f718:	ldr	r3, [fp, #-16]
   2f71c:	ldr	r2, [r3, #16]
   2f720:	ldr	r3, [fp, #-8]
   2f724:	add	r2, r2, r3
   2f728:	ldr	r3, [fp, #-16]
   2f72c:	str	r2, [r3, #16]
   2f730:	ldr	r3, [fp, #-16]
   2f734:	ldr	r2, [r3, #20]
   2f738:	ldr	r3, [fp, #-8]
   2f73c:	sub	r2, r2, r3
   2f740:	ldr	r3, [fp, #-16]
   2f744:	str	r2, [r3, #20]
   2f748:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f74c:	cmp	r3, #0
   2f750:	bne	2f690 <flatcc_builder_get_emit_context@@Base+0x53c>
   2f754:	mov	r3, #0
   2f758:	mov	r0, r3
   2f75c:	sub	sp, fp, #4
   2f760:	ldr	fp, [sp]
   2f764:	add	sp, sp, #4
   2f768:	pop	{pc}		; (ldr pc, [sp], #4)

0002f76c <flatcc_emitter_recycle_page@@Base>:
   2f76c:	push	{fp}		; (str fp, [sp, #-4]!)
   2f770:	add	fp, sp, #0
   2f774:	sub	sp, sp, #12
   2f778:	str	r0, [fp, #-8]
   2f77c:	str	r1, [fp, #-12]
   2f780:	ldr	r3, [fp, #-8]
   2f784:	ldr	r3, [r3]
   2f788:	ldr	r2, [fp, #-12]
   2f78c:	cmp	r2, r3
   2f790:	beq	2f7a8 <flatcc_emitter_recycle_page@@Base+0x3c>
   2f794:	ldr	r3, [fp, #-8]
   2f798:	ldr	r3, [r3, #4]
   2f79c:	ldr	r2, [fp, #-12]
   2f7a0:	cmp	r2, r3
   2f7a4:	bne	2f7b0 <flatcc_emitter_recycle_page@@Base+0x44>
   2f7a8:	mvn	r3, #0
   2f7ac:	b	2f820 <flatcc_emitter_recycle_page@@Base+0xb4>
   2f7b0:	ldr	r3, [fp, #-12]
   2f7b4:	ldr	r3, [r3, #2944]	; 0xb80
   2f7b8:	ldr	r2, [fp, #-12]
   2f7bc:	ldr	r2, [r2, #2948]	; 0xb84
   2f7c0:	str	r2, [r3, #2948]	; 0xb84
   2f7c4:	ldr	r3, [fp, #-12]
   2f7c8:	ldr	r3, [r3, #2948]	; 0xb84
   2f7cc:	ldr	r2, [fp, #-12]
   2f7d0:	ldr	r2, [r2, #2944]	; 0xb80
   2f7d4:	str	r2, [r3, #2944]	; 0xb80
   2f7d8:	ldr	r3, [fp, #-8]
   2f7dc:	ldr	r3, [r3]
   2f7e0:	ldr	r2, [r3, #2948]	; 0xb84
   2f7e4:	ldr	r3, [fp, #-12]
   2f7e8:	str	r2, [r3, #2948]	; 0xb84
   2f7ec:	ldr	r3, [fp, #-8]
   2f7f0:	ldr	r2, [r3]
   2f7f4:	ldr	r3, [fp, #-12]
   2f7f8:	str	r2, [r3, #2944]	; 0xb80
   2f7fc:	ldr	r3, [fp, #-12]
   2f800:	ldr	r3, [r3, #2948]	; 0xb84
   2f804:	ldr	r2, [fp, #-12]
   2f808:	str	r2, [r3, #2944]	; 0xb80
   2f80c:	ldr	r3, [fp, #-12]
   2f810:	ldr	r3, [r3, #2944]	; 0xb80
   2f814:	ldr	r2, [fp, #-12]
   2f818:	str	r2, [r3, #2948]	; 0xb84
   2f81c:	mov	r3, #0
   2f820:	mov	r0, r3
   2f824:	add	sp, fp, #0
   2f828:	pop	{fp}		; (ldr fp, [sp], #4)
   2f82c:	bx	lr

0002f830 <flatcc_emitter_reset@@Base>:
   2f830:	str	fp, [sp, #-8]!
   2f834:	str	lr, [sp, #4]
   2f838:	add	fp, sp, #4
   2f83c:	sub	sp, sp, #16
   2f840:	str	r0, [fp, #-16]
   2f844:	ldr	r3, [fp, #-16]
   2f848:	ldr	r3, [r3]
   2f84c:	str	r3, [fp, #-8]
   2f850:	ldr	r3, [fp, #-16]
   2f854:	ldr	r3, [r3]
   2f858:	cmp	r3, #0
   2f85c:	beq	2f9b8 <flatcc_emitter_reset@@Base+0x188>
   2f860:	ldr	r3, [fp, #-16]
   2f864:	ldr	r2, [r3]
   2f868:	ldr	r3, [fp, #-16]
   2f86c:	str	r2, [r3, #4]
   2f870:	ldr	r3, [fp, #-16]
   2f874:	ldr	r3, [r3]
   2f878:	add	r2, r3, #1472	; 0x5c0
   2f87c:	ldr	r3, [fp, #-16]
   2f880:	str	r2, [r3, #8]
   2f884:	ldr	r3, [fp, #-16]
   2f888:	ldr	r2, [r3, #8]
   2f88c:	ldr	r3, [fp, #-16]
   2f890:	str	r2, [r3, #16]
   2f894:	ldr	r3, [fp, #-16]
   2f898:	mov	r2, #1472	; 0x5c0
   2f89c:	str	r2, [r3, #12]
   2f8a0:	ldr	r3, [fp, #-16]
   2f8a4:	mov	r2, #1472	; 0x5c0
   2f8a8:	str	r2, [r3, #20]
   2f8ac:	ldr	r3, [fp, #-16]
   2f8b0:	ldr	r3, [r3, #12]
   2f8b4:	mov	r2, r3
   2f8b8:	ldr	r3, [fp, #-16]
   2f8bc:	ldr	r3, [r3]
   2f8c0:	rsb	r2, r2, #0
   2f8c4:	str	r2, [r3, #2952]	; 0xb88
   2f8c8:	ldr	r3, [fp, #-16]
   2f8cc:	ldr	r3, [r3, #32]
   2f8d0:	cmp	r3, #0
   2f8d4:	bne	2f8e8 <flatcc_emitter_reset@@Base+0xb8>
   2f8d8:	ldr	r3, [fp, #-16]
   2f8dc:	ldr	r2, [r3, #24]
   2f8e0:	ldr	r3, [fp, #-16]
   2f8e4:	str	r2, [r3, #32]
   2f8e8:	ldr	r3, [fp, #-16]
   2f8ec:	ldr	r2, [r3, #32]
   2f8f0:	mov	r3, r2
   2f8f4:	lsl	r3, r3, #1
   2f8f8:	add	r3, r3, r2
   2f8fc:	lsr	r2, r3, #2
   2f900:	ldr	r3, [fp, #-16]
   2f904:	ldr	r3, [r3, #24]
   2f908:	lsr	r3, r3, #2
   2f90c:	add	r2, r2, r3
   2f910:	ldr	r3, [fp, #-16]
   2f914:	str	r2, [r3, #32]
   2f918:	ldr	r3, [fp, #-16]
   2f91c:	mov	r2, #0
   2f920:	str	r2, [r3, #24]
   2f924:	b	2f97c <flatcc_emitter_reset@@Base+0x14c>
   2f928:	ldr	r3, [fp, #-16]
   2f92c:	ldr	r3, [r3, #4]
   2f930:	ldr	r3, [r3, #2944]	; 0xb80
   2f934:	str	r3, [fp, #-8]
   2f938:	ldr	r3, [fp, #-16]
   2f93c:	ldr	r3, [r3, #4]
   2f940:	ldr	r2, [fp, #-8]
   2f944:	ldr	r2, [r2, #2944]	; 0xb80
   2f948:	str	r2, [r3, #2944]	; 0xb80
   2f94c:	ldr	r3, [fp, #-8]
   2f950:	ldr	r3, [r3, #2944]	; 0xb80
   2f954:	ldr	r2, [fp, #-16]
   2f958:	ldr	r2, [r2, #4]
   2f95c:	str	r2, [r3, #2948]	; 0xb84
   2f960:	ldr	r0, [fp, #-8]
   2f964:	bl	128fc <free@plt>
   2f968:	ldr	r3, [fp, #-16]
   2f96c:	ldr	r3, [r3, #28]
   2f970:	sub	r2, r3, #2944	; 0xb80
   2f974:	ldr	r3, [fp, #-16]
   2f978:	str	r2, [r3, #28]
   2f97c:	ldr	r3, [fp, #-16]
   2f980:	ldr	r3, [r3, #32]
   2f984:	lsl	r2, r3, #1
   2f988:	ldr	r3, [fp, #-16]
   2f98c:	ldr	r3, [r3, #28]
   2f990:	cmp	r2, r3
   2f994:	bcs	2f9bc <flatcc_emitter_reset@@Base+0x18c>
   2f998:	ldr	r3, [fp, #-16]
   2f99c:	ldr	r3, [r3, #4]
   2f9a0:	ldr	r2, [r3, #2944]	; 0xb80
   2f9a4:	ldr	r3, [fp, #-16]
   2f9a8:	ldr	r3, [r3]
   2f9ac:	cmp	r2, r3
   2f9b0:	bne	2f928 <flatcc_emitter_reset@@Base+0xf8>
   2f9b4:	b	2f9bc <flatcc_emitter_reset@@Base+0x18c>
   2f9b8:	nop	{0}
   2f9bc:	sub	sp, fp, #4
   2f9c0:	ldr	fp, [sp]
   2f9c4:	add	sp, sp, #4
   2f9c8:	pop	{pc}		; (ldr pc, [sp], #4)

0002f9cc <flatcc_emitter_clear@@Base>:
   2f9cc:	str	fp, [sp, #-8]!
   2f9d0:	str	lr, [sp, #4]
   2f9d4:	add	fp, sp, #4
   2f9d8:	sub	sp, sp, #16
   2f9dc:	str	r0, [fp, #-16]
   2f9e0:	ldr	r3, [fp, #-16]
   2f9e4:	ldr	r3, [r3]
   2f9e8:	str	r3, [fp, #-8]
   2f9ec:	ldr	r3, [fp, #-8]
   2f9f0:	cmp	r3, #0
   2f9f4:	beq	2fa54 <flatcc_emitter_clear@@Base+0x88>
   2f9f8:	ldr	r3, [fp, #-8]
   2f9fc:	ldr	r3, [r3, #2948]	; 0xb84
   2fa00:	mov	r2, #0
   2fa04:	str	r2, [r3, #2944]	; 0xb80
   2fa08:	b	2fa28 <flatcc_emitter_clear@@Base+0x5c>
   2fa0c:	ldr	r3, [fp, #-8]
   2fa10:	ldr	r3, [r3, #2944]	; 0xb80
   2fa14:	str	r3, [fp, #-8]
   2fa18:	ldr	r3, [fp, #-8]
   2fa1c:	ldr	r3, [r3, #2948]	; 0xb84
   2fa20:	mov	r0, r3
   2fa24:	bl	128fc <free@plt>
   2fa28:	ldr	r3, [fp, #-8]
   2fa2c:	ldr	r3, [r3, #2944]	; 0xb80
   2fa30:	cmp	r3, #0
   2fa34:	bne	2fa0c <flatcc_emitter_clear@@Base+0x40>
   2fa38:	ldr	r0, [fp, #-8]
   2fa3c:	bl	128fc <free@plt>
   2fa40:	mov	r2, #36	; 0x24
   2fa44:	mov	r1, #0
   2fa48:	ldr	r0, [fp, #-16]
   2fa4c:	bl	12998 <memset@plt>
   2fa50:	b	2fa58 <flatcc_emitter_clear@@Base+0x8c>
   2fa54:	nop	{0}
   2fa58:	sub	sp, fp, #4
   2fa5c:	ldr	fp, [sp]
   2fa60:	add	sp, sp, #4
   2fa64:	pop	{pc}		; (ldr pc, [sp], #4)

0002fa68 <flatcc_emitter@@Base>:
   2fa68:	str	fp, [sp, #-8]!
   2fa6c:	str	lr, [sp, #4]
   2fa70:	add	fp, sp, #4
   2fa74:	sub	sp, sp, #24
   2fa78:	str	r0, [fp, #-16]
   2fa7c:	str	r1, [fp, #-20]	; 0xffffffec
   2fa80:	str	r2, [fp, #-24]	; 0xffffffe8
   2fa84:	str	r3, [fp, #-28]	; 0xffffffe4
   2fa88:	ldr	r3, [fp, #-16]
   2fa8c:	str	r3, [fp, #-12]
   2fa90:	ldr	r3, [fp, #-12]
   2fa94:	ldr	r2, [r3, #24]
   2fa98:	ldr	r3, [fp, #4]
   2fa9c:	add	r2, r2, r3
   2faa0:	ldr	r3, [fp, #-12]
   2faa4:	str	r2, [r3, #24]
   2faa8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2faac:	cmp	r3, #0
   2fab0:	bge	2fb78 <flatcc_emitter@@Base+0x110>
   2fab4:	ldr	r3, [fp, #-12]
   2fab8:	ldr	r3, [r3, #12]
   2fabc:	ldr	r2, [fp, #4]
   2fac0:	cmp	r2, r3
   2fac4:	bhi	2fb0c <flatcc_emitter@@Base+0xa4>
   2fac8:	ldr	r3, [fp, #-12]
   2facc:	ldr	r2, [r3, #8]
   2fad0:	ldr	r3, [fp, #4]
   2fad4:	rsb	r3, r3, #0
   2fad8:	add	r2, r2, r3
   2fadc:	ldr	r3, [fp, #-12]
   2fae0:	str	r2, [r3, #8]
   2fae4:	ldr	r3, [fp, #-12]
   2fae8:	ldr	r2, [r3, #12]
   2faec:	ldr	r3, [fp, #4]
   2faf0:	sub	r2, r2, r3
   2faf4:	ldr	r3, [fp, #-12]
   2faf8:	str	r2, [r3, #12]
   2fafc:	ldr	r3, [fp, #-12]
   2fb00:	ldr	r3, [r3, #8]
   2fb04:	str	r3, [fp, #-8]
   2fb08:	b	2fc24 <flatcc_emitter@@Base+0x1bc>
   2fb0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fb10:	lsl	r3, r3, #3
   2fb14:	ldr	r2, [fp, #-20]	; 0xffffffec
   2fb18:	add	r3, r2, r3
   2fb1c:	str	r3, [fp, #-20]	; 0xffffffec
   2fb20:	b	2fb60 <flatcc_emitter@@Base+0xf8>
   2fb24:	ldr	r3, [fp, #-20]	; 0xffffffec
   2fb28:	sub	r3, r3, #8
   2fb2c:	str	r3, [fp, #-20]	; 0xffffffec
   2fb30:	ldr	r3, [fp, #-20]	; 0xffffffec
   2fb34:	ldr	r1, [r3]
   2fb38:	ldr	r3, [fp, #-20]	; 0xffffffec
   2fb3c:	ldr	r3, [r3, #4]
   2fb40:	mov	r2, r3
   2fb44:	ldr	r0, [fp, #-12]
   2fb48:	bl	2f55c <flatcc_builder_get_emit_context@@Base+0x408>
   2fb4c:	mov	r3, r0
   2fb50:	cmp	r3, #0
   2fb54:	beq	2fb60 <flatcc_emitter@@Base+0xf8>
   2fb58:	mvn	r3, #0
   2fb5c:	b	2fc7c <flatcc_emitter@@Base+0x214>
   2fb60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fb64:	sub	r2, r3, #1
   2fb68:	str	r2, [fp, #-24]	; 0xffffffe8
   2fb6c:	cmp	r3, #0
   2fb70:	bne	2fb24 <flatcc_emitter@@Base+0xbc>
   2fb74:	b	2fc1c <flatcc_emitter@@Base+0x1b4>
   2fb78:	ldr	r3, [fp, #-12]
   2fb7c:	ldr	r3, [r3, #20]
   2fb80:	ldr	r2, [fp, #4]
   2fb84:	cmp	r2, r3
   2fb88:	bhi	2fc08 <flatcc_emitter@@Base+0x1a0>
   2fb8c:	ldr	r3, [fp, #-12]
   2fb90:	ldr	r3, [r3, #16]
   2fb94:	str	r3, [fp, #-8]
   2fb98:	ldr	r3, [fp, #-12]
   2fb9c:	ldr	r2, [r3, #16]
   2fba0:	ldr	r3, [fp, #4]
   2fba4:	add	r2, r2, r3
   2fba8:	ldr	r3, [fp, #-12]
   2fbac:	str	r2, [r3, #16]
   2fbb0:	ldr	r3, [fp, #-12]
   2fbb4:	ldr	r2, [r3, #20]
   2fbb8:	ldr	r3, [fp, #4]
   2fbbc:	sub	r2, r2, r3
   2fbc0:	ldr	r3, [fp, #-12]
   2fbc4:	str	r2, [r3, #20]
   2fbc8:	b	2fc24 <flatcc_emitter@@Base+0x1bc>
   2fbcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   2fbd0:	ldr	r1, [r3]
   2fbd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   2fbd8:	ldr	r3, [r3, #4]
   2fbdc:	mov	r2, r3
   2fbe0:	ldr	r0, [fp, #-12]
   2fbe4:	bl	2f670 <flatcc_builder_get_emit_context@@Base+0x51c>
   2fbe8:	mov	r3, r0
   2fbec:	cmp	r3, #0
   2fbf0:	beq	2fbfc <flatcc_emitter@@Base+0x194>
   2fbf4:	mvn	r3, #0
   2fbf8:	b	2fc7c <flatcc_emitter@@Base+0x214>
   2fbfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   2fc00:	add	r3, r3, #8
   2fc04:	str	r3, [fp, #-20]	; 0xffffffec
   2fc08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fc0c:	sub	r2, r3, #1
   2fc10:	str	r2, [fp, #-24]	; 0xffffffe8
   2fc14:	cmp	r3, #0
   2fc18:	bne	2fbcc <flatcc_emitter@@Base+0x164>
   2fc1c:	mov	r3, #0
   2fc20:	b	2fc7c <flatcc_emitter@@Base+0x214>
   2fc24:	b	2fc64 <flatcc_emitter@@Base+0x1fc>
   2fc28:	ldr	r3, [fp, #-20]	; 0xffffffec
   2fc2c:	ldr	r1, [r3]
   2fc30:	ldr	r3, [fp, #-20]	; 0xffffffec
   2fc34:	ldr	r3, [r3, #4]
   2fc38:	mov	r2, r3
   2fc3c:	ldr	r0, [fp, #-8]
   2fc40:	bl	12908 <memcpy@plt>
   2fc44:	ldr	r3, [fp, #-20]	; 0xffffffec
   2fc48:	ldr	r3, [r3, #4]
   2fc4c:	ldr	r2, [fp, #-8]
   2fc50:	add	r3, r2, r3
   2fc54:	str	r3, [fp, #-8]
   2fc58:	ldr	r3, [fp, #-20]	; 0xffffffec
   2fc5c:	add	r3, r3, #8
   2fc60:	str	r3, [fp, #-20]	; 0xffffffec
   2fc64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fc68:	sub	r2, r3, #1
   2fc6c:	str	r2, [fp, #-24]	; 0xffffffe8
   2fc70:	cmp	r3, #0
   2fc74:	bne	2fc28 <flatcc_emitter@@Base+0x1c0>
   2fc78:	mov	r3, #0
   2fc7c:	mov	r0, r3
   2fc80:	sub	sp, fp, #4
   2fc84:	ldr	fp, [sp]
   2fc88:	add	sp, sp, #4
   2fc8c:	pop	{pc}		; (ldr pc, [sp], #4)

0002fc90 <flatcc_emitter_copy_buffer@@Base>:
   2fc90:	str	fp, [sp, #-8]!
   2fc94:	str	lr, [sp, #4]
   2fc98:	add	fp, sp, #4
   2fc9c:	sub	sp, sp, #24
   2fca0:	str	r0, [fp, #-16]
   2fca4:	str	r1, [fp, #-20]	; 0xffffffec
   2fca8:	str	r2, [fp, #-24]	; 0xffffffe8
   2fcac:	ldr	r3, [fp, #-16]
   2fcb0:	ldr	r3, [r3, #24]
   2fcb4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2fcb8:	cmp	r2, r3
   2fcbc:	bcs	2fcc8 <flatcc_emitter_copy_buffer@@Base+0x38>
   2fcc0:	mov	r3, #0
   2fcc4:	b	2fdc8 <flatcc_emitter_copy_buffer@@Base+0x138>
   2fcc8:	ldr	r3, [fp, #-16]
   2fccc:	ldr	r3, [r3]
   2fcd0:	cmp	r3, #0
   2fcd4:	bne	2fce0 <flatcc_emitter_copy_buffer@@Base+0x50>
   2fcd8:	mov	r3, #0
   2fcdc:	b	2fdc8 <flatcc_emitter_copy_buffer@@Base+0x138>
   2fce0:	ldr	r3, [fp, #-16]
   2fce4:	ldr	r2, [r3]
   2fce8:	ldr	r3, [fp, #-16]
   2fcec:	ldr	r3, [r3, #4]
   2fcf0:	cmp	r2, r3
   2fcf4:	bne	2fd1c <flatcc_emitter_copy_buffer@@Base+0x8c>
   2fcf8:	ldr	r3, [fp, #-16]
   2fcfc:	ldr	r1, [r3, #8]
   2fd00:	ldr	r3, [fp, #-16]
   2fd04:	ldr	r3, [r3, #24]
   2fd08:	mov	r2, r3
   2fd0c:	ldr	r0, [fp, #-20]	; 0xffffffec
   2fd10:	bl	12908 <memcpy@plt>
   2fd14:	ldr	r3, [fp, #-20]	; 0xffffffec
   2fd18:	b	2fdc8 <flatcc_emitter_copy_buffer@@Base+0x138>
   2fd1c:	ldr	r3, [fp, #-16]
   2fd20:	ldr	r3, [r3, #12]
   2fd24:	rsb	r3, r3, #2944	; 0xb80
   2fd28:	str	r3, [fp, #-12]
   2fd2c:	ldr	r3, [fp, #-16]
   2fd30:	ldr	r3, [r3, #8]
   2fd34:	ldr	r2, [fp, #-12]
   2fd38:	mov	r1, r3
   2fd3c:	ldr	r0, [fp, #-20]	; 0xffffffec
   2fd40:	bl	12908 <memcpy@plt>
   2fd44:	ldr	r2, [fp, #-20]	; 0xffffffec
   2fd48:	ldr	r3, [fp, #-12]
   2fd4c:	add	r3, r2, r3
   2fd50:	str	r3, [fp, #-20]	; 0xffffffec
   2fd54:	ldr	r3, [fp, #-16]
   2fd58:	ldr	r3, [r3]
   2fd5c:	ldr	r3, [r3, #2944]	; 0xb80
   2fd60:	str	r3, [fp, #-8]
   2fd64:	b	2fd94 <flatcc_emitter_copy_buffer@@Base+0x104>
   2fd68:	ldr	r3, [fp, #-8]
   2fd6c:	mov	r2, #2944	; 0xb80
   2fd70:	mov	r1, r3
   2fd74:	ldr	r0, [fp, #-20]	; 0xffffffec
   2fd78:	bl	12908 <memcpy@plt>
   2fd7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   2fd80:	add	r3, r3, #2944	; 0xb80
   2fd84:	str	r3, [fp, #-20]	; 0xffffffec
   2fd88:	ldr	r3, [fp, #-8]
   2fd8c:	ldr	r3, [r3, #2944]	; 0xb80
   2fd90:	str	r3, [fp, #-8]
   2fd94:	ldr	r3, [fp, #-16]
   2fd98:	ldr	r3, [r3, #4]
   2fd9c:	ldr	r2, [fp, #-8]
   2fda0:	cmp	r2, r3
   2fda4:	bne	2fd68 <flatcc_emitter_copy_buffer@@Base+0xd8>
   2fda8:	ldr	r1, [fp, #-8]
   2fdac:	ldr	r3, [fp, #-16]
   2fdb0:	ldr	r3, [r3, #20]
   2fdb4:	rsb	r3, r3, #2944	; 0xb80
   2fdb8:	mov	r2, r3
   2fdbc:	ldr	r0, [fp, #-20]	; 0xffffffec
   2fdc0:	bl	12908 <memcpy@plt>
   2fdc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   2fdc8:	mov	r0, r3
   2fdcc:	sub	sp, fp, #4
   2fdd0:	ldr	fp, [sp]
   2fdd4:	add	sp, sp, #4
   2fdd8:	pop	{pc}		; (ldr pc, [sp], #4)
   2fddc:	push	{fp}		; (str fp, [sp, #-4]!)
   2fde0:	add	fp, sp, #0
   2fde4:	sub	sp, sp, #12
   2fde8:	str	r0, [fp, #-8]
   2fdec:	ldr	r3, [fp, #-8]
   2fdf0:	mov	r0, r3
   2fdf4:	add	sp, fp, #0
   2fdf8:	pop	{fp}		; (ldr fp, [sp], #4)
   2fdfc:	bx	lr
   2fe00:	str	fp, [sp, #-8]!
   2fe04:	str	lr, [sp, #4]
   2fe08:	add	fp, sp, #4
   2fe0c:	sub	sp, sp, #8
   2fe10:	str	r0, [fp, #-8]
   2fe14:	ldr	r3, [fp, #-8]
   2fe18:	ldr	r3, [r3]
   2fe1c:	mov	r0, r3
   2fe20:	bl	2fddc <flatcc_emitter_copy_buffer@@Base+0x14c>
   2fe24:	mov	r3, r0
   2fe28:	mov	r0, r3
   2fe2c:	sub	sp, fp, #4
   2fe30:	ldr	fp, [sp]
   2fe34:	add	sp, sp, #4
   2fe38:	pop	{pc}		; (ldr pc, [sp], #4)
   2fe3c:	push	{fp}		; (str fp, [sp, #-4]!)
   2fe40:	add	fp, sp, #0
   2fe44:	sub	sp, sp, #12
   2fe48:	mov	r3, r0
   2fe4c:	strh	r3, [fp, #-6]
   2fe50:	ldrh	r3, [fp, #-6]
   2fe54:	mov	r0, r3
   2fe58:	add	sp, fp, #0
   2fe5c:	pop	{fp}		; (ldr fp, [sp], #4)
   2fe60:	bx	lr
   2fe64:	str	fp, [sp, #-8]!
   2fe68:	str	lr, [sp, #4]
   2fe6c:	add	fp, sp, #4
   2fe70:	sub	sp, sp, #8
   2fe74:	str	r0, [fp, #-8]
   2fe78:	ldr	r3, [fp, #-8]
   2fe7c:	ldrh	r3, [r3]
   2fe80:	mov	r0, r3
   2fe84:	bl	2fe3c <flatcc_emitter_copy_buffer@@Base+0x1ac>
   2fe88:	mov	r3, r0
   2fe8c:	mov	r0, r3
   2fe90:	sub	sp, fp, #4
   2fe94:	ldr	fp, [sp]
   2fe98:	add	sp, sp, #4
   2fe9c:	pop	{pc}		; (ldr pc, [sp], #4)
   2fea0:	push	{fp}		; (str fp, [sp, #-4]!)
   2fea4:	add	fp, sp, #0
   2fea8:	sub	sp, sp, #12
   2feac:	str	r0, [fp, #-8]
   2feb0:	ldr	r3, [fp, #-8]
   2feb4:	mov	r0, r3
   2feb8:	add	sp, fp, #0
   2febc:	pop	{fp}		; (ldr fp, [sp], #4)
   2fec0:	bx	lr
   2fec4:	push	{fp}		; (str fp, [sp, #-4]!)
   2fec8:	add	fp, sp, #0
   2fecc:	sub	sp, sp, #12
   2fed0:	str	r0, [fp, #-8]
   2fed4:	ldr	r3, [fp, #-8]
   2fed8:	mov	r0, r3
   2fedc:	add	sp, fp, #0
   2fee0:	pop	{fp}		; (ldr fp, [sp], #4)
   2fee4:	bx	lr
   2fee8:	str	fp, [sp, #-8]!
   2feec:	str	lr, [sp, #4]
   2fef0:	add	fp, sp, #4
   2fef4:	sub	sp, sp, #8
   2fef8:	str	r0, [fp, #-8]
   2fefc:	ldr	r3, [fp, #-8]
   2ff00:	ldr	r3, [r3]
   2ff04:	mov	r0, r3
   2ff08:	bl	2fea0 <flatcc_emitter_copy_buffer@@Base+0x210>
   2ff0c:	mov	r3, r0
   2ff10:	mov	r0, r3
   2ff14:	sub	sp, fp, #4
   2ff18:	ldr	fp, [sp]
   2ff1c:	add	sp, sp, #4
   2ff20:	pop	{pc}		; (ldr pc, [sp], #4)

0002ff24 <flatcc_verify_error_string@@Base>:
   2ff24:	push	{fp}		; (str fp, [sp, #-4]!)
   2ff28:	add	fp, sp, #0
   2ff2c:	sub	sp, sp, #12
   2ff30:	str	r0, [fp, #-8]
   2ff34:	ldr	r3, [fp, #-8]
   2ff38:	cmp	r3, #36	; 0x24
   2ff3c:	addls	pc, pc, r3, lsl #2
   2ff40:	b	30194 <flatcc_verify_error_string@@Base+0x270>
   2ff44:	b	2ffd8 <flatcc_verify_error_string@@Base+0xb4>
   2ff48:	b	2ffe4 <flatcc_verify_error_string@@Base+0xc0>
   2ff4c:	b	2fff0 <flatcc_verify_error_string@@Base+0xcc>
   2ff50:	b	2fffc <flatcc_verify_error_string@@Base+0xd8>
   2ff54:	b	30008 <flatcc_verify_error_string@@Base+0xe4>
   2ff58:	b	30014 <flatcc_verify_error_string@@Base+0xf0>
   2ff5c:	b	30020 <flatcc_verify_error_string@@Base+0xfc>
   2ff60:	b	3002c <flatcc_verify_error_string@@Base+0x108>
   2ff64:	b	30038 <flatcc_verify_error_string@@Base+0x114>
   2ff68:	b	30044 <flatcc_verify_error_string@@Base+0x120>
   2ff6c:	b	30050 <flatcc_verify_error_string@@Base+0x12c>
   2ff70:	b	3005c <flatcc_verify_error_string@@Base+0x138>
   2ff74:	b	30068 <flatcc_verify_error_string@@Base+0x144>
   2ff78:	b	30074 <flatcc_verify_error_string@@Base+0x150>
   2ff7c:	b	30080 <flatcc_verify_error_string@@Base+0x15c>
   2ff80:	b	3008c <flatcc_verify_error_string@@Base+0x168>
   2ff84:	b	30098 <flatcc_verify_error_string@@Base+0x174>
   2ff88:	b	300a4 <flatcc_verify_error_string@@Base+0x180>
   2ff8c:	b	300b0 <flatcc_verify_error_string@@Base+0x18c>
   2ff90:	b	300bc <flatcc_verify_error_string@@Base+0x198>
   2ff94:	b	300c8 <flatcc_verify_error_string@@Base+0x1a4>
   2ff98:	b	300d4 <flatcc_verify_error_string@@Base+0x1b0>
   2ff9c:	b	300e0 <flatcc_verify_error_string@@Base+0x1bc>
   2ffa0:	b	300ec <flatcc_verify_error_string@@Base+0x1c8>
   2ffa4:	b	300f8 <flatcc_verify_error_string@@Base+0x1d4>
   2ffa8:	b	30104 <flatcc_verify_error_string@@Base+0x1e0>
   2ffac:	b	30110 <flatcc_verify_error_string@@Base+0x1ec>
   2ffb0:	b	3011c <flatcc_verify_error_string@@Base+0x1f8>
   2ffb4:	b	30128 <flatcc_verify_error_string@@Base+0x204>
   2ffb8:	b	30134 <flatcc_verify_error_string@@Base+0x210>
   2ffbc:	b	30140 <flatcc_verify_error_string@@Base+0x21c>
   2ffc0:	b	3014c <flatcc_verify_error_string@@Base+0x228>
   2ffc4:	b	30158 <flatcc_verify_error_string@@Base+0x234>
   2ffc8:	b	30164 <flatcc_verify_error_string@@Base+0x240>
   2ffcc:	b	30170 <flatcc_verify_error_string@@Base+0x24c>
   2ffd0:	b	3017c <flatcc_verify_error_string@@Base+0x258>
   2ffd4:	b	30188 <flatcc_verify_error_string@@Base+0x264>
   2ffd8:	ldr	r3, [pc, #460]	; 301ac <flatcc_verify_error_string@@Base+0x288>
   2ffdc:	add	r3, pc, r3
   2ffe0:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   2ffe4:	ldr	r3, [pc, #452]	; 301b0 <flatcc_verify_error_string@@Base+0x28c>
   2ffe8:	add	r3, pc, r3
   2ffec:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   2fff0:	ldr	r3, [pc, #444]	; 301b4 <flatcc_verify_error_string@@Base+0x290>
   2fff4:	add	r3, pc, r3
   2fff8:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   2fffc:	ldr	r3, [pc, #436]	; 301b8 <flatcc_verify_error_string@@Base+0x294>
   30000:	add	r3, pc, r3
   30004:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30008:	ldr	r3, [pc, #428]	; 301bc <flatcc_verify_error_string@@Base+0x298>
   3000c:	add	r3, pc, r3
   30010:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30014:	ldr	r3, [pc, #420]	; 301c0 <flatcc_verify_error_string@@Base+0x29c>
   30018:	add	r3, pc, r3
   3001c:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30020:	ldr	r3, [pc, #412]	; 301c4 <flatcc_verify_error_string@@Base+0x2a0>
   30024:	add	r3, pc, r3
   30028:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   3002c:	ldr	r3, [pc, #404]	; 301c8 <flatcc_verify_error_string@@Base+0x2a4>
   30030:	add	r3, pc, r3
   30034:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30038:	ldr	r3, [pc, #396]	; 301cc <flatcc_verify_error_string@@Base+0x2a8>
   3003c:	add	r3, pc, r3
   30040:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30044:	ldr	r3, [pc, #388]	; 301d0 <flatcc_verify_error_string@@Base+0x2ac>
   30048:	add	r3, pc, r3
   3004c:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30050:	ldr	r3, [pc, #380]	; 301d4 <flatcc_verify_error_string@@Base+0x2b0>
   30054:	add	r3, pc, r3
   30058:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   3005c:	ldr	r3, [pc, #372]	; 301d8 <flatcc_verify_error_string@@Base+0x2b4>
   30060:	add	r3, pc, r3
   30064:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30068:	ldr	r3, [pc, #364]	; 301dc <flatcc_verify_error_string@@Base+0x2b8>
   3006c:	add	r3, pc, r3
   30070:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30074:	ldr	r3, [pc, #356]	; 301e0 <flatcc_verify_error_string@@Base+0x2bc>
   30078:	add	r3, pc, r3
   3007c:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30080:	ldr	r3, [pc, #348]	; 301e4 <flatcc_verify_error_string@@Base+0x2c0>
   30084:	add	r3, pc, r3
   30088:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   3008c:	ldr	r3, [pc, #340]	; 301e8 <flatcc_verify_error_string@@Base+0x2c4>
   30090:	add	r3, pc, r3
   30094:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30098:	ldr	r3, [pc, #332]	; 301ec <flatcc_verify_error_string@@Base+0x2c8>
   3009c:	add	r3, pc, r3
   300a0:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   300a4:	ldr	r3, [pc, #324]	; 301f0 <flatcc_verify_error_string@@Base+0x2cc>
   300a8:	add	r3, pc, r3
   300ac:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   300b0:	ldr	r3, [pc, #316]	; 301f4 <flatcc_verify_error_string@@Base+0x2d0>
   300b4:	add	r3, pc, r3
   300b8:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   300bc:	ldr	r3, [pc, #308]	; 301f8 <flatcc_verify_error_string@@Base+0x2d4>
   300c0:	add	r3, pc, r3
   300c4:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   300c8:	ldr	r3, [pc, #300]	; 301fc <flatcc_verify_error_string@@Base+0x2d8>
   300cc:	add	r3, pc, r3
   300d0:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   300d4:	ldr	r3, [pc, #292]	; 30200 <flatcc_verify_error_string@@Base+0x2dc>
   300d8:	add	r3, pc, r3
   300dc:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   300e0:	ldr	r3, [pc, #284]	; 30204 <flatcc_verify_error_string@@Base+0x2e0>
   300e4:	add	r3, pc, r3
   300e8:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   300ec:	ldr	r3, [pc, #276]	; 30208 <flatcc_verify_error_string@@Base+0x2e4>
   300f0:	add	r3, pc, r3
   300f4:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   300f8:	ldr	r3, [pc, #268]	; 3020c <flatcc_verify_error_string@@Base+0x2e8>
   300fc:	add	r3, pc, r3
   30100:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30104:	ldr	r3, [pc, #260]	; 30210 <flatcc_verify_error_string@@Base+0x2ec>
   30108:	add	r3, pc, r3
   3010c:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30110:	ldr	r3, [pc, #252]	; 30214 <flatcc_verify_error_string@@Base+0x2f0>
   30114:	add	r3, pc, r3
   30118:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   3011c:	ldr	r3, [pc, #244]	; 30218 <flatcc_verify_error_string@@Base+0x2f4>
   30120:	add	r3, pc, r3
   30124:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30128:	ldr	r3, [pc, #236]	; 3021c <flatcc_verify_error_string@@Base+0x2f8>
   3012c:	add	r3, pc, r3
   30130:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30134:	ldr	r3, [pc, #228]	; 30220 <flatcc_verify_error_string@@Base+0x2fc>
   30138:	add	r3, pc, r3
   3013c:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30140:	ldr	r3, [pc, #220]	; 30224 <flatcc_verify_error_string@@Base+0x300>
   30144:	add	r3, pc, r3
   30148:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   3014c:	ldr	r3, [pc, #212]	; 30228 <flatcc_verify_error_string@@Base+0x304>
   30150:	add	r3, pc, r3
   30154:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30158:	ldr	r3, [pc, #204]	; 3022c <flatcc_verify_error_string@@Base+0x308>
   3015c:	add	r3, pc, r3
   30160:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30164:	ldr	r3, [pc, #196]	; 30230 <flatcc_verify_error_string@@Base+0x30c>
   30168:	add	r3, pc, r3
   3016c:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30170:	ldr	r3, [pc, #188]	; 30234 <flatcc_verify_error_string@@Base+0x310>
   30174:	add	r3, pc, r3
   30178:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   3017c:	ldr	r3, [pc, #180]	; 30238 <flatcc_verify_error_string@@Base+0x314>
   30180:	add	r3, pc, r3
   30184:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30188:	ldr	r3, [pc, #172]	; 3023c <flatcc_verify_error_string@@Base+0x318>
   3018c:	add	r3, pc, r3
   30190:	b	3019c <flatcc_verify_error_string@@Base+0x278>
   30194:	ldr	r3, [pc, #164]	; 30240 <flatcc_verify_error_string@@Base+0x31c>
   30198:	add	r3, pc, r3
   3019c:	mov	r0, r3
   301a0:	add	sp, fp, #0
   301a4:	pop	{fp}		; (ldr fp, [sp], #4)
   301a8:	bx	lr
   301ac:	andeq	r6, r0, r4, lsr #30
   301b0:	andeq	r6, r0, ip, lsl pc
   301b4:	andeq	r6, r0, r8, lsr #30
   301b8:	andeq	r6, r0, r0, lsr pc
   301bc:	andeq	r6, r0, r0, asr #30
   301c0:	andeq	r6, r0, ip, asr #30
   301c4:	andeq	r6, r0, r4, ror #30
   301c8:	andeq	r6, r0, r8, ror pc
   301cc:	andeq	r6, r0, r8, lsl #31
   301d0:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   301d4:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   301d8:	andeq	r6, r0, r4, lsr #31
   301dc:	andeq	r6, r0, ip, lsr #31
   301e0:			; <UNDEFINED> instruction: 0x00006fb8
   301e4:	andeq	r6, r0, r8, asr #31
   301e8:	ldrdeq	r6, [r0], -r8
   301ec:	strdeq	r6, [r0], -r4
   301f0:	andeq	r7, r0, r0, lsl r0
   301f4:	andeq	r7, r0, ip, lsr #32
   301f8:	andeq	r7, r0, r4, lsr r0
   301fc:	andeq	r7, r0, r0, asr r0
   30200:	andeq	r7, r0, ip, asr r0
   30204:	andeq	r7, r0, ip, ror r0
   30208:	andeq	r7, r0, r4, lsr #1
   3020c:	andeq	r7, r0, r4, asr #1
   30210:	andeq	r7, r0, r4, ror #1
   30214:	andeq	r7, r0, r8, lsl #2
   30218:	andeq	r7, r0, r0, lsl r1
   3021c:	andeq	r7, r0, r0, lsr #2
   30220:	andeq	r7, r0, ip, lsr #2
   30224:	andeq	r7, r0, r8, asr #2
   30228:	andeq	r7, r0, r4, ror #2
   3022c:	andeq	r7, r0, r0, ror r1
   30230:	andeq	r7, r0, ip, lsl #3
   30234:	andeq	r7, r0, r8, lsr #3
   30238:	ldrdeq	r7, [r0], -r0
   3023c:	andeq	r7, r0, ip, ror #3
   30240:	strdeq	r7, [r0], -r0
   30244:	str	fp, [sp, #-8]!
   30248:	str	lr, [sp, #4]
   3024c:	add	fp, sp, #4
   30250:	sub	sp, sp, #8
   30254:	str	r0, [fp, #-8]
   30258:	str	r1, [fp, #-12]
   3025c:	ldr	r2, [fp, #-8]
   30260:	ldr	r3, [fp, #-12]
   30264:	add	r3, r2, r3
   30268:	mov	r0, r3
   3026c:	bl	2fe00 <flatcc_emitter_copy_buffer@@Base+0x170>
   30270:	mov	r3, r0
   30274:	mov	r0, r3
   30278:	sub	sp, fp, #4
   3027c:	ldr	fp, [sp]
   30280:	add	sp, sp, #4
   30284:	pop	{pc}		; (ldr pc, [sp], #4)
   30288:	str	fp, [sp, #-8]!
   3028c:	str	lr, [sp, #4]
   30290:	add	fp, sp, #4
   30294:	sub	sp, sp, #16
   30298:	str	r0, [fp, #-16]
   3029c:	mov	r3, #0
   302a0:	str	r3, [fp, #-8]
   302a4:	sub	r3, fp, #8
   302a8:	mov	r2, #4
   302ac:	ldr	r1, [fp, #-16]
   302b0:	mov	r0, r3
   302b4:	bl	129a4 <strncpy@plt>
   302b8:	ldr	r3, [fp, #-8]
   302bc:	mov	r0, r3
   302c0:	bl	2fec4 <flatcc_emitter_copy_buffer@@Base+0x234>
   302c4:	mov	r3, r0
   302c8:	mov	r0, r3
   302cc:	sub	sp, fp, #4
   302d0:	ldr	fp, [sp]
   302d4:	add	sp, sp, #4
   302d8:	pop	{pc}		; (ldr pc, [sp], #4)
   302dc:	str	fp, [sp, #-8]!
   302e0:	str	lr, [sp, #4]
   302e4:	add	fp, sp, #4
   302e8:	sub	sp, sp, #8
   302ec:	str	r0, [fp, #-8]
   302f0:	str	r1, [fp, #-12]
   302f4:	ldr	r2, [fp, #-8]
   302f8:	ldr	r3, [fp, #-12]
   302fc:	add	r3, r2, r3
   30300:	mov	r0, r3
   30304:	bl	2fee8 <flatcc_emitter_copy_buffer@@Base+0x258>
   30308:	mov	r3, r0
   3030c:	mov	r0, r3
   30310:	sub	sp, fp, #4
   30314:	ldr	fp, [sp]
   30318:	add	sp, sp, #4
   3031c:	pop	{pc}		; (ldr pc, [sp], #4)
   30320:	str	fp, [sp, #-8]!
   30324:	str	lr, [sp, #4]
   30328:	add	fp, sp, #4
   3032c:	sub	sp, sp, #8
   30330:	str	r0, [fp, #-8]
   30334:	str	r1, [fp, #-12]
   30338:	ldr	r2, [fp, #-8]
   3033c:	ldr	r3, [fp, #-12]
   30340:	add	r3, r2, r3
   30344:	mov	r0, r3
   30348:	bl	2fe64 <flatcc_emitter_copy_buffer@@Base+0x1d4>
   3034c:	mov	r3, r0
   30350:	mov	r0, r3
   30354:	sub	sp, fp, #4
   30358:	ldr	fp, [sp]
   3035c:	add	sp, sp, #4
   30360:	pop	{pc}		; (ldr pc, [sp], #4)
   30364:	push	{fp}		; (str fp, [sp, #-4]!)
   30368:	add	fp, sp, #0
   3036c:	sub	sp, sp, #28
   30370:	str	r0, [fp, #-16]
   30374:	str	r1, [fp, #-20]	; 0xffffffec
   30378:	str	r2, [fp, #-24]	; 0xffffffe8
   3037c:	ldr	r2, [fp, #-20]	; 0xffffffec
   30380:	ldr	r3, [fp, #-24]	; 0xffffffe8
   30384:	add	r3, r2, r3
   30388:	str	r3, [fp, #-8]
   3038c:	ldr	r2, [fp, #-8]
   30390:	ldr	r3, [fp, #-20]	; 0xffffffec
   30394:	cmp	r2, r3
   30398:	bls	303c8 <flatcc_verify_error_string@@Base+0x4a4>
   3039c:	ldr	r3, [fp, #-8]
   303a0:	add	r3, r3, #4
   303a4:	ldr	r2, [fp, #-16]
   303a8:	cmp	r2, r3
   303ac:	bcc	303c8 <flatcc_verify_error_string@@Base+0x4a4>
   303b0:	ldr	r3, [fp, #-8]
   303b4:	and	r3, r3, #3
   303b8:	cmp	r3, #0
   303bc:	bne	303c8 <flatcc_verify_error_string@@Base+0x4a4>
   303c0:	mov	r3, #1
   303c4:	b	303cc <flatcc_verify_error_string@@Base+0x4a8>
   303c8:	mov	r3, #0
   303cc:	mov	r0, r3
   303d0:	add	sp, fp, #0
   303d4:	pop	{fp}		; (ldr fp, [sp], #4)
   303d8:	bx	lr
   303dc:	push	{fp}		; (str fp, [sp, #-4]!)
   303e0:	add	fp, sp, #0
   303e4:	sub	sp, sp, #28
   303e8:	str	r0, [fp, #-16]
   303ec:	str	r1, [fp, #-20]	; 0xffffffec
   303f0:	str	r2, [fp, #-24]	; 0xffffffe8
   303f4:	strh	r3, [fp, #-26]	; 0xffffffe6
   303f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   303fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   30400:	add	r3, r2, r3
   30404:	str	r3, [fp, #-8]
   30408:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   3040c:	cmp	r3, #4
   30410:	movcs	r3, r3
   30414:	movcc	r3, #4
   30418:	strh	r3, [fp, #-26]	; 0xffffffe6
   3041c:	ldr	r2, [fp, #-8]
   30420:	ldr	r3, [fp, #-20]	; 0xffffffec
   30424:	cmp	r2, r3
   30428:	bls	30468 <flatcc_verify_error_string@@Base+0x544>
   3042c:	ldr	r3, [fp, #-8]
   30430:	add	r3, r3, #4
   30434:	ldr	r2, [fp, #-16]
   30438:	cmp	r2, r3
   3043c:	bcc	30468 <flatcc_verify_error_string@@Base+0x544>
   30440:	ldr	r3, [fp, #-8]
   30444:	add	r2, r3, #4
   30448:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   3044c:	sub	r3, r3, #1
   30450:	orr	r3, r3, #3
   30454:	and	r3, r3, r2
   30458:	cmp	r3, #0
   3045c:	bne	30468 <flatcc_verify_error_string@@Base+0x544>
   30460:	mov	r3, #1
   30464:	b	3046c <flatcc_verify_error_string@@Base+0x548>
   30468:	mov	r3, #0
   3046c:	mov	r0, r3
   30470:	add	sp, fp, #0
   30474:	pop	{fp}		; (ldr fp, [sp], #4)
   30478:	bx	lr
   3047c:	push	{fp}		; (str fp, [sp, #-4]!)
   30480:	add	fp, sp, #0
   30484:	sub	sp, sp, #36	; 0x24
   30488:	str	r0, [fp, #-24]	; 0xffffffe8
   3048c:	str	r1, [fp, #-28]	; 0xffffffe4
   30490:	str	r2, [fp, #-32]	; 0xffffffe0
   30494:	str	r3, [fp, #-36]	; 0xffffffdc
   30498:	ldr	r3, [fp, #-32]	; 0xffffffe0
   3049c:	cmp	r3, #0
   304a0:	beq	304bc <flatcc_verify_error_string@@Base+0x598>
   304a4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   304a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   304ac:	add	r3, r2, r3
   304b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   304b4:	cmp	r2, r3
   304b8:	bcs	304c4 <flatcc_verify_error_string@@Base+0x5a0>
   304bc:	mov	r3, #18
   304c0:	b	30584 <flatcc_verify_error_string@@Base+0x660>
   304c4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   304c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   304cc:	add	r3, r2, r3
   304d0:	str	r3, [fp, #-28]	; 0xffffffe4
   304d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   304d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   304dc:	add	r3, r2, r3
   304e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   304e4:	cmp	r2, r3
   304e8:	movls	r3, #1
   304ec:	movhi	r3, #0
   304f0:	uxtb	r3, r3
   304f4:	str	r3, [fp, #-8]
   304f8:	ldr	r3, [fp, #-8]
   304fc:	cmp	r3, #0
   30500:	bne	3050c <flatcc_verify_error_string@@Base+0x5e8>
   30504:	mov	r3, #10
   30508:	b	30584 <flatcc_verify_error_string@@Base+0x660>
   3050c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   30510:	ldr	r3, [fp, #-36]	; 0xffffffdc
   30514:	add	r3, r2, r3
   30518:	ldr	r2, [fp, #-24]	; 0xffffffe8
   3051c:	cmp	r2, r3
   30520:	movcs	r3, #1
   30524:	movcc	r3, #0
   30528:	uxtb	r3, r3
   3052c:	str	r3, [fp, #-12]
   30530:	ldr	r3, [fp, #-12]
   30534:	cmp	r3, #0
   30538:	bne	30544 <flatcc_verify_error_string@@Base+0x620>
   3053c:	mov	r3, #9
   30540:	b	30584 <flatcc_verify_error_string@@Base+0x660>
   30544:	ldrh	r3, [fp, #4]
   30548:	sub	r3, r3, #1
   3054c:	mov	r2, r3
   30550:	ldr	r3, [fp, #-28]	; 0xffffffe4
   30554:	and	r3, r3, r2
   30558:	cmp	r3, #0
   3055c:	moveq	r3, #1
   30560:	movne	r3, #0
   30564:	uxtb	r3, r3
   30568:	str	r3, [fp, #-16]
   3056c:	ldr	r3, [fp, #-16]
   30570:	cmp	r3, #0
   30574:	bne	30580 <flatcc_verify_error_string@@Base+0x65c>
   30578:	mov	r3, #11
   3057c:	b	30584 <flatcc_verify_error_string@@Base+0x660>
   30580:	mov	r3, #0
   30584:	mov	r0, r3
   30588:	add	sp, fp, #0
   3058c:	pop	{fp}		; (ldr fp, [sp], #4)
   30590:	bx	lr
   30594:	str	fp, [sp, #-8]!
   30598:	str	lr, [sp, #4]
   3059c:	add	fp, sp, #4
   305a0:	sub	sp, sp, #16
   305a4:	str	r0, [fp, #-16]
   305a8:	mov	r3, r1
   305ac:	strh	r3, [fp, #-18]	; 0xffffffee
   305b0:	ldrh	r3, [fp, #-18]	; 0xffffffee
   305b4:	add	r3, r3, #2
   305b8:	uxth	r3, r3
   305bc:	lsl	r3, r3, #1
   305c0:	strh	r3, [fp, #-6]
   305c4:	ldr	r3, [fp, #-16]
   305c8:	ldrh	r3, [r3, #22]
   305cc:	ldrh	r2, [fp, #-6]
   305d0:	cmp	r2, r3
   305d4:	bcc	305e0 <flatcc_verify_error_string@@Base+0x6bc>
   305d8:	mov	r3, #0
   305dc:	b	305fc <flatcc_verify_error_string@@Base+0x6d8>
   305e0:	ldr	r3, [fp, #-16]
   305e4:	ldr	r3, [r3, #12]
   305e8:	ldrh	r2, [fp, #-6]
   305ec:	mov	r1, r2
   305f0:	mov	r0, r3
   305f4:	bl	30320 <flatcc_verify_error_string@@Base+0x3fc>
   305f8:	mov	r3, r0
   305fc:	mov	r0, r3
   30600:	sub	sp, fp, #4
   30604:	ldr	fp, [sp]
   30608:	add	sp, sp, #4
   3060c:	pop	{pc}		; (ldr pc, [sp], #4)
   30610:	str	fp, [sp, #-8]!
   30614:	str	lr, [sp, #4]
   30618:	add	fp, sp, #4
   3061c:	sub	sp, sp, #16
   30620:	str	r0, [fp, #-16]
   30624:	mov	r3, r1
   30628:	strh	r3, [fp, #-18]	; 0xffffffee
   3062c:	ldrh	r3, [fp, #-18]	; 0xffffffee
   30630:	mov	r1, r3
   30634:	ldr	r0, [fp, #-16]
   30638:	bl	30594 <flatcc_verify_error_string@@Base+0x670>
   3063c:	mov	r3, r0
   30640:	strh	r3, [fp, #-6]
   30644:	ldrh	r3, [fp, #-6]
   30648:	cmp	r3, #0
   3064c:	beq	30670 <flatcc_verify_error_string@@Base+0x74c>
   30650:	ldr	r3, [fp, #-16]
   30654:	ldr	r2, [r3]
   30658:	ldr	r3, [fp, #-16]
   3065c:	ldr	r1, [r3, #16]
   30660:	ldrh	r3, [fp, #-6]
   30664:	add	r3, r1, r3
   30668:	add	r3, r2, r3
   3066c:	b	30674 <flatcc_verify_error_string@@Base+0x750>
   30670:	mov	r3, #0
   30674:	mov	r0, r3
   30678:	sub	sp, fp, #4
   3067c:	ldr	fp, [sp]
   30680:	add	sp, sp, #4
   30684:	pop	{pc}		; (ldr pc, [sp], #4)
   30688:	str	fp, [sp, #-8]!
   3068c:	str	lr, [sp, #4]
   30690:	add	fp, sp, #4
   30694:	sub	sp, sp, #48	; 0x30
   30698:	str	r0, [fp, #-40]	; 0xffffffd8
   3069c:	str	r2, [fp, #-48]	; 0xffffffd0
   306a0:	str	r3, [fp, #-52]	; 0xffffffcc
   306a4:	mov	r3, r1
   306a8:	strh	r3, [fp, #-42]	; 0xffffffd6
   306ac:	ldr	r3, [fp, #-40]	; 0xffffffd8
   306b0:	ldr	r3, [r3]
   306b4:	str	r3, [fp, #-8]
   306b8:	ldrh	r3, [fp, #-42]	; 0xffffffd6
   306bc:	mov	r1, r3
   306c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   306c4:	bl	30594 <flatcc_verify_error_string@@Base+0x670>
   306c8:	mov	r3, r0
   306cc:	strh	r3, [fp, #-10]
   306d0:	ldrh	r3, [fp, #-10]
   306d4:	cmp	r3, #0
   306d8:	bne	30710 <flatcc_verify_error_string@@Base+0x7ec>
   306dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   306e0:	cmp	r3, #0
   306e4:	moveq	r3, #1
   306e8:	movne	r3, #0
   306ec:	uxtb	r3, r3
   306f0:	str	r3, [fp, #-16]
   306f4:	ldr	r3, [fp, #-16]
   306f8:	cmp	r3, #0
   306fc:	bne	30708 <flatcc_verify_error_string@@Base+0x7e4>
   30700:	mov	r3, #4
   30704:	b	307d8 <flatcc_verify_error_string@@Base+0x8b4>
   30708:	mov	r3, #0
   3070c:	b	307d8 <flatcc_verify_error_string@@Base+0x8b4>
   30710:	ldrh	r3, [fp, #-10]
   30714:	str	r3, [fp, #-20]	; 0xffffffec
   30718:	ldr	r2, [fp, #-20]	; 0xffffffec
   3071c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   30720:	add	r3, r2, r3
   30724:	str	r3, [fp, #-24]	; 0xffffffe8
   30728:	ldr	r3, [fp, #-40]	; 0xffffffd8
   3072c:	ldrh	r3, [r3, #20]
   30730:	mov	r2, r3
   30734:	ldr	r3, [fp, #-24]	; 0xffffffe8
   30738:	cmp	r3, r2
   3073c:	movls	r3, #1
   30740:	movhi	r3, #0
   30744:	uxtb	r3, r3
   30748:	str	r3, [fp, #-28]	; 0xffffffe4
   3074c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   30750:	cmp	r3, #0
   30754:	bne	30760 <flatcc_verify_error_string@@Base+0x83c>
   30758:	mov	r3, #13
   3075c:	b	307d8 <flatcc_verify_error_string@@Base+0x8b4>
   30760:	mov	r3, #1
   30764:	str	r3, [fp, #-32]	; 0xffffffe0
   30768:	ldr	r3, [fp, #-32]	; 0xffffffe0
   3076c:	cmp	r3, #0
   30770:	bne	3077c <flatcc_verify_error_string@@Base+0x858>
   30774:	mov	r3, #14
   30778:	b	307d8 <flatcc_verify_error_string@@Base+0x8b4>
   3077c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   30780:	ldr	r2, [r3, #16]
   30784:	ldr	r3, [fp, #-8]
   30788:	add	r3, r2, r3
   3078c:	ldr	r2, [fp, #-20]	; 0xffffffec
   30790:	add	r3, r2, r3
   30794:	str	r3, [fp, #-20]	; 0xffffffec
   30798:	ldrh	r3, [fp, #4]
   3079c:	sub	r3, r3, #1
   307a0:	mov	r2, r3
   307a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   307a8:	and	r3, r3, r2
   307ac:	cmp	r3, #0
   307b0:	moveq	r3, #1
   307b4:	movne	r3, #0
   307b8:	uxtb	r3, r3
   307bc:	str	r3, [fp, #-36]	; 0xffffffdc
   307c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   307c4:	cmp	r3, #0
   307c8:	bne	307d4 <flatcc_verify_error_string@@Base+0x8b0>
   307cc:	mov	r3, #12
   307d0:	b	307d8 <flatcc_verify_error_string@@Base+0x8b4>
   307d4:	mov	r3, #0
   307d8:	mov	r0, r3
   307dc:	sub	sp, fp, #4
   307e0:	ldr	fp, [sp]
   307e4:	add	sp, sp, #4
   307e8:	pop	{pc}		; (ldr pc, [sp], #4)
   307ec:	str	fp, [sp, #-8]!
   307f0:	str	lr, [sp, #4]
   307f4:	add	fp, sp, #4
   307f8:	sub	sp, sp, #40	; 0x28
   307fc:	str	r0, [fp, #-32]	; 0xffffffe0
   30800:	str	r2, [fp, #-40]	; 0xffffffd8
   30804:	str	r3, [fp, #-44]	; 0xffffffd4
   30808:	mov	r3, r1
   3080c:	strh	r3, [fp, #-34]	; 0xffffffde
   30810:	ldrh	r3, [fp, #-34]	; 0xffffffde
   30814:	mov	r1, r3
   30818:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3081c:	bl	30594 <flatcc_verify_error_string@@Base+0x670>
   30820:	mov	r3, r0
   30824:	strh	r3, [fp, #-6]
   30828:	ldrh	r3, [fp, #-6]
   3082c:	cmp	r3, #0
   30830:	bne	3085c <flatcc_verify_error_string@@Base+0x938>
   30834:	ldr	r3, [fp, #-44]	; 0xffffffd4
   30838:	mov	r2, #0
   3083c:	str	r2, [r3]
   30840:	ldr	r3, [fp, #-40]	; 0xffffffd8
   30844:	cmp	r3, #0
   30848:	beq	30854 <flatcc_verify_error_string@@Base+0x930>
   3084c:	mov	r3, #4
   30850:	b	30918 <flatcc_verify_error_string@@Base+0x9f4>
   30854:	mov	r3, #0
   30858:	b	30918 <flatcc_verify_error_string@@Base+0x9f4>
   3085c:	ldrh	r3, [fp, #-6]
   30860:	str	r3, [fp, #-12]
   30864:	ldr	r3, [fp, #-12]
   30868:	add	r3, r3, #4
   3086c:	str	r3, [fp, #-16]
   30870:	ldr	r3, [fp, #-32]	; 0xffffffe0
   30874:	ldrh	r3, [r3, #20]
   30878:	mov	r2, r3
   3087c:	ldr	r3, [fp, #-16]
   30880:	cmp	r3, r2
   30884:	movls	r3, #1
   30888:	movhi	r3, #0
   3088c:	uxtb	r3, r3
   30890:	str	r3, [fp, #-20]	; 0xffffffec
   30894:	ldr	r3, [fp, #-20]	; 0xffffffec
   30898:	cmp	r3, #0
   3089c:	bne	308a8 <flatcc_verify_error_string@@Base+0x984>
   308a0:	mov	r3, #13
   308a4:	b	30918 <flatcc_verify_error_string@@Base+0x9f4>
   308a8:	mov	r3, #1
   308ac:	str	r3, [fp, #-24]	; 0xffffffe8
   308b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   308b4:	cmp	r3, #0
   308b8:	bne	308c4 <flatcc_verify_error_string@@Base+0x9a0>
   308bc:	mov	r3, #14
   308c0:	b	30918 <flatcc_verify_error_string@@Base+0x9f4>
   308c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   308c8:	ldr	r3, [r3, #16]
   308cc:	ldr	r2, [fp, #-12]
   308d0:	add	r3, r2, r3
   308d4:	str	r3, [fp, #-12]
   308d8:	ldr	r3, [fp, #-12]
   308dc:	and	r3, r3, #3
   308e0:	cmp	r3, #0
   308e4:	moveq	r3, #1
   308e8:	movne	r3, #0
   308ec:	uxtb	r3, r3
   308f0:	str	r3, [fp, #-28]	; 0xffffffe4
   308f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   308f8:	cmp	r3, #0
   308fc:	bne	30908 <flatcc_verify_error_string@@Base+0x9e4>
   30900:	mov	r3, #12
   30904:	b	30918 <flatcc_verify_error_string@@Base+0x9f4>
   30908:	ldr	r3, [fp, #-44]	; 0xffffffd4
   3090c:	ldr	r2, [fp, #-12]
   30910:	str	r2, [r3]
   30914:	mov	r3, #0
   30918:	mov	r0, r3
   3091c:	sub	sp, fp, #4
   30920:	ldr	fp, [sp]
   30924:	add	sp, sp, #4
   30928:	pop	{pc}		; (ldr pc, [sp], #4)
   3092c:	str	fp, [sp, #-8]!
   30930:	str	lr, [sp, #4]
   30934:	add	fp, sp, #4
   30938:	sub	sp, sp, #32
   3093c:	str	r0, [fp, #-24]	; 0xffffffe8
   30940:	str	r1, [fp, #-28]	; 0xffffffe4
   30944:	str	r2, [fp, #-32]	; 0xffffffe0
   30948:	str	r3, [fp, #-36]	; 0xffffffdc
   3094c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   30950:	ldr	r1, [fp, #-32]	; 0xffffffe0
   30954:	ldr	r0, [fp, #-28]	; 0xffffffe4
   30958:	bl	30364 <flatcc_verify_error_string@@Base+0x440>
   3095c:	str	r0, [fp, #-8]
   30960:	ldr	r3, [fp, #-8]
   30964:	cmp	r3, #0
   30968:	bne	30974 <flatcc_verify_error_string@@Base+0xa50>
   3096c:	mov	r3, #17
   30970:	b	30a20 <flatcc_verify_error_string@@Base+0xafc>
   30974:	ldr	r2, [fp, #-32]	; 0xffffffe0
   30978:	ldr	r3, [fp, #-36]	; 0xffffffdc
   3097c:	add	r3, r2, r3
   30980:	str	r3, [fp, #-32]	; 0xffffffe0
   30984:	ldr	r1, [fp, #-32]	; 0xffffffe0
   30988:	ldr	r0, [fp, #-24]	; 0xffffffe8
   3098c:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   30990:	str	r0, [fp, #-12]
   30994:	ldr	r3, [fp, #-32]	; 0xffffffe0
   30998:	add	r3, r3, #4
   3099c:	str	r3, [fp, #-32]	; 0xffffffe0
   309a0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   309a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   309a8:	sub	r2, r2, r3
   309ac:	ldr	r3, [fp, #-12]
   309b0:	add	r3, r3, #1
   309b4:	cmp	r2, r3
   309b8:	movcs	r3, #1
   309bc:	movcc	r3, #0
   309c0:	uxtb	r3, r3
   309c4:	str	r3, [fp, #-16]
   309c8:	ldr	r3, [fp, #-16]
   309cc:	cmp	r3, #0
   309d0:	bne	309dc <flatcc_verify_error_string@@Base+0xab8>
   309d4:	mov	r3, #8
   309d8:	b	30a20 <flatcc_verify_error_string@@Base+0xafc>
   309dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   309e0:	ldr	r3, [fp, #-12]
   309e4:	add	r3, r2, r3
   309e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   309ec:	add	r3, r2, r3
   309f0:	ldrb	r3, [r3]
   309f4:	cmp	r3, #0
   309f8:	moveq	r3, #1
   309fc:	movne	r3, #0
   30a00:	uxtb	r3, r3
   30a04:	str	r3, [fp, #-20]	; 0xffffffec
   30a08:	ldr	r3, [fp, #-20]	; 0xffffffec
   30a0c:	cmp	r3, #0
   30a10:	bne	30a1c <flatcc_verify_error_string@@Base+0xaf8>
   30a14:	mov	r3, #7
   30a18:	b	30a20 <flatcc_verify_error_string@@Base+0xafc>
   30a1c:	mov	r3, #0
   30a20:	mov	r0, r3
   30a24:	sub	sp, fp, #4
   30a28:	ldr	fp, [sp]
   30a2c:	add	sp, sp, #4
   30a30:	pop	{pc}		; (ldr pc, [sp], #4)
   30a34:	str	fp, [sp, #-8]!
   30a38:	str	lr, [sp, #4]
   30a3c:	add	fp, sp, #4
   30a40:	sub	sp, sp, #32
   30a44:	str	r0, [fp, #-24]	; 0xffffffe8
   30a48:	str	r1, [fp, #-28]	; 0xffffffe4
   30a4c:	str	r2, [fp, #-32]	; 0xffffffe0
   30a50:	str	r3, [fp, #-36]	; 0xffffffdc
   30a54:	ldrh	r3, [fp, #8]
   30a58:	ldr	r2, [fp, #-36]	; 0xffffffdc
   30a5c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   30a60:	ldr	r0, [fp, #-28]	; 0xffffffe4
   30a64:	bl	303dc <flatcc_verify_error_string@@Base+0x4b8>
   30a68:	str	r0, [fp, #-8]
   30a6c:	ldr	r3, [fp, #-8]
   30a70:	cmp	r3, #0
   30a74:	bne	30a80 <flatcc_verify_error_string@@Base+0xb5c>
   30a78:	mov	r3, #16
   30a7c:	b	30b20 <flatcc_verify_error_string@@Base+0xbfc>
   30a80:	ldr	r2, [fp, #-32]	; 0xffffffe0
   30a84:	ldr	r3, [fp, #-36]	; 0xffffffdc
   30a88:	add	r3, r2, r3
   30a8c:	str	r3, [fp, #-32]	; 0xffffffe0
   30a90:	ldr	r1, [fp, #-32]	; 0xffffffe0
   30a94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   30a98:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   30a9c:	str	r0, [fp, #-12]
   30aa0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   30aa4:	add	r3, r3, #4
   30aa8:	str	r3, [fp, #-32]	; 0xffffffe0
   30aac:	ldr	r2, [fp, #-12]
   30ab0:	ldr	r3, [fp, #12]
   30ab4:	cmp	r2, r3
   30ab8:	movls	r3, #1
   30abc:	movhi	r3, #0
   30ac0:	uxtb	r3, r3
   30ac4:	str	r3, [fp, #-16]
   30ac8:	ldr	r3, [fp, #-16]
   30acc:	cmp	r3, #0
   30ad0:	bne	30adc <flatcc_verify_error_string@@Base+0xbb8>
   30ad4:	mov	r3, #25
   30ad8:	b	30b20 <flatcc_verify_error_string@@Base+0xbfc>
   30adc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   30ae0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   30ae4:	sub	r2, r2, r3
   30ae8:	ldr	r3, [fp, #-12]
   30aec:	ldr	r1, [fp, #4]
   30af0:	mul	r3, r1, r3
   30af4:	cmp	r2, r3
   30af8:	movcs	r3, #1
   30afc:	movcc	r3, #0
   30b00:	uxtb	r3, r3
   30b04:	str	r3, [fp, #-20]	; 0xffffffec
   30b08:	ldr	r3, [fp, #-20]	; 0xffffffec
   30b0c:	cmp	r3, #0
   30b10:	bne	30b1c <flatcc_verify_error_string@@Base+0xbf8>
   30b14:	mov	r3, #26
   30b18:	b	30b20 <flatcc_verify_error_string@@Base+0xbfc>
   30b1c:	mov	r3, #0
   30b20:	mov	r0, r3
   30b24:	sub	sp, fp, #4
   30b28:	ldr	fp, [sp]
   30b2c:	add	sp, sp, #4
   30b30:	pop	{pc}		; (ldr pc, [sp], #4)
   30b34:	str	fp, [sp, #-8]!
   30b38:	str	lr, [sp, #4]
   30b3c:	add	fp, sp, #4
   30b40:	sub	sp, sp, #40	; 0x28
   30b44:	str	r0, [fp, #-16]
   30b48:	str	r1, [fp, #-20]	; 0xffffffec
   30b4c:	str	r2, [fp, #-24]	; 0xffffffe8
   30b50:	str	r3, [fp, #-28]	; 0xffffffe4
   30b54:	mvn	r3, #-1073741824	; 0xc0000000
   30b58:	str	r3, [sp, #8]
   30b5c:	mov	r3, #4
   30b60:	str	r3, [sp, #4]
   30b64:	mov	r3, #4
   30b68:	str	r3, [sp]
   30b6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   30b70:	ldr	r2, [fp, #-24]	; 0xffffffe8
   30b74:	ldr	r1, [fp, #-20]	; 0xffffffec
   30b78:	ldr	r0, [fp, #-16]
   30b7c:	bl	30a34 <flatcc_verify_error_string@@Base+0xb10>
   30b80:	mov	r3, r0
   30b84:	cmp	r3, #0
   30b88:	beq	30bc0 <flatcc_verify_error_string@@Base+0xc9c>
   30b8c:	mvn	r3, #-1073741824	; 0xc0000000
   30b90:	str	r3, [sp, #8]
   30b94:	mov	r3, #4
   30b98:	str	r3, [sp, #4]
   30b9c:	mov	r3, #4
   30ba0:	str	r3, [sp]
   30ba4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   30ba8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   30bac:	ldr	r1, [fp, #-20]	; 0xffffffec
   30bb0:	ldr	r0, [fp, #-16]
   30bb4:	bl	30a34 <flatcc_verify_error_string@@Base+0xb10>
   30bb8:	mov	r3, r0
   30bbc:	b	30c78 <flatcc_verify_error_string@@Base+0xd54>
   30bc0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   30bc4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   30bc8:	add	r3, r2, r3
   30bcc:	str	r3, [fp, #-24]	; 0xffffffe8
   30bd0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   30bd4:	ldr	r0, [fp, #-16]
   30bd8:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   30bdc:	str	r0, [fp, #-12]
   30be0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   30be4:	add	r3, r3, #4
   30be8:	str	r3, [fp, #-24]	; 0xffffffe8
   30bec:	mov	r3, #0
   30bf0:	str	r3, [fp, #-8]
   30bf4:	b	30c64 <flatcc_verify_error_string@@Base+0xd40>
   30bf8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   30bfc:	ldr	r0, [fp, #-16]
   30c00:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   30c04:	mov	r3, r0
   30c08:	ldr	r2, [fp, #-24]	; 0xffffffe8
   30c0c:	ldr	r1, [fp, #-20]	; 0xffffffec
   30c10:	ldr	r0, [fp, #-16]
   30c14:	bl	3092c <flatcc_verify_error_string@@Base+0xa08>
   30c18:	mov	r3, r0
   30c1c:	cmp	r3, #0
   30c20:	beq	30c4c <flatcc_verify_error_string@@Base+0xd28>
   30c24:	ldr	r1, [fp, #-24]	; 0xffffffe8
   30c28:	ldr	r0, [fp, #-16]
   30c2c:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   30c30:	mov	r3, r0
   30c34:	ldr	r2, [fp, #-24]	; 0xffffffe8
   30c38:	ldr	r1, [fp, #-20]	; 0xffffffec
   30c3c:	ldr	r0, [fp, #-16]
   30c40:	bl	3092c <flatcc_verify_error_string@@Base+0xa08>
   30c44:	mov	r3, r0
   30c48:	b	30c78 <flatcc_verify_error_string@@Base+0xd54>
   30c4c:	ldr	r3, [fp, #-8]
   30c50:	add	r3, r3, #1
   30c54:	str	r3, [fp, #-8]
   30c58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   30c5c:	add	r3, r3, #4
   30c60:	str	r3, [fp, #-24]	; 0xffffffe8
   30c64:	ldr	r2, [fp, #-8]
   30c68:	ldr	r3, [fp, #-12]
   30c6c:	cmp	r2, r3
   30c70:	bcc	30bf8 <flatcc_verify_error_string@@Base+0xcd4>
   30c74:	mov	r3, #0
   30c78:	mov	r0, r3
   30c7c:	sub	sp, fp, #4
   30c80:	ldr	fp, [sp]
   30c84:	add	sp, sp, #4
   30c88:	pop	{pc}		; (ldr pc, [sp], #4)
   30c8c:	str	r4, [sp, #-12]!
   30c90:	str	fp, [sp, #4]
   30c94:	str	lr, [sp, #8]
   30c98:	add	fp, sp, #8
   30c9c:	sub	sp, sp, #84	; 0x54
   30ca0:	str	r0, [fp, #-80]	; 0xffffffb0
   30ca4:	str	r1, [fp, #-84]	; 0xffffffac
   30ca8:	str	r2, [fp, #-88]	; 0xffffffa8
   30cac:	str	r3, [fp, #-92]	; 0xffffffa4
   30cb0:	ldr	r3, [fp, #4]
   30cb4:	sub	r3, r3, #1
   30cb8:	str	r3, [fp, #-68]	; 0xffffffbc
   30cbc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   30cc0:	str	r3, [fp, #-16]
   30cc4:	ldr	r3, [fp, #-16]
   30cc8:	cmp	r3, #0
   30ccc:	bne	30cd8 <flatcc_verify_error_string@@Base+0xdb4>
   30cd0:	mov	r3, #3
   30cd4:	b	30ee0 <flatcc_verify_error_string@@Base+0xfbc>
   30cd8:	ldr	r2, [fp, #-92]	; 0xffffffa4
   30cdc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   30ce0:	ldr	r0, [fp, #-84]	; 0xffffffac
   30ce4:	bl	30364 <flatcc_verify_error_string@@Base+0x440>
   30ce8:	str	r0, [fp, #-20]	; 0xffffffec
   30cec:	ldr	r3, [fp, #-20]	; 0xffffffec
   30cf0:	cmp	r3, #0
   30cf4:	bne	30d00 <flatcc_verify_error_string@@Base+0xddc>
   30cf8:	mov	r3, #15
   30cfc:	b	30ee0 <flatcc_verify_error_string@@Base+0xfbc>
   30d00:	ldr	r2, [fp, #-88]	; 0xffffffa8
   30d04:	ldr	r3, [fp, #-92]	; 0xffffffa4
   30d08:	add	r3, r2, r3
   30d0c:	str	r3, [fp, #-60]	; 0xffffffc4
   30d10:	ldr	r4, [fp, #-60]	; 0xffffffc4
   30d14:	ldr	r3, [fp, #-60]	; 0xffffffc4
   30d18:	mov	r1, r3
   30d1c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   30d20:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   30d24:	mov	r3, r0
   30d28:	sub	r3, r4, r3
   30d2c:	str	r3, [fp, #-24]	; 0xffffffe8
   30d30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   30d34:	cmp	r3, #0
   30d38:	blt	30d54 <flatcc_verify_error_string@@Base+0xe30>
   30d3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   30d40:	and	r3, r3, #1
   30d44:	cmp	r3, #0
   30d48:	bne	30d54 <flatcc_verify_error_string@@Base+0xe30>
   30d4c:	mov	r3, #1
   30d50:	b	30d58 <flatcc_verify_error_string@@Base+0xe34>
   30d54:	mov	r3, #0
   30d58:	str	r3, [fp, #-28]	; 0xffffffe4
   30d5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   30d60:	cmp	r3, #0
   30d64:	bne	30d70 <flatcc_verify_error_string@@Base+0xe4c>
   30d68:	mov	r3, #29
   30d6c:	b	30ee0 <flatcc_verify_error_string@@Base+0xfbc>
   30d70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   30d74:	add	r3, r3, #2
   30d78:	ldr	r2, [fp, #-84]	; 0xffffffac
   30d7c:	cmp	r2, r3
   30d80:	movcs	r3, #1
   30d84:	movcc	r3, #0
   30d88:	uxtb	r3, r3
   30d8c:	str	r3, [fp, #-32]	; 0xffffffe0
   30d90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   30d94:	cmp	r3, #0
   30d98:	bne	30da4 <flatcc_verify_error_string@@Base+0xe80>
   30d9c:	mov	r3, #27
   30da0:	b	30ee0 <flatcc_verify_error_string@@Base+0xfbc>
   30da4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   30da8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   30dac:	bl	30320 <flatcc_verify_error_string@@Base+0x3fc>
   30db0:	mov	r3, r0
   30db4:	strh	r3, [fp, #-54]	; 0xffffffca
   30db8:	ldrh	r3, [fp, #-54]	; 0xffffffca
   30dbc:	mov	r2, r3
   30dc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   30dc4:	add	r3, r3, r2
   30dc8:	str	r3, [fp, #-36]	; 0xffffffdc
   30dcc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   30dd0:	ldr	r3, [fp, #-84]	; 0xffffffac
   30dd4:	cmp	r2, r3
   30dd8:	bhi	30df4 <flatcc_verify_error_string@@Base+0xed0>
   30ddc:	ldrh	r3, [fp, #-54]	; 0xffffffca
   30de0:	and	r3, r3, #1
   30de4:	cmp	r3, #0
   30de8:	bne	30df4 <flatcc_verify_error_string@@Base+0xed0>
   30dec:	mov	r3, #1
   30df0:	b	30df8 <flatcc_verify_error_string@@Base+0xed4>
   30df4:	mov	r3, #0
   30df8:	str	r3, [fp, #-40]	; 0xffffffd8
   30dfc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   30e00:	cmp	r3, #0
   30e04:	bne	30e10 <flatcc_verify_error_string@@Base+0xeec>
   30e08:	mov	r3, #30
   30e0c:	b	30ee0 <flatcc_verify_error_string@@Base+0xfbc>
   30e10:	mov	r3, #1
   30e14:	str	r3, [fp, #-44]	; 0xffffffd4
   30e18:	ldr	r3, [fp, #-44]	; 0xffffffd4
   30e1c:	cmp	r3, #0
   30e20:	bne	30e2c <flatcc_verify_error_string@@Base+0xf08>
   30e24:	mov	r3, #31
   30e28:	b	30ee0 <flatcc_verify_error_string@@Base+0xfbc>
   30e2c:	ldrh	r3, [fp, #-54]	; 0xffffffca
   30e30:	cmp	r3, #3
   30e34:	movhi	r3, #1
   30e38:	movls	r3, #0
   30e3c:	uxtb	r3, r3
   30e40:	str	r3, [fp, #-48]	; 0xffffffd0
   30e44:	ldr	r3, [fp, #-48]	; 0xffffffd0
   30e48:	cmp	r3, #0
   30e4c:	bne	30e58 <flatcc_verify_error_string@@Base+0xf34>
   30e50:	mov	r3, #28
   30e54:	b	30ee0 <flatcc_verify_error_string@@Base+0xfbc>
   30e58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   30e5c:	add	r3, r3, #2
   30e60:	mov	r1, r3
   30e64:	ldr	r0, [fp, #-80]	; 0xffffffb0
   30e68:	bl	30320 <flatcc_verify_error_string@@Base+0x3fc>
   30e6c:	mov	r3, r0
   30e70:	strh	r3, [fp, #-56]	; 0xffffffc8
   30e74:	ldr	r3, [fp, #-60]	; 0xffffffc4
   30e78:	ldr	r2, [fp, #-84]	; 0xffffffac
   30e7c:	sub	r3, r2, r3
   30e80:	ldrh	r2, [fp, #-56]	; 0xffffffc8
   30e84:	cmp	r3, r2
   30e88:	movcs	r3, #1
   30e8c:	movcc	r3, #0
   30e90:	uxtb	r3, r3
   30e94:	str	r3, [fp, #-52]	; 0xffffffcc
   30e98:	ldr	r3, [fp, #-52]	; 0xffffffcc
   30e9c:	cmp	r3, #0
   30ea0:	bne	30eac <flatcc_verify_error_string@@Base+0xf88>
   30ea4:	mov	r3, #20
   30ea8:	b	30ee0 <flatcc_verify_error_string@@Base+0xfbc>
   30eac:	ldr	r2, [fp, #-80]	; 0xffffffb0
   30eb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   30eb4:	add	r3, r2, r3
   30eb8:	str	r3, [fp, #-64]	; 0xffffffc0
   30ebc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   30ec0:	str	r3, [fp, #-76]	; 0xffffffb4
   30ec4:	ldr	r3, [fp, #-84]	; 0xffffffac
   30ec8:	str	r3, [fp, #-72]	; 0xffffffb8
   30ecc:	sub	r2, fp, #76	; 0x4c
   30ed0:	ldr	r3, [fp, #8]
   30ed4:	mov	r0, r2
   30ed8:	blx	r3
   30edc:	mov	r3, r0
   30ee0:	mov	r0, r3
   30ee4:	sub	sp, fp, #8
   30ee8:	ldr	r4, [sp]
   30eec:	ldr	fp, [sp, #4]
   30ef0:	add	sp, sp, #8
   30ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   30ef8:	str	fp, [sp, #-8]!
   30efc:	str	lr, [sp, #4]
   30f00:	add	fp, sp, #4
   30f04:	sub	sp, sp, #48	; 0x30
   30f08:	str	r0, [fp, #-24]	; 0xffffffe8
   30f0c:	str	r1, [fp, #-28]	; 0xffffffe4
   30f10:	str	r2, [fp, #-32]	; 0xffffffe0
   30f14:	str	r3, [fp, #-36]	; 0xffffffdc
   30f18:	ldr	r3, [fp, #4]
   30f1c:	sub	r2, r3, #1
   30f20:	str	r2, [fp, #4]
   30f24:	cmp	r3, #0
   30f28:	movgt	r3, #1
   30f2c:	movle	r3, #0
   30f30:	uxtb	r3, r3
   30f34:	str	r3, [fp, #-12]
   30f38:	ldr	r3, [fp, #-12]
   30f3c:	cmp	r3, #0
   30f40:	bne	30f4c <flatcc_verify_error_string@@Base+0x1028>
   30f44:	mov	r3, #3
   30f48:	b	31098 <flatcc_verify_error_string@@Base+0x1174>
   30f4c:	mvn	r3, #-1073741824	; 0xc0000000
   30f50:	str	r3, [sp, #8]
   30f54:	mov	r3, #4
   30f58:	str	r3, [sp, #4]
   30f5c:	mov	r3, #4
   30f60:	str	r3, [sp]
   30f64:	ldr	r3, [fp, #-36]	; 0xffffffdc
   30f68:	ldr	r2, [fp, #-32]	; 0xffffffe0
   30f6c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   30f70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   30f74:	bl	30a34 <flatcc_verify_error_string@@Base+0xb10>
   30f78:	mov	r3, r0
   30f7c:	cmp	r3, #0
   30f80:	beq	30fb8 <flatcc_verify_error_string@@Base+0x1094>
   30f84:	mvn	r3, #-1073741824	; 0xc0000000
   30f88:	str	r3, [sp, #8]
   30f8c:	mov	r3, #4
   30f90:	str	r3, [sp, #4]
   30f94:	mov	r3, #4
   30f98:	str	r3, [sp]
   30f9c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   30fa0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   30fa4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   30fa8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   30fac:	bl	30a34 <flatcc_verify_error_string@@Base+0xb10>
   30fb0:	mov	r3, r0
   30fb4:	b	31098 <flatcc_verify_error_string@@Base+0x1174>
   30fb8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   30fbc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   30fc0:	add	r3, r2, r3
   30fc4:	str	r3, [fp, #-32]	; 0xffffffe0
   30fc8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   30fcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   30fd0:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   30fd4:	str	r0, [fp, #-16]
   30fd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   30fdc:	add	r3, r3, #4
   30fe0:	str	r3, [fp, #-32]	; 0xffffffe0
   30fe4:	mov	r3, #0
   30fe8:	str	r3, [fp, #-8]
   30fec:	b	31084 <flatcc_verify_error_string@@Base+0x1160>
   30ff0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   30ff4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   30ff8:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   30ffc:	mov	r2, r0
   31000:	ldr	r3, [fp, #8]
   31004:	str	r3, [sp, #4]
   31008:	ldr	r3, [fp, #4]
   3100c:	str	r3, [sp]
   31010:	mov	r3, r2
   31014:	ldr	r2, [fp, #-32]	; 0xffffffe0
   31018:	ldr	r1, [fp, #-28]	; 0xffffffe4
   3101c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   31020:	bl	30c8c <flatcc_verify_error_string@@Base+0xd68>
   31024:	mov	r3, r0
   31028:	cmp	r3, #0
   3102c:	beq	3106c <flatcc_verify_error_string@@Base+0x1148>
   31030:	ldr	r1, [fp, #-32]	; 0xffffffe0
   31034:	ldr	r0, [fp, #-24]	; 0xffffffe8
   31038:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   3103c:	mov	r2, r0
   31040:	ldr	r3, [fp, #8]
   31044:	str	r3, [sp, #4]
   31048:	ldr	r3, [fp, #4]
   3104c:	str	r3, [sp]
   31050:	mov	r3, r2
   31054:	ldr	r2, [fp, #-32]	; 0xffffffe0
   31058:	ldr	r1, [fp, #-28]	; 0xffffffe4
   3105c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   31060:	bl	30c8c <flatcc_verify_error_string@@Base+0xd68>
   31064:	mov	r3, r0
   31068:	b	31098 <flatcc_verify_error_string@@Base+0x1174>
   3106c:	ldr	r3, [fp, #-8]
   31070:	add	r3, r3, #1
   31074:	str	r3, [fp, #-8]
   31078:	ldr	r3, [fp, #-32]	; 0xffffffe0
   3107c:	add	r3, r3, #4
   31080:	str	r3, [fp, #-32]	; 0xffffffe0
   31084:	ldr	r2, [fp, #-8]
   31088:	ldr	r3, [fp, #-16]
   3108c:	cmp	r2, r3
   31090:	bcc	30ff0 <flatcc_verify_error_string@@Base+0x10cc>
   31094:	mov	r3, #0
   31098:	mov	r0, r3
   3109c:	sub	sp, fp, #4
   310a0:	ldr	fp, [sp]
   310a4:	add	sp, sp, #4
   310a8:	pop	{pc}		; (ldr pc, [sp], #4)
   310ac:	str	fp, [sp, #-8]!
   310b0:	str	lr, [sp, #4]
   310b4:	add	fp, sp, #4
   310b8:	sub	sp, sp, #88	; 0x58
   310bc:	str	r0, [fp, #-64]	; 0xffffffc0
   310c0:	str	r1, [fp, #-68]	; 0xffffffbc
   310c4:	str	r2, [fp, #-72]	; 0xffffffb8
   310c8:	str	r3, [fp, #-76]	; 0xffffffb4
   310cc:	ldr	r3, [fp, #12]
   310d0:	sub	r2, r3, #1
   310d4:	str	r2, [fp, #12]
   310d8:	cmp	r3, #0
   310dc:	movgt	r3, #1
   310e0:	movle	r3, #0
   310e4:	uxtb	r3, r3
   310e8:	str	r3, [fp, #-12]
   310ec:	ldr	r3, [fp, #-12]
   310f0:	cmp	r3, #0
   310f4:	bne	31100 <flatcc_verify_error_string@@Base+0x11dc>
   310f8:	mov	r3, #3
   310fc:	b	312fc <flatcc_verify_error_string@@Base+0x13d8>
   31100:	mvn	r3, #-1073741824	; 0xc0000000
   31104:	str	r3, [sp, #8]
   31108:	mov	r3, #4
   3110c:	str	r3, [sp, #4]
   31110:	mov	r3, #4
   31114:	str	r3, [sp]
   31118:	ldr	r3, [fp, #-76]	; 0xffffffb4
   3111c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   31120:	ldr	r1, [fp, #-68]	; 0xffffffbc
   31124:	ldr	r0, [fp, #-64]	; 0xffffffc0
   31128:	bl	30a34 <flatcc_verify_error_string@@Base+0xb10>
   3112c:	mov	r3, r0
   31130:	cmp	r3, #0
   31134:	beq	3116c <flatcc_verify_error_string@@Base+0x1248>
   31138:	mvn	r3, #-1073741824	; 0xc0000000
   3113c:	str	r3, [sp, #8]
   31140:	mov	r3, #4
   31144:	str	r3, [sp, #4]
   31148:	mov	r3, #4
   3114c:	str	r3, [sp]
   31150:	ldr	r3, [fp, #-76]	; 0xffffffb4
   31154:	ldr	r2, [fp, #-72]	; 0xffffffb8
   31158:	ldr	r1, [fp, #-68]	; 0xffffffbc
   3115c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   31160:	bl	30a34 <flatcc_verify_error_string@@Base+0xb10>
   31164:	mov	r3, r0
   31168:	b	312fc <flatcc_verify_error_string@@Base+0x13d8>
   3116c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   31170:	ldr	r3, [fp, #-76]	; 0xffffffb4
   31174:	add	r3, r2, r3
   31178:	str	r3, [fp, #-72]	; 0xffffffb8
   3117c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   31180:	ldr	r0, [fp, #-64]	; 0xffffffc0
   31184:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   31188:	str	r0, [fp, #-16]
   3118c:	ldr	r2, [fp, #-16]
   31190:	ldr	r3, [fp, #4]
   31194:	cmp	r2, r3
   31198:	moveq	r3, #1
   3119c:	movne	r3, #0
   311a0:	uxtb	r3, r3
   311a4:	str	r3, [fp, #-20]	; 0xffffffec
   311a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   311ac:	cmp	r3, #0
   311b0:	bne	311bc <flatcc_verify_error_string@@Base+0x1298>
   311b4:	mov	r3, #34	; 0x22
   311b8:	b	312fc <flatcc_verify_error_string@@Base+0x13d8>
   311bc:	ldr	r3, [fp, #-72]	; 0xffffffb8
   311c0:	add	r3, r3, #4
   311c4:	str	r3, [fp, #-72]	; 0xffffffb8
   311c8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   311cc:	str	r3, [fp, #-56]	; 0xffffffc8
   311d0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   311d4:	str	r3, [fp, #-52]	; 0xffffffcc
   311d8:	ldr	r3, [fp, #12]
   311dc:	str	r3, [fp, #-48]	; 0xffffffd0
   311e0:	mov	r3, #0
   311e4:	str	r3, [fp, #-8]
   311e8:	b	312e8 <flatcc_verify_error_string@@Base+0x13c4>
   311ec:	ldr	r1, [fp, #-72]	; 0xffffffb8
   311f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   311f4:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   311f8:	str	r0, [fp, #-24]	; 0xffffffe8
   311fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   31200:	cmp	r3, #0
   31204:	bne	31240 <flatcc_verify_error_string@@Base+0x131c>
   31208:	ldr	r2, [fp, #8]
   3120c:	ldr	r3, [fp, #-8]
   31210:	add	r3, r2, r3
   31214:	ldrb	r3, [r3]
   31218:	cmp	r3, #0
   3121c:	moveq	r3, #1
   31220:	movne	r3, #0
   31224:	uxtb	r3, r3
   31228:	str	r3, [fp, #-28]	; 0xffffffe4
   3122c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   31230:	cmp	r3, #0
   31234:	bne	312d0 <flatcc_verify_error_string@@Base+0x13ac>
   31238:	mov	r3, #32
   3123c:	b	312fc <flatcc_verify_error_string@@Base+0x13d8>
   31240:	ldr	r2, [fp, #8]
   31244:	ldr	r3, [fp, #-8]
   31248:	add	r3, r2, r3
   3124c:	ldrb	r3, [r3]
   31250:	cmp	r3, #0
   31254:	movne	r3, #1
   31258:	moveq	r3, #0
   3125c:	uxtb	r3, r3
   31260:	str	r3, [fp, #-32]	; 0xffffffe0
   31264:	ldr	r3, [fp, #-32]	; 0xffffffe0
   31268:	cmp	r3, #0
   3126c:	bne	31278 <flatcc_verify_error_string@@Base+0x1354>
   31270:	mov	r3, #33	; 0x21
   31274:	b	312fc <flatcc_verify_error_string@@Base+0x13d8>
   31278:	ldr	r2, [fp, #8]
   3127c:	ldr	r3, [fp, #-8]
   31280:	add	r3, r2, r3
   31284:	ldrb	r3, [r3]
   31288:	strb	r3, [fp, #-44]	; 0xffffffd4
   3128c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   31290:	str	r3, [fp, #-40]	; 0xffffffd8
   31294:	ldr	r3, [fp, #-24]	; 0xffffffe8
   31298:	str	r3, [fp, #-36]	; 0xffffffdc
   3129c:	sub	r2, fp, #56	; 0x38
   312a0:	ldr	r3, [fp, #16]
   312a4:	mov	r0, r2
   312a8:	blx	r3
   312ac:	mov	r3, r0
   312b0:	cmp	r3, #0
   312b4:	beq	312d0 <flatcc_verify_error_string@@Base+0x13ac>
   312b8:	sub	r2, fp, #56	; 0x38
   312bc:	ldr	r3, [fp, #16]
   312c0:	mov	r0, r2
   312c4:	blx	r3
   312c8:	mov	r3, r0
   312cc:	b	312fc <flatcc_verify_error_string@@Base+0x13d8>
   312d0:	ldr	r3, [fp, #-8]
   312d4:	add	r3, r3, #1
   312d8:	str	r3, [fp, #-8]
   312dc:	ldr	r3, [fp, #-72]	; 0xffffffb8
   312e0:	add	r3, r3, #4
   312e4:	str	r3, [fp, #-72]	; 0xffffffb8
   312e8:	ldr	r2, [fp, #-8]
   312ec:	ldr	r3, [fp, #-16]
   312f0:	cmp	r2, r3
   312f4:	bcc	311ec <flatcc_verify_error_string@@Base+0x12c8>
   312f8:	mov	r3, #0
   312fc:	mov	r0, r3
   31300:	sub	sp, fp, #4
   31304:	ldr	fp, [sp]
   31308:	add	sp, sp, #4
   3130c:	pop	{pc}		; (ldr pc, [sp], #4)

00031310 <flatcc_verify_field@@Base>:
   31310:	str	fp, [sp, #-8]!
   31314:	str	lr, [sp, #4]
   31318:	add	fp, sp, #4
   3131c:	sub	sp, sp, #24
   31320:	str	r0, [fp, #-8]
   31324:	str	r2, [fp, #-16]
   31328:	mov	r2, r3
   3132c:	mov	r3, r1
   31330:	strh	r3, [fp, #-10]
   31334:	mov	r3, r2
   31338:	strh	r3, [fp, #-12]
   3133c:	ldrh	r1, [fp, #-10]
   31340:	ldrh	r3, [fp, #-12]
   31344:	str	r3, [sp]
   31348:	ldr	r3, [fp, #-16]
   3134c:	mov	r2, #0
   31350:	ldr	r0, [fp, #-8]
   31354:	bl	30688 <flatcc_verify_error_string@@Base+0x764>
   31358:	mov	r3, r0
   3135c:	cmp	r3, #0
   31360:	beq	31388 <flatcc_verify_field@@Base+0x78>
   31364:	ldrh	r1, [fp, #-10]
   31368:	ldrh	r3, [fp, #-12]
   3136c:	str	r3, [sp]
   31370:	ldr	r3, [fp, #-16]
   31374:	mov	r2, #0
   31378:	ldr	r0, [fp, #-8]
   3137c:	bl	30688 <flatcc_verify_error_string@@Base+0x764>
   31380:	mov	r3, r0
   31384:	b	3138c <flatcc_verify_field@@Base+0x7c>
   31388:	mov	r3, #0
   3138c:	mov	r0, r3
   31390:	sub	sp, fp, #4
   31394:	ldr	fp, [sp]
   31398:	add	sp, sp, #4
   3139c:	pop	{pc}		; (ldr pc, [sp], #4)

000313a0 <flatcc_verify_string_field@@Base>:
   313a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   313a4:	str	r6, [sp, #8]
   313a8:	str	fp, [sp, #12]
   313ac:	str	lr, [sp, #16]
   313b0:	add	fp, sp, #16
   313b4:	sub	sp, sp, #28
   313b8:	str	r0, [fp, #-32]	; 0xffffffe0
   313bc:	mov	r3, r1
   313c0:	str	r2, [fp, #-40]	; 0xffffffd8
   313c4:	strh	r3, [fp, #-34]	; 0xffffffde
   313c8:	sub	r3, fp, #28
   313cc:	ldrh	r1, [fp, #-34]	; 0xffffffde
   313d0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   313d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   313d8:	bl	307ec <flatcc_verify_error_string@@Base+0x8c8>
   313dc:	str	r0, [fp, #-24]	; 0xffffffe8
   313e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   313e4:	cmp	r3, #0
   313e8:	bne	313f8 <flatcc_verify_string_field@@Base+0x58>
   313ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   313f0:	cmp	r3, #0
   313f4:	bne	31400 <flatcc_verify_string_field@@Base+0x60>
   313f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   313fc:	b	31444 <flatcc_verify_string_field@@Base+0xa4>
   31400:	ldr	r3, [fp, #-32]	; 0xffffffe0
   31404:	ldr	r4, [r3]
   31408:	ldr	r3, [fp, #-32]	; 0xffffffe0
   3140c:	ldr	r5, [r3, #4]
   31410:	ldr	r6, [fp, #-28]	; 0xffffffe4
   31414:	ldr	r3, [fp, #-32]	; 0xffffffe0
   31418:	ldr	r3, [r3]
   3141c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   31420:	mov	r1, r2
   31424:	mov	r0, r3
   31428:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   3142c:	mov	r3, r0
   31430:	mov	r2, r6
   31434:	mov	r1, r5
   31438:	mov	r0, r4
   3143c:	bl	3092c <flatcc_verify_error_string@@Base+0xa08>
   31440:	mov	r3, r0
   31444:	mov	r0, r3
   31448:	sub	sp, fp, #16
   3144c:	ldrd	r4, [sp]
   31450:	ldr	r6, [sp, #8]
   31454:	ldr	fp, [sp, #12]
   31458:	add	sp, sp, #16
   3145c:	pop	{pc}		; (ldr pc, [sp], #4)

00031460 <flatcc_verify_vector_field@@Base>:
   31460:	strd	r4, [sp, #-20]!	; 0xffffffec
   31464:	str	r6, [sp, #8]
   31468:	str	fp, [sp, #12]
   3146c:	str	lr, [sp, #16]
   31470:	add	fp, sp, #16
   31474:	sub	sp, sp, #44	; 0x2c
   31478:	str	r0, [fp, #-32]	; 0xffffffe0
   3147c:	str	r2, [fp, #-40]	; 0xffffffd8
   31480:	str	r3, [fp, #-44]	; 0xffffffd4
   31484:	mov	r3, r1
   31488:	strh	r3, [fp, #-34]	; 0xffffffde
   3148c:	sub	r3, fp, #28
   31490:	ldrh	r1, [fp, #-34]	; 0xffffffde
   31494:	ldr	r2, [fp, #-40]	; 0xffffffd8
   31498:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3149c:	bl	307ec <flatcc_verify_error_string@@Base+0x8c8>
   314a0:	str	r0, [fp, #-24]	; 0xffffffe8
   314a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   314a8:	cmp	r3, #0
   314ac:	bne	314bc <flatcc_verify_vector_field@@Base+0x5c>
   314b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   314b4:	cmp	r3, #0
   314b8:	bne	314c4 <flatcc_verify_vector_field@@Base+0x64>
   314bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   314c0:	b	31524 <flatcc_verify_vector_field@@Base+0xc4>
   314c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   314c8:	ldr	r4, [r3]
   314cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   314d0:	ldr	r5, [r3, #4]
   314d4:	ldr	r6, [fp, #-28]	; 0xffffffe4
   314d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   314dc:	ldr	r3, [r3]
   314e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   314e4:	mov	r1, r2
   314e8:	mov	r0, r3
   314ec:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   314f0:	mov	r2, r0
   314f4:	ldr	r3, [fp, #8]
   314f8:	str	r3, [sp, #8]
   314fc:	ldrh	r3, [fp, #4]
   31500:	str	r3, [sp, #4]
   31504:	ldr	r3, [fp, #-44]	; 0xffffffd4
   31508:	str	r3, [sp]
   3150c:	mov	r3, r2
   31510:	mov	r2, r6
   31514:	mov	r1, r5
   31518:	mov	r0, r4
   3151c:	bl	30a34 <flatcc_verify_error_string@@Base+0xb10>
   31520:	mov	r3, r0
   31524:	mov	r0, r3
   31528:	sub	sp, fp, #16
   3152c:	ldrd	r4, [sp]
   31530:	ldr	r6, [sp, #8]
   31534:	ldr	fp, [sp, #12]
   31538:	add	sp, sp, #16
   3153c:	pop	{pc}		; (ldr pc, [sp], #4)

00031540 <flatcc_verify_string_vector_field@@Base>:
   31540:	strd	r4, [sp, #-20]!	; 0xffffffec
   31544:	str	r6, [sp, #8]
   31548:	str	fp, [sp, #12]
   3154c:	str	lr, [sp, #16]
   31550:	add	fp, sp, #16
   31554:	sub	sp, sp, #28
   31558:	str	r0, [fp, #-32]	; 0xffffffe0
   3155c:	mov	r3, r1
   31560:	str	r2, [fp, #-40]	; 0xffffffd8
   31564:	strh	r3, [fp, #-34]	; 0xffffffde
   31568:	sub	r3, fp, #28
   3156c:	ldrh	r1, [fp, #-34]	; 0xffffffde
   31570:	ldr	r2, [fp, #-40]	; 0xffffffd8
   31574:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31578:	bl	307ec <flatcc_verify_error_string@@Base+0x8c8>
   3157c:	str	r0, [fp, #-24]	; 0xffffffe8
   31580:	ldr	r3, [fp, #-24]	; 0xffffffe8
   31584:	cmp	r3, #0
   31588:	bne	31598 <flatcc_verify_string_vector_field@@Base+0x58>
   3158c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   31590:	cmp	r3, #0
   31594:	bne	315a0 <flatcc_verify_string_vector_field@@Base+0x60>
   31598:	ldr	r3, [fp, #-24]	; 0xffffffe8
   3159c:	b	315e4 <flatcc_verify_string_vector_field@@Base+0xa4>
   315a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   315a4:	ldr	r4, [r3]
   315a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   315ac:	ldr	r5, [r3, #4]
   315b0:	ldr	r6, [fp, #-28]	; 0xffffffe4
   315b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   315b8:	ldr	r3, [r3]
   315bc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   315c0:	mov	r1, r2
   315c4:	mov	r0, r3
   315c8:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   315cc:	mov	r3, r0
   315d0:	mov	r2, r6
   315d4:	mov	r1, r5
   315d8:	mov	r0, r4
   315dc:	bl	30b34 <flatcc_verify_error_string@@Base+0xc10>
   315e0:	mov	r3, r0
   315e4:	mov	r0, r3
   315e8:	sub	sp, fp, #16
   315ec:	ldrd	r4, [sp]
   315f0:	ldr	r6, [sp, #8]
   315f4:	ldr	fp, [sp, #12]
   315f8:	add	sp, sp, #16
   315fc:	pop	{pc}		; (ldr pc, [sp], #4)

00031600 <flatcc_verify_table_field@@Base>:
   31600:	strd	r4, [sp, #-20]!	; 0xffffffec
   31604:	str	r6, [sp, #8]
   31608:	str	fp, [sp, #12]
   3160c:	str	lr, [sp, #16]
   31610:	add	fp, sp, #16
   31614:	sub	sp, sp, #36	; 0x24
   31618:	str	r0, [fp, #-32]	; 0xffffffe0
   3161c:	str	r2, [fp, #-40]	; 0xffffffd8
   31620:	str	r3, [fp, #-44]	; 0xffffffd4
   31624:	mov	r3, r1
   31628:	strh	r3, [fp, #-34]	; 0xffffffde
   3162c:	sub	r3, fp, #28
   31630:	ldrh	r1, [fp, #-34]	; 0xffffffde
   31634:	ldr	r2, [fp, #-40]	; 0xffffffd8
   31638:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3163c:	bl	307ec <flatcc_verify_error_string@@Base+0x8c8>
   31640:	str	r0, [fp, #-24]	; 0xffffffe8
   31644:	ldr	r3, [fp, #-24]	; 0xffffffe8
   31648:	cmp	r3, #0
   3164c:	bne	3165c <flatcc_verify_table_field@@Base+0x5c>
   31650:	ldr	r3, [fp, #-28]	; 0xffffffe4
   31654:	cmp	r3, #0
   31658:	bne	31664 <flatcc_verify_table_field@@Base+0x64>
   3165c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   31660:	b	316c0 <flatcc_verify_table_field@@Base+0xc0>
   31664:	ldr	r3, [fp, #-32]	; 0xffffffe0
   31668:	ldr	r4, [r3]
   3166c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   31670:	ldr	r5, [r3, #4]
   31674:	ldr	r6, [fp, #-28]	; 0xffffffe4
   31678:	ldr	r3, [fp, #-32]	; 0xffffffe0
   3167c:	ldr	r3, [r3]
   31680:	ldr	r2, [fp, #-28]	; 0xffffffe4
   31684:	mov	r1, r2
   31688:	mov	r0, r3
   3168c:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   31690:	mov	r1, r0
   31694:	ldr	r3, [fp, #-32]	; 0xffffffe0
   31698:	ldr	r3, [r3, #8]
   3169c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   316a0:	str	r2, [sp, #4]
   316a4:	str	r3, [sp]
   316a8:	mov	r3, r1
   316ac:	mov	r2, r6
   316b0:	mov	r1, r5
   316b4:	mov	r0, r4
   316b8:	bl	30c8c <flatcc_verify_error_string@@Base+0xd68>
   316bc:	mov	r3, r0
   316c0:	mov	r0, r3
   316c4:	sub	sp, fp, #16
   316c8:	ldrd	r4, [sp]
   316cc:	ldr	r6, [sp, #8]
   316d0:	ldr	fp, [sp, #12]
   316d4:	add	sp, sp, #16
   316d8:	pop	{pc}		; (ldr pc, [sp], #4)

000316dc <flatcc_verify_table_vector_field@@Base>:
   316dc:	strd	r4, [sp, #-20]!	; 0xffffffec
   316e0:	str	r6, [sp, #8]
   316e4:	str	fp, [sp, #12]
   316e8:	str	lr, [sp, #16]
   316ec:	add	fp, sp, #16
   316f0:	sub	sp, sp, #36	; 0x24
   316f4:	str	r0, [fp, #-32]	; 0xffffffe0
   316f8:	str	r2, [fp, #-40]	; 0xffffffd8
   316fc:	str	r3, [fp, #-44]	; 0xffffffd4
   31700:	mov	r3, r1
   31704:	strh	r3, [fp, #-34]	; 0xffffffde
   31708:	sub	r3, fp, #28
   3170c:	ldrh	r1, [fp, #-34]	; 0xffffffde
   31710:	ldr	r2, [fp, #-40]	; 0xffffffd8
   31714:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31718:	bl	307ec <flatcc_verify_error_string@@Base+0x8c8>
   3171c:	str	r0, [fp, #-24]	; 0xffffffe8
   31720:	ldr	r3, [fp, #-24]	; 0xffffffe8
   31724:	cmp	r3, #0
   31728:	bne	31738 <flatcc_verify_table_vector_field@@Base+0x5c>
   3172c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   31730:	cmp	r3, #0
   31734:	bne	31740 <flatcc_verify_table_vector_field@@Base+0x64>
   31738:	ldr	r3, [fp, #-24]	; 0xffffffe8
   3173c:	b	3179c <flatcc_verify_table_vector_field@@Base+0xc0>
   31740:	ldr	r3, [fp, #-32]	; 0xffffffe0
   31744:	ldr	r4, [r3]
   31748:	ldr	r3, [fp, #-32]	; 0xffffffe0
   3174c:	ldr	r5, [r3, #4]
   31750:	ldr	r6, [fp, #-28]	; 0xffffffe4
   31754:	ldr	r3, [fp, #-32]	; 0xffffffe0
   31758:	ldr	r3, [r3]
   3175c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   31760:	mov	r1, r2
   31764:	mov	r0, r3
   31768:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   3176c:	mov	r1, r0
   31770:	ldr	r3, [fp, #-32]	; 0xffffffe0
   31774:	ldr	r3, [r3, #8]
   31778:	ldr	r2, [fp, #-44]	; 0xffffffd4
   3177c:	str	r2, [sp, #4]
   31780:	str	r3, [sp]
   31784:	mov	r3, r1
   31788:	mov	r2, r6
   3178c:	mov	r1, r5
   31790:	mov	r0, r4
   31794:	bl	30ef8 <flatcc_verify_error_string@@Base+0xfd4>
   31798:	mov	r3, r0
   3179c:	mov	r0, r3
   317a0:	sub	sp, fp, #16
   317a4:	ldrd	r4, [sp]
   317a8:	ldr	r6, [sp, #8]
   317ac:	ldr	fp, [sp, #12]
   317b0:	add	sp, sp, #16
   317b4:	pop	{pc}		; (ldr pc, [sp], #4)

000317b8 <flatcc_verify_union_table@@Base>:
   317b8:	str	fp, [sp, #-8]!
   317bc:	str	lr, [sp, #4]
   317c0:	add	fp, sp, #4
   317c4:	sub	sp, sp, #16
   317c8:	str	r0, [fp, #-8]
   317cc:	str	r1, [fp, #-12]
   317d0:	ldr	r3, [fp, #-8]
   317d4:	ldr	r0, [r3]
   317d8:	ldr	r3, [fp, #-8]
   317dc:	ldr	r1, [r3, #4]
   317e0:	ldr	r3, [fp, #-8]
   317e4:	ldr	ip, [r3, #16]
   317e8:	ldr	r3, [fp, #-8]
   317ec:	ldr	lr, [r3, #20]
   317f0:	ldr	r3, [fp, #-8]
   317f4:	ldr	r3, [r3, #8]
   317f8:	ldr	r2, [fp, #-12]
   317fc:	str	r2, [sp, #4]
   31800:	str	r3, [sp]
   31804:	mov	r3, lr
   31808:	mov	r2, ip
   3180c:	bl	30c8c <flatcc_verify_error_string@@Base+0xd68>
   31810:	mov	r3, r0
   31814:	mov	r0, r3
   31818:	sub	sp, fp, #4
   3181c:	ldr	fp, [sp]
   31820:	add	sp, sp, #4
   31824:	pop	{pc}		; (ldr pc, [sp], #4)

00031828 <flatcc_verify_union_struct@@Base>:
   31828:	str	fp, [sp, #-8]!
   3182c:	str	lr, [sp, #4]
   31830:	add	fp, sp, #4
   31834:	sub	sp, sp, #24
   31838:	str	r0, [fp, #-8]
   3183c:	str	r1, [fp, #-12]
   31840:	mov	r3, r2
   31844:	strh	r3, [fp, #-14]
   31848:	ldr	r3, [fp, #-8]
   3184c:	ldr	r0, [r3, #4]
   31850:	ldr	r3, [fp, #-8]
   31854:	ldr	r1, [r3, #16]
   31858:	ldr	r3, [fp, #-8]
   3185c:	ldr	r2, [r3, #20]
   31860:	ldrh	r3, [fp, #-14]
   31864:	str	r3, [sp]
   31868:	ldr	r3, [fp, #-12]
   3186c:	bl	3047c <flatcc_verify_error_string@@Base+0x558>
   31870:	mov	r3, r0
   31874:	mov	r0, r3
   31878:	sub	sp, fp, #4
   3187c:	ldr	fp, [sp]
   31880:	add	sp, sp, #4
   31884:	pop	{pc}		; (ldr pc, [sp], #4)

00031888 <flatcc_verify_union_string@@Base>:
   31888:	str	fp, [sp, #-8]!
   3188c:	str	lr, [sp, #4]
   31890:	add	fp, sp, #4
   31894:	sub	sp, sp, #8
   31898:	str	r0, [fp, #-8]
   3189c:	ldr	r3, [fp, #-8]
   318a0:	ldr	r0, [r3]
   318a4:	ldr	r3, [fp, #-8]
   318a8:	ldr	r1, [r3, #4]
   318ac:	ldr	r3, [fp, #-8]
   318b0:	ldr	r2, [r3, #16]
   318b4:	ldr	r3, [fp, #-8]
   318b8:	ldr	r3, [r3, #20]
   318bc:	bl	3092c <flatcc_verify_error_string@@Base+0xa08>
   318c0:	mov	r3, r0
   318c4:	mov	r0, r3
   318c8:	sub	sp, fp, #4
   318cc:	ldr	fp, [sp]
   318d0:	add	sp, sp, #4
   318d4:	pop	{pc}		; (ldr pc, [sp], #4)

000318d8 <flatcc_verify_buffer_header@@Base>:
   318d8:	str	fp, [sp, #-8]!
   318dc:	str	lr, [sp, #4]
   318e0:	add	fp, sp, #4
   318e4:	sub	sp, sp, #40	; 0x28
   318e8:	str	r0, [fp, #-32]	; 0xffffffe0
   318ec:	str	r1, [fp, #-36]	; 0xffffffdc
   318f0:	str	r2, [fp, #-40]	; 0xffffffd8
   318f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   318f8:	and	r3, r3, #3
   318fc:	cmp	r3, #0
   31900:	moveq	r3, #1
   31904:	movne	r3, #0
   31908:	uxtb	r3, r3
   3190c:	str	r3, [fp, #-8]
   31910:	ldr	r3, [fp, #-8]
   31914:	cmp	r3, #0
   31918:	bne	31924 <flatcc_verify_buffer_header@@Base+0x4c>
   3191c:	mov	r3, #5
   31920:	b	319e8 <flatcc_verify_buffer_header@@Base+0x110>
   31924:	ldr	r3, [fp, #-36]	; 0xffffffdc
   31928:	cmn	r3, #9
   3192c:	movls	r3, #1
   31930:	movhi	r3, #0
   31934:	uxtb	r3, r3
   31938:	str	r3, [fp, #-12]
   3193c:	ldr	r3, [fp, #-12]
   31940:	cmp	r3, #0
   31944:	bne	31950 <flatcc_verify_buffer_header@@Base+0x78>
   31948:	mov	r3, #6
   3194c:	b	319e8 <flatcc_verify_buffer_header@@Base+0x110>
   31950:	ldr	r3, [fp, #-36]	; 0xffffffdc
   31954:	cmp	r3, #7
   31958:	movhi	r3, #1
   3195c:	movls	r3, #0
   31960:	uxtb	r3, r3
   31964:	str	r3, [fp, #-16]
   31968:	ldr	r3, [fp, #-16]
   3196c:	cmp	r3, #0
   31970:	bne	3197c <flatcc_verify_buffer_header@@Base+0xa4>
   31974:	mov	r3, #1
   31978:	b	319e8 <flatcc_verify_buffer_header@@Base+0x110>
   3197c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   31980:	cmp	r3, #0
   31984:	beq	319e4 <flatcc_verify_buffer_header@@Base+0x10c>
   31988:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3198c:	bl	30288 <flatcc_verify_error_string@@Base+0x364>
   31990:	str	r0, [fp, #-20]	; 0xffffffec
   31994:	mov	r1, #4
   31998:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3199c:	bl	302dc <flatcc_verify_error_string@@Base+0x3b8>
   319a0:	str	r0, [fp, #-24]	; 0xffffffe8
   319a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   319a8:	cmp	r3, #0
   319ac:	beq	319c0 <flatcc_verify_buffer_header@@Base+0xe8>
   319b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   319b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   319b8:	cmp	r2, r3
   319bc:	bne	319c8 <flatcc_verify_buffer_header@@Base+0xf0>
   319c0:	mov	r3, #1
   319c4:	b	319cc <flatcc_verify_buffer_header@@Base+0xf4>
   319c8:	mov	r3, #0
   319cc:	str	r3, [fp, #-28]	; 0xffffffe4
   319d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   319d4:	cmp	r3, #0
   319d8:	bne	319e4 <flatcc_verify_buffer_header@@Base+0x10c>
   319dc:	mov	r3, #2
   319e0:	b	319e8 <flatcc_verify_buffer_header@@Base+0x110>
   319e4:	mov	r3, #0
   319e8:	mov	r0, r3
   319ec:	sub	sp, fp, #4
   319f0:	ldr	fp, [sp]
   319f4:	add	sp, sp, #4
   319f8:	pop	{pc}		; (ldr pc, [sp], #4)

000319fc <flatcc_verify_typed_buffer_header@@Base>:
   319fc:	str	fp, [sp, #-8]!
   31a00:	str	lr, [sp, #4]
   31a04:	add	fp, sp, #4
   31a08:	sub	sp, sp, #40	; 0x28
   31a0c:	str	r0, [fp, #-32]	; 0xffffffe0
   31a10:	str	r1, [fp, #-36]	; 0xffffffdc
   31a14:	str	r2, [fp, #-40]	; 0xffffffd8
   31a18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   31a1c:	and	r3, r3, #3
   31a20:	cmp	r3, #0
   31a24:	moveq	r3, #1
   31a28:	movne	r3, #0
   31a2c:	uxtb	r3, r3
   31a30:	str	r3, [fp, #-8]
   31a34:	ldr	r3, [fp, #-8]
   31a38:	cmp	r3, #0
   31a3c:	bne	31a48 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   31a40:	mov	r3, #5
   31a44:	b	31b08 <flatcc_verify_typed_buffer_header@@Base+0x10c>
   31a48:	ldr	r3, [fp, #-36]	; 0xffffffdc
   31a4c:	cmn	r3, #9
   31a50:	movls	r3, #1
   31a54:	movhi	r3, #0
   31a58:	uxtb	r3, r3
   31a5c:	str	r3, [fp, #-12]
   31a60:	ldr	r3, [fp, #-12]
   31a64:	cmp	r3, #0
   31a68:	bne	31a74 <flatcc_verify_typed_buffer_header@@Base+0x78>
   31a6c:	mov	r3, #6
   31a70:	b	31b08 <flatcc_verify_typed_buffer_header@@Base+0x10c>
   31a74:	ldr	r3, [fp, #-36]	; 0xffffffdc
   31a78:	cmp	r3, #7
   31a7c:	movhi	r3, #1
   31a80:	movls	r3, #0
   31a84:	uxtb	r3, r3
   31a88:	str	r3, [fp, #-16]
   31a8c:	ldr	r3, [fp, #-16]
   31a90:	cmp	r3, #0
   31a94:	bne	31aa0 <flatcc_verify_typed_buffer_header@@Base+0xa4>
   31a98:	mov	r3, #1
   31a9c:	b	31b08 <flatcc_verify_typed_buffer_header@@Base+0x10c>
   31aa0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   31aa4:	cmp	r3, #0
   31aa8:	beq	31b04 <flatcc_verify_typed_buffer_header@@Base+0x108>
   31aac:	ldr	r3, [fp, #-40]	; 0xffffffd8
   31ab0:	str	r3, [fp, #-20]	; 0xffffffec
   31ab4:	mov	r1, #4
   31ab8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31abc:	bl	302dc <flatcc_verify_error_string@@Base+0x3b8>
   31ac0:	str	r0, [fp, #-24]	; 0xffffffe8
   31ac4:	ldr	r3, [fp, #-20]	; 0xffffffec
   31ac8:	cmp	r3, #0
   31acc:	beq	31ae0 <flatcc_verify_typed_buffer_header@@Base+0xe4>
   31ad0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   31ad4:	ldr	r3, [fp, #-20]	; 0xffffffec
   31ad8:	cmp	r2, r3
   31adc:	bne	31ae8 <flatcc_verify_typed_buffer_header@@Base+0xec>
   31ae0:	mov	r3, #1
   31ae4:	b	31aec <flatcc_verify_typed_buffer_header@@Base+0xf0>
   31ae8:	mov	r3, #0
   31aec:	str	r3, [fp, #-28]	; 0xffffffe4
   31af0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   31af4:	cmp	r3, #0
   31af8:	bne	31b04 <flatcc_verify_typed_buffer_header@@Base+0x108>
   31afc:	mov	r3, #2
   31b00:	b	31b08 <flatcc_verify_typed_buffer_header@@Base+0x10c>
   31b04:	mov	r3, #0
   31b08:	mov	r0, r3
   31b0c:	sub	sp, fp, #4
   31b10:	ldr	fp, [sp]
   31b14:	add	sp, sp, #4
   31b18:	pop	{pc}		; (ldr pc, [sp], #4)

00031b1c <flatcc_verify_struct_as_root@@Base>:
   31b1c:	str	fp, [sp, #-8]!
   31b20:	str	lr, [sp, #4]
   31b24:	add	fp, sp, #4
   31b28:	sub	sp, sp, #24
   31b2c:	str	r0, [fp, #-8]
   31b30:	str	r1, [fp, #-12]
   31b34:	str	r2, [fp, #-16]
   31b38:	str	r3, [fp, #-20]	; 0xffffffec
   31b3c:	ldr	r2, [fp, #-16]
   31b40:	ldr	r1, [fp, #-12]
   31b44:	ldr	r0, [fp, #-8]
   31b48:	bl	318d8 <flatcc_verify_buffer_header@@Base>
   31b4c:	mov	r3, r0
   31b50:	cmp	r3, #0
   31b54:	beq	31b70 <flatcc_verify_struct_as_root@@Base+0x54>
   31b58:	ldr	r2, [fp, #-16]
   31b5c:	ldr	r1, [fp, #-12]
   31b60:	ldr	r0, [fp, #-8]
   31b64:	bl	318d8 <flatcc_verify_buffer_header@@Base>
   31b68:	mov	r3, r0
   31b6c:	b	31b9c <flatcc_verify_struct_as_root@@Base+0x80>
   31b70:	mov	r1, #0
   31b74:	ldr	r0, [fp, #-8]
   31b78:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   31b7c:	mov	r2, r0
   31b80:	ldrh	r3, [fp, #4]
   31b84:	str	r3, [sp]
   31b88:	ldr	r3, [fp, #-20]	; 0xffffffec
   31b8c:	mov	r1, #0
   31b90:	ldr	r0, [fp, #-12]
   31b94:	bl	3047c <flatcc_verify_error_string@@Base+0x558>
   31b98:	mov	r3, r0
   31b9c:	mov	r0, r3
   31ba0:	sub	sp, fp, #4
   31ba4:	ldr	fp, [sp]
   31ba8:	add	sp, sp, #4
   31bac:	pop	{pc}		; (ldr pc, [sp], #4)

00031bb0 <flatcc_verify_struct_as_typed_root@@Base>:
   31bb0:	str	fp, [sp, #-8]!
   31bb4:	str	lr, [sp, #4]
   31bb8:	add	fp, sp, #4
   31bbc:	sub	sp, sp, #24
   31bc0:	str	r0, [fp, #-8]
   31bc4:	str	r1, [fp, #-12]
   31bc8:	str	r2, [fp, #-16]
   31bcc:	str	r3, [fp, #-20]	; 0xffffffec
   31bd0:	ldr	r2, [fp, #-16]
   31bd4:	ldr	r1, [fp, #-12]
   31bd8:	ldr	r0, [fp, #-8]
   31bdc:	bl	319fc <flatcc_verify_typed_buffer_header@@Base>
   31be0:	mov	r3, r0
   31be4:	cmp	r3, #0
   31be8:	beq	31c04 <flatcc_verify_struct_as_typed_root@@Base+0x54>
   31bec:	ldr	r2, [fp, #-16]
   31bf0:	ldr	r1, [fp, #-12]
   31bf4:	ldr	r0, [fp, #-8]
   31bf8:	bl	319fc <flatcc_verify_typed_buffer_header@@Base>
   31bfc:	mov	r3, r0
   31c00:	b	31c30 <flatcc_verify_struct_as_typed_root@@Base+0x80>
   31c04:	mov	r1, #0
   31c08:	ldr	r0, [fp, #-8]
   31c0c:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   31c10:	mov	r2, r0
   31c14:	ldrh	r3, [fp, #4]
   31c18:	str	r3, [sp]
   31c1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   31c20:	mov	r1, #0
   31c24:	ldr	r0, [fp, #-12]
   31c28:	bl	3047c <flatcc_verify_error_string@@Base+0x558>
   31c2c:	mov	r3, r0
   31c30:	mov	r0, r3
   31c34:	sub	sp, fp, #4
   31c38:	ldr	fp, [sp]
   31c3c:	add	sp, sp, #4
   31c40:	pop	{pc}		; (ldr pc, [sp], #4)

00031c44 <flatcc_verify_table_as_root@@Base>:
   31c44:	str	fp, [sp, #-8]!
   31c48:	str	lr, [sp, #4]
   31c4c:	add	fp, sp, #4
   31c50:	sub	sp, sp, #24
   31c54:	str	r0, [fp, #-8]
   31c58:	str	r1, [fp, #-12]
   31c5c:	str	r2, [fp, #-16]
   31c60:	str	r3, [fp, #-20]	; 0xffffffec
   31c64:	ldr	r2, [fp, #-16]
   31c68:	ldr	r1, [fp, #-12]
   31c6c:	ldr	r0, [fp, #-8]
   31c70:	bl	318d8 <flatcc_verify_buffer_header@@Base>
   31c74:	mov	r3, r0
   31c78:	cmp	r3, #0
   31c7c:	beq	31c98 <flatcc_verify_table_as_root@@Base+0x54>
   31c80:	ldr	r2, [fp, #-16]
   31c84:	ldr	r1, [fp, #-12]
   31c88:	ldr	r0, [fp, #-8]
   31c8c:	bl	318d8 <flatcc_verify_buffer_header@@Base>
   31c90:	mov	r3, r0
   31c94:	b	31cd0 <flatcc_verify_table_as_root@@Base+0x8c>
   31c98:	mov	r1, #0
   31c9c:	ldr	r0, [fp, #-8]
   31ca0:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   31ca4:	mov	r2, r0
   31ca8:	ldr	r3, [fp, #-20]	; 0xffffffec
   31cac:	str	r3, [sp, #4]
   31cb0:	mov	r3, #100	; 0x64
   31cb4:	str	r3, [sp]
   31cb8:	mov	r3, r2
   31cbc:	mov	r2, #0
   31cc0:	ldr	r1, [fp, #-12]
   31cc4:	ldr	r0, [fp, #-8]
   31cc8:	bl	30c8c <flatcc_verify_error_string@@Base+0xd68>
   31ccc:	mov	r3, r0
   31cd0:	mov	r0, r3
   31cd4:	sub	sp, fp, #4
   31cd8:	ldr	fp, [sp]
   31cdc:	add	sp, sp, #4
   31ce0:	pop	{pc}		; (ldr pc, [sp], #4)

00031ce4 <flatcc_verify_table_as_typed_root@@Base>:
   31ce4:	str	fp, [sp, #-8]!
   31ce8:	str	lr, [sp, #4]
   31cec:	add	fp, sp, #4
   31cf0:	sub	sp, sp, #24
   31cf4:	str	r0, [fp, #-8]
   31cf8:	str	r1, [fp, #-12]
   31cfc:	str	r2, [fp, #-16]
   31d00:	str	r3, [fp, #-20]	; 0xffffffec
   31d04:	ldr	r2, [fp, #-16]
   31d08:	ldr	r1, [fp, #-12]
   31d0c:	ldr	r0, [fp, #-8]
   31d10:	bl	319fc <flatcc_verify_typed_buffer_header@@Base>
   31d14:	mov	r3, r0
   31d18:	cmp	r3, #0
   31d1c:	beq	31d38 <flatcc_verify_table_as_typed_root@@Base+0x54>
   31d20:	ldr	r2, [fp, #-16]
   31d24:	ldr	r1, [fp, #-12]
   31d28:	ldr	r0, [fp, #-8]
   31d2c:	bl	319fc <flatcc_verify_typed_buffer_header@@Base>
   31d30:	mov	r3, r0
   31d34:	b	31d70 <flatcc_verify_table_as_typed_root@@Base+0x8c>
   31d38:	mov	r1, #0
   31d3c:	ldr	r0, [fp, #-8]
   31d40:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   31d44:	mov	r2, r0
   31d48:	ldr	r3, [fp, #-20]	; 0xffffffec
   31d4c:	str	r3, [sp, #4]
   31d50:	mov	r3, #100	; 0x64
   31d54:	str	r3, [sp]
   31d58:	mov	r3, r2
   31d5c:	mov	r2, #0
   31d60:	ldr	r1, [fp, #-12]
   31d64:	ldr	r0, [fp, #-8]
   31d68:	bl	30c8c <flatcc_verify_error_string@@Base+0xd68>
   31d6c:	mov	r3, r0
   31d70:	mov	r0, r3
   31d74:	sub	sp, fp, #4
   31d78:	ldr	fp, [sp]
   31d7c:	add	sp, sp, #4
   31d80:	pop	{pc}		; (ldr pc, [sp], #4)

00031d84 <flatcc_verify_struct_as_nested_root@@Base>:
   31d84:	str	fp, [sp, #-8]!
   31d88:	str	lr, [sp, #4]
   31d8c:	add	fp, sp, #4
   31d90:	sub	sp, sp, #32
   31d94:	str	r0, [fp, #-16]
   31d98:	str	r2, [fp, #-24]	; 0xffffffe8
   31d9c:	str	r3, [fp, #-28]	; 0xffffffe4
   31da0:	mov	r3, r1
   31da4:	strh	r3, [fp, #-18]	; 0xffffffee
   31da8:	ldrh	r2, [fp, #8]
   31dac:	ldrh	r1, [fp, #-18]	; 0xffffffee
   31db0:	mvn	r3, #0
   31db4:	str	r3, [sp, #4]
   31db8:	mov	r3, #1
   31dbc:	str	r3, [sp]
   31dc0:	mov	r3, r2
   31dc4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   31dc8:	ldr	r0, [fp, #-16]
   31dcc:	bl	31460 <flatcc_verify_vector_field@@Base>
   31dd0:	mov	r3, r0
   31dd4:	cmp	r3, #0
   31dd8:	beq	31e0c <flatcc_verify_struct_as_nested_root@@Base+0x88>
   31ddc:	ldrh	r2, [fp, #8]
   31de0:	ldrh	r1, [fp, #-18]	; 0xffffffee
   31de4:	mvn	r3, #0
   31de8:	str	r3, [sp, #4]
   31dec:	mov	r3, #1
   31df0:	str	r3, [sp]
   31df4:	mov	r3, r2
   31df8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   31dfc:	ldr	r0, [fp, #-16]
   31e00:	bl	31460 <flatcc_verify_vector_field@@Base>
   31e04:	mov	r3, r0
   31e08:	b	31e8c <flatcc_verify_struct_as_nested_root@@Base+0x108>
   31e0c:	ldrh	r3, [fp, #-18]	; 0xffffffee
   31e10:	mov	r1, r3
   31e14:	ldr	r0, [fp, #-16]
   31e18:	bl	30610 <flatcc_verify_error_string@@Base+0x6ec>
   31e1c:	str	r0, [fp, #-8]
   31e20:	ldr	r3, [fp, #-8]
   31e24:	cmp	r3, #0
   31e28:	bne	31e34 <flatcc_verify_struct_as_nested_root@@Base+0xb0>
   31e2c:	mov	r3, #0
   31e30:	b	31e8c <flatcc_verify_struct_as_nested_root@@Base+0x108>
   31e34:	mov	r1, #0
   31e38:	ldr	r0, [fp, #-8]
   31e3c:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   31e40:	mov	r2, r0
   31e44:	ldr	r3, [fp, #-8]
   31e48:	add	r3, r2, r3
   31e4c:	str	r3, [fp, #-8]
   31e50:	mov	r1, #0
   31e54:	ldr	r0, [fp, #-8]
   31e58:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   31e5c:	str	r0, [fp, #-12]
   31e60:	ldr	r3, [fp, #-8]
   31e64:	add	r3, r3, #4
   31e68:	str	r3, [fp, #-8]
   31e6c:	ldrh	r3, [fp, #8]
   31e70:	str	r3, [sp]
   31e74:	ldr	r3, [fp, #4]
   31e78:	ldr	r2, [fp, #-28]	; 0xffffffe4
   31e7c:	ldr	r1, [fp, #-12]
   31e80:	ldr	r0, [fp, #-8]
   31e84:	bl	31b1c <flatcc_verify_struct_as_root@@Base>
   31e88:	mov	r3, r0
   31e8c:	mov	r0, r3
   31e90:	sub	sp, fp, #4
   31e94:	ldr	fp, [sp]
   31e98:	add	sp, sp, #4
   31e9c:	pop	{pc}		; (ldr pc, [sp], #4)

00031ea0 <flatcc_verify_table_as_nested_root@@Base>:
   31ea0:	str	fp, [sp, #-8]!
   31ea4:	str	lr, [sp, #4]
   31ea8:	add	fp, sp, #4
   31eac:	sub	sp, sp, #32
   31eb0:	str	r0, [fp, #-16]
   31eb4:	str	r2, [fp, #-24]	; 0xffffffe8
   31eb8:	str	r3, [fp, #-28]	; 0xffffffe4
   31ebc:	mov	r3, r1
   31ec0:	strh	r3, [fp, #-18]	; 0xffffffee
   31ec4:	ldrh	r2, [fp, #4]
   31ec8:	ldrh	r1, [fp, #-18]	; 0xffffffee
   31ecc:	mvn	r3, #0
   31ed0:	str	r3, [sp, #4]
   31ed4:	mov	r3, #1
   31ed8:	str	r3, [sp]
   31edc:	mov	r3, r2
   31ee0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   31ee4:	ldr	r0, [fp, #-16]
   31ee8:	bl	31460 <flatcc_verify_vector_field@@Base>
   31eec:	mov	r3, r0
   31ef0:	cmp	r3, #0
   31ef4:	beq	31f28 <flatcc_verify_table_as_nested_root@@Base+0x88>
   31ef8:	ldrh	r2, [fp, #4]
   31efc:	ldrh	r1, [fp, #-18]	; 0xffffffee
   31f00:	mvn	r3, #0
   31f04:	str	r3, [sp, #4]
   31f08:	mov	r3, #1
   31f0c:	str	r3, [sp]
   31f10:	mov	r3, r2
   31f14:	ldr	r2, [fp, #-24]	; 0xffffffe8
   31f18:	ldr	r0, [fp, #-16]
   31f1c:	bl	31460 <flatcc_verify_vector_field@@Base>
   31f20:	mov	r3, r0
   31f24:	b	31ff8 <flatcc_verify_table_as_nested_root@@Base+0x158>
   31f28:	ldrh	r3, [fp, #-18]	; 0xffffffee
   31f2c:	mov	r1, r3
   31f30:	ldr	r0, [fp, #-16]
   31f34:	bl	30610 <flatcc_verify_error_string@@Base+0x6ec>
   31f38:	str	r0, [fp, #-8]
   31f3c:	ldr	r3, [fp, #-8]
   31f40:	cmp	r3, #0
   31f44:	bne	31f50 <flatcc_verify_table_as_nested_root@@Base+0xb0>
   31f48:	mov	r3, #0
   31f4c:	b	31ff8 <flatcc_verify_table_as_nested_root@@Base+0x158>
   31f50:	mov	r1, #0
   31f54:	ldr	r0, [fp, #-8]
   31f58:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   31f5c:	mov	r2, r0
   31f60:	ldr	r3, [fp, #-8]
   31f64:	add	r3, r2, r3
   31f68:	str	r3, [fp, #-8]
   31f6c:	mov	r1, #0
   31f70:	ldr	r0, [fp, #-8]
   31f74:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   31f78:	str	r0, [fp, #-12]
   31f7c:	ldr	r3, [fp, #-8]
   31f80:	add	r3, r3, #4
   31f84:	str	r3, [fp, #-8]
   31f88:	ldr	r2, [fp, #-28]	; 0xffffffe4
   31f8c:	ldr	r1, [fp, #-12]
   31f90:	ldr	r0, [fp, #-8]
   31f94:	bl	318d8 <flatcc_verify_buffer_header@@Base>
   31f98:	mov	r3, r0
   31f9c:	cmp	r3, #0
   31fa0:	beq	31fbc <flatcc_verify_table_as_nested_root@@Base+0x11c>
   31fa4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   31fa8:	ldr	r1, [fp, #-12]
   31fac:	ldr	r0, [fp, #-8]
   31fb0:	bl	318d8 <flatcc_verify_buffer_header@@Base>
   31fb4:	mov	r3, r0
   31fb8:	b	31ff8 <flatcc_verify_table_as_nested_root@@Base+0x158>
   31fbc:	mov	r1, #0
   31fc0:	ldr	r0, [fp, #-8]
   31fc4:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   31fc8:	mov	r1, r0
   31fcc:	ldr	r3, [fp, #-16]
   31fd0:	ldr	r3, [r3, #8]
   31fd4:	ldr	r2, [fp, #8]
   31fd8:	str	r2, [sp, #4]
   31fdc:	str	r3, [sp]
   31fe0:	mov	r3, r1
   31fe4:	mov	r2, #0
   31fe8:	ldr	r1, [fp, #-12]
   31fec:	ldr	r0, [fp, #-8]
   31ff0:	bl	30c8c <flatcc_verify_error_string@@Base+0xd68>
   31ff4:	mov	r3, r0
   31ff8:	mov	r0, r3
   31ffc:	sub	sp, fp, #4
   32000:	ldr	fp, [sp]
   32004:	add	sp, sp, #4
   32008:	pop	{pc}		; (ldr pc, [sp], #4)

0003200c <flatcc_verify_union_field@@Base>:
   3200c:	str	fp, [sp, #-8]!
   32010:	str	lr, [sp, #4]
   32014:	add	fp, sp, #4
   32018:	sub	sp, sp, #80	; 0x50
   3201c:	str	r0, [fp, #-64]	; 0xffffffc0
   32020:	str	r2, [fp, #-72]	; 0xffffffb8
   32024:	str	r3, [fp, #-76]	; 0xffffffb4
   32028:	mov	r3, r1
   3202c:	strh	r3, [fp, #-66]	; 0xffffffbe
   32030:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   32034:	sub	r3, r3, #1
   32038:	uxth	r3, r3
   3203c:	mov	r1, r3
   32040:	ldr	r0, [fp, #-64]	; 0xffffffc0
   32044:	bl	30594 <flatcc_verify_error_string@@Base+0x670>
   32048:	mov	r3, r0
   3204c:	strh	r3, [fp, #-6]
   32050:	ldrh	r3, [fp, #-6]
   32054:	cmp	r3, #0
   32058:	bne	320d4 <flatcc_verify_union_field@@Base+0xc8>
   3205c:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   32060:	mov	r1, r3
   32064:	ldr	r0, [fp, #-64]	; 0xffffffc0
   32068:	bl	30594 <flatcc_verify_error_string@@Base+0x670>
   3206c:	mov	r3, r0
   32070:	strh	r3, [fp, #-8]
   32074:	ldrh	r3, [fp, #-8]
   32078:	cmp	r3, #0
   3207c:	moveq	r3, #1
   32080:	movne	r3, #0
   32084:	uxtb	r3, r3
   32088:	str	r3, [fp, #-12]
   3208c:	ldr	r3, [fp, #-12]
   32090:	cmp	r3, #0
   32094:	bne	320a0 <flatcc_verify_union_field@@Base+0x94>
   32098:	mov	r3, #23
   3209c:	b	32264 <flatcc_verify_union_field@@Base+0x258>
   320a0:	ldr	r3, [fp, #-72]	; 0xffffffb8
   320a4:	cmp	r3, #0
   320a8:	moveq	r3, #1
   320ac:	movne	r3, #0
   320b0:	uxtb	r3, r3
   320b4:	str	r3, [fp, #-16]
   320b8:	ldr	r3, [fp, #-16]
   320bc:	cmp	r3, #0
   320c0:	bne	320cc <flatcc_verify_union_field@@Base+0xc0>
   320c4:	mov	r3, #21
   320c8:	b	32264 <flatcc_verify_union_field@@Base+0x258>
   320cc:	mov	r3, #0
   320d0:	b	32264 <flatcc_verify_union_field@@Base+0x258>
   320d4:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   320d8:	sub	r3, r3, #1
   320dc:	uxth	r1, r3
   320e0:	mov	r3, #1
   320e4:	str	r3, [sp]
   320e8:	mov	r3, #1
   320ec:	mov	r2, #0
   320f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   320f4:	bl	30688 <flatcc_verify_error_string@@Base+0x764>
   320f8:	mov	r3, r0
   320fc:	cmp	r3, #0
   32100:	beq	32130 <flatcc_verify_union_field@@Base+0x124>
   32104:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   32108:	sub	r3, r3, #1
   3210c:	uxth	r1, r3
   32110:	mov	r3, #1
   32114:	str	r3, [sp]
   32118:	mov	r3, #1
   3211c:	mov	r2, #0
   32120:	ldr	r0, [fp, #-64]	; 0xffffffc0
   32124:	bl	30688 <flatcc_verify_error_string@@Base+0x764>
   32128:	mov	r3, r0
   3212c:	b	32264 <flatcc_verify_union_field@@Base+0x258>
   32130:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   32134:	mov	r1, r3
   32138:	ldr	r0, [fp, #-64]	; 0xffffffc0
   3213c:	bl	30594 <flatcc_verify_error_string@@Base+0x670>
   32140:	mov	r3, r0
   32144:	strh	r3, [fp, #-8]
   32148:	ldr	r3, [fp, #-64]	; 0xffffffc0
   3214c:	ldr	r2, [r3]
   32150:	ldr	r3, [fp, #-64]	; 0xffffffc0
   32154:	ldr	r1, [r3, #16]
   32158:	ldrh	r3, [fp, #-6]
   3215c:	add	r3, r1, r3
   32160:	add	r3, r2, r3
   32164:	str	r3, [fp, #-20]	; 0xffffffec
   32168:	ldr	r3, [fp, #-20]	; 0xffffffec
   3216c:	ldrb	r3, [r3]
   32170:	cmp	r3, #0
   32174:	bne	32184 <flatcc_verify_union_field@@Base+0x178>
   32178:	ldrh	r3, [fp, #-8]
   3217c:	cmp	r3, #0
   32180:	bne	3218c <flatcc_verify_union_field@@Base+0x180>
   32184:	mov	r3, #1
   32188:	b	32190 <flatcc_verify_union_field@@Base+0x184>
   3218c:	mov	r3, #0
   32190:	str	r3, [fp, #-24]	; 0xffffffe8
   32194:	ldr	r3, [fp, #-24]	; 0xffffffe8
   32198:	cmp	r3, #0
   3219c:	bne	321a8 <flatcc_verify_union_field@@Base+0x19c>
   321a0:	mov	r3, #24
   321a4:	b	32264 <flatcc_verify_union_field@@Base+0x258>
   321a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   321ac:	ldrb	r3, [r3]
   321b0:	cmp	r3, #0
   321b4:	bne	321c0 <flatcc_verify_union_field@@Base+0x1b4>
   321b8:	mov	r3, #0
   321bc:	b	32264 <flatcc_verify_union_field@@Base+0x258>
   321c0:	sub	r3, fp, #32
   321c4:	ldrh	r1, [fp, #-66]	; 0xffffffbe
   321c8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   321cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   321d0:	bl	307ec <flatcc_verify_error_string@@Base+0x8c8>
   321d4:	str	r0, [fp, #-28]	; 0xffffffe4
   321d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   321dc:	cmp	r3, #0
   321e0:	bne	321f0 <flatcc_verify_union_field@@Base+0x1e4>
   321e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   321e8:	cmp	r3, #0
   321ec:	bne	321f8 <flatcc_verify_union_field@@Base+0x1ec>
   321f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   321f4:	b	32264 <flatcc_verify_union_field@@Base+0x258>
   321f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   321fc:	ldr	r3, [r3]
   32200:	str	r3, [fp, #-56]	; 0xffffffc8
   32204:	ldr	r3, [fp, #-64]	; 0xffffffc0
   32208:	ldr	r3, [r3, #4]
   3220c:	str	r3, [fp, #-52]	; 0xffffffcc
   32210:	ldr	r3, [fp, #-64]	; 0xffffffc0
   32214:	ldr	r3, [r3, #8]
   32218:	str	r3, [fp, #-48]	; 0xffffffd0
   3221c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   32220:	str	r3, [fp, #-40]	; 0xffffffd8
   32224:	ldr	r3, [fp, #-64]	; 0xffffffc0
   32228:	ldr	r3, [r3]
   3222c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   32230:	mov	r1, r2
   32234:	mov	r0, r3
   32238:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   3223c:	mov	r3, r0
   32240:	str	r3, [fp, #-36]	; 0xffffffdc
   32244:	ldr	r3, [fp, #-20]	; 0xffffffec
   32248:	ldrb	r3, [r3]
   3224c:	strb	r3, [fp, #-44]	; 0xffffffd4
   32250:	sub	r2, fp, #56	; 0x38
   32254:	ldr	r3, [fp, #-76]	; 0xffffffb4
   32258:	mov	r0, r2
   3225c:	blx	r3
   32260:	mov	r3, r0
   32264:	mov	r0, r3
   32268:	sub	sp, fp, #4
   3226c:	ldr	fp, [sp]
   32270:	add	sp, sp, #4
   32274:	pop	{pc}		; (ldr pc, [sp], #4)

00032278 <flatcc_verify_union_vector_field@@Base>:
   32278:	strd	r4, [sp, #-20]!	; 0xffffffec
   3227c:	str	r6, [sp, #8]
   32280:	str	fp, [sp, #12]
   32284:	str	lr, [sp, #16]
   32288:	add	fp, sp, #16
   3228c:	sub	sp, sp, #68	; 0x44
   32290:	str	r0, [fp, #-56]	; 0xffffffc8
   32294:	str	r2, [fp, #-64]	; 0xffffffc0
   32298:	str	r3, [fp, #-68]	; 0xffffffbc
   3229c:	mov	r3, r1
   322a0:	strh	r3, [fp, #-58]	; 0xffffffc6
   322a4:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   322a8:	sub	r3, r3, #1
   322ac:	uxth	r3, r3
   322b0:	mov	r1, r3
   322b4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   322b8:	bl	30594 <flatcc_verify_error_string@@Base+0x670>
   322bc:	mov	r3, r0
   322c0:	strh	r3, [fp, #-22]	; 0xffffffea
   322c4:	ldrh	r3, [fp, #-22]	; 0xffffffea
   322c8:	cmp	r3, #0
   322cc:	bne	32320 <flatcc_verify_union_vector_field@@Base+0xa8>
   322d0:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   322d4:	mov	r1, r3
   322d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   322dc:	bl	30594 <flatcc_verify_error_string@@Base+0x670>
   322e0:	mov	r3, r0
   322e4:	strh	r3, [fp, #-24]	; 0xffffffe8
   322e8:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   322ec:	cmp	r3, #0
   322f0:	bne	32320 <flatcc_verify_union_vector_field@@Base+0xa8>
   322f4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   322f8:	cmp	r3, #0
   322fc:	moveq	r3, #1
   32300:	movne	r3, #0
   32304:	uxtb	r3, r3
   32308:	str	r3, [fp, #-28]	; 0xffffffe4
   3230c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   32310:	cmp	r3, #0
   32314:	bne	32320 <flatcc_verify_union_vector_field@@Base+0xa8>
   32318:	mov	r3, #22
   3231c:	b	324a0 <flatcc_verify_union_vector_field@@Base+0x228>
   32320:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   32324:	sub	r3, r3, #1
   32328:	uxth	r1, r3
   3232c:	mvn	r3, #0
   32330:	str	r3, [sp, #4]
   32334:	mov	r3, #1
   32338:	str	r3, [sp]
   3233c:	mov	r3, #1
   32340:	ldr	r2, [fp, #-64]	; 0xffffffc0
   32344:	ldr	r0, [fp, #-56]	; 0xffffffc8
   32348:	bl	31460 <flatcc_verify_vector_field@@Base>
   3234c:	mov	r3, r0
   32350:	cmp	r3, #0
   32354:	beq	3238c <flatcc_verify_union_vector_field@@Base+0x114>
   32358:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   3235c:	sub	r3, r3, #1
   32360:	uxth	r1, r3
   32364:	mvn	r3, #0
   32368:	str	r3, [sp, #4]
   3236c:	mov	r3, #1
   32370:	str	r3, [sp]
   32374:	mov	r3, #1
   32378:	ldr	r2, [fp, #-64]	; 0xffffffc0
   3237c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   32380:	bl	31460 <flatcc_verify_vector_field@@Base>
   32384:	mov	r3, r0
   32388:	b	324a0 <flatcc_verify_union_vector_field@@Base+0x228>
   3238c:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   32390:	sub	r3, r3, #1
   32394:	uxth	r3, r3
   32398:	mov	r1, r3
   3239c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   323a0:	bl	30610 <flatcc_verify_error_string@@Base+0x6ec>
   323a4:	str	r0, [fp, #-32]	; 0xffffffe0
   323a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   323ac:	cmp	r3, #0
   323b0:	bne	323bc <flatcc_verify_union_vector_field@@Base+0x144>
   323b4:	mov	r3, #0
   323b8:	b	324a0 <flatcc_verify_union_vector_field@@Base+0x228>
   323bc:	mov	r1, #0
   323c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   323c4:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   323c8:	mov	r2, r0
   323cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   323d0:	add	r3, r2, r3
   323d4:	str	r3, [fp, #-32]	; 0xffffffe0
   323d8:	mov	r1, #0
   323dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   323e0:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   323e4:	str	r0, [fp, #-36]	; 0xffffffdc
   323e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   323ec:	add	r3, r3, #4
   323f0:	str	r3, [fp, #-32]	; 0xffffffe0
   323f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   323f8:	str	r3, [fp, #-40]	; 0xffffffd8
   323fc:	sub	r3, fp, #48	; 0x30
   32400:	ldrh	r1, [fp, #-58]	; 0xffffffc6
   32404:	ldr	r2, [fp, #-64]	; 0xffffffc0
   32408:	ldr	r0, [fp, #-56]	; 0xffffffc8
   3240c:	bl	307ec <flatcc_verify_error_string@@Base+0x8c8>
   32410:	str	r0, [fp, #-44]	; 0xffffffd4
   32414:	ldr	r3, [fp, #-44]	; 0xffffffd4
   32418:	cmp	r3, #0
   3241c:	bne	3242c <flatcc_verify_union_vector_field@@Base+0x1b4>
   32420:	ldr	r3, [fp, #-48]	; 0xffffffd0
   32424:	cmp	r3, #0
   32428:	bne	32434 <flatcc_verify_union_vector_field@@Base+0x1bc>
   3242c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   32430:	b	324a0 <flatcc_verify_union_vector_field@@Base+0x228>
   32434:	ldr	r3, [fp, #-56]	; 0xffffffc8
   32438:	ldr	r4, [r3]
   3243c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   32440:	ldr	r5, [r3, #4]
   32444:	ldr	r6, [fp, #-48]	; 0xffffffd0
   32448:	ldr	r3, [fp, #-56]	; 0xffffffc8
   3244c:	ldr	r3, [r3]
   32450:	ldr	r2, [fp, #-48]	; 0xffffffd0
   32454:	mov	r1, r2
   32458:	mov	r0, r3
   3245c:	bl	30244 <flatcc_verify_error_string@@Base+0x320>
   32460:	mov	r1, r0
   32464:	ldr	r3, [fp, #-56]	; 0xffffffc8
   32468:	ldr	r3, [r3, #8]
   3246c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   32470:	str	r2, [sp, #12]
   32474:	str	r3, [sp, #8]
   32478:	ldr	r3, [fp, #-40]	; 0xffffffd8
   3247c:	str	r3, [sp, #4]
   32480:	ldr	r3, [fp, #-36]	; 0xffffffdc
   32484:	str	r3, [sp]
   32488:	mov	r3, r1
   3248c:	mov	r2, r6
   32490:	mov	r1, r5
   32494:	mov	r0, r4
   32498:	bl	310ac <flatcc_verify_error_string@@Base+0x1188>
   3249c:	mov	r3, r0
   324a0:	mov	r0, r3
   324a4:	sub	sp, fp, #16
   324a8:	ldrd	r4, [sp]
   324ac:	ldr	r6, [sp, #8]
   324b0:	ldr	fp, [sp, #12]
   324b4:	add	sp, sp, #16
   324b8:	pop	{pc}		; (ldr pc, [sp], #4)

000324bc <__libc_csu_init@@Base>:
   324bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   324c0:	mov	r7, r0
   324c4:	ldr	r6, [pc, #72]	; 32514 <__libc_csu_init@@Base+0x58>
   324c8:	ldr	r5, [pc, #72]	; 32518 <__libc_csu_init@@Base+0x5c>
   324cc:	add	r6, pc, r6
   324d0:	add	r5, pc, r5
   324d4:	sub	r6, r6, r5
   324d8:	mov	r8, r1
   324dc:	mov	r9, r2
   324e0:	bl	128c4 <strcmp@plt-0x20>
   324e4:	asrs	r6, r6, #2
   324e8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   324ec:	mov	r4, #0
   324f0:	add	r4, r4, #1
   324f4:	ldr	r3, [r5], #4
   324f8:	mov	r2, r9
   324fc:	mov	r1, r8
   32500:	mov	r0, r7
   32504:	blx	r3
   32508:	cmp	r6, r4
   3250c:	bne	324f0 <__libc_csu_init@@Base+0x34>
   32510:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32514:	andeq	r5, r1, r0, asr #20
   32518:	andeq	r5, r1, r8, lsr sl

0003251c <__libc_csu_fini@@Base>:
   3251c:	bx	lr

Disassembly of section .fini:

00032520 <.fini>:
   32520:	push	{r3, lr}
   32524:	pop	{r3, pc}
