
../repos/Snaipe-Mimick-1dc4659/test/mmk_test:     file format elf32-littlearm


Disassembly of section .init:

0001140c <.init>:
   1140c:	push	{r3, lr}
   11410:	bl	11570 <_start@@Base+0x3c>
   11414:	pop	{r3, pc}

Disassembly of section .plt:

00011418 <strstr@plt-0x14>:
   11418:	push	{lr}		; (str lr, [sp, #-4]!)
   1141c:	ldr	lr, [pc, #4]	; 11428 <strstr@plt-0x4>
   11420:	add	lr, pc, lr
   11424:	ldr	pc, [lr, #8]!
   11428:	ldrdeq	r4, [r1], -r8

0001142c <strstr@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #20, 20	; 0x14000
   11434:	ldr	pc, [ip, #3032]!	; 0xbd8

00011438 <strcmp@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #20, 20	; 0x14000
   11440:	ldr	pc, [ip, #3024]!	; 0xbd0

00011444 <mprotect@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #20, 20	; 0x14000
   1144c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011450 <free@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #20, 20	; 0x14000
   11458:	ldr	pc, [ip, #3008]!	; 0xbc0

0001145c <memcpy@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #20, 20	; 0x14000
   11464:	ldr	pc, [ip, #3000]!	; 0xbb8

00011468 <fn_vv@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #20, 20	; 0x14000
   11470:	ldr	pc, [ip, #2992]!	; 0xbb0

00011474 <realloc@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #20, 20	; 0x14000
   1147c:	ldr	pc, [ip, #2984]!	; 0xba8

00011480 <fn_ii@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #20, 20	; 0x14000
   11488:	ldr	pc, [ip, #2976]!	; 0xba0

0001148c <fn_ii_va@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #20, 20	; 0x14000
   11494:	ldr	pc, [ip, #2968]!	; 0xb98

00011498 <malloc@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #20, 20	; 0x14000
   114a0:	ldr	pc, [ip, #2960]!	; 0xb90

000114a4 <__libc_start_main@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #20, 20	; 0x14000
   114ac:	ldr	pc, [ip, #2952]!	; 0xb88

000114b0 <__gmon_start__@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #20, 20	; 0x14000
   114b8:	ldr	pc, [ip, #2944]!	; 0xb80

000114bc <strlen@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #20, 20	; 0x14000
   114c4:	ldr	pc, [ip, #2936]!	; 0xb78

000114c8 <mmap@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #20, 20	; 0x14000
   114d0:	ldr	pc, [ip, #2928]!	; 0xb70

000114d4 <strchr@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #20, 20	; 0x14000
   114dc:	ldr	pc, [ip, #2920]!	; 0xb68

000114e0 <fprintf@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #20, 20	; 0x14000
   114e8:	ldr	pc, [ip, #2912]!	; 0xb60

000114ec <__errno_location@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #20, 20	; 0x14000
   114f4:	ldr	pc, [ip, #2904]!	; 0xb58

000114f8 <snprintf@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #20, 20	; 0x14000
   11500:	ldr	pc, [ip, #2896]!	; 0xb50

00011504 <munmap@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #20, 20	; 0x14000
   1150c:	ldr	pc, [ip, #2888]!	; 0xb48

00011510 <__tls_get_addr@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #20, 20	; 0x14000
   11518:	ldr	pc, [ip, #2880]!	; 0xb40

0001151c <strncmp@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #20, 20	; 0x14000
   11524:	ldr	pc, [ip, #2872]!	; 0xb38

00011528 <abort@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #20, 20	; 0x14000
   11530:	ldr	pc, [ip, #2864]!	; 0xb30

Disassembly of section .text:

00011534 <_start@@Base>:
   11534:	mov	fp, #0
   11538:	mov	lr, #0
   1153c:	pop	{r1}		; (ldr r1, [sp], #4)
   11540:	mov	r2, sp
   11544:	push	{r2}		; (str r2, [sp, #-4]!)
   11548:	push	{r0}		; (str r0, [sp, #-4]!)
   1154c:	ldr	ip, [pc, #16]	; 11564 <_start@@Base+0x30>
   11550:	push	{ip}		; (str ip, [sp, #-4]!)
   11554:	ldr	r0, [pc, #12]	; 11568 <_start@@Base+0x34>
   11558:	ldr	r3, [pc, #12]	; 1156c <_start@@Base+0x38>
   1155c:	bl	114a4 <__libc_start_main@plt>
   11560:	bl	11528 <abort@plt>
   11564:	andeq	r4, r1, ip, ror #25
   11568:	andeq	r1, r1, ip, lsr r6
   1156c:	andeq	r4, r1, ip, lsl #25
   11570:	ldr	r3, [pc, #20]	; 1158c <_start@@Base+0x58>
   11574:	ldr	r2, [pc, #20]	; 11590 <_start@@Base+0x5c>
   11578:	add	r3, pc, r3
   1157c:	ldr	r2, [r3, r2]
   11580:	cmp	r2, #0
   11584:	bxeq	lr
   11588:	b	114b0 <__gmon_start__@plt>
   1158c:	andeq	r4, r1, r0, lsl #21
   11590:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   11594:	ldr	r0, [pc, #24]	; 115b4 <_start@@Base+0x80>
   11598:	ldr	r3, [pc, #24]	; 115b8 <_start@@Base+0x84>
   1159c:	cmp	r3, r0
   115a0:	bxeq	lr
   115a4:	ldr	r3, [pc, #16]	; 115bc <_start@@Base+0x88>
   115a8:	cmp	r3, #0
   115ac:	bxeq	lr
   115b0:	bx	r3
   115b4:	ldrdeq	r6, [r2], -r4
   115b8:	ldrdeq	r6, [r2], -r4
   115bc:	andeq	r0, r0, r0
   115c0:	ldr	r0, [pc, #36]	; 115ec <_start@@Base+0xb8>
   115c4:	ldr	r1, [pc, #36]	; 115f0 <_start@@Base+0xbc>
   115c8:	sub	r1, r1, r0
   115cc:	asr	r1, r1, #2
   115d0:	add	r1, r1, r1, lsr #31
   115d4:	asrs	r1, r1, #1
   115d8:	bxeq	lr
   115dc:	ldr	r3, [pc, #16]	; 115f4 <_start@@Base+0xc0>
   115e0:	cmp	r3, #0
   115e4:	bxeq	lr
   115e8:	bx	r3
   115ec:	ldrdeq	r6, [r2], -r4
   115f0:	ldrdeq	r6, [r2], -r4
   115f4:	andeq	r0, r0, r0
   115f8:	push	{r4, lr}
   115fc:	ldr	r4, [pc, #24]	; 1161c <_start@@Base+0xe8>
   11600:	ldrb	r3, [r4]
   11604:	cmp	r3, #0
   11608:	popne	{r4, pc}
   1160c:	bl	11594 <_start@@Base+0x60>
   11610:	mov	r3, #1
   11614:	strb	r3, [r4]
   11618:	pop	{r4, pc}
   1161c:	ldrdeq	r6, [r2], -r4
   11620:	b	115c0 <_start@@Base+0x8c>

00011624 <set_valid@@Base>:
   11624:	ldr	r0, [pc, #12]	; 11638 <set_valid@@Base+0x14>
   11628:	add	r0, pc, r0
   1162c:	movw	r1, #1
   11630:	str	r1, [r0]
   11634:	bx	lr
   11638:	andeq	r4, r1, r8, lsr #21

0001163c <main@@Base>:
   1163c:	push	{r4, r5, fp, lr}
   11640:	add	fp, sp, #8
   11644:	sub	sp, sp, #672	; 0x2a0
   11648:	ldr	r0, [pc, #3016]	; 12218 <main@@Base+0xbdc>
   1164c:	add	r0, pc, r0
   11650:	movw	r1, #0
   11654:	str	r1, [fp, #-12]
   11658:	bl	12378 <main@@Base+0xd3c>
   1165c:	movw	r1, #0
   11660:	str	r0, [sp, #204]	; 0xcc
   11664:	mov	r0, r1
   11668:	bl	13820 <mmk_matcher_init@@Base>
   1166c:	ldr	r0, [pc, #2976]	; 12214 <main@@Base+0xbd8>
   11670:	ldr	r0, [pc, r0]
   11674:	sub	r1, fp, #32
   11678:	mov	lr, r1
   1167c:	vmov.i32	q8, #0	; 0x00000000
   11680:	vst1.32	{d16-d17}, [lr]!
   11684:	mov	r2, #0
   11688:	str	r2, [lr]
   1168c:	str	r0, [fp, #-20]	; 0xffffffec
   11690:	mov	r0, r1
   11694:	bl	14bc0 <mmk_when_init@@Base>
   11698:	bl	11468 <fn_vv@plt>
   1169c:	bl	13860 <mmk_matcher_term@@Base>
   116a0:	movw	r0, #1
   116a4:	bl	13820 <mmk_matcher_init@@Base>
   116a8:	bl	11468 <fn_vv@plt>
   116ac:	bl	13860 <mmk_matcher_term@@Base>
   116b0:	movw	r0, #1
   116b4:	str	r0, [fp, #-56]	; 0xffffffc8
   116b8:	str	r0, [fp, #-52]	; 0xffffffcc
   116bc:	movw	r0, #0
   116c0:	str	r0, [fp, #-48]	; 0xffffffd0
   116c4:	str	r0, [fp, #-44]	; 0xffffffd4
   116c8:	str	r0, [fp, #-40]	; 0xffffffd8
   116cc:	str	r0, [fp, #-36]	; 0xffffffdc
   116d0:	sub	r0, fp, #56	; 0x38
   116d4:	bl	14584 <mmk_verify_times@@Base>
   116d8:	cmp	r0, #0
   116dc:	bne	11724 <main@@Base+0xe8>
   116e0:	ldr	r0, [pc, #2868]	; 1221c <main@@Base+0xbe0>
   116e4:	add	r1, pc, r0
   116e8:	ldr	r0, [pc, #2864]	; 12220 <main@@Base+0xbe4>
   116ec:	add	r2, pc, r0
   116f0:	ldr	r0, [pc, #2860]	; 12224 <main@@Base+0xbe8>
   116f4:	add	r0, pc, r0
   116f8:	ldr	r3, [pc, #2856]	; 12228 <main@@Base+0xbec>
   116fc:	ldr	r3, [pc, r3]
   11700:	ldr	r3, [r3]
   11704:	str	r0, [sp, #200]	; 0xc8
   11708:	mov	r0, r3
   1170c:	movw	r3, #42	; 0x2a
   11710:	ldr	ip, [sp, #200]	; 0xc8
   11714:	str	ip, [sp]
   11718:	bl	114e0 <fprintf@plt>
   1171c:	str	r0, [sp, #196]	; 0xc4
   11720:	bl	11528 <abort@plt>
   11724:	b	11728 <main@@Base+0xec>
   11728:	b	1172c <main@@Base+0xf0>
   1172c:	movw	r0, #1
   11730:	bl	13820 <mmk_matcher_init@@Base>
   11734:	bl	11468 <fn_vv@plt>
   11738:	bl	13860 <mmk_matcher_term@@Base>
   1173c:	movw	r0, #1
   11740:	str	r0, [fp, #-80]	; 0xffffffb0
   11744:	movw	lr, #0
   11748:	str	lr, [fp, #-76]	; 0xffffffb4
   1174c:	str	lr, [fp, #-72]	; 0xffffffb8
   11750:	str	r0, [fp, #-68]	; 0xffffffbc
   11754:	str	lr, [fp, #-64]	; 0xffffffc0
   11758:	str	lr, [fp, #-60]	; 0xffffffc4
   1175c:	sub	r0, fp, #80	; 0x50
   11760:	bl	14584 <mmk_verify_times@@Base>
   11764:	cmp	r0, #0
   11768:	bne	117b0 <main@@Base+0x174>
   1176c:	ldr	r0, [pc, #2744]	; 1222c <main@@Base+0xbf0>
   11770:	add	r1, pc, r0
   11774:	ldr	r0, [pc, #2740]	; 12230 <main@@Base+0xbf4>
   11778:	add	r2, pc, r0
   1177c:	ldr	r0, [pc, #2736]	; 12234 <main@@Base+0xbf8>
   11780:	add	r0, pc, r0
   11784:	ldr	r3, [pc, #2732]	; 12238 <main@@Base+0xbfc>
   11788:	ldr	r3, [pc, r3]
   1178c:	ldr	r3, [r3]
   11790:	str	r0, [sp, #192]	; 0xc0
   11794:	mov	r0, r3
   11798:	movw	r3, #43	; 0x2b
   1179c:	ldr	ip, [sp, #192]	; 0xc0
   117a0:	str	ip, [sp]
   117a4:	bl	114e0 <fprintf@plt>
   117a8:	str	r0, [sp, #188]	; 0xbc
   117ac:	bl	11528 <abort@plt>
   117b0:	b	117b4 <main@@Base+0x178>
   117b4:	b	117b8 <main@@Base+0x17c>
   117b8:	movw	r0, #1
   117bc:	bl	13820 <mmk_matcher_init@@Base>
   117c0:	bl	11468 <fn_vv@plt>
   117c4:	bl	13860 <mmk_matcher_term@@Base>
   117c8:	movw	r0, #1
   117cc:	str	r0, [fp, #-104]	; 0xffffff98
   117d0:	movw	lr, #0
   117d4:	str	lr, [fp, #-100]	; 0xffffff9c
   117d8:	str	lr, [fp, #-96]	; 0xffffffa0
   117dc:	str	lr, [fp, #-92]	; 0xffffffa4
   117e0:	str	r0, [fp, #-88]	; 0xffffffa8
   117e4:	str	lr, [fp, #-84]	; 0xffffffac
   117e8:	sub	r0, fp, #104	; 0x68
   117ec:	bl	14584 <mmk_verify_times@@Base>
   117f0:	cmp	r0, #0
   117f4:	beq	1183c <main@@Base+0x200>
   117f8:	ldr	r0, [pc, #2920]	; 12368 <main@@Base+0xd2c>
   117fc:	add	r1, pc, r0
   11800:	ldr	r0, [pc, #2916]	; 1236c <main@@Base+0xd30>
   11804:	add	r2, pc, r0
   11808:	ldr	r0, [pc, #2912]	; 12370 <main@@Base+0xd34>
   1180c:	add	r0, pc, r0
   11810:	ldr	r3, [pc, #2908]	; 12374 <main@@Base+0xd38>
   11814:	ldr	r3, [pc, r3]
   11818:	ldr	r3, [r3]
   1181c:	str	r0, [sp, #184]	; 0xb8
   11820:	mov	r0, r3
   11824:	movw	r3, #45	; 0x2d
   11828:	ldr	ip, [sp, #184]	; 0xb8
   1182c:	str	ip, [sp]
   11830:	bl	114e0 <fprintf@plt>
   11834:	str	r0, [sp, #180]	; 0xb4
   11838:	bl	11528 <abort@plt>
   1183c:	b	11840 <main@@Base+0x204>
   11840:	b	11844 <main@@Base+0x208>
   11844:	movw	r0, #1
   11848:	bl	13820 <mmk_matcher_init@@Base>
   1184c:	bl	11468 <fn_vv@plt>
   11850:	bl	13860 <mmk_matcher_term@@Base>
   11854:	movw	r0, #1
   11858:	str	r0, [fp, #-128]	; 0xffffff80
   1185c:	movw	lr, #0
   11860:	str	lr, [fp, #-124]	; 0xffffff84
   11864:	str	r0, [fp, #-120]	; 0xffffff88
   11868:	str	lr, [fp, #-116]	; 0xffffff8c
   1186c:	str	lr, [fp, #-112]	; 0xffffff90
   11870:	str	lr, [fp, #-108]	; 0xffffff94
   11874:	sub	r0, fp, #128	; 0x80
   11878:	bl	14584 <mmk_verify_times@@Base>
   1187c:	cmp	r0, #0
   11880:	beq	118c8 <main@@Base+0x28c>
   11884:	ldr	r0, [pc, #2764]	; 12358 <main@@Base+0xd1c>
   11888:	add	r1, pc, r0
   1188c:	ldr	r0, [pc, #2760]	; 1235c <main@@Base+0xd20>
   11890:	add	r2, pc, r0
   11894:	ldr	r0, [pc, #2756]	; 12360 <main@@Base+0xd24>
   11898:	add	r0, pc, r0
   1189c:	ldr	r3, [pc, #2752]	; 12364 <main@@Base+0xd28>
   118a0:	ldr	r3, [pc, r3]
   118a4:	ldr	r3, [r3]
   118a8:	str	r0, [sp, #176]	; 0xb0
   118ac:	mov	r0, r3
   118b0:	movw	r3, #46	; 0x2e
   118b4:	ldr	ip, [sp, #176]	; 0xb0
   118b8:	str	ip, [sp]
   118bc:	bl	114e0 <fprintf@plt>
   118c0:	str	r0, [sp, #172]	; 0xac
   118c4:	bl	11528 <abort@plt>
   118c8:	b	118cc <main@@Base+0x290>
   118cc:	b	118d0 <main@@Base+0x294>
   118d0:	movw	r0, #1
   118d4:	bl	13820 <mmk_matcher_init@@Base>
   118d8:	bl	11468 <fn_vv@plt>
   118dc:	bl	13860 <mmk_matcher_term@@Base>
   118e0:	movw	r0, #1
   118e4:	str	r0, [fp, #-152]	; 0xffffff68
   118e8:	movw	lr, #0
   118ec:	str	lr, [fp, #-148]	; 0xffffff6c
   118f0:	str	r0, [fp, #-144]	; 0xffffff70
   118f4:	str	r0, [fp, #-140]	; 0xffffff74
   118f8:	str	lr, [fp, #-136]	; 0xffffff78
   118fc:	str	lr, [fp, #-132]	; 0xffffff7c
   11900:	sub	r0, fp, #152	; 0x98
   11904:	bl	14584 <mmk_verify_times@@Base>
   11908:	cmp	r0, #0
   1190c:	beq	11954 <main@@Base+0x318>
   11910:	ldr	r0, [pc, #2608]	; 12348 <main@@Base+0xd0c>
   11914:	add	r1, pc, r0
   11918:	ldr	r0, [pc, #2604]	; 1234c <main@@Base+0xd10>
   1191c:	add	r2, pc, r0
   11920:	ldr	r0, [pc, #2600]	; 12350 <main@@Base+0xd14>
   11924:	add	r0, pc, r0
   11928:	ldr	r3, [pc, #2596]	; 12354 <main@@Base+0xd18>
   1192c:	ldr	r3, [pc, r3]
   11930:	ldr	r3, [r3]
   11934:	str	r0, [sp, #168]	; 0xa8
   11938:	mov	r0, r3
   1193c:	movw	r3, #47	; 0x2f
   11940:	ldr	ip, [sp, #168]	; 0xa8
   11944:	str	ip, [sp]
   11948:	bl	114e0 <fprintf@plt>
   1194c:	str	r0, [sp, #164]	; 0xa4
   11950:	bl	11528 <abort@plt>
   11954:	b	11958 <main@@Base+0x31c>
   11958:	bl	11468 <fn_vv@plt>
   1195c:	ldr	r0, [pc, #2264]	; 1223c <main@@Base+0xc00>
   11960:	add	r0, pc, r0
   11964:	ldr	r0, [r0]
   11968:	cmp	r0, #0
   1196c:	bne	119b4 <main@@Base+0x378>
   11970:	ldr	r0, [pc, #2248]	; 12240 <main@@Base+0xc04>
   11974:	add	r1, pc, r0
   11978:	ldr	r0, [pc, #2244]	; 12244 <main@@Base+0xc08>
   1197c:	add	r2, pc, r0
   11980:	ldr	r0, [pc, #2240]	; 12248 <main@@Base+0xc0c>
   11984:	add	r0, pc, r0
   11988:	ldr	r3, [pc, #2236]	; 1224c <main@@Base+0xc10>
   1198c:	ldr	r3, [pc, r3]
   11990:	ldr	r3, [r3]
   11994:	str	r0, [sp, #160]	; 0xa0
   11998:	mov	r0, r3
   1199c:	movw	r3, #50	; 0x32
   119a0:	ldr	ip, [sp, #160]	; 0xa0
   119a4:	str	ip, [sp]
   119a8:	bl	114e0 <fprintf@plt>
   119ac:	str	r0, [sp, #156]	; 0x9c
   119b0:	bl	11528 <abort@plt>
   119b4:	b	119b8 <main@@Base+0x37c>
   119b8:	b	119bc <main@@Base+0x380>
   119bc:	movw	r0, #1
   119c0:	bl	13820 <mmk_matcher_init@@Base>
   119c4:	bl	11468 <fn_vv@plt>
   119c8:	bl	13860 <mmk_matcher_term@@Base>
   119cc:	movw	r0, #1
   119d0:	str	r0, [fp, #-176]	; 0xffffff50
   119d4:	movw	lr, #0
   119d8:	str	lr, [fp, #-172]	; 0xffffff54
   119dc:	str	lr, [fp, #-168]	; 0xffffff58
   119e0:	str	lr, [fp, #-164]	; 0xffffff5c
   119e4:	str	r0, [fp, #-160]	; 0xffffff60
   119e8:	str	lr, [fp, #-156]	; 0xffffff64
   119ec:	sub	r0, fp, #176	; 0xb0
   119f0:	bl	14584 <mmk_verify_times@@Base>
   119f4:	cmp	r0, #0
   119f8:	bne	11a40 <main@@Base+0x404>
   119fc:	ldr	r0, [pc, #2124]	; 12250 <main@@Base+0xc14>
   11a00:	add	r1, pc, r0
   11a04:	ldr	r0, [pc, #2120]	; 12254 <main@@Base+0xc18>
   11a08:	add	r2, pc, r0
   11a0c:	ldr	r0, [pc, #2116]	; 12258 <main@@Base+0xc1c>
   11a10:	add	r0, pc, r0
   11a14:	ldr	r3, [pc, #2112]	; 1225c <main@@Base+0xc20>
   11a18:	ldr	r3, [pc, r3]
   11a1c:	ldr	r3, [r3]
   11a20:	str	r0, [sp, #152]	; 0x98
   11a24:	mov	r0, r3
   11a28:	movw	r3, #51	; 0x33
   11a2c:	ldr	ip, [sp, #152]	; 0x98
   11a30:	str	ip, [sp]
   11a34:	bl	114e0 <fprintf@plt>
   11a38:	str	r0, [sp, #148]	; 0x94
   11a3c:	bl	11528 <abort@plt>
   11a40:	b	11a44 <main@@Base+0x408>
   11a44:	b	11a48 <main@@Base+0x40c>
   11a48:	movw	r0, #1
   11a4c:	bl	13820 <mmk_matcher_init@@Base>
   11a50:	bl	11468 <fn_vv@plt>
   11a54:	bl	13860 <mmk_matcher_term@@Base>
   11a58:	movw	r0, #1
   11a5c:	str	r0, [fp, #-200]	; 0xffffff38
   11a60:	movw	lr, #0
   11a64:	str	lr, [fp, #-196]	; 0xffffff3c
   11a68:	str	r0, [fp, #-192]	; 0xffffff40
   11a6c:	str	lr, [fp, #-188]	; 0xffffff44
   11a70:	str	lr, [fp, #-184]	; 0xffffff48
   11a74:	str	lr, [fp, #-180]	; 0xffffff4c
   11a78:	sub	r0, fp, #200	; 0xc8
   11a7c:	bl	14584 <mmk_verify_times@@Base>
   11a80:	cmp	r0, #0
   11a84:	bne	11acc <main@@Base+0x490>
   11a88:	ldr	r0, [pc, #2000]	; 12260 <main@@Base+0xc24>
   11a8c:	add	r1, pc, r0
   11a90:	ldr	r0, [pc, #1996]	; 12264 <main@@Base+0xc28>
   11a94:	add	r2, pc, r0
   11a98:	ldr	r0, [pc, #1992]	; 12268 <main@@Base+0xc2c>
   11a9c:	add	r0, pc, r0
   11aa0:	ldr	r3, [pc, #1988]	; 1226c <main@@Base+0xc30>
   11aa4:	ldr	r3, [pc, r3]
   11aa8:	ldr	r3, [r3]
   11aac:	str	r0, [sp, #144]	; 0x90
   11ab0:	mov	r0, r3
   11ab4:	movw	r3, #52	; 0x34
   11ab8:	ldr	ip, [sp, #144]	; 0x90
   11abc:	str	ip, [sp]
   11ac0:	bl	114e0 <fprintf@plt>
   11ac4:	str	r0, [sp, #140]	; 0x8c
   11ac8:	bl	11528 <abort@plt>
   11acc:	b	11ad0 <main@@Base+0x494>
   11ad0:	b	11ad4 <main@@Base+0x498>
   11ad4:	movw	r0, #1
   11ad8:	bl	13820 <mmk_matcher_init@@Base>
   11adc:	bl	11468 <fn_vv@plt>
   11ae0:	bl	13860 <mmk_matcher_term@@Base>
   11ae4:	movw	r0, #1
   11ae8:	str	r0, [fp, #-224]	; 0xffffff20
   11aec:	movw	lr, #0
   11af0:	str	lr, [fp, #-220]	; 0xffffff24
   11af4:	str	lr, [fp, #-216]	; 0xffffff28
   11af8:	str	r0, [fp, #-212]	; 0xffffff2c
   11afc:	str	lr, [fp, #-208]	; 0xffffff30
   11b00:	str	lr, [fp, #-204]	; 0xffffff34
   11b04:	sub	r0, fp, #224	; 0xe0
   11b08:	bl	14584 <mmk_verify_times@@Base>
   11b0c:	cmp	r0, #0
   11b10:	bne	11b58 <main@@Base+0x51c>
   11b14:	ldr	r0, [pc, #1876]	; 12270 <main@@Base+0xc34>
   11b18:	add	r1, pc, r0
   11b1c:	ldr	r0, [pc, #1872]	; 12274 <main@@Base+0xc38>
   11b20:	add	r2, pc, r0
   11b24:	ldr	r0, [pc, #1868]	; 12278 <main@@Base+0xc3c>
   11b28:	add	r0, pc, r0
   11b2c:	ldr	r3, [pc, #1864]	; 1227c <main@@Base+0xc40>
   11b30:	ldr	r3, [pc, r3]
   11b34:	ldr	r3, [r3]
   11b38:	str	r0, [sp, #136]	; 0x88
   11b3c:	mov	r0, r3
   11b40:	movw	r3, #53	; 0x35
   11b44:	ldr	ip, [sp, #136]	; 0x88
   11b48:	str	ip, [sp]
   11b4c:	bl	114e0 <fprintf@plt>
   11b50:	str	r0, [sp, #132]	; 0x84
   11b54:	bl	11528 <abort@plt>
   11b58:	b	11b5c <main@@Base+0x520>
   11b5c:	b	11b60 <main@@Base+0x524>
   11b60:	movw	r0, #1
   11b64:	bl	13820 <mmk_matcher_init@@Base>
   11b68:	bl	11468 <fn_vv@plt>
   11b6c:	bl	13860 <mmk_matcher_term@@Base>
   11b70:	movw	r0, #1
   11b74:	str	r0, [fp, #-248]	; 0xffffff08
   11b78:	movw	lr, #0
   11b7c:	str	lr, [fp, #-244]	; 0xffffff0c
   11b80:	str	r0, [fp, #-240]	; 0xffffff10
   11b84:	str	r0, [fp, #-236]	; 0xffffff14
   11b88:	str	lr, [fp, #-232]	; 0xffffff18
   11b8c:	str	lr, [fp, #-228]	; 0xffffff1c
   11b90:	sub	r0, fp, #248	; 0xf8
   11b94:	bl	14584 <mmk_verify_times@@Base>
   11b98:	cmp	r0, #0
   11b9c:	bne	11be4 <main@@Base+0x5a8>
   11ba0:	ldr	r0, [pc, #1752]	; 12280 <main@@Base+0xc44>
   11ba4:	add	r1, pc, r0
   11ba8:	ldr	r0, [pc, #1748]	; 12284 <main@@Base+0xc48>
   11bac:	add	r2, pc, r0
   11bb0:	ldr	r0, [pc, #1744]	; 12288 <main@@Base+0xc4c>
   11bb4:	add	r0, pc, r0
   11bb8:	ldr	r3, [pc, #1740]	; 1228c <main@@Base+0xc50>
   11bbc:	ldr	r3, [pc, r3]
   11bc0:	ldr	r3, [r3]
   11bc4:	str	r0, [sp, #128]	; 0x80
   11bc8:	mov	r0, r3
   11bcc:	movw	r3, #54	; 0x36
   11bd0:	ldr	ip, [sp, #128]	; 0x80
   11bd4:	str	ip, [sp]
   11bd8:	bl	114e0 <fprintf@plt>
   11bdc:	str	r0, [sp, #124]	; 0x7c
   11be0:	bl	11528 <abort@plt>
   11be4:	b	11be8 <main@@Base+0x5ac>
   11be8:	b	11bec <main@@Base+0x5b0>
   11bec:	movw	r0, #1
   11bf0:	bl	13820 <mmk_matcher_init@@Base>
   11bf4:	bl	11468 <fn_vv@plt>
   11bf8:	bl	13860 <mmk_matcher_term@@Base>
   11bfc:	movw	r0, #1
   11c00:	str	r0, [fp, #-272]	; 0xfffffef0
   11c04:	str	r0, [fp, #-268]	; 0xfffffef4
   11c08:	movw	r0, #0
   11c0c:	str	r0, [fp, #-264]	; 0xfffffef8
   11c10:	str	r0, [fp, #-260]	; 0xfffffefc
   11c14:	str	r0, [fp, #-256]	; 0xffffff00
   11c18:	str	r0, [fp, #-252]	; 0xffffff04
   11c1c:	sub	r0, fp, #272	; 0x110
   11c20:	bl	14584 <mmk_verify_times@@Base>
   11c24:	cmp	r0, #0
   11c28:	beq	11c70 <main@@Base+0x634>
   11c2c:	ldr	r0, [pc, #1796]	; 12338 <main@@Base+0xcfc>
   11c30:	add	r1, pc, r0
   11c34:	ldr	r0, [pc, #1792]	; 1233c <main@@Base+0xd00>
   11c38:	add	r2, pc, r0
   11c3c:	ldr	r0, [pc, #1788]	; 12340 <main@@Base+0xd04>
   11c40:	add	r0, pc, r0
   11c44:	ldr	r3, [pc, #1784]	; 12344 <main@@Base+0xd08>
   11c48:	ldr	r3, [pc, r3]
   11c4c:	ldr	r3, [r3]
   11c50:	str	r0, [sp, #120]	; 0x78
   11c54:	mov	r0, r3
   11c58:	movw	r3, #55	; 0x37
   11c5c:	ldr	ip, [sp, #120]	; 0x78
   11c60:	str	ip, [sp]
   11c64:	bl	114e0 <fprintf@plt>
   11c68:	str	r0, [sp, #116]	; 0x74
   11c6c:	bl	11528 <abort@plt>
   11c70:	b	11c74 <main@@Base+0x638>
   11c74:	b	11c78 <main@@Base+0x63c>
   11c78:	movw	r0, #1
   11c7c:	bl	13820 <mmk_matcher_init@@Base>
   11c80:	bl	11468 <fn_vv@plt>
   11c84:	bl	13860 <mmk_matcher_term@@Base>
   11c88:	movw	r0, #1
   11c8c:	str	r0, [fp, #-296]	; 0xfffffed8
   11c90:	movw	r0, #0
   11c94:	str	r0, [fp, #-292]	; 0xfffffedc
   11c98:	str	r0, [fp, #-288]	; 0xfffffee0
   11c9c:	str	r0, [fp, #-284]	; 0xfffffee4
   11ca0:	movw	lr, #2
   11ca4:	str	lr, [fp, #-280]	; 0xfffffee8
   11ca8:	str	r0, [fp, #-276]	; 0xfffffeec
   11cac:	sub	r0, fp, #296	; 0x128
   11cb0:	bl	14584 <mmk_verify_times@@Base>
   11cb4:	cmp	r0, #0
   11cb8:	beq	11d00 <main@@Base+0x6c4>
   11cbc:	ldr	r0, [pc, #1636]	; 12328 <main@@Base+0xcec>
   11cc0:	add	r1, pc, r0
   11cc4:	ldr	r0, [pc, #1632]	; 1232c <main@@Base+0xcf0>
   11cc8:	add	r2, pc, r0
   11ccc:	ldr	r0, [pc, #1628]	; 12330 <main@@Base+0xcf4>
   11cd0:	add	r0, pc, r0
   11cd4:	ldr	r3, [pc, #1624]	; 12334 <main@@Base+0xcf8>
   11cd8:	ldr	r3, [pc, r3]
   11cdc:	ldr	r3, [r3]
   11ce0:	str	r0, [sp, #112]	; 0x70
   11ce4:	mov	r0, r3
   11ce8:	movw	r3, #56	; 0x38
   11cec:	ldr	ip, [sp, #112]	; 0x70
   11cf0:	str	ip, [sp]
   11cf4:	bl	114e0 <fprintf@plt>
   11cf8:	str	r0, [sp, #108]	; 0x6c
   11cfc:	bl	11528 <abort@plt>
   11d00:	b	11d04 <main@@Base+0x6c8>
   11d04:	b	11d08 <main@@Base+0x6cc>
   11d08:	movw	r0, #1
   11d0c:	bl	13820 <mmk_matcher_init@@Base>
   11d10:	bl	11468 <fn_vv@plt>
   11d14:	bl	13860 <mmk_matcher_term@@Base>
   11d18:	movw	r0, #1
   11d1c:	str	r0, [fp, #-320]	; 0xfffffec0
   11d20:	movw	r0, #0
   11d24:	str	r0, [fp, #-316]	; 0xfffffec4
   11d28:	movw	lr, #2
   11d2c:	str	lr, [fp, #-312]	; 0xfffffec8
   11d30:	str	r0, [fp, #-308]	; 0xfffffecc
   11d34:	str	r0, [fp, #-304]	; 0xfffffed0
   11d38:	str	r0, [fp, #-300]	; 0xfffffed4
   11d3c:	sub	r0, fp, #320	; 0x140
   11d40:	bl	14584 <mmk_verify_times@@Base>
   11d44:	cmp	r0, #0
   11d48:	beq	11d90 <main@@Base+0x754>
   11d4c:	ldr	r0, [pc, #1476]	; 12318 <main@@Base+0xcdc>
   11d50:	add	r1, pc, r0
   11d54:	ldr	r0, [pc, #1472]	; 1231c <main@@Base+0xce0>
   11d58:	add	r2, pc, r0
   11d5c:	ldr	r0, [pc, #1468]	; 12320 <main@@Base+0xce4>
   11d60:	add	r0, pc, r0
   11d64:	ldr	r3, [pc, #1464]	; 12324 <main@@Base+0xce8>
   11d68:	ldr	r3, [pc, r3]
   11d6c:	ldr	r3, [r3]
   11d70:	str	r0, [sp, #104]	; 0x68
   11d74:	mov	r0, r3
   11d78:	movw	r3, #57	; 0x39
   11d7c:	ldr	ip, [sp, #104]	; 0x68
   11d80:	str	ip, [sp]
   11d84:	bl	114e0 <fprintf@plt>
   11d88:	str	r0, [sp, #100]	; 0x64
   11d8c:	bl	11528 <abort@plt>
   11d90:	b	11d94 <main@@Base+0x758>
   11d94:	ldr	r0, [pc, #1276]	; 12298 <main@@Base+0xc5c>
   11d98:	ldr	r0, [pc, r0]
   11d9c:	bl	13800 <mmk_reset@@Base>
   11da0:	ldr	r0, [pc, #1256]	; 12290 <main@@Base+0xc54>
   11da4:	add	r0, pc, r0
   11da8:	ldr	lr, [pc, #1252]	; 12294 <main@@Base+0xc58>
   11dac:	str	lr, [fp, #-324]	; 0xfffffebc
   11db0:	bl	123a4 <main@@Base+0xd68>
   11db4:	movw	lr, #0
   11db8:	str	r0, [sp, #96]	; 0x60
   11dbc:	mov	r0, lr
   11dc0:	bl	13820 <mmk_matcher_init@@Base>
   11dc4:	movw	r0, #0
   11dc8:	str	r0, [sp, #336]	; 0x150
   11dcc:	ldr	lr, [fp, #-324]	; 0xfffffebc
   11dd0:	str	lr, [sp, #340]	; 0x154
   11dd4:	movw	lr, #1
   11dd8:	str	lr, [sp, #332]	; 0x14c
   11ddc:	add	lr, sp, #332	; 0x14c
   11de0:	str	lr, [sp, #344]	; 0x158
   11de4:	str	r0, [sp, #348]	; 0x15c
   11de8:	str	r0, [sp, #352]	; 0x160
   11dec:	add	r0, sp, #336	; 0x150
   11df0:	bl	14bc0 <mmk_when_init@@Base>
   11df4:	movw	r0, #1
   11df8:	bl	11480 <fn_ii@plt>
   11dfc:	str	r0, [sp, #92]	; 0x5c
   11e00:	bl	13860 <mmk_matcher_term@@Base>
   11e04:	movw	r0, #1
   11e08:	bl	11480 <fn_ii@plt>
   11e0c:	cmp	r0, #1
   11e10:	bne	11e28 <main@@Base+0x7ec>
   11e14:	bl	114ec <__errno_location@plt>
   11e18:	ldr	r0, [r0]
   11e1c:	ldr	lr, [fp, #-324]	; 0xfffffebc
   11e20:	cmp	r0, lr
   11e24:	beq	11e6c <main@@Base+0x830>
   11e28:	ldr	r0, [pc, #1132]	; 1229c <main@@Base+0xc60>
   11e2c:	add	r1, pc, r0
   11e30:	ldr	r0, [pc, #1128]	; 122a0 <main@@Base+0xc64>
   11e34:	add	r2, pc, r0
   11e38:	ldr	r0, [pc, #1124]	; 122a4 <main@@Base+0xc68>
   11e3c:	add	r0, pc, r0
   11e40:	ldr	r3, [pc, #1120]	; 122a8 <main@@Base+0xc6c>
   11e44:	ldr	r3, [pc, r3]
   11e48:	ldr	r3, [r3]
   11e4c:	str	r0, [sp, #88]	; 0x58
   11e50:	mov	r0, r3
   11e54:	movw	r3, #64	; 0x40
   11e58:	ldr	ip, [sp, #88]	; 0x58
   11e5c:	str	ip, [sp]
   11e60:	bl	114e0 <fprintf@plt>
   11e64:	str	r0, [sp, #84]	; 0x54
   11e68:	bl	11528 <abort@plt>
   11e6c:	b	11e70 <main@@Base+0x834>
   11e70:	b	11e74 <main@@Base+0x838>
   11e74:	movw	r0, #42	; 0x2a
   11e78:	bl	11480 <fn_ii@plt>
   11e7c:	cmp	r0, #0
   11e80:	beq	11ec8 <main@@Base+0x88c>
   11e84:	ldr	r0, [pc, #1056]	; 122ac <main@@Base+0xc70>
   11e88:	add	r1, pc, r0
   11e8c:	ldr	r0, [pc, #1052]	; 122b0 <main@@Base+0xc74>
   11e90:	add	r2, pc, r0
   11e94:	ldr	r0, [pc, #1048]	; 122b4 <main@@Base+0xc78>
   11e98:	add	r0, pc, r0
   11e9c:	ldr	r3, [pc, #1044]	; 122b8 <main@@Base+0xc7c>
   11ea0:	ldr	r3, [pc, r3]
   11ea4:	ldr	r3, [r3]
   11ea8:	str	r0, [sp, #80]	; 0x50
   11eac:	mov	r0, r3
   11eb0:	movw	r3, #65	; 0x41
   11eb4:	ldr	ip, [sp, #80]	; 0x50
   11eb8:	str	ip, [sp]
   11ebc:	bl	114e0 <fprintf@plt>
   11ec0:	str	r0, [sp, #76]	; 0x4c
   11ec4:	bl	11528 <abort@plt>
   11ec8:	b	11ecc <main@@Base+0x890>
   11ecc:	b	11ed0 <main@@Base+0x894>
   11ed0:	movw	r0, #1
   11ed4:	bl	13820 <mmk_matcher_init@@Base>
   11ed8:	movw	r0, #0
   11edc:	str	r0, [sp, #72]	; 0x48
   11ee0:	ldr	r1, [sp, #72]	; 0x48
   11ee4:	bl	138a4 <mmk_matcher_add@@Base>
   11ee8:	movw	r0, #0
   11eec:	str	r0, [sp, #328]	; 0x148
   11ef0:	ldr	r0, [sp, #328]	; 0x148
   11ef4:	bl	11480 <fn_ii@plt>
   11ef8:	str	r0, [sp, #68]	; 0x44
   11efc:	bl	13860 <mmk_matcher_term@@Base>
   11f00:	movw	r0, #1
   11f04:	str	r0, [sp, #304]	; 0x130
   11f08:	movw	r0, #0
   11f0c:	str	r0, [sp, #308]	; 0x134
   11f10:	str	r0, [sp, #312]	; 0x138
   11f14:	str	r0, [sp, #316]	; 0x13c
   11f18:	movw	r1, #2
   11f1c:	str	r1, [sp, #320]	; 0x140
   11f20:	str	r0, [sp, #324]	; 0x144
   11f24:	add	r0, sp, #304	; 0x130
   11f28:	bl	14584 <mmk_verify_times@@Base>
   11f2c:	cmp	r0, #0
   11f30:	bne	11f78 <main@@Base+0x93c>
   11f34:	ldr	r0, [pc, #896]	; 122bc <main@@Base+0xc80>
   11f38:	add	r1, pc, r0
   11f3c:	ldr	r0, [pc, #892]	; 122c0 <main@@Base+0xc84>
   11f40:	add	r2, pc, r0
   11f44:	ldr	r0, [pc, #888]	; 122c4 <main@@Base+0xc88>
   11f48:	add	r0, pc, r0
   11f4c:	ldr	r3, [pc, #884]	; 122c8 <main@@Base+0xc8c>
   11f50:	ldr	r3, [pc, r3]
   11f54:	ldr	r3, [r3]
   11f58:	str	r0, [sp, #64]	; 0x40
   11f5c:	mov	r0, r3
   11f60:	movw	r3, #67	; 0x43
   11f64:	ldr	ip, [sp, #64]	; 0x40
   11f68:	str	ip, [sp]
   11f6c:	bl	114e0 <fprintf@plt>
   11f70:	str	r0, [sp, #60]	; 0x3c
   11f74:	bl	11528 <abort@plt>
   11f78:	b	11f7c <main@@Base+0x940>
   11f7c:	b	11f80 <main@@Base+0x944>
   11f80:	movw	r0, #1
   11f84:	bl	13820 <mmk_matcher_init@@Base>
   11f88:	movw	r0, #1
   11f8c:	bl	11480 <fn_ii@plt>
   11f90:	str	r0, [sp, #56]	; 0x38
   11f94:	bl	13860 <mmk_matcher_term@@Base>
   11f98:	movw	r0, #1
   11f9c:	str	r0, [sp, #280]	; 0x118
   11fa0:	movw	lr, #0
   11fa4:	str	lr, [sp, #284]	; 0x11c
   11fa8:	str	lr, [sp, #288]	; 0x120
   11fac:	str	lr, [sp, #292]	; 0x124
   11fb0:	str	r0, [sp, #296]	; 0x128
   11fb4:	str	lr, [sp, #300]	; 0x12c
   11fb8:	add	r0, sp, #280	; 0x118
   11fbc:	bl	14584 <mmk_verify_times@@Base>
   11fc0:	cmp	r0, #0
   11fc4:	bne	1200c <main@@Base+0x9d0>
   11fc8:	ldr	r0, [pc, #764]	; 122cc <main@@Base+0xc90>
   11fcc:	add	r1, pc, r0
   11fd0:	ldr	r0, [pc, #760]	; 122d0 <main@@Base+0xc94>
   11fd4:	add	r2, pc, r0
   11fd8:	ldr	r0, [pc, #756]	; 122d4 <main@@Base+0xc98>
   11fdc:	add	r0, pc, r0
   11fe0:	ldr	r3, [pc, #752]	; 122d8 <main@@Base+0xc9c>
   11fe4:	ldr	r3, [pc, r3]
   11fe8:	ldr	r3, [r3]
   11fec:	str	r0, [sp, #52]	; 0x34
   11ff0:	mov	r0, r3
   11ff4:	movw	r3, #68	; 0x44
   11ff8:	ldr	ip, [sp, #52]	; 0x34
   11ffc:	str	ip, [sp]
   12000:	bl	114e0 <fprintf@plt>
   12004:	str	r0, [sp, #48]	; 0x30
   12008:	bl	11528 <abort@plt>
   1200c:	b	12010 <main@@Base+0x9d4>
   12010:	b	12014 <main@@Base+0x9d8>
   12014:	movw	r0, #1
   12018:	bl	13820 <mmk_matcher_init@@Base>
   1201c:	movw	r0, #42	; 0x2a
   12020:	bl	11480 <fn_ii@plt>
   12024:	str	r0, [sp, #44]	; 0x2c
   12028:	bl	13860 <mmk_matcher_term@@Base>
   1202c:	movw	r0, #1
   12030:	str	r0, [sp, #256]	; 0x100
   12034:	movw	lr, #0
   12038:	str	lr, [sp, #260]	; 0x104
   1203c:	str	lr, [sp, #264]	; 0x108
   12040:	str	lr, [sp, #268]	; 0x10c
   12044:	str	r0, [sp, #272]	; 0x110
   12048:	str	lr, [sp, #276]	; 0x114
   1204c:	add	r0, sp, #256	; 0x100
   12050:	bl	14584 <mmk_verify_times@@Base>
   12054:	cmp	r0, #0
   12058:	bne	120a0 <main@@Base+0xa64>
   1205c:	ldr	r0, [pc, #632]	; 122dc <main@@Base+0xca0>
   12060:	add	r1, pc, r0
   12064:	ldr	r0, [pc, #628]	; 122e0 <main@@Base+0xca4>
   12068:	add	r2, pc, r0
   1206c:	ldr	r0, [pc, #624]	; 122e4 <main@@Base+0xca8>
   12070:	add	r0, pc, r0
   12074:	ldr	r3, [pc, #620]	; 122e8 <main@@Base+0xcac>
   12078:	ldr	r3, [pc, r3]
   1207c:	ldr	r3, [r3]
   12080:	str	r0, [sp, #40]	; 0x28
   12084:	mov	r0, r3
   12088:	movw	r3, #69	; 0x45
   1208c:	ldr	ip, [sp, #40]	; 0x28
   12090:	str	ip, [sp]
   12094:	bl	114e0 <fprintf@plt>
   12098:	str	r0, [sp, #36]	; 0x24
   1209c:	bl	11528 <abort@plt>
   120a0:	b	120a4 <main@@Base+0xa68>
   120a4:	b	120a8 <main@@Base+0xa6c>
   120a8:	movw	r0, #1
   120ac:	bl	13820 <mmk_matcher_init@@Base>
   120b0:	movw	r0, #12
   120b4:	bl	11480 <fn_ii@plt>
   120b8:	str	r0, [sp, #32]
   120bc:	bl	13860 <mmk_matcher_term@@Base>
   120c0:	movw	r0, #1
   120c4:	str	r0, [sp, #232]	; 0xe8
   120c8:	str	r0, [sp, #236]	; 0xec
   120cc:	movw	r0, #0
   120d0:	str	r0, [sp, #240]	; 0xf0
   120d4:	str	r0, [sp, #244]	; 0xf4
   120d8:	str	r0, [sp, #248]	; 0xf8
   120dc:	str	r0, [sp, #252]	; 0xfc
   120e0:	add	r0, sp, #232	; 0xe8
   120e4:	bl	14584 <mmk_verify_times@@Base>
   120e8:	cmp	r0, #0
   120ec:	bne	12134 <main@@Base+0xaf8>
   120f0:	ldr	r0, [pc, #500]	; 122ec <main@@Base+0xcb0>
   120f4:	add	r1, pc, r0
   120f8:	ldr	r0, [pc, #496]	; 122f0 <main@@Base+0xcb4>
   120fc:	add	r2, pc, r0
   12100:	ldr	r0, [pc, #492]	; 122f4 <main@@Base+0xcb8>
   12104:	add	r0, pc, r0
   12108:	ldr	r3, [pc, #488]	; 122f8 <main@@Base+0xcbc>
   1210c:	ldr	r3, [pc, r3]
   12110:	ldr	r3, [r3]
   12114:	str	r0, [sp, #28]
   12118:	mov	r0, r3
   1211c:	movw	r3, #70	; 0x46
   12120:	ldr	ip, [sp, #28]
   12124:	str	ip, [sp]
   12128:	bl	114e0 <fprintf@plt>
   1212c:	str	r0, [sp, #24]
   12130:	bl	11528 <abort@plt>
   12134:	b	12138 <main@@Base+0xafc>
   12138:	ldr	r0, [pc, #448]	; 12300 <main@@Base+0xcc4>
   1213c:	ldr	r0, [pc, r0]
   12140:	bl	13800 <mmk_reset@@Base>
   12144:	ldr	r0, [pc, #432]	; 122fc <main@@Base+0xcc0>
   12148:	add	r0, pc, r0
   1214c:	bl	123d0 <main@@Base+0xd94>
   12150:	movw	lr, #0
   12154:	str	r0, [sp, #20]
   12158:	mov	r0, lr
   1215c:	bl	13820 <mmk_matcher_init@@Base>
   12160:	add	r0, sp, #212	; 0xd4
   12164:	mov	lr, r0
   12168:	vmov.i32	q8, #0	; 0x00000000
   1216c:	vst1.32	{d16-d17}, [lr]!
   12170:	mov	r1, #0
   12174:	str	r1, [lr]
   12178:	movw	r1, #1
   1217c:	str	r1, [sp, #208]	; 0xd0
   12180:	add	r1, sp, #208	; 0xd0
   12184:	str	r1, [sp, #220]	; 0xdc
   12188:	bl	14bc0 <mmk_when_init@@Base>
   1218c:	movw	r0, #1
   12190:	movw	r1, #42	; 0x2a
   12194:	bl	1148c <fn_ii_va@plt>
   12198:	str	r0, [sp, #16]
   1219c:	bl	13860 <mmk_matcher_term@@Base>
   121a0:	movw	r0, #1
   121a4:	movw	r1, #42	; 0x2a
   121a8:	bl	1148c <fn_ii_va@plt>
   121ac:	cmp	r0, #1
   121b0:	beq	121f8 <main@@Base+0xbbc>
   121b4:	ldr	r0, [pc, #328]	; 12304 <main@@Base+0xcc8>
   121b8:	add	r1, pc, r0
   121bc:	ldr	r0, [pc, #324]	; 12308 <main@@Base+0xccc>
   121c0:	add	r2, pc, r0
   121c4:	ldr	r0, [pc, #320]	; 1230c <main@@Base+0xcd0>
   121c8:	add	r0, pc, r0
   121cc:	ldr	r3, [pc, #316]	; 12310 <main@@Base+0xcd4>
   121d0:	ldr	r3, [pc, r3]
   121d4:	ldr	r3, [r3]
   121d8:	str	r0, [sp, #12]
   121dc:	mov	r0, r3
   121e0:	movw	r3, #77	; 0x4d
   121e4:	ldr	ip, [sp, #12]
   121e8:	str	ip, [sp]
   121ec:	bl	114e0 <fprintf@plt>
   121f0:	str	r0, [sp, #8]
   121f4:	bl	11528 <abort@plt>
   121f8:	b	121fc <main@@Base+0xbc0>
   121fc:	ldr	r0, [pc, #272]	; 12314 <main@@Base+0xcd8>
   12200:	ldr	r0, [pc, r0]
   12204:	bl	13800 <mmk_reset@@Base>
   12208:	movw	r0, #0
   1220c:	sub	sp, fp, #8
   12210:	pop	{r4, r5, fp, pc}
   12214:	andeq	r4, r1, ip, lsl sl
   12218:	andeq	r3, r0, r8, lsr #13
   1221c:	andeq	r3, r0, r6, lsl r6
   12220:	andeq	r3, r0, fp, lsr #12
   12224:	andeq	r3, r0, r3, lsl r7
   12228:	muleq	r1, r8, r9
   1222c:	andeq	r3, r0, sl, lsl #11
   12230:	muleq	r0, pc, r5	; <UNPREDICTABLE>
   12234:	andeq	r3, r0, r7, ror #11
   12238:	andeq	r4, r1, ip, lsl #18
   1223c:	andeq	r4, r1, r0, ror r7
   12240:	andeq	r3, r0, r6, lsl #7
   12244:	muleq	r0, fp, r3
   12248:	andeq	r3, r0, ip, ror r4
   1224c:	andeq	r4, r1, r8, lsl #14
   12250:	strdeq	r3, [r0], -sl
   12254:	andeq	r3, r0, pc, lsl #6
   12258:	andeq	r3, r0, sl, ror r3
   1225c:	andeq	r4, r1, ip, ror r6
   12260:	andeq	r3, r0, lr, ror #4
   12264:	andeq	r3, r0, r3, lsl #5
   12268:	andeq	r3, r0, pc, lsl #6
   1226c:	strdeq	r4, [r1], -r0
   12270:	andeq	r3, r0, r2, ror #3
   12274:	strdeq	r3, [r0], -r7
   12278:	andeq	r3, r0, pc, lsr r2
   1227c:	andeq	r4, r1, r4, ror #10
   12280:	andeq	r3, r0, r6, asr r1
   12284:	andeq	r3, r0, fp, ror #2
   12288:	andeq	r3, r0, fp, lsl r2
   1228c:	ldrdeq	r4, [r1], -r8
   12290:	andeq	r3, r0, r8, asr #1
   12294:	mrc2	14, 7, pc, cr14, cr14, {7}
   12298:	andeq	r4, r1, ip, ror #5
   1229c:	andeq	r2, r0, lr, asr #29
   122a0:	andeq	r2, r0, r3, ror #29
   122a4:	andeq	r3, r0, r6, lsr r0
   122a8:	andeq	r4, r1, r0, asr r2
   122ac:	andeq	r2, r0, r2, ror lr
   122b0:	andeq	r2, r0, r7, lsl #29
   122b4:	strdeq	r2, [r0], -r8
   122b8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   122bc:	andeq	r2, r0, r2, asr #27
   122c0:	ldrdeq	r2, [r0], -r7
   122c4:	andeq	r2, r0, r7, asr pc
   122c8:	andeq	r4, r1, r4, asr #2
   122cc:	andeq	r2, r0, lr, lsr #26
   122d0:	andeq	r2, r0, r3, asr #26
   122d4:	andeq	r2, r0, pc, ror #29
   122d8:	strheq	r4, [r1], -r0
   122dc:	muleq	r0, sl, ip
   122e0:	andeq	r2, r0, pc, lsr #25
   122e4:	andeq	r2, r0, ip, ror lr
   122e8:	andeq	r4, r1, ip, lsl r0
   122ec:	andeq	r2, r0, r6, lsl #24
   122f0:	andeq	r2, r0, fp, lsl ip
   122f4:	andeq	r2, r0, sl, lsl #28
   122f8:	andeq	r3, r1, r8, lsl #31
   122fc:	andeq	r2, r0, r8, ror #27
   12300:	andeq	r3, r1, r4, asr pc
   12304:	andeq	r2, r0, r2, asr #22
   12308:	andeq	r2, r0, r7, asr fp
   1230c:	andeq	r2, r0, r1, ror sp
   12310:	andeq	r3, r1, r4, asr #29
   12314:	muleq	r1, r8, lr
   12318:	andeq	r2, r0, sl, lsr #31
   1231c:			; <UNDEFINED> instruction: 0x00002fbf
   12320:	andeq	r3, r0, r8, ror #1
   12324:	andeq	r4, r1, ip, lsr #6
   12328:	andeq	r3, r0, sl, lsr r0
   1232c:	andeq	r3, r0, pc, asr #32
   12330:	andeq	r3, r0, r7, asr r1
   12334:			; <UNDEFINED> instruction: 0x000143bc
   12338:	andeq	r3, r0, sl, asr #1
   1233c:	ldrdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   12340:	andeq	r3, r0, r6, asr #3
   12344:	andeq	r4, r1, ip, asr #8
   12348:	andeq	r3, r0, r6, ror #7
   1234c:	strdeq	r3, [r0], -fp
   12350:	andeq	r3, r0, sl, lsr #9
   12354:	andeq	r4, r1, r8, ror #14
   12358:	andeq	r3, r0, r2, ror r4
   1235c:	andeq	r3, r0, r7, lsl #9
   12360:	andeq	r3, r0, r2, lsl r5
   12364:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12368:	strdeq	r3, [r0], -lr
   1236c:	andeq	r3, r0, r3, lsl r5
   12370:	andeq	r3, r0, sp, ror r5
   12374:	andeq	r4, r1, r0, lsl #17
   12378:	push	{fp, lr}
   1237c:	mov	fp, sp
   12380:	sub	sp, sp, #8
   12384:	ldr	r1, [pc, #20]	; 123a0 <main@@Base+0xd64>
   12388:	add	r1, pc, r1
   1238c:	str	r0, [sp, #4]
   12390:	ldr	r0, [sp, #4]
   12394:	bl	13914 <mmk_mock_create_internal@@Base>
   12398:	mov	sp, fp
   1239c:	pop	{fp, pc}
   123a0:	andeq	r0, r0, ip, rrx
   123a4:	push	{fp, lr}
   123a8:	mov	fp, sp
   123ac:	sub	sp, sp, #8
   123b0:	ldr	r1, [pc, #20]	; 123cc <main@@Base+0xd90>
   123b4:	add	r1, pc, r1
   123b8:	str	r0, [sp, #4]
   123bc:	ldr	r0, [sp, #4]
   123c0:	bl	13914 <mmk_mock_create_internal@@Base>
   123c4:	mov	sp, fp
   123c8:	pop	{fp, pc}
   123cc:	andeq	r0, r0, r8, ror #5
   123d0:	push	{fp, lr}
   123d4:	mov	fp, sp
   123d8:	sub	sp, sp, #8
   123dc:	ldr	r1, [pc, #20]	; 123f8 <main@@Base+0xdbc>
   123e0:	add	r1, pc, r1
   123e4:	str	r0, [sp, #4]
   123e8:	ldr	r0, [sp, #4]
   123ec:	bl	13914 <mmk_mock_create_internal@@Base>
   123f0:	mov	sp, fp
   123f4:	pop	{fp, pc}
   123f8:	andeq	r0, r0, ip, lsr #17
   123fc:	push	{fp, lr}
   12400:	mov	fp, sp
   12404:	sub	sp, sp, #72	; 0x48
   12408:	b	1240c <main@@Base+0xdd0>
   1240c:	b	12410 <main@@Base+0xdd4>
   12410:	b	12414 <main@@Base+0xdd8>
   12414:	bl	13884 <mmk_matcher_ctx@@Base>
   12418:	str	r0, [fp, #-4]
   1241c:	ldr	r0, [fp, #-4]
   12420:	movw	lr, #0
   12424:	cmp	r0, lr
   12428:	beq	1254c <main@@Base+0xf10>
   1242c:	bl	14308 <mmk_ctx@@Base>
   12430:	bl	14160 <mmk_stub_context@@Base>
   12434:	str	r0, [fp, #-8]
   12438:	ldr	r0, [fp, #-4]
   1243c:	ldr	r0, [r0]
   12440:	cmp	r0, #0
   12444:	bne	12490 <main@@Base+0xe54>
   12448:	movw	r0, #40	; 0x28
   1244c:	bl	14a0c <mmk_malloc@@Base>
   12450:	str	r0, [fp, #-12]
   12454:	ldr	r0, [fp, #-12]
   12458:	add	r0, r0, #8
   1245c:	str	r0, [sp, #8]
   12460:	bl	14be4 <mmk_when_get_result@@Base>
   12464:	ldr	lr, [sp, #8]
   12468:	str	r0, [sp, #4]
   1246c:	mov	r0, lr
   12470:	ldr	r1, [sp, #4]
   12474:	movw	r2, #20
   12478:	bl	1145c <memcpy@plt>
   1247c:	b	12480 <main@@Base+0xe44>
   12480:	ldr	r0, [fp, #-8]
   12484:	ldr	r1, [fp, #-12]
   12488:	bl	14c04 <mmk_when_impl@@Base>
   1248c:	b	12540 <main@@Base+0xf04>
   12490:	ldr	r0, [fp, #-4]
   12494:	ldr	r0, [r0]
   12498:	cmp	r0, #1
   1249c:	bne	1253c <main@@Base+0xf00>
   124a0:	movw	r0, #0
   124a4:	str	r0, [fp, #-16]
   124a8:	ldr	r0, [fp, #-8]
   124ac:	bl	13b10 <mmk_mock_params_begin@@Base>
   124b0:	str	r0, [fp, #-20]	; 0xffffffec
   124b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   124b8:	movw	r1, #0
   124bc:	cmp	r0, r1
   124c0:	beq	124fc <main@@Base+0xec0>
   124c4:	ldr	r0, [fp, #-4]
   124c8:	str	r0, [fp, #-24]	; 0xffffffe8
   124cc:	b	124d0 <main@@Base+0xe94>
   124d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   124d4:	ldr	r0, [r0]
   124d8:	ldr	r1, [fp, #-16]
   124dc:	add	r0, r1, r0
   124e0:	str	r0, [fp, #-16]
   124e4:	b	124e8 <main@@Base+0xeac>
   124e8:	ldr	r0, [fp, #-8]
   124ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   124f0:	bl	13b30 <mmk_mock_params_next@@Base>
   124f4:	str	r0, [fp, #-20]	; 0xffffffec
   124f8:	b	124b4 <main@@Base+0xe78>
   124fc:	ldr	r0, [fp, #-4]
   12500:	str	r0, [fp, #-28]	; 0xffffffe4
   12504:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12508:	movw	r1, #0
   1250c:	cmp	r0, r1
   12510:	beq	12534 <main@@Base+0xef8>
   12514:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12518:	ldr	r0, [r0, #8]
   1251c:	str	r0, [fp, #-32]	; 0xffffffe0
   12520:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12524:	bl	14a34 <mmk_free@@Base>
   12528:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1252c:	str	r0, [fp, #-28]	; 0xffffffe4
   12530:	b	12504 <main@@Base+0xec8>
   12534:	ldr	r0, [fp, #-16]
   12538:	bl	14560 <mmk_verify_set_times@@Base>
   1253c:	b	12540 <main@@Base+0xf04>
   12540:	b	12544 <main@@Base+0xf08>
   12544:	b	12548 <main@@Base+0xf0c>
   12548:	b	1269c <main@@Base+0x1060>
   1254c:	movw	r0, #0
   12550:	str	r0, [sp, #24]
   12554:	str	r0, [sp, #28]
   12558:	str	r0, [sp, #32]
   1255c:	add	r0, sp, #24
   12560:	str	r0, [sp, #36]	; 0x24
   12564:	b	12568 <main@@Base+0xf2c>
   12568:	ldr	r0, [sp, #36]	; 0x24
   1256c:	movw	r1, #12
   12570:	bl	14614 <mmk_verify_register_call@@Base>
   12574:	bl	13b58 <mmk_mock_get_params@@Base>
   12578:	str	r0, [sp, #20]
   1257c:	ldr	r0, [sp, #20]
   12580:	movw	r1, #0
   12584:	cmp	r0, r1
   12588:	beq	12690 <main@@Base+0x1054>
   1258c:	ldr	r0, [sp, #20]
   12590:	str	r0, [sp, #16]
   12594:	ldr	r0, [sp, #20]
   12598:	ldr	r0, [r0]
   1259c:	str	r0, [sp, #12]
   125a0:	ldr	r0, [sp, #16]
   125a4:	ldr	r0, [r0, #12]
   125a8:	cmp	r0, #0
   125ac:	beq	125c8 <main@@Base+0xf8c>
   125b0:	ldr	r0, [sp, #16]
   125b4:	ldr	r0, [r0, #12]
   125b8:	str	r0, [sp]
   125bc:	bl	114ec <__errno_location@plt>
   125c0:	ldr	lr, [sp]
   125c4:	str	lr, [r0]
   125c8:	ldr	r0, [sp, #16]
   125cc:	ldr	r0, [r0, #20]
   125d0:	movw	r1, #0
   125d4:	cmp	r0, r1
   125d8:	beq	12618 <main@@Base+0xfdc>
   125dc:	ldr	r0, [sp, #16]
   125e0:	ldr	r0, [r0, #16]
   125e4:	movw	r1, #0
   125e8:	cmp	r0, r1
   125ec:	bne	12618 <main@@Base+0xfdc>
   125f0:	b	125f4 <main@@Base+0xfb8>
   125f4:	b	125f8 <main@@Base+0xfbc>
   125f8:	b	125fc <main@@Base+0xfc0>
   125fc:	ldr	r0, [sp, #16]
   12600:	ldr	r0, [r0, #20]
   12604:	blx	r0
   12608:	b	1260c <main@@Base+0xfd0>
   1260c:	b	12610 <main@@Base+0xfd4>
   12610:	b	12614 <main@@Base+0xfd8>
   12614:	b	1269c <main@@Base+0x1060>
   12618:	ldr	r0, [sp, #16]
   1261c:	ldr	r0, [r0, #20]
   12620:	movw	r1, #0
   12624:	cmp	r0, r1
   12628:	beq	12664 <main@@Base+0x1028>
   1262c:	ldr	r0, [sp, #16]
   12630:	ldr	r0, [r0, #16]
   12634:	movw	r1, #0
   12638:	cmp	r0, r1
   1263c:	beq	12664 <main@@Base+0x1028>
   12640:	b	12644 <main@@Base+0x1008>
   12644:	b	12648 <main@@Base+0x100c>
   12648:	ldr	r0, [sp, #16]
   1264c:	ldr	r0, [r0, #20]
   12650:	blx	r0
   12654:	b	12658 <main@@Base+0x101c>
   12658:	b	1265c <main@@Base+0x1020>
   1265c:	b	12660 <main@@Base+0x1024>
   12660:	b	1269c <main@@Base+0x1060>
   12664:	ldr	r0, [sp, #16]
   12668:	ldr	r0, [r0, #16]
   1266c:	movw	r1, #0
   12670:	cmp	r0, r1
   12674:	beq	12684 <main@@Base+0x1048>
   12678:	b	1267c <main@@Base+0x1040>
   1267c:	b	12680 <main@@Base+0x1044>
   12680:	b	1269c <main@@Base+0x1060>
   12684:	b	12688 <main@@Base+0x104c>
   12688:	b	1268c <main@@Base+0x1050>
   1268c:	b	1269c <main@@Base+0x1060>
   12690:	b	12694 <main@@Base+0x1058>
   12694:	b	12698 <main@@Base+0x105c>
   12698:	b	1269c <main@@Base+0x1060>
   1269c:	mov	sp, fp
   126a0:	pop	{fp, pc}
   126a4:	push	{fp, lr}
   126a8:	mov	fp, sp
   126ac:	sub	sp, sp, #128	; 0x80
   126b0:	str	r0, [fp, #-8]
   126b4:	b	126b8 <main@@Base+0x107c>
   126b8:	bl	13884 <mmk_matcher_ctx@@Base>
   126bc:	str	r0, [fp, #-12]
   126c0:	ldr	r0, [fp, #-12]
   126c4:	movw	lr, #0
   126c8:	cmp	r0, lr
   126cc:	beq	12958 <main@@Base+0x131c>
   126d0:	bl	14308 <mmk_ctx@@Base>
   126d4:	bl	14160 <mmk_stub_context@@Base>
   126d8:	str	r0, [fp, #-16]
   126dc:	ldr	r0, [fp, #-12]
   126e0:	ldr	r0, [r0]
   126e4:	cmp	r0, #0
   126e8:	bne	12740 <main@@Base+0x1104>
   126ec:	movw	r0, #44	; 0x2c
   126f0:	bl	14a0c <mmk_malloc@@Base>
   126f4:	str	r0, [fp, #-20]	; 0xffffffec
   126f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   126fc:	add	r0, r0, #8
   12700:	str	r0, [sp, #32]
   12704:	bl	14be4 <mmk_when_get_result@@Base>
   12708:	ldr	lr, [sp, #32]
   1270c:	str	r0, [sp, #28]
   12710:	mov	r0, lr
   12714:	ldr	r1, [sp, #28]
   12718:	movw	r2, #20
   1271c:	bl	1145c <memcpy@plt>
   12720:	ldr	r0, [fp, #-8]
   12724:	ldr	r1, [fp, #-20]	; 0xffffffec
   12728:	str	r0, [r1, #40]	; 0x28
   1272c:	b	12730 <main@@Base+0x10f4>
   12730:	ldr	r0, [fp, #-16]
   12734:	ldr	r1, [fp, #-20]	; 0xffffffec
   12738:	bl	14c04 <mmk_when_impl@@Base>
   1273c:	b	1293c <main@@Base+0x1300>
   12740:	ldr	r0, [fp, #-12]
   12744:	ldr	r0, [r0]
   12748:	cmp	r0, #1
   1274c:	bne	12938 <main@@Base+0x12fc>
   12750:	movw	r0, #0
   12754:	str	r0, [fp, #-24]	; 0xffffffe8
   12758:	ldr	r0, [fp, #-16]
   1275c:	bl	13b10 <mmk_mock_params_begin@@Base>
   12760:	str	r0, [fp, #-28]	; 0xffffffe4
   12764:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12768:	movw	r1, #0
   1276c:	cmp	r0, r1
   12770:	beq	128f8 <main@@Base+0x12bc>
   12774:	ldr	r0, [fp, #-12]
   12778:	str	r0, [fp, #-32]	; 0xffffffe0
   1277c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12780:	ldr	r0, [r0, #8]
   12784:	movw	r1, #0
   12788:	cmp	r0, r1
   1278c:	beq	128a0 <main@@Base+0x1264>
   12790:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12794:	ldr	r0, [r0, #8]
   12798:	str	r0, [fp, #-32]	; 0xffffffe0
   1279c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   127a0:	ldr	r0, [r0]
   127a4:	cmp	r0, #0
   127a8:	bne	127b0 <main@@Base+0x1174>
   127ac:	b	1289c <main@@Base+0x1260>
   127b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   127b4:	ldr	r0, [r0]
   127b8:	and	r0, r0, #-2147483648	; 0x80000000
   127bc:	cmp	r0, #0
   127c0:	beq	1284c <main@@Base+0x1210>
   127c4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   127c8:	add	r0, r0, #12
   127cc:	sub	r1, fp, #8
   127d0:	movw	r2, #4
   127d4:	bl	147dc <mmk_memcmp@@Base>
   127d8:	str	r0, [fp, #-36]	; 0xffffffdc
   127dc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   127e0:	cmp	r0, #0
   127e4:	bne	12800 <main@@Base+0x11c4>
   127e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   127ec:	ldr	r0, [r0]
   127f0:	and	r0, r0, #2
   127f4:	cmp	r0, #0
   127f8:	bne	12800 <main@@Base+0x11c4>
   127fc:	b	128e0 <main@@Base+0x12a4>
   12800:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12804:	cmp	r0, #0
   12808:	bge	12824 <main@@Base+0x11e8>
   1280c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12810:	ldr	r0, [r0]
   12814:	and	r0, r0, #4
   12818:	cmp	r0, #0
   1281c:	bne	12824 <main@@Base+0x11e8>
   12820:	b	128e0 <main@@Base+0x12a4>
   12824:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12828:	cmp	r0, #0
   1282c:	ble	12848 <main@@Base+0x120c>
   12830:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12834:	ldr	r0, [r0]
   12838:	and	r0, r0, #8
   1283c:	cmp	r0, #0
   12840:	bne	12848 <main@@Base+0x120c>
   12844:	b	128e0 <main@@Base+0x12a4>
   12848:	b	12898 <main@@Base+0x125c>
   1284c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12850:	ldr	r0, [r0]
   12854:	cmp	r0, #1
   12858:	bne	12894 <main@@Base+0x1258>
   1285c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12860:	bl	1390c <mmk_matcher_get_predicate@@Base>
   12864:	str	r0, [fp, #-40]	; 0xffffffd8
   12868:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1286c:	ldr	lr, [fp, #-28]	; 0xffffffe4
   12870:	ldr	lr, [lr, #12]
   12874:	str	r0, [sp, #24]
   12878:	mov	r0, lr
   1287c:	ldr	lr, [sp, #24]
   12880:	blx	lr
   12884:	cmp	r0, #0
   12888:	bne	12890 <main@@Base+0x1254>
   1288c:	b	128e0 <main@@Base+0x12a4>
   12890:	b	12894 <main@@Base+0x1258>
   12894:	b	12898 <main@@Base+0x125c>
   12898:	b	1289c <main@@Base+0x1260>
   1289c:	b	128c4 <main@@Base+0x1288>
   128a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   128a4:	add	r0, r0, #12
   128a8:	sub	r1, fp, #8
   128ac:	movw	r2, #4
   128b0:	bl	147dc <mmk_memcmp@@Base>
   128b4:	cmp	r0, #0
   128b8:	beq	128c0 <main@@Base+0x1284>
   128bc:	b	128e0 <main@@Base+0x12a4>
   128c0:	b	128c4 <main@@Base+0x1288>
   128c4:	b	128c8 <main@@Base+0x128c>
   128c8:	b	128cc <main@@Base+0x1290>
   128cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   128d0:	ldr	r0, [r0]
   128d4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   128d8:	add	r0, r1, r0
   128dc:	str	r0, [fp, #-24]	; 0xffffffe8
   128e0:	b	128e4 <main@@Base+0x12a8>
   128e4:	ldr	r0, [fp, #-16]
   128e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   128ec:	bl	13b30 <mmk_mock_params_next@@Base>
   128f0:	str	r0, [fp, #-28]	; 0xffffffe4
   128f4:	b	12764 <main@@Base+0x1128>
   128f8:	ldr	r0, [fp, #-12]
   128fc:	str	r0, [fp, #-44]	; 0xffffffd4
   12900:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12904:	movw	r1, #0
   12908:	cmp	r0, r1
   1290c:	beq	12930 <main@@Base+0x12f4>
   12910:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12914:	ldr	r0, [r0, #8]
   12918:	str	r0, [fp, #-48]	; 0xffffffd0
   1291c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12920:	bl	14a34 <mmk_free@@Base>
   12924:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12928:	str	r0, [fp, #-44]	; 0xffffffd4
   1292c:	b	12900 <main@@Base+0x12c4>
   12930:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12934:	bl	14560 <mmk_verify_set_times@@Base>
   12938:	b	1293c <main@@Base+0x1300>
   1293c:	b	12940 <main@@Base+0x1304>
   12940:	b	12944 <main@@Base+0x1308>
   12944:	ldr	r0, [pc, #836]	; 12c90 <main@@Base+0x1654>
   12948:	add	r0, pc, r0
   1294c:	ldr	r0, [r0]
   12950:	str	r0, [fp, #-4]
   12954:	b	12c7c <main@@Base+0x1640>
   12958:	movw	r0, #0
   1295c:	str	r0, [sp, #60]	; 0x3c
   12960:	str	r0, [sp, #64]	; 0x40
   12964:	str	r0, [sp, #68]	; 0x44
   12968:	ldr	r0, [fp, #-8]
   1296c:	str	r0, [sp, #72]	; 0x48
   12970:	add	r0, sp, #60	; 0x3c
   12974:	str	r0, [fp, #-52]	; 0xffffffcc
   12978:	b	1297c <main@@Base+0x1340>
   1297c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12980:	movw	r1, #16
   12984:	bl	14614 <mmk_verify_register_call@@Base>
   12988:	bl	13b58 <mmk_mock_get_params@@Base>
   1298c:	str	r0, [sp, #56]	; 0x38
   12990:	ldr	r0, [sp, #56]	; 0x38
   12994:	movw	r1, #0
   12998:	cmp	r0, r1
   1299c:	beq	12c64 <main@@Base+0x1628>
   129a0:	ldr	r0, [sp, #56]	; 0x38
   129a4:	str	r0, [sp, #52]	; 0x34
   129a8:	ldr	r0, [sp, #56]	; 0x38
   129ac:	ldr	r0, [r0]
   129b0:	str	r0, [sp, #48]	; 0x30
   129b4:	ldr	r0, [sp, #48]	; 0x30
   129b8:	ldr	r0, [r0, #8]
   129bc:	movw	r1, #0
   129c0:	cmp	r0, r1
   129c4:	beq	12adc <main@@Base+0x14a0>
   129c8:	ldr	r0, [sp, #48]	; 0x30
   129cc:	ldr	r0, [r0, #8]
   129d0:	str	r0, [sp, #48]	; 0x30
   129d4:	ldr	r0, [sp, #48]	; 0x30
   129d8:	ldr	r0, [r0]
   129dc:	cmp	r0, #0
   129e0:	bne	129e8 <main@@Base+0x13ac>
   129e4:	b	12ad8 <main@@Base+0x149c>
   129e8:	ldr	r0, [sp, #48]	; 0x30
   129ec:	ldr	r0, [r0]
   129f0:	and	r0, r0, #-2147483648	; 0x80000000
   129f4:	cmp	r0, #0
   129f8:	beq	12a8c <main@@Base+0x1450>
   129fc:	sub	r0, fp, #8
   12a00:	mov	r1, r0
   12a04:	str	r0, [sp, #20]
   12a08:	mov	r0, r1
   12a0c:	ldr	r1, [sp, #20]
   12a10:	movw	r2, #4
   12a14:	bl	147dc <mmk_memcmp@@Base>
   12a18:	str	r0, [sp, #44]	; 0x2c
   12a1c:	ldr	r0, [sp, #44]	; 0x2c
   12a20:	cmp	r0, #0
   12a24:	bne	12a40 <main@@Base+0x1404>
   12a28:	ldr	r0, [sp, #48]	; 0x30
   12a2c:	ldr	r0, [r0]
   12a30:	and	r0, r0, #2
   12a34:	cmp	r0, #0
   12a38:	bne	12a40 <main@@Base+0x1404>
   12a3c:	b	12c54 <main@@Base+0x1618>
   12a40:	ldr	r0, [sp, #44]	; 0x2c
   12a44:	cmp	r0, #0
   12a48:	bge	12a64 <main@@Base+0x1428>
   12a4c:	ldr	r0, [sp, #48]	; 0x30
   12a50:	ldr	r0, [r0]
   12a54:	and	r0, r0, #4
   12a58:	cmp	r0, #0
   12a5c:	bne	12a64 <main@@Base+0x1428>
   12a60:	b	12c54 <main@@Base+0x1618>
   12a64:	ldr	r0, [sp, #44]	; 0x2c
   12a68:	cmp	r0, #0
   12a6c:	ble	12a88 <main@@Base+0x144c>
   12a70:	ldr	r0, [sp, #48]	; 0x30
   12a74:	ldr	r0, [r0]
   12a78:	and	r0, r0, #8
   12a7c:	cmp	r0, #0
   12a80:	bne	12a88 <main@@Base+0x144c>
   12a84:	b	12c54 <main@@Base+0x1618>
   12a88:	b	12ad4 <main@@Base+0x1498>
   12a8c:	ldr	r0, [sp, #48]	; 0x30
   12a90:	ldr	r0, [r0]
   12a94:	cmp	r0, #1
   12a98:	bne	12ad0 <main@@Base+0x1494>
   12a9c:	ldr	r0, [sp, #48]	; 0x30
   12aa0:	bl	1390c <mmk_matcher_get_predicate@@Base>
   12aa4:	str	r0, [sp, #40]	; 0x28
   12aa8:	ldr	r0, [sp, #40]	; 0x28
   12aac:	ldr	lr, [fp, #-8]
   12ab0:	str	r0, [sp, #16]
   12ab4:	mov	r0, lr
   12ab8:	ldr	lr, [sp, #16]
   12abc:	blx	lr
   12ac0:	cmp	r0, #0
   12ac4:	bne	12acc <main@@Base+0x1490>
   12ac8:	b	12c54 <main@@Base+0x1618>
   12acc:	b	12ad0 <main@@Base+0x1494>
   12ad0:	b	12ad4 <main@@Base+0x1498>
   12ad4:	b	12ad8 <main@@Base+0x149c>
   12ad8:	b	12b04 <main@@Base+0x14c8>
   12adc:	sub	r0, fp, #8
   12ae0:	ldr	r1, [sp, #52]	; 0x34
   12ae4:	add	r1, r1, #28
   12ae8:	add	r1, r1, #12
   12aec:	movw	r2, #4
   12af0:	bl	147dc <mmk_memcmp@@Base>
   12af4:	cmp	r0, #0
   12af8:	beq	12b00 <main@@Base+0x14c4>
   12afc:	b	12c54 <main@@Base+0x1618>
   12b00:	b	12b04 <main@@Base+0x14c8>
   12b04:	ldr	r0, [sp, #52]	; 0x34
   12b08:	ldr	r0, [r0, #12]
   12b0c:	cmp	r0, #0
   12b10:	beq	12b2c <main@@Base+0x14f0>
   12b14:	ldr	r0, [sp, #52]	; 0x34
   12b18:	ldr	r0, [r0, #12]
   12b1c:	str	r0, [sp, #12]
   12b20:	bl	114ec <__errno_location@plt>
   12b24:	ldr	lr, [sp, #12]
   12b28:	str	lr, [r0]
   12b2c:	ldr	r0, [sp, #52]	; 0x34
   12b30:	ldr	r0, [r0, #20]
   12b34:	movw	r1, #0
   12b38:	cmp	r0, r1
   12b3c:	beq	12b98 <main@@Base+0x155c>
   12b40:	ldr	r0, [sp, #52]	; 0x34
   12b44:	ldr	r0, [r0, #16]
   12b48:	movw	r1, #0
   12b4c:	cmp	r0, r1
   12b50:	bne	12b98 <main@@Base+0x155c>
   12b54:	b	12b58 <main@@Base+0x151c>
   12b58:	b	12b5c <main@@Base+0x1520>
   12b5c:	b	12b60 <main@@Base+0x1524>
   12b60:	ldr	r0, [sp, #52]	; 0x34
   12b64:	ldr	r0, [r0, #20]
   12b68:	ldr	r1, [fp, #-8]
   12b6c:	str	r0, [sp, #8]
   12b70:	mov	r0, r1
   12b74:	ldr	r1, [sp, #8]
   12b78:	blx	r1
   12b7c:	str	r0, [sp, #36]	; 0x24
   12b80:	b	12b84 <main@@Base+0x1548>
   12b84:	b	12b88 <main@@Base+0x154c>
   12b88:	b	12b8c <main@@Base+0x1550>
   12b8c:	ldr	r0, [sp, #36]	; 0x24
   12b90:	str	r0, [fp, #-4]
   12b94:	b	12c7c <main@@Base+0x1640>
   12b98:	ldr	r0, [sp, #52]	; 0x34
   12b9c:	ldr	r0, [r0, #20]
   12ba0:	movw	r1, #0
   12ba4:	cmp	r0, r1
   12ba8:	beq	12c08 <main@@Base+0x15cc>
   12bac:	ldr	r0, [sp, #52]	; 0x34
   12bb0:	ldr	r0, [r0, #16]
   12bb4:	movw	r1, #0
   12bb8:	cmp	r0, r1
   12bbc:	beq	12c08 <main@@Base+0x15cc>
   12bc0:	b	12bc4 <main@@Base+0x1588>
   12bc4:	b	12bc8 <main@@Base+0x158c>
   12bc8:	ldr	r0, [sp, #52]	; 0x34
   12bcc:	ldr	r0, [r0, #20]
   12bd0:	ldr	r1, [fp, #-8]
   12bd4:	str	r0, [sp, #4]
   12bd8:	mov	r0, r1
   12bdc:	ldr	r1, [sp, #4]
   12be0:	blx	r1
   12be4:	str	r0, [sp]
   12be8:	b	12bec <main@@Base+0x15b0>
   12bec:	b	12bf0 <main@@Base+0x15b4>
   12bf0:	b	12bf4 <main@@Base+0x15b8>
   12bf4:	ldr	r0, [sp, #52]	; 0x34
   12bf8:	ldr	r0, [r0, #16]
   12bfc:	ldr	r0, [r0]
   12c00:	str	r0, [fp, #-4]
   12c04:	b	12c7c <main@@Base+0x1640>
   12c08:	ldr	r0, [sp, #52]	; 0x34
   12c0c:	ldr	r0, [r0, #16]
   12c10:	movw	r1, #0
   12c14:	cmp	r0, r1
   12c18:	beq	12c38 <main@@Base+0x15fc>
   12c1c:	b	12c20 <main@@Base+0x15e4>
   12c20:	b	12c24 <main@@Base+0x15e8>
   12c24:	ldr	r0, [sp, #52]	; 0x34
   12c28:	ldr	r0, [r0, #16]
   12c2c:	ldr	r0, [r0]
   12c30:	str	r0, [fp, #-4]
   12c34:	b	12c7c <main@@Base+0x1640>
   12c38:	b	12c3c <main@@Base+0x1600>
   12c3c:	b	12c40 <main@@Base+0x1604>
   12c40:	ldr	r0, [pc, #68]	; 12c8c <main@@Base+0x1650>
   12c44:	add	r0, pc, r0
   12c48:	ldr	r0, [r0]
   12c4c:	str	r0, [fp, #-4]
   12c50:	b	12c7c <main@@Base+0x1640>
   12c54:	ldr	r0, [sp, #56]	; 0x38
   12c58:	ldr	r0, [r0, #4]
   12c5c:	str	r0, [sp, #56]	; 0x38
   12c60:	b	12990 <main@@Base+0x1354>
   12c64:	b	12c68 <main@@Base+0x162c>
   12c68:	b	12c6c <main@@Base+0x1630>
   12c6c:	ldr	r0, [pc, #20]	; 12c88 <main@@Base+0x164c>
   12c70:	add	r0, pc, r0
   12c74:	ldr	r0, [r0]
   12c78:	str	r0, [fp, #-4]
   12c7c:	ldr	r0, [fp, #-4]
   12c80:	mov	sp, fp
   12c84:	pop	{fp, pc}
   12c88:	andeq	r3, r1, r4, ror #8
   12c8c:	muleq	r1, r0, r4
   12c90:	andeq	r3, r1, ip, lsl #15
   12c94:	sub	sp, sp, #12
   12c98:	push	{r4, r5, fp, lr}
   12c9c:	add	fp, sp, #8
   12ca0:	sub	sp, sp, #260	; 0x104
   12ca4:	str	r3, [fp, #16]
   12ca8:	str	r2, [fp, #12]
   12cac:	str	r1, [fp, #8]
   12cb0:	ldr	r1, [pc, #2348]	; 135e4 <main@@Base+0x1fa8>
   12cb4:	add	r1, pc, r1
   12cb8:	str	r0, [fp, #-16]
   12cbc:	str	r1, [fp, #-20]	; 0xffffffec
   12cc0:	sub	r0, fp, #24
   12cc4:	add	r1, fp, #8
   12cc8:	str	r1, [r0]
   12ccc:	bl	13884 <mmk_matcher_ctx@@Base>
   12cd0:	str	r0, [fp, #-32]	; 0xffffffe0
   12cd4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12cd8:	movw	r1, #0
   12cdc:	cmp	r0, r1
   12ce0:	beq	13220 <main@@Base+0x1be4>
   12ce4:	bl	14308 <mmk_ctx@@Base>
   12ce8:	bl	14160 <mmk_stub_context@@Base>
   12cec:	str	r0, [fp, #-36]	; 0xffffffdc
   12cf0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12cf4:	ldr	r0, [r0]
   12cf8:	cmp	r0, #0
   12cfc:	bne	12dc8 <main@@Base+0x178c>
   12d00:	movw	r0, #44	; 0x2c
   12d04:	bl	14a0c <mmk_malloc@@Base>
   12d08:	str	r0, [fp, #-40]	; 0xffffffd8
   12d0c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12d10:	add	r0, r0, #8
   12d14:	str	r0, [sp, #96]	; 0x60
   12d18:	bl	14be4 <mmk_when_get_result@@Base>
   12d1c:	ldr	lr, [sp, #96]	; 0x60
   12d20:	str	r0, [sp, #92]	; 0x5c
   12d24:	mov	r0, lr
   12d28:	ldr	r1, [sp, #92]	; 0x5c
   12d2c:	movw	r2, #20
   12d30:	bl	1145c <memcpy@plt>
   12d34:	ldr	r0, [fp, #-16]
   12d38:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12d3c:	str	r0, [r1, #40]	; 0x28
   12d40:	mov	r0, #0
   12d44:	str	r0, [fp, #-44]	; 0xffffffd4
   12d48:	str	r0, [fp, #-48]	; 0xffffffd0
   12d4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12d50:	str	r0, [fp, #-28]	; 0xffffffe4
   12d54:	ldr	r0, [fp, #-20]	; 0xffffffec
   12d58:	ldr	r1, [fp, #-16]
   12d5c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12d60:	sub	r3, fp, #44	; 0x2c
   12d64:	sub	ip, fp, #48	; 0x30
   12d68:	str	r0, [sp, #88]	; 0x58
   12d6c:	mov	r0, r1
   12d70:	mov	r1, r2
   12d74:	mov	r2, r3
   12d78:	mov	r3, ip
   12d7c:	ldr	ip, [sp, #88]	; 0x58
   12d80:	blx	ip
   12d84:	str	r0, [fp, #-52]	; 0xffffffcc
   12d88:	sub	r0, fp, #28
   12d8c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12d90:	cmp	r1, #0
   12d94:	str	r0, [sp, #84]	; 0x54
   12d98:	beq	12db4 <main@@Base+0x1778>
   12d9c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12da0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12da4:	str	r0, [r1, #32]
   12da8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12dac:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12db0:	str	r0, [r1, #36]	; 0x24
   12db4:	b	12db8 <main@@Base+0x177c>
   12db8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12dbc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12dc0:	bl	14c04 <mmk_when_impl@@Base>
   12dc4:	b	13204 <main@@Base+0x1bc8>
   12dc8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12dcc:	ldr	r0, [r0]
   12dd0:	cmp	r0, #1
   12dd4:	bne	13200 <main@@Base+0x1bc4>
   12dd8:	movw	r0, #0
   12ddc:	str	r0, [fp, #-56]	; 0xffffffc8
   12de0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12de4:	bl	13b10 <mmk_mock_params_begin@@Base>
   12de8:	str	r0, [fp, #-60]	; 0xffffffc4
   12dec:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12df0:	movw	r1, #0
   12df4:	cmp	r0, r1
   12df8:	beq	131c0 <main@@Base+0x1b84>
   12dfc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12e00:	str	r0, [fp, #-64]	; 0xffffffc0
   12e04:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e08:	ldr	r0, [r0, #8]
   12e0c:	movw	r1, #0
   12e10:	cmp	r0, r1
   12e14:	beq	12f28 <main@@Base+0x18ec>
   12e18:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e1c:	ldr	r0, [r0, #8]
   12e20:	str	r0, [fp, #-64]	; 0xffffffc0
   12e24:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e28:	ldr	r0, [r0]
   12e2c:	cmp	r0, #0
   12e30:	bne	12e38 <main@@Base+0x17fc>
   12e34:	b	12f24 <main@@Base+0x18e8>
   12e38:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e3c:	ldr	r0, [r0]
   12e40:	and	r0, r0, #-2147483648	; 0x80000000
   12e44:	cmp	r0, #0
   12e48:	beq	12ed4 <main@@Base+0x1898>
   12e4c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12e50:	add	r0, r0, #12
   12e54:	sub	r1, fp, #16
   12e58:	movw	r2, #4
   12e5c:	bl	147dc <mmk_memcmp@@Base>
   12e60:	str	r0, [fp, #-68]	; 0xffffffbc
   12e64:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e68:	cmp	r0, #0
   12e6c:	bne	12e88 <main@@Base+0x184c>
   12e70:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e74:	ldr	r0, [r0]
   12e78:	and	r0, r0, #2
   12e7c:	cmp	r0, #0
   12e80:	bne	12e88 <main@@Base+0x184c>
   12e84:	b	131a8 <main@@Base+0x1b6c>
   12e88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e8c:	cmp	r0, #0
   12e90:	bge	12eac <main@@Base+0x1870>
   12e94:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e98:	ldr	r0, [r0]
   12e9c:	and	r0, r0, #4
   12ea0:	cmp	r0, #0
   12ea4:	bne	12eac <main@@Base+0x1870>
   12ea8:	b	131a8 <main@@Base+0x1b6c>
   12eac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12eb0:	cmp	r0, #0
   12eb4:	ble	12ed0 <main@@Base+0x1894>
   12eb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ebc:	ldr	r0, [r0]
   12ec0:	and	r0, r0, #8
   12ec4:	cmp	r0, #0
   12ec8:	bne	12ed0 <main@@Base+0x1894>
   12ecc:	b	131a8 <main@@Base+0x1b6c>
   12ed0:	b	12f20 <main@@Base+0x18e4>
   12ed4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ed8:	ldr	r0, [r0]
   12edc:	cmp	r0, #1
   12ee0:	bne	12f1c <main@@Base+0x18e0>
   12ee4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ee8:	bl	1390c <mmk_matcher_get_predicate@@Base>
   12eec:	str	r0, [fp, #-72]	; 0xffffffb8
   12ef0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ef4:	ldr	lr, [fp, #-60]	; 0xffffffc4
   12ef8:	ldr	lr, [lr, #12]
   12efc:	str	r0, [sp, #80]	; 0x50
   12f00:	mov	r0, lr
   12f04:	ldr	lr, [sp, #80]	; 0x50
   12f08:	blx	lr
   12f0c:	cmp	r0, #0
   12f10:	bne	12f18 <main@@Base+0x18dc>
   12f14:	b	131a8 <main@@Base+0x1b6c>
   12f18:	b	12f1c <main@@Base+0x18e0>
   12f1c:	b	12f20 <main@@Base+0x18e4>
   12f20:	b	12f24 <main@@Base+0x18e8>
   12f24:	b	12f4c <main@@Base+0x1910>
   12f28:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12f2c:	add	r0, r0, #12
   12f30:	sub	r1, fp, #16
   12f34:	movw	r2, #4
   12f38:	bl	147dc <mmk_memcmp@@Base>
   12f3c:	cmp	r0, #0
   12f40:	beq	12f48 <main@@Base+0x190c>
   12f44:	b	131a8 <main@@Base+0x1b6c>
   12f48:	b	12f4c <main@@Base+0x1910>
   12f4c:	b	12f50 <main@@Base+0x1914>
   12f50:	mov	r0, #0
   12f54:	str	r0, [fp, #-76]	; 0xffffffb4
   12f58:	str	r0, [fp, #-80]	; 0xffffffb0
   12f5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12f60:	str	r0, [fp, #-28]	; 0xffffffe4
   12f64:	ldr	r0, [fp, #-20]	; 0xffffffec
   12f68:	ldr	r1, [fp, #-16]
   12f6c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12f70:	sub	r3, fp, #76	; 0x4c
   12f74:	sub	ip, fp, #80	; 0x50
   12f78:	str	r0, [sp, #76]	; 0x4c
   12f7c:	mov	r0, r1
   12f80:	mov	r1, r2
   12f84:	mov	r2, r3
   12f88:	mov	r3, ip
   12f8c:	ldr	ip, [sp, #76]	; 0x4c
   12f90:	blx	ip
   12f94:	str	r0, [fp, #-84]	; 0xffffffac
   12f98:	sub	r0, fp, #28
   12f9c:	ldr	r1, [fp, #-84]	; 0xffffffac
   12fa0:	cmp	r1, #0
   12fa4:	str	r0, [sp, #72]	; 0x48
   12fa8:	beq	12fc0 <main@@Base+0x1984>
   12fac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12fb0:	ldr	r0, [r0, #4]
   12fb4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12fb8:	cmp	r0, r1
   12fbc:	beq	12fc4 <main@@Base+0x1988>
   12fc0:	b	131a8 <main@@Base+0x1b6c>
   12fc4:	movw	r0, #0
   12fc8:	str	r0, [fp, #-88]	; 0xffffffa8
   12fcc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12fd0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12fd4:	cmp	r0, r1
   12fd8:	bcs	1318c <main@@Base+0x1b50>
   12fdc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12fe0:	ldr	r0, [r0, #8]
   12fe4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12fe8:	ldr	r0, [r0, r1, lsl #2]
   12fec:	str	r0, [fp, #-92]	; 0xffffffa4
   12ff0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12ff4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12ff8:	add	r0, r0, r1, lsl #2
   12ffc:	ldr	r0, [r0]
   13000:	str	r0, [fp, #-96]	; 0xffffffa0
   13004:	ldr	r0, [fp, #-92]	; 0xffffffa4
   13008:	ldr	r0, [r0]
   1300c:	ldr	r1, [fp, #-96]	; 0xffffffa0
   13010:	ldr	r1, [r1]
   13014:	cmp	r0, r1
   13018:	beq	13020 <main@@Base+0x19e4>
   1301c:	b	131a8 <main@@Base+0x1b6c>
   13020:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13024:	ldr	r0, [r0, #8]
   13028:	movw	r1, #0
   1302c:	cmp	r0, r1
   13030:	beq	13148 <main@@Base+0x1b0c>
   13034:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13038:	ldr	r0, [r0, #8]
   1303c:	str	r0, [fp, #-64]	; 0xffffffc0
   13040:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13044:	ldr	r0, [r0]
   13048:	cmp	r0, #0
   1304c:	bne	13054 <main@@Base+0x1a18>
   13050:	b	13144 <main@@Base+0x1b08>
   13054:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13058:	ldr	r0, [r0]
   1305c:	and	r0, r0, #-2147483648	; 0x80000000
   13060:	cmp	r0, #0
   13064:	beq	130f8 <main@@Base+0x1abc>
   13068:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1306c:	add	r0, r0, #4
   13070:	ldr	r1, [fp, #-96]	; 0xffffffa0
   13074:	add	r1, r1, #4
   13078:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1307c:	ldr	r2, [r2]
   13080:	bl	147dc <mmk_memcmp@@Base>
   13084:	str	r0, [fp, #-100]	; 0xffffff9c
   13088:	ldr	r0, [fp, #-100]	; 0xffffff9c
   1308c:	cmp	r0, #0
   13090:	bne	130ac <main@@Base+0x1a70>
   13094:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13098:	ldr	r0, [r0]
   1309c:	and	r0, r0, #2
   130a0:	cmp	r0, #0
   130a4:	bne	130ac <main@@Base+0x1a70>
   130a8:	b	131a8 <main@@Base+0x1b6c>
   130ac:	ldr	r0, [fp, #-100]	; 0xffffff9c
   130b0:	cmp	r0, #0
   130b4:	bge	130d0 <main@@Base+0x1a94>
   130b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   130bc:	ldr	r0, [r0]
   130c0:	and	r0, r0, #4
   130c4:	cmp	r0, #0
   130c8:	bne	130d0 <main@@Base+0x1a94>
   130cc:	b	131a8 <main@@Base+0x1b6c>
   130d0:	ldr	r0, [fp, #-100]	; 0xffffff9c
   130d4:	cmp	r0, #0
   130d8:	ble	130f4 <main@@Base+0x1ab8>
   130dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   130e0:	ldr	r0, [r0]
   130e4:	and	r0, r0, #8
   130e8:	cmp	r0, #0
   130ec:	bne	130f4 <main@@Base+0x1ab8>
   130f0:	b	131a8 <main@@Base+0x1b6c>
   130f4:	b	13140 <main@@Base+0x1b04>
   130f8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   130fc:	ldr	r0, [r0]
   13100:	cmp	r0, #1
   13104:	bne	1313c <main@@Base+0x1b00>
   13108:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1310c:	bl	1390c <mmk_matcher_get_predicate@@Base>
   13110:	str	r0, [fp, #-104]	; 0xffffff98
   13114:	ldr	r0, [fp, #-104]	; 0xffffff98
   13118:	ldr	lr, [fp, #-92]	; 0xffffffa4
   1311c:	str	r0, [sp, #68]	; 0x44
   13120:	mov	r0, lr
   13124:	ldr	lr, [sp, #68]	; 0x44
   13128:	blx	lr
   1312c:	cmp	r0, #0
   13130:	bne	13138 <main@@Base+0x1afc>
   13134:	b	131a8 <main@@Base+0x1b6c>
   13138:	b	1313c <main@@Base+0x1b00>
   1313c:	b	13140 <main@@Base+0x1b04>
   13140:	b	13144 <main@@Base+0x1b08>
   13144:	b	13174 <main@@Base+0x1b38>
   13148:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1314c:	add	r0, r0, #4
   13150:	ldr	r1, [fp, #-96]	; 0xffffffa0
   13154:	add	r1, r1, #4
   13158:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1315c:	ldr	r2, [r2]
   13160:	bl	147dc <mmk_memcmp@@Base>
   13164:	cmp	r0, #0
   13168:	beq	13170 <main@@Base+0x1b34>
   1316c:	b	131a8 <main@@Base+0x1b6c>
   13170:	b	13174 <main@@Base+0x1b38>
   13174:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13178:	bl	14a34 <mmk_free@@Base>
   1317c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13180:	add	r0, r0, #1
   13184:	str	r0, [fp, #-88]	; 0xffffffa8
   13188:	b	12fcc <main@@Base+0x1990>
   1318c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13190:	bl	14a34 <mmk_free@@Base>
   13194:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13198:	ldr	r0, [r0]
   1319c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   131a0:	add	r0, r1, r0
   131a4:	str	r0, [fp, #-56]	; 0xffffffc8
   131a8:	b	131ac <main@@Base+0x1b70>
   131ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   131b0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   131b4:	bl	13b30 <mmk_mock_params_next@@Base>
   131b8:	str	r0, [fp, #-60]	; 0xffffffc4
   131bc:	b	12dec <main@@Base+0x17b0>
   131c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   131c4:	str	r0, [fp, #-108]	; 0xffffff94
   131c8:	ldr	r0, [fp, #-108]	; 0xffffff94
   131cc:	movw	r1, #0
   131d0:	cmp	r0, r1
   131d4:	beq	131f8 <main@@Base+0x1bbc>
   131d8:	ldr	r0, [fp, #-108]	; 0xffffff94
   131dc:	ldr	r0, [r0, #8]
   131e0:	str	r0, [fp, #-112]	; 0xffffff90
   131e4:	ldr	r0, [fp, #-108]	; 0xffffff94
   131e8:	bl	14a34 <mmk_free@@Base>
   131ec:	ldr	r0, [fp, #-112]	; 0xffffff90
   131f0:	str	r0, [fp, #-108]	; 0xffffff94
   131f4:	b	131c8 <main@@Base+0x1b8c>
   131f8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   131fc:	bl	14560 <mmk_verify_set_times@@Base>
   13200:	b	13204 <main@@Base+0x1bc8>
   13204:	ldr	r0, [pc, #996]	; 135f0 <main@@Base+0x1fb4>
   13208:	add	r0, pc, r0
   1320c:	sub	r1, fp, #24
   13210:	ldr	r0, [r0]
   13214:	str	r0, [fp, #-12]
   13218:	str	r1, [sp, #64]	; 0x40
   1321c:	b	135d0 <main@@Base+0x1f94>
   13220:	movw	r0, #0
   13224:	str	r0, [fp, #-132]	; 0xffffff7c
   13228:	str	r0, [fp, #-128]	; 0xffffff80
   1322c:	str	r0, [fp, #-124]	; 0xffffff84
   13230:	ldr	r0, [fp, #-16]
   13234:	str	r0, [fp, #-120]	; 0xffffff88
   13238:	sub	r0, fp, #132	; 0x84
   1323c:	str	r0, [fp, #-116]	; 0xffffff8c
   13240:	mov	r0, #0
   13244:	str	r0, [sp, #132]	; 0x84
   13248:	str	r0, [sp, #128]	; 0x80
   1324c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13250:	str	r0, [fp, #-28]	; 0xffffffe4
   13254:	ldr	r0, [fp, #-20]	; 0xffffffec
   13258:	ldr	r1, [fp, #-16]
   1325c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13260:	add	r3, sp, #132	; 0x84
   13264:	add	ip, sp, #128	; 0x80
   13268:	str	r0, [sp, #60]	; 0x3c
   1326c:	mov	r0, r1
   13270:	mov	r1, r2
   13274:	mov	r2, r3
   13278:	mov	r3, ip
   1327c:	ldr	ip, [sp, #60]	; 0x3c
   13280:	blx	ip
   13284:	str	r0, [sp, #124]	; 0x7c
   13288:	sub	r0, fp, #28
   1328c:	ldr	r1, [sp, #124]	; 0x7c
   13290:	cmp	r1, #0
   13294:	str	r0, [sp, #56]	; 0x38
   13298:	beq	132b4 <main@@Base+0x1c78>
   1329c:	ldr	r0, [sp, #132]	; 0x84
   132a0:	ldr	r1, [fp, #-116]	; 0xffffff8c
   132a4:	str	r0, [r1, #4]
   132a8:	ldr	r0, [sp, #128]	; 0x80
   132ac:	ldr	r1, [fp, #-116]	; 0xffffff8c
   132b0:	str	r0, [r1, #8]
   132b4:	b	132b8 <main@@Base+0x1c7c>
   132b8:	ldr	r0, [fp, #-116]	; 0xffffff8c
   132bc:	movw	r1, #16
   132c0:	bl	14614 <mmk_verify_register_call@@Base>
   132c4:	bl	13b58 <mmk_mock_get_params@@Base>
   132c8:	str	r0, [sp, #120]	; 0x78
   132cc:	ldr	r0, [sp, #120]	; 0x78
   132d0:	movw	r1, #0
   132d4:	cmp	r0, r1
   132d8:	beq	135b8 <main@@Base+0x1f7c>
   132dc:	ldr	r0, [sp, #120]	; 0x78
   132e0:	str	r0, [sp, #116]	; 0x74
   132e4:	ldr	r0, [sp, #120]	; 0x78
   132e8:	ldr	r0, [r0]
   132ec:	str	r0, [sp, #112]	; 0x70
   132f0:	ldr	r0, [sp, #112]	; 0x70
   132f4:	ldr	r0, [r0, #8]
   132f8:	movw	r1, #0
   132fc:	cmp	r0, r1
   13300:	beq	13418 <main@@Base+0x1ddc>
   13304:	ldr	r0, [sp, #112]	; 0x70
   13308:	ldr	r0, [r0, #8]
   1330c:	str	r0, [sp, #112]	; 0x70
   13310:	ldr	r0, [sp, #112]	; 0x70
   13314:	ldr	r0, [r0]
   13318:	cmp	r0, #0
   1331c:	bne	13324 <main@@Base+0x1ce8>
   13320:	b	13414 <main@@Base+0x1dd8>
   13324:	ldr	r0, [sp, #112]	; 0x70
   13328:	ldr	r0, [r0]
   1332c:	and	r0, r0, #-2147483648	; 0x80000000
   13330:	cmp	r0, #0
   13334:	beq	133c8 <main@@Base+0x1d8c>
   13338:	sub	r0, fp, #16
   1333c:	mov	r1, r0
   13340:	str	r0, [sp, #52]	; 0x34
   13344:	mov	r0, r1
   13348:	ldr	r1, [sp, #52]	; 0x34
   1334c:	movw	r2, #4
   13350:	bl	147dc <mmk_memcmp@@Base>
   13354:	str	r0, [sp, #108]	; 0x6c
   13358:	ldr	r0, [sp, #108]	; 0x6c
   1335c:	cmp	r0, #0
   13360:	bne	1337c <main@@Base+0x1d40>
   13364:	ldr	r0, [sp, #112]	; 0x70
   13368:	ldr	r0, [r0]
   1336c:	and	r0, r0, #2
   13370:	cmp	r0, #0
   13374:	bne	1337c <main@@Base+0x1d40>
   13378:	b	135a8 <main@@Base+0x1f6c>
   1337c:	ldr	r0, [sp, #108]	; 0x6c
   13380:	cmp	r0, #0
   13384:	bge	133a0 <main@@Base+0x1d64>
   13388:	ldr	r0, [sp, #112]	; 0x70
   1338c:	ldr	r0, [r0]
   13390:	and	r0, r0, #4
   13394:	cmp	r0, #0
   13398:	bne	133a0 <main@@Base+0x1d64>
   1339c:	b	135a8 <main@@Base+0x1f6c>
   133a0:	ldr	r0, [sp, #108]	; 0x6c
   133a4:	cmp	r0, #0
   133a8:	ble	133c4 <main@@Base+0x1d88>
   133ac:	ldr	r0, [sp, #112]	; 0x70
   133b0:	ldr	r0, [r0]
   133b4:	and	r0, r0, #8
   133b8:	cmp	r0, #0
   133bc:	bne	133c4 <main@@Base+0x1d88>
   133c0:	b	135a8 <main@@Base+0x1f6c>
   133c4:	b	13410 <main@@Base+0x1dd4>
   133c8:	ldr	r0, [sp, #112]	; 0x70
   133cc:	ldr	r0, [r0]
   133d0:	cmp	r0, #1
   133d4:	bne	1340c <main@@Base+0x1dd0>
   133d8:	ldr	r0, [sp, #112]	; 0x70
   133dc:	bl	1390c <mmk_matcher_get_predicate@@Base>
   133e0:	str	r0, [sp, #104]	; 0x68
   133e4:	ldr	r0, [sp, #104]	; 0x68
   133e8:	ldr	lr, [fp, #-16]
   133ec:	str	r0, [sp, #48]	; 0x30
   133f0:	mov	r0, lr
   133f4:	ldr	lr, [sp, #48]	; 0x30
   133f8:	blx	lr
   133fc:	cmp	r0, #0
   13400:	bne	13408 <main@@Base+0x1dcc>
   13404:	b	135a8 <main@@Base+0x1f6c>
   13408:	b	1340c <main@@Base+0x1dd0>
   1340c:	b	13410 <main@@Base+0x1dd4>
   13410:	b	13414 <main@@Base+0x1dd8>
   13414:	b	13440 <main@@Base+0x1e04>
   13418:	sub	r0, fp, #16
   1341c:	ldr	r1, [sp, #116]	; 0x74
   13420:	add	r1, r1, #28
   13424:	add	r1, r1, #12
   13428:	movw	r2, #4
   1342c:	bl	147dc <mmk_memcmp@@Base>
   13430:	cmp	r0, #0
   13434:	beq	1343c <main@@Base+0x1e00>
   13438:	b	135a8 <main@@Base+0x1f6c>
   1343c:	b	13440 <main@@Base+0x1e04>
   13440:	ldr	r0, [sp, #116]	; 0x74
   13444:	ldr	r0, [r0, #12]
   13448:	cmp	r0, #0
   1344c:	beq	13468 <main@@Base+0x1e2c>
   13450:	ldr	r0, [sp, #116]	; 0x74
   13454:	ldr	r0, [r0, #12]
   13458:	str	r0, [sp, #44]	; 0x2c
   1345c:	bl	114ec <__errno_location@plt>
   13460:	ldr	lr, [sp, #44]	; 0x2c
   13464:	str	lr, [r0]
   13468:	ldr	r0, [sp, #116]	; 0x74
   1346c:	ldr	r0, [r0, #20]
   13470:	movw	r1, #0
   13474:	cmp	r0, r1
   13478:	beq	134e0 <main@@Base+0x1ea4>
   1347c:	ldr	r0, [sp, #116]	; 0x74
   13480:	ldr	r0, [r0, #16]
   13484:	movw	r1, #0
   13488:	cmp	r0, r1
   1348c:	bne	134e0 <main@@Base+0x1ea4>
   13490:	b	13494 <main@@Base+0x1e58>
   13494:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13498:	str	r0, [fp, #-28]	; 0xffffffe4
   1349c:	ldr	r0, [sp, #116]	; 0x74
   134a0:	ldr	r0, [r0, #20]
   134a4:	ldr	r1, [fp, #-16]
   134a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   134ac:	str	r0, [sp, #40]	; 0x28
   134b0:	mov	r0, r1
   134b4:	mov	r1, r2
   134b8:	ldr	r2, [sp, #40]	; 0x28
   134bc:	blx	r2
   134c0:	str	r0, [sp, #100]	; 0x64
   134c4:	sub	r0, fp, #28
   134c8:	sub	r1, fp, #24
   134cc:	ldr	r2, [sp, #100]	; 0x64
   134d0:	str	r2, [fp, #-12]
   134d4:	str	r0, [sp, #36]	; 0x24
   134d8:	str	r1, [sp, #32]
   134dc:	b	135d0 <main@@Base+0x1f94>
   134e0:	ldr	r0, [sp, #116]	; 0x74
   134e4:	ldr	r0, [r0, #20]
   134e8:	movw	r1, #0
   134ec:	cmp	r0, r1
   134f0:	beq	1355c <main@@Base+0x1f20>
   134f4:	ldr	r0, [sp, #116]	; 0x74
   134f8:	ldr	r0, [r0, #16]
   134fc:	movw	r1, #0
   13500:	cmp	r0, r1
   13504:	beq	1355c <main@@Base+0x1f20>
   13508:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1350c:	str	r0, [fp, #-28]	; 0xffffffe4
   13510:	ldr	r0, [sp, #116]	; 0x74
   13514:	ldr	r0, [r0, #20]
   13518:	ldr	r1, [fp, #-16]
   1351c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13520:	str	r0, [sp, #28]
   13524:	mov	r0, r1
   13528:	mov	r1, r2
   1352c:	ldr	r2, [sp, #28]
   13530:	blx	r2
   13534:	sub	r1, fp, #28
   13538:	sub	r2, fp, #24
   1353c:	ldr	lr, [sp, #116]	; 0x74
   13540:	ldr	lr, [lr, #16]
   13544:	ldr	lr, [lr]
   13548:	str	lr, [fp, #-12]
   1354c:	str	r0, [sp, #24]
   13550:	str	r1, [sp, #20]
   13554:	str	r2, [sp, #16]
   13558:	b	135d0 <main@@Base+0x1f94>
   1355c:	ldr	r0, [sp, #116]	; 0x74
   13560:	ldr	r0, [r0, #16]
   13564:	movw	r1, #0
   13568:	cmp	r0, r1
   1356c:	beq	1358c <main@@Base+0x1f50>
   13570:	sub	r0, fp, #24
   13574:	ldr	r1, [sp, #116]	; 0x74
   13578:	ldr	r1, [r1, #16]
   1357c:	ldr	r1, [r1]
   13580:	str	r1, [fp, #-12]
   13584:	str	r0, [sp, #12]
   13588:	b	135d0 <main@@Base+0x1f94>
   1358c:	ldr	r0, [pc, #88]	; 135ec <main@@Base+0x1fb0>
   13590:	add	r0, pc, r0
   13594:	sub	r1, fp, #24
   13598:	ldr	r0, [r0]
   1359c:	str	r0, [fp, #-12]
   135a0:	str	r1, [sp, #8]
   135a4:	b	135d0 <main@@Base+0x1f94>
   135a8:	ldr	r0, [sp, #120]	; 0x78
   135ac:	ldr	r0, [r0, #4]
   135b0:	str	r0, [sp, #120]	; 0x78
   135b4:	b	132cc <main@@Base+0x1c90>
   135b8:	ldr	r0, [pc, #40]	; 135e8 <main@@Base+0x1fac>
   135bc:	add	r0, pc, r0
   135c0:	sub	r1, fp, #24
   135c4:	ldr	r0, [r0]
   135c8:	str	r0, [fp, #-12]
   135cc:	str	r1, [sp, #4]
   135d0:	ldr	r0, [fp, #-12]
   135d4:	sub	sp, fp, #8
   135d8:	pop	{r4, r5, fp, lr}
   135dc:	add	sp, sp, #12
   135e0:	bx	lr
   135e4:	andeq	r0, r0, r8, lsr r9
   135e8:	andeq	r2, r1, ip, lsl fp
   135ec:	andeq	r2, r1, r8, asr #22
   135f0:	ldrdeq	r2, [r1], -r0
   135f4:	push	{fp, lr}
   135f8:	mov	fp, sp
   135fc:	sub	sp, sp, #40	; 0x28
   13600:	str	r1, [fp, #-8]
   13604:	str	r0, [fp, #-12]
   13608:	str	r2, [fp, #-16]
   1360c:	str	r3, [sp, #20]
   13610:	ldr	r0, [fp, #-12]
   13614:	cmp	r0, #0
   13618:	bgt	13628 <main@@Base+0x1fec>
   1361c:	movw	r0, #0
   13620:	str	r0, [fp, #-4]
   13624:	b	136e8 <main@@Base+0x20ac>
   13628:	ldr	r0, [fp, #-12]
   1362c:	lsl	r0, r0, #2
   13630:	bl	14a0c <mmk_malloc@@Base>
   13634:	str	r0, [sp, #16]
   13638:	movw	r0, #0
   1363c:	str	r0, [sp, #12]
   13640:	ldr	r0, [sp, #12]
   13644:	ldr	r1, [fp, #-12]
   13648:	cmp	r0, r1
   1364c:	bge	136c8 <main@@Base+0x208c>
   13650:	b	13654 <main@@Base+0x2018>
   13654:	mov	r0, #8
   13658:	bl	14a0c <mmk_malloc@@Base>
   1365c:	ldr	lr, [sp, #16]
   13660:	ldr	r1, [sp, #12]
   13664:	str	r0, [lr, r1, lsl #2]
   13668:	ldr	r0, [sp, #16]
   1366c:	ldr	r1, [sp, #12]
   13670:	ldr	r0, [r0, r1, lsl #2]
   13674:	mov	r1, #4
   13678:	str	r1, [r0]
   1367c:	ldr	r0, [fp, #-8]
   13680:	add	r1, r0, #4
   13684:	str	r1, [fp, #-8]
   13688:	ldr	r0, [r0]
   1368c:	str	r0, [sp, #8]
   13690:	ldr	r0, [sp, #16]
   13694:	ldr	r1, [sp, #12]
   13698:	add	r0, r0, r1, lsl #2
   1369c:	ldr	r0, [r0]
   136a0:	add	r0, r0, #4
   136a4:	add	r1, sp, #8
   136a8:	movw	r2, #4
   136ac:	bl	14824 <mmk_memcpy@@Base>
   136b0:	str	r0, [sp, #4]
   136b4:	b	136b8 <main@@Base+0x207c>
   136b8:	ldr	r0, [sp, #12]
   136bc:	add	r0, r0, #1
   136c0:	str	r0, [sp, #12]
   136c4:	b	13640 <main@@Base+0x2004>
   136c8:	ldr	r0, [fp, #-12]
   136cc:	ldr	r1, [fp, #-16]
   136d0:	str	r0, [r1]
   136d4:	ldr	r0, [sp, #16]
   136d8:	ldr	r1, [sp, #20]
   136dc:	str	r0, [r1]
   136e0:	movw	r0, #1
   136e4:	str	r0, [fp, #-4]
   136e8:	ldr	r0, [fp, #-4]
   136ec:	mov	sp, fp
   136f0:	pop	{fp, pc}

000136f4 <mmk_init@@Base>:
   136f4:	push	{r4, sl, fp, lr}
   136f8:	add	fp, sp, #8
   136fc:	sub	sp, sp, #8
   13700:	ldr	r4, [pc, #108]	; 13774 <mmk_init@@Base+0x80>
   13704:	add	r4, pc, r4
   13708:	ldrb	r0, [r4]
   1370c:	cmp	r0, #0
   13710:	bne	13738 <mmk_init@@Base+0x44>
   13714:	bl	13b70 <plt_init_ctx@@Base>
   13718:	ldr	r1, [pc, #88]	; 13778 <mmk_init@@Base+0x84>
   1371c:	cmn	r0, #1
   13720:	add	r1, pc, r1
   13724:	str	r0, [r1]
   13728:	beq	13740 <mmk_init@@Base+0x4c>
   1372c:	bl	14a48 <mmk_init_vital_functions@@Base>
   13730:	mov	r0, #1
   13734:	strb	r0, [r4]
   13738:	sub	sp, fp, #8
   1373c:	pop	{r4, sl, fp, pc}
   13740:	ldr	r0, [pc, #52]	; 1377c <mmk_init@@Base+0x88>
   13744:	mov	r3, #45	; 0x2d
   13748:	ldr	r0, [pc, r0]
   1374c:	ldr	r0, [r0]
   13750:	ldr	r1, [pc, #40]	; 13780 <mmk_init@@Base+0x8c>
   13754:	add	r1, pc, r1
   13758:	str	r1, [sp]
   1375c:	ldr	r1, [pc, #32]	; 13784 <mmk_init@@Base+0x90>
   13760:	ldr	r2, [pc, #32]	; 13788 <mmk_init@@Base+0x94>
   13764:	add	r1, pc, r1
   13768:	add	r2, pc, r2
   1376c:	bl	114e0 <fprintf@plt>
   13770:	bl	11528 <abort@plt>
   13774:	ldrdeq	r2, [r1], -r8
   13778:	andeq	r2, r1, r0, asr #19
   1377c:	andeq	r2, r1, ip, asr #18
   13780:	andeq	r1, r0, r9, asr #16
   13784:	muleq	r0, r6, r5
   13788:	andeq	r1, r0, r6, ror #15

0001378c <mmk_plt_ctx@@Base>:
   1378c:	ldr	r0, [pc, #84]	; 137e8 <mmk_plt_ctx@@Base+0x5c>
   13790:	add	r0, pc, r0
   13794:	ldrb	r0, [r0]
   13798:	cmp	r0, #0
   1379c:	ldrne	r0, [pc, #72]	; 137ec <mmk_plt_ctx@@Base+0x60>
   137a0:	ldrne	r0, [pc, r0]
   137a4:	bxne	lr
   137a8:	push	{fp, lr}
   137ac:	mov	fp, sp
   137b0:	sub	sp, sp, #8
   137b4:	ldr	r0, [pc, #52]	; 137f0 <mmk_plt_ctx@@Base+0x64>
   137b8:	mov	r3, #54	; 0x36
   137bc:	ldr	r0, [pc, r0]
   137c0:	ldr	r0, [r0]
   137c4:	ldr	r1, [pc, #40]	; 137f4 <mmk_plt_ctx@@Base+0x68>
   137c8:	add	r1, pc, r1
   137cc:	str	r1, [sp]
   137d0:	ldr	r1, [pc, #32]	; 137f8 <mmk_plt_ctx@@Base+0x6c>
   137d4:	ldr	r2, [pc, #32]	; 137fc <mmk_plt_ctx@@Base+0x70>
   137d8:	add	r1, pc, r1
   137dc:	add	r2, pc, r2
   137e0:	bl	114e0 <fprintf@plt>
   137e4:	bl	11528 <abort@plt>
   137e8:	andeq	r2, r1, ip, asr #18
   137ec:	andeq	r2, r1, r0, asr #18
   137f0:	ldrdeq	r2, [r1], -r8
   137f4:	andeq	r1, r0, ip, ror #15
   137f8:	andeq	r1, r0, r2, lsr #10
   137fc:	andeq	r1, r0, r2, ror r7

00013800 <mmk_reset@@Base>:
   13800:	cmp	r0, #0
   13804:	bxeq	lr
   13808:	push	{fp, lr}
   1380c:	mov	fp, sp
   13810:	bl	143fc <mmk_ask_ctx@@Base>
   13814:	bl	14160 <mmk_stub_context@@Base>
   13818:	pop	{fp, lr}
   1381c:	b	13a90 <mmk_mock_destroy_internal@@Base>

00013820 <mmk_matcher_init@@Base>:
   13820:	push	{r4, r5, fp, lr}
   13824:	add	fp, sp, #8
   13828:	mov	r4, r0
   1382c:	mov	r0, #12
   13830:	bl	14a0c <mmk_malloc@@Base>
   13834:	mov	r5, r0
   13838:	mov	r0, #0
   1383c:	str	r4, [r5]
   13840:	str	r0, [r5, #4]
   13844:	str	r0, [r5, #8]
   13848:	ldr	r0, [pc, #12]	; 1385c <mmk_matcher_init@@Base+0x3c>
   1384c:	add	r0, pc, r0
   13850:	bl	11510 <__tls_get_addr@plt>
   13854:	str	r5, [r0]
   13858:	pop	{r4, r5, fp, pc}
   1385c:	andeq	r2, r1, r0, lsl r8

00013860 <mmk_matcher_term@@Base>:
   13860:	push	{fp, lr}
   13864:	mov	fp, sp
   13868:	ldr	r0, [pc, #16]	; 13880 <mmk_matcher_term@@Base+0x20>
   1386c:	add	r0, pc, r0
   13870:	bl	11510 <__tls_get_addr@plt>
   13874:	mov	r1, #0
   13878:	str	r1, [r0]
   1387c:	pop	{fp, pc}
   13880:	strdeq	r2, [r1], -r0

00013884 <mmk_matcher_ctx@@Base>:
   13884:	push	{fp, lr}
   13888:	mov	fp, sp
   1388c:	ldr	r0, [pc, #12]	; 138a0 <mmk_matcher_ctx@@Base+0x1c>
   13890:	add	r0, pc, r0
   13894:	bl	11510 <__tls_get_addr@plt>
   13898:	ldr	r0, [r0]
   1389c:	pop	{fp, pc}
   138a0:	andeq	r2, r1, ip, asr #15

000138a4 <mmk_matcher_add@@Base>:
   138a4:	push	{r4, r5, r6, sl, fp, lr}
   138a8:	add	fp, sp, #16
   138ac:	mov	r6, r0
   138b0:	mov	r0, #12
   138b4:	mov	r4, r1
   138b8:	bl	14a0c <mmk_malloc@@Base>
   138bc:	mov	r5, r0
   138c0:	ldr	r0, [pc, #64]	; 13908 <mmk_matcher_add@@Base+0x64>
   138c4:	add	r0, pc, r0
   138c8:	bl	11510 <__tls_get_addr@plt>
   138cc:	ldr	r0, [r0]
   138d0:	mov	r1, #0
   138d4:	str	r6, [r5]
   138d8:	str	r4, [r5, #4]
   138dc:	str	r1, [r5, #8]
   138e0:	mov	r1, r0
   138e4:	ldr	r0, [r0, #8]
   138e8:	cmp	r0, #0
   138ec:	beq	138fc <mmk_matcher_add@@Base+0x58>
   138f0:	ldr	r2, [r0, #4]
   138f4:	cmp	r2, r4
   138f8:	bcc	138e0 <mmk_matcher_add@@Base+0x3c>
   138fc:	str	r0, [r5, #8]
   13900:	str	r5, [r1, #8]
   13904:	pop	{r4, r5, r6, sl, fp, pc}
   13908:	muleq	r1, r8, r7

0001390c <mmk_matcher_get_predicate@@Base>:
   1390c:	add	r0, r0, #12
   13910:	bx	lr

00013914 <mmk_mock_create_internal@@Base>:
   13914:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13918:	add	fp, sp, #24
   1391c:	sub	sp, sp, #8
   13920:	mov	r8, r1
   13924:	mov	r9, r0
   13928:	bl	136f4 <mmk_init@@Base>
   1392c:	mov	r0, #20
   13930:	bl	14a0c <mmk_malloc@@Base>
   13934:	cmp	r0, #0
   13938:	beq	13a20 <mmk_mock_create_internal@@Base+0x10c>
   1393c:	vmov.i32	q8, #0	; 0x00000000
   13940:	mov	r4, r0
   13944:	mov	r1, #0
   13948:	vst1.32	{d16-d17}, [r0]!
   1394c:	str	r1, [r0]
   13950:	mov	r0, r9
   13954:	mov	r1, #64	; 0x40
   13958:	bl	14908 <mmk_strchr@@Base>
   1395c:	mov	r5, r0
   13960:	cmp	r0, #0
   13964:	beq	13970 <mmk_mock_create_internal@@Base+0x5c>
   13968:	sub	r6, r5, r9
   1396c:	b	1397c <mmk_mock_create_internal@@Base+0x68>
   13970:	mov	r0, r9
   13974:	bl	149a0 <mmk_strlen@@Base>
   13978:	mov	r6, r0
   1397c:	add	r0, r6, #1
   13980:	bl	14a0c <mmk_malloc@@Base>
   13984:	mov	r1, r9
   13988:	mov	r2, r6
   1398c:	mov	r7, r0
   13990:	bl	14964 <mmk_strncpy@@Base>
   13994:	mov	r0, #0
   13998:	cmp	r5, #0
   1399c:	strb	r0, [r7, r6]
   139a0:	beq	139c8 <mmk_mock_create_internal@@Base+0xb4>
   139a4:	ldr	r1, [pc, #200]	; 13a74 <mmk_mock_create_internal@@Base+0x160>
   139a8:	add	r0, r5, #1
   139ac:	mov	r2, #4
   139b0:	add	r1, pc, r1
   139b4:	bl	148a4 <mmk_strneq@@Base>
   139b8:	mov	r5, r0
   139bc:	cmp	r0, #0
   139c0:	movwne	r5, #1
   139c4:	b	139cc <mmk_mock_create_internal@@Base+0xb8>
   139c8:	mov	r5, #1
   139cc:	mov	r0, r9
   139d0:	mov	r1, r8
   139d4:	mov	r2, r4
   139d8:	bl	14328 <mmk_stub_create@@Base>
   139dc:	cmp	r0, #0
   139e0:	str	r0, [r4, #4]
   139e4:	beq	13a54 <mmk_mock_create_internal@@Base+0x140>
   139e8:	cmp	r5, #0
   139ec:	bne	13a08 <mmk_mock_create_internal@@Base+0xf4>
   139f0:	mov	r0, r7
   139f4:	mov	r1, r8
   139f8:	mov	r2, r4
   139fc:	bl	14328 <mmk_stub_create@@Base>
   13a00:	ldr	r1, [r4, #4]
   13a04:	str	r0, [r1, #36]	; 0x24
   13a08:	mov	r0, r7
   13a0c:	bl	14a34 <mmk_free@@Base>
   13a10:	ldr	r0, [r4, #4]
   13a14:	ldr	r0, [r0, #32]
   13a18:	sub	sp, fp, #24
   13a1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a20:	ldr	r0, [pc, #80]	; 13a78 <mmk_mock_create_internal@@Base+0x164>
   13a24:	mov	r3, #36	; 0x24
   13a28:	ldr	r0, [pc, r0]
   13a2c:	ldr	r0, [r0]
   13a30:	ldr	r1, [pc, #68]	; 13a7c <mmk_mock_create_internal@@Base+0x168>
   13a34:	add	r1, pc, r1
   13a38:	str	r1, [sp]
   13a3c:	ldr	r1, [pc, #60]	; 13a80 <mmk_mock_create_internal@@Base+0x16c>
   13a40:	ldr	r2, [pc, #60]	; 13a84 <mmk_mock_create_internal@@Base+0x170>
   13a44:	add	r1, pc, r1
   13a48:	add	r2, pc, r2
   13a4c:	bl	114e0 <fprintf@plt>
   13a50:	bl	11528 <abort@plt>
   13a54:	ldr	r0, [pc, #44]	; 13a88 <mmk_mock_create_internal@@Base+0x174>
   13a58:	mov	r2, r9
   13a5c:	ldr	r0, [pc, r0]
   13a60:	ldr	r0, [r0]
   13a64:	ldr	r1, [pc, #32]	; 13a8c <mmk_mock_create_internal@@Base+0x178>
   13a68:	add	r1, pc, r1
   13a6c:	bl	114e0 <fprintf@plt>
   13a70:	bl	11528 <abort@plt>
   13a74:	andeq	r1, r0, r8, ror #12
   13a78:	andeq	r2, r1, ip, ror #12
   13a7c:	andeq	r1, r0, r0, ror #11
   13a80:			; <UNDEFINED> instruction: 0x000012b6
   13a84:	andeq	r1, r0, sp, ror r5
   13a88:	andeq	r2, r1, r8, lsr r6
   13a8c:			; <UNDEFINED> instruction: 0x000015b5

00013a90 <mmk_mock_destroy_internal@@Base>:
   13a90:	push	{r4, r5, r6, r7, fp, lr}
   13a94:	add	fp, sp, #16
   13a98:	mov	r4, r0
   13a9c:	ldr	r0, [r0, #4]
   13aa0:	cmp	r0, #0
   13aa4:	beq	13abc <mmk_mock_destroy_internal@@Base+0x2c>
   13aa8:	ldr	r5, [r0, #36]	; 0x24
   13aac:	bl	143c0 <mmk_stub_destroy@@Base>
   13ab0:	cmp	r5, #0
   13ab4:	mov	r0, r5
   13ab8:	bne	13aa8 <mmk_mock_destroy_internal@@Base+0x18>
   13abc:	ldr	r0, [r4, #8]
   13ac0:	bl	14a34 <mmk_free@@Base>
   13ac4:	ldr	r5, [r4]
   13ac8:	cmp	r5, #0
   13acc:	beq	13b04 <mmk_mock_destroy_internal@@Base+0x74>
   13ad0:	ldm	r5, {r0, r6}
   13ad4:	cmp	r0, #0
   13ad8:	beq	13af0 <mmk_mock_destroy_internal@@Base+0x60>
   13adc:	ldr	r7, [r0, #8]
   13ae0:	bl	14a34 <mmk_free@@Base>
   13ae4:	cmp	r7, #0
   13ae8:	mov	r0, r7
   13aec:	bne	13adc <mmk_mock_destroy_internal@@Base+0x4c>
   13af0:	mov	r0, r5
   13af4:	bl	14a34 <mmk_free@@Base>
   13af8:	cmp	r6, #0
   13afc:	mov	r5, r6
   13b00:	bne	13ad0 <mmk_mock_destroy_internal@@Base+0x40>
   13b04:	mov	r0, r4
   13b08:	pop	{r4, r5, r6, r7, fp, lr}
   13b0c:	b	14a34 <mmk_free@@Base>

00013b10 <mmk_mock_params_begin@@Base>:
   13b10:	ldr	r1, [r0, #8]
   13b14:	cmp	r1, #0
   13b18:	moveq	r0, #0
   13b1c:	bxeq	lr
   13b20:	ldr	r0, [r0, #12]
   13b24:	cmp	r0, #0
   13b28:	addne	r0, r1, #4
   13b2c:	bx	lr

00013b30 <mmk_mock_params_next@@Base>:
   13b30:	ldr	r2, [r1, #-4]
   13b34:	add	r1, r1, r2
   13b38:	ldr	r2, [r0, #8]
   13b3c:	ldr	r0, [r0, #12]
   13b40:	add	r1, r1, #4
   13b44:	add	r0, r2, r0
   13b48:	cmp	r1, r0
   13b4c:	movcs	r1, #0
   13b50:	mov	r0, r1
   13b54:	bx	lr

00013b58 <mmk_mock_get_params@@Base>:
   13b58:	push	{fp, lr}
   13b5c:	mov	fp, sp
   13b60:	bl	14308 <mmk_ctx@@Base>
   13b64:	bl	14160 <mmk_stub_context@@Base>
   13b68:	ldr	r0, [r0]
   13b6c:	pop	{fp, pc}

00013b70 <plt_init_ctx@@Base>:
   13b70:	ldr	r0, [pc, #32]	; 13b98 <plt_init_ctx@@Base+0x28>
   13b74:	ldr	r0, [pc, r0]
   13b78:	cmn	r0, #1
   13b7c:	bxne	lr
   13b80:	ldr	r0, [pc, #20]	; 13b9c <plt_init_ctx@@Base+0x2c>
   13b84:	ldr	r0, [pc, r0]
   13b88:	ldr	r1, [pc, #16]	; 13ba0 <plt_init_ctx@@Base+0x30>
   13b8c:	add	r1, pc, r1
   13b90:	str	r0, [r1]
   13b94:	bx	lr
   13b98:	andeq	r2, r1, r4, asr r5
   13b9c:	andeq	r2, r1, r4, lsr r5
   13ba0:	andeq	r2, r1, ip, lsr r5

00013ba4 <plt_get_lib@@Base>:
   13ba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ba8:	add	fp, sp, #28
   13bac:	sub	sp, sp, #20
   13bb0:	ldr	sl, [pc, #604]	; 13e14 <plt_get_lib@@Base+0x270>
   13bb4:	cmp	r1, #0
   13bb8:	mov	r7, r0
   13bbc:	mov	r2, #4
   13bc0:	add	sl, pc, sl
   13bc4:	movne	sl, r1
   13bc8:	ldr	r1, [pc, #584]	; 13e18 <plt_get_lib@@Base+0x274>
   13bcc:	mov	r0, sl
   13bd0:	add	r1, pc, r1
   13bd4:	bl	1151c <strncmp@plt>
   13bd8:	cmp	r0, #0
   13bdc:	beq	13c44 <plt_get_lib@@Base+0xa0>
   13be0:	ldr	r1, [pc, #572]	; 13e24 <plt_get_lib@@Base+0x280>
   13be4:	mov	r0, sl
   13be8:	mov	r2, #5
   13bec:	add	r1, pc, r1
   13bf0:	bl	1151c <strncmp@plt>
   13bf4:	cmp	r0, #0
   13bf8:	beq	13c4c <plt_get_lib@@Base+0xa8>
   13bfc:	ldr	r1, [pc, #548]	; 13e28 <plt_get_lib@@Base+0x284>
   13c00:	mov	r0, sl
   13c04:	mov	r2, #4
   13c08:	add	r1, pc, r1
   13c0c:	bl	1151c <strncmp@plt>
   13c10:	cmp	r0, #0
   13c14:	beq	13c54 <plt_get_lib@@Base+0xb0>
   13c18:	ldr	r1, [pc, #524]	; 13e2c <plt_get_lib@@Base+0x288>
   13c1c:	mov	r0, sl
   13c20:	add	r1, pc, r1
   13c24:	bl	11438 <strcmp@plt>
   13c28:	cmp	r0, #0
   13c2c:	bne	13db4 <plt_get_lib@@Base+0x210>
   13c30:	ldr	sl, [pc, #504]	; 13e30 <plt_get_lib@@Base+0x28c>
   13c34:	mov	r9, #0
   13c38:	add	sl, pc, sl
   13c3c:	mov	r8, sl
   13c40:	b	13c68 <plt_get_lib@@Base+0xc4>
   13c44:	mov	r9, #1
   13c48:	b	13c58 <plt_get_lib@@Base+0xb4>
   13c4c:	mov	r9, #2
   13c50:	b	13c58 <plt_get_lib@@Base+0xb4>
   13c54:	mov	r9, #3
   13c58:	mov	r0, sl
   13c5c:	mov	r1, #58	; 0x3a
   13c60:	bl	114d4 <strchr@plt>
   13c64:	add	r8, r0, #1
   13c68:	mov	r0, r8
   13c6c:	bl	114bc <strlen@plt>
   13c70:	ldr	r1, [pc, #420]	; 13e1c <plt_get_lib@@Base+0x278>
   13c74:	mov	r4, r0
   13c78:	mov	r0, r8
   13c7c:	add	r1, pc, r1
   13c80:	bl	11438 <strcmp@plt>
   13c84:	ldr	r7, [r7, #4]
   13c88:	mov	r5, r0
   13c8c:	mov	r0, #0
   13c90:	cmp	r7, #0
   13c94:	beq	13da0 <plt_get_lib@@Base+0x1fc>
   13c98:	add	r0, r4, #8
   13c9c:	orr	r1, r9, #2
   13ca0:	str	r0, [fp, #-40]	; 0xffffffd8
   13ca4:	add	r0, r0, #7
   13ca8:	str	r1, [fp, #-36]	; 0xffffffdc
   13cac:	bic	r0, r0, #7
   13cb0:	str	r0, [fp, #-44]	; 0xffffffd4
   13cb4:	cmp	r9, #1
   13cb8:	bne	13d08 <plt_get_lib@@Base+0x164>
   13cbc:	cmp	r5, #0
   13cc0:	beq	13d4c <plt_get_lib@@Base+0x1a8>
   13cc4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13cc8:	mov	r6, sp
   13ccc:	sub	r4, sp, r0
   13cd0:	mov	sp, r4
   13cd4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   13cd8:	ldr	r2, [pc, #360]	; 13e48 <plt_get_lib@@Base+0x2a4>
   13cdc:	mov	r0, r4
   13ce0:	mov	r3, r8
   13ce4:	add	r2, pc, r2
   13ce8:	bl	114f8 <snprintf@plt>
   13cec:	ldr	r0, [r7, #4]
   13cf0:	mov	r1, r4
   13cf4:	bl	1142c <strstr@plt>
   13cf8:	mov	sp, r6
   13cfc:	cmp	r0, #0
   13d00:	beq	13d90 <plt_get_lib@@Base+0x1ec>
   13d04:	b	13da8 <plt_get_lib@@Base+0x204>
   13d08:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13d0c:	cmp	r0, #2
   13d10:	bne	13d2c <plt_get_lib@@Base+0x188>
   13d14:	ldr	r1, [r7, #4]
   13d18:	mov	r0, sl
   13d1c:	bl	11438 <strcmp@plt>
   13d20:	cmp	r0, #0
   13d24:	bne	13d90 <plt_get_lib@@Base+0x1ec>
   13d28:	b	13da8 <plt_get_lib@@Base+0x204>
   13d2c:	cmp	r9, #3
   13d30:	bne	13d90 <plt_get_lib@@Base+0x1ec>
   13d34:	mov	r0, r7
   13d38:	mov	r1, r8
   13d3c:	bl	13e4c <plt_get_lib@@Base+0x2a8>
   13d40:	cmp	r0, #0
   13d44:	beq	13d90 <plt_get_lib@@Base+0x1ec>
   13d48:	b	13da8 <plt_get_lib@@Base+0x204>
   13d4c:	mov	r4, r5
   13d50:	mov	r5, sl
   13d54:	ldr	sl, [r7, #4]
   13d58:	ldr	r1, [pc, #192]	; 13e20 <plt_get_lib@@Base+0x27c>
   13d5c:	mov	r0, sl
   13d60:	add	r1, pc, r1
   13d64:	bl	1142c <strstr@plt>
   13d68:	cmp	r0, #0
   13d6c:	bne	13da8 <plt_get_lib@@Base+0x204>
   13d70:	ldr	r1, [pc, #204]	; 13e44 <plt_get_lib@@Base+0x2a0>
   13d74:	mov	r0, sl
   13d78:	add	r1, pc, r1
   13d7c:	bl	1142c <strstr@plt>
   13d80:	mov	sl, r5
   13d84:	cmp	r0, #0
   13d88:	mov	r5, r4
   13d8c:	bne	13da8 <plt_get_lib@@Base+0x204>
   13d90:	ldr	r7, [r7, #12]
   13d94:	cmp	r7, #0
   13d98:	bne	13cb4 <plt_get_lib@@Base+0x110>
   13d9c:	mov	r0, #0
   13da0:	sub	sp, fp, #28
   13da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13da8:	mov	r0, r7
   13dac:	sub	sp, fp, #28
   13db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13db4:	mov	r0, sl
   13db8:	mov	r1, #58	; 0x3a
   13dbc:	mov	r4, sl
   13dc0:	bl	114d4 <strchr@plt>
   13dc4:	cmp	r0, #0
   13dc8:	bne	13dec <plt_get_lib@@Base+0x248>
   13dcc:	ldr	r0, [pc, #104]	; 13e3c <plt_get_lib@@Base+0x298>
   13dd0:	mov	r2, r4
   13dd4:	ldr	r0, [pc, r0]
   13dd8:	ldr	r0, [r0]
   13ddc:	ldr	r1, [pc, #92]	; 13e40 <plt_get_lib@@Base+0x29c>
   13de0:	add	r1, pc, r1
   13de4:	bl	114e0 <fprintf@plt>
   13de8:	bl	11528 <abort@plt>
   13dec:	rsb	r1, r4, #1
   13df0:	mov	r3, r4
   13df4:	add	r2, r1, r0
   13df8:	ldr	r0, [pc, #52]	; 13e34 <plt_get_lib@@Base+0x290>
   13dfc:	ldr	r0, [pc, r0]
   13e00:	ldr	r0, [r0]
   13e04:	ldr	r1, [pc, #44]	; 13e38 <plt_get_lib@@Base+0x294>
   13e08:	add	r1, pc, r1
   13e0c:	bl	114e0 <fprintf@plt>
   13e10:	bl	11528 <abort@plt>
   13e14:	andeq	r1, r0, r8, asr r4
   13e18:	andeq	r1, r0, r0, lsl #9
   13e1c:	muleq	r0, r8, r4
   13e20:	andeq	r1, r0, r5, asr #6
   13e24:	andeq	r1, r0, r9, ror #8
   13e28:	andeq	r1, r0, r3, asr r4
   13e2c:	strdeq	r1, [r0], -r8
   13e30:	andeq	r1, r0, ip, ror #8
   13e34:	muleq	r1, r8, r2
   13e38:	andeq	r1, r0, r8, asr r2
   13e3c:	andeq	r2, r1, r0, asr #5
   13e40:	andeq	r1, r0, r2, lsr #5
   13e44:	andeq	r1, r0, r6, lsr r3
   13e48:	ldrdeq	r1, [r0], -r3
   13e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e50:	add	fp, sp, #28
   13e54:	sub	sp, sp, #12
   13e58:	str	r1, [sp, #8]
   13e5c:	ldr	r1, [r0, #8]
   13e60:	ldr	ip, [r0]
   13e64:	mov	r0, #0
   13e68:	ldr	r4, [r1]
   13e6c:	cmp	r4, #0
   13e70:	beq	13ea0 <plt_get_lib@@Base+0x2fc>
   13e74:	add	r2, r1, #4
   13e78:	mov	r3, r4
   13e7c:	cmp	r3, #6
   13e80:	beq	13ebc <plt_get_lib@@Base+0x318>
   13e84:	ldr	r3, [r2, #4]
   13e88:	add	r7, r2, #8
   13e8c:	mov	r2, r7
   13e90:	cmp	r3, #0
   13e94:	bne	13e7c <plt_get_lib@@Base+0x2d8>
   13e98:	mov	lr, #0
   13e9c:	b	13ec8 <plt_get_lib@@Base+0x324>
   13ea0:	mov	r6, #0
   13ea4:	mov	r2, #0
   13ea8:	mov	lr, #0
   13eac:	mov	r8, #0
   13eb0:	mov	r3, #0
   13eb4:	mov	r5, #0
   13eb8:	b	13fc8 <plt_get_lib@@Base+0x424>
   13ebc:	ldr	lr, [r2]
   13ec0:	cmp	lr, ip
   13ec4:	addcc	lr, ip, lr
   13ec8:	add	r2, r1, #4
   13ecc:	mov	r3, r4
   13ed0:	cmp	r3, #5
   13ed4:	beq	13ef4 <plt_get_lib@@Base+0x350>
   13ed8:	ldr	r3, [r2, #4]
   13edc:	add	r7, r2, #8
   13ee0:	mov	r2, r7
   13ee4:	cmp	r3, #0
   13ee8:	bne	13ed0 <plt_get_lib@@Base+0x32c>
   13eec:	mov	r8, #0
   13ef0:	b	13f00 <plt_get_lib@@Base+0x35c>
   13ef4:	ldr	r8, [r2]
   13ef8:	cmp	r8, ip
   13efc:	addcc	r8, ip, r8
   13f00:	add	r2, r1, #4
   13f04:	mov	r3, r4
   13f08:	cmp	r3, #20
   13f0c:	beq	13f2c <plt_get_lib@@Base+0x388>
   13f10:	ldr	r3, [r2, #4]
   13f14:	add	r7, r2, #8
   13f18:	mov	r2, r7
   13f1c:	cmp	r3, #0
   13f20:	bne	13f08 <plt_get_lib@@Base+0x364>
   13f24:	mov	r2, #0
   13f28:	b	13f30 <plt_get_lib@@Base+0x38c>
   13f2c:	ldr	r2, [r2]
   13f30:	add	r3, r1, #4
   13f34:	mov	r7, r4
   13f38:	cmp	r7, #23
   13f3c:	beq	13f5c <plt_get_lib@@Base+0x3b8>
   13f40:	ldr	r7, [r3, #4]
   13f44:	add	r6, r3, #8
   13f48:	mov	r3, r6
   13f4c:	cmp	r7, #0
   13f50:	bne	13f38 <plt_get_lib@@Base+0x394>
   13f54:	mov	r3, #0
   13f58:	b	13f68 <plt_get_lib@@Base+0x3c4>
   13f5c:	ldr	r3, [r3]
   13f60:	cmp	r3, ip
   13f64:	addcc	r3, ip, r3
   13f68:	add	r6, r1, #4
   13f6c:	mov	r7, r4
   13f70:	cmp	r7, #2
   13f74:	beq	13f94 <plt_get_lib@@Base+0x3f0>
   13f78:	ldr	r7, [r6, #4]
   13f7c:	add	r5, r6, #8
   13f80:	mov	r6, r5
   13f84:	cmp	r7, #0
   13f88:	bne	13f70 <plt_get_lib@@Base+0x3cc>
   13f8c:	mov	r6, #0
   13f90:	b	13f98 <plt_get_lib@@Base+0x3f4>
   13f94:	ldr	r6, [r6]
   13f98:	add	r1, r1, #4
   13f9c:	add	r5, r2, #2
   13fa0:	cmp	r4, r5
   13fa4:	beq	13fc4 <plt_get_lib@@Base+0x420>
   13fa8:	ldr	r4, [r1, #4]
   13fac:	add	r7, r1, #8
   13fb0:	mov	r1, r7
   13fb4:	cmp	r4, #0
   13fb8:	bne	13fa0 <plt_get_lib@@Base+0x3fc>
   13fbc:	mov	r5, #0
   13fc0:	b	13fc8 <plt_get_lib@@Base+0x424>
   13fc4:	ldr	r5, [r1]
   13fc8:	cmp	r5, #0
   13fcc:	cmpne	r6, #0
   13fd0:	beq	13fec <plt_get_lib@@Base+0x448>
   13fd4:	cmp	r3, #0
   13fd8:	cmpne	r2, #0
   13fdc:	beq	13fec <plt_get_lib@@Base+0x448>
   13fe0:	cmp	lr, #0
   13fe4:	cmpne	r8, #0
   13fe8:	bne	13ff4 <plt_get_lib@@Base+0x450>
   13fec:	sub	sp, fp, #28
   13ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ff4:	cmp	r5, r6
   13ff8:	str	ip, [sp, #4]
   13ffc:	bhi	1406c <plt_get_lib@@Base+0x4c8>
   14000:	mov	r4, r8
   14004:	add	r8, r3, #4
   14008:	mov	r9, #0
   1400c:	mvn	sl, #-268435441	; 0xf000000f
   14010:	udiv	r6, r6, r5
   14014:	ldr	r0, [r8]
   14018:	ldr	r1, [sp, #8]
   1401c:	mov	r7, lr
   14020:	and	r0, sl, r0, lsr #4
   14024:	ldr	r0, [lr, r0]
   14028:	add	r0, r4, r0
   1402c:	bl	11438 <strcmp@plt>
   14030:	cmp	r0, #0
   14034:	beq	14050 <plt_get_lib@@Base+0x4ac>
   14038:	add	r9, r9, #1
   1403c:	add	r8, r8, r5
   14040:	mov	lr, r7
   14044:	cmp	r9, r6
   14048:	bcc	14014 <plt_get_lib@@Base+0x470>
   1404c:	b	1406c <plt_get_lib@@Base+0x4c8>
   14050:	ldr	r0, [r8, #-4]
   14054:	cmp	r0, #0
   14058:	beq	1406c <plt_get_lib@@Base+0x4c8>
   1405c:	ldr	r1, [sp, #4]
   14060:	add	r0, r0, r1
   14064:	sub	sp, fp, #28
   14068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1406c:	mov	r0, #0
   14070:	sub	sp, fp, #28
   14074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014078 <plt_get_offsets@@Base>:
   14078:	push	{r4, r5, fp, lr}
   1407c:	add	fp, sp, #8
   14080:	mov	r4, r2
   14084:	bl	13e4c <plt_get_lib@@Base+0x2a8>
   14088:	cmp	r0, #0
   1408c:	moveq	r0, #0
   14090:	popeq	{r4, r5, fp, pc}
   14094:	mov	r5, r0
   14098:	mov	r0, #8
   1409c:	bl	14a0c <mmk_malloc@@Base>
   140a0:	mov	r1, #1
   140a4:	str	r1, [r4]
   140a8:	mov	r1, #0
   140ac:	str	r5, [r0]
   140b0:	str	r1, [r0, #4]
   140b4:	pop	{r4, r5, fp, pc}

000140b8 <plt_set_offsets@@Base>:
   140b8:	cmp	r1, #0
   140bc:	bxeq	lr
   140c0:	add	r0, r0, #4
   140c4:	ldr	r3, [r0]
   140c8:	ldr	ip, [r0, #-4]
   140cc:	cmp	r3, #0
   140d0:	ldreq	r3, [ip]
   140d4:	streq	r3, [r0]
   140d8:	subs	r1, r1, #1
   140dc:	add	r0, r0, #8
   140e0:	str	r2, [ip]
   140e4:	bne	140c4 <plt_set_offsets@@Base+0xc>
   140e8:	bx	lr

000140ec <plt_reset_offsets@@Base>:
   140ec:	cmp	r1, #0
   140f0:	bxeq	lr
   140f4:	add	r0, r0, #4
   140f8:	ldmda	r0, {r2, r3}
   140fc:	add	r0, r0, #8
   14100:	subs	r1, r1, #1
   14104:	str	r3, [r2]
   14108:	bne	140f8 <plt_reset_offsets@@Base+0xc>
   1410c:	bx	lr

00014110 <plt_get_real_fn@@Base>:
   14110:	push	{r4, r5, r6, sl, fp, lr}
   14114:	add	fp, sp, #16
   14118:	ldr	r6, [r0, #4]
   1411c:	mov	r4, #0
   14120:	cmp	r6, #0
   14124:	beq	1414c <plt_get_real_fn@@Base+0x3c>
   14128:	mov	r5, r1
   1412c:	mov	r0, r6
   14130:	mov	r1, r5
   14134:	bl	13e4c <plt_get_lib@@Base+0x2a8>
   14138:	cmp	r0, #0
   1413c:	bne	14154 <plt_get_real_fn@@Base+0x44>
   14140:	ldr	r6, [r6, #12]
   14144:	cmp	r6, #0
   14148:	bne	1412c <plt_get_real_fn@@Base+0x1c>
   1414c:	mov	r0, r4
   14150:	pop	{r4, r5, r6, sl, fp, pc}
   14154:	ldr	r4, [r0]
   14158:	mov	r0, r4
   1415c:	pop	{r4, r5, r6, sl, fp, pc}

00014160 <mmk_stub_context@@Base>:
   14160:	cmp	r0, #0
   14164:	ldrne	r0, [r0, #12]
   14168:	moveq	r0, #0
   1416c:	bx	lr

00014170 <mmk_stub_create_static@@Base>:
   14170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14174:	add	fp, sp, #28
   14178:	sub	sp, sp, #4
   1417c:	mov	r4, r0
   14180:	ldr	r0, [pc, #284]	; 142a4 <mmk_stub_create_static@@Base+0x134>
   14184:	mov	r9, r3
   14188:	mov	r8, r2
   1418c:	mov	r6, r1
   14190:	add	r0, pc, r0
   14194:	bl	11510 <__tls_get_addr@plt>
   14198:	mov	r7, #0
   1419c:	str	r7, [r0]
   141a0:	ldr	r0, [pc, #256]	; 142a8 <mmk_stub_create_static@@Base+0x138>
   141a4:	add	r0, pc, r0
   141a8:	bl	11510 <__tls_get_addr@plt>
   141ac:	strb	r7, [r0]
   141b0:	mov	r0, r6
   141b4:	bl	149a0 <mmk_strlen@@Base>
   141b8:	add	r0, r0, #1
   141bc:	bl	14a0c <mmk_malloc@@Base>
   141c0:	cmp	r0, #0
   141c4:	beq	1428c <mmk_stub_create_static@@Base+0x11c>
   141c8:	mov	r1, r6
   141cc:	mov	r5, r0
   141d0:	bl	14938 <mmk_strcpy@@Base>
   141d4:	mov	r0, r5
   141d8:	mov	r1, #64	; 0x40
   141dc:	bl	14908 <mmk_strchr@@Base>
   141e0:	cmp	r0, #0
   141e4:	movne	r1, #0
   141e8:	strbne	r1, [r0], #1
   141ec:	movne	r7, r0
   141f0:	bl	1378c <mmk_plt_ctx@@Base>
   141f4:	mov	r1, r7
   141f8:	bl	13ba4 <plt_get_lib@@Base>
   141fc:	cmp	r0, #0
   14200:	beq	14294 <mmk_stub_create_static@@Base+0x124>
   14204:	mov	r1, #0
   14208:	mov	r2, sp
   1420c:	str	r1, [sp]
   14210:	mov	r1, r5
   14214:	bl	14078 <plt_get_offsets@@Base>
   14218:	cmp	r0, #0
   1421c:	mvn	r6, #1
   14220:	movne	sl, r0
   14224:	ldrne	r0, [sp]
   14228:	cmpne	r0, #0
   1422c:	beq	14298 <mmk_stub_create_static@@Base+0x128>
   14230:	mov	r6, #0
   14234:	str	r6, [r4, #32]
   14238:	str	r6, [r4, #36]	; 0x24
   1423c:	ldr	r1, [pc, #104]	; 142ac <mmk_stub_create_static@@Base+0x13c>
   14240:	ldr	r1, [pc, r1]
   14244:	ldr	r2, [pc, #100]	; 142b0 <mmk_stub_create_static@@Base+0x140>
   14248:	ldr	r2, [pc, r2]
   1424c:	ldr	r3, [pc, #96]	; 142b4 <mmk_stub_create_static@@Base+0x144>
   14250:	ldr	r3, [pc, r3]
   14254:	str	r2, [r4]
   14258:	stmib	r4, {r1, r3, r9}
   1425c:	add	r1, r4, #16
   14260:	stm	r1, {r5, r7, sl}
   14264:	str	r0, [r4, #28]
   14268:	mov	r0, r4
   1426c:	mov	r1, r8
   14270:	bl	1442c <create_trampoline@@Base>
   14274:	str	r0, [r4, #32]
   14278:	mov	r2, r0
   1427c:	mov	r0, sl
   14280:	ldr	r1, [sp]
   14284:	bl	140b8 <plt_set_offsets@@Base>
   14288:	b	14298 <mmk_stub_create_static@@Base+0x128>
   1428c:	mvn	r6, #11
   14290:	b	14298 <mmk_stub_create_static@@Base+0x128>
   14294:	mvn	r6, #1
   14298:	mov	r0, r6
   1429c:	sub	sp, fp, #28
   142a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142a4:	ldrdeq	r1, [r1], -ip
   142a8:	andeq	r1, r1, r0, asr #29
   142ac:	andeq	r1, r1, r0, ror #28
   142b0:	andeq	r1, r1, r4, ror lr
   142b4:	andeq	r1, r1, ip, asr lr

000142b8 <mmk_ctx_asked@@Base>:
   142b8:	push	{fp, lr}
   142bc:	mov	fp, sp
   142c0:	ldr	r0, [pc, #24]	; 142e0 <mmk_ctx_asked@@Base+0x28>
   142c4:	add	r0, pc, r0
   142c8:	bl	11510 <__tls_get_addr@plt>
   142cc:	ldrb	r1, [r0]
   142d0:	mov	r2, #0
   142d4:	strb	r2, [r0]
   142d8:	mov	r0, r1
   142dc:	pop	{fp, pc}
   142e0:	andeq	r1, r1, r0, lsr #27

000142e4 <mmk_set_ctx@@Base>:
   142e4:	push	{r4, sl, fp, lr}
   142e8:	add	fp, sp, #8
   142ec:	mov	r4, r0
   142f0:	ldr	r0, [pc, #12]	; 14304 <mmk_set_ctx@@Base+0x20>
   142f4:	add	r0, pc, r0
   142f8:	bl	11510 <__tls_get_addr@plt>
   142fc:	str	r4, [r0]
   14300:	pop	{r4, sl, fp, pc}
   14304:	andeq	r1, r1, r8, ror sp

00014308 <mmk_ctx@@Base>:
   14308:	push	{fp, lr}
   1430c:	mov	fp, sp
   14310:	ldr	r0, [pc, #12]	; 14324 <mmk_ctx@@Base+0x1c>
   14314:	add	r0, pc, r0
   14318:	bl	11510 <__tls_get_addr@plt>
   1431c:	ldr	r0, [r0]
   14320:	pop	{fp, pc}
   14324:	andeq	r1, r1, r8, asr sp

00014328 <mmk_stub_create@@Base>:
   14328:	push	{r4, r5, r6, r7, fp, lr}
   1432c:	add	fp, sp, #16
   14330:	mov	r5, r2
   14334:	mov	r6, r1
   14338:	mov	r7, r0
   1433c:	bl	136f4 <mmk_init@@Base>
   14340:	mov	r0, #40	; 0x28
   14344:	bl	14a0c <mmk_malloc@@Base>
   14348:	mov	r1, r7
   1434c:	mov	r2, r6
   14350:	mov	r3, r5
   14354:	mov	r4, r0
   14358:	bl	14170 <mmk_stub_create_static@@Base>
   1435c:	cmn	r0, #1
   14360:	ble	1436c <mmk_stub_create@@Base+0x44>
   14364:	mov	r0, r4
   14368:	pop	{r4, r5, r6, r7, fp, pc}
   1436c:	mov	r5, r0
   14370:	mov	r0, r4
   14374:	bl	14a34 <mmk_free@@Base>
   14378:	bl	114ec <__errno_location@plt>
   1437c:	mov	r4, #0
   14380:	str	r5, [r0]
   14384:	mov	r0, r4
   14388:	pop	{r4, r5, r6, r7, fp, pc}

0001438c <mmk_stub_destroy_static@@Base>:
   1438c:	push	{r4, sl, fp, lr}
   14390:	add	fp, sp, #8
   14394:	mov	r4, r0
   14398:	ldr	r0, [r0, #24]
   1439c:	ldr	r1, [r4, #28]
   143a0:	bl	140ec <plt_reset_offsets@@Base>
   143a4:	ldr	r0, [r4, #24]
   143a8:	bl	14a34 <mmk_free@@Base>
   143ac:	ldr	r0, [r4, #32]
   143b0:	bl	14554 <destroy_trampoline@@Base>
   143b4:	ldr	r0, [r4, #16]
   143b8:	pop	{r4, sl, fp, lr}
   143bc:	b	14a34 <mmk_free@@Base>

000143c0 <mmk_stub_destroy@@Base>:
   143c0:	push	{r4, sl, fp, lr}
   143c4:	add	fp, sp, #8
   143c8:	mov	r4, r0
   143cc:	ldr	r0, [r0, #24]
   143d0:	ldr	r1, [r4, #28]
   143d4:	bl	140ec <plt_reset_offsets@@Base>
   143d8:	ldr	r0, [r4, #24]
   143dc:	bl	14a34 <mmk_free@@Base>
   143e0:	ldr	r0, [r4, #32]
   143e4:	bl	14554 <destroy_trampoline@@Base>
   143e8:	ldr	r0, [r4, #16]
   143ec:	bl	14a34 <mmk_free@@Base>
   143f0:	mov	r0, r4
   143f4:	pop	{r4, sl, fp, lr}
   143f8:	b	14a34 <mmk_free@@Base>

000143fc <mmk_ask_ctx@@Base>:
   143fc:	push	{r4, sl, fp, lr}
   14400:	add	fp, sp, #8
   14404:	mov	r4, r0
   14408:	ldr	r0, [pc, #24]	; 14428 <mmk_ask_ctx@@Base+0x2c>
   1440c:	add	r0, pc, r0
   14410:	bl	11510 <__tls_get_addr@plt>
   14414:	mov	r1, #1
   14418:	strb	r1, [r0]
   1441c:	mov	r0, r4
   14420:	pop	{r4, sl, fp, lr}
   14424:	bx	r0
   14428:	andeq	r1, r1, r8, asr ip

0001442c <create_trampoline@@Base>:
   1442c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14430:	add	fp, sp, #24
   14434:	sub	sp, sp, #8
   14438:	ldr	r8, [pc, #236]	; 1452c <create_trampoline@@Base+0x100>
   1443c:	mov	r7, r0
   14440:	ldr	r8, [pc, r8]
   14444:	ldr	r0, [pc, #228]	; 14530 <create_trampoline@@Base+0x104>
   14448:	ldr	r0, [pc, r0]
   1444c:	sub	r5, r0, r8
   14450:	cmp	r5, #4096	; 0x1000
   14454:	bcs	144c4 <create_trampoline@@Base+0x98>
   14458:	mov	r6, r1
   1445c:	mov	r0, #0
   14460:	mvn	r1, #0
   14464:	mov	r2, #7
   14468:	mov	r3, #34	; 0x22
   1446c:	str	r1, [sp]
   14470:	str	r0, [sp, #4]
   14474:	mov	r0, #0
   14478:	mov	r1, #4096	; 0x1000
   1447c:	bl	114c8 <mmap@plt>
   14480:	cmn	r0, #1
   14484:	beq	144f8 <create_trampoline@@Base+0xcc>
   14488:	str	r7, [r0]
   1448c:	str	r6, [r0, #4]
   14490:	add	r6, r0, #8
   14494:	mov	r4, r0
   14498:	mov	r1, r8
   1449c:	mov	r2, r5
   144a0:	mov	r0, r6
   144a4:	bl	1145c <memcpy@plt>
   144a8:	mov	r0, r4
   144ac:	mov	r1, #4096	; 0x1000
   144b0:	mov	r2, #5
   144b4:	bl	11444 <mprotect@plt>
   144b8:	mov	r0, r6
   144bc:	sub	sp, fp, #24
   144c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144c4:	ldr	r0, [pc, #104]	; 14534 <create_trampoline@@Base+0x108>
   144c8:	mov	r3, #45	; 0x2d
   144cc:	ldr	r0, [pc, r0]
   144d0:	ldr	r0, [r0]
   144d4:	ldr	r1, [pc, #92]	; 14538 <create_trampoline@@Base+0x10c>
   144d8:	add	r1, pc, r1
   144dc:	str	r1, [sp]
   144e0:	ldr	r1, [pc, #84]	; 1453c <create_trampoline@@Base+0x110>
   144e4:	ldr	r2, [pc, #84]	; 14540 <create_trampoline@@Base+0x114>
   144e8:	add	r1, pc, r1
   144ec:	add	r2, pc, r2
   144f0:	bl	114e0 <fprintf@plt>
   144f4:	bl	11528 <abort@plt>
   144f8:	ldr	r0, [pc, #68]	; 14544 <create_trampoline@@Base+0x118>
   144fc:	mov	r3, #69	; 0x45
   14500:	ldr	r0, [pc, r0]
   14504:	ldr	r0, [r0]
   14508:	ldr	r1, [pc, #56]	; 14548 <create_trampoline@@Base+0x11c>
   1450c:	add	r1, pc, r1
   14510:	str	r1, [sp]
   14514:	ldr	r1, [pc, #48]	; 1454c <create_trampoline@@Base+0x120>
   14518:	ldr	r2, [pc, #48]	; 14550 <create_trampoline@@Base+0x124>
   1451c:	add	r1, pc, r1
   14520:	add	r2, pc, r2
   14524:	bl	114e0 <fprintf@plt>
   14528:	bl	11528 <abort@plt>
   1452c:	andeq	r1, r1, ip, asr ip
   14530:	andeq	r1, r1, r0, asr #24
   14534:	andeq	r1, r1, r8, asr #23
   14538:	andeq	r0, r0, lr, lsr ip
   1453c:	andeq	r0, r0, r2, lsl r8
   14540:	ldrdeq	r0, [r0], -r5
   14544:	muleq	r1, r4, fp
   14548:	andeq	r0, r0, r4, lsr #24
   1454c:	ldrdeq	r0, [r0], -lr
   14550:	andeq	r0, r0, r1, lsr #23

00014554 <destroy_trampoline@@Base>:
   14554:	sub	r0, r0, #8
   14558:	mov	r1, #4096	; 0x1000
   1455c:	b	11504 <munmap@plt>

00014560 <mmk_verify_set_times@@Base>:
   14560:	push	{r4, sl, fp, lr}
   14564:	add	fp, sp, #8
   14568:	mov	r4, r0
   1456c:	ldr	r0, [pc, #12]	; 14580 <mmk_verify_set_times@@Base+0x20>
   14570:	add	r0, pc, r0
   14574:	bl	11510 <__tls_get_addr@plt>
   14578:	str	r4, [r0]
   1457c:	pop	{r4, sl, fp, pc}
   14580:	andeq	r1, r1, r4, lsl #22

00014584 <mmk_verify_times@@Base>:
   14584:	push	{r4, sl, fp, lr}
   14588:	add	fp, sp, #8
   1458c:	mov	r4, r0
   14590:	ldr	r0, [pc, #120]	; 14610 <mmk_verify_times@@Base+0x8c>
   14594:	add	r0, pc, r0
   14598:	bl	11510 <__tls_get_addr@plt>
   1459c:	ldr	r1, [r4, #4]
   145a0:	ldr	r0, [r0]
   145a4:	cmp	r1, #0
   145a8:	beq	145b8 <mmk_verify_times@@Base+0x34>
   145ac:	clz	r0, r0
   145b0:	lsr	r0, r0, #5
   145b4:	pop	{r4, sl, fp, pc}
   145b8:	ldr	r2, [r4, #8]
   145bc:	ldr	r1, [r4, #12]
   145c0:	orrs	r3, r2, r1
   145c4:	beq	145f0 <mmk_verify_times@@Base+0x6c>
   145c8:	cmp	r0, r2
   145cc:	mov	r2, #0
   145d0:	mov	r3, #0
   145d4:	movwcs	r2, #1
   145d8:	cmp	r1, #0
   145dc:	moveq	r1, r0
   145e0:	cmp	r0, r1
   145e4:	movwls	r3, #1
   145e8:	and	r0, r2, r3
   145ec:	pop	{r4, sl, fp, pc}
   145f0:	ldr	r1, [r4, #20]
   145f4:	cmp	r1, #0
   145f8:	beq	14604 <mmk_verify_times@@Base+0x80>
   145fc:	pop	{r4, sl, fp, lr}
   14600:	bx	r1
   14604:	ldr	r1, [r4, #16]
   14608:	sub	r0, r1, r0
   1460c:	b	145ac <mmk_verify_times@@Base+0x28>
   14610:	andeq	r1, r1, r0, ror #21

00014614 <mmk_verify_register_call@@Base>:
   14614:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14618:	add	fp, sp, #24
   1461c:	sub	sp, sp, #8
   14620:	mov	r9, r1
   14624:	mov	r8, r0
   14628:	str	r1, [sp, #4]
   1462c:	bl	14308 <mmk_ctx@@Base>
   14630:	bl	14160 <mmk_stub_context@@Base>
   14634:	mov	r5, r0
   14638:	ldr	r0, [r0, #8]
   1463c:	cmp	r0, #0
   14640:	bne	14660 <mmk_verify_register_call@@Base+0x4c>
   14644:	mov	r0, #4096	; 0x1000
   14648:	mov	r4, #4096	; 0x1000
   1464c:	bl	14a0c <mmk_malloc@@Base>
   14650:	cmp	r0, #0
   14654:	str	r0, [r5, #8]
   14658:	beq	14754 <mmk_verify_register_call@@Base+0x140>
   1465c:	str	r4, [r5, #16]
   14660:	mov	r0, r5
   14664:	bl	13b10 <mmk_mock_params_begin@@Base>
   14668:	cmp	r0, #0
   1466c:	beq	146ac <mmk_verify_register_call@@Base+0x98>
   14670:	mov	r6, r0
   14674:	sub	r4, r9, #4
   14678:	add	r7, r8, #4
   1467c:	add	r0, r6, #4
   14680:	mov	r1, r7
   14684:	mov	r2, r4
   14688:	bl	147dc <mmk_memcmp@@Base>
   1468c:	cmp	r0, #0
   14690:	beq	1473c <mmk_verify_register_call@@Base+0x128>
   14694:	mov	r0, r5
   14698:	mov	r1, r6
   1469c:	bl	13b30 <mmk_mock_params_next@@Base>
   146a0:	mov	r6, r0
   146a4:	cmp	r0, #0
   146a8:	bne	1467c <mmk_verify_register_call@@Base+0x68>
   146ac:	mov	r6, r5
   146b0:	ldr	r2, [r6, #12]!
   146b4:	ldr	r1, [r6, #4]
   146b8:	add	r0, r2, r9
   146bc:	add	r0, r0, #4
   146c0:	cmp	r0, r1
   146c4:	bcs	146d0 <mmk_verify_register_call@@Base+0xbc>
   146c8:	ldr	r0, [r5, #8]
   146cc:	b	146f8 <mmk_verify_register_call@@Base+0xe4>
   146d0:	add	r1, r1, #4096	; 0x1000
   146d4:	cmp	r0, r1
   146d8:	bcs	146d0 <mmk_verify_register_call@@Base+0xbc>
   146dc:	str	r1, [r5, #16]
   146e0:	ldr	r0, [r5, #8]
   146e4:	bl	14a20 <mmk_realloc@@Base>
   146e8:	cmp	r0, #0
   146ec:	str	r0, [r5, #8]
   146f0:	beq	14788 <mmk_verify_register_call@@Base+0x174>
   146f4:	ldr	r2, [r6]
   146f8:	add	r0, r0, r2
   146fc:	add	r1, sp, #4
   14700:	mov	r2, #4
   14704:	bl	14824 <mmk_memcpy@@Base>
   14708:	ldr	r0, [r5, #8]
   1470c:	ldr	r1, [r5, #12]
   14710:	ldr	r2, [sp, #4]
   14714:	add	r0, r0, r1
   14718:	mov	r1, r8
   1471c:	add	r0, r0, #4
   14720:	bl	14824 <mmk_memcpy@@Base>
   14724:	mov	r1, #1
   14728:	str	r1, [r0]
   1472c:	ldr	r1, [sp, #4]
   14730:	ldr	r0, [r5, #12]
   14734:	add	r1, r1, #4
   14738:	b	14744 <mmk_verify_register_call@@Base+0x130>
   1473c:	ldr	r1, [r6]
   14740:	mov	r0, #1
   14744:	add	r0, r1, r0
   14748:	str	r0, [r6]
   1474c:	sub	sp, fp, #24
   14750:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14754:	ldr	r0, [pc, #96]	; 147bc <mmk_verify_register_call@@Base+0x1a8>
   14758:	mov	r3, #79	; 0x4f
   1475c:	ldr	r0, [pc, r0]
   14760:	ldr	r0, [r0]
   14764:	ldr	r1, [pc, #84]	; 147c0 <mmk_verify_register_call@@Base+0x1ac>
   14768:	add	r1, pc, r1
   1476c:	str	r1, [sp]
   14770:	ldr	r1, [pc, #76]	; 147c4 <mmk_verify_register_call@@Base+0x1b0>
   14774:	ldr	r2, [pc, #76]	; 147c8 <mmk_verify_register_call@@Base+0x1b4>
   14778:	add	r1, pc, r1
   1477c:	add	r2, pc, r2
   14780:	bl	114e0 <fprintf@plt>
   14784:	bl	11528 <abort@plt>
   14788:	ldr	r0, [pc, #60]	; 147cc <mmk_verify_register_call@@Base+0x1b8>
   1478c:	mov	r3, #91	; 0x5b
   14790:	ldr	r0, [pc, r0]
   14794:	ldr	r0, [r0]
   14798:	ldr	r1, [pc, #48]	; 147d0 <mmk_verify_register_call@@Base+0x1bc>
   1479c:	add	r1, pc, r1
   147a0:	str	r1, [sp]
   147a4:	ldr	r1, [pc, #40]	; 147d4 <mmk_verify_register_call@@Base+0x1c0>
   147a8:	ldr	r2, [pc, #40]	; 147d8 <mmk_verify_register_call@@Base+0x1c4>
   147ac:	add	r1, pc, r1
   147b0:	add	r2, pc, r2
   147b4:	bl	114e0 <fprintf@plt>
   147b8:	bl	11528 <abort@plt>
   147bc:	andeq	r1, r1, r8, lsr r9
   147c0:	andeq	r0, r0, fp, lsr #20
   147c4:	andeq	r0, r0, r2, lsl #11
   147c8:	andeq	r0, r0, r6, asr #19
   147cc:	andeq	r1, r1, r4, lsl #18
   147d0:	strdeq	r0, [r0], -r7
   147d4:	andeq	r0, r0, lr, asr #10
   147d8:	muleq	r0, r2, r9

000147dc <mmk_memcmp@@Base>:
   147dc:	push	{fp, lr}
   147e0:	mov	fp, sp
   147e4:	mov	lr, r0
   147e8:	mov	r0, #0
   147ec:	cmp	r2, #0
   147f0:	popeq	{fp, pc}
   147f4:	ldrb	ip, [r1]
   147f8:	ldrb	r3, [lr]
   147fc:	cmp	r3, ip
   14800:	bne	14818 <mmk_memcmp@@Base+0x3c>
   14804:	subs	r2, r2, #1
   14808:	add	r1, r1, #1
   1480c:	add	lr, lr, #1
   14810:	bne	147f4 <mmk_memcmp@@Base+0x18>
   14814:	pop	{fp, pc}
   14818:	mov	r0, #1
   1481c:	mvncc	r0, #0
   14820:	pop	{fp, pc}

00014824 <mmk_memcpy@@Base>:
   14824:	push	{r4, r5, r6, sl, fp, lr}
   14828:	add	fp, sp, #16
   1482c:	cmp	r2, #0
   14830:	beq	148a0 <mmk_memcpy@@Base+0x7c>
   14834:	cmp	r2, #15
   14838:	bls	14884 <mmk_memcpy@@Base+0x60>
   1483c:	add	r3, r1, r2
   14840:	cmp	r3, r0
   14844:	addhi	r3, r0, r2
   14848:	cmphi	r3, r1
   1484c:	bhi	14884 <mmk_memcpy@@Base+0x60>
   14850:	bic	r4, r2, #15
   14854:	mov	r6, r0
   14858:	sub	r3, r2, r4
   1485c:	add	lr, r1, r4
   14860:	add	ip, r0, r4
   14864:	mov	r5, r4
   14868:	vld1.8	{d16-d17}, [r1]!
   1486c:	subs	r5, r5, #16
   14870:	vst1.8	{d16-d17}, [r6]!
   14874:	bne	14868 <mmk_memcpy@@Base+0x44>
   14878:	cmp	r4, r2
   1487c:	popeq	{r4, r5, r6, sl, fp, pc}
   14880:	b	14890 <mmk_memcpy@@Base+0x6c>
   14884:	mov	ip, r0
   14888:	mov	lr, r1
   1488c:	mov	r3, r2
   14890:	ldrb	r1, [lr], #1
   14894:	subs	r3, r3, #1
   14898:	strb	r1, [ip], #1
   1489c:	bne	14890 <mmk_memcpy@@Base+0x6c>
   148a0:	pop	{r4, r5, r6, sl, fp, pc}

000148a4 <mmk_strneq@@Base>:
   148a4:	push	{fp, lr}
   148a8:	mov	fp, sp
   148ac:	ldrb	ip, [r0]
   148b0:	cmp	ip, #0
   148b4:	beq	148f0 <mmk_strneq@@Base+0x4c>
   148b8:	add	lr, r0, #1
   148bc:	cmp	r2, #0
   148c0:	ldrbne	r3, [r1]
   148c4:	cmpne	r3, #0
   148c8:	beq	148f0 <mmk_strneq@@Base+0x4c>
   148cc:	uxtb	r0, ip
   148d0:	cmp	r0, r3
   148d4:	movne	r0, #0
   148d8:	popne	{fp, pc}
   148dc:	ldrb	ip, [lr], #1
   148e0:	sub	r2, r2, #1
   148e4:	add	r1, r1, #1
   148e8:	cmp	ip, #0
   148ec:	bne	148bc <mmk_strneq@@Base+0x18>
   148f0:	cmp	r2, #0
   148f4:	moveq	r0, #1
   148f8:	ldrbne	r0, [r1]
   148fc:	clzne	r0, r0
   14900:	lsrne	r0, r0, #5
   14904:	pop	{fp, pc}

00014908 <mmk_strchr@@Base>:
   14908:	ldrb	r3, [r0]
   1490c:	mov	r2, r0
   14910:	mov	r0, #0
   14914:	b	1491c <mmk_strchr@@Base+0x14>
   14918:	ldrb	r3, [r2, #1]!
   1491c:	cmp	r3, #0
   14920:	bxeq	lr
   14924:	uxtb	r3, r3
   14928:	cmp	r3, r1
   1492c:	bne	14918 <mmk_strchr@@Base+0x10>
   14930:	mov	r0, r2
   14934:	bx	lr

00014938 <mmk_strcpy@@Base>:
   14938:	ldrb	r2, [r1]
   1493c:	cmp	r2, #0
   14940:	beq	14958 <mmk_strcpy@@Base+0x20>
   14944:	add	r1, r1, #1
   14948:	strb	r2, [r0], #1
   1494c:	ldrb	r2, [r1], #1
   14950:	cmp	r2, #0
   14954:	bne	14948 <mmk_strcpy@@Base+0x10>
   14958:	mov	r1, #0
   1495c:	strb	r1, [r0]
   14960:	bx	lr

00014964 <mmk_strncpy@@Base>:
   14964:	cmp	r2, #0
   14968:	ldrbne	r3, [r1]
   1496c:	cmpne	r3, #0
   14970:	beq	14994 <mmk_strncpy@@Base+0x30>
   14974:	add	r1, r1, #1
   14978:	rsb	r2, r2, #1
   1497c:	cmp	r2, #0
   14980:	strb	r3, [r0], #1
   14984:	ldrbne	r3, [r1], #1
   14988:	addne	r2, r2, #1
   1498c:	cmpne	r3, #0
   14990:	bne	1497c <mmk_strncpy@@Base+0x18>
   14994:	mov	r1, #0
   14998:	strb	r1, [r0]
   1499c:	bx	lr

000149a0 <mmk_strlen@@Base>:
   149a0:	ldrb	r1, [r0]
   149a4:	cmp	r1, #0
   149a8:	moveq	r0, #0
   149ac:	bxeq	lr
   149b0:	add	r1, r0, #1
   149b4:	mov	r0, #0
   149b8:	ldrb	r2, [r1, r0]
   149bc:	add	r0, r0, #1
   149c0:	cmp	r2, #0
   149c4:	bne	149b8 <mmk_strlen@@Base+0x18>
   149c8:	bx	lr

000149cc <mmk_isspace@@Base>:
   149cc:	sub	r2, r0, #9
   149d0:	cmp	r2, #23
   149d4:	bhi	149f8 <mmk_isspace@@Base+0x2c>
   149d8:	movw	r3, #17
   149dc:	mov	ip, #1
   149e0:	mov	r1, #1
   149e4:	movt	r3, #128	; 0x80
   149e8:	tst	r3, ip, lsl r2
   149ec:	beq	149f8 <mmk_isspace@@Base+0x2c>
   149f0:	mov	r0, r1
   149f4:	bx	lr
   149f8:	sub	r0, r0, #10
   149fc:	clz	r0, r0
   14a00:	lsr	r1, r0, #5
   14a04:	mov	r0, r1
   14a08:	bx	lr

00014a0c <mmk_malloc@@Base>:
   14a0c:	ldr	r1, [pc, #8]	; 14a1c <mmk_malloc@@Base+0x10>
   14a10:	ldr	r1, [pc, r1]
   14a14:	ldr	r1, [r1]
   14a18:	bx	r1
   14a1c:	andeq	r1, r1, r4, lsr #13

00014a20 <mmk_realloc@@Base>:
   14a20:	ldr	r2, [pc, #8]	; 14a30 <mmk_realloc@@Base+0x10>
   14a24:	ldr	r2, [pc, r2]
   14a28:	ldr	r2, [r2]
   14a2c:	bx	r2
   14a30:	andeq	r1, r1, r0, lsl #13

00014a34 <mmk_free@@Base>:
   14a34:	ldr	r1, [pc, #8]	; 14a44 <mmk_free@@Base+0x10>
   14a38:	ldr	r1, [pc, r1]
   14a3c:	ldr	r1, [r1]
   14a40:	bx	r1
   14a44:	andeq	r1, r1, r8, ror r6

00014a48 <mmk_init_vital_functions@@Base>:
   14a48:	push	{r4, sl, fp, lr}
   14a4c:	add	fp, sp, #8
   14a50:	sub	sp, sp, #8
   14a54:	mov	r4, r0
   14a58:	mov	r0, #0
   14a5c:	bl	11498 <malloc@plt>
   14a60:	mov	r1, #0
   14a64:	bl	11474 <realloc@plt>
   14a68:	bl	11450 <free@plt>
   14a6c:	ldr	r1, [pc, #260]	; 14b78 <mmk_init_vital_functions@@Base+0x130>
   14a70:	mov	r0, r4
   14a74:	add	r1, pc, r1
   14a78:	bl	14110 <plt_get_real_fn@@Base>
   14a7c:	ldr	r1, [pc, #248]	; 14b7c <mmk_init_vital_functions@@Base+0x134>
   14a80:	cmp	r0, #0
   14a84:	ldr	r1, [pc, r1]
   14a88:	str	r0, [r1]
   14a8c:	beq	14b10 <mmk_init_vital_functions@@Base+0xc8>
   14a90:	ldr	r1, [pc, #232]	; 14b80 <mmk_init_vital_functions@@Base+0x138>
   14a94:	mov	r0, r4
   14a98:	add	r1, pc, r1
   14a9c:	bl	14110 <plt_get_real_fn@@Base>
   14aa0:	ldr	r1, [pc, #220]	; 14b84 <mmk_init_vital_functions@@Base+0x13c>
   14aa4:	cmp	r0, #0
   14aa8:	ldr	r1, [pc, r1]
   14aac:	str	r0, [r1]
   14ab0:	beq	14b44 <mmk_init_vital_functions@@Base+0xfc>
   14ab4:	ldr	r1, [pc, #204]	; 14b88 <mmk_init_vital_functions@@Base+0x140>
   14ab8:	mov	r0, r4
   14abc:	add	r1, pc, r1
   14ac0:	bl	14110 <plt_get_real_fn@@Base>
   14ac4:	ldr	r1, [pc, #192]	; 14b8c <mmk_init_vital_functions@@Base+0x144>
   14ac8:	cmp	r0, #0
   14acc:	ldr	r1, [pc, r1]
   14ad0:	str	r0, [r1]
   14ad4:	subne	sp, fp, #8
   14ad8:	popne	{r4, sl, fp, pc}
   14adc:	ldr	r0, [pc, #204]	; 14bb0 <mmk_init_vital_functions@@Base+0x168>
   14ae0:	mov	r3, #90	; 0x5a
   14ae4:	ldr	r0, [pc, r0]
   14ae8:	ldr	r0, [r0]
   14aec:	ldr	r1, [pc, #192]	; 14bb4 <mmk_init_vital_functions@@Base+0x16c>
   14af0:	add	r1, pc, r1
   14af4:	str	r1, [sp]
   14af8:	ldr	r1, [pc, #184]	; 14bb8 <mmk_init_vital_functions@@Base+0x170>
   14afc:	ldr	r2, [pc, #184]	; 14bbc <mmk_init_vital_functions@@Base+0x174>
   14b00:	add	r1, pc, r1
   14b04:	add	r2, pc, r2
   14b08:	bl	114e0 <fprintf@plt>
   14b0c:	bl	11528 <abort@plt>
   14b10:	ldr	r0, [pc, #120]	; 14b90 <mmk_init_vital_functions@@Base+0x148>
   14b14:	mov	r3, #88	; 0x58
   14b18:	ldr	r0, [pc, r0]
   14b1c:	ldr	r0, [r0]
   14b20:	ldr	r1, [pc, #108]	; 14b94 <mmk_init_vital_functions@@Base+0x14c>
   14b24:	add	r1, pc, r1
   14b28:	str	r1, [sp]
   14b2c:	ldr	r1, [pc, #100]	; 14b98 <mmk_init_vital_functions@@Base+0x150>
   14b30:	ldr	r2, [pc, #100]	; 14b9c <mmk_init_vital_functions@@Base+0x154>
   14b34:	add	r1, pc, r1
   14b38:	add	r2, pc, r2
   14b3c:	bl	114e0 <fprintf@plt>
   14b40:	bl	11528 <abort@plt>
   14b44:	ldr	r0, [pc, #84]	; 14ba0 <mmk_init_vital_functions@@Base+0x158>
   14b48:	mov	r3, #89	; 0x59
   14b4c:	ldr	r0, [pc, r0]
   14b50:	ldr	r0, [r0]
   14b54:	ldr	r1, [pc, #72]	; 14ba4 <mmk_init_vital_functions@@Base+0x15c>
   14b58:	add	r1, pc, r1
   14b5c:	str	r1, [sp]
   14b60:	ldr	r1, [pc, #64]	; 14ba8 <mmk_init_vital_functions@@Base+0x160>
   14b64:	ldr	r2, [pc, #64]	; 14bac <mmk_init_vital_functions@@Base+0x164>
   14b68:	add	r1, pc, r1
   14b6c:	add	r2, pc, r2
   14b70:	bl	114e0 <fprintf@plt>
   14b74:	bl	11528 <abort@plt>
   14b78:	andeq	r0, r0, pc, lsr #14
   14b7c:	andeq	r1, r1, r0, lsr r6
   14b80:	muleq	r0, r9, r7
   14b84:	strdeq	r1, [r1], -ip
   14b88:			; <UNDEFINED> instruction: 0x000007b5
   14b8c:	andeq	r1, r1, r4, ror #11
   14b90:	andeq	r1, r1, ip, ror r5
   14b94:	ldrdeq	r0, [r0], -r7
   14b98:	andeq	r0, r0, r6, asr #3
   14b9c:	andeq	r0, r0, r2, ror r6
   14ba0:	andeq	r1, r1, r8, asr #10
   14ba4:	andeq	r0, r0, r1, ror #13
   14ba8:	muleq	r0, r2, r1
   14bac:	andeq	r0, r0, lr, lsr r6
   14bb0:			; <UNDEFINED> instruction: 0x000115b0
   14bb4:	andeq	r0, r0, r6, lsl #15
   14bb8:	strdeq	r0, [r0], -sl
   14bbc:	andeq	r0, r0, r6, lsr #13

00014bc0 <mmk_when_init@@Base>:
   14bc0:	push	{r4, sl, fp, lr}
   14bc4:	add	fp, sp, #8
   14bc8:	mov	r4, r0
   14bcc:	ldr	r0, [pc, #12]	; 14be0 <mmk_when_init@@Base+0x20>
   14bd0:	add	r0, pc, r0
   14bd4:	bl	11510 <__tls_get_addr@plt>
   14bd8:	str	r4, [r0]
   14bdc:	pop	{r4, sl, fp, pc}
   14be0:	andeq	r1, r1, ip, lsr #9

00014be4 <mmk_when_get_result@@Base>:
   14be4:	push	{fp, lr}
   14be8:	mov	fp, sp
   14bec:	ldr	r0, [pc, #12]	; 14c00 <mmk_when_get_result@@Base+0x1c>
   14bf0:	add	r0, pc, r0
   14bf4:	bl	11510 <__tls_get_addr@plt>
   14bf8:	ldr	r0, [r0]
   14bfc:	pop	{fp, pc}
   14c00:	andeq	r1, r1, ip, lsl #9

00014c04 <mmk_when_impl@@Base>:
   14c04:	push	{r4, r5, fp, lr}
   14c08:	add	fp, sp, #8
   14c0c:	mov	r4, r1
   14c10:	mov	r5, r0
   14c14:	bl	13884 <mmk_matcher_ctx@@Base>
   14c18:	str	r0, [r4]
   14c1c:	ldr	r0, [r5]
   14c20:	str	r0, [r4, #4]
   14c24:	str	r4, [r5]
   14c28:	pop	{r4, r5, fp, pc}

00014c2c <mmk_trampoline@@Base>:
   14c2c:	sub	ip, pc, #8
   14c30:	push	{r0, r1, r2, r3}
   14c34:	push	{ip, lr}
   14c38:	ldr	r0, [ip, #-8]
   14c3c:	ldr	ip, [r0, #4]
   14c40:	blx	ip
   14c44:	pop	{ip, lr}
   14c48:	push	{ip, lr}
   14c4c:	ldr	ip, [ip, #-8]
   14c50:	ldr	ip, [ip]
   14c54:	blx	ip
   14c58:	cmp	r0, #0
   14c5c:	bne	14c6c <mmk_trampoline@@Base+0x40>
   14c60:	pop	{ip, lr}
   14c64:	pop	{r0, r1, r2, r3}
   14c68:	ldr	pc, [ip, #-4]
   14c6c:	pop	{ip, lr}
   14c70:	pop	{r0, r1, r2, r3}
   14c74:	push	{ip, lr}
   14c78:	ldr	ip, [ip, #-8]
   14c7c:	ldr	ip, [ip, #8]
   14c80:	blx	ip
   14c84:	pop	{ip, pc}

00014c88 <mmk_trampoline_end@@Base>:
   14c88:	nop	{0}

00014c8c <__libc_csu_init@@Base>:
   14c8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14c90:	mov	r7, r0
   14c94:	ldr	r6, [pc, #72]	; 14ce4 <__libc_csu_init@@Base+0x58>
   14c98:	ldr	r5, [pc, #72]	; 14ce8 <__libc_csu_init@@Base+0x5c>
   14c9c:	add	r6, pc, r6
   14ca0:	add	r5, pc, r5
   14ca4:	sub	r6, r6, r5
   14ca8:	mov	r8, r1
   14cac:	mov	r9, r2
   14cb0:	bl	1140c <strstr@plt-0x20>
   14cb4:	asrs	r6, r6, #2
   14cb8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14cbc:	mov	r4, #0
   14cc0:	add	r4, r4, #1
   14cc4:	ldr	r3, [r5], #4
   14cc8:	mov	r2, r9
   14ccc:	mov	r1, r8
   14cd0:	mov	r0, r7
   14cd4:	blx	r3
   14cd8:	cmp	r6, r4
   14cdc:	bne	14cc0 <__libc_csu_init@@Base+0x34>
   14ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ce4:	andeq	r1, r1, r0, asr r2
   14ce8:	andeq	r1, r1, r8, asr #4

00014cec <__libc_csu_fini@@Base>:
   14cec:	bx	lr

Disassembly of section .fini:

00014cf0 <.fini>:
   14cf0:	push	{r3, lr}
   14cf4:	pop	{r3, pc}
